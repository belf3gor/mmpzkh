#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныеПроцедурыИФункции

#Область ФормированиеРегламентированногоОтчета

Процедура СформироватьСтруктуруРеквизитовФормы(ИмяФормы, СтруктураРеквизитовФормы) Экспорт
	
	СтруктураРеквизитовФормы = Новый Структура;
	
	Если ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2011Кв4") Тогда
		СформироватьСтруктуруРеквизитовФормы2014Кв1(СтруктураРеквизитовФормы);
		
	ИначеЕсли ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2019Кв1") Тогда
		СформироватьСтруктуруРеквизитовФормы2019Кв1(СтруктураРеквизитовФормы);
		
	Иначе
		// Элементы общие для форм не указанных ранее.
		СтруктураРеквизитовФормы.Вставить("АдресВоВремХранилищеДеревоНастроекФормаОтчета");
		
	КонецЕсли;
	
	// Элементы общие для всех форм.
	СтруктураРеквизитовФормы.Вставить("УчетРасходовПоЭлементамЗатрат", Новый Структура);
	СтруктураРеквизитовФормы.Вставить("ГруппаОрганизаций", Новый СписокЗначений);
	СтруктураРеквизитовФормы.Вставить("ОтображатьКнопкуЗаполнить", Ложь);
	СтруктураРеквизитовФормы.Вставить("ОтображатьКнопкуРасшифровать", Ложь);
	СтруктураРеквизитовФормы.Вставить("мСохранятьРасшифровку", Истина);
	СтруктураРеквизитовФормы.Вставить("ФлажокОтклАвтоРасчет", Ложь);
	СтруктураРеквизитовФормы.Вставить("ОКВЭД",  "");
	СтруктураРеквизитовФормы.Вставить("ОКВЭД2", "");
	СтруктураРеквизитовФормы.Вставить("ОснВидДеят",  "");
	СтруктураРеквизитовФормы.Вставить("ОснВидДеят2", "");
	СтруктураРеквизитовФормы.Вставить("мВыбраннаяФорма");
	СтруктураРеквизитовФормы.Вставить("мСкопированаФорма");
	СтруктураРеквизитовФормы.Вставить("мСохраненныйДок");
	СтруктураРеквизитовФормы.Вставить("мДатаНачалаПериодаОтчета");
	СтруктураРеквизитовФормы.Вставить("мДатаКонцаПериодаОтчета");
	СтруктураРеквизитовФормы.Вставить("мЗаписьЗапрещена");
	СтруктураРеквизитовФормы.Вставить("мЗаписываетсяНовыйДокумент");
	СтруктураРеквизитовФормы.Вставить("мВариант");
	СтруктураРеквизитовФормы.Вставить("мПечатьБезШтрихкодаРазрешена");
	СтруктураРеквизитовФормы.Вставить("мСтрокаФормата");
	СтруктураРеквизитовФормы.Вставить("мПечатаемыеРазделы");
	СтруктураРеквизитовФормы.Вставить("мДелитель");
	СтруктураРеквизитовФормы.Вставить("мПечатныеФормы");
	СтруктураРеквизитовФормы.Вставить("мВПрограммеИзмененаОрганизация");
	СтруктураРеквизитовФормы.Вставить("мТипАдреса");
	СтруктураРеквизитовФормы.Вставить("мАдресДляВыгрузки");
	СтруктураРеквизитовФормы.Вставить("мБезОткрытияФормы");
	СтруктураРеквизитовФормы.Вставить("мРежимПечати");
	СтруктураРеквизитовФормы.Вставить("ЗаголовокДатаОтчетная");
	СтруктураРеквизитовФормы.Вставить("ЗаголовокДатаКонцаПрошлогоГода");
	СтруктураРеквизитовФормы.Вставить("ЗаголовокДатаКонцаПозапрошлогоГода");
	СтруктураРеквизитовФормы.Вставить("ЗаголовокДатаОтчетногоПериода");
	СтруктураРеквизитовФормы.Вставить("ЗаголовокДатаОтчетногоПериодаПрошлогоГода");
	СтруктураРеквизитовФормы.Вставить("ЗаголовокДатаАналогичногоПериодаПрошлогоГода");
	СтруктураРеквизитовФормы.Вставить("ПериодЗагрузкиДанных");
	СтруктураРеквизитовФормы.Вставить("ОтчетныйГодЗагрузкиДанных");
	СтруктураРеквизитовФормы.Вставить("НаимТекущегоРаздела");
	СтруктураРеквизитовФормы.Вставить("ВидДокумента");
	СтруктураРеквизитовФормы.Вставить("СтрПериодОтчета");
	СтруктураРеквизитовФормы.Вставить("Организация");
	СтруктураРеквизитовФормы.Вставить("ЕдиницаИзмерения");
	СтруктураРеквизитовФормы.Вставить("ТочностьЕдиницыИзмерения");
	СтруктураРеквизитовФормы.Вставить("ИП");
	СтруктураРеквизитовФормы.Вставить("НаимОрганизации");
	СтруктураРеквизитовФормы.Вставить("ВыводитьСтраницуВТаблДокНаСервере");
	СтруктураРеквизитовФормы.Вставить("АдресВременногоХранилищаРасшифровки");
	СтруктураРеквизитовФормы.Вставить("ПрименениеЕНВД");
	СтруктураРеквизитовФормы.Вставить("ПрименениеУСН0");
	СтруктураРеквизитовФормы.Вставить("ПрименениеУСН1");
	СтруктураРеквизитовФормы.Вставить("мПроверятьСоотношенияПриПечатиИВыгрузки");
	СтруктураРеквизитовФормы.Вставить("ЭтоБалансНекоммерческойОрганизации");
	СтруктураРеквизитовФормы.Вставить("мОписаниеТиповЧислоЕ");
	СтруктураРеквизитовФормы.Вставить("СоответствиеПоказателейМногострочныхЧастейИхОписанию");
	СтруктураРеквизитовФормы.Вставить("ЗаголовкиОтчетов");
	СтруктураРеквизитовФормы.Вставить("СписокПечатаемыхЛистов");
	СтруктураРеквизитовФормы.Вставить("ТекущаяСтрокаРазделовОтчета");
	СтруктураРеквизитовФормы.Вставить("АдресВоВременномХранилище");
	СтруктураРеквизитовФормы.Вставить("ДоступенМеханизмПечатиРеглОтчетностиСДвухмернымШтрихкодомPDF417");
	СтруктураРеквизитовФормы.Вставить("СформироватьФормуОтчетаАвтоматически");
	СтруктураРеквизитовФормы.Вставить("КоличествоСтрокИнформационногоМакета");
	СтруктураРеквизитовФормы.Вставить("ИмяСохраняемогоПараметра");
	СтруктураРеквизитовФормы.Вставить("СохраненныйВыборПользователя");
	
	СтруктураРеквизитовФормы.Вставить("ОборотыСчета75_01");
	СтруктураРеквизитовФормы.Вставить("ВключенныеДопСтрокиОФРПриПримененииЕНВД");
	
	СтруктураРеквизитовФормы.Вставить("АдресВоВремХранилищеСтруктураМногострочныхЧастей");
	СтруктураРеквизитовФормы.Вставить("АдресВоВремХранилищеДеревоНастроекБаланс");
	СтруктураРеквизитовФормы.Вставить("АдресВоВремХранилищеТаблицаСоставПоказателей");
	
	СтруктураРеквизитовФормы.Вставить("СпособСозданияОрганизации");
	СтруктураРеквизитовФормы.Вставить("ДатаСозданияОрганизации");
	СтруктураРеквизитовФормы.Вставить("ДатаАктуальностиДанных");
	
	// Параметр используется для открытия формы длительной операции
	// при автоматическом заполнении отчета при создании.
	//   Значения:
	//     Неопределено - задание не запускалось.
	//     Структура    - параметры запуска и результат.
	СтруктураРеквизитовФормы.Вставить("РезультатЗапускаАвтозаполненияПриСоздании");
	
КонецПроцедуры

Процедура СформироватьСтруктуруРеквизитовФормы2014Кв1(СтруктураРеквизитовФормы)
	
	СтруктураРеквизитовФормы.Вставить("мВерсияФормы", "01/01/2018");
	
	СтруктураРеквизитовФормы.Вставить("АдресВоВремХранилищеДеревоНастроекФормаОтчета");
	
	СтруктураРеквизитовФормы.Вставить("ФайлПояснительнойЗаписки");
	СтруктураРеквизитовФормы.Вставить("ФайлАудиторскогоЗаключения");
	СтруктураРеквизитовФормы.Вставить("ФайлЗаявленияСоюзаСельхозпроизводителей");
	
КонецПроцедуры

Процедура СформироватьСтруктуруРеквизитовФормы2019Кв1(СтруктураРеквизитовФормы)
	
	СтруктураРеквизитовФормы.Вставить("мВерсияФормы", "01/01/2019");
	СтруктураРеквизитовФормы.Вставить("РедакцияФормы");
	
	СтруктураРеквизитовФормы.Вставить("АдресВоВремХранилищеДеревоНастроекОФР");
	
	СтруктураРеквизитовФормы.Вставить("ФайлПояснительнойЗаписки");
	СтруктураРеквизитовФормы.Вставить("ФайлАудиторскогоЗаключения");
	
КонецПроцедуры

#КонецОбласти

#Область НастройкиФормОтчетности

Функция ПолучитьСтруктуруОтчета2011Кв4(ИмяФормы, СтруктураРеквизитовФормы) Экспорт
	
	СоставНастройкаОтчета = Новый Структура;
	
	СтруктураОтчета = Новый Структура;
	
	Если СтруктураРеквизитовФормы.ЭтоБалансНекоммерческойОрганизации Тогда
		
		СтруктураОтчета.Вставить("ИмяСтраницы", "Баланс");
		СтруктураОтчета.Вставить("ИмяМакета", "БалансНКО");
		СтруктураОтчета.Вставить("ИмяСекцииПоказателей", "Баланс_НКО");
		СтруктураОтчета.Вставить("ИмяОписанияМногострочныхЧастей", "БалансНКО");
		СтруктураОтчета.Вставить("ИмяСекцииНастройкиСоставаПоказателей", "БалансНКО");
		СтруктураОтчета.Вставить("ИдентификаторАвтозаполнения", "БалансНКО");
		
	Иначе
		
		СтруктураОтчета.Вставить("ИмяСтраницы", "Баланс");
		СтруктураОтчета.Вставить("ИмяМакета", "Баланс");
		СтруктураОтчета.Вставить("ИмяСекцииПоказателей", "Баланс_КО");
		СтруктураОтчета.Вставить("ИмяОписанияМногострочныхЧастей", "Баланс");
		СтруктураОтчета.Вставить("ИмяСекцииНастройкиСоставаПоказателей", "Баланс");
		СтруктураОтчета.Вставить("ИдентификаторАвтозаполнения", "Баланс");
		
	КонецЕсли;
	
	СоставНастройкаОтчета.Вставить("Баланс", СтруктураОтчета);
	
	ДополнитьСтруктуруОтчетаОбщимиОтчетами(ИмяФормы, СоставНастройкаОтчета, СтруктураРеквизитовФормы);
	
	Возврат СоставНастройкаОтчета;
	
КонецФункции

Процедура ДополнитьСтруктуруОтчетаОбщимиОтчетами(ИмяФормы, СоставНастройкаОтчета, СтруктураРеквизитовФормы) Экспорт
	
	// Отчет о прибылях и убытках.
	СтруктураОтчета = Новый Структура;
	Если ИспользуютсяМакетыЕНВД(ИмяФормы, СтруктураРеквизитовФормы) Тогда
		СтруктураОтчета.Вставить("ИмяСтраницы",                    "ФормаОтчета");
		СтруктураОтчета.Вставить("ИмяМакета",                      "ОПУ_ЕНВД");
		СтруктураОтчета.Вставить("ИмяСекцииПоказателей",           "ФормаОтчетаЕНВД");
		СтруктураОтчета.Вставить("ИмяОписанияМногострочныхЧастей", "ОПУ_ЕНВД");
		СтруктураОтчета.Вставить("ИмяСекцииНастройкиСоставаПоказателей", "ОПУ_ЕНВД");
	Иначе
		СтруктураОтчета.Вставить("ИмяСтраницы",                    "ФормаОтчета");
		СтруктураОтчета.Вставить("ИмяМакета",                      "ОПУ_НеЕНВД");
		СтруктураОтчета.Вставить("ИмяСекцииПоказателей",           "ФормаОтчетаНеЕНВД");
		СтруктураОтчета.Вставить("ИмяОписанияМногострочныхЧастей", "ОПУ_НеЕНВД");
		СтруктураОтчета.Вставить("ИмяСекцииНастройкиСоставаПоказателей", "ОПУ_НеЕНВД");
	КонецЕсли;
	
	СоставНастройкаОтчета.Вставить("ОПУ", СтруктураОтчета);
	
	// Отчет об изменениях капитала.
	СтруктураОтчета = Новый Структура;
	СтруктураОтчета.Вставить("ИмяСтраницы",                    "ОИК");
	СтруктураОтчета.Вставить("ИмяМакета",                      "ОИК");
	СтруктураОтчета.Вставить("ИмяСекцииПоказателей",           "ОИК");
	СтруктураОтчета.Вставить("ИмяОписанияМногострочныхЧастей", "ОИК");
	
	СоставНастройкаОтчета.Вставить("ОИК", СтруктураОтчета);
	
	// Отчет о движении денежных средств.
	СтруктураОтчета = Новый Структура;
	СтруктураОтчета.Вставить("ИмяСтраницы",                    "ОДДС");
	СтруктураОтчета.Вставить("ИмяМакета",                      "ОДДС");
	СтруктураОтчета.Вставить("ИмяСекцииПоказателей",           "ОДДС");
	СтруктураОтчета.Вставить("ИмяОписанияМногострочныхЧастей", "ОДДС");
	
	СоставНастройкаОтчета.Вставить("ОДДС", СтруктураОтчета);
	
	// Отчет о целевом использовании средств.
	СтруктураОтчета = Новый Структура;
	СтруктураОтчета.Вставить("ИмяСтраницы", "ОЦИПС");
	
	Если ЗначениеЗаполнено(СтруктураРеквизитовФормы.мСохраненныйДок) Тогда
		ДатаОкончания = СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания;
	Иначе
		ДатаОкончания = СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета;
	КонецЕсли;
		
	Если ДатаОкончания >= '20180101' Тогда
		СтруктураОтчета.Вставить("ИмяМакета",            "ОЦИС");
		СтруктураОтчета.Вставить("ИмяСекцииПоказателей", "ОЦИС");
	Иначе
		СтруктураОтчета.Вставить("ИмяСтраницы",          "ОЦИПС");
		СтруктураОтчета.Вставить("ИмяМакета",            "ОЦИПС");
		СтруктураОтчета.Вставить("ИмяСекцииПоказателей", "ОЦИПС");
	КонецЕсли;
	СтруктураОтчета.Вставить("ИмяОписанияМногострочныхЧастей", "");
	
	СоставНастройкаОтчета.Вставить("ОЦИПС", СтруктураОтчета);
	
	// Расчет стоимости чистых активов акционерного общества.
	СтруктураОтчета = Новый Структура;
	СтруктураОтчета.Вставить("ИмяСтраницы",                    "РасчетАктивов");
			
	Если ДатаОкончания >= '20120101' Тогда
		СтруктураОтчета.Вставить("ИмяМакета",                  "РасчетАктивов_2012Кв1");
		СтруктураОтчета.Вставить("ИмяСекцииПоказателей",       "РасчетАктивов");
	Иначе
		СтруктураОтчета.Вставить("ИмяМакета",                  "РасчетАктивов");
		СтруктураОтчета.Вставить("ИмяСекцииПоказателей",       "РасчетАктивов");
	КонецЕсли;
	СтруктураОтчета.Вставить("ИмяОписанияМногострочныхЧастей", "");
	
	СоставНастройкаОтчета.Вставить("РасчетАктивов", СтруктураОтчета);
	
	// Пояснения к бухгалтерскому балансу и отчету о прибылях и убытках. Раздел 1.
	СтруктураОтчета = Новый Структура;
	СтруктураОтчета.Вставить("ИмяСтраницы",                    "Пояснения1");
	СтруктураОтчета.Вставить("ИмяМакета",                      "Пояснения1");
	СтруктураОтчета.Вставить("ИмяСекцииПоказателей",           "Пояснения1");
	СтруктураОтчета.Вставить("ИмяОписанияМногострочныхЧастей", "Пояснения1");
	
	СоставНастройкаОтчета.Вставить("Пояснения1", СтруктураОтчета);
	
	// Пояснения к бухгалтерскому балансу и отчету о прибылях и убытках. Раздел 2.
	СтруктураОтчета = Новый Структура;
	СтруктураОтчета.Вставить("ИмяСтраницы",                    "Пояснения2");
	СтруктураОтчета.Вставить("ИмяМакета",                      "Пояснения2");
	СтруктураОтчета.Вставить("ИмяСекцииПоказателей",           "Пояснения2");
	СтруктураОтчета.Вставить("ИмяОписанияМногострочныхЧастей", "Пояснения2");
	
	СоставНастройкаОтчета.Вставить("Пояснения2", СтруктураОтчета);
	
	// Пояснения к бухгалтерскому балансу и отчету о прибылях и убытках. Раздел 3.
	СтруктураОтчета = Новый Структура;
	СтруктураОтчета.Вставить("ИмяСтраницы",                    "Пояснения3");
	СтруктураОтчета.Вставить("ИмяМакета",                      "Пояснения3");
	СтруктураОтчета.Вставить("ИмяСекцииПоказателей",           "Пояснения3");
	СтруктураОтчета.Вставить("ИмяОписанияМногострочныхЧастей", "Пояснения3");
	
	СоставНастройкаОтчета.Вставить("Пояснения3", СтруктураОтчета);
	
	// Пояснения к бухгалтерскому балансу и отчету о прибылях и убытках. Раздел 4.
	СтруктураОтчета = Новый Структура;
	СтруктураОтчета.Вставить("ИмяСтраницы",                    "Пояснения4");
	СтруктураОтчета.Вставить("ИмяМакета",                      "Пояснения4");
	СтруктураОтчета.Вставить("ИмяСекцииПоказателей",           "Пояснения4");
	СтруктураОтчета.Вставить("ИмяОписанияМногострочныхЧастей", "Пояснения4");
	
	СоставНастройкаОтчета.Вставить("Пояснения4", СтруктураОтчета);
	
	// Пояснения к бухгалтерскому балансу и отчету о прибылях и убытках. Раздел 5.
	СтруктураОтчета = Новый Структура;
	СтруктураОтчета.Вставить("ИмяСтраницы",                    "Пояснения5");
	СтруктураОтчета.Вставить("ИмяМакета",                      "Пояснения5");
	СтруктураОтчета.Вставить("ИмяСекцииПоказателей",           "Пояснения5");
	СтруктураОтчета.Вставить("ИмяОписанияМногострочныхЧастей", "Пояснения5");
	
	СоставНастройкаОтчета.Вставить("Пояснения5", СтруктураОтчета);
	
	// Пояснения к бухгалтерскому балансу и отчету о прибылях и убытках. Раздел 6.
	СтруктураОтчета = Новый Структура;
	СтруктураОтчета.Вставить("ИмяСтраницы",                    "Пояснения6");
	СтруктураОтчета.Вставить("ИмяМакета",                      "Пояснения6");
	СтруктураОтчета.Вставить("ИмяСекцииПоказателей",           "Пояснения6");
	СтруктураОтчета.Вставить("ИмяОписанияМногострочныхЧастей", "Пояснения6");
	
	СоставНастройкаОтчета.Вставить("Пояснения6", СтруктураОтчета);
	
	// Пояснения к бухгалтерскому балансу и отчету о прибылях и убытках. Раздел 7.
	СтруктураОтчета = Новый Структура;
	СтруктураОтчета.Вставить("ИмяСтраницы",                    "Пояснения7");
	СтруктураОтчета.Вставить("ИмяМакета",                      "Пояснения7");
	СтруктураОтчета.Вставить("ИмяСекцииПоказателей",           "Пояснения7");
	СтруктураОтчета.Вставить("ИмяОписанияМногострочныхЧастей", "Пояснения7");
	
	СоставНастройкаОтчета.Вставить("Пояснения7", СтруктураОтчета);
	
	// Пояснения к бухгалтерскому балансу и отчету о прибылях и убытках. Раздел 8.
	СтруктураОтчета = Новый Структура;
	СтруктураОтчета.Вставить("ИмяСтраницы",                    "Пояснения8");
	СтруктураОтчета.Вставить("ИмяМакета",                      "Пояснения8");
	СтруктураОтчета.Вставить("ИмяСекцииПоказателей",           "Пояснения8");
	СтруктураОтчета.Вставить("ИмяОписанияМногострочныхЧастей", "Пояснения8");
	
	СоставНастройкаОтчета.Вставить("Пояснения8", СтруктураОтчета);
	
	// Пояснения к бухгалтерскому балансу и отчету о прибылях и убытках. Раздел 9.
	СтруктураОтчета = Новый Структура;
	СтруктураОтчета.Вставить("ИмяСтраницы",                    "Пояснения9");
	СтруктураОтчета.Вставить("ИмяМакета",                      "Пояснения9");
	СтруктураОтчета.Вставить("ИмяСекцииПоказателей",           "Пояснения9");
	СтруктураОтчета.Вставить("ИмяОписанияМногострочныхЧастей", "Пояснения9");
	
	СоставНастройкаОтчета.Вставить("Пояснения9", СтруктураОтчета);
	
КонецПроцедуры

Процедура ПолучитьДеревоНастроекСоставаДопСтрок(ИмяФормы, ИмяРаздела,
	СтруктураРеквизитовФормы, ДеревоНастроекБаланс, ДеревоНастроекФормаОтчета) Экспорт
	
	Если ИмяРаздела = "Баланс" Тогда
		Если ДеревоНастроекБаланс = Неопределено Тогда
			ДеревоНастроекБаланс = ПолучитьИзВременногоХранилища(
				СтруктураРеквизитовФормы.АдресВоВремХранилищеДеревоНастроекБаланс);
		КонецЕсли;
	ИначеЕсли ИмяРаздела = "ФормаОтчета" Тогда
		Если ДеревоНастроекФормаОтчета = Неопределено Тогда
			ДеревоНастроекФормаОтчета = ПолучитьИзВременногоХранилища(
				СтруктураРеквизитовФормы.АдресВоВремХранилищеДеревоНастроекФормаОтчета);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПолучитьДеревоНастроекСоставаДопСтрок2019(ИмяФормы, ИмяРаздела,
	СтруктураРеквизитовФормы, ДеревоНастроекБаланс, ДеревоНастроекФормаОтчета) Экспорт
	
	Если ИмяРаздела = "Баланс" Тогда
		Если ДеревоНастроекБаланс = Неопределено Тогда
			ДеревоНастроекБаланс = ПолучитьИзВременногоХранилища(
				СтруктураРеквизитовФормы.АдресВоВремХранилищеДеревоНастроекБаланс);
			КонецЕсли;
			
	ИначеЕсли ИмяРаздела = "ОФР" Тогда
		Если ДеревоНастроекФормаОтчета = Неопределено Тогда
			ДеревоНастроекФормаОтчета = ПолучитьИзВременногоХранилища(
				СтруктураРеквизитовФормы.АдресВоВремХранилищеДеревоНастроекОФР);
			КонецЕсли;
			
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ВыгрузкаРегламентированногоОтчета

Функция УниверсальнаяВыгрузка(Параметры) Экспорт
	
	Перем ДанныеОтчета;
	Перем СтруктураРеквизитовФормы;
	Перем ДеревоНастроекБаланс;
	Перем ДеревоНастроекФормаОтчета;
	
	СохраненныйОтчет  = Параметры.СохраненныйОтчет;
	ИсточникОтчета    = Параметры.ИсточникОтчета;
	ИмяФормы          = Параметры.ВыбраннаяФорма;
	РезультатВыгрузки = Параметры.РезультатВыгрузки;
	
	РеглОтчетВыгружаетсяВБанк = Ложь;
	
	Если Параметры.Свойство("РеглОтчетВыгружаетсяВБанк")
	   И НЕ Параметры.РеглОтчетВыгружаетсяВБанк = Неопределено Тогда
		РеглОтчетВыгружаетсяВБанк = Параметры.РеглОтчетВыгружаетсяВБанк;
	КонецЕсли;
	
	СформироватьСтруктуруРеквизитовФормы(ИмяФормы, СтруктураРеквизитовФормы);
	
	СтруктураРеквизитовФормы.мСохраненныйДок = СохраненныйОтчет;
	
	СформироватьСтруктуруПоказателей(ИмяФормы, ДанныеОтчета, СтруктураРеквизитовФормы,
		ДеревоНастроекБаланс, ДеревоНастроекФормаОтчета);
		
	ПараметрыВыгрузки = ПараметрыВыгрузкиОтчета(
		ИмяФормы, СтруктураРеквизитовФормы, ДанныеОтчета, РеглОтчетВыгружаетсяВБанк);
	
	ОтчетыЗаполненыКорректно = ПроверитьВозможностьВыгрузки(ИмяФормы, СтруктураРеквизитовФормы,
		ДанныеОтчета, ПараметрыВыгрузки, РезультатВыгрузки);
	
	Если НЕ ОтчетыЗаполненыКорректно Тогда
		ДанныеОтчета = Неопределено;
		РезультатВыгрузки.Вставить("РеглОтчетВыгружен", Ложь);
		Возврат РезультатВыгрузки;
	КонецЕсли;
	
	КешСхемВыгрузки = Неопределено;
	Параметры.Свойство("КешСхемВыгрузки", КешСхемВыгрузки);
	
	ДеревоВыгрузки = ИзвлечьСтруктуруXML(ИмяФормы, СтруктураРеквизитовФормы, КешСхемВыгрузки);
	
	ЗаполнитьДанными(ИмяФормы, ПараметрыВыгрузки, ДеревоВыгрузки, РезультатВыгрузки,
		ДанныеОтчета, СтруктураРеквизитовФормы);
	
	Если НЕ ПроверитьДанные(ИмяФормы, ДеревоВыгрузки, РезультатВыгрузки) Тогда
		ДанныеОтчета = Неопределено;
		РезультатВыгрузки.Вставить("РеглОтчетВыгружен", Ложь);
		Возврат РезультатВыгрузки;
	КонецЕсли;
	
	КодировкаФайлаВыгрузки = "windows-1251";
	
	ТекстФайлаВыгрузки = ВыгрузитьДеревоВXML(ИмяФормы, ДеревоВыгрузки);
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("xml");
	ЗаписьТекста = Новый ЗаписьТекста(ИмяВременногоФайла, КодировкаФайлаВыгрузки);
	ЗаписьТекста.Записать(ТекстФайлаВыгрузки);
	ЗаписьТекста.Закрыть();
	ЗаписьТекста = Неопределено;
	
	ФайлВыгрузки = Новый ДвоичныеДанные(ИмяВременногоФайла);
	
	АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(ФайлВыгрузки, Новый УникальныйИдентификатор);
	
	УдалитьФайлы(ИмяВременногоФайла);
	
	РезультатВыгрузки.Вставить("ИмяФайлаВыгрузки", ПараметрыВыгрузки.ИдФайл + ".xml");
	РезультатВыгрузки.Вставить("АдресФайлаВыгрузки", АдресВоВременномХранилище);
	РезультатВыгрузки.Вставить("КодировкаФайлаВыгрузки", КодировкаФайлаВыгрузки);
	РезультатВыгрузки.Вставить("ТипФайлаВыгрузки", "БухОтчетность");
	РезультатВыгрузки.Вставить("РеглОтчетВыгружен", Истина);
	
	ДанныеОтчета = Неопределено;
	
	Возврат РезультатВыгрузки;
	
КонецФункции

Процедура СформироватьСтруктуруПоказателей(ИмяФормы,
										   ДанныеОтчета,
										   СтруктураРеквизитовФормы,
										   ДеревоНастроекБаланс,
										   ДеревоНастроекФормаОтчета) Экспорт
	
	ДанныеОтчета = Новый Структура;
	
	СохрСтруктура = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить();
	ПоказателиОтчета = СохрСтруктура.ПоказателиОтчета;
	ПрименяетсяЕНВД = СохрСтруктура.ПрименениеЕНВД;
	СтруктураРеквизитовФормы.ЭтоБалансНекоммерческойОрганизации = СохрСтруктура.БалансНекоммерческойОрганизации;
	
	СохраненныйСоставДополнительныхСтрок = СохрСтруктура.СоставДополнительныхСтрок;
	
	СоставДополнительныхСтрок = Новый Структура;
				
	Для Каждого ЭлементСтруктуры Из СохраненныйСоставДополнительныхСтрок Цикл
		
		Если ЭлементСтруктуры.Ключ = "СтруктураСоставов" Тогда
			
			СтруктураСоставов = Новый Структура;
			
			Для Каждого Элемент Из ЭлементСтруктуры.Значение Цикл
				
				Если Элемент.Значение.Колонки.Найти("ДостДляРедактирования_Существенность") = Неопределено Тогда
					
					Элемент.Значение.Колонки.Добавить("ДостДляРедактирования_Существенность");
					Элемент.Значение.Колонки.Добавить("ДостДляРедактирования_МаксимальноеКоличество");
					
					Для Каждого СтрокаДерева Из Элемент.Значение.Строки Цикл
						
						СтрокаДерева.ДостДляРедактирования_Существенность
							= ЗначениеЗаполнено(СтрокаДерева.Существенность);
						
						СтрокаДерева.ДостДляРедактирования_МаксимальноеКоличество
							= ЗначениеЗаполнено(СтрокаДерева.Существенность);
						
						СтрокаДерева.МаксимальноеКоличество
							= ?(ЗначениеЗаполнено(СтрокаДерева.Существенность), 10, 0);
						
					КонецЦикла;
					
				КонецЕсли;
				
				Если Элемент.Ключ = "Баланс" Тогда
					ДеревоНастроекБаланс = Элемент.Значение.Скопировать();
				ИначеЕсли Элемент.Ключ = "ФормаОтчета" Тогда
					ДеревоНастроекФормаОтчета = Элемент.Значение.Скопировать();
				КонецЕсли;
				
				СтруктураСоставов.Вставить(Элемент.Ключ, "ДеревоНастроек" + Элемент.Ключ);
				
			КонецЦикла;
			
			СоставДополнительныхСтрок.Вставить("СтруктураСоставов", СтруктураСоставов);
			
		Иначе	
			
			СоставДополнительныхСтрок.Вставить(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Значение);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если НЕ СохрСтруктура.Свойство("СтруктураОтчета")
	 ИЛИ СохрСтруктура.СтруктураОтчета = Неопределено Тогда
	 
		СтруктураОтчета = ПолучитьСтруктуруОтчета2011Кв4(ИмяФормы, СтруктураРеквизитовФормы);
		
	Иначе
		
		СтруктураОтчета = СохрСтруктура.СтруктураОтчета;
		
		Для Каждого Элемент Из СтруктураОтчета Цикл
			
			Если СтрЧислоВхождений(Элемент.Значение.ИмяМакета,
					Сред(ИмяФормы, СтрНайти(ИмяФормы, "ФормаОтчета"))) > 0 Тогда
				
				Элемент.Значение.ИмяМакета = Сред(Элемент.Значение.ИмяМакета,
					СтрДлина(Сред(ИмяФормы, СтрНайти(ИмяФормы, "ФормаОтчета")) + "_") + 1);
				
			КонецЕсли;
			
			Элемент.Значение.ИмяМакета = СтрЗаменить(Элемент.Значение.ИмяМакета, "_2011Кв4", "");
			
			Если Элемент.Значение.Свойство("ИдентификаторАвтозаполнения") Тогда
				
				Элемент.Значение.ИдентификаторАвтозаполнения =
					СтрЗаменить(Элемент.Значение.ИдентификаторАвтозаполнения, "_2011Кв4", "");
				
			КонецЕсли;	
			
		КонецЦикла
	КонецЕсли;
	
	Для Каждого Раздел Из ПоказателиОтчета Цикл
		
		// Подмена строк расшифровки виртуальной многострочной частью.
		ЗначенияРаздела = ПолучитьВиртуальныеСтрокиРасшифровки(
			ИмяФормы, СтруктураОтчета, Раздел.Ключ, Раздел.Значение,
			СоставДополнительныхСтрок, СтруктураРеквизитовФормы,
			ДеревоНастроекБаланс, ДеревоНастроекФормаОтчета, ПрименяетсяЕНВД);
			
		ДанныеОтчета.Вставить(Раздел.Ключ, ЗначенияРаздела);
		
	КонецЦикла;
	
	ОбработатьПоказателиПередВыгрузкой(ИмяФормы, ДанныеОтчета, СтруктураРеквизитовФормы);
	
	АдресДляВыгрузки = "";
	
	Если ПустаяСтрока(ПоказателиОтчета.ПолеТабличногоДокументаБаланс.ОргПочтАдрес) Тогда
		
		СтруктураРеквизитовФормы.мАдресДляВыгрузки = "";
		
	ИначеЕсли НЕ СохрСтруктура.Свойство("Адрес9Запятых", АдресДляВыгрузки)
		  ИЛИ НЕ ЗначениеЗаполнено(АдресДляВыгрузки) Тогда
		  
		Адреса = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(
			СтруктураРеквизитовФормы.мСохраненныйДок.Организация,
			СтруктураРеквизитовФормы.мСохраненныйДок.ДатаПодписи,
			"АдрФакт, АдрЮР, АдрПочт");
			
		Если ПустаяСтрока(СтрЗаменить(Адреса.АдрФакт, ",", "")) Тогда
			АдрФакт = "";
		Иначе
			АдрФакт = Адреса.АдрФакт;
		КонецЕсли;
		
		Если ПустаяСтрока(СтрЗаменить(Адреса.АдрЮР, ",", "")) Тогда
			АдрЮР = "";
		Иначе
			АдрЮР = Адреса.АдрЮР;
		КонецЕсли;
		
		Если ПустаяСтрока(СтрЗаменить(Адреса.АдрПочт, ",", "")) Тогда
			АдрПочт = "";
		Иначе
			АдрПочт = Адреса.АдрПочт;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(АдрФакт) Тогда
			АдресДляВыгрузки = АдрФакт;
		ИначеЕсли ЗначениеЗаполнено(АдрЮР) Тогда
			АдресДляВыгрузки = АдрЮР;
		Иначе
			АдресДляВыгрузки = АдрПочт;
		КонецЕсли;
		
	КонецЕсли;
	
	ДанныеОтчета.Вставить("АдресДляВыгрузки", АдресДляВыгрузки);
	ДанныеОтчета.Вставить("СтруктураМногострочныхЧастей", СохрСтруктура.СтруктураМногострочныхЧастей);

КонецПроцедуры

Функция ПолучитьВиртуальныеСтрокиРасшифровки(ИмяФормы,
											 СтруктураОтчета,
											 Раздел,
											 ДанныеРаздела,
											 СоставДополнительныхСтрок,
											 СтруктураРеквизитовФормы,
											 ДеревоНастроекБаланс,
											 ДеревоНастроекФормаОтчета,
											 ПрименяетсяЕНВД = Ложь)

	Если Раздел = "ПолеТабличногоДокументаБаланс" Тогда
		
		Если ПустаяСтрока(СтруктураОтчета.Баланс.ИмяМакета)
		 ИЛИ СтруктураОтчета.Баланс.ИмяМакета = "Баланс"
		 ИЛИ СтруктураОтчета.Баланс.ИмяМакета = "БалансНКО"
		 ИЛИ СтруктураОтчета.Баланс.ИмяМакета = "Баланс_2011Кв4"
		 ИЛИ СтруктураОтчета.Баланс.ИмяМакета = "БалансНКО_2011Кв4" Тогда
		 
			ДобавитьВиртуальныеСтрокиРасшифровкиБаланс2011(ИмяФормы, Раздел,
				ДанныеРаздела, СоставДополнительныхСтрок, ПрименяетсяЕНВД,
				СтруктураРеквизитовФормы, ДеревоНастроекБаланс, ДеревоНастроекФормаОтчета);
			
		Иначе

			ДобавитьВиртуальныеСтрокиРасшифровкиБаланс2012(ИмяФормы, Раздел,
				ДанныеРаздела, СоставДополнительныхСтрок, ПрименяетсяЕНВД,
				СтруктураОтчета, СтруктураРеквизитовФормы,
				ДеревоНастроекБаланс, ДеревоНастроекФормаОтчета);

		КонецЕсли;
		
	КонецЕсли;
	
	Если Раздел = "ПолеТабличногоДокументаФормаОтчета" Тогда
		
		ДобавитьВиртуальныеСтрокиРасшифровкиФормаОтчета(ИмяФормы, Раздел,
			ДанныеРаздела, СоставДополнительныхСтрок, ПрименяетсяЕНВД,
			СтруктураОтчета, СтруктураРеквизитовФормы,
			ДеревоНастроекБаланс, ДеревоНастроекФормаОтчета);
		
	КонецЕсли;
	
	Возврат ДанныеРаздела;
	
КонецФункции

Процедура ОбработатьПоказателиПередВыгрузкой(ИмяФормы, ДанныеОтчета, СтруктураРеквизитовФормы)
	
	Перем ЗначениеПоказателя, Индекс, ИндексСтр;
	
	ИменаПоказателейСоЗнакомПлюс = ПолучитьСписокВычитаемыхПоказателей(ИмяФормы, СтруктураРеквизитовФормы);
	
	Разделы = Новый Массив;
	Разделы.Добавить(ДанныеОтчета.ПолеТабличногоДокументаБаланс);
	Разделы.Добавить(ДанныеОтчета.ПолеТабличногоДокументаОИК);
	Разделы.Добавить(ДанныеОтчета.ПолеТабличногоДокументаОДДС);
	
	Если ИмяФормы = "ФормаОтчета2019Кв1" Тогда
		Разделы.Добавить(ДанныеОтчета.ПолеТабличногоДокументаОФР);
		Разделы.Добавить(ДанныеОтчета.ПолеТабличногоДокументаОЦИС);
	Иначе
		// ФормаОтчета2011Кв1, ФормаОтчета2011Кв3, ФормаОтчета2011Кв4.
		Разделы.Добавить(ДанныеОтчета.ПолеТабличногоДокументаФормаОтчета);
		Разделы.Добавить(ДанныеОтчета.ПолеТабличногоДокументаОЦИПС);
	КонецЕсли;
	
	Для Каждого Пок Из ИменаПоказателейСоЗнакомПлюс Цикл
		Для Каждого ПоказателиТекущегоРаздела Из Разделы Цикл
			Если ПоказателиТекущегоРаздела.Свойство(Пок + "_1") Тогда
				РегламентированнаяОтчетностьКлиентСервер.УстановитьИндекс(Индекс, ИндексСтр);
				
				Пока ПоказателиТекущегоРаздела.Свойство(Пок + "_" + ИндексСтр, ЗначениеПоказателя) Цикл
					Если ЗначениеПоказателя < 0 Тогда
						ПоказателиТекущегоРаздела.Вставить(Пок + "_" + ИндексСтр, -ЗначениеПоказателя);
					КонецЕсли;
					
					РегламентированнаяОтчетностьКлиентСервер.УвеличитьИндекс(Индекс, ИндексСтр);
					
				КонецЦикла;
				
			ИначеЕсли ПоказателиТекущегоРаздела.Свойство(Пок, ЗначениеПоказателя) И ЗначениеПоказателя < 0 Тогда
				ПоказателиТекущегоРаздела.Вставить(Пок, -ЗначениеПоказателя);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьВиртуальныеСтрокиРасшифровкиБаланс2011(ИмяФормы, 
														 Раздел,
														 ДанныеРаздела,
														 СоставДополнительныхСтрок,
														 ПрименяетсяЕНВД,
														 СтруктураРеквизитовФормы,
														 ДеревоНастроекБаланс,
														 ДеревоНастроекФормаОтчета)
	
	ПолучитьДеревоНастроекСоставаДопСтрок(ИмяФормы, "Баланс", СтруктураРеквизитовФормы,
										  ДеревоНастроекБаланс, ДеревоНастроекФормаОтчета);
										  
	ДеревоНастройкиСостава = ДеревоНастроекБаланс;
	
	// Строки расшифровки строки 1110.
	ПрефиксВиртуальнойСтроки  = "П2001001110";
	ПрефиксМногострочнойЧасти = "П0001011199";
	СписокФиксированныхСтрок = Новый СписокЗначений;
	СписокФиксированныхСтрок.Добавить("11101", "Нематериальные активы в организации");
	СписокФиксированныхСтрок.Добавить("11102", "Приобретение нематериальных активов");
	ВнестиВиртуальныеСтрокиРасшифровкиБаланс(ИмяФормы, ДанныеРаздела, ДеревоНастройкиСостава,
		ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
	
	// Строки расшифровки строки 1120.
	ПрефиксВиртуальнойСтроки  = "П2001001120";
	ПрефиксМногострочнойЧасти = "П0001011299";
	СписокФиксированныхСтрок = Новый СписокЗначений;
	СписокФиксированныхСтрок.Добавить("11201", "Расходы на научно-исследовательские, опытно-конструкторские и технологические работы");
	СписокФиксированныхСтрок.Добавить("11202", "Выполнение научно-исследовательских, опытно-конструкторских и технологических работ");
	ВнестиВиртуальныеСтрокиРасшифровкиБаланс(ИмяФормы, ДанныеРаздела, ДеревоНастройкиСостава,
		ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
	
	// Строки расшифровки строки 1130.
	ПрефиксВиртуальнойСтроки  = "П2001001130";
	ПрефиксМногострочнойЧасти = "П0001011399";
	СписокФиксированныхСтрок = Новый СписокЗначений;
	СписокФиксированныхСтрок.Добавить("11301", "Основные средства в организации");
	СписокФиксированныхСтрок.Добавить("11302", "Объекты недвижимости, права собственности на которые не зарегистрированы");
	СписокФиксированныхСтрок.Добавить("11303", "Оборудование к установке");
	СписокФиксированныхСтрок.Добавить("11304", "Приобретение земельных участков");
	СписокФиксированныхСтрок.Добавить("11305", "Приобретение объектов природопользования");
	СписокФиксированныхСтрок.Добавить("11306", "Строительство объектов основных средств");
	СписокФиксированныхСтрок.Добавить("11307", "Приобретение объектов основных средств");
	СписокФиксированныхСтрок.Добавить("11308", "Расходы будущих периодов");
	ВнестиВиртуальныеСтрокиРасшифровкиБаланс(ИмяФормы, ДанныеРаздела, ДеревоНастройкиСостава,
		ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
	
	// Строки расшифровки строки 1140.
	ПрефиксВиртуальнойСтроки  = "П2001001140";
	ПрефиксМногострочнойЧасти = "П0001011499";
	СписокФиксированныхСтрок = Новый СписокЗначений;
	СписокФиксированныхСтрок.Добавить("11401", "Материальные ценности в организации");
	СписокФиксированныхСтрок.Добавить("11402", "Материальные ценности предоставленные во временное владение и пользование");
	СписокФиксированныхСтрок.Добавить("11403", "Материальные ценности предоставленные во временное пользование");
	СписокФиксированныхСтрок.Добавить("11404", "Прочие доходные вложения");
	ВнестиВиртуальныеСтрокиРасшифровкиБаланс(ИмяФормы, ДанныеРаздела, ДеревоНастройкиСостава,
		ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
	
	// Строки расшифровки строки 1150.
	ПрефиксВиртуальнойСтроки  = "П2001001150";
	ПрефиксМногострочнойЧасти = "П0001011599";
	СписокФиксированныхСтрок = Новый СписокЗначений;
	СписокФиксированныхСтрок.Добавить("11501", "Паи");
	ВнестиВиртуальныеСтрокиРасшифровкиБаланс(ИмяФормы, ДанныеРаздела, ДеревоНастройкиСостава,
		ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
	
	// Строки расшифровки строки 1160.
	ПрефиксВиртуальнойСтроки  = "П2001001160";
	ПрефиксМногострочнойЧасти = "П0001011699";
	СписокФиксированныхСтрок = Новый СписокЗначений;
	ВнестиВиртуальныеСтрокиРасшифровкиБаланс(ИмяФормы, ДанныеРаздела, ДеревоНастройкиСостава,
		ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
	
	// Строки расшифровки строки 1170.
	ПрефиксВиртуальнойСтроки  = "П2001001170";
	ПрефиксМногострочнойЧасти = "П0001011799";
	СписокФиксированныхСтрок = Новый СписокЗначений;
	СписокФиксированныхСтрок.Добавить("11701", "Перевод молодняка животных в основное стадо");
	СписокФиксированныхСтрок.Добавить("11702", "Приобретение взрослых животных");
	СписокФиксированныхСтрок.Добавить("11703", "Расходы будущих периодов");
	ВнестиВиртуальныеСтрокиРасшифровкиБаланс(ИмяФормы, ДанныеРаздела, ДеревоНастройкиСостава,
		ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
	
	// Строки расшифровки строки 1210.
	ПрефиксВиртуальнойСтроки  = "П2001001210";
	ПрефиксМногострочнойЧасти = "П0001012199";
	СписокФиксированныхСтрок = Новый СписокЗначений;
	СписокФиксированныхСтрок.Добавить("12101", "Материалы");
	СписокФиксированныхСтрок.Добавить("12102", "Брак в производстве");
	СписокФиксированныхСтрок.Добавить("12103", "Товары отгруженные");
	СписокФиксированныхСтрок.Добавить("12104", "Товары");
	СписокФиксированныхСтрок.Добавить("12105", "Готовая продукция");
	СписокФиксированныхСтрок.Добавить("12106", "Расходы на продажу");
	СписокФиксированныхСтрок.Добавить("12107", "Выполненные этапы по незавершенным работам");
	СписокФиксированныхСтрок.Добавить("12108", "Основное производство");
	СписокФиксированныхСтрок.Добавить("12109", "Полуфабрикаты собственного производства");
	СписокФиксированныхСтрок.Добавить("12110", "Вспомогательные производства");
	СписокФиксированныхСтрок.Добавить("12111", "Обслуживающие производства и хозяйства");
	СписокФиксированныхСтрок.Добавить("12112", "Расходы будущих периодов");
	ВнестиВиртуальныеСтрокиРасшифровкиБаланс(ИмяФормы, ДанныеРаздела, ДеревоНастройкиСостава,
		ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
	
	// Строки расшифровки строки 1220.
	ПрефиксВиртуальнойСтроки  = "П2001001220";
	ПрефиксМногострочнойЧасти = "П0001012299";
	СписокФиксированныхСтрок = Новый СписокЗначений;
	СписокФиксированныхСтрок.Добавить("12201", "НДС по приобретенным ОС");
	СписокФиксированныхСтрок.Добавить("12202", "НДС по приобретенным НМА");
	СписокФиксированныхСтрок.Добавить("12203", "НДС по приобретенным материально-производственным запасам");
	СписокФиксированныхСтрок.Добавить("12204", "НДС по приобретенным услугам");
	СписокФиксированныхСтрок.Добавить("12205", "НДС, уплаченный при ввозе товаров на территорию РФ");
	СписокФиксированныхСтрок.Добавить("12206", "НДС по товарам, реализованным по ставке 0% (экспорт)");
	СписокФиксированныхСтрок.Добавить("12207", "НДС при строительстве ОС");
	ВнестиВиртуальныеСтрокиРасшифровкиБаланс(ИмяФормы, ДанныеРаздела, ДеревоНастройкиСостава,
		ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
	
	// Строки расшифровки строки 1230.
	ПрефиксВиртуальнойСтроки  = "П2001001230";
	ПрефиксМногострочнойЧасти = "П0001012399";
	СписокФиксированныхСтрок = Новый СписокЗначений;
	СписокФиксированныхСтрок.Добавить("12301", "Расчеты с поставщиками и подрядчиками");
	СписокФиксированныхСтрок.Добавить("12302", "Расчеты с покупателями и заказчиками");
	СписокФиксированныхСтрок.Добавить("12303", "Расчеты по налогам и сборам");
	СписокФиксированныхСтрок.Добавить("12304", "Расчеты по социальному страхованию и обеспечению");
	СписокФиксированныхСтрок.Добавить("12310", "Расчеты с персоналом по оплате труда");
	СписокФиксированныхСтрок.Добавить("12305", "Расчеты с подотчетными лицами");
	СписокФиксированныхСтрок.Добавить("12306", "Расчеты с персоналом по прочим операциям");
	СписокФиксированныхСтрок.Добавить("12307", "Расчеты по вкладам в уставный (складочный) капитал");
	СписокФиксированныхСтрок.Добавить("12308", "Расчеты с разными дебиторами и кредиторами");
	СписокФиксированныхСтрок.Добавить("12309", "Расходы будущих периодов");
	ВнестиВиртуальныеСтрокиРасшифровкиБаланс(ИмяФормы, ДанныеРаздела, ДеревоНастройкиСостава,
		ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
	
	// Строки расшифровки строки 1240.
	ПрефиксВиртуальнойСтроки  = "П2001001240";
	ПрефиксМногострочнойЧасти = "П0001012499";
	СписокФиксированныхСтрок = Новый СписокЗначений;
	СписокФиксированныхСтрок.Добавить("12401", "Акции");
	СписокФиксированныхСтрок.Добавить("12402", "Долговые ценные бумаги");
	СписокФиксированныхСтрок.Добавить("12403", "Предоставленные займы");
	СписокФиксированныхСтрок.Добавить("12404", "Вклады по договору простого товарищества");
	СписокФиксированныхСтрок.Добавить("12405", "Приобретенные права в рамках оказания финансовых услуг");
	СписокФиксированныхСтрок.Добавить("12406", "Депозитные счета");
	СписокФиксированныхСтрок.Добавить("12407", "Депозитные счета (в валюте)");
	ВнестиВиртуальныеСтрокиРасшифровкиБаланс(ИмяФормы, ДанныеРаздела, ДеревоНастройкиСостава,
		ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
	
	// Строки расшифровки строки 1250.
	ПрефиксВиртуальнойСтроки  = "П2001001250";
	ПрефиксМногострочнойЧасти = "П0001012599";
	СписокФиксированныхСтрок = Новый СписокЗначений;
	СписокФиксированныхСтрок.Добавить("12501", "Касса организации");
	СписокФиксированныхСтрок.Добавить("12502", "Операционная касса");
	СписокФиксированныхСтрок.Добавить("12503", "Касса организации (в валюте)");
	СписокФиксированныхСтрок.Добавить("12504", "Расчетные счета");
	СписокФиксированныхСтрок.Добавить("12505", "Валютные счета");
	СписокФиксированныхСтрок.Добавить("12506", "Аккредитивы");
	СписокФиксированныхСтрок.Добавить("12507", "Чековые книжки");
	СписокФиксированныхСтрок.Добавить("12508", "Прочие специальные счета");
	СписокФиксированныхСтрок.Добавить("12509", "Аккредитивы (в валюте)");
	СписокФиксированныхСтрок.Добавить("12510", "Прочие специальные счета (в валюте)");
	СписокФиксированныхСтрок.Добавить("12511", "Переводы в пути");
	ВнестиВиртуальныеСтрокиРасшифровкиБаланс(ИмяФормы, ДанныеРаздела, ДеревоНастройкиСостава,
		ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
	
	// Строки расшифровки строки 1260.
	ПрефиксВиртуальнойСтроки  = "П2001001260";
	ПрефиксМногострочнойЧасти = "П0001012699";
	СписокФиксированныхСтрок = Новый СписокЗначений;
	СписокФиксированныхСтрок.Добавить("12601", "Акцизы по оплаченным материальным ценностям");
	СписокФиксированныхСтрок.Добавить("12602", "Денежные документы");
	СписокФиксированныхСтрок.Добавить("12603", "Денежные документы (в валюте)");
	СписокФиксированныхСтрок.Добавить("12604", "НДС по экспорту к возмещению");
	СписокФиксированныхСтрок.Добавить("12605", "НДС по авансам и предоплатам");
	СписокФиксированныхСтрок.Добавить("12606", "НДС, начисленный по отгрузке");
	СписокФиксированныхСтрок.Добавить("12607", "Расчеты по НДС при исполнении обязанностей налогового агента");
	СписокФиксированныхСтрок.Добавить("12608", "Расходы будущих периодов");
	СписокФиксированныхСтрок.Добавить("12609", "Недостачи и потери от порчи ценностей");
	СписокФиксированныхСтрок.Добавить("12610", "Оценочные обязательства");
	ВнестиВиртуальныеСтрокиРасшифровкиБаланс(ИмяФормы, ДанныеРаздела, ДеревоНастройкиСостава,
		ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
	
	// Строки расшифровки строки 1310.
	ПрефиксВиртуальнойСтроки  = "П2001001310";
	ПрефиксМногострочнойЧасти = "П0001013199";
	СписокФиксированныхСтрок = Новый СписокЗначений;
	ВнестиВиртуальныеСтрокиРасшифровкиБаланс(ИмяФормы, ДанныеРаздела, ДеревоНастройкиСостава,
		ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
	
	// Строки расшифровки строки 1320.
	ПрефиксВиртуальнойСтроки  = "П2001001320";
	ПрефиксМногострочнойЧасти = "П0001013299";
	СписокФиксированныхСтрок = Новый СписокЗначений;
	ВнестиВиртуальныеСтрокиРасшифровкиБаланс(ИмяФормы, ДанныеРаздела, ДеревоНастройкиСостава,
		ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
	
	// Строки расшифровки строки 1340.
	Если НЕ СтруктураРеквизитовФормы.ЭтоБалансНекоммерческойОрганизации Тогда
		ПрефиксВиртуальнойСтроки  = "П2001001340";
		ПрефиксМногострочнойЧасти = "П0001013499";
		СписокФиксированныхСтрок = Новый СписокЗначений;
		СписокФиксированныхСтрок.Добавить("13401", "Переоценка основных средств");
		СписокФиксированныхСтрок.Добавить("13402", "Переоценка НМА");
		СписокФиксированныхСтрок.Добавить("13403", "Переоценка прочих внеоборотных активов");
		ВнестиВиртуальныеСтрокиРасшифровкиБаланс(ИмяФормы, ДанныеРаздела, ДеревоНастройкиСостава,
			ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
	КонецЕсли;
	
	// Строки расшифровки строки 1350.
	ПрефиксВиртуальнойСтроки  = "П2001001350";
	ПрефиксМногострочнойЧасти = "П0001013599";
	СписокФиксированныхСтрок = Новый СписокЗначений;
	ВнестиВиртуальныеСтрокиРасшифровкиБаланс(ИмяФормы, ДанныеРаздела, ДеревоНастройкиСостава,
		ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
	
	// Строки расшифровки строки 1360.
	ПрефиксВиртуальнойСтроки  = "П2001001360";
	ПрефиксМногострочнойЧасти = "П0001013699";
	СписокФиксированныхСтрок = Новый СписокЗначений;
	Если НЕ СтруктураРеквизитовФормы.ЭтоБалансНекоммерческойОрганизации Тогда
		СписокФиксированныхСтрок.Добавить("13601", "Резервы, образованные в соответствии с законодательством");
		СписокФиксированныхСтрок.Добавить("13602", "Резервы, образованные в соответствии с учредительными документами");
	КонецЕсли;
	ВнестиВиртуальныеСтрокиРасшифровкиБаланс(ИмяФормы, ДанныеРаздела, ДеревоНастройкиСостава,
		ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
	
	// Строки расшифровки строки 1370.
	ПрефиксВиртуальнойСтроки  = "П2001001370";
	ПрефиксМногострочнойЧасти = "П0001013799";
	СписокФиксированныхСтрок = Новый СписокЗначений;
	ВнестиВиртуальныеСтрокиРасшифровкиБаланс(ИмяФормы, ДанныеРаздела, ДеревоНастройкиСостава,
		ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
	
	// Строки расшифровки строки 1410.
	ПрефиксВиртуальнойСтроки  = "П2001001410";
	ПрефиксМногострочнойЧасти = "П0001014199";
	СписокФиксированныхСтрок = Новый СписокЗначений;
	СписокФиксированныхСтрок.Добавить("14101", "Долгосрочные кредиты");
	СписокФиксированныхСтрок.Добавить("14102", "Долгосрочные займы");
	СписокФиксированныхСтрок.Добавить("14103", "Долгосрочные кредиты (в валюте)");
	СписокФиксированныхСтрок.Добавить("14104", "Долгосрочные займы (в валюте)");
	ВнестиВиртуальныеСтрокиРасшифровкиБаланс(ИмяФормы, ДанныеРаздела, ДеревоНастройкиСостава,
		ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
	
	// Строки расшифровки строки 1420.
	ПрефиксВиртуальнойСтроки  = "П2001001420";
	ПрефиксМногострочнойЧасти = "П0001014299";
	СписокФиксированныхСтрок = Новый СписокЗначений;
	ВнестиВиртуальныеСтрокиРасшифровкиБаланс(ИмяФормы, ДанныеРаздела, ДеревоНастройкиСостава,
		ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
	
	// Строки расшифровки строки 1450.
	ПрефиксВиртуальнойСтроки  = "П2001001450";
	ПрефиксМногострочнойЧасти = "П0001014599";
	СписокФиксированныхСтрок = Новый СписокЗначений;
	ВнестиВиртуальныеСтрокиРасшифровкиБаланс(ИмяФормы, ДанныеРаздела, ДеревоНастройкиСостава,
		ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
	
	// Строки расшифровки строки 1510.
	ПрефиксВиртуальнойСтроки  = "П2001001510";
	ПрефиксМногострочнойЧасти = "П0001015199";
	СписокФиксированныхСтрок = Новый СписокЗначений;
	СписокФиксированныхСтрок.Добавить("15101", "Краткосрочные кредиты");
	СписокФиксированныхСтрок.Добавить("15102", "Краткосрочные займы");
	СписокФиксированныхСтрок.Добавить("15103", "Проценты по краткосрочным кредитам");
	СписокФиксированныхСтрок.Добавить("15104", "Проценты по долгосрочным кредитам");
	СписокФиксированныхСтрок.Добавить("15105", "Проценты по краткосрочным займам");
	СписокФиксированныхСтрок.Добавить("15106", "Проценты по долгосрочным займам");
	СписокФиксированныхСтрок.Добавить("15107", "Краткосрочные кредиты (в валюте)");
	СписокФиксированныхСтрок.Добавить("15108", "Краткосрочные займы (в валюте)");
	СписокФиксированныхСтрок.Добавить("15109", "Проценты по краткосрочным кредитам (в валюте)");
	СписокФиксированныхСтрок.Добавить("15110", "Проценты по долгосрочным кредитам (в валюте)");
	СписокФиксированныхСтрок.Добавить("15111", "Проценты по краткосрочным займам (в валюте)");
	СписокФиксированныхСтрок.Добавить("15112", "Проценты по долгосрочным займам (в валюте)");
	ВнестиВиртуальныеСтрокиРасшифровкиБаланс(ИмяФормы, ДанныеРаздела, ДеревоНастройкиСостава,
		ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
	
	// Строки расшифровки строки 1520.
	ПрефиксВиртуальнойСтроки  = "П2001001520";
	ПрефиксМногострочнойЧасти = "П0001015299";
	СписокФиксированныхСтрок = Новый СписокЗначений;
	СписокФиксированныхСтрок.Добавить("15201", "Расчеты с поставщиками и подрядчиками");
	СписокФиксированныхСтрок.Добавить("15202", "Расчеты с покупателями и заказчиками");
	СписокФиксированныхСтрок.Добавить("15203", "Расчеты по налогам и сборам");
	СписокФиксированныхСтрок.Добавить("15204", "Расчеты по социальному страхованию и обеспечению");
	СписокФиксированныхСтрок.Добавить("15205", "Расчеты с персоналом по оплате труда");
	СписокФиксированныхСтрок.Добавить("15206", "Расчеты с подотчетными лицами");
	СписокФиксированныхСтрок.Добавить("15207", "Задолженность участникам (учредителям) по выплате доходов");
	СписокФиксированныхСтрок.Добавить("15208", "Расчеты с разными дебиторами и кредиторами");
	СписокФиксированныхСтрок.Добавить("15209", "Расчеты с персоналом по прочим операциям");
	ВнестиВиртуальныеСтрокиРасшифровкиБаланс(ИмяФормы, ДанныеРаздела, ДеревоНастройкиСостава,
		ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
	
	// Строки расшифровки строки 1530.
	ПрефиксВиртуальнойСтроки  = "П2001001530";
	ПрефиксМногострочнойЧасти = "П0001015399";
	СписокФиксированныхСтрок = Новый СписокЗначений;
	Если НЕ СтруктураРеквизитовФормы.ЭтоБалансНекоммерческойОрганизации Тогда
		СписокФиксированныхСтрок.Добавить("15301", "Целевое финансирование");
	КонецЕсли;
	СписокФиксированныхСтрок.Добавить("15302", "Доходы, полученные в счет будущих периодов");
	СписокФиксированныхСтрок.Добавить("15303", "Безвозмездные поступления");
	СписокФиксированныхСтрок.Добавить("15304", "Предстоящие поступления по недостачам, выявленным за прошлые годы");
	СписокФиксированныхСтрок.Добавить("15305", "Разница между суммой, подлежащей взысканию с виновных лиц, и балансовой стоимостью по недостачам ценностей");
	ВнестиВиртуальныеСтрокиРасшифровкиБаланс(ИмяФормы, ДанныеРаздела, ДеревоНастройкиСостава,
		ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
	
	// Строки расшифровки строки 1550.
	ПрефиксВиртуальнойСтроки  = "П2001001550";
	ПрефиксМногострочнойЧасти = "П0001015599";
	СписокФиксированныхСтрок = Новый СписокЗначений;
	ВнестиВиртуальныеСтрокиРасшифровкиБаланс(ИмяФормы, ДанныеРаздела, ДеревоНастройкиСостава,
		ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
	
КонецПроцедуры

Процедура ДобавитьВиртуальныеСтрокиРасшифровкиБаланс2012(ИмяФормы,
														 Раздел,
														 ДанныеРаздела,
														 СоставДополнительныхСтрок,
														 ПрименяетсяЕНВД,
														 СтруктураОтчета,
														 СтруктураРеквизитовФормы,
														 ДеревоНастроекБаланс,
														 ДеревоНастроекФормаОтчета)
	
	СтрокаОтраженияСчета76_АВ = "1260";
	СтрокаОтраженияСчета76_ВА = "1550";
	СтрокаОтраженияСчета46 = "1210";
	СтрокаОтраженияСчета96 = "1260";
	
	Если СтруктураОтчета.Баланс.ИмяМакета = "Баланс_2012Кв4"
	 ИЛИ СтруктураОтчета.Баланс.ИмяМакета = "БалансНКО_2012Кв4" Тогда
		СтрокаОтраженияСчета46 = "1260";
	КонецЕсли;
	
	Если СтруктураОтчета.Баланс.ИмяМакета = "Баланс_2012Кв4_2"
	 ИЛИ СтруктураОтчета.Баланс.ИмяМакета = "БалансНКО_2012Кв4_2"
	 ИЛИ СтруктураОтчета.Баланс.ИмяМакета = "Баланс_2012Кв4_3"
	 ИЛИ СтруктураОтчета.Баланс.ИмяМакета = "БалансНКО_2012Кв4_3" Тогда
		СтрокаОтраженияСчета46 = "1230";
		СтрокаОтраженияСчета96 = "1230";
	КонецЕсли;				   
	
	Если СтруктураОтчета.Баланс.ИмяМакета = "Баланс_2012Кв4_3"
	 ИЛИ СтруктураОтчета.Баланс.ИмяМакета = "БалансНКО_2012Кв4_3" Тогда
		СтрокаОтраженияСчета76_АВ = "1520";
		СтрокаОтраженияСчета76_ВА = "1230";
	КонецЕсли;
	
	ПолучитьДеревоНастроекСоставаДопСтрок(ИмяФормы, "Баланс", СтруктураРеквизитовФормы,
										  ДеревоНастроекБаланс, ДеревоНастроекФормаОтчета);
										  
	ДеревоНастройкиСостава = ДеревоНастроекБаланс;
	
	// Строки расшифровки строки 1110.
	ПрефиксВиртуальнойСтроки  = "П2001001110";
	ПрефиксМногострочнойЧасти = "П1001001110";
	СписокФиксированныхСтрок = Новый СписокЗначений;
	СписокФиксированныхСтрок.Добавить("11101", "Нематериальные активы в организации");
	СписокФиксированныхСтрок.Добавить("11102", "Приобретение нематериальных активов");
	ВнестиВиртуальныеСтрокиРасшифровкиБаланс(ИмяФормы, ДанныеРаздела, ДеревоНастройкиСостава,
		ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
	
	// Строки расшифровки строки 1120.
	ПрефиксВиртуальнойСтроки  = "П2001001120";
	ПрефиксМногострочнойЧасти = "П1001001120";
	СписокФиксированныхСтрок = Новый СписокЗначений;
	СписокФиксированныхСтрок.Добавить("11201", "Расходы на научно-исследовательские, опытно-конструкторские и технологические работы");
	СписокФиксированныхСтрок.Добавить("11202", "Выполнение научно-исследовательских, опытно-конструкторских и технологических работ");
	ВнестиВиртуальныеСтрокиРасшифровкиБаланс(ИмяФормы, ДанныеРаздела, ДеревоНастройкиСостава,
		ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
	
	// Строки расшифровки строки 1130.
	ПрефиксВиртуальнойСтроки  = "П2001001130";
	ПрефиксМногострочнойЧасти = "П1001001130";
	СписокФиксированныхСтрок = Новый СписокЗначений;
	ВнестиВиртуальныеСтрокиРасшифровкиБаланс(ИмяФормы, ДанныеРаздела, ДеревоНастройкиСостава,
		ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
	
	// Строки расшифровки строки 1140.
	ПрефиксВиртуальнойСтроки  = "П2001001140";
	ПрефиксМногострочнойЧасти = "П1001001140";
	СписокФиксированныхСтрок = Новый СписокЗначений;
	ВнестиВиртуальныеСтрокиРасшифровкиБаланс(ИмяФормы, ДанныеРаздела, ДеревоНастройкиСостава,
		ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
	
	// Строки расшифровки строки 1150.
	ПрефиксВиртуальнойСтроки  = "П2001001150";
	ПрефиксМногострочнойЧасти = "П1001001150";
	СписокФиксированныхСтрок = Новый СписокЗначений;
	СписокФиксированныхСтрок.Добавить("11501", "Основные средства в организации");
	СписокФиксированныхСтрок.Добавить("11502", "Объекты недвижимости, права собственности на которые не зарегистрированы");
	СписокФиксированныхСтрок.Добавить("11503", "Оборудование к установке");
	СписокФиксированныхСтрок.Добавить("11504", "Приобретение земельных участков");
	СписокФиксированныхСтрок.Добавить("11505", "Приобретение объектов природопользования");
	СписокФиксированныхСтрок.Добавить("11506", "Строительство объектов основных средств");
	СписокФиксированныхСтрок.Добавить("11507", "Приобретение объектов основных средств");
	СписокФиксированныхСтрок.Добавить("11508", "Расходы будущих периодов");
	Если СтруктураОтчета.Баланс.ИмяМакета = "Баланс_2012Кв4_3"
 	 ИЛИ СтруктураОтчета.Баланс.ИмяМакета = "БалансНКО_2012Кв4_3" Тогда
		СписокФиксированныхСтрок.Добавить("11509", "Арендованное имущество");
	КонецЕсли;	
	ВнестиВиртуальныеСтрокиРасшифровкиБаланс(ИмяФормы, ДанныеРаздела, ДеревоНастройкиСостава,
		ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
	
	// Строки расшифровки строки 1160.
	ПрефиксВиртуальнойСтроки  = "П2001001160";
	ПрефиксМногострочнойЧасти = "П1001001160";
	СписокФиксированныхСтрок = Новый СписокЗначений;
	СписокФиксированныхСтрок.Добавить("11601", "Материальные ценности в организации");
	СписокФиксированныхСтрок.Добавить("11602", "Материальные ценности предоставленные во временное владение и пользование");
	СписокФиксированныхСтрок.Добавить("11603", "Материальные ценности предоставленные во временное пользование");
	СписокФиксированныхСтрок.Добавить("11604", "Прочие доходные вложения");
	ВнестиВиртуальныеСтрокиРасшифровкиБаланс(ИмяФормы, ДанныеРаздела, ДеревоНастройкиСостава,
		ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
	
	// Строки расшифровки строки 1170.
	ПрефиксВиртуальнойСтроки  = "П2001001170";
	ПрефиксМногострочнойЧасти = "П1001001170";
	СписокФиксированныхСтрок = Новый СписокЗначений;
	СписокФиксированныхСтрок.Добавить("11701", "Паи");
	ВнестиВиртуальныеСтрокиРасшифровкиБаланс(ИмяФормы, ДанныеРаздела, ДеревоНастройкиСостава,
		ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
	
	// Строки расшифровки строки 1180.
	ПрефиксВиртуальнойСтроки  = "П2001001180";
	ПрефиксМногострочнойЧасти = "П1001001180";
	СписокФиксированныхСтрок = Новый СписокЗначений;
	ВнестиВиртуальныеСтрокиРасшифровкиБаланс(ИмяФормы, ДанныеРаздела, ДеревоНастройкиСостава,
		ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
	
	// Строки расшифровки строки 1190.
	ПрефиксВиртуальнойСтроки  = "П2001001190";
	ПрефиксМногострочнойЧасти = "П1001001190";
	СписокФиксированныхСтрок = Новый СписокЗначений;
	СписокФиксированныхСтрок.Добавить("11901", "Перевод молодняка животных в основное стадо");
	СписокФиксированныхСтрок.Добавить("11902", "Приобретение взрослых животных");
	СписокФиксированныхСтрок.Добавить("11903", "Расходы будущих периодов");
	ВнестиВиртуальныеСтрокиРасшифровкиБаланс(ИмяФормы, ДанныеРаздела, ДеревоНастройкиСостава,
		ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
	
	// Строки расшифровки строки 1210.
	ПрефиксВиртуальнойСтроки  = "П2001001210";
	ПрефиксМногострочнойЧасти = "П1001001210";
	СписокФиксированныхСтрок = Новый СписокЗначений;
	СписокФиксированныхСтрок.Добавить("12101", "Материалы");
	СписокФиксированныхСтрок.Добавить("12102", "Брак в производстве");
	СписокФиксированныхСтрок.Добавить("12103", "Товары отгруженные");
	СписокФиксированныхСтрок.Добавить("12104", "Товары");
	СписокФиксированныхСтрок.Добавить("12105", "Готовая продукция");
	СписокФиксированныхСтрок.Добавить("12106", "Расходы на продажу");
	Если СтрокаОтраженияСчета46 = "1210" Тогда	
		СписокФиксированныхСтрок.Добавить("12107", "Выполненные этапы по незавершенным работам");
	КонецЕсли;
	СписокФиксированныхСтрок.Добавить("12108", "Основное производство");
	СписокФиксированныхСтрок.Добавить("12109", "Полуфабрикаты собственного производства");
	СписокФиксированныхСтрок.Добавить("12110", "Вспомогательные производства");
	СписокФиксированныхСтрок.Добавить("12111", "Обслуживающие производства и хозяйства");
	СписокФиксированныхСтрок.Добавить("12112", "Расходы будущих периодов");
	ВнестиВиртуальныеСтрокиРасшифровкиБаланс(ИмяФормы, ДанныеРаздела, ДеревоНастройкиСостава,
		ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
	
	// Строки расшифровки строки 1220.
	ПрефиксВиртуальнойСтроки  = "П2001001220";
	ПрефиксМногострочнойЧасти = "П1001001220";
	СписокФиксированныхСтрок = Новый СписокЗначений;
	СписокФиксированныхСтрок.Добавить("12201", "НДС по приобретенным ОС");
	СписокФиксированныхСтрок.Добавить("12202", "НДС по приобретенным НМА");
	СписокФиксированныхСтрок.Добавить("12203", "НДС по приобретенным материально-производственным запасам");
	СписокФиксированныхСтрок.Добавить("12204", "НДС по приобретенным услугам");
	СписокФиксированныхСтрок.Добавить("12205", "НДС, уплаченный при ввозе товаров на территорию РФ");
	СписокФиксированныхСтрок.Добавить("12206", "НДС по товарам, реализованным по ставке 0% (экспорт)");
	СписокФиксированныхСтрок.Добавить("12207", "НДС при строительстве ОС");
	ВнестиВиртуальныеСтрокиРасшифровкиБаланс(ИмяФормы, ДанныеРаздела, ДеревоНастройкиСостава,
		ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
	
	// Строки расшифровки строки 1230.
	ПрефиксВиртуальнойСтроки  = "П2001001230";
	ПрефиксМногострочнойЧасти = "П1001001230";
	СписокФиксированныхСтрок = Новый СписокЗначений;
	СписокФиксированныхСтрок.Добавить("12301", "Расчеты с поставщиками и подрядчиками");
	СписокФиксированныхСтрок.Добавить("12302", "Расчеты с покупателями и заказчиками");
	СписокФиксированныхСтрок.Добавить("12303", "Расчеты по налогам и сборам");
	СписокФиксированныхСтрок.Добавить("12304", "Расчеты по социальному страхованию и обеспечению");
	СписокФиксированныхСтрок.Добавить("12310", "Расчеты с персоналом по оплате труда");
	СписокФиксированныхСтрок.Добавить("12305", "Расчеты с подотчетными лицами");
	СписокФиксированныхСтрок.Добавить("12306", "Расчеты с персоналом по прочим операциям");
	СписокФиксированныхСтрок.Добавить("12307", "Расчеты по вкладам в уставный (складочный) капитал");
	СписокФиксированныхСтрок.Добавить("12308", "Расчеты с разными дебиторами и кредиторами");
	СписокФиксированныхСтрок.Добавить("12309", "Расходы будущих периодов");
	Если СтрокаОтраженияСчета46 = "1230" Тогда
		СписокФиксированныхСтрок.Добавить("12311", "Выполненные этапы по незавершенным работам");
	КонецЕсли;
	Если СтрокаОтраженияСчета96 = "1230" Тогда
		СписокФиксированныхСтрок.Добавить("12312", "Оценочные обязательства");
	КонецЕсли;
	СписокФиксированныхСтрок.Добавить("12313", "Расчеты с факторинговыми компаниями");
	ВнестиВиртуальныеСтрокиРасшифровкиБаланс(ИмяФормы, ДанныеРаздела, ДеревоНастройкиСостава,
		ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
	
	// Строки расшифровки строки 1240.
	ПрефиксВиртуальнойСтроки  = "П2001001240";
	ПрефиксМногострочнойЧасти = "П1001001240";
	СписокФиксированныхСтрок = Новый СписокЗначений;
	СписокФиксированныхСтрок.Добавить("12401", "Акции");
	СписокФиксированныхСтрок.Добавить("12402", "Долговые ценные бумаги");
	СписокФиксированныхСтрок.Добавить("12403", "Предоставленные займы");
	СписокФиксированныхСтрок.Добавить("12404", "Вклады по договору простого товарищества");
	СписокФиксированныхСтрок.Добавить("12405", "Приобретенные права в рамках оказания финансовых услуг");
	СписокФиксированныхСтрок.Добавить("12406", "Депозитные счета");
	СписокФиксированныхСтрок.Добавить("12407", "Депозитные счета (в валюте)");
	ВнестиВиртуальныеСтрокиРасшифровкиБаланс(ИмяФормы, ДанныеРаздела, ДеревоНастройкиСостава,
		ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
	
	// Строки расшифровки строки 1250.
	ПрефиксВиртуальнойСтроки  = "П2001001250";
	ПрефиксМногострочнойЧасти = "П1001001250";
	СписокФиксированныхСтрок = Новый СписокЗначений;
	СписокФиксированныхСтрок.Добавить("12501", "Касса организации");
	СписокФиксированныхСтрок.Добавить("12502", "Операционная касса");
	СписокФиксированныхСтрок.Добавить("12503", "Касса организации (в валюте)");
	СписокФиксированныхСтрок.Добавить("12512", "Касса по деятельности платежного агента");
	СписокФиксированныхСтрок.Добавить("12504", "Расчетные счета");
	СписокФиксированныхСтрок.Добавить("12505", "Валютные счета");
	СписокФиксированныхСтрок.Добавить("12506", "Аккредитивы");
	СписокФиксированныхСтрок.Добавить("12507", "Чековые книжки");
	СписокФиксированныхСтрок.Добавить("12508", "Прочие специальные счета");
	СписокФиксированныхСтрок.Добавить("12509", "Аккредитивы (в валюте)");
	СписокФиксированныхСтрок.Добавить("12510", "Прочие специальные счета (в валюте)");
	СписокФиксированныхСтрок.Добавить("12511", "Переводы в пути");
	ВнестиВиртуальныеСтрокиРасшифровкиБаланс(ИмяФормы, ДанныеРаздела, ДеревоНастройкиСостава,
		ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
	
	// Строки расшифровки строки 1260.
	ПрефиксВиртуальнойСтроки  = "П2001001260";
	ПрефиксМногострочнойЧасти = "П1001001260";
	СписокФиксированныхСтрок = Новый СписокЗначений;
	СписокФиксированныхСтрок.Добавить("12601", "Акцизы по оплаченным материальным ценностям");
	СписокФиксированныхСтрок.Добавить("12602", "Денежные документы");
	СписокФиксированныхСтрок.Добавить("12603", "Денежные документы (в валюте)");
	СписокФиксированныхСтрок.Добавить("12604", "НДС по экспорту к возмещению");
	Если СтрокаОтраженияСчета76_АВ = "1260" Тогда
		СписокФиксированныхСтрок.Добавить("12605", "НДС по авансам и предоплатам");
	КонецЕсли;
	СписокФиксированныхСтрок.Добавить("12606", "НДС, начисленный по отгрузке");
	СписокФиксированныхСтрок.Добавить("12607", "Расчеты по НДС при исполнении обязанностей налогового агента");
	СписокФиксированныхСтрок.Добавить("12608", "Расходы будущих периодов");
	СписокФиксированныхСтрок.Добавить("12609", "Недостачи и потери от порчи ценностей");
	Если СтруктураОтчета.Баланс.ИмяМакета = "Баланс_2012Кв4_3"
     ИЛИ СтруктураОтчета.Баланс.ИмяМакета = "БалансНКО_2012Кв4_3" Тогда
		СписокФиксированныхСтрок.Добавить("12610", "НДС по арендным обязательствам");
	КонецЕсли;	
	Если СтрокаОтраженияСчета96 = "1260" Тогда	
		СписокФиксированныхСтрок.Добавить("12610", "Оценочные обязательства");
	КонецЕсли;
	Если СтрокаОтраженияСчета46 = "1260" Тогда	
		СписокФиксированныхСтрок.Добавить("12611", "Выполненные этапы по незавершенным работам");
	КонецЕсли;
	ВнестиВиртуальныеСтрокиРасшифровкиБаланс(ИмяФормы, ДанныеРаздела, ДеревоНастройкиСостава,
		ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
	
	// Строки расшифровки строки 1310.
	ПрефиксВиртуальнойСтроки  = "П2001001310";
	ПрефиксМногострочнойЧасти = "П1001001310";
	СписокФиксированныхСтрок = Новый СписокЗначений;
	ВнестиВиртуальныеСтрокиРасшифровкиБаланс(ИмяФормы, ДанныеРаздела, ДеревоНастройкиСостава,
		ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
	
	// Строки расшифровки строки 1320.
	ПрефиксВиртуальнойСтроки  = "П2001001320";
	ПрефиксМногострочнойЧасти = "П1001001320";
	СписокФиксированныхСтрок = Новый СписокЗначений;
	ВнестиВиртуальныеСтрокиРасшифровкиБаланс(ИмяФормы, ДанныеРаздела, ДеревоНастройкиСостава,
		ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
	
	// Строки расшифровки строки 1340.
	Если НЕ СтруктураРеквизитовФормы.ЭтоБалансНекоммерческойОрганизации Тогда
		ПрефиксВиртуальнойСтроки  = "П2001001340";
		ПрефиксМногострочнойЧасти = "П1001001340";
		СписокФиксированныхСтрок = Новый СписокЗначений;
		СписокФиксированныхСтрок.Добавить("13401", "Переоценка основных средств");
		СписокФиксированныхСтрок.Добавить("13402", "Переоценка НМА");
		СписокФиксированныхСтрок.Добавить("13403", "Переоценка прочих внеоборотных активов");
		ВнестиВиртуальныеСтрокиРасшифровкиБаланс(ИмяФормы, ДанныеРаздела, ДеревоНастройкиСостава,
			ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
	КонецЕсли;
	
	// Строки расшифровки строки 1350.
	ПрефиксВиртуальнойСтроки  = "П2001001350";
	ПрефиксМногострочнойЧасти = "П1001001350";
	СписокФиксированныхСтрок = Новый СписокЗначений;
	ВнестиВиртуальныеСтрокиРасшифровкиБаланс(ИмяФормы, ДанныеРаздела, ДеревоНастройкиСостава,
		ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
	
	// Строки расшифровки строки 1360.
	ПрефиксВиртуальнойСтроки  = "П2001001360";
	ПрефиксМногострочнойЧасти = "П1001001360";
	СписокФиксированныхСтрок = Новый СписокЗначений;
	Если НЕ СтруктураРеквизитовФормы.ЭтоБалансНекоммерческойОрганизации Тогда
		СписокФиксированныхСтрок.Добавить("13601", "Резервы, образованные в соответствии с законодательством");
		СписокФиксированныхСтрок.Добавить("13602", "Резервы, образованные в соответствии с учредительными документами");
	КонецЕсли;
	ВнестиВиртуальныеСтрокиРасшифровкиБаланс(ИмяФормы, ДанныеРаздела, ДеревоНастройкиСостава,
		ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
	
	// Строки расшифровки строки 1370.
	ПрефиксВиртуальнойСтроки  = "П2001001370";
	ПрефиксМногострочнойЧасти = "П1001001370";
	СписокФиксированныхСтрок = Новый СписокЗначений;
	ВнестиВиртуальныеСтрокиРасшифровкиБаланс(ИмяФормы, ДанныеРаздела, ДеревоНастройкиСостава,
		ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
	
	// Строки расшифровки строки 1410.
	ПрефиксВиртуальнойСтроки  = "П2001001410";
	ПрефиксМногострочнойЧасти = "П1001001410";
	СписокФиксированныхСтрок = Новый СписокЗначений;
	СписокФиксированныхСтрок.Добавить("14101", "Долгосрочные кредиты");
	СписокФиксированныхСтрок.Добавить("14102", "Долгосрочные займы");
	СписокФиксированныхСтрок.Добавить("14103", "Долгосрочные кредиты (в валюте)");
	СписокФиксированныхСтрок.Добавить("14104", "Долгосрочные займы (в валюте)");
	ВнестиВиртуальныеСтрокиРасшифровкиБаланс(ИмяФормы, ДанныеРаздела, ДеревоНастройкиСостава,
		ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
	
	// Строки расшифровки строки 1420.
	ПрефиксВиртуальнойСтроки  = "П2001001420";
	ПрефиксМногострочнойЧасти = "П1001001420";
	СписокФиксированныхСтрок = Новый СписокЗначений;
	ВнестиВиртуальныеСтрокиРасшифровкиБаланс(ИмяФормы, ДанныеРаздела, ДеревоНастройкиСостава,
		ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
	
	// Строки расшифровки строки 1450.
	ПрефиксВиртуальнойСтроки  = "П2001001450";
	ПрефиксМногострочнойЧасти = "П1001001450";
	СписокФиксированныхСтрок = Новый СписокЗначений;
	ВнестиВиртуальныеСтрокиРасшифровкиБаланс(ИмяФормы, ДанныеРаздела, ДеревоНастройкиСостава,
		ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
	
	// Строки расшифровки строки 1510.
	ПрефиксВиртуальнойСтроки  = "П2001001510";
	ПрефиксМногострочнойЧасти = "П1001001510";
	СписокФиксированныхСтрок = Новый СписокЗначений;
	СписокФиксированныхСтрок.Добавить("15101", "Краткосрочные кредиты");
	СписокФиксированныхСтрок.Добавить("15102", "Краткосрочные займы");
	СписокФиксированныхСтрок.Добавить("15103", "Проценты по краткосрочным кредитам");
	СписокФиксированныхСтрок.Добавить("15104", "Проценты по долгосрочным кредитам");
	СписокФиксированныхСтрок.Добавить("15105", "Проценты по краткосрочным займам");
	СписокФиксированныхСтрок.Добавить("15106", "Проценты по долгосрочным займам");
	СписокФиксированныхСтрок.Добавить("15107", "Краткосрочные кредиты (в валюте)");
	СписокФиксированныхСтрок.Добавить("15108", "Краткосрочные займы (в валюте)");
	СписокФиксированныхСтрок.Добавить("15109", "Проценты по краткосрочным кредитам (в валюте)");
	СписокФиксированныхСтрок.Добавить("15110", "Проценты по долгосрочным кредитам (в валюте)");
	СписокФиксированныхСтрок.Добавить("15111", "Проценты по краткосрочным займам (в валюте)");
	СписокФиксированныхСтрок.Добавить("15112", "Проценты по долгосрочным займам (в валюте)");
	ВнестиВиртуальныеСтрокиРасшифровкиБаланс(ИмяФормы, ДанныеРаздела, ДеревоНастройкиСостава,
		ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
	
	// Строки расшифровки строки 1520.
	ПрефиксВиртуальнойСтроки  = "П2001001520";
	ПрефиксМногострочнойЧасти = "П1001001520";
	СписокФиксированныхСтрок = Новый СписокЗначений;
	СписокФиксированныхСтрок.Добавить("15201", "Расчеты с поставщиками и подрядчиками");
	СписокФиксированныхСтрок.Добавить("15202", "Расчеты с покупателями и заказчиками");
	СписокФиксированныхСтрок.Добавить("15203", "Расчеты по налогам и сборам");
	СписокФиксированныхСтрок.Добавить("15204", "Расчеты по социальному страхованию и обеспечению");
	СписокФиксированныхСтрок.Добавить("15205", "Расчеты с персоналом по оплате труда");
	СписокФиксированныхСтрок.Добавить("15206", "Расчеты с подотчетными лицами");
	СписокФиксированныхСтрок.Добавить("15207", "Задолженность участникам (учредителям) по выплате доходов");
	СписокФиксированныхСтрок.Добавить("15208", "Расчеты с разными дебиторами и кредиторами");
	СписокФиксированныхСтрок.Добавить("15209", "Расчеты с персоналом по прочим операциям");
	ВнестиВиртуальныеСтрокиРасшифровкиБаланс(ИмяФормы, ДанныеРаздела, ДеревоНастройкиСостава,
		ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
	
	// Строки расшифровки строки 1530.
	ПрефиксВиртуальнойСтроки  = "П2001001530";
	ПрефиксМногострочнойЧасти = "П1001001530";
	СписокФиксированныхСтрок = Новый СписокЗначений;
	Если НЕ СтруктураРеквизитовФормы.ЭтоБалансНекоммерческойОрганизации Тогда
		СписокФиксированныхСтрок.Добавить("15301", "Целевое финансирование");
	КонецЕсли;
	СписокФиксированныхСтрок.Добавить("15302", "Доходы, полученные в счет будущих периодов");
	СписокФиксированныхСтрок.Добавить("15303", "Безвозмездные поступления");
	СписокФиксированныхСтрок.Добавить("15304", "Предстоящие поступления по недостачам, выявленным за прошлые годы");
	СписокФиксированныхСтрок.Добавить("15305", "Разница между суммой, подлежащей взысканию с виновных лиц, и балансовой стоимостью по недостачам ценностей");
	ВнестиВиртуальныеСтрокиРасшифровкиБаланс(ИмяФормы, ДанныеРаздела, ДеревоНастройкиСостава,
		ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
			
	// Строки расшифровки строки 1540.
	ПрефиксВиртуальнойСтроки  = "П2001001540";
	ПрефиксМногострочнойЧасти = "П1001001540";
	СписокФиксированныхСтрок = Новый СписокЗначений;
	
	Если СтруктураОтчета.Баланс.ИмяМакета = "Баланс_2012Кв4_3"
 	 ИЛИ СтруктураОтчета.Баланс.ИмяМакета = "БалансНКО_2012Кв4_3" Тогда
	 
		СписокФиксированныхСтрок.Добавить("15401", "Оценочные обязательства по вознаграждениям работников");
		СписокФиксированныхСтрок.Добавить("15402", "Резервы предстоящих расходов прочие");
		
	КонецЕсли;	
	
	ВнестиВиртуальныеСтрокиРасшифровкиБаланс(ИмяФормы, ДанныеРаздела, ДеревоНастройкиСостава,
		ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
	
	// Строки расшифровки строки 1550.
	ПрефиксВиртуальнойСтроки  = "П2001001550";
	ПрефиксМногострочнойЧасти = "П1001001550";
	СписокФиксированныхСтрок = Новый СписокЗначений;
	ВнестиВиртуальныеСтрокиРасшифровкиБаланс(ИмяФормы, ДанныеРаздела, ДеревоНастройкиСостава,
		ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
	
КонецПроцедуры

Процедура ДобавитьВиртуальныеСтрокиРасшифровкиФормаОтчета(ИмяФормы,
														  Раздел,
														  ДанныеРаздела,
														  СоставДополнительныхСтрок,
														  ПрименяетсяЕНВД,
														  СтруктураОтчета,
														  СтруктураРеквизитовФормы,
														  ДеревоНастроекБаланс,
														  ДеревоНастроекФормаОтчета)
	
	ПолучитьДеревоНастроекСоставаДопСтрок(ИмяФормы, "ФормаОтчета", СтруктураРеквизитовФормы,
										  ДеревоНастроекБаланс, ДеревоНастроекФормаОтчета);
	
	ДеревоНастройкиСостава = ДеревоНастроекФормаОтчета;
	
	// Строки расшифровки строки 2110.
	Если ПрименяетсяЕНВД Тогда
		ПрефиксВиртуальнойСтроки  = "П2001002110";
		ПрефиксМногострочнойЧасти = "";
		СписокФиксированныхСтрок = Новый СписокЗначений;
		СписокФиксированныхСтрок.Добавить("21101", "Выручка по деятельности с основной системой налогообложения");
		СписокФиксированныхСтрок.Добавить("21102", "Выручка по отдельным видам деятельности (ЕНВД)");
	Иначе
		ПрефиксВиртуальнойСтроки  = "П2001002110";
		ПрефиксМногострочнойЧасти = ?(ВключенВОтчет(ИмяФормы, ДеревоНастройкиСостава, "ДопСтрока2110"), "П1001002110", "");
		СписокФиксированныхСтрок = Новый СписокЗначений;
	КонецЕсли;
	ВнестиВиртуальныеСтрокиРасшифровкиФормаОтчета(ИмяФормы, ДанныеРаздела, ДеревоНастройкиСостава,
		ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
	
	// Строки расшифровки строки 2120.
	Если ПрименяетсяЕНВД Тогда
		ПрефиксВиртуальнойСтроки  = "П2001002120";
		ПрефиксМногострочнойЧасти = "";
		СписокФиксированныхСтрок = Новый СписокЗначений;
		СписокФиксированныхСтрок.Добавить("21201", "Себестоимость продаж по деятельности с основной системой налогообложения");
		СписокФиксированныхСтрок.Добавить("21202", "Себестоимость продаж по отдельным видам деятельности (ЕНВД)");
	Иначе
		ПрефиксВиртуальнойСтроки  = "П2001002120";
		ПрефиксМногострочнойЧасти = ?(ВключенВОтчет(ИмяФормы, ДеревоНастройкиСостава, "ДопСтрока2120"), "П1001002120", "");
		СписокФиксированныхСтрок = Новый СписокЗначений;
	КонецЕсли;
	ВнестиВиртуальныеСтрокиРасшифровкиФормаОтчета(ИмяФормы, ДанныеРаздела, ДеревоНастройкиСостава,
		ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
	
	// Строки расшифровки строки 2100.
	Если ПрименяетсяЕНВД Тогда
		ПрефиксВиртуальнойСтроки  = "П2001002100";
		ПрефиксМногострочнойЧасти = "";
		СписокФиксированныхСтрок = Новый СписокЗначений;
		СписокФиксированныхСтрок.Добавить("21001", "Валовая прибыль (убыток) по деятельности с основной системой налогообложения");
		СписокФиксированныхСтрок.Добавить("21002", "Валовая прибыль (убыток) по отдельным видам деятельности (ЕНВД)");
	Иначе
		ПрефиксВиртуальнойСтроки  = "П2001002100";
		ПрефиксМногострочнойЧасти = "П1001002100";
		СписокФиксированныхСтрок = Новый СписокЗначений;
	КонецЕсли;
	ВнестиВиртуальныеСтрокиРасшифровкиФормаОтчета(ИмяФормы, ДанныеРаздела, ДеревоНастройкиСостава,
		ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
	
	// Строки расшифровки строки 2210.
	Если ПрименяетсяЕНВД Тогда
		ПрефиксВиртуальнойСтроки  = "П2001002210";
		ПрефиксМногострочнойЧасти = "";
		СписокФиксированныхСтрок = Новый СписокЗначений;
		СписокФиксированныхСтрок.Добавить("22101", "Коммерческие расходы по деятельности с основной системой налогообложения");
		СписокФиксированныхСтрок.Добавить("22102", "Коммерческие расходы по отдельным видам деятельности (ЕНВД)");
	Иначе
		ПрефиксВиртуальнойСтроки  = "П2001002210";
		ПрефиксМногострочнойЧасти = ?(ВключенВОтчет(ИмяФормы, ДеревоНастройкиСостава, "ДопСтрока2210"), "П1001002210", "");
		СписокФиксированныхСтрок = Новый СписокЗначений;
	КонецЕсли;
	ВнестиВиртуальныеСтрокиРасшифровкиФормаОтчета(ИмяФормы, ДанныеРаздела, ДеревоНастройкиСостава,
		ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
	
	// Строки расшифровки строки 2220.
	Если ПрименяетсяЕНВД Тогда
		ПрефиксВиртуальнойСтроки  = "П2001002220";
		ПрефиксМногострочнойЧасти = "";
		СписокФиксированныхСтрок = Новый СписокЗначений;
		СписокФиксированныхСтрок.Добавить("22201", "Управленческие расходы по деятельности с основной системой налогообложения");
		СписокФиксированныхСтрок.Добавить("22202", "Управленческие  расходы по отдельным видам деятельности (ЕНВД)");
	Иначе
		ПрефиксВиртуальнойСтроки  = "П2001002220";
		ПрефиксМногострочнойЧасти = ?(ВключенВОтчет(ИмяФормы, ДеревоНастройкиСостава, "ДопСтрока2220"), "П1001002220", "");
		СписокФиксированныхСтрок = Новый СписокЗначений;
	КонецЕсли;
	ВнестиВиртуальныеСтрокиРасшифровкиФормаОтчета(ИмяФормы, ДанныеРаздела, ДеревоНастройкиСостава,
		ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
	
	// Строки расшифровки строки 2200.
	Если ПрименяетсяЕНВД Тогда
		ПрефиксВиртуальнойСтроки  = "П2001002200";
		ПрефиксМногострочнойЧасти = "";
		СписокФиксированныхСтрок = Новый СписокЗначений;
		СписокФиксированныхСтрок.Добавить("22001", "Прибыль (убыток) от продаж по деятельности с основной системой налогообложения");
		СписокФиксированныхСтрок.Добавить("22002", "Прибыль (убыток) от продаж по отдельным видам деятельности (ЕНВД)");
	Иначе
		ПрефиксВиртуальнойСтроки  = "П2001002200";
		ПрефиксМногострочнойЧасти = "П1001002200";
		СписокФиксированныхСтрок = Новый СписокЗначений;
	КонецЕсли;
	ВнестиВиртуальныеСтрокиРасшифровкиФормаОтчета(ИмяФормы, ДанныеРаздела, ДеревоНастройкиСостава,
		ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
	
	// Строки расшифровки строки 2310.
	ПрефиксВиртуальнойСтроки  = "П2001002310";
	ПрефиксМногострочнойЧасти = "";
	СписокФиксированныхСтрок = Новый СписокЗначений;
	СписокФиксированныхСтрок.Добавить("23101", "Доходы (расходы), связанные с участием в других организациях");
	СписокФиксированныхСтрок.Добавить("23102", "Долевое участие в иностранных организациях");
	СписокФиксированныхСтрок.Добавить("23103", "Долевое участие в российских организациях");
	ВнестиВиртуальныеСтрокиРасшифровкиФормаОтчета(ИмяФормы, ДанныеРаздела, ДеревоНастройкиСостава,
		ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
	
	// Строки расшифровки строки 2320.
	ПрефиксВиртуальнойСтроки  = "П2001002320";
	ПрефиксМногострочнойЧасти = "";
	СписокФиксированныхСтрок = Новый СписокЗначений;
	СписокФиксированныхСтрок.Добавить("23201", "Проценты к получению");
	СписокФиксированныхСтрок.Добавить("23202", "Проценты по государственным ценным бумагам");
	СписокФиксированныхСтрок.Добавить("23203", "Проценты по государственным ценным бумагам по ставке 0%");
	ВнестиВиртуальныеСтрокиРасшифровкиФормаОтчета(ИмяФормы, ДанныеРаздела, ДеревоНастройкиСостава,
		ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
	
	// Строки расшифровки строки 2330.
	ПрефиксВиртуальнойСтроки  = "П2001002330";
	ПрефиксМногострочнойЧасти = "";
	СписокФиксированныхСтрок = Новый СписокЗначений;
	СписокФиксированныхСтрок.Добавить("23301", "Проценты к уплате");
	СписокФиксированныхСтрок.Добавить("23302", "Проценты, начисленные в соответствии со статьей 269 НК РФ");
	ВнестиВиртуальныеСтрокиРасшифровкиФормаОтчета(ИмяФормы, ДанныеРаздела, ДеревоНастройкиСостава,
		ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
	
	// Строки расшифровки строки 2340.
	ПрефиксВиртуальнойСтроки  = "П2001002340";
	ПрефиксМногострочнойЧасти = "П1001002340";
	СписокФиксированныхСтрок = Новый СписокЗначений;
	СписокФиксированныхСтрок.Добавить("23401", "Доходы, связанные с реализацией основных средств");
	СписокФиксированныхСтрок.Добавить("23402", "Доходы, связанные с ликвидацией основных средств");
	СписокФиксированныхСтрок.Добавить("23403", "Доходы, связанные с реализацией нематериальных активов");
	СписокФиксированныхСтрок.Добавить("23404", "Доходы, связанные с реализацией прочего имущества");
	СписокФиксированныхСтрок.Добавить("23405", "Доходы, связанные с реализацией права требования как оказания финансовых услуг");
	СписокФиксированныхСтрок.Добавить("23406", "Доходы, связанные с реализацией права до наступления платежа");
	СписокФиксированныхСтрок.Добавить("23407", "Доходы, связанные с реализацией права после наступления срока платежа");
	СписокФиксированныхСтрок.Добавить("23408", "Доходы, связанные с реализацией имущественных прав, кроме права требования");
	СписокФиксированныхСтрок.Добавить("23409", "Доходы, связанные с реализацией имущественных прав по объектам обслуживающих производств и хозяйств");
	СписокФиксированныхСтрок.Добавить("23410", "Доходы, связанные с реализацией ценных бумаг");
	СписокФиксированныхСтрок.Добавить("23411", "Доходы по операциям с финансовыми инструментами срочных сделок, не обращающимися на организованном рынке");
	СписокФиксированныхСтрок.Добавить("23412", "Доходы по операциям с финансовыми инструментами срочных сделок, обращающимися на организованном рынке");
	СписокФиксированныхСтрок.Добавить("23413", "Доходы, связанные со сдачей имущества в аренду (субаренду)");
	СписокФиксированныхСтрок.Добавить("23414", "Доходы в виде восстановленных оценочных резервов");
	СписокФиксированныхСтрок.Добавить("23415", "Разница между первоначальной и номинальной стоимостью по долговым ценным бумагам");
	СписокФиксированныхСтрок.Добавить("23416", "Прочие операционные доходы");
	СписокФиксированныхСтрок.Добавить("23417", "Штрафы, пени, неустойки к получению");
	СписокФиксированныхСтрок.Добавить("23418", "Прибыль прошлых лет");
	СписокФиксированныхСтрок.Добавить("23419", "Возмещение убытков к получению");
	СписокФиксированныхСтрок.Добавить("23420", "Курсовые разницы");
	СписокФиксированныхСтрок.Добавить("23421", "Курсовые разницы по расчетам в у.е.");
	СписокФиксированныхСтрок.Добавить("23422", "Доходы в виде списанной кредиторской задолженности");
	СписокФиксированныхСтрок.Добавить("23423", "Доходы, связанные с переоценкой внеоборотных активов");
	СписокФиксированныхСтрок.Добавить("23424", "Прочие внереализационные доходы");
	СписокФиксированныхСтрок.Добавить("23425", "Корректировка прибыли до рыночных цен");
	СписокФиксированныхСтрок.Добавить("23426", "Доходы, связанные с реализацией объектов строительства");
	ВнестиВиртуальныеСтрокиРасшифровкиФормаОтчета(ИмяФормы, ДанныеРаздела, ДеревоНастройкиСостава,
		ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
	
	// Строки расшифровки строки 2350.
	ПрефиксВиртуальнойСтроки  = "П2001002350";
	ПрефиксМногострочнойЧасти = "П1001002350";
	СписокФиксированныхСтрок = Новый СписокЗначений;
	СписокФиксированныхСтрок.Добавить("23501", "Расходы, связанные с участием в других организациях");
	СписокФиксированныхСтрок.Добавить("23502", "Расходы, связанные с участием в российских организациях");
	СписокФиксированныхСтрок.Добавить("23503", "Расходы, связанные с участием в иностранных организациях");
	СписокФиксированныхСтрок.Добавить("23504", "Расходы, связанные с реализацией основных средств");
	СписокФиксированныхСтрок.Добавить("23505", "Расходы, связанные с ликвидацией основных средств");
	СписокФиксированныхСтрок.Добавить("23506", "Расходы, связанные с реализацией нематериальных активов");
	СписокФиксированныхСтрок.Добавить("23507", "Расходы, связанные с реализацией прочего имущества");
	СписокФиксированныхСтрок.Добавить("23508", "Расходы, связанный с реализацией права требования как оказания финансовых услуг");
	СписокФиксированныхСтрок.Добавить("23509", "Расходы, связанные с реализацией права требования до наступления срока платежа");
	СписокФиксированныхСтрок.Добавить("23510", "Расходы, связанные с реализацией права требования после наступления срока платежа");
	СписокФиксированныхСтрок.Добавить("23511", "Расходы, связанные с реализацией имущественных прав, кроме права требования");
	СписокФиксированныхСтрок.Добавить("23512", "Расходы, связанные с реализацией имущественных прав по объектам обслуживающих производств и хозяйств");
	СписокФиксированныхСтрок.Добавить("23513", "Расходы, связанные с реализацией ценных бумаг");
	СписокФиксированныхСтрок.Добавить("23514", "Расходы по операциям с финансовыми инструментами срочных сделок, не обращающимися на организованном рынке");
	СписокФиксированныхСтрок.Добавить("23515", "Расходы по операциям с финансовыми инструментами срочных сделок, обращающимися на организованном рынке");
	СписокФиксированныхСтрок.Добавить("23516", "Расходы, связанные со сдачей имущества в аренду (субаренду)");
	СписокФиксированныхСтрок.Добавить("23517", "Расходы в виде образованных оценочных резервов");
	СписокФиксированныхСтрок.Добавить("23518", "Разница между первоначальной и номинальной стоимостью по долговым ценным бумагам");
	СписокФиксированныхСтрок.Добавить("23519", "Расходы на услуги банков");
	СписокФиксированныхСтрок.Добавить("23520", "Прочие операционные расходы");
	СписокФиксированныхСтрок.Добавить("23521", "Штрафы, пени, неустойки к уплате");
	СписокФиксированныхСтрок.Добавить("23522", "Убытки прошлых лет");
	СписокФиксированныхСтрок.Добавить("23523", "Курсовые разницы");
	СписокФиксированныхСтрок.Добавить("23524", "Курсовые разницы по расчетам в у.е.");
	СписокФиксированныхСтрок.Добавить("23525", "Налоги и сборы");
	СписокФиксированныхСтрок.Добавить("23526", "Премия, выплаченная покупателю");
	СписокФиксированныхСтрок.Добавить("23527", "Расходы в виде списанной дебиторской задолженности");
	СписокФиксированныхСтрок.Добавить("23528", "Расходы, связанные с безвозмездным получением имущества, работ, услуг или имущественных прав");
	СписокФиксированныхСтрок.Добавить("23529", "Расходы по передаче товаров (работ, услуг) безвозмездно и для собственных нужд");
	СписокФиксированныхСтрок.Добавить("23530", "Прочие внереализационные расходы");
	СписокФиксированныхСтрок.Добавить("23531", "Прочие косвенные расходы");
	СписокФиксированныхСтрок.Добавить("23532", "Расходы, связанные с переоценкой внеоборотных активов");
	СписокФиксированныхСтрок.Добавить("23533", "Прочие убытки, приравненные к внереализационным расходам");
	СписокФиксированныхСтрок.Добавить("23534", "Расходы, связанные с реализацией объектов строительства");
	ВнестиВиртуальныеСтрокиРасшифровкиФормаОтчета(ИмяФормы, ДанныеРаздела, ДеревоНастройкиСостава,
		ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
	
	// Строки расшифровки строки 2300.
	Если ПрименяетсяЕНВД Тогда
		ПрефиксВиртуальнойСтроки  = "П2001002300";
		ПрефиксМногострочнойЧасти = "";
		СписокФиксированныхСтрок = Новый СписокЗначений;
		СписокФиксированныхСтрок.Добавить("23001", "Прибыль (убыток) до налогообложения по деятельности с основной системой налогообложения");
		СписокФиксированныхСтрок.Добавить("23002", "Прибыль (убыток) до налогообложения по отдельным видам деятельности (ЕНВД)");
	Иначе
		ПрефиксВиртуальнойСтроки  = "П2001002300";
		ПрефиксМногострочнойЧасти = "П1001002300";
		СписокФиксированныхСтрок = Новый СписокЗначений;
	КонецЕсли;
	ВнестиВиртуальныеСтрокиРасшифровкиФормаОтчета(ИмяФормы, ДанныеРаздела, ДеревоНастройкиСостава,
		ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
	
	// Строки расшифровки строки 2421.
	ПрефиксВиртуальнойСтроки  = "П2001002421";
	ПрефиксМногострочнойЧасти = "П1001002421";
	СписокФиксированныхСтрок = Новый СписокЗначений;
	ВнестиВиртуальныеСтрокиРасшифровкиФормаОтчета(ИмяФормы, ДанныеРаздела, ДеревоНастройкиСостава,
		ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
	
	// Строки расшифровки строки 2430.
	ПрефиксВиртуальнойСтроки  = "П2001002430";
	ПрефиксМногострочнойЧасти = "П1001002430";
	СписокФиксированныхСтрок = Новый СписокЗначений;
	ВнестиВиртуальныеСтрокиРасшифровкиФормаОтчета(ИмяФормы, ДанныеРаздела, ДеревоНастройкиСостава,
		ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
	
	// Строки расшифровки строки 2450.
	ПрефиксВиртуальнойСтроки  = "П2001002450";
	ПрефиксМногострочнойЧасти = "П1001002450";
	СписокФиксированныхСтрок = Новый СписокЗначений;
	ВнестиВиртуальныеСтрокиРасшифровкиФормаОтчета(ИмяФормы, ДанныеРаздела, ДеревоНастройкиСостава,
		ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
	
	// Строки расшифровки строки 2460.
	ПрефиксВиртуальнойСтроки  = "П2001002460";
	ПрефиксМногострочнойЧасти = "П1001002460";
	СписокФиксированныхСтрок = Новый СписокЗначений;
	СписокФиксированныхСтрок.Добавить("24601", "Налоги, уплачиваемые в связи с применением специальных налоговых режимов");
	СписокФиксированныхСтрок.Добавить("24602", "Штрафные санкции и пени за нарушение налогового и иного законодательства");
	СписокФиксированныхСтрок.Добавить("24603", "Пересчет отложенных налоговых активов и обязательств");
	ВнестиВиртуальныеСтрокиРасшифровкиФормаОтчета(ИмяФормы, ДанныеРаздела, ДеревоНастройкиСостава,
		ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
	
	// Строки расшифровки строки 2510.
	ПрефиксВиртуальнойСтроки  = "П2001002510";
	ПрефиксМногострочнойЧасти = "";
	СписокФиксированныхСтрок = Новый СписокЗначений;
	СписокФиксированныхСтрок.Добавить("25101", "Результат от переоценки основных средств, не включаемый в чистую прибыль (убыток) периода");
	СписокФиксированныхСтрок.Добавить("25102", "Результат от переоценки нематериальных активов, не включаемый в чистую прибыль (убыток) периода");
	ВнестиВиртуальныеСтрокиРасшифровкиФормаОтчета(ИмяФормы, ДанныеРаздела, ДеревоНастройкиСостава,
		ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
	
КонецПроцедуры

Функция ПолучитьСписокВычитаемыхПоказателей(ИмяФормы, СтруктураРеквизитовФормы) Экспорт
	
	ИменаПоказателейСоЗнакомПлюс = Новый Массив;
	
	// Вычитаемые показатели (в показателях отчета хранятся со знаком "-", при выгрузке должны быть положительными).
	
	// Бухгалтерский баланс
	Если НЕ СтруктураРеквизитовФормы.ЭтоБалансНекоммерческойОрганизации Тогда
		ИменаПоказателейСоЗнакомПлюс.Добавить("П000100132004");
		ИменаПоказателейСоЗнакомПлюс.Добавить("П000100132005");
		ИменаПоказателейСоЗнакомПлюс.Добавить("П000100132006");
	КонецЕсли;
	
	// Отчет о прибылях и убытках.
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000100212004");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000100212005");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000100221004");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000100221005");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000100222004");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000100222005");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000100233004");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000100233005");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000100235004");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000100235005");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000100241004");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000100241005");
	
	// Отчет об изменениях капитала
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000100310004");
	
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000100322003");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000100322005");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000100322006");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000100322007");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000100322008");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000100322107");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000100322108");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000100322205");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000100322207");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000100322208");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000100322305");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000100322307");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000100322308");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000100322403");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000100322408");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000100322503");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000100322508");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000100322608");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000100322707");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000100322708");
	
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000100320004");
	
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000100332003");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000100332005");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000100332006");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000100332007");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000100332008");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000100332107");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000100332108");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000100332205");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000100332207");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000100332208");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000100332305");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000100332307");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000100332308");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000100332403");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000100332408");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000100332503");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000100332508");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000100332608");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000100332707");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000100332708");
	
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000100330004");
	                                 	
	// Отчет о движении денежных средств.
	СписокВычитаемыхСтрок = "4120, 4121, 4122, 4123, 4124, 4129"
	                      + ", 4220, 4221, 4222, 4223, 4224, 4229"
	                      + ", 4320, 4321, 4322, 4323, 4329";
	МассивВычитаемыхСтрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СписокВычитаемыхСтрок, ",");
	Для Каждого ВычитаемаяСтрока ИЗ МассивВычитаемыхСтрок Цикл
		ИменаПоказателейСоЗнакомПлюс.Добавить("П000100" + СокрЛП(ВычитаемаяСтрока) + "03");
		ИменаПоказателейСоЗнакомПлюс.Добавить("П000100" + СокрЛП(ВычитаемаяСтрока) + "04");
	КонецЦикла;
	СписокВычитаемыхДопСтрок = "4120, 4220, 4320";
	МассивВычитаемыхДопСтрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СписокВычитаемыхСтрок, ",");
	Для Каждого ВычитаемаяДопСтрока ИЗ МассивВычитаемыхДопСтрок Цикл
		ИменаПоказателейСоЗнакомПлюс.Добавить("П100100" + СокрЛП(ВычитаемаяДопСтрока) + "03");
		ИменаПоказателейСоЗнакомПлюс.Добавить("П100100" + СокрЛП(ВычитаемаяДопСтрока) + "04");
	КонецЦикла;
	
	// Отчет о целевом использовании полученных средств.
	СписокВычитаемыхСтрок = "6310, 6311, 6312, 6313, 6320, 6321, 6322, 6323, 6324, 6325, 6326, 6330, 6350, 6300";
	МассивВычитаемыхСтрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СписокВычитаемыхСтрок, ",");
	Для Каждого ВычитаемаяСтрока ИЗ МассивВычитаемыхСтрок Цикл
		ИменаПоказателейСоЗнакомПлюс.Добавить("П000100" + СокрЛП(ВычитаемаяСтрока) + "04");
		ИменаПоказателейСоЗнакомПлюс.Добавить("П000100" + СокрЛП(ВычитаемаяСтрока) + "05");
	КонецЦикла;
	
	// Виртуальные вычитаемые многострочные показатели, необходимые для представления
	// фиксированных и вписываемых дополнительных строк как единого массива строк.
	Если НЕ СтруктураРеквизитовФормы.ЭтоБалансНекоммерческойОрганизации Тогда
		ИменаПоказателейСоЗнакомПлюс.Добавить("П200100132004");
		ИменаПоказателейСоЗнакомПлюс.Добавить("П200100132005");
		ИменаПоказателейСоЗнакомПлюс.Добавить("П200100132006");
	КонецЕсли;
	
	ИменаПоказателейСоЗнакомПлюс.Добавить("П200100212004");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П200100212005");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П200100221004");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П200100221005");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П200100222004");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П200100222005");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П200100233004");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П200100233005");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П200100235004");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П200100235005");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П200100241004");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П200100241005");
	
	Возврат ИменаПоказателейСоЗнакомПлюс;
	
КонецФункции

Функция ИспользуютсяМакетыЕНВД(ИмяФормы, СтруктураРеквизитовФормы) Экспорт
	
	Перем СохраненноеПрименениеЕНВД;
	
	// Инициализируем признак применения организацией ЕНВД, если эти сведения сохранены в информационной базе.
	Если СтруктураРеквизитовФормы.ПрименениеЕНВД = Неопределено
	   И СтруктураРеквизитовФормы.мСохраненныйДок <> Неопределено Тогда
		СписокСохранения = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить();
		Если СписокСохранения.Свойство("ПрименениеЕНВД", СохраненноеПрименениеЕНВД) Тогда
			СтруктураРеквизитовФормы.ПрименениеЕНВД = СохраненноеПрименениеЕНВД;
		КонецЕсли;
	КонецЕсли;
	
	// Если признак не был сохранен, то определяем его на основании учетной политики организации.
	Если СтруктураРеквизитовФормы.ПрименениеЕНВД = Неопределено Тогда
		СтруктураРеквизитовФормы.ПрименениеЕНВД = ОрганизацияПлательщикЕНВД(
			ИмяФормы,
			СтруктураРеквизитовФормы.Организация,
			НачалоГода(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, -12)),
			СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	КонецЕсли;
	
	Возврат СтруктураРеквизитовФормы.ПрименениеЕНВД;
	
КонецФункции

Процедура ВнестиВиртуальныеСтрокиРасшифровкиБаланс(ИмяФормы,
												   ДанныеРаздела,
												   ДеревоНастройкиСостава,
												   ПрефиксВиртуальнойСтроки,
												   СтруктураФиксированныхСтрок = Неопределено,
												   ПрефиксМногострочнойЧасти)
	
	Перем Индекс, ИндексСтр, ИндексМнЧ, ИндексМнЧСтр;
	
	РегламентированнаяОтчетностьКлиентСервер.УстановитьИндекс(Индекс, ИндексСтр);
	// Фиксированные строки.
	Если СтруктураФиксированныхСтрок <> Неопределено Тогда
		Для Каждого ФиксированнаяСтрока Из СтруктураФиксированныхСтрок Цикл
			КодСтроки = ФиксированнаяСтрока.Значение;
			НаименованиеСтроки = ФиксированнаяСтрока.Представление;
			ПрефиксСтроки = "П00010" + КодСтроки;
			Если ВключенВОтчет(ИмяФормы, ДеревоНастройкиСостава, "ДопСтрока" + КодСтроки)
				И ДанныеРаздела.Свойство(ПрефиксСтроки + "01") Тогда
				ДанныеРаздела.Вставить(ПрефиксВиртуальнойСтроки + "01_" + ИндексСтр, ДанныеРаздела[ПрефиксСтроки + "01"]);
				ДанныеРаздела.Вставить(ПрефиксВиртуальнойСтроки + "02_" + ИндексСтр, НаименованиеСтроки);
				ДанныеРаздела.Вставить(ПрефиксВиртуальнойСтроки + "04_" + ИндексСтр, ДанныеРаздела[ПрефиксСтроки + "04"]);
				ДанныеРаздела.Вставить(ПрефиксВиртуальнойСтроки + "05_" + ИндексСтр, ДанныеРаздела[ПрефиксСтроки + "05"]);
				ДанныеРаздела.Вставить(ПрефиксВиртуальнойСтроки + "06_" + ИндексСтр, ДанныеРаздела[ПрефиксСтроки + "06"]);
				РегламентированнаяОтчетностьКлиентСервер.УвеличитьИндекс(Индекс, ИндексСтр);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// Пользовательские строки.
	РегламентированнаяОтчетностьКлиентСервер.УстановитьИндекс(ИндексМнЧ, ИндексМнЧСтр);
	Пока ДанныеРаздела.Свойство(ПрефиксМногострочнойЧасти + "02_" + ИндексМнЧСтр) Цикл
		Если НЕ ПустаяСтрока(ДанныеРаздела[ПрефиксМногострочнойЧасти + "02_" + ИндексМнЧСтр]) Тогда
			ДанныеРаздела.Вставить(ПрефиксВиртуальнойСтроки + "01_" + ИндексСтр,
			ДанныеРаздела[ПрефиксМногострочнойЧасти + "01_" + ИндексМнЧСтр]);
			ДанныеРаздела.Вставить(ПрефиксВиртуальнойСтроки + "02_" + ИндексСтр,
			ДанныеРаздела[ПрефиксМногострочнойЧасти + "02_" + ИндексМнЧСтр]);
			ДанныеРаздела.Вставить(ПрефиксВиртуальнойСтроки + "04_" + ИндексСтр,
			ДанныеРаздела[ПрефиксМногострочнойЧасти + "04_" + ИндексМнЧСтр]);
			ДанныеРаздела.Вставить(ПрефиксВиртуальнойСтроки + "05_" + ИндексСтр,
			ДанныеРаздела[ПрефиксМногострочнойЧасти + "05_" + ИндексМнЧСтр]);
			ДанныеРаздела.Вставить(ПрефиксВиртуальнойСтроки + "06_" + ИндексСтр,
			ДанныеРаздела[ПрефиксМногострочнойЧасти + "06_" + ИндексМнЧСтр]);
			РегламентированнаяОтчетностьКлиентСервер.УвеличитьИндекс(Индекс, ИндексСтр);
		КонецЕсли;
		РегламентированнаяОтчетностьКлиентСервер.УвеличитьИндекс(ИндексМнЧ, ИндексМнЧСтр);
	КонецЦикла;
	
КонецПроцедуры

Функция ВключенВОтчет(ИмяФормы, ДеревоНастроекСтрокРасшифровки, ИмяОбластиДопСтроки) Экспорт
	
	НайденныеВетвиНастройки = ДеревоНастроекСтрокРасшифровки.Строки.НайтиСтроки(
		Новый Структура("ИмяОбластиДопСтроки", ИмяОбластиДопСтроки), Истина);
	
	Если НайденныеВетвиНастройки.Количество() = 0 Тогда
		// Настройка не обнаружена. Считаем, что допстрока должна входить в отчет.
		Возврат Истина;
	Иначе
		Возврат НайденныеВетвиНастройки[0].ВключатьВОтчет;
	КонецЕсли;
	
КонецФункции

Процедура ВнестиВиртуальныеСтрокиРасшифровкиФормаОтчета(ИмяФормы,
														ДанныеРаздела,
														ДеревоНастройкиСостава,
														ПрефиксВиртуальнойСтроки,
														СтруктураФиксированныхСтрок = Неопределено, 
														ПрефиксМногострочнойЧасти)
	
	Перем Индекс, ИндексСтр, ИндексМнЧ, ИндексМнЧСтр;
	
	РегламентированнаяОтчетностьКлиентСервер.УстановитьИндекс(Индекс, ИндексСтр);
	// Фиксированные строки.
	Если СтруктураФиксированныхСтрок <> Неопределено Тогда
		Для Каждого ФиксированнаяСтрока Из СтруктураФиксированныхСтрок Цикл
			КодСтроки = ФиксированнаяСтрока.Значение;
			НаименованиеСтроки = ФиксированнаяСтрока.Представление;
			ПрефиксСтроки = "П00010" + КодСтроки;
			Если ВключенВОтчет(ИмяФормы, ДеревоНастройкиСостава, "ДопСтрока" + КодСтроки)
				И ДанныеРаздела.Свойство(ПрефиксСтроки + "01") Тогда
				ДанныеРаздела.Вставить(ПрефиксВиртуальнойСтроки + "01_" + ИндексСтр, ДанныеРаздела[ПрефиксСтроки + "01"]);
				ДанныеРаздела.Вставить(ПрефиксВиртуальнойСтроки + "02_" + ИндексСтр, НаименованиеСтроки);
				ДанныеРаздела.Вставить(ПрефиксВиртуальнойСтроки + "04_" + ИндексСтр, ДанныеРаздела[ПрефиксСтроки + "04"]);
				ДанныеРаздела.Вставить(ПрефиксВиртуальнойСтроки + "05_" + ИндексСтр, ДанныеРаздела[ПрефиксСтроки + "05"]);
				РегламентированнаяОтчетностьКлиентСервер.УвеличитьИндекс(Индекс, ИндексСтр);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// Пользовательские строки.
	Если НЕ ПустаяСтрока(ПрефиксМногострочнойЧасти) Тогда
		РегламентированнаяОтчетностьКлиентСервер.УстановитьИндекс(ИндексМнЧ, ИндексМнЧСтр);
		Пока ДанныеРаздела.Свойство(ПрефиксМногострочнойЧасти + "02_" + ИндексМнЧСтр) Цикл
			Если Не ПустаяСтрока(ДанныеРаздела[ПрефиксМногострочнойЧасти + "02_" + ИндексМнЧСтр]) Тогда
				ДанныеРаздела.Вставить(ПрефиксВиртуальнойСтроки + "01_" + ИндексСтр,
				ДанныеРаздела[ПрефиксМногострочнойЧасти + "01_" + ИндексМнЧСтр]);
				ДанныеРаздела.Вставить(ПрефиксВиртуальнойСтроки + "02_" + ИндексСтр,
				ДанныеРаздела[ПрефиксМногострочнойЧасти + "02_" + ИндексМнЧСтр]);
				ДанныеРаздела.Вставить(ПрефиксВиртуальнойСтроки + "04_" + ИндексСтр,
				ДанныеРаздела[ПрефиксМногострочнойЧасти + "04_" + ИндексМнЧСтр]);
				ДанныеРаздела.Вставить(ПрефиксВиртуальнойСтроки + "05_" + ИндексСтр,
				ДанныеРаздела[ПрефиксМногострочнойЧасти + "05_" + ИндексМнЧСтр]);
				РегламентированнаяОтчетностьКлиентСервер.УвеличитьИндекс(Индекс, ИндексСтр);
			КонецЕсли;
			РегламентированнаяОтчетностьКлиентСервер.УвеличитьИндекс(ИндексМнЧ, ИндексМнЧСтр);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Функция ОрганизацияПлательщикЕНВД(ИмяФормы, Организация, НачалоПериода, КонецПериода)
	
	Возврат РегламентированнаяОтчетность.ЭтоПлательщикЕНВД(Организация, НачалоПериода, КонецПериода);
	
КонецФункции

Функция ПараметрыВыгрузкиОтчета(ИмяФормы,
								СтруктураРеквизитовФормы,
								ДанныеОтчета,
								РеглОтчетВыгружаетсяВБанк = Ложь) Экспорт
	
	// Переопределяем переменную для восстановления вида отчетности из сведений сохраненного документа.
	Перем ВидСдачиОтчетности;
	
	ВерсияФормата = ВерсияФормата(ИмяФормы, СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания);
	
	Титульный = ДанныеОтчета.ПолеТабличногоДокументаБаланс;
	
	СоответствиеМесяцаОкончанияПериодаОтчетаПризнакуПериода = Новый Соответствие;
	
	Если СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания < '2013-01-01' Тогда
		СоответствиеМесяцаОкончанияПериодаОтчетаПризнакуПериода.Вставить(3,  "21");
		СоответствиеМесяцаОкончанияПериодаОтчетаПризнакуПериода.Вставить(6,  "31");
		СоответствиеМесяцаОкончанияПериодаОтчетаПризнакуПериода.Вставить(9,  "33");
		
	КонецЕсли;
	
	Если РеглОтчетВыгружаетсяВБанк Тогда
		СоответствиеМесяцаОкончанияПериодаОтчетаПризнакуПериода.Вставить(1,  "01");
		СоответствиеМесяцаОкончанияПериодаОтчетаПризнакуПериода.Вставить(2,  "02");
		СоответствиеМесяцаОкончанияПериодаОтчетаПризнакуПериода.Вставить(3,  "03");
		СоответствиеМесяцаОкончанияПериодаОтчетаПризнакуПериода.Вставить(4,  "04");
		СоответствиеМесяцаОкончанияПериодаОтчетаПризнакуПериода.Вставить(5,  "05");
		СоответствиеМесяцаОкончанияПериодаОтчетаПризнакуПериода.Вставить(6,  "06");
		СоответствиеМесяцаОкончанияПериодаОтчетаПризнакуПериода.Вставить(7,  "07");
		СоответствиеМесяцаОкончанияПериодаОтчетаПризнакуПериода.Вставить(8,  "08");
		СоответствиеМесяцаОкончанияПериодаОтчетаПризнакуПериода.Вставить(9,  "09");
		СоответствиеМесяцаОкончанияПериодаОтчетаПризнакуПериода.Вставить(10, "10");
		СоответствиеМесяцаОкончанияПериодаОтчетаПризнакуПериода.Вставить(11, "11");
		
	КонецЕсли;
	
	СоответствиеМесяцаОкончанияПериодаОтчетаПризнакуПериода.Вставить(12, "34");
	
	СоответствиеЕдиницыИзмеренияСдвигу = Новый Соответствие;
	СоответствиеЕдиницыИзмеренияСдвигу.Вставить(Перечисления.ПорядкиОкругленияОтчетности.Окр1000000, 6);
	СоответствиеЕдиницыИзмеренияСдвигу.Вставить(Перечисления.ПорядкиОкругленияОтчетности.Окр1000, 3);
	СоответствиеЕдиницыИзмеренияСдвигу.Вставить(Перечисления.ПорядкиОкругленияОтчетности.Окр1, 0);
	
	ПараметрыВыгрузки = Новый Структура;
	ПараметрыВыгрузки.Вставить("ВерсПрог", РегламентированнаяОтчетность.НазваниеИВерсияПрограммы());
	ПараметрыВыгрузки.Вставить("ДатаДок",  Формат(ТекущаяДатаСеанса(), "ДФ=дд.ММ.гггг"));
	
	// Для промежуточного и ликвидационного баланса период определяется другими кодами.
	СписокСохранения = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить();
	Если СписокСохранения.Свойство("ВидСдачиОтчетности", ВидСдачиОтчетности) Тогда
		Если ВидСдачиОтчетности = 2 Тогда
			// Промежуточная отчетность при ликвидации/реорганизации.
			ПериодОтчетности = "94";
		ИначеЕсли ВидСдачиОтчетности = 3 Тогда
			// Ликвидационная отчетность.
			ПериодОтчетности = "90";
		Иначе
			// Обычная отчетность.
			ПериодОтчетности = СоответствиеМесяцаОкончанияПериодаОтчетаПризнакуПериода[
				Месяц(СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания)];
				
			Если ВерсияФормата = "5.08"
			   И НачалоГода(СтруктураРеквизитовФормы.мСохраненныйДок.ДатаНачала)
			  <> НачалоДня(СтруктураРеквизитовФормы.мСохраненныйДок.ДатаНачала) Тогда
				// 94 – первый отчетный год, отличный по продолжительности от календарного.
				ПериодОтчетности = "94";
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		ПериодОтчетности = СоответствиеМесяцаОкончанияПериодаОтчетаПризнакуПериода[
			Месяц(СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания)];
		
	КонецЕсли;
	
	ПараметрыВыгрузки.Вставить("Период", ПериодОтчетности);
	
	ПараметрыВыгрузки.Вставить("ОтчетГод", Формат(СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания, "ДФ=гггг"));
	ПараметрыВыгрузки.Вставить("ВидДок",   Строка(СтруктураРеквизитовФормы.мСохраненныйДок.Вид));
	ПараметрыВыгрузки.Вставить("НаимОрг",  СокрЛП(Титульный.ОргНазв));
	ПараметрыВыгрузки.Вставить("ИННОрг",   СокрЛП(Титульный.ОргИНН));
	ПараметрыВыгрузки.Вставить("КППОрг",   СокрЛП(СтруктураРеквизитовФормы.мСохраненныйДок.Организация.КПП));
	ПараметрыВыгрузки.Вставить("КодИФНС",  СокрЛП(СтруктураРеквизитовФормы.мСохраненныйДок.Организация.КодНалоговогоОргана));
	ПараметрыВыгрузки.Вставить("КодИФНСПосредника",
		?(СтруктураРеквизитовФормы.мСохраненныйДок.Организация.КрупнейшийНалогоплательщик,
		СокрЛП(СтруктураРеквизитовФормы.мСохраненныйДок.Организация.КодНалоговогоОрганаПолучателя), ""));
	
	ПараметрыВыгрузки.Вставить("ОКПО",  СокрЛП(Титульный.ОргКодОКПО));
	ПараметрыВыгрузки.Вставить("ОКВЭД", СокрЛП(Титульный.ОргКодОКВЭД));
	ПараметрыВыгрузки.Вставить("ОКОПФ", СокрЛП(Титульный.ОргКодОКОПФ));
	ПараметрыВыгрузки.Вставить("ОКФС",  СокрЛП(Титульный.ОргКодОКФС));
	
	ПараметрКодЕИ = "";
	Если СтруктураРеквизитовФормы.мСохраненныйДок.ЕдиницаИзмерения
		= Перечисления.ПорядкиОкругленияОтчетности.Окр1 Тогда
		ПараметрКодЕИ = "383";
	ИначеЕсли СтруктураРеквизитовФормы.мСохраненныйДок.ЕдиницаИзмерения
		= Перечисления.ПорядкиОкругленияОтчетности.Окр1000 Тогда
		ПараметрКодЕИ = "384";
	ИначеЕсли СтруктураРеквизитовФормы.мСохраненныйДок.ЕдиницаИзмерения
		= Перечисления.ПорядкиОкругленияОтчетности.Окр1000000 Тогда
		ПараметрКодЕИ = "385";
	КонецЕсли;
	ПараметрыВыгрузки.Вставить("ОКЕИ", ПараметрКодЕИ);
	
	Если ВерсияФормата = "5.08" Тогда
		ПараметрыВыгрузки.Вставить("АдрМН", СокрЛП(Титульный.ОргПочтАдрес));
		
		Аудит = "";
		Если ЗначениеЗаполнено(Титульный.АудитДа) Тогда
			Аудит = "1";
		ИначеЕсли ЗначениеЗаполнено(Титульный.АудитНет) Тогда
			Аудит = "0";
		КонецЕсли;
		
		ПараметрыВыгрузки.Вставить("ПрАудит", Аудит);
		
		АудиторЮЛ = Ложь;
		АудиторИП = Ложь;
		
		НаимАудитора = СокрЛП(Титульный.НаимАудитора);
		АудиторИНН   = СокрЛП(Титульный.АудиторИНН);
		АудиторОГРН  = СокрЛП(Титульный.АудиторОГРН);
		
		Если СтрДлина(АудиторИНН) = 12 Тогда
			АудиторИП = Истина;
			
			ПараметрыВыгрузки.Вставить("АудитИННФЛ", АудиторИНН);
			ПараметрыВыгрузки.Вставить("АудитОГРНИП", АудиторОГРН);
			
			АудиторФИО = РегламентированнаяОтчетность.РазложитьФИО(НаимАудитора);
			ПараметрыВыгрузки.Вставить("АудитФамилия",  СокрЛП(АудиторФИО.Фамилия));
			ПараметрыВыгрузки.Вставить("АудитИмя",      СокрЛП(АудиторФИО.Имя));
			ПараметрыВыгрузки.Вставить("АудитОтчество", СокрЛП(АудиторФИО.Отчество));
			
		Иначе
			АудиторЮЛ = Истина;
			
			ПараметрыВыгрузки.Вставить("АудитНаимОрг", НаимАудитора);
			ПараметрыВыгрузки.Вставить("АудитИННЮЛ", АудиторИНН);
			ПараметрыВыгрузки.Вставить("АудитОГРН", АудиторОГРН);
			
		КонецЕсли;
		
		ПараметрыВыгрузки.Вставить("АудиторЮЛ", АудиторЮЛ);
		ПараметрыВыгрузки.Вставить("АудиторИП", АудиторИП);
		
	КонецЕсли;
	
	// Определяем форматную строку, используемую для получения суммовых значений, помещаемых в файл выгрузки.
	ПараметрыВыгрузки.Вставить("ФорматВывода", "ЧДЦ=0; ЧН=0; ЧС="
		+ СоответствиеЕдиницыИзмеренияСдвигу[СтруктураРеквизитовФормы.мСохраненныйДок.ЕдиницаИзмерения]);
	
	ЗаполнитьСведенияПодписантов(ИмяФормы, ПараметрыВыгрузки, ДанныеОтчета, СтруктураРеквизитовФормы);
	
	ПараметрыВыгрузки.Вставить("ТелОрг",
		РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(
			СтруктураРеквизитовФормы.мСохраненныйДок.Организация,
			СтруктураРеквизитовФормы.мСохраненныйДок.ДатаПодписи, "ТелОрганизации").ТелОрганизации);
		
	СтруктураАдреса = РегламентированнаяОтчетностьКлиентСервер.РазложитьАдрес(ДанныеОтчета.АдресДляВыгрузки);
	ПараметрыВыгрузки.Вставить("АдрИндекс",     СокрЛП(СтруктураАдреса.Индекс));
	ПараметрыВыгрузки.Вставить("АдрКодРегион",
		РегламентированнаяОтчетностьВызовСервера.КодРегионаПоНазванию(СокрЛП(СтруктураАдреса.Регион)));
	ПараметрыВыгрузки.Вставить("АдрРегион",     СокрЛП(СтруктураАдреса.Регион));
	ПараметрыВыгрузки.Вставить("АдрРайон",      СокрЛП(СтруктураАдреса.Район));
	ПараметрыВыгрузки.Вставить("АдрГород",      СокрЛП(СтруктураАдреса.Город));
	ПараметрыВыгрузки.Вставить("АдрНаселПункт", СокрЛП(СтруктураАдреса.НаселенныйПункт));
	ПараметрыВыгрузки.Вставить("АдрУлица",      СокрЛП(СтруктураАдреса.Улица));
	ПараметрыВыгрузки.Вставить("АдрДом",        СокрЛП(СтруктураАдреса.Дом));
	ПараметрыВыгрузки.Вставить("АдрКорпус",     СокрЛП(СтруктураАдреса.Корпус));
	ПараметрыВыгрузки.Вставить("АдрКварт",      СокрЛП(СтруктураАдреса.Квартира));
	
	ПараметрыВыгрузки.Вставить("ПрефиксИмениФайлаВыгрузки", "NO_BUHOTCH");
	
	Если РеглОтчетВыгружаетсяВБанк Тогда
		ПараметрыВыгрузки.Вставить("ПрефиксИмениФайлаВыгрузки", "BANK_BUHOTCH");
	КонецЕсли;
	
	ПараметрыВыгрузки.Вставить("ИдентификаторФайлаВыгрузки", Строка(Новый УникальныйИдентификатор));
	
	// Формируем ИдФайл на основании значений других параметров.
	ПараметрыВыгрузки.Вставить("ИдФайл", СформироватьИдФайл(ИмяФормы, ПараметрыВыгрузки, РеглОтчетВыгружаетсяВБанк));
	
	// Условия включения узлов и элементов в выгрузку.
	ПараметрыВыгрузки.Вставить("БалансКоммерческойОрганизации",
		НЕ СтруктураРеквизитовФормы.ЭтоБалансНекоммерческойОрганизации);
	ПараметрыВыгрузки.Вставить("БалансНекоммерческойОрганизации",
		СтруктураРеквизитовФормы.ЭтоБалансНекоммерческойОрганизации);
	
	ПараметрыВыгрузки.Вставить("Период349094",
		(ПериодОтчетности = "34" ИЛИ ПериодОтчетности = "90" ИЛИ ПериодОтчетности = "94"));
	
	ДеревоНастройкиСтраниц = СтруктураРеквизитовФормы.мСохраненныйДок.ДеревоНастройкиСтраниц.Получить();
	
	Если ВерсияФормата = "5.08" Тогда
		ВключитьОФР = Истина;
		
		СписокОКОПФ = "71,74,76,77,78,80,81,82,83,84,85,86,88,89,93,94,96,97,
			|20101,20102,20103,20104,20105,20106,20107,20108,20109,20110,20111,20112,20113,20114,
			|20115,20120,20121,20200,20201,20202,20210,20211,20217,20601,20603,20604,20605,20606,
			|20607,20608,20609,20610,20611,20612,20613,20614,20615,20616,20617,20618,20619,20620,
			|20701,20716,20900,20902,20904,20905,20906,20908,21001,21002,21003,21100,21200";
		
		Если ЗначениеСодержитсяВСписке(ИмяФормы, ПараметрыВыгрузки.ОКОПФ, СписокОКОПФ) Тогда
			ВключитьОФР = РазделВключенВОтчет(ИмяФормы, "ФормаОтчета", СтруктураРеквизитовФормы, ДеревоНастройкиСтраниц);
		КонецЕсли;
		
		ПараметрыВыгрузки.Вставить("ВключитьОФР",  ВключитьОФР);
		ПараметрыВыгрузки.Вставить("ВключитьОИК",
			РазделВключенВОтчет(ИмяФормы, "ОИК", СтруктураРеквизитовФормы, ДеревоНастройкиСтраниц));
		ПараметрыВыгрузки.Вставить("ВключитьОДДС",
			РазделВключенВОтчет(ИмяФормы, "ОДДС", СтруктураРеквизитовФормы, ДеревоНастройкиСтраниц));
		ПараметрыВыгрузки.Вставить("ВключитьОЦИС",
			РазделВключенВОтчет(ИмяФормы, "ОЦИС", СтруктураРеквизитовФормы, ДеревоНастройкиСтраниц));
		
	ИначеЕсли ВерсияФормата = "5.07" ИЛИ ВерсияФормата = "5.06" Тогда
		ПараметрыВыгрузки.Вставить("ДатаУтвОтч", "");
		Если Титульный.Свойство("ДатаУтвОтчетности") Тогда
			Если ЗначениеЗаполнено(Титульный.ДатаУтвОтчетности) Тогда
				ПараметрыВыгрузки.Вставить("ДатаУтвОтч", Формат(Титульный.ДатаУтвОтчетности, "ДФ=дд.ММ.гггг"));
			КонецЕсли;
		КонецЕсли;
		
		ВключитьОФР = Истина;
		
		СписокОКОПФ = "71,74,76,77,78,80,81,82,83,84,85,86,88,89,93,94,96,97
		|20101,20102,20103,20104,20105,20106,20107,20108,20109,20110,20111,20112,20113,20114,
		|20115,20120,20121,20200,20201,20202,20210,20211,20217,20601,20603,20604,20605,20606,
		|20607,20608,20609,20610,20611,20612,20613,20614,20615,20616,20617,20618,20619,20620,
		|20701,20716,20900,20902,20904,20905,20906,20908,21001,21002,21003,21100,21200";
		
		Если ЗначениеСодержитсяВСписке(ИмяФормы, ПараметрыВыгрузки.ОКОПФ, СписокОКОПФ) Тогда
			ВключитьОФР = РазделВключенВОтчет(ИмяФормы, "ФормаОтчета", СтруктураРеквизитовФормы, ДеревоНастройкиСтраниц);
		КонецЕсли;
		
		ПараметрыВыгрузки.Вставить("ВключитьОФР",  ВключитьОФР);
		ПараметрыВыгрузки.Вставить("ВключитьОИК",
			РазделВключенВОтчет(ИмяФормы, "ОИК", СтруктураРеквизитовФормы, ДеревоНастройкиСтраниц));
		ПараметрыВыгрузки.Вставить("ВключитьОДДС",
			РазделВключенВОтчет(ИмяФормы, "ОДДС", СтруктураРеквизитовФормы, ДеревоНастройкиСтраниц));
		ПараметрыВыгрузки.Вставить("ВключитьОЦИС",
			РазделВключенВОтчет(ИмяФормы, "ОЦИПС", СтруктураРеквизитовФормы, ДеревоНастройкиСтраниц));
		
	ИначеЕсли ВерсияФормата = "5.05" ИЛИ ВерсияФормата = "5.04" Тогда
		
		ВключитьОФР = Истина;
		СписокОКОПФ = "71,74,76,77,78,80,81,82,83,84,85,86,88,89,93,94,96,97,
		              |20101,20102,20103,20104,20105,20106,20107,20109,20110,
		              |20111,20112,20113,20114,20115,20200,20201,20202,20210,
		              |20211,20300,20401,20403,20404,20500,20601,20603,20604,
		              |20605,20606,20607,20608,20801,20802,20803,20900,20902,
		              |20904,20905,20906,20908,21001,21002,21003,28001,28002,
		              |28004,28005,28006,28007,28008,28010,28012,28013,28014,
		              |28016,28017,29000";
		
		Если ЗначениеСодержитсяВСписке(ИмяФормы, ПараметрыВыгрузки.ОКОПФ, СписокОКОПФ) Тогда
			ВключитьОФР = РазделВключенВОтчет(ИмяФормы, "ФормаОтчета", СтруктураРеквизитовФормы, ДеревоНастройкиСтраниц);
		КонецЕсли;
		
		ПараметрыВыгрузки.Вставить("ВключитьОФР",  ВключитьОФР);
		ПараметрыВыгрузки.Вставить("ВключитьОИК",
			РазделВключенВОтчет(ИмяФормы, "ОИК", СтруктураРеквизитовФормы, ДеревоНастройкиСтраниц));
		ПараметрыВыгрузки.Вставить("ВключитьОДДС",
			РазделВключенВОтчет(ИмяФормы, "ОДДС", СтруктураРеквизитовФормы, ДеревоНастройкиСтраниц));
		ПараметрыВыгрузки.Вставить("ВключитьОЦИС",
			РазделВключенВОтчет(ИмяФормы, "ОЦИПС", СтруктураРеквизитовФормы, ДеревоНастройкиСтраниц));
		
	Иначе // ВерсияФормата = "5.02"
		
		ПараметрыВыгрузки.Вставить("ВключитьОИК",   ПериодОтчетности = "34");
		ПараметрыВыгрузки.Вставить("ВключитьОДДС",  ПериодОтчетности = "34");
		ПараметрыВыгрузки.Вставить("ВключитьОЦИПС", (ПериодОтчетности = "34")
			И РазделВключенВОтчет(ИмяФормы, "ОЦИПС", СтруктураРеквизитовФормы, ДеревоНастройкиСтраниц));
		
	КонецЕсли;
		
	ПояснительнаяЗаписка = ИсходноеИмяДополнительногоФайла(ИмяФормы, "Пояснительная записка", СтруктураРеквизитовФормы);
	Если ПустаяСтрока(ПояснительнаяЗаписка) Тогда
		ПояснительнаяЗаписка = СокрЛП(СписокСохранения.СписокДополнительныхФайлов.ИмяФайлаПояснительнойЗаписки);
	КонецЕсли;
	Если (ПериодОтчетности = "34") Тогда
		ПараметрыВыгрузки.Вставить("ЕстьПояснительнаяЗаписка", Истина);
		ПараметрыВыгрузки.Вставить("ИмяФайлаПояснительнойЗаписки",
		?(ПустаяСтрока(ПояснительнаяЗаписка), "",
		ПолучитьИмяДополнительногоФайла(ИмяФормы, "NO_BUHPZ", ПараметрыВыгрузки, ПояснительнаяЗаписка)));
	Иначе
		ПараметрыВыгрузки.Вставить("ЕстьПояснительнаяЗаписка", Ложь);
	КонецЕсли;
	
	АудиторскоеЗаключение = ИсходноеИмяДополнительногоФайла(ИмяФормы, "Аудиторское заключение", СтруктураРеквизитовФормы);
	Если ПустаяСтрока(АудиторскоеЗаключение) Тогда
		АудиторскоеЗаключение = СписокСохранения.СписокДополнительныхФайлов.ИмяФайлаАудиторскогоЗаключения;
	КонецЕсли;
	Если (ПериодОтчетности = "34" И НЕ ПустаяСтрока(АудиторскоеЗаключение)) Тогда
		ПараметрыВыгрузки.Вставить("ЕстьАудиторскоеЗаключение", Истина);
		ПараметрыВыгрузки.Вставить("ИмяФайлаАудиторскогоЗаключения",
		ПолучитьИмяДополнительногоФайла(ИмяФормы, "NO_BUHAZ", ПараметрыВыгрузки, АудиторскоеЗаключение));
	Иначе
		ПараметрыВыгрузки.Вставить("ЕстьАудиторскоеЗаключение", Ложь);
	КонецЕсли;
	
	Если ВерсияФормата <> "5.08" Тогда
		ЗаявлениеРевизионногоСоюза = ИсходноеИмяДополнительногоФайла(ИмяФормы,
			"Заявление союза сельхозпроизводителей", СтруктураРеквизитовФормы);
		Если ПустаяСтрока(ЗаявлениеРевизионногоСоюза) Тогда
			ЗаявлениеРевизионногоСоюза = СписокСохранения.СписокДополнительныхФайлов.ИмяФайлаЗаявленияРевизионногоСоюза;
		КонецЕсли;
		
		Если (ПериодОтчетности = "34" И НЕ ПустаяСтрока(ЗаявлениеРевизионногоСоюза)) Тогда
			ПараметрыВыгрузки.Вставить("ЕстьЗаявлениеРевизионногоСоюза", Истина);
			ПараметрыВыгрузки.Вставить("ИмяФайлаЗаявленияРевизионногоСоюза",
			ПолучитьИмяДополнительногоФайла(ИмяФормы, "NO_BUHZSHP", ПараметрыВыгрузки, ЗаявлениеРевизионногоСоюза));
		Иначе
			ПараметрыВыгрузки.Вставить("ЕстьЗаявлениеРевизионногоСоюза", Ложь);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ПараметрыВыгрузки;
	
КонецФункции

Процедура ЗаполнитьСведенияПодписантов(ИмяФормы,
									   ПараметрыВыгрузки,
									   ДанныеОтчета,
									   СтруктураРеквизитовФормы)
	
	Титульный = ДанныеОтчета.ПолеТабличногоДокументаБаланс;
	
	Если СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания >= '2013-01-01' Тогда
		
		// Форматы выгрузки 5.07, 5.06, 5.05.
		КодНО = СокрЛП(СтруктураРеквизитовФормы.мСохраненныйДок.Организация.КодНалоговогоОргана);
		КПП = СокрЛП(СтруктураРеквизитовФормы.мСохраненныйДок.Организация.КПП);
		
		СведенияОПредставителе = РегламентированнаяОтчетностьВызовСервера.ПолучитьПоКодамСведенияОПредставителе(
			СтруктураРеквизитовФормы.мСохраненныйДок.Организация, КодНО, КПП);
		
		ТипПодписанта = СведенияОПредставителе.ТипПодписанта;
		
		Если ТипПодписанта = "1" Тогда
			// Руководитель организации.
			ПараметрыВыгрузки.Вставить("ПрПодп", "1");
			
			ФИОРук = РегламентированнаяОтчетность.РазложитьФИО(Титульный.ОргДиректор);
			ПараметрыВыгрузки.Вставить("ПодпФамилия",  СокрЛП(ФИОРук.Фамилия));
			ПараметрыВыгрузки.Вставить("ПодпИмя",      СокрЛП(ФИОРук.Имя));
			ПараметрыВыгрузки.Вставить("ПодпОтчество", СокрЛП(ФИОРук.Отчество));
			
			ПараметрыВыгрузки.Вставить("ПодпНаимДок", "");
		Иначе
			// Уполномоченный представитель.
			ПараметрыВыгрузки.Вставить("ПрПодп", "2");
			
			ФИОПредставителя = РегламентированнаяОтчетность.РазложитьФИО(СведенияОПредставителе.ФИОПредставителя);
			ПараметрыВыгрузки.Вставить("ПодпФамилия",  СокрЛП(ФИОПредставителя.Фамилия));
			ПараметрыВыгрузки.Вставить("ПодпИмя",      СокрЛП(ФИОПредставителя.Имя));
			ПараметрыВыгрузки.Вставить("ПодпОтчество", СокрЛП(ФИОПредставителя.Отчество));
			
			ПараметрыВыгрузки.Вставить("ПодпНаимДок", СведенияОПредставителе.ДокументПредставителя);
			
		КонецЕсли;
		
	Иначе
		// Форматы выгрузки 5.04, 5.02.
		ФИОРук = РегламентированнаяОтчетность.РазложитьФИО(Титульный.ОргДиректор);
		ПараметрыВыгрузки.Вставить("ФамилияРук",  СокрЛП(ФИОРук.Фамилия));
		ПараметрыВыгрузки.Вставить("ИмяРук",      СокрЛП(ФИОРук.Имя));
		ПараметрыВыгрузки.Вставить("ОтчествоРук", СокрЛП(ФИОРук.Отчество));
		
		ВыгружатьСведенияБухгалтера = (СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания < '2012-12-01');
		Если ВыгружатьСведенияБухгалтера Тогда
			ФИОБух = РегламентированнаяОтчетность.РазложитьФИО(Титульный.ОргБухгалтер);
			ПараметрыВыгрузки.Вставить("КодПодписантаБух", "4");
			ПараметрыВыгрузки.Вставить("ФамилияБух",  СокрЛП(ФИОБух.Фамилия));
			ПараметрыВыгрузки.Вставить("ИмяБух",      СокрЛП(ФИОБух.Имя));
			ПараметрыВыгрузки.Вставить("ОтчествоБух", СокрЛП(ФИОБух.Отчество));
		Иначе
			ПараметрыВыгрузки.Вставить("КодПодписантаБух", "");
			ПараметрыВыгрузки.Вставить("ФамилияБух",  "");
			ПараметрыВыгрузки.Вставить("ИмяБух",      "");
			ПараметрыВыгрузки.Вставить("ОтчествоБух", "");
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция СформироватьИдФайл(ИмяФормы, ПараметрыВыгрузки, РеглОтчетВыгружаетсяВБанк)
	
	Возврат ПараметрыВыгрузки.ПрефиксИмениФайлаВыгрузки
			+ "_" + ?(РеглОтчетВыгружаетсяВБанк, "",
					  ?(ЗначениеЗаполнено(ПараметрыВыгрузки.КодИФНСПосредника),
					  					  ПараметрыВыгрузки.КодИФНСПосредника,
										  ПараметрыВыгрузки.КодИФНС)
					  + "_" + ПараметрыВыгрузки.КодИФНС + "_")
			+ ?(ПараметрыВыгрузки.Свойство("ЭтоПБОЮЛ") И ПараметрыВыгрузки.ЭтоПБОЮЛ,
			    СокрЛП(ПараметрыВыгрузки.ИННОрг),
			    СокрЛП(ПараметрыВыгрузки.ИННОрг) + СокрЛП(ПараметрыВыгрузки.КППОрг))
			+ "_" + Формат(ТекущаяДатаСеанса(), "ДФ=ггггММдд")
			+ "_" + ПараметрыВыгрузки.ИдентификаторФайлаВыгрузки;
	
КонецФункции

Функция ВерсияФормата(ИмяФормы, ДатаДействия)
	
	Если ИмяФормы = "ФормаОтчета2019Кв1" Тогда
		ВерсияФормата = "5.08";
		
	Иначе
		Если ДатаДействия >= '2016-01-01' Тогда
			ВерсияФормата = "5.07";
		ИначеЕсли ДатаДействия >= '2015-01-01' Тогда
			ВерсияФормата = "5.06";
		ИначеЕсли ДатаДействия >= '2013-12-01' Тогда
			ВерсияФормата = "5.05";
		ИначеЕсли ДатаДействия >= '2012-01-01' Тогда
			ВерсияФормата = "5.04";
		Иначе
			ВерсияФормата = "5.02";
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ВерсияФормата;
	
КонецФункции

Функция ЗначениеСодержитсяВСписке(ИмяФормы, ПроверяемоеЗначение, КонтрольныйСписок)
	
	Результат = Ложь;
	
	Значения = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(КонтрольныйСписок, ",");
	
	Для Инд = 0 По Значения.ВГраница() Цикл
		Значения[Инд] = СокрЛП(Значения[Инд]);
	КонецЦикла;
	
	Результат = (Значения.Найти(ПроверяемоеЗначение) <> Неопределено);
	
	Возврат Результат
	
КонецФункции

Функция РазделВключенВОтчет(ИмяФормы, ИмяРаздела, СтруктураРеквизитовФормы, Знач СписокРазделов = Неопределено)
	
	Если СписокРазделов = Неопределено Тогда
						
		СписокРазделов = СтруктураРеквизитовФормы.мСохраненныйДок.ДеревоНастройкиСтраниц.Получить();
		
	КонецЕсли;
	
	Результат = Ложь;
	
	НайденнаяСтраницаОтчета = СписокРазделов.Строки.Найти(ИмяРаздела, "ИмяСтраницы");
	
	Если НайденнаяСтраницаОтчета <> Неопределено Тогда
		
		Результат = (НайденнаяСтраницаОтчета.ПоказатьСтраницу <> 0);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ИсходноеИмяДополнительногоФайла(ИмяФормы, ВидДополнительногоФайла, СтруктураРеквизитовФормы)
	
	ИсходноеИмя = "";
	
	ЗаписьРегистраСведений = РегистрыСведений.ДополнительныеФайлыРегламентированныхОтчетов.СоздатьМенеджерЗаписи();
	ЗаписьРегистраСведений.РегламентированныйОтчет = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
	ЗаписьРегистраСведений.ВидДополнительногоФайла = ВидДополнительногоФайла;
	
	ЗаписьРегистраСведений.Прочитать();
	
	Если НЕ ПустаяСтрока(ЗаписьРегистраСведений.ВидДополнительногоФайла) Тогда
		ИсходноеИмя = ЗаписьРегистраСведений.ИмяФайла;
	КонецЕсли;
	
	Возврат ИсходноеИмя;
	
КонецФункции

Функция ПолучитьИмяДополнительногоФайла(ИмяФормы, ПрефиксФайла, ПараметрыВыгрузки, ИсходноеИмяФайла)
	
	ИмяФайла = ПрефиксФайла
	         + "_" + ?(ЗначениеЗаполнено(ПараметрыВыгрузки.КодИФНСПосредника),
			 		   ПараметрыВыгрузки.КодИФНСПосредника, ПараметрыВыгрузки.КодИФНС)
	         + "_" + ПараметрыВыгрузки.КодИФНС
	         + "_" + ?(ПараметрыВыгрузки.Свойство("ЭтоПБОЮЛ") И ПараметрыВыгрузки.ЭтоПБОЮЛ,
			 		   СокрЛП(ПараметрыВыгрузки.ИННОрг),
					   СокрЛП(ПараметрыВыгрузки.ИННОрг) + СокрЛП(ПараметрыВыгрузки.КППОрг))
	         + "_" + ПараметрыВыгрузки.ИдентификаторФайлаВыгрузки
	         + "_" + Формат(ТекущаяДатаСеанса(), "ДФ=ггггММдд")
	         + "_" + Строка(Новый УникальныйИдентификатор)
	         + ОбщегоНазначенияКлиентСервер.РазложитьПолноеИмяФайла(ИсходноеИмяФайла).Расширение;
	
	Возврат ИмяФайла;
	
КонецФункции

Функция МногострочнаяЧастьЗаполненаПравильно(ИмяФормы,
											 ДанныеОтчета,
											 МногострочнаяЧасть,
											 ГрафаИмени,
											 ГрафыЗначений,
											 СообщениеОбОшибке,
											 ПараметрыВыгрузки,
											 РезультатВыгрузки)
	
	Перем НаименованиеСтроки, Индекс, ИндексСтр;
	
	РезультатПроверки = Истина;
	
	ИмяПоказателяНаименования = "";
	ИменаЧисловыхПоказателей = Новый Массив;
	
	Для Каждого Колонка Из МногострочнаяЧасть.Состав.Колонки Цикл
		
		ИмяКолонки = Колонка.Имя;
		
		Если СтрДлина(ИмяКолонки) = 13 И Лев(ИмяКолонки, 1) = "П" Тогда
			НомерГрафы = Прав(ИмяКолонки, 2);
			Если НомерГрафы = ГрафаИмени Тогда
				ИмяПоказателяНаименования = ИмяКолонки;
			ИначеЕсли СтрНайти(ГрафыЗначений, НомерГрафы) > 0 Тогда
				ИменаЧисловыхПоказателей.Добавить(ИмяКолонки);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	РегламентированнаяОтчетностьКлиентСервер.УстановитьИндекс(Индекс, ИндексСтр);
	Пока ДанныеОтчета.Свойство(ИмяПоказателяНаименования + "_" + ИндексСтр, НаименованиеСтроки) Цикл
		Если ПустаяСтрока(НаименованиеСтроки) Тогда
			ЗаполненыЧисловыеПоказатели = Ложь;
			Для Каждого ИмяЧисловогоПоказателя Из ИменаЧисловыхПоказателей Цикл
				ЗначениеПоказателя = ДанныеОтчета[ИмяЧисловогоПоказателя + "_" + ИндексСтр];
				ЗначениеПоказателя = ЗначениеПериведенноеКЕдиницеИзмерения(
					ИмяФормы, ЗначениеПоказателя, ПараметрыВыгрузки);
				Если ЗначениеЗаполнено(ЗначениеПоказателя) Тогда
					ЗаполненыЧисловыеПоказатели = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Если ЗаполненыЧисловыеПоказатели Тогда
				ИмяОтчета = Сред(МногострочнаяЧасть.ИмяПоляТабличногоДокумента, СтрДлина("ПолеТабличногоДокумента") + 1);
				ПолноеИмяПоказателяНаименования = ИмяПоказателяНаименования + "_" + ИндексСтр;
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(
					РезультатВыгрузки, СообщениеОбОшибке, ИмяОтчета, ПолноеИмяПоказателяНаименования);
				РезультатПроверки = Ложь;
			КонецЕсли;
		КонецЕсли;
		РегламентированнаяОтчетностьКлиентСервер.УвеличитьИндекс(Индекс, ИндексСтр);
	КонецЦикла;
	
	Возврат РезультатПроверки;
	
КонецФункции

Функция ЗначениеПериведенноеКЕдиницеИзмерения(ИмяФормы, Значение, ПараметрыВыгрузки)
	
	Возврат Число(Формат(Значение, ПараметрыВыгрузки.ФорматВывода));
	
КонецФункции

Функция ИзвлечьСтруктуруXML(ИмяФормы, СтруктураРеквизитовФормы, КешСхем = Неопределено) Экспорт
	
	ИмяКешаОтчета  = "БухОтчетность";
	ИмяМакетаСхемы = ИмяМакетаСтруктурыВыгрузки(ИмяФормы, СтруктураРеквизитовФормы);
	
	Если КешСхем <> Неопределено И КешСхем.Свойство(ИмяКешаОтчета) И КешСхем[ИмяКешаОтчета].Свойство(ИмяМакетаСхемы) Тогда
		ДеревоСтруктуры = КешСхем[ИмяКешаОтчета][ИмяМакетаСхемы];
		
	Иначе
		ДеревоСтруктуры = Новый ДеревоЗначений;
		ДеревоСтруктуры.Колонки.Добавить("Код");
		ДеревоСтруктуры.Колонки.Добавить("Тип");
		ДеревоСтруктуры.Колонки.Добавить("Формат");
		ДеревоСтруктуры.Колонки.Добавить("МинРазмерность");
		ДеревоСтруктуры.Колонки.Добавить("МаксРазмерность");
		ДеревоСтруктуры.Колонки.Добавить("Обязательность");
		ДеревоСтруктуры.Колонки.Добавить("Многостраничность");
		ДеревоСтруктуры.Колонки.Добавить("Многострочность");
		ДеревоСтруктуры.Колонки.Добавить("Раздел");
		ДеревоСтруктуры.Колонки.Добавить("Ключ");
		ДеревоСтруктуры.Колонки.Добавить("Условие");
		ДеревоСтруктуры.Колонки.Добавить("ЗначениеПоУмолчанию");
		ДеревоСтруктуры.Колонки.Добавить("Значение");
		ДеревоСтруктуры.Колонки.Добавить("Представление");
		ДеревоСтруктуры.Колонки.Добавить("Показатели");
		
		Макет = ЭтотОбъект.ПолучитьМакет(ИмяМакетаСхемы);
		
		ВысотаТаблицы = Макет.ВысотаТаблицы;
		
		УчтенныеГруппы = Новый Соответствие;
		
		Для Уровень = 0 По Макет.КоличествоУровнейГруппировокСтрок() - 1 Цикл
			Макет.ПоказатьУровеньГруппировокСтрок(Уровень);
			Для НомерСтроки = 2 По ВысотаТаблицы Цикл
				НомСтр = ВысотаТаблицы - НомерСтроки + 2;
				Если Макет.Область(НомСтр, 1).Видимость И УчтенныеГруппы.Получить(НомСтр) = Неопределено Тогда	
					
					РодительскийУзел = ДеревоСтруктуры;
					Если Уровень <> 0 Тогда
						Для Инд = 1 По НомСтр - 2 Цикл
							Узел = УчтенныеГруппы.Получить(НомСтр - Инд);
							Если Узел <> Неопределено Тогда
								РодительскийУзел = Узел;
								Прервать;
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
					
					НовСтр = РодительскийУзел.Строки.Вставить(0);
					НовСтр.Код = СокрЛП(Макет.Область(НомСтр, 1, НомСтр, 1).Текст);
					НовСтр.Раздел = СокрЛП(Макет.Область(НомСтр, 2, НомСтр, 2).Текст);
					НовСтр.Ключ = СокрЛП(Макет.Область(НомСтр, 3, НомСтр, 3).Текст);
					НовСтр.Тип = СокрЛП(Макет.Область(НомСтр, 4, НомСтр, 4).Текст);
					НовСтр.Формат = СокрЛП(Макет.Область(НомСтр, 5, НомСтр, 5).Текст);
					МинРазмерность = СокрЛП(Макет.Область(НомСтр, 6, НомСтр, 6).Текст);
					НовСтр.МинРазмерность = ?(ПустаяСтрока(МинРазмерность), ?(НовСтр.Формат = "N", 99999, 0), Число(МинРазмерность));
					МаксРазмерность = СокрЛП(Макет.Область(НомСтр, 7, НомСтр, 7).Текст);
					НовСтр.МаксРазмерность = ?(ПустаяСтрока(МаксРазмерность), 99999, Число(МаксРазмерность));
					НовСтр.Обязательность = СокрЛП(Макет.Область(НомСтр, 8, НомСтр, 8).Текст);
					НовСтр.Многостраничность = НЕ ПустаяСтрока(Макет.Область(НомСтр, 9, НомСтр, 9).Текст);
					НовСтр.Многострочность = НЕ ПустаяСтрока(Макет.Область(НомСтр, 10, НомСтр, 10).Текст);
					НовСтр.Условие = СокрЛП(Макет.Область(НомСтр, 11, НомСтр, 11).Текст);
					НовСтр.ЗначениеПоУмолчанию = СокрЛП(Макет.Область(НомСтр, 12, НомСтр, 12).Текст);
					НовСтр.Представление = СокрЛП(Макет.Область(НомСтр, 13, НомСтр, 13).Текст);
					
					УчтенныеГруппы.Вставить(НомСтр, НовСтр);
					
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		Если КешСхем <> Неопределено Тогда
			Если НЕ КешСхем.Свойство(ИмяКешаОтчета) Тогда
				КешСхем.Вставить(ИмяКешаОтчета, Новый Структура);
			КонецЕсли;
			КешСхем[ИмяКешаОтчета].Вставить(ИмяМакетаСхемы, ДеревоСтруктуры);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ДеревоСтруктуры;
	
КонецФункции

Функция ИмяМакетаСтруктурыВыгрузки(ИмяФормы, СтруктураРеквизитовФормы)
	
	Если ИмяФормы = "ФормаОтчета2019Кв1" Тогда
		ИмяМакетаСхемы = "СхемаВыгрузки508";
		
	Иначе
		Если СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания >= '2016-01-01' Тогда
			ИмяМакетаСхемы = "СхемаВыгрузки507";
		ИначеЕсли СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания >= '2015-01-01' Тогда
			ИмяМакетаСхемы = "СхемаВыгрузки506";
		ИначеЕсли СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания >= '2013-01-01' Тогда
			ИмяМакетаСхемы = "СхемаВыгрузки505";
		ИначеЕсли СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания >= '2012-01-01' Тогда
			ИмяМакетаСхемы = "СхемаВыгрузки504";
		Иначе
			ИмяМакетаСхемы = "СхемаВыгрузки502";
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ИмяМакетаСхемы;
	
КонецФункции

Процедура ЗаполнитьДанными(ИмяФормы,
						   ПараметрыВыгрузки,
						   ДеревоВыгрузки,
						   РезультатВыгрузки,
					 	   ДанныеОтчета,
						   СтруктураРеквизитовФормы) Экспорт
	
	ОбработатьУсловныеЭлементы(ИмяФормы,
							   ПараметрыВыгрузки,
							   ДеревоВыгрузки,
							   РезультатВыгрузки,
							   ДанныеОтчета,
							   СтруктураРеквизитовФормы);
	
	ЗаполнитьДаннымиУзел(ИмяФормы,
						 ПараметрыВыгрузки,
						 ДеревоВыгрузки);
	
	ОтсечьНезаполненныеНеобязательныеУзлы(ИмяФормы, ДеревоВыгрузки);
	
КонецПроцедуры

Процедура ОбработатьУсловныеЭлементы(ИмяФормы,
									 Знач ПараметрыВыгрузки,
									 Узел,
									 РезультатВыгрузки,
									 ДанныеОтчета,
									 СтруктураРеквизитовФормы)
	
	Если ТипЗнч(Узел) <> Тип("ДеревоЗначений") Тогда
		РегламентированнаяОтчетность.ДополнитьСтруктуруПараметровПрочиеОтчеты(ДанныеОтчета, ПараметрыВыгрузки, Узел);
	КонецЕсли;
	
	КоличествоСтрок = Узел.Строки.Количество();
	
	Для Инд = 1 По КоличествоСтрок Цикл
		ТекСтр = Узел.Строки.Получить(КоличествоСтрок - Инд);
		Если НЕ ПустаяСтрока(ТекСтр.Условие) Тогда
			Если НЕ РегламентированнаяОтчетность.УсловиеВыполнено(
						РезультатВыгрузки, ПараметрыВыгрузки, ТекСтр.Условие, "Баланс") Тогда
				Узел.Строки.Удалить(ТекСтр);
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		ОбработатьУсловныеЭлементы(ИмяФормы,
								   ПараметрыВыгрузки,
								   ТекСтр,
								   РезультатВыгрузки,
								   ДанныеОтчета,
								   СтруктураРеквизитовФормы);
	КонецЦикла;
	
	
КонецПроцедуры

Процедура ЗаполнитьДаннымиУзел(ИмяФормы,
							   ПараметрыВыгрузки,
							   Узел,
							   НомерСтроки = Неопределено)
							   
	МассивУзлов = Новый Массив;
	Для Каждого Ед Из Узел.Строки Цикл
		МассивУзлов.Добавить(Ед);
	КонецЦикла;
	
	Для Каждого Стр из МассивУзлов Цикл
		Если Стр.Тип = "С" ИЛИ Стр.Тип = "C" Тогда // учтем оба варианта: кириллицу и латиницу
			Если Стр.Многострочность Тогда
				КоличествоСтрок = ОпределитьКоличествоСтрокМногострочнойЧасти(ИмяФормы, ПараметрыВыгрузки, Стр);
				Для НомСтр = 1 По КоличествоСтрок Цикл
					НовыйУзел = СкопироватьУзел(ИмяФормы, Узел, Стр);
					ЗаполнитьДаннымиУзел(ИмяФормы, ПараметрыВыгрузки, НовыйУзел, НомСтр);
				КонецЦикла;
			Иначе
				ЗаполнитьДаннымиУзел(ИмяФормы, ПараметрыВыгрузки, Стр, НомерСтроки);
			КонецЕсли;
		Иначе
			Если ПустаяСтрока(Стр.ЗначениеПоУмолчанию) Тогда
				Если НЕ ПустаяСтрока(Стр.Ключ) Тогда
					ИмяСвойства = Стр.Ключ + ?(НомерСтроки = Неопределено, "", "_" + Формат(НомерСтроки, "ЧГ="));
					Если ПараметрыВыгрузки.Свойство(ИмяСвойства) Тогда
						ЗначениеСвойства = ПараметрыВыгрузки[ИмяСвойства];
						Если ТипЗнч(ЗначениеСвойства) = Тип("Строка") Тогда
							ВывестиПоказательВXML(ИмяФормы, Стр, ЗначениеСвойства);
						Иначе
							ВывестиПоказательВXML(ИмяФормы, Стр, ЗначениеПериведенноеКЕдиницеИзмерения(
								ИмяФормы, ЗначениеСвойства, ПараметрыВыгрузки));
						КонецЕсли;
					Иначе
						Стр.Значение = ?(Стр.Формат = "N", "0", "");
					КонецЕсли;
				Иначе
					Стр.Значение = ?(Стр.Формат = "N", "0", "");
				КонецЕсли;
			ИначеЕсли Лев(Стр.ЗначениеПоУмолчанию, 1) = "&" Тогда
				ВывестиПоказательВXML(ИмяФормы, Стр, ПараметрыВыгрузки[Сред(Стр.ЗначениеПоУмолчанию, 2)]);
			Иначе
				Стр.Значение = Стр.ЗначениеПоУмолчанию;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОтсечьНезаполненныеНеобязательныеУзлы(ИмяФормы, Узел)
	
	КоличествоСтрок = Узел.Строки.Количество();
	Для Инд = 1 По КоличествоСтрок Цикл
		Стр = Узел.Строки.Получить(КоличествоСтрок - Инд);
		ОтсечьНезаполненныеНеобязательныеУзлы(ИмяФормы, Стр);
	КонецЦикла;
	
	Если ТипЗнч(Узел) <> Тип("ДеревоЗначений") Тогда
		УзелПуст = УзелПуст(ИмяФормы, Узел);
		Если УзелПуст Тогда
			Если СтрНайти(Узел.Обязательность, "Н") <> 0
			 ИЛИ СтрНайти(Узел.Обязательность, "H") <> 0 Тогда // учтем оба варианта: кириллицу и латиницу
				РегламентированнаяОтчетность.УдалитьУзел(Узел);
			ИначеЕсли (СтрНайти(Узел.Обязательность, "М") <> 0
				   ИЛИ СтрНайти(Узел.Обязательность, "M") <> 0) // учтем оба варианта: кириллицу и латиницу
			И ?(СтрНайти(Узел.Обязательность, "О") <> 0
			ИЛИ СтрНайти(Узел.Обязательность, "O") <> 0,
			РегламентированнаяОтчетность.ИмеютсяАналогичныеСоседниеУзлыКлюч(Узел), Истина) Тогда
				РегламентированнаяОтчетность.УдалитьУзел(Узел);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция ОпределитьКоличествоСтрокМногострочнойЧасти(ИмяФормы, ПараметрыВыгрузки, Узел)
	
	ПервыйКлюч = ПолучитьПервыйКлючВПодчиненииКУзлу(ИмяФормы, Узел);
	Если ЗначениеЗаполнено(ПервыйКлюч) Тогда
		НомерСтроки = 1;
		Пока ПараметрыВыгрузки.Свойство(ПервыйКлюч + "_" + Формат(НомерСтроки, "ЧГ=")) Цикл	
			НомерСтроки = НомерСтроки + 1;
		КонецЦикла;
		Возврат НомерСтроки - 1;
	Иначе
		Возврат 0;
	КонецЕсли;
	
КонецФункции

Функция СкопироватьУзел(ИмяФормы, Родитель, Узел)
	
	СтрокиСТемЖеКодом = Родитель.Строки.НайтиСтроки(Новый Структура("Код", Узел.Код), Ложь);
	МаксИндекс = -1;
	Для Каждого СтрокаСТемЖеКодом Из СтрокиСТемЖеКодом Цикл
		ТекИндекс = Родитель.Строки.Индекс(СтрокаСТемЖеКодом);
		Если ТекИндекс > МаксИндекс Тогда
			МаксИндекс = ТекИндекс;
		КонецЕсли;
	КонецЦикла;
	
	ИндексСоздаваемогоУзла = МаксИндекс + 1;
	Если ИндексСоздаваемогоУзла >= Родитель.Строки.Количество()
	 ИЛИ ИндексСоздаваемогоУзла = 0 Тогда
		НовыйУзел = Родитель.Строки.Добавить();
	Иначе
		НовыйУзел = Родитель.Строки.Вставить(ИндексСоздаваемогоУзла);
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(НовыйУзел, Узел, , "Родитель, Строки");
	Для Каждого Стр из Узел.Строки Цикл
		СкопироватьУзел(ИмяФормы, НовыйУзел, Стр);
	КонецЦикла;
	Возврат НовыйУзел;
	
КонецФункции

Функция ВывестиПоказательВXML(ИмяФормы, Узел, ЗначениеПоказателя)
	
	МинШирина = Узел.МинРазмерность;
	МаксШирина = Узел.МаксРазмерность;
	
	Если Узел.Формат = "T" ИЛИ Узел.Формат = "Т" Тогда // учтем оба варианта: кириллицу и латиницу
		Узел.Значение = ?(МаксШирина < СтрДлина(СокрЛП(ЗначениеПоказателя)),
			СокрЛП(Лев(СокрЛП(ЗначениеПоказателя), МаксШирина)), СокрЛП(ЗначениеПоказателя));
	ИначеЕсли Узел.Формат = "N" Тогда
		СтрокаФормата = "ЧРД=.;ЧН=0;ЧГ=;";
		Если Узел.МаксРазмерность <> 0 И Узел.МаксРазмерность <> 99999 Тогда
			СтрокаФормата = СтрокаФормата + "ЧЦ=" + Формат(Узел.МаксРазмерность, "ЧГ=") + ";";
		КонецЕсли;
		Если Узел.МинРазмерность <> 99999 Тогда
			СтрокаФормата = СтрокаФормата + "ЧДЦ=" + Формат(Узел.МинРазмерность, "ЧГ=") + ";";
		КонецЕсли;
		Узел.Значение = СокрЛП(Формат(ЗначениеПоказателя, СтрокаФормата));
	ИначеЕсли Узел.Формат = "gYear" Тогда
		Если ТипЗнч(ЗначениеПоказателя) = Тип("Дата") Тогда
			Узел.Значение = СокрЛП(Формат(ЗначениеПоказателя, "ДФ=гггг"));
		Иначе
			Узел.Значение = Прав(СокрЛП(ЗначениеПоказателя), 4);
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

Функция УзелПуст(ИмяФормы, Узел)
	
	ПустойУзел = ?(Узел.Формат = "N",
	               Узел.Значение = "0" ИЛИ НЕ ЗначениеЗаполнено(Узел.Значение),
	               НЕ ЗначениеЗаполнено(Узел.Значение) ИЛИ Узел.Код = "ОКУД");
	Для Каждого Стр из Узел.Строки Цикл
		Если НЕ УзелПуст(ИмяФормы, Стр) Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	Возврат ПустойУзел;
	
КонецФункции

Функция ПолучитьПервыйКлючВПодчиненииКУзлу(ИмяФормы, Узел)
	
	Если ЗначениеЗаполнено(Узел.Ключ) Тогда
		Возврат Узел.Ключ;
	КонецЕсли;
	
	Для Каждого Стр Из Узел.Строки Цикл
		КлючВПодчинении = ПолучитьПервыйКлючВПодчиненииКУзлу(ИмяФормы, Стр);
		Если ЗначениеЗаполнено(КлючВПодчинении) Тогда
			Возврат КлючВПодчинении;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

Функция ПроверитьДанные(ИмяФормы, Узел, РезультатВыгрузки) Экспорт
	
	СтатусПроверки = Истина;
	
	Если ТипЗнч(Узел) <> Тип("ДеревоЗначений") Тогда
		Если НЕ ЗначениеСоответствуетФормату(ИмяФормы, Узел, РезультатВыгрузки) Тогда
			СтатусПроверки = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Для Каждого Стр из Узел.Строки Цикл
		СтатусПроверки = (ПроверитьДанные(ИмяФормы, Стр, РезультатВыгрузки) И СтатусПроверки);
	КонецЦикла;
	
	Возврат СтатусПроверки;
	
КонецФункции

Функция ЗначениеСоответствуетФормату(ИмяФормы, Стр, РезультатВыгрузки)
	
	СтатусПроверки = Истина;
	
	Если Стр.Формат = "Т" ИЛИ Стр.Формат = "T" Тогда // учтем оба варианта: кириллицу и латиницу
		
		ДлинаЗначения = СтрДлина(Стр.Значение);
		
		Если ДлинаЗначения < Стр.МинРазмерность Тогда
			
			СтатусПроверки = Ложь;
			Если ЗначениеЗаполнено(Стр.Раздел) И ЗначениеЗаполнено(Стр.Ключ) Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
					"Длина значения показателя """
					+ РегламентированнаяОтчетность.ПредставлениеПоказателя(Стр)
					+ """ меньше минимально возможной (" + ДлинаЗначения
					+ " < " + Стр.МинРазмерность + ")", Стр.Раздел, Стр.Ключ, "");
			Иначе
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
					"Длина значения показателя """
					+ РегламентированнаяОтчетность.ПредставлениеПоказателя(Стр)
					+ """ меньше минимально возможной (" + ДлинаЗначения
					+ " < " + Стр.МинРазмерность + ")", "Баланс", "");
			КонецЕсли;
			
		КонецЕсли;
		
		Если ДлинаЗначения > Стр.МаксРазмерность Тогда
			
			СтатусПроверки = Ложь;
			Если ЗначениеЗаполнено(Стр.Раздел) И ЗначениеЗаполнено(Стр.Ключ) Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
					"Длина значения показателя """
					+ РегламентированнаяОтчетность.ПредставлениеПоказателя(Стр)
					+ """ больше максимально возможной (" + ДлинаЗначения
					+ " > " + Стр.МаксРазмерность + ")", Стр.Раздел, Стр.Ключ, "");
			Иначе
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
					"Длина значения показателя """
					+ РегламентированнаяОтчетность.ПредставлениеПоказателя(Стр)
					+ """ больше максимально возможной (" + ДлинаЗначения
					+ " > " + Стр.МаксРазмерность + ")", "Баланс", "");
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СтатусПроверки;

КонецФункции

Функция ВыгрузитьДеревоВXML(ИмяФормы, ДеревоВыгрузки)
		
	ПотокXML = РегламентированнаяОтчетность.СоздатьНовыйПотокXML();
	ЗаписатьУзелДереваВXML(ИмяФормы, ДеревоВыгрузки, ПотокXML);
	ТекстДляЗаписи = ПотокXML.Закрыть();
	ТекстДляЗаписи = "<?xml version=""1.0"" encoding=""windows-1251""?>"
		+ Сред(ТекстДляЗаписи, СтрНайти(ТекстДляЗаписи, Символы.ПС));
	Возврат ТекстДляЗаписи;
	
КонецФункции

Функция ЗаписатьУзелДереваВXML(ИмяФормы, СтрокаДерева, ПотокXML)

	Если ТипЗнч(СтрокаДерева) = Тип("ДеревоЗначений") Тогда
		ПотокXML.ЗаписатьНачалоЭлемента("Файл");
		ПотокXML.ЗаписатьАтрибут("xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");
		Для Каждого Стр Из СтрокаДерева.Строки Цикл
			ЗаписатьУзелДереваВXML(ИмяФормы, Стр, ПотокXML);
		КонецЦикла;
		ПотокXML.ЗаписатьКонецЭлемента();
	Иначе
		Если СтрокаДерева.Тип = "А" ИЛИ СтрокаДерева.Тип = "A" Тогда 
			ПотокXML.ЗаписатьАтрибут(СтрокаДерева.Код, Строка(СтрокаДерева.Значение));
		Иначе
			ПотокXML.ЗаписатьНачалоЭлемента(СтрокаДерева.Код);
			Для каждого Лист из СтрокаДерева.Строки Цикл
				ЗаписатьУзелДереваВXML(ИмяФормы, Лист, ПотокXML);
			КонецЦикла;
			ПотокXML.ЗаписатьТекст(Строка(СтрокаДерева.Значение));
			ПотокXML.ЗаписатьКонецЭлемента();
		КонецЕсли;
	КонецЕсли;

КонецФункции

#КонецОбласти

#Область ПроверкаЗаполненияОтчета

Функция ПроверитьВозможностьВыгрузки(ИмяФормы, СтруктураРеквизитовФормы, ДанныеОтчета,
	ПараметрыВыгрузки, РезультатВыгрузки) Экспорт
	
	СтатусПроверки = Истина;
	
	Если ИмяФормы = "ФормаОтчета2019Кв1" Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
			"Выгрузка и отправка бухгалтерской отчетности в редакции приказа Минфина России от 19.04.2019 № 61н будет реализована в будущих версиях отчета",
			"Баланс", "ДатаБаланса");
		СтатусПроверки = Ложь;
		
		Возврат СтатусПроверки;
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.Период) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
			"Выгрузка за указанный период не предусмотрена по формату представления в электронной форме!",
			"Баланс", "ДатаБаланса");
		СтатусПроверки = Ложь;
		Возврат СтатусПроверки;
	КонецЕсли;
	
	Если ПустаяСтрока(ПараметрыВыгрузки.КодИФНС) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
			"В справочнике ""Организации"" для текущей организации не задан код ИФНС, необходимый для формирования имени файла выгрузки!",
			"Баланс");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ПустаяСтрока(ПараметрыВыгрузки.КППОрг) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
			"В справочнике ""Организации"" для текущей организации не задан КПП, необходимый для формирования корректного файла выгрузки!",
			"Баланс");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ПустаяСтрока(ПараметрыВыгрузки.НаимОрг) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
			"На указано полное наименование организации!", "Баланс", "ОргНазв");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.ИННОрг) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
			"Не задан ИНН организации!", "Баланс", "ОргИНН");
		СтатусПроверки = Ложь;
	ИначеЕсли НЕ РегламентированнаяОтчетностьВызовСервера.ИННСоответствуетТребованиямНаСервере(
		ПараметрыВыгрузки.ИННОрг, Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
			"Задан некорректный ИНН юридического лица!", "Баланс", "ОргИНН");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ПараметрыВыгрузки.Свойство("ПрПодп") Тогда
		// Форматы выгрузки 5.07, 5.06, 5.05.
		Если ПараметрыВыгрузки.ПрПодп = "1" Тогда
			// Руководитель организации.
			Если ПустаяСтрока(ПараметрыВыгрузки.ПодпФамилия) Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
					"Не удалось определить фамилию руководителя!", "Баланс", "ОргДиректор");
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			Если ПустаяСтрока(ПараметрыВыгрузки.ПодпИмя) Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
					"Не удалось определить имя руководителя!", "Баланс", "ОргДиректор");
				СтатусПроверки = Ложь;
			КонецЕсли;
			
		Иначе
			// Уполномоченный представитель.
			Если ПустаяСтрока(ПараметрыВыгрузки.ПодпФамилия) Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
					"Не удалось определить фамилию уполномоченного представителя!", "Баланс", "ОргДиректор");
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			Если ПустаяСтрока(ПараметрыВыгрузки.ПодпИмя) Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
					"Не удалось определить имя уполномоченного представителя!", "Баланс", "ОргДиректор");
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			Если ПустаяСтрока(ПараметрыВыгрузки.ПодпНаимДок) Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
					"Не задано наименование документа, удостоверяющего полномочия представителя!", "Баланс", "");
				СтатусПроверки = Ложь;
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		// Форматы выгрузки 5.04, 5.02.
		Если ПустаяСтрока(ПараметрыВыгрузки.ФамилияРук) Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
				"Не удалось определить фамилию руководителя!", "Баланс", "ОргДиректор");
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		Если ПустаяСтрока(ПараметрыВыгрузки.ИмяРук) Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
				"Не удалось определить имя руководителя!", "Баланс", "ОргДиректор");
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ПараметрыВыгрузки.КодПодписантаБух) Тогда
			Если ПустаяСтрока(ПараметрыВыгрузки.ФамилияБух) Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
					"Не удалось определить фамилию главного бухгалтера!", "Баланс", "ОргБухгалтер");
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			Если ПустаяСтрока(ПараметрыВыгрузки.ИмяБух) Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
					"Не удалось определить имя главного бухгалтера!", "Баланс", "ОргБухгалтер");
				СтатусПроверки = Ложь;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ПараметрыВыгрузки.ОКПО) И (СтрДлина(ПараметрыВыгрузки.ОКПО) < 8
	 ИЛИ СтрДлина(ПараметрыВыгрузки.ОКПО) > 10
	 ИЛИ НЕ СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(ПараметрыВыгрузки.ОКПО)) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
			"На титульном листе задан некорректный код по ОКПО!", "Баланс", "ОргКодОКПО");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ПустаяСтрока(ПараметрыВыгрузки.ОКВЭД) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
			"Не указано значение кода вида деятельности по ОКВЭД!", "Баланс", "ОргКодОКВЭД");
		СтатусПроверки = Ложь;
	ИначеЕсли НЕ РегламентированнаяОтчетностьКлиентСервер.ОКВЭДСоответствуетТребованиям(ПараметрыВыгрузки.ОКВЭД) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
			"Указано некорректное значение кода вида деятельности по ОКВЭД! Допустимы значения, соответствующие следующим шаблонам: ""XX"", ""XX.X"", ""XX.XX"", ""XX.XX.X"", ""XX.XX.XX"" (X - любая цифра).!",
			"Баланс", "ОргКодОКВЭД");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ПустаяСтрока(ПараметрыВыгрузки.ОКОПФ) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
			"Не задан код по ОКОПФ!", "Баланс", "ОргКодОКОПФ");
		СтатусПроверки = Ложь;
	ИначеЕсли (СтрДлина(ПараметрыВыгрузки.ОКОПФ) <> 2 И СтрДлина(ПараметрыВыгрузки.ОКОПФ) <> 5)
		ИЛИ НЕ СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(ПараметрыВыгрузки.ОКОПФ) Тогда	
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
			"Задан некорректный код по ОКОПФ!", "Баланс", "ОргКодОКОПФ");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ПустаяСтрока(ПараметрыВыгрузки.ОКФС) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
			"Не задан код по ОКФС!", "Баланс", "ОргКодОКФС");
		СтатусПроверки = Ложь;
	ИначеЕсли СтрДлина(ПараметрыВыгрузки.ОКФС) <> 2
		  ИЛИ НЕ СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(ПараметрыВыгрузки.ОКФС) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
			"Задан некорректный код по ОКФС!", "Баланс", "ОргКодОКФС");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ПустаяСтрока(ПараметрыВыгрузки.ОКЕИ) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
			"Не задан код по ОКЕИ!", "Баланс", "КодЕИ");
		СтатусПроверки = Ложь;
	ИначеЕсли СтрДлина(ПараметрыВыгрузки.ОКЕИ) <> 3
		  ИЛИ НЕ СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(ПараметрыВыгрузки.ОКЕИ) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
			"Задан некорректный код по ОКЕИ!", "Баланс", "КодЕИ");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.АдрКодРегион) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
			"Требуется указание как минимум кода региона в адресе!", "Баланс", "ОргПочтАдрес");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания < '20120101'
	   И ПараметрыВыгрузки.Период = "34" И ПустаяСтрока(ПараметрыВыгрузки.ИмяФайлаПояснительнойЗаписки) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
			"К годовой бухгалтерской отчетности необходимо приложить файл пояснительной записки!",
			"ДополнительныеФайлы");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	// Проверка заполнения выгружаемых многострочных частей.
	Для Каждого ЭлементСтруктуры Из ДанныеОтчета.СтруктураМногострочныхЧастей Цикл
		
		МногострочнаяЧасть = ЭлементСтруктуры.Значение;
		
		Если МногострочнаяЧасть.ИмяПоляТабличногоДокумента = "ПолеТабличногоДокумента" + "Баланс" Тогда
			СообщениеОбОшибке = НСтр("ru='В бухгалтерском балансе не задано наименование строки расшифровки!'");
			РезультатПроверки = МногострочнаяЧастьЗаполненаПравильно(ИмяФормы,
				ДанныеОтчета.ПолеТабличногоДокументаБаланс, МногострочнаяЧасть,
				"02", "04, 05, 06", СообщениеОбОшибке, ПараметрыВыгрузки, РезультатВыгрузки);
			СтатусПроверки = (СтатусПроверки И РезультатПроверки);
			
		ИначеЕсли МногострочнаяЧасть.ИмяПоляТабличногоДокумента = "ПолеТабличногоДокумента" + "ФормаОтчета" Тогда
			СообщениеОбОшибке = НСтр("ru='В отчете о прибылях и убытках не задано наименование строки расшифровки!'");
			РезультатПроверки = МногострочнаяЧастьЗаполненаПравильно(ИмяФормы,
				ДанныеОтчета.ПолеТабличногоДокументаФормаОтчета, МногострочнаяЧасть,
				"02", "04, 05", СообщениеОбОшибке, ПараметрыВыгрузки, РезультатВыгрузки);
			СтатусПроверки = (СтатусПроверки И РезультатПроверки);
			
		ИначеЕсли МногострочнаяЧасть.ИмяПоляТабличногоДокумента = "ПолеТабличногоДокумента" + "ОДДС" Тогда
			СообщениеОбОшибке = НСтр("ru='В отчете о движении денежных средств не задано наименование строки расшифровки!'");
			РезультатПроверки = МногострочнаяЧастьЗаполненаПравильно(ИмяФормы,
				ДанныеОтчета.ПолеТабличногоДокументаОДДС, МногострочнаяЧасть,
				"01", "03, 04", СообщениеОбОшибке, ПараметрыВыгрузки, РезультатВыгрузки);
			СтатусПроверки = (СтатусПроверки И РезультатПроверки);
			
		КонецЕсли;
		
	КонецЦикла;

	Возврат СтатусПроверки;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли
