#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

#Область ПрограммныйИнтерфейс

// Функция возвращает параметры исполнения отчета.
Функция ПолучитьПараметрыИсполненияОтчета() Экспорт
	
	Возврат Новый Структура("ИспользоватьПередКомпоновкойМакета,
							|ИспользоватьПослеКомпоновкиМакета,
							|ИспользоватьПослеВыводаРезультата,
							|ИспользоватьДанныеРасшифровки,
							|ИспользоватьВнешниеНаборыДанных,
							|ИспользоватьРасширенныеПараметрыРасшифровки",
							Истина, Истина, Истина, Истина, Истина, Ложь);
	
КонецФункции

// Функция возвращает текст заголовка.
//
// Параметры:
//  ПараметрыОтчета		 - Структура - содержит передаваемые параметры.
//  ОрганизацияВНачале	 - Булево	 - признак устанвоки наименования организации в начало заголовка.
// 
// Возвращаемое значение:
//  Строка - Текст заголовка.
//
Функция ПолучитьТекстЗаголовка(ПараметрыОтчета, ОрганизацияВНачале = Истина) Экспорт 
	
	Возврат "Отчет по лицевым счетам на " + Формат(ПараметрыОтчета.Период, "ДФ=dd.MM.yyyy") + " г.";
	
КонецФункции

// Функция возвращает внешние наборы данных.
//
// Параметры:
//  ПараметрыОтчета	 - Структура		 - содержит передаваемые параметры.
//  МакетКомпоновки	 - ТабличныйДокумент - макет компоновки.
// 
// Возвращаемое значение:
//  Структура - Внешние наборы данных.
//
Функция ПолучитьВнешниеНаборыДанных(ПараметрыОтчета, МакетКомпоновки) Экспорт
	
	МассивВыбрПлощадей = Новый Массив;
	
	Для Каждого ТекПоле Из ПараметрыОтчета.ДополнительныеПоля Цикл 
		Если ТекПоле.Использование = Истина Тогда
			ПолеСтр = Строка(ТекПоле.Поле);
			Если НЕ ПараметрыОтчета.МассивПлощадей.Найти(ПолеСтр) = Неопределено Тогда
				МассивВыбрПлощадей.Добавить(Сред(ПолеСтр, 2));
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	// Получим настройки отбора пользователя по зданиям, помещениям и лицевым счетам,
	// и определим список лицевых счетов, по которым нужно получить данные.
	УсловиеОтбора             = "ИСТИНА";
	ПараметрыЗапросаЗаполнены = Ложь;
	НомерУсловияОтбора        = 1;
	УсловияОтбораМассив       = Новый Массив;
	
	Для Каждого ЭлементОтбора Из ПараметрыОтчета.НастройкиКомпоновкиДанных.Отбор.Элементы Цикл
		Если ЭлементОтбора.Использование И ЗначениеЗаполнено(ЭлементОтбора.ПравоеЗначение) Тогда
			
			Если ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Здание") Тогда
				
				НаименованиеПараметраЗапроса = "ЗданиеСсылка" + НомерУсловияОтбора;
				УсловияОтбораМассив.Добавить(Новый Структура("НаименованиеПараметраЗапроса,Значение", НаименованиеПараметраЗапроса, ЭлементОтбора.ПравоеЗначение));
				
				Если ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно Тогда
					УсловиеОтбора = УсловиеОтбора + " И Адрес.Владелец = &" + НаименованиеПараметраЗапроса;
				ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке Тогда
					УсловиеОтбора = УсловиеОтбора + " И Адрес.Владелец В (&" + НаименованиеПараметраЗапроса + ")";
				ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВИерархии Тогда
					УсловиеОтбора = УсловиеОтбора + " И Адрес.Владелец В ИЕРАРХИИ(&" + НаименованиеПараметраЗапроса + ")";
				ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии Тогда
					УсловиеОтбора = УсловиеОтбора + " И Адрес.Владелец В ИЕРАРХИИ(&" + НаименованиеПараметраЗапроса + ")";
				ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно Тогда
					УсловиеОтбора = УсловиеОтбора + " И НЕ Адрес.Владелец = &" + НаименованиеПараметраЗапроса;
				ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСписке Тогда
					УсловиеОтбора = УсловиеОтбора + " И НЕ Адрес.Владелец В (&" + НаименованиеПараметраЗапроса + ")";
				ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВИерархии Тогда
					УсловиеОтбора = УсловиеОтбора + " И НЕ Адрес.Владелец В ИЕРАРХИИ(&" + НаименованиеПараметраЗапроса + ")";
				ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСпискеПоИерархии Тогда
					УсловиеОтбора = УсловиеОтбора + " И НЕ Адрес.Владелец В ИЕРАРХИИ(&" + НаименованиеПараметраЗапроса + ")";
				КонецЕсли;
				
				НомерУсловияОтбора = НомерУсловияОтбора + 1;
				УсловиеОтбора = УсловиеОтбора + Символы.ПС;
				ПараметрыЗапросаЗаполнены = Истина;
				
			ИначеЕсли ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Помещение") Тогда
				
				НаименованиеПараметраЗапроса = "ПомещениеСсылка" + НомерУсловияОтбора;
				УсловияОтбораМассив.Добавить(Новый Структура("НаименованиеПараметраЗапроса,Значение", НаименованиеПараметраЗапроса, ЭлементОтбора.ПравоеЗначение));
				
				Если ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно Тогда
					УсловиеОтбора = УсловиеОтбора + " И Адрес = &" + НаименованиеПараметраЗапроса;
				ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке Тогда
					УсловиеОтбора = УсловиеОтбора + " И Адрес В (&" + НаименованиеПараметраЗапроса + ")";
				ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВИерархии Тогда
					УсловиеОтбора = УсловиеОтбора + " И Адрес.Родитель В ИЕРАРХИИ(&" + НаименованиеПараметраЗапроса + ")";
				ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии Тогда
					УсловиеОтбора = УсловиеОтбора + " И Адрес.Родитель В ИЕРАРХИИ(&" + НаименованиеПараметраЗапроса + ")";
				ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно Тогда
					УсловиеОтбора = УсловиеОтбора + " И НЕ Адрес = &" + НаименованиеПараметраЗапроса;
				ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСписке Тогда
					УсловиеОтбора = УсловиеОтбора + " И НЕ Адрес В (&" + НаименованиеПараметраЗапроса + ")";
				ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВИерархии Тогда
					УсловиеОтбора = УсловиеОтбора + " И НЕ Адрес.Родитель В ИЕРАРХИИ(&" + НаименованиеПараметраЗапроса + ")";
				ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСпискеПоИерархии Тогда
					УсловиеОтбора = УсловиеОтбора + " И НЕ Адрес.Родитель В ИЕРАРХИИ(&" + НаименованиеПараметраЗапроса + ")";
				КонецЕсли;
				
				НомерУсловияОтбора = НомерУсловияОтбора + 1;
				УсловиеОтбора = УсловиеОтбора + Символы.ПС;
				ПараметрыЗапросаЗаполнены = Истина;
				
			ИначеЕсли ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЛицевойСчет") Тогда
				
				НаименованиеПараметраЗапроса = "ЛицевойСчетСсылка" + НомерУсловияОтбора;
				УсловияОтбораМассив.Добавить(Новый Структура("НаименованиеПараметраЗапроса,Значение", НаименованиеПараметраЗапроса, ЭлементОтбора.ПравоеЗначение));
				
				Если ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно Тогда
					УсловиеОтбора = УсловиеОтбора + " И Ссылка = &" + НаименованиеПараметраЗапроса;
				ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке Тогда
					УсловиеОтбора = УсловиеОтбора + " И Ссылка В (&" + НаименованиеПараметраЗапроса + ")";
				ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВИерархии Тогда
					УсловиеОтбора = УсловиеОтбора + " И Родитель В ИЕРАРХИИ(&" + НаименованиеПараметраЗапроса + ")";
				ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии Тогда
					УсловиеОтбора = УсловиеОтбора + " И Родитель В ИЕРАРХИИ(&" + НаименованиеПараметраЗапроса + ")";
				ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно Тогда
					УсловиеОтбора = УсловиеОтбора + " И НЕ Ссылка = &" + НаименованиеПараметраЗапроса;
				ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСписке Тогда
					УсловиеОтбора = УсловиеОтбора + " И НЕ Ссылка В (&" + НаименованиеПараметраЗапроса + ")";
				ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВИерархии Тогда
					УсловиеОтбора = УсловиеОтбора + " И НЕ Родитель В ИЕРАРХИИ(&" + НаименованиеПараметраЗапроса + ")";
				ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСпискеПоИерархии Тогда
					УсловиеОтбора = УсловиеОтбора + " И НЕ Родитель В ИЕРАРХИИ(&" + НаименованиеПараметраЗапроса + ")";
				КонецЕсли;
				
				НомерУсловияОтбора = НомерУсловияОтбора + 1;
				УсловиеОтбора = УсловиеОтбора + Символы.ПС;
				ПараметрыЗапросаЗаполнены = Истина;
				
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	СписокЛицевыхСчетов = Неопределено;
	
	Если ПараметрыЗапросаЗаполнены Тогда
		
		ЗапросВыборкиЛицевыхСчетов = Новый Запрос;
		
		Для Каждого ТекЭл Из УсловияОтбораМассив Цикл
			ЗапросВыборкиЛицевыхСчетов.УстановитьПараметр(ТекЭл.НаименованиеПараметраЗапроса, ТекЭл.Значение);
		КонецЦикла;
		
		ЗапросВыборкиЛицевыхСчетов.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	КВП_ЛицевыеСчета.Ссылка КАК ЛицевойСчетСсылка
		|ИЗ
		|	Справочник.КВП_ЛицевыеСчета КАК КВП_ЛицевыеСчета
		|ГДЕ
		|	НЕ КВП_ЛицевыеСчета.ЭтоГруппа
		|	И &УсловиеОтбора";
		
		ЗапросВыборкиЛицевыхСчетов.Текст = СтрЗаменить(ЗапросВыборкиЛицевыхСчетов.Текст, "&УсловиеОтбора", УсловиеОтбора);
		
		СписокЛицевыхСчетов = ЗапросВыборкиЛицевыхСчетов.Выполнить().Выгрузить().ВыгрузитьКолонку("ЛицевойСчетСсылка");
		
	КонецЕсли;
	
	// Данные для компоновщика получаем запросом и передаем в СКД результат запроса
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Период", ПараметрыОтчета.Период);
	
	ПоляВыборки = "";
	ПоляВыборки2 = "";
	ТекстЗапросаПоУслугам = "";
	ПоляГруппировки = "";
	
	Если ПараметрыОтчета.РаскрыватьУслуги Тогда
		
		ПоляВыборки = "
		|	ДанныеПоЛС.Услуга,
		|	ДанныеПоЛС.ДатаНачалаДействия,
		|	ДанныеПоЛС.ДатаОкончанияДействия,
		|	ДанныеПоЛС.СпособРасчета,
		|	ДанныеПоЛС.Счетчик,
		|	ЕСТЬNULL(ДанныеПоЛС.НормаПотребления, Неопределено) КАК НормаПотребления,";
		
		ПоляВыборки2 = "
		|		Услуги.Услуга КАК Услуга,
		|		Услуги.ДатаНачалаДействия КАК ДатаНачалаДействия,
		|		ДОБАВИТЬКДАТЕ(Услуги.ДатаОкончанияДействия, ДЕНЬ, -1) КАК ДатаОкончанияДействия,
		|		Услуги.СпособРасчета КАК СпособРасчета,
		|		Услуги.Счетчик КАК Счетчик,
		|		Услуги.НормаПотребления КАК НормаПотребления,";
		
		ТекстЗапросаПоУслугам = "
		|ВЫБРАТЬ
		|	КВП_НазначенныеНачисленияСрезПоследних.Объект КАК Объект,
		|	КВП_НазначенныеНачисленияСрезПоследних.Услуга КАК Услуга,
		|	КВП_НазначенныеНачисленияСрезПоследних.ДатаИзменения КАК Период,
		|	КВП_НазначенныеНачисленияСрезПоследних.Регистратор КАК Регистратор
		|ПОМЕСТИТЬ ОкончаниеНазначенияУслуги
		|ИЗ
		|	РегистрСведений.КВП_НазначенныеНачисления.СрезПоследних КАК КВП_НазначенныеНачисленияСрезПоследних
		|ГДЕ
		|	КВП_НазначенныеНачисленияСрезПоследних.Действует = ЛОЖЬ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КВП_ЗакрепленныеСчетчикиСрезПоследних.Счетчик.ВидУслуги КАК Услуга,
		|	КВП_ЗакрепленныеСчетчикиСрезПоследних.Объект КАК Объект,
		|	КВП_ЗакрепленныеСчетчикиСрезПоследних.Счетчик КАК Счетчик
		|ПОМЕСТИТЬ КВП_ЗакрепленныеСчетчики
		|ИЗ
		|	РегистрСведений.КВП_ЗакрепленныеСчетчики.СрезПоследних(&Период, ДатаИзменения <= &Период) КАК КВП_ЗакрепленныеСчетчикиСрезПоследних
		|ГДЕ
		|	КВП_ЗакрепленныеСчетчикиСрезПоследних.Действует
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НазначенныеНачисленияСрезПоследних.Услуга КАК Услуга,
		|	НазначенныеНачисленияСрезПоследних.Объект КАК ЛицевойСчет,
		|	НазначенныеНачисленияСрезПоследних.Период КАК ДатаНачалаДействия,
		|	ОкончаниеНазначенияУслуги.Период КАК ДатаОкончанияДействия,
		|	КВП_ЗакрепленныеСчетчики.Счетчик КАК Счетчик,
		|	НазначенныеНачисленияСрезПоследних.Услуга.СпособРасчета КАК СпособРасчета,
		|	КВП_НормыПотребленияУслуг.НормаПотребления КАК НормаПотребления
		|ПОМЕСТИТЬ Услуги
		|ИЗ
		|	врТаблицаДействующихУслуг КАК НазначенныеНачисленияСрезПоследних
		|		ЛЕВОЕ СОЕДИНЕНИЕ ОкончаниеНазначенияУслуги КАК ОкончаниеНазначенияУслуги
		|		ПО НазначенныеНачисленияСрезПоследних.Регистратор = ОкончаниеНазначенияУслуги.Регистратор
		|			И НазначенныеНачисленияСрезПоследних.Объект = ОкончаниеНазначенияУслуги.Объект
		|			И НазначенныеНачисленияСрезПоследних.Услуга = ОкончаниеНазначенияУслуги.Услуга
		|		ЛЕВОЕ СОЕДИНЕНИЕ КВП_ЗакрепленныеСчетчики КАК КВП_ЗакрепленныеСчетчики
		|		ПО НазначенныеНачисленияСрезПоследних.Объект = КВП_ЗакрепленныеСчетчики.Объект
		|			И НазначенныеНачисленияСрезПоследних.Услуга = КВП_ЗакрепленныеСчетчики.Услуга
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КВП_НормыПотребленияУслугЛС.СрезПоследних(&Период, ) КАК КВП_НормыПотребленияУслуг
		|		ПО НазначенныеНачисленияСрезПоследних.Объект = КВП_НормыПотребленияУслуг.ЛицевойСчет
		|			И НазначенныеНачисленияСрезПоследних.Услуга = КВП_НормыПотребленияУслуг.Услуга
		|ГДЕ
		|	НазначенныеНачисленияСрезПоследних.Действует
		|;";
		
		ТекстЗапросаЛевоеСоединениеУслуги = "
		|		ЛЕВОЕ СОЕДИНЕНИЕ Услуги КАК Услуги
		|		ПО втЛицевыеСчета.ЛицевойСчет = Услуги.ЛицевойСчет";
		
		ПоляГруппировки = "
		|		Услуги.Услуга,
		|		Услуги.ДатаНачалаДействия,
		|		ДОБАВИТЬКДАТЕ(Услуги.ДатаОкончанияДействия, ДЕНЬ, -1),
		|		Услуги.СпособРасчета,
		|		Услуги.Счетчик,
		|		Услуги.НормаПотребления,";
		
	КонецЕсли;
	
	ПоляВыборкиПлощадей     = "";
	ПоляВыборкиПлощадей2    = "";
	ПоляТаблицПлощадей      = "";
	ПоляГруппировкиПлощадей = "";
	Для Индекс = 0 По МассивВыбрПлощадей.Количество() - 1 Цикл
		ТекПлощадь = МассивВыбрПлощадей[Индекс];
		ИмяТаблицыПлощади = "КВП_ОбщаяПлощадьПомещения" + ТекПлощадь;
		ПоляВыборкиПлощадей = ПоляВыборкиПлощадей + "ДанныеПоЛС.П" + ТекПлощадь + ",";
		ПоляВыборкиПлощадей2 = ПоляВыборкиПлощадей2 + "ЕСТЬNULL(" + ИмяТаблицыПлощади + ".Площадь, 0) * ЕСТЬNULL(КВП_РазмерыДолейЛицевыхСчетовСрезПоследних.ДоляЧислитель, 0) / ВЫБОР
			|		КОГДА ЕСТЬNULL(КВП_РазмерыДолейЛицевыхСчетовСрезПоследних.ДоляЗнаменатель, 1) = 0
			|			ТОГДА 1
			|		ИНАЧЕ ЕСТЬNULL(КВП_РазмерыДолейЛицевыхСчетовСрезПоследних.ДоляЗнаменатель, 1)
			|	КОНЕЦ КАК П" + ТекПлощадь + ",";
		ПоляТаблицПлощадей = ПоляТаблицПлощадей + "ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КВП_ПлощадьПомещения.СрезПоследних(&Период, ВидПлощади = &ВидПлощади" + ТекПлощадь + ") КАК " + ИмяТаблицыПлощади + "
			|	ПО втЛицевыеСчета.Объект = " + ИмяТаблицыПлощади + ".Объект ";
		ПоляГруппировкиПлощадей = ПоляГруппировкиПлощадей + "ЕСТЬNULL(" + ИмяТаблицыПлощади + ".Площадь, 0) * ЕСТЬNULL(КВП_РазмерыДолейЛицевыхСчетовСрезПоследних.ДоляЧислитель, 0) / ВЫБОР
			|		КОГДА ЕСТЬNULL(КВП_РазмерыДолейЛицевыхСчетовСрезПоследних.ДоляЗнаменатель, 1) = 0
			|			ТОГДА 1
			|		ИНАЧЕ ЕСТЬNULL(КВП_РазмерыДолейЛицевыхСчетовСрезПоследних.ДоляЗнаменатель, 1)
			|	КОНЕЦ,";
		Запрос.УстановитьПараметр("ВидПлощади" + ТекПлощадь, Справочники.УПЖКХ_ВидыПлощадей.НайтиПоКоду(ТекПлощадь));
	КонецЦикла;
	
	ДополнитьЗапросКоличествомЖильцов(Запрос, ПараметрыОтчета.Период, СписокЛицевыхСчетов);
	ДополнитьЗапросНазначеннымиУслугами(Запрос, ПараметрыОтчета.Период, ПараметрыОтчета.Организация, СписокЛицевыхСчетов);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	УПЖКХ_СведенияОПроживающихСрезПоследних.Жилец КАК Объект,
	|	УПЖКХ_СведенияОПроживающихСрезПоследних.ЛицевойСчет КАК ЛицевойСчет
	|ПОМЕСТИТЬ Проживающие
	|ИЗ
	|	РегистрСведений.УПЖКХ_СведенияОПроживающих.СрезПоследних(
	|			,
	|			ДатаИзменения <= &Период
	|				И &УсловиеНаЛицевойСчет) КАК УПЖКХ_СведенияОПроживающихСрезПоследних
	|ГДЕ
	|	УПЖКХ_СведенияОПроживающихСрезПоследних.Проживает
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КВП_НазначенныеЛьготыСрезПоследних.Проживающий КАК Проживающий
	|ПОМЕСТИТЬ Льготники
	|ИЗ
	|	РегистрСведений.КВП_НазначенныеЛьготы.СрезПоследних(&Период, ДатаИзменения <= &Период) КАК КВП_НазначенныеЛьготыСрезПоследних
	|ГДЕ
	|	КВП_НазначенныеЛьготыСрезПоследних.Действие
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДействующиеЛС.Объект.Владелец КАК Здание,
	|	ДействующиеЛС.Объект КАК Объект,
	|	ДействующиеЛС.ЛицевойСчет КАК ЛицевойСчет,
	|	врТаблицаКоличеств.КоличествоПроживающих КАК КоличествоПроживающих,
	|	врТаблицаКоличеств.КоличествоЗарегистрированных КАК КоличествоЗарегистрированных,
	|	ДействующиеЛС.Объект.Код КАК НомерПомещения,
	|	УПЖКХ_ОтветственныйСобственник.ОтветственныйВладелец КАК ОтветственныйВладелец
	|ПОМЕСТИТЬ втЛицевыеСчета
	|ИЗ
	|	РегистрСведений.КВП_ЛицевыеСчета.СрезПоследних(
	|			&Период,
	|			&УсловиеНаЛицевойСчет) КАК ДействующиеЛС
	|		ЛЕВОЕ СОЕДИНЕНИЕ врТаблицаКоличеств КАК врТаблицаКоличеств
	|		ПО (врТаблицаКоличеств.ЛицевойСчет = ДействующиеЛС.ЛицевойСчет)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчета.СрезПоследних(
	|				&Период,
	|				&УсловиеНаЛицевойСчет) КАК УПЖКХ_ОтветственныйСобственник
	|		ПО (УПЖКХ_ОтветственныйСобственник.ЛицевойСчет = ДействующиеЛС.ЛицевойСчет)
	|ГДЕ
	|	ДействующиеЛС.Действует
	|;
	|
	|	" + ТекстЗапросаПоУслугам + "
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втЛицевыеСчета.Здание КАК Здание,
	|	втЛицевыеСчета.Объект КАК Помещение,
	|	втЛицевыеСчета.ЛицевойСчет КАК ЛицевойСчет,
	|	втЛицевыеСчета.КоличествоПроживающих КАК КоличествоПроживающих,
	|	втЛицевыеСчета.КоличествоЗарегистрированных КАК КоличествоЗарегистрированных,
	|	ЕСТЬNULL(КВП_РазмерыДолейЛицевыхСчетовСрезПоследних.ДоляЧислитель, 0) / ВЫБОР
	|		КОГДА ЕСТЬNULL(КВП_РазмерыДолейЛицевыхСчетовСрезПоследних.ДоляЗнаменатель, 1) = 0
	|			ТОГДА 1
	|		ИНАЧЕ ЕСТЬNULL(КВП_РазмерыДолейЛицевыхСчетовСрезПоследних.ДоляЗнаменатель, 1)
	|	КОНЕЦ КАК ДоляЛС,
	|	" + ПоляВыборкиПлощадей2 + "
	|	КВП_ОткрытиеЛС.Период КАК ДатаОткрытияЛС,
	|	ДОБАВИТЬКДАТЕ(КВП_ЗакрытиеЛС.Период, ДЕНЬ, -1) КАК ДатаЗакрытияЛС,
	|	КОЛИЧЕСТВО(Льготники.Проживающий) КАК Льгота,
	|	" + ПоляВыборки2 + "
	|	втЛицевыеСчета.НомерПомещения КАК НомерПомещения,
	|	втЛицевыеСчета.ОтветственныйВладелец КАК ОтветственныйВладелец
	|ПОМЕСТИТЬ ДанныеПоЛС
	|ИЗ
	|	втЛицевыеСчета КАК втЛицевыеСчета
	|			" + ПоляТаблицПлощадей + "
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КВП_ЛицевыеСчета.СрезПервых(
	|				,
	|				НЕ Действует
	|					И &УсловиеНаЛицевойСчет) КАК КВП_ЗакрытиеЛС
	|		ПО втЛицевыеСчета.ЛицевойСчет = КВП_ЗакрытиеЛС.ЛицевойСчет
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КВП_ЛицевыеСчета.СрезПервых(
	|				,
	|				Действует
	|					И &УсловиеНаЛицевойСчет) КАК КВП_ОткрытиеЛС
	|		ПО втЛицевыеСчета.ЛицевойСчет = КВП_ОткрытиеЛС.ЛицевойСчет
	|		ЛЕВОЕ СОЕДИНЕНИЕ Проживающие КАК Проживающие
	|			ЛЕВОЕ СОЕДИНЕНИЕ Льготники КАК Льготники
	|			ПО (Льготники.Проживающий = Проживающие.Объект)
	|		ПО втЛицевыеСчета.ЛицевойСчет = Проживающие.ЛицевойСчет
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КВП_РазмерыДолейЛицевыхСчетов.СрезПоследних(
	|				&Период,
	|				&УсловиеНаЛицевойСчет) КАК КВП_РазмерыДолейЛицевыхСчетовСрезПоследних
	|		ПО втЛицевыеСчета.Объект = КВП_РазмерыДолейЛицевыхСчетовСрезПоследних.Объект
	|			И втЛицевыеСчета.ЛицевойСчет = КВП_РазмерыДолейЛицевыхСчетовСрезПоследних.ЛицевойСчет
	|			" + ТекстЗапросаЛевоеСоединениеУслуги + "
	|
	|СГРУППИРОВАТЬ ПО
	|	втЛицевыеСчета.Здание,
	|	втЛицевыеСчета.Объект,
	|	втЛицевыеСчета.ЛицевойСчет,
	|	втЛицевыеСчета.КоличествоПроживающих,
	|	втЛицевыеСчета.КоличествоЗарегистрированных,
	|	ЕСТЬNULL(КВП_РазмерыДолейЛицевыхСчетовСрезПоследних.ДоляЧислитель, 0) / ВЫБОР
	|		КОГДА ЕСТЬNULL(КВП_РазмерыДолейЛицевыхСчетовСрезПоследних.ДоляЗнаменатель, 1) = 0
	|			ТОГДА 1
	|		ИНАЧЕ ЕСТЬNULL(КВП_РазмерыДолейЛицевыхСчетовСрезПоследних.ДоляЗнаменатель, 1)
	|	КОНЕЦ,
	|	" + ПоляГруппировкиПлощадей + "
	|	КВП_ОткрытиеЛС.Период,
	|	КВП_ЗакрытиеЛС.Период,
	|	" + ПоляГруппировки + "
	|	втЛицевыеСчета.НомерПомещения,
	|	втЛицевыеСчета.ОтветственныйВладелец
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДанныеПоЛС.Здание КАК Здание,
	|	ДанныеПоЛС.Помещение КАК Помещение,
	|	ДанныеПоЛС.ЛицевойСчет КАК ЛицевойСчет,
	|	ДанныеПоЛС.КоличествоПроживающих КАК КоличествоПроживающих,
	|	ДанныеПоЛС.КоличествоЗарегистрированных КАК КоличествоЗарегистрированных,
	|	ДанныеПоЛС.ДоляЛС КАК ДоляЛС,
	|	" + ПоляВыборкиПлощадей + "
	|	ДанныеПоЛС.ДатаОткрытияЛС КАК ДатаОткрытияЛС,
	|	ДанныеПоЛС.ДатаЗакрытияЛС КАК ДатаЗакрытияЛС,
	|	ВЫБОР
	|		КОГДА ДанныеПоЛС.Льгота = 0
	|			ТОГДА ""Отсутствует""
	|		ИНАЧЕ ДанныеПоЛС.Льгота
	|	КОНЕЦ КАК Льгота,
	|	" + ПоляВыборки + "
	|	ДанныеПоЛС.НомерПомещения КАК НомерПомещения,
	|	ДанныеПоЛС.ОтветственныйВладелец КАК ОтветственныйВладелец,
	|	0 КАК Норма
	|ИЗ
	|	ДанныеПоЛС КАК ДанныеПоЛС";
	
	УсловиеНаЛицевойСчет = "ИСТИНА";
	Если НЕ СписокЛицевыхСчетов = Неопределено Тогда
		УсловиеНаЛицевойСчет = УсловиеНаЛицевойСчет + " И ЛицевойСчет В (&СписокЛицевыхСчетов)";
	КонецЕсли;
	
	Запрос.УстановитьПараметр("СписокЛицевыхСчетов", СписокЛицевыхСчетов);
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеНаЛицевойСчет", УсловиеНаЛицевойСчет);
	
	ДанныеПоЛС = Запрос.Выполнить().Выгрузить();
	
	Если ПараметрыОтчета.РаскрыватьУслуги Тогда
		Для каждого ТекСтрока из ДанныеПоЛС Цикл
			Если НЕ ТекСтрока.НормаПотребления = Неопределено Тогда
				ТекСтрока.Норма = ПолучитьРазмерНормыПотребления(ТекСтрока.ЛицевойСчет, ПараметрыОтчета.Период, 
															ТекСтрока.НормаПотребления, ПараметрыОтчета.Организация);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ВнешниеНаборыДанных = Новый Структура("ДанныеПоЛС", ДанныеПоЛС);
	
	Возврат ВнешниеНаборыДанных;
	
КонецФункции

// В процедуре можно доработать компоновщик перед выводом в отчет.
// Изменения сохранены не будут.
//
// Параметры:
//  ПараметрыОтчета		 - Структура							 - содержит передаваемые параметры.
//  Схема				 - СхемаКомпоновкиДанных				 - схема компоновки, на основании которой будет выполняться отчет.
//  КомпоновщикНастроек	 - КомпоновщикНастроекКомпоновкиДанных	 - компоновщик настроек компоновки данных.
//
Процедура ПередКомпоновкойМакета(ПараметрыОтчета, Схема, КомпоновщикНастроек) Экспорт
	
	Если ЗначениеЗаполнено(ПараметрыОтчета.Период) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "Период", КонецДня(ПараметрыОтчета.Период));
	КонецЕсли;
	
	УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "ПС", Символы.ПС);
	
	// Группировка
	
	КомпоновщикНастроек.Настройки.Структура.Очистить();
	КомпоновщикНастроек.Настройки.Выбор.Элементы.Очистить();
	
	Если ПараметрыОтчета.РаскрыватьУслуги Тогда
		
		Гр = КомпоновщикНастроек.Настройки.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
		Гр.Использование = Истина;
		ПолеК = Гр.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
		ПолеК.Использование = Истина;
		ПолеК.Поле = Новый ПолеКомпоновкиДанных("Здание");
		АвтоПоле = Гр.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
		АвтоПоле.Использование = Истина;
		
		Гр2 = Гр.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
		Гр2.Использование = Истина;
		
		ПолеК = Гр2.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
		ПолеК.Использование = Истина;
		ПолеК.Поле = Новый ПолеКомпоновкиДанных("Помещение");
		Гр2.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных")).Поле = ПолеК.Поле;
		
		ПолеК = Гр2.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
		ПолеК.Использование = Истина;
		ПолеК.Поле = Новый ПолеКомпоновкиДанных("ЛицевойСчет");
		Гр2.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных")).Поле = ПолеК.Поле;
		
		ПолеК = Гр2.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
		ПолеК.Использование = Истина;
		ПолеК.Поле = Новый ПолеКомпоновкиДанных("НомерПомещения");
		
		ПолеК = Гр2.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
		ПолеК.Использование = Истина;
		ПолеК.Поле = Новый ПолеКомпоновкиДанных("ОтветственныйВладелец");
		Гр2.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных")).Поле = ПолеК.Поле;
		
		Гр3 = Гр2.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
		Гр3.Использование = Истина;
		
		АвтоПоле = Гр3.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
		АвтоПоле.Использование = Истина;
		
		Для Каждого Сортировка Из КомпоновщикНастроек.Настройки.Порядок.Элементы Цикл
			НоваяЗапись = Гр3.Порядок.Элементы.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
			НоваяЗапись.Использование     = Сортировка.Использование;
			НоваяЗапись.Поле              = Сортировка.Поле;
			НоваяЗапись.ТипУпорядочивания = Сортировка.ТипУпорядочивания;
		КонецЦикла;
		
		ПолеВыбора = КомпоновщикНастроек.Настройки.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
		ПолеВыбора.Использование = Истина;
		ПолеВыбора.Поле = Новый ПолеКомпоновкиДанных("Услуга");
		ПолеВыбора = КомпоновщикНастроек.Настройки.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
		ПолеВыбора.Использование = Истина;
		ПолеВыбора.Поле = Новый ПолеКомпоновкиДанных("ДатаНачалаДействия");
		ПолеВыбора = КомпоновщикНастроек.Настройки.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
		ПолеВыбора.Использование = Истина;
		ПолеВыбора.Поле = Новый ПолеКомпоновкиДанных("ДатаОкончанияДействия");
		ПолеВыбора = КомпоновщикНастроек.Настройки.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
		ПолеВыбора.Использование = Истина;
		ПолеВыбора.Поле = Новый ПолеКомпоновкиДанных("СпособРасчета");
		ПолеВыбора = КомпоновщикНастроек.Настройки.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
		ПолеВыбора.Использование = Истина;
		ПолеВыбора.Поле = Новый ПолеКомпоновкиДанных("Счетчик");
		ПолеВыбора = КомпоновщикНастроек.Настройки.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
		ПолеВыбора.Использование = Истина;
		ПолеВыбора.Поле = Новый ПолеКомпоновкиДанных("Норма");
		
		// Отбираем только строки с заполненной услугой
		Отбор = Гр3.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		Отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Услуга");
		Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
		Отбор.Использование = Истина;
		
		// Параметры вывода
		ПараметрыВывода = Гр3.ПараметрыВывода.Элементы.Найти("ВыводитьОтбор");
		ПараметрыВывода.Значение = ТипВыводаТекстаКомпоновкиДанных.НеВыводить;
		ПараметрыВывода.Использование = Истина;
		
		// Добавление дополнительных полей в группу л/с.
		// Добавленные поля удаляются из таблицы дполнительных полей парамтров отчета.
		// Это сдлеано для избежания повторного добавления данных полей в отчет.
		ДобавитьНеитоговыеПоляВГруппу(ПараметрыОтчета, Схема, Гр2);
		
	Иначе
		
		Гр = КомпоновщикНастроек.Настройки.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
		Гр.Использование = Истина;
		ПолеК = Гр.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
		ПолеК.Использование = Истина;
		ПолеК.Поле = Новый ПолеКомпоновкиДанных("Здание");
		АвтоПоле = Гр.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
		АвтоПоле.Использование = Истина;
		
		Гр2 = Гр.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
		Гр2.Использование = Истина;
		АвтоПоле = Гр2.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
		АвтоПоле.Использование = Истина;
		
		Для Каждого Сортировка Из КомпоновщикНастроек.Настройки.Порядок.Элементы Цикл
			НоваяЗапись = Гр2.Порядок.Элементы.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
			НоваяЗапись.Использование     = Сортировка.Использование;
			НоваяЗапись.Поле              = Сортировка.Поле;
			НоваяЗапись.ТипУпорядочивания = Сортировка.ТипУпорядочивания;
		КонецЦикла;
		
		ПолеВыбора = КомпоновщикНастроек.Настройки.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
		ПолеВыбора.Использование = Истина;
		ПолеВыбора.Поле = Новый ПолеКомпоновкиДанных("Помещение");
		ПолеВыбора = КомпоновщикНастроек.Настройки.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
		ПолеВыбора.Использование = Истина;
		ПолеВыбора.Поле = Новый ПолеКомпоновкиДанных("ЛицевойСчет");
		ПолеВыбора = КомпоновщикНастроек.Настройки.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
		ПолеВыбора.Использование = Истина;
		ПолеВыбора.Поле = Новый ПолеКомпоновкиДанных("ОтветственныйВладелец");
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыОтчета.Организация) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.ДобавитьОтбор(КомпоновщикНастроек, "Организация", ПараметрыОтчета.Организация,,, Истина);
	КонецЕсли;
	
	ДобавитьПоляВНаборКомпоновки(ПараметрыОтчета, Схема);
	
	// При вызове данной процедуры происходит добавление дополнительных колонок в
	// группу помещений/лицевых счетов.
	// 
	// При включенном флажке "Раскрывать услуги" дополнительные колонки выводятся
	// левее основных колонок группы (помещение, лицевой счет и т.д.), при том, что
	// дополнительные колонки будут выведены в любом случае.
	// 
	УПЖКХ_ТиповыеМетодыВызовСервера.ДобавитьДополнительныеПоля(ПараметрыОтчета, КомпоновщикНастроек);
	
КонецПроцедуры

// Возникает после компоновки макета.
//
// Параметры:
//  ПараметрыОтчета	 - Структура			 - содержит передаваемые параметры.
//  МакетКомпоновки	 - МакетКомпоновкиДанных - макет компоновки данных.
//
Процедура ПослеКомпоновкиМакета(ПараметрыОтчета, МакетКомпоновки) Экспорт
	
КонецПроцедуры

// Возникает после вывода результата.
//
// Параметры:
//  ПараметрыОтчета	 - Структура		 - содержит передаваемые параметры.
//  Результат		 - ТабличныйДокумент - результат выполнения процедуры.
//
Процедура ПослеВыводаРезультата(ПараметрыОтчета, Результат) Экспорт
	
	УПЖКХ_ТиповыеМетодыВызовСервера.ОбработкаРезультатаОтчета(ПараметрыОтчета.ИдентификаторОтчета, Результат);
	
КонецПроцедуры

// Вызывает настройку вариантов отчета.
//
// Параметры:
//  Настройки		 - Коллекция			 - используется для описания настроек отчетов и вариантов.
//  ОписаниеОтчета	 - СтрокаДереваЗначений	 - настройки отчета и настройки "по умолчанию" для вариантов этого отчета.
//
Процедура НастроитьВариантыОтчета(Настройки, ОписаниеОтчета) Экспорт
	
КонецПроцедуры

// Процедура используется подсистемой варианты отчетов
//
// Параметры:
//  Настройки - Коллекция - используется для описания настроек отчетов и вариантов.
//
Процедура НастройкиОтчета(Настройки) Экспорт
	
	Схема = ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");
	Для Каждого Вариант из Схема.ВариантыНастроек Цикл
		Настройки.ОписаниеВариантов.Вставить(Вариант.Имя,Вариант.Представление);
	КонецЦикла;
	
КонецПроцедуры

// Заполняет параметры расшифровки отчета.
//
// Параметры:
//  Адрес					 - Строка 		 - адрес временного хранилища с данными расшифровки отчета.
//  Расшифровка	 			- Произвольный	 - значения полей расшифровки.
//  ПараметрыРасшифровки	- Структура 	 - параметры расшифровки.
//
Процедура ЗаполнитьПараметрыРасшифровкиОтчета(Адрес, Расшифровка, ПараметрыРасшифровки) Экспорт
	
	
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

#Область СлужебныеПроцедурыИФункции

// Процедура добавляет поле итога.
Процедура ДобавитьПолеИтога(Схема, ИмяПоля)
	
	ПолеИтога = Схема.ПоляИтога.Добавить();
	ПолеИтога.ПутьКДанным = ИмяПоля;
	ПолеИтога.Выражение = "Сумма(МАССИВ(ТаблицаЗначений(Различные " + ИмяПоля + ", ЛицевойСчет)))";
	
КонецПроцедуры

// Процедура добавляет поля для возможности их отображения.
Процедура ДобавитьПоляВНаборКомпоновки(ПараметрыОтчета, Схема) Экспорт

	Набор = Схема.НаборыДанных.Найти("ДанныеПоЛС");
	
	Если Набор = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Схема.ПоляИтога.Очистить();
	
	МассивПлощадей = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УПЖКХ_ВидыПлощадей.Код,
	|	УПЖКХ_ВидыПлощадей.Наименование
	|ИЗ
	|	Справочник.УПЖКХ_ВидыПлощадей КАК УПЖКХ_ВидыПлощадей
	|ГДЕ
	|	(НЕ УПЖКХ_ВидыПлощадей.ПометкаУдаления)";
	
	ОписаниеТиповПлощади = Метаданные.РегистрыСведений.КВП_ПлощадьПомещения.Ресурсы.Площадь.Тип;
	
	ВыборкаПлощадей = Запрос.Выполнить().Выбрать();
	Пока ВыборкаПлощадей.Следующий() Цикл
		Поле = "П" + ВыборкаПлощадей.Код;
		Заголовок = ВыборкаПлощадей.Наименование;
		Если Набор.Поля.Найти(Поле) = Неопределено Тогда
			
			ПолеНабораДанных = Набор.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
			ПолеНабораДанных.Поле        = Поле;
			ПолеНабораДанных.Заголовок   = Заголовок;
			ПолеНабораДанных.ПутьКДанным = Поле;
			ПолеНабораДанных.ТипЗначения = ОписаниеТиповПлощади;
			
		КонецЕсли;
		
		// Данная процедура добавляет в правой части таблицы (дерева) колонку итогов
		// по указанной колонке.
		// 
		// При этом после ее вызова, в группе, где находится колонка-источник данных,
		// перестают выводиться колонки, для которых не созданы колонки итогов.
		// 
		// Также при включенном флажке "Раскрывать услуги" итоги в колонках итогов будут
		// некорректны, так как для этого будет производиться суммирование значений
		// соответствующих колонок-источников данных для всех строк таблицы.
		//
		// Например, имеется дополнительное поле "Площадь помещения", для которого
		// создана колонка итогов, и есть л/с с 2-мя услугами.
		// Для каждой строки услуг будет выведена площадь помещения (это правильно),
		// а в колонке итогов площадь будет в 2 раза больше (так как происходит сложение
		// площадей во всех строках).
		// 
		ДобавитьПолеИтога(Схема, Поле);
		
		МассивПлощадей.Добавить(Поле);
		
	КонецЦикла;
	
	// Поля итогов
	ДобавитьПолеИтога(Схема, "КоличествоПроживающих");
	ДобавитьПолеИтога(Схема, "КоличествоЗарегистрированных");
	
	ПараметрыОтчета.Вставить("МассивПлощадей", МассивПлощадей);
	
КонецПроцедуры // ДобавитьПоляВНаборКомпоновки()

// Процедура добавляет все не являющиеся итоговыми поля в указанную группу.
// При этом, данные поля исключаются из таблицы дополнительных полей параметров отчета.
Процедура ДобавитьНеитоговыеПоляВГруппу(ПараметрыОтчета, Схема, Группа)
	
	ДополнительныеПоля = ПараметрыОтчета.ДополнительныеПоля;
	ПоляИтога          = Схема.ПоляИтога;
	
	// Параметры цикла
	ТекИндекс = 0;
	КоличествоДопПолей = ДополнительныеПоля.Количество();
	
	// Обход всех дополнительных полей
	Пока ТекИндекс < КоличествоДопПолей Цикл
		ТекПоле = ДополнительныеПоля.Получить(ТекИндекс);
		
		// Если поле не является полем итогов
		Если ПоляИтога.Найти(ТекПоле.Поле) = Неопределено Тогда
			// Добавляем поле в группу
			Если ТекПоле.Использование Тогда
				ПолеГруппировки = Группа.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
				ПолеГруппировки.Использование = Истина;
				ПолеГруппировки.Поле = Новый ПолеКомпоновкиДанных(ТекПоле.Поле);
			КонецЕсли;
			
			// Удаляем поле из таблицы дополнительных полей
			ДополнительныеПоля.Удалить(ТекИндекс);
			
			// Количество дополнительных полей уменьшается на 1
			КоличествоДопПолей = КоличествоДопПолей - 1;
		Иначе
			// Переходим к следующей строке таблицы
			ТекИндекс = ТекИндекс + 1;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли