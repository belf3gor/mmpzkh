&НаКлиенте
Перем ОбработкаКС Экспорт;

&НаСервере
Перем СписокРасшифровкиПоказателей;

&НаСервере
Перем СписокРасшифровкиформулы;

&НаСервере
Перем мОбъектОтчета;

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	// Обход ошибки платформы Параметр сеанса отсутствует или удален
	ТабличныйДокумент.Очистить();
	
	СформироватьСтруктуруРеквизитовФормы();
	
	СтруктураРеквизитовФормы.СписокПечатаемыхЛистов = Новый СписокЗначений; 
	
	СтруктураРеквизитовФормы.мСоставПоказателей = "СоставПоказателей2014Кв1";
	
	СтруктураРеквизитовФормы.мОписаниеТиповЧислоЕ   = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(17, 2));
	
	МассивБулево = Новый Массив;
	МассивБулево.Добавить(Тип("Булево"));
	СтруктураРеквизитовФормы.мОписаниеТиповБулево = Новый ОписаниеТипов(МассивБулево);
	
	СтруктураРеквизитовФормы.ПеречислениеПериодичностьМесяц = Перечисления.Периодичность.Месяц;
	СтруктураРеквизитовФормы.СправочникиВидыКонтактнойИнформацииФактАдресОрганизации
		= Справочники.ВидыКонтактнойИнформации.ФактАдресОрганизации;

	// ОПИСАНИЕ ПАРАМЕТРОВ МНОГОСТРОЧНЫХ ГРУПП
	// Идентификаторы многострочных групп
	СтруктураРеквизитовФормы.мИдГруппы1 = "П0000200120"; // Раздел2
	СтруктураРеквизитовФормы.мИдГруппы2 = "П0000500370"; // Раздел5
	СтруктураРеквизитовФормы.мИдГруппы3 = "П0000600180"; // Раздел6
	СтруктураРеквизитовФормы.мИдГруппы4 = "П0000700330"; // Раздел7
	СтруктураРеквизитовФормы.мИдГруппы5 = "П0001010010"; // Раздел10_Прил1
	
	// количество строк многострочных разделов по "бумажной" форме отчета
	// (минимальное количество строк, которое должно присутствовать всегда)
	КолИсхСтрокИдГруппы1 = 1;
	КолИсхСтрокИдГруппы2 = 1;
	КолИсхСтрокИдГруппы3 = 1;
	КолИсхСтрокИдГруппы4 = 1;
	КолИсхСтрокИдГруппы5 = 1;

	КолКолонокИдГруппы1 = 5;
	КолКолонокИдГруппы2 = 4;
	КолКолонокИдГруппы3 = 4;
	КолКолонокИдГруппы4 = 4;
	КолКолонокИдГруппы5 = 9;
	
	СтруктураДанныхТитульный      = Новый Структура;
	СтруктураДанныхРаздел1_1      = Новый Структура;
	СтруктураДанныхРаздел1_2      = Новый Структура;
	СтруктураДанныхРаздел1_3      = Новый Структура;
	СтруктураДанныхРаздел2        = Новый Структура;
	СтруктураДанныхРаздел3        = Новый Структура;
	СтруктураДанныхРаздел4        = Новый Структура;
	СтруктураДанныхРаздел8        = Новый Структура;
	СтруктураДанныхРаздел9        = Новый Структура;
	СтруктураДанныхРаздел10_Прил1 = Новый Структура;
	
	ИнициализацияМногостраничныхРазделов();
	
	// структура многострочных разделов формы
	мСтруктураМногострочныхРазделов = Новый Структура;
	мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы1, СтруктураРеквизитовФормы.мИдГруппы1);
	мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы2, СтруктураРеквизитовФормы.мИдГруппы2);
	мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы3, СтруктураРеквизитовФормы.мИдГруппы3);
	мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы4, СтруктураРеквизитовФормы.мИдГруппы4);
	мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы5, СтруктураРеквизитовФормы.мИдГруппы5);
	
	// Структура содержит данные дополнительных страниц
	мСтруктураМногостраничныхРазделов = Новый Структура;
	мСтруктураМногостраничныхРазделов.Вставить("ФизЛица",         "ТаблицаСтраницыФизЛица");
	мСтруктураМногостраничныхРазделов.Вставить("Раздел5",         "ТаблицаСтраницыРаздел5"); //многостраничный и многострочный
	мСтруктураМногостраничныхРазделов.Вставить("Раздел6",         "ТаблицаСтраницыРаздел6"); //многостраничный и многострочный
	мСтруктураМногостраничныхРазделов.Вставить("Раздел7",         "ТаблицаСтраницыРаздел7"); //многостраничный и многострочный
	мСтруктураМногостраничныхРазделов.Вставить("Раздел10",        "ТаблицаСтраницыРаздел10");
	мСтруктураМногостраничныхРазделов.Вставить("Раздел11",        "ТаблицаСтраницыРаздел11");
	мСтруктураМногостраничныхРазделов.Вставить("Раздел11_Прил1",  "ТаблицаСтраницыРаздел11_Прил1");
	мСтруктураМногостраничныхРазделов.Вставить("Раздел11_Прил2",  "ТаблицаСтраницыРаздел11_Прил2");
	
	// Структура исходных строк (минимального кол-ва) многострочных разделов формы
	мСтруктураИсхКолвоСтрокРазделов = Новый Структура;
	мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы1, КолИсхСтрокИдГруппы1);
	мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы2, КолИсхСтрокИдГруппы2);
	мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы3, КолИсхСтрокИдГруппы3);
	мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы4, КолИсхСтрокИдГруппы4);
	мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы5, КолИсхСтрокИдГруппы5);
	
	мСтруктураКолвоКолонокРазделов = Новый Структура;
	мСтруктураКолвоКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы1, КолКолонокИдГруппы1);
	мСтруктураКолвоКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы2, КолКолонокИдГруппы2);
	мСтруктураКолвоКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы3, КолКолонокИдГруппы3);
	мСтруктураКолвоКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы4, КолКолонокИдГруппы4);
	мСтруктураКолвоКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы5, КолКолонокИдГруппы5);
	
	ЦветЗаполняетсяТолькоВручную     = Новый Цвет(255, 255, 225);
	ЦветЗаполняетсяАвтоКорректир     = Новый Цвет(255, 240, 200);
	ЦветЗаполняетсяАвтоБезКорректир  = Новый Цвет(230, 240, 220);
	СтруктураРеквизитовФормы.ЦветЗаполняетсяАвтоАрифметика = Новый Цвет(192, 220, 192); // ЗЕЛЕНЫЙ
	ЦветЗаполняетсяОднозначноВручную = Новый Цвет(255, 255, 192); // ЖЕЛТЫЙ
	ЦветЗаполняетсяАвтоматически     = Новый Цвет(255, 255, 255); // Белый, Ввод запрещен
	ЦветАвто                         = Новый Цвет(0, 0, 0);       // Белый, Ввод запрещен
	
	// структура цветов раскраски автозаполняемых ячеек
	мСтруктураЦветовРаскраски = Новый Структура;
	мСтруктураЦветовРаскраски.Вставить("_1", ЦветЗаполняетсяТолькоВручную);
	мСтруктураЦветовРаскраски.Вставить("_2", ЦветЗаполняетсяАвтоКорректир);
	мСтруктураЦветовРаскраски.Вставить("_3", ЦветЗаполняетсяАвтоБезКорректир);
	мСтруктураЦветовРаскраски.Вставить("_4", СтруктураРеквизитовФормы.ЦветЗаполняетсяАвтоАрифметика);
	мСтруктураЦветовРаскраски.Вставить("_0", ЦветЗаполняетсяОднозначноВручную);
	мСтруктураЦветовРаскраски.Вставить("_5", ЦветЗаполняетсяАвтоматически);
	мСтруктураЦветовРаскраски.Вставить("_6", ЦветАвто);
	
	мСтруктураВариантыЗаполнения       = Новый Структура;
	мСтруктураВариантыЗаполненияЭталон = Новый Структура;
	
	// Версия формы
	СтруктураРеквизитовФормы.мВерсияФормы = "01/01/2007";;
	
	// Код отчета, равен КНД
	СтруктураРеквизитовФормы.мКодОтчета = "1151038";

	СтруктураРеквизитовФормы.ОбязРазделов = Новый СписокЗначений;
	СтруктураРеквизитовФормы.ОбязРазделов.Добавить("Раздел1_1");
	СтруктураРеквизитовФормы.ОбязРазделов.Добавить("Раздел2");
	СтруктураРеквизитовФормы.ОбязРазделов.Добавить("Раздел5");
	СтруктураРеквизитовФормы.ОбязРазделов.Добавить("Раздел6");
	СтруктураРеквизитовФормы.ОбязРазделов.Добавить("Раздел7");

	СтруктураРеквизитовФормы.ВариантыФорматовВыгрузки = Новый СписокЗначений;
	СтруктураРеквизитовФормы.ВариантыФорматовВыгрузки.Добавить(СтруктураРеквизитовФормы.мСоставПоказателей, "Формат 3.00004", Истина);

	СтруктураРеквизитовФормы.КНД = "1151038";
	СтруктураРеквизитовФормы.НаименованиеОтчетаДляВыгрузки = "НАЛОГОВАЯ ДЕКЛАРАЦИЯ ПО НАЛОГУ НА ПРИБЫЛЬ ИНОСТРАННОЙ ОРГАНИЗАЦИИ";

	СтруктураРеквизитовФормы.мПечатныеформы = Новый СписокЗначений;
	СтруктураРеквизитовФормы.мПечатаемыеРазделы = Новый СписокЗначений;

	СтруктураРеквизитовФормы.МногострочныеИсключения = Новый СписокЗначений;
	СтруктураРеквизитовФормы.МногострочныеИсключения.Добавить("П000110003000");
	СтруктураРеквизитовФормы.МногострочныеИсключения.Добавить("П000110004000");
	СтруктураРеквизитовФормы.МногострочныеИсключения.Добавить("П000110005000");

	ИмяРаздела = "Титульный";
	
	ТабличныйДокумент.Вывести(
		ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(
		Сред(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + ИмяРаздела));
	
	СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяРаздела;
	
	СтруктураРеквизитовФормы.мВыбраннаяФорма          = Параметры.мВыбраннаяФорма;
	СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета  = Параметры.мДатаКонцаПериодаОтчета;
	СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета = Параметры.мДатаНачалаПериодаОтчета;
	СтруктураРеквизитовФормы.мПериодичность           = Параметры.мПериодичность;
	СтруктураРеквизитовФормы.мСкопированаФорма        = Параметры.мСкопированаФорма;
	СтруктураРеквизитовФормы.мСохраненныйДок          = Параметры.мСохраненныйДок;
	СтруктураРеквизитовФормы.Организация              = Параметры.Организация;
	СтруктураРеквизитовФормы.ДоступенМеханизмПечатиРеглОтчетностиСДвухмернымШтрихкодомPDF417
		= Параметры.ДоступенМеханизмПечатиРеглОтчетностиСДвухмернымШтрихкодомPDF417;
	
	ДатаПодписи	= ТекущаяДатаСеанса();
	
	СтруктураРеквизитовФормы.ЗаголовокПредставление = Метаданные.Отчеты[Сред(Лев(ЭтаФорма.ИмяФормы, СтрНайти(
		ЭтаФорма.ИмяФормы, ".Форма.") - 1), 7)].ОсновнаяФорма.Синоним;

	ПорядкиОкругленияОтчетности = Новый Структура;
	ПорядкиОкругленияОтчетности.Вставить("ПеречислениеПорядкиОкругленияОтчетностиОкр1",       Перечисления.ПорядкиОкругленияОтчетности.Окр1);
	ПорядкиОкругленияОтчетности.Вставить("ПеречислениеПорядкиОкругленияОтчетностиОкр1000",    Перечисления.ПорядкиОкругленияОтчетности.Окр1000);
	ПорядкиОкругленияОтчетности.Вставить("ПеречислениеПорядкиОкругленияОтчетностиОкр1000000", Перечисления.ПорядкиОкругленияОтчетности.Окр1000000);
	
	СоответствиеЕдиницыИзмеренияДелителю = Новый Структура;
	СоответствиеЕдиницыИзмеренияДелителю.Вставить("Окр1", 1);
	СоответствиеЕдиницыИзмеренияДелителю.Вставить("Окр1000", 1000);
	СоответствиеЕдиницыИзмеренияДелителю.Вставить("Окр1000000", 1000000);
	
	СтруктураРеквизитовФормы.СписокКодовПериодаОтчета = Новый СписокЗначений;
	
	Инициализация(Параметры.БезОткрытияФормы);
	
КонецПроцедуры

&НаСервере
Процедура СформироватьСтруктуруРеквизитовФормы()
	
	СтруктураРеквизитовФормы = Новый Структура;
	СтруктураРеквизитовФормы.Вставить("Организация");
	СтруктураРеквизитовФормы.Вставить("ЕдиницаИзмерения");
	СтруктураРеквизитовФормы.Вставить("ТочностьЕдиницыИзмерения");
	СтруктураРеквизитовФормы.Вставить("ВариантыФорматовВыгрузки");
	СтруктураРеквизитовФормы.Вставить("ВидДокумента");
	СтруктураРеквизитовФормы.Вставить("мАвтоВыборКодов");
	СтруктураРеквизитовФормы.Вставить("мБезОткрытияФормы");
	СтруктураРеквизитовФормы.Вставить("мВариант");
	СтруктураРеквизитовФормы.Вставить("мВерсияФормы");
	СтруктураРеквизитовФормы.Вставить("мВыбраннаяФорма");
	СтруктураРеквизитовФормы.Вставить("мДатаКонцаПериодаОтчета");
	СтруктураРеквизитовФормы.Вставить("мДатаНачалаПериодаОтчета");
	СтруктураРеквизитовФормы.Вставить("мИсключитьЗапускРасчета");
	СтруктураРеквизитовФормы.Вставить("мЗаписываетсяНовыйДокумент");
	СтруктураРеквизитовФормы.Вставить("мЗаписьЗапрещена");
	СтруктураРеквизитовФормы.Вставить("мИдГруппы1");
	СтруктураРеквизитовФормы.Вставить("мИдГруппы2");
	СтруктураРеквизитовФормы.Вставить("мИдГруппы3");
	СтруктураРеквизитовФормы.Вставить("мИдГруппы4");
	СтруктураРеквизитовФормы.Вставить("мИдГруппы5");
	СтруктураРеквизитовФормы.Вставить("мТелОрганизации");
	СтруктураРеквизитовФормы.Вставить("мКодОтчета");
	СтруктураРеквизитовФормы.Вставить("мВПрограммеИзмененаОрганизация");
	СтруктураРеквизитовФормы.Вставить("мОписаниеТиповЧислоЕ");
	СтруктураРеквизитовФормы.Вставить("мОписаниеТиповБулево");
	СтруктураРеквизитовФормы.Вставить("СписокКодовПериодаОтчета");
	// Хранят сведения об организации
	СтруктураРеквизитовФормы.Вставить("мОргТип");
	СтруктураРеквизитовФормы.Вставить("мОргКодИМНС");
	СтруктураРеквизитовФормы.Вставить("мОргКодОКАТО");
	СтруктураРеквизитовФормы.Вставить("мОргОГРН");
	СтруктураРеквизитовФормы.Вставить("ПеречисленияЮрФизЛицо", Истина);
	// Переменные содержащие ИНН и КПП текущей организации
	СтруктураРеквизитовФормы.Вставить("мИННЮЛ");
	СтруктураРеквизитовФормы.Вставить("мКППЮЛ");
	// Хранят сведения о должностных лицах
	СтруктураРеквизитовФормы.Вставить("мИННДиректор");
	СтруктураРеквизитовФормы.Вставить("мИННБухгалтер");
	СтруктураРеквизитовФормы.Вставить("мИННФизЛицо");
	СтруктураРеквизитовФормы.Вставить("мИННУпПред");
	СтруктураРеквизитовФормы.Вставить("мПустойОбразЛистаФЛ");
	// Раздел1_1
	СтруктураРеквизитовФормы.Вставить("мКодОКАТО1");
	СтруктураРеквизитовФормы.Вставить("мКБКвФБ_1_1");
	СтруктураРеквизитовФормы.Вставить("мКБКвФБ_1_2");
	СтруктураРеквизитовФормы.Вставить("мКБКвФБ_1_3");
	СтруктураРеквизитовФормы.Вставить("мСуммаНалога1_1");
	СтруктураРеквизитовФормы.Вставить("мСуммаНалУм1_1");
	СтруктураРеквизитовФормы.Вставить("мСуммаПерех1_1");
	СтруктураРеквизитовФормы.Вставить("мСуммаНалога1_2");
	СтруктураРеквизитовФормы.Вставить("мСуммаНалУм1_2");
	СтруктураРеквизитовФормы.Вставить("мСуммаПерех1_2");
	СтруктураРеквизитовФормы.Вставить("мСуммаНалога1_3");
	СтруктураРеквизитовФормы.Вставить("мСуммаНалУм1_3");
	СтруктураРеквизитовФормы.Вставить("мСуммаПерех1_3");
	// Раздел1_2
	СтруктураРеквизитовФормы.Вставить("мКБКРаздел12");
	СтруктураРеквизитовФормы.Вставить("мКодОКАТОРаздел12");
	СтруктураРеквизитовФормы.Вставить("мСуммаДоплФедРаздел12");
	СтруктураРеквизитовФормы.Вставить("мСуммаУменФедРаздел12");
	// Раздел1_3
	СтруктураРеквизитовФормы.Вставить("мКБКРаздел13");
	СтруктураРеквизитовФормы.Вставить("мКодОКАТОРаздел13");
	СтруктураРеквизитовФормы.Вставить("мСуммаДоплФедРаздел13");
	СтруктураРеквизитовФормы.Вставить("мСуммаУменФедРаздел13");
	// Раздел2
	СтруктураРеквизитовФормы.Вставить("мКодСтраныСоглРаздел2");
	СтруктураРеквизитовФормы.Вставить("мКодСтраныРаздел2");
	СтруктураРеквизитовФормы.Вставить("мИННРО1Раздел2");
	СтруктураРеквизитовФормы.Вставить("мКППРО1Раздел2");
	СтруктураРеквизитовФормы.Вставить("мИННРО2Раздел2");
	СтруктураРеквизитовФормы.Вставить("мКППРО2Раздел2");
	// Раздел7
	СтруктураРеквизитовФормы.Вставить("мСтавкаРаздел7");
	// Раздел10
	СтруктураРеквизитовФормы.Вставить("мКолОтдРаздел10");
	СтруктураРеквизитовФормы.Вставить("мНалФБРаздел10");
	СтруктураРеквизитовФормы.Вставить("мНалМБРаздел10");
	//
	СтруктураРеквизитовФормы.Вставить("КНД");
	СтруктураРеквизитовФормы.Вставить("НаименованиеОтчетаДляВыгрузки");
	СтруктураРеквизитовФормы.Вставить("ОбязРазделов");
	//
	СтруктураРеквизитовФормы.Вставить("мФизЛицИнд");
	СтруктураРеквизитовФормы.Вставить("мДатаДок");
	СтруктураРеквизитовФормы.Вставить("мДатаРожд");
	//
	СтруктураРеквизитовФормы.Вставить("мПериодичность");
	СтруктураРеквизитовФормы.Вставить("мПечатаемыеРазделы");
	СтруктураРеквизитовФормы.Вставить("мПечатныеФормы");
	СтруктураРеквизитовФормы.Вставить("мПечатьБезШтрихкодаРазрешена");
	СтруктураРеквизитовФормы.Вставить("мДокументВосстановлен");
	СтруктураРеквизитовФормы.Вставить("мРежимПечати");
	СтруктураРеквизитовФормы.Вставить("мСкопированаФорма");
	СтруктураРеквизитовФормы.Вставить("мСоставПоказателей");
	СтруктураРеквизитовФормы.Вставить("мСохраненныйДок");
	СтруктураРеквизитовФормы.Вставить("мСтрокаФормата");
	СтруктураРеквизитовФормы.Вставить("мСчетчикСтраниц");
	СтруктураРеквизитовФормы.Вставить("НаимОрганизации");
	СтруктураРеквизитовФормы.Вставить("НаимИнОрг");
	СтруктураРеквизитовФормы.Вставить("ФлажокОтклАвтоРасчет", Ложь);
	СтруктураРеквизитовФормы.Вставить("ЦветЗаполняетсяАвтоАрифметика");
	СтруктураРеквизитовФормы.Вставить("мПолноеИмяФайлаВнешнейОбработки");
	СтруктураРеквизитовФормы.Вставить("СписокПечатаемыхЛистов");
	СтруктураРеквизитовФормы.Вставить("СтрПериодОтчета");
	СтруктураРеквизитовФормы.Вставить("ВыводитьСтраницуВТаблДокНаСервере");
	СтруктураРеквизитовФормы.Вставить("НаимТекущегоРаздела");
	СтруктураРеквизитовФормы.Вставить("НомерТекущейСтраницы");
	СтруктураРеквизитовФормы.Вставить("МногострочныеИсключения");
	СтруктураРеквизитовФормы.Вставить("ПеречислениеПериодичностьМесяц");
	СтруктураРеквизитовФормы.Вставить("ЗаголовокПредставление");
	СтруктураРеквизитовФормы.Вставить("СправочникиВидыКонтактнойИнформацииФактАдресОрганизации");
	СтруктураРеквизитовФормы.Вставить("НужноРассчитатьОтчетНаСервере", Ложь);
	СтруктураРеквизитовФормы.Вставить("ТекущаяСтрокаРазделовОтчета");
	СтруктураРеквизитовФормы.Вставить("ДоступенМеханизмПечатиРеглОтчетностиСДвухмернымШтрихкодомPDF417");
	СтруктураРеквизитовФормы.Вставить("ТекстДляЗаголовочнойЧасти");
	СтруктураРеквизитовФормы.Вставить("мПроверятьСоотношенияПриПечатиИВыгрузки");
	
КонецПроцедуры

&НаСервере
Процедура ИнициализацияМногостраничныхРазделов(ПропуститьФизЛица = Ложь)
	
	Если НЕ ПропуститьФизЛица Тогда
		
		СтрПерваяСтраница = ЭтаФорма.ТаблицаСтраницыФизЛица.Добавить();
		СтрПерваяСтраница.Представление               = "Новая страница";
		СтрПерваяСтраница.АктивнаяСтраница            = Истина;
		СтрПерваяСтраница.АвтоматическоеПредставление = Истина;
		
	КонецЕсли;
	
	СтрПерваяСтраница = ЭтаФорма.ТаблицаСтраницыРаздел5.Добавить();
	СтрПерваяСтраница.Представление               = "Новая страница";
	СтрПерваяСтраница.АктивнаяСтраница            = Истина;
	СтрПерваяСтраница.АвтоматическоеПредставление = Истина;
	
	СтрПерваяСтраница = ЭтаФорма.ТаблицаСтраницыРаздел6.Добавить();
	СтрПерваяСтраница.Представление               = "Новая страница";
	СтрПерваяСтраница.АктивнаяСтраница            = Истина;
	СтрПерваяСтраница.АвтоматическоеПредставление = Истина;
	
	СтрПерваяСтраница = ЭтаФорма.ТаблицаСтраницыРаздел7.Добавить();
	СтрПерваяСтраница.Представление               = "Новая страница";
	СтрПерваяСтраница.АктивнаяСтраница            = Истина;
	СтрПерваяСтраница.АвтоматическоеПредставление = Истина;
	
	СтрПерваяСтраница = ЭтаФорма.ТаблицаСтраницыРаздел10.Добавить();
	СтрПерваяСтраница.Представление               = "Новая страница";
	СтрПерваяСтраница.АктивнаяСтраница            = Истина;
	СтрПерваяСтраница.АвтоматическоеПредставление = Истина;
	
	СтрПерваяСтраница = ЭтаФорма.ТаблицаСтраницыРаздел11.Добавить();
	СтрПерваяСтраница.Представление               = "Новая страница";
	СтрПерваяСтраница.АктивнаяСтраница            = Истина;
	СтрПерваяСтраница.АвтоматическоеПредставление = Истина;
	
	СтрПерваяСтраница = ЭтаФорма.ТаблицаСтраницыРаздел11_Прил1.Добавить();
	СтрПерваяСтраница.Представление               = "Новая страница";
	СтрПерваяСтраница.АктивнаяСтраница            = Истина;
	СтрПерваяСтраница.АвтоматическоеПредставление = Истина;
	
	СтрПерваяСтраница = ЭтаФорма.ТаблицаСтраницыРаздел11_Прил2.Добавить();
	СтрПерваяСтраница.Представление               = "Новая страница";
	СтрПерваяСтраница.АктивнаяСтраница            = Истина;
	СтрПерваяСтраница.АвтоматическоеПредставление = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтруктуруЗависимыхЯчеекДляАвторасчета()
	
	СтруктураЗависимыхЯчеекДляАвторасчета = Новый Структура;
	
КонецПроцедуры

&НаСервере
Процедура ПоследовательноеЗаполнениеЛистовДеклРасчет(РасчетныйЛист = "")
	// Запускаем НовуюФункциюРасчет листов в обратном порядке 
	// с указанием, какой лист необходимо рассчитать
	// анализируя, какой с кем связан
	// можно пере перебирать в закомментированном цикле, но прямой
	// обратной зависимости по последовательности нет
	// первый расчетный лист предполагается текущий лист, чтобы его сохранить
	// должен быть расчетан, в цикле повторится в расчете, это будет правильно
	// т.к. можеж содержать двойную связь.

	// 14.05.2005 + к написанному выше
	// В мДеревоВыбранныхСтраниц добавлен показатель ПорядокЗаполнения и 
	// перебор ведется последовательно до расчетного листа. Если он не указан,
	// то пересчитываются все листы. Для этого используется отсортированная
	// по этому показателю таблица ТаблицаПорядкаЗаполения.
	
	Если ТипЗнч(мДеревоВыбранныхСтраниц) <> Тип("ДанныеФормыДерево") Тогда
		Возврат;
	КонецЕсли;

	ТаблицаПорядкаЗаполения = Новый("ТаблицаЗначений");
	ТаблицаПорядкаЗаполения.Колонки.Добавить("ПорядокЗаполнения");
	ТаблицаПорядкаЗаполения.Колонки.Добавить("ИмяСтраницы");
	
	ДеревоВыбранныхСтраниц = мДеревоВыбранныхСтраниц.ПолучитьЭлементы();
	
	ПереборЗнач = ДеревоВыбранныхСтраниц.Количество();
	Пока ПереборЗнач > 0 Цикл
		ВыгрузитьСтраницу = ДеревоВыбранныхСтраниц[ПереборЗнач-1].ВыгрузитьСтраницу;
		ВыводНаПечать     = ДеревоВыбранныхСтраниц[ПереборЗнач-1].ВыводНаПечать;
		Если (ВыгрузитьСтраницу = 1) ИЛИ (ВыводНаПечать = 1) Тогда
			НоваяСтрока = ТаблицаПорядкаЗаполения.Добавить();
			НоваяСтрока.ПорядокЗаполнения = ДеревоВыбранныхСтраниц[ПереборЗнач-1].ПорядокЗаполнения;
			НоваяСтрока.ИмяСтраницы       = ДеревоВыбранныхСтраниц[ПереборЗнач-1].ИмяСтраницы;
		КонецЕсли;
		ПереборЗнач = ПереборЗнач-1;
	КонецЦикла;
	
	ТаблицаПорядкаЗаполения.Сортировать("ПорядокЗаполнения");
	
	Если РасчетныйЛист <> "" Тогда
		Если РазделБудетПечататься(РасчетныйЛист) Тогда
			РасчетНаСервере(РасчетныйЛист);
		КонецЕсли;
		ПереборДо = ТаблицаПорядкаЗаполения.Индекс(ТаблицаПорядкаЗаполения.Найти(РасчетныйЛист,"ИмяСтраницы")) + 1;
	Иначе
		ПереборДо = ТаблицаПорядкаЗаполения.Количество(); 
	КонецЕсли;
	
	ПереборЗнач = 0;
	
	Пока ПереборЗнач < ПереборДо Цикл
		ИмяДляРасчета = ТаблицаПорядкаЗаполения.Получить(ПереборЗнач).ИмяСтраницы;
		РасчетНаСервере(ИмяДляРасчета);
		ПереборЗнач = ПереборЗнач+1;
	КонецЦикла;
	
	Модифицированность = Истина;

КонецПроцедуры

&НаСервере
Функция РазделБудетПечататься (ИмяСтраницы)

	Результат = Ложь;

	Если ТипЗнч(мДеревоВыбранныхСтраниц) <> Тип("ДанныеФормыДерево") Тогда
		Возврат Результат;
	КонецЕсли;

	Для Каждого СтрокаУровня1 Из мДеревоВыбранныхСтраниц.ПолучитьЭлементы() Цикл
		Если ИмяСтраницы = СтрокаУровня1.ИмяСтраницы Тогда
			Результат = ?(СтрокаУровня1.ВыводНаПечать=1, Истина, Ложь);
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Возврат Результат;

КонецФункции

&НаСервере
Функция СформироватьПустройФизЛицЛист()
	
	СтруктураДанныхПоля = Новый Структура;

	СтруктураДанныхПоля.Вставить("ФизЛицГород", "");
	СтруктураДанныхПоля.Вставить("ФизЛицГражданство", "");
	СтруктураДанныхПоля.Вставить("ФизЛицДатаР", "");
	СтруктураДанныхПоля.Вставить("ФизЛицДок","");
	СтруктураДанныхПоля.Вставить("ФизЛицДокВид","");
	СтруктураДанныхПоля.Вставить("ФизЛицДокВыдан","");
	СтруктураДанныхПоля.Вставить("ФизЛицДокДата","");
	СтруктураДанныхПоля.Вставить("ФизЛицДокСерияНомер","");
	СтруктураДанныхПоля.Вставить("ФизЛицДом","");
	СтруктураДанныхПоля.Вставить("ФизЛицДомТел","");
	СтруктураДанныхПоля.Вставить("ФизЛицИнд","");
	СтруктураДанныхПоля.Вставить("ФизЛицИноАдрес","");
	СтруктураДанныхПоля.Вставить("ФизЛицКвартира","");
	СтруктураДанныхПоля.Вставить("ФизЛицКодГражд","");
	СтруктураДанныхПоля.Вставить("ФизЛицКорпус","");
	СтруктураДанныхПоля.Вставить("ФизЛицМестоР", "");
	СтруктураДанныхПоля.Вставить("ФизЛицНП","");
	СтруктураДанныхПоля.Вставить("ФизЛицоФИО","");
	СтруктураДанныхПоля.Вставить("ФизЛицПолЖ","");
	СтруктураДанныхПоля.Вставить("ФизЛицПолМ","");
	СтруктураДанныхПоля.Вставить("ФизЛицРайон","");
	СтруктураДанныхПоля.Вставить("ФизЛицС","");
	СтруктураДанныхПоля.Вставить("ФизЛицСлТел","");
	СтруктураДанныхПоля.Вставить("ФизЛицСубъект","");
	СтруктураДанныхПоля.Вставить("ФизЛицУлица","");

	Возврат СтруктураДанныхПоля;
	
КонецФункции

&НаСервере
Процедура Инициализация(БезОткрытияФормы = Ложь) Экспорт
	
	Перем ИсходноеКоличествоСтрокГруппы;
	
	СтруктураРеквизитовФормы.мИсключитьЗапускРасчета = Ложь;
	
	СтруктураРеквизитовФормы.мБезОткрытияФормы = БезОткрытияФормы;
	
	ЗаполнитьСтруктуруЗависимыхЯчеекДляАвторасчета();
	
	ЗаполнитьНачальныеНастройки();
	
	ФормироватьСтруктуруСтраницОтчета();
	
	ФормироватьСтруктуруСвойствСтраниц();
	
	СформироватьДеревоРазделовОтчетаНаСервере();
	
	СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация = Ложь;
	
	СтруктураРеквизитовФормы.ВидДокумента = 0;
	НомерКорректировки = 1;
	
	СтруктураРеквизитовФормы.мАвтоВыборКодов = Ложь;
	СтруктураРеквизитовФормы.мДокументВосстановлен = Ложь;
	СтруктураРеквизитовФормы.мРежимПечати = Ложь;
	
	// Инициализируем все переменные хранящиеся в квадратных значениях
	ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставления();
		
	НачальныеОперацииСМногострочнымиБлоками();
	
	ЗаполнитьПустыеСтруктурыДанных();
	
	СтруктураРеквизитовФормы.мПустойОбразЛистаФЛ = СформироватьПустройФизЛицЛист();
	
	Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
			
		Если СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено Тогда // документ скопирован
			
			ВосстановитьСохраненныеДанные();
			
		Иначе // новый документ
			
			Если НЕ СтруктураРеквизитовФормы.мБезОткрытияФормы Тогда
				// Для нового док-та установим возведенный флаг проверки соотношений.
				СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки = Ложь;
			КонецЕсли;
			
			СтруктураРеквизитовФормы.ЕдиницаИзмерения         = Перечисления.ПорядкиОкругленияОтчетности.Окр1;
			СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = 0;
			ТабличныйДокумент.Области["ВидДок"].Значение = 1;
			
			ОтобразитьНомерКорректировки(ЭтаФорма);
			
			ЗаполнитьПоказателиПериодаВНовомЭкземпляреОтчета();
			
			КопироватьДанныеФормы(мДеревоСтраницОтчета, мДеревоВыбранныхСтраниц);
			
			ДатаКонцаСледующегоКвартала = КонецКвартала(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) + 1;
			НомерКварталаСтр = Формат(ДатаКонцаСледующегоКвартала, "ДФ=к");
			
		КонецЕсли;
		
		ЗаполнитьДатуПодписи(ЭтаФорма);
		
		Модифицированность = Истина;
		
	Иначе
		
		ВосстановитьСохраненныеДанные();
		ЗаполнитьПустыеСтруктурыДанных();
		
		Если ЗначениеЗаполнено(СтруктураРеквизитовФормы.мСкопированаФорма) Тогда
			
			Если СтруктураРеквизитовФормы.мПериодичность <> СтруктураРеквизитовФормы.мСохраненныйДок.Периодичность
				ИЛИ (СтруктураРеквизитовФормы.мПериодичность = Перечисления.Периодичность.Квартал
				И Месяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета)
				<> Месяц(СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания)) Тогда
				ЗаполнитьПоказателиПериодаВНовомЭкземпляреОтчета();
			КонецЕсли;
			
			СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено;
			Модифицированность = Истина;
		КонецЕсли;
		
		Если НЕ БезОткрытияФормы
           И НЕ СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
				   
        	ЗаблокироватьДанныеДляРедактирования(СтруктураРеквизитовФормы.мСохраненныйДок, , ЭтаФорма.УникальныйИдентификатор);

        КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ БезОткрытияФормы Тогда
		// Получаем список налоговых, кодов КБК и КБК 2005	
		ЗагрузитьПоказателиИзМакета("КодыКБК");
		ЗагрузитьПоказателиИзМакета("КодыКБК2005");
		ЗагрузитьПоказателиИзМакета("КодыКБК2006");
		
		ИмяСекции_КБК_Раздел1_2 = "КодыКБК2017Раздел1_2";
		Если ДатаПодписи < '20170101'
	       И ЗначениеЗаполнено(ДатаПодписи) Тогда
			ИмяСекции_КБК_Раздел1_2 = "КодыКБК2005Раздел1_2";
		КонецЕсли;
		ЗагрузитьПоказателиИзМакета(ИмяСекции_КБК_Раздел1_2);
		
		ЗагрузитьПоказателиИзМакета("КодыКБК2005Раздел1_3");
		ЗагрузитьПоказателиИзМакета("ВидыДеятельности");
	КонецЕсли;
	
	СформироватьСписокКодовПериодов();
	
	ПоказатьПериод();
	
	СохрЗначВКвадратиках(ЭтаФорма);

	Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено ИЛИ СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация Тогда
		
		ЗаполнитьСведенияОбОрганизацииНаСервере();
		
	КонецЕсли;
	
	ПолучитьИННКПП();
	
	Если НЕ БезОткрытияФормы Тогда
		РегламентированнаяОтчетностьКлиентСервер.ПоказатьКнопкиПечати(ЭтаФорма);
	КонецЕсли;

	СтруктураРеквизитовФормы.НаимОрганизации = СтруктураРеквизитовФормы.Организация.Наименование;
	СформироватьДеревоРазделовОтчетаНаСервере();
	
	СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
	НомерКорректировки = НомерКорректировки * СтруктураРеквизитовФормы.ВидДокумента;
	ТабличныйДокумент.Области.НомКоррект.Значение = НомерКорректировки;
	ТабличныйДокумент.Области.ДатаПодписи.Значение = ДатаПодписи;
	ТабличныйДокумент.Области.ВидДок.Значение = ?(НомерКорректировки = 0, "1", "3");
	мСкопированаФорма = Неопределено;
	Параметры.Свойство("мСкопированаФорма", мСкопированаФорма);
	Если ЗначениеЗаполнено(мСкопированаФорма) Тогда 
		Модифицированность = Истина;
	КонецЕсли;
	
	РегламентированнаяОтчетность.ДобавитьКнопкуПрисоединенныеФайлы(ЭтаФорма);
	
	РегламентированнаяОтчетностьКлиентСервер.ПриИнициализацииФормыРегламентированногоОтчета(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоказателиПериодаВНовомЭкземпляреОтчета()
	
	НомерМесяца   = Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ=М");
	НомерКвартала = Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ=к");
	НомерГода     = Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ=гггг");
	
	Если НомерМесяца = "12" Тогда
		НомерМесяца = "0";
	КонецЕсли;
	
	Если СтруктураРеквизитовФормы.мПериодичность = СтруктураРеквизитовФормы.ПеречислениеПериодичностьМесяц Тогда
		ТабличныйДокумент.Области.НалогПериод.Значение = "1";
		ТабличныйДокумент.Области.НомКвартал.Значение = Формат(Число(?(НомерМесяца="0","12",НомерМесяца)), "ЧЦ=2; ЧВН=");
	Иначе
		Если НомерКвартала = "4" Тогда
			ТабличныйДокумент.Области.НалогПериод.Значение = "0";
		ИначеЕсли НомерКвартала = "3" Тогда
			ТабличныйДокумент.Области.НалогПериод.Значение = "9";
		ИначеЕсли НомерКвартала = "2" Тогда
			ТабличныйДокумент.Области.НалогПериод.Значение = "6";
		ИначеЕсли НомерКвартала = "1" Тогда
			ТабличныйДокумент.Области.НалогПериод.Значение = "3";
		КонецЕсли;
		ТабличныйДокумент.Области.НомКвартал.Значение = "0" + НомерКвартала;
	КонецЕсли;
	
	ТабличныйДокумент.Области.ОтчетГод.Значение = НомерГода;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьСписокКодовПериодов()
	
	СтруктураРеквизитовФормы.СписокКодовПериодаОтчета.Очистить();
	
	Если СтруктураРеквизитовФормы.мПериодичность = Перечисления.Периодичность.Месяц Тогда
		СтруктураРеквизитовФормы.СписокКодовПериодаОтчета.Добавить("1", "1 - за месяц");
	Иначе
		НомерКвартала = Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ=к");
		
		Если НомерКвартала = "4" Тогда
			СтруктураРеквизитовФормы.СписокКодовПериодаОтчета.Добавить("0", "0 - за год");
		ИначеЕсли НомерКвартала = "3" Тогда
			СтруктураРеквизитовФормы.СписокКодовПериодаОтчета.Добавить("9", "9 - за 9 месяцев");
		ИначеЕсли НомерКвартала = "2" Тогда
			СтруктураРеквизитовФормы.СписокКодовПериодаОтчета.Добавить("6", "6 - за полугодие");
		ИначеЕсли НомерКвартала = "1" Тогда
			СтруктураРеквизитовФормы.СписокКодовПериодаОтчета.Добавить("3", "3 - квартально");
		КонецЕсли;
		
	КонецЕсли;
	СтруктураРеквизитовФормы.СписокКодовПериодаОтчета.Добавить("2", "2 - иное");
	
КонецПроцедуры

&НаСервере
Процедура НачальныеОперацииСМногострочнымиБлоками()
	
	Перем ИсходноеКоличествоСтрокГруппы;

	// создаем исходную структуру многострочных разделов
	Для Каждого ЭлементСтруктуры Из мСтруктураМногострочныхРазделов Цикл
		ИмяГруппы = ЭлементСтруктуры.Ключ;
		СтруктураГруппы = ЭтаФорма[ЭлементСтруктуры.Значение];
		
		мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);

		Для НСтр = 1 По ИсходноеКоличествоСтрокГруппы Цикл

			СтруктураГруппы.Добавить();
		
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНачальныеНастройки()
		
	МакетСоставаПоказателей = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(СтруктураРеквизитовФормы.мСоставПоказателей);

	МассивТиповТаблицаЗначений = Новый Массив; 
	МассивТиповТаблицаЗначений.Добавить(Тип("ТаблицаЗначений"));
	ОписаниеТиповТаблицаЗначений = Новый ОписаниеТипов(МассивТиповТаблицаЗначений);
	
	Для Инд = 0 По МакетСоставаПоказателей.Области.Количество() - 1 Цикл
				
		ТекОбласть    = МакетСоставаПоказателей.Области[Инд];
		ИмяСтраницы   = ТекОбласть.Имя;
				
		ЭтаФорма["ТаблицаВариантыЗаполнения" + ИмяСтраницы].Добавить();
		
		// Таблица значений содержит информацию о вариантах заполнения показателя отчета.
		// В колонках таблицы значений отображается следующая информация:
		//   - имя ячейки (код показателя);
		//   - вариант заполнения ячейки;
		//   - вычисленное по данным ИБ значение ячейки;
		//   - величина автокорректировки значения ячейки;
		//   - примечание к ячейке.
		//
				
		Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
			// перебираем строки макета
			
			// Код показателя (по составу показателей) определяется по первой колонке макета
			КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
			ИмяПоказателя = КодПоказателя;

			Если КодПоказателя = "===" Тогда         // признак конечной строки
				Прервать;
			КонецЕсли;

			Если Лев(КодПоказателя, 2) = "//" Тогда  // пропускаем комментарии
				Продолжить;
			КонецЕсли;

			// код показателя по форме отчете (имя ячейки в полях табличного документа формы)
			КодПоказателяПоФорме = СокрЛП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
			// признак многострочности определяется по третьей колонке макета
			ПризнМногострочность = СокрЛП(МакетСоставаПоказателей.Область(Ном, 3).Текст);
			// по четвертой колонке определяется тип данных реквизита
			ТипДанныхРеквизита   = СокрЛП(МакетСоставаПоказателей.Область(Ном, 4).Текст);
			// по колонке 5 определяется исходное количество строк многострочного раздела
			стрКолСтрокИсходный  = СокрЛП(МакетСоставаПоказателей.Область(Ном, 5).Текст);
			// вариант заполнения ячейки определяется по колонке 6 макета
			стрВариантЗаполнения = РегламентированнаяОтчетность.ПолучитьВариантЗаполненияПоказателяРегОтчета(МакетСоставаПоказателей, Ном);
			// код показателя из структуры, берется из колонки 9
			КодПоказателяПоСтруктуре = СокрЛП(МакетСоставаПоказателей.Область(Ном, 9).Текст);

			чКолСтрокИсходный    = ? (ПустаяСтрока(стрКолСтрокИсходный),  0, Число(стрКолСтрокИсходный));
			чВариантЗаполнения   = ? (ПустаяСтрока(стрВариантЗаполнения), 0, Число(стрВариантЗаполнения));

			// формируем таблицу значений, содержащей состав показателей отчета
			НоваяСтрока = мТаблицаСоставПоказателей.Добавить();
			НоваяСтрока.ИмяПоляТаблДокумента   = ИмяСтраницы;
			НоваяСтрока.КодПоказателяПоСоставу = КодПоказателя;
			НоваяСтрока.КодПоказателяПоФорме   = КодПоказателяПоФорме;
			НоваяСтрока.ПризнМногострочности   = ПризнМногострочность;
			НоваяСтрока.ТипДанныхПоказателя    = ТипДанныхРеквизита;
			НоваяСтрока.КодПоказателяПоСтруктуре = КодПоказателяпоСтруктуре;

			Если чВариантЗаполнения <> 0 Тогда
				// Если в колонке 6 задан вариант заполнения показателя, 
				// то его значение может определяться по данным ИБ.
				// Дополняем таблицу значений вариантов заполнения
				НоваяСтрока = ЭтаФорма["ТаблицаВариантыЗаполнения" + ИмяСтраницы][0].ТаблицаВариантовЗаполнения.Добавить();
				НоваяСтрока.КодПоказателя      = ? (Не ПустаяСтрока(КодПоказателяПоФорме), КодПоказателяПоФорме, КодПоказателя);
				НоваяСтрока.ВариантЗаполнения  = чВариантЗаполнения;
				НоваяСтрока.КодПоказателяПоСтруктуре  = КодПоказателяПоСтруктуре;
			КонецЕсли;

		КонецЦикла;

		Если ЭтаФорма["ТаблицаВариантыЗаполнения" + ИмяСтраницы][0].ТаблицаВариантовЗаполнения.Количество() > 0 Тогда
			// имеются автоматически заполняемые ячейки
			// Создаем структуру, содержащей варианты заполнения показателей отчета.
			//
			// В качестве ключа используется имя страницы основной панели формы, содержащей
			//   табличный документ с автоматически заполняемыми показателями.
			// В качестве значения принимаем Массив из таблицы значений - вариантов заполнения
			//   показателей по каждой странице многостраничного раздела.
			//
			мСтруктураВариантыЗаполнения.Вставить(ИмяСтраницы, ИмяСтраницы);
			мСтруктураВариантыЗаполненияЭталон.Вставить(ИмяСтраницы, ИмяСтраницы);
			
		Конецесли;

	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ФормироватьСтруктуруСтраницОтчета() 

	// Дерево содержит коллекцию страниц отчета.
	// В колонках дерева хранятся следующие данные:
	//    - представление листа;
	//    - имя страницы основной панели формы, содержащей выводимый на печать лист;
	//    - имя поля табличного документа;
	//    - имя области ячеек табличного документа (используется в случае вывода
	//      на печать отдельных страниц титульного листа);
	//    - ориентация страницы при печати;
	//    - число, метка вывода страницы на печать;
	//    - число, метка показа страницы на основной панели формы;
	//    - число, метка выгрузки данных страницы в ИМНС.
	//
	
	мДеревоСтраницОтчета.ПолучитьЭлементы().Очистить();

	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Титульный";
	СтрокаУровня1.Представление            = "Титульный лист";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	СтрокаУровня1.ПорядокЗаполнения        = 1;

	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "ФизЛица";
	СтрокаУровня1.Представление            = "Сведения о"+Символы.ПС+"физ. лице";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	СтрокаУровня1.ПорядокЗаполнения        = 2;

	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел1_1";
	СтрокаУровня1.Представление            = "Раздел 1.1";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	СтрокаУровня1.ПорядокЗаполнения        = 16;

	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел1_2";
	СтрокаУровня1.Представление            = "Раздел 1.2";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	СтрокаУровня1.ПорядокЗаполнения        = 17;

	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел1_3";
	СтрокаУровня1.Представление            = "Раздел 1.3";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	СтрокаУровня1.ПорядокЗаполнения        = 18;

	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел2";
	СтрокаУровня1.Представление            = "Раздел 2";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	СтрокаУровня1.ПорядокЗаполнения        = 3;

	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел3";
	СтрокаУровня1.Представление            = "Раздел 3";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	СтрокаУровня1.ПорядокЗаполнения        = 4;

	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел4";
	СтрокаУровня1.Представление            = "Раздел 4";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	СтрокаУровня1.ПорядокЗаполнения        = 5;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел5";
	СтрокаУровня1.Представление            = "Раздел 5";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	СтрокаУровня1.ПорядокЗаполнения        = 7;

	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел6";
	СтрокаУровня1.Представление            = "Раздел 6";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	СтрокаУровня1.ПорядокЗаполнения        = 6;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел7";
	СтрокаУровня1.Представление            = "Раздел 7";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	СтрокаУровня1.ПорядокЗаполнения        = 8;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел8";
	СтрокаУровня1.Представление            = "Раздел 8";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	СтрокаУровня1.ПорядокЗаполнения        = 11;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел9";
	СтрокаУровня1.Представление            = "Раздел 9";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	СтрокаУровня1.ПорядокЗаполнения        = 12;

	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел10";
	СтрокаУровня1.Представление            = "Раздел 10";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	СтрокаУровня1.ПорядокЗаполнения        = 9;

	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел10_Прил1";
	СтрокаУровня1.Представление            = "Раздел 10"+Символы.ПС+"Прил.1";
	СтрокаУровня1.ОриентацияСтраницы       = "Ландшафт";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	СтрокаУровня1.ПорядокЗаполнения        = 10;

	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел11";
	СтрокаУровня1.Представление            = "Раздел 11";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	СтрокаУровня1.ПорядокЗаполнения        = 15;

	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел11_Прил1";
	СтрокаУровня1.Представление            = "Раздел 11"+Символы.ПС+"Прил.1";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	СтрокаУровня1.ПорядокЗаполнения        = 13;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел11_Прил2";
	СтрокаУровня1.Представление            = "Раздел 11"+Символы.ПС+"Прил.2";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	СтрокаУровня1.ПорядокЗаполнения        = 14;

КонецПроцедуры

&НаСервере
Процедура ФормироватьСтруктуруСвойствСтраниц() Экспорт
	
	мСвойстваРазделовДекларации.ПолучитьЭлементы().Очистить();

	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	// Добавим св-ва Титульного листа
	СтрокаУровня1.ИмяСтраницы                          = "Титульный";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.МаксКолвоЭкз                         = 0;
	СтрокаУровня1.ОчищатьРаздел                        = Ложь;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;

	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	// Добавим св-ва Титульного листа
	СтрокаУровня1.ИмяСтраницы                          = "ФизЛица";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Истина;
	СтрокаУровня1.МаксКолвоЭкз                         = 0;
	СтрокаУровня1.ОчищатьРаздел                        = Ложь;
	СтрокаУровня1.ИмяПредставления                     = "ФизЛицоФИО";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;

	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	// Добавим св-ва Раздела 1
	СтрокаУровня1.ИмяСтраницы                          = "Раздел1_1";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;         // Многостраничность
	СтрокаУровня1.МаксКолвоЭкз                         = 0;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";           // Для многостраничных разделов, имя представления страницы
	СтрокаУровня1.ПредставлениеДанных                  = Истина;       // Есть ли квадратики на листе
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;

	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	// Добавим св-ва Раздела 1_2
	СтрокаУровня1.ИмяСтраницы                          = "Раздел1_2";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;         // Многостраничность
	СтрокаУровня1.МаксКолвоЭкз                         = 0;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";           // Для многостраничных разделов, имя представления страницы
	СтрокаУровня1.ПредставлениеДанных                  = Истина;       // Есть ли квадратики на листе
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;

	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	// Добавим св-ва Раздела 1_3
	СтрокаУровня1.ИмяСтраницы                          = "Раздел1_3";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;         // Многостраничность
	СтрокаУровня1.МаксКолвоЭкз                         = 0;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";           // Для многостраничных разделов, имя представления страницы
	СтрокаУровня1.ПредставлениеДанных                  = Истина;       // Есть ли квадратики на листе
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;

	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	// Добавим св-ва Раздела 2
	СтрокаУровня1.ИмяСтраницы                          = "Раздел2";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Истина;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;         // Многостраничность
	СтрокаУровня1.МаксКолвоЭкз                         = 0;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";           // Для многостраничных разделов, имя представления страницы
	СтрокаУровня1.ПредставлениеДанных                  = Истина;       // Есть ли квадратики на листе
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	
	НовСтр = СтрокаУровня1.МногострочностьВРазделе.Добавить();
	НовСтр.ИдГруппы = СтруктураРеквизитовФормы.мИдГруппы1;
	НовСтр.Область = "МногострочнаяЧасть";
	НовСтр.ВысотаСтроки = 1;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	// Добавим св-ва Раздела 3
	СтрокаУровня1.ИмяСтраницы                          = "Раздел3";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;         // Многостраничность
	СтрокаУровня1.МаксКолвоЭкз                         = 0;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";           // Для многостраничных разделов, имя представления страницы
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;         // Есть ли квадратики на листе
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;

	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	// Добавим св-ва Раздела 4
	СтрокаУровня1.ИмяСтраницы                          = "Раздел4";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;         // Многостраничность
	СтрокаУровня1.МаксКолвоЭкз                         = 0;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";           // Для многостраничных разделов, имя представления страницы
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;         // Есть ли квадратики на листе
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;

	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	// Добавим св-ва Раздела 5
	СтрокаУровня1.ИмяСтраницы                          = "Раздел5";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Истина;
	СтрокаУровня1.МногостраничностьВРазделе            = Истина;       // Многостраничность
	СтрокаУровня1.МаксКолвоЭкз                         = 0;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "_нет";       // Для многостраничных разделов, имя представления страницы
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;         // Есть ли квадратики на листе
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	
	НовСтр = СтрокаУровня1.МногострочностьВРазделе.Добавить();
	НовСтр.ИдГруппы = СтруктураРеквизитовФормы.мИдГруппы2;
	НовСтр.Область = "МногострочнаяЧасть";
	НовСтр.ВысотаСтроки = 1;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	// Добавим св-ва Раздела 6
	СтрокаУровня1.ИмяСтраницы                          = "Раздел6";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Истина;
	СтрокаУровня1.МногостраничностьВРазделе            = Истина;       // Многостраничность
	СтрокаУровня1.МаксКолвоЭкз                         = 0;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "_нет";       // Для многостраничных разделов, имя представления страницы
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;         // Есть ли квадратики на листе
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;

	НовСтр = СтрокаУровня1.МногострочностьВРазделе.Добавить();
	НовСтр.ИдГруппы = СтруктураРеквизитовФормы.мИдГруппы3;
	НовСтр.Область = "МногострочнаяЧасть";
	НовСтр.ВысотаСтроки = 1;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	// Добавим св-ва Раздела 7
	СтрокаУровня1.ИмяСтраницы                          = "Раздел7";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Истина;
	СтрокаУровня1.МногостраничностьВРазделе            = Истина;       // Многостраничность
	СтрокаУровня1.МаксКолвоЭкз                         = 0;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "_нет";       // Для многостраничных разделов, имя представления страницы
	СтрокаУровня1.ПредставлениеДанных                  = Истина;       // Есть ли квадратики на листе
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;

	НовСтр = СтрокаУровня1.МногострочностьВРазделе.Добавить();
	НовСтр.ИдГруппы = СтруктураРеквизитовФормы.мИдГруппы4;
	НовСтр.Область = "МногострочнаяЧасть";
	НовСтр.ВысотаСтроки = 1;

	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	// Добавим св-ва Раздела 8
	СтрокаУровня1.ИмяСтраницы                          = "Раздел8";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;         // Многостраничность
	СтрокаУровня1.МаксКолвоЭкз                         = 0;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";           // Для многостраничных разделов, имя представления страницы
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;         // Есть ли квадратики на листе
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;

	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	// Добавим св-ва Раздела 9
	СтрокаУровня1.ИмяСтраницы                          = "Раздел9";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;         // Многостраничность
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";           // Для многостраничных разделов, имя представления страницы
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;         // Есть ли квадратики на листе
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;

	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	// Добавим св-ва Раздела 10
	СтрокаУровня1.ИмяСтраницы                          = "Раздел10";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Истина;         // Многостраничность
	СтрокаУровня1.МаксКолвоЭкз                         = 0;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "П000100004004";// Для многостраничных разделов, имя представления страницы
	СтрокаУровня1.ПредставлениеДанных                  = Истина;         // Есть ли квадратики на листе
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;

	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	// Добавим св-ва Раздела 10 Прил. 1
	СтрокаУровня1.ИмяСтраницы                          = "Раздел10_Прил1";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Истина;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;         // Многостраничность
	СтрокаУровня1.МаксКолвоЭкз                         = 0;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";           // Для многостраничных разделов, имя представления страницы
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;         // Есть ли квадратики на листе
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;

	НовСтр = СтрокаУровня1.МногострочностьВРазделе.Добавить();
	НовСтр.ИдГруппы = СтруктураРеквизитовФормы.мИдГруппы5;
	НовСтр.Область = "МногострочнаяЧасть";
	НовСтр.ВысотаСтроки = 1;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	// Добавим св-ва Раздела 11
	СтрокаУровня1.ИмяСтраницы                          = "Раздел11";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Истина;         // Многостраничность
	СтрокаУровня1.МаксКолвоЭкз                         = 0;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "П000110001000";// Для многостраничных разделов, имя представления страницы
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;           // Есть ли квадратики на листе
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;

	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	// Добавим св-ва Раздела 11
	СтрокаУровня1.ИмяСтраницы                          = "Раздел11_Прил1";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Истина;         // Многостраничность
	СтрокаУровня1.МаксКолвоЭкз                         = 0;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "П000111001000";// Для многостраничных разделов, имя представления страницы
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;           // Есть ли квадратики на листе
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;

	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	// Добавим св-ва Раздела 11
	СтрокаУровня1.ИмяСтраницы                          = "Раздел11_Прил2";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Истина;         // Многостраничность
	СтрокаУровня1.МаксКолвоЭкз                         = 0;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "П000112001000";// Для многостраничных разделов, имя представления страницы
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;           // Есть ли квадратики на листе
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьДеревоРазделовОтчетаНаСервере() Экспорт
	
	СформироватьДеревоРазделовОтчета(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьДеревоРазделовОтчетаНаКлиенте() Экспорт
	
	СформироватьДеревоРазделовОтчета(ЭтаФорма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СформироватьДеревоРазделовОтчета(Форма)
	
	Форма["РазделыОтчета"].ПолучитьЭлементы().Очистить();
	
	Для Каждого ЭлементДереваСтраницОтчета Из Форма["мДеревоСтраницОтчета"].ПолучитьЭлементы() Цикл
		
		Если ЭлементДереваСтраницОтчета.ПоказатьСтраницу = 1 Тогда
			
			ЭлементРазделовОтчета = Форма["РазделыОтчета"].ПолучитьЭлементы().Добавить();
			ЭлементРазделовОтчета.КолонкаРазделыОтчета         = ЭлементДереваСтраницОтчета.Представление;
			ЭлементРазделовОтчета.КолонкаРазделыОтчетаСокрНаим = ЭлементДереваСтраницОтчета.ИмяСтраницы;
			ЭлементРазделовОтчета.ИндексКартинки               = 1;
			ЭлементРазделовОтчета.РазделМногостраничный        = Ложь;
			ЭлементРазделовОтчета.РазделМногострочный          = Ложь;
			
			НайденноеЗначение = Неопределено;
			
			Если Форма["мСтруктураМногостраничныхРазделов"].Свойство(ЭлементРазделовОтчета.КолонкаРазделыОтчетаСокрНаим, НайденноеЗначение) Тогда
				
				Если НЕ НайденноеЗначение = Неопределено Тогда
					
					НайденноеЗначение = Форма[НайденноеЗначение];
					
					ЭлементРазделовОтчета.ИндексКартинки        = 0;
					ЭлементРазделовОтчета.РазделМногостраничный = Истина;
					
					Для НомерСтраницы = 1 По НайденноеЗначение.Количество() Цикл
						
						СтраницаРазделаОтчета = ЭлементРазделовОтчета.ПолучитьЭлементы().Добавить();
						
						СтраницаРазделаОтчета.КолонкаРазделыОтчета              = "Стр. " + НомерСтраницы;
						СтраницаРазделаОтчета.КолонкаРазделыОтчетаСокрНаим      = ЭлементРазделовОтчета.КолонкаРазделыОтчетаСокрНаим;
						СтраницаРазделаОтчета.КолонкаНомерСтраницыРазделаОтчета = НомерСтраницы;
						СтраницаРазделаОтчета.ИндексКартинки                    = 1;
						СтраницаРазделаОтчета.РазделМногостраничный             = ЭлементРазделовОтчета.РазделМногостраничный;
						СтраницаРазделаОтчета.РазделМногострочный               = ЭлементРазделовОтчета.РазделМногострочный;
						
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЕсли;
				
		КонецЕсли;
				
	КонецЦикла;
			
КонецПроцедуры

&НаКлиенте
Процедура РазделыОтчетаПриАктивизацииСтроки(Элемент)
	
	Если Элемент.ТекущиеДанные = Неопределено
	 ИЛИ Элемент.ТекущаяСтрока = СтруктураРеквизитовФормы.ТекущаяСтрокаРазделовОтчета Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураРеквизитовФормы.ТекущаяСтрокаРазделовОтчета = Элемент.ТекущаяСтрока;
		
	Элементы.ОчиститьТекущуюСтраницу.Доступность = Истина;
	
	Если СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере Тогда
		
		Если Элемент.ТекущиеДанные.РазделМногостраничный Тогда
			
			Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета = ?(Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета = Неопределено
															        ИЛИ Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета = 0, 1, Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета);
			
		КонецЕсли;
			
		ВывестиМакетСтраницыВТабличныйДокументНаСервере(Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим, Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета);
		
	Иначе
		
		СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Истина;
		
	КонецЕсли;
		
	КМенюРО = Элементы.РазделыОтчета.КонтекстноеМеню;
	Если Элемент.ТекущиеДанные.РазделМногостраничный Тогда
		Элемент.Развернуть(Элемент.ТекущаяСтрока);
		КМенюРО.Видимость = Истина;
		Если Элемент.ТекущиеДанные.ПолучитьРодителя() = Неопределено Тогда
			Элементы.ОчиститьТекущуюСтраницу.Доступность = Ложь;
		КонецЕсли;
		
		Если НЕ Элемент.ТекущиеДанные.ПолучитьРодителя() = Неопределено
			И Элемент.ТекущиеДанные.ПолучитьРодителя().ПолучитьЭлементы().Количество() > 1 Тогда
			
			КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюДобавитьСтраницу.Видимость = Истина;
			КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюУдалитьСтраницу.Видимость = Истина;
		Иначе
			КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюДобавитьСтраницу.Видимость = Истина;
			КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюУдалитьСтраницу.Видимость = Ложь;
		КонецЕсли;
		
		Если Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "ФизЛица" Тогда
			КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюДобавитьСтраницу.Видимость = Ложь;
			КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюУдалитьСтраницу.Видимость = Ложь;
		КонецЕсли;
	Иначе
		КМенюРО.Видимость = Ложь;
		КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюДобавитьСтраницу.Видимость = Ложь;
		КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюУдалитьСтраницу.Видимость = Ложь;
	КонецЕсли;
	
	Если Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Титульный" Тогда
		Элементы.Обновить.Доступность                  = Истина;
	Иначе
		Элементы.Обновить.Доступность                  = Ложь;
	КонецЕсли;
	
	Если Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Раздел2"
	 ИЛИ Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Раздел5"
	 ИЛИ Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Раздел6"
	 ИЛИ Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Раздел7"
	 ИЛИ Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Раздел10_Прил1" Тогда
		
		Элементы.ТабличныйДокументКонтекстноеМенюГруппаСтроки.Видимость = Истина;
	Иначе
		Элементы.ТабличныйДокументКонтекстноеМенюГруппаСтроки.Видимость = Ложь;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.СпрятатьСсылкуУдалитьСтраницу(ЭтаФорма);
	
	Элементы.ТабличныйДокумент.ТекущаяОбласть = ТабличныйДокумент.Область(1, 1);
	
КонецПроцедуры

&НаСервере
Процедура ВывестиМакетСтраницыВТабличныйДокументНаСервере(ИмяТекРаздела, НомерСтраницыРазделаОтчета)
		
	СохранитьДанныеРаздела(СтруктураРеквизитовФормы.НаимТекущегоРаздела, Истина);
		
	ВывестиМакетВТаблДокНаСервере(ИмяТекРаздела, НомерСтраницыРазделаОтчета);
	
	ИмяПредыдущегоРаздела = СтруктураРеквизитовФормы.НаимТекущегоРаздела;
	
	СтруктураРеквизитовФормы.НаимТекущегоРаздела  = ИмяТекРаздела;
	СтруктураРеквизитовФормы.НомерТекущейСтраницы = НомерСтраницыРазделаОтчета;
	
	Если СтруктураРеквизитовФормы.НужноРассчитатьОтчетНаСервере Тогда
	
		РасчетЗависимыхРазделовДекларации(ИмяПредыдущегоРаздела);
	
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура СохранитьДанныеРаздела(НаимРаздела, ОчищатьРазделЕслиЕстьМногострочность, ИзменятьАктивнуюСтраницу = Истина)
	
	// Многостраничные разделы.
	//
	Если НаимРаздела = "ФизЛица"
	 ИЛИ НаимРаздела = "Раздел10"
	 ИЛИ НаимРаздела = "Раздел11"
	 ИЛИ НаимРаздела = "Раздел11_Прил1"
	 ИЛИ НаимРаздела = "Раздел11_Прил2" Тогда
		
		СтруктураДанных = Новый Структура;
		
		Для Каждого Область Из ТабличныйДокумент.Области Цикл
			
			Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник И Область.СодержитЗначение Тогда
				СтруктураДанных.Вставить(Область.Имя, Область.Значение);
			КонецЕсли;
			
		КонецЦикла;
		
		НаимТаблицыСтраницы = мСтруктураМногостраничныхРазделов[НаимРаздела];
		
		АктивныеСтраницы = ЭтаФорма[НаимТаблицыСтраницы].НайтиСтроки(Новый Структура("АктивнаяСтраница", Истина));
		
		Если АктивныеСтраницы.Количество() > 0 Тогда
			
			АктивнаяСтраница = АктивныеСтраницы[0];
			АктивнаяСтраница.Данные.Очистить();
			АктивнаяСтраница.Данные.Добавить(СтруктураДанных);
			
			Для каждого Страница Из АктивныеСтраницы Цикл
				Страница.АктивнаяСтраница = Ложь;
			КонецЦикла;
			
			Страница.АктивнаяСтраница = НЕ ИзменятьАктивнуюСтраницу;
			
		КонецЕсли; 
		
	// Многостраничные и многострочные разделы.
	//
	ИначеЕсли НаимРаздела = "Раздел5"
		  ИЛИ НаимРаздела = "Раздел6"
		  ИЛИ НаимРаздела = "Раздел7" Тогда
		  
		ТаблицаСтраницРаздела = Неопределено;
		
		мСтруктураМногостраничныхРазделов.Свойство(НаимРаздела, ТаблицаСтраницРаздела);
				
		ТаблицаСтраницРаздела = ЭтаФорма[ТаблицаСтраницРаздела];
		
		СтрТаблицыСтраниц = ТаблицаСтраницРаздела.НайтиСтроки(Новый Структура("АктивнаяСтраница", Истина));
		
		Если СтрТаблицыСтраниц.Количество() > 0 Тогда
				
			СтрТаблицаСтраницы = СтрТаблицыСтраниц[0];
				
			// Сохраним данные активной страницы, с присвоением Представления страницы и с очистной многострочных частей (Истина)
			РегламентированнаяОтчетностьКлиентСервер.СохранитьДанныеМногостраничногоРазделаВАктивнойСтранице(ЭтаФорма, НаимРаздела, ОчищатьРазделЕслиЕстьМногострочность);
				
			Для каждого СтрТаблица Из СтрТаблицыСтраниц Цикл
				СтрТаблица.АктивнаяСтраница = Ложь;
			КонецЦикла;
			
			СтрТаблицаСтраницы.АктивнаяСтраница = НЕ ИзменятьАктивнуюСтраницу;
			
		КонецЕсли;
				
	// Многострочные разделы.
	//
	ИначеЕсли НаимРаздела = "Раздел2"
	      ИЛИ НаимРаздела = "Раздел10_Прил1" Тогда
		
		ЭтаФорма["СтруктураДанных" + НаимРаздела] = СобратьДанныеТекущегоТаблПоля(ЭтаФорма, "ТабличныйДокумент");
		
		ИмяГруппы = ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(НаимРаздела);
		
		ОбновитьСтруктуруМногострочногоРазделаНаСервере(ИмяГруппы);
		
	// Обычные разделы.
	//
	Иначе
		
		ЭтаФорма["СтруктураДанных" + НаимРаздела] = СобратьДанныеТекущегоТаблПоля(ЭтаФорма, "ТабличныйДокумент");
		
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура ВывестиМакетВТаблДокНаСервере(ИмяТекРаздела, НомерСтраницыРазделаОтчета)
	
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + ИмяТекРаздела));
	
	// Многостраничные разделы.
	//
	Если ИмяТекРаздела = "ФизЛица"
	 ИЛИ ИмяТекРаздела = "Раздел10"
	 ИЛИ ИмяТекРаздела = "Раздел11"
	 ИЛИ ИмяТекРаздела = "Раздел11_Прил1"
	 ИЛИ ИмяТекРаздела = "Раздел11_Прил2" Тогда
	 
		НаимТаблицыСтраницы = мСтруктураМногостраничныхРазделов[ИмяТекРаздела];
	
		СтруктураДанных = Новый Структура;
		
		СписокДанных = ЭтаФорма[НаимТаблицыСтраницы][НомерСтраницыРазделаОтчета - 1].Данные;
		
		Для каждого ТаблицаСтраницы Из ЭтаФорма[НаимТаблицыСтраницы] Цикл
			ТаблицаСтраницы.АктивнаяСтраница = Ложь;
		КонецЦикла;
		
		ЭтаФорма[НаимТаблицыСтраницы][НомерСтраницыРазделаОтчета - 1].АктивнаяСтраница = Истина;
		
		Если СписокДанных.Количество() > 0 Тогда
			СтруктураДанных = СписокДанных[0].Значение;
		КонецЕсли;
			
		Для Каждого ЭлСтруктуры Из СтруктураДанных Цикл
			Обл = ТабличныйДокумент.Области.Найти(ЭлСтруктуры.Ключ);
			Если Обл <> Неопределено Тогда 
				Обл.Значение = ЭлСтруктуры.Значение;
			КонецЕсли;
		КонецЦикла;
		
		УстановитьВидимостьУдалитьСтраницу(ЭтаФорма[НаимТаблицыСтраницы]);
		
	// Многостраничные и многострочные разделы.
	//
	ИначеЕсли ИмяТекРаздела = "Раздел5"
		  ИЛИ ИмяТекРаздела = "Раздел6"
		  ИЛИ ИмяТекРаздела = "Раздел7" Тогда
		
		НаимТаблицыСтраницы = мСтруктураМногостраничныхРазделов[ИмяТекРаздела];
		
		СтруктураДанных = Новый Структура;
		
		СписокДанных = ЭтаФорма[НаимТаблицыСтраницы][НомерСтраницыРазделаОтчета - 1].Данные;
		
		Для каждого ТаблицаСтраницы Из ЭтаФорма[НаимТаблицыСтраницы] Цикл
			ТаблицаСтраницы.АктивнаяСтраница = Ложь;
		КонецЦикла;
		
		ЭтаФорма[НаимТаблицыСтраницы][НомерСтраницыРазделаОтчета - 1].АктивнаяСтраница = Истина;
		
		Если СписокДанных.Количество() > 0 Тогда
			СтруктураДанных = СписокДанных[0].Значение;
		КонецЕсли;
			
		Для Каждого ЭлСтруктуры Из СтруктураДанных Цикл
			Обл = ТабличныйДокумент.Области.Найти(ЭлСтруктуры.Ключ);
			Если Обл <> Неопределено Тогда 
				Обл.Значение = ЭлСтруктуры.Значение;
			КонецЕсли;
		КонецЦикла;
		
		ТаблицаСтраницРаздела = Неопределено;
		
		мСтруктураМногостраничныхРазделов.Свойство(ИмяТекРаздела, ТаблицаСтраницРаздела);
			
		ТаблицаСтраницРаздела = ЭтаФорма[ТаблицаСтраницРаздела];
		
		СтрСледующаяСтраница = ТаблицаСтраницРаздела[НомерСтраницыРазделаОтчета - 1];
		
		СтрСледующаяСтраница.АктивнаяСтраница = Истина;
		
		ТаблицаВариантыЗаполнения = РегламентированнаяОтчетностьВызовСервера.ПолучитьТаблицуВариантовЗаполненияНаСервере(ЭтаФорма, ИмяТекРаздела);
			
		КолМногострочныхЧастей = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСвойствоРаздела(ЭтаФорма, ИмяТекРаздела, "МногострочностьВРазделе").Количество();
		
		Если КолМногострочныхЧастей > 0 Тогда
			
			НовДанныеДопСтрокРаздела = СтрСледующаяСтраница.ДанныеДопСтрок;
			
			Если (ТипЗнч(НовДанныеДопСтрокРаздела) = Тип("СписокЗначений"))
				И (НовДанныеДопСтрокРаздела.Количество() > 0)
				И (НовДанныеДопСтрокРаздела[0].Представление = "ДанныеФормыКоллекцияТаблицаДопСтрокРаздела") Тогда
				
				НовДанныеДопСтрокРаздела = НовДанныеДопСтрокРаздела[0].Значение;
				
			Иначе
				
				НовДанныеДопСтрокРаздела = Неопределено;
				
			КонецЕсли;
			
			// Способ хранения многострочных частей
			СохранятьМногострКакТЗ = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСвойствоРаздела(ЭтаФорма, ИмяТекРаздела, "СохранятьМногострКакТЗ");
			
		Иначе
			
			НовТаблицаДопСтрокРаздела = Неопределено; // Многострочности нет
			ИмяГруппыДопСтрок         = Неопределено; // Имя группы строк неопределено
			
		КонецЕсли;
		
		Если НовДанныеДопСтрокРаздела <> Неопределено Тогда
			
			// В случае, если многострочных частей больше 1, то хранится структура, иначе, таблица значений с данными
			Если (КолМногострочныхЧастей > 0) И (НЕ СохранятьМногострКакТЗ) Тогда
				
				Для Каждого ГруппаСтрок Из НовДанныеДопСтрокРаздела Цикл
					ИмяГруппыДопСтрок = ГруппаСтрок.Ключ;
					ДанныеГруппыСтрок = ГруппаСтрок.Значение;
					
					ПромТаблицаГруппыСтрок = ЭтаФорма["Хранилище" + ИмяГруппыДопСтрок].Добавить().Таблица;
					
					КопироватьДанныеФормы(ДанныеГруппыСтрок, ПромТаблицаГруппыСтрок);
					
					// Заменяем таблицу значений с данными текущей страницы.
					КопироватьДанныеФормы(ПромТаблицаГруппыСтрок, ЭтаФорма[ИмяГруппыДопСтрок]);
					
					ВывестиРазделВТабличныйДокументНаСервере(ИмяГруппыДопСтрок, ПромТаблицаГруппыСтрок);
					ОбновитьСтруктуруМногострочногоРазделаНаСервере(ИмяГруппыДопСтрок);
					
				КонецЦикла;
				
			ИначеЕсли (КолМногострочныхЧастей > 0) И (СохранятьМногострКакТЗ) Тогда
				
				ИмяГруппыДопСтрок = ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ИмяТекРаздела);
								
				ПромТаблицаДопСтрокРаздела = ЭтаФорма["Хранилище" + ИмяГруппыДопСтрок].Добавить().Таблица;
				
				КопироватьДанныеФормы(НовДанныеДопСтрокРаздела, ПромТаблицаДопСтрокРаздела);
				
				// Заменяем таблицу значений с данными текущей страницы.
				КопироватьДанныеФормы(ПромТаблицаДопСтрокРаздела, ЭтаФорма[ИмяГруппыДопСтрок]);
				
				// Выводим в табличный документ данные группы дополнительных строк и обновляем структуру многострочного раздела
				ВывестиРазделВТабличныйДокументНаСервере(ИмяГруппыДопСтрок, ПромТаблицаДопСтрокРаздела);
				ОбновитьСтруктуруМногострочногоРазделаНаСервере(ИмяГруппыДопСтрок);
								
			КонецЕсли;
			
		КонецЕсли;
		
		УстановитьВидимостьУдалитьСтраницу(ТаблицаСтраницРаздела);
	
	// Многострочные разделы.
	//
	ИначеЕсли ИмяТекРаздела = "Раздел2"
	      ИЛИ ИмяТекРаздела = "Раздел10_Прил1" Тогда
		
		Для Каждого ЭлСтруктуры Из ЭтаФорма["СтруктураДанных" + ИмяТекРаздела] Цикл
			Обл = ТабличныйДокумент.Области.Найти(ЭлСтруктуры.Ключ);
			Если Обл <> Неопределено Тогда 
				Обл.Значение = ЭлСтруктуры.Значение;
			КонецЕсли;
		КонецЦикла;
		
		ИмяГруппы = ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ИмяТекРаздела);
		
		СтруктураГруппы = Неопределено;
		
		мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);
		
		СтруктураГруппы = ЭтаФорма[СтруктураГруппы];
		
		ВывестиРазделВТабличныйДокумент(ЭтаФорма, ИмяГруппы, СтруктураГруппы);
		
	// Обычные разделы.
	//
	ИначеЕсли ИмяТекРаздела = "Раздел3" Тогда
	
		Для Каждого ЭлСтруктуры Из ЭтаФорма["СтруктураДанных" + ИмяТекРаздела] Цикл
			
			ЗначениеПоказателя = ЭлСтруктуры.Значение;
			
			Если (СтрНайти(ЭлСтруктуры.Ключ, "П0") > 0) И (Прав(ЭлСтруктуры.Ключ, 1) = "0") Тогда
				
				НомерСтроки = Сред(ЭлСтруктуры.Ключ, 9, 3);
				
				Если РегламентированнаяОтчетностьКлиентСервер.ЯвляетсяЧислом(НомерСтроки) Тогда
					
					Если Число(НомерСтроки) >= 190 Тогда
						Если ПустаяСтрока(ЗначениеПоказателя) Тогда
							ЭтаФорма["СтруктураДанных" + ИмяТекРаздела][ЭлСтруктуры.Ключ] = "0";
							ЗначениеПоказателя = "0";
						КонецЕсли;
						Если ЗначениеПоказателя = "0" Тогда
							ЗначениеПоказателя = "";
						Иначе
							ЗначениеПоказателя = "V";
						КонецЕсли;
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
			Обл = ТабличныйДокумент.Области.Найти(ЭлСтруктуры.Ключ);
			Если Обл <> Неопределено Тогда 
				Обл.Значение = ЗначениеПоказателя;
			КонецЕсли;
		КонецЦикла;
		
	Иначе
		
		Для Каждого ЭлСтруктуры Из ЭтаФорма["СтруктураДанных" + ИмяТекРаздела] Цикл
			Обл = ТабличныйДокумент.Области.Найти(ЭлСтруктуры.Ключ);
			Если Обл <> Неопределено Тогда 
				Обл.Значение = ЭлСтруктуры.Значение;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;	
	
	Если ИмяТекРаздела <> "Титульный" Тогда
		
		ЗаполнитьПоказателиЗначениямиПоУмолчанию(ИмяТекРаздела);
		УстановитьФорматВыводаНаСервере(ИмяТекРаздела);
		УстановитьЦветФонаЯчейкиНаСервере(,, ИмяТекРаздела);
		РегламентированнаяОтчетностьКлиентСервер.ОтрисоватьЗначкиУдаленияСтрок(ЭтаФорма);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоказателиЗначениямиПоУмолчанию(НаимРаздела)
	
	Если НаимРаздела = "" Тогда   //Пустая процедура
		Возврат; 
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СохрЗначВКвадратиках(Форма);

	Форма.СтруктураРеквизитовФормы.мОргТип = Форма.ТабличныйДокумент.Области.ТипОрг1.Значение;
	
	Форма.СтруктураРеквизитовФормы.мОргКодИМНС = Форма.ТабличныйДокумент.Области.КодИМНС.Значение;

	Форма.СтруктураРеквизитовФормы.мИННДиректор = Форма.ТабличныйДокумент.Области.ИННРук.Значение;
	
	Форма.СтруктураРеквизитовФормы.мИННБухгалтер = Форма.ТабличныйДокумент.Области.ИННГБ.Значение;

	Форма.СтруктураРеквизитовФормы.мИННУпПред = Форма.ТабличныйДокумент.Области.ИННУП.Значение;

	Форма.СтруктураРеквизитовФормы.мОргОГРН = Форма.ТабличныйДокумент.Области.ОГРН.Значение;

	Форма.СтруктураРеквизитовФормы.мОргКодОКАТО = Форма.СтруктураДанныхРаздел1_1.КодОКАТОР;

	// Требуется для процедуры формирования данных по ФЛ

	СтраницаФизЛица = Форма.ТаблицаСтраницыФизЛица[0].Данные[0].Значение;
	
	Форма.СтруктураРеквизитовФормы.мДатаДок = СтраницаФизЛица.ФизЛицДокДата;

	Форма.СтруктураРеквизитовФормы.мФизЛицИнд = СтраницаФизЛица.ФизЛицИнд;
	Форма.СтруктураРеквизитовФормы.мФизЛицИнд = ?(ЗначениеЗаполнено(Форма.СтруктураРеквизитовФормы.мФизЛицИнд), СтрЗаменить(Строка(Форма.СтруктураРеквизитовФормы.мФизЛицИнд), Символ(160), ""), "");

КонецПроцедуры

&НаСервере
Процедура ЗагрузитьПоказателиИзМакета(РазделВМакете)
	
	МакетСоставаПоказателей = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет("Списки2014Кв1");

	ТекОбласть = МакетСоставаПоказателей.Области.Найти(РазделВМакете);

	Если ТекОбласть <> Неопределено Тогда	

		Если РазделВМакете = "КодыКБК2005Раздел1_2"
		 ИЛИ РазделВМакете = "КодыКБК2017Раздел1_2" Тогда
		 
			мКодыКБКРаздел1_2.Очистить();
			
		КонецЕсли;	
		
		Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
			// Перебираем строки макета.
			КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
			Название = СокрП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
			Если КодПоказателя = "###" Тогда
				Прервать;
			Иначе
				Если РазделВМакете = "Льготы" Тогда
					// НовСтрока = мНалоговыеЛьготыИмущество.Добавить();
				КонецЕсли;

				Если РазделВМакете = "КодыКБК" Тогда
					НовСтрока = мКодыБюджетнойКлассификации.Добавить();
				ИначеЕсли РазделВМакете = "КодыКБК2005" Тогда
					НовСтрока = мКодыБюджетнойКлассификации2005.Добавить();
				ИначеЕсли РазделВМакете = "КодыКБК2006" Тогда
					НовСтрока = мКодыБюджетнойКлассификации2006.Добавить();
				ИначеЕсли РазделВМакете = "КодыКБК2005Раздел1_2"
					  ИЛИ РазделВМакете = "КодыКБК2017Раздел1_2" Тогда
					НовСтрока = мКодыКБКРаздел1_2.Добавить();
				ИначеЕсли РазделВМакете = "КодыКБК2005Раздел1_3" Тогда
					НовСтрока = мКодыКБК2005Раздел1_3.Добавить();
				ИначеЕсли РазделВМакете = "ВидыДеятельности" Тогда
					НовСтрока = мВидыДеятельности.Добавить();
				КонецЕсли;

				НовСтрока.Код = КодПоказателя;
				НовСтрока.Название = Название;
			КонецЕсли;

		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЦветФонаЯчейкиНаКлиенте(ИмяЯчейки = Неопределено, ВариантЗаполнения = Неопределено, ИмяТекущейСтраницыПанели = "") Экспорт
	
	УстановитьЦветФонаЯчейки(ЭтаФорма, ИмяЯчейки, ВариантЗаполнения, ИмяТекущейСтраницыПанели);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЦветФонаЯчейкиНаСервере(ИмяЯчейки = Неопределено, ВариантЗаполнения = Неопределено, ИмяТекущейСтраницыПанели = "") Экспорт
	
	УстановитьЦветФонаЯчейки(ЭтаФорма, ИмяЯчейки, ВариантЗаполнения, ИмяТекущейСтраницыПанели);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЦветФонаЯчейки(Форма, ИмяЯчейки = Неопределено, ВариантЗаполнения = Неопределено, ИмяТекущейСтраницыПанели = "") Экспорт
	
	Перем ЦветФона;
	Перем Комментарий;

	// Не нужно разукрашивать табличные поля, если открывается без открытия формы (например печать или просмотр)
	Если Форма.СтруктураРеквизитовФормы.мБезОткрытияФормы ИЛИ Форма.СтруктураРеквизитовФормы.мРежимПечати Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ИмяЯчейки = Неопределено Тогда
		// устанавливаем цвет фона конкретной ячейки
		#Если НаКлиенте Тогда
			ИмяСтраницыПанели = РегламентированнаяОтчетностьКлиент.ОпределитьСтраницуПанелиПоКодуПоказателяНаКлиенте(Форма, ИмяЯчейки);
		#Иначе
			ИмяСтраницыПанели = РегламентированнаяОтчетностьВызовСервера.ОпределитьСтраницуПанелиПоКодуПоказателяНаСервере(Форма, ИмяЯчейки);
		#КонецЕсли
		Если ИмяСтраницыПанели = Неопределено Тогда
			Возврат;
		КонецЕсли;

		ИмяПоляТаблДокумента = "ТабличныйДокумент";

		Ключ = "_" + ВариантЗаполнения;
		Форма.мСтруктураЦветовРаскраски.Свойство(Ключ, ЦветФона);

		ЗначениеВКвадратах = Ложь;
		
		Если ВариантЗаполнения = 4 ИЛИ ВариантЗаполнения = 5 Тогда

			Если ЗначениеВКвадратах Тогда
				// если ЗНАЧЕНИЕ КВАДРАТИЧНОЕ
				РегламентированнаяОтчетностьКлиентСервер.СвойстваГрупповыхЗначений(Форма, ИмяЯчейки, "УстановитьЗащиту");
			Иначе
				Форма[ИмяПоляТаблДокумента].Области[ИмяЯчейки].Защита = Истина;
			КонецЕсли;

		Иначе

			Если ЗначениеВКвадратах Тогда
				// если ЗНАЧЕНИЕ КВАДРАТИЧНОЕ
				РегламентированнаяОтчетностьКлиентСервер.СвойстваГрупповыхЗначений(Форма, ИмяЯчейки, "СнятьЗащиту");
			Иначе
				Форма[ИмяПоляТаблДокумента].Области[ИмяЯчейки].Защита = Ложь;
			КонецЕсли;
			
		КонецЕсли;

		// установим цвет ячейки
		Если ЗначениеВКвадратах Тогда
			РегламентированнаяОтчетностьКлиентСервер.СвойстваГрупповыхЗначений(Форма, ИмяЯчейки, "ПроставитьЦветРаскраски", ЦветФона);
		Иначе
			Форма[ИмяПоляТаблДокумента].Области[ИмяЯчейки].ЦветФона = ЦветФона;
		КонецЕсли;

	Иначе
		// устанавливаем цвет фона всех автозаполняемых ячеек активной страницы

		#Если НаКлиенте Тогда
			ТаблицаВариантыЗаполнения = РегламентированнаяОтчетностьКлиент.ПолучитьТаблицуВариантовЗаполненияНаКлиенте(Форма, ИмяТекущейСтраницыПанели);
		#Иначе
			ТаблицаВариантыЗаполнения = РегламентированнаяОтчетностьВызовСервера.ПолучитьТаблицуВариантовЗаполненияНаСервере(Форма, ИмяТекущейСтраницыПанели);
		#КонецЕсли
		
		Если ТаблицаВариантыЗаполнения = Неопределено Тогда
			Возврат;
		КонецЕсли;

		Для Каждого Строка Из ТаблицаВариантыЗаполнения Цикл
			ИмяПоказателя            =  Строка.КодПоказателя;
			ВариантЗаполнения        =  Строка.ВариантЗаполнения;
			Комментарий              =  Строка.Комментарий;
			КодПоказателяПоСтруктуре =  Строка.КодПоказателяПоСтруктуре;

			КолвоСтрокВМногострочнойЧасти = РегламентированнаяОтчетностьКлиентСервер.ПоказательВходитВМногострочнуюЧасть(Форма, ИмяПоказателя);

			Если КолвоСтрокВМногострочнойЧасти > 0 Тогда
				Многострочность = Истина;
				БазоваяЧасть = ИмяПоказателя;
				ОписанияБлоков = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСвойствоРаздела(Форма, ИмяТекущейСтраницыПанели, "МногострочностьВРазделе");

				Если ТипЗнч(ОписанияБлоков) = Тип("Число") Тогда
					ВБлокеВсеПоказателиЗаполняются = Истина;
				ИначеЕсли ТипЗнч(ОписанияБлоков) = Тип("ДанныеФормыКоллекция") Тогда
					ИмяГруппы = Сред(ИмяПоказателя, 1, 11);
					ВБлокеВсеПоказателиЗаполняются = НЕ ОписанияБлоков.НайтиСтроки(Новый Структура("ИдГруппы", ИмяГруппы))[0].НезаполняемыеПоказателиЕсть;
				КонецЕсли;

			Иначе
				Многострочность = Ложь;
				ВБлокеВсеПоказателиЗаполняются = Истина;
				КолвоСтрокВМногострочнойЧасти = 1;
			КонецЕсли;

			Для Инд = 1 по КолвоСтрокВМногострочнойЧасти Цикл

				Если Многострочность Тогда
					ИмяПоказателя = БазоваяЧасть + "_" + Формат(Инд, "ЧГ=0");
				КонецЕсли;

				Ключ = "_" + ВариантЗаполнения;
				Форма.мСтруктураЦветовРаскраски.Свойство(Ключ, ЦветФона);

				ЗначениеВКвадратах = ?(ПустаяСтрока(КодПоказателяПоСтруктуре), Ложь, Истина);
				Если НЕ ЗначениеВКвадратах Тогда
					ТекОбластьЯчеек = Форма.ТабличныйДокумент.Области[ИмяПоказателя];
					Если (Не ПустаяСтрока(Комментарий)) ИЛИ (Не ПустаяСтрока(ТекОбластьЯчеек.Примечание.Текст)) Тогда
						ТекОбластьЯчеек.Примечание.Текст = Комментарий;
					КонецЕсли;
				КонецЕсли;
				
				// Если многострочность, то специальный механизм
				Если (ЗначениеВКвадратах) И ((ИмяПоказателя = "П000110003000")
				Или (ИмяПоказателя = "П000110004000")
				Или (ИмяПоказателя = "П000110005000")) Тогда // КБК

					Если ИмяПоказателя = "П000110003000" Тогда
						МногострочностьИВариантыЗаполнения(Форма, "СуммаНалога1",    ВариантЗаполнения);
						МногострочностьИВариантыЗаполнения(Форма, "СуммаНалога2",    ВариантЗаполнения);
						МногострочностьИВариантыЗаполнения(Форма, "СуммаНалога3",    ВариантЗаполнения);

					ИначеЕсли ИмяПоказателя = "П000110004000" Тогда
						МногострочностьИВариантыЗаполнения(Форма, "СуммаНалУм1",    ВариантЗаполнения);
						МногострочностьИВариантыЗаполнения(Форма, "СуммаНалУм2",    ВариантЗаполнения);
						МногострочностьИВариантыЗаполнения(Форма, "СуммаНалУм3",    ВариантЗаполнения);

					ИначеЕсли ИмяПоказателя = "П000110005000" Тогда
						МногострочностьИВариантыЗаполнения(Форма, "СуммаПерех1",    ВариантЗаполнения);
						МногострочностьИВариантыЗаполнения(Форма, "СуммаПерех2",    ВариантЗаполнения);
						МногострочностьИВариантыЗаполнения(Форма, "СуммаПерех3",    ВариантЗаполнения);
					КонецЕсли;
					
					Продолжить;
					
				КонецЕсли;
				
				ЗначениеВКвадратах = Ложь;
				
				Если ВариантЗаполнения = 4 ИЛИ ВариантЗаполнения = 5 Тогда

					Если ЗначениеВКвадратах Тогда
						// если ЗНАЧЕНИЕ КВАДРАТИЧНОЕ
						РегламентированнаяОтчетностьКлиентСервер.СвойстваГрупповыхЗначений(Форма, ИмяПоказателя, "УстановитьЗащиту");
					Иначе
						Форма.ТабличныйДокумент.Области[ИмяПоказателя].Защита = Истина;
					КонецЕсли;

				Иначе

					Если ЗначениеВКвадратах Тогда
						// если ЗНАЧЕНИЕ КВАДРАТИЧНОЕ
						РегламентированнаяОтчетностьКлиентСервер.СвойстваГрупповыхЗначений(Форма, ИмяПоказателя, "СнятьЗащиту");
					Иначе
						Форма.ТабличныйДокумент.Области[ИмяПоказателя].Защита = Ложь;
					КонецЕсли;
				КонецЕсли;

				Если ЗначениеВКвадратах Тогда
					РегламентированнаяОтчетностьКлиентСервер.СвойстваГрупповыхЗначений(Форма, ИмяПоказателя, "ПроставитьЦветРаскраски", ЦветФона);
				Иначе
					Форма.ТабличныйДокумент.Области[ИмяПоказателя].ЦветФона = ЦветФона;
				КонецЕсли;
			КонецЦикла;

		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура МногострочностьИВариантыЗаполнения(Форма, Знач ПервыйПоказатель, Знач ВариантЗаполнения)

	Перем ЦветФона;
	
	Ключ = "_" + ВариантЗаполнения;
	Форма.мСтруктураЦветовРаскраски.Свойство(Ключ, ЦветФона);
	
	Если ВариантЗаполнения = 4 Тогда
		Форма.ТабличныйДокумент.Области[ПервыйПоказатель].Защита = Истина;
	Иначе
		Форма.ТабличныйДокумент.Области[ПервыйПоказатель].Защита = Ложь;
	КонецЕсли;
	
	Форма.ТабличныйДокумент.Области[ПервыйПоказатель].ЦветФона = ЦветФона;
	
КонецПроцедуры

&НаСервере
Процедура ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставления()

	РегламентированнаяОтчетность.ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставления(ЭтаФорма);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставленияПоРазделу(Форма, ИмяСтраницы) Экспорт

	ИмяСтраницыР = СтрЗаменить(ИмяСтраницы, "ПолеТабличногоДокумента", "");

	Если ИмяСтраницыР = "ФизЛица" Тогда

		Форма.СтруктураРеквизитовФормы.мФизЛицИнд = "";
		Форма.СтруктураРеквизитовФормы.мДатаДок   = РегламентированнаяОтчетностьКлиентСервер.ПустоеЗначениеТипа(Тип("Дата"));
		Форма.СтруктураРеквизитовФормы.мДатаРожд  = РегламентированнаяОтчетностьКлиентСервер.ПустоеЗначениеТипа(Тип("Дата"));

	ИначеЕсли ИмяСтраницыР = "Раздел1_1" Тогда

		Форма.СтруктураРеквизитовФормы.мКодОКАТО1 = "";

		Форма.СтруктураРеквизитовФормы.мКБКвФБ_1_1 = "";
		Форма.СтруктураРеквизитовФормы.мКБКвФБ_1_2 = "";
		Форма.СтруктураРеквизитовФормы.мКБКвФБ_1_3 = "";

		Форма.СтруктураРеквизитовФормы.мСуммаНалога1_1 = 0;
		Форма.СтруктураРеквизитовФормы.мСуммаНалУм1_1 = 0;
		Форма.СтруктураРеквизитовФормы.мСуммаПерех1_1 = 0;

		Форма.СтруктураРеквизитовФормы.мСуммаНалога1_2 = 0;
		Форма.СтруктураРеквизитовФормы.мСуммаНалУм1_2 = 0;
		Форма.СтруктураРеквизитовФормы.мСуммаПерех1_2 = 0;

		Форма.СтруктураРеквизитовФормы.мСуммаНалога1_3 = 0;
		Форма.СтруктураРеквизитовФормы.мСуммаНалУм1_3 = 0;
		Форма.СтруктураРеквизитовФормы.мСуммаПерех1_3 = 0;

	ИначеЕсли ИмяСтраницыР = "Раздел1_2" Тогда

		Форма.СтруктураРеквизитовФормы.мКБКРаздел12 = "";
		Форма.СтруктураРеквизитовФормы.мКодОКАТОРаздел12 = "";
		Форма.СтруктураРеквизитовФормы.мСуммаДоплФедРаздел12 = 0;
		Форма.СтруктураРеквизитовФормы.мСуммаУменФедРаздел12 = 0;

	ИначеЕсли ИмяСтраницыР = "Раздел1_3" Тогда

		Форма.СтруктураРеквизитовФормы.мКБКРаздел13 = "";
		Форма.СтруктураРеквизитовФормы.мКодОКАТОРаздел13 = "";
		Форма.СтруктураРеквизитовФормы.мСуммаДоплФедРаздел13 = 0;
		Форма.СтруктураРеквизитовФормы.мСуммаУменФедРаздел13 = 0;

	ИначеЕсли ИмяСтраницыР = "Раздел2" Тогда

		Форма.СтруктураРеквизитовФормы.мКодСтраныСоглРаздел2 = "";
		Форма.СтруктураРеквизитовФормы.мКодСтраныРаздел2  = "";
		Форма.СтруктураРеквизитовФормы.мИННРО1Раздел2 = "";
		Форма.СтруктураРеквизитовФормы.мКППРО1Раздел2 = "";
		Форма.СтруктураРеквизитовФормы.мИННРО2Раздел2 = "";
		Форма.СтруктураРеквизитовФормы.мКППРО2Раздел2 = "";

	ИначеЕсли ИмяСтраницыР = "Раздел7" Тогда

		Форма.СтруктураРеквизитовФормы.мСтавкаРаздел7 = 0;

	ИначеЕсли ИмяСтраницыР = "Раздел10" Тогда

		Форма.СтруктураРеквизитовФормы.мКолОтдРаздел10 = 0;
		Форма.СтруктураРеквизитовФормы.мНалФБРаздел10 = 0;
		Форма.СтруктураРеквизитовФормы.мНалМБРаздел10 = 0;

	КонецЕсли;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ВозвратитьПустойОбразЛистаФЛ(форма)

	СтруктураДанных = Новый Структура;

	Для Каждого Стр из форма.СтруктураРеквизитовФормы.мПустойОбразЛистаФЛ Цикл
		СтруктураДанных.Вставить(Стр.Ключ, Стр.Значение);
	КонецЦикла;

	Возврат СтруктураДанных;

КонецФункции

&НаСервере
Процедура ЗаполнитьСведенияОбОрганизацииНаСервере(ВПрограммеИзмененаДатаПодписи = Ложь)
	
	СтруктураРеквизитовФормы.НаимИнОрг = ПолучитьНазваниеДляИностраннойОрганизации();
	ЗаполнитьСведенияОбОрганизации(ВПрограммеИзмененаДатаПодписи);
	ЗаполнитьСведенияОбФЛ(ЭтаФорма, ВПрограммеИзмененаДатаПодписи);
	СформироватьДеревоРазделовОтчетаНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСведенияОбОрганизации(ВПрограммеИзмененаДатаПодписи = Ложь)
	
	Если (СтруктураРеквизитовФормы.Организация  = Неопределено) Или (СтруктураРеквизитовФормы.Организация = РегламентированнаяОтчетностьКлиентСервер.ПустоеЗначениеТипа("СправочникСсылка.Организации")) Тогда
		Возврат;
	КонецЕсли;

	Сведения = Новый СписокЗначений;

	Если НЕ ВПрограммеИзмененаДатаПодписи Тогда
		
		Сведения.Добавить("", "ИННЮЛ");
		Сведения.Добавить("", "КППЮЛ");
		Сведения.Добавить("", "НаимЮЛПол");
		Сведения.Добавить("", "ОГРН");
		Сведения.Добавить("", "КодНО");
		Сведения.Добавить("", "НаимНО");
		Сведения.Добавить("", "ТелОрганизации");
		Сведения.Добавить("", "СтрИО");
		Сведения.Добавить("", "КодСтрИО");
		Сведения.Добавить("", "СтрПостИО");
		Сведения.Добавить("", "КодСтрПостИО");
		Сведения.Добавить("", "ТипНП");
		Сведения.Добавить("", "ОКАТО");
		Сведения.Добавить("", "ОКТМО");

	КонецЕсли;

	Сведения.Добавить("", "ФИОРук");
	Сведения.Добавить("", "ИННРук");
	Сведения.Добавить("", "ФИОБух");
	Сведения.Добавить("", "ИННБух");
	Сведения.Добавить("", "ФИОУпПред");
	Сведения.Добавить("", "ИННУпПред");
	Сведения.Добавить("", "ФИО");

	ОргСведения = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(СтруктураРеквизитовФормы.Организация, ДатаПодписи, Сведения);

	Если НЕ ВПрограммеИзмененаДатаПодписи Тогда
		КодНО 	= ОргСведения.КодНО;
		КПП 	= ОргСведения.КППЮЛ;
	Иначе
		КодНО 	= ТабличныйДокумент.Области.КодИМНС.Значение;
		КПП 	= ТабличныйДокумент.Области.КПП1.Значение;
	КонецЕсли;
	
	ДанныеПредставителя = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОПредставителе(СтруктураРеквизитовФормы.Организация, ДатаПодписи, Ложь, КодНО, КПП);
	
	Если НЕ ВПрограммеИзмененаДатаПодписи Тогда
		
		ИННЮЛ          = "";
		КППЮЛ          = "";
		НаимЮЛПол      = "";
		ОГРН           = "";
		КодНО          = "";
		НаимНО         = "";
		ТелОрганизации = "";
		СтрИО          = "";
		КодСтрИО       = "";
		ТипНП          = "";
		ОКАТО          = "";
		ОКТМО          = "";

	КонецЕсли;

	ФИОРук         = "";
	ИННРук         = "";
	ФИОБух         = "";
	ИННБух         = "";
	ФИОУпПред      = "";
	ИННУпПред      = "";
	ФИО            = "";

	СтрПостИО = "";
	КодСтрПостИО = "";

	Если НЕ ВПрограммеИзмененаДатаПодписи Тогда

		ОргСведения.Свойство("ИННЮЛ"         , ИННЮЛ);
		ОргСведения.Свойство("КППЮЛ"         , КППЮЛ);
		ОргСведения.Свойство("НаимЮЛПол"     , НаимЮЛПол);
		ОргСведения.Свойство("ОГРН"          , ОГРН);
		ОргСведения.Свойство("КодНО"         , КодНО);
		ОргСведения.Свойство("НаимНО"        , НаимНО);
		ОргСведения.Свойство("ТелОрганизации", ТелОрганизации);
		ОргСведения.Свойство("СтрИО"         , СтрИО);
		ОргСведения.Свойство("КодСтрИО"      , КодСтрИО);
		ОргСведения.Свойство("СтрПостИО"     , СтрПостИО);
		ОргСведения.Свойство("КодСтрПостИО"  , КодСтрПостИО);
		ОргСведения.Свойство("ТипНП"         , ТипНП);
		ОргСведения.Свойство("ОКАТО"         , ОКАТО);
		ОргСведения.Свойство("ОКТМО"         , ОКТМО);
		
	КонецЕсли;

	ОргСведения.Свойство("ФИОРук"        , ФИОРук);
	ОргСведения.Свойство("ИННРук"        , ИННРук);
	ОргСведения.Свойство("ФИОБух"        , ФИОБух);
	ОргСведения.Свойство("ИННБух"        , ИННБух);
	ОргСведения.Свойство("ФИОУпПред"     , ФИОУпПред);
	ОргСведения.Свойство("ИННУпПред"     , ИННУпПред);
	ОргСведения.Свойство("ФИО"     , ФИО);

	ФИОУпПред = ДанныеПредставителя.ФИОУпПред;
	ИННУпПред = ДанныеПредставителя.ИННУпПред;

	ПБОЮЛ = НЕ РегламентированнаяОтчетностьВызовСервера.ЭтоЮридическоеЛицо(СтруктураРеквизитовФормы.Организация);
	Если ПБОЮЛ Тогда
		НаимЮЛПол = ФИО;

		ФИОРук        = "";
		ИННРук        = "            ";
		мИННДиректор  = "            ";

		ФИОБух        = "";
		ИННБух        = "            ";
		мИННБухгалтер = "            ";

		ФИОУпПред = "";
		ИННУпПред  = "            ";
		мИННУпПред = "            ";

	КонецЕсли;

	Если ВПрограммеИзмененаДатаПодписи Тогда

		ТабличныйДокумент.Области.ОргДиректор.Значение  = ФИОРук;

		ТабличныйДокумент.Области.ОргБухгалтер.Значение = ФИОБух;

		ТабличныйДокумент.Области.ОргУП.Значение = ФИОУпПред;

		СтруктураРеквизитовФормы.мИННДиректор = ИННРук;
		СтруктураРеквизитовФормы.мИННБухгалтер= ИННБух;
		СтруктураРеквизитовФормы.мИННУпПред = ИННУпПред;

		ТабличныйДокумент.Области.ИННРук.Значение = ИННРук;
		ТабличныйДокумент.Области.ИННГБ.Значение  = ИННБух;
		ТабличныйДокумент.Области.ИННУП.Значение  = ИННУпПред;

		Если ПБОЮЛ Тогда
			ТабличныйДокумент.Области.ОргНазв.Значение = ФИО;
		КонецЕсли;

		Возврат;
	КонецЕсли;

	СтруктураРеквизитовФормы.мТелОрганизации = ТелОрганизации;

	Если ЗначениеЗаполнено(ИННЮЛ) Тогда
		ИННЮЛ = СокрЛП(ИННЮЛ);
	Иначе
		ИННЮЛ = "";
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(КППЮЛ) Тогда
		КППЮЛ = "";
	КонецЕсли;

	СтруктураРеквизитовФормы.мИННЮЛ = ИННЮЛ;
	СтруктураРеквизитовФормы.мКППЮЛ = КППЮЛ;
	
	Если (НЕ СтруктураРеквизитовФормы.мДокументВосстановлен) ИЛИ (СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация) Тогда
		ТабличныйДокумент.Области.ИНН1.Значение = ИННЮЛ;
		ТабличныйДокумент.Области.КПП1.Значение = КППЮЛ;
	КонецЕсли;
	
	Признаки = ТабличныйДокумент.Области.ТипОрг1.Значение
	   + ТабличныйДокумент.Области.ТипОрг2.Значение
	   + ТабличныйДокумент.Области.ТипОрг3.Значение
	   + ТабличныйДокумент.Области.ТипОрг4.Значение;

	Если (СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация) Или (ПустаяСтрока(Признаки)) Тогда

		Если ТипНП = 5 Тогда
			ТабличныйДокумент.Области.ТипОрг1.Значение = "V";
			ТабличныйДокумент.Области.ТипОрг2.Значение = "";
			ТабличныйДокумент.Области.ТипОрг3.Значение = "";
			ТабличныйДокумент.Области.ТипОрг4.Значение = "";
			Назв = СтруктураРеквизитовФормы.НаимИнОрг;
			Если (СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация) Или (ПустаяСтрока(ТабличныйДокумент.Области.ИноОргНазв.Значение)) Тогда
				ТабличныйДокумент.Области.ИноОргНазв.Значение = Назв;
			КонецЕсли;
		ИначеЕсли ТипНП = 3 Тогда
			ТабличныйДокумент.Области.ТипОрг1.Значение = "";
			ТабличныйДокумент.Области.ТипОрг2.Значение = "";
			ТабличныйДокумент.Области.ТипОрг3.Значение = "V";
			ТабличныйДокумент.Области.ТипОрг4.Значение = "";
			ТабличныйДокумент.Области.ИноОргНазв.Значение = "";
		Иначе
			ТабличныйДокумент.Области.ТипОрг1.Значение = "";
			ТабличныйДокумент.Области.ТипОрг2.Значение = "V";
			ТабличныйДокумент.Области.ТипОрг3.Значение = "";
			ТабличныйДокумент.Области.ТипОрг4.Значение = "";
			ТабличныйДокумент.Области.ИноОргНазв.Значение = "";
		КонецЕсли;

	КонецЕсли;

	Если (СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация) Или (ПустаяСтрока(ТабличныйДокумент.Области.ИноСтрКодПост.Значение)) Тогда
		ТабличныйДокумент.Области.ИноСтрКодПост.Значение = КодСтрПостИО;
	КонецЕсли;

	Если (СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация) Или (ПустаяСтрока(ТабличныйДокумент.Области.ИноСтранаПост.Значение)) Тогда
		ТабличныйДокумент.Области.ИноСтранаПост.Значение = СтрПостИО;
	КонецЕсли;

	Если (СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация) Или (ПустаяСтрока(ТабличныйДокумент.Области.ИноСтрана.Значение)) Тогда
		ТабличныйДокумент.Области.ИноСтрана.Значение = СтрИО;
	КонецЕсли;

	Если (СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация) Или (ПустаяСтрока(ТабличныйДокумент.Области.ИноСтрКод.Значение)) Тогда
		ТабличныйДокумент.Области.ИноСтрКод.Значение = КодСтрИО;
	КонецЕсли;

	Если (СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация) Или (ПустаяСтрока(ТабличныйДокумент.Области.ОргНазв.Значение)) Тогда
		ТабличныйДокумент.Области.ОргНазв.Значение = НаимЮЛПол;
	КонецЕсли;

	Если (СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация) Или (ПустаяСтрока(ТабличныйДокумент.Области.ОргДиректор.Значение)) Тогда
		ТабличныйДокумент.Области.ОргДиректор.Значение  = ФИОРук;
	КонецЕсли;

	Если (СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация) Или (ПустаяСтрока(СтруктураРеквизитовФормы.мИННДиректор)) Тогда
		ТабличныйДокумент.Области.ИННРук.Значение = ИННРук;
		СтруктураРеквизитовФормы.мИННДиректор = ИННРук;
	КонецЕсли;

	Если (СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация) Или (ПустаяСтрока(ТабличныйДокумент.Области.ОргБухгалтер.Значение)) Тогда
		ТабличныйДокумент.Области.ОргБухгалтер.Значение = ФИОБух;
	КонецЕсли;

	Если (СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация) Или (ПустаяСтрока(СтруктураРеквизитовФормы.мИННБухгалтер)) Тогда
		ТабличныйДокумент.Области.ИННГБ.Значение = ИННБух;
		СтруктураРеквизитовФормы.мИННБухгалтер = ИННБух;
	КонецЕсли;

	Если (ТипНП <> 3) И ((СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация) Или (ПустаяСтрока(СтруктураРеквизитовФормы.мОргОГРН))) Тогда
		ТабличныйДокумент.Области.ОГРН.Значение = ОГРН;
		СтруктураРеквизитовФормы.мОргОГРН = ОГРН;
	КонецЕсли;

	Если (ТипНП = 3) И (СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация) Тогда
		ТабличныйДокумент.Области.ОГРН.Значение = "";
		СтруктураРеквизитовФормы.мОргОГРН = "";
	КонецЕсли;

	Если (СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация) Или (ПустаяСтрока(СтруктураРеквизитовФормы.мКодОКАТО1)) Тогда
				
		ИспользуетсяОКТМО = (СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета >= '2013-12-01');
		КодТерриториальногоОбразования = ?(ИспользуетсяОКТМО, ОКТМО, ОКАТО);
		СтруктураДанныхРаздел1_1.КодОКАТОР = СокрЛП(КодТерриториальногоОбразования);
		СтруктураРеквизитовФормы.мКодОКАТО1 = СокрЛП(КодТерриториальногоОбразования);
				
	КонецЕсли;

	Если (СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация) Или (ПустаяСтрока(СтруктураРеквизитовФормы.мОргКодИМНС)) Тогда
		ТабличныйДокумент.Области.КодИМНС.Значение = КодНО;
		СтруктураРеквизитовФормы.мОргКодИМНС = КодНО;
	КонецЕсли;

	Если (СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация) Или (ПустаяСтрока(ТабличныйДокумент.Области.ОргИМНС.Значение)) Тогда
		ТабличныйДокумент.Области.ОргИМНС.Значение = НаимНО;
	КонецЕсли;

	Если (СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация) Или (ПустаяСтрока(ТабличныйДокумент.Области.ОргУП.Значение)) Тогда
		ТабличныйДокумент.Области.ОргУП.Значение = ФИОУпПред;
	КонецЕсли;

	Если (СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация) Или (ПустаяСтрока(СтруктураРеквизитовФормы.мИННУпПред)) Тогда
		ТабличныйДокумент.Области.ИННУП.Значение  = ИННУпПред;
		СтруктураРеквизитовФормы.мИННУпПред = ИННУпПред;
	КонецЕсли;

	Если (СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация) Или (ПустаяСтрока(ТабличныйДокумент.Области.ИноКТел.Значение)) Тогда
		ТабличныйДокумент.Области.ИноКТел.Значение = ТелОрганизации;
	КонецЕсли;

	Если (НЕ СтруктураРеквизитовФормы.мДокументВосстановлен) ИЛИ (СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация) Тогда
		ЗаполнитьДатуВЯчейках(ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьСведенияОбФЛ(Форма, СмениласьДатаПодписания = Ложь)
	
	Перем ТаблицаСтраницРаздела;

	Если (Форма.СтруктураРеквизитовФормы.Организация  = Неопределено) Или (Форма.СтруктураРеквизитовФормы.Организация = РегламентированнаяОтчетностьКлиентСервер.ПустоеЗначениеТипа("СправочникСсылка.Организации")) Тогда
		Возврат;
	КонецЕсли;

	СписокПоказателей = Новый СписокЗначений;

	// Составляем список данных, необходимых для вывода в декларацию
	Если ПустаяСтрока(Форма.СтруктураРеквизитовФормы.мИННДиректор) Тогда

		СписокПоказателей.Добавить("", "ФИОРук"); // ФИО руководителя
		СписокПоказателей.Добавить("", "ТелРук"); // телефон руководителя из контактной информации
		// СведенияФЛ.Добавить("", "ТелРукДом");  // телефон руководителя ДОМАШНИЙ

		СписокПоказателей.Добавить("", "ВидУдЛичнРук");   // вид уд личности руководителя
		СписокПоказателей.Добавить("", "КодУдЛичнРук");   // код уд личности руководителя
		СписокПоказателей.Добавить("", "СерияУдЛичнРук"); // код уд личности руководителя
		СписокПоказателей.Добавить("", "НомерУдЛичнРук"); // код уд личности руководителя
		СписокПоказателей.Добавить("", "ОрганВыданУдЛичнРук"); // Кем выдан
		СписокПоказателей.Добавить("", "ДатаУдЛичнРук");
		СписокПоказателей.Добавить("", "ДатаРождРук");
		СписокПоказателей.Добавить("", "МестоРождРук");
		СписокПоказателей.Добавить("", "ПолРук");

		СписокПоказателей.Добавить("", "ИндексМЖРук");
		СписокПоказателей.Добавить("", "СубъектМЖРук");
		СписокПоказателей.Добавить("", "КодСубъектМЖРук");
		СписокПоказателей.Добавить("", "РайонМЖРук");
		СписокПоказателей.Добавить("", "ГородМЖРук");
		СписокПоказателей.Добавить("", "НПунктМЖРук");
		СписокПоказателей.Добавить("", "УлицаМЖРук");
		СписокПоказателей.Добавить("", "ДомМЖРук");
		СписокПоказателей.Добавить("", "КорпусМЖРук");
		СписокПоказателей.Добавить("", "КвартираМЖРук");

		СписокПоказателей.Добавить("", "ГраждРук");
		СписокПоказателей.Добавить("", "ГраждСтранаРук");

	КонецЕсли;

	Если ПустаяСтрока(Форма.СтруктураРеквизитовФормы.мИННБухгалтер) Тогда
		// Получим данные о бухгалтере
		СписокПоказателей.Добавить("", "ФИОБух");
		СписокПоказателей.Добавить("", "ТелБух");

		СписокПоказателей.Добавить("", "ВидУдЛичнБух");
		СписокПоказателей.Добавить("", "КодУдЛичнБух");
		СписокПоказателей.Добавить("", "СерияУдЛичнБух");
		СписокПоказателей.Добавить("", "НомерУдЛичнБух");
		СписокПоказателей.Добавить("", "ОрганВыданУдЛичнБух");
		СписокПоказателей.Добавить("", "ДатаУдЛичнБух");
		СписокПоказателей.Добавить("", "ДатаРождБух");
		СписокПоказателей.Добавить("", "МестоРождБух");
		СписокПоказателей.Добавить("", "ПолБух");

		СписокПоказателей.Добавить("", "ИндексМЖБух");
		СписокПоказателей.Добавить("", "СубъектМЖБух");
		СписокПоказателей.Добавить("", "КодСубъектМЖБух");
		СписокПоказателей.Добавить("", "РайонМЖБух");
		СписокПоказателей.Добавить("", "ГородМЖБух");
		СписокПоказателей.Добавить("", "НПунктМЖБух");
		СписокПоказателей.Добавить("", "УлицаМЖБух");
		СписокПоказателей.Добавить("", "ДомМЖБух");
		СписокПоказателей.Добавить("", "КорпусМЖБух");
		СписокПоказателей.Добавить("", "КвартираМЖБух");

		СписокПоказателей.Добавить("", "ГраждБух");
		СписокПоказателей.Добавить("", "ГраждСтранаБух");

	КонецЕсли;

	Если ПустаяСтрока(Форма.СтруктураРеквизитовФормы.мИННУпПред) Тогда
		
		// Получим данные о УП
		СписокПоказателей.Добавить("", "ФИОУпПред");
		СписокПоказателей.Добавить("", "ТелУпПред");

		СписокПоказателей.Добавить("", "ВидУдЛичнУпПред");
		СписокПоказателей.Добавить("", "КодУдЛичнУпПред");
		СписокПоказателей.Добавить("", "СерияУдЛичнУпПред");
		СписокПоказателей.Добавить("", "НомерУдЛичнУпПред");
		СписокПоказателей.Добавить("", "ОрганВыданУдЛичнУпПред");
		СписокПоказателей.Добавить("", "ДатаУдЛичнУпПред");
		СписокПоказателей.Добавить("", "ДатаРождУпПред");
		СписокПоказателей.Добавить("", "МестоРождУпПред");
		СписокПоказателей.Добавить("", "ПолУпПред");

		СписокПоказателей.Добавить("", "ИндексМЖУпПред");
		СписокПоказателей.Добавить("", "СубъектМЖУпПред");
		СписокПоказателей.Добавить("", "КодСубъектМЖУпПред");
		СписокПоказателей.Добавить("", "РайонМЖУпПред");
		СписокПоказателей.Добавить("", "ГородМЖУпПред");
		СписокПоказателей.Добавить("", "НПунктМЖУпПред");
		СписокПоказателей.Добавить("", "УлицаМЖУпПред");
		СписокПоказателей.Добавить("", "ДомМЖУпПред");
		СписокПоказателей.Добавить("", "КорпусМЖУпПред");
		СписокПоказателей.Добавить("", "КвартираМЖУпПред");
		// Инициализируем данные о УП

		СписокПоказателей.Добавить("", "ГраждУпПред");
		СписокПоказателей.Добавить("", "ГраждСтранаУпПред");

	КонецЕсли;

	ОргСведения = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(Форма.СтруктураРеквизитовФормы.Организация, Форма.ДатаПодписи, СписокПоказателей);

	ТаблицаСтраницРаздела = Неопределено;
	Если Не Форма.мСтруктураМногостраничныхРазделов.Свойство("ФизЛица", ТаблицаСтраницРаздела) Тогда
		Возврат;
	КонецЕсли;
	ТаблицаСтраницРаздела = Форма[ТаблицаСтраницРаздела];
	
	Если Форма.СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация
		ИЛИ СмениласьДатаПодписания
		ИЛИ ЗначениеЗаполнено(форма.СтруктураРеквизитовФормы.мСкопированаФорма) Тогда

		ТаблицаСтраницРаздела.Очистить();
		СтрПервая = ТаблицаСтраницРаздела.Добавить();
		СтрПервая.Представление = "Новая страница";
		СтрПервая.АктивнаяСтраница = Истина;
		СтрПервая.Данные.Добавить(ВозвратитьПустойОбразЛистаФЛ(Форма));
		СтрПервая.АвтоматическоеПредставление = Истина;

	ИначеЕсли (НЕ (Форма.СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация Или СмениласьДатаПодписания)) Тогда

		// Если документ новый, то в первый лист ФЛ запишем пустой образ листа ФЛ
		Если Не Форма.СтруктураРеквизитовФормы.мДокументВосстановлен Тогда
			ТаблицаСтраницРаздела[0].Данные[0].Значение = ВозвратитьПустойОбразЛистаФЛ(Форма);
		КонецЕсли;

	КонецЕсли;

	Если ПустаяСтрока(Форма.СтруктураРеквизитовФормы.мИННДиректор) Тогда

		ФИОДиректора = Форма.ТабличныйДокумент.Области.ОргДиректор.Значение;

		Если НЕ ПустаяСтрока(ФИОДиректора) Тогда
			СвязьУстановлена = Ложь;
			ТекИндекс = -1;
			Для Каждого Строка Из ТаблицаСтраницРаздела Цикл
				Если Строка.Данные[0].Значение.ФизЛицоФИО = ФИОДиректора Тогда
					ТекИндекс = ТаблицаСтраницРаздела.Индекс(Строка);
					СвязьУстановлена = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;

			ВыводДанныхОФизическомЛице_(Форма, СвязьУстановлена, ОргСведения, 1,, ТаблицаСтраницРаздела, ТекИндекс);

		КонецЕсли; // Если ФИО пусто

	КонецЕсли;

	Если ПустаяСтрока(Форма.СтруктураРеквизитовФормы.мИННБухгалтер) Тогда

		ФИОБухгалтера = Форма.ТабличныйДокумент.Области.ОргБухгалтер.Значение;

		Если НЕ ПустаяСтрока(ФИОБухгалтера) Тогда
			СвязьУстановлена = Ложь;
			ТекИндекс = -1;
			Для Каждого Строка Из ТаблицаСтраницРаздела Цикл
				Если Строка.Данные[0].Значение.ФизЛицоФИО = ФИОБухгалтера Тогда
					ТекИндекс = ТаблицаСтраницРаздела.Индекс(Строка);
					СвязьУстановлена = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;

			ВыводДанныхОФизическомЛице_(Форма, СвязьУстановлена, ОргСведения, 2, Истина, ТаблицаСтраницРаздела, ТекИндекс);

		КонецЕсли; // Если ФИО пусто

	КонецЕсли;

	Если ПустаяСтрока(Форма.СтруктураРеквизитовФормы.мИННУпПред) Тогда
		
		Попытка
			
			ФИООргУП = Форма.ТабличныйДокумент.Области.ОргУП.Значение;

		Если НЕ ПустаяСтрока(ФИООргУП) Тогда

			СвязьУстановлена = Ложь;
			ТекИндекс = -1;
			Для Каждого Строка Из ТаблицаСтраницРаздела Цикл
				Если Строка.Данные[0].Значение.ФизЛицоФИО = ФИООргУП Тогда
					ТекИндекс = ТаблицаСтраницРаздела.Индекс(Строка);
					СвязьУстановлена = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;

			ВыводДанныхОФизическомЛице_(Форма, СвязьУстановлена, ОргСведения, 3,, ТаблицаСтраницРаздела, ТекИндекс);
			
		КонецЕсли;

		Исключение
		КонецПопытки;

	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ПолучитьНазваниеДляИностраннойОрганизации()
	
	Сведения = Новый СписокЗначений;
	Сведения.Добавить("", "НаимИОПол"); // Наименование иностранной орг
	ОргСведения = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(СтруктураРеквизитовФормы.Организация, ДатаПодписи, Сведения);
	НаимИОПол = "";
	ОргСведения.Свойство("НаимИОПол", НаимИОПол);
	
	Возврат НаимИОПол;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ВыводДанныхОФизическомЛице_(Форма, Знач СвязьУстановлена, Знач Данные, ТипДанных, ОграниченияВыводаУчесть = Ложь, ТаблицаСтраницРазделаМ, ИндексВТабл);

	// Для авансов по ЕСН, парметры Ложь, т.к. лист ФЛ не заполняется
	СохранятьИННнаЛисте = Истина;
	СохранятьКППнаЛисте = Истина;
	ФизЛицСлТел = Истина;
	ФизЛицДомТел = Истина;
	ФизЛицДатаРожд = Истина;
	ЕстьПол = Истина;
	ГраждСтранаЕсть = Истина;
	ГраждСтранаКодЕсть = Истина;
	ФизЛицМестоР = Истина;

	ФИО = "";
	Тел = "";
	ВидУдЛичн = "";
	КодУдЛичн = "";
	СерияУдЛичн = "";
	НомерУдЛичн = "";
	ОрганВыданУдЛичн = "";
	ДатаУдЛичн = РегламентированнаяОтчетностьКлиентСервер.ПустоеЗначениеТипа(Тип("Дата"));
	ИндексМЖ = "";
	СубъектМЖ = "";
	КодСубъектМЖ = "";
	РайонМЖ = "";
	ГородМЖ = "";
	НПунктМЖ = "";
	УлицаМЖ = "";
	ДомМЖ = "";
	КорпусМЖ = "";
	КвартираМЖ = "";
	МестоРожд = "";

	Гражд = "";
	ГраждСтрана = "";

	Пол = 0;

	ДатаРожд = РегламентированнаяОтчетностьКлиентСервер.ПустоеЗначениеТипа(Тип("Дата"));

	// Для УП
	Если ТипДанных = 3 Тогда
		КодНО = РегламентированнаяОтчетностьКлиентСервер.ВернутьЗначениеПараметраСЛиста(Форма, "Титульный", "КодИМНС");
		КППТитульныйЛист = РегламентированнаяОтчетностьКлиентСервер.ВернутьЗначениеПараметраСЛиста(Форма, "Титульный", "КПП1");
		ДанныеПредставителя = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОПредставителе(Форма.СтруктураРеквизитовФормы.Организация, Форма.ДатаПодписи, Ложь, КодНО, КППТитульныйЛист);
		ЗаполнитьЗначенияСвойств(Данные, ДанныеПредставителя);
	КонецЕсли;

	Данные.Свойство(?(ТипДанных = 1,"ФИОРук",              ?(ТипДанных = 2, "ФИОБух",              ?(ТипДанных = 3, "ФИОУпПред",""))),              ФИО);

	Данные.Свойство(?(ТипДанных = 1,"ГраждРук",            ?(ТипДанных = 2, "ГраждБух",            ?(ТипДанных = 3, "ГраждУпПред",""))),            Гражд);
	Данные.Свойство(?(ТипДанных = 1,"ГраждСтранаРук",      ?(ТипДанных = 2, "ГраждСтранаБух",      ?(ТипДанных = 3, "ГраждСтранаУпПред",""))),      ГраждСтрана);

	Данные.Свойство(?(ТипДанных = 1,"ТелРук",              ?(ТипДанных = 2, "ТелБух",              ?(ТипДанных = 3, "ТелУпПред",""))),              Тел);
	Данные.Свойство(?(ТипДанных = 1,"ВидУдЛичнРук",        ?(ТипДанных = 2, "ВидУдЛичнБух",        ?(ТипДанных = 3, "ВидУдЛичнУпПред",""))),        ВидУдЛичн);
	Данные.Свойство(?(ТипДанных = 1,"КодУдЛичнРук",        ?(ТипДанных = 2, "КодУдЛичнБух",        ?(ТипДанных = 3, "КодУдЛичнУпПред",""))),        КодУдЛичн);
	Данные.Свойство(?(ТипДанных = 1,"ДатаРождРук",         ?(ТипДанных = 2, "ДатаРождБух",         ?(ТипДанных = 3, "ДатаРождУпПред",""))),         ДатаРожд);
	Данные.Свойство(?(ТипДанных = 1,"МестоРождРук",        ?(ТипДанных = 2, "МестоРождБух",        ?(ТипДанных = 3, "МестоРождУпПред",""))),        МестоРожд);
	Данные.Свойство(?(ТипДанных = 1,"СерияУдЛичнРук",      ?(ТипДанных = 2, "СерияУдЛичнБух",      ?(ТипДанных = 3, "СерияУдЛичнУпПред",""))),      СерияУдЛичн);
	Данные.Свойство(?(ТипДанных = 1,"НомерУдЛичнРук",      ?(ТипДанных = 2, "НомерУдЛичнБух",      ?(ТипДанных = 3, "НомерУдЛичнУпПред",""))),      НомерУдЛичн);
	Данные.Свойство(?(ТипДанных = 1,"ПолРук",              ?(ТипДанных = 2, "ПолБух",              ?(ТипДанных = 3, "ПолУпПред",""))),              Пол);
	Данные.Свойство(?(ТипДанных = 1,"ОрганВыданУдЛичнРук", ?(ТипДанных = 2, "ОрганВыданУдЛичнБух", ?(ТипДанных = 3, "ОрганВыданУдЛичнУпПред",""))), ОрганВыданУдЛичн);
	Данные.Свойство(?(ТипДанных = 1,"ДатаУдЛичнРук",       ?(ТипДанных = 2, "ДатаУдЛичнБух",       ?(ТипДанных = 3, "ДатаУдЛичнУпПред",""))),       ДатаУдЛичн);
	Данные.Свойство(?(ТипДанных = 1,"ИндексМЖРук",         ?(ТипДанных = 2, "ИндексМЖБух",         ?(ТипДанных = 3, "ИндексМЖУпПред",""))),         ИндексМЖ);
	Данные.Свойство(?(ТипДанных = 1,"СубъектМЖРук",        ?(ТипДанных = 2, "СубъектМЖБух",        ?(ТипДанных = 3, "СубъектМЖУпПред",""))),        СубъектМЖ);
	Данные.Свойство(?(ТипДанных = 1,"КодСубъектМЖРук",     ?(ТипДанных = 2, "КодСубъектМЖБух",     ?(ТипДанных = 3, "КодСубъектМЖУпПред",""))),     КодСубъектМЖ);
	Данные.Свойство(?(ТипДанных = 1,"РайонМЖРук",          ?(ТипДанных = 2, "РайонМЖБух",          ?(ТипДанных = 3, "РайонМЖУпПред",""))),          РайонМЖ);
	Данные.Свойство(?(ТипДанных = 1,"ГородМЖРук",          ?(ТипДанных = 2, "ГородМЖБух",          ?(ТипДанных = 3, "ГородМЖУпПред",""))),          ГородМЖ);
	Данные.Свойство(?(ТипДанных = 1,"НПунктМЖРук",         ?(ТипДанных = 2, "НПунктМЖБух",         ?(ТипДанных = 3, "НПунктМЖУпПред",""))),         НПунктМЖ);
	Данные.Свойство(?(ТипДанных = 1,"УлицаМЖРук",          ?(ТипДанных = 2, "УлицаМЖБух",          ?(ТипДанных = 3, "УлицаМЖУпПред",""))),          УлицаМЖ);
	Данные.Свойство(?(ТипДанных = 1,"ДомМЖРук",            ?(ТипДанных = 2, "ДомМЖБух",            ?(ТипДанных = 3, "ДомМЖУпПред",""))),            ДомМЖ);
	Данные.Свойство(?(ТипДанных = 1,"КорпусМЖРук",         ?(ТипДанных = 2, "КорпусМЖБух",         ?(ТипДанных = 3, "КорпусМЖУпПред",""))),         КорпусМЖ);
	Данные.Свойство(?(ТипДанных = 1,"КвартираМЖРук",       ?(ТипДанных = 2, "КвартираМЖБух",       ?(ТипДанных = 3, "КвартираМЖУпПред",""))),       КвартираМЖ);

	Если НЕ СвязьУстановлена Тогда

		// нужно создать новый экземпляр докумнта, предварительно сняв активность у активного листа
		// в случае, если ФИО в структуре числое, то считаем что лист готов для заполнения и пишем информацию в него
		СтрТаблицыСтраницы = ТаблицаСтраницРазделаМ.НайтиСтроки(Новый Структура("АктивнаяСтраница", Истина));
		
		Если ТаблицаСтраницРазделаМ.Количество() = 0 Тогда
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='Ошибка установки активной страницы раздела ФЛ.'");
			Сообщение.Сообщить();
			
		КонецЕсли;

		Если СтрТаблицыСтраницы.Количество() > 0 Тогда
			СтрТаблицаСтраницы  = СтрТаблицыСтраницы[0];
		Иначе
			СтрТаблицаСтраницы  = ТаблицаСтраницРазделаМ[0];
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СтрТаблицаСтраницы.Данные[0].Значение.ФизЛицоФИО) Тогда

			СтрокаДляВставкиДанных = СтрТаблицаСтраницы;

			// Пишем в этот лист

		Иначе

			// Убираем активность у текущей страницы
			СтрТаблицаСтраницы.АктивнаяСтраница = Ложь;

			СтрНоваяСтраница = ТаблицаСтраницРазделаМ.Добавить();

			// Присваиваем представление по умолчанию
			СтрНоваяСтраница.Представление = "Новая страница";

			СтрНоваяСтраница.АвтоматическоеПредставление = Истина;

			СтрНоваяСтраница.АктивнаяСтраница = Истина;

			СтрНоваяСтраница.Данные.Добавить(ВозвратитьПустойОбразЛистаФЛ(Форма));

			СтрокаДляВставкиДанных = СтрНоваяСтраница;

		КонецЕсли;

	ИначеЕсли СвязьУстановлена Тогда

		// Пишем в раздел с индексом ИндексВТабл
		СтрокаДляВставкиДанных = ТаблицаСтраницРазделаМ[ИндексВТабл];
		
	КонецЕсли;

	// Определим простой порядковый номер
	ИндексСтроки = ТаблицаСтраницРазделаМ.Индекс(СтрокаДляВставкиДанных);

	// Определим простой порядковый номер
	ИндексСтроки = ТаблицаСтраницРазделаМ.Индекс(СтрокаДляВставкиДанных);

	// Теперь можно выводить данные на страницу
	Если (НЕ СвязьУстановлена) Тогда

		СтрокаДляВставкиДанных.Данные[0].Значение.Вставить("ФизЛицоФИО", ФИО);
		Представление = СтрокаДляВставкиДанных.Данные[0].Значение[РегламентированнаяОтчетностьКлиентСервер.ПолучитьСвойствоРаздела(Форма, "ФизЛица", "ИмяПредставления")];
		СтрокаДляВставкиДанных.Представление = Представление + ". Лист N " + Строка(ИндексСтроки + 1);

	КонецЕсли;

	// В случае, если на листе ФЛ такого параметра нет, то пропускаем, и делаем все через Попытку/Исключить
	// чтобы сохранить универсальность и переносимость функции
	Попытка
		Если (НЕ СвязьУстановлена) Тогда
			СтрокаДляВставкиДанных.Данные[0].Значение.Вставить("ФизЛицСлТел", Форма.СтруктураРеквизитовФормы.мТелОрганизации);
		Иначе
			Если ПустаяСтрока(СтрокаДляВставкиДанных.Данные[0].Значение.ФизЛицСлТел) Тогда
				СтрокаДляВставкиДанных.Данные[0].Значение.Вставить("ФизЛицСлТел", Форма.СтруктураРеквизитовФормы.мТелОрганизации);
			КонецЕсли;
		КонецЕсли;
	Исключение
	// В случае, если на листе ФЛ такого параметра нет, то пропускаем, и делаем все через Попытку/Исключить
	// чтобы сохранить универсальность и переносимость функции
	КонецПопытки;

	// В случае, если на листе ФЛ такого параметра нет, то пропускаем, и делаем все через Попытку/Исключить
	// чтобы сохранить универсальность и переносимость функции
	Попытка
		Если (НЕ СвязьУстановлена) Тогда
			СтрокаДляВставкиДанных.Данные[0].Значение.Вставить("ФизЛицДомТел", Тел);
		Иначе
			Если ПустаяСтрока(СтрокаДляВставкиДанных.Данные[0].Значение.ФизЛицДомТел) Тогда
				СтрокаДляВставкиДанных.Данные[0].Значение.Вставить("ФизЛицДомТел", Тел);
			КонецЕсли;
		КонецЕсли;
	Исключение
	// В случае, если на листе ФЛ такого параметра нет, то пропускаем, и делаем все через Попытку/Исключить
	// чтобы сохранить универсальность и переносимость функции
	КонецПопытки;

	// В случае, если на листе ФЛ такого параметра нет, то пропускаем, и делаем все через Попытку/Исключить
	// чтобы сохранить универсальность и переносимость функции
	Попытка
		Если (НЕ СвязьУстановлена) Тогда
			СтрокаДляВставкиДанных.Данные[0].Значение.Вставить("ФизЛицДокВид", ВидУдЛичн);
		Иначе
			Если ПустаяСтрока(СтрокаДляВставкиДанных.Данные[0].Значение.ФизЛицДокВид) Тогда
				СтрокаДляВставкиДанных.Данные[0].Значение.Вставить("ФизЛицДокВид", ВидУдЛичн);
			КонецЕсли;
		КонецЕсли;
	Исключение
	// В случае, если на листе ФЛ такого параметра нет, то пропускаем, и делаем все через Попытку/Исключить
	// чтобы сохранить универсальность и переносимость функции
	КонецПопытки;

	// В случае, если на листе ФЛ такого параметра нет, то пропускаем, и делаем все через Попытку/Исключить
	// чтобы сохранить универсальность и переносимость функции
	Попытка
		Если (НЕ СвязьУстановлена) Тогда
			СтрокаДляВставкиДанных.Данные[0].Значение.Вставить("ФизЛицДок", КодУдЛичн);
		Иначе
			Если ПустаяСтрока(СтрокаДляВставкиДанных.Данные[0].Значение.ФизЛицДок) Тогда
				СтрокаДляВставкиДанных.Данные[0].Значение.Вставить("ФизЛицДок", КодУдЛичн);
			КонецЕсли;
		КонецЕсли;
	Исключение
	// В случае, если на листе ФЛ такого параметра нет, то пропускаем, и делаем все через Попытку/Исключить
	// чтобы сохранить универсальность и переносимость функции
	КонецПопытки;

	// В случае, если на листе ФЛ такого параметра нет, то пропускаем, и делаем все через Попытку/Исключить
	// чтобы сохранить универсальность и переносимость функции
	Попытка
		Если (НЕ СвязьУстановлена) Тогда
			СтрокаДляВставкиДанных.Данные[0].Значение.Вставить("ФизЛицДокСерияНомер", СерияУдЛичн + "  " + НомерУдЛичн);
		Иначе
			Если ПустаяСтрока(СтрокаДляВставкиДанных.Данные[0].Значение.ФизЛицДокСерияНомер) Тогда
				СтрокаДляВставкиДанных.Данные[0].Значение.Вставить("ФизЛицДокСерияНомер", СерияУдЛичн + "  " + НомерУдЛичн);
			КонецЕсли;
		КонецЕсли;
	Исключение
	// В случае, если на листе ФЛ такого параметра нет, то пропускаем, и делаем все через Попытку/Исключить
	// чтобы сохранить универсальность и переносимость функции
	КонецПопытки;

	// В случае, если на листе ФЛ такого параметра нет, то пропускаем, и делаем все через Попытку/Исключить
	// чтобы сохранить универсальность и переносимость функции
	Попытка
		Если НЕ ОграниченияВыводаУчесть Тогда
		// в некоторых декларация определенные параметры для бухгалтера ввыводить на лист не нужно
			Если (НЕ СвязьУстановлена) Тогда
				
				СтрокаДляВставкиДанных.Данные[0].Значение.Вставить("ФизЛицДатаР", ДатаРожд);
				
				Иначе
					Если НЕ ЗначениеЗаполнено(СтрокаДляВставкиДанных.Данные[0].Значение.ФизЛицДатаР) Тогда
						СтрокаДляВставкиДанных.Данные[0].Значение.Вставить("ФизЛицДатаР", ДатаРожд);
					КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	Исключение
	// В случае, если на листе ФЛ такого параметра нет, то пропускаем, и делаем все через Попытку/Исключить
	// чтобы сохранить универсальность и переносимость функции
	КонецПопытки;

	// В случае, если на листе ФЛ такого параметра нет, то пропускаем, и делаем все через Попытку/Исключить
	// чтобы сохранить универсальность и переносимость функции
	Попытка
		Если НЕ ОграниченияВыводаУчесть Тогда
		// в некоторых декларация определенные параметры для бухгалтера ввыводить на лист не нужно
			Если (НЕ СвязьУстановлена) Тогда
				СтрокаДляВставкиДанных.Данные[0].Значение.Вставить("ФизЛицМестоР", МестоРожд);
			Иначе
				Если НЕ ЗначениеЗаполнено(СтрокаДляВставкиДанных.Данные[0].Значение.ФизЛицМестоР) Тогда
					СтрокаДляВставкиДанных.Данные[0].Значение.Вставить("ФизЛицМестоР", МестоРожд);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	Исключение
	// В случае, если на листе ФЛ такого параметра нет, то пропускаем, и делаем все через Попытку/Исключить
	// чтобы сохранить универсальность и переносимость функции
	КонецПопытки;

	// В случае, если на листе ФЛ такого параметра нет, то пропускаем, и делаем все через Попытку/Исключить
	// чтобы сохранить универсальность и переносимость функции
	Попытка
		Если (НЕ СвязьУстановлена) Тогда
			СтрокаДляВставкиДанных.Данные[0].Значение.Вставить("ФизЛицДокВыдан", ОрганВыданУдЛичн);
		Иначе
			Если ПустаяСтрока(СтрокаДляВставкиДанных.Данные[0].Значение.ФизЛицДокВыдан) Тогда
				СтрокаДляВставкиДанных.Данные[0].Значение.Вставить("ФизЛицДокВыдан", ОрганВыданУдЛичн);
			КонецЕсли;
		КонецЕсли;
	Исключение
	// В случае, если на листе ФЛ такого параметра нет, то пропускаем, и делаем все через Попытку/Исключить
	// чтобы сохранить универсальность и переносимость функции
	КонецПопытки;

	// В случае, если на листе ФЛ такого параметра нет, то пропускаем, и делаем все через Попытку/Исключить
	// чтобы сохранить универсальность и переносимость функции
	Попытка

		Если (НЕ СвязьУстановлена) Тогда

			СтрокаДляВставкиДанных.Данные[0].Значение.Вставить("ФизЛицДокДата", ДатаУдЛичн);

		Иначе

			Если НЕ ЗначениеЗаполнено(СтрокаДляВставкиДанных.Данные[0].Значение.ФизЛицДокДата) Тогда

				СтрокаДляВставкиДанных.Данные[0].Значение.Вставить("ФизЛицДокДата", ДатаУдЛичн);

			КонецЕсли;

		КонецЕсли;

	Исключение
	// В случае, если на листе ФЛ такого параметра нет, то пропускаем, и делаем все через Попытку/Исключить
	// чтобы сохранить универсальность и переносимость функции
	КонецПопытки;

	// В случае, если на листе ФЛ такого параметра нет, то пропускаем, и делаем все через Попытку/Исключить
	// чтобы сохранить универсальность и переносимость функции
	Попытка
		Если (НЕ СвязьУстановлена) Тогда
			
			СтрокаДляВставкиДанных.Данные[0].Значение.Вставить("ФизЛицИнд", ИндексМЖ);
			
		Иначе

			Если ПустаяСтрока(СтрокаДляВставкиДанных.Данные[0].Значение.ФизЛицИнд) Тогда

				СтрокаДляВставкиДанных.Данные[0].Значение.Вставить("ФизЛицИнд", ИндексМЖ);

			КонецЕсли;
		КонецЕсли;
	Исключение
	// В случае, если на листе ФЛ такого параметра нет, то пропускаем, и делаем все через Попытку/Исключить
	// чтобы сохранить универсальность и переносимость функции
	КонецПопытки;

	// В случае, если на листе ФЛ такого параметра нет, то пропускаем, и делаем все через Попытку/Исключить
	// чтобы сохранить универсальность и переносимость функции
	Попытка
		Если (НЕ СвязьУстановлена) Тогда

			СтрокаДляВставкиДанных.Данные[0].Значение.Вставить("ФизЛицСубъект", СубъектМЖ);

		Иначе

			Если ПустаяСтрока(СтрокаДляВставкиДанных.Данные[0].Значение.ФизЛицСубъект) Тогда
				СтрокаДляВставкиДанных.Данные[0].Значение.Вставить("ФизЛицСубъект", СубъектМЖ);
			КонецЕсли;

		КонецЕсли;
	Исключение
	// В случае, если на листе ФЛ такого параметра нет, то пропускаем, и делаем все через Попытку/Исключить
	// чтобы сохранить универсальность и переносимость функции
	КонецПопытки;

	// В случае, если на листе ФЛ такого параметра нет, то пропускаем, и делаем все через Попытку/Исключить
	// чтобы сохранить универсальность и переносимость функции
	Попытка
		Если (НЕ СвязьУстановлена) Тогда

			СтрокаДляВставкиДанных.Данные[0].Значение.Вставить("ФизЛицС", КодСубъектМЖ);

		Иначе

			Если ПустаяСтрока(СтрокаДляВставкиДанных.Данные[0].Значение.ФизЛицС) Тогда

				СтрокаДляВставкиДанных.Данные[0].Значение.Вставить("ФизЛицС", КодСубъектМЖ);

			КонецЕсли;

		КонецЕсли;
	Исключение
	// В случае, если на листе ФЛ такого параметра нет, то пропускаем, и делаем все через Попытку/Исключить
	// чтобы сохранить универсальность и переносимость функции
	КонецПопытки;

	Если (НЕ СвязьУстановлена) Тогда

		СтрокаДляВставкиДанных.Данные[0].Значение.Вставить("ФизЛицРайон", РайонМЖ);

	Иначе

		Если ПустаяСтрока(СтрокаДляВставкиДанных.Данные[0].Значение.ФизЛицРайон) Тогда
			СтрокаДляВставкиДанных.Данные[0].Значение.Вставить("ФизЛицРайон", РайонМЖ);
		КонецЕсли;

	КонецЕсли;

	Если (НЕ СвязьУстановлена) Тогда
		СтрокаДляВставкиДанных.Данные[0].Значение.Вставить("ФизЛицГород", ГородМЖ);
	Иначе
		Если ПустаяСтрока(СтрокаДляВставкиДанных.Данные[0].Значение.ФизЛицГород) Тогда
			СтрокаДляВставкиДанных.Данные[0].Значение.Вставить("ФизЛицГород", ГородМЖ);
		КонецЕсли;
	КонецЕсли;

	Если (НЕ СвязьУстановлена) Тогда

		СтрокаДляВставкиДанных.Данные[0].Значение.Вставить("ФизЛицНП", НПунктМЖ);

	Иначе

		Если ПустаяСтрока(СтрокаДляВставкиДанных.Данные[0].Значение.ФизЛицНП) Тогда
			СтрокаДляВставкиДанных.Данные[0].Значение.Вставить("ФизЛицНП", НПунктМЖ);
		КонецЕсли;

	КонецЕсли;

	Если (НЕ СвязьУстановлена) Тогда

		СтрокаДляВставкиДанных.Данные[0].Значение.Вставить("ФизЛицУлица", УлицаМЖ);

	Иначе

		Если ПустаяСтрока(СтрокаДляВставкиДанных.Данные[0].Значение.ФизЛицУлица) Тогда
			СтрокаДляВставкиДанных.Данные[0].Значение.Вставить("ФизЛицУлица", УлицаМЖ);
		КонецЕсли;

	КонецЕсли;

	Если (НЕ СвязьУстановлена) Тогда

		СтрокаДляВставкиДанных.Данные[0].Значение.Вставить("ФизЛицДом", ДомМЖ);

	Иначе

		Если ПустаяСтрока(СтрокаДляВставкиДанных.Данные[0].Значение.ФизЛицДом) Тогда
			СтрокаДляВставкиДанных.Данные[0].Значение.Вставить("ФизЛицДом", ДомМЖ);
		КонецЕсли;

	КонецЕсли;

	Если (НЕ СвязьУстановлена) Тогда

		СтрокаДляВставкиДанных.Данные[0].Значение.Вставить("ФизЛицКорпус", КорпусМЖ);

	Иначе

		Если ПустаяСтрока(СтрокаДляВставкиДанных.Данные[0].Значение.ФизЛицКорпус) Тогда

			СтрокаДляВставкиДанных.Данные[0].Значение.Вставить("ФизЛицКорпус", КорпусМЖ);

		КонецЕсли;

	КонецЕсли;

	Если (НЕ СвязьУстановлена) Тогда

		СтрокаДляВставкиДанных.Данные[0].Значение.Вставить("ФизЛицКвартира", КвартираМЖ);

	Иначе

		Если ПустаяСтрока(СтрокаДляВставкиДанных.Данные[0].Значение.ФизЛицКвартира) Тогда

			СтрокаДляВставкиДанных.Данные[0].Значение.Вставить("ФизЛицКвартира", КвартираМЖ);

		КонецЕсли;

	КонецЕсли;

	Если ЕстьПол Тогда
		Если НЕ ОграниченияВыводаУчесть Тогда
		// в некоторых декларация определенные параметры для бухгалтера ввыводить на лист не нужно
			ПолМ = СтрокаДляВставкиДанных.Данные[0].Значение.ФизЛицПолМ;
			ПолЖ = СтрокаДляВставкиДанных.Данные[0].Значение.ФизЛицПолЖ;

			Если (НЕ СвязьУстановлена) Тогда

				СтрокаДляВставкиДанных.Данные[0].Значение.Вставить("ФизЛицПолМ", ?(Пол = 1, "V", ""));
				СтрокаДляВставкиДанных.Данные[0].Значение.Вставить("ФизЛицПолЖ", ?(Пол = 2, "V", ""));

			Иначе

				Если (НЕ ЗначениеЗаполнено(ПолЖ)) И (НЕ ЗначениеЗаполнено(ПолМ)) Тогда
					СтрокаДляВставкиДанных.Данные[0].Значение.Вставить("ФизЛицПолМ", ?(Пол = 1, "V", ""));
					СтрокаДляВставкиДанных.Данные[0].Значение.Вставить("ФизЛицПолЖ", ?(Пол = 2, "V", ""));
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;

	КонецЕсли;

	Если ГраждСтранаЕсть Тогда
		// Гражданство заполняем для всех, кроме главного бухгалтера
		Если ТипДанных <> 2 Тогда
			// В случае, если на листе ФЛ такого параметра нет, то пропускаем, и делаем все через Попытку/Исключить
			// чтобы сохранить универсальность и переносимость функции

			ГраждСтрана = ?(НЕ ЗначениеЗаполнено(ГраждСтрана), "лицо без гражданства", ГраждСтрана);

			Если (НЕ СвязьУстановлена) Тогда
				СтрокаДляВставкиДанных.Данные[0].Значение.Вставить("ФизЛицГражданство", ГраждСтрана);
			Иначе
				Если ПустаяСтрока(СтрокаДляВставкиДанных.Данные[0].Значение.ФизЛицГражданство) Тогда
					СтрокаДляВставкиДанных.Данные[0].Значение.Вставить("ФизЛицГражданство", ГраждСтрана);
				КонецЕсли;
			КонецЕсли;

		КонецЕсли;

	КонецЕсли;

	Если ТипДанных <> 2 Тогда
		// В случае, если на листе ФЛ такого параметра нет, то пропускаем, и делаем все через Попытку/Исключить
		// чтобы сохранить универсальность и переносимость функции

		КодСтраны = СтрокаДляВставкиДанных.Данные[0].Значение.ФизЛицКодГражд;

		Если (НЕ СвязьУстановлена) Тогда
			СтрокаДляВставкиДанных.Данные[0].Значение.Вставить("ФизЛицКодГражд", Гражд);
		Иначе
			Если ПустаяСтрока(КодСтраны) Тогда
				СтрокаДляВставкиДанных.Данные[0].Значение.Вставить("ФизЛицКодГражд", Гражд);
			КонецЕсли;
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПолучитьИННКПП()

	// Теперь получаем данные из глобальной общей функции
	ОргСведения = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(СтруктураРеквизитовФормы.Организация, ДатаПодписи, "ИННЮЛ, КППЮЛ, ТелОрганизации");

	ИННЮЛ = "";
	КППЮЛ = "";
	ОргСведения.Свойство("ИННЮЛ", ИННЮЛ);
	ОргСведения.Свойство("КППЮЛ", КППЮЛ);

	СтруктураРеквизитовФормы.мИННЮЛ = ИННЮЛ;
	СтруктураРеквизитовФормы.мКППЮЛ = КППЮЛ;

	СтруктураРеквизитовФормы.мТелОрганизации = "";
	ОргСведения.Свойство("ТелОрганизации", СтруктураРеквизитовФормы.мТелОрганизации);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьДатуВЯчейках(Форма) Экспорт

	ДатаПодписиРук = "";
	ДатаПодписиБух = "";
	ДатаПодписиУпП = "";

КонецПроцедуры

&НаСервере
Функция СобратьДанныеТекущегоТаблПоляНаСервере(ИмяТабличногоПоля) Экспорт
	
	Возврат СобратьДанныеТекущегоТаблПоля(ЭтаФорма, ИмяТабличногоПоля);

КонецФункции

&НаКлиенте
Функция СобратьДанныеТекущегоТаблПоляНаКлиенте(ИмяТабличногоПоля) Экспорт
	
	Возврат СобратьДанныеТекущегоТаблПоля(ЭтаФорма, ИмяТабличногоПоля);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СобратьДанныеТекущегоТаблПоля(Форма, ТабличноеПоле) Экспорт
	
	ИмяРаздела = Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела;
	
	СтруктураДанныхПоля = Новый Структура;
	
	Для Каждого ТекущаяОбласть Из Форма[ТабличноеПоле].Области Цикл
		
		Если ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник И ТекущаяОбласть.СодержитЗначение = Истина Тогда
			ИмяПоказателя      = ТекущаяОбласть.Имя;
			ЗначениеПоказателя = ТекущаяОбласть.Значение;
			
			Если ИмяРаздела = "Раздел3" Тогда
				Если (СтрНайти(ИмяПоказателя, "П0") > 0) И (Прав(ИмяПоказателя, 1) = "0") Тогда
					
					НомерСтроки = Сред(ИмяПоказателя, 9, 3);
					
					Если РегламентированнаяОтчетностьКлиентСервер.ЯвляетсяЧислом(НомерСтроки) Тогда
						Если Число(НомерСтроки) >= 190 Тогда
							Если ЗначениеПоказателя = "V" Тогда
								ЗначениеПоказателя = "1";
							Иначе
								ЗначениеПоказателя = "0";
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
					
				КонецЕсли;
			КонецЕсли;
			
			СтруктураДанныхПоля.Вставить(ИмяПоказателя, ЗначениеПоказателя);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ИмяРаздела = "Раздел1_1" Тогда

		СтруктураДанныхПоля.Вставить("КодОКАТО1",  Форма.СтруктураРеквизитовФормы.мКодОКАТО1);

		СтруктураДанныхПоля.Вставить("КБКвФБ_1_1", Форма.СтруктураРеквизитовФормы.мКБКвФБ_1_1);
		СтруктураДанныхПоля.Вставить("КБКвФБ_1_2", Форма.СтруктураРеквизитовФормы.мКБКвФБ_1_2);
		СтруктураДанныхПоля.Вставить("КБКвФБ_1_3", Форма.СтруктураРеквизитовФормы.мКБКвФБ_1_3);

		СтруктураДанныхПоля.Вставить("СуммаНалога1_1", Форма.СтруктураРеквизитовФормы.мСуммаНалога1_1);
		СтруктураДанныхПоля.Вставить("СуммаНалога1_2", Форма.СтруктураРеквизитовФормы.мСуммаНалога1_2);
		СтруктураДанныхПоля.Вставить("СуммаНалога1_3", Форма.СтруктураРеквизитовФормы.мСуммаНалога1_3);

		СтруктураДанныхПоля.Вставить("СуммаНалУм1_1",  Форма.СтруктураРеквизитовФормы.мСуммаНалУм1_1);
		СтруктураДанныхПоля.Вставить("СуммаНалУм1_2",  Форма.СтруктураРеквизитовФормы.мСуммаНалУм1_2);
		СтруктураДанныхПоля.Вставить("СуммаНалУм1_3",  Форма.СтруктураРеквизитовФормы.мСуммаНалУм1_3);
		
		СтруктураДанныхПоля.Вставить("СуммаПерех1_1",  Форма.СтруктураРеквизитовФормы.мСуммаПерех1_1);
		СтруктураДанныхПоля.Вставить("СуммаПерех1_2",  Форма.СтруктураРеквизитовФормы.мСуммаПерех1_2);
		СтруктураДанныхПоля.Вставить("СуммаПерех1_3",  Форма.СтруктураРеквизитовФормы.мСуммаПерех1_3);

	ИначеЕсли ИмяРаздела = "Раздел1_2" Тогда

		СтруктураДанныхПоля.Вставить("КБКРаздел12",          Форма.СтруктураРеквизитовФормы.мКБКРаздел12         );
		СтруктураДанныхПоля.Вставить("КодОКАТОРаздел12",     Форма.СтруктураРеквизитовФормы.мКодОКАТОРаздел12    );
		СтруктураДанныхПоля.Вставить("СуммаДоплФедРаздел12", Форма.СтруктураРеквизитовФормы.мСуммаДоплФедРаздел12);
		СтруктураДанныхПоля.Вставить("СуммаУменФедРаздел12", Форма.СтруктураРеквизитовФормы.мСуммаУменФедРаздел12);

	ИначеЕсли ИмяРаздела = "Раздел1_3" Тогда

		СтруктураДанныхПоля.Вставить("КБКРаздел13",          Форма.СтруктураРеквизитовФормы.мКБКРаздел13    );
		СтруктураДанныхПоля.Вставить("КодОКАТОРаздел13",     Форма.СтруктураРеквизитовФормы.мКодОКАТОРаздел13);
		СтруктураДанныхПоля.Вставить("СуммаДоплФедРаздел13", Форма.СтруктураРеквизитовФормы.мСуммаДоплФедРаздел13);
		СтруктураДанныхПоля.Вставить("СуммаУменФедРаздел13", Форма.СтруктураРеквизитовФормы.мСуммаУменФедРаздел13);

	ИначеЕсли ИмяРаздела = "Раздел2" Тогда

		ЗначениеПоказателя1 = Неопределено;
		ЗначениеПоказателя2 = Неопределено;

		СтруктураДанныхПоля.Свойство("ПодачаЗаПредПериодДа", ЗначениеПоказателя1);
		СтруктураДанныхПоля.Свойство("ПодачаЗаПредПериодНет", ЗначениеПоказателя2);

		Если НЕ ЗначениеЗаполнено(ЗначениеПоказателя1) И НЕ ЗначениеЗаполнено(ЗначениеПоказателя2) Тогда
			СтруктураДанныхПоля.Вставить("_П000020001000", "");   // Неопределено.
		ИначеЕсли НЕ ЗначениеЗаполнено(ЗначениеПоказателя1) Тогда // Если ДА пусто, то нет
			СтруктураДанныхПоля.Вставить("_П000020001000", "0");  // Нет
		Иначе
			СтруктураДанныхПоля.Вставить("_П000020001000", "1");  // Да
		КонецЕсли;

		ЗначениеПоказателя1 = Неопределено;
		СтруктураДанныхПоля.Свойство("НачДеят", ЗначениеПоказателя1);

		Если НЕ ЗначениеЗаполнено(ЗначениеПоказателя1) Тогда
			СтруктураДанныхПоля.Вставить("_П000020002000", "0");
		Иначе
			СтруктураДанныхПоля.Вставить("_П000020002000", "1");
		КонецЕсли;

		ЗначениеПоказателя1 = Неопределено;
		СтруктураДанныхПоля.Свойство("КонДеят", ЗначениеПоказателя1);

		Если НЕ ЗначениеЗаполнено(ЗначениеПоказателя1) Тогда
			СтруктураДанныхПоля.Вставить("_П000020003000", "0");
		Иначе
			СтруктураДанныхПоля.Вставить("_П000020003000", "1");
		КонецЕсли;

		ЗначениеПоказателя1 = Неопределено;
		ЗначениеПоказателя2 = Неопределено;

		СтруктураДанныхПоля.Свойство("ОсДеятвРФДа", ЗначениеПоказателя1);
		СтруктураДанныхПоля.Свойство("ОсДеятвРФНет", ЗначениеПоказателя2);

		Если НЕ ЗначениеЗаполнено(ЗначениеПоказателя1) И НЕ ЗначениеЗаполнено(ЗначениеПоказателя2) Тогда
			СтруктураДанныхПоля.Вставить("_П000020004000", "");   // Неопределено.
		ИначеЕсли НЕ ЗначениеЗаполнено(ЗначениеПоказателя1) Тогда // Если ДА пусто, то нет
			СтруктураДанныхПоля.Вставить("_П000020004000", "0");  // Нет
		Иначе
			СтруктураДанныхПоля.Вставить("_П000020004000", "1");  // Да
		КонецЕсли;

		ЗначениеПоказателя1 = Неопределено;
		ЗначениеПоказателя2 = Неопределено;

		СтруктураДанныхПоля.Свойство("ОсДеятвРФПредДа",  ЗначениеПоказателя1);
		СтруктураДанныхПоля.Свойство("ОсДеятвРФПредНет", ЗначениеПоказателя2);

		Если НЕ ЗначениеЗаполнено(ЗначениеПоказателя1) И НЕ ЗначениеЗаполнено(ЗначениеПоказателя2) Тогда
			СтруктураДанныхПоля.Вставить("_П000020005000", ""); // Неопределено.
		ИначеЕсли НЕ ЗначениеЗаполнено(ЗначениеПоказателя1) Тогда // Если ДА пусто, то нет
			СтруктураДанныхПоля.Вставить("_П000020005000", "0"); // Нет
		Иначе
			СтруктураДанныхПоля.Вставить("_П000020005000", "1"); // Да
		КонецЕсли;

		ЗначениеПоказателя1 = Неопределено;
		ЗначениеПоказателя2 = Неопределено;
		ЗначениеПоказателя3 = Неопределено;

		СтруктураДанныхПоля.Свойство("ТипОрг1", ЗначениеПоказателя1);
		СтруктураДанныхПоля.Свойство("ТипОрг2", ЗначениеПоказателя2);
		СтруктураДанныхПоля.Свойство("ТипОрг3", ЗначениеПоказателя3);

		Если НЕ ЗначениеЗаполнено(ЗначениеПоказателя1) И НЕ ЗначениеЗаполнено(ЗначениеПоказателя2) И НЕ ЗначениеЗаполнено(ЗначениеПоказателя3) Тогда
			СтруктураДанныхПоля.Вставить("_П000020008000", "");
		ИначеЕсли ЗначениеЗаполнено(ЗначениеПоказателя1) Тогда
			СтруктураДанныхПоля.Вставить("_П000020008000", "331");
		ИначеЕсли ЗначениеЗаполнено(ЗначениеПоказателя2) Тогда
			СтруктураДанныхПоля.Вставить("_П000020008000", "332");
		ИначеЕсли ЗначениеЗаполнено(ЗначениеПоказателя3) Тогда
			СтруктураДанныхПоля.Вставить("_П000020008000", "333");
		КонецЕсли;

		ЗначениеПоказателя1 = Неопределено;
		ЗначениеПоказателя2 = Неопределено;

		СтруктураДанныхПоля.Свойство("РОВладИОДа", ЗначениеПоказателя1);
		СтруктураДанныхПоля.Свойство("РОВладИОНет", ЗначениеПоказателя2);

		Если НЕ ЗначениеЗаполнено(ЗначениеПоказателя1) И НЕ ЗначениеЗаполнено(ЗначениеПоказателя2) Тогда
			СтруктураДанныхПоля.Вставить("_П000020013000", "");   // Неопределено.
		ИначеЕсли НЕ ЗначениеЗаполнено(ЗначениеПоказателя1) Тогда // Если ДА пусто, то нет
			СтруктураДанныхПоля.Вставить("_П000020013000", "0");  // Нет
		Иначе
			СтруктураДанныхПоля.Вставить("_П000020013000", "1");  // Да
		КонецЕсли;

		ЗначениеПоказателя1 = Неопределено;
		ЗначениеПоказателя2 = Неопределено;

		СтруктураДанныхПоля.Свойство("ИОВладРОДа", ЗначениеПоказателя1);
		СтруктураДанныхПоля.Свойство("ИОВладРОНет", ЗначениеПоказателя2);

		Если НЕ ЗначениеЗаполнено(ЗначениеПоказателя1) И НЕ ЗначениеЗаполнено(ЗначениеПоказателя2) Тогда
			СтруктураДанныхПоля.Вставить("_П000020017000", "");   // Неопределено.
		ИначеЕсли НЕ ЗначениеЗаполнено(ЗначениеПоказателя1) Тогда // Если ДА пусто, то нет
			СтруктураДанныхПоля.Вставить("_П000020017000", "0");  // Нет
		Иначе
			СтруктураДанныхПоля.Вставить("_П000020017000", "1");  // Да
		КонецЕсли;

		ЗначениеПоказателя1 = Неопределено;
		ЗначениеПоказателя2 = Неопределено;

		СтруктураДанныхПоля.Свойство("СделкисАссЛицДа", ЗначениеПоказателя1);
		СтруктураДанныхПоля.Свойство("СделкисАссЛицНет", ЗначениеПоказателя2);

		Если НЕ ЗначениеЗаполнено(ЗначениеПоказателя1) И НЕ ЗначениеЗаполнено(ЗначениеПоказателя2) Тогда
			СтруктураДанныхПоля.Вставить("_П000020021000", "");   // Неопределено.
		ИначеЕсли НЕ ЗначениеЗаполнено(ЗначениеПоказателя1) Тогда // Если ДА пусто, то нет
			СтруктураДанныхПоля.Вставить("_П000020021000", "0");  // Нет
		Иначе
			СтруктураДанныхПоля.Вставить("_П000020021000", "1");  // Да
		КонецЕсли;

		СтруктураДанныхПоля.Вставить("КодСтраныСоглРаздел2", Форма.СтруктураРеквизитовФормы.мКодСтраныСоглРаздел2);
		СтруктураДанныхПоля.Вставить("КодСтраныРаздел2", Форма.СтруктураРеквизитовФормы.мКодСтраныРаздел2);
		СтруктураДанныхПоля.Вставить("ИННРО1Раздел2", Форма.СтруктураРеквизитовФормы.мИННРО1Раздел2);
		СтруктураДанныхПоля.Вставить("КППРО1Раздел2", Форма.СтруктураРеквизитовФормы.мКППРО1Раздел2);

		СтруктураДанныхПоля.Вставить("ИННРО2Раздел2", Форма.СтруктураРеквизитовФормы.мИННРО2Раздел2);
		СтруктураДанныхПоля.Вставить("КППРО2Раздел2", Форма.СтруктураРеквизитовФормы.мКППРО2Раздел2);

	ИначеЕсли ИмяРаздела = "Раздел7" Тогда
	
		СтруктураДанныхПоля.Вставить("СтавкаРаздел7", Форма.СтруктураРеквизитовФормы.мСтавкаРаздел7);

	ИначеЕсли ИмяРаздела = "Раздел10" Тогда

		СтруктураДанныхПоля.Вставить("КолОтдРаздел10", Форма.СтруктураРеквизитовФормы.мКолОтдРаздел10);
		СтруктураДанныхПоля.Вставить("НалФБРаздел10",  Форма.СтруктураРеквизитовФормы.мНалФБРаздел10);
		СтруктураДанныхПоля.Вставить("НалМБРаздел10",  Форма.СтруктураРеквизитовФормы.мНалМБРаздел10);
	
	КонецЕсли;
	
	Возврат СтруктураДанныхПоля;

КонецФункции

&НаСервере
Процедура ОбновитьСтруктуруМногострочногоРазделаНаСервере(ИмяГруппы) Экспорт

	РегламентированнаяОтчетностьКлиентСервер.ОбновитьСтруктуруМногострочногоРаздела(ЭтаФорма, ИмяГруппы);

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСтруктуруМногострочногоРазделаНаКлиенте(ИмяГруппы) Экспорт

	РегламентированнаяОтчетностьКлиентСервер.ОбновитьСтруктуруМногострочногоРаздела(ЭтаФорма, ИмяГруппы);

КонецПроцедуры

&НаСервере
Функция ОбновитьПеременныеМодуляНаСервере(ИмяПоказателя, ЗначениеПоказателя) Экспорт
	
	Возврат ОбновитьПеременныеМодуля(ЭтаФорма, ИмяПоказателя, ЗначениеПоказателя);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ОбновитьПеременныеМодуля(Форма, ИмяПоказателя, ЗначениеПоказателя)

	ИзмененияПроизошли = Ложь;

	Если Лев(ИмяПоказателя, 1) = "_" Тогда
		ИзмененияПроизошли = Истина;
		Возврат ИзмененияПроизошли;
	КонецЕсли;
	
	Если ИмяПоказателя = "КодОКАТО1" Тогда
		Форма.СтруктураРеквизитовФормы.мКодОКАТО1 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "КБКвФБ_1_1" Тогда
		Форма.СтруктураРеквизитовФормы.мКБКвФБ_1_1 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "КБКвФБ_1_2" Тогда
		Форма.СтруктураРеквизитовФормы.мКБКвФБ_1_2 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "КБКвФБ_1_3" Тогда
		Форма.СтруктураРеквизитовФормы.мКБКвФБ_1_3 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
		
	ИначеЕсли ИмяПоказателя = "СуммаНалога1_1" Тогда
		Форма.СтруктураРеквизитовФормы.мСуммаНалога1_1 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;

	ИначеЕсли ИмяПоказателя = "СуммаНалога1_2" Тогда
		Форма.СтруктураРеквизитовФормы.мСуммаНалога1_2 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;

	ИначеЕсли ИмяПоказателя = "СуммаНалога1_3" Тогда
		Форма.СтруктураРеквизитовФормы.мСуммаНалога1_3 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;

	ИначеЕсли ИмяПоказателя = "СуммаНалУм1_1" Тогда
		Форма.СтруктураРеквизитовФормы.мСуммаНалУм1_1 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;

	ИначеЕсли ИмяПоказателя = "СуммаНалУм1_2" Тогда
		Форма.СтруктураРеквизитовФормы.мСуммаНалУм1_2 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;

	ИначеЕсли ИмяПоказателя = "СуммаНалУм1_3" Тогда
		Форма.СтруктураРеквизитовФормы.мСуммаНалУм1_3 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;

	ИначеЕсли ИмяПоказателя = "СуммаПерех1_1" Тогда
		Форма.СтруктураРеквизитовФормы.мСуммаПерех1_1 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;

	ИначеЕсли ИмяПоказателя = "СуммаПерех1_2" Тогда
		Форма.СтруктураРеквизитовФормы.мСуммаПерех1_2 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;

	ИначеЕсли ИмяПоказателя = "СуммаПерех1_3" Тогда
		Форма.СтруктураРеквизитовФормы.мСуммаПерех1_3 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;

	ИначеЕсли ИмяПоказателя = "КБКРаздел12" Тогда
		Форма.СтруктураРеквизитовФормы.мКБКРаздел12 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "КодОКАТОРаздел12" Тогда
		Форма.СтруктураРеквизитовФормы.мКодОКАТОРаздел12 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "СуммаДоплФедРаздел12" Тогда
		Форма.СтруктураРеквизитовФормы.мСуммаДоплФедРаздел12 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "СуммаУменФедРаздел12" Тогда
		Форма.СтруктураРеквизитовФормы.мСуммаУменФедРаздел12 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "КБКРаздел13" Тогда
		Форма.СтруктураРеквизитовФормы.мКБКРаздел13 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "КодОКАТОРаздел13" Тогда
		Форма.СтруктураРеквизитовФормы.мКодОКАТОРаздел13 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "СуммаДоплФедРаздел13" Тогда
		Форма.СтруктураРеквизитовФормы.мСуммаДоплФедРаздел13 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "СуммаУменФедРаздел13" Тогда
		Форма.СтруктураРеквизитовФормы.мСуммаУменФедРаздел13 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "КодСтраныСоглРаздел2" Тогда
		Форма.СтруктураРеквизитовФормы.мКодСтраныСоглРаздел2 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "КодСтраныРаздел2" Тогда
		Форма.СтруктураРеквизитовФормы.мКодСтраныРаздел2 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "ИННРО1Раздел2" Тогда
		Форма.СтруктураРеквизитовФормы.мИННРО1Раздел2 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "КППРО1Раздел2" Тогда
		Форма.СтруктураРеквизитовФормы.мКППРО1Раздел2 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "ИННРО2Раздел2" Тогда
		Форма.СтруктураРеквизитовФормы.мИННРО2Раздел2 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "КППРО2Раздел2" Тогда
		Форма.СтруктураРеквизитовФормы.мКППРО2Раздел2 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "СтавкаРаздел7" Тогда
		Форма.СтруктураРеквизитовФормы.мСтавкаРаздел7 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "КолОтдРаздел10" Тогда
		Форма.СтруктураРеквизитовФормы.мКолОтдРаздел10 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "НалФБРаздел10" Тогда
		Форма.СтруктураРеквизитовФормы.мНалФБРаздел10 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "НалМБРаздел10" Тогда
		Форма.СтруктураРеквизитовФормы.мНалМБРаздел10 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	КонецЕсли;

	Возврат ИзмененияПроизошли;

КонецФункции

&НаСервере
Процедура ВосстановитьСохраненныеДанные()
	Перем ДанныеМногострочныхРазделов;
	Перем ДанныеМногостраничныхРазделов;
	Перем ДанныеВариановАвтоЗаполнения;
	Перем ПоказателиОтчета;
	Перем ВерсияФормы;
	Перем Автозаполнение;
	Перем ТаблицаМногостраничногоДокумента;

	ВосстановленИзСтаройВерсии = Ложь;
	
	// В случае, если формы была скопирована по F9, то проверим, не изменилась ли организация.
	Если СтруктураРеквизитовФормы.Организация <> СтруктураРеквизитовФормы.мСохраненныйДок.Организация
	   И СтруктураРеквизитовФормы.Организация <> РегламентированнаяОтчетностьКлиентСервер.ПустоеЗначениеТипа("СправочникСсылка.Организации")
	   И СтруктураРеквизитовФормы.Организация <> Неопределено Тогда
		СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация = Истина;
	Иначе
		// восстанавливаем реквизиты отчета
		СтруктураРеквизитовФормы.Организация = СтруктураРеквизитовФормы.мСохраненныйДок.Организация;
	КонецЕсли;
	
	ДатаПодписи                                       = СтруктураРеквизитовФормы.мСохраненныйДок.ДатаПодписи;
	СтруктураРеквизитовФормы.ЕдиницаИзмерения         = СтруктураРеквизитовФормы.мСохраненныйДок.ЕдиницаИзмерения;
	СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = СтруктураРеквизитовФормы.мСохраненныйДок.ТочностьЕдиницыИзмерения;
	Комментарий                                       = СтруктураРеквизитовФормы.мСохраненныйДок.Комментарий;

	// восстанавливаем сохраненные данные отчета
	СписокСохранения = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить();
	
	// список листов, выводимых на печать
	ДеревоНастройкиСтраниц = СтруктураРеквизитовФормы.мСохраненныйДок.ДеревоНастройкиСтраниц.Получить();
	ЗначениеВРеквизитФормы(ДеревоНастройкиСтраниц.Скопировать(), "мДеревоСтраницОтчета");
	
	// восстанавливаем сохраненные данные многострочных разделов
	Если СписокСохранения.Свойство( "ДанныеМногострочныхРазделов", ДанныеМногострочныхРазделов) Тогда
				
		Для Каждого ЭлементСтруктуры Из ДанныеМногострочныхРазделов Цикл
			
			НайденноеЗначение = Неопределено;
			
			мСтруктураМногострочныхРазделов.Свойство(ЭлементСтруктуры.Ключ, НайденноеЗначение);
			
			Если НЕ НайденноеЗначение = Неопределено Тогда
				
				ЗначениеВДанныеФормы(ЭлементСтруктуры.Значение, ЭтаФорма[НайденноеЗначение])
				
			КонецЕсли;
						
		КонецЦикла;
						
	КонецЕсли;

	// восстанавливаем сохраненные данные вариантов автозаполнения ячеек
	Если СписокСохранения.Свойство("ДанныеВариантовАвтоЗаполнения", ДанныеВариановАвтоЗаполнения) Тогда
		
		Если НЕ ДанныеВариановАвтоЗаполнения = Неопределено Тогда
			
			мСтруктураВариантыЗаполнения.Очистить();
			
			Для Каждого ЭлементСтруктуры Из ДанныеВариановАвтоЗаполнения Цикл
				
				мСтруктураВариантыЗаполнения.Вставить(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Ключ);
				
				ЭтаФорма["ТаблицаВариантыЗаполнения" + ЭлементСтруктуры.Ключ].Очистить();
				
				Для Каждого ЭлементМассива Из ЭлементСтруктуры.Значение Цикл
										
					ТаблВарЗаполнения = ЭтаФорма["ТаблицаВариантыЗаполнения" + ЭлементСтруктуры.Ключ].Добавить().ТаблицаВариантовЗаполнения;
										
					ЗначениеВДанныеФормы(ЭлементМассива, ТаблВарЗаполнения);
					
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;

	// восстановим сохраненные данные редактируемых ячеек
	СписокСохранения.Свойство("ПоказателиОтчета", ПоказателиОтчета);

	// восстанавливаем версию формы
	Если СписокСохранения.Свойство("ВерсияФормы", ВерсияФормы) Тогда
		Если ВерсияФормы <> СтруктураРеквизитовФормы.мВерсияФормы Тогда
			// Версия формы изменилась.
			// Обновляем пользовательские настройки.
			ОбновитьПользовательскиеНастройки();
		КонецЕсли;
	КонецЕсли;
	
	// восстанавливаем сохраненные данные многостраничных разделов
	Если СписокСохранения.Свойство("ДанныеМногостраничныхРазделов", ДанныеМногостраничныхРазделов) Тогда
		
		Для Каждого ЭлементСтруктуры Из ДанныеМногостраничныхРазделов Цикл
					
			НайденноеЗначение = Неопределено;
			
			мСтруктураМногостраничныхРазделов.Свойство(ЭлементСтруктуры.Ключ, НайденноеЗначение);
			
			Если НЕ НайденноеЗначение = Неопределено Тогда
				
				НайденноеЗначение = ЭтаФорма[НайденноеЗначение];
				
				ЗначениеВДанныеФормы(ЭлементСтруктуры.Значение, НайденноеЗначение);
				
				Если НайденноеЗначение[0].Свойство("Данные") Тогда
					
					Для Каждого СтрокаТаблЗнач Из НайденноеЗначение Цикл
						
						Если ТипЗнч(СтрокаТаблЗнач.Данные) = Тип("СписокЗначений") Тогда
							
							СтрокаТаблЗнач.Данные.Очистить();
							СтрокаТаблЗнач.Данные.Добавить(ЭлементСтруктуры.Значение[НайденноеЗначение.Индекс(СтрокаТаблЗнач)].Данные);
							
						КонецЕсли;
						
					КонецЦикла;
					
				КонецЕсли;
								
				Если НайденноеЗначение[0].Свойство("ДанныеДопСтрок") Тогда
					
					Ном = 0;
					
					Для Каждого СтрокаТаблЗнач Из ЭлементСтруктуры.Значение Цикл
						
						Если ТипЗнч(СтрокаТаблЗнач.ДанныеДопСтрок) = Тип("Структура") Тогда
							
							Для Каждого ЭлСтруктуры Из СтрокаТаблЗнач.ДанныеДопСтрок Цикл
								
								ТаблЗнач = ЭлСтруктуры.Значение;
								
								СтрокаТаблЗначДанныеДопСтрок = ЭтаФорма["Хранилище" + ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ЭлементСтруктуры.Ключ)].Добавить().Таблица;
								
								ЗначениеВДанныеФормы(ТаблЗнач, СтрокаТаблЗначДанныеДопСтрок);
								
								НайденноеЗначение[Ном].ДанныеДопСтрок.Добавить(СтрокаТаблЗначДанныеДопСтрок, "ДанныеФормыКоллекцияТаблицаДопСтрокРаздела");
								
							КонецЦикла;
							
						ИначеЕсли ТипЗнч(СтрокаТаблЗнач.ДанныеДопСтрок) = Тип("ТаблицаЗначений") Тогда
							
							СтрокаТаблЗначДанныеДопСтрок = ЭтаФорма["Хранилище" + ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ЭлементСтруктуры.Ключ)].Добавить().Таблица;
														
							ЗначениеВДанныеФормы(СтрокаТаблЗнач.ДанныеДопСтрок, СтрокаТаблЗначДанныеДопСтрок);
							
							НайденноеЗначение[Ном].ДанныеДопСтрок.Добавить(СтрокаТаблЗначДанныеДопСтрок, "ДанныеФормыКоллекцияТаблицаДопСтрокРаздела");
							
						КонецЕсли;
						
						Ном = Ном + 1;
						
					КонецЦикла;
					
				КонецЕсли;
					
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;

	СписокСохранения.Свойство("ФлПодсчетСтраниц", СтруктураРеквизитовФормы.мСчетчикСтраниц);
	СписокСохранения.Свойство("ФлПроверятьСоотношенияПриПечатиИВыгрузки", СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки);
	СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки = ?(СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки = Неопределено, Ложь, СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки);
	СписокСохранения.Свойство("ФлОтклВыборЗначений", СтруктураРеквизитовФормы.мАвтоВыборКодов);
	СтруктураРеквизитовФормы.мАвтоВыборКодов = ?(СтруктураРеквизитовФормы.мАвтоВыборКодов = Неопределено, Ложь, СтруктураРеквизитовФормы.мАвтоВыборКодов);

	СписокСохранения.Свойство("Автозаполнение", Автозаполнение);
	СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет = Автозаполнение;

	// восстановим сохраненные данные редактируемых ячеек
	// СписокСохранения.Свойство( "ПоказателиОтчета", ПоказателиОтчета );
	
	Для Каждого ПоказателиСтраницы Из ПоказателиОтчета Цикл
		ИмяТекТабличноеПоле = ПоказателиСтраницы.Ключ;
		ПоказателиТаблПоле  = ПоказателиСтраницы.Значение;

		ИмяЛиста = СтрЗаменить(ИмяТекТабличноеПоле,"ПолеТабличногоДокумента","");

		Если мСтруктураМногостраничныхРазделов.Свойство(ИмяЛиста, ТаблицаМногостраничногоДокумента) Тогда
			// Обрабатываем случай, когда старые данные открываются новой версией, где не предусмотрено
			// хранение данных многостраничных разделов в ПоказателяхОтчета, в этой процедуре ранее
			// данные многостраничных разделов уже были выведены в соответствующие листы
			Продолжить;
		КонецЕсли;
		ПредставлениеДанных = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСвойствоРаздела(ЭтаФорма, ИмяЛиста, "ПредставлениеДанных");
		Для Каждого Показатель Из ПоказателиТаблПоле Цикл
			ИмяПоказателя       = Показатель.Ключ;
			ЗначениеПоказателя  = Показатель.Значение;

			Если ПредставлениеДанных Тогда
				Если ОбновитьПеременныеМодуля(ЭтаФорма, ИмяПоказателя, ЗначениеПоказателя) Тогда
					Продолжить; // Пропустим цикл
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;

	КонецЦикла;
	
	Если НЕ СписокСохранения.Свойство("ПечатьБезШтрихкодаРазрешена", СтруктураРеквизитовФормы.мПечатьБезШтрихкодаРазрешена) Тогда
		СтруктураРеквизитовФормы.мПечатьБезШтрихкодаРазрешена = Ложь;
	КонецЕсли;
	
	СформироватьДеревоРазделовОтчетаНаСервере();
	
	Префикс = "ПолеТабличногоДокумента";
	
	Для Каждого Раздел Из мСвойстваРазделовДекларации.ПолучитьЭлементы() Цикл	
		
		Если НЕ Раздел.МногостраничностьВРазделе Тогда
			ЭтаФорма["СтруктураДанных" + Раздел.ИмяСтраницы] = ПоказателиОтчета[Префикс + Раздел.ИмяСтраницы];
		КонецЕсли;
	
	КонецЦикла;
	
	Если ПоказателиОтчета.ПолеТабличногоДокументаТитульный.Свойство("КодИМНС1") Тогда //Это старый формат
		
		// Обновляем варианты заполнения показателей отчета
		Рез = ОбновитьВариантыЗаполнения();
		// Обновляем настройки страниц отчета (содержание отчета)
		Рез = ОбновитьНастройкиСтраниц();
		
		ВосстановитьСведенияОбОрганизацииИзТитульногоЛистаСтарогоОбразца(ПоказателиОтчета);
		ВосстановитьСведенияОФизЛицахИзСтраницСтарогоОбразца();
		ВосстановитьСведенияРаздела1_1ИзЛистаСтарогоОбразца(ПоказателиОтчета);
		ВосстановитьСведенияРаздела1_2ИзЛистаСтарогоОбразца(ПоказателиОтчета);
		ВосстановитьСведенияРаздела1_3ИзЛистаСтарогоОбразца(ПоказателиОтчета);
		ВосстановитьСведенияРаздела2ИзЛистаСтарогоОбразца(ПоказателиОтчета);
		ВосстановитьСведенияРаздела7ИзСтраницСтарогоОбразца();
		ВосстановитьСведенияРаздела10ИзСтраницСтарогоОбразца();
		
		ВосстановленИзСтаройВерсии = Истина;

	КонецЕсли;
	
	
	ИмяТекРаздела = "Титульный";
	
	Для Каждого ЭлСтруктуры Из ЭтаФорма["СтруктураДанных" + ИмяТекРаздела] Цикл
		Попытка
			ТабличныйДокумент.Области[ЭлСтруктуры.Ключ].Значение = ЭлСтруктуры.Значение;
		Исключение
		КонецПопытки;
	КонецЦикла;

	РегламентированнаяОтчетность.ОперацииПриВосстановленииРегламентированногоОтчета(ЭтаФорма);

	КопироватьДанныеФормы(мДеревоСтраницОтчета, мДеревоВыбранныхСтраниц);

	ОтобразитьНомерКорректировки(ЭтаФорма);

	Модифицированность = Ложь;
			
	СтруктураРеквизитовФормы.мДокументВосстановлен = Истина;

КонецПроцедуры

&НаСервере
Процедура ВосстановитьСведенияОбОрганизацииИзТитульногоЛистаСтарогоОбразца(ПоказателиОтчета)
	
	ПоказателиТаблПоле = ПоказателиОтчета["ПолеТабличногоДокументаТитульный"];
	
	Для Каждого Показатель Из ПоказателиТаблПоле Цикл
		
		ИмяПоказателя = Показатель.Ключ;
		
		Если ИмяПоказателя = "ИНН1_1" Тогда
			СтруктураДанныхТитульный.Вставить("ИНН1");
			Для Ном = 1 По 12 Цикл
				СтруктураДанныхТитульный.ИНН1 = СокрЛП(СтруктураДанныхТитульный.ИНН1) + ПоказателиТаблПоле["ИНН1_" + Ном];
				СтруктураДанныхТитульный.Удалить("ИНН1_" + Ном);
			КонецЦикла;
			Если Лев(СтруктураДанныхТитульный.ИНН1, 2) = "00" Тогда
				СтруктураДанныхТитульный.ИНН1 = Сред(СтруктураДанныхТитульный.ИНН1, 3);
			КонецЕсли;
			Если Прав(СтруктураДанныхТитульный.ИНН1, 2) = "--" Тогда
				СтруктураДанныхТитульный.ИНН1 = Лев(СтруктураДанныхТитульный.ИНН1, СтрНайти(СтруктураДанныхТитульный.ИНН1, "--") - 1);
			КонецЕсли;
		ИначеЕсли ИмяПоказателя = "КПП1_1" Тогда
			СтруктураДанныхТитульный.Вставить("КПП1");
			Для Ном = 1 По 9 Цикл
				СтруктураДанныхТитульный.КПП1 = СокрЛП(СтруктураДанныхТитульный.КПП1) + ПоказателиТаблПоле["КПП1_" + Ном];
				СтруктураДанныхТитульный.Удалить("КПП1_" + Ном);
			КонецЦикла;
		ИначеЕсли ИмяПоказателя = "НомКвартал1" Тогда
			СтруктураДанныхТитульный.Вставить("НомКвартал");
			Для Ном = 1 По 2 Цикл
				СтруктураДанныхТитульный.НомКвартал = СокрЛП(СтруктураДанныхТитульный.НомКвартал) + ПоказателиТаблПоле["НомКвартал" + Ном];
				СтруктураДанныхТитульный.Удалить("НомКвартал" + Ном);
			КонецЦикла;					
		ИначеЕсли ИмяПоказателя = "ОтчетГод1" Тогда
			СтруктураДанныхТитульный.Вставить("ОтчетГод");
			Для Ном = 1 По 4 Цикл
				СтруктураДанныхТитульный.ОтчетГод = СокрЛП(СтруктураДанныхТитульный.ОтчетГод) + ПоказателиТаблПоле["ОтчетГод" + Ном];
				СтруктураДанныхТитульный.Удалить("ОтчетГод" + Ном);
			КонецЦикла;						
		ИначеЕсли ИмяПоказателя = "КодИМНС1" Тогда
			СтруктураДанныхТитульный.Вставить("КодИМНС");
			Для Ном = 1 По 4 Цикл
				СтруктураДанныхТитульный.КодИМНС = СокрЛП(СтруктураДанныхТитульный.КодИМНС) + ПоказателиТаблПоле["КодИМНС" + Ном];
				СтруктураДанныхТитульный.Удалить("КодИМНС" + Ном);
			КонецЦикла;	
		ИначеЕсли ИмяПоказателя = "ИноСтрКод1" Тогда
			СтруктураДанныхТитульный.Вставить("ИноСтрКод");
			Для Ном = 1 По 2 Цикл
				СтруктураДанныхТитульный.ИноСтрКод = СокрЛП(СтруктураДанныхТитульный.ИноСтрКод) + ПоказателиТаблПоле["ИноСтрКод" + Ном];
				СтруктураДанныхТитульный.Удалить("ИноСтрКод" + Ном);
			КонецЦикла;	
		ИначеЕсли ИмяПоказателя = "ИноСтрКодПост1" Тогда
			СтруктураДанныхТитульный.Вставить("ИноСтрКодПост");
			Для Ном = 1 По 2 Цикл
				СтруктураДанныхТитульный.ИноСтрКодПост = СокрЛП(СтруктураДанныхТитульный.ИноСтрКодПост) + ПоказателиТаблПоле["ИноСтрКодПост" + Ном];
				СтруктураДанныхТитульный.Удалить("ИноСтрКодПост" + Ном);
			КонецЦикла;	
		ИначеЕсли ИмяПоказателя = "ОГРН1" Тогда
			СтруктураДанныхТитульный.Вставить("ОГРН");
			Для Ном = 1 По 13 Цикл
				СтруктураДанныхТитульный.ОГРН = СокрЛП(СтруктураДанныхТитульный.ОГРН) + ПоказателиТаблПоле["ОГРН" + Ном];
				СтруктураДанныхТитульный.Удалить("ОГРН" + Ном);
			КонецЦикла;	
		ИначеЕсли ИмяПоказателя = "ИННРук1" Тогда
			СтруктураДанныхТитульный.Вставить("ИННРук");
			Для Ном = 1 По 12 Цикл
				СтруктураДанныхТитульный.ИННРук = СокрЛП(СтруктураДанныхТитульный.ИННРук) + ПоказателиТаблПоле["ИННРук" + Ном];
				СтруктураДанныхТитульный.Удалить("ИННРук" + Ном);
			КонецЦикла;
			Если Лев(СтруктураДанныхТитульный.ИННРук, 2) = "00" Тогда
				СтруктураДанныхТитульный.ИННРук = Сред(СтруктураДанныхТитульный.ИННРук, 3);
			КонецЕсли;
			Если Прав(СтруктураДанныхТитульный.ИННРук, 2) = "--" Тогда
				СтруктураДанныхТитульный.ИННРук = Лев(СтруктураДанныхТитульный.ИННРук, СтрНайти(СтруктураДанныхТитульный.ИННРук, "--") - 1);
			КонецЕсли;
		ИначеЕсли ИмяПоказателя = "ИННГБ1" Тогда
			СтруктураДанныхТитульный.Вставить("ИННГБ");
			Для Ном = 1 По 12 Цикл
				СтруктураДанныхТитульный.ИННГБ = СокрЛП(СтруктураДанныхТитульный.ИННГБ) + ПоказателиТаблПоле["ИННГБ" + Ном];
				СтруктураДанныхТитульный.Удалить("ИННГБ" + Ном);
			КонецЦикла;
			Если Лев(СтруктураДанныхТитульный.ИННГБ, 2) = "00" Тогда
				СтруктураДанныхТитульный.ИННГБ = Сред(СтруктураДанныхТитульный.ИННГБ, 3);
			КонецЕсли;
			Если Прав(СтруктураДанныхТитульный.ИННГБ, 2) = "--" Тогда
				СтруктураДанныхТитульный.ИННГБ = Лев(СтруктураДанныхТитульный.ИННГБ, СтрНайти(СтруктураДанныхТитульный.ИННГБ, "--") - 1);
			КонецЕсли;
		ИначеЕсли ИмяПоказателя = "ИННУП1" Тогда
			СтруктураДанныхТитульный.Вставить("ИННУП");
			Для Ном = 1 По 12 Цикл
				СтруктураДанныхТитульный.ИННУП = СокрЛП(СтруктураДанныхТитульный.ИННУП) + ПоказателиТаблПоле["ИННУП" + Ном];
				СтруктураДанныхТитульный.Удалить("ИННУП" + Ном);
			КонецЦикла;
			Если Лев(СтруктураДанныхТитульный.ИННУП, 2) = "00" Тогда
				СтруктураДанныхТитульный.ИННУП = Сред(СтруктураДанныхТитульный.ИННУП, 3);
			КонецЕсли;
			Если Прав(СтруктураДанныхТитульный.ИННУП, 2) = "--" Тогда
				СтруктураДанныхТитульный.ИННУП = Лев(СтруктураДанныхТитульный.ИННУП, СтрНайти(СтруктураДанныхТитульный.ИННУП, "--") - 1);
			КонецЕсли;
		ИначеЕсли ИмяПоказателя = "Прил1" Тогда
			СтруктураДанныхТитульный.Вставить("Прил");
			Для Ном = 1 По 3 Цикл
				СтруктураДанныхТитульный.Прил = СокрЛП(СтруктураДанныхТитульный.Прил) + ПоказателиТаблПоле["Прил" + Ном];
				СтруктураДанныхТитульный.Удалить("Прил" + Ном);
			КонецЦикла;	
		КонецЕсли;
		
	КонецЦикла;
	
	ЗаполнитьДатуПодписи(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьСведенияОФизЛицахИзСтраницСтарогоОбразца()
	
	Для каждого Страница Из ТаблицаСтраницыФизЛица Цикл
		ДанныеСтраницы = Страница.Данные[0].Значение;
		ДанныеСтраницыКопия = Новый Структура;
		Для каждого ЭлементСтруктуры Из ДанныеСтраницы Цикл
			ДанныеСтраницыКопия.Вставить(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Значение);
		КонецЦикла;
		
		Для каждого Показатель Из ДанныеСтраницыКопия Цикл
			ИмяПоказателя = Показатель.Ключ;
			
			Если ИмяПоказателя = "ФизЛицДатаР1" Тогда
				СтрДень  = Прав("00" + СокрЛП(ДанныеСтраницы.ФизЛицДатаР1 + ДанныеСтраницы.ФизЛицДатаР2), 2);
				СтрМесяц = Прав("00" + СокрЛП(ДанныеСтраницы.ФизЛицДатаР3 + ДанныеСтраницы.ФизЛицДатаР4), 2);
				СтрГод   = Прав("0000" + СокрЛП(ДанныеСтраницы.ФизЛицДатаР5 + ДанныеСтраницы.ФизЛицДатаР6 + ДанныеСтраницы.ФизЛицДатаР7 + ДанныеСтраницы.ФизЛицДатаР8), 4);
				ДанныеСтраницы.Вставить("ФизЛицДатаР", Дата(СтрГод + СтрМесяц + СтрДень + "000000"));
				Для Ном = 1 По 8 Цикл
					ДанныеСтраницы.Удалить("ФизЛицДатаР" + Ном);
				КонецЦикла;
				
			ИначеЕсли ИмяПоказателя = "ФизЛицКодГражд1" Тогда
				ДанныеСтраницы.Вставить("ФизЛицКодГражд");
				Для Ном = 1 По 3 Цикл
					ДанныеСтраницы.ФизЛицКодГражд = СокрЛП(ДанныеСтраницы.ФизЛицКодГражд) + ДанныеСтраницы["ФизЛицКодГражд" + Ном];
					ДанныеСтраницы.Удалить("ФизЛицКодГражд" + Ном);
				КонецЦикла;
				
			ИначеЕсли ИмяПоказателя = "ФизЛицДок1" Тогда
				ДанныеСтраницы.Вставить("ФизЛицДок");
				Для Ном = 1 По 2 Цикл
					ДанныеСтраницы.ФизЛицДок = СокрЛП(ДанныеСтраницы.ФизЛицДок) + ДанныеСтраницы["ФизЛицДок" + Ном];
					ДанныеСтраницы.Удалить("ФизЛицДок" + Ном);
				КонецЦикла;
				
			ИначеЕсли ИмяПоказателя = "ФизЛицДокДата1" Тогда
				СтрДень  = Прав("00" + СокрЛП(ДанныеСтраницы.ФизЛицДокДата1 + ДанныеСтраницы.ФизЛицДокДата2), 2);
				СтрМесяц = Прав("00" + СокрЛП(ДанныеСтраницы.ФизЛицДокДата3 + ДанныеСтраницы.ФизЛицДокДата4), 2);
				СтрГод   = Прав("0000" + СокрЛП(ДанныеСтраницы.ФизЛицДокДата5 + ДанныеСтраницы.ФизЛицДокДата6 + ДанныеСтраницы.ФизЛицДокДата7 + ДанныеСтраницы.ФизЛицДокДата8), 4);
				ДанныеСтраницы.Вставить("ФизЛицДокДата", Дата(СтрГод + СтрМесяц + СтрДень + "000000"));
				Для Ном = 1 По 8 Цикл
					ДанныеСтраницы.Удалить("ФизЛицДокДата" + Ном);
				КонецЦикла;
				
			ИначеЕсли ИмяПоказателя = "ФизЛицИнд1" Тогда
				ДанныеСтраницы.Вставить("ФизЛицИнд");
				Для Ном = 1 По 6 Цикл
					ДанныеСтраницы.ФизЛицИнд = СокрЛП(ДанныеСтраницы.ФизЛицИнд) + ДанныеСтраницы["ФизЛицИнд" + Ном];
					ДанныеСтраницы.Удалить("ФизЛицИнд" + Ном);
				КонецЦикла;
				
			ИначеЕсли ИмяПоказателя = "ФизЛицС1" Тогда
				ДанныеСтраницы.Вставить("ФизЛицС");
				Для Ном = 1 По 2 Цикл
					ДанныеСтраницы.ФизЛицС = СокрЛП(ДанныеСтраницы.ФизЛицС) + ДанныеСтраницы["ФизЛицС" + Ном];
					ДанныеСтраницы.Удалить("ФизЛицС" + Ном);
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЦикла; 
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьСведенияРаздела1_1ИзЛистаСтарогоОбразца(ПоказателиОтчета)
	
	ПоказателиТаблПоле = ПоказателиОтчета["ПолеТабличногоДокументаРаздел1_1"];
	
	Для Каждого Показатель Из ПоказателиТаблПоле Цикл
		
		ИмяПоказателя = Показатель.Ключ;
		
		Если ИмяПоказателя = "КодОКАТОР1" Тогда
			СтруктураДанныхРаздел1_1.Вставить("КодОКАТОР");
			Для Ном = 1 По 11 Цикл
				СтруктураДанныхРаздел1_1.КодОКАТОР = СокрЛП(СтруктураДанныхРаздел1_1.КодОКАТОР) + ПоказателиТаблПоле["КодОКАТОР" + Ном];
				СтруктураДанныхРаздел1_1.Удалить("КодОКАТОР" + Ном);
			КонецЦикла;
			
		ИначеЕсли ИмяПоказателя = "КБКвФБ_1" Тогда
			СтруктураДанныхРаздел1_1.Вставить("КБКвФБ");
			Для Ном = 1 По 20 Цикл
				СтруктураДанныхРаздел1_1.КБКвФБ = СокрЛП(СтруктураДанныхРаздел1_1.КБКвФБ) + ПоказателиТаблПоле["КБКвФБ_" + Ном];
				СтруктураДанныхРаздел1_1.Удалить("КБКвФБ_" + Ном);
			КонецЦикла;
		ИначеЕсли ИмяПоказателя = "СуммаНалога1_1" Тогда
			СтруктураДанныхРаздел1_1.Вставить("СуммаНалога1", Число(СтруктураДанныхРаздел1_1.СуммаНалога1_1));
			Для Ном = 1 По 15 Цикл
				Если ТипЗнч(ПоказателиТаблПоле["СуммаНалога1_" + Ном]) = Тип("Строка") Тогда
					СтруктураДанныхРаздел1_1.Удалить("СуммаНалога1_" + Ном);
				КонецЕсли;
			КонецЦикла;
		ИначеЕсли ИмяПоказателя = "СуммаНалУм1_1" Тогда
			СтруктураДанныхРаздел1_1.Вставить("СуммаНалУм1", Число(СтруктураДанныхРаздел1_1.СуммаНалУм1_1));
			Для Ном = 1 По 15 Цикл
				Если ТипЗнч(ПоказателиТаблПоле["СуммаНалУм1_" + Ном]) = Тип("Строка") Тогда
					СтруктураДанныхРаздел1_1.Удалить("СуммаНалУм1_" + Ном);
				КонецЕсли;
			КонецЦикла;
		ИначеЕсли ИмяПоказателя = "СуммаПерех1_1" Тогда
			СтруктураДанныхРаздел1_1.Вставить("СуммаПерех1", Число(СтруктураДанныхРаздел1_1.СуммаПерех1_1));
			Для Ном = 1 По 15 Цикл
				Если ТипЗнч(ПоказателиТаблПоле["СуммаПерех1_" + Ном]) = Тип("Строка") Тогда
					СтруктураДанныхРаздел1_1.Удалить("СуммаПерех1_" + Ном);
				КонецЕсли;
			КонецЦикла;
			
		ИначеЕсли ИмяПоказателя = "КБКвБС_1" Тогда
			СтруктураДанныхРаздел1_1.Вставить("КБКвБС");
			Для Ном = 1 По 20 Цикл
				СтруктураДанныхРаздел1_1.КБКвБС = СокрЛП(СтруктураДанныхРаздел1_1.КБКвБС) + ПоказателиТаблПоле["КБКвБС_" + Ном];
				СтруктураДанныхРаздел1_1.Удалить("КБКвБС_" + Ном);
			КонецЦикла;
		ИначеЕсли ИмяПоказателя = "СуммаНалога1_2" Тогда
			СтруктураДанныхРаздел1_1.Вставить("СуммаНалога2", Число(СтруктураДанныхРаздел1_1.СуммаНалога1_2));
			Для Ном = 1 По 15 Цикл
				Если ТипЗнч(ПоказателиТаблПоле["СуммаНалога2_" + Ном]) = Тип("Строка") Тогда
					СтруктураДанныхРаздел1_1.Удалить("СуммаНалога2_" + Ном);
				КонецЕсли;
			КонецЦикла;
		ИначеЕсли ИмяПоказателя = "СуммаНалУм1_2" Тогда
			СтруктураДанныхРаздел1_1.Вставить("СуммаНалУм2", Число(СтруктураДанныхРаздел1_1.СуммаНалУм1_2));
			Для Ном = 1 По 15 Цикл
				Если ТипЗнч(ПоказателиТаблПоле["СуммаНалУм2_" + Ном]) = Тип("Строка") Тогда
					СтруктураДанныхРаздел1_1.Удалить("СуммаНалУм2_" + Ном);
				КонецЕсли;
			КонецЦикла;
		ИначеЕсли ИмяПоказателя = "СуммаПерех1_2" Тогда
			СтруктураДанныхРаздел1_1.Вставить("СуммаПерех2", Число(СтруктураДанныхРаздел1_1.СуммаПерех1_2));
			Для Ном = 1 По 15 Цикл
				Если ТипЗнч(ПоказателиТаблПоле["СуммаПерех2_" + Ном]) = Тип("Строка") Тогда
					СтруктураДанныхРаздел1_1.Удалить("СуммаПерех2_" + Ном);
				КонецЕсли;
			КонецЦикла;
			
		ИначеЕсли ИмяПоказателя = "КБКвМБ_1" Тогда
			СтруктураДанныхРаздел1_1.Вставить("КБКвМБ");
			Для Ном = 1 По 20 Цикл
				СтруктураДанныхРаздел1_1.КБКвМБ = СокрЛП(СтруктураДанныхРаздел1_1.КБКвМБ) + ПоказателиТаблПоле["КБКвМБ_" + Ном];
				СтруктураДанныхРаздел1_1.Удалить("КБКвМБ_" + Ном);
			КонецЦикла;
		ИначеЕсли ИмяПоказателя = "СуммаНалога1_3" Тогда
			СтруктураДанныхРаздел1_1.Вставить("СуммаНалога3", Число(СтруктураДанныхРаздел1_1.СуммаНалога1_3));
			Для Ном = 1 По 15 Цикл
				Если ТипЗнч(ПоказателиТаблПоле["СуммаНалога3_" + Ном]) = Тип("Строка") Тогда
					СтруктураДанныхРаздел1_1.Удалить("СуммаНалога3_" + Ном);
				КонецЕсли;
			КонецЦикла;
		ИначеЕсли ИмяПоказателя = "СуммаНалУм1_3" Тогда
			СтруктураДанныхРаздел1_1.Вставить("СуммаНалУм3", Число(СтруктураДанныхРаздел1_1.СуммаНалУм1_3));
			Для Ном = 1 По 15 Цикл
				Если ТипЗнч(ПоказателиТаблПоле["СуммаНалУм3_" + Ном]) = Тип("Строка") Тогда
					СтруктураДанныхРаздел1_1.Удалить("СуммаНалУм3_" + Ном);
				КонецЕсли;
			КонецЦикла;
		ИначеЕсли ИмяПоказателя = "СуммаПерех1_3" Тогда
			СтруктураДанныхРаздел1_1.Вставить("СуммаПерех3", Число(СтруктураДанныхРаздел1_1.СуммаПерех1_3));
			Для Ном = 1 По 15 Цикл
				Если ТипЗнч(ПоказателиТаблПоле["СуммаПерех3_" + Ном]) = Тип("Строка") Тогда
					СтруктураДанныхРаздел1_1.Удалить("СуммаПерех3_" + Ном);
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьСведенияРаздела1_2ИзЛистаСтарогоОбразца(ПоказателиОтчета)
	
	ПоказателиТаблПоле = ПоказателиОтчета["ПолеТабличногоДокументаРаздел1_2"];
	
	Для Каждого Показатель Из ПоказателиТаблПоле Цикл
		
		ИмяПоказателя = Показатель.Ключ;
		
		Если ИмяПоказателя = "КодОКАТОР21" Тогда
			СтруктураДанныхРаздел1_2.Вставить("КодОКАТОР2");
			Для Ном = 1 По 11 Цикл
				СтруктураДанныхРаздел1_2.КодОКАТОР2 = СокрЛП(СтруктураДанныхРаздел1_2.КодОКАТОР2) + ПоказателиТаблПоле["КодОКАТОР2" + Ном];
				СтруктураДанныхРаздел1_2.Удалить("КодОКАТОР2" + Ном);
			КонецЦикла;
		ИначеЕсли ИмяПоказателя = "КБК1" Тогда
			СтруктураДанныхРаздел1_2.Вставить("КБК");
			Для Ном = 1 По 20 Цикл
				СтруктураДанныхРаздел1_2.КБК = СокрЛП(СтруктураДанныхРаздел1_2.КБК) + ПоказателиТаблПоле["КБК" + Ном];
				СтруктураДанныхРаздел1_2.Удалить("КБК" + Ном);
			КонецЦикла;
		ИначеЕсли ИмяПоказателя = "СуммаДоплФедРаздел12" Тогда
			СтруктураДанныхРаздел1_2.Вставить("СуммаДоплФед", Число(СтруктураДанныхРаздел1_2.СуммаДоплФедРаздел12));
			Для Ном = 1 По 15 Цикл
				Если ТипЗнч(ПоказателиТаблПоле["СуммаДоплФед" + Ном]) = Тип("Строка") Тогда
					СтруктураДанныхРаздел1_2.Удалить("СуммаДоплФед" + Ном);
				КонецЕсли;
			КонецЦикла;
		ИначеЕсли ИмяПоказателя = "СуммаУменФедРаздел12" Тогда
			СтруктураДанныхРаздел1_2.Вставить("СуммаУменФед", Число(СтруктураДанныхРаздел1_2.СуммаУменФедРаздел12));
			Для Ном = 1 По 15 Цикл
				Если ТипЗнч(ПоказателиТаблПоле["СуммаУменФед" + Ном]) = Тип("Строка") Тогда
					СтруктураДанныхРаздел1_2.Удалить("СуммаУменФед" + Ном);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьСведенияРаздела1_3ИзЛистаСтарогоОбразца(ПоказателиОтчета)
	
	ПоказателиТаблПоле = ПоказателиОтчета["ПолеТабличногоДокументаРаздел1_3"];
	
	Для Каждого Показатель Из ПоказателиТаблПоле Цикл
		
		ИмяПоказателя = Показатель.Ключ;
		
		Если ИмяПоказателя = "КодОКАТОР31" Тогда
			СтруктураДанныхРаздел1_3.Вставить("КодОКАТОР3");
			Для Ном = 1 По 11 Цикл
				СтруктураДанныхРаздел1_3.КодОКАТОР3 = СокрЛП(СтруктураДанныхРаздел1_3.КодОКАТОР3) + ПоказателиТаблПоле["КодОКАТОР3" + Ном];
				СтруктураДанныхРаздел1_3.Удалить("КодОКАТОР3" + Ном);
			КонецЦикла;
		ИначеЕсли ИмяПоказателя = "КБК1" Тогда
			СтруктураДанныхРаздел1_3.Вставить("КБК");
			Для Ном = 1 По 20 Цикл
				СтруктураДанныхРаздел1_3.КБК = СокрЛП(СтруктураДанныхРаздел1_3.КБК) + ПоказателиТаблПоле["КБК" + Ном];
				СтруктураДанныхРаздел1_3.Удалить("КБК" + Ном);
			КонецЦикла;
		ИначеЕсли ИмяПоказателя = "СуммаДоплФедРаздел13" Тогда
			СтруктураДанныхРаздел1_3.Вставить("Сумма2ДоплФед", Число(СтруктураДанныхРаздел1_3.СуммаДоплФедРаздел13));
			Для Ном = 1 По 15 Цикл
				Если ТипЗнч(ПоказателиТаблПоле["Сумма2ДоплФед" + Ном]) = Тип("Строка") Тогда
					СтруктураДанныхРаздел1_3.Удалить("Сумма2ДоплФед" + Ном);
				КонецЕсли;
			КонецЦикла;
		ИначеЕсли ИмяПоказателя = "СуммаУменФедРаздел13" Тогда
			СтруктураДанныхРаздел1_3.Вставить("Сумма2УменФед", Число(СтруктураДанныхРаздел1_3.СуммаУменФедРаздел13));
			Для Ном = 1 По 15 Цикл
				Если ТипЗнч(ПоказателиТаблПоле["Сумма2УменФед" + Ном]) = Тип("Строка") Тогда
					СтруктураДанныхРаздел1_3.Удалить("Сумма2УменФед" + Ном);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьСведенияРаздела2ИзЛистаСтарогоОбразца(ПоказателиОтчета)
	
	ПоказателиТаблПоле = ПоказателиОтчета["ПолеТабличногоДокументаРаздел2"];
	
	Для Каждого Показатель Из ПоказателиТаблПоле Цикл
		
		ИмяПоказателя = Показатель.Ключ;
		
		Если ИмяПоказателя = "КодСтраныСогл1" Тогда
			СтруктураДанныхРаздел2.Вставить("КодСтраныСогл");
			Для Ном = 1 По 2 Цикл
				СтруктураДанныхРаздел2.КодСтраныСогл = СокрЛП(СтруктураДанныхРаздел2.КодСтраныСогл) + ПоказателиТаблПоле["КодСтраныСогл" + Ном];
				СтруктураДанныхРаздел2.Удалить("КодСтраныСогл" + Ном);
			КонецЦикла;
		ИначеЕсли ИмяПоказателя = "КодСтраны1" Тогда
			СтруктураДанныхРаздел2.Вставить("КодСтраны");
			Для Ном = 1 По 2 Цикл
				СтруктураДанныхРаздел2.КодСтраны = СокрЛП(СтруктураДанныхРаздел2.КодСтраны) + ПоказателиТаблПоле["КодСтраны" + Ном];
				СтруктураДанныхРаздел2.Удалить("КодСтраны" + Ном);
			КонецЦикла;
		ИначеЕсли ИмяПоказателя = "ИННРО1_1" Тогда
			СтруктураДанныхРаздел2.Вставить("ИННРО1");
			Для Ном = 1 По 10 Цикл
				СтруктураДанныхРаздел2.ИННРО1 = СокрЛП(СтруктураДанныхРаздел2.ИННРО1) + ПоказателиТаблПоле["ИННРО1_" + Ном];
				СтруктураДанныхРаздел2.Удалить("ИННРО1_" + Ном);
			КонецЦикла;
		ИначеЕсли ИмяПоказателя = "КППРО1_1" Тогда
			СтруктураДанныхРаздел2.Вставить("КППРО1");
			Для Ном = 1 По 9 Цикл
				СтруктураДанныхРаздел2.КППРО1 = СокрЛП(СтруктураДанныхРаздел2.КППРО1) + ПоказателиТаблПоле["КППРО1_" + Ном];
				СтруктураДанныхРаздел2.Удалить("КППРО1_" + Ном);
			КонецЦикла;
		ИначеЕсли ИмяПоказателя = "ИННРО2_1" Тогда
			СтруктураДанныхРаздел2.Вставить("ИННРО2");
			Для Ном = 1 По 10 Цикл
				СтруктураДанныхРаздел2.ИННРО2 = СокрЛП(СтруктураДанныхРаздел2.ИННРО2) + ПоказателиТаблПоле["ИННРО2_" + Ном];
				СтруктураДанныхРаздел2.Удалить("ИННРО2_" + Ном);
			КонецЦикла;
		ИначеЕсли ИмяПоказателя = "КППРО2_1" Тогда
			СтруктураДанныхРаздел2.Вставить("КППРО2");
			Для Ном = 1 По 9 Цикл
				СтруктураДанныхРаздел2.КППРО2 = СокрЛП(СтруктураДанныхРаздел2.КППРО2) + ПоказателиТаблПоле["КППРО2_" + Ном];
				СтруктураДанныхРаздел2.Удалить("КППРО2_" + Ном);
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьСведенияРаздела7ИзСтраницСтарогоОбразца()
	
	Для каждого Страница Из ТаблицаСтраницыРаздел7 Цикл
		ДанныеСтраницы = Страница.Данные[0].Значение;
		ДанныеСтраницыКопия = Новый Структура;
		Для каждого ЭлементСтруктуры Из ДанныеСтраницы Цикл
			ДанныеСтраницыКопия.Вставить(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Значение);
		КонецЦикла;
		
		Для каждого Показатель Из ДанныеСтраницыКопия Цикл
			ИмяПоказателя = Показатель.Ключ;
			
			Если ИмяПоказателя = "Ставка1" Тогда
				ДанныеСтраницы.Вставить("Ставка");
				Для Ном = 1 По 2 Цикл
					ДанныеСтраницы.Ставка = СокрЛП(ДанныеСтраницы.Ставка) + ДанныеСтраницы["Ставка" + Ном];
					ДанныеСтраницы.Удалить("Ставка" + Ном);
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЦикла; 
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьСведенияРаздела10ИзСтраницСтарогоОбразца()
	
	Для каждого Страница Из ТаблицаСтраницыРаздел10 Цикл
		ДанныеСтраницы = Страница.Данные[0].Значение;
		ДанныеСтраницыКопия = Новый Структура;
		Для каждого ЭлементСтруктуры Из ДанныеСтраницы Цикл
			ДанныеСтраницыКопия.Вставить(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Значение);
		КонецЦикла;
		
		Для каждого Показатель Из ДанныеСтраницыКопия Цикл
			ИмяПоказателя = Показатель.Ключ;
			
			Если ИмяПоказателя = "КолОтд1" Тогда
				ДанныеСтраницы.Вставить("КолОтд");
				Для Ном = 1 По 2 Цикл
					ДанныеСтраницы.КолОтд = СокрЛП(ДанныеСтраницы.КолОтд) + ДанныеСтраницы["КолОтд" + Ном];
					ДанныеСтраницы.Удалить("КолОтд" + Ном);
				КонецЦикла;
			ИначеЕсли ИмяПоказателя = "НалФБ1" Тогда
				ДанныеСтраницы.Вставить("НалФБ");
				Для Ном = 1 По 2 Цикл
					ДанныеСтраницы.НалФБ = СокрЛП(ДанныеСтраницы.НалФБ) + ДанныеСтраницы["НалФБ" + Ном];
					ДанныеСтраницы.Удалить("НалФБ" + Ном);
				КонецЦикла;
			ИначеЕсли ИмяПоказателя = "НалМБ1" Тогда
				ДанныеСтраницы.Вставить("НалМБ");
				Для Ном = 1 По 2 Цикл
					ДанныеСтраницы.НалМБ = СокрЛП(ДанныеСтраницы.НалМБ) + ДанныеСтраницы["НалМБ" + Ном];
					ДанныеСтраницы.Удалить("НалМБ" + Ном);
				КонецЦикла;
			КонецЕсли;
			
		КонецЦикла; 
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьПользовательскиеНастройки()
	
	Сообщение = Новый СообщениеПользователю;

	Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Изменилась версия формы отчета.%1Выполняется обновление пользовательских настроек.'"), Символы.ПС);

	Сообщение.Сообщить();

	// Обновляем варианты заполнения показателей отчета
	ЕстьИзмененияВариантыЗаполнения = ОбновитьВариантыЗаполнения();
	
	// Обновляем настройки страниц отчета (содержание отчета)
	ЕстьИзмененияНастройкаСтраниц = ОбновитьНастройкиСтраниц();

	Если ЕстьИзмененияВариантыЗаполнения ИЛИ ЕстьИзмененияНастройкаСтраниц Тогда
		// Если были изменения в пользовательских настройках,
		// то устанавливаем флаг модифицированности формы.
		Модифицированность = Истина;

		Сообщение = Новый СообщениеПользователю;

		Сообщение.Текст = НСтр("ru='Обновление пользовательских настроек успешно завершено!'");

		Сообщение.Сообщить();

	Иначе
		
		Сообщение = Новый СообщениеПользователю;

		Сообщение.Текст = НСтр("ru='Изменения в структуре пользовательских настроек не обнаружены!'");

		Сообщение.Сообщить();

	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ОбновитьВариантыЗаполнения()
	Перем МассивВариантовЗаполненияСтраниц;

	ЕстьИзменения = Ложь;

	// Подлежат обновлению следующие структуры:
	// 1.Пользовательские настройки вариантов заполнения таблиц

	// Сначала создадим эталонные модели вариантов автозаполнения таблиц.
	// Их определяем по макету СоставПоказателей
	МакетСоставаПоказателей = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(СтруктураРеквизитовФормы.мСоставПоказателей);

	ОписаниеТиповСтрока15   = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(15));
	ОписаниеТиповСтрока100  = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100));
	ОписаниеТиповСтрока50   = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(50));
	ОписаниеТиповЧисло1     = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(1));
	ОписаниеТиповЧисло15    = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2));

	ЕстьИзменения = Ложь;

	Для Инд = 0 По МакетСоставаПоказателей.Области.Количество() - 1 Цикл
		// организован цикл по именованным областям макета,
		// содержащим состав показателей и варианты автозаполнения
		// таблиц на каждой странице основной панели формы.

		ТекОбласть  = МакетСоставаПоказателей.Области[Инд];
		ИмяСтраницы = ТекОбласть.Имя;

		// Таблица значений содержит информацию о вариантах заполнения показателя отчета.
		// В колонках таблицы значений отображается следующая информация:
		//   - имя ячейки (код показателя);
		//   - вариант заполнения ячейки;
		//   - вычисленное по данным ИБ значение ячейки;
		//   - величина автокорректировки значения ячейки;
		//   - примечание к ячейке.
		//
		ТаблицаВариантыЗаполнения = Новый ТаблицаЗначений;
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "КодПоказателя",     ОписаниеТиповСтрока15  );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "ВариантЗаполнения", ОписаниеТиповЧисло1    );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "ЗначениеАвто",      ОписаниеТиповЧисло15   );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "Дельта",            ОписаниеТиповЧисло15   );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "Комментарий",       ОписаниеТиповСтрока100 );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "КодПоказателяПоСтруктуре",       ОписаниеТиповСтрока50 ); 
		
		Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
			// перебираем строки макета

			// Код показателя (по составу показателей) определяется по первой колонке макета
			КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
			ИмяПоказателя = КодПоказателя;

			Если КодПоказателя = "===" Тогда         // признак конечной строки
				Прервать;
			КонецЕсли;

			Если Лев(КодПоказателя, 2) = "//" Тогда  // пропускаем комментарии
				Продолжить;
			КонецЕсли;

			// код показателя по форме отчете (имя ячейки в полях табличного документа формы)
			КодПоказателяПоФорме = СокрЛП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
			// вариант заполнения ячейки определяется по колонке 6 макета
			стрВариантЗаполнения = РегламентированнаяОтчетность.ПолучитьВариантЗаполненияПоказателяРегОтчета(МакетСоставаПоказателей, Ном);

			чВариантЗаполнения   = ? (ПустаяСтрока(стрВариантЗаполнения), 0, Число(стрВариантЗаполнения));
			Если чВариантЗаполнения <> 0 Тогда
				// Если в колонке 6 задан варианет заполнения показателя, 
				// то его значение может определяться по данным ИБ.
				// Дополняем таблицу значений вариантов заполнения
				НоваяСтрока = ТаблицаВариантыЗаполнения.Добавить();
				НоваяСтрока.КодПоказателя      = ? (Не ПустаяСтрока(КодПоказателяПоФорме), КодПоказателяПоФорме, КодПоказателя);
				НоваяСтрока.ВариантЗаполнения  = чВариантЗаполнения;
			КонецЕсли;

		КонецЦикла;

		Если Не мСтруктураВариантыЗаполнения.Свойство(ИмяСтраницы, МассивВариантовЗаполненияСтраниц) Тогда
			
			МассивВариантовЗаполненияСтраниц = ЭтаФорма["ТаблицаВариантыЗаполнения" + ИмяСтраницы];
			
			Если ТаблицаВариантыЗаполнения.Количество() > 0 Тогда
								
				// Рассмотрим вариант, когда в предыдущей версии формы по данной странице
				// не было предусмотрено автозаполнение по данным ИБ.
				// Добавим такую возможность в пользовательскую настройку
				
				МассивВариантовЗаполненияСтраниц.Очистить();
				// Первым элементом массива является "эталонная" таблица значений вариантов заполнения
				МассивВариантовЗаполненияСтраниц.Добавить(ТаблицаВариантыЗаполнения);

				// сохраняем варианты заполнения таблиц на данной странице
				мСтруктураВариантыЗаполнения.Вставить(ИмяСтраницы, ИмяСтраницы);

				ЕстьИзменения = Истина;				
				
			КонецЕсли;
		Иначе
			
			МассивВариантовЗаполненияСтраниц = ЭтаФорма["ТаблицаВариантыЗаполнения" + ИмяСтраницы];
			
			Если ТаблицаВариантыЗаполнения.Количество() = 0 Тогда
				// Рассмотрим вариант, когда в предыдущей версии формы по данной странице
				// было предусмотрено автозаполнение таблицы, а в текущей версии - отключено.
				// В этом случае из структуры вариантов автозаполнения удаляем элемент,
				// хранящий настройки вариантов автозаполнения текущей станицы.
				мСтруктураВариантыЗаполнения.Удалить(ИмяСтраницы);

				ЕстьИзменения = Истина;
			Иначе
				// Рассмотрим вариант, когда и в предыдущей, и в текущей версии формы было предусмотрено
				// автозаполнение текущей страницы. В этом случае обновляем таблицу значений, содержащей
				// пользовательские настройки вариантов автозаполнения текущей страницы.

				Для каждого ЭлементМассива Из МассивВариантовЗаполненияСтраниц Цикл
					
					ЭлементМассива = ЭлементМассива.ТаблицаВариантовЗаполнения;
					
					Для каждого СтрокаТаблицы Из ТаблицаВариантыЗаполнения Цикл
						КодПоказателя     = СтрокаТаблицы.КодПоказателя;
						ВариантЗаполнения = СтрокаТаблицы.ВариантЗаполнения;

						Если ЭлементМассива.НайтиСтроки(Новый Структура("КодПоказателя", КодПоказателя)).Количество() = 0 Тогда	
							// Рассмотри вариант, когда в новой версии формы список реквизитов,
							// заполняемых автоматически по данным ИБ, дополнен новым реквизитом.
							НоваяСтрока = ЭлементМассива.Добавить();
							НоваяСтрока.КодПоказателя     = КодПоказателя;
							НоваяСтрока.ВариантЗаполнения = ВариантЗаполнения;

							ЕстьИзменения = Истина;
						КонецЕсли;
					КонецЦикла;

					ТаблДляЦикла = ЭлементМассива.Выгрузить();
					
					Для каждого СтрокаТаблицы Из ТаблДляЦикла Цикл
						КодПоказателя = СтрокаТаблицы.КодПоказателя;

						Если ТаблицаВариантыЗаполнения.Найти(КодПоказателя, "КодПоказателя") = Неопределено Тогда
							// Рассмотрим вариант, когда в предыдущей версии отчета для данной страницы
							// было предусмотрено автозаполнение ячейки по коду КодПоказателя,
							// а в текущей версии - отключено. В этом случае удаляем эту ячейку
							// из таблицы пользовательских настроек вариантов автозаполнения.
							СтрокиВЭлементеМассива = ЭлементМассива.НайтиСтроки(Новый Структура("КодПоказателя", КодПоказателя));
							Если  СтрокиВЭлементеМассива.Количество() > 0 Тогда
								ЭлементМассива.Удалить(СтрокиВЭлементеМассива[0]);
								ЕстьИзменения = Истина;
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
					
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;

	КонецЦикла;

	Возврат ЕстьИзменения;

КонецФункции

&НаСервере
Функция ОбновитьНастройкиСтраниц()

	ЕстьИзменения = Ложь;

	// формируем дерево значений - пользовательских настройки страниц отчета
	мПользовательскиеНастройкиСтраниц = РеквизитФормыВЗначение("мДеревоСтраницОтчета").Скопировать();

	// формируем дерево значений - настройки страниц отчета обновленной формы
	ФормироватьСтруктуруСтраницОтчета();

	// Сначала проверяем, не изменилась ли структура настроек страниц (колонки дерева)
	Для каждого ИсхКолонка Из РеквизитФормыВЗначение("мДеревоСтраницОтчета").Колонки Цикл

		Если мПользовательскиеНастройкиСтраниц.Колонки.Найти(ИсхКолонка.Имя) = Неопределено Тогда
			// добавиляем новую колонку
			мПользовательскиеНастройкиСтраниц.Колонки.Добавить(ИсхКолонка.Имя, ИсхКолонка.ТипЗначения, ИсхКолонка.Заголовок, ИсхКолонка.Ширина);
			мПользовательскиеНастройкиСтраниц.ЗагрузитьКолонку(РеквизитФормыВЗначение("мДеревоСтраницОтчета").ВыгрузитьКолонку(ИсхКолонка.Имя), ИсхКолонка.Имя);

			ЕстьИзменения = Истина;
		КонецЕсли;

	КонецЦикла;

	// Выполняем обратную задачу:
	// удаляем отсутствующие колонки
	Для каждого ТекКолонка Из мПользовательскиеНастройкиСтраниц.Колонки Цикл

		Если РеквизитФормыВЗначение("мДеревоСтраницОтчета").Колонки.Найти(ТекКолонка.Имя) = Неопределено Тогда
			// удаляем отсутствующую колонку
			мПользовательскиеНастройкиСтраниц.Колонки.Удалить(мПользовательскиеНастройкиСтраниц.Колонки.Индекс(ТекКолонка));

			ЕстьИзменения = Истина;
		КонецЕсли;

	КонецЦикла;

	// Обновляем строки дерева значений - пользовательских настроек:
	//
	// добавляем новые строки и удаляем лишние:
	Если мДеревоСтраницОтчета.ПолучитьЭлементы().Количество() <> мПользовательскиеНастройкиСтраниц.Строки.Количество() Тогда

		КолвоКолонок     = РеквизитФормыВЗначение("мДеревоСтраницОтчета").Колонки.Количество();

		// добавляем новые строки
		Для каждого Строка Из мДеревоСтраницОтчета.ПолучитьЭлементы() Цикл

			Если мПользовательскиеНастройкиСтраниц.Найти(Строка.ИмяСтраницы, "ИмяСтраницы") = Неопределено Тогда

				НоваяСтрока = мПользовательскиеНастройкиСтраниц.Строки.Добавить();
				Для НомКолонки = 0 По (КолвоКолонок - 1) Цикл
				
					НоваяСтрока[НомКолонки] = Строка[НомКолонки];
				
				КонецЦикла;

			КонецЕсли;

			// обновляем строки второго уровня
			Если Строка.Строки.Количество() > 0 Тогда

				Для каждого Строка2 Из Строка.Строки Цикл

					Если мПользовательскиеНастройкиСтраниц.Найти(Строка2.ИмяСтраницы, "ИмяСтраницы") = Неопределено Тогда

						НоваяСтрока2 = НоваяСтрока.Строки.Добавить();
						Для НомКолонки = 0 По (КолвоКолонок - 1) Цикл

							НоваяСтрока2[НомКолонки] = Строка2[НомКолонки];

						КонецЦикла;

					КонецЕсли;

				КонецЦикла; 

			КонецЕсли; 

		КонецЦикла;

		// удаляем лишние строки
		Для каждого Строка Из мПользовательскиеНастройкиСтраниц Цикл

			Если РеквизитФормыВЗначение("мДеревоСтраницОтчета").Найти(Строка.ИмяСтраницы, "ИмяСтраницы") = Неопределено Тогда

				мПользовательскиеНастройкиСтраниц.Строки.Удалить(мПользовательскиеНастройкиСтраниц.Строки.Индекс(Строка));

			КонецЕсли;

		КонецЦикла;

		ЕстьИзменения = Истина;
	КонецЕсли;

	Для каждого ТекСтрока Из мДеревоСтраницОтчета.ПолучитьЭлементы() Цикл

		НомСтр = мДеревоСтраницОтчета.ПолучитьЭлементы().Индекс(ТекСтрока);

		// обновляем представление
		Если ТекСтрока.Представление <> мПользовательскиеНастройкиСтраниц.Строки[НомСтр].Представление Тогда
			мПользовательскиеНастройкиСтраниц.Строки[НомСтр].Представление = ТекСтрока.Представление;
			ЕстьИзменения = Истина;
		КонецЕсли;

		// обновляем имя поля табличного документа
		Если ТекСтрока.ИмяПоляТабличногоДокум <> мПользовательскиеНастройкиСтраниц.Строки[НомСтр].ИмяПоляТабличногоДокум Тогда
			мПользовательскиеНастройкиСтраниц.Строки[НомСтр].ИмяПоляТабличногоДокум = ТекСтрока.ИмяПоляТабличногоДокум;
			ЕстьИзменения = Истина;
		КонецЕсли;

	КонецЦикла; 

	ЗначениеВРеквизитФормы(мПользовательскиеНастройкиСтраниц.Скопировать(), "мДеревоСтраницОтчета");

	Возврат ЕстьИзменения;

КонецФункции

&НаКлиенте
Процедура СохранитьОтчет(Команда)
	
	Если Элементы.РазделыОтчета.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СохранитьНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНаКлиенте(Автосохранение = Ложь, ВыполняемоеОповещение = Неопределено) Экспорт
	
	Вариант = СтруктураРеквизитовФормы.ВидДокумента * НомерКорректировки;

	Если СтруктураДанныхТитульный.Количество() = 0
		ИЛИ СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
		СтруктураДанныхТитульный.Вставить("КодИМНС", ТабличныйДокумент.Области.КодИМНС.Значение);
		СтруктураДанныхТитульный.Вставить("КПП1", ТабличныйДокумент.Области.КПП1.Значение);
	КонецЕсли;
	
	КодИФНС = СтруктураДанныхТитульный.КодИМНС;
	КПП     = СтруктураДанныхТитульный.КПП1;
                       
	Если НЕ РегламентированнаяОтчетностьКлиент.ПриЗаписиРегламентированногоОтчетаНаКлиенте(ЭтаФорма, КодИФНС, Автосохранение, Вариант) Тогда
		Возврат;
	КонецЕсли;
	
	ПодобныйОтчетСуществует = Ложь;
	ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки = Ложь;
	
	Если Элементы.РазделыОтчета.ТекущиеДанные = Неопределено Тогда
		НаименованиеТекущегоРаздела = СтруктураРеквизитовФормы.НаимТекущегоРаздела;
	Иначе
		НаименованиеТекущегоРаздела = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
	КонецЕсли;
	
	РезультатСохранения = ПередСохранением(КодИФНС, КПП, ПодобныйОтчетСуществует, Вариант, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, Автосохранение, НаименованиеТекущегоРаздела);
	
	ВидДокументаНомерКорректировкиИзменен = Неопределено;
	
	Если ПодобныйОтчетСуществует И Автосохранение Тогда
		Возврат;
	КонецЕсли;
	
	НуженВопросПередСохранением = (ПодобныйОтчетСуществует ИЛИ ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки);
	
	Если НуженВопросПередСохранением Тогда
		
		СохранитьНаКлиентеСВопросом(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, ПодобныйОтчетСуществует, КодИФНС, КПП);
		
	Иначе
		
		ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНаКлиентеСВопросом(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, ПодобныйОтчетСуществует, КодИФНС, КПП)
	
	Если ПодобныйОтчетСуществует Тогда
		
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(КодВозвратаДиалога.Да, "Сохранить");
		Кнопки.Добавить(КодВозвратаДиалога.Нет, "Отмена");
		
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Отчет с видом %1 уже существует.
			|Сохранить отчет с таким же видом?'"), ?(Вариант = 0, """Первичный""", """Корректирующий/" + Вариант + """"));
		ДополнительныеПараметры = Новый Структура("Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, КодИФНС, КПП", Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, КодИФНС, КПП);
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросСохранитьОтчетСТакимЖеВидомЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, Кнопки, , Кнопки.Получить(1).Значение);
		
	Иначе
		
		СохранитьНаКлиентеСВопросомПродолжение(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки,КодИФНС, КПП);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросСохранитьОтчетСТакимЖеВидомЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Автосохранение = ДополнительныеПараметры.Автосохранение;
	Вариант = ДополнительныеПараметры.Вариант;
	ВыполняемоеОповещение = ДополнительныеПараметры.ВыполняемоеОповещение;
	КодИФНС = ДополнительныеПараметры.КодИФНС;
	КПП = ДополнительныеПараметры.КПП;
	ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки = ДополнительныеПараметры.ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки;
	
	Ответ = РезультатВопроса;
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	СохранитьНаКлиентеСВопросомПродолжение(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки,КодИФНС, КПП);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНаКлиентеСВопросомПродолжение(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, КодИФНС, КПП)
	
	Если ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки Тогда
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("ВидОтчета", Вариант);
		
		ФормаВопроса = РегламентированнаяОтчетностьКлиент.ПолучитьОбщуюФормуПоИмени("ВопросПриИзмененииВидаДокументаНомераКорректировки", ПараметрыФормы);
		ФормаВопроса.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		ДополнительныеПараметры = Новый Структура("Автосохранение, Вариант, ВыполняемоеОповещение, КодИФНС, КПП", Автосохранение, Вариант, ВыполняемоеОповещение,КодИФНС, КПП );
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросПриИзмененииВидаДокументаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ФормаВопроса.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
		ФормаВопроса.Открыть();
	Иначе
		Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Сохраняется %1...'"), ЭтаФорма.Заголовок), , , БиблиотекаКартинок.Записать);
		РезультатСохранения = Сохранить(Автосохранение, КодИФНС, КПП, Вариант, Неопределено, Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
		ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПриИзмененииВидаДокументаЗавершение(КодВозврата, ДополнительныеПараметры) Экспорт
	
	Автосохранение = ДополнительныеПараметры.Автосохранение;
	Вариант = ДополнительныеПараметры.Вариант;
	ВыполняемоеОповещение = ДополнительныеПараметры.ВыполняемоеОповещение;
	КодИФНС = ДополнительныеПараметры.КодИФНС;
	КПП = ДополнительныеПараметры.КПП;
	Если КодВозврата = КодВозвратаДиалога.Да
		ИЛИ КодВозврата = КодВозвратаДиалога.Нет Тогда
		ВидДокументаНомерКорректировкиИзменен = ?(КодВозврата = КодВозвратаДиалога.Да, Истина, Ложь);
	Иначе
		Возврат;
	КонецЕсли;
	
	Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Сохраняется %1...'"), ЭтаФорма.Заголовок), , , БиблиотекаКартинок.Записать);
	РезультатСохранения = Сохранить(Автосохранение, КодИФНС, КПП, Вариант, ВидДокументаНомерКорректировкиИзменен, Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
	ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения)
	
	КлючУникальности = СтруктураРеквизитовФормы.мСохраненныйДок;
	
	Если РезультатСохранения Тогда
		
		РегламентированнаяОтчетностьКлиент.ПослеЗаписиРегламентированногоОтчета(ЭтаФорма);
		
		Если ВыполняемоеОповещение <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ВыполняемоеОповещение);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПередСохранением(КодИФНС, КПП, ПодобныйОтчетСуществует, Вариант, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, Автосохранение, НаимТекРаздела)
	
	Если РегламентированнаяОтчетность.БылиИзмененыКлючевыеРеквизитыОтчета(ЭтаФорма, КодИФНС, КПП)
	   И РегламентированнаяОтчетность.СуществуетДокументСАналогичнымиРеквизитами(ЭтаФорма, КодИФНС, КПП) Тогда
		
		ПодобныйОтчетСуществует = Истина;
		
	КонецЕсли;
	
	СтруктураРеквизитовФормы.мЗаписываетсяНовыйДокумент = (СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено ИЛИ СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено);
	
	Если Вариант <> Неопределено И ((СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено) ИЛИ (СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено) ИЛИ (Вариант <> СтруктураРеквизитовФормы.мВариант)) Тогда
		
		Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено ИЛИ СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено Тогда
						
		ИначеЕсли Вариант <> СтруктураРеквизитовФормы.мВариант Тогда
			
			ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки = Истина;
								
		КонецЕсли;

	КонецЕсли;
	
	Если ПодобныйОтчетСуществует
	 ИЛИ ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки Тогда
	 
	 	Возврат Ложь;
		
 	КонецЕсли;
		
	Возврат Сохранить(Автосохранение, КодИФНС, КПП, Вариант, , НаимТекРаздела);
		
КонецФункции

&НаСервере
Функция Сохранить(Автосохранение = Ложь, КодИФНС, КПП, Вариант, ВидДокументаНомерКорректировкиИзменен = Неопределено, НаимТекРаздела) Экспорт	
	
	ДанныеДляРазблокирования = Неопределено;
	
	Если НЕ СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
		Если НЕ СтруктураРеквизитовФормы.мБезОткрытияФормы Тогда
			ДанныеДляРазблокирования = Новый Структура("Ключ,ИдФормы",
			СтруктураРеквизитовФормы.мСохраненныйДок, ЭтаФорма.УникальныйИдентификатор);
		КонецЕсли;
		СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.ПолучитьОбъект();
	КонецЕсли;
	
	Если НЕ РегламентированнаяОтчетность.ПриЗаписиРегламентированногоОтчетаНаСервере(ЭтаФорма, КодИФНС, Автосохранение, Вариант, ВидДокументаНомерКорректировкиИзменен, СтруктураРеквизитовФормы.мСохраненныйДок) Тогда
		СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
		Возврат Ложь;
	КонецЕсли;
	
	//Если перед сохранением изменяли значение показателя - нужен полный расчет
	Если СтруктураРеквизитовФормы.НужноРассчитатьОтчетНаСервере Тогда
		РасчетНаСервере();
	КонецЕсли; 
	
	// установим текущие значения реквизитов документа
	СтруктураРеквизитовФормы.мСохраненныйДок.ИсточникОтчета = Метаданные.Отчеты[ИмяОтчета(ЭтаФорма.ИмяФормы)].Имя;
	СтруктураРеквизитовФормы.мСохраненныйДок.НаименованиеОтчета = Метаданные.Отчеты[ИмяОтчета(ЭтаФорма.ИмяФормы)].ОсновнаяФорма.Синоним;
	СтруктураРеквизитовФормы.мСохраненныйДок.ДатаНачала               = СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета;
	СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания            = СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета;
	СтруктураРеквизитовФормы.мСохраненныйДок.Периодичность            = СтруктураРеквизитовФормы.мПериодичность;
	СтруктураРеквизитовФормы.мСохраненныйДок.ВыбраннаяФорма           = СтруктураРеквизитовФормы.мВыбраннаяФорма;
	СтруктураРеквизитовФормы.мСохраненныйДок.Организация              = СтруктураРеквизитовФормы.Организация;
	СтруктураРеквизитовФормы.мСохраненныйДок.ДатаПодписи              = ДатаПодписи;
	СтруктураРеквизитовФормы.мСохраненныйДок.ЕдиницаИзмерения         = СтруктураРеквизитовФормы.ЕдиницаИзмерения;
	СтруктураРеквизитовФормы.мСохраненныйДок.ТочностьЕдиницыИзмерения = СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения;
	СтруктураРеквизитовФормы.мСохраненныйДок.ВидОтчетности            = Перечисления.ВидыОтчетности.РегламентированнаяОтчетность;
	СтруктураРеквизитовФормы.мСохраненныйДок.Комментарий              = Комментарий;
	СтруктураРеквизитовФормы.мСохраненныйДок.КодНалоговогоОргана      = КодИФНС;
	СтруктураРеквизитовФормы.мСохраненныйДок.КПП        			  = КПП;
	СтруктураРеквизитовФормы.мСохраненныйДок.Вид                      = Вариант;
	СтруктураРеквизитовФормы.мСохраненныйДок.ПредставлениеВида        = РегламентированнаяОтчетность.ПредставлениеВидаДокумента(СтруктураРеквизитовФормы.мСохраненныйДок.Вид);
	СтруктураРеквизитовФормы.мВариант                                 = Вариант;

	СтруктураРеквизитовФормы.мСохраненныйДок.ФорматВыгрузки = "Автоматически";
	
	СохранитьДанныеРаздела(НаимТекРаздела, Ложь, Ложь);
	
	ЗаполнитьПустыеСтруктурыДанных();
	
	// формируем данные редактируемых ячеек таблицы
	ПоказателиОтчета = Новый Структура();
	
	ЗаполнитьПоказателиОтчетаНаСервере(ПоказателиОтчета);
	
	// формируем список сохранения
	СписокСохранения = Новый Структура();

	// вставляем данные редактируемых ячеек таблицы	
	СписокСохранения.Вставить("ПоказателиОтчета", ПоказателиОтчета);

	ДанныеМногострочныхРазделов = Новый Структура;
	
	Для Каждого ЭлементСтруктуры Из мСтруктураМногострочныхРазделов Цикл
		
		ДанныеМногострочныхРазделов.Вставить(ЭлементСтруктуры.Ключ, ДанныеФормыВЗначение(ЭтаФорма[ЭлементСтруктуры.Значение], Тип("ТаблицаЗначений")));
		
	КонецЦикла;
	
	// вставляем данные многострочных разделов
	СписокСохранения.Вставить("ДанныеМногострочныхРазделов", ДанныеМногострочныхРазделов);
	
	ДанныеМногостраничныхРазделов = Новый Структура;
	
	МассивТиповНеопределено = Новый Массив; 
	МассивТиповНеопределено.Добавить(Тип("Неопределено"));
	ОписаниеТиповНеопределено = Новый ОписаниеТипов(МассивТиповНеопределено);
	
	Для Каждого ЭлементСтруктуры Из мСтруктураМногостраничныхРазделов Цикл
		
		ДанныеМногостраничныхРазделов.Вставить(ЭлементСтруктуры.Ключ, ДанныеФормыВЗначение(ЭтаФорма[ЭлементСтруктуры.Значение], Тип("ТаблицаЗначений")));
		
		ТаблЗнач = Неопределено;
		
		Если ДанныеМногостраничныхРазделов.Свойство(ЭлементСтруктуры.Ключ, ТаблЗнач) Тогда
						
			Если НЕ ТаблЗнач.Колонки.Найти("Данные") = Неопределено Тогда
												
				ТаблЗнач.Колонки.Удалить("Данные");
				ТаблЗнач.Колонки.Добавить("Данные", ОписаниеТиповНеопределено);
				
				Ном = 0;
				
				Для Каждого СтрокаТаблЗнач Из ТаблЗнач Цикл
					
					Если ЭлементСтруктуры.Значение = "ТаблицаСтраницыФизЛица" Тогда
						Если ЭтаФорма[ЭлементСтруктуры.Значение][Ном].Данные.Количество()=0 Тогда
							ЭтаФорма[ЭлементСтруктуры.Значение][Ном].Данные.Добавить(ВозвратитьПустойОбразЛистаФЛ(ЭтаФорма));
						КонецЕсли;
					КонецЕсли;
					
					СтрокаТаблЗнач.Данные = ЭтаФорма[ЭлементСтруктуры.Значение][Ном].Данные[0].Значение;
					
					Ном = Ном + 1;
					
				КонецЦикла;
				
			КонецЕсли;
						
			Если НЕ ТаблЗнач.Колонки.Найти("ДанныеДопСтрок") = Неопределено Тогда
															
				ТаблЗнач.Колонки.Удалить("ДанныеДопСтрок");
				ТаблЗнач.Колонки.Добавить("ДанныеДопСтрок", ОписаниеТиповНеопределено);
				
				Ном = 0;
				
				Для Каждого СтрокаТаблЗнач Из ТаблЗнач Цикл
						
					Если (ЭтаФорма[ЭлементСтруктуры.Значение][Ном].ДанныеДопСтрок.Количество() > 0)
					   И (ЭтаФорма[ЭлементСтруктуры.Значение][Ном].ДанныеДопСтрок[0].Представление = "ДанныеФормыКоллекцияТаблицаДопСтрокРаздела") Тогда
																			
						СтрокаТаблЗнач.ДанныеДопСтрок = ДанныеФормыВЗначение(ЭтаФорма[ЭлементСтруктуры.Значение][Ном].ДанныеДопСтрок[0].Значение, Тип("ТаблицаЗначений"));
						
						Ном = Ном + 1;
						
						Продолжить;
							
					КонецЕсли;
					
					СтруктураДанныхДопСтрок = Новый Структура;
					
					Для Каждого ЭлСтруктуры Из ЭтаФорма[ЭлементСтруктуры.Значение][Ном].ДанныеДопСтрок Цикл
														
						СтруктураДанныхДопСтрок.Вставить(ДанныеФормыВЗначение(ЭлСтруктуры.Значение, Тип("ТаблицаЗначений")));	
							
					КонецЦикла;
					
					СтрокаТаблЗнач.ДанныеДопСтрок = СтруктураДанныхДопСтрок;
			
					Ном = Ном + 1;
								
				КонецЦикла;
				
			КонецЕсли;
						
		КонецЕсли;
				
	КонецЦикла;
		
	// вставляем данные многостраничных разделов
	СписокСохранения.Вставить("ДанныеМногостраничныхРазделов", ДанныеМногостраничныхРазделов);
	
	ДанныеВариантовАвтоЗаполнения = Новый Структура;
	
	Для Каждого ЭлементСтруктуры Из мСтруктураВариантыЗаполнения Цикл
		
		МассивТаблЗнач = Новый Массив;
		
		ДанныеВариантовАвтоЗаполнения.Вставить(ЭлементСтруктуры.Ключ, МассивТаблЗнач);
			
		Для Каждого ЭлементМассива Из ЭтаФорма["ТаблицаВариантыЗаполнения" + ЭлементСтруктуры.Ключ] Цикл
			
			МассивТаблЗнач.Добавить(ДанныеФормыВЗначение(ЭлементМассива.ТаблицаВариантовЗаполнения, Тип("ТаблицаЗначений")));
			
		КонецЦикла;
			
	КонецЦикла;
	
	// вставляем данные вариантов автозаполнения ячеек
	СписокСохранения.Вставить("ДанныеВариантовАвтоЗаполнения", ДанныеВариантовАвтоЗаполнения);
	
	// вствляем версию формы
	СписокСохранения.Вставить("ВерсияФормы", СтруктураРеквизитовФормы.мВерсияФормы);
	
	// вствляем флажок пересчета страниц
	СписокСохранения.Вставить("ФлПодсчетСтраниц", СтруктураРеквизитовФормы.мСчетчикСтраниц);
	
	СписокСохранения.Вставить("ФлПроверятьСоотношенияПриПечатиИВыгрузки", СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки);
	
	// вствляем флажок отключения
	СписокСохранения.Вставить("ФлОтклВыборЗначений", СтруктураРеквизитовФормы.мАвтоВыборКодов);

	// вствляем флажок ручной ввод ВРЕМЕННАЯ ОТМЕНА
	СписокСохранения.Вставить("Автозаполнение", СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);

	// вствляем флажок разрешения печати без штрихкода
	СписокСохранения.Вставить("ПечатьБезШтрихкодаРазрешена", СтруктураРеквизитовФормы.мПечатьБезШтрихкодаРазрешена);
	
	ХранилищеДанных = Новый ХранилищеЗначения(СписокСохранения);
	СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета = ХранилищеДанных;

	// записываем документ, хранящий данные отчета	
	Попытка
		СтруктураРеквизитовФормы.мСохраненныйДок.Записать();
		РегламентированнаяОтчетность.СохранитьСтатусОтправкиРеглОтчета(ЭтаФорма);
	Исключение
		Если НЕ Автосохранение Тогда
			
			Сообщение = Новый СообщениеПользователю;

			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), РегламентированнаяОтчетностьКлиентСервер.СформироватьТекстСообщения(ОписаниеОшибки()));

			Сообщение.Сообщить();
			
		КонецЕсли;
		СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
		Возврат Ложь;
	КонецПопытки;
			
	Модифицированность  = Ложь;
	
	СохранитьДеревоНастройкиСтраниц(СтруктураРеквизитовФормы.мСохраненныйДок);
	
	СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
	
	Если НЕ СтруктураРеквизитовФормы.мБезОткрытияФормы
       И НЕ СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
				   
    	ЗаблокироватьДанныеДляРедактирования(СтруктураРеквизитовФормы.мСохраненныйДок, , ЭтаФорма.УникальныйИдентификатор);

    КонецЕсли;
	
	Если ДанныеДляРазблокирования <> Неопределено Тогда
		РазблокироватьДанныеДляРедактирования(ДанныеДляРазблокирования.Ключ, ДанныеДляРазблокирования.ИдФормы);
	КонецЕсли;
	
	Возврат Истина;

КонецФункции

&НаСервере
Процедура ЗаполнитьПоказателиОтчетаНаСервере(ПоказателиОтчета)
	
	Префикс = "ПолеТабличногоДокумента";
	
	Для Каждого Раздел Из мСвойстваРазделовДекларации.ПолучитьЭлементы() Цикл
			
		Если НЕ Раздел.МногостраничностьВРазделе Тогда
			ПоказателиОтчета.Вставить(Префикс + Раздел.ИмяСтраницы, ЭтаФорма["СтруктураДанных" + Раздел.ИмяСтраницы]);
		КонецЕсли;
	
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПустыеСтруктурыДанных()
	
	СохрТабличныйДокумент = Новый ТабличныйДокумент;
	
	СохрТабличныйДокумент.Вывести(ТабличныйДокумент);
	
	СохрИмяРаздела = СтруктураРеквизитовФормы.НаимТекущегоРаздела;

	Для Каждого Раздел Из мСвойстваРазделовДекларации.ПолучитьЭлементы() Цикл
		
		СтруктураРеквизитовФормы.НаимТекущегоРаздела = Раздел.ИмяСтраницы;
		
		Если НЕ Раздел.МногостраничностьВРазделе
		  И (ЭтаФорма["СтруктураДанных" + Раздел.ИмяСтраницы].Количество() = 0) Тогда
		  
			ТабличныйДокумент.Очистить();
			ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + Раздел.ИмяСтраницы));
			
			СохранитьДанныеРаздела(Раздел.ИмяСтраницы, Ложь);
			
		ИначеЕсли Раздел.МногостраничностьВРазделе
			И (ЭтаФорма[мСтруктураМногостраничныхРазделов[Раздел.ИмяСтраницы]][0].Данные.Количество() = 0) Тогда
			
			ТабличныйДокумент.Очистить();
			ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + Раздел.ИмяСтраницы));
			
			ЗаполнитьПоказателиЗначениямиПоУмолчанию(Раздел.ИмяСтраницы);
			
			СохранитьДанныеРаздела(Раздел.ИмяСтраницы, Ложь, Ложь);
			
		КонецЕсли;
	
	КонецЦикла;
	
	СтруктураРеквизитовФормы.НаимТекущегоРаздела = СохрИмяРаздела;
	
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(СохрТабличныйДокумент);
	
КонецПроцедуры

&НаСервере
Процедура ВывестиРазделВТабличныйДокументНаСервере(ИмяГруппы, СтруктураГруппы) Экспорт
	
	ВывестиРазделВТабличныйДокумент(ЭтаФорма, ИмяГруппы, СтруктураГруппы);
	
КонецПроцедуры

&НаКлиенте
Процедура ВывестиРазделВТабличныйДокументНаКлиенте(ИмяГруппы, СтруктураГруппы) Экспорт
	
	ВывестиРазделВТабличныйДокумент(ЭтаФорма, ИмяГруппы, СтруктураГруппы);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ВывестиРазделВТабличныйДокумент(Форма, ИмяГруппы, СтруктураГруппы)
	
	Перем ИсходноеКоличествоСтрокГруппы;

	#Если НаКлиенте Тогда
		ТекущаяСтраница = Форма.ОпределитьТабличноеПолеПоИдМногострочногоРазделаНаКлиенте(ИмяГруппы);
	#Иначе
		ТекущаяСтраница = Форма.ОпределитьТабличноеПолеПоИдМногострочногоРазделаНаСервере(ИмяГруппы);
	#КонецЕсли

	// определим исходное колво строк многострочного раздела,
	// соответствующее бумажной форме отчета
	Форма.мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);

	// реальное кол-во строк (колво заполненных строк)
	ТекущееКоличествоСтрокГруппы = СтруктураГруппы.Количество();

	ТекТабличноеПолеИмя = "ТабличныйДокумент";
	
	ТекТабличноеПоле = Форма[ТекТабличноеПолеИмя];

	// При восстановлении сохраненных данных отчета сравниваем исходное кол-во
	// отображаемых в форме строк многострочного раздела с реальным количеством
	// созданных строк в сохраненном отчете.
	Если ТекущееКоличествоСтрокГруппы > ИсходноеКоличествоСтрокГруппы Тогда
		
		// При превышении реального кол-ва строк над исходным кол-вом (по шаблону),
		// автоматически добавляем необходимое колво строк.
		Форма.ДобавитьНеобходимоеКоличествоДопСтрокНаСервере(ТекТабличноеПоле, ТекТабличноеПолеИмя, ИсходноеКоличествоСтрокГруппы, ТекущееКоличествоСтрокГруппы, ИмяГруппы, СтруктураГруппы);

		Форма[ТекТабличноеПолеИмя] = ТекТабличноеПоле;
		
	КонецЕсли;
	
	// выводим значения строк
	Для Каждого СтрокаТаблицы Из СтруктураГруппы Цикл
		
		НомерСтрокиВТаблице      = СтруктураГруппы.Индекс(СтрокаТаблицы);
		НомерСтрокиВФормеТаблицы = НомерСтрокиВТаблице + 1;
		
		Для НомерГрафы = 1 По Форма.мСтруктураКолвоКолонокРазделов[ИмяГруппы] Цикл
			
			КолонкаТаблицыИмя = ИмяГруппы + Формат(НомерГрафы, "ЧЦ=2; ЧВН=");
			
			Если СтруктураГруппы[0].Свойство(КолонкаТаблицыИмя) Тогда
				
				ИмяЯчейки                = КолонкаТаблицыИмя + "_" + НомерСтрокиВФормеТаблицы;
				ОбластьЯчейкиТаблицы     = ТекТабличноеПоле.Области[ИмяЯчейки];
				ЗначениеЯчейки           = СтрокаТаблицы[КолонкаТаблицыИмя];
				
				Если ОбластьЯчейкиТаблицы.СодержитЗначение = Истина Тогда
					ОбластьЯчейкиТаблицы.Значение = ЗначениеЯчейки;
				Иначе
					// устанавливаем порядковый номер строки
					ОбластьЯчейкиТаблицы.Текст = ЗначениеЯчейки;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьНеобходимоеКоличествоДопСтрокНаСервере(ТекТабличноеПоле, ТекТабличноеПолеИмя, ИсходноеКоличествоСтрокГруппы, ТекущееКоличествоСтрокГруппы, ИмяГруппы, СтруктураГруппы) Экспорт
		
	ОбластьДопСтроки = ТекТабличноеПоле.ПолучитьОбласть("МногострочнаяЧасть");
	
	МногострочнаяЧастьВерх = ТекТабличноеПоле.Области.МногострочнаяЧасть.Верх;
			
	ТекТабличноеПоле.ВставитьОбласть(ОбластьДопСтроки.Область(), ТекТабличноеПоле.Область(МногострочнаяЧастьВерх + 1, , МногострочнаяЧастьВерх + ТекущееКоличествоСтрокГруппы - 1), ТипСмещенияТабличногоДокумента.ПоВертикали);
		
	Для НомНовойСтроки = ИсходноеКоличествоСтрокГруппы По ТекущееКоличествоСтрокГруппы Цикл
						
		Для Каждого Область Из ОбластьДопСтроки.Области Цикл
			
			ОбластьТаблДок = ТекТабличноеПоле.Область(МногострочнаяЧастьВерх + ТекущееКоличествоСтрокГруппы - НомНовойСтроки, Область.Лево, МногострочнаяЧастьВерх + ТекущееКоличествоСтрокГруппы - НомНовойСтроки, Область.Право);
			
			Если ОбластьТаблДок.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
				
				Если ОбластьТаблДок.СодержитЗначение Тогда
					ОбластьТаблДок.Очистить();
				КонецЕсли;
				
				ОбластьТаблДок.Имя = Лев(Область.Имя, СтрНайти(Область.Имя, "_")) + Строка(ТекущееКоличествоСтрокГруппы - НомНовойСтроки + 1);
				
			КонецЕсли;
			
		КонецЦикла;
						
	КонецЦикла;	
		
	ТекТабличноеПоле.Область(ТекТабличноеПоле.Области.МногострочнаяЧасть.Верх, , ТекТабличноеПоле.Области.МногострочнаяЧасть.Верх).Имя = "";
	
	ТекТабличноеПоле.Область(МногострочнаяЧастьВерх, , МногострочнаяЧастьВерх).Имя = "МногострочнаяЧасть";
	
КонецПроцедуры

&НаКлиенте
Функция ОпределитьТабличноеПолеПоИдМногострочногоРазделаНаКлиенте(ИдГруппы) Экспорт
	
	ИдГрупп = Новый Структура;
	ИдГрупп.Вставить("мИдГруппы1", СтруктураРеквизитовФормы.мИдГруппы1);
	ИдГрупп.Вставить("мИдГруппы2", СтруктураРеквизитовФормы.мИдГруппы2);
	ИдГрупп.Вставить("мИдГруппы3", СтруктураРеквизитовФормы.мИдГруппы3);
	ИдГрупп.Вставить("мИдГруппы4", СтруктураРеквизитовФормы.мИдГруппы4);
	ИдГрупп.Вставить("мИдГруппы5", СтруктураРеквизитовФормы.мИдГруппы5);
		
	Возврат ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИдГруппы, ИдГрупп);
		
КонецФункции

&НаСервере
Функция ОпределитьТабличноеПолеПоИдМногострочногоРазделаНаСервере(ИдГруппы) Экспорт
	
	ИдГрупп = Новый Структура;
	ИдГрупп.Вставить("мИдГруппы1", СтруктураРеквизитовФормы.мИдГруппы1);
	ИдГрупп.Вставить("мИдГруппы2", СтруктураРеквизитовФормы.мИдГруппы2);
	ИдГрупп.Вставить("мИдГруппы3", СтруктураРеквизитовФормы.мИдГруппы3);
	ИдГрупп.Вставить("мИдГруппы4", СтруктураРеквизитовФормы.мИдГруппы4);
	ИдГрупп.Вставить("мИдГруппы5", СтруктураРеквизитовФормы.мИдГруппы5);
	
	Возврат ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИдГруппы, ИдГрупп);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИдГруппы, ИдГрупп) Экспорт
	
	Перем ТекТабличноеПоле;
		
	Если ИдГруппы = ИдГрупп.мИдГруппы1 Тогда
		
		ТекТабличноеПоле = "Раздел2";
		
	ИначеЕсли ИдГруппы = ИдГрупп.мИдГруппы2 Тогда
		
		ТекТабличноеПоле = "Раздел5";
		
	ИначеЕсли ИдГруппы = ИдГрупп.мИдГруппы3 Тогда
		
		ТекТабличноеПоле = "Раздел6";
		
	ИначеЕсли ИдГруппы = ИдГрупп.мИдГруппы4 Тогда
		
		ТекТабличноеПоле = "Раздел7";
		
	ИначеЕсли ИдГруппы = ИдГрупп.мИдГруппы5 Тогда
		
		ТекТабличноеПоле = "Раздел10_Прил1";
		
	КонецЕсли;

	Возврат ТекТабличноеПоле;
	
КонецФункции

&НаСервере
Функция ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ИмяЛиста = Неопределено) Экспорт
	
	ИдГрупп = Новый Структура;
	ИдГрупп.Вставить("мИдГруппы1", СтруктураРеквизитовФормы.мИдГруппы1);
	ИдГрупп.Вставить("мИдГруппы2", СтруктураРеквизитовФормы.мИдГруппы2);
	ИдГрупп.Вставить("мИдГруппы3", СтруктураРеквизитовФормы.мИдГруппы3);
	ИдГрупп.Вставить("мИдГруппы4", СтруктураРеквизитовФормы.мИдГруппы4);
	ИдГрупп.Вставить("мИдГруппы5", СтруктураРеквизитовФормы.мИдГруппы5);
	
	Возврат ОпределитьИдМногострочногоРазделаПоАктивнойСтранице(ИмяЛиста, , ИдГрупп);
	
КонецФункции

&НаКлиенте
Функция ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаКлиенте(ИмяЛиста = Неопределено) Экспорт
	
	ИдГрупп = Новый Структура;
	ИдГрупп.Вставить("мИдГруппы1", СтруктураРеквизитовФормы.мИдГруппы1);
	ИдГрупп.Вставить("мИдГруппы2", СтруктураРеквизитовФормы.мИдГруппы2);
	ИдГрупп.Вставить("мИдГруппы3", СтруктураРеквизитовФормы.мИдГруппы3);
	ИдГрупп.Вставить("мИдГруппы4", СтруктураРеквизитовФормы.мИдГруппы4);
	ИдГрупп.Вставить("мИдГруппы5", СтруктураРеквизитовФормы.мИдГруппы5);
	
	Возврат ОпределитьИдМногострочногоРазделаПоАктивнойСтранице(ИмяЛиста, , ИдГрупп);

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ОпределитьИдМногострочногоРазделаПоАктивнойСтранице(ИмяЛиста = Неопределено, ТекущаяСтраница, ИдГрупп)
	
	Перем ИмяГруппы;
	
	Если ИмяЛиста = Неопределено Тогда
		ИмяТекущейСтраницыПанели = ТекущаяСтраница.Имя;
	Иначе
		ИмяТекущейСтраницыПанели = ИмяЛиста;
	КонецЕсли;

	Если ИмяТекущейСтраницыПанели = "Раздел2" Тогда
		ИмяГруппы = ИдГрупп.мИдГруппы1;
	ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел5" Тогда
		ИмяГруппы = ИдГрупп.мИдГруппы2;
	ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел6" Тогда
		ИмяГруппы = ИдГрупп.мИдГруппы3;
	ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел7" Тогда
		ИмяГруппы = ИдГрупп.мИдГруппы4;
	ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел10_Прил1" Тогда
		ИмяГруппы = ИдГрупп.мИдГруппы5;
	КонецЕсли;

	Возврат ИмяГруппы;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ОтобразитьНомерКорректировки(Форма)
	
	ВыбранКорректирующийВидДок = (Форма.СтруктураРеквизитовФормы.ВидДокумента = 1);

	НомерКорр = Форма.СтруктураРеквизитовФормы.ВидДокумента * Форма.НомерКорректировки;
	НомерКорректировкиСтрока = Формат(НомерКорр, "ЧН=; ЧГ=");
	СтрДлинаНомерКорректировкиСтрока = СтрДлина(НомерКорректировкиСтрока);
	
	Форма.ТабличныйДокумент.Области["ВидДок"].Значение = ?(ВыбранКорректирующийВидДок, "3", "1");
	Форма.ТабличныйДокумент.Области["НомКоррект"].Значение = НомерКорректировкиСтрока;

Конецпроцедуры

&НаСервере
Процедура УстановитьФорматВыводаНаСервере(НаимРаздела)
	
	УстановитьФорматВывода(ЭтаФорма, НаимРаздела);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьФорматВыводаНаКлиенте(НаимРаздела)
	
	УстановитьФорматВывода(ЭтаФорма, НаимРаздела);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьФорматВывода(Форма, НаимРаздела) Экспорт
	Перем СтруктураГруппы;

	Если Форма.СтруктураРеквизитовФормы.ЕдиницаИзмерения = Форма.ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1 Тогда
		Форма.СтруктураРеквизитовФормы.мСтрокаФормата = "; ЧДЦ = " + Форма.СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧС = 0";
	ИначеЕсли Форма.СтруктураРеквизитовФормы.ЕдиницаИзмерения = Форма.ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1000 Тогда
		Форма.СтруктураРеквизитовФормы.мСтрокаФормата = "; ЧДЦ = " + Форма.СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧС = 3";
	ИначеЕсли Форма.СтруктураРеквизитовФормы.ЕдиницаИзмерения = Форма.ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1000000 Тогда
		Форма.СтруктураРеквизитовФормы.мСтрокаФормата = "; ЧДЦ = " + Форма.СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧС = 6";
	КонецЕсли;
	
	Для Каждого СтрПоказатели Из Форма.мТаблицаСоставПоказателей Цикл

		Если НЕ НаимРаздела = СтрПоказатели.ИмяПоляТаблДокумента Тогда
			Продолжить;
		КонецЕсли;
		
		КодПоказателя				= СокрП(СтрПоказатели.КодПоказателяПоСоставу);
		ПризнМногострочность		= СокрП(СтрПоказатели.ПризнМногострочности);
		КодПоказателяПоСтруктуре	= СокрП(СтрПоказатели.КодПоказателяПоСтруктуре);
		КодПоказателяПоФорме		= СокрП(СтрПоказатели.КодПоказателяПоФорме);
		ТипДанныхПоказателя			= СокрП(СтрПоказатели.ТипДанныхПоказателя);
		ИмяПоказателя				= ?(ПустаяСтрока(СтрПоказатели.КодПоказателяПоФорме), КодПоказателя, КодПоказателяПоФорме);

		Если ПустаяСтрока(КодПоказателя) ИЛИ КодПоказателя = "===" ИЛИ КодПоказателя = "###" ИЛИ Лев(КодПоказателя, 2) = "//" Тогда
			Продолжить;
		КонецЕсли;

		Если ТипДанныхПоказателя = "Е" И ПустаяСтрока(КодПоказателяПоСтруктуре) Тогда
			ТекТабличноеПоле = Форма.ТабличныйДокумент;
			Если ПризнМногострочность <> "/" Тогда
				ФорматируемаяОбласть = ТекТабличноеПоле.Области[ИмяПоказателя];
				ДопустимыйЗнакПоказателя = ФорматируемаяОбласть.ТипЗначения.КвалификаторыЧисла.ДопустимыйЗнак;
				ЧислоЕЗнак = Форма.СтруктураРеквизитовФормы.мОписаниеТиповЧислоЕ;
				
				Если ДопустимыйЗнакПоказателя = ДопустимыйЗнак.Неотрицательный Тогда
					ЧислоЕЗнак = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(ЧислоЕЗнак.КвалификаторыЧисла.Разрядность,ЧислоЕЗнак.КвалификаторыЧисла.РазрядностьДробнойЧасти, ДопустимыйЗнакПоказателя));
				КонецЕсли;
				ФорматируемаяОбласть.ТипЗначения = ЧислоЕЗнак;
				ФорматируемаяОбласть.Формат = "ЧЦ = " + ЧислоЕЗнак.КвалификаторыЧисла.Разрядность + Форма.СтруктураРеквизитовФормы.мСтрокаФормата;
			Иначе
				// определяем кол-во строк многострочного раздела и применяем процедуру форматирования к данной графе по всем строкам
				НСтр = 1;
				Пока ТекТабличноеПоле.Области.Найти(ИмяПоказателя + "_" + Формат(НСтр, "ЧГ=0")) <> Неопределено Цикл
					ФорматируемаяОбласть = ТекТабличноеПоле.Области[ИмяПоказателя + "_" + Формат(НСтр, "ЧГ=0")];
					ДопустимыйЗнакПоказателя = ФорматируемаяОбласть.ТипЗначения.КвалификаторыЧисла.ДопустимыйЗнак;
					ЧислоЕЗнак = Форма.СтруктураРеквизитовФормы.мОписаниеТиповЧислоЕ;
					Если ДопустимыйЗнакПоказателя = ДопустимыйЗнак.Неотрицательный Тогда
						ЧислоЕЗнак = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(ЧислоЕЗнак.КвалификаторыЧисла.Разрядность,ЧислоЕЗнак.КвалификаторыЧисла.РазрядностьДробнойЧасти, ДопустимыйЗнакПоказателя));
					КонецЕсли;
					ФорматируемаяОбласть.ТипЗначения = ЧислоЕЗнак;
					ФорматируемаяОбласть.Формат = "ЧЦ = " + ЧислоЕЗнак.КвалификаторыЧисла.Разрядность + Форма.СтруктураРеквизитовФормы.мСтрокаФормата;
					НСтр = НСтр + 1;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьДатуПодписи(Форма)
	Форма.ТабличныйДокумент.Области.ДатаПодписи.Значение = Форма.ДатаПодписи;
КонецПроцедуры

&НаСервере
Процедура ПоказатьПериод()
	
	Если СтруктураРеквизитовФормы.мПериодичность = Перечисления.Периодичность.Месяц Тогда
						
		СтруктураРеквизитовФормы.СтрПериодОтчета = РегламентированнаяОтчетностьВызовСервера.ПредставлениеФинансовогоПериода(НачалоДня(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета), КонецДня(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета), "Ложь");
		
	Иначе	
		
		СтруктураРеквизитовФормы.СтрПериодОтчета = ПредставлениеПериода(
		НачалоДня(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета),
		КонецДня(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета), "ФП = Истина");
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТабличноеПолеНаКлиенте(ВыбТабличноеПолеИмя) Экспорт

	ОчиститьТабличноеПоле(ЭтаФорма, ВыбТабличноеПолеИмя);

КонецПроцедуры

&НаСервере
Процедура ОчиститьТабличноеПолеНаСервере(ВыбТабличноеПолеИмя) Экспорт

	ОчиститьТабличноеПоле(ЭтаФорма, ВыбТабличноеПолеИмя);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОчиститьТабличноеПоле(Форма, ВыбТабличноеПолеИмя)

	РегламентированнаяОтчетностьКлиентСервер.ОчиститьТабличноеПоле(Форма, ВыбТабличноеПолеИмя);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставленияПоРазделуНаКлиенте(Знач ИмяРаздела) Экспорт

	ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставленияПоРазделу(ЭтаФорма, ИмяРаздела);

КонецПроцедуры

&НаСервере
Процедура ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставленияПоРазделуНаСервере(Знач ИмяРаздела) Экспорт
	
	ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставленияПоРазделу(ЭтаФорма, ИмяРаздела);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнениеЗначенийВКвадратикахНаКлиенте(Знач ИмяСтраницы) Экспорт

	ЗаполнениеЗначенийВКвадратиках(ЭтаФорма, ИмяСтраницы);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнениеЗначенийВКвадратикахНаСервере(Знач ИмяСтраницы) Экспорт

	ЗаполнениеЗначенийВКвадратиках(ЭтаФорма, ИмяСтраницы);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнениеЗначенийВКвадратиках(Форма, Знач ИмяСтраницы)
	
	Возврат;

КонецПроцедуры

&НаКлиенте
Процедура Обновить(Команда)
	
	СохрЗначВКвадратиках(ЭтаФорма);
	
	СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация = Истина;
	
	ЗаполнитьСведенияОбОрганизацииНаСервере();
	
	СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация = Ложь;
	
	Модифицированность = Истина;

КонецПроцедуры

&НаСервере
Процедура РасчетЗависимыхРазделовДекларации(ИмяТекущейСтраницыПанели, Сельхоз = Неопределено, РазделВызвавшийПересчет = Неопределено)

	Если ИмяТекущейСтраницыПанели = "Раздел5" Тогда
		Расчет(ЭтаФорма, "Раздел5");
		Расчет(ЭтаФорма, "Раздел7");
		Расчет(ЭтаФорма, "Раздел10");
		Расчет(ЭтаФорма, "Раздел1_1");

	ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел3" Тогда
		Расчет(ЭтаФорма, "Раздел3");
		
	ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел4" Тогда
		Расчет(ЭтаФорма, "Раздел4");

	ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел6" Тогда
		Расчет(ЭтаФорма, "Раздел6");
		Расчет(ЭтаФорма, "Раздел5");
		Расчет(ЭтаФорма, "Раздел7");
		Расчет(ЭтаФорма, "Раздел10");
		Расчет(ЭтаФорма, "Раздел1_1");

	ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел7" Тогда
		Расчет(ЭтаФорма, "Раздел7");
		Расчет(ЭтаФорма, "Раздел10");
		Расчет(ЭтаФорма, "Раздел1_1");

	ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел8" Тогда
		Расчет(ЭтаФорма, "Раздел8");
		Расчет(ЭтаФорма, "Раздел1_2");

	ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел9" Тогда
		Расчет(ЭтаФорма, "Раздел9");
		Расчет(ЭтаФорма, "Раздел1_3");

	ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел10" Тогда
		Расчет(ЭтаФорма, "Раздел10");
		Расчет(ЭтаФорма, "Раздел1_1");

	ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел10_Прил1" Тогда
		Расчет(ЭтаФорма, "Раздел10_Прил1");

	ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел11" Тогда
		Расчет(ЭтаФорма, "Раздел11");
		Расчет(ЭтаФорма, "Раздел11_Прил2");

	ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел11_Прил1" Тогда
		Расчет(ЭтаФорма, "Раздел11_Прил1");
		Расчет(ЭтаФорма, "Раздел11");
		Расчет(ЭтаФорма, "Раздел11_Прил2");

	ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел11_Прил2" Тогда
		Расчет(ЭтаФорма, "Раздел11_Прил2");

	ИначеЕсли ИмяТекущейСтраницыПанели <> "Титульный" Тогда

		Расчет(ЭтаФорма, ИмяТекущейСтраницыПанели);

	КонецЕсли;

	СтруктураРеквизитовФормы.НужноРассчитатьОтчетНаСервере = Ложь; //Если Истина - рассчитываем при переходах, сохранении, печати.

КонецПроцедуры

&НаКлиенте
Процедура РасчетНаКлиенте(ИмяСтраницыПанели = "", ОбластьИмя = "") Экспорт
	
	Расчет(ЭтаФорма, ИмяСтраницыПанели, ОбластьИмя);

КонецПроцедуры

&НаСервере
Процедура РасчетНаСервере(ИмяСтраницыПанели = "", ОбластьИмя = "") Экспорт
	
	Расчет(ЭтаФорма, ИмяСтраницыПанели, ОбластьИмя);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура Расчет(Форма, ИмяРаздела = "", ОбластьИмя = "")
	
	Перем СтруктураГруппы5;
	
	Если (Форма.СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет) ИЛИ (Форма.СтруктураРеквизитовФормы.мИсключитьЗапускРасчета) Тогда
		Возврат; // отключен режим авторасчета
	КонецЕсли;
	
	Если ИмяРаздела = "Раздел1_1" Тогда

		П000110003000_ФБ = 0;
		П000110004000_ФБ = 0;
		П000110005000_ФБ = 0;
		П000110003000_СБ = 0;
		П000110004000_СБ = 0;
		П000110005000_СБ = 0;
		П000110003000_МБ = 0;
		П000110004000_МБ = 0;
		П000110005000_МБ = 0;

		// Заполняем строки 030 - 050 на основании сохраненных данных раздела 7 "Расчет суммы налога на прибыль".
		
		// Если иностранная организация осуществляет в РФ деятельность через группу отделений, каждое из которых
		// является постоянным представительством в рамках единого технологического процесса, то по показателям
		// "В бюджет субъекта РФ" и "В местный бюджет" отражаются результаты, исчисленные с учетом показателей
		// соответствующих строк раздела 10 "Расчет распределения налога на прибыль между отделениями иностранной
		// организации".

		// пункт Е1 раздела 7
		П000070017004 = СуммаПоказателяПоВсемСтраницам(Форма, "Раздел7", "П000070017004");
		// пункт  Е2 раздела 7
		П000070018004 = СуммаПоказателяПоВсемСтраницам(Форма, "Раздел7", "П000070018004");
		// пункт Е3 раздела 7
		П000070019004 = СуммаПоказателяПоВсемСтраницам(Форма, "Раздел7", "П000070019004");
		// пункт F раздела 7
		П000070020004 = СуммаПоказателяПоВсемСтраницам(Форма, "Раздел7", "П000070020004");
		// пункт G1 раздела 7
		П000070022004 = СуммаПоказателяПоВсемСтраницам(Форма, "Раздел7", "П000070022004");
		// пункт G2 раздела 7
		П000070023004 = СуммаПоказателяПоВсемСтраницам(Форма, "Раздел7", "П000070023004");
		// пункт G3 раздела 7
		П000070024004 = СуммаПоказателяПоВсемСтраницам(Форма, "Раздел7", "П000070024004");
		// пункт J1 раздела 7
		П000070028004 = СуммаПоказателяПоВсемСтраницам(Форма, "Раздел7", "П000070028004");
		// пункт J2 раздела 7
		П000070029004 = СуммаПоказателяПоВсемСтраницам(Форма, "Раздел7", "П000070029004");
		// пункт J3 раздела 7
		П000070030004 = СуммаПоказателяПоВсемСтраницам(Форма, "Раздел7", "П000070030004");
		// пункт K раздела 7
 		П000070031004 = Форма.ТаблицаСтраницыРаздел7[0].Данные[0].Значение.П000070031004;

		//СуммаПоказателяПоВсемСтраницам
		// пункт D раздела 10  (по всем отделениям)
		П000100007004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, СуммаПоказателяПоВсемСтраницам(Форма, "Раздел10", "П000100007004"));
		// пункт F1 раздела 10 (по всем отделениям)
		П000100010004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, СуммаПоказателяПоВсемСтраницам(Форма, "Раздел10", "П000100010004"));
		// пункт F2 раздела 10 (по всем отделениям)
		П000100011004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, СуммаПоказателяПоВсемСтраницам(Форма, "Раздел10", "П000100011004"));
		// пункт G1 раздела 10 (по всем отделениям)
		П000100013004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, СуммаПоказателяПоВсемСтраницам(Форма, "Раздел10", "П000100013004"));
		// пункт G2 раздела 10 (по всем отделениям)
		П000100014004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, СуммаПоказателяПоВсемСтраницам(Форма, "Раздел10", "П000100014004"));

		// СУММЫ Налога
		// в Федеральный бюджет
		П000110003000_ФБ = Макс(П000070017004 - П000070020004 - П000070022004, 0);
		П000110004000_ФБ = Макс(П000070022004 + П000070020004 - П000070017004, 0);
		П000110005000_ФБ = ? (П000070031004<>0, П000070028004 / П000070031004, 0);

		// Заполнение показателей "В бюджет субъекта РФ" и "В местный бюджет" зависит от того,
		// осуществляет ли организация свою деятельность через группу отделений или нет.

		// в бюджет субъектов Федерации
		Если (П000100010004 <> 0) ИЛИ (П000100013004 <> 0) Тогда

			П000110003000_СБ = Макс(П000100010004 - П000100013004, 0);
			П000110004000_СБ = Макс(П000100013004 - П000100010004, 0);
			П000110005000_СБ = ? (П000070031004<>0, (П000070029004 / П000070031004) * (П000100007004 / 100), 0);
		Иначе

			П000110003000_СБ = Макс(П000070018004 - П000070023004, 0);
			П000110004000_СБ = Макс(П000070023004 - П000070018004, 0);
			П000110005000_СБ = ? (П000070031004<>0, П000070029004 / П000070031004, 0);
		КонецЕсли;

		// в местный бюджет 
		Если (П000100011004 <> 0) ИЛИ (П000100014004 <> 0) Тогда

			П000110003000_МБ = Макс(П000100011004 - П000100014004, 0);
			П000110004000_МБ = Макс(П000100014004 - П000100011004, 0);
			П000110005000_МБ = ? (П000070031004<>0, (П000070030004 / П000070031004) * (П000100007004 / 100), 0);
		Иначе

			П000110003000_МБ = Макс(П000070019004 - П000070024004, 0);
			П000110004000_МБ = Макс(П000070024004 - П000070019004, 0);
			П000110005000_МБ = ? (П000070031004<>0, П000070030004 / П000070031004, 0);
		КонецЕсли;

		Форма.СтруктураРеквизитовФормы.мСуммаНалога1_1 = П000110003000_ФБ;
		Форма.СтруктураРеквизитовФормы.мСуммаНалога1_2 = П000110003000_СБ; // П000110004000_ФБ;
		Форма.СтруктураРеквизитовФормы.мСуммаНалога1_3 = П000110003000_МБ; // П000110005000_ФБ;
		
		Форма.СтруктураРеквизитовФормы.мСуммаНалУм1_1  = П000110004000_ФБ; // П000110003000_СБ;
		Форма.СтруктураРеквизитовФормы.мСуммаНалУм1_2  = П000110004000_СБ;
		Форма.СтруктураРеквизитовФормы.мСуммаНалУм1_3  = П000110004000_МБ; // П000110005000_СБ;
		
		Форма.СтруктураРеквизитовФормы.мСуммаПерех1_1  = П000110005000_ФБ; // П000110003000_МБ;
		Форма.СтруктураРеквизитовФормы.мСуммаПерех1_2  = П000110005000_СБ; // П000110004000_МБ;
		Форма.СтруктураРеквизитовФормы.мСуммаПерех1_3  = П000110005000_МБ;
		
		Форма.СтруктураДанныхРаздел1_1.СуммаНалога1 = П000110003000_ФБ;
		Форма.СтруктураДанныхРаздел1_1.СуммаНалога2 = П000110003000_СБ;    // П000110004000_ФБ;
		Форма.СтруктураДанныхРаздел1_1.СуммаНалога3 = П000110003000_МБ;    // П000110005000_ФБ;
		
		Форма.СтруктураДанныхРаздел1_1.СуммаНалУм1  = П000110004000_ФБ;    // П000110003000_СБ;
		Форма.СтруктураДанныхРаздел1_1.СуммаНалУм2  = П000110004000_СБ;
		Форма.СтруктураДанныхРаздел1_1.СуммаНалУм3  = П000110004000_МБ;    // П000110005000_СБ;
		
		Форма.СтруктураДанныхРаздел1_1.СуммаПерех1  = П000110005000_ФБ;    // П000110003000_МБ;
		Форма.СтруктураДанныхРаздел1_1.СуммаПерех2  = П000110005000_СБ;    // П000110004000_МБ;
		Форма.СтруктураДанныхРаздел1_1.СуммаПерех3  = П000110005000_МБ;
		
		Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяРаздела Тогда
			
			Форма.ТабличныйДокумент.Области.СуммаНалога1.Значение = П000110003000_ФБ;
			Форма.ТабличныйДокумент.Области.СуммаНалога2.Значение = П000110003000_СБ;
			Форма.ТабличныйДокумент.Области.СуммаНалога3.Значение = П000110003000_МБ;
			
			Форма.ТабличныйДокумент.Области.СуммаНалУм1.Значение  = П000110004000_ФБ;
			Форма.ТабличныйДокумент.Области.СуммаНалУм2.Значение  = П000110004000_СБ;
			Форма.ТабличныйДокумент.Области.СуммаНалУм3.Значение  = П000110004000_МБ;
			
			Форма.ТабличныйДокумент.Области.СуммаПерех1.Значение  = П000110005000_ФБ;
			Форма.ТабличныйДокумент.Области.СуммаПерех2.Значение  = П000110005000_СБ;
			Форма.ТабличныйДокумент.Области.СуммаПерех3.Значение  = П000110005000_МБ;
			
		КонецЕсли;
			
	ИначеЕсли ИмяРаздела = "Раздел1_2" Тогда //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

		Форма.СтруктураРеквизитовФормы.мСуммаДоплФедРаздел12 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхРаздел8.П000080005004);
		Форма.СтруктураРеквизитовФормы.мСуммаУменФедРаздел12 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхРаздел8.П000080006004);

		Форма.СтруктураДанныхРаздел1_2.СуммаДоплФед = Форма.СтруктураРеквизитовФормы.мСуммаДоплФедРаздел12;
		Форма.СтруктураДанныхРаздел1_2.СуммаУменФед = Форма.СтруктураРеквизитовФормы.мСуммаУменФедРаздел12;

		Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяРаздела Тогда
		
			Форма.ТабличныйДокумент.Области.СуммаДоплФед.Значение = Форма.СтруктураРеквизитовФормы.мСуммаДоплФедРаздел12;
			Форма.ТабличныйДокумент.Области.СуммаУменФед.Значение = Форма.СтруктураРеквизитовФормы.мСуммаУменФедРаздел12;
		
		КонецЕсли;

	ИначеЕсли ИмяРаздела = "Раздел1_3" Тогда //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

		Форма.СтруктураРеквизитовФормы.мСуммаДоплФедРаздел13  = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхРаздел9.П000090007004);
		Форма.СтруктураРеквизитовФормы.мСуммаУменФедРаздел13  = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхРаздел9.П000090008004);
		
		Форма.СтруктураДанныхРаздел1_3.Сумма2ДоплФед = Форма.СтруктураРеквизитовФормы.мСуммаДоплФедРаздел13;
		Форма.СтруктураДанныхРаздел1_3.Сумма2УменФед = Форма.СтруктураРеквизитовФормы.мСуммаУменФедРаздел13;
		
		Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяРаздела Тогда
		
			Форма.ТабличныйДокумент.Области.Сумма2ДоплФед.Значение = Форма.СтруктураРеквизитовФормы.мСуммаДоплФедРаздел13;
			Форма.ТабличныйДокумент.Области.Сумма2УменФед.Значение = Форма.СтруктураРеквизитовФормы.мСуммаУменФедРаздел13;
		
		КонецЕсли;
		
	ИначеЕсли ИмяРаздела = "Раздел3" Тогда //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		
		Если ПустаяСтрока(ОбластьИмя) ИЛИ (Прав(ОбластьИмя, 1) <> "0" И Прав(ОбластьИмя, 1) <> "2") Тогда
			
			ОП000030001004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхРаздел3.П000030001004);
			ОП000030001005 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхРаздел3.П000030001005);
			ОП000030002004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхРаздел3.П000030002004);
			ОП000030002005 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхРаздел3.П000030002005);
			ОП000030003004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхРаздел3.П000030003004);
			ОП000030003005 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхРаздел3.П000030003005);
			ОП000030004004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхРаздел3.П000030004004);
			ОП000030004005 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхРаздел3.П000030004005);
			ОП000030005004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхРаздел3.П000030005004);
			ОП000030005005 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхРаздел3.П000030005005);
			ОП000030006004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхРаздел3.П000030006004);
			ОП000030006005 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхРаздел3.П000030006005);
			ОП000030007004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхРаздел3.П000030007004);
			ОП000030007005 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхРаздел3.П000030007005);
			ОП000030008004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхРаздел3.П000030008004);
			ОП000030008005 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхРаздел3.П000030008005);
			ОП000030009004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхРаздел3.П000030009004);
			ОП000030009005 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхРаздел3.П000030009005);
			ОП000030010004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхРаздел3.П000030010004);
			ОП000030010005 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхРаздел3.П000030010005);
			ОП000030012004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхРаздел3.П000030012004);
			ОП000030012005 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхРаздел3.П000030012005);
			ОП000030013004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхРаздел3.П000030013004);
			ОП000030013005 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхРаздел3.П000030013005);
			ОП000030014004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхРаздел3.П000030014004);
			ОП000030014005 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхРаздел3.П000030014005);
			ОП000030015004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхРаздел3.П000030015004);
			ОП000030015005 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхРаздел3.П000030015005);
			ОП000030016004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхРаздел3.П000030016004);
			ОП000030016005 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхРаздел3.П000030016005);
			ОП000030017004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхРаздел3.П000030017004);
			ОП000030017005 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхРаздел3.П000030017005);
			
			// активы на начало периода
			Форма.СтруктураДанныхРаздел3.П000030011004 = ОП000030001004 + ОП000030002004 + ОП000030003004 + ОП000030004004 + ОП000030005004 +
			ОП000030006004 + ОП000030008004 + ОП000030009004 + ОП000030010004;
			
			// активы на конец периода
			Форма.СтруктураДанныхРаздел3.П000030011005 = ОП000030001005 + ОП000030002005 + ОП000030003005 + ОП000030004005 + ОП000030005005 +
			ОП000030006005 + ОП000030008005 + ОП000030009005 + ОП000030010005;               
			
			// пассивы на начало периода
			Форма.СтруктураДанныхРаздел3.П000030018004 = ОП000030012004 + ОП000030013004 + ОП000030014004 + 
			ОП000030015004 + ОП000030016004 + ОП000030017004;
			
			// пассивы на конец периода
			Форма.СтруктураДанныхРаздел3.П000030018005 = ОП000030012005 + ОП000030013005 + ОП000030014005 + 
			ОП000030015005 + ОП000030016005 + ОП000030017005;
			
			Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяРаздела Тогда
				
				Форма.ТабличныйДокумент.Области.П000030011004.Значение = Форма.СтруктураДанныхРаздел3.П000030011004;
				Форма.ТабличныйДокумент.Области.П000030011005.Значение = Форма.СтруктураДанныхРаздел3.П000030011005;
				Форма.ТабличныйДокумент.Области.П000030018004.Значение = Форма.СтруктураДанныхРаздел3.П000030018004;
				Форма.ТабличныйДокумент.Области.П000030018005.Значение = Форма.СтруктураДанныхРаздел3.П000030018005;
				
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ИмяРаздела = "Раздел4" Тогда //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		
		ОП000040001004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхРаздел4.П000040001004);
		ОП000040002004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхРаздел4.П000040002004);
		ОП000040003004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхРаздел4.П000040003004);
		ОП000040004004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхРаздел4.П000040004004);
		ОП000040005004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхРаздел4.П000040005004);
		ОП000040006004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхРаздел4.П000040006004);
		ОП000040008004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхРаздел4.П000040008004);
		ОП000040009004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхРаздел4.П000040009004);
		
		// сумма налога (по законодательству РФ)
		
		Форма.СтруктураДанныхРаздел4.П000040001006 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, ОП000040001004 * Форма.СтруктураДанныхРаздел4.П000040001005 / 100);
		Форма.СтруктураДанныхРаздел4.П000040002006 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, ОП000040002004 * Форма.СтруктураДанныхРаздел4.П000040002005 / 100);
		Форма.СтруктураДанныхРаздел4.П000040003006 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, ОП000040003004 * Форма.СтруктураДанныхРаздел4.П000040003005 / 100);
		Форма.СтруктураДанныхРаздел4.П000040004006 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, ОП000040004004 * Форма.СтруктураДанныхРаздел4.П000040004005 / 100);
		Форма.СтруктураДанныхРаздел4.П000040005006 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, ОП000040005004 * Форма.СтруктураДанныхРаздел4.П000040005005 / 100);
		Форма.СтруктураДанныхРаздел4.П000040006006 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, ОП000040006004 * Форма.СтруктураДанныхРаздел4.П000040006005 / 100);
		Форма.СтруктураДанныхРаздел4.П000040008006 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, ОП000040008004 * Форма.СтруктураДанныхРаздел4.П000040008005 / 100);
		Форма.СтруктураДанныхРаздел4.П000040009006 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, ОП000040009004 * Форма.СтруктураДанныхРаздел4.П000040009005 / 100);
		
		// сумма дохода, всего
		Форма.СтруктураДанныхРаздел4.П000040007004 = ОП000040001004 + ОП000040002004 + ОП000040003004
		                                           + ОП000040004004 + ОП000040005004 + ОП000040006004;
		
		// сумма налога, всего
		Форма.СтруктураДанныхРаздел4.П000040007006 = Форма.СтруктураДанныхРаздел4.П000040001006 + Форма.СтруктураДанныхРаздел4.П000040002006 + Форма.СтруктураДанныхРаздел4.П000040003006
		                                           + Форма.СтруктураДанныхРаздел4.П000040004006 + Форма.СтруктураДанныхРаздел4.П000040005006 + Форма.СтруктураДанныхРаздел4.П000040006006;
		
		Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяРаздела Тогда
			
			Форма.ТабличныйДокумент.Области.П000040001006.Значение = Форма.СтруктураДанныхРаздел4.П000040001006;
			Форма.ТабличныйДокумент.Области.П000040002006.Значение = Форма.СтруктураДанныхРаздел4.П000040002006;
			Форма.ТабличныйДокумент.Области.П000040003006.Значение = Форма.СтруктураДанныхРаздел4.П000040003006;
			Форма.ТабличныйДокумент.Области.П000040004006.Значение = Форма.СтруктураДанныхРаздел4.П000040004006;
			Форма.ТабличныйДокумент.Области.П000040005006.Значение = Форма.СтруктураДанныхРаздел4.П000040005006;
			Форма.ТабличныйДокумент.Области.П000040006006.Значение = Форма.СтруктураДанныхРаздел4.П000040006006;
			Форма.ТабличныйДокумент.Области.П000040008006.Значение = Форма.СтруктураДанныхРаздел4.П000040008006;
			Форма.ТабличныйДокумент.Области.П000040009006.Значение = Форма.СтруктураДанныхРаздел4.П000040009006;
			
			Форма.ТабличныйДокумент.Области.П000040007004.Значение = Форма.СтруктураДанныхРаздел4.П000040007004;
			Форма.ТабличныйДокумент.Области.П000040007006.Значение = Форма.СтруктураДанныхРаздел4.П000040007006;
			
		КонецЕсли;

	ИначеЕсли ИмяРаздела = "Раздел5" Тогда
		
		// Расчет осуществляется по структуре многостраничных разделов.
		ТаблицаРаздела = Форма[Форма.мСтруктураМногостраничныхРазделов[ИмяРаздела]];
		
		Для каждого Страница Из ТаблицаРаздела Цикл
			
			Данные = Страница.Данные[0].Значение;
			Если (Данные = Неопределено) ИЛИ (Тип(Данные) <> Тип("Структура")) Тогда
				Продолжить;
			КонецЕсли;
			Страница.Данные[0].Пометка = Ложь; //Для инициализации обмена с сервером
	
			ОП000050003004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П000050003004);
			ОП000050004004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П000050004004);
			ОП000050005004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П000050005004);
			ОП000050007004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П000050007004);
			ОП000050008004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П000050008004);
			ОП000050009004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П000050009004);
			ОП000050010004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П000050010004);
			ОП000050011004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П000050011004);
			ОП000050012004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П000050012004);
			ОП000050013004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П000050013004);
			ОП000050014004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П000050014004);
			ОП000050015004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П000050015004);
			ОП000050017004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П000050017004);
			ОП000050020004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П000050020004);
			ОП000050021004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П000050021004);
			ОП000050022004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П000050022004);
			ОП000050023004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П000050023004);
			ОП000050024004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П000050024004);
			ОП000050028004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П000050028004);
			ОП000050029104 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П000050029104);
			ОП000050030004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П000050030004);
			ОП000050032004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П000050032004);
			ОП000050033004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П000050033004);

			// доходы от реализации - всего
			Данные.П000050002004 = ОП000050003004 + ОП000050004004 + ОП000050005004;
			// внереализационные доходы - всего
			Данные.П000050006004 = ОП000050007004 + ОП000050008004 + ОП000050010004 + ОП000050011004
			                     + ОП000050012004 + ОП000050013004 + ОП000050014004 + ОП000050015004;
			// доходы организации - всего
			Данные.П000050001004 = Данные.П000050002004 + Данные.П000050006004;
			// внереализационные расходы - всего
			Данные.П000050019004 = ОП000050020004 + ОП000050021004 + ОП000050022004
			                     + ОП000050023004 + ОП000050024004;

			П000060016004 = ПолучитьЗначениеИзСоответствующихЛистовРаздела(Форма, "Раздел6", ТаблицаРаздела.Индекс(Страница), "П000060016004");
			
			Данные.П000050018004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, П000060016004);

			// расходы организации - всего
			Данные.П000050016004 = Данные.П000050017004 + Данные.П000050019004;
			// прибыль (убыток) иностранной организации
			Данные.П000050025004 = Данные.П000050002004 + Данные.П000050006004 - (Данные.П000050017004 + Данные.П000050019004);
			// строка 260
			Данные.П000050026004 = ОП000050007004;
			// строка 270
			Данные.П000050027004 = ОП000050009004;
			// налоговая база
			Данные.П000050029004 = Макс(0, Данные.П000050025004 - ОП000050007004 - ОП000050009004 - ОП000050028004);
			// налоговая база с учетом суммы перенесенного убытка
			Данные.П000050031004 = Макс(0, Данные.П000050029004 + ОП000050029104 - ОП000050030004);
			// налоговая база для исчисления налога
			Данные.П000050034004 = Данные.П000050031004;
			Данные.П000050035004 = Макс(0, Данные.П000050031004 - ОП000050032004);
			Данные.П000050036004 = Макс(0, Данные.П000050031004 - ОП000050033004);
		
			Если Страница.АктивнаяСтраница И Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяРаздела Тогда
				
				Форма.ТабличныйДокумент.Области.П000050002004.Значение = Данные.П000050002004;
				Форма.ТабличныйДокумент.Области.П000050006004.Значение = Данные.П000050006004;
				Форма.ТабличныйДокумент.Области.П000050001004.Значение = Данные.П000050001004;
				Форма.ТабличныйДокумент.Области.П000050019004.Значение = Данные.П000050019004;
				Форма.ТабличныйДокумент.Области.П000050018004.Значение = Данные.П000050018004;
				Форма.ТабличныйДокумент.Области.П000050016004.Значение = Данные.П000050016004;
				
				Форма.ТабличныйДокумент.Области.П000050025004.Значение = Данные.П000050025004;
				Форма.ТабличныйДокумент.Области.П000050026004.Значение = Данные.П000050026004;
				Форма.ТабличныйДокумент.Области.П000050027004.Значение = Данные.П000050027004;
				Форма.ТабличныйДокумент.Области.П000050029004.Значение = Данные.П000050029004;
				Форма.ТабличныйДокумент.Области.П000050031004.Значение = Данные.П000050031004;
				
				Форма.ТабличныйДокумент.Области.П000050034004.Значение = Данные.П000050034004;
				Форма.ТабличныйДокумент.Области.П000050035004.Значение = Данные.П000050035004;
				Форма.ТабличныйДокумент.Области.П000050036004.Значение = Данные.П000050036004;
				
			КонецЕсли;
			
		КонецЦикла;
		
	ИначеЕсли ИмяРаздела = "Раздел6" Тогда //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		
		// Расчет осуществляется по структуре многостраничных разделов.
		ТаблицаРаздела = Форма[Форма.мСтруктураМногостраничныхРазделов[ИмяРаздела]];
		
		Для каждого Страница Из ТаблицаРаздела Цикл
			
			Данные = Страница.Данные[0].Значение;
			Если (Данные = Неопределено) ИЛИ (Тип(Данные) <> Тип("Структура")) Тогда
				Продолжить;
			КонецЕсли;
			Страница.Данные[0].Пометка = Ложь; //Для инициализации обмена с сервером
			
			ОП000060001004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П000060001004);
			ОП000060002004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П000060002004);
			ОП000060003004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П000060003004);
			ОП000060004004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П000060004004);
			ОП000060005004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П000060005004);
			ОП000060006004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П000060006004);
			ОП000060007004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П000060007004);
			ОП000060008004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П000060008004);
			ОП000060009004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П000060009004);
			ОП000060010004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П000060010004);
			ОП000060011004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П000060011004);
			ОП000060012004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П000060012004);
			ОП000060013004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П000060013004);
			ОП000060014004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П000060014004);
			ОП000060015004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П000060015004);
			
			// Итого расходв
			Данные.П000060016004 = ОП000060001004 + ОП000060002004 + ОП000060003004 + ОП000060004004 + ОП000060005004
			                     + ОП000060006004 + ОП000060007004 + ОП000060008004 + ОП000060009004 + ОП000060010004
			                     + ОП000060011004 + ОП000060012004 + ОП000060013004 + ОП000060014004 + ОП000060015004;
			
			// сумма расходов, переданных головным офисом
			Данные.П000060017004 = РасчетСуммМногострочнойЧасти(Форма, "П000060018004", Страница.ДанныеДопСтрок[0].Значение);
			
			Если Страница.АктивнаяСтраница И Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяРаздела Тогда
				
				Форма.ТабличныйДокумент.Области.П000060016004.Значение = Данные.П000060016004;
				Форма.ТабличныйДокумент.Области.П000060017004.Значение = Данные.П000060017004;
				
			КонецЕсли;
			
		КонецЦикла;

	ИначеЕсли ИмяРаздела = "Раздел7" Тогда
		
		// Расчет осуществляется по структуре многостраничных разделов.
		ТаблицаРаздела = Форма[Форма.мСтруктураМногостраничныхРазделов[ИмяРаздела]];
		
		Для каждого Страница Из ТаблицаРаздела Цикл
			
			Данные = Страница.Данные[0].Значение;
			Если (Данные = Неопределено) ИЛИ (Тип(Данные) <> Тип("Структура")) Тогда
				Продолжить;
			КонецЕсли;
			Страница.Данные[0].Пометка = Ложь; //Для инициализации обмена с сервером
		
			ОП000070006004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П000070006004);
			ОП000070007004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П000070007004);
			ОП000070008004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П000070008004);
			ОП000070009004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П000070009004);
			ОП000070020004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П000070020004);
			ОП000070022004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П000070022004);
			ОП000070023004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П000070023004);
			ОП000070024004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П000070024004);
			ОП000070028004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П000070028004);
			ОП000070029004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П000070029004);
			ОП000070030004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П000070030004);

			// Строка А1.
			ИндексСтраницы = ТаблицаРаздела.Индекс(Страница);
			Данные.П000070002004 = ПолучитьЗначениеИзСоответствующихЛистовРаздела(Форма, "Раздел5", ИндексСтраницы, "П000050034004");
			Данные.П000070003004 = ПолучитьЗначениеИзСоответствующихЛистовРаздела(Форма, "Раздел5", ИндексСтраницы, "П000050035004");
			Данные.П000070004004 = ПолучитьЗначениеИзСоответствующихЛистовРаздела(Форма, "Раздел5", ИндексСтраницы, "П000050036004");
			// налоговая база по операциям
			Данные.П000070005004 = ОП000070006004 + ОП000070007004 + ОП000070008004 + ОП000070009004;
			// налоговая база для исчисления налога
			Данные.П000070010004 = Данные.П000070002004 + Данные.П000070005004;
			Данные.П000070011004 = Данные.П000070003004 + Данные.П000070005004;
			Данные.П000070012004 = Данные.П000070004004 + Данные.П000070005004;
			// сумма налога по расчету
			Данные.П000070017004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П000070010004 * Данные.П000070013004 / 100);
			Данные.П000070018004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П000070011004 * Данные.П000070014004 / 100);
			Данные.П000070019004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П000070012004 * Данные.П000070015004 / 100);
			// всего
			Данные.П000070016004 = Данные.П000070017004 + Данные.П000070018004 + Данные.П000070019004;
			// начислено в бюдет
			Данные.П000070021004 = ОП000070022004 + ОП000070023004 + ОП000070024004;
			// к доплате в бюджет, всего
			Данные.П000070025004 = Макс((Данные.П000070017004 - ОП000070020004 - ОП000070022004)
			                          + (Данные.П000070018004 - ОП000070023004)
			                          + (Данные.П000070019004 - ОП000070024004), 0);
			// к уменьшению, всего
			Данные.П000070026004 = Макс((ОП000070020004 + ОП000070022004 - Данные.П000070017004)
			                          + (ОП000070023004 - Данные.П000070018004)
			                          + (ОП000070024004 - Данные.П000070019004), 0);
			Данные.П000070027004 = ОП000070028004 + ОП000070029004 + ОП000070030004;
			
			Если Данные.П000070031004 <> 0 Тогда
				Данные.П000070032004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П000070028004) / Данные.П000070031004 +
				                       РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П000070029004) / Данные.П000070031004 +
				                       РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П000070030004) / Данные.П000070031004);
			Иначе
				Данные.П000070032004 = 0;
			КонецЕсли;
			
			Если Страница.АктивнаяСтраница И Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяРаздела Тогда
				
				Форма.ТабличныйДокумент.Области.П000070002004.Значение = Данные.П000070002004;
				Форма.ТабличныйДокумент.Области.П000070003004.Значение = Данные.П000070003004;
				Форма.ТабличныйДокумент.Области.П000070004004.Значение = Данные.П000070004004;
				Форма.ТабличныйДокумент.Области.П000070005004.Значение = Данные.П000070005004;
				
				Форма.ТабличныйДокумент.Области.П000070010004.Значение = Данные.П000070010004;
				Форма.ТабличныйДокумент.Области.П000070011004.Значение = Данные.П000070011004;
				Форма.ТабличныйДокумент.Области.П000070012004.Значение = Данные.П000070012004;
				
				Форма.ТабличныйДокумент.Области.П000070017004.Значение = Данные.П000070017004;
				Форма.ТабличныйДокумент.Области.П000070018004.Значение = Данные.П000070018004;
				Форма.ТабличныйДокумент.Области.П000070019004.Значение = Данные.П000070019004;
				
				Форма.ТабличныйДокумент.Области.П000070016004.Значение = Данные.П000070016004;
				
				Форма.ТабличныйДокумент.Области.П000070021004.Значение = Данные.П000070021004;
				Форма.ТабличныйДокумент.Области.П000070025004.Значение = Данные.П000070025004;
				Форма.ТабличныйДокумент.Области.П000070026004.Значение = Данные.П000070026004;
				
				Форма.ТабличныйДокумент.Области.П000070027004.Значение = Данные.П000070027004;
				Форма.ТабличныйДокумент.Области.П000070032004.Значение = Данные.П000070032004;
				
			КонецЕсли;
			
		КонецЦикла;

	ИначеЕсли ИмяРаздела = "Раздел8" Тогда

		ОП000080001004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхРаздел8.П000080001004);
		ОП000080004004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхРаздел8.П000080004004);

		// сумма налога с дивидендов
		Форма.СтруктураДанныхРаздел8.П000080003004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, ОП000080001004 * Форма.СтруктураДанныхРаздел8.П000080002004 / 100);
		// сумма налога к доплате
		Форма.СтруктураДанныхРаздел8.П000080005004 = Макс(0, Форма.СтруктураДанныхРаздел8.П000080003004 - ОП000080004004);
		// сумма налога к уменьшению
		Форма.СтруктураДанныхРаздел8.П000080006004 = Макс(0, ОП000080004004 - Форма.СтруктураДанныхРаздел8.П000080003004);
		
		Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяРаздела Тогда
			
			Форма.ТабличныйДокумент.Области.П000080003004.Значение = Форма.СтруктураДанныхРаздел8.П000080003004;
			Форма.ТабличныйДокумент.Области.П000080005004.Значение = Форма.СтруктураДанныхРаздел8.П000080005004;
			Форма.ТабличныйДокумент.Области.П000080006004.Значение = Форма.СтруктураДанныхРаздел8.П000080006004;
			
		КонецЕсли;

	ИначеЕсли ИмяРаздела = "Раздел9" Тогда //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

		ОП000090001004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхРаздел9.П000090001004);
		ОП000090002004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхРаздел9.П000090002004);
		ОП000090006004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхРаздел9.П000090006004);

		// налоговая база
		Форма.СтруктураДанныхРаздел9.П000090003004 = ОП000090001004 - ОП000090002004;
		// сумма налога, причитающаяся к уплате
		Форма.СтруктураДанныхРаздел9.П000090005004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхРаздел9.П000090003004 * Форма.СтруктураДанныхРаздел9.П000090004004 / 100);
		// сумма налога к доплате
		Форма.СтруктураДанныхРаздел9.П000090007004 = Макс(0, Форма.СтруктураДанныхРаздел9.П000090005004 - ОП000090006004);
		// сумма налога к уменьшению
		Форма.СтруктураДанныхРаздел9.П000090008004 = Макс(0, ОП000090006004 - Форма.СтруктураДанныхРаздел9.П000090005004);

		Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяРаздела Тогда
			
			Форма.ТабличныйДокумент.Области.П000090003004.Значение = Форма.СтруктураДанныхРаздел9.П000090003004;
			Форма.ТабличныйДокумент.Области.П000090005004.Значение = Форма.СтруктураДанныхРаздел9.П000090005004;
			Форма.ТабличныйДокумент.Области.П000090007004.Значение = Форма.СтруктураДанныхРаздел9.П000090007004;
			Форма.ТабличныйДокумент.Области.П000090008004.Значение = Форма.СтруктураДанныхРаздел9.П000090008004;
			
		КонецЕсли;

	ИначеЕсли ИмяРаздела = "Раздел10" Тогда

		ОП000070011004 = СуммаПоказателяПоВсемСтраницам(Форма, "Раздел7", "П000070011004");
		ОП000070012004 = СуммаПоказателяПоВсемСтраницам(Форма, "Раздел7", "П000070012004");
		ОП000070029004 = СуммаПоказателяПоВсемСтраницам(Форма, "Раздел7", "П000070029004");
		ОП000070030004 = СуммаПоказателяПоВсемСтраницам(Форма, "Раздел7", "П000070030004");
		
		// Расчет осуществляется по структуре многостраничных разделов.
		ТаблицаРаздела = Форма[Форма.мСтруктураМногостраничныхРазделов[ИмяРаздела]];
		
		Для каждого Страница Из ТаблицаРаздела Цикл
			
			Данные = Страница.Данные[0].Значение;
			Если (Данные = Неопределено) ИЛИ (Тип(Данные) <> Тип("Структура")) Тогда
				Продолжить;
			КонецЕсли;
			Страница.Данные[0].Пометка = Ложь; //Для инициализации обмена с сервером
			
			ОП000070031004 = ПолучитьЗначениеИзСоответствующихЛистовРаздела(Форма, "Раздел7", ТаблицаРаздела.Индекс(Страница), "П000070031004");
			Если ОП000070031004 = 0 Тогда
				ОП000070031004 = Форма.ТаблицаСтраницыРаздел7[0].Данные[0].Значение.П000070031004;
			КонецЕсли; 
			
			Форма.СтруктураРеквизитовФормы.мНалФБРаздел10 = Данные.НалФБ;
			Форма.СтруктураРеквизитовФормы.мНалМБРаздел10 = Данные.НалМБ;
			
			Данные.П000100006004 = ОП000070011004 + ОП000070012004;
			Данные.П000100015004 = ?(ОП000070031004 <> 0, РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, ((ОП000070029004 + ОП000070030004) / ОП000070031004) * Данные.П000100007004 / 100), 0);
			// строка 080
			Данные.П000100008004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П000100006004 * Данные.П000100007004 / 100);
			// строка 100
			Данные.П000100010004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П000100008004 * Число("0" + СокрЛП(Форма.СтруктураРеквизитовФормы.мНалФБРаздел10)) / 100);
			// строка 110
			Данные.П000100011004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П000100008004 * Число("0" + СокрЛП(Форма.СтруктураРеквизитовФормы.мНалМБРаздел10)) / 100);
			
			Если Страница.АктивнаяСтраница И Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяРаздела Тогда
				
				Форма.ТабличныйДокумент.Области.П000100006004.Значение = Данные.П000100006004;
				Форма.ТабличныйДокумент.Области.П000100015004.Значение = Данные.П000100015004;
				Форма.ТабличныйДокумент.Области.П000100008004.Значение = Данные.П000100008004;
				Форма.ТабличныйДокумент.Области.П000100010004.Значение = Данные.П000100010004;
				Форма.ТабличныйДокумент.Области.П000100011004.Значение = Данные.П000100011004;
				
			КонецЕсли;
			
		КонецЦикла;
		
	ИначеЕсли ИмяРаздела = "Раздел10_Прил1" Тогда

		Форма.мСтруктураМногострочныхРазделов.Свойство(Форма.СтруктураРеквизитовФормы.мИдГруппы5, СтруктураГруппы5);
		СтруктураГруппы5 = Форма[СтруктураГруппы5];
		ВыводитьВТаблДок = (Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяРаздела);
		
		СуммаП000101001003 = 0;
		СуммаП000101001005 = 0;
		СуммаП000101001007 = 0;
		
		// расчет графы 9 и итогов многострочной таблицы
		Для Ном = 1 По СтруктураГруппы5.Количество() Цикл
			
			СтрокаТаблицы = СтруктураГруппы5[Ном-1];
			
			СтрокаТаблицы["П000101001009"] = (Макс(СтрокаТаблицы["П000101001004"], СтрокаТаблицы["П000101001006"]) + СтрокаТаблицы["П000101001008"]) / 2;
			
			СуммаП000101001003 = СуммаП000101001003 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, СтрокаТаблицы["П000101001003"]);
			СуммаП000101001005 = СуммаП000101001005 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, СтрокаТаблицы["П000101001005"]);
			СуммаП000101001007 = СуммаП000101001007 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, СтрокаТаблицы["П000101001007"]);
			
			Если ВыводитьВТаблДок Тогда
				НомСтр = "_" + Формат(Ном, "ЧГ=0");
				ТекОбласть = Форма.ТабличныйДокумент.Области["П000101001009" + НомСтр];
				Если ТекОбласть.Значение <> СтрокаТаблицы.П000101001009 Тогда
					ТекОбласть.Значение = СтрокаТаблицы.П000101001009;
				КонецЕсли; 
			КонецЕсли; 
			
		КонецЦикла;

		// Если расчет отключен, то временно рассчитываем многострочную часть, т.к. признак из колонки 6 к многострочным частям пока не прикреплен
		Если Форма.СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Тогда
			Возврат;
		КонецЕсли;
		
		Форма.СтруктураДанныхРаздел10_Прил1.П000101002003 = СуммаП000101001003;
		Форма.СтруктураДанныхРаздел10_Прил1.П000101002005 = СуммаП000101001005;
		Форма.СтруктураДанныхРаздел10_Прил1.П000101002007 = СуммаП000101001007;

		Если ВыводитьВТаблДок Тогда
			// итого по графе 3
			Форма.ТабличныйДокумент.Области.П000101002003.Значение = СуммаП000101001003;
			// итого по графе 5
			Форма.ТабличныйДокумент.Области.П000101002005.Значение = СуммаП000101001005;
			// итого по графе 7
			Форма.ТабличныйДокумент.Области.П000101002007.Значение = СуммаП000101001007;
		КонецЕсли;

	ИначеЕсли ИмяРаздела = "Раздел11" Тогда
		
		// Расчет осуществляется по структуре многостраничных разделов.
		ТаблицаРаздела = Форма[Форма.мСтруктураМногостраничныхРазделов[ИмяРаздела]];
		
		Для каждого Страница Из ТаблицаРаздела Цикл
			
			Данные = Страница.Данные[0].Значение;
			Если (Данные = Неопределено) ИЛИ (Тип(Данные) <> Тип("Структура")) Тогда
				Продолжить;
			КонецЕсли;
			Страница.Данные[0].Пометка = Ложь; //Для инициализации обмена с сервером
			
			ОП000110004003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П000110004003);
			ОП000110007003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П000110007003);
			ОП000110008003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П000110008003);
			ОП000110009003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П000110009003);
			ОП000110011003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П000110011003);
			ОП000110023003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П000110023003);
			ОП000110024003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П000110024003);
			ОП000110025003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П000110025003);
			
			Данные.П000110003003 = СуммаПоказателяПоВсемСтраницам(Форма, "Раздел11_Прил1", "П000111007003", "П000111001000", , Данные.П000110001000);
			Данные.П000110012003 = СуммаПоказателяПоВсемСтраницам(Форма, "Раздел11_Прил2", "П000112012003", "П000112001000", , Данные.П000110001000);
			
			// строка 020
			Данные.П000110002003 = Данные.П000110003003  + ОП000110004003;
			// строка 060
			Данные.П000110006003 = ОП000110007003 + ОП000110008003;
			// строка 050
			Данные.П000110005003 = Данные.П000110006003  + ОП000110009003;
			// строка 100
			Данные.П000110010003 = Данные.П000110002003  - Данные.П000110005003;
			// строка 130
			Данные.П000110013003 = ОП000110011003 - Данные.П000110012003;
			// строка 140
			Данные.П000110014003 = Данные.П000110015003 + Данные.П000110016003 + Данные.П000110017003;
			// строка 190
			Данные.П000110019003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П000110013003 * Данные.П000110015003 / 100);
			// строка 200
			Данные.П000110020003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П000110013003 * Данные.П000110016003 / 100);
			// строка 210
			Данные.П000110021003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П000110013003 * Данные.П000110017003 / 100);
			// строка 180
			Данные.П000110018003 = Данные.П000110019003 + Данные.П000110020003 + Данные.П000110021003;
			// строка 220
			Данные.П000110022003 = ОП000110023003 + ОП000110024003 + ОП000110025003;
			// строка 260
			Данные.П000110026003 = Макс(Данные.П000110018003 - Данные.П000110022003, 0);
			// строка 270
			Данные.П000110027003 = Макс(Данные.П000110022003 - Данные.П000110018003, 0);
			
			Если Страница.АктивнаяСтраница И Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяРаздела Тогда
				
				Форма.ТабличныйДокумент.Области.П000110003003.Значение = Данные.П000110003003;
				Форма.ТабличныйДокумент.Области.П000110012003.Значение = Данные.П000110012003;
				Форма.ТабличныйДокумент.Области.П000110002003.Значение = Данные.П000110002003;
				Форма.ТабличныйДокумент.Области.П000110006003.Значение = Данные.П000110006003;
				Форма.ТабличныйДокумент.Области.П000110005003.Значение = Данные.П000110005003;
				Форма.ТабличныйДокумент.Области.П000110010003.Значение = Данные.П000110010003;
				Форма.ТабличныйДокумент.Области.П000110013003.Значение = Данные.П000110013003;
				Форма.ТабличныйДокумент.Области.П000110014003.Значение = Данные.П000110014003;
				Форма.ТабличныйДокумент.Области.П000110019003.Значение = Данные.П000110019003;
				Форма.ТабличныйДокумент.Области.П000110020003.Значение = Данные.П000110020003;
				Форма.ТабличныйДокумент.Области.П000110021003.Значение = Данные.П000110021003;
				Форма.ТабличныйДокумент.Области.П000110018003.Значение = Данные.П000110018003;
				Форма.ТабличныйДокумент.Области.П000110022003.Значение = Данные.П000110022003;
				Форма.ТабличныйДокумент.Области.П000110026003.Значение = Данные.П000110026003;
				Форма.ТабличныйДокумент.Области.П000110027003.Значение = Данные.П000110027003;
				
			КонецЕсли;
			
		КонецЦикла;
		
	ИначеЕсли ИмяРаздела = "Раздел11_Прил1" Тогда //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		
		// Расчет осуществляется по структуре многостраничных разделов.
		ТаблицаРаздела = Форма[Форма.мСтруктураМногостраничныхРазделов[ИмяРаздела]];
		
		Для каждого Страница Из ТаблицаРаздела Цикл
			
			Данные = Страница.Данные[0].Значение;
			Если (Данные = Неопределено) ИЛИ (Тип(Данные) <> Тип("Структура")) Тогда
				Продолжить;
			КонецЕсли;
			Страница.Данные[0].Пометка = Ложь; //Для инициализации обмена с сервером
			
			Данные.П000111006003 = Макс((Данные.П000111002003 - Данные.П000111003003 - Данные.П000111004003) * Данные.П000111005003, 0);
			
			Если Страница.АктивнаяСтраница И Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяРаздела Тогда
				
				Форма.ТабличныйДокумент.Области.П000111006003.Значение = Данные.П000111006003;
				
			КонецЕсли;
			
		КонецЦикла;
		
	ИначеЕсли ИмяРаздела = "Раздел11_Прил2" Тогда
		
		// Расчет осуществляется по структуре многостраничных разделов.
		ТаблицаРаздела = Форма[Форма.мСтруктураМногостраничныхРазделов[ИмяРаздела]];
		
		Для каждого Страница Из ТаблицаРаздела Цикл
			
			Данные = Страница.Данные[0].Значение;
			Если (Данные = Неопределено) ИЛИ (Тип(Данные) <> Тип("Структура")) Тогда
				Продолжить;
			КонецЕсли;
			Страница.Данные[0].Пометка = Ложь; //Для инициализации обмена с сервером
			
			ОП000112003003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П000112003003);
			ОП000112004003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П000112004003);
			ОП000112005003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П000112005003);
			ОП000112006003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П000112006003);
			ОП000112007003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П000112007003);
			ОП000112008003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П000112008003);
			ОП000112009003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П000112009003);
			ОП000112010003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П000112010003);
			ОП000112011003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П000112011003);
			ОП000112012003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П000112012003);
			
			// Переносим года.
			Данные.П000112014001 = Данные.П000112003001;
			Данные.П000112015001 = Данные.П000112004001;
			Данные.П000112016001 = Данные.П000112005001;
			Данные.П000112017001 = Данные.П000112006001;
			Данные.П000112018001 = Данные.П000112007001;
			Данные.П000112019001 = Данные.П000112008001;
			Данные.П000112020001 = Данные.П000112009001;
			Данные.П000112021001 = Данные.П000112010001;
			Данные.П000112022001 = Данные.П000112011001;
			
			ОП000110010003 = СуммаПоказателяПоВсемСтраницам(Форма, "Раздел11", "П000110010003", "П000110001000", , Данные.П000112001000);
			// строка 020
			Данные.П000112002003 = ОП000112003003 + ОП000112004003 + ОП000112005003
			                     + ОП000112006003 + ОП000112007003 + ОП000112008003
			                     + ОП000112009003 + ОП000112010003 + ОП000112011003;
			// строка 130
			Данные.П000112013003 = Макс(Данные.П000112002003 - ОП000112012003 + ОП000110010003, 0);
			
			// строки 140 - 220
			Остаток = Макс(ОП000112012003, 0);
			Списывается = Мин(Остаток, ОП000112003003);
			Данные.П000112014003 = ОП000112003003 - Списывается + ОП000110010003;
			
			Остаток = Остаток - Списывается;
			Списывается = Мин(Остаток, ОП000112004003);
			Данные.П000112015003 = ОП000112004003 - Списывается + ОП000110010003;
			
			Остаток = Остаток - Списывается;
			Списывается = Мин(Остаток, ОП000112005003);
			Данные.П000112016003 = ОП000112005003 - Списывается + ОП000110010003;
			
			Остаток = Остаток - Списывается;
			Списывается = Мин(Остаток, ОП000112006003);
			Данные.П000112017003 = ОП000112006003 - Списывается + ОП000110010003;
			
			Остаток = Остаток - Списывается;
			Списывается = Мин(Остаток, ОП000112007003);
			Данные.П000112018003 = ОП000112007003 - Списывается + ОП000110010003;
			
			Остаток = Остаток - Списывается;
			Списывается = Мин(Остаток, ОП000112008003);
			Данные.П000112019003 = ОП000112008003 - Списывается + ОП000110010003;
			
			Остаток = Остаток - Списывается;
			Списывается = Мин(Остаток, ОП000112009003);
			Данные.П000112020003 = ОП000112009003 - Списывается + ОП000110010003;
			
			Остаток = Остаток - Списывается;
			Списывается = Мин(Остаток, ОП000112010003);
			Данные.П000112021003 = ОП000112010003 - Списывается + ОП000110010003;
			
			Остаток = Остаток - Списывается;
			Списывается = Мин(Остаток, ОП000112011003);
			Данные.П000112022003 = ОП000112011003 - Списывается + ОП000110010003;
			 
			 Если Страница.АктивнаяСтраница И Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяРаздела Тогда
				
				Форма.ТабличныйДокумент.Области.П000112014001.Значение = Данные.П000112014001;
				Форма.ТабличныйДокумент.Области.П000112015001.Значение = Данные.П000112015001;
				Форма.ТабличныйДокумент.Области.П000112016001.Значение = Данные.П000112016001;
				Форма.ТабличныйДокумент.Области.П000112017001.Значение = Данные.П000112017001;
				Форма.ТабличныйДокумент.Области.П000112018001.Значение = Данные.П000112018001;
				Форма.ТабличныйДокумент.Области.П000112019001.Значение = Данные.П000112019001;
				Форма.ТабличныйДокумент.Области.П000112020001.Значение = Данные.П000112020001;
				Форма.ТабличныйДокумент.Области.П000112021001.Значение = Данные.П000112021001;
				Форма.ТабличныйДокумент.Области.П000112022001.Значение = Данные.П000112022001;
				
				Форма.ТабличныйДокумент.Области.П000112002003.Значение = Данные.П000112002003;
				
				Форма.ТабличныйДокумент.Области.П000112013003.Значение = Данные.П000112013003;
				Форма.ТабличныйДокумент.Области.П000112014003.Значение = Данные.П000112014003;
				Форма.ТабличныйДокумент.Области.П000112015003.Значение = Данные.П000112015003;
				Форма.ТабличныйДокумент.Области.П000112016003.Значение = Данные.П000112016003;
				Форма.ТабличныйДокумент.Области.П000112017003.Значение = Данные.П000112017003;
				Форма.ТабличныйДокумент.Области.П000112018003.Значение = Данные.П000112018003;
				Форма.ТабличныйДокумент.Области.П000112019003.Значение = Данные.П000112019003;
				Форма.ТабличныйДокумент.Области.П000112020003.Значение = Данные.П000112020003;
				Форма.ТабличныйДокумент.Области.П000112021003.Значение = Данные.П000112021003;
				Форма.ТабличныйДокумент.Области.П000112022003.Значение = Данные.П000112022003;
				
			КонецЕсли;
			
		КонецЦикла;

	ИначеЕсли ИмяРаздела = "" Тогда

		Расчет(Форма, "Раздел11_Прил2");
		Расчет(Форма, "Раздел11_Прил1");
		Расчет(Форма, "Раздел11");
		Расчет(Форма, "Раздел10_Прил1");
		Расчет(Форма, "Раздел10_Прил1");

		Расчет(Форма, "Раздел5");
		Расчет(Форма, "Раздел7");

		Расчет(Форма, "Раздел10");
		Расчет(Форма, "Раздел9");
		Расчет(Форма, "Раздел8");
		Расчет(Форма, "Раздел7");
		Расчет(Форма, "Раздел6");

		Расчет(Форма, "Раздел4");
		Расчет(Форма, "Раздел3");
		Расчет(Форма, "Раздел1_3");
		Расчет(Форма, "Раздел1_2");
		Расчет(Форма, "Раздел1_1");

		Форма.СтруктураРеквизитовФормы.НужноРассчитатьОтчетНаСервере = Ложь; //Если Истина - рассчитываем при переходах, сохранении, печати.

	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьЗначениеИзСоответствующихЛистовРаздела(Форма, ИзКакогоРаздела, ИндРаздела, Показатель)
	
	// Обратимся к разделу6, экземпляр раздела ИндРаздела5, по индеку раздела 5.
	ТаблицаРаздела =  Форма[Форма.мСтруктураМногостраничныхРазделов[ИзКакогоРаздела]];
	Если ИндРаздела > ТаблицаРаздела.Количество() - 1 Тогда
		// В разделе 6 нет нужного экземпляра с индексом раздела 5. Поэтому вернем 0 по строке 160.
		Результат = 0;
	Иначе
		Результат = ТаблицаРаздела[ИндРаздела].Данные[0].Значение[Показатель];
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция РасчетСуммМногострочнойЧасти(Форма, Парам, ДанныеДопСтрок) 
	
	СуммаПоГрафе = 0; 
	
	// определяем последнюю строку многострочной группы
	КолСтрок = ДанныеДопСтрок.Количество();
	Для Инд = 1 по КолСтрок Цикл
		СуммаПоГрафе = СуммаПоГрафе + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, ДанныеДопСтрок[Инд-1][Парам]);
	КонецЦикла;

	Возврат СуммаПоГрафе;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СуммаПоказателяПоВсемСтраницам(Форма, ИмяСтраницы, ИмяПоказателя, ИмяПоказателяУсловие = Неопределено, Условие = Истина, ПарамЗначение = Неопределено)
	
	Перем ТаблицаРаздела;
	Перем ЗначениеПоказателя;
	Перем ЗначПоказателяУсл;
	
	Результат = 0;
	
	Форма.мСтруктураМногостраничныхРазделов.Свойство(ИмяСтраницы, ТаблицаРаздела);
	
	Если ТаблицаРаздела <> Неопределено Тогда
		ТаблицаРаздела = Форма[ТаблицаРаздела];
		Для Инд = 0 По ТаблицаРаздела.Количество() - 1 Цикл
			ДанныеТаблПоле = ТаблицаРаздела[Инд].Данные[0].Значение;
			Если ДанныеТаблПоле.Свойство(ИмяПоказателя, ЗначениеПоказателя) Тогда
				Если ИмяПоказателяУсловие = Неопределено Тогда
					Результат = Результат + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, ЗначениеПоказателя);
				ИначеЕсли ДанныеТаблПоле.Свойство(ИмяПоказателяУсловие, ЗначПоказателяУсл) Тогда
					Если (ЗначПоказателяУсл = ПарамЗначение) = Условие Тогда
						Результат = Результат + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, ЗначениеПоказателя);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	Возврат Результат;

КонецФункции

&НаКлиенте
Процедура ДобавитьСтраницу(Команда)
	
	Если Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "ФизЛица" Тогда
		
		ПоказатьПредупреждение(,"Доп. листы с данными физических лиц формируются автоматически, в случае, если" + Символы.ПС
					 + "у руководителя, гл. бухгалтера или уполномоченного лица нет ИНН. Формирование" + Символы.ПС
					 + "происходит  при  первоначальном открытии  отчета  или  по  нажатию на  кнопку" + Символы.ПС
					 + """Обновить"", которая находится на верхней коммандной панели формы отчета.");
		Возврат;
		
	КонецЕсли;
	
	ВставитьДополнительнуюСтраницуНаСервере(Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
	
	СтруктураРеквизитовФормы.НомерТекущейСтраницы = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета;
				
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтраницу(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("УдалитьСтраницуЗавершение", ЭтотОбъект);
	ТекстВопроса = НСтр("ru='Удалить текущую страницу?'");
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 60, КодВозвратаДиалога.Да);
			
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтраницуЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.РазделыОтчета.ТекущиеДанные;
	
	КопияТекущиеДанные = ТекущиеДанные;
	
	ТекущиеДанные = ТекущиеДанные.ПолучитьРодителя();
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.ПолучитьЭлементы().Количество() = 1 Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяСтраницаРазделаПослеУдаления = Неопределено;
	Если КопияТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета = ТекущиеДанные.ПолучитьЭлементы().Количество() Тогда
		ТекущаяСтраницаРазделаПослеУдаления = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(ТекущиеДанные.ПолучитьЭлементы(), "КолонкаНомерСтраницыРазделаОтчета", КопияТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета - 1);
		СтруктураРеквизитовФормы.НомерТекущейСтраницы = ТекущаяСтраницаРазделаПослеУдаления.КолонкаНомерСтраницыРазделаОтчета;
	КонецЕсли;
	
	УдалитьДополнительнуюСтраницуНаСервере(Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
	
	ТекущиеДанные.ПолучитьЭлементы().Удалить(ТекущиеДанные.ПолучитьЭлементы().Индекс(КопияТекущиеДанные));
	
	НомерСтраницы = 1;
	
	Для Каждого СтраницаРаздела Из ТекущиеДанные.ПолучитьЭлементы() Цикл
		
		СтраницаРаздела.КолонкаРазделыОтчета              = "Стр. " + НомерСтраницы;
		СтраницаРаздела.КолонкаНомерСтраницыРазделаОтчета = НомерСтраницы;
		
		НомерСтраницы = НомерСтраницы + 1;
		
	КонецЦикла;
	
	Если НЕ ТекущаяСтраницаРазделаПослеУдаления = Неопределено Тогда
		Элементы.РазделыОтчета.ТекущаяСтрока = ТекущаяСтраницаРазделаПослеУдаления.ПолучитьИдентификатор();
	КонецЕсли;
	
	Обл = ТабличныйДокумент.Области.Найти("УдалитьСтраницуЗначок");
	Если Обл <> Неопределено Тогда 
		Если ТекущиеДанные.ПолучитьЭлементы().Количество() = 1 Тогда 
			Обл.Гиперссылка = Ложь;
			Обл.Текст = "";
			Обл = ТабличныйДокумент.Области["УдалитьСтраницу"];
			Обл.Гиперссылка = Ложь;
			Обл.Текст = "";
		Иначе
			Обл.Гиперссылка = Истина;
			Обл.Текст = "х";
			Обл = ТабличныйДокумент.Области["УдалитьСтраницу"];
			Обл.Гиперссылка = Истина;
			Обл.Текст = "Удалить страницу";
		КонецЕсли;
	КонецЕсли;
	РегламентированнаяОтчетностьКлиентСервер.ОтрисоватьЗначкиУдаленияСтрок(ЭтаФорма);

КонецПроцедуры

&НаСервере
Процедура ВставитьДополнительнуюСтраницуНаСервере(ИмяТекущейСтраницыПанели = Неопределено)

	Перем ТаблицаСтраницРаздела;
	Перем СтруктураДанныхДопСтрокРаздела;

	Если ИмяТекущейСтраницыПанели = Неопределено Тогда
		ИмяТекущейСтраницыПанели = СтруктураРеквизитовФормы.НаимТекущегоРаздела;
	КонецЕсли;
	
	СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
	
	Если Не мСтруктураМногостраничныхРазделов.Свойство(ИмяТекущейСтраницыПанели, ТаблицаСтраницРаздела) Тогда
		Возврат;
	Иначе
		МаксКолвоЭкз = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСвойствоРаздела(ЭтаФорма, ИмяТекущейСтраницыПанели, "МаксКолвоЭкз", 0);
		Если МаксКолвоЭкз <> 0 И ЭтаФорма[мСтруктураМногостраничныхРазделов[ИмяТекущейСтраницыПанели]].Количество() >= МаксКолвоЭкз Тогда
			ЗаголовокСтраницы = ИмяТекущейСтраницыПанели;
						
			Сообщение = Новый СообщениеПользователю;

			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='В разделе ""%1"" максимальное количество экземпляров страниц равно %2.'"), ЗаголовокСтраницы, МаксКолвоЭкз);

			Сообщение.Сообщить();
			
			СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Истина;
			
			Возврат;
			
		КонецЕсли;
	КонецЕсли;
	
	ИмяТекТабличногоПоля     = "ТабличныйДокумент";
	ТекТабличноеПоле         = ЭтаФорма[ИмяТекТабличногоПоля];
	
	СтруктураРеквизитовФормы.мИсключитьЗапускРасчета = Истина;

	СохранитьДанныеМногостраничногоРазделаВактивнойСтраницеНаСервере(ИмяТекущейСтраницыПанели);
	
	СтруктураРеквизитовФормы.мИсключитьЗапускРасчета = Ложь;

	ТаблицаСтраницРаздела = ЭтаФорма[ТаблицаСтраницРаздела];
	
	// Найдем активную страницу
	СтрТаблицаСтраницы = ТаблицаСтраницРаздела.НайтиСтроки(Новый Структура ("АктивнаяСтраница", Истина));
	
	Если СтрТаблицаСтраницы.Количество() > 0 Тогда

		СтрТаблицаСтраницы = СтрТаблицаСтраницы[0];
		
		// Убираем активность у текущей страницы
		СтрТаблицаСтраницы.АктивнаяСтраница = Ложь;
		
	КонецЕсли;
	
	// Добавляем новую страницу
	СтрНоваяСтраница = ТаблицаСтраницРаздела.Добавить();
	
	// Присваиваем представление по умолчанию
	СтрНоваяСтраница.Представление      = "Новая страница";
	СтрНоваяСтраница.АвтоматическоеПредставление      = Истина;
	
	// Ставим признак активной страницы
	СтрНоваяСтраница.АктивнаяСтраница   = Истина;
	
	ПослеДобавленияДопСтрНаСервере(ИмяТекТабличногоПоля, ИмяТекущейСтраницыПанели);
	Обл = ТабличныйДокумент.Области.Найти("УдалитьСтраницуЗначок");
	Обл.Гиперссылка = Истина;
	Обл.Текст = "х";
	Обл = ТабличныйДокумент.Области["УдалитьСтраницу"];
	Обл.Гиперссылка = Истина;
	Обл.Текст = "Удалить страницу";
	РегламентированнаяОтчетностьКлиентСервер.ОтрисоватьЗначкиУдаленияСтрок(ЭтаФорма);
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ПослеДобавленияДопСтрНаСервере(ИмяТекТабличногоПоля, ИмяТекущейСтраницыПанели)
	
	СтруктураРеквизитовФормы.мИсключитьЗапускРасчета = Истина;
	
	ОчиститьТабличноеПолеНаСервере(ИмяТекущейСтраницыПанели);
	
	СохранитьДанныеМногостраничногоРазделаВактивнойСтраницеНаСервере(ИмяТекущейСтраницыПанели);
	
	СтруктураРеквизитовФормы.мИсключитьЗапускРасчета = Ложь;
	
	ПослеВставкиДополнительнойСтраницыНаСервере(ИмяТекущейСтраницыПанели);
	
КонецПроцедуры

&НаСервере
Процедура ПослеВставкиДополнительнойСтраницыНаСервере(ИмяТекущейСтраницы)
	
	РасчетЗависимыхРазделовДекларации(ИмяТекущейСтраницы);
	
	РегламентированнаяОтчетность.ПослеВставкиДополнительнойСтраницыНаСервере(ЭтаФорма, ИмяТекущейСтраницы);
		
КонецПроцедуры

&НаСервере
Процедура СохранитьДанныеМногостраничногоРазделаВактивнойСтраницеНаСервере(ИмяТекущейСтраницыПанели)
	
	//итоговые ячейки не очистились - необходимо провести расчет
	//для этого сохраним данные страницы
	РегламентированнаяОтчетностьКлиентСервер.СохранитьДанныеМногостраничногоРазделаВАктивнойСтранице(ЭтаФорма, ИмяТекущейСтраницыПанели, Истина);
	
КонецПроцедуры

&НаСервере
Процедура УдалитьДополнительнуюСтраницуНаСервере(ИмяТекущейСтраницыПанели = Неопределено)

	РегламентированнаяОтчетность.УдалитьДополнительнуюСтраницуНаСервере(ЭтаФорма, ИмяТекущейСтраницыПанели);
	
	РасчетЗависимыхРазделовДекларации(ИмяТекущейСтраницыПанели);
	
	СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
		
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСтроку(Команда)
	
	#Если ВебКлиент Тогда
		
		ДобавитьСтрокуНаСервере(Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
		
	#Иначе
		
		ДобавитьСтрокуНаКлиенте(Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
		
	#КонецЕсли
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьСтрокуНаСервере(КолонкаРазделыОтчетаСокрНаим)
	
	ВставитьДополнительнуюСтроку(ЭтаФорма, КолонкаРазделыОтчетаСокрНаим);
		
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСтрокуНаКлиенте(КолонкаРазделыОтчетаСокрНаим)
	
	ВставитьДополнительнуюСтроку(ЭтаФорма, КолонкаРазделыОтчетаСокрНаим);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ВставитьДополнительнуюСтроку(Форма, ТекущаяСтраница)
	
	Перем СтруктураГруппы;
	Перем МаксимальноеКоличествоСтрокГруппы;

	// Сначала выполним проверку на активную страницу панели формы,
	// которая содержит многострочный раздел
			
	#Если НаКлиенте Тогда
		ИмяГруппы = Форма.ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаКлиенте(ТекущаяСтраница);
	#Иначе
		ИмяГруппы = Форма.ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ТекущаяСтраница);
	#КонецЕсли
		
	Если ИмяГруппы = Неопределено Тогда
		
		Сообщение = Новый СообщениеПользователю;
			
		Сообщение.Текст = НСтр("ru='Не выбран многострочный раздел, в который необходимо добавить строку.'");
			
		Сообщение.Сообщить();
		
		Возврат;
		
	КонецЕсли;

	// Исходное количество строк группы
	Форма.мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, МаксимальноеКоличествоСтрокГруппы);
	
	ТекТабличноеПолеИмя = "ТабличныйДокумент";
	
	ТекТабличноеПоле = Форма[ТекТабличноеПолеИмя];
		
	Форма.мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);
	
	СтруктураГруппы = Форма[СтруктураГруппы];

	// определяем последнюю строку многострочной группы
	КолСтрок = СтруктураГруппы.Количество();
	КолСтрокСтр = Формат(КолСтрок, "ЧГ=0");
	КолСтрокСтр1 = Формат(КолСтрок + 1, "ЧГ=0");
	ИмяПервойЯчейкиПоследнейСтроки = ИмяГруппы + "01_" + КолСтрокСтр;

	// область первой ячейки последней строки многострочного раздела
	ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяПервойЯчейкиПоследнейСтроки];
	
	НастройкиМнгЧ = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСвойствоРаздела(Форма, Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела, "МногострочностьВРазделе").НайтиСтроки(Новый Структура("ИдГруппы", ИмяГруппы))[0];
	ВысотаСтроки = НастройкиМнгЧ.ВысотаСтроки;
	
	// номера строк исходной области
	НомерВерхЯчейкиОбласти = ОбластьЯчейки.Верх;
	НомерНижнЯчейкиОбласти = ОбластьЯчейки.Верх + ВысотаСтроки - 1;
	СдвигСтрок = НомерНижнЯчейкиОбласти - НомерВерхЯчейкиОбласти + 1;

	// номера строк вставляемой области
	НомерВерхЯчейкиНовойОбласти = НомерВерхЯчейкиОбласти + СдвигСтрок;
	НомерНижнЯчейкиНовойОбласти = НомерНижнЯчейкиОбласти + СдвигСтрок;

	РегламентированнаяОтчетностьВызовСервера.СпециальногоДобавленияСтроки(ТекТабличноеПоле, ТекТабличноеПолеИмя, ИмяГруппы, НомерВерхЯчейкиОбласти, НомерНижнЯчейкиОбласти);
	
	Форма[ТекТабличноеПолеИмя] = ТекТабличноеПоле;
	
	Для НомерГрафы = 1 По Форма.мСтруктураКолвоКолонокРазделов[ИмяГруппы] Цикл
		
		ИмяКолонки = ИмяГруппы + Формат(НомерГрафы, "ЧЦ=2; ЧВН=");
		
		// переопределяем имена вставленной области
		Если СтруктураГруппы[0].Свойство(ИмяКолонки) Тогда
			
			ИмяОбластиЯчейки    = ИмяКолонки + "_" + КолСтрокСтр;
			ИмяНовОбластиЯчейки = ИмяКолонки + "_" + КолСтрокСтр1;
			
			ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяОбластиЯчейки];
			ОбластьЯчейки.Имя = ИмяНовОбластиЯчейки;
			
			// определяем границы ячейки исходной области
			НомерВерхСтрокиЯчейки  = ОбластьЯчейки.Верх - СдвигСтрок;
			НомерНижнСтрокиЯчейки  = ОбластьЯчейки.Низ  - СдвигСтрок;
			
			НомерЛевоКолонкиЯчейки = ОбластьЯчейки.Лево;
			НомерПравКолонкиЯчейки = ОбластьЯчейки.Право;
			
			// Назначаем имя ячейки исходной области,
			// (т.к. в результате вставки новой области оно было очищено)
			ОбластьЯчейкиИсходнойОбласти = ТекТабличноеПоле.Область(НомерВерхСтрокиЯчейки, НомерЛевоКолонкиЯчейки, НомерНижнСтрокиЯчейки, НомерПравКолонкиЯчейки);
			ОбластьЯчейкиИсходнойОбласти.Имя = ИмяОбластиЯчейки;
			
			// Назначаем имена областей для удаления строк
			Если НомерГрафы = 1 Тогда
				НовОбластьЯчейкиУдалитьСтроку = ТекТабличноеПоле.Область(ОбластьЯчейки.Верх, 2, ОбластьЯчейки.Верх, 2);
				НовОбластьЯчейкиУдалитьСтроку.Имя = "УдалитьСтроку" + ИмяНовОбластиЯчейки;
				ИсхОбластьЯчейкиУдалитьСтроку = ТекТабличноеПоле.Область(ОбластьЯчейкиИсходнойОбласти.Верх, 2, ОбластьЯчейкиИсходнойОбласти.Верх, 2);
				ИсхОбластьЯчейкиУдалитьСтроку.Имя = "УдалитьСтроку" + ИмяОбластиЯчейки;
			КонецЕсли;
			
			// очищаем значения ячеек вставленной области
			Если ОбластьЯчейки.СодержитЗначение = Истина Тогда
				ОбластьЯчейки.Очистить();
			Иначе
				// порядековый номер последней строки перед вставкой
				ИсходныйНомер        = Число("0" + ОбластьЯчейки.Текст);
				НовыйПорядковыйНомер = ИсходныйНомер + 1;
				
				ОбластьЯчейки.Текст  = КолСтрокСтр1;
				
			КонецЕсли;
		КонецЕсли;	
	КонецЦикла;

	// Назначим текущей областью таблицы первую редактируемую ячейку добавленной строки.
	// Определяем текущую область таблицы
	ИмяТекущейОбласти = ИмяГруппы + "01_" + КолСтрокСтр1;

	Форма.Элементы[ТекТабличноеПолеИмя].ТекущаяОбласть = ТекТабличноеПоле.Области[ИмяТекущейОбласти];

	// установим фокус на поле табличн. документа
	Форма.ТекущийЭлемент = Форма.Элементы[ТекТабличноеПолеИмя];

	// добавляем в структуру многострочной группы новую строку
	СтруктураГруппы.Добавить();
	РегламентированнаяОтчетностьКлиентСервер.ОтрисоватьЗначкиУдаленияСтрок(Форма);
	Форма.Модифицированность = Истина;

КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтроку(Команда)
		
	ТекТабличноеПоле = ЭтаФорма["ТабличныйДокумент"];
	
	ТекущаяОбласть = ТекТабличноеПоле.ТекущаяОбласть;
	ИмяГруппы      = РегламентированнаяОтчетностьКлиент.РазделТекущейОбласти(ЭтаФорма, ТекущаяОбласть);
	
	Если ИмяГруппы = Неопределено Тогда
		
		Сообщение = Новый СообщениеПользователю;
		
		Сообщение.Текст = НСтр("ru='Не выбрана удаляемая строка многострочного раздела.'");
		
		Сообщение.Сообщить();
		
		Возврат;
		
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("УдалитьСтрокуЗавершение", ЭтотОбъект);
	ТекстВопроса = НСтр("ru='Удалить выбранную строку?'");
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтрокуЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	#Если ВебКлиент Тогда
		
		УдалитьДополнительнуюСтрокуНаСервере(Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
		
	#Иначе
		
		УдалитьДополнительнуюСтрокуНаКлиенте(Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
		
	#КонецЕсли
	
	Если Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Раздел6" Тогда
		СохранитьДанныеРаздела("Раздел6", Ложь, Ложь);
		РасчетЗависимыхРазделовДекларации("Раздел6");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьДополнительнуюСтрокуНаСервере(ТекущаяСтраница)
	
	УдалитьДополнительнуюСтроку(ЭтаФорма, , , ТекущаяСтраница);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьДополнительнуюСтрокуНаКлиенте(ТекущаяСтраница)
	
	УдалитьДополнительнуюСтроку(ЭтаФорма, , , ТекущаяСтраница);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УдалитьДополнительнуюСтроку(Форма, СпециальноеДобавление = Ложь, ИмяКолонкиНомера = Неопределено, ТекущаяСтраница) Экспорт
	Перем ИсходноеКоличествоСтрокГруппы;
	Перем СтруктураГруппы;
	
	// Сначала выполним проверку на активную страницу панели формы,
	// которая содержит многострочный раздел
	#Если НаКлиенте Тогда
		ИмяГруппы = Форма.ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаКлиенте(ТекущаяСтраница);
	#Иначе
		ИмяГруппы = Форма.ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ТекущаяСтраница);
	#КонецЕсли
	
	// исходное количество строк группы
	Форма.мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);
	
	Форма.мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);
	
	ТекТабличноеПолеИмя = "ТабличныйДокумент";
	
	ТекТабличноеПоле = Форма[ТекТабличноеПолеИмя];
	ТекущаяОбласть = Форма.Элементы[ТекТабличноеПолеИмя].ТекущаяОбласть;
	ИмяЯчейки      = ТекущаяОбласть.Имя;
	
	#Если НаКлиенте ИЛИ ТолстыйКлиентУправляемоеПриложение Тогда
		ИмяГруппы = РегламентированнаяОтчетностьКлиент.РазделТекущейОбласти(Форма, ТекущаяОбласть);
	#Иначе
		ИмяГруппы = РегламентированнаяОтчетностьВызовСервера.РазделТекущейОбластиНаСервере(Форма, ТекущаяОбласть);
	#КонецЕсли
	
	// предварительно обновим структуру многострочных разделов
	РегламентированнаяОтчетностьКлиентСервер.ОбновитьСтруктуруМногострочногоРаздела(Форма, ИмяГруппы);
	
	// номер строки многострочного раздела определим
	// по имени выделенной ячейки
	НомУдаляемойСтроки = Число( Сред( ИмяЯчейки, СтрНайти( ИмяЯчейки, "_") + 1));
	НомерСтрокиТаблицы = НомУдаляемойСтроки - 1; // нумерация строк в таблице значений начинается с нуля
	СтруктураГруппы = Форма[СтруктураГруппы];
	Если СтруктураГруппы.Количество() > ИсходноеКоличествоСтрокГруппы Тогда
		// удаляется добавленная строка
		ИмяПервойЯчейкиУдаляемойСтроки = ИмяГруппы + "01_" + НомУдаляемойСтроки;
		
		// область первой ячейки удаляемой строки многострочного раздела
		ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяПервойЯчейкиУдаляемойСтроки];
		
		НастройкиМнгЧ = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСвойствоРаздела(Форма, ТекущаяСтраница, "МногострочностьВРазделе").НайтиСтроки(Новый Структура("ИдГруппы", ИмяГруппы))[0];
		ВысотаСтроки = НастройкиМнгЧ.ВысотаСтроки;
		
		// номера строк удаляемой области
		НомерВерхЯчейкиОбласти = ОбластьЯчейки.Верх;
		НомерНижнЯчейкиОбласти = ОбластьЯчейки.Верх + ВысотаСтроки - 1;
		
		РегламентированнаяОтчетностьВызовСервера.СпециальногоУдаленияСтроки(ТекТабличноеПоле, ТекТабличноеПолеИмя, ИмяГруппы, НомерВерхЯчейкиОбласти, НомерНижнЯчейкиОбласти);
		
		Форма[ТекТабличноеПолеИмя] = ТекТабличноеПоле;
				
		КолвоСдвигаемыхСтрок = СтруктураГруппы.Количество() - НомУдаляемойСтроки;
		
		// обновим имена ячеек сдвинутых строк
		Если КолвоСдвигаемыхСтрок > 0 Тогда
			
			Для НСтр = НомУдаляемойСтроки + 1 По СтруктураГруппы.Количество() Цикл
				
				ТекСтрока = СтруктураГруппы[НСтр-1];
				
				Для НомерГрафы = 1 По Форма.мСтруктураКолвоКолонокРазделов[ИмяГруппы] Цикл
					
					КолонкаИмя = ИмяГруппы + Формат(НомерГрафы, "ЧЦ=2; ЧВН=");
					
					Если СтруктураГруппы[0].Свойство(КолонкаИмя) Тогда
						                        						
						ИмяСдвинутойЯчейки = КолонкаИмя + "_" + НСтр;
						НовоеИмяСдвинутойЯчейки = КолонкаИмя + "_" + (НСтр - 1);
						
						ОбластьСдвинутойЯчейки     = ТекТабличноеПоле.Области[ИмяСдвинутойЯчейки];
						ОбластьСдвинутойЯчейки.Имя = НовоеИмяСдвинутойЯчейки;
						
						Если НомерГрафы = 1 Тогда
							ОбластьЯчейкиУдалитьСтроку = ТекТабличноеПоле.Область(ОбластьСдвинутойЯчейки.Верх, 2, ОбластьСдвинутойЯчейки.Верх, 2);
							ОбластьЯчейкиУдалитьСтроку.Имя = "УдалитьСтроку" + НовоеИмяСдвинутойЯчейки;
						КонецЕсли;
						
						Если ОбластьСдвинутойЯчейки.СодержитЗначение <> Истина Тогда
							// обновляем порядковый номер строки
							
							СтарыйНомер = Число(ТекСтрока[КолонкаИмя]);
							НовыйПорядковыйНомер = Строка(Макс(СтарыйНомер - 1, 0));
							ОбластьСдвинутойЯчейки.Текст = НовыйПорядковыйНомер;
							
							// обновляем значение элемента таблицы значений
							ТекСтрока[КолонкаИмя] = НовыйПорядковыйНомер;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
				
			КонецЦикла;
		КонецЕсли;
		
		// обновляем структуру многострочного раздела
		СтруктураГруппы.Удалить(НомерСтрокиТаблицы);
		
	Иначе
		// строка не удаляется в форме табличного документа,
		// а должна осуществляться сдвиг строк
		
		// обновляем структуру многострочного раздела
		// методом удаления выбранной строки и добавления пустой строки
		СтруктураГруппы.Удалить(НомерСтрокиТаблицы);
		
		ДобавляемаяСтрока = СтруктураГруппы.Добавить();
		
		// обновляем порядковые номера строк, выводимых в табличный документ
		Для Каждого СтрокаТаблицы Из СтруктураГруппы Цикл
			
			НомерСтрокиВТаблице = СтруктураГруппы.Индекс(СтрокаТаблицы);
			НомерСтрокиВФормеТаблицы = Формат(НомерСтрокиВТаблице + 1, "ЧГ=0");
			
			Для НомерГрафы = 1 По Форма.мСтруктураКолвоКолонокРазделов[ИмяГруппы] Цикл
				КолонкаТаблицыИмя = ИмяГруппы + Формат(НомерГрафы, "ЧЦ=2; ЧВН=");
				
				Если СтруктураГруппы[0].Свойство(КолонкаТаблицыИмя) Тогда
					
					ИмяЯчейки                = КолонкаТаблицыИмя + "_" + НомерСтрокиВФормеТаблицы;
					ОбластьЯчейкиТаблицы     = ТекТабличноеПоле.Области[ИмяЯчейки];
					
					Если ОбластьЯчейкиТаблицы.СодержитЗначение <> Истина Тогда
						
						ПервыйНомерВГруппе = 1;
						
						// обновляем порядковый номер строки
						НовыйПорядковыйНомер = Строка(ПервыйНомерВГруппе + НомерСтрокиВТаблице);
						
						СтрокаТаблицы[КолонкаТаблицыИмя] = НовыйПорядковыйНомер;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		// Данные в многострочном блоке обновляются в декларациях!
		// Обновляем экранную форму табличного документа
		#Если НаКлиенте Тогда
			Форма.ВывестиРазделВТабличныйДокументНаКлиенте(ИмяГруппы, СтруктураГруппы);
		#Иначе
			Форма.ВывестиРазделВТабличныйДокументНаСервере(ИмяГруппы, СтруктураГруппы);
		#КонецЕсли
		
	КонецЕсли;
		
	Расчет(Форма, ТекущаяСтраница);
	
	// назначим текущей областью таблицы первую редактируемую ячейку
	// удаленной строки, если ее порядковый номер меньше кол-ва строк
	// многострочного раздела, или последней строки раздела в противном случае
	
	// определяем текущую область таблицы
	НомТекущейСтроки  = Мин( НомУдаляемойСтроки, СтруктураГруппы.Количество() );
	ИмяТекущейОбласти = ИмяГруппы + "01_" + НомТекущейСтроки;
	
	Форма.Элементы[ТекТабличноеПолеИмя].ТекущаяОбласть = ТекТабличноеПоле.Области[ИмяТекущейОбласти];
	
	// установим фокус на поле табличн. документа
	ТекущийЭлемент = Форма.Элементы[ТекТабличноеПолеИмя];
	РегламентированнаяОтчетностьКлиентСервер.ОтрисоватьЗначкиУдаленияСтрок(Форма);
	Форма.Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьОтчет(Команда)
		
	РегламентированнаяОтчетностьКлиент.МеханизмыОчисткиРегламентированныхОтчетов(ЭтаФорма, "ОчиститьВесьОтчет");
	
	СтруктураРеквизитовФормы.НомерТекущейСтраницы = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТекущуюСтраницу(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОчиститьТекущуюСтраницуЗавершение", ЭтотОбъект);
	РегламентированнаяОтчетностьКлиент.МеханизмыОчисткиРегламентированныхОтчетов(
		ЭтаФорма, "ОчиститьТекущийЭкземплярМногостраничногоРаздела"
		+ Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим,
		ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТекущуюСтраницуЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
		НомерКорректировки = 0;
		СтруктураРеквизитовФормы.ВидДокумента = 0;
		ДатаПодписи = Неопределено;
		ТабличныйДокумент.Области.ДатаПодписи.Значение = ДатаПодписи;
		ТабличныйДокумент.Области.НомКоррект.Значение = 0;
		ТабличныйДокумент.Области.ВидДок.Значение = "1";
		СтруктураРеквизитовФормы.ВидДокумента = 0;
	Иначе 
		РегламентированнаяОтчетностьКлиентСервер.ОтрисоватьЗначкиУдаленияСтрок(ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Очистить(ВыполняемоеОповещение = Неопределено) Экспорт
	
	РегламентированнаяОтчетностьКлиент.Очистить(ЭтаФорма, ВыполняемоеОповещение);
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьНаСервере() Экспорт
	
	СтруктураДанныхРаздел1_1.Очистить();
	СтруктураДанныхРаздел1_2.Очистить();
	СтруктураДанныхРаздел1_3.Очистить();
	СтруктураДанныхРаздел2.Очистить();
	СтруктураДанныхРаздел3.Очистить();
	СтруктураДанныхРаздел4.Очистить();
	СтруктураДанныхРаздел8.Очистить();
	СтруктураДанныхРаздел9.Очистить();
	СтруктураДанныхРаздел10_Прил1.Очистить();
	
	Для каждого ЭлементСтруктурыТаблицаСтраницы Из мСтруктураМногостраничныхРазделов Цикл
		Если ЭлементСтруктурыТаблицаСтраницы.Ключ <> "ФизЛица" Тогда
			ЭтаФорма[ЭлементСтруктурыТаблицаСтраницы.Значение].Очистить();
		КонецЕсли;
	КонецЦикла;
	
	ИнициализацияМногостраничныхРазделов(Истина);
	
	Для Каждого мнгРаздел Из мСтруктураМногострочныхРазделов Цикл
		ЭтаФорма[мнгРаздел.Ключ].Очистить();
	КонецЦикла;
	
	НачальныеОперацииСМногострочнымиБлоками();
	
	ЗаполнитьПустыеСтруктурыДанных();
	
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела <> "Титульный"
		И СтруктураРеквизитовФормы.НаимТекущегоРаздела <> "ФизЛица" Тогда
		ОчиститьТабличноеПолеНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	КонецЕсли;
	
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела <> "ФизЛица" Тогда
		ВывестиМакетСтраницыВТабличныйДокументНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела, 1);
	КонецЕсли;
	
	СпециальныеОперацииПослеОчисткиЛистаНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
	СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
	
	РегламентированнаяОтчетностьКлиентСервер.ОчиститьВариантыЗаполнения(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьПоказателиОтчетаЗаполняемыеИзИБНаСервере(ИмяСтраницы)
	
	ОчиститьПоказателиОтчетаЗаполняемыеИзИБ(ЭтаФорма, ИмяСтраницы);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОчиститьПоказателиОтчетаЗаполняемыеИзИБ(Форма, НазванияМногостраничныхРазделовДляУдаления = "") Экспорт

	Если НЕ ПустаяСтрока(НазванияМногостраничныхРазделовДляУдаления) Тогда
		НазванияМнгостраничныхРазделов = Новый Структура(НазванияМногостраничныхРазделовДляУдаления);
	Иначе
		НазванияМнгостраничныхРазделов = Новый Структура;
	КонецЕсли;

	Для каждого СтрокаУровня1 из Форма.мСвойстваРазделовДекларации.ПолучитьЭлементы() Цикл
		
		НазваниеСтраницы           = СтрокаУровня1.ИмяСтраницы;
		МногостраничностьВРазделе  = СтрокаУровня1.МногостраничностьВРазделе;
		РазделАвтозаполняется = СтрокаУровня1.РазделЯвляетсяАвтозаполняемым;

		Если НазваниеСтраницы = "Титульный" Тогда
			Продолжить;
		КонецЕсли;

		мРазделИмя = "ТабличныйДокумент";
		мРаздел    = Форма[мРазделИмя];
		Если НазванияМнгостраничныхРазделов.Свойство(НазваниеСтраницы) Тогда
			// Очистим текущий лист.
			#Если НаКлиенте Тогда
				Форма.ОчиститьТабличноеПолеНаКлиенте(НазваниеСтраницы);
			#Иначе
				Форма.ОчиститьТабличноеПолеНаСервере(НазваниеСтраницы);
			#КонецЕсли
							
			ТаблицаСтраницРаздела = Неопределено;
			Форма.мСтруктураМногостраничныхРазделов.Свойство(НазваниеСтраницы, ТаблицаСтраницРаздела);
			
			ТаблицаСтраницРаздела = Форма[ТаблицаСтраницРаздела];
			
			ИндексСтраницы = 0;
			Пока Не (ИндексСтраницы > (ТаблицаСтраницРаздела.Количество()-1)) Цикл
				СтрокаТаблицы = ТаблицаСтраницРаздела[ИндексСтраницы];
				Если НЕ СтрокаТаблицы.АктивнаяСтраница Тогда
					// удаляем дополнительную страницу
					ТаблицаСтраницРаздела.Удалить(СтрокаТаблицы);
					Продолжить;
				КонецЕсли;
				ИндексСтраницы = ИндексСтраницы + 1;
			КонецЦикла;
									
			// Варианты заполнения установим в один массив. Все варианты возьмем из Эталона.
			// Цвет ячеек перерисуется в показе статика многостраничного раздела, ниже.
			РегламентированнаяОтчетностьКлиентСервер.ОчиститьВариантыЗаполнения(Форма, НазваниеСтраницы, Ложь);
			
		КонецЕсли;

	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОчисткаРегламентированногоОтчетаНаСервере(ИмяСтраницы, ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста, РежимОчистки, Многостраничность, КолВоСтраницВРазделе) Экспорт
	
	УдалятьсяВсеДопЭкземпляры = Ложь;
	
	СтруктураРеквизитовФормы.мИсключитьЗапускРасчета = Истина;
	
	Если СтрНайти(РежимОчистки, "ОчиститьТекущийРаздел") > 0 Тогда
		
		Если (Многостраничность) И (КолВоСтраницВРазделе > 1) Тогда
			
			ОчиститьПоказателиОтчетаЗаполняемыеИзИБНаСервере(ИмяСтраницы);
			
			УдалятьсяВсеДопЭкземпляры = Истина;
			
		Иначе
			
			ОчиститьТабличноеПолеНаСервере(ИмяСтраницы);
			
		КонецЕсли;
		
		СформироватьДеревоРазделовОтчетаНаСервере();
		
		СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
		
	ИначеЕсли СтрНайти(РежимОчистки, "ОчиститьТекущийЭкземплярМногостраничногоРаздела") > 0 Тогда
		
		ОчиститьТабличноеПолеНаСервере(ИмяСтраницы);
		
	КонецЕсли;
	
	Если ИмяСтраницы = "Титульный" Тогда
		Если Элементы.Найти("ДатаПодписи") = Неопределено Тогда
			Область = ТабличныйДокумент.Области.Найти("ДатаПодписи");
			Если НЕ Область = Неопределено Тогда
				Если ТипЗнч(Область.Значение) = Тип("Строка") Тогда
					ДатаПодписи = Лев(СтрЗаменить(Область.Значение, ".", ""), 8);
				ИначеЕсли ТипЗнч(Область.Значение) = Тип("Дата") Тогда
					Если ЗначениеЗаполнено(Область.Значение) Тогда
						ДатаПодписи = Лев(СтрЗаменить(Формат(Область.Значение, "ДФ = ""дд.ММ.гггг 'г.'"""), ".", ""), 8);
					Иначе
						ДатаПодписи = "        ";
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	СтруктураРеквизитовФормы.мИсключитьЗапускРасчета = Ложь;
	
	РегламентированнаяОтчетностьКлиентСервер.ПослеОчисткиРегламентированногоОтчета(ЭтаФорма, ИмяСтраницы, ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста);
	
	СохранитьДанныеРаздела(ИмяСтраницы, Истина, Ложь);
	
	РасчетЗависимыхРазделовДекларации(ИмяСтраницы);
	
КонецПроцедуры

&НаКлиенте
Процедура ОчисткаРегламентированногоОтчетаНаКлиенте(ИмяСтраницы, ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста, РежимОчистки, Многостраничность, КолВоСтраницВРазделе) Экспорт
	
	УдалятьсяВсеДопЭкземпляры = Ложь;
	
	Если СтрНайти(РежимОчистки, "ОчиститьТекущийРаздел") > 0 Тогда
		
		Если (Многостраничность) И (КолВоСтраницВРазделе > 1) Тогда

			РегламентированнаяОтчетностьКлиентСервер.ОчиститьПоказателиОтчетаЗаполняемыеИзИБ(ЭтаФорма, ИмяСтраницы);

			УдалятьсяВсеДопЭкземпляры = Истина;
			
		Иначе

			ОчиститьТабличноеПолеНаКлиенте(ИмяСтраницы);

		КонецЕсли;
		
		СформироватьДеревоРазделовОтчетаНаКлиенте();
		
	ИначеЕсли СтрНайти(РежимОчистки, "ОчиститьТекущийЭкземплярМногостраничногоРаздела") > 0 Тогда
		
		ОчиститьТабличноеПолеНаКлиенте(ИмяСтраницы);
		
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиентСервер.ПослеОчисткиРегламентированногоОтчета(ЭтаФорма, ИмяСтраницы, ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста);
	
	СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура СпециальныеОперацииПослеОчисткиЛистаНаСервере(ИмяСтраницы) Экспорт
	
	РасчетНаСервере();

КонецПроцедуры

&НаКлиенте
Процедура СпециальныеОперацииПослеОчисткиЛистаНаКлиенте(ИмяСтраницы) Экспорт

	РасчетНаСервере();

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуНастроек(Команда)
	
	ОткрытьФормуВыбораСтраниц("ВыбратьДляНастройки");
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораСтраниц(ВариантВыбора)
    Перем ТекущийРазделОтчетаСокрНаим;
	Перем НомерСтраницыРазделаОтчета;
	
	// Запоминаем текущий раздел, установленный в дереве разделов отчета.
	Если НЕ Элементы.РазделыОтчета.ТекущиеДанные = Неопределено Тогда
		ТекущийРазделОтчетаСокрНаим = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
		НомерСтраницыРазделаОтчета  = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета;
	КонецЕсли;
	
	мПараметры = Новый Структура;
	мПараметры.Вставить("ПроверкаСоотношений", Истина);
	мПараметры.Вставить("Автосохранение", Ложь);
	мПараметры.Вставить("ИмеетсяРеквизитДеревоВыбранныхСтраниц", Истина);
	
	Если СтруктураРеквизитовФормы.ДоступенМеханизмПечатиРеглОтчетностиСДвухмернымШтрихкодомPDF417 Тогда
		мПараметры.Вставить("РазрешитьВстроеннуюПечать", Истина);
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ФлажокОтклАвтоРасчет", СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);
	ПараметрыФормы.Вставить("мПечатьБезШтрихкодаРазрешена", СтруктураРеквизитовФормы.мПечатьБезШтрихкодаРазрешена);
	ПараметрыФормы.Вставить("мСчетчикСтраниц", СтруктураРеквизитовФормы.мСчетчикСтраниц);
	ПараметрыФормы.Вставить("мАвтоВыборКодов", СтруктураРеквизитовФормы.мАвтоВыборКодов);
	ПараметрыФормы.Вставить("мПроверятьСоотношенияПриПечатиИВыгрузки", СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки);
	ПараметрыФормы.Вставить("ЕдиницаИзмерения", СтруктураРеквизитовФормы.ЕдиницаИзмерения);
	ПараметрыФормы.Вставить("ТочностьЕдиницыИзмерения", СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения);
	ПараметрыФормы.Вставить("мПараметры", мПараметры);
					
	ФормаНастройкиОтчета = РегламентированнаяОтчетностьКлиент.ПолучитьОбщуюФормуПоИмени("НастройкиОтчета", ПараметрыФормы, ЭтаФорма);

	мДеревоВыбранныхСтраниц.ПолучитьЭлементы().Очистить();

	КопироватьДанныеФормы(мДеревоСтраницОтчета, ФормаНастройкиОтчета.Дерево);
	
	ЗначениеАвторасчета = СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет;
	ЗначениеЕдИзм       = СтруктураРеквизитовФормы.ЕдиницаИзмерения;
	ЗначениеЗпт         = СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения;
	
	ДополнительныеПараметры = Новый Структура("ЗначениеАвторасчета, ЗначениеЕдИзм, ЗначениеЗпт, НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим", ЗначениеАвторасчета, ЗначениеЕдИзм, ЗначениеЗпт, НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим);
	ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьФормуВыбораСтраницЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ФормаНастройкиОтчета.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
	ФормаНастройкиОтчета.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	ФормаНастройкиОтчета.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораСтраницЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	ЗначениеАвторасчета = ДополнительныеПараметры.ЗначениеАвторасчета;
	ЗначениеЕдИзм = ДополнительныеПараметры.ЗначениеЕдИзм;
	ЗначениеЗпт = ДополнительныеПараметры.ЗначениеЗпт;
	НомерСтраницыРазделаОтчета = ДополнительныеПараметры.НомерСтраницыРазделаОтчета;
	ТекущийРазделОтчетаСокрНаим = ДополнительныеПараметры.ТекущийРазделОтчетаСокрНаим;
	
	Для Индекс = 0 По мДеревоСтраницОтчета.ПолучитьЭлементы().Количество() - 1 Цикл
		мДеревоВыбранныхСтраниц.ПолучитьЭлементы()[Индекс].ПорядокЗаполнения = мДеревоСтраницОтчета.ПолучитьЭлементы()[Индекс].ПорядокЗаполнения;
	КонецЦикла;
	
	РегламентированнаяОтчетностьКлиентСервер.ПоказатьКнопкиПечати(ЭтаФорма);
	
	Модифицированность = Истина;
	
	флЗначенияИдентичны = Истина;
	
	Для Индекс = 0 По мДеревоСтраницОтчета.ПолучитьЭлементы().Количество() - 1 Цикл
		
		Если НЕ мДеревоСтраницОтчета.ПолучитьЭлементы()[Индекс].ПоказатьСтраницу = мДеревоВыбранныхСтраниц.ПолучитьЭлементы()[Индекс].ПоказатьСтраницу Тогда
			флЗначенияИдентичны = Ложь;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЗначениеАвторасчета <> СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Тогда
		
		#Если ВебКлиент Тогда
			ИзменитьТаблицуВариантовЗаполненияНаСервере();
		#Иначе
			РегламентированнаяОтчетностьКлиентСервер.ИзменитьТаблицуВариантовЗаполнения(ЭтаФорма, НЕ СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);
		#КонецЕсли	
		
	КонецЕсли;
	
	Если ЗначениеЕдИзм <> СтруктураРеквизитовФормы.ЕдиницаИзмерения
		ИЛИ ЗначениеЗпт <> СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения Тогда
		ПослеСменыЕдИзмеренияИТочности();
	КонецЕсли;
	
	// Управляем видимостью страниц основной панели формы
	РегламентированнаяОтчетностьКлиент.ПоказатьСтраницыОтчетаНаКлиенте(ЭтаФорма);
	
	Если НЕ флЗначенияИдентичны Тогда
		
		СформироватьДеревоРазделовОтчетаНаКлиенте();
		
		Если НЕ ТекущийРазделОтчетаСокрНаим = Неопределено Тогда
			
			// Пытаемся найти ранее запомненный раздел.
			НайденнаяСтрока = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(РазделыОтчета.ПолучитьЭлементы(), "КолонкаРазделыОтчетаСокрНаим", ТекущийРазделОтчетаСокрНаим);
			
			Если НЕ НайденнаяСтрока = Неопределено 
				И НЕ НомерСтраницыРазделаОтчета = Неопределено 
				И НайденнаяСтрока.ПолучитьЭлементы().Количество() > 0 Тогда
				
				НайденнаяСтрока = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(НайденнаяСтрока.ПолучитьЭлементы(), "КолонкаНомерСтраницыРазделаОтчета", НомерСтраницыРазделаОтчета);
				
			КонецЕсли;
			
			// В случае успешного поиска, устанавливаем курсор на найденный раздел.
			Если НЕ НайденнаяСтрока = Неопределено Тогда
				Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяСтрока.ПолучитьИдентификатор();
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ Элементы.РазделыОтчета.ТекущиеДанные = Неопределено Тогда
		ТекущийРазделОтчетаСокрНаим = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
		НомерСтраницыРазделаОтчета  = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьТаблицуВариантовЗаполненияНаСервере()
	
	РегламентированнаяОтчетностьКлиентСервер.ИзменитьТаблицуВариантовЗаполнения(ЭтаФорма, НЕ СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеСменыЕдИзмеренияИТочности()

	ПроверитьТочность();
	
	УстановитьФорматВыводаНаКлиенте(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
	ПоследовательноеЗаполнениеЛистовДеклРасчет();
	
	Модифицированность = Истина;
		
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьТочность()
	
	Если СтруктураРеквизитовФормы.ЕдиницаИзмерения = ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1 Тогда

		Если СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения > 2 Тогда
									
			Сообщение = Новый СообщениеПользователю;

			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1: при выводе сумм в рублях точность не может превышать 2 знака'"), ЭтаФорма.Заголовок);

			Сообщение.Сообщить();
			
			СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = 2;
			
		КонецЕсли;

	ИначеЕсли СтруктураРеквизитовФормы.ЕдиницаИзмерения = ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1000 Тогда

		Если СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения > 3 Тогда
			
			Сообщение = Новый СообщениеПользователю;

			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1: при выводе сумм в тысячах рублей точность не может превышать 3 знака'"), ЭтаФорма.Заголовок);

			Сообщение.Сообщить();
			
			СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = 3;
			
		КонецЕсли;

	ИначеЕсли СтруктураРеквизитовФормы.ЕдиницаИзмерения = ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1000000 Тогда

		Если СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения > 6 Тогда
						
			Сообщение = Новый СообщениеПользователю;

			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1: при выводе сумм в миллионах рублей точность не может превышать 6 знаков'"), ЭтаФорма.Заголовок);

			Сообщение.Сообщить();
			
			СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = 6;
			
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораВПолеТабличногоДокумента(Элемент, Область, СтандартнаяОбработка)
	
	Перем ЦветАвто;
	
	Если СтрЧислоВхождений(Область.Имя, "ДобавитьСтроку") = 1 И Область.Текст <> "" Тогда
		ДобавитьСтроку("");
		СтандартнаяОбработка = Ложь;
		Возврат;
	ИначеЕсли СтрЧислоВхождений(Область.Имя, "УдалитьСтроку") = 1 И Область.Текст <> "" Тогда
		УдалитьСтроку("");
		СтандартнаяОбработка = Ложь;
		Возврат;
	ИначеЕсли СтрЧислоВхождений(Область.Имя, "ДобавитьСтраницу") > 0 И Область.Текст <> "" Тогда
		ДобавитьСтраницу("");
		СтандартнаяОбработка = Ложь;
		Возврат;
	ИначеЕсли СтрЧислоВхождений(Область.Имя, "УдалитьСтраницу") > 0 И Область.Текст <> "" Тогда
		УдалитьСтраницу("");
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли;
	
	Если РегламентированнаяОтчетностьКлиент.ВыбраннаяОбластьРегламентированногоОтчетаНеВерна(ЭтаФорма, Область, СтандартнаяОбработка) Тогда
		Возврат;
	КонецЕсли;
	
	ИмяЯчейки = Область.Имя;
	Ячейка = Элемент.ТекущаяОбласть;
	мСтруктураЦветовРаскраски.Свойство("_6", ЦветАвто);
	
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
		// Титульный
		Если Область.Имя = "ТипОрг1" Тогда
			СтандартнаяОбработка = Ложь;
			Область.Значение = "V";
			ТабличныйДокумент.Области.ТипОрг2.Значение = "";
			ТабличныйДокумент.Области.ТипОрг3.Значение = "";
			ТабличныйДокумент.Области.ТипОрг4.Значение = "";
			Модифицированность = Истина;
		ИначеЕсли Область.Имя = "ТипОрг2" Тогда
			СтандартнаяОбработка = Ложь;
			Область.Значение = "V";
			ТабличныйДокумент.Области.ТипОрг1.Значение = "";
			ТабличныйДокумент.Области.ТипОрг3.Значение = "";
			ТабличныйДокумент.Области.ТипОрг4.Значение = "";
			Модифицированность = Истина;
		ИначеЕсли Область.Имя = "ТипОрг3" Тогда
			СтандартнаяОбработка = Ложь;
			Область.Значение = "V";
			ТабличныйДокумент.Области.ТипОрг1.Значение = "";
			ТабличныйДокумент.Области.ТипОрг2.Значение = "";
			ТабличныйДокумент.Области.ТипОрг4.Значение = "";
			Модифицированность = Истина;
		ИначеЕсли Область.Имя = "ТипОрг4" Тогда
			СтандартнаяОбработка = Ложь;
			Область.Значение = "V";
			ТабличныйДокумент.Области.ТипОрг1.Значение = "";
			ТабличныйДокумент.Области.ТипОрг2.Значение = "";
			ТабличныйДокумент.Области.ТипОрг3.Значение = "";
			Модифицированность = Истина;
		ИначеЕсли (СтрНайти(Область.Имя, "КодИМНС") > 0) Или (СтрНайти(Область.Имя, "ОргИМНС") > 0) Тогда
			СтандартнаяОбработка = Ложь;
			ИФНСДоВыбора = РегламентированнаяОтчетностьКлиентСервер.ВернутьЗначениеПараметраСЛиста(ЭтаФорма, "Титульный", "КодИМНС");
			ДополнительныеПараметры = Новый Структура;
			ДополнительныеПараметры.Вставить("ИФНСДоВыбора", ИФНСДоВыбора);
			ДополнительныеПараметры.Вставить("Элемент", Элемент);
			ДополнительныеПараметры.Вставить("Область", Область);
			ОписаниеОповещения = Новый ОписаниеОповещения("ПослеВыбораИУстановкиТерриториальногоОрганаФНСЗавершение", ЭтотОбъект, ДополнительныеПараметры);
			РегламентированнаяОтчетностьКлиент.ВыбратьИУстановитьТерриториальныйОрганФНС(ЭтаФорма, СтандартнаяОбработка, "Титульный", ОписаниеОповещения);
			Возврат;
		ИначеЕсли Область.Имя = "НалогПериод" Тогда
			
			СтандартнаяОбработка = Ложь;
			Модифицированность = Истина;
			
			ТекЭлементСписка = СтруктураРеквизитовФормы.СписокКодовПериодаОтчета.НайтиПоЗначению(СокрЛП(Область.Значение));
			
			Оповещение = Новый ОписаниеОповещения("ПослеВыбораНалоговогоПериода", ЭтаФорма, Область);
			СтруктураРеквизитовФормы.СписокКодовПериодаОтчета.ПоказатьВыборЭлемента(
				Оповещение, "Выбор налогового (отчетного) периода", ТекЭлементСписка);
			
		КонецЕсли;
		
		Если НЕ СтандартнаяОбработка И Модифицированность Тогда
			
			ОбработкаИзмененияСодержимогоВПолеТабличногоДокумента(Элемент, Область)
			
		КонецЕсли;
		
	ИначеЕсли СтруктураРеквизитовФормы.НаимТекущегоРаздела = "ФизЛица" Тогда
		// Физ. лица
		Если (СтрНайти(Область.Имя,  "ФизЛицИнд") > 0)
			Или (Область.Имя = "ФизЛицСубъект")
			Или (Область.Имя = "ФизЛицРайон")
			Или (Область.Имя = "ФизЛицГород")
			Или (Область.Имя = "ФизЛицС")
			Или (Область.Имя = "ФизЛицНП")
			Или (Область.Имя = "ФизЛицУлица")
			Или (Область.Имя = "ФизЛицДом")
			Или (Область.Имя = "ФизЛицКорпус")
			Или (Область.Имя = "ФизЛицКвартира") Тогда
			
			СтандартнаяОбработка = Ложь;
			
			РоссийскийАдрес = Новый Соответствие;
			РоссийскийАдрес.Вставить("Индекс", ТабличныйДокумент.Области.ФизЛицИнд.Значение);
			РоссийскийАдрес.Вставить("Регион", ТабличныйДокумент.Области.ФизЛицСубъект.Значение);
			РоссийскийАдрес.Вставить("КодРегиона", ТабличныйДокумент.Области.ФизЛицС.Значение);
			РоссийскийАдрес.Вставить("КодРегиона", ТабличныйДокумент.Области.ФизЛицС.Значение);
			РоссийскийАдрес.Вставить("Район", ТабличныйДокумент.Области.ФизЛицРайон.Значение);
			РоссийскийАдрес.Вставить("Город", ТабличныйДокумент.Области.ФизЛицГород.Значение);
			РоссийскийАдрес.Вставить("НаселенныйПункт", ТабличныйДокумент.Области.ФизЛицНП.Значение);
			РоссийскийАдрес.Вставить("Улица", ТабличныйДокумент.Области.ФизЛицУлица.Значение);
			РоссийскийАдрес.Вставить("Дом", ТабличныйДокумент.Области.ФизЛицДом.Значение);
			РоссийскийАдрес.Вставить("Корпус", ТабличныйДокумент.Области.ФизЛицКорпус.Значение);
			РоссийскийАдрес.Вставить("Квартира", ТабличныйДокумент.Области.ФизЛицКвартира.Значение);
			
			ЗначенияПолей = Новый СписокЗначений;
			
			ЗначенияПолей.Добавить(РоссийскийАдрес["Индекс"],          "Индекс");
			ЗначенияПолей.Добавить(РоссийскийАдрес["Регион"],          "Регион");
			ЗначенияПолей.Добавить(РоссийскийАдрес["КодРегиона"],      "КодРегиона");
			ЗначенияПолей.Добавить(РоссийскийАдрес["Район"],           "Район");
			ЗначенияПолей.Добавить(РоссийскийАдрес["Город"],           "Город");
			ЗначенияПолей.Добавить(РоссийскийАдрес["НаселенныйПункт"], "НаселенныйПункт");
			ЗначенияПолей.Добавить(РоссийскийАдрес["Улица"],           "Улица");
			ЗначенияПолей.Добавить(РоссийскийАдрес["Дом"],             "Дом");
			ЗначенияПолей.Добавить(РоссийскийАдрес["Корпус"],          "Корпус");
			ЗначенияПолей.Добавить(РоссийскийАдрес["Квартира"],        "Квартира");
			
			ПредставлениеАдреса = РегламентированнаяОтчетностьКлиентСервер.ПредставлениеАдресаВФормате9Запятых("643," + РоссийскийАдрес["Индекс"] + ","
			+ РоссийскийАдрес["Регион"] + ","
			+ РоссийскийАдрес["Район"] + ","
			+ РоссийскийАдрес["Город"] + ","
			+ РоссийскийАдрес["НаселенныйПункт"] + ","
			+ РоссийскийАдрес["Улица"] + ","
			+ РоссийскийАдрес["Дом"] + ","
			+ РоссийскийАдрес["Корпус"] + ","
			+ РоссийскийАдрес["Квартира"]);
			
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("Заголовок",               "Ввод адреса");
			ПараметрыФормы.Вставить("ЗначенияПолей", 		   ЗначенияПолей);
			ПараметрыФормы.Вставить("Представление", 		   ПредставлениеАдреса);
			ПараметрыФормы.Вставить("ВидКонтактнойИнформации", СтруктураРеквизитовФормы.СправочникиВидыКонтактнойИнформацииФактАдресОрганизации);
			
			ДополнительныеПараметры = Новый Структура;
			ДополнительныеПараметры.Вставить("РоссийскийАдрес", РоссийскийАдрес);
			
			ТипЗначения = Тип("ОписаниеОповещения");
			ПараметрыКонструктора = Новый Массив(3);
			ПараметрыКонструктора[0] = "ОткрытьФормуКонтактнойИнформацииЗавершение";
			ПараметрыКонструктора[1] = ЭтаФорма;
			ПараметрыКонструктора[2] = ДополнительныеПараметры;
			
			Оповещение = Новый (ТипЗначения, ПараметрыКонструктора);
			
			ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеКонтактнойИнформациейКлиент").ОткрытьФормуКонтактнойИнформации(ПараметрыФормы, , Оповещение);
			
		ИначеЕсли (Область.Имя = "ФизЛицПолМ")
			ИЛИ (Область.Имя = "ФизЛицПолЖ") Тогда
			
			СтандартнаяОбработка = Ложь;
			
			Если Область.Значение = "V" Тогда
				Область.Значение = "";
				Модифицированность = Истина;
				Возврат;
			КонецЕсли;
			
			Область.Значение = "V";
			Модифицированность = Истина;
			
			Если Область.Имя = "ФизЛицПолМ" Тогда
				ТабличныйДокумент.Области.ФизЛицПолЖ.Значение = "";
			Иначе
				ТабличныйДокумент.Области.ФизЛицПолМ.Значение = "";
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ СтандартнаяОбработка И Модифицированность Тогда
			
			ОбработкаИзмененияСодержимогоВПолеТабличногоДокумента(Элемент, Область)
			
		КонецЕсли;
		
	ИначеЕсли СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел1_1" Тогда
		// Раздел 1.1
		Если (СтрНайти(Ячейка.Имя,"КБКвФБ") > 0)
			Или (СтрНайти(Ячейка.Имя,"КБКвБС") > 0)
			Или (СтрНайти(Ячейка.Имя,"КБКвМБ") > 0) Тогда
			
			Если НЕ СтруктураРеквизитовФормы.мАвтоВыборКодов Тогда
				
				СтандартнаяОбработка = Ложь;
				
				Если СтрНайти(Ячейка.Имя,"КБКвФБ") > 0 Тогда
					ТекКБК = СтруктураРеквизитовФормы.мКБКвФБ_1_1;
					КодПоСтруктуре = "КБКвФБ_1_1";
				ИначеЕсли СтрНайти(Ячейка.Имя,"КБКвБС") > 0 Тогда
					ТекКБК = СтруктураРеквизитовФормы.мКБКвФБ_1_2;
					КодПоСтруктуре = "КБКвФБ_1_2";
				ИначеЕсли СтрНайти(Ячейка.Имя,"КБКвМБ") > 0 Тогда
					ТекКБК = СтруктураРеквизитовФормы.мКБКвФБ_1_3;
					КодПоСтруктуре = "КБКвФБ_1_3";
				КонецЕсли;
				
				Если Год(ДатаПодписи) <= 2005 Тогда
					ТЗДляВыбораКБК = мКодыБюджетнойКлассификации2005;
				ИначеЕсли Год(ДатаПодписи) >= 2006 Тогда
					ТЗДляВыбораКБК = мКодыБюджетнойКлассификации2006;
				КонецЕсли;
				
				КолЗнаков = 20;
				
				ПараметрыФормы = Новый Структура;
				ПараметрыФормы.Вставить("Заголовок",          "Выбор КБК");
				ПараметрыФормы.Вставить("ТаблицаЗначений",    ТЗДляВыбораКБК);
				ПараметрыФормы.Вставить("СтруктураДляПоиска", Новый Структура("Код", ТекКБК));
				ДополнительныеПараметры = Новый Структура("КодПоСтруктуре, Область, СтандартнаяОбработка, Элемент, Ячейка", КодПоСтруктуре, Область, СтандартнаяОбработка, Элемент, Ячейка);
				ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьФормуВыбораКБКЗавершение", ЭтотОбъект, ДополнительныеПараметры);
				ОткрытьФорму("Обработка.ОбщиеОбъектыРеглОтчетности.Форма.ФормаВыбораЗначенияИзТаблицы", ПараметрыФормы, ЭтаФорма,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
				
			Иначе
				
				Если НЕ СтандартнаяОбработка И Модифицированность Тогда
					
					ОбработкаИзмененияСодержимогоВПолеТабличногоДокумента(Элемент, Область)
					
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе
			
			Если НЕ СтандартнаяОбработка И Модифицированность Тогда
				
				ОбработкаИзмененияСодержимогоВПолеТабличногоДокумента(Элемент, Область)
				
			КонецЕсли;
			
		КонецЕсли;
			
	ИначеЕсли СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел1_2" Тогда
		// Раздел 1.2
		Если Ячейка.Имя = "КБК" Тогда
			
			Если НЕ СтруктураРеквизитовФормы.мАвтоВыборКодов Тогда
				
				СтандартнаяОбработка = Ложь;
				
				ТекКБК = СтруктураРеквизитовФормы.мКБКРаздел12;
				КодПоСтруктуре = "КБКРаздел12";
				
				ТЗДляВыбораКБК = мКодыКБКРаздел1_2;
				КолЗнаков = 20;
				
				ПараметрыФормы = Новый Структура;
				ПараметрыФормы.Вставить("Заголовок",          "Выбор КБК");
				ПараметрыФормы.Вставить("ТаблицаЗначений",    ТЗДляВыбораКБК);
				ПараметрыФормы.Вставить("СтруктураДляПоиска", Новый Структура("Код", ТекКБК));
				
				ДополнительныеПараметры = Новый Структура("КодПоСтруктуре, Область, СтандартнаяОбработка, Элемент, Ячейка", КодПоСтруктуре, Область, СтандартнаяОбработка, Элемент, Ячейка);
				ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьФормуВыбораКБКЗавершение", ЭтотОбъект, ДополнительныеПараметры);
				ОткрытьФорму("Обработка.ОбщиеОбъектыРеглОтчетности.Форма.ФормаВыбораЗначенияИзТаблицы", ПараметрыФормы, ЭтаФорма,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
				
			Иначе
				
				Если НЕ СтандартнаяОбработка И Модифицированность Тогда
					
					ОбработкаИзмененияСодержимогоВПолеТабличногоДокумента(Элемент, Область)
					
				КонецЕсли;
				
			КонецЕсли;
		Иначе
			
			Если НЕ СтандартнаяОбработка И Модифицированность Тогда
				
				ОбработкаИзмененияСодержимогоВПолеТабличногоДокумента(Элемент, Область)
				
			КонецЕсли;
			
		КонецЕсли;
			
	ИначеЕсли СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел1_3" Тогда
		// Раздел 1.3
		Если Ячейка.Имя = "КБК" Тогда
			
			Если НЕ СтруктураРеквизитовФормы.мАвтоВыборКодов Тогда
				
				СтандартнаяОбработка = Ложь;
				
				ТекКБК = СтруктураРеквизитовФормы.мКБКРаздел13;
				КодПоСтруктуре = "КБКРаздел13";
				
				ТЗДляВыбораКБК = мКодыКБК2005Раздел1_3;
				КолЗнаков = 20;
				
				ПараметрыФормы = Новый Структура;
				ПараметрыФормы.Вставить("Заголовок",          "Выбор КБК");
				ПараметрыФормы.Вставить("ТаблицаЗначений",    ТЗДляВыбораКБК);
				ПараметрыФормы.Вставить("СтруктураДляПоиска", Новый Структура("Код", ТекКБК));
				
				ДополнительныеПараметры = Новый Структура("КодПоСтруктуре, Область, СтандартнаяОбработка, Элемент, Ячейка", КодПоСтруктуре, Область, СтандартнаяОбработка, Элемент, Ячейка);
				ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьФормуВыбораКБКЗавершение", ЭтотОбъект, ДополнительныеПараметры);
				ОткрытьФорму("Обработка.ОбщиеОбъектыРеглОтчетности.Форма.ФормаВыбораЗначенияИзТаблицы", ПараметрыФормы, ЭтаФорма,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
				
			Иначе
				Если НЕ СтандартнаяОбработка И Модифицированность Тогда
					
					ОбработкаИзмененияСодержимогоВПолеТабличногоДокумента(Элемент, Область)
					
				КонецЕсли;
				
			КонецЕсли;
		Иначе
			Если НЕ СтандартнаяОбработка И Модифицированность Тогда
				
				ОбработкаИзмененияСодержимогоВПолеТабличногоДокумента(Элемент, Область)
				
			КонецЕсли;
			
		КонецЕсли;
		
		
	ИначеЕсли СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел2" Тогда
		//Раздел 2
		Если Область.Имя = "ПодачаЗаПредПериодДа" Тогда
			СтандартнаяОбработка = Ложь;
			Область.Значение = "Х";
			ТабличныйДокумент.Области.ПодачаЗаПредПериодНет.Значение = "";
			мПодачаЗаПредПериодРаздел2 = "1";
			Модифицированность = Истина;
		ИначеЕсли Область.Имя = "ПодачаЗаПредПериодНет" Тогда
			СтандартнаяОбработка = Ложь;
			Область.Значение = "Х";
			ТабличныйДокумент.Области.ПодачаЗаПредПериодДа.Значение = "";
			мПодачаЗаПредПериодРаздел2 = "0";
			Модифицированность = Истина;
		ИначеЕсли Область.Имя = "НачДеят" Тогда
			СтандартнаяОбработка = Ложь;
			Модифицированность = Истина;
			Если Область.Значение = "Х" Тогда
				Область.Значение = "";
				мНачДеятРаздел2 = "0";
			Иначе
				Область.Значение = "Х";
				мНачДеятРаздел2 = "1";
			КонецЕсли;
			
		ИначеЕсли Область.Имя = "КонДеят" Тогда
			Модифицированность = Истина;
			СтандартнаяОбработка = Ложь;
			Если Область.Значение = "Х" Тогда
				Область.Значение = "";
				мКонДеятРаздел2 = "0";
			Иначе
				Область.Значение = "Х";
				мКонДеятРаздел2 = "1";
			КонецЕсли;
		ИначеЕсли Область.Имя = "ОсДеятвРФДа" Тогда
			СтандартнаяОбработка = Ложь;
			Область.Значение = "Х";
			ТабличныйДокумент.Области.ОсДеятвРФНет.Значение = "";
			мОсДеятвРФРаздел2 = "1";
			Модифицированность = Истина;
		ИначеЕсли Область.Имя = "ОсДеятвРФНет" Тогда
			СтандартнаяОбработка = Ложь;
			Область.Значение = "Х";
			ТабличныйДокумент.Области.ОсДеятвРФДа.Значение = "";
			мОсДеятвРФРаздел2 = "0";
			Модифицированность = Истина;
		ИначеЕсли Область.Имя = "ОсДеятвРФПредДа" Тогда
			СтандартнаяОбработка = Ложь;
			Область.Значение = "Х";
			ТабличныйДокумент.Области.ОсДеятвРФПредНет.Значение = "";
			мОсДеятвРФПредРаздел2 = "1";
			Модифицированность = Истина;
		ИначеЕсли Область.Имя = "ОсДеятвРФПредНет" Тогда
			СтандартнаяОбработка = Ложь;
			Область.Значение = "Х";
			ТабличныйДокумент.Области.ОсДеятвРФПредДа.Значение = "";
			мОсДеятвРФПредРаздел2 = "0";
			Модифицированность = Истина;
			
		ИначеЕсли Область.Имя = "ТипОрг1" Тогда
			СтандартнаяОбработка = Ложь;
			Область.Значение = "Х";
			ТабличныйДокумент.Области.ТипОрг2.Значение = "";
			ТабличныйДокумент.Области.ТипОрг3.Значение = "";
			мТипОргРаздел2 = "331";
			Модифицированность = Истина;
		ИначеЕсли Область.Имя = "ТипОрг2" Тогда
			СтандартнаяОбработка = Ложь;
			Область.Значение = "Х";
			ТабличныйДокумент.Области.ТипОрг1.Значение = "";
			ТабличныйДокумент.Области.ТипОрг3.Значение = "";
			мТипОргРаздел2 = "332";
			Модифицированность = Истина;
		ИначеЕсли Область.Имя = "ТипОрг3" Тогда
			СтандартнаяОбработка = Ложь;
			Область.Значение = "Х";
			ТабличныйДокумент.Области.ТипОрг1.Значение = "";
			ТабличныйДокумент.Области.ТипОрг2.Значение = "";
			мТипОргРаздел2 = "333";
			Модифицированность = Истина;
			
		ИначеЕсли Область.Имя = "П000020011000" Тогда
			СтандартнаяОбработка = Ложь;
			Список = Новый СписокЗначений;
			Список.Добавить("I","(I) Государство инкорпорации");
			Список.Добавить("R","(R) Государство постоянного местопребывания");
			Список.Добавить("O","(O) Налоги не уплачиваются ни в одном из государств");
			Список.Добавить("","Пустое значение");
			// выдаем стандартный диалог
			НайденнаяСтрока = Список.НайтиПоЗначению(Область.Значение);
			ДополнительныеПараметры = Новый Структура;
			ДополнительныеПараметры.Вставить("Область", Область);
			ДополнительныеПараметры.Вставить("Элемент", Элемент);
			ОписаниеОповещения = Новый ОписаниеОповещения("ВыбратьИзСпискаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
			Если НайденнаяСтрока = Неопределено Тогда
				ПоказатьВыборИзСписка(ОписаниеОповещения, Список);
			Иначе
				ПоказатьВыборИзСписка(ОписаниеОповещения, Список,,НайденнаяСтрока);
			КонецЕсли;
			
			Возврат;
			
		ИначеЕсли ((СтрНайти(Область.Имя, "П000020012002")>0) ИЛИ (СтрНайти(Область.Имя, "П000020012003")>0)) И (НЕ СтруктураРеквизитовФормы.мАвтоВыборКодов)Тогда
			СтандартнаяОбработка = Ложь;
			НСтр = Сред(Область.Имя,15);
			Если (ТабличныйДокумент.Области["П000020012003_"+НСтр].Значение = "9999") И (Лев(Область.Имя,13)<>"П000020012003") Тогда
				СтандартнаяОбработка = Истина;
				Возврат;
			КонецЕсли;
			ТекКод = ТабличныйДокумент.Области["П000020012003_"+НСтр].Значение;
			
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("Заголовок",          "Выбор вида деятельности");
			ПараметрыФормы.Вставить("ТаблицаЗначений",    мВидыДеятельности);
			ПараметрыФормы.Вставить("СтруктураДляПоиска", Новый Структура("Код", ТекКод));
			
			ДополнительныеПараметры = Новый Структура("НСтр, Область, Элемент", НСтр, Область, Элемент);
			ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьФормуВыбораВидаДеятельностиЗавершение", ЭтотОбъект, ДополнительныеПараметры);
			ОткрытьФорму("Обработка.ОбщиеОбъектыРеглОтчетности.Форма.ФормаВыбораЗначенияИзТаблицы", ПараметрыФормы, ЭтаФорма,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			Возврат;
			
		ИначеЕсли (СтрНайти(Область.Имя, "П000020012004")>0) ИЛИ (СтрНайти(Область.Имя, "П000020012005")>0) Тогда
			СтандартнаяОбработка = Ложь;
			Если Область.Значение = "Х" Тогда
				Область.Значение = "";
			Иначе
				Область.Значение = "Х";
			КонецЕсли;
			Модифицированность = Истина;
		ИначеЕсли Область.Имя = "РОВладИОДа" Тогда
			СтандартнаяОбработка = Ложь;
			Область.Значение = "Х";
			ТабличныйДокумент.Области.РОВладИОНет.Значение = "";
			мРОВладИОРаздел2 = "1";
			Модифицированность = Истина;
		ИначеЕсли Область.Имя = "РОВладИОНет" Тогда
			СтандартнаяОбработка = Ложь;
			Область.Значение = "Х";
			ТабличныйДокумент.Области.РОВладИОДа.Значение = "";
			мРОВладИОРаздел2 = "0";
			Модифицированность = Истина;
		ИначеЕсли Область.Имя = "ИОВладРОДа" Тогда
			СтандартнаяОбработка = Ложь;
			Область.Значение = "Х";
			мИОВладРОРаздел2 = "1";
			ТабличныйДокумент.Области.ИОВладРОНет.Значение = "";
			Модифицированность = Истина;
		ИначеЕсли Область.Имя = "ИОВладРОНет" Тогда
			СтандартнаяОбработка = Ложь;
			Область.Значение = "Х";
			ТабличныйДокумент.Области.ИОВладРОДа.Значение = "";
			мИОВладРОРаздел2 = "0";
			Модифицированность = Истина;
		ИначеЕсли Область.Имя = "СделкисАссЛицДа" Тогда
			СтандартнаяОбработка = Ложь;
			Область.Значение = "Х";
			ТабличныйДокумент.Области.СделкисАссЛицНет.Значение = "";
			мСделкисАссЛицРаздел2 = "1";
			Модифицированность = Истина;
		ИначеЕсли Область.Имя = "СделкисАссЛицНет" Тогда
			СтандартнаяОбработка = Ложь;
			Область.Значение = "Х";
			ТабличныйДокумент.Области.СделкисАссЛицДа.Значение = "";
			мСделкисАссЛицРаздел2 = "0";
			Модифицированность = Истина;
		КонецЕсли;
		
		Если НЕ СтандартнаяОбработка И Модифицированность Тогда
			
			ОбработкаИзмененияСодержимогоВПолеТабличногоДокумента(Элемент, Область)
			
		КонецЕсли;
		
	ИначеЕсли СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел3" Тогда
		// Раздел 3
		Если (Лев(Область.Имя, 1) = "R") Или (СтрНайти(Область.Имя, "НомСтр") > 0) Тогда
			Возврат;
		КонецЕсли;
		
		НСтр = Число(Сред(Область.Имя, 9, 3));
		Коло = Прав(Область.Имя, 1);
		
		Если (НСтр > 180) И (Коло = "0") Тогда
			СтандартнаяОбработка = Ложь;
			Модифицированность = Истина;
			Если Область.Значение = "V" Тогда
				Область.Значение = "";
			Иначе
				Область.Значение = "V";
			КонецЕсли;
		КонецЕсли;	
		
		Если НЕ СтандартнаяОбработка И Модифицированность Тогда
			
			ОбработкаИзмененияСодержимогоВПолеТабличногоДокумента(Элемент, Область)
			
		КонецЕсли;
		
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьИзСпискаЗавершение(СписокЭлемент, ДополнительныеПараметры) Экспорт
	
	Область = ДополнительныеПараметры.Область;
	Элемент = ДополнительныеПараметры.Элемент;
	
	Если СписокЭлемент <> Неопределено  Тогда
		Область.Значение = СписокЭлемент.Значение;
		Модифицированность = Истина;
	КонецЕсли;
	ОбработкаИзмененияСодержимогоВПолеТабличногоДокумента(Элемент, Область)
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораВидаДеятельностиЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	НСтр = ДополнительныеПараметры.НСтр;
	Область = ДополнительныеПараметры.Область;
	Элемент = ДополнительныеПараметры.Элемент;
	
	// наименование видов деятельности указывается в столбце 2 только в случае,
	// если в столбце 3 "Код вида деятельности" проставлен код 9999"
	Если Результат <> Неопределено Тогда
		Если Результат["Код"] = "9999" Тогда
			ТабличныйДокумент.Области["П000020012002_"+НСтр].Значение = "";
			ТабличныйДокумент.Области["П000020012003_"+НСтр].Значение = "9999";
		ИначеЕсли Результат["Код"] = "" Тогда
			ТабличныйДокумент.Области["П000020012002_"+НСтр].Значение = "";
			ТабличныйДокумент.Области["П000020012003_"+НСтр].Значение = "";
		Иначе
			ТабличныйДокумент.Области["П000020012002_"+НСтр].Значение = Результат["Название"];
			ТабличныйДокумент.Области["П000020012003_"+НСтр].Значение = Результат["Код"];
		КонецЕсли;
		Модифицированность = Истина;
	КонецЕсли;
	
	ОбработкаИзмененияСодержимогоВПолеТабличногоДокумента(Элемент, Область)
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораКБКЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	КодПоСтруктуре = ДополнительныеПараметры.КодПоСтруктуре;
	Область = ДополнительныеПараметры.Область;
	СтандартнаяОбработка = ДополнительныеПараметры.СтандартнаяОбработка;
	Элемент = ДополнительныеПараметры.Элемент;
	Ячейка = ДополнительныеПараметры.Ячейка;
	
	Если Результат = Неопределено Тогда
		Возврат; // Отказались от выбора, окно закрыто
	КонецЕсли;
	
	ИтРезультат = Результат.Код;
	Если ОбновитьПеременныеМодуля(ЭтаФорма, КодПоСтруктуре, ИтРезультат) Тогда
		Ячейка.Значение = ИтРезультат;
		Модифицированность = Истина;
	КонецЕсли;
	
	Если НЕ СтандартнаяОбработка И Модифицированность Тогда
		
		ОбработкаИзмененияСодержимогоВПолеТабличногоДокумента(Элемент, Область)
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораИУстановкиТерриториальногоОрганаФНСЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Элемент = ДополнительныеПараметры.Элемент;
	Область = ДополнительныеПараметры.Область;
	ИФНСДоВыбора = ДополнительныеПараметры.ИФНСДоВыбора;
	ИФНСПослеВыбора = РегламентированнаяОтчетностьКлиентСервер.ВернутьЗначениеПараметраСЛиста(ЭтаФорма, "Титульный", "КодИМНС");
	Если ИФНСДоВыбора <> ИФНСПослеВыбора Тогда
		УполномоченныйПредставительУстановить();
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораНалоговогоПериода(ВыбЭлемент, ТекОбласть) Экспорт
	
	Если ВыбЭлемент = Неопределено Тогда
		Если НЕ ЗначениеЗаполнено(ТекОбласть.Значение) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='Не выбран налоговый (отчетный) период'");
			Сообщение.Сообщить();
		КонецЕсли;
	Иначе
		ВыбЗначение = ?(ВыбЭлемент.Значение = "Пустое значение", "", СокрЛП(ВыбЭлемент.Значение));
		ТекОбласть.Значение = ВыбЗначение;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуКонтактнойИнформацииЗавершение(Результат, Параметры) Экспорт
	
	ОбновитьАдресВТабличномДокументе(Результат, Параметры.РоссийскийАдрес);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьАдресВТабличномДокументе(Результат, РоссийскийАдрес)
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		
		// Обход ошибки платформы: в веб-клиенте, в результате выполнения процедуры "СформироватьАдрес"
		// общего модуля "РегламентированнаяОтчетностьВызовСервера", не изменяются значения ключей
		// соответствия "РоссийскийАдрес", передаваемого в качестве параметра.
		РоссийскийАдрес_ = РоссийскийАдрес;
		
		РегламентированнаяОтчетностьВызовСервера.СформироватьАдрес(Результат.КонтактнаяИнформация, РоссийскийАдрес_);
		
		СтруктураРеквизитовФормы.мФизЛицИнд = РоссийскийАдрес_["Индекс"];
		
		ТабличныйДокумент.Области.ФизЛицИнд.Значение      = РоссийскийАдрес_["Индекс"];
		ТабличныйДокумент.Области.ФизЛицС.Значение        = РоссийскийАдрес_["КодРегиона"];
		ТабличныйДокумент.Области.ФизЛицСубъект.Значение  = РоссийскийАдрес_["Регион"];
		ТабличныйДокумент.Области.ФизЛицРайон.Значение    = РоссийскийАдрес_["Район"];
		ТабличныйДокумент.Области.ФизЛицГород.Значение    = РоссийскийАдрес_["Город"];
		ТабличныйДокумент.Области.ФизЛицНП.Значение       = РоссийскийАдрес_["НаселенныйПункт"];
		ТабличныйДокумент.Области.ФизЛицУлица.Значение    = РоссийскийАдрес_["Улица"];
		ТабличныйДокумент.Области.ФизЛицДом.Значение      = РоссийскийАдрес_["Дом"];
		ТабличныйДокумент.Области.ФизЛицКорпус.Значение   = РоссийскийАдрес_["Корпус"];
		ТабличныйДокумент.Области.ФизЛицКвартира.Значение = РоссийскийАдрес_["Квартира"];
		
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УполномоченныйПредставительУстановить()
	//
	КодНО = РегламентированнаяОтчетностьКлиентСервер.ВернутьЗначениеПараметраСЛиста(ЭтаФорма, "Титульный", "КодИМНС");
	// Получим КПП с титульного листа, КПП должен быть проставлен актуальный.
	КППТитульныйЛист = РегламентированнаяОтчетностьКлиентСервер.ВернутьЗначениеПараметраСЛиста(ЭтаФорма, "Титульный", "КПП1");
	
	// Проставить представителя на тит. листе.
	Представитель = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОПредставителе(СтруктураРеквизитовФормы.Организация, ДатаПодписи, Ложь, КодНО, КППТитульныйЛист);
	
	Если Представитель.ПредставительФЛ = Истина Тогда
		// Получим текущего представителя.
		ТекПредставительФИО = ТабличныйДокумент.Области.ОргУП.Значение;
		// Получим текущий ИНН представителя.
		ТекПредставительИНН = РегламентированнаяОтчетностьКлиентСервер.ВернутьЗначениеПараметраСЛиста(ЭтаФорма, "Титульный", "ИННУП");
		// Если текущий представитель отличается от представителя в ИБ, тогда выполним следующие действия.
		Если Представитель.ФИОУпПред <> ТекПредставительФИО Тогда
			// Заполним ФИО представителя.
			ТабличныйДокумент.Области.ОргУП.Значение = Представитель.ФИОУпПред;
			// Заполним ИНН представителя.
			ТабличныйДокумент.Области.ИННУП.Значение = Представитель.ИННУпПред;
			// Если у нового представителя нет ИНН, то перезаполним все экземпляры листа с данными ФЛ.
			Если ПустаяСтрока(Представитель.ИННУпПред) Тогда
				// Перезаполним весь лист с данными ФЛ.
				СтруктураРеквизитовФормы.мИННУпПред = "";

				// Перезаполним лист с данными ФЛ.
				ЗаполнитьСведенияОбФЛ(ЭтаФорма, Истина);
				СформироватьДеревоРазделовОтчетаНаКлиенте();
				
				// Перезаполним даты.
				ЗаполнитьДатуВЯчейках(ЭтаФорма);

				Возврат;
			КонецЕсли;
			// Присвоим новый ИНН переменной.
			СтруктураРеквизитовФормы.мИННУпПред = Представитель.ИННУпПред;
			// Если у текущего представителя есть ИНН, а у прошлого ИННа не было, тогда следует найти и точечно удалить его данные.
			Если (НЕ ПустаяСтрока(Представитель.ИННУпПред)) И (ПустаяСтрока(ТекПредставительИНН)) Тогда
				ВсегоЭкземпляров = ЭтаФорма[мСтруктураМногостраничныхРазделов["ФизЛица"]].Количество();
				Для Инд = 0 По ВсегоЭкземпляров - 1 Цикл
					Если ЭтаФорма[мСтруктураМногостраничныхРазделов["ФизЛица"]][Инд].Данные[0].Значение.ФизЛицоФИО = ТекПредставительФИО Тогда
						// В случае, если лист активный и единственный в разделе.
						Если (ЭтаФорма[мСтруктураМногостраничныхРазделов["ФизЛица"]][Инд].АктивнаяСтраница) И (ВсегоЭкземпляров = 1) Тогда
							ЭтаФорма[мСтруктураМногостраничныхРазделов["ФизЛица"]][Инд].Данные[0].Значение = ВозвратитьПустойОбразЛистаФЛ(ЭтаФорма);
							ЭтаФорма[мСтруктураМногостраничныхРазделов["ФизЛица"]][Инд].Данные[0].Значение.ФизЛицоФИО = "";
						КонецЕсли;

						// В случе, если лист активный, но не единственный в разделе.
						Если (ЭтаФорма[мСтруктураМногостраничныхРазделов["ФизЛица"]][Инд].АктивнаяСтраница) И (ВсегоЭкземпляров <> 1) Тогда
							ЭтаФорма[мСтруктураМногостраничныхРазделов["ФизЛица"]].Удалить(Инд);
							СформироватьДеревоРазделовОтчетаНаКлиенте();
							Прервать;
						КонецЕсли;

						// В случе, если лист НЕ активный.
						Если НЕ ЭтаФорма[мСтруктураМногостраничныхРазделов["ФизЛица"]][Инд].АктивнаяСтраница Тогда
							ЭтаФорма[мСтруктураМногостраничныхРазделов["ФизЛица"]].Удалить(Инд);
							СформироватьДеревоРазделовОтчетаНаКлиенте();
							Прервать;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если Представитель.ПредставительФЛ = Неопределено Тогда
		СтруктураРеквизитовФормы.мИННУпПред = "";
		ТекПредставительФИО = ТабличныйДокумент.Области.ОргУП.Значение;
		ТабличныйДокумент.Области.ОргУП.Значение = "";
		ТабличныйДокумент.Области.ИННУП.Значение = "";
		//ТабличныйДокумент.Области.ДатаПодписиУпП.Значение = ""; // Для экранной формы одна дата подписи

		// **********
		ВсегоЭкземпляров = ЭтаФорма[мСтруктураМногостраничныхРазделов["ФизЛица"]].Количество();
		Для Инд = 0 По ВсегоЭкземпляров - 1 Цикл
			Если ЭтаФорма[мСтруктураМногостраничныхРазделов["ФизЛица"]][Инд].Данные[0].Значение.ФизЛицоФИО = ТекПредставительФИО Тогда
				// В случае, если лист активный и единственный в разделе.
				Если (ЭтаФорма[мСтруктураМногостраничныхРазделов["ФизЛица"]][Инд].АктивнаяСтраница) И (ВсегоЭкземпляров = 1) Тогда
					ЭтаФорма[мСтруктураМногостраничныхРазделов["ФизЛица"]][Инд].Данные[0].Значение = ВозвратитьПустойОбразЛистаФЛ(ЭтаФорма);
					ЭтаФорма[мСтруктураМногостраничныхРазделов["ФизЛица"]][Инд].Данные[0].Значение.ФизЛицоФИО = "";
				КонецЕсли;

				// В случе, если лист активный, но не единственный в разделе.
				Если (ЭтаФорма[мСтруктураМногостраничныхРазделов["ФизЛица"]][Инд].АктивнаяСтраница) И (ВсегоЭкземпляров <> 1) Тогда
					ЭтаФорма[мСтруктураМногостраничныхРазделов["ФизЛица"]].Удалить(Инд);
					СформироватьДеревоРазделовОтчетаНаКлиенте();
					Прервать;
				КонецЕсли;

				// В случе, если лист НЕ активный.
				Если НЕ ЭтаФорма[мСтруктураМногостраничныхРазделов["ФизЛица"]][Инд].АктивнаяСтраница Тогда
					ЭтаФорма[мСтруктураМногостраничныхРазделов["ФизЛица"]].Удалить(Инд);
					СформироватьДеревоРазделовОтчетаНаКлиенте();
					Прервать;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;

	КонецЕсли;

	ЗаполнитьДатуВЯчейках(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаИзмененияСодержимогоВПолеТабличногоДокумента(Элемент, Область)
	
	Модифицированность = Истина;
	ИмяРаздела =  СтруктураРеквизитовФормы.НаимТекущегоРаздела;
	Если ИмяРаздела = "Титульный" Тогда
		Если Область.Имя = "ДатаПодписи" Тогда 
			ДатаПодписи = Область.Значение;
			СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация = Истина;
            ДатаПодписиПриИзмененииНаСервере();
			СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация = Ложь;
			Возврат;
		ИначеЕсли Область.Имя = "НомКоррект" Тогда 
			НомерКорректировки = Область.Значение;
			СтруктураРеквизитовФормы.ВидДокумента = ?(НомерКорректировки = 0, 0, 1);
			ТабличныйДокумент.Области["ВидДок"].Значение = ?(НомерКорректировки = 0, "1", "3");
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ИмяПоказателя = Область.Имя;
	ЗначПоказателя = Область.Значение;
	ИмяРаздела = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
	
	Если ИмяРаздела = "Раздел1_1" Тогда
		
		Если ИмяПоказателя = "КодОКАТОР" Тогда
			
			ЗначПоказателя = СтрЗаменить(ЗначПоказателя, " ", "");
			ДлинаОКТМО = СтрДлина(ЗначПоказателя);
			Если НЕ (ДлинаОКТМО = 0 ИЛИ ДлинаОКТМО = 8 ИЛИ ДлинаОКТМО = 11) Тогда
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = НСтр("ru='Код по ОКТМО должен состоять из 8 или 11 цифр!'");
				Сообщение.Сообщить();
			КонецЕсли;
			
			Область.Значение = ЗначПоказателя;
			СтруктураРеквизитовФормы.мКодОКАТО1 = ЗначПоказателя;
			
		ИначеЕсли (СтрНайти(ИмяПоказателя,"КБКвФБ") > 0)
			Или (СтрНайти(ИмяПоказателя,"КБКвБС") > 0)
			Или (СтрНайти(ИмяПоказателя,"КБКвМБ") > 0) Тогда
			
			Если СтрНайти(ИмяПоказателя,"КБКвФБ") > 0 Тогда
				КодПоСтруктуре = "КБКвФБ_1_1";
			ИначеЕсли СтрНайти(ИмяПоказателя,"КБКвБС") > 0 Тогда
				КодПоСтруктуре = "КБКвФБ_1_2";
			ИначеЕсли СтрНайти(ИмяПоказателя,"КБКвМБ") > 0 Тогда
				КодПоСтруктуре = "КБКвФБ_1_3";
			КонецЕсли;
			
			ОбновитьПеременныеМодуля(ЭтаФорма, КодПоСтруктуре, ЗначПоказателя);
			
		ИначеЕсли (СтрНайти(ИмяПоказателя, "Сумма") > 0) И (СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет) Тогда
			
			Если СтрНайти(Область.Имя, "СуммаНалога") Тогда
				НомерСуммы = Сред(Область.Имя, 12, 1);
				Префикс = "СуммаНалога1";
			ИначеЕсли СтрНайти(Область.Имя, "СуммаНалУм") Тогда
				НомерСуммы = Сред(Область.Имя, 11, 1);
				Префикс = "СуммаНалУм1";
			ИначеЕсли СтрНайти(Область.Имя, "СуммаПерех") Тогда
				НомерСуммы = Сред(Область.Имя, 11, 1);
				Префикс = "СуммаПерех1";
			КонецЕсли;
			
			ОбновитьПеременныеМодуля(ЭтаФорма, Префикс + "_" + НомерСуммы, Область.Значение);
			
		КонецЕсли;
		
	ИначеЕсли ИмяРаздела = "Раздел1_2" Тогда
		
		Если ИмяПоказателя = "КодОКАТОР2" Тогда
			
			ЗначПоказателя = СтрЗаменить(ЗначПоказателя, " ", "");
			ДлинаОКТМО = СтрДлина(ЗначПоказателя);
			Если НЕ (ДлинаОКТМО = 0 ИЛИ ДлинаОКТМО = 8 ИЛИ ДлинаОКТМО = 11) Тогда
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = НСтр("ru='Код по ОКТМО должен состоять из 8 или 11 цифр!'");
				Сообщение.Сообщить();
			КонецЕсли;
			
			Область.Значение = ЗначПоказателя;
			СтруктураРеквизитовФормы.мКодОКАТОРаздел12 = ЗначПоказателя;
			
		ИначеЕсли ИмяПоказателя = "КБК" Тогда
			
			КодПоСтруктуре = "КБКРаздел12";
			
			ОбновитьПеременныеМодуля(ЭтаФорма, КодПоСтруктуре, ЗначПоказателя);
			
		ИначеЕсли (Область.Имя = "СуммаДоплФед") И (СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет) Тогда
			
			СтруктураРеквизитовФормы.мСуммаДоплФедРаздел12 = Область.Значение;
			
		ИначеЕсли (Область.Имя = "СуммаУменФед") И (СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет) Тогда
			
			СтруктураРеквизитовФормы.мСуммаУменФедРаздел12 = Область.Значение;
			
		КонецЕсли;
		
	ИначеЕсли ИмяРаздела = "Раздел1_3" Тогда
		
		Если ИмяПоказателя = "КодОКАТОР3" Тогда
			
			ЗначПоказателя = СтрЗаменить(ЗначПоказателя, " ", "");
			ДлинаОКТМО = СтрДлина(ЗначПоказателя);
			Если НЕ (ДлинаОКТМО = 0 ИЛИ ДлинаОКТМО = 8 ИЛИ ДлинаОКТМО = 11) Тогда
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = НСтр("ru='Код по ОКТМО должен состоять из 8 или 11 цифр!'");
				Сообщение.Сообщить();
			КонецЕсли;
			
			Область.Значение = ЗначПоказателя;
			СтруктураРеквизитовФормы.мКодОКАТОРаздел13 = ЗначПоказателя;
			
		ИначеЕсли ИмяПоказателя = "КБК" Тогда
			
			КодПоСтруктуре = "КБКРаздел13";
			
			ОбновитьПеременныеМодуля(ЭтаФорма, КодПоСтруктуре, ЗначПоказателя);
			
		ИначеЕсли (Область.Имя = "Сумма2ДоплФед") И (СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет) Тогда
			
			СтруктураРеквизитовФормы.мСуммаДоплФедРаздел13 = Область.Значение;
			
		ИначеЕсли (Область.Имя = "Сумма2УменФед") И (СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет) Тогда
			
			СтруктураРеквизитовФормы.мСуммаУменФедРаздел13 = Область.Значение;
			
		КонецЕсли;
		
	ИначеЕсли ИмяРаздела = "Раздел2" Тогда
		
		Если ИмяПоказателя = "КодСтраныСогл" Тогда
			
			Если ЗначениеЗаполнено(Область.Значение) Тогда
				
				Область.Значение = РегламентированнаяОтчетностьКлиентСервер.ДополнитьСтроку(Область.Значение, 2,"0");
				
			КонецЕсли;
			
			СтруктураРеквизитовФормы.мКодСтраныСоглРаздел2 = Область.Значение;
			
		ИначеЕсли ИмяПоказателя = "КодСтраны" Тогда
			
			Если ЗначениеЗаполнено(Область.Значение) Тогда
				
				Область.Значение = РегламентированнаяОтчетностьКлиентСервер.ДополнитьСтроку(Область.Значение, 2,"0");
				
			КонецЕсли;
			
			СтруктураРеквизитовФормы.мКодСтраныРаздел2 = Область.Значение;
			
		ИначеЕсли ИмяПоказателя = "ИННРО1" Тогда
			
			Если НЕ РегламентированнаяОтчетностьКлиент.ИННСоответствуетТребованиямНаКлиенте(ЭтаФорма, Область.Значение, Ложь) Тогда
			
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Указанный ИНН %1 - не соответствует требованиям!'"), Область.Значение);
				Сообщение.Сообщить();
			
			КонецЕсли;
			
			СтруктураРеквизитовФормы.мИННРО1Раздел2 = Область.Значение;
			
		ИначеЕсли ИмяПоказателя = "КППРО1" Тогда
			
			Если НЕ РегламентированнаяОтчетностьКлиентСервер.КППСоответствуетТребованиям(Область.Значение) Тогда
				
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Указанный КПП %1 - не соответствует требованиям!'"), Область.Значение);
				Сообщение.Сообщить();
				
			КонецЕсли;
			
			СтруктураРеквизитовФормы.мКППРО1Раздел2 = Область.Значение;
			
		ИначеЕсли ИмяПоказателя = "ИННРО2" Тогда
			
			Если НЕ РегламентированнаяОтчетностьКлиент.ИННСоответствуетТребованиямНаКлиенте(ЭтаФорма, Область.Значение, Ложь) Тогда
			
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Указанный ИНН %1 - не соответствует требованиям!'"), Область.Значение);
				Сообщение.Сообщить();
			
			КонецЕсли;
			
			СтруктураРеквизитовФормы.мИННРО2Раздел2 = Область.Значение;
			
		ИначеЕсли ИмяПоказателя = "КППРО2" Тогда
			
			Если НЕ РегламентированнаяОтчетностьКлиентСервер.КППСоответствуетТребованиям(Область.Значение) Тогда
				
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Указанный КПП %1 - не соответствует требованиям!'"), Область.Значение);
				Сообщение.Сообщить();
				
			КонецЕсли;
			
			СтруктураРеквизитовФормы.мКППРО2Раздел2 = Область.Значение;
			
		КонецЕсли;

	ИначеЕсли ИмяРаздела = "Раздел3" Тогда
		
		СтруктураРеквизитовФормы.НужноРассчитатьОтчетНаСервере = Истина; //Сделаем пересчет на сервере зависимых разделов декларации
		
	ИначеЕсли ИмяРаздела = "Раздел4" Тогда
		
		СтруктураРеквизитовФормы.НужноРассчитатьОтчетНаСервере = Истина; //Сделаем пересчет на сервере зависимых разделов декларации
		
	ИначеЕсли ИмяРаздела = "Раздел5" Тогда
		
		СтруктураРеквизитовФормы.НужноРассчитатьОтчетНаСервере = Истина; //Сделаем пересчет на сервере зависимых разделов декларации
		
	ИначеЕсли ИмяРаздела = "Раздел6" Тогда
		
		СохранитьДанныеРаздела(ИмяРаздела, Ложь, Ложь);
		
		СтруктураРеквизитовФормы.НужноРассчитатьОтчетНаСервере = Истина; //Сделаем пересчет на сервере зависимых разделов декларации
		
	ИначеЕсли ИмяРаздела = "Раздел7" Тогда
		
		Если ИмяПоказателя = "Ставка" Тогда
			
			СтруктураРеквизитовФормы.мСтавкаРаздел7 = Область.Значение;
			
		КонецЕсли;
		
		СтруктураРеквизитовФормы.НужноРассчитатьОтчетНаСервере = Истина; //Сделаем пересчет на сервере зависимых разделов декларации
		
	ИначеЕсли ИмяРаздела = "Раздел8" Тогда
		
		СтруктураРеквизитовФормы.НужноРассчитатьОтчетНаСервере = Истина; //Сделаем пересчет на сервере зависимых разделов декларации
		
	ИначеЕсли ИмяРаздела = "Раздел9" Тогда
		
		СтруктураРеквизитовФормы.НужноРассчитатьОтчетНаСервере = Истина; //Сделаем пересчет на сервере зависимых разделов декларации
		
	ИначеЕсли ИмяРаздела = "Раздел10" Тогда
		
		Если ИмяПоказателя = "КолОтд" Тогда
			
			СтруктураРеквизитовФормы.мКолОтдРаздел10 = Область.Значение;
			
		ИначеЕсли ИмяПоказателя = "НалФБ" Тогда
			
			СтруктураРеквизитовФормы.мНалФБРаздел10 = Область.Значение;
			
			СтруктураРеквизитовФормы.НужноРассчитатьОтчетНаСервере = Истина; //Сделаем пересчет на сервере зависимых разделов декларации
			
		ИначеЕсли ИмяПоказателя = "НалМБ" Тогда
			
			СтруктураРеквизитовФормы.мНалМБРаздел10 = Область.Значение;
			
			СтруктураРеквизитовФормы.НужноРассчитатьОтчетНаСервере = Истина; //Сделаем пересчет на сервере зависимых разделов декларации
			
		ИначеЕсли ИмяПоказателя = "П000100004004" Тогда
			// Строка 020. ИНН.
			Если НЕ РегламентированнаяОтчетностьКлиент.ИННСоответствуетТребованиямНаКлиенте(ЭтаФорма, Область.Значение, Ложь) Тогда
				
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Указанный ИНН %1 - не соответствует требованиям!'"), Область.Значение);
				Сообщение.Сообщить();
			
			КонецЕсли;
		ИначеЕсли ИмяПоказателя = "П000100005004" Тогда
			// Строка 030. КПП.
			Если НЕ РегламентированнаяОтчетностьКлиентСервер.КППСоответствуетТребованиям(Область.Значение) Тогда
				
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Указанный КПП %1 - не соответствует требованиям!'"), Область.Значение);
				Сообщение.Сообщить();
				
			КонецЕсли;
			
		Иначе
			
			СтруктураРеквизитовФормы.НужноРассчитатьОтчетНаСервере = Истина; //Сделаем пересчет на сервере зависимых разделов декларации
			
		КонецЕсли;
		
	ИначеЕсли ИмяРаздела = "Раздел10_Прил1" Тогда
		
		Если СтрНайти(ИмяПоказателя, "П000101001001_") > 0 Тогда
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Указанный ИНН %1 - не соответствует требованиям!'"), Область.Значение);
			Сообщение.Сообщить();
			
		ИначеЕсли СтрНайти(ИмяПоказателя, "П000101001002_") > 0 Тогда
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Указанный КПП %1 - не соответствует требованиям!'"), Область.Значение);
			Сообщение.Сообщить();
			
		Иначе
			
			СтруктураРеквизитовФормы.НужноРассчитатьОтчетНаСервере = Истина; //Сделаем пересчет на сервере зависимых разделов декларации
			
		КонецЕсли;
		
		
	ИначеЕсли ИмяРаздела = "Раздел11" Тогда
		
		СтруктураРеквизитовФормы.НужноРассчитатьОтчетНаСервере = Истина; //Сделаем пересчет на сервере зависимых разделов декларации
	
	ИначеЕсли ИмяРаздела = "Раздел11_Прил1" Тогда
		
		СтруктураРеквизитовФормы.НужноРассчитатьОтчетНаСервере = Истина; //Сделаем пересчет на сервере зависимых разделов декларации
		
	ИначеЕсли ИмяРаздела = "Раздел11_Прил2" Тогда
		
		СтруктураРеквизитовФормы.НужноРассчитатьОтчетНаСервере = Истина; //Сделаем пересчет на сервере зависимых разделов декларации
		
	КонецЕсли;
	
	//расчет выполняется в структуре, обновляем каждое значение после ввода
	СохранитьЗначениеПоказателяВСтруктуре(ЭтаФорма, ИмяРаздела, ИмяПоказателя, Область.Значение);
	
	Если СтруктураРеквизитовФормы.НужноРассчитатьОтчетНаСервере Тогда
		
		ИмяОбласти = Область.Имя;
		ПозицияПодстроки = СтрНайти(ИмяОбласти, "_");
		
		Если ПозицияПодстроки > 0 Тогда
			ИмяОбласти = Лев(ИмяОбласти, ПозицияПодстроки - 1);
		КонецЕсли;
		
		РасчетНаКлиенте(ИмяРаздела, ИмяОбласти);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДатаПодписиПриИзмененииНаСервере()
			
	ИмяСекции_КБК_Раздел1_2 = "КодыКБК2017Раздел1_2";
	Если ДатаПодписи < '20170101'
	   И ЗначениеЗаполнено(ДатаПодписи) Тогда
		ИмяСекции_КБК_Раздел1_2 = "КодыКБК2005Раздел1_2";
	КонецЕсли;
	ЗагрузитьПоказателиИзМакета(ИмяСекции_КБК_Раздел1_2);
	
	ЗаполнитьСведенияОбОрганизацииНаСервере(Истина);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СохранитьЗначениеПоказателяВСтруктуре(Форма, ИмяРаздела, ИмяПоказателя, ЗначениеПоказателя)
	
	МногостраничностьВРазделе = Ложь;
	КолМногострочныхЧастей = 0;
	СохранятьМногострКакТЗ = Истина;
	ИмяГруппы = "";
	
	Если ИмяРаздела = "ФизЛица"
	 ИЛИ ИмяРаздела = "Раздел10"
	 ИЛИ ИмяРаздела = "Раздел11"
	 ИЛИ ИмяРаздела = "Раздел11_Прил1"
	 ИЛИ ИмяРаздела = "Раздел11_Прил2" Тогда
	 
		МногостраничностьВРазделе = Истина;
		
	ИначеЕсли ИмяРаздела = "Раздел2" Тогда
		  
		КолМногострочныхЧастей = 1;
		ИмяГруппы = Форма.СтруктураРеквизитовФормы.мИдГруппы1;

	ИначеЕсли ИмяРаздела = "Раздел5" Тогда
		  
		МногостраничностьВРазделе = Истина;
		КолМногострочныхЧастей = 1;
		ИмяГруппы = Форма.СтруктураРеквизитовФормы.мИдГруппы2;
		
	ИначеЕсли ИмяРаздела = "Раздел6" Тогда
		
		МногостраничностьВРазделе = Истина;
		КолМногострочныхЧастей = 1;
		ИмяГруппы = Форма.СтруктураРеквизитовФормы.мИдГруппы3;
		
	ИначеЕсли ИмяРаздела = "Раздел7" Тогда
		
		МногостраничностьВРазделе = Истина;
		КолМногострочныхЧастей = 1;
		ИмяГруппы = Форма.СтруктураРеквизитовФормы.мИдГруппы4;
		
	ИначеЕсли ИмяРаздела = "Раздел10_Прил1" Тогда
		
		КолМногострочныхЧастей = 1;
		ИмяГруппы = Форма.СтруктураРеквизитовФормы.мИдГруппы5;
		
	КонецЕсли; 
	
	ДанныеРаздела = Неопределено;
	ДанныеМногострочногоРаздела = Неопределено;
	
	Если ИмяРаздела <> "" Тогда
		
		Если МногостраничностьВРазделе Тогда  //Для многостраничных разделов
			
			ИмяТаблицыСтраницы = Неопределено;
			Если Форма.мСтруктураМногостраничныхРазделов.Свойство(ИмяРаздела, ИмяТаблицыСтраницы) Тогда
				
				ТаблицаСтраницы = Форма[ИмяТаблицыСтраницы];
				АктивныеСтраницы = ТаблицаСтраницы.НайтиСтроки(Новый Структура("АктивнаяСтраница", Истина));
				
				Если АктивныеСтраницы.Количество() > 0 Тогда
					
					ДанныеРазделаСписок = АктивныеСтраницы[0].Данные;
					Если ДанныеРазделаСписок.Количество() > 0 Тогда
						
						ДанныеРаздела = ДанныеРазделаСписок[0].Значение;
						ДанныеРазделаСписок[0].Пометка = Ложь; //Регистрируем для передачи на сервер (при редактировании таблицы значения не передаются)
						
					КонецЕсли;
					
					Если КолМногострочныхЧастей > 0 Тогда  // И многострочных разделов
						
						ДанныеДопСтрокРазделаСписок = АктивныеСтраницы[0].ДанныеДопСтрок;
						Если ДанныеДопСтрокРазделаСписок.Количество() > 0 Тогда
							
							ДанныеДопСтрокРаздела = ДанныеДопСтрокРазделаСписок[0].Значение;
							ДанныеРазделаСписок[0].Пометка = Ложь;
							
							СтруктураГруппы = Неопределено;
							Форма.мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);
							Если СохранятьМногострКакТЗ Тогда
								ДанныеМногострочногоРаздела = ДанныеДопСтрокРаздела;
							Иначе
								ДанныеМногострочногоРаздела = ДанныеДопСтрокРаздела[ИмяГруппы];
							КонецЕсли;
							
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЕсли; 
				
			КонецЕсли;
			
		Иначе  //Для обычных разделов
			
			ДанныеРаздела = Форма["СтруктураДанных" + ИмяРаздела];
			
			Если КолМногострочныхЧастей > 0 Тогда  // И многострочных разделов
				
				СтруктураГруппы = Неопределено;
				Форма.мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);
				
				ДанныеМногострочногоРаздела = Форма[СтруктураГруппы];
				
			КонецЕсли;
			
		КонецЕсли; 
		
		Если ДанныеМногострочногоРаздела = Неопределено Тогда
			Если ДанныеРаздела <> Неопределено Тогда
				Если ДанныеРаздела.Свойство(ИмяПоказателя) Тогда
					ДанныеРаздела[ИмяПоказателя] = ЗначениеПоказателя;
				Иначе
					ДанныеРаздела.Вставить(ИмяПоказателя, ЗначениеПоказателя);
				КонецЕсли
			КонецЕсли; 
		Иначе
			Если ИмяГруппы = Лев(ИмяПоказателя, 11) Тогда //Показатель входит в многострочную часть
				ИмяПок = Лев(ИмяПоказателя, 13);
				СтрИнд = Сред(ИмяПоказателя, 14);
				Если Лев(СтрИнд, 1)="_" Тогда
					СтрИнд = Сред(СтрИнд, 2);
				КонецЕсли;
				Инд = Число(СтрИнд);
				Если (Инд > 0) И ДанныеМногострочногоРаздела.Количество() >= Инд Тогда
					ДанныеМногострочногоРаздела[Инд-1][ИмяПок] = ЗначениеПоказателя;
				КонецЕсли; 
			КонецЕсли;
			Если ДанныеРаздела <> Неопределено Тогда
				Если ДанныеРаздела.Свойство(ИмяПоказателя) Тогда
					ДанныеРаздела[ИмяПоказателя] = ЗначениеПоказателя;
				Иначе
					ДанныеРаздела.Вставить(ИмяПоказателя, ЗначениеПоказателя);
				КонецЕсли
			КонецЕсли; 
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// Период в заголовке отчета
	
	Если СтрНайти(Заголовок, СтруктураРеквизитовФормы.СтрПериодОтчета) = 0 Тогда
		Заголовок = СтруктураРеквизитовФормы.ЗаголовокПредставление + " за " + СтруктураРеквизитовФормы.СтрПериодОтчета;
	КонецЕсли;
	
	ОргСтр = " (" + СтруктураРеквизитовФормы.НаимОрганизации + ")";
	Если СтрНайти(Заголовок, ОргСтр) = 0 Тогда
		Заголовок = Заголовок + ОргСтр;
	КонецЕсли;
	
	Заголовок = Заголовок + ?(СтрНайти(ЭтаФорма.ИмяФормы, "Внешний") > 0, " - внешний отчет", "");
	
	ПодключитьОбработчикОжидания("ВыполнитьПроверкуПередОткрытием", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПроверкуПередОткрытием()
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПриОткрытииЗавершение", ЭтотОбъект);
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередОткрытиемФормыРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытииЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Модифицированность = Ложь;
		Закрыть();
		Возврат;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	РегламентированнаяОтчетностьКлиент.ПередЗакрытиемРегламентированногоОтчета(ЭтаФорма, Отказ, СтандартнаяОбработка, ЗавершениеРаботы, ТекстПредупреждения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ЗавершениеРаботы Тогда
				
		Возврат;
		
	КонецЕсли;
	
	ПриЗакрытииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПриЗакрытииНаСервере()
			
	РегламентированнаяОтчетность.ПриЗакрытииРегламентированногоОтчета(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура СохранитьДеревоНастройкиСтраниц(Знач мСохраненныйДок)
	
	Если мСохраненныйДок <> Неопределено Тогда
				
		Если ТипЗнч(мСохраненныйДок) = Тип("ДокументСсылка.РегламентированныйОтчет") Тогда
			мСохраненныйДок = мСохраненныйДок.ПолучитьОбъект();
		КонецЕсли;
		
		Если Не мСохраненныйДок.ЭтоНовый() Тогда
			// Сохраняем выбранные листы для печати в хранилище
			ХранилищеДанных = Новый ХранилищеЗначения(РеквизитФормыВЗначение("мДеревоСтраницОтчета"));
			мСохраненныйДок.ДеревоНастройкиСтраниц = ХранилищеДанных;
			Попытка
				мСохраненныйДок.Записать();
			Исключение
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
Конецпроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайла(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузитьИзФайлаЗавершение", ЭтотОбъект);
	
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередЗагрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайлаЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ЗагрузитьИзФайлаОтчет();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайлаОтчет() Экспорт
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузитьИзФайлаОтчетЗавершение", ЭтотОбъект);
	
	Если Модифицированность Тогда
		СохранитьНаКлиенте(,ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайлаОтчетЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	РегламентированнаяОтчетностьЗагрузкаКлиент.ЗагрузитьИзФайлаОтчет(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Функция ЗагрузкаОтчетаИзФайла(ДанныеДляЗагрузки) Экспорт
	
	Если Модифицированность Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = СтрШаблон(НСтр("ru='Отчет ""%1"" не сохранен.'"), ЭтотОбъект.Заголовок);
		Сообщение.Сообщить();
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ ЗагрузкаОтчетаИзФайлаНаСервере(ДанныеДляЗагрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
		
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция ЗагрузкаОтчетаИзФайлаНаСервере(ДанныеДляЗагрузки)
	
	ИнициализацияСоставаПоказателей();
	
	ДеревоДляЗагрузки = Неопределено;
	
	Если НЕ РегламентированнаяОтчетностьЗагрузка.ЗагрузкаОтчетаИзФайла(
		ЭтотОбъект, Новый Структура, ДанныеДляЗагрузки, ДеревоДляЗагрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура Выгрузить(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьЗавершение", ЭтотОбъект);

	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ВыгрузитьОтчет();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьОтчет() Экспорт
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьОтчетЗавершение", ЭтотОбъект);
	
	Если Модифицированность Тогда
		СохранитьНаКлиенте(,ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьОтчетЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ФормаВыгрузкиРеглОтчета = ПолучитьФорму("Документ.ВыгрузкаРегламентированныхОтчетов.Форма.ФормаДокумента", , ЭтаФорма);
	
	СпДокОсн = Новый СписокЗначений;
	СпДокОсн.Добавить(СтруктураРеквизитовФормы.мСохраненныйДок);
	
	ФормаВыгрузкиРеглОтчета.СформироватьИЗаписать(СпДокОсн);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузку(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьВыгрузкуЗавершение", ЭтотОбъект);

	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
		
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузкуЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПроверитьВыгрузкуОтчета();
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузкуОтчета()
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьВыгрузкуОтчетаЗавершение", ЭтотОбъект);
	
	Если Модифицированность Тогда
		СохранитьНаКлиенте(,ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузкуОтчетаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ФормаВыгрузкиРеглОтчета = ПолучитьФорму("Документ.ВыгрузкаРегламентированныхОтчетов.Форма.ФормаДокумента", , ЭтаФорма);
	
	СпДокОсн = Новый СписокЗначений;
	СпДокОсн.Добавить(СтруктураРеквизитовФормы.мСохраненныйДок);
	
	ФормаВыгрузкиРеглОтчета.Проверить(СпДокОсн);
	
КонецПроцедуры

&НаСервере
Функция ПроверитьТитульныйЛистИСведенияОФизЛицах(БратьИзФормы = Истина, ВыводитьСообщения = Истина, ЧтоПроверять = "12", ПечатаемыеЛисты = Неопределено)
	
	СтатусПроверки = 0;
	ПредставлениеОтчета = "";
	
	Данные = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить();
	Орг = СтруктураРеквизитовФормы.мСохраненныйДок.Организация;
	Инф = ВычислитьПоказателиТитульногоЛистаИСведенияОФизЛицах(БратьИзФормы, ВыводитьСообщения);
	
	ПоказателиТитульный = Инф.Получить(0).Значение;
	ДанныеФизЛиц = Инф.Получить(1).Значение;
	
	ОргИНН = Орг.ИНН;
	ДокПредставляется = 331;
	Если НЕ ПустаяСтрока(ПоказателиТитульный.ТипОрг2) Тогда
		ДокПредставляется = 332;
	ИначеЕсли НЕ ПустаяСтрока(ПоказателиТитульный.ТипОрг3) Тогда
		ДокПредставляется = 333;
	КонецЕсли;
	
	НаимИОПол = ПоказателиТитульный.ИноОргНазв;
	ОргНазв = ПоказателиТитульный.ОргНазв;
	СтрИО = ПоказателиТитульный.ИноСтрана;
	КодСтрИО = ПоказателиТитульный.ИноСтрКод;
	ТелИО = ПоказателиТитульный.ИноКТел;
	ОргДиректор = ПоказателиТитульный.ОргДиректор;
	ОргУП = ПоказателиТитульный.ОргУП;
	
	ЭтоПБОЮЛ = НЕ РегламентированнаяОтчетностьВызовСервера.ЭтоЮридическоеЛицо(Орг);
	Если НЕ ЭтоПБОЮЛ Тогда
		Если ТекущаяДатаСеанса() >= '20080101' И ПустаяСтрока(ОргДиректор) И ПустаяСтрока(ОргУП) Тогда
			Если ВыводитьСообщения Тогда
				СообщитьВТС("Не задано Ф.И.О. (полностью) руководителя!", "Титульный", "ОргДиректор");
			КонецЕсли;
			СтатусПроверки = 1;
		КонецЕсли;
		Если НЕ РегламентированнаяОтчетность.ИННСоответствуетТребованиямБезТипаНаСервере(ОргИНН) Тогда
			Если ВыводитьСообщения Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "Неверно задан ИНН организации!", "Титульный", "ИНН1");
			КонецЕсли;
			СтатусПроверки = 1;
		КонецЕсли;
		Если ПустаяСтрока(НаимИОПол) Тогда
			Если ВыводитьСообщения Тогда
				СообщитьВТС("Не задано название иностранной организации!", "Титульный", "ИноОргНазв");
			КонецЕсли;
			СтатусПроверки = 1;
		КонецЕсли;
		Если ПустаяСтрока(ОргНазв) Тогда
			Если ВыводитьСообщения Тогда
				СообщитьВТС("Не задано полное название организации!", "Титульный", "ОргНазв");
			КонецЕсли;
			СтатусПроверки = 1;
		КонецЕсли;
		Если РегламентированнаяОтчетность.ФИОНаписаноВерно(СтрЗаменить(ОргДиректор, ",", "")) = 0 Тогда
			Если ВыводитьСообщения Тогда
				СообщитьВТС("Фамилия, имя или отчество руководителя содержат недопустимые символы!", "Титульный", "ОргДиректор");
			КонецЕсли;
			СтатусПроверки = 1;
		КонецЕсли;
		Если РегламентированнаяОтчетность.ФИОНаписаноВерно(СтрЗаменить(ОргУП, ",", "")) = 0 Тогда
			Если ВыводитьСообщения Тогда
				СообщитьВТС("Фамилия, имя или отчество уполномоченного представителя содержат недопустимые символы!", "Титульный", "ОргУП");
			КонецЕсли;
			СтатусПроверки = 1;
		КонецЕсли;
	Иначе
		Если ПустаяСтрока(ОргНазв) Тогда
			Если ВыводитьСообщения Тогда
				СообщитьВТС("Не заданы фамилия, имя, отчество индивидуального предпринимателя!", "Титульный", "ОргНазв");
			КонецЕсли;
			СтатусПроверки = 1;
		КонецЕсли;
		Если НЕ РегламентированнаяОтчетностьВызовСервера.ИННСоответствуетТребованиямНаСервере(ОргИНН, Истина) Тогда
			Если ВыводитьСообщения Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "Неверно задан ИНН индивидуального предпринимателя!", "Титульный", "ИНН1");
			КонецЕсли;
			СтатусПроверки = 1;
		КонецЕсли;
		Если РегламентированнаяОтчетность.ФИОНаписаноВерно(СтрЗаменить(ОргНазв, ",", "")) = 0 Тогда
			Если ВыводитьСообщения Тогда
				СообщитьВТС("Фамилия, имя или отчество физического лица содержат недопустимые символы!", "Титульный", "ОргНазв");
			КонецЕсли;
			СтатусПроверки = 1;
		КонецЕсли;
	КонецЕсли;
	
	Возврат (СтатусПроверки <> 1);
	
КонецФункции

&НаСервере
Функция ПроверитьКорректностьЗаполненияОКТМО()
	
	СтатусПроверки = Истина;
	
	ПоказателиОтчета = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить().ПоказателиОтчета;
	ОКАТОРаздел1_1 = СокрЛП(ПоказателиОтчета.ПолеТабличногоДокументаРаздел1_1.КодОКАТОР);
	ОКАТОРаздел1_2 = СокрЛП(ПоказателиОтчета.ПолеТабличногоДокументаРаздел1_2.КодОКАТОР2);
	ОКАТОРаздел1_3 = СокрЛП(ПоказателиОтчета.ПолеТабличногоДокументаРаздел1_3.КодОКАТОР3);
	
	ДлинаОКАТО = СтрДлина(ОКАТОРаздел1_1);
	Если НЕ (ДлинаОКАТО = 11 ИЛИ ДлинаОКАТО = 8 ИЛИ ДлинаОКАТО = 0) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма,
		"В разделе 1.1 неверно задан код по ОКТМО!", "Раздел1_1", "КодОКАТОР");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	ДлинаОКАТО = СтрДлина(ОКАТОРаздел1_2);
	Если НЕ (ДлинаОКАТО = 11 ИЛИ ДлинаОКАТО = 8 ИЛИ ДлинаОКАТО = 0) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма,
			"В разделе 1.2 неверно задан код по ОКТМО!", "Раздел1_2", "КодОКАТОР2");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	ДлинаОКАТО = СтрДлина(ОКАТОРаздел1_3);
	Если НЕ (ДлинаОКАТО = 11 ИЛИ ДлинаОКАТО = 8 ИЛИ ДлинаОКАТО = 0) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма,
			"В разделе 1.3 неверно задан код по ОКТМО!", "Раздел1_3", "КодОКАТОР3");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Возврат СтатусПроверки;
	
КонецФункции

&НаСервере
Функция ПроверитьПредписанныеПоказатели(БратьИзФормы = Истина, ВыводитьСообщения = Истина, ЧтоПроверять = "12", ПечатаемыеЛисты = Неопределено)
	
	ФормаВыводаСообщений = ЭтаФорма;
	
	СтатусПроверки = 0;
	ПредставлениеОтчета = "";
	
	мСтруктураМногостраничныхРазделовВыгрузка = Новый Структура;
	
	Если БратьИзФормы Тогда
		ПоказателиОтчета = Новый Структура();
		ИмяТекТабличногоПоля    = "ПолеТабличногоДокументаТитульный";
		ТекТабличноеПоле        = Элементы["ТабличныйДокумент"];
		ПоказателиТекущегоЛиста = СобратьДанныеТекущегоТаблПоля(ЭтаФорма, ТекТабличноеПоле);
		ПоказателиОтчета.Вставить(ИмяТекТабличногоПоля, ПоказателиТекущегоЛиста);
	Иначе
		ДанныеОтчета = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить();
		Если ДанныеОтчета = Неопределено Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "Данные для формирования отчета не заданы. Не удалось проверить правильность заполнения!", "Титульный", "ИНН1");
			Возврат Ложь;
		КонецЕсли;
		ПоказателиОтчета = ДанныеОтчета.ПоказателиОтчета;
		мСтруктураМногостраничныхРазделовВыгрузка = ДанныеОтчета.ДанныеМногостраничныхРазделов;
		ПредставлениеОтчета = РегламентированнаяОтчетностьКлиентСервер.ПредставлениеДокументаРеглОтч(СтруктураРеквизитовФормы.мСохраненныйДок) + ". ";
	КонецЕсли;
	
	Показатели = ДанныеФормыВЗначение(мТаблицаСоставПоказателей, Тип("ТаблицаЗначений"));
	Показатели.Свернуть("ИмяПоляТаблДокумента, ПризнМногострочности","");
	РазделыСп = Новый СписокЗначений;
	ПоказателиКопия = Показатели.Скопировать();
	ПоказателиКопия.Свернуть("ИмяПоляТаблДокумента", "");
		
	РазделыСп.ЗагрузитьЗначения(ПоказателиКопия.ВыгрузитьКолонку("ИмяПоляТаблДокумента"));
	
	Разделы = Новый Структура;
	ТекСостРазд = Неопределено;
	Для Каждого Стр Из Показатели Цикл
		
		ИмяРаздела = Стр.ИмяПоляТаблДокумента;
		Разделы.Свойство(ИмяРаздела, ТекСостРазд);
		Призн = Стр.ПризнМногострочности;
		
		Если Призн = "*" Тогда
			Если (ТекСостРазд = "/") Тогда
				Разделы.Вставить(ИмяРаздела, "#");
			ИначеЕсли (ТекСостРазд = Неопределено) ИЛИ (ТекСостРазд = "") Тогда
				Разделы.Вставить(ИмяРаздела, "*");
			КонецЕсли;
		ИначеЕсли Призн = "/" Тогда
			Если (ТекСостРазд = "*") Тогда
				Разделы.Вставить(ИмяРаздела, "#");
			ИначеЕсли (ТекСостРазд = Неопределено) ИЛИ (ТекСостРазд = "") Тогда
				Разделы.Вставить(ИмяРаздела, "/");
			КонецЕсли;
		ИначеЕсли Призн = "#" Тогда
			Продолжить;
		ИначеЕсли Призн = "" Тогда
			Если ТекСостРазд = Неопределено Тогда
				Разделы.Вставить(ИмяРаздела, "");
			КонецЕсли;
		КонецЕсли;
		
		ЭлРазделаСп = РазделыСп.НайтиПоЗначению(ИмяРаздела);
		Если ЭлРазделаСп = Неопределено Тогда
			ЭлРазделаСп = РазделыСп.Добавить(ИмяРаздела);
		КонецЕсли;
		СостояниеРаздела = Неопределено;
		Разделы.Свойство(ИмяРаздела, СостояниеРаздела);
		ЭлРазделаСп.Представление = СостояниеРаздела;
		
	КонецЦикла;
	
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//*************************************************************************************************************************	
	//Выгружаем поочередно разделы
	Для Каждого Раздел Из РазделыСп Цикл
		
		Разд = Неопределено;
		Разделы.Свойство(Раздел.Значение, Разд);
		ИмяРаздела = Раздел.Значение;
		Призн = Разд;
		
		Если ИмяРаздела = "Раздел11" ИЛИ ИмяРаздела = "Раздел11_Прил1" ИЛИ ИмяРаздела = "Раздел11_Прил2" Тогда
			Продолжить;
		КонецЕсли;
		
		Если РазделПуст(КлючИЗначениеПоКлючу(ИмяРаздела, Разделы), ПоказателиОтчета, мСтруктураМногостраничныхРазделовВыгрузка) Тогда
			Продолжить;
		КонецЕсли;
		
		Если Призн = "#" Тогда //раздел многостранично-многострочный
			
			ТаблицаСтраницРаздела = Неопределено;
			мСтруктураМногостраничныхРазделовВыгрузка.Свойство(ИмяРаздела, ТаблицаСтраницРаздела);
			
			НомСтр = 0;
			
			Подразделы = РегламентированнаяОтчетность.РазбитьПоПодразделам(ИмяРаздела, мТаблицаСоставПоказателей, СтруктураРеквизитовФормы.МногострочныеИсключения);
			СтрокиФорматаТекРаздела = мТаблицаСоставПоказателей.НайтиСтроки(Новый Структура("ИмяПоляТаблДокумента", ИмяРаздела));
			
			Для Каждого Стр из ТаблицаСтраницРаздела Цикл
				
				//проверка на пустую страницу раздела
				ТекПок = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(РегламентированнаяОтчетность.СкопированнаяСтруктура(Стр.Данные));
				
				НомСтр = НомСтр + 1;
				
				СтраницаПустая = 1;
				
				Для Каждого Подраздел Из Подразделы Цикл
					НачПоказатель = Подраздел.Ключ;
					ТипПодраздела = Подраздел.Значение;
					
					//в многострочном разделе возможны только многострочные и обычные подразделы
					Если ТипПодраздела = "/" Тогда//многострочный подраздел
						
						СтрФорматаПодраздела = Новый СписокЗначений;
						ПодразделНайден = Ложь;
						ПервыйПроход = Истина;
						Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
							
							КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
							ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
							ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
							
							Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
								ПодразделНайден = Истина;
							КонецЕсли;
							
							Если НЕ ПодразделНайден Тогда
								Продолжить;
							КонецЕсли;
							
							Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
								Продолжить;
							КонецЕсли;
							
							Если ПервыйПроход Тогда
								ПервыйПроход = Ложь;
							Иначе	
								
								ВЗнач = Неопределено;
								Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
									Прервать;
								КонецЕсли;
									
							КонецЕсли;
							
							СтрФорматаПодраздела.Добавить(СтрРаздела);
							
						КонецЦикла;
						//определили показатели подраздела. Теперь выведем их для каждой строки
						
						ном = 1;
						ЗначениеПоля = Неопределено;
						
						Пока Истина Цикл
							
							Для Каждого СтрФормата Из СтрФорматаПодраздела Цикл
								
								ТекОписатель = СтрФормата.Значение;
								КодПоказателя = ТекОписатель.КодПоказателяПоСоставу;
								ИмяЯчейки = ?(Пустаястрока(ТекОписатель.КодПоказателяПоФорме), КодПоказателя, ТекОписатель.КодПоказателяПоФорме); 
								ПризнакФормата = ТекОписатель.ТипДанныхПоказателя;
								
								Если НЕ ТекПок.Свойство(КодПоказателя + "_" + Формат(ном, "ЧГ="), ЗначениеПоля) Тогда
									Перейти ~ВыходИзДвойногоЦикла__;
								КонецЕсли;
								
								СтраницаПустая = Мин(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение("", ТекОписатель, ЗначениеПоля, Ложь, НомСтр, ном, 1), СтраницаПустая);
								
							КонецЦикла;
							
							ном = ном + 1;
							
						КонецЦикла;
						
						~ВыходИзДвойногоЦикла__:
						
					ИначеЕсли ТипПодраздела = "" Тогда//обычный подраздел
						
						ПодразделНайден = Ложь;
						ПервыйПроход = Истина;
						Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
							
							КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
							ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
							ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
													
							Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
								ПодразделНайден = Истина;
							КонецЕсли;
							
							Если НЕ ПодразделНайден Тогда
								Продолжить;
							КонецЕсли;
							
							Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
								Продолжить;
							КонецЕсли;
							
							Если ПервыйПроход Тогда
								ПервыйПроход = Ложь;
							Иначе	
								
								ВЗнач = Неопределено;
								Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
									Прервать;
								КонецЕсли;
									
							КонецЕсли;
							
							ЗначениеЯчейки = ТекПок[ИмяЯчейки];
							
							СтраницаПустая = Мин(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение("", СтрРаздела, ЗначениеЯчейки, Ложь, НомСтр, , 1), СтраницаПустая);
							
						КонецЦикла;
						
					КонецЕсли;//многострочный или обычный подраздел
					
				Конеццикла;//по подразделам
				
				Если СтраницаПустая = 1 Тогда
					Продолжить;
				КонецЕсли;
				//конец проверки на пустую страницу раздела
				
				Для Каждого Подраздел Из Подразделы Цикл
					НачПоказатель = Подраздел.Ключ;
					ТипПодраздела = Подраздел.Значение;
					
					//в многострочном разделе возможны только многострочные и обычные подразделы
					Если ТипПодраздела = "/" Тогда//многострочный подраздел
						
						СтрФорматаПодраздела = Новый СписокЗначений;
						ПодразделНайден = Ложь;
						ПервыйПроход = Истина;
						Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
							
							КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
							ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
							ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
							
							Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
								ПодразделНайден = Истина;
							КонецЕсли;
							
							Если НЕ ПодразделНайден Тогда
								Продолжить;
							КонецЕсли;
							
							Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
								Продолжить;
							КонецЕсли;
							
							Если ПервыйПроход Тогда
								ПервыйПроход = Ложь;
							Иначе	
								
								ВЗнач = Неопределено;
								Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
									Прервать;
								КонецЕсли;
									
							КонецЕсли;
							
							СтрФорматаПодраздела.Добавить(СтрРаздела);						
							
						КонецЦикла;
						//определили показатели подраздела. Теперь выведем их для каждой строки
						
						ном = 1;
						ЗначениеПоля = Неопределено;
						
						Пока Истина Цикл
							
							//проверка на то, что строка пустая
							СтрокаПустая = Истина;
							Для Каждого СтрФормата Из СтрФорматаПодраздела Цикл
								
								ТекОписатель = СтрФормата.Значение;
								КодПоказателя = ТекОписатель.КодПоказателяПоСоставу;
								ИмяЯчейки = ?(Пустаястрока(ТекОписатель.КодПоказателяПоФорме), КодПоказателя, ТекОписатель.КодПоказателяПоФорме); 
								ПризнакФормата = ТекОписатель.ТипДанныхПоказателя;
								
								Если НЕ ТекПок.Свойство(КодПоказателя + "_" + Формат(ном, "ЧГ="), ЗначениеПоля) Тогда
									Перейти ~ВыходИзДвойногоЦиклаВ;
								КонецЕсли;
								
								Если СтрНайти(ЧтоПроверять, "1") <> 0 Тогда
									Если РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение(ПредставлениеОтчета, ТекОписатель, ЗначениеПоля, Ложь, , ном, 1) = 0 Тогда
										СтрокаПустая = Ложь;
										Прервать;
									КонецЕсли;
								КонецЕсли;
								
							КонецЦикла;
							
							Если СтрокаПустая Тогда
								ном = ном + 1;
								Продолжить;
							КонецЕсли;
							//конец проверки
							
							Для Каждого СтрФормата Из СтрФорматаПодраздела Цикл
								
								ТекОписатель = СтрФормата.Значение;
								КодПоказателя = ТекОписатель.КодПоказателяПоСоставу;
								ИмяЯчейки = ?(Пустаястрока(ТекОписатель.КодПоказателяПоФорме), КодПоказателя, ТекОписатель.КодПоказателяПоФорме); 
								ПризнакФормата = ТекОписатель.ТипДанныхПоказателя;
								
								Если НЕ ТекПок.Свойство(КодПоказателя + "_" + Формат(ном, "ЧГ="), ЗначениеПоля) Тогда
									Перейти ~ВыходИзДвойногоЦиклаВ;
								КонецЕсли;
								
								Если СтрНайти(ЧтоПроверять, "1") <> 0 Тогда
									СтатусПроверки = Макс(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение(ПредставлениеОтчета, ТекОписатель, ЗначениеПоля, ВыводитьСообщения, НомСтр, ном, , ФормаВыводаСообщений), СтатусПроверки);
								КонецЕсли;
								
								Если СтрНайти(ЧтоПроверять, "2") <> 0 Тогда
									СтатусПроверки = Макс(РегламентированнаяОтчетность.ПроверитьНаКорректность(ПредставлениеОтчета, ТекОписатель, ЗначениеПоля, ВыводитьСообщения, НомСтр, ФормаВыводаСообщений), СтатусПроверки);
								КонецЕсли;
								
							КонецЦикла;
							
							ном = ном + 1;
							
						КонецЦикла;
						
						~ВыходИзДвойногоЦиклаВ:
						
					ИначеЕсли ТипПодраздела = "" Тогда//обычный подраздел
						
						ПодразделНайден = Ложь;
						ПервыйПроход = Истина;
						Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
							
							КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
							ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
							ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
													
							Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
								ПодразделНайден = Истина;
							КонецЕсли;
							
							Если НЕ ПодразделНайден Тогда
								Продолжить;
							КонецЕсли;
							
							Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
								Продолжить;
							КонецЕсли;
							
							Если ПервыйПроход Тогда
								ПервыйПроход = Ложь;
							Иначе	
								
								ВЗнач = Неопределено;
								Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
									Прервать;
								КонецЕсли;
									
							КонецЕсли;
							
							ЗначениеЯчейки = ТекПок[ИмяЯчейки];
							
							Если СтрНайти(ЧтоПроверять, "1") <> 0 Тогда
								СтатусПроверки = Макс(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение(ПредставлениеОтчета, СтрРаздела, ЗначениеЯчейки, ВыводитьСообщения, НомСтр, , , ФормаВыводаСообщений), СтатусПроверки);
							КонецЕсли;
							
							Если СтрНайти(ЧтоПроверять, "2") <> 0 Тогда
								СтатусПроверки = Макс(РегламентированнаяОтчетность.ПроверитьНаКорректность(ПредставлениеОтчета, СтрРаздела, ЗначениеЯчейки, ВыводитьСообщения, НомСтр, ФормаВыводаСообщений), СтатусПроверки);
							КонецЕсли;

						КонецЦикла;
						
					КонецЕсли;//многострочный или обычный подраздел
					
				КонецЦикла;//по подразделам
				
				Если ПечатаемыеЛисты <> Неопределено Тогда
					НовСтр = ПечатаемыеЛисты.Добавить();
					НовСтр.Имя = ИмяРаздела;
					НовСтр.НомерСтраницы = НомСтр;
				КонецЕсли;

			КонецЦикла;//по страницам
			
		ИначеЕсли Призн = "*" Тогда //раздел многостраничный
			
			ТаблицаСтраницРаздела = Неопределено;
			мСтруктураМногостраничныхРазделовВыгрузка.Свойство(ИмяРаздела, ТаблицаСтраницРаздела);
			
			НомСтр = 0;
			Для Каждого Стр2 из ТаблицаСтраницРаздела Цикл
				
				ТекПок = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(РегламентированнаяОтчетность.СкопированнаяСтруктура(Стр2.Данные));
				
				НомСтр = НомСтр + 1;
				
				СтрокиФорматаТекРаздела = мТаблицаСоставПоказателей.НайтиСтроки(Новый Структура("ИмяПоляТаблДокумента",ИмяРаздела));
				
				//проверка на пустую страницу раздела
				СтраницаПустая = 1;
				
				Для Каждого Стр3 Из СтрокиФорматаТекРаздела Цикл
					
					КодПоказателя = Стр3.КодПоказателяПоСоставу;
					ИмяЯчейки = ?(Пустаястрока(Стр3.КодПоказателяПоФорме), КодПоказателя, Стр3.КодПоказателяПоФорме); 
					ПризнакФормата = Стр3.ТипДанныхПоказателя;
					
					Если КодПоказателя="###" Тогда
						Продолжить;
					ИначеЕсли КодПоказателя="===" Тогда
						Прервать;	
					КонецЕсли;
					
					ЗначениеЯчейки = ТекПок[ИмяЯчейки];
					
					Если СтрНайти(ЧтоПроверять, "1") <> 0 Тогда
						СтраницаПустая = Мин(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение("", Стр3, ЗначениеЯчейки, Ложь, НомСтр, ,1 ), СтраницаПустая);
					КонецЕсли;
					
				КонецЦикла;
				
				Если СтраницаПустая = 1 Тогда
					Продолжить;
				КонецЕсли;
				//конец процерки на пустую страницу раздела
				
				Для Каждого Стр3 Из СтрокиФорматаТекРаздела Цикл
					
					КодПоказателя = Стр3.КодПоказателяПоСоставу;
					ИмяЯчейки = ?(Пустаястрока(Стр3.КодПоказателяПоФорме), КодПоказателя, Стр3.КодПоказателяПоФорме); 
					ПризнакФормата = Стр3.ТипДанныхПоказателя;
					
					Если КодПоказателя="###" Тогда
						Продолжить;
					ИначеЕсли КодПоказателя="===" Тогда
						Прервать;	
					КонецЕсли;
					
					ЗначениеЯчейки = ТекПок[ИмяЯчейки];
					
					Если СтрНайти(ЧтоПроверять, "1") <> 0 Тогда
						СтатусПроверки = Макс(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение(ПредставлениеОтчета, Стр3, ЗначениеЯчейки, ВыводитьСообщения, НомСтр, , , ФормаВыводаСообщений), СтатусПроверки);
					КонецЕсли;
					
					Если СтрНайти(ЧтоПроверять, "2") <> 0 Тогда
						СтатусПроверки = Макс(РегламентированнаяОтчетность.ПроверитьНаКорректность(ПредставлениеОтчета, Стр3, ЗначениеЯчейки, ВыводитьСообщения, НомСтр, ФормаВыводаСообщений), СтатусПроверки);
					КонецЕсли;
					
				КонецЦикла;
				
				Если ПечатаемыеЛисты <> Неопределено Тогда
					НовСтр = ПечатаемыеЛисты.Добавить();
					НовСтр.Имя = ИмяРаздела;
					НовСтр.НомерСтраницы = НомСтр;
				КонецЕсли;
				
			КонецЦикла;
			//конец выгрузки многостраничного раздела
			
		ИначеЕсли Призн = "/" Тогда //раздел многострочный
			
			ПокТекТабПоля = Неопределено;
			Если НЕ ПоказателиОтчета.Свойство("ПолеТабличногоДокумента" + ИмяРаздела, ПокТекТабПоля) Тогда
				Продолжить;
			КонецЕсли;
			
			ТекПок = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(РегламентированнаяОтчетность.СкопированнаяСтруктура(ПокТекТабПоля));
			Подразделы = РегламентированнаяОтчетность.РазбитьПоПодразделам(ИмяРаздела, мТаблицаСоставПоказателей, СтруктураРеквизитовФормы.МногострочныеИсключения);
			СтрокиФорматаТекРаздела = мТаблицаСоставПоказателей.НайтиСтроки(Новый Структура("ИмяПоляТаблДокумента",ИмяРаздела));
			
			Для Каждого Подраздел Из Подразделы Цикл
				НачПоказатель = Подраздел.Ключ;
				ТипПодраздела = Подраздел.Значение;
				
				//в многострочном разделе возможны только многострочные и обычные подразделы
				Если ТипПодраздела = "/" Тогда//многострочный подраздел
					
					СтрФорматаПодраздела = Новый СписокЗначений;
					ПодразделНайден = Ложь;
					ПервыйПроход = Истина;
					Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
						
						КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
						ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
						ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
						
						Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
							ПодразделНайден = Истина;
						КонецЕсли;
						
						Если НЕ ПодразделНайден Тогда
							Продолжить;
						КонецЕсли;
						
						Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
							Продолжить;
						КонецЕсли;
						
						Если ПервыйПроход Тогда
							ПервыйПроход = Ложь;
						Иначе	
							
							ВЗнач = Неопределено;
							Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
								Прервать;
							КонецЕсли;
								
						КонецЕсли;
						
						СтрФорматаПодраздела.Добавить(СтрРаздела);						
						
					КонецЦикла;
					//определили показатели подраздела. Теперь выведем их для каждой строки
					
					ном = 1;
					ЗначениеПоля = Неопределено;
					
					Пока Истина Цикл
						
						//проверка на то, что строка пустая
						СтрокаПустая = Истина;
						Для Каждого СтрФормата Из СтрФорматаПодраздела Цикл
							
							ТекОписатель = СтрФормата.Значение;
							КодПоказателя = ТекОписатель.КодПоказателяПоСоставу;
							ИмяЯчейки = ?(Пустаястрока(ТекОписатель.КодПоказателяПоФорме), КодПоказателя, ТекОписатель.КодПоказателяПоФорме); 
							ПризнакФормата = ТекОписатель.ТипДанныхПоказателя;
							
							Если НЕ ТекПок.Свойство(КодПоказателя + "_" + Формат(ном, "ЧГ="), ЗначениеПоля) Тогда
								Перейти ~ВыходИзДвойногоЦикла_В;
							КонецЕсли;
							
							Если СтрНайти(ЧтоПроверять, "1") <> 0 Тогда
								Если  РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение(ПредставлениеОтчета, ТекОписатель, ЗначениеПоля, Ложь, , ном, 1) = 0 Тогда
									СтрокаПустая = Ложь;
									Прервать;
								КонецЕсли;
							КонецЕсли;
							
						КонецЦикла;
						
						Если СтрокаПустая Тогда
							ном = ном + 1;
							Продолжить;
						КонецЕсли;
						
						Для Каждого СтрФормата Из СтрФорматаПодраздела Цикл
							
							ТекОписатель = СтрФормата.Значение;
							КодПоказателя = ТекОписатель.КодПоказателяПоСоставу;
							ИмяЯчейки = ?(Пустаястрока(ТекОписатель.КодПоказателяПоФорме), КодПоказателя, ТекОписатель.КодПоказателяПоФорме); 
							ПризнакФормата = ТекОписатель.ТипДанныхПоказателя;
							
							Если НЕ ТекПок.Свойство(КодПоказателя + "_" + Формат(ном, "ЧГ="), ЗначениеПоля) Тогда
								Перейти ~ВыходИзДвойногоЦикла_В;
							КонецЕсли;
							
							Если СтрНайти(ЧтоПроверять, "1") <> 0 Тогда
								СтатусПроверки = Макс(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение(ПредставлениеОтчета, ТекОписатель, ЗначениеПоля, ВыводитьСообщения, , ном, , ФормаВыводаСообщений), СтатусПроверки);
							КонецЕсли;
							
							Если СтрНайти(ЧтоПроверять, "2") <> 0 Тогда
								СтатусПроверки = Макс(РегламентированнаяОтчетность.ПроверитьНаКорректность(ПредставлениеОтчета, ТекОписатель, ЗначениеПоля, ВыводитьСообщения, , ФормаВыводаСообщений), СтатусПроверки);
							КонецЕсли;
							
						КонецЦикла;
						
						ном = ном + 1;
						
					КонецЦикла;
					
					~ВыходИзДвойногоЦикла_В:
					
				ИначеЕсли ТипПодраздела = "" Тогда//обычный подраздел
					
					ПодразделНайден = Ложь;
					ПервыйПроход = Истина;
					Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
						
						КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
						ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
						ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
												
						Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
							ПодразделНайден = Истина;
						КонецЕсли;
						
						Если НЕ ПодразделНайден Тогда
							Продолжить;
						КонецЕсли;
						
						Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
							Продолжить;
						КонецЕсли;
						
						Если ПервыйПроход Тогда
							ПервыйПроход = Ложь;
						Иначе	
							
							ВЗнач = Неопределено;
							Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
								Прервать;
							КонецЕсли;
								
						КонецЕсли;
						
						ЗначениеЯчейки = ТекПок[ИмяЯчейки];
						
						Если СтрНайти(ЧтоПроверять, "1") <> 0 Тогда
							СтатусПроверки = Макс(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение(ПредставлениеОтчета, СтрРаздела, ЗначениеЯчейки, ВыводитьСообщения, , , , ФормаВыводаСообщений), СтатусПроверки);
						КонецЕсли;
						
						Если СтрНайти(ЧтоПроверять, "2") <> 0 Тогда
							СтатусПроверки = Макс(РегламентированнаяОтчетность.ПроверитьНаКорректность(ПредставлениеОтчета, СтрРаздела, ЗначениеЯчейки, ВыводитьСообщения, , ФормаВыводаСообщений), СтатусПроверки);
						КонецЕсли;
						
					КонецЦикла;
					
				КонецЕсли;
				
			Конеццикла;
			
			Если ПечатаемыеЛисты <> Неопределено Тогда
				НовСтр = ПечатаемыеЛисты.Добавить();
				НовСтр.Имя = ИмяРаздела;
				НовСтр.НомерСтраницы = "";
			КонецЕсли;
			
		ИначеЕсли Призн = "" Тогда //просто раздел на одной странице без многострочных частей
			
			//выгрузка многостраничного раздела
			
			ПокТекТабПоля = Неопределено;
			Если НЕ ПоказателиОтчета.Свойство("ПолеТабличногоДокумента" + ИмяРаздела, ПокТекТабПоля) Тогда
				Продолжить;
			КонецЕсли;
			ТекПок = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(РегламентированнаяОтчетность.СкопированнаяСтруктура(ПокТекТабПоля));
			
			СтрокиФорматаТекРаздела = мТаблицаСоставПоказателей.НайтиСтроки(Новый Структура("ИмяПоляТаблДокумента",ИмяРаздела));
			Для Каждого Стр3 Из СтрокиФорматаТекРаздела Цикл
				
				КодПоказателя = Стр3.КодПоказателяПоСоставу;
				ИмяЯчейки = ?(Пустаястрока(Стр3.КодПоказателяПоФорме), КодПоказателя, Стр3.КодПоказателяПоФорме); 
				ПризнакФормата = Стр3.ТипДанныхПоказателя;
				
				Если КодПоказателя="###" Тогда
					Продолжить;
				ИначеЕсли КодПоказателя="===" Тогда
					Прервать;	
				КонецЕсли;
				
				ЗначениеЯчейки = ТекПок[ИмяЯчейки];
				
				Если СтрНайти(ЧтоПроверять, "1") <> 0 Тогда
					СтатусПроверки = Макс(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение(ПредставлениеОтчета, Стр3, ЗначениеЯчейки, ВыводитьСообщения, , , , ФормаВыводаСообщений), СтатусПроверки);
				КонецЕсли;
				
				Если СтрНайти(ЧтоПроверять, "2") <> 0 Тогда
					СтатусПроверки = Макс(РегламентированнаяОтчетность.ПроверитьНаКорректность(ПредставлениеОтчета, Стр3, ЗначениеЯчейки, ВыводитьСообщения, , ФормаВыводаСообщений), СтатусПроверки);
				КонецЕсли;
				
			КонецЦикла;
			
			Если ПечатаемыеЛисты <> Неопределено Тогда
				НовСтр = ПечатаемыеЛисты.Добавить();
				НовСтр.Имя = ИмяРаздела;
				НовСтр.НомерСтраницы = "";
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат (СтатусПроверки <> 1);
	
КонецФункции

&НаСервере
Функция ПолучитьДанныеФизЛиц(СтруктураМногостраничныхРазделов = Неопределено)
	
	Перем ТаблицаСтраницРаздела;
	Перем мСтруктураМногостраничныхРазд;
	
	ТаблСведенийФизЛиц = Новый ТаблицаЗначений();
	ТаблСведенийФизЛиц.Колонки.Добавить("ФизЛицоФИО");
	ТаблСведенийФизЛиц.Колонки.Добавить("ФизЛицСлТел");
	ТаблСведенийФизЛиц.Колонки.Добавить("ФизЛицДомТел");
	ТаблСведенийФизЛиц.Колонки.Добавить("ФизЛицДатаР");
	ТаблСведенийФизЛиц.Колонки.Добавить("ФизЛицМестоР");
	ТаблСведенийФизЛиц.Колонки.Добавить("ФизЛицПол");
	ТаблСведенийФизЛиц.Колонки.Добавить("ФизЛицГражданство");
	ТаблСведенийФизЛиц.Колонки.Добавить("ФизЛицКодГражд");
	ТаблСведенийФизЛиц.Колонки.Добавить("ФизЛицДокВид");
	ТаблСведенийФизЛиц.Колонки.Добавить("ФизЛицДокКод");
	ТаблСведенийФизЛиц.Колонки.Добавить("ФизЛицДокСерияНомер");
	ТаблСведенийФизЛиц.Колонки.Добавить("ФизЛицДокВыдан");
	ТаблСведенийФизЛиц.Колонки.Добавить("ФизЛицДокДата");
	ТаблСведенийФизЛиц.Колонки.Добавить("ФизЛицИндекс");
	ТаблСведенийФизЛиц.Колонки.Добавить("ФизЛицСубъект");
	ТаблСведенийФизЛиц.Колонки.Добавить("ФизЛицКодСуб");
	ТаблСведенийФизЛиц.Колонки.Добавить("ФизЛицРайон");
	ТаблСведенийФизЛиц.Колонки.Добавить("ФизЛицГород");
	ТаблСведенийФизЛиц.Колонки.Добавить("ФизЛицНП");
	ТаблСведенийФизЛиц.Колонки.Добавить("ФизЛицУлица");
	ТаблСведенийФизЛиц.Колонки.Добавить("ФизЛицДом");
	ТаблСведенийФизЛиц.Колонки.Добавить("ФизЛицКорпус");
	ТаблСведенийФизЛиц.Колонки.Добавить("ФизЛицКвартира");
	ТаблСведенийФизЛиц.Колонки.Добавить("ФизЛицИноАдрес");
	
	// Сведения по должностным лицам получим из страницы 2 титульного листа 
	
	Если СтруктураМногостраничныхРазделов <> Неопределено Тогда
		мСтруктураМногостраничныхРазд = РегламентированнаяОтчетность.СкопированнаяСтруктура(СтруктураМногостраничныхРазделов);
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	Если Не мСтруктураМногостраничныхРазд.Свойство("ФизЛица", ТаблицаСтраницРаздела) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ТаблицаСтраницРаздела.Количество() = 0 Тогда
		// создаем исходную таблицу значений многостраничных разделов
		СтрТаблицаСтраницы = ТаблицаСтраницРаздела.Добавить();
		СтрТаблицаСтраницы.АктивнаяСтраница = Истина;
		СтрТаблицаСтраницы.АвтоматическоеПредставление = Истина;
	КонецЕсли;

	Для Каждого СтрМногоСтраничныхРазделов Из мСтруктураМногостраничныхРазд.ФизЛица Цикл
		СтрДанных = СтрМногоСтраничныхРазделов.Данные;
		Если СтрДанных = Неопределено Тогда
			Прервать;
		КонецЕсли;
		Если ПустаяСтрока(СтрДанных.ФизЛицоФИО) Тогда
			Продолжить;
		КонецЕсли;
		СтрТаблСведенийФизЛиц = ТаблСведенийФизЛиц.Добавить();
		СтрТаблСведенийФизЛиц.ФизЛицоФИО = СтрДанных.ФизЛицоФИО;
		СтрТаблСведенийФизЛиц.ФизЛицСлТел = СтрДанных.ФизЛицСлТел;
		СтрТаблСведенийФизЛиц.ФизЛицДомТел = СтрДанных.ФизЛицДомТел;
		СтрТаблСведенийФизЛиц.ФизЛицДатаР = Формат(СтрДанных.ФизЛицДатаР, "ДФ=dd.MM.yyyy");
		СтрТаблСведенийФизЛиц.ФизЛицМестоР = СтрДанных.ФизЛицМестоР;
		СтрТаблСведенийФизЛиц.ФизЛицПол = ?(СтрДанных.ФизЛицПолЖ = "V", 2, 1);
		СтрТаблСведенийФизЛиц.ФизЛицГражданство = СтрДанных.ФизЛицГражданство;
		СтрТаблСведенийФизЛиц.ФизЛицКодГражд = СтрДанных.ФизЛицКодГражд;
		СтрТаблСведенийФизЛиц.ФизЛицДокВид = СтрДанных.ФизЛицДокВид;
		СтрТаблСведенийФизЛиц.ФизЛицДокКод = СтрДанных.ФизЛицДок;
		СтрТаблСведенийФизЛиц.ФизЛицДокСерияНомер = СтрДанных.ФизЛицДокСерияНомер;
		СтрТаблСведенийФизЛиц.ФизЛицДокВыдан = СтрДанных.ФизЛицДокВыдан;
		СтрТаблСведенийФизЛиц.ФизЛицДокДата = Формат(СтрДанных.ФизЛицДокДата, "ДФ=dd.MM.yyyy");
		СтрТаблСведенийФизЛиц.ФизЛицИндекс = СтрДанных.ФизЛицИнд;
		СтрТаблСведенийФизЛиц.ФизЛицСубъект = СтрДанных.ФизЛицСубъект;
		СтрТаблСведенийФизЛиц.ФизЛицКодСуб = СтрДанных.ФизЛицС;
		СтрТаблСведенийФизЛиц.ФизЛицРайон = СтрДанных.ФизЛицРайон;
		СтрТаблСведенийФизЛиц.ФизЛицГород = СтрДанных.ФизЛицГород;
		СтрТаблСведенийФизЛиц.ФизЛицНП = СтрДанных.ФизЛицНП;
		СтрТаблСведенийФизЛиц.ФизЛицУлица = СтрДанных.ФизЛицУлица;
		СтрТаблСведенийФизЛиц.ФизЛицДом = СтрДанных.ФизЛицДом;
		СтрТаблСведенийФизЛиц.ФизЛицКорпус = СтрДанных.ФизЛицКорпус;
		СтрТаблСведенийФизЛиц.ФизЛицКвартира = СтрДанных.ФизЛицКвартира;
		СтрТаблСведенийФизЛиц.ФизЛицИноАдрес = СтрДанных.ФизЛицИноАдрес;
	КонецЦикла;
	
	Возврат ТаблСведенийФизЛиц;
	
КонецФункции

&НаСервере
Функция ВычислитьПоказателиТитульногоЛистаИСведенияОФизЛицах(БратьИзФормы = Истина, ВыводитьСообщения = Истина)
	
	СтруктураМногостраничныхРазделов = Неопределено;
	
	Если БратьИзФормы Тогда
		
		// Не используется в этой выгрузке отбор из формы
		ПоказателиОтчета = Новый Структура();
		
	Иначе
		
		ДанныеОтчета = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить();
		
		ПоказателиОтчета = ДанныеОтчета.ПоказателиОтчета;
		
		СтруктураМногостраничныхРазделов = ДанныеОтчета.ДанныеМногостраничныхРазделов;

	КонецЕсли;
	
	ПоказателиТитульный = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(РегламентированнаяОтчетность.СкопированнаяСтруктура(ПоказателиОтчета.ПолеТабличногоДокументаТитульный));
	
	ДанныеФизЛиц = ПолучитьДанныеФизЛиц(СтруктураМногостраничныхРазделов);
	
	СписокДляВозврата = Новый СписокЗначений;
	СписокДляВозврата.Добавить(ПоказателиТитульный);
	СписокДляВозврата.Добавить(ДанныеФизЛиц);
	
	Возврат СписокДляВозврата;
	
КонецФункции

&НаСервере
Процедура ВыгрузитьТитульныйЛистИСведенияОФизЛицах(ТекстВыгрузки)
	
	Данные = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить();
	Орг = СтруктураРеквизитовФормы.мСохраненныйДок.Организация;
	Инф = ВычислитьПоказателиТитульногоЛистаИСведенияОФизЛицах(Ложь, Ложь);
	ПоказателиТитульный = Инф.Получить(0).Значение;
	ДанныеФизЛиц = Инф.Получить(1).Значение;
	
	ОргКПП = СокрЛП(ПоказателиТитульный.КПП1);
	ОргИНН = Орг.ИНН;
	ДокПредставляется = 331;
	Если НЕ ПустаяСтрока(ПоказателиТитульный.ТипОрг2) Тогда
		ДокПредставляется = 332;
	ИначеЕсли НЕ ПустаяСтрока(ПоказателиТитульный.ТипОрг3) Тогда
		ДокПредставляется = 333;
	КонецЕсли;
	
	НаимИОПол = Лев(ПоказателиТитульный.ИноОргНазв, 1000);
	ОргНазв = Лев(ПоказателиТитульный.ОргНазв, 1000);
	СтрИО = Лев(ПоказателиТитульный.ИноСтрана, 120);
	КодСтрИО = ПоказателиТитульный.ИноСтрКод;
	ТелИО = Лев(ПоказателиТитульный.ИноКТел, 20);
	
	ОргДиректор = ПоказателиТитульный.ОргДиректор;
	ИННРук = СокрЛП(ПоказателиТитульный.ИННРук);
	
	ОргБухгалтер = ПоказателиТитульный.ОргБухгалтер;
	ИННБух = СокрЛП(ПоказателиТитульный.ИННГБ);
	
	ОргУП = ПоказателиТитульный.ОргУП;
	ИННУпПред = СокрЛП(ПоказателиТитульный.ИННУП);
	
	ОргНазв = СокрЛП(ПоказателиТитульный.ОргНазв);
	ВидДок = ПоказателиТитульный.ВидДок;
	ПризнВидаДок = 1;
	Если НЕ ПустаяСтрока(ВидДок) Тогда
		ПризнВидаДок = Число(ВидДок);
	КонецЕсли;
	Попытка
		НомКорректировки = Число(ПоказателиТитульный.НомКоррект); 
	Исключение
		НомКорректировки = 0;
	Конецпопытки;
	
	РазницаМесяцев = Месяц(СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания) - Месяц (СтруктураРеквизитовФормы.мСохраненныйДок.ДатаНачала) + 1;
	
	ПризнОтчетногоПериода = ПоказателиТитульный.НалогПериод;
	НомерКварталаМесяца = СокрЛП(ПоказателиТитульный.НомКвартал);
	
	ЭтоПБОЮЛ = НЕ РегламентированнаяОтчетностьВызовСервера.ЭтоЮридическоеЛицо(Орг);
	Если НЕ ЭтоПБОЮЛ Тогда
		ТекстВыгрузки.ДобавитьСтроку("НаимИОПол:" + ?(ПустаяСтрока(НаимИОПол), "-", ВРег(СокрЛП(СтрЗаменить(НаимИОПол, Символы.ПС, "")))));
		ТекстВыгрузки.ДобавитьСтроку("НаимЮЛПол:" + ?(ПустаяСтрока(ОргНазв), "-", ВРег(СокрЛП(СтрЗаменить(ОргНазв, Символы.ПС, "")))));
		ТекстВыгрузки.ДобавитьСтроку("ИННЮЛ:" + СокрЛП(ОргИНН));  
		ТекстВыгрузки.ДобавитьСтроку("КППЮЛ:" + ?(ПустаяСтрока(ОргКПП), "-", СокрЛП(ОргКПП)));
		ТекстВыгрузки.ДобавитьСтроку("СтрИО:" + ?(ПустаяСтрока(СтрИО), "-", ВРЕГ(СокрЛП(СтрИО))));
		ТекстВыгрузки.ДобавитьСтроку("КодСтрИО:" + ?(ПустаяСтрока(КодСтрИО), "-", ВРЕГ(СокрЛП(КодСтрИО))));
		ТекстВыгрузки.ДобавитьСтроку("ТелИО:" + ?(ПустаяСтрока(ТелИО), "-", ВРЕГ(СокрЛП(Лев(ТелИО, 20)))));
		ТекстВыгрузки.ДобавитьСтроку("###");
		
		ТекстВыгрузки.ДобавитьСтроку("ФИОРук:" + РегламентированнаяОтчетность.СтрЗаменитьПробелы(ОргДиректор));
		Если ЗначениеЗаполнено(ИННРук) Тогда
			ТекстВыгрузки.ДобавитьСтроку("ИННРук:" + ИННРук);
		Иначе
			Для Каждого СведенияФизЛица Из ДанныеФизЛиц Цикл
				Если ОргДиректор <> СведенияФизЛица.ФизЛицоФИО Тогда
					Продолжить;
				КонецЕсли;
				ДобавитьНеобязательныйПоказатель(ТекстВыгрузки, "ТелРук:",        Лев(СведенияФизЛица.ФизЛицСлТел, 20));
				ДобавитьНеобязательныйПоказатель(ТекстВыгрузки, "ДатаРождРук:",   Лев(СведенияФизЛица.ФизЛицДатаР, 10));
				ДобавитьНеобязательныйПоказатель(ТекстВыгрузки, "МестоРождРук:",  Лев(СведенияФизЛица.ФизЛицМестоР, 128));
				ДобавитьНеобязательныйПоказатель(ТекстВыгрузки, "ПолРук:",        Лев(Строка(СведенияФизЛица.ФизЛицПол), 1));
				ДобавитьНеобязательныйПоказатель(ТекстВыгрузки, "ГраждРук:",      Лев(СведенияФизЛица.ФизЛицГражданство, 120));
				ДобавитьНеобязательныйПоказатель(ТекстВыгрузки, "КодГраждРук:",   Лев(СведенияФизЛица.ФизЛицКодГражд, 3));
				ДобавитьНеобязательныйПоказатель(ТекстВыгрузки, "УдЛичнРук:",     Лев(СведенияФизЛица.ФизЛицДокКод, 2)+ "," + Лев(СведенияФизЛица.ФизЛицДокСерияНомер, 25));
				ДобавитьНеобязательныйПоказатель(ТекстВыгрузки, "ВыдУдЛичнРук:",  Лев(СведенияФизЛица.ФизЛицДокВыдан, 1000));
				ДобавитьНеобязательныйПоказатель(ТекстВыгрузки, "ДатаУдЛичнРук:", Лев(СведенияФизЛица.ФизЛицДокДата, 10));
				АдрМЖРукРФ = "643"
				           + "," + Лев(СведенияФизЛица.ФизЛицИндекс, 6)
				           + "," + Лев(СведенияФизЛица.ФизЛицКодСуб, 2)
				           + "," + Лев(СведенияФизЛица.ФизЛицРайон, 40)
				           + "," + Лев(СведенияФизЛица.ФизЛицГород, 40)
				           + "," + Лев(СведенияФизЛица.ФизЛицНП, 40)
				           + "," + Лев(СведенияФизЛица.ФизЛицУлица, 40)
				           + "," + Лев(СведенияФизЛица.ФизЛицДом, 7)
				           + "," + Лев(СведенияФизЛица.ФизЛицКорпус, 7)
				           + "," + Лев(СведенияФизЛица.ФизЛицКвартира, 7);
				ДобавитьНеобязательныйПоказатель(ТекстВыгрузки, "АдрМЖРукРФ:",    АдрМЖРукРФ);
				ДобавитьНеобязательныйПоказатель(ТекстВыгрузки, "АдрМЖРукРез:",   Лев(СведенияФизЛица.ФизЛицИноАдрес, 128));
			КонецЦикла;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ОргБухгалтер) Тогда
			ТекстВыгрузки.ДобавитьСтроку("ФИОБух:" + РегламентированнаяОтчетность.СтрЗаменитьПробелы(ОргБухгалтер));
			Если ЗначениеЗаполнено(ИННБух) Тогда
				ТекстВыгрузки.ДобавитьСтроку("ИННБух:" + ИННБух);
			Иначе
				Для Каждого СведенияФизЛица Из ДанныеФизЛиц Цикл
					Если ОргБухгалтер <> СведенияФизЛица.ФизЛицоФИО Тогда
						Продолжить;
					КонецЕсли;
					ДобавитьНеобязательныйПоказатель(ТекстВыгрузки, "ТелБух:",        Лев(СведенияФизЛица.ФизЛицСлТел, 20));
					ДобавитьНеобязательныйПоказатель(ТекстВыгрузки, "КодГраждБух:",   Лев(СведенияФизЛица.ФизЛицКодГражд, 3));
					ДобавитьНеобязательныйПоказатель(ТекстВыгрузки, "УдЛичнБух:",     Лев(СведенияФизЛица.ФизЛицДокКод, 2)+ "," + Лев(СведенияФизЛица.ФизЛицДокСерияНомер, 25));
					ДобавитьНеобязательныйПоказатель(ТекстВыгрузки, "ВыдУдЛичнБух:",  Лев(СведенияФизЛица.ФизЛицДокВыдан, 1000));
					ДобавитьНеобязательныйПоказатель(ТекстВыгрузки, "ДатаУдЛичнБух:", Лев(СведенияФизЛица.ФизЛицДокДата, 10));
					АдрМЖБухРФ = "643"
					           + "," + Лев(СведенияФизЛица.ФизЛицИндекс, 6)
					           + "," + Лев(СведенияФизЛица.ФизЛицКодСуб, 2)
					           + "," + Лев(СведенияФизЛица.ФизЛицРайон, 40)
					           + "," + Лев(СведенияФизЛица.ФизЛицГород, 40)
					           + "," + Лев(СведенияФизЛица.ФизЛицНП, 40)
					           + "," + Лев(СведенияФизЛица.ФизЛицУлица, 40)
					           + "," + Лев(СведенияФизЛица.ФизЛицДом, 7)
					           + "," + Лев(СведенияФизЛица.ФизЛицКорпус, 7)
					           + "," + Лев(СведенияФизЛица.ФизЛицКвартира, 7);
					ДобавитьНеобязательныйПоказатель(ТекстВыгрузки, "АдрМЖБухРФ:",    АдрМЖБухРФ);
					ДобавитьНеобязательныйПоказатель(ТекстВыгрузки, "АдрМЖБухРез:",   Лев(СведенияФизЛица.ФизЛицИноАдрес, 128));
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		ТекстВыгрузки.ДобавитьСтроку("ФИОУпПред:" + РегламентированнаяОтчетность.СтрЗаменитьПробелы(ОргУП));
		Если ЗначениеЗаполнено(ИННУпПред) Тогда
			ТекстВыгрузки.ДобавитьСтроку("ИННУпПред:" + ИННУпПред);
		ИначеЕсли ЗначениеЗаполнено(ОргУП) Тогда
			Для Каждого СведенияФизЛица Из ДанныеФизЛиц Цикл
				Если ОргУП <> СведенияФизЛица.ФизЛицоФИО Тогда
					Продолжить;
				КонецЕсли;
				ДобавитьНеобязательныйПоказатель(ТекстВыгрузки, "ТелУпПред:",        Лев(СведенияФизЛица.ФизЛицСлТел, 20));
				ДобавитьНеобязательныйПоказатель(ТекстВыгрузки, "ДатаРождУпПред:",   Лев(СведенияФизЛица.ФизЛицДатаР, 10));
				ДобавитьНеобязательныйПоказатель(ТекстВыгрузки, "МестоРождУпПред:",  Лев(СведенияФизЛица.ФизЛицМестоР, 128));
				ДобавитьНеобязательныйПоказатель(ТекстВыгрузки, "ПолУпПред:",        Лев(Строка(СведенияФизЛица.ФизЛицПол), 1));
				ДобавитьНеобязательныйПоказатель(ТекстВыгрузки, "ГраждУпПред:",      Лев(СведенияФизЛица.ФизЛицГражданство, 120));
				ДобавитьНеобязательныйПоказатель(ТекстВыгрузки, "КодГраждУпПред:",   Лев(СведенияФизЛица.ФизЛицКодГражд, 3));
				ДобавитьНеобязательныйПоказатель(ТекстВыгрузки, "УдЛичнУпПред:",     Лев(СведенияФизЛица.ФизЛицДокКод, 2)+ "," + Лев(СведенияФизЛица.ФизЛицДокСерияНомер, 25));
				ДобавитьНеобязательныйПоказатель(ТекстВыгрузки, "ВыдУдЛичнУпПред:",  Лев(СведенияФизЛица.ФизЛицДокВыдан, 1000));
				ДобавитьНеобязательныйПоказатель(ТекстВыгрузки, "ДатаУдЛичнУпПред:", Лев(СведенияФизЛица.ФизЛицДокДата, 10));
				АдрМЖУпПредРФ = "643"
				+ "," + Лев(СведенияФизЛица.ФизЛицИндекс, 6)
				+ "," + Лев(СведенияФизЛица.ФизЛицКодСуб, 2)
				+ "," + Лев(СведенияФизЛица.ФизЛицРайон, 40)
				+ "," + Лев(СведенияФизЛица.ФизЛицГород, 40)
				+ "," + Лев(СведенияФизЛица.ФизЛицНП, 40)
				+ "," + Лев(СведенияФизЛица.ФизЛицУлица, 40)
				+ "," + Лев(СведенияФизЛица.ФизЛицДом, 7)
				+ "," + Лев(СведенияФизЛица.ФизЛицКорпус, 7)
				+ "," + Лев(СведенияФизЛица.ФизЛицКвартира, 7);
				ДобавитьНеобязательныйПоказатель(ТекстВыгрузки, "АдрМЖУпПредРФ:",    АдрМЖУпПредРФ);
				ДобавитьНеобязательныйПоказатель(ТекстВыгрузки, "АдрМЖУпПредРез:",   Лев(СведенияФизЛица.ФизЛицИноАдрес, 128));
			КонецЦикла;
		КонецЕсли;
		ТекстВыгрузки.ДобавитьСтроку("###");
	Иначе
		ТекстВыгрузки.ДобавитьСтроку("НаимИОПол:" + ?(ПустаяСтрока(НаимИОПол), "-", ВРег(СокрЛП(СтрЗаменить(НаимИОПол, Символы.ПС, "")))));
		ТекстВыгрузки.ДобавитьСтроку("ФИО:"   + РегламентированнаяОтчетность.СтрЗаменитьПробелы(ОргНазв)); 
		ТекстВыгрузки.ДобавитьСтроку("ИННФЛ:" + ОргИНН);  
		ТекстВыгрузки.ДобавитьСтроку("СтрИО:" + ?(ПустаяСтрока(СтрИО), "-", ВРЕГ(СокрЛП(СтрИО))));
		ТекстВыгрузки.ДобавитьСтроку("КодСтрИО:" + ?(ПустаяСтрока(КодСтрИО), "-", ВРЕГ(СокрЛП(КодСтрИО))));
		ТекстВыгрузки.ДобавитьСтроку("###");
	КонецЕсли;
	
	ТекстВыгрузки.ДобавитьСтроку("ПризФОтч:1");
	ТекстВыгрузки.ДобавитьСтроку("КНД:" + СтруктураРеквизитовФормы.КНД);
	ТекстВыгрузки.ДобавитьСтроку("НаимФОтч:" + ВРЕГ(СтруктураРеквизитовФормы.НаименованиеОтчетаДляВыгрузки));
	ТекстВыгрузки.ДобавитьСтроку("ВерФОтч:3.00004");
	ТекстВыгрузки.ДобавитьСтроку("ПериодВерОтч:04.04.2007,");
	ТекстВыгрузки.ДобавитьСтроку("ПризВидДок:"     + ПризнВидаДок);
	Если ПризнВидаДок = 3 Тогда
		ТекстВыгрузки.ДобавитьСтроку("НомерКорр:"      + НомКорректировки);
	Конецесли;     
	ТекстВыгрузки.ДобавитьСтроку("ПризПериодОтч:"  + ПризнОтчетногоПериода);
	ТекстВыгрузки.ДобавитьСтроку("НомерПериодОтч:" + НомерКварталаМесяца);
	ТекстВыгрузки.ДобавитьСтроку("ГодПериодОтч:"   + Формат(Год(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета),"ЧГ = 0"));
	ТекстВыгрузки.ДобавитьСтроку("ДокПредст:"      + ДокПредставляется);
	ТекстВыгрузки.ДобавитьСтроку("ОКЕИ:383"); 
	ТекстВыгрузки.ДобавитьСтроку("КолПокФОтч:0");//этот показатель далее меняется 
	ТекстВыгрузки.ДобавитьСтроку("###");
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьНеобязательныйПоказатель(ТекстВыгрузки, ИмяПоказателя, ЗначениеПоказателя)
	
	Если ЗначениеЗаполнено(ЗначениеПоказателя) Тогда
		ТекстВыгрузки.ДобавитьСтроку(ИмяПоказателя + ЗначениеПоказателя);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИнициализацияСоставаПоказателей()
	
	ОписаниеТиповСтрока15 = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(15));
	ОписаниеТиповСтрока50 = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(50));

	мТаблицаСоставПоказателей.Очистить();

	МакетСоставаПоказателей = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(СтруктураРеквизитовФормы.мСоставПоказателей);
	ОписаниеТиповСтрока100 = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100));
	Для Инд = 0 По МакетСоставаПоказателей.Области.Количество() - 1 Цикл
		ТекОбласть    = МакетСоставаПоказателей.Области[Инд];
		ИмяСтраницы   = ТекОбласть.Имя;
		Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
			КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
			ИмяПоказателя = КодПоказателя;
			Если КодПоказателя = "===" Тогда
				Прервать;
			КонецЕсли;
			Если Лев(КодПоказателя, 2) = "//" Тогда
				Продолжить;
			КонецЕсли;
			КодПоказателяПоФорме = СокрЛП(МакетСоставаПоказателей.Область(Ном, 2).Текст);  //заменена колонка 9
			ПризнМногострочность = СокрЛП(МакетСоставаПоказателей.Область(Ном, 3).Текст);
			ТипДанныхРеквизита   = СокрЛП(МакетСоставаПоказателей.Область(Ном, 4).Текст);
			стрКолСтрокИсходный  = СокрЛП(МакетСоставаПоказателей.Область(Ном, 5).Текст);
			стрВариантЗаполнения = РегламентированнаяОтчетность.ПолучитьВариантЗаполненияПоказателяРегОтчета(МакетСоставаПоказателей, Ном);
			ДопОписание			 = СокрЛП(МакетСоставаПоказателей.Область(Ном, 7).Текст);
			Обязательность  	 = СокрЛП(МакетСоставаПоказателей.Область(Ном, 8).Текст);
			КодПоказателяПоСтруктуре = СокрЛП(МакетСоставаПоказателей.Область(Ном, 9).Текст);
			
			НоваяСтрока = мТаблицаСоставПоказателей.Добавить();
			НоваяСтрока.ИмяПоляТаблДокумента     = ИмяСтраницы;
			НоваяСтрока.КодПоказателяПоСоставу   = КодПоказателя;
			НоваяСтрока.КодПоказателяПоФорме     = ?(ПустаяСтрока(КодПоказателяПоФорме), КодПоказателяПоСтруктуре, КодПоказателяПоФорме);
			НоваяСтрока.КодПоказателяПоСтруктуре = КодПоказателяПоСтруктуре;
			НоваяСтрока.ПризнМногострочности     = ПризнМногострочность;
			НоваяСтрока.ТипДанныхПоказателя      = ТипДанныхРеквизита;
			НоваяСтрока.ДопОписание			     = ДопОписание;
			НоваяСтрока.Обязательность		     = Обязательность;
			НоваяСтрока.НомерСтрокиВМакете       = ном;
		КонецЦикла;
	КонецЦикла;
	мТаблицаСоставПоказателей.Сортировать("НомерСтрокиВМакете");

КонецПроцедуры

&НаСервере
Процедура ВывестиПоказатель(ТекстВыгрузки, ЗначениеЯчейки, ИмяЯчейки, ПризнакФормата, ФорматВыгрузки)
	
	Если НЕ ЗначениеЗаполнено(ЗначениеЯчейки) И ПризнакФормата <> "Д" Тогда
		ТекстВыгрузки.ДобавитьСтроку(ИмяЯчейки + ":")
	Иначе
		Если ПризнакФормата = "Е" Тогда
			ТекстЯчейкиКакЧисло = Число(СокрЛ(ЗначениеЯчейки));
			Если ТекстЯчейкиКакЧисло = 0 Тогда
				ТекстВыгрузки.ДобавитьСтроку(ИмяЯчейки + ":")
			Иначе
				ТекстВыгрузки.ДобавитьСтроку(ИмяЯчейки + ":" + СокрЛ(Формат(ЗначениеЯчейки,ФорматВыгрузки)));
			КонецЕсли;
		ИначеЕсли ПризнакФормата = "Д" Тогда 
			Если НЕ ЗначениеЗаполнено(Дата(ЗначениеЯчейки)) = 1 Тогда
				ТекстВыгрузки.ДобавитьСтроку(ИмяЯчейки + ":");
			Иначе
				ТекстВыгрузки.ДобавитьСтроку(ИмяЯчейки + ":" + СокрЛ(Формат(ЗначениеЯчейки,"ДФ=dd.MM.yyyy; ДЛФ=D")));
			КонецЕсли;	
		Иначе
			Если ТипЗнч(ЗначениеЯчейки) = Тип("Число") Тогда
				Знч = Формат(ЗначениеЯчейки, "ЧРД=.; ЧГ=0");
			Иначе
				Знч = ЗначениеЯчейки;
			КонецЕсли;
			
			ТекстВыгрузки.ДобавитьСтроку(ИмяЯчейки + ":" + ВРЕГ(СокрЛП(Знч)));
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция РазделПуст(Разд, ПоказателиОтчета, СтруктураМногостраничныхРазделовВыгрузка)
	
	//Проверка на пустые разделы 
	ИмяРаздела = Разд.Ключ;
	Призн = Разд.Значение;
	
	СтраницаПустая = 1;
	
	Если Призн = "#" Тогда //раздел многостранично-многострочный
		
		ТаблицаСтраницРаздела = Неопределено;
		СтруктураМногостраничныхРазделовВыгрузка.Свойство(ИмяРаздела, ТаблицаСтраницРаздела);
		
		НомСтр = 0;
		
		Подразделы = РегламентированнаяОтчетность.РазбитьПоПодразделам(ИмяРаздела, мТаблицаСоставПоказателей, СтруктураРеквизитовФормы.МногострочныеИсключения);
		СтрокиФорматаТекРаздела = мТаблицаСоставПоказателей.НайтиСтроки(Новый Структура("ИмяПоляТаблДокумента", ИмяРаздела));
		
		Для Каждого Стр из ТаблицаСтраницРаздела Цикл
			
			ТекПок = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(РегламентированнаяОтчетность.СкопированнаяСтруктура(Стр.Данные));
			
			НомСтр = НомСтр + 1;
			
			Для Каждого Подраздел Из Подразделы Цикл
				НачПоказатель = Подраздел.Ключ;
				ТипПодраздела = Подраздел.Значение;
				
				//в многострочном разделе возможны только многострочные и обычные подразделы
				Если ТипПодраздела = "/" Тогда//многострочный подраздел
					
					СтрФорматаПодраздела = Новый СписокЗначений;
					ПодразделНайден = Ложь;
					ПервыйПроход = Истина;
					Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
						
						КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
						ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
						ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
						
						Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
							ПодразделНайден = Истина;
						КонецЕсли;
						
						Если НЕ ПодразделНайден Тогда
							Продолжить;
						КонецЕсли;
						
						Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
							Продолжить;
						КонецЕсли;
						
						Если ПервыйПроход Тогда
							ПервыйПроход = Ложь;
						Иначе	
							
							ВЗнач = Неопределено;
							Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
								Прервать;
							КонецЕсли;
								
						КонецЕсли;
						
						СтрФорматаПодраздела.Добавить(СтрРаздела);						
						
					КонецЦикла;
					//определили показатели подраздела. Теперь выведем их для каждой строки
					
					ном = 1;
					ЗначениеПоля = Неопределено;
					
					Пока Истина Цикл
						
						Для Каждого СтрФормата Из СтрФорматаПодраздела Цикл
							
							ТекОписатель = СтрФормата.Значение;
							КодПоказателя = ТекОписатель.КодПоказателяПоСоставу;
							ИмяЯчейки = ?(Пустаястрока(ТекОписатель.КодПоказателяПоФорме), КодПоказателя, ТекОписатель.КодПоказателяПоФорме); 
							ПризнакФормата = ТекОписатель.ТипДанныхПоказателя;
							
							Если НЕ ТекПок.Свойство(КодПоказателя + "_" + Формат(ном, "ЧГ="), ЗначениеПоля) Тогда
								Перейти ~ВыходИзДвойногоЦикла;
							КонецЕсли;
							
							СтраницаПустая = Мин(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение("", ТекОписатель, ЗначениеПоля, Ложь, НомСтр, ном, 1), СтраницаПустая);
							
						КонецЦикла;
						
						ном = ном + 1;
						
					КонецЦикла;
					
					~ВыходИзДвойногоЦикла:
					
				ИначеЕсли ТипПодраздела = "" Тогда//обычный подраздел
					
					ПодразделНайден = Ложь;
					ПервыйПроход = Истина;
					Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
						
						КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
						ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
						ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
												
						Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
							ПодразделНайден = Истина;
						КонецЕсли;
						
						Если НЕ ПодразделНайден Тогда
							Продолжить;
						КонецЕсли;
						
						Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
							Продолжить;
						КонецЕсли;
						
						Если ПервыйПроход Тогда
							ПервыйПроход = Ложь;
						Иначе	
							
							ВЗнач = Неопределено;
							Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
								Прервать;
							КонецЕсли;
								
						КонецЕсли;
						
						ЗначениеЯчейки = ТекПок[ИмяЯчейки];
						
						СтраницаПустая = Мин(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение("", СтрРаздела, ЗначениеЯчейки, Ложь, НомСтр, , 1), СтраницаПустая);
						
					КонецЦикла;
					
				КонецЕсли;//многострочный или обычный подраздел
				
			Конеццикла;//по подразделам

		КонецЦикла;//по страницам
		
	ИначеЕсли Призн = "*" Тогда //раздел многостраничный
		
		//выгрузка многостраничного раздела
		
		ТаблицаСтраницРаздела = Неопределено;
		СтруктураМногостраничныхРазделовВыгрузка.Свойство(ИмяРаздела, ТаблицаСтраницРаздела);
		
		НомСтр = 0;
		Для Каждого Стр2 из ТаблицаСтраницРаздела Цикл
			
			ТекПок = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(РегламентированнаяОтчетность.СкопированнаяСтруктура(Стр2.Данные));
			
			НомСтр = НомСтр + 1;
			
			СтрокиФорматаТекРаздела = мТаблицаСоставПоказателей.НайтиСтроки(Новый Структура("ИмяПоляТаблДокумента",ИмяРаздела));
			Для Каждого Стр3 Из СтрокиФорматаТекРаздела Цикл
				
				КодПоказателя = Стр3.КодПоказателяПоСоставу;
				ИмяЯчейки = ?(Пустаястрока(Стр3.КодПоказателяПоФорме), КодПоказателя, Стр3.КодПоказателяПоФорме); 
				ПризнакФормата = Стр3.ТипДанныхПоказателя;
				
				Если КодПоказателя="###" Тогда
					Продолжить;
				ИначеЕсли КодПоказателя="===" Тогда
					Прервать;	
				КонецЕсли;
				
				ЗначениеЯчейки = ТекПок[ИмяЯчейки];
				
				СтраницаПустая = Мин(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение("", Стр3, ЗначениеЯчейки, Ложь, НомСтр, , 1), СтраницаПустая);
				
			КонецЦикла;
			
		КонецЦикла;
		//конец выгрузки многостраничного раздела
		
	ИначеЕсли Призн = "/" Тогда //раздел многострочный
		
		ПокТекТабПоля = Неопределено;
		Если НЕ ПоказателиОтчета.Свойство("ПолеТабличногоДокумента" + ИмяРаздела, ПокТекТабПоля) Тогда
			Возврат Истина;
		КонецЕсли;
		ТекПок = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(РегламентированнаяОтчетность.СкопированнаяСтруктура(ПокТекТабПоля));
		Подразделы = РегламентированнаяОтчетность.РазбитьПоПодразделам(ИмяРаздела, мТаблицаСоставПоказателей, СтруктураРеквизитовФормы.МногострочныеИсключения);
		СтрокиФорматаТекРаздела = мТаблицаСоставПоказателей.НайтиСтроки(Новый Структура("ИмяПоляТаблДокумента",ИмяРаздела));
		
		Для Каждого Подраздел Из Подразделы Цикл
			НачПоказатель = Подраздел.Ключ;
			ТипПодраздела = Подраздел.Значение;
			
			//в многострочном разделе возможны только многострочные и обычные подразделы
			Если ТипПодраздела = "/" Тогда//многострочный подраздел
				
				СтрФорматаПодраздела = Новый СписокЗначений;
				ПодразделНайден = Ложь;
				ПервыйПроход = Истина;
				Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
					
					КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
					ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
					ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
					
					Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
						ПодразделНайден = Истина;
					КонецЕсли;
					
					Если НЕ ПодразделНайден Тогда
						Продолжить;
					КонецЕсли;
					
					Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
						Продолжить;
					КонецЕсли;
					
					Если ПервыйПроход Тогда
						ПервыйПроход = Ложь;
					Иначе	
						
						ВЗнач = Неопределено;
						Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
							Прервать;
						КонецЕсли;
							
					КонецЕсли;
					
					СтрФорматаПодраздела.Добавить(СтрРаздела);						
					
				КонецЦикла;
				//определили показатели подраздела. Теперь выведем их для каждой строки
				
				ном = 1;
				ЗначениеПоля = Неопределено;
				
				Пока Истина Цикл
					
					Для Каждого СтрФормата Из СтрФорматаПодраздела Цикл
						
						ТекОписатель = СтрФормата.Значение;
						КодПоказателя = ТекОписатель.КодПоказателяПоСоставу;
						ИмяЯчейки = ?(Пустаястрока(ТекОписатель.КодПоказателяПоФорме), КодПоказателя, ТекОписатель.КодПоказателяПоФорме); 
						ПризнакФормата = ТекОписатель.ТипДанныхПоказателя;
						
						Если НЕ ТекПок.Свойство(КодПоказателя + "_" + Формат(ном, "ЧГ="), ЗначениеПоля) Тогда
							Перейти ~ВыходИзДвойногоЦикла_;
						КонецЕсли;
						
						СтраницаПустая = Мин(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение("", ТекОписатель, ЗначениеПоля, Ложь, , ном, 1), СтраницаПустая);
							
					КонецЦикла;
					
					ном = ном + 1;
					
				КонецЦикла;
				
				~ВыходИзДвойногоЦикла_:
				
			ИначеЕсли ТипПодраздела = "" Тогда//обычный подраздел
				
				ПодразделНайден = Ложь;
				ПервыйПроход = Истина;
				Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
					
					КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
					ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
					ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
					
					Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
						ПодразделНайден = Истина;
					КонецЕсли;
					
					Если НЕ ПодразделНайден Тогда
						Продолжить;
					КонецЕсли;
					
					Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
						Продолжить;
					КонецЕсли;
					
					Если ПервыйПроход Тогда
						ПервыйПроход = Ложь;
					Иначе	
						
						ВЗнач = Неопределено;
						Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
							Прервать;
						КонецЕсли;
							
					КонецЕсли;
					
					ЗначениеЯчейки = ТекПок[ИмяЯчейки];
					
					СтраницаПустая = Мин(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение("", СтрРаздела, ЗначениеЯчейки, Ложь, , , 1), СтраницаПустая);
					
				КонецЦикла;
				
			КонецЕсли;
			
		Конеццикла;
		
	ИначеЕсли Призн = "" Тогда //просто раздел на одной странице без многострочных частей
		
		ПокТекТабПоля = Неопределено;
		Если НЕ ПоказателиОтчета.Свойство("ПолеТабличногоДокумента" + ИмяРаздела, ПокТекТабПоля) Тогда
			Возврат Истина;
		КонецЕсли;
		ТекПок = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(РегламентированнаяОтчетность.СкопированнаяСтруктура(ПокТекТабПоля));
		
		СтрокиФорматаТекРаздела = мТаблицаСоставПоказателей.НайтиСтроки(Новый Структура("ИмяПоляТаблДокумента",ИмяРаздела));
		Для Каждого Стр3 Из СтрокиФорматаТекРаздела Цикл
			
			КодПоказателя = Стр3.КодПоказателяПоСоставу;
			ИмяЯчейки = ?(Пустаястрока(Стр3.КодПоказателяПоФорме), КодПоказателя, Стр3.КодПоказателяПоФорме); 
			ПризнакФормата = Стр3.ТипДанныхПоказателя;
			
			Если КодПоказателя="###" Тогда
				Продолжить;
			ИначеЕсли КодПоказателя="===" Тогда
				Прервать;	
			КонецЕсли;
			
			ЗначениеЯчейки = ТекПок[ИмяЯчейки];
			
			СтраницаПустая = Мин(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение("", Стр3, ЗначениеЯчейки, Ложь, , , 1), СтраницаПустая);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Булево(СтраницаПустая);
	
КонецФункции

&НаСервере
Функция КлючИЗначениеПоКлючу(Ключ, Разделы)
	Для Каждого Эл Из Разделы Цикл
		Если Эл.Ключ = Ключ Тогда
			Возврат Эл;
		КонецЕсли;
	КонецЦикла;
	Возврат Неопределено;
КонецФункции

&НаСервере
Функция ПроверитьПоказатели() Экспорт
	
	ИнициализацияСоставаПоказателей();
	
	ТаблицаСообщений.Очистить();
	
	Возврат (ПроверитьТитульныйЛистИСведенияОФизЛицах(Ложь)
		   И ПроверитьКорректностьЗаполненияОКТМО()
		   И ПроверитьПредписанныеПоказатели(Ложь));
	
КонецФункции

&НаКлиенте
Процедура АктивизироватьЯчейку(Ячейка) Экспорт
	
	РегламентированнаяОтчетностьКлиент.АктивизироватьЯчейку(ЭтаФорма, Ячейка);
		
КонецПроцедуры

&НаСервере
Процедура СообщитьВТС(Описание, Раздел, ИмяЯчейки, ФИО = "")
	
	РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, Описание, Раздел, ИмяЯчейки, ФИО);
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьРезультирующийТекстВыгрузки(ТекстВыгрузки)
	
	Замена = Новый Соответствие;
	Замена.Вставить("П000020002000:", Истина);
	Замена.Вставить("П000020003000:", Истина);
	Замена.Вставить("П000030019004:", Истина);
	Замена.Вставить("П000030020004:", Истина);
	Замена.Вставить("П000030021004:", Истина);
	Замена.Вставить("П000030022004:", Истина);
	Замена.Вставить("П000030023004:", Истина);
	Замена.Вставить("П000030024004:", Истина);
	Замена.Вставить("П000030025004:", Истина);
	Замена.Вставить("П000030026004:", Истина);
	Замена.Вставить("П000030027004:", Истина);
	Замена.Вставить("П000030028004:", Истина);
	Замена.Вставить("П000030029004:", Истина);
	Замена.Вставить("П000030030004:", Истина);
	Замена.Вставить("П000030031004:", Истина);
	Замена.Вставить("П000030032004:", Истина);
	Замена.Вставить("П000030033004:", Истина);
	Замена.Вставить("П000030034004:", Истина);
	
	ОбрезаниеСтрок = Новый Соответствие;
	ОбрезаниеСтрок.Вставить("П000020006000", 120);
	ОбрезаниеСтрок.Вставить("П000020009000", 254);
	ОбрезаниеСтрок.Вставить("П000020012002", 120);
	ОбрезаниеСтрок.Вставить("П000020014000", 1000);
	ОбрезаниеСтрок.Вставить("П000020018000", 1000);
	ОбрезаниеСтрок.Вставить("П000030021002", 120);
	ОбрезаниеСтрок.Вставить("П000030026002", 120);
	ОбрезаниеСтрок.Вставить("П000030031002", 120);
	ОбрезаниеСтрок.Вставить("П000030034002", 120);
	ОбрезаниеСтрок.Вставить("П000050037001", 120);
	ОбрезаниеСтрок.Вставить("П000050037002", 1000);
	ОбрезаниеСтрок.Вставить("П000050037003", 25);
	ОбрезаниеСтрок.Вставить("П000060018002", 120);
	ОбрезаниеСтрок.Вставить("П000070033001", 120);
	ОбрезаниеСтрок.Вставить("П000070033002", 1000);
	ОбрезаниеСтрок.Вставить("П000070033003", 25);
	
	КолСтрок = ТекстВыгрузки.КоличествоСтрок();
	Для Сч = 1 По КолСтрок Цикл
		
		ТекИнд = КолСтрок - Сч + 1;
		ТекСтрока = ТекстВыгрузки.ПолучитьСтроку(ТекИнд);
		Тек13Симв = Лев(ТекСтрока, 13);
		
		Если Замена[ТекСтрока] = Истина Тогда
			ТекстВыгрузки.ЗаменитьСтроку(ТекИнд, Тек13Симв + ":0");
		КонецЕсли;
		
		ДлинаСтроки = ОбрезаниеСтрок[Тек13Симв];
		Если ДлинаСтроки <> Неопределено Тогда
			ТекстВыгрузки.ЗаменитьСтроку(ТекИнд, СокрЛП(Лев(ТекСтрока, 13 + 1 + ДлинаСтроки)));
		КонецЕсли;
		
		Если Тек13Симв = "П000020012003" Тогда
			КодВидаДеятельности = Сред(ТекСтрока, 15);
			Если СокрЛП(КодВидаДеятельности) = "," Тогда
				ТекстВыгрузки.ЗаменитьСтроку(ТекИнд, Тек13Симв + ":");
			ИначеЕсли НЕ ПустаяСтрока(КодВидаДеятельности) Тогда
				ТекстВыгрузки.ЗаменитьСтроку(ТекИнд, ТекСтрока + "," + КодВидаДеятельности);
			КонецЕсли;
		КонецЕсли;
		
		Если Тек13Симв = "П000070032001" Тогда
			ТекстВыгрузки.ЗаменитьСтроку(ТекИнд, Тек13Симв + ":" + СтрЗаменить(Сред(ТекСтрока, 18, 7), ".", ","));
		КонецЕсли;
			
	КонецЦикла;
	
Конецпроцедуры

&НаКлиенте
Функция УниверсальнаяВыгрузка(ТекстВыгрузки = Неопределено, ПроверятьБлокировки = Истина) Экспорт
	
	Перем ПараметрыВыгрузки;
	
	Если Модифицированность Тогда
		ТекстЗаголовка = ЗаголовокРегламентированногоОтчета(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета, СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
		
		ОргСтр = " (" + СтруктураРеквизитовФормы.Организация + ")";
		Если СтрНайти(ТекстЗаголовка, ОргСтр) = 0 Тогда
			ТекстЗаголовка = ТекстЗаголовка + ОргСтр;
		КонецЕсли;
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Отчет """ + ТекстЗаголовка + """ не сохранен.";
		Сообщение.Сообщить();
		
		Возврат Ложь;
	КонецЕсли;
	
	Если Открыта() Тогда
		Если СтруктураРеквизитовФормы.ЕдиницаИзмерения <> ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1 Тогда
			
			Сообщение = Новый СообщениеПользователю;

			Сообщение.Текст = НСтр("ru='Перед выгрузкой необходимо установить единицу измерения ""в рублях"".'");

			Сообщение.Сообщить();
			
			Возврат Ложь;
			
		КонецЕсли;
		Если СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения <> 0 Тогда
			
			Сообщение = Новый СообщениеПользователю;

			Сообщение.Текст = НСтр("ru='Перед выгрузкой необходимо установить точность ""0"".'");

			Сообщение.Сообщить();
			
			Возврат Ложь;
			
		КонецЕсли;
	КонецЕсли;
	
	Если СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки = Истина Тогда
		РегламентированнаяОтчетностьКлиент.ПроверитьКонтрольныеСоотношения(ЭтаФорма, ОбработкаКС, Истина);
	КонецЕсли;
	
	Если НЕ УниверсальнаяВыгрузкаНаСервере(ТекстВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
		
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Функция ЗаголовокРегламентированногоОтчета(ДатаНач, ДатаКон, Периодичность = Неопределено) Экспорт
		
	СтрПериодОтчета = ПредставлениеПериода( НачалоДня(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета), КонецДня(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета), "ФП = Истина" );
		
	Если СтрНайти(ЭтаФорма.Заголовок, СтрПериодОтчета) = 0 Тогда
		Возврат ЭтаФорма.Заголовок + " за " + СтрПериодОтчета;
	Иначе
		Возврат ЭтаФорма.Заголовок;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция УниверсальнаяВыгрузкаНаСервере(ТекстВыгрузки)
	
	Если НЕ ПроверитьПоказатели() Тогда
		Возврат Ложь;
	КонецЕсли;

	Данные = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить();
	
	Орг =  СтруктураРеквизитовФормы.мСохраненныйДок.Организация;
	Инф = ВычислитьПоказателиТитульногоЛистаИСведенияОФизЛицах(Ложь, Ложь);
	ПоказателиТитульный = Инф.Получить(0).Значение;
	
	//выводим общие сведения информационной части
	РегламентированнаяОтчетность.ВывестиОбщиеСведенияИнформационнойЧасти30(ТекстВыгрузки, Орг, , СтруктураРеквизитовФормы.мСохраненныйДок.КПП, СтруктураРеквизитовФормы.мСохраненныйДок.ДатаНачала, СтруктураРеквизитовФормы.мСохраненныйДок.КодНалоговогоОргана);
	
	//выводим сведения о физ. лицах и блок "описание форм отчетности"
	ВыгрузитьТитульныйЛистИСведенияОФизЛицах(ТекстВыгрузки);
	
	//выводим предписанные показатели
	УниверсальнаяВыгрузкаПредписанныхПоказателей(ТекстВыгрузки, Ложь);
	
	ОбработатьРезультирующийТекстВыгрузки(ТекстВыгрузки);
	
	НомСтрКолПокФОтч = РегламентированнаяОтчетность.НайтиКолПокФОтч(ТекстВыгрузки);
	Если НомСтрКолПокФОтч <> -1 Тогда
		ТекстВыгрузки.ЗаменитьСтроку(НомСтрКолПокФОтч, "КолПокФОтч:" + РегламентированнаяОтчетность.ПолучитьКоличествоПоказателей(ТекстВыгрузки));
	КонецЕсли;

	РегламентированнаяОтчетность.СтандартнаяПостобработкаТекстаВыгрузки(ТекстВыгрузки);
		
	Возврат Истина;
	
КонецФункции

&НаСервере
Процедура УниверсальнаяВыгрузкаПредписанныхПоказателей(ТекстВыгрузки, БратьИзФормы = Истина)
	
	ДанныеОтчета = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить();
	
	ПоказателиОтчета = ДанныеОтчета.ПоказателиОтчета;
	
	мСтруктураМногостраничныхРазделовВыгрузка = ДанныеОтчета.ДанныеМногостраничныхРазделов;
	
	ИмяРазделаПред = "";
	Разделы = Новый Структура;
	
	Показатели = ДанныеФормыВЗначение(мТаблицаСоставПоказателей, Тип("ТаблицаЗначений"));
	Показатели.Свернуть("ИмяПоляТаблДокумента, ПризнМногострочности","");
	КоличествоСтрок = Показатели.Количество();
	// Устанавливаем в таблице нужный порядок выгрузки разделов
	Для Инд = 0 По КоличествоСтрок - 1 Цикл
		СтрокаТаблицы = Показатели[0];
		Если СтрНайти(СтрокаТаблицы.ИмяПоляТаблДокумента, "Раздел1_") > 0 Тогда
			Прервать;
		КонецЕсли; 
		Показатели.Сдвинуть(СтрокаТаблицы, КоличествоСтрок - 1);
	КонецЦикла; 
	
	ТекСостРазд = Неопределено;
	
	ФорматВыгрузки = "ЧЦ=15; ЧДЦ=0; ЧГ=0";
	
	Для Каждого Стр Из Показатели Цикл
		
		ИмяРаздела = Стр.ИмяПоляТаблДокумента;
		Разделы.Свойство(ИмяРаздела, ТекСостРазд);
		Призн = Стр.ПризнМногострочности;
		
		Если Призн = "*" Тогда
			Если (ТекСостРазд = "/") Тогда
				Разделы.Вставить(ИмяРаздела, "#");
			ИначеЕсли (ТекСостРазд = Неопределено) ИЛИ (ТекСостРазд = "") Тогда
				Разделы.Вставить(ИмяРаздела, "*");
			КонецЕсли;
		ИначеЕсли Призн = "/" Тогда
			Если (ТекСостРазд = "*") Тогда
				Разделы.Вставить(ИмяРаздела, "#");
			ИначеЕсли (ТекСостРазд = Неопределено) ИЛИ (ТекСостРазд = "")Тогда
				Разделы.Вставить(ИмяРаздела, "/");
			КонецЕсли;
		ИначеЕсли Призн = "#" Тогда
			Продолжить;
		ИначеЕсли Призн = "" Тогда
			Если ТекСостРазд = Неопределено Тогда
				Разделы.Вставить(ИмяРаздела, "");
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	//Выгружаем поочередно разделы
	Для Каждого Разд Из Разделы Цикл
		ИмяРаздела = Разд.Ключ;
		Призн = Разд.Значение;
		
		Если ИмяРаздела = "Раздел11" ИЛИ ИмяРаздела = "Раздел11_Прил1" ИЛИ ИмяРаздела = "Раздел11_Прил2" Тогда
			Продолжить;
		КонецЕсли;
		
		ПустойРаздел = РазделПуст(Разд, ПоказателиОтчета, мСтруктураМногостраничныхРазделовВыгрузка);
		
		Если ПустойРаздел И СтруктураРеквизитовФормы.ОбязРазделов.НайтиПоЗначению(ИмяРаздела) = Неопределено Тогда
			//Если раздел пустой и необязательный для выгрузки, то продолжим
			Продолжить;
		КонецЕсли;
		
		Если Призн = "#" Тогда //раздел многостранично-многострочный
			
			ТаблицаСтраницРаздела = Неопределено;
			мСтруктураМногостраничныхРазделовВыгрузка.Свойство(ИмяРаздела, ТаблицаСтраницРаздела);
			
			НомСтр = 0;
			
			Подразделы = РегламентированнаяОтчетность.РазбитьПоПодразделам(ИмяРаздела, мТаблицаСоставПоказателей, СтруктураРеквизитовФормы.МногострочныеИсключения);
			СтрокиФорматаТекРаздела = мТаблицаСоставПоказателей.НайтиСтроки(Новый Структура("ИмяПоляТаблДокумента",ИмяРаздела));
			
			Для Каждого Стр из ТаблицаСтраницРаздела Цикл
				
				//проверка на пустую страницу раздела
				ТекПок = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(РегламентированнаяОтчетность.СкопированнаяСтруктура(Стр.Данные));
				
				НомСтр = НомСтр + 1;
				
				СтраницаПустая = 1;
				
				Для Каждого Подраздел Из Подразделы Цикл
					НачПоказатель = Подраздел.Ключ;
					ТипПодраздела = Подраздел.Значение;
					
					//в многострочном разделе возможны только многострочные и обычные подразделы
					Если ТипПодраздела = "/" Тогда//многострочный подраздел
						
						СтрФорматаПодраздела = Новый СписокЗначений;
						ПодразделНайден = Ложь;
						ПервыйПроход = Истина;
						Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
							
							КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
							ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
							ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
							
							Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
								ПодразделНайден = Истина;
							КонецЕсли;
							
							Если НЕ ПодразделНайден Тогда
								Продолжить;
							КонецЕсли;
							
							Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
								Продолжить;
							КонецЕсли;
							
							Если ПервыйПроход Тогда
								ПервыйПроход = Ложь;
							Иначе	
								
								ВЗнач = Неопределено;
								Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
									Прервать;
								КонецЕсли;
									
							КонецЕсли;
							
							СтрФорматаПодраздела.Добавить(СтрРаздела);						
							
						КонецЦикла;
						//определили показатели подраздела. Теперь выведем их для каждой строки
						
						ном = 1;
						ЗначениеПоля = Неопределено;
						
						Пока Истина Цикл
							
							Для Каждого СтрФормата Из СтрФорматаПодраздела Цикл
								
								ТекОписатель = СтрФормата.Значение;
								КодПоказателя = ТекОписатель.КодПоказателяПоСоставу;
								ИмяЯчейки = ?(Пустаястрока(ТекОписатель.КодПоказателяПоФорме), КодПоказателя, ТекОписатель.КодПоказателяПоФорме); 
								ПризнакФормата = ТекОписатель.ТипДанныхПоказателя;
								
								Если НЕ ТекПок.Свойство(ИмяЯчейки + "_" + Формат(ном, "ЧГ="), ЗначениеПоля) Тогда
									Перейти ~ВыходИзДвойногоЦикла__;
								КонецЕсли;
								
								СтраницаПустая = Мин(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение("", ТекОписатель, ЗначениеПоля, Ложь, НомСтр, ном, 1), СтраницаПустая);
								
							КонецЦикла;
							
							ном = ном + 1;
							
						КонецЦикла;
						
						~ВыходИзДвойногоЦикла__:
						
					ИначеЕсли ТипПодраздела = "" Тогда//обычный подраздел
						
						ПодразделНайден = Ложь;
						ПервыйПроход = Истина;
						Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
							
							КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
							ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
							ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
													
							Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
								ПодразделНайден = Истина;
							КонецЕсли;
							
							Если НЕ ПодразделНайден Тогда
								Продолжить;
							КонецЕсли;
							
							Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
								Продолжить;
							КонецЕсли;
							
							Если ПервыйПроход Тогда
								ПервыйПроход = Ложь;
							Иначе	
								
								ВЗнач = Неопределено;
								Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
									Прервать;
								КонецЕсли;
									
							КонецЕсли;
							
							ЗначениеЯчейки = ТекПок[ИмяЯчейки];
							
							СтраницаПустая = Мин(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение("", СтрРаздела, ЗначениеЯчейки, Ложь, НомСтр, , 1), СтраницаПустая);
							
						КонецЦикла;
						
					КонецЕсли;//многострочный или обычный подраздел
					
				Конеццикла;//по подразделам
				
				Если (СтраницаПустая = 1) И (НЕ ПустойРаздел) Тогда
					Продолжить;
				КонецЕсли;
				//конец проверки на пустую страницу раздела
				
				Для Каждого Подраздел Из Подразделы Цикл
					НачПоказатель = Подраздел.Ключ;
					ТипПодраздела = Подраздел.Значение;
					
					//в многострочном разделе возможны только многострочные и обычные подразделы
					Если ТипПодраздела = "/" Тогда//многострочный подраздел
						
						СтрФорматаПодраздела = Новый СписокЗначений;
						ПодразделНайден = Ложь;
						ПервыйПроход = Истина;
						Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
							
							КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
							ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
							ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
							
							Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
								ПодразделНайден = Истина;
							КонецЕсли;
							
							Если НЕ ПодразделНайден Тогда
								Продолжить;
							КонецЕсли;
							
							Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
								Продолжить;
							КонецЕсли;
							
							Если ПервыйПроход Тогда
								ПервыйПроход = Ложь;
							Иначе	
								
								ВЗнач = Неопределено;
								Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
									Прервать;
								КонецЕсли;
									
							КонецЕсли;
							
							СтрФорматаПодраздела.Добавить(СтрРаздела);						
							
						КонецЦикла;
						//определили показатели подраздела. Теперь выведем их для каждой строки
						
						ном = 1;
						ЗначениеПоля = Неопределено;
						
						Пока Истина Цикл
							
							СтрокаПустая = 1;
							
							Для Каждого СтрФормата Из СтрФорматаПодраздела Цикл
								
								ТекОписатель = СтрФормата.Значение;
								КодПоказателя = ТекОписатель.КодПоказателяПоСоставу;
								ИмяЯчейки = ?(Пустаястрока(ТекОписатель.КодПоказателяПоФорме), КодПоказателя, ТекОписатель.КодПоказателяПоФорме); 
								ПризнакФормата = ТекОписатель.ТипДанныхПоказателя;
								
								Если НЕ ТекПок.Свойство(ИмяЯчейки + "_" + Формат(ном, "ЧГ="), ЗначениеПоля) Тогда
									Перейти ~ВыходИзДвойногоЦикла;
								КонецЕсли;
								
								СтрокаПустая = Мин(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение("", ТекОписатель, ЗначениеПоля, Ложь, НомСтр, ном, 1), СтрокаПустая);
								
							КонецЦикла;
							
							Если СтрокаПустая = 1 И ном <> 1 Тогда
								ном = ном + 1;
								Продолжить;
							КонецЕсли;
							
							Для Каждого СтрФормата Из СтрФорматаПодраздела Цикл
								
								ТекОписатель = СтрФормата.Значение;
								КодПоказателя = ТекОписатель.КодПоказателяПоСоставу;
								ИмяЯчейки = ?(Пустаястрока(ТекОписатель.КодПоказателяПоФорме), КодПоказателя, ТекОписатель.КодПоказателяПоФорме); 
								ПризнакФормата = ТекОписатель.ТипДанныхПоказателя;
								
								Если НЕ ТекПок.Свойство(ИмяЯчейки + "_" + Формат(ном, "ЧГ="), ЗначениеПоля) Тогда
									Перейти ~ВыходИзДвойногоЦикла;
								КонецЕсли;
								
								ВывестиПоказатель(ТекстВыгрузки, ЗначениеПоля, КодПоказателя, ПризнакФормата, ФорматВыгрузки);
								
							КонецЦикла;
							
							ТекстВыгрузки.ДобавитьСтроку("###");
							ном = ном + 1;
							
						КонецЦикла;
						
						~ВыходИзДвойногоЦикла:
						
					ИначеЕсли ТипПодраздела = "" Тогда//обычный подраздел
						
						ПодразделНайден = Ложь;
						ПервыйПроход = Истина;
						Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
							
							КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
							ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
							ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
													
							Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
								ПодразделНайден = Истина;
							КонецЕсли;
							
							Если НЕ ПодразделНайден Тогда
								Продолжить;
							КонецЕсли;
							
							Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
								Продолжить;
							КонецЕсли;
							
							Если ПервыйПроход Тогда
								ПервыйПроход = Ложь;
							Иначе	
								
								ВЗнач = Неопределено;
								Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
									Прервать;
								КонецЕсли;
									
							КонецЕсли;
							
							ЗначениеЯчейки = ТекПок[ИмяЯчейки];
							
							ВывестиПоказатель(ТекстВыгрузки, ЗначениеЯчейки, КодПоказателя, ПризнакФормата, ФорматВыгрузки);
							
						КонецЦикла;
						
						ТекстВыгрузки.ДобавитьСтроку("###");
						
					КонецЕсли;//многострочный или обычный подраздел
					
				Конеццикла;//по подразделам

			КонецЦикла;//по страницам
			
		ИначеЕсли Призн = "*" Тогда //раздел многостраничный
			
			ТаблицаСтраницРаздела = Неопределено;
			мСтруктураМногостраничныхРазделовВыгрузка.Свойство(ИмяРаздела, ТаблицаСтраницРаздела);
			
			НомСтр = 0;
			Для Каждого Стр2 из ТаблицаСтраницРаздела Цикл
				
				ТекПок = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(РегламентированнаяОтчетность.СкопированнаяСтруктура(Стр2.Данные));
				
				НомСтр = НомСтр + 1;
				
				СтрокиФорматаТекРаздела = мТаблицаСоставПоказателей.НайтиСтроки(Новый Структура("ИмяПоляТаблДокумента",ИмяРаздела));
				
				//проверка на пустую страницу раздела
				СтраницаПустая = 1;
				
				Для Каждого Стр3 Из СтрокиФорматаТекРаздела Цикл
					
					КодПоказателя = Стр3.КодПоказателяПоСоставу;
					ИмяЯчейки = ?(Пустаястрока(Стр3.КодПоказателяПоФорме), КодПоказателя, Стр3.КодПоказателяПоФорме); 
					ПризнакФормата = Стр3.ТипДанныхПоказателя;
					
					Если КодПоказателя="###" Тогда
						Продолжить;
					ИначеЕсли КодПоказателя="===" Тогда
						Прервать;	
					КонецЕсли;
					
					ЗначениеЯчейки = ТекПок[ИмяЯчейки];
					
					СтраницаПустая = Мин(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение("", Стр3, ЗначениеЯчейки, Ложь, НомСтр, ,1 ), СтраницаПустая);
					
				КонецЦикла;
				
				Если (СтраницаПустая = 1) И (Не ПустойРаздел) Тогда
					Продолжить;
				КонецЕсли;
				//конец процерки на пустую страницу раздела
				
				
				Для Каждого Стр3 Из СтрокиФорматаТекРаздела Цикл
					
					КодПоказателя = Стр3.КодПоказателяПоСоставу;
					ИмяЯчейки = ?(Пустаястрока(Стр3.КодПоказателяПоФорме), КодПоказателя, Стр3.КодПоказателяПоФорме); 
					ПризнакФормата = Стр3.ТипДанныхПоказателя;
					
					Если КодПоказателя="###" Тогда
						Продолжить;
					ИначеЕсли КодПоказателя="===" Тогда
						Прервать;	
					КонецЕсли;
					
					ЗначениеЯчейки = ТекПок[ИмяЯчейки];
					ВывестиПоказатель(ТекстВыгрузки, ЗначениеЯчейки, КодПоказателя, ПризнакФормата, ФорматВыгрузки);
					
				КонецЦикла;
				
				ТекстВыгрузки.ДобавитьСтроку("###");
				
			КонецЦикла;
			//конец выгрузки многостраничного раздела
			
		ИначеЕсли Призн = "/" Тогда //раздел многострочный
			
			ПокТекТабПоля = Неопределено;
			Если НЕ ПоказателиОтчета.Свойство("ПолеТабличногоДокумента" + ИмяРаздела, ПокТекТабПоля) Тогда
				Продолжить;
			КонецЕсли;
			ТекПок = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(РегламентированнаяОтчетность.СкопированнаяСтруктура(ПокТекТабПоля));
			Подразделы = РегламентированнаяОтчетность.РазбитьПоПодразделам(ИмяРаздела, мТаблицаСоставПоказателей, СтруктураРеквизитовФормы.МногострочныеИсключения);
			СтрокиФорматаТекРаздела = мТаблицаСоставПоказателей.НайтиСтроки(Новый Структура("ИмяПоляТаблДокумента",ИмяРаздела));
			
			Для Каждого Подраздел Из Подразделы Цикл
				НачПоказатель = Подраздел.Ключ;
				ТипПодраздела = Подраздел.Значение;
				
				//в многострочном разделе возможны только многострочные и обычные подразделы
				Если ТипПодраздела = "/" Тогда//многострочный подраздел
					
					СтрФорматаПодраздела = Новый СписокЗначений;
					ПодразделНайден = Ложь;
					ПервыйПроход = Истина;
					Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
						
						КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
						ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
						ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
						
						Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
							ПодразделНайден = Истина;
						КонецЕсли;
						
						Если НЕ ПодразделНайден Тогда
							Продолжить;
						КонецЕсли;
						
						Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
							Продолжить;
						КонецЕсли;
						
						Если ПервыйПроход Тогда
							ПервыйПроход = Ложь;
						Иначе	
							
							ВЗнач = Неопределено;
							Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
								Прервать;
							КонецЕсли;
								
						КонецЕсли;
						
						СтрФорматаПодраздела.Добавить(СтрРаздела);
						
					КонецЦикла;
					//определили показатели подраздела. Теперь выведем их для каждой строки
					
					ном = 1;
					ЗначениеПоля = Неопределено;
					
					Пока Истина Цикл
						
						СтрокаПустая = 1;
						
						Для Каждого СтрФормата Из СтрФорматаПодраздела Цикл
							
							ТекОписатель = СтрФормата.Значение;
							КодПоказателя = ТекОписатель.КодПоказателяПоСоставу;
							ИмяЯчейки = ?(Пустаястрока(ТекОписатель.КодПоказателяПоФорме), КодПоказателя, ТекОписатель.КодПоказателяПоФорме); 
							ПризнакФормата = ТекОписатель.ТипДанныхПоказателя;
							
							Если НЕ ТекПок.Свойство(ИмяЯчейки + "_" + Формат(ном, "ЧГ="), ЗначениеПоля) Тогда
								Перейти ~ВыходИзДвойногоЦикла_;
							КонецЕсли;
							
							СтрокаПустая = Мин(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение("", ТекОписатель, ЗначениеПоля, Ложь, Неопределено, ном, 1), СтрокаПустая);							
							
						КонецЦикла;
						
						Если СтрокаПустая = 1 И ном <> 1 Тогда
							ном = ном + 1;
							Продолжить;
						КонецЕсли;
						
						Для Каждого СтрФормата Из СтрФорматаПодраздела Цикл
							
							ТекОписатель = СтрФормата.Значение;
							КодПоказателя = ТекОписатель.КодПоказателяПоСоставу;
							ИмяЯчейки = ?(Пустаястрока(ТекОписатель.КодПоказателяПоФорме), КодПоказателя, ТекОписатель.КодПоказателяПоФорме); 
							ПризнакФормата = ТекОписатель.ТипДанныхПоказателя;
							
							
							Если НЕ ТекПок.Свойство(ИмяЯчейки + "_" + Формат(ном, "ЧГ="), ЗначениеПоля) Тогда
								Перейти ~ВыходИзДвойногоЦикла_;
							КонецЕсли;
							
							ВывестиПоказатель(ТекстВыгрузки, ЗначениеПоля, КодПоказателя, ПризнакФормата, ФорматВыгрузки);
							
						КонецЦикла;
						
						ТекстВыгрузки.ДобавитьСтроку("###");						
						ном = ном + 1;
						
					КонецЦикла;
					
					~ВыходИзДвойногоЦикла_:
					
				ИначеЕсли ТипПодраздела = "" Тогда//обычный подраздел
					
					ПодразделНайден = Ложь;
					ПервыйПроход = Истина;
					Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
						
						КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
						ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
						ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
												
						Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
							ПодразделНайден = Истина;
						КонецЕсли;
						
						Если НЕ ПодразделНайден Тогда
							Продолжить;
						КонецЕсли;
						
						Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
							Продолжить;
						КонецЕсли;
						
						Если ПервыйПроход Тогда
							ПервыйПроход = Ложь;
						Иначе	
							
							ВЗнач = Неопределено;
							Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
								Прервать;
							КонецЕсли;
								
						КонецЕсли;
						
						ЗначениеЯчейки = ТекПок[ИмяЯчейки];
						
						ВывестиПоказатель(ТекстВыгрузки, ЗначениеЯчейки, КодПоказателя, ПризнакФормата, ФорматВыгрузки);
						
					КонецЦикла;
					
					ТекстВыгрузки.ДобавитьСтроку("###");
					
				КонецЕсли;
				
			Конеццикла;
			
		ИначеЕсли Призн = "" Тогда //просто раздел на одной странице без многострочных частей
			
			//выгрузка многостраничного раздела
			
			ПокТекТабПоля = Неопределено;
			Если НЕ ПоказателиОтчета.Свойство("ПолеТабличногоДокумента" + ИмяРаздела, ПокТекТабПоля) Тогда
				Продолжить;
			КонецЕсли;
			ТекПок = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(РегламентированнаяОтчетность.СкопированнаяСтруктура(ПокТекТабПоля));
			
			СтрокиФорматаТекРаздела = мТаблицаСоставПоказателей.НайтиСтроки(Новый Структура("ИмяПоляТаблДокумента",ИмяРаздела));
			Для Каждого Стр3 Из СтрокиФорматаТекРаздела Цикл
				
				КодПоказателя = Стр3.КодПоказателяПоСоставу;
				ИмяЯчейки = ?(Пустаястрока(Стр3.КодПоказателяПоФорме), КодПоказателя, Стр3.КодПоказателяПоФорме); 
				ПризнакФормата = Стр3.ТипДанныхПоказателя;
				
				Если КодПоказателя="###" Тогда
					Продолжить;
				ИначеЕсли КодПоказателя="===" Тогда
					Прервать;	
				КонецЕсли;
				
				ЗначениеЯчейки = ТекПок[ИмяЯчейки];
				
				Если КодПоказателя = "П000110002000" Тогда
					ТекстВыгрузки.ДобавитьСтроку("###");
				КонецЕсли; 
				
				Если Лев(КодПоказателя, 1) = "П" Тогда
					ВывестиПоказатель(ТекстВыгрузки, ЗначениеЯчейки, КодПоказателя, ПризнакФормата, ФорматВыгрузки);
				КонецЕсли; 
				
			КонецЦикла;
			
			ТекстВыгрузки.ДобавитьСтроку("###");
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСДвухмернымШтрихкодомPDF417(Команда)
	
	РегламентированнаяОтчетностьКлиент.ВывестиМашиночитаемуюФорму(ЭтаФорма, Команда.Имя);
		
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьБланк(Команда)
	
	Отказ = Ложь;
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("Команда", Команда);
	ОписаниеОповещения = Новый ОписаниеОповещения("ПоказатьБланкЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередПечатьюРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьБланкЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;

	Команда = ДополнительныеПараметры.Команда;
		
	Печать(Команда.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура Печать(ВидПечати, НеИзФормыОтчета = Ложь) Экспорт
	
	Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1. Формируется печатная форма...'"), ЭтаФорма.Заголовок), , , БиблиотекаКартинок.Печать);
	
	Если СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки = Истина Тогда
		РегламентированнаяОтчетностьКлиент.ПроверитьКонтрольныеСоотношения(ЭтаФорма, ОбработкаКС, Истина);
	КонецЕсли;
	
	Если НЕ ПечатьНаСервере(ВидПечати) Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ОткрытьФормуПредварительногоПросмотра(ЭтаФорма, ВидПечати, , СтруктураРеквизитовФормы.СписокПечатаемыхЛистов);
	
	СтруктураРеквизитовФормы.мРежимПечати = Ложь;

КонецПроцедуры

&НаСервере
Функция ПечатьНаСервере(ВидПечати)
	
	Если НЕ РегламентированнаяОтчетность.ПринтерДоступен() Тогда
		
		Сообщение = Новый СообщениеПользователю;

		Сообщение.Текст = НСтр("ru='Перед формированием печатных форм необходимо определить в системе принтер и задать его в качестве используемого по умолчанию!'");

		Сообщение.Сообщить();
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Если ТипЗнч(мДеревоВыбранныхСтраниц) <> Тип("ДанныеФормыДерево") Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	СтруктураРеквизитовФормы.мПечатныеФормы.Очистить();
	СтруктураРеквизитовФормы.мРежимПечати = Истина;
	
	СохранитьДанныеРаздела(СтруктураРеквизитовФормы.НаимТекущегоРаздела, Ложь, Ложь);
	
	Если СтруктураРеквизитовФормы.НужноРассчитатьОтчетНаСервере Тогда
		РасчетНаСервере();
	КонецЕсли;
	
	// Если текущий раздел многостраничный, имеющий многострочные части,
	// предварительно сохраним данные многострочных групп.
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел5" Тогда
		СохрТЗМногострочнойГруппы = ЭтаФорма[СтруктураРеквизитовФормы.мИдГруппы2].Выгрузить();
	ИначеЕсли СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел6" Тогда
		СохрТЗМногострочнойГруппы = ЭтаФорма[СтруктураРеквизитовФормы.мИдГруппы3].Выгрузить();
	ИначеЕсли СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел7" Тогда
		СохрТЗМногострочнойГруппы = ЭтаФорма[СтруктураРеквизитовФормы.мИдГруппы4].Выгрузить();
	КонецЕсли;
	
	сохрТаблДок = ТабличныйДокумент.ПолучитьОбласть();
	
	СтрПоля = "ПолеСверху, ПолеСправа, ПолеСнизу, ПолеСлева";
	ВремПоля = Новый Структура(СтрПоля);
	
	ЗаполнитьЗначенияСвойств(ВремПоля, ТабличныйДокумент, СтрПоля);
	
	ОбщиеРеквизитыРазделов = ПолучитьОбщиеРеквизитыСТитульногоЛиста();
	
	Для Каждого СтрокаУровня1 Из мДеревоВыбранныхСтраниц.ПолучитьЭлементы() Цикл
		
		Если СтрокаУровня1.ВыводНаПечать = 0 Тогда
			Продолжить;
		КонецЕсли;

		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("НаименованиеЛиста",  СтрокаУровня1.Представление);
		СтруктураПараметров.Вставить("ОриентацияЛиста",    СтрокаУровня1.ОриентацияСтраницы);
		СтруктураПараметров.Вставить("ИмяСтраницы",        СтрокаУровня1.ИмяСтраницы);
		Структурапараметров.Вставить("ИмяОбластиТаблПоля", СтрокаУровня1.ИмяОбластиТабличногоПоля);
		СтруктураПараметров.Вставить("ВидПечати",          ВидПечати);

		Если НЕ мСтруктураМногостраничныхРазделов.Свойство(СтрокаУровня1.ИмяСтраницы) Тогда
			
			ВывестиМакетВТаблДокНаСервере(СтрокаУровня1.ИмяСтраницы, 0);
			ВывестиНаПечатьЛист(СтруктураПараметров, ОбщиеРеквизитыРазделов, СтрПоля);
			
		Иначе
			
			СтруктураПараметров.Вставить("ИмяСтраницыПанели", СтрокаУровня1.ИмяСтраницы);
			ВывестиНаПечатьДополнительныеСтраницы(СтруктураПараметров, ОбщиеРеквизитыРазделов);
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Если текущий раздел многостраничный, имеющий многострочные части,
	// восстановим предварительно сохраненные данные многострочных групп.
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел5" Тогда
		ЭтаФорма[СтруктураРеквизитовФормы.мИдГруппы2].Загрузить(СохрТЗМногострочнойГруппы);
	ИначеЕсли СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел6" Тогда
		ЭтаФорма[СтруктураРеквизитовФормы.мИдГруппы3].Загрузить(СохрТЗМногострочнойГруппы);
	ИначеЕсли СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел7" Тогда
		ЭтаФорма[СтруктураРеквизитовФормы.мИдГруппы4].Загрузить(СохрТЗМногострочнойГруппы);
	КонецЕсли;
	
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(сохрТаблДок);
	ЗаполнитьЗначенияСвойств(ТабличныйДокумент, ВремПоля, СтрПоля);
	
	РегламентированнаяОтчетностьКлиентСервер.ПроставлениеНомеровЛистов(ЭтаФорма, , СтруктураРеквизитовФормы.СписокПечатаемыхЛистов);
	
	КопироватьДанныеФормы(мДеревоВыбранныхСтраниц, мДеревоСтраницОтчета);
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Процедура ВывестиНаПечатьЛист(Парам1, ОбщиеРеквизитыРазделов, СтрПоля = Неопределено)
	
	СоответствиеРазделовМакетам = Новый Соответствие;
	
	СоответствиеРазделовМакетам.Вставить("Титульный",		"ПечатнаяФормаОтчета2014Кв1_Титульный");
	СоответствиеРазделовМакетам.Вставить("ФизЛица",			"ПечатнаяФормаОтчета2014Кв1_ФизЛица");
	СоответствиеРазделовМакетам.Вставить("Раздел1_1",		"ПечатнаяФормаОтчета2014Кв1_Раздел1_1");
	СоответствиеРазделовМакетам.Вставить("Раздел1_2",		"ПечатнаяФормаОтчета2014Кв1_Раздел1_2");
	СоответствиеРазделовМакетам.Вставить("Раздел1_3",		"ПечатнаяФормаОтчета2014Кв1_Раздел1_3");
	СоответствиеРазделовМакетам.Вставить("Раздел2",			"ПечатнаяФормаОтчета2014Кв1_Раздел2");
	СоответствиеРазделовМакетам.Вставить("Раздел3",			"ПечатнаяФормаОтчета2014Кв1_Раздел3");
	СоответствиеРазделовМакетам.Вставить("Раздел4",			"ПечатнаяФормаОтчета2014Кв1_Раздел4");
	СоответствиеРазделовМакетам.Вставить("Раздел5",			"ПечатнаяФормаОтчета2014Кв1_Раздел5");
	СоответствиеРазделовМакетам.Вставить("Раздел6",			"ПечатнаяФормаОтчета2014Кв1_Раздел6");
	СоответствиеРазделовМакетам.Вставить("Раздел7",			"ПечатнаяФормаОтчета2014Кв1_Раздел7");
	СоответствиеРазделовМакетам.Вставить("Раздел8",			"ПечатнаяФормаОтчета2014Кв1_Раздел8");
	СоответствиеРазделовМакетам.Вставить("Раздел9",			"ПечатнаяФормаОтчета2014Кв1_Раздел9");
	СоответствиеРазделовМакетам.Вставить("Раздел10",		"ПечатнаяФормаОтчета2014Кв1_Раздел10");
	СоответствиеРазделовМакетам.Вставить("Раздел10_Прил1",	"ПечатнаяФормаОтчета2014Кв1_Раздел10_Прил1");
	СоответствиеРазделовМакетам.Вставить("Раздел11",		"ПечатнаяФормаОтчета2014Кв1_Раздел11");
	СоответствиеРазделовМакетам.Вставить("Раздел11_Прил1",	"ПечатнаяФормаОтчета2014Кв1_Раздел11_Прил1");
	СоответствиеРазделовМакетам.Вставить("Раздел11_Прил2",	"ПечатнаяФормаОтчета2014Кв1_Раздел11_Прил2");

	МЧБРаздела = СоответствиеРазделовМакетам[Парам1.ИмяСтраницы];
	
	МакетМЧБ = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(МЧБРаздела);
	МакетМЧБ.ПолеСверху = 5;
	МакетМЧБ.ПолеСправа = 5;
	МакетМЧБ.ПолеСнизу = 5;
	МакетМЧБ.ПолеСлева = 5;
		
	ИдГруппы = ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(Парам1.ИмяСтраницы);
	
	Если ИдГруппы <> Неопределено Тогда
		
		КолвоСтрокВТаблДок = ЭтаФорма[ИдГруппы].Количество();
		
		ОбластьМнгЧасти              = МакетМЧБ.ПолучитьОбласть("МногострочнаяЧасть");
		ВысотаОбластиМнгЧасти        = МакетМЧБ.ПолучитьОбласть("МногострочнаяЧасть").ВысотаТаблицы;
		ИмяОбластиПоследнейДопСтроки = ОбластьМнгЧасти.ПолучитьОбласть(ВысотаОбластиМнгЧасти, , ВысотаОбластиМнгЧасти).Области[0].Имя;
		
		КолвоСтрокВПечатнойФорме = Число(Сред(ИмяОбластиПоследнейДопСтроки, СтрНайти(ИмяОбластиПоследнейДопСтроки, "_") + 1));
		
		Если КолвоСтрокВТаблДок > КолвоСтрокВПечатнойФорме Тогда
			
			НомерВерхЯчейкиОбласти = МакетМЧБ.Область(ИдГруппы + "01_" + КолвоСтрокВПечатнойФорме).Верх;
			НомерНижнЯчейкиОбласти = МакетМЧБ.Область(ИдГруппы + Формат(мСтруктураКолвоКолонокРазделов[ИдГруппы], "ЧЦ=2; ЧВН=") + "_" + КолвоСтрокВПечатнойФорме).Низ;
			
			ВставляемаяОбласть = МакетМЧБ.Область(НомерВерхЯчейкиОбласти, , НомерНижнЯчейкиОбласти);
			
			КолвоДопСтрок = КолвоСтрокВТаблДок - КолвоСтрокВПечатнойФорме;
			
			Для Ном = 1 По КолвоДопСтрок Цикл
				
				МакетМЧБ.ВставитьОбласть(ВставляемаяОбласть, , ТипСмещенияТабличногоДокумента.ПоВертикали);
				
			КонецЦикла;
			
			Для Каждого Область Из МакетМЧБ.ПолучитьОбласть(НомерВерхЯчейкиОбласти + КолвоДопСтрок, , НомерНижнЯчейкиОбласти + КолвоДопСтрок).Области Цикл
				НайденнаяОбласть = МакетМЧБ.Области.Найти(Область.Имя);
				Если НЕ НайденнаяОбласть = Неопределено Тогда 
					НайденнаяОбласть.Имя = Лев(НайденнаяОбласть.Имя, СтрНайти(НайденнаяОбласть.Имя, "_") - 1) + "_" + Формат(КолвоСтрокВТаблДок, "ЧЦ=3");
					Если НайденнаяОбласть.Защита И НЕ НайденнаяОбласть.СодержитЗначение Тогда
						НайденнаяОбласть.Текст = Формат(КолвоСтрокВТаблДок, "ЧЦ=3");
					КонецЕсли; 
				КонецЕсли;
			КонецЦикла;
			
			Для Ном = 0 По КолвоДопСтрок - 1 Цикл
				
				Для Каждого Область Из МакетМЧБ.ПолучитьОбласть(НомерВерхЯчейкиОбласти + КолвоДопСтрок, , НомерНижнЯчейкиОбласти + КолвоДопСтрок).Области Цикл
					НайденнаяОбласть = МакетМЧБ.Область(НомерВерхЯчейкиОбласти + Ном, Область.Лево, НомерВерхЯчейкиОбласти + Ном, Область.Право);
					Если НЕ НайденнаяОбласть = Неопределено Тогда 
						НайденнаяОбласть.Имя = Лев(Область.Имя, СтрНайти(Область.Имя, "_") - 1) + "_" + Формат(КолвоСтрокВПечатнойФорме + Ном, "ЧЦ=3");
						Если НайденнаяОбласть.Защита И НЕ НайденнаяОбласть.СодержитЗначение Тогда
							НайденнаяОбласть.Текст = Формат(КолвоСтрокВПечатнойФорме + Ном, "ЧЦ=3");
						КонецЕсли; 
					КонецЕсли;
				КонецЦикла;
				
			КонецЦикла;
						
		КонецЕсли;
						
	КонецЕсли;
	
	ЗаполнитьМакетМЧБ(Парам1, МакетМЧБ, ОбщиеРеквизитыРазделов);
	
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(МакетМЧБ);
	ЗаполнитьЗначенияСвойств(ТабличныйДокумент, МакетМЧБ, СтрПоля, "Макет");
	
	УстановитьФорматВыводаНаПечать(ТабличныйДокумент);
	
	РегламентированнаяОтчетность.ВывестиНаПечатьЛистОбщая(ЭтаФорма.Заголовок, Парам1, ТабличныйДокумент, СтруктураРеквизитовФормы.мПечатныеФормы);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьФорматВыводаНаПечать(ТабДокумент)
	
	Если СтруктураРеквизитовФормы.ЕдиницаИзмерения
		= ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1 Тогда
		
		СтрокаФормата = "ЧДЦ = " + СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧС = 0";
		
	ИначеЕсли СтруктураРеквизитовФормы.ЕдиницаИзмерения
		= ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1000 Тогда
		
		СтрокаФормата = "ЧДЦ = " + СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧС = 3";
		
	ИначеЕсли СтруктураРеквизитовФормы.ЕдиницаИзмерения
		= ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1000000 Тогда
		
		СтрокаФормата = "ЧДЦ = " + СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧС = 6";
		
	КонецЕсли;
	
	Для Каждого Область Из ТабДокумент.Области Цикл
		
		Если СтрНайти(Область.Формат, "ЧН=-") > 0 Тогда
			
			Область.Формат = СтрокаФормата;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиНаПечатьДополнительныеСтраницы(СтруктураПараметровСтраницы, ОбщиеРеквизитыРазделов)
	
	Перем ИмяСтраницы;
	Перем ТаблицаСтраницРаздела;
	
	СтруктураПараметровСтраницы.Свойство("ИмяСтраницыПанели", ИмяСтраницы);
	
	Если Не мСтруктураМногостраничныхРазделов.Свойство(ИмяСтраницы, ТаблицаСтраницРаздела) Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаСтраницРаздела = ЭтаФорма[ТаблицаСтраницРаздела];
	
	МассивПризнаковАктивности = Новый Массив;
	Для Каждого Страница Из ТаблицаСтраницРаздела Цикл
		ТекущийИндекс = ТаблицаСтраницРаздела.Индекс(Страница);
		МассивПризнаковАктивности.Добавить(ТаблицаСтраницРаздела[ТекущийИндекс].АктивнаяСтраница);
	КонецЦикла;
	
	Для Каждого Страница Из ТаблицаСтраницРаздела Цикл
		ТекущийИндекс = ТаблицаСтраницРаздела.Индекс(Страница);
		ВывестиМакетВТаблДокНаСервере(ИмяСтраницы, ТекущийИндекс + 1);
		ВывестиНаПечатьЛист(СтруктураПараметровСтраницы, ОбщиеРеквизитыРазделов);
	КонецЦикла;
	
	Для Каждого Страница Из ТаблицаСтраницРаздела Цикл
		ТекущийИндекс = ТаблицаСтраницРаздела.Индекс(Страница);
		ТаблицаСтраницРаздела[ТекущийИндекс].АктивнаяСтраница = МассивПризнаковАктивности[ТекущийИндекс];
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьМакетМЧБ(ПараметрыПечати, МакетПечатнойФормы, ОбщиеРеквизитыРазделов)
	
	ИсходныйМакет = ТабличныйДокумент;
	
	Для Каждого Область Из ИсходныйМакет.Области Цикл
		
		Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник И Область.СодержитЗначение Тогда
			
			Если    СтрЧислоВхождений(Область.Имя, "ИНН1") > 0
				ИЛИ СтрЧислоВхождений(Область.Имя, "КПП1") > 0
				ИЛИ СтрЧислоВхождений(Область.Имя, "ДатаПодписи") > 0 Тогда
				
				Продолжить;
			КонецЕсли;
			
			Если ПараметрыПечати.ИмяСтраницы = "Титульный" Тогда
				
				Если    СтрЧислоВхождений(Область.Имя, "ИННРук") > 0 
					ИЛИ СтрЧислоВхождений(Область.Имя, "ИННГБ")  > 0
					ИЛИ СтрЧислоВхождений(Область.Имя, "ИННУП")  > 0 Тогда
					
					НовЗначениеОбласти = ?(ПустаяСтрока(Область.Значение), "", Прав("00" + СокрЛП(Область.Значение), 12));
					Для Ном = 1 По СтрДлина(НовЗначениеОбласти) Цикл
						МакетПечатнойФормы.Области[Область.Имя + Ном].Значение = Сред(НовЗначениеОбласти, Ном, 1);
					КонецЦикла;
					
					Продолжить;
					
				ИначеЕсли СтрЧислоВхождений(Область.Имя, "НомКвартал") > 0
					ИЛИ СтрЧислоВхождений(Область.Имя, "ОтчетГод") > 0
					ИЛИ СтрЧислоВхождений(Область.Имя, "КодИМНС") > 0
					ИЛИ Область.Имя = "ОГРН"
					ИЛИ СтрЧислоВхождений(Область.Имя, "ИноСтрКод") > 0
					ИЛИ СтрЧислоВхождений(Область.Имя, "ИноСтрКодПост") > 0 
					ИЛИ СтрЧислоВхождений(Область.Имя, "Прил") > 0 Тогда
					
					ЗначОбласти=Область.Значение;
					
					Для Ном = 1 По СтрДлина(ЗначОбласти) Цикл
						
						МакетПечатнойФормы.Области[Область.Имя + Ном].Значение = Сред(ЗначОбласти, Ном, 1);
						
					КонецЦикла;
					
					Продолжить;
					
				ИначеЕсли СтрЧислоВхождений(Область.Имя, "НомКоррект") > 0 Тогда
					
					НомерКорр = Область.Значение;
					
					МакетПечатнойФормы.Области[Область.Имя].Значение = ?(НомерКорр = 0, " ", НомерКорр);
					
					Продолжить;
					
				КонецЕсли;
				
			ИначеЕсли ПараметрыПечати.ИмяСтраницы = "ФизЛица" Тогда
				
				Если СтрЧислоВхождений(Область.Имя, "ФизЛицДатаР") > 0
					ИЛИ СтрЧислоВхождений(Область.Имя, "ФизЛицДокДата") > 0 Тогда
					
					НовЗначениеОбласти=Формат(Область.Значение, "ДФ=ddMMyyyy");
					Для Ном = 1 По СтрДлина(НовЗначениеОбласти) Цикл
						МакетПечатнойФормы.Области[Область.Имя + Ном].Значение = Сред(НовЗначениеОбласти, Ном, 1);
					КонецЦикла;
					
					Продолжить;
					
				ИначеЕсли Область.Имя = "ФизЛицКодГражд"
					  ИЛИ Область.Имя = "ФизЛицДок"
					  ИЛИ Область.Имя = "ФизЛицИнд"
					  ИЛИ Область.Имя = "ФизЛицС" Тогда
					
					НовЗначениеОбласти=СтрЗаменить(Формат(Область.Значение,"ЧГ=0")," ","");
					Если ЗначениеЗаполнено(Область.Значение) Тогда 
						
						Для Ном = 1 По СтрДлина(НовЗначениеОбласти) Цикл
							МакетПечатнойФормы.Области[Область.Имя + Ном].Значение = Сред(НовЗначениеОбласти, Ном, 1);
						КонецЦикла;
						
					КонецЕсли;
					
					Продолжить;
					
				КонецЕсли;
				
			ИначеЕсли ПараметрыПечати.ИмяСтраницы = "Раздел1_1" Тогда
				
				Если СтрЧислоВхождений(Область.Имя, "КБК") > 0
					ИЛИ СтрЧислоВхождений(Область.Имя, "ОКАТО") > 0 Тогда
					
					НовЗначениеОбласти=СтрЗаменить(Строка(Область.Значение)," ","");
					Разделитель = ?(СтрЧислоВхождений(Область.Имя, "КБК") > 0, "_", "");
					Для Ном = 1 По СтрДлина(НовЗначениеОбласти) Цикл
						МакетПечатнойФормы.Области[Область.Имя + Разделитель + Ном].Значение = Сред(НовЗначениеОбласти, Ном, 1);
					КонецЦикла;
					
					Если СтрЧислоВхождений(Область.Имя, "ОКАТО") > 0 И СтрДлина(НовЗначениеОбласти) > 0 Тогда
						Для Ном = (СтрДлина(НовЗначениеОбласти) + 1) По 11 Цикл
							МакетПечатнойФормы.Области[Область.Имя + Разделитель + Ном].Значение = "-";
						КонецЦикла;
					КонецЕсли;
					
					Продолжить;
					
				ИначеЕсли СтрЧислоВхождений(Область.Имя, "СуммаНалога") > 0
					ИЛИ СтрЧислоВхождений(Область.Имя, "СуммаНалУм")  > 0
					ИЛИ СтрЧислоВхождений(Область.Имя, "СуммаПерех")  > 0 Тогда
					
					НаимПеремПоляТаблДок = Область.Имя;
					НовЗначениеОбласти = СтрЗаменить(Формат(Область.Значение,"ЧГ=0")," ","");
					НовЗначениеОбласти = ?(ПустаяСтрока(НовЗначениеОбласти), "", НовЗначениеОбласти + "=");
					Если ЗначениеЗаполнено(Область.Значение) Тогда 
						
						Для Ном = 1 По СтрДлина(НовЗначениеОбласти) Цикл
							
							Если Ном = СтрДлина(НовЗначениеОбласти) И Сред(НовЗначениеОбласти, Ном, 1) = "="
								И МакетПечатнойФормы.Области.Найти(НаимПеремПоляТаблДок + "_" + Ном) = Неопределено Тогда
								Прервать;
							КонецЕсли;
							
							МакетПечатнойФормы.Области[НаимПеремПоляТаблДок + "_" + Ном].Значение = Сред(НовЗначениеОбласти, Ном, 1);
							
						КонецЦикла;
						
					КонецЕсли;
					
					Продолжить;
					
				КонецЕсли;
				
			ИначеЕсли ПараметрыПечати.ИмяСтраницы = "Раздел1_2" Тогда
				
				Если СтрЧислоВхождений(Область.Имя, "КБК") > 0
					ИЛИ СтрЧислоВхождений(Область.Имя, "ОКАТО") > 0 Тогда
					
					НовЗначениеОбласти=СтрЗаменить(Строка(Область.Значение)," ","");
					Для Ном = 1 По СтрДлина(НовЗначениеОбласти) Цикл
						МакетПечатнойФормы.Области[Область.Имя + Ном].Значение = Сред(НовЗначениеОбласти, Ном, 1);
					КонецЦикла;
					
					Если СтрЧислоВхождений(Область.Имя, "ОКАТО") > 0 И СтрДлина(НовЗначениеОбласти) > 0 Тогда
						Для Ном = (СтрДлина(НовЗначениеОбласти) + 1) По 11 Цикл
							МакетПечатнойФормы.Области[Область.Имя + Разделитель + Ном].Значение = "-";
						КонецЦикла;
					КонецЕсли;
					
					Продолжить;
					
				ИначеЕсли СтрЧислоВхождений(Область.Имя, "СуммаДоплФед") > 0
					  ИЛИ СтрЧислоВхождений(Область.Имя, "СуммаУменФед") > 0 Тогда
					
					НаимПеремПоляТаблДок = Область.Имя;
					НовЗначениеОбласти = СтрЗаменить(Формат(Область.Значение,"ЧГ=0")," ","");
					НовЗначениеОбласти = ?(ПустаяСтрока(НовЗначениеОбласти), "", НовЗначениеОбласти + "=");
					Если ЗначениеЗаполнено(Область.Значение) Тогда 
						
						Для Ном = 1 По СтрДлина(НовЗначениеОбласти) Цикл
							
							Если Ном = СтрДлина(НовЗначениеОбласти) И Сред(НовЗначениеОбласти, Ном, 1) = "="
								И МакетПечатнойФормы.Области.Найти(НаимПеремПоляТаблДок + "_" + Ном) = Неопределено Тогда
								Прервать;
							КонецЕсли;
							
							МакетПечатнойФормы.Области[НаимПеремПоляТаблДок + Ном].Значение = Сред(НовЗначениеОбласти, Ном, 1);
							
						КонецЦикла;
						
					КонецЕсли;
					
					Продолжить;
					
				КонецЕсли;
				
			ИначеЕсли ПараметрыПечати.ИмяСтраницы = "Раздел1_3" Тогда
				
				Если СтрЧислоВхождений(Область.Имя, "КБК") > 0
				 ИЛИ СтрЧислоВхождений(Область.Имя, "ОКАТО") > 0 Тогда
					
					НовЗначениеОбласти=СтрЗаменить(Строка(Область.Значение)," ","");
					Для Ном = 1 По СтрДлина(НовЗначениеОбласти) Цикл
						МакетПечатнойФормы.Области[Область.Имя + Ном].Значение = Сред(НовЗначениеОбласти, Ном, 1);
					КонецЦикла;
					
					Если СтрЧислоВхождений(Область.Имя, "ОКАТО") > 0 И СтрДлина(НовЗначениеОбласти) > 0 Тогда
						Для Ном = (СтрДлина(НовЗначениеОбласти) + 1) По 11 Цикл
							МакетПечатнойФормы.Области[Область.Имя + Разделитель + Ном].Значение = "-";
						КонецЦикла;
					КонецЕсли;
					
					Продолжить;
					
				ИначеЕсли СтрЧислоВхождений(Область.Имя, "Сумма2ДоплФед") > 0
					  ИЛИ СтрЧислоВхождений(Область.Имя, "Сумма2УменФед") > 0 Тогда
					
					НаимПеремПоляТаблДок=Область.Имя;
					НовЗначениеОбласти=СтрЗаменить(Формат(Область.Значение,"ЧГ=0")," ","");
					НовЗначениеОбласти = ?(ПустаяСтрока(НовЗначениеОбласти), "", НовЗначениеОбласти + "=");
					Если ЗначениеЗаполнено(Область.Значение) Тогда 
						
						Для Ном = 1 По СтрДлина(НовЗначениеОбласти) Цикл
							
							Если Ном = СтрДлина(НовЗначениеОбласти) И Сред(НовЗначениеОбласти, Ном, 1) = "="
								И МакетПечатнойФормы.Области.Найти(НаимПеремПоляТаблДок + "_" + Ном) = Неопределено Тогда
								Прервать;
							КонецЕсли;
							
							МакетПечатнойФормы.Области[НаимПеремПоляТаблДок + Ном].Значение = Сред(НовЗначениеОбласти, Ном, 1);
							
						КонецЦикла;
						
					КонецЕсли;
					
					Продолжить;
					
				КонецЕсли;
				
			ИначеЕсли ПараметрыПечати.ИмяСтраницы = "Раздел2" Тогда
				
				Если СтрЧислоВхождений(Область.Имя, "КодСтраныСогл") > 0
				 ИЛИ СтрЧислоВхождений(Область.Имя, "КодСтраны") > 0 Тогда
				 
				 	ЗначениеОбласти = ?(ПустаяСтрока(Область.Значение), "", Прав("00" + СокрлП(Область.Значение), 2));
					Для Ном = 1 По СтрДлина(Область.Значение) Цикл
						МакетПечатнойФормы.Области[Область.Имя + Ном].Значение = Сред(ЗначениеОбласти, Ном, 1);
					КонецЦикла;
					
					Продолжить;
					
				ИначеЕсли СтрЧислоВхождений(Область.Имя, "ИННРО") > 0
					  ИЛИ СтрЧислоВхождений(Область.Имя, "КППРО") > 0 Тогда
					
					ЗначОбласти = Область.Значение;
					
					Для Ном = 1 По СтрДлина(ЗначОбласти) Цикл
						
						МакетПечатнойФормы.Области[Область.Имя + "_" + Ном].Значение = Сред(ЗначОбласти, Ном, 1);
						
					КонецЦикла;
					
					Продолжить;
					
				КонецЕсли;
				
			ИначеЕсли ПараметрыПечати.ИмяСтраницы = "Раздел7" Тогда
				
				Если СтрЧислоВхождений(Область.Имя, "Ставка") > 0 Тогда
					
					Для Ном = 1 По СтрДлина(Область.Значение) Цикл
						МакетПечатнойФормы.Области[Область.Имя + Ном].Значение = Сред(Область.Значение, Ном, 1);
					КонецЦикла;
					
					Продолжить;
					
				КонецЕсли;
				
			ИначеЕсли ПараметрыПечати.ИмяСтраницы = "Раздел10" Тогда
				
				Если СтрЧислоВхождений(Область.Имя, "КолОтд") > 0
				 ИЛИ СтрЧислоВхождений(Область.Имя, "НалФБ") > 0
				 ИЛИ СтрЧислоВхождений(Область.Имя, "НалМБ") > 0 Тогда
					
					Для Ном = 1 По СтрДлина(Область.Значение) Цикл
						МакетПечатнойФормы.Области[Область.Имя + Ном].Значение = Сред(Область.Значение, Ном, 1);
					КонецЦикла;
					
					Продолжить;
					
				КонецЕсли;
					
			КонецЕсли;
			
			МакетПечатнойФормы.Области[Область.Имя].Значение = Область.Значение;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого Реквизит Из ОбщиеРеквизитыРазделов Цикл
		
		Индекс = 1;
		Постфикс = "_1";
		Разделитель = Истина;
		
		Если СтрНайти(Реквизит.Ключ, "ДатаПодписи") > 0 Тогда
			НаименованиеОбласти = Реквизит.Ключ;
			Постфикс = "1";
			Разделитель = Ложь;
		Иначе
			НаименованиеОбласти = Реквизит.Ключ + Индекс;
		КонецЕсли;
		
		Пока НЕ МакетПечатнойФормы.Области.Найти(НаименованиеОбласти + Постфикс) = Неопределено Цикл
			
			Для Ном = 1 По Реквизит.Значение.Количество() Цикл
				МакетПечатнойФормы.Области[НаименованиеОбласти + ?(Разделитель, "_", "") + Ном].Значение = Реквизит.Значение[Ном - 1];
			КонецЦикла;
			
			Индекс = Индекс + 1;
			
			НаименованиеОбласти = Реквизит.Ключ + Индекс;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьОбщиеРеквизитыСТитульногоЛиста()
	
	МассивИНН            = Новый Массив(12);
	МассивКПП            = Новый Массив(9);
	МассивДатаПодписи    = Новый Массив(8);
	МассивДатаПодписиРук = Новый Массив(8);
	МассивДатаПодписиБух = Новый Массив(8);
	МассивДатаПодписиУпП = Новый Массив(8);
					
	ИсходныйМакет = ТабличныйДокумент;
		
	Область = ИсходныйМакет.Области.Найти("ИНН1");
	
	Если НЕ Область = Неопределено Тогда
		
		СтрИНН = Область.Значение;
		
		Если СтрДлина(СтрИНН) = 10 Тогда
			СтрИНН = "00" + СтрИНН;
		КонецЕсли;
								
		Для Ном = 1 По СтрДлина(СтрИНН) Цикл
			
			МассивИНН[Ном - 1] = Сред(СтрИНН, Ном, 1);
			
		КонецЦикла;
		
	КонецЕсли;
		
	Область = ИсходныйМакет.Области.Найти("КПП1");
	
	Если НЕ Область = Неопределено Тогда
		
		Для Ном = 1 По СтрДлина(Область.Значение) Цикл
			
			МассивКПП[Ном - 1] = Сред(Область.Значение, Ном, 1);
			
		КонецЦикла;
		
	КонецЕсли;
			
	Область = ИсходныйМакет.Области.Найти("ДатаПодписи");
	
	Если НЕ Область = Неопределено Тогда
		
		Если ТипЗнч(Область.Значение) = Тип("Строка") Тогда 
			СтрДатаПодписи = Лев(СтрЗаменить(Область.Значение, ".", ""), 8);
		ИначеЕсли ТипЗнч(Область.Значение) = Тип("Дата") Тогда 
			Если ЗначениеЗаполнено(Область.Значение) Тогда 
				СтрДатаПодписи = Лев(СтрЗаменить(Формат(Область.Значение, "ДФ = ""дд.ММ.гггг 'г.'"""), ".", ""), 8);
			Иначе
				СтрДатаПодписи = "        ";
			КонецЕсли;
		КонецЕсли;
		
		Для Ном = 1 По СтрДлина(СтрДатаПодписи) Цикл
			
			МассивДатаПодписи[Ном - 1] = Сред(СтрДатаПодписи, Ном, 1);
			
		КонецЦикла;
		
		Область = ИсходныйМакет.Области.Найти("ОргДиректор");
		Если НЕ Область = Неопределено Тогда
			Если ЗначениеЗаполнено(Область.Значение) Тогда
				Для Инд = 0 По МассивДатаПодписи.ВГраница() Цикл
					
					МассивДатаПодписиРук[Инд] = МассивДатаПодписи[Инд];
					
				КонецЦикла;
			КонецЕсли;
		КонецЕсли; 
		
		Область = ИсходныйМакет.Области.Найти("ОргБухгалтер");
		Если НЕ Область = Неопределено Тогда
			Если ЗначениеЗаполнено(Область.Значение) Тогда
				Для Инд = 0 По МассивДатаПодписи.ВГраница() Цикл
					
					МассивДатаПодписиБух[Инд] = МассивДатаПодписи[Инд];
					
				КонецЦикла;
			КонецЕсли;
		КонецЕсли; 
		
		Область = ИсходныйМакет.Области.Найти("ОргУп");
		Если НЕ Область = Неопределено Тогда
			Если ЗначениеЗаполнено(Область.Значение) Тогда
				Для Инд = 0 По МассивДатаПодписи.ВГраница() Цикл
					
					МассивДатаПодписиУпП[Инд] = МассивДатаПодписи[Инд];
					
				КонецЦикла;
			КонецЕсли;
		КонецЕсли; 
		
	КонецЕсли;
	
	ОбщиеРеквизитыРазделов = Новый Структура;
		
	ОбщиеРеквизитыРазделов.Вставить("ИНН", МассивИНН);
	ОбщиеРеквизитыРазделов.Вставить("КПП", МассивКПП);
	ОбщиеРеквизитыРазделов.Вставить("ДатаПодписи", МассивДатаПодписи);
	ОбщиеРеквизитыРазделов.Вставить("ДатаПодписиРук", МассивДатаПодписиРук);
	ОбщиеРеквизитыРазделов.Вставить("ДатаПодписиБух", МассивДатаПодписиБух);
	ОбщиеРеквизитыРазделов.Вставить("ДатаПодписиУпП", МассивДатаПодписиУпП);
		
	Возврат ОбщиеРеквизитыРазделов;
	
КонецФункции

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ МЕХАНИЗМА ПРОВЕРКИ КОНТРОЛЬНЫХ СООТНОШЕНИЙ

&НаКлиенте
Процедура Проверить(Команда)
	
	РегламентированнаяОтчетностьКлиент.ПроверитьКонтрольныеСоотношения(ЭтаФорма, ОбработкаКС);
	
КонецПроцедуры

&НаСервере
Функция ПроверитьКонтрольныеСоотношенияВОтчете() Экспорт
	
	СтруктураРеквизитовФормы.ТекстДляЗаголовочнойЧасти = РегламентированнаяОтчетностьКлиентСервер.ПредставлениеДокументаРеглОтч(СтруктураРеквизитовФормы.мСохраненныйДок);
	
	Если СписокРасшифровкиПоказателей = Неопределено Тогда 
		СписокРасшифровкиПоказателей = РегламентированнаяОтчетность.СоздатьСписокРасшифровкиПоказателей();
	Иначе
		СписокРасшифровкиПоказателей.Очистить();
	КонецЕсли;
	
	Если СписокРасшифровкиформулы = Неопределено Тогда 
		СписокРасшифровкиформулы = РегламентированнаяОтчетность.СоздатьСписокРасшифровкиформулы();
	Иначе
		СписокРасшифровкиформулы.Очистить();
	КонецЕсли;
	
	СчетчикФормулДляРасшифровок = 0;
	
	СтруктураРезультата = Новый Структура;
	СтруктураРезультата.Вставить("КоличествоНайденныхОшибок",    0);
	СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", 0);
	СтруктураРезультата.Вставить("СтруктураОшибок", Новый Структура);

	ПроверкаРаздел1_1(СтруктураРезультата);
	ПроверкаРаздел1_2(СтруктураРезультата);
	ПроверкаРаздел1_3(СтруктураРезультата);
	ПроверкаРаздел5(СтруктураРезультата);
	ПроверкаРаздел6(СтруктураРезультата);
	ПроверкаРаздел7(СтруктураРезультата);
	
	Если СписокРасшифровкиПоказателей.Количество() > 0 Тогда 
		СтруктураРезультата.Вставить("СписокРасшифровкиПоказателей", 
			ПоместитьВоВременноеХранилище(СписокРасшифровкиПоказателей, Новый УникальныйИдентификатор));
	КонецЕсли;
	
	Если СписокРасшифровкиформулы.Количество() > 0 Тогда 
		СтруктураРезультата.Вставить("СписокРасшифровкиформулы", 
			ПоместитьВоВременноеХранилище(СписокРасшифровкиформулы, Новый УникальныйИдентификатор));
	КонецЕсли;
	
	Возврат СтруктураРезультата;

КонецФункции

&НаСервере
Функция ПроверкаРаздел1_1(СтруктураРезультата)
	
	ОбщееЧислоОшибок = 0; // Счетчик учета ошибок.
	ОбщееЧислоБезОшибок = 0; // Счетчик учета проверенных соотношений, не являющиеся ошибками.
	
	СтруктураОшибок = СтруктураРезультата.СтруктураОшибок;
	
	Раздел1_1 = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаРаздел1_1;
	Раздел7   = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить().ДанныеМногостраничныхРазделов.Раздел7;
	Раздел10  = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить().ДанныеМногостраничныхРазделов.Раздел10;
	
	ТекстФормулы = "Раздел 1.1";
	
	// Проверка 1.1
	
	ОписаниеКС = "Сумма налога к доплате (строка 030 Подраздела 1 раздела 1) должна быть равна результату вычитания значений строк 200 и 220 из строки 170 раздела 7.";
	СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
	РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(СписокРасшифровкиФормулы, ОписаниеКС, , СчетчикФормулДляРасшифровок);
	
	Сумма1 = 0;
	НомерСтраницы1 = 0;
	Для Каждого Страница1 Из Раздел7 Цикл
		НомерСтраницы1 = НомерСтраницы1 + 1;
		РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000070017004",
			"Сумма налога по расчету в федеральный бюджет (Раздел 7 Строка 170" + " Страница " + НомерСтраницы1 + ")",
			Страница1.Данные.П000070017004, "", СтруктураРеквизитовФормы.мСохраненныйДок, "Раздел7", Неопределено, НомерСтраницы1,
			СчетчикФормулДляРасшифровок);
		Сумма1 = Сумма1 + Окр(Страница1.Данные.П000070017004);
	КонецЦикла;
	Р7Ст170 = Сумма1;
	
	Сумма2 = 0;
	НомерСтраницы2 = 0;
	Для Каждого Страница2 Из Раздел7 Цикл
		НомерСтраницы2 = НомерСтраницы2 + 1;
		РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000070020004",
			"Сумма налога, фактически удержанная налоговым агентом в отчетном периоде (кроме налога на дивиденды и налога на доходы по государственным и муиципальным ценным бумагам) (Раздел 7 Строка 200" + " Страница " + НомерСтраницы2 + ")",
			Страница2.Данные.П000070020004, "", СтруктураРеквизитовФормы.мСохраненныйДок, "Раздел7", Неопределено, НомерСтраницы2,
			СчетчикФормулДляРасшифровок);
		Сумма2 = Сумма2 + Окр(Страница2.Данные.П000070020004);
	КонецЦикла;
	Р7Ст200 = Сумма2;
	
	Сумма3 = 0;
	НомерСтраницы3 = 0;
	Для Каждого Страница3 Из Раздел7 Цикл
		НомерСтраницы3 = НомерСтраницы3 + 1;
		РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000070022004",
			"Начислено в федеральный бюджет налога на прибыль (Раздел 7 Строка 220" + " Страница " + НомерСтраницы3 + ")",
			Страница3.Данные.П000070022004, "", СтруктураРеквизитовФормы.мСохраненныйДок, "Раздел7", Неопределено, НомерСтраницы3,
			СчетчикФормулДляРасшифровок);
		Сумма3 = Сумма3 + Окр(Страница3.Данные.П000070022004);
	КонецЦикла;
	Р7Ст220 = Сумма3;
	
	УсловиеВыполнено = Р7Ст170 - Р7Ст200 - Р7Ст220 >= 0;
		
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "СуммаНалога1",
		"Сумма налога к доплате в федеральный бюджет (Раздел 1 Подраздел 1.1 В федеральный бюджет Строка 030)", Раздел1_1.СуммаНалога1_1, 
		"", СтруктураРеквизитовФормы.мСохраненныйДок, "Раздел1_1", Неопределено, , СчетчикФормулДляРасшифровок);
	ЭтоОшибка = Не (Окр(Раздел1_1.СуммаНалога1_1) = Р7Ст170 - Р7Ст200 - Р7Ст220);
	
	Расшифровка = "" + Окр(Раздел1_1.СуммаНалога1_1) + " = " + Р7Ст170 + " - " + Р7Ст200 + " - " + Р7Ст220 + " Итог [" + (Р7Ст170 - Р7Ст200 - Р7Ст220) + "]";
	
	Если УсловиеВыполнено И ЭтоОшибка Тогда
		ОписаниеНарушения = ?(Окр(Раздел1_1.СуммаНалога1_1) > Р7Ст170 - Р7Ст200 - Р7Ст220, "Завышена сумма налога к доплате в федеральный бюджет", "Занижена сумма налога к доплате в федеральный бюджет");
		Норма = "ст. 45 НК РФ";
		ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
	Иначе
		ОписаниеНарушения = "";
		Норма = "";
		ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
	КонецЕсли;
	
	ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка,
		УсловиеВыполнено И ЭтоОшибка, ОписаниеНарушения, Норма);
	
	// Проверка 1.2
	ОписаниеКС = "Сумма налога к уменьшению (строка 040 Подраздела 1.1 Раздела 1) должна быть равна сумме значений строк 220 и 200 раздела 7 за минусом величины по строке 170 Раздела 7.";
	СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
	РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(СписокРасшифровкиФормулы, ОписаниеКС, , СчетчикФормулДляРасшифровок);
	
	Сумма1 = 0;
	НомерСтраницы1 = 0;
	Для Каждого Страница1 Из Раздел7 Цикл
		НомерСтраницы1 = НомерСтраницы1 + 1;
		РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000070017004",
			"Сумма налога по расчету в федеральный бюджет (Раздел 7 Строка 170" + " Страница " + НомерСтраницы1 + ")",
			Страница1.Данные.П000070017004, "", СтруктураРеквизитовФормы.мСохраненныйДок, "Раздел7", Неопределено, НомерСтраницы1,
			СчетчикФормулДляРасшифровок);
		Сумма1 = Сумма1 + Окр(Страница1.Данные.П000070017004);
	КонецЦикла;
	Р7Ст170 = Сумма1;
	
	Сумма2 = 0;
	НомерСтраницы2 = 0;
	Для Каждого Страница2 Из Раздел7 Цикл
		НомерСтраницы2 = НомерСтраницы2 + 1;
		РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000070020004",
			"Сумма налога, фактически удержанная налоговым агентом в отчетном периоде (кроме налога на дивиденды и налога на доходы по государственным и муиципальным ценным бумагам) (Раздел 7 Строка 200" + " Страница " + НомерСтраницы2 + ")",
			Страница2.Данные.П000070020004, "", СтруктураРеквизитовФормы.мСохраненныйДок, "Раздел7", Неопределено, НомерСтраницы2,
			СчетчикФормулДляРасшифровок);
		Сумма2 = Сумма2 + Окр(Страница2.Данные.П000070020004);
	КонецЦикла;
	Р7Ст200 = Сумма2;
	
	Сумма3 = 0;
	НомерСтраницы3 = 0;
	Для Каждого Страница3 Из Раздел7 Цикл
		НомерСтраницы3 = НомерСтраницы3 + 1;
		РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000070022004",
			"Начислено в федеральный бюджет налога на прибыль (Раздел 7 Строка 220" + " Страница " + НомерСтраницы3 + ")",
			Страница3.Данные.П000070022004, "", СтруктураРеквизитовФормы.мСохраненныйДок, "Раздел7", Неопределено, НомерСтраницы3,
			СчетчикФормулДляРасшифровок);
		Сумма3 = Сумма3 + Окр(Страница3.Данные.П000070022004);
	КонецЦикла;
	Р7Ст220 = Сумма3;
	
	УсловиеВыполнено = Р7Ст200 + Р7Ст220 - Р7Ст170 >= 0;
	
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "СуммаНалУм1",
		"Сумма налога к уменьшению в федеральный бюджет (Раздел 1 Подраздел 1.1  В федеральный бюджет Строка 040)", Раздел1_1.СуммаНалУм1_1, "",
		СтруктураРеквизитовФормы.мСохраненныйДок, "Раздел1_1", Неопределено, , СчетчикФормулДляРасшифровок);
	ЭтоОшибка = Не (Окр(Раздел1_1.СуммаНалУм1_1) = Р7Ст200 + Р7Ст220 - Р7Ст170);
	
	Расшифровка = "" + Окр(Раздел1_1.СуммаНалУм1_1) + " = " + Р7Ст200 + " + " + Р7Ст220 + " - " + Р7Ст170 + " Итог [" + (Р7Ст200 + Р7Ст220 - Р7Ст170) + "]";
	
	Если УсловиеВыполнено И ЭтоОшибка Тогда
		ОписаниеНарушения = ?(Окр(Раздел1_1.СуммаНалУм1_1) > Р7Ст200 + Р7Ст220 - Р7Ст170, "Завышена сумма налога к уменьшению в федеральный бюджет", "Занижена сумма налога к уменьшению в федеральный бюджет");
		Норма = "ст. 45 НК РФ";
		ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
	Иначе
		ОписаниеНарушения = "";
		Норма = "";
		ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
	КонецЕсли;
	
	ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка,
		УсловиеВыполнено И ЭтоОшибка, ОписаниеНарушения, Норма);
	
	// Проверка 1.3
	ОписаниеКС = "Сумма налога с налоговой базы переходного периода (строка 050 Подраздела 1.1 Раздела 1) должна быть равна результату деления значения строки 280 на значение строки 310 раздела 7.";
	СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
	РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(СписокРасшифровкиФормулы, ОписаниеКС, , СчетчикФормулДляРасшифровок);
	
	Сумма1 = 0;
	НомерСтраницы1 = 0;
	Для Каждого Страница1 Из Раздел7 Цикл
		НомерСтраницы1 = НомерСтраницы1 + 1;
		Если Страница1.Данные.П000070031004 > 0 Тогда
			РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000070028004",
				"Начислено в федеральный бюджет налога на прибыль (Раздел 7 Строка 280" + " Страница " + НомерСтраницы1 + ")",
				Страница1.Данные.П000070028004, "", СтруктураРеквизитовФормы.мСохраненныйДок, "Раздел7", Неопределено, НомерСтраницы1,
				СчетчикФормулДляРасшифровок);
			РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000070031004",
				"Начислено в федеральный бюджет налога на прибыль (Раздел 7 Строка 310" + " Страница " + НомерСтраницы1 + ")",
				Страница1.Данные.П000070031004, "", СтруктураРеквизитовФормы.мСохраненныйДок, "Раздел7", Неопределено, НомерСтраницы1,
				СчетчикФормулДляРасшифровок);
			Сумма1 = Сумма1 + Окр(Страница1.Данные.П000070028004) / Окр(Страница1.Данные.П000070031004);
		КонецЕсли;
	КонецЦикла;
	Р7Ст280ДелР7Ст310 = Сумма1;
	
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "СуммаПерех1", 
		"Сумма налога к уменьшению в федеральный бюджет (Раздел 1 Подраздел 1.1 В федеральный бюджет Строка 050)", Раздел1_1.СуммаПерех1_1, "",
			СтруктураРеквизитовФормы.мСохраненныйДок, "Раздел1_1", Неопределено, , СчетчикФормулДляРасшифровок);
	ЭтоОшибка = Не (Окр(Раздел1_1.СуммаПерех1_1) = Окр(Р7Ст280ДелР7Ст310));
	
	Расшифровка = "" + Окр(Раздел1_1.СуммаПерех1_1) + " = " + Окр(Р7Ст280ДелР7Ст310);
	
	Если ЭтоОшибка Тогда
		ОписаниеНарушения = ?(Окр(Раздел1_1.СуммаПерех1_1) > Окр(Р7Ст280ДелР7Ст310), "Завышена сумма налога с базы переходного периода в федеральный бюджет", "Занижена сумма налога с базы переходного периода в федеральный бюджет");
		Норма = "ст. 45 НК РФ";
		ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
	Иначе
		ОписаниеНарушения = "";
		Норма = "";
		ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
	КонецЕсли;
	
	ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, ЭтоОшибка,
		ОписаниеНарушения, Норма);
	
	// Проверка 1.4
	
	ОписаниеКС = "Сумма налога к доплате (строка 030 Подраздела 1 Раздела 1) должна быть равна величине строки 180 за минусом значения по строке 230 раздела 7, если в строке 100 и в строке 110 Раздела 10 проставлен прочерк.";
	СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
	РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(СписокРасшифровкиФормулы, ОписаниеКС, , СчетчикФормулДляРасшифровок);
	
	Сумма1 = 0;
	НомерСтраницы1 = 0;
	Для Каждого Страница1 Из Раздел7 Цикл
		НомерСтраницы1 = НомерСтраницы1 + 1;
		РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000070018004",
			"Сумма налога по расчету в бюджет субъекта Российской Федерации (Раздел 7 Строка 180" + " Страница " + НомерСтраницы1 + ")",
			Страница1.Данные.П000070018004, "", СтруктураРеквизитовФормы.мСохраненныйДок, "Раздел7", Неопределено, НомерСтраницы1,
			СчетчикФормулДляРасшифровок);
		Сумма1 = Сумма1 + Окр(Страница1.Данные.П000070018004);
	КонецЦикла;
	Р7Ст180 = Сумма1;
	
	Сумма2 = 0;
	НомерСтраницы2 = 0;
	Для Каждого Страница2 Из Раздел7 Цикл
		НомерСтраницы2 = НомерСтраницы2 + 1;
		РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000070023004",
			"Начислено в бюджет субъекта Российской Федерации налога на прибыль (Раздел 7 Строка 230" + " Страница " + НомерСтраницы2 + ")",
			Страница2.Данные.П000070023004, "", СтруктураРеквизитовФормы.мСохраненныйДок, "Раздел7", Неопределено, НомерСтраницы2,
			СчетчикФормулДляРасшифровок);
		Сумма2 = Сумма2 + Окр(Страница2.Данные.П000070023004);
	КонецЦикла;
	Р7Ст230 = Сумма2;
	
	КолСтраниц1 = 0;
	Для Каждого Страница3 Из Раздел10 Цикл
		Если Страница3.Данные.П000100010004 <> 0 Или Страница3.Данные.П000100011004 <> 0 Тогда
			КолСтраниц1 = КолСтраниц1 + 1;
		КонецЕсли;
	КонецЦикла;
	
	УсловиеВыполнено = КолСтраниц1 = 0 И (Окр(Р7Ст180) - Окр(Р7Ст230) >= 0);
	
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "СуммаНалога2",
		"Сумма налога к доплате в бюджет субъекта Российской Федерации (Раздел 1 Подраздел 1.1  В бюджет субъекта РФ Строка 030)",
		Раздел1_1.СуммаНалога1_2, "", СтруктураРеквизитовФормы.мСохраненныйДок, "Раздел1_1", Неопределено, , СчетчикФормулДляРасшифровок);
	ЭтоОшибка = Не (Окр(Раздел1_1.СуммаНалога1_2) = Окр(Р7Ст180) - Окр(Р7Ст230));
	
	Расшифровка = "" + Окр(Раздел1_1.СуммаНалога1_2) + " = " + Окр(Р7Ст180) + " - " + Окр(Р7Ст230) + " Итог [" + (Окр(Р7Ст180) - Окр(Р7Ст230)) + "]";
	
	Если УсловиеВыполнено И ЭтоОшибка Тогда
		ОписаниеНарушения = ?(Окр(Раздел1_1.СуммаНалога1_2) > Окр(Р7Ст180) - Окр(Р7Ст230), "Завышена сумма налога к доплате в бюджет субъекта Российской Федерации", "Занижена сумма налога к доплате в бюджет субъекта Российской Федерации");
		Норма = "ст. 45 НК РФ";
		ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
	Иначе
		ОписаниеНарушения = "";
		Норма = "";
		ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
	КонецЕсли;
	
	ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка,
		УсловиеВыполнено И ЭтоОшибка, ОписаниеНарушения, Норма);
	
	// Проверка 1.5
	ОписаниеКС = "Сумма налога к уменьшению (строка 040 Подраздела 1.1 Раздела 1) должна быть равна величине строки 230 Раздела 7 за минусом величины по строке 180 Раздела 7, если в строке 100 и в строке 110 Раздела 10 проставлен прочерк.";
	СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
	РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(СписокРасшифровкиФормулы, ОписаниеКС, , СчетчикФормулДляРасшифровок);
	
	Сумма1 = 0;
	НомерСтраницы1 = 0;
	Для Каждого Страница1 Из Раздел7 Цикл
		НомерСтраницы1 = НомерСтраницы1 + 1;
		РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей,
			"П000070018004","Сумма налога по расчету в бюджет субъекта Российской Федерации (Раздел 7 Строка 180" + " Страница " + НомерСтраницы1 +
			")", Страница1.Данные.П000070018004, "", СтруктураРеквизитовФормы.мСохраненныйДок, "Раздел7", Неопределено, НомерСтраницы1,
			СчетчикФормулДляРасшифровок);
		Сумма1 = Сумма1 + Окр(Страница1.Данные.П000070018004);
	КонецЦикла;
	Р7Ст180 = Сумма1;
	
	Сумма2 = 0;
	НомерСтраницы2 = 0;
	Для Каждого Страница2 Из Раздел7 Цикл
		НомерСтраницы2 = НомерСтраницы2 + 1;
		РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000070023004",
			"Начислено в бюджет субъекта Российской Федерации налога на прибыль (Раздел 7 Строка 230" + " Страница " + НомерСтраницы2 + ")",
			Страница2.Данные.П000070023004, "", СтруктураРеквизитовФормы.мСохраненныйДок, "Раздел7", Неопределено, НомерСтраницы2,
			СчетчикФормулДляРасшифровок);
		Сумма2 = Сумма2 + Окр(Страница2.Данные.П000070023004);
	КонецЦикла;
	Р7Ст230 = Сумма2;
	
	КолСтраниц1 = 0;
	Для Каждого Страница3 Из Раздел10 Цикл
		Если Страница3.Данные.П000100010004 <> 0 Или Страница3.Данные.П000100011004 <> 0 Тогда
			КолСтраниц1 = КолСтраниц1 + 1;
		КонецЕсли;
	КонецЦикла;
	
	УсловиеВыполнено = КолСтраниц1 = 0 И (Окр(Р7Ст230) - Окр(Р7Ст180) >= 0);
	
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "СуммаНалУм2",
		"Сумма налога к уменьшению в бюджет субъекта Российской Федерации (Раздел 1 Подраздел 1.1 В бюджет субъекта РФ Строка 040)",
		Раздел1_1.СуммаНалУм1_2, "", СтруктураРеквизитовФормы.мСохраненныйДок, "Раздел1_1", Неопределено, , СчетчикФормулДляРасшифровок);
	ЭтоОшибка = Не (Окр(Раздел1_1.СуммаНалУм1_2) = Окр(Р7Ст230) - Окр(Р7Ст180));
	
	Расшифровка = "" + Окр(Раздел1_1.СуммаНалУм1_2) + " = " + Окр(Р7Ст230) + " - " + Окр(Р7Ст180) + " Итог [" + (Окр(Р7Ст230) - Окр(Р7Ст180)) + "]";
	
	Если УсловиеВыполнено И ЭтоОшибка Тогда
		ОписаниеНарушения = ?(Окр(Раздел1_1.СуммаНалУм1_2) > Окр(Р7Ст230) - Окр(Р7Ст180), "Завышена сумма налога к уменьшению в бюджет субъекта Российской Федерации", "Занижена сумма налога к уменьшению в бюджет субъекта Российской Федерации");
		Норма = "ст. 45 НК РФ";
		ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
	Иначе
		ОписаниеНарушения = "";
		Норма = "";
		ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
	КонецЕсли;
	
	ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, УсловиеВыполнено И ЭтоОшибка, ОписаниеНарушения, Норма);
	
	// Проверка 1.6
	ОписаниеКС = "Сумма налога с налоговой базы переходного периода (строка 050 Подраздела 1.1 Раздела 1) должна быть равна результату деления значения строки 290 на значение строки 310 раздела 7, если в строке 100 и в строке 110 Раздела 10 проставлен прочерк.";
	СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
	РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(СписокРасшифровкиФормулы, ОписаниеКС, , СчетчикФормулДляРасшифровок);
	
	Сумма1 = 0;
	НомерСтраницы1 = 0;
	Для Каждого Страница1 Из Раздел7 Цикл
		НомерСтраницы1 = НомерСтраницы1 + 1;
		Если Страница1.Данные.П000070031004 <> 0 Тогда
			РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000070029004", 
				"Начислено в бюджет субъекта Российской Федерации налога на прибыль (Раздел 7 Строка 290" + " Страница " + НомерСтраницы1 + ")",
				Страница1.Данные.П000070029004, "", СтруктураРеквизитовФормы.мСохраненныйДок, "Раздел7", Неопределено, НомерСтраницы1,
				СчетчикФормулДляРасшифровок);
			РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000070031004",
				"Начислено в федеральный бюджет налога на прибыль (Раздел 7 Строка 310" + " Страница " + НомерСтраницы1 + ")",
				Страница1.Данные.П000070031004, "", СтруктураРеквизитовФормы.мСохраненныйДок, "Раздел7", Неопределено, НомерСтраницы1,
				СчетчикФормулДляРасшифровок);
			Сумма1 = Сумма1 + Окр(Страница1.Данные.П000070029004) / Окр(Страница1.Данные.П000070031004);
		КонецЕсли;
	КонецЦикла;
	Р7Ст290ДелР7Ст310 = Сумма1;
	
	КолСтраниц1 = 0;
	Для Каждого Страница2 Из Раздел10 Цикл
		Если Страница2.Данные.П000100010004 <> 0 Или Страница2.Данные.П000100011004 <> 0 Тогда
			КолСтраниц1 = КолСтраниц1 + 1;
		КонецЕсли;
	КонецЦикла;
	
	УсловиеВыполнено = КолСтраниц1 = 0;
	
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "СуммаПерех2",
		"Сумма налога к уменьшению в бюджет субъекта Российской Федерации (Раздел 1 Подраздел 1.1 В бюджет субъекта РФ Строка 050)",
		Раздел1_1.СуммаПерех1_2, "", СтруктураРеквизитовФормы.мСохраненныйДок, "Раздел1_1", Неопределено, , СчетчикФормулДляРасшифровок);
	ЭтоОшибка = Не (Окр(Раздел1_1.СуммаПерех1_2) = Окр(Р7Ст290ДелР7Ст310));
	
	Расшифровка = "" + Окр(Раздел1_1.СуммаПерех1_2) + " = " + Окр(Р7Ст290ДелР7Ст310);
	
	Если УсловиеВыполнено И ЭтоОшибка Тогда
		ОписаниеНарушения = ?(Окр(Раздел1_1.СуммаПерех1_2) > Окр(Р7Ст290ДелР7Ст310), "Завышена сумма налога с базы переходного периода в бюджет субъекта Российской Федерации", "Занижена сумма налога с базы переходного периода в бюджет субъекта Российской Федерации");
		Норма = "ст. 45 НК РФ";
		ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
	Иначе
		ОписаниеНарушения = "";
		Норма = "";
		ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
	КонецЕсли;
	
	ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка,
		УсловиеВыполнено И ЭтоОшибка, ОписаниеНарушения, Норма);
	
	// Проверка 1.7
	ОписаниеКС = "Сумма налога к доплате (строка 030 Подраздела 1 Раздела 1) должна быть равна величине строки 190 за минусом значения по строке 240 раздела 7, если в строке 100 и в строке 110 Раздела 10 проставлен прочерк.";
	СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
	РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(СписокРасшифровкиФормулы, ОписаниеКС, , СчетчикФормулДляРасшифровок);
	
	Сумма1 = 0;
	НомерСтраницы1 = 0;
	Для Каждого Страница1 Из Раздел7 Цикл
		НомерСтраницы1 = НомерСтраницы1 + 1;
		РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000070019004", 
			"Сумма налога по расчету в местный бюджет (Раздел 7 Строка 190" + " Страница " + НомерСтраницы1 + ")", Страница1.Данные.П000070019004,
			"", СтруктураРеквизитовФормы.мСохраненныйДок, "Раздел7", Неопределено, НомерСтраницы1, СчетчикФормулДляРасшифровок);
		Сумма1 = Сумма1 + Окр(Страница1.Данные.П000070019004);
	КонецЦикла;
	Р7Ст190 = Сумма1;
	
	Сумма2 = 0;
	НомерСтраницы2 = 0;
	Для Каждого Страница2 Из Раздел7 Цикл
		НомерСтраницы2 = НомерСтраницы2 + 1;
		РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000070024004",
			"Начислено в местный бюджет налога на прибыль (Раздел 7 Строка 240" + " Страница " + НомерСтраницы2 + ")",
			Страница2.Данные.П000070024004, "", СтруктураРеквизитовФормы.мСохраненныйДок, "Раздел7", Неопределено, НомерСтраницы2,
			СчетчикФормулДляРасшифровок);
		Сумма2 = Сумма2 + Окр(Страница2.Данные.П000070024004);
	КонецЦикла;
	Р7Ст240 = Сумма2;
	
	КолСтраниц1 = 0;
	Для Каждого Страница3 Из Раздел10 Цикл
		Если Страница3.Данные.П000100010004 <> 0 Или Страница3.Данные.П000100011004 <> 0 Тогда
			КолСтраниц1 = КолСтраниц1 + 1;
		КонецЕсли;
	КонецЦикла;
	
	УсловиеВыполнено = КолСтраниц1 = 0 И (Окр(Р7Ст190) - Окр(Р7Ст240) >= 0);
	
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "СуммаНалога3",
		"Сумма налога к доплате в местный бюджет (Раздел 1 Подраздел 1.1  В местный бюджет Строка 030)", Раздел1_1.СуммаНалога1_3, "",
		СтруктураРеквизитовФормы.мСохраненныйДок, "Раздел1_1", Неопределено, , СчетчикФормулДляРасшифровок);
	ЭтоОшибка = Не (Окр(Раздел1_1.СуммаНалога1_3) = Окр(Р7Ст190) - Окр(Р7Ст240));
	
	Расшифровка = "" + Окр(Раздел1_1.СуммаНалога1_3) + " = " + Окр(Р7Ст190) + " - " + Окр(Р7Ст240) + " Итог [" + (Окр(Р7Ст190) - Окр(Р7Ст240)) + "]";
	
	Если УсловиеВыполнено И ЭтоОшибка Тогда
		ОписаниеНарушения = ?(Окр(Раздел1_1.СуммаНалога1_3) > Окр(Р7Ст190) - Окр(Р7Ст240), "Завышена сумма налога к доплате в местный бюджет", "Занижена сумма налога к доплате в местный бюджет");
		Норма = "ст. 45 НК РФ";
		ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
	Иначе
		ОписаниеНарушения = "";
		Норма = "";
		ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
	КонецЕсли;
	
	ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, УсловиеВыполнено И ЭтоОшибка, ОписаниеНарушения, Норма);
	
	
	// Проверка 1.8
	
	ОписаниеКС = "Сумма налога к уменьшению (строка 040 Подраздела 1.1 Раздела 1) должна быть равна величине строки 240 Раздела 7 за минусом величины по строке 190 Раздела 7, если в строке 100 и в строке 110 Раздела 10 проставлен прочерк.";
	СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
	РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(СписокРасшифровкиФормулы, ОписаниеКС, , СчетчикФормулДляРасшифровок);
	
	Сумма1 = 0;
	НомерСтраницы1 = 0;
	Для Каждого Страница1 Из Раздел7 Цикл
		НомерСтраницы1 = НомерСтраницы1 + 1;
		РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000070019004",
			"Сумма налога по расчету в местный бюджет (Раздел 7 Строка 190" + " Страница " + НомерСтраницы1 + ")", Страница1.Данные.П000070019004,
			"", СтруктураРеквизитовФормы.мСохраненныйДок, "Раздел7", Неопределено, НомерСтраницы1, СчетчикФормулДляРасшифровок);
		Сумма1 = Сумма1 + Окр(Страница1.Данные.П000070019004);
	КонецЦикла;
	Р7Ст190 = Сумма1;
	
	Сумма2 = 0;
	НомерСтраницы2 = 0;
	Для Каждого Страница2 Из Раздел7 Цикл
		НомерСтраницы2 = НомерСтраницы2 + 1;
		РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000070024004",
		"Начислено в местный бюджет налога на прибыль (Раздел 7 Строка 240" + " Страница " + НомерСтраницы2 + ")", Страница2.Данные.П000070024004,
		"", СтруктураРеквизитовФормы.мСохраненныйДок, "Раздел7", Неопределено, НомерСтраницы2, СчетчикФормулДляРасшифровок);
		Сумма2 = Сумма2 + Окр(Страница2.Данные.П000070024004);
	КонецЦикла;
	Р7Ст240 = Сумма2;
	
	КолСтраниц1 = 0;
	Для Каждого Страница3 Из Раздел10 Цикл
		Если Страница3.Данные.П000100010004 <> 0 Или Страница3.Данные.П000100011004 <> 0 Тогда
			КолСтраниц1 = КолСтраниц1 + 1;
		КонецЕсли;
	КонецЦикла;
	
	УсловиеВыполнено = КолСтраниц1 = 0 И (Окр(Р7Ст240) - Окр(Р7Ст190) >= 0);
	
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "СуммаНалУм3",
	"Сумма налога к уменьшению в местный бюджет (Раздел 1 Подраздел 1.1 В местный бюджет Строка 040)", Раздел1_1.СуммаНалУм1_3, "",
	СтруктураРеквизитовФормы.мСохраненныйДок, "Раздел1_1", Неопределено, , СчетчикФормулДляРасшифровок);
	ЭтоОшибка = Не (Окр(Раздел1_1.СуммаНалУм1_3) = Окр(Р7Ст240) - Окр(Р7Ст190));
	
	Расшифровка = "" + Окр(Раздел1_1.СуммаНалУм1_3) + " = " + Окр(Р7Ст240) + " - " + Окр(Р7Ст190) + " Итог [" + (Окр(Р7Ст240) - Окр(Р7Ст190)) + "]";
	
	Если УсловиеВыполнено И ЭтоОшибка Тогда
		ОписаниеНарушения = ?(Окр(Раздел1_1.СуммаНалУм1_3) > Окр(Р7Ст240) - Окр(Р7Ст190), "Завышена сумма налога к уменьшению в местный бюджет", "Занижена сумма налога к уменьшению в местный бюджет");
		Норма = "ст. 45 НК РФ";
		ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
	Иначе
		ОписаниеНарушения = "";
		Норма = "";
		ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
	КонецЕсли;
	
	ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка,
		УсловиеВыполнено И ЭтоОшибка, ОписаниеНарушения, Норма);
	
	// Проверка 1.9
	ОписаниеКС = "Сумма налога с налоговой базы переходного периода (строка 050 Подраздела 1.1 Раздела 1) должна быть равна результату деления значения строки 300 на значение строки 310 раздела 7, если в строке 100 и в строке 110 Раздела 10 проставлен прочерк.";
	СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
	РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(СписокРасшифровкиФормулы, ОписаниеКС, , СчетчикФормулДляРасшифровок);
	
	Сумма1 = 0;
	НомерСтраницы1 = 0;
	Для Каждого Страница1 Из Раздел7 Цикл
		НомерСтраницы1 = НомерСтраницы1 + 1;
		Если Страница1.Данные.П000070031004 <> 0 Тогда
			РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000070030004",
				"Начислено в местный бюджет налога на прибыль (Раздел 7 Строка 300" + " Страница " + НомерСтраницы1 + ")",
				Страница1.Данные.П000070030004, "", СтруктураРеквизитовФормы.мСохраненныйДок, "Раздел7", Неопределено, НомерСтраницы1,
				СчетчикФормулДляРасшифровок);
			РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000070031004", 
				"Начислено в федеральный бюджет налога на прибыль (Раздел 7 Строка 310" + " Страница " + НомерСтраницы1 + ")",
				Страница1.Данные.П000070031004, "", СтруктураРеквизитовФормы.мСохраненныйДок, "Раздел7", Неопределено, НомерСтраницы1,
				СчетчикФормулДляРасшифровок);
			Сумма1 = Сумма1 + Окр(Страница1.Данные.П000070030004) / Окр(Страница1.Данные.П000070031004);
		КонецЕсли;
	КонецЦикла;
	Р7Ст300ДелР7Ст310 = Сумма1;
	
	КолСтраниц1 = 0;
	Для Каждого Страница2 Из Раздел10 Цикл
		Если Страница2.Данные.П000100010004 <> 0 Или Страница2.Данные.П000100011004 <> 0 Тогда
			КолСтраниц1 = КолСтраниц1 + 1;
		КонецЕсли;
	КонецЦикла;
	
	УсловиеВыполнено = КолСтраниц1 = 0;
	
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "СуммаПерех3",
		"Сумма налога к уменьшению в местный бюджет (Раздел 1 Подраздел 1.1 В местный бюджет Строка 050)", Раздел1_1.СуммаПерех1_3, "",
		СтруктураРеквизитовФормы.мСохраненныйДок, "Раздел1_1", Неопределено, , СчетчикФормулДляРасшифровок);
	ЭтоОшибка = Не (Окр(Раздел1_1.СуммаПерех1_3) = Окр(Р7Ст300ДелР7Ст310));
	
	Расшифровка = "" + Окр(Раздел1_1.СуммаПерех1_3) + " = " + Окр(Р7Ст300ДелР7Ст310);
	
	Если УсловиеВыполнено И ЭтоОшибка Тогда
		ОписаниеНарушения = ?(Окр(Раздел1_1.СуммаПерех1_3) > Окр(Р7Ст300ДелР7Ст310), "Завышена сумма налога с базы переходного периода в местный бюджет", "Занижена сумма налога с базы переходного периода в местный бюджет");
		Норма = "ст. 45 НК РФ";
		ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
	Иначе
		ОписаниеНарушения = "";
		Норма = "";
		ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
	КонецЕсли;
	
	ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка,
		УсловиеВыполнено И ЭтоОшибка, ОписаниеНарушения, Норма);
	
	Если ОбщееЧислоОшибок + ОбщееЧислоБезОшибок > 0 Тогда
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок",    ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок",              СтруктураОшибок);
	КонецЕсли;
	
	Возврат СтруктураРезультата;
	
КонецФункции

&НаСервере
Функция ПроверкаРаздел1_2(СтруктураРезультата)
	
	ОбщееЧислоОшибок = СтруктураРезультата.КоличествоНайденныхОшибок; // Счетчик учета ошибок.
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок; // Счетчик учета проверенных соотношений, не являющиеся ошибками.
	
	СтруктураОшибок = СтруктураРезультата.СтруктураОшибок;
	
	Раздел1_2 = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаРаздел1_2;
	Раздел8   = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаРаздел8;
	
	ТекстФормулы = "Раздел 1.2";
	
	// Проверка 1.10
	
	ОписаниеКС = "Сумма налога к доплате (строка 030 Подраздела 1.2 Раздела 1) должна быть равна значению строки 050 Раздела 8.";
	СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
	РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(СписокРасшифровкиФормулы, ОписаниеКС, , СчетчикФормулДляРасшифровок);
	
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "СуммаДоплФед",
		"Сумма налога к доплате в федеральный бюджет (Раздел 1 Подраздел 1.2 Строка 030)", Раздел1_2.СуммаДоплФедРаздел12, "",
		СтруктураРеквизитовФормы.мСохраненныйДок, "Раздел1_2", Неопределено, , СчетчикФормулДляРасшифровок);
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000080005004",
		"Сумма налога к доплате в федеральный бюджет (Раздел 8 Строка 050)", Раздел8.П000080005004, "", СтруктураРеквизитовФормы.мСохраненныйДок,
		"Раздел8", Неопределено, , СчетчикФормулДляРасшифровок);
	ЭтоОшибка = Не (Окр(Раздел1_2.СуммаДоплФедРаздел12) = Окр(Раздел8.П000080005004));
	
	Расшифровка = "" + Окр(Раздел1_2.СуммаДоплФедРаздел12) + " = " + Окр(Раздел8.П000080005004);
	
	Если ЭтоОшибка Тогда
		ОписаниеНарушения = ?(Окр(Раздел1_2.СуммаДоплФедРаздел12) > Окр(Раздел8.П000080005004), "Завышена сумма налога к доплате", "Занижена сумма налога к доплате");
		Норма = "ст. 45 НК РФ";
		ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
	Иначе
		ОписаниеНарушения = "";
		Норма = "";
		ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
	КонецЕсли;
	
	ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, ЭтоОшибка, ОписаниеНарушения, Норма);
	
	// Проверка 1.11
	
	ОписаниеКС = "Сумма налога к уменьшению (строка 040 Подраздела 1.2 Раздела 1) должна быть равна значению строки 060 Раздела 8.";
	СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
	РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(СписокРасшифровкиФормулы, ОписаниеКС, , СчетчикФормулДляРасшифровок);
	
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "СуммаУменФед",
		"Сумма налога к уменьшению в федеральный бюджет (Раздел 1 Подраздел 1.2 Строка 040)", Раздел1_2.СуммаУменФедРаздел12, "",
		СтруктураРеквизитовФормы.мСохраненныйДок, "Раздел1_2", Неопределено, , СчетчикФормулДляРасшифровок);
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000080006004",
		"Сумма налога к уменьшению платежей в федеральный бюджет  (Раздел 8 Строка 060)", Раздел8.П000080006004, "",
		СтруктураРеквизитовФормы.мСохраненныйДок, "Раздел8", Неопределено, , СчетчикФормулДляРасшифровок);
	ЭтоОшибка = Не (Окр(Раздел1_2.СуммаУменФедРаздел12) = Окр(Раздел8.П000080006004));
	
	Расшифровка = "" + Окр(Раздел1_2.СуммаУменФедРаздел12) + " = " + Окр(Раздел8.П000080006004);
	
	Если ЭтоОшибка Тогда
		ОписаниеНарушения = ?(Окр(Раздел1_2.СуммаУменФедРаздел12) > Окр(Раздел8.П000080006004), "Завышена сумма налога к уменьшению", "Занижена сумма налога к уменьшению");
		Норма = "ст. 45 НК РФ";
		ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
	Иначе
		ОписаниеНарушения = "";
		Норма = "";
		ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
	КонецЕсли;
	
	ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, ЭтоОшибка, ОписаниеНарушения, Норма);
	
	Если ОбщееЧислоОшибок + ОбщееЧислоБезОшибок > 0 Тогда
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок",    ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок",              СтруктураОшибок);
	КонецЕсли;
	
	Возврат СтруктураРезультата;
	
КонецФункции

&НаСервере
Функция ПроверкаРаздел1_3(СтруктураРезультата)
	
	ОбщееЧислоОшибок = СтруктураРезультата.КоличествоНайденныхОшибок; // Счетчик учета ошибок.
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок; // Счетчик учета проверенных соотношений, не являющиеся ошибками.
	
	СтруктураОшибок = СтруктураРезультата.СтруктураОшибок;
	
	Раздел1_3 = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаРаздел1_3;
	Раздел9   = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаРаздел9;
	
	ТекстФормулы = "Раздел 1.3";
	
	// Проверка 1.12
	
	ОписаниеКС = "Сумма налога к доплате (строка 030 Подраздела 1.3 Раздела 1) должна быть равна значению строки 070 Раздела 9.";
	СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
	РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(СписокРасшифровкиФормулы, ОписаниеКС, , СчетчикФормулДляРасшифровок);
	
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "Сумма2ДоплФед",
		"Сумма налога к доплате в федеральный бюджет (Раздел 1 Подраздел 1.3 Строка 030)", Раздел1_3.СуммаДоплФедРаздел13, "",
		СтруктураРеквизитовФормы.мСохраненныйДок, "Раздел1_3", Неопределено, , СчетчикФормулДляРасшифровок);
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000090007004",
		"Сумма налога к доплате в федеральный бюджет (Раздел 9 Строка 070)", Раздел9.П000090007004, "", СтруктураРеквизитовФормы.мСохраненныйДок,
		"Раздел9", Неопределено, , СчетчикФормулДляРасшифровок);
	ЭтоОшибка = Не (Окр(Раздел1_3.СуммаДоплФедРаздел13) = Окр(Раздел9.П000090007004));
	
	Расшифровка = "" + Окр(Раздел1_3.СуммаДоплФедРаздел13) + " = " + Окр(Раздел9.П000090007004);
	
	Если ЭтоОшибка Тогда
		ОписаниеНарушения = ?(Окр(Раздел1_3.СуммаДоплФедРаздел13) > Окр(Раздел9.П000090007004), "Завышена сумма налога к доплате", "Занижена сумма налога к доплате");
		Норма = "ст. 45 НК РФ";
		ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
	Иначе
		ОписаниеНарушения = "";
		Норма = "";
		ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
	КонецЕсли;
	
	ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, ЭтоОшибка, ОписаниеНарушения, Норма);
	
	// Проверка 1.13
	
	ОписаниеКС = "Сумма налога к уменьшению (строка 040 Подраздела 1.3 Раздела 1) должна быть равна значению строки 080 Раздела 9.";
	СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
	РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(СписокРасшифровкиФормулы, ОписаниеКС, , СчетчикФормулДляРасшифровок);
	
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "Сумма2УменФед",
		"Сумма налога к уменьшению в федеральный бюджет (Раздел 1 Подраздел 1.3 Строка 040)", Раздел1_3.СуммаУменФедРаздел13, "",
		СтруктураРеквизитовФормы.мСохраненныйДок, "Раздел1_3", Неопределено, , СчетчикФормулДляРасшифровок);
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000090008004",
		"Сумма налога к уменьшению платежей в федеральный бюджет (Раздел 9 Строка 080)", Раздел9.П000090008004, "",
		СтруктураРеквизитовФормы.мСохраненныйДок, "Раздел9", Неопределено, , СчетчикФормулДляРасшифровок);
	ЭтоОшибка = Не (Окр(Раздел1_3.СуммаУменФедРаздел13) = Окр(Раздел9.П000090008004));
	
	Расшифровка = "" + Окр(Раздел1_3.СуммаУменФедРаздел13) + " = " + Окр(Раздел9.П000090008004);
	
	Если ЭтоОшибка Тогда
		ОписаниеНарушения = ?(Окр(Раздел1_3.СуммаУменФедРаздел13) > Окр(Раздел9.П000090008004), "Завышена сумма налога к уменьшению", "Занижена сумма налога к уменьшению");
		Норма = "ст. 45 НК РФ";
		ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
	Иначе
		ОписаниеНарушения = "";
		Норма = "";
		ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
	КонецЕсли;
	
	ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, ЭтоОшибка, ОписаниеНарушения, Норма);
	
	Если ОбщееЧислоОшибок + ОбщееЧислоБезОшибок > 0 Тогда
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок",    ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок",              СтруктураОшибок);
	КонецЕсли;
	
	Возврат СтруктураРезультата;
	
КонецФункции

&НаСервере
Функция ПроверкаРаздел5(СтруктураРезультата)
	
	ОбщееЧислоОшибок = СтруктураРезультата.КоличествоНайденныхОшибок; // Счетчик учета ошибок.
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок; // Счетчик учета проверенных соотношений, не являющиеся ошибками.
	
	СтруктураОшибок = СтруктураРезультата.СтруктураОшибок;
	
	Раздел5 = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить().ДанныеМногостраничныхРазделов.Раздел5;
	Раздел6 = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить().ДанныеМногостраничныхРазделов.Раздел6;
	Раздел7 = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить().ДанныеМногостраничныхРазделов.Раздел7;
	
	ТекстФормулы = "Раздел 5";
	
	// Проверка 1.14
	
	КоличествоСтраницР7 = Раздел7.Количество();
	
	Для Каждого СтраницаР5 Из Раздел5 Цикл
		НомерСтраницы = Раздел5.Индекс(СтраницаР5);
		НомерСтраницыСтр = Формат(НомерСтраницы + 1, "ЧГ=0");
		
		ОписаниеКС = "Величина налоговой базы для исчисления налога в федеральный бюджет (строка 340 Раздела 5) должна бытть равна значению строки 020 Раздела 7.";
		СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
		РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(СписокРасшифровкиФормулы, ОписаниеКС, , СчетчикФормулДляРасшифровок);
		
		Р5Ст340 = Окр(СтраницаР5.Данные.П000050034004);
		
		РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000050034004",
			"Налоговая база для исчисления налога в федеральный бюджет (Раздел 5 Строка 340" + " Страница " + НомерСтраницы + ")", Р5Ст340, "",
			СтруктураРеквизитовФормы.мСохраненныйДок, "Раздел5", Неопределено, НомерСтраницыСтр, СчетчикФормулДляРасшифровок);
		
		УсловиеВыполнено = Истина;
		Если КоличествоСтраницР7 >= НомерСтраницы + 1 Тогда 
			Р7Ст020 = Окр(Раздел7[НомерСтраницы].Данные.П000070002004);
			РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000070002004",
				"Налоговая база по деятельности в федеральный бюджет (Раздел 7 Строка 020" + " Страница " + НомерСтраницы + ")", Р7Ст020 , "",
				СтруктураРеквизитовФормы.мСохраненныйДок, "Раздел7", Неопределено, НомерСтраницыСтр, СчетчикФормулДляРасшифровок);
		Иначе
			УсловиеВыполнено = Ложь;
		КонецЕсли;
		
		Если УсловиеВыполнено Тогда 
			ЭтоОшибка = Не (Р5Ст340 = Р7Ст020);
			Расшифровка = "" + Р5Ст340 + " = " + Р7Ст020;
		Иначе
			ЭтоОшибка = Ложь;
			Расшифровка = "" + Р5Ст340 + " = [...]";
		КонецЕсли;
		
		Если УсловиеВыполнено И ЭтоОшибка Тогда
			ОписаниеНарушения = ?(Р5Ст340 < Р7Ст020, "Завышена налоговая база по налогу на прибыль, подлежащая уплате в федеральный бюджет",
				"Занижена налоговая база по налогу на прибыль, подлежащая уплате в федеральный бюджет");
			Норма = "ст. 45 НК РФ";
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
		Иначе
			ОписаниеНарушения = "";
			Норма = "";
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
		КонецЕсли;
		
		ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка,
			УсловиеВыполнено И ЭтоОшибка, ОписаниеНарушения, Норма);
	КонецЦикла;
	
	// Проверка 1.15
	
	КоличествоСтраницР7 = Раздел7.Количество();
	
	Для Каждого СтраницаР5 Из Раздел5 Цикл
		НомерСтраницы = Раздел5.Индекс(СтраницаР5);
		НомерСтраницыСтр = Формат(НомерСтраницы + 1, "ЧГ=0");
		
		ОписаниеКС = "Величина налоговой базы для исчисления налога в бюджет субъекта Российской Федерации (строка 350 Раздела 5) должна быть равна значению строки 030 Раздела 7.";
		СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
		РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(СписокРасшифровкиФормулы, ОписаниеКС, , СчетчикФормулДляРасшифровок);
		
		Р5Ст350 = Окр(СтраницаР5.Данные.П000050035004);
		РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000050035004",
			"Налоговая база для исчисления налога в бюджет субъекта Российской Федерации (Раздел 5 Строка 350" + " Страница " + НомерСтраницыСтр +
			")", , "", СтруктураРеквизитовФормы.мСохраненныйДок, "Раздел5", НомерСтраницыСтр, Неопределено, СчетчикФормулДляРасшифровок);
			
		УсловиеВыполнено = Истина;
		Если КоличествоСтраницР7 >= НомерСтраницы + 1 Тогда 
			Р7Ст030 = Окр(Раздел7[НомерСтраницы].Данные.П000070003004);
			РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000070003004",
				"Налоговая база по деятельности в федеральный бюджет (Раздел 7 Строка 030" + " Страница " + НомерСтраницыСтр + ")", Р7Ст030 , "", СтруктураРеквизитовФормы.мСохраненныйДок,
				"Раздел7", Неопределено, НомерСтраницыСтр, СчетчикФормулДляРасшифровок);
		Иначе
			УсловиеВыполнено = Ложь;
		КонецЕсли;
		
		Если УсловиеВыполнено Тогда 
			ЭтоОшибка = Не (Р5Ст350 = Р7Ст030);
			Расшифровка = "" + Р5Ст350 + " = " + Р7Ст030;
		Иначе
			ЭтоОшибка = Ложь;
			Расшифровка = "" + Р5Ст350 + " = [...]";
		КонецЕсли;
		
		Если УсловиеВыполнено И ЭтоОшибка Тогда
			ОписаниеНарушения = ?(Р5Ст350 < Р7Ст030, "Завышена налоговая база по налогу на прибыль, подлежащая уплате в бюджет субъекта РФ", "Занижена налоговая база по налогу на прибыль, подлежащая уплате в бюджет субъекта РФ");
			Норма = "ст. 45 НК РФ";
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
		Иначе
			ОписаниеНарушения = "";
			Норма = "";
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
		КонецЕсли;
		
		ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка,
			УсловиеВыполнено И ЭтоОшибка, ОписаниеНарушения, Норма);
	КонецЦикла;
	
	// Проверка 1.16
	
	КоличествоСтраницР7 = Раздел7.Количество();
	
	Для Каждого СтраницаР5 Из Раздел5 Цикл
		НомерСтраницы = Раздел5.Индекс(СтраницаР5);
		НомерСтраницыСтр = Формат(НомерСтраницы + 1, "ЧГ=0");
		
		ОписаниеКС = "Величина налоговой базы для исчисления налога в местный бюджет (строка 360 Раздела 5) должна быть равна значению строки 040 Раздела 7.";
		СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
		РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(СписокРасшифровкиФормулы, ОписаниеКС, , СчетчикФормулДляРасшифровок);
		
		УсловиеВыполнено = Истина;
		Если КоличествоСтраницР7 >= НомерСтраницы + 1 Тогда 
			Р7Ст040 = Окр(Раздел7[НомерСтраницы].Данные.П000070004004);
			РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000070004004",
				"Налоговая база по деятельности в местный бюджет (Раздел 7 Строка 040" + " Страница " + НомерСтраницыСтр + ")", Р7Ст040, "",
				СтруктураРеквизитовФормы.мСохраненныйДок, "Раздел7", Неопределено, НомерСтраницыСтр, СчетчикФормулДляРасшифровок);
		Иначе
			УсловиеВыполнено = Ложь;
		КонецЕсли;
		
		Р5Ст360 = Окр(СтраницаР5.Данные.П000050036004);
		РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000050036004",
			"Налоговая база для исчисления налога в местный бюджет (Раздел 5 Строка 360" + " Страница " + НомерСтраницыСтр + ")", Р5Ст360, "",
			СтруктураРеквизитовФормы.мСохраненныйДок, "Раздел5", Неопределено, НомерСтраницыСтр, СчетчикФормулДляРасшифровок);
		
		Если УсловиеВыполнено Тогда 
			ЭтоОшибка = Не (Р5Ст360 = Р7Ст040);
			Расшифровка = "" + Р5Ст360 + " = " + Р7Ст040;
		Иначе
			ЭтоОшибка = Ложь;
			Расшифровка = "" + Р5Ст360 + " = [...]";
		КонецЕсли;
		
		Если УсловиеВыполнено И ЭтоОшибка Тогда
			ОписаниеНарушения = ?(Р5Ст360 < Р7Ст040, "Завышена налоговая база по налогу на прибыль, подлежащая уплате в местный бюджет", "Занижена налоговая база по налогу на прибыль, подлежащая уплате в местный бюджет");
			Норма = "ст. 45 НК РФ";
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
		Иначе
			ОписаниеНарушения = "";
			Норма = "";
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
		КонецЕсли;
		
		ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, 
			УсловиеВыполнено И ЭтоОшибка, ОписаниеНарушения, Норма);
	КонецЦикла;
	
	// Проверка 1.17
	
	НомерСтраницы1 = 0;
	Для Каждого Страница1 Из Раздел5 Цикл
		НомерСтраницы1 = НомерСтраницы1 + 1;
		
		УсловиеВыполнено = Окр(Страница1.Данные.П000050029104) = 0;
		
		ОписаниеКС = "Величина налоговой базы для исчисления налога в федеральный бюджет (строка 340 Раздела 5) должна бытть равна результату вычитания значений строк 160, 260, 270, 280, 300 Раздела 5 из величины по строке 010 раздела 5, при условии, что в строке 291 Раздела 5 проставлен прочерк.";
		СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
		РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(СписокРасшифровкиФормулы, ОписаниеКС, , СчетчикФормулДляРасшифровок);
		
		РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000050034004",
			"Налоговая база для исчисления налога в федеральный бюджет (Раздел 5 Строка 340" + " Страница " + НомерСтраницы1 + ")",
			Страница1.Данные.П000050034004, "", СтруктураРеквизитовФормы.мСохраненныйДок, "Раздел5", Неопределено, НомерСтраницы1, 
			СчетчикФормулДляРасшифровок);
		РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000050001004",
			"Доходы иностранной организации - всего (Раздел 5 Строка 010" + " Страница " + НомерСтраницы1 + ")", Страница1.Данные.П000050001004, "",
			СтруктураРеквизитовФормы.мСохраненныйДок, "Раздел5", Неопределено, НомерСтраницы1, СчетчикФормулДляРасшифровок);
		РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000050016004",
			"Расходы организации всего - всего (Раздел 5 Строка 160" + " Страница " + НомерСтраницы1 + ")", Страница1.Данные.П000050016004, "",
			СтруктураРеквизитовФормы.мСохраненныйДок, "Раздел5", Неопределено, НомерСтраницы1, СчетчикФормулДляРасшифровок);
		РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000050026004",
			"Доходы от долевого участия (дивиденды) (Раздел 5 Строка 260" + " Страница " + НомерСтраницы1 + ")", Страница1.Данные.П000050026004, "",
			СтруктураРеквизитовФормы.мСохраненныйДок, "Раздел5", Неопределено, НомерСтраницы1, СчетчикФормулДляРасшифровок);
		РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000050027004",
			"Проценты по государственным и муниципальным ценным бумагам (Раздел 5 Строка 270" + " Страница " + НомерСтраницы1 + ")",
			Страница1.Данные.П000050027004, "", СтруктураРеквизитовФормы.мСохраненныйДок, "Раздел5", Неопределено, НомерСтраницы1,
			СчетчикФормулДляРасшифровок);
		РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000050028004",
			"Льготы, предусмотренные законодательством Российской Федерации о налогах и сборах (по отдельному расчету) (Раздел 5 Строка 280" + " Страница " + 
			НомерСтраницы1 + ")", Страница1.Данные.П000050028004, "", СтруктураРеквизитовФормы.мСохраненныйДок, "Раздел5", Неопределено,
			НомерСтраницы1, СчетчикФормулДляРасшифровок);
		РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000050030004",
			"Совокупная сумма переносимого убытка (по отдельному расчету) (Раздел 5 Строка 300" + " Страница " + НомерСтраницы1 + ")",
			Страница1.Данные.П000050030004, "", СтруктураРеквизитовФормы.мСохраненныйДок, "Раздел5", Неопределено, НомерСтраницы1,
			СчетчикФормулДляРасшифровок);
		ЭтоОшибка = Не (Окр(Страница1.Данные.П000050034004) = Окр(Страница1.Данные.П000050001004) - Окр(Страница1.Данные.П000050016004) - Окр(Страница1.Данные.П000050026004) - Окр(Страница1.Данные.П000050027004) - Окр(Страница1.Данные.П000050028004) - Окр(Страница1.Данные.П000050030004));
		
		Расшифровка = "" + Окр(Страница1.Данные.П000050034004) + " = " + Окр(Страница1.Данные.П000050001004) + " - " + Окр(Страница1.Данные.П000050016004) + " - " + Окр(Страница1.Данные.П000050026004) + " - " + Окр(Страница1.Данные.П000050027004) + " - " + Окр(Страница1.Данные.П000050028004) + " - " + Окр(Страница1.Данные.П000050030004) + " Итог [" + (Окр(Страница1.Данные.П000050001004) - Окр(Страница1.Данные.П000050016004) - Окр(Страница1.Данные.П000050026004) - Окр(Страница1.Данные.П000050027004) - Окр(Страница1.Данные.П000050028004) - Окр(Страница1.Данные.П000050030004)) + "]";
		
		Если УсловиеВыполнено И ЭтоОшибка Тогда
			ОписаниеНарушения = ?(Окр(Страница1.Данные.П000050034004) > Окр(Страница1.Данные.П000050001004) - Окр(Страница1.Данные.П000050016004) - Окр(Страница1.Данные.П000050026004) - Окр(Страница1.Данные.П000050027004) - Окр(Страница1.Данные.П000050028004) - Окр(Страница1.Данные.П000050030004), "Завышена налоговая база по налогу на прибыль, подлежащая уплате в федеральный бюджет", "Занижена налоговая база по налогу на прибыль, подлежащая уплате в федеральный бюджет");
			Норма = "ст. 45 НК РФ";
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
		Иначе
			ОписаниеНарушения = "";
			Норма = "";
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
		КонецЕсли;
		
		ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, 
			УсловиеВыполнено И ЭтоОшибка, ОписаниеНарушения, Норма);
	
	КонецЦикла;
	
	// Проверка 1.18
	
	НомерСтраницы1 = 0;
	Для Каждого Страница1 Из Раздел5 Цикл
		НомерСтраницы1 = НомерСтраницы1 + 1;
		
		УсловиеВыполнено = Окр(Страница1.Данные.П000050029104) = 0;
		
		ОписаниеКС = "Величина налоговой базы для исчисления налога в бюджет субъекта Российской Федерации (строка 350 Раздела 5) должна быть равна результату вычитания значений строк 160, 260, 270, 280, 300, 320 Раздела 5 из величины по строке 010 Раздела 5, при условии, что в строке 291 Раздела 5 проставлен прочерк.";
		СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
		РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(СписокРасшифровкиФормулы, ОписаниеКС, , СчетчикФормулДляРасшифровок);
		
		РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000050035004",
			"Налоговая база для исчисления налога в бюджет субъекта Российской Федерации (Раздел 5 Строка 350" + " Страница " + НомерСтраницы1 +
			")", Страница1.Данные.П000050035004, "", СтруктураРеквизитовФормы.мСохраненныйДок, "Раздел5", Неопределено, НомерСтраницы1,
			СчетчикФормулДляРасшифровок);
		РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000050001004",
			"Доходы иностранной организации - всего (Раздел 5 Строка 010" + " Страница " + НомерСтраницы1 + ")", Страница1.Данные.П000050001004,
			"", СтруктураРеквизитовФормы.мСохраненныйДок, "Раздел5", Неопределено, НомерСтраницы1, СчетчикФормулДляРасшифровок);
		РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000050016004",
			"Расходы организации всего - всего (Раздел 5 Строка 160" + " Страница " + НомерСтраницы1 + ")", Страница1.Данные.П000050016004, "",
			СтруктураРеквизитовФормы.мСохраненныйДок, "Раздел5", Неопределено, НомерСтраницы1, СчетчикФормулДляРасшифровок);
		РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000050026004", 
			"Доходы от долевого участия (дивиденды) (Раздел 5 Строка 260" + " Страница " + НомерСтраницы1 + ")", Страница1.Данные.П000050026004, "",
			СтруктураРеквизитовФормы.мСохраненныйДок, "Раздел5", Неопределено, НомерСтраницы1, СчетчикФормулДляРасшифровок);
		РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000050027004",
			"Проценты по государственным и муниципальным ценным бумагам (Раздел 5 Строка 270" + " Страница " + НомерСтраницы1 + ")",
			Страница1.Данные.П000050027004, "", СтруктураРеквизитовФормы.мСохраненныйДок, "Раздел5", Неопределено, НомерСтраницы1, 
			СчетчикФормулДляРасшифровок);
		РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000050028004", 
			"Льготы, предусмотренные законодательством Российской Федерации о налогах и сборах (по отдельному расчету) (Раздел 5 Строка 280" + " Страница " + 
			НомерСтраницы1 + ")", Страница1.Данные.П000050028004, "", СтруктураРеквизитовФормы.мСохраненныйДок, "Раздел5", Неопределено,
			НомерСтраницы1, СчетчикФормулДляРасшифровок);
		РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000050030004",
			"Совокупная сумма переносимого убытка (по отдельному расчету) (Раздел 5 Строка 300" + " Страница " + НомерСтраницы1 + ")",
			Страница1.Данные.П000050030004, "", СтруктураРеквизитовФормы.мСохраненныйДок, "Раздел5", Неопределено, НомерСтраницы1,
			СчетчикФормулДляРасшифровок);
		РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000050032004",
			"Сумма прибыли, исключаемая из налоговой базы по бюджету субъекта Российской Федерации в связи с предоставлением дополнительных льгот (по отдельному расчету) (Раздел 5 Строка 320" + " Страница " + 
			НомерСтраницы1 + ")", Страница1.Данные.П000050032004, "", СтруктураРеквизитовФормы.мСохраненныйДок, "Раздел5", Неопределено,
			НомерСтраницы1, СчетчикФормулДляРасшифровок);
		ЭтоОшибка = Не (Окр(Страница1.Данные.П000050035004) = Окр(Страница1.Данные.П000050001004) - Окр(Страница1.Данные.П000050016004) - Окр(Страница1.Данные.П000050026004) - Окр(Страница1.Данные.П000050027004) - Окр(Страница1.Данные.П000050028004) - Окр(Страница1.Данные.П000050030004) - Окр(Страница1.Данные.П000050032004));
		
		Расшифровка = "" + Окр(Страница1.Данные.П000050035004) + " = " + Окр(Страница1.Данные.П000050001004) + " - " + Окр(Страница1.Данные.П000050016004) + " - " + Окр(Страница1.Данные.П000050026004) + " - " + Окр(Страница1.Данные.П000050027004) + " - " + Окр(Страница1.Данные.П000050028004) + " - " + Окр(Страница1.Данные.П000050030004) + " - " + Окр(Страница1.Данные.П000050032004) + " Итог [" + (Окр(Страница1.Данные.П000050001004) - Окр(Страница1.Данные.П000050016004) - Окр(Страница1.Данные.П000050026004) - Окр(Страница1.Данные.П000050027004) - Окр(Страница1.Данные.П000050028004) - Окр(Страница1.Данные.П000050030004) - Окр(Страница1.Данные.П000050032004)) + "]";
		
		Если УсловиеВыполнено И ЭтоОшибка Тогда
			ОписаниеНарушения = ?(Окр(Страница1.Данные.П000050035004) > Окр(Страница1.Данные.П000050001004) - Окр(Страница1.Данные.П000050016004) - Окр(Страница1.Данные.П000050026004) - Окр(Страница1.Данные.П000050027004) - Окр(Страница1.Данные.П000050028004) - Окр(Страница1.Данные.П000050030004) - Окр(Страница1.Данные.П000050032004), "Завышена налоговая база по налогу на прибыль, подлежащая уплате в бюджет субъекта РФ", "Занижена налоговая база по налогу на прибыль, подлежащая уплате в бюджет субъекта РФ");
			Норма = "ст. 45 НК РФ";
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
		Иначе
			ОписаниеНарушения = "";
			Норма = "";
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
		КонецЕсли;
		
		ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, 
			УсловиеВыполнено И ЭтоОшибка, ОписаниеНарушения, Норма);
		
	КонецЦикла;
	
	// Проверка 1.19
	
	НомерСтраницы1 = 0;
	Для Каждого Страница1 Из Раздел5 Цикл
		НомерСтраницы1 = НомерСтраницы1 + 1;
		УсловиеВыполнено = Окр(Страница1.Данные.П000050029104) = 0;
	
		ОписаниеКС = "Величина налоговой базы для исчисления налога в местный бюджет (строка 360 Раздела 5) должна быть равна результату вычитания значений строк 160, 260, 270, 280, 300, 330 Раздела 5 из величины по строке 010 Раздела 5, при условии, что в строке 291 Раздела 5 проставлен прочерк.";
		СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
		РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(СписокРасшифровкиФормулы, ОписаниеКС, , СчетчикФормулДляРасшифровок);
		
		РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000050036004",
			"Налоговая база для исчисления налога в местный бюджет (Раздел 5 Строка 360" + " Страница " + НомерСтраницы1 + ")",
			Страница1.Данные.П000050036004, "", СтруктураРеквизитовФормы.мСохраненныйДок, "Раздел5", Неопределено, НомерСтраницы1,
			СчетчикФормулДляРасшифровок);
		РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000050001004",
			"Доходы иностранной организации - всего (Раздел 5 Строка 010" + " Страница " + НомерСтраницы1 + ")", Страница1.Данные.П000050001004, "",
			СтруктураРеквизитовФормы.мСохраненныйДок, "Раздел5", Неопределено, НомерСтраницы1, СчетчикФормулДляРасшифровок);
		РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000050016004",
			"Расходы организации всего - всего (Раздел 5 Строка 160" + " Страница " + НомерСтраницы1 + ")", Страница1.Данные.П000050016004, "",
			СтруктураРеквизитовФормы.мСохраненныйДок, "Раздел5", Неопределено, НомерСтраницы1, СчетчикФормулДляРасшифровок);
		РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000050026004",
			"Доходы от долевого участия (дивиденды) (Раздел 5 Строка 260" + " Страница " + НомерСтраницы1 + ")", Страница1.Данные.П000050026004, "",
			СтруктураРеквизитовФормы.мСохраненныйДок, "Раздел5", Неопределено, НомерСтраницы1, СчетчикФормулДляРасшифровок);
		РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000050027004",
			"Проценты по государственным и муниципальным ценным бумагам (Раздел 5 Строка 270" + " Страница " + НомерСтраницы1 + ")",
			Страница1.Данные.П000050027004, "", СтруктураРеквизитовФормы.мСохраненныйДок, "Раздел5", Неопределено, НомерСтраницы1, 
			СчетчикФормулДляРасшифровок);
		РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000050028004",
			"Льготы, предусмотренные законодательством Российской Федерации о налогах и сборах (по отдельному расчету) (Раздел 5 Строка 280" + " Страница " +
			НомерСтраницы1 + ")", Страница1.Данные.П000050028004,  "", СтруктураРеквизитовФормы.мСохраненныйДок, "Раздел5", Неопределено,
			НомерСтраницы1, СчетчикФормулДляРасшифровок);
		РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000050030004",
			"Совокупная сумма переносимого убытка (по отдельному расчету) (Раздел 5 Строка 300" + " Страница " + НомерСтраницы1 + ")",
			Страница1.Данные.П000050030004, "", СтруктураРеквизитовФормы.мСохраненныйДок, "Раздел5", Неопределено, НомерСтраницы1,
			СчетчикФормулДляРасшифровок);
		РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000050033004",
			"Сумма прибыли, исключаемая из налоговой базы по местному бюджету в связи с предоставлением дополнительных льгот (по отдельному расчету)  (Раздел 5 Строка 330" + 
			" Страница " + НомерСтраницы1 + ")", Страница1.Данные.П000050033004, "", СтруктураРеквизитовФормы.мСохраненныйДок, "Раздел5",
			Неопределено, НомерСтраницы1, СчетчикФормулДляРасшифровок);
		ЭтоОшибка = Не (Окр(Страница1.Данные.П000050036004) = Окр(Страница1.Данные.П000050001004) - Окр(Страница1.Данные.П000050016004) - Окр(Страница1.Данные.П000050026004) - Окр(Страница1.Данные.П000050027004) - Окр(Страница1.Данные.П000050028004) - Окр(Страница1.Данные.П000050030004) - Окр(Страница1.Данные.П000050033004));
		
		Расшифровка = "" + Окр(Страница1.Данные.П000050036004) + " = " + Окр(Страница1.Данные.П000050001004) + " - " + Окр(Страница1.Данные.П000050016004) + " - " + Окр(Страница1.Данные.П000050026004) + " - " + Окр(Страница1.Данные.П000050027004) + " - " + Окр(Страница1.Данные.П000050028004) + " - " + Окр(Страница1.Данные.П000050030004) + " - " + Окр(Страница1.Данные.П000050033004) + " Итог [" + (Окр(Страница1.Данные.П000050001004) - Окр(Страница1.Данные.П000050016004) - Окр(Страница1.Данные.П000050026004) - Окр(Страница1.Данные.П000050027004) - Окр(Страница1.Данные.П000050028004) - Окр(Страница1.Данные.П000050030004) - Окр(Страница1.Данные.П000050033004)) + "]";
		
		Если УсловиеВыполнено И ЭтоОшибка Тогда
			ОписаниеНарушения = ?(Окр(Страница1.Данные.П000050036004) > Окр(Страница1.Данные.П000050001004) - Окр(Страница1.Данные.П000050016004) - Окр(Страница1.Данные.П000050026004) - Окр(Страница1.Данные.П000050027004) - Окр(Страница1.Данные.П000050028004) - Окр(Страница1.Данные.П000050030004) - Окр(Страница1.Данные.П000050033004), "Завышена налоговая база по налогу на прибыль, подлежащая уплате в местный бюджет", "Занижена налоговая база по налогу на прибыль, подлежащая уплате в местный бюджет");
			Норма = "ст. 45 НК РФ";
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
		Иначе
			ОписаниеНарушения = "";
			Норма = "";
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
		КонецЕсли;
		
		ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка,
			УсловиеВыполнено И ЭтоОшибка, ОписаниеНарушения, Норма);
		
	КонецЦикла;
	
	// Проверка 1.20
	
	НомерСтраницы1 = 0;
	Для Каждого Страница1 Из Раздел5 Цикл
		НомерСтраницы1 = НомерСтраницы1 + 1;
		ОписаниеКС = "Сумма доходов иностранной организации - всего (строка 010 Раздела 5) должна быть равна сумме величин по строкам 020 и 060 Раздела 5.";
		СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
		РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(СписокРасшифровкиФормулы, ОписаниеКС, , СчетчикФормулДляРасшифровок);
		
		РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000050001004",
			"Доходы иностранной организации - всего (Раздел 5 Строка 010" + " Страница " + НомерСтраницы1 + ")", Страница1.Данные.П000050001004, "",
			СтруктураРеквизитовФормы.мСохраненныйДок, "Раздел5", Неопределено, НомерСтраницы1, СчетчикФормулДляРасшифровок);
		РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000050002004",
			"Доходы от реализации - всего (Раздел 5 Строка 020" + " Страница " + НомерСтраницы1 + ")", Страница1.Данные.П000050002004, "",
			СтруктураРеквизитовФормы.мСохраненныйДок, "Раздел5", Неопределено, НомерСтраницы1, СчетчикФормулДляРасшифровок);
		РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000050006004",
			"Внереализационные доходы - всего (Раздел 5 Строка 060" + " Страница " + НомерСтраницы1 + ")", Страница1.Данные.П000050006004, "",
			СтруктураРеквизитовФормы.мСохраненныйДок, "Раздел5", Неопределено, НомерСтраницы1, СчетчикФормулДляРасшифровок);
		ЭтоОшибка = Не (Окр(Страница1.Данные.П000050001004) = Окр(Страница1.Данные.П000050002004) + Окр(Страница1.Данные.П000050006004));
		
		Расшифровка = "" + Окр(Страница1.Данные.П000050001004) + " = " + Окр(Страница1.Данные.П000050002004) + " + " + Окр(Страница1.Данные.П000050006004) + " Итог [" + (Окр(Страница1.Данные.П000050002004) + Окр(Страница1.Данные.П000050006004)) + "]";
		
		Если ЭтоОшибка Тогда
			ОписаниеНарушения = ?(Окр(Страница1.Данные.П000050001004) > Окр(Страница1.Данные.П000050002004) + Окр(Страница1.Данные.П000050006004), "Завышена налоговая база", "Занижена налоговая база");
			Норма = "ст. 45 НК РФ";
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
		Иначе
			ОписаниеНарушения = "";
			Норма = "";
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
		КонецЕсли;
		
		ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, ЭтоОшибка, ОписаниеНарушения, Норма);
	КонецЦикла;
	
	// Проверка 1.21
	
	НомерСтраницы1 = 0;
	Для Каждого Страница1 Из Раздел5 Цикл
		НомерСтраницы1 = НомерСтраницы1 + 1;
		ОписаниеКС = "Сумма доходов от реализации - всего (строка 020 Раздела 5) должна быть равна сумме значений по строкам 030, 040, 050 Раздела 5.";
		СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
		РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(СписокРасшифровкиФормулы, ОписаниеКС, , СчетчикФормулДляРасшифровок);
		
		ЭтоОшибка = Не (Окр(Страница1.Данные.П000050002004) = Окр(Страница1.Данные.П000050003004) + Окр(Страница1.Данные.П000050004004) + Окр(Страница1.Данные.П000050005004));
		
		РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000050002004",
			"Доходы от реализации - всего (Раздел 5 Строка 020" + " Страница " + НомерСтраницы1 + ")", Страница1.Данные.П000050002004, "",
			СтруктураРеквизитовФормы.мСохраненныйДок, "Раздел5", Неопределено, НомерСтраницы1, СчетчикФормулДляРасшифровок);
		РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000050003004",
			"Доходы от реализации товаров, работ, услуг (Раздел 5 Строка 030" + " Страница " + НомерСтраницы1 + ")", Страница1.Данные.П000050003004,
			"", СтруктураРеквизитовФормы.мСохраненныйДок, "Раздел5", Неопределено, НомерСтраницы1, СчетчикФормулДляРасшифровок);
		РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000050004004",
			"Доходы от реализации имущества (кроме ценных бумаг) (Раздел 5 Строка 040" + " Страница " + НомерСтраницы1 + ")",
			Страница1.Данные.П000050004004, "", СтруктураРеквизитовФормы.мСохраненныйДок, "Раздел5", Неопределено, НомерСтраницы1,
			СчетчикФормулДляРасшифровок);
		РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000050005004",
			"Доходы от реализации имущественных прав (Раздел 5 Строка 050" + " Страница " + НомерСтраницы1 + ")", Страница1.Данные.П000050005004,
			"", СтруктураРеквизитовФормы.мСохраненныйДок, "Раздел5", Неопределено, НомерСтраницы1, СчетчикФормулДляРасшифровок);
		Расшифровка = "" + Окр(Страница1.Данные.П000050002004) + " = " + Окр(Страница1.Данные.П000050003004) + " + " + Окр(Страница1.Данные.П000050004004) + " + " + Окр(Страница1.Данные.П000050006004) + " Итог [" + (Окр(Страница1.Данные.П000050003004) + Окр(Страница1.Данные.П000050004004) + Окр(Страница1.Данные.П000050005004)) + "]";
		
		Если ЭтоОшибка Тогда
			ОписаниеНарушения = ?(Окр(Страница1.Данные.П000050002004) > Окр(Страница1.Данные.П000050003004) + Окр(Страница1.Данные.П000050004004) + Окр(Страница1.Данные.П000050005004), "Завышена налоговая база", "Занижена налоговая база");
			Норма = "ст. 45 НК РФ";
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
		Иначе
			ОписаниеНарушения = "";
			Норма = "";
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
		КонецЕсли;
		
		ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, ЭтоОшибка, ОписаниеНарушения, Норма);
	КонецЦикла;
	
	// Проверка 1.22
	НомерСтраницы1 = 0;
	Для Каждого Страница1 Из Раздел5 Цикл
		НомерСтраницы1 = НомерСтраницы1 + 1;
		ОписаниеКС = "Сумма внереализационных доходов - всего (строка 060 Раздела 5) должна быть равна сумме значений по строкам 070, 080, 100, 110, 120, 130, 140, 150 Раздела 5.";
		СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
		РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(СписокРасшифровкиФормулы, ОписаниеКС, , СчетчикФормулДляРасшифровок);
		
		РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000050006004",
			"Внереализационные доходы - всего (Раздел 5 Строка 060" + " Страница " + НомерСтраницы1 + ")", Страница1.Данные.П000050006004, "",
			СтруктураРеквизитовФормы.мСохраненныйДок, "Раздел5", Неопределено, НомерСтраницы1, СчетчикФормулДляРасшифровок);
		РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000050007004",
			"Доходы от долевого участия (дивиденды) (Раздел 5 Строка 070" + " Страница " + НомерСтраницы1 + ")", Страница1.Данные.П000050007004, "",
			СтруктураРеквизитовФормы.мСохраненныйДок, "Раздел5", Неопределено, НомерСтраницы1, СчетчикФормулДляРасшифровок);
		РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000050008004",
			"Проценты (Раздел 5 Строка 080" + " Страница " + НомерСтраницы1 + ")", Страница1.Данные.П000050008004, "",
			СтруктураРеквизитовФормы.мСохраненныйДок, "Раздел5", Неопределено, НомерСтраницы1, СчетчикФормулДляРасшифровок);
		РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000050010004",
			"Доходы от предоставления в пользование прав на результаты интеллектуальной деятельности (лицензионные доходы) (Раздел 5 Строка 100" +
			" Страница " + НомерСтраницы1 + ")", Страница1.Данные.П000050010004, "", СтруктураРеквизитовФормы.мСохраненныйДок, "Раздел5",
			Неопределено, НомерСтраницы1, СчетчикФормулДляРасшифровок);
		РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000050011004",
			"Доходы от сдачи имущества в аренду (Раздел 5 Строка 110" + " Страница " + НомерСтраницы1 + ")", Страница1.Данные.П000050011004, "",
			СтруктураРеквизитовФормы.мСохраненныйДок, "Раздел5", Неопределено, НомерСтраницы1, СчетчикФормулДляРасшифровок);
		РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000050012004",
			"Доходы в виде безвозмездно полученного имущества (Раздел 5 Строка 120" + " Страница " + НомерСтраницы1 + ")",
			Страница1.Данные.П000050012004, "", СтруктураРеквизитовФормы.мСохраненныйДок, "Раздел5", Неопределено, НомерСтраницы1, 
			СчетчикФормулДляРасшифровок);
		РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000050013004",
			"Доходы прошлых лет, выявленные в отчетном (налоговом) периоде (Раздел 5 Строка 130" + " Страница " + НомерСтраницы1 + ")",
			Страница1.Данные.П000050013004, "", СтруктураРеквизитовФормы.мСохраненныйДок, "Раздел5", Неопределено, НомерСтраницы1,
			СчетчикФормулДляРасшифровок);
		РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000050014004",
			"Доходы в виде положительной курсовой разницы (Раздел 5 Строка 140" + " Страница " + НомерСтраницы1 + ")",
			Страница1.Данные.П000050014004, "", СтруктураРеквизитовФормы.мСохраненныйДок, "Раздел5", Неопределено, НомерСтраницы1,
			СчетчикФормулДляРасшифровок);
		РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000050015004",
			"Другие внереализационные доходы (Раздел 5 Строка 150" + " Страница " + НомерСтраницы1 + ")", Страница1.Данные.П000050015004, "",
			СтруктураРеквизитовФормы.мСохраненныйДок, "Раздел5", Неопределено, НомерСтраницы1, СчетчикФормулДляРасшифровок);
		ЭтоОшибка = Не (Окр(Страница1.Данные.П000050006004) = Окр(Страница1.Данные.П000050007004) + Окр(Страница1.Данные.П000050008004) + Окр(Страница1.Данные.П000050010004) + Окр(Страница1.Данные.П000050011004) + Окр(Страница1.Данные.П000050012004) + Окр(Страница1.Данные.П000050013004) + Окр(Страница1.Данные.П000050014004) + Окр(Страница1.Данные.П000050015004));
		
		Расшифровка = "" + Окр(Страница1.Данные.П000050006004) + " = " + Окр(Страница1.Данные.П000050007004) + " + " + Окр(Страница1.Данные.П000050008004) + " + " + Окр(Страница1.Данные.П000050010004) + " + " + Окр(Страница1.Данные.П000050011004) + " + " + Окр(Страница1.Данные.П000050012004) + " + " + Окр(Страница1.Данные.П000050013004) + " + " + Окр(Страница1.Данные.П000050014004) + " + " + Окр(Страница1.Данные.П000050015004) + " Итог [" + (Окр(Страница1.Данные.П000050007004) + Окр(Страница1.Данные.П000050008004) + Окр(Страница1.Данные.П000050010004) + Окр(Страница1.Данные.П000050011004) + Окр(Страница1.Данные.П000050012004) + Окр(Страница1.Данные.П000050013004) + Окр(Страница1.Данные.П000050014004) + Окр(Страница1.Данные.П000050015004)) + "]";
		
		Если ЭтоОшибка Тогда
			ОписаниеНарушения = ?(Окр(Страница1.Данные.П000050006004) > Окр(Страница1.Данные.П000050007004) + Окр(Страница1.Данные.П000050008004) + Окр(Страница1.Данные.П000050010004) + Окр(Страница1.Данные.П000050011004) + Окр(Страница1.Данные.П000050012004) + Окр(Страница1.Данные.П000050013004) + Окр(Страница1.Данные.П000050014004) + Окр(Страница1.Данные.П000050015004), "Завышена налоговая база", "Занижена налоговая база");
			Норма = "ст. 45 НК РФ";
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
		Иначе
			ОписаниеНарушения = "";
			Норма = "";
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
		КонецЕсли;
		
		ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, ЭтоОшибка, ОписаниеНарушения, Норма);
	КонецЦикла;
	
	// Проверка 1.23
	
	КоличествоСтраницР5 = Раздел5.Количество();
	
	Для Каждого СтраницаР6 Из Раздел6 Цикл
		НомерСтраницы = Раздел6.Индекс(СтраницаР6);
		НомерСтраницыСтр = Формат(НомерСтраницы + 1, "ЧГ=0");
		
		ОписаниеКС = "Сумма расходов, связанных с производством и реализацией (строка 180 Раздела 5) должна быть равна величине строки 160 Раздела 6.";
		СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
		РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(СписокРасшифровкиФормулы, ОписаниеКС, , СчетчикФормулДляРасшифровок);
		
		Р6Ст160 = Окр(СтраницаР6.Данные.П000060016004);
		РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000060016004",
			"Итого расходов (Раздел 6 Строка 160" + " Страница " + НомерСтраницы + ")", Р6Ст160, "", СтруктураРеквизитовФормы.мСохраненныйДок,
			"Раздел6", Неопределено, НомерСтраницы, СчетчикФормулДляРасшифровок);
		
		УсловиеВыполнено = Истина;
		Если КоличествоСтраницР5 >= НомерСтраницы + 1 Тогда 
			Р5Ст180 = Окр(Раздел5[НомерСтраницы].Данные.П000050018004);
			РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000050018004",
				"Расходы, связанные с производством и реализацией (Раздел 5 Строка 180" + " Страница " + НомерСтраницы + ")", Р5Ст180, "",
				СтруктураРеквизитовФормы.мСохраненныйДок, "Раздел5", Неопределено, НомерСтраницыСтр, СчетчикФормулДляРасшифровок);
		Иначе
			УсловиеВыполнено = Ложь;
		КонецЕсли;
		
		Если УсловиеВыполнено Тогда 
			ЭтоОшибка = Не (Р5Ст180 = Р6Ст160);
			Расшифровка = "" + Р5Ст180 + " = " + Р6Ст160;
		Иначе
			ЭтоОшибка = Ложь;
			Расшифровка = "[...] = " + Р6Ст160;
		КонецЕсли;
		
		Если УсловиеВыполнено И ЭтоОшибка Тогда
			ОписаниеНарушения = ?(Р5Ст180 > Р6Ст160, "Завышена налоговая база", "Занижена налоговая база");
			Норма = "ст. 45 НК РФ";
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
		Иначе
			ОписаниеНарушения = "";
			Норма = "";
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
		КонецЕсли;
		
		ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка,
			УсловиеВыполнено И ЭтоОшибка, ОписаниеНарушения, Норма);
	
	КонецЦикла;
	
	// Проверка 1.24
	
	НомерСтраницы1 = 0;
	Для Каждого Страница1 Из Раздел5 Цикл
		НомерСтраницы1 = НомерСтраницы1 + 1;
		ОписаниеКС = "Налоговая база по специальному расчету (строка 291 Раздела 5) должна быть равна нулю.";
		СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
		РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(СписокРасшифровкиФормулы, ОписаниеКС, , СчетчикФормулДляРасшифровок);
		
		РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000050029104",
			"Налоговая база по специальному расчету (Раздел 5 Строка 291" + " Страница " + НомерСтраницы1 + ")", Страница1.Данные.П000050029104, "",
			СтруктураРеквизитовФормы.мСохраненныйДок, "Раздел5", Неопределено, НомерСтраницы1, СчетчикФормулДляРасшифровок);
		ЭтоОшибка = Не (Окр(Страница1.Данные.П000050029104) = 0);
		
		Расшифровка = "" + Окр(Страница1.Данные.П000050029104) + " = 0";
		
		Если ЭтоОшибка Тогда
			ОписаниеНарушения = ?(Окр(Страница1.Данные.П000050029104) > 0, "Возможно, занижена налоговая база вследствие необоснованного применения условного метода определения налоговой базы", "");
			Норма = "п. 3 ст. 307 НК РФ";
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
		Иначе
			ОписаниеНарушения = "";
			Норма = "";
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
		КонецЕсли;
		
		ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, ЭтоОшибка, ОписаниеНарушения, Норма);
	КонецЦикла;
	
	// Проверка 1.25
	
	НомерСтраницы1 = 0;
	Для Каждого Страница1 Из Раздел5 Цикл
		НомерСтраницы1 = НомерСтраницы1 + 1;
		ОписаниеКС = "Сумма льгот, предусмотренных законодательством РФ (строка 280 Раздела 5), должна быть равна нулю.";
		СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
		РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(СписокРасшифровкиФормулы, ОписаниеКС, , СчетчикФормулДляРасшифровок);
		
		РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000050028004",
			"Льготы, предусмотренные законодательством Российской Федерации о налогах и сборах (по отдельному расчету) (Раздел 5 Строка 280" + 
			" Страница " + НомерСтраницы1 + ")", Страница1.Данные.П000050028004, "", СтруктураРеквизитовФормы.мСохраненныйДок, "Раздел5",
			Неопределено, НомерСтраницы1, СчетчикФормулДляРасшифровок);
		ЭтоОшибка = Не (Окр(Страница1.Данные.П000050028004) = 0);
		
		Расшифровка = "" + Окр(Страница1.Данные.П000050028004) + " = 0";
		
		Если ЭтоОшибка Тогда
			ОписаниеНарушения = ?(Окр(Страница1.Данные.П000050028004) > 0, "Возможно, занижена налоговая база  вследствие необоснованного использования льгот", "");
			Норма = "ст. 2 Закона РФ от 06.08.2001 №110-ФЗ";
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
		Иначе
			ОписаниеНарушения = "";
			Норма = "";
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
		КонецЕсли;
		
		ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, ЭтоОшибка, ОписаниеНарушения, Норма);
	КонецЦикла;
	
	// Проверка 1.26
	
	НомерСтраницы1 = 0;
	Для Каждого Страница1 Из Раздел5 Цикл
		НомерСтраницы1 = НомерСтраницы1 + 1;
		ОписаниеКС = "Совокупная сумма переносимого убытка (строка 300 Раздела 5), должна быть равна нулю.";
		СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
		РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(СписокРасшифровкиФормулы, ОписаниеКС, , СчетчикФормулДляРасшифровок);
		
		РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000050030004",
			"Совокупная сумма переносимого убытка (по отдельному расчету) (Раздел 5 Строка 300" + " Страница " + НомерСтраницы1 + ")",
			Страница1.Данные.П000050030004, "", СтруктураРеквизитовФормы.мСохраненныйДок, "Раздел5", Неопределено, НомерСтраницы1, 
			СчетчикФормулДляРасшифровок);
		ЭтоОшибка = Не (Окр(Страница1.Данные.П000050030004) = 0);
		
		Расшифровка = "" + Окр(Страница1.Данные.П000050030004) + " = 0";
		
		Если ЭтоОшибка Тогда
			ОписаниеНарушения = ?(Окр(Страница1.Данные.П000050030004) > 0, "Возможно, необоснованное занижение налоговой базы вследствие нарушения правил перноса убытка", "");
			Норма = "п.2 ст. 283 НК РФ";
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
		Иначе
			ОписаниеНарушения = "";
			Норма = "";
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
		КонецЕсли;
		
		ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, ЭтоОшибка, ОписаниеНарушения, Норма);
	КонецЦикла;
	
	Если ОбщееЧислоОшибок + ОбщееЧислоБезОшибок > 0 Тогда
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок",    ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок",              СтруктураОшибок);
	КонецЕсли;
	
	Возврат СтруктураРезультата;
	
КонецФункции

&НаСервере
Функция ПроверкаРаздел6(СтруктураРезультата)
	
	ОбщееЧислоОшибок = СтруктураРезультата.КоличествоНайденныхОшибок; // Счетчик учета ошибок.
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок; // Счетчик учета проверенных соотношений, не являющиеся ошибками.
	
	СтруктураОшибок = СтруктураРезультата.СтруктураОшибок;
	
	Раздел5 = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить().ДанныеМногостраничныхРазделов.Раздел5;
	Раздел6 = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить().ДанныеМногостраничныхРазделов.Раздел6;
	
	ТекстФормулы = "Раздел 6";
	
	// Проверка 1.27
	
	НомерСтраницы1 = 0;
	Для Каждого Страница1 Из Раздел6 Цикл
		НомерСтраницы1 = НомерСтраницы1 + 1;
		ОписаниеКС = "Итоговая сумма расходов (строка 160 Раздела 6) должна быть равна сумме показателей строк 010, 020, 030, 040, 050, 060, 070, 080, 090, 100, 110, 120, 130, 140, 150 Раздела 6.";
		СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
		РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(СписокРасшифровкиФормулы, ОписаниеКС, , СчетчикФормулДляРасшифровок);
		
		РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000060016004",
			"Итого расходов (Раздел 6 Строка 160" + " Страница " + НомерСтраницы1 + ")", Страница1.Данные.П000060016004, "",
			СтруктураРеквизитовФормы.мСохраненныйДок, "Раздел6", Неопределено, НомерСтраницы1, СчетчикФормулДляРасшифровок);
		РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000060001004",
			"Расходы на оплату труда (Раздел 6 Строка 010" + " Страница " + НомерСтраницы1 + ")", Страница1.Данные.П000060001004, "",
			СтруктураРеквизитовФормы.мСохраненныйДок, "Раздел6", Неопределено, НомерСтраницы1, СчетчикФормулДляРасшифровок);
		РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000060002004",
			"Сырье и материалы (Раздел 6 Строка 020" + " Страница " + НомерСтраницы1 + ")", Страница1.Данные.П000060002004, "",
			СтруктураРеквизитовФормы.мСохраненныйДок, "Раздел6", Неопределено, НомерСтраницы1, СчетчикФормулДляРасшифровок);
		РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000060003004",
			"Работы и услуги сторонних организаций (Раздел 6 Строка 030" + " Страница " + НомерСтраницы1 + ")", Страница1.Данные.П000060003004, "",
			СтруктураРеквизитовФормы.мСохраненныйДок, "Раздел6", Неопределено, НомерСтраницы1, СчетчикФормулДляРасшифровок);
		РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000060004004",
			"Работы и услуги субподрядных организаций (Раздел 6 Строка 040" + " Страница " + НомерСтраницы1 + ")", Страница1.Данные.П000060004004,
			"", СтруктураРеквизитовФормы.мСохраненныйДок, "Раздел6", Неопределено, НомерСтраницы1, СчетчикФормулДляРасшифровок);
		РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000060005004",
			"Арендная плата (Раздел 6 Строка 050" + " Страница " + НомерСтраницы1 + ")", Страница1.Данные.П000060005004, "",
			СтруктураРеквизитовФормы.мСохраненныйДок, "Раздел6", Неопределено, НомерСтраницы1, СчетчикФормулДляРасшифровок);
		РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000060006004",
			"Лизинговые платежи (Раздел 6 Строка 060" + " Страница " + НомерСтраницы1 + ")", Страница1.Данные.П000060006004, "",
			СтруктураРеквизитовФормы.мСохраненныйДок, "Раздел6", Неопределено, НомерСтраницы1, СчетчикФормулДляРасшифровок);
		РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000060007004",
			"Платежи за пользование правами на результаты интеллектуальной деятельности (лицензионные платежи) российским лицам (Раздел 6 Строка 070" + 
			" Страница " + НомерСтраницы1 + ")", Страница1.Данные.П000060007004, "", СтруктураРеквизитовФормы.мСохраненныйДок, "Раздел6",
			Неопределено, НомерСтраницы1, СчетчикФормулДляРасшифровок);
		РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000060008004",
			"Платежи за пользование правами на результаты интеллектуальной деятельности (лицензионные платежи) иностранным лицам (Раздел 6 Строка 080" +
			" Страница " + НомерСтраницы1 + ")", Страница1.Данные.П000060008004, "", СтруктураРеквизитовФормы.мСохраненныйДок, "Раздел6",
			Неопределено, НомерСтраницы1, СчетчикФормулДляРасшифровок);
		РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000060009004",
			"Командировочные расходы (Раздел 6 Строка 090" + " Страница " + НомерСтраницы1 + ")", Страница1.Данные.П000060009004, "",
			СтруктураРеквизитовФормы.мСохраненныйДок, "Раздел6", Неопределено, НомерСтраницы1, СчетчикФормулДляРасшифровок);
		РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000060010004",
			"Представительские расходы (Раздел 6 Строка 100" + " Страница " + НомерСтраницы1 + ")", Страница1.Данные.П000060010004, "",
			СтруктураРеквизитовФормы.мСохраненныйДок, "Раздел6", Неопределено, НомерСтраницы1, СчетчикФормулДляРасшифровок);
		РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000060011004",
			"Расходы на подготовку и переподготовку кадров (Раздел 6 Строка 110" + " Страница " + НомерСтраницы1 + ")",
			Страница1.Данные.П000060011004, "", СтруктураРеквизитовФормы.мСохраненныйДок, "Раздел6", Неопределено, НомерСтраницы1,
			СчетчикФормулДляРасшифровок);
		РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000060012004",
			"Расходы на рекламу (Раздел 6 Строка 120" + " Страница " + НомерСтраницы1 + ")", Страница1.Данные.П000060012004, "",
			СтруктураРеквизитовФормы.мСохраненныйДок, "Раздел6", Неопределено, НомерСтраницы1, СчетчикФормулДляРасшифровок);
		РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000060013004",
			"Начисленная амортизация (Раздел 6 Строка 130" + " Страница " + НомерСтраницы1 + ")", Страница1.Данные.П000060013004, "",
			СтруктураРеквизитовФормы.мСохраненныйДок, "Раздел6", Неопределено, НомерСтраницы1, СчетчикФормулДляРасшифровок);
		РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000060014004", 
			"Суммы единого социального налога, зачисляемые в государственные внебюджетные фонды (Раздел 6 Строка 140" + " Страница " +
			НомерСтраницы1 + ")", Страница1.Данные.П000060014004, "", СтруктураРеквизитовФормы.мСохраненныйДок, "Раздел6", Неопределено,
			НомерСтраницы1, СчетчикФормулДляРасшифровок);
		РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000060015004",
			"Другие расходы (Раздел 6 Строка 150" + " Страница " + НомерСтраницы1 + ")", Страница1.Данные.П000060015004, "",
			СтруктураРеквизитовФормы.мСохраненныйДок, "Раздел6", Неопределено, НомерСтраницы1, СчетчикФормулДляРасшифровок);
		ЭтоОшибка = Не (Окр(Страница1.Данные.П000060016004) = Окр(Страница1.Данные.П000060001004) + Окр(Страница1.Данные.П000060002004) + Окр(Страница1.Данные.П000060003004) + Окр(Страница1.Данные.П000060004004) + Окр(Страница1.Данные.П000060005004) + Окр(Страница1.Данные.П000060006004) + Окр(Страница1.Данные.П000060007004) + Окр(Страница1.Данные.П000060008004) + Окр(Страница1.Данные.П000060009004) + Окр(Страница1.Данные.П000060010004) + Окр(Страница1.Данные.П000060011004) + Окр(Страница1.Данные.П000060012004) + Окр(Страница1.Данные.П000060013004) + Окр(Страница1.Данные.П000060014004) + Окр(Страница1.Данные.П000060015004));
		
		Расшифровка = "" + Окр(Страница1.Данные.П000060016004) + " = " + Окр(Страница1.Данные.П000060001004) + " + " + Окр(Страница1.Данные.П000060002004) + " + " + Окр(Страница1.Данные.П000060003004) + " + " + Окр(Страница1.Данные.П000060004004) + " + " + Окр(Страница1.Данные.П000060005004) + " + " + Окр(Страница1.Данные.П000060006004) + " + " + Окр(Страница1.Данные.П000060007004) + " + " + Окр(Страница1.Данные.П000060008004) + " + " + Окр(Страница1.Данные.П000060009004) + " + " + Окр(Страница1.Данные.П000060010004) + " + " + Окр(Страница1.Данные.П000060011004) + " + " + Окр(Страница1.Данные.П000060012004) + " + " + Окр(Страница1.Данные.П000060013004) + " + " + Окр(Страница1.Данные.П000060014004) + " + " + Окр(Страница1.Данные.П000060015004) + " Итог [" + (Окр(Страница1.Данные.П000060001004) + Окр(Страница1.Данные.П000060002004) + Окр(Страница1.Данные.П000060003004) + Окр(Страница1.Данные.П000060004004) + Окр(Страница1.Данные.П000060005004) + Окр(Страница1.Данные.П000060006004) + Окр(Страница1.Данные.П000060007004) + Окр(Страница1.Данные.П000060008004) + Окр(Страница1.Данные.П000060009004) + Окр(Страница1.Данные.П000060010004) + Окр(Страница1.Данные.П000060011004) + Окр(Страница1.Данные.П000060012004) + Окр(Страница1.Данные.П000060013004) + Окр(Страница1.Данные.П000060014004) + Окр(Страница1.Данные.П000060015004)) + "]";
		
		Если ЭтоОшибка Тогда
			ОписаниеНарушения = ?(Окр(Страница1.Данные.П000060016004) > Окр(Страница1.Данные.П000060001004) + Окр(Страница1.Данные.П000060002004) + Окр(Страница1.Данные.П000060003004) + Окр(Страница1.Данные.П000060004004) + Окр(Страница1.Данные.П000060005004) + Окр(Страница1.Данные.П000060006004) + Окр(Страница1.Данные.П000060007004) + Окр(Страница1.Данные.П000060008004) + Окр(Страница1.Данные.П000060009004) + Окр(Страница1.Данные.П000060010004) + Окр(Страница1.Данные.П000060011004) + Окр(Страница1.Данные.П000060012004) + Окр(Страница1.Данные.П000060013004) + Окр(Страница1.Данные.П000060014004) + Окр(Страница1.Данные.П000060015004), "Завышена налоговая база", "Занижена налоговая база");
			Норма = "ст. 45 НК РФ";
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
		Иначе
			ОписаниеНарушения = "";
			Норма = "";
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
		КонецЕсли;
		
		ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, ЭтоОшибка, ОписаниеНарушения, Норма);
	КонецЦикла;
	
	// Проверка 1.28
	
	КолСтраниц1 = 0;
	Для Каждого Страница1 Из Раздел5 Цикл
		Если Страница1.Данные.П000050029104 <> 0 Тогда
			КолСтраниц1 = КолСтраниц1 + 1;
		КонецЕсли;
	КонецЦикла;
	
	УсловиеВыполнено = КолСтраниц1 = 0;

	Для Каждого Страница2 Из Раздел6 Цикл
		НомерСтраницы2 = Раздел6.Индекс(Страница2);
		ОписаниеКС = "Сумма представительских расходов (строка 100 раздела 6) должна быть не более 4% от величины по строке 010 Раздела 6, при условии, что в строке 291 Раздела 5 проставлен прочерк.";
		СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
		РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(СписокРасшифровкиФормулы, ОписаниеКС, , СчетчикФормулДляРасшифровок);
		
		РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000060010004",
			"Представительские расходы (Раздел 6 Строка 100" + " Страница " + НомерСтраницы2 + ")", Страница2.Данные.П000060010004, "",
			СтруктураРеквизитовФормы.мСохраненныйДок, "Раздел6", Неопределено, НомерСтраницы2, СчетчикФормулДляРасшифровок);
		РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000060001004",
			"Расходы на оплату труда (Раздел 6 Строка 010" + " Страница " + НомерСтраницы2 + ")", Страница2.Данные.П000060001004, "",
			СтруктураРеквизитовФормы.мСохраненныйДок, "Раздел6", Неопределено, НомерСтраницы2, СчетчикФормулДляРасшифровок);
		ЭтоОшибка = Не (Окр(Страница2.Данные.П000060010004) <= Окр(Окр(Страница2.Данные.П000060001004) * 4 / 100));
		
		Расшифровка = "" + Окр(Страница2.Данные.П000060010004) + " = " + Окр(Страница2.Данные.П000060001004) + " x 4 : 100  Итог [" + (Окр(Окр(Страница2.Данные.П000060001004) * 4 / 100)) + "]";
		
		Если УсловиеВыполнено И ЭтоОшибка Тогда
			ОписаниеНарушения = "Возможно, необоснованное занижение налоговой базы вследствие неправомерного завышения представительских расходов";
			Норма = "абз. 3 п. 2 ст. 264 НК РФ";
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
		Иначе
			ОписаниеНарушения = "";
			Норма = "";
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
		КонецЕсли;
		
		ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка,
			УсловиеВыполнено И ЭтоОшибка, ОписаниеНарушения, Норма);
	КонецЦикла;
	
	// Проверка 1.29
	
	НомерСтраницы1 = 0;
	Для Каждого Страница1 Из Раздел6 Цикл
		НомерСтраницы1 = НомерСтраницы1 + 1;
		ОписаниеКС = "Сумма расходов, переданных головным офисом (строка 170 Раздела 6), должна быть равна нулю.";
		СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
		РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(СписокРасшифровкиФормулы, ОписаниеКС, , СчетчикФормулДляРасшифровок);
		
		РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000060017004",
			"Из суммы расходов (строка N), расходы, переданные головным офисом (Раздел 6 Строка 160" + " Страница " + НомерСтраницы1 + ")",
			Страница1.Данные.П000060017004, "", СтруктураРеквизитовФормы.мСохраненныйДок, "Раздел6", Неопределено, НомерСтраницы1,
			СчетчикФормулДляРасшифровок);
		ЭтоОшибка = Не (Окр(Страница1.Данные.П000060017004) <= 0);
		
		Расшифровка = "" + Окр(Страница1.Данные.П000060017004) + " = 0";
		
		Если ЭтоОшибка Тогда
			ОписаниеНарушения = ?(Окр(Страница1.Данные.П000060017004) > 0, "Возможно, необоснованное занижение налоговой базы вследствие признания расходами затрат, переданных головным офисом", "");
			Норма = "абз. 2 п. 1 ст. 252 НК РФ";
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
		Иначе
			ОписаниеНарушения = "";
			Норма = "";
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
		КонецЕсли;
		
		ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, ЭтоОшибка, ОписаниеНарушения, Норма);
	КонецЦикла;
	
	Если ОбщееЧислоОшибок + ОбщееЧислоБезОшибок > 0 Тогда
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок",    ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок",              СтруктураОшибок);
	КонецЕсли;
	
	Возврат СтруктураРезультата;
	
КонецФункции

&НаСервере
Функция ПроверкаРаздел7(СтруктураРезультата)
	
	ОбщееЧислоОшибок = СтруктураРезультата.КоличествоНайденныхОшибок; // Счетчик учета ошибок.
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок; // Счетчик учета проверенных соотношений, не являющиеся ошибками.
	
	СтруктураОшибок = СтруктураРезультата.СтруктураОшибок;
	
	Раздел7 = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить().ДанныеМногостраничныхРазделов.Раздел7;
	
	ТекстФормулы = "Раздел 7";
	
	// Проверка 1.30
	
	НомерСтраницы1 = 0;
	Для Каждого Страница1 Из Раздел7 Цикл
		НомерСтраницы1 = НомерСтраницы1 + 1;
		ОписаниеКС = "Сумма налога по расчету в федеральный бюджет (строка 170 Раздела 7) должна быть равна произведению ставки налога в федеральный бюджет (строка 130 Раздела 7) и суммы показателей строк 020 и 050 Раздела 7, деленому на 100.";
		СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
		РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(СписокРасшифровкиФормулы, ОписаниеКС, , СчетчикФормулДляРасшифровок);
		
		РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000070017004",
			"Сумма налога по расчету в федеральный бюджет (Раздел 7 Строка 170" + " Страница " + НомерСтраницы1 + ")",
			Страница1.Данные.П000070017004, "", СтруктураРеквизитовФормы.мСохраненныйДок, "Раздел7", Неопределено, НомерСтраницы1,
			СчетчикФормулДляРасшифровок);
		РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000070002004",
			"Налоговая база по деятельности в федеральный бюджет (Раздел 7 Строка 020" + " Страница " + НомерСтраницы1 + ")",
			Страница1.Данные.П000070002004, "", СтруктураРеквизитовФормы.мСохраненныйДок, "Раздел7", Неопределено, НомерСтраницы1,
			СчетчикФормулДляРасшифровок);
		РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000070005004",
			"Налоговая база по операциям - всего (Раздел 7 Строка 050" + " Страница " + НомерСтраницы1 + ")", Страница1.Данные.П000070005004, "",
			СтруктураРеквизитовФормы.мСохраненныйДок, "Раздел7", Неопределено, НомерСтраницы1, СчетчикФормулДляРасшифровок);
		РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000070013004",
			"Ставка налога в федеральный бюджет (Раздел 7 Строка 130" + " Страница " + НомерСтраницы1 + ")", Страница1.Данные.П000070013004, "",
			СтруктураРеквизитовФормы.мСохраненныйДок, "Раздел7", Неопределено, НомерСтраницы1, СчетчикФормулДляРасшифровок);
		ЭтоОшибка = Не (Окр(Страница1.Данные.П000070017004) = Окр((Окр(Страница1.Данные.П000070002004) + Окр(Страница1.Данные.П000070005004)) * Страница1.Данные.П000070013004 / 100));
		
		Расшифровка = "" + Окр(Страница1.Данные.П000070017004) + " = (" + Окр(Страница1.Данные.П000070002004) + " + " + Окр(Страница1.Данные.П000070005004) + ") х " + Окр(Страница1.Данные.П000070013004) + " : 100 Итог [" + (Окр((Окр(Страница1.Данные.П000070002004) + Окр(Страница1.Данные.П000070005004)) * Страница1.Данные.П000070013004 / 100)) + "]";
		
		Если ЭтоОшибка Тогда
			ОписаниеНарушения = ?(Окр(Страница1.Данные.П000070017004) > Окр((Окр(Страница1.Данные.П000070002004) + Окр(Страница1.Данные.П000070005004)) * Страница1.Данные.П000070013004 / 100), "Завышена сумма налога на прибыль, подлежащая уплате в Федеральный бюджет", "Занижена сумма налога на прибыль, подлежащая уплате в Федеральный бюджет");
			Норма = "ст. 45 НК РФ";
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
		Иначе
			ОписаниеНарушения = "";
			Норма = "";
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
		КонецЕсли;
		
		ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, ЭтоОшибка, ОписаниеНарушения, Норма);
	КонецЦикла;
	
	// Проверка 1.31
	
	НомерСтраницы1 = 0;
	Для Каждого Страница1 Из Раздел7 Цикл
		НомерСтраницы1 = НомерСтраницы1 + 1;
		ОписаниеКС = "Сумма налога по расчету в бюджет субъекта РФ (строка 180 Раздела 7) должна быть равна произведению ставки налога в бюджет субъекта РФ (строка 140 Раздела 7) и суммы показателей строк 030 и 050 Раздела 7, деленому на 100.";
		СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
		РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(СписокРасшифровкиФормулы, ОписаниеКС, , СчетчикФормулДляРасшифровок);
		
		РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000070018004",
			"Сумма налога по расчету в бюджет субъекта Российской Федерации (Раздел 7 Строка 180" + " Страница " + НомерСтраницы1 + ")",
			Страница1.Данные.П000070018004, "", СтруктураРеквизитовФормы.мСохраненныйДок, "Раздел7", Неопределено, НомерСтраницы1,
			СчетчикФормулДляРасшифровок);
		РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000070003004",
			"Налоговая база по деятельности в бюджет субъекта Российской Федерации (Раздел 7 Строка 030" + " Страница " + НомерСтраницы1 + ")",
			Страница1.Данные.П000070003004, "", СтруктураРеквизитовФормы.мСохраненныйДок, "Раздел7", Неопределено, НомерСтраницы1,
			СчетчикФормулДляРасшифровок);
		РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000070005004",
			"Налоговая база по операциям - всего (Раздел 7 Строка 050" + " Страница " + НомерСтраницы1 + ")", Страница1.Данные.П000070005004, "",
			СтруктураРеквизитовФормы.мСохраненныйДок, "Раздел7", Неопределено, НомерСтраницы1, СчетчикФормулДляРасшифровок);
		РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000070014004",
			"Ставка налога в бюджет субъекта Российской Федерации (Раздел 7 Строка 140" + " Страница " + НомерСтраницы1 + ")",
			Страница1.Данные.П000070014004, "", СтруктураРеквизитовФормы.мСохраненныйДок, "Раздел7", Неопределено, НомерСтраницы1,
			СчетчикФормулДляРасшифровок);
		ЭтоОшибка = Не (Окр(Страница1.Данные.П000070018004) = Окр((Окр(Страница1.Данные.П000070003004) + Окр(Страница1.Данные.П000070005004)) * Страница1.Данные.П000070014004 / 100));
		
		Расшифровка = "" + Окр(Страница1.Данные.П000070018004) + " = (" + Окр(Страница1.Данные.П000070003004) + " + " + Окр(Страница1.Данные.П000070005004) + ") х " + Окр(Страница1.Данные.П000070014004) + " : 100 Итог [" + (Окр((Окр(Страница1.Данные.П000070003004) + Окр(Страница1.Данные.П000070005004)) * Страница1.Данные.П000070014004 / 100)) + "]";
		
		Если ЭтоОшибка Тогда
			ОписаниеНарушения = ?(Окр(Страница1.Данные.П000070018004) > Окр((Окр(Страница1.Данные.П000070003004) + Окр(Страница1.Данные.П000070005004)) * Страница1.Данные.П000070014004 / 100), "Завышена сумма налога на прибыль, подлежащая уплате в бюджет субъекта РФ", "Занижена сумма налога на прибыль, подлежащая уплате в бюджет субъекта РФ");
			Норма = "ст. 45 НК РФ";
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
		Иначе
			ОписаниеНарушения = "";
			Норма = "";
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
		КонецЕсли;
		
		ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, ЭтоОшибка, ОписаниеНарушения, Норма);
	КонецЦикла;
	
	// Проверка 1.32
	
	НомерСтраницы1 = 0;
	Для Каждого Страница1 Из Раздел7 Цикл
		НомерСтраницы1 = НомерСтраницы1 + 1;
		ОписаниеКС = "Сумма налога по расчету в местный бюджет (строка 190 Раздела 7) должна быть равна произведению ставки налога в местный бюджет (строка 150 Раздела 7) и суммы показателей строк 040 и 050 Раздела 7, деленому на 100.";
		СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
		РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(СписокРасшифровкиФормулы, ОписаниеКС, , СчетчикФормулДляРасшифровок);
		
		РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000070019004",
			"Сумма налога по расчету в местный бюджет (Раздел 7 Строка 190" + " Страница " + НомерСтраницы1 + ")", Страница1.Данные.П000070019004,
			"", СтруктураРеквизитовФормы.мСохраненныйДок, "Раздел7", Неопределено, НомерСтраницы1, СчетчикФормулДляРасшифровок);
		РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000070004004",
			"Налоговая база по деятельности в местный бюджет (Раздел 7 Строка 040" + " Страница " + НомерСтраницы1 + ")",
			Страница1.Данные.П000070004004, "", СтруктураРеквизитовФормы.мСохраненныйДок, "Раздел7", Неопределено, НомерСтраницы1,
			СчетчикФормулДляРасшифровок);
		РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000070005004",
			"Налоговая база по операциям - всего (Раздел 7 Строка 050" + " Страница " + НомерСтраницы1 + ")", Страница1.Данные.П000070005004, "",
			СтруктураРеквизитовФормы.мСохраненныйДок, "Раздел7", Неопределено, НомерСтраницы1, СчетчикФормулДляРасшифровок);
		РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000070015004", 
			"Ставка налога в местный бюджет (Раздел 7 Строка 150" + " Страница " + НомерСтраницы1 + ")", Страница1.Данные.П000070015004, "",
			СтруктураРеквизитовФормы.мСохраненныйДок, "Раздел7", Неопределено, НомерСтраницы1, СчетчикФормулДляРасшифровок);
		ЭтоОшибка = Не (Окр(Страница1.Данные.П000070019004) = Окр((Окр(Страница1.Данные.П000070004004) + Окр(Страница1.Данные.П000070005004)) * Страница1.Данные.П000070015004 / 100));
		
		Расшифровка = "" + Окр(Страница1.Данные.П000070019004) + " = (" + Окр(Страница1.Данные.П000070004004) + " + " + Окр(Страница1.Данные.П000070005004) + ") х " + Окр(Страница1.Данные.П000070015004) + " : 100 Итог [" + (Окр((Окр(Страница1.Данные.П000070004004) + Окр(Страница1.Данные.П000070005004)) * Страница1.Данные.П000070015004 / 100)) + "]";
		
		Если ЭтоОшибка Тогда
			ОписаниеНарушения = ?(Окр(Страница1.Данные.П000070019004) > Окр((Окр(Страница1.Данные.П000070004004) + Окр(Страница1.Данные.П000070005004)) * Страница1.Данные.П000070015004 / 100), "Завышена сумма налога на прибыль, подлежащая уплате в местный бюджет", "Занижена сумма налога на прибыль, подлежащая уплате в местный бюджет");
			Норма = "ст. 45 НК РФ";
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
		Иначе
			ОписаниеНарушения = "";
			Норма = "";
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
		КонецЕсли;
		
		ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, ЭтоОшибка, ОписаниеНарушения, Норма);
	КонецЦикла;
	
	Если ОбщееЧислоОшибок + ОбщееЧислоБезОшибок > 0 Тогда
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок",    ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок",              СтруктураОшибок);
	КонецЕсли;
	
	Возврат СтруктураРезультата;
	
КонецФункции

&НаСервере
Процедура ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, ЭтоОшибка, ОписаниеНарушения, Норма)
	
	СтруктураОшибок.Вставить("Описание" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), "Нарушено соотношение показателей. Возможно, показатели заполнены некорректно.");
	СтруктураОшибок.Вставить("Расшифровка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), Расшифровка);
	СтруктураОшибок.Вставить("ЭтоОшибка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), ЭтоОшибка);
	СтруктураОшибок.Вставить("ТекстовоеПредставлениеФормулы" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), ТекстФормулы + ". " + ОписаниеКС);
	СтруктураОшибок.Вставить("Описание" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), ОписаниеНарушения);
	СтруктураОшибок.Вставить("Нарушение" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), Норма);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ СТЫКОВКИ С СЕРВИСОМ СДАЧИ ОТЧЕТНОСТИ ЧЕРЕЗ ПРЕДСТАВИТЕЛЯ

&НаКлиенте
Процедура ОтправитьЧерезПредставителя(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОтправитьЧерезПредставителяЗавершение", ЭтотОбъект);

	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьЧерезПредставителяЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ПриНажатииНаКнопкуОтправкиЧерезПредставителяВРегламентированномОтчете(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВИнтернете(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьВИнтернетеЗавершение", ЭтотОбъект);

	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
		
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВИнтернетеЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ПроверитьВИнтернете(ЭтаФорма);
	
КонецПроцедуры

#Область ПанельОтправкиВКонтролирующиеОрганы

&НаКлиенте
Процедура ОбновитьОтправку(Команда)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОбновитьОтправкуИзПанелиОтправки(ЭтаФорма, "ФНС");
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаПротоколНажатие(Элемент)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьПротоколИзПанелиОтправки(ЭтаФорма, "ФНС");
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьНеотправленноеИзвещение(Команда)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОтправитьНеотправленноеИзвещениеИзПанелиОтправки(ЭтаФорма, "ФНС");
КонецПроцедуры

&НаКлиенте
Процедура ЭтапыОтправкиНажатие(Элемент)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьСостояниеОтправкиИзПанелиОтправки(ЭтаФорма, "ФНС");
КонецПроцедуры

&НаКлиенте
Процедура КритическиеОшибкиОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьКритическиеОшибкиИзПанелиОтправки(ЭтаФорма, "ФНС");
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаНаименованиеЭтапаНажатие(Элемент)
	
	ПараметрыИзменения = Новый Структура;
	ПараметрыИзменения.Вставить("Форма", ЭтаФорма);
	ПараметрыИзменения.Вставить("Организация", СтруктураРеквизитовФормы.Организация);
	ПараметрыИзменения.Вставить("КонтролирующийОрган",
		ПредопределенноеЗначение("Перечисление.ТипыКонтролирующихОрганов.ФНС"));
	
	РегламентированнаяОтчетностьКлиент.ИзменитьСтатусОтправки(ПараметрыИзменения);
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ОтправитьВКонтролирующийОрган(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверкаВозможностиВыгрузкиРегламентированногоОтчетаПередОтправкой", ЭтотОбъект);
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередОтправкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаВозможностиВыгрузкиРегламентированногоОтчетаПередОтправкой(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОтправитьВКонтролирующийОрганЗавершение", ЭтотОбъект);
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьВКонтролирующийОрганЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ПриНажатииНаКнопкуОтправкиВКонтролирующийОрган(ЭтаФорма, "ФНС");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Форма", ЭтаФорма);
	Оповещение = Новый ОписаниеОповещения("ПослеСохраненияФормыЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	СохранитьНаКлиенте(, Оповещение);
КонецПроцедуры

&НаКлиенте
Процедура ПослеСохраненияФормыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	ДополнительныеПараметры.Форма.Закрыть();
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьУдалитьСтраницу(Таблица)
	Обл = ТабличныйДокумент.Области.Найти("УдалитьСтраницуЗначок");
	Если Обл = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если Таблица.Количество() = 1 Тогда 
		Обл.Гиперссылка = Ложь;
		Обл.Текст = "";
		Обл = ТабличныйДокумент.Области["УдалитьСтраницу"];
		Обл.Гиперссылка = Ложь;
		Обл.Текст = "";
	Иначе
		Обл.Гиперссылка = Истина;
		Обл.Текст = "х";
		Обл = ТабличныйДокумент.Области["УдалитьСтраницу"];
		Обл.Гиперссылка = Истина;
		Обл.Текст = "Удалить страницу";
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТабличныйДокументПриАктивизацииОбласти(Элемент)
	Элементы.ТабличныйДокументКонтекстноеМенюУдалитьСтроку.Доступность = Ложь;
	Элементы.ТабличныйДокументКонтекстноеМенюДобавитьСтроку.Доступность = Ложь;
	
	ИмяГруппы = РазделТекущейОбласти(ЭтаФорма, Элемент.ТекущаяОбласть);
	
	Если ЗначениеЗаполнено(ИмяГруппы) Тогда 
		ТестовоеИмя = ИмяГруппы + "01_" + Строка(мСтруктураИсхКолвоСтрокРазделов[ИмяГруппы] + 1);
		Элементы.ТабличныйДокументКонтекстноеМенюДобавитьСтроку.Доступность = Истина;
		Если СтрЧислоВхождений(Элемент.ТекущаяОбласть.Имя, "ДобавитьСтроку") = 0 И
			ТабличныйДокумент.Области.Найти(ТестовоеИмя) <> Неопределено Тогда
			Элементы.ТабличныйДокументКонтекстноеМенюУдалитьСтроку.Доступность = Истина;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция РазделТекущейОбласти(Форма, ТекущаяОбласть, ДлИмениОбласти = 13) Экспорт

	Если ТекущаяОбласть = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ИмяТекущейОбласти = СтрЗаменить(ТекущаяОбласть.Имя, "ДобавитьСтрокуЗначок", "ДобавитьСтроку");
	Если ИмяТекущейОбласти = "ДобавитьСтроку1" Тогда
		Возврат Форма.СтруктураРеквизитовФормы.мИдГруппы1;
	ИначеЕсли ИмяТекущейОбласти = "ДобавитьСтроку2" Тогда
		Возврат Форма.СтруктураРеквизитовФормы.мИдГруппы2;
	ИначеЕсли ИмяТекущейОбласти = "ДобавитьСтроку3" Тогда
		Возврат Форма.СтруктураРеквизитовФормы.мИдГруппы3;
	ИначеЕсли ИмяТекущейОбласти = "ДобавитьСтроку4" Тогда
		Возврат Форма.СтруктураРеквизитовФормы.мИдГруппы4;
	ИначеЕсли ИмяТекущейОбласти = "ДобавитьСтроку5" Тогда
		Возврат Форма.СтруктураРеквизитовФормы.мИдГруппы5;
	ИначеЕсли СтрНайти(ИмяТекущейОбласти, "УдалитьСтроку") > 0 Тогда
		ИмяТекущейОбласти = СтрЗаменить(ИмяТекущейОбласти, "УдалитьСтроку", "");
	КонецЕсли;

	ИмяАктивногоРаздела = Лев(ИмяТекущейОбласти, ДлИмениОбласти);
	
	Для Каждого ЭлементСтруктуры Из Форма.мСтруктураМногострочныхРазделов Цикл
		ИмяГруппы = ЭлементСтруктуры.Ключ;
		СтруктураГруппы = Форма[ЭлементСтруктуры.Значение];

		Если СтруктураГруппы[0].Свойство(ИмяАктивногоРаздела) Тогда
			Возврат ИмяГруппы;
		КонецЕсли;
	КонецЦикла;

	Возврат Неопределено;

КонецФункции

&НаКлиенте
Процедура Подключаемый_ОткрытьПрисоединенныеФайлы(Команда)
	
	РегламентированнаяОтчетностьКлиент.СохранитьОтчетИОткрытьФормуПрисоединенныеФайлы(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийПриИзменении(Элемент)
	Модифицированность = Истина;
КонецПроцедуры

&НаСервере
Функция ОбъектОтчета(ЭтаФормаИмя) Экспорт
	
	Если мОбъектОтчета = Неопределено Тогда 
		мОбъектОтчета = РегламентированнаяОтчетностьВызовСервера.ОбъектОтчета(ЭтаФормаИмя);
	КонецЕсли;
	
	Возврат мОбъектОтчета;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИмяОтчета(ЭтаФормаИмя)
	Форма_Имя = СтрЗаменить(ЭтаФормаИмя, "Внешний", "");
	Возврат Сред(Лев(Форма_Имя, СтрНайти(Форма_Имя, ".Форма.") - 1), 7);
КонецФункции