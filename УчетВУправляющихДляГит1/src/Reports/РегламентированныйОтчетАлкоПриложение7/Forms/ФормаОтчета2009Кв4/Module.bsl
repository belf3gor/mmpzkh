
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
	    Возврат;
	КонецЕсли;

	// Обход ошибки платформы Параметр сеанса отсутствует или удален
	ТабличныйДокумент.Очистить();
	
	СформироватьСтруктуруРеквизитовФормы();
	
	СтруктураРеквизитовФормы.СписокПечатаемыхЛистов = Новый СписокЗначений;
	
	СтруктураРеквизитовФормы.мСоставПоказателей = "СоставПоказателей2006Кв3";
	                                     	
	СтруктураРеквизитовФормы.мОписаниеТиповЧислоЕ = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(14, 2));
	
	МассивБулево = Новый Массив;
	МассивБулево.Добавить(Тип("Булево"));
	СтруктураРеквизитовФормы.мОписаниеТиповБулево = Новый ОписаниеТипов(МассивБулево);
	
	// ОПИСАНИЕ ПАРАМЕТРОВ МНОГОСТРОЧНЫХ ГРУПП
	// Идентификаторы многострочных групп
	
	СтруктураРеквизитовФормы.мИдГруппы1 = "П0000000000"; // Декларация
	СтруктураРеквизитовФормы.мИдГруппы2 = "П0000100030"; // Группировочная таблица
	СтруктураРеквизитовФормы.мИдГруппы3 = "П0000100000"; // Возвраты
	СтруктураРеквизитовФормы.мИдГруппы4 = "П0000100010"; // Возвраты группировка
	
	// количество строк многострочных разделов по "бумажной" форме отчета
	// (минимальное количество строк, которое должно присутствовать всегда)
	КолИсхСтрокИдГруппы1 = 1;
	КолИсхСтрокИдГруппы2 = 1;
	КолИсхСтрокИдГруппы3 = 1;
	КолИсхСтрокИдГруппы4 = 1;
	
	КолКолонокИдГруппы1 = 16;
	КолКолонокИдГруппы2 = 16;
	КолКолонокИдГруппы3 = 16;
	КолКолонокИдГруппы4 = 16;
	
	СтруктураДанныхДекларация = Новый Структура;
	СтруктураДанныхВозвраты   = Новый Структура;
	                        	
	// структура многострочных разделов формы
	мСтруктураМногострочныхРазделов = Новый Структура;
	мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы1, СтруктураРеквизитовФормы.мИдГруппы1);
	мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы2, СтруктураРеквизитовФормы.мИдГруппы2);
	мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы3, СтруктураРеквизитовФормы.мИдГруппы3);
	мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы4, СтруктураРеквизитовФормы.мИдГруппы4);
	
	// структура исходных строк (минимального кол-ва) многострочных разделов формы
	мСтруктураИсхКолвоСтрокРазделов = Новый Структура;
	мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы1, КолИсхСтрокИдГруппы1);
	мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы2, КолИсхСтрокИдГруппы2);
	мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы3, КолИсхСтрокИдГруппы3);
	мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы4, КолИсхСтрокИдГруппы4);
	
	мСтруктураКолвоКолонокРазделов = Новый Структура;
	мСтруктураКолвоКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы1, КолКолонокИдГруппы1);
	мСтруктураКолвоКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы2, КолКолонокИдГруппы2);
	мСтруктураКолвоКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы3, КолКолонокИдГруппы3);
	мСтруктураКолвоКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы4, КолКолонокИдГруппы4);
	
	ИнициализацияМногостраничныхРазделов();
	
	мСтруктураМногостраничныхРазделов = Новый Структура;
	мСтруктураМногостраничныхРазделов.Вставить("Титульный",  "ТаблицаСтраницыТитульный");
	мСтруктураМногостраничныхРазделов.Вставить("ФизЛица",    "ТаблицаСтраницыФизЛица");
	
	СтруктураРеквизитовФормы.мСоответствияМнгЧ = Новый Соответствие;
	СтруктураРеквизитовФормы.мСоответствияМнгЧ.Вставить(СтруктураРеквизитовФормы.мИдГруппы1, "МногострочнаяЧасть1");
	СтруктураРеквизитовФормы.мСоответствияМнгЧ.Вставить(СтруктураРеквизитовФормы.мИдГруппы2, "МногострочнаяЧасть2");
	СтруктураРеквизитовФормы.мСоответствияМнгЧ.Вставить(СтруктураРеквизитовФормы.мИдГруппы3, "МногострочнаяЧасть1");
	СтруктураРеквизитовФормы.мСоответствияМнгЧ.Вставить(СтруктураРеквизитовФормы.мИдГруппы4, "МногострочнаяЧасть2");
		
	ЦветЗаполняетсяТолькоВручную     = Новый Цвет(255, 255, 225);
	ЦветЗаполняетсяАвтоКорректир     = Новый Цвет(255, 240, 200);
	ЦветЗаполняетсяАвтоБезКорректир  = Новый Цвет(230, 240, 220);
	ЦветЗаполняетсяАвтоАрифметика    = Новый Цвет(192, 220, 192);  // ЗЕЛЕНЫЙ
	ЦветЗаполняетсяОднозначноВручную = Новый Цвет(255, 255, 192);  // ЖЕЛТЫЙ
	ЦветЗаполняетсяАвтоматически     = Новый Цвет(255, 255, 255);  // Белый, Ввод запрещен
	
	// структура цветов раскраски автозаполняемых ячеек
	мСтруктураЦветовРаскраски = Новый Структура;
	мСтруктураЦветовРаскраски.Вставить("_1", ЦветЗаполняетсяТолькоВручную);
	мСтруктураЦветовРаскраски.Вставить("_2", ЦветЗаполняетсяАвтоКорректир);
	мСтруктураЦветовРаскраски.Вставить("_3", ЦветЗаполняетсяАвтоБезКорректир);
	мСтруктураЦветовРаскраски.Вставить("_4", ЦветЗаполняетсяАвтоАрифметика);
	мСтруктураЦветовРаскраски.Вставить("_0", ЦветЗаполняетсяОднозначноВручную);
	мСтруктураЦветовРаскраски.Вставить("_5", ЦветЗаполняетсяАвтоматически);
	
	мСтруктураВариантыЗаполнения       = Новый Структура;
	мСтруктураВариантыЗаполненияЭталон = Новый Структура;
	
	//// ОПИСАНИЕ ПАРАМЕТРОВ ФОРМЫ ОТЧЕТА
	//
	// Версия формы
	СтруктураРеквизитовФормы.мВерсияФормы = "10/02/2010"; // Первый вариант
	
	// Код отчета, равен КНД
	СтруктураРеквизитовФормы.мКодОтчета   = 1152025;
	
	СтруктураРеквизитовФормы.ВариантыФорматовВыгрузки = Новый СписокЗначений;
	СтруктураРеквизитовФормы.ВариантыФорматовВыгрузки.Добавить("СоставПоказателей2006Кв3", "Формат 3.02", Истина);
	
	СтруктураРеквизитовФормы.КНД = "1152025";
	СтруктураРеквизитовФормы.НаименованиеОтчетаДляВыгрузки = "ДЕКЛАРАЦИЯ ОБ ОБЪЕМАХ ЗАКУПКИ ЭТИЛОВОГО СПИРТА, АЛКОГОЛЬНОЙ И СПИРТОСОДЕРЖАЩЕЙ ПРОДУКЦИИ";
	
	СтруктураРеквизитовФормы.мПечатныеформы = Новый СписокЗначений;
	СтруктураРеквизитовФормы.мПечатаемыеРазделы = Новый СписокЗначений;
	
	ИмяРаздела = "Титульный";
		
	ТабличныйДокумент.Вывести(Отчеты[Сред(Лев(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, ".Форма.") - 1), 7)].ПолучитьМакет(Сред(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + ИмяРаздела));
	
	СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяРаздела;
	
	СтруктураРеквизитовФормы.мВыбраннаяФорма          = Параметры.мВыбраннаяФорма;
	СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета  = Параметры.мДатаКонцаПериодаОтчета;
	СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета = Параметры.мДатаНачалаПериодаОтчета;
	СтруктураРеквизитовФормы.мПериодичность           = Параметры.мПериодичность;
	СтруктураРеквизитовФормы.мСкопированаФорма        = Параметры.мСкопированаФорма;
	СтруктураРеквизитовФормы.мСохраненныйДок          = Параметры.мСохраненныйДок;
	СтруктураРеквизитовФормы.Организация              = Параметры.Организация;
	
	ДатаПодписи	= ТекущаяДатаСеанса();
	
	СтруктураРеквизитовФормы.СправочникиВидыКонтактнойИнформацииПочтовыйАдресОрганизации = Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресОрганизации;
	
	Инициализация(Параметры.БезОткрытияФормы);
	
КонецПроцедуры

&НаСервере
Процедура СформироватьСтруктуруРеквизитовФормы()
	
	СтруктураРеквизитовФормы = Новый Структура;
	СтруктураРеквизитовФормы.Вставить("мВыбраннаяФорма");
	СтруктураРеквизитовФормы.Вставить("мСкопированаФорма");
	СтруктураРеквизитовФормы.Вставить("мСохраненныйДок");
	СтруктураРеквизитовФормы.Вставить("мВерсияФормы");
	СтруктураРеквизитовФормы.Вставить("мСчетчикСтраниц");
	СтруктураРеквизитовФормы.Вставить("мАвтоВыборКодов");
	СтруктураРеквизитовФормы.Вставить("мДатаНачалаПериодаОтчета");
	СтруктураРеквизитовФормы.Вставить("мДатаКонцаПериодаОтчета");
	СтруктураРеквизитовФормы.Вставить("мПериодичность");
	СтруктураРеквизитовФормы.Вставить("мЗаписьЗапрещена");
	СтруктураРеквизитовФормы.Вставить("мЗаписываетсяНовыйДокумент");
	СтруктураРеквизитовФормы.Вставить("мВариант");
	СтруктураРеквизитовФормы.Вставить("мИННДиректор");
	СтруктураРеквизитовФормы.Вставить("мИННБухгалтер");
	СтруктураРеквизитовФормы.Вставить("мИННУпПред");
	СтруктураРеквизитовФормы.Вставить("мВидДеят");
	СтруктураРеквизитовФормы.Вставить("мИдГруппы1");
	СтруктураРеквизитовФормы.Вставить("мИдГруппы2");
	СтруктураРеквизитовФормы.Вставить("мИдГруппы3");
	СтруктураРеквизитовФормы.Вставить("мИдГруппы4");
	СтруктураРеквизитовФормы.Вставить("мСтрокаФормата");
	СтруктураРеквизитовФормы.Вставить("мОписаниеТиповЧислоЕ");
	СтруктураРеквизитовФормы.Вставить("мКодОтчета");
	СтруктураРеквизитовФормы.Вставить("мСтараяВерсияФормы");
	СтруктураРеквизитовФормы.Вставить("мИННЮЛ");
	СтруктураРеквизитовФормы.Вставить("мКППЮЛ");
	СтруктураРеквизитовФормы.Вставить("мТелОрганизации");
	СтруктураРеквизитовФормы.Вставить("мВПрограммеИзмененаОрганизация");
	СтруктураРеквизитовФормы.Вставить("мПечатныеФормы");
	СтруктураРеквизитовФормы.Вставить("мПечатаемыеРазделы");
	СтруктураРеквизитовФормы.Вставить("мСоставПоказателей");
	СтруктураРеквизитовФормы.Вставить("мДокументВосстановлен");
	СтруктураРеквизитовФормы.Вставить("мРежимПечати");
	СтруктураРеквизитовФормы.Вставить("мОписаниеТиповБулево");
	СтруктураРеквизитовФормы.Вставить("мБезОткрытияФормы");
	СтруктураРеквизитовФормы.Вставить("мАдрЮРТитульныйВыгрузка");
	СтруктураРеквизитовФормы.Вставить("ВариантыФорматовВыгрузки");
	СтруктураРеквизитовФормы.Вставить("КНД");
	СтруктураРеквизитовФормы.Вставить("НаименованиеОтчетаДляВыгрузки");
	СтруктураРеквизитовФормы.Вставить("КодНО");
	СтруктураРеквизитовФормы.Вставить("КППТек");
	СтруктураРеквизитовФормы.Вставить("НаимТекущегоРаздела");
	СтруктураРеквизитовФормы.Вставить("Организация");
	СтруктураРеквизитовФормы.Вставить("ВидДокумента");
	СтруктураРеквизитовФормы.Вставить("СтрПериодОтчета");
	СтруктураРеквизитовФормы.Вставить("ФИОИсп");
	СтруктураРеквизитовФормы.Вставить("НаимОрганизации");
	СтруктураРеквизитовФормы.Вставить("ВыводитьСтраницуВТаблДокНаСервере");
	СтруктураРеквизитовФормы.Вставить("ФлажокОтклАвтоРасчет", Ложь);
	СтруктураРеквизитовФормы.Вставить("СправочникиВидыКонтактнойИнформацииПочтовыйАдресОрганизации");
	СтруктураРеквизитовФормы.Вставить("СписокПечатаемыхЛистов");
	СтруктураРеквизитовФормы.Вставить("Руководитель");
	СтруктураРеквизитовФормы.Вставить("Бухгалтер");
	СтруктураРеквизитовФормы.Вставить("Исполнитель");
	СтруктураРеквизитовФормы.Вставить("ТелОрганизации");
	СтруктураРеквизитовФормы.Вставить("мСоответствияМнгЧ");
	СтруктураРеквизитовФормы.Вставить("ТекущаяСтрокаРазделовОтчета");
																                                  
КонецПроцедуры

&НаСервере
Процедура ИнициализацияМногостраничныхРазделов()
	
	СтрПерваяСтраница = ТаблицаСтраницыТитульный.Добавить();
	СтрПерваяСтраница.Представление               = "Новая страница";
	СтрПерваяСтраница.АктивнаяСтраница            = Истина;
	СтрПерваяСтраница.АвтоматическоеПредставление = Истина;
	
	СтрПерваяСтраница = ТаблицаСтраницыФизЛица.Добавить();
	СтрПерваяСтраница.Представление               = "Новая страница";
	СтрПерваяСтраница.АктивнаяСтраница            = Истина;
	СтрПерваяСтраница.АвтоматическоеПредставление = Истина;
		
КонецПроцедуры

&НаСервере
Процедура Инициализация(БезОткрытияФормы = Ложь) Экспорт
	
	СтруктураРеквизитовФормы.мБезОткрытияФормы = БезОткрытияФормы;
    	
	ЗаполнитьНачальныеНастройки();
	
	ФормироватьСтруктуруСвойствСтраниц();
			
	СтруктураРеквизитовФормы.мРежимПечати = Ложь;

	СтруктураРеквизитовФормы.мАвтоВыборКодов = Ложь;
	СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация = Ложь;
	СтруктураРеквизитовФормы.мСтараяВерсияФормы = СтруктураРеквизитовФормы.мВерсияФормы;
	СтруктураРеквизитовФормы.мДокументВосстановлен = Ложь;

	СтруктураРеквизитовФормы.ВидДокумента = 0;
	СтруктураРеквизитовФормы.мВидДеят = "";
	
	Представляется = 1;

	Если НЕ БезОткрытияФормы Тогда
		
		ЗагрузитьПоказателиИзМакета("КодыВидовПродукции");
		ЗагрузитьПоказателиИзМакета("ВидыДеятельности");
		ЗагрузитьПоказателиИзМакета("КодыСубъектовРФ");
		
		РегламентированнаяОтчетность.ЗаполнитьРегионы(Регионы);
		
	КонецЕсли;

	Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда

		НачальныеОперацииСМногострочнымиБлоками();
		
		Если СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено Тогда // Документ скопирован.
			ВосстановитьСохраненныеДанные();
		Иначе // Это новый документ. Установим реквизиты формы по умолчанию.
			КопироватьДанныеФормы(мДеревоСтраницОтчета, мДеревоВыбранныхСтраниц);
		КонецЕсли;
		
		ЗаполнитьДатуВЯчейкахНаСервере();
		
		Модифицированность = Истина;
		
	Иначе
		
		Если НЕ БезОткрытияФормы Тогда
			НачальныеОперацииСМногострочнымиБлоками();
		КонецЕсли;
		
		// При открытии или при копировании сохраненного
		// отчета восстанавливаем сохраненные данные.
		ВосстановитьСохраненныеДанные();
		
		Если ЗначениеЗаполнено(СтруктураРеквизитовФормы.мСкопированаФорма) Тогда
			СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено;
			Модифицированность = Истина;
		КонецЕсли;
		
		Если НЕ БезОткрытияФормы
           И НЕ СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
				   
        	ЗаблокироватьДанныеДляРедактирования(СтруктураРеквизитовФормы.мСохраненныйДок, , ЭтаФорма.УникальныйИдентификатор);

        КонецЕсли;
		
	КонецЕсли;

	ПоказатьПериод();

	Если НЕ БезОткрытияФормы Тогда
		мПустойОбразЛистаФЛ = СформироватьПустойЛистФизЛиц();
	КонецЕсли;
		
	Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Или СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация Тогда
		
		ЗаполнитьСведенияОбОрганизации();
		ЗаполнитьСведенияОбФЛ();
		
	Иначе
		ПолучитьИННКПП();
	КонецЕсли;
	
	СформироватьДеревоРазделовОтчетаНаСервере();

	СтруктураРеквизитовФормы.НаимОрганизации = СтруктураРеквизитовФормы.Организация.Наименование;
	
	РегламентированнаяОтчетность.ДобавитьКнопкуПрисоединенныеФайлы(ЭтаФорма);
	
	РегламентированнаяОтчетностьКлиентСервер.ПриИнициализацииФормыРегламентированногоОтчета(ЭтаФорма);
	
	СтрокаСведений = "КодНО";
	СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(СтруктураРеквизитовФормы.Организация, ДатаПодписи, СтрокаСведений);
		
	СтруктураРеквизитовФормы.КодНО = СведенияОбОрганизации.КодНО;
	
	Если НЕ ТабличныйДокумент.Области.Найти("НомКоррект") = Неопределено Тогда
		ТабличныйДокумент.Области.НомКоррект.Значение = НомерКорректировки;
		ТабличныйДокумент.Области.ДатаПодписи.Значение = ДатаПодписи;
		ТабличныйДокумент.Области.Представляется.Значение = Представляется;
	КонецЕсли;
	
	СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Истина;
	
КонецПроцедуры

&НаСервере
Процедура НачальныеОперацииСМногострочнымиБлоками()
	Перем ИсходноеКоличествоСтрокГруппы;

	// создаем исходную структуру многострочных разделов
	Для Каждого ЭлементСтруктуры Из мСтруктураМногострочныхРазделов Цикл
		ИмяГруппы = ЭлементСтруктуры.Ключ;
		СтруктураГруппы = ЭтаФорма[ЭлементСтруктуры.Значение];
		
		мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);

		Для НСтр = 1 По ИсходноеКоличествоСтрокГруппы Цикл

			СтруктураГруппы.Добавить();
            			
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если СтрНайти(Заголовок, СтруктураРеквизитовФормы.СтрПериодОтчета) = 0 Тогда
		Заголовок = Заголовок + " за " + СтруктураРеквизитовФормы.СтрПериодОтчета;
	КонецЕсли;
	
	ОргСтр = " (" + СтруктураРеквизитовФормы.НаимОрганизации + ")";
	Если СтрНайти(Заголовок, ОргСтр) = 0 Тогда
		Заголовок = Заголовок + ОргСтр;
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("ВыполнитьПроверкуПередОткрытием", 0.1, Истина);

КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПроверкуПередОткрытием()
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПриОткрытииЗавершение", ЭтотОбъект);
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередОткрытиемФормыРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытииЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Модифицированность = Ложь;
		Закрыть();
		Возврат;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНачальныеНастройки()
		
	МакетСоставаПоказателей = Отчеты[Сред(Лев(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, ".Форма.") - 1), 7)].ПолучитьМакет(СтруктураРеквизитовФормы.мСоставПоказателей);
			
	Для Инд = 0 По МакетСоставаПоказателей.Области.Количество() - 1 Цикл
				
		ТекОбласть    = МакетСоставаПоказателей.Области[Инд];
		ИмяСтраницы   = ТекОбласть.Имя;
				
		ЭтаФорма["ТаблицаВариантыЗаполнения" + ИмяСтраницы].Добавить();
		
		// Таблица значений содержит информацию о вариантах заполнения показателя отчета.
		// В колонках таблицы значений отображается следующая информация:
		//   - имя ячейки (код показателя);
		//   - вариант заполнения ячейки;
		//   - вычисленное по данным ИБ значение ячейки;
		//   - величина автокорректировки значения ячейки;
		//   - примечание к ячейке.
		//
				
		Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
			// перебираем строки макета
            					
			// Код показателя (по составу показателей) определяется по первой колонке макета
			КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
			ИмяПоказателя = КодПоказателя;

			Если КодПоказателя = "===" Тогда         // признак конечной строки
				Прервать;
			КонецЕсли;
			
			Если Лев(КодПоказателя, 2) = "//" Тогда  // пропускаем комментарии
				Продолжить;
			КонецЕсли;

			// код показателя по форме отчете (имя ячейки в полях табличного документа формы)
			КодПоказателяПоФорме = СокрЛП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
			// признак многострочности определяется по третьей колонке макета
			ПризнМногострочность = СокрЛП(МакетСоставаПоказателей.Область(Ном, 3).Текст);
			// по четвертой колонке определяется тип данных реквизита
			ТипДанныхРеквизита   = СокрЛП(МакетСоставаПоказателей.Область(Ном, 4).Текст);
			// по колонке 5 определяется исходное количество строк многострочного раздела
			стрКолСтрокИсходный  = СокрЛП(МакетСоставаПоказателей.Область(Ном, 5).Текст);
			// вариант заполнения ячейки определяется по колонке 6 макета
			стрВариантЗаполнения = РегламентированнаяОтчетность.ПолучитьВариантЗаполненияПоказателяРегОтчета(МакетСоставаПоказателей, Ном);
			
			ДопОписание			 = СокрЛП(МакетСоставаПоказателей.Область(Ном, 7).Текст);
			// признак обязательности заполнения показателя
			Обязательность  	 = СокрЛП(МакетСоставаПоказателей.Область(Ном, 8).Текст);
			
			// код показателя из структуры, берется из колонки 9
			КодПоказателяПоСтруктуре = СокрЛП(МакетСоставаПоказателей.Область(Ном, 9).Текст);

			чКолСтрокИсходный    = ? (ПустаяСтрока(стрКолСтрокИсходный),  0, Число(стрКолСтрокИсходный));
			чВариантЗаполнения   = ? (ПустаяСтрока(стрВариантЗаполнения), 0, Число(стрВариантЗаполнения));

			// формируем таблицу значений, содержащей состав показателей отчета
			НоваяСтрока = мТаблицаСоставПоказателей.Добавить();
			НоваяСтрока.ИмяПоляТаблДокумента     = ИмяСтраницы;
			НоваяСтрока.КодПоказателяПоСоставу   = КодПоказателя;
			НоваяСтрока.КодПоказателяПоФорме     = КодПоказателяПоФорме;
			НоваяСтрока.ПризнМногострочности     = ПризнМногострочность;
			НоваяСтрока.ТипДанныхПоказателя      = ТипДанныхРеквизита;
			НоваяСтрока.КодПоказателяПоСтруктуре = КодПоказателяПоСтруктуре;

			Если чВариантЗаполнения <> 0
			 ИЛИ ИмяСтраницы = "Раздел2" Тогда
				// Если в колонке 6 задан вариант заполнения показателя, 
				// то его значение может определяться по данным ИБ.
				// Дополняем таблицу значений вариантов заполнения
				НоваяСтрока = ЭтаФорма["ТаблицаВариантыЗаполнения" + ИмяСтраницы][0].ТаблицаВариантовЗаполнения.Добавить();
				НоваяСтрока.КодПоказателя      = ? (Не ПустаяСтрока(КодПоказателяПоФорме), КодПоказателяПоФорме, КодПоказателя);
				НоваяСтрока.ВариантЗаполнения  = чВариантЗаполнения;
				НоваяСтрока.КодПоказателяПоСтруктуре  = КодПоказателяПоСтруктуре;
			КонецЕсли;

		КонецЦикла;

		Если ЭтаФорма["ТаблицаВариантыЗаполнения" + ИмяСтраницы][0].ТаблицаВариантовЗаполнения.Количество() > 0 Тогда		
			// имеются автоматически заполняемые ячейки
            
			// Создаем структуру, содержащей варианты заполнения показателей отчета.
			//
			// В качестве ключа используется имя страницы основной панели формы, содержащей
			//   табличный документ с автоматически заполняемыми показателями.
			// В качестве значения принимаем Массив из таблицы значений - вариантов заполнения
			//   показателей по каждой странице многостраничного раздела.
			//
			мСтруктураВариантыЗаполнения.Вставить(ИмяСтраницы, ИмяСтраницы);
			мСтруктураВариантыЗаполненияЭталон.Вставить(ИмяСтраницы, ИмяСтраницы);
						
		Конецесли;

	КонецЦикла;
	
	ФормироватьСтруктуруСтраницОтчета();
	
КонецПроцедуры

&НаСервере
Процедура ФормироватьСтруктуруСвойствСтраниц() Экспорт
		
	мСвойстваРазделовДекларации.ПолучитьЭлементы().Очистить();

	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	
	СтрокаУровня1.ИмяСтраницы                          = "Титульный";
	СтрокаУровня1.МногостраничностьВРазделе            = Истина;
	СтрокаУровня1.ОчищатьРаздел                        = Ложь;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	
	СтрокаУровня1.ИмяСтраницы                          = "ФизЛица";
	СтрокаУровня1.МногостраничностьВРазделе            = Истина;
	СтрокаУровня1.ОчищатьРаздел                        = Ложь;
	СтрокаУровня1.ИмяПредставления                     = "ФизЛицоФИО";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;

	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	
	СтрокаУровня1.ИмяСтраницы                          = "Декларация";
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	
	НовСтр = СтрокаУровня1.МногострочностьВРазделе.Добавить();
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();

	СтрокаУровня1.ИмяСтраницы                          = "Возвраты";
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	
	НовСтр = СтрокаУровня1.МногострочностьВРазделе.Добавить();
	    	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьПоказателиИзМакета(РазделВМакете)
	
	Если СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета >= '2012-07-01' Тогда
		МакетСоставаПоказателей = Отчеты[Сред(Лев(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, ".Форма.") - 1), 7)].ПолучитьМакет("Списки2012Кв3_20120726");
	Иначе
		МакетСоставаПоказателей = Отчеты[Сред(Лев(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, ".Форма.") - 1), 7)].ПолучитьМакет("Списки2006Кв1");
	КонецЕсли;

	ТекОбласть = МакетСоставаПоказателей.Области.Найти(РазделВМакете);

	Если ТекОбласть <> Неопределено Тогда

		Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
			// Перебираем строки макета.

			КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
			Название = СокрП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
			Если КодПоказателя = "###" Тогда
				Прервать;
			Иначе

				Если РазделВМакете = "КодыВидовПродукции" Тогда

					НовСтрока = мКодыВидовПродукции.Добавить();

				ИначеЕсли РазделВМакете = "ВидыДеятельности" Тогда

					НовСтрока = мВидыДеятельности.Добавить();
					
				ИначеЕсли РазделВМакете = "КодыСубъектовРФ" Тогда

					НовСтрока = мКодыСубъектовРФ.Добавить();	

				КонецЕсли;

				НовСтрока.Код= КодПоказателя;
				НовСтрока.Название = Название;
				
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПоказатьПериод()

	СтруктураРеквизитовФормы.СтрПериодОтчета = ПредставлениеПериода( НачалоДня(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета), КонецДня(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета), "ФП = Истина" );
    
	Если (СтруктураРеквизитовФормы.мДокументВосстановлен) И (СтруктураРеквизитовФормы.мСкопированаФорма = Неопределено) Тогда
		Возврат;
	КонецЕсли;
    
	НомерМесяца   = Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ=М");
	НомерКвартала = Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ=к");
	НомерГода     = Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ=гггг");

	// Отображаем на титульном листе отчетный период
	Если СтруктураРеквизитовФормы.мПериодичность = Перечисления.Периодичность.Месяц Тогда
		ТабличныйДокумент.Области.НалогПериод.Значение = "1 / " + РегламентированнаяОтчетностьКлиентСервер.ДополнитьСтроку(НомерМесяца, 2, "0");
	Иначе
		Если НомерМесяца = "3" Тогда
			ТабличныйДокумент.Области.НалогПериод.Значение = "3";
		ИначеЕсли НомерМесяца = "6" Тогда
			ТабличныйДокумент.Области.НалогПериод.Значение = "6";
		ИначеЕсли НомерМесяца = "9" Тогда
			ТабличныйДокумент.Области.НалогПериод.Значение = "9";
		ИначеЕсли НомерМесяца = "12" Тогда
			ТабличныйДокумент.Области.НалогПериод.Значение = "0";
		КонецЕсли;

	КонецЕсли;

	ТабличныйДокумент.Области.ОтчетГод.Значение = НомерГода;
	    
КонецПроцедуры

&НаСервере
Процедура ФормироватьСтруктуруСтраницОтчета() 

	мДеревоСтраницОтчета.ПолучитьЭлементы().Очистить();

	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Титульный";
	СтрокаУровня1.Представление            = "Титульный лист";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "ФизЛица";
	СтрокаУровня1.Представление            = "Сведения" + Символы.ПС + "о физ. лицах";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Декларация";
	СтрокаУровня1.Представление            = "Декларация";
	СтрокаУровня1.ОриентацияСтраницы       = "Ландшафт";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;

	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Возвраты";
	СтрокаУровня1.Представление            = "Возвраты";
	СтрокаУровня1.ОриентацияСтраницы       = "Ландшафт";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьИННКПП()

	ОргСведения = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(СтруктураРеквизитовФормы.Организация, ДатаПодписи, "ИННЮЛ, КППЮЛ, ТелОрганизации");

	ИННЮЛ = "";
	КППЮЛ = "";
	ОргСведения.Свойство("ИННЮЛ", ИННЮЛ);
	ОргСведения.Свойство("КППЮЛ", КППЮЛ);

	Если НЕ ЗначениеЗаполнено(ИННЮЛ) Тогда
		ИННЮЛ = РегламентированнаяОтчетностьКлиентСервер.ДополнитьСтроку(ИННЮЛ, 12, " ");
	Иначе
		ИННЮЛ = РегламентированнаяОтчетностьКлиентСервер.ДополнитьСтроку(ИННЮЛ, 12, "0");
	КонецЕсли;

	КППЮЛ = РегламентированнаяОтчетностьКлиентСервер.ДополнитьСтроку(КППЮЛ, 9, " ");

	СтруктураРеквизитовФормы.мИННЮЛ = ИННЮЛ;
	СтруктураРеквизитовФормы.мКППЮЛ = КППЮЛ;

	СтруктураРеквизитовФормы.мТелОрганизации = "";
	ОргСведения.Свойство("ТелОрганизации", СтруктураРеквизитовФормы.мТелОрганизации);

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСведенияОбОрганизации(ВПрограммеИзмененаДатаПодписи = Ложь)

	Если (СтруктураРеквизитовФормы.Организация = Неопределено) Или (СтруктураРеквизитовФормы.Организация = РегламентированнаяОтчетностьКлиентСервер.ПустоеЗначениеТипа("СправочникСсылка.Организации")) Тогда
		Возврат
	КонецЕсли;

	// Составляем список данных, необходимых для вывода в декларацию
	Сведения = "";

	Если НЕ ВПрограммеИзмененаДатаПодписи Тогда
		Сведения = "ИННЮЛ, КППЮЛ, НаимЮЛПол, КодНО, НаимНО, ТипНП, ОКАТО, АдрЮР, ОГРН, ТелОрганизации, ";
	КонецЕсли;

	Сведения = Сведения + "ФИОРук, ФИОБух, ФИОУпПред, ФИОИсп, ИННРук, ИННБух, ИННУпПред";

	ПолучитьИННКПП();
		
	Результат = РегламентированнаяОтчетностьВызовСервера.ЗаполнитьСведенияОбОрганизацииНаСервере(ЭтаФорма, Сведения);
    
	ТабличныйДокумент.Области.КодИМНС.Значение = "";
	ТабличныйДокумент.Области.ОргИМНС.Значение = "";	
	
	Если Результат <> Неопределено Тогда
		СтруктураРеквизитовФормы.мИННДиректор  = Результат.ИННРук;
		СтруктураРеквизитовФормы.мИННБухгалтер = Результат.ИННБух;
		СтруктураРеквизитовФормы.мИННУпПред    = Результат.ИННУпПред;
	КонецЕсли;

	Если (НЕ ВПрограммеИзмененаДатаПодписи) И (Результат <> Неопределено) Тогда

		СтруктураРеквизитовФормы.мИННДиректор  = Результат.ИННРук;
		СтруктураРеквизитовФормы.мИННБухгалтер = Результат.ИННБух;
		СтруктураРеквизитовФормы.мИННУпПред    = Результат.ИННУпПред;

		ТабличныйДокумент.Области.ОКАТОТитульный.Значение = Результат.ОКАТО;

		ТипНП = Результат.ТипНП;
		Если ТипНП = 1 Тогда
			// Необходимо анализировать здесь, является ли ЮР лицом или является ПБОЮЛом
			ТабличныйДокумент.Области.ТипОрг1.Значение = "V";
			ТабличныйДокумент.Области.ТипОрг2.Значение = "";
		ИначеЕсли ТипНП = 2 Тогда
			ТабличныйДокумент.Области.ТипОрг2.Значение = "V";
			ТабличныйДокумент.Области.ТипОрг1.Значение = "";
		КонецЕсли;
		
		УстановитьПримечаниеНаТитульныхЛистахГруппыАлкогольныхДеклараций();
		
		Если НЕ ЗначениеЗаполнено(СтрЗаменить(Результат.АдрЮР, ",","")) Тогда
			ТабличныйДокумент.Области.АдрЮР.Значение = "";
			СтруктураРеквизитовФормы.мАдрЮРТитульныйВыгрузка = "";
		Иначе
			ТабличныйДокумент.Области.АдрЮР.Значение = РегламентированнаяОтчетностьКлиентСервер.ПредставлениеАдресаВФормате9Запятых(Результат.АдрЮР);
			СтруктураРеквизитовФормы.мАдрЮРТитульныйВыгрузка = РегламентированнаяОтчетностьВызовСервера.ЗаменитьТекстРегионаНаКодРегиона(Результат.АдрЮР);
		КонецЕсли;

		СтруктураРеквизитовФормы.ФИОИсп = Результат.ФИОИсп;
		
		ТабличныйДокумент.Области.ИНН1.Значение = Результат.ИННЮЛ;
		ТабличныйДокумент.Области.КПП1.Значение = Результат.КППЮЛ;
		
		ТабличныйДокумент.Области.ОГРН.Значение = Результат.ОГРН;
		
		ТабличныйДокумент.Области.ИННРук.Значение = Результат.ИННРук;
		ТабличныйДокумент.Области.ИННГБ.Значение  = Результат.ИННБух;
		ТабличныйДокумент.Области.ИННУП.Значение  = Результат.ИННУпПред;
		
		СтруктураРеквизитовФормы.Руководитель   = Результат.ФИОРук;
		СтруктураРеквизитовФормы.Бухгалтер      = Результат.ФИОБух;
		СтруктураРеквизитовФормы.Исполнитель    = Результат.ФИОИсп;
		СтруктураРеквизитовФормы.ТелОрганизации = Результат.ТелОрганизации;
		
	ИначеЕсли (ВПрограммеИзмененаДатаПодписи) И (Результат <> Неопределено) Тогда

		СтруктураРеквизитовФормы.Руководитель = Результат.ФИОРук;
		СтруктураРеквизитовФормы.Бухгалтер    = Результат.ФИОБух;
		СтруктураРеквизитовФормы.Исполнитель  = Результат.ФИОИсп;
				
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	РегламентированнаяОтчетностьКлиент.ПередЗакрытиемРегламентированногоОтчета(ЭтаФорма, Отказ, СтандартнаяОбработка, ЗавершениеРаботы, ТекстПредупреждения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ЗавершениеРаботы Тогда
				
		Возврат;
		
	КонецЕсли;
	
	ПриЗакрытииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПриЗакрытииНаСервере()
	
	РегламентированнаяОтчетность.ПриЗакрытииРегламентированногоОтчета(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура СохранитьДеревоСтраницОтчета(Знач мСохраненныйДок)
	
	Если мСохраненныйДок <> Неопределено Тогда
				
		Если ТипЗнч(мСохраненныйДок) = Тип("ДокументСсылка.РегламентированныйОтчет") Тогда
			мСохраненныйДок = мСохраненныйДок.ПолучитьОбъект();
		КонецЕсли;
		
		Если Не мСохраненныйДок.ЭтоНовый() Тогда
			// Сохраняем выбранные листы для печати в хранилище
			ХранилищеДанных = Новый ХранилищеЗначения(РеквизитФормыВЗначение("мДеревоСтраницОтчета"));
			мСохраненныйДок.ДеревоНастройкиСтраниц = ХранилищеДанных;
			Попытка
				мСохраненныйДок.Записать();
			Исключение
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьДеревоРазделовОтчетаНаСервере() Экспорт
	
	СформироватьДеревоРазделовОтчета(ЭтаФорма);
			
КонецПроцедуры

&НаКлиенте
Процедура СформироватьДеревоРазделовОтчетаНаКлиенте() Экспорт
	
	СформироватьДеревоРазделовОтчета(ЭтаФорма);
			
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СформироватьДеревоРазделовОтчета(Форма)
	
	Форма["РазделыОтчета"].ПолучитьЭлементы().Очистить();
	
	Для Каждого ЭлементДереваСтраницОтчета Из Форма["мДеревоСтраницОтчета"].ПолучитьЭлементы() Цикл
		
		Если ЭлементДереваСтраницОтчета.ПоказатьСтраницу = 1 Тогда
			
			ЭлементРазделовОтчета = Форма["РазделыОтчета"].ПолучитьЭлементы().Добавить();
			ЭлементРазделовОтчета.КолонкаРазделыОтчета         = ЭлементДереваСтраницОтчета.Представление;
			ЭлементРазделовОтчета.КолонкаРазделыОтчетаСокрНаим = ЭлементДереваСтраницОтчета.ИмяСтраницы;
			ЭлементРазделовОтчета.ИндексКартинки               = 1;
			ЭлементРазделовОтчета.РазделМногостраничный        = Ложь;
			ЭлементРазделовОтчета.РазделМногострочный          = Ложь;
			
			НайденноеЗначение = Неопределено;
			
			Если Форма["мСтруктураМногостраничныхРазделов"].Свойство(ЭлементРазделовОтчета.КолонкаРазделыОтчетаСокрНаим, НайденноеЗначение) Тогда
				
				Если НЕ НайденноеЗначение = Неопределено Тогда
					
					НайденноеЗначение = Форма[НайденноеЗначение];
					
					ЭлементРазделовОтчета.ИндексКартинки        = 0;
					ЭлементРазделовОтчета.РазделМногостраничный = Истина;
					
					Для НомерСтраницы = 1 По НайденноеЗначение.Количество() Цикл
						
						СтраницаРазделаОтчета = ЭлементРазделовОтчета.ПолучитьЭлементы().Добавить();
						
						СтраницаРазделаОтчета.КолонкаРазделыОтчета              = "Стр. " + НомерСтраницы;
						СтраницаРазделаОтчета.КолонкаРазделыОтчетаСокрНаим      = ЭлементРазделовОтчета.КолонкаРазделыОтчетаСокрНаим;
						СтраницаРазделаОтчета.КолонкаНомерСтраницыРазделаОтчета = НомерСтраницы;
						СтраницаРазделаОтчета.ИндексКартинки                    = 1;
						СтраницаРазделаОтчета.РазделМногостраничный             = ЭлементРазделовОтчета.РазделМногостраничный;
						СтраницаРазделаОтчета.РазделМногострочный               = ЭлементРазделовОтчета.РазделМногострочный;
						
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЕсли;
				
		КонецЕсли;
				
	КонецЦикла;
			
КонецПроцедуры

&НаСервере
Процедура УправлениеЛистамиНаСервере(ТипНП = Неопределено) Экспорт
	
	// Процедура "заглушка". Для совместимости с общими механизмами работы с многостраничными разделами.
	Возврат;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДатуВЯчейкахНаКлиенте() Экспорт
    	
	ЗаполнитьДатуВЯчейках(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДатуВЯчейкахНаСервере() Экспорт
    	
	ЗаполнитьДатуВЯчейках(ЭтаФорма);
		
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьДатуВЯчейках(Форма)
	
	Если НЕ Форма.ТабличныйДокумент.Области.Найти("ДатаПодписи") = Неопределено Тогда
		Форма.ТабличныйДокумент.Области.ДатаПодписи.Значение = Форма.ДатаПодписи;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РазделыОтчетаПриАктивизацииСтроки(Элемент)
	
	Если Элемент.ТекущиеДанные = Неопределено
	 ИЛИ Элемент.ТекущаяСтрока = СтруктураРеквизитовФормы.ТекущаяСтрокаРазделовОтчета Тогда
		Возврат;
	КонецЕсли;
	
	РазделОтчета = Элемент.ТекущиеДанные.ПолучитьРодителя() = Неопределено;
	
	СтруктураРеквизитовФормы.ТекущаяСтрокаРазделовОтчета = Элемент.ТекущаяСтрока;
	
	Элементы.ОчиститьТекущуюСтраницу.Доступность = Истина;
	
	Если СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере Тогда
		Если Элемент.ТекущиеДанные.РазделМногостраничный Тогда
			Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета = ?(Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета = Неопределено
															        ИЛИ Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета = 0, 1, Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета);
		КонецЕсли;
		ВывестиМакетСтраницыВТабличныйДокументНаСервере(Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим, Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета, РазделОтчета);
	Иначе
		СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Истина;
	КонецЕсли;
	
	Элементы.РазделыОтчетаКонтекстноеМенюДобавитьСтраницу.Видимость = Ложь;
	Элементы.РазделыОтчетаКонтекстноеМенюУдалитьСтраницу.Видимость = Ложь;
	
	Если Элемент.ТекущиеДанные.РазделМногостраничный Тогда
		
		Элемент.Развернуть(Элемент.ТекущаяСтрока);
		
		Если НЕ Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "ФизЛица" Тогда
			
			Элементы.РазделыОтчетаКонтекстноеМенюДобавитьСтраницу.Видимость = Истина;
			Элементы.РазделыОтчетаКонтекстноеМенюУдалитьСтраницу.Видимость  = Истина;
			
			Если РазделОтчета Тогда
				Элементы.ОчиститьТекущуюСтраницу.Доступность = Ложь;
				Элементы.РазделыОтчетаКонтекстноеМенюУдалитьСтраницу.Видимость = Ложь;
				Если Элемент.ТекущиеДанные.ПолучитьЭлементы().Количество() = 1 Тогда
					Элементы.РазделыОтчетаКонтекстноеМенюУдалитьСтраницу.Видимость  = Ложь;
				КонецЕсли;
			ИначеЕсли Элемент.ТекущиеДанные.ПолучитьРодителя().ПолучитьЭлементы().Количество() = 1 Тогда
				Элементы.РазделыОтчетаКонтекстноеМенюУдалитьСтраницу.Видимость = Ложь;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Титульный" Тогда
		Если Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета < 2 Тогда
			Элементы.РазделыОтчетаКонтекстноеМенюУдалитьСтраницу.Видимость = Ложь;
			ТабличныйДокумент.Области.Представляется.ЦветФона = Новый Цвет(255, 255, 192);
			ТабличныйДокумент.Области.Представляется.Защита = Ложь;
			ТабличныйДокумент.Области.НомКоррект.ЦветФона = Новый Цвет(255, 255, 192);
			ТабличныйДокумент.Области.НомКоррект.Защита = Ложь;
			фНомКоррект = Формат("ЧЦ=3; ЧН=0");
			ТабличныйДокумент.Области.ДатаПодписи.ЦветФона = Новый Цвет(255, 255, 192);
			ТабличныйДокумент.Области.ДатаПодписи.Защита = Ложь;
		Иначе
			Элементы.РазделыОтчетаКонтекстноеМенюУдалитьСтраницу.Видимость = Истина;
			ТабличныйДокумент.Области.Представляется.ЦветФона = Новый Цвет();
			ТабличныйДокумент.Области.Представляется.Защита = Истина;
			ТабличныйДокумент.Области.НомКоррект.ЦветФона = Новый Цвет();
			ТабличныйДокумент.Области.НомКоррект.Защита = Истина;
			фНомКоррект = Формат("");
			ТабличныйДокумент.Области.ДатаПодписи.ЦветФона = Новый Цвет();
			ТабличныйДокумент.Области.ДатаПодписи.Защита = Истина;
		КонецЕсли;
		ТабличныйДокумент.Области.НомКоррект.Формат = фНомКоррект;
	КонецЕсли;
	
	Если Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Декларация"
	 ИЛИ Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Возвраты" Тогда
		Элементы.ТабличныйДокументКонтекстноеМенюДобавитьСтроку.Видимость = Истина;
		Элементы.ТабличныйДокументКонтекстноеМенюУдалитьСтроку.Видимость = Истина;
	Иначе
		Элементы.ТабличныйДокументКонтекстноеМенюДобавитьСтроку.Видимость = Ложь;
		Элементы.ТабличныйДокументКонтекстноеМенюУдалитьСтроку.Видимость = Ложь;
	КонецЕсли;
	
	Если Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "ФизЛица" Тогда
		Элементы.РазделыОтчетаКонтекстноеМенюДобавитьСтраницу.Видимость = Ложь;
		Элементы.РазделыОтчетаКонтекстноеМенюУдалитьСтраницу.Видимость  = Ложь;
	КонецЕсли;
	
	ТекТабличноеПоле = ЭтаФорма["ТабличныйДокумент"];
	ИмяТекущейОбласти = "R1C1";
	ЭтаФорма.Элементы["ТабличныйДокумент"].ТекущаяОбласть = ТекТабличноеПоле.Область(ИмяТекущейОбласти);
	ЭтаФорма.ТекущийЭлемент = ЭтаФорма.Элементы["ТабличныйДокумент"];
	
	Элементы.Обновить.Доступность = Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Титульный";
	
КонецПроцедуры

&НаСервере
Процедура ВывестиМакетСтраницыВТабличныйДокументНаСервере(ИмяТекРаздела, НомерСтраницыРазделаОтчета, РазделОтчета = Ложь)
	
	СохранитьДанныеРаздела(СтруктураРеквизитовФормы.НаимТекущегоРаздела, Истина);
	
	ВывестиМакетВТаблДокНаСервере(ИмяТекРаздела, НомерСтраницыРазделаОтчета, , РазделОтчета);
	
	СтруктураРеквизитовФормы.НаимТекущегоРаздела  = ИмяТекРаздела;
	
КонецПроцедуры

&НаСервере
Процедура СохранитьДанныеРаздела(НаимРаздела, ОчищатьРазделЕслиЕстьМногострочность, ИзменятьАктивнуюСтраницу = Истина)	
	
	// Многостраничные разделы.
	//
	Если НаимРаздела = "Титульный"
	 ИЛИ НаимРаздела = "ФизЛица" Тогда
	     			
		СтруктураДанных = Новый Структура;
		
		СтруктураДанных = СобратьДанныеТекущегоТаблПоляНаСервере("ТабличныйДокумент");
		
		Если НаимРаздела = "Титульный" Тогда
			
			НаимТаблицыСтраницы = "ТаблицаСтраницыТитульный";
			
		ИначеЕсли НаимРаздела = "ФизЛица" Тогда
			
			НаимТаблицыСтраницы = "ТаблицаСтраницыФизЛица";
				
		КонецЕсли;
		
		АктивнаяСтраница = ЭтаФорма[НаимТаблицыСтраницы].НайтиСтроки(Новый Структура("АктивнаяСтраница", Истина));
		
		Если АктивнаяСтраница.Количество() > 0 Тогда
			
			АктивнаяСтраница = АктивнаяСтраница[0];
			
			АктивнаяСтраница.Данные.Очистить();
			АктивнаяСтраница.Данные.Добавить(СтруктураДанных);
			
			АктивнаяСтраница.АктивнаяСтраница = НЕ ИзменятьАктивнуюСтраницу;
						
		КонецЕсли;
		
	// Многострочные разделы.
	//
	ИначеЕсли НаимРаздела = "Декларация"
		  ИЛИ НаимРаздела = "Возвраты" Тогда	
		  
		  ЭтаФорма["СтруктураДанных" + НаимРаздела] = СобратьДанныеТекущегоТаблПоля(ЭтаФорма, "ТабличныйДокумент");
		  	  
		  Если НаимРаздела = "Декларация" Тогда
			  
			  ОбновитьСтруктуруМногострочногоРазделаНаСервере(СтруктураРеквизитовФормы.мИдГруппы1);
			  ОбновитьСтруктуруМногострочногоРазделаНаСервере(СтруктураРеквизитовФормы.мИдГруппы2);
			  
		  ИначеЕсли НаимРаздела = "Возвраты" Тогда
			  
			  ОбновитьСтруктуруМногострочногоРазделаНаСервере(СтруктураРеквизитовФормы.мИдГруппы3);
			  ОбновитьСтруктуруМногострочногоРазделаНаСервере(СтруктураРеквизитовФормы.мИдГруппы4);
			  
		  КонецЕсли;
			
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура ВывестиМакетВТаблДокНаСервере(ИмяТекРаздела, НомерСтраницыРазделаОтчета, ИзменитьПризнакАктивностиСтраницы = Истина, РазделОтчета = Ложь)
	
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(Отчеты[Сред(Лев(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, ".Форма.") - 1), 7)].ПолучитьМакет(Сред(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + ИмяТекРаздела));
		
	// Многостраничные разделы.
	//
	Если ИмяТекРаздела = "Титульный"
	 ИЛИ ИмяТекРаздела = "ФизЛица" Тогда
		
		НаимТаблицыСтраницы = "ТаблицаСтраницы" + ИмяТекРаздела;
		СтруктураДанных     = Новый Структура;
		СписокДанных        = ЭтаФорма[НаимТаблицыСтраницы][НомерСтраницыРазделаОтчета - 1].Данные;
		
		Если ИзменитьПризнакАктивностиСтраницы Тогда
			
			Для каждого ТаблицаСтраницы Из ЭтаФорма[НаимТаблицыСтраницы] Цикл
				ТаблицаСтраницы.АктивнаяСтраница = Ложь;
			КонецЦикла;
			
			ЭтаФорма[НаимТаблицыСтраницы][НомерСтраницыРазделаОтчета - 1].АктивнаяСтраница = Истина;
			
		КонецЕсли;
		
		Если ИмяТекРаздела = "Титульный" Тогда
			Для Каждого ТаблицаСтраницы Из ЭтаФорма[НаимТаблицыСтраницы] Цикл
				Если ЭтаФорма[НаимТаблицыСтраницы].Количество() = 1
				 ИЛИ РазделОтчета ИЛИ НомерСтраницыРазделаОтчета = 1 Тогда
					ОбластьТД = ТабличныйДокумент.Области.Найти("УдалитьСтраницуЗначок");
					ОбластьТД.Текст = "";
					ОбластьТД.Гиперссылка = Ложь;
					ОбластьТД = ТабличныйДокумент.Области.Найти("УдалитьСтраницу");
					ОбластьТД.Текст = "";
					ОбластьТД.Гиперссылка = Ложь;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	    Если СписокДанных.Количество() > 0 Тогда
	    	СтруктураДанных = СписокДанных[0].Значение;
	    КонецЕсли;
	     	 
		Для Каждого ЭлСтруктуры Из СтруктураДанных Цикл
			Попытка
				ТабличныйДокумент.Области[ЭлСтруктуры.Ключ].Значение = ЭлСтруктуры.Значение;
			Исключение
			КонецПопытки;
	    КонецЦикла;
						
	// Многострочные разделы.
	//	
	ИначеЕсли ИмяТекРаздела = "Декларация"
	      ИЛИ ИмяТекРаздела = "Возвраты" Тогда
		  
		  Для Каждого ЭлСтруктуры Из ЭтаФорма["СтруктураДанных" + ИмяТекРаздела] Цикл
			  Попытка
				  ТабличныйДокумент.Области[ЭлСтруктуры.Ключ].Значение = ЭлСтруктуры.Значение;
			  Исключение
			  КонецПопытки;
		  КонецЦикла;
		  
		  СтруктураГруппы = Неопределено;
		  
		  Если ИмяТекРаздела = "Декларация" Тогда
			  
			  мСтруктураМногострочныхРазделов.Свойство(СтруктураРеквизитовФормы.мИдГруппы1, СтруктураГруппы);
			  СтруктураГруппы = ЭтаФорма[СтруктураГруппы];
			  ВывестиРазделВТабличныйДокумент(ЭтаФорма, СтруктураРеквизитовФормы.мИдГруппы1, СтруктураГруппы);
			  
			  мСтруктураМногострочныхРазделов.Свойство(СтруктураРеквизитовФормы.мИдГруппы2, СтруктураГруппы);
			  СтруктураГруппы = ЭтаФорма[СтруктураГруппы];
			  ВывестиРазделВТабличныйДокумент(ЭтаФорма, СтруктураРеквизитовФормы.мИдГруппы2, СтруктураГруппы);
			  
		  ИначеЕсли ИмяТекРаздела = "Возвраты" Тогда
			  
			  мСтруктураМногострочныхРазделов.Свойство(СтруктураРеквизитовФормы.мИдГруппы3, СтруктураГруппы);
			  СтруктураГруппы = ЭтаФорма[СтруктураГруппы];
			  ВывестиРазделВТабличныйДокумент(ЭтаФорма, СтруктураРеквизитовФормы.мИдГруппы3, СтруктураГруппы);
			  
			  мСтруктураМногострочныхРазделов.Свойство(СтруктураРеквизитовФормы.мИдГруппы4, СтруктураГруппы);
			  СтруктураГруппы = ЭтаФорма[СтруктураГруппы];
			  ВывестиРазделВТабличныйДокумент(ЭтаФорма, СтруктураРеквизитовФормы.мИдГруппы4, СтруктураГруппы);
			  
		  КонецЕсли;
		
		ОтрисоватьЗначкиУдаленияСтрок();
		
	КонецЕсли;	
	
	Если ИмяТекРаздела = "Титульный" Тогда
		
		ОбработкаАдресаПриЛистании();
		ОбработатьВидДеятельности();
						
	Иначе
		
		УстановитьЦветФонаЯчейкиНаСервере(,, ИмяТекРаздела);
		
		Если ИмяТекРаздела = "Декларация"
		 ИЛИ ИмяТекРаздела = "Возвраты" Тогда
		 
			ТабличныйДокумент.Области.НомСтр1.Значение = "0";
			ТабличныйДокумент.Области.НомСтр2.Значение = "0";
			ТабличныйДокумент.Области.Руководитель.Значение         = СтруктураРеквизитовФормы.Руководитель;
			ТабличныйДокумент.Области.Бухгалтер.Значение            = СтруктураРеквизитовФормы.Бухгалтер;
			ТабличныйДокумент.Области.Исполнитель.Значение          = СтруктураРеквизитовФормы.Исполнитель;
			ТабличныйДокумент.Области.ТелОрганизации.Значение       = СтруктураРеквизитовФормы.ТелОрганизации;
			ТабличныйДокумент.Области.ДатаПодписанияОтчета.Значение = ДатаПодписи;
			
			Если ИмяТекРаздела = "Декларация" Тогда
				ТабличныйДокумент.Области.П000000000001_1.Значение = "1";
				ТабличныйДокумент.Области.П000010003001_1.Значение = "1";
			ИначеЕсли ИмяТекРаздела = "Возвраты" Тогда
				ТабличныйДокумент.Области.П000010000001_1.Значение = "1";
				ТабличныйДокумент.Области.П000010001001_1.Значение = "1";
			КонецЕсли;
			
		КонецЕсли;
								
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиРазделВТабличныйДокумент(Форма, ИмяГруппы, СтруктураГруппы) Экспорт
	Перем ИсходноеКоличествоСтрокГруппы;

	// определим исходное колво строк многострочного раздела,
	// соответствующее бумажной форме отчета
	Форма.мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);

	// реальное кол-во строк (колво заполненных строк)
	ТекущееКоличествоСтрокГруппы = СтруктураГруппы.Количество();

	ТекТабличноеПолеИмя = "ТабличныйДокумент";
	
	ТекТабличноеПоле = Форма[ТекТабличноеПолеИмя];
	
	ПерерисоватьСтроки = (НЕ ТекущееКоличествоСтрокГруппы > ИсходноеКоличествоСтрокГруппы);
	СтруктураГруппыКолонки = ДанныеФормыВЗначение(СтруктураГруппы, Тип("ТаблицаЗначений")).Колонки;

	// При восстановлении сохраненных данных отчета сравниваем исходное кол-во
	// отображаемых в форме строк многострочного раздела с реальным количеством
	// созданных строк в сохраненном отчете.
	Если ТекущееКоличествоСтрокГруппы > ИсходноеКоличествоСтрокГруппы Тогда
		
		НазвОбласти = Форма.СтруктураРеквизитовФормы.мСоответствияМнгЧ.Получить(ИмяГруппы);
		Низ = ТекТабличноеПоле.Области[НазвОбласти].Низ;
		Верх = ТекТабличноеПоле.Области[НазвОбласти].Верх;
		ВысотаСтроки = ?(ИмяГруппы = Форма.СтруктураРеквизитовФормы.мИдГруппы1 Или ИмяГруппы = Форма.СтруктураРеквизитовФормы.мИдГруппы3, 4, 1);
		// Скопируем верхнюю часть документа, не включая многострочную часть.
		ТаблДок = ТекТабличноеПоле.ПолучитьОбласть(1, , Верх - 1);
		// Скопируем подвал, все, что ниже области многострочного блока.
		Подвал = ТекТабличноеПоле.ПолучитьОбласть(Низ + 1, , ТекТабличноеПоле.ВысотаТаблицы);

		Строка = ТекТабличноеПоле.ПолучитьОбласть(Верх, , Верх + ВысотаСтроки - 1);
		Если (ИмяГруппы = Форма.СтруктураРеквизитовФормы.мИдГруппы2) Или (ИмяГруппы = Форма.СтруктураРеквизитовФормы.мИдГруппы4) Тогда
			Ч2Верх  = ТекТабличноеПоле.Области.МногострочнаяЧасть2.Верх;
			Ч2Низ   = ТекТабличноеПоле.Области.МногострочнаяЧасть2.Низ;
		КонецЕсли;

		Если ВысотаСтроки > 1 Тогда
			Строка.Области.ОпределениеВысотыСтрокиМногострочнойЧасти.Имя = "";
		КонецЕсли;

		Если Строка.Области.Найти(НазвОбласти) <> Неопределено Тогда
			Строка.Области[НазвОбласти].Имя = "";
		КонецЕсли;

		// При превышении реального кол-ва строк над исходным кол-вом (по шаблону),
		// автоматически добавляем необходимое колво строк.
                               
		Для НомНовойСтроки = 1 По ТекущееКоличествоСтрокГруппы Цикл
			// Переопределим именнованность.
			Строка1 = Строка.ПолучитьОбласть(1, , Строка.ВысотаТаблицы);
			НомСтр = Формат(НомНовойСтроки, "ЧГ=0");
			
			Для каждого Кол Из СтруктураГруппыКолонки Цикл
				КолИмя = Кол.Имя;
				Строка1.Области[КолИмя + "_1"].Имя = КолИмя + "_" + НомСтр;
				
				Если Прав(КолИмя, 2) = "01" Тогда
					Строка1.Области["УдалитьСтроку" + КолИмя + "_1"].Имя = "УдалитьСтроку" + КолИмя + "_" + НомСтр;
				КонецЕсли;
				
			КонецЦикла;

			РегламентированнаяОтчетность.ЗаполнитьСтрокуДаннымиИзТаблицы(ДанныеФормыВЗначение(СтруктураГруппы, Тип("ТаблицаЗначений")), Строка1, СтруктураГруппы[НомНовойСтроки - 1], НомСтр);
			ТаблДок.Вывести(Строка1);
                                                     
		КонецЦикла;
             
		ТаблДок.Вывести(Подвал);
		ТекТабличноеПоле.Очистить();
		ТекТабличноеПоле.Вывести(ТаблДок);

		Если (ИмяГруппы = Форма.СтруктураРеквизитовФормы.мИдГруппы1) Или (ИмяГруппы = Форма.СтруктураРеквизитовФормы.мИдГруппы3) Тогда
			ТекТабличноеПоле.Область("R9C19:R12C19").Имя = "ОпределениеВысотыСтрокиМногострочнойЧасти";
			ТекТабличноеПоле.Область("R9:R12").Имя = "МногострочнаяЧасть1";
		Иначе
			ТекТабличноеПоле.Область(Ч2Верх, , Ч2Низ).Имя = "МногострочнаяЧасть2";
		КонецЕсли;

	КонецЕсли;
	
	Если ПерерисоватьСтроки Тогда
		// Сделаем желтыми все строки.
		Для Инд = 1 По СтруктураГруппы.Количество() Цикл
			ОперацияНадСтрокойМногострочногоБлока(Форма, ИмяГруппы, Ложь, Формат(Инд, "ЧГ=0"));
		КонецЦикла;
	КонецЕсли;

	// выводим значения строк
	Для Каждого СтрокаТаблицы Из СтруктураГруппы Цикл
		
		НомерСтрокиВТаблице      = СтруктураГруппы.Индекс(СтрокаТаблицы);
		НомерСтрокиВФормеТаблицы = НомерСтрокиВТаблице + 1;
		
		Для НомерГрафы = 1 По Форма.мСтруктураКолвоКолонокРазделов[ИмяГруппы] Цикл
			
			Для Ном = 1 По ?(НомерГрафы = 9, 4, ?(НомерГрафы = 11, 2, 1)) Цикл
				
				Если НомерГрафы = 9
					ИЛИ НомерГрафы = 11 Тогда
					
					КолонкаТаблицыИмя = Лев(ИмяГруппы, 9) + "1" + Ном + Формат(НомерГрафы, "ЧЦ=2; ЧВН=");
					
				Иначе
					
					КолонкаТаблицыИмя = ИмяГруппы + Формат(НомерГрафы, "ЧЦ=2; ЧВН=");
					
				КонецЕсли;
				
				Если СтруктураГруппы[0].Свойство(КолонкаТаблицыИмя) Тогда
					
					// задаем значение ячейки
					Если (КолонкаТаблицыИмя = "П000000000008"
						Или КолонкаТаблицыИмя = "П000010003008"
						Или КолонкаТаблицыИмя = "П000010000008"
						Или КолонкаТаблицыИмя = "П000010001008") Тогда
						ЗначениеЯчейки           = СтрокаТаблицы[КолонкаТаблицыИмя];
						ИмяЯчейки                = КолонкаТаблицыИмя + "_" + Формат(НомерСтрокиВФормеТаблицы, "ЧГ=0");
						Если НЕ ((СтрНайти(ЗначениеЯчейки, "643,") = 1) 
							Или (ЗначениеЯчейки = ",,,,,,,,,")
							Или (ЗначениеЯчейки = "643,,,,,,,,,")
							Или (ПустаяСтрока(ЗначениеЯчейки))) Тогда
							// Иностранный адрес
							ОперацияНадСтрокойМногострочногоБлока(Форма, ИмяГруппы, Истина, Формат(НомерСтрокиВФормеТаблицы, "ЧГ=0"), Истина)
						КонецЕсли;
						
						ЗначениеЯчейки = РегламентированнаяОтчетностьКлиентСервер.ПредставлениеАдресаВФормате9Запятых(ЗначениеЯчейки, Истина);
						
						ОбластьЯчейкиТаблицы          = ТекТабличноеПоле.Области[ИмяЯчейки];
						
						ОбластьЯчейкиТаблицы.Значение = ЗначениеЯчейки;
						
					КонецЕсли;
										
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ДобавитьНеобходимоеКоличествоДопСтрокНаСервере(ТекТабличноеПоле, ТекТабличноеПолеИмя, ИсходноеКоличествоСтрокГруппы, ТекущееКоличествоСтрокГруппы, ИмяГруппы, СтруктураГруппы) Экспорт
		
	ОбластьДопСтроки = ТекТабличноеПоле.ПолучитьОбласть("МногострочнаяЧасть");
	
	МногострочнаяЧастьВерх = ТекТабличноеПоле.Области.МногострочнаяЧасть.Верх;
			
	ТекТабличноеПоле.ВставитьОбласть(ОбластьДопСтроки.Область(), ТекТабличноеПоле.Область(МногострочнаяЧастьВерх + 1, , МногострочнаяЧастьВерх + ТекущееКоличествоСтрокГруппы - 1), ТипСмещенияТабличногоДокумента.ПоВертикали);
		
	Для НомНовойСтроки = ИсходноеКоличествоСтрокГруппы По ТекущееКоличествоСтрокГруппы Цикл
						
		Для Каждого Область Из ОбластьДопСтроки.Области Цикл
			
			ОбластьТаблДок = ТекТабличноеПоле.Область(МногострочнаяЧастьВерх + ТекущееКоличествоСтрокГруппы - НомНовойСтроки, Область.Лево, МногострочнаяЧастьВерх + ТекущееКоличествоСтрокГруппы - НомНовойСтроки, Область.Право);
			
			Если ОбластьТаблДок.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
				
				Если ОбластьТаблДок.СодержитЗначение Тогда
					ОбластьТаблДок.Очистить();
				КонецЕсли;
				
				ОбластьТаблДок.Имя = Лев(Область.Имя, СтрНайти(Область.Имя, "_")) + Строка(ТекущееКоличествоСтрокГруппы - НомНовойСтроки + 1);
				
			КонецЕсли;
			
		КонецЦикла;
						
	КонецЦикла;	
		
	ТекТабличноеПоле.Область(ТекТабличноеПоле.Области.МногострочнаяЧасть.Верх, , ТекТабличноеПоле.Области.МногострочнаяЧасть.Верх).Имя = "";
	
	ТекТабличноеПоле.Область(МногострочнаяЧастьВерх, , МногострочнаяЧастьВерх).Имя = "МногострочнаяЧасть";
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСтруктуруМногострочногоРазделаНаСервере(ИмяГруппы) Экспорт
	
	ОбновитьСтруктуруМногострочногоРаздела(ЭтаФорма, ИмяГруппы);
	
КонецПроцедуры // ОбновитьСтруктуруМногострочногоРазделаНаСервере()

&НаКлиенте
Процедура ОбновитьСтруктуруМногострочногоРазделаНаКлиенте(ИмяГруппы) Экспорт
	
	ОбновитьСтруктуруМногострочногоРаздела(ЭтаФорма, ИмяГруппы);
	
КонецПроцедуры // ОбновитьСтруктуруМногострочногоРазделаНаКлиенте()

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьСтруктуруМногострочногоРаздела(Форма, ИмяГруппы)
	
	Перем СтруктураГруппы;
	
	Форма.мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);
	
	СтруктураГруппы = Форма[СтруктураГруппы];
		
	ТекТабличноеПолеИмя = "ТабличныйДокумент";
	
	ТекТабличноеПоле = Форма[ТекТабличноеПолеИмя];
	
	Для НСтр = 1 По СтруктураГруппы.Количество() Цикл
		
		ТекСтрокаТаблицы = СтруктураГруппы[НСтр - 1];
		
		Для НомерГрафы = 1 По Форма.мСтруктураКолвоКолонокРазделов[ИмяГруппы] Цикл
			
			Для Ном = 1 По ?(НомерГрафы = 9, 4, ?(НомерГрафы = 11, 2, 1)) Цикл
				
				Если НомерГрафы = 9
					ИЛИ НомерГрафы = 11 Тогда
					
					ИмяКолонки = Лев(ИмяГруппы, 9) + "1" + Ном + Формат(НомерГрафы, "ЧЦ=2; ЧВН=");
					
				Иначе
					
					ИмяКолонки = ИмяГруппы + Формат(НомерГрафы, "ЧЦ=2; ЧВН=");
					
				КонецЕсли;
				
				// не нужно обновлять колонку адреса, т.к. в этом случае из Табл. поля запишется в таблицу
				// данные по представлению адреса, а не для выгрузки.
				
				Если (ИмяКолонки = "П000000000008") Или (ИмяКолонки = "П000010003008")
					Или (ИмяКолонки = "П000010000008") Или (ИмяКолонки = "П000010001008") Тогда
					Продолжить;
				КонецЕсли;
				
				Если СтруктураГруппы[0].Свойство(ИмяКолонки) Тогда	
					
					ИмяЯчейки     = ИмяКолонки + "_" + Формат(НСтр, "ЧГ=0");
					ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяЯчейки];
					
					Если ОбластьЯчейки.СодержитЗначение = Истина Тогда
						ЗначениеЯчейки = ОбластьЯчейки.Значение;
					Иначе
						ЗначениеЯчейки = ОбластьЯчейки.Текст;
					КонецЕсли;
					
					ТекСтрокаТаблицы[ИмяКолонки] = ЗначениеЯчейки;
					
				КонецЕсли;	
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ИмяЛиста = Неопределено) Экспорт
						
	Возврат РегламентированнаяОтчетностьВызовСервера.РазделТекущейОбластиНаСервере(ЭтаФорма, Элементы.ТабличныйДокумент.ТекущаяОбласть);
	
КонецФункции

&НаСервере
Функция СобратьДанныеТекущегоТаблПоляНаСервере(ИмяТабличногоПоля) Экспорт
	
	Возврат СобратьДанныеТекущегоТаблПоля(ЭтаФорма, ИмяТабличногоПоля);

КонецФункции

&НаКлиенте
Функция СобратьДанныеТекущегоТаблПоляНаКлиенте(ИмяТабличногоПоля) Экспорт
	
	Возврат СобратьДанныеТекущегоТаблПоля(ЭтаФорма, ИмяТабличногоПоля);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СобратьДанныеТекущегоТаблПоля(Форма, ИмяТабличногоПоля)
	
	ТабличноеПоле = Форма[ИмяТабличногоПоля];
	
	СтруктураДанныхПоля = Новый Структура;

	Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Декларация" Тогда
		
		СтруктураГруппы1 = Неопределено;
		Форма.мСтруктураМногострочныхРазделов.Свойство(Форма.СтруктураРеквизитовФормы.мИдГруппы1, СтруктураГруппы1);
		СтруктураГруппы1 = Форма[СтруктураГруппы1];

		СтруктураГруппы2 = Неопределено;
		Форма.мСтруктураМногострочныхРазделов.Свойство(Форма.СтруктураРеквизитовФормы.мИдГруппы2, СтруктураГруппы2);
		СтруктураГруппы2 = Форма[СтруктураГруппы2];

	ИначеЕсли Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Возвраты" Тогда
		
		СтруктураГруппы3 = Неопределено;
		Форма.мСтруктураМногострочныхРазделов.Свойство(Форма.СтруктураРеквизитовФормы.мИдГруппы3, СтруктураГруппы3);
		СтруктураГруппы3 = Форма[СтруктураГруппы3];

		СтруктураГруппы4 = Неопределено;
		Форма.мСтруктураМногострочныхРазделов.Свойство(Форма.СтруктураРеквизитовФормы.мИдГруппы4, СтруктураГруппы4);
		СтруктураГруппы4 = Форма[СтруктураГруппы4];

	КонецЕсли;
	
	Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда

		НомерАктивнойСтраницы = Форма[Форма.мСтруктураМногостраничныхРазделов.Титульный].НайтиСтроки(Новый Структура("АктивнаяСтраница", Истина));
		
		Если НомерАктивнойСтраницы.Количество() > 0 Тогда
			НомерАктивнойСтраницы = НомерАктивнойСтраницы[0];
		Иначе
			НомерАктивнойСтраницы = 0;
		КонецЕсли;
		
	КонецЕсли;

	Для Инд = 0 По ТабличноеПоле.Области.Количество() - 1 Цикл
		ТекущаяОбласть = ТабличноеПоле.Области[Инд];

		Если Не ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			Продолжить;
		КонецЕсли;

		Если ТекущаяОбласть.СодержитЗначение <> Истина Тогда
			Продолжить;
		КонецЕсли;

		ИмяПоказателя      = ТекущаяОбласть.Имя;
		ЗначениеПоказателя = ТекущаяОбласть.Значение;

		Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Декларация"
		   И (СтрНайти(ИмяПоказателя, "П000000000008") > 0 Или СтрНайти(ИмяПоказателя, "П000010003008") > 0) Тогда
		   
			НомерСтроки = Сред(ИмяПоказателя, 15);
			
			Если СтрНайти(ИмяПоказателя, "П000010003008") > 0 Тогда
				
				Показатель = "П000010003008";
				ЗначениеПоказателя = СтруктураГруппы2[Число(НомерСтроки) - 1][Показатель];
				
			Иначе
				
				Показатель = "П000000000008";
				ЗначениеПоказателя = СтруктураГруппы1[Число(НомерСтроки) - 1][Показатель];
				
			КонецЕсли;

		ИначеЕсли (Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Возвраты")
		        И (СтрНайти(ИмяПоказателя, "П000010000008") > 0 Или СтрНайти(ИмяПоказателя, "П000010001008") > 0) Тогда
				
			НомерСтроки = Сред(ИмяПоказателя, 15);
			
			Если СтрНайти(ИмяПоказателя, "П000010000008") > 0 Тогда
				
				Показатель = "П000010000008";
				ЗначениеПоказателя = СтруктураГруппы3[Число(НомерСтроки) - 1][Показатель];
				
			Иначе
				
				Показатель = "П000010001008";
				ЗначениеПоказателя = СтруктураГруппы4[Число(НомерСтроки) - 1][Показатель];
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
			Если Форма[Форма.мСтруктураМногостраничныхРазделов.Титульный].Индекс(НомерАктивнойСтраницы) > 0 Тогда
				Если НЕ ((ИмяПоказателя = "СерЛиц") Или (ИмяПоказателя = "НомерЛиц")
				 Или (ИмяПоказателя = "ДатаНачЛиц") Или (ИмяПоказателя = "ДатаОконЛиц")
				 Или (СтрНайти(ИмяПоказателя, "ИНН1") > 0)
				 Или (СтрНайти(ИмяПоказателя, "КПП1") > 0)) Тогда
					ЗначениеПоказателя = "";
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		СтруктураДанныхПоля.Вставить(ИмяПоказателя, ЗначениеПоказателя);
		
	КонецЦикла;

	Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
		Если Форма[Форма.мСтруктураМногостраничныхРазделов.Титульный].Индекс(НомерАктивнойСтраницы) = 0 Тогда
			СтруктураДанныхПоля.Вставить("АдрЮР", Форма.СтруктураРеквизитовФормы.мАдрЮРТитульныйВыгрузка);
			СтруктураДанныхПоля.Вставить("ВидДеят",  Форма.СтруктураРеквизитовФормы.мВидДеят);
		КонецЕсли;
	КонецЕсли;

	Возврат СтруктураДанныхПоля;
	
КонецФункции

&НаСервере
Процедура ОчиститьТабличноеПолеНаСервере(ВыбТабличноеПолеИмя) Экспорт

	ОчиститьТабличноеПоле(ЭтаФорма, ВыбТабличноеПолеИмя);

КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТабличноеПолеНаКлиенте(ВыбТабличноеПолеИмя) Экспорт

	ОчиститьТабличноеПоле(ЭтаФорма, ВыбТабличноеПолеИмя);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОчиститьТабличноеПоле(Форма, ВыбТабличноеПолеИмя)

	// Предварительно проверим наличие дополнительных строк,
	// в заданном поле табличного документа.
	// При наличии таких строк удаляем их.
	
	ВыбТабличноеПоле = Форма["ТабличныйДокумент"];
	
	Если ВыбТабличноеПолеИмя = "Декларация" Тогда
		ОчиститьТребуемуюГруппу(Форма, Форма.СтруктураРеквизитовФормы.мИдГруппы1, ВыбТабличноеПоле);
		ОчиститьТребуемуюГруппу(Форма, Форма.СтруктураРеквизитовФормы.мИдГруппы2, ВыбТабличноеПоле);
	ИначеЕсли ВыбТабличноеПолеИмя = "Возвраты" Тогда
		ОчиститьТребуемуюГруппу(Форма, Форма.СтруктураРеквизитовФормы.мИдГруппы3, ВыбТабличноеПоле);
		ОчиститьТребуемуюГруппу(Форма, Форма.СтруктураРеквизитовФормы.мИдГруппы4, ВыбТабличноеПоле);
	Иначе
		// Непосредственно очищаем ячейки табличного документа.
		Для Инд = 0 По ВыбТабличноеПоле.Области.Количество() - 1 Цикл
			ТекущаяОбласть = ВыбТабличноеПоле.Области[Инд];
			
			Если Не ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
				Продолжить;
			КонецЕсли;
			
			Если ТекущаяОбласть.СодержитЗначение <> Истина Тогда
				Продолжить;
			КонецЕсли;
			
			Если (ВыбТабличноеПолеИмя <> "ФизЛица") Тогда
				//  Для ФизЛица защищенные ячейки нужно очищать, кроме ИНН КПП
				Если ТекущаяОбласть.Защита Тогда
					Продолжить;
				КонецЕсли;
			Иначе
				Если (СтрНайти(ТекущаяОбласть.Имя, "ИНН1_") > 0 ) Или (СтрНайти(ТекущаяОбласть.Имя, "КПП1_") > 0 ) Тогда
					Если ТекущаяОбласть.Защита Тогда
						Продолжить;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			ТекущаяОбласть.Очистить();
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьНеобходимоеКоличествоДопСтрокНаСервере(ВыбТабличноеПоле, ВыбТабличноеПолеИмя, ИмяГруппыДопСтрок) Экспорт
	
	// Получим таблицу значений, содержащую данные дополнительных строк.
	ПромТаблицаДопСтрокРаздела = Неопределено;
	мСтруктураМногострочныхРазделов.Свойство(ИмяГруппыДопСтрок, ПромТаблицаДопСтрокРаздела);
	
	ПромТаблицаДопСтрокРаздела = ЭтаФорма[ПромТаблицаДопСтрокРаздела];
	
	ИсходноеКоличествоСтрокГруппы = 0;
	мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппыДопСтрок, ИсходноеКоличествоСтрокГруппы);
	
	ТекущееКоличествоСтрок = ПромТаблицаДопСтрокРаздела.Количество();
	
	Если ТекущееКоличествоСтрок > ИсходноеКоличествоСтрокГруппы Тогда
		// Имеются дополнительные строки.
		// Удаляем их.
		
		НСтр = ПромТаблицаДопСтрокРаздела.Количество();
		
		Пока НСтр > ИсходноеКоличествоСтрокГруппы Цикл
			
			ТекСтрокаТаблицы = ПромТаблицаДопСтрокРаздела[НСтр - 1];
			
			ИмяПервойКолонки = ИмяГруппыДопСтрок + "01_";
			ИмяПервойЯчейкиУдаляемойСтроки  = ИмяПервойКолонки + Формат(НСтр, "ЧГ=0");
			
			// область первой ячейки удаляемой строки многострочного раздела
			ОбластьЯчейки = ВыбТабличноеПоле.Области[ИмяПервойЯчейкиУдаляемойСтроки];
			
			НомерВерхЯчейкиОбласти = ОбластьЯчейки.Верх;
			НомерНижнЯчейкиОбласти = ОбластьЯчейки.Низ;
			
			РегламентированнаяОтчетностьВызовСервера.СпециальногоУдаленияСтроки(ВыбТабличноеПоле, ВыбТабличноеПолеИмя, ИмяГруппыДопСтрок, НомерВерхЯчейкиОбласти, НомерНижнЯчейкиОбласти);
			
			// удаляем из структуры многострочного раздела соответствующую строку
			ПромТаблицаДопСтрокРаздела.Удалить(ТекСтрокаТаблицы);
			
			НСтр = НСтр - 1;
						
		КонецЦикла;	
		
		Если ВыбТабличноеПоле.Области.Найти("МногострочнаяЧасть") = Неопределено Тогда
			
			ВыбТабличноеПоле.Область(НомерВерхЯчейкиОбласти - 1, , НомерНижнЯчейкиОбласти - 1).Имя = "МногострочнаяЧасть";
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасчетНаКлиенте(ИмяТекущейСтраницыПанели = "", ОбластьИмя = "") Экспорт

	Расчет(ЭтаФорма, ИмяТекущейСтраницыПанели, ОбластьИмя);

КонецПроцедуры

&НаСервере
Процедура РасчетНаСервере(ИмяТекущейСтраницыПанели = "", ОбластьИмя = "") Экспорт

	Расчет(ЭтаФорма, ИмяТекущейСтраницыПанели, ОбластьИмя);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура Расчет(Форма, ИмяТекущейСтраницыПанели = "", Знач ОбластьИмя = "") Экспорт

	Если Форма.СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Или Форма.СтруктураРеквизитовФормы.мРежимПечати Тогда
		Возврат;
	КонецЕсли;
	
	Если ИмяТекущейСтраницыПанели = "Декларация" Тогда
		
		ОбновитьСтруктуруМногострочногоРаздела(Форма, Форма.СтруктураРеквизитовФормы.мИдГруппы1);
		
		СтруктураГруппы1 = Неопределено;
		Форма.мСтруктураМногострочныхРазделов.Свойство(Форма.СтруктураРеквизитовФормы.мИдГруппы1, СтруктураГруппы1);
		СтруктураГруппы1 = Форма[СтруктураГруппы1];
		Колонка16 = СтруктураГруппы1.Итог("П000000000016");
		Форма.ТабличныйДокумент.Области.П000010002016.Значение = Колонка16;
		
	ИначеЕсли ИмяТекущейСтраницыПанели = "Возвраты" Тогда	
		
		ОбновитьСтруктуруМногострочногоРаздела(Форма, Форма.СтруктураРеквизитовФормы.мИдГруппы3);
		
		СтруктураГруппы3 = Неопределено;
		Форма.мСтруктураМногострочныхРазделов.Свойство(Форма.СтруктураРеквизитовФормы.мИдГруппы3, СтруктураГруппы3);
		СтруктураГруппы3 = Форма[СтруктураГруппы3];
		Колонка16 = СтруктураГруппы3.Итог("П000010000016");
		Форма.ТабличныйДокумент.Области.П000010005016.Значение = Колонка16;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция СформироватьПустойЛистФизЛиц()
	
	СтруктураДанныхПоля = Новый Структура;

	СтруктураДанныхПоля.Вставить("ФизЛицоФИО", "");
	СтруктураДанныхПоля.Вставить("ФизЛицСлТел", "");
	СтруктураДанныхПоля.Вставить("ФизЛицДомТел", "");
	СтруктураДанныхПоля.Вставить("ФизЛицДокВид", "");
	СтруктураДанныхПоля.Вставить("ФизЛицДок", "");
	СтруктураДанныхПоля.Вставить("ФизЛицДокСерияНомер", "");
	СтруктураДанныхПоля.Вставить("ФизЛицДокВыдан", "");
	СтруктураДанныхПоля.Вставить("ФизЛицДокДата", "");
	СтруктураДанныхПоля.Вставить("ФизЛицИнд", "");
	СтруктураДанныхПоля.Вставить("ФизЛицСубъект", "");
	СтруктураДанныхПоля.Вставить("ФизЛицС", "");
	СтруктураДанныхПоля.Вставить("ФизЛицРайон", "");
	СтруктураДанныхПоля.Вставить("ФизЛицГород", "");
	СтруктураДанныхПоля.Вставить("ФизЛицНП", "");
	СтруктураДанныхПоля.Вставить("ФизЛицУлица", "");
	СтруктураДанныхПоля.Вставить("ФизЛицДом", "");
	СтруктураДанныхПоля.Вставить("ФизЛицКорпус", "");
	СтруктураДанныхПоля.Вставить("ФизЛицКвартира", "");
	СтруктураДанныхПоля.Вставить("ФизЛицИноАдрес", "");
	СтруктураДанныхПоля.Вставить("АдресДляИностранныхГраждан", "");
	
	Возврат СтруктураДанныхПоля;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьСведенияОбФЛ(СмениласьДатаПодписания = Ложь)

	Перем ТаблицаСтраницРаздела;

	Если (СтруктураРеквизитовФормы.Организация  = Неопределено) Или (СтруктураРеквизитовФормы.Организация = РегламентированнаяОтчетностьКлиентСервер.ПустоеЗначениеТипа("СправочникСсылка.Организации")) Тогда
		Возврат
	КонецЕсли;
    
	СписокПоказателей = Новый СписокЗначений;

	// Составляем список данных, необходимых для вывода в декларацию
	Если ПустаяСтрока(СтруктураРеквизитовФормы.мИННДиректор) Тогда

		СписокПоказателей.Добавить("", "ФИОРук"); // ФИО руководителя
		СписокПоказателей.Добавить("", "ТелРук"); // телефон руководителя из контактной информации

		СписокПоказателей.Добавить("", "ВидУдЛичнРук"); // вид уд личности руководителя
		СписокПоказателей.Добавить("", "КодУдЛичнРук"); // код уд личности руководителя
		СписокПоказателей.Добавить("", "СерияУдЛичнРук"); // код уд личности руководителя
		СписокПоказателей.Добавить("", "НомерУдЛичнРук"); // код уд личности руководителя
		СписокПоказателей.Добавить("", "ОрганВыданУдЛичнРук"); // Кем выдан
		СписокПоказателей.Добавить("", "ДатаУдЛичнРук");
		
		СписокПоказателей.Добавить("", "ИндексМЖРук");
		СписокПоказателей.Добавить("", "СубъектМЖРук");
		СписокПоказателей.Добавить("", "КодСубъектМЖРук");
		СписокПоказателей.Добавить("", "РайонМЖРук");
		СписокПоказателей.Добавить("", "ГородМЖРук");
		СписокПоказателей.Добавить("", "НПунктМЖРук");
		СписокПоказателей.Добавить("", "УлицаМЖРук");
		СписокПоказателей.Добавить("", "ДомМЖРук");
		СписокПоказателей.Добавить("", "КорпусМЖРук");
		СписокПоказателей.Добавить("", "КвартираМЖРук");

	КонецЕсли;

	Если ПустаяСтрока(СтруктураРеквизитовФормы.мИННБухгалтер) Тогда
		// Получим данные о бухгалтере
		СписокПоказателей.Добавить("", "ФИОБух");
		СписокПоказателей.Добавить("", "ТелБух");

		СписокПоказателей.Добавить("", "ВидУдЛичнБух");
		СписокПоказателей.Добавить("", "КодУдЛичнБух");
		СписокПоказателей.Добавить("", "СерияУдЛичнБух");
		СписокПоказателей.Добавить("", "НомерУдЛичнБух");
		СписокПоказателей.Добавить("", "ОрганВыданУдЛичнБух");
		СписокПоказателей.Добавить("", "ДатаУдЛичнБух");

		СписокПоказателей.Добавить("", "ИндексМЖБух");
		СписокПоказателей.Добавить("", "СубъектМЖБух");
		СписокПоказателей.Добавить("", "КодСубъектМЖБух");
		СписокПоказателей.Добавить("", "РайонМЖБух");
		СписокПоказателей.Добавить("", "ГородМЖБух");
		СписокПоказателей.Добавить("", "НПунктМЖБух");
		СписокПоказателей.Добавить("", "УлицаМЖБух");
		СписокПоказателей.Добавить("", "ДомМЖБух");
		СписокПоказателей.Добавить("", "КорпусМЖБух");
		СписокПоказателей.Добавить("", "КвартираМЖБух");

	КонецЕсли;

	Если ПустаяСтрока(СтруктураРеквизитовФормы.мИННУпПред) Тогда
		// Получим данные о УП
		СписокПоказателей.Добавить("", "ФИОУпПред");
		СписокПоказателей.Добавить("", "ТелУпПред");

		СписокПоказателей.Добавить("", "ВидУдЛичнУпПред");
		СписокПоказателей.Добавить("", "КодУдЛичнУпПред");
		СписокПоказателей.Добавить("", "СерияУдЛичнУпПред");
		СписокПоказателей.Добавить("", "НомерУдЛичнУпПред");
		СписокПоказателей.Добавить("", "ОрганВыданУдЛичнУпПред");
		СписокПоказателей.Добавить("", "ДатаУдЛичнУпПред");

		СписокПоказателей.Добавить("", "ИндексМЖУпПред");
		СписокПоказателей.Добавить("", "СубъектМЖУпПред");
		СписокПоказателей.Добавить("", "КодСубъектМЖУпПред");
		СписокПоказателей.Добавить("", "РайонМЖУпПред");
		СписокПоказателей.Добавить("", "ГородМЖУпПред");
		СписокПоказателей.Добавить("", "НПунктМЖУпПред");
		СписокПоказателей.Добавить("", "УлицаМЖУпПред");
		СписокПоказателей.Добавить("", "ДомМЖУпПред");
		СписокПоказателей.Добавить("", "КорпусМЖУпПред");
		СписокПоказателей.Добавить("", "КвартираМЖУпПред");

	КонецЕсли;

	ОргСведения = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(СтруктураРеквизитовФормы.Организация, ДатаПодписи, СписокПоказателей);

	ТаблицаСтраницРаздела = Неопределено;
	Если Не мСтруктураМногостраничныхРазделов.Свойство("ФизЛица", ТаблицаСтраницРаздела) Тогда
		Возврат;
	КонецЕсли;

	ТаблицаСтраницРаздела = ЭтаФорма[ТаблицаСтраницРаздела];
	
	ОписаниеТиповСтрока254 = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(254));
	МассивБулево = Новый Массив;
	МассивБулево.Добавить(Тип("Булево"));
	ОписаниеТиповБулево    = Новый ОписаниеТипов(МассивБулево);

	Если (СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация Или СмениласьДатаПодписания) Тогда

		ТаблицаСтраницРаздела.Очистить();
		СтрПервая = ТаблицаСтраницРаздела.Добавить();
		СтрПервая.Представление = "Новая страница";
		СтрПервая.АктивнаяСтраница = Истина;
		СтрПервая.Данные.Добавить(ВозвратитьПустойОбразЛистаФЛ());
		СтрПервая.АвтоматическоеПредставление = Истина;

	ИначеЕсли (НЕ (СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация Или СмениласьДатаПодписания)) Тогда

		// Если документ новый, то в первый лист ФЛ запишем пустой образ листа ФЛ
		Если Не СтруктураРеквизитовФормы.мДокументВосстановлен Тогда
			
			СтруктураДанных11 = Новый Структура;
			СтруктураДанных11 = ВозвратитьПустойОбразЛистаФЛ(); 
			ТаблицаСтраницРаздела[0].Данные.Добавить(ВозвратитьПустойОбразЛистаФЛ());
		КонецЕсли;

	КонецЕсли;

	Если ПустаяСтрока(СтруктураРеквизитовФормы.мИННДиректор) Тогда

		ФИОДиректора = ТабличныйДокумент.Области.ОргДиректор.Значение;

		Если НЕ ПустаяСтрока(ФИОДиректора) Тогда
			СвязьУстановлена = Ложь;
			ТекИндекс = -1;
			Для Каждого Строка Из ТаблицаСтраницРаздела Цикл
				Если Строка.Данные[0].Значение.ФизЛицоФИО = ФИОДиректора Тогда
					ТекИндекс = ТаблицаСтраницРаздела.Индекс(Строка);
					СвязьУстановлена = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;

			ВыводДанныхОФизическомЛице(СвязьУстановлена, ОргСведения, 1,, ТаблицаСтраницРаздела, ТекИндекс);

		КонецЕсли; // Если ФИО пусто

	КонецЕсли;

	Если ПустаяСтрока(СтруктураРеквизитовФормы.мИННБухгалтер) Тогда

		ФИОБухгалтера = ТабличныйДокумент.Области.ОргБухгалтер.Значение;

		Если НЕ ПустаяСтрока(ФИОБухгалтера) Тогда
			СвязьУстановлена = Ложь;
			ТекИндекс = -1;
			Для Каждого Строка Из ТаблицаСтраницРаздела Цикл
				Если Строка.Данные[0].Значение.ФизЛицоФИО = ФИОБухгалтера Тогда
					ТекИндекс = ТаблицаСтраницРаздела.Индекс(Строка);
					СвязьУстановлена = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;

			ВыводДанныхОФизическомЛице(СвязьУстановлена, ОргСведения, 2, , ТаблицаСтраницРаздела, ТекИндекс);

		КонецЕсли; // Если ФИО пусто

	КонецЕсли;

	Если ПустаяСтрока(СтруктураРеквизитовФормы.мИННУпПред) Тогда
		Попытка
			ФИООргУП = ТабличныйДокумент.Области.ОргУП.Значение;

		Если НЕ ПустаяСтрока(ФИООргУП) Тогда
			СвязьУстановлена = Ложь;
			ТекИндекс = -1;
			Для Каждого Строка Из ТаблицаСтраницРаздела Цикл
				Если Строка.Данные[0].Значение.ФизЛицоФИО = ФИООргУП Тогда
					ТекИндекс = ТаблицаСтраницРаздела.Индекс(Строка);
					СвязьУстановлена = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;

			ВыводДанныхОФизическомЛице(СвязьУстановлена, ОргСведения, 3,, ТаблицаСтраницРаздела, ТекИндекс);
		КонецЕсли;

		Исключение
		КонецПопытки;

	КонецЕсли;

	АктивнаяСтр = ТаблицаСтраницРаздела.НайтиСтроки(Новый Структура("АктивнаяСтраница", Истина));

	Если АктивнаяСтр.Количество() > 0 Тогда
		
		АктивнаяСтр = АктивнаяСтр[0];

		Шаг = ТаблицаСтраницРаздела.Индекс(АктивнаяСтр);

	Иначе
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ВозвратитьПустойОбразЛистаФЛ()

	СтруктураДанных = Новый Структура;

	Для Каждого Стр из мПустойОбразЛистаФЛ Цикл
		СтруктураДанных.Вставить(Стр.Ключ, Стр.Значение);
	КонецЦикла;

	Возврат СтруктураДанных;

КонецФункции

&НаСервере
Процедура ВыводДанныхОФизическомЛице(Знач СвязьУстановлена, Знач Данные, ТипДанных, ОграниченияВыводаУчесть = Ложь, ТаблицаСтраницРазделаМ, ИндексВТабл);

	ФИО = "";
	Тел = "";
	ВидУдЛичн = "";
	КодУдЛичн = "";
	СерияУдЛичн = "";
	НомерУдЛичн = "";
	ОрганВыданУдЛичн = "";
	ДатаУдЛичн = РегламентированнаяОтчетностьКлиентСервер.ПустоеЗначениеТипа(Тип("Дата"));
	ИндексМЖ = "";
	СубъектМЖ = "";
	КодСубъектМЖ = "";
	РайонМЖ = "";
	ГородМЖ = "";
	НПунктМЖ = "";
	УлицаМЖ = "";
	ДомМЖ = "";
	КорпусМЖ = "";
	КвартираМЖ = "";
	МестоРожд = "";

	Пол = 0;

	ДатаРожд = РегламентированнаяОтчетностьКлиентСервер.ПустоеЗначениеТипа(Тип("Дата"));
	
	Если ТипДанных = 3 Тогда
		КППТитульныйЛист = РегламентированнаяОтчетностьКлиентСервер.ВернутьЗначениеПараметраСЛиста(ЭтаФорма, "Титульный", "КПП1");
		КодНО = РегламентированнаяОтчетностьКлиентСервер.ВернутьЗначениеПараметраСЛиста(ЭтаФорма, "Титульный", "КодИМНС");
		ДанныеПредставителя = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОПредставителе(СтруктураРеквизитовФормы.Организация, ДатаПодписи, Ложь, КодНО, КППТитульныйЛист);
		ЗаполнитьЗначенияСвойств(Данные, ДанныеПредставителя);
	КонецЕсли;
	
	Данные.Свойство(?(ТипДанных = 1,"ФИОРук", ?(ТипДанных = 2, "ФИОБух", ?(ТипДанных = 3, "ФИОУпПред",""))), ФИО);
	Данные.Свойство(?(ТипДанных = 1,"ТелРук", ?(ТипДанных = 2, "ТелБух", ?(ТипДанных = 3, "ТелУпПред",""))), Тел);
	Данные.Свойство(?(ТипДанных = 1,"ВидУдЛичнРук", ?(ТипДанных = 2, "ВидУдЛичнБух", ?(ТипДанных = 3, "ВидУдЛичнУпПред",""))), ВидУдЛичн);
	Данные.Свойство(?(ТипДанных = 1,"КодУдЛичнРук", ?(ТипДанных = 2, "КодУдЛичнБух", ?(ТипДанных = 3, "КодУдЛичнУпПред",""))), КодУдЛичн);
	Данные.Свойство(?(ТипДанных = 1,"ДатаРождРук", ?(ТипДанных = 2, "ДатаРождБух", ?(ТипДанных = 3, "ДатаРождУпПред",""))), ДатаРожд);
	Данные.Свойство(?(ТипДанных = 1,"МестоРождРук", ?(ТипДанных = 2, "МестоРождБух", ?(ТипДанных = 3, "МестоРождУпПред",""))), МестоРожд);
	Данные.Свойство(?(ТипДанных = 1,"СерияУдЛичнРук", ?(ТипДанных = 2, "СерияУдЛичнБух", ?(ТипДанных = 3, "СерияУдЛичнУпПред",""))), СерияУдЛичн);
	Данные.Свойство(?(ТипДанных = 1,"НомерУдЛичнРук", ?(ТипДанных = 2, "НомерУдЛичнБух", ?(ТипДанных = 3, "НомерУдЛичнУпПред",""))), НомерУдЛичн);
	Данные.Свойство(?(ТипДанных = 1,"ПолРук", ?(ТипДанных = 2, "ПолБух", ?(ТипДанных = 3, "ПолУпПред",""))), Пол);
	Данные.Свойство(?(ТипДанных = 1,"ОрганВыданУдЛичнРук", ?(ТипДанных = 2, "ОрганВыданУдЛичнБух", ?(ТипДанных = 3, "ОрганВыданУдЛичнУпПред",""))), ОрганВыданУдЛичн);
	Данные.Свойство(?(ТипДанных = 1,"ДатаУдЛичнРук", ?(ТипДанных = 2, "ДатаУдЛичнБух", ?(ТипДанных = 3, "ДатаУдЛичнУпПред",""))), ДатаУдЛичн);
	Данные.Свойство(?(ТипДанных = 1,"ИндексМЖРук", ?(ТипДанных = 2, "ИндексМЖБух", ?(ТипДанных = 3, "ИндексМЖУпПред",""))), ИндексМЖ);
	Данные.Свойство(?(ТипДанных = 1,"СубъектМЖРук", ?(ТипДанных = 2, "СубъектМЖБух", ?(ТипДанных = 3, "СубъектМЖУпПред",""))), СубъектМЖ);
	Данные.Свойство(?(ТипДанных = 1,"КодСубъектМЖРук", ?(ТипДанных = 2, "КодСубъектМЖБух", ?(ТипДанных = 3, "КодСубъектМЖУпПред",""))), КодСубъектМЖ);
	Данные.Свойство(?(ТипДанных = 1,"РайонМЖРук", ?(ТипДанных = 2, "РайонМЖБух", ?(ТипДанных = 3, "РайонМЖУпПред",""))), РайонМЖ);
	Данные.Свойство(?(ТипДанных = 1,"ГородМЖРук", ?(ТипДанных = 2, "ГородМЖБух", ?(ТипДанных = 3, "ГородМЖУпПред",""))), ГородМЖ);
	Данные.Свойство(?(ТипДанных = 1,"НПунктМЖРук", ?(ТипДанных = 2, "НПунктМЖБух", ?(ТипДанных = 3, "НПунктМЖУпПред",""))), НПунктМЖ);
	Данные.Свойство(?(ТипДанных = 1,"УлицаМЖРук", ?(ТипДанных = 2, "УлицаМЖБух", ?(ТипДанных = 3, "УлицаМЖУпПред",""))), УлицаМЖ);
	Данные.Свойство(?(ТипДанных = 1,"ДомМЖРук", ?(ТипДанных = 2, "ДомМЖБух", ?(ТипДанных = 3, "ДомМЖУпПред",""))), ДомМЖ);
	Данные.Свойство(?(ТипДанных = 1,"КорпусМЖРук", ?(ТипДанных = 2, "КорпусМЖБух", ?(ТипДанных = 3, "КорпусМЖУпПред",""))), КорпусМЖ);
	Данные.Свойство(?(ТипДанных = 1,"КвартираМЖРук", ?(ТипДанных = 2, "КвартираМЖБух", ?(ТипДанных = 3, "КвартираМЖУпПред",""))), КвартираМЖ);

	Если НЕ СвязьУстановлена Тогда

		// нужно создать новый экземпляр докумнта, предварительно сняв активность у активного листа
		// в случае, если ФИО в структуре числое, то считаем что лист готов для заполнения и пишем информацию в него
		СтрТаблицаСтраницы = ТаблицаСтраницРазделаМ.НайтиСтроки(Новый Структура("АктивнаяСтраница" ,Истина));
		Если СтрТаблицаСтраницы.Количество() = 0 Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='Ошибка установки активной страницы раздела ФЛ'");
			Сообщение.Сообщить();
			СтрТаблицаСтраницы = ТаблицаСтраницРазделаМ.НайтиСтроки(Новый Структура("АктивнаяСтраница", Ложь))[0];
		Иначе
			СтрТаблицаСтраницы = СтрТаблицаСтраницы[0];
		КонецЕсли;

		Если ПустаяСтрока(СтрТаблицаСтраницы.Данные[0].Значение.ФизЛицоФИО) Тогда

			СтрокаДляВставкиДанных = СтрТаблицаСтраницы;

			// Пишем в этот лист

		Иначе

			// Убираем активность у текущей страницы
			
			СтрТаблицаСтраницы.АктивнаяСтраница = Ложь;

			СтрНоваяСтраница = ТаблицаСтраницРазделаМ.Добавить();

			// Присваиваем представление по умолчанию
			СтрНоваяСтраница.Представление      = "Новая страница";

			СтрНоваяСтраница.АвтоматическоеПредставление = Истина;

			СтрНоваяСтраница.АктивнаяСтраница = Истина;

			СтрНоваяСтраница.Данные.Добавить(ВозвратитьПустойОбразЛистаФЛ());
            
			СтрокаДляВставкиДанных = СтрНоваяСтраница;

		КонецЕсли;

	ИначеЕсли СвязьУстановлена Тогда

		// Пишем в раздел с индексом ИндексВТабл
		СтрокаДляВставкиДанных = ТаблицаСтраницРазделаМ[ИндексВТабл];
	КонецЕсли;

	// Определим простой порядковый номер
	ИндексСтроки = ТаблицаСтраницРазделаМ.Индекс(СтрокаДляВставкиДанных);

	// Теперь можно выводить данные на страницу
	Если (НЕ СвязьУстановлена) Тогда

		СтрокаДляВставкиДанных.Данные[0].Значение.ФизЛицоФИО = ФИО;
		Представление = СтрокаДляВставкиДанных.Данные[0].Значение.ФизЛицоФИО;
		СтрокаДляВставкиДанных.Данные[0].Представление = Представление + ". Лист N " + Строка(ИндексСтроки + 1);

	КонецЕсли;

	Если (НЕ СвязьУстановлена) Или (ПустаяСтрока(СтрокаДляВставкиДанных.Данные[0].Значение.ФизЛицСлТел)) Тогда
		
		СтрокаДляВставкиДанных.Данные[0].Значение.ФизЛицСлТел = СтруктураРеквизитовФормы.мТелОрганизации;
			
 	КонецЕсли;

	Если (НЕ СвязьУстановлена) Тогда

		СтрокаДляВставкиДанных.Данные[0].Значение.ФизЛицДомТел = Тел;

	Иначе

		Если ПустаяСтрока(СтрокаДляВставкиДанных.Данные[0].Значение.ФизЛицДомТел) Тогда

			СтрокаДляВставкиДанных.Данные[0].Значение.ФизЛицДомТел = Тел;

		КонецЕсли;

	КонецЕсли;
	          
	Если (НЕ СвязьУстановлена) или (ПустаяСтрока(СтрокаДляВставкиДанных.Данные[0].Значение.ФизЛицДокВид)) Тогда

		СтрокаДляВставкиДанных.Данные[0].Значение.ФизЛицДокВид = ВидУдЛичн;

	КонецЕсли;
	
	Если (НЕ СвязьУстановлена) Или (ПустаяСтрока(СтрокаДляВставкиДанных.Данные[0].Значение.ФизЛицДок)) Тогда
		
		СтрокаДляВставкиДанных.Данные[0].Значение.ФизЛицДок = КодУдЛичн;  

	КонецЕсли;

	Если (НЕ СвязьУстановлена) Или (ПустаяСтрока(СтрокаДляВставкиДанных.Данные[0].Значение.ФизЛицДокСерияНомер)) Тогда

		СтрокаДляВставкиДанных.Данные[0].Значение.ФизЛицДокСерияНомер = СерияУдЛичн + "  " + НомерУдЛичн;

	КонецЕсли;

	Если (НЕ СвязьУстановлена) Или (ПустаяСтрока(СтрокаДляВставкиДанных.Данные[0].Значение.ФизЛицДокВыдан)) Тогда

		СтрокаДляВставкиДанных.Данные[0].Значение.ФизЛицДокВыдан = ОрганВыданУдЛичн;

	КонецЕсли;

	Если (НЕ СвязьУстановлена) Тогда

		СтрокаДляВставкиДанных.Данные[0].Значение.ФизЛицДокДата = ДатаУдЛичн;

	Иначе

		Если НЕ ЗначениеЗаполнено(СтрокаДляВставкиДанных.Данные[0].Значение.ФизЛицДокДата) Тогда

			СтрокаДляВставкиДанных.Данные[0].Значение.ФизЛицДокДата = ДатаУдЛичн;

		КонецЕсли;

	КонецЕсли;
    
	Если (НЕ СвязьУстановлена) Тогда
		
		СтрокаДляВставкиДанных.Данные[0].Значение.ФизЛицИнд = ИндексМЖ;

	Иначе

		Если ПустаяСтрока(СтрокаДляВставкиДанных.Данные[0].Значение.ФизЛицИнд) Тогда
			
			СтрокаДляВставкиДанных.Данные[0].Значение.ФизЛицИнд = ИндексМЖ;
                                                                                 
		КонецЕсли;
	КонецЕсли;

	Если (НЕ СвязьУстановлена) Тогда

		СтрокаДляВставкиДанных.Данные[0].Значение.ФизЛицСубъект = СубъектМЖ;

	Иначе

		Если ПустаяСтрока(СтрокаДляВставкиДанных.Данные[0].Значение.ФизЛицСубъект) Тогда
			СтрокаДляВставкиДанных.Данные[0].Значение.ФизЛицСубъект = СубъектМЖ;
		КонецЕсли;

	КонецЕсли;

	Если (НЕ СвязьУстановлена) Тогда

		СтрокаДляВставкиДанных.Данные[0].Значение.ФизЛицС = КодСубъектМЖ;

	Иначе

		Если ПустаяСтрока(СтрокаДляВставкиДанных.Данные[0].Значение.ФизЛицС) Тогда
			
			СтрокаДляВставкиДанных.Данные[0].Значение.ФизЛицС = КодСубъектМЖ;

		КонецЕсли;

	КонецЕсли;

	Если (НЕ СвязьУстановлена) Тогда

		СтрокаДляВставкиДанных.Данные[0].Значение.ФизЛицРайон = РайонМЖ;

	Иначе

		Если ПустаяСтрока(СтрокаДляВставкиДанных.Данные[0].Значение.ФизЛицРайон) Тогда
			СтрокаДляВставкиДанных.Данные[0].Значение.ФизЛицРайон = РайонМЖ;
		КонецЕсли;

	КонецЕсли;

	Если (НЕ СвязьУстановлена) Тогда
		СтрокаДляВставкиДанных.Данные[0].Значение.ФизЛицГород = ГородМЖ;
	Иначе
		Если ПустаяСтрока(СтрокаДляВставкиДанных.Данные[0].Значение.ФизЛицГород) Тогда
			СтрокаДляВставкиДанных.Данные[0].Значение.ФизЛицГород = ГородМЖ;
		КонецЕсли;
	КонецЕсли;

	Если (НЕ СвязьУстановлена) Тогда

		СтрокаДляВставкиДанных.Данные[0].Значение.ФизЛицНП = НПунктМЖ;

	Иначе

		Если ПустаяСтрока(СтрокаДляВставкиДанных.Данные[0].Значение.ФизЛицНП) Тогда
			СтрокаДляВставкиДанных.Данные[0].Значение.ФизЛицНП = НПунктМЖ;
		КонецЕсли;

	КонецЕсли;

	Если (НЕ СвязьУстановлена) Тогда

		СтрокаДляВставкиДанных.Данные[0].Значение.ФизЛицУлица = УлицаМЖ;

	Иначе

		Если ПустаяСтрока(СтрокаДляВставкиДанных.Данные[0].Значение.ФизЛицУлица) Тогда
			СтрокаДляВставкиДанных.Данные[0].Значение.ФизЛицУлица = УлицаМЖ;
		КонецЕсли;

	КонецЕсли;

	Если (НЕ СвязьУстановлена) Тогда

		СтрокаДляВставкиДанных.Данные[0].Значение.ФизЛицДом = ДомМЖ;

	Иначе

		Если ПустаяСтрока(СтрокаДляВставкиДанных.Данные[0].Значение.ФизЛицДом) Тогда
			СтрокаДляВставкиДанных.Данные[0].Значение.ФизЛицДом = ДомМЖ;
		КонецЕсли;

	КонецЕсли;

	Если (НЕ СвязьУстановлена) Тогда

		СтрокаДляВставкиДанных.Данные[0].Значение.ФизЛицКорпус = КорпусМЖ;

	Иначе

		Если ПустаяСтрока(СтрокаДляВставкиДанных.Данные[0].Значение.ФизЛицКорпус) Тогда

			СтрокаДляВставкиДанных.Данные[0].Значение.ФизЛицКорпус = КорпусМЖ;

		КонецЕсли;

	КонецЕсли;

	Если (НЕ СвязьУстановлена) Тогда

		СтрокаДляВставкиДанных.Данные[0].Значение.ФизЛицКвартира = КвартираМЖ;

	Иначе

		Если ПустаяСтрока(СтрокаДляВставкиДанных.Данные[0].Значение.ФизЛицКвартира) Тогда

			СтрокаДляВставкиДанных.Данные[0].Значение.ФизЛицКвартира = КвартираМЖ;

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура УстановитьЦветФонаЯчейкиНаКлиенте(ИмяЯчейки = Неопределено, ВариантЗаполнения = Неопределено, ИмяТекущейСтраницыПанели = "") Экспорт
	
	УстановитьЦветФонаЯчейки(ЭтаФорма, ИмяЯчейки, ВариантЗаполнения, ИмяТекущейСтраницыПанели);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЦветФонаЯчейкиНаСервере(ИмяЯчейки = Неопределено, ВариантЗаполнения = Неопределено, ИмяТекущейСтраницыПанели = "") Экспорт
	
	УстановитьЦветФонаЯчейки(ЭтаФорма, ИмяЯчейки, ВариантЗаполнения, ИмяТекущейСтраницыПанели);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЦветФонаЯчейки(Форма, ИмяЯчейки = Неопределено, ВариантЗаполнения = Неопределено, ИмяТекущейСтраницыПанели = "") Экспорт
	
	Перем ЦветФона;
	Перем Комментарий;

	Если Форма.СтруктураРеквизитовФормы.мБезОткрытияФормы Тогда
		Возврат;
	КонецЕсли;

	Если Не ИмяЯчейки = Неопределено Тогда
		// устанавливаем цвет фона конкретной ячейки
		#Если НаКлиенте Тогда
			ИмяСтраницыПанели = РегламентированнаяОтчетностьКлиент.ОпределитьСтраницуПанелиПоКодуПоказателяНаКлиенте(Форма, ИмяЯчейки);
		#Иначе
			ИмяСтраницыПанели = РегламентированнаяОтчетностьВызовСервера.ОпределитьСтраницуПанелиПоКодуПоказателяНаСервере(Форма, ИмяЯчейки);
		#КонецЕсли
		Если ИмяСтраницыПанели = Неопределено Тогда
			Возврат;
		КонецЕсли;

		ИмяПоляТаблДокумента = "ТабличныйДокумент";

		Ключ = "_" + ВариантЗаполнения;
		Форма.мСтруктураЦветовРаскраски.Свойство(Ключ, ЦветФона);

		ЗначениеВКвадратах = РегламентированнаяОтчетностьКлиентСервер.ОбластьЯвляетсяЯчейкойСоставногоПоля(Форма, ИмяЯчейки);

		Если ВариантЗаполнения = 4 Тогда

			Если ЗначениеВКвадратах Тогда
				// если ЗНАЧЕНИЕ КВАДРАТИЧНОЕ
				РегламентированнаяОтчетностьКлиентСервер.СвойстваГрупповыхЗначений(Форма, ИмяЯчейки, "УстановитьЗащиту");
			Иначе
				Форма[ИмяПоляТаблДокумента].Области[ИмяЯчейки].Защита = Истина;
			КонецЕсли;

		Иначе

			Если ЗначениеВКвадратах Тогда
				// если ЗНАЧЕНИЕ КВАДРАТИЧНОЕ
				РегламентированнаяОтчетностьКлиентСервер.СвойстваГрупповыхЗначений(Форма, ИмяЯчейки, "СнятьЗащиту");
			Иначе
				Форма[ИмяПоляТаблДокумента].Области[ИмяЯчейки].Защита = Ложь;
			КонецЕсли;
			
		КонецЕсли;

		// установим цвет ячейки
		Если ЗначениеВКвадратах Тогда
			РегламентированнаяОтчетностьКлиентСервер.СвойстваГрупповыхЗначений(Форма, ИмяЯчейки, "ПроставитьЦветРаскраски", ЦветФона);
		Иначе
			Форма[ИмяПоляТаблДокумента].Области[ИмяЯчейки].ЦветФона = ЦветФона;
		КонецЕсли;

	Иначе
		// устанавливаем цвет фона всех автозаполняемых ячеек активной страницы

		#Если НаКлиенте Тогда
			ТаблицаВариантыЗаполнения = РегламентированнаяОтчетностьКлиент.ПолучитьТаблицуВариантовЗаполненияНаКлиенте(Форма, ИмяТекущейСтраницыПанели);
		#Иначе
			ТаблицаВариантыЗаполнения = РегламентированнаяОтчетностьВызовСервера.ПолучитьТаблицуВариантовЗаполненияНаСервере(Форма, ИмяТекущейСтраницыПанели);
		#КонецЕсли
		
		Если ТаблицаВариантыЗаполнения = Неопределено Тогда
			Возврат;
		КонецЕсли;

		Для Каждого Строка Из ТаблицаВариантыЗаполнения Цикл
			ИмяПоказателя            =  Строка.КодПоказателя;
			ВариантЗаполнения        =  Строка.ВариантЗаполнения;
			Комментарий              =  Строка.Комментарий;
			КодПоказателяПоСтруктуре =  Строка.КодПоказателяПоСтруктуре;

			КолвоСтрокВМногострочнойЧасти = РегламентированнаяОтчетностьКлиентСервер.ПоказательВходитВМногострочнуюЧасть(Форма, ИмяПоказателя);

			Если КолвоСтрокВМногострочнойЧасти > 0 Тогда
				Многострочность = Истина;
				БазоваяЧасть = ИмяПоказателя;
				
			Иначе
				Многострочность = Ложь;
				КолвоСтрокВМногострочнойЧасти = 1;
			КонецЕсли;

			Для Инд = 1 по КолвоСтрокВМногострочнойЧасти Цикл

				Если Многострочность Тогда
					ИмяПоказателя = БазоваяЧасть + "_" + Формат(Инд, "ЧГ=0");
				КонецЕсли;

				ТекОбластьЯчеек = Форма.ТабличныйДокумент.Области[ИмяПоказателя];
				Если (Не ПустаяСтрока(Комментарий)) ИЛИ (Не ПустаяСтрока(ТекОбластьЯчеек.Примечание.Текст)) Тогда
					ТекОбластьЯчеек.Примечание.Текст = Комментарий;
				КонецЕсли;

				Ключ = "_" + ВариантЗаполнения;
				Форма.мСтруктураЦветовРаскраски.Свойство(Ключ, ЦветФона);

				ЗначениеВКвадратах = Ложь;

				Если ВариантЗаполнения = 4 Тогда

					Если ЗначениеВКвадратах Тогда
						// если ЗНАЧЕНИЕ КВАДРАТИЧНОЕ
						РегламентированнаяОтчетностьКлиентСервер.СвойстваГрупповыхЗначений(Форма, ИмяПоказателя, "УстановитьЗащиту");
					Иначе
						Форма.ТабличныйДокумент.Области[ИмяПоказателя].Защита = Истина;
					КонецЕсли;

				Иначе

					Если ЗначениеВКвадратах Тогда
						// если ЗНАЧЕНИЕ КВАДРАТИЧНОЕ
						РегламентированнаяОтчетностьКлиентСервер.СвойстваГрупповыхЗначений(Форма, ИмяПоказателя, "СнятьЗащиту");
					Иначе
						Форма.ТабличныйДокумент.Области[ИмяПоказателя].Защита = Ложь;
					КонецЕсли;
				КонецЕсли;

				Если ЗначениеВКвадратах Тогда
					РегламентированнаяОтчетностьКлиентСервер.СвойстваГрупповыхЗначений(Форма, ИмяПоказателя, "ПроставитьЦветРаскраски", ЦветФона);
				Иначе
					Форма.ТабличныйДокумент.Области[ИмяПоказателя].ЦветФона = ЦветФона;
				КонецЕсли;
			КонецЦикла;

		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПримечаниеНаТитульныхЛистахГруппыАлкогольныхДеклараций()
	
	мТитульный = ТабличныйДокумент;

	СохрДопИнфо1 = мТитульный.Области.ДопИнфо1.Значение;
	
	ТекстПрим = "";
	ПредставляетсяЗнач = Число(Представляется);
	Если ПредставляетсяЗнач = 1 Тогда
		ТекстПрим = "с учетом обособленных подразделений";
	ИначеЕсли ПредставляетсяЗнач = 2 Тогда
		ТекстПрим = "без учета обособленных подразделений";
	ИначеЕсли ПредставляетсяЗнач = 3 Тогда
		ТекстПрим = "за подразделение из того же региона";
	ИначеЕсли ПредставляетсяЗнач = 4 Тогда
		ТекстПрим = "за подразделение из другого региона";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(мТитульный.Области.ТипОрг1.Значение) Тогда
		
		мТитульный.Области.ДопИнфо1.Значение = ТекстПрим;
		
	ИначеЕсли ЗначениеЗаполнено(мТитульный.Области.ТипОрг2.Значение)
	      Или НЕ ЗначениеЗаполнено(мТитульный.Области.ТипОрг1.Значение) Тогда
			
			мТитульный.Области.ДопИнфо1.Значение = "";
		
	КонецЕсли;
	
	Если НЕ СохрДопИнфо1 = мТитульный.Области.ДопИнфо1.Значение Тогда
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСтроку(Команда, ИмяОбласти = "")
	
	ВставитьДополнительнуюСтроку();
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтроку(Команда, ИмяОбласти = "")
	
	ТекТабличноеПоле = ЭтаФорма["ТабличныйДокумент"];

	ТекущаяОбласть = ТекТабличноеПоле.ТекущаяОбласть;
	ИмяГруппы      = РегламентированнаяОтчетностьКлиент.РазделТекущейОбласти(ЭтаФорма, ТекущаяОбласть);
	
	Если ИмяГруппы = Неопределено Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Не выбрана удаляемая строка многострочного раздела.'");
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
	
	ТекстВопроса = НСтр("ru='Удалить выбранную строку?'");
	
	ОписаниеОповещения = Новый ОписаниеОповещения("УдалитьСтрокуЗавершение", ЭтотОбъект);
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтрокуЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	УдалитьДополнительнуюСтроку();
	
КонецПроцедуры

&НаСервере
Процедура ВставитьДополнительнуюСтроку(Группа = Неопределено)	
	Перем СтруктураГруппы;
	Перем МаксимальноеКоличествоСтрокГруппы;
    		
	Если Группа = Неопределено Тогда
		// Сначала выполним проверку на активную страницу панели формы,
		// которая содержит многострочный раздел
		ИмяГруппы = ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	Иначе
		ИмяГруппы = Группа;
	КонецЕсли;
	
	Если ИмяГруппы = Неопределено Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Не выбран многострочный раздел, в который необходимо добавить строку.'");
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;

	// Исходное количество строк группы
	мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, МаксимальноеКоличествоСтрокГруппы);

	ТекТабличноеПолеИмя = "ТабличныйДокумент";
	
	ТекТабличноеПоле = ЭтаФорма[ТекТабличноеПолеИмя];
	
	мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);

	СтруктураГруппы = ЭтаФорма[СтруктураГруппы];
	
	// определяем последнюю строку многострочной группы
	КолСтрок = СтруктураГруппы.Количество();
	ИмяПервойЯчейкиПоследнейСтроки = ИмяГруппы + "01_" + Формат(КолСтрок, "ЧГ=0");

	// область первой ячейки последней строки многострочного раздела
	ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяПервойЯчейкиПоследнейСтроки];

	// номера строк исходной области
	НомерВерхЯчейкиОбласти = ОбластьЯчейки.Верх;
	НомерНижнЯчейкиОбласти = ОбластьЯчейки.Низ;

	СдвигСтрок = НомерНижнЯчейкиОбласти - НомерВерхЯчейкиОбласти + 1;

	// номера строк вставляемой области
	НомерВерхЯчейкиНовойОбласти = НомерВерхЯчейкиОбласти + СдвигСтрок;
	НомерНижнЯчейкиНовойОбласти = НомерНижнЯчейкиОбласти + СдвигСтрок;

	// Для многострочных групп состоящих из одной строки...
	Если КолСтрок <= 2 Тогда

		// Сохраним координаты многострочной части, для последующего восстановления.
		Ч1Верх  = ТекТабличноеПоле.Области.МногострочнаяЧасть1.Верх;
		Ч1Низ   = ТекТабличноеПоле.Области.МногострочнаяЧасть1.Низ;

		Ч2Верх  = ТекТабличноеПоле.Области.МногострочнаяЧасть2.Верх + ?(ИмяГруппы = СтруктураРеквизитовФормы.мИдГруппы1 Или ИмяГруппы = СтруктураРеквизитовФормы.мИдГруппы3, 5, 0);
		Ч2Низ   = ТекТабличноеПоле.Области.МногострочнаяЧасть2.Низ + ?(ИмяГруппы = СтруктураРеквизитовФормы.мИдГруппы1 Или ИмяГруппы = СтруктураРеквизитовФормы.мИдГруппы3, 5, 0);

		Ч1ВерхОпределениеВысотыСтрокиМногострочнойЧасти = ТекТабличноеПоле.Области.ОпределениеВысотыСтрокиМногострочнойЧасти.Верх;
		Ч1НизОпределениеВысотыСтрокиМногострочнойЧасти = ТекТабличноеПоле.Области.ОпределениеВысотыСтрокиМногострочнойЧасти.Низ;

		// определяем вставляемую область
		ВставляемаяОбласть = ТекТабличноеПоле.Область(НомерВерхЯчейкиОбласти, , НомерНижнЯчейкиОбласти);

		// добавляем в таблицу новую строку
		ТекТабличноеПоле.ВставитьОбласть( ВставляемаяОбласть,,ТипСмещенияТабличногоДокумента.ПоВертикали );

		// Восстановим многострочную часть.
		Если ТекТабличноеПоле.Области.Найти("МногострочнаяЧасть1") <> Неопределено Тогда
			ТекТабличноеПоле.Области.МногострочнаяЧасть1.Имя = "";
		КонецЕсли;

		// Восстановим многострочную часть.
		Если ТекТабличноеПоле.Области.Найти("МногострочнаяЧасть2") <> Неопределено Тогда
			ТекТабличноеПоле.Области.МногострочнаяЧасть2.Имя = "";
		КонецЕсли;

		СледующаяЧасть = ТекТабличноеПоле.Область(Ч1Верх, , Ч1Низ,);
		СледующаяЧасть.Имя = "МногострочнаяЧасть1";

		СледующаяЧасть = ТекТабличноеПоле.Область(Ч2Верх, , Ч2Низ,);
		СледующаяЧасть.Имя = "МногострочнаяЧасть2";

		// Восстановим многострочную часть.
		Если ТекТабличноеПоле.Области.Найти("ОпределениеВысотыСтрокиМногострочнойЧасти") <> Неопределено Тогда
			ТекТабличноеПоле.Области.ОпределениеВысотыСтрокиМногострочнойЧасти.Имя = "";
		КонецЕсли;

		СледующаяЧасть1 = ТекТабличноеПоле.Область(Ч1ВерхОпределениеВысотыСтрокиМногострочнойЧасти, 19, Ч1НизОпределениеВысотыСтрокиМногострочнойЧасти, 19);
		СледующаяЧасть1.Имя = "ОпределениеВысотыСтрокиМногострочнойЧасти";
	Иначе
		// определяем вставляемую область
		ВставляемаяОбласть = ТекТабличноеПоле.Область(НомерВерхЯчейкиОбласти, , НомерНижнЯчейкиОбласти);
		// добавляем в таблицу новую строку
		ТекТабличноеПоле.ВставитьОбласть( ВставляемаяОбласть,,ТипСмещенияТабличногоДокумента.ПоВертикали );
	КонецЕсли;

	Предел = 90000;
	
	Для НомерГрафы = 1 По мСтруктураКолвоКолонокРазделов[ИмяГруппы] Цикл
		
		Для Ном = 1 По ?(НомерГрафы = 9, 4, ?(НомерГрафы = 11, 2, 1)) Цикл
			
			Если НомерГрафы = 9
			 ИЛИ НомерГрафы = 11 Тогда
				
				ИмяКолонки = Лев(ИмяГруппы, 9) + "1" + Ном + Формат(НомерГрафы, "ЧЦ=2; ЧВН=");
				
			Иначе
				
				ИмяКолонки = ИмяГруппы + Формат(НомерГрафы, "ЧЦ=2; ЧВН=");
				
			КонецЕсли;
						
			// переопределяем имена вставленной области
			Если СтруктураГруппы[0].Свойство(ИмяКолонки) Тогда
				
				ИмяОбластиЯчейки    = ИмяКолонки + "_" + Формат(КолСтрок, "ЧГ=0");
				ИмяНовОбластиЯчейки = ИмяКолонки + "_" + Формат((КолСтрок + 1), "ЧГ=0");
				
				ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяОбластиЯчейки];
				ОбластьЯчейки.Имя = ИмяНовОбластиЯчейки;
				
				Если Прав(ИмяКолонки, 2) = "01" Тогда
					ТекТабличноеПоле.Области["УдалитьСтроку" + ИмяОбластиЯчейки].Имя = "УдалитьСтроку" + ИмяНовОбластиЯчейки;
				КонецЕсли;
				
				// определяем границы ячейки исходной области
				НомерВерхСтрокиЯчейки  = ОбластьЯчейки.Верх - СдвигСтрок;
				НомерНижнСтрокиЯчейки  = ОбластьЯчейки.Низ  - СдвигСтрок;
				НомерЛевоКолонкиЯчейки = ОбластьЯчейки.Лево;
				НомерПравКолонкиЯчейки = ОбластьЯчейки.Право;
				
				// Назначаем имя ячейки исходной области,
				// (т.к. в результате вставки новой области оно было очищено)
				ОбластьЯчейкиИсходнойОбласти = ТекТабличноеПоле.Область(НомерВерхСтрокиЯчейки, НомерЛевоКолонкиЯчейки, НомерНижнСтрокиЯчейки, НомерПравКолонкиЯчейки);
				ОбластьЯчейкиИсходнойОбласти.Имя = ИмяОбластиЯчейки;
				
				Если Прав(ИмяКолонки, 2) = "01" Тогда
					ТекТабличноеПоле.Область(НомерВерхСтрокиЯчейки, НомерЛевоКолонкиЯчейки - 1, НомерНижнСтрокиЯчейки, НомерПравКолонкиЯчейки - 1).Имя = "УдалитьСтроку" + ИмяОбластиЯчейки;
				КонецЕсли;
				
				// очищаем значения ячеек вставленной области
				Если ОбластьЯчейки.СодержитЗначение = Истина Тогда
					ОбластьЯчейки.Очистить();
				Иначе
					// порядековый номер последней строки перед вставкой
					ИсходныйНомер        = Число("0" + ОбластьЯчейки.Текст);
					НовыйПорядковыйНомер = ИсходныйНомер + 1;
					
					ОбластьЯчейки.Текст  = ? (НЕ НовыйПорядковыйНомер > Предел, Формат(НовыйПорядковыйНомер, "ЧГ=0"), "");	
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;

	// Назначаем новый номер добавленной строке
	// (данный фрагмент используется в отдельных формах).
	//
	НомерСтрокиОбласть       = ТекТабличноеПоле.Область(НомерВерхЯчейкиОбласти,      3, НомерНижнЯчейкиОбласти,      3);
	НомераСтрокиНоваяОбласть = ТекТабличноеПоле.Область(НомерВерхЯчейкиНовойОбласти, 3, НомерНижнЯчейкиНовойОбласти, 3);
	ПоследнийНомер           = НомерСтрокиОбласть.Текст;

	Если Не ПустаяСтрока(ПоследнийНомер) Тогда
		ИсходныйНомер = Число(ПоследнийНомер);
	Иначе
		ИсходныйНомер = МаксимальноеКоличествоСтрокГруппы;
	КонецЕсли;

	НовыйПорядковыйНомер = ИсходныйНомер + 1;
	
	Если НомераСтрокиНоваяОбласть.СодержитЗначение Тогда
		НомераСтрокиНоваяОбласть.Значение = ? (НЕ НовыйПорядковыйНомер > Предел, Формат(НовыйПорядковыйНомер, "ЧГ=0"), "");
	Иначе
		НомераСтрокиНоваяОбласть.Текст = ? (НЕ НовыйПорядковыйНомер > Предел, Формат(НовыйПорядковыйНомер, "ЧГ=0"), "");
	КонецЕсли;

	//
	//// Назначаем новый номер добавленной строке
	
	// Назначим текущей областью таблицы первую редактируемую ячейку добавленной строки.
	// Определяем текущую область таблицы
	ИмяТекущейОбласти = ИмяГруппы + "01_" + Формат((КолСтрок + 1), "ЧГ=0");

	Если Группа = Неопределено Тогда
		
		Элементы[ТекТабличноеПолеИмя].ТекущаяОбласть = ТекТабличноеПоле.Области[ИмяТекущейОбласти];
		
		// установим фокус на поле табличн. документа
		ТекущийЭлемент = Элементы[ТекТабличноеПолеИмя];
		
	КонецЕсли;

	// добавляем в структуру многострочной группы новую строку
	СтруктураГруппы.Добавить();
	
	ОперацияНадСтрокойМногострочногоБлока(ЭтаФорма, ИмяГруппы, Ложь, Формат(СтруктураГруппы.Количество(), "ЧГ=0"));
	
	МассивОбластейСДопСтроками = Новый Массив;
	
	Для Каждого ОбластьТД Из ТабличныйДокумент.Области Цикл
		Если СтрЧислоВхождений(ОбластьТД.Имя, "УдалитьСтроку") > 0 Тогда
			Если СтрЧислоВхождений(ОбластьТД.Имя, "_2") > 0 Тогда
				МассивОбластейСДопСтроками.Добавить(Лев(ОбластьТД.Имя, 26));
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ОбластьТД Из ТабличныйДокумент.Области Цикл
		Если СтрЧислоВхождений(ОбластьТД.Имя, "УдалитьСтроку") > 0 Тогда
			Если МассивОбластейСДопСтроками.Найти(Лев(ОбластьТД.Имя, 26)) = Неопределено Тогда
				ОбластьТД.Гиперссылка = Ложь;
				ОбластьТД.Текст = "";
			Иначе
				ОбластьТД.Гиперссылка = Истина;
				ОбластьТД.Текст = "х";
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборПримечанияИзСписка(РезультатВыбора, Область) Экспорт
	
	Если НЕ РезультатВыбора = Неопределено Тогда
		
		ЭтаФорма.ТабличныйДокумент.Области.Представляется.Значение = РезультатВыбора.Значение;
		Представляется = РезультатВыбора.Значение;
		
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьДополнительнуюСтроку()
	Перем ИсходноеКоличествоСтрокГруппы;
	Перем СтруктураГруппы;

	// Сначала выполним проверку на активную страницу панели формы,
	// которая содержит многострочный раздел
	ИмяГруппы = ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела);

	// исходное количество строк группы
	мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);

	ТекТабличноеПолеИмя = "ТабличныйДокумент";
	
	ТекТабличноеПоле = ЭтаФорма[ТекТабличноеПолеИмя];
	
	мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);
	
	СтруктураГруппы = ЭтаФорма[СтруктураГруппы];

	Если ((ИмяГруппы = СтруктураРеквизитовФормы.мИдГруппы2) Или (ИмяГруппы = СтруктураРеквизитовФормы.мИдГруппы4)) И СтруктураГруппы.Количество() = 1 Тогда
		Возврат;
	КонецЕсли;
	
	// Выполним также проверку вхождения текущей (выделенной) ячейки в многострочный раздел
	ТекущаяОбласть = Элементы.ТабличныйДокумент.ТекущаяОбласть;
	ИмяЯчейки      = ТекущаяОбласть.Имя;
	
	// предварительно обновим структуру многострочного раздела
	ОбновитьСтруктуруМногострочногоРазделаНаСервере(ИмяГруппы);

	// номер строки многострочного раздела определим
	// по имени выделенной ячейки
	НомУдаляемойСтроки = Число( Сред( ИмяЯчейки, СтрНайти( ИмяЯчейки, "_") + 1));
	НомерСтрокиТаблицы = НомУдаляемойСтроки - 1; // нумерация строк в таблице значений начинается с нуля

	Если СтруктураГруппы.Количество() > ИсходноеКоличествоСтрокГруппы Тогда
		// удаляется добавленная строка
		ИмяПервойЯчейкиУдаляемойСтроки = ИмяГруппы + "01_" + Формат(НомУдаляемойСтроки, "ЧГ=0");

		// область первой ячейки удаляемой строки многострочного раздела
		ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяПервойЯчейкиУдаляемойСтроки];

		// номера строк удаляемой области
		НомерВерхЯчейкиОбласти = ОбластьЯчейки.Верх;
		НомерНижнЯчейкиОбласти = ОбластьЯчейки.Низ;

		Если НомУдаляемойСтроки <= 2 Тогда
			// Сохраним координаты многострочной части, для последующего восстановления.
			Ч1Верх  = ТекТабличноеПоле.Области.МногострочнаяЧасть1.Верх;
			Ч1Низ   = ТекТабличноеПоле.Области.МногострочнаяЧасть1.Низ;

			// Сохраним координаты многострочной части, для последующего восстановления.
			Ч2Верх  = ТекТабличноеПоле.Области.МногострочнаяЧасть2.Верх + ?(ИмяГруппы = СтруктураРеквизитовФормы.мИдГруппы1 Или ИмяГруппы = СтруктураРеквизитовФормы.мИдГруппы3, -4, 0);;
			Ч2Низ   = ТекТабличноеПоле.Области.МногострочнаяЧасть2.Низ + ?(ИмяГруппы = СтруктураРеквизитовФормы.мИдГруппы1 Или ИмяГруппы = СтруктураРеквизитовФормы.мИдГруппы3, -4, 0);;

			Ч1ВерхОпределениеВысотыСтрокиМногострочнойЧасти = ТекТабличноеПоле.ОБласти.ОпределениеВысотыСтрокиМногострочнойЧасти.Верх;
			Ч1НизОпределениеВысотыСтрокиМногострочнойЧасти = ТекТабличноеПоле.ОБласти.ОпределениеВысотыСтрокиМногострочнойЧасти.Низ;

			// Определим область удаляемой строки
			УдаляемаяОбласть = ТекТабличноеПоле.Область(НомерВерхЯчейкиОбласти, , НомерНижнЯчейкиОбласти, );

			// непосредственно удаляем область строки табличного документа
			ТекТабличноеПоле.УдалитьОбласть( УдаляемаяОбласть,ТипСмещенияТабличногоДокумента.ПоВертикали );

			// Восстановим многострочную часть.
			Если ТекТабличноеПоле.Области.Найти("МногострочнаяЧасть1") <> Неопределено Тогда
				ТекТабличноеПоле.Области.МногострочнаяЧасть1.Имя = "";
			КонецЕсли;

			// Восстановим многострочную часть.
			Если ТекТабличноеПоле.Области.Найти("МногострочнаяЧасть2") <> Неопределено Тогда
				ТекТабличноеПоле.Области.МногострочнаяЧасть2.Имя = "";
			КонецЕсли;

			СледующаяЧасть = ТекТабличноеПоле.Область(Ч1Верх, , Ч1Низ,);
			СледующаяЧасть.Имя = "МногострочнаяЧасть1";

			СледующаяЧасть = ТекТабличноеПоле.Область(Ч2Верх, , Ч2Низ,);
			СледующаяЧасть.Имя = "МногострочнаяЧасть2";

			// Восстановим многострочную часть.
			Если ТекТабличноеПоле.Области.Найти("ОпределениеВысотыСтрокиМногострочнойЧасти") <> Неопределено Тогда
				ТекТабличноеПоле.Области.ОпределениеВысотыСтрокиМногострочнойЧасти.Имя = "";
			КонецЕсли;

			СледующаяЧасть1 = ТекТабличноеПоле.Область(Ч1ВерхОпределениеВысотыСтрокиМногострочнойЧасти, 19, Ч1НизОпределениеВысотыСтрокиМногострочнойЧасти, 19);
			СледующаяЧасть1.Имя = "ОпределениеВысотыСтрокиМногострочнойЧасти";
		Иначе
			// Определим область удаляемой строки
			УдаляемаяОбласть = ТекТабличноеПоле.Область(НомерВерхЯчейкиОбласти, , НомерНижнЯчейкиОбласти, );
			// непосредственно удаляем область строки табличного документа
			ТекТабличноеПоле.УдалитьОбласть( УдаляемаяОбласть,ТипСмещенияТабличногоДокумента.ПоВертикали );

		КонецЕсли;

		КолвоСдвигаемыхСтрок = СтруктураГруппы.Количество() - НомУдаляемойСтроки;

		Если КолвоСдвигаемыхСтрок > 0 Тогда

			Для НСтр = НомУдаляемойСтроки + 1 По СтруктураГруппы.Количество() Цикл
				
				ТекСтрока = СтруктураГруппы[НСтр - 1];
				
				Для НомерГрафы = 1 По мСтруктураКолвоКолонокРазделов[ИмяГруппы] Цикл
					
					Если НомерГрафы = 1 Тогда
						КолонкаИмя = "УдалитьСтроку" + ИмяГруппы + Формат(НомерГрафы, "ЧЦ=2; ЧВН=");;
						ИмяСдвинутойЯчейки = КолонкаИмя + "_" + Формат(НСтр, "ЧГ=0");
						НовоеИмяСдвинутойЯчейки = КолонкаИмя + "_" + Формат((НСтр - 1), "ЧГ=0");
						ОбластьСдвинутойЯчейки = ТекТабличноеПоле.Области[ИмяСдвинутойЯчейки];
						ОбластьСдвинутойЯчейки.Имя = НовоеИмяСдвинутойЯчейки;
					КонецЕсли;
					
					Для Ном = 1 По ?(НомерГрафы = 9, 4, ?(НомерГрафы = 11, 2, 1)) Цикл
						
						Если НомерГрафы = 9
							ИЛИ НомерГрафы = 11 Тогда
							
							КолонкаИмя = Лев(ИмяГруппы, 9) + "1" + Ном + Формат(НомерГрафы, "ЧЦ=2; ЧВН=");
							
						Иначе
							
							КолонкаИмя = ИмяГруппы + Формат(НомерГрафы, "ЧЦ=2; ЧВН=");
							
						КонецЕсли;
						
						Если СтруктураГруппы[0].Свойство(КолонкаИмя) Тогда
							
							ИмяСдвинутойЯчейки = КолонкаИмя + "_" + Формат(НСтр, "ЧГ=0");
							НовоеИмяСдвинутойЯчейки = КолонкаИмя + "_" + Формат((НСтр - 1), "ЧГ=0");
							
							ОбластьСдвинутойЯчейки = ТекТабличноеПоле.Области[ИмяСдвинутойЯчейки];
							ОбластьСдвинутойЯчейки.Имя = НовоеИмяСдвинутойЯчейки;
							
							Если (КолонкаИмя = "П000000000001") Или (КолонкаИмя = "П000010003001")
								Или (КолонкаИмя = "П000010000001") Или (КолонкаИмя = "П000010001001") Тогда
								// обновляем порядковый номер строки
								
								СтарыйНомер = Число(ТекСтрока[КолонкаИмя]);
								НовыйПорядковыйНомер = Формат(Макс(СтарыйНомер - 1, 0), "ЧГ=0");
								ОбластьСдвинутойЯчейки.Значение = НовыйПорядковыйНомер + "";
								
								// обновляем значение элемента таблицы значений
								ТекСтрока[КолонкаИмя] = НовыйПорядковыйНомер;
							КонецЕсли;
							
						КонецЕсли;
						
					КонецЦикла;
					
				КонецЦикла;
				
			КонецЦикла;
		КонецЕсли;
		
		// обновляем структуру многострочного раздела
		СтруктураГруппы.Удалить(НомерСтрокиТаблицы);
		
		ОтрисоватьЗначкиУдаленияСтрок();
		
	Иначе
		// строка не удаляется в форме табличного документа,
		// а должна осуществляться сдвиг строк

		// обновляем структуру многострочного раздела
		// методом удаления выбранной строки и добавления пустой строки
		СтруктураГруппы.Удалить(НомерСтрокиТаблицы);

		ДобавляемаяСтрока = СтруктураГруппы.Добавить();

		// обновляем порядковые номера строк, выводимых в табличный документ
		Для Каждого СтрокаТаблицы Из СтруктураГруппы Цикл
			
			НомерСтрокиВТаблице = СтруктураГруппы.Индекс(СтрокаТаблицы);
			НомерСтрокиВФормеТаблицы = НомерСтрокиВТаблице + 1;
			
			Для НомерГрафы = 1 По мСтруктураКолвоКолонокРазделов[ИмяГруппы] Цикл
				
				Если НомерГрафы = 1 Тогда
					КолонкаТаблицыИмя = "УдалитьСтроку" + ИмяГруппы + Формат(НомерГрафы, "ЧЦ=2; ЧВН=");
					ИмяЯчейки            = КолонкаТаблицыИмя + "_" + Формат(НомерСтрокиВФормеТаблицы, "ЧГ=0");
					ОбластьЯчейкиТаблицы = ТекТабличноеПоле.Области[ИмяЯчейки];
				КонецЕсли;
				
				Для Ном = 1 По ?(НомерГрафы = 9, 4, ?(НомерГрафы = 11, 2, 1)) Цикл
					
					Если НомерГрафы = 9
						ИЛИ НомерГрафы = 11 Тогда
						
						КолонкаТаблицыИмя = Лев(ИмяГруппы, 9) + "1" + Ном + Формат(НомерГрафы, "ЧЦ=2; ЧВН=");
						
					Иначе
						
						КолонкаТаблицыИмя = ИмяГруппы + Формат(НомерГрафы, "ЧЦ=2; ЧВН=");
						
					КонецЕсли;
					
					Если СтруктураГруппы[0].Свойство(КолонкаТаблицыИмя) Тогда
						
						ИмяЯчейки            = КолонкаТаблицыИмя + "_" + Формат(НомерСтрокиВФормеТаблицы, "ЧГ=0");
						ОбластьЯчейкиТаблицы = ТекТабличноеПоле.Области[ИмяЯчейки];
						
						Если (КолонкаТаблицыИмя = "П000000000001") Или (КолонкаТаблицыИмя = "П000010003001")
							Или (КолонкаТаблицыИмя = "П000010000001") Или (КолонкаТаблицыИмя = "П000010001001") Тогда
							ПервыйНомерВГруппе = 1;
							
							// обновляем порядковый номер строки
							НовыйПорядковыйНомер = Формат(ПервыйНомерВГруппе + НомерСтрокиВТаблице, "ЧГ=0");
							
							СтрокаТаблицы[КолонкаТаблицыИмя] = НовыйПорядковыйНомер;
						КонецЕсли;
						
					КонецЕсли;	
					
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЦикла;
		
		// Обновляем экранную форму табличного документа
		ВывестиРазделВТабличныйДокумент(ЭтаФорма, ИмяГруппы, СтруктураГруппы);
		
	КонецЕсли;
	
	Расчет(ЭтаФорма, СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
	// назначим текущей областью таблицы первую редактируемую ячейку
	// удаленной строки, если ее порядковый номер меньше кол-ва строк
	// многострочного раздела, или последней строки раздела в противном случае

	// определяем текущую область таблицы
	НомТекущейСтроки  = Мин( НомУдаляемойСтроки, СтруктураГруппы.Количество() );
	ИмяТекущейОбласти = ИмяГруппы + "01_" + Формат(НомТекущейСтроки, "ЧГ=0");

	Элементы[ТекТабличноеПолеИмя].ТекущаяОбласть = ТекТабличноеПоле.Области[ИмяТекущейОбласти];

	// установим фокус на поле табличн. документа
	ТекущийЭлемент = Элементы[ТекТабличноеПолеИмя];

	Модифицированность = Истина;

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСтраницу(Команда)
	
	ВставитьДополнительнуюСтраницуНаСервере(Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
					
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтраницу(Команда)
	
	Если ЭтаФорма[мСтруктураМногостраничныхРазделов.Титульный][0].АктивнаяСтраница Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Нельзя удалять первую страницу титульного листа данной декларации.'");
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("УдалитьСтраницуЗавершение", ЭтотОбъект);
	ПоказатьВопрос(ОписаниеОповещения, НСтр("ru='Удалить текущую страницу?'"), РежимДиалогаВопрос.ДаНет, 60, КодВозвратаДиалога.Да);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтраницуЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.РазделыОтчета.ТекущиеДанные;
	
	КопияТекущиеДанные = ТекущиеДанные;
	
	ТекущиеДанные = ТекущиеДанные.ПолучитьРодителя();
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.ПолучитьЭлементы().Количество() = 1 Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяСтраницаРазделаПослеУдаления = Неопределено;
	Если КопияТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета = ТекущиеДанные.ПолучитьЭлементы().Количество() Тогда
		ТекущаяСтраницаРазделаПослеУдаления = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(ТекущиеДанные.ПолучитьЭлементы(), "КолонкаНомерСтраницыРазделаОтчета", КопияТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета - 1);
	КонецЕсли;
	
	УдалитьДополнительнуюСтраницуНаСервере(Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
	
	ТекущиеДанные.ПолучитьЭлементы().Удалить(ТекущиеДанные.ПолучитьЭлементы().Индекс(КопияТекущиеДанные));
	
	НомерСтраницы = 1;
	
	Для Каждого СтраницаРаздела Из ТекущиеДанные.ПолучитьЭлементы() Цикл
		
		СтраницаРаздела.КолонкаРазделыОтчета              = "Стр. " + НомерСтраницы;
		СтраницаРаздела.КолонкаНомерСтраницыРазделаОтчета = НомерСтраницы;
		
		НомерСтраницы = НомерСтраницы + 1;
		
	КонецЦикла;
	
	Если НЕ ТекущаяСтраницаРазделаПослеУдаления = Неопределено Тогда
		Элементы.РазделыОтчета.ТекущаяСтрока = ТекущаяСтраницаРазделаПослеУдаления.ПолучитьИдентификатор();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВставитьДополнительнуюСтраницуНаСервере(ИмяТекущейСтраницыПанели = Неопределено)

	Если ИмяТекущейСтраницыПанели = "Титульный" Тогда
		
	    КППТек = РегламентированнаяОтчетностьКлиентСервер.ВернутьЗначениеПараметраСЛиста(ЭтаФорма, "Титульный", "КПП1");
		РегламентированнаяОтчетность.ВставитьДополнительнуюСтраницуНаСервере(ЭтаФорма, ИмяТекущейСтраницыПанели);
		ОчиститьТитульныйЛист();
		ОбработатьВидДеятельности();
		ТабличныйДокумент.Области.КПП1.Значение = КППТек;
		ТабличныйДокумент.Области.НомКоррект.ЦветФона = Новый Цвет();
		ТабличныйДокумент.Области.НомКоррект.Защита = Истина;
	
	КонецЕсли;
	
	РегламентированнаяОтчетность.ПослеВставкиДополнительнойСтраницыНаСервере(ЭтаФорма, ИмяТекущейСтраницыПанели);
				
КонецПроцедуры

&НаСервере
Процедура УдалитьДополнительнуюСтраницуНаСервере(ИмяТекущейСтраницыПанели = Неопределено)
	
	Если ИмяТекущейСтраницыПанели = "Титульный" Тогда
		
		РегламентированнаяОтчетность.УдалитьДополнительнуюСтраницуНаСервере(ЭтаФорма, ИмяТекущейСтраницыПанели);
		ОбработкаАдресаПриЛистании();
		ОбработатьВидДеятельности();
			
	КонецЕсли;
			
КонецПроцедуры

&НаСервере
Процедура ОчисткаРегламентированногоОтчетаНаСервере(ИмяСтраницы, ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста, РежимОчистки, Многостраничность, КолВоСтраницВРазделе) Экспорт
	
	УдалятьсяВсеДопЭкземпляры = Ложь;
	
	Если СтрНайти(РежимОчистки, "ОчиститьТекущийРаздел") > 0 Тогда
		
		Если (Многостраничность) И (КолВоСтраницВРазделе > 1) Тогда
			
			ОчиститьПоказателиОтчетаЗаполняемыеИзИБНаСервере(ИмяСтраницы);
			
			УдалятьсяВсеДопЭкземпляры = Истина;
			
		Иначе
			
			ОчиститьТабличноеПолеНаСервере(ИмяСтраницы);
			
		КонецЕсли;
		
		СформироватьДеревоРазделовОтчетаНаСервере();
		
		СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
		
	ИначеЕсли СтрНайти(РежимОчистки, "ОчиститьТекущийЭкземплярМногостраничногоРаздела") > 0 Тогда
		
		ОчиститьТабличноеПолеНаСервере(ИмяСтраницы);
		
	КонецЕсли;
	
	Если ИмяСтраницы = "Титульный" Тогда
		
		ЭтаФорма.НомерКорректировки                                   = 0;
		ТабличныйДокумент.Области.НомКоррект.Значение                 = 0;
		СтруктураРеквизитовФормы.ВидДокумента                         = 0;
		ЭтаФорма.Представляется                                       = 1;
		ТабличныйДокумент.Области.Представляется.Значение             = 1;
		
		Если Элементы.Найти("ДатаПодписи") = Неопределено Тогда
			Область = ТабличныйДокумент.Области.Найти("ДатаПодписи");
			Если НЕ Область = Неопределено Тогда
				Если ТипЗнч(Область.Значение) = Тип("Строка") Тогда
					ДатаПодписи = Лев(СтрЗаменить(Область.Значение, ".", ""), 8);
				ИначеЕсли ТипЗнч(Область.Значение) = Тип("Дата") Тогда
					Если ЗначениеЗаполнено(Область.Значение) Тогда
						ДатаПодписи = Лев(СтрЗаменить(Формат(Область.Значение, "ДФ = ""дд.ММ.гггг 'г.'"""), ".", ""), 8);
					Иначе
						ДатаПодписи = "        ";
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиентСервер.ПослеОчисткиРегламентированногоОтчета(ЭтаФорма, ИмяСтраницы, ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста);
	
КонецПроцедуры

&НаКлиенте
Процедура ОчисткаРегламентированногоОтчетаНаКлиенте(ИмяСтраницы, ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста, РежимОчистки, Многостраничность, КолВоСтраницВРазделе) Экспорт
	
	УдалятьсяВсеДопЭкземпляры = Ложь;
	
	Если СтрНайти(РежимОчистки, "ОчиститьТекущийРаздел") > 0 Тогда
		
		Если (Многостраничность) И (КолВоСтраницВРазделе > 1) Тогда

			РегламентированнаяОтчетностьКлиентСервер.ОчиститьПоказателиОтчетаЗаполняемыеИзИБ(ЭтаФорма, ИмяСтраницы);

			УдалятьсяВсеДопЭкземпляры = Истина;
			
		Иначе

			ОчиститьТабличноеПолеНаКлиенте(ИмяСтраницы);

		КонецЕсли;
		
		СформироватьДеревоРазделовОтчетаНаКлиенте();
		
	ИначеЕсли СтрНайти(РежимОчистки, "ОчиститьТекущийЭкземплярМногостраничногоРаздела") > 0 Тогда
		
		ОчиститьТабличноеПолеНаКлиенте(ИмяСтраницы);
		
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиентСервер.ПослеОчисткиРегламентированногоОтчета(ЭтаФорма, ИмяСтраницы, ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста);
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьПоказателиОтчетаЗаполняемыеИзИБНаСервере(ИмяСтраницы)
	
	РегламентированнаяОтчетностьКлиентСервер.ОчиститьПоказателиОтчетаЗаполняемыеИзИБ(ЭтаФорма, ИмяСтраницы);
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьВидДеятельности()

	НомерАктивнойСтраницы = ЭтаФорма[мСтруктураМногостраничныхРазделов.Титульный].НайтиСтроки(Новый Структура("АктивнаяСтраница", Истина));
	
	Если НомерАктивнойСтраницы.Количество() = 0 Тогда
		Возврат;
	Иначе
		НомерАктивнойСтраницы = НомерАктивнойСтраницы[0];
	КонецЕсли;
	
	ОткрытДоступ = ЭтаФорма[мСтруктураМногостраничныхРазделов.Титульный].Индекс(НомерАктивнойСтраницы) > 0;

	Если ОткрытДоступ Тогда
		Цвет = Новый Цвет(255, 255, 255);
	Иначе
		Цвет = Новый Цвет(255, 255, 192);
	КонецЕсли;

	ТабличныйДокумент.Области.ВидДеятельности.ЦветФона = Цвет;
	ТабличныйДокумент.Области.ТипОрг1.ЦветФона         = Цвет;
	ТабличныйДокумент.Области.ТипОрг2.ЦветФона         = Цвет;
	
	ТабличныйДокумент.Области.Прил.ЦветФона = Цвет;
	ТабличныйДокумент.Области.Прил.Защита   = ОткрытДоступ;
	
	ТабличныйДокумент.Области.ВидДеятельности.Защита = ОткрытДоступ;
	ТабличныйДокумент.Области.ТипОрг1.Защита         = ОткрытДоступ;
	ТабличныйДокумент.Области.ТипОрг2.Защита         = ОткрытДоступ;
	
	ТабличныйДокумент.Области.ОргИМНС.ЦветФона = Цвет;
	ТабличныйДокумент.Области.ОргИМНС.Защита   = ОткрытДоступ;
	
	ТабличныйДокумент.Области.КодИМНС.ЦветФона = Цвет;
	ТабличныйДокумент.Области.КодИМНС.Защита   = ОткрытДоступ;
		
	ТабличныйДокумент.Области.КПП1.ЦветФона = Цвет; 
	ТабличныйДокумент.Области.КПП1.Защита   = ОткрытДоступ;		
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаАдресаПриЛистании()
	
	Если ТабличныйДокумент.Области.НомКоррект.ЦветФона = Новый Цвет(255, 255, 192)
	   И ЗначениеЗаполнено(ТабличныйДокумент.Области.ОтчетГод.Значение) Тогда
		ТабличныйДокумент.Области.АдрЮР.Значение = РегламентированнаяОтчетностьКлиентСервер.ПредставлениеАдресаВФормате9Запятых(СтруктураРеквизитовФормы.мАдрЮРТитульныйВыгрузка, Истина);
	Иначе
		ТабличныйДокумент.Области.АдрЮР.Значение = "";
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОтрисоватьЗначкиУдаленияСтрок()
	
	ТабДок = ТабличныйДокумент;
	
	МассивОбластейСДопСтроками = Новый Массив;
	
	Для Каждого ОбластьТД Из ТабДок.Области Цикл
		Если СтрЧислоВхождений(ОбластьТД.Имя, "УдалитьСтроку") > 0 Тогда
			Если СтрЧислоВхождений(ОбластьТД.Имя, "_2") > 0 Тогда
				МассивОбластейСДопСтроками.Добавить(Лев(ОбластьТД.Имя, 26));
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ОбластьТД Из ТабДок.Области Цикл
		Если СтрЧислоВхождений(ОбластьТД.Имя, "УдалитьСтроку") > 0 Тогда
			Если МассивОбластейСДопСтроками.Найти(Лев(ОбластьТД.Имя, 26)) = Неопределено Тогда
				ОбластьТД.Гиперссылка = Ложь;
				ОбластьТД.Текст = "";
			Иначе
				ОбластьТД.Гиперссылка = Истина;
				ОбластьТД.Текст = "х";
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьТитульныйЛист()
	
	Для Инд = 0 По ТабличныйДокумент.Области.Количество() - 1 Цикл
		
		ТекущаяОбласть = ТабличныйДокумент.Области[Инд];

		Если Не ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			Продолжить;
		КонецЕсли;

		Если ТекущаяОбласть.СодержитЗначение <> Истина Тогда
			Продолжить;
		КонецЕсли;

		ИмяПоказателя = ТекущаяОбласть.Имя;
		Если (ИмяПоказателя = "СерЛиц") Или (ИмяПоказателя = "НомерЛиц")
		 Или (ИмяПоказателя = "ДатаНачЛиц") Или (ИмяПоказателя = "ДатаОконЛиц")
		 Или (СтрНайти(ИмяПоказателя, "ИНН1") > 0)
		 Или (СтрНайти(ИмяПоказателя, "КПП1") > 0) Тогда
			Продолжить;
		КонецЕсли;
		ТекущаяОбласть.Значение = "";
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ОбновитьПеременныеМодуляНаСервере(ИмяПоказателя, ЗначениеПоказателя) Экспорт

	ПеременныеМодуля = Новый Структура;
	ПеременныеМодуля.Вставить("АдрЮР",   СтруктураРеквизитовФормы.мАдрЮРТитульныйВыгрузка);
	ПеременныеМодуля.Вставить("ВидДеят", СтруктураРеквизитовФормы.мВидДеят);
	
	флОбновитьПеременныеМодуля = ОбновитьПеременныеМодуля(ИмяПоказателя, ЗначениеПоказателя, ПеременныеМодуля);
	
	СтруктураРеквизитовФормы.мАдрЮРТитульныйВыгрузка = ПеременныеМодуля.АдрЮР;
	СтруктураРеквизитовФормы.мВидДеят                = ПеременныеМодуля.ВидДеят;
	
	Возврат флОбновитьПеременныеМодуля;
	
КонецФункции

&НаКлиенте
Функция ОбновитьПеременныеМодуляНаКлиенте(ИмяПоказателя, ЗначениеПоказателя) Экспорт

	ПеременныеМодуля = Новый Структура;
	ПеременныеМодуля.Вставить("АдрЮР",   СтруктураРеквизитовФормы.мАдрЮРТитульныйВыгрузка);
	ПеременныеМодуля.Вставить("ВидДеят", СтруктураРеквизитовФормы.мВидДеят);
	
	флОбновитьПеременныеМодуля = ОбновитьПеременныеМодуля(ИмяПоказателя, ЗначениеПоказателя, ПеременныеМодуля);
	
	СтруктураРеквизитовФормы.мАдрЮРТитульныйВыгрузка = ПеременныеМодуля.АдрЮР;
	СтруктураРеквизитовФормы.мВидДеят                = ПеременныеМодуля.ВидДеят;
	
	Возврат флОбновитьПеременныеМодуля;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ОбновитьПеременныеМодуля(ИмяПоказателя, ЗначениеПоказателя,ПеременныеМодуля) Экспорт
		
	ИзмененияПроизошли = Ложь;

	Если Лев(ИмяПоказателя, 1) = "_" Тогда
		ИзмененияПроизошли = Истина;
		Возврат ИзмененияПроизошли;
	КонецЕсли;

	Если ИмяПоказателя = "АдрЮР" Тогда
		ПеременныеМодуля.АдрЮР = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;

	ИначеЕсли ИмяПоказателя = "ВидДеят" Тогда
		ПеременныеМодуля.ВидДеят = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;

	КонецЕсли;

	Возврат ИзмененияПроизошли;	
		
КонецФункции

&НаСервере
Процедура ДатаПодписиПриИзмененииНаСервере()
	
	ЗаполнитьСведенияОбОрганизации(Истина);

	ЗаполнитьСведенияОбФЛ(Истина);

	СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация = Истина;

	ЗаполнитьДатуВЯчейкахНаСервере();

	СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация = Ложь;

	Модифицированность = Истина;
	
Конецпроцедуры

&НаКлиенте
Процедура Обновить(Команда)
	
	ОбновитьНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьНаСервере()
	
	СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация = Истина;
	
	ЗаполнитьСведенияОбОрганизации();
	ЗаполнитьСведенияОбФЛ();
	
	Для Каждого Элемент Из ЭтаФорма[мСтруктураМногостраничныхРазделов.Титульный] Цикл
		Элемент.Данные[0].Значение.Вставить("КПП1", ТабличныйДокумент.Области.КПП1.Значение);
	КонецЦикла;
				
	СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация = Ложь;
	
	СформироватьДеревоРазделовОтчетаНаСервере();
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьОтчет(Команда)
	
	РегламентированнаяОтчетностьКлиент.МеханизмыОчисткиРегламентированныхОтчетов(ЭтаФорма, "ОчиститьВесьОтчет");
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТекущуюСтраницу(Команда)
	
	РегламентированнаяОтчетностьКлиент.МеханизмыОчисткиРегламентированныхОтчетов(ЭтаФорма, "ОчиститьТекущийЭкземплярМногостраничногоРаздела" + Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
	
КонецПроцедуры

&НаКлиенте
Процедура Очистить(ВыполняемоеОповещение = Неопределено) Экспорт

	РегламентированнаяОтчетностьКлиент.Очистить(ЭтаФорма, ВыполняемоеОповещение);
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьНаСервере() Экспорт
	
	СтруктураДанныхДекларация.Очистить();
	СтруктураДанныхВозвраты.Очистить();
	
	Для Каждого мнгРаздел Из мСтруктураМногострочныхРазделов Цикл
		ЭтаФорма[мнгРаздел.Ключ].Очистить();
	КонецЦикла;
	
	НачальныеОперацииСМногострочнымиБлоками();
	
	ЗаполнитьПустыеСтруктурыДанных();
	
	Если НЕ СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный"
	   И НЕ СтруктураРеквизитовФормы.НаимТекущегоРаздела = "ФизЛица" Тогда
		ОчиститьТабличноеПолеНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	КонецЕсли;
		
	ВывестиМакетСтраницыВТабличныйДокументНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела, 1);
		
	СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
	
	РегламентированнаяОтчетностьКлиентСервер.ОчиститьВариантыЗаполнения(ЭтаФорма);
	
КонецПроцедуры
 
&НаСервере
Процедура ЗаполнитьПустыеСтруктурыДанных()
	
	СохрТабличныйДокумент = Новый ТабличныйДокумент;
	
	СохрТабличныйДокумент.Вывести(ТабличныйДокумент);
	
	СохрНаимТекущегоРаздела = СтруктураРеквизитовФормы.НаимТекущегоРаздела;
	
	Для Каждого Раздел Из мСвойстваРазделовДекларации.ПолучитьЭлементы() Цикл
		
		Если НЕ Раздел.МногостраничностьВРазделе
		  И (ЭтаФорма["СтруктураДанных" + Раздел.ИмяСтраницы].Количество() = 0) Тогда
		  
			ТабличныйДокумент.Очистить();
			ТабличныйДокумент.Вывести(Отчеты[Сред(Лев(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, ".Форма.") - 1), 7)].ПолучитьМакет(Сред(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + Раздел.ИмяСтраницы));
			
			СтруктураРеквизитовФормы.НаимТекущегоРаздела = Раздел.ИмяСтраницы;
			
			СохранитьДанныеРаздела(Раздел.ИмяСтраницы, Ложь, Ложь);
			
		ИначеЕсли Раздел.МногостраничностьВРазделе
			    И (ЭтаФорма[мСтруктураМногостраничныхРазделов[Раздел.ИмяСтраницы]][0].Данные.Количество() = 0) Тогда
				
			ТабличныйДокумент.Очистить();
			ТабличныйДокумент.Вывести(Отчеты[Сред(Лев(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, ".Форма.") - 1), 7)].ПолучитьМакет(Сред(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + Раздел.ИмяСтраницы));
			
			СтруктураРеквизитовФормы.НаимТекущегоРаздела = Раздел.ИмяСтраницы;
			
			СохранитьДанныеРаздела(Раздел.ИмяСтраницы, Ложь, Ложь);
			
		КонецЕсли;
	
	КонецЦикла;
	
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(СохрТабличныйДокумент);
	
	СтруктураРеквизитовФормы.НаимТекущегоРаздела = СохрНаимТекущегоРаздела;
	
КонецПроцедуры

&НаКлиенте
Процедура ТабличныйДокументПриИзмененииСодержимогоОбласти(Элемент, Область)
	
	Модифицированность = Истина;
	
	ИмяОбласти = Область.Имя;
	
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
		
		Если Элемент.ТекущаяОбласть.Имя = "КПП1" Тогда
			
			Если ЭтаФорма[мСтруктураМногостраничныхРазделов.Титульный].Количество() > 1 Тогда
				
				Для Каждого Страница Из ЭтаФорма[мСтруктураМногостраничныхРазделов.Титульный] Цикл
					
					СтруктураДанных = Страница.Данные[0].Значение;
					СтруктураДанных.Вставить("КПП1", ТабличныйДокумент.Области.КПП1.Значение);
					Страница.Данные[0].Значение = СтруктураДанных;
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;	
		
		Если ИмяОбласти = "НомКоррект" Тогда
			
			НомерКорректировки = Область.Значение;
			
			СтруктураРеквизитовФормы.ВидДокумента = ?(НомерКорректировки = 0, 0, 1);
			
			Модифицированность = Истина;
			
		ИначеЕсли ИмяОбласти = "ДатаПодписи" Тогда
			
			ДатаПодписи = ТабличныйДокумент.Области.ДатаПодписи.Значение;
			
			ДатаПодписиПриИзмененииНаСервере();
			
		КонецЕсли;
		
	ИначеЕсли НЕ СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный"
		И НЕ СтруктураРеквизитовФормы.НаимТекущегоРаздела = "ФизЛица" Тогда
		
		Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Декларация" Тогда
			ИдГруппы = СтруктураРеквизитовФормы.мИдГруппы1;
		Иначе
			ИдГруппы = СтруктураРеквизитовФормы.мИдГруппы3;
		КонецЕсли;
		
		Если (СтрНайти(Элемент.ТекущаяОбласть.Имя, "П000000000016_") > 0) Или (СтрНайти(Элемент.ТекущаяОбласть.Имя, "П000010000016_") > 0) Тогда
			
			СтруктураГруппы1 = Неопределено;
			мСтруктураМногострочныхРазделов.Свойство(ИдГруппы, СтруктураГруппы1);
			СтруктураГруппы1 = ЭтаФорма[СтруктураГруппы1];
			НомерСтроки = Сред(Элемент.ТекущаяОбласть.Имя, 15);
			СтруктураГруппы1[Число(НомерСтроки) - 1][Сред(Элемент.ТекущаяОбласть.Имя, 1, 13)] = Элемент.ТекущаяОбласть.Значение;
			
			РасчетНаКлиенте(СтруктураРеквизитовФормы.НаимТекущегоРаздела, Элемент.ТекущаяОбласть.Имя);
			
		ИначеЕсли (СтрНайти(Элемент.ТекущаяОбласть.Имя, "П000000000008_") > 0
			Или СтрНайти(Элемент.ТекущаяОбласть.Имя, "П000010003008_") > 0
			Или СтрНайти(Элемент.ТекущаяОбласть.Имя, "П000010000008_") > 0
			Или СтрНайти(Элемент.ТекущаяОбласть.Имя, "П000010001008_") > 0) И (СтруктураРеквизитовФормы.мАвтоВыборКодов) Тогда
			
			НомерСтроки = Сред(Элемент.ТекущаяОбласть.Имя, 15);
			
			СтруктураГруппы1 = Неопределено;
			
			Если СтрНайти(Элемент.ТекущаяОбласть.Имя, "П000010003008") > 0 Тогда
				Группа = СтруктураРеквизитовФормы.мИдГруппы2;
				Показатель = "П000010003008";
			ИначеЕсли СтрНайти(Элемент.ТекущаяОбласть.Имя, "П000000000008") > 0 Тогда
				Группа = СтруктураРеквизитовФормы.мИдГруппы1;
				Показатель = "П000000000008";
			ИначеЕсли СтрНайти(Элемент.ТекущаяОбласть.Имя, "П000010000008") > 0 Тогда
				Группа = СтруктураРеквизитовФормы.мИдГруппы3;
				Показатель = "П000010000008";
			ИначеЕсли СтрНайти(Элемент.ТекущаяОбласть.Имя, "П000010001008") > 0 Тогда
				Группа = СтруктураРеквизитовФормы.мИдГруппы4;
				Показатель = "П000010001008";
				
			КонецЕсли;
			
			мСтруктураМногострочныхРазделов.Свойство(Группа, СтруктураГруппы1);
			СтруктураГруппы1 = ЭтаФорма[СтруктураГруппы1];
			СтруктураГруппы1[Число(НомерСтроки) - 1][Показатель] = Элемент.ТекущаяОбласть.Значение;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТабличныйДокументВыбор(Элемент, Область, СтандартнаяОбработка)
	
	ИмяОбласти = Область.Имя;
	
	Если СтрЧислоВхождений(ИмяОбласти, "ДобавитьСтраницу") > 0 Тогда
		СтандартнаяОбработка = Ложь;
		ДобавитьСтраницу("");
	ИначеЕсли СтрЧислоВхождений(ИмяОбласти, "УдалитьСтраницу") > 0 И Область.Гиперссылка Тогда
		СтандартнаяОбработка = Ложь;
		УдалитьСтраницу("");
	ИначеЕсли СтрЧислоВхождений(ИмяОбласти, "ДобавитьСтроку") > 0 Тогда
		СтандартнаяОбработка = Ложь;
		ДобавитьСтроку("", ИмяОбласти);
	ИначеЕсли СтрЧислоВхождений(ИмяОбласти, "УдалитьСтроку") > 0 И Область.Гиперссылка Тогда
		СтандартнаяОбработка = Ложь;
		УдалитьСтроку("", ИмяОбласти);
	КонецЕсли;
	
	Если СтрЧислоВхождений(ИмяОбласти, "Заполнить") > 0 Тогда
		СтандартнаяОбработка = Ложь;
		Заполнить("");
	КонецЕсли;
	
	Если ИмяОбласти = "Представляется" Тогда
		
		СтандартнаяОбработка = Ложь;
		
		СписокПримечаний = Новый СписокЗначений;
		
		СписокПримечаний.Добавить(1, "1 - За головную организацию с учетом всех обособленных подразделений");
		СписокПримечаний.Добавить(2, "2 - За организацию, не имеющую обособленных подразделений");
		СписокПримечаний.Добавить(3, "3 - За обособленное подразделение, осуществляющее свою деятельность в том же регионе, что и головная организация");
		СписокПримечаний.Добавить(4, "4 - За обособленное подразделение, осуществляющее свою деятельность в другом регионе (нежели головная организация)");
		
		ВыборПримечания = Новый ОписаниеОповещения("ВыборПримечанияИзСписка", ЭтотОбъект, Область);
		СписокПримечаний.ПоказатьВыборЭлемента(ВыборПримечания, "Признаки формы отчетности");
		
	КонецЕсли;
	
	Если РегламентированнаяОтчетностьКлиент.ВыбраннаяОбластьРегламентированногоОтчетаНеВерна(ЭтаФорма, Область, СтандартнаяОбработка) Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
							
		Если Лев(Область.Имя, 6) = "ТипОрг" Тогда
			
			СтандартнаяОбработка = Ложь;
						
			Если Область.Значение = "V" Тогда
				Возврат;
			КонецЕсли;
			
			Если Область.Имя = "ТипОрг1" Тогда
				Область.Значение = "V";
				ТабличныйДокумент.Области.ТипОрг2.Значение = "";
				
			КонецЕсли;
			
			Если Область.Имя = "ТипОрг2" Тогда
				Область.Значение = "V";
				ТабличныйДокумент.Области.ТипОрг1.Значение = "";
			КонецЕсли;
			
			УстановитьПримечаниеНаТитульныхЛистахГруппыАлкогольныхДеклараций();
			
		ИначеЕсли Область.Имя = "ВидДеятельности" Тогда
				
			СтандартнаяОбработка = Ложь;
			
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("Заголовок",          "Выбор вида деятельности");
			ПараметрыФормы.Вставить("ТаблицаЗначений",    мВидыДеятельности);
			ПараметрыФормы.Вставить("СтруктураДляПоиска", Новый Структура("Название", Область.Значение));
			
			ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьФормуВыбораЗначенийВидДеятельности", ЭтотОбъект);
			ОткрытьФорму("Обработка.ОбщиеОбъектыРеглОтчетности.Форма.ФормаВыбораЗначенияИзТаблицы", ПараметрыФормы, ЭтаФорма,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			
		КонецЕсли;
		
	ИначеЕсли СтруктураРеквизитовФормы.НаимТекущегоРаздела = "ФизЛица" Тогда
		
		ПолеТабличногоДокументаФизЛица = ТабличныйДокумент;
		
		Если (СтрНайти(Область.Имя, "ФизЛицИнд") > 0)
			Или (Область.Имя = "ФизЛицСубъект")
			Или (Область.Имя = "ФизЛицРайон")
			Или (Область.Имя = "ФизЛицГород")
			Или (Область.Имя = "ФизЛицС")
			Или (Область.Имя = "ФизЛицНП")
			Или (Область.Имя = "ФизЛицУлица")
			Или (Область.Имя = "ФизЛицДом")
			Или (Область.Имя = "ФизЛицКорпус")
			Или (Область.Имя = "ФизЛицКвартира") Тогда
			
			СтандартнаяОбработка = Ложь;
			
			Индекс = ПолеТабличногоДокументаФизЛица.Области.ФизЛицИнд.Значение;
			
			РоссийскийАдрес = Новый Соответствие;
			
			РоссийскийАдрес.Вставить("Индекс",	        Индекс);
			РоссийскийАдрес.Вставить("Регион",          ПолеТабличногоДокументаФизЛица.Области.ФизЛицСубъект.Значение);
			РоссийскийАдрес.Вставить("КодРегиона",      ПолеТабличногоДокументаФизЛица.Области.ФизЛицС.Значение);
			РоссийскийАдрес.Вставить("Район",           ПолеТабличногоДокументаФизЛица.Области.ФизЛицРайон.Значение);
			РоссийскийАдрес.Вставить("Город",           ПолеТабличногоДокументаФизЛица.Области.ФизЛицГород.Значение);
			РоссийскийАдрес.Вставить("НаселенныйПункт", ПолеТабличногоДокументаФизЛица.Области.ФизЛицНП.Значение);
			РоссийскийАдрес.Вставить("Улица",           ПолеТабличногоДокументаФизЛица.Области.ФизЛицУлица.Значение);
			РоссийскийАдрес.Вставить("Дом",             ПолеТабличногоДокументаФизЛица.Области.ФизЛицДом.Значение);
			РоссийскийАдрес.Вставить("Корпус",          ПолеТабличногоДокументаФизЛица.Области.ФизЛицКорпус.Значение);
			РоссийскийАдрес.Вставить("Квартира",        ПолеТабличногоДокументаФизЛица.Области.ФизЛицКвартира.Значение);
			
			ЗначенияПолей = Новый СписокЗначений;
			
			ЗначенияПолей.Добавить(РоссийскийАдрес["Индекс"],          "Индекс");
			ЗначенияПолей.Добавить(РоссийскийАдрес["Регион"],          "Регион");
			ЗначенияПолей.Добавить(РоссийскийАдрес["КодРегиона"],      "КодРегиона");
			ЗначенияПолей.Добавить(РоссийскийАдрес["Район"],           "Район");
			ЗначенияПолей.Добавить(РоссийскийАдрес["Город"],           "Город");
			ЗначенияПолей.Добавить(РоссийскийАдрес["НаселенныйПункт"], "НаселенныйПункт");
			ЗначенияПолей.Добавить(РоссийскийАдрес["Улица"],           "Улица");
			ЗначенияПолей.Добавить(РоссийскийАдрес["Дом"],             "Дом");
			ЗначенияПолей.Добавить(РоссийскийАдрес["Корпус"],          "Корпус");
			ЗначенияПолей.Добавить(РоссийскийАдрес["Квартира"],        "Квартира");
			
			ПредставлениеАдреса = РегламентированнаяОтчетностьКлиентСервер.ПредставлениеАдресаВФормате9Запятых("643," + РоссийскийАдрес["Индекс"] + ","
			+ РоссийскийАдрес["Регион"] + ","
			+ РоссийскийАдрес["Район"] + ","
			+ РоссийскийАдрес["Город"] + ","
			+ РоссийскийАдрес["НаселенныйПункт"] + ","
			+ РоссийскийАдрес["Улица"] + ","
			+ РоссийскийАдрес["Дом"] + ","
			+ РоссийскийАдрес["Корпус"] + ","
			+ РоссийскийАдрес["Квартира"]);
			
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("Заголовок",               "Ввод адреса");
			ПараметрыФормы.Вставить("ЗначенияПолей", 		   ЗначенияПолей);
			ПараметрыФормы.Вставить("Представление", 		   ПредставлениеАдреса);
			ПараметрыФормы.Вставить("ВидКонтактнойИнформации", СтруктураРеквизитовФормы.СправочникиВидыКонтактнойИнформацииПочтовыйАдресОрганизации);
			
			ДополнительныеПараметры = Новый Структура;
			ДополнительныеПараметры.Вставить("РоссийскийАдрес",  РоссийскийАдрес);
			ДополнительныеПараметры.Вставить("Группа",           "");
			ДополнительныеПараметры.Вставить("НомерСтроки",      "");
			ДополнительныеПараметры.Вставить("СтруктураГруппы",  "");
			ДополнительныеПараметры.Вставить("Показатель",       "");
			ДополнительныеПараметры.Вставить("Область",          "");
			
			ТипЗначения = Тип("ОписаниеОповещения");
			ПараметрыКонструктора = Новый Массив(3);
			ПараметрыКонструктора[0] = "ОткрытьФормуКонтактнойИнформацииЗавершение";
			ПараметрыКонструктора[1] = ЭтаФорма;
			ПараметрыКонструктора[2] = ДополнительныеПараметры;
			
			Оповещение = Новый (ТипЗначения, ПараметрыКонструктора);
			
			ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеКонтактнойИнформациейКлиент").ОткрытьФормуКонтактнойИнформации(ПараметрыФормы, , Оповещение);
			
		КонецЕсли;
		
		Модифицированность = Истина;
		          		
	ИначеЕсли СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Декларация" Тогда
		
		Если ((СтрНайти(Область.Имя, "П000000000003") > 0)
			Или (СтрНайти(Область.Имя, "П000000000002") > 0))
			И (НЕ СтруктураРеквизитовФормы.мАвтоВыборКодов) Тогда
			
			СтандартнаяОбработка = Ложь;
			НСтр = Сред(Область.Имя,15);
			ТекКод = ТабличныйДокумент.Области["П000000000003_" + НСтр].Значение;
			
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("Заголовок",          "Выбор вида алкогольной продукции");
			ПараметрыФормы.Вставить("ТаблицаЗначений",    мКодыВидовПродукции);
			ПараметрыФормы.Вставить("СтруктураДляПоиска", Новый Структура("Код", ТекКод));
			
			ДополнительныеПараметры = Новый Структура("НСтр", НСтр);
			ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьФормуВыбораЗначенийДекларацияП000000000003Завершение", ЭтотОбъект, ДополнительныеПараметры);
			ОткрытьФорму("Обработка.ОбщиеОбъектыРеглОтчетности.Форма.ФормаВыбораЗначенияИзТаблицы", ПараметрыФормы, ЭтаФорма,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			          			
		ИначеЕсли ((СтрНайти(Область.Имя, "П000000000005") > 0) Или (СтрНайти(Область.Имя, "П000010003005") > 0))
			И (НЕ СтруктураРеквизитовФормы.мАвтоВыборКодов) Тогда
			
			СтандартнаяОбработка = Ложь;
			ПервоначальноеЗначение = Область.Значение;
			
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("Заголовок",          "Выбор субъекта РФ");
			ПараметрыФормы.Вставить("ТаблицаЗначений",    мКодыСубъектовРФ);
			ПараметрыФормы.Вставить("СтруктураДляПоиска", Новый Структура("Код", ПервоначальноеЗначение));
			
			ДополнительныеПараметры = Новый Структура("Область", Область);
			ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьФормуВыбораЗначенийДекларацияП000000000005Завершение", ЭтотОбъект, ДополнительныеПараметры);
			ОткрытьФорму("Обработка.ОбщиеОбъектыРеглОтчетности.Форма.ФормаВыбораЗначенияИзТаблицы", ПараметрыФормы, ЭтаФорма,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			
		ИначеЕсли (СтрНайти(Область.Имя, "П000000000008") > 0
			Или СтрНайти(Область.Имя, "П000010003008") > 0) И (НЕ СтруктураРеквизитовФормы.мАвтоВыборКодов) Тогда
			СтандартнаяОбработка = Ложь;
			
			// Получим номер строчки ввода данных
			НомерСтроки = Сред(Область.Имя, 15);
			
			СтруктураГруппы1 = Неопределено;
			
			Если СтрНайти(Область.Имя, "П000010003008") > 0 Тогда
				Группа = СтруктураРеквизитовФормы.мИдГруппы2;
				Показатель = "П000010003008";
			Иначе
				Группа = СтруктураРеквизитовФормы.мИдГруппы1;
				Показатель = "П000000000008";
			КонецЕсли;
			
			мСтруктураМногострочныхРазделов.Свойство(Группа, СтруктураГруппы1);
			
			СтруктураГруппы1 = ЭтаФорма[СтруктураГруппы1];
			
			Адр9Зпт = СтруктураГруппы1[Число(НомерСтроки) - 1][Показатель];
			
			РоссийскийАдрес = РегламентированнаяОтчетностьКлиентСервер.РазложитьАдрес(Адр9Зпт);
			
			РоссийскийАдрес.Вставить("КодСтраны", РоссийскийАдрес["Страна"]);
			
			Если НЕ ЗначениеЗаполнено(РоссийскийАдрес["КодСтраны"]) Тогда
				РоссийскийАдрес["КодСтраны"] = "643";
			Конецесли;
			
			НаимРегиона = Регионы.НайтиСтроки(Новый Структура("Код", СокрЛП(РоссийскийАдрес["Регион"])));
				
			Если НаимРегиона.Количество() > 0 Тогда
				РоссийскийАдрес["Регион"] = НаимРегиона[0].Наим;
			КонецЕсли;
			
			РоссийскийАдрес.Вставить("КодРегиона", "");
			
			ЗначенияПолей = Новый СписокЗначений;
			
			ЗначенияПолей.Добавить(РоссийскийАдрес["КодСтраны"],       "КодСтраны");
			ЗначенияПолей.Добавить(РоссийскийАдрес["Индекс"],          "Индекс");
			ЗначенияПолей.Добавить(РоссийскийАдрес["КодРегиона"],      "КодРегиона");
			ЗначенияПолей.Добавить(РоссийскийАдрес["Регион"],          "Регион");
			ЗначенияПолей.Добавить(РоссийскийАдрес["Район"],           "Район");
			ЗначенияПолей.Добавить(РоссийскийАдрес["Город"],           "Город");
			ЗначенияПолей.Добавить(РоссийскийАдрес["НаселенныйПункт"], "НаселенныйПункт");
			ЗначенияПолей.Добавить(РоссийскийАдрес["Улица"],           "Улица");
			ЗначенияПолей.Добавить(РоссийскийАдрес["Дом"],             "Дом");
			ЗначенияПолей.Добавить(РоссийскийАдрес["Корпус"],          "Корпус");
			ЗначенияПолей.Добавить(РоссийскийАдрес["Квартира"],        "Квартира");
			
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("Заголовок",               "Ввод адреса");
			ПараметрыФормы.Вставить("ЗначенияПолей", 		   ЗначенияПолей);
			ПараметрыФормы.Вставить("Представление", 		   Адр9Зпт);
			ПараметрыФормы.Вставить("ВидКонтактнойИнформации", СтруктураРеквизитовФормы.СправочникиВидыКонтактнойИнформацииПочтовыйАдресОрганизации);
			
			ДополнительныеПараметры = Новый Структура;
			ДополнительныеПараметры.Вставить("РоссийскийАдрес", РоссийскийАдрес);
			ДополнительныеПараметры.Вставить("Группа",          Группа);
			ДополнительныеПараметры.Вставить("НомерСтроки",     НомерСтроки);
			ДополнительныеПараметры.Вставить("СтруктураГруппы", СтруктураГруппы1);
			ДополнительныеПараметры.Вставить("Показатель",      Показатель);
			ДополнительныеПараметры.Вставить("Область",         Область);
			
			ТипЗначения = Тип("ОписаниеОповещения");
			ПараметрыКонструктора = Новый Массив(3);
			ПараметрыКонструктора[0] = "ОткрытьФормуКонтактнойИнформацииЗавершение";
			ПараметрыКонструктора[1] = ЭтаФорма;
			ПараметрыКонструктора[2] = ДополнительныеПараметры;
			
			Оповещение = Новый (ТипЗначения, ПараметрыКонструктора);
			
			ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеКонтактнойИнформациейКлиент").ОткрытьФормуКонтактнойИнформации(ПараметрыФормы, , Оповещение);
			
		КонецЕсли;
		
		Модифицированность = Истина;
		
	ИначеЕсли СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Возвраты" Тогда	
		
		Если ((СтрНайти(Область.Имя, "П000010000002") > 0)
			Или  (СтрНайти(Область.Имя, "П000010000003") > 0))
			И (НЕ СтруктураРеквизитовФормы.мАвтоВыборКодов) Тогда
			
			СтандартнаяОбработка = Ложь;
			НСтр = Сред(Область.Имя,15);
			ТекКод = ТабличныйДокумент.Области["П000010000003_" + НСтр].Значение;
			
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("Заголовок",          "Выбор вида алкогольной продукции");
			ПараметрыФормы.Вставить("ТаблицаЗначений",    мКодыВидовПродукции);
			ПараметрыФормы.Вставить("СтруктураДляПоиска", Новый Структура("Код", ТекКод));
			ДополнительныеПараметры = Новый Структура("НСтр", НСтр);
			ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьФормуВыбораЗначенийВозвратыЗавершение", ЭтотОбъект, ДополнительныеПараметры);
			ОткрытьФорму("Обработка.ОбщиеОбъектыРеглОтчетности.Форма.ФормаВыбораЗначенияИзТаблицы", ПараметрыФормы, ЭтаФорма,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			
		ИначеЕсли ((СтрНайти(Область.Имя, "П000010000005") > 0) Или (СтрНайти(Область.Имя, "П000010001005") > 0))
			И (НЕ СтруктураРеквизитовФормы.мАвтоВыборКодов) Тогда
			
			СтандартнаяОбработка = Ложь;
			ПервоначальноеЗначение = Область.Значение;
			
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("Заголовок",          "Выбор субъекта РФ");
			ПараметрыФормы.Вставить("ТаблицаЗначений",    мКодыСубъектовРФ);
			ПараметрыФормы.Вставить("СтруктураДляПоиска", Новый Структура("Код", ПервоначальноеЗначение));
			ДополнительныеПараметры = Новый Структура("Область", Область);
			ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьФормуВыбораЗначенийП000010000005Завершение", ЭтотОбъект, ДополнительныеПараметры);
			ОткрытьФорму("Обработка.ОбщиеОбъектыРеглОтчетности.Форма.ФормаВыбораЗначенияИзТаблицы", ПараметрыФормы, ЭтаФорма,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			
		ИначеЕсли ((СтрНайти(Область.Имя, "П000010000008") > 0)
			Или (СтрНайти(Область.Имя, "П000010001008") > 0)) И (НЕ СтруктураРеквизитовФормы.мАвтоВыборКодов) Тогда
			СтандартнаяОбработка = Ложь;
			
			// Получим номер строчки ввода данных
			НомерСтроки = Сред(Область.Имя, 15);
			
			СтруктураГруппы3 = Неопределено;
			
			Если СтрНайти(Область.Имя, "П000010001008") > 0 Тогда
				Группа = СтруктураРеквизитовФормы.мИдГруппы4;
				Показатель = "П000010001008";
			Иначе
				Группа = СтруктураРеквизитовФормы.мИдГруппы3;
				Показатель = "П000010000008";
			КонецЕсли;
			
			мСтруктураМногострочныхРазделов.Свойство(Группа, СтруктураГруппы3);
			
			СтруктураГруппы3 = ЭтаФорма[СтруктураГруппы3];
			
			Адр9Зпт = СтруктураГруппы3[Число(НомерСтроки) - 1][Показатель];
			
			РоссийскийАдрес = РегламентированнаяОтчетностьКлиентСервер.РазложитьАдрес(Адр9Зпт);
			
			РоссийскийАдрес.Вставить("КодСтраны", РоссийскийАдрес["Страна"]);
			
			Если НЕ ЗначениеЗаполнено(РоссийскийАдрес["КодСтраны"]) Тогда
				РоссийскийАдрес["КодСтраны"] = "643";
			Конецесли;
			
			НаимРегиона = Регионы.НайтиСтроки(Новый Структура("Код", СокрЛП(РоссийскийАдрес["Регион"])));
				
			Если НаимРегиона.Количество() > 0 Тогда
				РоссийскийАдрес["Регион"] = НаимРегиона[0].Наим;
			КонецЕсли;
			
			РоссийскийАдрес.Вставить("КодРегиона", "");
			
			ЗначенияПолей = Новый СписокЗначений;
			
			ЗначенияПолей.Добавить(РоссийскийАдрес["КодСтраны"],       "КодСтраны");
			ЗначенияПолей.Добавить(РоссийскийАдрес["Индекс"],          "Индекс");
			ЗначенияПолей.Добавить(РоссийскийАдрес["Регион"],          "Регион");
			ЗначенияПолей.Добавить(РоссийскийАдрес["КодРегиона"],      "КодРегиона");
			ЗначенияПолей.Добавить(РоссийскийАдрес["Район"],           "Район");
			ЗначенияПолей.Добавить(РоссийскийАдрес["Город"],           "Город");
			ЗначенияПолей.Добавить(РоссийскийАдрес["НаселенныйПункт"], "НаселенныйПункт");
			ЗначенияПолей.Добавить(РоссийскийАдрес["Улица"],           "Улица");
			ЗначенияПолей.Добавить(РоссийскийАдрес["Дом"],             "Дом");
			ЗначенияПолей.Добавить(РоссийскийАдрес["Корпус"],          "Корпус");
			ЗначенияПолей.Добавить(РоссийскийАдрес["Квартира"],        "Квартира");
			
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("Заголовок",               "Ввод адреса");
			ПараметрыФормы.Вставить("ЗначенияПолей", 		   ЗначенияПолей);
			ПараметрыФормы.Вставить("Представление", 		   Адр9Зпт);
			ПараметрыФормы.Вставить("ВидКонтактнойИнформации", СтруктураРеквизитовФормы.СправочникиВидыКонтактнойИнформацииПочтовыйАдресОрганизации);
			
			ДополнительныеПараметры = Новый Структура;
			ДополнительныеПараметры.Вставить("РоссийскийАдрес", РоссийскийАдрес);
			ДополнительныеПараметры.Вставить("Группа",          Группа);
			ДополнительныеПараметры.Вставить("НомерСтроки",     НомерСтроки);
			ДополнительныеПараметры.Вставить("СтруктураГруппы", СтруктураГруппы3);
			ДополнительныеПараметры.Вставить("Показатель",      Показатель);
			ДополнительныеПараметры.Вставить("Область",         Область);
			
			ТипЗначения = Тип("ОписаниеОповещения");
			ПараметрыКонструктора = Новый Массив(3);
			ПараметрыКонструктора[0] = "ОткрытьФормуКонтактнойИнформацииЗавершение";
			ПараметрыКонструктора[1] = ЭтаФорма;
			ПараметрыКонструктора[2] = ДополнительныеПараметры;
			
			Оповещение = Новый (ТипЗначения, ПараметрыКонструктора);
			
			ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеКонтактнойИнформациейКлиент").ОткрытьФормуКонтактнойИнформации(ПараметрыФормы, , Оповещение);
			
		КонецЕсли;
		
		Модифицированность = Истина;
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораЗначенийВозвратыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	НСтр = ДополнительныеПараметры.НСтр;
	
	Если Результат <> Неопределено Тогда
		
		Если НЕ ЗначениеЗаполнено(Результат["Код"]) Тогда
			
			ТабличныйДокумент.Области["П000010000002_" + НСтр].Значение = "";
			ТабличныйДокумент.Области["П000010000003_" + НСтр].Значение = "";
			
		Иначе
			
			ТабличныйДокумент.Области["П000010000002_" + НСтр].Значение = Результат["Название"];
			ТабличныйДокумент.Области["П000010000003_" + НСтр].Значение = Результат["Код"];
			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораЗначенийП000010000005Завершение(Результат, ДополнительныеПараметры) Экспорт
	
	Область = ДополнительныеПараметры.Область;
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Область.Значение = Результат["Код"];
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораЗначенийДекларацияП000000000005Завершение(Результат, ДополнительныеПараметры) Экспорт
	
	Область = ДополнительныеПараметры.Область;
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Область.Значение = Результат["Код"];
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораЗначенийДекларацияП000000000003Завершение(Результат, ДополнительныеПараметры) Экспорт
	
	НСтр = ДополнительныеПараметры.НСтр;
	
	Если Результат <> Неопределено Тогда
		
		Если НЕ ЗначениеЗаполнено(Результат["Код"]) Тогда
			
			ТабличныйДокумент.Области["П000000000002_" + НСтр].Значение = "";
			ТабличныйДокумент.Области["П000000000003_" + НСтр].Значение = "";
			
		Иначе
			
			ТабличныйДокумент.Области["П000000000002_" + НСтр].Значение = Результат["Название"];
			ТабличныйДокумент.Области["П000000000003_" + НСтр].Значение = Результат["Код"];
			
		КонецЕсли;
		
	Конецесли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораЗначенийВидДеятельности(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		
		Если НЕ ЗначениеЗаполнено(Результат["Код"]) Тогда
			ТабличныйДокумент.Области.ВидДеятельности.Значение = "";
			СтруктураРеквизитовФормы.мВидДеят = "";
		Иначе
			ТабличныйДокумент.Области.ВидДеятельности.Значение = Результат["Название"];
			СтруктураРеквизитовФормы.мВидДеят = Результат["Код"];
		КонецЕсли;
		
	Конецесли;

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуКонтактнойИнформацииЗавершение(Результат, Параметры) Экспорт
	
	ОбновитьАдресВТабличномДокументе(Результат, Параметры.РоссийскийАдрес, Параметры.Группа, Параметры.НомерСтроки, Параметры.СтруктураГруппы, Параметры.Показатель, Параметры.Область);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьАдресВТабличномДокументе(Результат, РоссийскийАдрес, Группа = "", НомерСтроки = "", СтруктураГруппы = "", Показатель = "", Область = "")
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		
		// Обход ошибки платформы: в веб-клиенте, в результате выполнения процедуры "СформироватьАдрес"
		// общего модуля "РегламентированнаяОтчетностьВызовСервера", не изменяются значения ключей
		// соответствия "РоссийскийАдрес", передаваемого в качестве параметра.
		РоссийскийАдрес_ = РоссийскийАдрес;
		
		РегламентированнаяОтчетностьВызовСервера.СформироватьАдрес(Результат.КонтактнаяИнформация, РоссийскийАдрес_);
		
		Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "ФизЛица" Тогда
			
			ТабличныйДокумент.Области.ФизЛицИнд.Значение      = РоссийскийАдрес_["Индекс"];
			ТабличныйДокумент.Области.ФизЛицС.Значение        = РоссийскийАдрес_["КодРегиона"];
			ТабличныйДокумент.Области.ФизЛицСубъект.Значение  = РоссийскийАдрес_["Регион"];
			ТабличныйДокумент.Области.ФизЛицРайон.Значение    = РоссийскийАдрес_["Район"];
			ТабличныйДокумент.Области.ФизЛицГород.Значение    = РоссийскийАдрес_["Город"];
			ТабличныйДокумент.Области.ФизЛицНП.Значение       = РоссийскийАдрес_["НаселенныйПункт"];
			ТабличныйДокумент.Области.ФизЛицУлица.Значение    = РоссийскийАдрес_["Улица"];
			ТабличныйДокумент.Области.ФизЛицДом.Значение      = РоссийскийАдрес_["Дом"];
			ТабличныйДокумент.Области.ФизЛицКорпус.Значение   = РоссийскийАдрес_["Корпус"];
			ТабличныйДокумент.Области.ФизЛицКвартира.Значение = РоссийскийАдрес_["Квартира"];
			
		ИначеЕсли СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Декларация"
			  ИЛИ СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Возвраты" Тогда	
			
			Если РоссийскийАдрес_["КодСтраны"] = "643" Тогда
				Защитить = Ложь;
			Иначе
				Защитить = Истина;
			КонецЕсли;
			
			ОперацияНадСтрокойМногострочногоБлока(ЭтаФорма, Группа, Защитить, НомерСтроки, Истина);
			
			ПолученныйАдрес = РоссийскийАдрес_["КодСтраны"] + ","
			+ РоссийскийАдрес_["Индекс"] + ","
			+ РоссийскийАдрес_["КодРегиона"] + ","
			+ РоссийскийАдрес_["Район"] + ","
			+ РоссийскийАдрес_["Город"] + ","
			+ РоссийскийАдрес_["НаселенныйПункт"] + ","
			+ РоссийскийАдрес_["Улица"] + ","
			+ РоссийскийАдрес_["Дом"] + ","
			+ РоссийскийАдрес_["Корпус"] + ","
			+ РоссийскийАдрес_["Квартира"];
			
			Если ПолученныйАдрес = ",,,,,,,,," Тогда
				ПолученныйАдрес = "";
			КонецЕсли;
			      			
			// В табл. запишем адрес для выгрузки, а на лист - адрес для пользователя.
			СтруктураГруппы[Число(НомерСтроки) - 1][Показатель] = ПолученныйАдрес;
						
			// Запишем на лист адрес для пользователя.
			Область.Значение = РегламентированнаяОтчетностьКлиентСервер.ПредставлениеАдресаВФормате9Запятых(ПолученныйАдрес, Истина);
			
		КонецЕсли;
		
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьОтчет(Команда)
	
	Если Элементы.РазделыОтчета.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СохранитьНаКлиенте();
	
КонецПроцедуры

// СохранитьНаКлиенте()
//
&НаКлиенте
Процедура СохранитьНаКлиенте(Автосохранение = Ложь, ВыполняемоеОповещение = Неопределено) Экспорт
	
	Вариант = СтруктураРеквизитовФормы.ВидДокумента * НомерКорректировки;

	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
		КодИФНС = ТабличныйДокумент.Области.КодИМНС.Значение;
		КПП = ТабличныйДокумент.Области.КПП1.Значение;
	Иначе	
		КодИФНС = ЭтаФорма[мСтруктураМногостраничныхРазделов.Титульный][0].Данные[0].Значение.КодИМНС;
		КПП = ЭтаФорма[мСтруктураМногостраничныхРазделов.Титульный][0].Данные[0].Значение.КПП1;
	КонецЕсли;
                       
	Если НЕ РегламентированнаяОтчетностьКлиент.ПриЗаписиРегламентированногоОтчетаНаКлиенте(ЭтаФорма, КодИФНС, Автосохранение, Вариант) Тогда
		Возврат;
	КонецЕсли;
	
	ПодобныйОтчетСуществует = Ложь;
	ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки = Ложь;
	
	Если Элементы.РазделыОтчета.ТекущиеДанные = Неопределено Тогда
		НаименованиеТекущегоРаздела = СтруктураРеквизитовФормы.НаимТекущегоРаздела;
	Иначе
		НаименованиеТекущегоРаздела = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
	КонецЕсли;
	
	РезультатСохранения = ПередСохранением(КодИФНС, КПП, ПодобныйОтчетСуществует, Вариант, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, Автосохранение, НаименованиеТекущегоРаздела);
	
	ВидДокументаНомерКорректировкиИзменен = Неопределено;
	
	Если ПодобныйОтчетСуществует И Автосохранение Тогда
		Возврат;
	КонецЕсли;
	
	НуженВопросПередСохранением = (ПодобныйОтчетСуществует ИЛИ ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки);
	
	Если НуженВопросПередСохранением Тогда
		
		СохранитьНаКлиентеСВопросом(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, ПодобныйОтчетСуществует, КодИФНС, КПП);
		
	Иначе
		
		ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНаКлиентеСВопросом(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, ПодобныйОтчетСуществует, КодИФНС, КПП)
	
	Если ПодобныйОтчетСуществует Тогда
		
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(КодВозвратаДиалога.Да, "Сохранить");
		Кнопки.Добавить(КодВозвратаДиалога.Нет, "Отмена");
		
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Отчет с видом %1 уже существует.
			|Сохранить отчет с таким же видом?'"), ?(Вариант = 0, """Первичный""", """Корректирующий/" + Вариант + """"));
		ДополнительныеПараметры = Новый Структура("Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, КодИФНС, КПП", Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, КодИФНС, КПП);
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросСохранитьОтчетСТакимЖеВидомЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, Кнопки, , Кнопки.Получить(1).Значение);
		
	Иначе
		
		СохранитьНаКлиентеСВопросомПродолжение(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки,КодИФНС, КПП);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросСохранитьОтчетСТакимЖеВидомЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Автосохранение = ДополнительныеПараметры.Автосохранение;
	Вариант = ДополнительныеПараметры.Вариант;
	ВыполняемоеОповещение = ДополнительныеПараметры.ВыполняемоеОповещение;
	КодИФНС = ДополнительныеПараметры.КодИФНС;
	КПП = ДополнительныеПараметры.КПП;
	ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки = ДополнительныеПараметры.ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки;
	
	Ответ = РезультатВопроса;
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	СохранитьНаКлиентеСВопросомПродолжение(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки,КодИФНС, КПП);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНаКлиентеСВопросомПродолжение(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, КодИФНС, КПП)
	
	Если ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки Тогда
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("ВидОтчета", Вариант);
		
		ФормаВопроса = РегламентированнаяОтчетностьКлиент.ПолучитьОбщуюФормуПоИмени("ВопросПриИзмененииВидаДокументаНомераКорректировки", ПараметрыФормы);
		ФормаВопроса.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		ДополнительныеПараметры = Новый Структура("Автосохранение, Вариант, ВыполняемоеОповещение, КодИФНС, КПП", Автосохранение, Вариант, ВыполняемоеОповещение,КодИФНС, КПП );
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросПриИзмененииВидаДокументаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ФормаВопроса.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
		ФормаВопроса.Открыть();
	Иначе
		Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Сохраняется %1...'"), ЭтаФорма.Заголовок), , , БиблиотекаКартинок.Записать);
		РезультатСохранения = Сохранить(Автосохранение, КодИФНС, КПП, Вариант, Неопределено, Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
		ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПриИзмененииВидаДокументаЗавершение(КодВозврата, ДополнительныеПараметры) Экспорт
	
	Автосохранение = ДополнительныеПараметры.Автосохранение;
	Вариант = ДополнительныеПараметры.Вариант;
	ВыполняемоеОповещение = ДополнительныеПараметры.ВыполняемоеОповещение;
	КодИФНС = ДополнительныеПараметры.КодИФНС;
	КПП = ДополнительныеПараметры.КПП;
	Если КодВозврата = КодВозвратаДиалога.Да
		ИЛИ КодВозврата = КодВозвратаДиалога.Нет Тогда
		ВидДокументаНомерКорректировкиИзменен = ?(КодВозврата = КодВозвратаДиалога.Да, Истина, Ложь);
	Иначе
		Возврат;
	КонецЕсли;
	
	Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Сохраняется %1...'"), ЭтаФорма.Заголовок), , , БиблиотекаКартинок.Записать);
	РезультатСохранения = Сохранить(Автосохранение, КодИФНС, КПП, Вариант, ВидДокументаНомерКорректировкиИзменен, Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
	ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения)
	
	КлючУникальности = СтруктураРеквизитовФормы.мСохраненныйДок;
	
	Если РезультатСохранения Тогда
		
		РегламентированнаяОтчетностьКлиент.ПослеЗаписиРегламентированногоОтчета(ЭтаФорма);
		
		Если ВыполняемоеОповещение <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ВыполняемоеОповещение);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПередСохранением(КодИФНС, КПП, ПодобныйОтчетСуществует, Вариант, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, Автосохранение, НаимТекРаздела)
	
	Если РегламентированнаяОтчетность.БылиИзмененыКлючевыеРеквизитыОтчета(ЭтаФорма, КодИФНС, КПП)
	   И РегламентированнаяОтчетность.СуществуетДокументСАналогичнымиРеквизитами(ЭтаФорма, КодИФНС) Тогда
		
		ПодобныйОтчетСуществует = Истина;
		
	КонецЕсли;
	
	СтруктураРеквизитовФормы.мЗаписываетсяНовыйДокумент = (СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено ИЛИ СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено);
	
	Если Вариант <> Неопределено И ((СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено) ИЛИ (СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено) ИЛИ (Вариант <> СтруктураРеквизитовФормы.мВариант)) Тогда
		
		Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено ИЛИ СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено Тогда
						
		ИначеЕсли Вариант <> СтруктураРеквизитовФормы.мВариант Тогда
			
			ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки = Истина;
								
		КонецЕсли;

	КонецЕсли;
	
	Если ПодобныйОтчетСуществует
	 ИЛИ ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки Тогда
	 
	 	Возврат Ложь;
		
 	КонецЕсли;
		
	Возврат Сохранить(Автосохранение, КодИФНС, КПП, Вариант, , НаимТекРаздела);
		
КонецФункции

&НаСервере
Функция Сохранить(Автосохранение = Ложь, КодИФНС, КПП, Вариант, ВидДокументаНомерКорректировкиИзменен = Неопределено, НаимТекРаздела) Экспорт
	
	ДанныеДляРазблокирования = Неопределено;
	
	Если НЕ СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
		Если НЕ СтруктураРеквизитовФормы.мБезОткрытияФормы Тогда
			ДанныеДляРазблокирования = Новый Структура("Ключ,ИдФормы",
			СтруктураРеквизитовФормы.мСохраненныйДок, ЭтаФорма.УникальныйИдентификатор);
		КонецЕсли;
		СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.ПолучитьОбъект();
	КонецЕсли;
	
	Если НЕ РегламентированнаяОтчетность.ПриЗаписиРегламентированногоОтчетаНаСервере(ЭтаФорма, КодИФНС, Автосохранение, Вариант, ВидДокументаНомерКорректировкиИзменен, СтруктураРеквизитовФормы.мСохраненныйДок) Тогда
		СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
		Возврат Ложь;
	КонецЕсли;

	// установим текущие значения реквизитов документа	
	СтруктураРеквизитовФормы.мСохраненныйДок.ИсточникОтчета           = Метаданные.Отчеты[Сред(Лев(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, ".Форма.") - 1), 7)].Имя;
	СтруктураРеквизитовФормы.мСохраненныйДок.НаименованиеОтчета       = Метаданные.Отчеты[Сред(Лев(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, ".Форма.") - 1), 7)].ОсновнаяФорма.Синоним;
	СтруктураРеквизитовФормы.мСохраненныйДок.ДатаНачала               = СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета;
	СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания            = СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета;
	СтруктураРеквизитовФормы.мСохраненныйДок.Комментарий              = Комментарий;
	СтруктураРеквизитовФормы.мСохраненныйДок.Периодичность            = СтруктураРеквизитовФормы.мПериодичность;
	СтруктураРеквизитовФормы.мСохраненныйДок.ВыбраннаяФорма           = СтруктураРеквизитовФормы.мВыбраннаяФорма;
	СтруктураРеквизитовФормы.мСохраненныйДок.Организация              = СтруктураРеквизитовФормы.Организация;
	СтруктураРеквизитовФормы.мСохраненныйДок.ДатаПодписи              = ДатаПодписи;
	СтруктураРеквизитовФормы.мСохраненныйДок.ВидОтчетности            = Перечисления.ВидыОтчетности.РегламентированнаяОтчетность;
	СтруктураРеквизитовФормы.мСохраненныйДок.КодНалоговогоОргана      = КодИФНС;
	СтруктураРеквизитовФормы.мСохраненныйДок.КПП        			  = КПП;
	СтруктураРеквизитовФормы.мСохраненныйДок.Вид                      = Вариант;
	СтруктураРеквизитовФормы.мСохраненныйДок.ПредставлениеВида        = РегламентированнаяОтчетность.ПредставлениеВидаДокумента(СтруктураРеквизитовФормы.мСохраненныйДок.Вид);
	СтруктураРеквизитовФормы.мВариант 								  = Вариант;

	СтруктураРеквизитовФормы.мСохраненныйДок.ФорматВыгрузки = "Автоматически";
	
	СохранитьДанныеРаздела(НаимТекРаздела, Ложь, Ложь);
	
	ЗаполнитьПустыеСтруктурыДанных();
		
	// формируем данные редактируемых ячеек таблицы
	ПоказателиОтчета = Новый Структура();

	ЗаполнитьПоказателиОтчетаНаСервере(ПоказателиОтчета);
	
	// формируем список сохранения
	СписокСохранения = Новый Структура();
	
	// вставляем данные редактируемых ячеек таблицы	
	СписокСохранения.Вставить("ПоказателиОтчета", ПоказателиОтчета);
    	
	ДанныеМногострочныхРазделов = Новый Структура;
	
	Для Каждого ЭлементСтруктуры Из мСтруктураМногострочныхРазделов Цикл
		
		ДанныеМногострочныхРазделов.Вставить(ЭлементСтруктуры.Ключ, ДанныеФормыВЗначение(ЭтаФорма[ЭлементСтруктуры.Значение], Тип("ТаблицаЗначений")));
		
	КонецЦикла;
	
	// вставляем данные многострочных разделов
	СписокСохранения.Вставить("ДанныеМногострочныхРазделов", ДанныеМногострочныхРазделов);
	
	ДанныеМногостраничныхРазделов = Новый Структура;
	
	МассивТиповНеопределено = Новый Массив;
	МассивТиповНеопределено.Добавить(Тип("Неопределено"));
	ОписаниеТиповНеопределено = Новый ОписаниеТипов(МассивТиповНеопределено);
		
	Для Каждого ЭлементСтруктуры Из мСтруктураМногостраничныхРазделов Цикл
		
		ДанныеМногостраничныхРазделов.Вставить(ЭлементСтруктуры.Ключ, ДанныеФормыВЗначение(ЭтаФорма[ЭлементСтруктуры.Значение], Тип("ТаблицаЗначений")));
		
		ТаблЗнач = Неопределено;
		
		Если ДанныеМногостраничныхРазделов.Свойство(ЭлементСтруктуры.Ключ, ТаблЗнач) Тогда
						
			Если НЕ ТаблЗнач.Колонки.Найти("Данные") = Неопределено Тогда
												
				ТаблЗнач.Колонки.Удалить("Данные");
				ТаблЗнач.Колонки.Добавить("Данные", ОписаниеТиповНеопределено);
				
				Ном = 0;
				
				Для Каждого СтрокаТаблЗнач Из ТаблЗнач Цикл
					
					СтрокаТаблЗнач.Данные = ЭтаФорма[ЭлементСтруктуры.Значение][Ном].Данные[0].Значение;
					
					Ном = Ном + 1;
					
				КонецЦикла;
				
			КонецЕсли;
						
			Если НЕ ТаблЗнач.Колонки.Найти("ДанныеДопСтрок") = Неопределено Тогда
															
				ТаблЗнач.Колонки.Удалить("ДанныеДопСтрок");
				ТаблЗнач.Колонки.Добавить("ДанныеДопСтрок", ОписаниеТиповНеопределено);
				
				Ном = 0;
				
				Для Каждого СтрокаТаблЗнач Из ТаблЗнач Цикл
						
					Если (ЭтаФорма[ЭлементСтруктуры.Значение][Ном].ДанныеДопСтрок.Количество() > 0)
					   И (ЭтаФорма[ЭлементСтруктуры.Значение][Ном].ДанныеДопСтрок[0].Представление = "ДанныеФормыКоллекцияТаблицаДопСтрокРаздела") Тогда
																			
						СтрокаТаблЗнач.ДанныеДопСтрок = ДанныеФормыВЗначение(ЭтаФорма[ЭлементСтруктуры.Значение][Ном].ДанныеДопСтрок[0].Значение, Тип("ТаблицаЗначений"));
						
						Ном = Ном + 1;
						
						Продолжить;
							
					КонецЕсли;
					
					СтруктураДанныхДопСтрок = Новый Структура;
					
					Для Каждого ЭлСтруктуры Из ЭтаФорма[ЭлементСтруктуры.Значение][Ном].ДанныеДопСтрок Цикл
														
						СтруктураДанныхДопСтрок.Вставить(ДанныеФормыВЗначение(ЭлСтруктуры.Значение, Тип("ТаблицаЗначений")));	
							
					КонецЦикла;
					
					СтрокаТаблЗнач.ДанныеДопСтрок = СтруктураДанныхДопСтрок;
			
					Ном = Ном + 1;
								
				КонецЦикла;
				
			КонецЕсли;
						
		КонецЕсли;
				
	КонецЦикла;
		
	// вставляем данные многостраничных разделов
	СписокСохранения.Вставить("ДанныеМногостраничныхРазделов", ДанныеМногостраничныхРазделов);
                        	
	ДанныеВариантовАвтоЗаполнения = Новый Структура;
	
	Для Каждого ЭлементСтруктуры Из мСтруктураВариантыЗаполнения Цикл
		
		МассивТаблЗнач = Новый Массив;
		
		ДанныеВариантовАвтоЗаполнения.Вставить(ЭлементСтруктуры.Ключ, МассивТаблЗнач);
			
		Для Каждого ЭлементМассива Из ЭтаФорма["ТаблицаВариантыЗаполнения" + ЭлементСтруктуры.Ключ] Цикл
			
			МассивТаблЗнач.Добавить(ДанныеФормыВЗначение(ЭлементМассива.ТаблицаВариантовЗаполнения, Тип("ТаблицаЗначений")));
			
		КонецЦикла;
			
	КонецЦикла;
	
	// вставляем данные вариантов автозаполнения ячеек
	СписокСохранения.Вставить("ДанныеВариантовАвтоЗаполнения", ДанныеВариантовАвтоЗаполнения);

	// вствляем версию формы
	СписокСохранения.Вставить("ВерсияФормы", СтруктураРеквизитовФормы.мВерсияФормы);
	
	// вствляем флажок пересчета страниц
	СписокСохранения.Вставить("ФлПодсчетСтраниц", СтруктураРеквизитовФормы.мСчетчикСтраниц);
    	
	// вствляем флажок отключения
	СписокСохранения.Вставить("ФлОтклВыборЗначений", СтруктураРеквизитовФормы.мАвтоВыборКодов);
	
	СписокСохранения.Вставить("Автозаполнение", СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);
	
	СписокСохранения.Вставить("ПриПечатиГруппироватьПоКодам", ПриПечатиГруппироватьПоКодам);
	
	СписокСохранения.Вставить("Представляется", Представляется);
	
	ХранилищеДанных = Новый ХранилищеЗначения(СписокСохранения);
	СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета = ХранилищеДанных;
	
	// записываем документ, хранящий данные отчета
	Попытка
		СтруктураРеквизитовФормы.мСохраненныйДок.Записать();
	Исключение
		Если НЕ Автосохранение Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), РегламентированнаяОтчетностьКлиентСервер.СформироватьТекстСообщения(ОписаниеОшибки()));
			Сообщение.Сообщить();
		КонецЕсли;
		СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
		Возврат Ложь;
	КонецПопытки;
	
	СохранитьДеревоСтраницОтчета(СтруктураРеквизитовФормы.мСохраненныйДок);
	
	Модифицированность = Ложь;
	
	СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
	
	Если НЕ СтруктураРеквизитовФормы.мБезОткрытияФормы
       И НЕ СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
				   
    	ЗаблокироватьДанныеДляРедактирования(СтруктураРеквизитовФормы.мСохраненныйДок, , ЭтаФорма.УникальныйИдентификатор);

    КонецЕсли;
	
	Если ДанныеДляРазблокирования <> Неопределено Тогда
		РазблокироватьДанныеДляРедактирования(ДанныеДляРазблокирования.Ключ, ДанныеДляРазблокирования.ИдФормы);
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьПоказателиОтчетаНаСервере(ПоказателиОтчета)
	
	Префикс = "ПолеТабличногоДокумента";
	
	Для Каждого Раздел Из мСвойстваРазделовДекларации.ПолучитьЭлементы() Цикл
			
		Если НЕ Раздел.МногостраничностьВРазделе Тогда
			ПоказателиОтчета.Вставить(Префикс + Раздел.ИмяСтраницы, ЭтаФорма["СтруктураДанных" + Раздел.ИмяСтраницы]);
		КонецЕсли;
	
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьСохраненныеДанные()
	Перем ДанныеМногострочныхРазделов;
	Перем ДанныеМногостраничныхРазделов;
	Перем ДанныеВариановАвтоЗаполнения;
	Перем ПоказателиОтчета;
	Перем ВерсияФормы;
	Перем Автозаполнение;
	Перем ТаблицаМногостраничногоДокумента;

	// В случае, если формы была скопирована по F9, то проверим, не изменилась ли организация.
	Если СтруктураРеквизитовФормы.Организация <> СтруктураРеквизитовФормы.мСохраненныйДок.Организация
	   И СтруктураРеквизитовФормы.Организация <> РегламентированнаяОтчетностьКлиентСервер.ПустоеЗначениеТипа("СправочникСсылка.Организации")
	   И СтруктураРеквизитовФормы.Организация <> Неопределено Тогда
		СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация = Истина;
	Иначе
		// восстанавливаем реквизиты отчета
		СтруктураРеквизитовФормы.Организация = СтруктураРеквизитовФормы.мСохраненныйДок.Организация;
	КонецЕсли;
	
	ДатаПодписи	= СтруктураРеквизитовФормы.мСохраненныйДок.ДатаПодписи;
	Комментарий	= СтруктураРеквизитовФормы.мСохраненныйДок.Комментарий;

	// восстанавливаем сохраненные данные отчета
	СписокСохранения = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить();

	// список листов, выводимых на печать
	ДеревоНастройкиСтраниц = СтруктураРеквизитовФормы.мСохраненныйДок.ДеревоНастройкиСтраниц.Получить();
	
	// Установим актуальные представления разделов.
	Если НЕ ДеревоНастройкиСтраниц = Неопределено Тогда
		
		Для Каждого СтрокаДерева Из ДеревоНастройкиСтраниц.Строки Цикл
			Счетчик = ?(Счетчик = Неопределено, 0, Счетчик);
			ЭлементмДеревоСтраницОтчета = мДеревоСтраницОтчета.ПолучитьЭлементы().Получить(Счетчик);
			Если СтрокаДерева.ИмяСтраницы = ЭлементмДеревоСтраницОтчета.ИмяСтраницы Тогда
				Если НЕ СтрокаДерева.Представление = ЭлементмДеревоСтраницОтчета.Представление Тогда
					СтрокаДерева.Представление = ЭлементмДеревоСтраницОтчета.Представление;
				КонецЕсли;
			Иначе
				Продолжить;
			КонецЕсли;
			Счетчик = Счетчик + 1;
		КонецЦикла;
		
		ЗначениеВРеквизитФормы(ДеревоНастройкиСтраниц.Скопировать(), "мДеревоСтраницОтчета");
		
	КонецЕсли;

	// восстанавливаем сохраненные данные вариантов автозаполнения ячеек
	Если СписокСохранения.Свойство("ДанныеВариантовАвтоЗаполнения", ДанныеВариановАвтоЗаполнения) Тогда
		
		Если НЕ ДанныеВариановАвтоЗаполнения = Неопределено Тогда
			
			мСтруктураВариантыЗаполнения.Очистить();
			
			Для Каждого ЭлементСтруктуры Из ДанныеВариановАвтоЗаполнения Цикл
				
				мСтруктураВариантыЗаполнения.Вставить(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Ключ);
				
				ЭтаФорма["ТаблицаВариантыЗаполнения" + ЭлементСтруктуры.Ключ].Очистить();
				
				Для Каждого ЭлементМассива Из ЭлементСтруктуры.Значение Цикл
										
					ТаблВарЗаполнения = ЭтаФорма["ТаблицаВариантыЗаполнения" + ЭлементСтруктуры.Ключ].Добавить().ТаблицаВариантовЗаполнения;
										
					ЗначениеВДанныеФормы(ЭлементМассива, ТаблВарЗаполнения);
					
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// восстановим сохраненные данные редактируемых ячеек
	СписокСохранения.Свойство( "ПоказателиОтчета", ПоказателиОтчета );
			
	// восстанавливаем сохраненные данные многострочных разделов
	Если СписокСохранения.Свойство( "ДанныеМногострочныхРазделов", ДанныеМногострочныхРазделов) Тогда
		
		Для Каждого ЭлементСтруктуры Из ДанныеМногострочныхРазделов Цикл
			
			НайденноеЗначение = Неопределено;
			
			мСтруктураМногострочныхРазделов.Свойство(ЭлементСтруктуры.Ключ, НайденноеЗначение);
			
			Если НЕ НайденноеЗначение = Неопределено Тогда
				
				ЗначениеВДанныеФормы(ЭлементСтруктуры.Значение, ЭтаФорма[НайденноеЗначение])
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если СписокСохранения.Свойство("ДанныеМногостраничныхРазделов", ДанныеМногостраничныхРазделов) Тогда
		
		Для Каждого ЭлементСтруктуры Из ДанныеМногостраничныхРазделов Цикл
					
			НайденноеЗначение = Неопределено;
			
			мСтруктураМногостраничныхРазделов.Свойство(ЭлементСтруктуры.Ключ, НайденноеЗначение);
			
			Если НЕ НайденноеЗначение = Неопределено Тогда
				
				НайденноеЗначение = ЭтаФорма[НайденноеЗначение];
				
				ЗначениеВДанныеФормы(ЭлементСтруктуры.Значение, НайденноеЗначение);
									 				
				Если НайденноеЗначение[0].Свойство("Данные") Тогда
					
					Для Каждого СтрокаТаблЗнач Из НайденноеЗначение Цикл
						
						Если ТипЗнч(СтрокаТаблЗнач.Данные) = Тип("СписокЗначений") Тогда
							
							СтрокаТаблЗнач.Данные.Очистить();
							СтрокаТаблЗнач.Данные.Добавить(ЭлементСтруктуры.Значение[НайденноеЗначение.Индекс(СтрокаТаблЗнач)].Данные);
							
						КонецЕсли;
						
					КонецЦикла;
					
				КонецЕсли;
								
				Если НайденноеЗначение[0].Свойство("ДанныеДопСтрок") Тогда
					
					Ном = 0;
					
					Для Каждого СтрокаТаблЗнач Из ЭлементСтруктуры.Значение Цикл
						
						Если ТипЗнч(СтрокаТаблЗнач.ДанныеДопСтрок) = Тип("Структура") Тогда
							
							Для Каждого ЭлСтруктуры Из СтрокаТаблЗнач.ДанныеДопСтрок Цикл
								
								ТаблЗнач = ЭлСтруктуры.Значение;
								
								ЭлСтруктуры.Значение = ЭтаФорма["Хранилище" + ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ЭлементСтруктуры.Ключ)].Добавить().Таблица;
								
								ЗначениеВДанныеФормы(ТаблЗнач, ЭлСтруктуры.Значение);
								
								НайденноеЗначение[Ном].ДанныеДопСтрок.Добавить(ЭлСтруктуры.Значение);
								
							КонецЦикла;
							
						ИначеЕсли ТипЗнч(СтрокаТаблЗнач.ДанныеДопСтрок) = Тип("ТаблицаЗначений") Тогда
							
							СтрокаТаблЗначДанныеДопСтрок = ЭтаФорма["Хранилище" + ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ЭлементСтруктуры.Ключ)].Добавить().Таблица;
														
							ЗначениеВДанныеФормы(СтрокаТаблЗнач.ДанныеДопСтрок, СтрокаТаблЗначДанныеДопСтрок);
							
							НайденноеЗначение[Ном].ДанныеДопСтрок.Добавить(СтрокаТаблЗначДанныеДопСтрок, "ДанныеФормыКоллекцияТаблицаДопСтрокРаздела");
							
						КонецЕсли;
						
						Ном = Ном + 1;
						
					КонецЦикла;
					
				КонецЕсли;
								   				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Для Каждого Раздел Из мСтруктураМногостраничныхРазделов Цикл
		Для Каждого Страница Из ЭтаФорма[Раздел.Значение] Цикл
			Страница.АктивнаяСтраница = Ложь;
		КонецЦикла;
	КонецЦикла;
	
	СписокСохранения.Свойство("Автозаполнение", Автозаполнение);
	СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет = Автозаполнение;
		
	Если СписокСохранения.Свойство("ДокПредстРО") Тогда
		Если СписокСохранения.ДокПредстРО Тогда
			Представляется = 1;
		Иначе
			Представляется = 2;
		КонецЕсли;
	ИначеЕсли СписокСохранения.Свойство("Представляется") Тогда
		Представляется = СписокСохранения.Представляется;
	КонецЕсли;
	
	Если СписокСохранения.Свойство("Представляется") Тогда
		Представляется = СписокСохранения.Представляется;
	Иначе
		Представляется = Неопределено;
	КонецЕсли;
	
	Если СписокСохранения.Свойство("ПриПечатиГруппироватьПоКодам") Тогда
		ПриПечатиГруппироватьПоКодам = СписокСохранения.ПриПечатиГруппироватьПоКодам;
	Иначе
		ПриПечатиГруппироватьПоКодам = Ложь;
	КонецЕсли;
	
	// восстанавливаем флажок ПодсчетаСтраниц
	СписокСохранения.Свойство("ФлПодсчетСтраниц", СтруктураРеквизитовФормы.мСчетчикСтраниц);

	СписокСохранения.Свойство("ФлОтклВыборЗначений", СтруктураРеквизитовФормы.мАвтоВыборКодов);
	Если СтруктураРеквизитовФормы.мАвтоВыборКодов = Неопределено Тогда
		СтруктураРеквизитовФормы.мАвтоВыборКодов = Ложь;
	КонецЕсли;
	
	СформироватьДеревоРазделовОтчетаНаСервере();
	
	Префикс = "ПолеТабличногоДокумента";
	
    Для Каждого Раздел Из мСвойстваРазделовДекларации.ПолучитьЭлементы() Цикл	
		
		Если НЕ Раздел.МногостраничностьВРазделе Тогда
			ЭтаФорма["СтруктураДанных" + Раздел.ИмяСтраницы] = ПоказателиОтчета[Префикс + Раздел.ИмяСтраницы];
		КонецЕсли;
	
	КонецЦикла;
	
	ВосстановитьСведенияОбОрганизацииИзТитульногоЛистаСтарогоОбразца();
	ВосстановитьСведенияОФизическихЛицахИзЛистаФизЛицаСтарогоОбразца();
			
	Для Каждого ЭлСтруктуры Из ЭтаФорма[мСтруктураМногостраничныхРазделов.Титульный][0].Данные[0].Значение Цикл
		Попытка
			ТабличныйДокумент.Области[ЭлСтруктуры.Ключ].Значение = ЭлСтруктуры.Значение;
		Исключение
		КонецПопытки;
	КонецЦикла;
	
	СтруктураРеквизитовФормы.мАдрЮРТитульныйВыгрузка = ЭтаФорма[мСтруктураМногостраничныхРазделов.Титульный][0].Данные[0].Значение.АдрЮР;
	СтруктураРеквизитовФормы.мВидДеят                = ЭтаФорма[мСтруктураМногостраничныхРазделов.Титульный][0].Данные[0].Значение.ВидДеят;
	
	Если НЕ ТабличныйДокумент.Области.Найти("АдрЮР") = Неопределено Тогда
		ТабличныйДокумент.Области.АдрЮР.Значение = РегламентированнаяОтчетностьКлиентСервер.ПредставлениеАдресаВФормате9Запятых(СтруктураРеквизитовФормы.мАдрЮРТитульныйВыгрузка, Истина);
	КонецЕсли;
	
	ЭтаФорма[мСтруктураМногостраничныхРазделов.Титульный][0].АктивнаяСтраница = Истина;

	РегламентированнаяОтчетность.ОперацииПриВосстановленииРегламентированногоОтчета(ЭтаФорма);

	// Управляем видимостью страниц основной панели формы
	КопироватьДанныеФормы(мДеревоСтраницОтчета, мДеревоВыбранныхСтраниц);

	Если НЕ ТабличныйДокумент.Области.Найти("АдрЮР") = Неопределено Тогда
		УстановитьПримечаниеНаТитульныхЛистахГруппыАлкогольныхДеклараций();
	КонецЕсли;
	
	Модифицированность   = Ложь;

	СтруктураРеквизитовФормы.мДокументВосстановлен = Истина;
		
КонецПроцедуры

&НаСервере
Процедура ВосстановитьСведенияОбОрганизацииИзТитульногоЛистаСтарогоОбразца()
		
	ПоказателиТаблПоле = ЭтаФорма[мСтруктураМногостраничныхРазделов.Титульный][0].Данные[0].Значение;
	
	СтруктураДанныхТитульный = ЭтаФорма[мСтруктураМногостраничныхРазделов.Титульный][0].Данные[0].Значение;
	
	Для Каждого Показатель Из ПоказателиТаблПоле Цикл
		
		ИмяПоказателя = Показатель.Ключ;
		
		Если ИмяПоказателя = "ИНН1_1" Тогда
			СтруктураДанныхТитульный.Вставить("ИНН1");
			Для Ном = 1 По 12 Цикл
				СтруктураДанныхТитульный.ИНН1 = СокрЛП(СтруктураДанныхТитульный.ИНН1) + ПоказателиТаблПоле["ИНН1_" + Ном];
				СтруктураДанныхТитульный.Удалить("ИНН1_" + Ном);
			КонецЦикла;
			Если Лев(СтруктураДанныхТитульный.ИНН1, 2) = "00" Тогда
				СтруктураДанныхТитульный.ИНН1 = Сред(СтруктураДанныхТитульный.ИНН1, 3);
			КонецЕсли;
		ИначеЕсли ИмяПоказателя = "КПП1_1" Тогда
			СтруктураДанныхТитульный.Вставить("КПП1");
			Для Ном = 1 По 9 Цикл
				СтруктураДанныхТитульный.КПП1 = СокрЛП(СтруктураДанныхТитульный.КПП1) + ПоказателиТаблПоле["КПП1_" + Ном];
				СтруктураДанныхТитульный.Удалить("КПП1_" + Ном);
			КонецЦикла;
		ИначеЕсли ИмяПоказателя = "ОтчетГод1" Тогда
			СтруктураДанныхТитульный.Вставить("ОтчетГод");
			Для Ном = 1 По 4 Цикл
				СтруктураДанныхТитульный.ОтчетГод = СокрЛП(СтруктураДанныхТитульный.ОтчетГод) + ПоказателиТаблПоле["ОтчетГод" + Ном];
				СтруктураДанныхТитульный.Удалить("ОтчетГод" + Ном);
			КонецЦикла;
		ИначеЕсли ИмяПоказателя = "КодИМНС1" Тогда
			СтруктураДанныхТитульный.Вставить("КодИМНС");
			Для Ном = 1 По 4 Цикл
				СтруктураДанныхТитульный.КодИМНС = СокрЛП(СтруктураДанныхТитульный.КодИМНС) + ПоказателиТаблПоле["КодИМНС" + Ном];
				СтруктураДанныхТитульный.Удалить("КодИМНС" + Ном);
			КонецЦикла;	
		ИначеЕсли ИмяПоказателя = "ОГРН1" Тогда
			СтруктураДанныхТитульный.Вставить("ОГРН");
			Для Ном = 1 По 13 Цикл
				СтруктураДанныхТитульный.ОГРН = СокрЛП(СтруктураДанныхТитульный.ОГРН) + ПоказателиТаблПоле["ОГРН" + Ном];
				СтруктураДанныхТитульный.Удалить("ОГРН" + Ном);
			КонецЦикла;		
		ИначеЕсли ИмяПоказателя = "Прил1" Тогда
			СтруктураДанныхТитульный.Вставить("Прил");
			Для Ном = 1 По 3 Цикл
				СтруктураДанныхТитульный.Прил = СокрЛП(СтруктураДанныхТитульный.Прил) + ПоказателиТаблПоле["Прил" + Ном];
				СтруктураДанныхТитульный.Удалить("Прил" + Ном);
			КонецЦикла;			
		ИначеЕсли ИмяПоказателя = "ИННРук1" Тогда
			СтруктураДанныхТитульный.Вставить("ИННРук");
			Для Ном = 1 По 12 Цикл
				СтруктураДанныхТитульный.ИННРук = СокрЛП(СтруктураДанныхТитульный.ИННРук) + ПоказателиТаблПоле["ИННРук" + Ном];
				СтруктураДанныхТитульный.Удалить("ИННРук" + Ном);
			КонецЦикла;		
		ИначеЕсли ИмяПоказателя = "ИННГБ1" Тогда
			СтруктураДанныхТитульный.Вставить("ИННГБ");
			Для Ном = 1 По 12 Цикл
				СтруктураДанныхТитульный.ИННГБ = СокрЛП(СтруктураДанныхТитульный.ИННГБ) + ПоказателиТаблПоле["ИННГБ" + Ном];
				СтруктураДанныхТитульный.Удалить("ИННГБ" + Ном);
			КонецЦикла;	
		ИначеЕсли ИмяПоказателя = "ИННУП1" Тогда
			СтруктураДанныхТитульный.Вставить("ИННУП");
			Для Ном = 1 По 12 Цикл
				СтруктураДанныхТитульный.ИННУП = СокрЛП(СтруктураДанныхТитульный.ИННУП) + ПоказателиТаблПоле["ИННУП" + Ном];
				СтруктураДанныхТитульный.Удалить("ИННУП" + Ном);
			КонецЦикла;			
				
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого ЭлементТабл Из ЭтаФорма[мСтруктураМногостраничныхРазделов.Титульный] Цикл
		
		ЭлементТабл.АктивнаяСтраница = Ложь;
		
		ЭлементТабл.Данные[0].Значение.Вставить("ИНН1", СтруктураДанныхТитульный.ИНН1);
		ЭлементТабл.Данные[0].Значение.Вставить("КПП1", СтруктураДанныхТитульный.КПП1);
				
	КонецЦикла;
	
	ЭтаФорма[мСтруктураМногостраничныхРазделов.Титульный][0].АктивнаяСтраница = Истина;
	
	СтруктураРеквизитовФормы.Руководитель   = ПоказателиТаблПоле.ОргДиректор;
	СтруктураРеквизитовФормы.Бухгалтер      = ПоказателиТаблПоле.ОргБухгалтер;
	СтруктураРеквизитовФормы.Исполнитель    = РегламентированнаяОтчетностьВызовСервера.ЗаполнитьСведенияОбОрганизацииНаСервере(ЭтаФорма, "ФИОИсп").ФИОИсп;
	СтруктураРеквизитовФормы.ТелОрганизации = ПоказателиТаблПоле.ТелОрганизации;
	
	ЗаполнитьДатуВЯчейкахНаСервере();

КонецПроцедуры

&НаСервере
Процедура ВосстановитьСведенияОФизическихЛицахИзЛистаФизЛицаСтарогоОбразца()
	
	Для Каждого ЭлементТабл Из ЭтаФорма[мСтруктураМногостраничныхРазделов.ФизЛица] Цикл
		
		ЭлементТабл.АктивнаяСтраница = Ложь;
		
		ПоказателиТаблПоле = ЭлементТабл.Данные[0].Значение;
		
		СтруктураДанныхФизЛица = ЭлементТабл.Данные[0].Значение;
		
		Для Каждого Показатель Из ПоказателиТаблПоле Цикл
			
			ИмяПоказателя = Показатель.Ключ;
			
			Если ИмяПоказателя = "ФизЛицФИО" Тогда
				СтруктураДанныхФизЛица.Вставить("ФизЛицоФИО");
				СтруктураДанныхФизЛица.ФизЛицоФИО = СокрЛП(ПоказателиТаблПоле.ФизЛицФИО);
				СтруктураДанныхФизЛица.Удалить("ФизЛицФИО");
			ИначеЕсли ИмяПоказателя = "ФизЛицДок1" Тогда
				СтруктураДанныхФизЛица.Вставить("ФизЛицДок");
				Для Ном = 1 По 2 Цикл
					СтруктураДанныхФизЛица.ФизЛицДок = СокрЛП(СтруктураДанныхФизЛица.ФизЛицДок) + ПоказателиТаблПоле["ФизЛицДок" + Ном];
					СтруктураДанныхФизЛица.Удалить("ФизЛицДок" + Ном);
				КонецЦикла;
			ИначеЕсли ИмяПоказателя = "ФизЛицДокДата1" Тогда
				СтруктураДанныхФизЛица.Вставить("ФизЛицДокДата");
				Для Ном = 1 По 8 Цикл
					СтруктураДанныхФизЛица.ФизЛицДокДата = СокрЛП(СтруктураДанныхФизЛица.ФизЛицДокДата) + ПоказателиТаблПоле["ФизЛицДокДата" + Ном];
					СтруктураДанныхФизЛица.Удалить("ФизЛицДокДата" + Ном);
				КонецЦикла;	
				ДатаСтр = Сред(СтруктураДанныхФизЛица.ФизЛицДокДата, 5) + Сред(СтруктураДанныхФизЛица.ФизЛицДокДата, 3, 2) + Лев(СтруктураДанныхФизЛица.ФизЛицДокДата, 2);
				СтруктураДанныхФизЛица.ФизЛицДокДата = Дата(?(ЗначениеЗаполнено(ДатаСтр), ДатаСтр, '00010101'));
			ИначеЕсли ИмяПоказателя = "ФизЛицИнд1" Тогда
				СтруктураДанныхФизЛица.Вставить("ФизЛицИнд");
				Для Ном = 1 По 6 Цикл
					СтруктураДанныхФизЛица.ФизЛицИнд = СокрЛП(СтруктураДанныхФизЛица.ФизЛицИнд) + ПоказателиТаблПоле["ФизЛицИнд" + Ном];
					СтруктураДанныхФизЛица.Удалить("ФизЛицИнд" + Ном);
				КонецЦикла;		
			ИначеЕсли ИмяПоказателя = "ФизЛицС1" Тогда
				СтруктураДанныхФизЛица.Вставить("ФизЛицС");
				Для Ном = 1 По 2 Цикл
					СтруктураДанныхФизЛица.ФизЛицС = СокрЛП(СтруктураДанныхФизЛица.ФизЛицС) + ПоказателиТаблПоле["ФизЛицС" + Ном];
					СтруктураДанныхФизЛица.Удалить("ФизЛицС" + Ном);
				КонецЦикла;			
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуНастроек(Команда)
	
	ОткрытьФормуВыбораСтраниц("ВыбратьДляНастройки");

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораСтраниц(ВариантВыбора)
    Перем ТекущийРазделОтчетаСокрНаим;
	Перем НомерСтраницыРазделаОтчета;
	
	// Запоминаем текущий раздел, установленный в дереве разделов отчета.
	Если НЕ Элементы.РазделыОтчета.ТекущиеДанные = Неопределено Тогда
		ТекущийРазделОтчетаСокрНаим = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
		НомерСтраницыРазделаОтчета  = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета;
	КонецЕсли;
	
	мПараметры = Новый Структура;
	мПараметры.Вставить("ПроверкаСоотношений", Ложь);
	мПараметры.Вставить("Автосохранение", Ложь);
	мПараметры.Вставить("Выгрузка", Ложь);
	мПараметры.Вставить("ИмеетсяРеквизитДеревоВыбранныхСтраниц", Истина);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ФлажокОтклАвтоРасчет", СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);
	ПараметрыФормы.Вставить("мСчетчикСтраниц", СтруктураРеквизитовФормы.мСчетчикСтраниц);
	ПараметрыФормы.Вставить("мАвтоВыборКодов", СтруктураРеквизитовФормы.мАвтоВыборКодов);
	ПараметрыФормы.Вставить("мПараметры", мПараметры);
					
	ФормаНастройкиОтчета = РегламентированнаяОтчетностьКлиент.ПолучитьОбщуюФормуПоИмени("НастройкиОтчета", ПараметрыФормы, ЭтаФорма);

	мДеревоВыбранныхСтраниц.ПолучитьЭлементы().Очистить();
    
	КопироватьДанныеФормы(мДеревоСтраницОтчета, ФормаНастройкиОтчета.Дерево);
	
	ЗначениеАвторасчета = СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет;
	
	ДополнительныеПараметры = Новый Структура("ЗначениеАвторасчета, НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим", ЗначениеАвторасчета, НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим);
	ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьФормуВыбораСтраницЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ФормаНастройкиОтчета.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
	ФормаНастройкиОтчета.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	ФормаНастройкиОтчета.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораСтраницЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	ЗначениеАвторасчета = ДополнительныеПараметры.ЗначениеАвторасчета;
	НомерСтраницыРазделаОтчета = ДополнительныеПараметры.НомерСтраницыРазделаОтчета;
	ТекущийРазделОтчетаСокрНаим = ДополнительныеПараметры.ТекущийРазделОтчетаСокрНаим;
	
	Модифицированность = Истина;
	
	флЗначенияИдентичны = Истина;
	
	Для Индекс = 0 По мДеревоСтраницОтчета.ПолучитьЭлементы().Количество() - 1 Цикл
		
		Если НЕ мДеревоСтраницОтчета.ПолучитьЭлементы()[Индекс].ПоказатьСтраницу = мДеревоВыбранныхСтраниц.ПолучитьЭлементы()[Индекс].ПоказатьСтраницу Тогда	
			флЗначенияИдентичны = Ложь;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЗначениеАвторасчета <> СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Тогда
		
		#Если ВебКлиент Тогда
			ИзменитьТаблицуВариантовЗаполненияНаСервере();
		#Иначе
			РегламентированнаяОтчетностьКлиентСервер.ИзменитьТаблицуВариантовЗаполнения(ЭтаФорма, НЕ СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);
		#КонецЕсли	
		
	КонецЕсли;
	
	// Управляем видимостью страниц основной панели формы
	РегламентированнаяОтчетностьКлиент.ПоказатьСтраницыОтчетаНаКлиенте(ЭтаФорма);
	
	Если НЕ флЗначенияИдентичны Тогда
		
		СформироватьДеревоРазделовОтчетаНаКлиенте();
		
		Если НЕ ТекущийРазделОтчетаСокрНаим = Неопределено Тогда
			
			// Пытаемся найти ранее запомненный раздел.
			НайденнаяСтрока = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(РазделыОтчета.ПолучитьЭлементы(), "КолонкаРазделыОтчетаСокрНаим", ТекущийРазделОтчетаСокрНаим);
			
			Если НЕ НайденнаяСтрока = Неопределено 
				И НЕ НомерСтраницыРазделаОтчета = Неопределено 
				И НайденнаяСтрока.ПолучитьЭлементы().Количество() > 0 Тогда
				
				НайденнаяСтрока = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(НайденнаяСтрока.ПолучитьЭлементы(), "КолонкаНомерСтраницыРазделаОтчета", НомерСтраницыРазделаОтчета);
				
			КонецЕсли;
			
			// В случае успешного поиска, устанавливаем курсор на найденный раздел.
			Если НЕ НайденнаяСтрока = Неопределено Тогда
				Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяСтрока.ПолучитьИдентификатор();
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура ИзменитьТаблицуВариантовЗаполненияНаСервере()
	
	РегламентированнаяОтчетностьКлиентСервер.ИзменитьТаблицуВариантовЗаполнения(ЭтаФорма, НЕ СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайла(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузитьИзФайлаЗавершение", ЭтотОбъект);
	
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередЗагрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура Выгрузить(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьЗавершение", ЭтотОбъект);

	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайлаЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ЗагрузитьИзФайлаОтчет();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайлаОтчет() Экспорт
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузитьИзФайлаОтчетЗавершение", ЭтотОбъект);
	
	Если Модифицированность Тогда
		СохранитьНаКлиенте(,ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайлаОтчетЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	РегламентированнаяОтчетностьЗагрузкаКлиент.ЗагрузитьИзФайлаОтчет(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Функция ЗагрузкаОтчетаИзФайла(ДанныеДляЗагрузки) Экспорт
	
	Если Модифицированность Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = СтрШаблон(НСтр("ru='Отчет ""%1"" не сохранен.'"), ЭтотОбъект.Заголовок);
		Сообщение.Сообщить();
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ ЗагрузкаОтчетаИзФайлаНаСервере(ДанныеДляЗагрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
		
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция ЗагрузкаОтчетаИзФайлаНаСервере(ДанныеДляЗагрузки)
	
	СформироватьСтруктуруПоказателей();
	
	ПараметрыОтчета = СформироватьСтруктуруПараметров();
	
	ДеревоДляЗагрузки = ИзвлечьСтруктуруXML();
	
	Если НЕ РегламентированнаяОтчетностьЗагрузка.ЗагрузкаОтчетаИзФайла(
		ЭтотОбъект, ПараметрыОтчета, ДанныеДляЗагрузки, ДеревоДляЗагрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура ВыгрузитьЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ВыгрузитьОтчет();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьОтчет() Экспорт
	
	Если НЕ ЗначениеЗаполнено(СтруктураРеквизитовФормы.Организация) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Организация не выбрана! Выгрузка невозможна.'");
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьОтчетЗавершение", ЭтотОбъект);
	
	Если Модифицированность Тогда
		СохранитьНаКлиенте(,ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьОтчетЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ФормаВыгрузкиРеглОтчета = ПолучитьФорму("Документ.ВыгрузкаРегламентированныхОтчетов.Форма.ФормаДокумента", , ЭтаФорма);
	
	СпДокОсн = Новый СписокЗначений;
	СпДокОсн.Добавить(СтруктураРеквизитовФормы.мСохраненныйДок);
	
	ФормаВыгрузкиРеглОтчета.СформироватьИЗаписать(СпДокОсн);
	
КонецПроцедуры

&НаКлиенте
Функция УниверсальнаяВыгрузка(Текст = Неопределено, ПроверятьБлокировки = Истина) Экспорт
	
	Перем ПараметрыВыгрузки;
	
	Если СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета < '20110301' Тогда   
		//выгрузка по формату 3.02 или 3.05
		
		Возврат УниверсальнаяВыгрузкаНаСервере(Текст);
		
	Иначе
		//выгрузка по формату 4.01
		
		Если НЕ УниверсальнаяВыгрузкаXMLНаСервере(Текст, ПараметрыВыгрузки) Тогда
			Возврат Ложь;
		КонецЕсли;
		
		Возврат Истина;
		
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция УниверсальнаяВыгрузкаНаСервере(Текст)
	
	// проверяем показатели
	Если НЕ ПроверитьПоказатели() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ОргКПП = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить().ДанныеМногостраничныхРазделов.Титульный[0].Данные).КПП1;
	
	Если СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета > '20100901' Тогда
		ИдПол = "0001";
		ВерсФорм = "3.05";
	Иначе
		ИдПол = СокрЛП(СтруктураРеквизитовФормы.мСохраненныйДок.КодНалоговогоОргана);
		ВерсФорм = "3.02";
	КонецЕсли;
	
	Если (НЕ РегламентированнаяОтчетность.ВывестиСведенияСлужебнойЧасти30(Текст, СтруктураРеквизитовФормы.Организация, , , ОргКПП, ИдПол, СтруктураРеквизитовФормы.КНД, ВерсФорм))
		ИЛИ (НЕ РегламентированнаяОтчетность.ВывестиСведенияОбОтправителе30(Текст, СтруктураРеквизитовФормы.Организация)) Тогда
		
		СообщитьВТС("Не удалось сформировать общую информацию для файла выгрузки!", "Титульный", "");
		Возврат Ложь;
		
	КонецЕсли;
	
	Если НЕ РегламентированнаяОтчетность.ВывестиОбщиеСведенияИнформационнойЧасти30(Текст, СтруктураРеквизитовФормы.Организация, , ОргКПП, СтруктураРеквизитовФормы.мСохраненныйДок.ДатаНачала) Тогда
		СообщитьВТС("Не удалось собрать общие сведения информационной части для файла выгрузки!", "Титульный", "");
		Возврат Ложь;
	КонецЕсли;
	
	// выводим сведения о физ. лицах и блок "описание форм отчетности"
	ВыгрузитьТитульныйЛистИСведенияОФизЛицах(Текст);
	
	// выводим предписанные показатели
	УниверсальнаяВыгрузкаПредписанныхПоказателей(Текст, Ложь);
	
	// обрабатываем результирующий текст выгрузки
	ОбработатьРезультирующийТекстВыгрузки(Текст);
	
	// добавляем заключительные строки
	Текст.ДобавитьСтроку("@@@");
	Текст.ДобавитьСтроку("===");
	
	// проставляем общее количество показателей в тексте выгрузки
	НомСтрКолПокФОтч = РегламентированнаяОтчетность.НайтиКолПокФОтч(Текст);
	Если НомСтрКолПокФОтч <> -1 Тогда
		Текст.ЗаменитьСтроку(НомСтрКолПокФОтч, "КолПокФОтч:" + РегламентированнаяОтчетность.ПолучитьКоличествоПоказателей(Текст));
	КонецЕсли;
	
	// устанавливаем особый ИдДок
	Для Сч = 1 По Текст.КоличествоСтрок() Цикл
		ТекСтр = Текст.ПолучитьСтроку(Сч);
		Если Лев(ТекСтр, 6) = "ИдДок:" Тогда
			Текст.ЗаменитьСтроку(Сч, ИсправленныйИдДок(ТекСтр));
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
		
КонецФункции

&НаСервере
Функция УниверсальнаяВыгрузкаXMLНаСервере(Текст, ПараметрыВыгрузки)
	
	СформироватьСтруктуруПоказателей();
	ПараметрыВыгрузки = СформироватьСтруктуруПараметров();
	
	// проверяем показатели (алгоритм проверки оставлен из режима выгрузки в формате 3.05)
	Если НЕ ПроверитьПоказатели() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ДеревоВыгрузки = ИзвлечьСтруктуруXML();
	ЗаполнитьДанными(ДеревоВыгрузки, ПараметрыВыгрузки);
	Если НЕ РегламентированнаяОтчетность.ПроверитьДанные(ЭтаФорма, ДеревоВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	Текст = ВыгрузитьДеревоВXML(ДеревоВыгрузки, ПараметрыВыгрузки);
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция ПроверитьПоказатели() Экспорт
	
	ТаблицаСообщений.Очистить();
	Возврат ПроверкаЗаполнения();
	
КонецФункции

&НаСервере
Функция ПроверкаЗаполнения() Экспорт
	
	Возврат ПроверитьТитульныйЛистИСведенияОФизЛицах(Ложь);
	
КонецФункции

&НаСервере
Функция ПроверитьТитульныйЛистИСведенияОФизЛицах(БратьИзФормы = Истина, ВыводитьСообщения = Истина, ЧтоПроверять = "12", ПечатаемыеЛисты = Неопределено)
	
	СтатусПроверки = 0;//возможные состояния: 0 - ошибок нет, 1 - ошибка
	ПредставлениеОтчета = "";
	
	//определение источников данных для проверки
	Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
		Если ВыводитьСообщения Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1Источник данных для формирования отчета не определен!'"), ПредставлениеОтчета);
			Сообщение.Сообщить();
		КонецЕсли;
		Возврат Ложь;
	КонецЕсли;
	
	Данные = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить();
	Если Данные = Неопределено Тогда
		Если ВыводитьСообщения Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1Источник данных для формирования отчета не определен!'"), ПредставлениеОтчета);
			Сообщение.Сообщить();
		КонецЕсли;
		Возврат Ложь;
	КонецЕсли;
	
	Орг = СтруктураРеквизитовФормы.мСохраненныйДок.Организация;
	ПредставлениеОтчета = РегламентированнаяОтчетностьКлиентСервер.ПредставлениеДокументаРеглОтч(СтруктураРеквизитовФормы.мСохраненныйДок) + ". ";
	
	Инф = ВычислитьПоказателиТитульногоЛистаИСведенияОФизЛицах(БратьИзФормы, ВыводитьСообщения);
	
	ПоказателиТитульный = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(РегламентированнаяОтчетность.СкопированнаяСтруктура(Инф.Получить(0).Значение.Получить(0).Данные));
	ДанныеФизЛиц = Инф.Получить(1).Значение;
	//Получили данные
	
	//Определим основные показатели
	ОргКПП = СокрЛП(ПоказателиТитульный.КПП1);
	ОргИНН = СокрЛП(Орг.ИНН);
	КодИнсп = ПоказателиТитульный.КодИМНС;	
	Если КодИнсп = "" Тогда
		КодИнсп = СтруктураРеквизитовФормы.КодНО;
	КонецЕсли;	  
	
	ОргДиректор = СокрЛП(ПоказателиТитульный.ОргДиректор);
	ОргБухгалтер = СокрЛП(ПоказателиТитульный.ОргБухгалтер);
	ОргУП = СокрЛП(ПоказателиТитульный.ОргУП);
	ВидДок = ПоказателиТитульный.ВидДок;
	ПризнВидаДок = 1;
	Если НЕ ПустаяСтрока(ВидДок) Тогда
		Попытка
			ПризнВидаДок = Число(ВидДок);
		Исключение
		КонецПопытки;
	КонецЕсли;
	Попытка
		НомКорректировки = Число(ПоказателиТитульный.НомКоррект); 
	Исключение
		НомКорректировки = 0;
	КонецПопытки;
	РазницаМесяцев = Месяц(СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания) - Месяц (СтруктураРеквизитовФормы.мСохраненныйДок.ДатаНачала) + 1;
	ПризнОтчетногоПериода = 1;
	Если ПустаяСтрока(ПоказателиТитульный.ТипОрг1) И ПустаяСтрока(ПоказателиТитульный.ТипОрг2) Тогда
		ПоМестуНахождения = 0;
	Иначе
		ПоМестуНахождения = ?(ПустаяСтрока(ПоказателиТитульный.ТипОрг2), 1, 2);
	КонецЕсли;
	Если Данные.Свойство("Представляется") Тогда
		ПредставляетсяЗнач = ?(НЕ ЗначениеЗаполнено(Данные.Представляется), 0, Число(Данные.Представляется));
	Иначе
		ПредставляетсяЗнач = ?(Данные.ДокПредстРО, 1, 2);
	КонецЕсли;
	//Определили основные показатели
	
	Если ПустаяСтрока(КодИНСП) Тогда
		Если ВыводитьСообщения Тогда
			СообщитьВТС("Невозможно определить код налоговой инспекции! Выгрузка прервана!", "Титульный", "КодИМНС");
		КонецЕсли;
		СтатусПроверки = 1;   
	КонецЕсли;
	
	Если ПустаяСтрока(ОргИНН) Тогда
		Если ВыводитьСообщения Тогда
			СообщитьВТС("Не задан ИНН организации!", "Титульный", "ИНН1");
		КонецЕсли;
		СтатусПроверки = 1;
	КонецЕсли;  
	
	Если ПустаяСтрока(ОргКПП) Тогда
		Если ВыводитьСообщения Тогда
			СообщитьВТС("Не задан КПП организации!", "Титульный", "КПП1");
		КонецЕсли;
		СтатусПроверки = 1;
	КонецЕсли;  
	
	Если ПоМестуНахождения = 0 Тогда
		Если ВыводитьСообщения Тогда
			СообщитьВТС("Не выбран реквизит ""По месту нахождения""!", "Титульный", "ТипОрг");
		КонецЕсли;
		СтатусПроверки = 1;
	ИначеЕсли ПоМестуНахождения = 1 И ПредставляетсяЗнач = 0 Тогда
		Если ВыводитьСообщения Тогда
			СообщитьВТС("Не выбран вариант представления отчета (поле выбора под бланком титульного листа)!", "Титульный", Неопределено);
		КонецЕсли;
		СтатусПроверки = 1;
	КонецЕсли;
	
	//Проверяем соответствие дополнительным требованиям по составу показателей
	Если ПустаяСтрока(ОргДиректор) Тогда
		Если ВыводитьСообщения Тогда
			СообщитьВТС("Не указаны Ф.И.О. (полностью) руководителя!", "Титульный", "ОргДиректор");
		КонецЕсли;
		СтатусПроверки = 1;
	КонецЕсли;  
	
	Если ПустаяСтрока(ОргБухгалтер) Тогда
		Если ВыводитьСообщения Тогда
			СообщитьВТС("Не указаны Ф.И.О. (полностью) гл. бухгалтера!", "Титульный", "ОргБухгалтер"); 
		КонецЕсли;
		СтатусПроверки = 1;
	КонецЕсли;  
	
	Если (ПризнВидаДок = 3) И (НомКорректировки = 0) Тогда
		Если ВыводитьСообщения Тогда
			СообщитьВТС("Не указан номер корректировки!", "Титульный", "НомКоррект");
		КонецЕсли;
		СтатусПроверки = 1;
	КонецЕсли;
	
	Если НЕ РегламентированнаяОтчетность.ИННСоответствуетТребованиямБезТипаНаСервере(ОргИНН) Тогда
		Если ВыводитьСообщения Тогда
			СообщитьВТС("Неверно задан ИНН организации!", "Титульный", "ИНН1");
		КонецЕсли;
		СтатусПроверки = 1;
	КонецЕсли;

	Если ЗначениеЗаполнено(ПоказателиТитульный.ВидДеят) Тогда
		Если НЕ ЗначениеЗаполнено(ПоказателиТитульный.СерЛиц) Тогда
			Если ВыводитьСообщения Тогда
				СообщитьВТС("Не указана серия лицензии!", "Титульный", "СерЛиц");
			КонецЕсли;
			СтатусПроверки = 1;
		КонецЕсли;
			
		Если НЕ ЗначениеЗаполнено(ПоказателиТитульный.НомерЛиц) Тогда
			Если ВыводитьСообщения Тогда
				СообщитьВТС("Не указан номер лицензии!", "Титульный", "НомерЛиц");
			КонецЕсли;
			СтатусПроверки = 1;
		КонецЕсли;
			
		Если НЕ ЗначениеЗаполнено(ПоказателиТитульный.ДатаНачЛиц) Тогда
			Если ВыводитьСообщения Тогда
				СообщитьВТС("Не указана дата получения лицензии!", "Титульный", "ДатаНачЛиц");
			КонецЕсли;
			СтатусПроверки = 1;
		КонецЕсли;
			
		Если НЕ ЗначениеЗаполнено(ПоказателиТитульный.ДатаОконЛиц) Тогда
			Если ВыводитьСообщения Тогда
				СообщитьВТС("Не указан срок действия лицензии!", "Титульный", "ДатаОконЛиц");
			КонецЕсли;
			СтатусПроверки = 1;
		КонецЕсли;

	КонецЕсли;
	
	ОргНазв = ПоказателиТитульный.ОргНазв;
	ОргОГРН = ПоказателиТитульный.ОГРН;
		
	Если НЕ ПустаяСтрока(ОргОГРН) Тогда
		Если НЕ РегламентированнаяОтчетность.ОГРНсоответствуетТребованиям(ОргОГРН) Тогда
			Если ВыводитьСообщения Тогда
				СообщитьВТС("Неверно задан ОГРН для организации!", "Титульный", "ОГРН");
			КонецЕсли;
			СтатусПроверки = 1;
		КонецЕсли;	
	КонецЕсли;
		
	Если РегламентированнаяОтчетность.ФИОНаписаноВерно(СтрЗаменить(ОргДиректор, ",", "")) = 0 Тогда
		Если ВыводитьСообщения Тогда
			СообщитьВТС("Фамилия, имя или отчество руководителя содержат недопустимые символы!", "Титульный", "ОргДиректор");
		КонецЕсли;
		СтатусПроверки = 1;
	КонецЕсли;

	Если РегламентированнаяОтчетность.ФИОНаписаноВерно(СтрЗаменить(ОргБухгалтер, ",", "")) = 0 Тогда
		Если ВыводитьСообщения Тогда
			СообщитьВТС("Фамилия, имя или отчество главного бухгалтера содержат недопустимые символы!", "Титульный", "ОргБухгалтер");
		КонецЕсли;
		СтатусПроверки = 1;
	КонецЕсли;
	
	ТаблСведенийФизЛиц = ДанныеФизЛиц;			
		
	//сведения о директоре+
	ИННДиректор = ПоказателиТитульный.ИННРук;
	Если ПустаяСтрока(ИННДиректор) Тогда
		ТелСлужРук    = "-";
		ТелДомРук     = "-";
		АдрМЖРукРФ    = ",,,,,,,,,";
		АдрМЖРукРез   = "-";
		Стр = ТаблСведенийФизЛиц.Найти(ОргДиректор, "ФизЛицоФИО");
		Если Стр <> Неопределено Тогда			
			ТелСлужРук    = РегламентированнаяОтчетностьКлиентСервер.ПолучитьРеквизит(Стр.ФизЛицСлТел, ТелСлужРук);
			ТелДомРук     = РегламентированнаяОтчетностьКлиентСервер.ПолучитьРеквизит(Стр.ФизЛицДомТел, ТелДомРук);
			КодВидаДокРук  = РегламентированнаяОтчетностьКлиентСервер.ПолучитьРеквизит(Стр.ФизЛицДокКод, КодВидаДокРук);
			СерияИНомерРук = РегламентированнаяОтчетностьКлиентСервер.ПолучитьРеквизит(Стр.ФизЛицДокСерияНомер, СерияИНомерРук);
			УдЛичнРук      = Строка(КодВидаДокРук) + "," + СерияИНомерРук;
			ВыдУдЛичнРук   = ВРЕГ(РегламентированнаяОтчетностьКлиентСервер.ПолучитьРеквизит(Стр.ФизЛицДокВыдан, ВыдУдЛичнРук));
			ДатаУдЛичнРук = РегламентированнаяОтчетностьКлиентСервер.ПолучитьРеквизит(Стр.ФизЛицДокДата, ДатаУдЛичнРук);
			АдрМЖРукРФ    = "643,"
			+ СокрП(Стр.ФизЛицИндекс)  + ","
			+ СокрП(Стр.ФизЛицКодСуб)  + ","
			+ СокрП(Стр.ФизЛицРайон)   + ","
			+ СокрП(Стр.ФизЛицГород)   + ","
			+ СокрП(Стр.ФизЛицНП)      + ","
			+ СокрП(Стр.ФизЛицУлица)   + "," 
			+ СокрП(Стр.ФизЛицДом)     + ","
			+ СокрП(Стр.ФизЛицКорпус)  + ","
			+ СокрП(Стр.ФизЛицКвартира);
			АдрМЖРукРез   = РегламентированнаяОтчетностьКлиентСервер.ПолучитьРеквизит(Стр.ФизЛицИноАдрес, АдрМЖРукРез);
		КонецЕсли;
	Иначе
		Если НЕ РегламентированнаяОтчетность.ИННСоответствуетТребованиямБезТипаНаСервере(ИННДиректор) Тогда
			Если ВыводитьСообщения Тогда
				СообщитьВТС("Неверно задан ИНН директора!", "Титульный", "ИННРук");
			КонецЕсли;
			СтатусПроверки = 1;
		КонецЕсли;
	КонецЕсли; 
	//сведения о директоре-		
		
	//сведения о бухгалтере+
	ИННБухгалтер = ПоказателиТитульный.ИННГБ;
	Если ПустаяСтрока(ИННБухгалтер) Тогда
		ТелСлужБух    = "-";
		ТелДомБух     = "-";
		АдрМЖБухРФ    = ",,,,,,,,,";
		АдрМЖБухРез   = "-";
		Стр = ТаблСведенийФизЛиц.Найти(ОргБухгалтер, "ФизЛицоФИО");
		Если Стр <> Неопределено Тогда			
			ТелСлужБух    = РегламентированнаяОтчетностьКлиентСервер.ПолучитьРеквизит(Стр.ФизЛицСлТел, ТелСлужБух);
			ТелДомБух     = РегламентированнаяОтчетностьКлиентСервер.ПолучитьРеквизит(Стр.ФизЛицДомТел, ТелДомБух);
			КодВидаДокБух  = РегламентированнаяОтчетностьКлиентСервер.ПолучитьРеквизит(Стр.ФизЛицДокКод, КодВидаДокБух);
			СерияИНомерБух = РегламентированнаяОтчетностьКлиентСервер.ПолучитьРеквизит(Стр.ФизЛицДокСерияНомер, СерияИНомерБух);
			УдЛичнБух      = Строка(КодВидаДокБух) + "," + СерияИНомерБух;
			ВыдУдЛичнБух   = РегламентированнаяОтчетностьКлиентСервер.ПолучитьРеквизит(Стр.ФизЛицДокВыдан, ВыдУдЛичнБух);
			ДатаУдЛичнБух  = РегламентированнаяОтчетностьКлиентСервер.ПолучитьРеквизит(Стр.ФизЛицДокДата, ДатаУдЛичнБух);
			АдрМЖБухРФ    = "643,"
			+ СокрП(Стр.ФизЛицИндекс)  + ","
			+ СокрП(Стр.ФизЛицКодСуб)  + ","
			+ СокрП(Стр.ФизЛицРайон)   + ","
			+ СокрП(Стр.ФизЛицГород)   + ","
			+ СокрП(Стр.ФизЛицНП)      + ","
			+ СокрП(Стр.ФизЛицУлица)   + "," 
			+ СокрП(Стр.ФизЛицДом)     + ","
			+ СокрП(Стр.ФизЛицКорпус)  + ","
			+ СокрП(Стр.ФизЛицКвартира);
			АдрМЖБухРез   = РегламентированнаяОтчетностьКлиентСервер.ПолучитьРеквизит(Стр.ФизЛицИноАдрес, АдрМЖБухРез);
		КонецЕсли;
	Иначе
		Если НЕ РегламентированнаяОтчетность.ИННСоответствуетТребованиямБезТипаНаСервере(ИННБухгалтер) Тогда
			Если ВыводитьСообщения Тогда
				СообщитьВТС("Неверно задан ИНН главного бухгалтера!", "Титульный", "ИННГБ");
			КонецЕсли;
			СтатусПроверки = 1;
		КонецЕсли;
	КонецЕсли; 
	//сведения о бухгалтере-		
				
	//сведения об УП+
	Если НЕ ПустаяСтрока(ОргУП) Тогда
		ИННУП = ПоказателиТитульный.ИННУП;
		Если ПустаяСтрока(ИННУП) Тогда
			ТелСлужУП    = "-";
			ТелДомУП     = "-";
			АдрМЖУПРФ    = ",,,,,,,,,";
			АдрМЖУПРез   = "-";
			Стр = ТаблСведенийФизЛиц.Найти(ОргУП, "ФизЛицоФИО");
			Если Стр <> Неопределено Тогда			
				ТелСлужУП    = РегламентированнаяОтчетностьКлиентСервер.ПолучитьРеквизит(Стр.ФизЛицСлТел, ТелСлужУП);
				ТелДомУП     = РегламентированнаяОтчетностьКлиентСервер.ПолучитьРеквизит(Стр.ФизЛицДомТел, ТелДомУП);
				КодВидаДокУП  = РегламентированнаяОтчетностьКлиентСервер.ПолучитьРеквизит(Стр.ФизЛицДокКод, КодВидаДокУП);
				СерияИНомерУП = РегламентированнаяОтчетностьКлиентСервер.ПолучитьРеквизит(Стр.ФизЛицДокСерияНомер, СерияИНомерУП);
				УдЛичнУП      = Строка(КодВидаДокУП) + "," + СерияИНомерУП;
				ВыдУдЛичнУП   = РегламентированнаяОтчетностьКлиентСервер.ПолучитьРеквизит(Стр.ФизЛицДокВыдан, ВыдУдЛичнУП);
				ДатаУдЛичнУП  = РегламентированнаяОтчетностьКлиентСервер.ПолучитьРеквизит(Стр.ФизЛицДокДата, ДатаУдЛичнУП);
				АдрМЖУПРФ    = "643,"
				+ СокрП(Стр.ФизЛицИндекс)  + ","
				+ СокрП(Стр.ФизЛицКодСуб)  + ","
				+ СокрП(Стр.ФизЛицРайон)   + ","
				+ СокрП(Стр.ФизЛицГород)   + ","
				+ СокрП(Стр.ФизЛицНП)      + ","
				+ СокрП(Стр.ФизЛицУлица)   + "," 
				+ СокрП(Стр.ФизЛицДом)     + ","
				+ СокрП(Стр.ФизЛицКорпус)  + ","
				+ СокрП(Стр.ФизЛицКвартира);
				АдрМЖУПРез   = РегламентированнаяОтчетностьКлиентСервер.ПолучитьРеквизит(Стр.ФизЛицИноАдрес, АдрМЖУПРез);
			КонецЕсли;
		Иначе
			Если НЕ РегламентированнаяОтчетность.ИННСоответствуетТребованиямБезТипаНаСервере(ИННУП) Тогда
				Если ВыводитьСообщения Тогда
					СообщитьВТС("Неверно задан ИНН уполномоченного представителя!", "Титульный", "ИННУП");
				КонецЕсли;
				СтатусПроверки = 1;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	//сведения об УП-
	
	// Если не заполнен ИНН руководителя организации.
	Если НЕ ЗначениеЗаполнено(ИННДиректор) Тогда
		Если НЕ ЗначениеЗаполнено(КодВидаДокРук) И НЕ ЗначениеЗаполнено(СерияИНомерРук) И НЕ ЗначениеЗаполнено(ВыдУдЛичнРук) И НЕ ЗначениеЗаполнено(ДатаУдЛичнРук) Тогда
			СообщитьВТС("Не задан ИНН директора!", "Титульный", "ИННРук");
			СтатусПроверки = 1;
		Иначе
			// Если не заполнен код документа, удостоверяющего личность.
			Если НЕ ЗначениеЗаполнено(КодВидаДокРук) Тогда
				Если ВыводитьСообщения Тогда
					СообщитьВТС("Для руководителя не заполнен код документа, удостоверяющего личность!", "ФизЛица", "ФизЛицДок", ОргДиректор);
				КонецЕсли;
				СтатусПроверки = 1;
			КонецЕсли;
			// Если не заполнены серия и номер документа, удостоверяющего личность.
			Если НЕ ЗначениеЗаполнено(СерияИНомерРук) Тогда
				Если ВыводитьСообщения Тогда
					СообщитьВТС("Для руководителя не заполнены серия и номер документа, удостоверяющего личность!", "ФизЛица", "ФизЛицДокСерияНомер", ОргДиректор);
				КонецЕсли;
				СтатусПроверки = 1;
			КонецЕсли;
			// Если не заполнено, кем выдан документ, удостоверяющий личность.
			Если НЕ ЗначениеЗаполнено(ВыдУдЛичнРук) Тогда
				Если ВыводитьСообщения Тогда
					СообщитьВТС("Для руководителя не заполнено, кем выдан документ, удостоверяющий личность!", "ФизЛица", "ФизЛицДокВыдан", ОргДиректор);
				КонецЕсли;
				СтатусПроверки = 1;
			КонецЕсли;
			// Если не заполнена дата выдачи документа, удостоверяющего личность.
			Если НЕ ЗначениеЗаполнено(ДатаУдЛичнРук) ИЛИ СтрЗаменить(ДатаУдЛичнРук, " ", "") = ".." Тогда
				Если ВыводитьСообщения Тогда
					СообщитьВТС("Для руководителя не заполнена дата выдачи документа, удостоверяющего личность!", "ФизЛица", "ФизЛицДокДата", ОргДиректор);
				КонецЕсли;
				СтатусПроверки = 1;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
		
	// Если не заполнен ИНН главного бухгалтера организации.
	Если НЕ ЗначениеЗаполнено(ИННБухгалтер) Тогда
		Если НЕ ЗначениеЗаполнено(КодВидаДокБух) И НЕ ЗначениеЗаполнено(СерияИНомерБух) И НЕ ЗначениеЗаполнено(ВыдУдЛичнБух) И НЕ ЗначениеЗаполнено(ДатаУдЛичнБух) Тогда
			СообщитьВТС("Не задан ИНН главного бухгалтера!", "Титульный", "ИННБух");
			СтатусПроверки = 1;
		Иначе
			// Если не заполнен код документа, удостоверяющего личность.
			Если НЕ ЗначениеЗаполнено(КодВидаДокБух) Тогда
				Если ВыводитьСообщения Тогда
					СообщитьВТС("Для главного бухгалтера не заполнен код документа, удостоверяющего личность!", "ФизЛица", "ФизЛицДок", ОргБухгалтер);
				КонецЕсли;
				СтатусПроверки = 1;
			КонецЕсли;
			// Если не заполнены серия и номер документа, удостоверяющего личность.
			Если НЕ ЗначениеЗаполнено(СерияИНомерБух) Тогда
				Если ВыводитьСообщения Тогда
					СообщитьВТС("Для главного бухгалтера не заполнены серия и номер документа, удостоверяющего личность!", "ФизЛица", "ФизЛицДокСерияНомер", ОргБухгалтер);
				КонецЕсли;
				СтатусПроверки = 1;
			КонецЕсли;
			// Если не заполнено, кем выдан документ, удостоверяющий личность.
			Если НЕ ЗначениеЗаполнено(ВыдУдЛичнБух) Тогда
				Если ВыводитьСообщения Тогда
					СообщитьВТС("Для главного бухгалтера не заполнено, кем выдан документ, удостоверяющий личность!", "ФизЛица", "ФизЛицДокВыдан", ОргБухгалтер);
				КонецЕсли;
				СтатусПроверки = 1;
			КонецЕсли;
			// Если не заполнена дата выдачи документа, удостоверяющего личность.
			Если НЕ ЗначениеЗаполнено(ДатаУдЛичнБух) ИЛИ СтрЗаменить(ДатаУдЛичнБух, " ", "") = ".." Тогда
				Если ВыводитьСообщения Тогда
					СообщитьВТС("Для главного бухгалтера не заполнена дата выдачи документа, удостоверяющего личность!", "ФизЛица", "ФизЛицДокДата", ОргБухгалтер);
				КонецЕсли;
				СтатусПроверки = 1;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ОргУП) Тогда
		// Если не заполнен ИНН уполномоченного представителя
		Если НЕ ЗначениеЗаполнено(ИННУП) Тогда
			Если НЕ ЗначениеЗаполнено(КодВидаДокУП) И НЕ ЗначениеЗаполнено(СерияИНомерУП) И НЕ ЗначениеЗаполнено(ВыдУдЛичнУП) И НЕ ЗначениеЗаполнено(ДатаУдЛичнУП) Тогда
				СообщитьВТС("Не задан ИНН уполномоченного представителя!", "Титульный", "ИННУП");
				СтатусПроверки = 1;
			Иначе
				// Если не заполнен код документа, удостоверяющего личность.
				Если НЕ ЗначениеЗаполнено(КодВидаДокУП) Тогда
					Если ВыводитьСообщения Тогда
						СообщитьВТС("Для уполномоченного представителя не заполнен код документа, удостоверяющего личность!", "ФизЛица", "ФизЛицДок", ОргУП);
					КонецЕсли;
					СтатусПроверки = 1;
				КонецЕсли;
				// Если не заполнены серия и номер документа, удостоверяющего личность.
				Если НЕ ЗначениеЗаполнено(СерияИНомерУП) Тогда
					Если ВыводитьСообщения Тогда
						СообщитьВТС("Для уполномоченного представителя не заполнены серия и номер документа, удостоверяющего личность!", "ФизЛица", "ФизЛицДокСерияНомер", ОргУП);
					КонецЕсли;
					СтатусПроверки = 1;
				КонецЕсли;
				// Если не заполнено, кем выдан документ, удостоверяющий личность.
				Если НЕ ЗначениеЗаполнено(ВыдУдЛичнУП) Тогда
					Если ВыводитьСообщения Тогда
						СообщитьВТС("Для уполномоченного представителя не заполнено, кем выдан документ, удостоверяющий личность!", "ФизЛица", "ФизЛицДокВыдан", ОргУП);
					КонецЕсли;
					СтатусПроверки = 1;
				КонецЕсли;
				// Если не заполнена дата выдачи документа, удостоверяющего личность.
				Если НЕ ЗначениеЗаполнено(ДатаУдЛичнУП) ИЛИ СтрЗаменить(ДатаУдЛичнУП, " ", "") = ".." Тогда
					Если ВыводитьСообщения Тогда
						СообщитьВТС("Для уполномоченного представителя не заполнена дата выдачи документа, удостоверяющего личность!", "ФизЛица", "ФизЛицДокДата", ОргУП);
					КонецЕсли;
					СтатусПроверки = 1;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
			
	Возврат (СтатусПроверки <> 1);	
	
КонецФункции

&НаСервере
Процедура СообщитьВТС(Описание, Раздел, ИмяЯчейки, ФИО = "")
	
	РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, Описание, Раздел, ИмяЯчейки, ФИО);
	
КонецПроцедуры

&НаСервере
Процедура ВыгрузитьТитульныйЛистИСведенияОФизЛицах(Текст)
	
	//определение источников данных для проверки
	Данные = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить();
	Орг = СтруктураРеквизитовФормы.мСохраненныйДок.Организация;
	Инф = ВычислитьПоказателиТитульногоЛистаИСведенияОФизЛицах(Ложь, Ложь);
	ПоказателиТитульный = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(РегламентированнаяОтчетность.СкопированнаяСтруктура(Инф.Получить(0).Значение.Получить(0).Данные));
	ДанныеФизЛиц = Инф.Получить(1).Значение;
	//Получили данные
	
	//Определим основные показатели
	ОргКПП					= СокрЛП(ПоказателиТитульный.КПП1);
	ОргИНН					= СокрЛП(СтруктураРеквизитовФормы.Организация.ИНН);
	ПоМестуНахождения		= ?(ПустаяСтрока(ПоказателиТитульный.ТипОрг2), 1, 2);
	Если Данные.Свойство("Представляется") Тогда
		ПредставляетсяЗнач = ?(НЕ ЗначениеЗаполнено(Данные.Представляется), 0, Число(Данные.Представляется));
	Иначе
		ПредставляетсяЗнач = ?(Данные.ДокПредстРО, 1, 2);
	КонецЕсли;
	ОргДиректор				= ПоказателиТитульный.ОргДиректор;
	ОргБухгалтер			= ПоказателиТитульный.ОргБухгалтер;
	ОргУП					= ПоказателиТитульный.ОргУП;
	ОргНазв					= СокрЛП(ПоказателиТитульный.ОргНазв);
	ОргТелефон				= ВРЕГ(Лев(СокрЛП(ПоказателиТитульный.ТелОрганизации), 20));
	ВидДок					= ПоказателиТитульный.ВидДок;
	ПризнВидаДок			= ?(ПустаяСтрока(ВидДок), 1, Число(ВидДок));
	НомКорректировки		= ?(ПустаяСтрока(ПоказателиТитульный.НомКоррект), 0, Число(ПоказателиТитульный.НомКоррект)); 
	ПризнОтчетногоПериода	= ?(СтруктураРеквизитовФормы.мСохраненныйДок.Периодичность = Перечисления.Периодичность.Месяц, 1, Месяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) % 12);
	ВидДеят					= ВРЕГ(СокрЛП(ПоказателиТитульный.ВидДеят)); 
	//Определили основные показатели
	
	// Общие сведения служебной части
	
	//////// Начало блока <СВЕДЕНИЯ ОБ ОРГАНИЗАЦИИ>
	////
	Если НЕ ПустаяСтрока(ПоказателиТитульный.АдрЮР) Тогда
		СтруктураАдрОрг = РегламентированнаяОтчетностьКлиентСервер.РазложитьАдрес(ПоказателиТитульный.АдрЮР);
		Если НЕ ЗначениеЗаполнено(СтруктураАдрОрг.Индекс) Тогда
			СтруктураАдрОрг.Индекс = "0";
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(СтруктураАдрОрг.Регион) Тогда
			СтруктураАдрОрг.Регион = "-";
		КонецЕсли;
		ПоказателиТитульный.АдрЮр = РегламентированнаяОтчетность.СобратьАдрес(СтруктураАдрОрг);
	КонецЕсли;
	
	Текст.ДобавитьСтроку("НаимЮЛПол:" + ВРег(СокрЛП(СтрЗаменить(ОргНазв, Символы.ПС, ""))));
	Текст.ДобавитьСтроку("ИННЮЛ:" + ОргИНН);  
	Текст.ДобавитьСтроку("КППЮЛ:" + ОргКПП);
	Текст.ДобавитьСтроку("ОГРН:"  + ?(ПустаяСтрока(ПоказателиТитульный.ОГРН), "-", СокрЛП(ПоказателиТитульный.ОГРН)));
	Текст.ДобавитьСтроку("ОКАТО:" + ?(ПустаяСтрока(ПоказателиТитульный.ОКАТОТитульный), "-", Лев(СокрЛП(ПоказателиТитульный.ОКАТОТитульный), 11)));
	Текст.ДобавитьСтроку("АдрОрг:" + ВРЕГ(?(ПустаяСтрока(ПоказателиТитульный.АдрЮР), "643,0,-,,,,,,,", СокрЛП(ПоказателиТитульный.АдрЮР))));
	Текст.ДобавитьСтроку("ТелОрг:" + СокрЛП(ОргТелефон));
	Текст.ДобавитьСтроку("###");
	Для Каждого Стр Из Инф.Получить(0).Значение Цикл
		
		Если ЗначениеЗаполнено(ВидДеят) Тогда
			ТитулЛист = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(РегламентированнаяОтчетность.СкопированнаяСтруктура(Стр.Данные));
			Текст.ДобавитьСтроку("ВидДеят:" + ?(ПустаяСтрока(ВидДеят), "-", ВидДеят));
			Текст.ДобавитьСтроку("СерЛиц:" + ВРЕГ(СокрЛП(ТитулЛист.СерЛиц)));
			Текст.ДобавитьСтроку("НомерЛиц:" + ВРЕГ(СокрЛП(ТитулЛист.НомерЛиц)));
			Текст.ДобавитьСтроку("ДатаНачЛиц:" + СокрЛП(Формат(ТитулЛист.ДатаНачЛиц, "ДФ=dd.MM.yyyy; ДЛФ=D; ДП=00.00.0000")));
			Текст.ДобавитьСтроку("ДатаОконЛиц:" + СокрЛП(Формат(ТитулЛист.ДатаОконЛиц, "ДФ=dd.MM.yyyy; ДЛФ=D; ДП=00.00.0000")));
			Текст.ДобавитьСтроку("###");
		КонецЕсли;
		
	КонецЦикла;
	////
	//////// Конец блока <СВЕДЕНИЯ ОБ ОРГАНИЗАЦИИ>
		
	/////
	ТаблСведенийФизЛиц = ДанныеФизЛиц;			
	
	//////// Начало блока <СВЕДЕНИЯ О РУКОВОДСТВЕ ОРГАНИЗАЦИИ>
	////
	
	ИННДиректор = ПоказателиТитульный.ИННРук;
	Текст.ДобавитьСтроку("ФИОРук:" + РегламентированнаяОтчетность.СтрЗаменитьПробелы(ОргДиректор)); 
	Текст.ДобавитьСтроку("ИННРук:" + ИННДиректор);  
	
	Если ПустаяСтрока(ИННДиректор) И НЕ ПустаяСтрока(ОргДиректор) Тогда
		ТелСлужРук    = "";
		ТелДомРук     = "";
		КодВидаДокРук = "-";
		СерияИНомерРук= "-";
		ВыдУдЛичнРук  = "-";
		ДатаУдЛичнРук = "00.00.0000"; 
		АдрМЖРукРФ    = "643,0,-,,,,,,,";
		АдрМЖРукРез   = "-"; 
		Стр = ТаблСведенийФизЛиц.Найти(ОргДиректор, "ФизЛицоФИО");
		Если Стр <> Неопределено Тогда			
			ТелСлужРук    = РегламентированнаяОтчетностьКлиентСервер.ПолучитьРеквизит(Стр.ФизЛицСлТел, ТелСлужРук);
			ТелДомРук     = РегламентированнаяОтчетностьКлиентСервер.ПолучитьРеквизит(Стр.ФизЛицДомТел, ТелДомРук);
			КодВидаДокРук  = РегламентированнаяОтчетностьКлиентСервер.ПолучитьРеквизит(Стр.ФизЛицДокКод, КодВидаДокРук);
			СерияИНомерРук = РегламентированнаяОтчетностьКлиентСервер.ПолучитьРеквизит(Стр.ФизЛицДокСерияНомер, СерияИНомерРук);
			УдЛичнРук      = Строка(КодВидаДокРук) + "," + СерияИНомерРук;
			ВыдУдЛичнРук   = РегламентированнаяОтчетностьКлиентСервер.ПолучитьРеквизит(Стр.ФизЛицДокВыдан, ВыдУдЛичнРук);
			ДатаУдЛичнРук = РегламентированнаяОтчетностьКлиентСервер.ПолучитьРеквизит(Стр.ФизЛицДокДата, ДатаУдЛичнРук);
			АдрМЖРукРФ    = "643,"
			+ ?(ПустаяСтрока(Стр.ФизЛицИндекс), "0", СокрП(Стр.ФизЛицИндекс)) + ","
			+ ?(ПустаяСтрока(Стр.ФизЛицКодСуб), "-", СокрП(Стр.ФизЛицКодСуб)) + ","
			+ СокрП(Стр.ФизЛицРайон)   + ","
			+ СокрП(Стр.ФизЛицГород)   + ","
			+ СокрП(Стр.ФизЛицНП)      + ","
			+ СокрП(Стр.ФизЛицУлица)   + "," 
			+ СокрП(Стр.ФизЛицДом)     + ","
			+ СокрП(Стр.ФизЛицКорпус)  + ","
			+ СокрП(Стр.ФизЛицКвартира);
			АдрМЖРукРез   = РегламентированнаяОтчетностьКлиентСервер.ПолучитьРеквизит(Стр.ФизЛицИноАдрес, АдрМЖРукРез);
		КонецЕсли;
		Текст.ДобавитьСтроку("ТелСлужРук:"    + ВРЕГ(СокрЛП(Лев(ТелСлужРук, 20))));
		Текст.ДобавитьСтроку("ТелДомРук:"     + ВРЕГ(СокрЛП(Лев(ТелДомРук, 20))));
		Текст.ДобавитьСтроку("УдЛичнРук:"     + ВРЕГ(УдЛичнРук));  
		Текст.ДобавитьСтроку("ВыдУдЛичнРук:"  + ВРЕГ(ВыдУдЛичнРук));  
		Если ДатаУдЛичнРук = "  .  .    " ИЛИ ДатаУдЛичнРук = ".." Тогда
			ДатаУдЛичнРукС = "00.00.0000";
		Иначе
			ДатаУдЛичнРукС = Формат(ДатаУдЛичнРук, "ДФ=dd.MM.yyyy; ДЛФ=D");
		КонецЕсли;
		Текст.ДобавитьСтроку("ДатаУдЛичнРук:" + ДатаУдЛичнРукС);  
		Текст.ДобавитьСтроку("АдрМЖРук:"    + ВРег(АдрМЖРукРФ)); 
		Текст.ДобавитьСтроку("АдрМЖРукРез:"   + ВРег(СокрЛП(Лев(АдрМЖРукРез, 128))));  
	КонецЕсли; 
		
	ИННБухгалтер = ПоказателиТитульный.ИННГБ;
	Текст.ДобавитьСтроку("ФИОБух:" + РегламентированнаяОтчетность.СтрЗаменитьПробелы(ОргБухгалтер)); 
	Текст.ДобавитьСтроку("ИННБух:" + ИННБухгалтер);  
	Если ПустаяСтрока(ИННБухгалтер) И НЕ ПустаяСтрока(ОргБухгалтер) Тогда
		ТелСлужБух    = "";
		ТелДомБух     = "";
		КодВидаДок    = "-";
		СерияИНомер   = "-";
		ВыдУдЛичн     = "-";
		ДатаУдЛичнБух = "00.00.0000"; 
		АдрМЖБухРФ    = "643,0,-,,,,,,,";
		АдрМЖБухРез   = "-";
		Стр = ТаблСведенийФизЛиц.Найти(ОргБухгалтер, "ФизЛицоФИО");
		Если Стр <> Неопределено Тогда			
			ТелСлужБух    = РегламентированнаяОтчетностьКлиентСервер.ПолучитьРеквизит(Стр.ФизЛицСлТел, ТелСлужБух);
			ТелДомБух     = РегламентированнаяОтчетностьКлиентСервер.ПолучитьРеквизит(Стр.ФизЛицДомТел, ТелДомБух);
			КодВидаДокБух  = РегламентированнаяОтчетностьКлиентСервер.ПолучитьРеквизит(Стр.ФизЛицДокКод, КодВидаДокБух);
			СерияИНомерБух = РегламентированнаяОтчетностьКлиентСервер.ПолучитьРеквизит(Стр.ФизЛицДокСерияНомер, СерияИНомерБух);
			УдЛичнБух      = Строка(КодВидаДокБух) + "," + СерияИНомерБух;
			ВыдУдЛичнБух   = РегламентированнаяОтчетностьКлиентСервер.ПолучитьРеквизит(Стр.ФизЛицДокВыдан, ВыдУдЛичнБух);
			ДатаУдЛичнБух  = РегламентированнаяОтчетностьКлиентСервер.ПолучитьРеквизит(Стр.ФизЛицДокДата, ДатаУдЛичнБух);
			АдрМЖБухРФ    = "643,"
			+ ?(ПустаяСтрока(Стр.ФизЛицИндекс), "0", СокрП(Стр.ФизЛицИндекс)) + ","
			+ ?(ПустаяСтрока(Стр.ФизЛицКодСуб), "-", СокрП(Стр.ФизЛицКодСуб)) + ","
			+ СокрП(Стр.ФизЛицРайон)   + ","
			+ СокрП(Стр.ФизЛицГород)   + ","
			+ СокрП(Стр.ФизЛицНП)      + ","
			+ СокрП(Стр.ФизЛицУлица)   + "," 
			+ СокрП(Стр.ФизЛицДом)     + ","
			+ СокрП(Стр.ФизЛицКорпус)  + ","
			+ СокрП(Стр.ФизЛицКвартира);
			АдрМЖБухРез   = РегламентированнаяОтчетностьКлиентСервер.ПолучитьРеквизит(Стр.ФизЛицИноАдрес, АдрМЖБухРез);
		КонецЕсли;
		Текст.ДобавитьСтроку("ТелСлужБух:"    + ВРЕГ(СокрЛП(Лев(ТелСлужБух, 20))));  
		Текст.ДобавитьСтроку("ТелДомБух:"     + ВРЕГ(СокрЛП(Лев(ТелДомБух, 20))));
		Текст.ДобавитьСтроку("УдЛичнБух:"     + ВРЕГ(УдЛичнБух));  
		Текст.ДобавитьСтроку("ВыдУдЛичнБух:"  + ВРЕГ(ВыдУдЛичнБух)); 
		Если ДатаУдЛичнБух = "  .  .    " ИЛИ ДатаУдЛичнБух = ".." Тогда
			ДатаУдЛичнБухС = "00.00.0000";
		Иначе
			ДатаУдЛичнБухС = Формат(ДатаУдЛичнБух, "ДФ=dd.MM.yyyy; ДЛФ=D");
		КонецЕсли;
		Текст.ДобавитьСтроку("ДатаУдЛичнБух:" + ДатаУдЛичнБухС);  
		Текст.ДобавитьСтроку("АдрМЖБух:"    + ВРег(АдрМЖБухРФ)); 
		Текст.ДобавитьСтроку("АдрМЖБухРез:"   + ВРег(СокрЛП(Лев(АдрМЖБухРез, 128))));  
	КонецЕсли; 
		
	ИННУП = ПоказателиТитульный.ИННУП;
	Текст.ДобавитьСтроку("ФИОУпПред:" + РегламентированнаяОтчетность.СтрЗаменитьПробелы(ОргУП)); 
	Текст.ДобавитьСтроку("ИННУпПред:" + ИННУП);
	Если ПустаяСтрока(ИННУП) И НЕ ПустаяСтрока(ОргУП) Тогда
		ТелСлужУпПред    = "";
		ТелДомУпПред     = "";
		КодВидаДок    = "-";
		СерияИНомер   = "-";
		ВыдУдЛичн     = "-";
		ДатаУдЛичнУпПред = "00.00.0000"; 
		АдрМЖУпПредРФ    = "643,0,-,,,,,,,";
		АдрМЖУпПредРез   = "-";
		Стр = ТаблСведенийФизЛиц.Найти(ОргУП, "ФизЛицоФИО");
		Если Стр <> Неопределено Тогда			
			ТелСлужУпПред    = РегламентированнаяОтчетностьКлиентСервер.ПолучитьРеквизит(Стр.ФизЛицСлТел, ТелСлужУпПред);
			ТелДомУпПред     = РегламентированнаяОтчетностьКлиентСервер.ПолучитьРеквизит(Стр.ФизЛицДомТел, ТелДомУпПред);
			КодВидаДокУпПред  = РегламентированнаяОтчетностьКлиентСервер.ПолучитьРеквизит(Стр.ФизЛицДокКод, КодВидаДокУпПред);
			СерияИНомерУпПред = РегламентированнаяОтчетностьКлиентСервер.ПолучитьРеквизит(Стр.ФизЛицДокСерияНомер, СерияИНомерУпПред);
			УдЛичнУпПред      = Строка(КодВидаДокУпПред) + "," + СерияИНомерУпПред;
			ВыдУдЛичнУпПред   = РегламентированнаяОтчетностьКлиентСервер.ПолучитьРеквизит(Стр.ФизЛицДокВыдан, ВыдУдЛичнУпПред);
			ДатаУдЛичнУпПред  = РегламентированнаяОтчетностьКлиентСервер.ПолучитьРеквизит(Стр.ФизЛицДокДата, ДатаУдЛичнУпПред);
			АдрМЖУпПредРФ    = "643,"
			+ ?(ПустаяСтрока(Стр.ФизЛицИндекс), "0", СокрП(Стр.ФизЛицИндекс)) + ","
			+ ?(ПустаяСтрока(Стр.ФизЛицКодСуб), "-", СокрП(Стр.ФизЛицКодСуб)) + ","
			+ СокрП(Стр.ФизЛицРайон)   + ","
			+ СокрП(Стр.ФизЛицГород)   + ","
			+ СокрП(Стр.ФизЛицНП)      + ","
			+ СокрП(Стр.ФизЛицУлица)   + "," 
			+ СокрП(Стр.ФизЛицДом)     + ","
			+ СокрП(Стр.ФизЛицКорпус)  + ","
			+ СокрП(Стр.ФизЛицКвартира);
			АдрМЖУпПредРез   = РегламентированнаяОтчетностьКлиентСервер.ПолучитьРеквизит(Стр.ФизЛицИноАдрес, АдрМЖУпПредРез);
		Иначе
			ТелСлужУпПред		= "";
			ТелДомУпПред		= "";
			УдЛичнУпПред		= "0,-";
			ВыдУдЛичнУпПред		= "-";
			ДатаУдЛичнУпПред	= "00.00.0000";
			АдрМЖУпПредРФ		= "643,0,-,,,,,,,";
			АдрМЖУпПредРез		= "-";
		КонецЕсли;
		Текст.ДобавитьСтроку("ТелСлужУпПред:"    + ВРЕГ(СокрЛП(Лев(ТелСлужУпПред, 20))));
		Текст.ДобавитьСтроку("ТелДомУпПред:"     + ВРЕГ(СокрЛП(Лев(ТелДомУпПред, 20))));
		Текст.ДобавитьСтроку("УдЛичнУпПред:"     + ВРЕГ(УдЛичнУпПред));
		Текст.ДобавитьСтроку("ВыдУдЛичнУпПред:"  + ВРЕГ(ВыдУдЛичнУпПред));
		Если ДатаУдЛичнУпПред = "  .  .    " ИЛИ ДатаУдЛичнУпПред = ".." Тогда
			ДатаУдЛичнУпПредС = "00.00.0000";
		Иначе
			ДатаУдЛичнУпПредС = Формат(ДатаУдЛичнУпПред, "ДФ=dd.MM.yyyy; ДЛФ=D");
		КонецЕсли;
		Текст.ДобавитьСтроку("ДатаУдЛичнУпПред:" + ДатаУдЛичнУпПредС);
		Текст.ДобавитьСтроку("АдрМЖУпПред:"    + ВРег(АдрМЖУпПредРФ));
		Текст.ДобавитьСтроку("АдрМЖУпПредРез:"   + ВРег(СокрЛП(Лев(АдрМЖУпПредРез, 128))));
	КонецЕсли;
		
	Текст.ДобавитьСтроку("###");
	////
	//////// Конец блока <СВЕДЕНИЯ О РУКОВОДСТВЕ ОРГАНИЗАЦИИ> 
	
	СоотвПризФОтчВидамДеятельности = Новый СписокЗначений;
	СоотвПризФОтчВидамДеятельности.Добавить("02", "1");
	СоотвПризФОтчВидамДеятельности.Добавить("03", "2");
	СоотвПризФОтчВидамДеятельности.Добавить("04", "3");
	ПризФОтч = СоотвПризФОтчВидамДеятельности.Количество() + 1;
	СоотвПризФОтч = СоотвПризФОтчВидамДеятельности.НайтиПоЗначению(ВидДеят);
	Если СоотвПризФОтч <> Неопределено Тогда
		ПризФОтч = СоотвПризФОтч.Представление;
	КонецЕсли;
	
	//////// Начало блока <ОПИСАНИЕ ФОРМЫ ОТЧЕТНОСТИ>
	////                            
	Текст.ДобавитьСтроку("ПризФОтч:" + ПризФОтч);
	Текст.ДобавитьСтроку("НаимФОтч:" + ВРЕГ(СтруктураРеквизитовФормы.НаименованиеОтчетаДляВыгрузки));
	Текст.ДобавитьСтроку("ПериодВерОтч:18.03.2008,");
	Текст.ДобавитьСтроку("ПризВидДок:"     + ПризнВидаДок);
	Если ПризнВидаДок = 3 Тогда
		Текст.ДобавитьСтроку("НомерКорр:"      + НомКорректировки);
	Конецесли;     
	Текст.ДобавитьСтроку("ПризПериодОтч:"  + ПризнОтчетногоПериода);
	Текст.ДобавитьСтроку("ГодПериодОтч:"   + Формат(Год(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета),"ЧГ = 0"));
	Если ПоМестуНахождения = 2 Тогда
		Текст.ДобавитьСтроку("ДокПредст:220");
	ИначеЕсли ПредставляетсяЗнач = 4 Тогда
		Текст.ДобавитьСтроку("ДокПредст:230");
	Иначе
		Текст.ДобавитьСтроку("ДокПредст:210");
		Если ПредставляетсяЗнач = 1 Тогда
			Текст.ДобавитьСтроку("ДокПредстРО:1");
		ИначеЕсли ПредставляетсяЗнач = 2 Тогда
			Текст.ДобавитьСтроку("ДокПредстРО:3");
		ИначеЕсли ПредставляетсяЗнач = 3 Тогда
			Текст.ДобавитьСтроку("ДокПредстРО:2");
		КонецЕсли;
	КонецЕсли;
	Текст.ДобавитьСтроку("КолПокФОтч:0");//этот показатель далее меняется
	Текст.ДобавитьСтроку("###");
	////
	//////// Конец блока <ОПИСАНИЕ ФОРМЫ ОТЧЕТНОСТИ> 
	
КонецПроцедуры

&НаСервере
Процедура УниверсальнаяВыгрузкаПредписанныхПоказателей(Текст, БратьИзФормы = Истина)
	
	ДанныеОтчета = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить();
	ПоказателиОтчета = ДанныеОтчета.ПоказателиОтчета;
	ИмяРазделаПред = "";
	Разделы = Новый Структура;
	Показатели = РеквизитФормыВЗначение("мТаблицаСоставПоказателей", Тип("ТаблицаЗначений")).Скопировать();
	Показатели.Свернуть("ИмяПоляТаблДокумента, ПризнМногострочности","");
	ТекСостРазд = Неопределено;
	ФорматВыгрузки = "ЧЦ=15; ЧДЦ=0; ЧГ=0";
	Показатели.Сортировать("ИмяПоляТаблДокумента Убыв, ПризнМногострочности"); // для изменения порядка следования разделов
	
	Для Каждого Стр Из Показатели Цикл
		ИмяРаздела = Стр.ИмяПоляТаблДокумента;
		Разделы.Свойство(ИмяРаздела, ТекСостРазд);
		Призн = Стр.ПризнМногострочности;
		Если Призн = "*" Тогда
			Если (ТекСостРазд = "/") Тогда
				Разделы.Вставить(ИмяРаздела, "#");
			ИначеЕсли (ТекСостРазд = Неопределено) ИЛИ (ТекСостРазд = "") Тогда
				Разделы.Вставить(ИмяРаздела, "*");
			КонецЕсли;
		ИначеЕсли Призн = "/" Тогда
			Если (ТекСостРазд = "*") Тогда
				Разделы.Вставить(ИмяРаздела, "#");
			ИначеЕсли (ТекСостРазд = Неопределено) ИЛИ (ТекСостРазд = "")Тогда
				Разделы.Вставить(ИмяРаздела, "/");
			КонецЕсли;
		ИначеЕсли Призн = "#" Тогда
			Продолжить;
		ИначеЕсли Призн = "" Тогда
			Если ТекСостРазд = Неопределено Тогда
				Разделы.Вставить(ИмяРаздела, "");
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	//Выгружаем поочередно разделы
	Для Каждого Разд Из Разделы Цикл
		ИмяРаздела = Разд.Ключ;
		Призн = Разд.Значение;
		
		ПустойРаздел = РазделПуст(Разд, ПоказателиОтчета);
		
		Если ПустойРаздел И ИмяРаздела = "Декларация" Тогда
			Текст.ДобавитьСтроку("П000000000001:");
			Текст.ДобавитьСтроку("П000000000002:");
			Текст.ДобавитьСтроку("П000000000003:");
			Текст.ДобавитьСтроку("П000000000004:");
			Текст.ДобавитьСтроку("П000000000005:");
			Текст.ДобавитьСтроку("П000000000006:");
			Текст.ДобавитьСтроку("П000000000007:");
			Текст.ДобавитьСтроку("П000000000008:");
			Текст.ДобавитьСтроку("П000000000009:");
			Текст.ДобавитьСтроку("П000000000010:");
			Текст.ДобавитьСтроку("П000000000011:");
			Текст.ДобавитьСтроку("П000000000012:");
			Текст.ДобавитьСтроку("П000000000013:");
			Текст.ДобавитьСтроку("П000000000014:");
			Текст.ДобавитьСтроку("П000000000015:");
			Текст.ДобавитьСтроку("П000000000016:");
			Текст.ДобавитьСтроку("###");
			Продолжить;
		КонецЕсли;
		
		Если Призн = "#" Тогда //раздел многостранично-многострочный

			ТаблицаСтраницРаздела = Неопределено;
			мСтруктураМногостраничныхРазделов.Свойство(ИмяРаздела, ТаблицаСтраницРаздела);
			
			ТаблицаСтраницРаздела = ЭтаФорма[ТаблицаСтраницРаздела];
			
			НомСтр = 0;
			Подразделы = РегламентированнаяОтчетность.РазбитьПоПодразделам(ИмяРаздела, мТаблицаСоставПоказателей);
			СтрокиФорматаТекРаздела = мТаблицаСоставПоказателей.НайтиСтроки(Новый Структура("ИмяПоляТаблДокумента",ИмяРаздела));
			Для Каждого Стр из ТаблицаСтраницРаздела Цикл
				
				//проверка на пустую страницу раздела
				ТекПок = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(РегламентированнаяОтчетность.СкопированнаяСтруктура(Стр.Данные[0].Значение));
				НомСтр = НомСтр + 1;
				СтраницаПустая = 1;
				Для Каждого Подраздел Из Подразделы Цикл
					НачПоказатель = Подраздел.Ключ;
					ТипПодраздела = Подраздел.Значение;
					
					//в многострочном разделе возможны только многострочные и обычные подразделы
					Если ТипПодраздела = "/" Тогда//многострочный подраздел
						СтрФорматаПодраздела = Новый СписокЗначений;
						ПодразделНайден = Ложь;
						ПервыйПроход = Истина;
						Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
							КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
							ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
							ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
							Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
								ПодразделНайден = Истина;
							КонецЕсли;
							Если НЕ ПодразделНайден Тогда
								Продолжить;
							КонецЕсли;
							Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
								Продолжить;
							КонецЕсли;
							Если ПервыйПроход Тогда
								ПервыйПроход = Ложь;
							Иначе	
								ВЗнач = Неопределено;
								Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
									Прервать;
								КонецЕсли;
							КонецЕсли;
							СтрФорматаПодраздела.Добавить(СтрРаздела);						
						КонецЦикла;
						//определили показатели подраздела. Теперь выведем их для каждой строки
						
						ном = 1;
						ЗначениеПоля = Неопределено;
						
						ВыходИзДвойногоЦикла = Ложь;
						
						Пока Истина Цикл
							Для Каждого СтрФормата Из СтрФорматаПодраздела Цикл
								ТекОписатель = СтрФормата.Значение;
								КодПоказателя = ТекОписатель.КодПоказателяПоСоставу;
								ИмяЯчейки = ?(Пустаястрока(ТекОписатель.КодПоказателяПоФорме), КодПоказателя, ТекОписатель.КодПоказателяПоФорме); 
								ИндексЗнакаВИмениЯчейки = СтрНайти(ИмяЯчейки, "_");
								Если ИндексЗнакаВИмениЯчейки > 0 Тогда
									ИмяЯчейки = Лев(ИмяЯчейки, ИндексЗнакаВИмениЯчейки - 1);
								КонецЕсли;
								ПризнакФормата = ТекОписатель.ТипДанныхПоказателя;
								Если НЕ ТекПок.Свойство(ИмяЯчейки + "_" + ном, ЗначениеПоля) Тогда
									
									ВыходИзДвойногоЦикла = Истина;
									Прервать;
									
								КонецЕсли;
								СтраницаПустая = Мин(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение("", ТекОписатель, ЗначениеПоля, Ложь, НомСтр, ном, 1), СтраницаПустая);
							КонецЦикла;
							
							Если ВыходИзДвойногоЦикла Тогда
								Прервать;
							КонецЕсли;
														
							ном = ном + 1;
						КонецЦикла;
					ИначеЕсли ТипПодраздела = "" Тогда//обычный подраздел
						ПодразделНайден = Ложь;
						ПервыйПроход = Истина;
						Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
							КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
							ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
							ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
							Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
								ПодразделНайден = Истина;
							КонецЕсли;
							Если НЕ ПодразделНайден Тогда
								Продолжить;
							КонецЕсли;
							Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
								Продолжить;
							КонецЕсли;
							Если ПервыйПроход Тогда
								ПервыйПроход = Ложь;
							Иначе	
								ВЗнач = Неопределено;
								Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
									Прервать;
								КонецЕсли;
							КонецЕсли;
							ЗначениеЯчейки = ТекПок[ИмяЯчейки];
							СтраницаПустая = Мин(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение("", СтрРаздела, ЗначениеЯчейки, Ложь, НомСтр, , 1), СтраницаПустая);
						КонецЦикла;
					КонецЕсли;//многострочный или обычный подраздел
				Конеццикла;//по подразделам
				
				Для Каждого Подраздел Из Подразделы Цикл
					НачПоказатель = Подраздел.Ключ;
					ТипПодраздела = Подраздел.Значение;
					
					//в многострочном разделе возможны только многострочные и обычные подразделы
					Если ТипПодраздела = "/" Тогда//многострочный подраздел
						СтрФорматаПодраздела = Новый СписокЗначений;
						ПодразделНайден = Ложь;
						ПервыйПроход = Истина;
						Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
							КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
							ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
							ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
							Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
								ПодразделНайден = Истина;
							КонецЕсли;
							Если НЕ ПодразделНайден Тогда
								Продолжить;
							КонецЕсли;
							Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
								Продолжить;
							КонецЕсли;
							Если ПервыйПроход Тогда
								ПервыйПроход = Ложь;
							Иначе	
								ВЗнач = Неопределено;
								Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
									Прервать;
								КонецЕсли;
							КонецЕсли;
							СтрФорматаПодраздела.Добавить(СтрРаздела);						
						КонецЦикла;
						//определили показатели подраздела. Теперь выведем их для каждой строки
						
						ном = 1;
						ЗначениеПоля = Неопределено;
						
						ВыходИзДвойногоЦикла = Ложь;
						
						Пока Истина Цикл
							СтрокаПустая = 1;
							Для Каждого СтрФормата Из СтрФорматаПодраздела Цикл
								ТекОписатель = СтрФормата.Значение;
								КодПоказателя = ТекОписатель.КодПоказателяПоСоставу;
								ИмяЯчейки = ?(Пустаястрока(ТекОписатель.КодПоказателяПоФорме), КодПоказателя, ТекОписатель.КодПоказателяПоФорме); 
								ИндексЗнакаВИмениЯчейки = СтрНайти(ИмяЯчейки, "_");
								Если ИндексЗнакаВИмениЯчейки > 0 Тогда
									ИмяЯчейки = Лев(ИмяЯчейки, ИндексЗнакаВИмениЯчейки - 1);
								КонецЕсли;
								ПризнакФормата = ТекОписатель.ТипДанныхПоказателя;
								Если НЕ ТекПок.Свойство(ИмяЯчейки + "_" + ном, ЗначениеПоля) Тогда	
									
									ВыходИзДвойногоЦикла = Истина;
									Прервать;
									
								КонецЕсли;
								СтрокаПустая = Мин(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение("", ТекОписатель, ЗначениеПоля, Ложь, НомСтр, ном, 1), СтрокаПустая);
							КонецЦикла;
							
							Если ВыходИзДвойногоЦикла Тогда
								Прервать;
							КонецЕсли;
														
							Если СтрокаПустая = 1 И ном <> 1 Тогда
								ном = ном + 1;
								Продолжить;
							КонецЕсли;
							Для Каждого СтрФормата Из СтрФорматаПодраздела Цикл
								ТекОписатель = СтрФормата.Значение;
								КодПоказателя = ТекОписатель.КодПоказателяПоСоставу;
								ИмяЯчейки = ?(Пустаястрока(ТекОписатель.КодПоказателяПоФорме), КодПоказателя, ТекОписатель.КодПоказателяПоФорме); 
								ИндексЗнакаВИмениЯчейки = СтрНайти(ИмяЯчейки, "_");
								Если ИндексЗнакаВИмениЯчейки > 0 Тогда
									ИмяЯчейки = Лев(ИмяЯчейки, ИндексЗнакаВИмениЯчейки - 1);
								КонецЕсли;
								ПризнакФормата = ТекОписатель.ТипДанныхПоказателя;
								Если НЕ ТекПок.Свойство(ИмяЯчейки + "_" + ном, ЗначениеПоля) Тогда
									
									ВыходИзДвойногоЦикла = Истина;
									Прервать;
									
								КонецЕсли;
								РегламентированнаяОтчетность.ВывестиПоказатель(Текст, ЗначениеПоля, КодПоказателя, ПризнакФормата, ФорматВыгрузки);
							КонецЦикла;
							
							Если ВыходИзДвойногоЦикла Тогда
								Прервать;
							КонецЕсли;
														
							Текст.ДобавитьСтроку("###");						
							ном = ном + 1;
						КонецЦикла;
					ИначеЕсли ТипПодраздела = "" Тогда//обычный подраздел
						ПодразделНайден = Ложь;
						ПервыйПроход = Истина;
						Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
							КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
							ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
							ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
							Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
								ПодразделНайден = Истина;
							КонецЕсли;
							Если НЕ ПодразделНайден Тогда
								Продолжить;
							КонецЕсли;
							Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
								Продолжить;
							КонецЕсли;
							Если ПервыйПроход Тогда
								ПервыйПроход = Ложь;
							Иначе	
								ВЗнач = Неопределено;
								Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
									Прервать;
								КонецЕсли;
							КонецЕсли;
							ЗначениеЯчейки = ТекПок[ИмяЯчейки];
							РегламентированнаяОтчетность.ВывестиПоказатель(Текст, ЗначениеЯчейки, КодПоказателя, ПризнакФормата, ФорматВыгрузки);
						КонецЦикла;
						Текст.ДобавитьСтроку("###");
					КонецЕсли;//многострочный или обычный подраздел
				КонецЦикла;//по подразделам
			КонецЦикла;//по страницам
		ИначеЕсли Призн = "*" Тогда //раздел многостраничный

			ТаблицаСтраницРаздела = Неопределено;
			мСтруктураМногостраничныхРазделов.Свойство(ИмяРаздела, ТаблицаСтраницРаздела);
			
			ТаблицаСтраницРаздела = ЭтаФорма[ТаблицаСтраницРаздела];
			
			НомСтр = 0;
			Для Каждого Стр2 из ТаблицаСтраницРаздела Цикл
				ТекПок = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(РегламентированнаяОтчетность.СкопированнаяСтруктура(Стр2.Данные[0].Значение));
				НомСтр = НомСтр + 1;
				СтрокиФорматаТекРаздела = мТаблицаСоставПоказателей.НайтиСтроки(Новый Структура("ИмяПоляТаблДокумента",ИмяРаздела));
				
				//проверка на пустую страницу раздела
				СтраницаПустая = 1;
				Для Каждого Стр3 Из СтрокиФорматаТекРаздела Цикл
					КодПоказателя = Стр3.КодПоказателяПоСоставу;
					ИмяЯчейки = ?(Пустаястрока(Стр3.КодПоказателяПоФорме), КодПоказателя, Стр3.КодПоказателяПоФорме); 
					ПризнакФормата = Стр3.ТипДанныхПоказателя;
					Если КодПоказателя="###" Тогда
						Продолжить;
					ИначеЕсли КодПоказателя="===" Тогда
						Прервать;	
					КонецЕсли;
					ЗначениеЯчейки = ТекПок[ИмяЯчейки];
					СтраницаПустая = Мин(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение("", Стр3, ЗначениеЯчейки, Ложь, НомСтр, ,1 ), СтраницаПустая);
				КонецЦикла;
				
				Для Каждого Стр3 Из СтрокиФорматаТекРаздела Цикл
					КодПоказателя = Стр3.КодПоказателяПоСоставу;
					ИмяЯчейки = ?(Пустаястрока(Стр3.КодПоказателяПоФорме), КодПоказателя, Стр3.КодПоказателяПоФорме); 
					ПризнакФормата = Стр3.ТипДанныхПоказателя;
					Если КодПоказателя="###" Тогда
						Продолжить;
					ИначеЕсли КодПоказателя="===" Тогда
						Прервать;	
					КонецЕсли;
					ЗначениеЯчейки = ТекПок[ИмяЯчейки];
					РегламентированнаяОтчетность.ВывестиПоказатель(Текст, ЗначениеЯчейки, КодПоказателя, ПризнакФормата, ФорматВыгрузки);
				КонецЦикла;
				Текст.ДобавитьСтроку("###");
			КонецЦикла;
			//конец выгрузки многостраничного раздела
		ИначеЕсли Призн = "/" Тогда //раздел многострочный

			ПокТекТабПоля = Неопределено;
			Если НЕ ПоказателиОтчета.Свойство("ПолеТабличногоДокумента" + ИмяРаздела, ПокТекТабПоля) Тогда
				Продолжить;
			КонецЕсли;
			ТекПок = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(РегламентированнаяОтчетность.СкопированнаяСтруктура(ПокТекТабПоля));
			Подразделы = РегламентированнаяОтчетность.РазбитьПоПодразделам(ИмяРаздела, мТаблицаСоставПоказателей);
			СтрокиФорматаТекРаздела = мТаблицаСоставПоказателей.НайтиСтроки(Новый Структура("ИмяПоляТаблДокумента",ИмяРаздела));
			Для Каждого Подраздел Из Подразделы Цикл
				
				// Пропускаем только подразделы 1 и 2.
				Если Подраздел.Ключ <> "П000000000002" И Подраздел.Ключ <> "П000010000002" Тогда
					Продолжить;
				КонецЕсли;
				
				НачПоказатель = Подраздел.Ключ;
				ТипПодраздела = Подраздел.Значение;
				
				// в многострочном разделе возможны только многострочные и обычные подразделы
				Если ТипПодраздела = "/" Тогда // многострочный подраздел
					СтрФорматаПодраздела = Новый СписокЗначений;
					ПодразделНайден = Ложь;
					ПервыйПроход = Истина;
					Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
						КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
						ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
						ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
						Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
							ПодразделНайден = Истина;
						КонецЕсли;
						Если НЕ ПодразделНайден Тогда
							Продолжить;
						КонецЕсли;
						Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
							Продолжить;
						КонецЕсли;
						Если ПервыйПроход Тогда
							ПервыйПроход = Ложь;
						Иначе	
							ВЗнач = Неопределено;
							Если Подразделы.Свойство(КодПоказателя, ВЗнач) И КодПоказателя <> "П000000000009" И КодПоказателя <> "П000000000011" И КодПоказателя <> "П000010000009" И КодПоказателя <> "П000010000011" Тогда
								Прервать;
							КонецЕсли;
						КонецЕсли;
						СтрФорматаПодраздела.Добавить(СтрРаздела);						
					КонецЦикла;
					//определили показатели подраздела. Теперь выведем их для каждой строки
					
					ном = 1;
					ЗначениеПоля = Неопределено;
					
					ВыходИзДвойногоЦикла = Ложь;
					
					Пока Истина Цикл
						СтрокаПустая = 1;
						Для Каждого СтрФормата Из СтрФорматаПодраздела Цикл
							ТекОписатель = СтрФормата.Значение;
							КодПоказателя = ТекОписатель.КодПоказателяПоСоставу;
							ИмяЯчейки = ?(Пустаястрока(ТекОписатель.КодПоказателяПоФорме), КодПоказателя, ТекОписатель.КодПоказателяПоФорме); 
							ИндексЗнакаВИмениЯчейки = СтрНайти(ИмяЯчейки, "_");
							Если ИндексЗнакаВИмениЯчейки > 0 Тогда
								ИмяЯчейки = Лев(ИмяЯчейки, ИндексЗнакаВИмениЯчейки - 1);
							КонецЕсли;
							ПризнакФормата = ТекОписатель.ТипДанныхПоказателя;
							Если НЕ ТекПок.Свойство(ИмяЯчейки + "_" + Формат(ном, "ЧГ="), ЗначениеПоля) И КодПоказателя <> "П000000000009" И КодПоказателя <> "П000000000011" И КодПоказателя <> "П000010000009" И КодПоказателя <> "П000010000011" Тогда
								
								ВыходИзДвойногоЦикла = Истина;
								Прервать;
								
							КонецЕсли;
							СтрокаПустая = Мин(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение("", ТекОписатель, ЗначениеПоля, Ложь, Неопределено, ном, 1), СтрокаПустая);							
						КонецЦикла;
						
						Если ВыходИзДвойногоЦикла Тогда
							Прервать;
						КонецЕсли;
												
						Если СтрокаПустая = 1 И ном <> 1 Тогда
							ном = ном + 1;
							Продолжить;
						КонецЕсли;
						Для Каждого СтрФормата Из СтрФорматаПодраздела Цикл
							ТекОписатель = СтрФормата.Значение;
							КодПоказателя = ТекОписатель.КодПоказателяПоСоставу;
							ИмяЯчейки = ?(Пустаястрока(ТекОписатель.КодПоказателяПоФорме), КодПоказателя, ТекОписатель.КодПоказателяПоФорме); 
							ИндексЗнакаВИмениЯчейки = СтрНайти(ИмяЯчейки, "_");
							Если ИндексЗнакаВИмениЯчейки > 0 Тогда
								ИмяЯчейки = Лев(ИмяЯчейки, ИндексЗнакаВИмениЯчейки - 1);
							КонецЕсли;
							ПризнакФормата = ТекОписатель.ТипДанныхПоказателя;
							Если ИмяЯчейки <> "П000000000009" И ИмяЯчейки <> "П000000000011" И ИмяЯчейки <> "П000010000009" И ИмяЯчейки <> "П000010000011" Тогда
								Если НЕ ТекПок.Свойство(ИмяЯчейки + "_" + Формат(ном, "ЧГ="), ЗначениеПоля) Тогда
									
									ВыходИзДвойногоЦикла = Истина;
									Прервать;
									
								КонецЕсли;
							Иначе
								Если ИмяЯчейки = "П000000000009" Тогда
									П9_1 = ВРЕГ(СокрЛП(ТекПок["П000000001109_" + Формат(ном, "ЧГ=")]));
									П9_2 = ВРЕГ(СокрЛП(ТекПок["П000000001209_" + Формат(ном, "ЧГ=")]));
									П9_3 = Формат(ТекПок["П000000001309_" + Формат(ном, "ЧГ=")], "ДФ=dd.MM.yyyy");
									П9_4 = Формат(ТекПок["П000000001409_" + Формат(ном, "ЧГ=")], "ДФ=dd.MM.yyyy");
									ЗначениеПоля = П9_1 + "," + П9_2 + "," + П9_3 + "," + П9_4;
								ИначеЕсли ИмяЯчейки = "П000000000011" Тогда
									П11_1 = ВРЕГ(СокрЛП(ТекПок["П000000001111_" + Формат(ном, "ЧГ=")]));
									П11_2 = Формат(ТекПок["П000000001211_" + Формат(ном, "ЧГ=")], "ДФ=dd.MM.yyyy");
									ЗначениеПоля = П11_1 + "," + П11_2;
								ИначеЕсли ИмяЯчейки = "П000010000009" Тогда
									П9_1 = ВРЕГ(СокрЛП(ТекПок["П000010001109_" + Формат(ном, "ЧГ=")]));
									П9_2 = ВРЕГ(СокрЛП(ТекПок["П000010001209_" + Формат(ном, "ЧГ=")]));
									П9_3 = Формат(ТекПок["П000010001309_" + Формат(ном, "ЧГ=")], "ДФ=dd.MM.yyyy");
									П9_4 = Формат(ТекПок["П000010001409_" + Формат(ном, "ЧГ=")], "ДФ=dd.MM.yyyy");
									ЗначениеПоля = П9_1 + "," + П9_2 + "," + П9_3 + "," + П9_4;
								ИначеЕсли ИмяЯчейки = "П000010000011" Тогда
									П11_1 = ВРЕГ(СокрЛП(ТекПок["П000010001111_" + Формат(ном, "ЧГ=")]));
									П11_2 = Формат(ТекПок["П000010001211_" + Формат(ном, "ЧГ=")], "ДФ=dd.MM.yyyy");
									ЗначениеПоля = П11_1 + "," + П11_2;
								КонецЕсли;	
								
							КонецЕсли;
							РегламентированнаяОтчетность.ВывестиПоказатель(Текст, ЗначениеПоля, КодПоказателя, ПризнакФормата, ФорматВыгрузки);
						КонецЦикла;
						
						Если ВыходИзДвойногоЦикла Тогда
							Прервать;
						КонецЕсли;
						
						Текст.ДобавитьСтроку("###");						
						ном = ном + 1;
					КонецЦикла;
				ИначеЕсли ТипПодраздела = "" Тогда//обычный подраздел
					ПодразделНайден = Ложь;
					ПервыйПроход = Истина;
					Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
						КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
						ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
						ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
						Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
							ПодразделНайден = Истина;
						КонецЕсли;
						Если НЕ ПодразделНайден Тогда
							Продолжить;
						КонецЕсли;
						Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
							Продолжить;
						КонецЕсли;
						Если ПервыйПроход Тогда
							ПервыйПроход = Ложь;
						Иначе	
							ВЗнач = Неопределено;
							Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
								Прервать;
							КонецЕсли;
						КонецЕсли;
						ЗначениеЯчейки = ТекПок[ИмяЯчейки];
						РегламентированнаяОтчетность.ВывестиПоказатель(Текст, ЗначениеЯчейки, КодПоказателя, ПризнакФормата, ФорматВыгрузки);
					КонецЦикла;
					Текст.ДобавитьСтроку("###");
				КонецЕсли;
			Конеццикла;
		ИначеЕсли Призн = "" Тогда //просто раздел на одной странице без многострочных частей
			ПокТекТабПоля = Неопределено;
			Если НЕ ПоказателиОтчета.Свойство("ПолеТабличногоДокумента" + ИмяРаздела, ПокТекТабПоля) Тогда
				Продолжить;
			КонецЕсли;
			ТекПок = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(РегламентированнаяОтчетность.СкопированнаяСтруктура(ПокТекТабПоля));
			СтрокиФорматаТекРаздела = мТаблицаСоставПоказателей.НайтиСтроки(Новый Структура("ИмяПоляТаблДокумента",ИмяРаздела));
			Для Каждого Стр3 Из СтрокиФорматаТекРаздела Цикл
				КодПоказателя = Стр3.КодПоказателяПоСоставу;
				ИмяЯчейки = ?(Пустаястрока(Стр3.КодПоказателяПоФорме), КодПоказателя, Стр3.КодПоказателяПоФорме); 
				ПризнакФормата = Стр3.ТипДанныхПоказателя;
				Если КодПоказателя="###" Тогда
					Продолжить;
				ИначеЕсли КодПоказателя="===" Тогда
					Прервать;	
				КонецЕсли;
				ЗначениеЯчейки = ТекПок[ИмяЯчейки];
				РегламентированнаяОтчетность.ВывестиПоказатель(Текст, ЗначениеЯчейки, КодПоказателя, ПризнакФормата, ФорматВыгрузки);
			КонецЦикла;
			Текст.ДобавитьСтроку("###");
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьРезультирующийТекстВыгрузки(Текст)
	
	РазделДекларацияПуст = (СтрЧислоВхождений(Текст.ПолучитьТекст(), Символы.ПС + "П000000000001:") <> 0);

	Для Инд = 1 По Текст.КоличествоСтрок() Цикл
		ТекСтр = Текст.ПолучитьСтроку(Инд);
		Тек13Симв = Лев(ТекСтр, 13);
		Если (Тек13Симв = "П000000000004" И НЕ РазделДекларацияПуст) ИЛИ Тек13Симв = "П000010000004" Тогда
			Если СтрДлина(Текст.ПолучитьСтроку(Инд + 2)) > 24 Тогда
				Текст.ЗаменитьСтроку(Инд, Тек13Симв + ":" + РегламентированнаяОтчетность.СтрЗаменитьПробелы(Сред(Текст.ПолучитьСтроку(Инд), 15)));
			КонецЕсли;
		ИначеЕсли ((ТекСтр = "П000000000008:" ИЛИ ТекСтр = "П000000000008:643,,,,,,,,,") И НЕ РазделДекларацияПуст) ИЛИ ТекСтр = "П000010000008:" ИЛИ ТекСтр = "П000010000008:643,,,,,,,,," Тогда
			Текст.ЗаменитьСтроку(Инд, Лев(ТекСтр, 14) + "643,0,-,,,,,,,");
		ИначеЕсли ТекСтр = "П000000000011:," ИЛИ ТекСтр = "П000010000011:," Тогда
			Текст.ЗаменитьСтроку(Инд, Лев(ТекСтр, 14));
		ИначеЕсли ((Тек13Симв = "П000000000006" И НЕ РазделДекларацияПуст) ИЛИ Тек13Симв = "П000010000006") И СтрДлина(ТекСтр) = 26 Тогда
			НаименованиеОрганизации = Текст.ПолучитьСтроку(Инд - 2);
			Текст.ЗаменитьСтроку(Инд - 2, Лев(НаименованиеОрганизации, 14) + РегламентированнаяОтчетность.СтрЗаменитьПробелы(Сред(НаименованиеОрганизации, 15)));

		КонецЕсли;
	КонецЦикла;
	
	ПустойРазделВозвраты = "
	|###
	|П000010000002:
	|П000010000003:
	|П000010000004:
	|П000010000005:
	|П000010000006:
	|П000010000007:
	|П000010000008:643,0,-,,,,,,,
	|П000010000009:,,,
	|П000010000010:
	|П000010000011:
	|П000010000012:
	|П000010000013:
	|П000010000014:
	|П000010000015:
	|П000010000016:";
	
	Текст.УстановитьТекст(СтрЗаменить(Текст.ПолучитьТекст(), ПустойРазделВозвраты, ""));
	
	ПустойРазделДекларация = "
	|###
	|П000000000002:
	|П000000000003:
	|П000000000004:
	|П000000000005:
	|П000000000006:
	|П000000000007:
	|П000000000008:643,0,-,,,,,,,
	|П000000000009:,,,
	|П000000000010:
	|П000000000011:
	|П000000000012:
	|П000000000013:
	|П000000000014:
	|П000000000015:
	|П000000000016:";
	
	ПустойРазделДекларацияПравильный = "
	|###
	|П000000000002:
	|П000000000003:
	|П000000000004:
	|П000000000005:
	|П000000000006:
	|П000000000007:
	|П000000000008:
	|П000000000009:
	|П000000000010:
	|П000000000011:
	|П000000000012:
	|П000000000013:
	|П000000000014:
	|П000000000015:
	|П000000000016:";
	
	Текст.УстановитьТекст(СтрЗаменить(Текст.ПолучитьТекст(), ПустойРазделДекларация, ПустойРазделДекларацияПравильный));
	
	Инд = 1;
	КолСтр1 = 1;
	КолСтр2 = 1;
	НаПредыдущейИтерацииМеняласьСтрока = Ложь;
	Пока Инд <= Текст.КоличествоСтрок() Цикл
		ТекСтрока = Текст.ПолучитьСтроку(Инд);
		Тек13Симв = Лев(ТекСтрока, 13);
		Инд = Инд + 1;
		Если НЕ РазделДекларацияПуст И Тек13Симв = "П000000000002" И НЕ НаПредыдущейИтерацииМеняласьСтрока Тогда
			Текст.ВставитьСтроку(Инд - 1, "П000000000001:" + Формат(КолСтр1, "ЧЦ=5; ЧГ="));
			НаПредыдущейИтерацииМеняласьСтрока = Истина;
			КолСтр1 = КолСтр1 + 1;
		ИначеЕсли Тек13Симв = "П000010000002" И НЕ НаПредыдущейИтерацииМеняласьСтрока Тогда
			Текст.ВставитьСтроку(Инд - 1, "П000010000001:" + Формат(КолСтр2, "ЧЦ=5; ЧГ="));
			НаПредыдущейИтерацииМеняласьСтрока = Истина;
			КолСтр2 = КолСтр2 + 1;
		Иначе
			НаПредыдущейИтерацииМеняласьСтрока = Ложь;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ИсправленныйИдДок(Знач ИдДок)
	
	ИдДок = Сред(ИдДок, 7);
	Квартальная = (Месяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) - Месяц(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета) <> 0);
	НомерМесяцаКвартала = Формат(?(Квартальная, Месяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) % 12, Месяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета)), "ЧЦ=2; ЧН=00; ЧВН=");
	ПризнакЛицензии = НЕ ЗначениеЗаполнено(СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить().ДанныеМногостраничныхРазделов.Титульный.Получить(0).Данные.ВидДеят);
	
	НомерКвартала = Цел((Месяц(СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания) - 1) / 3) + 1;
	СчДок = РегламентированнаяОтчетность.ПолучитьСчетчикВыгруженныхДокументов(СтруктураРеквизитовФормы.Организация, СтруктураРеквизитовФормы.мСохраненныйДок.ДатаНачала, НомерКвартала, Перечисления.ТипыСчетчиковВыгрузки.СчетчикДокументовАлко);
	ИдДок = Лев(ИдДок, 25)
			+ Строка(Число(Квартальная) + 1)
			+ НомерМесяцаКвартала
			+ Формат(ПризнакЛицензии + 1, "БЛ=1; БИ=2")
			+ Формат(СчДок + 1, "ЧЦ=2; ЧН=00; ЧВН=")
			+ Формат((СтруктураРеквизитовФормы.мСохраненныйДок.Вид + 1) % 100, "ЧЦ=2; ЧН=00; ЧВН=");
	РегламентированнаяОтчетность.УстановитьСчетчикВыгруженныхДокументов(СтруктураРеквизитовФормы.Организация, СчДок + 1, СтруктураРеквизитовФормы.мСохраненныйДок.ДатаНачала, НомерКвартала, Перечисления.ТипыСчетчиковВыгрузки.СчетчикДокументовАлко);
	
	Возврат "ИдДок:" + ИдДок;
	
КонецФункции

&НаСервере
Функция СформироватьСтруктуруПоказателей()
	
	мДанныеОтчета = Новый Структура;
	
	СохрСтруктура = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить();
	ПоказателиОтчета = СохрСтруктура.ПоказателиОтчета;
	Для Каждого Раздел Из ПоказателиОтчета Цикл
		мДанныеОтчета.Вставить(Раздел.Ключ, РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(Раздел.Значение));
	КонецЦикла;
	
	ТекущийРаздел = Неопределено;
	Если мСтруктураМногостраничныхРазделов.Свойство(СтруктураРеквизитовФормы.НаимТекущегоРаздела, ТекущийРаздел) Тогда
		АктивнаяСтраница = ЭтаФорма[ТекущийРаздел].НайтиСтроки(Новый Структура("АктивнаяСтраница", Истина));
		Если АктивнаяСтраница.Количество() > 0 Тогда
			АктивнаяСтраница = АктивнаяСтраница[0];
			ИндексАктивнойСтраницы = ЭтаФорма[ТекущийРаздел].Индекс(АктивнаяСтраница);
		КонецЕсли;
	КонецЕсли;

	Для Каждого ЭлементСтруктуры Из СохрСтруктура.ДанныеМногостраничныхРазделов Цикл	
		
		НайденноеЗначение = Неопределено;
		
		мСтруктураМногостраничныхРазделов.Свойство(ЭлементСтруктуры.Ключ, НайденноеЗначение);
		
		Если НЕ НайденноеЗначение = Неопределено Тогда
			
			НайденноеЗначение = ЭтаФорма[НайденноеЗначение];
			
			ЗначениеВДанныеФормы(ЭлементСтруктуры.Значение, НайденноеЗначение);
			
			Если НайденноеЗначение[0].Свойство("Данные") Тогда
				
				Для Каждого СтрокаТаблЗнач Из НайденноеЗначение Цикл
					
					Если ТипЗнч(СтрокаТаблЗнач.Данные) = Тип("СписокЗначений") Тогда
						
						СтрокаТаблЗнач.Данные.Очистить();
						СтрокаТаблЗнач.Данные.Добавить(ЭлементСтруктуры.Значение[НайденноеЗначение.Индекс(СтрокаТаблЗнач)].Данные);
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
			Если НайденноеЗначение[0].Свойство("ДанныеДопСтрок") Тогда
				
				Ном = 0;
				
				Для Каждого СтрокаТаблЗнач Из ЭлементСтруктуры.Значение Цикл
					
					Если ТипЗнч(СтрокаТаблЗнач.ДанныеДопСтрок) = Тип("Структура") Тогда
						
						Для Каждого ЭлСтруктуры Из СтрокаТаблЗнач.ДанныеДопСтрок Цикл
							
							ТаблЗнач = ЭлСтруктуры.Значение;
							
							ЭлСтруктуры.Значение = ЭтаФорма["Хранилище" + ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ЭлементСтруктуры.Ключ)].Добавить().Таблица;
							
							ЗначениеВДанныеФормы(ТаблЗнач, ЭлСтруктуры.Значение);
							
							НайденноеЗначение[Ном].ДанныеДопСтрок.Добавить(ЭлСтруктуры.Значение);
							
						КонецЦикла;
						
					ИначеЕсли ТипЗнч(СтрокаТаблЗнач.ДанныеДопСтрок) = Тип("ТаблицаЗначений") Тогда
						
						СтрокаТаблЗначДанныеДопСтрок = ЭтаФорма["Хранилище" + ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ЭлементСтруктуры.Ключ)].Добавить().Таблица;
						
						ЗначениеВДанныеФормы(СтрокаТаблЗнач.ДанныеДопСтрок, СтрокаТаблЗначДанныеДопСтрок);
						
						НайденноеЗначение[Ном].ДанныеДопСтрок.Добавить(СтрокаТаблЗначДанныеДопСтрок, "ДанныеФормыКоллекцияТаблицаДопСтрокРаздела");
						
					КонецЕсли;
					
					Ном = Ном + 1;
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого Раздел Из мСтруктураМногостраничныхРазделов Цикл
		Для Каждого Страница Из ЭтаФорма[Раздел.Значение] Цикл
			Страница.АктивнаяСтраница = Ложь;
		КонецЦикла;
	КонецЦикла;

	ТекущийРаздел = Неопределено;
	Если мСтруктураМногостраничныхРазделов.Свойство(СтруктураРеквизитовФормы.НаимТекущегоРаздела, ТекущийРаздел) Тогда
		Если ИндексАктивнойСтраницы <> Неопределено Тогда
			ЭтаФорма[ТекущийРаздел][ИндексАктивнойСтраницы].АктивнаяСтраница = Истина;
		КонецЕсли;
	КонецЕсли;

	Для Каждого Раздел Из мСтруктураМногостраничныхРазделов Цикл
		ТаблицаЛистовРаздела = ЭтаФорма[Раздел.Значение];
		Для Каждого Лист Из ТаблицаЛистовРаздела Цикл
			Лист.Данные[0].Значение = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(Лист.Данные[0].Значение);
		КонецЦикла;
		мДанныеОтчета.Вставить(Раздел.Ключ, ЭтаФорма[Раздел.Значение]);
	КонецЦикла;
	
КонецФункции

&НаСервере
Функция СформироватьСтруктуруПараметров()
	
	//определение источников данных для проверки
	Данные = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить();
	Орг = СтруктураРеквизитовФормы.мСохраненныйДок.Организация;
	Инф = ВычислитьПоказателиТитульногоЛистаИСведенияОФизЛицах(Ложь, Ложь);
	ПоказателиТитульный = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(РегламентированнаяОтчетность.СкопированнаяСтруктура(Инф.Получить(0).Значение.Получить(0).Данные));
	ДанныеФизЛиц = Инф.Получить(1).Значение;
	//Получили данные
	
	//Определим основные показатели
	ОргКПП					= СокрЛП(ПоказателиТитульный.КПП1);
	ОргИНН					= СокрЛП(СтруктураРеквизитовФормы.Организация.ИНН);
	ПоМестуНахождения		= ?(ПустаяСтрока(ПоказателиТитульный.ТипОрг2), 1, 2);
	Если Данные.Свойство("Представляется") Тогда
		ПредставляетсяЗнач = ?(НЕ ЗначениеЗаполнено(Данные.Представляется), 0, Число(Данные.Представляется));
	Иначе
		ПредставляетсяЗнач = ?(Данные.ДокПредстРО, 1, 2);
	КонецЕсли;
	
	ОргНазв					= СокрЛП(ПоказателиТитульный.ОргНазв);
	ОргТелефон				= Лев(СокрЛП(ПоказателиТитульный.ТелОрганизации), 20);
	НомКорректировки		= ?(ПустаяСтрока(ПоказателиТитульный.НомКоррект), 0, Число(ПоказателиТитульный.НомКоррект)); 
	//Определили основные показатели
	
	НомерГода     = Формат(СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания, "ДФ=гггг");
	НомерМесяца   = Месяц(СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания);
	
	ПараметрыВыгрузки = Новый Структура;
	ПараметрыВыгрузки.Вставить("ВерсПрог",			РегламентированнаяОтчетность.НазваниеИВерсияПрограммы());
	ПараметрыВыгрузки.Вставить("ДатаФормирДок",			Формат(ТекущаяДатаСеанса(), "ДФ=дд.ММ.гггг"));
	
	//параметры отправителя
	ПараметрыВыгрузки.Вставить("НаимОтпрЮЛ",		ОргНазв);
	СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(СтруктураРеквизитовФормы.Организация, ТекущаяДатаСеанса(), "ФИОБух, ТелБух");
	Если НЕ РегламентированнаяОтчетностьВызовСервера.ЭтоЮридическоеЛицо(СтруктураРеквизитовФормы.Организация) И ПустаяСтрока(СведенияОбОрганизации.ФИОБух) Тогда
		ПараметрыВыгрузки.Вставить("ДолжнОтпр",		"Индивидуальный предприниматель");
		
		ФИОИП = РегламентированнаяОтчетность.РазложитьФИО(ОргНазв);
		ПараметрыВыгрузки.Вставить("ФамилияОтпр",	ФИОИП.Фамилия);
		ПараметрыВыгрузки.Вставить("ИмяОтпр",		ФИОИП.Имя);
		ПараметрыВыгрузки.Вставить("ОтчествоОтпр",	ФИОИП.Отчество);
		ПараметрыВыгрузки.Вставить("ТелОтпр",       ОргТелефон);
	Иначе
		ФИОБух = РегламентированнаяОтчетность.РазложитьФИО(СведенияОбОрганизации.ФИОБух);
		ПараметрыВыгрузки.Вставить("ДолжнОтпр",		"Главный бухгалтер");
		
		ПараметрыВыгрузки.Вставить("ФамилияОтпр",	ФИОБух.Фамилия);
		ПараметрыВыгрузки.Вставить("ИмяОтпр",		ФИОБух.Имя);
		ПараметрыВыгрузки.Вставить("ОтчествоОтпр",	ФИОБух.Отчество);
		ПараметрыВыгрузки.Вставить("ТелОтпр",       СведенияОбОрганизации.ТелБух);
	КонецЕсли;
	
	//параметры организации
	ПараметрыВыгрузки.Вставить("НаимЮЛПол",			ОргНазв);
	ПараметрыВыгрузки.Вставить("ИННЮЛ",				ОргИНН);
	ПараметрыВыгрузки.Вставить("КППЮЛ",				ОргКПП);
	ПараметрыВыгрузки.Вставить("ОГРН",				СокрЛП(ПоказателиТитульный.ОГРН));
	ПараметрыВыгрузки.Вставить("ОКАТО",				СокрЛП(ПоказателиТитульный.ОКАТОТитульный));
	ПараметрыВыгрузки.Вставить("ТелОрг",			ОргТелефон);
	
	//адрес организации
	СтруктураАдреса = Новый Структура;
	Если НЕ ПустаяСтрока(ПоказателиТитульный.АдрЮР) Тогда
		СтруктураАдреса = РегламентированнаяОтчетностьКлиентСервер.РазложитьАдрес(ПоказателиТитульный.АдрЮР);
	КонецЕсли;
	Если Не СтруктураАдреса = Неопределено Тогда
		ПараметрыВыгрузки.Вставить("КодСтраныОрг",	СтруктураАдреса.Страна);
		ПараметрыВыгрузки.Вставить("ИндексОрг", 	СтруктураАдреса.Индекс);
		ПараметрыВыгрузки.Вставить("КодРегионОрг", 	СтруктураАдреса.Регион);
		ПараметрыВыгрузки.Вставить("РайонОрг", 		СтруктураАдреса.Район);
		ПараметрыВыгрузки.Вставить("ГородОрг", 		СтруктураАдреса.Город);
		ПараметрыВыгрузки.Вставить("НаселПунктОрг", СтруктураАдреса.НаселенныйПункт);
		ПараметрыВыгрузки.Вставить("УлицаОрг", 		СтруктураАдреса.Улица);
		ПараметрыВыгрузки.Вставить("ДомОрг", 		СтруктураАдреса.Дом);
		ПараметрыВыгрузки.Вставить("КорпусОрг", 	СтруктураАдреса.Корпус);
		ПараметрыВыгрузки.Вставить("КвартОрг", 		СтруктураАдреса.Квартира);
	КонецЕсли;
	
	ВидДеят = СокрЛП(ПоказателиТитульный.ВидДеят);
	СоотвПризФОтчВидамДеятельности = Новый СписокЗначений;
	СоотвПризФОтчВидамДеятельности.Добавить("02", "1");
	СоотвПризФОтчВидамДеятельности.Добавить("03", "2");
	СоотвПризФОтчВидамДеятельности.Добавить("04", "3");
	ПризФОтч = СоотвПризФОтчВидамДеятельности.Количество() + 1;
	СоотвПризФОтч = СоотвПризФОтчВидамДеятельности.НайтиПоЗначению(ВидДеят);
	Если СоотвПризФОтч <> Неопределено Тогда
		ПризФОтч = СоотвПризФОтч.Представление;
	КонецЕсли;
	ПараметрыВыгрузки.Вставить("ПризФОтч", 		ПризФОтч);
	
	ПараметрыВыгрузки.Вставить("ГодПериодОтч",		НомерГода);
	ПараметрыВыгрузки.Вставить("МесяцПериодОтч",	Формат(НомерМесяца, "ЧЦ=2; ЧВН="));
	ПараметрыВыгрузки.Вставить("КварталПериодОтч",	?(НомерМесяца = 12, 0, НомерМесяца));
	
	чслНомДокПер = ?(СтруктураРеквизитовФормы.мСохраненныйДок.Вид + 1 > 99, 99, СтруктураРеквизитовФормы.мСохраненныйДок.Вид + 1);
	ПараметрыВыгрузки.Вставить("НомДокПер",			Формат(чслНомДокПер, "ЧЦ=2; ЧН=; ЧВН="));
	ПараметрыВыгрузки.Вставить("НомерКорр",			НомКорректировки);
	
	ПараметрыВыгрузки.Вставить("ИмяФайлаСхемы",				"ALK_1152025_4_01.xsd");
	ПараметрыВыгрузки.Вставить("ПрефиксИмениФайлаВыгрузки",	"A7");
	
	ПараметрыВыгрузки.Вставить("ИмяКлючевогоУзлаСодержательнойЧасти", "Документ");
	
	ПараметрыВыгрузки.Вставить("ИдФайл",		СформироватьИдФайл(ПараметрыВыгрузки));
	
	Возврат ПараметрыВыгрузки;
	
КонецФункции

&НаСервере
Функция ИзвлечьСтруктуруXML()
	
	ДеревоСтруктуры = Новый ДеревоЗначений;
	ДеревоСтруктуры.Колонки.Добавить("Код");
	ДеревоСтруктуры.Колонки.Добавить("Тип");
	ДеревоСтруктуры.Колонки.Добавить("Формат");
	ДеревоСтруктуры.Колонки.Добавить("МинРазмерность");
	ДеревоСтруктуры.Колонки.Добавить("МаксРазмерность");
	ДеревоСтруктуры.Колонки.Добавить("Обязательность");
	ДеревоСтруктуры.Колонки.Добавить("Многостраничность");
	ДеревоСтруктуры.Колонки.Добавить("Многострочность");
	ДеревоСтруктуры.Колонки.Добавить("Раздел");
	ДеревоСтруктуры.Колонки.Добавить("Ключ");
	ДеревоСтруктуры.Колонки.Добавить("Условие");
	ДеревоСтруктуры.Колонки.Добавить("ЗначениеПоУмолчанию");
	ДеревоСтруктуры.Колонки.Добавить("Значение");
	ДеревоСтруктуры.Колонки.Добавить("Представление");
	ДеревоСтруктуры.Колонки.Добавить("Показатели");
	
	Макет = Отчеты[Сред(Лев(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, ".Форма.") - 1), 7)].ПолучитьМакет("СхемаВыгрузки401");
	ВысотаТаблицы = Макет.ВысотаТаблицы;
	
	УчтенныеГруппы = Новый Соответствие;
	
	Для Уровень = 0 По Макет.КоличествоУровнейГруппировокСтрок() - 1 Цикл
		Макет.ПоказатьУровеньГруппировокСтрок(Уровень);
		Для НомерСтроки = 2 По ВысотаТаблицы Цикл
			НомСтр = ВысотаТаблицы - НомерСтроки + 2;
			Если Макет.Область(НомСтр, 0, НомСтр, 0).Видимость И УчтенныеГруппы.Получить(НомСтр) = Неопределено Тогда
				
				РодительскийУзел = ДеревоСтруктуры;
				Если Уровень <> 0 Тогда
					Для Инд = 1 По НомСтр - 2 Цикл
						Узел = УчтенныеГруппы.Получить(НомСтр - Инд);
						Если Узел <> Неопределено Тогда
							РодительскийУзел = Узел;
							Прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				НовСтр = РодительскийУзел.Строки.Вставить(0);
				НовСтр.Код = СокрЛП(Макет.Область(НомСтр, 1, НомСтр, 1).Текст);
				НовСтр.Раздел = СокрЛП(Макет.Область(НомСтр, 2, НомСтр, 2).Текст);
				НовСтр.Ключ = СокрЛП(Макет.Область(НомСтр, 3, НомСтр, 3).Текст);
				НовСтр.Тип = СокрЛП(Макет.Область(НомСтр, 4, НомСтр, 4).Текст);
				НовСтр.Формат = СокрЛП(Макет.Область(НомСтр, 5, НомСтр, 5).Текст);
				МинРазмерность = СокрЛП(Макет.Область(НомСтр, 6, НомСтр, 6).Текст);
				НовСтр.МинРазмерность = ?(ПустаяСтрока(МинРазмерность), ?(НовСтр.Формат = "N", 99999, 0), Число(МинРазмерность));
				МаксРазмерность = СокрЛП(Макет.Область(НомСтр, 7, НомСтр, 7).Текст);
				НовСтр.МаксРазмерность = ?(ПустаяСтрока(МаксРазмерность), 99999, Число(МаксРазмерность));
				НовСтр.Обязательность = СокрЛП(Макет.Область(НомСтр, 8, НомСтр, 8).Текст);
				НовСтр.Многостраничность = НЕ ПустаяСтрока(Макет.Область(НомСтр, 9, НомСтр, 9).Текст);
				НовСтр.Многострочность = НЕ ПустаяСтрока(Макет.Область(НомСтр, 10, НомСтр, 10).Текст);
				НовСтр.Условие = СокрЛП(Макет.Область(НомСтр, 11, НомСтр, 11).Текст);
				НовСтр.ЗначениеПоУмолчанию = СокрЛП(Макет.Область(НомСтр, 12, НомСтр, 12).Текст);
				НовСтр.Представление = СокрЛП(Макет.Область(НомСтр, 13, НомСтр, 13).Текст);
				
				УчтенныеГруппы.Вставить(НомСтр, НовСтр);
				
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат ДеревоСтруктуры;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьДанными(ДеревоВыгрузки, ПараметрыВыгрузки)
	
	ОбработатьУсловныеЭлементы(ПараметрыВыгрузки, ДеревоВыгрузки); // формируем точную структуру XML-макета
	ЗаполнитьДаннымиУзел(ПараметрыВыгрузки, ДеревоВыгрузки); // заполняем дерево данными
	ОтсечьНезаполненныеНеобязательныеУзлы(ДеревоВыгрузки);
	
КонецПроцедуры

&НаСервере
Функция ВыгрузитьДеревоВXML(ДеревоВыгрузки, ПараметрыВыгрузки)
	
	ПотокXML = РегламентированнаяОтчетность.СоздатьНовыйПотокXML("windows-1251"); // создаем новый поток для записи
	ЗаписатьУзелДереваВXML(ДеревоВыгрузки, ПотокXML, ПараметрыВыгрузки); // пишем дерево в поток
	ТекстДляЗаписи = ПотокXML.Закрыть(); // получаем текст XML
	Возврат ТекстДляЗаписи;
	
КонецФункции

&НаСервере
Функция ВычислитьПоказателиТитульногоЛистаИСведенияОФизЛицах(БратьИзФормы = Истина, ВыводитьСообщения = Истина)
	
	ДанныеОтчета = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить();
	ПоказателиОтчета = ДанныеОтчета.ПоказателиОтчета;
	ПоказателиТитульный = ДанныеОтчета.ДанныеМногостраничныхРазделов.Титульный;
	
	ВидДокТитульный = СокрЛП(ПоказателиТитульный[0].Данные.НомКоррект);
	ТитульныйВидДок = ?(?(ВидДокТитульный = "" ИЛИ ВидДокТитульный = "0", 0, Число(ВидДокТитульный)) > 0, 1, 0);
	
	ПоказателиТитульный[0].Данные.Вставить("ВидДок", ТитульныйВидДок);
	ДанныеФизЛиц = ПолучитьДанныеФизЛиц(ДанныеОтчета.ДанныеМногостраничныхРазделов);
	СписокДляВозврата = Новый СписокЗначений;
	СписокДляВозврата.Добавить(ПоказателиТитульный);
	СписокДляВозврата.Добавить(ДанныеФизЛиц);
	Возврат СписокДляВозврата;
	
КонецФункции

&НаСервере
Функция СформироватьИдФайл(ПараметрыВыгрузки)
	
	флМесяц = (СтруктураРеквизитовФормы.мСохраненныйДок.Периодичность = Перечисления.Периодичность.Месяц);
	
	Возврат ПараметрыВыгрузки.ПрефиксИмениФайлаВыгрузки                                              
			+ ПараметрыВыгрузки.ИННЮЛ + ПараметрыВыгрузки.КППЮЛ                             //состоит из 10-разрядного ИНН организации, 9-разрядного КПП
			+ ?(флМесяц, "1", "2")  										//1-разрядного признака периода отчетности (принимает значения: 1 - месячная, 2 - квартальная)
			+ ?(флМесяц, ПараметрыВыгрузки.МесяцПериодОтч, 
			Формат(Число(ПараметрыВыгрузки.КварталПериодОтч), "ЧЦ=2; ЧН=; ЧВН="))	//2-разрядного номера месяца или квартала (принимает значения: для месяца от 01 до 12, для 1 квартала - 03, для 2 квартала - 06, для 3 квартала - 09, для 4 квартала - 00)
			+ Прав(ПараметрыВыгрузки.ГодПериодОтч, 1)                               //последней цифры года, за который передается информация
			+ "_" + Формат(ТекущаяДатаСеанса(), "ДФ=ддММгггг")
			+ "_" + Врег(Строка(Новый УникальныйИдентификатор));
	
КонецФункции

&НаСервере
Процедура ОбработатьУсловныеЭлементы(Знач ПараметрыВыгрузки, Узел)
	
	Если ТипЗнч(Узел) <> Тип("ДеревоЗначений") Тогда
		Если Узел.Код = ПараметрыВыгрузки.ИмяКлючевогоУзлаСодержательнойЧасти Тогда
			Возврат;
		КонецЕсли;
		РегламентированнаяОтчетность.ДополнитьСтруктуруПараметровПрочиеОтчеты(мДанныеОтчета, ПараметрыВыгрузки, Узел);
	КонецЕсли;
	КоличествоСтрок = Узел.Строки.Количество();
	Для Инд = 1 По КоличествоСтрок Цикл
		ТекСтр = Узел.Строки.Получить(КоличествоСтрок - Инд);
		Если НЕ ПустаяСтрока(ТекСтр.Условие) Тогда
			Если НЕ РегламентированнаяОтчетность.УсловиеВыполнено(ЭтаФорма, ПараметрыВыгрузки, ТекСтр.Условие) Тогда
				Узел.Строки.Удалить(ТекСтр);
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		ОбработатьУсловныеЭлементы(ПараметрыВыгрузки, ТекСтр);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДаннымиУзел(ПараметрыВыгрузки, Узел, НомерСтроки = Неопределено)
	
	Для Каждого Стр из Узел.Строки Цикл
		Если Стр.Тип = "С" ИЛИ Стр.Тип = "C" Тогда // учтем оба варианта: кириллицу и латиницу
			Если РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(ПараметрыВыгрузки, "ИмяКлючевогоУзлаСодержательнойЧасти") И Стр.Код = ПараметрыВыгрузки.ИмяКлючевогоУзлаСодержательнойЧасти Тогда
				ЗаполнитьДаннымиУзел(ПараметрыВыгрузки, Стр);
				ЗаполнитьСодержательнуюЧасть(Стр);
			Иначе
				ЗаполнитьДаннымиУзел(ПараметрыВыгрузки, Стр);
			КонецЕсли;
		Иначе
			Если ПустаяСтрока(Стр.ЗначениеПоУмолчанию) Тогда
				Если НЕ ПустаяСтрока(Стр.Ключ) И РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(ПараметрыВыгрузки, Стр.Ключ) Тогда
					ВывестиПоказательВXML(Стр, ПараметрыВыгрузки[Стр.Ключ]);
				Иначе
					Стр.Значение = "";
				КонецЕсли;
			ИначеЕсли Лев(Стр.ЗначениеПоУмолчанию, 1) = "&" Тогда
				Ключ = Сред(Стр.ЗначениеПоУмолчанию, 2);
				Если РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(ПараметрыВыгрузки, Ключ) Тогда
					ВывестиПоказательВXML(Стр, ПараметрыВыгрузки[Ключ]);
				КонецЕсли;
			Иначе
				Стр.Значение = Стр.ЗначениеПоУмолчанию;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОтсечьНезаполненныеНеобязательныеУзлы(Узел)
	
	КоличествоСтрок = Узел.Строки.Количество();
	Для Инд = 1 По КоличествоСтрок Цикл
		Стр = Узел.Строки.Получить(КоличествоСтрок - Инд);
		ОтсечьНезаполненныеНеобязательныеУзлы(Стр);
	КонецЦикла;
	
	Если ТипЗнч(Узел) <> Тип("ДеревоЗначений") Тогда
		Если (СтрНайти(Узел.Обязательность, "Н") <> 0 ИЛИ СтрНайти(Узел.Обязательность, "H") <> 0) И УзелПуст(Узел) Тогда // учтем оба варианта: кириллицу и латиницу
			РегламентированнаяОтчетность.УдалитьУзел(Узел);
		ИначеЕсли (СтрНайти(Узел.Обязательность, "М") <> 0 ИЛИ СтрНайти(Узел.Обязательность, "M") <> 0) // учтем оба варианта: кириллицу и латиницу
		И УзелПуст(Узел)
		И ?(СтрНайти(Узел.Обязательность, "О") <> 0 ИЛИ СтрНайти(Узел.Обязательность, "O") <> 0, РегламентированнаяОтчетность.ИмеютсяАналогичныеСоседниеУзлыКлюч(Узел), Истина) Тогда
			РегламентированнаяОтчетность.УдалитьУзел(Узел);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЗаписатьУзелДереваВXML(СтрокаДерева, ПотокXML, ПараметрыВыгрузки) Экспорт
	
	Если ТипЗнч(СтрокаДерева) = Тип("ДеревоЗначений") Тогда
		ПотокXML.ЗаписатьНачалоЭлемента("Файл");
		ПотокXML.ЗаписатьАтрибут("xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");
		ПотокXML.ЗаписатьАтрибут("xsi:noNamespaceSchemaLocation", ПараметрыВыгрузки.ИмяФайлаСхемы);
		Для каждого Стр Из СтрокаДерева.Строки Цикл
			ЗаписатьУзелДереваВXML(Стр, ПотокXML, ПараметрыВыгрузки);
		КонецЦикла;
		ПотокXML.ЗаписатьКонецЭлемента();
	Иначе
		Если СтрокаДерева.Тип = "А" ИЛИ СтрокаДерева.Тип = "A" Тогда 
			ПотокXML.ЗаписатьАтрибут(СтрокаДерева.Код, Строка(СтрокаДерева.Значение));
		Иначе
			ПотокXML.ЗаписатьНачалоЭлемента(СтрокаДерева.Код);
			Для каждого Лист из СтрокаДерева.Строки Цикл
				ЗаписатьУзелДереваВXML(Лист, ПотокXML, ПараметрыВыгрузки);
			КонецЦикла;
			ПотокXML.ЗаписатьТекст(Строка(СтрокаДерева.Значение));
			ПотокXML.ЗаписатьКонецЭлемента();
		КонецЕсли;
	КонецЕсли;

КонецФункции

&НаСервере
Функция ПолучитьДанныеФизЛиц(СтруктураМногостраничныхРазделов = Неопределено)
	
	Перем ТаблицаСтраницРаздела;
	
	ТаблСведенийФизЛиц = Новый ТаблицаЗначений();
	ТаблСведенийФизЛиц.Колонки.Добавить("ФизЛицоФИО");
	ТаблСведенийФизЛиц.Колонки.Добавить("ФизЛицСлТел");
	ТаблСведенийФизЛиц.Колонки.Добавить("ФизЛицДомТел");
	ТаблСведенийФизЛиц.Колонки.Добавить("ФизЛицДокВид");
	ТаблСведенийФизЛиц.Колонки.Добавить("ФизЛицДокКод");
	ТаблСведенийФизЛиц.Колонки.Добавить("ФизЛицДокСерияНомер");
	ТаблСведенийФизЛиц.Колонки.Добавить("ФизЛицДокВыдан");
	ТаблСведенийФизЛиц.Колонки.Добавить("ФизЛицДокДата");
	ТаблСведенийФизЛиц.Колонки.Добавить("ФизЛицИндекс");
	ТаблСведенийФизЛиц.Колонки.Добавить("ФизЛицСубъект");
	ТаблСведенийФизЛиц.Колонки.Добавить("ФизЛицКодСуб");
	ТаблСведенийФизЛиц.Колонки.Добавить("ФизЛицРайон");
	ТаблСведенийФизЛиц.Колонки.Добавить("ФизЛицГород");
	ТаблСведенийФизЛиц.Колонки.Добавить("ФизЛицНП");
	ТаблСведенийФизЛиц.Колонки.Добавить("ФизЛицУлица");
	ТаблСведенийФизЛиц.Колонки.Добавить("ФизЛицДом");
	ТаблСведенийФизЛиц.Колонки.Добавить("ФизЛицКорпус");
	ТаблСведенийФизЛиц.Колонки.Добавить("ФизЛицКвартира");
	ТаблСведенийФизЛиц.Колонки.Добавить("ФизЛицИноАдрес");
	
	// Сведения по должностным лицам получим из страницы 2 титульного листа 
	Если СтруктураМногостраничныхРазделов <> Неопределено Тогда
		мСтруктураМногостраничныхРазд = РегламентированнаяОтчетность.СкопированнаяСтруктура(СтруктураМногостраничныхРазделов);
	Иначе
		мСтруктураМногостраничныхРазд = мСтруктураМногостраничныхРазделов;
	КонецЕсли;
	
	Если Не мСтруктураМногостраничныхРазд.Свойство("ФизЛица", ТаблицаСтраницРаздела) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ТаблицаСтраницРаздела.Количество() = 0 Тогда
		// создаем исходную таблицу значений многостраничных разделов
		СтрТаблицаСтраницы = ТаблицаСтраницРаздела.Добавить();
		СтрТаблицаСтраницы.АктивнаяСтраница = Истина;
		СтрТаблицаСтраницы.АвтоматическоеПредставление = Истина;
	КонецЕсли;

	Для Каждого СтрМногоСтраничныхРазделов Из мСтруктураМногостраничныхРазд.ФизЛица Цикл
		СтрДанных = СтрМногоСтраничныхРазделов.Данные;
		Если СтрДанных = Неопределено Тогда
			Прервать;
		КонецЕсли;
		Попытка
			Если ПустаяСтрока(СтрДанных.ФизЛицоФИО) Тогда
				Продолжить;
			КонецЕсли;
		Исключение
			Если ПустаяСтрока(СтрДанных.ФизЛицФИО) Тогда
				Продолжить;
			КонецЕсли;
		КонецПопытки;
		СтрТаблСведенийФизЛиц = ТаблСведенийФизЛиц.Добавить();
		Попытка
			СтрТаблСведенийФизЛиц.ФизЛицоФИО = СтрДанных.ФизЛицоФИО;
		Исключение
			СтрТаблСведенийФизЛиц.ФизЛицоФИО = СтрДанных.ФизЛицФИО;
		КонецПопытки;
		СтрТаблСведенийФизЛиц.ФизЛицСлТел = СтрДанных.ФизЛицСлТел;
		СтрТаблСведенийФизЛиц.ФизЛицДомТел = СтрДанных.ФизЛицДомТел;
		СтрТаблСведенийФизЛиц.ФизЛицДокВид = СтрДанных.ФизЛицДокВид;
		Попытка
			СтрТаблСведенийФизЛиц.ФизЛицДокКод = СтрДанных.ФизЛицДок;
		Исключение
			СтрТаблСведенийФизЛиц.ФизЛицДокКод = СтрДанных.ФизЛицДок1 + СтрДанных.ФизЛицДок2;
		КонецПопытки;
		СтрТаблСведенийФизЛиц.ФизЛицДокСерияНомер = СтрДанных.ФизЛицДокСерияНомер;
		СтрТаблСведенийФизЛиц.ФизЛицДокВыдан = СтрДанных.ФизЛицДокВыдан;
		Попытка
			СтрТаблСведенийФизЛиц.ФизЛицДокДата = СтрДанных.ФизЛицДокДата;
		Исключение
			СтрТаблСведенийФизЛиц.ФизЛицДокДата = СтрДанных.ФизЛицДокДата1 + СтрДанных.ФизЛицДокДата2 + "."
			+ СтрДанных.ФизЛицДокДата3 + СтрДанных.ФизЛицДокДата4 + "."
			+ СтрДанных.ФизЛицДокДата5 + СтрДанных.ФизЛицДокДата6  
			+ СтрДанных.ФизЛицДокДата7 + СтрДанных.ФизЛицДокДата8;
		КонецПопытки;								  
		Попытка
			СтрТаблСведенийФизЛиц.ФизЛицИндекс = СтрДанных.ФизЛицИнд;
		Исключение
			СтрТаблСведенийФизЛиц.ФизЛицИндекс = СтрДанных.ФизЛицИнд1+СтрДанных.ФизЛицИнд2+СтрДанных.ФизЛицИнд3+СтрДанных.ФизЛицИнд4+СтрДанных.ФизЛицИнд5+СтрДанных.ФизЛицИнд6;
		КонецПопытки;								  
		СтрТаблСведенийФизЛиц.ФизЛицСубъект = СтрДанных.ФизЛицСубъект;
		Попытка
			СтрТаблСведенийФизЛиц.ФизЛицКодСуб = СтрДанных.ФизЛицС;
		Исключение
			СтрТаблСведенийФизЛиц.ФизЛицКодСуб = СтрДанных.ФизЛицС1 + СтрДанных.ФизЛицС2;
		КонецПопытки;								  
		СтрТаблСведенийФизЛиц.ФизЛицРайон = СтрДанных.ФизЛицРайон;
		СтрТаблСведенийФизЛиц.ФизЛицГород = СтрДанных.ФизЛицГород;
		СтрТаблСведенийФизЛиц.ФизЛицНП = СтрДанных.ФизЛицНП;
		СтрТаблСведенийФизЛиц.ФизЛицУлица = СтрДанных.ФизЛицУлица;
		СтрТаблСведенийФизЛиц.ФизЛицДом = СтрДанных.ФизЛицДом;
		СтрТаблСведенийФизЛиц.ФизЛицКорпус = СтрДанных.ФизЛицКорпус;
		СтрТаблСведенийФизЛиц.ФизЛицКвартира = СтрДанных.ФизЛицКвартира;
		СтрТаблСведенийФизЛиц.ФизЛицИноАдрес = СтрДанных.ФизЛицИноАдрес;
	КонецЦикла;
	
	Возврат ТаблСведенийФизЛиц;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьСодержательнуюЧасть(УзелРодитель)
	
	Титульный        = мДанныеОтчета.Титульный;
	ПервыйТитульный  = Титульный[0].Данные[0].Значение;
	РазделДекларация = мДанныеОтчета.ПолеТабличногоДокументаДекларация;
	РазделВозвраты 	 = мДанныеОтчета.ПолеТабличногоДокументаВозвраты;
	
	Инф = ВычислитьПоказателиТитульногоЛистаИСведенияОФизЛицах(Ложь, Ложь);
	ПоказателиТитульный = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(РегламентированнаяОтчетность.СкопированнаяСтруктура(Инф.Получить(0).Значение.Получить(0).Данные));
	ТаблСведенийФизЛиц = Инф.Получить(1).Значение;
	
	Данные = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить();
	Если Данные.Свойство("Представляется") Тогда
		ПредставляетсяЗнач = ?(НЕ ЗначениеЗаполнено(Данные.Представляется), 0, Число(Данные.Представляется));
	Иначе
		ПредставляетсяЗнач = ?(Данные.ДокПредстРО, 1, 2);
	КонецЕсли;
	
	УзелОрганизация = ПолучитьПодчиненныйЭлемент(УзелРодитель, "Организация");
	
	УзелОтветЛицо = ПолучитьПодчиненныйЭлемент(УзелОрганизация, "ОтветЛицо");
	
	УзелРуководитель 				= ПолучитьПодчиненныйЭлемент(УзелОтветЛицо, "Руководитель");
	УзелГлавбух 					= ПолучитьПодчиненныйЭлемент(УзелОтветЛицо, "Главбух");
	УзелУполнПредставитель 			= ПолучитьПодчиненныйЭлемент(УзелОтветЛицо, "УполнПредставитель");
	
	УзелРуководительИННФЛ			= ПолучитьПодчиненныйЭлемент(УзелРуководитель, "ИННФЛ");
	УзелРуководительСведФЛ			= ПолучитьПодчиненныйЭлемент(УзелРуководитель, "СведФЛ");
	
	УзелГлавбухИННФЛ				= ПолучитьПодчиненныйЭлемент(УзелГлавбух, "ИННФЛ");
	УзелГлавбухСведФЛ				= ПолучитьПодчиненныйЭлемент(УзелГлавбух, "СведФЛ");
	
	УзелУполнПредставительИННФЛ 	= ПолучитьПодчиненныйЭлемент(УзелУполнПредставитель, "ИННФЛ");
	УзелУполнПредставительСведФЛ 	= ПолучитьПодчиненныйЭлемент(УзелУполнПредставитель, "СведФЛ");
	
	ОргДиректор 	= ПоказателиТитульный.ОргДиректор;
	ОргБухгалтер 	= ПоказателиТитульный.ОргБухгалтер;
	ОргУП		 	= ПоказателиТитульный.ОргУП;
	ИННДиректор		= ПоказателиТитульный.ИННРук;
	ИННБухгалтер 	= ПоказателиТитульный.ИННГБ;
	ИННУП 			= ПоказателиТитульный.ИННУП;
	
	ПараметрыВыгрузки = Новый Структура;
	//руководитель
	Если НЕ ПустаяСтрока(ОргДиректор) Тогда
		Если ПустаяСтрока(ИННДиректор) Тогда
			Стр = ТаблСведенийФизЛиц.Найти(ОргДиректор, "ФизЛицФИО");
			Если Стр <> Неопределено Тогда
				ПараметрыВыгрузки = ПолучитьСтруктуруДанныхФЛ(Стр);
				//коррекция даты
				Если ПараметрыВыгрузки.ДатаДок = "  .  .    " ИЛИ ПараметрыВыгрузки.ДатаДок = ".." Тогда
					ПараметрыВыгрузки.Вставить("ДатаДок", "");
				Иначе
					ПараметрыВыгрузки.Вставить("ДатаДок", Формат(ПараметрыВыгрузки.ДатаДок, "ДФ=dd.MM.yyyy; ДЛФ=D"));
				КонецЕсли;
			КонецЕсли;
			
			//удаление блока ИННФЛ
			РегламентированнаяОтчетность.УдалитьУзел(УзелРуководительИННФЛ);
		Иначе
			ФИОФЛ = РегламентированнаяОтчетность.РазложитьФИО(ОргДиректор);
			ПараметрыВыгрузки.Вставить("Фамилия", 	ФИОФЛ.Фамилия);
			ПараметрыВыгрузки.Вставить("Имя", 		ФИОФЛ.Имя);
			ПараметрыВыгрузки.Вставить("Отчество", 	ФИОФЛ.Отчество);
			
			ПараметрыВыгрузки.Вставить("ИНН", ИННДиректор);
			
			//удаление блока СведФЛ
			РегламентированнаяОтчетность.УдалитьУзел(УзелРуководительСведФЛ);
		КонецЕсли;
		ЗаполнитьДаннымиУзел(ПараметрыВыгрузки, УзелРуководитель);	
	КонецЕсли;
	
	//Главбух
	ПараметрыВыгрузки.Очистить();
	Если НЕ ПустаяСтрока(ОргБухгалтер) Тогда
		Если ПустаяСтрока(ИННБухгалтер) Тогда
			Стр = ТаблСведенийФизЛиц.Найти(ОргБухгалтер, "ФизЛицФИО");
			Если Стр <> Неопределено Тогда
				ПараметрыВыгрузки = ПолучитьСтруктуруДанныхФЛ(Стр);
				//коррекция даты
				Если ПараметрыВыгрузки.ДатаДок = "  .  .    " ИЛИ ПараметрыВыгрузки.ДатаДок = ".." Тогда
					ПараметрыВыгрузки.Вставить("ДатаДок", "");
				Иначе
					ПараметрыВыгрузки.Вставить("ДатаДок", Формат(ПараметрыВыгрузки.ДатаДок, "ДФ=dd.MM.yyyy; ДЛФ=D"));
				КонецЕсли;
			КонецЕсли;
			
			//удаление блока ИННФЛ
			РегламентированнаяОтчетность.УдалитьУзел(УзелГлавбухИННФЛ);
		Иначе
			ФИОФЛ = РегламентированнаяОтчетность.РазложитьФИО(ОргБухгалтер);
			ПараметрыВыгрузки.Вставить("Фамилия", 	ФИОФЛ.Фамилия);
			ПараметрыВыгрузки.Вставить("Имя", 		ФИОФЛ.Имя);
			ПараметрыВыгрузки.Вставить("Отчество", 	ФИОФЛ.Отчество);
			
			ПараметрыВыгрузки.Вставить("ИНН", ИННБухгалтер);
			
			//удаление блока СведФЛ
			РегламентированнаяОтчетность.УдалитьУзел(УзелГлавбухСведФЛ);
		КонецЕсли;
		ЗаполнитьДаннымиУзел(ПараметрыВыгрузки, УзелГлавбух);	
	КонецЕсли;
	                   	
	//Уполномоченный представитель
	ПараметрыВыгрузки.Очистить();
	Если НЕ ПустаяСтрока(ОргУП) Тогда
		Если ПустаяСтрока(ИННУП) Тогда
			Стр = ТаблСведенийФизЛиц.Найти(ОргУП, "ФизЛицФИО");
			Если Стр <> Неопределено Тогда
				ПараметрыВыгрузки = ПолучитьСтруктуруДанныхФЛ(Стр);
				//коррекция даты
				Если ПараметрыВыгрузки.ДатаДок = "  .  .    " ИЛИ ПараметрыВыгрузки.ДатаДок = ".." Тогда
					ПараметрыВыгрузки.Вставить("ДатаДок", "");
				Иначе
					ПараметрыВыгрузки.Вставить("ДатаДок", Формат(ПараметрыВыгрузки.ДатаДок, "ДФ=dd.MM.yyyy; ДЛФ=D"));
				КонецЕсли;
			КонецЕсли;
			
			//удаление блока ИННФЛ
			РегламентированнаяОтчетность.УдалитьУзел(УзелУполнПредставительИННФЛ);
		Иначе
			ФИОФЛ = РегламентированнаяОтчетность.РазложитьФИО(ОргУП);
			ПараметрыВыгрузки.Вставить("Фамилия", 	ФИОФЛ.Фамилия);
			ПараметрыВыгрузки.Вставить("Имя", 		ФИОФЛ.Имя);
			ПараметрыВыгрузки.Вставить("Отчество", 	ФИОФЛ.Отчество);
			
			ПараметрыВыгрузки.Вставить("ИНН", ИННУП);
			
			//удаление блока СведФЛ
			РегламентированнаяОтчетность.УдалитьУзел(УзелУполнПредставительСведФЛ);
		КонецЕсли;
		ЗаполнитьДаннымиУзел(ПараметрыВыгрузки, УзелУполнПредставитель);	
	КонецЕсли;
	
	//блок Отчетность
	УзелОтчетность = ПолучитьПодчиненныйЭлемент(УзелОрганизация, "Отчетность");
	                                         	
	//удаляем ненужный блок из узла ПериодОтч
	УзелПериодОтч = ПолучитьПодчиненныйЭлемент(УзелОтчетность, "ПериодОтч");
	Если СтруктураРеквизитовФормы.мСохраненныйДок.Периодичность = Перечисления.Периодичность.Месяц Тогда
		РегламентированнаяОтчетность.УдалитьУзел(ПолучитьПодчиненныйЭлемент(УзелПериодОтч, "Квартал"));
	Иначе
		РегламентированнаяОтчетность.УдалитьУзел(ПолучитьПодчиненныйЭлемент(УзелПериодОтч, "Месяц"));
	КонецЕсли;
	
	//удаляем ненужный блок из узла ФормаОтч
	УзелФормаОтч = ПолучитьПодчиненныйЭлемент(УзелОтчетность, "ФормаОтч");
	Если ПервыйТитульный.ВидДок = "1" Тогда
		РегламентированнаяОтчетность.УдалитьУзел(ПолучитьПодчиненныйЭлемент(УзелФормаОтч, "Корректирующая"));
	Иначе
		РегламентированнаяОтчетность.УдалитьУзел(ПолучитьПодчиненныйЭлемент(УзелФормаОтч, "Первичная"));
	КонецЕсли;
	
	УзелДокПредстав = ПолучитьПодчиненныйЭлемент(УзелОтчетность, "ДокПредстав");
	УзелРезидент = ПолучитьПодчиненныйЭлемент(УзелДокПредстав, "Резидент");
	УзелРазныеФО = ПолучитьПодчиненныйЭлемент(УзелДокПредстав, "РазныеФО");
	
	ПоМестуНахождения = ?(ПустаяСтрока(ПервыйТитульный.ТипОрг2), 1, 2);
	Если ПоМестуНахождения = 2 Тогда
		РегламентированнаяОтчетность.УдалитьУзел(УзелРезидент);
		ЗадатьЗначениеЭлемента(УзелРазныеФО, "ДокПредст", "220");
	ИначеЕсли ПредставляетсяЗнач = 4 Тогда
		РегламентированнаяОтчетность.УдалитьУзел(УзелРезидент);
		ЗадатьЗначениеЭлемента(УзелРазныеФО, "ДокПредст", "230");
	Иначе
		РегламентированнаяОтчетность.УдалитьУзел(УзелРазныеФО);
		ЗадатьЗначениеЭлемента(УзелРезидент, "ДокПредст", "210");
		Если ПредставляетсяЗнач = 1 Тогда
			ЗадатьЗначениеЭлемента(УзелРезидент, "ДокПредстРО", "1");
		ИначеЕсли ПредставляетсяЗнач = 2 Тогда
			ЗадатьЗначениеЭлемента(УзелРезидент, "ДокПредстРО", "3");
		ИначеЕсли ПредставляетсяЗнач = 3 Тогда
			ЗадатьЗначениеЭлемента(УзелРезидент, "ДокПредстРО", "2");
		КонецЕсли;
	КонецЕсли;
	
	//Лицензии
	УзелЛицензияШаблон = ПолучитьПодчиненныйЭлемент(УзелОрганизация, "Лицензия");
	
	Для каждого ЭкземплярТитульного Из Титульный  Цикл
		ДанныеЭкз = ЭкземплярТитульного.Данные[0].Значение;
		УзелЛицензия = СкопироватьУзел(УзелОрганизация, УзелЛицензияШаблон);
		ЗаполнитьДаннымиУзел(ДанныеЭкз, УзелЛицензия);	
		ЗадатьЗначениеЭлемента(УзелЛицензия, "ВидДеят", ПоказателиТитульный.ВидДеят);
	КонецЦикла;
	
	//ОбъемЗакупки
	УзелОбъемЗакупкиШаблон = ПолучитьПодчиненныйЭлемент(УзелРодитель, "ОбъемЗакупки");
	
	ЧислоВыгруженныхСтрок = 0;
	НомерСтроки = 1;
	стрНомСтроки = Формат(НомерСтроки, "ЧГ=");
	Пока РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(РазделДекларация, "П000000000003_" + стрНомСтроки) Цикл
		Если ЗначениеЗаполнено(РазделДекларация["П000000000003_" + стрНомСтроки]) Тогда
			ЧислоВыгруженныхСтрок = ЧислоВыгруженныхСтрок + 1;
			УзелОбъемЗакупки = СкопироватьУзел(УзелРодитель, УзелОбъемЗакупкиШаблон);
			ВыгрузитьСтрокуМногострочнойЧасти(РазделДекларация, УзелОбъемЗакупки, НомерСтроки);
			ЗадатьЗначениеЭлемента(УзелОбъемЗакупки, "П000000000001", Формат(ЧислоВыгруженныхСтрок, "ЧГ="));
			
			//адрес
			СтруктураАдреса = РегламентированнаяОтчетностьКлиентСервер.РазложитьАдрес(РазделДекларация["П000000000008_" + стрНомСтроки]);
			Если СтруктураАдреса.Страна = "643" Тогда
				//это резидент
				РегламентированнаяОтчетность.УдалитьУзел(ПолучитьПодчиненныйЭлемент(УзелОбъемЗакупки, "Иностр"));
				УзелРезидент = ПолучитьПодчиненныйЭлемент(УзелОбъемЗакупки, "Резидент");
				
				ВыгрузитьСтрокуМногострочнойЧасти(РазделДекларация, УзелРезидент, НомерСтроки);
				
				ПараметрыВыгрузки = Новый Структура;
				ПараметрыВыгрузки.Вставить("КодСтраны",	СтруктураАдреса.Страна);
				ПараметрыВыгрузки.Вставить("Индекс", 	СтруктураАдреса.Индекс);
				ПараметрыВыгрузки.Вставить("КодРегион", СтруктураАдреса.Регион);
				ПараметрыВыгрузки.Вставить("Район", 	СтруктураАдреса.Район);
				ПараметрыВыгрузки.Вставить("Город", 	СтруктураАдреса.Город);
				ПараметрыВыгрузки.Вставить("НаселПункт", СтруктураАдреса.НаселенныйПункт);
				ПараметрыВыгрузки.Вставить("Улица", 	СтруктураАдреса.Улица);
				ПараметрыВыгрузки.Вставить("Дом", 		СтруктураАдреса.Дом);
				ПараметрыВыгрузки.Вставить("Корпус", 	СтруктураАдреса.Корпус);
				ПараметрыВыгрузки.Вставить("Кварт", 	СтруктураАдреса.Квартира);
				
				ЗаполнитьДаннымиУзел(ПараметрыВыгрузки, ПолучитьПодчиненныйЭлемент(УзелРезидент, "П000000000008"));	
				
				Если ЗначениеЗаполнено(РазделДекларация["П000000000007_" + стрНомСтроки]) Тогда
					//КПП заполнен - это ЮЛ
					РегламентированнаяОтчетность.УдалитьУзел(ПолучитьПодчиненныйЭлемент(УзелРезидент, "ФЛ"));
					УзелЮЛ = ПолучитьПодчиненныйЭлемент(УзелРезидент, "ЮЛ");
					
					ВыгрузитьСтрокуМногострочнойЧасти(РазделДекларация, УзелЮЛ, НомерСтроки);
				Иначе
					//это ФЛ
					РегламентированнаяОтчетность.УдалитьУзел(ПолучитьПодчиненныйЭлемент(УзелРезидент, "ЮЛ"));
					УзелФЛ = ПолучитьПодчиненныйЭлемент(УзелРезидент, "ФЛ");
					
					ФИОИП = РегламентированнаяОтчетность.РазложитьФИО(РазделДекларация["П000000000004_" + стрНомСтроки]);
					ПараметрыВыгрузки.Вставить("Фамилия",	ФИОИП.Фамилия);
					ПараметрыВыгрузки.Вставить("Имя",		ФИОИП.Имя);
					ПараметрыВыгрузки.Вставить("Отчество",	ФИОИП.Отчество);
					
					ЗаполнитьДаннымиУзел(ПараметрыВыгрузки,УзелФЛ);
					
					ВыгрузитьСтрокуМногострочнойЧасти(РазделДекларация, УзелФЛ, НомерСтроки);
				КонецЕсли;
				
			Иначе
				//это иностранец
				РегламентированнаяОтчетность.УдалитьУзел(ПолучитьПодчиненныйЭлемент(УзелОбъемЗакупки, "Резидент"));
				УзелИностр = ПолучитьПодчиненныйЭлемент(УзелОбъемЗакупки, "Иностр");
				
				ВыгрузитьСтрокуМногострочнойЧасти(РазделДекларация, УзелИностр, НомерСтроки);
				
				Если ЗначениеЗаполнено(СтруктураАдреса.Страна) Тогда
					ЗадатьЗначениеЭлемента(УзелИностр, "П000000000081", СтруктураАдреса.Страна);		
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		НомерСтроки = НомерСтроки + 1;
		стрНомСтроки = Формат(НомерСтроки, "ЧГ=");
	КонецЦикла;
	
	//ОбъемВозврата
	УзелОбъемВозвратаШаблон = ПолучитьПодчиненныйЭлемент(УзелРодитель, "ОбъемВозврата");
	
	ЧислоВыгруженныхСтрок = 0;
	НомерСтроки = 1;
	стрНомСтроки = Формат(НомерСтроки, "ЧГ=");
	Пока РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(РазделВозвраты, "П000010000003_" + стрНомСтроки) Цикл
		Если ЗначениеЗаполнено(РазделВозвраты["П000010000003_" + стрНомСтроки]) Тогда
			ЧислоВыгруженныхСтрок = ЧислоВыгруженныхСтрок + 1;
			УзелОбъемВозврата = СкопироватьУзел(УзелРодитель, УзелОбъемВозвратаШаблон);
			ВыгрузитьСтрокуМногострочнойЧасти(РазделВозвраты, УзелОбъемВозврата, НомерСтроки);
			ЗадатьЗначениеЭлемента(УзелОбъемВозврата, "П000010000001", Формат(ЧислоВыгруженныхСтрок, "ЧГ="));
			
			//адрес
			СтруктураАдреса = РегламентированнаяОтчетностьКлиентСервер.РазложитьАдрес(РазделВозвраты["П000010000008_" + стрНомСтроки]);
			Если СтруктураАдреса.Страна = "643" Тогда
				//это резидент
				РегламентированнаяОтчетность.УдалитьУзел(ПолучитьПодчиненныйЭлемент(УзелОбъемВозврата, "Иностр"));
				УзелРезидент = ПолучитьПодчиненныйЭлемент(УзелОбъемВозврата, "Резидент");	
				
				ВыгрузитьСтрокуМногострочнойЧасти(РазделВозвраты, УзелРезидент, НомерСтроки);
				
				ПараметрыВыгрузки = Новый Структура;
				ПараметрыВыгрузки.Вставить("КодСтраны",	СтруктураАдреса.Страна);
				ПараметрыВыгрузки.Вставить("Индекс", 	СтруктураАдреса.Индекс);
				ПараметрыВыгрузки.Вставить("КодРегион", СтруктураАдреса.Регион);
				ПараметрыВыгрузки.Вставить("Район", 	СтруктураАдреса.Район);
				ПараметрыВыгрузки.Вставить("Город", 	СтруктураАдреса.Город);
				ПараметрыВыгрузки.Вставить("НаселПункт", СтруктураАдреса.НаселенныйПункт);
				ПараметрыВыгрузки.Вставить("Улица", 	СтруктураАдреса.Улица);
				ПараметрыВыгрузки.Вставить("Дом", 		СтруктураАдреса.Дом);
				ПараметрыВыгрузки.Вставить("Корпус", 	СтруктураАдреса.Корпус);
				ПараметрыВыгрузки.Вставить("Кварт", 	СтруктураАдреса.Квартира);
				
				ЗаполнитьДаннымиУзел(ПараметрыВыгрузки, ПолучитьПодчиненныйЭлемент(УзелРезидент, "П000010000008"));	
				
				Если ЗначениеЗаполнено(РазделВозвраты["П000010000007_" + стрНомСтроки]) Тогда
					//КПП заполнен - это ЮЛ
					РегламентированнаяОтчетность.УдалитьУзел(ПолучитьПодчиненныйЭлемент(УзелРезидент, "ФЛ"));
					УзелЮЛ = ПолучитьПодчиненныйЭлемент(УзелРезидент, "ЮЛ");
					
					ВыгрузитьСтрокуМногострочнойЧасти(РазделВозвраты, УзелЮЛ, НомерСтроки);
				Иначе
					//это ФЛ
					РегламентированнаяОтчетность.УдалитьУзел(ПолучитьПодчиненныйЭлемент(УзелРезидент, "ЮЛ"));
					УзелФЛ = ПолучитьПодчиненныйЭлемент(УзелРезидент, "ФЛ");
					
					ФИОИП = РегламентированнаяОтчетность.РазложитьФИО(РазделВозвраты["П000010000004_" + стрНомСтроки]);
					ПараметрыВыгрузки.Вставить("Фамилия",	ФИОИП.Фамилия);
					ПараметрыВыгрузки.Вставить("Имя",		ФИОИП.Имя);
					ПараметрыВыгрузки.Вставить("Отчество",	ФИОИП.Отчество);
					
					ЗаполнитьДаннымиУзел(ПараметрыВыгрузки,УзелФЛ);
					
					ВыгрузитьСтрокуМногострочнойЧасти(РазделВозвраты, УзелФЛ, НомерСтроки);
				КонецЕсли;
				
			Иначе
				//это иностранец
				РегламентированнаяОтчетность.УдалитьУзел(ПолучитьПодчиненныйЭлемент(УзелОбъемВозврата, "Резидент"));
				УзелИностр = ПолучитьПодчиненныйЭлемент(УзелОбъемВозврата, "Иностр");
				
				ВыгрузитьСтрокуМногострочнойЧасти(РазделВозвраты, УзелИностр, НомерСтроки);
				
				Если ЗначениеЗаполнено(СтруктураАдреса.Страна) Тогда
					ЗадатьЗначениеЭлемента(УзелИностр, "П000010000081", СтруктураАдреса.Страна);		
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
                       	
		НомерСтроки = НомерСтроки + 1;
		стрНомСтроки = Формат(НомерСтроки, "ЧГ=");
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ВывестиПоказательВXML(Узел, ЗначениеПоказателя)
	
	МинШирина = Узел.МинРазмерность;
	МаксШирина = Узел.МаксРазмерность;
	
	Если Узел.Формат = "T" ИЛИ Узел.Формат = "Т" Тогда // учтем оба варианта: кириллицу и латиницу
		Если ТипЗнч(ЗначениеПоказателя) = Тип("Дата") Тогда
			Узел.Значение = Формат(ЗначениеПоказателя, "ДФ=dd.MM.yyyy");
		Иначе
			Узел.Значение = ?(МаксШирина < СтрДлина(СокрЛП(ЗначениеПоказателя)), СокрЛП(Лев(СокрЛП(ЗначениеПоказателя), МаксШирина)), СокрЛП(ЗначениеПоказателя));
		КонецЕсли;
	ИначеЕсли Узел.Формат = "N" Тогда
		СтрокаФормата = "ЧРД=.;ЧН=0;ЧГ=;";
		Если Узел.МаксРазмерность <> 0 И Узел.МаксРазмерность <> 99999 Тогда
			СтрокаФормата = СтрокаФормата + "ЧЦ=" + Формат(Узел.МаксРазмерность, "ЧГ=") + ";";
		КонецЕсли;
		Если Узел.МинРазмерность <> 99999 Тогда
			СтрокаФормата = СтрокаФормата + "ЧДЦ=" + Формат(Узел.МинРазмерность, "ЧГ=") + ";";
		КонецЕсли;
		Узел.Значение = СокрЛП(Формат(ЗначениеПоказателя, СтрокаФормата));
	ИначеЕсли Узел.Формат = "gYear" Тогда
		Если ТипЗнч(ЗначениеПоказателя) = Тип("Дата") Тогда
			Узел.Значение = СокрЛП(Формат(ЗначениеПоказателя, "ДФ=гггг"));
		Иначе
			Узел.Значение = Прав(СокрЛП(ЗначениеПоказателя), 4);
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция УзелПуст(Узел)
	
	ПустойУзел = ?(Узел.Формат = "N", Узел.Значение = "0" ИЛИ (НЕ ЗначениеЗаполнено(Узел.Значение)), НЕ ЗначениеЗаполнено(Узел.Значение));
	Для Каждого Стр из Узел.Строки Цикл
		Если НЕ УзелПуст(Стр) Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	Возврат ПустойУзел;
	
КонецФункции

&НаСервере
Функция ПолучитьПодчиненныйЭлемент(Узел, КодЭлемента)
	
	Для Каждого Стр Из Узел.Строки Цикл
		Если Стр.Код = КодЭлемента Тогда
			Возврат Стр;
		КонецЕсли;
	КонецЦикла;
	
КонецФункции

&НаСервере
Функция ПолучитьСтруктуруДанныхФЛ(СтраницаФЛ)
	ПараметрыВыгрузки = Новый Структура;
	
	ФИОФЛ = РегламентированнаяОтчетность.РазложитьФИО(СтраницаФЛ.ФизЛицоФИО);
	ПараметрыВыгрузки.Вставить("Фамилия", 	ФИОФЛ.Фамилия);
	ПараметрыВыгрузки.Вставить("Имя", 		ФИОФЛ.Имя);
	ПараметрыВыгрузки.Вставить("Отчество", 	ФИОФЛ.Отчество);
	
	ПараметрыВыгрузки.Вставить("АдрМЖРез", 		СтраницаФЛ.ФизЛицИноАдрес);
	
	ПараметрыВыгрузки.Вставить("КодВидДок", 	СтраницаФЛ.ФизЛицДокКод);	
	ПараметрыВыгрузки.Вставить("УдЛичн", 		СтраницаФЛ.ФизЛицДокСерияНомер);	
	ПараметрыВыгрузки.Вставить("ВыдУдЛичн", 	СтраницаФЛ.ФизЛицДокВыдан);	
	ПараметрыВыгрузки.Вставить("ДатаДок", 		СтраницаФЛ.ФизЛицДокДата);	
	
	ПараметрыВыгрузки.Вставить("КодСтраны", 	"643");	
	ПараметрыВыгрузки.Вставить("КодРегион", 	СтраницаФЛ.ФизЛицКодСуб);	
	ПараметрыВыгрузки.Вставить("Индекс", 		СтраницаФЛ.ФизЛицИндекс);	
	ПараметрыВыгрузки.Вставить("Район", 		СтраницаФЛ.ФизЛицРайон);	
	ПараметрыВыгрузки.Вставить("Город", 		СтраницаФЛ.ФизЛицГород);	
	ПараметрыВыгрузки.Вставить("НаселПункт", 	СтраницаФЛ.ФизЛицНП);	
	ПараметрыВыгрузки.Вставить("Улица", 		СтраницаФЛ.ФизЛицУлица);	
	ПараметрыВыгрузки.Вставить("Дом", 			СтраницаФЛ.ФизЛицДом);	
	ПараметрыВыгрузки.Вставить("Корпус", 		СтраницаФЛ.ФизЛицКорпус);	
	ПараметрыВыгрузки.Вставить("Кварт", 		СтраницаФЛ.ФизЛицКвартира);	
	
	Возврат ПараметрыВыгрузки;
КонецФункции 

&НаСервере
Процедура ЗадатьЗначениеЭлемента(Узел, КодЭлемента, Значение)
	
	ВывестиПоказательВXML(ПолучитьПодчиненныйЭлемент(Узел, КодЭлемента), Значение);
	
КонецПроцедуры

&НаСервере
Функция СкопироватьУзел(Родитель, Узел)
	
	НовыйУзел = Родитель.Строки.Добавить();
	ЗаполнитьЗначенияСвойств(НовыйУзел, Узел, , "Родитель, Строки");
	Для Каждого Стр из Узел.Строки Цикл
		СкопироватьУзел(НовыйУзел, Стр);
	КонецЦикла;
	Возврат НовыйУзел;
	
КонецФункции

&НаСервере
Процедура ВыгрузитьСтрокуМногострочнойЧасти(Данные, Узел, НомерСтроки, ПоказателиИсключения = Неопределено, ВыгружатьПустую = Ложь)
	
	Если ПоказателиИсключения = Неопределено Тогда
		СтрИсключения = Новый Структура;
	Иначе
		СтрИсключения = Новый Структура(ПоказателиИсключения);
	КонецЕсли;
	
	СуффиксТекущейСтроки = "_" + Формат(НомерСтроки, "ЧГ=");
	
	СтрокаПустая = Истина;
	Для Каждого Стр Из Узел.Строки Цикл
		Если НЕ ЗначениеЗаполнено(Стр.Ключ) Тогда
			Продолжить;
		КонецЕсли;
		Если НЕ СтрИсключения.Свойство(Стр.Ключ) И ЗначениеПоказателяЗаполнено(Данные[Стр.Ключ + СуффиксТекущейСтроки], Стр) Тогда
			СтрокаПустая = Ложь;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ СтрокаПустая ИЛИ ВыгружатьПустую Тогда
		Для Каждого Стр Из Узел.Строки Цикл
			Если ЗначениеЗаполнено(Стр.Ключ) Тогда
				ВывестиПоказательВXML(Стр, Данные[Стр.Ключ + СуффиксТекущейСтроки]);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЗначениеПоказателяЗаполнено(ЗначениеПоказателя, ЯвляетсяСуммой)
	
	Если ТипЗнч(ЯвляетсяСуммой) = Тип("Булево") Тогда
		ПоказательЯвляетсяСуммой = ЯвляетсяСуммой;
	Иначе
		ПоказательЯвляетсяСуммой = (ЯвляетсяСуммой.Формат = "N" И ЯвляетсяСуммой.МаксРазмерность >= 10 И ЯвляетсяСуммой.МинРазмерность = 99999);
	КонецЕсли;
	
	Возврат ?(ПоказательЯвляетсяСуммой, ЗначениеСуммыЗаполнено(ЗначениеПоказателя), ЗначениеЗаполнено(ЗначениеПоказателя));
	
КонецФункции

&НаСервере
Функция ЗначениеСуммыЗаполнено(ЗначениеСуммы)
	
	Возврат (Окр(ЗначениеСуммы) <> 0)
	
КонецФункции

&НаКлиенте
Процедура ПроверитьВыгрузку(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьВыгрузкуЗавершение", ЭтотОбъект);

	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
		
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузкуЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПроверитьВыгрузкуОтчета();
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузкуОтчета()
	
	Если НЕ ЗначениеЗаполнено(СтруктураРеквизитовФормы.Организация) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Организация не выбрана! Выгрузка невозможна.'");
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьВыгрузкуОтчетаЗавершение", ЭтотОбъект);
	
	Если Модифицированность Тогда
		СохранитьНаКлиенте(,ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузкуОтчетаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ФормаВыгрузкиРеглОтчета = ПолучитьФорму("Документ.ВыгрузкаРегламентированныхОтчетов.Форма.ФормаДокумента", , ЭтаФорма);
	
	СпДокОсн = Новый СписокЗначений;
	СпДокОсн.Добавить(СтруктураРеквизитовФормы.мСохраненныйДок);
	
	ФормаВыгрузкиРеглОтчета.Проверить(СпДокОсн);
	
КонецПроцедуры

&НаКлиенте
Процедура АктивизироватьЯчейку(Ячейка) Экспорт
	
	РегламентированнаяОтчетностьКлиент.АктивизироватьЯчейку(ЭтаФорма, Ячейка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьБланк(Команда)
	
	Отказ = Ложь;
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("Команда", Команда);
	ОписаниеОповещения = Новый ОписаниеОповещения("ПоказатьБланкЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередПечатьюРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьБланкЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;

	Команда = ДополнительныеПараметры.Команда;
		
	Печать(Команда.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура Печать(ВидПечати, НеИзФормыОтчета = Ложь) Экспорт
        	
	Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1. Формируется печатная форма...'"), ЭтаФорма.Заголовок), , , БиблиотекаКартинок.Печать);
	
	Если НЕ ПечатьНаСервере(ВидПечати) Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ОткрытьФормуПредварительногоПросмотра(ЭтаФорма, ВидПечати, , СтруктураРеквизитовФормы.СписокПечатаемыхЛистов);
		
	СтруктураРеквизитовФормы.мРежимПечати = Ложь;

КонецПроцедуры

&НаСервере
Функция ПечатьНаСервере(ВидПечати)
	
	Если НЕ РегламентированнаяОтчетность.ПринтерДоступен() Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Перед формированием печатных форм необходимо определить в системе принтер и задать его в качестве используемого по умолчанию!'");
		Сообщение.Сообщить();
		Возврат Ложь;
	КонецЕсли;
	
	Если ТипЗнч(мДеревоВыбранныхСтраниц) <> Тип("ДанныеФормыДерево") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	СтруктураРеквизитовФормы.мПечатныеФормы.Очистить();
	СтруктураРеквизитовФормы.мРежимПечати = Истина;
	
	СтруктураПараметров = Новый Структура;
	
	СохранитьДанныеРаздела(СтруктураРеквизитовФормы.НаимТекущегоРаздела, Ложь, Ложь);
	
	сохрТаблДок = ТабличныйДокумент.ПолучитьОбласть();
	
	СтрПоля = "ПолеСверху, ПолеСправа, ПолеСнизу, ПолеСлева";
	ВремПоля = Новый Структура(СтрПоля);
	
	ЗаполнитьЗначенияСвойств(ВремПоля, ТабличныйДокумент, СтрПоля);
	
	ВывестиМакетВТаблДокНаСервере("Титульный", 1, Ложь);
	
	ОбщиеРеквизитыРазделов = ПолучитьОбщиеРеквизитыСТитульногоЛиста();
	
	Для Каждого СтрокаУровня1 Из мДеревоВыбранныхСтраниц.ПолучитьЭлементы() Цикл
		
		Пометка = РегламентированнаяОтчетность.ПечататьРаздел(ЭтаФорма, СтрокаУровня1);

		ИмяСтраницыПанели  = СтрокаУровня1.ИмяСтраницы;
		НаименованиеЛиста  = СтрокаУровня1.Представление;
		ОриентацияЛиста    = СтрокаУровня1.ОриентацияСтраницы;
		ИмяОбластиТаблПоля = СтрокаУровня1.ИмяОбластиТабличногоПоля;

		Если Пометка = 0 Тогда
			Продолжить;
		КонецЕсли;

		СтруктураПараметров.Очистить();
		СтруктураПараметров.Вставить("НаименованиеЛиста",  НаименованиеЛиста);
		СтруктураПараметров.Вставить("ОриентацияЛиста",    ОриентацияЛиста);
		СтруктураПараметров.Вставить("ИмяСтраницы",        ИмяСтраницыПанели);
		Структурапараметров.Вставить("ИмяОбластиТаблПоля", ИмяОбластиТаблПоля);
		СтруктураПараметров.Вставить("ВидПечати",          ВидПечати);
		
		Если (СтрокаУровня1.ИмяСтраницы = "Декларация" ИЛИ СтрокаУровня1.ИмяСтраницы = "Возвраты") Тогда	
			ВывестиМакетВТаблДокНаСервере(СтрокаУровня1.ИмяСтраницы, 0, Ложь);
			
			Для Каждого ОбластьТД Из ТабличныйДокумент.Области Цикл
				Если СтрЧислоВхождений(ОбластьТД.Имя, "УдалитьСтроку") > 0 Тогда
					ОбластьТД.Очистить();
					ОбластьТД.Гиперссылка = Ложь;
				ИначеЕсли СтрЧислоВхождений(ОбластьТД.Имя, "ДопЛиния") > 0
					ИЛИ СтрЧислоВхождений(ОбластьТД.Имя, "ДобавитьСтроку") > 0
					ИЛИ СтрЧислоВхождений(ОбластьТД.Имя, "Заполнить") > 0 Тогда
					НетЛинии = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.НетЛинии);
					ОбластьТД.Очистить();
					ОбластьТД.ВысотаСтроки = 1;
					ОбластьТД.ГраницаСверху = НетЛинии;
					ОбластьТД.ГраницаСнизу  = НетЛинии;
					ОбластьТД.ГраницаСлева  = НетЛинии;
					ОбластьТД.ГраницаСправа = НетЛинии;
				КонецЕсли;
			КонецЦикла;
			
			СформироватьПечатныеФормыРазделаДекларация(СтруктураПараметров, ОбщиеРеквизитыРазделов, СтрПоля);
			Продолжить;
		КонецЕсли;
		
		Если мСтруктураМногостраничныхРазделов.Свойство(ИмяСтраницыПанели) Тогда
			// выводим на печать все созданные страницы многостраничного раздела
			СтруктураПараметров.Вставить("ИмяСтраницыПанели", ИмяСтраницыПанели);
			ВывестиНаПечатьДополнительныеСтраницы(СтруктураПараметров, ОбщиеРеквизитыРазделов);
		КонецЕсли;
		
	КонецЦикла;
	
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(сохрТаблДок);
	ЗаполнитьЗначенияСвойств(ТабличныйДокумент, ВремПоля, СтрПоля);
	
	РегламентированнаяОтчетностьКлиентСервер.ПроставлениеНомеровЛистов(ЭтаФорма, , СтруктураРеквизитовФормы.СписокПечатаемыхЛистов);
	
	КопироватьДанныеФормы(мДеревоВыбранныхСтраниц, мДеревоСтраницОтчета);
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Процедура ВывестиНаПечатьЛист(Парам1, ОбщиеРеквизитыРазделов, СтрПоля = Неопределено, ИндексСтраницы = Неопределено)
	
	СоответствиеРазделовМакетам = Новый Соответствие;
	
	СоответствиеРазделовМакетам.Вставить("Титульный", "ПечатнаяФормаОтчета2009Кв4_Титульный");
	СоответствиеРазделовМакетам.Вставить("ФизЛица",   "ПечатнаяФормаОтчета2009Кв4_ФизЛица");
		
	ПечатнаяФормаРаздела = СоответствиеРазделовМакетам[Парам1.ИмяСтраницы];
		
	МакетПечатнойФормы = Отчеты[Сред(Лев(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, ".Форма.") - 1), 7)].ПолучитьМакет(ПечатнаяФормаРаздела);
	МакетПечатнойФормы.ПолеСверху = 5;
	МакетПечатнойФормы.ПолеСправа = 5;
	МакетПечатнойФормы.ПолеСнизу = 5;
	МакетПечатнойФормы.ПолеСлева = 5;
	
	ЗаполнитьПечатнуюФорму(Парам1, МакетПечатнойФормы, ОбщиеРеквизитыРазделов, ИндексСтраницы);
		
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(МакетПечатнойФормы);
	ЗаполнитьЗначенияСвойств(ТабличныйДокумент, МакетПечатнойФормы, СтрПоля, "Макет");

	РегламентированнаяОтчетность.ВывестиНаПечатьЛистОбщая(ЭтаФорма.Заголовок, Парам1, ТабличныйДокумент, СтруктураРеквизитовФормы.мПечатныеФормы);
	
КонецПроцедуры

&НаСервере
Процедура ВывестиНаПечатьДополнительныеСтраницы(СтруктураПараметровСтраницы, ОбщиеРеквизитыРазделов)
	Перем ИмяСтраницы;
	Перем ТаблицаСтраницРаздела;
	
	СтруктураПараметровСтраницы.Свойство("ИмяСтраницыПанели", ИмяСтраницы);
	
	Если Не мСтруктураМногостраничныхРазделов.Свойство(ИмяСтраницы, ТаблицаСтраницРаздела) Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаСтраницРаздела = ЭтаФорма[ТаблицаСтраницРаздела];
	
	Для Каждого Страница Из ТаблицаСтраницРаздела Цикл
		ТекущийИндекс = ТаблицаСтраницРаздела.Индекс(Страница);
		ВывестиМакетВТаблДокНаСервере(ИмяСтраницы, ТекущийИндекс + 1, Ложь);
		ВывестиНаПечатьЛист(СтруктураПараметровСтраницы, ОбщиеРеквизитыРазделов, , ТекущийИндекс);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьОбщиеРеквизитыСТитульногоЛиста()
	
	МассивИНН            = Новый Массив(12);
	МассивКПП            = Новый Массив(9);
	МассивДатаПодписиРук = Новый Массив(8);
	МассивДатаПодписиБух = Новый Массив(8);
	МассивДатаПодписиУП  = Новый Массив(8);
	МассивИННРук		 = Новый Массив(12);
	МассивИННБух 		 = Новый Массив(12);
	МассивИННУП 		 = Новый Массив(12);
				
	ИсходныйМакет = ТабличныйДокумент;
		
	Область = ИсходныйМакет.Области.Найти("ИНН1");
	
	Если НЕ Область = Неопределено Тогда
		
		СтрИНН = Область.Значение;
		
		Если СтрДлина(СтрИНН) = 10 Тогда
			СтрИНН = "00" + СтрИНН;
		КонецЕсли;
				
		Для Ном = 1 По СтрДлина(СтрИНН) Цикл
			
			МассивИНН[Ном - 1] = Сред(СтрИНН, Ном, 1);
			
		КонецЦикла;
		
	КонецЕсли;
		
	Область = ИсходныйМакет.Области.Найти("КПП1");
	
	Если НЕ Область = Неопределено Тогда
		
		Для Ном = 1 По СтрДлина(Область.Значение) Цикл
			
			МассивКПП[Ном - 1] = Сред(Область.Значение, Ном, 1);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Область = ИсходныйМакет.Области.Найти("ИННРук");
	
	Если НЕ Область = Неопределено Тогда
		
		Для Ном = 1 По СтрДлина(Область.Значение) Цикл
			
			МассивИННРук[Ном - 1] = Сред(Область.Значение, Ном, 1);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Область = ИсходныйМакет.Области.Найти("ИННГБ");
	
	Если НЕ Область = Неопределено Тогда
		
		Для Ном = 1 По СтрДлина(Область.Значение) Цикл
			
			МассивИННБух[Ном - 1] = Сред(Область.Значение, Ном, 1);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Область = ИсходныйМакет.Области.Найти("ИННУП");
	
	Если НЕ Область = Неопределено Тогда
		
		Для Ном = 1 По СтрДлина(Область.Значение) Цикл
			
			МассивИННУП[Ном - 1] = Сред(Область.Значение, Ном, 1);
			
		КонецЦикла;
		
	КонецЕсли;
			
	Область = ИсходныйМакет.Области.Найти("ДатаПодписи");
	
	Если НЕ Область = Неопределено Тогда
		
		СтрДатаПодписи = Лев(СтрЗаменить(Область.Значение, ".", ""), 8);
		СтрДатаПодписи = ?(СтрДатаПодписи = "01010001", "        ", СтрДатаПодписи);
		
		Для Ном = 1 По СтрДлина(СтрДатаПодписи) Цикл
			
			Если ЗначениеЗаполнено(ИсходныйМакет.Области.ОргДиректор.Значение) Тогда
				МассивДатаПодписиРук[Ном - 1] = Сред(СтрДатаПодписи, Ном, 1);
			КонецЕсли;	
			Если ЗначениеЗаполнено(ИсходныйМакет.Области.ОргБухгалтер.Значение) Тогда
				МассивДатаПодписиБух[Ном - 1] = Сред(СтрДатаПодписи, Ном, 1);
			КонецЕсли;	
			Если НЕ РегламентированнаяОтчетностьВызовСервера.ЭтоЮридическоеЛицо(СтруктураРеквизитовФормы.Организация) Тогда
				МассивДатаПодписиУП[Ном - 1] = Сред(СтрДатаПодписи, Ном, 1);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ОбщиеРеквизитыРазделов = Новый Структура;
		
	ОбщиеРеквизитыРазделов.Вставить("ИНН", МассивИНН);
	ОбщиеРеквизитыРазделов.Вставить("КПП", МассивКПП);
	ОбщиеРеквизитыРазделов.Вставить("ДатаПодписиРук", МассивДатаПодписиРук);
	ОбщиеРеквизитыРазделов.Вставить("ДатаПодписиБух", МассивДатаПодписиБух);
	ОбщиеРеквизитыРазделов.Вставить("ДатаПодписиУП",  МассивДатаПодписиУП);	
	ОбщиеРеквизитыРазделов.Вставить("ИННРук", МассивИННРук);	
	ОбщиеРеквизитыРазделов.Вставить("ИННГБ",  МассивИННБух);	
	ОбщиеРеквизитыРазделов.Вставить("ИННУП",  МассивИННУП);	
	
	Возврат ОбщиеРеквизитыРазделов;
	
КонецФункции

&НаСервере
Процедура СформироватьПечатныеФормыРазделаДекларация(СтруктураПараметровСтраницы, ОбщиеРеквизитыРазделов, СтрПоля)
	
	Если ПриПечатиГруппироватьПоКодам Тогда

		Если СтруктураПараметровСтраницы.НаименованиеЛиста = "Декларация" Тогда
			СформироватьРазделДляПечати(СтруктураРеквизитовФормы.мИдГруппы1, СтруктураПараметровСтраницы, ОбщиеРеквизитыРазделов, СтрПоля);
		Иначе
			СформироватьРазделДляПечати(СтруктураРеквизитовФормы.мИдГруппы3, СтруктураПараметровСтраницы, ОбщиеРеквизитыРазделов, СтрПоля);
		КонецЕсли;

	Иначе
	
		Если СтруктураПараметровСтраницы.НаименованиеЛиста = "Декларация" Тогда
			
			ПолеТабличногоДокументаВремТаблДок = Новый ТабличныйДокумент;
			
			ПолеТабличногоДокументаВремТаблДок.Очистить();
			ПолеТабличногоДокументаВремТаблДок.Вывести(ТабличныйДокумент.ПолучитьОбласть(1, 0, ТабличныйДокумент.Области.ОсновнаяЧасть2.Низ, 0));
			ПолеТабличногоДокументаВремТаблДок.Вывести(ТабличныйДокумент.ПолучитьОбласть(ТабличныйДокумент.Области.ПустаяСтрока.Верх, 0, ТабличныйДокумент.ВысотаТаблицы, 0));
			
			СохрТабличныйДокумент = ТабличныйДокумент.ПолучитьОбласть();
			
			ТабличныйДокумент.Очистить();
			ТабличныйДокумент.Вывести(ПолеТабличногоДокументаВремТаблДок);
			ЗаполнитьЗначенияСвойств(ТабличныйДокумент, ПолеТабличногоДокументаВремТаблДок, СтрПоля);
			
			РегламентированнаяОтчетность.ВывестиНаПечатьЛистОбщая(ЭтаФорма.Заголовок, СтруктураПараметровСтраницы, ТабличныйДокумент, СтруктураРеквизитовФормы.мПечатныеФормы);
			
			ТабличныйДокумент.Очистить();
			ТабличныйДокумент.Вывести(СохрТабличныйДокумент);
            
			ПолеТабличногоДокументаВремТаблДок.Очистить();
			ПолеТабличногоДокументаВремТаблДок.Вывести(ТабличныйДокумент.ПолучитьОбласть("ОсновнаяЧасть1"));
			ПолеТабличногоДокументаВремТаблДок.Вывести(ТабличныйДокумент.ПолучитьОбласть(ТабличныйДокумент.Области.ОсновнаяЧасть3.Верх, 0, ТабличныйДокумент.ВысотаТаблицы, 0));
			ОблМнЧ = ПолеТабличногоДокументаВремТаблДок.Область("МногострочнаяЧасть2");
			НизМнЧ = ОблМнЧ.Низ;
			ОблМнЧ.Имя = "";
			ПолеТабличногоДокументаВремТаблДок.Область(ПолеТабличногоДокументаВремТаблДок.Области.ОсновнаяЧасть3.Верх + 1, 0, НизМнЧ, 0).Имя = "МногострочнаяЧасть";
			
			СохрТабличныйДокумент = ТабличныйДокумент.ПолучитьОбласть();
			
			ТабличныйДокумент.Очистить();
			ТабличныйДокумент.Вывести(ПолеТабличногоДокументаВремТаблДок);
			ЗаполнитьЗначенияСвойств(ТабличныйДокумент, ПолеТабличногоДокументаВремТаблДок, СтрПоля);
			
			РегламентированнаяОтчетность.ВывестиНаПечатьЛистОбщая(ЭтаФорма.Заголовок, СтруктураПараметровСтраницы, ТабличныйДокумент, СтруктураРеквизитовФормы.мПечатныеФормы);
			
			ТабличныйДокумент.Очистить();
			ТабличныйДокумент.Вывести(СохрТабличныйДокумент);
    	
		ИначеЕсли СтруктураПараметровСтраницы.НаименованиеЛиста = "Возвраты" Тогда
	
			СформироватьПечатныеФормыРазделаВозвраты(СтруктураПараметровСтраницы, ОбщиеРеквизитыРазделов, СтрПоля);
	
		КонецЕсли;
	
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПечатнуюФорму(ПараметрыПечати, МакетПечатнойФормы, ОбщиеРеквизитыРазделов, ИндексСтраницы)
	
	ИсходныйМакет = ТабличныйДокумент;
		
	Для Каждого Область Из ИсходныйМакет.Области Цикл
		
		Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник И Область.СодержитЗначение Тогда
			
			Если ПараметрыПечати.ИмяСтраницы = "Титульный" Тогда
				
				Если СтрЧислоВхождений(Область.Имя, "ИНН") > 0
				 ИЛИ СтрЧислоВхождений(Область.Имя, "КПП") > 0
				 ИЛИ СтрЧислоВхождений(Область.Имя, "ДатаПодписи") > 0
				 ИЛИ СтрЧислоВхождений(Область.Имя, "Представляется") > 0 Тогда
					
					Продолжить;
					
				ИначеЕсли СтрЧислоВхождений(Область.Имя, "ОтчетГод") > 0
					  ИЛИ СтрЧислоВхождений(Область.Имя, "КодИМНС") > 0
					  ИЛИ Область.Имя = "ОГРН"
					  ИЛИ СтрЧислоВхождений(Область.Имя, "Прил") > 0
					  ИЛИ СтрЧислоВхождений(Область.Имя, "ИННРук") > 0
					  ИЛИ СтрЧислоВхождений(Область.Имя, "ИННГБ") > 0 
					  ИЛИ СтрЧислоВхождений(Область.Имя, "ИННУП") > 0 Тогда
					
					Для Ном = 1 По СтрДлина(Область.Значение) Цикл
						
						МакетПечатнойФормы.Области[Область.Имя + Ном].Значение = Сред(Область.Значение, Ном, 1);
						
					КонецЦикла;
					
					Продолжить;
					
				ИначеЕсли СтрЧислоВхождений(Область.Имя, "НомКоррект") > 0 Тогда
					
					НомерКорр = СтрЗаменить(Область.Значение, 0, " ");
					
					МакетПечатнойФормы.Области[Область.Имя].Значение = НомерКорр;
					
					Продолжить;
					
				КонецЕсли;
				
				Если ИндексСтраницы = 0 Тогда
					МакетПечатнойФормы.Области["ВидДок"].Значение = ?(СтруктураРеквизитовФормы.ВидДокумента = 0, "1", "3");
				Иначе
					МакетПечатнойФормы.Области["ВидДок"].Значение = "";
					МакетПечатнойФормы.Области["НомКоррект"].Значение = "";
				КонецЕсли;
				
			ИначеЕсли ПараметрыПечати.ИмяСтраницы = "ФизЛица" Тогда
				
				Если СтрЧислоВхождений(Область.Имя, "ФизЛицДокДата") > 0 Тогда
					
					Если ЗначениеЗаполнено(Область.Значение) Тогда
						СтрокаДт =  Лев(СтрЗаменить(Область.Значение, ".", ""), 8);
						Для Ном = 1 По СтрДлина(СтрокаДт) Цикл
							
							МакетПечатнойФормы.Области[Область.Имя + Ном].Значение = Сред(СтрокаДт, Ном, 1);
							
						КонецЦикла;
						
					КонецЕсли;
					
					Продолжить;	
					
				ИначеЕсли (СтрЧислоВхождений(Область.Имя, "ФизЛицИнд") > 0  
					ИЛИ СтрЧислоВхождений(Область.Имя, "ФизЛицДок") > 0
					ИЛИ СтрЧислоВхождений(Область.Имя, "ФизЛицС") > 0) 
					И (Область.Имя <> "ФизЛицДокВид") И (Область.Имя <> "ФизЛицДокВыдан")  
					И (Область.Имя <> "ФизЛицДокСерияНомер") 
					И (Область.Имя <> "ФизЛицСлТел") И (Область.Имя <> "ФизЛицСубъект") Тогда
					
					Если Не ПустаяСтрока(Область.Значение) Тогда
					Для Ном = 1 По СтрДлина(Область.Значение) Цикл
						
						МакетПечатнойФормы.Области[Область.Имя + Ном].Значение = Сред(Область.Значение, Ном, 1);
						
					КонецЦикла;
					КонецЕсли;
					Продолжить;     				
					
				КонецЕсли;

			КонецЕсли;
			МакетПечатнойФормы.Области[Область.Имя].Значение = Область.Значение;
			
		КонецЕсли;
		
	КонецЦикла;
		
	Для Каждого Реквизит Из ОбщиеРеквизитыРазделов Цикл
		
		Индекс = 1;
		Постфикс = "_1";
		Разделитель = Истина;
		
		Если Реквизит.Ключ = "ДатаПодписиРук" Тогда
			Постфикс = "1";
			Разделитель = Ложь;
			Если ПараметрыПечати.ИмяСтраницы = "Титульный" Тогда
				НаименованиеОбласти = "ДатаПодписиРук";
			Иначе
				НаименованиеОбласти = "ДатаПодписи";
			КонецЕсли;
		ИначеЕсли Реквизит.Ключ = "ДатаПодписиБух" Тогда
			Постфикс = "1";
			Разделитель = Ложь;
			Если ПараметрыПечати.ИмяСтраницы = "Титульный" Тогда
				НаименованиеОбласти = "ДатаПодписиБух";
			Иначе
				НаименованиеОбласти = "ДатаПодписи";
			КонецЕсли;
		ИначеЕсли Реквизит.Ключ = "ДатаПодписиУП" Тогда
			Постфикс = "1";
			Разделитель = Ложь;
			Если ПараметрыПечати.ИмяСтраницы = "Титульный" Тогда
			НаименованиеОбласти = "ДатаПодписиУП";
			Иначе
				НаименованиеОбласти = "ДатаПодписи";
			КонецЕсли;
		ИначеЕсли Реквизит.Ключ = "ИННРук" Тогда
			Если ПараметрыПечати.ИмяСтраницы = "Титульный"
			   И ЗначениеЗаполнено(МакетПечатнойФормы.Области.ОргДиректор.Значение) Тогда	
				НаименованиеОбласти = "ИННРук";
				Постфикс = "1";
				Разделитель = Ложь;
			КонецЕсли;	
		ИначеЕсли Реквизит.Ключ = "ИННГБ" Тогда
			Если ПараметрыПечати.ИмяСтраницы = "Титульный"
			   И ЗначениеЗаполнено(МакетПечатнойФормы.Области.ОргБухгалтер.Значение)Тогда	
				НаименованиеОбласти = "ИННГБ";
				Постфикс = "1";
				Разделитель = Ложь;
			КонецЕсли;		
		ИначеЕсли Реквизит.Ключ = "ИННУП" Тогда
			Если ПараметрыПечати.ИмяСтраницы = "Титульный"
			   И ЗначениеЗаполнено(МакетПечатнойФормы.Области.ОргУП.Значение)Тогда		
				НаименованиеОбласти = "ИННУП";
				Постфикс = "1";
				Разделитель = Ложь;
			КонецЕсли;			
		Иначе
			НаименованиеОбласти = Реквизит.Ключ + Индекс;
		КонецЕсли;
		
		Пока НЕ МакетПечатнойФормы.Области.Найти(НаименованиеОбласти + Постфикс) = Неопределено Цикл
			
			Для Ном = 1 По Реквизит.Значение.Количество() Цикл
				Если ЗначениеЗаполнено(Реквизит.Значение[Ном - 1]) Тогда
					МакетПечатнойФормы.Области[НаименованиеОбласти + ?(Разделитель, "_", "") + Ном].Значение = Реквизит.Значение[Ном - 1];
				КонецЕсли;
			КонецЦикла;
			
			Индекс = Индекс + 1;
			
			НаименованиеОбласти = Реквизит.Ключ + Индекс;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура Заполнить(Команда)
	
	ЗаполнитьАвто();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьАвто()
	
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Декларация" Тогда
		ЗаполнитьНаОснованииИсточника(СтруктураРеквизитовФормы.мИдГруппы1);
	ИначеЕсли СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Возвраты" Тогда
		ЗаполнитьНаОснованииИсточника(СтруктураРеквизитовФормы.мИдГруппы3);
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНаОснованииИсточника(Знач ИдГруппаИсточника)

	Если ИдГруппаИсточника = СтруктураРеквизитовФормы.мИдГруппы1 Тогда
		
		ПаралГруппа = СтруктураРеквизитовФормы.мИдГруппы2;
		
		Колонка1 = "П000000000006";
		Колонка2 = "П000000000007";
		Колонка3 = "П000000000004";
		
		ГруппировкаКол = Колонка1 + ", " + Колонка2 + ", " + Колонка3;
		
		Суммировать = "П000000000016";
		
		КолонкаПар1 = "П000010003004";
		КолонкаПар2 = "П000010003005";
		КолонкаПар3 = "П000010003006";
		КолонкаПар4 = "П000010003007";
		КолонкаПар5 = "П000010003008";
		КолонкаПар6 = "П000010003016";
		
	ИначеЕсли ИдГруппаИсточника = СтруктураРеквизитовФормы.мИдГруппы3 Тогда
		
		ПаралГруппа = СтруктураРеквизитовФормы.мИдГруппы4;
		
		Колонка1 = "П000010000006";
		Колонка2 = "П000010000007";
		Колонка3 = "П000010000004";
		
		ГруппировкаКол = Колонка1 + ", " + Колонка2 + ", " + Колонка3;
		
		Суммировать = "П000010000016";
		
		КолонкаПар1 = "П000010001004";
		КолонкаПар2 = "П000010001005";
		КолонкаПар3 = "П000010001006";
		КолонкаПар4 = "П000010001007";
		КолонкаПар5 = "П000010001008";
		КолонкаПар6 = "П000010001016";

	КонецЕсли;
    			
	// Обновим основную табличную часть.
	ОбновитьСтруктуруМногострочногоРазделаНаСервере(ИдГруппаИсточника);
		
	// Получим таблицу первой многострочной части.
	СтруктураГруппы1 = Неопределено;
	мСтруктураМногострочныхРазделов.Свойство(ИдГруппаИсточника, СтруктураГруппы1);
	
	СтруктураГруппы1 = ДанныеФормыВЗначение(ЭтаФорма[СтруктураГруппы1], Тип("ТаблицаЗначений"));

	// Группируем по ИНН и КПП организации.
	ТаблицаРаздела = СтруктураГруппы1.Скопировать();
	ТаблицаРаздела.Свернуть(ГруппировкаКол, Суммировать);
                      	
	// Удалим строки 2-й группы.
	ТекТаблПоле = ЭтаФорма.ТабличныйДокумент;
	ТекОснПоле = ЭтаФорма.ТабличныйДокумент;
	УдалитьСтроки(ПаралГруппа, ТекТаблПоле);
	
	// Обновим раздел.
	ОбновитьСтруктуруМногострочногоРазделаНаСервере(ПаралГруппа);
	
	// Получим таблицу второй многострочной части.
	СтруктураГруппы2 = Неопределено;
	мСтруктураМногострочныхРазделов.Свойство(ПаралГруппа, СтруктураГруппы2);
	
	СтруктураГруппы2 = ЭтаФорма[СтруктураГруппы2];
	
	Инд = 0;
	Для Каждого Стр Из ТаблицаРаздела Цикл
		
		Если ПустаяСтрока(Стр[Колонка1]) И ПустаяСтрока(Стр[Колонка2]) И ПустаяСтрока(Стр[Колонка3]) Тогда
			Продолжить;
		КонецЕсли;
		
		Инд = Инд + 1;
		ИндС = Формат(Инд, "ЧГ=0");
		
		Если Инд <> 1 Тогда
			ВставитьДополнительнуюСтроку(ПаралГруппа);
		КонецЕсли;
		
		Данные = ПолучитьЗначениеИзОсновнойТаблицы(Стр[Колонка1], Стр[Колонка2], СтруктураГруппы1, Стр[Колонка3], ИдГруппаИсточника);
		
		ТекОснПоле.Области[КолонкаПар1 + "_" + ИндС].Значение = Данные.Наименование;
		ТекОснПоле.Области[КолонкаПар2 + "_" + ИндС].Значение = Данные.Регион;
		ТекОснПоле.Области[КолонкаПар3 + "_" + ИндС].Значение = Стр[Колонка1];
		ТекОснПоле.Области[КолонкаПар4 + "_" + ИндС].Значение = Стр[Колонка2];
		СтруктураГруппы2[Инд - 1][КолонкаПар5] = Данные.Адрес;
		
		Если НЕ ((СтрНайти(Данные.Адрес, "643,") = 1) 
			Или (Данные.Адрес = ",,,,,,,,,")
			Или (Данные.Адрес = "643,,,,,,,,,")
			Или (ПустаяСтрока(Данные.Адрес))) Тогда
			ОперацияНадСтрокойМногострочногоБлока(ЭтаФорма, ПаралГруппа, Истина, ИндС, Истина)
		КонецЕсли;
						
		ТекОснПоле.Области[КолонкаПар5 + "_" + ИндС].Значение = РегламентированнаяОтчетностьКлиентСервер.ПредставлениеАдресаВФормате9Запятых(Данные.Адрес, Истина);
		ТекОснПоле.Области[КолонкаПар6 + "_" + ИндС].Значение = Стр[Суммировать];
		
	КонецЦикла;
	
	ОбновитьСтруктуруМногострочногоРазделаНаСервере(ПаралГруппа);
	
	ОтрисоватьЗначкиУдаленияСтрок();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОперацияНадСтрокойМногострочногоБлока(Форма, ИдГруппы, Защитить, НомерНужнойСтроки, ЗащитаАдреса = Ложь)

	Цвет = Неопределено;
	Форма.мСтруктураЦветовРаскраски.Свойство(?(Защитить, "_5", "_0"), Цвет);

	ТекТабличноеПоле = Форма["ТабличныйДокумент"];

	СтруктураГруппы = Неопределено;
	Форма.мСтруктураМногострочныхРазделов.Свойство(ИдГруппы, СтруктураГруппы);
	
	СтруктураГруппы = Форма[СтруктураГруппы];
	
	Для Инд = 5 По 15 Цикл

		Если ЗащитаАдреса Тогда
			Если (Инд = 8) Или (Инд >= 11) Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;

		Если (ИдГруппы = Форма.СтруктураРеквизитовФормы.мИдГруппы2) Или (ИдГруппы = Форма.СтруктураРеквизитовФормы.мИдГруппы4) Тогда
			Если Инд >= 9 Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;

		Колонка = Строка(Инд);
		Колонка = ?(СтрДлина(Колонка) = 1, "0" + Колонка, Колонка) + "_";
		Если (Инд = 9) Или (Инд = 11) Тогда
			ИдГруппы1 = Сред(ИдГруппы, 1, 9);
			ГраницаЦикла = ?(Инд = 9, 4, 2);
			Для Инд1 = 1 По ГраницаЦикла Цикл
				ИмяЯчейки = ИдГруппы1 + Строка(Инд1 + 10) + Колонка + НомерНужнойСтроки;
				ТекТабличноеПоле.Области[ИмяЯчейки].Защита = Защитить;
				ТекТабличноеПоле.Области[ИмяЯчейки].ЦветФона = Цвет;

				// Очистим значения в строке многострочной части.
				Если Защитить Тогда
					ЗначениеЯчейки = ТекТабличноеПоле.Области[ИмяЯчейки].Значение;
					Если ТипЗнч(ЗначениеЯчейки) = Тип("Число") Тогда
						ТекТабличноеПоле.Области[ИмяЯчейки].Значение = 0;
					ИначеЕсли ТипЗнч(ЗначениеЯчейки) = Тип("Дата") Тогда
						ТекТабличноеПоле.Области[ИмяЯчейки].Значение = РегламентированнаяОтчетностьКлиентСервер.ПустоеЗначениеТипа(Тип("Дата"));
					ИначеЕсли  ТипЗнч(ЗначениеЯчейки) = Тип("Строка") Тогда
						ТекТабличноеПоле.Области[ИмяЯчейки].Значение = "";
					КонецЕсли;
				КонецЕсли;

			КонецЦикла;
		Иначе
			ИмяЯчейки = ИдГруппы + Колонка + НомерНужнойСтроки;
			ТекТабличноеПоле.Области[ИмяЯчейки].Защита = Защитить;
			ТекТабличноеПоле.Области[ИмяЯчейки].ЦветФона = Цвет;
		КонецЕсли;

		// Очистим значения в строке многострочной части.
		Если Защитить Тогда
			ЗначениеЯчейки = ТекТабличноеПоле.Области[ИмяЯчейки].Значение;
			Если ТипЗнч(ЗначениеЯчейки) = Тип("Число") Тогда
				ТекТабличноеПоле.Области[ИмяЯчейки].Значение = 0;
			ИначеЕсли ТипЗнч(ЗначениеЯчейки) = Тип("Дата") Тогда
				ТекТабличноеПоле.Области[ИмяЯчейки].Значение = РегламентированнаяОтчетностьКлиентСервер.ПустоеЗначениеТипа(Тип("Дата"));
			ИначеЕсли  ТипЗнч(ЗначениеЯчейки) = Тип("Строка") Тогда
				ТекТабличноеПоле.Области[ИмяЯчейки].Значение = "";
			КонецЕсли;
		КонецЕсли;

	КонецЦикла;

	Если (Защитить) И (НЕ ЗащитаАдреса) Тогда
		Если ИдГруппы = Форма.СтруктураРеквизитовФормы.мИдГруппы1 Тогда
			КолонкаАдрес = "П000000000008";
		ИначеЕсли ИдГруппы = Форма.СтруктураРеквизитовФормы.мИдГруппы2 Тогда
			КолонкаАдрес = "П000010003008";
		ИначеЕсли ИдГруппы = Форма.СтруктураРеквизитовФормы.мИдГруппы3 Тогда
			КолонкаАдрес = "П000010000008";
		ИначеЕсли ИдГруппы = Форма.СтруктураРеквизитовФормы.мИдГруппы4 Тогда
			КолонкаАдрес = "П000010001008";
		КонецЕсли;
		// Почистим адрес в таблице многострочного блока.
		СтруктураГруппы[Число(НомерНужнойСтроки) - 1][КолонкаАдрес] = "";
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Функция ОпределитьТабличноеПолеПоИдМногострочногоРазделаНаКлиенте(ИдГруппы) Экспорт
	
	ИдГрупп = Новый Структура;
	ИдГрупп.Вставить("мИдГруппы1", СтруктураРеквизитовФормы.мИдГруппы1);
	ИдГрупп.Вставить("мИдГруппы2", СтруктураРеквизитовФормы.мИдГруппы2);
	ИдГрупп.Вставить("мИдГруппы3", СтруктураРеквизитовФормы.мИдГруппы3);
	ИдГрупп.Вставить("мИдГруппы4", СтруктураРеквизитовФормы.мИдГруппы4);
			
	Возврат ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИдГруппы, ИдГрупп);
		
КонецФункции

&НаСервере
Функция ОпределитьТабличноеПолеПоИдМногострочногоРазделаНаСервере(ИдГруппы) Экспорт
	
	ИдГрупп = Новый Структура;
	ИдГрупп.Вставить("мИдГруппы1", СтруктураРеквизитовФормы.мИдГруппы1);
	ИдГрупп.Вставить("мИдГруппы2", СтруктураРеквизитовФормы.мИдГруппы2);
	ИдГрупп.Вставить("мИдГруппы3", СтруктураРеквизитовФормы.мИдГруппы3);
	ИдГрупп.Вставить("мИдГруппы4", СтруктураРеквизитовФормы.мИдГруппы4);
		
	Возврат ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИдГруппы, ИдГрупп);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИдГруппы, ИдГрупп) Экспорт
	
	Перем ТекТабличноеПоле;
		
	Если ИдГруппы = ИдГрупп.мИдГруппы1
	 ИЛИ ИдГруппы = ИдГрупп.мИдГруппы2 Тогда
		
		ТекТабличноеПоле = "Декларация";
		
	ИначеЕсли ИдГруппы = ИдГрупп.мИдГруппы3
		  ИЛИ ИдГруппы = ИдГрупп.мИдГруппы4 Тогда
		
		ТекТабличноеПоле = "Возвраты";
		
	КонецЕсли;
	
	Возврат ТекТабличноеПоле;
	
КонецФункции

&НаСервере
Процедура ОставитьВТаблицеТребуемыйКодПродукции(ТаблицаИсточник, ТаблицаПриемник, Поле, Условие, КолонкаИНН) Экспорт

	// Заполним значения в совпадающих колонках.
	Для каждого СтрокаТаблицыИсточника Из ТаблицаИсточник Цикл

		Если (СтрокаТаблицыИсточника[Поле] = Условие) Тогда
			СтрокаТаблицыПриемника = ТаблицаПриемник.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТаблицыПриемника, СтрокаТаблицыИсточника);
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОчиститьТребуемуюГруппу(Форма, Группа, ВыбТабличноеПоле)

	ИмяГруппыДопСтрок = Группа;
	Если ИмяГруппыДопСтрок <> Неопределено Тогда
		Форма.УдалитьСтроки(ИмяГруппыДопСтрок, ВыбТабличноеПоле);
	КонецЕсли;

	СтруктураГруппы = Неопределено;
	Форма.мСтруктураМногострочныхРазделов.Свойство(ИмяГруппыДопСтрок, СтруктураГруппы);
	
	СтруктураГруппы = Форма[СтруктураГруппы];

	// Непосредственно очищаем ячейки табличного документа.
	Для Инд = 0 По ВыбТабличноеПоле.Области.Количество() - 1 Цикл
		ТекущаяОбласть = ВыбТабличноеПоле.Области[Инд];

		Если Не ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			Продолжить;
		КонецЕсли;

		Если ТекущаяОбласть.СодержитЗначение <> Истина Тогда
			Продолжить;
		КонецЕсли;

		Если (ИмяГруппыДопСтрок = Форма.СтруктураРеквизитовФормы.мИдГруппы1 И СтрНайти(ТекущаяОбласть.Имя, "П000010003008") > 0)
		 Или (ИмяГруппыДопСтрок = Форма.СтруктураРеквизитовФормы.мИдГруппы2 И СтрНайти(ТекущаяОбласть.Имя, "П000000000008") > 0)
		 Или (ИмяГруппыДопСтрок = Форма.СтруктураРеквизитовФормы.мИдГруппы3 И СтрНайти(ТекущаяОбласть.Имя, "П000010000008") > 0)
		 Или (ИмяГруппыДопСтрок = Форма.СтруктураРеквизитовФормы.мИдГруппы4 И СтрНайти(ТекущаяОбласть.Имя, "П000010001008") > 0) Тогда
			Продолжить;
		КонецЕсли;

		Если ТекущаяОбласть.Защита Тогда
			Продолжить;
		КонецЕсли;

		ТекущаяОбласть.Очистить();

	КонецЦикла;

	// Непосредственно очистим адрес в таблице многострочной группы, т.к.
	// в процедуре обновить адрес из табличного поля не будет переходить в таблицу.

	Если ИмяГруппыДопСтрок = Форма.СтруктураРеквизитовФормы.мИдГруппы1 Тогда
		СтруктураГруппы[0].П000000000008 = "";
	ИначеЕсли ИмяГруппыДопСтрок = Форма.СтруктураРеквизитовФормы.мИдГруппы2 Тогда
		СтруктураГруппы[0].П000010003008 = "";
	ИначеЕсли ИмяГруппыДопСтрок = Форма.СтруктураРеквизитовФормы.мИдГруппы3 Тогда
		СтруктураГруппы[0].П000010000008 = "";
	ИначеЕсли ИмяГруппыДопСтрок = Форма.СтруктураРеквизитовФормы.мИдГруппы4 Тогда
		СтруктураГруппы[0].П000010001008 = "";
	КонецЕсли;
    
	Если ИмяГруппыДопСтрок <> Неопределено Тогда

		ОбновитьСтруктуруМногострочногоРаздела(Форма, ИмяГруппыДопСтрок);

		// Пересчитаем автоматически вычисляемые ячейки таблицы.
		Расчет(Форма, Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	КонецЕсли;

	СтруктураГруппы1 = Неопределено;
	Форма.мСтруктураМногострочныхРазделов.Свойство(Группа, СтруктураГруппы1);
	СтруктураГруппы1 = Форма[СтруктураГруппы1];
	
	Для Инд = 1 По СтруктураГруппы1.Количество() Цикл
		ОперацияНадСтрокойМногострочногоБлока(Форма, Группа, Ложь, Формат(Инд, "ЧГ=0"));
	КонецЦикла;

КонецПроцедуры

&НаСервере
Функция ПолучитьЗначениеИзОсновнойТаблицы(Знач ИНН, Знач КПП, СтруктураГруппы1, ИмяОрганизации = Неопределено, ГруппаИсточник = Неопределено)

	Колонка1 = ?(ГруппаИсточник = Неопределено Или ГруппаИсточник = СтруктураРеквизитовФормы.мИдГруппы1, "П000000000006", "П000010000006");
	Колонка2 = ?(ГруппаИсточник = Неопределено Или ГруппаИсточник = СтруктураРеквизитовФормы.мИдГруппы1, "П000000000007", "П000010000007");
	Колонка3 = ?(ГруппаИсточник = Неопределено Или ГруппаИсточник = СтруктураРеквизитовФормы.мИдГруппы1, "П000000000004", "П000010000004");

	Колонка4 = ?(ГруппаИсточник = Неопределено Или ГруппаИсточник = СтруктураРеквизитовФормы.мИдГруппы1, "П000000000008", "П000010000008");
	Колонка5 = ?(ГруппаИсточник = Неопределено Или ГруппаИсточник = СтруктураРеквизитовФормы.мИдГруппы1, "П000000000005", "П000010000005");

	Итог = Новый Структура("Наименование, Регион, Адрес", "", "", "");
	ПоисковаяСтруктура = Новый Структура();
	ПоисковаяСтруктура.Вставить(Колонка1, ИНН);
	ПоисковаяСтруктура.Вставить(Колонка2, КПП);
	Если ИмяОрганизации <> Неопределено Тогда
		ПоисковаяСтруктура.Вставить(Колонка3, ИмяОрганизации);
	КонецЕсли;
	Результат = СтруктураГруппы1.НайтиСтроки(ПоисковаяСтруктура);

	Если Результат <> Неопределено Тогда
		Итог.Вставить("Адрес", Результат[0][Колонка4]);
		Итог.Вставить("Регион", Результат[0][Колонка5]);
		Итог.Вставить("Наименование", Результат[0][Колонка3]);
		Возврат Итог;
	КонецЕсли;
	Возврат Итог;

КонецФункции

&НаСервере
Функция РазделПуст(Разд, ПоказателиОтчета)
	
	//Проверка на пустые разделы 
	ИмяРаздела = Разд.Ключ;
	Призн = Разд.Значение;
	
	СтраницаПустая = 1;
	
	МногострочныеИсключения = Новый СписокЗначений;
	
	Если Призн = "#" Тогда //раздел многостранично-многострочный
		
		ТаблицаСтраницРаздела = Неопределено;
		мСтруктураМногостраничныхРазделов.Свойство(ИмяРаздела, ТаблицаСтраницРаздела);
		
		ТаблицаСтраницРаздела = ЭтаФорма[ТаблицаСтраницРаздела];
		
		НомСтр = 0;
		
		Подразделы = РегламентированнаяОтчетность.РазбитьПоПодразделам(ИмяРаздела, мТаблицаСоставПоказателей, МногострочныеИсключения);
		СтрокиФорматаТекРаздела = мТаблицаСоставПоказателей.НайтиСтроки(Новый Структура("ИмяПоляТаблДокумента",ИмяРаздела));
		
		Для Каждого Стр из ТаблицаСтраницРаздела Цикл
			
			ТекПок = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(РегламентированнаяОтчетность.СкопированнаяСтруктура(Стр.Данные[0].Значение));
			
			НомСтр = НомСтр + 1;
			
			Для Каждого Подраздел Из Подразделы Цикл
				НачПоказатель = Подраздел.Ключ;
				ТипПодраздела = Подраздел.Значение;
				
				//в многострочном разделе возможны только многострочные и обычные подразделы
				Если ТипПодраздела = "/" Тогда//многострочный подраздел
					
					СтрФорматаПодраздела = Новый СписокЗначений;
					ПодразделНайден = Ложь;
					ПервыйПроход = Истина;
					Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
						
						КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
						ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
						ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
						
						Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
							ПодразделНайден = Истина;
						КонецЕсли;
						
						Если НЕ ПодразделНайден Тогда
							Продолжить;
						КонецЕсли;
						
						Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
							Продолжить;
						КонецЕсли;
						
						Если ПервыйПроход Тогда
							ПервыйПроход = Ложь;
						Иначе	
							
							ВЗнач = Неопределено;
							Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
								Прервать;
							КонецЕсли;
								
						КонецЕсли;
						
						СтрФорматаПодраздела.Добавить(СтрРаздела);						
						
					КонецЦикла;
					//определили показатели подраздела. Теперь выведем их для каждой строки
					
					ном = 1;
					ЗначениеПоля = Неопределено;
					
					ВыходИзДвойногоЦикла = Ложь;
					
					Пока Истина Цикл
						
						Для Каждого СтрФормата Из СтрФорматаПодраздела Цикл
							
							ТекОписатель = СтрФормата.Значение;
							КодПоказателя = ТекОписатель.КодПоказателяПоСоставу;
							ИмяЯчейки = ?(Пустаястрока(ТекОписатель.КодПоказателяПоФорме), КодПоказателя, ТекОписатель.КодПоказателяПоФорме); 
							ПризнакФормата = ТекОписатель.ТипДанныхПоказателя;
							
							Если НЕ ТекПок.Свойство(КодПоказателя + "_" + ном, ЗначениеПоля) Тогда	
								
								ВыходИзДвойногоЦикла = Истина;
								Прервать;
								
							КонецЕсли;
							
							СтраницаПустая = Мин(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение("", ТекОписатель, ЗначениеПоля, Ложь, НомСтр, ном, 1), СтраницаПустая);
							
						КонецЦикла;
						
						Если ВыходИзДвойногоЦикла Тогда
							Прервать;
						КонецЕсли;
												
						ном = ном + 1;
						
					КонецЦикла;
					
				ИначеЕсли ТипПодраздела = "" Тогда//обычный подраздел
					
					ПодразделНайден = Ложь;
					ПервыйПроход = Истина;
					Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
						
						КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
						ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
						ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
												
						Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
							ПодразделНайден = Истина;
						КонецЕсли;
						
						Если НЕ ПодразделНайден Тогда
							Продолжить;
						КонецЕсли;
						
						Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
							Продолжить;
						КонецЕсли;
						
						Если ПервыйПроход Тогда
							ПервыйПроход = Ложь;
						Иначе	
							
							ВЗнач = Неопределено;
							Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
								Прервать;
							КонецЕсли;
								
						КонецЕсли;
						
						Если ИмяЯчейки = "ПериодРаздел2" Тогда
							ЗначениеЯчейки = Лев(Строка(ТекПок.ДатаНач), 10) + "," + Лев(Строка(ТекПок.ДатаКон), 10);
						Иначе
							ЗначениеЯчейки = ТекПок[ИмяЯчейки];
						КонецЕсли;
						
						СтраницаПустая = Мин(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение("", СтрРаздела, ЗначениеЯчейки, Ложь, НомСтр, , 1), СтраницаПустая);
						
					КонецЦикла;
					
				КонецЕсли;//многострочный или обычный подраздел
				
			Конеццикла;//по подразделам

		КонецЦикла;//по страницам
		
	ИначеЕсли Призн = "*" Тогда //раздел многостраничный
		
		//выгрузка многостраничного раздела
		
		ТаблицаСтраницРаздела = Неопределено;
		мСтруктураМногостраничныхРазделов.Свойство(ИмяРаздела, ТаблицаСтраницРаздела);
		
		ТаблицаСтраницРаздела = ЭтаФорма[ТаблицаСтраницРаздела];
		
		НомСтр = 0;
		Для Каждого Стр2 из ТаблицаСтраницРаздела Цикл
			
			ТекПок = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(РегламентированнаяОтчетность.СкопированнаяСтруктура(Стр2.Данные[0].Значение));
			
			НомСтр = НомСтр + 1;
			
			СтрокиФорматаТекРаздела = мТаблицаСоставПоказателей.НайтиСтроки(Новый Структура("ИмяПоляТаблДокумента",ИмяРаздела));
			Для Каждого Стр3 Из СтрокиФорматаТекРаздела Цикл
				
				КодПоказателя = Стр3.КодПоказателяПоСоставу;
				ИмяЯчейки = ?(Пустаястрока(Стр3.КодПоказателяПоФорме), КодПоказателя, Стр3.КодПоказателяПоФорме); 
				ПризнакФормата = Стр3.ТипДанныхПоказателя;
				
				Если КодПоказателя="###" Тогда
					Продолжить;
				ИначеЕсли КодПоказателя="===" Тогда
					Прервать;	
				КонецЕсли;
				
				Если Лев(ИмяЯчейки, 2) = "_П" Тогда
					Если ЗначениеЗаполнено(ТекПок[Сред(ИмяЯчейки, 3)]) Тогда
						ЗначениеЯчейки = "1";
					Иначе
						ЗначениеЯчейки = "0";
					КонецЕсли;
				Иначе
					ЗначениеЯчейки = ТекПок[ИмяЯчейки];
				КонецЕсли;
				
				СтраницаПустая = Мин(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение("", Стр3, ЗначениеЯчейки, Ложь, НомСтр, , 1), СтраницаПустая);
				
			КонецЦикла;
			
		КонецЦикла;
		//конец выгрузки многостраничного раздела
		
	ИначеЕсли Призн = "/" Тогда //раздел многострочный
		
		ПокТекТабПоля = Неопределено;
		Если НЕ ПоказателиОтчета.Свойство("ПолеТабличногоДокумента" + ИмяРаздела, ПокТекТабПоля) Тогда
			Возврат Истина;
		КонецЕсли;
		ТекПок = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(РегламентированнаяОтчетность.СкопированнаяСтруктура(ПокТекТабПоля));
		Подразделы = РегламентированнаяОтчетность.РазбитьПоПодразделам(ИмяРаздела, мТаблицаСоставПоказателей, МногострочныеИсключения);
		СтрокиФорматаТекРаздела = мТаблицаСоставПоказателей.НайтиСтроки(Новый Структура("ИмяПоляТаблДокумента",ИмяРаздела));
		
		Для Каждого Подраздел Из Подразделы Цикл
			НачПоказатель = Подраздел.Ключ;
			ТипПодраздела = Подраздел.Значение;
			
			//в многострочном разделе возможны только многострочные и обычные подразделы
			Если ТипПодраздела = "/" Тогда//многострочный подраздел
				
				СтрФорматаПодраздела = Новый СписокЗначений;
				ПодразделНайден = Ложь;
				ПервыйПроход = Истина;
				Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
					
					КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
					ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
					ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
					
					Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
						ПодразделНайден = Истина;
					КонецЕсли;
					
					Если НЕ ПодразделНайден Тогда
						Продолжить;
					КонецЕсли;
					
					Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
						Продолжить;
					КонецЕсли;
					
					Если ПервыйПроход Тогда
						ПервыйПроход = Ложь;
					Иначе	
						
						ВЗнач = Неопределено;
						Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
							Прервать;
						КонецЕсли;
							
					КонецЕсли;
					
					СтрФорматаПодраздела.Добавить(СтрРаздела);						
					
				КонецЦикла;
				//определили показатели подраздела. Теперь выведем их для каждой строки
				
				ном = 1;
				ЗначениеПоля = Неопределено;
				
				ВыходИзДвойногоЦикла_ = Ложь;
				
				Пока Истина Цикл
					
					Для Каждого СтрФормата Из СтрФорматаПодраздела Цикл
						
						ТекОписатель = СтрФормата.Значение;
						КодПоказателя = ТекОписатель.КодПоказателяПоСоставу;
						ИмяЯчейки = ?(Пустаястрока(ТекОписатель.КодПоказателяПоФорме), КодПоказателя, ТекОписатель.КодПоказателяПоФорме); 
						ПризнакФормата = ТекОписатель.ТипДанныхПоказателя;
						
						Если НЕ ТекПок.Свойство(КодПоказателя + "_" + ном, ЗначениеПоля) Тогда	
							
							ВыходИзДвойногоЦикла_ = Истина;
							Прервать;
							
						КонецЕсли;
						
						СтраницаПустая = Мин(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение("", ТекОписатель, ЗначениеПоля, Ложь, , ном, 1), СтраницаПустая);
							
					КонецЦикла;
					
					Если ВыходИзДвойногоЦикла_ Тогда
						Прервать;
					КонецЕсли;
										
					ном = ном + 1;
					
				КонецЦикла;
				
			ИначеЕсли ТипПодраздела = "" Тогда//обычный подраздел
				
				ПодразделНайден = Ложь;
				ПервыйПроход = Истина;
				Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
					
					КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
					ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
					ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
											
					Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
						ПодразделНайден = Истина;
					КонецЕсли;
					
					Если НЕ ПодразделНайден Тогда
						Продолжить;
					КонецЕсли;
					
					Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
						Продолжить;
					КонецЕсли;
					
					Если ПервыйПроход Тогда
						ПервыйПроход = Ложь;
					Иначе	
						
						ВЗнач = Неопределено;
						Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
							Прервать;
						КонецЕсли;
							
					КонецЕсли;
					
					ЗначениеЯчейки = ТекПок[ИмяЯчейки];
					
					СтраницаПустая = Мин(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение("", СтрРаздела, ЗначениеЯчейки, Ложь, , , 1), СтраницаПустая);
					
				КонецЦикла;
				
			КонецЕсли;
			
		Конеццикла;
		
	ИначеЕсли Призн = "" Тогда //просто раздел на одной странице без многострочных частей
		
		ПокТекТабПоля = Неопределено;
		Если НЕ ПоказателиОтчета.Свойство("ПолеТабличногоДокумента" + ИмяРаздела, ПокТекТабПоля) Тогда
			Возврат Истина;
		КонецЕсли;
		ТекПок = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(РегламентированнаяОтчетность.СкопированнаяСтруктура(ПокТекТабПоля));
		
		СтрокиФорматаТекРаздела = мТаблицаСоставПоказателей.НайтиСтроки(Новый Структура("ИмяПоляТаблДокумента",ИмяРаздела));
		Для Каждого Стр3 Из СтрокиФорматаТекРаздела Цикл
			
			КодПоказателя = Стр3.КодПоказателяПоСоставу;
			ИмяЯчейки = ?(Пустаястрока(Стр3.КодПоказателяПоФорме), КодПоказателя, Стр3.КодПоказателяПоФорме); 
			ПризнакФормата = Стр3.ТипДанныхПоказателя;
			
			Если КодПоказателя="###" Тогда
				Продолжить;
			ИначеЕсли КодПоказателя="===" Тогда
				Прервать;	
			КонецЕсли;
			
			ЗначениеЯчейки = ТекПок[ИмяЯчейки];
			
			СтраницаПустая = Мин(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение("", Стр3, ЗначениеЯчейки, Ложь, , , 1), СтраницаПустая);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Булево(СтраницаПустая);
	
КонецФункции

&НаСервере
Процедура СформироватьПечатныеФормыРазделаВозвраты(СтруктураПараметровСтраницы, ОбщиеРеквизитыРазделов, СтрПоля)

	ПолеТабличногоДокументаВремТаблДок = Новый ТабличныйДокумент;

	Если НЕ ПриПечатиГруппироватьПоКодам Тогда
		
		ПолеТабличногоДокументаВремТаблДок.Очистить();
		ПолеТабличногоДокументаВремТаблДок.Вывести(ТабличныйДокумент.ПолучитьОбласть(1, 0, ТабличныйДокумент.Области.ОсновнаяЧасть2.Низ, 0));
		ПолеТабличногоДокументаВремТаблДок.Вывести(ТабличныйДокумент.ПолучитьОбласть(ТабличныйДокумент.Области.ПустаяСтрока.Верх, 0, ТабличныйДокумент.ВысотаТаблицы, 0));
		
		СохрТабличныйДокумент = ТабличныйДокумент.ПолучитьОбласть();
		
		ТабличныйДокумент.Очистить();
		ТабличныйДокумент.Вывести(ПолеТабличногоДокументаВремТаблДок);
		ЗаполнитьЗначенияСвойств(ТабличныйДокумент, ПолеТабличногоДокументаВремТаблДок, СтрПоля);
		
		РегламентированнаяОтчетность.ВывестиНаПечатьЛистОбщая(ЭтаФорма.Заголовок, СтруктураПараметровСтраницы, ТабличныйДокумент, СтруктураРеквизитовФормы.мПечатныеФормы);
		
		ТабличныйДокумент.Очистить();
		ТабличныйДокумент.Вывести(СохрТабличныйДокумент);
		
		ПолеТабличногоДокументаВремТаблДок.Очистить();
		ПолеТабличногоДокументаВремТаблДок.Вывести(ТабличныйДокумент.ПолучитьОбласть("ОсновнаяЧасть1"));
		ПолеТабличногоДокументаВремТаблДок.Вывести(ТабличныйДокумент.ПолучитьОбласть(ТабличныйДокумент.Области.ОсновнаяЧасть3.Верх, 0, ТабличныйДокумент.ВысотаТаблицы, 0));
		ОблМнЧ = ПолеТабличногоДокументаВремТаблДок.Область("МногострочнаяЧасть2");
		НизМнЧ = ОблМнЧ.Низ;
		ОблМнЧ.Имя = "";
		ПолеТабличногоДокументаВремТаблДок.Область(ПолеТабличногоДокументаВремТаблДок.Области.ОсновнаяЧасть3.Верх + 1, 0, НизМнЧ, 0).Имя = "МногострочнаяЧасть";
		
		СохрТабличныйДокумент = ТабличныйДокумент.ПолучитьОбласть();
		
		ТабличныйДокумент.Очистить();
		ТабличныйДокумент.Вывести(ПолеТабличногоДокументаВремТаблДок);
		ЗаполнитьЗначенияСвойств(ТабличныйДокумент, ПолеТабличногоДокументаВремТаблДок, СтрПоля);
		
		РегламентированнаяОтчетность.ВывестиНаПечатьЛистОбщая(ЭтаФорма.Заголовок, СтруктураПараметровСтраницы, ТабличныйДокумент, СтруктураРеквизитовФормы.мПечатныеФормы);
		
		ТабличныйДокумент.Очистить();
		ТабличныйДокумент.Вывести(СохрТабличныйДокумент);
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура СформироватьРазделДляПечати(ИдГруппа, СтруктураПараметровСтраницы, ОбщиеРеквизитыРазделов, СтрПоля)
	
	ПолеТабличногоДокументаВремТаблДок = Новый ТабличныйДокумент;
	
	Если ИдГруппа = СтруктураРеквизитовФормы.мИдГруппы1 Тогда
		ВидПродукции = "П000000000003";
		НаимПродукции = "П000000000002";
		НаимОрг = "П000000000004";
		ВтораяГруппа = СтруктураРеквизитовФормы.мИдГруппы2;
		КолонкаСумма = "П000000000016";
		Группа = "0";
		КолонкаИНН = "П000000000006";
		КолонкаКПП = "П000000000007";
	Иначе
		ВидПродукции = "П000010000003";
		НаимПродукции = "П000010000002";
		НаимОрг = "П000010000004";
		ВтораяГруппа = СтруктураРеквизитовФормы.мИдГруппы4;
		КолонкаСумма = "П000010000016";
		Группа = "1";
		КолонкаИНН = "П000010000006";
		КолонкаКПП = "П000010000007";
	КонецЕсли;
	
	ТаблИмя = "ТабличныйДокумент";

	СтрокаСорт = ВидПродукции + ", " + НаимПродукции + ", " + НаимОрг;

	ОбновитьСтруктуруМногострочногоРазделаНаСервере(ИдГруппа);

	СтруктураГруппы1 = Неопределено;
	мСтруктураМногострочныхРазделов.Свойство(ИдГруппа, СтруктураГруппы1);
	
	СтруктураГруппы1 = ЭтаФорма[СтруктураГруппы1];

	СтруктураГруппы2 = Неопределено;
	мСтруктураМногострочныхРазделов.Свойство(ВтораяГруппа, СтруктураГруппы2);
	
	СтруктураГруппы2 = ЭтаФорма[СтруктураГруппы2];

	КоличествоСтрокВторойМнЧ = СтруктураГруппы2.Количество();

	ВсегоЗаписейВПервойГруппе = СтруктураГруппы1.Количество();
	ТаблицаСорт = ДанныеФормыВЗначение(СтруктураГруппы1, Тип("ТаблицаЗначений")).Скопировать();

	ТаблицаСорт.Сортировать(СтрокаСорт);
	ТаблицаСвер = ТаблицаСорт.Скопировать();
	ТаблицаСвер.Свернуть(ВидПродукции);

	// Объявим таблицу для отборов и группировок по организациям. Отсортируем по названию контрагента.
	ТаблицаДляОрганизации = ДанныеФормыВЗначение(СтруктураГруппы1, Тип("ТаблицаЗначений")).Скопировать();
	ТаблицаДляОрганизации.Сортировать(НаимОрг);
	СтруктураТаблОрг = РегламентированнаяОтчетность.ПолучитьСтруктуруТаблицыРО(ТаблицаДляОрганизации);

	КолвоПустых = 0;
	ТекТабличноеПоле = ПолеТабличногоДокументаВремТаблДок;
	// Организуем цикл по всем кодам продукции.
	Для каждого Код Из ТаблицаСвер Цикл
		Если ПустаяСтрока(Код[ВидПродукции]) Тогда
			КолвоПустых = КолвоПустых + 1;
			Продолжить;
		КонецЕсли;
		ДанныеПоКоду = ТаблицаСорт.НайтиСтроки(Новый Структура(ВидПродукции, Код[ВидПродукции]));
		ВсегоСтрокККоду = ДанныеПоКоду.Количество();
		// Перед заполнением таблицы, очистим ее.
		ТекТабличноеПоле.Очистить();
		// Вставим основную таблицу
		ТекТабличноеПоле.Вывести(ЭтаФорма[ТаблИмя].ПолучитьОбласть(1, 0, ЭтаФорма[ТаблИмя].Области.ОсновнаяЧасть2.Низ, 0));

		ТекТабличноеПоле.Вывести(ЭтаФорма[ТаблИмя].ПолучитьОбласть(ЭтаФорма[ТаблИмя].Области.ОсновнаяЧасть3.Верх, 0, ЭтаФорма[ТаблИмя].ВысотаТаблицы, 0));

		// Удалим ненужные строки, в том случае, если в осн. таблице записей больше, чем требуется для заполнения сгруппированных данных
		Если ВсегоЗаписейВПервойГруппе > ВсегоСтрокККоду Тогда
			НомерВерхЯчейкиОбласти = (ВсегоСтрокККоду * 4) + 9;
			НомерНижнЯчейкиОбласти = НомерВерхЯчейкиОбласти + ((ВсегоЗаписейВПервойГруппе - ВсегоСтрокККоду) * 4) - 1;
			УдаляемаяОбласть = ТекТабличноеПоле.Область(НомерВерхЯчейкиОбласти, , НомерНижнЯчейкиОбласти, );
			ТекТабличноеПоле.УдалитьОбласть( УдаляемаяОбласть,ТипСмещенияТабличногоДокумента.ПоВертикали );
		КонецЕсли;

		Если ВсегоСтрокККоду = 1 Тогда
			// Восстановим область МногострочнойЧасти1, для случаев, когда для одного кода - одна строка многострочной части.
			ТекТабличноеПоле.Области.МногострочнаяЧасть1.Имя = "";
			СледующаяЧасть = ТекТабличноеПоле.Область(9, , 12,);
			СледующаяЧасть.Имя = "МногострочнаяЧасть1";
		КонецЕсли;

		// Организуем цикл по строкам уже выбранного кода.
		Счетчик = 1;
		СуммаКолонка16 = 0;

		Для каждого Строчка Из ДанныеПоКоду Цикл
			СчетСтр = Формат(Счетчик, "ЧГ=0");
			ТекТабличноеПоле.Области["П0000" + Группа + "0000001_" + СчетСтр].Значение = СчетСтр;
			ТекТабличноеПоле.Области["П0000" + Группа + "0000002_" + СчетСтр].Значение = Строчка[?(ИдГруппа = СтруктураРеквизитовФормы.мИдГруппы1, "П000000000002", "П000010000002")];
			ТекТабличноеПоле.Области["П0000" + Группа + "0000003_" + СчетСтр].Значение = Строчка[?(ИдГруппа = СтруктураРеквизитовФормы.мИдГруппы1, "П000000000003", "П000010000003")];
			ТекТабличноеПоле.Области["П0000" + Группа + "0000004_" + СчетСтр].Значение = Строчка[?(ИдГруппа = СтруктураРеквизитовФормы.мИдГруппы1, "П000000000004", "П000010000004")];
			ТекТабличноеПоле.Области["П0000" + Группа + "0000005_" + СчетСтр].Значение = Строчка[?(ИдГруппа = СтруктураРеквизитовФормы.мИдГруппы1, "П000000000005", "П000010000005")];
			ТекТабличноеПоле.Области["П0000" + Группа + "0000006_" + СчетСтр].Значение = Строчка[?(ИдГруппа = СтруктураРеквизитовФормы.мИдГруппы1, "П000000000006", "П000010000006")];
			ТекТабличноеПоле.Области["П0000" + Группа + "0000007_" + СчетСтр].Значение = Строчка[?(ИдГруппа = СтруктураРеквизитовФормы.мИдГруппы1, "П000000000007", "П000010000007")];
			ТекТабличноеПоле.Области["П0000" + Группа + "0000008_" + СчетСтр].Значение = РегламентированнаяОтчетностьКлиентСервер.ПредставлениеАдресаВФормате9Запятых(Строчка[?(ИдГруппа = СтруктураРеквизитовФормы.мИдГруппы1, "П000000000008", "П000010000008")], Истина);

			ТекТабличноеПоле.Области["П0000" + Группа + "0001109_" + СчетСтр].Значение = Строчка[?(ИдГруппа = СтруктураРеквизитовФормы.мИдГруппы1, "П000000001109", "П000010001109")];
			ТекТабличноеПоле.Области["П0000" + Группа + "0001209_" + СчетСтр].Значение = Строчка[?(ИдГруппа = СтруктураРеквизитовФормы.мИдГруппы1, "П000000001209", "П000010001209")];
			ТекТабличноеПоле.Области["П0000" + Группа + "0001309_" + СчетСтр].Значение = Строчка[?(ИдГруппа = СтруктураРеквизитовФормы.мИдГруппы1, "П000000001309", "П000010001309")];
			ТекТабличноеПоле.Области["П0000" + Группа + "0001409_" + СчетСтр].Значение = Строчка[?(ИдГруппа = СтруктураРеквизитовФормы.мИдГруппы1, "П000000001409", "П000010001409")];

			ТекТабличноеПоле.Области["П0000" + Группа + "0000010_" + СчетСтр].Значение = Строчка[?(ИдГруппа = СтруктураРеквизитовФормы.мИдГруппы1, "П000000000010", "П000010000010")];
			ТекТабличноеПоле.Области["П0000" + Группа + "0001111_" + СчетСтр].Значение = Строчка[?(ИдГруппа = СтруктураРеквизитовФормы.мИдГруппы1, "П000000001111", "П000010001111")];
			ТекТабличноеПоле.Области["П0000" + Группа + "0001211_" + СчетСтр].Значение = Строчка[?(ИдГруппа = СтруктураРеквизитовФормы.мИдГруппы1, "П000000001211", "П000010001211")];

			ТекТабличноеПоле.Области["П0000" + Группа + "0000012_" + СчетСтр].Значение = Строчка[?(ИдГруппа = СтруктураРеквизитовФормы.мИдГруппы1, "П000000000012", "П000010000012")];
			ТекТабличноеПоле.Области["П0000" + Группа + "0000013_" + СчетСтр].Значение = Строчка[?(ИдГруппа = СтруктураРеквизитовФормы.мИдГруппы1, "П000000000013", "П000010000013")];
			ТекТабличноеПоле.Области["П0000" + Группа + "0000014_" + СчетСтр].Значение = Строчка[?(ИдГруппа = СтруктураРеквизитовФормы.мИдГруппы1, "П000000000014", "П000010000014")];
			ТекТабличноеПоле.Области["П0000" + Группа + "0000015_" + СчетСтр].Значение = Строчка[?(ИдГруппа = СтруктураРеквизитовФормы.мИдГруппы1, "П000000000015", "П000010000015")];
			ТекТабличноеПоле.Области["П0000" + Группа + "0000016_" + СчетСтр].Значение = Строчка[?(ИдГруппа = СтруктураРеквизитовФормы.мИдГруппы1, "П000000000016", "П000010000016")];
			СуммаКолонка16 = СуммаКолонка16 + Строчка[КолонкаСумма];
			Счетчик = Счетчик + 1;
		КонецЦикла;

		// Выведем итог по коду продукции.
		ТекТабличноеПоле.Области["П00001000" +?(Группа = "0", "2", "5") + "016"].Значение = СуммаКолонка16;
		ТекТабличноеПоле.Области.ИтогВсего.Текст = "Итог:";

		ТаблицаПриемник = СтруктураТаблОрг.Скопировать();
		ОставитьВТаблицеТребуемыйКодПродукции(ТаблицаДляОрганизации, ТаблицаПриемник, ВидПродукции, Код[ВидПродукции], КолонкаИНН);
		ТаблицаПриемник.Свернуть("П0000" + Группа + "0000006, П0000" + Группа + "0000007, П0000" + Группа + "0000004", "П0000" + Группа + "0000016");
		ТаблицаПриемник.Сортировать("П0000" + Группа + "0000004");
		КолВоТабл2 = ТаблицаПриемник.Количество();
		ТребуемоеКолВоСтрокВторойМнгЧ = КолВоТабл2;

		Если ТребуемоеКолВоСтрокВторойМнгЧ > КоличествоСтрокВторойМнЧ Тогда
			// Необходимо добавить нужные строки. Вариант, когда в первой таблице введено много строк, Заполнить не нажимали и вторая таблица
			// не сформирована.

			Для Инд = КоличествоСтрокВторойМнЧ + 1 По ТребуемоеКолВоСтрокВторойМнгЧ Цикл

				КолСтрок = Инд - 1;
				ИмяПервойЯчейкиПоследнейСтроки = "П00001000" + ?(Группа = "0", "3", "1") + "001" + "_" + Формат(Инд - 1, "ЧГ=0");

				// область первой ячейки последней строки многострочного раздела
				ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяПервойЯчейкиПоследнейСтроки];

				// номера строк исходной области
				НомерВерхЯчейкиОбласти = ОбластьЯчейки.Верх;
				НомерНижнЯчейкиОбласти = ОбластьЯчейки.Низ;

				СдвигСтрок = НомерНижнЯчейкиОбласти - НомерВерхЯчейкиОбласти + 1;

				// номера строк вставляемой области
				НомерВерхЯчейкиНовойОбласти = НомерВерхЯчейкиОбласти + СдвигСтрок;
				НомерНижнЯчейкиНовойОбласти = НомерНижнЯчейкиОбласти + СдвигСтрок;

				Ч2Верх  = ТекТабличноеПоле.Области.МногострочнаяЧасть2.Верх;
				Ч2Низ   = ТекТабличноеПоле.Области.МногострочнаяЧасть2.Низ;

				// определяем вставляемую область
				ВставляемаяОбласть = ТекТабличноеПоле.Область(НомерВерхЯчейкиОбласти, , НомерНижнЯчейкиОбласти);

				// добавляем в таблицу новую строку
				ТекТабличноеПоле.ВставитьОбласть( ВставляемаяОбласть,,ТипСмещенияТабличногоДокумента.ПоВертикали );

				// Восстановим многострочную часть.
				Если ТекТабличноеПоле.Области.Найти("МногострочнаяЧасть2") <> Неопределено Тогда
					ТекТабличноеПоле.Области.МногострочнаяЧасть2.Имя = "";
				КонецЕсли;
				СледующаяЧасть = ТекТабличноеПоле.Область(Ч2Верх, , Ч2Низ,);
				СледующаяЧасть.Имя = "МногострочнаяЧасть2";

				СтруктураГруппы2Колонки = ДанныеФормыВЗначение(СтруктураГруппы2, Тип("ТаблицаЗначений")).Колонки;
				
				Для Каждого Колонка Из СтруктураГруппы2Колонки Цикл

					ИмяКолонки          = Колонка.Имя;
					ИмяОбластиЯчейки    = ИмяКолонки + "_" + Формат(КолСтрок, "ЧГ=0");
					ИмяНовОбластиЯчейки = ИмяКолонки + "_" + Формат((КолСтрок + 1), "ЧГ=0");

					ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяОбластиЯчейки];
					ОбластьЯчейки.Имя = ИмяНовОбластиЯчейки;

					// определяем границы ячейки исходной области
					НомерВерхСтрокиЯчейки  = ОбластьЯчейки.Верх - СдвигСтрок;
					НомерНижнСтрокиЯчейки  = ОбластьЯчейки.Низ  - СдвигСтрок;
					НомерЛевоКолонкиЯчейки = ОбластьЯчейки.Лево;
					НомерПравКолонкиЯчейки = ОбластьЯчейки.Право;

					// Назначаем имя ячейки исходной области,
					// (т.к. в результате вставки новой области оно было очищено)
					ОбластьЯчейкиИсходнойОбласти = ТекТабличноеПоле.Область(НомерВерхСтрокиЯчейки, НомерЛевоКолонкиЯчейки, НомерНижнСтрокиЯчейки, НомерПравКолонкиЯчейки);
					ОбластьЯчейкиИсходнойОбласти.Имя = ИмяОбластиЯчейки;

				КонецЦикла;
			КонецЦикла;

		ИначеЕсли ТребуемоеКолВоСтрокВторойМнгЧ < КоличествоСтрокВторойМнЧ И ТребуемоеКолВоСтрокВторойМнгЧ <> 0 Тогда
			// Требуется 5 строчек, а в наличии 7, удалим лишние строки.
			УдаляемаяОбласть = ТекТабличноеПоле.Область(ТекТабличноеПоле.Области.ОсновнаяЧасть3.Низ + КолВоТабл2 + 1, , ТекТабличноеПоле.Области.ПустаяСтрока.Верх - 1, );
			ТекТабличноеПоле.УдалитьОбласть( УдаляемаяОбласть,ТипСмещенияТабличногоДокумента.ПоВертикали );
		КонецЕсли;

		// Выведем данные
		Счетчик = 1;
		Для каждого Контрагент Из ТаблицаПриемник Цикл

			ИндС = Формат(Счетчик, "ЧГ=0");
			ТекТабличноеПоле.Области["П00001000" + ?(Группа = "0", "3", "1") + "001_" + ИндС].Значение = ИндС;
    
			Данные = ПолучитьЗначениеИзОсновнойТаблицы(Контрагент[КолонкаИНН], Контрагент[КолонкаКПП], СтруктураГруппы1, Контрагент[НаимОрг], ИдГруппа);

			ТекТабличноеПоле.Области["П00001000" + ?(Группа = "0", "3", "1") + "004_" + ИндС].Значение = Данные.Наименование;
			ТекТабличноеПоле.Области["П00001000" + ?(Группа = "0", "3", "1") + "005_" + ИндС].Значение = Данные.Регион;
			ТекТабличноеПоле.Области["П00001000" + ?(Группа = "0", "3", "1") + "006_" + ИндС].Значение = Контрагент["П0000" + Группа + "0000006"];
			ТекТабличноеПоле.Области["П00001000" + ?(Группа = "0", "3", "1") + "007_" + ИндС].Значение = Контрагент["П0000" + Группа + "0000007"];
			ТекТабличноеПоле.Области["П00001000" + ?(Группа = "0", "3", "1") + "008_" + ИндС].Значение = РегламентированнаяОтчетностьКлиентСервер.ПредставлениеАдресаВФормате9Запятых(Данные.Адрес, Истина);
			ТекТабличноеПоле.Области["П00001000" + ?(Группа = "0", "3", "1") + "016_" + ИндС].Значение = Контрагент["П0000" + Группа + "0000016"];
			Счетчик = Счетчик + 1;

		КонецЦикла;

		// Поменяем имена в первой многострочной части.
		ТекТабличноеПоле.Области.ОпределениеВысотыСтрокиМногострочнойЧасти.Имя = "ОпределениеВысотыСтрокиМногострочнойЧасти1";
		// И объявим имя во второй многострочной части.
		ТекТабличноеПоле.Область(ТекТабличноеПоле.Области.МногострочнаяЧасть2.Верх, 18, ТекТабличноеПоле.Области.МногострочнаяЧасть2.Верх, 18).Имя = "ОпределениеВысотыСтрокиМногострочнойЧасти2";
                                                  		
		СохрТабличныйДокумент = ТабличныйДокумент.ПолучитьОбласть();
			
		ТабличныйДокумент.Очистить();
		ТабличныйДокумент.Вывести(ТекТабличноеПоле);
		ЗаполнитьЗначенияСвойств(ТабличныйДокумент, ТекТабличноеПоле, СтрПоля);
			
		РегламентированнаяОтчетность.ВывестиНаПечатьЛистОбщая(ЭтаФорма.Заголовок, СтруктураПараметровСтраницы, ТабличныйДокумент, СтруктураРеквизитовФормы.мПечатныеФормы);
			
		ТабличныйДокумент.Очистить();
		ТабличныйДокумент.Вывести(СохрТабличныйДокумент);
		
	КонецЦикла;

	Если КолвоПустых = ТаблицаСвер.Количество() Тогда
		
		ТекстВывод = ?(Группа = "0", """Декларация""", """Возвраты""");
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Нет сведений для печати листа %1 в особом режиме.'"), ТекстВывод);
		Сообщение.Сообщить();
		
		Возврат;
		
	КонецЕсли;

	// Выведем итоговый лист.
	ПолеТабличногоДокументаВремТаблДок.Очистить();
	ПолеТабличногоДокументаВремТаблДок.Вывести(ЭтаФорма[ТаблИмя].ПолучитьОбласть("ОсновнаяЧасть1"));
	ПолеТабличногоДокументаВремТаблДок.Вывести(ЭтаФорма[ТаблИмя].ПолучитьОбласть(ЭтаФорма[ТаблИмя].Области.ОсновнаяЧасть3.Верх, 0, ЭтаФорма[ТаблИмя].Области.ПустаяСтрока.Верх, 0));
	ТекТабличноеПоле.Области.ОсновнаяЧасть3.Имя = "ОсновнаяЧасть21";
	// Нужно основную часть2 вставить
	ПолеТабличногоДокументаВремТаблДок.Вывести(ЭтаФорма[ТаблИмя].ПолучитьОбласть(ЭтаФорма[ТаблИмя].Области.ОсновнаяЧасть2.Верх, 0, ЭтаФорма[ТаблИмя].Области.ОсновнаяЧасть2.Низ, 0));

	ОблМнЧ = ПолеТабличногоДокументаВремТаблДок.Область("МногострочнаяЧасть2");
	НизМнЧ = ОблМнЧ.Низ;
	ОблМнЧ.Имя = "";
	ПолеТабличногоДокументаВремТаблДок.Область(ПолеТабличногоДокументаВремТаблДок.Области.ОсновнаяЧасть21.Верх + 1, 0, НизМнЧ, 0).Имя = "МногострочнаяЧасть";
	ТекТабличноеПоле.Области.ОсновнаяЧасть2.Имя = "ОсновнаяЧасть3";
	ТекТабличноеПоле.Области.ОсновнаяЧасть21.Имя = "ОсновнаяЧасть2";

	ПолеТабличногоДокументаВремТаблДок.Вывести(ЭтаФорма[ТаблИмя].ПолучитьОбласть(ЭтаФорма[ТаблИмя].Области.Ограничители.Верх, 0, ЭтаФорма[ТаблИмя].Области.Ограничители.Низ, 0));
	Если Группа = "0" Тогда
		Итог16Знач = ТабличныйДокумент.Области.П000010002016.Значение;
		ТекТабличноеПоле.Области.П000010002016.Значение = Итог16Знач;
	Иначе
		Итог16Знач = ТабличныйДокумент.Области.П000010005016.Значение;
		ТекТабличноеПоле.Области.П000010005016.Значение = Итог16Знач;
	КонецЕсли;
    	
	СохрТабличныйДокумент = ТабличныйДокумент.ПолучитьОбласть();
			
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(ТекТабличноеПоле);
	ЗаполнитьЗначенияСвойств(ТабличныйДокумент, ТекТабличноеПоле, СтрПоля);
			
	РегламентированнаяОтчетность.ВывестиНаПечатьЛистОбщая(ЭтаФорма.Заголовок, СтруктураПараметровСтраницы, ТабличныйДокумент, СтруктураРеквизитовФормы.мПечатныеФормы);
			
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(СохрТабличныйДокумент);
	
КонецПроцедуры

&НаСервере
Процедура УдалитьСтроки(Знач Группа, ВыбТабличноеПоле) Экспорт

	// Получим таблицу значений, содержащую данные дополнительных строк.
	ПромТаблицаДопСтрокРаздела = Неопределено;
	мСтруктураМногострочныхРазделов.Свойство(Группа, ПромТаблицаДопСтрокРаздела);
	ПромТаблицаДопСтрокРаздела = ЭтаФорма[ПромТаблицаДопСтрокРаздела];

	ИсходноеКоличествоСтрокГруппы = 0;
	мСтруктураИсхКолвоСтрокРазделов.Свойство(Группа, ИсходноеКоличествоСтрокГруппы);

	ТекущееКоличествоСтрок = ПромТаблицаДопСтрокРаздела.Количество();

	Если ТекущееКоличествоСтрок > ИсходноеКоличествоСтрокГруппы Тогда
		Если Группа = СтруктураРеквизитовФормы.мИдГруппы1 Или Группа = СтруктураРеквизитовФормы.мИдГруппы3 Тогда
			МнгЧастьОбласть = ВыбТабличноеПоле.Области.Найти("МногострочнаяЧасть1");
			Низ = ВыбТабличноеПоле.Области.Найти("МногострочнаяЧасть1").Низ + 1;
			УдаляемаяОбласть = ВыбТабличноеПоле.Область(Низ, , Низ + ((ТекущееКоличествоСтрок - ИсходноеКоличествоСтрокГруппы) * 4) - 1);
		Иначе
			МнгЧастьОбласть = ВыбТабличноеПоле.Области.Найти("МногострочнаяЧасть2");
			УдаляемаяОбласть = ВыбТабличноеПоле.Область(МнгЧастьОбласть.Низ + 1, , МнгЧастьОбласть.Низ + ТекущееКоличествоСтрок - 1);
		Конецесли;

		ВыбТабличноеПоле.УдалитьОбласть( УдаляемаяОбласть,ТипСмещенияТабличногоДокумента.ПоВертикали );
		ПромТаблицаДопСтрокРаздела.Очистить();
		Для Инд = 1 По ИсходноеКоличествоСтрокГруппы Цикл
			ПромТаблицаДопСтрокРаздела.Добавить();
		КонецЦикла;

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура  ЗаписатьИЗакрыть(Команда)
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Форма", ЭтаФорма);
	Оповещение = Новый ОписаниеОповещения("ПослеСохраненияФормыЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	СохранитьНаКлиенте(, Оповещение);
КонецПроцедуры

&НаКлиенте
Процедура ПослеСохраненияФормыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	ДополнительныеПараметры.Форма.Закрыть();
КонецПроцедуры

&НаКлиенте
Процедура ТабличныйДокументПриАктивизацииОбласти(Элемент)
	
	Если СтрЧислоВхождений(Элемент.ТекущаяОбласть.Имя, "П0000000000") > 0
	 ИЛИ СтрЧислоВхождений(Элемент.ТекущаяОбласть.Имя, "П0000100000") > 0
	 ИЛИ СтрЧислоВхождений(Элемент.ТекущаяОбласть.Имя, "П0000100010") > 0
	 ИЛИ СтрЧислоВхождений(Элемент.ТекущаяОбласть.Имя, "П0000100030") > 0 Тогда
		
		Элементы.ТабличныйДокументКонтекстноеМенюДобавитьСтроку.Доступность = Истина;
		
		ПозицияЗнакаПодчеркивания = СтрНайти(Элемент.ТекущаяОбласть.Имя, "_");
		
		Если НЕ ПозицияЗнакаПодчеркивания = Неопределено Тогда
			
			КодОбласти = Лев(Элемент.ТекущаяОбласть.Имя, ПозицияЗнакаПодчеркивания);
			
			Если НЕ ТабличныйДокумент.Области.Найти(КодОбласти + "2") = Неопределено Тогда
				Элементы.ТабличныйДокументКонтекстноеМенюУдалитьСтроку.Доступность = Истина;
			Иначе
				Элементы.ТабличныйДокументКонтекстноеМенюУдалитьСтроку.Доступность = Ложь;
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		Элементы.ТабличныйДокументКонтекстноеМенюДобавитьСтроку.Доступность = Ложь;
		Элементы.ТабличныйДокументКонтекстноеМенюУдалитьСтроку.Доступность  = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОткрытьПрисоединенныеФайлы(Команда)
	
	РегламентированнаяОтчетностьКлиент.СохранитьОтчетИОткрытьФормуПрисоединенныеФайлы(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийПриИзменении(Элемент)
	
	Модифицированность = Истина;
	
КонецПроцедуры