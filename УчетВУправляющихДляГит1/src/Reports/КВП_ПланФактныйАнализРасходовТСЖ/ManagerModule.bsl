#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Функция возвращает параметры исполнения отчета.
Функция ПолучитьПараметрыИсполненияОтчета() Экспорт
	
	Возврат Новый Структура("ИспользоватьПередКомпоновкойМакета,
							|ИспользоватьПослеКомпоновкиМакета,
							|ИспользоватьПослеВыводаРезультата,
							|ИспользоватьДанныеРасшифровки,
							|ИспользоватьВнешниеНаборыДанных,
							|ИспользоватьРасширенныеПараметрыРасшифровки",
							Истина, Истина, Истина, Истина, Истина, Ложь);
	
КонецФункции

// Функция возвращает текст заголовка.
//
// Параметры:
//  ПараметрыОтчета		 - Структура - Структура параметров отчета.
//  ОрганизацияВНачале	 - Булево - Признак организации в начале заголовка.
//
Функция ПолучитьТекстЗаголовка(ПараметрыОтчета, ОрганизацияВНачале = Истина) Экспорт 
	
	Возврат "План-фактный анализ по затратам ТСЖ за период с " + Формат(ПараметрыОтчета.НачалоПериода, "ДФ=dd.MM.yyyy") + " по "  + Формат(ПараметрыОтчета.КонецПериода, "ДФ=dd.MM.yyyy");
	
КонецФункции

// Функция определяет внешние наборы данных для СКД.
//
// Параметры:
//  ПараметрыОтчета	 - Структура - Структура параметров отчета.
//  МакетКомпоновки	 - Макет - Макет компоновки данных отчета.
//
Функция ПолучитьВнешниеНаборыДанных(ПараметрыОтчета, МакетКомпоновки) Экспорт
	
	// заглушка
	
	Возврат Новый Структура();
	
КонецФункции

// В процедуре можно доработать компоновщик перед выводом в отчет.
// Изменения сохранены не будут.
//
// Параметры:
//  ПараметрыОтчета		 - Структура - Структура параметров отчета.
//  Схема				 - СхемаКомпоновкиДанных - Схема компоновки данных отчета.
//  КомпоновщикНастроек	 - КомпоновщикНастроекКомпоновкиДанных - Компоновщик настроек компоновки данных отчета.
//
Процедура ПередКомпоновкойМакета(ПараметрыОтчета, Схема, КомпоновщикНастроек) Экспорт
	
	Если ЗначениеЗаполнено(ПараметрыОтчета.Организация) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "Организация", ПараметрыОтчета.Организация);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыОтчета.Счет) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "Счет", ПараметрыОтчета.Счет);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыОтчета.НачалоПериода) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "НачалоПериода", ПараметрыОтчета.НачалоПериода);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыОтчета.КонецПериода) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "КонецПериода", ПараметрыОтчета.КонецПериода);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыОтчета.Периодичность) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "Периодичность", ПараметрыОтчета.Периодичность);
	КонецЕсли;
	
	КомпоновщикНастроек.Настройки.Структура.Очистить();
	
	ТаблицаСтруктуры = КомпоновщикНастроек.Настройки.Структура.Добавить(Тип("ТаблицаКомпоновкиДанных"));
	
	ГруппировкаСКД = ТаблицаСтруктуры;
	ГруппировкаСКД = ДобавитьГруппировку(ГруппировкаСКД, "СтатьяЗатрат");
	ГруппировкаСКД = ДобавитьГруппировку(ГруппировкаСКД, "Источник");
	
	Если ПараметрыОтчета.ВыводитьРегистратор Тогда
		ГруппировкаСКД = ДобавитьГруппировку(ГруппировкаСКД, "Регистратор");
	КонецЕсли;
	
	ГруппКолонок = ДобавитьГруппировку(ТаблицаСтруктуры, "Период", Ложь);
	ГруппКолонок.Имя = "Интервал";
	
	УПЖКХ_ТиповыеМетодыВызовСервера.ДобавитьДополнительныеПоля(ПараметрыОтчета, КомпоновщикНастроек);
	
КонецПроцедуры

// Возникает после компоновки макета.
//
// Параметры:
//  ПараметрыОтчета	 - Структура - Структура параметров отчета.
//  МакетКомпоновки	 - Макет - Макет компоновки данных отчета.
//
Процедура ПослеКомпоновкиМакета(ПараметрыОтчета, МакетКомпоновки) Экспорт
	// заглушка
КонецПроцедуры

// Возникает после вывода результата.
//
// Параметры:
//  ПараметрыОтчета	 - Структура - Структура параметров отчета.
//  Результат		 - ТабличныйДокумент - Табличный документ для вывода в отчете.
//
Процедура ПослеВыводаРезультата(ПараметрыОтчета, Результат) Экспорт
	
	УПЖКХ_ТиповыеМетодыВызовСервера.ОбработкаРезультатаОтчета(ПараметрыОтчета.ИдентификаторОтчета, Результат);
	
КонецПроцедуры

// Вызывает настройку вариантов отчета.
//
// Параметры:
//  Настройки	   - Структура - Структура настроек отчета.
//  ОписаниеОтчета - Строка - Строка описания отчета.
//
Процедура НастроитьВариантыОтчета(Настройки, ОписаниеОтчета) Экспорт
	// заглушка
КонецПроцедуры

// Процедура используется подсистемой варианты отчетов
//
// Параметры:
//  Настройки - Структура - Структура настроек отчета.
//
Процедура НастройкиОтчета(Настройки) Экспорт
	
	Схема = ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");
	Для Каждого Вариант из Схема.ВариантыНастроек Цикл
		Настройки.ОписаниеВариантов.Вставить(Вариант.Имя,Вариант.Представление);
	КонецЦикла;
	
КонецПроцедуры

// Заполняет параметры расшифровки отчета.
//
// Параметры:
//  Адрес	   			 - Строка - Строка адреса отчета во временном хранилище.
//  Расшифровка 		 - Строка - Строка расшифровки.
//  ПараметрыРасшифровки - Структура - Структура параметров расшифровки отчета.
//
Процедура ЗаполнитьПараметрыРасшифровкиОтчета(Адрес, Расшифровка, ПараметрыРасшифровки) Экспорт
	// заглушка
КонецПроцедуры

#КонецОбласти

#Область ОбщиеПроцедурыИФункции

// Процедура добавляет поля для возможности их отображения.
//
// Параметры:
//  ПараметрыОтчета		 - Структура - Структура параметров отчета.
//  Схема				 - СхемаКомпоновкиДанных - Схема компоновки данных отчета.
//
Процедура ДобавитьПоляВНаборКомпоновки(ПараметрыОтчета, Схема) Экспорт

	// заглушка
	
КонецПроцедуры // ДобавитьПоляВНаборКомпоновки()

Функция ПолучитьНаборПоказателей() Экспорт
	
	// заглушка
	НаборПоказателей = Новый Массив;
	
	Возврат НаборПоказателей;
	
КонецФункции

// Добавляет группировку в компоновщик настроек в самый нижний уровень структуры, если поле не укзано - детальные поля.
//
Функция ДобавитьГруппировку(КомпоновщикНастроек, Знач Поле = Неопределено, Строки = Истина)
	
	ЭлементСтруктуры = Неопределено;
	
	Если ТипЗнч(КомпоновщикНастроек) = Тип("КомпоновщикНастроекКомпоновкиДанных") тогда
		Возврат Неопределено;
	ИначеЕсли ТипЗнч(КомпоновщикНастроек) = Тип("ГруппировкаТаблицыКомпоновкиДанных") 
		ИЛИ ТипЗнч(КомпоновщикНастроек) = Тип("ГруппировкаДиаграммыКомпоновкиДанных") 
		ИЛИ ТипЗнч(КомпоновщикНастроек) = Тип("ГруппировкаКомпоновкиДанных") 
		ИЛИ ТипЗнч(КомпоновщикНастроек) = Тип("ТаблицаКомпоновкиДанных") 
		ИЛИ ТипЗнч(КомпоновщикНастроек) = Тип("ДиаграммаКомпоновкиДанных") 
		ИЛИ ТипЗнч(КомпоновщикНастроек) = Тип("КоллекцияЭлементовСтруктурыТаблицыКомпоновкиДанных") 
		ИЛИ ТипЗнч(КомпоновщикНастроек) = Тип("КоллекцияЭлементовСтруктурыДиаграммыКомпоновкиДанных") 
		тогда
		Если ТипЗнч(КомпоновщикНастроек) = Тип("ТаблицаКомпоновкиДанных") тогда 
			Если Строки тогда 
				ЭлементСтруктуры = КомпоновщикНастроек.Строки; 
			Иначе
				ЭлементСтруктуры = КомпоновщикНастроек.Колонки; 
			КонецЕсли;
		ИначеЕсли ТипЗнч(КомпоновщикНастроек) = Тип("ДиаграммаКомпоновкиДанных") тогда
			Если Строки тогда 
				ЭлементСтруктуры = КомпоновщикНастроек.Серии; 
			Иначе
				ЭлементСтруктуры = КомпоновщикНастроек.Точки; 
			КонецЕсли;
		Иначе
			ЭлементСтруктуры = КомпоновщикНастроек; 
		КонецЕсли; 
	КонецЕсли;
	
	Если ТипЗнч(Поле) = Тип("Строка") Тогда
		Поле = Новый ПолеКомпоновкиДанных(Поле);
	КонецЕсли;
	
	Если ТипЗнч(ЭлементСтруктуры) = Тип("ГруппировкаТаблицыКомпоновкиДанных") 
		ИЛИ ТипЗнч(ЭлементСтруктуры) = Тип("ГруппировкаДиаграммыКомпоновкиДанных") Тогда
		НоваяГруппировка = ЭлементСтруктуры.Структура.Добавить();
	ИначеЕсли ТипЗнч(ЭлементСтруктуры) = Тип("КоллекцияЭлементовСтруктурыТаблицыКомпоновкиДанных")
		ИЛИ ТипЗнч(ЭлементСтруктуры) = Тип("КоллекцияЭлементовСтруктурыДиаграммыКомпоновкиДанных") Тогда
		НоваяГруппировка = ЭлементСтруктуры.Добавить();
	Иначе
		НоваяГруппировка = ЭлементСтруктуры.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
	КонецЕсли;
	
	НоваяГруппировка.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
	НоваяГруппировка.Порядок.Элементы.Добавить(Тип("АвтоЭлементПорядкаКомпоновкиДанных"));
	Если Поле <> Неопределено Тогда
		ПолеГруппировки = НоваяГруппировка.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
		ПолеГруппировки.Поле = Поле;
	КонецЕсли;
	Возврат НоваяГруппировка;
	
КонецФункции

#КонецОбласти

#КонецЕсли