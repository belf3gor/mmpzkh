&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;

	// Обход ошибки платформы Параметр сеанса отсутствует или удален
	ПолеТабличногоДокументаФормаОтчета.Очистить();
	
	СформироватьСтруктуруРеквизитовФормы();
	
	СтруктураРеквизитовФормы.СписокПечатаемыхЛистов = Новый СписокЗначений;
	
	// ОПИСАНИЕ ПАРМЕТРОВ ФОРМЫ
	//
	// Версия формы.
	СтруктураРеквизитовФормы.мВерсияФормы = "17/10/2013";
	// Код отчета, равен коду по ОКУД.
	СтруктураРеквизитовФормы.мКодОтчета = "0610068";
	
	СтруктураРеквизитовФормы.мПечатныеФормы = Новый СписокЗначений;
	
	ПолеТабличногоДокументаФормаОтчета.Вывести(Отчеты[Сред(Лев(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, ".Форма.") - 1), 7)].ПолучитьМакет("ФормаОтчета2013Кв1_ФормаОтчета"));

	СтруктураРеквизитовФормы.мВыбраннаяФорма          = Параметры.мВыбраннаяФорма;
	СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета  = Параметры.мДатаКонцаПериодаОтчета;
	СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета = Параметры.мДатаНачалаПериодаОтчета;
	СтруктураРеквизитовФормы.мПериодичность           = Параметры.мПериодичность;
	СтруктураРеквизитовФормы.мСкопированаФорма        = Параметры.мСкопированаФорма;
	СтруктураРеквизитовФормы.мСохраненныйДок          = Параметры.мСохраненныйДок;
	СтруктураРеквизитовФормы.Организация              = Параметры.Организация;
	
	ДатаПодписи = ТекущаяДатаСеанса();
	
	СтруктураРеквизитовФормы.СправочникиВидыКонтактнойИнформацииПочтовыйАдресОрганизации = Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресОрганизации;
	
	Инициализация(Параметры.БезОткрытияФормы);
	
КонецПроцедуры

&НаСервере
Процедура СформироватьСтруктуруРеквизитовФормы()
	
	СтруктураРеквизитовФормы = РегламентированнаяОтчетность.СформироватьСтруктуруОбязательныхРеквизитовСтатистическогоОтчета();
	
КонецПроцедуры

&НаСервере
Процедура Инициализация(БезОткрытияФормы = Ложь) Экспорт
	
	СформироватьСпискиВыбора();
	
	СтруктураРеквизитовФормы.мБезОткрытияФормы = БезОткрытияФормы;
	
	СтруктураРеквизитовФормы.мАвтоВыборКодов = Ложь;
	
	СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация = Ложь;

	ТекТабличноеПоле = ПолеТабличногоДокументаФормаОтчета;

	СтруктураРеквизитовФормы.ВидДокумента = 0;
	НомерКорректировки = 1;
	СтруктураРеквизитовФормы.мАдресвФорматеДляВыгрузки = "";
	
	Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
		
		Если СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено Тогда
			// Документ скопирован.
			ВосстановитьСохраненныеДанные();
		КонецЕсли;
		
		Модифицированность = Истина;

	Иначе

		// При открытии или при копировании сохраненного
		// отчета восстанавливаем сохраненные данные.
		ВосстановитьСохраненныеДанные();
		
		Если ЗначениеЗаполнено(СтруктураРеквизитовФормы.мСкопированаФорма) Тогда
			СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено;
		КонецЕсли;
		
		Если НЕ БезОткрытияФормы
           И НЕ СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
				   
        	ЗаблокироватьДанныеДляРедактирования(СтруктураРеквизитовФормы.мСохраненныйДок, , ЭтаФорма.УникальныйИдентификатор);

        КонецЕсли;

	КонецЕсли;
	
	УстановитьЗащитуИЦветФонаОбластейАвторассчитываемыхПоказателей();
	
	Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
		НомерКорректировки = 0;
	Иначе
		НомерКорректировки = СтруктураРеквизитовФормы.мСохраненныйДок.Вид;
	КонецЕсли;
	
	ПолеТабличногоДокументаФормаОтчета.Области.НомерКорректировки.Значение = НомерКорректировки;
	ПолеТабличногоДокументаФормаОтчета.Области.ДатаСоставленияОтчета.Значение = ДатаПодписи;
	
	ПоказатьПериод();

	Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Или СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация Тогда
		ЗаполнитьСведенияОбОрганизацииНаСервере();
	КонецЕсли;
	
	СтруктураРеквизитовФормы.НаимОрганизации = СтруктураРеквизитовФормы.Организация.Наименование;
	
	ТекущийЭлемент = Элементы["ПолеТабличногоДокументаФормаОтчета"];
	
	РегламентированнаяОтчетность.ДобавитьКнопкуПрисоединенныеФайлы(ЭтаФорма);
	
	РегламентированнаяОтчетностьКлиентСервер.ПриИнициализацииФормыРегламентированногоОтчета(ЭтаФорма, "ФСГС");
	
КонецПроцедуры

// Процедура управляет показом в форме периода построения отчета.
//
&НаСервере
Процедура ПоказатьПериод()
	
	// Период в шапке и заголовке отчета.
	ПолеТабличногоДокументаФормаОтчета.Области.ПериодОтчета.Значение = "за "
		+ НРег(Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ = 'гггг'")) + " год";
	СтруктураРеквизитовФормы.СтрПериодОтчета = НРег(Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ = 'гггг'")) + " год";
	
КонецПроцедуры

// Восстанавливает сохраненные данные отчета.
//
&НаСервере
Процедура ВосстановитьСохраненныеДанные()
	Перем ДанныеМногострочныхРазделов;
	Перем ДанныеВариановАвтоЗаполнения;
	Перем ПоказателиОтчета;
	Перем ВерсияФормы;
	Перем Авторасчет;

	// В случае, если формы была скопирована по F9, то проверим, не изменилась ли организация.
	Если СтруктураРеквизитовФормы.Организация <> СтруктураРеквизитовФормы.мСохраненныйДок.Организация
	   И СтруктураРеквизитовФормы.Организация <> РегламентированнаяОтчетностьКлиентСервер.ПустоеЗначениеТипа("СправочникСсылка.Организации")
	   И СтруктураРеквизитовФормы.Организация <> Неопределено Тогда
		// Меняем переменную, для того, чтобы запустилась процедура ЗаполнитьСведенияОбОрганизации.
		СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация = Истина;
	Иначе
		// Восстанавливаем реквизиты отчета.
		СтруктураРеквизитовФормы.Организация = СтруктураРеквизитовФормы.мСохраненныйДок.Организация;
	КонецЕсли;

	ДатаПодписи                                       = СтруктураРеквизитовФормы.мСохраненныйДок.ДатаПодписи;
	СтруктураРеквизитовФормы.ЕдиницаИзмерения         = СтруктураРеквизитовФормы.мСохраненныйДок.ЕдиницаИзмерения;
	СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = СтруктураРеквизитовФормы.мСохраненныйДок.ТочностьЕдиницыИзмерения;
	Комментарий                                       = СтруктураРеквизитовФормы.мСохраненныйДок.Комментарий;

	// Восстанавливаем сохраненные данные отчета.
	СписокСохранения = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить();
	
	// Восстанавливаем сохраненные данные вариантов автозаполнения ячеек.
	Если СписокСохранения.Свойство("ДанныеВариантовАвтоЗаполнения", ДанныеВариановАвтоЗаполнения) Тогда
		
		Если НЕ ДанныеВариановАвтоЗаполнения = Неопределено Тогда
			
			мСтруктураВариантыЗаполнения.Очистить();
			
			Для Каждого ЭлементСтруктуры Из ДанныеВариановАвтоЗаполнения Цикл
				
				мСтруктураВариантыЗаполнения.Вставить(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Ключ);
				
				ЭтаФорма["ТаблицаВариантыЗаполнения" + ЭлементСтруктуры.Ключ].Очистить();
				
				Для Каждого ЭлементМассива Из ЭлементСтруктуры.Значение Цикл
					
					ТаблВарЗаполнения = ЭтаФорма["ТаблицаВариантыЗаполнения" + ЭлементСтруктуры.Ключ].Добавить().ТаблицаВариантовЗаполнения;
					
					ЗначениеВДанныеФормы(ЭлементМассива, ТаблВарЗаполнения);
					
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	СписокСохранения.Свойство("Авторасчет", Авторасчет);
	СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет = ?(Авторасчет = Неопределено, Ложь, Авторасчет);

	// Восстанавливаем версию формы.
	СписокСохранения.Свойство("ВерсияФормы", ВерсияФормы);
	
	СписокСохранения.Свойство("ФлОтклВыборЗначений", СтруктураРеквизитовФормы.мАвтоВыборКодов);
	СтруктураРеквизитовФормы.мАвтоВыборКодов = ?(СтруктураРеквизитовФормы.мАвтоВыборКодов = Неопределено, Ложь, СтруктураРеквизитовФормы.мАвтоВыборКодов);
	
	// Восстанавливаем сохраненные данные многострочных разделов.
	Если СписокСохранения.Свойство("ДанныеМногострочныхРазделов", ДанныеМногострочныхРазделов) И ДанныеМногострочныхРазделов <> Неопределено Тогда
		
		Для Каждого ЭлементСтруктуры Из ДанныеМногострочныхРазделов Цикл
			
			НайденноеЗначение = Неопределено;
			
			мСтруктураМногострочныхРазделов.Свойство(ЭлементСтруктуры.Ключ, НайденноеЗначение);
			
			Если НЕ НайденноеЗначение = Неопределено Тогда
				
				ЗначениеВДанныеФормы(ЭлементСтруктуры.Значение, ЭтаФорма[НайденноеЗначение]);
				
				ВывестиРазделВТабличныйДокументНаСервере(НайденноеЗначение, ЭтаФорма[НайденноеЗначение]);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	// Восстановим сохраненные данные редактируемых ячеек.
	СписокСохранения.Свойство( "ПоказателиОтчета", ПоказателиОтчета );
	
	Для Каждого ПоказателиСтраницы Из ПоказателиОтчета Цикл
		ИмяТекТабличноеПоле = ПоказателиСтраницы.Ключ;
		ТекТабличноеПоле    = ЭтаФорма[ИмяТекТабличноеПоле];
		ПоказателиТаблПоле  = ПоказателиСтраницы.Значение;

		Для Каждого Показатель Из ПоказателиТаблПоле Цикл
			ИмяПоказателя      = Показатель.Ключ;
			ЗначениеПоказателя = Показатель.Значение;

			// Установим значение в таблице.
			Попытка
				Если Лев(ИмяПоказателя, 2) = "ЧН" Тогда
					// Значение показателя с префиксом "ЧН" содержит формат представления нуля.
					ОбластьПоказателя = ТекТабличноеПоле.Области[Сред(ИмяПоказателя, 3)];
					ОбластьПоказателя.Формат = РегламентированнаяОтчетностьКлиентСервер.ЗаменитьПредставлениеНуляВСтрокеФормата(ОбластьПоказателя.Формат, ЗначениеПоказателя);
					Продолжить;
				КонецЕсли;
				ТекТабличноеПоле.Области[ИмяПоказателя].Значение = ЗначениеПоказателя;
			Исключение
			КонецПопытки;
		КонецЦикла;
	КонецЦикла;

	СтруктураРеквизитовФормы.мАдресвФорматеДляВыгрузки = ПолеТабличногоДокументаФормаОтчета.Области.ОргАдрес.Значение;
	ПолеТабличногоДокументаФормаОтчета.Области.ОргАдрес.Значение = РегламентированнаяОтчетностьКлиентСервер.ПредставлениеАдресаВФормате9Запятых(СтруктураРеквизитовФормы.мАдресвФорматеДляВыгрузки);

	РегламентированнаяОтчетность.ОперацииПриВосстановленииРегламентированногоОтчета(ЭтаФорма);
	
	Модифицированность = Ложь;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСведенияОбОрганизацииНаСервере(ВПрограммеИзмененаДатаПодписи = Ложь)
	
	РегламентированнаяОтчетностьКлиентСервер.ЗаполнитьСведенияОбОрганизацииДляОтчетаСтатистики(ЭтаФорма, ВПрограммеИзмененаДатаПодписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСведенияОбОрганизацииНаКлиенте(ВПрограммеИзмененаДатаПодписи = Ложь)
	
	РегламентированнаяОтчетностьКлиентСервер.ЗаполнитьСведенияОбОрганизацииДляОтчетаСтатистики(ЭтаФорма, ВПрограммеИзмененаДатаПодписи);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьОтчет(Команда)
	
	СохранитьНаКлиенте();
	
КонецПроцедуры

// СохранитьНаКлиенте()
&НаКлиенте
Процедура СохранитьНаКлиенте(Автосохранение = Ложь, ВыполняемоеОповещение = Неопределено) Экспорт
	
	Вариант = СтруктураРеквизитовФормы.ВидДокумента * НомерКорректировки;
	
	Если НЕ РегламентированнаяОтчетностьКлиент.ПриЗаписиРегламентированногоОтчетаНаКлиенте(ЭтаФорма, , Автосохранение, Вариант) Тогда
		Возврат;
	КонецЕсли;
	
	ПодобныйОтчетСуществует = Ложь;
	ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки = Ложь;
	
	// формируем данные редактируемых ячеек таблицы
	ПоказателиОтчета = Новый Структура();
	
	#Если ВебКлиент Тогда
		ЗаполнитьПоказателиОтчетаНаСервере(ПоказателиОтчета);
	#Иначе
		ЗаполнитьПоказателиОтчетаНаКлиенте(ПоказателиОтчета);
	#КонецЕсли
	
	РезультатСохранения = ПередСохранением(, ПодобныйОтчетСуществует, Вариант, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, Автосохранение, ПоказателиОтчета);
	
	ВидДокументаНомерКорректировкиИзменен = Неопределено;
	
	Если ПодобныйОтчетСуществует И Автосохранение Тогда
		Возврат;
	КонецЕсли;
	
	НуженВопросПередСохранением = (ПодобныйОтчетСуществует ИЛИ ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки);
	
	Если НуженВопросПередСохранением Тогда
		СохранитьНаКлиентеСВопросом(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, ПодобныйОтчетСуществует, ПоказателиОтчета);
	Иначе		
		ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения);		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНаКлиентеСВопросом(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, ПодобныйОтчетСуществует, ПоказателиОтчета)
	
	Если ПодобныйОтчетСуществует Тогда
		
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(КодВозвратаДиалога.Да, "Сохранить");
		Кнопки.Добавить(КодВозвратаДиалога.Нет, "Отмена");
		
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Отчет с видом %1 уже существует.
		|Сохранить отчет с таким же видом?'"), ?(Вариант = 0, """Первичный""", """Корректирующий/" + Вариант + """"));
		ДополнительныеПараметры = Новый Структура("Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, ПоказателиОтчета", Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, ПоказателиОтчета);
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросСохранитьОтчетСТакимЖеВидомЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, Кнопки, , Кнопки.Получить(1).Значение);
		
	Иначе
		
		СохранитьНаКлиентеСВопросомПродолжение(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, ПоказателиОтчета);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросСохранитьОтчетСТакимЖеВидомЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	Автосохранение = ДополнительныеПараметры.Автосохранение;
	Вариант = ДополнительныеПараметры.Вариант;
	ВыполняемоеОповещение = ДополнительныеПараметры.ВыполняемоеОповещение;
	ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки = ДополнительныеПараметры.ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки;
	ПоказателиОтчета = ДополнительныеПараметры.ПоказателиОтчета;
	
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		
		Возврат;
		
	КонецЕсли;
	
	СохранитьНаКлиентеСВопросомПродолжение(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, ПоказателиОтчета);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНаКлиентеСВопросомПродолжение(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, ПоказателиОтчета)
	
	Если ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки Тогда
		
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("ВидОтчета", Вариант);
		
		ФормаВопроса = РегламентированнаяОтчетностьКлиент.ПолучитьОбщуюФормуПоИмени("ВопросПриИзмененииВидаДокументаНомераКорректировки", ПараметрыФормы);
		
		ДополнительныеПараметры = Новый Структура("Автосохранение, Вариант, ВыполняемоеОповещение, ПоказателиОтчета", Автосохранение, Вариант, ВыполняемоеОповещение, ПоказателиОтчета);
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросПриИзмененииВидаДокументаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		
		ФормаВопроса.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
		ФормаВопроса.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		ФормаВопроса.Открыть();
		
	Иначе
		Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Сохраняется %1...'"), ЭтаФорма.Заголовок), , , БиблиотекаКартинок.Записать);
		РезультатСохранения = Сохранить(Автосохранение, , Вариант, Ложь, ПоказателиОтчета);
		ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПриИзмененииВидаДокументаЗавершение(КодВозврата, ДополнительныеПараметры) Экспорт
	
	Автосохранение = ДополнительныеПараметры.Автосохранение;
	Вариант = ДополнительныеПараметры.Вариант;
	ВыполняемоеОповещение = ДополнительныеПараметры.ВыполняемоеОповещение;
	ПоказателиОтчета = ДополнительныеПараметры.ПоказателиОтчета;
	
	Если КодВозврата = КодВозвратаДиалога.Да
		ИЛИ КодВозврата = КодВозвратаДиалога.Нет Тогда
		
		ВидДокументаНомерКорректировкиИзменен = ?(КодВозврата = КодВозвратаДиалога.Да, Истина, Ложь);
		
	Иначе
		
		Возврат;
		
	КонецЕсли;
	
	Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Сохраняется %1...'"), ЭтаФорма.Заголовок), , , БиблиотекаКартинок.Записать);
	РезультатСохранения = Сохранить(Автосохранение, , Вариант, ВидДокументаНомерКорректировкиИзменен, ПоказателиОтчета);
	ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения)
	
	КлючУникальности = СтруктураРеквизитовФормы.мСохраненныйДок;
	
	Если РезультатСохранения Тогда
		
		РегламентированнаяОтчетностьКлиент.ПослеЗаписиРегламентированногоОтчета(ЭтаФорма);
		
		Если ВыполняемоеОповещение <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ВыполняемоеОповещение);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры
// СохранитьНаКлиенте

&НаСервере
Функция ПередСохранением(КодИФНС = "не применимо", ПодобныйОтчетСуществует="", Вариант="", ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки="", Автосохранение="", ПоказателиОтчета="")
	
	Если РегламентированнаяОтчетность.БылиИзмененыКлючевыеРеквизитыОтчета(ЭтаФорма, КодИФНС)
	   И РегламентированнаяОтчетность.СуществуетДокументСАналогичнымиРеквизитами(ЭтаФорма, КодИФНС) Тогда
		
		ПодобныйОтчетСуществует = Истина;
		
	КонецЕсли;
	
	СтруктураРеквизитовФормы.мЗаписываетсяНовыйДокумент = (СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено ИЛИ СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено);
	
	Если Вариант <> Неопределено И ((СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено) ИЛИ (СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено) ИЛИ (Вариант <> СтруктураРеквизитовФормы.мВариант)) Тогда
		
		Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено ИЛИ СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено Тогда
		
		ИначеЕсли Вариант <> СтруктураРеквизитовФормы.мВариант Тогда
			
			ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки = Истина;
			
		КонецЕсли;

	КонецЕсли;
	
	Если ПодобныйОтчетСуществует
	 ИЛИ ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки Тогда
	
		Возврат Ложь;
	
	КонецЕсли;
	
	Возврат Сохранить(Автосохранение, КодИФНС, Вариант, , ПоказателиОтчета);
	
КонецФункции

// Формирует структуру данных отчета и помещает в реквизит типа ХранилищеЗначения
// документа РегламентированныйОтчет.
// 
// При первом сохранении данных отчета создает новый документ этого вида.
// Структура данных отчета состоит из элементов:
//   - значения редактируемых реквизитов отчета;
//   - данные по многострочным разделам отчета;
//   - данные по  многостраничным разделам отчета;
//   - данные по вариантам заполнения реквизитов,
//     участвующих в автозаполнении.
//
&НаСервере
Функция Сохранить(Автосохранение = Ложь, КодИФНС = "не применимо", Вариант = Неопределено, ВидДокументаНомерКорректировкиИзменен = Неопределено, ПоказателиОтчета = Неопределено) Экспорт
	
	ДанныеДляРазблокирования = Неопределено;
	
	Если НЕ СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
		Если НЕ СтруктураРеквизитовФормы.мБезОткрытияФормы Тогда
			ДанныеДляРазблокирования = Новый Структура("Ключ,ИдФормы",
			СтруктураРеквизитовФормы.мСохраненныйДок, ЭтаФорма.УникальныйИдентификатор);
		КонецЕсли;
		СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.ПолучитьОбъект();
	КонецЕсли;
	
	Если НЕ РегламентированнаяОтчетность.ПриЗаписиРегламентированногоОтчетаНаСервере(ЭтаФорма, КодИФНС, Автосохранение, Вариант, ВидДокументаНомерКорректировкиИзменен, СтруктураРеквизитовФормы.мСохраненныйДок) Тогда
		СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
		Возврат Ложь;
	КонецЕсли;

	// Установим текущие значения реквизитов документа.
	СтруктураРеквизитовФормы.мСохраненныйДок.ИсточникОтчета           = Метаданные.Отчеты[Сред(Лев(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, ".Форма.") - 1), 7)].Имя;
	СтруктураРеквизитовФормы.мСохраненныйДок.НаименованиеОтчета       = Метаданные.Отчеты[Сред(Лев(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, ".Форма.") - 1), 7)].ОсновнаяФорма.Синоним;
	СтруктураРеквизитовФормы.мСохраненныйДок.ДатаНачала               = СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета;
	СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания            = СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета;
	СтруктураРеквизитовФормы.мСохраненныйДок.Периодичность            = СтруктураРеквизитовФормы.мПериодичность;
	СтруктураРеквизитовФормы.мСохраненныйДок.ВыбраннаяФорма           = СтруктураРеквизитовФормы.мВыбраннаяФорма;
	СтруктураРеквизитовФормы.мСохраненныйДок.Организация              = СтруктураРеквизитовФормы.Организация;
	СтруктураРеквизитовФормы.мСохраненныйДок.ДатаПодписи              = ДатаПодписи;
	СтруктураРеквизитовФормы.мСохраненныйДок.ЕдиницаИзмерения         = Неопределено;
	СтруктураРеквизитовФормы.мСохраненныйДок.ТочностьЕдиницыИзмерения = СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения;
	СтруктураРеквизитовФормы.мСохраненныйДок.ВидОтчетности            = Перечисления.ВидыОтчетности.РегламентированнаяОтчетность;
	СтруктураРеквизитовФормы.мСохраненныйДок.Вид                      = Вариант;
	СтруктураРеквизитовФормы.мСохраненныйДок.ПредставлениеВида        = РегламентированнаяОтчетность.ПредставлениеВидаДокумента(СтруктураРеквизитовФормы.мСохраненныйДок.Вид);
	СтруктураРеквизитовФормы.мСохраненныйДок.Комментарий              = Комментарий;
	
	СтруктураРеквизитовФормы.мВариант = Вариант;

	// Формируем список сохранения.
	СписокСохранения = Новый Структура();
	
	// Вставляем данные редактируемых ячеек таблицы.
	СписокСохранения.Вставить("ПоказателиОтчета", ПоказателиОтчета);

	// Вставляем данные многострочных разделов.
	ДанныеМногострочныхРазделов = Новый Структура;
	
	СписокСохранения.Вставить("ДанныеМногострочныхРазделов", ДанныеМногострочныхРазделов);

	// Вставляем данные вариантов автозаполнения ячеек.
	СписокСохранения.Вставить("ДанныеВариантовАвтоЗаполнения", Неопределено);
	
	СписокСохранения.Вставить("Авторасчет", СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);

	// Вставляем версию формы.
	СписокСохранения.Вставить("ВерсияФормы", СтруктураРеквизитовФормы.мВерсияФормы);
	
	// Вставляем флажок отключения.
	СписокСохранения.Вставить("ФлОтклВыборЗначений", СтруктураРеквизитовФормы.мАвтоВыборКодов);

	ХранилищеДанных = Новый ХранилищеЗначения(СписокСохранения);
	СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета = ХранилищеДанных;

	// Записываем документ, хранящий данные отчета.
	Попытка
		СтруктураРеквизитовФормы.мСохраненныйДок.Записать();
		РегламентированнаяОтчетность.СохранитьСтатусОтправкиРеглОтчета(ЭтаФорма);
	Исключение
		
		Если НЕ Автосохранение Тогда
			
			Сообщение = Новый СообщениеПользователю;

			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), РегламентированнаяОтчетностьКлиентСервер.СформироватьТекстСообщения(ОписаниеОшибки()));

			Сообщение.Сообщить();
			
		КонецЕсли;
		
		СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
		
		Возврат Ложь;
		
	КонецПопытки;
		
	Модифицированность = Ложь;
	
	СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
	
	Если НЕ СтруктураРеквизитовФормы.мБезОткрытияФормы
       И НЕ СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
				   
    	ЗаблокироватьДанныеДляРедактирования(СтруктураРеквизитовФормы.мСохраненныйДок, , ЭтаФорма.УникальныйИдентификатор);

    КонецЕсли;
	
	Если ДанныеДляРазблокирования <> Неопределено Тогда
		РазблокироватьДанныеДляРедактирования(ДанныеДляРазблокирования.Ключ, ДанныеДляРазблокирования.ИдФормы);
	КонецЕсли;
	
	Возврат Истина;

КонецФункции

&НаКлиенте
Функция СобратьДанныеТекущегоТаблПоляНаКлиенте(ИмяТабличногоПоля) Экспорт
	
	Возврат РегламентированнаяОтчетностьКлиентСервер.СобратьДанныеТекущегоТаблПоля(ЭтаФорма, ИмяТабличногоПоля);
	
КонецФункции

&НаСервере
Функция СобратьДанныеТекущегоТаблПоляНаСервере(ИмяТабличногоПоля) Экспорт
	
	Возврат РегламентированнаяОтчетностьКлиентСервер.СобратьДанныеТекущегоТаблПоля(ЭтаФорма, ИмяТабличногоПоля);

КонецФункции

&НаСервере
Процедура ЗаполнитьПоказателиОтчетаНаСервере(ПоказателиОтчета)
	
	РегламентированнаяОтчетностьКлиентСервер.ЗаполнитьПоказателиОтчета(ЭтаФорма, ПоказателиОтчета);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоказателиОтчетаНаКлиенте(ПоказателиОтчета)
	
	РегламентированнаяОтчетностьКлиентСервер.ЗаполнитьПоказателиОтчета(ЭтаФорма, ПоказателиОтчета);
	
КонецПроцедуры

&НаКлиенте
Функция ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаКлиенте(ИмяЛиста = Неопределено) Экспорт
	
	ИдГрупп = Новый Структура;
	
	Возврат ОпределитьИдМногострочногоРазделаПоАктивнойСтранице(ЭтаФорма, ИмяЛиста, ИмяЛиста, ИдГрупп);

КонецФункции

&НаСервере
Функция ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ИмяЛиста = Неопределено) Экспорт
	
	ИдГрупп = Новый Структура;
	
	Возврат ОпределитьИдМногострочногоРазделаПоАктивнойСтранице(ЭтаФорма, ИмяЛиста, ИмяЛиста, ИдГрупп);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ОпределитьИдМногострочногоРазделаПоАктивнойСтранице(Форма, ИмяЛиста = Неопределено, ТекущаяСтраница = Неопределено, ИдГрупп = Неопределено)
	
	Перем ИмяГруппы;

	Если ИмяЛиста = Неопределено Тогда
		ИмяТекущейСтраницыПанели = ТекущаяСтраница.Имя;
	Иначе
		ИмяТекущейСтраницыПанели = ИмяЛиста;
	КонецЕсли;

	Если ИмяТекущейСтраницыПанели = "ФормаОтчета" Тогда
		
		ИмяГруппы = РегламентированнаяОтчетностьКлиентСервер.РазделТекущейОбласти(Форма, Форма.Элементы.ПолеТабличногоДокументаФормаОтчета.ТекущаяОбласть);
		
	КонецЕсли;

	Возврат ИмяГруппы;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьСтруктуруМногострочногоРаздела(Форма, ИмяГруппы) Экспорт
	
	Перем СтруктураГруппы;
	
	Форма.мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);
	
	СтруктураГруппы = Форма[СтруктураГруппы];
	
	ТекТабличноеПолеИмя = "ПолеТабличногоДокументаФормаОтчета";
	
	ТекТабличноеПоле = Форма[ТекТабличноеПолеИмя];
	
	Для НСтр = 1 По СтруктураГруппы.Количество() Цикл
		ТекСтрокаТаблицы = СтруктураГруппы[НСтр - 1];
		НСтрСтр = Формат(НСтр, "ЧГ=0");
		
		Для НомерГрафы = 1 По Форма.мСтруктураКолвоКолонокРазделов[ИмяГруппы] Цикл
			
			ИмяКолонки = ИмяГруппы + Формат(НомерГрафы, "ЧЦ=2; ЧВН=");
			
			Если СтруктураГруппы[0].Свойство(ИмяКолонки) Тогда
				
				ИмяЯчейки     = ИмяКолонки + "_" + НСтрСтр;
				ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяЯчейки];
				
				Если ОбластьЯчейки.СодержитЗначение = Истина Тогда
					ЗначениеЯчейки = ОбластьЯчейки.Значение;
				Иначе
					ЗначениеЯчейки = ОбластьЯчейки.Текст;
				КонецЕсли;
				
				ТекСтрокаТаблицы[ИмяКолонки] = ЗначениеЯчейки;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиРазделВТабличныйДокументНаСервере(ИмяГруппы, СтруктураГруппы) Экспорт
	
	ВывестиРазделВТабличныйДокумент(ЭтаФорма, ИмяГруппы, СтруктураГруппы);
	
КонецПроцедуры

&НаКлиенте
Процедура ВывестиРазделВТабличныйДокументНаКлиенте(ИмяГруппы, СтруктураГруппы) Экспорт
	
	ВывестиРазделВТабличныйДокумент(ЭтаФорма, ИмяГруппы, СтруктураГруппы);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ВывестиРазделВТабличныйДокумент(Форма, ИмяГруппы, СтруктураГруппы)
	
	Перем ИсходноеКоличествоСтрокГруппы;

	// Определим исходное колво строк многострочного раздела,
	// соответствующее бумажной форме отчета.
	Форма.мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);

	// Реальное кол-во строк (кол-во заполненных строк).
	ТекущееКоличествоСтрокГруппы = СтруктураГруппы.Количество();
	
	ТекТабличноеПолеИмя = "ПолеТабличногоДокументаФормаОтчета";
	
	ТекТабличноеПоле = Форма[ТекТабличноеПолеИмя];
	
	// При восстановлении сохраненных данных отчета сравниваем исходное кол-во
	// отображаемых в форме строк многострочного раздела с реальным количеством
	// созданных строк в сохраненном отчете.
	Если ТекущееКоличествоСтрокГруппы > ИсходноеКоличествоСтрокГруппы Тогда
		
		РегламентированнаяОтчетностьКлиентСервер.ДобавитьНеобходимоеКоличествоДопСтрок(Форма, ТекТабличноеПоле, ТекТабличноеПолеИмя, ИсходноеКоличествоСтрокГруппы, ТекущееКоличествоСтрокГруппы, ИмяГруппы, СтруктураГруппы);
		
		Форма[ТекТабличноеПолеИмя] = ТекТабличноеПоле;
		
	КонецЕсли;
	
	ТекТабличноеПоле = Форма[ТекТабличноеПолеИмя];

	// Выводим значения строк.
	Для Каждого СтрокаТаблицы Из СтруктураГруппы Цикл
		
		Для НомерГрафы = 1 По Форма.мСтруктураКолвоКолонокРазделов[ИмяГруппы] Цикл
			
			КолонкаТаблицыИмя = ИмяГруппы + Формат(НомерГрафы, "ЧЦ=2; ЧВН=");
			
			Если СтруктураГруппы[0].Свойство(КолонкаТаблицыИмя) Тогда
				
				НомерСтрокиВТаблице      = СтруктураГруппы.Индекс(СтрокаТаблицы);
				НомерСтрокиВФормеТаблицы = НомерСтрокиВТаблице + 1;
				ИмяЯчейки                = КолонкаТаблицыИмя + "_" + НомерСтрокиВФормеТаблицы;
				ОбластьЯчейкиТаблицы     = ТекТабличноеПоле.Области[ИмяЯчейки];
				ЗначениеЯчейки           = СтрокаТаблицы[КолонкаТаблицыИмя];
				
				Если ОбластьЯчейкиТаблицы.СодержитЗначение Тогда
					// Задаем значение ячейки.
					ОбластьЯчейкиТаблицы.Значение = ЗначениеЯчейки;
					
				Иначе
					// Устанавливаем порядковый номер строки.
					Если ИмяЯчейки = "П000202102_1" Тогда
						ОбластьЯчейкиТаблицы.Текст    = "21";
					Иначе
						ОбластьЯчейкиТаблицы.Текст    = ЗначениеЯчейки;
					КонецЕсли; 
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если СтрНайти(Заголовок, СтруктураРеквизитовФормы.СтрПериодОтчета) = 0 Тогда
		Заголовок = Заголовок + " за " + СтруктураРеквизитовФормы.СтрПериодОтчета;
	КонецЕсли;
	
	ОргСтр = " (" + СтруктураРеквизитовФормы.НаимОрганизации + ")";
	Если СтрНайти(Заголовок, ОргСтр) = 0 Тогда
		Заголовок = Заголовок + ОргСтр;
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("ВыполнитьПроверкуПередОткрытием", 0.1, Истина);

КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПроверкуПередОткрытием()
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПриОткрытииЗавершение", ЭтотОбъект);
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередОткрытиемФормыРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытииЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Модифицированность = Ложь;
		Закрыть();
		Возврат;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	РегламентированнаяОтчетностьКлиент.ПередЗакрытиемРегламентированногоОтчета(ЭтаФорма, Отказ, СтандартнаяОбработка, ЗавершениеРаботы, ТекстПредупреждения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ЗавершениеРаботы Тогда
				
		Возврат;
		
	КонецЕсли;
	
	ПриЗакрытииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПриЗакрытииНаСервере()
	
	РегламентированнаяОтчетность.ПриЗакрытииРегламентированногоОтчета(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолеТабличногоДокументаФормаОтчетаВыбор(Элемент, Область, СтандартнаяОбработка)
	
	Если Область.Имя = "ОргАдрес" Тогда
		РегламентированнаяОтчетностьКлиент.ОбработкаАдресаВСтатистическомОтчете(ЭтаФорма, Область, СтандартнаяОбработка);
	Иначе
		
		Если Лев(Область.Имя, 14) = "П000001116011_" Или Лев(Область.Имя, 14) = "П000001116012_" Тогда
			ПараметрВводаПоля = РегламентированнаяОтчетностьКлиентСервер.НайтиСвойстваПоказателя(ЭтаФорма, "Уголь");
		КонецЕсли;
		
		Если ПараметрВводаПоля <> Неопределено И ПараметрВводаПоля.ТаблицаЗначений <> Неопределено Тогда
			КолонкаПоиска = "Код";
			КодПоказателя = ПараметрВводаПоля.Показатель;
			КопироватьДанныеФормы(ПараметрВводаПоля.ТаблицаЗначений, ТЗВыбора);
			ВвестиПоказатель(Элемент, Область, КодПоказателя, Ложь, ПараметрВводаПоля.ТекстПриВыборе, ТЗВыбора, СтандартнаяОбработка, КолонкаПоиска);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуКонтактнойИнформацииЗавершение(Результат, Параметры) Экспорт
	
	РегламентированнаяОтчетностьКлиент.ОбновитьАдресВТабличномДокументеСтатистическойОтчетности(Результат, Параметры.Область, СтруктураРеквизитовФормы);
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолеТабличногоДокументаФормаОтчетаПриИзмененииСодержимогоОбласти(Элемент, Область)
	
	Если Область.Имя = "ДатаСоставленияОтчета" Тогда 
		ДатаПодписи = Область.Значение;
		ЗаполнитьСведенияОбОрганизацииНаКлиенте(Истина);
		Модифицированность = Истина;
		Возврат;
	ИначеЕсли Область.Имя = "НомерКорректировки" Тогда 
		Если Область.Значение = 0 Тогда 
			СтруктураРеквизитовФормы.ВидДокумента = 0;
			НомерКорректировки = 0;
		Иначе 
			СтруктураРеквизитовФормы.ВидДокумента = 1;
			НомерКорректировки = Область.Значение;
		КонецЕсли;
		Модифицированность = Истина;
		Возврат;
	КонецЕсли;
	
	Если Область.СодержитЗначение И Область.ТипЗначения.СодержитТип(Тип("Число")) Тогда
		Если Область.Значение = 0 И (Область.ТипЗначения.КвалификаторыЧисла.РазрядностьДробнойЧасти = 0 Или  Область.ТипЗначения.КвалификаторыЧисла.РазрядностьДробнойЧасти = 1) Тогда
			
			ФорматПредставленияНуля = РегламентированнаяОтчетностьКлиентСервер.ПолучитьПредставлениеНуляИзСтрокиФормата(Область.Формат);
			
			ОтображениеНуля = СокрЛП(Формат(0, РегламентированнаяОтчетностьКлиентСервер.ЗаменитьПредставлениеНуляВСтрокеФормата(Область.Формат, "ЧН=")));
			Если ПустаяСтрока(ОтображениеНуля) Тогда
				ОтображениеНуля = ?(Область.ТипЗначения.КвалификаторыЧисла.РазрядностьДробнойЧасти = 0, "0", "0.0");
			КонецЕсли;
			ТипСтрокиЗаполнения = Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(СтрДлина(ОтображениеНуля), ДопустимаяДлина.Фиксированная));
			СтрокаЗаполнения = ТипСтрокиЗаполнения.ПривестиЗначение();
			
			Список = Новый СписокЗначений;
			Список.Добавить("ЧН=' '", "  <Пустое значение>    " + СтрокаЗаполнения);
			Список.Добавить("ЧН=" + ОтображениеНуля, "  Отображать как """ + ОтображениеНуля + """  ");
			
			НайденнаяСтрока = Список.НайтиПоЗначению(ФорматПредставленияНуля);
			
			ДополнительныеПараметры = Новый Структура("Область, Элемент", Область, Элемент);
			ОписаниеОповещения = Новый ОписаниеОповещения("ПолеТабличногоДокументаФормаОтчетаПриИзмененииСодержимогоОбластиЗавершение", ЭтотОбъект, ДополнительныеПараметры);
						
			// обход ошибок платформы: в тонком клиенте не работает ПоказатьВыборИзСписка (ПоказатьВыборИзМеню не работает в веб-клиенте 
			// и в событии ПриИзмененииСодержимогоОбласти табличного документа - где мы его и хотим использовать прежде всего)
			# Если ВебКлиент Тогда
			
				Если НайденнаяСтрока = Неопределено Тогда
					ПоказатьВыборИзСписка(ОписаниеОповещения, Список, Элемент);
				Иначе
					ПоказатьВыборИзСписка(ОписаниеОповещения, Список, Элемент, НайденнаяСтрока);
				КонецЕсли;
				
			#Иначе
				
				Список.ПоказатьВыборЭлемента(ОписаниеОповещения, "Выберите значение", Элемент);
					
			#КонецЕсли
			
			Возврат;
			
		КонецЕсли;
	КонецЕсли;
	
	Модифицированность = Истина;
	
	ОбластьИмя = Элемент.ТекущаяОбласть.Имя;

	РасчетНаКлиенте("", ОбластьИмя);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолеТабличногоДокументаФормаОтчетаПриИзмененииСодержимогоОбластиЗавершение(СписокЭлемент, ДополнительныеПараметры) Экспорт
	
	Область = ДополнительныеПараметры.Область;
	Элемент = ДополнительныеПараметры.Элемент;
	
	Если СписокЭлемент <> Неопределено  Тогда
		
		Область.Формат = РегламентированнаяОтчетностьКлиентСервер.ЗаменитьПредставлениеНуляВСтрокеФормата(Область.Формат, СписокЭлемент.Значение);
		
	КонецЕсли;
	
	ОбластьИмя = Элемент.ТекущаяОбласть.Имя;
	
	РасчетНаКлиенте("", ОбластьИмя);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура РасчетНаКлиенте(ИмяСтраницыПанели = "", ОбластьИмя = "") Экспорт

	Расчет(ЭтаФорма, ИмяСтраницыПанели, ОбластьИмя);

КонецПроцедуры

&НаСервере
Процедура РасчетНаСервере(ИмяСтраницыПанели = "", ОбластьИмя = "") Экспорт

	Расчет(ЭтаФорма, ИмяСтраницыПанели, ОбластьИмя);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура Расчет(Форма, ИмяТекущейСтраницыПанели = "", ОбластьИмя = "")
	
	Если Форма.СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Тогда
		Возврат;
	КонецЕсли;
	
	мФормаОтчета = Форма.ПолеТабличногоДокументаФормаОтчета;
	
	// Раздел 1.
	// Данные строки 1160 по всем графам, кроме 5, должны быть равны сумме данных строк 1620 и 1630 по соответствующим графам.
	Для НомКол = 1 По 10 Цикл
		Если НомКол = 5 Тогда
			Продолжить;
		КонецЕсли;
		мФормаОтчета.Области["П0000011160" + Формат(НомКол, "ЧЦ=2; ЧВН=; ЧГ=")].Значение =
			мФормаОтчета.Области["П0000011620" + Формат(НомКол, "ЧЦ=2; ЧВН=; ЧГ=")].Значение
		  + мФормаОтчета.Области["П0000011630" + Формат(НомКол, "ЧЦ=2; ЧВН=; ЧГ=")].Значение;
	КонецЦикла;
	// Данные строки 1161 по графам 3 и 4 должны быть равны сумме данных строк 1621 и 1631 по соответствующим графам.
	Для НомКол = 3 По 4 Цикл
		мФормаОтчета.Области["П0000011161" + Формат(НомКол, "ЧЦ=2; ЧВН=; ЧГ=")].Значение =
			мФормаОтчета.Области["П0000011621" + Формат(НомКол, "ЧЦ=2; ЧВН=; ЧГ=")].Значение
		  + мФормаОтчета.Области["П0000011631" + Формат(НомКол, "ЧЦ=2; ЧВН=; ЧГ=")].Значение;
	КонецЦикла;
	// Данные всех строк, кроме 1012, 1032, 1082, 1092, 1151, 1161, 1621, 1631, 1750-1753,
	// по графе 3 должны быть равны сумме данных граф 4-7 по соответствующим строкам.
	РасчетГрафы3Раздела1Формы4ТЭР(Форма, "1001");
	РасчетГрафы3Раздела1Формы4ТЭР(Форма, "1010");
	РасчетГрафы3Раздела1Формы4ТЭР(Форма, "1020");
	РасчетГрафы3Раздела1Формы4ТЭР(Форма, "1030");
	РасчетГрафы3Раздела1Формы4ТЭР(Форма, "1040");
	РасчетГрафы3Раздела1Формы4ТЭР(Форма, "1050");
	РасчетГрафы3Раздела1Формы4ТЭР(Форма, "1060");
	РасчетГрафы3Раздела1Формы4ТЭР(Форма, "1071");
	РасчетГрафы3Раздела1Формы4ТЭР(Форма, "1072");
	РасчетГрафы3Раздела1Формы4ТЭР(Форма, "1073");
	РасчетГрафы3Раздела1Формы4ТЭР(Форма, "1080");
	РасчетГрафы3Раздела1Формы4ТЭР(Форма, "1090");
	РасчетГрафы3Раздела1Формы4ТЭР(Форма, "1100");
	РасчетГрафы3Раздела1Формы4ТЭР(Форма, "1110");
	РасчетГрафы3Раздела1Формы4ТЭР(Форма, "1120");
	РасчетГрафы3Раздела1Формы4ТЭР(Форма, "1130");
	РасчетГрафы3Раздела1Формы4ТЭР(Форма, "1140");
	РасчетГрафы3Раздела1Формы4ТЭР(Форма, "1150");
	РасчетГрафы3Раздела1Формы4ТЭР(Форма, "1160");
	Для Суффикс = 1 По 9 Цикл
		мФормаОтчета.Области["П000001116003_" + Формат(Суффикс, "ЧГ=")].Значение = мФормаОтчета.Области["П000001116004_" + Формат(Суффикс, "ЧГ=")].Значение
																				 + мФормаОтчета.Области["П000001116006_" + Формат(Суффикс, "ЧГ=")].Значение
																				 + мФормаОтчета.Области["П000001116007_" + Формат(Суффикс, "ЧГ=")].Значение;
	КонецЦикла;
	РасчетГрафы3Раздела1Формы4ТЭР(Форма, "1620");
	РасчетГрафы3Раздела1Формы4ТЭР(Форма, "1630");
	РасчетГрафы3Раздела1Формы4ТЭР(Форма, "1632");
	РасчетГрафы3Раздела1Формы4ТЭР(Форма, "1640");
	РасчетГрафы3Раздела1Формы4ТЭР(Форма, "1650");
	РасчетГрафы3Раздела1Формы4ТЭР(Форма, "1660");
	РасчетГрафы3Раздела1Формы4ТЭР(Форма, "1690");
	РасчетГрафы3Раздела1Формы4ТЭР(Форма, "1700");
	РасчетГрафы3Раздела1Формы4ТЭР(Форма, "1720");
	РасчетГрафы3Раздела1Формы4ТЭР(Форма, "1730");
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РасчетГрафы3Раздела1Формы4ТЭР(Форма, НомерСтроки)
	
	мФормаОтчета = Форма.ПолеТабличногоДокументаФормаОтчета;
	
	мФормаОтчета.Области["П000001" + НомерСтроки + "03"].Значение =                     мФормаОтчета.Области["П000001" + НомерСтроки + "04"].Значение
		+ ?(мФормаОтчета.Области.Найти("П000001" + НомерСтроки + "05") <> Неопределено, мФормаОтчета.Области["П000001" + НомерСтроки + "05"].Значение, 0)
		+ ?(мФормаОтчета.Области.Найти("П000001" + НомерСтроки + "06") <> Неопределено, мФормаОтчета.Области["П000001" + НомерСтроки + "06"].Значение, 0)
																					  + мФормаОтчета.Области["П000001" + НомерСтроки + "07"].Значение;
	
КонецПроцедуры

&НаКлиенте
Процедура Обновить(Команда)
	
	СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация = Истина;
	ЗаполнитьСведенияОбОрганизацииНаКлиенте();
	СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуНастроек(Команда)
	
	ОткрытьФормуВыбораСтраниц("ВыбратьДляНастройки");
	
КонецПроцедуры

// Открывает форму документа ФормаНастройкиОтчета с целью выбора
// выводимых на печать листов отчета.
//
// Параметры:
//   ВариантВыбора - строка, назначение выбора страниц.
//
&НаКлиенте
Процедура ОткрытьФормуВыбораСтраниц(ВариантВыбора)
	
	мПараметры = Новый Структура;
	
	мПараметры.Вставить("ОтключитьАвтоРасчет", Истина);
	мПараметры.Вставить("Автосохранение", Ложь);
	мПараметры.Вставить("СчетчикСтраниц", Ложь);
	мПараметры.Вставить("ПараметрыОтображенияСумм", Ложь);
	мПараметры.Вставить("ПроверкаСоотношений", Ложь);
	мПараметры.Вставить("ИмеетсяРеквизитДеревоВыбранныхСтраниц", Ложь);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ФлажокОтклАвтоРасчет", СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);
	ПараметрыФормы.Вставить("мАвтоВыборКодов",      СтруктураРеквизитовФормы.мАвтоВыборКодов);
	ПараметрыФормы.Вставить("мПараметры",           мПараметры);
	
	ФормаНастройкиОтчета = РегламентированнаяОтчетностьКлиент.ПолучитьОбщуюФормуПоИмени("НастройкиОтчета", ПараметрыФормы, ЭтаФорма);
	ФормаНастройкиОтчета.Элементы.Страницы.ПодчиненныеЭлементы.СвойстваРазделов.Видимость = Ложь;
	
	ЗначениеАвторасчета = СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет;
	
	ЗначениеАвторасчета = СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет;
	
	ДополнительныеПараметры = Новый Структура("ЗначениеАвторасчета", ЗначениеАвторасчета);
	ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьФормуВыбораСтраницЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ФормаНастройкиОтчета.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
	ФормаНастройкиОтчета.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	ФормаНастройкиОтчета.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораСтраницЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	ЗначениеАвторасчета = ДополнительныеПараметры.ЗначениеАвторасчета;
	
	Если ЗначениеАвторасчета <> СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Тогда
		
		Если СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет = Ложь Тогда
			ТекстВопроса = "Будет произведен перерасчет всех рассчитываемых показателей. Продолжить?";
			ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьФормуВыбораСтраницЗавершениеВопросЗавершение", ЭтотОбъект);
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
			Возврат;
		КонецЕсли;
		
		УстановитьЗащитуИЦветФонаОбластейАвторассчитываемыхПоказателей();
		
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораСтраницЗавершениеВопросЗавершение(Ответ, ДополнительныеПараметры) Экспорт 
	
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет = Истина;
		Возврат;
	КонецЕсли;
	
	РасчетНаКлиенте("", "");
	
	УстановитьЗащитуИЦветФонаОбластейАвторассчитываемыхПоказателей();
	
	Модифицированность = Истина;	
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗащитуИЦветФонаОбластейАвторассчитываемыхПоказателей()
	
	ОтклАвтоРасчетЗначение = ЭтаФорма.СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет;
	
	ЦветФонаЗначение = ?(ОтклАвтоРасчетЗначение, Новый Цвет(255, 255, 192), Новый Цвет(192, 220, 192));
	
	мФормаОтчета = ЭтаФорма.ПолеТабличногоДокументаФормаОтчета;
	
	Для НомКол = 1 По 10 Цикл
		Если НомКол = 5 Тогда
			Продолжить;
		КонецЕсли;
		мФормаОтчета.Области["П0000011160" + Формат(НомКол, "ЧЦ=2; ЧВН=; ЧГ=")].ЦветФона = ЦветФонаЗначение;
		мФормаОтчета.Области["П0000011160" + Формат(НомКол, "ЧЦ=2; ЧВН=; ЧГ=")].Защита   = Не ОтклАвтоРасчетЗначение;
	КонецЦикла;
	
	Для НомКол = 3 По 4 Цикл
		мФормаОтчета.Области["П0000011161" + Формат(НомКол, "ЧЦ=2; ЧВН=; ЧГ=")].ЦветФона = ЦветФонаЗначение;
		мФормаОтчета.Области["П0000011161" + Формат(НомКол, "ЧЦ=2; ЧВН=; ЧГ=")].Защита   = Не ОтклАвтоРасчетЗначение;
	КонецЦикла;
	
	мФормаОтчета.Области["П000001100103"].ЦветФона = ЦветФонаЗначение;
	мФормаОтчета.Области["П000001100103"].Защита   = Не ОтклАвтоРасчетЗначение;
	мФормаОтчета.Области["П000001101003"].ЦветФона = ЦветФонаЗначение;
	мФормаОтчета.Области["П000001101003"].Защита   = Не ОтклАвтоРасчетЗначение;
	мФормаОтчета.Области["П000001102003"].ЦветФона = ЦветФонаЗначение;
	мФормаОтчета.Области["П000001102003"].Защита   = Не ОтклАвтоРасчетЗначение;
	мФормаОтчета.Области["П000001103003"].ЦветФона = ЦветФонаЗначение;
	мФормаОтчета.Области["П000001103003"].Защита   = Не ОтклАвтоРасчетЗначение;
	мФормаОтчета.Области["П000001104003"].ЦветФона = ЦветФонаЗначение;
	мФормаОтчета.Области["П000001104003"].Защита   = Не ОтклАвтоРасчетЗначение;
	мФормаОтчета.Области["П000001105003"].ЦветФона = ЦветФонаЗначение;
	мФормаОтчета.Области["П000001105003"].Защита   = Не ОтклАвтоРасчетЗначение;
	мФормаОтчета.Области["П000001106003"].ЦветФона = ЦветФонаЗначение;
	мФормаОтчета.Области["П000001106003"].Защита   = Не ОтклАвтоРасчетЗначение;
	мФормаОтчета.Области["П000001107103"].ЦветФона = ЦветФонаЗначение;
	мФормаОтчета.Области["П000001107103"].Защита   = Не ОтклАвтоРасчетЗначение;
	мФормаОтчета.Области["П000001107203"].ЦветФона = ЦветФонаЗначение;
	мФормаОтчета.Области["П000001107203"].Защита   = Не ОтклАвтоРасчетЗначение;
	мФормаОтчета.Области["П000001107303"].ЦветФона = ЦветФонаЗначение;
	мФормаОтчета.Области["П000001107303"].Защита   = Не ОтклАвтоРасчетЗначение;
	мФормаОтчета.Области["П000001108003"].ЦветФона = ЦветФонаЗначение;
	мФормаОтчета.Области["П000001108003"].Защита   = Не ОтклАвтоРасчетЗначение;
	мФормаОтчета.Области["П000001109003"].ЦветФона = ЦветФонаЗначение;
	мФормаОтчета.Области["П000001109003"].Защита   = Не ОтклАвтоРасчетЗначение;
	мФормаОтчета.Области["П000001110003"].ЦветФона = ЦветФонаЗначение;
	мФормаОтчета.Области["П000001110003"].Защита   = Не ОтклАвтоРасчетЗначение;
	мФормаОтчета.Области["П000001111003"].ЦветФона = ЦветФонаЗначение;
	мФормаОтчета.Области["П000001111003"].Защита   = Не ОтклАвтоРасчетЗначение;
	мФормаОтчета.Области["П000001112003"].ЦветФона = ЦветФонаЗначение;
	мФормаОтчета.Области["П000001112003"].Защита   = Не ОтклАвтоРасчетЗначение;
	мФормаОтчета.Области["П000001113003"].ЦветФона = ЦветФонаЗначение;
	мФормаОтчета.Области["П000001113003"].Защита   = Не ОтклАвтоРасчетЗначение;
	мФормаОтчета.Области["П000001114003"].ЦветФона = ЦветФонаЗначение;
	мФормаОтчета.Области["П000001114003"].Защита   = Не ОтклАвтоРасчетЗначение;
	мФормаОтчета.Области["П000001115003"].ЦветФона = ЦветФонаЗначение;
	мФормаОтчета.Области["П000001115003"].Защита   = Не ОтклАвтоРасчетЗначение;
	мФормаОтчета.Области["П000001116003"].ЦветФона = ЦветФонаЗначение;
	мФормаОтчета.Области["П000001116003"].Защита   = Не ОтклАвтоРасчетЗначение;
	
	Для Суффикс = 1 По 9 Цикл
		мФормаОтчета.Области["П000001116003_" + Формат(Суффикс, "ЧГ=")].ЦветФона = ЦветФонаЗначение;
		мФормаОтчета.Области["П000001116003_" + Формат(Суффикс, "ЧГ=")].Защита   = Не ОтклАвтоРасчетЗначение;
	КонецЦикла;
	
	мФормаОтчета.Области["П000001162003"].ЦветФона = ЦветФонаЗначение;
	мФормаОтчета.Области["П000001162003"].Защита   = Не ОтклАвтоРасчетЗначение;
	мФормаОтчета.Области["П000001163003"].ЦветФона = ЦветФонаЗначение;
	мФормаОтчета.Области["П000001163003"].Защита   = Не ОтклАвтоРасчетЗначение;
	мФормаОтчета.Области["П000001163203"].ЦветФона = ЦветФонаЗначение;
	мФормаОтчета.Области["П000001163203"].Защита   = Не ОтклАвтоРасчетЗначение;
	мФормаОтчета.Области["П000001164003"].ЦветФона = ЦветФонаЗначение;
	мФормаОтчета.Области["П000001164003"].Защита   = Не ОтклАвтоРасчетЗначение;
	мФормаОтчета.Области["П000001165003"].ЦветФона = ЦветФонаЗначение;
	мФормаОтчета.Области["П000001165003"].Защита   = Не ОтклАвтоРасчетЗначение;
	мФормаОтчета.Области["П000001166003"].ЦветФона = ЦветФонаЗначение;
	мФормаОтчета.Области["П000001166003"].Защита   = Не ОтклАвтоРасчетЗначение;
	мФормаОтчета.Области["П000001169003"].ЦветФона = ЦветФонаЗначение;
	мФормаОтчета.Области["П000001169003"].Защита   = Не ОтклАвтоРасчетЗначение;
	мФормаОтчета.Области["П000001170003"].ЦветФона = ЦветФонаЗначение;
	мФормаОтчета.Области["П000001170003"].Защита   = Не ОтклАвтоРасчетЗначение;
	мФормаОтчета.Области["П000001172003"].ЦветФона = ЦветФонаЗначение;
	мФормаОтчета.Области["П000001172003"].Защита   = Не ОтклАвтоРасчетЗначение;
	мФормаОтчета.Области["П000001173003"].ЦветФона = ЦветФонаЗначение;
	мФормаОтчета.Области["П000001173003"].Защита   = Не ОтклАвтоРасчетЗначение;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьОтчет(Команда)
	
	ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Внимание! Будут очищены все показатели отчета.%1Продолжить операцию?'"), Символы.ПС);
	ОписаниеОповещения = Новый ОписаниеОповещения("ОчиститьОтчетЗавершение", ЭтотОбъект);
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьОтчетЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Нет Тогда        
		Возврат;        
	Иначе        
		Очистить();        
	КонецЕсли;
	
КонецПроцедуры

// Процедура очищает содержимое редактируемых и вычисляемых
// ячеек табличного документа.
//
&НаКлиенте
Процедура Очистить() Экспорт
	
	ОчиститьТабличноеПолеНаСервере();

	Модифицированность = Истина;

КонецПроцедуры

&НаСервере
Процедура ОчиститьТабличноеПолеНаСервере()
	
	// Список ячеек, которые очищать не нужно.
	Перем СписокПоказателейНеПодлежащихОчистке;

	ВыбТабличноеПоле = ПолеТабличногоДокументаФормаОтчета;
	
	СписокПоказателейНеПодлежащихОчистке = Новый СписокЗначений;
	СписокПоказателейНеПодлежащихОчистке.Добавить(ВыбТабличноеПоле.Области["ПериодОтчета"].Значение,             "ПериодОтчета");
	СписокПоказателейНеПодлежащихОчистке.Добавить(ВыбТабличноеПоле.Области["ДатаСоставленияОтчета"].Значение,    "ДатаСоставленияОтчета");
	СписокПоказателейНеПодлежащихОчистке.Добавить(ВыбТабличноеПоле.Области["ОргНазв"].Значение,                  "ОргНазв");
	СписокПоказателейНеПодлежащихОчистке.Добавить(ВыбТабличноеПоле.Области["ОргАдрес"].Значение,                 "ОргАдрес");
	СписокПоказателейНеПодлежащихОчистке.Добавить(ВыбТабличноеПоле.Области["ОргКодОКПО"].Значение,               "ОргКодОКПО");
	СписокПоказателейНеПодлежащихОчистке.Добавить(ВыбТабличноеПоле.Области["ОргКодНазв"].Значение,               "ОргКодНазв");
	СписокПоказателейНеПодлежащихОчистке.Добавить(ВыбТабличноеПоле.Области["ОргКодЗнач"].Значение,               "ОргКодЗнач");
	СписокПоказателейНеПодлежащихОчистке.Добавить(ВыбТабличноеПоле.Области["ОргКодНазв1"].Значение,              "ОргКодНазв1");
	СписокПоказателейНеПодлежащихОчистке.Добавить(ВыбТабличноеПоле.Области["ОргКодЗнач1"].Значение,              "ОргКодЗнач1");
	СписокПоказателейНеПодлежащихОчистке.Добавить(ВыбТабличноеПоле.Области["ОргДолжностьИсп"].Значение,          "ОргДолжностьИсп");
	СписокПоказателейНеПодлежащихОчистке.Добавить(ВыбТабличноеПоле.Области["ОргТелефонИсп"].Значение,            "ОргТелефонИсп");
	СписокПоказателейНеПодлежащихОчистке.Добавить(ВыбТабличноеПоле.Области["ОргИсполнитель"].Значение,           "ОргИсполнитель");
	СписокПоказателейНеПодлежащихОчистке.Добавить(ВыбТабличноеПоле.Области["ОргАдресЭлектроннойПочты"].Значение, "ОргАдресЭлектроннойПочты");
	СписокПоказателейНеПодлежащихОчистке.Добавить(ВыбТабличноеПоле.Области["НомерКорректировки"].Значение,       "НомерКорректировки");

	ВыбТабличноеПоле.Очистить();
	ВыбТабличноеПоле.Вывести(Отчеты[Сред(Лев(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, ".Форма.") - 1), 7)].ПолучитьМакет("ФормаОтчета2013Кв1_ФормаОтчета"));
	
	ПолеТабличногоДокументаФормаОтчета = ВыбТабличноеПоле;
	
	Для каждого ЭлементСписка Из СписокПоказателейНеПодлежащихОчистке Цикл
	
		ВыбТабличноеПоле.Области[ЭлементСписка.Представление].Значение = ЭлементСписка.Значение;
	
	КонецЦикла;
	
	УстановитьЗащитуИЦветФонаОбластейАвторассчитываемыхПоказателей();
	
КонецПроцедуры

&НаКлиенте
Процедура АктивизироватьЯчейку(Ячейка) Экспорт
	
	ИмяПоляТабличногоДокумента = "ПолеТабличногоДокументаФормаОтчета";
	
	НайденнаяОбласть = ЭтаФорма[ИмяПоляТабличногоДокумента].Области.Найти(Ячейка.ИмяЯчейки);
	
	Если НЕ НайденнаяОбласть = Неопределено Тогда
		
		Элементы[ИмяПоляТабличногоДокумента].ТекущаяОбласть = НайденнаяОбласть;
		
	ИначеЕсли Ячейка.СтрокаПП <> Неопределено И ЗначениеЗаполнено(Ячейка.СтрокаПП) Тогда
		
		НайденнаяОбласть = ЭтаФорма[ИмяПоляТабличногоДокумента].Области.Найти(Ячейка.ИмяЯчейки + Ячейка.СтрокаПП);
		
		Если НЕ НайденнаяОбласть = Неопределено Тогда
			
			Элементы[ИмяПоляТабличногоДокумента].ТекущаяОбласть = НайденнаяОбласть;
			
		Иначе
			
			НайденнаяОбласть = ЭтаФорма[ИмяПоляТабличногоДокумента].Области.Найти(Ячейка.ИмяЯчейки + "_" + Ячейка.СтрокаПП);
			
			Если НЕ НайденнаяОбласть = Неопределено Тогда
				
				Элементы[ИмяПоляТабличногоДокумента].ТекущаяОбласть = НайденнаяОбласть;
				
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		НайденнаяОбласть = ЭтаФорма[ИмяПоляТабличногоДокумента].Области.Найти(Ячейка.ИмяЯчейки + "1");
		
		Если НЕ НайденнаяОбласть = Неопределено Тогда
			
			Элементы[ИмяПоляТабличногоДокумента].ТекущаяОбласть = НайденнаяОбласть;
			
		Иначе
			
			НайденнаяОбласть = ЭтаФорма[ИмяПоляТабличногоДокумента].Области.Найти(Ячейка.ИмяЯчейки + "_1");
			
			Если НЕ НайденнаяОбласть = Неопределено Тогда
				
				Элементы[ИмяПоляТабличногоДокумента].ТекущаяОбласть = НайденнаяОбласть;
				
			Иначе
				
				Элементы[ИмяПоляТабличногоДокумента].ТекущаяОбласть = ЭтаФорма[ИмяПоляТабличногоДокумента].Область(Ячейка.ИмяЯчейки);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьБланк(Команда)
	
	Отказ = Ложь;
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("Команда", Команда);
	ОписаниеОповещения = Новый ОписаниеОповещения("ПоказатьБланкЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередПечатьюРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьБланкЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;

	Команда = ДополнительныеПараметры.Команда;
		
	Если Команда <> Неопределено Тогда
		Печать(Команда.Имя);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Печать(ВидПечати, НеИзФормыОтчета = Ложь) Экспорт
	
	Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1. Формируется печатная форма...'"), ЭтаФорма.Заголовок), , , БиблиотекаКартинок.Печать);
	
	Если НЕ ПечатьНаСервере(ВидПечати) Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ОткрытьФормуПредварительногоПросмотра(ЭтаФорма, ВидПечати, Неопределено, СтруктураРеквизитовФормы.СписокПечатаемыхЛистов);
	
КонецПроцедуры

&НаСервере
Функция ПечатьНаСервере(ВидПечати)
	
	Если НЕ РегламентированнаяОтчетность.ПринтерДоступен() Тогда
		
		Сообщение = Новый СообщениеПользователю;

		Сообщение.Текст = НСтр("ru='Перед формированием печатных форм необходимо определить в системе принтер и задать его в качестве используемого по умолчанию!'");

		Сообщение.Сообщить();
		
		Возврат Ложь;
		
	КонецЕсли;
	
	ТабличныйДокумент = ЭтаФорма["ПолеТабличногоДокументаФормаОтчета"];
	
	СтруктураРеквизитовФормы.мПечатныеФормы.Очистить();
	
	ОбщиеРеквизитыРазделов = Новый Структура;
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("НаименованиеЛиста",  "Форма 4-ТЭР");
	СтруктураПараметров.Вставить("ОриентацияЛиста",    "Ландшафт");
	СтруктураПараметров.Вставить("ИмяСтраницы",        "4ТЭР");
	Структурапараметров.Вставить("ИмяОбластиТаблПоля", "ПолеТабличногоДокументаФормаОтчета");
	СтруктураПараметров.Вставить("ВидПечати",          ВидПечати);
	
	РегламентированнаяОтчетность.ВывестиНаПечатьЛистОбщая(ЭтаФорма.Заголовок, СтруктураПараметров, ТабличныйДокумент, СтруктураРеквизитовФормы.мПечатныеФормы);
	РегламентированнаяОтчетность.УдалитьНомерКорректировки(СтруктураРеквизитовФормы.мПечатныеФормы[0].Значение);
	РегламентированнаяОтчетностьКлиентСервер.ПроставлениеНомеровЛистов(ЭтаФорма, , СтруктураРеквизитовФормы.СписокПечатаемыхЛистов);
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Процедура СформироватьСпискиВыбора()
	
	МакетСоставаПоказателей = Отчеты[Сред(Лев(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, ".Форма.") - 1), 7)].ПолучитьМакет("Списки2013Кв1");
	
	КоллекцияСписковВыбора = Новый Соответствие;
	Для Каждого Область Из МакетСоставаПоказателей.Области Цикл
		Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Строки Тогда
			ВерхОбласти = Область.Верх;
			НизОбласти = Область.Низ;
			ТаблСписка = Новый ТаблицаЗначений;
			ТаблСписка.Колонки.Добавить("Код",,, МакетСоставаПоказателей.Область(ВерхОбласти, 1, ВерхОбласти, 1).ШиринаКолонки);
			ТаблСписка.Колонки.Добавить("Название",,, МакетСоставаПоказателей.Область(ВерхОбласти, 2, ВерхОбласти, 2).ШиринаКолонки);
			Для НомСтр = ВерхОбласти По НизОбласти Цикл
				КодПоказателя = СокрП(МакетСоставаПоказателей.Область(НомСтр, 1).Текст);
				Если КодПоказателя <> "###" Тогда
					НовСтрока = ТаблСписка.Добавить();
					НовСтрока.Код = КодПоказателя;
					НовСтрока.Название = СокрП(МакетСоставаПоказателей.Область(НомСтр, 2).Текст);
				КонецЕсли;
			КонецЦикла;
			КоллекцияСписковВыбора.Вставить(Область.Имя, ТаблСписка);
		КонецЕсли;
	КонецЦикла;
	
	СвойстваПоказателей.Очистить();
	
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "Уголь",  254, , "Выбор угля по бассейнам и месторождениям", КоллекцияСписковВыбора["СправочникУгля"]);
	
КонецПроцедуры

&НаКлиенте
Процедура ВвестиПоказатель(Элемент, Область, КодПоказателя, Знач ЭтоСумма, Знач ТекстВыбора, ТаблицаВыбора, СтандартнаяОбработка, КолонкаПоиска = "Код") Экспорт
	
	Если ТаблицаВыбора = Неопределено ИЛИ СтруктураРеквизитовФормы.мАвтоВыборКодов Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	Суффикс = Сред(Область.Имя, 15);
	
	ИсходноеЗначение = ПолеТабличногоДокументаФормаОтчета.Области.Найти("П000001116012_" + Суффикс).Значение;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Заголовок",          ТекстВыбора);
	ПараметрыФормы.Вставить("ТаблицаЗначений",    ТаблицаВыбора);
	ПараметрыФормы.Вставить("СтруктураДляПоиска", Новый Структура(КолонкаПоиска, ИсходноеЗначение));
	
	ДополнительныеПараметры = Новый Структура("Суффикс", Суффикс);
	ОписаниеОповещения = Новый ОписаниеОповещения("ВвестиПоказательЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ОткрытьФорму("Обработка.ОбщиеОбъектыРеглОтчетности.Форма.ФормаВыбораЗначенияИзТаблицы", ПараметрыФормы, ЭтаФорма,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ВвестиПоказательЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	Суффикс = ДополнительныеПараметры.Суффикс;
	
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВыборНазвание = Строка(РезультатВыбора["Название"]);
	ВыборКод      = Строка(РезультатВыбора["Код"]);
	
	ПолеТабличногоДокументаФормаОтчета.Области.Найти("П000001116011_" + Суффикс).Значение = ?(ЗначениеЗаполнено(ВыборКод), ВыборНазвание, "");
	ПолеТабличногоДокументаФормаОтчета.Области.Найти("П000001116012_" + Суффикс).Значение = ВыборКод;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайла(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузитьИзФайлаЗавершение", ЭтотОбъект);
	
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередЗагрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура Выгрузить(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьЗавершение", ЭтотОбъект);

	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайлаЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ЗагрузитьИзФайлаОтчет();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайлаОтчет() Экспорт
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузитьИзФайлаОтчетЗавершение", ЭтотОбъект);
	
	Если Модифицированность Тогда
		СохранитьНаКлиенте(,ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайлаОтчетЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	РегламентированнаяОтчетностьЗагрузкаКлиент.ЗагрузитьИзФайлаОтчет(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Функция ЗагрузкаОтчетаИзФайла(ДанныеДляЗагрузки) Экспорт
	
	Если Модифицированность Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = СтрШаблон(НСтр("ru='Отчет ""%1"" не сохранен.'"), ЭтотОбъект.Заголовок);
		Сообщение.Сообщить();
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ ЗагрузкаОтчетаИзФайлаНаСервере(ДанныеДляЗагрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
		
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция ЗагрузкаОтчетаИзФайлаНаСервере(ДанныеДляЗагрузки)
	
	РегламентированнаяОтчетность.СформироватьСтруктуруПоказателей(ЭтаФорма);
	
	ПараметрыОтчета = СформироватьСтруктуруПараметров();
	
	ДеревоДляЗагрузки = РегламентированнаяОтчетность.ПолучитьДеревоВыгрузки(ЭтаФорма, "СхемаВыгрузкиXML2013Кв1");
	
	Если НЕ РегламентированнаяОтчетностьЗагрузка.ЗагрузкаОтчетаИзФайла(
		ЭтотОбъект, ПараметрыОтчета, ДанныеДляЗагрузки, ДеревоДляЗагрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура ВыгрузитьЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьИзФормыПослеСохраненияЗавершение", ЭтотОбъект);
	Если Модифицированность Тогда
		СохранитьНаКлиенте(, ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьИзФормыПослеСохраненияЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ПараметрыВыгрузки = Неопределено;
	ТекстВыгрузки = Неопределено;
	Если НЕ УниверсальнаяВыгрузкаXMLПроверкаВозможностиВыгрузкиНаСервере(ТекстВыгрузки, ПараметрыВыгрузки) Тогда
		ТекстВопроса = НСтр("ru='В ходе выгрузки были найдены ошибки.'");
		КнопкиВопроса = Новый СписокЗначений;
		КнопкиВопроса.Добавить(КодВозвратаДиалога.Да, "Продолжить выгрузку");
		КнопкиВопроса.Добавить(КодВозвратаДиалога.Нет, "Показать ошибки");
		ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьИзФормыЗавершение", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, КнопкиВопроса, , КодВозвратаДиалога.Нет);
	Иначе
		ВыгрузитьОтчет();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьИзФормыЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ВыгрузитьОтчет(Истина);
	Иначе
		СпДокОсн = Новый СписокЗначений;
		СпДокОсн.Добавить(СтруктураРеквизитовФормы.мСохраненныйДок);
		ОшибкиОтчета = Новый Массив;
		РегламентированнаяОтчетностьКлиент.ПроверитьРегламентированныеОтчеты(СпДокОсн, ОшибкиОтчета);
		РегламентированнаяОтчетностьКлиент.ОткрытьФормуНавигацииПоОшибкамВыгрузки(ОшибкиОтчета);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузку(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьВыгрузкуЗавершение", ЭтотОбъект);

	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
		
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузкуЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПроверитьВыгрузкуОтчета();
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузкуОтчета()
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьВыгрузкуОтчетаЗавершение", ЭтотОбъект);
	
	Если НЕ ЗначениеЗаполнено(СтруктураРеквизитовФормы.Организация) Тогда
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Организация не выбрана! Выгрузка невозможна.'");
		Сообщение.Сообщить();
		Возврат;
		
	КонецЕсли;
	
	Если Модифицированность Тогда
		СохранитьНаКлиенте(,ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура ПроверитьВыгрузкуОтчетаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ФормаВыгрузкиРеглОтчета = ПолучитьФорму("Документ.ВыгрузкаРегламентированныхОтчетов.Форма.ФормаДокумента", , ЭтаФорма);
	
	СпДокОсн = Новый СписокЗначений;
	СпДокОсн.Добавить(СтруктураРеквизитовФормы.мСохраненныйДок);
	
	ФормаВыгрузкиРеглОтчета.Проверить(СпДокОсн);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьОтчет(ВыгружатьСОшибками = Ложь) Экспорт
	
	ДополнительныеПараметры = Новый Структура("ВыгружатьСОшибками", ВыгружатьСОшибками);
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьОтчетЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	Если Модифицированность Тогда
		СохранитьНаКлиенте(, ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура ВыгрузитьОтчетЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ФормаВыгрузкиРеглОтчета = ПолучитьФорму("Документ.ВыгрузкаРегламентированныхОтчетов.Форма.ФормаДокумента", , ЭтаФорма);
	
	СпДокОсн = Новый СписокЗначений;
	СпДокОсн.Добавить(СтруктураРеквизитовФормы.мСохраненныйДок);
	
	ФормаВыгрузкиРеглОтчета.СформироватьИЗаписать(СпДокОсн,,,,,,,,,ДополнительныеПараметры.ВыгружатьСОшибками);
	
КонецПроцедуры

&НаСервере
Функция ПроверитьПоказатели() Экспорт
	
	РегламентированнаяОтчетность.СформироватьСтруктуруПоказателей(ЭтаФорма);
	ДеревоВыгрузки = РегламентированнаяОтчетность.ПолучитьДеревоВыгрузки(ЭтаФорма, "СхемаВыгрузкиXML2013Кв1");
	ПараметрыВыгрузки = СформироватьСтруктуруПараметров();
	КоллекцияСписковВыбора = "";
	Если НЕ ПроверитьВозможностьВыгрузки(ПараметрыВыгрузки, ДеревоВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	ЗаполнитьДанными(ДеревоВыгрузки, ПараметрыВыгрузки);
	Если НЕ РегламентированнаяОтчетность.ПроверитьДанные(ЭтаФорма, ДеревоВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция ТекущийФорматВыгрузки(Организация)
	
	Возврат РегламентированнаяОтчетность.ФорматВыгрузкиСтатистическойОтчетностиВЭлектронномВиде(Организация);
	
КонецФункции

&НаКлиенте
Функция УниверсальнаяВыгрузка(ТекстВыгрузки = Неопределено, ПроверятьБлокировки = Истина, ИмяФайлаВыгрузки = "", ВыгружатьСОшибками = Ложь) Экспорт
	
	Перем ПараметрыВыгрузки;
	
	Если ТекущийФорматВыгрузки(СтруктураРеквизитовФормы.Организация) = Неопределено Тогда
		РегламентированнаяОтчетностьКлиент.ПоказатьФормуНастроекФорматаВыгрузкиСтатистическойОтчетностиВЭлектронномВиде(
			СтруктураРеквизитовФормы.Организация, Ложь, Истина);
			
		Возврат "НеВыбранФормат";
	КонецЕсли;
	
	Если Модифицированность Тогда
		
		Если СтрНайти(Заголовок, СтруктураРеквизитовФормы.СтрПериодОтчета) = 0 Тогда
			ТекстЗаголовка = Заголовок + " за " + СтруктураРеквизитовФормы.СтрПериодОтчета;
		Иначе
			ТекстЗаголовка = Заголовок;
		КонецЕсли;
		
		ОргСтр = " (" + СтруктураРеквизитовФормы.НаимОрганизации + ")";
		Если СтрНайти(Заголовок, ОргСтр) = 0 Тогда
			ТекстЗаголовка = ТекстЗаголовка + ОргСтр;
		КонецЕсли;
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Отчет """ + ТекстЗаголовка + """ не сохранен.";
		Сообщение.Сообщить();
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Если НЕ ВыгружатьСОшибками И НЕ УниверсальнаяВыгрузкаXMLПроверкаВозможностиВыгрузкиНаСервере(ТекстВыгрузки, ПараметрыВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ УниверсальнаяВыгрузкаXMLПроверкаДанныхНаСервере(ТекстВыгрузки, ПараметрыВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ИмяФайлаВыгрузки = ПараметрыВыгрузки.ИмяФайла;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция УниверсальнаяВыгрузкаXMLПроверкаВозможностиВыгрузкиНаСервере(ТекстВыгрузки, ПараметрыВыгрузки) Экспорт
	
	РегламентированнаяОтчетность.СформироватьСтруктуруПоказателей(ЭтаФорма);
	ПараметрыВыгрузки = СформироватьСтруктуруПараметров();
	ДеревоВыгрузки = РегламентированнаяОтчетность.ПолучитьДеревоВыгрузки(ЭтаФорма, "СхемаВыгрузкиXML2013Кв1");
	Если НЕ ПроверитьВозможностьВыгрузки(ПараметрыВыгрузки, ДеревоВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция УниверсальнаяВыгрузкаXMLПроверкаДанныхНаСервере(ТекстВыгрузки, ПараметрыВыгрузки) Экспорт
	
	РегламентированнаяОтчетность.СформироватьСтруктуруПоказателей(ЭтаФорма);
	ПараметрыВыгрузки = СформироватьСтруктуруПараметров();
	ДеревоВыгрузки = РегламентированнаяОтчетность.ПолучитьДеревоВыгрузки(ЭтаФорма, "СхемаВыгрузкиXML2013Кв1");
	ЗаполнитьДанными(ДеревоВыгрузки, ПараметрыВыгрузки);
	Если НЕ РегламентированнаяОтчетность.ПроверитьДанные(ЭтаФорма, ДеревоВыгрузки) Тогда
		КоллекцияСписковВыбора = "";
		Возврат Ложь;
	КонецЕсли;
	
	ТекстВыгрузки = РегламентированнаяОтчетность.ВыгрузитьДеревоВXML(ДеревоВыгрузки, ПараметрыВыгрузки);
	
	КоллекцияСписковВыбора = "";
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция ПроверитьВозможностьВыгрузки(ПараметрыВыгрузки, ДеревоВыгрузки)
	
	СтатусПроверки = Истина;
	
	ИмяПоляТаблДокумента = "ПолеТабличногоДокументаФормаОтчета";
	
	// Проверка показателей раздела.
	Если ПустаяСтрока(ПараметрыВыгрузки.ОКПО) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма,
			"Не задан код ОКПО организации!",
			ИмяПоляТаблДокумента, "ОргКодОКПО");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ПустаяСтрока(ПараметрыВыгрузки.ОргНазв) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма,
			"Не задано наименование организации!",
			ИмяПоляТаблДокумента, "ОргНазв");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ПустаяСтрока(ПараметрыВыгрузки.ОргИсполнитель) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма,
			"Не указаны Ф.И.О. должностного лица, ответственного за предоставление статистической информации!",
			ИмяПоляТаблДокумента, "ОргИсполнитель");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ПустаяСтрока(ПараметрыВыгрузки.ОргДолжностьИсп) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма,
			"Не указана должность лица, ответственного за предоставление статистической информации!",
			ИмяПоляТаблДокумента, "ОргДолжностьИсп");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ПустаяСтрока(ПараметрыВыгрузки.ОргТелефонИсп) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма,
			"Не указан телефон должностного лица, ответственного за предоставление статистической информации!",
			ИмяПоляТаблДокумента, "ОргТелефонИсп");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	// Проверка на незаполненный отчет.
	Если НЕ РегламентированнаяОтчетность.ПроверитьРазделыНаНаличиеИнформации(ЭтаФорма, ДеревоВыгрузки, "ПолеТабличногоДокументаФормаОтчета") Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма,
			"Не заполнены Разделы отчета!",
			ИмяПоляТаблДокумента, "");
		СтатусПроверки = Ложь;
		Возврат СтатусПроверки;
	КонецЕсли;
	
	// КОНТРОЛЬ показателей формы (Указания по заполнению Формы 4-ТЭР).
	// По разделу 1.
	// Сумма данных всех строк, кроме 1012, 1032, 1082, 1092, 1151, 1161, 1621, 1631, 1750-1753,
	// по графам 1 и 2 должна быть равна сумме данных граф 3, 8, 9 и 10 по соответствующим строкам.
	Проверка1Условия4ТЭР(ПараметрыВыгрузки, ИмяПоляТаблДокумента, "1001", СтатусПроверки);
	Проверка1Условия4ТЭР(ПараметрыВыгрузки, ИмяПоляТаблДокумента, "1010", СтатусПроверки);
	Проверка1Условия4ТЭР(ПараметрыВыгрузки, ИмяПоляТаблДокумента, "1020", СтатусПроверки);
	Проверка1Условия4ТЭР(ПараметрыВыгрузки, ИмяПоляТаблДокумента, "1030", СтатусПроверки);
	Проверка1Условия4ТЭР(ПараметрыВыгрузки, ИмяПоляТаблДокумента, "1040", СтатусПроверки);
	Проверка1Условия4ТЭР(ПараметрыВыгрузки, ИмяПоляТаблДокумента, "1050", СтатусПроверки);
	Проверка1Условия4ТЭР(ПараметрыВыгрузки, ИмяПоляТаблДокумента, "1060", СтатусПроверки);
	Проверка1Условия4ТЭР(ПараметрыВыгрузки, ИмяПоляТаблДокумента, "1071", СтатусПроверки);
	Проверка1Условия4ТЭР(ПараметрыВыгрузки, ИмяПоляТаблДокумента, "1072", СтатусПроверки);
	Проверка1Условия4ТЭР(ПараметрыВыгрузки, ИмяПоляТаблДокумента, "1073", СтатусПроверки);
	Проверка1Условия4ТЭР(ПараметрыВыгрузки, ИмяПоляТаблДокумента, "1080", СтатусПроверки);
	Проверка1Условия4ТЭР(ПараметрыВыгрузки, ИмяПоляТаблДокумента, "1090", СтатусПроверки);
	Проверка1Условия4ТЭР(ПараметрыВыгрузки, ИмяПоляТаблДокумента, "1100", СтатусПроверки, Ложь, , Ложь);
	Проверка1Условия4ТЭР(ПараметрыВыгрузки, ИмяПоляТаблДокумента, "1110", СтатусПроверки, Ложь, , Ложь);
	Проверка1Условия4ТЭР(ПараметрыВыгрузки, ИмяПоляТаблДокумента, "1120", СтатусПроверки, Ложь, , Ложь);
	Проверка1Условия4ТЭР(ПараметрыВыгрузки, ИмяПоляТаблДокумента, "1130", СтатусПроверки, Ложь, , Ложь);
	Проверка1Условия4ТЭР(ПараметрыВыгрузки, ИмяПоляТаблДокумента, "1140", СтатусПроверки, Ложь, , Ложь);
	Проверка1Условия4ТЭР(ПараметрыВыгрузки, ИмяПоляТаблДокумента, "1150", СтатусПроверки);
	Проверка1Условия4ТЭР(ПараметрыВыгрузки, ИмяПоляТаблДокумента, "1160", СтатусПроверки);
	Проверка1Условия4ТЭР(ПараметрыВыгрузки, ИмяПоляТаблДокумента, "1620", СтатусПроверки);
	Проверка1Условия4ТЭР(ПараметрыВыгрузки, ИмяПоляТаблДокумента, "1630", СтатусПроверки);
	Проверка1Условия4ТЭР(ПараметрыВыгрузки, ИмяПоляТаблДокумента, "1632", СтатусПроверки);
	Проверка1Условия4ТЭР(ПараметрыВыгрузки, ИмяПоляТаблДокумента, "1640", СтатусПроверки);
	Проверка1Условия4ТЭР(ПараметрыВыгрузки, ИмяПоляТаблДокумента, "1650", СтатусПроверки);
	Проверка1Условия4ТЭР(ПараметрыВыгрузки, ИмяПоляТаблДокумента, "1660", СтатусПроверки);
	Проверка1Условия4ТЭР(ПараметрыВыгрузки, ИмяПоляТаблДокумента, "1690", СтатусПроверки);
	Проверка1Условия4ТЭР(ПараметрыВыгрузки, ИмяПоляТаблДокумента, "1700", СтатусПроверки);
	Проверка1Условия4ТЭР(ПараметрыВыгрузки, ИмяПоляТаблДокумента, "1720", СтатусПроверки, , Ложь, );
	Проверка1Условия4ТЭР(ПараметрыВыгрузки, ИмяПоляТаблДокумента, "1730", СтатусПроверки);
	Для НомСуффикса = 1 По 9 Цикл
		Если Не (ПараметрыВыгрузки["ПР00001116001_" + Формат(НомСуффикса, "ЧГ=")] + ПараметрыВыгрузки["ПР00001116002_" + Формат(НомСуффикса, "ЧГ=")] =
				 ПараметрыВыгрузки["ПР00001116003_" + Формат(НомСуффикса, "ЧГ=")] + ПараметрыВыгрузки["ПР00001116008_" + Формат(НомСуффикса, "ЧГ=")]
			   + ПараметрыВыгрузки["ПР00001116009_" + Формат(НомСуффикса, "ЧГ=")] + ПараметрыВыгрузки["ПР00001116010_" + Формат(НомСуффикса, "ЧГ=")]) Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма,
					"Не выполнено условие контроля: в строке " + ПараметрыВыгрузки["ПР00001116012_" + Формат(НомСуффикса, "ЧГ=")] + " сумма данных по графам 1 и 2 должна быть равна сумме данных по графам 3, 8, 9 и 10!",
					ИмяПоляТаблДокумента, "П000001116001_" + Формат(НомСуффикса, "ЧГ="));
				СтатусПроверки = Ложь;
		КонецЕсли;
	КонецЦикла;
	// Данные строки 1010 по графе 3 должны быть больше или равны данным строки 1012 по соответствующей графе.
	Если Не (ПараметрыВыгрузки["ПР00001101003"] >= ПараметрыВыгрузки["ПР00001101203"]) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма,
			"Не выполнено условие контроля: данные строки 1010 по графе 3 должны быть больше или равны данным строки 1012 по графе 3!",
			ИмяПоляТаблДокумента, "П000001101003");
		СтатусПроверки = Ложь;
	КонецЕсли;
	// Данные строки 1030 по графе 3 должны быть больше или равны данным строки 1032 по соответствующей графе.
	Если Не (ПараметрыВыгрузки["ПР00001103003"] >= ПараметрыВыгрузки["ПР00001103203"]) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма,
			"Не выполнено условие контроля: данные строки 1030 по графе 3 должны быть больше или равны данным строки 1032 по графе 3!",
			ИмяПоляТаблДокумента, "П000001103003");
		СтатусПроверки = Ложь;
	КонецЕсли;
	// Данные строки 1080 по графе 3 должны быть больше или равны данным строки 1082 по соответствующей графе.
	Если Не (ПараметрыВыгрузки["ПР00001108003"] >= ПараметрыВыгрузки["ПР00001108203"]) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма,
			"Не выполнено условие контроля: данные строки 1080 по графе 3 должны быть больше или равны данным строки 1082 по графе 3!",
			ИмяПоляТаблДокумента, "П000001108003");
		СтатусПроверки = Ложь;
	КонецЕсли;
	// Данные строки 1090 по графе 3 должны быть больше или равны данным строки 1092 по соответствующей графе.
	Если Не (ПараметрыВыгрузки["ПР00001109003"] >= ПараметрыВыгрузки["ПР00001109203"]) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма,
			"Не выполнено условие контроля: данные строки 1090 по графе 3 должны быть больше или равны данным строки 1092 по графе 3!",
			ИмяПоляТаблДокумента, "П000001109003");
		СтатусПроверки = Ложь;
	КонецЕсли;
	// Данные строки 1150 по графе 3 должны быть больше или равны данным строки 1151 по соответствующей графе.
	Если Не (ПараметрыВыгрузки["ПР00001115003"] >= ПараметрыВыгрузки["ПР00001115103"]) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма,
			"Не выполнено условие контроля: данные строки 1150 по графе 3 должны быть больше или равны данным строки 1151 по графе 3!",
			ИмяПоляТаблДокумента, "П000001115003");
		СтатусПроверки = Ложь;
	КонецЕсли;
	// Данные строки 1750 по графе 3 должны быть больше или равны сумме данных строк 1751, 1752 и 1753 по соответствующей графе.
	Если Не (ПараметрыВыгрузки["ПР00001175003"] >= (ПараметрыВыгрузки["ПР00001175103"] + ПараметрыВыгрузки["ПР00001175203"] + ПараметрыВыгрузки["ПР00001175303"])) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма,
			"Не выполнено условие контроля: данные строки 1750 по графе 3 должны быть больше или равны сумме данных строк 1751, 1752 и 1753 по графе 3!",
			ИмяПоляТаблДокумента, "П000001175003");
		СтатусПроверки = Ложь;
	КонецЕсли;
	// По разделу 2.
	// Сумма данных строк по графам 1 и 2 должна быть равна сумме данных строк по графам 3-8.
	Проверка2Условия4ТЭР(ПараметрыВыгрузки, ИмяПоляТаблДокумента, "1800", СтатусПроверки);
	Проверка2Условия4ТЭР(ПараметрыВыгрузки, ИмяПоляТаблДокумента, "1810", СтатусПроверки);
	Проверка2Условия4ТЭР(ПараметрыВыгрузки, ИмяПоляТаблДокумента, "1820", СтатусПроверки);
	Проверка2Условия4ТЭР(ПараметрыВыгрузки, ИмяПоляТаблДокумента, "1830", СтатусПроверки);
	// По разделу 4.
	// Данные строк 1890-1895 по графе 1 должны быть больше или равны данным указанных строк по графе 2.
	// Данные строк 1890-1895 по графе 2 должны быть больше или равны данным указанных строк по графе 3.
	Для НомСтр = 1890 По 1895 Цикл
		Если Не (ПараметрыВыгрузки["ПР00004" + Формат(НомСтр, "ЧЦ=4; ЧВН=; ЧГ=") + "01"] >= ПараметрыВыгрузки["ПР00004" + Формат(НомСтр, "ЧЦ=4; ЧВН=; ЧГ=") + "02"]) Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма,
				"Не выполнено условие контроля: в строке " + Формат(НомСтр, "ЧЦ=4; ЧВН=; ЧГ=") + " данные по графе 1 должны быть больше или равны данным по графе 2!",
				ИмяПоляТаблДокумента, "П000004" + Формат(НомСтр, "ЧЦ=4; ЧВН=; ЧГ=") + "01");
			СтатусПроверки = Ложь;
		КонецЕсли;
		Если Не (ПараметрыВыгрузки["ПР00004" + Формат(НомСтр, "ЧЦ=4; ЧВН=; ЧГ=") + "02"] >= ПараметрыВыгрузки["ПР00004" + Формат(НомСтр, "ЧЦ=4; ЧВН=; ЧГ=") + "03"]) Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма,
				"Не выполнено условие контроля: в строке " + Формат(НомСтр, "ЧЦ=4; ЧВН=; ЧГ=") + " данные по графе 2 должны быть больше или равны данным по графе 3!",
				ИмяПоляТаблДокумента, "П000004" + Формат(НомСтр, "ЧЦ=4; ЧВН=; ЧГ=") + "02");
			СтатусПроверки = Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат СтатусПроверки;
	
КонецФункции

&НаСервере
Процедура Проверка1Условия4ТЭР(ПараметрыВыгрузки, ИмяПоляТаблДокумента, НомСтр, СтатусПроверки, Графа1СодержитЗначение = Истина, Графа9СодержитЗначение = Истина, Графа10СодержитЗначение = Истина)
	
	ЛеваяЧастьРавенства  = 0;
	ПраваяЧастьРавенства = 0;
	
	ЛеваяЧастьРавенства  = ЛеваяЧастьРавенства
						 + ?(Графа1СодержитЗначение,  ПараметрыВыгрузки["ПР00001" + НомСтр + "01"], 0)
						 +							  ПараметрыВыгрузки["ПР00001" + НомСтр + "02"];
	ПраваяЧастьРавенства = ПраваяЧастьРавенства
						 +							  ПараметрыВыгрузки["ПР00001" + НомСтр + "03"]
						 +							  ПараметрыВыгрузки["ПР00001" + НомСтр + "08"]
						 + ?(Графа9СодержитЗначение,  ПараметрыВыгрузки["ПР00001" + НомСтр + "09"], 0)
						 + ?(Графа10СодержитЗначение, ПараметрыВыгрузки["ПР00001" + НомСтр + "10"], 0);
	
	Если Не (ЛеваяЧастьРавенства = ПраваяЧастьРавенства) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма,
			"Не выполнено условие контроля: в строке " + НомСтр + " сумма данных по графам 1 и 2 должна быть равна сумме данных по графам 3, 8, 9 и 10!",
			ИмяПоляТаблДокумента, "П000001" + НомСтр + ?(Графа1Содержитзначение, "01", "02"));
		СтатусПроверки = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура Проверка2Условия4ТЭР(ПараметрыВыгрузки, ИмяПоляТаблДокумента, НомСтр, СтатусПроверки)
	
	ЛеваяЧастьРавенства  = 0;
	ПраваяЧастьРавенства = 0;
	
	ЛеваяЧастьРавенства  = ЛеваяЧастьРавенства
						 + ПараметрыВыгрузки["ПР00002" + НомСтр + "01"]
						 + ПараметрыВыгрузки["ПР00002" + НомСтр + "02"];
	ПраваяЧастьРавенства = ПраваяЧастьРавенства
						 + ПараметрыВыгрузки["ПР00002" + НомСтр + "03"]
						 + ПараметрыВыгрузки["ПР00002" + НомСтр + "04"]
						 + ПараметрыВыгрузки["ПР00002" + НомСтр + "05"]
						 + ПараметрыВыгрузки["ПР00002" + НомСтр + "06"]
						 + ПараметрыВыгрузки["ПР00002" + НомСтр + "07"]
						 + ПараметрыВыгрузки["ПР00002" + НомСтр + "08"];
	
	Если Не (ЛеваяЧастьРавенства = ПраваяЧастьРавенства) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма,
			"Не выполнено условие контроля: в строке " + НомСтр + " сумма данных по графам 1 и 2 должна быть равна сумме данных по графам 3-8!",
			ИмяПоляТаблДокумента, "П000002" + НомСтр + "01");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанными(ДеревоВыгрузки, ПараметрыВыгрузки)
	
	РегламентированнаяОтчетность.ОбработатьУсловныеЭлементы(ЭтаФорма, ПараметрыВыгрузки, ДеревоВыгрузки); // формируем точную структуру XML-макета
	ЗаполнитьДаннымиУзел(ПараметрыВыгрузки, ДеревоВыгрузки); // заполняем дерево данными
	РегламентированнаяОтчетность.ОтсечьНезаполненныеНеобязательныеУзлыСтатистики(ДеревоВыгрузки);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДаннымиУзел(ПараметрыВыгрузки, Узел, НомерСтроки = Неопределено)
	
	СтрокиУзла = Новый Массив;
	Для Каждого Стр Из Узел.Строки Цикл
		СтрокиУзла.Добавить(Стр);
	КонецЦикла;
	
	Для Каждого Стр из СтрокиУзла Цикл
		
		Если ПустаяСтрока(Стр.ЗначениеПоУмолчанию) Тогда
			Если НЕ ПустаяСтрока(Стр.Ключ) Тогда
				ПолныйКодПоказателя = Стр.Ключ + ?(ЗначениеЗаполнено(НомерСтроки), "_" + Формат(НомерСтроки, "ЧГ="), "");
				ЗначениеПоказателя = Неопределено;
				Если ПараметрыВыгрузки.Свойство(ПолныйКодПоказателя, ЗначениеПоказателя) Тогда
					ФорматПредставленияНуля = Неопределено;
					Если ПараметрыВыгрузки.Свойство("ЧН" + ПолныйКодПоказателя, ФорматПредставленияНуля) Тогда
						РегламентированнаяОтчетность.ВывестиПоказательСтатистикиВXML(Стр, ЗначениеПоказателя, ФорматПредставленияНуля);
					Иначе
						РегламентированнаяОтчетность.ВывестиПоказательСтатистикиВXML(Стр, ЗначениеПоказателя);
					КонецЕсли;
				Иначе
					РегламентированнаяОтчетность.ВывестиПоказательСтатистикиВXML(Стр, "");
				КонецЕсли;
			Иначе
				Стр.Значение = "";
			КонецЕсли;
		ИначеЕсли Лев(Стр.ЗначениеПоУмолчанию, 1) = "&" Тогда
			РегламентированнаяОтчетность.ВывестиПоказательСтатистикиВXML(Стр, ПараметрыВыгрузки[Сред(Стр.ЗначениеПоУмолчанию, 2)]);
		Иначе
			Стр.Значение = Стр.ЗначениеПоУмолчанию;
			Если НЕ ПустаяСтрока(Стр.Ключ) Тогда
				ПолныйКодПоказателя = Стр.Ключ + ?(ЗначениеЗаполнено(НомерСтроки), "_" + Формат(НомерСтроки, "ЧГ="), "");
				ЗначениеПоказателя = Неопределено;
				Если ПараметрыВыгрузки.Свойство(ПолныйКодПоказателя, ЗначениеПоказателя) Тогда
					ФорматПредставленияНуля = Неопределено;
					Если ПараметрыВыгрузки.Свойство("ЧН" + ПолныйКодПоказателя, ФорматПредставленияНуля) Тогда
						РегламентированнаяОтчетность.ВывестиПоказательСтатистикиВXML(Стр, ЗначениеПоказателя, ФорматПредставленияНуля);
					Иначе
						РегламентированнаяОтчетность.ВывестиПоказательСтатистикиВXML(Стр, ЗначениеПоказателя);
					КонецЕсли;
				Иначе
					РегламентированнаяОтчетность.ВывестиПоказательСтатистикиВXML(Стр, "");
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если Стр.Тип = "С" ИЛИ Стр.Тип = "C" Тогда // учтем оба варианта: кириллицу и латиницу
			Если Стр.Многострочность И Стр.Код = ПараметрыВыгрузки.ИмяКлючевогоУзлаСодержательнойЧасти Тогда
				НомСтр = 1;
				ПодчиненныйЭлемент = РегламентированнаяОтчетность.ПолучитьПервыйПодчиненныйУзелСЗаполненнымКлючом(Стр);
				КлючПодчиненногоЭлемента = ПодчиненныйЭлемент.Ключ;
				Пока РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(ПараметрыВыгрузки, КлючПодчиненногоЭлемента + "_" + Формат(НомСтр, "ЧГ=")) Цикл
					УзелСоответствующийСтроке = РегламентированнаяОтчетность.СкопироватьУзел(Узел, Стр);
					ЗаполнитьДаннымиУзел(ПараметрыВыгрузки, УзелСоответствующийСтроке, НомСтр);
					НомСтр = НомСтр + 1;
				КонецЦикла;
			Иначе
				ЗаполнитьДаннымиУзел(ПараметрыВыгрузки, Стр, НомерСтроки);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция СформироватьИмяФайла(ПараметрыВыгрузки, ДопАтрибуты)
	
	Перем ПолученноеЗначение;
	
	КодОКУД        = ДопАтрибуты.OKUD;
	КодФормы       = ДопАтрибуты.idf;
	Периодичность  = ДопАтрибуты.idp;
	КодОКПО        = ПараметрыВыгрузки.ОКПО;
	РасчетныйГод   = ПараметрыВыгрузки.РасчПериод;
	ОтчетныйПериод = ПараметрыВыгрузки.ОтчПериод;
	
	ПараметрыВыгрузки.Свойство("ОКФС", ПолученноеЗначение);
	КодОКФС = ПолученноеЗначение;
	ПараметрыВыгрузки.Свойство("ОКВЭД", ПолученноеЗначение);
	КодОКВЭД = СтрЗаменить(ПолученноеЗначение, ".", "-");
	
	// Преобразование кодов - составляющих имени файла.
	КодыИФ = Новый Структура;
	КодыИФ.Вставить("Документ",       СтруктураРеквизитовФормы.мСохраненныйДок);
	КодыИФ.Вставить("КодФормы",       КодФормы);
	КодыИФ.Вставить("Периодичность",  Периодичность);
	КодыИФ.Вставить("ОтчетныйПериод", ОтчетныйПериод);
	КодыИФ.Вставить("ДатаВыгрузки",   "");
	
	РегламентированнаяОтчетность.КодыДляИмениФайлаВФорматеВыгрузки(КодыИФ);
	
	// Формирование имени файла, в зависимости
	// от формата выгрузки статотчетности.
	Если ПустаяСтрока(КодыИФ.ДатаВыгрузки) Тогда // "старый" формат
		ИмяФайлаXML = КодОКУД + "_"
					+ КодФормы + "_"
					+ Периодичность + "_"
					+ КодОКПО + "_"
					+ РасчетныйГод + "_"
					+ ОтчетныйПериод
					+ ?(ПустаяСтрока(КодОКФС), "", "_" + КодОКФС)
					+ ?(ПустаяСтрока(КодОКВЭД), "", "_" + КодОКВЭД) + ".xml";
	Иначе										 // "новый" формат
		ИмяФайлаXML = КодОКУД + "_"
					+ КодыИФ.КодФормы + "_"
					+ КодыИФ.Периодичность + "_"
					+ КодОКПО + "_"
					+ РасчетныйГод + "_"
					+ КодыИФ.ОтчетныйПериод + "__"
					+ КодыИФ.ДатаВыгрузки + ".xml";
	КонецЕсли;
	
	Возврат ИмяФайлаXML;
	
КонецФункции

&НаСервере
Функция СформироватьСтруктуруПараметров()
	
	Перем ПолученноеЗначение;
	
	ТабДокумент = мДанныеОтчета.ПолеТабличногоДокументаФормаОтчета;
	
	ДопАтрибуты = РегламентированнаяОтчетность.СформироватьСтруктуруДопАтрибутов(ЭтаФорма.ИмяФормы, "АтрибВыгрузкиXML2013Кв1");
	
	СтрокаСведений = "ФИОРук";
	СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(СтруктураРеквизитовФормы.Организация, СтруктураРеквизитовФормы.мСохраненныйДок.ДатаПодписи, СтрокаСведений);
	
	ПараметрыВыгрузки = Новый Структура;
	
	ДопАтрибуты.Свойство("code", ПолученноеЗначение);
	ПараметрыВыгрузки.Вставить("КодШаблона", ПолученноеЗначение);
	ДопАтрибуты.Свойство("idf", ПолученноеЗначение);
	ПараметрыВыгрузки.Вставить("КодФормы", ПолученноеЗначение);
	ДопАтрибуты.Свойство("shifr", ПолученноеЗначение);
	ПараметрыВыгрузки.Вставить("ШифрФормы", ПолученноеЗначение);
	ДопАтрибуты.Свойство("version", ПолученноеЗначение);
	ПараметрыВыгрузки.Вставить("ВерсияШаблона", ПолученноеЗначение);
	ДопАтрибуты.Свойство("format_version", ПолученноеЗначение);
	ПараметрыВыгрузки.Вставить("ВерсияФормата", ПолученноеЗначение);
	
	ОтчПериод  = Месяц(СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания);
	РасчПериод = Формат(Год(СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания),"ЧГ=0");
	
	ПараметрыВыгрузки.Вставить("ОКПО", СокрЛП(ТабДокумент.ОргКодОКПО));
	ПараметрыВыгрузки.Вставить("ОтчПериод", СокрЛП(ОтчПериод));
	ПараметрыВыгрузки.Вставить("РасчПериод", СокрЛП(РасчПериод));
	ПараметрыВыгрузки.Вставить("ОргНазв", СокрЛП(ТабДокумент.ОргНазв));
	ПараметрыВыгрузки.Вставить("ОргДиректор", СокрЛП(СведенияОбОрганизации.ФИОРук));
	ПараметрыВыгрузки.Вставить("ОргДолжностьИсп", СокрЛП(ТабДокумент.ОргДолжностьИсп));
	ПараметрыВыгрузки.Вставить("ОргИсполнитель", СокрЛП(ТабДокумент.ОргИсполнитель));
	ПараметрыВыгрузки.Вставить("ОргТелефонИсп", СокрЛП(ТабДокумент.ОргТелефонИсп));
	
	// Преобразование выгружаемых атрибутов, в соответствии
	// с форматом выгрузки статотчетности.
	ДопАтрибуты.Свойство("idp", ПолученноеЗначение);
	ПараметрыВыгрузки.Вставить("КодПериодичности", Число(СокрЛП(ПолученноеЗначение)));
	ПараметрыВыгрузки.Вставить("Документ", СтруктураРеквизитовФормы.мСохраненныйДок);
	
	РегламентированнаяОтчетность.АтрибутыВФорматеВыгрузки(ПараметрыВыгрузки);
	
	ПараметрыВыгрузки.Вставить("ИмяФайла", СформироватьИмяФайла(ПараметрыВыгрузки, ДопАтрибуты));
	
	ПараметрыВыгрузки.Вставить("ИмяКлючевогоУзлаСодержательнойЧасти", "row");
	
	// Для ПОСЛЕДУЮЩЕГО (ПЕРЕД ВЫГРУЗКОЙ) контроля показателей формы (Указания ФСН по заполнению Формы 4-ТЭР).
	// По разделу 1.
	Для НомКол = 1 По 10 Цикл
		Если РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(ТабДокумент, "П0000011001" + Формат(НомКол, "ЧЦ=2; ЧВН=; ЧГ=")) Тогда
			ПараметрыВыгрузки.Вставить("ПР000011001" + Формат(НомКол, "ЧЦ=2; ЧВН=; ЧГ="), ТабДокумент["П0000011001" + Формат(НомКол, "ЧЦ=2; ЧВН=; ЧГ=")]);
		КонецЕсли;
		Если РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(ТабДокумент, "П0000011010" + Формат(НомКол, "ЧЦ=2; ЧВН=; ЧГ=")) Тогда
			ПараметрыВыгрузки.Вставить("ПР000011010" + Формат(НомКол, "ЧЦ=2; ЧВН=; ЧГ="), ТабДокумент["П0000011010" + Формат(НомКол, "ЧЦ=2; ЧВН=; ЧГ=")]);
		КонецЕсли;
		Если РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(ТабДокумент, "П0000011012" + Формат(НомКол, "ЧЦ=2; ЧВН=; ЧГ=")) Тогда
			ПараметрыВыгрузки.Вставить("ПР000011012" + Формат(НомКол, "ЧЦ=2; ЧВН=; ЧГ="), ТабДокумент["П0000011012" + Формат(НомКол, "ЧЦ=2; ЧВН=; ЧГ=")]);
		КонецЕсли;
		Если РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(ТабДокумент, "П0000011020" + Формат(НомКол, "ЧЦ=2; ЧВН=; ЧГ=")) Тогда
			ПараметрыВыгрузки.Вставить("ПР000011020" + Формат(НомКол, "ЧЦ=2; ЧВН=; ЧГ="), ТабДокумент["П0000011020" + Формат(НомКол, "ЧЦ=2; ЧВН=; ЧГ=")]);
		КонецЕсли;
		Если РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(ТабДокумент, "П0000011030" + Формат(НомКол, "ЧЦ=2; ЧВН=; ЧГ=")) Тогда
			ПараметрыВыгрузки.Вставить("ПР000011030" + Формат(НомКол, "ЧЦ=2; ЧВН=; ЧГ="), ТабДокумент["П0000011030" + Формат(НомКол, "ЧЦ=2; ЧВН=; ЧГ=")]);
		КонецЕсли;
		Если РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(ТабДокумент, "П0000011032" + Формат(НомКол, "ЧЦ=2; ЧВН=; ЧГ=")) Тогда
			ПараметрыВыгрузки.Вставить("ПР000011032" + Формат(НомКол, "ЧЦ=2; ЧВН=; ЧГ="), ТабДокумент["П0000011032" + Формат(НомКол, "ЧЦ=2; ЧВН=; ЧГ=")]);
		КонецЕсли;
		Если РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(ТабДокумент, "П0000011040" + Формат(НомКол, "ЧЦ=2; ЧВН=; ЧГ=")) Тогда
			ПараметрыВыгрузки.Вставить("ПР000011040" + Формат(НомКол, "ЧЦ=2; ЧВН=; ЧГ="), ТабДокумент["П0000011040" + Формат(НомКол, "ЧЦ=2; ЧВН=; ЧГ=")]);
		КонецЕсли;
		Если РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(ТабДокумент, "П0000011050" + Формат(НомКол, "ЧЦ=2; ЧВН=; ЧГ=")) Тогда
			ПараметрыВыгрузки.Вставить("ПР000011050" + Формат(НомКол, "ЧЦ=2; ЧВН=; ЧГ="), ТабДокумент["П0000011050" + Формат(НомКол, "ЧЦ=2; ЧВН=; ЧГ=")]);
		КонецЕсли;
		Если РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(ТабДокумент, "П0000011060" + Формат(НомКол, "ЧЦ=2; ЧВН=; ЧГ=")) Тогда
			ПараметрыВыгрузки.Вставить("ПР000011060" + Формат(НомКол, "ЧЦ=2; ЧВН=; ЧГ="), ТабДокумент["П0000011060" + Формат(НомКол, "ЧЦ=2; ЧВН=; ЧГ=")]);
		КонецЕсли;
		Если РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(ТабДокумент, "П0000011071" + Формат(НомКол, "ЧЦ=2; ЧВН=; ЧГ=")) Тогда
			ПараметрыВыгрузки.Вставить("ПР000011071" + Формат(НомКол, "ЧЦ=2; ЧВН=; ЧГ="), ТабДокумент["П0000011071" + Формат(НомКол, "ЧЦ=2; ЧВН=; ЧГ=")]);
		КонецЕсли;
		Если РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(ТабДокумент, "П0000011072" + Формат(НомКол, "ЧЦ=2; ЧВН=; ЧГ=")) Тогда
			ПараметрыВыгрузки.Вставить("ПР000011072" + Формат(НомКол, "ЧЦ=2; ЧВН=; ЧГ="), ТабДокумент["П0000011072" + Формат(НомКол, "ЧЦ=2; ЧВН=; ЧГ=")]);
		КонецЕсли;
		Если РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(ТабДокумент, "П0000011073" + Формат(НомКол, "ЧЦ=2; ЧВН=; ЧГ=")) Тогда
			ПараметрыВыгрузки.Вставить("ПР000011073" + Формат(НомКол, "ЧЦ=2; ЧВН=; ЧГ="), ТабДокумент["П0000011073" + Формат(НомКол, "ЧЦ=2; ЧВН=; ЧГ=")]);
		КонецЕсли;
		Если РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(ТабДокумент, "П0000011080" + Формат(НомКол, "ЧЦ=2; ЧВН=; ЧГ=")) Тогда
			ПараметрыВыгрузки.Вставить("ПР000011080" + Формат(НомКол, "ЧЦ=2; ЧВН=; ЧГ="), ТабДокумент["П0000011080" + Формат(НомКол, "ЧЦ=2; ЧВН=; ЧГ=")]);
		КонецЕсли;
		Если РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(ТабДокумент, "П0000011082" + Формат(НомКол, "ЧЦ=2; ЧВН=; ЧГ=")) Тогда
			ПараметрыВыгрузки.Вставить("ПР000011082" + Формат(НомКол, "ЧЦ=2; ЧВН=; ЧГ="), ТабДокумент["П0000011082" + Формат(НомКол, "ЧЦ=2; ЧВН=; ЧГ=")]);
		КонецЕсли;
		Если РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(ТабДокумент, "П0000011090" + Формат(НомКол, "ЧЦ=2; ЧВН=; ЧГ=")) Тогда
			ПараметрыВыгрузки.Вставить("ПР000011090" + Формат(НомКол, "ЧЦ=2; ЧВН=; ЧГ="), ТабДокумент["П0000011090" + Формат(НомКол, "ЧЦ=2; ЧВН=; ЧГ=")]);
		КонецЕсли;
		Если РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(ТабДокумент, "П0000011092" + Формат(НомКол, "ЧЦ=2; ЧВН=; ЧГ=")) Тогда
			ПараметрыВыгрузки.Вставить("ПР000011092" + Формат(НомКол, "ЧЦ=2; ЧВН=; ЧГ="), ТабДокумент["П0000011092" + Формат(НомКол, "ЧЦ=2; ЧВН=; ЧГ=")]);
		КонецЕсли;
		Если РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(ТабДокумент, "П0000011100" + Формат(НомКол, "ЧЦ=2; ЧВН=; ЧГ=")) Тогда
			ПараметрыВыгрузки.Вставить("ПР000011100" + Формат(НомКол, "ЧЦ=2; ЧВН=; ЧГ="), ТабДокумент["П0000011100" + Формат(НомКол, "ЧЦ=2; ЧВН=; ЧГ=")]);
		КонецЕсли;
		Если РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(ТабДокумент, "П0000011110" + Формат(НомКол, "ЧЦ=2; ЧВН=; ЧГ=")) Тогда
			ПараметрыВыгрузки.Вставить("ПР000011110" + Формат(НомКол, "ЧЦ=2; ЧВН=; ЧГ="), ТабДокумент["П0000011110" + Формат(НомКол, "ЧЦ=2; ЧВН=; ЧГ=")]);
		КонецЕсли;
		Если РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(ТабДокумент, "П0000011120" + Формат(НомКол, "ЧЦ=2; ЧВН=; ЧГ=")) Тогда
			ПараметрыВыгрузки.Вставить("ПР000011120" + Формат(НомКол, "ЧЦ=2; ЧВН=; ЧГ="), ТабДокумент["П0000011120" + Формат(НомКол, "ЧЦ=2; ЧВН=; ЧГ=")]);
		КонецЕсли;
		Если РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(ТабДокумент, "П0000011130" + Формат(НомКол, "ЧЦ=2; ЧВН=; ЧГ=")) Тогда
			ПараметрыВыгрузки.Вставить("ПР000011130" + Формат(НомКол, "ЧЦ=2; ЧВН=; ЧГ="), ТабДокумент["П0000011130" + Формат(НомКол, "ЧЦ=2; ЧВН=; ЧГ=")]);
		КонецЕсли;
		Если РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(ТабДокумент, "П0000011140" + Формат(НомКол, "ЧЦ=2; ЧВН=; ЧГ=")) Тогда
			ПараметрыВыгрузки.Вставить("ПР000011140" + Формат(НомКол, "ЧЦ=2; ЧВН=; ЧГ="), ТабДокумент["П0000011140" + Формат(НомКол, "ЧЦ=2; ЧВН=; ЧГ=")]);
		КонецЕсли;
		Если РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(ТабДокумент, "П0000011150" + Формат(НомКол, "ЧЦ=2; ЧВН=; ЧГ=")) Тогда
			ПараметрыВыгрузки.Вставить("ПР000011150" + Формат(НомКол, "ЧЦ=2; ЧВН=; ЧГ="), ТабДокумент["П0000011150" + Формат(НомКол, "ЧЦ=2; ЧВН=; ЧГ=")]);
		КонецЕсли;
		Если РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(ТабДокумент, "П0000011151" + Формат(НомКол, "ЧЦ=2; ЧВН=; ЧГ=")) Тогда
			ПараметрыВыгрузки.Вставить("ПР000011151" + Формат(НомКол, "ЧЦ=2; ЧВН=; ЧГ="), ТабДокумент["П0000011151" + Формат(НомКол, "ЧЦ=2; ЧВН=; ЧГ=")]);
		КонецЕсли;
		Если РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(ТабДокумент, "П0000011160" + Формат(НомКол, "ЧЦ=2; ЧВН=; ЧГ=")) Тогда
			ПараметрыВыгрузки.Вставить("ПР000011160" + Формат(НомКол, "ЧЦ=2; ЧВН=; ЧГ="), ТабДокумент["П0000011160" + Формат(НомКол, "ЧЦ=2; ЧВН=; ЧГ=")]);
		КонецЕсли;
		Если РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(ТабДокумент, "П0000011161" + Формат(НомКол, "ЧЦ=2; ЧВН=; ЧГ=")) Тогда
			ПараметрыВыгрузки.Вставить("ПР000011161" + Формат(НомКол, "ЧЦ=2; ЧВН=; ЧГ="), ТабДокумент["П0000011161" + Формат(НомКол, "ЧЦ=2; ЧВН=; ЧГ=")]);
		КонецЕсли;
		Если РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(ТабДокумент, "П0000011620" + Формат(НомКол, "ЧЦ=2; ЧВН=; ЧГ=")) Тогда
			ПараметрыВыгрузки.Вставить("ПР000011620" + Формат(НомКол, "ЧЦ=2; ЧВН=; ЧГ="), ТабДокумент["П0000011620" + Формат(НомКол, "ЧЦ=2; ЧВН=; ЧГ=")]);
		КонецЕсли;
		Если РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(ТабДокумент, "П0000011621" + Формат(НомКол, "ЧЦ=2; ЧВН=; ЧГ=")) Тогда
			ПараметрыВыгрузки.Вставить("ПР000011621" + Формат(НомКол, "ЧЦ=2; ЧВН=; ЧГ="), ТабДокумент["П0000011621" + Формат(НомКол, "ЧЦ=2; ЧВН=; ЧГ=")]);
		КонецЕсли;
		Если РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(ТабДокумент, "П0000011630" + Формат(НомКол, "ЧЦ=2; ЧВН=; ЧГ=")) Тогда
			ПараметрыВыгрузки.Вставить("ПР000011630" + Формат(НомКол, "ЧЦ=2; ЧВН=; ЧГ="), ТабДокумент["П0000011630" + Формат(НомКол, "ЧЦ=2; ЧВН=; ЧГ=")]);
		КонецЕсли;
		Если РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(ТабДокумент, "П0000011631" + Формат(НомКол, "ЧЦ=2; ЧВН=; ЧГ=")) Тогда
			ПараметрыВыгрузки.Вставить("ПР000011631" + Формат(НомКол, "ЧЦ=2; ЧВН=; ЧГ="), ТабДокумент["П0000011631" + Формат(НомКол, "ЧЦ=2; ЧВН=; ЧГ=")]);
		КонецЕсли;
		Если РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(ТабДокумент, "П0000011632" + Формат(НомКол, "ЧЦ=2; ЧВН=; ЧГ=")) Тогда
			ПараметрыВыгрузки.Вставить("ПР000011632" + Формат(НомКол, "ЧЦ=2; ЧВН=; ЧГ="), ТабДокумент["П0000011632" + Формат(НомКол, "ЧЦ=2; ЧВН=; ЧГ=")]);
		КонецЕсли;
		Если РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(ТабДокумент, "П0000011640" + Формат(НомКол, "ЧЦ=2; ЧВН=; ЧГ=")) Тогда
			ПараметрыВыгрузки.Вставить("ПР000011640" + Формат(НомКол, "ЧЦ=2; ЧВН=; ЧГ="), ТабДокумент["П0000011640" + Формат(НомКол, "ЧЦ=2; ЧВН=; ЧГ=")]);
		КонецЕсли;
		Если РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(ТабДокумент, "П0000011650" + Формат(НомКол, "ЧЦ=2; ЧВН=; ЧГ=")) Тогда
			ПараметрыВыгрузки.Вставить("ПР000011650" + Формат(НомКол, "ЧЦ=2; ЧВН=; ЧГ="), ТабДокумент["П0000011650" + Формат(НомКол, "ЧЦ=2; ЧВН=; ЧГ=")]);
		КонецЕсли;
		Если РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(ТабДокумент, "П0000011660" + Формат(НомКол, "ЧЦ=2; ЧВН=; ЧГ=")) Тогда
			ПараметрыВыгрузки.Вставить("ПР000011660" + Формат(НомКол, "ЧЦ=2; ЧВН=; ЧГ="), ТабДокумент["П0000011660" + Формат(НомКол, "ЧЦ=2; ЧВН=; ЧГ=")]);
		КонецЕсли;
		Если РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(ТабДокумент, "П0000011690" + Формат(НомКол, "ЧЦ=2; ЧВН=; ЧГ=")) Тогда
			ПараметрыВыгрузки.Вставить("ПР000011690" + Формат(НомКол, "ЧЦ=2; ЧВН=; ЧГ="), ТабДокумент["П0000011690" + Формат(НомКол, "ЧЦ=2; ЧВН=; ЧГ=")]);
		КонецЕсли;
		Если РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(ТабДокумент, "П0000011700" + Формат(НомКол, "ЧЦ=2; ЧВН=; ЧГ=")) Тогда
			ПараметрыВыгрузки.Вставить("ПР000011700" + Формат(НомКол, "ЧЦ=2; ЧВН=; ЧГ="), ТабДокумент["П0000011700" + Формат(НомКол, "ЧЦ=2; ЧВН=; ЧГ=")]);
		КонецЕсли;
		Если РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(ТабДокумент, "П0000011720" + Формат(НомКол, "ЧЦ=2; ЧВН=; ЧГ=")) Тогда
			ПараметрыВыгрузки.Вставить("ПР000011720" + Формат(НомКол, "ЧЦ=2; ЧВН=; ЧГ="), ТабДокумент["П0000011720" + Формат(НомКол, "ЧЦ=2; ЧВН=; ЧГ=")]);
		КонецЕсли;
		Если РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(ТабДокумент, "П0000011730" + Формат(НомКол, "ЧЦ=2; ЧВН=; ЧГ=")) Тогда
			ПараметрыВыгрузки.Вставить("ПР000011730" + Формат(НомКол, "ЧЦ=2; ЧВН=; ЧГ="), ТабДокумент["П0000011730" + Формат(НомКол, "ЧЦ=2; ЧВН=; ЧГ=")]);
		КонецЕсли;
		Если РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(ТабДокумент, "П0000011750" + Формат(НомКол, "ЧЦ=2; ЧВН=; ЧГ=")) Тогда
			ПараметрыВыгрузки.Вставить("ПР000011750" + Формат(НомКол, "ЧЦ=2; ЧВН=; ЧГ="), ТабДокумент["П0000011750" + Формат(НомКол, "ЧЦ=2; ЧВН=; ЧГ=")]);
		КонецЕсли;
		Если РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(ТабДокумент, "П0000011751" + Формат(НомКол, "ЧЦ=2; ЧВН=; ЧГ=")) Тогда
			ПараметрыВыгрузки.Вставить("ПР000011751" + Формат(НомКол, "ЧЦ=2; ЧВН=; ЧГ="), ТабДокумент["П0000011751" + Формат(НомКол, "ЧЦ=2; ЧВН=; ЧГ=")]);
		КонецЕсли;
		Если РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(ТабДокумент, "П0000011752" + Формат(НомКол, "ЧЦ=2; ЧВН=; ЧГ=")) Тогда
			ПараметрыВыгрузки.Вставить("ПР000011752" + Формат(НомКол, "ЧЦ=2; ЧВН=; ЧГ="), ТабДокумент["П0000011752" + Формат(НомКол, "ЧЦ=2; ЧВН=; ЧГ=")]);
		КонецЕсли;
		Если РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(ТабДокумент, "П0000011753" + Формат(НомКол, "ЧЦ=2; ЧВН=; ЧГ=")) Тогда
			ПараметрыВыгрузки.Вставить("ПР000011753" + Формат(НомКол, "ЧЦ=2; ЧВН=; ЧГ="), ТабДокумент["П0000011753" + Формат(НомКол, "ЧЦ=2; ЧВН=; ЧГ=")]);
		КонецЕсли;
	КонецЦикла;
	Для НомКол = 1 По 12 Цикл
		Для НомСуффикса = 1 По 9 Цикл
			Если РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(ТабДокумент, "П0000011160" + Формат(НомКол, "ЧЦ=2; ЧВН=; ЧГ=") + "_" + Формат(НомСуффикса, "ЧГ=")) Тогда
				ПараметрыВыгрузки.Вставить("ПР000011160" + Формат(НомКол, "ЧЦ=2; ЧВН=; ЧГ=") + "_" + Формат(НомСуффикса, "ЧГ="),
					   ТабДокумент["П0000011160" + Формат(НомКол, "ЧЦ=2; ЧВН=; ЧГ=") + "_" + Формат(НомСуффикса, "ЧГ=")]);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	// По разделу 2.
	Для НомКол = 1 По 8 Цикл
		Если РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(ТабДокумент, "П0000021800" + Формат(НомКол, "ЧЦ=2; ЧВН=; ЧГ=")) Тогда
			ПараметрыВыгрузки.Вставить("ПР000021800" + Формат(НомКол, "ЧЦ=2; ЧВН=; ЧГ="), ТабДокумент["П0000021800" + Формат(НомКол, "ЧЦ=2; ЧВН=; ЧГ=")]);
		КонецЕсли;
		Если РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(ТабДокумент, "П0000021810" + Формат(НомКол, "ЧЦ=2; ЧВН=; ЧГ=")) Тогда
			ПараметрыВыгрузки.Вставить("ПР000021810" + Формат(НомКол, "ЧЦ=2; ЧВН=; ЧГ="), ТабДокумент["П0000021810" + Формат(НомКол, "ЧЦ=2; ЧВН=; ЧГ=")]);
		КонецЕсли;
		Если РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(ТабДокумент, "П0000021820" + Формат(НомКол, "ЧЦ=2; ЧВН=; ЧГ=")) Тогда
			ПараметрыВыгрузки.Вставить("ПР000021820" + Формат(НомКол, "ЧЦ=2; ЧВН=; ЧГ="), ТабДокумент["П0000021820" + Формат(НомКол, "ЧЦ=2; ЧВН=; ЧГ=")]);
		КонецЕсли;
		Если РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(ТабДокумент, "П0000021830" + Формат(НомКол, "ЧЦ=2; ЧВН=; ЧГ=")) Тогда
			ПараметрыВыгрузки.Вставить("ПР000021830" + Формат(НомКол, "ЧЦ=2; ЧВН=; ЧГ="), ТабДокумент["П0000021830" + Формат(НомКол, "ЧЦ=2; ЧВН=; ЧГ=")]);
		КонецЕсли;
	КонецЦикла;
	// По разделу 3.
	ПараметрыВыгрузки.Вставить("ПР00003188001", ТабДокумент["П000003188001"]);
	ПараметрыВыгрузки.Вставить("ПР00003188101", ТабДокумент["П000003188101"]);
	ПараметрыВыгрузки.Вставить("ПР00003188201", ТабДокумент["П000003188201"]);
	ПараметрыВыгрузки.Вставить("ПР00003188301", ТабДокумент["П000003188301"]);
	ПараметрыВыгрузки.Вставить("ПР00003188501", ТабДокумент["П000003188501"]);
	ПараметрыВыгрузки.Вставить("ПР00003188601", ТабДокумент["П000003188601"]);
	ПараметрыВыгрузки.Вставить("ПР00003188701", ТабДокумент["П000003188701"]);
	ПараметрыВыгрузки.Вставить("ПР00003188801", ТабДокумент["П000003188801"]);
	ПараметрыВыгрузки.Вставить("ПР00003188901", ТабДокумент["П000003188901"]);
	// По разделу 4.
	Для НомКол = 1 По 3 Цикл
		ПараметрыВыгрузки.Вставить("ПР000041890" + Формат(НомКол, "ЧЦ=2; ЧВН=; ЧГ="), ТабДокумент["П0000041890" + Формат(НомКол, "ЧЦ=2; ЧВН=; ЧГ=")]);
		ПараметрыВыгрузки.Вставить("ПР000041891" + Формат(НомКол, "ЧЦ=2; ЧВН=; ЧГ="), ТабДокумент["П0000041891" + Формат(НомКол, "ЧЦ=2; ЧВН=; ЧГ=")]);
		ПараметрыВыгрузки.Вставить("ПР000041892" + Формат(НомКол, "ЧЦ=2; ЧВН=; ЧГ="), ТабДокумент["П0000041892" + Формат(НомКол, "ЧЦ=2; ЧВН=; ЧГ=")]);
		ПараметрыВыгрузки.Вставить("ПР000041893" + Формат(НомКол, "ЧЦ=2; ЧВН=; ЧГ="), ТабДокумент["П0000041893" + Формат(НомКол, "ЧЦ=2; ЧВН=; ЧГ=")]);
		ПараметрыВыгрузки.Вставить("ПР000041894" + Формат(НомКол, "ЧЦ=2; ЧВН=; ЧГ="), ТабДокумент["П0000041894" + Формат(НомКол, "ЧЦ=2; ЧВН=; ЧГ=")]);
		ПараметрыВыгрузки.Вставить("ПР000041895" + Формат(НомКол, "ЧЦ=2; ЧВН=; ЧГ="), ТабДокумент["П0000041895" + Формат(НомКол, "ЧЦ=2; ЧВН=; ЧГ=")]);
	КонецЦикла;
	
	Возврат ПараметрыВыгрузки;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ СТЫКОВКИ С СЕРВИСОМ СДАЧИ ОТЧЕТНОСТИ ЧЕРЕЗ ПРЕДСТАВИТЕЛЯ

&НаКлиенте
Процедура ОтправитьЧерезПредставителя(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОтправитьЧерезПредставителяЗавершение", ЭтотОбъект);

	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьЧерезПредставителяЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ПриНажатииНаКнопкуОтправкиЧерезПредставителяВРегламентированномОтчете(ЭтаФорма, "ФСГС");
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВИнтернете(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьВИнтернетеЗавершение", ЭтотОбъект);

	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
		
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВИнтернетеЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ПроверитьВИнтернете(ЭтаФорма, "ФСГС");
	
КонецПроцедуры

#Область ПанельОтправкиВКонтролирующиеОрганы

&НаКлиенте
Процедура ОбновитьОтправку(Команда)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОбновитьОтправкуИзПанелиОтправки(ЭтаФорма, "ФСГС");
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаПротоколНажатие(Элемент)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьПротоколИзПанелиОтправки(ЭтаФорма, "ФСГС");
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьНеотправленноеИзвещение(Команда)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОтправитьНеотправленноеИзвещениеИзПанелиОтправки(ЭтаФорма, "ФСГС");
КонецПроцедуры

&НаКлиенте
Процедура ЭтапыОтправкиНажатие(Элемент)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьСостояниеОтправкиИзПанелиОтправки(ЭтаФорма, "ФСГС");
КонецПроцедуры

&НаКлиенте
Процедура КритическиеОшибкиОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьКритическиеОшибкиИзПанелиОтправки(ЭтаФорма, "ФСГС");
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаНаименованиеЭтапаНажатие(Элемент)
	
	ПараметрыИзменения = Новый Структура;
	ПараметрыИзменения.Вставить("Форма", ЭтаФорма);
	ПараметрыИзменения.Вставить("Организация", СтруктураРеквизитовФормы.Организация);
	ПараметрыИзменения.Вставить("КонтролирующийОрган",
		ПредопределенноеЗначение("Перечисление.ТипыКонтролирующихОрганов.ФСГС"));
	
	РегламентированнаяОтчетностьКлиент.ИзменитьСтатусОтправки(ПараметрыИзменения);
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ОтправитьВКонтролирующийОрган(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверкаВозможностиВыгрузкиРегламентированногоОтчетаПередОтправкой", ЭтотОбъект);
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередОтправкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаВозможностиВыгрузкиРегламентированногоОтчетаПередОтправкой(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОтправитьВКонтролирующийОрганЗавершение", ЭтотОбъект);
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьВКонтролирующийОрганЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ПриНажатииНаКнопкуОтправкиВКонтролирующийОрган(ЭтаФорма, "ФСГС");
	
КонецПроцедуры

&НаКлиенте
Процедура  ЗаписатьИЗакрыть(Команда)
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Форма", ЭтаФорма);
	Оповещение = Новый ОписаниеОповещения("ПослеСохраненияФормыЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	СохранитьНаКлиенте(, Оповещение);
КонецПроцедуры

&НаКлиенте
Процедура ПослеСохраненияФормыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	ДополнительныеПараметры.Форма.Закрыть();
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОткрытьПрисоединенныеФайлы(Команда)
	
	РегламентированнаяОтчетностьКлиент.СохранитьОтчетИОткрытьФормуПрисоединенныеФайлы(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийПриИзменении(Элемент)
	Модифицированность = Истина;
КонецПроцедуры