&НаСервере
Перем мОбъектОтчета;

&НаКлиенте
Перем ОбработкаКС Экспорт;

&НаСервере
Перем СписокРасшифровкиПоказателей;

&НаСервере
Перем СписокРасшифровкиформулы;

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	// Обход ошибки платформы Параметр сеанса отсутствует или удален
	ТабличныйДокумент.Очистить();
	
	СформироватьСтруктуруРеквизитовФормы();
	
	СтруктураРеквизитовФормы.СписокПечатаемыхЛистов = Новый СписокЗначений;
	
	СтруктураРеквизитовФормы.мСоставПоказателей = "СоставПоказателей2016Кв4";
	
	СтруктураРеквизитовФормы.мОписаниеТиповЧислоЕ = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(17, 2));
	
	СтруктураДанныхТитульный = Новый Структура;
	СтруктураДанныхСведения  = Новый Структура;
	
	// ОПИСАНИЕ ПАРАМЕТРОВ МНОГОСТРОЧНЫХ ГРУПП
	
	// Структура многострочных разделов формы.
	мСтруктураМногострочныхРазделов = Новый Структура;
	
	// Структура исходных строк (минимального кол-ва) многострочных разделов формы.
	мСтруктураИсхКолвоСтрокРазделов = Новый Структура;
	
	мСтруктураИменаКолонокРазделов  = Новый Структура;
	
	ИнициализацияМногостраничныхРазделов();
	
	// Структура содержит данные дополнительных страниц.
	мСтруктураМногостраничныхРазделов = Новый Структура;
	мСтруктураМногостраничныхРазделов.Вставить("Раздел1", "ТаблицаСтраницыРаздел1");

	ЦветЗаполняетсяТолькоВручную                           = Новый Цвет(255, 255, 225);
	ЦветЗаполняетсяАвтоКорректир                           = Новый Цвет(255, 240, 200);
	ЦветЗаполняетсяАвтоБезКорректир                        = Новый Цвет(230, 240, 220);
	СтруктураРеквизитовФормы.ЦветЗаполняетсяАвтоАрифметика = Новый Цвет(192, 220, 192); // зеленый
	ЦветЗаполняетсяОднозначноВручную                       = Новый Цвет(255, 255, 192); // желтый
	ЦветЗаполняетсяАвтоматически                           = Новый Цвет(255, 255, 255); // белый, ввод запрещен

	// Структура цветов раскраски автозаполняемых ячеек.
	мСтруктураЦветовРаскраски = Новый Структура;
	мСтруктураЦветовРаскраски.Вставить("_1", ЦветЗаполняетсяТолькоВручную);
	мСтруктураЦветовРаскраски.Вставить("_2", ЦветЗаполняетсяАвтоКорректир);
	мСтруктураЦветовРаскраски.Вставить("_3", ЦветЗаполняетсяАвтоБезКорректир);
	мСтруктураЦветовРаскраски.Вставить("_4", СтруктураРеквизитовФормы.ЦветЗаполняетсяАвтоАрифметика);
	мСтруктураЦветовРаскраски.Вставить("_0", ЦветЗаполняетсяОднозначноВручную);
	мСтруктураЦветовРаскраски.Вставить("_5", ЦветЗаполняетсяАвтоматически);
	
	мСтруктураВариантыЗаполнения       = Новый Структура;
	мСтруктураВариантыЗаполненияЭталон = Новый Структура;
	
	// ОПИСАНИЕ ПАРАМЕТРОВ ФОРМЫ ОТЧЕТА
	
	// Версия формы.
	СтруктураРеквизитовФормы.мВерсияФормы = "22/11/2016";
	
	// Код отчета, равен КНД.
	СтруктураРеквизитовФормы.мКодОтчета = 1151091;
	
	СтруктураРеквизитовФормы.ВариантыФорматовВыгрузки = Новый СписокЗначений;
	СтруктураРеквизитовФормы.ВариантыФорматовВыгрузки.Добавить(
		СтруктураРеквизитовФормы.мСоставПоказателей, "Формат 5.04", Истина);
	
	СтруктураРеквизитовФормы.КНД = "1151091";
	
	СтруктураРеквизитовФормы.мПечатныеформы = Новый СписокЗначений;
	СтруктураРеквизитовФормы.мПечатаемыеРазделы = Новый СписокЗначений;
	
	ИмяРаздела = "Титульный";
	
	ТабличныйДокумент.Вывести(
		ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(
		Сред(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + ИмяРаздела));
	
	СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяРаздела;
	
	СтруктураРеквизитовФормы.мВыбраннаяФорма          = Параметры.мВыбраннаяФорма;
	СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета  = Параметры.мДатаКонцаПериодаОтчета;
	СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета = Параметры.мДатаНачалаПериодаОтчета;
	СтруктураРеквизитовФормы.мПериодичность           = Параметры.мПериодичность;
	СтруктураРеквизитовФормы.мСкопированаФорма        = Параметры.мСкопированаФорма;
	СтруктураРеквизитовФормы.мСохраненныйДок          = Параметры.мСохраненныйДок;
	СтруктураРеквизитовФормы.Организация              = Параметры.Организация;
	СтруктураРеквизитовФормы.ДоступенМеханизмПечатиРеглОтчетностиСДвухмернымШтрихкодомPDF417
		= Параметры.ДоступенМеханизмПечатиРеглОтчетностиСДвухмернымШтрихкодомPDF417;
	
	ДатаПодписи = ТекущаяДатаСеанса();
	
	ПорядкиОкругленияОтчетности = Новый Структура;
	ПорядкиОкругленияОтчетности.Вставить("ПеречислениеПорядкиОкругленияОтчетностиОкр1",
		Перечисления.ПорядкиОкругленияОтчетности.Окр1);
	ПорядкиОкругленияОтчетности.Вставить("ПеречислениеПорядкиОкругленияОтчетностиОкр1000",
		Перечисления.ПорядкиОкругленияОтчетности.Окр1000);
	ПорядкиОкругленияОтчетности.Вставить("ПеречислениеПорядкиОкругленияОтчетностиОкр1000000",
		Перечисления.ПорядкиОкругленияОтчетности.Окр1000000);
	
	СоответствиеЕдиницыИзмеренияДелителю = Новый Структура;
	СоответствиеЕдиницыИзмеренияДелителю.Вставить("Окр1", 1);
	СоответствиеЕдиницыИзмеренияДелителю.Вставить("Окр1000", 1000);
	СоответствиеЕдиницыИзмеренияДелителю.Вставить("Окр1000000", 1000000);
	
	СтруктураРеквизитовФормы.СправочникиВидыКонтактнойИнформацииФактАдресОрганизации
		= Справочники.ВидыКонтактнойИнформации.АдресПоПропискеФизическиеЛица;
	
	Инициализация(Параметры.БезОткрытияФормы);
	
КонецПроцедуры

&НаСервере
Процедура СформироватьСтруктуруРеквизитовФормы()
	
	СтруктураРеквизитовФормы = Новый Структура;
	СтруктураРеквизитовФормы.Вставить("ВыводитьСтраницуВТаблДокНаСервере");
	СтруктураРеквизитовФормы.Вставить("НаимТекущегоРаздела");
	СтруктураРеквизитовФормы.Вставить("КНД");
	СтруктураРеквизитовФормы.Вставить("мАвтоВыборКодов");
	СтруктураРеквизитовФормы.Вставить("мБезОткрытияФормы");
	СтруктураРеквизитовФормы.Вставить("мВерсияФормы");
	СтруктураРеквизитовФормы.Вставить("мДелитель");
	СтруктураРеквизитовФормы.Вставить("мЗаписываетсяНовыйДокумент");
	СтруктураРеквизитовФормы.Вставить("мЗаписьЗапрещена");
	СтруктураРеквизитовФормы.Вставить("мКодОтчета");
	СтруктураРеквизитовФормы.Вставить("мРежимПечати");
	СтруктураРеквизитовФормы.Вставить("мСоставПоказателей");
	СтруктураРеквизитовФормы.Вставить("мСтрокаФормата");
	СтруктураРеквизитовФормы.Вставить("мСчетчикСтраниц");
	СтруктураРеквизитовФормы.Вставить("ОтключитьВыполнениеРасчета", Ложь);
	СтруктураРеквизитовФормы.Вставить("ТочностьЕдиницыИзмерения");
	СтруктураРеквизитовФормы.Вставить("ФлажокОтклАвтоРасчет", Ложь);
	СтруктураРеквизитовФормы.Вставить("ВариантыФорматовВыгрузки");
	СтруктураРеквизитовФормы.Вставить("ВидДокумента");
	СтруктураРеквизитовФормы.Вставить("ЕдиницаИзмерения");
	СтруктураРеквизитовФормы.Вставить("мВариант");
	СтруктураРеквизитовФормы.Вставить("мВыбраннаяФорма");
	СтруктураРеквизитовФормы.Вставить("мДатаКонцаПериодаОтчета");
	СтруктураРеквизитовФормы.Вставить("мДатаНачалаПериодаОтчета");
	СтруктураРеквизитовФормы.Вставить("мОписаниеТиповЧислоЕ");
	СтруктураРеквизитовФормы.Вставить("мПериодичность");
	СтруктураРеквизитовФормы.Вставить("мПечатаемыеРазделы");
	СтруктураРеквизитовФормы.Вставить("мПечатныеФормы");
	СтруктураРеквизитовФормы.Вставить("мСкопированаФорма");
	СтруктураРеквизитовФормы.Вставить("мСохраненныйДок");
	СтруктураРеквизитовФормы.Вставить("мПечатьБезШтрихкодаРазрешена");
	СтруктураРеквизитовФормы.Вставить("Организация");
	СтруктураРеквизитовФормы.Вставить("ЦветЗаполняетсяАвтоАрифметика");
	СтруктураРеквизитовФормы.Вставить("СписокПечатаемыхЛистов");
	СтруктураРеквизитовФормы.Вставить("НаимОрганизации");
	СтруктураРеквизитовФормы.Вставить("СтрПериодОтчета");
	СтруктураРеквизитовФормы.Вставить("ТекущаяСтрокаРазделовОтчета");
	СтруктураРеквизитовФормы.Вставить("ДоступенМеханизмПечатиРеглОтчетностиСДвухмернымШтрихкодомPDF417");
	СтруктураРеквизитовФормы.Вставить("ТекстДляЗаголовочнойЧасти");
	СтруктураРеквизитовФормы.Вставить("СправочникиВидыКонтактнойИнформацииФактАдресОрганизации");
	СтруктураРеквизитовФормы.Вставить("мПроверятьСоотношенияПриПечатиИВыгрузки");
	СтруктураРеквизитовФормы.Вставить("ИсходныйКодПоМесту");
	
КонецПроцедуры

&НаСервере
Процедура ИнициализацияМногостраничныхРазделов()
	
	СтрПерваяСтраница = ТаблицаСтраницыРаздел1.Добавить();
	СтрПерваяСтраница.Представление               = "Новая страница";
	СтрПерваяСтраница.АктивнаяСтраница            = Истина;
	СтрПерваяСтраница.АвтоматическоеПредставление = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура Очистить(ВыполняемоеОповещение = Неопределено) Экспорт
	
	РегламентированнаяОтчетностьКлиент.Очистить(ЭтаФорма, ВыполняемоеОповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура СпециальныеОперацииПослеОчисткиЛистаНаКлиенте(ИмяСтраницы, УдалениДопЭкз = Истина) Экспорт

	СпециальныеОперацииПослеОчисткиЛиста(ЭтаФорма, ИмяСтраницы, УдалениДопЭкз);
	
КонецПроцедуры

&НаСервере
Процедура СпециальныеОперацииПослеОчисткиЛистаНаСервере(ИмяСтраницы, УдалениДопЭкз = Истина) Экспорт
	
	СпециальныеОперацииПослеОчисткиЛиста(ЭтаФорма, ИмяСтраницы, УдалениДопЭкз);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СпециальныеОперацииПослеОчисткиЛиста(Форма, ИмяСтраницы, УдалениДопЭкз) Экспорт
	
	Расчет(Форма, ИмяСтраницы);
	
КонецПроцедуры

&НаСервере
Процедура ФормироватьСтруктуруСвойствСтраниц() Экспорт
	
	мСвойстваРазделовДекларации.ПолучитьЭлементы().Очистить();
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	
	СтрокаУровня1.ИмяСтраницы                          = "Титульный";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.МаксКолвоЭкз                         = 0;
	СтрокаУровня1.ОчищатьРаздел                        = Ложь;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	
	СтрокаУровня1.ИмяСтраницы                          = "Сведения";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.МаксКолвоЭкз                         = 0;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	
	СтрокаУровня1.ИмяСтраницы                          = "Раздел1";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Истина;
	СтрокаУровня1.МаксКолвоЭкз                         = 0;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	
КонецПроцедуры

&НаСервере
Функция ОпределитьТабличноеПолеПоИдМногострочногоРазделаНаСервере(ИдГруппы) Экспорт
	
	Возврат Неопределено;
	
КонецФункции

&НаКлиенте
Функция ОпределитьТабличноеПолеПоИдМногострочногоРазделаНаКлиенте(ИдГруппы) Экспорт
	
	Возврат Неопределено;
	
КонецФункции

&НаСервере
Функция ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ИмяЛиста = Неопределено) Экспорт
	
	Возврат Неопределено;
	
КонецФункции

&НаКлиенте
Функция ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаКлиенте(ИмяЛиста = Неопределено) Экспорт
	
	Возврат Неопределено;
	
КонецФункции

&НаСервере
Функция СобратьДанныеТекущегоТаблПоляНаСервере(ИмяТабличногоПоля) Экспорт
	
	Возврат СобратьДанныеТекущегоТаблПоля(ЭтаФорма, ИмяТабличногоПоля);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СобратьДанныеТекущегоТаблПоля(Форма, ИмяТабличногоПоля)
	
	ТабличноеПоле = Форма[ИмяТабличногоПоля];
	
	СтруктураДанныхПоля = Новый Структура;
	
	Для Инд = 0 По ТабличноеПоле.Области.Количество() - 1 Цикл
		ТекущаяОбласть = ТабличноеПоле.Области[Инд];
		
		Если НЕ ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТекущаяОбласть.СодержитЗначение <> Истина Тогда
			Продолжить;
		КонецЕсли;
		
		ИмяПоказателя      = ТекущаяОбласть.Имя;
		ЗначениеПоказателя = ТекущаяОбласть.Значение;
		
		СтруктураДанныхПоля.Вставить(ИмяПоказателя, ЗначениеПоказателя);
		
	КонецЦикла;
	
	Возврат СтруктураДанныхПоля;
	
КонецФункции

&НаСервере
Процедура ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставленияПоРазделуНаСервере(Знач ИмяРаздела) Экспорт
	
	Возврат;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставленияПоРазделуНаКлиенте(Знач ИмяРаздела) Экспорт
	
	Возврат;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнениеЗначенийВКвадратикахНаСервере(Знач ИмяСтраницы) Экспорт
	
	ЗаполнениеЗначенийВКвадратиках(ЭтаФорма, ИмяСтраницы);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнениеЗначенийВКвадратиках(Форма, Знач ИмяСтраницы)
	
	Возврат;
	
КонецПроцедуры

&НаСервере
Функция ОбновитьПеременныеМодуляНаСервере(ИмяПоказателя, ЗначениеПоказателя) Экспорт
	
	Возврат Ложь;
	
КонецФункции

&НаСервере
Процедура ПоказатьПериод()
	
	ТабличныйДокумент.Области.ДатаСоставленияРасчета.Значение
		= СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета;
	
	СтруктураРеквизитовФормы.СтрПериодОтчета = ПредставлениеПериода(
		НачалоДня(ТабличныйДокумент.Области.ДатаСоставленияРасчета.Значение),
		КонецДня(ТабличныйДокумент.Области.ДатаСоставленияРасчета.Значение), "ФП = Истина");
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДатуВЯчейкахНаСервере() Экспорт
	
	ЗаполнитьДатуВЯчейках(ЭтаФорма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьДатуВЯчейках(Форма)
	
	Форма.ТабличныйДокумент.Области.ДатаПодписи.Значение = Форма.ДатаПодписи;
	
КонецПроцедуры

&НаСервере
Процедура УправлениеЛистамиНаСервере(ТипНП = Неопределено) Экспорт

	УправлениеЛистами(ЭтаФорма, ТипНП);

КонецПроцедуры

&НаКлиенте
Процедура УправлениеЛистамиНаКлиенте(ТипНП = Неопределено) Экспорт

	УправлениеЛистами(ЭтаФорма, ТипНП);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеЛистами(Форма, ТипНП = Неопределено)
	
	Возврат;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСведенияОбОрганизацииНаСервере(ВПрограммеИзмененаДатаПодписи = Ложь)
	
	Если НЕ ВПрограммеИзмененаДатаПодписи Тогда
		
		СтрокаСведений = "ИННЮЛ, КППЮЛ, НаимЮЛПол, КодНО, ТипНП, ТелОрганизации, ФИО, ОКТМО";
		СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(
			СтруктураРеквизитовФормы.Организация, ДатаПодписи, СтрокаСведений);
		
		ТабличныйДокумент.Области.ИНН1.Значение = СведенияОбОрганизации.ИННЮЛ;
		ТабличныйДокумент.Области.КПП1.Значение = СведенияОбОрганизации.КППЮЛ;
		
		КодНО = СведенияОбОрганизации.КодНО;
		Для Инд = СтрДлина(СведенияОбОрганизации.КодНО) + 1 По 4 Цикл
			КодНО = " " + КодНО;
		КонецЦикла;
		ТабличныйДокумент.Области.НалоговыйОрган.Значение = КодНО;
		
		Если НЕ РегламентированнаяОтчетностьПереопределяемый.ЭтоЮридическоеЛицо(СтруктураРеквизитовФормы.Организация) Тогда
			НаименованиеОрганизации = СокрЛП(СведенияОбОрганизации.ФИО);
		Иначе
			НаименованиеОрганизации = СокрЛП(СведенияОбОрганизации.НаимЮлПол);
		КонецЕсли;
		ТабличныйДокумент.Области.НаимОрг.Значение = НаименованиеОрганизации;
		
		ТаблицаСтраницыРаздел1[0].Данные[0].Значение.П000010002001 = ТолькоЦифрыИзСтроки(СведенияОбОрганизации.ОКТМО);
		
		ТабличныйДокумент.Области.ТелОрганизации.Значение = СокрЛП(СведенияОбОрганизации.ТелОрганизации);
		
		ЗаполнитьДатуВЯчейках(ЭтаФорма);
		
	КонецЕсли;
	
	ЗаполнитьСведенияОПодписантах();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ТолькоЦифрыИзСтроки(Знач ИсходнаяСтрока)
	
	Результат = "";
	
	Для Инд = 1 По СтрДлина(ИсходнаяСтрока) Цикл
		СимволСтроки = Сред(ИсходнаяСтрока, Инд, 1);
		КодСимвола = КодСимвола(СимволСтроки);
		Если КодСимвола >= 48 И КодСимвола <= 57 Тогда
			Результат = Результат + СимволСтроки;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьКБК(Форма)
	
	// Инициализация КБК только на первой странице многостраничного Раздела 1.
	Форма.ТаблицаСтраницыРаздел1[0].Данные[0].Значение.П000010001001 = "18211208000012000120";
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСведенияОПодписантах() Экспорт
	
	ТипПодписанта = "1";
	Подписант = "";
	НаименованиеОрганизацииПредставителя = "";
	ДокументПредставителя = "";
	
	// Выясним, есть ли представитель.
	КодНО = СокрЛП(ТабличныйДокумент.Области.НалоговыйОрган.Значение);
	КПП   = СокрЛП(ТабличныйДокумент.Области.КПП1.Значение);

	СведенияОПредставителе = РегламентированнаяОтчетностьВызовСервера.ПолучитьПоКодамСведенияОПредставителе(
		СтруктураРеквизитовФормы.Организация, КодНО, КПП);
	
	ТипПодписанта = СведенияОПредставителе.ТипПодписанта;
	
	Если ТипПодписанта = "1" Тогда
		// Представителя нет.
		Если РегламентированнаяОтчетностьВызовСервера.ЭтоЮридическоеЛицо(СтруктураРеквизитовФормы.Организация) Тогда
			// Подписант - руководитель.
			СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(
				СтруктураРеквизитовФормы.Организация, ДатаПодписи, "ФИОРук, ФИО");
			Подписант = СокрЛП(?(ЗначениеЗаполнено(СведенияОбОрганизации.ФИОРук), СведенияОбОрганизации.ФИОРук, СведенияОбОрганизации.ФИО));
		КонецЕсли;
	Иначе
		// Есть представитель, подписант - он.
		Подписант                            = СведенияОПредставителе.ФИОПредставителя;
		НаименованиеОрганизацииПредставителя = СведенияОПредставителе.НаименованиеОрганизацииПредставителя;
		ДокументПредставителя                = СведенияОПредставителе.ДокументПредставителя;
	КонецЕсли;
	
	ТабличныйДокумент.Области.ПрПодп.Значение = ТипПодписанта;
	ТабличныйДокумент.Области.ОргПодписант.Значение = Подписант;
	ТабличныйДокумент.Области.ОргУп.Значение = НаименованиеОрганизацииПредставителя;
	ТабличныйДокумент.Области.ДокУпПред.Значение = ДокументПредставителя;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораСтраниц(ВариантВыбора)
	Перем ТекущийРазделОтчетаСокрНаим;
	Перем НомерСтраницыРазделаОтчета;
	
	Если НЕ Элементы.РазделыОтчета.ТекущиеДанные = Неопределено Тогда
		ТекущийРазделОтчетаСокрНаим = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
		НомерСтраницыРазделаОтчета  = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета;
	КонецЕсли;
	
	мПараметры = Новый Структура;
	мПараметры.Вставить("ПроверкаСоотношений", Истина);
	мПараметры.Вставить("Автосохранение", Ложь);
	мПараметры.Вставить("ПараметрыОтображенияСумм", Ложь);
	мПараметры.Вставить("СчетчикСтраниц", Истина);
	мПараметры.Вставить("ИмеетсяРеквизитДеревоВыбранныхСтраниц", Истина);
	
	Если СтруктураРеквизитовФормы.ДоступенМеханизмПечатиРеглОтчетностиСДвухмернымШтрихкодомPDF417 Тогда
		мПараметры.Вставить("РазрешитьВстроеннуюПечать", Истина);
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ФлажокОтклАвтоРасчет", СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);
	ПараметрыФормы.Вставить("мПечатьБезШтрихкодаРазрешена", СтруктураРеквизитовФормы.мПечатьБезШтрихкодаРазрешена);
	ПараметрыФормы.Вставить("мСчетчикСтраниц", СтруктураРеквизитовФормы.мСчетчикСтраниц);
	ПараметрыФормы.Вставить("мАвтоВыборКодов", СтруктураРеквизитовФормы.мАвтоВыборКодов);
	ПараметрыФормы.Вставить("мПроверятьСоотношенияПриПечатиИВыгрузки", СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки);
	ПараметрыФормы.Вставить("мПараметры", мПараметры);
	
	ФормаНастройкиОтчета = РегламентированнаяОтчетностьКлиент.ПолучитьОбщуюФормуПоИмени("НастройкиОтчета", ПараметрыФормы, ЭтаФорма);

	мДеревоВыбранныхСтраниц.ПолучитьЭлементы().Очистить();

	КопироватьДанныеФормы(мДеревоСтраницОтчета, ФормаНастройкиОтчета.Дерево);
	
	ЗначениеАвторасчета = СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет;
	ЗначениеЕдИзм       = СтруктураРеквизитовФормы.ЕдиницаИзмерения;
	ЗначениеЗпт         = СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения;
	
	ДополнительныеПараметры = Новый Структура("ЗначениеАвторасчета, ЗначениеЕдИзм, ЗначениеЗпт, НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим", ЗначениеАвторасчета, ЗначениеЕдИзм, ЗначениеЗпт, НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим);
	ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьФормуВыбораСтраницЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ФормаНастройкиОтчета.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
	ФормаНастройкиОтчета.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	ФормаНастройкиОтчета.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораСтраницЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	ЗначениеАвторасчета = ДополнительныеПараметры.ЗначениеАвторасчета;
	ЗначениеЕдИзм = ДополнительныеПараметры.ЗначениеЕдИзм;
	ЗначениеЗпт = ДополнительныеПараметры.ЗначениеЗпт;
	НомерСтраницыРазделаОтчета = ДополнительныеПараметры.НомерСтраницыРазделаОтчета;
	ТекущийРазделОтчетаСокрНаим = ДополнительныеПараметры.ТекущийРазделОтчетаСокрНаим;
	
	РегламентированнаяОтчетностьКлиентСервер.ПоказатьКнопкиПечати(ЭтаФорма);
	
	Модифицированность = Истина;
	
	флЗначенияИдентичны = Истина;
	
	Для Индекс = 0 По мДеревоСтраницОтчета.ПолучитьЭлементы().Количество() - 1 Цикл
		
		Если НЕ мДеревоСтраницОтчета.ПолучитьЭлементы()[Индекс].ПоказатьСтраницу = мДеревоВыбранныхСтраниц.ПолучитьЭлементы()[Индекс].ПоказатьСтраницу Тогда
			флЗначенияИдентичны = Ложь;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЗначениеАвторасчета <> СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Тогда
		Если СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет = Ложь Тогда
			ДополнительныеПараметры = Новый Структура("ЗначениеЕдИзм, ЗначениеЗпт, НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим, флЗначенияИдентичны", ЗначениеЕдИзм, ЗначениеЗпт, НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим, флЗначенияИдентичны);
			ОписаниеОповещения = Новый ОписаниеОповещения("ВопросПерерасчетВсехПоказателейЗавершение", ЭтотОбъект, ДополнительныеПараметры);
			ТекстВопроса = НСтр("ru='Будет произведен перерасчет всех рассчитываемых показателей. Продолжить?'");
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
		Иначе
			#Если ВебКлиент Тогда
				ИзменитьТаблицуВариантовЗаполненияНаСервере();
			#Иначе
				РегламентированнаяОтчетностьКлиентСервер.ИзменитьТаблицуВариантовЗаполнения(ЭтаФорма, НЕ СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);
			#КонецЕсли
			ПоказатьСтраницыОтчета(ЗначениеЕдИзм, ЗначениеЗпт, НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим, флЗначенияИдентичны);
			УстановитьДоступностьОбластей(ЭтаФорма, ТекущийРазделОтчетаСокрНаим);
		КонецЕсли;
	Иначе
		ПоказатьСтраницыОтчета(ЗначениеЕдИзм, ЗначениеЗпт, НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим, флЗначенияИдентичны);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПерерасчетВсехПоказателейЗавершение(РезультатВопроса, ДополнительныеПараметры1) Экспорт
	
	ЗначениеЕдИзм = ДополнительныеПараметры1.ЗначениеЕдИзм;
	ЗначениеЗпт = ДополнительныеПараметры1.ЗначениеЗпт;
	НомерСтраницыРазделаОтчета = ДополнительныеПараметры1.НомерСтраницыРазделаОтчета;
	ТекущийРазделОтчетаСокрНаим = ДополнительныеПараметры1.ТекущийРазделОтчетаСокрНаим;
	флЗначенияИдентичны = ДополнительныеПараметры1.флЗначенияИдентичны;
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		#Если ВебКлиент Тогда
			ИзменитьТаблицуВариантовЗаполненияНаСервере();
		#Иначе
			РегламентированнаяОтчетностьКлиентСервер.ИзменитьТаблицуВариантовЗаполнения(ЭтаФорма, НЕ СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);
		#КонецЕсли
		РасчетНаКлиенте();
		ПоказатьСтраницыОтчета(ЗначениеЕдИзм, ЗначениеЗпт, НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим, флЗначенияИдентичны);
	Иначе
		СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет = Истина;
	КонецЕсли;
	
	УстановитьДоступностьОбластей(ЭтаФорма, ТекущийРазделОтчетаСокрНаим);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСтраницыОтчета(ЗначениеЕдИзм, ЗначениеЗпт, НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим, флЗначенияИдентичны)
	
	Если ЗначениеЕдИзм <> СтруктураРеквизитовФормы.ЕдиницаИзмерения
		ИЛИ ЗначениеЗпт <> СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения Тогда
		ПослеСменыЕдИзмеренияИТочности();
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ПоказатьСтраницыОтчетаНаКлиенте(ЭтаФорма);
	
	Если НЕ флЗначенияИдентичны Тогда
		
		СформироватьДеревоРазделовОтчетаНаКлиенте();
		
		Если НЕ ТекущийРазделОтчетаСокрНаим = Неопределено Тогда
			
			НайденнаяСтрока = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(РазделыОтчета.ПолучитьЭлементы(), "КолонкаРазделыОтчетаСокрНаим", ТекущийРазделОтчетаСокрНаим);
			
			Если НЕ НайденнаяСтрока = Неопределено 
				И НЕ НомерСтраницыРазделаОтчета = Неопределено 
				И НайденнаяСтрока.ПолучитьЭлементы().Количество() > 0 Тогда
				
				НайденнаяСтрока = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(НайденнаяСтрока.ПолучитьЭлементы(), "КолонкаНомерСтраницыРазделаОтчета", НомерСтраницыРазделаОтчета);
				
			КонецЕсли;
			
			Если НЕ НайденнаяСтрока = Неопределено Тогда
				Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяСтрока.ПолучитьИдентификатор();
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьТаблицуВариантовЗаполненияНаСервере()
	
	РегламентированнаяОтчетностьКлиентСервер.ИзменитьТаблицуВариантовЗаполнения(ЭтаФорма, НЕ СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);
	
КонецПроцедуры

&НаСервере
Процедура ВывестиНаПечатьЛист(Парам1, ОбщиеРеквизитыРазделов, СтрПоля = Неопределено)
	
	ПрефиксИменМакетов = "ПечатныйБланк2016Кв4_";
	
	СоответствиеРазделовМакетам = Новый Соответствие;
	
	СоответствиеРазделовМакетам.Вставить("Титульный", ПрефиксИменМакетов + "Титульный");
	СоответствиеРазделовМакетам.Вставить("Сведения",  ПрефиксИменМакетов + "Сведения");
	СоответствиеРазделовМакетам.Вставить("Раздел1",   ПрефиксИменМакетов + "Раздел1");
	
	МЧБРаздела = СоответствиеРазделовМакетам[Парам1.ИмяСтраницы];
	
	МакетМЧБ = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(МЧБРаздела);
	МакетМЧБ.ПолеСверху = 5;
	МакетМЧБ.ПолеСправа = 5;
	МакетМЧБ.ПолеСнизу  = 5;
	МакетМЧБ.ПолеСлева  = 5;
	
	ВремПоля = Новый Структура(СтрПоля);
	
	ЗаполнитьМакетМЧБ(Парам1, МакетМЧБ, ОбщиеРеквизитыРазделов);
	
	ЗаполнитьЗначенияСвойств(ВремПоля, ТабличныйДокумент, СтрПоля);
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(МакетМЧБ);
	ЗаполнитьЗначенияСвойств(ТабличныйДокумент, МакетМЧБ, СтрПоля, "Макет");
	
	РегламентированнаяОтчетность.ВывестиНаПечатьЛистОбщая(ЭтаФорма.Заголовок, Парам1, ТабличныйДокумент, СтруктураРеквизитовФормы.мПечатныеФормы);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьМакетМЧБ(ПараметрыПечати, МакетМЧБ, ОбщиеРеквизитыРазделов)
	
	Показатели = Новый ТаблицаЗначений;
	Показатели.Колонки.Добавить("Имя");
	Показатели.Колонки.Добавить("Значение");
	Показатели.Колонки.Добавить("ЗначениеМЧБ");
	
	Показатели.Индексы.Добавить("Имя");
	
	ИсходныйМакет = ТабличныйДокумент;
	Для Каждого Область Из ИсходныйМакет.Области Цикл
		Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник И Область.СодержитЗначение = Истина Тогда
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = Область.Имя;
			НовСтр.Значение = Область.Значение;
			НовСтр.ЗначениеМЧБ = ПолучитьЗначениеМЧБ(Область);
		КонецЕсли;
	КонецЦикла;
	
	НайденноеЗначение = Показатели.Найти("ИНН1", "Имя");
	
	Если НЕ НайденноеЗначение = Неопределено Тогда
		Показатели.Удалить(НайденноеЗначение);
	КонецЕсли;
	
	ИНН = "";
	Для Ном = 0 По 11 Цикл
		ИНН = ИНН + ОбщиеРеквизитыРазделов.ИНН[Ном];
	КонецЦикла;
	
	НовСтр = Показатели.Добавить();
	НовСтр.Имя = "ИНН1";
	НовСтр.Значение = ИНН;
	НовСтр.ЗначениеМЧБ = СокрЛП(ИНН);
	
	НайденноеЗначение = Показатели.Найти("КПП1", "Имя");
	
	Если НЕ НайденноеЗначение = Неопределено Тогда
		Показатели.Удалить(НайденноеЗначение);
	КонецЕсли;
	
	КПП = "";
	Для Ном = 0 По 8 Цикл
		КПП = КПП + ОбщиеРеквизитыРазделов.КПП[Ном];
	КонецЦикла;
	
	НовСтр = Показатели.Добавить();
	НовСтр.Имя = "КПП1";
	НовСтр.Значение = КПП;
	НовСтр.ЗначениеМЧБ = СокрЛП(КПП);
	
	НайденноеЗначение = Показатели.Найти("ДатаПодписи", "Имя");
	
	Если НЕ НайденноеЗначение = Неопределено Тогда
		Показатели.Удалить(НайденноеЗначение);
	КонецЕсли;
	
	ДатаПодписиСтр = "";
	Для Ном = 0 По 7 Цикл
		ДатаПодписиСтр = ДатаПодписиСтр + ОбщиеРеквизитыРазделов.ДатаПодписи[Ном];
	КонецЦикла;
	
	НовСтр = Показатели.Добавить();
	НовСтр.Имя = "ДатаПодписи";
	НовСтр.Значение = ДатаПодписиСтр;
	НовСтр.ЗначениеМЧБ = СокрЛП(ДатаПодписиСтр);
	
	// Особая обработка ФИО на титульном листе.
	Если ПараметрыПечати.ИмяСтраницы = "Титульный" Тогда
		
		ПокПодписант = Показатели.Найти("ОргПодписант", "Имя");
		Если ПокПодписант <> Неопределено Тогда
			
			ФИО = РегламентированнаяОтчетность.РазложитьФИО(ПокПодписант.Значение);
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "ОргПодписантФамилия";
			НовСтр.Значение = ФИО.Фамилия;
			НовСтр.ЗначениеМЧБ = ФИО.Фамилия;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "ОргПодписантИмя";
			НовСтр.Значение = ФИО.Имя;
			НовСтр.ЗначениеМЧБ = ФИО.Имя;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "ОргПодписантОтчество";
			НовСтр.Значение = ФИО.Отчество;
			НовСтр.ЗначениеМЧБ = ФИО.Отчество;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Особая обработка ИНН.
	ИНН = Новый Массив(12);
	Для Инд = 1 По 9 Цикл
		Для Знакоместо = 0 По 11 Цикл
			ИНН[Знакоместо] = Показатели.Найти("ИНН" + Инд + "_" + (Знакоместо + 1), "Имя");
		КонецЦикла;
		Если ИНН[0] = Неопределено ИЛИ ИНН[1] = Неопределено ИЛИ ИНН[10] = Неопределено Тогда
			Продолжить;
		КонецЕсли;
	КонецЦикла;
	
	ИндексТочкиПоКорню=Новый Структура;
	Для каждого Область Из МакетМЧБ.Области Цикл
		Если Область.Текст="." Тогда
			ТекАдресЗначенияОбласти = АдресЗначенияОбласти(Область);
			Корень=ТекАдресЗначенияОбласти.Корень;
			ИндексТочкиЧислаНаМЧБ=ТекАдресЗначенияОбласти.ИндексЗнакоместа;
			ИндексТочкиПоКорню.Вставить(Корень,ИндексТочкиЧислаНаМЧБ);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Область Из МакетМЧБ.Области Цикл
		Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			ИмяОбласти = Область.Имя;
			
			Если СтрЧислоВхождений(ИмяОбласти, "НомСтр") > 0
			 ИЛИ СтрЧислоВхождений(ИмяОбласти, "СоставленаНа") > 0 Тогда
				Продолжить;
			КонецЕсли;
					
			РезультатПоиска = Показатели.Найти(ИмяОбласти, "Имя");
			Если РезультатПоиска = Неопределено Тогда
				ТекАдресЗначенияОбласти = АдресЗначенияОбласти(Область);
				ЗначениеВыведено = Ложь;
				Если ТекАдресЗначенияОбласти.ИндексЗнакоместа <> 0 Тогда
					РезультатПоиска = Показатели.Найти(ТекАдресЗначенияОбласти.Корень, "Имя");
					Если РезультатПоиска <> Неопределено Тогда
						Если ТипЗнч(РезультатПоиска.Значение)=Тип("Число") Тогда
							// Разделение числа на 2 части.
							ЦелаяЧасть = Цел(РезультатПоиска.Значение);
							СтрЦелаяЧасть = Формат(Цел(РезультатПоиска.Значение), "ЧГ=0");
							СтрДробнаяЧасть = Сред(Строка(РезультатПоиска.Значение - ЦелаяЧасть),3);
							// Разделение областей показателя на 2 части.
							
							ИндексТочкиЧислаНаМЧБ = Неопределено;
							Если ИндексТочкиПоКорню.Свойство(ТекАдресЗначенияОбласти.Корень,ИндексТочкиЧислаНаМЧБ) = Ложь Тогда
								// На МЧБ нет разделения на целую и дробную части.
								ПрисвоитьЗначениеОбласти(Область, РезультатПоиска.ЗначениеМЧБ, ТекАдресЗначенияОбласти.ИндексЗнакоместа);
								ЗначениеВыведено = Истина;
							Иначе
								// Определяем какая часть выводится (Целая, дробная или точка).
								Если ТекАдресЗначенияОбласти.ИндексЗнакоместа<ИндексТочкиЧислаНаМЧБ Тогда
									// Выводится целая часть.
									ПрисвоитьЗначениеОбласти(Область, ?(РезультатПоиска.ЗначениеМЧБ = "-","-",СтрЦелаяЧасть), ТекАдресЗначенияОбласти.ИндексЗнакоместа);
									ЗначениеВыведено = Истина;	
								ИначеЕсли ТекАдресЗначенияОбласти.ИндексЗнакоместа > ИндексТочкиЧислаНаМЧБ Тогда
									// Выводится дробная часть.
									ПрисвоитьЗначениеОбласти(Область, СтрДробнаяЧасть, ТекАдресЗначенияОбласти.ИндексЗнакоместа - ИндексТочкиЧислаНаМЧБ);
									ЗначениеВыведено = Истина;
								Иначе
									// Выводится точка.
									// Присваивать ничего не будем, но считаем, что область заполненяется корректно.
									ЗначениеВыведено = Истина;
								КонецЕсли;
							КонецЕсли;
						Иначе
							ПрисвоитьЗначениеОбласти(Область, РезультатПоиска.ЗначениеМЧБ, ТекАдресЗначенияОбласти.ИндексЗнакоместа,
								ТипЗнч(РезультатПоиска.Значение) <> Тип("Строка") ИЛИ НЕ ЗначениеЗаполнено(РезультатПоиска.Значение));
							ЗначениеВыведено = Истина;
						КонецЕсли;
					КонецЕсли;
					
					Если НЕ ЗначениеВыведено
						И ПараметрыПечати.ИмяСтраницы = "Раздел1" Тогда
						
						ЗначениеВыведено = Истина;
						
					КонецЕсли;
					
				КонецЕсли;
				
				Если НЕ ЗначениеВыведено
					  И ИмяОбласти <> "ОпределениеВысотыСтрокиМногострочнойЧасти" Тогда //служебное поле
					
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru='Не удалось заполнить область ""%1""!'"), ИмяОбласти);
					Сообщение.Сообщить();
					
				КонецЕсли;
			Иначе
				ПрисвоитьЗначениеОбласти(Область, РезультатПоиска.ЗначениеМЧБ);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Функция ПолучитьЗначениеМЧБ(Область)
	
	ТипЗначения = ТипЗнч(Область.Значение);
	Если ТипЗначения = Тип("Число") Тогда
		ФорматОбласти = Область.Формат;
		СоотвСтрокаФормата = РазобратьСтрокуФормата(ФорматОбласти);
		СоотвСтрокаФормата.Вставить("ЧРД", ".");
		СоотвСтрокаФормата.Вставить("ЧГ", "");
		Результат = Формат(Область.Значение, СобратьСтрокуФормата(СоотвСтрокаФормата));
	ИначеЕсли ТипЗначения = Тип("Строка") Тогда
		Результат = СокрЛП(Область.Значение);
	ИначеЕсли ТипЗначения = Тип("Дата") Тогда
		Результат = Формат(Область.Значение, ?(ПустаяСтрока(Область.Формат), "ДФ=ddMMyyyy", Область.Формат));
	ИначеЕсли ТипЗначения = Тип("Булево") Тогда
		Результат = Формат(Область.Значение, Область.Формат);
	КонецЕсли;
	
	Возврат СокрЛП(Результат);
	
КонецФункции

&НаСервере
Функция АдресЗначенияОбласти(Область)
	
	Имя = Область.Имя;
	КореньИмениОбласти = Неопределено;
	СтрИндексЗнакоместа = "";
	ИндексЗнакоместа = 0;
	ДлинаИмени = СтрДлина(Имя);
	Для ИндексВхождения = 1 По ДлинаИмени Цикл
		СтрИндексЗнакоместа = Сред(Имя, ДлинаИмени - ИндексВхождения + 1);
		Если СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(СтрИндексЗнакоместа) Тогда
			КореньИмениОбласти = Лев(Имя, ДлинаИмени - ИндексВхождения);
			ИндексЗнакоместа = Число(СтрИндексЗнакоместа);
		Иначе
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если Прав(КореньИмениОбласти, 1) = "_" Тогда
		КореньИмениОбласти = Лев(КореньИмениОбласти, СтрДлина(КореньИмениОбласти) - 1);
	КонецЕсли;
		
	Возврат Новый Структура("Корень, ИндексЗнакоместа", КореньИмениОбласти, ИндексЗнакоместа);
	
КонецФункции

&НаСервере
Процедура ПрисвоитьЗначениеОбласти(Область, Знач Значение, ИндексЗнакоместа = 0, ДополнятьСправа_ = Истина)
	
	Если ИндексЗнакоместа <> 0 Тогда
		Если СтрДлина(Значение) >= ИндексЗнакоместа Тогда
			Значение = Сред(Значение, ИндексЗнакоместа, 1);
		Иначе
			Значение = ?(ДополнятьСправа_, "-", "");
		КонецЕсли;
	ИначеЕсли НЕ ЗначениеЗаполнено(Значение) Тогда
		Значение = "-";
	КонецЕсли;
	
	Если Область.СодержитЗначение = Истина Тогда
		Область.Значение = ВРЕГ(Значение);
	Иначе
		Область.Текст = ВРЕГ(Значение);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция РазобратьСтрокуФормата(Знач СтрокаФормата)
	
	ЗначенияПараметров = Новый Соответствие;
	Пока СтрНайти(СтрокаФормата, ";") <> 0 Цикл
		ВхождениеРазделителя = СтрНайти(СтрокаФормата, ";");
		ДоРазделителя = Лев(СтрокаФормата, ВхождениеРазделителя - 1);
		ВхождениеРавно = СтрНайти(ДоРазделителя, "=");
		Если ВхождениеРавно <> 0 И ВхождениеРавно <> 1 Тогда
			ЗначенияПараметров.Вставить(Лев(ДоРазделителя, ВхождениеРавно - 1), Сред(ДоРазделителя, ВхождениеРавно + 1));
		КонецЕсли;
		СтрокаФормата = Сред(СтрокаФормата, ВхождениеРазделителя + 1);
	КонецЦикла;
	ВхождениеРавно = СтрНайти(СтрокаФормата, "=");
	Если ВхождениеРавно <> 0 И ВхождениеРавно <> 1 Тогда
		ЗначенияПараметров.Вставить(Лев(СтрокаФормата, ВхождениеРавно - 1), Сред(СтрокаФормата, ВхождениеРавно + 1));
	КонецЕсли;
	Возврат ЗначенияПараметров;
	
КонецФункции

&НаСервере
Функция СобратьСтрокуФормата(ПараметрыФормата)
	
	СтрокаФормата = "";
	Для Каждого Параметр Из ПараметрыФормата Цикл
		СтрокаФормата = СтрокаФормата + "; " + Параметр.Ключ + "=" + Параметр.Значение;
	КонецЦикла;
	Если НЕ ПустаяСтрока(СтрокаФормата) Тогда
		СтрокаФормата = Сред(СтрокаФормата, 3);
	КонецЕсли;
	Возврат СтрокаФормата;
	
КонецФункции

&НаСервере
Процедура ВывестиРазделВТабличныйДокументНаСервере(ИмяГруппы, СтруктураГруппы) Экспорт
	
	ВывестиРазделВТабличныйДокумент(ЭтаФорма, ИмяГруппы, СтруктураГруппы);
	
КонецПроцедуры

&НаКлиенте
Процедура ВывестиРазделВТабличныйДокументНаКлиенте(ИмяГруппы, СтруктураГруппы) Экспорт
	
	ВывестиРазделВТабличныйДокумент(ЭтаФорма, ИмяГруппы, СтруктураГруппы);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ВывестиРазделВТабличныйДокумент(Форма, ИмяГруппы, СтруктураГруппы)
	
	Перем ИсходноеКоличествоСтрокГруппы;

	#Если НаКлиенте Тогда
		ТекущаяСтраница = Форма.ОпределитьТабличноеПолеПоИдМногострочногоРазделаНаКлиенте(ИмяГруппы);
	#Иначе
		ТекущаяСтраница = Форма.ОпределитьТабличноеПолеПоИдМногострочногоРазделаНаСервере(ИмяГруппы);
	#КонецЕсли

	// Определим исходное колво строк многострочного раздела,
	// соответствующее бумажной форме отчета.
	Форма.мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);

	// Реальное кол-во строк (колво заполненных строк).
	ТекущееКоличествоСтрокГруппы = СтруктураГруппы.Количество();

	ТекТабличноеПолеИмя = "ТабличныйДокумент";
	
	ТекТабличноеПоле = Форма[ТекТабличноеПолеИмя];

	НастройкиМнгЧ = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСвойствоРаздела(Форма, ТекущаяСтраница, "МногострочностьВРазделе").НайтиСтроки(Новый Структура("ИдГруппы", ИмяГруппы))[0];
	ВысотаСтроки = НастройкиМнгЧ.ВысотаСтроки;
	
	// При восстановлении сохраненных данных отчета сравниваем исходное кол-во
	// отображаемых в форме строк многострочного раздела с реальным количеством
	// созданных строк в сохраненном отчете.
	Если ТекущееКоличествоСтрокГруппы > ИсходноеКоличествоСтрокГруппы Тогда
		
		// При превышении реального кол-ва строк над исходным кол-вом (по шаблону),
		// автоматически добавляем необходимое колво строк.
		Форма.ДобавитьНеобходимоеКоличествоДопСтрокНаСервере(ТекТабличноеПоле, ТекТабличноеПолеИмя, ИсходноеКоличествоСтрокГруппы, ТекущееКоличествоСтрокГруппы, ИмяГруппы, СтруктураГруппы, ВысотаСтроки);

		Форма[ТекТабличноеПолеИмя] = ТекТабличноеПоле;
		
	КонецЕсли;
	
	// Выводим значения строк.
	Для Каждого СтрокаТаблицы Из СтруктураГруппы Цикл
		
		НомерСтрокиВТаблице      = СтруктураГруппы.Индекс(СтрокаТаблицы);
		НомерСтрокиВФормеТаблицы = НомерСтрокиВТаблице + 1;
		
		СписокИменКолонокРаздела = Форма.мСтруктураИменаКолонокРазделов[ИмяГруппы];
		
		Для НомерГрафы = 1 По Форма.мСтруктураКолвоКолонокРазделов[ИмяГруппы] Цикл
			
			КолонкаТаблицыИмя = СписокИменКолонокРаздела.Получить(НомерГрафы - 1).Значение;
			
			Если СтруктураГруппы[0].Свойство(КолонкаТаблицыИмя) Тогда
				
				ИмяЯчейки                = КолонкаТаблицыИмя + "_" + НомерСтрокиВФормеТаблицы;
				ОбластьЯчейкиТаблицы     = ТекТабличноеПоле.Области[ИмяЯчейки];
				ЗначениеЯчейки           = СтрокаТаблицы[КолонкаТаблицыИмя];
				Если ОбластьЯчейкиТаблицы.СодержитЗначение = Истина Тогда
					ОбластьЯчейкиТаблицы.Значение = ЗначениеЯчейки;
				Иначе
					// Устанавливаем порядковый номер строки.
					ОбластьЯчейкиТаблицы.Текст = ЗначениеЯчейки;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьНеобходимоеКоличествоДопСтрокНаСервере(ТекТабличноеПоле, ТекТабличноеПолеИмя, ИсходноеКоличествоСтрокГруппы, ТекущееКоличествоСтрокГруппы, ИмяГруппы, СтруктураГруппы, ВысотаСтроки) Экспорт
	
	ОбластьДопСтроки = ТекТабличноеПоле.ПолучитьОбласть("МногострочнаяЧасть");
	
	КоординатыОбластей = Новый Структура();
	
	Для Каждого Область Из ТекТабличноеПоле.Области Цикл
		
		Если СтрНайти(Область.Имя, "_") Тогда
			
			КоординатыОбластей.Вставить(Область.Имя, Область.Верх);
			
		КонецЕсли;
		
	КонецЦикла;
	
	МногострочнаяЧастьВерх = ТекТабличноеПоле.Области.МногострочнаяЧасть.Верх;
	
	МногострочнаяЧастьНиз = ТекТабличноеПоле.Области.МногострочнаяЧасть.Низ;
	
	ТекТабличноеПоле.ВставитьОбласть(ОбластьДопСтроки.Область(), ТекТабличноеПоле.Область(МногострочнаяЧастьНиз + 1, ,
		МногострочнаяЧастьНиз + (ТекущееКоличествоСтрокГруппы - 1) * ВысотаСтроки), ТипСмещенияТабличногоДокумента.ПоВертикали);
	
	Для НомНовойСтроки = ИсходноеКоличествоСтрокГруппы По ТекущееКоличествоСтрокГруппы Цикл
		
		Для Каждого Область Из ОбластьДопСтроки.Области Цикл
			
			Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			
				ОбластьТаблДок = ТекТабличноеПоле.Область(КоординатыОбластей[Область.Имя] + (ТекущееКоличествоСтрокГруппы - НомНовойСтроки) * ВысотаСтроки,
					Область.Лево, КоординатыОбластей[Область.Имя] + (ТекущееКоличествоСтрокГруппы - НомНовойСтроки) * ВысотаСтроки, Область.Право);
				
				Если ОбластьТаблДок.СодержитЗначение Тогда
					ОбластьТаблДок.Очистить();
				КонецЕсли;
				
				ОбластьТаблДок.Имя = Лев(Область.Имя, СтрНайти(Область.Имя, "_")) + Строка(ТекущееКоличествоСтрокГруппы - НомНовойСтроки + 1);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	ТекТабличноеПоле.Область(ТекТабличноеПоле.Области.МногострочнаяЧасть.Верх, , ТекТабличноеПоле.Области.МногострочнаяЧасть.Низ).Имя = "";
	
	ТекТабличноеПоле.Область(МногострочнаяЧастьВерх, , МногострочнаяЧастьНиз).Имя = "МногострочнаяЧасть";
	
КонецПроцедуры

&НаСервере
Процедура ВывестиРазделВТабличныйДокументСпецНаСервере(Знач НастройкиМнгЧ, ИмяГруппы, Раздел, СтруктураГруппы, мСтруктураКолвоКолонокРазделов) Экспорт
	
	// Реальное кол-во строк (колво заполненных строк).
	ТекущееКоличествоСтрокГруппы = СтруктураГруппы.Количество();
	
	// Режим восстановления многострочных блоков. Из процедуры ВосстановитьСохраненныеДанные.
	НастройкиМнгЧ = ДанныеФормыВЗначение(НастройкиМнгЧ, Тип("ТаблицаЗначений")).Скопировать();
	
	НазвОбласти = НастройкиМнгЧ.Найти(ИмяГруппы, "ИдГруппы").Область;
	
	НастройкиМнгЧ.Колонки.Добавить("НизМногострочнойЧасти");
	НастройкиМнгЧ.Колонки.Добавить("ВерхМногострочнойЧасти");
	
	// Определим координаты всех многострочных блоков, для последующего восстановления.
	Для каждого Зап Из НастройкиМнгЧ Цикл
		КоординатаНиз  = Раздел.Области[Зап.Область].Низ;
		КоординатаВерх = Раздел.Области[Зап.Область].Верх;
		Зап.НизМногострочнойЧасти    = КоординатаНиз;
		Зап.ВерхМногострочнойЧасти   = КоординатаВерх;
		// Координаты текущей области.
		Если Зап.Область = НазвОбласти Тогда
			Низ           = КоординатаНиз;
			Верх          = КоординатаВерх;
		КонецЕсли;
	КонецЦикла;
	
	ВысотаСтроки = НастройкиМнгЧ.Найти(ИмяГруппы, "ИдГруппы").ВысотаСтроки;
	
	// Скопируем верхнюю часть документа, не включая многострочную часть.
	ТаблДок = Раздел.ПолучитьОбласть(1, , Верх - 1);
	// Скопируем подвал, все, что ниже области многострочного блока.
	Подвал = Раздел.ПолучитьОбласть(Низ + 1, , Раздел.ВысотаТаблицы);
	
	Строка = Раздел.ПолучитьОбласть(Верх, , Верх + ВысотаСтроки - 1);
	
	Если ВысотаСтроки > 1 Тогда
		ОбластьОпределениеВысотыСтрокиМногострочнойЧасти=Строка.Области.Найти("ОпределениеВысотыСтрокиМногострочнойЧасти");
		Если ОбластьОпределениеВысотыСтрокиМногострочнойЧасти<>Неопределено Тогда
			ОбластьОпределениеВысотыСтрокиМногострочнойЧасти.Имя = "";
		КонецЕсли;
	КонецЕсли;
	
	Если Строка.Области.Найти(НазвОбласти) <> Неопределено Тогда
		Строка.Области[НазвОбласти].Имя = "";
	КонецЕсли;
	
	// При превышении реального кол-ва строк над исходным кол-вом (по шаблону),
	// автоматически добавляем необходимое колво строк.
	
	Для НомНовойСтроки = 1 По ТекущееКоличествоСтрокГруппы Цикл
		// Переопределим именнованность.
		Строка1 = Строка.ПолучитьОбласть(1, , Строка.ВысотаТаблицы);
		НомСтр = Формат(НомНовойСтроки, "ЧГ=0");
		
		СписокИменКолонокРаздела = мСтруктураИменаКолонокРазделов[ИмяГруппы];
		
		Для НомерГрафы = 1 По мСтруктураКолвоКолонокРазделов[ИмяГруппы] Цикл
			
			КолИмя = СписокИменКолонокРаздела.Получить(НомерГрафы - 1).Значение;
			
			Если СтруктураГруппы[0].Свойство(КолИмя) Тогда
				
				Строка1.Области[КолИмя + "_1"].Имя = КолИмя + "_" + НомСтр;
				
			КонецЕсли;
			
		КонецЦикла;
		
		ЗаполнитьСтрокуДаннымиИзТаблицы(ДанныеФормыВЗначение(
			СтруктураГруппы, Тип("ТаблицаЗначений")), Строка1, СтруктураГруппы[НомНовойСтроки - 1], НомСтр);
		ТаблДок.Вывести(Строка1);
		
	КонецЦикла;
	
	ТаблДок.Вывести(Подвал);
	
	Раздел.Очистить();
	Раздел.Вывести(ТаблДок);
	
	// Восстановим области.
	Для каждого Зап Из НастройкиМнгЧ Цикл
		Раздел.Область("R" + Формат(Зап.НизМногострочнойЧасти, "ЧГ=0") + ":R" + Формат(Зап.ВерхМногострочнойЧасти, "ЧГ=0")).Имя = Зап.Область;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтрокуДаннымиИзТаблицы(ТаблицаРаздела, Строка1, СтрокаТаблицы, НомерНаФорме)
	
	// Заполняем строку.
	Для каждого Колонка Из ТаблицаРаздела.Колонки Цикл
		КолонкаИмя = Колонка.Имя;
		НазвЯчейки = КолонкаИмя + "_" + НомерНаФорме;
		
		ЗначениеПоказателя = СтрокаТаблицы[КолонкаИмя];
		
		Если Строка1.Области[НазвЯчейки].СодержитЗначение = Истина Тогда
			Строка1.Области[НазвЯчейки].Значение = ЗначениеПоказателя;
		Иначе
			Строка1.Области[НазвЯчейки].Текст = ЗначениеПоказателя;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ИзменитьТаблицуПараметровАвтозаполнения(Парам, Лист)
	Перем МассивВариантовЗаполненияСтраниц;
	Перем ТаблицаВариантыЗаполнения;
	Перем ТаблицаСтраницРаздела;
	
	ИмяТекущейСтраницыПанели = Лист;

	Если НЕ мСтруктураВариантыЗаполнения.Свойство(ИмяТекущейСтраницыПанели, МассивВариантовЗаполненияСтраниц) Тогда
		Возврат;
	КонецЕсли;
	
	МассивВариантовЗаполненияСтраниц = ЭтаФорма["ТаблицаВариантыЗаполнения" + ИмяТекущейСтраницыПанели];

	НомерТекущейСтраницы = 1;

	Если мСтруктураМногостраничныхРазделов.Свойство(ИмяТекущейСтраницыПанели, ТаблицаСтраницРаздела) Тогда
		
		ТаблицаСтраницРаздела = ЭтаФорма[ТаблицаСтраницРаздела];
		
		// Раздел является многостраничным, определим активную страницу раздела:
		СтрТаблицаСтраницы = ТаблицаСтраницРаздела.НайтиСтроки(Новый Структура("АктивнаяСтраница", Истина));
		Если СтрТаблицаСтраницы.Количество() > 0 Тогда
			НомерТекущейСтраницы = ТаблицаСтраницРаздела.Индекс(СтрТаблицаСтраницы[0]) + 1;
		КонецЕсли;
	КонецЕсли;

	Если Парам = 1 Тогда // создаем таблицу параметров автозаполнения ячеек добавленного листа

		// При добавлении новой страницы параметры автозаполнения ее ячеек определяем
		// по эталонной модели
		НоваяТаблицаВариантыЗаполнения = РегламентированнаяОтчетностьВызовСервера.ПолучитьТаблицуВариантовЗаполненияНаСервере(ЭтаФорма, ИмяТекущейСтраницыПанели, НЕ СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет, СтруктураРеквизитовФормы.мОписаниеТиповЧислоЕ);

		Если НоваяТаблицаВариантыЗаполнения <> Неопределено Тогда
			
			ТаблВариантов = МассивВариантовЗаполненияСтраниц.Добавить();	
			
			Если ТипЗнч(НоваяТаблицаВариантыЗаполнения) = Тип("ДанныеФормыКоллекция") Тогда
				
				КопироватьДанныеФормы(НоваяТаблицаВариантыЗаполнения, ТаблВариантов.ТаблицаВариантовЗаполнения);
				
			Иначе
				
				ЗначениеВДанныеФормы(НоваяТаблицаВариантыЗаполнения, ТаблВариантов.ТаблицаВариантовЗаполнения);
				
			КонецЕсли;
			
		КонецЕсли;

	Иначе // Парам = -1. Удаляем таблицу параметров автозаполнения ячеек удаленного листа

		Если МассивВариантовЗаполненияСтраниц.Количество() > 1 Тогда 
			МассивВариантовЗаполненияСтраниц.Удалить(НомерТекущейСтраницы - 1);
		КонецЕсли;

	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура ОчиститьТабличноеПолеНаСервере(ВыбТабличноеПолеИмя) Экспорт

	ОчиститьТабличноеПоле(ЭтаФорма, ВыбТабличноеПолеИмя);

КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТабличноеПолеНаКлиенте(ВыбТабличноеПолеИмя) Экспорт

	ОчиститьТабличноеПоле(ЭтаФорма, ВыбТабличноеПолеИмя);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОчиститьТабличноеПоле(Форма, ВыбТабличноеПолеИмя)
	
	РегламентированнаяОтчетностьКлиентСервер.ОчиститьТабличноеПоле(Форма, ВыбТабличноеПолеИмя);
	
КонецПроцедуры

&НаКлиенте
Процедура Печать(ВидПечати, НеИзФормыОтчета = Ложь) Экспорт
	
	Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='%1. Формируется печатная форма...'"), ЭтаФорма.Заголовок), , , БиблиотекаКартинок.Печать);
	
	Если СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки = Истина Тогда // возможны 3 состояния флага
		РегламентированнаяОтчетностьКлиент.ПроверитьКонтрольныеСоотношения(ЭтаФорма, ОбработкаКС, Истина);
	КонецЕсли;
	
	Если НЕ ПечатьНаСервере(ВидПечати) Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ОткрытьФормуПредварительногоПросмотра(
		ЭтаФорма, ВидПечати, , СтруктураРеквизитовФормы.СписокПечатаемыхЛистов);
	
	СтруктураРеквизитовФормы.мРежимПечати = Ложь;
	
КонецПроцедуры

&НаСервере
Функция ПечатьНаСервере(ВидПечати)
	
	Если НЕ РегламентированнаяОтчетность.ПринтерДоступен() Тогда
		
		Сообщение = Новый СообщениеПользователю;

		Сообщение.Текст = НСтр("ru='Перед формированием печатных форм необходимо определить в системе принтер и задать его в качестве используемого по умолчанию!'");

		Сообщение.Сообщить();
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Если ТипЗнч(мДеревоВыбранныхСтраниц) <> Тип("ДанныеФормыДерево") Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	СтруктураРеквизитовФормы.мПечатныеФормы.Очистить();
	СтруктураРеквизитовФормы.мРежимПечати = Истина;
	
	СохранитьДанныеРаздела(СтруктураРеквизитовФормы.НаимТекущегоРаздела, Ложь, Ложь);
	
	сохрТаблДок = ТабличныйДокумент.ПолучитьОбласть();
	
	СтрПоля = "ПолеСверху, ПолеСправа, ПолеСнизу, ПолеСлева";
	ВремПоля = Новый Структура(СтрПоля);
	
	ЗаполнитьЗначенияСвойств(ВремПоля, ТабличныйДокумент, СтрПоля);
	
	ВывестиМакетВТаблДокНаСервере("Титульный", 0);
	
	ОбщиеРеквизитыРазделов = ПолучитьОбщиеРеквизитыСТитульногоЛиста();
	
	Для Каждого СтрокаУровня1 Из мДеревоВыбранныхСтраниц.ПолучитьЭлементы() Цикл
		
		Если СтрокаУровня1.ВыводНаПечать = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("НаименованиеЛиста",  СтрокаУровня1.Представление);
		СтруктураПараметров.Вставить("ОриентацияЛиста",    СтрокаУровня1.ОриентацияСтраницы);
		СтруктураПараметров.Вставить("ИмяСтраницы",        СтрокаУровня1.ИмяСтраницы);
		Структурапараметров.Вставить("ИмяОбластиТаблПоля", СтрокаУровня1.ИмяОбластиТабличногоПоля);
		СтруктураПараметров.Вставить("ВидПечати",          ВидПечати);
		
		Если НЕ мСтруктураМногостраничныхРазделов.Свойство(СтрокаУровня1.ИмяСтраницы) Тогда
			
			ВывестиМакетВТаблДокНаСервере(СтрокаУровня1.ИмяСтраницы, 0);
			ВывестиНаПечатьЛист(СтруктураПараметров, ОбщиеРеквизитыРазделов, СтрПоля);
			
		Иначе
			
			СтруктураПараметров.Вставить("ИмяСтраницыПанели", СтрокаУровня1.ИмяСтраницы);
			ВывестиНаПечатьДополнительныеСтраницы(СтруктураПараметров, ОбщиеРеквизитыРазделов);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(сохрТаблДок);
	ЗаполнитьЗначенияСвойств(ТабличныйДокумент, ВремПоля, СтрПоля);
	
	РегламентированнаяОтчетностьКлиентСервер.ПроставлениеНомеровЛистов(ЭтаФорма, , СтруктураРеквизитовФормы.СписокПечатаемыхЛистов);
	
	КопироватьДанныеФормы(мДеревоВыбранныхСтраниц, мДеревоСтраницОтчета);
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Процедура ВывестиНаПечатьДополнительныеСтраницы(СтруктураПараметровСтраницы, ОбщиеРеквизитыРазделов)
	
	Перем ИмяСтраницы;
	Перем ТаблицаСтраницРаздела;
	
	СтруктураПараметровСтраницы.Свойство("ИмяСтраницыПанели", ИмяСтраницы);
	
	Если НЕ мСтруктураМногостраничныхРазделов.Свойство(ИмяСтраницы, ТаблицаСтраницРаздела) Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаСтраницРаздела = ЭтаФорма[ТаблицаСтраницРаздела];
	
	МассивПризнаковАктивности = Новый Массив;
	Для Каждого Страница Из ТаблицаСтраницРаздела Цикл
		ТекущийИндекс = ТаблицаСтраницРаздела.Индекс(Страница);
		МассивПризнаковАктивности.Добавить(ТаблицаСтраницРаздела[ТекущийИндекс].АктивнаяСтраница);
	КонецЦикла;
	
	Для Каждого Страница Из ТаблицаСтраницРаздела Цикл
		ТекущийИндекс = ТаблицаСтраницРаздела.Индекс(Страница);
		ВывестиМакетВТаблДокНаСервере(ИмяСтраницы, ТекущийИндекс + 1);
		ВывестиНаПечатьЛист(СтруктураПараметровСтраницы, ОбщиеРеквизитыРазделов);
	КонецЦикла;
	
	Для Каждого Страница Из ТаблицаСтраницРаздела Цикл
		ТекущийИндекс = ТаблицаСтраницРаздела.Индекс(Страница);
		ТаблицаСтраницРаздела[ТекущийИндекс].АктивнаяСтраница = МассивПризнаковАктивности[ТекущийИндекс];
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьОбщиеРеквизитыСТитульногоЛиста()
	
	МассивИНН            = Новый Массив(12);
	МассивКПП            = Новый Массив(9);
	МассивДатаПодписи    = Новый Массив(8);
	
	ИсходныйМакет = ТабличныйДокумент;
	
	Область = ИсходныйМакет.Области.Найти("ИНН1");
	
	Если НЕ Область = Неопределено Тогда
		
		СтрИНН = Область.Значение;
		
		Если СтрДлина(СтрИНН) = 10 Тогда
			СтрИНН = СтрИНН + "--";
		КонецЕсли;
			
		Для Ном = 1 По СтрДлина(СтрИНН) Цикл
			
			МассивИНН[Ном - 1] = Сред(СтрИНН, Ном, 1);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Область = ИсходныйМакет.Области.Найти("КПП1");
	
	Если НЕ Область = Неопределено Тогда
		
		Для Ном = 1 По СтрДлина(Область.Значение) Цикл
			
			МассивКПП[Ном - 1] = Сред(Область.Значение, Ном, 1);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Область = ИсходныйМакет.Области.Найти("ДатаПодписи");
	
	Если НЕ Область = Неопределено Тогда
		
		Если ТипЗнч(Область.Значение) = Тип("Строка") Тогда 
			СтрДатаПодписи = Лев(СтрЗаменить(Область.Значение, ".", ""), 8);
		ИначеЕсли ТипЗнч(Область.Значение) = Тип("Дата") Тогда 
			Если ЗначениеЗаполнено(Область.Значение) Тогда 
				СтрДатаПодписи = Лев(СтрЗаменить(Формат(Область.Значение, "ДФ = ""дд.ММ.гггг 'г.'"""), ".", ""), 8);
			Иначе
				СтрДатаПодписи = "        ";
			КонецЕсли;
		КонецЕсли;
		
		Для Ном = 1 По СтрДлина(СтрДатаПодписи) Цикл
			
			МассивДатаПодписи[Ном - 1] = Сред(СтрДатаПодписи, Ном, 1);
			
		КонецЦикла;
		
	КонецЕсли;
	
	ОбщиеРеквизитыРазделов = Новый Структура;
	
	ОбщиеРеквизитыРазделов.Вставить("ИНН", МассивИНН);
	ОбщиеРеквизитыРазделов.Вставить("КПП", МассивКПП);
	ОбщиеРеквизитыРазделов.Вставить("ДатаПодписи", МассивДатаПодписи);
	
	Возврат ОбщиеРеквизитыРазделов;
	
КонецФункции

&НаКлиенте
Процедура СохранитьНаКлиенте(Автосохранение = Ложь, ВыполняемоеОповещение = Неопределено) Экспорт
	
	Вариант = СтруктураРеквизитовФормы.ВидДокумента * НомерКорректировки;

	Если СтруктураДанныхТитульный.Количество() = 0 
	 ИЛИ СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
		
		СтруктураДанныхТитульный.Вставить("НалоговыйОрган", ТабличныйДокумент.Области.НалоговыйОрган.Значение);
		СтруктураДанныхТитульный.Вставить("КПП1",           ТабличныйДокумент.Области.КПП1.Значение);
		
	КонецЕсли;
	
	КодИФНС = СтруктураДанныхТитульный.НалоговыйОрган;
	КПП = СтруктураДанныхТитульный.КПП1;
                       
	Если НЕ РегламентированнаяОтчетностьКлиент.ПриЗаписиРегламентированногоОтчетаНаКлиенте(ЭтаФорма, КодИФНС, Автосохранение, Вариант) Тогда
		Возврат;
	КонецЕсли;
	
	ПодобныйОтчетСуществует = Ложь;
	ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки = Ложь;
	
	Если Элементы.РазделыОтчета.ТекущиеДанные = Неопределено Тогда
		НаименованиеТекущегоРаздела = СтруктураРеквизитовФормы.НаимТекущегоРаздела;
	Иначе
		НаименованиеТекущегоРаздела = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
	КонецЕсли;
	
	РезультатСохранения = ПередСохранением(КодИФНС, КПП, ПодобныйОтчетСуществует, Вариант, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, Автосохранение, НаименованиеТекущегоРаздела);
	
	ВидДокументаНомерКорректировкиИзменен = Неопределено;
	
	Если ПодобныйОтчетСуществует И Автосохранение Тогда
		Возврат;
	КонецЕсли;
	
	НуженВопросПередСохранением = (ПодобныйОтчетСуществует ИЛИ ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки);
	
	Если НуженВопросПередСохранением Тогда
		
		СохранитьНаКлиентеСВопросом(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, ПодобныйОтчетСуществует, КодИФНС, КПП);
		
	Иначе
		
		ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНаКлиентеСВопросом(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, ПодобныйОтчетСуществует, КодИФНС, КПП)
	
	Если ПодобныйОтчетСуществует Тогда
		
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(КодВозвратаДиалога.Да, "Сохранить");
		Кнопки.Добавить(КодВозвратаДиалога.Нет, "Отмена");
		
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Отчет с видом %1 уже существует.
			|Сохранить отчет с таким же видом?'"), ?(Вариант = 0, """Первичный""", """Корректирующий/" + Вариант + """"));
		ДополнительныеПараметры = Новый Структура("Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, КодИФНС, КПП", Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, КодИФНС, КПП);
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросСохранитьОтчетСТакимЖеВидомЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, Кнопки, , Кнопки.Получить(1).Значение);
		
	Иначе
		
		СохранитьНаКлиентеСВопросомПродолжение(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки,КодИФНС, КПП);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросСохранитьОтчетСТакимЖеВидомЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Автосохранение = ДополнительныеПараметры.Автосохранение;
	Вариант = ДополнительныеПараметры.Вариант;
	ВыполняемоеОповещение = ДополнительныеПараметры.ВыполняемоеОповещение;
	КодИФНС = ДополнительныеПараметры.КодИФНС;
	КПП = ДополнительныеПараметры.КПП;
	ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки = ДополнительныеПараметры.ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки;
	
	Ответ = РезультатВопроса;
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	СохранитьНаКлиентеСВопросомПродолжение(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки,КодИФНС, КПП);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНаКлиентеСВопросомПродолжение(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, КодИФНС, КПП)
	
	Если ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки Тогда
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("ВидОтчета", Вариант);
		
		ФормаВопроса = РегламентированнаяОтчетностьКлиент.ПолучитьОбщуюФормуПоИмени("ВопросПриИзмененииВидаДокументаНомераКорректировки", ПараметрыФормы);
		ФормаВопроса.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		ДополнительныеПараметры = Новый Структура("Автосохранение, Вариант, ВыполняемоеОповещение, КодИФНС, КПП", Автосохранение, Вариант, ВыполняемоеОповещение,КодИФНС, КПП );
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросПриИзмененииВидаДокументаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ФормаВопроса.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
		ФормаВопроса.Открыть();
	Иначе
		Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Сохраняется %1...'"), ЭтаФорма.Заголовок), , , БиблиотекаКартинок.Записать);
		РезультатСохранения = Сохранить(Автосохранение, КодИФНС, КПП, Вариант, Неопределено, Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
		ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПриИзмененииВидаДокументаЗавершение(КодВозврата, ДополнительныеПараметры) Экспорт
	
	Автосохранение = ДополнительныеПараметры.Автосохранение;
	Вариант = ДополнительныеПараметры.Вариант;
	ВыполняемоеОповещение = ДополнительныеПараметры.ВыполняемоеОповещение;
	КодИФНС = ДополнительныеПараметры.КодИФНС;
	КПП = ДополнительныеПараметры.КПП;
	Если КодВозврата = КодВозвратаДиалога.Да
		ИЛИ КодВозврата = КодВозвратаДиалога.Нет Тогда
		ВидДокументаНомерКорректировкиИзменен = ?(КодВозврата = КодВозвратаДиалога.Да, Истина, Ложь);
	Иначе
		Возврат;
	КонецЕсли;
	
	Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Сохраняется %1...'"), ЭтаФорма.Заголовок), , , БиблиотекаКартинок.Записать);
	РезультатСохранения = Сохранить(Автосохранение, КодИФНС, КПП, Вариант, ВидДокументаНомерКорректировкиИзменен, Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
	ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения)
	
	КлючУникальности = СтруктураРеквизитовФормы.мСохраненныйДок;
	
	Если РезультатСохранения Тогда
		
		РегламентированнаяОтчетностьКлиент.ПослеЗаписиРегламентированногоОтчета(ЭтаФорма);
		
		Если ВыполняемоеОповещение <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ВыполняемоеОповещение);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПередСохранением(КодИФНС, КПП, ПодобныйОтчетСуществует, Вариант, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, Автосохранение, НаимТекРаздела)
	
	Если РегламентированнаяОтчетность.БылиИзмененыКлючевыеРеквизитыОтчета(ЭтаФорма, КодИФНС, КПП)
	   И РегламентированнаяОтчетность.СуществуетДокументСАналогичнымиРеквизитами(ЭтаФорма, КодИФНС, КПП) Тогда
		
		ПодобныйОтчетСуществует = Истина;
		
	КонецЕсли;
	
	СтруктураРеквизитовФормы.мЗаписываетсяНовыйДокумент
		= (СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено ИЛИ СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено);
	
	Если Вариант <> Неопределено И ((СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено)
		ИЛИ (СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено) ИЛИ (Вариант <> СтруктураРеквизитовФормы.мВариант)) Тогда
		
		Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено ИЛИ СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено Тогда
			
		ИначеЕсли Вариант <> СтруктураРеквизитовФормы.мВариант Тогда
			
			ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки = Истина;
			
		КонецЕсли;

	КонецЕсли;
	
	Если ПодобныйОтчетСуществует
	 ИЛИ ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки Тогда
	
		Возврат Ложь;
		
	КонецЕсли;
	
	Возврат Сохранить(Автосохранение, КодИФНС, КПП, Вариант, , НаимТекРаздела);
	
КонецФункции

&НаСервере
Функция Сохранить(Автосохранение = Ложь, КодИФНС, КПП, Вариант, ВидДокументаНомерКорректировкиИзменен = Неопределено, НаимТекРаздела) Экспорт
	
	ДанныеДляРазблокирования = Неопределено;
	
	Если НЕ СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
		Если НЕ СтруктураРеквизитовФормы.мБезОткрытияФормы Тогда
			ДанныеДляРазблокирования = Новый Структура("Ключ,ИдФормы",
			СтруктураРеквизитовФормы.мСохраненныйДок, ЭтаФорма.УникальныйИдентификатор);
		КонецЕсли;
		СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.ПолучитьОбъект();
	КонецЕсли;
	
	Если НЕ РегламентированнаяОтчетность.ПриЗаписиРегламентированногоОтчетаНаСервере(ЭтаФорма, КодИФНС, Автосохранение, Вариант, ВидДокументаНомерКорректировкиИзменен, СтруктураРеквизитовФормы.мСохраненныйДок) Тогда
		СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
		Возврат Ложь;
	КонецЕсли;

	// Установим текущие значения реквизитов документа.
	СтруктураРеквизитовФормы.мСохраненныйДок.ИсточникОтчета = Метаданные.Отчеты[ИмяОтчета(ЭтаФорма.ИмяФормы)].Имя;
	СтруктураРеквизитовФормы.мСохраненныйДок.НаименованиеОтчета = Метаданные.Отчеты[ИмяОтчета(ЭтаФорма.ИмяФормы)].ОсновнаяФорма.Синоним;
	
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
			
		СтруктураРеквизитовФормы.мСохраненныйДок.ДатаНачала    = ТабличныйДокумент.Области.ДатаСоставленияРасчета.Значение;
		СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания = ТабличныйДокумент.Области.ДатаСоставленияРасчета.Значение;
		
	Иначе
		
		СтруктураРеквизитовФормы.мСохраненныйДок.ДатаНачала    = СтруктураДанныхТитульный.ДатаСоставленияРасчета;
		СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания = СтруктураДанныхТитульный.ДатаСоставленияРасчета;
		
	КонецЕсли;
	
	СтруктураРеквизитовФормы.мСохраненныйДок.Периодичность            = СтруктураРеквизитовФормы.мПериодичность;
	СтруктураРеквизитовФормы.мСохраненныйДок.ВыбраннаяФорма           = СтруктураРеквизитовФормы.мВыбраннаяФорма;
	СтруктураРеквизитовФормы.мСохраненныйДок.Организация              = СтруктураРеквизитовФормы.Организация;
	СтруктураРеквизитовФормы.мСохраненныйДок.ДатаПодписи              = ДатаПодписи;
	СтруктураРеквизитовФормы.мСохраненныйДок.ЕдиницаИзмерения         = СтруктураРеквизитовФормы.ЕдиницаИзмерения;
	СтруктураРеквизитовФормы.мСохраненныйДок.ТочностьЕдиницыИзмерения = СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения;
	СтруктураРеквизитовФормы.мСохраненныйДок.ВидОтчетности            = Перечисления.ВидыОтчетности.РегламентированнаяОтчетность;
	СтруктураРеквизитовФормы.мСохраненныйДок.Комментарий              = Комментарий;
	СтруктураРеквизитовФормы.мСохраненныйДок.КодНалоговогоОргана      = КодИФНС;
	СтруктураРеквизитовФормы.мСохраненныйДок.КПП        			  = КПП;
	СтруктураРеквизитовФормы.мСохраненныйДок.Вид                      = Вариант;
	СтруктураРеквизитовФормы.мСохраненныйДок.ПредставлениеВида        = РегламентированнаяОтчетность.ПредставлениеВидаДокумента(СтруктураРеквизитовФормы.мСохраненныйДок.Вид);
	СтруктураРеквизитовФормы.мВариант                                 = Вариант;

	СтруктураРеквизитовФормы.мСохраненныйДок.ФорматВыгрузки = "Автоматически";
	
	СохранитьДанныеРаздела(НаимТекРаздела, Ложь, Ложь);
	
	ЗаполнитьПустыеСтруктурыДанных();
	
	ПоказателиОтчета = Новый Структура();
	
	ЗаполнитьПоказателиОтчетаНаСервере(ПоказателиОтчета);
	
	СписокСохранения = Новый Структура();
	
	СписокСохранения.Вставить("ПоказателиОтчета", ПоказателиОтчета);
	
	ДанныеМногострочныхРазделов = Новый Структура;
	
	Для Каждого ЭлементСтруктуры Из мСтруктураМногострочныхРазделов Цикл
		
		ДанныеМногострочныхРазделов.Вставить(
			ЭлементСтруктуры.Ключ, ДанныеФормыВЗначение(ЭтаФорма[ЭлементСтруктуры.Значение], Тип("ТаблицаЗначений")));
		
	КонецЦикла;
	
	СписокСохранения.Вставить("ДанныеМногострочныхРазделов", ДанныеМногострочныхРазделов);
	
	ДанныеМногостраничныхРазделов = Новый Структура;
	
	МассивТиповНеопределено = Новый Массив; 
	МассивТиповНеопределено.Добавить(Тип("Неопределено"));
	ОписаниеТиповНеопределено = Новый ОписаниеТипов(МассивТиповНеопределено);
	
	Для Каждого ЭлементСтруктуры Из мСтруктураМногостраничныхРазделов Цикл
		
		ДанныеМногостраничныхРазделов.Вставить(ЭлементСтруктуры.Ключ, ДанныеФормыВЗначение(ЭтаФорма[ЭлементСтруктуры.Значение], Тип("ТаблицаЗначений")));
		
		ТаблЗнач = Неопределено;
		
		Если ДанныеМногостраничныхРазделов.Свойство(ЭлементСтруктуры.Ключ, ТаблЗнач) Тогда
			
			Если НЕ ТаблЗнач.Колонки.Найти("Данные") = Неопределено Тогда
				
				ТаблЗнач.Колонки.Удалить("Данные");
				ТаблЗнач.Колонки.Добавить("Данные", ОписаниеТиповНеопределено);
				
				Ном = 0;
				
				Для Каждого СтрокаТаблЗнач Из ТаблЗнач Цикл
					
					СтрокаТаблЗнач.Данные = ЭтаФорма[ЭлементСтруктуры.Значение][Ном].Данные[0].Значение;
					
					Ном = Ном + 1;
					
				КонецЦикла;
				
			КонецЕсли;
			
			Если НЕ ТаблЗнач.Колонки.Найти("ДанныеДопСтрок") = Неопределено Тогда
				
				ТаблЗнач.Колонки.Удалить("ДанныеДопСтрок");
				ТаблЗнач.Колонки.Добавить("ДанныеДопСтрок", ОписаниеТиповНеопределено);
				
				Ном = 0;
				
				Для Каждого СтрокаТаблЗнач Из ТаблЗнач Цикл
					
					Если (ЭтаФорма[ЭлементСтруктуры.Значение][Ном].ДанныеДопСтрок.Количество() > 0)
					   И (ЭтаФорма[ЭлементСтруктуры.Значение][Ном].ДанныеДопСтрок[0].Представление = "ДанныеФормыКоллекцияТаблицаДопСтрокРаздела") Тогда
						
						СтрокаТаблЗнач.ДанныеДопСтрок = ДанныеФормыВЗначение(
							ЭтаФорма[ЭлементСтруктуры.Значение][Ном].ДанныеДопСтрок[0].Значение, Тип("ТаблицаЗначений"));
						
						Ном = Ном + 1;
						
						Продолжить;
						
					КонецЕсли;
					
					СтруктураДанныхДопСтрок = Новый Структура;
					
					Для Каждого ЭлСтруктуры Из ЭтаФорма[ЭлементСтруктуры.Значение][Ном].ДанныеДопСтрок Цикл
						
						СтруктураДанныхДопСтрок.Вставить(ДанныеФормыВЗначение(ЭлСтруктуры.Значение, Тип("ТаблицаЗначений")));
						
					КонецЦикла;
					
					СтрокаТаблЗнач.ДанныеДопСтрок = СтруктураДанныхДопСтрок;
			
					Ном = Ном + 1;
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	СписокСохранения.Вставить("ДанныеМногостраничныхРазделов", ДанныеМногостраничныхРазделов);
	
	ДанныеВариантовАвтоЗаполнения = Новый Структура;
	
	Для Каждого ЭлементСтруктуры Из мСтруктураВариантыЗаполнения Цикл
		
		МассивТаблЗнач = Новый Массив;
		
		ДанныеВариантовАвтоЗаполнения.Вставить(ЭлементСтруктуры.Ключ, МассивТаблЗнач);
		
		Для Каждого ЭлементМассива Из ЭтаФорма["ТаблицаВариантыЗаполнения" + ЭлементСтруктуры.Ключ] Цикл
			
			МассивТаблЗнач.Добавить(ДанныеФормыВЗначение(ЭлементМассива.ТаблицаВариантовЗаполнения, Тип("ТаблицаЗначений")));
			
		КонецЦикла;
		
	КонецЦикла;
	
	СписокСохранения.Вставить("ДанныеВариантовАвтоЗаполнения", ДанныеВариантовАвтоЗаполнения);
	СписокСохранения.Вставить("ВерсияФормы", СтруктураРеквизитовФормы.мВерсияФормы);
	СписокСохранения.Вставить("ФлПодсчетСтраниц", СтруктураРеквизитовФормы.мСчетчикСтраниц);
	СписокСохранения.Вставить("ФлПроверятьСоотношенияПриПечатиИВыгрузки", СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки);
	СписокСохранения.Вставить("ФлОтклВыборЗначений", СтруктураРеквизитовФормы.мАвтоВыборКодов);
	СписокСохранения.Вставить("Автозаполнение", СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);
	СписокСохранения.Вставить("ПечатьБезШтрихкодаРазрешена", СтруктураРеквизитовФормы.мПечатьБезШтрихкодаРазрешена);
	
	ХранилищеДанных = Новый ХранилищеЗначения(СписокСохранения);
	СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета = ХранилищеДанных;
	
	Попытка
		СтруктураРеквизитовФормы.мСохраненныйДок.Записать();
		РегламентированнаяОтчетность.СохранитьСтатусОтправкиРеглОтчета(ЭтаФорма);
	Исключение
		Если НЕ Автосохранение Тогда
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='%1'"), РегламентированнаяОтчетностьКлиентСервер.СформироватьТекстСообщения(ОписаниеОшибки()));
			Сообщение.Сообщить();
			
		КонецЕсли;
		СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
		Возврат Ложь;
	КонецПопытки;
		
	СохранитьДеревоСтраницОтчета(СтруктураРеквизитовФормы.мСохраненныйДок);

	Модифицированность = Ложь;
	
	СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
	
	Если НЕ СтруктураРеквизитовФормы.мБезОткрытияФормы
       И НЕ СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
				   
    	ЗаблокироватьДанныеДляРедактирования(СтруктураРеквизитовФормы.мСохраненныйДок, , ЭтаФорма.УникальныйИдентификатор);

    КонецЕсли;
	
	Если ДанныеДляРазблокирования <> Неопределено Тогда
		РазблокироватьДанныеДляРедактирования(ДанныеДляРазблокирования.Ключ, ДанныеДляРазблокирования.ИдФормы);
	КонецЕсли;
	
	Возврат Истина;

КонецФункции

&НаСервере
Процедура ЗаполнитьПоказателиОтчетаНаСервере(ПоказателиОтчета)
	
	Префикс = "ПолеТабличногоДокумента";
	
	Для Каждого Раздел Из мСвойстваРазделовДекларации.ПолучитьЭлементы() Цикл
			
		Если НЕ Раздел.МногостраничностьВРазделе Тогда
			ПоказателиОтчета.Вставить(Префикс + Раздел.ИмяСтраницы, ЭтаФорма["СтруктураДанных" + Раздел.ИмяСтраницы]);
		КонецЕсли;
	
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПустыеСтруктурыДанных()
	
	СохрТабличныйДокумент = Новый ТабличныйДокумент;
	
	СохрТабличныйДокумент.Вывести(ТабличныйДокумент);
	
	Для Каждого Раздел Из мСвойстваРазделовДекларации.ПолучитьЭлементы() Цикл
		
		Если НЕ Раздел.МногостраничностьВРазделе
			И (ЭтаФорма["СтруктураДанных" + Раздел.ИмяСтраницы].Количество() = 0) Тогда
			
			ТабличныйДокумент.Очистить();
			ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(
				Сред(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + Раздел.ИмяСтраницы));
			
			СохранитьДанныеРаздела(Раздел.ИмяСтраницы, Ложь);
			
		ИначеЕсли Раздел.МногостраничностьВРазделе
			И (ЭтаФорма[мСтруктураМногостраничныхРазделов[Раздел.ИмяСтраницы]][0].Данные.Количество() = 0) Тогда
			
			ТабличныйДокумент.Очистить();
			ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(
				Сред(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + Раздел.ИмяСтраницы));
			
			ЗаполнитьПоказателиЗначениямиПоУмолчанию(Раздел.ИмяСтраницы);
			
			СохранитьДанныеРаздела(Раздел.ИмяСтраницы, Ложь);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(СохрТабличныйДокумент);
	
КонецПроцедуры

&НаСервере
Процедура СохранитьДеревоСтраницОтчета(Знач мСохраненныйДок)
	
	Если мСохраненныйДок <> Неопределено Тогда
		
		Если ТипЗнч(мСохраненныйДок) = Тип("ДокументСсылка.РегламентированныйОтчет") Тогда
			мСохраненныйДок = мСохраненныйДок.ПолучитьОбъект();
		КонецЕсли;
		
		Если НЕ мСохраненныйДок.ЭтоНовый() Тогда
			// Сохраняем выбранные листы для печати в хранилище.
			ХранилищеДанных = Новый ХранилищеЗначения(РеквизитФормыВЗначение("мДеревоСтраницОтчета"));
			мСохраненныйДок.ДеревоНастройкиСтраниц = ХранилищеДанных;
			Попытка
				мСохраненныйДок.Записать();
			Исключение
			КонецПопытки;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьСохраненныеДанные()
	Перем ДанныеМногострочныхРазделов;
	Перем ДанныеМногостраничныхРазделов;
	Перем ДанныеВариановАвтоЗаполнения;
	Перем ПоказателиОтчета;
	Перем Автозаполнение;
	Перем ТаблицаМногостраничногоДокумента;
	
	// В случае, если формы была скопирована по F9, то проверим, не изменилась ли организация.
	Если НЕ ЗначениеЗаполнено(СтруктураРеквизитовФормы.Организация) Тогда
		СтруктураРеквизитовФормы.Организация = СтруктураРеквизитовФормы.мСохраненныйДок.Организация;
	КонецЕсли;
	
	СтруктураРеквизитовФормы.ЕдиницаИзмерения         = СтруктураРеквизитовФормы.мСохраненныйДок.ЕдиницаИзмерения;
	СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = СтруктураРеквизитовФормы.мСохраненныйДок.ТочностьЕдиницыИзмерения;
	ДатаПодписи = СтруктураРеквизитовФормы.мСохраненныйДок.ДатаПодписи;
	Комментарий	= СтруктураРеквизитовФормы.мСохраненныйДок.Комментарий;
	
	СписокСохранения = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить();
	
	// Список листов, выводимых на печать.
	ДеревоНастройкиСтраниц = СтруктураРеквизитовФормы.мСохраненныйДок.ДеревоНастройкиСтраниц.Получить();
	ЗначениеВРеквизитФормы(ДеревоНастройкиСтраниц.Скопировать(), "мДеревоСтраницОтчета");
	
	Если СписокСохранения.Свойство( "ДанныеМногострочныхРазделов", ДанныеМногострочныхРазделов) Тогда
		Для Каждого ЭлементСтруктуры Из ДанныеМногострочныхРазделов Цикл
			НайденноеЗначение = Неопределено;
			мСтруктураМногострочныхРазделов.Свойство(ЭлементСтруктуры.Ключ, НайденноеЗначение);
			Если НЕ НайденноеЗначение = Неопределено Тогда
				ЗначениеВДанныеФормы(ЭлементСтруктуры.Значение, ЭтаФорма[НайденноеЗначение])
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если СписокСохранения.Свойство("ДанныеВариантовАвтоЗаполнения", ДанныеВариановАвтоЗаполнения) Тогда
		Если НЕ ДанныеВариановАвтоЗаполнения = Неопределено Тогда
			мСтруктураВариантыЗаполнения.Очистить();
			Для Каждого ЭлементСтруктуры Из ДанныеВариановАвтоЗаполнения Цикл
				мСтруктураВариантыЗаполнения.Вставить(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Ключ);
				ЭтаФорма["ТаблицаВариантыЗаполнения" + ЭлементСтруктуры.Ключ].Очистить();
				Для Каждого ЭлементМассива Из ЭлементСтруктуры.Значение Цикл
					ТаблВарЗаполнения = ЭтаФорма["ТаблицаВариантыЗаполнения" + ЭлементСтруктуры.Ключ].Добавить().ТаблицаВариантовЗаполнения;
					ЗначениеВДанныеФормы(ЭлементМассива, ТаблВарЗаполнения);
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	СписокСохранения.Свойство( "ПоказателиОтчета", ПоказателиОтчета );
	
	Если СписокСохранения.Свойство("ДанныеМногостраничныхРазделов", ДанныеМногостраничныхРазделов) Тогда
		
		Для Каждого ЭлементСтруктуры Из ДанныеМногостраничныхРазделов Цикл
			
			НайденноеЗначение = Неопределено;
			
			мСтруктураМногостраничныхРазделов.Свойство(ЭлементСтруктуры.Ключ, НайденноеЗначение);
			
			Если НЕ НайденноеЗначение = Неопределено Тогда
				
				НайденноеЗначение = ЭтаФорма[НайденноеЗначение];
				
				// Учет разнизы между версиями 8.2 и 8.3 в организации хранения данных,
				// необходимый для перехода с версии 8.2 на 8.3.
				Если ЭлементСтруктуры.Значение.Колонки.Найти("ДанныеДопСтрок") = Неопределено Тогда
					ЭлементСтруктуры.Значение.Колонки.Добавить("ДанныеДопСтрок");
				КонецЕсли;
				
				ЗначениеВДанныеФормы(ЭлементСтруктуры.Значение, НайденноеЗначение);
				
				Если НайденноеЗначение[0].Свойство("Данные") Тогда
					
					Для Каждого СтрокаТаблЗнач Из НайденноеЗначение Цикл
						
						Если ТипЗнч(СтрокаТаблЗнач.Данные) = Тип("СписокЗначений") Тогда
							
							СтрокаТаблЗнач.Данные.Очистить();
							СтрокаТаблЗнач.Данные.Добавить(ЭлементСтруктуры.Значение[НайденноеЗначение.Индекс(СтрокаТаблЗнач)].Данные);
							
						КонецЕсли;
						
					КонецЦикла;
					
				КонецЕсли;
				
				Если НайденноеЗначение[0].Свойство("ДанныеДопСтрок") Тогда
					
					Ном = 0;
					
					Для Каждого СтрокаТаблЗнач Из ЭлементСтруктуры.Значение Цикл
						
						Если ТипЗнч(СтрокаТаблЗнач.ДанныеДопСтрок) = Тип("Структура") Тогда
							
							Для Каждого ЭлСтруктуры Из СтрокаТаблЗнач.ДанныеДопСтрок Цикл
								
								ТаблЗнач = ЭлСтруктуры.Значение;
								
								ЭлСтруктуры.Значение = ЭтаФорма["Хранилище" + ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(
									ЭлементСтруктуры.Ключ)].Добавить().Таблица;
								
								ЗначениеВДанныеФормы(ТаблЗнач, ЭлСтруктуры.Значение);
								
								НайденноеЗначение[Ном].ДанныеДопСтрок.Добавить(ЭлСтруктуры.Значение);
								
							КонецЦикла;
							
						ИначеЕсли ТипЗнч(СтрокаТаблЗнач.ДанныеДопСтрок) = Тип("ТаблицаЗначений") Тогда
							
							СтрокаТаблЗначДанныеДопСтрок = ЭтаФорма["Хранилище" + ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(
								ЭлементСтруктуры.Ключ)].Добавить().Таблица;
							
							ЗначениеВДанныеФормы(СтрокаТаблЗнач.ДанныеДопСтрок, СтрокаТаблЗначДанныеДопСтрок);
							
							НайденноеЗначение[Ном].ДанныеДопСтрок.Добавить(СтрокаТаблЗначДанныеДопСтрок, "ДанныеФормыКоллекцияТаблицаДопСтрокРаздела");
							
						КонецЕсли;
						
						Ном = Ном + 1;
						
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Для Каждого Раздел Из мСтруктураМногостраничныхРазделов Цикл
		Для Каждого Страница Из ЭтаФорма[Раздел.Значение] Цикл
			Страница.АктивнаяСтраница = Ложь;
		КонецЦикла;
	КонецЦикла;
	
	СписокСохранения.Свойство("ФлПодсчетСтраниц", СтруктураРеквизитовФормы.мСчетчикСтраниц);
	
	СписокСохранения.Свойство("ФлПроверятьСоотношенияПриПечатиИВыгрузки", СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки);
	СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки = ?(СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки = Неопределено, Ложь, СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки);
	
	СписокСохранения.Свойство("ФлОтклВыборЗначений", СтруктураРеквизитовФормы.мАвтоВыборКодов);
	Если СтруктураРеквизитовФормы.мАвтоВыборКодов = Неопределено Тогда
		СтруктураРеквизитовФормы.мАвтоВыборКодов = Ложь;
	КонецЕсли;
	
	СписокСохранения.Свойство("Автозаполнение", Автозаполнение);
	СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет = Автозаполнение;
	
	Если НЕ СписокСохранения.Свойство("ПечатьБезШтрихкодаРазрешена", СтруктураРеквизитовФормы.мПечатьБезШтрихкодаРазрешена) Тогда
		СтруктураРеквизитовФормы.мПечатьБезШтрихкодаРазрешена = Ложь;
	КонецЕсли;
	
	СформироватьДеревоРазделовОтчетаНаСервере();
	
	Префикс = "ПолеТабличногоДокумента";
	
	Для Каждого Раздел Из мСвойстваРазделовДекларации.ПолучитьЭлементы() Цикл	
		
		Если НЕ Раздел.МногостраничностьВРазделе Тогда
			ЭтаФорма["СтруктураДанных" + Раздел.ИмяСтраницы] = ПоказателиОтчета[Префикс + Раздел.ИмяСтраницы];
		КонецЕсли;
		
	КонецЦикла;
	
	ВосстановитьСведенияОбОрганизацииИзТитульногоЛистаСтарогоОбразца(ПоказателиОтчета);
	
	ИмяТекРаздела = "Титульный";
	
	Для Каждого ЭлСтруктуры Из ЭтаФорма["СтруктураДанных" + ИмяТекРаздела] Цикл
		Попытка
			ТабличныйДокумент.Области[ЭлСтруктуры.Ключ].Значение = ЭлСтруктуры.Значение;
		Исключение
		КонецПопытки;
	КонецЦикла;
	
	РегламентированнаяОтчетность.ОперацииПриВосстановленииРегламентированногоОтчета(ЭтаФорма);
	
	КопироватьДанныеФормы(мДеревоСтраницОтчета, мДеревоВыбранныхСтраниц);
	
	Модифицированность = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьСведенияОбОрганизацииИзТитульногоЛистаСтарогоОбразца(ПоказателиОтчета)
	
	ПоказателиТаблПоле = ПоказателиОтчета["ПолеТабличногоДокументаТитульный"];
	
	Для Каждого Показатель Из ПоказателиТаблПоле Цикл
		
		ИмяПоказателя = Показатель.Ключ;
		
		Если ИмяПоказателя = "ИНН1_1" Тогда
			СтруктураДанныхТитульный.Вставить("ИНН1");
			Для Ном = 1 По 12 Цикл
				СтруктураДанныхТитульный.ИНН1 = СокрЛП(СтруктураДанныхТитульный.ИНН1) + ПоказателиТаблПоле["ИНН1_" + Ном];
				СтруктураДанныхТитульный.Удалить("ИНН1_" + Ном);
			КонецЦикла;
			Если Лев(СтруктураДанныхТитульный.ИНН1, 2) = "00" Тогда
				СтруктураДанныхТитульный.ИНН1 = Сред(СтруктураДанныхТитульный.ИНН1, 3);
			КонецЕсли;
			СтруктураДанныхТитульный.ИНН1 = СтрЗаменить(СтруктураДанныхТитульный.ИНН1, "-", "");
		ИначеЕсли ИмяПоказателя = "КПП1_1" Тогда
			СтруктураДанныхТитульный.Вставить("КПП1");
			Для Ном = 1 По 9 Цикл
				СтруктураДанныхТитульный.КПП1 = СокрЛП(СтруктураДанныхТитульный.КПП1) + ПоказателиТаблПоле["КПП1_" + Ном];
				СтруктураДанныхТитульный.Удалить("КПП1_" + Ном);
			КонецЦикла;
		ИначеЕсли ИмяПоказателя = "НалоговыйОрган1" Тогда
			СтруктураДанныхТитульный.Вставить("НалоговыйОрган");
			Для Ном = 1 По 4 Цикл
				СтруктураДанныхТитульный.НалоговыйОрган = СокрЛП(СтруктураДанныхТитульный.НалоговыйОрган) + ПоказателиТаблПоле["НалоговыйОрган" + Ном];
				СтруктураДанныхТитульный.Удалить("НалоговыйОрган" + Ном);
			КонецЦикла;
		ИначеЕсли ИмяПоказателя = "НомерКорректировки1" Тогда
			СтруктураДанныхТитульный.Вставить("НомерКорректировки");
			Для Ном = 1 По 3 Цикл
				НомерКорр = СокрЛП(ПоказателиТаблПоле["НомерКорректировки" + Ном]);
				Если СтрНайти("0123456789", НомерКорр) > 0 Тогда
					СтруктураДанныхТитульный.НомерКорректировки = СокрЛП(СтруктураДанныхТитульный.НомерКорректировки) + НомерКорр;
				КонецЕсли; 
				СтруктураДанныхТитульный.Удалить("НомерКорректировки" + Ном);
			КонецЦикла;
		ИначеЕсли ИмяПоказателя = "ПоМесту1" Тогда
			СтруктураДанныхТитульный.Вставить("ПоМесту");
			Для Ном = 1 По 3 Цикл
				СтруктураДанныхТитульный.ПоМесту = СокрЛП(СтруктураДанныхТитульный.ПоМесту) + ПоказателиТаблПоле["ПоМесту" + Ном];
				СтруктураДанныхТитульный.Удалить("ПоМесту" + Ном);
			КонецЦикла;
		ИначеЕсли ИмяПоказателя = "Прил1" Тогда
			СтруктураДанныхТитульный.Вставить("Прил");
			Для Ном = 1 По 3 Цикл
				СтруктураДанныхТитульный.Прил = СокрЛП(СтруктураДанныхТитульный.Прил) + ПоказателиТаблПоле["Прил" + Ном];
				СтруктураДанныхТитульный.Удалить("Прил" + Ном);
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
	
	ЗаполнитьДатуВЯчейкахНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтруктуруЗависимыхЯчеекДляАвторасчета()
	
	СтруктураЗависимыхЯчеекДляАвторасчета = Новый Структура;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтруктуруИменКолонокМногострочныхРазделов()
	
	Для каждого ЭлементСтруктуры Из мСтруктураМногострочныхРазделов Цикл
		
		СписокИменРаздела = мСтруктураИменаКолонокРазделов[ЭлементСтруктуры.Ключ];
		ТаблицаРаздела = ДанныеФормыВЗначение(ЭтаФорма[ЭлементСтруктуры.Значение], Тип("ТаблицаЗначений"));
		
		СписокИменРаздела.Очистить();
		
		Для каждого КолонкаТаблицы Из ТаблицаРаздела.Колонки Цикл
			СписокИменРаздела.Добавить(КолонкаТаблицы.Имя);
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура Инициализация(БезОткрытияФормы = Ложь) Экспорт
	
	Перем ИсходноеКоличествоСтрокГруппы;
	
	СтруктураРеквизитовФормы.мБезОткрытияФормы = БезОткрытияФормы;
	
	ЗаполнитьНачальныеНастройки();
	
	ЗаполнитьСтруктуруЗависимыхЯчеекДляАвторасчета();
	
	ЗаполнитьСтруктуруИменКолонокМногострочныхРазделов();
	
	ФормироватьСтруктуруСтраницОтчета();
	
	ФормироватьСтруктуруСвойствСтраниц();
	
	СформироватьДеревоРазделовОтчетаНаСервере();
	
	СтруктураРеквизитовФормы.мАвтоВыборКодов = Ложь;
	СтруктураРеквизитовФормы.мРежимПечати = Ложь;
	
	СтруктураРеквизитовФормы.ВидДокумента = 0;
	НомерКорректировки = 1;
	
	Если НЕ БезОткрытияФормы Тогда
		
		СформироватьСпискиВыбора();
		
	КонецЕсли;
	
	Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
		
		ЗаполнитьКодПоМестуЗначениемПоУмолчанию();
		
		Если СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено Тогда
			
			ВосстановитьСохраненныеДанные();
			
		Иначе
			
			Если НЕ СтруктураРеквизитовФормы.мБезОткрытияФормы Тогда
				СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки = Ложь;
			КонецЕсли;
			
			СтруктураРеквизитовФормы.ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1;
			СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = 0;
			
			ТабличныйДокумент.Области.ДатаСоставленияРасчета.Значение = ДатаПодписи;
			
			КопироватьДанныеФормы(мДеревоСтраницОтчета, мДеревоВыбранныхСтраниц);
			
		КонецЕсли;
		
		Модифицированность = Истина;
		
	Иначе
		
		ВосстановитьСохраненныеДанные();
		
		Если ЗначениеЗаполнено(СтруктураРеквизитовФормы.мСкопированаФорма) Тогда
			
			ПредОрг_ЭтоПБОЮЛ = НЕ РегламентированнаяОтчетностьПереопределяемый.ЭтоЮридическоеЛицо(
			СтруктураРеквизитовФормы.мСохраненныйДок.Организация);
			ТекОрг_ЭтоПБОЮЛ = НЕ РегламентированнаяОтчетностьПереопределяемый.ЭтоЮридическоеЛицо(
			СтруктураРеквизитовФормы.Организация);
			
			Если ПредОрг_ЭтоПБОЮЛ <> ТекОрг_ЭтоПБОЮЛ Тогда
				ЗаполнитьКодПоМестуЗначениемПоУмолчанию();
			КонецЕсли;
			
			СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено;
			
			ДатаПодписи	= Параметры.ДатаПодписи; 
			
			ТабличныйДокумент.Области.ДатаСоставленияРасчета.Значение = ДатаПодписи;
			
		КонецЕсли;
		
		Если НЕ БезОткрытияФормы
           И НЕ СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
				   
        	ЗаблокироватьДанныеДляРедактирования(СтруктураРеквизитовФормы.мСохраненныйДок, , ЭтаФорма.УникальныйИдентификатор);

        КонецЕсли;
		
	КонецЕсли;
	
	ЗаполнитьПустыеСтруктурыДанных();
	
	ПоказатьПериод();
	
	Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено
		ИЛИ ЗначениеЗаполнено(СтруктураРеквизитовФормы.мСкопированаФорма) Тогда
		
		ЗаполнитьСведенияОбОрганизацииНаСервере();
		
	КонецЕсли;
	
	Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено
		И НЕ ЗначениеЗаполнено(СтруктураРеквизитовФормы.мСкопированаФорма) Тогда
		ЗаполнитьКБК(ЭтаФорма);
	КонецЕсли;
	
	СтруктураРеквизитовФормы.НаимОрганизации = СтруктураРеквизитовФормы.Организация.Наименование;
	
	Если НЕ БезОткрытияФормы Тогда
		РегламентированнаяОтчетностьКлиентСервер.ПоказатьКнопкиПечати(ЭтаФорма);
	КонецЕсли;
	
	СтруктураРеквизитовФормы.ИсходныйКодПоМесту = ТабличныйДокумент.Области.ПоМесту.Значение;
	
	НомерКорректировки = НомерКорректировки * СтруктураРеквизитовФормы.ВидДокумента;
	ТабличныйДокумент.Области.НомерКорректировки.Значение = НомерКорректировки;
	ТабличныйДокумент.Области.ДатаПодписи.Значение = ДатаПодписи;
	мСкопированаФорма = Неопределено;
	Параметры.Свойство("мСкопированаФорма", мСкопированаФорма);
	Если ЗначениеЗаполнено(мСкопированаФорма) Тогда 
		Модифицированность = Истина;
	КонецЕсли;
	
	СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
	
	УстановитьФорматВыводаНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
	УстановитьДоступностьОбластей(ЭтаФорма, "Титульный");
	
	РегламентированнаяОтчетность.ДобавитьКнопкуПрисоединенныеФайлы(ЭтаФорма);
	
	РегламентированнаяОтчетностьКлиентСервер.ПриИнициализацииФормыРегламентированногоОтчета(ЭтаФорма);
	
	СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета  = ТабличныйДокумент.Области.ДатаСоставленияРасчета.Значение;
	СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета = ТабличныйДокумент.Области.ДатаСоставленияРасчета.Значение;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьКодПоМестуЗначениемПоУмолчанию()
	
	ЭтоПБОЮЛ = НЕ РегламентированнаяОтчетностьПереопределяемый.ЭтоЮридическоеЛицо(СтруктураРеквизитовФормы.Организация);
	Если ЭтоПБОЮЛ Тогда
		ТабличныйДокумент.Области["ПоМесту"].Значение = "120";
	Иначе
		ТабличныйДокумент.Области["ПоМесту"].Значение = "210";
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ФормироватьСтруктуруСтраницОтчета() Экспорт
	
	мДеревоСтраницОтчета.ПолучитьЭлементы().Очистить();
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Титульный";
	СтрокаУровня1.Представление            = "Титульный лист";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Сведения";
	СтрокаУровня1.Представление            = "Сведения";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 0;
	СтрокаУровня1.ПоказатьСтраницу         = 0;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел1";
	СтрокаУровня1.Представление            = "Раздел 1";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНачальныеНастройки() Экспорт
	
	МакетСоставаПоказателей = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(
		СтруктураРеквизитовФормы.мСоставПоказателей);
	
	Для Инд = 0 По МакетСоставаПоказателей.Области.Количество() - 1 Цикл
		
		ТекОбласть    = МакетСоставаПоказателей.Области[Инд];
		ИмяСтраницы   = ТекОбласть.Имя;
		
		ЭтаФорма["ТаблицаВариантыЗаполнения" + ИмяСтраницы].Добавить();
		
		Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
			КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
			ИмяПоказателя = КодПоказателя;
			
			Если КодПоказателя = "===" Тогда         // признак конечной строки
				Прервать;
			КонецЕсли;
			
			Если Лев(КодПоказателя, 2) = "//" Тогда  // пропускаем комментарии
				Продолжить;
			КонецЕсли;
			
			КодПоказателяПоФорме = СокрЛП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
			ПризнМногострочность = СокрЛП(МакетСоставаПоказателей.Область(Ном, 3).Текст);
			ТипДанныхРеквизита   = СокрЛП(МакетСоставаПоказателей.Область(Ном, 4).Текст);
			стрКолСтрокИсходный  = СокрЛП(МакетСоставаПоказателей.Область(Ном, 5).Текст);
			стрВариантЗаполнения = РегламентированнаяОтчетность.ПолучитьВариантЗаполненияПоказателяРегОтчета(МакетСоставаПоказателей, Ном);
			КодПоказателяПоСтруктуре = СокрЛП(МакетСоставаПоказателей.Область(Ном, 9).Текст);
			
			чКолСтрокИсходный  = ? (ПустаяСтрока(стрКолСтрокИсходный),  0, Число(стрКолСтрокИсходный));
			чВариантЗаполнения = ? (ПустаяСтрока(стрВариантЗаполнения), 0, Число(стрВариантЗаполнения));
			
			НоваяСтрока = мТаблицаСоставПоказателей.Добавить();
			НоваяСтрока.ИмяПоляТаблДокумента   = ИмяСтраницы;
			НоваяСтрока.КодПоказателяПоСоставу = КодПоказателя;
			НоваяСтрока.КодПоказателяПоФорме   = КодПоказателяПоФорме;
			НоваяСтрока.ПризнМногострочности   = ПризнМногострочность;
			НоваяСтрока.ТипДанныхПоказателя    = ТипДанныхРеквизита;
			НоваяСтрока.КодПоказателяПоСтруктуре = КодПоказателяпоСтруктуре;
			
			Если чВариантЗаполнения <> 0 Тогда
				НоваяСтрока = ЭтаФорма["ТаблицаВариантыЗаполнения" + ИмяСтраницы][0].ТаблицаВариантовЗаполнения.Добавить();
				НоваяСтрока.КодПоказателя      = ? (Не ПустаяСтрока(КодПоказателяПоФорме), КодПоказателяПоФорме, КодПоказателя);
				НоваяСтрока.ВариантЗаполнения  = чВариантЗаполнения;
				НоваяСтрока.КодПоказателяПоСтруктуре  = КодПоказателяПоСтруктуре;
			КонецЕсли;
			
		КонецЦикла;
		
		Если ЭтаФорма["ТаблицаВариантыЗаполнения" + ИмяСтраницы][0].ТаблицаВариантовЗаполнения.Количество() > 0 Тогда
			мСтруктураВариантыЗаполнения.Вставить(ИмяСтраницы, ИмяСтраницы);
			мСтруктураВариантыЗаполненияЭталон.Вставить(ИмяСтраницы, ИмяСтраницы);
		Конецесли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьСпискиВыбора()
	
	МакетСоставаПоказателей = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет("СпискиВыбора2016Кв4");
	
	КоллекцияСписковВыбора = Новый Соответствие;
	Для Каждого Область Из МакетСоставаПоказателей.Области Цикл
		Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Строки Тогда
			ВерхОбласти = Область.Верх;
			НизОбласти = Область.Низ;
			ТаблСписка = Новый ТаблицаЗначений;
			ТаблСписка.Колонки.Добавить("Код",,, МакетСоставаПоказателей.Область(ВерхОбласти, 1, ВерхОбласти, 1).ШиринаКолонки);
			ТаблСписка.Колонки.Добавить("Название",,, МакетСоставаПоказателей.Область(ВерхОбласти, 2, ВерхОбласти, 2).ШиринаКолонки);
			ТаблСписка.Колонки.Добавить("РезультатПроверки",,, 0);
			Для НомСтр = ВерхОбласти По НизОбласти Цикл
				КодПоказателя = СокрП(МакетСоставаПоказателей.Область(НомСтр, 1).Текст);
				Если КодПоказателя <> "###" Тогда
					НовСтрока = ТаблСписка.Добавить();
					НовСтрока.Код = КодПоказателя;
					НовСтрока.Название = СокрП(МакетСоставаПоказателей.Область(НомСтр, 2).Текст);
					НовСтрока.РезультатПроверки = СокрП(МакетСоставаПоказателей.Область(НомСтр, 3).Текст);
				КонецЕсли;
			КонецЦикла;
			КоллекцияСписковВыбора.Вставить(Область.Имя, ТаблСписка);
		КонецЕсли;
	КонецЦикла;
	
	СвойстваПоказателей.Очистить();
	
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "ПоМесту", 3, ,
		"Выбор кода представления по месту нахождения (учета)", КоллекцияСписковВыбора["КодыПоМесту"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "ПрПодп", 1, ,
		"Выбор типа подписанта", КоллекцияСписковВыбора["ТипыПодписантов"]);
	
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "КодВидаДокумента", 2, ,
		"Выбор кода вида документа", КоллекцияСписковВыбора["КодыВидовДокументов"]);
		
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000010001001", 20, ,
		"Выбор КБК", КоллекцияСписковВыбора["КодыБюджетнойКлассификации_Раздел1"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000010004001", 2, ,
		"Выбор вида транспортного средства", КоллекцияСписковВыбора["КодыВидовТС"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000010009001", 3, ,
		"Выбор категории транспортного средства", КоллекцияСписковВыбора["КодыКатегорийТС"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000010011001", 1, ,
		"Выбор типа двигателя", КоллекцияСписковВыбора["КодыТиповДвигателей"]);
	
КонецПроцедуры

&НаКлиенте
Процедура ВвестиПоказатель(Элемент, Область, КодПоказателя, Знач ЭтоСумма, Знач ТекстВыбора, ТаблицаВыбора, СтандартнаяОбработка, КолонкаПоиска = "Код", ИсходныйКодПоМесту) Экспорт
	
	Если ТаблицаВыбора = Неопределено ИЛИ СтруктураРеквизитовФормы.мАвтоВыборКодов Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	Если Область.Имя = КодПоказателя ИЛИ РегламентированнаяОтчетностьКлиентСервер.ПоказательВходитВМногострочнуюЧасть(ЭтаФорма, КодПоказателя) > 0 Тогда
		ИсходноеЗначение = ?(ТипЗнч(Область.Значение) = Тип("Строка"), СокрЛП(Область.Значение), Область.Значение);
	Иначе
		Разделитель = ?(Лев(Область.Имя, СтрДлина(КодПоказателя) + 1) = КодПоказателя + "_", "_", "");
		ИндексОбласти = 1;
		ИсходноеЗначение = "";
		Пока ЭтаФорма[ТекущийЭлемент.Имя].Области.Найти(КодПоказателя + Разделитель + Формат(ИндексОбласти, "ЧГ=")) <> Неопределено Цикл
			ИсходноеЗначение = ИсходноеЗначение + Строка(ЭтаФорма[ТекущийЭлемент.Имя].Области[КодПоказателя + Разделитель + Формат(ИндексОбласти, "ЧГ=")].Значение);
			ИндексОбласти = ИндексОбласти + 1;
		КонецЦикла;
		ИсходноеЗначение = СокрЛП(ИсходноеЗначение);
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Заголовок",          ТекстВыбора);
	ПараметрыФормы.Вставить("ТаблицаЗначений",    ТаблицаВыбора);
	ПараметрыФормы.Вставить("СтруктураДляПоиска", Новый Структура(КолонкаПоиска, ИсходноеЗначение));
	
	ДополнительныеПараметры = Новый Структура("ИндексОбласти, ИсходныйКодПоМесту, КодПоказателя, КолонкаПоиска, Область, Разделитель", ИндексОбласти, ИсходныйКодПоМесту, КодПоказателя, КолонкаПоиска, Область, Разделитель);
	ОписаниеОповещения = Новый ОписаниеОповещения("ВвестиПоказательЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ОткрытьФорму(
		"Обработка.ОбщиеОбъектыРеглОтчетности.Форма.ФормаВыбораЗначенияИзТаблицы", ПараметрыФормы, ЭтаФорма,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры

&НаКлиенте
Процедура ВвестиПоказательЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	ИндексОбласти = ДополнительныеПараметры.ИндексОбласти;
	ИсходныйКодПоМесту = ДополнительныеПараметры.ИсходныйКодПоМесту;
	КодПоказателя = ДополнительныеПараметры.КодПоказателя;
	КолонкаПоиска = ДополнительныеПараметры.КолонкаПоиска;
	Область = ДополнительныеПараметры.Область;
	Разделитель = ДополнительныеПараметры.Разделитель;
	
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Область.Имя = КодПоказателя
		ИЛИ РегламентированнаяОтчетностьКлиентСервер.ПоказательВходитВМногострочнуюЧасть(ЭтаФорма, КодПоказателя) > 0 Тогда
		Область.Значение = РезультатВыбора[КолонкаПоиска];
	Иначе
		СтрокаРезультатВыбора = Строка(РезультатВыбора[КолонкаПоиска]);
		Для Инд = СтрДлина(СтрокаРезультатВыбора) + 1 По ИндексОбласти - 1 Цикл
			СтрокаРезультатВыбора = " " + РезультатВыбора[КолонкаПоиска];
		КонецЦикла;
		Для Инд = 1 По ИндексОбласти - 1 Цикл
			ЭтаФорма[ТекущийЭлемент.Имя].Области[КодПоказателя + Разделитель + Формат(Инд, "ЧГ=")].Значение
			= СокрЛП(Сред(РезультатВыбора[КолонкаПоиска], Инд, 1));
		КонецЦикла;
	КонецЕсли;
	
	Расчет(ЭтаФорма, "", "");
	
	Модифицированность = Истина;
	
	ТабличныйДокументВыборЗавершение(ИсходныйКодПоМесту);
	
КонецПроцедуры

&НаСервере
Процедура СообщитьВТС(Описание, Раздел, ИмяЯчейки, ФИО = "")
	
	РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, Описание, Раздел, ИмяЯчейки, ФИО);
	
КонецПроцедуры

&НаСервере
Функция ИзвлечьСтруктуруXML()
	
	ДеревоСтруктуры = Новый ДеревоЗначений;
	ДеревоСтруктуры.Колонки.Добавить("Код");
	ДеревоСтруктуры.Колонки.Добавить("Тип");
	ДеревоСтруктуры.Колонки.Добавить("Формат");
	ДеревоСтруктуры.Колонки.Добавить("МинРазмерность");
	ДеревоСтруктуры.Колонки.Добавить("МаксРазмерность");
	ДеревоСтруктуры.Колонки.Добавить("Обязательность");
	ДеревоСтруктуры.Колонки.Добавить("Многостраничность");
	ДеревоСтруктуры.Колонки.Добавить("Многострочность");
	ДеревоСтруктуры.Колонки.Добавить("Раздел");
	ДеревоСтруктуры.Колонки.Добавить("Ключ");
	ДеревоСтруктуры.Колонки.Добавить("Условие");
	ДеревоСтруктуры.Колонки.Добавить("ЗначениеПоУмолчанию");
	ДеревоСтруктуры.Колонки.Добавить("Значение");
	ДеревоСтруктуры.Колонки.Добавить("Представление");
	ДеревоСтруктуры.Колонки.Добавить("Показатели");
	
	Макет = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет("СхемаВыгрузки504");

	ВысотаТаблицы = Макет.ВысотаТаблицы;
	
	УчтенныеГруппы = Новый Соответствие;
	
	Для Уровень = 0 По Макет.КоличествоУровнейГруппировокСтрок() - 1 Цикл
		Макет.ПоказатьУровеньГруппировокСтрок(Уровень);
		Для НомерСтроки = 2 По ВысотаТаблицы Цикл
			НомСтр = ВысотаТаблицы - НомерСтроки + 2;
			Если Макет.Область(НомСтр, 1).Видимость И УчтенныеГруппы.Получить(НомСтр) = Неопределено Тогда
				
				РодительскийУзел = ДеревоСтруктуры;
				Если Уровень <> 0 Тогда
					Для Инд = 1 По НомСтр - 2 Цикл
						Узел = УчтенныеГруппы.Получить(НомСтр - Инд);
						Если Узел <> Неопределено Тогда
							РодительскийУзел = Узел;
							Прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				НовСтр = РодительскийУзел.Строки.Вставить(0);
				НовСтр.Код = СокрЛП(Макет.Область(НомСтр, 1, НомСтр, 1).Текст);
				НовСтр.Раздел = СокрЛП(Макет.Область(НомСтр, 2, НомСтр, 2).Текст);
				НовСтр.Ключ = СокрЛП(Макет.Область(НомСтр, 3, НомСтр, 3).Текст);
				НовСтр.Тип = СокрЛП(Макет.Область(НомСтр, 4, НомСтр, 4).Текст);
				НовСтр.Формат = СокрЛП(Макет.Область(НомСтр, 5, НомСтр, 5).Текст);
				МинРазмерность = СокрЛП(Макет.Область(НомСтр, 6, НомСтр, 6).Текст);
				НовСтр.МинРазмерность = ?(ПустаяСтрока(МинРазмерность), ?(НовСтр.Формат = "N", 99999, 0), Число(МинРазмерность));
				МаксРазмерность = СокрЛП(Макет.Область(НомСтр, 7, НомСтр, 7).Текст);
				НовСтр.МаксРазмерность = ?(ПустаяСтрока(МаксРазмерность), 99999, Число(МаксРазмерность));
				НовСтр.Обязательность = СокрЛП(Макет.Область(НомСтр, 8, НомСтр, 8).Текст);
				НовСтр.Многостраничность = НЕ ПустаяСтрока(Макет.Область(НомСтр, 9, НомСтр, 9).Текст);
				НовСтр.Многострочность = НЕ ПустаяСтрока(Макет.Область(НомСтр, 10, НомСтр, 10).Текст);
				НовСтр.Условие = СокрЛП(Макет.Область(НомСтр, 11, НомСтр, 11).Текст);
				НовСтр.ЗначениеПоУмолчанию = СокрЛП(Макет.Область(НомСтр, 12, НомСтр, 12).Текст);
				НовСтр.Представление = СокрЛП(Макет.Область(НомСтр, 13, НомСтр, 13).Текст);
				
				УчтенныеГруппы.Вставить(НомСтр, НовСтр);
				
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат ДеревоСтруктуры;
	
КонецФункции

&НаСервере
Функция ПроверитьПоказатели() Экспорт
	
	СформироватьСтруктуруПоказателей();
	ДеревоВыгрузки = ИзвлечьСтруктуруXML();
	ПараметрыВыгрузки = СформироватьСтруктуруПараметров();
	Если НЕ ПроверитьВозможностьВыгрузки(ПараметрыВыгрузки, ДеревоВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	ЗаполнитьДанными(ДеревоВыгрузки, ПараметрыВыгрузки);
	Если НЕ ПроверитьДанные(ДеревоВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция СформироватьСтруктуруПоказателей()
	
	мДанныеОтчета = Новый Структура;
	
	СохрСтруктура = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить();
	ПоказателиОтчета = СохрСтруктура.ПоказателиОтчета;
	Для Каждого Раздел Из ПоказателиОтчета Цикл
		мДанныеОтчета.Вставить(СтрЗаменить(Раздел.Ключ, "ПолеТабличногоДокумента", ""),
			РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(Раздел.Значение));
	КонецЦикла;
	
	ТекущийРаздел = Неопределено;
	Если мСтруктураМногостраничныхРазделов.Свойство(СтруктураРеквизитовФормы.НаимТекущегоРаздела, ТекущийРаздел) Тогда
		АктивнаяСтраница = ЭтаФорма[ТекущийРаздел].НайтиСтроки(Новый Структура("АктивнаяСтраница", Истина));
		Если АктивнаяСтраница.Количество() > 0 Тогда
			АктивнаяСтраница = АктивнаяСтраница[0];
			ИндексАктивнойСтраницы = ЭтаФорма[ТекущийРаздел].Индекс(АктивнаяСтраница);
		КонецЕсли;
	КонецЕсли;

	Для Каждого ЭлементСтруктуры Из СохрСтруктура.ДанныеМногостраничныхРазделов Цикл
		
		НайденноеЗначение = Неопределено;
		
		мСтруктураМногостраничныхРазделов.Свойство(ЭлементСтруктуры.Ключ, НайденноеЗначение);
		
		Если НЕ НайденноеЗначение = Неопределено Тогда
			
			НайденноеЗначение = ЭтаФорма[НайденноеЗначение];
			
			// Учет разнизы между версиями 8.2 и 8.3 в организации хранения данных,
			// необходимый для перехода с версии 8.2 на 8.3.
			Если ЭлементСтруктуры.Значение.Колонки.Найти("ДанныеДопСтрок") = Неопределено Тогда
				ЭлементСтруктуры.Значение.Колонки.Добавить("ДанныеДопСтрок");
			КонецЕсли;
			
			ЗначениеВДанныеФормы(ЭлементСтруктуры.Значение, НайденноеЗначение);
			
			Если НайденноеЗначение[0].Свойство("Данные") Тогда
				
				Для Каждого СтрокаТаблЗнач Из НайденноеЗначение Цикл
					
					Если ТипЗнч(СтрокаТаблЗнач.Данные) = Тип("СписокЗначений") Тогда
						
						СтрокаТаблЗнач.Данные.Очистить();
						СтрокаТаблЗнач.Данные.Добавить(ЭлементСтруктуры.Значение[НайденноеЗначение.Индекс(СтрокаТаблЗнач)].Данные);
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
			Если НайденноеЗначение[0].Свойство("ДанныеДопСтрок") Тогда
				
				Ном = 0;
				
				Для Каждого СтрокаТаблЗнач Из ЭлементСтруктуры.Значение Цикл
					
					Если ТипЗнч(СтрокаТаблЗнач.ДанныеДопСтрок) = Тип("Структура") Тогда
						
						Для Каждого ЭлСтруктуры Из СтрокаТаблЗнач.ДанныеДопСтрок Цикл
							
							ТаблЗнач = ЭлСтруктуры.Значение;
							
							ЭлСтруктуры.Значение = ЭтаФорма["Хранилище" + ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ЭлементСтруктуры.Ключ)].Добавить().Таблица;
							
							ЗначениеВДанныеФормы(ТаблЗнач, ЭлСтруктуры.Значение);
							
							НайденноеЗначение[Ном].ДанныеДопСтрок.Добавить(ЭлСтруктуры.Значение);
							
						КонецЦикла;
						
					ИначеЕсли ТипЗнч(СтрокаТаблЗнач.ДанныеДопСтрок) = Тип("ТаблицаЗначений") Тогда
						
						СтрокаТаблЗначДанныеДопСтрок = ЭтаФорма["Хранилище" + ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ЭлементСтруктуры.Ключ)].Добавить().Таблица;
						
						ЗначениеВДанныеФормы(СтрокаТаблЗнач.ДанныеДопСтрок, СтрокаТаблЗначДанныеДопСтрок);
						
						НайденноеЗначение[Ном].ДанныеДопСтрок.Добавить(СтрокаТаблЗначДанныеДопСтрок, "ДанныеФормыКоллекцияТаблицаДопСтрокРаздела");
						
					КонецЕсли;
					
					Ном = Ном + 1;
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого Раздел Из мСтруктураМногостраничныхРазделов Цикл
		Для Каждого Страница Из ЭтаФорма[Раздел.Значение] Цикл
			Страница.АктивнаяСтраница = Ложь;
		КонецЦикла;
	КонецЦикла;

	ТекущийРаздел = Неопределено;
	Если мСтруктураМногостраничныхРазделов.Свойство(СтруктураРеквизитовФормы.НаимТекущегоРаздела, ТекущийРаздел) Тогда
		Если ИндексАктивнойСтраницы <> Неопределено Тогда
			ЭтаФорма[ТекущийРаздел][ИндексАктивнойСтраницы].АктивнаяСтраница = Истина;
		КонецЕсли;
	КонецЕсли;

	Для Каждого Раздел Из мСтруктураМногостраничныхРазделов Цикл
		ТаблицаЛистовРаздела = ЭтаФорма[Раздел.Значение];
		Для Каждого Лист Из ТаблицаЛистовРаздела Цикл
			Лист.Данные[0].Значение = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(Лист.Данные[0].Значение);
		КонецЦикла;
		мДанныеОтчета.Вставить(Раздел.Ключ, ЭтаФорма[Раздел.Значение]);
	КонецЦикла;
	
КонецФункции

&НаСервере
Функция СформироватьСтруктуруПараметров()
	
	Титульный = мДанныеОтчета.Титульный;
	
	ПараметрыВыгрузки = Новый Структура;
	
	КодПоМесту = СокрЛП(Титульный.ПоМесту);
	
	ВключитьСведенияФЛ = (КодПоМесту = "112");
	ЭтоПБОЮЛ = (Не РегламентированнаяОтчетностьПереопределяемый.ЭтоЮридическоеЛицо(
		СтруктураРеквизитовФормы.Организация) ИЛИ ВключитьСведенияФЛ);
	
	ПараметрыВыгрузки.Вставить("ЭтоПБОЮЛ", ЭтоПБОЮЛ);
	ПараметрыВыгрузки.Вставить("ВключитьСведенияФЛ", ВключитьСведенияФЛ);
	
	ПараметрыВыгрузки.Вставить("ВерсПрог", РегламентированнаяОтчетность.НазваниеИВерсияПрограммы());
	
	ПараметрыВыгрузки.Вставить("ДатаДок", Формат(ТекущаяДатаСеанса(), "ДФ=дд.ММ.гггг"));
	ПараметрыВыгрузки.Вставить("КодНО", СокрЛП(Титульный.НалоговыйОрган));
	ПараметрыВыгрузки.Вставить("НомКорр", Строка(СтруктураРеквизитовФормы.мСохраненныйДок.Вид));
	ПараметрыВыгрузки.Вставить("ПоМесту", КодПоМесту);
	ПараметрыВыгрузки.Вставить("ДатаРасч", Титульный.ДатаСоставленияРасчета);
	ПараметрыВыгрузки.Вставить("Тлф", СокрЛП(Титульный.ТелОрганизации));
	
	Если ЭтоПБОЮЛ Тогда
		ИНН = СокрЛП(Титульный.ИНН1);
		ПараметрыВыгрузки.Вставить("ИНН", ИНН);
		
		ФИО = РегламентированнаяОтчетность.РазложитьФИО(Титульный.НаимОрг);
		ПараметрыВыгрузки.Вставить("ФЛФамилия",  ФИО.Фамилия);
		ПараметрыВыгрузки.Вставить("ФЛИмя",      ФИО.Имя);
		ПараметрыВыгрузки.Вставить("ФЛОтчество", ФИО.Отчество);
		
		Если НЕ ЗначениеЗаполнено(ИНН) Тогда
			Сведения = мДанныеОтчета.Сведения;
			ПараметрыВыгрузки.Вставить("ВидДокумента", СокрЛП(Сведения.КодВидаДокумента));
			ПараметрыВыгрузки.Вставить("СерияНомер", СокрЛП(Сведения.СерияНомерДокумента));
			ПараметрыВыгрузки.Вставить("КемВыдан", СокрЛП(Сведения.КемВыданДокумент));
			ПараметрыВыгрузки.Вставить("ДатаВыдачи", Сведения.ДатаВыдачи);
			
			ПараметрыВыгрузки.Вставить("Индекс", СокрЛП(Сведения.АдресИндекс));
			ПараметрыВыгрузки.Вставить("КодРегион", СокрЛП(Сведения.АдресКодРегиона));
			ПараметрыВыгрузки.Вставить("Район", СокрЛП(Сведения.АдресРайон));
			ПараметрыВыгрузки.Вставить("Город", СокрЛП(Сведения.АдресГород));
			ПараметрыВыгрузки.Вставить("НаселПункт", СокрЛП(Сведения.АдресНаселенныйПункт));
			ПараметрыВыгрузки.Вставить("Улица", СокрЛП(Сведения.АдресУлица));
			ПараметрыВыгрузки.Вставить("Дом", СокрЛП(Сведения.АдресНомерДома));
			ПараметрыВыгрузки.Вставить("Корпус", СокрЛП(Сведения.АдресНомерКорпуса));
			ПараметрыВыгрузки.Вставить("Кварт", СокрЛП(Сведения.АдресНомерКвартиры));
		КонецЕсли;
		
	Иначе
		ПараметрыВыгрузки.Вставить("НаимОрг", СокрЛП(Титульный.НаимОрг));
		ПараметрыВыгрузки.Вставить("ИНН",  СокрЛП(СтруктураРеквизитовФормы.Организация.ИНН));
		ПараметрыВыгрузки.Вставить("КПП",  СокрЛП(Титульный.КПП1));
		
	КонецЕсли;
	
	ПараметрыВыгрузки.Вставить("ПрПодп", СокрЛП(Титульный.ПрПодп));
	
	ФИОПодписанта = РегламентированнаяОтчетность.РазложитьФИО(Титульный.ОргПодписант);
	ПараметрыВыгрузки.Вставить("ПодпФамилия",  ФИОПодписанта.Фамилия);
	ПараметрыВыгрузки.Вставить("ПодпИмя",      ФИОПодписанта.Имя);
	ПараметрыВыгрузки.Вставить("ПодпОтчество", ФИОПодписанта.Отчество);
	
	ПараметрыВыгрузки.Вставить("ПодпНаимДок", СокрЛП(Титульный.ДокУпПред));
	ПараметрыВыгрузки.Вставить("ПодпНаимОрг", СокрЛП(Титульный.ОргУп));
	
	ПараметрыВыгрузки.Вставить("ПрефиксИмениФайлаВыгрузки", "NO_UTILSB");
	ПараметрыВыгрузки.Вставить("КодИФНСПосредника", ?(СтруктураРеквизитовФормы.Организация.КрупнейшийНалогоплательщик,
		СокрЛП(СтруктураРеквизитовФормы.Организация.КодНалоговогоОрганаПолучателя), ""));
	ПараметрыВыгрузки.Вставить("ИдФайл", СформироватьИдФайл(ПараметрыВыгрузки));
	
	Раздел1 = мДанныеОтчета.Раздел1[0];
	КБК       = СокрЛП(Раздел1.Данные[0].Значение.П000010001001);
	ОКТМО     = СокрЛП(Раздел1.Данные[0].Значение.П000010002001);
	СборПУОбщ = Раздел1.Данные[0].Значение.П000010003001;
	
	ПараметрыВыгрузки.Вставить("КБК", КБК);
	ПараметрыВыгрузки.Вставить("ОКТМО", ОКТМО);
	ПараметрыВыгрузки.Вставить("СборПУОбщ", СборПУОбщ);
	
	Возврат ПараметрыВыгрузки;
	
КонецФункции

&НаСервере
Функция СформироватьИдФайл(ПараметрыВыгрузки)
	
	ИНН = ПараметрыВыгрузки.ИНН;
	Если ПараметрыВыгрузки.ПоМесту = "112" И НЕ ЗначениеЗаполнено(ИНН) Тогда
		ИНН = "000000000000";
	КонецЕсли;
	
	Возврат ПараметрыВыгрузки.ПрефиксИмениФайлаВыгрузки
			+ "_" + ?(ЗначениеЗаполнено(ПараметрыВыгрузки.КодИФНСПосредника), ПараметрыВыгрузки.КодИФНСПосредника, ПараметрыВыгрузки.КодНО)
			+ "_" + ПараметрыВыгрузки.КодНО
			+ "_" + ?(ПараметрыВыгрузки.Свойство("ЭтоПБОЮЛ") И ПараметрыВыгрузки.ЭтоПБОЮЛ, ИНН, ИНН + СокрЛП(ПараметрыВыгрузки.КПП))
			+ "_" + Формат(ТекущаяДатаСеанса(), "ДФ=ггггММдд")
			+ "_" + Строка(Новый УникальныйИдентификатор);
	
КонецФункции

&НаСервере
Функция ПроверитьВозможностьВыгрузки(ПараметрыВыгрузки, ДеревоВыгрузки)
	
	СтатусПроверки = Истина;
	
	ПроверитьЗаполнение_ТитульныйЛист(ПараметрыВыгрузки, СтатусПроверки);
	
	Если ПараметрыВыгрузки.ПоМесту = "112" И НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.ИНН) Тогда
		ПроверитьЗаполнение_Сведения(ПараметрыВыгрузки, СтатусПроверки);
	КонецЕсли;
	
	ПроверитьЗаполнение_Раздел1(ПараметрыВыгрузки, СтатусПроверки);
	
	Возврат СтатусПроверки;
	
КонецФункции

&НаСервере
Процедура ПроверитьЗаполнение_ТитульныйЛист(Параметры, СтатусПроверки)
	
	КодПоМесту = Параметры.ПоМесту;
	ЭтоФизлицоБезИНН = (КодПоМесту = "112");
	ЭтоПБОЮЛ = Параметры.ЭтоПБОЮЛ;
	
	Если НЕ ЗначениеЗаполнено(Параметры.КодНО) Тогда
		СообщитьВТС("На титульном листе не задан код налогового органа.", "Титульный", "НалоговыйОрган1");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	ДопустимыеЗначения = "112,120,210,222,331";
	Если НЕ ЗначениеЗаполнено(КодПоМесту) Тогда
		СообщитьВТС("На титульном листе не задан по месту нахождения (учета).", "Титульный", "ПоМесту1");
		СтатусПроверки = Ложь;
	ИначеЕсли НЕ ЗначениеСодержитсяВСписке(КодПоМесту, ДопустимыеЗначения) Тогда
		ТекстОписанияОшибки = "Код по месту нахождения (учета) на титульном листе должен принимать одно из значений: 112, 120, 210, 222, 331.";
		СообщитьВТС(ТекстОписанияОшибки, "Титульный", "ПоМесту1");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Параметры.ДатаРасч) Тогда
		СообщитьВТС("На титульном листе не задана дата составления расчета.", "Титульный", "ДатаСоставленияРасчета");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ЭтоФизлицоБезИНН Тогда
		Если ЗначениеЗаполнено(Параметры.ИНН) И СтрДлина(Параметры.ИНН) <> 12 Тогда
			СообщитьВТС("Неверно задан ИНН физического лица.", "Титульный", "ИНН1_1");
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Параметры.ФЛФамилия) Тогда
			СообщитьВТС("На титульном листе  не указана фамилия физического лица.", "Титульный", "НаимОрг");
			СтатусПроверки = Ложь;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Параметры.ФЛИмя) Тогда
			СообщитьВТС("На титульном листе  не указано имя физического лица.", "Титульный", "НаимОрг");
			СтатусПроверки = Ложь;
		КонецЕсли;
		
	ИначеЕсли ЭтоПБОЮЛ Тогда
		Если НЕ ЗначениеЗаполнено(Параметры.ИНН) Тогда
			СообщитьВТС("Не задан ИНН индивидуального предпринимателя.", "Титульный", "ИНН1_1");
			СтатусПроверки = Ложь;
		ИначеЕсли СтрДлина(Параметры.ИНН) <> 12 Тогда
			СообщитьВТС("Неверно задан ИНН индивидуального предпринимателя.", "Титульный", "ИНН1_1");
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Параметры.ФЛФамилия) Тогда
			СообщитьВТС("На титульном листе  не указана фамилия индивидуального предпринимателя.", "Титульный", "НаимОрг");
			СтатусПроверки = Ложь;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Параметры.ФЛИмя) Тогда
			СообщитьВТС("На титульном листе  не указано имя индивидуального предпринимателя.", "Титульный", "НаимОрг");
			СтатусПроверки = Ложь;
		КонецЕсли;
		
	Иначе
		Если НЕ ЗначениеЗаполнено(Параметры.ИНН) Тогда
			СообщитьВТС("Не задан ИНН организации.", "Титульный", "ИНН1_1");
			СтатусПроверки = Ложь;
		ИначеЕсли СтрДлина(Параметры.ИНН) <> 10 Тогда
			СообщитьВТС("Неверно задан ИНН организации.", "Титульный", "ИНН1_1");
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Параметры.КПП) Тогда
			СообщитьВТС("Не задан КПП организации.", "Титульный", "КПП1_1");
			СтатусПроверки = Ложь;
		ИначеЕсли СтрДлина(Параметры.КПП) <> 9 Тогда
			СообщитьВТС("Неверно задан КПП организации.", "Титульный", "КПП1_1");
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Параметры.НаимОрг) Тогда
			СообщитьВТС("Не указано полное наименование организации.", "Титульный", "НаимОрг");
			СтатусПроверки = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	ПодписаноИндивидуальнымПредпринимателем = (ЭтоПБОЮЛ И Параметры.ПрПодп = "1");
	Если НЕ ПодписаноИндивидуальнымПредпринимателем Тогда
		Если ПустаяСтрока(Параметры.ПодпФамилия) Тогда
			СообщитьВТС("Не задана фамилия подписанта.", "Титульный", "ОргПодписант");
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		Если ПустаяСтрока(Параметры.ПодпИмя) Тогда
			СообщитьВТС("Не задано имя подписанта.", "Титульный", "ОргПодписант");
			СтатусПроверки = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если Параметры.ПрПодп = "2" И ПустаяСтрока(Параметры.ПодпНаимДок) Тогда
		СообщитьВТС("Не задано наименование документа, удостоверяющего полномочия представителя.", "Титульный", "ДокУпПред");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьЗаполнение_Сведения(Параметры, СтатусПроверки)
	
	КодВидаДокумента = Параметры.ВидДокумента;
	ДопустимыеЗначения = "03,07,08,10,11,12,13,14,15,18,21,23,24,91";
	Если НЕ ЗначениеЗаполнено(Параметры.ВидДокумента) Тогда
		СообщитьВТС("В разделе Сведения не указан код вида документа.", "Сведения", "КодВидаДокумента");
		СтатусПроверки = Ложь;
	ИначеЕсли НЕ ЗначениеСодержитсяВСписке(КодВидаДокумента, ДопустимыеЗначения) Тогда
		ТекстОписанияОшибки = "Код вида документа в разделе Сведения должен принимать одно из значений: 03, 07, 08, 10, 11, 12, 13, 14, 15, 18, 21, 23, 24, 91.";
		СообщитьВТС(ТекстОписанияОшибки, "Сведения", "КодВидаДокумента");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Параметры.СерияНомер) Тогда
		СообщитьВТС("В разделе Сведения не указаны серия и номер документа.", "Сведения", "СерияНомерДокумента");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Параметры.КемВыдан) Тогда
		СообщитьВТС("В разделе Сведения не указано кем выдан документ.", "Сведения", "КемВыданДокумент");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Параметры.ДатаВыдачи) Тогда
		СообщитьВТС("В разделе Сведения не указана дата выдачи документа.", "Сведения", "ДатаВыдачи");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Параметры.КодРегион) Тогда
		СообщитьВТС("В разделе Сведения не указан код региона.", "Сведения", "АдресКодРегиона");
		СтатусПроверки = Ложь;
	ИначеЕсли СтрДлина(Параметры.КодРегион) <> 2 Тогда
		СообщитьВТС("В разделе Сведения неверно указан код региона.", "Сведения", "АдресКодРегиона");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьЗаполнение_Раздел1(Параметры, СтатусПроверки)
	
	Если НЕ ЗначениеЗаполнено(Параметры.КБК) Тогда
		СообщитьВТС("На странице 1 раздела 1 не указан код бюджетной классификации.", "Раздел1", "П000010001001", 1);
		СтатусПроверки = Ложь;
	ИначеЕсли СтрДлина(Параметры.КБК) <> 20 Тогда
		СообщитьВТС("На странице 1 раздела 1 неверно указан код бюджетной классификации.", "Раздел1", "П000010001001", 1);
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Параметры.ОКТМО) Тогда
		СообщитьВТС("На странице 1 раздела 1 не указан код ОКТМО.", "Раздел1", "П000010002001", 1);
		СтатусПроверки = Ложь;
	ИначеЕсли СтрДлина(Параметры.ОКТМО) <> 8 И СтрДлина(Параметры.ОКТМО) <> 11 Тогда
		СообщитьВТС("На странице 1 раздела 1 неверно указан код ОКТМО.", "Раздел1", "П000010002001", 1);
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	ДанныеРаздела = мДанныеОтчета.Раздел1;
	
	Для Каждого Лист Из ДанныеРаздела Цикл
		
		ДанныеЛиста = Лист.Данные;
		НомерЛиста = ДанныеРаздела.Индекс(Лист) + 1;
		
		ЛистЗаполнен = ЗначениеЗаполнено(ДанныеЛиста[0].Значение.П000010001001)
		           ИЛИ ЗначениеЗаполнено(ДанныеЛиста[0].Значение.П000010002001)
		           ИЛИ ЗначениеЗаполнено(ДанныеЛиста[0].Значение.П000010003001)
		           ИЛИ ЗначениеЗаполнено(ДанныеЛиста[0].Значение.П000010004001)
		           ИЛИ ЗначениеЗаполнено(ДанныеЛиста[0].Значение.П000010005001)
		           ИЛИ ЗначениеЗаполнено(ДанныеЛиста[0].Значение.П000010006001)
		           ИЛИ ЗначениеЗаполнено(ДанныеЛиста[0].Значение.П000010007001)
		           ИЛИ ЗначениеЗаполнено(ДанныеЛиста[0].Значение.П000010008001)
		           ИЛИ ЗначениеЗаполнено(ДанныеЛиста[0].Значение.П000010009001)
		           ИЛИ ЗначениеЗаполнено(ДанныеЛиста[0].Значение.П000010010001)
		           ИЛИ ЗначениеЗаполнено(ДанныеЛиста[0].Значение.П000010011001)
		           ИЛИ ЗначениеЗаполнено(ДанныеЛиста[0].Значение.П000010012001)
		           ИЛИ ЗначениеЗаполнено(ДанныеЛиста[0].Значение.П000010013001)
		           ИЛИ ЗначениеЗаполнено(ДанныеЛиста[0].Значение.П000010014001)
		           ИЛИ ЗначениеЗаполнено(ДанныеЛиста[0].Значение.П000010015001)
		           ИЛИ ЗначениеЗаполнено(ДанныеЛиста[0].Значение.П000010016001)
		           ИЛИ ЗначениеЗаполнено(ДанныеЛиста[0].Значение.П000010017001)
		           ИЛИ ЗначениеЗаполнено(ДанныеЛиста[0].Значение.П000010018001)
		           ИЛИ ЗначениеЗаполнено(ДанныеЛиста[0].Значение.П000010019001);
		Если НЕ ЛистЗаполнен Тогда
			Продолжить;
		КонецЕсли;
		
		// Признак транспортного средства.
		ПризнакТС = СокрЛП(ДанныеЛиста[0].Значение.П000010004001);
		ДопустимыеЗначения = "10,11,12,20,25";
		Если НЕ ЗначениеЗаполнено(ПризнакТС) Тогда
			СообщитьВТС("На странице " + НомерЛиста + " в разделе 2 не задан признак транспортного средства.", "Раздел1", "П000010004001", НомерЛиста);
			СтатусПроверки = Ложь;
		ИначеЕсли НЕ ЗначениеСодержитсяВСписке(ПризнакТС, ДопустимыеЗначения) Тогда
			ТекстОписанияОшибки = "На странице " + НомерЛиста
			+ " в разделе 2 признак транспортного средства должен принимать одно из значений: 10, 11, 12, 20, 25.";
			СообщитьВТС(ТекстОписанияОшибки, "Раздел1", "П000010004001", НомерЛиста);
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		// Идентификационный номер транспортного средства (VIN).
		ИдентНомерТС = ДанныеЛиста[0].Значение.П000010005001;
		Если НЕ ЗначениеЗаполнено(ИдентНомерТС) Тогда
			СообщитьВТС("На странице " + НомерЛиста + " в разделе 2 не указан идентификационный номер транспортного средства (VIN).", "Раздел1", "П000010005001", НомерЛиста);
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		// Дата выпуска транспортного средства.
		ДатаВыпускаТС = ДанныеЛиста[0].Значение.П000010008001;
		Если НЕ ЗначениеЗаполнено(ДатаВыпускаТС) Тогда
			СообщитьВТС("На странице " + НомерЛиста + " в разделе 2 не указана дата выпуска транспортного средства.", "Раздел1", "П000010008001", НомерЛиста);
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		// Категория (вид) транспортного средства.
		КатегорияТС = ДанныеЛиста[0].Значение.П000010009001;
		ДопустимыеЗначения = "M1,M2,M3,M1G,M2G,M3G,N1,N2,N3,N1G,N2G,N3G,O1,O2,O3,O4";
		Если НЕ ЗначениеЗаполнено(КатегорияТС) Тогда
			СообщитьВТС("На странице " + НомерЛиста + " в разделе 2 не указана категория (вид) транспортного средства.", "Раздел1", "П000010009001", НомерЛиста);
			СтатусПроверки = Ложь;
		ИначеЕсли НЕ ЗначениеСодержитсяВСписке(КатегорияТС, ДопустимыеЗначения) Тогда
			ТекстОписанияОшибки = "На странице " + НомерЛиста
			+ " в разделе 2 категория (вид) транспортного средства должна принимать одно из значений: M1, M2, M3, M1G, M2G, M3G, N1, N2, N3, N1G, N2G, N3G, O1, O2, O3, O4.";
			СообщитьВТС(ТекстОписанияОшибки, "Раздел1", "П000010009001", НомерЛиста);
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		// Рабочий объем двигателя.
		Если ЗначениеСодержитсяВСписке(КатегорияТС, "M1,M2,M3,M1G,M2G,M3G") И ДанныеЛиста[0].Значение.П000010010001 <= 0 Тогда
			ТекстОписанияОшибки = "На странице " + НомерЛиста + " в разделе 2 не указан рабочий объем двигателя.";
			СообщитьВТС(ТекстОписанияОшибки, "Раздел1", "П000010010001", НомерЛиста);
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		// Тип двигателя.
		ТипДвигателя = ДанныеЛиста[0].Значение.П000010011001;
		Если НЕ ЗначениеЗаполнено(ТипДвигателя) Тогда
			СообщитьВТС("На странице " + НомерЛиста + " в разделе 2 не указан тип двигателя.", "Раздел1", "П000010011001", НомерЛиста);
			СтатусПроверки = Ложь;
		Иначе
			РазрешенныеТипыДвигателя = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок("0,3");
			Если РазрешенныеТипыДвигателя.Найти(ТипДвигателя) = Неопределено Тогда
				СообщитьВТС("На странице " + НомерЛиста + " в разделе 2 тип двигателя должен принимать одно из значений: 0, 3.",
				"Раздел1", "П000010011001", НомерЛиста);
				СтатусПроверки = Ложь;
			КонецЕсли;
		КонецЕсли;
		
		// Полная масса.
		Если ЗначениеСодержитсяВСписке(КатегорияТС, "N1,N2,N3,N1G,N2G,N3G,O1,O2,O3,O4") И ДанныеЛиста[0].Значение.П000010012001 <= 0 Тогда
			ТекстОписанияОшибки = "На странице " + НомерЛиста + " в разделе 2 не указана полная масса.";
			СообщитьВТС(ТекстОписанияОшибки, "Раздел1", "П000010012001", НомерЛиста);
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		// Серия, номер паспорта.
		СерияНомерПаспорта = СокрЛП(ДанныеЛиста[0].Значение.П000010018001);
		Если НЕ ЗначениеЗаполнено(СерияНомерПаспорта) Тогда
			СообщитьВТС("На странице " + НомерЛиста + " в разделе 2 не указаны серия, номер паспорта.",
			"Раздел1", "П000010018001", НомерЛиста);
			СтатусПроверки = Ложь;
		Иначе
			СерияНомерПаспортаДлина = СтрДлина(СерияНомерПаспорта);
			Если СерияНомерПаспортаДлина <> 10
				И СерияНомерПаспортаДлина <> 15 Тогда
				СообщитьВТС("На странице " + НомерЛиста
				+ " в разделе 2 указано значение серии, номера паспорта, не состоящее из 10 или 15 символов.",
				"Раздел1", "П000010018001", НомерЛиста);
				СтатусПроверки = Ложь;
			ИначеЕсли СерияНомерПаспортаДлина = 15
				И НЕ СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(СерияНомерПаспорта) Тогда
				СообщитьВТС("На странице " + НомерЛиста
				+ " в разделе 2 значение серии, номера паспорта, состоящее из 15 символов, должно содержать только цифры.",
				"Раздел1", "П000010018001", НомерЛиста);
				СтатусПроверки = Ложь;
			КонецЕсли;
		КонецЕсли;
		
		// Дата выдачи паспорта.
		ДатаВыдачиПаспорта = ДанныеЛиста[0].Значение.П000010019001;
		Если НЕ ЗначениеЗаполнено(ДатаВыдачиПаспорта) Тогда
			СообщитьВТС("На странице " + НомерЛиста + " в разделе 2 не указана дата выдачи паспорта.",
			"Раздел1", "П000010019001", НомерЛиста);
			СтатусПроверки = Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ЗначениеСодержитсяВСписке(ПроверяемоеЗначение, КонтрольныйСписок)
	
	Результат = Ложь;
	
	Значения = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(КонтрольныйСписок, ",");
	Для Инд = 0 По Значения.ВГраница() Цикл
		Значения[Инд] = СокрЛП(Значения[Инд]);
	КонецЦикла;
	
	Результат = (Значения.Найти(ПроверяемоеЗначение) <> Неопределено);
	
	Возврат Результат
	
КонецФункции

&НаСервере
Процедура ЗаполнитьДанными(ДеревоВыгрузки, ПараметрыВыгрузки)
	
	ОбработатьУсловныеЭлементы(ПараметрыВыгрузки, ДеревоВыгрузки);
	
	ЗаполнитьДаннымиУзел(ПараметрыВыгрузки, ДеревоВыгрузки);
	
	ОтсечьНезаполненныеНеобязательныеУзлы(ДеревоВыгрузки);
	
КонецПроцедуры

&НаСервере
Функция ПроверитьДанные(Узел)
	
	СтатусПроверки = Истина;
	
	Если ТипЗнч(Узел) <> Тип("ДеревоЗначений") Тогда
		Если НЕ ЗначениеСоответствуетФормату(Узел) Тогда
			СтатусПроверки = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Для Каждого Стр из Узел.Строки Цикл
		СтатусПроверки = (ПроверитьДанные(Стр) И СтатусПроверки);
	КонецЦикла;
	
	Возврат СтатусПроверки;
	
КонецФункции

&НаСервере
Функция СкопироватьУзел(Родитель, Узел)
	
	// Находим узел с максимальным индексом и с тем же кодом, что
	// и у копируемого, и добавляем новый сразу после найденного.
	СтрокиСТемЖеКодом = Родитель.Строки.НайтиСтроки(Новый Структура("Код", Узел.Код), Ложь);
	МаксИндекс = -1;
	Для Каждого СтрокаСТемЖеКодом Из СтрокиСТемЖеКодом Цикл
		ТекИндекс = Родитель.Строки.Индекс(СтрокаСТемЖеКодом);
		Если ТекИндекс > МаксИндекс Тогда
			МаксИндекс = ТекИндекс;
		КонецЕсли;
	КонецЦикла;
	
	ИндексСоздаваемогоУзла = МаксИндекс + 1;
	Если ИндексСоздаваемогоУзла >= Родитель.Строки.Количество() ИЛИ ИндексСоздаваемогоУзла = 0 Тогда
		// Аналогичный узел не найден или найденный узел - последний.
		НовыйУзел = Родитель.Строки.Добавить();
	Иначе
		НовыйУзел = Родитель.Строки.Вставить(ИндексСоздаваемогоУзла);
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(НовыйУзел, Узел, , "Родитель, Строки");
	Для Каждого Стр из Узел.Строки Цикл
		СкопироватьУзел(НовыйУзел, Стр);
	КонецЦикла;
	Возврат НовыйУзел;
	
КонецФункции

&НаСервере
Процедура ОтсечьНезаполненныеНеобязательныеУзлы(Узел)
	
	КоличествоСтрок = Узел.Строки.Количество();
	Для Инд = 1 По КоличествоСтрок Цикл
		Стр = Узел.Строки.Получить(КоличествоСтрок - Инд);
		ОтсечьНезаполненныеНеобязательныеУзлы(Стр);
	КонецЦикла;
	
	Если ТипЗнч(Узел) <> Тип("ДеревоЗначений") Тогда
		// Учтем оба варианта: кириллицу и латиницу.
		Если (СтрНайти(Узел.Обязательность, "Н") <> 0 ИЛИ СтрНайти(Узел.Обязательность, "H") <> 0) И УзелПуст(Узел) Тогда
			РегламентированнаяОтчетность.УдалитьУзел(Узел);
		ИначеЕсли (СтрНайти(Узел.Обязательность, "М") <> 0 ИЛИ СтрНайти(Узел.Обязательность, "M") <> 0) И УзелПуст(Узел)
			И ?(СтрНайти(Узел.Обязательность, "О") <> 0 ИЛИ СтрНайти(Узел.Обязательность, "O") <> 0, РегламентированнаяОтчетность.ИмеютсяАналогичныеСоседниеУзлыКлюч(Узел), Истина) Тогда
			РегламентированнаяОтчетность.УдалитьУзел(Узел);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция УзелПуст(Узел, ПоказателиНеанализируемыеНаЗаполненность = Неопределено)
	
	ПустойУзел = ?(Узел.Формат = "N",
				Узел.Значение = "0" ИЛИ (НЕ ЗначениеЗаполнено(Узел.Значение)),
				НЕ ЗначениеЗаполнено(Узел.Значение));
	Для Каждого Стр из Узел.Строки Цикл
		Если НЕ УзелПуст(Стр) Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ПустойУзел;
	
КонецФункции

&НаСервере
Процедура ОбработатьУсловныеЭлементы(Знач ПараметрыВыгрузки, Узел)
	
	КоличествоСтрок = Узел.Строки.Количество();
	Для Инд = 1 По КоличествоСтрок Цикл
		ТекСтр = Узел.Строки.Получить(КоличествоСтрок - Инд);
		Если НЕ ПустаяСтрока(ТекСтр.Условие) Тогда
			Если НЕ РегламентированнаяОтчетность.УсловиеВыполнено(ЭтаФорма, ПараметрыВыгрузки, ТекСтр.Условие) Тогда
				Узел.Строки.Удалить(ТекСтр);
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		ОбработатьУсловныеЭлементы(ПараметрыВыгрузки, ТекСтр);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ВывестиПоказательВXML(Узел, ЗначениеПоказателя)
	
	МинШирина = Узел.МинРазмерность;
	МаксШирина = Узел.МаксРазмерность;
	
	Если Узел.Формат = "T" ИЛИ Узел.Формат = "Т" Тогда // учтем оба варианта: кириллицу и латиницу
		Если ТипЗнч(ЗначениеПоказателя) = Тип("Дата") И НЕ ЗначениеЗаполнено(ЗначениеПоказателя) Тогда
			ЗначениеПоказателя = "";
		ИначеЕсли Узел.Код = "СерНомПасп" Тогда
			ЗначениеПоказателя = ЗначениеПоказателя; // Особая обработка 
		Иначе
			ЗначениеПоказателя = СокрЛП(ЗначениеПоказателя);
		КонецЕсли;
		Узел.Значение = ?(МаксШирина < СтрДлина(ЗначениеПоказателя), Лев(СокрЛП(ЗначениеПоказателя), МаксШирина), ЗначениеПоказателя);
	ИначеЕсли Узел.Формат = "N" Тогда
		СтрокаФормата = "ЧРД=.;ЧН=0;ЧГ=;";
		Если Узел.МаксРазмерность <> 0 И Узел.МаксРазмерность <> 99999 Тогда
			СтрокаФормата = СтрокаФормата + "ЧЦ=" + Формат(Узел.МаксРазмерность, "ЧГ=") + ";";
		КонецЕсли;
		Если Узел.МинРазмерность <> 99999 Тогда
			СтрокаФормата = СтрокаФормата + "ЧДЦ=" + Формат(Узел.МинРазмерность, "ЧГ=") + ";";
		КонецЕсли;
		Узел.Значение = СокрЛП(Формат(ЗначениеПоказателя, СтрокаФормата));
	ИначеЕсли Узел.Формат = "gYear" Тогда
		Если ТипЗнч(ЗначениеПоказателя) = Тип("Дата") Тогда
			Узел.Значение = СокрЛП(Формат(ЗначениеПоказателя, "ДФ=гггг"));
		Иначе
			Узел.Значение = Прав(СокрЛП(ЗначениеПоказателя), 4);
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ИмяПервогоПоказателяМногострочнойЧастиВыгрузки(Узел)
	
	Результат = Неопределено;
	
	Для Каждого СтрокаУзла из Узел.Строки Цикл
		
		// Учтем оба варианта: кириллицу и латиницу.
		Если СтрокаУзла.Тип = "С" ИЛИ СтрокаУзла.Тип = "C" Тогда
			Результат = ИмяПервогоПоказателяМногострочнойЧастиВыгрузки(СтрокаУзла);
		Иначе
			Если ЗначениеЗаполнено(СтрокаУзла.Ключ) Тогда
				Результат = СокрЛП(СтрокаУзла.Ключ);
			КонецЕсли;
		КонецЕсли;
		
		Если Результат <> Неопределено Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ДополнитьИменаПоказателейМногострочнойЧастиВыгрузки(Узел, Постфикс)
	
	Для Каждого СтрокаУзла из Узел.Строки Цикл
		// Учтем оба варианта: кириллицу и латиницу.
		Если СтрокаУзла.Тип = "С" ИЛИ СтрокаУзла.Тип = "C" Тогда
			ДополнитьИменаПоказателейМногострочнойЧастиВыгрузки(СтрокаУзла, Постфикс);
		Иначе
			Если ЗначениеЗаполнено(СтрокаУзла.Ключ) Тогда
				СтрокаУзла.Ключ = СокрЛП(СтрокаУзла.Ключ) + Постфикс;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция НовыйУзелИзПрототипа(ПрототипУзла);
	
	РодительУзла = ПрототипУзла.Родитель;
	
	ПозицияИсходногоУзла = РодительУзла.Строки.Индекс(ПрототипУзла);
	НовыйУзел = РодительУзла.Строки.Вставить(ПозицияИсходногоУзла);
	ЗаполнитьЗначенияСвойств(НовыйУзел, ПрототипУзла, , "Родитель, Строки");
	Для Каждого Стр из ПрототипУзла.Строки Цикл
		СкопироватьУзел(НовыйУзел, Стр);
	КонецЦикла;
	
	Возврат НовыйУзел;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьДаннымиУзел(ПараметрыВыгрузки, Узел, НомерСтроки = Неопределено)
	
	КоличествоВставленныхУзлов = 0;
	
	Для Каждого Стр из Узел.Строки Цикл
		
		Если КоличествоВставленныхУзлов > 0 Тогда
			КоличествоВставленныхУзлов = КоличествоВставленныхУзлов - 1;
			Продолжить;
		КонецЕсли;
		
		// Учтем оба варианта: кириллицу и латиницу.
		Если Стр.Тип = "С" ИЛИ Стр.Тип = "C" Тогда
			Если Стр.Многостраничность Тогда
				ДанныеРаздела = мДанныеОтчета[Стр.Раздел];
				Для Каждого СтраницаРаздела Из ДанныеРаздела Цикл
					УзелСтраницы = НовыйУзелИзПрототипа(Стр);
					УзелСтраницы.Многостраничность = Ложь;
					ВиртуальныеДанные = Новый Структура(Стр.Раздел, СтраницаРаздела.Данные);
					ЗаполнитьДаннымиУзел(ВиртуальныеДанные, УзелСтраницы);
					КоличествоВставленныхУзлов = КоличествоВставленныхУзлов + 1;
				КонецЦикла;
				РегламентированнаяОтчетность.УдалитьУзел(Стр);
				КоличествоВставленныхУзлов = Макс(0, КоличествоВставленныхУзлов - 1);
				
			ИначеЕсли Стр.Многострочность Тогда
				Если НЕ ПустаяСтрока(Стр.Раздел) Тогда
					Если ПараметрыВыгрузки.Свойство(Стр.Раздел) Тогда
						ДанныеРаздела = ПараметрыВыгрузки[Стр.Раздел];
					Иначе
						ДанныеРаздела = мДанныеОтчета[Стр.Раздел];
					КонецЕсли;
				Иначе
					ДанныеРаздела = ПараметрыВыгрузки;
				КонецЕсли;
				ИмяКонтрольногоПоказателя = ИмяПервогоПоказателяМногострочнойЧастиВыгрузки(Стр);
				
				НомерСтроки = 1;
				Постфикс = "_" + Формат(НомерСтроки, "ЧГ=0");
				
				Пока ДанныеРаздела.Свойство(ИмяКонтрольногоПоказателя + Постфикс) Цикл
					УзелСтроки = НовыйУзелИзПрототипа(Стр);
					УзелСтроки.Многострочность = Ложь;
					ДополнитьИменаПоказателейМногострочнойЧастиВыгрузки(УзелСтроки, Постфикс);
					ЗаполнитьДаннымиУзел(ДанныеРаздела, УзелСтроки);
					КоличествоВставленныхУзлов = КоличествоВставленныхУзлов + 1;
					
					НомерСтроки = НомерСтроки + 1;
					Постфикс = "_" + Формат(НомерСтроки, "ЧГ=0");
				КонецЦикла;
				
				РегламентированнаяОтчетность.УдалитьУзел(Стр);
				КоличествоВставленныхУзлов = Макс(0, КоличествоВставленныхУзлов - 1);
				
			Иначе
				ЗаполнитьДаннымиУзел(ПараметрыВыгрузки, Стр);
				
			КонецЕсли;
		Иначе
			Если ПустаяСтрока(Стр.ЗначениеПоУмолчанию) Тогда
				Если НЕ ПустаяСтрока(Стр.Раздел) И НЕ ПустаяСтрока(Стр.Ключ) Тогда
					Если ПараметрыВыгрузки.Свойство(Стр.Раздел) Тогда
						// Данные представлены в виде раздела в параметрах.
						ЗначениеЭлемента = ПараметрыВыгрузки[Стр.Раздел][0].Значение[Стр.Ключ];
						
						Если Стр.Код = "СерНомПасп" И Стр.Ключ = "П000010018001" Тогда
							ЗначениеЭлемента = ВРег(ЗначениеЭлемента);
						КонецЕсли;
						
					ИначеЕсли ПараметрыВыгрузки.Свойство(Стр.Ключ) Тогда
						// Данные заданы в виде значения в параметрах.
						ЗначениеЭлемента = ПараметрыВыгрузки[Стр.Ключ];
					Иначе
						// Данные находятся в сохраненных данных отчета.
						ЗначениеЭлемента = мДанныеОтчета[Стр.Раздел][Стр.Ключ];
					КонецЕсли;
					ВывестиПоказательВXML(Стр, ЗначениеЭлемента);
				Иначе
					Стр.Значение = "";
				КонецЕсли;
			ИначеЕсли Лев(Стр.ЗначениеПоУмолчанию, 1) = "&" Тогда
				Ключ = Сред(Стр.ЗначениеПоУмолчанию, 2);
				Если РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(ПараметрыВыгрузки, Ключ) Тогда
					ВывестиПоказательВXML(Стр, ПараметрыВыгрузки[Ключ]);
				КонецЕсли;
			Иначе
				Стр.Значение = Стр.ЗначениеПоУмолчанию;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ЗначениеСоответствуетФормату(Стр)
	
	СтатусПроверки = Истина;
	// Учтем оба варианта: кириллицу и латиницу.
	Если Стр.Формат = "Т" ИЛИ Стр.Формат = "T" Тогда
		ДлинаЗначения = СтрДлина(Стр.Значение);
		Если ДлинаЗначения < Стр.МинРазмерность Тогда
			СтатусПроверки = Ложь;
			СообщитьВТС("Длина значения показателя """ + РегламентированнаяОтчетность.ПредставлениеПоказателя(Стр)
				+ """ меньше минимально возможной (" + ДлинаЗначения + " < " + Стр.МинРазмерность + ")", "Титульный", "");
		КонецЕсли;
		Если ДлинаЗначения > Стр.МаксРазмерность Тогда
			СтатусПроверки = Ложь;
			СообщитьВТС("Длина значения показателя """ + РегламентированнаяОтчетность.ПредставлениеПоказателя(Стр)
				+ """ больше максимально возможной (" + ДлинаЗначения + " > " + Стр.МаксРазмерность + ")", "Титульный", "");
		КонецЕсли;
	КонецЕсли;
	Возврат СтатусПроверки;
	
КонецФункции

&НаСервере
Функция ВыгрузитьДеревоВXML(ДеревоВыгрузки, ПараметрыВыгрузки)
	
	ПотокXML = РегламентированнаяОтчетность.СоздатьНовыйПотокXML("windows-1251");
	
	ЗаписатьУзелДереваВXML(ДеревоВыгрузки, ПотокXML, ПараметрыВыгрузки);
	
	ТекстДляЗаписи = ПотокXML.Закрыть();
	
	Возврат ТекстДляЗаписи;
	
КонецФункции

&НаСервере
Функция ЗаписатьУзелДереваВXML(СтрокаДерева, ПотокXML, ПараметрыВыгрузки) Экспорт
	
	Если ТипЗнч(СтрокаДерева) = Тип("ДеревоЗначений") Тогда
		ПотокXML.ЗаписатьНачалоЭлемента("Файл");
		ПотокXML.ЗаписатьАтрибут("xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");
		Для каждого Стр Из СтрокаДерева.Строки Цикл
			ЗаписатьУзелДереваВXML(Стр, ПотокXML, ПараметрыВыгрузки);
		КонецЦикла;
		ПотокXML.ЗаписатьКонецЭлемента();
	Иначе
		Если СтрокаДерева.Тип = "А" ИЛИ СтрокаДерева.Тип = "A" Тогда
			ПотокXML.ЗаписатьАтрибут(СтрокаДерева.Код, Строка(СтрокаДерева.Значение));
		Иначе
			ПотокXML.ЗаписатьНачалоЭлемента(СтрокаДерева.Код);
			Для каждого Лист из СтрокаДерева.Строки Цикл
				ЗаписатьУзелДереваВXML(Лист, ПотокXML, ПараметрыВыгрузки);
			КонецЦикла;
			ПотокXML.ЗаписатьТекст(Строка(СтрокаДерева.Значение));
			ПотокXML.ЗаписатьКонецЭлемента();
		КонецЕсли;
	КонецЕсли;

КонецФункции

&НаКлиенте
Процедура ВыгрузитьОтчет() Экспорт
	
	Если НЕ ЗначениеЗаполнено(СтруктураРеквизитовФормы.Организация) Тогда
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Организация не выбрана! Выгрузка невозможна.'");
		Сообщение.Сообщить();
		
		Возврат;
		
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьОтчетЗавершение", ЭтотОбъект);
	
	Если Модифицированность Тогда
		СохранитьНаКлиенте(,ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьОтчетЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ФормаВыгрузкиРеглОтчета = ПолучитьФорму("Документ.ВыгрузкаРегламентированныхОтчетов.Форма.ФормаДокумента", , ЭтаФорма);
	
	СпДокОсн = Новый СписокЗначений;
	СпДокОсн.Добавить(СтруктураРеквизитовФормы.мСохраненныйДок);
	
	ФормаВыгрузкиРеглОтчета.СформироватьИЗаписать(СпДокОсн);
	
КонецПроцедуры

&НаКлиенте
Функция УниверсальнаяВыгрузка(ТекстВыгрузки = Неопределено, ПроверятьБлокировки = Истина) Экспорт
	
	Перем ПараметрыВыгрузки;
	
	Если Модифицированность Тогда
		ТекстЗаголовка = ЗаголовокРегламентированногоОтчета(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета, СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
		
		ОргСтр = " (" + СтруктураРеквизитовФормы.Организация + ")";
		Если СтрНайти(ТекстЗаголовка, ОргСтр) = 0 Тогда
			ТекстЗаголовка = ТекстЗаголовка + ОргСтр;
		КонецЕсли;
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Отчет """ + ТекстЗаголовка + """ не сохранен.";
		Сообщение.Сообщить();
		
		Возврат Ложь;
	КонецЕсли;
	
	Если Открыта() Тогда
		Если СтруктураРеквизитовФормы.ЕдиницаИзмерения <> ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1 Тогда
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='Перед выгрузкой необходимо установить единицу измерения ""в рублях"".'");
			Сообщение.Сообщить();
			
			Возврат Ложь;
			
		КонецЕсли;
		Если СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения <> 0 Тогда
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='Перед выгрузкой необходимо установить точность ""0"".'");
			Сообщение.Сообщить();
			
			Возврат Ложь;
			
		КонецЕсли;
	КонецЕсли;
	
	Если СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки = Истина Тогда // возможны 3 состояния
		РегламентированнаяОтчетностьКлиент.ПроверитьКонтрольныеСоотношения(ЭтаФорма, ОбработкаКС, Истина);
	КонецЕсли;
	
	Если НЕ УниверсальнаяВыгрузкаXMLНаСервере(ТекстВыгрузки, ПараметрыВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Функция ЗаголовокРегламентированногоОтчета(ДатаНач, ДатаКон, Периодичность = Неопределено) Экспорт
	
	СтрПериодОтчета = ПредставлениеПериода( НачалоДня(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета), КонецДня(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета), "ФП = Истина" );
		
	Если СтрНайти(ЭтаФорма.Заголовок, СтрПериодОтчета) = 0 Тогда
		Возврат ЭтаФорма.Заголовок + " за " + СтрПериодОтчета;
	Иначе
		Возврат ЭтаФорма.Заголовок;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция УниверсальнаяВыгрузкаXMLНаСервере(ТекстВыгрузки, ПараметрыВыгрузки)
	
	СформироватьСтруктуруПоказателей();
	ПараметрыВыгрузки = СформироватьСтруктуруПараметров();
	ДеревоВыгрузки = ИзвлечьСтруктуруXML();
	
	Если НЕ ПроверитьВозможностьВыгрузки(ПараметрыВыгрузки, ДеревоВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ЗаполнитьДанными(ДеревоВыгрузки, ПараметрыВыгрузки);
	Если НЕ ПроверитьДанные(ДеревоВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ТекстВыгрузки = ВыгрузитьДеревоВXML(ДеревоВыгрузки, ПараметрыВыгрузки);
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура АктивизироватьЯчейку(Ячейка) Экспорт
	
	РегламентированнаяОтчетностьКлиент.АктивизироватьЯчейку(ЭтаФорма, Ячейка);
	
КонецПроцедуры

&НаСервере
Процедура СформироватьДеревоРазделовОтчетаНаСервере() Экспорт
	
	СформироватьДеревоРазделовОтчета(ЭтаФорма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СформироватьДеревоРазделовОтчета(Форма)
	
	Форма["РазделыОтчета"].ПолучитьЭлементы().Очистить();
	
	Для Каждого ЭлементДереваСтраницОтчета Из Форма["мДеревоСтраницОтчета"].ПолучитьЭлементы() Цикл
		
		Если ЭлементДереваСтраницОтчета.ПоказатьСтраницу = 1 Тогда
			
			ЭлементРазделовОтчета = Форма["РазделыОтчета"].ПолучитьЭлементы().Добавить();
			ЭлементРазделовОтчета.КолонкаРазделыОтчета         = ЭлементДереваСтраницОтчета.Представление;
			ЭлементРазделовОтчета.КолонкаРазделыОтчетаСокрНаим = ЭлементДереваСтраницОтчета.ИмяСтраницы;
			ЭлементРазделовОтчета.ИндексКартинки               = 1;
			ЭлементРазделовОтчета.РазделМногостраничный        = Ложь;
			ЭлементРазделовОтчета.РазделМногострочный          = Ложь;
			
			НайденноеЗначение = Неопределено;
			
			Если Форма["мСтруктураМногостраничныхРазделов"].Свойство(ЭлементРазделовОтчета.КолонкаРазделыОтчетаСокрНаим, НайденноеЗначение) Тогда
				
				Если НЕ НайденноеЗначение = Неопределено Тогда
					
					НайденноеЗначение = Форма[НайденноеЗначение];
					
					ЭлементРазделовОтчета.ИндексКартинки        = 0;
					ЭлементРазделовОтчета.РазделМногостраничный = Истина;
					
					Для НомерСтраницы = 1 По НайденноеЗначение.Количество() Цикл
						
						СтраницаРазделаОтчета = ЭлементРазделовОтчета.ПолучитьЭлементы().Добавить();
						
						СтраницаРазделаОтчета.КолонкаРазделыОтчета              = "Стр. " + НомерСтраницы;
						СтраницаРазделаОтчета.КолонкаРазделыОтчетаСокрНаим      = ЭлементРазделовОтчета.КолонкаРазделыОтчетаСокрНаим;
						СтраницаРазделаОтчета.КолонкаНомерСтраницыРазделаОтчета = НомерСтраницы;
						СтраницаРазделаОтчета.ИндексКартинки                    = 1;
						СтраницаРазделаОтчета.РазделМногостраничный             = ЭлементРазделовОтчета.РазделМногостраничный;
						СтраницаРазделаОтчета.РазделМногострочный               = ЭлементРазделовОтчета.РазделМногострочный;
						
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура РазделыОтчетаПриАктивизацииСтроки(Элемент)
	
	Если Элемент.ТекущиеДанные = Неопределено
	 ИЛИ Элемент.ТекущаяСтрока = СтруктураРеквизитовФормы.ТекущаяСтрокаРазделовОтчета Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураРеквизитовФормы.ТекущаяСтрокаРазделовОтчета = Элемент.ТекущаяСтрока;
	
	Если СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере Тогда
		
		Если Элемент.ТекущиеДанные.РазделМногостраничный Тогда
			
			Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета = ?(Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета = Неопределено
															        ИЛИ Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета = 0, 1, Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета);
			
		КонецЕсли;
		
		ВывестиМакетСтраницыВТабличныйДокументНаСервере(Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим, Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета);
		
	Иначе
		
		СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Истина;
		
	КонецЕсли;
	
	КМенюРО = Элементы.РазделыОтчета.КонтекстноеМеню;
	Если Элемент.ТекущиеДанные.РазделМногостраничный Тогда
		Элемент.Развернуть(Элемент.ТекущаяСтрока);
		КМенюРО.Видимость = Истина;
		
		Если Элемент.ТекущиеДанные.ПолучитьРодителя() = Неопределено Тогда
			КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюУдалитьСтраницу.Видимость = Ложь;
			КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюДобавитьСтраницу.Видимость = Истина;
			КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюДобавитьСтраницуКопированием.Видимость = Истина;
		ИначеЕсли Элемент.ТекущиеДанные.ПолучитьРодителя().ПолучитьЭлементы().Количество() = 1 Тогда
			КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюУдалитьСтраницу.Видимость = Ложь;
			КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюДобавитьСтраницу.Видимость = Истина;
			КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюДобавитьСтраницуКопированием.Видимость = Истина;
		Иначе
			КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюУдалитьСтраницу.Видимость = Истина;
			КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюДобавитьСтраницу.Видимость = Истина;
			КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюДобавитьСтраницуКопированием.Видимость = Истина;
		КонецЕсли;
		
		Если Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим <> "Раздел1" Тогда
			КМенюРО.Видимость = Ложь;
			КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюУдалитьСтраницу.Видимость = Ложь;
			КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюДобавитьСтраницу.Видимость = Ложь;
			КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюДобавитьСтраницуКопированием.Видимость = Ложь;
		КонецЕсли;
	Иначе
		КМенюРО.Видимость = Ложь;
		КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюУдалитьСтраницу.Видимость = Ложь;
		КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюДобавитьСтраницу.Видимость = Ложь;
		КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюДобавитьСтраницуКопированием.Видимость = Ложь;
	КонецЕсли;
	
	Если Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Титульный" Тогда
		Элементы.Обновить.Доступность = Истина;
	Иначе
		Элементы.Обновить.Доступность = Ложь;
	КонецЕсли;
	
	Если Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Сведения" Тогда
		
		Если ЭтаФорма.СтруктураДанныхТитульный.ПоМесту = "112"
			И НЕ ЗначениеЗаполнено(ЭтаФорма.СтруктураДанныхТитульный.ИНН1) Тогда
			
			ЗаполнитьФИОРазделаСведения();
			
		Иначе
			
			ЭтаФорма.ТабличныйДокумент.Области["ФизлицоФамилия"].Значение = "";
			ЭтаФорма.ТабличныйДокумент.Области["ФизлицоИмя"].Значение = "";
			ЭтаФорма.ТабличныйДокумент.Области["ФизлицоОтчество"].Значение = "";
			
		КонецЕсли;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.СпрятатьСсылкуУдалитьСтраницу(ЭтаФорма);
	
	Элементы.ТабличныйДокумент.ТекущаяОбласть = ТабличныйДокумент.Область(1, 1);
	
КонецПроцедуры

&НаСервере
Процедура СохранитьДанныеРаздела(НаимРаздела, ОчищатьРазделЕслиЕстьМногострочность, ИзменятьАктивнуюСтраницу = Истина)
	
	// Многостраничные разделы.
	Если  НаимРаздела = "Раздел1" Тогда
		
		ТаблицаСтраницРаздела = Неопределено;
		
		мСтруктураМногостраничныхРазделов.Свойство(НаимРаздела, ТаблицаСтраницРаздела);
		
		ТаблицаСтраницРаздела = ЭтаФорма[ТаблицаСтраницРаздела];
		
		СтрТаблицыСтраниц = ТаблицаСтраницРаздела.НайтиСтроки(Новый Структура("АктивнаяСтраница", Истина));
		
		Если СтрТаблицыСтраниц.Количество() > 0 Тогда
			
			СтрТаблицаСтраницы = СтрТаблицыСтраниц[0];
			
			РегламентированнаяОтчетностьКлиентСервер.СохранитьДанныеМногостраничногоРазделаВактивнойСтранице(
			ЭтаФорма, НаимРаздела, ОчищатьРазделЕслиЕстьМногострочность);
			
			СтрТаблицаСтраницы.АктивнаяСтраница = НЕ ИзменятьАктивнуюСтраницу;
			
		КонецЕсли;

	// Обычные разделы.
	Иначе
		
		ЭтаФорма["СтруктураДанных" + НаимРаздела] = СобратьДанныеТекущегоТаблПоля(ЭтаФорма, "ТабличныйДокумент");
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиМакетСтраницыВТабличныйДокументНаСервере(ИмяТекРаздела, НомерСтраницыРазделаОтчета)
	
	СохранитьДанныеРаздела(СтруктураРеквизитовФормы.НаимТекущегоРаздела, Истина);
	
	ВывестиМакетВТаблДокНаСервере(ИмяТекРаздела, НомерСтраницыРазделаОтчета);
	
	СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяТекРаздела;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиМакетВТаблДокНаСервере(ИмяТекРаздела, НомерСтраницыРазделаОтчета)
	
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(
		Сред(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + ИмяТекРаздела));
	
	// Многостраничные разделы.
	Если ИмяТекРаздела = "Раздел1" Тогда
		
		СтруктураДанных = Новый Структура;
		
		НаимТаблицыСтраницы = мСтруктураМногостраничныхРазделов[ИмяТекРаздела];
		
		СписокДанных = ЭтаФорма[НаимТаблицыСтраницы][НомерСтраницыРазделаОтчета - 1].Данные;
		
		Для каждого ТаблицаСтраницы Из ЭтаФорма[НаимТаблицыСтраницы] Цикл
			ТаблицаСтраницы.АктивнаяСтраница = Ложь;
		КонецЦикла;
		
		ЭтаФорма[НаимТаблицыСтраницы][НомерСтраницыРазделаОтчета - 1].АктивнаяСтраница = Истина;
		
		Если СписокДанных.Количество() > 0 Тогда
			СтруктураДанных = СписокДанных[0].Значение;
		КонецЕсли;
		
		Для Каждого ЭлСтруктуры Из СтруктураДанных Цикл
			Обл = ТабличныйДокумент.Области.Найти(ЭлСтруктуры.Ключ);
			Если Обл <> Неопределено И Обл.СодержитЗначение Тогда 
				Обл.Значение = ЭлСтруктуры.Значение;
			КонецЕсли;
		КонецЦикла;
		
		Обл = ТабличныйДокумент.Области.Найти("УдалитьСтраницуЗначок");
		Если Обл <> Неопределено Тогда 
			Если ЭтаФорма[НаимТаблицыСтраницы].Количество() = 1 Тогда 
				Обл.Гиперссылка = Ложь;
				Обл.Текст = "";
				Обл = ТабличныйДокумент.Области["УдалитьСтраницу"];
				Обл.Гиперссылка = Ложь;
				Обл.Текст = "";
			Иначе
				Обл.Гиперссылка = Истина;
				Обл.Текст = "х";
				Обл = ТабличныйДокумент.Области["УдалитьСтраницу"];
				Обл.Гиперссылка = Истина;
				Обл.Текст = "Удалить страницу";
			КонецЕсли;
		КонецЕсли;
	// Обычные разделы.
	Иначе
		
		Для Каждого ЭлСтруктуры Из ЭтаФорма["СтруктураДанных" + ИмяТекРаздела] Цикл
			Обл = ТабличныйДокумент.Области.Найти(ЭлСтруктуры.Ключ);
			Если Обл <> Неопределено И Обл.СодержитЗначение Тогда 
				Обл.Значение = ЭлСтруктуры.Значение;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Если ИмяТекРаздела <> "Титульный" Тогда
		
		ЗаполнитьПоказателиЗначениямиПоУмолчанию(ИмяТекРаздела);
		
		УстановитьФорматВыводаНаСервере(ИмяТекРаздела);
		
		УстановитьЦветФонаЯчейкиНаСервере(,, ИмяТекРаздела);
		
	КонецЕсли;
	
	УстановитьДоступностьОбластей(ЭтаФорма, ИмяТекРаздела);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоказателиЗначениямиПоУмолчанию(НаимРаздела)
	
	Возврат;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьОтчет(Команда)
	
	РегламентированнаяОтчетностьКлиент.МеханизмыОчисткиРегламентированныхОтчетов(ЭтаФорма, "ОчиститьВесьОтчет");
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьОтчет(Команда)
	
	Если Элементы.РазделыОтчета.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СохранитьНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСтраницу(Команда)
	
	ВставитьДополнительнуюСтраницуНаСервере(Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
	Обл = ТабличныйДокумент.Области["УдалитьСтраницуЗначок"];
	Обл.Гиперссылка = Истина;
	Обл.Текст = "х";
	Обл = ТабличныйДокумент.Области["УдалитьСтраницу"];
	Обл.Гиперссылка = Истина;
	Обл.Текст = "Удалить страницу";
	
КонецПроцедуры

&НаСервере
Процедура ВставитьДополнительнуюСтраницуНаСервере(ИмяТекущейСтраницыПанели = Неопределено )
	
	ИзменитьТаблицуПараметровАвтозаполнения(1, ИмяТекущейСтраницыПанели);
	
	СтруктураРеквизитовФормы.ОтключитьВыполнениеРасчета = Истина;
	
	РегламентированнаяОтчетность.ВставитьДополнительнуюСтраницуНаСервере(ЭтаФорма, ИмяТекущейСтраницыПанели);
	РегламентированнаяОтчетность.ПослеВставкиДополнительнойСтраницыНаСервере(ЭтаФорма, ИмяТекущейСтраницыПанели);
	
	СтруктураРеквизитовФормы.ОтключитьВыполнениеРасчета = Ложь;
	
	СохранитьДанныеРаздела(ИмяТекущейСтраницыПанели, Ложь, Ложь);
	
	РасчетНаСервере(ИмяТекущейСтраницыПанели);
	
	СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
	
	УстановитьДоступностьОбластей(ЭтаФорма, ИмяТекущейСтраницыПанели);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСтраницуКопированием(Команда)
	
	ДобавитьДополнительнуюСтраницуКопированиемНаСервере(Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
	Обл = ТабличныйДокумент.Области["УдалитьСтраницуЗначок"];
	Обл.Гиперссылка = Истина;
	Обл.Текст = "х";
	Обл = ТабличныйДокумент.Области["УдалитьСтраницу"];
	Обл.Гиперссылка = Истина;
	Обл.Текст = "Удалить страницу";
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьДополнительнуюСтраницуКопированиемНаСервере(ИмяТекущейСтраницы = Неопределено)
	
	АктивныеСтраницы = ТаблицаСтраницыРаздел1.НайтиСтроки(Новый Структура("АктивнаяСтраница", Истина));
	
	Если АктивныеСтраницы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	АктивнаяСтраницаПередКопированием = АктивныеСтраницы[0];
	
	ВставитьДополнительнуюСтраницуНаСервере(ИмяТекущейСтраницы);
	
	ТаблицаСтраницыРаздел1[ТаблицаСтраницыРаздел1.Количество() - 1].Данные[0].Значение
	= ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(АктивнаяСтраницаПередКопированием.Данные[0].Значение);
	
	ВывестиМакетВТаблДокНаСервере(ИмяТекущейСтраницы, ТаблицаСтраницыРаздел1.Количество());
	
	РасчетНаСервере(ИмяТекущейСтраницы);
	
КонецПроцедуры

&НаСервере
Процедура УдалитьДополнительнуюСтраницуНаСервере(ИмяТекущейСтраницыПанели = Неопределено)
	
	ИзменитьТаблицуПараметровАвтозаполнения(-1, ИмяТекущейСтраницыПанели);
	
	РегламентированнаяОтчетность.УдалитьДополнительнуюСтраницуНаСервере(ЭтаФорма, ИмяТекущейСтраницыПанели);
	
	СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
	
	УстановитьДоступностьОбластей(ЭтаФорма, ИмяТекущейСтраницыПанели);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтраницу(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("УдалитьСтраницуЗавершение", ЭтотОбъект);
	ТекстВопроса = НСтр("ru='Удалить текущую страницу?'");
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 60, КодВозвратаДиалога.Да);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтраницуЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.РазделыОтчета.ТекущиеДанные;
	
	КопияТекущиеДанные = ТекущиеДанные;
	
	ТекущиеДанные = ТекущиеДанные.ПолучитьРодителя();
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.ПолучитьЭлементы().Количество() = 1 Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяСтраницаРазделаПослеУдаления = Неопределено;
	Если КопияТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета = ТекущиеДанные.ПолучитьЭлементы().Количество() Тогда
		ТекущаяСтраницаРазделаПослеУдаления = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(ТекущиеДанные.ПолучитьЭлементы(), "КолонкаНомерСтраницыРазделаОтчета", КопияТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета - 1);
	КонецЕсли;
	
	УдалитьДополнительнуюСтраницуНаСервере(Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
	
	ТекущиеДанные.ПолучитьЭлементы().Удалить(ТекущиеДанные.ПолучитьЭлементы().Индекс(КопияТекущиеДанные));
	
	НомерСтраницы = 1;
	
	Для Каждого СтраницаРаздела Из ТекущиеДанные.ПолучитьЭлементы() Цикл
		
		СтраницаРаздела.КолонкаРазделыОтчета              = "Стр. " + НомерСтраницы;
		СтраницаРаздела.КолонкаНомерСтраницыРазделаОтчета = НомерСтраницы;
		
		НомерСтраницы = НомерСтраницы + 1;
		
	КонецЦикла;
	
	Если НЕ ТекущаяСтраницаРазделаПослеУдаления = Неопределено Тогда
		Элементы.РазделыОтчета.ТекущаяСтрока = ТекущаяСтраницаРазделаПослеУдаления.ПолучитьИдентификатор();
	КонецЕсли;
	Обл = ТабличныйДокумент.Области.Найти("УдалитьСтраницуЗначок");
	Если Обл <> Неопределено Тогда 
		Если ТекущиеДанные.ПолучитьЭлементы().Количество() = 1 Тогда 
			Обл.Гиперссылка = Ложь;
			Обл.Текст = "";
			Обл = ТабличныйДокумент.Области["УдалитьСтраницу"];
			Обл.Гиперссылка = Ложь;
			Обл.Текст = "";
		Иначе
			Обл.Гиперссылка = Истина;
			Обл.Текст = "х";
			Обл = ТабличныйДокумент.Области["УдалитьСтраницу"];
			Обл.Гиперссылка = Истина;
			Обл.Текст = "Удалить страницу";
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция СобратьДанныеТекущегоТаблПоляНаКлиенте(ИмяТабличногоПоля) Экспорт
	
	Возврат СобратьДанныеТекущегоТаблПоля(ЭтаФорма, ИмяТабличногоПоля);
	
КонецФункции

&НаСервере
Процедура ОбновитьСтруктуруМногострочногоРазделаНаСервере(ИмяГруппы) Экспорт
	
	ОбновитьСтруктуруМногострочногоРаздела(ЭтаФорма, ИмяГруппы);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСтруктуруМногострочногоРазделаНаКлиенте(ИмяГруппы) Экспорт
	
	ОбновитьСтруктуруМногострочногоРаздела(ЭтаФорма, ИмяГруппы);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьСтруктуруМногострочногоРаздела(Форма, ИмяГруппы)
	
	Перем СтруктураГруппы;
	
	Форма.мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);
	
	СтруктураГруппы = Форма[СтруктураГруппы];
	
	ТекТабличноеПолеИмя = "ТабличныйДокумент";
	
	ТекТабличноеПоле = Форма[ТекТабличноеПолеИмя];
	
	Для НСтр = 1 По СтруктураГруппы.Количество() Цикл
		
		ТекСтрокаТаблицы = СтруктураГруппы[НСтр - 1];
		
		СписокИменКолонокРаздела = Форма.мСтруктураИменаКолонокРазделов[ИмяГруппы];
		
		Для НомерГрафы = 1 По Форма.мСтруктураКолвоКолонокРазделов[ИмяГруппы] Цикл
			
			ИмяКолонки = СписокИменКолонокРаздела.Получить(НомерГрафы - 1).Значение;
			
			Если СтруктураГруппы[0].Свойство(ИмяКолонки) Тогда
				
				ИмяЯчейки     = ИмяКолонки + "_" + НСтр;
				ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяЯчейки];
				
				Если ОбластьЯчейки.СодержитЗначение = Истина Тогда
					ЗначениеЯчейки = ОбластьЯчейки.Значение;
				Иначе
					ЗначениеЯчейки = ОбластьЯчейки.Текст;
				КонецЕсли;
				
				ТекСтрокаТаблицы[ИмяКолонки] = ЗначениеЯчейки;
				
			КонецЕсли;
			
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнениеЗначенийВКвадратикахНаКлиенте(Знач ИмяСтраницы) Экспорт
	
	ЗаполнениеЗначенийВКвадратиках(ЭтаФорма, ИмяСтраницы);
	
КонецПроцедуры

&НаКлиенте
Процедура РасчетНаКлиенте(ИмяТекущейСтраницыПанели = "", ОбластьИмя = "") Экспорт
	
	Расчет(ЭтаФорма, ИмяТекущейСтраницыПанели, ОбластьИмя);
	
КонецПроцедуры

&НаСервере
Процедура РасчетНаСервере(ИмяТекущейСтраницыПанели = "", ОбластьИмя = "") Экспорт
	
	Расчет(ЭтаФорма, ИмяТекущейСтраницыПанели, ОбластьИмя);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура Расчет(Форма, ИмяТекущейСтраницы = "", ОбластьИмя = "") Экспорт
	
	Перем ТаблицаБлока;
	
	Если Форма.СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет ИЛИ Форма.СтруктураРеквизитовФормы.мРежимПечати Тогда
		Возврат;
	КонецЕсли;
	
	Если Форма.СтруктураРеквизитовФормы.ОтключитьВыполнениеРасчета Тогда
		Возврат;
	КонецЕсли;
	
	СтраницыРаздела1 = Форма.ТаблицаСтраницыРаздел1;
	
	ЗначениеСтроки030 = 0;
	
	Для Каждого Страница Из СтраницыРаздела1 Цикл
		
		Данные = Страница.Данные[0].Значение;
		
		Страница.Данные[0].Пометка = Ложь; // для инициализации обмена с сервером
		
		Если Страница.АктивнаяСтраница Тогда
			
			Строка090 = ВРег(СокрЛП(Форма.ТабличныйДокумент.Области["П000010009001"].Значение));
			
			Если Строка090 = "M1" ИЛИ Строка090 = "M1G"
			 ИЛИ Строка090 = "М1" ИЛИ Строка090 = "М1G" Тогда // учтем оба варианта: кириллицу и латиницу
				ЗначениеСтроки140 = 20000;
			ИначеЕсли ЗначениеЗаполнено(Строка090) Тогда
				ЗначениеСтроки140 = 150000;
			Иначе
				ЗначениеСтроки140 = 0;
			КонецЕсли;
			
			Форма.ТабличныйДокумент.Области["П000010014001"].Значение = ЗначениеСтроки140;
			
			Строка140 = Форма.ТабличныйДокумент.Области["П000010014001"].Значение;
			Строка150 = Форма.ТабличныйДокумент.Области["П000010015001"].Значение;
			
			ЗначениеСтроки160 = Строка140 * Строка150;
			
			Форма.ТабличныйДокумент.Области["П000010016001"].Значение = ЗначениеСтроки160;
			
			Строка130 = Форма.ТабличныйДокумент.Области["П000010013001"].Значение;
			Строка160 = Форма.ТабличныйДокумент.Области["П000010016001"].Значение;
			
			ЗначениеСтроки170 = Строка160 - Строка130;
			
			Форма.ТабличныйДокумент.Области["П000010017001"].Значение = ЗначениеСтроки170;
			
			Строка170 = Форма.ТабличныйДокумент.Области["П000010017001"].Значение;
			
		Иначе
			
			Строка090 = ВРег(СокрЛП(Данные.П000010009001));
			
			Если Строка090 = "M1" ИЛИ Строка090 = "M1G"
			 ИЛИ Строка090 = "М1" ИЛИ Строка090 = "М1G" Тогда // учтем оба варианта: кириллицу и латиницу
				ЗначениеСтроки140 = 20000;
			ИначеЕсли ЗначениеЗаполнено(Строка090) Тогда
				ЗначениеСтроки140 = 150000;
			Иначе
				ЗначениеСтроки140 = 0;
			КонецЕсли;
			
			Данные.Вставить("П000010014001", ЗначениеСтроки140);
			
			Строка140 = Данные.П000010014001;
			Строка150 = Данные.П000010015001;
			
			ЗначениеСтроки160 = Строка140 * Строка150;
			
			Данные.Вставить("П000010016001", ЗначениеСтроки160);
			
			Строка130 = Данные.П000010013001;
			Строка160 = Данные.П000010016001;
			
			ЗначениеСтроки170 = Строка160 - Строка130;
			
			Данные.Вставить("П000010017001", ЗначениеСтроки170);
			
			Строка170 = Данные.П000010017001;
			
		КонецЕсли;
		
		ЗначениеСтроки030 = ЗначениеСтроки030 + Макс(0, Строка170);
		
	КонецЦикла;
	
	Если СтраницыРаздела1[0].АктивнаяСтраница Тогда
		
		Форма.ТабличныйДокумент.Области["П000010003001"].Значение = ЗначениеСтроки030;
		
	Иначе
		
		Форма.ТаблицаСтраницыРаздел1[0].Данные[0].Значение.Вставить(
		"П000010003001", ЗначениеСтроки030);
		
		Форма.ТаблицаСтраницыРаздел1[0].Данные[0].Пометка = Ложь; // для инициализации обмена с сервером
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьДеревоРазделовОтчетаНаКлиенте() Экспорт
	
	СформироватьДеревоРазделовОтчета(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура Обновить(Команда)
	
	Если ЭтаФорма.ТабличныйДокумент.Области["ПоМесту"].Значение <> "112" Тогда

	ЗаполнитьСведенияОбОрганизацииНаСервере();
	
	Модифицированность = Истина;
	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДатуВЯчейкахНаКлиенте() Экспорт
	
	ЗаполнитьДатуВЯчейках(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЦветФонаЯчейкиНаСервере(ИмяЯчейки = Неопределено, ВариантЗаполнения = Неопределено, ИмяТекущейСтраницыПанели = "") Экспорт
	
	УстановитьЦветФонаЯчейки(ЭтаФорма, ИмяЯчейки, ВариантЗаполнения, ИмяТекущейСтраницыПанели);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЦветФонаЯчейкиНаКлиенте(ИмяЯчейки = Неопределено, ВариантЗаполнения = Неопределено, ИмяТекущейСтраницыПанели = "") Экспорт
	
	УстановитьЦветФонаЯчейки(ЭтаФорма, ИмяЯчейки, ВариантЗаполнения, ИмяТекущейСтраницыПанели);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЦветФонаЯчейки(Форма, ИмяЯчейки = Неопределено, ВариантЗаполнения = Неопределено, ИмяТекущейСтраницыПанели = "")
	
	Перем ЦветФона;
	Перем Комментарий;

	// Не нужно разукрашивать табличные поля, если открывается без открытия формы (например печать или просмотр).
	Если Форма.СтруктураРеквизитовФормы.мБезОткрытияФормы Или Форма.СтруктураРеквизитовФормы.мРежимПечати Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ИмяЯчейки = Неопределено Тогда

		ИмяПоляТаблДокумента = "ТабличныйДокумент";

		Ключ = "_" + ВариантЗаполнения;
		Форма.мСтруктураЦветовРаскраски.Свойство(Ключ, ЦветФона);

		Если ВариантЗаполнения = 4 Тогда
			Форма[ИмяПоляТаблДокумента].Области[ИмяЯчейки].Защита = Истина;
		Иначе
			Форма[ИмяПоляТаблДокумента].Области[ИмяЯчейки].Защита = Ложь;
		КонецЕсли;

		// Установим цвет ячейки.
		Форма[ИмяПоляТаблДокумента].Области[ИмяЯчейки].ЦветФона = ЦветФона;

	Иначе
		
		// Устанавливаем цвет фона всех автозаполняемых ячеек активной страницы.
		ТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения(Форма, ИмяТекущейСтраницыПанели);
		Если ТаблицаВариантыЗаполнения = Неопределено Тогда
			Возврат;
		КонецЕсли;

		Для Каждого Строка Из ТаблицаВариантыЗаполнения Цикл
			ИмяПоказателя     = Строка.КодПоказателя;
			ВариантЗаполнения = Строка.ВариантЗаполнения;
			Комментарий       = Строка.Комментарий;
			КодПоказателяПоСтруктуре = Строка.КодПоказателяПоСтруктуре;
			
			КолвоСтрокВМногострочнойЧасти = ПоказательВходитВМногострочнуюЧасть(Форма, ИмяПоказателя);
			
			Если КолвоСтрокВМногострочнойЧасти > 0 Тогда
				Многострочность = Истина;
				БазоваяЧасть = ИмяПоказателя;
			Иначе
				Многострочность = Ложь;
				КолвоСтрокВМногострочнойЧасти = 1;
			КонецЕсли;
			
			Для Инд = 1 по КолвоСтрокВМногострочнойЧасти Цикл
				
				Если Многострочность Тогда
					ИмяПоказателя = БазоваяЧасть + "_" + Строка(Инд);
				КонецЕсли;
				
				ТекОбластьЯчеек = Форма.ТабличныйДокумент.Области[ИмяПоказателя];
				Если (Не ПустаяСтрока(Комментарий)) ИЛИ (Не ПустаяСтрока(ТекОбластьЯчеек.Примечание.Текст)) Тогда
					ТекОбластьЯчеек.Примечание.Текст = Комментарий;
				КонецЕсли;
				
				Ключ = "_" + ВариантЗаполнения;
				Форма.мСтруктураЦветовРаскраски.Свойство(Ключ, ЦветФона);
				
				Если ВариантЗаполнения = 4 Тогда
					Форма.ТабличныйДокумент.Области[ИмяПоказателя].Защита = Истина;
				Иначе
					Форма.ТабличныйДокумент.Области[ИмяПоказателя].Защита = Ложь;
				КонецЕсли;
				
				Форма.ТабличныйДокумент.Области[ИмяПоказателя].ЦветФона = ЦветФона;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуНастроек(Команда)
	
	ОткрытьФормуВыбораСтраниц("ВыбратьДляНастройки");
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	РегламентированнаяОтчетностьКлиент.ПередЗакрытиемРегламентированногоОтчета(ЭтаФорма, Отказ, СтандартнаяОбработка, ЗавершениеРаботы, ТекстПредупреждения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСДвухмернымШтрихкодомPDF417(Команда)
	
	РегламентированнаяОтчетностьКлиент.ВывестиМашиночитаемуюФорму(ЭтаФорма, Команда.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьБланк(Команда)
	
	Отказ = Ложь;
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("Команда", Команда);
	ОписаниеОповещения = Новый ОписаниеОповещения("ПоказатьБланкЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередПечатьюРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьБланкЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;

	Команда = ДополнительныеПараметры.Команда;
		
	Печать(Команда.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеСменыЕдИзмеренияИТочности()
	
	ПроверитьТочность();
	
	#Если ВебКлиент Тогда
		УстановитьФорматВыводаНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	#Иначе
		УстановитьФорматВыводаНаКлиенте(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	#КонецЕсли
	
	РасчетНаКлиенте(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьТочность()
	
	Если СтруктураРеквизитовФормы.ЕдиницаИзмерения
		= ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1 Тогда

		Если СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения > 2 Тогда
			
			Сообщение = Новый СообщениеПользователю;

			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='%1: при выводе сумм в рублях точность не может превышать 2 знака'"), ЭтаФорма.Заголовок);

			Сообщение.Сообщить();
			
			СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = 2;
			
		КонецЕсли;

	ИначеЕсли СтруктураРеквизитовФормы.ЕдиницаИзмерения
		= ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1000 Тогда

		Если СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения > 3 Тогда
			
			Сообщение = Новый СообщениеПользователю;

			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='%1: при выводе сумм в тысячах рублей точность не может превышать 3 знака'"), ЭтаФорма.Заголовок);

			Сообщение.Сообщить();
			
			СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = 3;
			
		КонецЕсли;

	ИначеЕсли СтруктураРеквизитовФормы.ЕдиницаИзмерения
		= ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1000000 Тогда

		Если СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения > 6 Тогда
			
			Сообщение = Новый СообщениеПользователю;

			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='%1: при выводе сумм в миллионах рублей точность не может превышать 6 знаков'"), ЭтаФорма.Заголовок);

			Сообщение.Сообщить();
			
			СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = 6;
			
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура УстановитьФорматВыводаНаСервере(НаимРаздела)
	
	УстановитьФорматВывода(ЭтаФорма, НаимРаздела);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьФорматВыводаНаКлиенте(НаимРаздела)
	
	УстановитьФорматВывода(ЭтаФорма, НаимРаздела);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьФорматВывода(Форма, НаимРаздела) Экспорт
	
	Перем СтруктураГруппы;
	Перем РазмерностьПрописьюТекст;

	Если Форма.СтруктураРеквизитовФормы.ЕдиницаИзмерения
			= Форма.ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1 Тогда
			
			Форма.СтруктураРеквизитовФормы.мДелитель = 1;
			РазмерностьПрописьюТекст = "в рублях";
			Форма.СтруктураРеквизитовФормы.мСтрокаФормата = "ЧЦ = 14; ЧДЦ = "
				+ Форма.СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧС = 0";
		
		ИначеЕсли Форма.СтруктураРеквизитовФормы.ЕдиницаИзмерения
			= Форма.ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1000 Тогда
			
			Форма.СтруктураРеквизитовФормы.мДелитель = 1000;
			РазмерностьПрописьюТекст = "в тыс. рублей";
			Форма.СтруктураРеквизитовФормы.мСтрокаФормата = "ЧЦ = 14; ЧДЦ = "
				+ Форма.СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧС = 3";
		
		ИначеЕсли Форма.СтруктураРеквизитовФормы.ЕдиницаИзмерения
			= Форма.ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1000000 Тогда
			
			Форма.СтруктураРеквизитовФормы.мДелитель = 1000000;
			РазмерностьПрописьюТекст = "в млн. рублей";
			Форма.СтруктураРеквизитовФормы.мСтрокаФормата = "ЧЦ = 14; ЧДЦ = "
				+ Форма.СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧС = 6";
		
	КонецЕсли;
		
	Для Каждого СтрПоказатели Из Форма.мТаблицаСоставПоказателей Цикл

		Если НЕ НаимРаздела = СтрПоказатели.ИмяПоляТаблДокумента Тогда
			Продолжить;
		КонецЕсли;
		
		КодПоказателя        = СокрП(СтрПоказатели.КодПоказателяПоСоставу);
		ПризнМногострочность = СокрП(СтрПоказатели.ПризнМногострочности);
		КодПоказателяПоСтруктуре = СокрП(СтрПоказатели.КодПоказателяПоСтруктуре);

		Если КодПоказателя = "===" Тогда
			Прервать;
		КонецЕсли;

		Если (Лев(КодПоказателя, 2) = "//") ИЛИ (КодПоказателя = "###") ИЛИ ПустаяСтрока(КодПоказателя) Тогда
			Продолжить;
		КонецЕсли;

		КодПоказателяВФорме = СокрП(СтрПоказатели.КодПоказателяПоФорме);

		ИмяПоказателя = КодПоказателя;
		Если НЕ ПустаяСтрока(КодПоказателяВФорме) Тогда
			ИмяПоказателя = КодПоказателяВФорме;
		КонецЕсли;

		ТипДанныхПоказателя = СокрП(СтрПоказатели.ТипДанныхПоказателя);
		
		Если (ТипДанныхПоказателя = "E" ИЛИ ТипДанныхПоказателя = "Е") И ПустаяСтрока(КодПоказателяПоСтруктуре) Тогда
			
			ТекТабличноеПоле = Форма.ТабличныйДокумент;
			
			Если ПризнМногострочность <> "/" Тогда
				ФорматируемаяОбласть = ТекТабличноеПоле.Области[ИмяПоказателя];
				ФорматируемаяОбласть.ТипЗначения = Форма.СтруктураРеквизитовФормы.мОписаниеТиповЧислоЕ;
				ФорматируемаяОбласть.Формат = Форма.СтруктураРеквизитовФормы.мСтрокаФормата;
			Иначе
				ИмяГруппы = Лев(ИмяПоказателя, 11);
				Форма.мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);
				
				СтруктураГруппы = Форма[СтруктураГруппы];
				
				Для НСтр = 1 По СтруктураГруппы.Количество() Цикл
					ФорматируемаяОбласть = ТекТабличноеПоле.Области[ИмяПоказателя + "_" + НСтр];
					ФорматируемаяОбласть.ТипЗначения = Форма.СтруктураРеквизитовФормы.мОписаниеТиповЧислоЕ;
					ФорматируемаяОбласть.Формат = Форма.СтруктураРеквизитовФормы.мСтрокаФормата;
				КонецЦикла;
				
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайла(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузитьИзФайлаЗавершение", ЭтотОбъект);
	
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередЗагрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура Выгрузить(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьЗавершение", ЭтотОбъект);

	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайлаЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ЗагрузитьИзФайлаОтчет();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайлаОтчет() Экспорт
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузитьИзФайлаОтчетЗавершение", ЭтотОбъект);
	
	Если Модифицированность Тогда
		СохранитьНаКлиенте(,ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайлаОтчетЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	РегламентированнаяОтчетностьЗагрузкаКлиент.ЗагрузитьИзФайлаОтчет(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Функция ЗагрузкаОтчетаИзФайла(ДанныеДляЗагрузки) Экспорт
	
	Если Модифицированность Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = СтрШаблон(НСтр("ru='Отчет ""%1"" не сохранен.'"), ЭтотОбъект.Заголовок);
		Сообщение.Сообщить();
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ ЗагрузкаОтчетаИзФайлаНаСервере(ДанныеДляЗагрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
		
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция ЗагрузкаОтчетаИзФайлаНаСервере(ДанныеДляЗагрузки)
	
	СформироватьСтруктуруПоказателей();
	
	ПараметрыОтчета = СформироватьСтруктуруПараметров();
	
	ДеревоДляЗагрузки = ИзвлечьСтруктуруXML();
	
	Если НЕ РегламентированнаяОтчетностьЗагрузка.ЗагрузкаОтчетаИзФайла(
		ЭтотОбъект, ПараметрыОтчета, ДанныеДляЗагрузки, ДеревоДляЗагрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура ВыгрузитьЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ВыгрузитьОтчет();
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузку(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьВыгрузкуЗавершение", ЭтотОбъект);
	
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузкуЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПроверитьВыгрузкуОтчета();
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузкуОтчета()
	
	Если НЕ ЗначениеЗаполнено(СтруктураРеквизитовФормы.Организация) Тогда
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Организация не выбрана! Выгрузка невозможна.'");
		Сообщение.Сообщить();
		
		Возврат;
		
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьВыгрузкуОтчетаЗавершение", ЭтотОбъект);
	
	Если Модифицированность Тогда
		СохранитьНаКлиенте(,ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузкуОтчетаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ФормаВыгрузкиРеглОтчета = ПолучитьФорму("Документ.ВыгрузкаРегламентированныхОтчетов.Форма.ФормаДокумента", , ЭтаФорма);
	
	СпДокОсн = Новый СписокЗначений;
	СпДокОсн.Добавить(СтруктураРеквизитовФормы.мСохраненныйДок);
	
	ФормаВыгрузкиРеглОтчета.Проверить(СпДокОсн);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ЗавершениеРаботы Тогда
				
		Возврат;
		
	КонецЕсли;
	
	ПриЗакрытииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПриЗакрытииНаСервере()
	
	РегламентированнаяОтчетность.ПриЗакрытииРегламентированногоОтчета(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если СтрНайти(Заголовок, СтруктураРеквизитовФормы.СтрПериодОтчета) = 0 Тогда
		Заголовок = Заголовок + " от " + СтруктураРеквизитовФормы.СтрПериодОтчета;
	КонецЕсли;
	
	ОргСтр = " (" + СтруктураРеквизитовФормы.НаимОрганизации + ")";
	Если СтрНайти(Заголовок, ОргСтр) = 0 Тогда
		Заголовок = Заголовок + ОргСтр;
	КонецЕсли;
	
	Заголовок = Заголовок + ?(СтрНайти(ЭтаФорма.ИмяФормы, "Внешний") > 0, " - внешний отчет", "");
	
	ПодключитьОбработчикОжидания("ВыполнитьПроверкуПередОткрытием", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПроверкуПередОткрытием()
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПриОткрытииЗавершение", ЭтотОбъект);
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередОткрытиемФормыРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытииЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Модифицированность = Ложь;
		Закрыть();
		Возврат;
	КонецЕсли;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ОпределитьИдМногострочногоРазделаПоТабличномуПолю(Форма, ИмяТекущейСтраницы) Экспорт
	
	Возврат Неопределено;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПоказательВходитВМногострочнуюЧасть(Форма, ИмяПоказателя)
	
	ИмяГруппы = Лев(ИмяПоказателя, 11);
	
	СтруктураГруппы = Неопределено;
	
	Если НЕ Форма.мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы) Тогда
		Возврат 0;
	Иначе
		СтруктураГруппы = Форма[СтруктураГруппы];
		Возврат СтруктураГруппы.Количество();
	КонецЕсли;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьТаблицуВариантовЗаполнения(Форма, ИмяСтраницыПанели, ПолучитьЭталонную = Ложь)

	#Если НаКлиенте Тогда
		Возврат РегламентированнаяОтчетностьКлиент.ПолучитьТаблицуВариантовЗаполненияНаКлиенте(Форма, ИмяСтраницыПанели, ПолучитьЭталонную);
	#Иначе
		Возврат РегламентированнаяОтчетностьВызовСервера.ПолучитьТаблицуВариантовЗаполненияНаСервере(Форма, ИмяСтраницыПанели, ПолучитьЭталонную);
	#КонецЕсли
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УдалитьДополнительнуюСтроку(Форма, СпециальноеДобавление = Ложь, ИмяКолонкиНомера = Неопределено, ТекущаяСтраница) Экспорт
	Перем ИсходноеКоличествоСтрокГруппы;
	Перем СтруктураГруппы;
	
	// Сначала выполним проверку на активную страницу панели формы,
	// которая содержит многострочный раздел.
	#Если НаКлиенте Тогда
		ИмяГруппы = Форма.ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаКлиенте(ТекущаяСтраница);
	#Иначе
		ИмяГруппы = Форма.ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ТекущаяСтраница);
	#КонецЕсли
	
	// Исходное количество строк группы.
	Форма.мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);
	
	Форма.мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);
	
	ТекТабличноеПолеИмя = "ТабличныйДокумент";
	
	ТекТабличноеПоле = Форма[ТекТабличноеПолеИмя];
	ТекущаяОбласть = Форма.Элементы[ТекТабличноеПолеИмя].ТекущаяОбласть;
	ИмяЯчейки      = ТекущаяОбласть.Имя;
	
	#Если НаКлиенте ИЛИ ТолстыйКлиентУправляемоеПриложение Тогда
		ИмяГруппы = РегламентированнаяОтчетностьКлиент.РазделТекущейОбласти(Форма, ТекущаяОбласть);
	#Иначе
		ИмяГруппы = РегламентированнаяОтчетностьВызовСервера.РазделТекущейОбластиНаСервере(Форма, ТекущаяОбласть);
	#КонецЕсли
	
	// Предварительно обновим структуру многострочных разделов.
	РегламентированнаяОтчетностьКлиентСервер.ОбновитьСтруктуруМногострочногоРаздела(Форма, ИмяГруппы);
	
	// Номер строки многострочного раздела определим по имени выделенной ячейки.
	НомУдаляемойСтроки = Число( Сред( ИмяЯчейки, СтрНайти( ИмяЯчейки, "_") + 1));
	НомерСтрокиТаблицы = НомУдаляемойСтроки - 1; // нумерация строк в таблице значений начинается с нуля
	СтруктураГруппы = Форма[СтруктураГруппы];
	
	ИмяПервойЯчейки = Форма.мСтруктураИменаКолонокРазделов[ИмяГруппы][0].Значение;
	
	Если СтруктураГруппы.Количество() > ИсходноеКоличествоСтрокГруппы Тогда
		// Удаляется добавленная строка.
		ИмяПервойЯчейкиУдаляемойСтроки= ИмяПервойЯчейки + "_" + НомУдаляемойСтроки;
		// Область первой ячейки удаляемой строки многострочного раздела.
		ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяПервойЯчейкиУдаляемойСтроки];
		
		НастройкиМнгЧ = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСвойствоРаздела(
			Форма, ТекущаяСтраница, "МногострочностьВРазделе").НайтиСтроки(Новый Структура("ИдГруппы", ИмяГруппы))[0];
		ВысотаСтроки = НастройкиМнгЧ.ВысотаСтроки;
		
		// Номера строк удаляемой области.
		НомерВерхЯчейкиОбласти = ОбластьЯчейки.Верх;
		НомерНижнЯчейкиОбласти = ОбластьЯчейки.Верх + ВысотаСтроки - 1;
		
		РегламентированнаяОтчетностьВызовСервера.СпециальногоУдаленияСтроки(ТекТабличноеПоле, ТекТабличноеПолеИмя, ИмяГруппы, НомерВерхЯчейкиОбласти, НомерНижнЯчейкиОбласти);
		
		Форма[ТекТабличноеПолеИмя] = ТекТабличноеПоле;
		
		КолвоСдвигаемыхСтрок = СтруктураГруппы.Количество() - НомУдаляемойСтроки;
		
		// Обновим имена ячеек сдвинутых строк.
		Если КолвоСдвигаемыхСтрок > 0 Тогда
			
			Для НСтр = НомУдаляемойСтроки + 1 По СтруктураГруппы.Количество() Цикл
				
				ТекСтрока = СтруктураГруппы[НСтр-1];
				
				СписокИменКолонокРаздела = Форма.мСтруктураИменаКолонокРазделов[ИмяГруппы];
				
				Для НомерГрафы = 1 По Форма.мСтруктураКолвоКолонокРазделов[ИмяГруппы] Цикл
					
					КолонкаИмя = СписокИменКолонокРаздела.Получить(НомерГрафы - 1).Значение;
					
					Если СтруктураГруппы[0].Свойство(КолонкаИмя) Тогда
						
						ИмяСдвинутойЯчейки = КолонкаИмя + "_" + НСтр;
						НовоеИмяСдвинутойЯчейки = КолонкаИмя + "_" + (НСтр - 1);
						
						ОбластьСдвинутойЯчейки     = ТекТабличноеПоле.Области[ИмяСдвинутойЯчейки];
						ОбластьСдвинутойЯчейки.Имя = НовоеИмяСдвинутойЯчейки;
						
						Если ОбластьСдвинутойЯчейки.СодержитЗначение <> Истина Тогда
							// Обновляем порядковый номер строки.
							
							СтарыйНомер = Число(ТекСтрока[КолонкаИмя]);
							НовыйПорядковыйНомер = Строка(Макс(СтарыйНомер - 1, 0));
							ОбластьСдвинутойЯчейки.Текст = НовыйПорядковыйНомер + ".";
							
							// Обновляем значение элемента таблицы значений.
							ТекСтрока[КолонкаИмя] = НовыйПорядковыйНомер;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
				
			КонецЦикла;
		КонецЕсли;
		
		// Обновляем структуру многострочного раздела.
		СтруктураГруппы.Удалить(НомерСтрокиТаблицы);
		
	Иначе
		// Строка не удаляется в форме табличного документа,
		// должнен осуществляться сдвиг строк.
		
		// Обновляем структуру многострочного раздела
		// методом удаления выбранной строки и добавления пустой строки.
		СтруктураГруппы.Удалить(НомерСтрокиТаблицы);
		
		ДобавляемаяСтрока = СтруктураГруппы.Добавить();
		
		СписокИменКолонокРаздела = Форма.мСтруктураИменаКолонокРазделов[ИмяГруппы];
		
		// Обновляем порядковые номера строк, выводимых в табличный документ.
		Для Каждого СтрокаТаблицы Из СтруктураГруппы Цикл
			
			НомерСтрокиВТаблице = СтруктураГруппы.Индекс(СтрокаТаблицы);
			НомерСтрокиВФормеТаблицы = Формат(НомерСтрокиВТаблице + 1, "ЧГ=0");
			
			Для НомерГрафы = 1 По Форма.мСтруктураКолвоКолонокРазделов[ИмяГруппы] Цикл
				
				КолонкаТаблицыИмя = СписокИменКолонокРаздела.Получить(НомерГрафы - 1).Значение;
				
				Если СтруктураГруппы[0].Свойство(КолонкаТаблицыИмя) Тогда
					
					ИмяЯчейки                = КолонкаТаблицыИмя + "_" + НомерСтрокиВФормеТаблицы;
					ОбластьЯчейкиТаблицы     = ТекТабличноеПоле.Области[ИмяЯчейки];
					
					Если ОбластьЯчейкиТаблицы.СодержитЗначение <> Истина Тогда
						
						ПервыйНомерВГруппе = 1;
						
						// Обновляем порядковый номер строки.
						НовыйПорядковыйНомер = Строка(ПервыйНомерВГруппе + НомерСтрокиВТаблице);
						
						СтрокаТаблицы[КолонкаТаблицыИмя] = НовыйПорядковыйНомер;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		// Данные в многострочном блоке обновляются в декларациях.
		// Обновляем экранную форму табличного документа.
		#Если НаКлиенте Тогда
			Форма.ВывестиРазделВТабличныйДокументНаКлиенте(ИмяГруппы, СтруктураГруппы);
		#Иначе
			Форма.ВывестиРазделВТабличныйДокументНаСервере(ИмяГруппы, СтруктураГруппы);
		#КонецЕсли
		
	КонецЕсли;
	
	Расчет(Форма, ТекущаяСтраница);
	
	// Назначим текущей областью таблицы первую редактируемую ячейку
	// удаленной строки, если ее порядковый номер меньше кол-ва строк
	// многострочного раздела, или последней строки раздела в противном случае.
	
	// Определяем текущую область таблицы.
	НомТекущейСтроки  = Мин(НомУдаляемойСтроки, СтруктураГруппы.Количество());
	
	ИмяТекущейОбласти = ИмяПервойЯчейки + "_" + НомТекущейСтроки;
	
	Форма.Элементы[ТекТабличноеПолеИмя].ТекущаяОбласть = ТекТабличноеПоле.Области[ИмяТекущейОбласти];
	
	// Установим фокус на поле табличн. документа.
	ТекущийЭлемент = Форма.Элементы[ТекТабличноеПолеИмя];
	
	Форма.Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ОчисткаРегламентированногоОтчетаНаСервере(ИмяСтраницы, ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста, РежимОчистки, Многостраничность, КолВоСтраницВРазделе) Экспорт
	
	УдалятьсяВсеДопЭкземпляры = Ложь;
	
	Если СтрНайти(РежимОчистки, "ОчиститьТекущийРаздел") > 0 Тогда
		
		Если (Многостраничность) И (КолВоСтраницВРазделе > 1) Тогда
			
			РегламентированнаяОтчетностьКлиентСервер.ОчиститьПоказателиОтчетаЗаполняемыеИзИБ(ЭтаФорма, ИмяСтраницы);

			УдалятьсяВсеДопЭкземпляры = Истина;
			
		Иначе
			
			ОчиститьТабличноеПолеНаСервере(ИмяСтраницы);
			
		КонецЕсли;
		
		Если ИмяСтраницы = "Раздел1" Тогда
			
			УстановитьДоступностьОбластей(ЭтаФорма, ИмяСтраницы);
			
		КонецЕсли;
		
		СформироватьДеревоРазделовОтчетаНаСервере();
		
	ИначеЕсли СтрНайти(РежимОчистки, "ОчиститьТекущийЭкземплярМногостраничногоРаздела") > 0 Тогда
		
		СтруктураРеквизитовФормы.ОтключитьВыполнениеРасчета = Истина;
		
		ОчиститьТабличноеПолеНаСервере(ИмяСтраницы);
		
		СохранитьДанныеРаздела(СтруктураРеквизитовФормы.НаимТекущегоРаздела, Истина, Ложь);
		
		СтруктураРеквизитовФормы.ОтключитьВыполнениеРасчета = Ложь;
		
	КонецЕсли;
	
	Если ИмяСтраницы = "Титульный" Тогда
		Если Элементы.Найти("ДатаПодписи") = Неопределено Тогда
			Область = ТабличныйДокумент.Области.Найти("ДатаПодписи");
			Если НЕ Область = Неопределено Тогда
				Если ТипЗнч(Область.Значение) = Тип("Строка") Тогда
					ДатаПодписи = Лев(СтрЗаменить(Область.Значение, ".", ""), 8);
				ИначеЕсли ТипЗнч(Область.Значение) = Тип("Дата") Тогда
					Если ЗначениеЗаполнено(Область.Значение) Тогда
						ДатаПодписи = Лев(СтрЗаменить(Формат(Область.Значение, "ДФ = ""дд.ММ.гггг 'г.'"""), ".", ""), 8);
					Иначе
						ДатаПодписи = "        ";
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиентСервер.ПослеОчисткиРегламентированногоОтчета(
		ЭтаФорма, ИмяСтраницы, ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста);
	
	СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчисткаРегламентированногоОтчетаНаКлиенте(ИмяСтраницы, ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста, РежимОчистки, Многостраничность, КолВоСтраницВРазделе) Экспорт
	
	УдалятьсяВсеДопЭкземпляры = Ложь;
	
	Если СтрНайти(РежимОчистки, "ОчиститьТекущийРаздел") > 0 Тогда
		
		Если (Многостраничность) И (КолВоСтраницВРазделе > 1) Тогда

			РегламентированнаяОтчетностьКлиентСервер.ОчиститьПоказателиОтчетаЗаполняемыеИзИБ(ЭтаФорма, ИмяСтраницы);

			УдалятьсяВсеДопЭкземпляры = Истина;
			
		Иначе

			ОчиститьТабличноеПолеНаКлиенте(ИмяСтраницы);

		КонецЕсли;
		
		СформироватьДеревоРазделовОтчетаНаКлиенте();
		
	ИначеЕсли СтрНайти(РежимОчистки, "ОчиститьТекущийЭкземплярМногостраничногоРаздела") > 0 Тогда
		
		ОчиститьТабличноеПолеНаКлиенте(ИмяСтраницы);
		
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиентСервер.ПослеОчисткиРегламентированногоОтчета(
		ЭтаФорма, ИмяСтраницы, ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста);
	
	СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораИФНС()
	
	НалоговыйОрган = СокрЛП(ТабличныйДокумент.Области.НалоговыйОрган.Значение);
	КПП = СокрЛП(ТабличныйДокумент.Области.КПП1.Значение);
	ЗначенияДляОтбора = Новый Массив;
	ЗначенияДляОтбора.Добавить(Новый Структура("КодНО, КПП", НалоговыйОрган, КПП));
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Организация", СтруктураРеквизитовФормы.Организация);
	ПараметрыФормы.Вставить("ЗначенияДляОтбора", ЗначенияДляОтбора);
	
	ФормаВыбораНалоговогоОргана = РегламентированнаяОтчетностьКлиент.ПолучитьОбщуюФормуПоИмени(
		"ФормаВыбораНалоговогоОргана", ПараметрыФормы, ЭтаФорма);
	
	Если ФормаВыбораНалоговогоОргана.ТаблицаНО.Количество() <> 0 Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаВыбораИФНСЗавершение", ЭтотОбъект);
		ФормаВыбораНалоговогоОргана.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
		ФормаВыбораНалоговогоОргана.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		ФормаВыбораНалоговогоОргана.Открыть();
		
	ИначеЕсли НЕ ЗначениеЗаполнено(НалоговыйОрган) Тогда
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Код налогового органа необходимо задать в справочнике ""Организации"".'");
		Сообщение.Сообщить();
		
	Иначе
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Для выбора инспекции, необходимо завести соответствующую запись в справочнике ""Регистрации в налоговом органе"".'");
		Сообщение.Сообщить();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораИФНСЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	Если РезультатВыбора <> Неопределено Тогда
		
		ВыбранныйКодНО = РезультатВыбора.КодНО;
		ДлинаКодаНО = СтрДлина(ВыбранныйКодНО);
		
		Для Инд = ДлинаКодаНО + 1 По 4 Цикл
			ВыбранныйКодНО = "0" + ВыбранныйКодНО;
		КонецЦикла;
		
		ТабличныйДокумент.Области["НалоговыйОрган"].Значение = ВыбранныйКодНО;
		
		ТабличныйДокумент.Области["КПП1"].Значение = РезультатВыбора.КПП;
		
		ЗаполнитьСведенияОПодписантах();
		
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТабличныйДокументВыбор(Элемент, Область, СтандартнаяОбработка)
	
	Если СтрЧислоВхождений(Область.Имя, "ДобавитьСтраницуКопированием") > 0 И Область.Текст <> "" Тогда
		ДобавитьСтраницуКопированием("");
		СтандартнаяОбработка = Ложь;
		Модифицированность = Истина;
	ИначеЕсли СтрЧислоВхождений(Область.Имя, "ДобавитьСтраницу") > 0 И Область.Текст <> "" Тогда
		ДобавитьСтраницу("");
		СтандартнаяОбработка = Ложь;
		Модифицированность = Истина;
	ИначеЕсли СтрЧислоВхождений(Область.Имя, "УдалитьСтраницу") > 0 И Область.Текст <> "" Тогда
		УдалитьСтраницу("");
		СтандартнаяОбработка = Ложь;
		Модифицированность = Истина;
	КонецЕсли;
	
	Если РегламентированнаяОтчетностьКлиент.ВыбраннаяОбластьРегламентированногоОтчетаНеВерна(ЭтаФорма, Область, СтандартнаяОбработка) Тогда
		Возврат;
	КонецЕсли;
	
	ИмяОбласти = Область.Имя;
	ИсходныйКодПоМесту = Неопределено;
	
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
		
		ИсходныйКодПоМесту = РегламентированнаяОтчетностьКлиентСервер.ВернутьЗначениеПараметраСЛиста(ЭтаФорма, "Титульный", "ПоМесту");
		
		КодПоМесту = ИсходныйКодПоМесту;
		
		Если КодПоМесту <> "112" Тогда
			
			Если СтрНайти(Область.Имя, "НалоговыйОрган") = 1 Тогда
				СтандартнаяОбработка = Ложь;
				ОбработкаВыбораИФНС();
				Возврат;
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Сведения" Тогда
		
		// Форма заполнения адреса раздела Сведения.
		Если (ИмяОбласти = "АдресКодРегиона")
		 ИЛИ (ИмяОбласти = "АдресИндекс")
		 ИЛИ (ИмяОбласти = "АдресРайон")
		 ИЛИ (ИмяОбласти = "АдресГород")
		 ИЛИ (ИмяОбласти = "АдресНаселенныйПункт")
		 ИЛИ (ИмяОбласти = "АдресУлица")
		 ИЛИ (ИмяОбласти = "АдресНомерДома")
		 ИЛИ (ИмяОбласти = "АдресНомерКорпуса")
		 ИЛИ (ИмяОбласти = "АдресНомерКвартиры") Тогда
		 
			СтандартнаяОбработка = Ложь;
			
			РоссийскийАдрес = Новый Соответствие;
			
			РоссийскийАдрес.Вставить("Индекс",          ТабличныйДокумент.Области.АдресИндекс.Значение);
			РоссийскийАдрес.Вставить("КодРегиона",      ТабличныйДокумент.Области.АдресКодРегиона.Значение);
			РоссийскийАдрес.Вставить("Район",           ТабличныйДокумент.Области.АдресРайон.Значение);
			РоссийскийАдрес.Вставить("Город",           ТабличныйДокумент.Области.АдресГород.Значение);
			РоссийскийАдрес.Вставить("НаселенныйПункт", ТабличныйДокумент.Области.АдресНаселенныйПункт.Значение);
			РоссийскийАдрес.Вставить("Улица",           ТабличныйДокумент.Области.АдресУлица.Значение);
			РоссийскийАдрес.Вставить("Дом",             ТабличныйДокумент.Области.АдресНомерДома.Значение);
			РоссийскийАдрес.Вставить("Корпус",          ТабличныйДокумент.Области.АдресНомерКорпуса.Значение);
			РоссийскийАдрес.Вставить("Квартира",        ТабличныйДокумент.Области.АдресНомерКвартиры.Значение);
			
			ЗначенияПолей = Новый СписокЗначений;
			
			ЗначенияПолей.Добавить(РоссийскийАдрес["Индекс"],          "Индекс");
			ЗначенияПолей.Добавить(РоссийскийАдрес["КодРегиона"],      "КодРегиона");
			ЗначенияПолей.Добавить(РоссийскийАдрес["Район"],           "Район");
			ЗначенияПолей.Добавить(РоссийскийАдрес["Город"],           "Город");
			ЗначенияПолей.Добавить(РоссийскийАдрес["НаселенныйПункт"], "НаселенныйПункт");
			ЗначенияПолей.Добавить(РоссийскийАдрес["Улица"],           "Улица");
			ЗначенияПолей.Добавить(РоссийскийАдрес["Дом"],             "Дом");
			ЗначенияПолей.Добавить(РоссийскийАдрес["Корпус"],          "Корпус");
			ЗначенияПолей.Добавить(РоссийскийАдрес["Квартира"],        "Квартира");
			
			ПредставлениеАдреса = РегламентированнаяОтчетностьКлиентСервер.ПредставлениеАдресаВФормате9Запятых("643," + РоссийскийАдрес["Индекс"] + ","
																													  + РоссийскийАдрес["КодРегиона"] + ","
																													  + РоссийскийАдрес["Район"] + ","
																													  + РоссийскийАдрес["Город"] + ","
																													  + РоссийскийАдрес["НаселенныйПункт"] + ","
																													  + РоссийскийАдрес["Улица"] + ","
																													  + РоссийскийАдрес["Дом"] + ","
																													  + РоссийскийАдрес["Корпус"] + ","
																													  + РоссийскийАдрес["Квартира"]);
			
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("Заголовок",               "Ввод адреса");
			ПараметрыФормы.Вставить("ЗначенияПолей", 		   ЗначенияПолей);
			ПараметрыФормы.Вставить("Представление", 		   ПредставлениеАдреса);
			ПараметрыФормы.Вставить("ВидКонтактнойИнформации", СтруктураРеквизитовФормы.СправочникиВидыКонтактнойИнформацииФактАдресОрганизации);
			
			ДополнительныеПараметры = Новый Структура;
			ДополнительныеПараметры.Вставить("РоссийскийАдрес", РоссийскийАдрес);
			ДополнительныеПараметры.Вставить("Префикс", "Адрес");
			
			ТипЗначения = Тип("ОписаниеОповещения");
			ПараметрыКонструктора = Новый Массив(3);
			ПараметрыКонструктора[0] = "ОткрытьФормуКонтактнойИнформацииЗавершение";
			ПараметрыКонструктора[1] = ЭтаФорма;
			ПараметрыКонструктора[2] = ДополнительныеПараметры;
			
			Оповещение = Новый (ТипЗначения, ПараметрыКонструктора);
			
			ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеКонтактнойИнформациейКлиент").ОткрытьФормуКонтактнойИнформации(ПараметрыФормы, , Оповещение);
			
		КонецЕсли;
		
	ИначеЕсли СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел1" Тогда
		
		Если ИмяОбласти = "П000010014001" Тогда
			
			ИсходноеЗначение = Область.Значение;
			
			СписокВыбора = Новый СписокЗначений;
			СписокВыбора.Добавить(0, "Не заполнено");
			СписокВыбора.Добавить(20000, "20000");
			СписокВыбора.Добавить(150000, "150000");
			СтандартнаяОбработка = Ложь;
		
			ИсходнаяСтрокаСписка = СписокВыбора.НайтиПоЗначению(ИсходноеЗначение);
			
			ДополнительныеПараметры = Новый Структура;
			ДополнительныеПараметры.Вставить("Область", Область);
			ОписаниеОповещения = Новый ОписаниеОповещения("ВыбратьЭлементБазоваяСтавкаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
			СписокВыбора.ПоказатьВыборЭлемента(ОписаниеОповещения, "Укажите базовую ставку (руб)", ИсходнаяСтрокаСписка);
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
		
	ПараметрВводаПоля = РегламентированнаяОтчетностьКлиентСервер.НайтиСвойстваПоказателя(ЭтаФорма, Область.Имя);
	
	Если ПараметрВводаПоля <> Неопределено И ПараметрВводаПоля.ТаблицаЗначений.Количество() > 0 Тогда
		
		КодПоказателя = ПараметрВводаПоля.Показатель;
		
		КопироватьДанныеФормы(ПараметрВводаПоля.ТаблицаЗначений, ТЗВыбора);
		
		ВвестиПоказатель(Элемент, Область, КодПоказателя, Ложь, ПараметрВводаПоля.ТекстПриВыборе, ТЗВыбора, СтандартнаяОбработка,,ИсходныйКодПоМесту);
		
	Иначе
			
		ТабличныйДокументВыборЗавершение(ИсходныйКодПоМесту);

	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьЭлементБазоваяСтавкаЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт

	Область = ДополнительныеПараметры.Область;
	Если РезультатВыбора <> Неопределено Тогда
		Область.Значение = РезультатВыбора.Значение;
		Расчет(ЭтаФорма, "", "");
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТабличныйДокументВыборЗавершение(Знач ИсходныйКодПоМесту)
	
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
		
		КодПоМесту = РегламентированнаяОтчетностьКлиентСервер.ВернутьЗначениеПараметраСЛиста(ЭтаФорма, "Титульный", "ПоМесту");
		
		Если КодПоМесту = "112" И ИсходныйКодПоМесту <> "112" Тогда
			
			ДополнительныеПараметры = Новый Структура("ИсходныйКодПоМесту", ИсходныйКодПоМесту);
			ОписаниеОповещения = Новый ОписаниеОповещения("ВопросКодПоМесту112Завершение", ЭтотОбъект, ДополнительныеПараметры);
			ТекстВопроса = НСтр(
			"ru='Внимание! Перед входом в режим заполнения для физического лица
			|будут очищены сведения титульного листа отчета.
			|Продолжить операцию?'");
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
			
		ИначеЕсли КодПоМесту <> "112" И ИсходныйКодПоМесту = "112" Тогда
			
			ДополнительныеПараметры = Новый Структура("ИсходныйКодПоМесту", ИсходныйКодПоМесту);
			ОписаниеОповещения = Новый ОписаниеОповещения("ВопросИсходныйКодПоМесту112", ЭтотОбъект, ДополнительныеПараметры);
			ТекстВопроса = НСтр(
			"ru='Внимание! Перед входом в основной режим заполнения
			|будут перезаполнены сведения титульного листа отчета.
			|Продолжить операцию?'");
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
		Иначе
			УстановитьДоступностьОбластей(ЭтаФорма, СтруктураРеквизитовФормы.НаимТекущегоРаздела);
			СтруктураРеквизитовФормы.ИсходныйКодПоМесту = ЭтаФорма.ТабличныйДокумент.Области["ПоМесту"].Значение;
		КонецЕсли;
	Иначе
		УстановитьДоступностьОбластей(ЭтаФорма, СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВопросИсходныйКодПоМесту112(РезультатВопроса, ДополнительныеПараметры1) Экспорт
	
	ИсходныйКодПоМесту = ДополнительныеПараметры1.ИсходныйКодПоМесту;
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		
		ЗаполнитьСведенияОбОрганизацииНаСервере();
		
		СтраницаСведения = мДеревоСтраницОтчета.ПолучитьЭлементы()[1];
		СтраницаСведения.ПоказатьСтраницу = 0;
		СтраницаСведения.ВыводНаПечать    = 0;
		РегламентированнаяОтчетностьКлиент.ОбновитьДеревоРазделовВФормеОтчета(ЭтаФорма);
		
	Иначе
		
		ЭтаФорма.ТабличныйДокумент.Области["ПоМесту"].Значение = ИсходныйКодПоМесту;
		
	КонецЕсли;
	УстановитьДоступностьОбластей(ЭтаФорма, СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	СтруктураРеквизитовФормы.ИсходныйКодПоМесту = ЭтаФорма.ТабличныйДокумент.Области["ПоМесту"].Значение;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросКодПоМесту112Завершение(РезультатВопроса, ДополнительныеПараметры1) Экспорт
	
	ИсходныйКодПоМесту = ДополнительныеПараметры1.ИсходныйКодПоМесту;
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		
		ЭтаФорма.ТабличныйДокумент.Области["ИНН1"].Значение           = "";
		ЭтаФорма.ТабличныйДокумент.Области["КПП1"].Значение           = "";
		ЭтаФорма.ТабличныйДокумент.Области["НаимОрг"].Значение        = "";
		ЭтаФорма.ТабличныйДокумент.Области["НалоговыйОрган"].Значение = "";
		ЭтаФорма.ТабличныйДокумент.Области["ПрПодп"].Значение         = "1";
		ЭтаФорма.ТабличныйДокумент.Области["ОргПодписант"].Значение   = "";
		ЭтаФорма.ТабличныйДокумент.Области["ОргУп"].Значение          = "";
		ЭтаФорма.ТабличныйДокумент.Области["ДокУпПред"].Значение      = "";
		ЭтаФорма.ТабличныйДокумент.Области["ТелОрганизации"].Значение = "";
		
		ЭтаФорма.ТаблицаСтраницыРаздел1[0].Данные[0].Значение.П000010002001 = "";
		
		СтраницаСведения = мДеревоСтраницОтчета.ПолучитьЭлементы()[1];
		СтраницаСведения.ПоказатьСтраницу = 1;
		СтраницаСведения.ВыводНаПечать    = 1;
		РегламентированнаяОтчетностьКлиент.ОбновитьДеревоРазделовВФормеОтчета(ЭтаФорма);
		
	Иначе
		
		ЭтаФорма.ТабличныйДокумент.Области["ПоМесту"].Значение = ИсходныйКодПоМесту;
		
	КонецЕсли;
	УстановитьДоступностьОбластей(ЭтаФорма, СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	СтруктураРеквизитовФормы.ИсходныйКодПоМесту = ЭтаФорма.ТабличныйДокумент.Области["ПоМесту"].Значение;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуКонтактнойИнформацииЗавершение(Результат, Параметры) Экспорт
	
	ОбновитьАдресВТабличномДокументе(Результат, Параметры.РоссийскийАдрес, Параметры.Префикс);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьАдресВТабличномДокументе(Результат, РоссийскийАдрес, Префикс)
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		
		// Обход ошибки платформы: в веб-клиенте, в результате выполнения процедуры "СформироватьАдрес"
		// общего модуля "РегламентированнаяОтчетностьВызовСервера", не изменяются значения ключей
		// соответствия "РоссийскийАдрес", передаваемого в качестве параметра.
		РоссийскийАдрес_ = РоссийскийАдрес;
		
		РегламентированнаяОтчетностьВызовСервера.СформироватьАдрес(Результат.КонтактнаяИнформация, РоссийскийАдрес_);
		
		ТабличныйДокумент.Области[Префикс + "Индекс"].Значение          = РоссийскийАдрес_["Индекс"];
		ТабличныйДокумент.Области[Префикс + "КодРегиона"].Значение      = РоссийскийАдрес_["КодРегиона"];
		ТабличныйДокумент.Области[Префикс + "Район"].Значение           = РоссийскийАдрес_["Район"];
		ТабличныйДокумент.Области[Префикс + "Город"].Значение           = РоссийскийАдрес_["Город"];
		ТабличныйДокумент.Области[Префикс + "НаселенныйПункт"].Значение = РоссийскийАдрес_["НаселенныйПункт"];
		ТабличныйДокумент.Области[Префикс + "Улица"].Значение           = РоссийскийАдрес_["Улица"];
		ТабличныйДокумент.Области[Префикс + "НомерДома"].Значение       = РоссийскийАдрес_["Дом"];
		ТабличныйДокумент.Области[Префикс + "НомерКорпуса"].Значение    = РоссийскийАдрес_["Корпус"];
		ТабличныйДокумент.Области[Префикс + "НомерКвартиры"].Значение   = РоссийскийАдрес_["Квартира"];
		
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТабличныйДокументПриИзмененииСодержимогоОбласти(Элемент, Область)
	
	Если Область.Имя = "ИНН1" Тогда
		
		ВведенноеЗначение = СокрЛП(ЭтаФорма.ТабличныйДокумент.Области["ИНН1"].Значение);
		
		Если (ВведенноеЗначение = "") ИЛИ (СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(ВведенноеЗначение) И СтрДлина(ВведенноеЗначение) = 12) Тогда
			
			ВведенноеЗначение = РегламентированнаяОтчетностьКлиентСервер.ДополнитьСтроку(ВведенноеЗначение, 12);
			
			ЭтаФорма.ТабличныйДокумент.Области["ИНН1"].Значение = ВведенноеЗначение;
			
			СтраницаСведения = мДеревоСтраницОтчета.ПолучитьЭлементы()[1];
			
			Если ЗначениеЗаполнено(ВведенноеЗначение) Тогда
				СтраницаСведения.ПоказатьСтраницу = 0;
				СтраницаСведения.ВыводНаПечать    = 0;
			Иначе
				СтраницаСведения.ПоказатьСтраницу = 1;
				СтраницаСведения.ВыводНаПечать    = 1;
			КонецЕсли;
			
			РегламентированнаяОтчетностьКлиент.ОбновитьДеревоРазделовВФормеОтчета(ЭтаФорма);
			
			Модифицированность = Истина;
			
		Иначе
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='ИНН должен состоять из 12 цифр.'");
			Сообщение.Сообщить();
			
		КонецЕсли;
		
	ИначеЕсли Область.Имя = "НалоговыйОрган" Тогда
		
		ВведенноеЗначение = СокрЛП(ЭтаФорма.ТабличныйДокумент.Области["НалоговыйОрган"].Значение);
		
		Если (ВведенноеЗначение = "") ИЛИ (СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(ВведенноеЗначение) И СтрДлина(ВведенноеЗначение) = 4) Тогда
			
			ВведенноеЗначение = РегламентированнаяОтчетностьКлиентСервер.ДополнитьСтроку(ВведенноеЗначение, 4);
			
			ЭтаФорма.ТабличныйДокумент.Области["НалоговыйОрган"].Значение = ВведенноеЗначение;
			
			Модифицированность = Истина;
			
		Иначе
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='Код налогового органа должен состоять из 4 цифр.'");
			Сообщение.Сообщить();
			
		КонецЕсли;
		
	ИначеЕсли Область.Имя = "ПоМесту" Тогда
		
		Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
			
			КодПоМесту = РегламентированнаяОтчетностьКлиентСервер.ВернутьЗначениеПараметраСЛиста(ЭтаФорма, "Титульный", "ПоМесту");
			
			Если КодПоМесту <> СтруктураРеквизитовФормы.ИсходныйКодПоМесту Тогда
				
				ТабличныйДокументВыборЗавершение(СтруктураРеквизитовФормы.ИсходныйКодПоМесту);
				
			КонецЕсли;
			
		КонецЕсли;
	ИначеЕсли Область.Имя = "НомерКорректировки" Тогда
		НомерКорректировки = Область.Значение;
		СтруктураРеквизитовФормы.ВидДокумента = ?(НомерКорректировки = 0, 0, 1);
		Модифицированность = Истина;
		Возврат;
	ИначеЕсли Область.Имя = "ДатаПодписи" Тогда
		ДатаПодписи = Область.Значение;
		ЗаполнитьСведенияОбОрганизацииНаСервере(Истина);
		Модифицированность = Истина;
		Возврат;
		
	ИначеЕсли Область.Имя = "ДатаСоставленияРасчета" Тогда
		
		Заголовок = СтрЗаменить(Заголовок, СтруктураРеквизитовФормы.СтрПериодОтчета, ПредставлениеПериода(НачалоДня(ТабличныйДокумент.Области.ДатаСоставленияРасчета.Значение), КонецДня(ТабличныйДокумент.Области.ДатаСоставленияРасчета.Значение), "ФП = Истина" ));
		
		СтруктураРеквизитовФормы.СтрПериодОтчета = ПредставлениеПериода(НачалоДня(ТабличныйДокумент.Области.ДатаСоставленияРасчета.Значение), КонецДня(ТабличныйДокумент.Области.ДатаСоставленияРасчета.Значение), "ФП = Истина");
		
		Возврат;
		
	ИначеЕсли Область.Имя = "П000010018001" Тогда
		
		Область.Значение = СтрЗаменить(Область.Значение, " ", "");
		
	КонецЕсли;
	
	Расчет(ЭтаФорма, "", "");
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьФИОРазделаСведения()
	
	Плательщик = СокрЛП(ЭтаФорма.СтруктураДанныхТитульный.НаимОрг);
	ФИО = РазложитьФИО(Плательщик);
	
	ЭтаФорма.ТабличныйДокумент.Области.ФизлицоФамилия.Значение = ФИО.Фамилия;
	
	ИнициалИмени = Лев(ФИО.Имя, 1);
	ИнициалИмени = ?(ЗначениеЗаполнено(ИнициалИмени), ИнициалИмени + ".", ИнициалИмени);
	ЭтаФорма.ТабличныйДокумент.Области.ФизлицоИмя.Значение = ИнициалИмени;
	
	ИнициалОтчества = Лев(ФИО.Отчество, 1);
	ИнициалОтчества = ?(ЗначениеЗаполнено(ИнициалОтчества), ИнициалОтчества + ".", ИнициалОтчества);
	ЭтаФорма.ТабличныйДокумент.Области.ФизлицоОтчество.Значение = ИнициалОтчества;
	
КонецПроцедуры

&НаСервере
Функция РазложитьФИО(Плательщик)
	
	Возврат РегламентированнаяОтчетность.РазложитьФИО(Плательщик);
	
КонецФункции

&НаСервере
Процедура ОчиститьНаСервере() Экспорт
	
	СтруктураДанныхСведения.Очистить();
	
	ТаблицаСтраницыРаздел1.Очистить();
	
	ИнициализацияМногостраничныхРазделов();
	
	Для Каждого мнгРаздел Из мСтруктураМногострочныхРазделов Цикл
		ЭтаФорма[мнгРаздел.Ключ].Очистить();
	КонецЦикла;
	
	ЗаполнитьПустыеСтруктурыДанных();
	
	Если НЕ СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
		ОчиститьТабличноеПолеНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	КонецЕсли;
	
	ЗаполнитьКБК(ЭтаФорма);
	
	ВывестиМакетСтраницыВТабличныйДокументНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела, 1);
	
	СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
	
	РегламентированнаяОтчетностьКлиентСервер.ОчиститьВариантыЗаполнения(ЭтаФорма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗапретитьВводДанныхВОбласть(ОбрабатываемаяОбласть, мСтруктураЦветовРаскраски, Очистка = Истина)
	
	ЦветНедоступнойОбласти = мСтруктураЦветовРаскраски["_5"];
	
	ОбрабатываемаяОбласть.Защита   = Истина;
	ОбрабатываемаяОбласть.ЦветФона = ЦветНедоступнойОбласти;
	
	Если Очистка Тогда
		
		ТипЗначенияОбласти = ТипЗнч(ОбрабатываемаяОбласть.Значение);
		
		Если ТипЗначенияОбласти = Тип("Число") Тогда
			ОбрабатываемаяОбласть.Значение = 0;
		ИначеЕсли ТипЗначенияОбласти = Тип("Строка") Тогда
			ОбрабатываемаяОбласть.Значение = "";
		Иначе
			ОбрабатываемаяОбласть.Значение = Неопределено;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РазрешитьВводДанныхВОбласть(ОбрабатываемаяОбласть, мСтруктураЦветовРаскраски)
	
	ЦветОбластиРучногоВвода = мСтруктураЦветовРаскраски["_0"];
	
	ОбрабатываемаяОбласть.Защита   = Ложь;
	ОбрабатываемаяОбласть.ЦветФона = ЦветОбластиРучногоВвода;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьОбластей(Форма, ИмяСтраницыПанели) Экспорт
	
	Если ИмяСтраницыПанели = "Раздел1" Тогда
		
		СтраницыРаздела = Форма[Форма.мСтруктураМногостраничныхРазделов.Раздел1];
		
		ЭтоПерваяСтраница = Ложь;
		
		Если СтраницыРаздела.НайтиСтроки(Новый Структура("АктивнаяСтраница", Истина)).Количество() > 0 Тогда
			
			АктивнаяСтраница = СтраницыРаздела.НайтиСтроки(Новый Структура("АктивнаяСтраница", Истина))[0];
			
			ЭтоПерваяСтраница = (СтраницыРаздела.Индекс(АктивнаяСтраница) = 0);
			
		КонецЕсли;
		
		Если ЭтоПерваяСтраница Тогда
			
			// Обработка КБК (стр. 010).
			ОбрабатываемаяОбласть = Форма.ТабличныйДокумент.Области["П000010001001"];
			РазрешитьВводДанныхВОбласть(ОбрабатываемаяОбласть, Форма.мСтруктураЦветовРаскраски);
		
			// Обработка кода по ОКТМО (стр. 020).
			ОбрабатываемаяОбласть = Форма.ТабличныйДокумент.Области["П000010002001"];
			РазрешитьВводДанныхВОбласть(ОбрабатываемаяОбласть, Форма.мСтруктураЦветовРаскраски);
			
			// Обработка "Общая сумма утилизационного сбора,
			// подлежащий уплате в бюджет (стр. 030).
			ОбрабатываемаяОбласть = Форма.ТабличныйДокумент.Области["П000010003001"];
			// Восстанавливаем цвет стр. 030 на первой странице раздела 1,
			// исходя из текущего значения реквизита ФлажокОтклАвтоРасчет.
			Если НЕ Форма.СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Тогда
				ОбрабатываемаяОбласть.Защита   = Истина;
				ОбрабатываемаяОбласть.ЦветФона = Форма.мСтруктураЦветовРаскраски["_4"];
			Иначе
				РазрешитьВводДанныхВОбласть(ОбрабатываемаяОбласть, Форма.мСтруктураЦветовРаскраски);
			КонецЕсли;
			ОбрабатываемаяОбласть.Формат = "ЧН=";
			
		Иначе
			
			// Обработка КБК (стр. 010).
			ОбрабатываемаяОбласть = Форма.ТабличныйДокумент.Области["П000010001001"];
			ЗапретитьВводДанныхВОбласть(ОбрабатываемаяОбласть, Форма.мСтруктураЦветовРаскраски);
			ОбрабатываемаяОбласть.Значение = "";
		
			// Обработка кода по ОКТМО (стр. 020).
			ОбрабатываемаяОбласть = Форма.ТабличныйДокумент.Области["П000010002001"];
			ЗапретитьВводДанныхВОбласть(ОбрабатываемаяОбласть, Форма.мСтруктураЦветовРаскраски);
			
			// Обработка "Общая сумма утилизационного сбора,
			// подлежащий уплате в бюджет (стр. 030).
			ОбрабатываемаяОбласть = Форма.ТабличныйДокумент.Области["П000010003001"];
			ЗапретитьВводДанныхВОбласть(ОбрабатываемаяОбласть, Форма.мСтруктураЦветовРаскраски);
			ОбрабатываемаяОбласть.Формат = "";
			
		КонецЕсли;
		
	ИначеЕсли ИмяСтраницыПанели = "Титульный" Тогда
		
		Если Форма.ТабличныйДокумент.Области["ПоМесту"].Значение = "112" Тогда
			
			РазрешитьВводДанныхВОбласть(Форма.ТабличныйДокумент.Области["ИНН1"],    Форма.мСтруктураЦветовРаскраски);
			РазрешитьВводДанныхВОбласть(Форма.ТабличныйДокумент.Области["НаимОрг"], Форма.мСтруктураЦветовРаскраски);
			РазрешитьВводДанныхВОбласть(Форма.ТабличныйДокумент.Области["ПрПодп"],  Форма.мСтруктураЦветовРаскраски);
			
			Если Форма.ТабличныйДокумент.Области["ПрПодп"].Значение = "2" Тогда
				
				РазрешитьВводДанныхВОбласть(Форма.ТабличныйДокумент.Области["ОргПодписант"], Форма.мСтруктураЦветовРаскраски);
				РазрешитьВводДанныхВОбласть(Форма.ТабличныйДокумент.Области["ОргУп"],        Форма.мСтруктураЦветовРаскраски);
				РазрешитьВводДанныхВОбласть(Форма.ТабличныйДокумент.Области["ДокУпПред"],    Форма.мСтруктураЦветовРаскраски);
				
			Иначе
				
				ЗапретитьВводДанныхВОбласть(Форма.ТабличныйДокумент.Области["ОргПодписант"], Форма.мСтруктураЦветовРаскраски);
				ЗапретитьВводДанныхВОбласть(Форма.ТабличныйДокумент.Области["ОргУп"],        Форма.мСтруктураЦветовРаскраски);
				ЗапретитьВводДанныхВОбласть(Форма.ТабличныйДокумент.Области["ДокУпПред"],    Форма.мСтруктураЦветовРаскраски);
				
			КонецЕсли;
			
		Иначе
			
			ЗапретитьВводДанныхВОбласть(Форма.ТабличныйДокумент.Области["ИНН1"],         Форма.мСтруктураЦветовРаскраски, Ложь);
			ЗапретитьВводДанныхВОбласть(Форма.ТабличныйДокумент.Области["НаимОрг"],      Форма.мСтруктураЦветовРаскраски, Ложь);
			ЗапретитьВводДанныхВОбласть(Форма.ТабличныйДокумент.Области["ПрПодп"],       Форма.мСтруктураЦветовРаскраски, Ложь);
			ЗапретитьВводДанныхВОбласть(Форма.ТабличныйДокумент.Области["ОргПодписант"], Форма.мСтруктураЦветовРаскраски, Ложь);
			ЗапретитьВводДанныхВОбласть(Форма.ТабличныйДокумент.Области["ОргУп"],        Форма.мСтруктураЦветовРаскраски, Ложь);
			ЗапретитьВводДанныхВОбласть(Форма.ТабличныйДокумент.Области["ДокУпПред"],    Форма.мСтруктураЦветовРаскраски, Ложь);
			
		КонецЕсли;
		
	ИначеЕсли ИмяСтраницыПанели = "Сведения" Тогда
		
		Если Форма.СтруктураДанныхТитульный.ПоМесту = "112"
			И НЕ ЗначениеЗаполнено(Форма.СтруктураДанныхТитульный.ИНН1) Тогда
			
			РазрешитьВводДанныхВОбласть(Форма.ТабличныйДокумент.Области["КодВидаДокумента"],    Форма.мСтруктураЦветовРаскраски);
			РазрешитьВводДанныхВОбласть(Форма.ТабличныйДокумент.Области["СерияНомерДокумента"], Форма.мСтруктураЦветовРаскраски);
			РазрешитьВводДанныхВОбласть(Форма.ТабличныйДокумент.Области["КемВыданДокумент"],    Форма.мСтруктураЦветовРаскраски);
			РазрешитьВводДанныхВОбласть(Форма.ТабличныйДокумент.Области["ДатаВыдачи"],          Форма.мСтруктураЦветовРаскраски);
			
			РазрешитьВводДанныхВОбласть(Форма.ТабличныйДокумент.Области["АдресИндекс"],          Форма.мСтруктураЦветовРаскраски);
			РазрешитьВводДанныхВОбласть(Форма.ТабличныйДокумент.Области["АдресКодРегиона"],      Форма.мСтруктураЦветовРаскраски);
			РазрешитьВводДанныхВОбласть(Форма.ТабличныйДокумент.Области["АдресРайон"],           Форма.мСтруктураЦветовРаскраски);
			РазрешитьВводДанныхВОбласть(Форма.ТабличныйДокумент.Области["АдресГород"],           Форма.мСтруктураЦветовРаскраски);
			РазрешитьВводДанныхВОбласть(Форма.ТабличныйДокумент.Области["АдресНаселенныйПункт"], Форма.мСтруктураЦветовРаскраски);
			РазрешитьВводДанныхВОбласть(Форма.ТабличныйДокумент.Области["АдресУлица"],           Форма.мСтруктураЦветовРаскраски);
			РазрешитьВводДанныхВОбласть(Форма.ТабличныйДокумент.Области["АдресНомерДома"],       Форма.мСтруктураЦветовРаскраски);
			РазрешитьВводДанныхВОбласть(Форма.ТабличныйДокумент.Области["АдресНомерКорпуса"],    Форма.мСтруктураЦветовРаскраски);
			РазрешитьВводДанныхВОбласть(Форма.ТабличныйДокумент.Области["АдресНомерКвартиры"],   Форма.мСтруктураЦветовРаскраски);
			
		Иначе
			
			ЗапретитьВводДанныхВОбласть(Форма.ТабличныйДокумент.Области["КодВидаДокумента"],    Форма.мСтруктураЦветовРаскраски);
			ЗапретитьВводДанныхВОбласть(Форма.ТабличныйДокумент.Области["СерияНомерДокумента"], Форма.мСтруктураЦветовРаскраски);
			ЗапретитьВводДанныхВОбласть(Форма.ТабличныйДокумент.Области["КемВыданДокумент"],    Форма.мСтруктураЦветовРаскраски);
			ЗапретитьВводДанныхВОбласть(Форма.ТабличныйДокумент.Области["ДатаВыдачи"],          Форма.мСтруктураЦветовРаскраски);
			
			ЗапретитьВводДанныхВОбласть(Форма.ТабличныйДокумент.Области["АдресИндекс"],          Форма.мСтруктураЦветовРаскраски);
			ЗапретитьВводДанныхВОбласть(Форма.ТабличныйДокумент.Области["АдресКодРегиона"],      Форма.мСтруктураЦветовРаскраски);
			ЗапретитьВводДанныхВОбласть(Форма.ТабличныйДокумент.Области["АдресРайон"],           Форма.мСтруктураЦветовРаскраски);
			ЗапретитьВводДанныхВОбласть(Форма.ТабличныйДокумент.Области["АдресГород"],           Форма.мСтруктураЦветовРаскраски);
			ЗапретитьВводДанныхВОбласть(Форма.ТабличныйДокумент.Области["АдресНаселенныйПункт"], Форма.мСтруктураЦветовРаскраски);
			ЗапретитьВводДанныхВОбласть(Форма.ТабличныйДокумент.Области["АдресУлица"],           Форма.мСтруктураЦветовРаскраски);
			ЗапретитьВводДанныхВОбласть(Форма.ТабличныйДокумент.Области["АдресНомерДома"],       Форма.мСтруктураЦветовРаскраски);
			ЗапретитьВводДанныхВОбласть(Форма.ТабличныйДокумент.Области["АдресНомерКорпуса"],    Форма.мСтруктураЦветовРаскраски);
			ЗапретитьВводДанныхВОбласть(Форма.ТабличныйДокумент.Области["АдресНомерКвартиры"],   Форма.мСтруктураЦветовРаскраски);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ СТЫКОВКИ С СЕРВИСОМ СДАЧИ ОТЧЕТНОСТИ ЧЕРЕЗ ПРЕДСТАВИТЕЛЯ

&НаКлиенте
Процедура ОтправитьЧерезПредставителя(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОтправитьЧерезПредставителяЗавершение", ЭтотОбъект);
	
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьЧерезПредставителяЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ПриНажатииНаКнопкуОтправкиЧерезПредставителяВРегламентированномОтчете(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВИнтернете(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьВИнтернетеЗавершение", ЭтотОбъект);
	
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВИнтернетеЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ПроверитьВИнтернете(ЭтаФорма);
	
КонецПроцедуры

#Область ПанельОтправкиВКонтролирующиеОрганы

&НаКлиенте
Процедура ОбновитьОтправку(Команда)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОбновитьОтправкуИзПанелиОтправки(ЭтаФорма, "ФНС");
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаПротоколНажатие(Элемент)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьПротоколИзПанелиОтправки(ЭтаФорма, "ФНС");
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьНеотправленноеИзвещение(Команда)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОтправитьНеотправленноеИзвещениеИзПанелиОтправки(ЭтаФорма, "ФНС");
КонецПроцедуры

&НаКлиенте
Процедура ЭтапыОтправкиНажатие(Элемент)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьСостояниеОтправкиИзПанелиОтправки(ЭтаФорма, "ФНС");
КонецПроцедуры

&НаКлиенте
Процедура КритическиеОшибкиОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьКритическиеОшибкиИзПанелиОтправки(ЭтаФорма, "ФНС");
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаНаименованиеЭтапаНажатие(Элемент)
	
	ПараметрыИзменения = Новый Структура;
	ПараметрыИзменения.Вставить("Форма", ЭтаФорма);
	ПараметрыИзменения.Вставить("Организация", СтруктураРеквизитовФормы.Организация);
	ПараметрыИзменения.Вставить("КонтролирующийОрган",
		ПредопределенноеЗначение("Перечисление.ТипыКонтролирующихОрганов.ФНС"));
	
	РегламентированнаяОтчетностьКлиент.ИзменитьСтатусОтправки(ПараметрыИзменения);
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ОтправитьВКонтролирующийОрган(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверкаВозможностиВыгрузкиРегламентированногоОтчетаПередОтправкой", ЭтотОбъект);
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередОтправкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаВозможностиВыгрузкиРегламентированногоОтчетаПередОтправкой(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОтправитьВКонтролирующийОрганЗавершение", ЭтотОбъект);
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьВКонтролирующийОрганЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ПриНажатииНаКнопкуОтправкиВКонтролирующийОрган(ЭтаФорма, "ФНС");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Форма", ЭтаФорма);
	Оповещение = Новый ОписаниеОповещения("ПослеСохраненияФормыЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	СохранитьНаКлиенте(, Оповещение);
КонецПроцедуры

&НаКлиенте
Процедура ПослеСохраненияФормыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	ДополнительныеПараметры.Форма.Закрыть();
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОткрытьПрисоединенныеФайлы(Команда)
	
	РегламентированнаяОтчетностьКлиент.СохранитьОтчетИОткрытьФормуПрисоединенныеФайлы(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийПриИзменении(Элемент)
	Модифицированность = Истина;
КонецПроцедуры

&НаСервере
Функция ОбъектОтчета(ЭтаФормаИмя)
	
	Если мОбъектОтчета = Неопределено Тогда 
		мОбъектОтчета = РегламентированнаяОтчетностьВызовСервера.ОбъектОтчета(ЭтаФормаИмя);
	КонецЕсли;
	
	Возврат мОбъектОтчета;
	
КонецФункции

#Область МеханизмПроверкиКонтрольныхСоотношений

&НаКлиенте
Процедура Проверить(Команда)
	
	РегламентированнаяОтчетностьКлиент.ПроверитьКонтрольныеСоотношения(ЭтаФорма, ОбработкаКС);
	
КонецПроцедуры

&НаСервере
Функция ПроверитьКонтрольныеСоотношенияВОтчете() Экспорт
	
	СтруктураРеквизитовФормы.ТекстДляЗаголовочнойЧасти =
		РегламентированнаяОтчетностьКлиентСервер.ПредставлениеДокументаРеглОтч(СтруктураРеквизитовФормы.мСохраненныйДок);
	
	Если СписокРасшифровкиПоказателей = Неопределено Тогда
		СписокРасшифровкиПоказателей = РегламентированнаяОтчетность.СоздатьСписокРасшифровкиПоказателей();
	Иначе
		СписокРасшифровкиПоказателей.Очистить();
	КонецЕсли;
	
	Если СписокРасшифровкиформулы = Неопределено Тогда
		СписокРасшифровкиформулы = РегламентированнаяОтчетность.СоздатьСписокРасшифровкиформулы();
	Иначе
		СписокРасшифровкиформулы.Очистить();
	КонецЕсли;
	
	СчетчикФормулДляРасшифровок = 0;
	
	мДанныеОтчета = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить();
	мДанныеОтчета.Вставить("Страницы"	, мДанныеОтчета.ДанныеМногостраничныхРазделов.Раздел1);
	мДанныеОтчета.Вставить("Количество"	, мДанныеОтчета.ДанныеМногостраничныхРазделов.Раздел1.Количество());
	мДанныеОтчета.Вставить("СписокПоказателейКраткий"	, СоответствиеПоказателейРазделам());
	мДанныеОтчета.Вставить("СписокПоказателейПолный"	, СоответствиеПоказателейРазделам(Истина));
	мДанныеОтчета.Вставить("ДанныеКС", Новый Структура);
	ЗаполнитьТаблицуНСИ(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	СтруктураРезультата = ОбработатьРезультат(,,Истина);
	
	Если РазделЗаполнен(мДанныеОтчета.Страницы, "Раздел1")
		ИЛИ РазделЗаполнен(мДанныеОтчета.Страницы, "Раздел2") Тогда
	
		ПроверитьКС_1_01(СтруктураРезультата);
		ПроверитьКС_1_02(СтруктураРезультата);
	
		ПроверитьКС_2_01(СтруктураРезультата);
		ПроверитьКС_2_02(СтруктураРезультата);
		ПроверитьКС_2_03(СтруктураРезультата);
		ПроверитьКС_2_04(СтруктураРезультата);
		ПроверитьКС_2_05(СтруктураРезультата);
		ПроверитьКС_2_06(СтруктураРезультата);
		ПроверитьКС_2_07(СтруктураРезультата);
		ПроверитьКС_2_08(СтруктураРезультата);
		ПроверитьКС_2_09(СтруктураРезультата);
		ПроверитьКС_2_10(СтруктураРезультата);
		ПроверитьКС_2_11(СтруктураРезультата);
	
	КонецЕсли;
	
	мДанныеОтчета 		= Неопределено;
	СтруктураРезультата = ОбработатьРезультат(, СтруктураРезультата, Ложь);
	
	Если СписокРасшифровкиПоказателей.Количество() > 0 Тогда 
		СтруктураРезультата.Вставить("СписокРасшифровкиПоказателей", 
			ПоместитьВоВременноеХранилище(СписокРасшифровкиПоказателей, Новый УникальныйИдентификатор));
	КонецЕсли;
	
	Если СписокРасшифровкиформулы.Количество() > 0 Тогда
		АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(СписокРасшифровкиформулы, Новый УникальныйИдентификатор);
		СтруктураРезультата.Вставить("СписокРасшифровкиформулы", АдресВоВременномХранилище);
	КонецЕсли;
	
	Возврат СтруктураРезультата;
	
КонецФункции

&НаСервере
Процедура ПроверитьКС_1_01(СтруктураРезультата)
	
	// Формула КС: Р1С010 = "18211208000012000120"
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Раздела 1. КС 1.1'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='Постановление РФ от 26.12.2013 № 1291'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Код бюджетной классификации (строка 010 Раздела 1) должен соответствовать '") +
		НСтр("ru='КБК 182 1 12 08000 01 2000 120'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru='Страница %1'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, 
		НСтр("ru='Указанное значение КБК: (""%1""), допустимое: ""182 1 12 08000 01 2000 120""'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Допущена ошибка при определении КБК'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	
	Раздел1 = мДанныеОтчета.Страницы[0].Данные;
	Показатели = ЗаполнитьПоказатели("Р1С010", Раздел1);
	Настройки.Вставить("ДопСведенияПараметры", Новый Структура("Номер", 1));
	ЗарегистрироватьФормулу(Настройки);
	РасшифроватьПоказатели(Показатели, Настройки, "Раздел1", 1);
	Настройки.ЭтоОшибка = Не СокрЛП(Показатели.Р1С010.Значение) = НСтр("ru='18211208000012000120'");
	Настройки.Расшифровка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки, 
		РазложитьКБК(Показатели.Р1С010.Значение));
	ДобавитьЭлементВСтруктуруОшибок(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_1_02(СтруктураРезультата)
	
	// Формула КС: Р1С030 = сумме положительных значений Р2С170 всех страниц
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Раздела 1. КС 1.2'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='Постановление РФ от 26.12.2013 № 1291'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Общая сумма утилизационного сбора, подлежащая уплате в бюджет (строка 030 Раздела 1) должна быть '") +
		НСтр("ru='равна сумме положительных значений по всем строкам 170 Раздела 2'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru='Страница %1'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, 
		НСтр("ru='Значение строки 030 Раздела 1 (""%1"") = сумма положительных значений строк 170 Раздела 2 (""%2"")'"));
	Заголовки.Вставить("ОписаниеОшибки"		, 
		НСтр("ru='Допущена ошибка при определении общей суммы утилизационного сбора'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	
	Раздел1 = мДанныеОтчета.Страницы[0].Данные;
	ПоказателиРаздела1 = ЗаполнитьПоказатели("Р1С030", Раздел1);
	Настройки.Вставить("ДопСведенияПараметры", Новый Структура("Номер", 1));
	ЗарегистрироватьФормулу(Настройки);
	РасшифроватьПоказатели(ПоказателиРаздела1, Настройки, "Раздел1", 1);
	РасчетнаяСумма = 0;
	
	Для НомерСтраницы = 1 По мДанныеОтчета.Количество Цикл
		
		Раздел2 = мДанныеОтчета.Страницы[НомерСтраницы - 1].Данные;
		ПоказателиРаздела2 = ЗаполнитьПоказатели("Р2С170", Раздел2);
		Если ПоказателиРаздела2.Р2С170.Значение < 0 Тогда
			Продолжить;
		КонецЕсли;
		РасшифроватьПоказатели(ПоказателиРаздела2, Настройки, "Раздел1", НомерСтраницы);
		РасчетнаяСумма = РасчетнаяСумма + ПоказателиРаздела2.Р2С170.Значение;
		
	КонецЦикла;
	
	Настройки.ЭтоОшибка = Не Округлить(ПоказателиРаздела1.Р1С030.Значение) = Округлить(РасчетнаяСумма);
	Настройки.Расшифровка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки, 
		ПоказателиРаздела1.Р1С030.Значение, РасчетнаяСумма);
	ДобавитьЭлементВСтруктуруОшибок(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_2_01(СтруктураРезультата)
	
	// Формула КС: Дата составления расчета(Титульный лист) >= всех Р2С190
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Раздела 2. КС 2.1'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='Постановление РФ от 26.12.2013 № 1291'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Дата составления расчета на Титульном листе должна быть позже или равна дате '") +
		НСтр("ru='выдачи паспорта в строке 190 Раздела 2'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru='Страница %1'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, 
		НСтр("ru='Указанная дата составления расчета: (""%1"") позднее наиболее поздней даты '") +
		НСтр("ru='составления паспорта: (""%2"")'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Допущена ошибка при составлении Расчета'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	
	Титульный = мДанныеОтчета.ПоказателиОтчета.ПолеТабличногоДокументаТитульный;
	ПоказателиТитульного = ЗаполнитьПоказатели("ДатаРасчета", Титульный);
	ЗарегистрироватьФормулу(Настройки);
	РасшифроватьПоказатели(ПоказателиТитульного, Настройки, "Титульный", 1);
	ПозднейшаяДатаПаспорта = '00010101';
	
	Для НомерСтраницы = 1 По мДанныеОтчета.Количество Цикл
		
		Раздел2 = мДанныеОтчета.Страницы[НомерСтраницы - 1].Данные;
		ПоказателиРаздела2 = ЗаполнитьПоказатели("Р2С190", Раздел2);
		ПозднейшаяДатаПаспорта = Макс(ПоказателиРаздела2.Р2С190.Значение, ПозднейшаяДатаПаспорта);
		Если ПоказателиРаздела2.Р2С190.Значение <= ПоказателиТитульного.ДатаРасчета.Значение Тогда
			Продолжить;
		КонецЕсли;
		РасшифроватьПоказатели(ПоказателиРаздела2, Настройки, "Раздел1", НомерСтраницы);
		
	КонецЦикла;
	
	Настройки.ЭтоОшибка = ПозднейшаяДатаПаспорта > ПоказателиТитульного.ДатаРасчета.Значение;
	Настройки.Расшифровка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки, 
		ПоказателиТитульного.ДатаРасчета.ЗначениеСтр, Формат(ПозднейшаяДатаПаспорта, "ДЛФ=D"));
	ДобавитьЭлементВСтруктуруОшибок(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_2_02(СтруктураРезультата)
	
	// Формула КС: Р2С040 может принимать значения "10", "11", "12", "20", "25"
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Раздела 2. КС 2.2'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='Постановление РФ от 26.12.2013 № 1291'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Признак транспортного средства в строке 040 Раздела 2 может принимать значения: '") +
		НСтр("ru='10, 11, 12, 20, 25'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru='Страница %1'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, 
		НСтр("ru='Указанный признак ТС: (""%1""), допустимые значения: (""%2"")'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Допущена ошибка при определении коэффициента'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	
	СтрокаДопустимыхЗначений = НСтр("ru='10, 11, 12, 20, 25'");
	МассивДопустимыхЗначений = СтрРазделить(СтрокаДопустимыхЗначений, ", ", Ложь);
	
	Для НомерСтраницы = 1 По мДанныеОтчета.Количество Цикл
		
		Раздел2 = мДанныеОтчета.Страницы[НомерСтраницы - 1].Данные;
		Показатели = ЗаполнитьПоказатели("Р2С040", Раздел2);
		Настройки.Вставить("ДопСведенияПараметры", Новый Структура("Номер", НомерСтраницы));
		ЗарегистрироватьФормулу(Настройки);
		РасшифроватьПоказатели(Показатели, Настройки, "Раздел1", НомерСтраницы);
		Настройки.ЭтоОшибка = МассивДопустимыхЗначений.Найти(Показатели.Р2С040.Значение) = Неопределено;
		Настройки.Расшифровка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки, 
			Показатели.Р2С040.Значение, СтрокаДопустимыхЗначений);
		ДобавитьЭлементВСтруктуруОшибок(Настройки);
		
	КонецЦикла;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_2_03(СтруктураРезультата)
	
	// Формула КС: Если значение Р2С040 равно "11", "12", "20", "25", тогда Р2140 = 150 000
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Раздела 2. КС 2.3'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='Постановление РФ от 26.12.2013 № 1291'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Базовая ставка в строке 140 Раздела 2 должна быть равна 150 000, если признак '") +
		НСтр("ru='транспортного средства в строке 040 Раздела 2 имеет значения 11, 12, 20, 25'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru='Страница %1'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, 
		НСтр("ru='Указанная базовая ставка: (""%1""), допустимая: (""%2"")'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Допущена ошибка при определении базовой ставки'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	
	СтрокаДопустимыхЗначений = НСтр("ru='11, 12, 20, 25'");
	МассивДопустимыхЗначений = СтрРазделить(СтрокаДопустимыхЗначений, ", ", Ложь);
	
	Для НомерСтраницы = 1 По мДанныеОтчета.Количество Цикл
		
		Раздел2 = мДанныеОтчета.Страницы[НомерСтраницы - 1].Данные;
		Показатели = ЗаполнитьПоказатели("Р2С040, Р2С140", Раздел2);
		
		Если МассивДопустимыхЗначений.Найти(Показатели.Р2С040.Значение) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Настройки.Вставить("ДопСведенияПараметры", Новый Структура("Номер", НомерСтраницы));
		ЗарегистрироватьФормулу(Настройки);
		РасшифроватьПоказатели(Показатели, Настройки, "Раздел1", НомерСтраницы);
		Настройки.ЭтоОшибка = Не Показатели.Р2С140.Значение = 150000;
		Настройки.Расшифровка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки, 
			Показатели.Р2С140.ЗначениеСтр, Формат(150000, "ЧРД=,; ЧН="));
		ДобавитьЭлементВСтруктуруОшибок(Настройки);
		
	КонецЦикла;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_2_04(СтруктураРезультата)
	
	// Формула КС: Р2С090 должна иметь значения: M1, M2, M3, N1, N2, N3, M1G, M2G, M3G, N1G, N2G, N3G, O1, O2, O3, O4
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Раздела 2. КС 2.4'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='Постановление РФ от 26.12.2013 № 1291'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Категория транспортного средства в строке 090 Раздела 2 должна принимать значения: '") +
		НСтр("ru='M1, M2, M3, N1, N2, N3, M1G, M2G, M3G, N1G, N2G, N3G, O1, O2, O3, O4'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru='Страница %1'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, 
		НСтр("ru='Указанная категория ТС (""%1"") состоит в списке допустимых'"));
	Заголовки.Вставить("ОписаниеОшибки"		, 
		НСтр("ru='Допущена ошибка при определении категории (вида) транспортного средства'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	
	СтрокаДопустимыхЗначений = НСтр("ru='M1, M2, M3, N1, N2, N3, M1G, M2G, M3G, N1G, N2G, N3G, O1, O2, O3, O4'");
	МассивДопустимыхЗначений = СтрРазделить(СтрокаДопустимыхЗначений, ", ", Ложь);
	
	Для НомерСтраницы = 1 По мДанныеОтчета.Количество Цикл
		
		Раздел2 = мДанныеОтчета.Страницы[НомерСтраницы - 1].Данные;
		Показатели = ЗаполнитьПоказатели("Р2С090", Раздел2);
		Настройки.Вставить("ДопСведенияПараметры", Новый Структура("Номер", НомерСтраницы));
		ЗарегистрироватьФормулу(Настройки);
		РасшифроватьПоказатели(Показатели, Настройки, "Раздел1", НомерСтраницы);
		Настройки.ЭтоОшибка = МассивДопустимыхЗначений.Найти(Показатели.Р2С090.Значение) = Неопределено;
		Настройки.Расшифровка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки, 
			Показатели.Р2С090.ЗначениеСтр);
		ДобавитьЭлементВСтруктуруОшибок(Настройки);
		
	КонецЦикла;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_2_05(СтруктураРезультата)
	
	// Формула КС: Р2С090 должна иметь значения: O1, O2, O3, O4 если Р2040 = "25"
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Раздела 2. КС 2.5'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='Постановление РФ от 26.12.2013 № 1291'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Категория транспортного средства в строке 090 Раздела 2 должна принимать значения '") +
		НСтр("ru='О1, О2, О3, О4, если значение признака в строке 040 Раздела 2 равно 25'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru='Страница %1'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, 
		НСтр("ru='Указанная категория ТС: (""%1""), допустимая: (""%2"")'"));
	Заголовки.Вставить("ОписаниеОшибки"		, 
		НСтр("ru='Допущена ошибка при определении категории (вида) прицепа'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	
	СтрокаДопустимыхЗначений = НСтр("ru='O1, O2, O3, O4'");
	МассивДопустимыхЗначений = СтрРазделить(СтрокаДопустимыхЗначений, ", ", Ложь);
	
	Для НомерСтраницы = 1 По мДанныеОтчета.Количество Цикл
		
		Раздел2 = мДанныеОтчета.Страницы[НомерСтраницы - 1].Данные;
		Показатели = ЗаполнитьПоказатели("Р2С040, Р2С090", Раздел2);
		
		Если НЕ Показатели.Р2С040.Значение = НСтр("ru='25'") Тогда
			Продолжить;
		КонецЕсли;
		
		Настройки.Вставить("ДопСведенияПараметры", Новый Структура("Номер", НомерСтраницы));
		ЗарегистрироватьФормулу(Настройки);
		РасшифроватьПоказатели(Показатели, Настройки, "Раздел1", НомерСтраницы);
		Настройки.ЭтоОшибка = МассивДопустимыхЗначений.Найти(Показатели.Р2С090.Значение) = Неопределено;
		Настройки.Расшифровка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки, 
			Показатели.Р2С090.ЗначениеСтр, СтрокаДопустимыхЗначений);
		ДобавитьЭлементВСтруктуруОшибок(Настройки);
		
	КонецЦикла;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_2_06(СтруктураРезультата)
	
	// Формула КС: Р2С110 должна иметь значения: 0, 3
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Раздела 2. КС 2.6'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='Постановление РФ от 26.12.2013 № 1291'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Тип двигателя в строке 110 Раздела 2 должен принимать значения: 0 или 3'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru='Страница %1'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, 
		НСтр("ru='Указанный тип двигателя: (""%1""), допустимый: (""%2"")'"));
	Заголовки.Вставить("ОписаниеОшибки"		, 
		НСтр("ru='Допущена ошибка при определении типа двигателя'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	
	СтрокаДопустимыхЗначений = НСтр("ru='0, 3'");
	МассивДопустимыхЗначений = СтрРазделить(СтрокаДопустимыхЗначений, ", ", Ложь);
	
	Для НомерСтраницы = 1 По мДанныеОтчета.Количество Цикл
		
		Раздел2 = мДанныеОтчета.Страницы[НомерСтраницы - 1].Данные;
		Показатели = ЗаполнитьПоказатели("Р2С110", Раздел2);
		Настройки.Вставить("ДопСведенияПараметры", Новый Структура("Номер", НомерСтраницы));
		ЗарегистрироватьФормулу(Настройки);
		РасшифроватьПоказатели(Показатели, Настройки, "Раздел1", НомерСтраницы);
		Настройки.ЭтоОшибка = МассивДопустимыхЗначений.Найти(Показатели.Р2С110.Значение) = Неопределено;
		Настройки.Расшифровка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки, 
			Показатели.Р2С110.ЗначениеСтр, СтрокаДопустимыхЗначений);
		ДобавитьЭлементВСтруктуруОшибок(Настройки);
		
	КонецЦикла;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_2_07(СтруктураРезультата)
	
	// Формула КС: Р2С140 должна иметь значения: 20 000, 150 000
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Раздела 2. КС 2.7'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='Постановление РФ от 26.12.2013 № 1291'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Базовая ставка в строке 140 Раздела 2 должна принимать значения: 20 000 или 150 000'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru='Страница %1'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, 
		НСтр("ru='Указанная базовая ставка: (""%1""), допустимая: (""%2"")'"));
	Заголовки.Вставить("ОписаниеОшибки"		, 
		НСтр("ru='Допущена ошибка при определении базовой ставки'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	
	СтрокаДопустимыхЗначений	= НСтр("ru='20 000, 150 000'");
	МассивДопустимыхЗначений	= Новый Массив;
	МассивДопустимыхЗначений.Добавить(20000);
	МассивДопустимыхЗначений.Добавить(150000);
	
	Для НомерСтраницы = 1 По мДанныеОтчета.Количество Цикл
		
		Раздел2 = мДанныеОтчета.Страницы[НомерСтраницы - 1].Данные;
		Показатели = ЗаполнитьПоказатели("Р2С140", Раздел2);
		Настройки.Вставить("ДопСведенияПараметры", Новый Структура("Номер", НомерСтраницы));
		ЗарегистрироватьФормулу(Настройки);
		РасшифроватьПоказатели(Показатели, Настройки, "Раздел1", НомерСтраницы);
		Настройки.ЭтоОшибка = МассивДопустимыхЗначений.Найти(Показатели.Р2С140.Значение) = Неопределено;
		Настройки.Расшифровка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки, 
			Показатели.Р2С140.ЗначениеСтр, СтрокаДопустимыхЗначений);
		ДобавитьЭлементВСтруктуруОшибок(Настройки);
		
	КонецЦикла;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_2_08(СтруктураРезультата)
	
	// Формула КС: Р2С150 должна иметь значения коэффициентов согласно Постановлению 1291
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Раздела 2. КС 2.8а'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='Постановление РФ от 26.12.2013 № 1291'"));
	Заголовки.Вставить("ШаблонОписанияКС"	, 
		НСтр("ru='Коэффициент в строке 150 Раздела 2 может принимать значения: %1'") +
		НСтр("ru=' если с момента выпуска ТС прошло %2более трех лет'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru='Страница %1'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, 
		НСтр("ru='Указанное значение коэффициента (""%1"") состоит в числе допустимых'"));
	Заголовки.Вставить("ОписаниеОшибки"		, 
		НСтр("ru='Допущена ошибка при определении коэффициента'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	Титульный = мДанныеОтчета.ПоказателиОтчета.ПолеТабличногоДокументаТитульный;
	ПоказателиТитульного = ЗаполнитьПоказатели("ДатаРасчета", Титульный);
	
	// Свыше 3 лет
	ТаблицаСтавок = мДанныеОтчета.ДанныеКС.СтавкиТССвыше3;
	СтрокаЗначенийСортированная = СтрСоединить(ТаблицаСтавок.ВыгрузитьКолонку("Ставка"), "; ");
	
	Для НомерСтраницы = 1 По мДанныеОтчета.Количество Цикл
		
		Раздел2 = мДанныеОтчета.Страницы[НомерСтраницы - 1].Данные;
		ПоказателиРаздела2 = ЗаполнитьПоказатели("Р2С080, Р2С150", Раздел2);
		
		Если ДобавитьМесяц(ПоказателиТитульного.ДатаРасчета.Значение, -36) <= ПоказателиРаздела2.Р2С080.Значение 
			ИЛИ НЕ ЗначениеЗаполнено(ПоказателиРаздела2.Р2С080.Значение) Тогда
			Продолжить;
		КонецЕсли;
		
		Настройки.Вставить("ДопСведенияПараметры", Новый Структура("Номер", НомерСтраницы));
		Настройки.Вставить("ОписаниеКС", СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонОписанияКС,
			СтрокаЗначенийСортированная, ""));
		ЗарегистрироватьФормулу(Настройки);
		РасшифроватьПоказатели(ПоказателиТитульного	, Настройки, "Титульный"	, 1);
		РасшифроватьПоказатели(ПоказателиРаздела2	, Настройки, "Раздел1"	, НомерСтраницы);
		Настройки.ЭтоОшибка = ТаблицаСтавок.Найти(ПоказателиРаздела2.Р2С150.Значение) = Неопределено
			И Не ПоказателиТитульного.ДатаРасчета.Значение < '20160101';
		Настройки.Расшифровка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки, 
			ПоказателиРаздела2.Р2С150.ЗначениеСтр);
		ДобавитьЭлементВСтруктуруОшибок(Настройки);
		
	КонецЦикла;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
	// До 3 лет
	Настройки.Вставить("ТекстФормулы", НСтр("ru='Проверка Раздела 2. КС 2.8б'"));
	ТаблицаСтавок = мДанныеОтчета.ДанныеКС.СтавкиТСНовые;
	СтрокаЗначенийСортированная = СтрСоединить(ТаблицаСтавок.ВыгрузитьКолонку("Ставка"), "; ");
	
	Для НомерСтраницы = 1 По мДанныеОтчета.Количество Цикл
		
		Раздел2 = мДанныеОтчета.Страницы[НомерСтраницы - 1].Данные;
		ПоказателиРаздела2 = ЗаполнитьПоказатели("Р2С080, Р2С150", Раздел2);
		
		Если ДобавитьМесяц(ПоказателиТитульного.ДатаРасчета.Значение, -36) > ПоказателиРаздела2.Р2С080.Значение Тогда
			Продолжить;
		КонецЕсли;
		
		Настройки.Вставить("ДопСведенияПараметры", Новый Структура("Номер", НомерСтраницы));
		Настройки.Вставить("ОписаниеКС", СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонОписанияКС,
			СтрокаЗначенийСортированная, "не "));
		ЗарегистрироватьФормулу(Настройки);
		РасшифроватьПоказатели(ПоказателиТитульного	, Настройки, "Титульный"	, 1);
		РасшифроватьПоказатели(ПоказателиРаздела2	, Настройки, "Раздел1"	, НомерСтраницы);
		Настройки.ЭтоОшибка = ТаблицаСтавок.Найти(ПоказателиРаздела2.Р2С150.Значение) = Неопределено
			И Не ПоказателиТитульного.ДатаРасчета.Значение < '20160101';
		Настройки.Расшифровка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки, 
			ПоказателиРаздела2.Р2С150.ЗначениеСтр);
		ДобавитьЭлементВСтруктуруОшибок(Настройки);
		
	КонецЦикла;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_2_09(СтруктураРезультата)
	
	// Формула КС: Р2С160 = Р2С140 х Р2С150
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Раздела 2. КС 2.9'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='Постановление РФ от 26.12.2013 № 1291'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Сумма утилизационного сбора в строке 160 Раздела 2 должна быть равна произведению '") +
		НСтр("ru='значений по строкам 140 и 150 Раздела 2'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru='Страница %1'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = %2 х %3 Итог [%4]'"));
	Заголовки.Вставить("ОписаниеОшибки"		, 
		НСтр("ru='Допущена ошибка при определении суммы утилизационного сбора, уплаченной за базовое ТС (шасси, прицеп)'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	
	Для НомерСтраницы = 1 По мДанныеОтчета.Количество Цикл
		
		Раздел2 = мДанныеОтчета.Страницы[НомерСтраницы - 1].Данные;
		Показатели = ЗаполнитьПоказатели("Р2С140, Р2С150, Р2С160", Раздел2);
		Настройки.Вставить("ДопСведенияПараметры", Новый Структура("Номер", НомерСтраницы));
		ЗарегистрироватьФормулу(Настройки);
		РасшифроватьПоказатели(Показатели, Настройки, "Раздел1", НомерСтраницы);
		РасчетнаяСумма = Округлить(Показатели.Р2С140.Значение * Показатели.Р2С150.Значение);
		Настройки.ЭтоОшибка = НЕ Показатели.Р2С160.Значение = РасчетнаяСумма;
		Настройки.Расшифровка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки, 
			Показатели.Р2С160.ЗначениеСтр, Показатели.Р2С140.ЗначениеСтр, Показатели.Р2С150.ЗначениеСтр, РасчетнаяСумма);
		ДобавитьЭлементВСтруктуруОшибок(Настройки);
		
	КонецЦикла;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_2_10(СтруктураРезультата)
	
	// Формула КС: Р2С170 = Р2С160 - Р2С130
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Раздела 2. КС 2.10'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='Постановление РФ от 26.12.2013 № 1291'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Сумма утилизационного сбора, подлежащая уплате  в строке 170 Раздела 2 должна быть '") +
		НСтр("ru='равна разнице значений строк 160 и 130 Раздела 2'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru='Страница %1'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = %2 - %3 Итог [%4]'"));
	Заголовки.Вставить("ОписаниеОшибки"		, 
		НСтр("ru='Допущена ошибка при определении суммы утилизационного сбора, подлежащей уплате'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	
	Для НомерСтраницы = 1 По мДанныеОтчета.Количество Цикл
		
		Раздел2 = мДанныеОтчета.Страницы[НомерСтраницы - 1].Данные;
		Показатели = ЗаполнитьПоказатели("Р2С130, Р2С160, Р2С170", Раздел2);
		Настройки.Вставить("ДопСведенияПараметры", Новый Структура("Номер", НомерСтраницы));
		ЗарегистрироватьФормулу(Настройки);
		РасшифроватьПоказатели(Показатели, Настройки, "Раздел1", НомерСтраницы);
		РасчетнаяСумма = Показатели.Р2С160.Значение - Показатели.Р2С130.Значение;
		Настройки.ЭтоОшибка = НЕ Показатели.Р2С170.Значение = РасчетнаяСумма;
		Настройки.Расшифровка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки, 
			Показатели.Р2С170.ЗначениеСтр, Показатели.Р2С160.ЗначениеСтр, Показатели.Р2С130.ЗначениеСтр, РасчетнаяСумма);
		ДобавитьЭлементВСтруктуруОшибок(Настройки);
		
	КонецЦикла;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_2_11(СтруктураРезультата)
	
	// Формула КС: Р2С050 должен быть уникальным в пределах отчета
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Раздела 2. КС 2.11'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='Постановление РФ от 26.12.2013 № 1291'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Данные о транспортном средстве в строке 050 Раздела 1 должны быть '") +
		НСтр("ru='представлены в единственном экземпляре'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru='Страница %1'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='Указанный VIN-номер (""%1"") уникален в Расчете'"));
	Заголовки.Вставить("ОписаниеОшибки"		, 
		НСтр("ru='Допущена ошибка в Расчете при заполнении VIN-номера'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	
	ТаблицаНомеров = Новый ТаблицаЗначений;
	ТаблицаНомеров.Колонки.Добавить("Номер");
	ТаблицаНомеров.Колонки.Добавить("НомерСтраницы");
	
	Для НомерСтраницы = 1 По мДанныеОтчета.Количество Цикл
		
		Раздел2 = мДанныеОтчета.Страницы[НомерСтраницы - 1].Данные;
		Показатели = ЗаполнитьПоказатели("Р2С050", Раздел2);
		НоваяСтрока = ТаблицаНомеров.Добавить();
		НоваяСтрока.Номер = Показатели.Р2С050.Значение;
		НоваяСтрока.НомерСтраницы = НомерСтраницы;
		
	КонецЦикла;
	
	Для НомерСтраницы = 1 По мДанныеОтчета.Количество Цикл
		
		Раздел2 = мДанныеОтчета.Страницы[НомерСтраницы - 1].Данные;
		Показатели = ЗаполнитьПоказатели("Р2С050", Раздел2);
		Настройки.Вставить("ДопСведенияПараметры", Новый Структура("Номер", НомерСтраницы));
		ЗарегистрироватьФормулу(Настройки);
		МассивСтрок = ТаблицаНомеров.НайтиСтроки(Новый Структура("Номер", Показатели.Р2С050.Значение));
		
		Для каждого Элемент Из МассивСтрок Цикл
			Раздел2 = мДанныеОтчета.Страницы[Элемент.НомерСтраницы - 1].Данные;
			Показатели = ЗаполнитьПоказатели("Р2С050", Раздел2);
			РасшифроватьПоказатели(Показатели, Настройки, "Раздел1", Элемент.НомерСтраницы);
		КонецЦикла;
		
		Настройки.ЭтоОшибка = МассивСтрок.Количество() > 1;
		Настройки.Расшифровка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки, 
			Показатели.Р2С050.Значение);
		ДобавитьЭлементВСтруктуруОшибок(Настройки);
		
	КонецЦикла;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Функция ПоказательПоСтроке(УсловныйКодПоказателя)
	
	Результат = Новый Структура;
	Результат.Вставить("Имя");
	Результат.Вставить("Представление");
	Результат.Вставить("ИзменяемаяРазмерность");
		
	Если УсловныйКодПоказателя = "Р1С010" Тогда
		Результат.Вставить("Имя", "П000010001001");
		Результат.Вставить("Представление", 
			НСтр("ru='Код бюджетной классификации'"));
		Результат.Вставить("ИзменяемаяРазмерность", Ложь);
		
	ИначеЕсли УсловныйКодПоказателя = "Р1С020" Тогда
		Результат.Вставить("Имя", "П000010002001");
		Результат.Вставить("Представление", 
			НСтр("ru='Код по ОКТМО'"));
		Результат.Вставить("ИзменяемаяРазмерность", Ложь);
		
	ИначеЕсли УсловныйКодПоказателя = "Р1С030" Тогда
		Результат.Вставить("Имя", "П000010003001");
		Результат.Вставить("Представление", 
			НСтр("ru='Общая сумма утилизационного сбора, подлежащая уплате в бюджет (в рублях)'"));
		Результат.Вставить("ИзменяемаяРазмерность", Истина);
		
	ИначеЕсли УсловныйКодПоказателя = "Р2С040" Тогда
		Результат.Вставить("Имя", "П000010004001");
		Результат.Вставить("Представление", 
			НСтр("ru='Признак'"));
		Результат.Вставить("ИзменяемаяРазмерность", Ложь);
		
	ИначеЕсли УсловныйКодПоказателя = "Р2С050" Тогда
		Результат.Вставить("Имя", "П000010005001");
		Результат.Вставить("Представление", 
			НСтр("ru='Идентификационный номер транспортного средства (VIN)'"));
		Результат.Вставить("ИзменяемаяРазмерность", Ложь);
		
	ИначеЕсли УсловныйКодПоказателя = "Р2С060" Тогда
		Результат.Вставить("Имя", "П000010006001");
		Результат.Вставить("Представление", 
			НСтр("ru='Марка транспортного средства'"));
		Результат.Вставить("ИзменяемаяРазмерность", Ложь);
		
	ИначеЕсли УсловныйКодПоказателя = "Р2С070" Тогда
		Результат.Вставить("Имя", "П000010007001");
		Результат.Вставить("Представление", 
			НСтр("ru='Модель транспортного средства'"));
		Результат.Вставить("ИзменяемаяРазмерность", Ложь);
		
	ИначеЕсли УсловныйКодПоказателя = "Р2С080" Тогда
		Результат.Вставить("Имя", "П000010008001");
		Результат.Вставить("Представление", 
			НСтр("ru='Дата выпуска транспортного средства'"));
		Результат.Вставить("ИзменяемаяРазмерность", Ложь);
		
	ИначеЕсли УсловныйКодПоказателя = "Р2С090" Тогда
		Результат.Вставить("Имя", "П000010009001");
		Результат.Вставить("Представление", 
			НСтр("ru='Категория (вид) транспортного средства'"));
		Результат.Вставить("ИзменяемаяРазмерность", Ложь);
		
	ИначеЕсли УсловныйКодПоказателя = "Р2С100" Тогда
		Результат.Вставить("Имя", "П000010010001");
		Результат.Вставить("Представление", 
			НСтр("ru='Рабочий объем двигателя (куб. см)'"));
		Результат.Вставить("ИзменяемаяРазмерность", Ложь);
		
	ИначеЕсли УсловныйКодПоказателя = "Р2С110" Тогда
		Результат.Вставить("Имя", "П000010011001");
		Результат.Вставить("Представление", 
			НСтр("ru='Тип двигателя'"));
		Результат.Вставить("ИзменяемаяРазмерность", Ложь);
		
	ИначеЕсли УсловныйКодПоказателя = "Р2С120" Тогда
		Результат.Вставить("Имя", "П000010012001");
		Результат.Вставить("Представление", 
			НСтр("ru='Полная масса (тонн)'"));
		Результат.Вставить("ИзменяемаяРазмерность", Ложь);
		
	ИначеЕсли УсловныйКодПоказателя = "Р2С130" Тогда
		Результат.Вставить("Имя", "П000010013001");
		Результат.Вставить("Представление", 
			НСтр("ru='Сумма утилизационного сбора, уплаченная за базовое транспортное средство (шасси, прицепы) (в рублях)'"));
		Результат.Вставить("ИзменяемаяРазмерность", Истина);
		
	ИначеЕсли УсловныйКодПоказателя = "Р2С140" Тогда
		Результат.Вставить("Имя", "П000010014001");
		Результат.Вставить("Представление", 
			НСтр("ru='Базовая ставка (в рублях)'"));
		Результат.Вставить("ИзменяемаяРазмерность", Истина);
		
	ИначеЕсли УсловныйКодПоказателя = "Р2С150" Тогда
		Результат.Вставить("Имя", "П000010015001");
		Результат.Вставить("Представление", 
			НСтр("ru='Коэффициент'"));
		Результат.Вставить("ИзменяемаяРазмерность", Ложь);
		
	ИначеЕсли УсловныйКодПоказателя = "Р2С160" Тогда
		Результат.Вставить("Имя", "П000010016001");
		Результат.Вставить("Представление", 
			НСтр("ru='Сумма утилизационного сбора (в рублях) (стр.140 х стр.150)'"));
		Результат.Вставить("ИзменяемаяРазмерность", Истина);
		
	ИначеЕсли УсловныйКодПоказателя = "Р2С170" Тогда
		Результат.Вставить("Имя", "П000010017001");
		Результат.Вставить("Представление", 
			НСтр("ru='Сумма утилизационного сбора, подлежащая уплате (в рублях) (стр.160 - стр.130)'"));
		Результат.Вставить("ИзменяемаяРазмерность", Истина);
		
	ИначеЕсли УсловныйКодПоказателя = "Р2С180" Тогда
		Результат.Вставить("Имя", "П000010018001");
		Результат.Вставить("Представление", 
			НСтр("ru='Серия, номер паспорта'"));
		Результат.Вставить("ИзменяемаяРазмерность", Ложь);
		
	ИначеЕсли УсловныйКодПоказателя = "Р2С190" Тогда
		Результат.Вставить("Имя", "П000010019001");
		Результат.Вставить("Представление", 
			НСтр("ru='Дата выдачи паспорта'"));
		Результат.Вставить("ИзменяемаяРазмерность", Ложь);
		
	ИначеЕсли УсловныйКодПоказателя = "ДатаРасчета" Тогда
		Результат.Вставить("Имя", "ДатаСоставленияРасчета");
		Результат.Вставить("Представление", 
			НСтр("ru='Дата составления расчета'"));
		Результат.Вставить("ИзменяемаяРазмерность", Ложь);
		
	Иначе
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр(
		"ru='Не найден показатель соответствующий условному коду: """ + УсловныйКодПоказателя + """'");
		Сообщение.Сообщить();
		
		Возврат Результат;
		
	КонецЕсли;
	
	Результат.Вставить("ПредставлениеСформировано", Ложь);
	
	Возврат Результат
	
КонецФункции

&НаСервере
Функция ОбработатьНастройки(Знач Настройки = Неопределено, 
	Знач ИзменяемыеСвойства 	= Неопределено, 
	Знач СтруктураРезультата 	= Неопределено)
	
	Если Настройки = Неопределено Тогда
		
		Настройки = Новый Структура;
		Настройки.Вставить("ТекстФормулы"			, (НСтр("ru=''")));
		Настройки.Вставить("Нарушение"				, (НСтр("ru=''")));
		Настройки.Вставить("ОписаниеКС"				, (НСтр("ru=''")));
		Настройки.Вставить("ОписаниеОшибки"			, (НСтр("ru=''")));
		Настройки.Вставить("ОписаниеОшибок"			, Новый Массив);
		Настройки.Вставить("Расшифровка"			, (НСтр("ru=''")));
		Настройки.Вставить("ШаблонРасшифровки"		, (НСтр("ru=''")));
		Настройки.Вставить("ШаблонОписанияКС"		, (НСтр("ru=''")));
		Настройки.Вставить("ДопСведения"			, (НСтр("ru=''")));
		Настройки.Вставить("ШаблонДопСведений"		, (НСтр("ru=''")));
		Настройки.Вставить("ДопСведенияПараметры"	, Новый Структура);
		Настройки.Вставить("ЭтоОшибка"				, Ложь);
		Настройки.Вставить("СтруктураОшибок");
		Настройки.Вставить("КоличествоНайденныхОшибок");
		Настройки.Вставить("КоличествоНайденныхБезОшибок");
		Настройки.Вставить("ДопСведенияВОписаниеКС");
		Настройки.Вставить("ДопСведенияВЗаголовокРасшифровки");
		Настройки.Вставить("ДопСведенияВСтрокуРасшифровки");
	
	КонецЕсли;
	
	Если Не ИзменяемыеСвойства = Неопределено Тогда
		Для каждого ЭлементКоллекции Из ИзменяемыеСвойства Цикл
			Если Настройки.Свойство(ЭлементКоллекции.Ключ) Тогда
				Настройки.Вставить(ЭлементКоллекции.Ключ, ЭлементКоллекции.Значение);
			КонецЕсли; 
		КонецЦикла;
	КонецЕсли;
	
	Если Не СтруктураРезультата = Неопределено Тогда
		Для каждого ЭлементКоллекции Из СтруктураРезультата Цикл
			Если Настройки.Свойство(ЭлементКоллекции.Ключ) Тогда
				Настройки.Вставить(ЭлементКоллекции.Ключ, ЭлементКоллекции.Значение);
			КонецЕсли; 
		КонецЦикла;
	КонецЕсли;
	
	Возврат Настройки;
	
КонецФункции

&НаСервере
Функция ЗаполнитьПоказатели(Знач СтрокаПоказателей, Источник, НомерСтроки = 0)

	МассивНазваний			= СтрРазделить(СтрокаПоказателей, ", ", Ложь);
	СтруктураПоказателей	= Новый Структура;
	
	Для каждого ЭлементМассива Из МассивНазваний Цикл
		Показатель = ПоказательПоСтроке(ЭлементМассива);
		СтруктураПоказателей.Вставить(ЭлементМассива, Показатель);
	КонецЦикла;
	
	Для каждого ЭлементКоллекции Из СтруктураПоказателей Цикл
		Если ЗначениеЗаполнено(НомерСтроки) Тогда
			ВставитьЗначениеМногострочногоПоказателя(Источник, ЭлементКоллекции.Значение, НомерСтроки);
		Иначе
			ВставитьЗначениеПоказателя(Источник, ЭлементКоллекции.Значение);
		КонецЕсли;
	КонецЦикла;
	
	Возврат СтруктураПоказателей;
	
КонецФункции

&НаСервере
Процедура РасшифроватьПоказатели(Знач СтруктураПоказателей, 
	Знач Настройки,
	Знач НазваниеСтраницы,
	Знач НомерСтраницы,
	Знач ВключаяПоказатели	= Неопределено,
	Знач ИсключаяПоказатели	= Неопределено)
	
	Для каждого ЭлементКоллекции Из СтруктураПоказателей Цикл
		
		Если ПропуститьЭлемент(ЭлементКоллекции.Ключ, ВключаяПоказатели, ИсключаяПоказатели) Тогда
			Продолжить;
		КонецЕсли;
		
		ЭлементКоллекции.Значение.Представление = ПредставлениеПоказателя(ЭлементКоллекции.Значение, 
			Настройки.ДопСведенияВСтрокуРасшифровки, НомерСтраницы);
		ВнестиПоказательВРасшифровку(ЭлементКоллекции.Значение, НазваниеСтраницы, СтрокаЧГ0(НомерСтраницы));
	
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ОбработатьРезультат(Знач Настройки = Неопределено, Знач СтруктураРезультата = Неопределено,
	Создать = Неопределено);
	
	Если Создать = Истина Тогда
	
		СтруктураРезультата = Новый Структура;
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок"		, 0);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок"		, 0);
		СтруктураРезультата.Вставить("СтруктураОшибок", Новый Структура);
		СтруктураРезультата.Вставить("ДопСведенияВОписаниеКС"			, Истина);
		СтруктураРезультата.Вставить("ДопСведенияВЗаголовокРасшифровки"	, Ложь);
		СтруктураРезультата.Вставить("ДопСведенияВСтрокуРасшифровки"	, Истина);
	
	ИначеЕсли Создать = Неопределено Тогда
		
		ЗаполнитьЗначенияСвойств(СтруктураРезультата, Настройки,
			"КоличествоНайденныхОшибок, КоличествоНайденныхБезОшибок");
	
	ИначеЕсли Создать = Ложь Тогда
		
		СтруктураРезультата.Удалить("ДопСведенияВОписаниеКС");
		СтруктураРезультата.Удалить("ДопСведенияВЗаголовокРасшифровки");
		СтруктураРезультата.Удалить("ДопСведенияВСтрокуРасшифровки");
	
	КонецЕсли;
	
	Возврат СтруктураРезультата;
	
КонецФункции

&НаСервере
Функция ПропуститьЭлемент(НазваниеПоказателя, СтрокаВключая, СтрокаИсключая)
	
	Если СтрокаВключая = Неопределено И СтрокаИсключая = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли; 
	
	Обработать	= Не СтрокаВключая = Неопределено И Не СтрНайти(СтрокаВключая, НазваниеПоказателя) = 0
		Или Не СтрокаИсключая = Неопределено И СтрНайти(СтрокаИсключая, НазваниеПоказателя) = 0;
	Исключить	= Не СтрокаИсключая = Неопределено И Не СтрНайти(СтрокаИсключая, НазваниеПоказателя) = 0
		Или Не СтрокаВключая = Неопределено И СтрНайти(СтрокаВключая, НазваниеПоказателя) = 0;
	
	Если Исключить Тогда
		Возврат Истина;
	КонецЕсли; 
	
	Если Обработать Тогда
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ЗарегистрироватьФормулу(Знач Настройки);

	СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
	ОписаниеКС = СформироватьОписаниеКС(Настройки, "ДопСведенияВЗаголовокРасшифровки");
	РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(СписокРасшифровкиФормулы, 
		ОписаниеКС, , СчетчикФормулДляРасшифровок);
	
КонецПроцедуры

&НаСервере
Функция СформироватьОписаниеКС(Знач Настройки, ЗначениеСвойства)
	
	Если Настройки[ЗначениеСвойства] Тогда
		
		Если Не Настройки.ДопСведенияПараметры = Неопределено И
			Не Настройки.ДопСведенияПараметры.Количество() = 0 Тогда
			
			МассивПараметров = Новый Массив;
			Для каждого ЭлементКоллекции Из Настройки.ДопСведенияПараметры Цикл
				МассивПараметров.Добавить(ЭлементКоллекции.Значение);
			КонецЦикла;
			
			КоличествоПараметров = МассивПараметров.Количество();
			
			Если КоличествоПараметров = 1 Тогда
				Настройки.ДопСведения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					Настройки.ШаблонДопСведений, МассивПараметров[0]);
			ИначеЕсли КоличествоПараметров = 2 Тогда
				Настройки.ДопСведения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					Настройки.ШаблонДопСведений, МассивПараметров[0], МассивПараметров[1]);
			ИначеЕсли КоличествоПараметров = 3 Тогда
				Настройки.ДопСведения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					Настройки.ШаблонДопСведений, МассивПараметров[0], МассивПараметров[1], МассивПараметров[2]);
			ИначеЕсли КоличествоПараметров = 4 Тогда
				Настройки.ДопСведения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					Настройки.ШаблонДопСведений, МассивПараметров[0], МассивПараметров[1], МассивПараметров[2], 
					МассивПараметров[3]);
			ИначеЕсли КоличествоПараметров = 5 Тогда
				Настройки.ДопСведения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					Настройки.ШаблонДопСведений, МассивПараметров[0], МассивПараметров[1], МассивПараметров[2], 
					МассивПараметров[3], МассивПараметров[4]);
			Иначе
				Настройки.ДопСведения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					Настройки.ШаблонДопСведений, МассивПараметров[0], МассивПараметров[1], МассивПараметров[2], 
					МассивПараметров[3], МассивПараметров[4], МассивПараметров[5]);
			КонецЕсли;
				
			Возврат Настройки.ОписаниеКС + " (" + Настройки.ДопСведения + ")"; 
		КонецЕсли; 
	КонецЕсли;
	
	Возврат Настройки.ОписаниеКС;
	
КонецФункции

&НаСервере
Процедура ДобавитьЭлементВСтруктуруОшибок(Настройки)
	
	Если Настройки.ЭтоОшибка Тогда
		Настройки.КоличествоНайденныхОшибок = Настройки.КоличествоНайденныхОшибок + 1;
	Иначе
		Настройки.КоличествоНайденныхБезОшибок = Настройки.КоличествоНайденныхБезОшибок + 1;
	КонецЕсли;
	
	Счетчик		= Формат(Настройки.КоличествоНайденныхОшибок + Настройки.КоличествоНайденныхБезОшибок, "ЧГ=0");
	ОписаниеКС	= СформироватьОписаниеКС(Настройки, "ДопСведенияВОписаниеКС");
	ОписаниеКС	= ?(ПустаяСтрока(Настройки.ТекстФормулы), "", Настройки.ТекстФормулы + Символы.ПС) + ОписаниеКС;
	
	Настройки.СтруктураОшибок.Вставить("ТекстовоеПредставлениеФормулы" + Счетчик, ОписаниеКС);
	Настройки.СтруктураОшибок.Вставить("Расшифровка"	+ Счетчик, Настройки.Расшифровка);
	Настройки.СтруктураОшибок.Вставить("ЭтоОшибка"		+ Счетчик, Настройки.ЭтоОшибка);
	Настройки.СтруктураОшибок.Вставить("Нарушение"		+ Счетчик, Настройки.Нарушение);
	Настройки.СтруктураОшибок.Вставить("Описание"		+ Счетчик, Настройки.ОписаниеОшибки);
	Настройки.СтруктураОшибок.Вставить("Комментарий"	+ Счетчик, НСтр("ru=''"));
	
КонецПроцедуры

&НаСервере
Функция ПредставлениеПоказателя(Показатель, ПолноеПредставление, НомерСтраницы = Неопределено)
	
	Если Показатель.ПредставлениеСформировано Тогда
		Возврат Показатель.Представление;
	КонецЕсли; 
	
	ПодстрокаРаздела = мДанныеОтчета.СписокПоказателейПолный.Получить(Показатель.Имя);
	ПодстрокаСтроки = Сред(Показатель.Имя, 9, 3);
	ПодстрокаСтраницы = Нстр("ru=' Страница '") + НомерСтраницы;
	
	Если ПодстрокаРаздела = "Титульный лист" Тогда
		Представление = ПодстрокаРаздела;
	Иначе
		Представление = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Нстр("ru='Строка %1 %2%3'"), 
			ПодстрокаСтроки, ПодстрокаРаздела, ПодстрокаСтраницы);
	КонецЕсли;
	
	Представление = ?(ПолноеПредставление, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Нстр("ru='%1. %2'"), 
		Представление, Показатель.Представление), Представление);
	Показатель.ПредставлениеСформировано = Истина;
	
	Возврат Представление;
	
КонецФункции

&НаСервере
Процедура ВставитьЗначениеПоказателя(ИсточникДанных, Показатель)
	
	Если ИсточникДанных.Свойство(Показатель.Имя) Тогда
		ЗначениеПоказателя = ИсточникДанных[Показатель.Имя];
	Иначе
		ЗначениеПоказателя = 0;
	КонецЕсли;
	
	Если Показатель.Свойство("ИзменяемаяРазмерность") И Показатель.ИзменяемаяРазмерность = Истина Тогда
		ЗначениеПоказателя = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, ЗначениеПоказателя);
	КонецЕсли;
	
	Если Показатель.Свойство("Формат") И ЗначениеЗаполнено(Показатель.Формат) Тогда
		ПредставлениеЗначения = Формат(ЗначениеПоказателя, Показатель.Формат);
	ИначеЕсли ТипЗнч(ЗначениеПоказателя) = Тип("Строка") Тогда
		ПредставлениеЗначения = ЗначениеПоказателя;
	ИначеЕсли ТипЗнч(ЗначениеПоказателя) = Тип("Дата") Тогда
		ПредставлениеЗначения = Формат(ЗначениеПоказателя, "ДЛФ=D");
	ИначеЕсли ТипЗнч(ЗначениеПоказателя) = Тип("Число") Тогда
		ПредставлениеЗначения = Формат(ЗначениеПоказателя, "ЧРД=,; ЧН=");
	Иначе
		ПредставлениеЗначения = Строка(ЗначениеПоказателя);
	КонецЕсли;
	
	Показатель.Вставить("Значение", ЗначениеПоказателя);
	Показатель.Вставить("ЗначениеСтр", ПредставлениеЗначения);
	
КонецПроцедуры

&НаСервере
Процедура ВставитьЗначениеМногострочногоПоказателя(ИсточникДанных, Показатель, НомерСтроки)
	
	НомерСтрокиСтр = СтрокаЧГ0(НомерСтроки);
	ИмяПоказателя = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Показатель.Имя, НомерСтрокиСтр);
	
	Если ИсточникДанных.Свойство(ИмяПоказателя) Тогда
		ЗначениеПоказателя = ИсточникДанных[ИмяПоказателя];
	Иначе
		ЗначениеПоказателя = 0;
	КонецЕсли;
	
	Если Показатель.Свойство("ИзменяемаяРазмерность") И Показатель.ИзменяемаяРазмерность = Истина Тогда
		ЗначениеПоказателя = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, ЗначениеПоказателя);
	КонецЕсли;
	
	Если Показатель.Свойство("Формат") И ЗначениеЗаполнено(Показатель.Формат) Тогда
		ПредставлениеЗначения = Формат(ЗначениеПоказателя, Показатель.Формат);
	ИначеЕсли ТипЗнч(ЗначениеПоказателя) = Тип("Строка") Тогда
		ПредставлениеЗначения = ЗначениеПоказателя;
	ИначеЕсли ТипЗнч(ЗначениеПоказателя) = Тип("Дата") Тогда
		ПредставлениеЗначения = Формат(ЗначениеПоказателя, "ДЛФ=D");
	ИначеЕсли ТипЗнч(ЗначениеПоказателя) = Тип("Число") Тогда
		ПредставлениеЗначения = Формат(ЗначениеПоказателя, "ЧРД=,; ЧН=");
	Иначе
		ПредставлениеЗначения = Строка(ЗначениеПоказателя);
	КонецЕсли;
	
	Показатель.Вставить("Значение", ЗначениеПоказателя);
	Показатель.Вставить("ЗначениеСтр", ПредставлениеЗначения);
	Показатель.Вставить("НомерСтроки", НомерСтрокиСтр);
	
КонецПроцедуры

&НаСервере
Процедура ВнестиПоказательВРасшифровку(Показатель, 
	ИмяСтраницы, НомерСтраницы = Неопределено, ДокументРО = Неопределено)
	
	ПредставлениеПоказателя = Показатель.Представление;
	
	ЗначениеПоказателя = ?(ТипЗнч(Показатель.Значение) = Тип ("Дата"), Показатель.ЗначениеСтр, Показатель.Значение);
	
	Если Показатель.Свойство("НомерСтроки") Тогда
		ИмяПоказателя = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Показатель.Имя, Показатель.НомерСтроки);
	Иначе
		ИмяПоказателя = Показатель.Имя;
	КонецЕсли;
	
	НомСтраницы = НомерСтраницы;
	
	Если ИмяСтраницы = "Раздел1Прил1Подр1_1и1_2" Тогда
		НомСтраницы = НомерСтраницы + ",1";
	ИначеЕсли ИмяСтраницы = "Раздел1Прил1Подр1_3_1" Тогда
		НомСтраницы = НомерСтраницы + ",2";
	ИначеЕсли ИмяСтраницы = "Раздел1Прил1Подр1_3_2" Тогда
		НомСтраницы = НомерСтраницы + ",3";
	ИначеЕсли ИмяСтраницы = "Раздел1Прил1Подр1_4" Тогда
		НомСтраницы = НомерСтраницы + ",4";
	КонецЕсли;
	
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(
		СписокРасшифровкиПоказателей,
		ИмяПоказателя,
		ПредставлениеПоказателя,
		ЗначениеПоказателя,
		"",
		?(ДокументРО = Неопределено, СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, ДокументРО.Ссылка),
		ИмяСтраницы,
		Неопределено,
		НомСтраницы,
		СчетчикФормулДляРасшифровок);
	
КонецПроцедуры

&НаСервере
Функция СтрокаЧГ0(ИсходноеЧисло)
	
	Возврат Формат(ИсходноеЧисло, "ЧН=; ЧГ=0");
	
КонецФункции

&НаСервере
Функция Округлить(Показатель)
	
	Возврат РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, Показатель);
	
КонецФункции

&НаСервере
Функция РазделЗаполнен(ДанныеРаздела, ИмяРаздела = Неопределено)
	
	Результат			= Ложь;
	
	Для Каждого СтраницаРаздела Из ДанныеРаздела Цикл
		Для Каждого Показатель Из СтраницаРаздела.Данные Цикл
			Результат = ЗначениеЗаполнено(Показатель.Значение);
			
			Если ИмяРаздела = Неопределено Тогда
				Если Результат Тогда
					Возврат Результат;
				КонецЕсли;
			ИначеЕсли мДанныеОтчета.СписокПоказателейКраткий.Получить(Показатель.Ключ) = ИмяРаздела Тогда
				Если Результат Тогда
					Возврат Результат;
				КонецЕсли;
			КонецЕсли;
			
			Результат = Ложь;
		КонецЦикла;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция СоответствиеПоказателейРазделам(УчитыватьИсключения = Ложь)
	
	Результат = Новый Соответствие;
	
	Если УчитыватьИсключения Тогда
	
		Результат.Вставить("П000010001001"		, "Раздел1");
		Результат.Вставить("П000010002001"		, "Раздел1");
	
	КонецЕсли;
	
	Результат.Вставить("П000010003001"			, "Раздел1");
	Результат.Вставить("П000010004001"			, "Раздел2");
	Результат.Вставить("П000010005001"			, "Раздел2");
	Результат.Вставить("П000010006001"			, "Раздел2");
	Результат.Вставить("П000010007001"			, "Раздел2");
	Результат.Вставить("П000010008001"			, "Раздел2");
	Результат.Вставить("П000010009001"			, "Раздел2");
	Результат.Вставить("П000010010001"			, "Раздел2");
	Результат.Вставить("П000010011001"			, "Раздел2");
	Результат.Вставить("П000010012001"			, "Раздел2");
	Результат.Вставить("П000010013001"			, "Раздел2");
	Результат.Вставить("П000010014001"			, "Раздел2");
	Результат.Вставить("П000010015001"			, "Раздел2");
	Результат.Вставить("П000010016001"			, "Раздел2");
	Результат.Вставить("П000010017001"			, "Раздел2");
	Результат.Вставить("П000010018001"			, "Раздел2");
	Результат.Вставить("П000010019001"			, "Раздел2");
	Результат.Вставить("ДатаСоставленияРасчета"	, "Титульный лист");
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция РазложитьКБК(Знач КБК)
	
	Если Не ТипЗнч(КБК) = Тип("Строка") И Не СтрДлина(КБК) = 20 Тогда
		Возврат КБК;
	КонецЕсли;
	
	МассивПробелов = Новый Массив;
	МассивПробелов.Добавить(3);
	МассивПробелов.Добавить(7);
	МассивПробелов.Добавить(9);
	МассивПробелов.Добавить(14);
	МассивПробелов.Добавить(16);
	МассивПробелов.Добавить(17);
	
	Для ОбратныйИндекс = 1 По 20 Цикл
		Если Не МассивПробелов.Найти(ОбратныйИндекс) = Неопределено Тогда
			КБК = Сред(КБК, 1, 20 - ОбратныйИндекс) + " " + Сред(КБК, 20 + 1 -ОбратныйИндекс);
		КонецЕсли; 
	КонецЦикла;
	
	Возврат КБК;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьТаблицуНСИ(ДатаОкончанияПериода)
	
	ТаблицаНастроек	= Новый ТаблицаЗначений;
	ТаблицаНастроек.Колонки.Добавить("Ставка"	, Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(4, 2)));
	
	ПрефиксВерсии	= ПолучитьВерсиюНастроекКС(ДатаОкончанияПериода);
	
	МакетНастроекКС	= ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет("НастройкиКС2016Кв4");
	ОбластьНовые	= МакетНастроекКС.Области.Найти(ПрефиксВерсии + "_ТСНовые");
	ОбластьСвыше3	= МакетНастроекКС.Области.Найти(ПрефиксВерсии + "_ТССвыше3");
	
	Если ОбластьНовые = Неопределено ИЛИ ОбластьСвыше3 = Неопределено Тогда
		мДанныеОтчета.ДанныеКС.Вставить("СтавкиТСНовые"	, ТаблицаНастроек);
		мДанныеОтчета.ДанныеКС.Вставить("СтавкиТССвыше3", ТаблицаНастроек);
		Возврат;
	КонецЕсли;
	
	Для НомерСтроки = ОбластьНовые.Верх По ОбластьНовые.Низ Цикл
		НовСтрока = ТаблицаНастроек.Добавить();
		НовСтрока.Ставка	= СокрЛП(МакетНастроекКС.Область(НомерСтроки, 1).Текст);
	КонецЦикла;
	
	ТаблицаНастроек.Свернуть("Ставка");
	ТаблицаНастроек.Сортировать("Ставка");
	мДанныеОтчета.ДанныеКС.Вставить("СтавкиТСНовые", ТаблицаНастроек);
	
	ТаблицаНастроек = ТаблицаНастроек.СкопироватьКолонки();
	
	Для НомерСтроки = ОбластьСвыше3.Верх По ОбластьСвыше3.Низ Цикл
		НовСтрока = ТаблицаНастроек.Добавить();
		НовСтрока.Ставка	= СокрЛП(МакетНастроекКС.Область(НомерСтроки, 1).Текст);
	КонецЦикла;
	
	ТаблицаНастроек.Свернуть("Ставка");
	ТаблицаНастроек.Сортировать("Ставка");
	мДанныеОтчета.ДанныеКС.Вставить("СтавкиТССвыше3", ТаблицаНастроек);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьВерсиюНастроекКС(ДатаОкончанияПериода)
	
	Если ДатаОкончанияПериода >= '20180401' Тогда
		Возврат НСтр("ru='Ставки_20180401'");
	ИначеЕсли ДатаОкончанияПериода >= '20160101' Тогда
		Возврат НСтр("ru='Ставки_20160101'");
	Иначе
		Возврат НСтр("ru='Ставки_00000000'");
	КонецЕсли; 
	
КонецФункции

#КонецОбласти

&НаКлиентеНаСервереБезКонтекста
Функция ИмяОтчета(ЭтаФормаИмя)
	Форма_Имя = СтрЗаменить(ЭтаФормаИмя, "Внешний", "");
	Возврат Сред(Лев(Форма_Имя, СтрНайти(Форма_Имя, ".Форма.") - 1), 7);
КонецФункции