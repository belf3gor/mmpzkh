&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;

	// Обход ошибки платформы Параметр сеанса отсутствует или удален
	ПолеТабличногоДокументаФормаОтчета.Очистить();
	
	СформироватьСтруктуруРеквизитовФормы();
	
	СтруктураРеквизитовФормы.СписокПечатаемыхЛистов = Новый СписокЗначений;
	
	// ОПИСАНИЕ ПАРМЕТРОВ ФОРМЫ
	//
	// Версия формы.
	СтруктураРеквизитовФормы.мВерсияФормы = "09/10/2013";
	// Код отчета, равен коду по ОКУД.
	СтруктураРеквизитовФормы.мКодОтчета = "0610069";
	
	// ОПИСАНИЕ ПАРАМЕТРОВ МНОГОСТРОЧНЫХ ГРУПП
	// Идентификаторы многострочных групп.
	СтруктураРеквизитовФормы.мИдГруппы1 = "П0000010001";
	СтруктураРеквизитовФормы.мИдГруппы2 = "П0000020001";
	СтруктураРеквизитовФормы.мИдГруппы3 = "П0000030001";
	СтруктураРеквизитовФормы.мИдГруппы4 = "П0000040001";
	
	КолИсхСтрокИдГруппы1 = 12;
	КолИсхСтрокИдГруппы2 = 12;
	КолИсхСтрокИдГруппы3 = 12;
	КолИсхСтрокИдГруппы4 = 12;
	
	КолКолонокИдГруппы1 = 8;
	КолКолонокИдГруппы2 = 11;
	КолКолонокИдГруппы3 = 10;
	КолКолонокИдГруппы4 = 11;
	
	// Структура многострочных разделов формы.
	мСтруктураМногострочныхРазделов = Новый Структура;
	мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы1, СтруктураРеквизитовФормы.мИдГруппы1);
	мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы2, СтруктураРеквизитовФормы.мИдГруппы2);
	мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы3, СтруктураРеквизитовФормы.мИдГруппы3);
	мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы4, СтруктураРеквизитовФормы.мИдГруппы4);
	// Структура исходных строк (минимального кол-ва) многострочных разделов формы.
	мСтруктураИсхКолвоСтрокРазделов = Новый Структура;
	мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы1, КолИсхСтрокИдГруппы1);
	мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы2, КолИсхСтрокИдГруппы2);
	мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы3, КолИсхСтрокИдГруппы3);
	мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы4, КолИсхСтрокИдГруппы4);
	// Структура колонок многострочных разделов формы.
	мСтруктураКолвоКолонокРазделов = Новый Структура;
	мСтруктураКолвоКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы1, КолКолонокИдГруппы1);
	мСтруктураКолвоКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы2, КолКолонокИдГруппы2);
	мСтруктураКолвоКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы3, КолКолонокИдГруппы3);
	мСтруктураКолвоКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы4, КолКолонокИдГруппы4);
	
	СтруктураРеквизитовФормы.мСоответствияМнгЧ = Новый Соответствие;
	СтруктураРеквизитовФормы.мСоответствияМнгЧ.Вставить(СтруктураРеквизитовФормы.мИдГруппы1, "МногострочнаяЧасть1");
	СтруктураРеквизитовФормы.мСоответствияМнгЧ.Вставить(СтруктураРеквизитовФормы.мИдГруппы2, "МногострочнаяЧасть2");
	СтруктураРеквизитовФормы.мСоответствияМнгЧ.Вставить(СтруктураРеквизитовФормы.мИдГруппы3, "МногострочнаяЧасть3");
	СтруктураРеквизитовФормы.мСоответствияМнгЧ.Вставить(СтруктураРеквизитовФормы.мИдГруппы4, "МногострочнаяЧасть4");
	
	СтруктураРеквизитовФормы.мПечатныеФормы = Новый СписокЗначений;
	
	ПолеТабличногоДокументаФормаОтчета.Вывести(Отчеты[Сред(Лев(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, ".Форма.") - 1), 7)].ПолучитьМакет("ФормаОтчета2013Кв1_ФормаОтчета"));
	
	СтруктураРеквизитовФормы.мВыбраннаяФорма          = Параметры.мВыбраннаяФорма;
	СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета  = Параметры.мДатаКонцаПериодаОтчета;
	СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета = Параметры.мДатаНачалаПериодаОтчета;
	СтруктураРеквизитовФормы.мПериодичность           = Параметры.мПериодичность;
	СтруктураРеквизитовФормы.мСкопированаФорма        = Параметры.мСкопированаФорма;
	СтруктураРеквизитовФормы.мСохраненныйДок          = Параметры.мСохраненныйДок;
	СтруктураРеквизитовФормы.Организация              = Параметры.Организация;
	
	ДатаПодписи = ТекущаяДатаСеанса();
	
	СтруктураРеквизитовФормы.СправочникиВидыКонтактнойИнформацииПочтовыйАдресОрганизации = Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресОрганизации;
	
	Инициализация(Параметры.БезОткрытияФормы);
	
КонецПроцедуры

&НаСервере
Процедура СформироватьСтруктуруРеквизитовФормы()
	
	СтруктураРеквизитовФормы = РегламентированнаяОтчетность.СформироватьСтруктуруОбязательныхРеквизитовСтатистическогоОтчета();
	СтруктураРеквизитовФормы.Вставить("мИдГруппы1");
	СтруктураРеквизитовФормы.Вставить("мИдГруппы2");
	СтруктураРеквизитовФормы.Вставить("мИдГруппы3");
	СтруктураРеквизитовФормы.Вставить("мИдГруппы4");
	
КонецПроцедуры

&НаСервере
Процедура Инициализация(БезОткрытияФормы = Ложь) Экспорт
	
	СформироватьСпискиВыбора();
	
	СтруктураРеквизитовФормы.мБезОткрытияФормы = БезОткрытияФормы;
	
	СтруктураРеквизитовФормы.мАвтоВыборКодов = Ложь;
	
	СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация = Ложь;
	
	ТекТабличноеПоле = ПолеТабличногоДокументаФормаОтчета;
	
	СтруктураРеквизитовФормы.ВидДокумента = 0;
	НомерКорректировки = 1;
	СтруктураРеквизитовФормы.мАдресвФорматеДляВыгрузки = "";
	
	РегламентированнаяОтчетность.НачальныеОперацииСМногострочнымиБлоками(ЭтаФорма);
	
	Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
		
		Если СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено Тогда
			// Документ скопирован.
			ВосстановитьСохраненныеДанные();
		КонецЕсли;
		
		Модифицированность = Истина;
		
	Иначе
		
		// При открытии или при копировании сохраненного
		// отчета восстанавливаем сохраненные данные.
		ВосстановитьСохраненныеДанные();
		
		Если ЗначениеЗаполнено(СтруктураРеквизитовФормы.мСкопированаФорма) Тогда
			СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено;
		КонецЕсли;
		
		Если НЕ БезОткрытияФормы
           И НЕ СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
				   
        	ЗаблокироватьДанныеДляРедактирования(СтруктураРеквизитовФормы.мСохраненныйДок, , ЭтаФорма.УникальныйИдентификатор);

        КонецЕсли;
		
	КонецЕсли;
	
	Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
		НомерКорректировки = 0;
	Иначе
		НомерКорректировки = СтруктураРеквизитовФормы.мСохраненныйДок.Вид;
	КонецЕсли;
	
	ТекТабличноеПоле.Области.НомерКорректировки.Значение = НомерКорректировки;
	ПолеТабличногоДокументаФормаОтчета.Области.ДатаСоставленияОтчета.Значение = ДатаПодписи;
	ПоказатьПериод();
	
	Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Или СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация Тогда
		ЗаполнитьСведенияОбОрганизацииНаСервере();
	КонецЕсли;
	
	СтруктураРеквизитовФормы.НаимОрганизации = СтруктураРеквизитовФормы.Организация.Наименование;
	
	РегламентированнаяОтчетность.ДобавитьКнопкуПрисоединенныеФайлы(ЭтаФорма);
	
	РегламентированнаяОтчетностьКлиентСервер.ПриИнициализацииФормыРегламентированногоОтчета(ЭтаФорма, "ФСГС");
	ТекущийЭлемент = Элементы["ПолеТабличногоДокументаФормаОтчета"];
	
КонецПроцедуры

// Процедура управляет показом в форме периода построения отчета.
//
&НаСервере
Процедура ПоказатьПериод()
	
	ПолеТабличногоДокументаФормаОтчета.Области.ПериодОтчета.Значение = "за "
	+ НРег(Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ = 'гггг'")) + " г.";
	СтруктураРеквизитовФормы.СтрПериодОтчета = НРег(Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ = 'гггг'")) + " г.";
	
КонецПроцедуры

// Восстанавливает сохраненные данные отчета.
//
&НаСервере
Процедура ВосстановитьСохраненныеДанные()
	Перем ДанныеМногострочныхРазделов;
	Перем ДанныеВариановАвтоЗаполнения;
	Перем ПоказателиОтчета;
	Перем ВерсияФормы;
	
	// В случае, если формы была скопирована по F9, то проверим, не изменилась ли организация.
	Если СтруктураРеквизитовФормы.Организация <> СтруктураРеквизитовФормы.мСохраненныйДок.Организация
		И СтруктураРеквизитовФормы.Организация <> РегламентированнаяОтчетностьКлиентСервер.ПустоеЗначениеТипа("СправочникСсылка.Организации")
		И СтруктураРеквизитовФормы.Организация <> Неопределено Тогда
		// Меняем переменную, для того, чтобы запустилась процедура ЗаполнитьСведенияОбОрганизации.
		СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация = Истина;
	Иначе
		// Восстанавливаем реквизиты отчета.
		СтруктураРеквизитовФормы.Организация = СтруктураРеквизитовФормы.мСохраненныйДок.Организация;
	КонецЕсли;
	
	ДатаПодписи = СтруктураРеквизитовФормы.мСохраненныйДок.ДатаПодписи;
	СтруктураРеквизитовФормы.ЕдиницаИзмерения = СтруктураРеквизитовФормы.мСохраненныйДок.ЕдиницаИзмерения;
	СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = СтруктураРеквизитовФормы.мСохраненныйДок.ТочностьЕдиницыИзмерения;
	Комментарий = СтруктураРеквизитовФормы.мСохраненныйДок.Комментарий;
	
	// Восстанавливаем сохраненные данные отчета.
	СписокСохранения = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить();
	
	// Восстанавливаем сохраненные данные вариантов автозаполнения ячеек.
	Если СписокСохранения.Свойство("ДанныеВариантовАвтоЗаполнения", ДанныеВариановАвтоЗаполнения) Тогда
		
		Если НЕ ДанныеВариановАвтоЗаполнения = Неопределено Тогда
			
			мСтруктураВариантыЗаполнения.Очистить();
			
			Для Каждого ЭлементСтруктуры Из ДанныеВариановАвтоЗаполнения Цикл
				
				мСтруктураВариантыЗаполнения.Вставить(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Ключ);
				
				ЭтаФорма["ТаблицаВариантыЗаполнения" + ЭлементСтруктуры.Ключ].Очистить();
				
				Для Каждого ЭлементМассива Из ЭлементСтруктуры.Значение Цикл
					
					ТаблВарЗаполнения = ЭтаФорма["ТаблицаВариантыЗаполнения" + ЭлементСтруктуры.Ключ].Добавить().ТаблицаВариантовЗаполнения;
					
					ЗначениеВДанныеФормы(ЭлементМассива, ТаблВарЗаполнения);
					
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Восстанавливаем версию формы.
	СписокСохранения.Свойство("ВерсияФормы", ВерсияФормы);
	
	СписокСохранения.Свойство("ФлОтклВыборЗначений", СтруктураРеквизитовФормы.мАвтоВыборКодов);
	СтруктураРеквизитовФормы.мАвтоВыборКодов = ?(СтруктураРеквизитовФормы.мАвтоВыборКодов = Неопределено, Ложь, СтруктураРеквизитовФормы.мАвтоВыборКодов);
	
	// Восстанавливаем сохраненные данные многострочных разделов.
	Если СписокСохранения.Свойство("ДанныеМногострочныхРазделов", ДанныеМногострочныхРазделов) И ДанныеМногострочныхРазделов <> Неопределено Тогда
		
		Для Каждого ЭлементСтруктуры Из ДанныеМногострочныхРазделов Цикл
			
			НайденноеЗначение = Неопределено;
			
			мСтруктураМногострочныхРазделов.Свойство(ЭлементСтруктуры.Ключ, НайденноеЗначение);
			
			Если НЕ НайденноеЗначение = Неопределено Тогда
				
				ЗначениеВДанныеФормы(ЭлементСтруктуры.Значение, ЭтаФорма[НайденноеЗначение]);
				
				ВывестиРазделВТабличныйДокументНаСервере(НайденноеЗначение, ЭтаФорма[НайденноеЗначение]);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	// Восстановим сохраненные данные редактируемых ячеек.
	СписокСохранения.Свойство( "ПоказателиОтчета", ПоказателиОтчета );
	
	Для Каждого ПоказателиСтраницы Из ПоказателиОтчета Цикл
		ИмяТекТабличноеПоле = ПоказателиСтраницы.Ключ;
		ТекТабличноеПоле    = ЭтаФорма[ИмяТекТабличноеПоле];
		ПоказателиТаблПоле  = ПоказателиСтраницы.Значение;
		
		Для Каждого Показатель Из ПоказателиТаблПоле Цикл
			ИмяПоказателя       = Показатель.Ключ;
			ЗначениеПоказателя  = Показатель.Значение;
			
			// Установим значение в таблице.
			Попытка
				Если Лев(ИмяПоказателя, 2) = "ЧН" Тогда
					// Значение показателя с префиксом "ЧН" содержит формат представления нуля.
					ОбластьПоказателя = ТекТабличноеПоле.Области[Сред(ИмяПоказателя, 3)];
					ОбластьПоказателя.Формат = РегламентированнаяОтчетностьКлиентСервер.ЗаменитьПредставлениеНуляВСтрокеФормата(ОбластьПоказателя.Формат, ЗначениеПоказателя);
					Продолжить;
				КонецЕсли;
				ТекТабличноеПоле.Области[ИмяПоказателя].Значение = ЗначениеПоказателя;
			Исключение
			КонецПопытки;
		КонецЦикла;
	КонецЦикла;
	
	СтруктураРеквизитовФормы.мАдресвФорматеДляВыгрузки = ПолеТабличногоДокументаФормаОтчета.Области.ОргАдрес.Значение;
	ПолеТабличногоДокументаФормаОтчета.Области.ОргАдрес.Значение = РегламентированнаяОтчетностьКлиентСервер.ПредставлениеАдресаВФормате9Запятых(СтруктураРеквизитовФормы.мАдресвФорматеДляВыгрузки);
	
	РегламентированнаяОтчетность.ОперацииПриВосстановленииРегламентированногоОтчета(ЭтаФорма);
	
	Модифицированность = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСведенияОбОрганизацииНаСервере(ВПрограммеИзмененаДатаПодписи = Ложь)
	
	РегламентированнаяОтчетностьКлиентСервер.ЗаполнитьСведенияОбОрганизацииДляОтчетаСтатистики(ЭтаФорма, ВПрограммеИзмененаДатаПодписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСведенияОбОрганизацииНаКлиенте(ВПрограммеИзмененаДатаПодписи = Ложь)
	
	РегламентированнаяОтчетностьКлиентСервер.ЗаполнитьСведенияОбОрганизацииДляОтчетаСтатистики(ЭтаФорма, ВПрограммеИзмененаДатаПодписи);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьОтчет(Команда)
	
	СохранитьНаКлиенте();
	
КонецПроцедуры

// СохранитьНаКлиенте()
&НаКлиенте
Процедура СохранитьНаКлиенте(Автосохранение = Ложь, ВыполняемоеОповещение = Неопределено) Экспорт
	
	Вариант = СтруктураРеквизитовФормы.ВидДокумента * НомерКорректировки;
	
	Если НЕ РегламентированнаяОтчетностьКлиент.ПриЗаписиРегламентированногоОтчетаНаКлиенте(ЭтаФорма, , Автосохранение, Вариант) Тогда
		Возврат;
	КонецЕсли;
	
	ПодобныйОтчетСуществует = Ложь;
	ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки = Ложь;
	
	// формируем данные редактируемых ячеек таблицы
	ПоказателиОтчета = Новый Структура();
	
	#Если ВебКлиент Тогда
		ЗаполнитьПоказателиОтчетаНаСервере(ПоказателиОтчета);
	#Иначе
		ЗаполнитьПоказателиОтчетаНаКлиенте(ПоказателиОтчета);
	#КонецЕсли
	
	РезультатСохранения = ПередСохранением(, ПодобныйОтчетСуществует, Вариант, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, Автосохранение, ПоказателиОтчета);
	
	ВидДокументаНомерКорректировкиИзменен = Неопределено;
	
	Если ПодобныйОтчетСуществует И Автосохранение Тогда
		Возврат;
	КонецЕсли;
	
	НуженВопросПередСохранением = (ПодобныйОтчетСуществует ИЛИ ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки);
	
	Если НуженВопросПередСохранением Тогда
		СохранитьНаКлиентеСВопросом(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, ПодобныйОтчетСуществует, ПоказателиОтчета);
	Иначе		
		ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения);		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНаКлиентеСВопросом(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, ПодобныйОтчетСуществует, ПоказателиОтчета)
	
	Если ПодобныйОтчетСуществует Тогда
		
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(КодВозвратаДиалога.Да, "Сохранить");
		Кнопки.Добавить(КодВозвратаДиалога.Нет, "Отмена");
		
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Отчет с видом %1 уже существует.
		|Сохранить отчет с таким же видом?'"), ?(Вариант = 0, """Первичный""", """Корректирующий/" + Вариант + """"));
		ДополнительныеПараметры = Новый Структура("Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, ПоказателиОтчета", Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, ПоказателиОтчета);
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросСохранитьОтчетСТакимЖеВидомЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, Кнопки, , Кнопки.Получить(1).Значение);
		
	Иначе
		
		СохранитьНаКлиентеСВопросомПродолжение(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, ПоказателиОтчета);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросСохранитьОтчетСТакимЖеВидомЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	Автосохранение = ДополнительныеПараметры.Автосохранение;
	Вариант = ДополнительныеПараметры.Вариант;
	ВыполняемоеОповещение = ДополнительныеПараметры.ВыполняемоеОповещение;
	ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки = ДополнительныеПараметры.ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки;
	ПоказателиОтчета = ДополнительныеПараметры.ПоказателиОтчета;
	
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		
		Возврат;
		
	КонецЕсли;
	
	СохранитьНаКлиентеСВопросомПродолжение(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, ПоказателиОтчета);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНаКлиентеСВопросомПродолжение(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, ПоказателиОтчета)
	
	Если ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки Тогда
		
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("ВидОтчета", Вариант);
		
		ФормаВопроса = РегламентированнаяОтчетностьКлиент.ПолучитьОбщуюФормуПоИмени("ВопросПриИзмененииВидаДокументаНомераКорректировки", ПараметрыФормы);
		
		ДополнительныеПараметры = Новый Структура("Автосохранение, Вариант, ВыполняемоеОповещение, ПоказателиОтчета", Автосохранение, Вариант, ВыполняемоеОповещение, ПоказателиОтчета);
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросПриИзмененииВидаДокументаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		
		ФормаВопроса.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
		ФормаВопроса.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		ФормаВопроса.Открыть();
		
	Иначе
		Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Сохраняется %1...'"), ЭтаФорма.Заголовок), , , БиблиотекаКартинок.Записать);
		РезультатСохранения = Сохранить(Автосохранение, , Вариант, Ложь, ПоказателиОтчета);
		ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПриИзмененииВидаДокументаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Автосохранение = ДополнительныеПараметры.Автосохранение;
	Вариант = ДополнительныеПараметры.Вариант;
	ВыполняемоеОповещение = ДополнительныеПараметры.ВыполняемоеОповещение;
	ПоказателиОтчета = ДополнительныеПараметры.ПоказателиОтчета;
	
	
	КодВозврата = Результат;
	
	Если КодВозврата = КодВозвратаДиалога.Да
		ИЛИ КодВозврата = КодВозвратаДиалога.Нет Тогда
		
		ВидДокументаНомерКорректировкиИзменен = ?(КодВозврата = КодВозвратаДиалога.Да, Истина, Ложь);
		
	Иначе
		
		Возврат;
		
	КонецЕсли;
	
	Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Сохраняется %1...'"), ЭтаФорма.Заголовок), , , БиблиотекаКартинок.Записать);
	РезультатСохранения = Сохранить(Автосохранение, , Вариант, ВидДокументаНомерКорректировкиИзменен, ПоказателиОтчета);
	ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения)
	
	КлючУникальности = СтруктураРеквизитовФормы.мСохраненныйДок;
	
	Если РезультатСохранения Тогда
		
		РегламентированнаяОтчетностьКлиент.ПослеЗаписиРегламентированногоОтчета(ЭтаФорма);
		
		Если ВыполняемоеОповещение <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ВыполняемоеОповещение);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры
// СохранитьНаКлиенте

&НаСервере
Функция ПередСохранением(КодИФНС = "не применимо", ПодобныйОтчетСуществует="", Вариант="", ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки="", Автосохранение="", ПоказателиОтчета="")
	
	Если РегламентированнаяОтчетность.БылиИзмененыКлючевыеРеквизитыОтчета(ЭтаФорма, КодИФНС)
		И РегламентированнаяОтчетность.СуществуетДокументСАналогичнымиРеквизитами(ЭтаФорма, КодИФНС) Тогда
		
		ПодобныйОтчетСуществует = Истина;
		
	КонецЕсли;
	
	СтруктураРеквизитовФормы.мЗаписываетсяНовыйДокумент = (СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено ИЛИ СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено);
	
	Если Вариант <> Неопределено И ((СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено) ИЛИ (СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено) ИЛИ (Вариант <> СтруктураРеквизитовФормы.мВариант)) Тогда
		
		Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено ИЛИ СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено Тогда
			
		ИначеЕсли Вариант <> СтруктураРеквизитовФормы.мВариант Тогда
			
			ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПодобныйОтчетСуществует
		ИЛИ ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Возврат Сохранить(Автосохранение, КодИФНС, Вариант, , ПоказателиОтчета);
	
КонецФункции

// Формирует структуру данных отчета и помещает в реквизит типа ХранилищеЗначения
// документа РегламентированныйОтчет.
// 
// При первом сохранении данных отчета создает новый документ этого вида.
// Структура данных отчета состоит из элементов:
//   - значения редактируемых реквизитов отчета;
//   - данные по многострочным разделам отчета;
//   - данные по  многостраничным разделам отчета;
//   - данные по вариантам заполнения реквизитов,
//     участвующих в автозаполнении.
//
&НаСервере
Функция Сохранить(Автосохранение = Ложь, КодИФНС = "не применимо", Вариант = Неопределено, ВидДокументаНомерКорректировкиИзменен = Неопределено, ПоказателиОтчета = Неопределено) Экспорт
	
	ДанныеДляРазблокирования = Неопределено;
	
	Если НЕ СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
		Если НЕ СтруктураРеквизитовФормы.мБезОткрытияФормы Тогда
			ДанныеДляРазблокирования = Новый Структура("Ключ,ИдФормы",
			СтруктураРеквизитовФормы.мСохраненныйДок, ЭтаФорма.УникальныйИдентификатор);
		КонецЕсли;
		СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.ПолучитьОбъект();
	КонецЕсли;
	
	Если НЕ РегламентированнаяОтчетность.ПриЗаписиРегламентированногоОтчетаНаСервере(ЭтаФорма, КодИФНС, Автосохранение, Вариант, ВидДокументаНомерКорректировкиИзменен, СтруктураРеквизитовФормы.мСохраненныйДок) Тогда
		СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
		Возврат Ложь;
	КонецЕсли;
	
	// Установим текущие значения реквизитов документа.
	СтруктураРеквизитовФормы.мСохраненныйДок.ИсточникОтчета           = Метаданные.Отчеты[Сред(Лев(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, ".Форма.") - 1), 7)].Имя;
	СтруктураРеквизитовФормы.мСохраненныйДок.НаименованиеОтчета       = Метаданные.Отчеты[Сред(Лев(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, ".Форма.") - 1), 7)].ОсновнаяФорма.Синоним;
	СтруктураРеквизитовФормы.мСохраненныйДок.ДатаНачала               = СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета;
	СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания            = СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета;
	СтруктураРеквизитовФормы.мСохраненныйДок.Периодичность            = СтруктураРеквизитовФормы.мПериодичность;
	СтруктураРеквизитовФормы.мСохраненныйДок.ВыбраннаяФорма           = СтруктураРеквизитовФормы.мВыбраннаяФорма;
	СтруктураРеквизитовФормы.мСохраненныйДок.Организация              = СтруктураРеквизитовФормы.Организация;
	СтруктураРеквизитовФормы.мСохраненныйДок.ДатаПодписи              = ДатаПодписи;
	СтруктураРеквизитовФормы.мСохраненныйДок.ЕдиницаИзмерения         = Неопределено;
	СтруктураРеквизитовФормы.мСохраненныйДок.ТочностьЕдиницыИзмерения = СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения;
	СтруктураРеквизитовФормы.мСохраненныйДок.ВидОтчетности            = Перечисления.ВидыОтчетности.РегламентированнаяОтчетность;
	СтруктураРеквизитовФормы.мСохраненныйДок.Вид                      = Вариант;
	СтруктураРеквизитовФормы.мСохраненныйДок.ПредставлениеВида        = РегламентированнаяОтчетность.ПредставлениеВидаДокумента(СтруктураРеквизитовФормы.мСохраненныйДок.Вид);
	СтруктураРеквизитовФормы.мСохраненныйДок.Комментарий              = Комментарий;
	
	СтруктураРеквизитовФормы.мВариант = Вариант;
	
	// Формируем список сохранения.
	СписокСохранения = Новый Структура();
	
	// Вставляем данные редактируемых ячеек таблицы.
	СписокСохранения.Вставить("ПоказателиОтчета", ПоказателиОтчета);
	
	// Вставляем данные многострочных разделов.
	ДанныеМногострочныхРазделов = Новый Структура;
	
	Для Каждого ЭлементСтруктуры Из мСтруктураМногострочныхРазделов Цикл
		
		ДанныеМногострочныхРазделов.Вставить(ЭлементСтруктуры.Ключ, ДанныеФормыВЗначение(ЭтаФорма[ЭлементСтруктуры.Значение], Тип("ТаблицаЗначений")));
		
	КонецЦикла;
	
	СписокСохранения.Вставить("ДанныеМногострочныхРазделов", ДанныеМногострочныхРазделов);
	
	// Вставляем данные вариантов автозаполнения ячеек.
	СписокСохранения.Вставить("ДанныеВариантовАвтоЗаполнения", Неопределено);
	
	// Вставляем версию формы.
	СписокСохранения.Вставить("ВерсияФормы", СтруктураРеквизитовФормы.мВерсияФормы);
	
	// Вставляем флажок отключения.
	СписокСохранения.Вставить("ФлОтклВыборЗначений", СтруктураРеквизитовФормы.мАвтоВыборКодов);
	
	ХранилищеДанных = Новый ХранилищеЗначения(СписокСохранения);
	СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета = ХранилищеДанных;
	
	// Записываем документ, хранящий данные отчета.
	Попытка
		СтруктураРеквизитовФормы.мСохраненныйДок.Записать();
		РегламентированнаяОтчетность.СохранитьСтатусОтправкиРеглОтчета(ЭтаФорма);
	Исключение
		
		Если НЕ Автосохранение Тогда
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"),
			РегламентированнаяОтчетностьКлиентСервер.СформироватьТекстСообщения(ОписаниеОшибки()));
			Сообщение.Сообщить();
			
		КонецЕсли;
		
		СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
		
		Возврат Ложь;
		
	КонецПопытки;
	
	Модифицированность = Ложь;
	
	СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
	
	Если НЕ СтруктураРеквизитовФормы.мБезОткрытияФормы
       И НЕ СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
				   
    	ЗаблокироватьДанныеДляРедактирования(СтруктураРеквизитовФормы.мСохраненныйДок, , ЭтаФорма.УникальныйИдентификатор);

    КонецЕсли;
	
	Если ДанныеДляРазблокирования <> Неопределено Тогда
		РазблокироватьДанныеДляРедактирования(ДанныеДляРазблокирования.Ключ, ДанныеДляРазблокирования.ИдФормы);
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Функция СобратьДанныеТекущегоТаблПоляНаКлиенте(ИмяТабличногоПоля) Экспорт
	
	Возврат РегламентированнаяОтчетностьКлиентСервер.СобратьДанныеТекущегоТаблПоля(ЭтаФорма, ИмяТабличногоПоля);
	
КонецФункции

&НаСервере
Функция СобратьДанныеТекущегоТаблПоляНаСервере(ИмяТабличногоПоля) Экспорт
	
	Возврат РегламентированнаяОтчетностьКлиентСервер.СобратьДанныеТекущегоТаблПоля(ЭтаФорма, ИмяТабличногоПоля);
	
КонецФункции

&НаСервере
Процедура ЗаполнитьПоказателиОтчетаНаСервере(ПоказателиОтчета)
	
	РегламентированнаяОтчетностьКлиентСервер.ЗаполнитьПоказателиОтчета(ЭтаФорма, ПоказателиОтчета);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоказателиОтчетаНаКлиенте(ПоказателиОтчета)
	
	РегламентированнаяОтчетностьКлиентСервер.ЗаполнитьПоказателиОтчета(ЭтаФорма, ПоказателиОтчета);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСтроку(Команда)
	
	#Если ВебКлиент Тогда
		
		ДобавитьСтрокуНаСервере("ФормаОтчета");
		
	#Иначе
		
		ДобавитьСтрокуНаКлиенте("ФормаОтчета");
		
	#КонецЕсли
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьСтрокуНаСервере(КолонкаРазделыОтчетаСокрНаим)
	
	ВставитьДополнительнуюСтроку(ЭтаФорма,КолонкаРазделыОтчетаСокрНаим);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСтрокуНаКлиенте(КолонкаРазделыОтчетаСокрНаим)
	
	ВставитьДополнительнуюСтроку(ЭтаФорма, КолонкаРазделыОтчетаСокрНаим);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ВставитьДополнительнуюСтроку(Форма, ТекущаяСтраница)
	
	Перем СтруктураГруппы;
	Перем СтруктураГруппыСинхронизируемой1,
	СтруктураГруппыСинхронизируемой2,
	СтруктураГруппыСинхронизируемой3;
	
	Перем МаксимальноеКоличествоСтрокГруппы;
	Перем МаксимальноеКоличествоСтрокГруппыСинхронизируемой1,
	МаксимальноеКоличествоСтрокГруппыСинхронизируемой2,
	МаксимальноеКоличествоСтрокГруппыСинхронизируемой3;
	
	// Сначала выполним проверку на активную страницу панели формы,
	// которая содержит многострочный раздел.
	
	#Если НаКлиенте Тогда
		ИмяГруппы = Форма.ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаКлиенте(ТекущаяСтраница);
	#Иначе
		ИмяГруппы = Форма.ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ТекущаяСтраница);
	#КонецЕсли
	
	Если ИмяГруппы = Неопределено Тогда
		
		Сообщение = Новый СообщениеПользователю;
		
		Сообщение.Текст = НСтр("ru='Не выбран многострочный раздел, в который необходимо добавить строку.'");
		
		Сообщение.Сообщить();
		
		Возврат;
		
	КонецЕсли;
	
	Если ИмяГруппы = "П0000010001" Тогда
		ИмяГруппыСинхронизируемой1 = "П0000020001";
		ИмяГруппыСинхронизируемой2 = "П0000030001";
		ИмяГруппыСинхронизируемой3 = "П0000040001";
	ИначеЕсли ИмяГруппы = "П0000020001" Тогда
		ИмяГруппыСинхронизируемой1 = "П0000010001";
		ИмяГруппыСинхронизируемой2 = "П0000030001";
		ИмяГруппыСинхронизируемой3 = "П0000040001";
	ИначеЕсли ИмяГруппы = "П0000030001" Тогда
		ИмяГруппыСинхронизируемой1 = "П0000010001";
		ИмяГруппыСинхронизируемой2 = "П0000020001";
		ИмяГруппыСинхронизируемой3 = "П0000040001";
	ИначеЕсли ИмяГруппы = "П0000040001" Тогда
		ИмяГруппыСинхронизируемой1 = "П0000010001";
		ИмяГруппыСинхронизируемой2 = "П0000020001";
		ИмяГруппыСинхронизируемой3 = "П0000030001";
	КонецЕсли;
	
	// Исходное количество строк группы.
	Форма.мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, МаксимальноеКоличествоСтрокГруппы);
	
	ТекТабличноеПолеИмя = "ПолеТабличногоДокументаФормаОтчета";
	ТекТабличноеПоле = Форма[ТекТабличноеПолеИмя];
	
	Форма.мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);
	СтруктураГруппы = Форма[СтруктураГруппы];
	
	// Определяем последнюю строку многострочной группы.
	КолСтрок = СтруктураГруппы.Количество();
	КолСтрокСтр = Формат(КолСтрок, "ЧГ=0");
	КолСтрокСтр1 = Формат(КолСтрок + 1, "ЧГ=0");
	ИмяПервойЯчейкиПоследнейСтроки = ИмяГруппы + "91_" + КолСтрокСтр;
	
	// Область первой ячейки последней строки многострочного раздела.
	ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяПервойЯчейкиПоследнейСтроки];
	
	// Номера строк исходной области.
	НомерВерхЯчейкиОбласти = ОбластьЯчейки.Верх;
	НомерНижнЯчейкиОбласти = ОбластьЯчейки.Низ;
	СдвигСтрок = НомерНижнЯчейкиОбласти - НомерВерхЯчейкиОбласти + 1;
	
	// Номера строк вставляемой области.
	НомерВерхЯчейкиНовойОбласти = НомерВерхЯчейкиОбласти + СдвигСтрок;
	НомерНижнЯчейкиНовойОбласти = НомерНижнЯчейкиОбласти + СдвигСтрок;
	
	РегламентированнаяОтчетностьВызовСервера.СпециальногоДобавленияСтроки(ТекТабличноеПоле, ТекТабличноеПолеИмя, ИмяГруппы, НомерВерхЯчейкиОбласти, НомерНижнЯчейкиОбласти);
	
	Форма[ТекТабличноеПолеИмя] = ТекТабличноеПоле;
	
	Для НомерГрафы = 91 По 94 Цикл
		
		ИмяКолонки = ИмяГруппы + Формат(НомерГрафы, "ЧЦ=2; ЧВН=");
		
		// Переопределяем имена вставленной области.
		Если СтруктураГруппы[0].Свойство(ИмяКолонки) Тогда
			
			ИмяОбластиЯчейки    = ИмяКолонки + "_" + КолСтрокСтр;
			ИмяНовОбластиЯчейки = ИмяКолонки + "_" + КолСтрокСтр1;
			
			ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяОбластиЯчейки];
			ОбластьЯчейки.Имя = ИмяНовОбластиЯчейки;
			
			// Определяем границы ячейки исходной области.
			НомерВерхСтрокиЯчейки  = ОбластьЯчейки.Верх - СдвигСтрок;
			НомерНижнСтрокиЯчейки  = ОбластьЯчейки.Низ  - СдвигСтрок;
			
			НомерЛевоКолонкиЯчейки = ОбластьЯчейки.Лево;
			НомерПравКолонкиЯчейки = ОбластьЯчейки.Право;
			
			// Назначаем имя ячейки исходной области,
			// (т.к. в результате вставки новой области оно было очищено).
			ОбластьЯчейкиИсходнойОбласти = ТекТабличноеПоле.Область(НомерВерхСтрокиЯчейки, НомерЛевоКолонкиЯчейки, НомерНижнСтрокиЯчейки, НомерПравКолонкиЯчейки);
			ОбластьЯчейкиИсходнойОбласти.Имя = ИмяОбластиЯчейки;
			
			// Назначаем имена областей для удаления строк
			Если НомерГрафы = 91 Тогда
				НовОбластьЯчейкиУдалитьСтроку = ТекТабличноеПоле.Область(ОбластьЯчейки.Верх, 1, ОбластьЯчейки.Верх, 1);
				НовОбластьЯчейкиУдалитьСтроку.Имя = "УдалитьСтроку" + ИмяНовОбластиЯчейки;
				ИсхОбластьЯчейкиУдалитьСтроку = ТекТабличноеПоле.Область(ОбластьЯчейкиИсходнойОбласти.Верх, 1, ОбластьЯчейкиИсходнойОбласти.Верх, 1);
				ИсхОбластьЯчейкиУдалитьСтроку.Имя = "УдалитьСтроку" + ИмяОбластиЯчейки;
			КонецЕсли;
			
			// Очищаем значения ячеек вставленной области.
			Если ОбластьЯчейки.СодержитЗначение = Истина Тогда
				ОбластьЯчейки.Очистить();
			Иначе
				// Порядековый номер последней строки перед вставкой.
				ИсходныйНомер        = Число("0" + ОбластьЯчейки.Текст);
				НовыйПорядковыйНомер = ИсходныйНомер + 1;
				
				ОбластьЯчейки.Текст  = ? (НЕ НовыйПорядковыйНомер > МаксимальноеКоличествоСтрокГруппы, Строка(НовыйПорядковыйНомер), "");
				
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Для НомерГрафы = 1 По 30 Цикл
		
		ИмяКолонки = ИмяГруппы + Формат(НомерГрафы, "ЧЦ=2; ЧВН=");
		
		// Переопределяем имена вставленной области.
		Если СтруктураГруппы[0].Свойство(ИмяКолонки) Тогда
			
			ИмяОбластиЯчейки    = ИмяКолонки + "_" + КолСтрокСтр;
			ИмяНовОбластиЯчейки = ИмяКолонки + "_" + КолСтрокСтр1;
			
			ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяОбластиЯчейки];
			ОбластьЯчейки.Имя = ИмяНовОбластиЯчейки;
			
			// Определяем границы ячейки исходной области.
			НомерВерхСтрокиЯчейки  = ОбластьЯчейки.Верх - СдвигСтрок;
			НомерНижнСтрокиЯчейки  = ОбластьЯчейки.Низ  - СдвигСтрок;
			
			НомерЛевоКолонкиЯчейки = ОбластьЯчейки.Лево;
			НомерПравКолонкиЯчейки = ОбластьЯчейки.Право;
			
			// Назначаем имя ячейки исходной области,
			// (т.к. в результате вставки новой области оно было очищено).
			ОбластьЯчейкиИсходнойОбласти = ТекТабличноеПоле.Область(НомерВерхСтрокиЯчейки, НомерЛевоКолонкиЯчейки, НомерНижнСтрокиЯчейки, НомерПравКолонкиЯчейки);
			ОбластьЯчейкиИсходнойОбласти.Имя = ИмяОбластиЯчейки;
			
			// Очищаем значения ячеек вставленной области.
			Если ОбластьЯчейки.СодержитЗначение = Истина Тогда
				ОбластьЯчейки.Очистить();
			Иначе
				// Порядековый номер последней строки перед вставкой.
				ИсходныйНомер        = Число("0" + ОбластьЯчейки.Текст);
				НовыйПорядковыйНомер = ИсходныйНомер + 1;
				
				ОбластьЯчейки.Текст  = ? (НЕ НовыйПорядковыйНомер > МаксимальноеКоличествоСтрокГруппы, Строка(НовыйПорядковыйНомер), "");
				
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	// Назначим текущей областью таблицы первую редактируемую ячейку добавленной строки.
	// Определяем текущую область таблицы.
	ИмяТекущейОбласти = ИмяГруппы + "91_" + КолСтрокСтр1;
	
	Форма.Элементы[ТекТабличноеПолеИмя].ТекущаяОбласть = ТекТабличноеПоле.Области[ИмяТекущейОбласти];
	
	// Установим фокус на поле табличн. документа.
	Форма.ТекущийЭлемент = Форма.Элементы[ТекТабличноеПолеИмя];
	
	// Добавляем в структуру многострочной группы новую строку.
	СтруктураГруппы.Добавить();
	
	// СИНХРОНИЗАЦИЯ I.
	
	Форма.мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппыСинхронизируемой1, МаксимальноеКоличествоСтрокГруппыСинхронизируемой1);
	
	ТекТабличноеПолеИмяСинхронизируемое = "ПолеТабличногоДокументаФормаОтчета";
	ТекТабличноеПолеСинхронизируемое = Форма[ТекТабличноеПолеИмяСинхронизируемое];
	
	Форма.мСтруктураМногострочныхРазделов.Свойство(ИмяГруппыСинхронизируемой1, СтруктураГруппыСинхронизируемой1);
	СтруктураГруппыСинхронизируемой1 = Форма[СтруктураГруппыСинхронизируемой1];
	
	КолСтрокСинхронизируемых = СтруктураГруппыСинхронизируемой1.Количество();
	КолСтрокСтрСинхронизируемых = Формат(КолСтрокСинхронизируемых, "ЧГ=0");
	КолСтрокСтр1Синхронизируемых = Формат(КолСтрокСинхронизируемых + 1, "ЧГ=0");
	ИмяПервойЯчейкиПоследнейСтрокиСинхронизируемой = ИмяГруппыСинхронизируемой1 + "91_" + КолСтрокСтрСинхронизируемых;
	
	ОбластьЯчейкиСинхронизируемой = ТекТабличноеПолеСинхронизируемое.Области[ИмяПервойЯчейкиПоследнейСтрокиСинхронизируемой];
	
	НомерВерхЯчейкиОбластиСинхронизируемой = ОбластьЯчейкиСинхронизируемой.Верх;
	НомерНижнЯчейкиОбластиСинхронизируемой = ОбластьЯчейкиСинхронизируемой.Низ;
	СдвигСтрокСинхронизируемых = НомерНижнЯчейкиОбластиСинхронизируемой - НомерВерхЯчейкиОбластиСинхронизируемой + 1;
	
	НомерВерхЯчейкиНовойОбластиСинхронизируемой = НомерВерхЯчейкиОбластиСинхронизируемой + СдвигСтрокСинхронизируемых;
	НомерНижнЯчейкиНовойОбластиСинхронизируемой = НомерНижнЯчейкиОбластиСинхронизируемой + СдвигСтрокСинхронизируемых;
	
	РегламентированнаяОтчетностьВызовСервера.СпециальногоДобавленияСтроки(ТекТабличноеПолеСинхронизируемое, ТекТабличноеПолеИмяСинхронизируемое, ИмяГруппыСинхронизируемой1, НомерВерхЯчейкиОбластиСинхронизируемой, НомерНижнЯчейкиОбластиСинхронизируемой);
	
	Форма[ТекТабличноеПолеИмяСинхронизируемое] = ТекТабличноеПолеСинхронизируемое;
	
	Для НомерГрафыСинхронизируемой = 91 По 94 Цикл
		
		ИмяКолонкиСинхронизируемой = ИмяГруппыСинхронизируемой1 + Формат(НомерГрафыСинхронизируемой, "ЧЦ=2; ЧВН=");
		
		// Переопределяем имена вставленной области.
		Если СтруктураГруппыСинхронизируемой1[0].Свойство(ИмяКолонкиСинхронизируемой) Тогда
			
			ИмяОбластиЯчейкиСинхронизируемой    = ИмяКолонкиСинхронизируемой + "_" + КолСтрокСтрСинхронизируемых;
			ИмяНовОбластиЯчейкиСинхронизируемой = ИмяКолонкиСинхронизируемой + "_" + КолСтрокСтр1Синхронизируемых;
			
			ОбластьЯчейкиСинхронизируемой = ТекТабличноеПолеСинхронизируемое.Области[ИмяОбластиЯчейкиСинхронизируемой];
			ОбластьЯчейкиСинхронизируемой.Имя = ИмяНовОбластиЯчейкиСинхронизируемой;
			
			// Определяем границы ячейки исходной области.
			НомерВерхСтрокиЯчейкиСинхронизируемой  = ОбластьЯчейкиСинхронизируемой.Верх - СдвигСтрокСинхронизируемых;
			НомерНижнСтрокиЯчейкиСинхронизируемой  = ОбластьЯчейкиСинхронизируемой.Низ  - СдвигСтрокСинхронизируемых;
			
			НомерЛевоКолонкиЯчейкиСинхронизируемой = ОбластьЯчейкиСинхронизируемой.Лево;
			НомерПравКолонкиЯчейкиСинхронизируемой = ОбластьЯчейкиСинхронизируемой.Право;
			
			// Назначаем имя ячейки исходной области,
			// (т.к. в результате вставки новой области оно было очищено).
			ОбластьЯчейкиИсходнойОбластиСинхронизируемой = ТекТабличноеПолеСинхронизируемое.Область(НомерВерхСтрокиЯчейкиСинхронизируемой, НомерЛевоКолонкиЯчейкиСинхронизируемой, НомерНижнСтрокиЯчейкиСинхронизируемой, НомерПравКолонкиЯчейкиСинхронизируемой);
			ОбластьЯчейкиИсходнойОбластиСинхронизируемой.Имя = ИмяОбластиЯчейкиСинхронизируемой;
			
			// Назначаем имена областей для удаления строк
			Если НомерГрафыСинхронизируемой = 91 Тогда
				НовОбластьЯчейкиУдалитьСтроку = ТекТабличноеПолеСинхронизируемое.Область(ОбластьЯчейкиСинхронизируемой.Верх, 1, ОбластьЯчейкиСинхронизируемой.Верх, 1);
				НовОбластьЯчейкиУдалитьСтроку.Имя = "УдалитьСтроку" + ИмяНовОбластиЯчейкиСинхронизируемой;
				ИсхОбластьЯчейкиУдалитьСтроку = ТекТабличноеПолеСинхронизируемое.Область(ОбластьЯчейкиИсходнойОбластиСинхронизируемой.Верх, 1, ОбластьЯчейкиИсходнойОбластиСинхронизируемой.Верх, 1);
				ИсхОбластьЯчейкиУдалитьСтроку.Имя = "УдалитьСтроку" + ИмяОбластиЯчейкиСинхронизируемой;
			КонецЕсли;
			
			// Очищаем значения ячеек вставленной области.
			Если ОбластьЯчейкиСинхронизируемой.СодержитЗначение = Истина Тогда
				ОбластьЯчейкиСинхронизируемой.Очистить();
			Иначе
				// Порядековый номер последней строки перед вставкой.
				ИсходныйНомерСинхронизируемый        = Число("0" + ОбластьЯчейкиСинхронизируемой.Текст);
				НовыйПорядковыйНомерСинхронизируемый = ИсходныйНомерСинхронизируемый + 1;
				
				ОбластьЯчейкиСинхронизируемой.Текст  = ? (НЕ НовыйПорядковыйНомерСинхронизируемый > МаксимальноеКоличествоСтрокГруппыСинхронизируемой1, Строка(НовыйПорядковыйНомерСинхронизируемый), "");
				
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Для НомерГрафыСинхронизируемой = 1 По 30 Цикл
		
		ИмяКолонкиСинхронизируемой = ИмяГруппыСинхронизируемой1 + Формат(НомерГрафыСинхронизируемой, "ЧЦ=2; ЧВН=");
		
		// Переопределяем имена вставленной области.
		Если СтруктураГруппыСинхронизируемой1[0].Свойство(ИмяКолонкиСинхронизируемой) Тогда
			
			ИмяОбластиЯчейкиСинхронизируемой    = ИмяКолонкиСинхронизируемой + "_" + КолСтрокСтрСинхронизируемых;
			ИмяНовОбластиЯчейкиСинхронизируемой = ИмяКолонкиСинхронизируемой + "_" + КолСтрокСтр1Синхронизируемых;
			
			ОбластьЯчейкиСинхронизируемой = ТекТабличноеПолеСинхронизируемое.Области[ИмяОбластиЯчейкиСинхронизируемой];
			ОбластьЯчейкиСинхронизируемой.Имя = ИмяНовОбластиЯчейкиСинхронизируемой;
			
			// Определяем границы ячейки исходной области.
			НомерВерхСтрокиЯчейкиСинхронизируемой  = ОбластьЯчейкиСинхронизируемой.Верх - СдвигСтрокСинхронизируемых;
			НомерНижнСтрокиЯчейкиСинхронизируемой  = ОбластьЯчейкиСинхронизируемой.Низ  - СдвигСтрокСинхронизируемых;
			
			НомерЛевоКолонкиЯчейкиСинхронизируемой = ОбластьЯчейкиСинхронизируемой.Лево;
			НомерПравКолонкиЯчейкиСинхронизируемой = ОбластьЯчейкиСинхронизируемой.Право;
			
			// Назначаем имя ячейки исходной области,
			// (т.к. в результате вставки новой области оно было очищено).
			ОбластьЯчейкиИсходнойОбластиСинхронизируемой = ТекТабличноеПолеСинхронизируемое.Область(НомерВерхСтрокиЯчейкиСинхронизируемой, НомерЛевоКолонкиЯчейкиСинхронизируемой, НомерНижнСтрокиЯчейкиСинхронизируемой, НомерПравКолонкиЯчейкиСинхронизируемой);
			ОбластьЯчейкиИсходнойОбластиСинхронизируемой.Имя = ИмяОбластиЯчейкиСинхронизируемой;
			
			// Очищаем значения ячеек вставленной области.
			Если ОбластьЯчейкиСинхронизируемой.СодержитЗначение = Истина Тогда
				ОбластьЯчейкиСинхронизируемой.Очистить();
			Иначе
				// Порядековый номер последней строки перед вставкой.
				ИсходныйНомерСинхронизируемый        = Число("0" + ОбластьЯчейкиСинхронизируемой.Текст);
				НовыйПорядковыйНомерСинхронизируемый = ИсходныйНомерСинхронизируемый + 1;
				
				ОбластьЯчейкиСинхронизируемой.Текст  = ? (НЕ НовыйПорядковыйНомерСинхронизируемый > МаксимальноеКоличествоСтрокГруппыСинхронизируемой1, Строка(НовыйПорядковыйНомерСинхронизируемый), "");
				
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	СтруктураГруппыСинхронизируемой1.Добавить();
	
	// СИНХРОНИЗАЦИЯ II.
	
	Форма.мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппыСинхронизируемой2, МаксимальноеКоличествоСтрокГруппыСинхронизируемой2);
	
	ТекТабличноеПолеИмяСинхронизируемое = "ПолеТабличногоДокументаФормаОтчета";
	ТекТабличноеПолеСинхронизируемое = Форма[ТекТабличноеПолеИмяСинхронизируемое];
	
	Форма.мСтруктураМногострочныхРазделов.Свойство(ИмяГруппыСинхронизируемой2, СтруктураГруппыСинхронизируемой2);
	СтруктураГруппыСинхронизируемой2 = Форма[СтруктураГруппыСинхронизируемой2];
	
	КолСтрокСинхронизируемых = СтруктураГруппыСинхронизируемой2.Количество();
	КолСтрокСтрСинхронизируемых = Формат(КолСтрокСинхронизируемых, "ЧГ=0");
	КолСтрокСтр1Синхронизируемых = Формат(КолСтрокСинхронизируемых + 1, "ЧГ=0");
	ИмяПервойЯчейкиПоследнейСтрокиСинхронизируемой = ИмяГруппыСинхронизируемой2 + "91_" + КолСтрокСтрСинхронизируемых;
	
	ОбластьЯчейкиСинхронизируемой = ТекТабличноеПолеСинхронизируемое.Области[ИмяПервойЯчейкиПоследнейСтрокиСинхронизируемой];
	
	НомерВерхЯчейкиОбластиСинхронизируемой = ОбластьЯчейкиСинхронизируемой.Верх;
	НомерНижнЯчейкиОбластиСинхронизируемой = ОбластьЯчейкиСинхронизируемой.Низ;
	СдвигСтрокСинхронизируемых = НомерНижнЯчейкиОбластиСинхронизируемой - НомерВерхЯчейкиОбластиСинхронизируемой + 1;
	
	НомерВерхЯчейкиНовойОбластиСинхронизируемой = НомерВерхЯчейкиОбластиСинхронизируемой + СдвигСтрокСинхронизируемых;
	НомерНижнЯчейкиНовойОбластиСинхронизируемой = НомерНижнЯчейкиОбластиСинхронизируемой + СдвигСтрокСинхронизируемых;
	
	РегламентированнаяОтчетностьВызовСервера.СпециальногоДобавленияСтроки(ТекТабличноеПолеСинхронизируемое, ТекТабличноеПолеИмяСинхронизируемое, ИмяГруппыСинхронизируемой2, НомерВерхЯчейкиОбластиСинхронизируемой, НомерНижнЯчейкиОбластиСинхронизируемой);
	
	Форма[ТекТабличноеПолеИмяСинхронизируемое] = ТекТабличноеПолеСинхронизируемое;
	
	Для НомерГрафыСинхронизируемой = 91 По 94 Цикл
		
		ИмяКолонкиСинхронизируемой = ИмяГруппыСинхронизируемой2 + Формат(НомерГрафыСинхронизируемой, "ЧЦ=2; ЧВН=");
		
		// Переопределяем имена вставленной области.
		Если СтруктураГруппыСинхронизируемой2[0].Свойство(ИмяКолонкиСинхронизируемой) Тогда
			
			ИмяОбластиЯчейкиСинхронизируемой    = ИмяКолонкиСинхронизируемой + "_" + КолСтрокСтрСинхронизируемых;
			ИмяНовОбластиЯчейкиСинхронизируемой = ИмяКолонкиСинхронизируемой + "_" + КолСтрокСтр1Синхронизируемых;
			
			ОбластьЯчейкиСинхронизируемой = ТекТабличноеПолеСинхронизируемое.Области[ИмяОбластиЯчейкиСинхронизируемой];
			ОбластьЯчейкиСинхронизируемой.Имя = ИмяНовОбластиЯчейкиСинхронизируемой;
			
			// Определяем границы ячейки исходной области.
			НомерВерхСтрокиЯчейкиСинхронизируемой  = ОбластьЯчейкиСинхронизируемой.Верх - СдвигСтрокСинхронизируемых;
			НомерНижнСтрокиЯчейкиСинхронизируемой  = ОбластьЯчейкиСинхронизируемой.Низ  - СдвигСтрокСинхронизируемых;
			
			НомерЛевоКолонкиЯчейкиСинхронизируемой = ОбластьЯчейкиСинхронизируемой.Лево;
			НомерПравКолонкиЯчейкиСинхронизируемой = ОбластьЯчейкиСинхронизируемой.Право;
			
			// Назначаем имя ячейки исходной области,
			// (т.к. в результате вставки новой области оно было очищено).
			ОбластьЯчейкиИсходнойОбластиСинхронизируемой = ТекТабличноеПолеСинхронизируемое.Область(НомерВерхСтрокиЯчейкиСинхронизируемой, НомерЛевоКолонкиЯчейкиСинхронизируемой, НомерНижнСтрокиЯчейкиСинхронизируемой, НомерПравКолонкиЯчейкиСинхронизируемой);
			ОбластьЯчейкиИсходнойОбластиСинхронизируемой.Имя = ИмяОбластиЯчейкиСинхронизируемой;
			
			// Назначаем имена областей для удаления строк
			Если НомерГрафыСинхронизируемой = 91 Тогда
				НовОбластьЯчейкиУдалитьСтроку = ТекТабличноеПолеСинхронизируемое.Область(ОбластьЯчейкиСинхронизируемой.Верх, 1, ОбластьЯчейкиСинхронизируемой.Верх, 1);
				НовОбластьЯчейкиУдалитьСтроку.Имя = "УдалитьСтроку" + ИмяНовОбластиЯчейкиСинхронизируемой;
				ИсхОбластьЯчейкиУдалитьСтроку = ТекТабличноеПолеСинхронизируемое.Область(ОбластьЯчейкиИсходнойОбластиСинхронизируемой.Верх, 1, ОбластьЯчейкиИсходнойОбластиСинхронизируемой.Верх, 1);
				ИсхОбластьЯчейкиУдалитьСтроку.Имя = "УдалитьСтроку" + ИмяОбластиЯчейкиСинхронизируемой;
			КонецЕсли;
			
			// Очищаем значения ячеек вставленной области.
			Если ОбластьЯчейкиСинхронизируемой.СодержитЗначение = Истина Тогда
				ОбластьЯчейкиСинхронизируемой.Очистить();
			Иначе
				// Порядековый номер последней строки перед вставкой.
				ИсходныйНомерСинхронизируемый        = Число("0" + ОбластьЯчейкиСинхронизируемой.Текст);
				НовыйПорядковыйНомерСинхронизируемый = ИсходныйНомерСинхронизируемый + 1;
				
				ОбластьЯчейкиСинхронизируемой.Текст  = ? (НЕ НовыйПорядковыйНомерСинхронизируемый > МаксимальноеКоличествоСтрокГруппыСинхронизируемой2, Строка(НовыйПорядковыйНомерСинхронизируемый), "");
				
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Для НомерГрафыСинхронизируемой = 1 По 30 Цикл
		
		ИмяКолонкиСинхронизируемой = ИмяГруппыСинхронизируемой2 + Формат(НомерГрафыСинхронизируемой, "ЧЦ=2; ЧВН=");
		
		// Переопределяем имена вставленной области.
		Если СтруктураГруппыСинхронизируемой2[0].Свойство(ИмяКолонкиСинхронизируемой) Тогда
			
			ИмяОбластиЯчейкиСинхронизируемой    = ИмяКолонкиСинхронизируемой + "_" + КолСтрокСтрСинхронизируемых;
			ИмяНовОбластиЯчейкиСинхронизируемой = ИмяКолонкиСинхронизируемой + "_" + КолСтрокСтр1Синхронизируемых;
			
			ОбластьЯчейкиСинхронизируемой = ТекТабличноеПолеСинхронизируемое.Области[ИмяОбластиЯчейкиСинхронизируемой];
			ОбластьЯчейкиСинхронизируемой.Имя = ИмяНовОбластиЯчейкиСинхронизируемой;
			
			// Определяем границы ячейки исходной области.
			НомерВерхСтрокиЯчейкиСинхронизируемой  = ОбластьЯчейкиСинхронизируемой.Верх - СдвигСтрокСинхронизируемых;
			НомерНижнСтрокиЯчейкиСинхронизируемой  = ОбластьЯчейкиСинхронизируемой.Низ  - СдвигСтрокСинхронизируемых;
			
			НомерЛевоКолонкиЯчейкиСинхронизируемой = ОбластьЯчейкиСинхронизируемой.Лево;
			НомерПравКолонкиЯчейкиСинхронизируемой = ОбластьЯчейкиСинхронизируемой.Право;
			
			// Назначаем имя ячейки исходной области,
			// (т.к. в результате вставки новой области оно было очищено).
			ОбластьЯчейкиИсходнойОбластиСинхронизируемой = ТекТабличноеПолеСинхронизируемое.Область(НомерВерхСтрокиЯчейкиСинхронизируемой, НомерЛевоКолонкиЯчейкиСинхронизируемой, НомерНижнСтрокиЯчейкиСинхронизируемой, НомерПравКолонкиЯчейкиСинхронизируемой);
			ОбластьЯчейкиИсходнойОбластиСинхронизируемой.Имя = ИмяОбластиЯчейкиСинхронизируемой;
			
			// Очищаем значения ячеек вставленной области.
			Если ОбластьЯчейкиСинхронизируемой.СодержитЗначение = Истина Тогда
				ОбластьЯчейкиСинхронизируемой.Очистить();
			Иначе
				// Порядековый номер последней строки перед вставкой.
				ИсходныйНомерСинхронизируемый        = Число("0" + ОбластьЯчейкиСинхронизируемой.Текст);
				НовыйПорядковыйНомерСинхронизируемый = ИсходныйНомерСинхронизируемый + 1;
				
				ОбластьЯчейкиСинхронизируемой.Текст  = ? (НЕ НовыйПорядковыйНомерСинхронизируемый > МаксимальноеКоличествоСтрокГруппыСинхронизируемой2, Строка(НовыйПорядковыйНомерСинхронизируемый), "");
				
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	СтруктураГруппыСинхронизируемой2.Добавить();
	
	// СИНХРОНИЗАЦИЯ III.
	
	Форма.мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппыСинхронизируемой3, МаксимальноеКоличествоСтрокГруппыСинхронизируемой3);
	
	ТекТабличноеПолеИмяСинхронизируемое = "ПолеТабличногоДокументаФормаОтчета";
	ТекТабличноеПолеСинхронизируемое = Форма[ТекТабличноеПолеИмяСинхронизируемое];
	
	Форма.мСтруктураМногострочныхРазделов.Свойство(ИмяГруппыСинхронизируемой3, СтруктураГруппыСинхронизируемой3);
	СтруктураГруппыСинхронизируемой3 = Форма[СтруктураГруппыСинхронизируемой3];
	
	КолСтрокСинхронизируемых = СтруктураГруппыСинхронизируемой3.Количество();
	КолСтрокСтрСинхронизируемых = Формат(КолСтрокСинхронизируемых, "ЧГ=0");
	КолСтрокСтр1Синхронизируемых = Формат(КолСтрокСинхронизируемых + 1, "ЧГ=0");
	ИмяПервойЯчейкиПоследнейСтрокиСинхронизируемой = ИмяГруппыСинхронизируемой3 + "91_" + КолСтрокСтрСинхронизируемых;
	
	ОбластьЯчейкиСинхронизируемой = ТекТабличноеПолеСинхронизируемое.Области[ИмяПервойЯчейкиПоследнейСтрокиСинхронизируемой];
	
	НомерВерхЯчейкиОбластиСинхронизируемой = ОбластьЯчейкиСинхронизируемой.Верх;
	НомерНижнЯчейкиОбластиСинхронизируемой = ОбластьЯчейкиСинхронизируемой.Низ;
	СдвигСтрокСинхронизируемых = НомерНижнЯчейкиОбластиСинхронизируемой - НомерВерхЯчейкиОбластиСинхронизируемой + 1;
	
	НомерВерхЯчейкиНовойОбластиСинхронизируемой = НомерВерхЯчейкиОбластиСинхронизируемой + СдвигСтрокСинхронизируемых;
	НомерНижнЯчейкиНовойОбластиСинхронизируемой = НомерНижнЯчейкиОбластиСинхронизируемой + СдвигСтрокСинхронизируемых;
	
	РегламентированнаяОтчетностьВызовСервера.СпециальногоДобавленияСтроки(ТекТабличноеПолеСинхронизируемое, ТекТабличноеПолеИмяСинхронизируемое, ИмяГруппыСинхронизируемой3, НомерВерхЯчейкиОбластиСинхронизируемой, НомерНижнЯчейкиОбластиСинхронизируемой);
	
	Форма[ТекТабличноеПолеИмяСинхронизируемое] = ТекТабличноеПолеСинхронизируемое;
	
	Для НомерГрафыСинхронизируемой = 91 По 94 Цикл
		
		ИмяКолонкиСинхронизируемой = ИмяГруппыСинхронизируемой3 + Формат(НомерГрафыСинхронизируемой, "ЧЦ=2; ЧВН=");
		
		// Переопределяем имена вставленной области.
		Если СтруктураГруппыСинхронизируемой3[0].Свойство(ИмяКолонкиСинхронизируемой) Тогда
			
			ИмяОбластиЯчейкиСинхронизируемой    = ИмяКолонкиСинхронизируемой + "_" + КолСтрокСтрСинхронизируемых;
			ИмяНовОбластиЯчейкиСинхронизируемой = ИмяКолонкиСинхронизируемой + "_" + КолСтрокСтр1Синхронизируемых;
			
			ОбластьЯчейкиСинхронизируемой = ТекТабличноеПолеСинхронизируемое.Области[ИмяОбластиЯчейкиСинхронизируемой];
			ОбластьЯчейкиСинхронизируемой.Имя = ИмяНовОбластиЯчейкиСинхронизируемой;
			
			// Определяем границы ячейки исходной области.
			НомерВерхСтрокиЯчейкиСинхронизируемой  = ОбластьЯчейкиСинхронизируемой.Верх - СдвигСтрокСинхронизируемых;
			НомерНижнСтрокиЯчейкиСинхронизируемой  = ОбластьЯчейкиСинхронизируемой.Низ  - СдвигСтрокСинхронизируемых;
			
			НомерЛевоКолонкиЯчейкиСинхронизируемой = ОбластьЯчейкиСинхронизируемой.Лево;
			НомерПравКолонкиЯчейкиСинхронизируемой = ОбластьЯчейкиСинхронизируемой.Право;
			
			// Назначаем имя ячейки исходной области,
			// (т.к. в результате вставки новой области оно было очищено).
			ОбластьЯчейкиИсходнойОбластиСинхронизируемой = ТекТабличноеПолеСинхронизируемое.Область(НомерВерхСтрокиЯчейкиСинхронизируемой, НомерЛевоКолонкиЯчейкиСинхронизируемой, НомерНижнСтрокиЯчейкиСинхронизируемой, НомерПравКолонкиЯчейкиСинхронизируемой);
			ОбластьЯчейкиИсходнойОбластиСинхронизируемой.Имя = ИмяОбластиЯчейкиСинхронизируемой;
			
			// Назначаем имена областей для удаления строк
			Если НомерГрафыСинхронизируемой = 91 Тогда
				НовОбластьЯчейкиУдалитьСтроку = ТекТабличноеПолеСинхронизируемое.Область(ОбластьЯчейкиСинхронизируемой.Верх, 1, ОбластьЯчейкиСинхронизируемой.Верх, 1);
				НовОбластьЯчейкиУдалитьСтроку.Имя = "УдалитьСтроку" + ИмяНовОбластиЯчейкиСинхронизируемой;
				ИсхОбластьЯчейкиУдалитьСтроку = ТекТабличноеПолеСинхронизируемое.Область(ОбластьЯчейкиИсходнойОбластиСинхронизируемой.Верх, 1, ОбластьЯчейкиИсходнойОбластиСинхронизируемой.Верх, 1);
				ИсхОбластьЯчейкиУдалитьСтроку.Имя = "УдалитьСтроку" + ИмяОбластиЯчейкиСинхронизируемой;
			КонецЕсли;
			
			// Очищаем значения ячеек вставленной области.
			Если ОбластьЯчейкиСинхронизируемой.СодержитЗначение = Истина Тогда
				ОбластьЯчейкиСинхронизируемой.Очистить();
			Иначе
				// Порядековый номер последней строки перед вставкой.
				ИсходныйНомерСинхронизируемый        = Число("0" + ОбластьЯчейкиСинхронизируемой.Текст);
				НовыйПорядковыйНомерСинхронизируемый = ИсходныйНомерСинхронизируемый + 1;
				
				ОбластьЯчейкиСинхронизируемой.Текст  = ? (НЕ НовыйПорядковыйНомерСинхронизируемый > МаксимальноеКоличествоСтрокГруппыСинхронизируемой3, Строка(НовыйПорядковыйНомерСинхронизируемый), "");
				
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Для НомерГрафыСинхронизируемой = 1 По 30 Цикл
		
		ИмяКолонкиСинхронизируемой = ИмяГруппыСинхронизируемой3 + Формат(НомерГрафыСинхронизируемой, "ЧЦ=2; ЧВН=");
		
		// Переопределяем имена вставленной области.
		Если СтруктураГруппыСинхронизируемой3[0].Свойство(ИмяКолонкиСинхронизируемой) Тогда
			
			ИмяОбластиЯчейкиСинхронизируемой    = ИмяКолонкиСинхронизируемой + "_" + КолСтрокСтрСинхронизируемых;
			ИмяНовОбластиЯчейкиСинхронизируемой = ИмяКолонкиСинхронизируемой + "_" + КолСтрокСтр1Синхронизируемых;
			
			ОбластьЯчейкиСинхронизируемой = ТекТабличноеПолеСинхронизируемое.Области[ИмяОбластиЯчейкиСинхронизируемой];
			ОбластьЯчейкиСинхронизируемой.Имя = ИмяНовОбластиЯчейкиСинхронизируемой;
			
			// Определяем границы ячейки исходной области.
			НомерВерхСтрокиЯчейкиСинхронизируемой  = ОбластьЯчейкиСинхронизируемой.Верх - СдвигСтрокСинхронизируемых;
			НомерНижнСтрокиЯчейкиСинхронизируемой  = ОбластьЯчейкиСинхронизируемой.Низ  - СдвигСтрокСинхронизируемых;
			
			НомерЛевоКолонкиЯчейкиСинхронизируемой = ОбластьЯчейкиСинхронизируемой.Лево;
			НомерПравКолонкиЯчейкиСинхронизируемой = ОбластьЯчейкиСинхронизируемой.Право;
			
			// Назначаем имя ячейки исходной области,
			// (т.к. в результате вставки новой области оно было очищено).
			ОбластьЯчейкиИсходнойОбластиСинхронизируемой = ТекТабличноеПолеСинхронизируемое.Область(НомерВерхСтрокиЯчейкиСинхронизируемой, НомерЛевоКолонкиЯчейкиСинхронизируемой, НомерНижнСтрокиЯчейкиСинхронизируемой, НомерПравКолонкиЯчейкиСинхронизируемой);
			ОбластьЯчейкиИсходнойОбластиСинхронизируемой.Имя = ИмяОбластиЯчейкиСинхронизируемой;
			
			// Очищаем значения ячеек вставленной области.
			Если ОбластьЯчейкиСинхронизируемой.СодержитЗначение = Истина Тогда
				ОбластьЯчейкиСинхронизируемой.Очистить();
			Иначе
				// Порядековый номер последней строки перед вставкой.
				ИсходныйНомерСинхронизируемый        = Число("0" + ОбластьЯчейкиСинхронизируемой.Текст);
				НовыйПорядковыйНомерСинхронизируемый = ИсходныйНомерСинхронизируемый + 1;
				
				ОбластьЯчейкиСинхронизируемой.Текст  = ? (НЕ НовыйПорядковыйНомерСинхронизируемый > МаксимальноеКоличествоСтрокГруппыСинхронизируемой3, Строка(НовыйПорядковыйНомерСинхронизируемый), "");
				
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	СтруктураГруппыСинхронизируемой3.Добавить();
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтроку(Команда)
	
	ТекТабличноеПоле = ЭтаФорма["ПолеТабличногоДокументаФормаОтчета"];
	
	ТекущаяОбласть = ТекТабличноеПоле.ТекущаяОбласть;
	ИмяГруппы      = РазделТекущейОбласти(ЭтаФорма, ТекущаяОбласть);
	
	Если ИмяГруппы = Неопределено Тогда
		
		Сообщение = Новый СообщениеПользователю;
		
		Сообщение.Текст = НСтр("ru='Не выбрана удаляемая строка многострочного раздела.'");
		
		Сообщение.Сообщить();
		
		Возврат;
		
	КонецЕсли;
	
	ТекстВопроса = НСтр("ru='Удалить выбранную строку?'");
	ОписаниеОповещения = Новый ОписаниеОповещения("УдалитьСтрокуЗавершение", ЭтотОбъект); 	
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтрокуЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	#Если ВебКлиент Тогда
		
		УдалитьДополнительнуюСтрокуНаСервере("ФормаОтчета");
		
	#Иначе
		
		УдалитьДополнительнуюСтрокуНаКлиенте("ФормаОтчета");
		
	#КонецЕсли
	
	РасчетНаКлиенте("", "");
	
КонецПроцедуры

&НаСервере
Процедура УдалитьДополнительнуюСтрокуНаСервере(ТекущаяСтраница)
	
	УдалитьДополнительнуюСтроку(ЭтаФорма, , , ТекущаяСтраница);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьДополнительнуюСтрокуНаКлиенте(ТекущаяСтраница)
	
	УдалитьДополнительнуюСтроку(ЭтаФорма, , , ТекущаяСтраница);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УдалитьДополнительнуюСтроку(Форма, СпециальноеДобавление = Ложь, ИмяКолонкиНомера = Неопределено, ТекущаяСтраница = Неопределено) Экспорт
	
	Перем ИсходноеКоличествоСтрокГруппы;
	Перем ИсходноеКоличествоСтрокГруппыСинхронизируемой1,
	ИсходноеКоличествоСтрокГруппыСинхронизируемой2,
	ИсходноеКоличествоСтрокГруппыСинхронизируемой3;
	
	Перем СтруктураГруппы;
	Перем СтруктураГруппыСинхронизируемой1,
	СтруктураГруппыСинхронизируемой2,
	СтруктураГруппыСинхронизируемой3;
	
	// Сначала выполним проверку на активную страницу панели формы,
	// которая содержит многострочный раздел.
	#Если НаКлиенте Тогда
		ИмяГруппы = Форма.ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаКлиенте(ТекущаяСтраница);
	#Иначе
		ИмяГруппы = Форма.ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ТекущаяСтраница);
	#КонецЕсли
	
	Если ИмяГруппы = "П0000010001" Тогда
		ИмяГруппыСинхронизируемой1 = "П0000020001";
		ИмяГруппыСинхронизируемой2 = "П0000030001";
		ИмяГруппыСинхронизируемой3 = "П0000040001";
	ИначеЕсли ИмяГруппы = "П0000020001" Тогда
		ИмяГруппыСинхронизируемой1 = "П0000010001";
		ИмяГруппыСинхронизируемой2 = "П0000030001";
		ИмяГруппыСинхронизируемой3 = "П0000040001";
	ИначеЕсли ИмяГруппы = "П0000030001" Тогда
		ИмяГруппыСинхронизируемой1 = "П0000010001";
		ИмяГруппыСинхронизируемой2 = "П0000020001";
		ИмяГруппыСинхронизируемой3 = "П0000040001";
	ИначеЕсли ИмяГруппы = "П0000040001" Тогда
		ИмяГруппыСинхронизируемой1 = "П0000010001";
		ИмяГруппыСинхронизируемой2 = "П0000020001";
		ИмяГруппыСинхронизируемой3 = "П0000030001";
	КонецЕсли;
	
	// Исходное количество строк группы.
	Форма.мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);
	
	Форма.мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);
	
	ТекТабличноеПолеИмя = "ПолеТабличногоДокументаФормаОтчета";
	
	ТекТабличноеПоле = Форма[ТекТабличноеПолеИмя];
	ТекущаяОбласть = Форма.Элементы[ТекТабличноеПолеИмя].ТекущаяОбласть;
	ИмяЯчейки      = СтрЗаменить(ТекущаяОбласть.Имя, "УдалитьСтроку", "");
	
	Если ИмяГруппы = "П0000010001" Тогда
		ИмяЯчейкиСинхронизируемой1 = "П000002000191_" + Сред(ИмяЯчейки, 15);
		ИмяЯчейкиСинхронизируемой2 = "П000003000191_" + Сред(ИмяЯчейки, 15);
		ИмяЯчейкиСинхронизируемой3 = "П000004000191_" + Сред(ИмяЯчейки, 15);
	ИначеЕсли ИмяГруппы = "П0000020001" Тогда
		ИмяЯчейкиСинхронизируемой1 = "П000001000191_" + Сред(ИмяЯчейки, 15);
		ИмяЯчейкиСинхронизируемой2 = "П000003000191_" + Сред(ИмяЯчейки, 15);
		ИмяЯчейкиСинхронизируемой3 = "П000004000191_" + Сред(ИмяЯчейки, 15);
	ИначеЕсли ИмяГруппы = "П0000030001" Тогда
		ИмяЯчейкиСинхронизируемой1 = "П000001000191_" + Сред(ИмяЯчейки, 15);
		ИмяЯчейкиСинхронизируемой2 = "П000002000191_" + Сред(ИмяЯчейки, 15);
		ИмяЯчейкиСинхронизируемой3 = "П000004000191_" + Сред(ИмяЯчейки, 15);
	ИначеЕсли ИмяГруппы = "П0000040001" Тогда
		ИмяЯчейкиСинхронизируемой1 = "П000001000191_" + Сред(ИмяЯчейки, 15);
		ИмяЯчейкиСинхронизируемой2 = "П000002000191_" + Сред(ИмяЯчейки, 15);
		ИмяЯчейкиСинхронизируемой3 = "П000003000191_" + Сред(ИмяЯчейки, 15);
	КонецЕсли;
	
	ИмяГруппы = РазделТекущейОбласти(Форма, ТекущаяОбласть);
	
	// Предварительно обновим структуру многострочных разделов.
	ОбновитьСтруктуруМногострочногоРаздела(Форма, ИмяГруппы);
	
	// Номер строки многострочного раздела определим
	// по имени выделенной ячейки.
	НомУдаляемойСтроки = Число( Сред( ИмяЯчейки, СтрНайти( ИмяЯчейки, "_") + 1));
	НомерСтрокиТаблицы = НомУдаляемойСтроки - 1; // нумерация строк в таблице значений начинается с нуля
	СтруктураГруппы = Форма[СтруктураГруппы];
	Если СтруктураГруппы.Количество() > ИсходноеКоличествоСтрокГруппы Тогда
		// Удаляется добавленная строка.
		ИмяПервойЯчейкиУдаляемойСтроки = ИмяГруппы + "91_" + НомУдаляемойСтроки;
		
		// Область первой ячейки удаляемой строки многострочного раздела.
		ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяПервойЯчейкиУдаляемойСтроки];
		
		// Номера строк удаляемой области.
		НомерВерхЯчейкиОбласти = ОбластьЯчейки.Верх;
		НомерНижнЯчейкиОбласти = ОбластьЯчейки.Верх;
		
		РегламентированнаяОтчетностьВызовСервера.СпециальногоУдаленияСтроки(ТекТабличноеПоле, ТекТабличноеПолеИмя, ИмяГруппы, НомерВерхЯчейкиОбласти, НомерНижнЯчейкиОбласти);
		
		Форма[ТекТабличноеПолеИмя] = ТекТабличноеПоле;
		
		КолвоСдвигаемыхСтрок = СтруктураГруппы.Количество() - НомУдаляемойСтроки;
		
		// Обновим имена ячеек сдвинутых строк.
		Если КолвоСдвигаемыхСтрок > 0 Тогда
			
			Для НСтр = НомУдаляемойСтроки + 1 По СтруктураГруппы.Количество() Цикл
				
				ТекСтрока = СтруктураГруппы[НСтр-1];
				
				Для НомерГрафы = 91 По 94 Цикл
					
					КолонкаИмя = ИмяГруппы + Формат(НомерГрафы, "ЧЦ=2; ЧВН=");
					
					Если СтруктураГруппы[0].Свойство(КолонкаИмя) Тогда
						
						ИмяСдвинутойЯчейки = КолонкаИмя + "_" + НСтр;
						НовоеИмяСдвинутойЯчейки = КолонкаИмя + "_" + (НСтр - 1);
						
						ОбластьСдвинутойЯчейки     = ТекТабличноеПоле.Области[ИмяСдвинутойЯчейки];
						ОбластьСдвинутойЯчейки.Имя = НовоеИмяСдвинутойЯчейки;
						
						Если НомерГрафы = 91 Тогда
							ОбластьЯчейкиУдалитьСтроку = ТекТабличноеПоле.Область(ОбластьСдвинутойЯчейки.Верх, 1, ОбластьСдвинутойЯчейки.Верх, 1);
							ОбластьЯчейкиУдалитьСтроку.Имя = "УдалитьСтроку" + НовоеИмяСдвинутойЯчейки;
						КонецЕсли;
						
					КонецЕсли;
				КонецЦикла;
				
				Для НомерГрафы = 1 По 30 Цикл
					
					КолонкаИмя = ИмяГруппы + Формат(НомерГрафы, "ЧЦ=2; ЧВН=");
					
					Если СтруктураГруппы[0].Свойство(КолонкаИмя) Тогда
						
						ИмяСдвинутойЯчейки = КолонкаИмя + "_" + НСтр;
						НовоеИмяСдвинутойЯчейки = КолонкаИмя + "_" + (НСтр - 1);
						
						ОбластьСдвинутойЯчейки     = ТекТабличноеПоле.Области[ИмяСдвинутойЯчейки];
						ОбластьСдвинутойЯчейки.Имя = НовоеИмяСдвинутойЯчейки;
						
					КонецЕсли;
				КонецЦикла;
				
			КонецЦикла;
		КонецЕсли;
		
		// Обновляем структуру многострочного раздела.
		СтруктураГруппы.Удалить(НомерСтрокиТаблицы);
		
	Иначе
		// Строка не удаляется в форме табличного документа,
		// должен осуществляться сдвиг строк.
		
		// Обновляем структуру многострочного раздела
		// методом удаления выбранной строки и добавления пустой строки.
		СтруктураГруппы.Удалить(НомерСтрокиТаблицы);
		
		ДобавляемаяСтрока = СтруктураГруппы.Добавить();
		
		// Обновляем порядковые номера строк, выводимых в табличный документ.
		Для Каждого СтрокаТаблицы Из СтруктураГруппы Цикл
			
			НомерСтрокиВТаблице = СтруктураГруппы.Индекс(СтрокаТаблицы);
			НомерСтрокиВФормеТаблицы = Формат(НомерСтрокиВТаблице + 1, "ЧГ=0");
			
			Для НомерГрафы = 91 По 94 Цикл
				
				КолонкаТаблицыИмя = ИмяГруппы + Формат(НомерГрафы, "ЧЦ=2; ЧВН=");
				
				Если СтруктураГруппы[0].Свойство(КолонкаТаблицыИмя) Тогда
					
					ИмяЯчейки                = КолонкаТаблицыИмя + "_" + НомерСтрокиВФормеТаблицы;
					ОбластьЯчейкиТаблицы     = ТекТабличноеПоле.Области[ИмяЯчейки];
					
				КонецЕсли;
			КонецЦикла;
			
			Для НомерГрафы = 1 По 30 Цикл
				
				КолонкаТаблицыИмя = ИмяГруппы + Формат(НомерГрафы, "ЧЦ=2; ЧВН=");
				
				Если СтруктураГруппы[0].Свойство(КолонкаТаблицыИмя) Тогда
					
					ИмяЯчейки                = КолонкаТаблицыИмя + "_" + НомерСтрокиВФормеТаблицы;
					ОбластьЯчейкиТаблицы     = ТекТабличноеПоле.Области[ИмяЯчейки];
					
				КонецЕсли;
			КонецЦикла;
			
		КонецЦикла;
		
		// Обновляем экранную форму табличного документа.
		#Если НаКлиенте Тогда
			Форма.ВывестиРазделВТабличныйДокументНаКлиенте(ИмяГруппы, СтруктураГруппы);
		#Иначе
			Форма.ВывестиРазделВТабличныйДокументНаСервере(ИмяГруппы, СтруктураГруппы);
		#КонецЕсли
		
	КонецЕсли;
	
	// Назначим текущей областью таблицы первую редактируемую ячейку
	// удаленной строки, если ее порядковый номер меньше кол-ва строк
	// многострочного раздела, или последней строки раздела в противном случае.
	
	// Определяем текущую область таблицы.
	НомТекущейСтроки  = Мин( НомУдаляемойСтроки, СтруктураГруппы.Количество() );
	ИмяТекущейОбласти = ИмяГруппы + "91_" + НомТекущейСтроки;
	
	Форма.Элементы[ТекТабличноеПолеИмя].ТекущаяОбласть = ТекТабличноеПоле.Области[ИмяТекущейОбласти];
	
	// Установим фокус на поле табличн. документа.
	ТекущийЭлемент = Форма.Элементы[ТекТабличноеПолеИмя];
	
	// СИНХРОНИЗАЦИЯ I.
	
	Форма.мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппыСинхронизируемой1, ИсходноеКоличествоСтрокГруппыСинхронизируемой1);
	
	Форма.мСтруктураМногострочныхРазделов.Свойство(ИмяГруппыСинхронизируемой1, СтруктураГруппыСинхронизируемой1);
	
	ТекТабличноеПолеИмяСинхронизируемое = "ПолеТабличногоДокументаФормаОтчета";
	
	ТекТабличноеПолеСинхронизируемое = Форма[ТекТабличноеПолеИмяСинхронизируемое];
	ТекущаяОбластьСинхронизируемая = Форма.Элементы[ТекТабличноеПолеИмяСинхронизируемое].ТекущаяОбласть;
	
	// Предварительно обновим структуру многострочных разделов.
	ОбновитьСтруктуруМногострочногоРаздела(Форма, ИмяГруппыСинхронизируемой1);
	
	// Номер строки многострочного раздела определим
	// по имени выделенной ячейки.
	НомУдаляемойСтрокиСинхронизируемый = Число( Сред( ИмяЯчейкиСинхронизируемой1, СтрНайти( ИмяЯчейкиСинхронизируемой1, "_") + 1));
	НомерСтрокиТаблицыСинхронизируемый = НомУдаляемойСтрокиСинхронизируемый - 1; // нумерация строк в таблице значений начинается с нуля
	СтруктураГруппыСинхронизируемой1 = Форма[СтруктураГруппыСинхронизируемой1];
	Если СтруктураГруппыСинхронизируемой1.Количество() > ИсходноеКоличествоСтрокГруппыСинхронизируемой1 Тогда
		// Удаляется добавленная строка.
		ИмяПервойЯчейкиУдаляемойСтрокиСинхронизируемой = ИмяГруппыСинхронизируемой1 + "91_" + НомУдаляемойСтрокиСинхронизируемый;
		
		// Область первой ячейки удаляемой строки многострочного раздела.
		ОбластьЯчейкиСинхронизируемой = ТекТабличноеПолеСинхронизируемое.Области[ИмяПервойЯчейкиУдаляемойСтрокиСинхронизируемой];
		
		// Номера строк удаляемой области.
		НомерВерхЯчейкиОбластиСинхронизируемой = ОбластьЯчейкиСинхронизируемой.Верх;
		НомерНижнЯчейкиОбластиСинхронизируемой = ОбластьЯчейкиСинхронизируемой.Верх;
		
		РегламентированнаяОтчетностьВызовСервера.СпециальногоУдаленияСтроки(ТекТабличноеПолеСинхронизируемое, ТекТабличноеПолеИмяСинхронизируемое, ИмяГруппыСинхронизируемой1, НомерВерхЯчейкиОбластиСинхронизируемой, НомерНижнЯчейкиОбластиСинхронизируемой);
		
		Форма[ТекТабличноеПолеИмяСинхронизируемое] = ТекТабличноеПолеСинхронизируемое;
		
		КолвоСдвигаемыхСтрокСинхронизируемое = СтруктураГруппыСинхронизируемой1.Количество() - НомУдаляемойСтрокиСинхронизируемый;
		
		// Обновим имена ячеек сдвинутых строк.
		Если КолвоСдвигаемыхСтрокСинхронизируемое > 0 Тогда
			
			Для НСтр = НомУдаляемойСтрокиСинхронизируемый + 1 По СтруктураГруппыСинхронизируемой1.Количество() Цикл
				
				ТекСтрокаСинхронизируемая = СтруктураГруппыСинхронизируемой1[НСтр-1];
				
				Для НомерГрафы = 91 По 94 Цикл
					
					КолонкаИмяСинхронизируемое = ИмяГруппыСинхронизируемой1 + Формат(НомерГрафы, "ЧЦ=2; ЧВН=");
					
					Если СтруктураГруппыСинхронизируемой1[0].Свойство(КолонкаИмяСинхронизируемое) Тогда
						
						ИмяСдвинутойЯчейкСинхронизируемой = КолонкаИмяСинхронизируемое + "_" + НСтр;
						НовоеИмяСдвинутойЯчейкиСинхронизируемой = КолонкаИмяСинхронизируемое + "_" + (НСтр - 1);
						
						ОбластьСдвинутойЯчейкиСинхронизируемой     = ТекТабличноеПолеСинхронизируемое.Области[ИмяСдвинутойЯчейкСинхронизируемой];
						ОбластьСдвинутойЯчейкиСинхронизируемой.Имя = НовоеИмяСдвинутойЯчейкиСинхронизируемой;
						
						Если НомерГрафы = 91 Тогда
							ОбластьЯчейкиУдалитьСтроку = ТекТабличноеПолеСинхронизируемое.Область(ОбластьСдвинутойЯчейкиСинхронизируемой.Верх, 1, ОбластьСдвинутойЯчейкиСинхронизируемой.Верх, 1);
							ОбластьЯчейкиУдалитьСтроку.Имя = "УдалитьСтроку" + НовоеИмяСдвинутойЯчейкиСинхронизируемой;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
				
				Для НомерГрафы = 1 По 30 Цикл
					
					КолонкаИмяСинхронизируемое = ИмяГруппыСинхронизируемой1 + Формат(НомерГрафы, "ЧЦ=2; ЧВН=");
					
					Если СтруктураГруппыСинхронизируемой1[0].Свойство(КолонкаИмяСинхронизируемое) Тогда
						
						ИмяСдвинутойЯчейкСинхронизируемой = КолонкаИмяСинхронизируемое + "_" + НСтр;
						НовоеИмяСдвинутойЯчейкиСинхронизируемой = КолонкаИмяСинхронизируемое + "_" + (НСтр - 1);
						
						ОбластьСдвинутойЯчейкиСинхронизируемой     = ТекТабличноеПолеСинхронизируемое.Области[ИмяСдвинутойЯчейкСинхронизируемой];
						ОбластьСдвинутойЯчейкиСинхронизируемой.Имя = НовоеИмяСдвинутойЯчейкиСинхронизируемой;
						
					КонецЕсли;
				КонецЦикла;
				
			КонецЦикла;
		КонецЕсли;
		
		// Обновляем структуру многострочного раздела.
		СтруктураГруппыСинхронизируемой1.Удалить(НомерСтрокиТаблицыСинхронизируемый);
		
	Иначе
		// Строка не удаляется в форме табличного документа,
		// должен осуществляться сдвиг строк.
		
		// Обновляем структуру многострочного раздела
		// методом удаления выбранной строки и добавления пустой строки.
		СтруктураГруппыСинхронизируемой1.Удалить(НомерСтрокиТаблицыСинхронизируемый);
		
		ДобавляемаяСтрокаСинхронизируемая = СтруктураГруппыСинхронизируемой1.Добавить();
		
		// Обновляем порядковые номера строк, выводимых в табличный документ.
		Для Каждого СтрокаТаблицыСинхронизируемой Из СтруктураГруппыСинхронизируемой1 Цикл
			
			НомерСтрокиВТаблицеСинхронизируемой = СтруктураГруппыСинхронизируемой1.Индекс(СтрокаТаблицыСинхронизируемой);
			НомерСтрокиВФормеТаблицыСинхронизируемой = Формат(НомерСтрокиВТаблицеСинхронизируемой + 1, "ЧГ=0");
			
			Для НомерГрафы = 91 По 94 Цикл
				КолонкаТаблицыИмяСинхронизируемое = ИмяГруппыСинхронизируемой1 + Формат(НомерГрафы, "ЧЦ=2; ЧВН=");
				
				Если СтруктураГруппыСинхронизируемой1[0].Свойство(КолонкаТаблицыИмяСинхронизируемое) Тогда
					
					ИмяЯчейкиСинхронизируемой1                = КолонкаТаблицыИмяСинхронизируемое + "_" + НомерСтрокиВФормеТаблицыСинхронизируемой;
					ОбластьЯчейкиТаблицыСинхронизируемой     = ТекТабличноеПолеСинхронизируемое.Области[ИмяЯчейкиСинхронизируемой1];
					
				КонецЕсли;
			КонецЦикла;
			
			Для НомерГрафы = 1 По 30 Цикл
				КолонкаТаблицыИмяСинхронизируемое = ИмяГруппыСинхронизируемой1 + Формат(НомерГрафы, "ЧЦ=2; ЧВН=");
				
				Если СтруктураГруппыСинхронизируемой1[0].Свойство(КолонкаТаблицыИмяСинхронизируемое) Тогда
					
					ИмяЯчейкиСинхронизируемой1                = КолонкаТаблицыИмяСинхронизируемое + "_" + НомерСтрокиВФормеТаблицыСинхронизируемой;
					ОбластьЯчейкиТаблицыСинхронизируемой     = ТекТабличноеПолеСинхронизируемое.Области[ИмяЯчейкиСинхронизируемой1];
					
				КонецЕсли;
			КонецЦикла;
			
		КонецЦикла;
		
		// Обновляем экранную форму табличного документа.
		#Если НаКлиенте Тогда
			Форма.ВывестиРазделВТабличныйДокументНаКлиенте(ИмяГруппыСинхронизируемой1, СтруктураГруппыСинхронизируемой1);
		#Иначе
			Форма.ВывестиРазделВТабличныйДокументНаСервере(ИмяГруппыСинхронизируемой1, СтруктураГруппыСинхронизируемой1);
		#КонецЕсли
		
	КонецЕсли;
	
	// СИНХРОНИЗАЦИЯ II.
	
	Форма.мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппыСинхронизируемой2, ИсходноеКоличествоСтрокГруппыСинхронизируемой2);
	
	Форма.мСтруктураМногострочныхРазделов.Свойство(ИмяГруппыСинхронизируемой2, СтруктураГруппыСинхронизируемой2);
	
	ТекТабличноеПолеИмяСинхронизируемое = "ПолеТабличногоДокументаФормаОтчета";
	
	ТекТабличноеПолеСинхронизируемое = Форма[ТекТабличноеПолеИмяСинхронизируемое];
	ТекущаяОбластьСинхронизируемая = Форма.Элементы[ТекТабличноеПолеИмяСинхронизируемое].ТекущаяОбласть;
	
	// Предварительно обновим структуру многострочных разделов.
	ОбновитьСтруктуруМногострочногоРаздела(Форма, ИмяГруппыСинхронизируемой2);
	
	// Номер строки многострочного раздела определим
	// по имени выделенной ячейки.
	НомУдаляемойСтрокиСинхронизируемый = Число( Сред( ИмяЯчейкиСинхронизируемой2, СтрНайти( ИмяЯчейкиСинхронизируемой2, "_") + 1));
	НомерСтрокиТаблицыСинхронизируемый = НомУдаляемойСтрокиСинхронизируемый - 1; // нумерация строк в таблице значений начинается с нуля
	СтруктураГруппыСинхронизируемой2 = Форма[СтруктураГруппыСинхронизируемой2];
	Если СтруктураГруппыСинхронизируемой2.Количество() > ИсходноеКоличествоСтрокГруппыСинхронизируемой2 Тогда
		// Удаляется добавленная строка.
		ИмяПервойЯчейкиУдаляемойСтрокиСинхронизируемой = ИмяГруппыСинхронизируемой2 + "91_" + НомУдаляемойСтрокиСинхронизируемый;
		
		// Область первой ячейки удаляемой строки многострочного раздела.
		ОбластьЯчейкиСинхронизируемой = ТекТабличноеПолеСинхронизируемое.Области[ИмяПервойЯчейкиУдаляемойСтрокиСинхронизируемой];
		
		// Номера строк удаляемой области.
		НомерВерхЯчейкиОбластиСинхронизируемой = ОбластьЯчейкиСинхронизируемой.Верх;
		НомерНижнЯчейкиОбластиСинхронизируемой = ОбластьЯчейкиСинхронизируемой.Верх;
		
		РегламентированнаяОтчетностьВызовСервера.СпециальногоУдаленияСтроки(ТекТабличноеПолеСинхронизируемое, ТекТабличноеПолеИмяСинхронизируемое, ИмяГруппыСинхронизируемой2, НомерВерхЯчейкиОбластиСинхронизируемой, НомерНижнЯчейкиОбластиСинхронизируемой);
		
		Форма[ТекТабличноеПолеИмяСинхронизируемое] = ТекТабличноеПолеСинхронизируемое;
		
		КолвоСдвигаемыхСтрокСинхронизируемое = СтруктураГруппыСинхронизируемой2.Количество() - НомУдаляемойСтрокиСинхронизируемый;
		
		// Обновим имена ячеек сдвинутых строк.
		Если КолвоСдвигаемыхСтрокСинхронизируемое > 0 Тогда
			
			Для НСтр = НомУдаляемойСтрокиСинхронизируемый + 1 По СтруктураГруппыСинхронизируемой2.Количество() Цикл
				
				ТекСтрокаСинхронизируемая = СтруктураГруппыСинхронизируемой2[НСтр-1];
				
				Для НомерГрафы = 91 По 94 Цикл
					
					КолонкаИмяСинхронизируемое = ИмяГруппыСинхронизируемой2 + Формат(НомерГрафы, "ЧЦ=2; ЧВН=");
					
					Если СтруктураГруппыСинхронизируемой2[0].Свойство(КолонкаИмяСинхронизируемое) Тогда
						
						ИмяСдвинутойЯчейкСинхронизируемой = КолонкаИмяСинхронизируемое + "_" + НСтр;
						НовоеИмяСдвинутойЯчейкиСинхронизируемой = КолонкаИмяСинхронизируемое + "_" + (НСтр - 1);
						
						ОбластьСдвинутойЯчейкиСинхронизируемой     = ТекТабличноеПолеСинхронизируемое.Области[ИмяСдвинутойЯчейкСинхронизируемой];
						ОбластьСдвинутойЯчейкиСинхронизируемой.Имя = НовоеИмяСдвинутойЯчейкиСинхронизируемой;
						
						Если НомерГрафы = 91 Тогда
							ОбластьЯчейкиУдалитьСтроку = ТекТабличноеПолеСинхронизируемое.Область(ОбластьСдвинутойЯчейкиСинхронизируемой.Верх, 1, ОбластьСдвинутойЯчейкиСинхронизируемой.Верх, 1);
							ОбластьЯчейкиУдалитьСтроку.Имя = "УдалитьСтроку" + НовоеИмяСдвинутойЯчейкиСинхронизируемой;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
				
				Для НомерГрафы = 1 По 30 Цикл
					
					КолонкаИмяСинхронизируемое = ИмяГруппыСинхронизируемой2 + Формат(НомерГрафы, "ЧЦ=2; ЧВН=");
					
					Если СтруктураГруппыСинхронизируемой2[0].Свойство(КолонкаИмяСинхронизируемое) Тогда
						
						ИмяСдвинутойЯчейкСинхронизируемой = КолонкаИмяСинхронизируемое + "_" + НСтр;
						НовоеИмяСдвинутойЯчейкиСинхронизируемой = КолонкаИмяСинхронизируемое + "_" + (НСтр - 1);
						
						ОбластьСдвинутойЯчейкиСинхронизируемой     = ТекТабличноеПолеСинхронизируемое.Области[ИмяСдвинутойЯчейкСинхронизируемой];
						ОбластьСдвинутойЯчейкиСинхронизируемой.Имя = НовоеИмяСдвинутойЯчейкиСинхронизируемой;
						
					КонецЕсли;
				КонецЦикла;
				
			КонецЦикла;
		КонецЕсли;
		
		// Обновляем структуру многострочного раздела.
		СтруктураГруппыСинхронизируемой2.Удалить(НомерСтрокиТаблицыСинхронизируемый);
		
	Иначе
		// Строка не удаляется в форме табличного документа,
		// должен осуществляться сдвиг строк.
		
		// Обновляем структуру многострочного раздела
		// методом удаления выбранной строки и добавления пустой строки.
		СтруктураГруппыСинхронизируемой2.Удалить(НомерСтрокиТаблицыСинхронизируемый);
		
		ДобавляемаяСтрокаСинхронизируемая = СтруктураГруппыСинхронизируемой2.Добавить();
		
		// Обновляем порядковые номера строк, выводимых в табличный документ.
		Для Каждого СтрокаТаблицыСинхронизируемой Из СтруктураГруппыСинхронизируемой2 Цикл
			
			НомерСтрокиВТаблицеСинхронизируемой = СтруктураГруппыСинхронизируемой2.Индекс(СтрокаТаблицыСинхронизируемой);
			НомерСтрокиВФормеТаблицыСинхронизируемой = Формат(НомерСтрокиВТаблицеСинхронизируемой + 1, "ЧГ=0");
			
			Для НомерГрафы = 91 По 94 Цикл
				КолонкаТаблицыИмяСинхронизируемое = ИмяГруппыСинхронизируемой2 + Формат(НомерГрафы, "ЧЦ=2; ЧВН=");
				
				Если СтруктураГруппыСинхронизируемой2[0].Свойство(КолонкаТаблицыИмяСинхронизируемое) Тогда
					
					ИмяЯчейкиСинхронизируемой2                = КолонкаТаблицыИмяСинхронизируемое + "_" + НомерСтрокиВФормеТаблицыСинхронизируемой;
					ОбластьЯчейкиТаблицыСинхронизируемой     = ТекТабличноеПолеСинхронизируемое.Области[ИмяЯчейкиСинхронизируемой2];
					
				КонецЕсли;
			КонецЦикла;
			
			Для НомерГрафы = 1 По 30 Цикл
				КолонкаТаблицыИмяСинхронизируемое = ИмяГруппыСинхронизируемой2 + Формат(НомерГрафы, "ЧЦ=2; ЧВН=");
				
				Если СтруктураГруппыСинхронизируемой2[0].Свойство(КолонкаТаблицыИмяСинхронизируемое) Тогда
					
					ИмяЯчейкиСинхронизируемой2                = КолонкаТаблицыИмяСинхронизируемое + "_" + НомерСтрокиВФормеТаблицыСинхронизируемой;
					ОбластьЯчейкиТаблицыСинхронизируемой     = ТекТабличноеПолеСинхронизируемое.Области[ИмяЯчейкиСинхронизируемой2];
					
				КонецЕсли;
			КонецЦикла;
			
		КонецЦикла;
		
		// Обновляем экранную форму табличного документа.
		#Если НаКлиенте Тогда
			Форма.ВывестиРазделВТабличныйДокументНаКлиенте(ИмяГруппыСинхронизируемой2, СтруктураГруппыСинхронизируемой2);
		#Иначе
			Форма.ВывестиРазделВТабличныйДокументНаСервере(ИмяГруппыСинхронизируемой2, СтруктураГруппыСинхронизируемой2);
		#КонецЕсли
		
	КонецЕсли;
	
	// СИНХРОНИЗАЦИЯ III.
	
	Форма.мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппыСинхронизируемой3, ИсходноеКоличествоСтрокГруппыСинхронизируемой3);
	
	Форма.мСтруктураМногострочныхРазделов.Свойство(ИмяГруппыСинхронизируемой3, СтруктураГруппыСинхронизируемой3);
	
	ТекТабличноеПолеИмяСинхронизируемое = "ПолеТабличногоДокументаФормаОтчета";
	
	ТекТабличноеПолеСинхронизируемое = Форма[ТекТабличноеПолеИмяСинхронизируемое];
	ТекущаяОбластьСинхронизируемая = Форма.Элементы[ТекТабличноеПолеИмяСинхронизируемое].ТекущаяОбласть;
	
	// Предварительно обновим структуру многострочных разделов.
	ОбновитьСтруктуруМногострочногоРаздела(Форма, ИмяГруппыСинхронизируемой3);
	
	// Номер строки многострочного раздела определим
	// по имени выделенной ячейки.
	НомУдаляемойСтрокиСинхронизируемый = Число( Сред( ИмяЯчейкиСинхронизируемой3, СтрНайти( ИмяЯчейкиСинхронизируемой3, "_") + 1));
	НомерСтрокиТаблицыСинхронизируемый = НомУдаляемойСтрокиСинхронизируемый - 1; // нумерация строк в таблице значений начинается с нуля
	СтруктураГруппыСинхронизируемой3 = Форма[СтруктураГруппыСинхронизируемой3];
	Если СтруктураГруппыСинхронизируемой3.Количество() > ИсходноеКоличествоСтрокГруппыСинхронизируемой3 Тогда
		// Удаляется добавленная строка.
		ИмяПервойЯчейкиУдаляемойСтрокиСинхронизируемой = ИмяГруппыСинхронизируемой3 + "91_" + НомУдаляемойСтрокиСинхронизируемый;
		
		// Область первой ячейки удаляемой строки многострочного раздела.
		ОбластьЯчейкиСинхронизируемой = ТекТабличноеПолеСинхронизируемое.Области[ИмяПервойЯчейкиУдаляемойСтрокиСинхронизируемой];
		
		// Номера строк удаляемой области.
		НомерВерхЯчейкиОбластиСинхронизируемой = ОбластьЯчейкиСинхронизируемой.Верх;
		НомерНижнЯчейкиОбластиСинхронизируемой = ОбластьЯчейкиСинхронизируемой.Верх;
		
		РегламентированнаяОтчетностьВызовСервера.СпециальногоУдаленияСтроки(ТекТабличноеПолеСинхронизируемое, ТекТабличноеПолеИмяСинхронизируемое, ИмяГруппыСинхронизируемой3, НомерВерхЯчейкиОбластиСинхронизируемой, НомерНижнЯчейкиОбластиСинхронизируемой);
		
		Форма[ТекТабличноеПолеИмяСинхронизируемое] = ТекТабличноеПолеСинхронизируемое;
		
		КолвоСдвигаемыхСтрокСинхронизируемое = СтруктураГруппыСинхронизируемой3.Количество() - НомУдаляемойСтрокиСинхронизируемый;
		
		// Обновим имена ячеек сдвинутых строк.
		Если КолвоСдвигаемыхСтрокСинхронизируемое > 0 Тогда
			
			Для НСтр = НомУдаляемойСтрокиСинхронизируемый + 1 По СтруктураГруппыСинхронизируемой3.Количество() Цикл
				
				ТекСтрокаСинхронизируемая = СтруктураГруппыСинхронизируемой3[НСтр-1];
				
				Для НомерГрафы = 91 По 94 Цикл
					
					КолонкаИмяСинхронизируемое = ИмяГруппыСинхронизируемой3 + Формат(НомерГрафы, "ЧЦ=2; ЧВН=");
					
					Если СтруктураГруппыСинхронизируемой3[0].Свойство(КолонкаИмяСинхронизируемое) Тогда
						
						ИмяСдвинутойЯчейкСинхронизируемой = КолонкаИмяСинхронизируемое + "_" + НСтр;
						НовоеИмяСдвинутойЯчейкиСинхронизируемой = КолонкаИмяСинхронизируемое + "_" + (НСтр - 1);
						
						ОбластьСдвинутойЯчейкиСинхронизируемой     = ТекТабличноеПолеСинхронизируемое.Области[ИмяСдвинутойЯчейкСинхронизируемой];
						ОбластьСдвинутойЯчейкиСинхронизируемой.Имя = НовоеИмяСдвинутойЯчейкиСинхронизируемой;
						
						Если НомерГрафы = 91 Тогда
							ОбластьЯчейкиУдалитьСтроку = ТекТабличноеПолеСинхронизируемое.Область(ОбластьСдвинутойЯчейкиСинхронизируемой.Верх, 1, ОбластьСдвинутойЯчейкиСинхронизируемой.Верх, 1);
							ОбластьЯчейкиУдалитьСтроку.Имя = "УдалитьСтроку" + НовоеИмяСдвинутойЯчейкиСинхронизируемой;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
				
				Для НомерГрафы = 1 По 30 Цикл
					
					КолонкаИмяСинхронизируемое = ИмяГруппыСинхронизируемой3 + Формат(НомерГрафы, "ЧЦ=2; ЧВН=");
					
					Если СтруктураГруппыСинхронизируемой3[0].Свойство(КолонкаИмяСинхронизируемое) Тогда
						
						ИмяСдвинутойЯчейкСинхронизируемой = КолонкаИмяСинхронизируемое + "_" + НСтр;
						НовоеИмяСдвинутойЯчейкиСинхронизируемой = КолонкаИмяСинхронизируемое + "_" + (НСтр - 1);
						
						ОбластьСдвинутойЯчейкиСинхронизируемой     = ТекТабличноеПолеСинхронизируемое.Области[ИмяСдвинутойЯчейкСинхронизируемой];
						ОбластьСдвинутойЯчейкиСинхронизируемой.Имя = НовоеИмяСдвинутойЯчейкиСинхронизируемой;
						
						Если НомерГрафы = 1 Тогда
							ОбластьЯчейкиУдалитьСтроку = ТекТабличноеПоле.Область(ОбластьСдвинутойЯчейки.Верх, 1, ОбластьСдвинутойЯчейки.Верх, 1);
							ОбластьЯчейкиУдалитьСтроку.Имя = "УдалитьСтроку" + НовоеИмяСдвинутойЯчейки;
						КонецЕсли;
						
					КонецЕсли;
				КонецЦикла;
				
			КонецЦикла;
		КонецЕсли;
		
		// Обновляем структуру многострочного раздела.
		СтруктураГруппыСинхронизируемой3.Удалить(НомерСтрокиТаблицыСинхронизируемый);
		
	Иначе
		// Строка не удаляется в форме табличного документа,
		// должен осуществляться сдвиг строк.
		
		// Обновляем структуру многострочного раздела
		// методом удаления выбранной строки и добавления пустой строки.
		СтруктураГруппыСинхронизируемой3.Удалить(НомерСтрокиТаблицыСинхронизируемый);
		
		ДобавляемаяСтрокаСинхронизируемая = СтруктураГруппыСинхронизируемой3.Добавить();
		
		// Обновляем порядковые номера строк, выводимых в табличный документ.
		Для Каждого СтрокаТаблицыСинхронизируемой Из СтруктураГруппыСинхронизируемой3 Цикл
			
			НомерСтрокиВТаблицеСинхронизируемой = СтруктураГруппыСинхронизируемой3.Индекс(СтрокаТаблицыСинхронизируемой);
			НомерСтрокиВФормеТаблицыСинхронизируемой = Формат(НомерСтрокиВТаблицеСинхронизируемой + 1, "ЧГ=0");
			
			Для НомерГрафы = 91 По 94 Цикл
				КолонкаТаблицыИмяСинхронизируемое = ИмяГруппыСинхронизируемой3 + Формат(НомерГрафы, "ЧЦ=2; ЧВН=");
				
				Если СтруктураГруппыСинхронизируемой3[0].Свойство(КолонкаТаблицыИмяСинхронизируемое) Тогда
					
					ИмяЯчейкиСинхронизируемой3                = КолонкаТаблицыИмяСинхронизируемое + "_" + НомерСтрокиВФормеТаблицыСинхронизируемой;
					ОбластьЯчейкиТаблицыСинхронизируемой     = ТекТабличноеПолеСинхронизируемое.Области[ИмяЯчейкиСинхронизируемой3];
					
				КонецЕсли;
			КонецЦикла;
			
			Для НомерГрафы = 1 По 30 Цикл
				КолонкаТаблицыИмяСинхронизируемое = ИмяГруппыСинхронизируемой3 + Формат(НомерГрафы, "ЧЦ=2; ЧВН=");
				
				Если СтруктураГруппыСинхронизируемой3[0].Свойство(КолонкаТаблицыИмяСинхронизируемое) Тогда
					
					ИмяЯчейкиСинхронизируемой3                = КолонкаТаблицыИмяСинхронизируемое + "_" + НомерСтрокиВФормеТаблицыСинхронизируемой;
					ОбластьЯчейкиТаблицыСинхронизируемой     = ТекТабличноеПолеСинхронизируемое.Области[ИмяЯчейкиСинхронизируемой3];
					
				КонецЕсли;
			КонецЦикла;
			
		КонецЦикла;
		
		// Обновляем экранную форму табличного документа.
		#Если НаКлиенте Тогда
			Форма.ВывестиРазделВТабличныйДокументНаКлиенте(ИмяГруппыСинхронизируемой3, СтруктураГруппыСинхронизируемой3);
		#Иначе
			Форма.ВывестиРазделВТабличныйДокументНаСервере(ИмяГруппыСинхронизируемой3, СтруктураГруппыСинхронизируемой3);
		#КонецЕсли
		
	КонецЕсли;
	
	Форма.Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Функция ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаКлиенте(ИмяЛиста = Неопределено) Экспорт
	
	ИдГрупп = Новый Структура;
	
	Возврат ОпределитьИдМногострочногоРазделаПоАктивнойСтранице(ЭтаФорма, ИмяЛиста, ИмяЛиста, ИдГрупп);
	
КонецФункции

&НаСервере
Функция ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ИмяЛиста = Неопределено) Экспорт
	
	ИдГрупп = Новый Структура;
	
	Возврат ОпределитьИдМногострочногоРазделаПоАктивнойСтранице(ЭтаФорма, ИмяЛиста, ИмяЛиста, ИдГрупп);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ОпределитьИдМногострочногоРазделаПоАктивнойСтранице(Форма, ИмяЛиста = Неопределено, ТекущаяСтраница = Неопределено, ИдГрупп = Неопределено)
	
	Перем ИмяГруппы;
	
	Если ИмяЛиста = Неопределено Тогда
		ИмяТекущейСтраницыПанели = ТекущаяСтраница.Имя;
	Иначе
		ИмяТекущейСтраницыПанели = ИмяЛиста;
	КонецЕсли;
	
	Если ИмяТекущейСтраницыПанели = "ФормаОтчета" Тогда
		
		ИмяГруппы = РазделТекущейОбласти(Форма, Форма.Элементы.ПолеТабличногоДокументаФормаОтчета.ТекущаяОбласть);
		
	КонецЕсли;
	
	Возврат ИмяГруппы;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция РазделТекущейОбласти(Форма, ТекущаяОбласть, ДлИмениОбласти = 13) Экспорт

	Если ТекущаяОбласть = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ИмяТекущейОбласти = СтрЗаменить(ТекущаяОбласть.Имя, "ДобавитьСтрокуЗначок", "ДобавитьСтроку");
	
	Если ИмяТекущейОбласти = "ДобавитьСтроку1" Тогда
		Возврат Форма.СтруктураРеквизитовФормы.мИдГруппы1;
	ИначеЕсли ИмяТекущейОбласти = "ДобавитьСтроку2" Тогда
		Возврат Форма.СтруктураРеквизитовФормы.мИдГруппы2;
	ИначеЕсли ИмяТекущейОбласти = "ДобавитьСтроку3" Тогда
		Возврат Форма.СтруктураРеквизитовФормы.мИдГруппы3;
	ИначеЕсли ИмяТекущейОбласти = "ДобавитьСтроку4" Тогда
		Возврат Форма.СтруктураРеквизитовФормы.мИдГруппы4;
	ИначеЕсли СтрНайти(ИмяТекущейОбласти, "УдалитьСтроку") > 0 Тогда
		ИмяТекущейОбласти = СтрЗаменить(ИмяТекущейОбласти, "УдалитьСтроку", "");
	КонецЕсли;

	ИмяАктивногоРаздела = Лев(ИмяТекущейОбласти, ДлИмениОбласти);
	
	Для Каждого ЭлементСтруктуры Из Форма.мСтруктураМногострочныхРазделов Цикл
		ИмяГруппы = ЭлементСтруктуры.Ключ;
		СтруктураГруппы = Форма[ЭлементСтруктуры.Значение];

		Если СтруктураГруппы[0].Свойство(ИмяАктивногоРаздела) Тогда
			Возврат ИмяГруппы;
		КонецЕсли;
	КонецЦикла;

	Возврат Неопределено;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьСтруктуруМногострочногоРаздела(Форма, ИмяГруппы) Экспорт
	
	Перем СтруктураГруппы;
	
	Форма.мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);
	
	СтруктураГруппы = Форма[СтруктураГруппы];
	
	ТекТабличноеПолеИмя = "ПолеТабличногоДокументаФормаОтчета";
	
	ТекТабличноеПоле = Форма[ТекТабличноеПолеИмя];
	
	Для НСтр = 1 По СтруктураГруппы.Количество() Цикл
		ТекСтрокаТаблицы = СтруктураГруппы[НСтр - 1];
		НСтрСтр = Формат(НСтр, "ЧГ=0");
		
		Для НомерГрафы = 91 По 94 Цикл
			
			ИмяКолонки = ИмяГруппы + Формат(НомерГрафы, "ЧЦ=2; ЧВН=");
			
			Если СтруктураГруппы[0].Свойство(ИмяКолонки) Тогда
				
				ИмяЯчейки     = ИмяКолонки + "_" + НСтрСтр;
				ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяЯчейки];
				
				Если ОбластьЯчейки.СодержитЗначение = Истина Тогда
					ЗначениеЯчейки = ОбластьЯчейки.Значение;
				Иначе
					ЗначениеЯчейки = ОбластьЯчейки.Текст;
				КонецЕсли;
				
				ТекСтрокаТаблицы[ИмяКолонки] = ЗначениеЯчейки;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Для НомерГрафы = 1 По 30 Цикл
			
			ИмяКолонки = ИмяГруппы + Формат(НомерГрафы, "ЧЦ=2; ЧВН=");
			
			Если СтруктураГруппы[0].Свойство(ИмяКолонки) Тогда
				
				ИмяЯчейки     = ИмяКолонки + "_" + НСтрСтр;
				ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяЯчейки];
				
				Если ОбластьЯчейки.СодержитЗначение = Истина Тогда
					ЗначениеЯчейки = ОбластьЯчейки.Значение;
				Иначе
					ЗначениеЯчейки = ОбластьЯчейки.Текст;
				КонецЕсли;
				
				ТекСтрокаТаблицы[ИмяКолонки] = ЗначениеЯчейки;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиРазделВТабличныйДокументНаСервере(ИмяГруппы, СтруктураГруппы) Экспорт
	
	ВывестиРазделВТабличныйДокумент(ЭтаФорма, ИмяГруппы, СтруктураГруппы);
	
КонецПроцедуры

&НаКлиенте
Процедура ВывестиРазделВТабличныйДокументНаКлиенте(ИмяГруппы, СтруктураГруппы) Экспорт
	
	ВывестиРазделВТабличныйДокумент(ЭтаФорма, ИмяГруппы, СтруктураГруппы);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ВывестиРазделВТабличныйДокумент(Форма, ИмяГруппы, СтруктураГруппы)
	
	Перем ИсходноеКоличествоСтрокГруппы;
	
	// Определим исходное колво строк многострочного раздела,
	// соответствующее бумажной форме отчета.
	Форма.мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);
	
	// реальное кол-во строк (колво заполненных строк)
	ТекущееКоличествоСтрокГруппы = СтруктураГруппы.Количество();
	
	ТекТабличноеПолеИмя = "ПолеТабличногоДокументаФормаОтчета";
	
	ТекТабличноеПоле = Форма[ТекТабличноеПолеИмя];
	
	// При восстановлении сохраненных данных отчета сравниваем исходное кол-во
	// отображаемых в форме строк многострочного раздела с реальным количеством
	// созданных строк в сохраненном отчете.
	Если ТекущееКоличествоСтрокГруппы > ИсходноеКоличествоСтрокГруппы Тогда
		
		РегламентированнаяОтчетностьКлиентСервер.ДобавитьНеобходимоеКоличествоДопСтрок(Форма, ТекТабличноеПоле, ТекТабличноеПолеИмя, ИсходноеКоличествоСтрокГруппы, ТекущееКоличествоСтрокГруппы, ИмяГруппы, СтруктураГруппы);
		
		Форма[ТекТабличноеПолеИмя] = ТекТабличноеПоле;
		
	КонецЕсли;
	
	ТекТабличноеПоле = Форма[ТекТабличноеПолеИмя];
	
	// Выводим значения строк.
	Для Каждого СтрокаТаблицы Из СтруктураГруппы Цикл
		
		Для НомерГрафы = 91 По 94 Цикл
			
			КолонкаТаблицыИмя = ИмяГруппы + Формат(НомерГрафы, "ЧЦ=2; ЧВН=");
			
			Если СтруктураГруппы[0].Свойство(КолонкаТаблицыИмя) Тогда
				
				НомерСтрокиВТаблице      = СтруктураГруппы.Индекс(СтрокаТаблицы);
				НомерСтрокиВФормеТаблицы = НомерСтрокиВТаблице + 1;
				ИмяЯчейки                = КолонкаТаблицыИмя + "_" + НомерСтрокиВФормеТаблицы;
				ОбластьЯчейкиТаблицы     = ТекТабличноеПоле.Области[ИмяЯчейки];
				ЗначениеЯчейки           = СтрокаТаблицы[КолонкаТаблицыИмя];
				
				Если ОбластьЯчейкиТаблицы.СодержитЗначение Тогда
					// Задаем значение ячейки.
					ОбластьЯчейкиТаблицы.Значение = ЗначениеЯчейки;
					
				Иначе
					
					ОбластьЯчейкиТаблицы.Текст    = ЗначениеЯчейки;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Для НомерГрафы = 1 По 30 Цикл
			
			КолонкаТаблицыИмя = ИмяГруппы + Формат(НомерГрафы, "ЧЦ=2; ЧВН=");
			
			Если СтруктураГруппы[0].Свойство(КолонкаТаблицыИмя) Тогда
				
				НомерСтрокиВТаблице      = СтруктураГруппы.Индекс(СтрокаТаблицы);
				НомерСтрокиВФормеТаблицы = НомерСтрокиВТаблице + 1;
				ИмяЯчейки                = КолонкаТаблицыИмя + "_" + НомерСтрокиВФормеТаблицы;
				ОбластьЯчейкиТаблицы     = ТекТабличноеПоле.Области[ИмяЯчейки];
				ЗначениеЯчейки           = СтрокаТаблицы[КолонкаТаблицыИмя];
				
				Если ОбластьЯчейкиТаблицы.СодержитЗначение Тогда
					// Задаем значение ячейки.
					ОбластьЯчейкиТаблицы.Значение = ЗначениеЯчейки;
					
				Иначе
					
					ОбластьЯчейкиТаблицы.Текст    = ЗначениеЯчейки;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если СтрНайти(Заголовок, СтруктураРеквизитовФормы.СтрПериодОтчета) = 0 Тогда
		Заголовок = Заголовок + " за " + СтруктураРеквизитовФормы.СтрПериодОтчета;
	КонецЕсли;
	
	ОргСтр = " (" + СтруктураРеквизитовФормы.НаимОрганизации + ")";
	Если СтрНайти(Заголовок, ОргСтр) = 0 Тогда
		Заголовок = Заголовок + ОргСтр;
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("ВыполнитьПроверкуПередОткрытием", 0.1, Истина);

КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПроверкуПередОткрытием()
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПриОткрытииЗавершение", ЭтотОбъект);
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередОткрытиемФормыРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытииЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Модифицированность = Ложь;
		Закрыть();
		Возврат;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	РегламентированнаяОтчетностьКлиент.ПередЗакрытиемРегламентированногоОтчета(ЭтаФорма, Отказ, СтандартнаяОбработка, ЗавершениеРаботы, ТекстПредупреждения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ЗавершениеРаботы Тогда
				
		Возврат;
		
	КонецЕсли;
	
	ПриЗакрытииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПриЗакрытииНаСервере()
	
	РегламентированнаяОтчетность.ПриЗакрытииРегламентированногоОтчета(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолеТабличногоДокументаФормаОтчетаВыбор(Элемент, Область, СтандартнаяОбработка)
	
	Если Область.Имя = "ОргАдрес" Тогда
		РегламентированнаяОтчетностьКлиент.ОбработкаАдресаВСтатистическомОтчете(ЭтаФорма, Область, СтандартнаяОбработка);
	ИначеЕсли СтрЧислоВхождений(Область.Имя, "ДобавитьСтроку") > 0 Тогда
		СтандартнаяОбработка = Ложь;
		ДобавитьСтроку("");
		Обл = ПолеТабличногоДокументаФормаОтчета.Область(Область.Имя);
		НоваяОбласть = ПолеТабличногоДокументаФормаОтчета.Область(Обл.Верх - 1, 2, Обл.Верх - 1, 2);
		АктивизироватьЯчейку(Новый Структура("ИмяЯчейки", НоваяОбласть.Имя));
	ИначеЕсли СтрЧислоВхождений(Область.Имя, "УдалитьСтроку") > 0 Тогда
		УдалитьСтроку("");
	Иначе
		
		ПараметрВводаПоля = РегламентированнаяОтчетностьКлиентСервер.НайтиСвойстваПоказателя(ЭтаФорма, Лев(Область.Имя, 13));
		
		// Создание динамического списка выбора.
		Если ПараметрВводаПоля <> Неопределено И ПараметрВводаПоля.ТаблицаЗначений <> Неопределено Тогда
			
			КолонкаПоиска = "Код";
			
			КодПоказателя = ПараметрВводаПоля.Показатель;
			КопироватьДанныеФормы(ПараметрВводаПоля.ТаблицаЗначений, ТЗВыбора);
			ВвестиПоказатель(Элемент, Область, КодПоказателя, Ложь, ПараметрВводаПоля.ТекстПриВыборе, ТЗВыбора, СтандартнаяОбработка, КолонкаПоиска);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуКонтактнойИнформацииЗавершение(Результат, Параметры) Экспорт
	
	РегламентированнаяОтчетностьКлиент.ОбновитьАдресВТабличномДокументеСтатистическойОтчетности(Результат, Параметры.Область, СтруктураРеквизитовФормы);
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолеТабличногоДокументаФормаОтчетаПриИзмененииСодержимогоОбласти(Элемент, Область)
	
	Если Область.Имя = "ДатаСоставленияОтчета" Тогда 
		ДатаПодписи = Область.Значение;
		ЗаполнитьСведенияОбОрганизацииНаКлиенте(Истина);
		Модифицированность = Истина;
		Возврат;
	ИначеЕсли Область.Имя = "НомерКорректировки" Тогда 
		Если Область.Значение = 0 Тогда 
			СтруктураРеквизитовФормы.ВидДокумента = 0;
			НомерКорректировки = 0;
		Иначе 
			СтруктураРеквизитовФормы.ВидДокумента = 1;
			НомерКорректировки = Область.Значение;
		КонецЕсли;
		Модифицированность = Истина;
		Возврат;
	КонецЕсли;
	
	Если Область.СодержитЗначение И Область.ТипЗначения.СодержитТип(Тип("Число")) Тогда
		Если Область.Значение = 0 И Область.ТипЗначения.КвалификаторыЧисла.РазрядностьДробнойЧасти = 2 Тогда
			
			ФорматПредставленияНуля = РегламентированнаяОтчетностьКлиентСервер.ПолучитьПредставлениеНуляИзСтрокиФормата(Область.Формат);
			
			ОтображениеНуля = СокрЛП(Формат(0, РегламентированнаяОтчетностьКлиентСервер.ЗаменитьПредставлениеНуляВСтрокеФормата(Область.Формат, "ЧН=")));
			Если ПустаяСтрока(ОтображениеНуля) Тогда
				ОтображениеНуля = "0.00";
			КонецЕсли;
			ТипСтрокиЗаполнения = Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(СтрДлина(ОтображениеНуля), ДопустимаяДлина.Фиксированная));
			СтрокаЗаполнения = ТипСтрокиЗаполнения.ПривестиЗначение();
			
			Список = Новый СписокЗначений;
			Список.Добавить("ЧН=' '", "  <Пустое значение>    " + СтрокаЗаполнения);
			Список.Добавить("ЧН=" + ОтображениеНуля, "  Отображать как """ + ОтображениеНуля + """  ");
			
			НайденнаяСтрока = Список.НайтиПоЗначению(ФорматПредставленияНуля);
			
			ДополнительныеПараметры = Новый Структура("Область", Область);
			ОписаниеОповещения = Новый ОписаниеОповещения("ПолеТабличногоДокументаФормаОтчетаПриИзмененииСодержимогоОбластиЗавершение", ЭтотОбъект, ДополнительныеПараметры);
						
			// обход ошибок платформы: в тонком клиенте не работает ПоказатьВыборИзСписка (ПоказатьВыборИзМеню не работает в веб-клиенте 
			// и в событии ПриИзмененииСодержимогоОбласти табличного документа - где мы его и хотим использовать прежде всего)
			# Если ВебКлиент Тогда
			
				Если НайденнаяСтрока = Неопределено Тогда
					ПоказатьВыборИзСписка(ОписаниеОповещения, Список, Элемент);
				Иначе
					ПоказатьВыборИзСписка(ОписаниеОповещения, Список, Элемент, НайденнаяСтрока);
				КонецЕсли;
				
			#Иначе
				
				Список.ПоказатьВыборЭлемента(ОписаниеОповещения, "Выберите значение", Элемент);
					
			#КонецЕсли
			
			Возврат;
				
		КонецЕсли;
	КонецЕсли;
	
	РасчетНаКлиенте("", "");
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолеТабличногоДокументаФормаОтчетаПриИзмененииСодержимогоОбластиЗавершение(СписокЭлемент, ДополнительныеПараметры) Экспорт
	
	Область = ДополнительныеПараметры.Область;
	
	Если СписокЭлемент <> Неопределено  Тогда
		
		Область.Формат = РегламентированнаяОтчетностьКлиентСервер.ЗаменитьПредставлениеНуляВСтрокеФормата(Область.Формат, СписокЭлемент.Значение);
		
	КонецЕсли;
	
	РасчетНаКлиенте("", "");
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура РасчетНаКлиенте(ИмяСтраницыПанели = "", ОбластьИмя = "") Экспорт
	
	Расчет(ЭтаФорма, ИмяСтраницыПанели, ОбластьИмя);
	
КонецПроцедуры

&НаСервере
Процедура РасчетНаСервере(ИмяСтраницыПанели = "", ОбластьИмя = "") Экспорт
	
	Расчет(ЭтаФорма, ИмяСтраницыПанели, ОбластьИмя);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура Расчет(Форма, ИмяТекущейСтраницыПанели = "", ОбластьИмя = "")
	
	Области = Форма.ПолеТабличногоДокументаФормаОтчета.Области;
	
	СтруктураГруппы = Форма.П0000010001;
	
	// Гр. 4 = сумме граф 5 - 30.
	
	Для НомСтр = 1 По СтруктураГруппы.Количество() Цикл
		
		ТекСумма = 0;
		
		Для НомКол = 5 По 13 Цикл
			ТекСумма = ТекСумма + Области["П0000020001"
			+ Формат(НомКол, "ЧЦ=2; ЧВН=; ЧГ=") + "_" + Формат(НомСтр, "ЧГ=")].Значение;
		КонецЦикла;
		
		Для НомКол = 14 По 21 Цикл
			ТекСумма = ТекСумма + Области["П0000030001"
			+ Формат(НомКол, "ЧЦ=2; ЧВН=; ЧГ=") + "_" + Формат(НомСтр, "ЧГ=")].Значение;
		КонецЦикла;
		
		Для НомКол = 22 По 30 Цикл
			ТекСумма = ТекСумма + Области["П0000040001"
			+ Формат(НомКол, "ЧЦ=2; ЧВН=; ЧГ=") + "_" + Формат(НомСтр, "ЧГ=")].Значение;
		КонецЦикла;
		
		Области["П000001000104_" + Формат(НомСтр, "ЧГ=")].Значение = ТекСумма;
		
	КонецЦикла;
	
	// Стр. 9500 = сумме строк по графам 2 - 30.
	
	Для НомКол = 2 По 4 Цикл
		
		ТекСумма = 0;
		
		Для НомСтр = 1 По СтруктураГруппы.Количество() Цикл
			ТекСумма = ТекСумма + Области["П0000010001"
			+ Формат(НомКол, "ЧЦ=2; ЧВН=; ЧГ=") + "_" + Формат(НомСтр, "ЧГ=")].Значение;
		КонецЦикла;
		
		Области["П0000010000" + Формат(НомКол, "ЧЦ=2; ЧВН=; ЧГ=")].Значение = ТекСумма;
		
	КонецЦикла;
	
	Для НомКол = 5 По 13 Цикл
		
		ТекСумма = 0;
		
		Для НомСтр = 1 По СтруктураГруппы.Количество() Цикл
			ТекСумма = ТекСумма + Области["П0000020001"
			+ Формат(НомКол, "ЧЦ=2; ЧВН=; ЧГ=") + "_" + Формат(НомСтр, "ЧГ=")].Значение;
		КонецЦикла;
		
		Области["П0000020000" + Формат(НомКол, "ЧЦ=2; ЧВН=; ЧГ=")].Значение = ТекСумма;
		
	КонецЦикла;
	
	Для НомКол = 14 По 21 Цикл
		
		ТекСумма = 0;
		
		Для НомСтр = 1 По СтруктураГруппы.Количество() Цикл
			ТекСумма = ТекСумма + Области["П0000030001"
			+ Формат(НомКол, "ЧЦ=2; ЧВН=; ЧГ=") + "_" + Формат(НомСтр, "ЧГ=")].Значение;
		КонецЦикла;
		
		Области["П0000030000" + Формат(НомКол, "ЧЦ=2; ЧВН=; ЧГ=")].Значение = ТекСумма;
		
	КонецЦикла;
	
	Для НомКол = 22 По 30 Цикл
		
		ТекСумма = 0;
		
		Для НомСтр = 1 По СтруктураГруппы.Количество() Цикл
			ТекСумма = ТекСумма + Области["П0000040001"
			+ Формат(НомКол, "ЧЦ=2; ЧВН=; ЧГ=") + "_" + Формат(НомСтр, "ЧГ=")].Значение;
		КонецЦикла;
		
		Области["П0000040000" + Формат(НомКол, "ЧЦ=2; ЧВН=; ЧГ=")].Значение = ТекСумма;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура Обновить(Команда)
	
	СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация = Истина;
	ЗаполнитьСведенияОбОрганизацииНаКлиенте();
	СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуНастроек(Команда)
	
	ОткрытьФормуВыбораСтраниц("ВыбратьДляНастройки");
	
КонецПроцедуры

// Открывает форму документа ФормаНастройкиОтчета с целью выбора
// выводимых на печать листов отчета.
//
// Параметры:
//  ВариантВыбора - строка, назначение выбора страниц.
//
&НаКлиенте
Процедура ОткрытьФормуВыбораСтраниц(ВариантВыбора)
	
	мПараметры = Новый Структура;
	
	мПараметры.Вставить("ОтключитьАвтоРасчет", Ложь);
	мПараметры.Вставить("Автосохранение", Ложь);
	мПараметры.Вставить("СчетчикСтраниц", Ложь);
	мПараметры.Вставить("ПараметрыОтображенияСумм", Ложь);
	мПараметры.Вставить("ПроверкаСоотношений", Ложь);
	мПараметры.Вставить("ИмеетсяРеквизитДеревоВыбранныхСтраниц", Ложь);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("мАвтоВыборКодов", СтруктураРеквизитовФормы.мАвтоВыборКодов);
	ПараметрыФормы.Вставить("мПараметры", мПараметры);
	
	ФормаНастройкиОтчета = РегламентированнаяОтчетностьКлиент.ПолучитьОбщуюФормуПоИмени("НастройкиОтчета", ПараметрыФормы, ЭтаФорма);
	ФормаНастройкиОтчета.Элементы.Страницы.ПодчиненныеЭлементы.СвойстваРазделов.Видимость = Ложь;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьФормуВыбораСтраницЗавершение", ЭтотОбъект);
	ФормаНастройкиОтчета.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
	ФормаНастройкиОтчета.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	ФормаНастройкиОтчета.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораСтраницЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьОтчет(Команда)
	
	ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Внимание! Будут очищены все показатели отчета.%1Продолжить операцию?'"), Символы.ПС);
	ОписаниеОповещения = Новый ОписаниеОповещения("ОчиститьОтчетЗавершение", ЭтотОбъект);	
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьОтчетЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Нет Тогда       
		Возврат;       
	Иначе       
		Очистить();       
	КонецЕсли;
	
КонецПроцедуры

// Процедура очищает содержимое редактируемых и вычисляемых
// ячеек табличного документа.
//
&НаКлиенте
Процедура Очистить() Экспорт
	
	ОчиститьТабличноеПолеНаСервере();
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьТабличноеПолеНаСервере()
	
	// Список ячеек, которые очищать не нужно.
	Перем СписокПоказателейНеПодлежащихОчистке;
	
	ВыбТабличноеПоле = ПолеТабличногоДокументаФормаОтчета;
	
	СписокПоказателейНеПодлежащихОчистке = Новый СписокЗначений;
	СписокПоказателейНеПодлежащихОчистке.Добавить(ВыбТабличноеПоле.Области["ПериодОтчета"].Значение,             "ПериодОтчета");
	СписокПоказателейНеПодлежащихОчистке.Добавить(ВыбТабличноеПоле.Области["ДатаСоставленияОтчета"].Значение,    "ДатаСоставленияОтчета");
	СписокПоказателейНеПодлежащихОчистке.Добавить(ВыбТабличноеПоле.Области["ОргНазв"].Значение,                  "ОргНазв");
	СписокПоказателейНеПодлежащихОчистке.Добавить(ВыбТабличноеПоле.Области["ОргАдрес"].Значение,                 "ОргАдрес");
	СписокПоказателейНеПодлежащихОчистке.Добавить(ВыбТабличноеПоле.Области["ОргКодОКПО"].Значение,               "ОргКодОКПО");
	СписокПоказателейНеПодлежащихОчистке.Добавить(ВыбТабличноеПоле.Области["ОргКодНазв"].Значение,               "ОргКодНазв");
	СписокПоказателейНеПодлежащихОчистке.Добавить(ВыбТабличноеПоле.Области["ОргКодНазв1"].Значение,              "ОргКодНазв1");
	СписокПоказателейНеПодлежащихОчистке.Добавить(ВыбТабличноеПоле.Области["ОргКодЗнач"].Значение,               "ОргКодЗнач");
	СписокПоказателейНеПодлежащихОчистке.Добавить(ВыбТабличноеПоле.Области["ОргКодЗнач1"].Значение,              "ОргКодЗнач1");
	СписокПоказателейНеПодлежащихОчистке.Добавить(ВыбТабличноеПоле.Области["ОргДолжностьИсп"].Значение,          "ОргДолжностьИсп");
	СписокПоказателейНеПодлежащихОчистке.Добавить(ВыбТабличноеПоле.Области["ОргТелефонИсп"].Значение,            "ОргТелефонИсп");
	СписокПоказателейНеПодлежащихОчистке.Добавить(ВыбТабличноеПоле.Области["ОргИсполнитель"].Значение,           "ОргИсполнитель");
	СписокПоказателейНеПодлежащихОчистке.Добавить(ВыбТабличноеПоле.Области["ОргАдресЭлектроннойПочты"].Значение, "ОргАдресЭлектроннойПочты");
	СписокПоказателейНеПодлежащихОчистке.Добавить(ВыбТабличноеПоле.Области["НомерКорректировки"].Значение,       "НомерКорректировки");
	
	ВыбТабличноеПоле.Очистить();
	ВыбТабличноеПоле.Вывести(Отчеты[Сред(Лев(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, ".Форма.") - 1), 7)].ПолучитьМакет("ФормаОтчета2013Кв1_ФормаОтчета"));
	
	ПолеТабличногоДокументаФормаОтчета = ВыбТабличноеПоле;
	
	РегламентированнаяОтчетность.НачальныеОперацииСМногострочнымиБлоками(ЭтаФорма);
	
	Для каждого ЭлементСписка Из СписокПоказателейНеПодлежащихОчистке Цикл
		
		ВыбТабличноеПоле.Области[ЭлементСписка.Представление].Значение = ЭлементСписка.Значение;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура АктивизироватьЯчейку(Ячейка) Экспорт
	
	ИмяПоляТабличногоДокумента = "ПолеТабличногоДокументаФормаОтчета";
	
	НайденнаяОбласть = ЭтаФорма[ИмяПоляТабличногоДокумента].Области.Найти(Ячейка.ИмяЯчейки);
	
	Если НЕ НайденнаяОбласть = Неопределено Тогда
		
		Элементы[ИмяПоляТабличногоДокумента].ТекущаяОбласть = НайденнаяОбласть;
		
	ИначеЕсли Ячейка.Свойство("СтрокаПП") И Ячейка.СтрокаПП <> Неопределено И ЗначениеЗаполнено(Ячейка.СтрокаПП) Тогда
		
		НайденнаяОбласть = ЭтаФорма[ИмяПоляТабличногоДокумента].Области.Найти(Ячейка.ИмяЯчейки + Ячейка.СтрокаПП);
		
		Если НЕ НайденнаяОбласть = Неопределено Тогда
			
			Элементы[ИмяПоляТабличногоДокумента].ТекущаяОбласть = НайденнаяОбласть;
			
		Иначе
			
			НайденнаяОбласть = ЭтаФорма[ИмяПоляТабличногоДокумента].Области.Найти(Ячейка.ИмяЯчейки + "_" + Ячейка.СтрокаПП);
			
			Если НЕ НайденнаяОбласть = Неопределено Тогда
				
				Элементы[ИмяПоляТабличногоДокумента].ТекущаяОбласть = НайденнаяОбласть;
				
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		НайденнаяОбласть = ЭтаФорма[ИмяПоляТабличногоДокумента].Области.Найти(Ячейка.ИмяЯчейки + "1");
		
		Если НЕ НайденнаяОбласть = Неопределено Тогда
			
			Элементы[ИмяПоляТабличногоДокумента].ТекущаяОбласть = НайденнаяОбласть;
			
		Иначе
			
			НайденнаяОбласть = ЭтаФорма[ИмяПоляТабличногоДокумента].Области.Найти(Ячейка.ИмяЯчейки + "_1");
			
			Если НЕ НайденнаяОбласть = Неопределено Тогда
				
				Элементы[ИмяПоляТабличногоДокумента].ТекущаяОбласть = НайденнаяОбласть;
				
			Иначе
				
				Элементы[ИмяПоляТабличногоДокумента].ТекущаяОбласть = ЭтаФорма[ИмяПоляТабличногоДокумента].Область(Ячейка.ИмяЯчейки);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьБланк(Команда)
	
	Отказ = Ложь;
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("Команда", Команда);
	ОписаниеОповещения = Новый ОписаниеОповещения("ПоказатьБланкЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередПечатьюРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьБланкЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;

	Команда = ДополнительныеПараметры.Команда;
		
	Если Команда <> Неопределено Тогда
		Печать(Команда.Имя);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Печать(ВидПечати, НеИзФормыОтчета = Ложь) Экспорт
	
	Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1. Формируется печатная форма...'"), ЭтаФорма.Заголовок), , , БиблиотекаКартинок.Печать);
	
	Если НЕ ПечатьНаСервере(ВидПечати) Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ОткрытьФормуПредварительногоПросмотра(ЭтаФорма, ВидПечати, Неопределено, СтруктураРеквизитовФормы.СписокПечатаемыхЛистов);
	
КонецПроцедуры

&НаСервере
Функция ПечатьНаСервере(ВидПечати)
	
	Если НЕ РегламентированнаяОтчетность.ПринтерДоступен() Тогда
		
		Сообщение = Новый СообщениеПользователю;
		
		Сообщение.Текст = НСтр("ru='Перед формированием печатных форм необходимо определить в системе принтер и задать его в качестве используемого по умолчанию!'");
		
		Сообщение.Сообщить();
		
		Возврат Ложь;
		
	КонецЕсли;
	
	ТабличныйДокумент = ЭтаФорма["ПолеТабличногоДокументаФормаОтчета"];
	
	СтруктураРеквизитовФормы.мПечатныеФормы.Очистить();
	
	ОбщиеРеквизитыРазделов = Новый Структура;
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("НаименованиеЛиста",  "Форма 11-ТЭР");
	СтруктураПараметров.Вставить("ОриентацияЛиста",    "Ландшафт");
	СтруктураПараметров.Вставить("ИмяСтраницы",        "11ТЭР");
	Структурапараметров.Вставить("ИмяОбластиТаблПоля", "ПолеТабличногоДокументаФормаОтчета");
	СтруктураПараметров.Вставить("ВидПечати",          ВидПечати);
	
	ПечатнаяФорма = РегламентированнаяОтчетность.НоваяСтраница();
	ПечатнаяФорма.Вывести(ТабличныйДокумент.ПолучитьОбласть("ОсновнаяЧасть_а"));
	ПечатнаяФорма.Вывести(ТабличныйДокумент.ПолучитьОбласть("ОсновнаяЧасть_б"));
	СтруктураРеквизитовФормы.мПечатныеФормы.Добавить(ПечатнаяФорма, "Форма 11-ТЭР");
	
	ПечатнаяФорма = РегламентированнаяОтчетность.НоваяСтраница();
	ПечатнаяФорма.Вывести(ТабличныйДокумент.ПолучитьОбласть("ОсновнаяЧасть1а"));
	ПечатнаяФорма.Вывести(ТабличныйДокумент.ПолучитьОбласть("ОсновнаяЧасть1б"));
	ВерхМногострочнойЧасти = ТабличныйДокумент.Области["ОсновнаяЧасть1б"].Низ + 1;
	НизМногострочнойЧасти = ТабличныйДокумент.Области["ДобавлениеСтроки1"].Верх - 1;
	ТекущийВерх = ВерхМногострочнойЧасти;
	Пока ТекущийВерх <= НизМногострочнойЧасти Цикл
		ТекущаяОбластьМногострочнойЧасти = ПолеТабличногоДокументаФормаОтчета.ПолучитьОбласть(ТекущийВерх,,ТекущийВерх,);
		МассивПроверкиВывода = Новый Массив;
		МассивПроверкиВывода.Добавить(ТекущаяОбластьМногострочнойЧасти);
		МассивПроверкиВывода.Добавить(ТабличныйДокумент.ПолучитьОбласть("Подвал1"));
		
		Если ПечатнаяФорма.ПроверитьВывод(МассивПроверкиВывода) Тогда
			ПечатнаяФорма.Вывести(ТекущаяОбластьМногострочнойЧасти);
		Иначе
			СтруктураРеквизитовФормы.мПечатныеФормы.Добавить(ПечатнаяФорма, "Форма 11-ТЭР");
			ПечатнаяФорма = РегламентированнаяОтчетность.НоваяСтраница();
			ПечатнаяФорма.Вывести(ТабличныйДокумент.ПолучитьОбласть("ПустаяСтрока"));
			ПечатнаяФорма.Вывести(ТабличныйДокумент.ПолучитьОбласть("ОсновнаяЧасть1б"));
			ПечатнаяФорма.Вывести(ТекущаяОбластьМногострочнойЧасти);
		КонецЕсли;
		
		ТекущийВерх = ТекущийВерх + 1;
	КонецЦикла;
	ПечатнаяФорма.Вывести(ТабличныйДокумент.ПолучитьОбласть("Подвал1"));
	СтруктураРеквизитовФормы.мПечатныеФормы.Добавить(ПечатнаяФорма, "Форма 11-ТЭР");
	
	ПечатнаяФорма = РегламентированнаяОтчетность.НоваяСтраница();
	ПечатнаяФорма.Вывести(ТабличныйДокумент.ПолучитьОбласть("ОсновнаяЧасть2"));
	ВерхМногострочнойЧасти = ТабличныйДокумент.Области["ОсновнаяЧасть2"].Низ + 1;
	НизМногострочнойЧасти = ТабличныйДокумент.Области["ДобавлениеСтроки2"].Верх - 1;
	ТекущийВерх = ВерхМногострочнойЧасти;
	Пока ТекущийВерх <= НизМногострочнойЧасти Цикл
		ТекущаяОбластьМногострочнойЧасти = ПолеТабличногоДокументаФормаОтчета.ПолучитьОбласть(ТекущийВерх,,ТекущийВерх,);
		МассивПроверкиВывода = Новый Массив;
		МассивПроверкиВывода.Добавить(ТекущаяОбластьМногострочнойЧасти);
		МассивПроверкиВывода.Добавить(ТабличныйДокумент.ПолучитьОбласть("Подвал2"));
		
		Если ПечатнаяФорма.ПроверитьВывод(МассивПроверкиВывода) Тогда
			ПечатнаяФорма.Вывести(ТекущаяОбластьМногострочнойЧасти);
		Иначе
			СтруктураРеквизитовФормы.мПечатныеФормы.Добавить(ПечатнаяФорма, "Форма 11-ТЭР");
			ПечатнаяФорма = РегламентированнаяОтчетность.НоваяСтраница();
			ПечатнаяФорма.Вывести(ТабличныйДокумент.ПолучитьОбласть("ОсновнаяЧасть2"));
			ПечатнаяФорма.Вывести(ТекущаяОбластьМногострочнойЧасти);
		КонецЕсли;
		
		ТекущийВерх = ТекущийВерх + 1;
	КонецЦикла;
	ПечатнаяФорма.Вывести(ТабличныйДокумент.ПолучитьОбласть("Подвал2"));
	СтруктураРеквизитовФормы.мПечатныеФормы.Добавить(ПечатнаяФорма, "Форма 11-ТЭР");
	
	ПечатнаяФорма = РегламентированнаяОтчетность.НоваяСтраница();
	ПечатнаяФорма.Вывести(ТабличныйДокумент.ПолучитьОбласть("ОсновнаяЧасть3"));
	ВерхМногострочнойЧасти = ТабличныйДокумент.Области["ОсновнаяЧасть3"].Низ + 1;
	НизМногострочнойЧасти = ТабличныйДокумент.Области["ДобавлениеСтроки3"].Верх - 1;
	ТекущийВерх = ВерхМногострочнойЧасти;
	Пока ТекущийВерх <= НизМногострочнойЧасти Цикл
		ТекущаяОбластьМногострочнойЧасти = ПолеТабличногоДокументаФормаОтчета.ПолучитьОбласть(ТекущийВерх,,ТекущийВерх,);
		МассивПроверкиВывода = Новый Массив;
		МассивПроверкиВывода.Добавить(ТекущаяОбластьМногострочнойЧасти);
		МассивПроверкиВывода.Добавить(ТабличныйДокумент.ПолучитьОбласть("Подвал3"));
		
		Если ПечатнаяФорма.ПроверитьВывод(МассивПроверкиВывода) Тогда
			ПечатнаяФорма.Вывести(ТекущаяОбластьМногострочнойЧасти);
		Иначе
			СтруктураРеквизитовФормы.мПечатныеФормы.Добавить(ПечатнаяФорма, "Форма 11-ТЭР");
			ПечатнаяФорма = РегламентированнаяОтчетность.НоваяСтраница();
			ПечатнаяФорма.Вывести(ТабличныйДокумент.ПолучитьОбласть("ОсновнаяЧасть3"));
			ПечатнаяФорма.Вывести(ТекущаяОбластьМногострочнойЧасти);
		КонецЕсли;
		
		ТекущийВерх = ТекущийВерх + 1;
	КонецЦикла;
	ПечатнаяФорма.Вывести(ТабличныйДокумент.ПолучитьОбласть("Подвал3"));
	СтруктураРеквизитовФормы.мПечатныеФормы.Добавить(ПечатнаяФорма, "Форма 11-ТЭР");
	
	ПечатнаяФорма = РегламентированнаяОтчетность.НоваяСтраница();
	ПечатнаяФорма.Вывести(ТабличныйДокумент.ПолучитьОбласть("ОсновнаяЧасть4"));
	ВерхМногострочнойЧасти = ТабличныйДокумент.Области["ОсновнаяЧасть4"].Низ + 1;
	НизМногострочнойЧасти = ТабличныйДокумент.Области["ДобавлениеСтроки4"].Верх - 1;
	ТекущийВерх = ВерхМногострочнойЧасти;
	Пока ТекущийВерх <= НизМногострочнойЧасти Цикл
		ТекущаяОбластьМногострочнойЧасти = ПолеТабличногоДокументаФормаОтчета.ПолучитьОбласть(ТекущийВерх,,ТекущийВерх,);
		МассивПроверкиВывода = Новый Массив;
		МассивПроверкиВывода.Добавить(ТекущаяОбластьМногострочнойЧасти);
		МассивПроверкиВывода.Добавить(ТабличныйДокумент.ПолучитьОбласть("Подвал4"));
		
		Если ПечатнаяФорма.ПроверитьВывод(МассивПроверкиВывода) Тогда
			ПечатнаяФорма.Вывести(ТекущаяОбластьМногострочнойЧасти);
		Иначе
			СтруктураРеквизитовФормы.мПечатныеФормы.Добавить(ПечатнаяФорма, "Форма 11-ТЭР");
			ПечатнаяФорма = РегламентированнаяОтчетность.НоваяСтраница();
			ПечатнаяФорма.Вывести(ТабличныйДокумент.ПолучитьОбласть("ОсновнаяЧасть4"));
			ПечатнаяФорма.Вывести(ТекущаяОбластьМногострочнойЧасти);
		КонецЕсли;
		
		ТекущийВерх = ТекущийВерх + 1;
	КонецЦикла;
	ПечатнаяФорма.Вывести(ТабличныйДокумент.ПолучитьОбласть("Подвал4"));
	СтруктураРеквизитовФормы.мПечатныеФормы.Добавить(ПечатнаяФорма, "Форма 11-ТЭР");
	
	ПечатнаяФорма = РегламентированнаяОтчетность.НоваяСтраница();
	ПечатнаяФорма.Вывести(ТабличныйДокумент.ПолучитьОбласть("ОсновнаяЧасть5"));
	СтруктураРеквизитовФормы.мПечатныеФормы.Добавить(ПечатнаяФорма, "Форма 11-ТЭР");
	
	Для Каждого ПФ Из СтруктураРеквизитовФормы.мПечатныеФормы Цикл 
		Для Каждого Обл Из ПФ.Значение.Области Цикл 
			Если СтрНайти(Обл.Имя, "УдалитьСтроку") = 1 Тогда 
				Обл.Текст = "";
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;

	РегламентированнаяОтчетностьКлиентСервер.ПроставлениеНомеровЛистов(ЭтаФорма, , СтруктураРеквизитовФормы.СписокПечатаемыхЛистов);
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Процедура СформироватьСпискиВыбора()
	
	МакетСоставаПоказателей = Отчеты[Сред(Лев(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, ".Форма.") - 1), 7)].ПолучитьМакет("Списки2013Кв1");
	
	КоллекцияСписковВыбора = Новый Соответствие;
	Для Каждого Область Из МакетСоставаПоказателей.Области Цикл
		Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Строки Тогда
			ВерхОбласти = Область.Верх;
			НизОбласти = Область.Низ;
			ТаблСписка = Новый ТаблицаЗначений;
			ТаблСписка.Колонки.Добавить("Код",,, МакетСоставаПоказателей.Область(ВерхОбласти, 1, ВерхОбласти, 1).ШиринаКолонки);
			ТаблСписка.Колонки.Добавить("Название",,, МакетСоставаПоказателей.Область(ВерхОбласти, 2, ВерхОбласти, 2).ШиринаКолонки);
			Для НомСтр = ВерхОбласти По НизОбласти Цикл
				КодПоказателя = СокрП(МакетСоставаПоказателей.Область(НомСтр, 1).Текст);
				Если КодПоказателя <> "###" Тогда
					НовСтрока = ТаблСписка.Добавить();
					НовСтрока.Код = КодПоказателя;
					НовСтрока.Название = СокрП(МакетСоставаПоказателей.Область(НомСтр, 2).Текст);
				КонецЕсли;
			КонецЦикла;
			КоллекцияСписковВыбора.Вставить(Область.Имя, ТаблСписка);
		КонецЕсли;
	КонецЦикла;
	
	СвойстваПоказателей.Очистить();
	
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000001000191", 254, , "Выбор видов продукции и работ (услуг)",
	КоллекцияСписковВыбора["СправочникВидовПродукцииРаботУслуг"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000001000192", 254, , "Выбор видов продукции и работ (услуг)",
	КоллекцияСписковВыбора["СправочникВидовПродукцииРаботУслуг"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000002000191", 254, , "Выбор видов продукции и работ (услуг)",
	КоллекцияСписковВыбора["СправочникВидовПродукцииРаботУслуг"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000002000192", 254, , "Выбор видов продукции и работ (услуг)",
	КоллекцияСписковВыбора["СправочникВидовПродукцииРаботУслуг"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000003000191", 254, , "Выбор видов продукции и работ (услуг)",
	КоллекцияСписковВыбора["СправочникВидовПродукцииРаботУслуг"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000003000192", 254, , "Выбор видов продукции и работ (услуг)",
	КоллекцияСписковВыбора["СправочникВидовПродукцииРаботУслуг"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000004000191", 254, , "Выбор видов продукции и работ (услуг)",
	КоллекцияСписковВыбора["СправочникВидовПродукцииРаботУслуг"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000004000192", 254, , "Выбор видов продукции и работ (услуг)",
	КоллекцияСписковВыбора["СправочникВидовПродукцииРаботУслуг"]);
	
КонецПроцедуры

&НаКлиенте
Процедура ВвестиПоказатель(Элемент, Область, КодПоказателя, Знач ЭтоСумма, Знач ТекстВыбора, ТаблицаВыбора, СтандартнаяОбработка, КолонкаПоиска = "Код") Экспорт
	
	Если ТаблицаВыбора = Неопределено Или СтруктураРеквизитовФормы.мАвтоВыборКодов Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	Если (Область.Имя = КодПоказателя)
		ИЛИ (СтрНайти(Область.Имя, СтруктураРеквизитовФормы.мИдГруппы1) > 0)
		ИЛИ (СтрНайти(Область.Имя, СтруктураРеквизитовФормы.мИдГруппы2) > 0)
		ИЛИ (СтрНайти(Область.Имя, СтруктураРеквизитовФормы.мИдГруппы3) > 0)
		ИЛИ (СтрНайти(Область.Имя, СтруктураРеквизитовФормы.мИдГруппы4) > 0) Тогда
		ИсходноеЗначение = ?(ТипЗнч(Область.Значение) = Тип("Строка"), СокрЛП(Область.Значение), Область.Значение);
	Иначе
		Разделитель = ?(Лев(Область.Имя, СтрДлина(КодПоказателя) + 1) = КодПоказателя + "_", "_", "");
		ИндексОбласти = 1;
		ИсходноеЗначение = "";
		Пока ЭтаФорма[ТекущийЭлемент.Имя].Области.Найти(КодПоказателя + Разделитель + Формат(ИндексОбласти, "ЧГ=")) <> Неопределено Цикл
			ИсходноеЗначение = ИсходноеЗначение + Строка(ЭтаФорма[ТекущийЭлемент.Имя].Области[КодПоказателя + Разделитель + Формат(ИндексОбласти, "ЧГ=")].Значение);
			ИндексОбласти = ИндексОбласти + 1;
		КонецЦикла;
		ИсходноеЗначение = СокрЛП(ИсходноеЗначение);
	КонецЕсли;
	
	Суффикс = СтрЗаменить(Область.Имя, КодПоказателя, "");
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Заголовок",          ТекстВыбора);
	ПараметрыФормы.Вставить("ТаблицаЗначений",    ТаблицаВыбора);
	
	Если Сред(Область.Имя, 12, 2) = "91" Тогда
		ПараметрыФормы.Вставить("СтруктураДляПоиска", Новый Структура(КолонкаПоиска, Формат(ПолеТабличногоДокументаФормаОтчета.Области[СтруктураРеквизитовФормы.мИдГруппы1 + "92" + Суффикс].Значение, "ЧГ=")));
	Иначе
		ПараметрыФормы.Вставить("СтруктураДляПоиска", Новый Структура(КолонкаПоиска, Формат(ИсходноеЗначение, "ЧГ=")));
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура("КодПоказателя, Область, Суффикс", КодПоказателя, Область, Суффикс);
	ОписаниеОповещения = Новый ОписаниеОповещения("ВвестиПоказательЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ОткрытьФорму("Обработка.ОбщиеОбъектыРеглОтчетности.Форма.ФормаВыбораЗначенияИзТаблицы", ПараметрыФормы, ЭтаФорма,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ВвестиПоказательЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	КодПоказателя = ДополнительныеПараметры.КодПоказателя;
	Область = ДополнительныеПараметры.Область;
	Суффикс = ДополнительныеПараметры.Суффикс;
	
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Суффикс = "93" Или Суффикс = "94" Тогда
		
		// Заготовка под справочник шаблона выгрузки Росстата.
		
	Иначе
		
		Если СтрНайти(Область.Имя, СтруктураРеквизитовФормы.мИдГруппы1) > 0
			ИЛИ СтрНайти(Область.Имя, СтруктураРеквизитовФормы.мИдГруппы2) > 0
			ИЛИ СтрНайти(Область.Имя, СтруктураРеквизитовФормы.мИдГруппы3) > 0
			ИЛИ СтрНайти(Область.Имя, СтруктураРеквизитовФормы.мИдГруппы4) > 0 Тогда
			
			ВыборКод = Строка(РезультатВыбора["Код"]);
			ВыборНазвание = Строка(РезультатВыбора["Название"]);
			Суффикс = СтрЗаменить(Область.Имя, КодПоказателя, "");
			ПолеТабличногоДокументаФормаОтчета.Области[СтруктураРеквизитовФормы.мИдГруппы1
			+ "92" + Суффикс].Значение = ВыборКод;
			ПолеТабличногоДокументаФормаОтчета.Области[СтруктураРеквизитовФормы.мИдГруппы1
			+ "91" + Суффикс].Значение = ?(ЗначениеЗаполнено(ВыборКод), ВыборНазвание, "");
			ПолеТабличногоДокументаФормаОтчета.Области[СтруктураРеквизитовФормы.мИдГруппы2
			+ "92" + Суффикс].Значение = ВыборКод;
			ПолеТабличногоДокументаФормаОтчета.Области[СтруктураРеквизитовФормы.мИдГруппы2
			+ "91" + Суффикс].Значение = ?(ЗначениеЗаполнено(ВыборКод), ВыборНазвание, "");
			ПолеТабличногоДокументаФормаОтчета.Области[СтруктураРеквизитовФормы.мИдГруппы3
			+ "92" + Суффикс].Значение = ВыборКод;
			ПолеТабличногоДокументаФормаОтчета.Области[СтруктураРеквизитовФормы.мИдГруппы3
			+ "91" + Суффикс].Значение = ?(ЗначениеЗаполнено(ВыборКод), ВыборНазвание, "");
			ПолеТабличногоДокументаФормаОтчета.Области[СтруктураРеквизитовФормы.мИдГруппы4
			+ "92" + Суффикс].Значение = ВыборКод;
			ПолеТабличногоДокументаФормаОтчета.Области[СтруктураРеквизитовФормы.мИдГруппы4
			+ "91" + Суффикс].Значение = ?(ЗначениеЗаполнено(ВыборКод), ВыборНазвание, "");
			
		КонецЕсли;
		
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайла(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузитьИзФайлаЗавершение", ЭтотОбъект);
	
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередЗагрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура Выгрузить(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьЗавершение", ЭтотОбъект);

	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайлаЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ЗагрузитьИзФайлаОтчет();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайлаОтчет() Экспорт
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузитьИзФайлаОтчетЗавершение", ЭтотОбъект);
	
	Если Модифицированность Тогда
		СохранитьНаКлиенте(,ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайлаОтчетЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	РегламентированнаяОтчетностьЗагрузкаКлиент.ЗагрузитьИзФайлаОтчет(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Функция ЗагрузкаОтчетаИзФайла(ДанныеДляЗагрузки) Экспорт
	
	Если Модифицированность Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = СтрШаблон(НСтр("ru='Отчет ""%1"" не сохранен.'"), ЭтотОбъект.Заголовок);
		Сообщение.Сообщить();
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ ЗагрузкаОтчетаИзФайлаНаСервере(ДанныеДляЗагрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
		
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция ЗагрузкаОтчетаИзФайлаНаСервере(ДанныеДляЗагрузки)
	
	СформироватьСтруктуруПоказателей();
	
	ПараметрыОтчета = СформироватьСтруктуруПараметров();
	
	ДеревоДляЗагрузки = РегламентированнаяОтчетность.ПолучитьДеревоВыгрузки(ЭтаФорма, "СхемаВыгрузкиXML2013Кв1");
	
	Если НЕ РегламентированнаяОтчетностьЗагрузка.ЗагрузкаОтчетаИзФайла(
		ЭтотОбъект, ПараметрыОтчета, ДанныеДляЗагрузки, ДеревоДляЗагрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура ВыгрузитьЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьИзФормыПослеСохраненияЗавершение", ЭтотОбъект);
	Если Модифицированность Тогда
		СохранитьНаКлиенте(, ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьИзФормыПослеСохраненияЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ПараметрыВыгрузки = Неопределено;
	ТекстВыгрузки = Неопределено;
	Если НЕ УниверсальнаяВыгрузкаXMLПроверкаВозможностиВыгрузкиНаСервере(ТекстВыгрузки, ПараметрыВыгрузки) Тогда
		ТекстВопроса = НСтр("ru='В ходе выгрузки были найдены ошибки.'");
		КнопкиВопроса = Новый СписокЗначений;
		КнопкиВопроса.Добавить(КодВозвратаДиалога.Да, "Продолжить выгрузку");
		КнопкиВопроса.Добавить(КодВозвратаДиалога.Нет, "Показать ошибки");
		ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьИзФормыЗавершение", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, КнопкиВопроса, , КодВозвратаДиалога.Нет);
	Иначе
		ВыгрузитьОтчет();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьИзФормыЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ВыгрузитьОтчет(Истина);
	Иначе
		СпДокОсн = Новый СписокЗначений;
		СпДокОсн.Добавить(СтруктураРеквизитовФормы.мСохраненныйДок);
		ОшибкиОтчета = Новый Массив;
		РегламентированнаяОтчетностьКлиент.ПроверитьРегламентированныеОтчеты(СпДокОсн, ОшибкиОтчета);
		РегламентированнаяОтчетностьКлиент.ОткрытьФормуНавигацииПоОшибкамВыгрузки(ОшибкиОтчета);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузку(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьВыгрузкуЗавершение", ЭтотОбъект);

	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
		
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузкуЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПроверитьВыгрузкуОтчета();
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузкуОтчета()
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьВыгрузкуОтчетаЗавершение", ЭтотОбъект);
	
	Если НЕ ЗначениеЗаполнено(СтруктураРеквизитовФормы.Организация) Тогда
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Организация не выбрана! Выгрузка невозможна.'");
		Сообщение.Сообщить();
		Возврат;
		
	КонецЕсли;
	
	Если Модифицированность Тогда
		СохранитьНаКлиенте(,ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура ПроверитьВыгрузкуОтчетаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ФормаВыгрузкиРеглОтчета = ПолучитьФорму("Документ.ВыгрузкаРегламентированныхОтчетов.Форма.ФормаДокумента", , ЭтаФорма);
	
	СпДокОсн = Новый СписокЗначений;
	СпДокОсн.Добавить(СтруктураРеквизитовФормы.мСохраненныйДок);
	
	ФормаВыгрузкиРеглОтчета.Проверить(СпДокОсн);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьОтчет(ВыгружатьСОшибками = Ложь) Экспорт
	
	ДополнительныеПараметры = Новый Структура("ВыгружатьСОшибками", ВыгружатьСОшибками);
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьОтчетЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	Если Модифицированность Тогда
		СохранитьНаКлиенте(, ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура ВыгрузитьОтчетЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ФормаВыгрузкиРеглОтчета = ПолучитьФорму("Документ.ВыгрузкаРегламентированныхОтчетов.Форма.ФормаДокумента", , ЭтаФорма);
	
	СпДокОсн = Новый СписокЗначений;
	СпДокОсн.Добавить(СтруктураРеквизитовФормы.мСохраненныйДок);
	
	ФормаВыгрузкиРеглОтчета.СформироватьИЗаписать(СпДокОсн);
	
КонецПроцедуры

&НаСервере
Функция ПроверитьПоказатели() Экспорт
	
	СформироватьСтруктуруПоказателей();
	ДеревоВыгрузки = РегламентированнаяОтчетность.ПолучитьДеревоВыгрузки(ЭтаФорма, "СхемаВыгрузкиXML2013Кв1");
	ПараметрыВыгрузки = СформироватьСтруктуруПараметров();
	КоллекцияСписковВыбора = "";
	Если НЕ ПроверитьВозможностьВыгрузки(ПараметрыВыгрузки, ДеревоВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	ЗаполнитьДанными(ДеревоВыгрузки, ПараметрыВыгрузки);
	Если НЕ РегламентированнаяОтчетность.ПроверитьДанные(ЭтаФорма, ДеревоВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция ТекущийФорматВыгрузки(Организация)
	
	Возврат РегламентированнаяОтчетность.ФорматВыгрузкиСтатистическойОтчетностиВЭлектронномВиде(Организация);
	
КонецФункции

&НаКлиенте
Функция УниверсальнаяВыгрузка(ТекстВыгрузки = Неопределено, ПроверятьБлокировки = Истина, ИмяФайлаВыгрузки = "", ВыгружатьСОшибками = Ложь) Экспорт
	
	Перем ПараметрыВыгрузки;
	
	Если ТекущийФорматВыгрузки(СтруктураРеквизитовФормы.Организация) = Неопределено Тогда
		РегламентированнаяОтчетностьКлиент.ПоказатьФормуНастроекФорматаВыгрузкиСтатистическойОтчетностиВЭлектронномВиде(
			СтруктураРеквизитовФормы.Организация, Ложь, Истина);
			
		Возврат "НеВыбранФормат";
	КонецЕсли;
	
	Если Модифицированность Тогда
		
		Если СтрНайти(Заголовок, СтруктураРеквизитовФормы.СтрПериодОтчета) = 0 Тогда
			ТекстЗаголовка = Заголовок + " за " + СтруктураРеквизитовФормы.СтрПериодОтчета;
		Иначе
			ТекстЗаголовка = Заголовок;
		КонецЕсли;
		
		ОргСтр = " (" + СтруктураРеквизитовФормы.НаимОрганизации + ")";
		Если СтрНайти(Заголовок, ОргСтр) = 0 Тогда
			ТекстЗаголовка = ТекстЗаголовка + ОргСтр;
		КонецЕсли;
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Отчет """ + ТекстЗаголовка + """ не сохранен.";
		Сообщение.Сообщить();
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Если НЕ ВыгружатьСОшибками И НЕ УниверсальнаяВыгрузкаXMLПроверкаВозможностиВыгрузкиНаСервере(ТекстВыгрузки, ПараметрыВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ УниверсальнаяВыгрузкаXMLПроверкаДанныхНаСервере(ТекстВыгрузки, ПараметрыВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ИмяФайлаВыгрузки = ПараметрыВыгрузки.ИмяФайла;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция УниверсальнаяВыгрузкаXMLПроверкаВозможностиВыгрузкиНаСервере(ТекстВыгрузки, ПараметрыВыгрузки) Экспорт
	
	СформироватьСтруктуруПоказателей();
	ПараметрыВыгрузки = СформироватьСтруктуруПараметров();
	ДеревоВыгрузки = РегламентированнаяОтчетность.ПолучитьДеревоВыгрузки(ЭтаФорма, "СхемаВыгрузкиXML2013Кв1");
	Если НЕ ПроверитьВозможностьВыгрузки(ПараметрыВыгрузки, ДеревоВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция УниверсальнаяВыгрузкаXMLПроверкаДанныхНаСервере(ТекстВыгрузки, ПараметрыВыгрузки) Экспорт
	
	СформироватьСтруктуруПоказателей();
	ПараметрыВыгрузки = СформироватьСтруктуруПараметров();
	ДеревоВыгрузки = РегламентированнаяОтчетность.ПолучитьДеревоВыгрузки(ЭтаФорма, "СхемаВыгрузкиXML2013Кв1");
	ЗаполнитьДанными(ДеревоВыгрузки, ПараметрыВыгрузки);
	Если НЕ РегламентированнаяОтчетность.ПроверитьДанные(ЭтаФорма, ДеревоВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ТекстВыгрузки = РегламентированнаяОтчетность.ВыгрузитьДеревоВXML(ДеревоВыгрузки, ПараметрыВыгрузки);
	
	КоллекцияСписковВыбора = "";
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция ПроверитьВозможностьВыгрузки(ПараметрыВыгрузки, ДеревоВыгрузки)
	
	СтатусПроверки = Истина;
	
	ИмяПоляТаблДокумента = "ПолеТабличногоДокументаФормаОтчета";
	
	// Проверка показателей раздела.
	Если ПустаяСтрока(ПараметрыВыгрузки.ОКПО) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма,
		"Не задан код ОКПО организации!",
		ИмяПоляТаблДокумента, "ОргКодОКПО");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ПустаяСтрока(ПараметрыВыгрузки.ОргНазв) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма,
		"Не задано наименование организации!",
		ИмяПоляТаблДокумента, "ОргНазв");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ПустаяСтрока(ПараметрыВыгрузки.ОргИсполнитель) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма,
		"Не указаны Ф.И.О. должностного лица, ответственного за предоставление статистической информации!",
		ИмяПоляТаблДокумента, "ОргИсполнитель");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ПустаяСтрока(ПараметрыВыгрузки.ОргДолжностьИсп) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма,
		"Не указана должность лица, ответственного за предоставление статистической информации!",
		ИмяПоляТаблДокумента, "ОргДолжностьИсп");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ПустаяСтрока(ПараметрыВыгрузки.ОргТелефонИсп) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма,
		"Не указан телефон должностного лица, ответственного за предоставление статистической информации!",
		ИмяПоляТаблДокумента, "ОргТелефонИсп");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	ПоказателиНеанализируемыеНаЗаполненность = Новый Массив;
	ПоказателиНеанализируемыеНаЗаполненность.Добавить("П000001000192");
	
	// Проверка на незаполненный отчет.
	Если Не РегламентированнаяОтчетность.ПроверитьРазделыНаНаличиеИнформации(ЭтаФорма, ДеревоВыгрузки, "ПолеТабличногоДокументаФормаОтчета", ПоказателиНеанализируемыеНаЗаполненность, Истина) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма,
		"Отчет не заполнен!",
		ИмяПоляТаблДокумента, "");
		СтатусПроверки = Ложь;
		Возврат СтатусПроверки;
	КонецЕсли;
	
	Возврат СтатусПроверки;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьДанными(ДеревоВыгрузки, ПараметрыВыгрузки)
	
	РегламентированнаяОтчетность.ОбработатьУсловныеЭлементы(ЭтаФорма, ПараметрыВыгрузки, ДеревоВыгрузки); // формируем точную структуру XML-макета
	ЗаполнитьДаннымиУзел(ПараметрыВыгрузки, ДеревоВыгрузки); // заполняем дерево данными
	РегламентированнаяОтчетность.ОтсечьНезаполненныеНеобязательныеУзлыСтатистики(ДеревоВыгрузки);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДаннымиУзел(ПараметрыВыгрузки, Узел, НомерСтроки = Неопределено)
	
	СтрокиУзла = Новый Массив;
	Для Каждого Стр Из Узел.Строки Цикл
		СтрокиУзла.Добавить(Стр);
	КонецЦикла;
	
	Для Каждого Стр из СтрокиУзла Цикл
		
		Если ПустаяСтрока(Стр.ЗначениеПоУмолчанию) Тогда
			Если НЕ ПустаяСтрока(Стр.Ключ) Тогда
				ПолныйКодПоказателя = Стр.Ключ + ?(ЗначениеЗаполнено(НомерСтроки), "_" + Формат(НомерСтроки, "ЧГ="), "");
				ЗначениеПоказателя = Неопределено;
				Если ПараметрыВыгрузки.Свойство(ПолныйКодПоказателя, ЗначениеПоказателя) Тогда
					ФорматПредставленияНуля = Неопределено;
					Если ПараметрыВыгрузки.Свойство("ЧН" + ПолныйКодПоказателя, ФорматПредставленияНуля) Тогда
						РегламентированнаяОтчетность.ВывестиПоказательСтатистикиВXML(Стр, ЗначениеПоказателя, ФорматПредставленияНуля);
					Иначе
						РегламентированнаяОтчетность.ВывестиПоказательСтатистикиВXML(Стр, ЗначениеПоказателя);
					КонецЕсли;
				Иначе
					РегламентированнаяОтчетность.ВывестиПоказательСтатистикиВXML(Стр, "");
				КонецЕсли;
			Иначе
				Стр.Значение = "";
			КонецЕсли;
		ИначеЕсли Лев(Стр.ЗначениеПоУмолчанию, 1) = "&" Тогда
			РегламентированнаяОтчетность.ВывестиПоказательСтатистикиВXML(Стр, ПараметрыВыгрузки[Сред(Стр.ЗначениеПоУмолчанию, 2)]);
		Иначе
			Стр.Значение = Стр.ЗначениеПоУмолчанию;
			Если НЕ ПустаяСтрока(Стр.Ключ) Тогда
				ПолныйКодПоказателя = Стр.Ключ + ?(ЗначениеЗаполнено(НомерСтроки), "_" + Формат(НомерСтроки, "ЧГ="), "");
				ЗначениеПоказателя = Неопределено;
				Если ПараметрыВыгрузки.Свойство(ПолныйКодПоказателя, ЗначениеПоказателя) Тогда
					ФорматПредставленияНуля = Неопределено;
					Если ПараметрыВыгрузки.Свойство("ЧН" + ПолныйКодПоказателя, ФорматПредставленияНуля) Тогда
						РегламентированнаяОтчетность.ВывестиПоказательСтатистикиВXML(Стр, ЗначениеПоказателя, ФорматПредставленияНуля);
					Иначе
						РегламентированнаяОтчетность.ВывестиПоказательСтатистикиВXML(Стр, ЗначениеПоказателя);
					КонецЕсли;
				Иначе
					РегламентированнаяОтчетность.ВывестиПоказательСтатистикиВXML(Стр, "");
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если Стр.Тип = "С" ИЛИ Стр.Тип = "C" Тогда // учтем оба варианта: кириллицу и латиницу
			Если Стр.Многострочность Тогда
				НомСтр = 1;
				ПодчиненныйЭлемент = РегламентированнаяОтчетность.ПолучитьПервыйПодчиненныйУзелСЗаполненнымКлючом(Стр);
				КлючПодчиненногоЭлемента = ПодчиненныйЭлемент.Ключ;
				Пока РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(ПараметрыВыгрузки, КлючПодчиненногоЭлемента + "_" + Формат(НомСтр, "ЧГ=")) Цикл
					УзелСоответствующийСтроке = РегламентированнаяОтчетность.СкопироватьУзел(Узел, Стр);
					ЗаполнитьДаннымиУзел(ПараметрыВыгрузки, УзелСоответствующийСтроке, НомСтр);
					НомСтр = НомСтр + 1;
				КонецЦикла;
			Иначе
				ЗаполнитьДаннымиУзел(ПараметрыВыгрузки, Стр, НомерСтроки);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция СформироватьИмяФайла(ПараметрыВыгрузки, ДопАтрибуты)
	
	Перем ПолученноеЗначение;
	
	КодОКУД        = ДопАтрибуты.OKUD;
	КодФормы       = ДопАтрибуты.idf;
	Периодичность  = ДопАтрибуты.idp;
	КодОКПО        = ПараметрыВыгрузки.ОКПО;
	РасчетныйГод   = ПараметрыВыгрузки.РасчПериод;
	ОтчетныйПериод = ПараметрыВыгрузки.ОтчПериод;
	
	ПараметрыВыгрузки.Свойство("ОКФС", ПолученноеЗначение);
	КодОКФС = ПолученноеЗначение;
	ПараметрыВыгрузки.Свойство("ОКВЭД", ПолученноеЗначение);
	КодОКВЭД = СтрЗаменить(ПолученноеЗначение, ".", "-");
	
	// Преобразование кодов - составляющих имени файла.
	КодыИФ = Новый Структура;
	КодыИФ.Вставить("Документ",       СтруктураРеквизитовФормы.мСохраненныйДок);
	КодыИФ.Вставить("КодФормы",       КодФормы);
	КодыИФ.Вставить("Периодичность",  Периодичность);
	КодыИФ.Вставить("ОтчетныйПериод", ОтчетныйПериод);
	КодыИФ.Вставить("ДатаВыгрузки",   "");
	
	РегламентированнаяОтчетность.КодыДляИмениФайлаВФорматеВыгрузки(КодыИФ);
	
	// Формирование имени файла, в зависимости
	// от формата выгрузки статотчетности.
	Если ПустаяСтрока(КодыИФ.ДатаВыгрузки) Тогда // "старый" формат
		ИмяФайлаXML = КодОКУД + "_"
		+ КодФормы + "_"
		+ Периодичность + "_"
		+ КодОКПО + "_"
		+ РасчетныйГод + "_"
		+ ОтчетныйПериод
		+ ?(ПустаяСтрока(КодОКФС), "", "_" + КодОКФС)
		+ ?(ПустаяСтрока(КодОКВЭД), "", "_" + КодОКВЭД) + ".xml";
	Иначе										 // "новый" формат
		ИмяФайлаXML = КодОКУД + "_"
		+ КодыИФ.КодФормы + "_"
		+ КодыИФ.Периодичность + "_"
		+ КодОКПО + "_"
		+ РасчетныйГод + "_"
		+ КодыИФ.ОтчетныйПериод + "__"
		+ КодыИФ.ДатаВыгрузки + ".xml";
	КонецЕсли;
	
	Возврат ИмяФайлаXML;
	
КонецФункции

&НаСервере
Функция СформироватьСтруктуруПоказателей()
	
	РегламентированнаяОтчетность.СформироватьСтруктуруПоказателей(ЭтаФорма);
	ДополнительныеПоказатели11ТЭР(мДанныеОтчета.ПолеТабличногоДокументаФормаОтчета, "П000001000101");
	
КонецФункции

&НаСервере
Процедура ДополнительныеПоказатели11ТЭР(ТекСтруктура, ТекПоказатель)
	
	НомСуффикса = ЭтаФорма.П0000010001.Количество() + 1;
	
	ТекСтруктура.Вставить("П000001000192" + "_" + Формат(НомСуффикса, "ЧГ="), 9500);
	
	Для НомКол = 2 По 4 Цикл
		ТекСтруктура.Вставить("П0000010001" + Формат(НомКол, "ЧЦ=2; ЧВН=; ЧГ=") + "_" + Формат(НомСуффикса, "ЧГ="),
		ТекСтруктура["П0000010000" + Формат(НомКол, "ЧЦ=2; ЧВН=; ЧГ=")]);
	КонецЦикла;
	Для НомКол = 5 По 13 Цикл
		ТекСтруктура.Вставить("П0000020001" + Формат(НомКол, "ЧЦ=2; ЧВН=; ЧГ=") + "_" + Формат(НомСуффикса, "ЧГ="),
		ТекСтруктура["П0000020000" + Формат(НомКол, "ЧЦ=2; ЧВН=; ЧГ=")]);
	КонецЦикла;
	Для НомКол = 14 По 21 Цикл
		ТекСтруктура.Вставить("П0000030001" + Формат(НомКол, "ЧЦ=2; ЧВН=; ЧГ=") + "_" + Формат(НомСуффикса, "ЧГ="),
		ТекСтруктура["П0000030000" + Формат(НомКол, "ЧЦ=2; ЧВН=; ЧГ=")]);
	КонецЦикла;
	Для НомКол = 22 По 30 Цикл
		ТекСтруктура.Вставить("П0000040001" + Формат(НомКол, "ЧЦ=2; ЧВН=; ЧГ=") + "_" + Формат(НомСуффикса, "ЧГ="),
		ТекСтруктура["П0000040000" + Формат(НомКол, "ЧЦ=2; ЧВН=; ЧГ=")]);
	КонецЦикла;
	
Конецпроцедуры

&НаСервере
Функция СформироватьСтруктуруПараметров()
	
	Перем ПолученноеЗначение;
	
	ТабДокумент = мДанныеОтчета.ПолеТабличногоДокументаФормаОтчета;
	
	ДопАтрибуты = РегламентированнаяОтчетность.СформироватьСтруктуруДопАтрибутов(ЭтаФорма.ИмяФормы, "АтрибВыгрузкиXML2013Кв1");
	
	СтрокаСведений = "ФИОРук";
	СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(СтруктураРеквизитовФормы.Организация, СтруктураРеквизитовФормы.мСохраненныйДок.ДатаПодписи, СтрокаСведений);
	
	ПараметрыВыгрузки = Новый Структура;
	
	ДопАтрибуты.Свойство("code", ПолученноеЗначение);
	ПараметрыВыгрузки.Вставить("КодШаблона", ПолученноеЗначение);
	ДопАтрибуты.Свойство("idf", ПолученноеЗначение);
	ПараметрыВыгрузки.Вставить("КодФормы", ПолученноеЗначение);
	ДопАтрибуты.Свойство("shifr", ПолученноеЗначение);
	ПараметрыВыгрузки.Вставить("ШифрФормы", ПолученноеЗначение);
	ДопАтрибуты.Свойство("version", ПолученноеЗначение);
	ПараметрыВыгрузки.Вставить("ВерсияШаблона", ПолученноеЗначение);
	ДопАтрибуты.Свойство("format_version", ПолученноеЗначение);
	ПараметрыВыгрузки.Вставить("ВерсияФормата", ПолученноеЗначение);
	
	ОтчПериод  = Месяц(СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания);
	РасчПериод = Формат(Год(СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания),"ЧГ=0");
	
	ПараметрыВыгрузки.Вставить("ОКПО", СокрЛП(ТабДокумент.ОргКодОКПО));
	ПараметрыВыгрузки.Вставить("ОтчПериод", СокрЛП(ОтчПериод));
	ПараметрыВыгрузки.Вставить("РасчПериод", СокрЛП(РасчПериод));
	ПараметрыВыгрузки.Вставить("ОргНазв", СокрЛП(ТабДокумент.ОргНазв));
	ПараметрыВыгрузки.Вставить("ОргДиректор", СокрЛП(СведенияОбОрганизации.ФИОРук));
	ПараметрыВыгрузки.Вставить("ОргДолжностьИсп", СокрЛП(ТабДокумент.ОргДолжностьИсп));
	ПараметрыВыгрузки.Вставить("ОргИсполнитель", СокрЛП(ТабДокумент.ОргИсполнитель));
	ПараметрыВыгрузки.Вставить("ОргТелефонИсп", СокрЛП(ТабДокумент.ОргТелефонИсп));
	
	// Преобразование выгружаемых атрибутов, в соответствии
	// с форматом выгрузки статотчетности.
	ДопАтрибуты.Свойство("idp", ПолученноеЗначение);
	ПараметрыВыгрузки.Вставить("КодПериодичности", Число(СокрЛП(ПолученноеЗначение)));
	ПараметрыВыгрузки.Вставить("Документ", СтруктураРеквизитовФормы.мСохраненныйДок);
	
	РегламентированнаяОтчетность.АтрибутыВФорматеВыгрузки(ПараметрыВыгрузки);
	
	ПараметрыВыгрузки.Вставить("ИмяФайла", СформироватьИмяФайла(ПараметрыВыгрузки, ДопАтрибуты));
	
	ПараметрыВыгрузки.Вставить("ИмяКлючевогоУзлаСодержательнойЧасти", "row");
	
	Возврат ПараметрыВыгрузки;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ СТЫКОВКИ С СЕРВИСОМ СДАЧИ ОТЧЕТНОСТИ ЧЕРЕЗ ПРЕДСТАВИТЕЛЯ

&НаКлиенте
Процедура ОтправитьЧерезПредставителя(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОтправитьЧерезПредставителяЗавершение", ЭтотОбъект);

	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьЧерезПредставителяЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ПриНажатииНаКнопкуОтправкиЧерезПредставителяВРегламентированномОтчете(ЭтаФорма, "ФСГС");
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВИнтернете(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьВИнтернетеЗавершение", ЭтотОбъект);

	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
		
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВИнтернетеЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ПроверитьВИнтернете(ЭтаФорма, "ФСГС");
	
КонецПроцедуры

#Область ПанельОтправкиВКонтролирующиеОрганы

&НаКлиенте
Процедура ОбновитьОтправку(Команда)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОбновитьОтправкуИзПанелиОтправки(ЭтаФорма, "ФСГС");
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаПротоколНажатие(Элемент)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьПротоколИзПанелиОтправки(ЭтаФорма, "ФСГС");
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьНеотправленноеИзвещение(Команда)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОтправитьНеотправленноеИзвещениеИзПанелиОтправки(ЭтаФорма, "ФСГС");
КонецПроцедуры

&НаКлиенте
Процедура ЭтапыОтправкиНажатие(Элемент)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьСостояниеОтправкиИзПанелиОтправки(ЭтаФорма, "ФСГС");
КонецПроцедуры

&НаКлиенте
Процедура КритическиеОшибкиОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьКритическиеОшибкиИзПанелиОтправки(ЭтаФорма, "ФСГС");
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаНаименованиеЭтапаНажатие(Элемент)
	
	ПараметрыИзменения = Новый Структура;
	ПараметрыИзменения.Вставить("Форма", ЭтаФорма);
	ПараметрыИзменения.Вставить("Организация", СтруктураРеквизитовФормы.Организация);
	ПараметрыИзменения.Вставить("КонтролирующийОрган",
		ПредопределенноеЗначение("Перечисление.ТипыКонтролирующихОрганов.ФСГС"));
	
	РегламентированнаяОтчетностьКлиент.ИзменитьСтатусОтправки(ПараметрыИзменения);
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ОтправитьВКонтролирующийОрган(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверкаВозможностиВыгрузкиРегламентированногоОтчетаПередОтправкой", ЭтотОбъект);
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередОтправкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаВозможностиВыгрузкиРегламентированногоОтчетаПередОтправкой(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОтправитьВКонтролирующийОрганЗавершение", ЭтотОбъект);
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьВКонтролирующийОрганЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ПриНажатииНаКнопкуОтправкиВКонтролирующийОрган(ЭтаФорма, "ФСГС");
	
КонецПроцедуры

&НаКлиенте
Процедура  ЗаписатьИЗакрыть(Команда)
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Форма", ЭтаФорма);
	Оповещение = Новый ОписаниеОповещения("ПослеСохраненияФормыЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	СохранитьНаКлиенте(, Оповещение);
КонецПроцедуры

&НаКлиенте
Процедура ПослеСохраненияФормыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	ДополнительныеПараметры.Форма.Закрыть();
КонецПроцедуры

&НаКлиенте
Процедура ПолеТабличногоДокументаФормаОтчетаПриАктивизацииОбласти(Элемент)
	Элементы.ТабличныйДокументКонтекстноеМенюУдалитьСтроку.Доступность = Ложь;
	Элементы.ТабличныйДокументКонтекстноеМенюДобавитьСтроку.Доступность = Ложь;
	
	ИмяГруппы = РазделТекущейОбласти(ЭтаФорма, Элемент.ТекущаяОбласть);
	
	Если ЗначениеЗаполнено(ИмяГруппы) Тогда 
		ТестовоеИмя = ИмяГруппы + "01_" + Строка(мСтруктураИсхКолвоСтрокРазделов[ИмяГруппы] + 1);
		Элементы.ТабличныйДокументКонтекстноеМенюДобавитьСтроку.Доступность = Истина;
		Если СтрЧислоВхождений(Элемент.ТекущаяОбласть.Имя, "ДобавитьСтроку") = 0 И
			ПолеТабличногоДокументаФормаОтчета.Области.Найти(ТестовоеИмя) <> Неопределено Тогда
			Элементы.ТабличныйДокументКонтекстноеМенюУдалитьСтроку.Доступность = Истина;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОткрытьПрисоединенныеФайлы(Команда)
	
	РегламентированнаяОтчетностьКлиент.СохранитьОтчетИОткрытьФормуПрисоединенныеФайлы(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийПриИзменении(Элемент)
	Модифицированность = Истина;
КонецПроцедуры