
&НаКлиенте
Перем ПараметрыОбработчикаОжидания; // Хранит параметры обработчика ожидания.

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

#Область Обработчики_событий_элементов_формы

&НаКлиенте
// Обработчик события "ПриИзменении" поля "ВидПериода".
Процедура ВидПериодаПриИзменении(Элемент)
	
	ОбновитьТекстыПериодов();
	
	УПЖКХ_ТиповыеМетодыКлиентСервер.ПереключитьТекущуюСтраницуВыбораПериода(ВидПериода, Элементы.ГруппаПоляВводаПериода);
	
	ОбновитьТекстЗаголовка();
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура устанавливает текст в поля периодов.
Процедура ОбновитьТекстыПериодов(ИзМонитораРуководителяЖКХ = Ложь)
	
	Если ВидПериода = ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.ПроизвольныйПериод") Тогда
		
		врВидПериода = ПолучитьЗначениеВидаПериода();
		
		Если НЕ ИзМонитораРуководителяЖКХ Тогда
			Отчет.НачалоПериода = НачалоМесяца(ДобавитьМесяц(ТекущаяДата, -1));
		КонецЕсли;
		
		УПЖКХ_ТиповыеМетодыКлиент.ВидПериодаПриИзменении(Элементы.ВидПериода, врВидПериода, Отчет.НачалоПериода, Дата(1, 1, 1), НачалоПериодаТекст);
		
		Если ИзМонитораРуководителяЖКХ Тогда
			врКонецПериода = Отчет.КонецПериода;
		Иначе
			врКонецПериода = НачалоМесяца(ТекущаяДата);
		КонецЕсли;
		
		УПЖКХ_ТиповыеМетодыКлиент.ВидПериодаПриИзменении(Элементы.ВидПериода, врВидПериода, врКонецПериода, Отчет.КонецПериода, КонецПериодаТекст);
		
	Иначе
		УПЖКХ_ТиповыеМетодыКлиент.ВидПериодаПриИзменении(Элементы.ВидПериода, ВидПериода, Отчет.НачалоПериода, Отчет.КонецПериода, Период);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля "Период".
Процедура ПериодПриИзменении(Элемент)
	
	УПЖКХ_ТиповыеМетодыКлиент.ПериодПриИзменении(Элемент, Период, Отчет.НачалоПериода, Отчет.КонецПериода);
	
	ОбновитьТекстЗаголовка();
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "НачалоВыбора" поля "Период".
Процедура ПериодНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПериодНачалоВыбораЗавершение", ЭтотОбъект);
	
	УПЖКХ_ТиповыеМетодыКлиент.ПериодНачалоВыбора(ЭтаФорма, Элемент, СтандартнаяОбработка, 
		ВидПериода, Отчет.НачалоПериода, ОписаниеОповещения);
	
	ОбновитьТекстЗаголовка();
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура окончания асинхроного выбора периода.
Процедура ПериодНачалоВыбораЗавершение(СтруктураПериода, ДополнительныеПараметры) Экспорт
	
	// Установим полученный период
	Если СтруктураПериода <> Неопределено Тогда
		ВидПериода = СтруктураПериода.ВидПериода;
		Период = СтруктураПериода.Период;
		Отчет.НачалоПериода = СтруктураПериода.НачалоПериода;
		Отчет.КонецПериода = СтруктураПериода.КонецПериода;
	КонецЕсли;
	
	ОбновитьТекстЗаголовка();
	
	Если НЕ ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
// Обработчик события "ОбработкаВыбора" поля "Период".
Процедура ПериодОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	УПЖКХ_ТиповыеМетодыКлиент.ПериодОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка,
		ВидПериода, Период, Отчет.НачалоПериода, Отчет.КонецПериода);
		
	ОбновитьТекстЗаголовка();
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "АвтоПодбор" поля "Период".
Процедура ПериодАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	Если ВидПериода = ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.Квартал") Тогда
		Текст = "";
	ИначеЕсли ВидПериода = ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.Месяц")
	 ИЛИ ВидПериода = ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.Год") Тогда
		Текст = Период;
	КонецЕсли;
	
	УПЖКХ_ТиповыеМетодыКлиент.ПериодАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка,
		ВидПериода, Период, Отчет.НачалоПериода, Отчет.КонецПериода);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ОкончаниеВводаТекста" поля "Период".
Процедура ПериодОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	УПЖКХ_ТиповыеМетодыКлиент.ПериодОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка,
		ВидПериода, Период, Отчет.НачалоПериода, Отчет.КонецПериода);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля "НачалоПериода".
Процедура НачалоПериодаПриИзменении(Элемент)
	
	ОбновитьТекстЗаголовка();
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "НачалоВыбора" поля "Период1".
Процедура НачалоПериодаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("НачалоПериодаНачалоВыбораЗавершение", ЭтотОбъект);
	
	врВидПериода = ПолучитьЗначениеВидаПериода();
	
	УПЖКХ_ТиповыеМетодыКлиент.ПериодНачалоВыбора(ЭтаФорма, Элемент, СтандартнаяОбработка, 
		врВидПериода, Отчет.НачалоПериода, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
// Процедура окончания асинхроного выбора периода1.
Процедура НачалоПериодаНачалоВыбораЗавершение(СтруктураПериода, ДополнительныеПараметры) Экспорт
	
	// Установим полученный период
	Если СтруктураПериода <> Неопределено Тогда
		
		НачалоПериодаТекст  = СтруктураПериода.Период;
		Отчет.НачалоПериода = СтруктураПериода.НачалоПериода;
		
		Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ОбработкаВыбора" поля "Период1".
Процедура НачалоПериодаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	врВидПериода = ПолучитьЗначениеВидаПериода();
	КонецПериода = Дата(1, 1, 1);
	
	УПЖКХ_ТиповыеМетодыКлиент.ПериодОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка,
		врВидПериода, НачалоПериодаТекст, Отчет.НачалоПериода, КонецПериода);
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "АвтоПодбор" поля "Период1".
Процедура НачалоПериодаАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	врВидПериода = ПолучитьЗначениеВидаПериода();
	
	Если врВидПериода = ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.Квартал") Тогда
		Текст = "";
	ИначеЕсли врВидПериода = ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.Месяц")
	 ИЛИ врВидПериода = ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.Год") Тогда
		Текст = Элемент.ТекстРедактирования;
	КонецЕсли;
	
	УПЖКХ_ТиповыеМетодыКлиент.ПериодАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка,
		врВидПериода, НачалоПериодаТекст, Отчет.НачалоПериода, Отчет.КонецПериода);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ОкончаниеВводаТекста" поля "Период1".
Процедура НачалоПериодаОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	врВидПериода = ПолучитьЗначениеВидаПериода();
	
	УПЖКХ_ТиповыеМетодыКлиент.ПериодОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка,
		врВидПериода, НачалоПериодаТекст, Отчет.НачалоПериода, Отчет.КонецПериода);
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля "КонецПериода".
Процедура КонецПериодаПриИзменении(Элемент)
	
	ОбновитьТекстЗаголовка();
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "НачалоВыбора" поля "Период1".
Процедура КонецПериодаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("КонецПериодаНачалоВыбораЗавершение", ЭтотОбъект);
	
	врВидПериода = ПолучитьЗначениеВидаПериода();
	
	УПЖКХ_ТиповыеМетодыКлиент.ПериодНачалоВыбора(ЭтаФорма, Элемент, СтандартнаяОбработка, 
		врВидПериода, Отчет.КонецПериода, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
// Процедура окончания асинхроного выбора Конец периода.
Процедура КонецПериодаНачалоВыбораЗавершение(СтруктураПериода, ДополнительныеПараметры) Экспорт
	
	// Установим полученный период
	Если СтруктураПериода <> Неопределено Тогда
		
		КонецПериодаТекст  = СтруктураПериода.Период;
		Отчет.КонецПериода = СтруктураПериода.КонецПериода;
		
		Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ОбработкаВыбора" поля "Период1".
Процедура КонецПериодаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	врВидПериода = ПолучитьЗначениеВидаПериода();
	
	КонецПериода = Дата(1, 1, 1);
	
	УПЖКХ_ТиповыеМетодыКлиент.ПериодОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка,
		врВидПериода, КонецПериодаТекст, Отчет.КонецПериода, КонецПериода);
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "АвтоПодбор" поля "Период1".
Процедура КонецПериодаАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	врВидПериода = ПолучитьЗначениеВидаПериода();
	
	Если врВидПериода = ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.Квартал") Тогда
		Текст = "";
	ИначеЕсли врВидПериода = ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.Месяц")
	 ИЛИ врВидПериода = ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.Год") Тогда
		Текст = Элемент.ТекстРедактирования;
	КонецЕсли;
	
	УПЖКХ_ТиповыеМетодыКлиент.ПериодАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка,
		врВидПериода, КонецПериодаТекст, Отчет.КонецПериода, Неопределено);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ОкончаниеВводаТекста" поля "Период1".
Процедура КонецПериодаОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	врВидПериода = ПолучитьЗначениеВидаПериода();
	
	УПЖКХ_ТиповыеМетодыКлиент.ПериодОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка,
		врВидПериода, КонецПериодаТекст, Отчет.КонецПериода, Неопределено);
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Возвращает значение вида периода.
Функция ПолучитьЗначениеВидаПериода()
	
	Если ВидПериода = ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.ПроизвольныйПериод") Тогда
		врВидПериода = ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.Месяц");
	Иначе
		врВидПериода = ВидПериода;
	КонецЕсли;
	
	Возврат врВидПериода;
	
КонецФункции

&НаКлиенте
// Обработчик события "ПриИзменении" поля "Организация".
Процедура ОрганизацияПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля "ВариантОтчета".
Процедура ВариантОтчетаПриИзменении(Элемент)
	
	ОбновитьТекстЗаголовка();
	УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НЕАКТУАЛЬНОСТЬ");
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля "Выводить графики".
Процедура ВыводитьГрафикиПриИзменении(Элемент)
	
	Элементы.ИзменитьТипДиаграммы.Видимость = ВыводитьГрафики;
	
	УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НЕАКТУАЛЬНОСТЬ");
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "Очистка" полей: "Начало периода", "Конец периода".
Процедура ПолеПериодаОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриАктивизацииОбласти" поля "Результат".
Процедура РезультатПриАктивизацииОбласти(Элемент)
	
	Если ТипЗнч(Результат.ВыделенныеОбласти) = Тип("ВыделенныеОбластиТабличногоДокумента") Тогда
		ИнтервалОжидания = ?(ПолучитьСкоростьКлиентскогоСоединения() = СкоростьКлиентскогоСоединения.Низкая, 1, 0.2);
		ПодключитьОбработчикОжидания("Подключаемый_РезультатПриАктивизацииОбластиПодключаемый", ИнтервалОжидания, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "Выбор" поля "Результат".
Процедура РезультатВыбор(Элемент, Область, СтандартнаяОбработка)
	
	Если ТипЗнч(Область) = Тип("РисунокТабличногоДокумента") Тогда
		Попытка
			ДопПараметры = Новый Структура("Диаграмма", Область.Объект);
			ОписаниеОповещения = Новый ОписаниеОповещения("РезультатВыборЗавершение", ЭтаФорма, ДопПараметры);
			
			ПоказатьВыборИзМеню(ОписаниеОповещения, СписокТиповДиаграмм, Область);
		Исключение КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ КОМАНД ФОРМЫ

#Область Обработчики_событий_команд_формы

&НаКлиенте
// Обработчик команды "СформироватьОтчет" формы.
Процедура СформироватьОтчет(Команда)
	
	ОтключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания");
	
	РезультатВыполнения = СформироватьОтчетНаСервере();
	Если Не РезультатВыполнения.ЗаданиеВыполнено Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "ФормированиеОтчета");
		УПЖКХ_ТиповыеМетодыКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик команды "ОтправитьПоЭлектроннойПочте" формы.
Процедура ОтправитьПоЭлектроннойПочте(Команда)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Тема",     ЗаголовокОтчета);
	ДополнительныеПараметры.Вставить("ИмяФайла", ЗаголовокОтчета);
	ОтправкаПочтовыхСообщенийКлиент.ОтправитьОтчет(ЭтотОбъект, ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
// Обработчик команды "ИзменитьТипДиаграмм" формы.
Процедура ИзменитьТипДиаграмм(Команда)
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ТипДиаграммыПоУмолчанию", ТипДиаграммыПоУмолчанию);
	СтруктураПараметров.Вставить("СписокТиповДиаграмм",     СписокТиповДиаграмм);
	
	ОткрытьФорму("Отчет.УПЖКХ_СводныеДанныеПоНачислениямИОплатам.Форма.ФормаНастройкиГрафиков",
				СтруктураПараметров,
				ЭтаФорма,,,,
				Новый ОписаниеОповещения("ИзменитьТипДиаграммыЗавершение", ЭтаФорма),
				РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

#Область Обработчики_событий_формы

&НаСервере
// Обработчик события "ПриСозданииНаСервере" формы.
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Параметры.Свойство("СформироватьПриОткрытии", СформироватьПриОткрытии);
	
	ТекущаяДата = ТекущаяДата();
	
	Если Параметры.Свойство("ПользовательскиеНастройки")
	   И ТипЗнч(Параметры.ПользовательскиеНастройки) = Тип("ПользовательскиеНастройкиКомпоновкиДанных") Тогда
		ВходящиеПараметры = Параметры.ПользовательскиеНастройки.ДополнительныеСвойства;
		
		Если ВходящиеПараметры.Свойство("Организация") Тогда
			Отчет.Организация = ВходящиеПараметры.Организация;
		Иначе
			Отчет.Организация = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация");
		КонецЕсли;
		
		Если ВходящиеПараметры.Свойство("КлючВарианта") Тогда
			ВариантОтчета = ВходящиеПараметры.КлючВарианта;
		Иначе
			ВариантОтчета = Элементы.ВариантОтчета.СписокВыбора[0].Значение;
		КонецЕсли;
		
		Если ВходящиеПараметры.Свойство("НачалоПериода") Тогда
			Отчет.НачалоПериода = ВходящиеПараметры.НачалоПериода;
		Иначе
			Отчет.НачалоПериода = НачалоМесяца(ДобавитьМесяц(ТекущаяДата, -1));
		КонецЕсли;
		
		Если ВходящиеПараметры.Свойство("КонецПериода") Тогда
			Отчет.КонецПериода = ВходящиеПараметры.КонецПериода;
		Иначе
			Отчет.КонецПериода = КонецМесяца(ТекущаяДата);
		КонецЕсли;
		
		ВидПериода = Перечисления.ДоступныеПериодыОтчета.ПроизвольныйПериод;
		
	Иначе
		ВходящиеПараметры   = Новый Структура;
		Отчет.НачалоПериода = НачалоМесяца(ДобавитьМесяц(ТекущаяДата, -1));
		Отчет.КонецПериода  = КонецМесяца(ТекущаяДата);
		Отчет.Организация   = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация");
		ВариантОтчета       = Элементы.ВариантОтчета.СписокВыбора[0].Значение;
	КонецЕсли;
	
	АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
	
	УПЖКХ_ТиповыеМетодыКлиентСервер.ЗаполнитьСписокВыбораВидПериода(Перечисления.ДоступныеПериодыОтчета.Месяц,
																	Элементы.ВидПериода.СписокВыбора,
																	ВидПериода);
	
	Период = УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьПредставлениеПериодаОтчета(ВидПериода, Отчет.НачалоПериода, Отчет.КонецПериода);
	
	УПЖКХ_ТиповыеМетодыКлиентСервер.ПереключитьТекущуюСтраницуВыбораПериода(ВидПериода, Элементы.ГруппаПоляВводаПериода);
	
	СписокТиповДиаграмм = Отчеты.УПЖКХ_СводныеДанныеПоНачислениямИОплатам.ПолучитьСписокТиповДиаграмм();
	
	Если ПустаяСтрока(ТипДиаграммыПоУмолчанию) Тогда
		ТипДиаграммыПоУмолчанию = СписокТиповДиаграмм[0].Значение;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриОткрытии" формы.
Процедура ПриОткрытии(Отказ)
	
	ОбновитьТекстыПериодов(Этаформа.ВладелецФормы <> Неопределено);
	
	ОбновитьТекстЗаголовка();
	
	Элементы.ИзменитьТипДиаграммы.Видимость = ВыводитьГрафики;
	
	Если СформироватьПриОткрытии Тогда
		СформироватьОтчет(Команды.СформироватьОтчет);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

#Область Клиентские_Вызовы

&НаКлиенте
// Обработчик при активизации области поля "Результат".
Процедура Подключаемый_РезультатПриАктивизацииОбластиПодключаемый()
	
	НеобходимоВычислятьНаСервере = Ложь;
	БухгалтерскиеОтчетыКлиент.ВычислитьСуммуВыделенныхЯчеекТабличногоДокумента(
		ПолеСумма, Результат, КэшВыделеннойОбласти, НеобходимоВычислятьНаСервере);
	
	Если НеобходимоВычислятьНаСервере Тогда
		ВычислитьСуммуВыделенныхЯчеекТабличногоДокументаВКонтекстеНаСервере();
	КонецЕсли;
	
	ОтключитьОбработчикОжидания("Подключаемый_РезультатПриАктивизацииОбластиПодключаемый");
	
КонецПроцедуры

&НаКлиенте
// Процедура проверяет выполнение задания.
Процедура Подключаемый_ПроверитьВыполнениеЗадания()
	
	Попытка
		Если ЗаданиеВыполнено(ИдентификаторЗадания) Тогда 
			ЗагрузитьПодготовленныеДанныеНаСервере();
			УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеИспользовать");
		Иначе
			УПЖКХ_ТиповыеМетодыКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
			ПодключитьОбработчикОжидания(
				"Подключаемый_ПроверитьВыполнениеЗадания",
				ПараметрыОбработчикаОжидания.ТекущийИнтервал,
				Истина);
		КонецЕсли;
	Исключение
		УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеИспользовать");
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
// Процедура обновляет текст заголовка.
Процедура ОбновитьТекстЗаголовка()
	
	ТекстПериода = " " + УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьПредставлениеПериода(Отчет.НачалоПериода, Отчет.КонецПериода);
	Если ВариантОтчета = "НачисленияИОплаты" Тогда
		ЧастьЗаголовка = "Начисления и оплаты";
	ИначеЕсли ВариантОтчета = "ДинамикаЗадолженности" Тогда
		ЧастьЗаголовка = "Динамика задолженности";
	КонецЕсли;
	
	Заголовок = ЧастьЗаголовка;
	
	ЗаголовокОтчета = ЧастьЗаголовка + ТекстПериода;
	
КонецПроцедуры

&НаКлиенте
// Устанавливает тип диаграммы.
Процедура ИзменитьТипДиаграммыЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(РезультатЗакрытия) = Тип("Структура") Тогда
		
		ТипДиаграммыПоУмолчанию = РезультатЗакрытия.ТипДиаграммыПоУмолчанию;
		
		ТекущийТипДиаграммы = ПолучитьТипДиаграммыПоИмени(ТипДиаграммыПоУмолчанию);
		
		Для Каждого ТекущаяОбластьДиаграммы Из Результат.Рисунки Цикл
			Попытка
				Диаграмма = ТекущаяОбластьДиаграммы.Объект;
				Если Диаграмма.ТипДиаграммы <> ТекущийТипДиаграммы Тогда
					Диаграмма.ТипДиаграммы = ТекущийТипДиаграммы
				КонецЕсли;
			Исключение КонецПопытки;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Устанавливает тип диаграммы.
Процедура РезультатВыборЗавершение(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныйЭлемент <> Неопределено Тогда
		Диаграмма = ДополнительныеПараметры.Диаграмма;
		Диаграмма.ТипДиаграммы = ПолучитьТипДиаграммыПоИмени(ВыбранныйЭлемент.Значение);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти // Клиентские_Вызовы

#Область Серверные_Вызовы

&НаСервере
// Процедура формирования отчета.
Функция СформироватьОтчетНаСервере()
	
	ИБФайловая = УПЖКХ_ТиповыеМетодыСервер.ИнформационнаяБазаФайловая();
	
	Отказ = Ложь;
	
	ПараметрыОтчета = ПодготовитьПараметрыОтчетаНаСервере(Отказ);
	
	УПЖКХ_ТиповыеМетодыСервер.ОтменитьВыполнениеЗадания(ИдентификаторЗадания);
	
	ИдентификаторЗадания = Неопределено;
	
	Если ИБФайловая Тогда
		Отчеты.УПЖКХ_СводныеДанныеПоНачислениямИОплатам.СформироватьОтчет(ПараметрыОтчета, ПараметрыОтчета.АдресХранилища);
		РезультатВыполнения = Новый Структура("ЗаданиеВыполнено", Истина);
		АдресХранилища      = ПараметрыОтчета.АдресХранилища;
	Иначе
		РезультатВыполнения = УПЖКХ_ТиповыеМетодыСервер.ЗапуститьВыполнениеВФоне(
			УникальныйИдентификатор,
			"Отчеты.УПЖКХ_СводныеДанныеПоНачислениямИОплатам.СформироватьОтчет",
			ПараметрыОтчета,
			УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьНаименованиеЗаданияВыполненияОтчета(ЭтаФорма));
			
		АдресХранилища       = РезультатВыполнения.АдресХранилища;
		ИдентификаторЗадания = РезультатВыполнения.ИдентификаторЗадания;
	КонецЕсли;
	
	Если РезультатВыполнения.ЗаданиеВыполнено Тогда
		ЗагрузитьПодготовленныеДанныеНаСервере();
	КонецЕсли;
	
	Возврат РезультатВыполнения;
	
КонецФункции

&НаСервере
// Процедура загружает подготовленные данные на сервере.
Процедура ЗагрузитьПодготовленныеДанныеНаСервере()
	
	Результат = ПолучитьИзВременногоХранилища(АдресХранилища);
	
	Отчеты.УПЖКХ_СводныеДанныеПоНачислениямИОплатам.УстановитьПараметрыПечати(Результат);
	
	УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеИспользовать");
	
КонецПроцедуры

&НаСервереБезКонтекста
// Процедура проверяет, выполнено ли задание.
Функция ЗаданиеВыполнено(ИдентификаторЗадания)
	
	Возврат УПЖКХ_ТиповыеМетодыСервер.ЗаданиеВыполнено(ИдентификаторЗадания);
	
КонецФункции

&НаСервере
// Вычисляет сумму значений полей табличного документа.
Процедура ВычислитьСуммуВыделенныхЯчеекТабличногоДокументаВКонтекстеНаСервере()
	
	ПолеСумма = БухгалтерскиеОтчетыВызовСервера.ВычислитьСуммуВыделенныхЯчеекТабличногоДокумента(
		Результат, КэшВыделеннойОбласти);
	
КонецПроцедуры

&НаСервере
// Процедура готовит параметры на сервере.
Функция ПодготовитьПараметрыОтчетаНаСервере(Отказ)
	
	ПараметрыОтчета = Новый Структура;

	ПараметрыОтчета.Вставить("АдресХранилища",  АдресХранилища);
	ПараметрыОтчета.Вставить("НачалоПериода",   НачалоМесяца(Отчет.НачалоПериода));
	ПараметрыОтчета.Вставить("КонецПериода",    КонецДня(Отчет.КонецПериода));
	ПараметрыОтчета.Вставить("Организация",     Отчет.Организация);
	ПараметрыОтчета.Вставить("ЗаголовокОтчета", ЗаголовокОтчета);
	ПараметрыОтчета.Вставить("ВариантОтчета",   ВариантОтчета);
	ПараметрыОтчета.Вставить("ВыводитьГрафики", ВыводитьГрафики);
	
	ГрафикЗаМесяц     = Год(ПараметрыОтчета.КонецПериода) = Год(ПараметрыОтчета.НачалоПериода)
					  И Месяц(ПараметрыОтчета.КонецПериода) = Месяц(ПараметрыОтчета.НачалоПериода);
	ВыводитьПоГодам   = (Год(ПараметрыОтчета.КонецПериода) - Год(ПараметрыОтчета.НачалоПериода)) > 0;
	ВыводитьПоМесяцам = НЕ (Год(ПараметрыОтчета.КонецПериода) = Год(ПараметрыОтчета.НачалоПериода)
							И Месяц(ПараметрыОтчета.КонецПериода) = Месяц(ПараметрыОтчета.НачалоПериода));
	
	ПараметрыОтчета.Вставить("ГрафикЗаМесяц",     ГрафикЗаМесяц);
	ПараметрыОтчета.Вставить("ВыводитьПоГодам",   ВыводитьПоГодам);
	ПараметрыОтчета.Вставить("ВыводитьПоМесяцам", ВыводитьПоМесяцам);
	
	врТипДиаграммыПоУмолчанию = ПолучитьТипДиаграммыПоИмени(ТипДиаграммыПоУмолчанию);
	
	ПараметрыОтчета.Вставить("ТипДиаграммыПоУмолчанию", врТипДиаграммыПоУмолчанию);
	
	Возврат ПараметрыОтчета;
	
КонецФункции // ПодготовитьПараметрыОтчетаНаСервере()

&НаСервере
// Возвращенет тип диаграммы по имени типа.
Функция ПолучитьТипДиаграммыПоИмени(ИмяТипаДиаграммы)
	
	Попытка
		врТипДиаграммыПоУмолчанию = ТипДиаграммы[ИмяТипаДиаграммы];
	Исключение
		врТипДиаграммыПоУмолчанию = ТипДиаграммы.График;
	КонецПопытки;
	
	Возврат врТипДиаграммыПоУмолчанию;
	
КонецФункции

#КонецОбласти // Серверные_Вызовы
