#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Определяет поддерживаемый набор суммовых показателей справки-расчета.
// См. соответствующие методы модулей подсистемы СправкиРасчеты.
// Справка-расчет должна поддерживать хотя бы один набор.
// Если поддерживается несколько наборов, то конкретный набор выбирается в форме
// и передается через свойство отчета НаборПоказателейОтчета.
//
// Возвращаемое значение:
//  Массив - номера наборов суммовых показателей.
//
Функция ПоддерживаемыеНаборыСуммовыхПоказателей() Экспорт
	
	Возврат СправкиРасчетыКлиентСервер.ВсеНаборыСуммовыхПоказателей();
	
КонецФункции

#КонецОбласти

#Область ОбработчикиБухгалтерскиеОтчеты

Функция ПолучитьТекстЗаголовка(Контекст) Экспорт 
	
	Возврат СправкиРасчеты.ЗаголовокОтчета(Контекст);
	
КонецФункции

Процедура ПриВыводеЗаголовка(Контекст, КомпоновщикНастроек, Результат) Экспорт
	
	СправкиРасчеты.ВывестиШапкуОтчета(Результат, Контекст, Истина);
	
КонецПроцедуры

Процедура ПослеВыводаРезультата(Контекст, Результат) Экспорт
	
	СправкиРасчеты.ОформитьРезультатОтчета(Результат, Контекст);
	
	Результат.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	
КонецПроцедуры

#КонецОбласти

Функция ПолучитьПараметрыИсполненияОтчета() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ИспользоватьПередКомпоновкойМакета", Истина);
	Результат.Вставить("ИспользоватьПослеВыводаРезультата",  Истина);
	Результат.Вставить("ИспользоватьДанныеРасшифровки",      Ложь);
	Результат.Вставить("ИспользоватьПриВыводеЗаголовка",     Истина);
	
	Возврат Результат;
	
КонецФункции

Функция НайтиПоИмени(Структура, Имя)
	Группировка = Неопределено;
	Для каждого Элемент Из Структура Цикл
		Если ТипЗнч(Элемент) = Тип("ТаблицаКомпоновкиДанных") Тогда
			Если Элемент.Имя = Имя Тогда
				Возврат Элемент;
			КонецЕсли;	
		Иначе
			Если Элемент.Имя = Имя Тогда
				Возврат Элемент;
			КонецЕсли;	
			Для каждого Поле Из Элемент.ПоляГруппировки.Элементы Цикл
				Если Не ТипЗнч(Поле) = Тип("АвтоПолеГруппировкиКомпоновкиДанных") Тогда
					Если Поле.Поле = Новый ПолеКомпоновкиДанных(Имя) Тогда
						Возврат Элемент;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			Если Элемент.Структура.Количество() = 0 Тогда
				Продолжить;
			Иначе
				Группировка = НайтиПоИмени(Элемент.Структура, Имя);
				Если Не Группировка = Неопределено Тогда
					Возврат	Группировка;
				КонецЕсли;	
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Возврат Группировка;
	
КонецФункции

// В процедуре можно доработать компоновщик перед выводом в отчет
// Изменения сохранены не будут
Процедура ПередКомпоновкойМакета(ПараметрыОтчета, Схема, КомпоновщикНастроек) Экспорт
	
	Если ЗначениеЗаполнено(ПараметрыОтчета.НачалоПериода) Тогда
		БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "НачалоПериода", ПараметрыОтчета.НачалоПериода);
	КонецЕсли;
	Если ЗначениеЗаполнено(ПараметрыОтчета.КонецПериода) Тогда
		БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "КонецПериода", КонецДня(ПараметрыОтчета.КонецПериода));
	КонецЕсли;
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек,"ПоддержкаПБУ18",УчетнаяПолитика.ПоддержкаПБУ18(ПараметрыОтчета.Организация, ПараметрыОтчета.КонецПериода));
	
	КоличествоПоказателей = БухгалтерскиеОтчетыВызовСервера.КоличествоПоказателей(ПараметрыОтчета);

	Таблица = КомпоновщикНастроек.Настройки.Структура;
	
	МассивПоказателей 	= Новый Массив;
	ВыводитьТолькоБУ 	= Ложь;
	
	Если ПараметрыОтчета.ПоказательНУ Тогда 
		СтрокаГруппировки = "НУ";
		МассивПоказателей.Добавить("НУ");
	ИначеЕсли ПараметрыОтчета.ПоказательВР Тогда					
		СтрокаГруппировки = "СРазницами";
		МассивПоказателей.Добавить("БУ");
		МассивПоказателей.Добавить("ПР");
		МассивПоказателей.Добавить("ВР");
	Иначе
		СтрокаГруппировки = "БУ";
		МассивПоказателей.Добавить("БУ");
		ВыводитьТолькоБУ = Истина;
	КонецЕсли;

	ГруппировкаКонтрагент  			= НайтиПоИмени(Таблица,"ГруппировкаКонтрагент" + СтрокаГруппировки);
	ГруппировкаДоговорКонтрагента 	= НайтиПоИмени(Таблица,"ГруппировкаДоговорКонтрагента" + СтрокаГруппировки);
	ГруппировкаПериодРасчета 		= НайтиПоИмени(Таблица,"ГруппировкаПериодРасчета" + СтрокаГруппировки);
	
	ГруппировкаКонтрагент.Использование = Истина;
	ГруппировкаДоговорКонтрагента.Использование = Истина;
	ГруппировкаПериодРасчета.Использование = Истина;
	
	// Установим отбор, чтобы не показывать строки с только нулевыми суммами
	
	МассивСумм = Новый Массив;
	МассивСумм.Добавить("Амортизация");
	МассивСумм.Добавить("СуммаПлатежа");
	МассивСумм.Добавить("КорректировкаАмортизации");
	МассивСумм.Добавить("ИтогоАмортизация");
	МассивСумм.Добавить("ВсегоРасходыПоАренде");

	ОтборГруппировки = КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ОтборГруппировки.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	ОтборГруппировки.РежимОтображения =  РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	
	МассивСумм.Добавить("ЗадолженностьНачальныйОстаток");
	МассивСумм.Добавить("ЗадолженностьПриход");
	МассивСумм.Добавить("ЗадолженностьПриходНДС");
	МассивСумм.Добавить("ЗадолженностьРасход");
	МассивСумм.Добавить("ЗадолженностьРасходНДС");
	МассивСумм.Добавить("ЗадолженностьКонечныйОстаток");
	Для Каждого ИмяСумм Из МассивСумм Цикл
		БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ОтборГруппировки, ИмяСумм,0,ВидСравненияКомпоновкиДанных.НеРавно);
	КонецЦикла;

	МассивСумм.Очистить();
	МассивСумм.Добавить("Амортизация");
	МассивСумм.Добавить("СуммаПлатежа");
	МассивСумм.Добавить("КорректировкаАмортизации");
	МассивСумм.Добавить("ИтогоАмортизация");
	МассивСумм.Добавить("ВсегоРасходыПоАренде");

	Для Каждого ИмяСумм Из МассивСумм Цикл
		Для Каждого ИмяПоказателя Из МассивПоказателей Цикл
			Если ПараметрыОтчета["Показатель" + ИмяПоказателя] Тогда 
				БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ОтборГруппировки, ИмяСумм + ИмяПоказателя,0,ВидСравненияКомпоновкиДанных.НеРавно);
			КонецЕсли;	
		КонецЦикла;
	КонецЦикла;
	
	МассивГруппировок = Новый Массив;
	МассивГруппировок.Добавить(ГруппировкаКонтрагент);
	МассивГруппировок.Добавить(ГруппировкаДоговорКонтрагента);
	МассивГруппировок.Добавить(ГруппировкаПериодРасчета);
	
	Для Каждого ИмяГруппировки Из МассивГруппировок Цикл
	
		Группа = ИмяГруппировки.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
		Группа.Расположение = РасположениеПоляКомпоновкиДанных.ОтдельнаяКолонка;
		Если ИмяГруппировки = ГруппировкаКонтрагент Тогда
	 		БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(Группа,"Контрагент");
	 	ИначеЕсли ИмяГруппировки = ГруппировкаДоговорКонтрагента Тогда
			БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(Группа,"ДоговорКонтрагента");
		ИначеЕсли ИмяГруппировки = ГруппировкаПериодРасчета Тогда
			БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(Группа,"ПериодРасчета");
		КонецЕсли;
		
		Группа = ИмяГруппировки.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
		Группа.Расположение = РасположениеПоляКомпоновкиДанных.ОтдельнаяКолонка;
		БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(Группа,"ЗадолженностьНачальныйОстаток");
		БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(Группа,"ЗадолженностьПриход");
		БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(Группа,"ЗадолженностьПриходНДС");
		БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(Группа,"ЗадолженностьРасход");
		БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(Группа,"ЗадолженностьРасходНДС");
		БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(Группа,"ЗадолженностьКонечныйОстаток");

		// Вывод названий суммовых покателей
		Если ПараметрыОтчета.ПоказательВР Тогда 
			Группа = ИмяГруппировки.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
			Группа.Расположение = РасположениеПоляКомпоновкиДанных.ОтдельнаяКолонка;
			ПодГруппа	= Группа.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
			ПодГруппа.Расположение 		= РасположениеПоляКомпоновкиДанных.Вертикально;
			
			Для Каждого ИмяПоказателя Из МассивПоказателей Цикл
				БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ПодГруппа, "Показатели." + ИмяПоказателя);
			КонецЦикла;
			
		КонецЕсли;
		
		// Расходы по амортизациии
		Если ПараметрыОтчета.ПоказательВР Тогда 
			Группа = ИмяГруппировки.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
			Группа.Расположение = РасположениеПоляКомпоновкиДанных.ОтдельнаяКолонка;
			ПодГруппа	= Группа.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
			ПодГруппа.Расположение 		= РасположениеПоляКомпоновкиДанных.Вертикально;
		Иначе
			ПодГруппа = ИмяГруппировки.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
			ПодГруппа.Расположение = РасположениеПоляКомпоновкиДанных.ОтдельнаяКолонка;
		КонецЕсли;
		Для Каждого ИмяПоказателя Из МассивПоказателей Цикл
			Если ПараметрыОтчета["Показатель" + ИмяПоказателя] Тогда 
				БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ПодГруппа, "Амортизация" + ИмяПоказателя);
			КонецЕсли;	
		КонецЦикла;

		Если Не ВыводитьТолькоБУ Тогда
			// Расходы по арендным платежам
			Группа = ИмяГруппировки.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
			Группа.Расположение = РасположениеПоляКомпоновкиДанных.ОтдельнаяКолонка;
			ПодГруппа	= Группа.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
			ПодГруппа.Расположение 		= РасположениеПоляКомпоновкиДанных.Вертикально;
			Для Каждого ИмяПоказателя Из МассивПоказателей Цикл
				Если ПараметрыОтчета["Показатель" + ИмяПоказателя] Тогда 
					БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ПодГруппа, "СуммаПлатежа" + ИмяПоказателя);
				КонецЕсли;	
			КонецЦикла;

			// Корректировка амортизации
			Группа = ИмяГруппировки.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
			Группа.Расположение = РасположениеПоляКомпоновкиДанных.ОтдельнаяКолонка;
			ПодГруппа	= Группа.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
			ПодГруппа.Расположение 		= РасположениеПоляКомпоновкиДанных.Вертикально;
			Для Каждого ИмяПоказателя Из МассивПоказателей Цикл
				Если ПараметрыОтчета["Показатель" + ИмяПоказателя] Тогда 
					БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ПодГруппа, "КорректировкаАмортизации" + ИмяПоказателя);
				КонецЕсли;	
			КонецЦикла;

			// Итого расходы по амортизации
			Группа = ИмяГруппировки.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
			Группа.Расположение = РасположениеПоляКомпоновкиДанных.ОтдельнаяКолонка;
			ПодГруппа	= Группа.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
			ПодГруппа.Расположение 		= РасположениеПоляКомпоновкиДанных.Вертикально;
			Для Каждого ИмяПоказателя Из МассивПоказателей Цикл
				Если ПараметрыОтчета["Показатель" + ИмяПоказателя] Тогда 
					БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ПодГруппа, "ИтогоАмортизация" + ИмяПоказателя);
				КонецЕсли;	
			КонецЦикла;
		КонецЕсли;		
		
		// Всего расходы по аренде
		Если Не ВыводитьТолькоБУ Тогда 
			Группа = ИмяГруппировки.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
			Группа.Расположение = РасположениеПоляКомпоновкиДанных.ОтдельнаяКолонка;
			ПодГруппа	= Группа.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
			ПодГруппа.Расположение 		= РасположениеПоляКомпоновкиДанных.Вертикально;
		Иначе
			ПодГруппа = ИмяГруппировки.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
			ПодГруппа.Расположение = РасположениеПоляКомпоновкиДанных.ОтдельнаяКолонка;
		КонецЕсли;
		Для Каждого ИмяПоказателя Из МассивПоказателей Цикл
			
			Если ПараметрыОтчета["Показатель" + ИмяПоказателя] Тогда 
				БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ПодГруппа, "ВсегоРасходыПоАренде" + ИмяПоказателя);
			КонецЕсли;	
		КонецЦикла;
		
	
	КонецЦикла;
	
	БухгалтерскиеОтчетыВызовСервера.ДобавитьОтборПоОрганизации(ПараметрыОтчета, КомпоновщикНастроек);
	
КонецПроцедуры

Функция ПолучитьНаборПоказателей() Экспорт
	
	НаборПоказателей = Новый Массив;
	НаборПоказателей.Добавить("БУ");
	НаборПоказателей.Добавить("НУ");
	НаборПоказателей.Добавить("ПР");
	НаборПоказателей.Добавить("ВР");
	
	Возврат НаборПоказателей;
	
КонецФункции

Процедура НастроитьВариантыОтчета(Настройки, ОписаниеОтчета) Экспорт
	
	ВариантыНастроек = ВариантыНастроек();
	Для Каждого Вариант Из ВариантыНастроек Цикл
		ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, Вариант.Имя).Размещение.Вставить(
			Метаданные.Подсистемы.Отчеты.Подсистемы.СправкиРасчеты.Подсистемы.БухгалтерскийУчет, "");
		ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, Вариант.Имя).Размещение.Вставить(
			Метаданные.Подсистемы.Отчеты.Подсистемы.СправкиРасчеты.Подсистемы.БухгалтерскийИНалоговыйУчет, "");
		ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, Вариант.Имя).Размещение.Вставить(
			Метаданные.Подсистемы.БухгалтерияПредприятияПодсистемы.Подсистемы.ПростойИнтерфейс.Подсистемы.Отчеты.Подсистемы.СправкиРасчеты, "");
	КонецЦикла;
	
КонецПроцедуры

//Процедура используется подсистемой варианты отчетов
//
Процедура НастройкиОтчета(Настройки) Экспорт
	
	ВариантыНастроек = ВариантыНастроек();
	Для Каждого Вариант Из ВариантыНастроек Цикл
		Настройки.ОписаниеВариантов.Вставить(Вариант.Имя,Вариант.Представление);
	КонецЦикла;	
	
КонецПроцедуры

Функция ВариантыНастроек() Экспорт
	
	Массив = Новый Массив;
	
	Массив.Добавить(Новый Структура("Имя, Представление","ПризнаниеРасходовПоОСПоступившимВЛизинг", "Признание расходов по ОС, поступившим в лизинг"));
	
	Возврат Массив;
	
КонецФункции

#КонецЕсли