#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// ВЫВОД ДАННЫХ В ТАБЛИЧНЫЙ ДОКУМЕНТ

#Область ВводДанныхВТабличныйДокумент

// Формирует список имен областей макета, которые нужно вывести.
//
// Возвращаемое значение:
//  СписокЗначений - список имен областей.
//
Функция ПолучитьСписокОбластейДляВывода(ПараметрыОтчета)

	СписокОбластейВывода = Новый СписокЗначений();

	СписокОбластейВывода.Добавить("Граница");
	СписокОбластейВывода.Добавить("ФиксированнаяЧасть");
	
	Поля = ПараметрыОтчета.ДополнительныеПоля;
	Для Каждого ТекПоле Из Поля Цикл
		Если ТекПоле.Использование Тогда
			СписокОбластейВывода.Добавить(СтрЗаменить(ТекПоле.Поле, ".", ""), ТекПоле.Представление);
		КонецЕсли;
	КонецЦикла;

	СписокОбластейВывода.Добавить("НачСальдо");
	
	Возврат СписокОбластейВывода;

КонецФункции

// Выводит в документ строку макета с указанными колонками
//
// Параметры:
//  Результат - ТабличныйДокумент, в который выводится область.
//  Макет        - ТабличныйДокумент, из которого берется область.
//  Строка       - Строка, содержащая имя области-строки.
//  Колонки      - Строка с именем выводимой колонки или
//                 Структура или СписокЗначений со списком имен колонок.
//  Выборка      - ВыборкаИзРезультатаЗапроса.
Процедура ВывестиСтрокуОбщДанные(ПараметрыОтчета,
								 Результат, 
								 Макет,
								 Строка,
								 Колонки,
								 Выборка = Неопределено,
								 ТаблицаИтоговыхПолей = Неопределено, 
								 ВыводПараметра = Ложь, 
								 ИмяПараметра = Неопределено,
								 ВыводИтога = Ложь, 
								 // Добавим параметр "ЭтоЛицевойСчет", в который передадим истина в том случае, 
								 // если текущий уровень группировки соответствует Лицевому счету, для того, 
								 // чтобы вывести данные по дополнительным полям.
								 ЭтоЛицевойСчет = Ложь)

	Если Выборка = Неопределено Тогда
		Выборка = Новый Структура();
	КонецЕсли;
	
	// Если Выборка - структура, значит выводим шапку таблицы или итоговые строки. 
	// Если Выборка - строка дерева значений, выводим строку начисления.
	
	// Выводим области "Граница" и "ФиксированнаяЧасть".
	Если ТипЗнч(Выборка) = Тип("Структура") Тогда
		Область = Макет.ПолучитьОбласть(Строка + "|Граница");
		Результат.Вывести(Область);
		Область = Макет.ПолучитьОбласть(Строка + "|ФиксированнаяЧасть");
		Результат.Присоединить(Область);
	Иначе
		Область = Макет.ПолучитьОбласть(Строка + "|Граница");
		Результат.Вывести(Область, Выборка.Уровень());
		Область = Макет.ПолучитьОбласть(Строка + "|ФиксированнаяЧасть");
		Область.Параметры.Заполнить(Выборка);
		тмЦветФона = ПараметрыОтчета.мСоотвЦветов.Получить(Выборка.Уровень());
		Если НЕ тмЦветФона = Неопределено Тогда
			Область.Область().ЦветФона = тмЦветФона;
		КонецЕсли;
		Результат.Присоединить(Область, Выборка.Уровень());
	Конецесли;
	
	// Выводим области полей, выбранных в настройках на закладке "Поля".
	Поля = ПараметрыОтчета.ДополнительныеПоля;
	Для Каждого ТекПоле Из Поля Цикл
		Если Не ТекПоле.Использование Тогда
			Продолжить;
		КонецЕсли;
		
		Область = Макет.ПолучитьОбласть("" + Строка + "|ДобавлПоле");
		Если Не ВыводПараметра И Не ВыводИтога Тогда
			Если ТипЗнч(Выборка) = Тип("Структура") Тогда
				Область.Параметры.ДобавлПоле = ТекПоле.Представление;
			Иначе
				// Получим итоговые данные для группировки в родительской строке.
				//Область.Параметры.ДобавлПоле = Выборка[ТекПоле.Поле];
				
				НаименованиеТекПоля = СтрЗаменить(ТекПоле.Поле, ".", "");
				
				Если Выборка.Родитель = Неопределено ИЛИ ЭтоЛицевойСчет Тогда
					Область.Параметры.ДобавлПоле = Выборка[НаименованиеТекПоля];
				Иначе
					Область.Параметры.ДобавлПоле = Выборка.Родитель[НаименованиеТекПоля];
				КонецЕсли;
			КонецЕсли;
			Если ТекПоле.Поле = "КоличествоПроживающих"
			 ИЛИ ТекПоле.Поле = "КоличествоЗарегистрированных" Тогда
				Область.ТекущаяОбласть.Формат = "ЧДЦ=";
			КонецЕсли;
		КонецЕсли;
		Если Не ТипЗнч(Выборка) = Тип("Структура") Тогда
			тмЦветФона = ПараметрыОтчета.мСоотвЦветов.Получить(Выборка.Уровень());
			Если НЕ тмЦветФона = Неопределено Тогда
				Область.Область().ЦветФона = тмЦветФона;
			КонецЕсли;
		КонецЕсли;
		Результат.Присоединить(Область);
	КонецЦикла;
	
	// Выводим область "НачСальдо".	
	Область = Макет.ПолучитьОбласть(Строка + "|НачСальдо");
	
	// Получим итоговые данные для группировки в родительской строке.
	//Область.Параметры.Заполнить(Выборка);
	Если Не ТипЗнч(Выборка) = Тип("Структура") И Не Выборка.Родитель = Неопределено Тогда
		Область.Параметры.Заполнить(Выборка.Родитель);
	Иначе
		Область.Параметры.Заполнить(Выборка);
	КонецЕсли;
	
	Если ВыводПараметра Тогда
		Область.Параметры.ИмяПараметра = ИмяПараметра;
	КонецЕсли;	
	Если НЕ ТипЗнч(Выборка) = Тип("Структура") Тогда
		тмЦветФона = ПараметрыОтчета.мСоотвЦветов.Получить(Выборка.Уровень());
		Если НЕ тмЦветФона = Неопределено Тогда
			Область.Область().ЦветФона = тмЦветФона;
		КонецЕсли;
	КонецЕсли;
	Результат.Присоединить(Область);
	
КонецПроцедуры

// Выводит в документ строку макета с указанными колонками.
//
// Параметры:
//  Результат - ТабличныйДокумент, в который выводится область.
//  Макет        - ТабличныйДокумент, из которого берется область.
//  Строка       - Строка, содержащая имя области-строки.
//  Колонки      - Строка с именем выводимой колонки или
//                 Структура или СписокЗначений со списком имен колонок.
//  Выборка      - ВыборкаИзРезультатаЗапроса.
Процедура ВывестиСтроку(ПараметрыОтчета,
						Результат,
						Макет,
						ППНомер, 
						Строка, 
						СоотвУровнейГруппировки,
						СпИтоговыхПолей, 
						СписокОбластейВывода, 
						СпУслугНачисления, 
						СпУслугОплаты, 
						СтрокаДерева = Неопределено,
						ТаблицаНачислений = Неопределено, 
						Итог = Ложь, 
						// Передадим в процедуру параметром текущий уровень группировки. По умолчанию значения уровня группировки = 0.
						ТекущийУровеньГруппировки = 0)
	
	Для Каждого СтрокаУровень Из СтрокаДерева.Строки Цикл
		
		// ВЫВОД СТРОК С СУММАМИ НАЧИСЛЕНИЯ
		
		ИмяГруппировки = "";
		ОчиститьИтоговыеПоля = Ложь;
		
		Если Итог Тогда
			ОчиститьИтоговыеПоля = Истина;
		Иначе
			НомерГруппировки = СоотвУровнейГруппировки.Получить(СтрокаУровень.Уровень());
			НомерГруппировки = ?(НомерГруппировки = Неопределено, 0, НомерГруппировки);
			// !!!
			//ИмяГруппировки   = ПостроительОтчета.ИзмеренияСтроки[НомерГруппировки].Имя;
			//ТипИзмерения     = ПостроительОтчета.ИзмеренияСтроки[НомерГруппировки].ТипИзмерения;
			
			НомерГруппировки = СтрокаУровень.Уровень();
			ИмяГруппировки = "ЛицевойСчет";
			НайденнаяСтрока = ПараметрыОтчета.ТаблицаСтруктуры.Найти(НомерГруппировки, "УровеньГруппировки");
			Если Не НайденнаяСтрока = Неопределено Тогда
				ИмяГруппировки = НайденнаяСтрока.ИмяГруппировки;
			КонецЕсли;
			
			Попытка
				СтрокаУровень.ЭтоГруппаЛС = ?(НЕ ЗначениеЗаполнено(СтрокаУровень.ЭтоГруппаЛС), ЛОЖЬ, СтрокаУровень.ЭтоГруппаЛС);
				ЭтоГруппаЛС = СтрокаУровень.ЭтоГруппаЛС;
			Исключение
				ЭтоГруппаЛС = Ложь;
			КонецПопытки;
			//Если НЕ ИмяГруппировки = "ЛицевойСчет" ИЛИ ТипИзмерения = ТипИзмеренияПостроителяОтчета.ТолькоИерархия
			//	ИЛИ (ТипИзмерения = ТипИзмеренияПостроителяОтчета.Иерархия И ЭтоГруппаЛС) Тогда
			//	СтрокаУровень.ЛицевойсчетОписание = СтрокаУровень[ИмяГруппировки];
			//	ОчиститьИтоговыеПоля = Истина;
			//КонецЕсли;
			
			Если НЕ ИмяГруппировки = "ЛицевойСчет" ИЛИ ЭтоГруппаЛС Тогда
				СтрокаУровень.ЛицевойсчетОписание = СтрокаУровень[ИмяГруппировки];
				ОчиститьИтоговыеПоля = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
		Если ОчиститьИтоговыеПоля Тогда
			Для Сч = 2 По СписокОбластейВывода.Количество() - 2 Цикл
				ТекКолонка  = СписокОбластейВывода[Сч];
				ТекЗначение = СпИтоговыхПолей.НайтиПоЗначению(ТекКолонка.Значение);
				Если ТекЗначение = Неопределено Тогда
					СтрокаУровень[ТекКолонка.Значение] = "";
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		// Будем выводить строку дерева только в том случае, если текущая группировка еще не была выведена.
		Если НЕ ТекущийУровеньГруппировки = СтрокаУровень.Уровень() Тогда
			ТекущийУровеньГруппировки = СтрокаУровень.Уровень();
			
			СтрокаУровень.ППНомер = ППНомер;
			
			// Выводим области строки с колонками "№", "ЛицевойСчет", "Задолженность на начало" 
			// и колонками, выбранными в настройках на закладке "Поля".
			ЭтоЛицевойСчет = (ИмяГруппировки = "ЛицевойСчет");
			ВывестиСтрокуОбщДанные(ПараметрыОтчета, Результат, Макет, Строка, СписокОбластейВывода, СтрокаУровень, , , , Итог, ЭтоЛицевойСчет);
			
			// Выводим область строки с колонкой "Начисления всего".
			Если СпУслугНачисления.Количество() > 0 Тогда
				Область = Макет.ПолучитьОбласть(Строка + "|НачисленияВсего");
				// Получим итоговые данные для группировки в родительской строке.
				Если Не СтрокаУровень.Родитель = Неопределено Тогда
					Область.Параметры.Заполнить(СтрокаУровень.Родитель);
				Иначе
					Область.Параметры.Заполнить(СтрокаУровень);
				КонецЕсли;
				
				тмЦветФона = ПараметрыОтчета.мСоотвЦветов.Получить(СтрокаУровень.Уровень());
				Если НЕ тмЦветФона = Неопределено Тогда
					Область.Область().ЦветФона = тмЦветФона;
				КонецЕсли;
				Результат.Присоединить(Область);
			КонецЕсли;
			
			// Выводим области строки с начислениями по каждой услуге.
			// Если выводим строку подвала, то передаем ТаблицуНачисления с итогами по каждой услуге.
			ВывестиСтрокуПоУслугам(	ПараметрыОтчета,
									Результат,
									Макет,
									"ИзменяемаяЧасть", 
									"Начисления",
									СпУслугНачисления,
									?(Итог, Неопределено, СтрокаУровень),
									?(Итог, ТаблицаНачислений, Неопределено) );
			
			// Выводим область строки с колонками "Пени" и "Итого начислено".
			Область = Макет.ПолучитьОбласть(Строка + "|КолонкаИтог");
			
			// Получим итоговые данные для группировки в родительской строке.
			Если Не СтрокаУровень.Родитель = Неопределено Тогда
				Область.Параметры.Заполнить(СтрокаУровень.Родитель);
			Иначе
				Область.Параметры.Заполнить(СтрокаУровень);
			КонецЕсли;
			
			тмЦветФона = ПараметрыОтчета.мСоотвЦветов.Получить(СтрокаУровень.Уровень());
			Если НЕ тмЦветФона = Неопределено Тогда
				Область.Область().ЦветФона = тмЦветФона;
			КонецЕсли;
			Результат.Присоединить(Область);
			
			// Выводим разделитель колонок.
			Область = Макет.ПолучитьОбласть(Строка + "|РазделительКолонок");
			Результат.Присоединить(Область);
			
			// Выводим область строки с колонкой "Оплаты всего".
			Область = Макет.ПолучитьОбласть(Строка + "|ОплаченоВсего");
			
			// Получим итоговые данные для группировки в родительской строке.
			Если Не СтрокаУровень.Родитель = Неопределено Тогда
				Область.Параметры.Заполнить(СтрокаУровень.Родитель);
			Иначе
				Область.Параметры.Заполнить(СтрокаУровень);
			КонецЕсли;
			
			тмЦветФона = ПараметрыОтчета.мСоотвЦветов.Получить(СтрокаУровень.Уровень());
			Если НЕ тмЦветФона = Неопределено Тогда
				Область.Область().ЦветФона = тмЦветФона;
			КонецЕсли;
			Результат.Присоединить(Область);
			
			// Выводим области строки с оплатами по услугам.
			// Если выводим подвал, то передаем ТаблицуНачисления с итогами по каждой услуге.
			ВывестиСтрокуПоУслугам(	ПараметрыОтчета,
									Результат,
									Макет, 
									"ИзменяемаяЧастьОплат", 
									"Оплаты",
									СпУслугОплаты,
									?(Итог, Неопределено,СтрокаУровень),
									?(Итог, ТаблицаНачислений, Неопределено) );
			
			Область = Макет.ПолучитьОбласть(Строка + "|ОплаченоИтог");
			
			// Получим итоговые данные для группировки в родительской строке.
			Если Не СтрокаУровень.Родитель = Неопределено Тогда
				Область.Параметры.Заполнить(СтрокаУровень.Родитель);
			Иначе
				Область.Параметры.Заполнить(СтрокаУровень);
			КонецЕсли;
			
			тмЦветФона = ПараметрыОтчета.мСоотвЦветов.Получить(СтрокаУровень.Уровень());
			Если НЕ тмЦветФона = Неопределено Тогда
				Область.Область().ЦветФона = тмЦветФона;
			КонецЕсли;
			Результат.Присоединить(Область);
			
			// Выводим разделитель колонок.
			Область = Макет.ПолучитьОбласть(Строка + "|РазделительКолонок");
			Результат.Присоединить(Область);
			
			Если ПараметрыОтчета.Пени Тогда
				// Выводим области строки с колонкой "Всего на конец месяца".
				Область = Макет.ПолучитьОбласть(Строка + "|КолонкаВсегоОплат");
				Область.Параметры.Заполнить(СтрокаУровень);
				тмЦветФона = ПараметрыОтчета.мСоотвЦветов.Получить(СтрокаУровень.Уровень());
				Если НЕ тмЦветФона = Неопределено Тогда
					Область.Область().ЦветФона = тмЦветФона;
				КонецЕсли;
				Результат.Присоединить(Область);
			КонецЕсли;
		
			// Выводим области строки с колонкой "Сумма на конец месяца".
			Область = Макет.ПолучитьОбласть(Строка + "|КолонкаИтогОплат");
			
			// Получим итоговые данные для группировки в родительской строке.
			Если Не СтрокаУровень.Родитель = Неопределено Тогда
				Область.Параметры.Заполнить(СтрокаУровень.Родитель);
			Иначе
				Область.Параметры.Заполнить(СтрокаУровень);
			КонецЕсли;
			
			тмЦветФона = ПараметрыОтчета.мСоотвЦветов.Получить(СтрокаУровень.Уровень());
			Если НЕ тмЦветФона = Неопределено Тогда
				Область.Область().ЦветФона = тмЦветФона;
			КонецЕсли;
			Результат.Присоединить(Область);
			
			ППНомер = ППНомер + 1;
			
			// ВЫВОД СТРОК СО ЛЬГОТАМИ И ПЕРЕРАСЧЕТАМИ
			// Если установлен флаг "Льготы", то выводим строку со льготами. 
			Если ПараметрыОтчета.Льгота Тогда
				ИмяПараметра = "Льготы";
				ВывестиСтрокуСПараметром( ПараметрыОтчета,
				Результат, 
				Макет, 
				СпУслугНачисления, 
				СпУслугОплаты, 
				ТаблицаНачислений, 
				СписокОбластейВывода, 
				СтрокаУровень, 
				ИмяПараметра);
			КонецЕсли;
			// Если установлен флаг "Перерасчеты", то выводим строку с перерасчетами.
			Если ПараметрыОтчета.Перерасчет Тогда
				ИмяПараметра = "Перерасчет";
				ВывестиСтрокуСПараметром( ПараметрыОтчета,
				Результат, 
				Макет, 
				СпУслугНачисления, 
				СпУслугОплаты, 
				ТаблицаНачислений, 
				СписокОбластейВывода, 
				СтрокаУровень, 
				ИмяПараметра);
			КонецЕсли;
			Если ПараметрыОтчета.Пени Тогда
				ИмяПараметра = "Пени";
				ВывестиСтрокуСПараметром(ПараметрыОтчета,
				Результат,
				Макет,
				СпУслугНачисления,
				СпУслугОплаты,
				ТаблицаНачислений,
				СписокОбластейВывода,
				СтрокаУровень, 
				ИмяПараметра);//****************************************************************
			КонецЕсли;
			
		КонецЕсли;
		
		// Выводим оставшиеся строки группировок.
		Если НЕ Итог Тогда
			Если СтрокаУровень.Строки.Количество() > 0 Тогда
				СтрокаПроверка = СтрокаУровень.Строки[0];
				Если СтрокаПроверка.Строки.Количество() > 0 Тогда
					ВывестиСтроку(	ПараметрыОтчета,
									Результат,
									Макет, 
									ППНомер,
									"СтрокаТаблицы", 
									СоотвУровнейГруппировки, 
									СпИтоговыхПолей, 
									СписокОбластейВывода, 
									СпУслугНачисления,
									СпУслугОплаты, 
									СтрокаУровень, , , 
									// Передадим в процедуру текущий уровень группировки.
									СтрокаУровень.Уровень());
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		// Выводим строку таблицы "ПодвалФактически" с итоговыми суммами. 
		Если Итог Тогда
			ВывестиПодвал( ПараметрыОтчета,
						   Результат, 
						   Макет, 
						   СпУслугНачисления, 
						   СпУслугОплаты,  
						   СписокОбластейВывода, 
						   СтрокаУровень,
						   ТаблицаНачислений );
		КонецЕсли;	
		
	КонецЦикла;
	
	// Выводим строку таблицы "Подвал".
	Если Итог Тогда
		
		СтрокаУровень = СтрокаДерева;
		
		// ВЫВОД СТРОК С СУММАМИ НАЧИСЛЕНИЯ
		
		ИмяГруппировки = "";
		ОчиститьИтоговыеПоля = Ложь;
		Если Итог Тогда
			ОчиститьИтоговыеПоля = Истина;
		Иначе
			НомерГруппировки = СоотвУровнейГруппировки.Получить(СтрокаУровень.Уровень());
			НомерГруппировки = ?(НомерГруппировки = Неопределено, 0, НомерГруппировки);
			// !!!
			//ИмяГруппировки   = ПостроительОтчета.ИзмеренияСтроки[НомерГруппировки].Имя;
			//ТипИзмерения     = ПостроительОтчета.ИзмеренияСтроки[НомерГруппировки].ТипИзмерения;
			Попытка
				СтрокаУровень.ЭтоГруппаЛС = ?(НЕ ЗначениеЗаполнено(СтрокаУровень.ЭтоГруппаЛС), ЛОЖЬ, СтрокаУровень.ЭтоГруппаЛС);
				ЭтоГруппаЛС = СтрокаУровень.ЭтоГруппаЛС;
			Исключение
				ЭтоГруппаЛС = Ложь;
			КонецПопытки;
			//Если НЕ ИмяГруппировки = "ЛицевойСчет" ИЛИ ТипИзмерения = ТипИзмеренияПостроителяОтчета.ТолькоИерархия
			//	ИЛИ (ТипИзмерения = ТипИзмеренияПостроителяОтчета.Иерархия И ЭтоГруппаЛС) Тогда
			//	СтрокаУровень.ЛицевойсчетОписание = СтрокаУровень[ИмяГруппировки];
			//	ОчиститьИтоговыеПоля = Истина;
			//КонецЕсли;
		КонецЕсли;
		
		Если ОчиститьИтоговыеПоля Тогда
			Для Сч = 2 По СписокОбластейВывода.Количество()-2 Цикл
				ТекКолонка = СписокОбластейВывода[Сч];
				ТекЗначение = СпИтоговыхПолей.НайтиПоЗначению(ТекКолонка.Значение);
				Если ТекЗначение = Неопределено Тогда
					СтрокаУровень[ТекКолонка.Значение] = "";
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		СтрокаУровень.ППНомер = ППНомер;
		
		// Выводим области строки с колонками "№", "ЛицевойСчет", "Задолженность на начало" 
		// и колонками, выбранными в настройках на закладке "Поля".
		ВывестиСтрокуОбщДанные(ПараметрыОтчета, Результат, Макет, Строка, СписокОбластейВывода, СтрокаУровень);
		
		// Выводим область строки с колонкой "Начисления всего".
		Если СпУслугНачисления.Количество() > 0 Тогда
			Область = Макет.ПолучитьОбласть(Строка + "|НачисленияВсего");
			Область.Параметры.Заполнить(СтрокаУровень);
			тмЦветФона = ПараметрыОтчета.мСоотвЦветов.Получить(СтрокаУровень.Уровень());
			Если НЕ тмЦветФона = Неопределено Тогда
				Область.Область().ЦветФона = тмЦветФона;
			КонецЕсли;
			Результат.Присоединить(Область);
		КонецЕсли;
		
		// Выводим области строки с начислениями по каждой услуге.
		// Если выводим строку подвала, то передаем ТаблицуНачисления с итогами по каждой услуге.
		ВывестиСтрокуПоУслугам(	ПараметрыОтчета,
								Результат,
								Макет,
								"ИзменяемаяЧасть", 
								"Начисления",
								СпУслугНачисления,
								?(Итог, Неопределено, СтрокаУровень),
								?(Итог, ТаблицаНачислений, Неопределено),
								Истина);
								
		// Выводим область строки с колонками "Пени" и "Итого начислено".
		Область = Макет.ПолучитьОбласть(Строка + "|КолонкаИтог");
		Область.Параметры.Заполнить(СтрокаУровень);
		тмЦветФона = ПараметрыОтчета.мСоотвЦветов.Получить(СтрокаУровень.Уровень());
		Если НЕ тмЦветФона = Неопределено Тогда
			Область.Область().ЦветФона = тмЦветФона;
		КонецЕсли;
		Результат.Присоединить(Область);
		
		// Выводим разделитель колонок.
		Область = Макет.ПолучитьОбласть(Строка + "|РазделительКолонок");
		Результат.Присоединить(Область);
		
		// Выводим область строки с колонкой "Оплаты всего".
		Область = Макет.ПолучитьОбласть(Строка + "|ОплаченоВсего");
		Область.Параметры.Заполнить(СтрокаУровень);
		тмЦветФона = ПараметрыОтчета.мСоотвЦветов.Получить(СтрокаУровень.Уровень());
		Если НЕ тмЦветФона = Неопределено Тогда
			Область.Область().ЦветФона = тмЦветФона;
		КонецЕсли;
		Результат.Присоединить(Область);
		
		// Выводим области строки с оплатами по услугам.
		// Если выводим подвал, то передаем ТаблицуНачисления с итогами по каждой услуге.
		ВывестиСтрокуПоУслугам(	ПараметрыОтчета,
								Результат,
								Макет, 
								"ИзменяемаяЧастьОплат", 
								"Оплаты",
								СпУслугОплаты,
								?(Итог, Неопределено,СтрокаУровень),
								?(Итог, ТаблицаНачислений, Неопределено),
								Истина);
								
		Область = Макет.ПолучитьОбласть(Строка + "|ОплаченоИтог");
		Область.Параметры.Заполнить(СтрокаУровень);
		тмЦветФона = ПараметрыОтчета.мСоотвЦветов.Получить(СтрокаУровень.Уровень());
		Если НЕ тмЦветФона = Неопределено Тогда
			Область.Область().ЦветФона = тмЦветФона;
		КонецЕсли;
		Результат.Присоединить(Область);
		
		// Выводим разделитель колонок.
		Область = Макет.ПолучитьОбласть(Строка + "|РазделительКолонок");
		Результат.Присоединить(Область);
		
		Если ПараметрыОтчета.Пени Тогда
			// Выводим области строки с колонкой "Всего на конец месяца".
			Область = Макет.ПолучитьОбласть(Строка + "|КолонкаВсегоОплат");
			Область.Параметры.Заполнить(СтрокаУровень);
			тмЦветФона = ПараметрыОтчета.мСоотвЦветов.Получить(СтрокаУровень.Уровень());
			Если НЕ тмЦветФона = Неопределено Тогда
				Область.Область().ЦветФона = тмЦветФона;
			КонецЕсли;
			Результат.Присоединить(Область);
		КонецЕсли;
		
		// Выводим области строки с колонкой "Сумма на конец месяца".
		Область = Макет.ПолучитьОбласть(Строка + "|КолонкаИтогОплат");
		Область.Параметры.Заполнить(СтрокаУровень);
		тмЦветФона = ПараметрыОтчета.мСоотвЦветов.Получить(СтрокаУровень.Уровень());
		Если НЕ тмЦветФона = Неопределено Тогда
			Область.Область().ЦветФона = тмЦветФона;
		КонецЕсли;
		Результат.Присоединить(Область);
		
		ППНомер = ППНомер + 1;
		
		// ВЫВОД СТРОК СО ЛЬГОТАМИ И ПЕРЕРАСЧЕТАМИ
		// Если установлен флаг "Льготы", то выводим строку со льготами. 
		Если ПараметрыОтчета.Льгота Тогда
			ИмяПараметра = "Льготы";
			ВывестиСтрокуСПараметром( ПараметрыОтчета,
									  Результат, 
									  Макет, 
									  СпУслугНачисления, 
									  СпУслугОплаты, 
									  ТаблицаНачислений, 
									  СписокОбластейВывода, 
									  СтрокаУровень, 
									  ИмяПараметра,
									  Итог);
		КонецЕсли;
		// Если установлен флаг "Перерасчеты", то выводим строку с перерасчетами.
		Если ПараметрыОтчета.Перерасчет Тогда
			ИмяПараметра = "Перерасчет";
			ВывестиСтрокуСПараметром( ПараметрыОтчета,
									  Результат, 
									  Макет, 
									  СпУслугНачисления, 
									  СпУслугОплаты, 
									  ТаблицаНачислений, 
									  СписокОбластейВывода, 
									  СтрокаУровень, 
									  ИмяПараметра,
									  Итог);
		КонецЕсли;			
		
		// Если установлен флаг "Пени", то выводим строку с пени.
		Если ПараметрыОтчета.Пени Тогда
			ИмяПараметра = "Пени";
			ВывестиСтрокуСПараметром( ПараметрыОтчета,
									  Результат, 
									  Макет, 
									  СпУслугНачисления, 
									  СпУслугОплаты, 
									  ТаблицаНачислений, 
									  СписокОбластейВывода, 
									  СтрокаУровень, 
									  ИмяПараметра,
									  Итог);
		КонецЕсли;			

		// Выводим оставшиеся строки группировок.
		Если НЕ Итог Тогда
			Если СтрокаУровень.Строки.Количество() > 0 Тогда
				СтрокаПроверка = СтрокаУровень.Строки[0];
				Если СтрокаПроверка.Строки.Количество() > 0 Тогда
					ВывестиСтроку(	ПараметрыОтчета,
									Результат,
									Макет, 
									ППНомер,
									"СтрокаТаблицы", 
									СоотвУровнейГруппировки, 
									СпИтоговыхПолей, 
									СписокОбластейВывода, 
									СпУслугНачисления,
									СпУслугОплаты, 
									СтрокаУровень );
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		ВывестиПодвал(ПараметрыОтчета,
					  Результат, 
					  Макет, 
					  СпУслугНачисления, 
					  СпУслугОплаты,  
					  СписокОбластейВывода, 
					  СтрокаУровень,
					  ТаблицаНачислений);
	КонецЕсли;
	
КонецПроцедуры

// Получает соответствие уровней группировки и дерева начислений.
Функция ПолучитьСоотвУровнейГруппировки()

	СоотвУровнейГруппировки = Новый Соответствие;
	УровеньДерева = 1;
	// !!!
	//ПоляГруппировки = ПостроительОтчета.ИзмеренияСтроки;
	//Для Сч = 0 По ПоляГруппировки.Количество()-1 Цикл
	//	ТекГруппировка = ПоляГруппировки[Сч];
	//	СоотвУровнейГруппировки.Вставить(УровеньДерева, Сч);
	//	УровеньДерева = УровеньДерева + 1;
	//	Если ТекГруппировка.ТипИзмерения = ТипИзмеренияПостроителяОтчета.Иерархия Тогда
	//		СоотвУровнейГруппировки.Вставить(УровеньДерева, Сч);
	//		УровеньДерева = УровеньДерева + 1;
	//	КонецЕсли;
	//КонецЦикла;
	
	Возврат СоотвУровнейГруппировки;

КонецФункции // ПолучитьСоотвУровнейГруппировки()

// Подсчитывает итоговые суммы количественных полей, выбранных в настройках
// на закладке "Поля".
Процедура ПересчитатьИтоговыеПоля(СтрокаДерева, СпИтоговыхПолей, СписокОбластейВывода, ТекущийЛС = "")
	
	Для Каждого ТекСтрока Из СтрокаДерева.Строки Цикл
		
		Если ТекСтрока.Строки.Количество() > 0 Тогда
			ПересчитатьИтоговыеПоля(ТекСтрока, СпИтоговыхПолей, СписокОбластейВывода);
			Для Каждого ТекКолонка Из СпИтоговыхПолей Цикл
				ТекЗначение = СписокОбластейВывода.НайтиПоЗначению(ТекКолонка.Значение);
				Если НЕ ТекЗначение = Неопределено Тогда
					ТекСтрока[ТекЗначение.Значение] = ТекСтрока.Строки.Итог(ТекЗначение.Значение);
				КонецЕсли;
			КонецЦикла;
		Иначе
			Если ТекущийЛС = ТекСтрока.ЛицевойСчетОписание Тогда
				Для Каждого ТекКолонка Из СпИтоговыхПолей Цикл
					ТекЗначение = СписокОбластейВывода.НайтиПоЗначению(ТекКолонка.Значение);
					Если НЕ ТекЗначение = Неопределено Тогда
						ТекСтрока[ТекЗначение.Значение] = 0;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			ТекущийЛС = ТекСтрока.ЛицевойСчетОписание;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ПересчитатьИтоговыеПоля()

// Выводит строку "Подвал".
//
Процедура ВывестиПодвал(ПараметрыОтчета, Результат, Макет, СпУслугНачисления, СпУслугОплаты, СписокОбластейВывода, СтрокаУровень, ТаблицаНачислений)
	
	Итог = Истина;
	
	СтрокаФактически = "ПодвалФактически";
	
	// Выводим область строки с фиксированными колонками и колонками, выбранными в настройках
	// на закладке "Поля".
	ВывестиСтрокуОбщДанные(ПараметрыОтчета, Результат, Макет, СтрокаФактически, СписокОбластейВывода, СтрокаУровень, , , , Истина);
	
	// Выводим область строки с колонкой "Начисления всего".
	Если СпУслугНачисления.Количество() > 0 Тогда
		Область = Макет.ПолучитьОбласть(СтрокаФактически + "|НачисленияВсего");
		тмЦветФона = ПараметрыОтчета.мСоотвЦветов.Получить(СтрокаУровень.Уровень());
		Область.Параметры.ИтоговаяСуммаНачисления = СтрокаУровень.ИтоговаяСуммаНачисления;
		Если НЕ тмЦветФона = Неопределено Тогда
			Область.Область().ЦветФона = тмЦветФона;
		КонецЕсли;
		Результат.Присоединить(Область);
	КонецЕсли;
	
	// Выводим область строки с начислениями по услугам.
	ВывестиСтрокуПоУслугам( ПараметрыОтчета,
							Результат,
							Макет,
							"ИзменяемаяЧасть", 
							"Начисления",
							СпУслугНачисления,
							Неопределено,
							ТаблицаНачислений,
							, ,
							Истина);
	
	// Выводим область строки с колонкой "Начислено итого".
	Область = Макет.ПолучитьОбласть(СтрокаФактически + "|КолонкаИтог");
	тмЦветФона = ПараметрыОтчета.мСоотвЦветов.Получить(СтрокаУровень.Уровень());
	Если НЕ тмЦветФона = Неопределено Тогда
		Область.Область().ЦветФона = тмЦветФона;
	КонецЕсли;
	Результат.Присоединить(Область);
	
	// Выводим разделитель колонок.
	Область = Макет.ПолучитьОбласть(СтрокаФактически + "|РазделительКолонок");
	Результат.Присоединить(Область);
	
	// Выводим область строка с колонкой "Оплаты всего".
	Область = Макет.ПолучитьОбласть(СтрокаФактически + "|ОплаченоВсего");
	тмЦветФона = ПараметрыОтчета.мСоотвЦветов.Получить(СтрокаУровень.Уровень());
	Если НЕ тмЦветФона = Неопределено Тогда
		Область.Область().ЦветФона = тмЦветФона;
	КонецЕсли;
	Область.Параметры.Заполнить(СтрокаУровень);
	Результат.Присоединить(Область);
	
	// Выводим область строки с оплатами по услугам.
	ВывестиСтрокуПоУслугам( ПараметрыОтчета,
							Результат,
							Макет, 
							"ИзменяемаяЧастьОплат", 
							"Оплаты",
							СпУслугОплаты,
							Неопределено,
							ТаблицаНачислений,
							, , 
							Истина);
							
	Область = Макет.ПолучитьОбласть(СтрокаФактически + "|ОплаченоИтог");
	тмЦветФона = ПараметрыОтчета.мСоотвЦветов.Получить(СтрокаУровень.Уровень());
	Если НЕ тмЦветФона = Неопределено Тогда
		Область.Область().ЦветФона = тмЦветФона;
	КонецЕсли;
	Область.Параметры.Заполнить(СтрокаУровень);
	Результат.Присоединить(Область);
	
	// Выводим разделитель колонок.
	Область = Макет.ПолучитьОбласть(СтрокаФактически + "|РазделительКолонок");
	Результат.Присоединить(Область);
	
	Если ПараметрыОтчета.Пени Тогда
		// Выводим область строки с колонкой "Сумма на конец месяца".
		Область = Макет.ПолучитьОбласть(СтрокаФактически + "|КолонкаВсегоОплат");
		тмЦветФона = ПараметрыОтчета.мСоотвЦветов.Получить(СтрокаУровень.Уровень());
		Если НЕ тмЦветФона = Неопределено Тогда
			Область.Область().ЦветФона = тмЦветФона;
		КонецЕсли;
		Результат.Присоединить(Область);
	КонецЕсли;
	
	// Выводим область строки с колонкой "Сумма на конец месяца".
	Область = Макет.ПолучитьОбласть(СтрокаФактически + "|КолонкаИтогОплат");
	тмЦветФона = ПараметрыОтчета.мСоотвЦветов.Получить(СтрокаУровень.Уровень());
	Если НЕ тмЦветФона = Неопределено Тогда
		Область.Область().ЦветФона = тмЦветФона;
	КонецЕсли;
	Результат.Присоединить(Область);
	
КонецПроцедуры // ВывестиПодвал()

// Выводит строку с параметром. 
// Нужный параметр определяется через перменную ИмяПараметра.
Процедура ВывестиСтрокуСПараметром(ПараметрыОтчета, Результат, Макет, СпУслугНачисления, СпУслугОплаты, ТаблицаНачислений, СписокОбластейВывода, СтрокаУровень, ИмяПараметра, Итог = Ложь)

	Если Итог Тогда
		СтрокаПараметра = "ПодвалПараметр";
	Иначе
		СтрокаПараметра = "СтрокаПараметра";
	КонецЕсли;
	
	ВывестиСтрокуОбщДанные(ПараметрыОтчета, Результат, Макет, СтрокаПараметра, СписокОбластейВывода, СтрокаУровень, , Истина, ИмяПараметра);
	
	Если СпУслугНачисления.Количество() > 0 Тогда
		Область = Макет.ПолучитьОбласть(СтрокаПараметра + "|НачисленияВсего");
		
		// Получим итоговые данные для группировки в родительской строке.
		Если Не СтрокаУровень.Родитель = Неопределено Тогда
			ВрСтрокаУровень = СтрокаУровень.Родитель;
		Иначе
			ВрСтрокаУровень = СтрокаУровень;
		КонецЕсли;
		
		Если ИмяПараметра =  "Льготы" Тогда
			Область.Параметры.СуммаВсего = ВрСтрокаУровень.СуммаЛьготы;
		ИначеЕсли ИмяПараметра = "Пени" Тогда	//************************************************************************
			Область.Параметры.СуммаВсего = ВрСтрокаУровень.СуммаПени;
		ИначеЕсли ИмяПараметра = "Перерасчет" Тогда
			Область.Параметры.СуммаВсего = ВрСтрокаУровень.СуммаПерерасчета;
		КонецЕсли;	
		тмЦветФона = ПараметрыОтчета.мСоотвЦветов.Получить(СтрокаУровень.Уровень());
		Если НЕ тмЦветФона = Неопределено Тогда
			Область.Область().ЦветФона = тмЦветФона;
		КонецЕсли;
		Результат.Присоединить(Область);
	КонецЕсли;
	
	ВывестиСтрокуПоУслугам(	ПараметрыОтчета,
							Результат,
							Макет,
							"ИзменяемаяЧасть", 
							"Начисления",
							СпУслугНачисления,
							?(Итог, Неопределено, СтрокаУровень),
							?(Итог, ТаблицаНачислений, Неопределено),
							Истина,
							ИмяПараметра,
							Итог);
	
	Область = Макет.ПолучитьОбласть(СтрокаПараметра + "|КолонкаИтог");
	тмЦветФона = ПараметрыОтчета.мСоотвЦветов.Получить(СтрокаУровень.Уровень());
	Если НЕ тмЦветФона = Неопределено Тогда
		Область.Область().ЦветФона = тмЦветФона;
	КонецЕсли;
	Результат.Присоединить(Область);
	
	Область = Макет.ПолучитьОбласть(СтрокаПараметра + "|РазделительКолонок");
	Результат.Присоединить(Область);
	
	Область = Макет.ПолучитьОбласть(СтрокаПараметра + "|ОплаченоВсего");
	тмЦветФона = ПараметрыОтчета.мСоотвЦветов.Получить(СтрокаУровень.Уровень());
	Если НЕ тмЦветФона = Неопределено Тогда
		Область.Область().ЦветФона = тмЦветФона;
	КонецЕсли;
	Если ИмяПараметра = "Пени" Тогда	// Оформляем пунктиром строку с оплаченными пенями.
		ТипЛинии = ТипЛинииЯчейкиТабличногоДокумента.ЧастыйПунктир;
		Область.Область().ГраницаСверху = Новый Линия(ТипЛинии, 1);
		
		Если Итог Тогда
			Область.Параметры.СуммаОплаты = СтрокаУровень.СуммаОплатыПени;
		Иначе
			Область.Параметры.Заполнить(СтрокаУровень);
		КонецЕсли;
		
	КонецЕсли;
	Результат.Присоединить(Область);
	
	ВывестиСтрокуПоУслугам(	ПараметрыОтчета,
							Результат,
							Макет, 
							"ИзменяемаяЧастьОплат", 
							"Оплаты",
							СпУслугОплаты,
							?(Итог, Неопределено, СтрокаУровень),
							?(Итог, ТаблицаНачислений, Неопределено),
							Истина,
							ИмяПараметра,
							Итог);
	
	Область = Макет.ПолучитьОбласть(СтрокаПараметра + "|ОплаченоИтог");
	тмЦветФона = ПараметрыОтчета.мСоотвЦветов.Получить(СтрокаУровень.Уровень());
	Если НЕ тмЦветФона = Неопределено Тогда
		Область.Область().ЦветФона = тмЦветФона;
	КонецЕсли;
	
	Результат.Присоединить(Область);
	
	Область = Макет.ПолучитьОбласть(СтрокаПараметра + "|РазделительКолонок");
	Результат.Присоединить(Область);
	
	Если ПараметрыОтчета.Пени Тогда
		Область = Макет.ПолучитьОбласть(СтрокаПараметра + "|КолонкаВсегоОплат");
		тмЦветФона = ПараметрыОтчета.мСоотвЦветов.Получить(СтрокаУровень.Уровень());
		Если НЕ тмЦветФона = Неопределено Тогда
			Область.Область().ЦветФона = тмЦветФона;
		КонецЕсли;
		Если ИмяПараметра = "Пени" Тогда	// Оформляем пунктиром строку с пенями.
			ТипЛинии = ТипЛинииЯчейкиТабличногоДокумента.ЧастыйПунктир;
			Область.Область().ГраницаСверху = Новый Линия(ТипЛинии, 1);
			Если Итог Тогда
				Область.Параметры.СуммаНаКонецМесяца = СтрокаУровень.СуммаНаКонецМесяцаПени;
			Иначе
				Область.Параметры.Заполнить(СтрокаУровень);
			КонецЕсли;
		КонецЕсли;
		
		Результат.Присоединить(Область);
	КонецЕсли;
	
	Область = Макет.ПолучитьОбласть(СтрокаПараметра + "|КолонкаИтогОплат");
	тмЦветФона = ПараметрыОтчета.мСоотвЦветов.Получить(СтрокаУровень.Уровень());
	Если НЕ тмЦветФона = Неопределено Тогда
		Область.Область().ЦветФона = тмЦветФона;
	КонецЕсли;
	Результат.Присоединить(Область);
		
КонецПроцедуры // ВывестиСтрокуСПараметром()

// Выводит в документ строку макета с указанными колонками.
//
// Параметры:
//  Результат - ТабличныйДокумент, в который выводится область.
//  Макет        - ТабличныйДокумент, из которого берется область.
//  Строка       - Строка, содержащая имя области-строки.
//  Колонки      - Строка с именем выводимой колонки или
//                 Структура или СписокЗначений со списком имен колонок.
//  Выборка      - ВыборкаИзРезультатаЗапроса.
Процедура ВывестиСтрокуПоУслугам(ПараметрыОтчета,
								 Результат, 
								 Макет, 
								 Колонка,
								 ТипСуммы,
								 СпУслуг, 
								 СтрокаДерева = Неопределено,
								 ТаблицаНачислений = Неопределено, 
								 ВыводПараметра = Ложь,
								 ИмяПараметра = Неопределено,
								 ВыводИтога = Ложь)
	
	// Вывод подвала. 
	// В зависимости от значения переменной "ВыводИтога" выводим строку с фактическими 
	// или итоговыми начислениями.
	Если СтрокаДерева = Неопределено Тогда
		Для Каждого ТекСтрока Из СпУслуг Цикл
			Если Не ВыводИтога Тогда
				Область = Макет.ПолучитьОбласть("ПодвалСтрока|" + Колонка);
			Иначе
				Область = Макет.ПолучитьОбласть("ПодвалПараметр|" + Колонка);
				Если ИмяПараметра = Неопределено Тогда
					Область = Макет.ПолучитьОбласть("ПодвалФактически|" + Колонка);
				ИначеЕсли ИмяПараметра = "Льготы" Тогда
					ИмяПоляДляЗаполненияПараметра = "СуммаЛьготы";
					Если ТипСуммы = "Оплаты" Тогда
						ИмяПоляДляЗаполненияПараметра = Неопределено;
					КонецЕсли;
				ИначеЕсли ИмяПараметра = "Пени" Тогда
					ИмяПоляДляЗаполненияПараметра = "СуммаПени";
					Если ТипСуммы = "Оплаты" Тогда
						ИмяПоляДляЗаполненияПараметра = "СуммаОплатыПени";
					КонецЕсли;
				ИначеЕсли ИмяПараметра = "Перерасчет" Тогда
					ИмяПоляДляЗаполненияПараметра = "СуммаПерерасчета";
					Если ТипСуммы = "Оплаты" Тогда
						ИмяПоляДляЗаполненияПараметра = Неопределено;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			СтрокаНачислений = ТаблицаНачислений.Найти(ТекСтрока.Значение, "Услуга");
			Если НЕ СтрокаНачислений = Неопределено Тогда
				Если ИмяПоляДляЗаполненияПараметра = Неопределено Тогда
					Область.Параметры.Заполнить(СтрокаНачислений);
				Иначе
					Область.Параметры.СуммаУслуга = СтрокаНачислений[ИмяПоляДляЗаполненияПараметра];
				КонецЕсли;
			КонецЕсли;
			
			Результат.Присоединить(Область);
		КонецЦикла;
		
	// Вывод строки с параметром(т.е. со льготами или перерасчетами) или строки с 
	// с итоговыми начислениями.
	ИначеЕсли ВыводПараметра Или ВыводИтога Тогда
	    // область колонок начисления.
		Если ТипСуммы = "Начисления" Тогда
			Для Каждого  ТекСтрока Из СпУслуг Цикл
				Если ВыводИтога Тогда
					Область = Макет.ПолучитьОбласть("ПодвалФактически|" + Колонка);
				Иначе	
					Область = Макет.ПолучитьОбласть("СтрокаПараметра|" + Колонка);
				КонецЕсли;
				
				// Подсчитываем итоги начисления по каждой услуге.
				СуммаПараметра = 0;
				
				// Получим итоговые данные для группировки в родительской строке.
				// СтрокиУслуги = СтрокаДерева.Строки.НайтиСтроки(Новый Структура("Услуга", ТекСтрока.Значение), Истина).
				Если Не СтрокаДерева.Родитель = Неопределено Тогда
					СтрокиУслуги = СтрокаДерева.Родитель.Строки.НайтиСтроки(Новый Структура("Услуга", ТекСтрока.Значение), Истина);   //*************************
				Иначе
					СтрокиУслуги = СтрокаДерева.Строки.НайтиСтроки(Новый Структура("Услуга", ТекСтрока.Значение), Истина);   //*************************
				КонецЕсли;
				// возьмем те строки, где ППНомер = 0.
				врСтрокиУслуги = Новый Массив;
				Для Каждого СтрокаМассива Из СтрокиУслуги Цикл
					Если СтрокаМассива.ППНомер = 0 Тогда
						врСтрокиУслуги.Добавить(СтрокаМассива);
					КонецЕсли;
				КонецЦикла;
				СтрокиУслуги = врСтрокиУслуги;
				
				Для Каждого ТекСтрокаУслуги Из СтрокиУслуги Цикл
					Если ИмяПараметра = "Льготы" Тогда
						СуммаПараметра = СуммаПараметра + ТекСтрокаУслуги.СуммаЛьготы;
					ИначеЕсли ИмяПараметра = "Пени" Тогда  
						СуммаПараметра = СуммаПараметра + ТекСтрокаУслуги.СуммаПени;
					ИначеЕсли ИмяПараметра = "Перерасчет" Тогда
						СуммаПараметра = СуммаПараметра + ТекСтрокаУслуги.СуммаПерерасчета;
					КонецЕсли;
				КонецЦикла;
				
				Область = Макет.ПолучитьОбласть("СтрокаПараметра|" + Колонка);
				
				тмЦветФона = ПараметрыОтчета.мСоотвЦветов.Получить(СтрокаДерева.Уровень());
				Если НЕ тмЦветФона = Неопределено Тогда
					Область.Область().ЦветФона = тмЦветФона;
				КонецЕсли;
				Область.Параметры.СуммаУслуга = СуммаПараметра;
				Результат.Присоединить(Область);
			КонецЦикла;
			
		// область колонок оплат.
		Иначе
			Для Каждого ТекСтрока Из СпУслуг Цикл
				СуммаОплатыПени = 0;
				ИтогоОплачено = 0;
				
				// Получим итоговые данные для группировки в родительской строке.
				// СтрокиУслуги = СтрокаДерева.Строки.НайтиСтроки(Новый Структура("Услуга", ТекСтрока.Значение), Истина).
				Если Не СтрокаДерева.Родитель = Неопределено Тогда
					СтрокиУслуги = СтрокаДерева.Родитель.Строки.НайтиСтроки(Новый Структура("Услуга", ТекСтрока.Значение), Истина);
				Иначе
					СтрокиУслуги = СтрокаДерева.Строки.НайтиСтроки(Новый Структура("Услуга", ТекСтрока.Значение), Истина);
				КонецЕсли;
				// возьмем те строки, где ППНомер = 0.
				врСтрокиУслуги = Новый Массив;
				Для Каждого СтрокаМассива Из СтрокиУслуги Цикл
					Если СтрокаМассива.ППНомер = 0 Тогда
						врСтрокиУслуги.Добавить(СтрокаМассива);
					КонецЕсли;
				КонецЦикла;
				СтрокиУслуги = врСтрокиУслуги;
				
				Для Каждого ТекСтрокаУслуги Из СтрокиУслуги Цикл
					Если ИмяПараметра = "Пени" Тогда
						СуммаОплатыПени = СуммаОплатыПени + ТекСтрокаУслуги.СуммаОплатыПени;
						ИтогоОплачено =  ИтогоОплачено + ТекСтрокаУслуги.ИтогоОплачено;
					КонецЕсли;	
				КонецЦикла;	
				
				Область = Макет.ПолучитьОбласть("СтрокаПараметра|" + Колонка);
				Область.Параметры.СуммаОплатыПени = СуммаОплатыПени;
				тмЦветФона = ПараметрыОтчета.мСоотвЦветов.Получить(СтрокаДерева.Уровень());
				Если НЕ тмЦветФона = Неопределено Тогда
					Область.Область().ЦветФона = тмЦветФона;
				КонецЕсли;
				Если ИмяПараметра = "Пени" Тогда
					ТипЛинии = ТипЛинииЯчейкиТабличногоДокумента.ЧастыйПунктир;
					Область.Область().ГраницаСверху = Новый Линия(ТипЛинии, 1);	
				КонецЕсли;
				Результат.Присоединить(Область);
			КонецЦикла;
		КонецЕсли;
		
	// Вывод остальные строки начисления.
	Иначе
	    // область колонок начисления.
		Если ТипСуммы = "Начисления" Тогда
			Для Каждого ТекСтрока Из СпУслуг Цикл
				
				// Подсчитываем итоги начисления по каждой услуге.
				СуммаНачисления = 0;
				СуммаЛьготы = 0;
				
				// Получим итоговые данные для группировки в родительской строке.
				// СтрокиУслуги = СтрокаДерева.Строки.НайтиСтроки(Новый Структура("Услуга", ТекСтрока.Значение), Истина).
				Если Не СтрокаДерева.Родитель = Неопределено Тогда
					СтрокиУслуги = СтрокаДерева.Родитель.Строки.НайтиСтроки(Новый Структура("Услуга", ТекСтрока.Значение), Истина);   //*************************
				Иначе
					СтрокиУслуги = СтрокаДерева.Строки.НайтиСтроки(Новый Структура("Услуга", ТекСтрока.Значение), Истина);   //*************************
				КонецЕсли;
				// возьмем те строки, где ППНомер = 0.
				врСтрокиУслуги = Новый Массив;
				Для Каждого СтрокаМассива Из СтрокиУслуги Цикл
					Если СтрокаМассива.ППНомер = 0 Тогда
						врСтрокиУслуги.Добавить(СтрокаМассива);
					КонецЕсли;
				КонецЦикла;
				СтрокиУслуги = врСтрокиУслуги;
				
				Для Каждого ТекСтрокаУслуги Из СтрокиУслуги Цикл
					СуммаНачисления = СуммаНачисления + ТекСтрокаУслуги.СуммаНачисления;
					СуммаЛьготы = СуммаЛьготы + ТекСтрокаУслуги.СуммаЛьготы;
				КонецЦикла;
				
				Область = Макет.ПолучитьОбласть("СтрокаТаблицы|" + Колонка);
				тмЦветФона = ПараметрыОтчета.мСоотвЦветов.Получить(СтрокаДерева.Уровень());
				Если НЕ тмЦветФона = Неопределено Тогда
					Область.Область().ЦветФона = тмЦветФона;
				КонецЕсли;
				Область.Параметры.СуммаНачисления = СуммаНачисления;
				Результат.Присоединить(Область);
			КонецЦикла;
		Иначе
			
			// область колонок оплат.
			Для Каждого ТекСтрока Из СпУслуг Цикл
				
				// Подсчитываем итоги оплат по каждой услуге.
				СуммаОплаты = 0;
				
				// Получим итоговые данные для группировки в родительской строке.
				// СтрокиУслуги = СтрокаДерева.Строки.НайтиСтроки(Новый Структура("Услуга", ТекСтрока.Значение), Истина).
				Если Не СтрокаДерева.Родитель = Неопределено Тогда
					СтрокиУслуги = СтрокаДерева.Родитель.Строки.НайтиСтроки(Новый Структура("Услуга", ТекСтрока.Значение), Истина);
				Иначе
					СтрокиУслуги = СтрокаДерева.Строки.НайтиСтроки(Новый Структура("Услуга", ТекСтрока.Значение), Истина);
				КонецЕсли;
				// возьмем те строки, где ППНомер = 0.
				врСтрокиУслуги = Новый Массив;
				Для Каждого СтрокаМассива Из СтрокиУслуги Цикл
					Если СтрокаМассива.ППНомер = 0 Тогда
						врСтрокиУслуги.Добавить(СтрокаМассива);
					КонецЕсли;
				КонецЦикла;
				СтрокиУслуги = врСтрокиУслуги;
				
				Для Каждого ТекСтрокаУслуги Из СтрокиУслуги Цикл
					СуммаОплаты = СуммаОплаты + ТекСтрокаУслуги.СуммаОплаты;
				КонецЦикла;
				Область = Макет.ПолучитьОбласть("СтрокаТаблицы|" + Колонка);
				тмЦветФона = ПараметрыОтчета.мСоотвЦветов.Получить(СтрокаДерева.Уровень());
				Если НЕ тмЦветФона = Неопределено Тогда
					Область.Область().ЦветФона = тмЦветФона;
				КонецЕсли;
				Область.Параметры.СуммаОплаты = СуммаОплаты;
				Результат.Присоединить(Область);
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

#Область ПрограммныйИнтерфейс

// Процедура выводит данные коллекции в табличный документ.
// Используется, если вывести результат надо через обычный макет.
//
// Параметры:
//  ПараметрыОтчета  - Структура - Структура параметров отчета.
//  Таблица          - ТаблицаЗначений - Таблица с данными по начислениям.
//  Дерево           - ДеревоЗначений - Данные по начислениям в форме дерева.
//  Результат        - ЛюбаяСсылка - Ссылка на переменную результата.
//
Процедура ВывестиДанныеКоллекцииВДокумент(ПараметрыОтчета, Таблица = Неопределено, Дерево = Неопределено, Результат) Экспорт
	
	Результат = Новый ТабличныйДокумент;
	
	мСоотвЦветов = Новый Соответствие;
	мСоотвЦветов.Вставить(1, Новый Цвет(214,234,255));
	мСоотвЦветов.Вставить(2, Новый Цвет(255,255,255));
	мСоотвЦветов.Вставить(3, Новый Цвет(231,255,239));
	мСоотвЦветов.Вставить(4, Новый Цвет(255,255,255));
	мСоотвЦветов.Вставить(5, Новый Цвет(229,251,255));
	мСоотвЦветов.Вставить(6, Новый Цвет(255,255,255));
	мСоотвЦветов.Вставить(7, Новый Цвет(235,240,255));
	мСоотвЦветов.Вставить(8, Новый Цвет(255,255,255));
	
	ПараметрыОтчета.Вставить("мСоотвЦветов", мСоотвЦветов);
	
	ТаблицаНачислений = Таблица;
	ДеревоНачислений  = Дерево;
	
	Макет = УПЖКХ_ТиповыеМетодыСервер.ПолучитьМакет("Отчет.КВП_СводнаяВедомость.ПФ_MXL_Ведомость");
	
	// Получает список областей вывода печатной формы, предшествующих области "НачисленияВсего", из которых
	// "Граница", "ФиксированнаяЧасть" и "НачальноеСальдо" являются обязательными. Остальные области
	// выводятся взависимости от выбранных полей в настройках на закладке "Поля".
	СписокОбластейВывода = Новый СписокЗначений();
	СписокОбластейВывода = ПолучитьСписокОбластейДляВывода(ПараметрыОтчета);
	//УстановитьПредставлениеПолей();
	
	// ЗАГОЛОВОК
	ОбластьЗаголовка = Макет.ПолучитьОбласть("Заголовок");
	ОбластьЗаголовка.Параметры.Заголовок = ПолучитьТекстЗаголовка(ПараметрыОтчета);
	ОбластьЗаголовка.Параметры.ОписаниеОрганизации = УПЖКХ_ТиповыеМетодыВызовСервера.ПолучитьТекстОрганизация(ПараметрыОтчета.Организация, ПараметрыОтчета.ВключатьОбособленныеПодразделения);
	
	Результат.Вывести(ОбластьЗаголовка);
	
	// ШАПКА
	// Выводит шапку таблицы.
	ПерваяСтрокаШапки = Результат.ВысотаТаблицы + 1;
	ВывестиСтрокуОбщДанные(ПараметрыОтчета, Результат, Макет, "Шапка", СписокОбластейВывода);
	ПоследняяСтрокаШапки = Результат.ВысотаТаблицы;
	
	// Получим список услуг с начислениями и оплатами.
	СпУслугНачисления = Новый СписокЗначений;
	СпУслугОплаты     = Новый СписокЗначений;
	
	// СПИСКИ УСЛУГ
	// Формирует список услуг, по которым были начисления и список услуг, по которым были оплаты.
	ТаблицаУслуг = ТаблицаНачислений.Скопировать();
	ТаблицаУслуг.Сортировать("Услуга");
	ТаблицаУслуг.Свернуть("Услуга", "ФлагНачисления, ФлагОплаты");
	Для Каждого ТекСтрока Из ТаблицаУслуг Цикл
		Если ТекСтрока.Услуга = NULL Тогда
			Продолжить;
		КонецЕсли;
		Если ТекСтрока.ФлагНачисления > 0 Тогда
			СпУслугНачисления.Добавить(ТекСтрока.Услуга);
		КонецЕсли;
		Если ТекСтрока.ФлагОплаты > 0 Тогда
			СпУслугОплаты.Добавить(ТекСтрока.Услуга);
		КонецЕсли;
	КонецЦикла;
	
	// Выводит область шапки "НачисленияВсего", если есть начисления.
	Если СпУслугНачисления.Количество() > 0 Тогда
		ОбластьНачисление = Макет.ПолучитьОбласть("Шапка|НачисленияВсего");
		Результат.Присоединить(ОбластьНачисление, 1);
	КонецЕсли;
	
	// Выводит область шапки "ИзменяемаяЧасть". Данная область состоит из колонок, соответствующих
	// услугам, по которым были начисления.
	ШиринаФиксированнойЧасти = 2;
	Результат.НачатьАвтогруппировкуКолонок();
	НомерСтроки      = Результат.ВысотаТаблицы - 1;
	ПерваяКолонка    = СписокОбластейВывода.Количество() + ШиринаФиксированнойЧасти - 1;
	
	// Учтем колонку "Всего начислено".
	Если СпУслугНачисления.Количество() > 0 Тогда
		ПерваяКолонка = ПерваяКолонка + 1;
	КонецЕсли;
	
	ПоследняяКолонка = ПерваяКолонка;
	
	Для Каждого ТекЗначение Из СпУслугНачисления Цикл
		ОбластьНачисление = Макет.ПолучитьОбласть("Шапка|ИзменяемаяЧасть");
		ОбластьНачисление.Параметры.Услуга = ТекЗначение.Значение;
		Результат.Присоединить(ОбластьНачисление, 2);
		ПоследняяКолонка = ПоследняяКолонка + ОбластьНачисление.ШиринаТаблицы;
	КонецЦикла;
	
	// Выводит область шапки "КолонкаИтог".
	Результат.Область(НомерСтроки, ПерваяКолонка, НомерСтроки, ПоследняяКолонка).Объединить();
	ОбластьНачисление = Макет.ПолучитьОбласть("Шапка|КолонкаИтог");
	Результат.Присоединить(ОбластьНачисление, 1);
	Результат.ЗакончитьАвтогруппировкуКолонок();
	
	// Выводит область шапки "РазделительКолонок".
	Область = Макет.ПолучитьОбласть("Шапка|РазделительКолонок");
	Результат.Присоединить(Область);
	
	// Выводит область шапки "ОплаченоВсего".
	ПерваяКолонка = ПоследняяКолонка + 3;
	ПоследняяКолонка = ПерваяКолонка;
	Область = Макет.ПолучитьОбласть("Шапка|ОплаченоВсего");
	Результат.Присоединить(Область, 1);
	
	// Выводит область шапки "ИзменяемаяЧастьОплат". Данная область состоит из колонок, соответствующих
	// услугам, по которым были оплаты.
	Результат.НачатьАвтогруппировкуКолонок();
	Для Каждого ТекЗначение Из СпУслугОплаты Цикл
		ОбластьОплаты = Макет.ПолучитьОбласть("Шапка|ИзменяемаяЧастьОплат");
		ОбластьОплаты.Параметры.Услуга = ТекЗначение.Значение;
		Результат.Присоединить(ОбластьОплаты, 2);
		ПоследняяКолонка = ПоследняяКолонка + ОбластьОплаты.ШиринаТаблицы;
	КонецЦикла;
	
	Если СпУслугОплаты.Количество() > 0 Тогда
		Результат.Область(НомерСтроки, ПерваяКолонка, НомерСтроки, ПоследняяКолонка).Объединить();
	КонецЕсли;
	
	ОбластьОплатыИтог = Макет.ПолучитьОбласть("Шапка|ОплаченоИтог");
	Результат.Присоединить(ОбластьОплатыИтог, 1);
	Результат.ЗакончитьАвтогруппировкуКолонок();
	
	// Выводит область шапки "РазделительКолонок".
	Область = Макет.ПолучитьОбласть("Шапка|РазделительКолонок");
	Результат.Присоединить(Область);
	
	Если ПараметрыОтчета.Пени Тогда
		// Выводит область шапки "КолонкаВсегоОплат".
		ОбластьВсегоОплаты = Макет.ПолучитьОбласть("Шапка|КолонкаВсегоОплат");
		Результат.Присоединить(ОбластьВсегоОплаты, 1);
	КонецЕсли;
	
	// Выводит область шапки "КолонкаИтогОплат".
	ОбластьИтоговойОплаты = Макет.ПолучитьОбласть("Шапка|КолонкаИтогОплат");
	Результат.Присоединить(ОбластьИтоговойОплаты, 1);
	
	ВысотаЗаголовка = Результат.ВысотаТаблицы;
	
	// ТАБЛИЦА
	СпИтоговыхПолей = Новый СписокЗначений;
	СпИтоговыхПолей.Добавить("КоличествоЗарегистрированных");
	СпИтоговыхПолей.Добавить("КоличествоПроживающих");
	СпИтоговыхПолей.Добавить("ОбщаяПлощадь");
	
	ПересчитатьИтоговыеПоля(ДеревоНачислений, СпИтоговыхПолей, СписокОбластейВывода);
	
	// Рассчитывает общий итог по доп.полям.
	СтрокаОбщегоИтога = ДеревоНачислений.Строки.Найти("Общий итог", "ЛицевойСчетОписание");
	Если НЕ СтрокаОбщегоИтога = Неопределено Тогда
		Для Каждого ТекСтрока Из ДеревоНачислений.Строки Цикл
			Если СтрокаОбщегоИтога = ТекСтрока Тогда
				Продолжить;
			КонецЕсли;
			
			Для Каждого ТекКолонка Из СпИтоговыхПолей Цикл
				ТекЗначение = СписокОбластейВывода.НайтиПоЗначению(ТекКолонка.Значение);
				Если НЕ ТекЗначение = Неопределено Тогда
					СтрокаОбщегоИтога[ТекЗначение.Значение] = СтрокаОбщегоИтога[ТекЗначение.Значение] + ТекСтрока[ТекЗначение.Значение];
				КонецЕсли;
			КонецЦикла;
			
		КонецЦикла;
	КонецЕсли;
	
	СоотвУровнейГруппировки = ПолучитьСоотвУровнейГруппировки();
	
	ППНомер = 1;
	Результат.НачатьАвтогруппировкуСтрок();
	
	// Удалим из таблицы начислений строки группировок для корректного получения таблицы с итогами.
	ОтборДляУдаления = Новый Структура;
	ОтборДляУдаления.Вставить("ФлагНачисления", Неопределено);
	
	УдаляемыеСтроки = ТаблицаНачислений.НайтиСтроки(ОтборДляУдаления);
	Для Каждого УдаляемаяСтрока Из УдаляемыеСтроки Цикл
		ТаблицаНачислений.Удалить(УдаляемаяСтрока);
	КонецЦикла;
	
	// Получаем таблицу с итогами
	ТаблицаНачислений.Свернуть("Услуга", "СуммаНачисления, СуммаЛьготы, СуммаПерерасчета, СуммаПени, ИтоговаяСуммаНачисления, СуммаОплаты, СуммаОплатыПени, ИтогоОплачено");
	
	Для Каждого СтрокаИтог Из ДеревоНачислений.Строки Цикл
		
		// ВЫВОД СТРОК ТАБЛИЦЫ
		
		Если СтрокаИтог.Строки.Количество() > 0 Тогда
				ВывестиСтроку(	ПараметрыОтчета,
								Результат, 
								Макет,
								ППНомер,
								"СтрокаТаблицы",
								СоотвУровнейГруппировки,
								СпИтоговыхПолей, 
								СписокОбластейВывода,
								СпУслугНачисления, 
								СпУслугОплаты, 
								СтрокаИтог );
		КонецЕсли;
		
		// Автогруппировку строк здесь завершать некорректно, т.к. возможно несколько строк в дереве начислений (несколько группировок).
		//Результат.ЗакончитьАвтогруппировкуСтрок();
		
		Если ДеревоНачислений.Строки.Индекс(СтрокаИтог) + 1 = ДеревоНачислений.Строки.Количество() Тогда
			
			// А вот здесь, по идее, автогруппировку нужно завершить.
			Результат.ЗакончитьАвтогруппировкуСтрок();
			
			//// Вывод строк подвала.
			ВывестиСтроку(	ПараметрыОтчета,
							Результат, 
							Макет, 
							ППНомер,
							"ПодвалСтрока", 
							СоотвУровнейГруппировки, 
							СпИтоговыхПолей,
							СписокОбластейВывода, 
							СпУслугНачисления,
							СпУслугОплаты, 
							СтрокаИтог, 
							ТаблицаНачислений,
							Истина);
		КонецЕсли;
		
	КонецЦикла;
	
	// Зафиксируем заголовок отчета и колонки.
	Результат.ФиксацияСверху = ВысотаЗаголовка;
	Результат.ФиксацияСлева = ШиринаФиксированнойЧасти + 1;
	
	ПерваяКолонкаФиксированнойЧасти    = Макет.ПолучитьОбласть("Шапка|Граница").ШиринаТаблицы + 1;
	ПоследняяКолонкаФиксированнойЧасти = ПерваяКолонкаФиксированнойЧасти + Макет.ПолучитьОбласть("Шапка|ФиксированнаяЧасть").ШиринаТаблицы - 1;
	Результат.ПовторятьПриПечатиКолонки = Результат.Область(, ПерваяКолонкаФиксированнойЧасти, , ПоследняяКолонкаФиксированнойЧасти);
	Результат.ПовторятьПриПечатиСтроки  = Результат.Область(ПерваяСтрокаШапки, , ПоследняяСтрокаШапки, );
	
	// Первую колонку не печатаем.
	Результат.ОбластьПечати = Результат.Область(1, 2,
									  Результат.ВысотаТаблицы, Результат.ШиринаТаблицы);
	
КонецПроцедуры

// Функция возвращает параметры исполнения отчета.
Функция ПолучитьПараметрыИсполненияОтчета() Экспорт
	
	Возврат Новый Структура("ИспользоватьПередКомпоновкойМакета,
							|ИспользоватьПослеКомпоновкиМакета,
							|ИспользоватьПослеВыводаРезультата,
							|ИспользоватьДанныеРасшифровки,
							|ИспользоватьВнешниеНаборыДанных,
							|ИспользоватьРасширенныеПараметрыРасшифровки",
							Истина, Истина, Истина, Ложь, Истина, Ложь);
	
КонецФункции

// Функция возвращает текст заголовка.
//
// Параметры:
//  ПараметрыОтчета     - Структура - Структура параметров отчета.
//  ОрганизацияВНачале  - Булево - Признак ораганизации в начале.
// 
// Возвращаемое значение:
//  Строка - Текст заголовка.
//
Функция ПолучитьТекстЗаголовка(ПараметрыОтчета, ОрганизацияВНачале = Истина) Экспорт 
	
	Возврат "Сводная ведомость" + УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьПредставлениеПериода(ПараметрыОтчета.НачалоПериода, ПараметрыОтчета.КонецПериода);
	
КонецФункции

// Функция возвращает внешние наборы данных.
//
// Параметры:
//  ПараметрыОтчета     - Структура - Структура параметров отчета.
//  МакетКомпоновки     - Макет - Макет компоновки данных.
// 
// Возвращаемое значение:
//  Структура - Внешние наборы данных.
//
Функция ПолучитьВнешниеНаборыДанных(ПараметрыОтчета, МакетКомпоновки) Экспорт
	
	ВнешниеНаборыДанных = Новый Структура();
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	МассивВидовКонтактнойИнформации = Новый Массив;
	МассивВидовКонтактнойИнформации.Добавить(Справочники.ВидыКонтактнойИнформации.УПЖКХ_ПочтовыйАдресЗдания);
	
	МассивЗданий = Новый Массив;
	
	ЗапросВыборкиЗданий = Новый Запрос;
	ЗапросВыборкиЗданий.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_Здания.Ссылка
	|ИЗ
	|	Справочник.КВП_Здания КАК КВП_Здания";
	
	ВыборкаЗданий = ЗапросВыборкиЗданий.Выполнить().Выбрать();
	Пока ВыборкаЗданий.Следующий() Цикл
		МассивЗданий.Добавить(ВыборкаЗданий.Ссылка);
	КонецЦикла;
	
	УПЖКХ_ТиповыеМетодыСервер.СформироватьТаблицуКонтактнойИнформацииОбъектов(Запрос.МенеджерВременныхТаблиц, МассивВидовКонтактнойИнформации, МассивЗданий);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	втКонтактнаяИнформация.Объект КАК Здание,
	|	втКонтактнаяИнформация.Улица
	|ИЗ
	|	втКонтактнаяИнформация КАК втКонтактнаяИнформация";
	
	ВнешниеНаборыДанных.Вставить("втАдресаЗданий", Запрос.Выполнить().Выгрузить());
	
	Возврат ВнешниеНаборыДанных;
	
КонецФункции

// В процедуре можно доработать компоновщик перед выводом в отчет
// Изменения сохранены не будут.
//
// Параметры:
//  ПараметрыОтчета     - Структура - Структура параметров отчета.
//  Схема               - СхемаКомпоновкиДанных - Схема компоновки данных отчета.
//  КомпоновщикНастроек - КомпоновщикНастроек - Компоновщик настроек СКД отчета.
//
Процедура ПередКомпоновкойМакета(ПараметрыОтчета, Схема, КомпоновщикНастроек) Экспорт
	
	// Данные будем выводить в дерево значений, поэтому определим специальные параметры.
	ПараметрыОтчета.Вставить("ВыводитьДанныеВТаблицу", Истина);
	ПараметрыОтчета.Вставить("ВыводитьДанныеВДерево",  Истина);
	
	Схема.Параметры.НачалоПериода.Значение = ПараметрыОтчета.НачалоПериода;
	Схема.Параметры.КонецПериода.Значение  = ПараметрыОтчета.КонецПериода;
	Схема.Параметры.Период.Значение        = ПараметрыОтчета.КонецПериода;
	Схема.Параметры.ВидОтчета.Значение     = ПараметрыОтчета.ВидОтчета;
	Схема.Параметры.Льгота.Значение        = ПараметрыОтчета.Льгота;
	Схема.Параметры.Организация.Значение   = ПараметрыОтчета.Организация;
	Схема.Параметры.Перерасчет.Значение    = ПараметрыОтчета.Перерасчет;
	Схема.Параметры.Пени.Значение          = ПараметрыОтчета.Пени;
	
	// Обозначим структуру схемы компоновки в параметрах отчета, которая понадобится при выводе.
	ТаблицаСтруктуры = Новый ТаблицаЗначений;
	ТаблицаСтруктуры.Колонки.Добавить("ИмяГруппировки",     Новый ОписаниеТипов("Строка"));
	ТаблицаСтруктуры.Колонки.Добавить("УровеньГруппировки", Новый ОписаниеТипов("Число"));
	УровеньГруппировки = 1;
	ДобавитьГруппировкиВТаблицуСтруктуры(ТаблицаСтруктуры, КомпоновщикНастроек.Настройки.Структура, УровеньГруппировки);
	ПараметрыОтчета.Вставить("ТаблицаСтруктуры",             ТаблицаСтруктуры);
	
	УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "НачалоПериода",     ПараметрыОтчета.НачалоПериода);
	УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "КонецПериода",      ПараметрыОтчета.КонецПериода);
	УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "Период",            ПараметрыОтчета.КонецПериода);
	УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "ВидОтчета",         ПараметрыОтчета.ВидОтчета);
	УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "Льгота",            ПараметрыОтчета.Льгота);
	УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "Организация",       ПараметрыОтчета.Организация);
	УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "Перерасчет",        ПараметрыОтчета.Перерасчет);
	УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "Пени",              ПараметрыОтчета.Пени);
	
	ДобавитьПоляВНаборКомпоновки(ПараметрыОтчета, Схема);
	
	// Добавим дополнительные поля в структуру отчета для их вывода.
	УПЖКХ_ТиповыеМетодыВызовСервера.ДобавитьДополнительныеПоля(ПараметрыОтчета, КомпоновщикНастроек);
	
	// После добавления дополнительных полей в структуру компоновки значения полей
	// могут и не выводится, так как выводимые поля, например "Здание", является полем
	// детальных записей и на верхних уровнях группировки не вычисляется.
	//
	// Поэтому, если дополнительного поля нет в группировках, то нужно его добавить на верхий уровень.
	// В результате, значения дополнительного поля будут вычислены и выведены в отчет.
	
	ВключитьДополнительныеПоляВГруппировкиОтчета(ПараметрыОтчета, КомпоновщикНастроек, Схема);
	
КонецПроцедуры

// Возникает после компоновки макета.
//
// Параметры:
//  ПараметрыОтчета     - Структура - Структура параметров отчета.
//  МакетКомпоновки     - Макет - Макет компоновки данных.
//
Процедура ПослеКомпоновкиМакета(ПараметрыОтчета, МакетКомпоновки) Экспорт
	
КонецПроцедуры

// Возникает после вывода результата.
//
// Параметры:
//  ПараметрыОтчета - Структура - Структура параметров отчета.
//  Результат       - ТабличныйДокумент - Табличный документ с результатом отчета.
//
Процедура ПослеВыводаРезультата(ПараметрыОтчета, Результат) Экспорт
	
	УПЖКХ_ТиповыеМетодыВызовСервера.ОбработкаРезультатаОтчета(ПараметрыОтчета.ИдентификаторОтчета, Результат);
	
КонецПроцедуры

// Вызывает настройку вариантов отчета.
//
// Параметры:
//  Настройки       - Структура - Настройки отчета.
//  ОписаниеОтчета  - Строка - Описание отчета.
//
Процедура НастроитьВариантыОтчета(Настройки, ОписаниеОтчета) Экспорт
	
КонецПроцедуры

// Заполняет параметры расшифровки отчета.
//
// Параметры:
//  Адрес                - Строка - Адрес расшифровки.
//  Расшифровка          - Строка - Содержание расшифровки.
//  ПараметрыРасшифровки - Структура - Параметры расшифровки.
//
Процедура ЗаполнитьПараметрыРасшифровкиОтчета(Адрес, Расшифровка, ПараметрыРасшифровки) Экспорт
	
	
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

#Область СлужебныеПроцедурыИФункции

// Процедура добавляет поля для возможности их отображения.
Процедура ДобавитьПоляВНаборКомпоновки(ПараметрыОтчета, Схема) Экспорт
	
КонецПроцедуры // ДобавитьПоляВНаборКомпоновки()

Процедура ДобавитьГруппировкиВТаблицуСтруктуры(ТаблицаСтруктуры, КоллекцияСтруктуры, УровеньГруппировки)
	
	Для Каждого ТекЭлементГруппировки Из КоллекцияСтруктуры Цикл
		
		Если ТипЗнч(ТекЭлементГруппировки) = Тип("ГруппировкаКомпоновкиДанных")
			И ТекЭлементГруппировки.ПоляГруппировки.Элементы.Количество() > 0 Тогда
			
			НоваяСтрока = ТаблицаСтруктуры.Добавить();
			// Уберем из наименований группировок символы "." (точка)
			// Данные символы появляются в именах группировок при обращении к полям через разыменование.
			//НоваяСтрока.ИмяГруппировки     = ТекЭлементГруппировки.ПоляГруппировки.Элементы[0].Поле;
			НоваяСтрока.ИмяГруппировки     = СтрЗаменить(ТекЭлементГруппировки.ПоляГруппировки.Элементы[0].Поле, ".", "");
			НоваяСтрока.УровеньГруппировки = УровеньГруппировки;
			
			УровеньГруппировки = УровеньГруппировки + 1;
			
			ДобавитьГруппировкиВТаблицуСтруктуры(ТаблицаСтруктуры, ТекЭлементГруппировки.Структура, УровеньГруппировки);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Процедура включает дополнительные поля в группировки, если их там нет.
// Нужно для корректного вывода значений дополнительных полей.
Процедура ВключитьДополнительныеПоляВГруппировкиОтчета(ПараметрыОтчета, КомпоновщикНастроек, Схема)
	
	// Определим группировку на первом уровне.
	ПерваяГруппировка = Неопределено;
	
	Для Каждого ТекЭлементГруппировки Из КомпоновщикНастроек.Настройки.Структура Цикл
		
		Если ТипЗнч(ТекЭлементГруппировки) = Тип("ГруппировкаКомпоновкиДанных") Тогда
			
			ПерваяГруппировка = ТекЭлементГруппировки;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Если группировки нет, то и смысла добавлять ее нет.
	Если ПерваяГруппировка = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	МассивПолейГруппировки = Новый Массив;
	ПолучитьСписокПолейГруппировки(КомпоновщикНастроек.Настройки.Структура, МассивПолейГруппировки);
	
	Для Каждого ТекДополнительноеПоле Из ПараметрыОтчета.ДополнительныеПоля Цикл
		
		Если ТекДополнительноеПоле.Использование Тогда
			
			// Поиск поля в группировках.
			НайденнаяГруппировка = МассивПолейГруппировки.Найти(Новый ПолеКомпоновкиДанных(ТекДополнительноеПоле.Поле));
			
			// Поиск поля в ресурсах
			НайденныйРесурс = Схема.ПоляИтога.Найти(ТекДополнительноеПоле.Поле);
			
			Если НайденнаяГруппировка = Неопределено И НайденныйРесурс = Неопределено Тогда
				
				// Если поле не нашли в группировках, и оно не является ресурсом, тогда добавляем новое в верхнюю группировку.
				НовоеПолеГруппировки = ПерваяГруппировка.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
				НовоеПолеГруппировки.Поле          = Новый ПолеКомпоновкиДанных(ТекДополнительноеПоле.Поле);
				НовоеПолеГруппировки.Использование = Истина;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Функция выполняет поиск поля компоновки данных в списке полей группировки.
//
Функция ПолучитьСписокПолейГруппировки(СтруктураПолей, МассивПолей)
	
	Для Каждого ТекЭлементГруппировки Из СтруктураПолей Цикл
		
		Если ТипЗнч(ТекЭлементГруппировки) = Тип("ГруппировкаКомпоновкиДанных") Тогда
			Для Каждого ТекПоле Из ТекЭлементГруппировки.ПоляГруппировки.Элементы Цикл
				МассивПолей.Добавить(ТекПоле.Поле);
			КонецЦикла;
			
			Если ТекЭлементГруппировки.Структура.Количество() > 0 Тогда
				ПолучитьСписокПолейГруппировки(ТекЭлементГруппировки.Структура, МассивПолей);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецФункции

#КонецОбласти

#КонецЕсли