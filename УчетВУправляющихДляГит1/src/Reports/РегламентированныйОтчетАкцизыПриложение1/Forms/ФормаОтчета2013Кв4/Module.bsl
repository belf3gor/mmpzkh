&НаКлиенте
Перем ОбработкаКС Экспорт;

&НаСервере
Перем СписокРасшифровкиПоказателей;

&НаСервере
Перем СписокРасшифровкиформулы;

&НаСервере
Перем мОбъектОтчета;

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	// Обход ошибки платформы Параметр сеанса отсутствует или удален
	ТабличныйДокумент.Очистить();
	
	СформироватьСтруктуруРеквизитовФормы();
			
	СтруктураРеквизитовФормы.СписокПечатаемыхЛистов = Новый СписокЗначений;
	
	СтруктураРеквизитовФормы.мСоставПоказателей = "СоставПоказателей2013Кв4";
		
	СтруктураРеквизитовФормы.мОписаниеТиповЧислоЕ = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(13, 2));
	
	// ОПИСАНИЕ ПАРАМЕТРОВ МНОГОСТРОЧНЫХ ГРУПП
	// Идентификаторы многострочных групп
	СтруктураРеквизитовФормы.мИдГруппы1     = "П0001100020";
	СтруктураРеквизитовФормы.мИдГруппы12    = "П0001200020";
	СтруктураРеквизитовФормы.мИдГруппы13    = "П0001300020";
	СтруктураРеквизитовФормы.мИдГруппы2     = "П0002100010";
	СтруктураРеквизитовФормы.мИдГруппы24    = "П0002400010";
	СтруктураРеквизитовФормы.мИдПриложения1 = "П0009000000";
	СтруктураРеквизитовФормы.мИдПриложения2 = "П0009100000";
	СтруктураРеквизитовФормы.мИдПриложения3 = "П0009200000";
	СтруктураРеквизитовФормы.мИдПриложения4 = "П0009300000";
	СтруктураРеквизитовФормы.мИдПриложения5 = "П0009400000";
	СтруктураРеквизитовФормы.мИдПриложения6 = "П0009500000";
	СтруктураРеквизитовФормы.мИдПриложения7 = "П0009600000";
		
	// количество строк многострочных разделов по "бумажной" форме отчета
	// (минимальное количество строк, которое должно присутствовать всегда)
	КолИсхСтрокИдГруппы1     = 1; //(6)
	КолИсхСтрокИдГруппы12    = 1; //(5)
	КолИсхСтрокИдГруппы13    = 1; //(8)
	КолИсхСтрокИдГруппы2     = 1; //(9)
	КолИсхСтрокИдГруппы24    = 1; //(25)
	КолИсхСтрокИдПриложения1 = 1; //(22)
	КолИсхСтрокИдПриложения2 = 1; //(18)
	КолИсхСтрокИдПриложения3 = 1; //(18)
	КолИсхСтрокИдПриложения4 = 1; //(6)
	КолИсхСтрокИдПриложения5 = 1; //(6)
	КолИсхСтрокИдПриложения6 = 1; //(6)
	КолИсхСтрокИдПриложения7 = 1; //(6)
	
	КолКолонокИдГруппы1     = 3;
	КолКолонокИдГруппы12    = 3;
	КолКолонокИдГруппы13    = 2;
	КолКолонокИдГруппы2     = 4;
	КолКолонокИдГруппы24    = 5;
	КолКолонокИдПриложения1 = 4;
	КолКолонокИдПриложения2 = 5;
	КолКолонокИдПриложения3 = 5;
	КолКолонокИдПриложения4 = 4;
	КолКолонокИдПриложения5 = 4;
	КолКолонокИдПриложения6 = 3;
	КолКолонокИдПриложения7 = 3;
	
	СтруктураДанныхТитульный   = Новый Структура;
	
	ИнициализацияМногостраничныхРазделов();
				
	// структура многострочных разделов формы
	мСтруктураМногострочныхРазделов = Новый Структура;
	мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы1,     СтруктураРеквизитовФормы.мИдГруппы1);
	мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы12,    СтруктураРеквизитовФормы.мИдГруппы12);
	мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы13,    СтруктураРеквизитовФормы.мИдГруппы13);
	мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы2,     СтруктураРеквизитовФормы.мИдГруппы2);
	мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы24,    СтруктураРеквизитовФормы.мИдГруппы24);
	мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.мИдПриложения1, СтруктураРеквизитовФормы.мИдПриложения1);
	мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.мИдПриложения2, СтруктураРеквизитовФормы.мИдПриложения2);
	мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.мИдПриложения3, СтруктураРеквизитовФормы.мИдПриложения3);
	мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.мИдПриложения4, СтруктураРеквизитовФормы.мИдПриложения4);
	мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.мИдПриложения5, СтруктураРеквизитовФормы.мИдПриложения5);
	мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.мИдПриложения6, СтруктураРеквизитовФормы.мИдПриложения6);
	мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.мИдПриложения7, СтруктураРеквизитовФормы.мИдПриложения7);
	
	// Структура содержит данные дополнительных страниц
	мСтруктураМногостраничныхРазделов = Новый Структура;
	мСтруктураМногостраничныхРазделов.Вставить("Раздел1",     "ТаблицаСтраницыРаздел1");
	мСтруктураМногостраничныхРазделов.Вставить("Раздел12",    "ТаблицаСтраницыРаздел12");
	мСтруктураМногостраничныхРазделов.Вставить("Раздел13",    "ТаблицаСтраницыРаздел13");
	мСтруктураМногостраничныхРазделов.Вставить("Раздел2",     "ТаблицаСтраницыРаздел2");
	мСтруктураМногостраничныхРазделов.Вставить("Раздел24",    "ТаблицаСтраницыРаздел24");
	мСтруктураМногостраничныхРазделов.Вставить("Раздел25",    "ТаблицаСтраницыРаздел25");
	мСтруктураМногостраничныхРазделов.Вставить("Приложение1", "ТаблицаСтраницыПриложение1");
	мСтруктураМногостраничныхРазделов.Вставить("Приложение2", "ТаблицаСтраницыПриложение2");
	мСтруктураМногостраничныхРазделов.Вставить("Приложение3", "ТаблицаСтраницыПриложение3");
	мСтруктураМногостраничныхРазделов.Вставить("Приложение4", "ТаблицаСтраницыПриложение4");
	мСтруктураМногостраничныхРазделов.Вставить("Приложение5", "ТаблицаСтраницыПриложение5");
	мСтруктураМногостраничныхРазделов.Вставить("Приложение6", "ТаблицаСтраницыПриложение6");
	мСтруктураМногостраничныхРазделов.Вставить("Приложение7", "ТаблицаСтраницыПриложение7");

	// структура исходных строк (минимального кол-ва) многострочных разделов формы
	мСтруктураИсхКолвоСтрокРазделов = Новый Структура;
	мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы1,     КолИсхСтрокИдГруппы1);
	мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы12,    КолИсхСтрокИдГруппы12);
	мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы13,    КолИсхСтрокИдГруппы13);
	мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы2,     КолИсхСтрокИдГруппы2);
	мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы24,    КолИсхСтрокИдГруппы24);
	мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдПриложения1, КолИсхСтрокИдПриложения1);
	мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдПриложения2, КолИсхСтрокИдПриложения2);
	мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдПриложения3, КолИсхСтрокИдПриложения3);
	мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдПриложения4, КолИсхСтрокИдПриложения4);
	мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдПриложения5, КолИсхСтрокИдПриложения5);
	мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдПриложения6, КолИсхСтрокИдПриложения6);
	мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдПриложения7, КолИсхСтрокИдПриложения7);
	
	мСтруктураКолвоКолонокРазделов = Новый Структура;
	мСтруктураКолвоКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы1,     КолКолонокИдГруппы1);
	мСтруктураКолвоКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы12,    КолКолонокИдГруппы12);
	мСтруктураКолвоКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы13,    КолКолонокИдГруппы13);
	мСтруктураКолвоКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы2,     КолКолонокИдГруппы2);
	мСтруктураКолвоКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы24,    КолКолонокИдГруппы24);
	мСтруктураКолвоКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдПриложения1, КолКолонокИдПриложения1);
	мСтруктураКолвоКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдПриложения2, КолКолонокИдПриложения2);
	мСтруктураКолвоКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдПриложения3, КолКолонокИдПриложения3);
	мСтруктураКолвоКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдПриложения4, КолКолонокИдПриложения4);
	мСтруктураКолвоКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдПриложения5, КолКолонокИдПриложения5);
	мСтруктураКолвоКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдПриложения6, КолКолонокИдПриложения6);
	мСтруктураКолвоКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдПриложения7, КолКолонокИдПриложения7);
		
	ЦветЗаполняетсяТолькоВручную                           = Новый Цвет(255, 255, 225);
	ЦветЗаполняетсяАвтоКорректир                           = Новый Цвет(255, 240, 200);
	ЦветЗаполняетсяАвтоБезКорректир                        = Новый Цвет(230, 240, 220);
	СтруктураРеквизитовФормы.ЦветЗаполняетсяАвтоАрифметика = Новый Цвет(192, 220, 192);     // ЗЕЛЕНЫЙ
	ЦветЗаполняетсяОднозначноВручную                       = Новый Цвет(255, 255, 192);     // ЖЕЛТЫЙ
	ЦветЗаполняетсяАвтоматически                           = Новый Цвет(255, 255, 255);     // Белый, Ввод запрещен

	// структура цветов раскраски автозаполняемых ячеек
	мСтруктураЦветовРаскраски = Новый Структура;
	мСтруктураЦветовРаскраски.Вставить("_1", ЦветЗаполняетсяТолькоВручную);
	мСтруктураЦветовРаскраски.Вставить("_2", ЦветЗаполняетсяАвтоКорректир);
	мСтруктураЦветовРаскраски.Вставить("_3", ЦветЗаполняетсяАвтоБезКорректир);
	мСтруктураЦветовРаскраски.Вставить("_4", СтруктураРеквизитовФормы.ЦветЗаполняетсяАвтоАрифметика);
	мСтруктураЦветовРаскраски.Вставить("_0", ЦветЗаполняетсяОднозначноВручную);
	мСтруктураЦветовРаскраски.Вставить("_5", ЦветЗаполняетсяАвтоматически);
	
	мСтруктураВариантыЗаполнения       = Новый Структура;
	мСтруктураВариантыЗаполненияЭталон = Новый Структура;
		
	// ОПИСАНИЕ ПАРАМЕТРОВ ФОРМЫ ОТЧЕТА
	//
	// Версия формы
	СтруктураРеквизитовФормы.мВерсияФормы = "09/06/2011";
		
	// Код отчета, равен КНД
	СтруктураРеквизитовФормы.мКодОтчета = 1151084;
	
	СтруктураРеквизитовФормы.ВариантыФорматовВыгрузки = Новый СписокЗначений;
	СтруктураРеквизитовФормы.ВариантыФорматовВыгрузки.Добавить(СтруктураРеквизитовФормы.мСоставПоказателей, "Формат 5.01", Истина);
		
	СтруктураРеквизитовФормы.КНД = "1151084";
	
	СтруктураРеквизитовФормы.мПечатныеформы = Новый СписокЗначений;
	СтруктураРеквизитовФормы.мПечатаемыеРазделы = Новый СписокЗначений;
	
	СтруктураРеквизитовФормы.ПоказателиНеанализируемыеНаЗаполненность = Новый Массив;
	СтруктураРеквизитовФормы.ПоказателиНеанализируемыеНаЗаполненность.Добавить("П000220001001");
	СтруктураРеквизитовФормы.ПоказателиНеанализируемыеНаЗаполненность.Добавить("П000220002001");
	СтруктураРеквизитовФормы.ПоказателиНеанализируемыеНаЗаполненность.Добавить("П000220003001");
	СтруктураРеквизитовФормы.ПоказателиНеанализируемыеНаЗаполненность.Добавить("П000220004001");
	СтруктураРеквизитовФормы.ПоказателиНеанализируемыеНаЗаполненность.Добавить("П000220005001");
	СтруктураРеквизитовФормы.ПоказателиНеанализируемыеНаЗаполненность.Добавить("П000220006001");
	СтруктураРеквизитовФормы.ПоказателиНеанализируемыеНаЗаполненность.Добавить("П000220007001");
	СтруктураРеквизитовФормы.ПоказателиНеанализируемыеНаЗаполненность.Добавить("П000220008001");
	СтруктураРеквизитовФормы.ПоказателиНеанализируемыеНаЗаполненность.Добавить("П000220009001");
	
	СтруктураРеквизитовФормы.ПоказателиНеанализируемыеНаЗаполненность.Добавить("П000930005001");
	СтруктураРеквизитовФормы.ПоказателиНеанализируемыеНаЗаполненность.Добавить("П000930006001");
	
	СтруктураРеквизитовФормы.ПоказателиНеанализируемыеНаЗаполненность.Добавить("П000940005001");
	СтруктураРеквизитовФормы.ПоказателиНеанализируемыеНаЗаполненность.Добавить("П000940006001");
	
	СтруктураРеквизитовФормы.ПоказателиНеанализируемыеНаЗаполненность.Добавить("П000950005001");
	СтруктураРеквизитовФормы.ПоказателиНеанализируемыеНаЗаполненность.Добавить("П000960005001");
	
	СтруктураРеквизитовФормы.ПоказателиНеанализируемыеНаЗаполненность.Добавить("П000230001001");
	СтруктураРеквизитовФормы.ПоказателиНеанализируемыеНаЗаполненность.Добавить("П000230002001");
	
	ИмяРаздела = "Титульный";
	
	ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + ИмяРаздела));
	
	СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяРаздела;
	
	СтруктураРеквизитовФормы.мВыбраннаяФорма          = Параметры.мВыбраннаяФорма;
	СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета  = Параметры.мДатаКонцаПериодаОтчета;
	СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета = Параметры.мДатаНачалаПериодаОтчета;
	СтруктураРеквизитовФормы.мПериодичность           = Параметры.мПериодичность;
	СтруктураРеквизитовФормы.мСкопированаФорма        = Параметры.мСкопированаФорма;
	СтруктураРеквизитовФормы.мСохраненныйДок          = Параметры.мСохраненныйДок;
	СтруктураРеквизитовФормы.Организация              = Параметры.Организация;
	СтруктураРеквизитовФормы.ДоступенМеханизмПечатиРеглОтчетностиСДвухмернымШтрихкодомPDF417 = Параметры.ДоступенМеханизмПечатиРеглОтчетностиСДвухмернымШтрихкодомPDF417;
	
	ДатаПодписи	= ТекущаяДатаСеанса();
	
	ПорядкиОкругленияОтчетности = Новый Структура;
	ПорядкиОкругленияОтчетности.Вставить("ПеречислениеПорядкиОкругленияОтчетностиОкр1",       Перечисления.ПорядкиОкругленияОтчетности.Окр1);
	ПорядкиОкругленияОтчетности.Вставить("ПеречислениеПорядкиОкругленияОтчетностиОкр1000",    Перечисления.ПорядкиОкругленияОтчетности.Окр1000);
	ПорядкиОкругленияОтчетности.Вставить("ПеречислениеПорядкиОкругленияОтчетностиОкр1000000", Перечисления.ПорядкиОкругленияОтчетности.Окр1000000);
	
	Инициализация(Параметры.БезОткрытияФормы);
	
КонецПроцедуры 

&НаСервере
Процедура СформироватьСтруктуруРеквизитовФормы()
	
	СтруктураРеквизитовФормы = Новый Структура;
	СтруктураРеквизитовФормы.Вставить("ВыводитьСтраницуВТаблДокНаСервере");
	СтруктураРеквизитовФормы.Вставить("НаимТекущегоРаздела");
	СтруктураРеквизитовФормы.Вставить("КНД");
	СтруктураРеквизитовФормы.Вставить("мАвтоВыборКодов");
	СтруктураРеквизитовФормы.Вставить("мБезОткрытияФормы");
	СтруктураРеквизитовФормы.Вставить("мВерсияФормы");
	СтруктураРеквизитовФормы.Вставить("мДелитель");
	СтруктураРеквизитовФормы.Вставить("мЗаписываетсяНовыйДокумент");
	СтруктураРеквизитовФормы.Вставить("мЗаписьЗапрещена");
	СтруктураРеквизитовФормы.Вставить("мИдГруппы1");
	СтруктураРеквизитовФормы.Вставить("мИдГруппы12");
	СтруктураРеквизитовФормы.Вставить("мИдГруппы13");
	СтруктураРеквизитовФормы.Вставить("мИдГруппы2");
	СтруктураРеквизитовФормы.Вставить("мИдГруппы24");
	СтруктураРеквизитовФормы.Вставить("мИдГруппы25");
	СтруктураРеквизитовФормы.Вставить("мИдПриложения1");
	СтруктураРеквизитовФормы.Вставить("мИдПриложения2");
	СтруктураРеквизитовФормы.Вставить("мИдПриложения3");
	СтруктураРеквизитовФормы.Вставить("мИдПриложения4");
	СтруктураРеквизитовФормы.Вставить("мИдПриложения5");
	СтруктураРеквизитовФормы.Вставить("мИдПриложения6");
	СтруктураРеквизитовФормы.Вставить("мИдПриложения7");
	СтруктураРеквизитовФормы.Вставить("мКодОтчета");
	СтруктураРеквизитовФормы.Вставить("мРежимПечати");
	СтруктураРеквизитовФормы.Вставить("мСоставПоказателей");
	СтруктураРеквизитовФормы.Вставить("мСтрокаФормата");
	СтруктураРеквизитовФормы.Вставить("мСчетчикСтраниц");
	СтруктураРеквизитовФормы.Вставить("ОтключитьВыполнениеРасчета", Ложь);
	СтруктураРеквизитовФормы.Вставить("ТочностьЕдиницыИзмерения");
	СтруктураРеквизитовФормы.Вставить("ФлажокОтклАвтоРасчет", Ложь);
	СтруктураРеквизитовФормы.Вставить("ВариантыФорматовВыгрузки");
	СтруктураРеквизитовФормы.Вставить("ВидДокумента");
	СтруктураРеквизитовФормы.Вставить("ЕдиницаИзмерения");
	СтруктураРеквизитовФормы.Вставить("мВариант");
	СтруктураРеквизитовФормы.Вставить("мВыбраннаяФорма");
	СтруктураРеквизитовФормы.Вставить("мДатаКонцаПериодаОтчета");
	СтруктураРеквизитовФормы.Вставить("мДатаНачалаПериодаОтчета");
	СтруктураРеквизитовФормы.Вставить("ПоказателиНеанализируемыеНаЗаполненность");
	СтруктураРеквизитовФормы.Вставить("мОписаниеТиповЧислоЕ");
	СтруктураРеквизитовФормы.Вставить("мПериодичность");
	СтруктураРеквизитовФормы.Вставить("мПечатаемыеРазделы");
	СтруктураРеквизитовФормы.Вставить("мПечатныеФормы");
	СтруктураРеквизитовФормы.Вставить("мСкопированаФорма");
	СтруктураРеквизитовФормы.Вставить("мСохраненныйДок");
	СтруктураРеквизитовФормы.Вставить("мПечатьБезШтрихкодаРазрешена");
	СтруктураРеквизитовФормы.Вставить("Организация");
	СтруктураРеквизитовФормы.Вставить("ЦветЗаполняетсяАвтоАрифметика");
	СтруктураРеквизитовФормы.Вставить("СписокПечатаемыхЛистов");
	СтруктураРеквизитовФормы.Вставить("НаимОрганизации");
	СтруктураРеквизитовФормы.Вставить("СтрПериодОтчета");
	СтруктураРеквизитовФормы.Вставить("ТекущаяСтрокаРазделовОтчета");
	СтруктураРеквизитовФормы.Вставить("ДоступенМеханизмПечатиРеглОтчетностиСДвухмернымШтрихкодомPDF417");
	СтруктураРеквизитовФормы.Вставить("ТекстДляЗаголовочнойЧасти");
	СтруктураРеквизитовФормы.Вставить("мПроверятьСоотношенияПриПечатиИВыгрузки");
	СтруктураРеквизитовФормы.Вставить("КодыНаличияСвидетельстваABCDF");
	СтруктураРеквизитовФормы.Вставить("ТекущийКодНаличияСвидетельства");
	СтруктураРеквизитовФормы.Вставить("ОКВЭД",  "");
	СтруктураРеквизитовФормы.Вставить("ОКВЭД2", "");
	
КонецПроцедуры

&НаСервере
Процедура ИнициализацияМногостраничныхРазделов()
	
	СтрПерваяСтраница = ТаблицаСтраницыРаздел1.Добавить();
	СтрПерваяСтраница.Представление               = "Новая страница";
	СтрПерваяСтраница.АктивнаяСтраница            = Истина;
	СтрПерваяСтраница.АвтоматическоеПредставление = Истина;
	
	СтрПерваяСтраница = ТаблицаСтраницыРаздел12.Добавить();
	СтрПерваяСтраница.Представление               = "Новая страница";
	СтрПерваяСтраница.АктивнаяСтраница            = Истина;
	СтрПерваяСтраница.АвтоматическоеПредставление = Истина;
	
	СтрПерваяСтраница = ТаблицаСтраницыРаздел13.Добавить();
	СтрПерваяСтраница.Представление               = "Новая страница";
	СтрПерваяСтраница.АктивнаяСтраница            = Истина;
	СтрПерваяСтраница.АвтоматическоеПредставление = Истина;

	СтрПерваяСтраница = ТаблицаСтраницыРаздел2.Добавить();
	СтрПерваяСтраница.Представление               = "Новая страница";
	СтрПерваяСтраница.АктивнаяСтраница            = Истина;
	СтрПерваяСтраница.АвтоматическоеПредставление = Истина;
	
	СтрПерваяСтраница = ТаблицаСтраницыРаздел24.Добавить();
	СтрПерваяСтраница.Представление               = "Новая страница";
	СтрПерваяСтраница.АктивнаяСтраница            = Истина;
	СтрПерваяСтраница.АвтоматическоеПредставление = Истина;
	
	СтрПерваяСтраница = ТаблицаСтраницыРаздел25.Добавить();
	СтрПерваяСтраница.Представление               = "Новая страница";
	СтрПерваяСтраница.АктивнаяСтраница            = Истина;
	СтрПерваяСтраница.АвтоматическоеПредставление = Истина;
	
	СтрПерваяСтраница = ТаблицаСтраницыПриложение1.Добавить();
	СтрПерваяСтраница.Представление               = "Новая страница";
	СтрПерваяСтраница.АктивнаяСтраница            = Истина;
	СтрПерваяСтраница.АвтоматическоеПредставление = Истина;
	
	СтрПерваяСтраница = ТаблицаСтраницыПриложение2.Добавить();
	СтрПерваяСтраница.Представление               = "Новая страница";
	СтрПерваяСтраница.АктивнаяСтраница            = Истина;
	СтрПерваяСтраница.АвтоматическоеПредставление = Истина;
	
	СтрПерваяСтраница = ТаблицаСтраницыПриложение3.Добавить();
	СтрПерваяСтраница.Представление               = "Новая страница";
	СтрПерваяСтраница.АктивнаяСтраница            = Истина;
	СтрПерваяСтраница.АвтоматическоеПредставление = Истина;
	
	СтрПерваяСтраница = ТаблицаСтраницыПриложение4.Добавить();
	СтрПерваяСтраница.Представление               = "Новая страница";
	СтрПерваяСтраница.АктивнаяСтраница            = Истина;
	СтрПерваяСтраница.АвтоматическоеПредставление = Истина;

	СтрПерваяСтраница = ТаблицаСтраницыПриложение5.Добавить();
	СтрПерваяСтраница.Представление               = "Новая страница";
	СтрПерваяСтраница.АктивнаяСтраница            = Истина;
	СтрПерваяСтраница.АвтоматическоеПредставление = Истина;

	СтрПерваяСтраница = ТаблицаСтраницыПриложение6.Добавить();
	СтрПерваяСтраница.Представление               = "Новая страница";
	СтрПерваяСтраница.АктивнаяСтраница            = Истина;
	СтрПерваяСтраница.АвтоматическоеПредставление = Истина;

	СтрПерваяСтраница = ТаблицаСтраницыПриложение7.Добавить();
	СтрПерваяСтраница.Представление               = "Новая страница";
	СтрПерваяСтраница.АктивнаяСтраница            = Истина;
	СтрПерваяСтраница.АвтоматическоеПредставление = Истина;

КонецПроцедуры

&НаСервере
Процедура ВставитьДополнительнуюСтраницуНаСервере(ИмяТекущейСтраницыПанели = Неопределено )
	
	ИзменитьТаблицуПараметровАвтозаполнения(1, ИмяТекущейСтраницыПанели);
	
	СтруктураРеквизитовФормы.ОтключитьВыполнениеРасчета = Истина;
	
	РегламентированнаяОтчетность.ВставитьДополнительнуюСтраницуНаСервере(ЭтаФорма, ИмяТекущейСтраницыПанели);
	РегламентированнаяОтчетность.ПослеВставкиДополнительнойСтраницыНаСервере(ЭтаФорма, ИмяТекущейСтраницыПанели);
	
	СтруктураРеквизитовФормы.ОтключитьВыполнениеРасчета = Ложь;
	
	СохранитьДанныеРаздела(ИмяТекущейСтраницыПанели, Ложь, Ложь);
	
	Если ИмяТекущейСтраницыПанели = "Раздел2" Тогда
		
		ТекНомерСтраницы = РазделыОтчета.НайтиПоИдентификатору(Элементы.РазделыОтчета.ТекущаяСтрока).КолонкаНомерСтраницыРазделаОтчета;
		
		// Чтобы не осуществлялся вывод в табличный документ при расчете
		СтруктураРеквизитовФормы.НаимТекущегоРаздела = "_";
		
		ИзменитьТаблицуПараметровАвтозаполнения(1, "Раздел25");
		ВставитьДополнительнуюСтраницуВДругойРазделНаСервере(ЭтаФорма, "Раздел25");
		ИзменитьТаблицуПараметровАвтозаполнения(1, "Раздел24");
		ВставитьДополнительнуюСтраницуВДругойРазделНаСервере(ЭтаФорма, "Раздел24");
		
		СформироватьДеревоРазделовОтчетаНаСервере();
		
		Для каждого НайденныйРаздел Из РазделыОтчета.ПолучитьЭлементы() Цикл
			Если НайденныйРаздел.КолонкаРазделыОтчетаСокрНаим = ИмяТекущейСтраницыПанели Тогда
				Для каждого НайденнаяСтраница Из НайденныйРаздел.ПолучитьЭлементы() Цикл
					Если НайденнаяСтраница.КолонкаНомерСтраницыРазделаОтчета = ТекНомерСтраницы Тогда
						Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяСтраница.ПолучитьИдентификатор();
						Прервать;
					КонецЕсли;
				КонецЦикла;
				Прервать;
			КонецЕсли; 
		КонецЦикла; 
		
		СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяТекущейСтраницыПанели;
		
	КонецЕсли;
	
	РасчетНаСервере(ИмяТекущейСтраницыПанели);
	
	Если ИмяТекущейСтраницыПанели = "Раздел2" ИЛИ ИмяТекущейСтраницыПанели = "Раздел24" Тогда
		
		ПереопределитьЦветЯчеекВЗависимостиОтУсловияНаСервере(ИмяТекущейСтраницыПанели);
		
	КонецЕсли; 
	
	СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура ВставитьДополнительнуюСтраницуВДругойРазделНаСервере(Форма, ИмяСтраницыПанели = Неопределено)
	
	Перем ТаблицаСтраницРаздела;
	Перем СтруктураДанныхДопСтрокРаздела;
	
	Если Не Форма.мСтруктураМногостраничныхРазделов.Свойство(ИмяСтраницыПанели, ТаблицаСтраницРаздела) Тогда
		Возврат;
	Иначе
		МаксКолвоЭкз=РегламентированнаяОтчетностьКлиентСервер.ПолучитьСвойствоРаздела(Форма, ИмяСтраницыПанели, "МаксКолвоЭкз", 0);
		Если МаксКолвоЭкз<>0 И Форма[Форма.мСтруктураМногостраничныхРазделов[ИмяСтраницыПанели]].Количество() >= МаксКолвоЭкз Тогда
			
			ЗаголовокСтраницы = ИмяСтраницыПанели;
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='В разделе ""%1"" максимальное количество экземпляров страниц равно %2.'"), ЗаголовокСтраницы, МаксКолвоЭкз);
			Сообщение.Сообщить();
			
			Возврат;
			
		КонецЕсли;
	КонецЕсли;
	
	ТаблицаСтраницРаздела = Форма[ТаблицаСтраницРаздела];
	
	// Часть для подстраховки, от старой системы хранения многостраничности
	Если ТаблицаСтраницРаздела.Количество() = 0 Тогда
		// создаем исходную таблицу значений многостраничных разделов
		СтрТаблицаСтраницы = ТаблицаСтраницРаздела.Добавить();
		СтрТаблицаСтраницы.АктивнаяСтраница = Истина;
	КонецЕсли;

	// Найдем активную страницу
	СтрТаблицыСтраницы = ТаблицаСтраницРаздела.НайтиСтроки(Новый Структура ("АктивнаяСтраница", Истина));

	Для каждого СтрТаблицаСтраницы Из СтрТаблицыСтраницы Цикл
		СтрТаблицаСтраницы.АктивнаяСтраница = Ложь;
	КонецЦикла;
	
	// Добавляем новую страницу
	СтрНоваяСтраница = ТаблицаСтраницРаздела.Добавить();
	// Присваиваем представление по умолчанию
	СтрНоваяСтраница.Представление      = "Новая страница";
	СтрНоваяСтраница.АвтоматическоеПредставление      = Истина;
	// Ставим признак активной страницы
	СтрНоваяСтраница.АктивнаяСтраница   = Истина;
	
	СохрТабличныйДокумент = Новый ТабличныйДокумент;
	СохрТабличныйДокумент.Вывести(ТабличныйДокумент);
	
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + ИмяСтраницыПанели));
	
	СтруктураРеквизитовФормы.ОтключитьВыполнениеРасчета = Истина;
	ОчиститьТабличноеПолеНаСервере(ИмяСтраницыПанели);
	СтруктураРеквизитовФормы.ОтключитьВыполнениеРасчета = Ложь;
	
	ЗаполнитьПоказателиЗначениямиПоУмолчанию(ИмяСтраницыПанели);
	СохранитьДанныеРаздела(ИмяСтраницыПанели, Ложь);
	
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(СохрТабличныйДокумент);
	
	Форма.Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура Очистить(ВыполняемоеОповещение = Неопределено) Экспорт
	
	РегламентированнаяОтчетностьКлиент.Очистить(ЭтаФорма, ВыполняемоеОповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура СпециальныеОперацииПослеОчисткиЛистаНаКлиенте(ИмяСтраницы, УдалениДопЭкз = Истина) Экспорт

	СпециальныеОперацииПослеОчисткиЛиста(ЭтаФорма, ИмяСтраницы, УдалениДопЭкз);
	
КонецПроцедуры

&НаСервере
Процедура СпециальныеОперацииПослеОчисткиЛистаНаСервере(ИмяСтраницы, УдалениДопЭкз = Истина) Экспорт
	
	СпециальныеОперацииПослеОчисткиЛиста(ЭтаФорма, ИмяСтраницы, УдалениДопЭкз);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СпециальныеОперацииПослеОчисткиЛиста(Форма, ИмяСтраницы, УдалениДопЭкз) Экспорт
	
	Расчет(Форма, ИмяСтраницы);
	
КонецПроцедуры

&НаСервере
Процедура ФормироватьСтруктуруСвойствСтраниц() Экспорт

	мСвойстваРазделовДекларации.ПолучитьЭлементы().Очистить();
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	
	СтрокаУровня1.ИмяСтраницы                          = "Титульный";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.МаксКолвоЭкз						   = 0;
	СтрокаУровня1.ОчищатьРаздел                        = Ложь;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	
	СтрокаУровня1.ИмяСтраницы                          = "Раздел1";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Истина;
	СтрокаУровня1.МногостраничностьВРазделе            = Истина;
	СтрокаУровня1.МаксКолвоЭкз						   = 0;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	
	НовСтр = СтрокаУровня1.МногострочностьВРазделе.Добавить();
	НовСтр.ИдГруппы = СтруктураРеквизитовФормы.мИдГруппы1;
	НовСтр.Область = "МногострочнаяЧасть";
	НовСтр.ВысотаСтроки = 6;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	
	СтрокаУровня1.ИмяСтраницы                          = "Раздел12";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Истина;
	СтрокаУровня1.МногостраничностьВРазделе            = Истина;
	СтрокаУровня1.МаксКолвоЭкз						   = 0;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	
	НовСтр = СтрокаУровня1.МногострочностьВРазделе.Добавить();
	НовСтр.ИдГруппы = СтруктураРеквизитовФормы.мИдГруппы12;
	НовСтр.Область = "МногострочнаяЧасть";
	НовСтр.ВысотаСтроки = 6;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	
	СтрокаУровня1.ИмяСтраницы                          = "Раздел13";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Истина;
	СтрокаУровня1.МногостраничностьВРазделе            = Истина;
	СтрокаУровня1.МаксКолвоЭкз						   = 0;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	
	НовСтр = СтрокаУровня1.МногострочностьВРазделе.Добавить();
	НовСтр.ИдГруппы = СтруктураРеквизитовФормы.мИдГруппы13;
	НовСтр.Область = "МногострочнаяЧасть";
	НовСтр.ВысотаСтроки = 4;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	
	СтрокаУровня1.ИмяСтраницы                          = "Раздел2";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Истина;
	СтрокаУровня1.МногостраничностьВРазделе            = Истина;
	СтрокаУровня1.МаксКолвоЭкз						   = 0;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	СтрокаУровня1.ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста = Истина;
	
	НовСтр = СтрокаУровня1.МногострочностьВРазделе.Добавить();
	НовСтр.ИдГруппы = СтруктураРеквизитовФормы.мИдГруппы2;
	НовСтр.Область = "МногострочнаяЧасть";
	НовСтр.ВысотаСтроки = 2;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	
	СтрокаУровня1.ИмяСтраницы                          = "Раздел24";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Истина;
	СтрокаУровня1.МногостраничностьВРазделе            = Истина;
	СтрокаУровня1.МаксКолвоЭкз						   = 0;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	СтрокаУровня1.ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста = Истина;
	
	НовСтр = СтрокаУровня1.МногострочностьВРазделе.Добавить();
	НовСтр.ИдГруппы = СтруктураРеквизитовФормы.мИдГруппы24;
	НовСтр.Область = "МногострочнаяЧасть";
	НовСтр.ВысотаСтроки = 2;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	
	СтрокаУровня1.ИмяСтраницы                          = "Раздел25";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Ложь;
	СтрокаУровня1.МногостраничностьВРазделе            = Истина;
	СтрокаУровня1.МаксКолвоЭкз						   = 0;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	СтрокаУровня1.ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста = Истина;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	
	СтрокаУровня1.ИмяСтраницы                          = "Приложение1";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Истина;
	СтрокаУровня1.МногостраничностьВРазделе            = Истина;
	СтрокаУровня1.МаксКолвоЭкз						   = 0;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	СтрокаУровня1.ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста = Истина;
	
	НовСтр = СтрокаУровня1.МногострочностьВРазделе.Добавить();
	НовСтр.ИдГруппы = СтруктураРеквизитовФормы.мИдПриложения1;
	НовСтр.Область = "МногострочнаяЧасть";
	НовСтр.ВысотаСтроки = 2;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	
	СтрокаУровня1.ИмяСтраницы                          = "Приложение2";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Истина;
	СтрокаУровня1.МногостраничностьВРазделе            = Истина;
	СтрокаУровня1.МаксКолвоЭкз						   = 0;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	СтрокаУровня1.ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста = Истина;
	
	НовСтр = СтрокаУровня1.МногострочностьВРазделе.Добавить();
	НовСтр.ИдГруппы = СтруктураРеквизитовФормы.мИдПриложения2;
	НовСтр.Область = "МногострочнаяЧасть";
	НовСтр.ВысотаСтроки = 2;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	
	СтрокаУровня1.ИмяСтраницы                          = "Приложение3";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Истина;
	СтрокаУровня1.МногостраничностьВРазделе            = Истина;
	СтрокаУровня1.МаксКолвоЭкз						   = 0;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	СтрокаУровня1.ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста = Истина;
	
	НовСтр = СтрокаУровня1.МногострочностьВРазделе.Добавить();
	НовСтр.ИдГруппы = СтруктураРеквизитовФормы.мИдПриложения3;
	НовСтр.Область = "МногострочнаяЧасть";
	НовСтр.ВысотаСтроки = 2;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	
	СтрокаУровня1.ИмяСтраницы                          = "Приложение4";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Истина;
	СтрокаУровня1.МногостраничностьВРазделе            = Истина;
	СтрокаУровня1.МаксКолвоЭкз						   = 0;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	СтрокаУровня1.ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста = Истина;
	
	НовСтр = СтрокаУровня1.МногострочностьВРазделе.Добавить();
	НовСтр.ИдГруппы = СтруктураРеквизитовФормы.мИдПриложения4;
	НовСтр.Область = "МногострочнаяЧасть";
	НовСтр.ВысотаСтроки = 4;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	
	СтрокаУровня1.ИмяСтраницы                          = "Приложение5";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Истина;
	СтрокаУровня1.МногостраничностьВРазделе            = Истина;
	СтрокаУровня1.МаксКолвоЭкз						   = 0;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	СтрокаУровня1.ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста = Истина;
	
	НовСтр = СтрокаУровня1.МногострочностьВРазделе.Добавить();
	НовСтр.ИдГруппы = СтруктураРеквизитовФормы.мИдПриложения5;
	НовСтр.Область = "МногострочнаяЧасть";
	НовСтр.ВысотаСтроки = 4;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	
	СтрокаУровня1.ИмяСтраницы                          = "Приложение6";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Истина;
	СтрокаУровня1.МногостраничностьВРазделе            = Истина;
	СтрокаУровня1.МаксКолвоЭкз						   = 0;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	СтрокаУровня1.ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста = Истина;
	
	НовСтр = СтрокаУровня1.МногострочностьВРазделе.Добавить();
	НовСтр.ИдГруппы = СтруктураРеквизитовФормы.мИдПриложения6;
	НовСтр.Область = "МногострочнаяЧасть";
	НовСтр.ВысотаСтроки = 4;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	
	СтрокаУровня1.ИмяСтраницы                          = "Приложение7";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Истина;
	СтрокаУровня1.МногостраничностьВРазделе            = Истина;
	СтрокаУровня1.МаксКолвоЭкз						   = 0;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	СтрокаУровня1.ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста = Истина;
	
	НовСтр = СтрокаУровня1.МногострочностьВРазделе.Добавить();
	НовСтр.ИдГруппы = СтруктураРеквизитовФормы.мИдПриложения7;
	НовСтр.Область = "МногострочнаяЧасть";
	НовСтр.ВысотаСтроки = 4;
	
КонецПроцедуры

&НаСервере
Функция ОпределитьТабличноеПолеПоИдМногострочногоРазделаНаСервере(ИдГруппы) Экспорт
	
	ИдГрупп = Новый Структура;
	ИдГрупп.Вставить("мИдГруппы1",     СтруктураРеквизитовФормы.мИдГруппы1);
	ИдГрупп.Вставить("мИдГруппы12",    СтруктураРеквизитовФормы.мИдГруппы12);
	ИдГрупп.Вставить("мИдГруппы13",    СтруктураРеквизитовФормы.мИдГруппы13);
	ИдГрупп.Вставить("мИдГруппы2",     СтруктураРеквизитовФормы.мИдГруппы2);
	ИдГрупп.Вставить("мИдГруппы24",    СтруктураРеквизитовФормы.мИдГруппы24);
	ИдГрупп.Вставить("мИдПриложения1", СтруктураРеквизитовФормы.мИдПриложения1);
	ИдГрупп.Вставить("мИдПриложения2", СтруктураРеквизитовФормы.мИдПриложения2);
	ИдГрупп.Вставить("мИдПриложения3", СтруктураРеквизитовФормы.мИдПриложения3);
	ИдГрупп.Вставить("мИдПриложения4", СтруктураРеквизитовФормы.мИдПриложения4);
	ИдГрупп.Вставить("мИдПриложения5", СтруктураРеквизитовФормы.мИдПриложения5);
	ИдГрупп.Вставить("мИдПриложения6", СтруктураРеквизитовФормы.мИдПриложения6);
	ИдГрупп.Вставить("мИдПриложения7", СтруктураРеквизитовФормы.мИдПриложения7);
	
	Возврат ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИдГруппы, ИдГрупп);
	
КонецФункции

&НаКлиенте
Функция ОпределитьТабличноеПолеПоИдМногострочногоРазделаНаКлиенте(ИдГруппы) Экспорт
	
	ИдГрупп = Новый Структура;
	ИдГрупп.Вставить("мИдГруппы1",     СтруктураРеквизитовФормы.мИдГруппы1);
	ИдГрупп.Вставить("мИдГруппы12",    СтруктураРеквизитовФормы.мИдГруппы12);
	ИдГрупп.Вставить("мИдГруппы13",    СтруктураРеквизитовФормы.мИдГруппы13);
	ИдГрупп.Вставить("мИдГруппы2",     СтруктураРеквизитовФормы.мИдГруппы2);
	ИдГрупп.Вставить("мИдГруппы24",    СтруктураРеквизитовФормы.мИдГруппы24);
	ИдГрупп.Вставить("мИдПриложения1", СтруктураРеквизитовФормы.мИдПриложения1);
	ИдГрупп.Вставить("мИдПриложения2", СтруктураРеквизитовФормы.мИдПриложения2);
	ИдГрупп.Вставить("мИдПриложения3", СтруктураРеквизитовФормы.мИдПриложения3);
	ИдГрупп.Вставить("мИдПриложения4", СтруктураРеквизитовФормы.мИдПриложения4);
	ИдГрупп.Вставить("мИдПриложения5", СтруктураРеквизитовФормы.мИдПриложения5);
	ИдГрупп.Вставить("мИдПриложения6", СтруктураРеквизитовФормы.мИдПриложения6);
	ИдГрупп.Вставить("мИдПриложения7", СтруктураРеквизитовФормы.мИдПриложения7);
	
	Возврат ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИдГруппы, ИдГрупп);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИдГруппы, ИдГрупп)
	
	Перем ТекТабличноеПоле;
	
	Если ИдГруппы = ИдГрупп.мИдГруппы1 Тогда
		ТекТабличноеПоле = "Раздел1";
	ИначеЕсли ИдГруппы = ИдГрупп.мИдГруппы12 Тогда
		ТекТабличноеПоле = "Раздел12";
	ИначеЕсли ИдГруппы = ИдГрупп.мИдГруппы13 Тогда
		ТекТабличноеПоле = "Раздел13";
	ИначеЕсли ИдГруппы = ИдГрупп.мИдГруппы2 Тогда
		ТекТабличноеПоле = "Раздел2";
	ИначеЕсли ИдГруппы = ИдГрупп.мИдГруппы24 Тогда
		ТекТабличноеПоле = "Раздел24";
	ИначеЕсли ИдГруппы = ИдГрупп.мИдПриложения1 Тогда
		ТекТабличноеПоле = "Приложение1";
	ИначеЕсли ИдГруппы = ИдГрупп.мИдПриложения2 Тогда
		ТекТабличноеПоле = "Приложение2";
	ИначеЕсли ИдГруппы = ИдГрупп.мИдПриложения3 Тогда
		ТекТабличноеПоле = "Приложение3";
	ИначеЕсли ИдГруппы = ИдГрупп.мИдПриложения4 Тогда
		ТекТабличноеПоле = "Приложение4";
	ИначеЕсли ИдГруппы = ИдГрупп.мИдПриложения5 Тогда
		ТекТабличноеПоле = "Приложение5";
	ИначеЕсли ИдГруппы = ИдГрупп.мИдПриложения6 Тогда
		ТекТабличноеПоле = "Приложение6";
	ИначеЕсли ИдГруппы = ИдГрупп.мИдПриложения7 Тогда
		ТекТабличноеПоле = "Приложение7";
	КонецЕсли;
	
	Возврат ТекТабличноеПоле;
	
КонецФункции

&НаСервере
Функция ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ИмяЛиста = Неопределено) Экспорт
	
	ИдГрупп = Новый Структура;
	ИдГрупп.Вставить("мИдГруппы1",     СтруктураРеквизитовФормы.мИдГруппы1);
	ИдГрупп.Вставить("мИдГруппы12",    СтруктураРеквизитовФормы.мИдГруппы12);
	ИдГрупп.Вставить("мИдГруппы13",    СтруктураРеквизитовФормы.мИдГруппы13);
	ИдГрупп.Вставить("мИдГруппы2",     СтруктураРеквизитовФормы.мИдГруппы2);
	ИдГрупп.Вставить("мИдГруппы24",    СтруктураРеквизитовФормы.мИдГруппы24);
	ИдГрупп.Вставить("мИдПриложения1", СтруктураРеквизитовФормы.мИдПриложения1);
	ИдГрупп.Вставить("мИдПриложения2", СтруктураРеквизитовФормы.мИдПриложения2);
	ИдГрупп.Вставить("мИдПриложения3", СтруктураРеквизитовФормы.мИдПриложения3);
	ИдГрупп.Вставить("мИдПриложения4", СтруктураРеквизитовФормы.мИдПриложения4);
	ИдГрупп.Вставить("мИдПриложения5", СтруктураРеквизитовФормы.мИдПриложения5);
	ИдГрупп.Вставить("мИдПриложения6", СтруктураРеквизитовФормы.мИдПриложения6);
	ИдГрупп.Вставить("мИдПриложения7", СтруктураРеквизитовФормы.мИдПриложения7);
	
	Возврат ОпределитьИдМногострочногоРазделаПоАктивнойСтранице(ИмяЛиста, , ИдГрупп);
	
КонецФункции

&НаКлиенте
Функция ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаКлиенте(ИмяЛиста = Неопределено) Экспорт
	
	ИдГрупп = Новый Структура;
	ИдГрупп.Вставить("мИдГруппы1",     СтруктураРеквизитовФормы.мИдГруппы1);
	ИдГрупп.Вставить("мИдГруппы12",    СтруктураРеквизитовФормы.мИдГруппы12);
	ИдГрупп.Вставить("мИдГруппы13",    СтруктураРеквизитовФормы.мИдГруппы13);
	ИдГрупп.Вставить("мИдГруппы2",     СтруктураРеквизитовФормы.мИдГруппы2);
	ИдГрупп.Вставить("мИдГруппы24",    СтруктураРеквизитовФормы.мИдГруппы24);
	ИдГрупп.Вставить("мИдПриложения1", СтруктураРеквизитовФормы.мИдПриложения1);
	ИдГрупп.Вставить("мИдПриложения2", СтруктураРеквизитовФормы.мИдПриложения2);
	ИдГрупп.Вставить("мИдПриложения3", СтруктураРеквизитовФормы.мИдПриложения3);
	ИдГрупп.Вставить("мИдПриложения4", СтруктураРеквизитовФормы.мИдПриложения4);
	ИдГрупп.Вставить("мИдПриложения5", СтруктураРеквизитовФормы.мИдПриложения5);
	ИдГрупп.Вставить("мИдПриложения6", СтруктураРеквизитовФормы.мИдПриложения6);
	ИдГрупп.Вставить("мИдПриложения7", СтруктураРеквизитовФормы.мИдПриложения7);
	
	Возврат ОпределитьИдМногострочногоРазделаПоАктивнойСтранице(ИмяЛиста, , ИдГрупп);

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ОпределитьИдМногострочногоРазделаПоАктивнойСтранице(ИмяЛиста = Неопределено, ТекущаяСтраница = Неопределено, ИдГрупп)
	
	Перем ИмяГруппы;

	Если ИмяЛиста = Неопределено Тогда
		ИмяТекущейСтраницыПанели = ТекущаяСтраница.Имя;
	Иначе
		ИмяТекущейСтраницыПанели = ИмяЛиста;
	КонецЕсли;

	Если ИмяТекущейСтраницыПанели = "Раздел1" Тогда
		ИмяГруппы = ИдГрупп.мИдГруппы1;
	ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел12" Тогда
		ИмяГруппы = ИдГрупп.мИдГруппы12;
	ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел13" Тогда
		ИмяГруппы = ИдГрупп.мИдГруппы13;
	ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел2" Тогда
		ИмяГруппы = ИдГрупп.мИдГруппы2;
	ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел24" Тогда
		ИмяГруппы = ИдГрупп.мИдГруппы24;
	ИначеЕсли ИмяТекущейСтраницыПанели = "Приложение1" Тогда
		ИмяГруппы = ИдГрупп.мИдПриложения1;
	ИначеЕсли ИмяТекущейСтраницыПанели = "Приложение2" Тогда
		ИмяГруппы = ИдГрупп.мИдПриложения2;
	ИначеЕсли ИмяТекущейСтраницыПанели = "Приложение3" Тогда
		ИмяГруппы = ИдГрупп.мИдПриложения3;
	ИначеЕсли ИмяТекущейСтраницыПанели = "Приложение4" Тогда
		ИмяГруппы = ИдГрупп.мИдПриложения4;
	ИначеЕсли ИмяТекущейСтраницыПанели = "Приложение5" Тогда
		ИмяГруппы = ИдГрупп.мИдПриложения5;
	ИначеЕсли ИмяТекущейСтраницыПанели = "Приложение6" Тогда
		ИмяГруппы = ИдГрупп.мИдПриложения6;
	ИначеЕсли ИмяТекущейСтраницыПанели = "Приложение7" Тогда
		ИмяГруппы = ИдГрупп.мИдПриложения7;
	КонецЕсли;
	
	Возврат ИмяГруппы;

КонецФункции

&НаСервере
Функция СобратьДанныеТекущегоТаблПоляНаСервере(ИмяТабличногоПоля) Экспорт
	
	Возврат СобратьДанныеТекущегоТаблПоля(ЭтаФорма, ИмяТабличногоПоля);

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СобратьДанныеТекущегоТаблПоля(Форма, ИмяТабличногоПоля)
	
	// Собираем в список значений имена вычисляемых показателей,
	// которые участвуют в расчете других показателей отчета по
	// внутренним связям между страницами декларации.
	// При создании коллекции значений редактируемых полей табличного
	// документа они не будут игнорированы, а их значения будут собраны
	// в структуру. Такой алгоритм имеет назначение ускорить вычислительные
	// процессы.
	//
	// В противном случае нам пришлось для получения итогового значения
	// вычисляемого показателя по всем страницам многостраничного раздела
	// вызвать процедуру расчета по каждой странице.
	//
	
	ТабличноеПоле = Форма[ИмяТабличногоПоля];

	СтруктураДанныхПоля = Новый Структура;

	Для Инд = 0 По ТабличноеПоле.Области.Количество() - 1 Цикл
		ТекущаяОбласть = ТабличноеПоле.Области[Инд];

		Если НЕ Тип(ТекущаяОбласть) = Тип("РисунокТабличногоДокумента") И Не ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			Продолжить;
		КонецЕсли;

		Если ТекущаяОбласть.СодержитЗначение <> Истина Тогда
			Продолжить;
		КонецЕсли;

		ИмяПоказателя      = ТекущаяОбласть.Имя;
		ЗначениеПоказателя = ТекущаяОбласть.Значение;

		СтруктураДанныхПоля.Вставить(ИмяПоказателя, ЗначениеПоказателя);

	КонецЦикла;

	Возврат СтруктураДанныхПоля;
	
КонецФункции

&НаСервере
Процедура ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставленияПоРазделуНаСервере(Знач ИмяРаздела) Экспорт
КонецПроцедуры

&НаКлиенте
Процедура ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставленияПоРазделуНаКлиенте(Знач ИмяРаздела) Экспорт
КонецПроцедуры

&НаСервере
Процедура ЗаполнениеЗначенийВКвадратикахНаСервере(Знач ИмяСтраницы) Экспорт

	ЗаполнениеЗначенийВКвадратиках(ЭтаФорма, ИмяСтраницы);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнениеЗначенийВКвадратиках(Форма, Знач ИмяСтраницы)
КонецПроцедуры

&НаСервере
Функция ОбновитьПеременныеМодуляНаСервере(ИмяПоказателя, ЗначениеПоказателя) Экспорт

	ИзмененияПроизошли = Истина;

	Если Лев(ИмяПоказателя, 1) = "_" Тогда
		Возврат Истина;
	КонецЕсли;

	Возврат ИзмененияПроизошли;

КонецФункции

&НаСервере
Процедура ПоказатьПериод()

	ПолеТабличногоДокументаТитульный = ТабличныйДокумент;
	
	Если СокрЛП(ПолеТабличногоДокументаТитульный.Области.Период.Значение) = "" ИЛИ СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено Тогда
		// выводим признак периода на титульный лист
		КодОтчетногоПериода = Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ=ММ");
		ПолеТабличногоДокументаТитульный.Области.Период.Значение = КодОтчетногоПериода;
	КонецЕсли; 
	
	// выводим год на титульный лист
	ОтчетныйГод = Формат(Год(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета), "ЧГ=");
	ПолеТабличногоДокументаТитульный.Области.ОтчетГод.Значение = ОтчетныйГод;
	
	// задаем заголовок формы
	СтруктураРеквизитовФормы.СтрПериодОтчета = ПредставлениеПериода(НачалоДня(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета), КонецДня(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета), "ФП = Истина");
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДатуВЯчейкахНаСервере() Экспорт
	
	ЗаполнитьДатуВЯчейках(ЭтаФорма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьДатуВЯчейках(Форма)
	
	Форма.ТабличныйДокумент.Области.ДатаПодписи.Значение = Форма.ДатаПодписи;
	
КонецПроцедуры

&НаСервере
Процедура УправлениеЛистамиНаСервере(ТипНП = Неопределено) Экспорт

	УправлениеЛистами(ЭтаФорма, ТипНП);

КонецПроцедуры

&НаКлиенте
Процедура УправлениеЛистамиНаКлиенте(ТипНП = Неопределено) Экспорт

	УправлениеЛистами(ЭтаФорма, ТипНП);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеЛистами(Форма, ТипНП = Неопределено)

	Если ТипНП = Неопределено Тогда
		
		ТипНП = 0;

		Если (Форма.СтруктураРеквизитовФормы.Организация = Неопределено) Или (Форма.СтруктураРеквизитовФормы.Организация = РегламентированнаяОтчетностьКлиентСервер.ПустоеЗначениеТипа("СправочникСсылка.Организации")) Тогда
			Возврат
		КонецЕсли;

		ОргСведения = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(Форма.СтруктураРеквизитовФормы.Организация, Форма.ДатаПодписи, "ТипНП");
		ОргСведения.Свойство("ТипНП", ТипНП);
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСведенияОбОрганизации(ВПрограммеИзмененаДатаПодписи = Ложь)
	
	ДополнятьСправа = 1;
	
	Если НЕ ВПрограммеИзмененаДатаПодписи Тогда
	
		СтрокаСведений = "ИННЮЛ, КППЮЛ, НаимЮЛПол, КодНО, НаимНО, ТипНП, ТелОрганизации, ФИО, ОКТМО";
		СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(СтруктураРеквизитовФормы.Организация, ДатаПодписи, СтрокаСведений);
		
		ИНН = СокрЛП(СведенияОбОрганизации.ИННЮЛ);
				
		КПП = СокрЛП(СведенияОбОрганизации.КППЮЛ);
				
		ТабличныйДокумент.Области.ИНН1.Значение = ИНН;
		ТабличныйДокумент.Области.КПП1.Значение = КПП;
		
		КодНО = СведенияОбОрганизации.КодНО;
		Для Инд = СтрДлина(СведенияОбОрганизации.КодНО) + 1 По 4 Цикл
			КодНО = " " + КодНО;
		КонецЦикла;
		ТабличныйДокумент.Области.КодИМНС.Значение = КодНО;
		
		ТабличныйДокумент.Области.НаимОрг.Значение = СокрЛП(СведенияОбОрганизации.НаимЮлПол);
		
		ТабличныйДокумент.Области.ТелОрганизации.Значение = СокрЛП(СведенияОбОрганизации.ТелОрганизации);
						
		ОКТМО = СведенияОбОрганизации.ОКТМО;
		ЗаполнитьОКТМО(ОКТМО);
		
		ЗаполнитьДатуВЯчейках(ЭтаФорма);
		
	КонецЕсли;
	
	РегламентированнаяОтчетность.ПолучитьЗначениеОКВЭД(ДатаПодписи, СтруктураРеквизитовФормы);
	РегламентированнаяОтчетностьКлиентСервер.УстановитьЗначениеОКВЭД(ДатаПодписи,
																	 СтруктураРеквизитовФормы,
																	 ТабличныйДокумент.Области.ОКВЭД.Значение);
	
	ЗаполнитьСведенияОПодписантах();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСведенияОПодписантах() Экспорт
	
	ТипПодписанта = "1";
	Подписант = "";
	НаименованиеОрганизацииПредставителя = "";
	ДокументПредставителя = "";
	
	//выясним, есть ли представитель
	КодНО = СокрЛП(ТабличныйДокумент.Области.КодИМНС.Значение);
	КПП   = СокрЛП(ТабличныйДокумент.Области.КПП1.Значение);

	СведенияОПредставителе = РегламентированнаяОтчетностьВызовСервера.ПолучитьПоКодамСведенияОПредставителе(СтруктураРеквизитовФормы.Организация, КодНО, КПП);
	
	ТипПодписанта = СведенияОПредставителе.ТипПодписанта;
	
	Если ТипПодписанта = "1" Тогда
		//представителя нет
		Если РегламентированнаяОтчетностьВызовСервера.ЭтоЮридическоеЛицо(СтруктураРеквизитовФормы.Организация) Тогда
			//подписант - руководитель
			СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(СтруктураРеквизитовФормы.Организация, ДатаПодписи, "ФИОРук, ФИО");
			Подписант = СокрЛП(?(ЗначениеЗаполнено(СведенияОбОрганизации.ФИОРук), СведенияОбОрганизации.ФИОРук, СведенияОбОрганизации.ФИО));	
		КонецЕсли;
	Иначе
		//есть представитель, подписант - он
	    Подписант 								= СведенияОПредставителе.ФИОПредставителя;
 		НаименованиеОрганизацииПредставителя 	= СведенияОПредставителе.НаименованиеОрганизацииПредставителя;
		ДокументПредставителя 					= СведенияОПредставителе.ДокументПредставителя;
	КонецЕсли;
	
	ТабличныйДокумент.Области.ПрПодп.Значение = ТипПодписанта;
	ТабличныйДокумент.Области.ОргПодписант.Значение = Подписант;
	ТабличныйДокумент.Области.ОргУп.Значение = НаименованиеОрганизацииПредставителя;
	ТабличныйДокумент.Области.ДокУпПред.Значение = ДокументПредставителя;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораСтраниц(ВариантВыбора)
	Перем ТекущийРазделОтчетаСокрНаим;
	Перем НомерСтраницыРазделаОтчета;
	
	// Запоминаем текущий раздел, установленный в дереве разделов отчета.
	Если НЕ Элементы.РазделыОтчета.ТекущиеДанные = Неопределено Тогда
		ТекущийРазделОтчетаСокрНаим = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
		НомерСтраницыРазделаОтчета  = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета;
	КонецЕсли;
	
	мПараметры = Новый Структура;
	мПараметры.Вставить("Автосохранение", Ложь);
	мПараметры.Вставить("ИмеетсяРеквизитДеревоВыбранныхСтраниц", Истина);
	
	Если СтруктураРеквизитовФормы.ДоступенМеханизмПечатиРеглОтчетностиСДвухмернымШтрихкодомPDF417 Тогда
		мПараметры.Вставить("РазрешитьВстроеннуюПечать", Истина);
	КонецЕсли;
	мПараметры.Вставить("ПроверкаСоотношений", Истина);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ФлажокОтклАвтоРасчет", СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);
	ПараметрыФормы.Вставить("мПечатьБезШтрихкодаРазрешена", СтруктураРеквизитовФормы.мПечатьБезШтрихкодаРазрешена);
	ПараметрыФормы.Вставить("мСчетчикСтраниц", СтруктураРеквизитовФормы.мСчетчикСтраниц);
	ПараметрыФормы.Вставить("мАвтоВыборКодов", СтруктураРеквизитовФормы.мАвтоВыборКодов);
	ПараметрыФормы.Вставить("ЕдиницаИзмерения", СтруктураРеквизитовФормы.ЕдиницаИзмерения);
	ПараметрыФормы.Вставить("ТочностьЕдиницыИзмерения", СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения);
	ПараметрыФормы.Вставить("мПараметры", мПараметры);
	ПараметрыФормы.Вставить("мПроверятьСоотношенияПриПечатиИВыгрузки", СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки);
	
	ФормаНастройкиОтчета = РегламентированнаяОтчетностьКлиент.ПолучитьОбщуюФормуПоИмени("НастройкиОтчета", ПараметрыФормы, ЭтаФорма);

	мДеревоВыбранныхСтраниц.ПолучитьЭлементы().Очистить();

	КопироватьДанныеФормы(мДеревоСтраницОтчета, ФормаНастройкиОтчета.Дерево);
	
	ЗначениеАвторасчета = СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет;
	ЗначениеЕдИзм       = СтруктураРеквизитовФормы.ЕдиницаИзмерения;
	ЗначениеЗпт         = СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения;
	
	ДополнительныеПараметры = Новый Структура("ЗначениеАвторасчета, ЗначениеЕдИзм, ЗначениеЗпт, НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим", ЗначениеАвторасчета, ЗначениеЕдИзм, ЗначениеЗпт, НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим);
	ОписаниеОповещения =  Новый ОписаниеОповещения("ОткрытьФормуВыбораСтраницЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ФормаНастройкиОтчета.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
	ФормаНастройкиОтчета.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	ФормаНастройкиОтчета.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораСтраницЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	ЗначениеАвторасчета = ДополнительныеПараметры.ЗначениеАвторасчета;
	ЗначениеЕдИзм = ДополнительныеПараметры.ЗначениеЕдИзм;
	ЗначениеЗпт = ДополнительныеПараметры.ЗначениеЗпт;
	НомерСтраницыРазделаОтчета = ДополнительныеПараметры.НомерСтраницыРазделаОтчета;
	ТекущийРазделОтчетаСокрНаим = ДополнительныеПараметры.ТекущийРазделОтчетаСокрНаим;
	
	РегламентированнаяОтчетностьКлиентСервер.ПоказатьКнопкиПечати(ЭтаФорма);
	
	Модифицированность = Истина;
	
	флЗначенияИдентичны = Истина;
	
	Для Индекс = 0 По мДеревоСтраницОтчета.ПолучитьЭлементы().Количество() - 1 Цикл
		
		Если НЕ мДеревоСтраницОтчета.ПолучитьЭлементы()[Индекс].ПоказатьСтраницу = мДеревоВыбранныхСтраниц.ПолучитьЭлементы()[Индекс].ПоказатьСтраницу Тогда	
			флЗначенияИдентичны = Ложь;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЗначениеАвторасчета <> СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Тогда
		
		#Если ВебКлиент Тогда
			ИзменитьТаблицуВариантовЗаполненияНаСервере();
		#Иначе
			РегламентированнаяОтчетностьКлиентСервер.ИзменитьТаблицуВариантовЗаполнения(ЭтаФорма, НЕ СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);
		#КонецЕсли	
		
		Если  ТекущийРазделОтчетаСокрНаим = "Раздел2" ИЛИ ТекущийРазделОтчетаСокрНаим = "Раздел24" Тогда 
			
			ПереопределитьЦветЯчеекВЗависимостиОтУсловия(ЭтаФорма, ТекущийРазделОтчетаСокрНаим);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЕдИзм <> СтруктураРеквизитовФормы.ЕдиницаИзмерения
		ИЛИ ЗначениеЗпт <> СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения Тогда
		ПослеСменыЕдИзмеренияИТочности();
	КонецЕсли;
	
	// Управляем видимостью страниц основной панели формы
	РегламентированнаяОтчетностьКлиент.ПоказатьСтраницыОтчетаНаКлиенте(ЭтаФорма);
	
	Если НЕ флЗначенияИдентичны Тогда
		
		СформироватьДеревоРазделовОтчетаНаКлиенте();
		
		Если НЕ ТекущийРазделОтчетаСокрНаим = Неопределено Тогда
			
			// Пытаемся найти ранее запомненный раздел.
			НайденнаяСтрока = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(РазделыОтчета.ПолучитьЭлементы(), "КолонкаРазделыОтчетаСокрНаим", ТекущийРазделОтчетаСокрНаим);
			
			Если НЕ НайденнаяСтрока = Неопределено 
				И НЕ НомерСтраницыРазделаОтчета = Неопределено 
				И НайденнаяСтрока.ПолучитьЭлементы().Количество() > 0 Тогда
				
				НайденнаяСтрока = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(НайденнаяСтрока.ПолучитьЭлементы(), "КолонкаНомерСтраницыРазделаОтчета", НомерСтраницыРазделаОтчета);
				
			КонецЕсли;
			
			// В случае успешного поиска, устанавливаем курсор на найденный раздел.
			Если НЕ НайденнаяСтрока = Неопределено Тогда
				Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяСтрока.ПолучитьИдентификатор();
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура ИзменитьТаблицуВариантовЗаполненияНаСервере()
	
	РегламентированнаяОтчетностьКлиентСервер.ИзменитьТаблицуВариантовЗаполнения(ЭтаФорма, НЕ СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);
	
КонецПроцедуры

&НаСервере
Процедура ВывестиНаПечатьЛист(Парам1, ОбщиеРеквизитыРазделов, СтрПоля = Неопределено)
	
	ПрефиксИменМакетов = "ПечатныйБланк2013Кв4_";
	
	СоответствиеРазделовМакетам = Новый Соответствие;
	СоответствиеРазделовМакетам.Вставить("Титульный",   ПрефиксИменМакетов + "Титульный");
	СоответствиеРазделовМакетам.Вставить("Раздел1",     ПрефиксИменМакетов + "Раздел1");
	СоответствиеРазделовМакетам.Вставить("Раздел12",    ПрефиксИменМакетов + "Раздел12");
	СоответствиеРазделовМакетам.Вставить("Раздел13",    ПрефиксИменМакетов + "Раздел13");
	СоответствиеРазделовМакетам.Вставить("Раздел2",     ПрефиксИменМакетов + "Раздел2");
	СоответствиеРазделовМакетам.Вставить("Раздел24",    ПрефиксИменМакетов + "Раздел24");
	СоответствиеРазделовМакетам.Вставить("Раздел25",    ПрефиксИменМакетов + "Раздел25");
	СоответствиеРазделовМакетам.Вставить("Приложение1", ПрефиксИменМакетов + "Приложение1");
	СоответствиеРазделовМакетам.Вставить("Приложение2", ПрефиксИменМакетов + "Приложение2");
	СоответствиеРазделовМакетам.Вставить("Приложение3", ПрефиксИменМакетов + "Приложение3");
	СоответствиеРазделовМакетам.Вставить("Приложение4", ПрефиксИменМакетов + "Приложение4");
	СоответствиеРазделовМакетам.Вставить("Приложение5", ПрефиксИменМакетов + "Приложение5");
	СоответствиеРазделовМакетам.Вставить("Приложение6", ПрефиксИменМакетов + "Приложение6");
	СоответствиеРазделовМакетам.Вставить("Приложение7", ПрефиксИменМакетов + "Приложение7");
		
	МЧБРаздела = СоответствиеРазделовМакетам[Парам1.ИмяСтраницы];
		
	МакетМЧБ = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(МЧБРаздела);
	МакетМЧБ.ПолеСверху = 5;
	МакетМЧБ.ПолеСправа = 5;
	МакетМЧБ.ПолеСнизу  = 5;
	МакетМЧБ.ПолеСлева  = 5;
	
	ВремПоля = Новый Структура(СтрПоля);
			
	ИдГруппы = ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(Парам1.ИмяСтраницы);
	
	Если ИдГруппы <> Неопределено Тогда
		
		ИсхКолвоСтрокБлока = 0;
		
		//определение исходного количества строк на листе МЧБ
		Если Парам1.ИмяСтраницы = "Раздел1" Тогда
			ИсхКолвоСтрокБлока = 6;
		ИначеЕсли Парам1.ИмяСтраницы = "Раздел12" Тогда
			ИсхКолвоСтрокБлока = 5;
		ИначеЕсли Парам1.ИмяСтраницы = "Раздел13" Тогда
			ИсхКолвоСтрокБлока = 8;
		ИначеЕсли Парам1.ИмяСтраницы = "Раздел2"  Тогда
			ИсхКолвоСтрокБлока = 9;
		ИначеЕсли Парам1.ИмяСтраницы = "Раздел24" Тогда
			ИсхКолвоСтрокБлока = 25;
		ИначеЕсли Парам1.ИмяСтраницы = "Приложение1" Тогда
			ИсхКолвоСтрокБлока = 22;
		ИначеЕсли Парам1.ИмяСтраницы = "Приложение2" Тогда
			ИсхКолвоСтрокБлока = 18;
		ИначеЕсли Парам1.ИмяСтраницы = "Приложение3" Тогда
			ИсхКолвоСтрокБлока = 18;
		ИначеЕсли Парам1.ИмяСтраницы = "Приложение4" Тогда
			ИсхКолвоСтрокБлока = 6;
		ИначеЕсли Парам1.ИмяСтраницы = "Приложение5" Тогда
			ИсхКолвоСтрокБлока = 6;
		ИначеЕсли Парам1.ИмяСтраницы = "Приложение6" Тогда
			ИсхКолвоСтрокБлока = 6;
		ИначеЕсли Парам1.ИмяСтраницы = "Приложение7" Тогда
			ИсхКолвоСтрокБлока = 6;
		КонецЕсли;
		
		СохрТабличныйДокумент = Новый ТабличныйДокумент;
		СохрТабличныйДокумент.Вывести(ТабличныйДокумент);
		
		ТекКолвоСтрокБлока = ЭтаФорма[мСтруктураМногострочныхРазделов[ИдГруппы]].Количество();
		Если ТекКолвоСтрокБлока > 0 И ИсхКолвоСтрокБлока > 0 Тогда
			//Определение общего количества листов МЧБ
			КолвоЛистовМЧБ = Цел(ТекКолвоСтрокБлока / ИсхКолвоСтрокБлока);
			КолвоСтрокНаПоследнемЛисте = ТекКолвоСтрокБлока % ИсхКолвоСтрокБлока;
			Если КолвоСтрокНаПоследнемЛисте <> 0 Тогда
				КолвоЛистовМЧБ = КолвоЛистовМЧБ + 1;	
			КонецЕсли;
			
			//заполнение строки имен показателей (для проверки перед переименованием)
			СтрИменаПоказателей = "";
			
			Колонки = ДанныеФормыВЗначение(ЭтаФорма[мСтруктураМногострочныхРазделов[ИдГруппы]], Тип("ТаблицаЗначений")).Колонки;
			
			Для каждого КолонкаСтруктуры Из Колонки Цикл
				СтрИменаПоказателей = СтрИменаПоказателей + КолонкаСтруктуры.Имя;
			КонецЦикла;
			
			//Заполнение списка листов МЧБ
			СписокЛистовМЧБ = Новый СписокЗначений;
			Для Сч = 1 По КолвоЛистовМЧБ Цикл
				
				СписокОчищаемыхОбластей = Новый Массив;
				СписокОбластейПереименования = Новый СписокЗначений;
				Для каждого ТекущаяОбласть Из МакетМЧБ.Области Цикл
					ИмяЯчейки = ТекущаяОбласть.Имя;
					
					Если СтрДлина(ИмяЯчейки) < 13 ИЛИ СтрНайти(СтрИменаПоказателей, Лев(ИмяЯчейки, 13)) = 0 Тогда
						//проверка на вхождение в данную многострочную часть
						Продолжить;
					КонецЕсли;
					
					//определение и обрасывание НомерЯчейки
					ПоказательИНомерСтрокиСРазделителем = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСмысловуюЧастьИмениЯчейки(ИмяЯчейки, Истина); // ВМЕСТЕ с разделителем
					ПоказательИНомерСтроки = Лев(ПоказательИНомерСтрокиСРазделителем,СтрДлина(ПоказательИНомерСтрокиСРазделителем) - 1);
					НомерЯчейки = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСмысловуюЧастьИмениЯчейки(ИмяЯчейки, Ложь);
					//определение СмысловаяЧасть и ТекущийСчетчик
					СмысловаяЧастьСРазделителем = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСмысловуюЧастьИмениЯчейки(ПоказательИНомерСтроки, Истина); // ВМЕСТЕ с разделителем
					СмысловаяЧасть = Лев(СмысловаяЧастьСРазделителем,СтрДлина(СмысловаяЧастьСРазделителем) - 1);
					ТекущийСчетчик = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСмысловуюЧастьИмениЯчейки(ПоказательИНомерСтроки, Ложь);
					
					//Окончательная проверка на вхождение в данную многострочную часть
					Если СтрНайти(СтрИменаПоказателей,СмысловаяЧасть) = 0 Тогда
						Продолжить;
					КонецЕсли;
					
					НовыйСчетчик = Число(ТекущийСчетчик) + ?(Сч = 1, 0, ИсхКолвоСтрокБлока);
					Если НовыйСчетчик > ТекКолвоСтрокБлока Тогда
						//очищение происходит после этого цикла
						СписокОчищаемыхОбластей.Добавить(ТекущаяОбласть);
						Продолжить;
					КонецЕсли;
					
					//Подготовка к переименованию
					//заполнение списка: значение - область, представление - будущее имя
					СписокОбластейПереименования.Добавить(ТекущаяОбласть, СмысловаяЧасть + "_" + НовыйСчетчик + "_" + НомерЯчейки);
				КонецЦикла;
				
				//Очищение
				Для каждого ОбластьСписка Из СписокОчищаемыхОбластей Цикл
					ОбластьСписка.Имя = "";
					ОбластьСписка.Текст = ?(СокрЛП(ОбластьСписка.Текст) = ".", ".", "-");
				КонецЦикла;
				
				//Переименование
				Для каждого ЭлСпискаОбластей Из СписокОбластейПереименования Цикл
					ЭлСпискаОбластей.Значение.Имя = ЭлСпискаОбластей.Представление;
				КонецЦикла;
				
				СписокЛистовМЧБ.Добавить(МакетМЧБ.ПолучитьОбласть());
			КонецЦикла;
			
			Для каждого элЛистМЧБ Из СписокЛистовМЧБ Цикл
				
				ТабличныйДокумент.Очистить();
				ТабличныйДокумент.Вывести(СохрТабличныйДокумент);

				ЛистМЧБ = элЛистМЧБ.Значение;
				
				ЗаполнитьМакетМЧБ(Парам1, ЛистМЧБ, ОбщиеРеквизитыРазделов);
				
				Если СписокЛистовМЧБ.Индекс(элЛистМЧБ)<СписокЛистовМЧБ.Количество() - 1 Тогда
					//Выводится не последний лист многострочной серии листов МЧБ
					//Необходимо обнулить итоговые показатели
					ОбнулитьИтоговыеПоказателиНаЛистеМЧБ(ЛистМЧБ);
				КонецЕсли;
				
				ЗаполнитьЗначенияСвойств(ВремПоля, ТабличныйДокумент, СтрПоля);
				ТабличныйДокумент.Очистить();
				ТабличныйДокумент.Вывести(ЛистМЧБ);
				ЗаполнитьЗначенияСвойств(ТабличныйДокумент, ЛистМЧБ, СтрПоля, "Макет");
				
				РегламентированнаяОтчетность.ВывестиНаПечатьЛистОбщая(ЭтаФорма.Заголовок, Парам1, ТабличныйДокумент, СтруктураРеквизитовФормы.мПечатныеФормы);
								
				ЗаполнитьЗначенияСвойств(ТабличныйДокумент, ВремПоля, СтрПоля);
			КонецЦикла;
			Возврат;
		Иначе
			//Не добавляли строки - продолжение выполнения
		КонецЕсли;
	КонецЕсли;
	
	ЗаполнитьМакетМЧБ(Парам1, МакетМЧБ, ОбщиеРеквизитыРазделов);
	
	ЗаполнитьЗначенияСвойств(ВремПоля, ТабличныйДокумент, СтрПоля);
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(МакетМЧБ);
	ЗаполнитьЗначенияСвойств(ТабличныйДокумент, МакетМЧБ, СтрПоля, "Макет");
		
	РегламентированнаяОтчетность.ВывестиНаПечатьЛистОбщая(ЭтаФорма.Заголовок, Парам1, ТабличныйДокумент, СтруктураРеквизитовФормы.мПечатныеФормы);
		
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьМакетМЧБ(ПараметрыПечати, МакетМЧБ, ОбщиеРеквизитыРазделов)
	
	Показатели = Новый ТаблицаЗначений;
	Показатели.Колонки.Добавить("Имя");
	Показатели.Колонки.Добавить("Значение");
	Показатели.Колонки.Добавить("ЗначениеМЧБ");
	
	Показатели.Индексы.Добавить("Имя");
	
	ИсходныйМакет = ТабличныйДокумент;
	Для Каждого Область Из ИсходныйМакет.Области Цикл
		Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник И Область.СодержитЗначение = Истина Тогда
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = Область.Имя;
			НовСтр.Значение = Область.Значение;
			НовСтр.ЗначениеМЧБ = ПолучитьЗначениеМЧБ(Область);
		КонецЕсли;
	КонецЦикла;
	
	НайденноеЗначение = Показатели.Найти("ИНН1", "Имя");
	
	Если НЕ НайденноеЗначение = Неопределено Тогда
		Показатели.Удалить(НайденноеЗначение);
	КонецЕсли;
		
	ИНН = "";
	Для Ном = 0 По 11 Цикл
		ИНН = ИНН + ОбщиеРеквизитыРазделов.ИНН[Ном];
	КонецЦикла;
	
	НовСтр = Показатели.Добавить();
	НовСтр.Имя = "ИНН1";
	НовСтр.Значение = ИНН;
	НовСтр.ЗначениеМЧБ = СокрЛП(ИНН);
	
	НайденноеЗначение = Показатели.Найти("КПП1", "Имя");
	
	Если НЕ НайденноеЗначение = Неопределено Тогда
		Показатели.Удалить(НайденноеЗначение);
	КонецЕсли;
		
	КПП = "";
	Для Ном = 0 По 8 Цикл
		КПП = КПП + ОбщиеРеквизитыРазделов.КПП[Ном];
	КонецЦикла;
	
	НовСтр = Показатели.Добавить();
	НовСтр.Имя = "КПП1";
	НовСтр.Значение = КПП;
	НовСтр.ЗначениеМЧБ = СокрЛП(КПП);
	
	НайденноеЗначение = Показатели.Найти("ДатаПодписи", "Имя");
	
	Если НЕ НайденноеЗначение = Неопределено Тогда
		Показатели.Удалить(НайденноеЗначение);
	КонецЕсли;
		
	ДатаПодписиСтр = "";
	Для Ном = 0 По 7 Цикл
		ДатаПодписиСтр = ДатаПодписиСтр + ОбщиеРеквизитыРазделов.ДатаПодписи[Ном];
	КонецЦикла;
	
	НовСтр = Показатели.Добавить();
	НовСтр.Имя = "ДатаПодписи";
	НовСтр.Значение = ДатаПодписиСтр;
	НовСтр.ЗначениеМЧБ = СокрЛП(ДатаПодписиСтр);
					
	// особая обработка ФИО на титульном листе
	Если ПараметрыПечати.ИмяСтраницы = "Титульный" Тогда
						
		ПокПодписант = Показатели.Найти("ОргПодписант", "Имя");
		Если ПокПодписант <> Неопределено Тогда
			
			ФИО = РегламентированнаяОтчетность.РазложитьФИО(ПокПодписант.Значение);
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "ОргПодписантФамилия";
			НовСтр.Значение = ФИО.Фамилия;
			НовСтр.ЗначениеМЧБ = ФИО.Фамилия;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "ОргПодписантИмя";
			НовСтр.Значение = ФИО.Имя;
			НовСтр.ЗначениеМЧБ = ФИО.Имя;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "ОргПодписантОтчество";
			НовСтр.Значение = ФИО.Отчество;
			НовСтр.ЗначениеМЧБ = ФИО.Отчество;
			
		КонецЕсли;
		
		// особая обработка ОКВЭД
		ПокОКВЭД = Показатели.Найти("ОКВЭД", "Имя");
		Если ПокОКВЭД <> Неопределено Тогда
			ОКВЭД = ПокОКВЭД.ЗначениеМЧБ;
			Если Сред(ОКВЭД, 2, 1) = "." Тогда
				ОКВЭД = Лев(ОКВЭД, 1) + " " + Сред(ОКВЭД, 2);
			КонецЕсли;
			Если Сред(ОКВЭД, 5, 1) = "." Тогда
				ОКВЭД = Лев(ОКВЭД, 4) + " " + Сред(ОКВЭД, 5);
			КонецЕсли;
			ПокОКВЭД.Значение = ОКВЭД;
			ПокОКВЭД.ЗначениеМЧБ = ОКВЭД;
		КонецЕсли;
		
	КонецЕсли;
	
	// особая обработка ИНН
	ИНН = Новый Массив(12);
	Для Инд = 1 По 9 Цикл
		Для Знакоместо = 0 По 11 Цикл
			ИНН[Знакоместо] = Показатели.Найти("ИНН" + Инд + "_" + (Знакоместо + 1), "Имя");
		КонецЦикла;
		Если ИНН[0] = Неопределено ИЛИ ИНН[1] = Неопределено ИЛИ ИНН[10] = Неопределено Тогда
			Продолжить;
		КонецЕсли;
	КонецЦикла;
	
	// ОКТМО.
	Для Каждого Показатель Из Показатели Цикл
		Если СтрНайти(Показатель.Имя, "П000110001003") = 1
		 ИЛИ СтрНайти(Показатель.Имя, "П000120001003") = 1
		 ИЛИ СтрНайти(Показатель.Имя, "П000130001003") = 1 Тогда
			ОКТМО = СокрЛП(Показатель.Значение);
			ОКТМО = РегламентированнаяОтчетностьКлиентСервер.ДополнитьСтроку(ОКТМО, 11, "-", 1);
			Показатель.ЗначениеМЧБ = ОКТМО;
		КонецЕсли;
	КонецЦикла;
	
	ИндексТочкиПоКорню=Новый Структура;
	Для каждого Область Из МакетМЧБ.Области Цикл
		Если Область.Текст="." Тогда
			ТекАдресЗначенияОбласти = АдресЗначенияОбласти(Область);
			Корень=ТекАдресЗначенияОбласти.Корень;
			ИндексТочкиЧислаНаМЧБ=ТекАдресЗначенияОбласти.ИндексЗнакоместа;
			ИндексТочкиПоКорню.Вставить(Корень,ИндексТочкиЧислаНаМЧБ);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Область Из МакетМЧБ.Области Цикл
		Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			ИмяОбласти = Область.Имя;
			
			Если СтрЧислоВхождений(ИмяОбласти, "НомСтр") > 0
			 ИЛИ СтрЧислоВхождений(ИмяОбласти, "СоставленаНа") > 0 Тогда
				Продолжить;
			КонецЕсли;
					
			РезультатПоиска = Показатели.Найти(ИмяОбласти, "Имя");
			Если РезультатПоиска = Неопределено Тогда
				ТекАдресЗначенияОбласти = АдресЗначенияОбласти(Область);
				ЗначениеВыведено = Ложь;
				Если ТекАдресЗначенияОбласти.ИндексЗнакоместа <> 0 Тогда
					РезультатПоиска = Показатели.Найти(ТекАдресЗначенияОбласти.Корень, "Имя");
					Если РезультатПоиска <> Неопределено Тогда
						Если ТипЗнч(РезультатПоиска.Значение)=Тип("Число") Тогда
							//разделение числа на 2 части
							ЦелаяЧасть = Цел(РезультатПоиска.Значение);
							СтрЦелаяЧасть = Формат(Цел(РезультатПоиска.Значение), "ЧГ=0");
							СтрДробнаяЧасть = Сред(Строка(РезультатПоиска.Значение - ЦелаяЧасть),3);
							//разделение областей показателя на 2 части
							
							ИндексТочкиЧислаНаМЧБ = Неопределено;
							Если ИндексТочкиПоКорню.Свойство(ТекАдресЗначенияОбласти.Корень,ИндексТочкиЧислаНаМЧБ) = Ложь Тогда
								//На МЧБ нет разделения на целую и дробную части
								ПрисвоитьЗначениеОбласти(Область, РезультатПоиска.ЗначениеМЧБ, ТекАдресЗначенияОбласти.ИндексЗнакоместа);
								ЗначениеВыведено = Истина;	
							Иначе
								//определяем какая часть выводится (Целая, дробная или точка)
								Если ТекАдресЗначенияОбласти.ИндексЗнакоместа<ИндексТочкиЧислаНаМЧБ Тогда
									//выводится целая часть
									ПрисвоитьЗначениеОбласти(Область, ?(РезультатПоиска.ЗначениеМЧБ = "-","-",СтрЦелаяЧасть), ТекАдресЗначенияОбласти.ИндексЗнакоместа);
									ЗначениеВыведено = Истина;	
								ИначеЕсли ТекАдресЗначенияОбласти.ИндексЗнакоместа > ИндексТочкиЧислаНаМЧБ Тогда
									//выводится дробная часть
									
									////исключение+ 
									// для строки 50 Раздела 2 производится округление до 10 знака после запятой
									Если СтрНайти(Область.Имя, "П000200005003") Тогда
										ДлинаДробнойЧасти = СтрДлина(СтрДробнаяЧасть);
										Если ДлинаДробнойЧасти > 10 Тогда
											СтрДробнаяЧасть = Формат(Окр(СтрДробнаяЧасть, -(ДлинаДробнойЧасти - 10)), "ЧГ=0");
										КонецЕсли;
									КонецЕсли;
									////исключение- 
									
									ПрисвоитьЗначениеОбласти(Область, СтрДробнаяЧасть, ТекАдресЗначенияОбласти.ИндексЗнакоместа - ИндексТочкиЧислаНаМЧБ);
									ЗначениеВыведено = Истина;
								Иначе
									//выводится точка
									//присваивать ничего не будем, но считаем, что область заполненяется корректно
									ЗначениеВыведено = Истина;
								КонецЕсли;
							КонецЕсли;
						Иначе
							ПрисвоитьЗначениеОбласти(Область, РезультатПоиска.ЗначениеМЧБ, ТекАдресЗначенияОбласти.ИндексЗнакоместа, ТипЗнч(РезультатПоиска.Значение) <> Тип("Строка") ИЛИ НЕ ЗначениеЗаполнено(РезультатПоиска.Значение));
							ЗначениеВыведено = Истина;
						КонецЕсли;
					КонецЕсли;
					
					Если НЕ ЗначениеВыведено
						И (ПараметрыПечати.ИмяСтраницы = "Раздел1"
						ИЛИ ПараметрыПечати.ИмяСтраницы = "Раздел12"
						ИЛИ ПараметрыПечати.ИмяСтраницы = "Раздел13"
						ИЛИ ПараметрыПечати.ИмяСтраницы = "Раздел2"
						ИЛИ ПараметрыПечати.ИмяСтраницы = "Раздел24"
						ИЛИ ПараметрыПечати.ИмяСтраницы = "Приложение1"
						ИЛИ ПараметрыПечати.ИмяСтраницы = "Приложение2"
						ИЛИ ПараметрыПечати.ИмяСтраницы = "Приложение3"
						ИЛИ ПараметрыПечати.ИмяСтраницы = "Приложение4"
						ИЛИ ПараметрыПечати.ИмяСтраницы = "Приложение5"
						ИЛИ ПараметрыПечати.ИмяСтраницы = "Приложение6"
						ИЛИ ПараметрыПечати.ИмяСтраницы = "Приложение7") Тогда
						
						ЗначениеВыведено = Истина;
						
					КонецЕсли;
						
				КонецЕсли;
				
				Если НЕ ЗначениеВыведено
					  И ИмяОбласти <> "ОпределениеВысотыСтрокиМногострочнойЧасти" Тогда //служебное поле
					
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Не удалось заполнить область ""%1""!'"), ИмяОбласти);
					Сообщение.Сообщить();
					
				КонецЕсли;
			Иначе
				ПрисвоитьЗначениеОбласти(Область, РезультатПоиска.ЗначениеМЧБ);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ОбнулитьИтоговыеПоказателиНаЛистеМЧБ(ТаблДок)
	
	ОбластьИтоговыеПоказатели = ТаблДок.Области.Найти("ИтоговыеПоказатели");
	
	Если ОбластьИтоговыеПоказатели = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбластьИтоговыеПоказателиВерх = ОбластьИтоговыеПоказатели.Верх;
	ОбластьИтоговыеПоказателиНиз = ОбластьИтоговыеПоказатели.Низ;
	
	Для Каждого Обл Из ТаблДок.Области Цикл
		
		Если Обл.ГраницаСлева = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если Обл.Верх >= ОбластьИтоговыеПоказателиВерх
			И Обл.Низ <= ОбластьИтоговыеПоказателиНиз
			И Обл.ГраницаСлева.ТипЛинии = ТипЛинииЯчейкиТабличногоДокумента.Точечная Тогда
			
			Если Обл.СодержитЗначение = Истина Тогда // возможны 3 состояния
				Обл.Значение = "-";
			Иначе
				Обл.Текст = "-";
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьЗначениеМЧБ(Область)
	
	ТипЗначения = ТипЗнч(Область.Значение);
	Если ТипЗначения = Тип("Число") Тогда
		ФорматОбласти = Область.Формат;
		СоотвСтрокаФормата = РазобратьСтрокуФормата(ФорматОбласти);
		СоотвСтрокаФормата.Вставить("ЧРД", ".");
		СоотвСтрокаФормата.Вставить("ЧГ", "");
		Результат = Формат(Область.Значение, СобратьСтрокуФормата(СоотвСтрокаФормата));
	ИначеЕсли ТипЗначения = Тип("Строка") Тогда
		Результат = СокрЛП(Область.Значение);
	ИначеЕсли ТипЗначения = Тип("Дата") Тогда
		Результат = Формат(Область.Значение, ?(ПустаяСтрока(Область.Формат), "ДФ=ddMMyyyy", Область.Формат));
	ИначеЕсли ТипЗначения = Тип("Булево") Тогда
		Результат = Формат(Область.Значение, Область.Формат);
	КонецЕсли;
	Возврат СокрЛП(Результат);
	
КонецФункции

&НаСервере
Функция АдресЗначенияОбласти(Область)
	
	Имя = Область.Имя;
	КореньИмениОбласти = Неопределено;
	СтрИндексЗнакоместа = "";
	ИндексЗнакоместа = 0;
	ДлинаИмени = СтрДлина(Имя);
	Для ИндексВхождения = 1 По ДлинаИмени Цикл
		СтрИндексЗнакоместа = Сред(Имя, ДлинаИмени - ИндексВхождения + 1);
		Если СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(СтрИндексЗнакоместа) Тогда
			КореньИмениОбласти = Лев(Имя, ДлинаИмени - ИндексВхождения);
			ИндексЗнакоместа = Число(СтрИндексЗнакоместа);
		Иначе
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если Прав(КореньИмениОбласти, 1) = "_" Тогда
		КореньИмениОбласти = Лев(КореньИмениОбласти, СтрДлина(КореньИмениОбласти) - 1);
	КонецЕсли;
		
	Возврат Новый Структура("Корень, ИндексЗнакоместа", КореньИмениОбласти, ИндексЗнакоместа);
	
КонецФункции

&НаСервере
Процедура ПрисвоитьЗначениеОбласти(Область, Знач Значение, ИндексЗнакоместа = 0, ДополнятьСправа_ = Истина)
	
	Если ИндексЗнакоместа <> 0 Тогда
		Если СтрДлина(Значение) >= ИндексЗнакоместа Тогда
			Значение = Сред(Значение, ИндексЗнакоместа, 1);
		Иначе
			Значение = ?(ДополнятьСправа_, "-", "");
		КонецЕсли;
	ИначеЕсли НЕ ЗначениеЗаполнено(Значение) Тогда
		Значение = "-";
	КонецЕсли;
	
	Если Область.СодержитЗначение = Истина Тогда
		Область.Значение = ВРЕГ(Значение);
	Иначе
		Область.Текст = ВРЕГ(Значение);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция РазобратьСтрокуФормата(Знач СтрокаФормата)
	
	ЗначенияПараметров = Новый Соответствие;
	Пока СтрНайти(СтрокаФормата, ";") <> 0 Цикл
		ВхождениеРазделителя = СтрНайти(СтрокаФормата, ";");
		ДоРазделителя = Лев(СтрокаФормата, ВхождениеРазделителя - 1);
		ВхождениеРавно = СтрНайти(ДоРазделителя, "=");
		Если ВхождениеРавно <> 0 И ВхождениеРавно <> 1 Тогда
			ЗначенияПараметров.Вставить(Лев(ДоРазделителя, ВхождениеРавно - 1), Сред(ДоРазделителя, ВхождениеРавно + 1));
		КонецЕсли;
		СтрокаФормата = Сред(СтрокаФормата, ВхождениеРазделителя + 1);
	КонецЦикла;
	ВхождениеРавно = СтрНайти(СтрокаФормата, "=");
	Если ВхождениеРавно <> 0 И ВхождениеРавно <> 1 Тогда
		ЗначенияПараметров.Вставить(Лев(СтрокаФормата, ВхождениеРавно - 1), Сред(СтрокаФормата, ВхождениеРавно + 1));
	КонецЕсли;
	Возврат ЗначенияПараметров;
	
КонецФункции

&НаСервере
Функция СобратьСтрокуФормата(ПараметрыФормата)
	
	СтрокаФормата = "";
	Для Каждого Параметр Из ПараметрыФормата Цикл
		СтрокаФормата = СтрокаФормата + "; " + Параметр.Ключ + "=" + Параметр.Значение;
	КонецЦикла;
	Если НЕ ПустаяСтрока(СтрокаФормата) Тогда
		СтрокаФормата = Сред(СтрокаФормата, 3);
	КонецЕсли;
	Возврат СтрокаФормата;
	
КонецФункции

&НаСервере
Процедура ВывестиНаПечатьДополнительныеСтраницы(СтруктураПараметровСтраницы, ОбщиеРеквизитыРазделов)
	
	Перем ИмяСтраницы;
	Перем ТаблицаСтраницРаздела;
	
	СтруктураПараметровСтраницы.Свойство("ИмяСтраницыПанели", ИмяСтраницы);
	
	Если Не мСтруктураМногостраничныхРазделов.Свойство(ИмяСтраницы, ТаблицаСтраницРаздела) Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаСтраницРаздела = ЭтаФорма[ТаблицаСтраницРаздела];
	
	МассивПризнаковАктивности = Новый Массив;
	Для Каждого Страница Из ТаблицаСтраницРаздела Цикл
		ТекущийИндекс = ТаблицаСтраницРаздела.Индекс(Страница);
		МассивПризнаковАктивности.Добавить(ТаблицаСтраницРаздела[ТекущийИндекс].АктивнаяСтраница);
	КонецЦикла;
	
	Для Каждого Страница Из ТаблицаСтраницРаздела Цикл
		ТекущийИндекс = ТаблицаСтраницРаздела.Индекс(Страница);
		ВывестиМакетВТаблДокНаСервере(ИмяСтраницы, ТекущийИндекс + 1);
		ВывестиНаПечатьЛист(СтруктураПараметровСтраницы, ОбщиеРеквизитыРазделов);
	КонецЦикла;
	
	Для Каждого Страница Из ТаблицаСтраницРаздела Цикл
		ТекущийИндекс = ТаблицаСтраницРаздела.Индекс(Страница);
		ТаблицаСтраницРаздела[ТекущийИндекс].АктивнаяСтраница = МассивПризнаковАктивности[ТекущийИндекс];
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиРазделВТабличныйДокументНаСервере(ИмяГруппы, СтруктураГруппы) Экспорт
	
	ВывестиРазделВТабличныйДокумент(ЭтаФорма, ИмяГруппы, СтруктураГруппы);
	
КонецПроцедуры

&НаКлиенте
Процедура ВывестиРазделВТабличныйДокументНаКлиенте(ИмяГруппы, СтруктураГруппы) Экспорт
	
	ВывестиРазделВТабличныйДокумент(ЭтаФорма, ИмяГруппы, СтруктураГруппы);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ВывестиРазделВТабличныйДокумент(Форма, ИмяГруппы, СтруктураГруппы)
	
	Перем ИсходноеКоличествоСтрокГруппы;

	#Если НаКлиенте Тогда
		ТекущаяСтраница = Форма.ОпределитьТабличноеПолеПоИдМногострочногоРазделаНаКлиенте(ИмяГруппы);
	#Иначе
		ТекущаяСтраница = Форма.ОпределитьТабличноеПолеПоИдМногострочногоРазделаНаСервере(ИмяГруппы);
	#КонецЕсли

	// определим исходное колво строк многострочного раздела,
	// соответствующее бумажной форме отчета
	Форма.мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);

	// реальное кол-во строк (колво заполненных строк)
	ТекущееКоличествоСтрокГруппы = СтруктураГруппы.Количество();

	ТекТабличноеПолеИмя = "ТабличныйДокумент";
	
	ТекТабличноеПоле = Форма[ТекТабличноеПолеИмя];

	НастройкиМнгЧ = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСвойствоРаздела(Форма, ТекущаяСтраница, "МногострочностьВРазделе").НайтиСтроки(Новый Структура("ИдГруппы", ИмяГруппы))[0];
	ВысотаСтроки = НастройкиМнгЧ.ВысотаСтроки;
	
	// При восстановлении сохраненных данных отчета сравниваем исходное кол-во
	// отображаемых в форме строк многострочного раздела с реальным количеством
	// созданных строк в сохраненном отчете.
	Если ТекущееКоличествоСтрокГруппы > ИсходноеКоличествоСтрокГруппы Тогда
		
		// При превышении реального кол-ва строк над исходным кол-вом (по шаблону),
		// автоматически добавляем необходимое колво строк.
		Форма.ДобавитьНеобходимоеКоличествоДопСтрокНаСервере(ТекТабличноеПоле, ТекТабличноеПолеИмя, ИсходноеКоличествоСтрокГруппы, ТекущееКоличествоСтрокГруппы, ИмяГруппы, СтруктураГруппы, ВысотаСтроки);

		Форма[ТекТабличноеПолеИмя] = ТекТабличноеПоле;
		
	КонецЕсли;
	
	// выводим значения строк
	Для Каждого СтрокаТаблицы Из СтруктураГруппы Цикл
		
		НомерСтрокиВТаблице      = СтруктураГруппы.Индекс(СтрокаТаблицы);
		НомерСтрокиВФормеТаблицы = НомерСтрокиВТаблице + 1;
		
		Для НомерГрафы = 1 По Форма.мСтруктураКолвоКолонокРазделов[ИмяГруппы] Цикл
			
			Если Прав(ИмяГруппы, 2) = "20" Тогда
				КолонкаТаблицыИмя = ИмяГруппы + Формат((НомерГрафы + 1) * 10, "ЧЦ=2; ЧВН=");
			Иначе
				КолонкаТаблицыИмя = ИмяГруппы + Формат(НомерГрафы, "ЧЦ=2; ЧВН=");
			КонецЕсли;
			
			Если СтруктураГруппы[0].Свойство(КолонкаТаблицыИмя) Тогда
				
				ИмяЯчейки                = КолонкаТаблицыИмя + "_" + НомерСтрокиВФормеТаблицы;
				ОбластьЯчейкиТаблицы     = ТекТабличноеПоле.Области[ИмяЯчейки];
				ЗначениеЯчейки           = СтрокаТаблицы[КолонкаТаблицыИмя];
				
				Если ОбластьЯчейкиТаблицы.СодержитЗначение = Истина Тогда
					ОбластьЯчейкиТаблицы.Значение = ЗначениеЯчейки;
				Иначе
					// устанавливаем порядковый номер строки
					ОбластьЯчейкиТаблицы.Текст = ЗначениеЯчейки;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьНеобходимоеКоличествоДопСтрокНаСервере(ТекТабличноеПоле, ТекТабличноеПолеИмя, ИсходноеКоличествоСтрокГруппы, ТекущееКоличествоСтрокГруппы, ИмяГруппы, СтруктураГруппы, ВысотаСтроки) Экспорт
		
	ОбластьДопСтроки = ТекТабличноеПоле.ПолучитьОбласть("МногострочнаяЧасть");
	
	КоординатыОбластей = Новый Структура();
	
	Для Каждого Область Из ТекТабличноеПоле.Области Цикл
		
		Если СтрНайти(Область.Имя, "_") Тогда
			
			КоординатыОбластей.Вставить(Область.Имя, Область.Верх);
			
		КонецЕсли;
		
	КонецЦикла;
		
	МногострочнаяЧастьВерх = ТекТабличноеПоле.Области.МногострочнаяЧасть.Верх;
	
	МногострочнаяЧастьНиз = ТекТабличноеПоле.Области.МногострочнаяЧасть.Низ;
			
	ТекТабличноеПоле.ВставитьОбласть(ОбластьДопСтроки.Область(), ТекТабличноеПоле.Область(МногострочнаяЧастьНиз + 1, , МногострочнаяЧастьНиз + (ТекущееКоличествоСтрокГруппы - 1) * ВысотаСтроки), ТипСмещенияТабличногоДокумента.ПоВертикали);
		
	Для НомНовойСтроки = ИсходноеКоличествоСтрокГруппы По ТекущееКоличествоСтрокГруппы Цикл
						
		Для Каждого Область Из ОбластьДопСтроки.Области Цикл
			
			Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			
				ОбластьТаблДок = ТекТабличноеПоле.Область(КоординатыОбластей[Область.Имя] + (ТекущееКоличествоСтрокГруппы - НомНовойСтроки) * ВысотаСтроки, Область.Лево, КоординатыОбластей[Область.Имя] + (ТекущееКоличествоСтрокГруппы - НомНовойСтроки) * ВысотаСтроки, Область.Право);
							
				Если ОбластьТаблДок.СодержитЗначение Тогда
					ОбластьТаблДок.Очистить();
				КонецЕсли;
				
				ОбластьТаблДок.Имя = Лев(Область.Имя, СтрНайти(Область.Имя, "_")) + Строка(ТекущееКоличествоСтрокГруппы - НомНовойСтроки + 1);
				
			КонецЕсли;
			
		КонецЦикла;
						
	КонецЦикла;	
		
	ТекТабличноеПоле.Область(ТекТабличноеПоле.Области.МногострочнаяЧасть.Верх, , ТекТабличноеПоле.Области.МногострочнаяЧасть.Низ).Имя = "";
	
	ТекТабличноеПоле.Область(МногострочнаяЧастьВерх, , МногострочнаяЧастьНиз).Имя = "МногострочнаяЧасть";
	
КонецПроцедуры

&НаСервере
Процедура ВывестиРазделВТабличныйДокументСпецНаСервере(Знач НастройкиМнгЧ, ИмяГруппы, Раздел, СтруктураГруппы, мСтруктураКолвоКолонокРазделов) Экспорт
	
	// реальное кол-во строк (колво заполненных строк)
	ТекущееКоличествоСтрокГруппы = СтруктураГруппы.Количество();
	
	// Режим восстановления многострочных блоков. Из процедуры ВосстановитьСохраненныеДанные.
	НастройкиМнгЧ = ДанныеФормыВЗначение(НастройкиМнгЧ, Тип("ТаблицаЗначений")).Скопировать();
	
	НазвОбласти = НастройкиМнгЧ.Найти(ИмяГруппы, "ИдГруппы").Область;
	
	НастройкиМнгЧ.Колонки.Добавить("НизМногострочнойЧасти");
	НастройкиМнгЧ.Колонки.Добавить("ВерхМногострочнойЧасти");
	
	// Определим координаты всех многострочных блоков, для последующего восстановления.
	Для каждого Зап Из НастройкиМнгЧ Цикл
		КоординатаНиз  = Раздел.Области[Зап.Область].Низ;
		КоординатаВерх = Раздел.Области[Зап.Область].Верх;
		Зап.НизМногострочнойЧасти    = КоординатаНиз;
		Зап.ВерхМногострочнойЧасти   = КоординатаВерх;
		// Координаты текущей области
		Если Зап.Область = НазвОбласти Тогда
			Низ           = КоординатаНиз;
			Верх          = КоординатаВерх;
		КонецЕсли;
	КонецЦикла;
	
	ВысотаСтроки = НастройкиМнгЧ.Найти(ИмяГруппы, "ИдГруппы").ВысотаСтроки;
		
	// Скопируем верхнюю часть документа, не включая многострочную часть.
	ТаблДок = Раздел.ПолучитьОбласть(1, , Верх - 1);
	// Скопируем подвал, все, что ниже области многострочного блока.
	Подвал = Раздел.ПолучитьОбласть(Низ + 1, , Раздел.ВысотаТаблицы);
			
	Строка = Раздел.ПолучитьОбласть(Верх, , Верх + ВысотаСтроки - 1);
	
	Если ВысотаСтроки > 1 Тогда
		ОбластьОпределениеВысотыСтрокиМногострочнойЧасти=Строка.Области.Найти("ОпределениеВысотыСтрокиМногострочнойЧасти");
		Если ОбластьОпределениеВысотыСтрокиМногострочнойЧасти<>Неопределено Тогда
			ОбластьОпределениеВысотыСтрокиМногострочнойЧасти.Имя = "";
		КонецЕсли;
	КонецЕсли;
	
	Если Строка.Области.Найти(НазвОбласти) <> Неопределено Тогда
		Строка.Области[НазвОбласти].Имя = "";
	КонецЕсли;
	
	// При превышении реального кол-ва строк над исходным кол-вом (по шаблону),
	// автоматически добавляем необходимое колво строк.
	
	Для НомНовойСтроки = 1 По ТекущееКоличествоСтрокГруппы Цикл
		// Переопределим именнованность.
		Строка1 = Строка.ПолучитьОбласть(1, , Строка.ВысотаТаблицы);
		НомСтр = Формат(НомНовойСтроки, "ЧГ=0");
		
		Для НомерГрафы = 1 По мСтруктураКолвоКолонокРазделов[ИмяГруппы] Цикл
			
			Если Прав(ИмяГруппы, 2) = "20" Тогда
				КолИмя = ИмяГруппы + Формат((НомерГрафы + 1) * 10, "ЧЦ=2; ЧВН=");
			Иначе
				КолИмя = ИмяГруппы + Формат(НомерГрафы, "ЧЦ=2; ЧВН=");
			КонецЕсли;
			
			Если СтруктураГруппы[0].Свойство(КолИмя) Тогда
				
				Строка1.Области[КолИмя + "_1"].Имя = КолИмя + "_" + НомСтр;
				
			КонецЕсли;
			
		КонецЦикла;
		
		ЗаполнитьСтрокуДаннымиИзТаблицы(ДанныеФормыВЗначение(СтруктураГруппы, Тип("ТаблицаЗначений")), Строка1, СтруктураГруппы[НомНовойСтроки - 1], НомСтр);
		ТаблДок.Вывести(Строка1);
		
	КонецЦикла;
		
	ТаблДок.Вывести(Подвал);
	
	Раздел.Очистить();
	Раздел.Вывести(ТаблДок);
		
	// Восстановим области.
	Для каждого Зап Из НастройкиМнгЧ Цикл
		Раздел.Область("R" + Формат(Зап.НизМногострочнойЧасти, "ЧГ=0") + ":R" + Формат(Зап.ВерхМногострочнойЧасти, "ЧГ=0")).Имя = Зап.Область;
	КонецЦикла;
		
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтрокуДаннымиИзТаблицы(ТаблицаРаздела, Строка1, СтрокаТаблицы, НомерНаФорме)
	
	// Заполняем строку.
	Для каждого Колонка Из ТаблицаРаздела.Колонки Цикл
		КолонкаИмя = Колонка.Имя;
		НазвЯчейки = КолонкаИмя + "_" + НомерНаФорме;
		Если Строка1.Области[НазвЯчейки].СодержитЗначение = Истина Тогда
			Строка1.Области[НазвЯчейки].Значение = СтрокаТаблицы[КолонкаИмя];
		Иначе
			Строка1.Области[НазвЯчейки].Текст = СтрокаТаблицы[КолонкаИмя];
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ИзменитьТаблицуПараметровАвтозаполнения(Парам, Лист)
	Перем МассивВариантовЗаполненияСтраниц;
	Перем ТаблицаВариантыЗаполнения;
	Перем ТаблицаСтраницРаздела;
	
	ИмяТекущейСтраницыПанели = Лист;

	Если Не мСтруктураВариантыЗаполнения.Свойство(ИмяТекущейСтраницыПанели, МассивВариантовЗаполненияСтраниц) Тогда
		Возврат;
	КонецЕсли;
	
	МассивВариантовЗаполненияСтраниц = ЭтаФорма["ТаблицаВариантыЗаполнения" + ИмяТекущейСтраницыПанели];

	НомерТекущейСтраницы = 1;

	Если мСтруктураМногостраничныхРазделов.Свойство(ИмяТекущейСтраницыПанели, ТаблицаСтраницРаздела) Тогда
		
		ТаблицаСтраницРаздела = ЭтаФорма[ТаблицаСтраницРаздела];
		
		// Раздел является многостраничным, определим активную страницу раздела:
		СтрТаблицаСтраницы = ТаблицаСтраницРаздела.НайтиСтроки(Новый Структура("АктивнаяСтраница", Истина));
		Если СтрТаблицаСтраницы.Количество() > 0 Тогда
			НомерТекущейСтраницы = ТаблицаСтраницРаздела.Индекс(СтрТаблицаСтраницы[0]) + 1;
		КонецЕсли;
	КонецЕсли;

	Если Парам = 1 Тогда // создаем таблицу параметров автозаполнения ячеек добавленного листа

		// При добавлении новой страницы параметры автозаполнения ее ячеек определяем
		// по эталонной модели
		НоваяТаблицаВариантыЗаполнения = РегламентированнаяОтчетностьВызовСервера.ПолучитьТаблицуВариантовЗаполненияНаСервере(ЭтаФорма, ИмяТекущейСтраницыПанели, НЕ СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет, СтруктураРеквизитовФормы.мОписаниеТиповЧислоЕ);

		Если НоваяТаблицаВариантыЗаполнения <> Неопределено Тогда
			
			ТаблВариантов = МассивВариантовЗаполненияСтраниц.Добавить();	
			
			Если ТипЗнч(НоваяТаблицаВариантыЗаполнения) = Тип("ДанныеФормыКоллекция") Тогда
				
				КопироватьДанныеФормы(НоваяТаблицаВариантыЗаполнения, ТаблВариантов.ТаблицаВариантовЗаполнения);
				
			Иначе
				
				ЗначениеВДанныеФормы(НоваяТаблицаВариантыЗаполнения, ТаблВариантов.ТаблицаВариантовЗаполнения);
				
			КонецЕсли;
			
		КонецЕсли;

	Иначе // Парам = -1. Удаляем таблицу параметров автозаполнения ячеек удаленного листа

		Если МассивВариантовЗаполненияСтраниц.Количество() > 1 Тогда 
			МассивВариантовЗаполненияСтраниц.Удалить(НомерТекущейСтраницы - 1);
		КонецЕсли;

	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура ОчиститьТабличноеПолеНаСервере(ВыбТабличноеПолеИмя) Экспорт

	ОчиститьТабличноеПоле(ЭтаФорма, ВыбТабличноеПолеИмя);

КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТабличноеПолеНаКлиенте(ВыбТабличноеПолеИмя) Экспорт

	ОчиститьТабличноеПоле(ЭтаФорма, ВыбТабличноеПолеИмя);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОчиститьТабличноеПоле(Форма, ВыбТабличноеПолеИмя)
	
	РегламентированнаяОтчетностьКлиентСервер.ОчиститьТабличноеПоле(Форма, ВыбТабличноеПолеИмя);
	Для Каждого КЗ Из Форма.мСтруктураМногострочныхРазделов Цикл 
		Обл = Форма.ТабличныйДокумент.Области.Найти("УдалитьСтроку" + КЗ.Ключ + "01_1");
		Если Обл <> Неопределено Тогда 
			Обл.Гиперссылка = Ложь;
			Обл.Текст = "";
		КонецЕсли;
		Обл = Форма.ТабличныйДокумент.Области.Найти("УдалитьСтроку" + КЗ.Ключ + "20_1");
		Если Обл <> Неопределено Тогда 
			Обл.Гиперссылка = Ложь;
			Обл.Текст = "";
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура Печать(ВидПечати, НеИзФормыОтчета = Ложь) Экспорт
			
	Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1. Формируется печатная форма...'"), ЭтаФорма.Заголовок), , , БиблиотекаКартинок.Печать);
	
	Если СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки = Истина Тогда
		РегламентированнаяОтчетностьКлиент.ПроверитьКонтрольныеСоотношения(ЭтаФорма, ОбработкаКС, Истина);
	КонецЕсли;
	
	Если НЕ ПечатьНаСервере(ВидПечати) Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ОткрытьФормуПредварительногоПросмотра(ЭтаФорма, ВидПечати, , СтруктураРеквизитовФормы.СписокПечатаемыхЛистов);
		
	СтруктураРеквизитовФормы.мРежимПечати = Ложь;
	
КонецПроцедуры

&НаСервере
Функция ПечатьНаСервере(ВидПечати)
	
	Если НЕ РегламентированнаяОтчетность.ПринтерДоступен() Тогда
		
		Сообщение = Новый СообщениеПользователю;

		Сообщение.Текст = НСтр("ru='Перед формированием печатных форм необходимо определить в системе принтер и задать его в качестве используемого по умолчанию!'");

		Сообщение.Сообщить();
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Если СтруктураРеквизитовФормы.ЕдиницаИзмерения <> ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1 ИЛИ СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения <> 0 Тогда
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Печать возможна только при установленной единице измерения ""в рублях"" и точности ""0"".'");
		Сообщение.Сообщить();
		
		Возврат Ложь;
		
	КонецЕсли;
		
	Если ТипЗнч(мДеревоВыбранныхСтраниц) <> Тип("ДанныеФормыДерево") Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	СтруктураРеквизитовФормы.мПечатныеФормы.Очистить();
	СтруктураРеквизитовФормы.мРежимПечати = Истина;
	
	СохранитьДанныеРаздела(СтруктураРеквизитовФормы.НаимТекущегоРаздела, Ложь, Ложь);
	
	// Если текущий раздел многостраничный, имеющий многострочные части,
	// предварительно сохраним данные многострочных групп.
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел1" Тогда
		СохрТЗМногострочнойГруппы = ЭтаФорма[СтруктураРеквизитовФормы.мИдГруппы1].Выгрузить();
	ИначеЕсли СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел12" Тогда
		СохрТЗМногострочнойГруппы = ЭтаФорма[СтруктураРеквизитовФормы.мИдГруппы12].Выгрузить();
	ИначеЕсли СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел13" Тогда
		СохрТЗМногострочнойГруппы = ЭтаФорма[СтруктураРеквизитовФормы.мИдГруппы13].Выгрузить();
	ИначеЕсли СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел2" Тогда
		СохрТЗМногострочнойГруппы = ЭтаФорма[СтруктураРеквизитовФормы.мИдГруппы2].Выгрузить();
	ИначеЕсли СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Приложение1" Тогда
		СохрТЗМногострочнойГруппы = ЭтаФорма[СтруктураРеквизитовФормы.мИдПриложения1].Выгрузить();
	ИначеЕсли СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Приложение2" Тогда
		СохрТЗМногострочнойГруппы = ЭтаФорма[СтруктураРеквизитовФормы.мИдПриложения2].Выгрузить();
	ИначеЕсли СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Приложение3" Тогда
		СохрТЗМногострочнойГруппы = ЭтаФорма[СтруктураРеквизитовФормы.мИдПриложения3].Выгрузить();
	ИначеЕсли СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Приложение4" Тогда
		СохрТЗМногострочнойГруппы = ЭтаФорма[СтруктураРеквизитовФормы.мИдПриложения4].Выгрузить();
	ИначеЕсли СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Приложение5" Тогда
		СохрТЗМногострочнойГруппы = ЭтаФорма[СтруктураРеквизитовФормы.мИдПриложения5].Выгрузить();
	ИначеЕсли СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Приложение6" Тогда
		СохрТЗМногострочнойГруппы = ЭтаФорма[СтруктураРеквизитовФормы.мИдПриложения6].Выгрузить();
	ИначеЕсли СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Приложение7" Тогда
		СохрТЗМногострочнойГруппы = ЭтаФорма[СтруктураРеквизитовФормы.мИдПриложения7].Выгрузить();
	КонецЕсли;
	
	сохрТаблДок = ТабличныйДокумент.ПолучитьОбласть();
	
	СтрПоля = "ПолеСверху, ПолеСправа, ПолеСнизу, ПолеСлева";
	ВремПоля = Новый Структура(СтрПоля);
	
	ЗаполнитьЗначенияСвойств(ВремПоля, ТабличныйДокумент, СтрПоля);
	НомерКорректировки = НомерКорректировки * СтруктураРеквизитовФормы.ВидДокумента;
	ВывестиМакетВТаблДокНаСервере("Титульный", 0);
	
	ОбщиеРеквизитыРазделов = ПолучитьОбщиеРеквизитыСТитульногоЛиста();
	
	Для Каждого СтрокаУровня1 Из мДеревоВыбранныхСтраниц.ПолучитьЭлементы() Цикл
		
		Если СтрокаУровня1.ВыводНаПечать = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("НаименованиеЛиста",  СтрокаУровня1.Представление);
		СтруктураПараметров.Вставить("ОриентацияЛиста",    СтрокаУровня1.ОриентацияСтраницы);
		СтруктураПараметров.Вставить("ИмяСтраницы",        СтрокаУровня1.ИмяСтраницы);
		Структурапараметров.Вставить("ИмяОбластиТаблПоля", СтрокаУровня1.ИмяОбластиТабличногоПоля);
		СтруктураПараметров.Вставить("ВидПечати",          ВидПечати);
		
		Если НЕ мСтруктураМногостраничныхРазделов.Свойство(СтрокаУровня1.ИмяСтраницы) Тогда
			
			ВывестиМакетВТаблДокНаСервере(СтрокаУровня1.ИмяСтраницы, 0);
			ВывестиНаПечатьЛист(СтруктураПараметров, ОбщиеРеквизитыРазделов, СтрПоля);
			
		Иначе
			
			СтруктураПараметров.Вставить("ИмяСтраницыПанели", СтрокаУровня1.ИмяСтраницы);
			ВывестиНаПечатьДополнительныеСтраницы(СтруктураПараметров, ОбщиеРеквизитыРазделов);
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Если текущий раздел многостраничный, имеющий многострочные части,
	// восстановим предварительно сохраненные данные многострочных групп.
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел1" Тогда
		ЭтаФорма[СтруктураРеквизитовФормы.мИдГруппы1].Загрузить(СохрТЗМногострочнойГруппы);
	ИначеЕсли СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел12" Тогда
		ЭтаФорма[СтруктураРеквизитовФормы.мИдГруппы12].Загрузить(СохрТЗМногострочнойГруппы);
	ИначеЕсли СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел13" Тогда
		ЭтаФорма[СтруктураРеквизитовФормы.мИдГруппы13].Загрузить(СохрТЗМногострочнойГруппы);
	ИначеЕсли СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел2" Тогда
		ЭтаФорма[СтруктураРеквизитовФормы.мИдГруппы2].Загрузить(СохрТЗМногострочнойГруппы);
	ИначеЕсли СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Приложение1" Тогда
		ЭтаФорма[СтруктураРеквизитовФормы.мИдПриложения1].Загрузить(СохрТЗМногострочнойГруппы);
	ИначеЕсли СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Приложение2" Тогда
		ЭтаФорма[СтруктураРеквизитовФормы.мИдПриложения2].Загрузить(СохрТЗМногострочнойГруппы);
	ИначеЕсли СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Приложение3" Тогда
		ЭтаФорма[СтруктураРеквизитовФормы.мИдПриложения3].Загрузить(СохрТЗМногострочнойГруппы);
	ИначеЕсли СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Приложение4" Тогда
		ЭтаФорма[СтруктураРеквизитовФормы.мИдПриложения4].Загрузить(СохрТЗМногострочнойГруппы);
	ИначеЕсли СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Приложение5" Тогда
		ЭтаФорма[СтруктураРеквизитовФормы.мИдПриложения5].Загрузить(СохрТЗМногострочнойГруппы);
	ИначеЕсли СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Приложение6" Тогда
		ЭтаФорма[СтруктураРеквизитовФормы.мИдПриложения6].Загрузить(СохрТЗМногострочнойГруппы);
	ИначеЕсли СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Приложение7" Тогда
		ЭтаФорма[СтруктураРеквизитовФормы.мИдПриложения7].Загрузить(СохрТЗМногострочнойГруппы);
	КонецЕсли;
	
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(сохрТаблДок);
	ЗаполнитьЗначенияСвойств(ТабличныйДокумент, ВремПоля, СтрПоля);
	
	РегламентированнаяОтчетностьКлиентСервер.ПроставлениеНомеровЛистов(ЭтаФорма, , СтруктураРеквизитовФормы.СписокПечатаемыхЛистов);
	СтруктураДанныхТитульный.Вставить("НомерКорректировки", Строка(НомерКорректировки));
	КопироватьДанныеФормы(мДеревоВыбранныхСтраниц, мДеревоСтраницОтчета);
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция ПолучитьОбщиеРеквизитыСТитульногоЛиста()
	
	МассивИНН            = Новый Массив(12);
	МассивКПП            = Новый Массив(9);
	МассивДатаПодписи    = Новый Массив(8);
				
	ИсходныйМакет = ТабличныйДокумент;
		
	Область = ИсходныйМакет.Области.Найти("ИНН1");
	
	Если НЕ Область = Неопределено Тогда
		
		СтрИНН = Область.Значение;
		
		Если СтрДлина(СтрИНН) = 10 Тогда
			СтрИНН = СтрИНН + "--";
		КонецЕсли;
			
		Для Ном = 1 По СтрДлина(СтрИНН) Цикл
			
			МассивИНН[Ном - 1] = Сред(СтрИНН, Ном, 1);
			
		КонецЦикла;
		
	КонецЕсли;
		
	Область = ИсходныйМакет.Области.Найти("КПП1");
	
	Если НЕ Область = Неопределено Тогда
		
		Для Ном = 1 По СтрДлина(Область.Значение) Цикл
			
			МассивКПП[Ном - 1] = Сред(Область.Значение, Ном, 1);
			
		КонецЦикла;
		
	КонецЕсли;
			
	Область = ИсходныйМакет.Области.Найти("ДатаПодписи");
	
	Если НЕ Область = Неопределено Тогда
		
		Если ТипЗнч(Область.Значение) = Тип("Строка") Тогда 
			СтрДатаПодписи = Лев(СтрЗаменить(Область.Значение, ".", ""), 8);
		ИначеЕсли ТипЗнч(Область.Значение) = Тип("Дата") Тогда 
			Если ЗначениеЗаполнено(Область.Значение) Тогда 
				СтрДатаПодписи = Лев(СтрЗаменить(Формат(Область.Значение, "ДФ = ""дд.ММ.гггг 'г.'"""), ".", ""), 8);
			Иначе
				СтрДатаПодписи = "        ";
			КонецЕсли;
		КонецЕсли;
		
		Для Ном = 1 По СтрДлина(СтрДатаПодписи) Цикл
			
			МассивДатаПодписи[Ном - 1] = Сред(СтрДатаПодписи, Ном, 1);
			
		КонецЦикла;
		
	КонецЕсли;
	
	ОбщиеРеквизитыРазделов = Новый Структура;
	
	ОбщиеРеквизитыРазделов.Вставить("ИНН", МассивИНН);
	ОбщиеРеквизитыРазделов.Вставить("КПП", МассивКПП);
	ОбщиеРеквизитыРазделов.Вставить("ДатаПодписи", МассивДатаПодписи);
	
	Возврат ОбщиеРеквизитыРазделов;
	
КонецФункции

&НаКлиенте
Процедура СохранитьНаКлиенте(Автосохранение = Ложь, ВыполняемоеОповещение = Неопределено) Экспорт
	
	Если СтруктураДанныхТитульный.Количество() = 0
	 ИЛИ СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
		СтруктураДанныхТитульный.Вставить("КодИМНС", ТабличныйДокумент.Области.КодИМНС.Значение);
		СтруктураДанныхТитульный.Вставить("КПП1", ТабличныйДокумент.Области.КПП1.Значение);
		СтруктураДанныхТитульный.Вставить("НомерКорректировки", ТабличныйДокумент.Области.НомерКорректировки.Значение);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СтруктураДанныхТитульный.НомерКорректировки) Тогда
		ЗначениеКорректировки = 0;
	Иначе
		ЗначениеКорректировки = Число(СтруктураДанныхТитульный.НомерКорректировки);
	КонецЕсли;
	Вариант = СтруктураРеквизитовФормы.ВидДокумента * ЗначениеКорректировки;
	
	КодИФНС = СтруктураДанныхТитульный.КодИМНС;
	КПП = СтруктураДанныхТитульный.КПП1;
                           
	Если НЕ РегламентированнаяОтчетностьКлиент.ПриЗаписиРегламентированногоОтчетаНаКлиенте(ЭтаФорма, КодИФНС, Автосохранение, Вариант) Тогда
		Возврат;
	КонецЕсли;
	
	ПодобныйОтчетСуществует = Ложь;
	ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки = Ложь;
	
	Если Элементы.РазделыОтчета.ТекущиеДанные = Неопределено Тогда
		НаименованиеТекущегоРаздела = СтруктураРеквизитовФормы.НаимТекущегоРаздела;
	Иначе
		НаименованиеТекущегоРаздела = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
	КонецЕсли;
	
	РезультатСохранения = ПередСохранением(КодИФНС, КПП, ПодобныйОтчетСуществует, Вариант, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, Автосохранение, НаименованиеТекущегоРаздела);
	
	ВидДокументаНомерКорректировкиИзменен = Неопределено;
	
	Если ПодобныйОтчетСуществует И Автосохранение Тогда
		Возврат;
	КонецЕсли;
	
	НуженВопросПередСохранением = (ПодобныйОтчетСуществует ИЛИ ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки);
	
	Если НуженВопросПередСохранением Тогда
		
		СохранитьНаКлиентеСВопросом(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, ПодобныйОтчетСуществует, КодИФНС, КПП);
		
	Иначе
		
		ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНаКлиентеСВопросом(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, ПодобныйОтчетСуществует, КодИФНС, КПП)
	
	Если ПодобныйОтчетСуществует Тогда
		
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(КодВозвратаДиалога.Да, "Сохранить");
		Кнопки.Добавить(КодВозвратаДиалога.Нет, "Отмена");
		
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Отчет с видом %1 уже существует.
			|Сохранить отчет с таким же видом?'"), ?(Вариант = 0, """Первичный""", """Корректирующий/" + Вариант + """"));
		ДополнительныеПараметры = Новый Структура("Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, КодИФНС, КПП", Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, КодИФНС, КПП);
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросСохранитьОтчетСТакимЖеВидомЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, Кнопки, , Кнопки.Получить(1).Значение);
		
	Иначе
		
		СохранитьНаКлиентеСВопросомПродолжение(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки,КодИФНС, КПП);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросСохранитьОтчетСТакимЖеВидомЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Автосохранение = ДополнительныеПараметры.Автосохранение;
	Вариант = ДополнительныеПараметры.Вариант;
	ВыполняемоеОповещение = ДополнительныеПараметры.ВыполняемоеОповещение;
	КодИФНС = ДополнительныеПараметры.КодИФНС;
	КПП = ДополнительныеПараметры.КПП;
	ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки = ДополнительныеПараметры.ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки;
	
	Ответ = РезультатВопроса;
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	СохранитьНаКлиентеСВопросомПродолжение(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки,КодИФНС, КПП);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНаКлиентеСВопросомПродолжение(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, КодИФНС, КПП)
	
	Если ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки Тогда
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("ВидОтчета", Вариант);
		
		ФормаВопроса = РегламентированнаяОтчетностьКлиент.ПолучитьОбщуюФормуПоИмени("ВопросПриИзмененииВидаДокументаНомераКорректировки", ПараметрыФормы);
		ФормаВопроса.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		ДополнительныеПараметры = Новый Структура("Автосохранение, Вариант, ВыполняемоеОповещение, КодИФНС, КПП", Автосохранение, Вариант, ВыполняемоеОповещение,КодИФНС, КПП );
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросПриИзмененииВидаДокументаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ФормаВопроса.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
		ФормаВопроса.Открыть();
	Иначе
		Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Сохраняется %1...'"), ЭтаФорма.Заголовок), , , БиблиотекаКартинок.Записать);
		РезультатСохранения = Сохранить(Автосохранение, КодИФНС, КПП, Вариант, Неопределено, Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
		ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПриИзмененииВидаДокументаЗавершение(КодВозврата, ДополнительныеПараметры) Экспорт
	
	Автосохранение = ДополнительныеПараметры.Автосохранение;
	Вариант = ДополнительныеПараметры.Вариант;
	ВыполняемоеОповещение = ДополнительныеПараметры.ВыполняемоеОповещение;
	КодИФНС = ДополнительныеПараметры.КодИФНС;
	КПП = ДополнительныеПараметры.КПП;
	Если КодВозврата = КодВозвратаДиалога.Да
		ИЛИ КодВозврата = КодВозвратаДиалога.Нет Тогда
		ВидДокументаНомерКорректировкиИзменен = ?(КодВозврата = КодВозвратаДиалога.Да, Истина, Ложь);
	Иначе
		Возврат;
	КонецЕсли;
	
	Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Сохраняется %1...'"), ЭтаФорма.Заголовок), , , БиблиотекаКартинок.Записать);
	РезультатСохранения = Сохранить(Автосохранение, КодИФНС, КПП, Вариант, ВидДокументаНомерКорректировкиИзменен, Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
	ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения)
	
	КлючУникальности = СтруктураРеквизитовФормы.мСохраненныйДок;
	
	Если РезультатСохранения Тогда
		
		РегламентированнаяОтчетностьКлиент.ПослеЗаписиРегламентированногоОтчета(ЭтаФорма);
		
		Если ВыполняемоеОповещение <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ВыполняемоеОповещение);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПередСохранением(КодИФНС, КПП, ПодобныйОтчетСуществует, Вариант, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, Автосохранение, НаимТекРаздела)
	
	Если РегламентированнаяОтчетность.БылиИзмененыКлючевыеРеквизитыОтчета(ЭтаФорма, КодИФНС, КПП)
	   И РегламентированнаяОтчетность.СуществуетДокументСАналогичнымиРеквизитами(ЭтаФорма, КодИФНС, КПП) Тогда
		
		ПодобныйОтчетСуществует = Истина;
		
	КонецЕсли;
	
	СтруктураРеквизитовФормы.мЗаписываетсяНовыйДокумент = (СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено ИЛИ СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено);
	
	Если Вариант <> Неопределено И ((СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено) ИЛИ (СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено) ИЛИ (Вариант <> СтруктураРеквизитовФормы.мВариант)) Тогда
		
		Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено ИЛИ СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено Тогда
			
		ИначеЕсли Вариант <> СтруктураРеквизитовФормы.мВариант Тогда
			
			ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки = Истина;
			
		КонецЕсли;

	КонецЕсли;
	
	Если ПодобныйОтчетСуществует
	 ИЛИ ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки Тогда
	 
	 	Возврат Ложь;
		
 	КонецЕсли;
		
	Возврат Сохранить(Автосохранение, КодИФНС, КПП, Вариант, , НаимТекРаздела);
		
КонецФункции

&НаСервере
Функция Сохранить(Автосохранение = Ложь, КодИФНС, КПП, Вариант, ВидДокументаНомерКорректировкиИзменен = Неопределено, НаимТекРаздела) Экспорт
	
	ДанныеДляРазблокирования = Неопределено;
	
	Если НЕ СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
		Если НЕ СтруктураРеквизитовФормы.мБезОткрытияФормы Тогда
			ДанныеДляРазблокирования = Новый Структура("Ключ,ИдФормы",
			СтруктураРеквизитовФормы.мСохраненныйДок, ЭтаФорма.УникальныйИдентификатор);
		КонецЕсли;
		СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.ПолучитьОбъект();
	КонецЕсли;
	
	Если НЕ РегламентированнаяОтчетность.ПриЗаписиРегламентированногоОтчетаНаСервере(ЭтаФорма, КодИФНС, Автосохранение, Вариант, ВидДокументаНомерКорректировкиИзменен, СтруктураРеквизитовФормы.мСохраненныйДок) Тогда
		СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
		Возврат Ложь;
	КонецЕсли;

	// установим текущие значения реквизитов документа
	СтруктураРеквизитовФормы.мСохраненныйДок.ИсточникОтчета           = Метаданные.Отчеты[Сред(Лев(СтрЗаменить(ЭтаФорма.ИмяФормы, "Внешний", ""), СтрНайти(СтрЗаменить(ЭтаФорма.ИмяФормы, "Внешний", ""), ".Форма.") - 1), 7)].Имя;
	СтруктураРеквизитовФормы.мСохраненныйДок.НаименованиеОтчета       = Метаданные.Отчеты[Сред(Лев(СтрЗаменить(ЭтаФорма.ИмяФормы, "Внешний", ""), СтрНайти(СтрЗаменить(ЭтаФорма.ИмяФормы, "Внешний", ""), ".Форма.") - 1), 7)].ОсновнаяФорма.Синоним;
	СтруктураРеквизитовФормы.мСохраненныйДок.ДатаНачала               = СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета;
	СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания            = СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета;
	СтруктураРеквизитовФормы.мСохраненныйДок.Периодичность            = СтруктураРеквизитовФормы.мПериодичность;
	СтруктураРеквизитовФормы.мСохраненныйДок.ВыбраннаяФорма           = СтруктураРеквизитовФормы.мВыбраннаяФорма;
	СтруктураРеквизитовФормы.мСохраненныйДок.Организация              = СтруктураРеквизитовФормы.Организация;
	СтруктураРеквизитовФормы.мСохраненныйДок.ДатаПодписи              = ДатаПодписи;
	СтруктураРеквизитовФормы.мСохраненныйДок.ЕдиницаИзмерения         = СтруктураРеквизитовФормы.ЕдиницаИзмерения;
	СтруктураРеквизитовФормы.мСохраненныйДок.ТочностьЕдиницыИзмерения = СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения;
	СтруктураРеквизитовФормы.мСохраненныйДок.ВидОтчетности            = Перечисления.ВидыОтчетности.РегламентированнаяОтчетность;
	СтруктураРеквизитовФормы.мСохраненныйДок.Комментарий              = Комментарий;
	СтруктураРеквизитовФормы.мСохраненныйДок.КодНалоговогоОргана      = КодИФНС;
	СтруктураРеквизитовФормы.мСохраненныйДок.КПП        			  = КПП;
	СтруктураРеквизитовФормы.мСохраненныйДок.Вид                      = Вариант;
	СтруктураРеквизитовФормы.мСохраненныйДок.ПредставлениеВида        = РегламентированнаяОтчетность.ПредставлениеВидаДокумента(СтруктураРеквизитовФормы.мСохраненныйДок.Вид);
	СтруктураРеквизитовФормы.мВариант                                 = Вариант;

	СтруктураРеквизитовФормы.мСохраненныйДок.ФорматВыгрузки = "Автоматически";
		
	СохранитьДанныеРаздела(НаимТекРаздела, Ложь, Ложь);
	
	ЗаполнитьПустыеСтруктурыДанных();
		
	// формируем данные редактируемых ячеек таблицы
	ПоказателиОтчета = Новый Структура();
	
	ЗаполнитьПоказателиОтчетаНаСервере(ПоказателиОтчета);
	
	// формируем список сохранения
	СписокСохранения = Новый Структура();
    	
	// вставляем данные редактируемых ячеек таблицы	
	СписокСохранения.Вставить("ПоказателиОтчета", ПоказателиОтчета);
    	
	ДанныеМногострочныхРазделов = Новый Структура;
	
	Для Каждого ЭлементСтруктуры Из мСтруктураМногострочныхРазделов Цикл
		
		ДанныеМногострочныхРазделов.Вставить(ЭлементСтруктуры.Ключ, ДанныеФормыВЗначение(ЭтаФорма[ЭлементСтруктуры.Значение], Тип("ТаблицаЗначений")));
		
	КонецЦикла;
	
	// вставляем данные многострочных разделов
	СписокСохранения.Вставить("ДанныеМногострочныхРазделов", ДанныеМногострочныхРазделов);
	
	ДанныеМногостраничныхРазделов = Новый Структура;
	
	МассивТиповНеопределено = Новый Массив; 
	МассивТиповНеопределено.Добавить(Тип("Неопределено"));
	ОписаниеТиповНеопределено = Новый ОписаниеТипов(МассивТиповНеопределено);
	
	Для Каждого ЭлементСтруктуры Из мСтруктураМногостраничныхРазделов Цикл
		
		ДанныеМногостраничныхРазделов.Вставить(ЭлементСтруктуры.Ключ, ДанныеФормыВЗначение(ЭтаФорма[ЭлементСтруктуры.Значение], Тип("ТаблицаЗначений")));
		
		ТаблЗнач = Неопределено;
		
		Если ДанныеМногостраничныхРазделов.Свойство(ЭлементСтруктуры.Ключ, ТаблЗнач) Тогда
						
			Если НЕ ТаблЗнач.Колонки.Найти("Данные") = Неопределено Тогда
												
				ТаблЗнач.Колонки.Удалить("Данные");
				ТаблЗнач.Колонки.Добавить("Данные", ОписаниеТиповНеопределено);
				
				Ном = 0;
				
				Для Каждого СтрокаТаблЗнач Из ТаблЗнач Цикл
					
					СтрокаТаблЗнач.Данные = ЭтаФорма[ЭлементСтруктуры.Значение][Ном].Данные[0].Значение;
					
					Ном = Ном + 1;
					
				КонецЦикла;
				
			КонецЕсли;
						
			Если НЕ ТаблЗнач.Колонки.Найти("ДанныеДопСтрок") = Неопределено Тогда
															
				ТаблЗнач.Колонки.Удалить("ДанныеДопСтрок");
				ТаблЗнач.Колонки.Добавить("ДанныеДопСтрок", ОписаниеТиповНеопределено);
				
				Ном = 0;
				
				Для Каждого СтрокаТаблЗнач Из ТаблЗнач Цикл
						
					Если (ЭтаФорма[ЭлементСтруктуры.Значение][Ном].ДанныеДопСтрок.Количество() > 0)
					   И (ЭтаФорма[ЭлементСтруктуры.Значение][Ном].ДанныеДопСтрок[0].Представление = "ДанныеФормыКоллекцияТаблицаДопСтрокРаздела") Тогда
							
						СтрокаТаблЗнач.ДанныеДопСтрок = ДанныеФормыВЗначение(ЭтаФорма[ЭлементСтруктуры.Значение][Ном].ДанныеДопСтрок[0].Значение, Тип("ТаблицаЗначений"));
						
						Ном = Ном + 1;
						
						Продолжить;
							
					КонецЕсли;
					
					СтруктураДанныхДопСтрок = Новый Структура;
					
					Для Каждого ЭлСтруктуры Из ЭтаФорма[ЭлементСтруктуры.Значение][Ном].ДанныеДопСтрок Цикл
							
						СтруктураДанныхДопСтрок.Вставить(ДанныеФормыВЗначение(ЭлСтруктуры.Значение, Тип("ТаблицаЗначений")));	
							
					КонецЦикла;
					
					СтрокаТаблЗнач.ДанныеДопСтрок = СтруктураДанныхДопСтрок;
			
					Ном = Ном + 1;
								
				КонецЦикла;
				
			КонецЕсли;
						
		КонецЕсли;
				
	КонецЦикла;
		
	// вставляем данные многостраничных разделов
	СписокСохранения.Вставить("ДанныеМногостраничныхРазделов", ДанныеМногостраничныхРазделов);
	
	ДанныеВариантовАвтоЗаполнения = Новый Структура;
	
	Для Каждого ЭлементСтруктуры Из мСтруктураВариантыЗаполнения Цикл
		
		МассивТаблЗнач = Новый Массив;
		
		ДанныеВариантовАвтоЗаполнения.Вставить(ЭлементСтруктуры.Ключ, МассивТаблЗнач);
			
		Для Каждого ЭлементМассива Из ЭтаФорма["ТаблицаВариантыЗаполнения" + ЭлементСтруктуры.Ключ] Цикл
			
			МассивТаблЗнач.Добавить(ДанныеФормыВЗначение(ЭлементМассива.ТаблицаВариантовЗаполнения, Тип("ТаблицаЗначений")));
			
		КонецЦикла;
			
	КонецЦикла;
	
	// вставляем данные вариантов автозаполнения ячеек
	СписокСохранения.Вставить("ДанныеВариантовАвтоЗаполнения", ДанныеВариантовАвтоЗаполнения);

	// вствляем версию формы
	СписокСохранения.Вставить("ВерсияФормы", СтруктураРеквизитовФормы.мВерсияФормы);
	
	// вствляем флажок пересчета страниц
	СписокСохранения.Вставить("ФлПодсчетСтраниц", СтруктураРеквизитовФормы.мСчетчикСтраниц);

	// вствляем флажок отключения
	СписокСохранения.Вставить("ФлОтклВыборЗначений", СтруктураРеквизитовФормы.мАвтоВыборКодов);

	СписокСохранения.Вставить("ФлПроверятьСоотношенияПриПечатиИВыгрузки", СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки);
	
	// вствляем флажок ручной ввод ВРЕМЕННАЯ ОТМЕНА
	СписокСохранения.Вставить("Автозаполнение", СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);
	
	// вствляем флажок разрешения печати без штрихкода
	СписокСохранения.Вставить("ПечатьБезШтрихкодаРазрешена", СтруктураРеквизитовФормы.мПечатьБезШтрихкодаРазрешена);

	ХранилищеДанных = Новый ХранилищеЗначения(СписокСохранения);
	СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета = ХранилищеДанных;

	// записываем документ, хранящий данные отчета
	Попытка
		СтруктураРеквизитовФормы.мСохраненныйДок.Записать();
		РегламентированнаяОтчетность.СохранитьСтатусОтправкиРеглОтчета(ЭтаФорма);
	Исключение
		Если НЕ Автосохранение Тогда
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), РегламентированнаяОтчетностьКлиентСервер.СформироватьТекстСообщения(ОписаниеОшибки()));
			Сообщение.Сообщить();
			
		КонецЕсли;
		СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
		Возврат Ложь;
	КонецПопытки;
		
	СохранитьДеревоСтраницОтчета(СтруктураРеквизитовФормы.мСохраненныйДок);

	Модифицированность   = Ложь;
	
	СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
	
	Если НЕ СтруктураРеквизитовФормы.мБезОткрытияФормы
       И НЕ СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
				   
    	ЗаблокироватьДанныеДляРедактирования(СтруктураРеквизитовФормы.мСохраненныйДок, , ЭтаФорма.УникальныйИдентификатор);

    КонецЕсли;
	
	Если ДанныеДляРазблокирования <> Неопределено Тогда
		РазблокироватьДанныеДляРедактирования(ДанныеДляРазблокирования.Ключ, ДанныеДляРазблокирования.ИдФормы);
	КонецЕсли;
	
	Возврат Истина;

КонецФункции

&НаСервере
Процедура ЗаполнитьПоказателиОтчетаНаСервере(ПоказателиОтчета)
	
	Префикс = "ПолеТабличногоДокумента";
	
	Для Каждого Раздел Из мСвойстваРазделовДекларации.ПолучитьЭлементы() Цикл
			
		Если НЕ Раздел.МногостраничностьВРазделе Тогда
			ПоказателиОтчета.Вставить(Префикс + Раздел.ИмяСтраницы, ЭтаФорма["СтруктураДанных" + Раздел.ИмяСтраницы]);
		КонецЕсли;
	
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПустыеСтруктурыДанных()
	
	СохрТабличныйДокумент = Новый ТабличныйДокумент;
	
	СохрТабличныйДокумент.Вывести(ТабличныйДокумент);
	
	Для Каждого Раздел Из мСвойстваРазделовДекларации.ПолучитьЭлементы() Цикл
		
		Если НЕ Раздел.МногостраничностьВРазделе
		  И (ЭтаФорма["СтруктураДанных" + Раздел.ИмяСтраницы].Количество() = 0) Тогда
		  
			ТабличныйДокумент.Очистить();
			ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + Раздел.ИмяСтраницы));
			
			СохранитьДанныеРаздела(Раздел.ИмяСтраницы, Ложь);
			
		ИначеЕсли Раздел.МногостраничностьВРазделе
			    И (ЭтаФорма[мСтруктураМногостраничныхРазделов[Раздел.ИмяСтраницы]][0].Данные.Количество() = 0) Тогда
				
			ТабличныйДокумент.Очистить();
			ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + Раздел.ИмяСтраницы));
			
			ЗаполнитьПоказателиЗначениямиПоУмолчанию(Раздел.ИмяСтраницы);
			
			СохранитьДанныеРаздела(Раздел.ИмяСтраницы, Ложь);	
			
		КонецЕсли;
	
	КонецЦикла;
	
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(СохрТабличныйДокумент);
	
КонецПроцедуры

&НаСервере
Процедура СохранитьДеревоСтраницОтчета(Знач мСохраненныйДок)
	
	Если мСохраненныйДок <> Неопределено Тогда
				
		Если ТипЗнч(мСохраненныйДок) = Тип("ДокументСсылка.РегламентированныйОтчет") Тогда
			мСохраненныйДок = мСохраненныйДок.ПолучитьОбъект();
		КонецЕсли;
		
		Если Не мСохраненныйДок.ЭтоНовый() Тогда
			// Сохраняем выбранные листы для печати в хранилище
			ХранилищеДанных = Новый ХранилищеЗначения(РеквизитФормыВЗначение("мДеревоСтраницОтчета"));
			мСохраненныйДок.ДеревоНастройкиСтраниц = ХранилищеДанных;
			Попытка
				мСохраненныйДок.Записать();
			Исключение
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьСохраненныеДанные()
	Перем ДанныеМногострочныхРазделов;
	Перем ДанныеМногостраничныхРазделов;
	Перем ДанныеВариановАвтоЗаполнения;
	Перем ПоказателиОтчета;
	Перем Автозаполнение;
	Перем ТаблицаМногостраничногоДокумента;
	
	// В случае, если формы была скопирована по F9, то проверим, не изменилась ли организация.
	Если НЕ ЗначениеЗаполнено(СтруктураРеквизитовФормы.Организация) Тогда
		СтруктураРеквизитовФормы.Организация = СтруктураРеквизитовФормы.мСохраненныйДок.Организация;
	КонецЕсли;
	
	СтруктураРеквизитовФормы.ЕдиницаИзмерения         = СтруктураРеквизитовФормы.мСохраненныйДок.ЕдиницаИзмерения;
	СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = СтруктураРеквизитовФормы.мСохраненныйДок.ТочностьЕдиницыИзмерения;
	ДатаПодписи = СтруктураРеквизитовФормы.мСохраненныйДок.ДатаПодписи;
	Комментарий	= СтруктураРеквизитовФормы.мСохраненныйДок.Комментарий;
	
	// восстанавливаем сохраненные данные отчета
	СписокСохранения = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить();
	
	// список листов, выводимых на печать
	ДеревоНастройкиСтраниц = СтруктураРеквизитовФормы.мСохраненныйДок.ДеревоНастройкиСтраниц.Получить();
	
	// Установим актуальные представления разделов.
	Если НЕ ДеревоНастройкиСтраниц = Неопределено Тогда
		
		Для Каждого СтрокаДерева Из ДеревоНастройкиСтраниц.Строки Цикл
			Счетчик = ?(Счетчик = Неопределено, 0, Счетчик);
			ЭлементмДеревоСтраницОтчета = мДеревоСтраницОтчета.ПолучитьЭлементы().Получить(Счетчик);
			Если СтрокаДерева.ИмяСтраницы = ЭлементмДеревоСтраницОтчета.ИмяСтраницы Тогда
				Если НЕ СтрокаДерева.Представление = ЭлементмДеревоСтраницОтчета.Представление Тогда
					СтрокаДерева.Представление = ЭлементмДеревоСтраницОтчета.Представление;
				КонецЕсли;
			Иначе
				Продолжить;
			КонецЕсли;
			Счетчик = Счетчик + 1;
		КонецЦикла;
		
		ЗначениеВРеквизитФормы(ДеревоНастройкиСтраниц.Скопировать(), "мДеревоСтраницОтчета");
		
	КонецЕсли;
	
	// восстанавливаем сохраненные данные многострочных разделов
	Если СписокСохранения.Свойство( "ДанныеМногострочныхРазделов", ДанныеМногострочныхРазделов) Тогда
		
		Для Каждого ЭлементСтруктуры Из ДанныеМногострочныхРазделов Цикл
			
			НайденноеЗначение = Неопределено;
			
			мСтруктураМногострочныхРазделов.Свойство(ЭлементСтруктуры.Ключ, НайденноеЗначение);
			
			Если НЕ НайденноеЗначение = Неопределено Тогда
				
				ЗначениеВДанныеФормы(ЭлементСтруктуры.Значение, ЭтаФорма[НайденноеЗначение])
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	// восстанавливаем сохраненные данные вариантов автозаполнения ячеек
	Если СписокСохранения.Свойство("ДанныеВариантовАвтоЗаполнения", ДанныеВариановАвтоЗаполнения) Тогда
		
		Если НЕ ДанныеВариановАвтоЗаполнения = Неопределено Тогда
			
			мСтруктураВариантыЗаполнения.Очистить();
			
			Для Каждого ЭлементСтруктуры Из ДанныеВариановАвтоЗаполнения Цикл
				
				мСтруктураВариантыЗаполнения.Вставить(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Ключ);
				
				ЭтаФорма["ТаблицаВариантыЗаполнения" + ЭлементСтруктуры.Ключ].Очистить();
				
				Для Каждого ЭлементМассива Из ЭлементСтруктуры.Значение Цикл
										
					ТаблВарЗаполнения = ЭтаФорма["ТаблицаВариантыЗаполнения" + ЭлементСтруктуры.Ключ].Добавить().ТаблицаВариантовЗаполнения;
										
					ЗначениеВДанныеФормы(ЭлементМассива, ТаблВарЗаполнения);
					
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// восстановим сохраненные данные редактируемых ячеек
	СписокСохранения.Свойство( "ПоказателиОтчета", ПоказателиОтчета );
	
	// восстанавливаем сохраненные данные многостраничных разделов
	Если СписокСохранения.Свойство("ДанныеМногостраничныхРазделов", ДанныеМногостраничныхРазделов) Тогда
		
		Для Каждого ЭлементСтруктуры Из ДанныеМногостраничныхРазделов Цикл
			
			НайденноеЗначение = Неопределено;
			
			мСтруктураМногостраничныхРазделов.Свойство(ЭлементСтруктуры.Ключ, НайденноеЗначение);
			
			Если НЕ НайденноеЗначение = Неопределено Тогда
				
				НайденноеЗначение = ЭтаФорма[НайденноеЗначение];
				
				ЗначениеВДанныеФормы(ЭлементСтруктуры.Значение, НайденноеЗначение);
				
				Если НайденноеЗначение[0].Свойство("Данные") Тогда
					
					Для Каждого СтрокаТаблЗнач Из НайденноеЗначение Цикл
						
						Если ТипЗнч(СтрокаТаблЗнач.Данные) = Тип("СписокЗначений") Тогда
							
							СтрокаТаблЗнач.Данные.Очистить();
							СтрокаТаблЗнач.Данные.Добавить(ЭлементСтруктуры.Значение[НайденноеЗначение.Индекс(СтрокаТаблЗнач)].Данные);
							
						КонецЕсли;
						
					КонецЦикла;
					
				КонецЕсли;
				
				Если НайденноеЗначение[0].Свойство("ДанныеДопСтрок") Тогда
					
					Ном = 0;
					
					Для Каждого СтрокаТаблЗнач Из ЭлементСтруктуры.Значение Цикл
						
						Если ТипЗнч(СтрокаТаблЗнач.ДанныеДопСтрок) = Тип("Структура") Тогда
							
							Для Каждого ЭлСтруктуры Из СтрокаТаблЗнач.ДанныеДопСтрок Цикл
								
								ТаблЗнач = ЭлСтруктуры.Значение;
								
								ЭлСтруктуры.Значение = ЭтаФорма["Хранилище" + ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ЭлементСтруктуры.Ключ)].Добавить().Таблица;
								
								ЗначениеВДанныеФормы(ТаблЗнач, ЭлСтруктуры.Значение);
								
								НайденноеЗначение[Ном].ДанныеДопСтрок.Добавить(ЭлСтруктуры.Значение);
								
							КонецЦикла;
							
						ИначеЕсли ТипЗнч(СтрокаТаблЗнач.ДанныеДопСтрок) = Тип("ТаблицаЗначений") Тогда
							
							СтрокаТаблЗначДанныеДопСтрок = ЭтаФорма["Хранилище" + ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ЭлементСтруктуры.Ключ)].Добавить().Таблица;
							
							ЗначениеВДанныеФормы(СтрокаТаблЗнач.ДанныеДопСтрок, СтрокаТаблЗначДанныеДопСтрок);
							
							НайденноеЗначение[Ном].ДанныеДопСтрок.Добавить(СтрокаТаблЗначДанныеДопСтрок, "ДанныеФормыКоллекцияТаблицаДопСтрокРаздела");
							
						КонецЕсли;
						
						Ном = Ном + 1;
						
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Для Каждого Раздел Из мСтруктураМногостраничныхРазделов Цикл
		Для Каждого Страница Из ЭтаФорма[Раздел.Значение] Цикл
			Страница.АктивнаяСтраница = Ложь;
		КонецЦикла;
	КонецЦикла;
	
	// восстанавливаем флажок ПодсчетаСтраниц
	СписокСохранения.Свойство("ФлПодсчетСтраниц", СтруктураРеквизитовФормы.мСчетчикСтраниц);
	
	СписокСохранения.Свойство("ФлОтклВыборЗначений", СтруктураРеквизитовФормы.мАвтоВыборКодов);
	Если СтруктураРеквизитовФормы.мАвтоВыборКодов = Неопределено Тогда
		СтруктураРеквизитовФормы.мАвтоВыборКодов = Ложь;
	КонецЕсли;
	
	СписокСохранения.Свойство("ФлПроверятьСоотношенияПриПечатиИВыгрузки", СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки);
	СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки = ?(СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки = Неопределено, Ложь, СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки);
	
	СписокСохранения.Свойство("Автозаполнение", Автозаполнение);
	СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет = Автозаполнение;
	
	Если НЕ СписокСохранения.Свойство("ПечатьБезШтрихкодаРазрешена", СтруктураРеквизитовФормы.мПечатьБезШтрихкодаРазрешена) Тогда
		СтруктураРеквизитовФормы.мПечатьБезШтрихкодаРазрешена = Ложь;
	КонецЕсли;
	
	СформироватьДеревоРазделовОтчетаНаСервере();
	
	Префикс = "ПолеТабличногоДокумента";
	
	Для Каждого Раздел Из мСвойстваРазделовДекларации.ПолучитьЭлементы() Цикл	
		
		Если НЕ Раздел.МногостраничностьВРазделе Тогда
			ЭтаФорма["СтруктураДанных" + Раздел.ИмяСтраницы] = ПоказателиОтчета[Префикс + Раздел.ИмяСтраницы];
		КонецЕсли;
		
	КонецЦикла;
	
	ЭтоЛистСтарогоОбразца = ВосстановитьСведенияОбОрганизацииИзТитульногоЛистаСтарогоОбразца(ПоказателиОтчета);
	
	ИмяТекРаздела = "Титульный";
	
	Для Каждого ЭлСтруктуры Из ЭтаФорма["СтруктураДанных" + ИмяТекРаздела] Цикл
		Попытка
			ТабличныйДокумент.Области[ЭлСтруктуры.Ключ].Значение = ЭлСтруктуры.Значение;
		Исключение
		КонецПопытки;
	КонецЦикла;
	
	РегламентированнаяОтчетность.ОперацииПриВосстановленииРегламентированногоОтчета(ЭтаФорма);
	
	СтруктураРеквизитовФормы.мДелитель = 1;
	
	КопироватьДанныеФормы(мДеревоСтраницОтчета, мДеревоВыбранныхСтраниц);
	
	Модифицированность = Ложь;
	
КонецПроцедуры

&НаСервере
Функция ВосстановитьСведенияОбОрганизацииИзТитульногоЛистаСтарогоОбразца(ПоказателиОтчета)
	
	ЭтоЛистСтарогоОбразца = Ложь;
	
	ПоказателиТаблПоле = ПоказателиОтчета["ПолеТабличногоДокументаТитульный"];
	
	Для Каждого Показатель Из ПоказателиТаблПоле Цикл
		
		ИмяПоказателя = Показатель.Ключ;
		
		Если ИмяПоказателя = "ИНН1_1" Тогда
			СтруктураДанныхТитульный.Вставить("ИНН1");
			Для Ном = 1 По 12 Цикл
				СтруктураДанныхТитульный.ИНН1 = СокрЛП(СтруктураДанныхТитульный.ИНН1) + ПоказателиТаблПоле["ИНН1_" + Ном];
				СтруктураДанныхТитульный.Удалить("ИНН1_" + Ном);
			КонецЦикла;
			Если Лев(СтруктураДанныхТитульный.ИНН1, 2) = "00" Тогда
				СтруктураДанныхТитульный.ИНН1 = Сред(СтруктураДанныхТитульный.ИНН1, 3);
			КонецЕсли;
			СтруктураДанныхТитульный.ИНН1 = СтрЗаменить(СтруктураДанныхТитульный.ИНН1, "-", "");
			
			ЭтоЛистСтарогоОбразца = Истина;
			
		ИначеЕсли ИмяПоказателя = "КПП1_1" Тогда
			СтруктураДанныхТитульный.Вставить("КПП1");
			Для Ном = 1 По 9 Цикл
				СтруктураДанныхТитульный.КПП1 = СокрЛП(СтруктураДанныхТитульный.КПП1) + ПоказателиТаблПоле["КПП1_" + Ном];
				СтруктураДанныхТитульный.Удалить("КПП1_" + Ном);
			КонецЦикла;
		ИначеЕсли ИмяПоказателя = "КодИМНС1" Тогда
			СтруктураДанныхТитульный.Вставить("КодИМНС");
			Для Ном = 1 По 4 Цикл
				СтруктураДанныхТитульный.КодИМНС = СокрЛП(СтруктураДанныхТитульный.КодИМНС) + ПоказателиТаблПоле["КодИМНС" + Ном];
				СтруктураДанныхТитульный.Удалить("КодИМНС" + Ном);
			КонецЦикла;
		ИначеЕсли ИмяПоказателя = "НомерКорректировки1" Тогда
			СтруктураДанныхТитульный.Вставить("НомерКорректировки");
			Для Ном = 1 По 3 Цикл
				НомерКорр = СокрЛП(ПоказателиТаблПоле["НомерКорректировки" + Ном]);
				Если СтрНайти("0123456789", НомерКорр) > 0 Тогда
					СтруктураДанныхТитульный.НомерКорректировки = СокрЛП(СтруктураДанныхТитульный.НомерКорректировки) + НомерКорр;
				КонецЕсли; 
				СтруктураДанныхТитульный.Удалить("НомерКорректировки" + Ном);
			КонецЦикла;
		ИначеЕсли ИмяПоказателя = "Период1" Тогда
			СтруктураДанныхТитульный.Вставить("Период");
			Для Ном = 1 По 2 Цикл
				СтруктураДанныхТитульный.Период = СокрЛП(СтруктураДанныхТитульный.Период) + ПоказателиТаблПоле["Период" + Ном];
				СтруктураДанныхТитульный.Удалить("Период" + Ном);
			КонецЦикла;
		ИначеЕсли ИмяПоказателя = "ОтчетГод1" Тогда
			СтруктураДанныхТитульный.Вставить("ОтчетГод");
			Для Ном = 1 По 4 Цикл
				СтруктураДанныхТитульный.ОтчетГод = СокрЛП(СтруктураДанныхТитульный.ОтчетГод) + ПоказателиТаблПоле["ОтчетГод" + Ном];
				СтруктураДанныхТитульный.Удалить("ОтчетГод" + Ном);
			КонецЦикла;
		ИначеЕсли ИмяПоказателя = "ПоМесту1" Тогда
			СтруктураДанныхТитульный.Вставить("ПоМесту");
			Для Ном = 1 По 3 Цикл
				СтруктураДанныхТитульный.ПоМесту = СокрЛП(СтруктураДанныхТитульный.ПоМесту) + ПоказателиТаблПоле["ПоМесту" + Ном];
				СтруктураДанныхТитульный.Удалить("ПоМесту" + Ном);
			КонецЦикла;
		ИначеЕсли ИмяПоказателя = "Прил1" Тогда
			СтруктураДанныхТитульный.Вставить("Прил");
			Для Ном = 1 По 3 Цикл
				СтруктураДанныхТитульный.Прил = СокрЛП(СтруктураДанныхТитульный.Прил) + ПоказателиТаблПоле["Прил" + Ном];
				СтруктураДанныхТитульный.Удалить("Прил" + Ном);
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
	
	ЗаполнитьДатуВЯчейкахНаСервере();
	
	Возврат ЭтоЛистСтарогоОбразца;
	
КонецФункции

&НаСервере
Процедура НачальныеОперацииСМногострочнымиБлоками()
	Перем ИсходноеКоличествоСтрокГруппы;

	// создаем исходную структуру многострочных разделов
	Для Каждого ЭлементСтруктуры Из мСтруктураМногострочныхРазделов Цикл
		ИмяГруппы = ЭлементСтруктуры.Ключ;
		СтруктураГруппы = ЭтаФорма[ЭлементСтруктуры.Значение];
		
		мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);

		Для НСтр = 1 По ИсходноеКоличествоСтрокГруппы Цикл

			СтруктураГруппы.Добавить();
			
		КонецЦикла;
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтруктуруЗависимыхЯчеекДляАвторасчета()
	
	СтруктураЗависимыхЯчеекДляАвторасчета = Новый Структура;
	
КонецПроцедуры

&НаСервере
Процедура Инициализация(БезОткрытияФормы = Ложь) Экспорт
	
	Перем ИсходноеКоличествоСтрокГруппы;
	
	СтруктураРеквизитовФормы.мБезОткрытияФормы = БезОткрытияФормы;
	
	КодыНС = Новый Массив;
	КодыНС.Добавить("A");
	КодыНС.Добавить("B");
	КодыНС.Добавить("C");
	КодыНС.Добавить("D");
	КодыНС.Добавить("F");
	СтруктураРеквизитовФормы.Вставить("КодыНаличияСвидетельстваABCDF", КодыНС);
	
	ЗаполнитьНачальныеНастройки();
	
	ЗаполнитьСтруктуруЗависимыхЯчеекДляАвторасчета();
	
	ФормироватьСтруктуруСтраницОтчета();

	ФормироватьСтруктуруСвойствСтраниц();

	СформироватьДеревоРазделовОтчетаНаСервере();

	СтруктураРеквизитовФормы.мАвтоВыборКодов = Ложь;
	СтруктураРеквизитовФормы.мРежимПечати = Ложь;

	СтруктураРеквизитовФормы.ВидДокумента = 0;
	НомерКорректировки = 1;
	
	Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда

		НачальныеОперацииСМногострочнымиБлоками();

		Если СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено Тогда
			// документ скопирован
			ВосстановитьСохраненныеДанные();
		Иначе
			// Это новый документ.
			Если НЕ СтруктураРеквизитовФормы.мБезОткрытияФормы Тогда
				// Для нового док-та установим возведенный флаг проверки соотношений.
				СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки = Ложь;
			КонецЕсли;
			
			// Установим реквизиты формы по умолчанию
			СтруктураРеквизитовФормы.ЕдиницаИзмерения         = Перечисления.ПорядкиОкругленияОтчетности.Окр1;
			СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = 0;
			СтруктураРеквизитовФормы.мДелитель                = 1;
			
			КопироватьДанныеФормы(мДеревоСтраницОтчета, мДеревоВыбранныхСтраниц);
			
			ТабличныйДокумент.Области.ПоМесту.Значение = ?(РегламентированнаяОтчетностьВызовСервера.ЭтоЮридическоеЛицо(СтруктураРеквизитовФормы.Организация), "214", "120");
		КонецЕсли;
		
		Модифицированность = Истина;

	Иначе
		
		// При открытии или при копировании сохраненного
		// отчета восстанавливаем сохраненные данные.
		ВосстановитьСохраненныеДанные();
		
		Если ЗначениеЗаполнено(СтруктураРеквизитовФормы.мСкопированаФорма) Тогда
			СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено;
		КонецЕсли;
		
		Если НЕ БезОткрытияФормы
           И НЕ СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
				   
        	ЗаблокироватьДанныеДляРедактирования(СтруктураРеквизитовФормы.мСохраненныйДок, , ЭтаФорма.УникальныйИдентификатор);

        КонецЕсли;
	
	КонецЕсли;
	
	Если НЕ БезОткрытияФормы Тогда
		СформироватьСпискиВыбора();
	КонецЕсли;

	ЗаполнитьПустыеСтруктурыДанных();

	ПоказатьПериод();
	
	Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено ИЛИ  ЗначениеЗаполнено(СтруктураРеквизитовФормы.мСкопированаФорма) Тогда
		
		ЗаполнитьСведенияОбОрганизации();
		
	Иначе
		
		РегламентированнаяОтчетность.ПолучитьЗначениеОКВЭД(ДатаПодписи, СтруктураРеквизитовФормы);
		
	КонецЕсли;
	
	СтруктураРеквизитовФормы.НаимОрганизации = СтруктураРеквизитовФормы.Организация.Наименование;
	
	Если СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета >= '2016-01-01' Тогда
		СтруктураРеквизитовФормы.ТекущийКодНаличияСвидетельства = СтруктураДанныхТитульный.КодНаличияСвидетельства1;
	КонецЕсли;
	
	Если НЕ БезОткрытияФормы Тогда
		РегламентированнаяОтчетностьКлиентСервер.ПоказатьКнопкиПечати(ЭтаФорма);
	КонецЕсли;
	
	СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
	Если СтруктураРеквизитовФормы.ВидДокумента = 0 Тогда 
		НомерКорректировки = 0;
	КонецЕсли;
	ТабличныйДокумент.Области.НомерКорректировки.Значение = Строка(НомерКорректировки);
	ЗаполнитьДатуВЯчейках(ЭтаФорма);
	
	РегламентированнаяОтчетность.ДобавитьКнопкуПрисоединенныеФайлы(ЭтаФорма);
	
	РегламентированнаяОтчетностьКлиентСервер.ПриИнициализацииФормыРегламентированногоОтчета(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ФормироватьСтруктуруСтраницОтчета() Экспорт

	// Дерево содержит коллекцию страниц отчета.
	// В колонках дерева хранятся следующие данные:
	//    - представление листа;
	//    - имя страницы основной панели формы, содержащей выводимый на печать лист;
	//    - имя поля табличного документа;
	//    - имя области ячеек табличного документа (используется в случае вывода
	//      на печать отдельных страниц титульного листа);
	//    - ориентация страницы при печати;
	//    - число, метка вывода страницы на печать;
	//    - число, метка показа страницы на основной панели формы;
	//    - число, метка выгрузки данных страницы в ИМНС.
	//
	мДеревоСтраницОтчета.ПолучитьЭлементы().Очистить();

	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Титульный";
	СтрокаУровня1.Представление            = "Титульный лист";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;

	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел1";
	СтрокаУровня1.Представление            = "Раздел 1";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;

	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел12";
	СтрокаУровня1.Представление            = "Раздел 1.2";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;

	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел13";
	СтрокаУровня1.Представление            = "Раздел 1.3";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;

	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел2";
	СтрокаУровня1.Представление            = "Раздел 2";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел24";
	СтрокаУровня1.Представление            = "Раздел 2.4";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел25";
	СтрокаУровня1.Представление            = "Раздел 2.5";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;

	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Приложение1";
	СтрокаУровня1.Представление            = "Прил. 1";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;

	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Приложение2";
	СтрокаУровня1.Представление            = "Прил. 2";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;

	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Приложение3";
	СтрокаУровня1.Представление            = "Прил. 3";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;

	СтрокаУровня1 =мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Приложение4";
	СтрокаУровня1.Представление            = "Прил. 4";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;

	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Приложение5";
	СтрокаУровня1.Представление            = "Прил. 5";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;

	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Приложение6";
	СтрокаУровня1.Представление            = "Прил. 6";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;

	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Приложение7";
	СтрокаУровня1.Представление            = "Прил. 7";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНачальныеНастройки() Экспорт
	
	МакетСоставаПоказателей = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(СтруктураРеквизитовФормы.мСоставПоказателей);
	
	Для Инд = 0 По МакетСоставаПоказателей.Области.Количество() - 1 Цикл
			
		ТекОбласть    = МакетСоставаПоказателей.Области[Инд];
		ИмяСтраницы   = ТекОбласть.Имя;
			
		ЭтаФорма["ТаблицаВариантыЗаполнения" + ИмяСтраницы].Добавить();
		
		// Таблица значений содержит информацию о вариантах заполнения показателя отчета.
		// В колонках таблицы значений отображается следующая информация:
		//   - имя ячейки (код показателя);
		//   - вариант заполнения ячейки;
		//   - вычисленное по данным ИБ значение ячейки;
		//   - величина автокорректировки значения ячейки;
		//   - примечание к ячейке.
		//
		Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
			// перебираем строки макета
			
			// Код показателя (по составу показателей) определяется по первой колонке макета
			КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
			ИмяПоказателя = КодПоказателя;

			Если КодПоказателя = "===" Тогда         // признак конечной строки
				Прервать;
			КонецЕсли;

			Если Лев(КодПоказателя, 2) = "//" Тогда  // пропускаем комментарии
				Продолжить;
			КонецЕсли;

			// код показателя по форме отчете (имя ячейки в полях табличного документа формы)
			КодПоказателяПоФорме = СокрЛП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
			// признак многострочности определяется по третьей колонке макета
			ПризнМногострочность = СокрЛП(МакетСоставаПоказателей.Область(Ном, 3).Текст);
			// по четвертой колонке определяется тип данных реквизита
			ТипДанныхРеквизита   = СокрЛП(МакетСоставаПоказателей.Область(Ном, 4).Текст);
			// по колонке 5 определяется исходное количество строк многострочного раздела
			стрКолСтрокИсходный  = СокрЛП(МакетСоставаПоказателей.Область(Ном, 5).Текст);
			// вариант заполнения ячейки определяется по колонке 6 макета
			стрВариантЗаполнения = РегламентированнаяОтчетность.ПолучитьВариантЗаполненияПоказателяРегОтчета(МакетСоставаПоказателей, Ном);
			// код показателя из структуры, берется из колонки 9
			КодПоказателяПоСтруктуре = СокрЛП(МакетСоставаПоказателей.Область(Ном, 9).Текст);

			чКолСтрокИсходный    = ? (ПустаяСтрока(стрКолСтрокИсходный),  0, Число(стрКолСтрокИсходный));
			чВариантЗаполнения   = ? (ПустаяСтрока(стрВариантЗаполнения), 0, Число(стрВариантЗаполнения));

			// формируем таблицу значений, содержащей состав показателей отчета
			НоваяСтрока = мТаблицаСоставПоказателей.Добавить();
			НоваяСтрока.ИмяПоляТаблДокумента   = ИмяСтраницы;
			НоваяСтрока.КодПоказателяПоСоставу = КодПоказателя;
			НоваяСтрока.КодПоказателяПоФорме   = КодПоказателяПоФорме;
			НоваяСтрока.ПризнМногострочности   = ПризнМногострочность;
			НоваяСтрока.ТипДанныхПоказателя    = ТипДанныхРеквизита;
			НоваяСтрока.КодПоказателяПоСтруктуре = КодПоказателяпоСтруктуре;

			Если чВариантЗаполнения <> 0 Тогда
				// Если в колонке 6 задан вариант заполнения показателя, 
				// то его значение может определяться по данным ИБ.
				// Дополняем таблицу значений вариантов заполнения
				НоваяСтрока = ЭтаФорма["ТаблицаВариантыЗаполнения" + ИмяСтраницы][0].ТаблицаВариантовЗаполнения.Добавить();
				НоваяСтрока.КодПоказателя      = ? (Не ПустаяСтрока(КодПоказателяПоФорме), КодПоказателяПоФорме, КодПоказателя);
				НоваяСтрока.ВариантЗаполнения  = чВариантЗаполнения;
				НоваяСтрока.КодПоказателяПоСтруктуре  = КодПоказателяПоСтруктуре;
			КонецЕсли;

		КонецЦикла;

		Если ЭтаФорма["ТаблицаВариантыЗаполнения" + ИмяСтраницы][0].ТаблицаВариантовЗаполнения.Количество() > 0 Тогда	
			// имеются автоматически заполняемые ячейки
			// Создаем структуру, содержащей варианты заполнения показателей отчета.
			//
			// В качестве ключа используется имя страницы основной панели формы, содержащей
			//   табличный документ с автоматически заполняемыми показателями.
			// В качестве значения принимаем Массив из таблицы значений - вариантов заполнения
			//   показателей по каждой странице многостраничного раздела.
			//
			мСтруктураВариантыЗаполнения.Вставить(ИмяСтраницы, ИмяСтраницы);
			мСтруктураВариантыЗаполненияЭталон.Вставить(ИмяСтраницы, ИмяСтраницы);
				
		Конецесли;

	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура СформироватьСпискиВыбора()
	
	МакетСоставаПоказателей = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет("СпискиВыбора2013Кв4");
	
	КоллекцияСписковВыбора = Новый Соответствие;
	Для Каждого Область Из МакетСоставаПоказателей.Области Цикл
		Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Строки Тогда
			ВерхОбласти = Область.Верх;
			НизОбласти = Область.Низ;
			ТаблСписка = Новый ТаблицаЗначений;
			ТаблСписка.Колонки.Добавить("Код",,, МакетСоставаПоказателей.Область(ВерхОбласти, 1, ВерхОбласти, 1).ШиринаКолонки);
			ТаблСписка.Колонки.Добавить("Название",,, МакетСоставаПоказателей.Область(ВерхОбласти, 2, ВерхОбласти, 2).ШиринаКолонки);
			ТаблСписка.Колонки.Добавить("РезультатПроверки",,, 0);
			Для НомСтр = ВерхОбласти По НизОбласти Цикл
				КодПоказателя = СокрП(МакетСоставаПоказателей.Область(НомСтр, 1).Текст);
				Если КодПоказателя <> "###" Тогда
					НовСтрока = ТаблСписка.Добавить();
					НовСтрока.Код = КодПоказателя;
					НовСтрока.Название = СокрП(МакетСоставаПоказателей.Область(НомСтр, 2).Текст);
					НовСтрока.РезультатПроверки = СокрП(МакетСоставаПоказателей.Область(НомСтр, 3).Текст);
				КонецЕсли;
			КонецЦикла;
			КоллекцияСписковВыбора.Вставить(Область.Имя, ТаблСписка);
		КонецЕсли;
	КонецЦикла;
	
	СвойстваПоказателей.Очистить();
	
	Если ДатаПодписи >= '2016-01-01' ИЛИ НЕ ЗначениеЗаполнено(ДатаПодписи) Тогда
		ИмяКоллекцииВыбораКБК = "КБК_2015";
		ИмяКоллекцииВыбораКБК12 = "КБК12_2016";
	ИначеЕсли ДатаПодписи >= '2015-01-01' Тогда
		ИмяКоллекцииВыбораКБК = "КБК_2015";
		ИмяКоллекцииВыбораКБК12 = ИмяКоллекцииВыбораКБК;
	ИначеЕсли ДатаПодписи >= '2013-05-21' Тогда
		ИмяКоллекцииВыбораКБК = "КБК_2013_05_21";
		ИмяКоллекцииВыбораКБК12 = ИмяКоллекцииВыбораКБК;
	ИначеЕсли ДатаПодписи >= '20130101' Тогда
		ИмяКоллекцииВыбораКБК = "КБК_2013";
		ИмяКоллекцииВыбораКБК12 = ИмяКоллекцииВыбораКБК;
	ИначеЕсли ДатаПодписи >= '20120101' Тогда
		ИмяКоллекцииВыбораКБК = "КБК_2012";
		ИмяКоллекцииВыбораКБК12 = ИмяКоллекцииВыбораКБК;
	Иначе
		ИмяКоллекцииВыбораКБК = "КБК";
		ИмяКоллекцииВыбораКБК12 = ИмяКоллекцииВыбораКБК;
	КонецЕсли;
	
	// Титульный.
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "КодФормыОрг", 1, , "Выбор кода формы реорганизации(ликвидации)", КоллекцияСписковВыбора["КодыФормОрг"]);
	
	Если СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета >= '2016-01-01' Тогда
		ИмяСекцииКодаНаличияСвидетельства = "КодНаличияСвидетельства_201601";
	ИначеЕсли СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета >= '2015-01-01' Тогда
		ИмяСекцииКодаНаличияСвидетельства = "КодНаличияСвидетельства_201501";
	Иначе
		ИмяСекцииКодаНаличияСвидетельства = "КодНаличияСвидетельства";
	КонецЕсли;
	
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "КодНаличияСвидетельства1", 1, , "Выбор кода наличия свидетельства", КоллекцияСписковВыбора[ИмяСекцииКодаНаличияСвидетельства]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "ПоМесту", 3, , "Выбор места представления", КоллекцияСписковВыбора["МестаПредставления"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "Период", 2, , "Выбор кода периода", КоллекцияСписковВыбора["КодыПериодов"]);
	
	// Раздел 1.1 - 1.3.
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000110002020", 20, , "Выбор КБК", КоллекцияСписковВыбора[ИмяКоллекцииВыбораКБК]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000120002020", 20, , "Выбор КБК", КоллекцияСписковВыбора[ИмяКоллекцииВыбораКБК12]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000130002020", 20, , "Выбор КБК", КоллекцияСписковВыбора[ИмяКоллекцииВыбораКБК]);
	
	// Раздел 2.
	Если СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета >= '2016-01-01' Тогда
		ИмяСекцииКодаВидаПодакцизногоТовара = "КодВидаПодакцизногоТовараР2_201601";
	ИначеЕсли СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета >= '2015-01-01' Тогда
		ИмяСекцииКодаВидаПодакцизногоТовара = "КодВидаПодакцизногоТовараР2_201501";
	ИначеЕсли СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета >= '2013-03-01' Тогда
		ИмяСекцииКодаВидаПодакцизногоТовара = "КодВидаПодакцизногоТовараР2_201303";
	ИначеЕсли СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета >= '2012-07-01' Тогда
		ИмяСекцииКодаВидаПодакцизногоТовара = "КодВидаПодакцизногоТовараР2_201207";
	ИначеЕсли СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета >= '2012-01-01' Тогда
		ИмяСекцииКодаВидаПодакцизногоТовара = "КодВидаПодакцизногоТовараР2_2012";
	Иначе
		ИмяСекцииКодаВидаПодакцизногоТовара = "КодВидаПодакцизногоТовараР2";
	КонецЕсли;
		
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000200001000", 3, , "Выбор кода вида подакцизного товара", КоллекцияСписковВыбора[ИмяСекцииКодаВидаПодакцизногоТовара]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000200002000", 3, , "Выбор единицы измерения", КоллекцияСписковВыбора["ОКЕИ"]);
	
	Если СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета >= '2016-01-01' Тогда
		ИмяСекцииКодаПоказателя21 = "КодПоказателя21_201601";
	ИначеЕсли СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета >= '2015-01-01' Тогда
		ИмяСекцииКодаПоказателя21 = "КодПоказателя21_201501";
	Иначе
		ИмяСекцииКодаПоказателя21 = "КодПоказателя21";
	КонецЕсли;
	
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000210001001", 5, , "Выбор кода показателя", КоллекцияСписковВыбора[ИмяСекцииКодаПоказателя21]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000210001002", 1, , "Выбор признака применения ставки акциза на спирт", КоллекцияСписковВыбора["ПризнакПримененияСтавкиАкцизаНаСпирт"]);
	
	Если СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета >= '2016-01-01' Тогда
		ИмяСекцииКодаПоказателя22 = "КодПоказателя22_201601";
	ИначеЕсли СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета >= '2015-01-01' Тогда
		ИмяСекцииКодаПоказателя22 = "КодПоказателя22_201501";
	Иначе
		ИмяСекцииКодаПоказателя22 = "КодПоказателя22";
	КонецЕсли;
	
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000220001001", 5, , "Выбор кода показателя", КоллекцияСписковВыбора[ИмяСекцииКодаПоказателя22]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000220002001", 5, , "Выбор кода показателя", КоллекцияСписковВыбора[ИмяСекцииКодаПоказателя22]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000220003001", 5, , "Выбор кода показателя", КоллекцияСписковВыбора[ИмяСекцииКодаПоказателя22]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000220004001", 5, , "Выбор кода показателя", КоллекцияСписковВыбора[ИмяСекцииКодаПоказателя22]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000220005001", 5, , "Выбор кода показателя", КоллекцияСписковВыбора[ИмяСекцииКодаПоказателя22]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000220006001", 5, , "Выбор кода показателя", КоллекцияСписковВыбора[ИмяСекцииКодаПоказателя22]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000220007001", 5, , "Выбор кода показателя", КоллекцияСписковВыбора[ИмяСекцииКодаПоказателя22]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000220008001", 5, , "Выбор кода показателя", КоллекцияСписковВыбора[ИмяСекцииКодаПоказателя22]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000220009001", 5, , "Выбор кода показателя", КоллекцияСписковВыбора[ИмяСекцииКодаПоказателя22]);
	
	// Приложение 1.
	Если СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета >= '2016-01-01' Тогда
		ИмяСекцииКодаВидаПодакцизногоТовараПр1 = "КодВидаПодакцизногоТовараПр1_201601";
	ИначеЕсли СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета >= '2013-03-01' Тогда
		ИмяСекцииКодаВидаПодакцизногоТовараПр1 = "КодВидаПодакцизногоТовараПр1_201303";
	ИначеЕсли СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета >= '2012-07-01' Тогда
		ИмяСекцииКодаВидаПодакцизногоТовараПр1 = "КодВидаПодакцизногоТовараПр1_201207";
	Иначе
		ИмяСекцииКодаВидаПодакцизногоТовараПр1 = "КодВидаПодакцизногоТовараПр1";
	КонецЕсли;
	
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000900001000", 3, , "Выбор кода вида подакцизного товара", КоллекцияСписковВыбора[ИмяСекцииКодаВидаПодакцизногоТовараПр1]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000900002000", 3, , "Выбор единицы измерения", КоллекцияСписковВыбора["ОКЕИ"]);
	
	Если СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета >= '2015-01-01' Тогда
		ИмяСекцииКодаПоказателяП1 = "КодПоказателяП1_201501";
	Иначе
		ИмяСекцииКодаПоказателяП1 = "КодПоказателяП1";
	КонецЕсли;
	
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000900000001", 5, , "Выбор кода показателя", КоллекцияСписковВыбора[ИмяСекцииКодаПоказателяП1]);
	
	// Раздел 2.4.
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000240001001", 5, , "Выбор кода показателя", КоллекцияСписковВыбора["КодПоказателя24"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000240001004", 5, , "Выбор кода налогового периода", КоллекцияСписковВыбора["КодВидаПериода"]);
	
	// Приложение 2.
	Если СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета >= '2016-01-01' Тогда
		ИмяСекцииКодаВидаПодакцизногоТовараПр2Гр2 = "КодВидаПодакцизногоТовараПр2Гр2_201207";
		ИмяСекцииКодаВидаПодакцизногоТовараПр2Гр4 = "КодВидаПодакцизногоТовараПр2Гр4_201601";
	ИначеЕсли СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета >= '2013-03-01' Тогда
		ИмяСекцииКодаВидаПодакцизногоТовараПр2Гр2 = "КодВидаПодакцизногоТовараПр2Гр2_201207";
		ИмяСекцииКодаВидаПодакцизногоТовараПр2Гр4 = "КодВидаПодакцизногоТовараПр2Гр4_201303";
	ИначеЕсли СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета >= '2012-07-01' Тогда
		ИмяСекцииКодаВидаПодакцизногоТовараПр2Гр2 = "КодВидаПодакцизногоТовараПр2Гр2_201207";
		ИмяСекцииКодаВидаПодакцизногоТовараПр2Гр4 = "КодВидаПодакцизногоТовараПр2Гр4_201207";
	Иначе
		ИмяСекцииКодаВидаПодакцизногоТовараПр2Гр2 = "КодВидаПодакцизногоТовараПр2Гр2";
		ИмяСекцииКодаВидаПодакцизногоТовараПр2Гр4 = "КодВидаПодакцизногоТовараПр2Гр4";
	КонецЕсли;
	
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000910000001", 5, , "Выбор кода показателя", КоллекцияСписковВыбора["КодПоказателяП2"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000910000002", 3, , "Выбор кода вида подакцизного товара", КоллекцияСписковВыбора[ИмяСекцииКодаВидаПодакцизногоТовараПр2Гр2]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000910000004", 3, , "Выбор кода вида подакцизного товара", КоллекцияСписковВыбора[ИмяСекцииКодаВидаПодакцизногоТовараПр2Гр4]);
	
	// Приложение 3.
	Если СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета >= '2016-01-01' Тогда
		ИмяСекцииКодаВидаПодакцизногоТовараПр3Гр2 = "КодВидаПодакцизногоТовараПр3Гр2_201207";
		ИмяСекцииКодаВидаПодакцизногоТовараПр3Гр4 = "КодВидаПодакцизногоТовараПр3Гр4_201601";
	ИначеЕсли СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета >= '2013-03-01' Тогда
		ИмяСекцииКодаВидаПодакцизногоТовараПр3Гр2 = "КодВидаПодакцизногоТовараПр3Гр2_201207";
		ИмяСекцииКодаВидаПодакцизногоТовараПр3Гр4 = "КодВидаПодакцизногоТовараПр3Гр4_201303";
	ИначеЕсли СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета >= '2012-07-01' Тогда
		ИмяСекцииКодаВидаПодакцизногоТовараПр3Гр2 = "КодВидаПодакцизногоТовараПр3Гр2_201207";
		ИмяСекцииКодаВидаПодакцизногоТовараПр3Гр4 = "КодВидаПодакцизногоТовараПр3Гр4_201207";
	Иначе
		ИмяСекцииКодаВидаПодакцизногоТовараПр3Гр2 = "КодВидаПодакцизногоТовараПр3Гр2";
		ИмяСекцииКодаВидаПодакцизногоТовараПр3Гр4 = "КодВидаПодакцизногоТовараПр3Гр4";
	КонецЕсли;
	
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000920000001", 5, , "Выбор кода показателя", КоллекцияСписковВыбора["КодПоказателяПр3Гр2"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000920000002", 3, , "Выбор кода вида подакцизного товара", КоллекцияСписковВыбора[ИмяСекцииКодаВидаПодакцизногоТовараПр3Гр2]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000920000004", 3, , "Выбор кода вида подакцизного товара", КоллекцияСписковВыбора[ИмяСекцииКодаВидаПодакцизногоТовараПр3Гр4]);
	
	// Приложение 4.
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000930000001", 3, , "Выбор кода вида подакцизного товара", КоллекцияСписковВыбора["КодВидаПодакцизногоТовараПр45Гр1"]);

	// Приложение 5.
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000940000001", 3, , "Выбор кода вида подакцизного товара", КоллекцияСписковВыбора["КодВидаПодакцизногоТовараПр45Гр1"]);
	
	/////////////////////////////////////////////////////////////////////////////	
	
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000200003003", 3, , "Выбор единицы измерения", КоллекцияСписковВыбора["ОКЕИ"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000200010031", 20, , "Выбор кода основания налогообложения", КоллекцияСписковВыбора["КодыОснования"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000200010032", 20, , "Выбор кода основания налогообложения", КоллекцияСписковВыбора["КодыОснования"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000200010033", 20, , "Выбор кода основания налогообложения", КоллекцияСписковВыбора["КодыОснования"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000200010034", 20, , "Выбор кода основания налогообложения", КоллекцияСписковВыбора["КодыОснования"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000200010035", 20, , "Выбор кода основания налогообложения", КоллекцияСписковВыбора["КодыОснования"]);
	// Раздел 3.
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000320011000", 3, , "Выбор единицы измерения", КоллекцияСписковВыбора["ОКЕИ"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000320012001", 5, , "Выбор кода вида ПИ", КоллекцияСписковВыбора["ВидыПИ"]);
	// Раздел 4.
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000400001003", 20, , "Выбор КБК", КоллекцияСписковВыбора[ИмяКоллекцииВыбораКБК]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000400003003", 3, , "Выбор единицы измерения", КоллекцияСписковВыбора["ОКЕИ"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000410004002", 5, , "Выбор кода вида ПИ", КоллекцияСписковВыбора["ВидыПИ"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000410004003", 20, , "Выбор кода основания налогообложения", КоллекцияСписковВыбора["КодыОснованияПоНулевойСтавке"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000410004004", 20, , "Выбор кода основания налогообложения", КоллекцияСписковВыбора["КодыОснованияПоОбщейСтавке"]);
	
КонецПроцедуры

&НаКлиенте
Процедура ВвестиПоказатель(Элемент, Область, КодПоказателя, Знач ЭтоСумма, Знач ТекстВыбора, ТаблицаВыбора, СтандартнаяОбработка, КолонкаПоиска = "Код") Экспорт
	
	Если ТаблицаВыбора = Неопределено ИЛИ СтруктураРеквизитовФормы.мАвтоВыборКодов Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	//если показатель входит в состав многострочной части, тогда имя области не будет совпадать с переданным кодом показателя
	//необходимо это учесть
	//считаем, что в многострочной части не может быть показателя, состоящего из нескольких ячеек
	Если Область.Имя = КодПоказателя ИЛИ РегламентированнаяОтчетностьКлиентСервер.ПоказательВходитВМногострочнуюЧасть(ЭтаФорма, КодПоказателя) > 0 Тогда

		ИсходноеЗначение = ?(ТипЗнч(Область.Значение) = Тип("Строка"), СокрЛП(Область.Значение), Область.Значение);
	Иначе
		Разделитель = ?(Лев(Область.Имя, СтрДлина(КодПоказателя) + 1) = КодПоказателя + "_", "_", "");
		ИндексОбласти = 1;
		ИсходноеЗначение = "";
		Пока ЭтаФорма[ТекущийЭлемент.Имя].Области.Найти(КодПоказателя + Разделитель + Формат(ИндексОбласти, "ЧГ=")) <> Неопределено Цикл
			ИсходноеЗначение = ИсходноеЗначение + Строка(ЭтаФорма[ТекущийЭлемент.Имя].Области[КодПоказателя + Разделитель + Формат(ИндексОбласти, "ЧГ=")].Значение);
			ИндексОбласти = ИндексОбласти + 1;
		КонецЦикла;
		ИсходноеЗначение = СокрЛП(ИсходноеЗначение);
	КонецЕсли;
		
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Заголовок",          ТекстВыбора);
	ПараметрыФормы.Вставить("ТаблицаЗначений",    ТаблицаВыбора);
	ПараметрыФормы.Вставить("СтруктураДляПоиска", Новый Структура(КолонкаПоиска, ИсходноеЗначение));
	
	ДополнительныеПараметры = Новый Структура("ИндексОбласти, КодПоказателя, КолонкаПоиска, Область, Разделитель, Элемент", ИндексОбласти, КодПоказателя, КолонкаПоиска, Область, Разделитель, Элемент);
	ОписаниеОповещения = Новый ОписаниеОповещения("ВвестиПоказательЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ОткрытьФорму("Обработка.ОбщиеОбъектыРеглОтчетности.Форма.ФормаВыбораЗначенияИзТаблицы", ПараметрыФормы, ЭтаФорма,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ВвестиПоказательЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	ИндексОбласти = ДополнительныеПараметры.ИндексОбласти;
	КодПоказателя = ДополнительныеПараметры.КодПоказателя;
	КолонкаПоиска = ДополнительныеПараметры.КолонкаПоиска;
	Область = ДополнительныеПараметры.Область;
	Разделитель = ДополнительныеПараметры.Разделитель;
	Элемент = ДополнительныеПараметры.Элемент;
	
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	//если показатель входит в состав многострочной части, тогда имя области не будет совпадать с переданным кодом показателя
	//необходимо это учесть
	//считаем, что в многострочной части не может быть показателя, состоящего из нескольких ячеек
	Если Область.Имя = КодПоказателя ИЛИ РегламентированнаяОтчетностьКлиентСервер.ПоказательВходитВМногострочнуюЧасть(ЭтаФорма, КодПоказателя) > 0 Тогда
		Область.Значение = РезультатВыбора[КолонкаПоиска];
	Иначе
		СтрокаРезультатВыбора = Строка(РезультатВыбора[КолонкаПоиска]);
		Для Инд = СтрДлина(СтрокаРезультатВыбора) + 1 По ИндексОбласти - 1 Цикл
			СтрокаРезультатВыбора = " " + РезультатВыбора[КолонкаПоиска];
		КонецЦикла;
		Для Инд = 1 По ИндексОбласти - 1 Цикл
			ЭтаФорма[ТекущийЭлемент.Имя].Области[КодПоказателя + Разделитель + Формат(Инд, "ЧГ=")].Значение = СокрЛП(Сред(РезультатВыбора[КолонкаПоиска], Инд, 1));
		КонецЦикла;
	КонецЕсли;
	
	Модифицированность = Истина;
	
	ТабличныйДокументПриИзмененииСодержимогоОбласти(Элемент, Область);
	
КонецПроцедуры

&НаСервере
Процедура СообщитьВТС(Описание, Раздел, ИмяЯчейки, ФИО = "")
	
	РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, Описание, Раздел, ИмяЯчейки, ФИО);
	
КонецПроцедуры

&НаСервере
Функция РазделЗаполнен(ИсточникДанных, СписокИменПоказателей)
	
	ИменаПоказателей = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СписокИменПоказателей);
	
	РазделЗаполнен = Ложь;
	
	Для Каждого ИмяПоказателя Из ИменаПоказателей Цикл
		
		ИмяПоказателя = СокрЛП(ИмяПоказателя);
		
		Многострочный = (Прав(ИмяПоказателя, 1) = "*");
		
		НомерСтроки = 0;
		
		Пока Истина Цикл
			
			НомерСтроки = НомерСтроки + 1;
			Постфикс = Формат(НомерСтроки, "ЧГ=0");
			
			ИмяПроверки = СтрЗаменить(ИмяПоказателя, "*", Постфикс);
			
			Если Многострочный И НЕ РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(ИсточникДанных, ИмяПроверки) Тогда
				Прервать;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ИсточникДанных[ИмяПроверки]) Тогда
				РазделЗаполнен = Истина;
				Прервать;
			КонецЕсли;
			
			Если РазделЗаполнен Тогда
				Прервать;
			КонецЕсли;
			
			Если НЕ Многострочный Тогда
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		Если РазделЗаполнен Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат РазделЗаполнен;
	
КонецФункции

&НаСервере
Функция ЗаполненРаздел1_1(ИсточникДанных)
	
	СписокИменПоказателей = "П000110002020_*,П000110002030_*,П000110002040_*";
	
	Возврат РазделЗаполнен(ИсточникДанных, СписокИменПоказателей);
	
КонецФункции

&НаСервере
Функция ЗаполненРаздел1_2(ИсточникДанных)
	
	СписокИменПоказателей = "П000120002020_*,П000120002030_*,П000120002040_*";
	
	Возврат РазделЗаполнен(ИсточникДанных, СписокИменПоказателей);
	
КонецФункции

&НаСервере
Функция ЗаполненРаздел1_3(ИсточникДанных)
	
	СписокИменПоказателей = "П000130002020_*,П000130002030_*";
	
	Возврат РазделЗаполнен(ИсточникДанных, СписокИменПоказателей);
	
КонецФункции

&НаСервере
Процедура ЗаполнитьОКТМО(Знач ОКТМО)
				
	ПроставитьНаВсехЛистах(ЭтаФорма, ОКТМО);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПроставитьНаВсехЛистах(Форма, Знач ЗначениеПоказателя)
	
	ТипЗначенияПоказателя = ТипЗнч(ЗначениеПоказателя);
	
	Если ТипЗначенияПоказателя = Тип("Число") Тогда
		ЗначениеПоказателя = Формат(ЗначениеПоказателя, "ЧГ=");
	КонецЕсли;
		
	Для Каждого СтраницаРаздела Из Форма.ТаблицаСтраницыРаздел1 Цикл
			
		ДанныеСтраницы = СтраницаРаздела.Данные;
			
		Если ДанныеСтраницы = Неопределено Тогда
			Продолжить;
		КонецЕсли;
			
		ДанныеСтраницы[0].Значение.Вставить("П000110001003", ЗначениеПоказателя);
		
	КонецЦикла;
	
	Для Каждого СтраницаРаздела Из Форма.ТаблицаСтраницыРаздел12 Цикл
			
		ДанныеСтраницы = СтраницаРаздела.Данные;
			
		Если ДанныеСтраницы = Неопределено Тогда
			Продолжить;
		КонецЕсли;
			
		ДанныеСтраницы[0].Значение.Вставить("П000120001003", ЗначениеПоказателя);
		
	КонецЦикла;
	
	Для Каждого СтраницаРаздела Из Форма.ТаблицаСтраницыРаздел13 Цикл
			
		ДанныеСтраницы = СтраницаРаздела.Данные;
			
		Если ДанныеСтраницы = Неопределено Тогда
			Продолжить;
		КонецЕсли;
			
		ДанныеСтраницы[0].Значение.Вставить("П000130001003", ЗначениеПоказателя);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ИзвлечьСтруктуруXML()
	
	ДеревоСтруктуры = Новый ДеревоЗначений;
	ДеревоСтруктуры.Колонки.Добавить("Код");
	ДеревоСтруктуры.Колонки.Добавить("Тип");
	ДеревоСтруктуры.Колонки.Добавить("Формат");
	ДеревоСтруктуры.Колонки.Добавить("МинРазмерность");
	ДеревоСтруктуры.Колонки.Добавить("МаксРазмерность");
	ДеревоСтруктуры.Колонки.Добавить("Обязательность");
	ДеревоСтруктуры.Колонки.Добавить("Многостраничность");
	ДеревоСтруктуры.Колонки.Добавить("Многострочность");
	ДеревоСтруктуры.Колонки.Добавить("Раздел");
	ДеревоСтруктуры.Колонки.Добавить("Ключ");
	ДеревоСтруктуры.Колонки.Добавить("Условие");
	ДеревоСтруктуры.Колонки.Добавить("ЗначениеПоУмолчанию");
	ДеревоСтруктуры.Колонки.Добавить("Значение");
	ДеревоСтруктуры.Колонки.Добавить("Представление");
	ДеревоСтруктуры.Колонки.Добавить("Показатели");
	
	Макет = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет("СхемаВыгрузки502");

	ВысотаТаблицы = Макет.ВысотаТаблицы;
	
	УчтенныеГруппы = Новый Соответствие;
	
	Для Уровень = 0 По Макет.КоличествоУровнейГруппировокСтрок() - 1 Цикл
		Макет.ПоказатьУровеньГруппировокСтрок(Уровень);
		Для НомерСтроки = 2 По ВысотаТаблицы Цикл
			НомСтр = ВысотаТаблицы - НомерСтроки + 2;
			Если Макет.Область(НомСтр, 0, НомСтр, 0).Видимость И УчтенныеГруппы.Получить(НомСтр) = Неопределено Тогда
				
				РодительскийУзел = ДеревоСтруктуры;
				Если Уровень <> 0 Тогда
					Для Инд = 1 По НомСтр - 2 Цикл
						Узел = УчтенныеГруппы.Получить(НомСтр - Инд);
						Если Узел <> Неопределено Тогда
							РодительскийУзел = Узел;
							Прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				НовСтр = РодительскийУзел.Строки.Вставить(0);
				НовСтр.Код = СокрЛП(Макет.Область(НомСтр, 1, НомСтр, 1).Текст);
				НовСтр.Раздел = СокрЛП(Макет.Область(НомСтр, 2, НомСтр, 2).Текст);
				НовСтр.Ключ = СокрЛП(Макет.Область(НомСтр, 3, НомСтр, 3).Текст);
				НовСтр.Тип = СокрЛП(Макет.Область(НомСтр, 4, НомСтр, 4).Текст);
				НовСтр.Формат = СокрЛП(Макет.Область(НомСтр, 5, НомСтр, 5).Текст);
				МинРазмерность = СокрЛП(Макет.Область(НомСтр, 6, НомСтр, 6).Текст);
				НовСтр.МинРазмерность = ?(ПустаяСтрока(МинРазмерность), ?(НовСтр.Формат = "N", 99999, 0), Число(МинРазмерность));
				МаксРазмерность = СокрЛП(Макет.Область(НомСтр, 7, НомСтр, 7).Текст);
				НовСтр.МаксРазмерность = ?(ПустаяСтрока(МаксРазмерность), 99999, Число(МаксРазмерность));
				НовСтр.Обязательность = СокрЛП(Макет.Область(НомСтр, 8, НомСтр, 8).Текст);
				НовСтр.Многостраничность = НЕ ПустаяСтрока(Макет.Область(НомСтр, 9, НомСтр, 9).Текст);
				НовСтр.Многострочность = НЕ ПустаяСтрока(Макет.Область(НомСтр, 10, НомСтр, 10).Текст);
				НовСтр.Условие = СокрЛП(Макет.Область(НомСтр, 11, НомСтр, 11).Текст);
				НовСтр.ЗначениеПоУмолчанию = СокрЛП(Макет.Область(НомСтр, 12, НомСтр, 12).Текст);
				НовСтр.Представление = СокрЛП(Макет.Область(НомСтр, 13, НомСтр, 13).Текст);
				
				УчтенныеГруппы.Вставить(НомСтр, НовСтр);
				
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат ДеревоСтруктуры;
	
КонецФункции

&НаСервере
Функция ПроверитьПоказатели() Экспорт
	
	СформироватьСтруктуруПоказателей();
	ДеревоВыгрузки = ИзвлечьСтруктуруXML();
	ПараметрыВыгрузки = СформироватьСтруктуруПараметров();
	Если НЕ ПроверитьВозможностьВыгрузки(ПараметрыВыгрузки, ДеревоВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	ЗаполнитьДанными(ДеревоВыгрузки, ПараметрыВыгрузки);
	Если НЕ ПроверитьДанные(ДеревоВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция СформироватьСтруктуруПоказателей()
	
	мДанныеОтчета = Новый Структура;
	
	СохрСтруктура = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить();
	ПоказателиОтчета = СохрСтруктура.ПоказателиОтчета;
	Для Каждого Раздел Из ПоказателиОтчета Цикл
		мДанныеОтчета.Вставить(СтрЗаменить(Раздел.Ключ, "ПолеТабличногоДокумента", ""), РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(Раздел.Значение));
	КонецЦикла;
	
	ТекущийРаздел = Неопределено;
	Если мСтруктураМногостраничныхРазделов.Свойство(СтруктураРеквизитовФормы.НаимТекущегоРаздела, ТекущийРаздел) Тогда
		АктивнаяСтраница = ЭтаФорма[ТекущийРаздел].НайтиСтроки(Новый Структура("АктивнаяСтраница", Истина));
		Если АктивнаяСтраница.Количество() > 0 Тогда
			АктивнаяСтраница = АктивнаяСтраница[0];
			ИндексАктивнойСтраницы = ЭтаФорма[ТекущийРаздел].Индекс(АктивнаяСтраница);
		КонецЕсли;
	КонецЕсли;
	
	Для Каждого ЭлементСтруктуры Из СохрСтруктура.ДанныеМногостраничныхРазделов Цикл	
		
		НайденноеЗначение = Неопределено;
		
		мСтруктураМногостраничныхРазделов.Свойство(ЭлементСтруктуры.Ключ, НайденноеЗначение);
		
		Если НЕ НайденноеЗначение = Неопределено Тогда
			
			НайденноеЗначение = ЭтаФорма[НайденноеЗначение];
			
			ЗначениеВДанныеФормы(ЭлементСтруктуры.Значение, НайденноеЗначение);
			
			Если НайденноеЗначение[0].Свойство("Данные") Тогда
				
				Для Каждого СтрокаТаблЗнач Из НайденноеЗначение Цикл
					
					Если ТипЗнч(СтрокаТаблЗнач.Данные) = Тип("СписокЗначений") Тогда
						
						СтрокаТаблЗнач.Данные.Очистить();
						СтрокаТаблЗнач.Данные.Добавить(ЭлементСтруктуры.Значение[НайденноеЗначение.Индекс(СтрокаТаблЗнач)].Данные);
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
			Если НайденноеЗначение[0].Свойство("ДанныеДопСтрок") Тогда
				
				Ном = 0;
				
				Для Каждого СтрокаТаблЗнач Из ЭлементСтруктуры.Значение Цикл
					
					Если ТипЗнч(СтрокаТаблЗнач.ДанныеДопСтрок) = Тип("Структура") Тогда
						
						Для Каждого ЭлСтруктуры Из СтрокаТаблЗнач.ДанныеДопСтрок Цикл
							
							ТаблЗнач = ЭлСтруктуры.Значение;
							
							ЭлСтруктуры.Значение = ЭтаФорма["Хранилище" + ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ЭлементСтруктуры.Ключ)].Добавить().Таблица;
							
							ЗначениеВДанныеФормы(ТаблЗнач, ЭлСтруктуры.Значение);
							
							НайденноеЗначение[Ном].ДанныеДопСтрок.Добавить(ЭлСтруктуры.Значение);
							
						КонецЦикла;
						
					ИначеЕсли ТипЗнч(СтрокаТаблЗнач.ДанныеДопСтрок) = Тип("ТаблицаЗначений") Тогда
						
						СтрокаТаблЗначДанныеДопСтрок = ЭтаФорма["Хранилище" + ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ЭлементСтруктуры.Ключ)].Добавить().Таблица;
						
						ЗначениеВДанныеФормы(СтрокаТаблЗнач.ДанныеДопСтрок, СтрокаТаблЗначДанныеДопСтрок);
						
						НайденноеЗначение[Ном].ДанныеДопСтрок.Добавить(СтрокаТаблЗначДанныеДопСтрок, "ДанныеФормыКоллекцияТаблицаДопСтрокРаздела");
						
					КонецЕсли;
					
					Ном = Ном + 1;
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого Раздел Из мСтруктураМногостраничныхРазделов Цикл
		Для Каждого Страница Из ЭтаФорма[Раздел.Значение] Цикл
			Страница.АктивнаяСтраница = Ложь;
		КонецЦикла;
	КонецЦикла;

	ТекущийРаздел = Неопределено;
	Если мСтруктураМногостраничныхРазделов.Свойство(СтруктураРеквизитовФормы.НаимТекущегоРаздела, ТекущийРаздел) Тогда
		Если ИндексАктивнойСтраницы <> Неопределено Тогда
			ЭтаФорма[ТекущийРаздел][ИндексАктивнойСтраницы].АктивнаяСтраница = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Для Каждого Раздел Из мСтруктураМногостраничныхРазделов Цикл
		ТаблицаЛистовРаздела = ЭтаФорма[Раздел.Значение];
		Для Каждого Лист Из ТаблицаЛистовРаздела Цикл
			Лист.Данные[0].Значение = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(Лист.Данные[0].Значение);
		КонецЦикла;
		мДанныеОтчета.Вставить(Раздел.Ключ, ЭтаФорма[Раздел.Значение]);
	КонецЦикла;
	
КонецФункции

&НаСервере
Функция СформироватьСтруктуруПараметров()
	
	Титульный = мДанныеОтчета.Титульный;
	
	ПараметрыВыгрузки = Новый Структура;
	ПараметрыВыгрузки.Вставить("ВерсПрог",		РегламентированнаяОтчетность.НазваниеИВерсияПрограммы());
	ПараметрыВыгрузки.Вставить("КНД",			"1151084");
	ПараметрыВыгрузки.Вставить("ВерсФорм",		"5.01");
	ПараметрыВыгрузки.Вставить("ДатаДок",		Формат(ТекущаяДатаСеанса(), "ДФ=дд.ММ.гггг"));
	ПараметрыВыгрузки.Вставить("Период",		Титульный.Период);
	ПараметрыВыгрузки.Вставить("ОтчетГод",		Формат(СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания, "ДФ=гггг"));
	ПараметрыВыгрузки.Вставить("КодНо",			СокрЛП(Титульный.КодИМНС));
	ПараметрыВыгрузки.Вставить("НомКорр",		?(НомерКорректировки <> 0, Строка(НомерКорректировки), "0"));
	ПараметрыВыгрузки.Вставить("ПоМесту",		СокрЛП(Титульный.ПоМесту));
	ПараметрыВыгрузки.Вставить("ОКВЭД",			СтрЗаменить(СокрЛП(СтрЗаменить(Титульный.ОКВЭД, ".", " ")), " ", "."));
	ПараметрыВыгрузки.Вставить("НалСвид",		СокрЛП(Титульный.КодНаличияСвидетельства1));
	ПараметрыВыгрузки.Вставить("Тлф",			СокрЛП(Титульный.ТелОрганизации));
	ПараметрыВыгрузки.Вставить("КодИФНСПосредника", ?(СтруктураРеквизитовФормы.Организация.КрупнейшийНалогоплательщик,
		СокрЛП(СтруктураРеквизитовФормы.Организация.КодНалоговогоОрганаПолучателя), ""));

	
	ПараметрыВыгрузки.Вставить("НаимОрг",    СокрЛП(Титульный.НаимОрг));
	ПараметрыВыгрузки.Вставить("ИННЮЛ",      СокрЛП(СтруктураРеквизитовФормы.Организация.ИНН));
	ПараметрыВыгрузки.Вставить("КПП",        СокрЛП(Титульный.КПП1));
	
	ПараметрыВыгрузки.Вставить("ЭтоПБОЮЛ",   НЕ РегламентированнаяОтчетностьВызовСервера.ЭтоЮридическоеЛицо(СтруктураРеквизитовФормы.Организация));
	
	ПараметрыВыгрузки.Вставить("ФормРеорг",  СокрЛП(Титульный.КодФормыОрг));
	ПараметрыВыгрузки.Вставить("ИННЮЛРеорг", СокрЛП(Титульный.ИНН_Реорг));
	ПараметрыВыгрузки.Вставить("КППРеорг",   СокрЛП(Титульный.КПП_Реорг));
	
	ФИОИП = РегламентированнаяОтчетность.РазложитьФИО(Титульный.НаимОрг);
	ПараметрыВыгрузки.Вставить("ФамилияИП",	 ФИОИП.Фамилия);
	ПараметрыВыгрузки.Вставить("ИмяИП",	     ФИОИП.Имя);
	ПараметрыВыгрузки.Вставить("ОтчествоИП", ФИОИП.Отчество);
	ПараметрыВыгрузки.Вставить("ИННФЛ",      СокрЛП(СтруктураРеквизитовФормы.Организация.ИНН));
	
	ПараметрыВыгрузки.Вставить("ПрПодп",     СокрЛП(Титульный.ПрПодп));
	
	ФИОПодписанта = РегламентированнаяОтчетность.РазложитьФИО(Титульный.ОргПодписант);
	ПараметрыВыгрузки.Вставить("ФамилияПодп", ФИОПодписанта.Фамилия);
	ПараметрыВыгрузки.Вставить("ИмяПодп",	  ФИОПодписанта.Имя);
	ПараметрыВыгрузки.Вставить("ОтчествоПодп",ФИОПодписанта.Отчество);

	ПараметрыВыгрузки.Вставить("НаимДок", Титульный.ДокУпПред);
	ПараметрыВыгрузки.Вставить("НаимОргПредст", Титульный.ОргУп);
	
	
	
	ПараметрыВыгрузки.Вставить("ИмяФайлаСхемы", "NO_AKCIZ_1_506_00_05_01.xsd");
	ПараметрыВыгрузки.Вставить("ПрефиксИмениФайлаВыгрузки", "NO_AKCIZ");
	
	ПараметрыВыгрузки.Вставить("ИмяКлючевогоУзлаСодержательнойЧасти", "Акциз");
	
	ПараметрыВыгрузки.Вставить("ИдФайл", СформироватьИдФайл(ПараметрыВыгрузки));
	
	
	Возврат ПараметрыВыгрузки;
	
КонецФункции

&НаСервере
Функция СформироватьИдФайл(ПараметрыВыгрузки)
	
	Возврат ПараметрыВыгрузки.ПрефиксИмениФайлаВыгрузки
			+ "_" + ?(ЗначениеЗаполнено(ПараметрыВыгрузки.КодИФНСПосредника), ПараметрыВыгрузки.КодИФНСПосредника, ПараметрыВыгрузки.КодНо)
			+ "_" + ПараметрыВыгрузки.КодНо
			+ "_" + ?(ПараметрыВыгрузки.Свойство("ЭтоПБОЮЛ") И ПараметрыВыгрузки.ЭтоПБОЮЛ, СокрЛП(ПараметрыВыгрузки.ИННЮЛ), СокрЛП(ПараметрыВыгрузки.ИННЮЛ) + СокрЛП(ПараметрыВыгрузки.КПП))
			+ "_" + Формат(ТекущаяДатаСеанса(), "ДФ=ггггММдд")
			+ "_" + Строка(Новый УникальныйИдентификатор);
	
КонецФункции

&НаСервере
Функция ПроверитьВозможностьВыгрузки(ПараметрыВыгрузки, ДеревоВыгрузки)
	
	СтатусПроверки = Истина;
	
	ВозможныеКодыПоМесту = Новый Массив;
	ВозможныеКодыПоМесту.Добавить("120");
	ВозможныеКодыПоМесту.Добавить("213");
	ВозможныеКодыПоМесту.Добавить("214");
	ВозможныеКодыПоМесту.Добавить("215");
	ВозможныеКодыПоМесту.Добавить("216");
	ВозможныеКодыПоМесту.Добавить("331");
	ВозможныеКодыПоМесту.Добавить("220");
	
	ВозможныеКодыПериода = "01|02|03|04|05|06|07|08|09|10|11|12|50|71|72|73|74|75|76|77|78|79|80|81|82";
	ВозможныеКодыФормыРеорганизции = "0|1|2|3|5|6";
	
	ВозможныеКодыНалСвидC2016 = Новый Массив;
	ВозможныеКодыНалСвидC2016.Добавить("1");
	ВозможныеКодыНалСвидC2016.Добавить("2");
	ВозможныеКодыНалСвидC2016.Добавить("3");
	ВозможныеКодыНалСвидC2016.Добавить("4");
	ВозможныеКодыНалСвидC2016.Добавить("5");
	ВозможныеКодыНалСвидC2016.Добавить("6");
	ВозможныеКодыНалСвидC2016.Добавить("7");
	ВозможныеКодыНалСвидC2016.Добавить("8");
	ВозможныеКодыНалСвидC2016.Добавить("9");
	ВозможныеКодыНалСвидC2016.Добавить("A");
	ВозможныеКодыНалСвидC2016.Добавить("B");
	ВозможныеКодыНалСвидC2016.Добавить("C");
	ВозможныеКодыНалСвидC2016.Добавить("D");
	ВозможныеКодыНалСвидC2016.Добавить("F");
	
	// проверка показателей титульного листа
	Если ПустаяСтрока(ПараметрыВыгрузки.Период) Тогда
		СообщитьВТС("Не задан налоговый период.", "Титульный", "Период1");
		СтатусПроверки = Ложь;
	ИначеЕсли СтрНайти(ВозможныеКодыПериода, ПараметрыВыгрузки.Период) = 0 Тогда
		СообщитьВТС("На титульном листе задано некорректное значение кода налогового периода.",
		"Титульный", "Период1");
		СтатусПроверки = Ложь;
	КонецЕсли;
	Если ПустаяСтрока(ПараметрыВыгрузки.ОтчетГод) Тогда
		СообщитьВТС("Не задан отчетный год.", "Титульный", "ОтчетГод1");
		СтатусПроверки = Ложь;
	КонецЕсли;
	Если ПустаяСтрока(ПараметрыВыгрузки.КодНо) Тогда
		СообщитьВТС("Не указан код налогового органа.", "Титульный", "КодИМНС1");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ПустаяСтрока(ПараметрыВыгрузки.ПоМесту) Тогда
		СообщитьВТС("Не задан код места нахождения (учета).", "Титульный", "ПоМесту1");
		СтатусПроверки = Ложь;
	ИначеЕсли ВозможныеКодыПоМесту.Найти(ПараметрыВыгрузки.ПоМесту) = Неопределено Тогда
		СообщитьВТС("На титульном листе задан некорректный код места нахождения (учета).",
		"Титульный", "ПоМесту");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ПустаяСтрока(ПараметрыВыгрузки.ОКВЭД) Тогда
		СообщитьВТС("На титульном листе не задан код ОКВЭД.", "Титульный", "ОКВЭД");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ПустаяСтрока(ПараметрыВыгрузки.НалСвид) Тогда
		СообщитьВТС("На титульном листе не задан код наличия свидетельства у налогоплательщика.",
		"Титульный", "КодНаличияСвидетельства1");
		СтатусПроверки = Ложь;
	Иначе
		Если СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета >= '2016-01-01' Тогда
			Если ВозможныеКодыНалСвидC2016.Найти(ПараметрыВыгрузки.НалСвид) = Неопределено Тогда
				СообщитьВТС("На титульном листе задан некорректный код наличия свидетельства у налогоплательщика.",
				"Титульный", "КодНаличияСвидетельства1");
				СтатусПроверки = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ПараметрыВыгрузки.ЭтоПБОЮЛ тогда
		
		Если ПустаяСтрока(ПараметрыВыгрузки.ФамилияИП) Тогда
			СообщитьВТС("На титульном листе не заполнено или некорректно указано наименование налогоплательщика.",
			"Титульный", "НаимОрг");
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		Если ПустаяСтрока(ПараметрыВыгрузки.ИмяИП) Тогда
			СообщитьВТС("На титульном листе не заполнено или некорректно указано наименование налогоплательщика.",
			"Титульный", "НаимОрг");
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		Если ПустаяСтрока(ПараметрыВыгрузки.ИННФЛ) Тогда
			СообщитьВТС("Не заполнен ИНН налогоплательщика.", "Титульный", "ИНН1");
			СтатусПроверки = Ложь;
		КонецЕсли;
		
	Иначе //юр. лицо
		
		Если ПустаяСтрока(ПараметрыВыгрузки.НаимОрг) Тогда
			СообщитьВТС("На титульном листе не задано наименование организации-налогоплательщика.",
			"Титульный", "НаимОрг");
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		Если ПустаяСтрока(ПараметрыВыгрузки.ИННЮЛ) Тогда
			СообщитьВТС("На титульном листе не задан ИНН налогоплательщика.", "Титульный", "ИНН1");
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		Если ПустаяСтрока(ПараметрыВыгрузки.КПП) Тогда
			СообщитьВТС("Не заполнен КПП налогоплательщика.", "Титульный", "КПП1");
			СтатусПроверки = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если ПараметрыВыгрузки.ПрПодп = "2" И ПустаяСтрока(ПараметрыВыгрузки.НаимДок) Тогда
		СообщитьВТС("Не задано наименование документа, удостоверяющего полномочия представителя.",
		"Титульный", "ДокУпПред");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	// проверяем параметры реорганизации
	Если ЗначениеЗаполнено(ПараметрыВыгрузки.ИННЮЛРеорг)
		ИЛИ ЗначениеЗаполнено(ПараметрыВыгрузки.КППРеорг)
		ИЛИ ЗначениеЗаполнено(ПараметрыВыгрузки.ФормРеорг) Тогда
		
		Если ПустаяСтрока(ПараметрыВыгрузки.ФормРеорг) Тогда
			СообщитьВТС("Не задан код формы реорганизации.", "Титульный", "КодФормыОрг");
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(ПараметрыВыгрузки.ФормРеорг) И ПараметрыВыгрузки.ФормРеорг <> "0" Тогда
			
			ДлинаИННРеорг = СтрДлина(ПараметрыВыгрузки.ИННЮЛРеорг);
			Если ДлинаИННРеорг <> 10 Тогда
				СообщитьВТС("Не" + ?(ДлинаИННРеорг = 0, "", "верно")
				+ " задан ИНН реорганизованной организации.", "Титульный", "ИНН_Реорг");
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			ДлинаКППРеорг = СтрДлина(ПараметрыВыгрузки.КППРеорг);
			Если ДлинаКППРеорг <> 9 Тогда
				СообщитьВТС("Не" + ?(ДлинаКППРеорг = 0, "", "верно")
				+ " задан КПП реорганизованной организации.", "Титульный", "КПП_Реорг");
				СтатусПроверки = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// Раздел 1.1.
	
	ЗаполненХотяБыОдинЭкземплярРаздела1 = Ложь;
	Раздел1 = мДанныеОтчета.Раздел1;
	Для Каждого Стр Из Раздел1 Цикл
		
		НомерСтраницы = Раздел1.Индекс(Стр) + 1;
		ДанныеСтраницы = Стр.Данные[0].Значение;
		
		Если НЕ ЗаполненРаздел1_1(ДанныеСтраницы) Тогда
			Продолжить;
		КонецЕсли;
		
		ЗаполненХотяБыОдинЭкземплярРаздела1 = Истина;
		
		// проверяем шапку экземпляра раздела
		
		КодОКТМОРаздел1 = СокрЛП(ДанныеСтраницы["П000110001003"]);
		КодОКТМОРаздел1 = СтрДлина(КодОКТМОРаздел1);
		Если КодОКТМОРаздел1 <> 11 И КодОКТМОРаздел1 <> 8 Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "В разделе 1.1 на странице "
			+ НомерСтраницы + " не" + ?(КодОКТМОРаздел1  = 0, "", "верно") + " задан код ОКТМО.",
			"Раздел1", "П000110001003", НомерСтраницы);
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		// проверяем табличную часть экземпляра раздела
		ЗаполненаХотяБыОднастрокаТаблЧастиРаздела1 = Ложь;
		НомерСтроки = 1;
		Пока ДанныеСтраницы.Свойство("П000110002020_" + Формат(НомерСтроки, "ЧГ=")) Цикл
			
			КБКРаздел1МнчКод = "П000110002020_" + Формат(НомерСтроки, "ЧГ=");
			СуммаКУплатеРаздел1МнчКод = "П000110002030_" + Формат(НомерСтроки, "ЧГ=");
			СуммаКУменьшениюРаздел1МнчКод = "П000110002040_" + Формат(НомерСтроки, "ЧГ=");
			
			КБКРаздел1МнчКод = СокрЛП(ДанныеСтраницы[КБКРаздел1МнчКод]);
			СуммаКУплатеРаздел1МнчКод = СокрЛП(ДанныеСтраницы[СуммаКУплатеРаздел1МнчКод]);
			СуммаКУменьшениюРаздел1МнчКод = СокрЛП(ДанныеСтраницы[СуммаКУменьшениюРаздел1МнчКод]);
			
			// проверяем только заполненные строки
			Если НЕ ЗначениеЗаполнено(КБКРаздел1МнчКод)
				И  СуммаКУплатеРаздел1МнчКод = "0"
				И  СуммаКУменьшениюРаздел1МнчКод = "0" Тогда
				НомерСтроки = НомерСтроки + 1;
				Продолжить;
			КонецЕсли;
			
			ЗаполненаХотяБыОднастрокаТаблЧастиРаздела1 = Истина;
			
			//должна быть заполнена только одна из этих сумм
			Если СуммаКУплатеРаздел1МнчКод <> "0" И СуммаКУменьшениюРаздел1МнчКод <> "0" Тогда
				СообщитьВТС("В разделе 1 на странице " + НомерСтраницы + " в строке " + НомерСтроки
				+ " должно быть указано только одно значение суммы акциза из двух.", "Раздел1",
				"П000110002030_"+НомерСтроки, НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			КБКРаздел1МнчКод = СтрДлина(КБКРаздел1МнчКод);
			Если КБКРаздел1МнчКод <> 20 Тогда
				СообщитьВТС("В разделе 1 на странице " + НомерСтраницы + " в строке " + НомерСтроки
				+ " не" + ?(КБКРаздел1МнчКод = 0, "", "верно") + " задан код КБК.", "Раздел1",
				"П000110002020_"+НомерСтроки, НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			НомерСтроки = НомерСтроки + 1;
			
		КонецЦикла;
		
		Если НЕ ЗаполненаХотяБыОднастрокаТаблЧастиРаздела1 Тогда
			СообщитьВТС("В разделе 1.1 на странице " + НомерСтраницы
			+ " не заполнена ни одна строка табличной части.", "Раздел1", "П000110002020_1", НомерСтраницы);
			СтатусПроверки = Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	// Раздел 1.2.
	
	ЗаполненХотяБыОдинЭкземплярРаздела12 = Ложь;
	Раздел12 = мДанныеОтчета.Раздел12;
	Для Каждого Стр Из Раздел12 Цикл
		
		НомерСтраницы = Раздел12.Индекс(Стр) + 1;
		ДанныеСтраницы = Стр.Данные[0].Значение;
		
		Если НЕ ЗаполненРаздел1_2(ДанныеСтраницы) Тогда
			Продолжить;
		КонецЕсли;
		
		ЗаполненХотяБыОдинЭкземплярРаздела12 = Истина;
		
		// проверяем шапку экземпляра раздела
		КодОКТМОРаздел12 = СокрЛП(ДанныеСтраницы["П000120001003"]);
		КодОКТМОРаздел12 = СтрДлина(КодОКТМОРаздел12);
		Если КодОКТМОРаздел12 <> 11 И КодОКТМОРаздел12 <> 8 Тогда
			СообщитьВТС("В разделе 1.2 на странице " + НомерСтраницы + " не" + ?(КодОКТМОРаздел12 = 0,
			"", "верно") + " задан код ОКТМО.", "Раздел12", "П000120001003", НомерСтраницы);
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		// проверяем табличную часть экземпляра раздела
		ЗаполненаХотяБыОднастрокаТаблЧастиРаздела12 = Ложь;
		НомерСтроки = 1;
		Пока ДанныеСтраницы.Свойство("П000120002020_" + Формат(НомерСтроки, "ЧГ=")) Цикл
			
			КБКРаздел12МнчКод = "П000120002020_" + Формат(НомерСтроки, "ЧГ=");
			СуммаКУплатеРаздел12МнчКод = "П000120002030_" + Формат(НомерСтроки, "ЧГ=");
			СуммаКУменьшениюРаздел12МнчКод = "П000120002040_" + Формат(НомерСтроки, "ЧГ=");
			
			КБКРаздел12МнчКод = СокрЛП(ДанныеСтраницы[КБКРаздел12МнчКод]);
			СуммаКУплатеРаздел12МнчКод = СокрЛП(ДанныеСтраницы[СуммаКУплатеРаздел12МнчКод]);
			СуммаКУменьшениюРаздел12МнчКод = СокрЛП(ДанныеСтраницы[СуммаКУменьшениюРаздел12МнчКод]);
			
			// проверяем только заполненные строки
			Если НЕ ЗначениеЗаполнено(КБКРаздел12МнчКод)
				И СуммаКУплатеРаздел12МнчКод = "0"
				И СуммаКУменьшениюРаздел12МнчКод = "0" Тогда
				НомерСтроки = НомерСтроки + 1;
				Продолжить;
			КонецЕсли;
			
			ЗаполненаХотяБыОднастрокаТаблЧастиРаздела12 = Истина;
			
			//должна быть заполнена только одна из этих сумм
			Если СуммаКУплатеРаздел12МнчКод <> "0" И СуммаКУменьшениюРаздел12МнчКод <> "0" Тогда
				СообщитьВТС("В разделе 1.2 на странице " + НомерСтраницы + " в строке " + НомерСтроки
				+ " должно быть указано только одно значение суммы акциза из двух.", "Раздел12",
				"П000120002030_" + НомерСтроки, НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			КБКРаздел12МнчКод = СтрДлина(КБКРаздел12МнчКод);
			Если КБКРаздел12МнчКод <> 20 Тогда
				СообщитьВТС("В разделе 1.2 на странице " + НомерСтраницы + " в строке " + НомерСтроки
				+ " не" + ?(КБКРаздел12МнчКод = 0, "", "верно") + " задан код КБК.", "Раздел12",
				"П000120002020_" + НомерСтроки, НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			НомерСтроки = НомерСтроки + 1;
	
		КонецЦикла;
		
		Если НЕ ЗаполненаХотяБыОднастрокаТаблЧастиРаздела12 Тогда
			СообщитьВТС("В разделе 1.2 на странице " + НомерСтраницы
			+ " не заполнена ни одна строка табличной части.", "Раздел12", "П000120002020_1", НомерСтраницы);
			СтатусПроверки = Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	// Раздел 1.3.
	
	ЗаполненХотяБыОдинЭкземплярРаздела13 = Ложь;
	Раздел13 = мДанныеОтчета.Раздел13;
	Для Каждого Стр Из Раздел13 Цикл
		
		НомерСтраницы = Раздел13.Индекс(Стр) + 1;
		ДанныеСтраницы = Стр.Данные[0].Значение;
		
		Если НЕ ЗаполненРаздел1_3(ДанныеСтраницы) Тогда
			Продолжить;
		КонецЕсли;
		
		ЗаполненХотяБыОдинЭкземплярРаздела13 = Истина;
		
		// проверяем шапку экземпляра раздела
		КодОКТМОРаздел13 = СокрЛП(ДанныеСтраницы["П000130001003"]);
		КодОКТМОРаздел13 = СтрДлина(КодОКТМОРаздел13);
		Если КодОКТМОРаздел13 <> 11 И КодОКТМОРаздел13 <> 8 Тогда
			СообщитьВТС("В разделе 1.3 на странице " + НомерСтраницы + " не" + ?(КодОКТМОРаздел13 = 0,
			"", "верно") + " задан код ОКТМО.", "Раздел13", "П000130001003", НомерСтраницы);
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		// проверяем табличную часть экземпляра раздела
		ЗаполненаХотяБыОднастрокаТаблЧастиРаздела13 = Ложь;
		НомерСтроки = 1;
		Пока ДанныеСтраницы.Свойство("П000130002020_" + Формат(НомерСтроки, "ЧГ=")) Цикл
			
			КБКРаздел13МнчКод = "П000130002020_" + Формат(НомерСтроки, "ЧГ=");
			СуммаКУплатеРаздел13МнчКод = "П000130002030_" + Формат(НомерСтроки, "ЧГ=");
			
			КБКРаздел13МнчКод = СокрЛП(ДанныеСтраницы[КБКРаздел13МнчКод]);
			СуммаКУплатеРаздел13МнчКод = СокрЛП(ДанныеСтраницы[СуммаКУплатеРаздел13МнчКод]);
			
			// проверяем только заполненные строки
			Если НЕ ЗначениеЗаполнено(КБКРаздел13МнчКод)
				И СуммаКУплатеРаздел13МнчКод = "0"  Тогда 
				НомерСтроки = НомерСтроки + 1;
				Продолжить;
			КонецЕсли;
			
			ЗаполненаХотяБыОднастрокаТаблЧастиРаздела13 = Истина;
			
			КБКРаздел13МнчКод = СтрДлина(КБКРаздел13МнчКод);
			Если КБКРаздел13МнчКод <> 20 Тогда
				СообщитьВТС("В разделе 1.3 на странице " + НомерСтраницы + " в строке " + НомерСтроки
				+ " не" + ?(КБКРаздел13МнчКод = 0, "", "верно") + " задан код КБК.", "Раздел13",
				"П000130002020_"+НомерСтроки, НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			НомерСтроки = НомерСтроки + 1;
			
		КонецЦикла;
		
		Если НЕ ЗаполненаХотяБыОднастрокаТаблЧастиРаздела13 Тогда
			СообщитьВТС("В разделе 1.3 на странице " + НомерСтраницы
			+ " не заполнена ни одна строка табличной части.", "Раздел13", "П000130002020_1", НомерСтраницы);
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		//раздел 1 обязателен к заполнению
	КонецЦикла;
	Если НЕ ЗаполненХотяБыОдинЭкземплярРаздела1
		И НЕ ЗаполненХотяБыОдинЭкземплярРаздела12
		И Не ЗаполненХотяБыОдинЭкземплярРаздела13 Тогда
		СообщитьВТС("Раздел 1 обязателен к заполнению. Нужно заполнить хотя бы один из его подразделов.",
		"Раздел1", "П000110001003");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	// проверка раздела 2.1 - 2.3
	РезультатОбработки = Неопределено;
	Если СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета >= '2016-01-01'
		И ЗначениеЗаполнено(ПараметрыВыгрузки.НалСвид) Тогда
		ПараметрыОбработки = Новый Структура("КодНалСвид,Очищать", ПараметрыВыгрузки.НалСвид, Ложь);
		ОбработкаЗначенийНеСоответствующихКодуНаличияСвидетельства(ПараметрыОбработки, РезультатОбработки);
	КонецЕсли;
	
	ЗаполненХотяБыОдинЭкземплярРаздела2 = Ложь;
	Раздел2 = мДанныеОтчета.Раздел2;
	Для Каждого Стр Из Раздел2 Цикл
		
		НомерСтраницы = Раздел2.Индекс(Стр) + 1;
		ДанныеСтраницы = Стр.Данные[0].Значение;
		
		// проверяем только заполненные экземпляры раздела
		Если СтраницаПуста(ДанныеСтраницы, "Раздел2", ДеревоВыгрузки) Тогда
			Продолжить;
		КонецЕсли;
		
		ЗаполненХотяБыОдинЭкземплярРаздела2 = Истина;
		
		// проверяем шапку экземпляра раздела
		
		КодПТРаздел2 = СокрЛП(ДанныеСтраницы["П000200001000"]);
		КодПТРаздел2 = СтрДлина(КодПТРаздел2);
		Если КодПТРаздел2 <> 3 Тогда
			СообщитьВТС("В разделе 2 на странице " + НомерСтраницы + " не" + ?(КодПТРаздел2 = 0, "", "верно")
			+ " задан код вида подакцизного товара.", "Раздел2", "П000200001000", НомерСтраницы);
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		КодОКЕИРаздел2 = СокрЛП(ДанныеСтраницы["П000200002000"]);
		КодОКЕИРаздел2 = СтрДлина(КодОКЕИРаздел2);
		Если КодОКЕИРаздел2 <> 3 Тогда
			СообщитьВТС("В разделе 2 на странице " + НомерСтраницы + " не" + ?(КодОКЕИРаздел2 = 0, "", "верно")
			+ " задан код единицы измерения по ОКЕИ.", "Раздел2", "П000200002000", НомерСтраницы);
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		// проверяем табличную часть экземпляра раздела
		ЗаполненаХотяБыОднастрокаТаблЧастиРаздела21 = Ложь;
		НомерСтроки = 1;
		Пока ДанныеСтраницы.Свойство("П000210001001_" + Формат(НомерСтроки, "ЧГ=")) Цикл
			
			КПРаздел21МнчКод = "П000210001001_" + Формат(НомерСтроки, "ЧГ=");
			НалБазаРаздел21МнчКод = "П000210001003_" + Формат(НомерСтроки, "ЧГ=");
			СумАкцизРаздел21МнчКод = "П000210001004_" + Формат(НомерСтроки, "ЧГ=");
			
			КПРаздел21МнчКод = СокрЛП(ДанныеСтраницы[КПРаздел21МнчКод]);
			НалБазаРаздел21МнчКод = СокрЛП(ДанныеСтраницы[НалБазаРаздел21МнчКод]);
			СумАкцизРаздел21МнчКод = СокрЛП(ДанныеСтраницы[СумАкцизРаздел21МнчКод]);
			
			// проверяем только заполненные строки
			Если НЕ ЗначениеЗаполнено(КПРаздел21МнчКод)
				И   НалБазаРаздел21МнчКод = "0"
				И   СумАкцизРаздел21МнчКод = "0" Тогда
				НомерСтроки = НомерСтроки + 1;
				Продолжить;
			КонецЕсли;
			
			ЗаполненаХотяБыОднастрокаТаблЧастиРаздела21 = Истина;
				
			КПРаздел21МнчКод = СтрДлина(КПРаздел21МнчКод);
			Если КПРаздел21МнчКод <> 5 Тогда
				СообщитьВТС("В разделе 2.1 на странице " + НомерСтраницы + " в строке " + НомерСтроки
				+ " не" + ?(КПРаздел21МнчКод = 0, "", "верно") + " задан код показателя.", "Раздел2",
				"П000210001001_"+НомерСтроки, НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			НомерСтроки = НомерСтроки + 1;
	
		КонецЦикла;
		
		Если НЕ ЗаполненаХотяБыОднастрокаТаблЧастиРаздела21 Тогда
			СообщитьВТС("В разделе 2.1 на странице " + НомерСтраницы
			+ " не заполнена ни одна строка табличной части.", "Раздел2", "П000210001001_1", НомерСтраницы);
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		Для Сч = 1 по 9 Цикл
			
			КПРаздел22МнчКод = "П00022000" + Формат(Сч, "ЧГ=")+ "001";
			СумВычет22МнчКод = "П00022000" + Формат(Сч, "ЧГ=")+ "002";
			
			
			КПРаздел22МнчКод = СокрЛП(ДанныеСтраницы[КПРаздел22МнчКод]);
			СумВычет22МнчКод = СокрЛП(ДанныеСтраницы[СумВычет22МнчКод]);
			
			
			// проверяем только заполненные строки
			Если НЕ ЗначениеЗаполнено(КПРаздел22МнчКод)
				И СумВычет22МнчКод = "0"  Тогда 
				Продолжить;
			КонецЕсли;
			
			КПРаздел22МнчКод = СтрДлина(КПРаздел22МнчКод);
			Если КПРаздел22МнчКод <> 5 Тогда
				СообщитьВТС("В разделе 2.2 на странице " + НомерСтраницы + " в строке " + Сч
				+ " не" + ?(КПРаздел22МнчКод = 0, "", "верно") + " задан код показателя.", "Раздел2",
				"П00022000" + Сч + "001", НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
		КонецЦикла;
		
		Если РезультатОбработки <> Неопределено Тогда
			Для каждого ЭлМассива Из РезультатОбработки Цикл
				Если НомерСтраницы = ЭлМассива.НомСтраницы Тогда
					СообщитьВТС(ЭлМассива.ТекстСообщ
					+ "не соответствует заданному на титульном листе коду наличия свидетельства у налогоплательщика.",
					"Раздел2", ЭлМассива.ИмяПок, НомерСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
	
	Если НЕ ЗаполненХотяБыОдинЭкземплярРаздела2 Тогда
		СообщитьВТС("Обязательно должен быть заполнен хотя бы один экземпляр раздела 2.",
		"Раздел2", "П000200001000");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	// проверка раздела 2.4
	Раздел24 = мДанныеОтчета.Раздел24;
	Для Каждого Стр Из Раздел24 Цикл
		
		НомерСтраницы = Раздел24.Индекс(Стр) + 1;
		ДанныеСтраницы = Стр.Данные[0].Значение;
		
		// проверяем только заполненные экземпляры раздела
		Если СтраницаПуста(ДанныеСтраницы, "Раздел24", ДеревоВыгрузки) Тогда
			Продолжить;
		КонецЕсли;
		
		// проверяем табличную часть экземпляра раздела
		НомерСтроки = 1;
		Пока ДанныеСтраницы.Свойство("П000240001001_" + Формат(НомерСтроки, "ЧГ=")) Цикл
			
			КПРаздел24МнчКод = "П000240001001_" + Формат(НомерСтроки, "ЧГ=");
			НалБазаРаздел24МнчКод = "П000240001002_" + Формат(НомерСтроки, "ЧГ=");
			КодНалПериодаРаздел24МнчКод = "П000240001004_" + Формат(НомерСтроки, "ЧГ=");
			СуммаАкцизаРаздел24МнчКод = "П000240001003_" + Формат(НомерСтроки, "ЧГ=");
			ГодНПРаздел24МнчКод = "П000240001005_" + Формат(НомерСтроки, "ЧГ=");
			
			КПРаздел24МнчКод = СокрЛП(ДанныеСтраницы[КПРаздел24МнчКод]);
			НалБазаРаздел24МнчКод = СокрЛП(ДанныеСтраницы[НалБазаРаздел24МнчКод]);
			КодНалПериодаРаздел24МнчКод = СокрЛП(ДанныеСтраницы[КодНалПериодаРаздел24МнчКод]);
			СуммаАкцизаРаздел24МнчКод = СокрЛП(ДанныеСтраницы[СуммаАкцизаРаздел24МнчКод]);
			ГодНПРаздел24МнчКод = СокрЛП(ДанныеСтраницы[ГодНПРаздел24МнчКод]);
			
			// проверяем только заполненные строки
			Если НЕ ЗначениеЗаполнено(КПРаздел24МнчКод)  И НЕ ЗначениеЗаполнено(КодНалПериодаРаздел24МнчКод)
				И НЕ ЗначениеЗаполнено(ГодНПРаздел24МнчКод)
				И НалБазаРаздел24МнчКод = "0" И СуммаАкцизаРаздел24МнчКод = "0" Тогда 
				НомерСтроки = НомерСтроки + 1;
				Продолжить;
			КонецЕсли;
			
			КПРаздел24МнчКод = СтрДлина(КПРаздел24МнчКод);
			Если КПРаздел24МнчКод <> 5 Тогда
				СообщитьВТС("В разделе 2.4 на странице " + НомерСтраницы + " в строке " + НомерСтроки
				+ " не" + ?(КПРаздел24МнчКод = 0, "", "верно") + " задан код показателя.", "Раздел2",
				"П000240001001_" + НомерСтроки, НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			КодНалПериодаРаздел24МнчКод = СтрДлина(КодНалПериодаРаздел24МнчКод);
			Если КодНалПериодаРаздел24МнчКод <> 2 И КодНалПериодаРаздел24МнчКод <> 0 Тогда
				СообщитьВТС("В разделе 2.4 на странице " + НомерСтраницы + " в строке " + НомерСтроки
				+ " неверно задан код налогового периода.", "Раздел2",
				"П000240001004_" + НомерСтроки, НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			НомерСтроки = НомерСтроки + 1;
			
		КонецЦикла;
	КонецЦикла;
	
	// проверка Приложения1
	
	Прил1 = мДанныеОтчета.Приложение1;
	Для Каждого Стр Из Прил1 Цикл
		
		НомерСтраницы = Прил1.Индекс(Стр) + 1;
		ДанныеСтраницы = Стр.Данные[0].Значение;
		
		// проверяем только заполненные экземпляры раздела
		Если СтраницаПуста(ДанныеСтраницы, "Приложение1", ДеревоВыгрузки) Тогда
			Продолжить;
		КонецЕсли;
		
		// проверяем шапку экземпляра раздела
		
		КодПТРазделПрил1 = СокрЛП(ДанныеСтраницы["П000900001000"]);
		КодПТРазделПрил1 = СтрДлина(КодПТРазделПрил1);
		Если КодПТРазделПрил1 <> 3 Тогда
			СообщитьВТС("В Приложении №1 на странице " + НомерСтраницы + " не"
			+ ?(КодПТРазделПрил1 = 0, "", "верно") + " задан код вида подакцизного товара.",
			"Приложение1", "П000900001000", НомерСтраницы);
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		КодОКЕИПрил1 = СокрЛП(ДанныеСтраницы["П000900002000"]);
		КодОКЕИПрил1 = СтрДлина(КодОКЕИПрил1);
		Если КодОКЕИПрил1 <> 3 Тогда
			СообщитьВТС("В Приложении №1 на странице " + НомерСтраницы + " не"
			+ ?(КодОКЕИПрил1 = 0, "", "верно") + " задан код единицы измерения по ОКЕИ.",
			"Приложение1", "П000900002000", НомерСтраницы);
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		
		// проверяем табличную часть экземпляра раздела
		ЗаполненаХотяБыОднастрокаТаблЧастиПрил1 = Ложь;
		НомерСтроки = 1;
		Пока ДанныеСтраницы.Свойство("П000900000001_" + Формат(НомерСтроки, "ЧГ=")) Цикл
			
			КППрил1МнчКод = "П000900000001_" + Формат(НомерСтроки, "ЧГ=");
			СодержСпиртаПрил1МнчКод = "П000900000002_" + Формат(НомерСтроки, "ЧГ=");
			ОбъемПодакцТовараПрил1МнчКод = "П000900000003_" + Формат(НомерСтроки, "ЧГ=");
			НалБазаПрил1МнчКод = "П000900000004_" + Формат(НомерСтроки, "ЧГ=");
			
			КППрил1МнчКод = СокрЛП(ДанныеСтраницы[КППрил1МнчКод]);
			СодержСпиртаПрил1МнчКод = СокрЛП(ДанныеСтраницы[СодержСпиртаПрил1МнчКод]);
			ОбъемПодакцТовараПрил1МнчКод = СокрЛП(ДанныеСтраницы[ОбъемПодакцТовараПрил1МнчКод]);
			НалБазаПрил1МнчКод = СокрЛП(ДанныеСтраницы[НалБазаПрил1МнчКод]);
			
			// проверяем только заполненные строки
			Если НЕ ЗначениеЗаполнено(КППрил1МнчКод)
				И  СодержСпиртаПрил1МнчКод = "0" 
				И  ОбъемПодакцТовараПрил1МнчКод = "0"
				И НалБазаПрил1МнчКод = "0" 	Тогда 
				НомерСтроки = НомерСтроки + 1;
				Продолжить;
			КонецЕсли;
			
			ЗаполненаХотяБыОднастрокаТаблЧастиПрил1 = Истина;
			
			КППрил1МнчКод = СтрДлина(КППрил1МнчКод);
			Если КППрил1МнчКод <> 5 Тогда
				СообщитьВТС("В Приложении № 1 на странице " + НомерСтраницы + " в строке "
				+ НомерСтроки + " не" + ?(КППрил1МнчКод = 0, "", "верно") + " задан код показателя.",
				"Приложение1", "П000900000001_"+НомерСтроки, НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			НомерСтроки = НомерСтроки + 1;
			
		КонецЦикла;
		
		Если НЕ ЗаполненаХотяБыОднастрокаТаблЧастиПрил1 Тогда
			СообщитьВТС("В Приложении № 1 на странице " + НомерСтраницы
			+ " не заполнена ни одна строка табличной части.", "Приложение1",
			"П000900000001_1", НомерСтраницы);
			СтатусПроверки = Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	// проверка Приложения2
	
	Прил2 = мДанныеОтчета.Приложение2;
	Для Каждого Стр Из Прил2 Цикл
		
		НомерСтраницы = Прил2.Индекс(Стр) + 1;
		ДанныеСтраницы = Стр.Данные[0].Значение;
		
		// проверяем только заполненные экземпляры раздела
		Если СтраницаПуста(ДанныеСтраницы, "Приложение2", ДеревоВыгрузки) Тогда
			Продолжить;
		КонецЕсли;
		
		// проверяем шапку экземпляра раздела
		
		ИННПродавцаПрил2 = СокрЛП(ДанныеСтраницы["П000910001000"]);
		ИННПродавцаПрил2 = СтрДлина(ИННПродавцаПрил2);
		Если ИННПродавцаПрил2 <> 10 Тогда
			СообщитьВТС("В Приложении №2 на странице " + НомерСтраницы + " не" + ?(ИННПродавцаПрил2 = 0,
			"", "верно") + " задан ИНН продавца.", "Приложение2", "П000910001000", НомерСтраницы);
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		КПППродавцаПрил2 = СокрЛП(ДанныеСтраницы["П000910002000"]);
		КПППродавцаПрил2 = СтрДлина(КПППродавцаПрил2);
		Если КПППродавцаПрил2 <> 9 Тогда
			СообщитьВТС("В Приложении №2 на странице " + НомерСтраницы + " не" + ?(КПППродавцаПрил2 = 0,
			"", "верно") + " задан КПП продавца.", "Приложение2", "П000910002000", НомерСтраницы);
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		// проверяем табличную часть экземпляра раздела
		ЗаполненаХотяБыОднастрокаТаблЧастиПрил2 = Ложь;
		НомерСтроки = 1;
		Пока ДанныеСтраницы.Свойство("П000910000001_" + Формат(НомерСтроки, "ЧГ=")) Цикл
			
			КППрил2МнчКод = "П000910000001_" + Формат(НомерСтроки, "ЧГ=");
			КодВидаСпиртаПрил2МнчКод = "П000910000002_" + Формат(НомерСтроки, "ЧГ=");
			ОбъемПодакцТовараПрил2МнчКод = "П000910000003_" + Формат(НомерСтроки, "ЧГ=");
			КодВидаТовараПрил2МнчКод = "П000910000004_" + Формат(НомерСтроки, "ЧГ=");
			СуммаАвПлатежаПрил2МнчКод = "П000910000005_" + Формат(НомерСтроки, "ЧГ=");
			
			КППрил2МнчКод = СокрЛП(ДанныеСтраницы[КППрил2МнчКод]);
			КодВидаСпиртаПрил2МнчКод = СокрЛП(ДанныеСтраницы[КодВидаСпиртаПрил2МнчКод]);
			ОбъемПодакцТовараПрил2МнчКод = СокрЛП(ДанныеСтраницы[ОбъемПодакцТовараПрил2МнчКод]);
			КодВидаТовараПрил2МнчКод = СокрЛП(ДанныеСтраницы[КодВидаТовараПрил2МнчКод]);
			СуммаАвПлатежаПрил2МнчКод = СокрЛП(ДанныеСтраницы[СуммаАвПлатежаПрил2МнчКод]);
			
			// проверяем только заполненные строки
			Если НЕ ЗначениеЗаполнено(КППрил2МнчКод)
				И НЕ ЗначениеЗаполнено(КодВидаСпиртаПрил2МнчКод) 
				И ОбъемПодакцТовараПрил2МнчКод = "0"
				И НЕ ЗначениеЗаполнено(КодВидаТовараПрил2МнчКод)
				И СуммаАвПлатежаПрил2МнчКод = "0" Тогда 
				НомерСтроки = НомерСтроки + 1;
				Продолжить;
			КонецЕсли;
			
			ЗаполненаХотяБыОднастрокаТаблЧастиПрил2 = Истина;
			
			КППрил2МнчКод = СтрДлина(КППрил2МнчКод);
			Если КППрил2МнчКод <> 5 Тогда
				СообщитьВТС("В Приложении № 2 на странице " + НомерСтраницы + " в строке "
				+ НомерСтроки + " не" + ?(КППрил2МнчКод = 0, "", "верно") + " задан код показателя.",
				"Приложение2", "П000910000001_" + НомерСтроки, НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			КодВидаСпиртаПрил2МнчКод = СтрДлина(КодВидаСпиртаПрил2МнчКод);
			Если КодВидаСпиртаПрил2МнчКод <> 3 Тогда
				СообщитьВТС("В Приложении № 2 на странице " + НомерСтраницы + " в строке "
				+ НомерСтроки + " не" + ?(КодВидаСпиртаПрил2МнчКод = 0, "", "верно")
				+ " задан код вида приобретаемого спирта.", "Приложение2",
				"П000910000002_" + НомерСтроки, НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			КодВидаТовараПрил2МнчКод = СтрДлина(КодВидаТовараПрил2МнчКод);
			Если КодВидаТовараПрил2МнчКод <> 3 Тогда
				СообщитьВТС("В Приложении № 2 на странице " + НомерСтраницы + " в строке "
				+ НомерСтроки + " не" + ?(КодВидаТовараПрил2МнчКод = 0, "", "верно")
				+ " задан код вида подакцизного товара.", "Приложение2",
				"П000910000004_" + НомерСтроки, НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			НомерСтроки = НомерСтроки + 1;
	
		КонецЦикла;
		
		Если НЕ ЗаполненаХотяБыОднастрокаТаблЧастиПрил2 Тогда
			СообщитьВТС("В Приложении № 2 на странице " + НомерСтраницы
			+ " не заполнена ни одна строка табличной части.", "Приложение2",
			"П000910000001_1", НомерСтраницы);
			СтатусПроверки = Ложь;
		КонецЕсли;
	КонецЦикла;
	
	// проверка Приложения3
	
	Прил3 = мДанныеОтчета.Приложение3;
	Для Каждого Стр Из Прил3 Цикл
		
		НомерСтраницы = Прил3.Индекс(Стр) + 1;
		ДанныеСтраницы = Стр.Данные[0].Значение;
		
		// проверяем только заполненные экземпляры раздела
		Если СтраницаПуста(ДанныеСтраницы, "Приложение3", ДеревоВыгрузки) Тогда
			Продолжить;
		КонецЕсли;
		
		// проверяем шапку экземпляра раздела
		
		ИННПокупателяПрил3 = СокрЛП(ДанныеСтраницы["П000920001000"]);
		ИННПокупателяПрил3 = СтрДлина(ИННПокупателяПрил3);
		Если ИННПокупателяПрил3 <> 10 Тогда
			СообщитьВТС("В Приложении №3 на странице " + НомерСтраницы + " не"
			+ ?(ИННПокупателяПрил3  = 0, "", "верно") + " задан ИНН покупателя.",
			"Приложение3", "П000920001000", НомерСтраницы);
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		КПППокупателяПрил3 = СокрЛП(ДанныеСтраницы["П000920002000"]);
		КПППокупателяПрил3 = СтрДлина(КПППокупателяПрил3);
		Если КПППокупателяПрил3 <> 9 Тогда
			СообщитьВТС("В Приложении №3 на странице " + НомерСтраницы + " не"
			+ ?(КПППокупателяПрил3  = 0, "", "верно") + " задан КПП покупателя.",
			"Приложение3", "П000920002000", НомерСтраницы);
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		// проверяем табличную часть экземпляра раздела
		ЗаполненаХотяБыОднастрокаТаблЧастиПрил3 = Ложь;
		НомерСтроки = 1;
		Пока ДанныеСтраницы.Свойство("П000920000001_" + Формат(НомерСтроки, "ЧГ=")) Цикл
			
			КППрил3МнчКод = "П000920000001_" + Формат(НомерСтроки, "ЧГ=");
			КодВидаСпиртаПрил3МнчКод = "П000920000002_" + Формат(НомерСтроки, "ЧГ=");
			ОбъемПодакцТовараПрил3МнчКод = "П000920000003_" + Формат(НомерСтроки, "ЧГ=");
			КодВидаТовараПрил3МнчКод = "П000920000004_" + Формат(НомерСтроки, "ЧГ=");
			СуммаАвПлатежаПрил3МнчКод = "П000920000005_" + Формат(НомерСтроки, "ЧГ=");
			
			КППрил3МнчКод = СокрЛП(ДанныеСтраницы[КППрил3МнчКод]);
			КодВидаСпиртаПрил3МнчКод = СокрЛП(ДанныеСтраницы[КодВидаСпиртаПрил3МнчКод]);
			ОбъемПодакцТовараПрил3МнчКод = СокрЛП(ДанныеСтраницы[ОбъемПодакцТовараПрил3МнчКод]);
			КодВидаТовараПрил3МнчКод = СокрЛП(ДанныеСтраницы[КодВидаТовараПрил3МнчКод]);
			СуммаАвПлатежаПрил3МнчКод = СокрЛП(ДанныеСтраницы[СуммаАвПлатежаПрил3МнчКод]);
			
			// проверяем только заполненные строки
			Если НЕ ЗначениеЗаполнено(КППрил3МнчКод)
				И НЕ ЗначениеЗаполнено(КодВидаСпиртаПрил3МнчКод) 
				И ОбъемПодакцТовараПрил3МнчКод = "0" 
				И НЕ ЗначениеЗаполнено(КодВидаТовараПрил3МнчКод)
				И СуммаАвПлатежаПрил3МнчКод = "0" Тогда 
				НомерСтроки = НомерСтроки + 1;
				Продолжить;
			КонецЕсли;
			
			ЗаполненаХотяБыОднастрокаТаблЧастиПрил3 = Истина;
			
			КППрил3МнчКод = СтрДлина(КППрил3МнчКод);
			Если КППрил3МнчКод <> 5 Тогда
				СообщитьВТС("В Приложении № 3 на странице " + НомерСтраницы + " в строке "
				+ НомерСтроки + " не" + ?(КППрил3МнчКод = 0, "", "верно") + " задан код показателя.",
				"Приложение3", "П000920000001_" + НомерСтроки, НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			КодВидаСпиртаПрил3МнчКод = СтрДлина(КодВидаСпиртаПрил3МнчКод);
			Если КодВидаСпиртаПрил3МнчКод <> 3 Тогда
				СообщитьВТС("В Приложении № 3 на странице " + НомерСтраницы + " в строке "
				+ НомерСтроки + " не" + ?(КодВидаСпиртаПрил3МнчКод = 0, "", "верно")
				+ " задан код вида приобретаемого спирта.", "Приложение3",
				"П000920000002_" + НомерСтроки, НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			КодВидаТовараПрил3МнчКод = СтрДлина(КодВидаТовараПрил3МнчКод);
			Если КодВидаТовараПрил3МнчКод <> 3 Тогда
				СообщитьВТС("В Приложении № 3 на странице " + НомерСтраницы + " в строке "
				+ НомерСтроки + " не" + ?(КодВидаТовараПрил3МнчКод = 0, "", "верно")
				+ " задан код вида подакцизного товара.", "Приложение3",
				"П000920000004_" + НомерСтроки, НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			НомерСтроки = НомерСтроки + 1;

		КонецЦикла;
		
		Если НЕ ЗаполненаХотяБыОднастрокаТаблЧастиПрил3 Тогда
			СообщитьВТС("В Приложении № 3 на странице " + НомерСтраницы
			+ " не заполнена ни одна строка табличной части.", "Приложение3",
			"П000920000001_1", НомерСтраницы);
			СтатусПроверки = Ложь;
		КонецЕсли;
	КонецЦикла;
	
	// проверка Приложения4
	
	Прил4 = мДанныеОтчета.Приложение4;
	Для Каждого Стр Из Прил4 Цикл
		
		НомерСтраницы = Прил4.Индекс(Стр) + 1;
		ДанныеСтраницы = Стр.Данные[0].Значение;
		
		// проверяем только заполненные экземпляры раздела
		Если СтраницаПуста(ДанныеСтраницы, "Приложение4", ДеревоВыгрузки) Тогда
			Продолжить;
		КонецЕсли;
		
		// проверяем шапку экземпляра раздела
		
		НаимОргПрил4 = СокрЛП(ДанныеСтраницы["П000930001000"]);
		Если ПустаяСтрока(НаимОргПрил4) Тогда
			СообщитьВТС("В Приложении № 4 на странице " + НомерСтраницы
			+ " не заполнено наименование организации-поставщика.",
			"Приложение4", "П000930001000", НомерСтраницы);
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		ИННПоставщикаПрил4 = СокрЛП(ДанныеСтраницы["П000930002000"]);
		ИННПоставщикаПрил4 = СтрДлина(ИННПоставщикаПрил4);
		Если ИННПоставщикаПрил4 <> 10 Тогда
			СообщитьВТС("В Приложении № 4 на странице " + НомерСтраницы + " не"
			+ ?(ИННПоставщикаПрил4 = 0, "", "верно") + " задан ИНН поставщика.",
			"Приложение4", "П000930002000", НомерСтраницы);
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		КПППоставщикаПрил4 = СокрЛП(ДанныеСтраницы["П000930003000"]);
		КПППоставщикаПрил4 = СтрДлина(КПППоставщикаПрил4);
		Если КПППоставщикаПрил4 <> 9 Тогда
			СообщитьВТС("В Приложении № 4 на странице " + НомерСтраницы + " не"
			+ ?(КПППоставщикаПрил4  = 0, "", "верно") + " задан КПП поставщика.",
			"Приложение4", "П000930003000", НомерСтраницы);
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		СерияСвидПрил4 = СокрЛП(ДанныеСтраницы["П000930004000_1"]);
		СерияСвидПрил4 = СтрДлина(СерияСвидПрил4);
		Если СерияСвидПрил4 <> 2 Тогда
			СообщитьВТС("В Приложении № 4 на странице " + НомерСтраницы + " не"
			+ ?(СерияСвидПрил4  = 0, "", "верно") + " указана серия свидетельства.",
			"Приложение4", "П000930004000_1", НомерСтраницы);
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		НомСвидПрил4 = СокрЛП(ДанныеСтраницы["П000930004000_2"]);
		НомСвидПрил4 = СтрДлина(НомСвидПрил4);
		Если ПустаяСтрока(НомСвидПрил4) Тогда
			СообщитьВТС("В Приложении № 4 на странице " + НомерСтраницы
			+ " не указан номер свидетельства.", "Приложение4", "П000930004000_2", НомерСтраницы);
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		// проверяем табличную часть экземпляра раздела
		ЗаполненаХотяБыОднастрокаТаблЧастиПрил4 = Ложь;
		НомерСтроки = 1;
		Пока ДанныеСтраницы.Свойство("П000930000001_" + Формат(НомерСтроки, "ЧГ=")) Цикл
			
			КППрил4МнчКод = "П000930000001_" + Формат(НомерСтроки, "ЧГ=");
			ДатаСФПрил4МнчКод = "П000930000002_" + Формат(НомерСтроки, "ЧГ=");
			ОбъемПодакцТовараПрил4МнчКод = "П000930000003_" + Формат(НомерСтроки, "ЧГ=");
			НомСФПрил4МнчКод = "П000930000004_" + Формат(НомерСтроки, "ЧГ=");
			
			КППрил4МнчКод = СокрЛП(ДанныеСтраницы[КППрил4МнчКод]);
			ДатаСФПрил4МнчКод = ?(ДанныеСтраницы[ДатаСФПрил4МнчКод] = Дата(1,1,1),
				"", Лев(СокрЛП(ДанныеСтраницы[ДатаСФПрил4МнчКод]),10));
			ОбъемПодакцТовараПрил4МнчКод = СокрЛП(ДанныеСтраницы[ОбъемПодакцТовараПрил4МнчКод]);
			НомСФПрил4МнчКод = СокрЛП(ДанныеСтраницы[НомСФПрил4МнчКод]);
			
			// проверяем только заполненные строки
			Если НЕ ЗначениеЗаполнено(КППрил4МнчКод)
				И НЕ ЗначениеЗаполнено(ДатаСФПрил4МнчКод)
				И ОбъемПодакцТовараПрил4МнчКод = "0"
				И НЕ ЗначениеЗаполнено(НомСФПрил4МнчКод) Тогда
				НомерСтроки = НомерСтроки + 1;
				Продолжить;
			КонецЕсли;
			
			ЗаполненаХотяБыОднастрокаТаблЧастиПрил4 = Истина;
			
			КППрил4МнчКод = СтрДлина(КППрил4МнчКод);
			Если КППрил4МнчКод <> 3 Тогда
				СообщитьВТС("В Приложении № 4 на странице " + НомерСтраницы + " в строке "
				+ НомерСтроки + " не" + ?(КППрил4МнчКод = 0, "", "верно") + " задан код показателя.",
				"Приложение4", "П000930000001_" + НомерСтроки, НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			ДатаСФПрил4МнчКод = СтрДлина(ДатаСФПрил4МнчКод);
			Если ДатаСФПрил4МнчКод <> 10 Тогда
				СообщитьВТС("В Приложении № 4 на странице " + НомерСтраницы + " в строке " + НомерСтроки
				+ " не" + ?(ДатаСФПрил4МнчКод = 0, "", "верно") + " указана дата счета-фактуры.",
				"Приложение4", "П000930000002_" + НомерСтроки, НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			Если ПустаяСтрока(НомСФПрил4МнчКод) Тогда
				СообщитьВТС("В Приложении № 4 на странице " + НомерСтраницы + " в строке " + НомерСтроки
				+ " не указан номер счета-фактуры.", "Приложение4", "П000930000004_" + НомерСтроки, НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			НомерСтроки = НомерСтроки + 1;
			
		КонецЦикла;
		
		Если НЕ ЗаполненаХотяБыОднастрокаТаблЧастиПрил4 Тогда
			СообщитьВТС("В Приложении № 4 на странице " + НомерСтраницы
			+ " не заполнена ни одна строка табличной части.", "Приложение4",
			"П000930000001_1", НомерСтраницы);
			СтатусПроверки = Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	// проверка Приложения5
	
	Прил5 = мДанныеОтчета.Приложение5;
	Для Каждого Стр Из Прил5 Цикл
		
		НомерСтраницы = Прил5.Индекс(Стр) + 1;
		ДанныеСтраницы = Стр.Данные[0].Значение;
		
		// проверяем только заполненные экземпляры раздела
		Если СтраницаПуста(ДанныеСтраницы, "Приложение5", ДеревоВыгрузки) Тогда
			Продолжить;
		КонецЕсли;
		
		// проверяем шапку экземпляра раздела
		
		НаимОргПрил5 = СокрЛП(ДанныеСтраницы["П000940001000"]);
		Если ПустаяСтрока(НаимОргПрил5) Тогда
			СообщитьВТС("В Приложении № 5 на странице " + НомерСтраницы
			+ " не заполнено наименование организации-покупателя.", "Приложение5",
			"П000940001000", НомерСтраницы);
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		ИННПокупателяПрил5 = СокрЛП(ДанныеСтраницы["П000940002000"]);
		ИННПокупателяПрил5 = СтрДлина(ИННПокупателяПрил5);
		Если ИННПокупателяПрил5 <> 10 Тогда
			СообщитьВТС("В Приложении № 5 на странице " + НомерСтраницы + " не"
			+ ?(ИННПокупателяПрил5 = 0, "", "верно") + " задан ИНН покупателя.",
			"Приложение5", "П000940002000", НомерСтраницы);
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		КПППокупателяПрил5 = СокрЛП(ДанныеСтраницы["П000940003000"]);
		КПППокупателяПрил5 = СтрДлина(КПППокупателяПрил5);
		Если КПППокупателяПрил5 <> 9 Тогда
			СообщитьВТС("В Приложении № 5 на странице " + НомерСтраницы + " не"
			+ ?(КПППокупателяПрил5 = 0, "", "верно") + " задан КПП покупателя.",
			"Приложение5", "П000940003000", НомерСтраницы);
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		СерияСвидПрил5 = СокрЛП(ДанныеСтраницы["П000940004000_1"]);
		СерияСвидПрил5 = СтрДлина(СерияСвидПрил5);
		Если СерияСвидПрил5 <> 2 Тогда
			СообщитьВТС("В Приложении № 5 на странице " + НомерСтраницы + " не"
			+ ?(СерияСвидПрил5 = 0, "", "верно") + " указана серия свидетельства.",
			"Приложение5", "П000940004000_1", НомерСтраницы);
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		НомСвидПрил5 = СокрЛП(ДанныеСтраницы["П000940004000_2"]);
		НомСвидПрил5 = СтрДлина(НомСвидПрил5);
		Если ПустаяСтрока(НомСвидПрил5) Тогда
			СообщитьВТС("В Приложении № 5 на странице " + НомерСтраницы
			+ " не указан номер свидетельства.", "Приложение5", "П000940004000_2", НомерСтраницы);
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		// проверяем табличную часть экземпляра раздела
		ЗаполненаХотяБыОднастрокаТаблЧастиПрил5 = Ложь;
		НомерСтроки = 1;
		Пока ДанныеСтраницы.Свойство("П000940000001_" + Формат(НомерСтроки, "ЧГ=")) Цикл
			
			КППрил5МнчКод = "П000940000001_" + Формат(НомерСтроки, "ЧГ=");
			ДатаСФПрил5МнчКод = "П000940000002_" + Формат(НомерСтроки, "ЧГ=");
			ОбъемПодакцТовараПрил5МнчКод = "П000940000003_" + Формат(НомерСтроки, "ЧГ=");
			НомСФПрил5МнчКод = "П000940000004_" + Формат(НомерСтроки, "ЧГ=");
			
			КППрил5МнчКод = СокрЛП(ДанныеСтраницы[КППрил5МнчКод]);
			ДатаСФПрил5МнчКод = ?(ДанныеСтраницы[ДатаСФПрил5МнчКод] = Дата(1,1,1),
				"", Лев(СокрЛП(ДанныеСтраницы[ДатаСФПрил5МнчКод]),10));
			ОбъемПодакцТовараПрил5МнчКод = СокрЛП(ДанныеСтраницы[ОбъемПодакцТовараПрил5МнчКод]);
			НомСФПрил5МнчКод = СокрЛП(ДанныеСтраницы[НомСФПрил5МнчКод]);
			
			// проверяем только заполненные строки
			Если НЕ ЗначениеЗаполнено(КППрил5МнчКод)
				И НЕ ЗначениеЗаполнено(ДатаСФПрил5МнчКод)
				И ОбъемПодакцТовараПрил5МнчКод = "0"
				И НЕ ЗначениеЗаполнено(НомСФПрил5МнчКод) Тогда
				НомерСтроки = НомерСтроки + 1;
				Продолжить;
			КонецЕсли;
			
			ЗаполненаХотяБыОднастрокаТаблЧастиПрил5 = Истина;
			
			КППрил5МнчКод = СтрДлина(КППрил5МнчКод);
			Если КППрил5МнчКод <> 3 Тогда
				СообщитьВТС("В Приложении № 5 на странице " + НомерСтраницы + " в строке "
				+ НомерСтроки + " не" + ?(КППрил5МнчКод = 0, "", "верно") + " задан код показателя.",
				"Приложение5", "П000940000001_" + НомерСтроки, НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			ДатаСФПрил5МнчКод = СтрДлина(ДатаСФПрил5МнчКод);
			Если ДатаСФПрил5МнчКод <> 10 Тогда
				СообщитьВТС("В Приложении № 5 на странице " + НомерСтраницы + " в строке "
				+ НомерСтроки + " не" + ?(ДатаСФПрил5МнчКод = 0, "", "верно") + " указана дата счета-фактуры.",
				"Приложение5", "П000940000002_" + НомерСтроки, НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			Если ПустаяСтрока(НомСФПрил5МнчКод)  Тогда
				СообщитьВТС("В Приложении № 5 на странице " + НомерСтраницы + " в строке "
				+ НомерСтроки + " не указан номер счета-фактуры.", "Приложение5",
				"П000940000004_" + НомерСтроки, НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			НомерСтроки = НомерСтроки + 1;

		КонецЦикла;
		
		Если НЕ ЗаполненаХотяБыОднастрокаТаблЧастиПрил5 Тогда
			СообщитьВТС("В Приложении № 5 на странице " + НомерСтраницы
			+ " не заполнена ни одна строка табличной части.", "Приложение5",
			"П000940000001_1", НомерСтраницы);
			СтатусПроверки = Ложь;
		КонецЕсли;
	КонецЦикла;
	
	// проверка Приложения6
	
	Прил6 = мДанныеОтчета.Приложение6;
	Для Каждого Стр Из Прил6 Цикл
		
		НомерСтраницы = Прил6.Индекс(Стр) + 1;
		ДанныеСтраницы = Стр.Данные[0].Значение;
		
		// проверяем только заполненные экземпляры раздела
		Если СтраницаПуста(ДанныеСтраницы, "Приложение6", ДеревоВыгрузки) Тогда
			Продолжить;
		КонецЕсли;
		
		// проверяем шапку экземпляра раздела
		ИННПоставщикаПрил6 = СокрЛП(ДанныеСтраницы["П000950002000"]);
		ИННПоставщикаПрил6 = СтрДлина(ИННПоставщикаПрил6);
		Если ИННПоставщикаПрил6 <> 10 И ИННПоставщикаПрил6 <> 12 Тогда
			СообщитьВТС("В Приложении № 6 на странице " + НомерСтраницы + " не"
			+ ?(ИННПоставщикаПрил6 = 0, "", "верно") + " задан ИНН поставщика.",
			"Приложение6", "П000950002000", НомерСтраницы);
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		Если  ИННПоставщикаПрил6 = 10  Тогда //юрлицо
			КПППоставщикаПрил6 = СокрЛП(ДанныеСтраницы["П000950003000"]);
			КПППоставщикаПрил6 = СтрДлина(КПППоставщикаПрил6);
			Если КПППоставщикаПрил6 <> 9 Тогда
				СообщитьВТС("В Приложении № 6 на странице " + НомерСтраницы + " не"
				+ ?(КПППоставщикаПрил6  = 0, "", "верно") + " задан КПП поставщика.",
				"Приложение6", "П000950003000", НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
		КонецЕсли;
		
		НаимОргПрил6 = СокрЛП(ДанныеСтраницы["П000950001000"]);
		Если ПустаяСтрока(НаимОргПрил6) Тогда
			СообщитьВТС("В Приложении № 6 на странице " + НомерСтраницы
			+ " не заполнено наименование организации-поставщика.", "Приложение6",
			"П000950001000", НомерСтраницы);
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		СерияСвидПрил6 = СокрЛП(ДанныеСтраницы["П000950004000_1"]);
		СерияСвидПрил6 = СтрДлина(СерияСвидПрил6);
		Если СерияСвидПрил6 <> 2 Тогда
			СообщитьВТС("В Приложении № 6 на странице " + НомерСтраницы + " не"
			+ ?(СерияСвидПрил6  = 0, "", "верно") + " указана серия свидетельства.",
			"Приложение6", "П000950004000_1", НомерСтраницы);
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		НомСвидПрил6 = СокрЛП(ДанныеСтраницы["П000950004000_2"]);
		НомСвидПрил6 = СтрДлина(НомСвидПрил6);
		Если ПустаяСтрока(НомСвидПрил6) Тогда
			СообщитьВТС("В Приложении № 6 на странице " + НомерСтраницы
			+ " не указан номер свидетельства.", "Приложение6", "П000950004000_2", НомерСтраницы);
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		// проверяем табличную часть экземпляра раздела
		ЗаполненаХотяБыОднастрокаТаблЧастиПрил6 = Ложь;
		НомерСтроки = 1;
		Пока ДанныеСтраницы.Свойство("П000950000001_" + Формат(НомерСтроки, "ЧГ=")) Цикл
			
			ДатаСФПрил6МнчКод = "П000950000001_" + Формат(НомерСтроки, "ЧГ=");
			ОбъемПодакцТовараПрил6МнчКод = "П000950000002_" + Формат(НомерСтроки, "ЧГ=");
			НомСФПрил6МнчКод = "П000950000003_" + Формат(НомерСтроки, "ЧГ=");
			
			ДатаСФПрил6МнчКод = ?(ДанныеСтраницы[ДатаСФПрил6МнчКод] = Дата(1,1,1),
				"", Лев(СокрЛП(ДанныеСтраницы[ДатаСФПрил6МнчКод]),10));
			ОбъемПодакцТовараПрил6МнчКод = СокрЛП(ДанныеСтраницы[ОбъемПодакцТовараПрил6МнчКод]);
			НомСФПрил6МнчКод = СокрЛП(ДанныеСтраницы[НомСФПрил6МнчКод]);
			
			// проверяем только заполненные строки
			Если НЕ ЗначениеЗаполнено(ДатаСФПрил6МнчКод) 
				И ОбъемПодакцТовараПрил6МнчКод = "0" 
				И НЕ ЗначениеЗаполнено(НомСФПрил6МнчКод) Тогда 
				НомерСтроки = НомерСтроки + 1;
				Продолжить;
			КонецЕсли;
			
			ЗаполненаХотяБыОднастрокаТаблЧастиПрил6 = Истина;
			
			ДатаСФПрил6МнчКод = СтрДлина(ДатаСФПрил6МнчКод);
			Если ДатаСФПрил6МнчКод <> 10 Тогда
				СообщитьВТС("В Приложении № 6 на странице " + НомерСтраницы + " в строке "
				+ НомерСтроки + " не" + ?(ДатаСФПрил6МнчКод = 0, "", "верно") + " указана дата счета-фактуры.",
				"Приложение6", "П000950000001_" + НомерСтроки, НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			Если ПустаяСтрока(НомСФПрил6МнчКод)  Тогда
				СообщитьВТС("В Приложении № 6 на странице " + НомерСтраницы + " в строке "
				+ НомерСтроки + " не указан номер счета-фактуры.", "Приложение6",
				"П000950000003_" + НомерСтроки, НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			НомерСтроки = НомерСтроки + 1;
			
		КонецЦикла;
		
		Если НЕ ЗаполненаХотяБыОднастрокаТаблЧастиПрил6 Тогда
			СообщитьВТС("В Приложении № 6 на странице " + НомерСтраницы
			+ " не заполнена ни одна строка табличной части.", "Приложение6",
			"П000950000001_1", НомерСтраницы);
			СтатусПроверки = Ложь;
		КонецЕсли;
	КонецЦикла;
	
	// проверка Приложения7
	
	Прил7 = мДанныеОтчета.Приложение7;
	Для Каждого Стр Из Прил7 Цикл
		
		НомерСтраницы = Прил7.Индекс(Стр) + 1;
		ДанныеСтраницы = Стр.Данные[0].Значение;
		
		// проверяем только заполненные экземпляры раздела
		Если СтраницаПуста(ДанныеСтраницы, "Приложение7", ДеревоВыгрузки) Тогда
			Продолжить;
		КонецЕсли;
		
		// проверяем шапку экземпляра раздела
		
		ИННПокупателяПрил7 = СокрЛП(ДанныеСтраницы["П000960002000"]);
		ИННПокупателяПрил7 = СтрДлина(ИННПокупателяПрил7);
		Если ИННПокупателяПрил7 <> 10 И ИННПокупателяПрил7 <> 12 Тогда
			СообщитьВТС("В Приложении № 7 на странице " + НомерСтраницы + " не" + ?(ИННПокупателяПрил7 = 0,
			"", "верно") + " задан ИНН покупателя.", "Приложение7", "П000960002000", НомерСтраницы);
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		Если  ИННПокупателяПрил7 = 10  Тогда //юрлицо
			КПППокупателяПрил7 = СокрЛП(ДанныеСтраницы["П000960003000"]);
			КПППокупателяПрил7 = СтрДлина(КПППокупателяПрил7);
			Если КПППокупателяПрил7 <> 9 Тогда
				СообщитьВТС("В Приложении № 7 на странице " + НомерСтраницы + " не" + ?(КПППокупателяПрил7 = 0,
				"", "верно") + " задан КПП покупателя.", "Приложение7", "П000960003000", НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
		КонецЕсли;
		
		НаимОргПрил7 = СокрЛП(ДанныеСтраницы["П000960001000"]);
		Если ПустаяСтрока(НаимОргПрил7) Тогда
			СообщитьВТС("В Приложении № 7 на странице " + НомерСтраницы
			+ " не заполнено наименование организации-покупателя.", "Приложение7",
			"П000960001000", НомерСтраницы);
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		СерияСвидПрил7 = СокрЛП(ДанныеСтраницы["П000960004000_1"]);
		СерияСвидПрил7 = СтрДлина(СерияСвидПрил7);
		Если СерияСвидПрил7 <> 2 Тогда
			СообщитьВТС("В Приложении № 7 на странице " + НомерСтраницы + " не" + ?(СерияСвидПрил7 = 0,
			"", "верно") + " указана серия свидетельства.", "Приложение7", "П000960004000_1", НомерСтраницы);
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		НомСвидПрил7 = СокрЛП(ДанныеСтраницы["П000960004000_2"]);
		НомСвидПрил7 = СтрДлина(НомСвидПрил7);
		Если ПустаяСтрока(НомСвидПрил7) Тогда
			СообщитьВТС("В Приложении № 7 на странице " + НомерСтраницы
			+ " не указан номер свидетельства.", "Приложение7", "П000960004000_2", НомерСтраницы);
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		// проверяем табличную часть экземпляра раздела
		ЗаполненаХотяБыОднастрокаТаблЧастиПрил7 = Ложь;
		НомерСтроки = 1;
		Пока ДанныеСтраницы.Свойство("П000960000001_" + Формат(НомерСтроки, "ЧГ=")) Цикл
			
			ДатаСФПрил7МнчКод = "П000960000001_" + Формат(НомерСтроки, "ЧГ=");
			ОбъемПодакцТовараПрил7МнчКод = "П000960000002_" + Формат(НомерСтроки, "ЧГ=");
			НомСФПрил7МнчКод = "П000960000003_" + Формат(НомерСтроки, "ЧГ=");
			
			ДатаСФПрил7МнчКод = ?(ДанныеСтраницы[ДатаСФПрил7МнчКод] = Дата(1,1,1),
				"", Лев(СокрЛП(ДанныеСтраницы[ДатаСФПрил7МнчКод]),10));
			ОбъемПодакцТовараПрил7МнчКод = СокрЛП(ДанныеСтраницы[ОбъемПодакцТовараПрил7МнчКод]);
			НомСФПрил7МнчКод = СокрЛП(ДанныеСтраницы[НомСФПрил7МнчКод]);
			
			// проверяем только заполненные строки
			Если НЕ ЗначениеЗаполнено(ДатаСФПрил7МнчКод) 
				И ОбъемПодакцТовараПрил7МнчКод = "0" 
				И НЕ ЗначениеЗаполнено(НомСФПрил7МнчКод) Тогда 
				НомерСтроки = НомерСтроки + 1;
				Продолжить;
			КонецЕсли;
			
			ЗаполненаХотяБыОднастрокаТаблЧастиПрил7 = Истина;
			
			ДатаСФПрил7МнчКод = СтрДлина(ДатаСФПрил7МнчКод);
			Если ДатаСФПрил7МнчКод <> 10 Тогда
				СообщитьВТС("В Приложении № 7 на странице " + НомерСтраницы + " в строке "
				+ НомерСтроки + " не" + ?(ДатаСФПрил7МнчКод = 0, "", "верно")
				+ " указана дата счета-фактуры.", "Приложение7", "П000960000001_" + НомерСтроки, НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			Если ПустаяСтрока(НомСФПрил7МнчКод) Тогда
				СообщитьВТС("В Приложении № 7 на странице " + НомерСтраницы + " в строке "
				+ НомерСтроки + " не указан номер счета-фактуры.", "Приложение7",
				"П000960000003_" + НомерСтроки, НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			НомерСтроки = НомерСтроки + 1;
			
		КонецЦикла;
		
		Если НЕ ЗаполненаХотяБыОднастрокаТаблЧастиПрил7 Тогда
			СообщитьВТС("В Приложении № 7 на странице " + НомерСтраницы
			+ " не заполнена ни одна строка табличной части.", "Приложение7",
			"П000960000001_1", НомерСтраницы);
			СтатусПроверки = Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат СтатусПроверки;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьДанными(ДеревоВыгрузки, ПараметрыВыгрузки)
	
	ОбработатьУсловныеЭлементы(ПараметрыВыгрузки, ДеревоВыгрузки); // формируем точную структуру XML-макета
	ЗаполнитьДаннымиУзел(ПараметрыВыгрузки, ДеревоВыгрузки);       // заполняем дерево данными
	ПостОбработкаДереваВыгрузки(ДеревоВыгрузки);                   
	ОтсечьНезаполненныеНеобязательныеУзлы(ДеревоВыгрузки);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСодержательнуюЧасть(УзелРодитель)
	
	// Раздел 1.
	СумНалПУ = ПолучитьПодчиненныйЭлемент(УзелРодитель, "СумНалПУ");
	
	// Раздел 1.1.
	СумПУНеПБ = ПолучитьПодчиненныйЭлемент(СумНалПУ, "СумПУнеПБ");
	
	ДанныеРаздела1 = мДанныеОтчета.Раздел1;
	Для Каждого Стр Из ДанныеРаздела1 Цикл
		
		ДанныеСтраницы = Стр.Данные[0].Значение;
		Если ЗаполненРаздел1_1(ДанныеСтраницы) Тогда
					
			// создаем копированием узел, соответствующий экземпляру раздела
			ЭкзСумПУНеПБ = СкопироватьУзел(СумНалПУ, СумПУНеПБ);
			
			// заполняем немножественные показатели табличной части
			Для Каждого Эл Из ЭкзСумПУНеПБ.Строки Цикл
				Если Эл.Строки.Количество() = 0 Тогда
					ВывестиПоказательВXML(Эл, ДанныеСтраницы[Эл.Ключ]);
				КонецЕсли;
			КонецЦикла;
			
			// заполняем табличную часть
			СумПуНал = ПолучитьПодчиненныйЭлемент(ЭкзСумПУНеПБ , "СумПУНал");
			
			НомерСтроки = 1;
			Пока ДанныеСтраницы.Свойство("П000110002020_" + НомерСтроки) Цикл
				
				Если ДанныеСтраницы["П000110002020_" + НомерСтроки] = "" Тогда 
					НомерСтроки = НомерСтроки + 1;
					Продолжить;
				КонецЕсли;
				
				// копируем узел, соответствующий строке
				ЭкзСумПУНал1 = СкопироватьУзел(ЭкзСумПУНеПБ, СумПуНал);
				
				// заполняем скопированный узел
				Для Каждого Эл Из ЭкзСумПУНал1.Строки Цикл
						
					Если Эл.Строки.Количество() = 0 Тогда
						ВывестиПоказательВXML(Эл, ДанныеСтраницы[Эл.Ключ + "_" + НомерСтроки]);
					Иначе
						Для Каждого Эл2 Из Эл.Строки Цикл
							ВывестиПоказательВXML(Эл2, ДанныеСтраницы[Эл2.Ключ + "_" + НомерСтроки]);
						КонецЦикла;
					КонецЕсли;
				КонецЦикла;
				
				НомерСтроки = НомерСтроки + 1;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Раздел 1.2.
	СумПУ_ПБ = ПолучитьПодчиненныйЭлемент(СумНалПУ, "СумПУ_ПБ");
	
	ДанныеРаздела12 = мДанныеОтчета.Раздел12;
	Для Каждого Стр Из ДанныеРаздела12 Цикл
		
		ДанныеСтраницы = Стр.Данные[0].Значение;
		
		Если ЗаполненРаздел1_2(ДанныеСтраницы) Тогда
			
			// создаем копированием узел, соответствующий экземпляру раздела
			ЭкзСумПУ_ПБ = СкопироватьУзел(СумНалПУ, СумПУ_ПБ);
			
			// заполняем немножественные показатели табличной части
			Для Каждого Эл Из ЭкзСумПУ_ПБ.Строки Цикл
				Если Эл.Строки.Количество() = 0 Тогда
					ВывестиПоказательВXML(Эл, ДанныеСтраницы[Эл.Ключ]);
				КонецЕсли;
			КонецЦикла;
			
			// заполняем табличную часть
			СумПуНал = ПолучитьПодчиненныйЭлемент(ЭкзСумПУ_ПБ , "СумПУНал");
			
			НомерСтроки = 1;
			Пока ДанныеСтраницы.Свойство("П000120002020_" + НомерСтроки) Цикл
				
				Если ДанныеСтраницы["П000120002020_" + НомерСтроки] = "" Тогда 
					 НомерСтроки = НомерСтроки + 1;
					 Продолжить;
				 КонецЕсли;
				
				// копируем узел, соответствующий строке
				ЭкзСумПУНал2 = СкопироватьУзел(ЭкзСумПУ_ПБ, СумПуНал);
				
				// заполняем скопированный узел
				Для Каждого Эл Из ЭкзСумПУНал2.Строки Цикл
					
					Если Эл.Строки.Количество() = 0 Тогда
						ВывестиПоказательВXML(Эл, ДанныеСтраницы[Эл.Ключ + "_" + НомерСтроки]);
					Иначе
						Для Каждого Эл2 Из Эл.Строки Цикл
							ВывестиПоказательВXML(Эл2, ДанныеСтраницы[Эл2.Ключ + "_" + НомерСтроки]);
						КонецЦикла;
					КонецЕсли;
				КонецЦикла;
				
				НомерСтроки = НомерСтроки + 1;
				
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
	
	// Раздел 1.3.
	СумАвИстНП = ПолучитьПодчиненныйЭлемент(СумНалПУ, "СумАвИстНП");
	
	ДанныеРаздела13 = мДанныеОтчета.Раздел13;
	Для Каждого Стр Из ДанныеРаздела13 Цикл
		
		ДанныеСтраницы = Стр.Данные[0].Значение;
		Если ЗаполненРаздел1_3(ДанныеСтраницы) Тогда
					
			// создаем копированием узел, соответствующий экземпляру раздела
			ЭкзСумАвИстНП = СкопироватьУзел(СумНалПУ, СумАвИстНП);
			
			// заполняем немножественные показатели табличной части
			Для Каждого Эл Из ЭкзСумАвИстНП.Строки Цикл
				Если Эл.Строки.Количество() = 0 Тогда
					ВывестиПоказательВXML(Эл, ДанныеСтраницы[Эл.Ключ]);
				КонецЕсли;
			КонецЦикла;
			
			// заполняем табличную часть
			СумПуНал = ПолучитьПодчиненныйЭлемент(ЭкзСумАвИстНП , "СумПУНал");
			
			НомерСтроки = 1;
			Пока ДанныеСтраницы.Свойство("П000130002020_" + НомерСтроки) Цикл
				
				Если ДанныеСтраницы["П000130002020_" + НомерСтроки] = "" Тогда 
					 НомерСтроки = НомерСтроки + 1;
					 Продолжить;
				 КонецЕсли;
				
				// копируем узел, соответствующий строке
				ЭкзСумПУНал3 = СкопироватьУзел(ЭкзСумАвИстНП, СумПуНал);
				
				// заполняем скопированный узел
				Для Каждого Эл Из ЭкзСумПУНал3.Строки Цикл
					
				
					Если Эл.Строки.Количество() = 0 Тогда
						ВывестиПоказательВXML(Эл, ДанныеСтраницы[Эл.Ключ + "_" + НомерСтроки]);
					Иначе
						Для Каждого Эл2 Из Эл.Строки Цикл
							ВывестиПоказательВXML(Эл2, ДанныеСтраницы[Эл2.Ключ + "_" + НомерСтроки]);
						КонецЦикла;
					КонецЕсли;
				КонецЦикла;
				НомерСтроки = НомерСтроки + 1;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	// заполнение раздела 2
	РасчАкциз = ПолучитьПодчиненныйЭлемент(УзелРодитель, "РасчАкциз");
	ДанныеРаздела2 = мДанныеОтчета.Раздел2;
	ДанныеРаздела24 = мДанныеОтчета.Раздел24;
	ДанныеРаздела25 = мДанныеОтчета.Раздел25;
	Для Каждого СтрДанныеРаздела2 Из ДанныеРаздела2 Цикл
		
		ИндексСтраницы = ДанныеРаздела2.Индекс(СтрДанныеРаздела2);
		
		ДанныеСтраницы2 = СтрДанныеРаздела2.Данные[0].Значение;
		ДанныеСтраницы24 = ДанныеРаздела24.Получить(ИндексСтраницы).Данные[0].Значение;
		ДанныеСтраницы25 = ДанныеРаздела25.Получить(ИндексСтраницы).Данные[0].Значение;
		
		// создаем копированием узел, соответствующий экземпляру раздела
		ЭкзРасчАкциз = СкопироватьУзел(УзелРодитель, РасчАкциз);
		
		// заполняем немножественные показатели узла 
		Для Каждого Эл Из ЭкзРасчАкциз.Строки Цикл
			Если Эл.Строки.Количество() = 0 Тогда
				ВывестиПоказательВXML(Эл, ДанныеСтраницы2[Эл.Ключ]);
			КонецЕсли;
		КонецЦикла;
		
		ОперПТ = ПолучитьПодчиненныйЭлемент( ЭкзРасчАкциз, "ОперПТ");
		ОперПТПок = ПолучитьПодчиненныйЭлемент( ОперПТ, "ОперПТПок");
		
		НомерСтроки = 1;
		Пока ДанныеСтраницы2.Свойство("П000210001001_" + НомерСтроки) Цикл
			
			// копируем узел, соответствующий строке
			ЭкзОперПтПок = СкопироватьУзел(ОперПТ, ОперПТПок);
			
			// заполняем скопированный узел
			Для Каждого Эл Из ЭкзОперПтПок.Строки Цикл
				Если Эл.Строки.Количество() = 0 Тогда
					ВывестиПоказательВXML(Эл, ДанныеСтраницы2[Эл.Ключ + "_" + НомерСтроки]);
				Иначе
					Для Каждого Эл2 Из Эл.Строки Цикл
						ВывестиПоказательВXML(Эл2, ДанныеСтраницы2[Эл2.Ключ + "_" + НомерСтроки]);
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
			
			НомерСтроки = НомерСтроки + 1;
			
		КонецЦикла;
		
		// заполняем РасчНалУпл (раздел 2.2)
		СумВыч = ПолучитьПодчиненныйЭлемент(ЭкзРасчАкциз, "СумВыч");
		СумВычПок = ПолучитьПодчиненныйЭлемент(СумВыч, "СумВычПок");
		
		Для Сч = 1 по 9 Цикл 
			
			Если ДанныеСтраницы2["П00022000"+сч+"001"] = "" Тогда 
				Продолжить;
			КонецЕсли;	
			ЭкзСумВычПок = СкопироватьУзел(СумВыч, СумВычПок);
			
				// заполняем скопированный узел
			ЗадатьЗначениеЭлемента(ЭкзСумВычПок , "СумВыч", ДанныеСтраницы2["П00022000"+сч+"002"]);
			ЗадатьЗначениеЭлемента(ЭкзСумВычПок , "КодПок", ДанныеСтраницы2["П00022000"+сч+"001"]);
				
			КонецЦикла;
		
		// заполняем РасчНалУпл (раздел 2.3)
		СумПУ = ПолучитьПодчиненныйЭлемент(ЭкзРасчАкциз, "СумПУ");
		СумПУПок = ПолучитьПодчиненныйЭлемент(СумПУ, "СумПУПок");
		
		Если (СокрЛП(ДанныеСтраницы2["П000230001000"]) = "0" И  СокрЛП(ДанныеСтраницы2["П000230002000"]) <> "0")
			или (СокрЛП(ДанныеСтраницы2["П000230002000"]) = "0" И  СокрЛП(ДанныеСтраницы2["П000230001000"]) <> "0") тогда // то есть заполнен только один показатель
			ЗаполненОдинПоказатель = Истина;
		Иначе ЗаполненОдинПоказатель = Ложь;
		КонецЕсли;
		
		Для сч = 1 по 2 Цикл 
			
			Если ЗаполненОдинПоказатель И СокрЛП(ДанныеСтраницы2["П00023000"+сч+"000"]) = "0" тогда //не берем строку с нулевым значением
				 Продолжить;
			 КонецЕсли;
			 
				 
			 ЭкзСумПУПок = СкопироватьУзел(СумПУ, СумПУПок);
			// заполняем скопированный узел
			ЗадатьЗначениеЭлемента(ЭкзСумПУПок , "СумАкциз", ДанныеСтраницы2["П00023000"+сч+"000"]);
			ЗадатьЗначениеЭлемента(ЭкзСумПУПок , "КодПок", ДанныеСтраницы2["П00023000"+сч+"001"]);
				
		КонецЦикла;
		
		// заполняем РасчНалВыч (раздел 2.4)
		РеалПТИн = ПолучитьПодчиненныйЭлемент(ЭкзРасчАкциз, "РеалПТИн");
		РеалПТИнПок = ПолучитьПодчиненныйЭлемент(РеалПТИн, "РеалПТИнПок");
		
		НомерСтроки = 1;
		Пока ДанныеСтраницы24.Свойство("П000240001001_" + НомерСтроки) Цикл
			
			ЭкзРеалПТИнПок = СкопироватьУзел(РеалПТИн, РеалПТИнПок);
			Для Каждого Стр Из ЭкзРеалПТИнПок.Строки Цикл
				ВывестиПоказательВXML(Стр, ДанныеСтраницы24[Стр.Ключ + "_" + НомерСтроки]);
			КонецЦикла;
			
			НомерСтроки = НомерСтроки + 1;
			
		КонецЦикла;
		
		// заполняем РасчНалУпл (раздел 2.5)
		АвансИсчисл = ПолучитьПодчиненныйЭлемент(ЭкзРасчАкциз, "АвансИсчисл");
		
		
		// заполняем немножественные показатели узла 
		Для Каждого Эл Из АвансИсчисл.Строки Цикл
			Если Эл.Строки.Количество() = 0 Тогда
				ВывестиПоказательВXML(Эл, ДанныеСтраницы25[Эл.Ключ]);
			КонецЕсли;
		КонецЦикла;
		
		
		АвансИсчислПок = ПолучитьПодчиненныйЭлемент(АвансИсчисл, "АвансПок");
		
		счПокПустой  = 0;
		Для сч = 1 по 7 Цикл
			
			Если    СокрЛП(ДанныеСтраницы25["П00025000"+сч+"002"]) = "0"  тогда
				счПокПустой = счПокПустой + 1;
				Продолжить;
			КонецЕсли;	
			ЭкзАвансИсчислПок = СкопироватьУзел(АвансИсчисл, АвансИсчислПок);
			
			// заполняем скопированный узел
			ЗадатьЗначениеЭлемента(ЭкзАвансИсчислПок , "СумАвПлат", ДанныеСтраницы25["П00025000"+сч+"002"]);
			ЗадатьЗначениеЭлемента(ЭкзАвансИсчислПок , "КодПок", ДанныеСтраницы25["П00025000"+сч+"001"]);
			
		КонецЦикла;
		
		Если счПокПустой = 7 Тогда // не заполнен ни один показатель	
			// нужно добавить две пустые строки
			
			//6005
			ЭкзАвансИсчислПок6005 = СкопироватьУзел(АвансИсчисл, АвансИсчислПок);
			ЗадатьЗначениеЭлемента(ЭкзАвансИсчислПок6005 , "СумАвПлат", ДанныеСтраницы25["П000250005002"]);
			ЗадатьЗначениеЭлемента(ЭкзАвансИсчислПок6005 , "КодПок", ДанныеСтраницы25["П000250005001"]);
			
			ЭкзАвансИсчислПок6007 = СкопироватьУзел(АвансИсчисл, АвансИсчислПок);
			ЗадатьЗначениеЭлемента(ЭкзАвансИсчислПок6007 , "СумАвПлат", ДанныеСтраницы25["П000250007002"]);
			ЗадатьЗначениеЭлемента(ЭкзАвансИсчислПок6007 , "КодПок", ДанныеСтраницы25["П000250007001"]);
		КонецЕсли;
		
	КонецЦикла;
	
	 //Приложение 1
	РасчНалБазПТ = ПолучитьПодчиненныйЭлемент(УзелРодитель, "РасчНалБазПТ");
	
	ДанныеПрил1 = мДанныеОтчета.Приложение1;
	Для Каждого Стр Из ДанныеПрил1 Цикл
		
		ДанныеСтраницы = Стр.Данные[0].Значение;
		Если НЕ СтраницаПуста(ДанныеСтраницы, "Приложение1", УзелРодитель.Владелец()) Тогда
			
			// создаем копированием узел, соответствующий экземпляру раздела
			ЭкзРасчНалБазПТ = СкопироватьУзел(УзелРодитель, РасчНалБазПТ);
			
			// заполняем немножественные показатели табличной части
			Для Каждого Эл Из ЭкзРасчНалБазПТ.Строки Цикл
				Если Эл.Строки.Количество() = 0 Тогда
					ВывестиПоказательВXML(Эл, ДанныеСтраницы[Эл.Ключ]);
				КонецЕсли;
			КонецЦикла;
			
			// заполняем табличную часть
			НалБазаПок = ПолучитьПодчиненныйЭлемент(ЭкзРасчНалБазПТ , "НалБазаПок");
			
			НомерСтроки = 1;
			Пока ДанныеСтраницы.Свойство("П000900000001_" + НомерСтроки) Цикл
				
				// копируем узел, соответствующий строке
				ЭкзНалБазаПок = СкопироватьУзел(ЭкзРасчНалБазПТ, НалБазаПок);
				
				// заполняем скопированный узел
				Для Каждого Эл Из ЭкзНалБазаПок.Строки Цикл
					Если Эл.Строки.Количество() = 0 Тогда
						ВывестиПоказательВXML(Эл, ДанныеСтраницы[Эл.Ключ + "_" + НомерСтроки]);
					Иначе
						Для Каждого Эл2 Из Эл.Строки Цикл
							ВывестиПоказательВXML(Эл2, ДанныеСтраницы[Эл2.Ключ + "_" + НомерСтроки]);
						КонецЦикла;
					КонецЕсли;
				КонецЦикла;
				НомерСтроки = НомерСтроки + 1;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	//Приложение 2
	АвансСпирт = ПолучитьПодчиненныйЭлемент(УзелРодитель, "АвансСпирт");
	
	ДанныеПрил2 = мДанныеОтчета.Приложение2;
	Для Каждого Стр Из ДанныеПрил2 Цикл
		
		ДанныеСтраницы = Стр.Данные[0].Значение;
		Если НЕ СтраницаПуста(ДанныеСтраницы, "Приложение2", УзелРодитель.Владелец()) Тогда
			
			// создаем копированием узел, соответствующий экземпляру раздела
			ЭкзАвансСпирт = СкопироватьУзел(УзелРодитель, АвансСпирт);
			
			// заполняем немножественные показатели табличной части
			Для Каждого Эл Из ЭкзАвансСпирт.Строки Цикл
				Если Эл.Строки.Количество() = 0 Тогда
					ВывестиПоказательВXML(Эл, ДанныеСтраницы[Эл.Ключ]);
				КонецЕсли;
			КонецЦикла;
			
			// заполняем табличную часть
			АвансПриобрПок = ПолучитьПодчиненныйЭлемент(ЭкзАвансСпирт, "АвансПриобрПок");
			
			НомерСтроки = 1;
			Пока ДанныеСтраницы.Свойство("П000910000001_" + НомерСтроки) Цикл
				
				// копируем узел, соответствующий строке
				ЭкзАвансПриобрПок = СкопироватьУзел(ЭкзАвансСпирт, АвансПриобрПок);
				
				// заполняем скопированный узел
				Для Каждого Эл Из ЭкзАвансПриобрПок.Строки Цикл
					Если Эл.Строки.Количество() = 0 Тогда
						ВывестиПоказательВXML(Эл, ДанныеСтраницы[Эл.Ключ + "_" + НомерСтроки]);
					Иначе
						Для Каждого Эл2 Из Эл.Строки Цикл
							ВывестиПоказательВXML(Эл2, ДанныеСтраницы[Эл2.Ключ + "_" + НомерСтроки]);
						КонецЦикла;
					КонецЕсли;
				КонецЦикла;
				НомерСтроки = НомерСтроки + 1;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;

	//Приложение 3
	ОбъемСпиртРеал = ПолучитьПодчиненныйЭлемент(УзелРодитель, "ОбъемСпиртРеал");
	
	ДанныеПрил3 = мДанныеОтчета.Приложение3;
	Для Каждого Стр Из ДанныеПрил3 Цикл
		
		ДанныеСтраницы = Стр.Данные[0].Значение;
		Если НЕ СтраницаПуста(ДанныеСтраницы, "Приложение3", УзелРодитель.Владелец()) Тогда
			
			// создаем копированием узел, соответствующий экземпляру раздела
			ЭкзОбъемСпиртРеал = СкопироватьУзел(УзелРодитель, ОбъемСпиртРеал);
			
			// заполняем немножественные показатели табличной части
			Для Каждого Эл Из ЭкзОбъемСпиртРеал.Строки Цикл
				Если Эл.Строки.Количество() = 0 Тогда
					ВывестиПоказательВXML(Эл, ДанныеСтраницы[Эл.Ключ]);
				КонецЕсли;
			КонецЦикла;
			
			// заполняем табличную часть
			АвансРеалПок = ПолучитьПодчиненныйЭлемент(ЭкзОбъемСпиртРеал, "АвансРеалПок");
			
			НомерСтроки = 1;
			Пока ДанныеСтраницы.Свойство("П000920000001_" + НомерСтроки) Цикл
				
				// копируем узел, соответствующий строке
				ЭкзАвансРеалПок = СкопироватьУзел(ЭкзОбъемСпиртРеал, АвансРеалПок);
				
				// заполняем скопированный узел
				Для Каждого Эл Из ЭкзАвансРеалПок.Строки Цикл
					Если Эл.Строки.Количество() = 0 Тогда
						ВывестиПоказательВXML(Эл, ДанныеСтраницы[Эл.Ключ + "_" + НомерСтроки]);
					Иначе
						Для Каждого Эл2 Из Эл.Строки Цикл
							ВывестиПоказательВXML(Эл2, ДанныеСтраницы[Эл2.Ключ + "_" + НомерСтроки]);
						КонецЦикла;
					КонецЕсли;
				КонецЦикла;
				НомерСтроки = НомерСтроки + 1;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	//Приложение 4
	СпиртПолучСвид = ПолучитьПодчиненныйЭлемент(УзелРодитель, "СпиртПолучСвид");
	
	ДанныеПрил4 = мДанныеОтчета.Приложение4;
	Для Каждого Стр Из ДанныеПрил4 Цикл
		
		ДанныеСтраницы = Стр.Данные[0].Значение;
		Если НЕ СтраницаПуста(ДанныеСтраницы, "Приложение4", УзелРодитель.Владелец()) Тогда
			
			// создаем копированием узел, соответствующий экземпляру раздела
			ЭкзСпиртПолучСвид = СкопироватьУзел(УзелРодитель, СпиртПолучСвид);
			
			// заполняем немножественные показатели табличной части
			Для Каждого Эл Из ЭкзСпиртПолучСвид.Строки Цикл
				Если Эл.Строки.Количество() = 0 Тогда
					ВывестиПоказательВXML(Эл, ДанныеСтраницы[Эл.Ключ]);
				КонецЕсли;
			КонецЦикла;
			
			//немножественные однотипные показатели
			СвСпиртПолПер =  ПолучитьПодчиненныйЭлемент(ЭкзСпиртПолучСвид, "СвСпиртПолПер");
			СпиртНП_ПТ = ПолучитьПодчиненныйЭлемент(СвСпиртПолПер, "СпиртНП_ПТ");
			
			Для сч = 5 по 6 Цикл
				
			Если  СокрЛП(ДанныеСтраницы["П00093000"+сч+"003"]) = "0" тогда //не берем строку с нулевым значением
				 Продолжить;
			 КонецЕсли;
				
			ЭкзСпиртНП_ПТ = СкопироватьУзел(СвСпиртПолПер , СпиртНП_ПТ);
			
				// заполняем скопированный узел
			ЗадатьЗначениеЭлемента(ЭкзСпиртНП_ПТ  , "СпиртНП", ДанныеСтраницы["П00093000"+сч+"003"]);
			ЗадатьЗначениеЭлемента(ЭкзСпиртНП_ПТ  , "КодПТ", ДанныеСтраницы["П00093000"+сч+"001"]);
			
				
			КонецЦикла;
		
			// заполняем табличную часть
			СвОбСпиртСФ = ПолучитьПодчиненныйЭлемент(ЭкзСпиртПолучСвид, "СвОбСпиртСФ");
			ОбСпиртСФПТ = ПолучитьПодчиненныйЭлемент(СвОбСпиртСФ, "ОбСпиртСФПТ");
			
			НомерСтроки = 1;
			Пока ДанныеСтраницы.Свойство("П000930000001_" + НомерСтроки) Цикл
				
				// копируем узел, соответствующий строке
				ЭкзОбСпиртСФПТ = СкопироватьУзел(СвОбСпиртСФ, ОбСпиртСФПТ);
				
				// заполняем скопированный узел
				Для Каждого Эл Из ЭкзОбСпиртСФПТ.Строки Цикл
					Если Эл.Строки.Количество() = 0 Тогда
						ВывестиПоказательВXML(Эл, ДанныеСтраницы[Эл.Ключ + "_" + НомерСтроки]);
					Иначе
						Для Каждого Эл2 Из Эл.Строки Цикл
							ВывестиПоказательВXML(Эл2, ДанныеСтраницы[Эл2.Ключ + "_" + НомерСтроки]);
						КонецЦикла;
					КонецЕсли;
				КонецЦикла;
				НомерСтроки = НомерСтроки + 1;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	//Приложение 5
	СпиртПостСвид = ПолучитьПодчиненныйЭлемент(УзелРодитель, "СпиртПостСвид");
	
	ДанныеПрил5 = мДанныеОтчета.Приложение5;
	Для Каждого Стр Из ДанныеПрил5 Цикл
		
		ДанныеСтраницы = Стр.Данные[0].Значение;
		Если НЕ СтраницаПуста(ДанныеСтраницы, "Приложение5", УзелРодитель.Владелец()) Тогда
			
			// создаем копированием узел, соответствующий экземпляру раздела
			ЭкзСпиртПостСвид = СкопироватьУзел(УзелРодитель, СпиртПостСвид);
			
			// заполняем немножественные показатели табличной части
			Для Каждого Эл Из ЭкзСпиртПостСвид.Строки Цикл
				Если Эл.Строки.Количество() = 0 Тогда
					ВывестиПоказательВXML(Эл, ДанныеСтраницы[Эл.Ключ]);
				КонецЕсли;
			КонецЦикла;
			
			//немножественные однотипные показатели
			СвСпиртПостПер =  ПолучитьПодчиненныйЭлемент(ЭкзСпиртПостСвид, "СвСпиртПостПер");
			СпиртНП_ПТ = ПолучитьПодчиненныйЭлемент(СвСпиртПостПер, "СпиртНП_ПТ");
			
			Для сч = 5 по 6 Цикл
				
				Если  СокрЛП(ДанныеСтраницы["П00094000"+сч+"003"]) = "0" тогда //не берем строку с нулевым значением
					Продолжить;
				КонецЕсли;
				
				ЭкзСпиртНП_ПТ = СкопироватьУзел(СвСпиртПостПер , СпиртНП_ПТ);
				
				// заполняем скопированный узел
				ЗадатьЗначениеЭлемента(ЭкзСпиртНП_ПТ  , "СпиртНП", ДанныеСтраницы["П00094000"+сч+"003"]);
				ЗадатьЗначениеЭлемента(ЭкзСпиртНП_ПТ  , "КодПТ", ДанныеСтраницы["П00094000"+сч+"001"]);
				
			КонецЦикла;
			
			// заполняем табличную часть
			СвОбСпиртСФ = ПолучитьПодчиненныйЭлемент(ЭкзСпиртПостСвид, "СвОбСпиртСФ");
			ОбСпиртСФПТ = ПолучитьПодчиненныйЭлемент(СвОбСпиртСФ, "ОбСпиртСФПТ");
			
			НомерСтроки = 1;
			Пока ДанныеСтраницы.Свойство("П000940000001_" + НомерСтроки) Цикл
				
				// копируем узел, соответствующий строке
				ЭкзОбСпиртСФПТ = СкопироватьУзел(СвОбСпиртСФ, ОбСпиртСФПТ);
				
				// заполняем скопированный узел
				Для Каждого Эл Из ЭкзОбСпиртСФПТ.Строки Цикл
					Если Эл.Строки.Количество() = 0 Тогда
						ВывестиПоказательВXML(Эл, ДанныеСтраницы[Эл.Ключ + "_" + НомерСтроки]);
					Иначе
						Для Каждого Эл2 Из Эл.Строки Цикл
							ВывестиПоказательВXML(Эл2, ДанныеСтраницы[Эл2.Ключ + "_" + НомерСтроки]);
						КонецЦикла;
					КонецЕсли;
				КонецЦикла;
				НомерСтроки = НомерСтроки + 1;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	//Приложение 6
	БензПолучСвид = ПолучитьПодчиненныйЭлемент(УзелРодитель, "БензПолучСвид");
	
	ДанныеПрил6 = мДанныеОтчета.Приложение6;
	Для Каждого Стр Из ДанныеПрил6 Цикл
		
		ДанныеСтраницы = Стр.Данные[0].Значение;
		Если НЕ СтраницаПуста(ДанныеСтраницы, "Приложение6", УзелРодитель.Владелец()) Тогда
			
			// создаем копированием узел, соответствующий экземпляру раздела
			ЭкзБензПолучСвид = СкопироватьУзел(УзелРодитель, БензПолучСвид);
			
			// заполняем немножественные показатели табличной части
			Для Каждого Эл Из ЭкзБензПолучСвид.Строки Цикл
				Если Эл.Строки.Количество() = 0 Тогда
					ВывестиПоказательВXML(Эл, ДанныеСтраницы[Эл.Ключ]);
				КонецЕсли;
			КонецЦикла;
			
			//данные об организации в зависит от ЮР/ФЛ
			
			Если СтрДлина(СокрЛП(ДанныеСтраницы["П000950002000"])) = 12 Тогда //ФЛ
				СведИППост =  ПолучитьПодчиненныйЭлемент(ЭкзБензПолучСвид, "СведИППост");
			Для Каждого Эл Из СведИППост.Строки Цикл
				Если Эл.Строки.Количество() = 0 Тогда
					ВывестиПоказательВXML(Эл, ДанныеСтраницы[Эл.Ключ]);
				КонецЕсли;
			КонецЦикла;
			
				ФИОИП = РегламентированнаяОтчетность.РазложитьФИО(ДанныеСтраницы["П000950001000"]);
 				УзелФИО =  ПолучитьПодчиненныйЭлемент(СведИППост, "ФИО");
				
				ЗадатьЗначениеЭлемента(УзелФИО, "Фамилия", ФИОИП.Фамилия);
				ЗадатьЗначениеЭлемента(УзелФИО, "Имя", ФИОИП.Имя);
				ЗадатьЗначениеЭлемента(УзелФИО, "Отчество", ФИОИП.Отчество);
			
			Иначе //ЮЛ
				СведОргПост =  ПолучитьПодчиненныйЭлемент(ЭкзБензПолучСвид, "СведОргПост");
			Для Каждого Эл Из СведОргПост.Строки Цикл
				Если Эл.Строки.Количество() = 0 Тогда
					ВывестиПоказательВXML(Эл, ДанныеСтраницы[Эл.Ключ]);
				КонецЕсли;
			КонецЦикла;
			КонецЕсли;	
			
			//еще один нижестоящий узел
			СвБензНатур =  ПолучитьПодчиненныйЭлемент(ЭкзБензПолучСвид, "СвБензНатур");
			Для Каждого Эл Из СвБензНатур.Строки Цикл
				Если Эл.Строки.Количество() = 0 Тогда
					ВывестиПоказательВXML(Эл, ДанныеСтраницы[Эл.Ключ]);
				КонецЕсли;
			КонецЦикла;
			// заполняем табличную часть
			СвОбБензСФ = ПолучитьПодчиненныйЭлемент(ЭкзБензПолучСвид, "СвОбБензСФ");
			ОбБензСФ = ПолучитьПодчиненныйЭлемент(СвОбБензСФ, "ОбБензСФ");
			
			НомерСтроки = 1;
			Пока ДанныеСтраницы.Свойство("П000950000001_" + НомерСтроки) Цикл
				
				// копируем узел, соответствующий строке
				ЭкзОбБензСФ = СкопироватьУзел(СвОбБензСФ, ОбБензСФ);
				
				// заполняем скопированный узел
				Для Каждого Эл Из ЭкзОбБензСФ.Строки Цикл
					Если Эл.Строки.Количество() = 0 Тогда
						ВывестиПоказательВXML(Эл, ДанныеСтраницы[Эл.Ключ + "_" + НомерСтроки]);
					Иначе
						Для Каждого Эл2 Из Эл.Строки Цикл
							ВывестиПоказательВXML(Эл2, ДанныеСтраницы[Эл2.Ключ + "_" + НомерСтроки]);
						КонецЦикла;
					КонецЕсли;
				КонецЦикла;
				НомерСтроки = НомерСтроки + 1;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	//Приложение 7
	БензПостСвид = ПолучитьПодчиненныйЭлемент(УзелРодитель, "БензПостСвид");
	
	ДанныеПрил7 = мДанныеОтчета.Приложение7;
	Для Каждого Стр Из ДанныеПрил7 Цикл
		
		ДанныеСтраницы = Стр.Данные[0].Значение;
		Если НЕ СтраницаПуста(ДанныеСтраницы, "Приложение7", УзелРодитель.Владелец()) Тогда
			
			// создаем копированием узел, соответствующий экземпляру раздела
			ЭкзБензПостСвид = СкопироватьУзел(УзелРодитель, БензПостСвид);
			
			// заполняем немножественные показатели табличной части
			Для Каждого Эл Из ЭкзБензПостСвид.Строки Цикл
				Если Эл.Строки.Количество() = 0 Тогда
					ВывестиПоказательВXML(Эл, ДанныеСтраницы[Эл.Ключ]);
				КонецЕсли;
			КонецЦикла;
			
			//данные об организации в зависит от ЮР/ФЛ
			
			Если СтрДлина(СокрЛП(ДанныеСтраницы["П000960002000"])) = 12 Тогда //ФЛ
				СведИППолуч =  ПолучитьПодчиненныйЭлемент(ЭкзБензПостСвид, "СведИППолуч");
				Для Каждого Эл Из СведИППолуч.Строки Цикл
					Если Эл.Строки.Количество() = 0 Тогда
						ВывестиПоказательВXML(Эл, ДанныеСтраницы[Эл.Ключ]);
					КонецЕсли;
				КонецЦикла;
				
				ФИОИП = РегламентированнаяОтчетность.РазложитьФИО(ДанныеСтраницы["П000960001000"]);
				УзелФИО =  ПолучитьПодчиненныйЭлемент(СведИППолуч, "ФИО");
				
				ЗадатьЗначениеЭлемента(УзелФИО, "Фамилия", ФИОИП.Фамилия);
				ЗадатьЗначениеЭлемента(УзелФИО, "Имя", ФИОИП.Имя);
				ЗадатьЗначениеЭлемента(УзелФИО, "Отчество", ФИОИП.Отчество);
				
			Иначе //ЮЛ
				СведОргПолуч =  ПолучитьПодчиненныйЭлемент(ЭкзБензПостСвид, "СведОргПолуч");
				Для Каждого Эл Из СведОргПолуч.Строки Цикл
					Если Эл.Строки.Количество() = 0 Тогда
						ВывестиПоказательВXML(Эл, ДанныеСтраницы[Эл.Ключ]);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;	
			
			//еще один нижестоящий узел
			СвБензНатур =  ПолучитьПодчиненныйЭлемент(ЭкзБензПостСвид, "СвБензНатур");
			Для Каждого Эл Из СвБензНатур.Строки Цикл
				Если Эл.Строки.Количество() = 0 Тогда
					ВывестиПоказательВXML(Эл, ДанныеСтраницы[Эл.Ключ]);
				КонецЕсли;
			КонецЦикла;
			
			// заполняем табличную часть
			СвОбБензСФ = ПолучитьПодчиненныйЭлемент(ЭкзБензПостСвид, "СвОбБензСФ");
			ОбБензСФ = ПолучитьПодчиненныйЭлемент(СвОбБензСФ, "ОбБензСФ");
			
			НомерСтроки = 1;
			Пока ДанныеСтраницы.Свойство("П000960000001_" + НомерСтроки) Цикл
				
				// копируем узел, соответствующий строке
				ЭкзОбБензСФ = СкопироватьУзел(СвОбБензСФ, ОбБензСФ);
				
				// заполняем скопированный узел
				Для Каждого Эл Из ЭкзОбБензСФ.Строки Цикл
					Если Эл.Строки.Количество() = 0 Тогда
						ВывестиПоказательВXML(Эл, ДанныеСтраницы[Эл.Ключ + "_" + НомерСтроки]);
					Иначе
						Для Каждого Эл2 Из Эл.Строки Цикл
							ВывестиПоказательВXML(Эл2, ДанныеСтраницы[Эл2.Ключ + "_" + НомерСтроки]);
						КонецЦикла;
					КонецЕсли;
				КонецЦикла;
				НомерСтроки = НомерСтроки + 1;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПроверитьДанные(Узел)
	
	СтатусПроверки = Истина;
	Если ТипЗнч(Узел) <> Тип("ДеревоЗначений") Тогда
		Если НЕ ЗначениеСоответствуетФормату(Узел) Тогда
			СтатусПроверки = Ложь;
		КонецЕсли;
	КонецЕсли;
	Для Каждого Стр из Узел.Строки Цикл
		СтатусПроверки = (ПроверитьДанные(Стр) И СтатусПроверки); // именно в указанном порядке для выдачи всех ошибок
	КонецЦикла;
	Возврат СтатусПроверки;
	
КонецФункции

&НаСервере
Функция ПолучитьПоказателиРаздела(ДеревоВыгрузки, Раздел)
	
	ПоказателиРаздела = ДеревоВыгрузки.Строки.НайтиСтроки(Новый Структура("Раздел", Раздел), Истина);
	КоличествоСтрокРаздела = ПоказателиРаздела.Количество();
	Для ОбрИнд = 1 По КоличествоСтрокРаздела Цикл
		Инд = КоличествоСтрокРаздела - ОбрИнд;
		ТекСтр = ПоказателиРаздела[Инд];
		Если НЕ ЗначениеЗаполнено(ТекСтр.Ключ) Тогда
			ПоказателиРаздела.Удалить(Инд);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ПоказателиРаздела;
	
КонецФункции

&НаСервере
Функция ПоказательЗаполнен(Показатель, Значение)
	
	Возврат ЗначениеЗаполнено(Значение) И НЕ (СокрЛП(Показатель.Формат) = "N" И Показатель.МаксРазмерность = 15 И ТипЗнч(Значение) = Тип("Число") И Окр(Значение) = 0);
	
КонецФункции

&НаСервере
Функция СтраницаПуста(ДанныеСтраницы, Показатели, ДеревоВыгрузки = Неопределено)
	
	Если ТипЗнч(Показатели) = Тип("Строка") Тогда
		ПоказателиРаздела = ПолучитьПоказателиРаздела(ДеревоВыгрузки, Показатели);
	Иначе
		ПоказателиРаздела = Показатели;
	КонецЕсли;
		
	Для Каждого Пок Из ПоказателиРаздела Цикл
		Если СтруктураРеквизитовФормы.ПоказателиНеанализируемыеНаЗаполненность.Найти(Пок.Ключ) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Если Пок.Многострочность Тогда
			ИндексСтроки = 1;
			ЗначениеПоказателя = Неопределено;
			Пока ДанныеСтраницы.Свойство(Пок.Ключ + "_" + Формат(ИндексСтроки, "ЧГ="), ЗначениеПоказателя) Цикл
				Если ПоказательЗаполнен(Пок, ЗначениеПоказателя) Тогда
					Возврат Ложь;
				КонецЕсли;
				ИндексСтроки = ИндексСтроки + 1;
			КонецЦикла;
		Иначе
			Если ПоказательЗаполнен(Пок, ДанныеСтраницы[Пок.Ключ]) Тогда
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция СкопироватьУзел(Родитель, Узел)
	
	// находим узел с максимальным индексом и с тем же кодом, что и у копируемого, и добавляем новый сразу после найденного
	СтрокиСТемЖеКодом = Родитель.Строки.НайтиСтроки(Новый Структура("Код", Узел.Код), Ложь);
	МаксИндекс = -1;
	Для Каждого СтрокаСТемЖеКодом Из СтрокиСТемЖеКодом Цикл
		ТекИндекс = Родитель.Строки.Индекс(СтрокаСТемЖеКодом);
		Если ТекИндекс > МаксИндекс Тогда
			МаксИндекс = ТекИндекс;
		КонецЕсли;
	КонецЦикла;
	
	ИндексСоздаваемогоУзла = МаксИндекс + 1;
	Если ИндексСоздаваемогоУзла >= Родитель.Строки.Количество() ИЛИ ИндексСоздаваемогоУзла = 0 Тогда // если аналогичный узел не найден или найденный узел - последний
		НовыйУзел = Родитель.Строки.Добавить();
	Иначе
		НовыйУзел = Родитель.Строки.Вставить(ИндексСоздаваемогоУзла);
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(НовыйУзел, Узел, , "Родитель, Строки");
	Для Каждого Стр из Узел.Строки Цикл
		СкопироватьУзел(НовыйУзел, Стр);
	КонецЦикла;
	Возврат НовыйУзел;
	
КонецФункции

&НаСервере
Функция ПолучитьПодчиненныйЭлемент(Узел, КодЭлемента)
	
	ЧислоВместоКодаЭлемента = (ТипЗнч(КодЭлемента) = Тип("Число"));
	Если ТипЗнч(КодЭлемента) = Тип("Число") Тогда
		Если Узел.Строки.Количество() > КодЭлемента Тогда
			Возврат Узел.Строки.Получить(КодЭлемента);
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	Иначе
		Для Каждого Стр Из Узел.Строки Цикл
			Если Стр.Код = КодЭлемента Тогда
				Возврат Стр;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ЗадатьЗначениеЭлемента(Узел, КодЭлемента, Значение)
	
	ВывестиПоказательВXML(ПолучитьПодчиненныйЭлемент(Узел, КодЭлемента), Значение);
	
КонецПроцедуры

&НаСервере
Процедура ПостОбработкаДереваВыгрузки(ДеревоВыгрузки)
	
	// обрабатываем суммы в разделе 1.1
	УзлыНалПУВрем = ДеревоВыгрузки.Строки.НайтиСтроки(Новый Структура("Код, Раздел", "НалПУВрем", "Раздел1"), Истина);
	Для Каждого УзелНалПУВрем Из УзлыНалПУВрем Цикл
		Если ЗначениеЗаполнено(УзелНалПУВрем.Значение) И УзелНалПУВрем.Значение <> "0" Тогда
			УзелНалПУ = УзелНалПУВрем.Родитель.Строки.Найти("НалПУ", "Код");
			УзелНалПУ.Значение = "-" + УзелНалПУВрем.Значение;
		КонецЕсли;
		УзелНалПУВрем.Родитель.Строки.Удалить(УзелНалПУВрем);
	КонецЦикла;
	
	// обрабатываем суммы в разделе 1.2
	УзлыНалПУВрем = ДеревоВыгрузки.Строки.НайтиСтроки(Новый Структура("Код, Раздел", "НалПУВрем", "Раздел12"), Истина);
	Для Каждого УзелНалПУВрем Из УзлыНалПУВрем Цикл
		Если ЗначениеЗаполнено(УзелНалПУВрем.Значение) И УзелНалПУВрем.Значение <> "0" Тогда
			УзелНалПУ = УзелНалПУВрем.Родитель.Строки.Найти("НалПУ", "Код");
			УзелНалПУ.Значение = "-" + УзелНалПУВрем.Значение;
		КонецЕсли;
		УзелНалПУВрем.Родитель.Строки.Удалить(УзелНалПУВрем);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОтсечьНезаполненныеНеобязательныеУзлы(Узел)
	
	КоличествоСтрок = Узел.Строки.Количество();
	Для Инд = 1 По КоличествоСтрок Цикл
		Стр = Узел.Строки.Получить(КоличествоСтрок - Инд);
		ОтсечьНезаполненныеНеобязательныеУзлы(Стр);
	КонецЦикла;
	
	Если ТипЗнч(Узел) <> Тип("ДеревоЗначений") Тогда
		Если (СтрНайти(Узел.Обязательность, "Н") <> 0 ИЛИ СтрНайти(Узел.Обязательность, "H") <> 0) И УзелПуст(Узел) Тогда // учтем оба варианта: кириллицу и латиницу
			РегламентированнаяОтчетность.УдалитьУзел(Узел);
		ИначеЕсли (СтрНайти(Узел.Обязательность, "М") <> 0 ИЛИ СтрНайти(Узел.Обязательность, "M") <> 0) // учтем оба варианта: кириллицу и латиницу
		И УзелПуст(Узел)
		И ?(СтрНайти(Узел.Обязательность, "О") <> 0 ИЛИ СтрНайти(Узел.Обязательность, "O") <> 0, РегламентированнаяОтчетность.ИмеютсяАналогичныеСоседниеУзлыКлюч(Узел), Истина) Тогда
			РегламентированнаяОтчетность.УдалитьУзел(Узел);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция УзелПуст(Узел, ПоказателиНеанализируемыеНаЗаполненность = Неопределено)
	
	ПустойУзел = ?(	Узел.Формат = "N",
				Узел.Значение = "0" ИЛИ (НЕ ЗначениеЗаполнено(Узел.Значение)),
				НЕ ЗначениеЗаполнено(Узел.Значение));
	Для Каждого Стр из Узел.Строки Цикл
		Если НЕ УзелПуст(Стр) Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ПустойУзел;
	
КонецФункции

&НаСервере
Процедура ОбработатьУсловныеЭлементы(Знач ПараметрыВыгрузки, Узел)
	
	Если ТипЗнч(Узел) <> Тип("ДеревоЗначений") Тогда
		Если Узел.Код = ПараметрыВыгрузки.ИмяКлючевогоУзлаСодержательнойЧасти Тогда
			Возврат;
		КонецЕсли;
		РегламентированнаяОтчетность.ДополнитьСтруктуруПараметров(мДанныеОтчета, ПараметрыВыгрузки, Узел);
	КонецЕсли;
	КоличествоСтрок = Узел.Строки.Количество();
	Для Инд = 1 По КоличествоСтрок Цикл
		ТекСтр = Узел.Строки.Получить(КоличествоСтрок - Инд);
		Если НЕ ПустаяСтрока(ТекСтр.Условие) Тогда
			Если НЕ РегламентированнаяОтчетность.УсловиеВыполнено(ЭтаФорма, ПараметрыВыгрузки, ТекСтр.Условие) Тогда
				Узел.Строки.Удалить(ТекСтр);
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		ОбработатьУсловныеЭлементы(ПараметрыВыгрузки, ТекСтр);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ВывестиПоказательВXML(Узел, ЗначениеПоказателя)
	
	МинШирина = Узел.МинРазмерность;
	МаксШирина = Узел.МаксРазмерность;
	
	Если Узел.Формат = "T" ИЛИ Узел.Формат = "Т" Тогда // учтем оба варианта: кириллицу и латиницу
		Если ЗначениеЗаполнено(ЗначениеПоказателя) Тогда
			Узел.Значение = ?(МаксШирина < СтрДлина(СокрЛП(ЗначениеПоказателя)), СокрЛП(Лев(СокрЛП(ЗначениеПоказателя), МаксШирина)), СокрЛП(ЗначениеПоказателя));
		Иначе
			Узел.Значение = Неопределено;
		КонецЕсли;
	ИначеЕсли Узел.Формат = "N" Тогда
		СтрокаФормата = "ЧРД=.;ЧН=0;ЧГ=;";
		Если Узел.МаксРазмерность <> 0 И Узел.МаксРазмерность <> 99999 Тогда
			СтрокаФормата = СтрокаФормата + "ЧЦ=" + Формат(Узел.МаксРазмерность, "ЧГ=") + ";";
		КонецЕсли;
		Если Узел.МинРазмерность <> 99999 Тогда
			СтрокаФормата = СтрокаФормата + "ЧДЦ=" + Формат(Узел.МинРазмерность, "ЧГ=") + ";";
		КонецЕсли;
		Узел.Значение = СокрЛП(Формат(ЗначениеПоказателя, СтрокаФормата));
	ИначеЕсли Узел.Формат = "gYear" Тогда
		Если ТипЗнч(ЗначениеПоказателя) = Тип("Дата") Тогда
			Если ЗначениеЗаполнено(ЗначениеПоказателя) Тогда
				Узел.Значение = СокрЛП(Формат(ЗначениеПоказателя, "ДФ=гггг"));
			Иначе
				Узел.Значение = Неопределено;
			КонецЕсли;
		Иначе
			Узел.Значение = Прав(СокрЛП(ЗначениеПоказателя), 4);
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ПолучитьПервыйПодчиненныйУзелСЗаполненнымКлючом(Родитель)
	
	Для Каждого Стр из Родитель.Строки Цикл
		Если ЗначениеЗаполнено(Стр.Ключ) Тогда
			Возврат Стр;
		КонецЕсли;
	КонецЦикла;
	Возврат Неопределено;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьДаннымиУзел(ПараметрыВыгрузки, Узел, НомерСтроки = Неопределено)
	
	СтрокиУзла = Новый Массив;
	Для Каждого Стр Из Узел.Строки Цикл
		СтрокиУзла.Добавить(Стр);
	КонецЦикла;
	
	Для Каждого Стр из СтрокиУзла Цикл
		Если Стр.Тип = "С" ИЛИ Стр.Тип = "C" Тогда // учтем оба варианта: кириллицу и латиницу
			Если РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(ПараметрыВыгрузки, "ИмяКлючевогоУзлаСодержательнойЧасти") И Стр.Код = ПараметрыВыгрузки.ИмяКлючевогоУзлаСодержательнойЧасти Тогда
				ЗаполнитьСодержательнуюЧасть(Стр);
			ИначеЕсли Стр.Многострочность Тогда
				НомСтр = 1;
				ПодчиненныйЭлемент = ПолучитьПервыйПодчиненныйУзелСЗаполненнымКлючом(Стр);
				КлючПодчиненногоЭлемента = ПодчиненныйЭлемент.Ключ;
				Пока РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(ПараметрыВыгрузки, КлючПодчиненногоЭлемента + "_" + Формат(НомСтр, "ЧГ=")) Цикл
					УзелСоответствующийСтроке = СкопироватьУзел(Узел, Стр);
					ЗаполнитьДаннымиУзел(ПараметрыВыгрузки, УзелСоответствующийСтроке, НомСтр);
					НомСтр = НомСтр + 1;
				КонецЦикла;
			Иначе
				ЗаполнитьДаннымиУзел(ПараметрыВыгрузки, Стр, НомерСтроки);
			КонецЕсли;
		Иначе
			Если ПустаяСтрока(Стр.ЗначениеПоУмолчанию) Тогда
				Если НЕ ПустаяСтрока(Стр.Ключ) Тогда
					ПолныйКодПоказателя = Стр.Ключ + ?(ЗначениеЗаполнено(НомерСтроки), "_" + Формат(НомерСтроки, "ЧГ="), "");
					ЗначениеПоказателя = Неопределено;
					Если ПараметрыВыгрузки.Свойство(ПолныйКодПоказателя, ЗначениеПоказателя) Тогда
						ВывестиПоказательВXML(Стр, ЗначениеПоказателя);
					Иначе
						ВывестиПоказательВXML(Стр, "");
					КонецЕсли;
				Иначе
					Стр.Значение = "";
				КонецЕсли;
			ИначеЕсли Лев(Стр.ЗначениеПоУмолчанию, 1) = "&" Тогда
				ВывестиПоказательВXML(Стр, ПараметрыВыгрузки[Сред(Стр.ЗначениеПоУмолчанию, 2)]);
			Иначе
				Стр.Значение = Стр.ЗначениеПоУмолчанию;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ЗначениеСоответствуетФормату(Стр)
	
	СтатусПроверки = Истина;
	Если Стр.Формат = "Т" ИЛИ Стр.Формат = "T" Тогда // учтем оба варианта: кириллицу и латиницу
		ДлинаЗначения = СтрДлина(Стр.Значение);
		Если ДлинаЗначения < Стр.МинРазмерность Тогда
			СтатусПроверки = Ложь;
			СообщитьВТС("Длина значения показателя """ + РегламентированнаяОтчетность.ПредставлениеПоказателя(Стр) + """ меньше минимально возможной (" + ДлинаЗначения + " < " + Стр.МинРазмерность + ")", "Титульный", "");
		КонецЕсли;
		Если ДлинаЗначения > Стр.МаксРазмерность Тогда
			СтатусПроверки = Ложь;
			СообщитьВТС("Длина значения показателя """ + РегламентированнаяОтчетность.ПредставлениеПоказателя(Стр) + """ больше максимально возможной (" + ДлинаЗначения + " > " + Стр.МаксРазмерность + ")", "Титульный", "");
		КонецЕсли;
	КонецЕсли;
	Возврат СтатусПроверки;
	
КонецФункции

&НаСервере
Функция ВыгрузитьДеревоВXML(ДеревоВыгрузки, ПараметрыВыгрузки)
	
	ПотокXML = РегламентированнаяОтчетность.СоздатьНовыйПотокXML("windows-1251"); // создаем новый поток для записи
	ЗаписатьУзелДереваВXML(ДеревоВыгрузки, ПотокXML, ПараметрыВыгрузки); // пишем дерево в поток
	ТекстДляЗаписи = ПотокXML.Закрыть(); // получаем текст XML

	Возврат ТекстДляЗаписи;
	
КонецФункции

&НаСервере
Функция ЗаписатьУзелДереваВXML(СтрокаДерева, ПотокXML, ПараметрыВыгрузки) Экспорт
	
	Если ТипЗнч(СтрокаДерева) = Тип("ДеревоЗначений") Тогда
		ПотокXML.ЗаписатьНачалоЭлемента("Файл");
		ПотокXML.ЗаписатьАтрибут("xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");
		Для каждого Стр Из СтрокаДерева.Строки Цикл
			ЗаписатьУзелДереваВXML(Стр, ПотокXML, ПараметрыВыгрузки);
		КонецЦикла;
		ПотокXML.ЗаписатьКонецЭлемента();
	Иначе
		Если СтрокаДерева.Тип = "А" ИЛИ СтрокаДерева.Тип = "A" Тогда 
			ПотокXML.ЗаписатьАтрибут(СтрокаДерева.Код, Строка(СтрокаДерева.Значение));
		Иначе
			ПотокXML.ЗаписатьНачалоЭлемента(СтрокаДерева.Код);
			Для каждого Лист из СтрокаДерева.Строки Цикл
				ЗаписатьУзелДереваВXML(Лист, ПотокXML, ПараметрыВыгрузки);
			КонецЦикла;
			ПотокXML.ЗаписатьТекст(Строка(СтрокаДерева.Значение));
			ПотокXML.ЗаписатьКонецЭлемента();
		КонецЕсли;
	КонецЕсли;

КонецФункции

&НаКлиенте
Процедура ВыгрузитьОтчет() Экспорт
	
	Если НЕ ЗначениеЗаполнено(СтруктураРеквизитовФормы.Организация) Тогда
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Организация не выбрана! Выгрузка невозможна.'");
		Сообщение.Сообщить();
		
		Возврат;
		
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьОтчетЗавершение", ЭтотОбъект);
	
	Если Модифицированность Тогда
		СохранитьНаКлиенте(,ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьОтчетЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки = Истина Тогда
		РегламентированнаяОтчетностьКлиент.ПроверитьКонтрольныеСоотношения(ЭтаФорма, ОбработкаКС, Истина);
	КонецЕсли;
	
	ФормаВыгрузкиРеглОтчета = ПолучитьФорму("Документ.ВыгрузкаРегламентированныхОтчетов.Форма.ФормаДокумента", , ЭтаФорма);
	
	СпДокОсн = Новый СписокЗначений;
	СпДокОсн.Добавить(СтруктураРеквизитовФормы.мСохраненныйДок);
	
	ФормаВыгрузкиРеглОтчета.СформироватьИЗаписать(СпДокОсн);
	
КонецПроцедуры

&НаКлиенте
Функция ЗаголовокРегламентированногоОтчета(ДатаНач, ДатаКон, Периодичность = Неопределено) Экспорт
		
	СтрПериодОтчета = ПредставлениеПериода( НачалоДня(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета), КонецДня(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета), "ФП = Истина" );
		
	Если СтрНайти(ЭтаФорма.Заголовок, СтрПериодОтчета) = 0 Тогда
		Возврат ЭтаФорма.Заголовок + " за " + СтрПериодОтчета;
	Иначе
		Возврат ЭтаФорма.Заголовок;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция УниверсальнаяВыгрузка(ТекстВыгрузки = Неопределено, ПроверятьБлокировки = Истина) Экспорт
	
	Перем ПараметрыВыгрузки;
	
	Если Модифицированность Тогда
		
		ТекстЗаголовка = ЗаголовокРегламентированногоОтчета(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета, СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
		
		ОргСтр = " (" + СтруктураРеквизитовФормы.Организация + ")";
		Если СтрНайти(ТекстЗаголовка, ОргСтр) = 0 Тогда
			ТекстЗаголовка = ТекстЗаголовка + ОргСтр;
		КонецЕсли;
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Отчет """ + ТекстЗаголовка + """ не сохранен.";
		Сообщение.Сообщить();
		
		Возврат Ложь;
	КонецЕсли;
	
	Если Открыта() Тогда
		Если СтруктураРеквизитовФормы.ЕдиницаИзмерения <> ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1 Тогда
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='Перед выгрузкой необходимо установить единицу измерения ""в рублях"".'");
			Сообщение.Сообщить();
			
			Возврат Ложь;
			
		КонецЕсли;
		Если СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения <> 0 Тогда
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='Перед выгрузкой необходимо установить точность ""0"".'");
			Сообщение.Сообщить();
			
			Возврат Ложь;
			
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ УниверсальнаяВыгрузкаXMLНаСервере(ТекстВыгрузки, ПараметрыВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция УниверсальнаяВыгрузкаXMLНаСервере(ТекстВыгрузки, ПараметрыВыгрузки)
	
	СформироватьСтруктуруПоказателей();
	ПараметрыВыгрузки = СформироватьСтруктуруПараметров();
	ДеревоВыгрузки = ИзвлечьСтруктуруXML();
	
	Если НЕ ПроверитьВозможностьВыгрузки(ПараметрыВыгрузки, ДеревоВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ЗаполнитьДанными(ДеревоВыгрузки, ПараметрыВыгрузки);
	Если НЕ ПроверитьДанные(ДеревоВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ТекстВыгрузки = ВыгрузитьДеревоВXML(ДеревоВыгрузки, ПараметрыВыгрузки);
		
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура АктивизироватьЯчейку(Ячейка) Экспорт
	
	РегламентированнаяОтчетностьКлиент.АктивизироватьЯчейку(ЭтаФорма, Ячейка);
	
КонецПроцедуры

&НаСервере
Процедура СформироватьДеревоРазделовОтчетаНаСервере() Экспорт
	
	СформироватьДеревоРазделовОтчета(ЭтаФорма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СформироватьДеревоРазделовОтчета(Форма)
	
	Форма["РазделыОтчета"].ПолучитьЭлементы().Очистить();
	
	Для Каждого ЭлементДереваСтраницОтчета Из Форма["мДеревоСтраницОтчета"].ПолучитьЭлементы() Цикл
		
		Если ЭлементДереваСтраницОтчета.ПоказатьСтраницу = 1 Тогда
			
			ЭлементРазделовОтчета = Форма["РазделыОтчета"].ПолучитьЭлементы().Добавить();
			ЭлементРазделовОтчета.КолонкаРазделыОтчета         = ЭлементДереваСтраницОтчета.Представление;
			ЭлементРазделовОтчета.КолонкаРазделыОтчетаСокрНаим = ЭлементДереваСтраницОтчета.ИмяСтраницы;
			ЭлементРазделовОтчета.ИндексКартинки               = 1;
			ЭлементРазделовОтчета.РазделМногостраничный        = Ложь;
			ЭлементРазделовОтчета.РазделМногострочный          = Ложь;
			
			НайденноеЗначение = Неопределено;
			
			Если Форма["мСтруктураМногостраничныхРазделов"].Свойство(ЭлементРазделовОтчета.КолонкаРазделыОтчетаСокрНаим, НайденноеЗначение) Тогда
				
				Если НЕ НайденноеЗначение = Неопределено Тогда
					
					НайденноеЗначение = Форма[НайденноеЗначение];
					
					ЭлементРазделовОтчета.ИндексКартинки        = 0;
					ЭлементРазделовОтчета.РазделМногостраничный = Истина;
					
					Для НомерСтраницы = 1 По НайденноеЗначение.Количество() Цикл
						
						СтраницаРазделаОтчета = ЭлементРазделовОтчета.ПолучитьЭлементы().Добавить();
						
						СтраницаРазделаОтчета.КолонкаРазделыОтчета              = "Стр. " + НомерСтраницы;
						СтраницаРазделаОтчета.КолонкаРазделыОтчетаСокрНаим      = ЭлементРазделовОтчета.КолонкаРазделыОтчетаСокрНаим;
						СтраницаРазделаОтчета.КолонкаНомерСтраницыРазделаОтчета = НомерСтраницы;
						СтраницаРазделаОтчета.ИндексКартинки                    = 1;
						СтраницаРазделаОтчета.РазделМногостраничный             = ЭлементРазделовОтчета.РазделМногостраничный;
						СтраницаРазделаОтчета.РазделМногострочный               = ЭлементРазделовОтчета.РазделМногострочный;
						
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЕсли;
				
		КонецЕсли;
				
	КонецЦикла;
			
КонецПроцедуры

&НаКлиенте
Процедура РазделыОтчетаПриАктивизацииСтроки(Элемент)
	
	Если Элемент.ТекущиеДанные = Неопределено
	 ИЛИ Элемент.ТекущаяСтрока = СтруктураРеквизитовФормы.ТекущаяСтрокаРазделовОтчета Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураРеквизитовФормы.ТекущаяСтрокаРазделовОтчета = Элемент.ТекущаяСтрока;
	Элементы.ОчиститьТекущуюСтраницу.Доступность = Истина;
	Если СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере Тогда
		Если Элемент.ТекущиеДанные.РазделМногостраничный Тогда
			Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета = ?(Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета = Неопределено
															        ИЛИ Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета = 0, 1, Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета);
		КонецЕсли;
		ВывестиМакетСтраницыВТабличныйДокументНаСервере(Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим, Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета);
	Иначе
		СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Истина;
	КонецЕсли;
	
	Если Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Раздел25"
	 ИЛИ Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Титульный" Тогда
		Элементы.ТабличныйДокументКонтекстноеМенюДобавитьСтроку.Видимость = Ложь;
		Элементы.ТабличныйДокументКонтекстноеМенюУдалитьСтроку.Видимость  = Ложь;
	Иначе
		Элементы.ТабличныйДокументКонтекстноеМенюДобавитьСтроку.Видимость = Истина;
		Элементы.ТабличныйДокументКонтекстноеМенюУдалитьСтроку.Видимость  = Истина;
	КонецЕсли;
	
	КМенюРО = Элементы.РазделыОтчета.КонтекстноеМеню;
	Если Элемент.ТекущиеДанные.РазделМногостраничный Тогда
		
		Элемент.Развернуть(Элемент.ТекущаяСтрока);
		КМенюРО.Видимость = Истина;
		
		Если Элемент.ТекущиеДанные.ПолучитьРодителя() = Неопределено Тогда
			Элементы.ОчиститьТекущуюСтраницу.Доступность = Ложь;
		Иначе
			Элементы.ОчиститьТекущуюСтраницу.Доступность = Истина;
		КонецЕсли;
		
		Если Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Раздел24"
		 ИЛИ Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Раздел25" Тогда
			КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюДобавитьСтраницу.Видимость = Ложь;
			КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюУдалитьСтраницу.Видимость = Ложь;
		Иначе
			Если НЕ Элемент.ТекущиеДанные.ПолучитьРодителя() = Неопределено
			   И Элемент.ТекущиеДанные.ПолучитьРодителя().ПолучитьЭлементы().Количество() > 1 Тогда
				КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюДобавитьСтраницу.Видимость = Истина;
				КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюУдалитьСтраницу.Видимость  = Истина;
			Иначе
				КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюДобавитьСтраницу.Видимость = Истина;
				КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюУдалитьСтраницу.Видимость  = Ложь;
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		КМенюРО.Видимость = Ложь;
		КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюДобавитьСтраницу.Видимость = Ложь;
		КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюУдалитьСтраницу.Видимость = Ложь;
	КонецЕсли;
	
	Элементы.Обновить.Доступность = Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Титульный";
	Если Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Титульный"
		Или Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Раздел25" Тогда
		Элементы.ТабличныйДокументКонтекстноеМенюГруппаСтроки.Видимость = Ложь;
	Иначе
		Элементы.ТабличныйДокументКонтекстноеМенюГруппаСтроки.Видимость = Истина;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.СпрятатьСсылкуУдалитьСтраницу(ЭтаФорма);
	
	Элементы.ТабличныйДокумент.ТекущаяОбласть = ТабличныйДокумент.Область(1, 1);
	
КонецПроцедуры

&НаСервере
Процедура СохранитьДанныеРаздела(НаимРаздела, ОчищатьРазделЕслиЕстьМногострочность, ИзменятьАктивнуюСтраницу = Истина)
	
	// Многостраничные и многострочные разделы.
	//
	Если  НаимРаздела <> "Титульный" Тогда
		
		ТаблицаСтраницРаздела = Неопределено;
		
		мСтруктураМногостраничныхРазделов.Свойство(НаимРаздела, ТаблицаСтраницРаздела);
				
		ТаблицаСтраницРаздела = ЭтаФорма[ТаблицаСтраницРаздела];
		
		СтрТаблицыСтраниц = ТаблицаСтраницРаздела.НайтиСтроки(Новый Структура("АктивнаяСтраница", Истина));
		
		Если СтрТаблицыСтраниц.Количество() > 0 Тогда
				
			СтрТаблицаСтраницы = СтрТаблицыСтраниц[0];
				
			// Сохраним данные активной страницы, с присвоением Представления страницы и с очистной многострочных частей (Истина)
			РегламентированнаяОтчетностьКлиентСервер.СохранитьДанныеМногостраничногоРазделаВактивнойСтранице(ЭтаФорма, НаимРаздела, ОчищатьРазделЕслиЕстьМногострочность);
							
			СтрТаблицаСтраницы.АктивнаяСтраница = НЕ ИзменятьАктивнуюСтраницу;
			
		КонецЕсли;
		
	// Многострочные разделы.
	//
	ИначеЕсли НаимРаздела = "-" Тогда
		
		ЭтаФорма["СтруктураДанных" + НаимРаздела] = СобратьДанныеТекущегоТаблПоля(ЭтаФорма, "ТабличныйДокумент");
		
		ИмяГруппы = ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(НаимРаздела);
		
		ОбновитьСтруктуруМногострочногоРаздела(ЭтаФорма, ИмяГруппы);
				
	// Обычные разделы.
	//
	Иначе
		
		ЭтаФорма["СтруктураДанных" + НаимРаздела] = СобратьДанныеТекущегоТаблПоля(ЭтаФорма, "ТабличныйДокумент");
		
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура ВывестиМакетСтраницыВТабличныйДокументНаСервере(ИмяТекРаздела, НомерСтраницыРазделаОтчета)
	
	СохранитьДанныеРаздела(СтруктураРеквизитовФормы.НаимТекущегоРаздела, Истина);
	
	ВывестиМакетВТаблДокНаСервере(ИмяТекРаздела, НомерСтраницыРазделаОтчета);
	
	СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяТекРаздела;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьУдалитьСтраницу(НаимТаблицыСтраницы)
	
	Если НЕ НаимТаблицыСтраницы = "ТаблицаСтраницыРаздел24" Тогда
		Если ЭтаФорма[НаимТаблицыСтраницы].Количество() = 1 Тогда
			Обл = ТабличныйДокумент.Области["УдалитьСтраницуЗначок"];
			Обл.Гиперссылка = Ложь;
			Обл.Текст = "";
			Обл = ТабличныйДокумент.Области["УдалитьСтраницу"];
			Обл.Гиперссылка = Ложь;
			Обл.Текст = "";
		Иначе
			Обл = ТабличныйДокумент.Области["УдалитьСтраницуЗначок"];
			Обл.Гиперссылка = Истина;
			Обл.Текст = "х";
			Обл = ТабличныйДокумент.Области["УдалитьСтраницу"];
			Обл.Гиперссылка = Истина;
			Обл.Текст = "Удалить страницу";
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиМакетВТаблДокНаСервере(ИмяТекРаздела, НомерСтраницыРазделаОтчета)
	
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + ИмяТекРаздела));
	
	// Многостраничные разделы.
	//
	Если ИмяТекРаздела = "Раздел25" Тогда
		
		СтруктураДанных = Новый Структура;
		
		НаимТаблицыСтраницы = мСтруктураМногостраничныхРазделов[ИмяТекРаздела];
		
		СписокДанных = ЭтаФорма[НаимТаблицыСтраницы][НомерСтраницыРазделаОтчета - 1].Данные;
		
		Для каждого ТаблицаСтраницы Из ЭтаФорма[НаимТаблицыСтраницы] Цикл
			ТаблицаСтраницы.АктивнаяСтраница = Ложь;
		КонецЦикла;
		
		ЭтаФорма[НаимТаблицыСтраницы][НомерСтраницыРазделаОтчета - 1].АктивнаяСтраница = Истина;
		
		Если СписокДанных.Количество() > 0 Тогда
			СтруктураДанных = СписокДанных[0].Значение;
		КонецЕсли;
		
		Для Каждого ЭлСтруктуры Из СтруктураДанных Цикл
			Обл = ТабличныйДокумент.Области.Найти(ЭлСтруктуры.Ключ);
			Если Обл <> Неопределено И Обл.СодержитЗначение Тогда 
				Обл.Значение = ЭлСтруктуры.Значение;
			КонецЕсли
		КонецЦикла;
		
	// Многостраничные и многострочные разделы.
	//
	ИначеЕсли ИмяТекРаздела <> "Раздел25"
			И ИмяТекРаздела <> "Титульный" Тогда
		
		СтруктураДанных = Новый Структура;
		
		НаимТаблицыСтраницы = мСтруктураМногостраничныхРазделов[ИмяТекРаздела];
		
		СписокДанных = ЭтаФорма[НаимТаблицыСтраницы][НомерСтраницыРазделаОтчета - 1].Данные;
		
		Для каждого ТаблицаСтраницы Из ЭтаФорма[НаимТаблицыСтраницы] Цикл
			ТаблицаСтраницы.АктивнаяСтраница = Ложь;
		КонецЦикла;
		
		ЭтаФорма[НаимТаблицыСтраницы][НомерСтраницыРазделаОтчета - 1].АктивнаяСтраница = Истина;
		
		Если СписокДанных.Количество() > 0 Тогда
			СтруктураДанных = СписокДанных[0].Значение;
		КонецЕсли;
		
		Для Каждого ЭлСтруктуры Из СтруктураДанных Цикл
			
			Попытка
				ТабличныйДокумент.Области[ЭлСтруктуры.Ключ].Значение = ЭлСтруктуры.Значение;
			Исключение
			КонецПопытки;
			
		КонецЦикла;
		
		ТаблицаСтраницРаздела = ЭтаФорма[НаимТаблицыСтраницы];
		
		СтрСледующаяСтраница = ТаблицаСтраницРаздела[НомерСтраницыРазделаОтчета - 1];
		
		СтрСледующаяСтраница.АктивнаяСтраница = Истина;
		
		ТаблицаВариантыЗаполнения = РегламентированнаяОтчетностьВызовСервера.ПолучитьТаблицуВариантовЗаполненияНаСервере(ЭтаФорма, ИмяТекРаздела);
		
		КолМногострочныхЧастей = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСвойствоРаздела(ЭтаФорма, ИмяТекРаздела, "МногострочностьВРазделе").Количество();
		
		Если КолМногострочныхЧастей > 0 Тогда
			
			НовДанныеДопСтрокРаздела = СтрСледующаяСтраница.ДанныеДопСтрок;
			
			Если (ТипЗнч(НовДанныеДопСтрокРаздела) = Тип("СписокЗначений"))
				И (НовДанныеДопСтрокРаздела.Количество() > 0)
				И (НовДанныеДопСтрокРаздела[0].Представление = "ДанныеФормыКоллекцияТаблицаДопСтрокРаздела") Тогда
				
				НовДанныеДопСтрокРаздела = НовДанныеДопСтрокРаздела[0].Значение;
				
			Иначе
				
				НовДанныеДопСтрокРаздела = Неопределено;
				
			КонецЕсли;
			
			// Способ хранения многострочных частей
			СохранятьМногострКакТЗ = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСвойствоРаздела(ЭтаФорма, ИмяТекРаздела, "СохранятьМногострКакТЗ");
			
		Иначе
			
			НовТаблицаДопСтрокРаздела = Неопределено; // Многострочности нет
			ИмяГруппыДопСтрок = Неопределено; // Имя группы строк неопределено
			
		КонецЕсли;
		
		Если НовДанныеДопСтрокРаздела <> Неопределено Тогда
			
			// В случае, если многострочных частей больше 1, то хранится структура, иначе, таблица значений с данными
			Если (КолМногострочныхЧастей > 0) И (НЕ СохранятьМногострКакТЗ) Тогда
				Для Каждого ГруппаСтрок Из НовДанныеДопСтрокРаздела Цикл
					ИмяГруппыДопСтрок = ГруппаСтрок.Ключ;
					ДанныеГруппыСтрок = ГруппаСтрок.Значение;
					
					ПромТаблицаГруппыСтрок = ЭтаФорма["Хранилище" + ИмяГруппыДопСтрок].Добавить().Таблица;
					
					КопироватьДанныеФормы(ДанныеГруппыСтрок, ПромТаблицаГруппыСтрок);
					
					// Заменяем таблицу значений с данными текущей страницы.
					КопироватьДанныеФормы(ПромТаблицаГруппыСтрок, ЭтаФорма[ИмяГруппыДопСтрок]);
					
					ВывестиРазделВТабличныйДокументНаСервере(ИмяГруппыДопСтрок, ПромТаблицаГруппыСтрок);
					ОбновитьСтруктуруМногострочногоРазделаНаСервере(ИмяГруппыДопСтрок);
					
				КонецЦикла;
				
			ИначеЕсли (КолМногострочныхЧастей > 0) И (СохранятьМногострКакТЗ) Тогда
				
				ИмяГруппыДопСтрок = ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ИмяТекРаздела);
				
				ПромТаблицаДопСтрокРаздела = ЭтаФорма["Хранилище" + ИмяГруппыДопСтрок].Добавить().Таблица;
				
				КопироватьДанныеФормы(НовДанныеДопСтрокРаздела, ПромТаблицаДопСтрокРаздела);
				
				// Заменяем таблицу значений с данными текущей страницы.
				КопироватьДанныеФормы(ПромТаблицаДопСтрокРаздела, ЭтаФорма[ИмяГруппыДопСтрок]);
				
				// Выводим в табличный документ данные группы дополнительных строк и обновляем структуру многострочного раздела
				ВывестиРазделВТабличныйДокументНаСервере(ИмяГруппыДопСтрок, ПромТаблицаДопСтрокРаздела);
				ОбновитьСтруктуруМногострочногоРазделаНаСервере(ИмяГруппыДопСтрок);
				
			КонецЕсли;
			
		КонецЕсли;
		
		УстановитьВидимостьУдалитьСтраницу(НаимТаблицыСтраницы);
		Если ТабличныйДокумент.Области.Найти("УдалитьСтроку" + ИмяГруппыДопСтрок + "01_2") = Неопределено Тогда
			Обл = ТабличныйДокумент.Области.Найти("УдалитьСтроку" + ИмяГруппыДопСтрок + "01_1");
			Если Обл <> Неопределено Тогда 
				Обл.Гиперссылка = Ложь;
				Обл.Текст = "";
			КонецЕсли;
		КонецЕсли;
		Если ТабличныйДокумент.Области.Найти("УдалитьСтроку" + ИмяГруппыДопСтрок + "20_2") = Неопределено Тогда
			Обл = ТабличныйДокумент.Области.Найти("УдалитьСтроку" + ИмяГруппыДопСтрок + "20_1");
			Если Обл <> Неопределено Тогда 
				Обл.Гиперссылка = Ложь;
				Обл.Текст = "";
			КонецЕсли;
		КонецЕсли;
		
	// Многострочные разделы.
	//
	ИначеЕсли ИмяТекРаздела = "-" Тогда
		
		Для Каждого ЭлСтруктуры Из ЭтаФорма["СтруктураДанных" + ИмяТекРаздела] Цикл
			Обл = ТабличныйДокумент.Области.Найти(ЭлСтруктуры.Ключ);
			Если Обл <> Неопределено И Обл.СодержитЗначение Тогда 
				Обл.Значение = ЭлСтруктуры.Значение;
			КонецЕсли;
		КонецЦикла;
		
		ИмяГруппы = ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ИмяТекРаздела);
		
		СтруктураГруппы = Неопределено;
		
		мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);
		
		СтруктураГруппы = ЭтаФорма[СтруктураГруппы];
		
		ВывестиРазделВТабличныйДокумент(ЭтаФорма, ИмяГруппы, СтруктураГруппы);
		
	// Обычные разделы.
	//
	Иначе
		
		Для Каждого ЭлСтруктуры Из ЭтаФорма["СтруктураДанных" + ИмяТекРаздела] Цикл
			Обл = ТабличныйДокумент.Области.Найти(ЭлСтруктуры.Ключ);
			Если Обл <> Неопределено И Обл.СодержитЗначение Тогда 
				Обл.Значение = ЭлСтруктуры.Значение;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;	
	
	Если ИмяТекРаздела <> "Титульный" Тогда
		
		ЗаполнитьПоказателиЗначениямиПоУмолчанию(ИмяТекРаздела);
		
		УстановитьФорматВыводаНаСервере(ИмяТекРаздела);
		
		УстановитьЦветФонаЯчейкиНаСервере(,, ИмяТекРаздела);
		
		Если ИмяТекРаздела = "Раздел2" ИЛИ ИмяТекРаздела = "Раздел24" Тогда
			
			ПереопределитьЦветЯчеекВЗависимостиОтУсловияНаСервере(ИмяТекРаздела);
			
		КонецЕсли; 
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СохранитьЗначениеПоказателяВСтруктуре(Форма, ИмяРаздела, ИмяПоказателя, ЗначениеПоказателя)
	
	МногостраничностьВРазделе = Истина;
	КолМногострочныхЧастей = 0;
	СохранятьМногострКакТЗ = Истина;
	ИмяГруппы = "";
	Если ИмяРаздела = "Титульный" Тогда
		МногостраничностьВРазделе = Ложь;
	ИначеЕсли ИмяРаздела = "Раздел25" Тогда
		МногостраничностьВРазделе = Истина;
	Иначе
		МногостраничностьВРазделе = Истина;
		КолМногострочныхЧастей = 1;
		ИмяГруппы = ОпределитьИдМногострочногоРазделаПоТабличномуПолю(Форма, ИмяРаздела);
	КонецЕсли; 
	
	ДанныеРаздела = Неопределено;
	ДанныеМногострочногоРаздела = Неопределено;
	
	Если ИмяРаздела <> "" Тогда
		
		Если МногостраничностьВРазделе Тогда  //Для многостраничных разделов
			
			ИмяТаблицыСтраницы = Неопределено;
			Если Форма.мСтруктураМногостраничныхРазделов.Свойство(ИмяРаздела, ИмяТаблицыСтраницы) Тогда
				
				ТаблицаСтраницы = Форма[ИмяТаблицыСтраницы];
				АктивныеСтраницы = ТаблицаСтраницы.НайтиСтроки(Новый Структура("АктивнаяСтраница", Истина));
				
				Если АктивныеСтраницы.Количество() > 0 Тогда
					
					ДанныеРазделаСписок = АктивныеСтраницы[0].Данные;
					Если ДанныеРазделаСписок.Количество() > 0 Тогда
						
						ДанныеРаздела = ДанныеРазделаСписок[0].Значение;
						ДанныеРазделаСписок[0].Пометка = Ложь; //Регистрируем для передачи на сервер (при редактировании таблицы значения не передаются)
						
					КонецЕсли;
					
					Если КолМногострочныхЧастей > 0 Тогда  // И многострочных разделов
						
						ДанныеДопСтрокРазделаСписок = АктивныеСтраницы[0].ДанныеДопСтрок;
						Если ДанныеДопСтрокРазделаСписок.Количество() > 0 Тогда
							
							ДанныеДопСтрокРаздела = ДанныеДопСтрокРазделаСписок[0].Значение;
							ДанныеРазделаСписок[0].Пометка = Ложь;
							
							СтруктураГруппы = Неопределено;
							Форма.мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);

							Если СохранятьМногострКакТЗ Тогда
								ДанныеМногострочногоРаздела = ДанныеДопСтрокРаздела;
							Иначе
								ДанныеМногострочногоРаздела = ДанныеДопСтрокРаздела[ИмяГруппы];
							КонецЕсли;
							
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЕсли; 
				
			КонецЕсли;
			
		Иначе  //Для обычных разделов
			
			ДанныеРаздела = Форма["СтруктураДанных" + ИмяРаздела];
			
			Если КолМногострочныхЧастей > 0 Тогда  // И многострочных разделов
				
				СтруктураГруппы = Неопределено;
				Форма.мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);
				
				ДанныеМногострочногоРаздела = Форма[СтруктураГруппы];
				
			КонецЕсли;
			
		КонецЕсли; 
		
		Если ДанныеМногострочногоРаздела = Неопределено Тогда
			Если ДанныеРаздела <> Неопределено Тогда
				Если ДанныеРаздела.Свойство(ИмяПоказателя) Тогда
					ДанныеРаздела[ИмяПоказателя] = ЗначениеПоказателя;
				Иначе
					ДанныеРаздела.Вставить(ИмяПоказателя, ЗначениеПоказателя);
				КонецЕсли
			КонецЕсли; 
		Иначе
			Если ИмяГруппы = Лев(ИмяПоказателя, 11) Тогда //Показатель входит в многострочную часть
				ИмяПок = Лев(ИмяПоказателя, 13);
				СтрИнд = Сред(ИмяПоказателя, 14);
				Если Лев(СтрИнд, 1)="_" Тогда
					СтрИнд = Сред(СтрИнд, 2);
				КонецЕсли;
				Инд = Число(СтрИнд);
				Если (Инд > 0) И ДанныеМногострочногоРаздела.Количество() >= Инд Тогда
					ДанныеМногострочногоРаздела[Инд-1][ИмяПок] = ЗначениеПоказателя;
				КонецЕсли; 
			КонецЕсли;
			Если ДанныеРаздела <> Неопределено Тогда
				Если ДанныеРаздела.Свойство(ИмяПоказателя) Тогда
					ДанныеРаздела[ИмяПоказателя] = ЗначениеПоказателя;
				Иначе
					ДанныеРаздела.Вставить(ИмяПоказателя, ЗначениеПоказателя);
				КонецЕсли
			КонецЕсли; 
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоказателиЗначениямиПоУмолчанию(НаимРаздела)
	
	Если НаимРаздела = "Раздел2" Тогда
		ТабличныйДокумент.Области.П000230001001.Значение  = "40001";
		ТабличныйДокумент.Области.П000230002001.Значение  = "40002";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьОтчет(Команда)
	
	РегламентированнаяОтчетностьКлиент.МеханизмыОчисткиРегламентированныхОтчетов(ЭтаФорма, "ОчиститьВесьОтчет");
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТекущуюСтраницу(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОчиститьТекущуюСтраницуЗавершение", ЭтотОбъект);
	РегламентированнаяОтчетностьКлиент.МеханизмыОчисткиРегламентированныхОтчетов(
		ЭтаФорма, "ОчиститьТекущийЭкземплярМногостраничногоРаздела"
		+ Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим,
		ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТекущуюСтраницуЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
		НомерКорректировки = 0;
		ТабличныйДокумент.Области.НомерКорректировки.Значение = "0";
		СтруктураРеквизитовФормы.ВидДокумента = ?(НомерКорректировки = 0, 0, 1);
		СтруктураРеквизитовФормы.ТекущийКодНаличияСвидетельства = "";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьОтчет(Команда)
	
	Если Элементы.РазделыОтчета.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СохранитьНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСтраницу(Команда)
	
	ВставитьДополнительнуюСтраницуНаСервере(Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
	Обл = ТабличныйДокумент.Области["УдалитьСтраницуЗначок"];
	Обл.Гиперссылка = Истина;
	Обл.Текст = "х";
	Обл = ТабличныйДокумент.Области["УдалитьСтраницу"];
	Обл.Гиперссылка = Истина;
	Обл.Текст = "Удалить страницу";
	
	Для Каждого КЗ Из мСтруктураМногострочныхРазделов Цикл 
		Обл = ТабличныйДокумент.Области.Найти("УдалитьСтроку" + КЗ.Ключ + "01_1");
		Если Обл <> Неопределено Тогда 
			Обл.Гиперссылка = Ложь;
			Обл.Текст = "";
		КонецЕсли;
		Обл = ТабличныйДокумент.Области.Найти("УдалитьСтроку" + КЗ.Ключ + "20_1");
		Если Обл <> Неопределено Тогда 
			Обл.Гиперссылка = Ложь;
			Обл.Текст = "";
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция СобратьДанныеТекущегоТаблПоляНаКлиенте(ИмяТабличногоПоля) Экспорт
	
	Возврат СобратьДанныеТекущегоТаблПоля(ЭтаФорма, ИмяТабличногоПоля);
	
КонецФункции

&НаСервере
Процедура ОбновитьСтруктуруМногострочногоРазделаНаСервере(ИмяГруппы) Экспорт
	
	ОбновитьСтруктуруМногострочногоРаздела(ЭтаФорма, ИмяГруппы);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСтруктуруМногострочногоРазделаНаКлиенте(ИмяГруппы) Экспорт
	
	ОбновитьСтруктуруМногострочногоРаздела(ЭтаФорма, ИмяГруппы);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьСтруктуруМногострочногоРаздела(Форма, ИмяГруппы)
	
	Перем СтруктураГруппы;
	
	Форма.мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);
	
	СтруктураГруппы = Форма[СтруктураГруппы];
		
	ТекТабличноеПолеИмя = "ТабличныйДокумент";
	
	ТекТабличноеПоле = Форма[ТекТабличноеПолеИмя];
	
	Для НСтр = 1 По СтруктураГруппы.Количество() Цикл
		
		ТекСтрокаТаблицы = СтруктураГруппы[НСтр - 1];
		
		Для НомерГрафы = 1 По Форма.мСтруктураКолвоКолонокРазделов[ИмяГруппы] Цикл
				
			Если Прав(ИмяГруппы, 2) = "20" Тогда
				ИмяКолонки = ИмяГруппы + Формат((НомерГрафы + 1) * 10, "ЧЦ=2; ЧВН=");
			Иначе
				ИмяКолонки = ИмяГруппы + Формат(НомерГрафы, "ЧЦ=2; ЧВН=");
			КонецЕсли;
			
			Если СтруктураГруппы[0].Свойство(ИмяКолонки) Тогда	
				
				ИмяЯчейки     = ИмяКолонки + "_" + НСтр;
				ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяЯчейки];
				
				Если ОбластьЯчейки.СодержитЗначение = Истина Тогда
					ЗначениеЯчейки = ОбластьЯчейки.Значение;
				Иначе
					ЗначениеЯчейки = ОбластьЯчейки.Текст;
				КонецЕсли;
				
				ТекСтрокаТаблицы[ИмяКолонки] = ЗначениеЯчейки;
				
			КонецЕсли;
			
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнениеЗначенийВКвадратикахНаКлиенте(Знач ИмяСтраницы) Экспорт

	ЗаполнениеЗначенийВКвадратиках(ЭтаФорма, ИмяСтраницы);
	
КонецПроцедуры

&НаКлиенте
Процедура РасчетНаКлиенте(ИмяТекущейСтраницыПанели = "", ОбластьИмя = "") Экспорт

	Расчет(ЭтаФорма, ИмяТекущейСтраницыПанели, ОбластьИмя);

КонецПроцедуры

&НаСервере
Процедура РасчетНаСервере(ИмяТекущейСтраницыПанели = "", ОбластьИмя = "") Экспорт

	Расчет(ЭтаФорма, ИмяТекущейСтраницыПанели, ОбластьИмя);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура Расчет(Форма, ИмяТекущейСтраницы = "", ОбластьИмя = "") Экспорт
	
	Если Форма.СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет ИЛИ Форма.СтруктураРеквизитовФормы.мРежимПечати Тогда
		Возврат;
	КонецЕсли;
	
	Если Форма.СтруктураРеквизитовФормы.ОтключитьВыполнениеРасчета Тогда
		Возврат;
	КонецЕсли; 
	
	Если ИмяТекущейСтраницы = "Приложение1" ИЛИ ИмяТекущейСтраницы = "Раздел2" ИЛИ ИмяТекущейСтраницы = "Раздел24" Тогда
		
		РасчетВСтруктуре(Форма, "Приложение1");
		РасчетВСтруктуре(Форма, "Раздел24");
		РасчетВСтруктуре(Форма, "Раздел2");
		РасчетВСтруктуре(Форма, "Раздел25");
		
	КонецЕсли;
	
	Если ИмяТекущейСтраницы = "Раздел25" ИЛИ  ИмяТекущейСтраницы = "Приложение2" ИЛИ ИмяТекущейСтраницы = "Раздел2" Тогда
		
		РасчетВСтруктуре(Форма, "Раздел2");
		РасчетВСтруктуре(Форма, "Раздел25");
		
	КонецЕсли;
	
	Если ИмяТекущейСтраницы = "Приложение4" Тогда
		
		РасчетВСтруктуре(Форма, "Приложение4");
		
	ИначеЕсли ИмяТекущейСтраницы = "Приложение5" Тогда
		
		РасчетВСтруктуре(Форма, "Приложение5");
		
	ИначеЕсли ИмяТекущейСтраницы = "Приложение6" Тогда
		
		РасчетВСтруктуре(Форма, "Приложение6");
		
	ИначеЕсли ИмяТекущейСтраницы = "Приложение7" Тогда
		
		РасчетВСтруктуре(Форма, "Приложение7");
		
	ИначеЕсли ИмяТекущейСтраницы = "" Тогда
		
		РасчетВСтруктуре(Форма, "Приложение1");
		РасчетВСтруктуре(Форма, "Раздел24");
		РасчетВСтруктуре(Форма, "Раздел2");
		РасчетВСтруктуре(Форма, "Раздел25");
		РасчетВСтруктуре(Форма, "Приложение4");
		РасчетВСтруктуре(Форма, "Приложение5");
		РасчетВСтруктуре(Форма, "Приложение6");
		РасчетВСтруктуре(Форма, "Приложение7");
		
	КонецЕсли;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РасчетВСтруктуре(Форма, ИмяЛиста)
	
	// Расчет осуществляется по структуре многостраничных разделов декларации.
	ТаблицаРаздела = Форма[Форма.мСтруктураМногостраничныхРазделов[ИмяЛиста]];
	
	Для Каждого Страница Из ТаблицаРаздела Цикл
		
		Данные = Страница.Данные[0].Значение;
		Если (Данные = Неопределено) ИЛИ (Тип(Данные) <> Тип("Структура")) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ИмяЛиста = "Приложение1" Тогда 
			
			ТаблицаБлока = Страница.ДанныеДопСтрок[0].Значение;
			
			Если ТаблицаБлока <> Неопределено Тогда
				
				СтрокаП000900001000 = СокрЛП(Данные.П000900001000);
				Если СтрокаП000900001000 <> "" Тогда 
					ЧислоП000900001000 = Число(СтрокаП000900001000);
				Иначе 
					ЧислоП000900001000 = 0;
				КонецЕсли;	
				
				Для Каждого ТекСтрока из ТаблицаБлока Цикл 
					
					Если ЧислоП000900001000 >=500 И  ЧислоП000900001000 <= 532 Тогда 
						ТекСтрока.П000900000004 = ТекСтрока.П000900000002 * ТекСтрока.П000900000003;
					иначе
						ТекСтрока.П000900000004 = ТекСтрока.П000900000002 * ТекСтрока.П000900000003/100;
					КонецЕсли;
					
					ИндексТекСтроки =  ТаблицаБлока.Индекс(ТекСтрока) + 1;
					Данные["П000900000004_"+ИндексТекСтроки] = ТекСтрока.П000900000004;
					
				КонецЦикла;
				
			КонецЕсли;
			
			 //Для инициализации обмена с сервером
			Страница.Данные[0].Пометка = Ложь;
			Страница.ДанныеДопСтрок[0].Пометка = Ложь;
			
		ИначеЕсли ИмяЛиста = "Раздел2" Тогда
			
			ТаблицаБлока = Страница.ДанныеДопСтрок[0].Значение;
			
			П000200001000 = СокрЛП(Данные.П000200001000); //Код вида
			П000200002000 = СокрЛП(Данные.П000200002000); //ОКЕИ
			
			ТаблицаРазделаР1 = Форма[Форма.мСтруктураМногостраничныхРазделов["Приложение1"]];
			
			ТЗДанныеДопСтрок = Неопределено;
			
			Для Каждого СтраницаР1 Из ТаблицаРазделаР1 Цикл
				
				ДанныеР1 = СтраницаР1.Данные[0].Значение;
				
				Если (ДанныеР1 = Неопределено) ИЛИ (Тип(ДанныеР1) <> Тип("Структура")) Тогда
					Продолжить;
				КонецЕсли;
				
				ДанныеДопСтрокР1 = СтраницаР1.ДанныеДопСтрок[0].Значение;
				
				Если  П000200001000 <> "" И  П000200002000 <> "" И  СокрЛП(ДанныеР1.П000900001000) = П000200001000 И СокрЛП(ДанныеР1.П000900002000) = П000200002000 Тогда //совпали коды вида и ОКЕИ
					
					ТЗДанныеДопСтрок = ДанныеДопСтрокР1;
					
					Прервать;
					
				КонецЕсли;
				
			КонецЦикла;
			
			Если ТаблицаБлока <> Неопределено Тогда
				
				СуммаП000210001004 = 0;
				Для Каждого ТекСтрока Из ТаблицаБлока Цикл 
					СтрокаКП = СокрЛП(ТекСтрока.П000210001001);
					ИндексТекСтроки =  ТаблицаБлока.Индекс(ТекСтрока) + 1;
					ИмяПоказателя = "П000210001003_" + ИндексТекСтроки;
					СуммаП000210001004 = СуммаП000210001004 +  РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, ТекСтрока.П000210001004);
					
					Если ТЗДанныеДопСтрок = Неопределено или СтрокаКП = "" Тогда 
						Продолжить;
					КонецЕсли;
					
					СуммаПоказателя = 0;
					ЕстьТакойПоказатель = Ложь;
					Для Каждого ТекСтрокаДоп Из ТЗДанныеДопСтрок Цикл 
						Если ТекСтрокаДоп.П000900000001 = СтрокаКП Тогда
							СуммаПоказателя = СуммаПоказателя + ТекСтрокаДоп.П000900000004;
							ЕстьТакойПоказатель = Истина;
						КонецЕсли;
					КонецЦикла;
					Если ЕстьТакойПоказатель Тогда
						ТекСтрока.П000210001003 = СуммаПоказателя;
						Данные[ИмяПоказателя] = СуммаПоказателя;
					КонецЕсли;
				КонецЦикла;
				
				//цикл по строкам раздела 2.2
				СуммаГр2Р22 = 0;
				Для Сч = 1 по 9 Цикл 
					Показатель = СокрЛП(Данные["П00022000"+Сч+"001"]);
					СуммаВычета = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, Данные["П00022000"+Сч+"002"]);
					СуммаГр2Р22 = СуммаГр2Р22+?(Показатель = "30010", 0, СуммаВычета);
				КонецЦикла;
				Код4000 = СуммаП000210001004 - СуммаГр2Р22;
				Данные.П000230001000 =  ?(Код4000 > 0, Код4000, 0);
				Данные.П000230002000 =  ?(Код4000 < 0, -Код4000, 0);
				
			КонецЕсли;
			
			//Для инициализации обмена с сервером
			Страница.Данные[0].Пометка = Ложь;
			Страница.ДанныеДопСтрок[0].Пометка = Ложь;
			
		ИначеЕсли ИмяЛиста = "Раздел24" Тогда 
			
			ТаблицаРазделаР2 = Форма[Форма.мСтруктураМногостраничныхРазделов["Раздел2"]];
			ИндексСтраницы = ТаблицаРаздела.Индекс(Страница);
			Если ТаблицаРазделаР2.Количество() <= ИндексСтраницы Тогда
				Продолжить;
			КонецЕсли; 
			ТаблицаБлокаР2 = ТаблицаРазделаР2.Получить(ИндексСтраницы);
			
			П000200001000 = СокрЛП(ТаблицаБлокаР2.Данные[0].Значение.П000200001000); //Код вида
			П000200002000 = СокрЛП(ТаблицаБлокаР2.Данные[0].Значение.П000200002000); //ОКЕИ
			
			ТаблицаРазделаР1 = Форма[Форма.мСтруктураМногостраничныхРазделов["Приложение1"]];
			ТЗДанныеДопСтрок = Неопределено;
			Для Каждого СтраницаР1 Из ТаблицаРазделаР1 Цикл
				
				ДанныеР1 = СтраницаР1.Данные[0].Значение;
				
				Если (ДанныеР1 = Неопределено) ИЛИ (Тип(ДанныеР1) <> Тип("Структура")) Тогда
					Продолжить;
				КонецЕсли;
				
				ДанныеДопСтрокР1 = СтраницаР1.ДанныеДопСтрок[0].Значение;
				
				Если  П000200001000 <> "" И  П000200002000 <> "" И СокрЛП(ДанныеР1.П000900001000) = П000200001000 И СокрЛП(ДанныеР1.П000900002000) = П000200002000 Тогда //совпали коды вида и ОКЕИ
					
					ТЗДанныеДопСтрок = ДанныеДопСтрокР1;
					Прервать;
					
				КонецЕсли;
			КонецЦикла;
			
			ТаблицаБлока = Страница.ДанныеДопСтрок[0].Значение;
			Если ТаблицаБлока <> Неопределено Тогда 
				Для Каждого ТекСтрока Из ТаблицаБлока Цикл 
					П000240001001  =  СокрЛП(ТекСтрока.П000240001001);
					ИндексТекСтроки =  ТаблицаБлока.Индекс(ТекСтрока) + 1;
					
					ИмяПоказателя1 = "П000240001001_" + ИндексТекСтроки;
					ИмяПоказателя2 = "П000240001002_" + ИндексТекСтроки;
					ИмяПоказателя3 = "П000240001003_" + ИндексТекСтроки;
					ИмяПоказателя4 = "П000240001004_" + ИндексТекСтроки;
					ИмяПоказателя5 = "П000240001005_" + ИндексТекСтроки;
					Если  П000240001001 = "20001" ИЛИ П000240001001 = "20002" тогда
						Данные[ИмяПоказателя3] = 0;
						Данные[ИмяПоказателя4] = "";
						Данные[ИмяПоказателя5] = "";
					КонецЕсли;
					
					Если ТЗДанныеДопСтрок = Неопределено ИЛИ П000240001001 = "" Тогда 
						Продолжить;
					КонецЕсли;
					
					СуммаПоказателя = 0;
					ЕстьТакойПоказатель = Ложь;
					Для Каждого ТекСтрокаДоп Из ТЗДанныеДопСтрок Цикл 
						Если ТекСтрокаДоп.П000900000001 = П000240001001 тогда
							СуммаПоказателя = СуммаПоказателя + ТекСтрокаДоп.П000900000004; 
							ЕстьТакойПоказатель = Истина;
						КонецЕсли;
					КонецЦикла;
					Если ЕстьТакойПоказатель тогда
						ТекСтрока.П000240001002 = СуммаПоказателя;
						Данные[ИмяПоказателя2] = СуммаПоказателя;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			//Для инициализации обмена с сервером
			Страница.Данные[0].Пометка = Ложь;
			Страница.ДанныеДопСтрок[0].Пометка = Ложь;
			
		ИначеЕсли ИмяЛиста = "Раздел25"  Тогда 
			
			ТаблицаРазделаР2 = Форма[Форма.мСтруктураМногостраничныхРазделов["Раздел2"]];
			ИндексСтраницы = ТаблицаРаздела.Индекс(Страница);
			Если ТаблицаРазделаР2.Количество() <= ИндексСтраницы Тогда
				Продолжить;
			КонецЕсли; 
			ТаблицаБлокаР2 = ТаблицаРазделаР2.Получить(ИндексСтраницы);
			
			ТаблицаБлокаР2Данные = ТаблицаБлокаР2.Данные[0].Значение;
			
			ПоКоду3009 = 0;
			ПоКоду3010 = 0;
			
			Для Сч = 1 По 9 Цикл 
				Показатель = СокрЛП(ТаблицаБлокаР2Данные["П00022000" + Сч + "001"]);
				СуммаВычета = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, ТаблицаБлокаР2Данные["П00022000" + Сч + "002"]);
				Если  Показатель = "30009" Тогда 
					ПоКоду3009 = ПоКоду3009 + СуммаВычета;
				КонецЕсли;
				
				Если  Показатель = "30010" Тогда 
					ПоКоду3010 = ПоКоду3010 + СуммаВычета;
				КонецЕсли;
			КонецЦикла;
			Данные.П000250002002 = ПоКоду3009; 
			Данные.П000250003002 = ПоКоду3010; 
			
			ТаблицаРазделаП2 = Форма[Форма.мСтруктураМногостраничныхРазделов["Приложение2"]];
			
			СуммаАвПлатежаПоКоду60001 = 0;
			СуммаАвПлатежаПоКоду60002 = 0;
			СуммаГр3Прил2ПоКоду60001 =  0;
			СуммаГр3Прил2ПоКоду60002 =  0;
			
			Для Каждого СтраницаП2 Из ТаблицаРазделаП2 Цикл
				ДанныеП2 = СтраницаП2.Данные[0].Значение;
				Если (ДанныеП2 = Неопределено) ИЛИ (Тип(ДанныеП2) <> Тип("Структура")) Тогда
					Продолжить;
				КонецЕсли;
				
				ДанныеДопСтрокП2 = СтраницаП2.ДанныеДопСтрок[0].Значение;
				
				Если ДанныеДопСтрокП2 <> Неопределено Тогда 
					Для Каждого ТекСтрока Из ДанныеДопСтрокП2 Цикл 
						Если СокрЛП(ТекСтрока.П000910000001) = "60001" И СокрЛП(ТекСтрока.П000910000002) = СокрЛП(ТаблицаБлокаР2Данные["П000200001000"]) Тогда 
							//сбор данных осуществляется по совпадению кода вида подакцизного товара
							СуммаАвПлатежаПоКоду60001 = СуммаАвПлатежаПоКоду60001 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, ТекСтрока.П000910000005);
							СуммаГр3Прил2ПоКоду60001 =  СуммаГр3Прил2ПоКоду60001 + ТекСтрока.П000910000003;
						КонецЕсли;	
						
						Если СокрЛП(ТекСтрока.П000910000001) = "60002" И СокрЛП(ТекСтрока.П000910000002) = СокрЛП(ТаблицаБлокаР2Данные["П000200001000"]) Тогда 
							//сбор данных осуществляется по совпадению кода вида подакцизного товара
							СуммаАвПлатежаПоКоду60002 = СуммаАвПлатежаПоКоду60002 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, ТекСтрока.П000910000005);
							СуммаГр3Прил2ПоКоду60002 =  СуммаГр3Прил2ПоКоду60002 + ТекСтрока.П000910000003;
						КонецЕсли;	
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
			
			Данные.П000250004002 = СуммаАвПлатежаПоКоду60001;
			Данные.П000250006002 = СуммаАвПлатежаПоКоду60002;
			
			СуммаАвПлатежа  = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, Данные.П000250001002) - РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, Данные.П000250002002)
							- РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, Данные.П000250003002) + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, Данные.П000250004002);
			
			Данные.П000250005002 = ?(СуммаАвПлатежа > 0, СуммаАвПлатежа, 0);
			Данные.П000250007002 = ?(СуммаАвПлатежа  < 0, - СуммаАвПлатежа, 0);
			
			Данные.П000250001000 =  СуммаГр3Прил2ПоКоду60001;
			Данные.П000250002000 =  СуммаГр3Прил2ПоКоду60002;
			
			//Для инициализации обмена с сервером
			Страница.Данные[0].Пометка = Ложь;
			
		ИначеЕсли ИмяЛиста = "Приложение4" Тогда 
			
			ТаблицаБлока = Страница.ДанныеДопСтрок[0].Значение;
			
			СуммаПоКоду111 = 0;
			СуммаПоКоду121 = 0;
			
			Если ТаблицаБлока <> Неопределено Тогда 
				
				Для Каждого ТекСтрока из ТаблицаБлока Цикл 
					
					Если СокрЛП(ТекСтрока.П000930000001) = "111" Тогда  
						СуммаПоКоду111 = СуммаПоКоду111 + ТекСтрока.П000930000003;
					КонецЕсли;
					
					Если СокрЛП(ТекСтрока.П000930000001) = "121" Тогда  
						СуммаПоКоду121 = СуммаПоКоду121 + ТекСтрока.П000930000003;
					КонецЕсли;
					
				КонецЦикла;
				
				Данные.П000930005003 = СуммаПоКоду111;
				Данные.П000930006003 = СуммаПоКоду121;
				
				//Для инициализации обмена с сервером
				Страница.Данные[0].Пометка = Ложь;
				
			КонецЕсли;
			
		ИначеЕсли ИмяЛиста = "Приложение5" Тогда 
			
			ТаблицаБлока = Страница.ДанныеДопСтрок[0].Значение;
			
			СуммаПоКоду111 = 0;
			СуммаПоКоду121 = 0;
			
			Если ТаблицаБлока <> Неопределено Тогда 
				
				Для Каждого ТекСтрока из ТаблицаБлока Цикл 
					
					Если СокрЛП(ТекСтрока.П000940000001) = "111" Тогда  
						СуммаПоКоду111 = СуммаПоКоду111 + ТекСтрока.П000940000003;
					КонецЕсли;
					
					Если СокрЛП(ТекСтрока.П000940000001) = "121" Тогда  
						СуммаПоКоду121 = СуммаПоКоду121 + ТекСтрока.П000940000003;
					КонецЕсли;
					
				КонецЦикла;
				
				Данные.П000940005003 = СуммаПоКоду111;
				Данные.П000940006003 = СуммаПоКоду121;
				
				//Для инициализации обмена с сервером
				Страница.Данные[0].Пометка = Ложь;
				
			КонецЕсли;
			
		ИначеЕсли ИмяЛиста = "Приложение6" Тогда 
			
			ТаблицаБлока = Страница.ДанныеДопСтрок[0].Значение;
			
			СуммаПоГр3 = 0;
			
			Если ТаблицаБлока <> Неопределено Тогда 
				
				Для Каждого ТекСтрока из ТаблицаБлока Цикл 
					
					СуммаПоГр3 = СуммаПоГр3 + ТекСтрока.П000950000002;
					
				КонецЦикла;
				
				Данные.П000950005003 = СуммаПоГр3;
				
				//Для инициализации обмена с сервером
				Страница.Данные[0].Пометка = Ложь;
				
			КонецЕсли;
			
		ИначеЕсли ИмяЛиста = "Приложение7" Тогда 
			
			ТаблицаБлока = Страница.ДанныеДопСтрок[0].Значение;
			
			СуммаПоГр3 = 0;
			
			Если ТаблицаБлока <> Неопределено Тогда 
				
				Для Каждого ТекСтрока из ТаблицаБлока Цикл 
					
					СуммаПоГр3 = СуммаПоГр3 + ТекСтрока.П000960000002;
					
				КонецЦикла;
				
				Данные.П000960005003 = СуммаПоГр3;
				
				//Для инициализации обмена с сервером
				Страница.Данные[0].Пометка = Ложь;
				
			КонецЕсли;
			
		КонецЕсли;
		
		// Если рассчитывается активный лист, то необходимо значения из структуры данных отобразить в табличном поле.
		Если Страница.АктивнаяСтраница Тогда
			Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяЛиста Тогда
				Для каждого ЭлементДанных Из Данные Цикл
					Если СтрДлина(ЭлементДанных.Ключ) < 13 Тогда
						Продолжить;
					КонецЕсли;
					Попытка
						ТекОбласть = Форма.ТабличныйДокумент.Области[ЭлементДанных.Ключ];
						Если ТекОбласть.Значение <> ЭлементДанных.Значение Тогда
							ТекОбласть.Значение = ЭлементДанных.Значение;
						КонецЕсли;
					Исключение
					КонецПопытки;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла; // Конец перебора страниц многостраничного раздела
	
КонецПроцедуры

&НаСервере
Процедура УдалитьДополнительнуюСтраницуНаСервере(ИмяТекущейСтраницыПанели = Неопределено)

	Перем ТаблицаСтраниц;
	
	Если ИмяТекущейСтраницыПанели = "Раздел2" Тогда
		
		// Сохраним значение индекса удаляемой страницы раздела 2
		// для синхронного удаления соотв. страниц разделов 2.4 и 2.5.
		
		мСтруктураМногостраничныхРазделов.Свойство("Раздел2", ТаблицаСтраниц);
		СтрТаблицаСтраницы = ЭтаФорма[ТаблицаСтраниц].НайтиСтроки(Новый Структура("АктивнаяСтраница", Истина));
		
		ИндексУдалСтраницыРаздела2 = ЭтаФорма[ТаблицаСтраниц].Индекс(СтрТаблицаСтраницы[0]);
		
	КонецЕсли;
	
	ИзменитьТаблицуПараметровАвтозаполнения(-1, ИмяТекущейСтраницыПанели);
	
	РегламентированнаяОтчетность.УдалитьДополнительнуюСтраницуНаСервере(ЭтаФорма, ИмяТекущейСтраницыПанели);

	Если ИмяТекущейСтраницыПанели = "Раздел2" Тогда
		
		//сначала определим индекс страницы раздела 2
		мСтруктураМногостраничныхРазделов.Свойство("Раздел2", ТаблицаСтраниц);
		СтрТаблицаСтраницы = ЭтаФорма[ТаблицаСтраниц].НайтиСтроки(Новый Структура("АктивнаяСтраница", Истина));
		
		ИндексТекСтраницыРаздела2 = ЭтаФорма[ТаблицаСтраниц].Индекс(СтрТаблицаСтраницы[0]);
		
		//затем установим активными страницы разделов 2.4 и 2.5
		мСтруктураМногостраничныхРазделов.Свойство("Раздел24", ТаблицаСтраниц);
		СтрТаблицаСтраницы = ЭтаФорма[ТаблицаСтраниц].НайтиСтроки(Новый Структура("АктивнаяСтраница", Истина));
		Для каждого АктивнаяСтраница Из СтрТаблицаСтраницы Цикл
			АктивнаяСтраница.АктивнаяСтраница = Ложь;
		КонецЦикла; 
		ЭтаФорма[ТаблицаСтраниц].Получить(ИндексУдалСтраницыРаздела2).АктивнаяСтраница = Истина;
		
		мСтруктураМногостраничныхРазделов.Свойство("Раздел25", ТаблицаСтраниц);
		СтрТаблицаСтраницы = ЭтаФорма[ТаблицаСтраниц].НайтиСтроки(Новый Структура("АктивнаяСтраница", Истина));
		Для каждого АктивнаяСтраница Из СтрТаблицаСтраницы Цикл
			АктивнаяСтраница.АктивнаяСтраница = Ложь;
		КонецЦикла; 
		ЭтаФорма[ТаблицаСтраниц].Получить(ИндексУдалСтраницыРаздела2).АктивнаяСтраница = Истина;
		
		// При РасчетНаСервере() не будут выводиться значения в ТабличныйДокумент
		СтруктураРеквизитовФормы.НаимТекущегоРаздела = "";
		
		СохрТабличныйДокумент = Новый ТабличныйДокумент;
		СохрТабличныйДокумент.Вывести(ТабличныйДокумент);
	
		ТабличныйДокумент.Очистить();
		ТабличныйДокумент.Вывести(
			ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(
			Сред(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + "Раздел24"));
		
		ИзменитьТаблицуПараметровАвтозаполнения(-1, "Раздел24");
		РегламентированнаяОтчетность.УдалитьДополнительнуюСтраницуНаСервере(ЭтаФорма, "Раздел24");
		
		УдалитьСтраницуИзДереваСтраницНаСервере("Раздел24", ИндексУдалСтраницыРаздела2);
		
		ТабличныйДокумент.Очистить();
		ТабличныйДокумент.Вывести(
			ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(
			Сред(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + "Раздел25"));
		
		ИзменитьТаблицуПараметровАвтозаполнения(-1, "Раздел25");
		РегламентированнаяОтчетность.УдалитьДополнительнуюСтраницуНаСервере(ЭтаФорма, "Раздел25");
		
		УдалитьСтраницуИзДереваСтраницНаСервере("Раздел25", ИндексУдалСтраницыРаздела2);

		ТабличныйДокумент.Очистить();
		ТабличныйДокумент.Вывести(СохрТабличныйДокумент);
		
		СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяТекущейСтраницыПанели;
		
		РасчетНаСервере(ИмяТекущейСтраницыПанели);
		
	ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел1"
		  ИЛИ ИмяТекущейСтраницыПанели = "Раздел12"
		  ИЛИ ИмяТекущейСтраницыПанели = "Раздел13" Тогда
		
		мСтруктураМногостраничныхРазделов.Свойство(ИмяТекущейСтраницыПанели, ТаблицаСтраниц);
		СтрТаблицаСтраницы = ЭтаФорма[ТаблицаСтраниц].НайтиСтроки(Новый Структура("АктивнаяСтраница", Истина));
		
		Если СтрТаблицаСтраницы.Количество() = 1 Тогда
			
			Если ИмяТекущейСтраницыПанели = "Раздел1" Тогда
				
				ТабличныйДокумент.Области["П000110001003"].Значение
					= СтрТаблицаСтраницы[0].Данные[0].Значение.П000110001003;
				
			ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел12" Тогда
				
				ТабличныйДокумент.Области["П000120001003"].Значение
					= СтрТаблицаСтраницы[0].Данные[0].Значение.П000120001003;
				
			ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел13" Тогда
				
				ТабличныйДокумент.Области["П000130001003"].Значение
					= СтрТаблицаСтраницы[0].Данные[0].Значение.П000130001003;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьСтраницуИзДереваСтраницНаСервере(НаимРаздела, ИндексСтраницы)
	
	Для каждого НайденныйРаздел Из РазделыОтчета.ПолучитьЭлементы() Цикл
		Если НайденныйРаздел.КолонкаРазделыОтчетаСокрНаим = НаимРаздела Тогда
			Для каждого НайденнаяСтраница Из НайденныйРаздел.ПолучитьЭлементы() Цикл
				Если НайденнаяСтраница.КолонкаНомерСтраницыРазделаОтчета = ИндексСтраницы + 1 Тогда
					
					НайденныйРаздел.ПолучитьЭлементы().Удалить(НайденнаяСтраница);
					
					НомерСтраницы = 1;
					Для Каждого СтраницаРаздела Из НайденныйРаздел.ПолучитьЭлементы() Цикл
						СтраницаРаздела.КолонкаРазделыОтчета              = "Стр. " + НомерСтраницы;
						СтраницаРаздела.КолонкаНомерСтраницыРазделаОтчета = НомерСтраницы;
						НомерСтраницы = НомерСтраницы + 1;
					КонецЦикла;
					
					Прервать;
					
				КонецЕсли;
			КонецЦикла;
			Прервать;
		КонецЕсли; 
	КонецЦикла; 
		
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтраницу(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("УдалитьСтраницуЗавершение", ЭтотОбъект);
	ПоказатьВопрос(ОписаниеОповещения, НСтр("ru='Удалить текущую страницу?'"), РежимДиалогаВопрос.ДаНет, 60, КодВозвратаДиалога.Да);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтраницуЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.РазделыОтчета.ТекущиеДанные;
	
	КопияТекущиеДанные = ТекущиеДанные;
	
	ТекущиеДанные = ТекущиеДанные.ПолучитьРодителя();
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.ПолучитьЭлементы().Количество() = 1 Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяСтраницаРазделаПослеУдаления = Неопределено;
	Если КопияТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета = ТекущиеДанные.ПолучитьЭлементы().Количество() Тогда
		ТекущаяСтраницаРазделаПослеУдаления = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(ТекущиеДанные.ПолучитьЭлементы(), "КолонкаНомерСтраницыРазделаОтчета", КопияТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета - 1);
	КонецЕсли;
	
	УдалитьДополнительнуюСтраницуНаСервере(Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
	
	ТекущиеДанные.ПолучитьЭлементы().Удалить(ТекущиеДанные.ПолучитьЭлементы().Индекс(КопияТекущиеДанные));
	
	НомерСтраницы = 1;
	
	Для Каждого СтраницаРаздела Из ТекущиеДанные.ПолучитьЭлементы() Цикл
		
		СтраницаРаздела.КолонкаРазделыОтчета              = "Стр. " + НомерСтраницы;
		СтраницаРаздела.КолонкаНомерСтраницыРазделаОтчета = НомерСтраницы;
		
		НомерСтраницы = НомерСтраницы + 1;
		
	КонецЦикла;
	
	Если НЕ ТекущаяСтраницаРазделаПослеУдаления = Неопределено Тогда
		Элементы.РазделыОтчета.ТекущаяСтрока = ТекущаяСтраницаРазделаПослеУдаления.ПолучитьИдентификатор();
	КонецЕсли;
	
	Если ТекущиеДанные.ПолучитьЭлементы().Количество() = 1 Тогда 
		Обл = ТабличныйДокумент.Области["УдалитьСтраницуЗначок"];
		Обл.Гиперссылка = Ложь;
		Обл.Текст = "";
		Обл = ТабличныйДокумент.Области["УдалитьСтраницу"];
		Обл.Гиперссылка = Ложь;
		Обл.Текст = "";
	Иначе
		Обл = ТабличныйДокумент.Области["УдалитьСтраницуЗначок"];
		Обл.Гиперссылка = Истина;
		Обл.Текст = "х";
		Обл = ТабличныйДокумент.Области["УдалитьСтраницу"];
		Обл.Гиперссылка = Истина;
		Обл.Текст = "Удалить страницу";
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьПоказателиОтчетаЗаполняемыеИзИБНаСервере(ИмяСтраницы)
	
	РегламентированнаяОтчетностьКлиентСервер.ОчиститьПоказателиОтчетаЗаполняемыеИзИБ(ЭтаФорма, ИмяСтраницы);
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьДеревоРазделовОтчетаНаКлиенте() Экспорт
	
	СформироватьДеревоРазделовОтчета(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСтроку(Команда)
	
		ДобавитьСтрокуНаСервере(Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьСтрокуНаСервере(КолонкаРазделыОтчетаСокрНаим)
	
	ВставитьДополнительнуюСтроку(ЭтаФорма, КолонкаРазделыОтчетаСокрНаим);
	СохранитьДанныеРаздела(КолонкаРазделыОтчетаСокрНаим, Ложь, Ложь);
	
	Если КолонкаРазделыОтчетаСокрНаим = "Раздел2" ИЛИ КолонкаРазделыОтчетаСокрНаим = "Раздел24" Тогда
		ПереопределитьЦветЯчеекВЗависимостиОтУсловияНаСервере(КолонкаРазделыОтчетаСокрНаим);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтроку(Команда)
	
	ТекТабличноеПоле = ЭтаФорма["ТабличныйДокумент"];
	
	ТекущаяОбласть = ТекТабличноеПоле.ТекущаяОбласть;
	ИмяГруппы      = РазделТекущейОбласти(ЭтаФорма, ТекущаяОбласть);
	
	Если ИмяГруппы = Неопределено Тогда
		
		Сообщение = Новый СообщениеПользователю;
		
		Сообщение.Текст = НСтр("ru='Не выбрана удаляемая строка многострочного раздела.'");
		
		Сообщение.Сообщить();
		
		Возврат;
		
	КонецЕсли;
	
	ТекстВопроса = НСтр("ru='Удалить выбранную строку?'");
	ОписаниеОповещения = Новый ОписаниеОповещения("УдалитьСтрокуЗавершение", ЭтотОбъект);
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);

КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтрокуЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	УдалитьДополнительнуюСтрокуНаСервере(Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
	
КонецПроцедуры

&НаСервере
Процедура УдалитьДополнительнуюСтрокуНаСервере(ТекущаяСтраница)
	
	СтруктураРеквизитовФормы.ОтключитьВыполнениеРасчета = Истина;
	
	УдалитьДополнительнуюСтроку(ЭтаФорма, , , ТекущаяСтраница);
	СохранитьДанныеРаздела(ТекущаяСтраница, Ложь, Ложь);
	
	СтруктураРеквизитовФормы.ОтключитьВыполнениеРасчета = Ложь;
	
	Расчет(ЭтаФорма, ТекущаяСтраница);	
	Если ТекущаяСтраница = "Раздел2" ИЛИ ТекущаяСтраница = "Раздел24" Тогда
		ПереопределитьЦветЯчеекВЗависимостиОтУсловияНаСервере(ТекущаяСтраница);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура Обновить(Команда)
	
	ЗаполнитьСведенияОбОрганизации();
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДатуВЯчейкахНаКлиенте() Экспорт
	
	ЗаполнитьДатуВЯчейках(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЦветФонаЯчейкиНаСервере(ИмяЯчейки = Неопределено, ВариантЗаполнения = Неопределено, ИмяТекущейСтраницыПанели = "") Экспорт
	
	УстановитьЦветФонаЯчейки(ЭтаФорма, ИмяЯчейки, ВариантЗаполнения, ИмяТекущейСтраницыПанели);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЦветФонаЯчейкиНаКлиенте(ИмяЯчейки = Неопределено, ВариантЗаполнения = Неопределено, ИмяТекущейСтраницыПанели = "") Экспорт
	
	УстановитьЦветФонаЯчейки(ЭтаФорма, ИмяЯчейки, ВариантЗаполнения, ИмяТекущейСтраницыПанели);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЦветФонаЯчейки(Форма, ИмяЯчейки = Неопределено, ВариантЗаполнения = Неопределено, ИмяТекущейСтраницыПанели = "")
	
	Перем ЦветФона;
	Перем Комментарий;

	// Не нужно разукрашивать табличные поля, если открывается без открытия формы (например печать или просмотр)
	Если Форма.СтруктураРеквизитовФормы.мБезОткрытияФормы Или Форма.СтруктураРеквизитовФормы.мРежимПечати Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ИмяЯчейки = Неопределено Тогда

		ИмяПоляТаблДокумента = "ТабличныйДокумент";

		Ключ = "_" + ВариантЗаполнения;
		Форма.мСтруктураЦветовРаскраски.Свойство(Ключ, ЦветФона);

		Если ВариантЗаполнения = 4 ИЛИ ВариантЗаполнения = 5 Тогда
			Форма[ИмяПоляТаблДокумента].Области[ИмяЯчейки].Защита = Истина;
		Иначе
			Форма[ИмяПоляТаблДокумента].Области[ИмяЯчейки].Защита = Ложь;
		КонецЕсли;

		// установим цвет ячейки
		Форма[ИмяПоляТаблДокумента].Области[ИмяЯчейки].ЦветФона = ЦветФона;

	Иначе
		// устанавливаем цвет фона всех автозаполняемых ячеек активной страницы

		ТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения(Форма, ИмяТекущейСтраницыПанели);
		Если ТаблицаВариантыЗаполнения = Неопределено Тогда
			Возврат;
		КонецЕсли;

		Для Каждого Строка Из ТаблицаВариантыЗаполнения Цикл
			ИмяПоказателя     = Строка.КодПоказателя;
			ВариантЗаполнения = Строка.ВариантЗаполнения;
			Комментарий       = Строка.Комментарий;
			КодПоказателяПоСтруктуре = Строка.КодПоказателяПоСтруктуре;
			
			КолвоСтрокВМногострочнойЧасти = ПоказательВходитВМногострочнуюЧасть(Форма, ИмяПоказателя);
			
			Если КолвоСтрокВМногострочнойЧасти > 0 Тогда
				Многострочность = Истина;
				БазоваяЧасть = ИмяПоказателя;
			Иначе
				Многострочность = Ложь;
				КолвоСтрокВМногострочнойЧасти = 1;
			КонецЕсли;
			
			Для Инд = 1 по КолвоСтрокВМногострочнойЧасти Цикл
				
				Если Многострочность Тогда
					ИмяПоказателя = БазоваяЧасть + "_" + Строка(Инд);
				КонецЕсли;
				
				ТекОбластьЯчеек = Форма.ТабличныйДокумент.Области[ИмяПоказателя];
				Если (Не ПустаяСтрока(Комментарий)) ИЛИ (Не ПустаяСтрока(ТекОбластьЯчеек.Примечание.Текст)) Тогда
					ТекОбластьЯчеек.Примечание.Текст = Комментарий;
				КонецЕсли;
				
				Ключ = "_" + ВариантЗаполнения;
				Форма.мСтруктураЦветовРаскраски.Свойство(Ключ, ЦветФона);
				
				Если ВариантЗаполнения = 4 ИЛИ ВариантЗаполнения = 5 Тогда
					Форма.ТабличныйДокумент.Области[ИмяПоказателя].Защита = Истина;
				Иначе
					Форма.ТабличныйДокумент.Области[ИмяПоказателя].Защита = Ложь;
				КонецЕсли;
				
				Форма.ТабличныйДокумент.Области[ИмяПоказателя].ЦветФона = ЦветФона;
				
			КонецЦикла;

		КонецЦикла;

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуНастроек(Команда)
	
	ОткрытьФормуВыбораСтраниц("ВыбратьДляНастройки");
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	РегламентированнаяОтчетностьКлиент.ПередЗакрытиемРегламентированногоОтчета(ЭтаФорма, Отказ, СтандартнаяОбработка, ЗавершениеРаботы, ТекстПредупреждения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСДвухмернымШтрихкодомPDF417(Команда)
	
	РегламентированнаяОтчетностьКлиент.ВывестиМашиночитаемуюФорму(ЭтаФорма, Команда.Имя);
		
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьБланк(Команда)
	
	Отказ = Ложь;
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("Команда", Команда);
	ОписаниеОповещения = Новый ОписаниеОповещения("ПоказатьБланкЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередПечатьюРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьБланкЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;

	Команда = ДополнительныеПараметры.Команда;
		
	Печать(Команда.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеСменыЕдИзмеренияИТочности()

	ПроверитьТочность();
	
	// Итоговые поля надо пересчитывать, потому что при расчете они округлются
	// в соответствии с установленной единицей изменения и точностью.
	#Если ВебКлиент Тогда
		УстановитьФорматВыводаНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	#Иначе
		УстановитьФорматВыводаНаКлиенте(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	#КонецЕсли
	
	РасчетНаКлиенте(СтруктураРеквизитовФормы.НаимТекущегоРаздела);

	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьТочность()
	
	Если СтруктураРеквизитовФормы.ЕдиницаИзмерения = ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1 Тогда

		Если СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения > 2 Тогда
									
			Сообщение = Новый СообщениеПользователю;

			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1: при выводе сумм в рублях точность не может превышать 2 знака'"), ЭтаФорма.Заголовок);

			Сообщение.Сообщить();
			
			СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = 2;
			
		КонецЕсли;

	ИначеЕсли СтруктураРеквизитовФормы.ЕдиницаИзмерения = ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1000 Тогда

		Если СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения > 3 Тогда
			
			Сообщение = Новый СообщениеПользователю;

			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1: при выводе сумм в тысячах рублей точность не может превышать 3 знака'"), ЭтаФорма.Заголовок);

			Сообщение.Сообщить();
			
			СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = 3;
			
		КонецЕсли;

	ИначеЕсли СтруктураРеквизитовФормы.ЕдиницаИзмерения = ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1000000 Тогда

		Если СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения > 6 Тогда
						
			Сообщение = Новый СообщениеПользователю;

			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1: при выводе сумм в миллионах рублей точность не может превышать 6 знаков'"), ЭтаФорма.Заголовок);

			Сообщение.Сообщить();
			
			СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = 6;
			
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура УстановитьФорматВыводаНаСервере(НаимРаздела)
	
	УстановитьФорматВывода(ЭтаФорма, НаимРаздела);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьФорматВыводаНаКлиенте(НаимРаздела)
	
	УстановитьФорматВывода(ЭтаФорма, НаимРаздела);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьФорматВывода(Форма, НаимРаздела) Экспорт
	Перем СтруктураГруппы;
	Перем РазмерностьПрописьюТекст;

	Если Форма.СтруктураРеквизитовФормы.ЕдиницаИзмерения = Форма.ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1 Тогда
		Форма.СтруктураРеквизитовФормы.мДелитель = 1;
		РазмерностьПрописьюТекст = "в рублях";
		Форма.СтруктураРеквизитовФормы.мСтрокаФормата = "ЧЦ = 14; ЧДЦ = " + Форма.СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧС = 0";
		
	ИначеЕсли Форма.СтруктураРеквизитовФормы.ЕдиницаИзмерения = Форма.ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1000 Тогда
		Форма.СтруктураРеквизитовФормы.мДелитель = 1000;
		РазмерностьПрописьюТекст = "в тыс. рублей";
		Форма.СтруктураРеквизитовФормы.мСтрокаФормата = "ЧЦ = 14; ЧДЦ = " + Форма.СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧС = 3";
		
	ИначеЕсли Форма.СтруктураРеквизитовФормы.ЕдиницаИзмерения = Форма.ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1000000 Тогда
		Форма.СтруктураРеквизитовФормы.мДелитель = 1000000;
		РазмерностьПрописьюТекст = "в млн. рублей";
		Форма.СтруктураРеквизитовФормы.мСтрокаФормата = "ЧЦ = 14; ЧДЦ = " + Форма.СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧС = 6";
		
	КонецЕсли;
		
	Для Каждого СтрПоказатели Из Форма.мТаблицаСоставПоказателей Цикл

		Если НЕ НаимРаздела = СтрПоказатели.ИмяПоляТаблДокумента Тогда
			Продолжить;
		КонецЕсли;
				
		КодПоказателя        = СокрП(СтрПоказатели.КодПоказателяПоСоставу);
		ПризнМногострочность = СокрП(СтрПоказатели.ПризнМногострочности);
		КодПоказателяПоСтруктуре = СокрП(СтрПоказатели.КодПоказателяПоСтруктуре);

		Если КодПоказателя = "===" Тогда
			Прервать;
		КонецЕсли;

		Если (Лев(КодПоказателя, 2) = "//") ИЛИ (КодПоказателя = "###") ИЛИ ПустаяСтрока(КодПоказателя) Тогда
			Продолжить;
		КонецЕсли;

		КодПоказателяВФорме = СокрП(СтрПоказатели.КодПоказателяПоФорме);

		ИмяПоказателя = КодПоказателя;
		Если Не ПустаяСтрока(КодПоказателяВФорме) Тогда
			ИмяПоказателя = КодПоказателяВФорме;
		КонецЕсли;

		ТипДанныхПоказателя = СокрП(СтрПоказатели.ТипДанныхПоказателя);
		
		Если (ТипДанныхПоказателя = "E" ИЛИ ТипДанныхПоказателя = "Е") И ПустаяСтрока(КодПоказателяПоСтруктуре) Тогда
			
			ТекТабличноеПоле = Форма.ТабличныйДокумент;
			
			Если ПризнМногострочность <> "/" Тогда
				ФорматируемаяОбласть = ТекТабличноеПоле.Области[ИмяПоказателя];
				ФорматируемаяОбласть.ТипЗначения = Форма.СтруктураРеквизитовФормы.мОписаниеТиповЧислоЕ;
				ФорматируемаяОбласть.Формат = Форма.СтруктураРеквизитовФормы.мСтрокаФормата;
			Иначе
				// определяем кол-во строк многострочного раздела
				// и применяем процедуру форматирования к данной графе
				// по всем строкам
				ИмяГруппы = Лев(ИмяПоказателя, 11);
				Форма.мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);
				
				СтруктураГруппы = Форма[СтруктураГруппы];

				Для НСтр = 1 По СтруктураГруппы.Количество() Цикл
					ФорматируемаяОбласть = ТекТабличноеПоле.Области[ИмяПоказателя + "_" + НСтр];
					ФорматируемаяОбласть.ТипЗначения = Форма.СтруктураРеквизитовФормы.мОписаниеТиповЧислоЕ;
					ФорматируемаяОбласть.Формат = Форма.СтруктураРеквизитовФормы.мСтрокаФормата;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ДатаПодписиПриИзмененииНаСервере()
	
	ЗаполнитьСведенияОбОрганизации(Истина);
	
	СформироватьСпискиВыбора();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайла(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузитьИзФайлаЗавершение", ЭтотОбъект);
	
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередЗагрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура Выгрузить(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьЗавершение", ЭтотОбъект);

	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайлаЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ЗагрузитьИзФайлаОтчет();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайлаОтчет() Экспорт
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузитьИзФайлаОтчетЗавершение", ЭтотОбъект);
	
	Если Модифицированность Тогда
		СохранитьНаКлиенте(,ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайлаОтчетЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	РегламентированнаяОтчетностьЗагрузкаКлиент.ЗагрузитьИзФайлаОтчет(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Функция ЗагрузкаОтчетаИзФайла(ДанныеДляЗагрузки) Экспорт
	
	Если Модифицированность Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = СтрШаблон(НСтр("ru='Отчет ""%1"" не сохранен.'"), ЭтотОбъект.Заголовок);
		Сообщение.Сообщить();
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ ЗагрузкаОтчетаИзФайлаНаСервере(ДанныеДляЗагрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
		
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция ЗагрузкаОтчетаИзФайлаНаСервере(ДанныеДляЗагрузки)
	
	СформироватьСтруктуруПоказателей();
	
	ПараметрыОтчета = СформироватьСтруктуруПараметров();
	
	ДеревоДляЗагрузки = ИзвлечьСтруктуруXML();
	
	Если НЕ РегламентированнаяОтчетностьЗагрузка.ЗагрузкаОтчетаИзФайла(
		ЭтотОбъект, ПараметрыОтчета, ДанныеДляЗагрузки, ДеревоДляЗагрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура ВыгрузитьЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ВыгрузитьОтчет();
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузку(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьВыгрузкуЗавершение", ЭтотОбъект);

	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
		
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузкуЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПроверитьВыгрузкуОтчета();
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузкуОтчета()
	
	Если НЕ ЗначениеЗаполнено(СтруктураРеквизитовФормы.Организация) Тогда
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Организация не выбрана! Выгрузка невозможна.'");
		Сообщение.Сообщить();
		
		Возврат;
		
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьВыгрузкуОтчетаЗавершение", ЭтотОбъект);
	Если Модифицированность Тогда
		СохранитьНаКлиенте(,ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузкуОтчетаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ФормаВыгрузкиРеглОтчета = ПолучитьФорму("Документ.ВыгрузкаРегламентированныхОтчетов.Форма.ФормаДокумента", , ЭтаФорма);
	
	СпДокОсн = Новый СписокЗначений;
	СпДокОсн.Добавить(СтруктураРеквизитовФормы.мСохраненныйДок);
	
	ФормаВыгрузкиРеглОтчета.Проверить(СпДокОсн);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ЗавершениеРаботы Тогда
				
		Возврат;
		
	КонецЕсли;
	
	ПриЗакрытииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПриЗакрытииНаСервере()
	
	РегламентированнаяОтчетность.ПриЗакрытииРегламентированногоОтчета(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если СтрНайти(Заголовок, СтруктураРеквизитовФормы.СтрПериодОтчета) = 0 Тогда
		Заголовок = Заголовок + " за " + СтруктураРеквизитовФормы.СтрПериодОтчета;
	КонецЕсли;
	
	ОргСтр = " (" + СтруктураРеквизитовФормы.НаимОрганизации + ")";
	Если СтрНайти(Заголовок, ОргСтр) = 0 Тогда
		Заголовок = Заголовок + ОргСтр;
	КонецЕсли;
	
	Заголовок = Заголовок + ?(СтрНайти(ЭтаФорма.ИмяФормы, "Внешний") > 0, " - внешний отчет", "");
	
	ПодключитьОбработчикОжидания("ВыполнитьПроверкуПередОткрытием", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПроверкуПередОткрытием()
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПриОткрытииЗавершение", ЭтотОбъект);
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередОткрытиемФормыРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытииЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Модифицированность = Ложь;
		Закрыть();
		Возврат;
	КонецЕсли;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ВставитьДополнительнуюСтроку(Форма, ТекущаяСтраница)
	
	Перем СтруктураГруппы;
	Перем МаксимальноеКоличествоСтрокГруппы;
	
	// Сначала выполним проверку на активную страницу панели формы,
	// которая содержит многострочный раздел
	
	#Если НаКлиенте Тогда
		ИмяГруппы = Форма.ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаКлиенте(ТекущаяСтраница);
	#Иначе
		ИмяГруппы = Форма.ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ТекущаяСтраница);
	#КонецЕсли
	
	Если ИмяГруппы = Неопределено Тогда
		
		Сообщение = Новый СообщениеПользователю;
		
		Сообщение.Текст = НСтр("ru='Не выбран многострочный раздел, в который необходимо добавить строку.'");
		
		Сообщение.Сообщить();
		
		Возврат;
		
	КонецЕсли;
	
	// Исходное количество строк группы
	Форма.мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, МаксимальноеКоличествоСтрокГруппы);
	
	ТекТабличноеПолеИмя = "ТабличныйДокумент";
	
	ТекТабличноеПоле = Форма[ТекТабличноеПолеИмя];
	
	Форма.мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);
	
	СтруктураГруппы = Форма[СтруктураГруппы];
	
	// определяем последнюю строку многострочной группы
	КолСтрок = СтруктураГруппы.Количество();
	КолСтрокСтр = Формат(КолСтрок, "ЧГ=0");
	КолСтрокСтр1 = Формат(КолСтрок + 1, "ЧГ=0");
	Если Прав(ИмяГруппы, 2) = "20" Тогда
		ИмяПервойЯчейкиПоследнейСтроки = ИмяГруппы + "20_" + КолСтрокСтр;
		ИмяТекущейОбласти = ИмяГруппы + "20_" + КолСтрокСтр1;
	Иначе
		ИмяПервойЯчейкиПоследнейСтроки = ИмяГруппы + "01_" + КолСтрокСтр;
		ИмяТекущейОбласти = ИмяГруппы + "01_" + КолСтрокСтр1;
	КонецЕсли; 
	
	// область первой ячейки последней строки многострочного раздела
	ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяПервойЯчейкиПоследнейСтроки];
	
	НастройкиМнгЧ = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСвойствоРаздела(Форма, Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела, "МногострочностьВРазделе").НайтиСтроки(Новый Структура("ИдГруппы", ИмяГруппы))[0];
	ВысотаСтроки = НастройкиМнгЧ.ВысотаСтроки;
	
	// номера строк исходной области
	НомерВерхЯчейкиОбласти = ОбластьЯчейки.Верх;
	НомерНижнЯчейкиОбласти = ОбластьЯчейки.Верх + ВысотаСтроки - 1;
	СдвигСтрок = НомерНижнЯчейкиОбласти - НомерВерхЯчейкиОбласти + 1;
	
	// номера строк вставляемой области
	НомерВерхЯчейкиНовойОбласти = НомерВерхЯчейкиОбласти + СдвигСтрок;
	НомерНижнЯчейкиНовойОбласти = НомерНижнЯчейкиОбласти + СдвигСтрок;
	
	РегламентированнаяОтчетностьВызовСервера.СпециальногоДобавленияСтроки(ТекТабличноеПоле, ТекТабличноеПолеИмя, ИмяГруппы, НомерВерхЯчейкиОбласти, НомерНижнЯчейкиОбласти);
	
	Форма[ТекТабличноеПолеИмя] = ТекТабличноеПоле;
	
	Для НомерГрафы = 1 По Форма.мСтруктураКолвоКолонокРазделов[ИмяГруппы] Цикл
		
		Если Прав(ИмяГруппы, 2) = "20" Тогда
			ИмяКолонки = ИмяГруппы + Формат((НомерГрафы + 1) * 10, "ЧЦ=2; ЧВН=");
		Иначе
			ИмяКолонки = ИмяГруппы + Формат(НомерГрафы, "ЧЦ=2; ЧВН=");
		КонецЕсли;
		
		// переопределяем имена вставленной области
		Если СтруктураГруппы[0].Свойство(ИмяКолонки) Тогда
			
			ИмяОбластиЯчейки    = ИмяКолонки + "_" + КолСтрокСтр;
			ИмяНовОбластиЯчейки = ИмяКолонки + "_" + КолСтрокСтр1;
			
			ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяОбластиЯчейки];
			ОбластьЯчейки.Имя = ИмяНовОбластиЯчейки;
			
			// определяем границы ячейки исходной области
			НомерВерхСтрокиЯчейки  = ОбластьЯчейки.Верх - СдвигСтрок;
			НомерНижнСтрокиЯчейки  = ОбластьЯчейки.Низ  - СдвигСтрок;
			
			НомерЛевоКолонкиЯчейки = ОбластьЯчейки.Лево;
			НомерПравКолонкиЯчейки = ОбластьЯчейки.Право;
			
			// Назначаем имя ячейки исходной области,
			// (т.к. в результате вставки новой области оно было очищено)
			ОбластьЯчейкиИсходнойОбласти = ТекТабличноеПоле.Область(НомерВерхСтрокиЯчейки, НомерЛевоКолонкиЯчейки, НомерНижнСтрокиЯчейки, НомерПравКолонкиЯчейки);
			ОбластьЯчейкиИсходнойОбласти.Имя = ИмяОбластиЯчейки;
			
			// Назначаем имена областей для удаления строк
			Если НомерГрафы = 1 Тогда
				НовОбластьЯчейкиУдалитьСтроку = ТекТабличноеПоле.Область(ОбластьЯчейки.Верх, 2, ОбластьЯчейки.Верх, 2);
				НовОбластьЯчейкиУдалитьСтроку.Имя = "УдалитьСтроку" + ИмяНовОбластиЯчейки;
				ИсхОбластьЯчейкиУдалитьСтроку = ТекТабличноеПоле.Область(ОбластьЯчейкиИсходнойОбласти.Верх, 2, ОбластьЯчейкиИсходнойОбласти.Верх, 2);
				ИсхОбластьЯчейкиУдалитьСтроку.Имя = "УдалитьСтроку" + ИмяОбластиЯчейки;
			КонецЕсли;
			
			// очищаем значения ячеек вставленной области
			Если ОбластьЯчейки.СодержитЗначение = Истина Тогда
				ОбластьЯчейки.Очистить();
			Иначе
				// порядековый номер последней строки перед вставкой
				ИсходныйНомер        = Число("0" + ОбластьЯчейки.Текст);
				НовыйПорядковыйНомер = ИсходныйНомер + 1;
				
				ОбластьЯчейки.Текст  = ? (НЕ НовыйПорядковыйНомер > МаксимальноеКоличествоСтрокГруппы, Строка(НовыйПорядковыйНомер), "");
				
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	// Назначим текущей областью таблицы первую редактируемую ячейку добавленной строки.
	
	Форма.Элементы[ТекТабличноеПолеИмя].ТекущаяОбласть = ТекТабличноеПоле.Области[ИмяТекущейОбласти];
	
	// установим фокус на поле табличн. документа
	Форма.ТекущийЭлемент = Форма.Элементы[ТекТабличноеПолеИмя];
	
	// добавляем в структуру многострочной группы новую строку
	СтруктураГруппы.Добавить();
	Инд = 0;
	Пока Истина Цикл 
		Инд = Инд + 1;
		Обл = ТекТабличноеПоле.Области.Найти("УдалитьСтроку" + ИмяГруппы + "01_" + Инд);
		Если Обл = Неопределено Тогда
			Обл = ТекТабличноеПоле.Области.Найти("УдалитьСтроку" + ИмяГруппы + "20_" + Инд);
			Если Обл = Неопределено Тогда
				Прервать;
			КонецЕсли;
		КонецЕсли;
		Обл.Гиперссылка = Истина;
		Обл.Текст = "х";
	КонецЦикла;
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ОпределитьИдМногострочногоРазделаПоТабличномуПолю(Форма, ИмяТекущейСтраницы) Экспорт
	
	Перем ИдГруппы;

	Если ИмяТекущейСтраницы = "Раздел1" Тогда
		ИмяГруппы = Форма.СтруктураРеквизитовФормы.мИдГруппы1;
	ИначеЕсли ИмяТекущейСтраницы = "Раздел12" Тогда
		ИмяГруппы = Форма.СтруктураРеквизитовФормы.мИдГруппы12;
	ИначеЕсли ИмяТекущейСтраницы = "Раздел13" Тогда
		ИмяГруппы = Форма.СтруктураРеквизитовФормы.мИдГруппы13;
	ИначеЕсли ИмяТекущейСтраницы = "Раздел2" Тогда
		ИмяГруппы = Форма.СтруктураРеквизитовФормы.мИдГруппы2;
	ИначеЕсли ИмяТекущейСтраницы = "Раздел24" Тогда
		ИмяГруппы = Форма.СтруктураРеквизитовФормы.мИдГруппы24;
	ИначеЕсли ИмяТекущейСтраницы = "Приложение1" Тогда
		ИмяГруппы = Форма.СтруктураРеквизитовФормы.мИдПриложения1;
	ИначеЕсли ИмяТекущейСтраницы = "Приложение2" Тогда
		ИмяГруппы = Форма.СтруктураРеквизитовФормы.мИдПриложения2;
	ИначеЕсли ИмяТекущейСтраницы = "Приложение3" Тогда
		ИмяГруппы = Форма.СтруктураРеквизитовФормы.мИдПриложения3;
	ИначеЕсли ИмяТекущейСтраницы = "Приложение4" Тогда
		ИмяГруппы = Форма.СтруктураРеквизитовФормы.мИдПриложения4;
	ИначеЕсли ИмяТекущейСтраницы = "Приложение5" Тогда
		ИмяГруппы = Форма.СтруктураРеквизитовФормы.мИдПриложения5;
	ИначеЕсли ИмяТекущейСтраницы = "Приложение6" Тогда
		ИмяГруппы = Форма.СтруктураРеквизитовФормы.мИдПриложения6;
	ИначеЕсли ИмяТекущейСтраницы = "Приложение7" Тогда
		ИмяГруппы = Форма.СтруктураРеквизитовФормы.мИдПриложения7;
	КонецЕсли;

	Возврат ИмяГруппы;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПоказательВходитВМногострочнуюЧасть(Форма, ИмяПоказателя)

	ИмяГруппы = Лев(ИмяПоказателя, 11);

	СтруктураГруппы = Неопределено;

	Если НЕ Форма.мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы) Тогда
		Возврат 0;
	Иначе
		СтруктураГруппы = Форма[СтруктураГруппы];
		Возврат СтруктураГруппы.Количество();
	КонецЕсли;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьТаблицуВариантовЗаполнения(Форма, ИмяСтраницыПанели, ПолучитьЭталонную = Ложь)

	#Если НаКлиенте Тогда
		Возврат РегламентированнаяОтчетностьКлиент.ПолучитьТаблицуВариантовЗаполненияНаКлиенте(Форма, ИмяСтраницыПанели, ПолучитьЭталонную);
	#Иначе
		Возврат РегламентированнаяОтчетностьВызовСервера.ПолучитьТаблицуВариантовЗаполненияНаСервере(Форма, ИмяСтраницыПанели, ПолучитьЭталонную);
	#КонецЕсли
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УдалитьДополнительнуюСтроку(Форма, СпециальноеДобавление = Ложь, ИмяКолонкиНомера = Неопределено, ТекущаяСтраница) Экспорт
	Перем ИсходноеКоличествоСтрокГруппы;
	Перем СтруктураГруппы;
	
	// Сначала выполним проверку на активную страницу панели формы,
	// которая содержит многострочный раздел
	#Если НаКлиенте Тогда
		ИмяГруппы = Форма.ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаКлиенте(ТекущаяСтраница);
	#Иначе
		ИмяГруппы = Форма.ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ТекущаяСтраница);
	#КонецЕсли
	
	// исходное количество строк группы
	Форма.мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);
	
	Форма.мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);
	
	ТекТабличноеПолеИмя = "ТабличныйДокумент";
	
	ТекТабличноеПоле = Форма[ТекТабличноеПолеИмя];
	ТекущаяОбласть = Форма.Элементы[ТекТабличноеПолеИмя].ТекущаяОбласть;
	ИмяЯчейки      = ТекущаяОбласть.Имя;
	
	ИмяГруппы = РазделТекущейОбласти(Форма, ТекущаяОбласть);
	
	// предварительно обновим структуру многострочных разделов
	РегламентированнаяОтчетностьКлиентСервер.ОбновитьСтруктуруМногострочногоРаздела(Форма, ИмяГруппы);
	
	// номер строки многострочного раздела определим
	// по имени выделенной ячейки
	НомУдаляемойСтроки = Число( Сред( ИмяЯчейки, СтрНайти( ИмяЯчейки, "_") + 1));
	НомерСтрокиТаблицы = НомУдаляемойСтроки - 1; // нумерация строк в таблице значений начинается с нуля
	СтруктураГруппы = Форма[СтруктураГруппы];
	Если СтруктураГруппы.Количество() > ИсходноеКоличествоСтрокГруппы Тогда
		// удаляется добавленная строка
		Если Прав(ИмяГруппы, 2) = "20" Тогда
			ИмяПервойЯчейкиУдаляемойСтроки = ИмяГруппы + "20_" + НомУдаляемойСтроки;
		Иначе
			ИмяПервойЯчейкиУдаляемойСтроки = ИмяГруппы + "01_" + НомУдаляемойСтроки;
		КонецЕсли; 
		// область первой ячейки удаляемой строки многострочного раздела
		ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяПервойЯчейкиУдаляемойСтроки];
		
		НастройкиМнгЧ = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСвойствоРаздела(Форма, ТекущаяСтраница, "МногострочностьВРазделе").НайтиСтроки(Новый Структура("ИдГруппы", ИмяГруппы))[0];
		ВысотаСтроки = НастройкиМнгЧ.ВысотаСтроки;
		
		// номера строк удаляемой области
		НомерВерхЯчейкиОбласти = ОбластьЯчейки.Верх;
		НомерНижнЯчейкиОбласти = ОбластьЯчейки.Верх + ВысотаСтроки - 1;
		
		РегламентированнаяОтчетностьВызовСервера.СпециальногоУдаленияСтроки(ТекТабличноеПоле, ТекТабличноеПолеИмя, ИмяГруппы, НомерВерхЯчейкиОбласти, НомерНижнЯчейкиОбласти);
		
		Форма[ТекТабличноеПолеИмя] = ТекТабличноеПоле;
				
		КолвоСдвигаемыхСтрок = СтруктураГруппы.Количество() - НомУдаляемойСтроки;
		
		// обновим имена ячеек сдвинутых строк
		Если КолвоСдвигаемыхСтрок > 0 Тогда
			
			Для НСтр = НомУдаляемойСтроки + 1 По СтруктураГруппы.Количество() Цикл
				
				ТекСтрока = СтруктураГруппы[НСтр-1];
				
				Для НомерГрафы = 1 По Форма.мСтруктураКолвоКолонокРазделов[ИмяГруппы] Цикл
					
					Если Прав(ИмяГруппы, 2) = "20" Тогда
						КолонкаИмя = ИмяГруппы + Формат((НомерГрафы + 1) * 10, "ЧЦ=2; ЧВН=");
					Иначе
						КолонкаИмя = ИмяГруппы + Формат(НомерГрафы, "ЧЦ=2; ЧВН=");
					КонецЕсли;
					
					Если СтруктураГруппы[0].Свойство(КолонкаИмя) Тогда
						                        						
						ИмяСдвинутойЯчейки = КолонкаИмя + "_" + НСтр;
						НовоеИмяСдвинутойЯчейки = КолонкаИмя + "_" + (НСтр - 1);
						
						ОбластьСдвинутойЯчейки     = ТекТабличноеПоле.Области[ИмяСдвинутойЯчейки];
						ОбластьСдвинутойЯчейки.Имя = НовоеИмяСдвинутойЯчейки;
						
						Если НомерГрафы = 1 Тогда
							ОбластьЯчейкиУдалитьСтроку = ТекТабличноеПоле.Область(ОбластьСдвинутойЯчейки.Верх, 2, ОбластьСдвинутойЯчейки.Верх, 2);
							ОбластьЯчейкиУдалитьСтроку.Имя = "УдалитьСтроку" + НовоеИмяСдвинутойЯчейки;
						КонецЕсли;
						
						Если ОбластьСдвинутойЯчейки.СодержитЗначение <> Истина Тогда
							// обновляем порядковый номер строки
							
							СтарыйНомер = Число(ТекСтрока[КолонкаИмя]);
							НовыйПорядковыйНомер = Строка(Макс(СтарыйНомер - 1, 0));
							ОбластьСдвинутойЯчейки.Текст = НовыйПорядковыйНомер + ".";
							
							// обновляем значение элемента таблицы значений
							ТекСтрока[КолонкаИмя] = НовыйПорядковыйНомер;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
				
			КонецЦикла;
		КонецЕсли;
		
		// обновляем структуру многострочного раздела
		СтруктураГруппы.Удалить(НомерСтрокиТаблицы);
		
	Иначе
		// строка не удаляется в форме табличного документа,
		// а должна осуществляться сдвиг строк
		
		// обновляем структуру многострочного раздела
		// методом удаления выбранной строки и добавления пустой строки
		СтруктураГруппы.Удалить(НомерСтрокиТаблицы);
		
		ДобавляемаяСтрока = СтруктураГруппы.Добавить();
		
		// обновляем порядковые номера строк, выводимых в табличный документ
		Для Каждого СтрокаТаблицы Из СтруктураГруппы Цикл
			
			НомерСтрокиВТаблице = СтруктураГруппы.Индекс(СтрокаТаблицы);
			НомерСтрокиВФормеТаблицы = Формат(НомерСтрокиВТаблице + 1, "ЧГ=0");
			
			Для НомерГрафы = 1 По Форма.мСтруктураКолвоКолонокРазделов[ИмяГруппы] Цикл
				Если Прав(ИмяГруппы, 2) = "20" Тогда
					КолонкаТаблицыИмя = ИмяГруппы + Формат((НомерГрафы + 1) * 10, "ЧЦ=2; ЧВН=");
				Иначе
					КолонкаТаблицыИмя = ИмяГруппы + Формат(НомерГрафы, "ЧЦ=2; ЧВН=");
				КонецЕсли;
				Если СтруктураГруппы[0].Свойство(КолонкаТаблицыИмя) Тогда
					
					ИмяЯчейки                = КолонкаТаблицыИмя + "_" + НомерСтрокиВФормеТаблицы;
					ОбластьЯчейкиТаблицы     = ТекТабличноеПоле.Области[ИмяЯчейки];
					
					Если ОбластьЯчейкиТаблицы.СодержитЗначение <> Истина Тогда
						
						ПервыйНомерВГруппе = 1;
						
						// обновляем порядковый номер строки
						НовыйПорядковыйНомер = Строка(ПервыйНомерВГруппе + НомерСтрокиВТаблице);
						
						СтрокаТаблицы[КолонкаТаблицыИмя] = НовыйПорядковыйНомер;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		// Данные в многострочном блоке обновляются в декларациях!
		// Обновляем экранную форму табличного документа
		#Если НаКлиенте Тогда
			Форма.ВывестиРазделВТабличныйДокументНаКлиенте(ИмяГруппы, СтруктураГруппы);
		#Иначе
			Форма.ВывестиРазделВТабличныйДокументНаСервере(ИмяГруппы, СтруктураГруппы);
		#КонецЕсли
		
	КонецЕсли;
		
	Расчет(Форма, ТекущаяСтраница);
	
	// назначим текущей областью таблицы первую редактируемую ячейку
	// удаленной строки, если ее порядковый номер меньше кол-ва строк
	// многострочного раздела, или последней строки раздела в противном случае
	
	// определяем текущую область таблицы
	НомТекущейСтроки  = Мин(НомУдаляемойСтроки, СтруктураГруппы.Количество());
	
	Если Прав(ИмяГруппы, 2) = "20" Тогда
		ИмяТекущейОбласти = ИмяГруппы + "20_" + НомТекущейСтроки;
	Иначе
		ИмяТекущейОбласти = ИмяГруппы + "01_" + НомТекущейСтроки;
	КонецЕсли; 
	
	Форма.Элементы[ТекТабличноеПолеИмя].ТекущаяОбласть = ТекТабличноеПоле.Области[ИмяТекущейОбласти];
	
	// установим фокус на поле табличн. документа
	ТекущийЭлемент = Форма.Элементы[ТекТабличноеПолеИмя];
	Если СтруктураГруппы.Количество() = 1 Тогда
		Обл = ТекТабличноеПоле.Области.Найти("УдалитьСтроку" + ИмяГруппы + "01_1");
		Если Обл = Неопределено Тогда
			Обл = ТекТабличноеПоле.Области.Найти("УдалитьСтроку" + ИмяГруппы + "20_1");
		КонецЕсли;
		Обл.Гиперссылка = Ложь;
		Обл.Текст = "";
	КонецЕсли;
	Форма.Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ОчисткаРегламентированногоОтчетаНаСервере(ИмяСтраницы, ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста, РежимОчистки, Многостраничность, КолВоСтраницВРазделе) Экспорт
	
	УдалятьсяВсеДопЭкземпляры = Ложь;
	
	Если СтрНайти(РежимОчистки, "ОчиститьТекущийРаздел") > 0 Тогда
		
		Если (Многостраничность) И (КолВоСтраницВРазделе > 1) Тогда
			
			СтруктураРеквизитовФормы.ОтключитьВыполнениеРасчета = Истина;
			
			ОчиститьПоказателиОтчетаЗаполняемыеИзИБНаСервере(ИмяСтраницы);
			СохранитьДанныеРаздела(СтруктураРеквизитовФормы.НаимТекущегоРаздела, Истина, Ложь);
			
			СтруктураИменРазделов = Новый Структура();
			Если ИмяСтраницы = "Раздел2" Тогда
				СтруктураИменРазделов.Вставить("Раздел24");
				СтруктураИменРазделов.Вставить("Раздел25");
			ИначеЕсли ИмяСтраницы = "Раздел24" Тогда
				СтруктураИменРазделов.Вставить("Раздел2");
				СтруктураИменРазделов.Вставить("Раздел25");
			ИначеЕсли ИмяСтраницы = "Раздел25"  Тогда
				СтруктураИменРазделов.Вставить("Раздел2");
				СтруктураИменРазделов.Вставить("Раздел24");
			КонецЕсли;
			
			Для каждого ЭлИмяРаздела Из СтруктураИменРазделов Цикл
				СохрТабличныйДокумент = Новый ТабличныйДокумент;
				СохрТабличныйДокумент.Вывести(ТабличныйДокумент);
				
				ТабличныйДокумент.Очистить();
				ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + ЭлИмяРаздела.Ключ));
				СтруктураРеквизитовФормы.НаимТекущегоРаздела = ЭлИмяРаздела.Ключ;
				
				ЭтаФорма[мСтруктураМногостраничныхРазделов[ЭлИмяРаздела.Ключ]][0].АктивнаяСтраница = Истина;
				
				ОчиститьПоказателиОтчетаЗаполняемыеИзИБНаСервере(ЭлИмяРаздела.Ключ);
				СохранитьДанныеРаздела(ЭлИмяРаздела.Ключ, Истина);
				
				ТабличныйДокумент.Очистить();
				ТабличныйДокумент.Вывести(СохрТабличныйДокумент);
			КонецЦикла;
			
			СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяСтраницы;
			СтруктураРеквизитовФормы.ОтключитьВыполнениеРасчета = Ложь;
			
			УдалятьсяВсеДопЭкземпляры = Истина;
			
		Иначе
			
			ОчиститьТабличноеПолеНаСервере(ИмяСтраницы);
			
		КонецЕсли;
		
		СформироватьДеревоРазделовОтчетаНаСервере();
		
		СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
		
	ИначеЕсли СтрНайти(РежимОчистки, "ОчиститьТекущийЭкземплярМногостраничногоРаздела") > 0 Тогда
		
		СтруктураРеквизитовФормы.ОтключитьВыполнениеРасчета = Истина;
		
		ОчиститьТабличноеПолеНаСервере(ИмяСтраницы);
		
		СохранитьДанныеРаздела(СтруктураРеквизитовФормы.НаимТекущегоРаздела, Истина, Ложь);
		
		СтруктураРеквизитовФормы.ОтключитьВыполнениеРасчета = Ложь;
		
	КонецЕсли;
	
	Если ИмяСтраницы = "Титульный" Тогда
		Если Элементы.Найти("ДатаПодписи") = Неопределено Тогда
			Область = ТабличныйДокумент.Области.Найти("ДатаПодписи");
			Если НЕ Область = Неопределено Тогда
				Если ТипЗнч(Область.Значение) = Тип("Строка") Тогда
					ДатаПодписи = Лев(СтрЗаменить(Область.Значение, ".", ""), 8);
				ИначеЕсли ТипЗнч(Область.Значение) = Тип("Дата") Тогда
					Если ЗначениеЗаполнено(Область.Значение) Тогда
						ДатаПодписи = Лев(СтрЗаменить(Формат(Область.Значение, "ДФ = ""дд.ММ.гггг 'г.'"""), ".", ""), 8);
					Иначе
						ДатаПодписи = "        ";
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиентСервер.ПослеОчисткиРегламентированногоОтчета(ЭтаФорма, ИмяСтраницы, ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста);
	
КонецПроцедуры

&НаКлиенте
Процедура ОчисткаРегламентированногоОтчетаНаКлиенте(ИмяСтраницы, ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста, РежимОчистки, Многостраничность, КолВоСтраницВРазделе) Экспорт
	
	УдалятьсяВсеДопЭкземпляры = Ложь;
	
	Если СтрНайти(РежимОчистки, "ОчиститьТекущийРаздел") > 0 Тогда
		
		Если (Многостраничность) И (КолВоСтраницВРазделе > 1) Тогда

			РегламентированнаяОтчетностьКлиентСервер.ОчиститьПоказателиОтчетаЗаполняемыеИзИБ(ЭтаФорма, ИмяСтраницы);

			УдалятьсяВсеДопЭкземпляры = Истина;
			
		Иначе

			ОчиститьТабличноеПолеНаКлиенте(ИмяСтраницы);

		КонецЕсли;
		
		СформироватьДеревоРазделовОтчетаНаКлиенте();
		
	ИначеЕсли СтрНайти(РежимОчистки, "ОчиститьТекущийЭкземплярМногостраничногоРаздела") > 0 Тогда
		
		ОчиститьТабличноеПолеНаКлиенте(ИмяСтраницы);
		
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиентСервер.ПослеОчисткиРегламентированногоОтчета(ЭтаФорма, ИмяСтраницы, ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста);
	
	СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораИФНС()
	
	ПолеТабличногоДокументаТитульный = ТабличныйДокумент;
	
	КодИМНС = СокрЛП(ПолеТабличногоДокументаТитульный.Области.КодИМНС.Значение);
	КПП     = СокрЛП(ПолеТабличногоДокументаТитульный.Области.КПП1.Значение); 
	ЗначенияДляОтбора = Новый Массив;
	ЗначенияДляОтбора.Добавить(Новый Структура("КодНО, КПП", КодИМНС, КПП));
						   
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Организация", СтруктураРеквизитовФормы.Организация);
	ПараметрыФормы.Вставить("ЗначенияДляОтбора", ЗначенияДляОтбора);
						   
	ФормаВыбораНалоговогоОргана = РегламентированнаяОтчетностьКлиент.ПолучитьОбщуюФормуПоИмени("ФормаВыбораНалоговогоОргана", ПараметрыФормы, ЭтаФорма);
	
	Если ФормаВыбораНалоговогоОргана.ТаблицаНО.Количество() <> 0 Тогда
		
		ДополнительныеПараметры = Новый Структура("ПолеТабличногоДокументаТитульный", ПолеТабличногоДокументаТитульный);
		ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьФормуВыбораНалоговогоОрганаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ФормаВыбораНалоговогоОргана.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
		ФормаВыбораНалоговогоОргана.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		ФормаВыбораНалоговогоОргана.Открыть();
		
	ИначеЕсли НЕ ЗначениеЗаполнено(КодИМНС) Тогда		
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Код налогового органа необходимо задать в справочнике ""Организации"".'");
		Сообщение.Сообщить();
		
	Иначе
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Для выбора инспекции, необходимо завести соответствующую запись в справочнике ""Регистрации в налоговом органе"".'");
		Сообщение.Сообщить();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораНалоговогоОрганаЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	ПолеТабличногоДокументаТитульный = ДополнительныеПараметры.ПолеТабличногоДокументаТитульный;
	
	Если РезультатВыбора <> Неопределено Тогда
		
		ВыбранныйКодНО = РезультатВыбора.КодНО;
		ДлинаКодаНО = СтрДлина(ВыбранныйКодНО);
		
		Для Инд = ДлинаКодаНО + 1 По 4 Цикл
			ВыбранныйКодНО = "0" + ВыбранныйКодНО;
		КонецЦикла;
		
		ПолеТабличногоДокументаТитульный.Области["КодИМНС"].Значение = ВыбранныйКодНО;
		
		ПолеТабличногоДокументаТитульный.Области["КПП1"].Значение = РезультатВыбора.КПП;
		
		ЗаполнитьСведенияОПодписантахИКодПоОКАТО(РезультатВыбора.Ссылка);
		
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСведенияОПодписантахИКодПоОКАТО(Ссылка)
		
	ЗаполнитьОКТМО(Ссылка.КодПоОКТМО);
		
	ЗаполнитьСведенияОПодписантах();
	
КонецПроцедуры

&НаКлиенте
Процедура ТабличныйДокументВыбор(Элемент, Область, СтандартнаяОбработка)
	
	Если СтрЧислоВхождений(Область.Имя, "ДобавитьСтроку") = 1 И Область.Текст <> "" Тогда
		ДобавитьСтроку("");
	ИначеЕсли СтрЧислоВхождений(Область.Имя, "УдалитьСтроку") = 1 И Область.Текст <> "" Тогда
		УдалитьСтроку("");
	ИначеЕсли СтрЧислоВхождений(Область.Имя, "ДобавитьСтраницу") > 0 И Область.Текст <> "" Тогда
		ДобавитьСтраницу("");
	ИначеЕсли СтрЧислоВхождений(Область.Имя, "УдалитьСтраницу") > 0 И Область.Текст <> "" Тогда
		УдалитьСтраницу("");
	КонецЕсли;
	
	Если РегламентированнаяОтчетностьКлиент.ВыбраннаяОбластьРегламентированногоОтчетаНеВерна(ЭтаФорма, Область, СтандартнаяОбработка) Тогда
		Возврат;
	КонецЕсли;
	
	Если Лев(Область.Имя, 7) = "КодИМНС" Тогда
		
		ОбработкаВыбораИФНС();
		СтандартнаяОбработка = Ложь;
		Возврат;
		
	Иначе
		
		ПараметрВводаПоля = РегламентированнаяОтчетностьКлиентСервер.НайтиСвойстваПоказателя(ЭтаФорма, Область.Имя);
		
		// Создание динамического списка выбора.
		Если ПараметрВводаПоля <> Неопределено И ПараметрВводаПоля.ТаблицаЗначений.Количество() > 0 Тогда
			
			КодПоказателя = ПараметрВводаПоля.Показатель;
			КопироватьДанныеФормы(ПараметрВводаПоля.ТаблицаЗначений, ТЗВыбора);
			
			ТребРезультат = Неопределено;
			
			Если КодПоказателя = "Период" Тогда
				ТребРезультат = Число(Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ=М"));
			КонецЕсли;
			
			Если СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета >= '2016-01-01' Тогда
				
				КодНалСвид = СокрЛП(СтруктураДанныхТитульный.КодНаличияСвидетельства1);
				КодНалСвидABCDF = СтруктураРеквизитовФормы.КодыНаличияСвидетельстваABCDF.Найти(КодНалСвид) <> Неопределено;
				
				Если КодПоказателя = "П000200001000"    // стр. 010 раздела 2
					ИЛИ КодПоказателя = "П000200002000" // стр. 020 раздела 2
					ИЛИ КодПоказателя = "П000210001001" // гр. 1 раздела 2.1
					ИЛИ КодПоказателя = "П000220001001" // гр. 1 раздела 2.2 (строки 1-9)
					ИЛИ КодПоказателя = "П000220002001"
					ИЛИ КодПоказателя = "П000220003001"
					ИЛИ КодПоказателя = "П000220004001"
					ИЛИ КодПоказателя = "П000220005001"
					ИЛИ КодПоказателя = "П000220006001"
					ИЛИ КодПоказателя = "П000220007001"
					ИЛИ КодПоказателя = "П000220008001"
					ИЛИ КодПоказателя = "П000220009001" Тогда
					
					ЭтоКодПоОКЕИ = (КодПоказателя = "П000200002000");
					
					Если КодНалСвидABCDF Тогда
						ТребРезультат = КодНалСвид;
					ИначеЕсли ЗначениеЗаполнено(КодНалСвид) И НЕ ЭтоКодПоОКЕИ Тогда
						ТребРезультат = "";
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
			Если ТребРезультат <> Неопределено Тогда
				РазмерТЗ = ТЗВыбора.Количество();
				Если ТипЗнч(ТребРезультат) = Тип("Число") Тогда
					Для Сч = 1 По РазмерТЗ Цикл
						ЭлементТЗ = ТЗВыбора[РазмерТЗ - Сч];
						Рез = ?(НЕ ЗначениеЗаполнено(ЭлементТЗ.РезультатПроверки), 0, Число(ЭлементТЗ.РезультатПроверки));
						Если Рез <> 0 И Рез <> ТребРезультат Тогда
							ТЗВыбора.Удалить(ЭлементТЗ);
						КонецЕсли;
					КонецЦикла;
				Иначе
					Для Сч = 1 По РазмерТЗ Цикл
						ЭлементТЗ = ТЗВыбора[РазмерТЗ - Сч];
						Рез = ЭлементТЗ.РезультатПроверки;
						Если ЗначениеЗаполнено(ТребРезультат) Тогда
							Если СтрНайти(Рез, ТребРезультат) = 0 Тогда
								ТЗВыбора.Удалить(ЭлементТЗ);
							КонецЕсли;
						Иначе
							Если ЗначениеЗаполнено(Рез) Тогда
								ТЗВыбора.Удалить(ЭлементТЗ);
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
			
			ВвестиПоказатель(Элемент, Область, КодПоказателя, Ложь, ПараметрВводаПоля.ТекстПриВыборе, ТЗВыбора, СтандартнаяОбработка);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТабличныйДокументПриИзмененииСодержимогоОбласти(Элемент, Область)
	
	ИмяПоказателя = Область.Имя;
	ЗначПоказателя = Область.Значение;
	
	ПараметрВводаПоля = РегламентированнаяОтчетностьКлиентСервер.НайтиСвойстваПоказателя(ЭтаФорма, ИмяПоказателя);
	
	ИмяРаздела =  СтруктураРеквизитовФормы.НаимТекущегоРаздела;
	Если ИмяРаздела = "Титульный" Тогда
		Если Область.Имя = "ДатаПодписи" Тогда 
			ДатаПодписи = Область.Значение;
			ДатаПодписиПриИзмененииНаСервере();
			ЗаполнитьДатуВЯчейкахНаКлиенте();
			Модифицированность = Истина;
		ИначеЕсли Область.Имя = "НомерКорректировки" Тогда 
			ОписаниеТипа = Новый ОписаниеТипов("Число");
			НомерКорректировки = ОписаниеТипа.ПривестиЗначение(Область.Значение);
			СтруктураРеквизитовФормы.ВидДокумента = ?(НомерКорректировки = 0, 0, 1);
			Область.Значение = Строка(НомерКорректировки);
			РегламентированнаяОтчетностьКлиентСервер.УстановитьЗначениеОКВЭД(ДатаПодписи,
																	 СтруктураРеквизитовФормы,
																	 ТабличныйДокумент.Области.ОКВЭД.Значение);
			Модифицированность = Истина;
		КонецЕсли;
	КонецЕсли;
	
	//создание динамического списка выбора
	Если ПараметрВводаПоля <> Неопределено И ПараметрВводаПоля.ТаблицаЗначений.Количество() > 0 Тогда
		//обработка таблицы значений - удаление вариантов, не проходящих по условиям
		КодПоказателя = ПараметрВводаПоля.Показатель;
		КопироватьДанныеФормы(ПараметрВводаПоля.ТаблицаЗначений, ТЗВыбора);
		
		Если КодПоказателя = "П000210001001" Тогда // проверка уникальности значения на тек. странице
			Если  СокрЛП(ЗначПоказателя) <> ""  И  ЭтаФорма["П0002100010"].НайтиСтроки(Новый Структура("П000210001001", ЗначПоказателя)).Количество() > 0 И СокрЛП(Область.Значение) <> СокрЛП(ЗначПоказателя) Тогда 
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = НСтр("ru='Код показателя на одной странице раздела должен быть уникальным!'");
				Сообщение.Сообщить();
				Область.Значение = "";
			КонецЕсли;
		КонецЕсли;
		
		Если КодПоказателя = "П000900001000" или КодПоказателя = "П000900002000" Тогда //"шапка" приложения1
			//нужно обеспечить контроль уникальности комбинации этих полей для многостраничного раздела
			
			ТаблицаРаздела = ЭтаФорма[мСтруктураМногостраничныхРазделов["Приложение1"]];
			
			Для Каждого Страница Из ТаблицаРаздела Цикл
				Данные = Страница.Данные[0].Значение;
				Если (Данные = Неопределено) ИЛИ (Тип(Данные) <> Тип("Структура")) Тогда
					Продолжить;
				КонецЕсли;
				П000900001000 =  СокрЛП(ТабличныйДокумент.Области.П000900001000.Значение);
				П000900002000 =  СокрЛП(ТабличныйДокумент.Области.П000900002000.Значение);
				Если П000900001000 <> "" И П000900002000 <> "" И СокрЛП(Данные.П000900001000) = СокрЛП(ТабличныйДокумент.Области.П000900001000.Значение)
				И СокрЛП(Данные.П000900002000) = СокрЛП(ТабличныйДокумент.Области.П000900002000.Значение) Тогда //совпали коды вида и ОКЕИ
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = НСтр("ru='Такая комбинация значений кода вида подакцизного товара и ОКЕИ уже есть на другом листе отчета!'");
					Сообщение.Сообщить();
					Область.Значение = "";
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
		//Определение Результата проверки из таблицы выбора и если это - число > 0 - последующая обработка
		ЭлТЗВыбора = ТЗВыбора.НайтиСтроки(Новый Структура("Код", ЗначПоказателя));
		Если ЭлТЗВыбора.Количество() > 0 Тогда
			Если РегламентированнаяОтчетностьКлиентСервер.ЯвляетсяЧислом(ЭлТЗВыбора[0].РезультатПроверки) Тогда
				Рез = Число(ЭлТЗВыбора[0].РезультатПроверки);
				Если Рез > 0 Тогда
					//Здесь была обработка таблицы ТЗКритерии
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	//проверка ОКВЭД
	Если СтрНайти(Область.Имя, "ОКВЭД") > 0 Тогда
		Если НЕ ПустаяСтрока(ЗначПоказателя) И НЕ РегламентированнаяОтчетностьКлиентСервер.ОКВЭДСоответствуетТребованиям(ЗначПоказателя) Тогда
			ТекстСообщения = "На титульном листе задано некорректное значение кода вида деятельности по ОКВЭД!" + Символы.ПС
						   + "Допустимы значения, соответствующие следующим шаблонам:" + Символы.ПС
						   + """XX"", ""XX.X"", ""XX.XX"", ""XX.XX.X"", ""XX.XX.XX"" (X - любая цифра).";
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='" + ТекстСообщения + "'");
			Сообщение.Сообщить();
		КонецЕсли;
	КонецЕсли;
	
	Если Область.Имя = "КодНаличияСвидетельства1" Тогда
		
		ТекКодНалСвид = СокрЛП(Область.Значение);
		
		Если СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета >= '2016-01-01'
			И ЗначениеЗаполнено(ТекКодНалСвид) Тогда
			
			ПредКодНалСвид = СокрЛП(СтруктураРеквизитовФормы.ТекущийКодНаличияСвидетельства);
			
			СтруктураРеквизитовФормы.ТекущийКодНаличияСвидетельства = ТекКодНалСвид;
			
			ПредКодНалСвидABCDF = СтруктураРеквизитовФормы.КодыНаличияСвидетельстваABCDF.Найти(ПредКодНалСвид) <> Неопределено;
			ТекКодНалСвидABCDF  = СтруктураРеквизитовФормы.КодыНаличияСвидетельстваABCDF.Найти(ТекКодНалСвид) <> Неопределено;
			
			Если (ТекКодНалСвид <> ПредКодНалСвид)
				И ((ПредКодНалСвидABCDF ИЛИ ТекКодНалСвидABCDF)
				ИЛИ (НЕ ЗначениеЗаполнено(ПредКодНалСвид) И НЕ ТекКодНалСвидABCDF)) Тогда
				
				ПараметрыОбработки = Новый Структура("КодНалСвид,Очищать", ТекКодНалСвид, Ложь);
				РезультатОбработки = Неопределено;
				ОбработкаЗначенийНеСоответствующихКодуНаличияСвидетельства(ПараметрыОбработки, РезультатОбработки);
				
				Если РезультатОбработки.Количество() > 0 Тогда
					ТекстВопроса = НСтр("ru='Значения показателей отчета, не соответствующие значению кода наличия у налогоплательщика свидетельства, будут очищены. Продолжить?'");
					ДопПараметры = Новый Структура("Область,ТекКодНалСвид,ПредКодНалСвид",
						Область, ТекКодНалСвид, ПредКодНалСвид);
					ОписаниеОповещения = Новый ОписаниеОповещения(
						"ТабличныйДокументПриИзмененииСодержимогоОбластиЗавершение", ЭтотОбъект, ДопПараметры);
					ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ПараметрыВводаПоля = СвойстваПоказателей.НайтиСтроки(Новый Структура("Показатель", Область.Имя));
	Если ПараметрыВводаПоля.Количество() > 0 Тогда
		ПараметрВводаПоля = ПараметрыВводаПоля[0];
		Если СтрДлина(СокрЛП(ЗначПоказателя)) <> 0 И ПараметрВводаПоля.Длина <> 0 И СтрДлина(СокрЛП(ЗначПоказателя)) <> ПараметрВводаПоля.Длина Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='Длина значения показателя должна быть равна " + ПараметрВводаПоля.Длина + "!'");
			Сообщение.Сообщить();
		КонецЕсли;
	КонецЕсли;
	
	Модифицированность = Истина;
	
	ИмяРаздела = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
	
	//расчет выполняется в структуре, обновляем каждое значение после ввода
	СохранитьЗначениеПоказателяВСтруктуре(ЭтаФорма, ИмяРаздела, ИмяПоказателя, Область.Значение);
	
	Если ИмяРаздела <> "Титульный" Тогда 
		
		ИмяОбласти = Область.Имя;
		
		ПозицияПодстроки = СтрНайти(ИмяОбласти, "_");
		
		Если ПозицияПодстроки > 0 Тогда
			ИмяОбласти = Лев(ИмяОбласти, ПозицияПодстроки - 1);
		КонецЕсли;
				
		РасчетНаКлиенте(ИмяРаздела, ИмяОбласти);
		
	КонецЕсли;
	
	Если СтрНайти(КодПоказателя, "П000210001001") > 0 ИЛИ КодПоказателя = "П000200001000" ИЛИ КодПоказателя =  "П000200002000" Тогда
		
		ПереопределитьЦветЯчеекВЗависимостиОтУсловияНаКлиенте("Раздел2");
		
	КонецЕсли;
	
	Если СтрНайти(КодПоказателя, "П000240001001") > 0 Тогда 
		
		ПереопределитьЦветЯчеекВЗависимостиОтУсловияНаКлиенте("Раздел24");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТабличныйДокументПриИзмененииСодержимогоОбластиЗавершение(РезультатВопроса, ДопПараметры) Экспорт
	
	Область = ДопПараметры.Область;
	ПредКодНалСвид = ДопПараметры.ПредКодНалСвид;
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Область.Значение = ПредКодНалСвид;
		СтруктураРеквизитовФормы.ТекущийКодНаличияСвидетельства = ПредКодНалСвид;
		Возврат;
	КонецЕсли;
	
	ТекКодНалСвид = ДопПараметры.ТекКодНалСвид;
	СтруктураРеквизитовФормы.ТекущийКодНаличияСвидетельства = ТекКодНалСвид;
	
	ПараметрыОбработки = Новый Структура("КодНалСвид,Очищать", ТекКодНалСвид, Истина);
	РезультатОбработки = Неопределено;
	ОбработкаЗначенийНеСоответствующихКодуНаличияСвидетельства(ПараметрыОбработки, РезультатОбработки);
	
	Для каждого ЭлМассива Из РезультатОбработки Цикл
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='" + ЭлМассива.ТекстСообщ + "очищено.'");
		Сообщение.Сообщить();
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаЗначенийНеСоответствующихКодуНаличияСвидетельства(ПараметрыОбработки, РезультатОбработки)
	
	КодНалСвид = ПараметрыОбработки.КодНалСвид;
	Очищать = ПараметрыОбработки.Очищать;
	
	КодНалСвидABCDF = СтруктураРеквизитовФормы.КодыНаличияСвидетельстваABCDF.Найти(КодНалСвид) <> Неопределено;
	
	РезультатОбработки = Новый Массив;
	
	// Раздел 2.
	Для каждого Страница Из ТаблицаСтраницыРаздел2 Цикл
		
		Данные = Страница.Данные[0].Значение;
		ДанныеДопСтрок = Страница.ДанныеДопСтрок[0].Значение;
		ИндСтраницы = ТаблицаСтраницыРаздел2.Индекс(Страница);
		НомСтраницыСтрока = Формат(ИндСтраницы + 1, "ЧГ=");
		
		Р2_Стр010 = СокрЛП(Данные.П000200001000);
		Если ЗначениеЗаполнено(Р2_Стр010) Тогда
			Если КодНалСвидABCDF Тогда
				Условие_Р2_Стр010 = (Р2_Стр010 = "677");
			Иначе
				Условие_Р2_Стр010 = (Р2_Стр010 <> "677");
			КонецЕсли;
			Если НЕ Условие_Р2_Стр010 Тогда
				Структ = Новый Структура;
				Структ.Вставить("ИмяПок", "П000200001000");
				Структ.Вставить("НомСтраницы", ИндСтраницы + 1);
				Структ.Вставить("ТекстСообщ", "В разделе 2 на странице "
					+ НомСтраницыСтрока + " в строке 010 значение ");
				РезультатОбработки.Добавить(Структ);
				Если Очищать Тогда
					Данные.П000200001000 = "";
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Р2_Стр020 = СокрЛП(Данные.П000200002000);
		Если ЗначениеЗаполнено(Р2_Стр020) Тогда
			Если КодНалСвидABCDF Тогда
				Условие_Р2_Стр020 = (Р2_Стр020 = "168");
			Иначе
				Условие_Р2_Стр020 = Истина;
			КонецЕсли;
			Если НЕ Условие_Р2_Стр020 Тогда
				Структ = Новый Структура;
				Структ.Вставить("ИмяПок", "П000200002000");
				Структ.Вставить("НомСтраницы", ИндСтраницы + 1);
				Структ.Вставить("ТекстСообщ", "В разделе 2 на странице "
					+ НомСтраницыСтрока + " в строке 020 значение ");
				РезультатОбработки.Добавить(Структ);
				Если Очищать Тогда
					Данные.П000200002000 = "";
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		// Подраздел 2.1.
		Для каждого ДанныеДопСтроки Из ДанныеДопСтрок Цикл
			
			ИндДопСтроки = ДанныеДопСтрок.Индекс(ДанныеДопСтроки);
			НомДопСтрокиСтрока = Формат(ИндДопСтроки + 1, "ЧГ=");
			
			Р21_Гр1 = СокрЛП(ДанныеДопСтроки.П000210001001);
			Если ЗначениеЗаполнено(Р21_Гр1) Тогда
				Если КодНалСвид = "A" Тогда
					Условие_Р21_Гр1 = (Р21_Гр1 = "10038");
				ИначеЕсли КодНалСвид = "B" ИЛИ КодНалСвид = "C" Тогда
					Условие_Р21_Гр1 = (Р21_Гр1 = "10039");
				ИначеЕсли КодНалСвид = "D" ИЛИ КодНалСвид = "F" Тогда
					Условие_Р21_Гр1 = (Р21_Гр1 = "10040");
				Иначе
					Условие_Р21_Гр1 = (Р21_Гр1 <> "10038" И Р21_Гр1 <> "10039" И Р21_Гр1 <> "10040");
				КонецЕсли;
				Если НЕ Условие_Р21_Гр1 Тогда
					Структ = Новый Структура;
					Структ.Вставить("ИмяПок", "П000210001001_" + НомДопСтрокиСтрока);
					Структ.Вставить("НомСтраницы", ИндСтраницы + 1);
					Структ.Вставить("ТекстСообщ", "В разделе 2.1 на странице "
						+ НомСтраницыСтрока + " в строке " + НомДопСтрокиСтрока + " по графе 1 значение ");
					РезультатОбработки.Добавить(Структ);
					Если Очищать Тогда
						ДанныеДопСтроки.П000210001001 = "";
						Данные["П000210001001_" + НомДопСтрокиСтрока] = "";
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			Р21_Гр2 = СокрЛП(ДанныеДопСтроки.П000210001002);
			Если ЗначениеЗаполнено(Р21_Гр2) Тогда
				Если КодНалСвидABCDF Тогда
					Условие_Р21_Гр2 = Ложь;
				Иначе
					Условие_Р21_Гр2 = Истина;
				КонецЕсли;
				Если НЕ Условие_Р21_Гр2 Тогда
					Структ = Новый Структура;
					Структ.Вставить("ИмяПок", "П000210001002_" + НомДопСтрокиСтрока);
					Структ.Вставить("НомСтраницы", ИндСтраницы + 1);
					Структ.Вставить("ТекстСообщ", "В разделе 2.1 на странице "
						+ НомСтраницыСтрока + " в строке " + НомДопСтрокиСтрока + " по графе 2 значение ");
					РезультатОбработки.Добавить(Структ);
					Если Очищать Тогда
						ДанныеДопСтроки.П000210001002 = "";
						Данные["П000210001002_" + НомДопСтрокиСтрока] = "";
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
		// Подраздел 2.2.
		Для ИндДопСтроки = 1 По 9 Цикл
			
			Р22_Гр1 = СокрЛП(Данные["П00022000" + ИндДопСтроки + "001"]);
			Если ЗначениеЗаполнено(Р22_Гр1) Тогда
				
				Если КодНалСвид = "A" Тогда
					Условие_Р22_Гр1 = (Р22_Гр1 = "30027" ИЛИ Р22_Гр1 = "30028");
				ИначеЕсли КодНалСвид = "B" ИЛИ КодНалСвид = "C" Тогда
					Условие_Р22_Гр1 = (Р22_Гр1 = "30029" ИЛИ Р22_Гр1 = "30030");
				ИначеЕсли КодНалСвид = "D" ИЛИ КодНалСвид = "F" Тогда
					Условие_Р22_Гр1 = (Р22_Гр1 = "30031" ИЛИ Р22_Гр1 = "30032");
				Иначе
					Условие_Р22_Гр1
						= (Р22_Гр1 <> "30027" И Р22_Гр1 <> "30028" И Р22_Гр1 <> "30029"
						 И Р22_Гр1 <> "30030" И Р22_Гр1 <> "30031" И Р22_Гр1 <> "30032");
				КонецЕсли;
				Если НЕ Условие_Р22_Гр1 Тогда
					Структ = Новый Структура;
					Структ.Вставить("ИмяПок", "П00022000" + ИндДопСтроки + "001");
					Структ.Вставить("НомСтраницы", ИндСтраницы + 1);
					Структ.Вставить("ТекстСообщ", "В разделе 2.2 на странице "
						+ НомСтраницыСтрока + " в строке " + ИндДопСтроки + " по графе 1 значение ");
					РезультатОбработки.Добавить(Структ);
					Если Очищать Тогда
						Данные["П00022000" + ИндДопСтроки + "001"] = "";
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПереопределитьЦветЯчеекВЗависимостиОтУсловияНаСервере(ИмяТекущегоРаздела)
	
	ПереопределитьЦветЯчеекВЗависимостиОтУсловия(ЭтаФорма, ИмяТекущегоРаздела)
	
КонецПроцедуры

&НаКлиенте
Процедура ПереопределитьЦветЯчеекВЗависимостиОтУсловияНаКлиенте(ИмяТекущегоРаздела)
	
	ПереопределитьЦветЯчеекВЗависимостиОтУсловия(ЭтаФорма, ИмяТекущегоРаздела)
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПереопределитьЦветЯчеекВЗависимостиОтУсловия(Форма, ИмяТекущегоРаздела)
	
	Если ИмяТекущегоРаздела = "Раздел2" тогда  //определить цвет ячеек графы 3
		
		ТаблицаРаздела = Форма[Форма.мСтруктураМногостраничныхРазделов["Раздел2"]];
		АктивныеСтраницы = ТаблицаРаздела.НайтиСтроки(Новый Структура("АктивнаяСтраница", Истина));
		
		Если АктивныеСтраницы.Количество() > 0 Тогда
			ТаблицаТекущейСтраницы = АктивныеСтраницы[0];
		Иначе
			ТаблицаТекущейСтраницы = ТаблицаРаздела[0];
		КонецЕсли; 
		
		Данные = ТаблицаТекущейСтраницы.Данные[0].Значение;
		ТаблицаБлока = ТаблицаТекущейСтраницы.ДанныеДопСтрок[0].Значение;
		
		П000200001000 = СокрЛП(Данные.П000200001000); //Код вида
		П000200002000 = СокрЛП(Данные.П000200002000); //ОКЕИ
		
		ТаблицаРазделаР1 = Форма[Форма.мСтруктураМногостраничныхРазделов["Приложение1"]];
		ТЗДанныеДопСтрок = Неопределено;
		Для Каждого СтраницаР1 Из ТаблицаРазделаР1 Цикл
			Если (СтраницаР1.Данные[0].Значение = Неопределено) ИЛИ (Тип(СтраницаР1.Данные[0].Значение) <> Тип("Структура")) Тогда
				Продолжить;
			КонецЕсли;
			
			ДанныеР1 = СтраницаР1.Данные[0].Значение;
			ДанныеДопСтрокР1 = СтраницаР1.ДанныеДопСтрок[0].Значение;
			
			Если  П000200001000 <> "" И  П000200002000 <> "" И  СокрЛП(ДанныеР1.П000900001000) = П000200001000 И СокрЛП(ДанныеР1.П000900002000) = П000200002000 Тогда //совпали коды вида и ОКЕИ
				
				ТЗДанныеДопСтрок = ДанныеДопСтрокР1;
				
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		КодНалСвид = Форма.СтруктураДанныхТитульный.КодНаличияСвидетельства1;
		КодНалСвидABCDF = Форма.СтруктураРеквизитовФормы.КодыНаличияСвидетельстваABCDF.Найти(
			СокрЛП(КодНалСвид)) <> Неопределено;
		
		Если ТаблицаБлока <> Неопределено Тогда
			Для Каждого ТекСтрока Из ТаблицаБлока Цикл
				СтрокаКП =  СокрЛП(ТекСтрока.П000210001001);
				ИндексТекСтроки =  ТаблицаБлока.Индекс(ТекСтрока) + 1;
				
				ИмяПоказателя = "П000210001002_" + ИндексТекСтроки;
				УстановитьЦветФонаЯчейки(Форма, ИмяПоказателя, ?(КодНалСвидABCDF, 5, 0));
				
				ИмяПоказателя = "П000210001003_" + ИндексТекСтроки;
				Если ТЗДанныеДопСтрок = Неопределено или СтрокаКП = "" Тогда
					УстановитьЦветФонаЯчейки(Форма, ИмяПоказателя, 0);
					Продолжить;
				КонецЕсли;
				СтрокиТаблицы = ТЗДанныеДопСтрок.НайтиСтроки(Новый Структура("П000900000001", СтрокаКП));
				Если СтрокиТаблицы.Количество() > 0 Тогда 
					УстановитьЦветФонаЯчейки(Форма, ИмяПоказателя, ?(Форма.СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет, 0, 4));
				Иначе
					УстановитьЦветФонаЯчейки(Форма, ИмяПоказателя, 0);
				КонецЕсли;
				
			КонецЦикла;
		КонецЕсли;
		
	ИначеЕсли ИмяТекущегоРаздела = "Раздел24"	тогда
		
		ТаблицаРаздела = Форма[Форма.мСтруктураМногостраничныхРазделов["Раздел24"]];
		АктивныеСтраницы = ТаблицаРаздела.НайтиСтроки(Новый Структура("АктивнаяСтраница", Истина));
		
		Если АктивныеСтраницы.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		
		ТаблицаТекущейСтраницы = АктивныеСтраницы[0];

		Данные = ТаблицаТекущейСтраницы.Данные[0].Значение;
		ТаблицаБлока = ТаблицаТекущейСтраницы.ДанныеДопСтрок[0].Значение;
		
		ТаблицаРазделаР2 = Форма[Форма.мСтруктураМногостраничныхРазделов["Раздел2"]];
		ИндексСтраницы = ТаблицаРаздела.Индекс(ТаблицаТекущейСтраницы);
		Если ТаблицаРазделаР2.Количество() <= ИндексСтраницы Тогда
			Возврат;
		КонецЕсли; 
		ТаблицаБлокаР2 = ТаблицаРазделаР2.Получить(ИндексСтраницы);
		
		П000200001000 = СокрЛП(ТаблицаБлокаР2.Данные[0].Значение.П000200001000); //Код вида
		П000200002000 = СокрЛП(ТаблицаБлокаР2.Данные[0].Значение.П000200002000); //ОКЕИ
		
		ТаблицаРазделаР1 = Форма[Форма.мСтруктураМногостраничныхРазделов["Приложение1"]];
		ТЗДанныеДопСтрок = Неопределено;
		Для Каждого СтраницаР1 Из ТаблицаРазделаР1 Цикл
			Если (СтраницаР1.Данные[0].Значение = Неопределено) ИЛИ (Тип(СтраницаР1.Данные[0].Значение) <> Тип("Структура")) Тогда
				Продолжить;
			КонецЕсли;
			
			ДанныеР1 = СтраницаР1.Данные[0].Значение;
			ДанныеДопСтрокР1 = СтраницаР1.ДанныеДопСтрок[0].Значение;
			
			Если П000200001000 <> "" И П000200002000 <> "" И СокрЛП(ДанныеР1.П000900001000) = П000200001000 И СокрЛП(ДанныеР1.П000900002000) = П000200002000 Тогда //совпали коды вида и ОКЕИ
				ТЗДанныеДопСтрок = ДанныеДопСтрокР1;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если ТаблицаБлока <> Неопределено Тогда 
			Для Каждого ТекСтрока Из ТаблицаБлока Цикл 
				П000240001001 =  СокрЛП(ТекСтрока.П000240001001);
				ИндексТекСтроки =  ТаблицаБлока.Индекс(ТекСтрока) + 1;
				ИмяПоказателя2 = "П000240001002_"+ИндексТекСтроки;
				
				ИмяПоказателя3 = "П000240001003_"+ИндексТекСтроки;
				ИмяПоказателя4 = "П000240001004_"+ИндексТекСтроки;
				ИмяПоказателя5 = "П000240001005_"+ИндексТекСтроки;
				
				Если  П000240001001 = "20001" ИЛИ П000240001001 = "20002" тогда
					УстановитьЦветФонаЯчейки(Форма, ИмяПоказателя3, 5);
					УстановитьЦветФонаЯчейки(Форма, ИмяПоказателя4, 5);
					УстановитьЦветФонаЯчейки(Форма, ИмяПоказателя5, 5);
					Форма.ТабличныйДокумент.Области[ИмяПоказателя3].Защита = Истина;
					Форма.ТабличныйДокумент.Области[ИмяПоказателя4].Защита = Истина;
					Форма.ТабличныйДокумент.Области[ИмяПоказателя5].Защита = Истина;
				Иначе
					УстановитьЦветФонаЯчейки(Форма, ИмяПоказателя3, 0);
					УстановитьЦветФонаЯчейки(Форма, ИмяПоказателя4, 0);
					УстановитьЦветФонаЯчейки(Форма, ИмяПоказателя5, 0);
					Форма.ТабличныйДокумент.Области[ИмяПоказателя3].Защита = Ложь;
					Форма.ТабличныйДокумент.Области[ИмяПоказателя4].Защита = Ложь;
					Форма.ТабличныйДокумент.Области[ИмяПоказателя5].Защита = Ложь;
				КонецЕсли;
				
				Если ТЗДанныеДопСтрок = Неопределено ИЛИ П000240001001 = "" Тогда 
					УстановитьЦветФонаЯчейки(Форма, ИмяПоказателя2, 0);
					Продолжить;
				КонецЕсли;
				
				СтрокиТаблицы = ТЗДанныеДопСтрок.НайтиСтроки(Новый Структура("П000900000001", СтрокаКП));
				
				Если СтрокиТаблицы.Количество() > 0 Тогда 
					УстановитьЦветФонаЯчейки(Форма, ИмяПоказателя2, ?(Форма.СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет, 0, 4));
				Иначе
					УстановитьЦветФонаЯчейки(Форма, ИмяПоказателя2, 0);
				КонецЕсли;
				
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры	

&НаСервере
Процедура ОчиститьНаСервере() Экспорт
	
	ТаблицаСтраницыРаздел1.Очистить();
	ТаблицаСтраницыРаздел12.Очистить();
	ТаблицаСтраницыРаздел13.Очистить();
	ТаблицаСтраницыРаздел2.Очистить();
	ТаблицаСтраницыРаздел24.Очистить();
	ТаблицаСтраницыРаздел25.Очистить();
	ТаблицаСтраницыПриложение1.Очистить();
	ТаблицаСтраницыПриложение2.Очистить();
	ТаблицаСтраницыПриложение3.Очистить();
	ТаблицаСтраницыПриложение4.Очистить();
	ТаблицаСтраницыПриложение5.Очистить();
	ТаблицаСтраницыПриложение6.Очистить();
	ТаблицаСтраницыПриложение7.Очистить();
	
	ИнициализацияМногостраничныхРазделов();
	
	Для Каждого мнгРаздел Из мСтруктураМногострочныхРазделов Цикл
		ЭтаФорма[мнгРаздел.Ключ].Очистить();
	КонецЦикла;
	
	НачальныеОперацииСМногострочнымиБлоками();
	
	ЗаполнитьПустыеСтруктурыДанных();
	
	Если НЕ СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
		ОчиститьТабличноеПолеНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	КонецЕсли;
		
	ВывестиМакетСтраницыВТабличныйДокументНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела, 1);
		
	СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
	
	РегламентированнаяОтчетностьКлиентСервер.ОчиститьВариантыЗаполнения(ЭтаФорма);
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ МЕХАНИЗМА ПРОВЕРКИ КОНТРОЛЬНЫХ СООТНОШЕНИЙ

&НаКлиенте
Процедура Проверить(Команда)
	РегламентированнаяОтчетностьКлиент.ПроверитьКонтрольныеСоотношения(ЭтаФорма, ОбработкаКС);
КонецПроцедуры

&НаСервере
Функция ПроверитьКонтрольныеСоотношенияВОтчете() Экспорт
	
	СтруктураРеквизитовФормы.ТекстДляЗаголовочнойЧасти = РегламентированнаяОтчетностьКлиентСервер.ПредставлениеДокументаРеглОтч(СтруктураРеквизитовФормы.мСохраненныйДок);
	
	СтруктураРезультата = Новый Структура;
	СтруктураРезультата.Вставить("КоличествоНайденныхОшибок",    0);
	СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", 0);
	СтруктураРезультата.Вставить("СтруктураОшибок", Новый Структура);
	
	Если СписокРасшифровкиПоказателей = Неопределено Тогда 
		СписокРасшифровкиПоказателей = РегламентированнаяОтчетность.СоздатьСписокРасшифровкиПоказателей();
	Иначе
		СписокРасшифровкиПоказателей.Очистить();
	КонецЕсли;
	
	Если СписокРасшифровкиформулы = Неопределено Тогда 
		СписокРасшифровкиформулы = РегламентированнаяОтчетность.СоздатьСписокРасшифровкиформулы();
	Иначе
		СписокРасшифровкиформулы.Очистить();
	КонецЕсли;
	
	СчетчикФормулДляРасшифровок = 0;
	
	ПроверкаРаздел2 (СтруктураРезультата);
	ПроверкаРаздел24 (СтруктураРезультата);
	ПроверкаРаздел25 (СтруктураРезультата);
	ПроверкаПриложение1 (СтруктураРезультата);
	
	Если СписокРасшифровкиПоказателей.Количество() > 0 Тогда 
		СтруктураРезультата.Вставить("СписокРасшифровкиПоказателей", 
		ПоместитьВоВременноеХранилище(СписокРасшифровкиПоказателей, Новый УникальныйИдентификатор));
	КонецЕсли;
	
	Если СписокРасшифровкиформулы.Количество() > 0 Тогда 
		СтруктураРезультата.Вставить("СписокРасшифровкиформулы", 
		ПоместитьВоВременноеХранилище(СписокРасшифровкиформулы, Новый УникальныйИдентификатор));
	КонецЕсли;
	
	Возврат СтруктураРезультата;
	
КонецФункции

&НаСервере
Процедура ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, ЭтоОшибка, ОписаниеНарушения, Норма)
	
	СтруктураОшибок.Вставить("Описание" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), "Нарушено соотношение показателей. Возможно, показатели заполнены некорректно.");
	СтруктураОшибок.Вставить("Расшифровка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), Расшифровка);
	СтруктураОшибок.Вставить("ЭтоОшибка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), ЭтоОшибка);
	СтруктураОшибок.Вставить("ТекстовоеПредставлениеФормулы" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), ТекстФормулы + ". " + ОписаниеКС);
	СтруктураОшибок.Вставить("Описание" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), ОписаниеНарушения);
	СтруктураОшибок.Вставить("Нарушение" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), Норма);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаРаздел2 (СтруктураРезультата)
	
	ОбщееЧислоОшибок = СтруктураРезультата.КоличествоНайденныхОшибок;
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок;
	
	СтруктураОшибок = СтруктураРезультата.СтруктураОшибок;
	
	Титульный = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаТитульный;
	Раздел1 = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить().ДанныеМногостраничныхРазделов.Раздел1;
	Раздел12 = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить().ДанныеМногостраничныхРазделов.Раздел12;
	Раздел13 = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить().ДанныеМногостраничныхРазделов.Раздел13;
	Раздел2 = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить().ДанныеМногостраничныхРазделов.Раздел2;
	Раздел24 = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить().ДанныеМногостраничныхРазделов.Раздел24;
	Раздел25 = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить().ДанныеМногостраничныхРазделов.Раздел25;
	Приложение1 = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить().ДанныеМногостраничныхРазделов.Приложение1;
	Приложение2 = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить().ДанныеМногостраничныхРазделов.Приложение2;
	
	ТекстФормулы = "Разделы 2.1 - 2.3";
	
	//--------------------------------------------------------------------------------------------------------------
	// Проверка 2.2
	//--------------------------------------------------------------------------------------------------------------
	
	Для Каждого Страница1 Из Раздел2 Цикл
		НомерСтраницы1 = Строка(Раздел2.Индекс(Страница1) + 1);
		Если Страница1.Данные.П000200001000 = "291" Или Страница1.Данные.П000200001000 = "292" Или Страница1.Данные.П000200001000 = "310" Или
				Страница1.Данные.П000200001000 = "510" Тогда
			НомерСтроки1 = 1;
			Пока Страница1.Данные.Свойство("П000210001004_" + НомерСтроки1) Цикл
				Если Страница1.Данные["П000210001001_" + НомерСтроки1] <> "" Или Страница1.Данные["П000210001002_" + НомерСтроки1] <> "" Или 
					Страница1.Данные["П000210001004_" + НомерСтроки1] <> 0 Или Страница1.Данные["П000210001003_" + НомерСтроки1] <> 0 Тогда
					ОписаниеКС = "Сумма акциза по графе 4 Подраздела 2.1 должна быть равна нулю.";
					СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
					РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(СписокРасшифровкиФормулы, ОписаниеКС, , СчетчикФормулДляРасшифровок);
					
					ИмяПоказателяЛевойЧасти = "П000210001004_" + НомерСтроки1;
					НазваниеПоказателяЛевойЧасти = "Сумма акциза (руб.)";
					ЗначениеПоказателяЛевойЧасти = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Страница1.Данные[ИмяПоказателяЛевойЧасти]);
					ЗначениеПоказателяЛевойЧастиСтр = Формат(ЗначениеПоказателяЛевойЧасти, "ЧРД=.;ЧН=0");
					РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяПоказателяЛевойЧасти,
						НазваниеПоказателяЛевойЧасти, ЗначениеПоказателяЛевойЧастиСтр, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел2",
						Неопределено, НомерСтраницы1, СчетчикФормулДляРасшифровок);
					
					ЭтоОшибка = НЕ (ЗначениеПоказателяЛевойЧасти = 0);
					Расшифровка = "" + ЗначениеПоказателяЛевойЧастиСтр + " = 0";
					
					Если ЭтоОшибка Тогда
						ОписаниеНарушения = "Неправильное применение ставки";
						Норма = "ст. 193, 194 НК РФ";
						ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
					Иначе
						ОписаниеНарушения = "";
						Норма = "";
						ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
					КонецЕсли;
					
					ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, ЭтоОшибка, ОписаниеНарушения, Норма);
				КонецЕсли;
				НомерСтроки1 = НомерСтроки1 + 1;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	//--------------------------------------------------------------------------------------------------------------
	// Проверка 2.3
	//--------------------------------------------------------------------------------------------------------------
	
	Для Каждого Страница1 Из Раздел2 Цикл
		НомерСтраницы1 = Строка(Раздел2.Индекс(Страница1) + 1);
		Если Страница1.Данные.П000200001000 = "111" Или Страница1.Данные.П000200001000 = "121" Или Страница1.Данные.П000200001000 = "130" Или Страница1.Данные.П000200001000 = "140" Или Страница1.Данные.П000200001000 = "150" Или Страница1.Данные.П000200001000 = "160" Или Страница1.Данные.П000200001000 = "170" Тогда
			НомерСтроки1 = 1;
			Пока Страница1.Данные.Свойство("П000210001004_" + НомерСтроки1) Цикл
				Если Страница1.Данные["П000210001002_" + НомерСтроки1] = "0" Тогда
					ОписаниеКС = "Сумма акциза по графе 4 Подраздела 2.1 должна быть больше нуля, если код признака применения ставки в графе 2 равен ""0"" для каждой строки.";
					СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
					РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(СписокРасшифровкиФормулы, ОписаниеКС, , СчетчикФормулДляРасшифровок);
					
					ИмяПоказателяЛевойЧасти = "П000210001004_" + НомерСтроки1;
					НазваниеПоказателяЛевойЧасти = "Сумма акциза (руб.)";
					ЗначениеПоказателяЛевойЧасти = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Страница1.Данные[ИмяПоказателяЛевойЧасти]);
					ЗначениеПоказателяЛевойЧастиСтр = Формат(ЗначениеПоказателяЛевойЧасти, "ЧРД=.;ЧН=0");
					РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяПоказателяЛевойЧасти,
						НазваниеПоказателяЛевойЧасти, ЗначениеПоказателяЛевойЧастиСтр, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел2",
						Неопределено, НомерСтраницы1, СчетчикФормулДляРасшифровок);
						
					ЭтоОшибка = НЕ (ЗначениеПоказателяЛевойЧасти > 0);
					Расшифровка = "" + ЗначениеПоказателяЛевойЧастиСтр + " > 0";
					
					Если ЭтоОшибка Тогда
						ОписаниеНарушения = "Неправильное применение ставки или возможна арифметическая ошибка";
						Норма = "ст. 193, 194 НК РФ";
						ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
					Иначе
						ОписаниеНарушения = "";
						Норма = "";
						ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
					КонецЕсли;
					
					ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, ЭтоОшибка, ОписаниеНарушения, Норма);
				КонецЕсли;
				НомерСтроки1 = НомерСтроки1 + 1;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	//--------------------------------------------------------------------------------------------------------------
	// Проверка 2.4
	//--------------------------------------------------------------------------------------------------------------
	
	Для Каждого Страница1 Из Раздел2 Цикл
		НомерСтраницы1 = Строка(Раздел2.Индекс(Страница1) + 1);
		Если Страница1.Данные.П000200001000 = "111" Или Страница1.Данные.П000200001000 = "121" Или Страница1.Данные.П000200001000 = "130" Или Страница1.Данные.П000200001000 = "140" Или Страница1.Данные.П000200001000 = "150" Или Страница1.Данные.П000200001000 = "160" Или Страница1.Данные.П000200001000 = "170" Тогда
			НомерСтроки1 = 1;
			Пока Страница1.Данные.Свойство("П000210001004_" + НомерСтроки1) Цикл
				Если Страница1.Данные["П000210001002_" + НомерСтроки1] = "1" Или Страница1.Данные["П000210001002_" + НомерСтроки1] = "2" Или Страница1.Данные["П000210001002_" + НомерСтроки1] = "3" Тогда
					ОписаниеКС = "Сумма акциза по графе 4 Подраздела 2.1 должна быть равна нулю, если код признака применения ставки в графе 2 равен ""1"" или ""2"" или ""3"" для каждой строки.";
					СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
					РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(СписокРасшифровкиФормулы, ОписаниеКС, , СчетчикФормулДляРасшифровок);
					
					ИмяПоказателяЛевойЧасти = "П000210001004_" + НомерСтроки1;
					НазваниеПоказателяЛевойЧасти = "Сумма акциза (руб.)";
					ЗначениеПоказателяЛевойЧасти = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Страница1.Данные[ИмяПоказателяЛевойЧасти]);
					ЗначениеПоказателяЛевойЧастиСтр = Формат(ЗначениеПоказателяЛевойЧасти, "ЧРД=.;ЧН=0");
					РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяПоказателяЛевойЧасти,
						НазваниеПоказателяЛевойЧасти, ЗначениеПоказателяЛевойЧастиСтр, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел2",
						Неопределено, НомерСтраницы1, СчетчикФормулДляРасшифровок);
						
					ЭтоОшибка = НЕ (ЗначениеПоказателяЛевойЧасти = 0);
					Расшифровка = "" + ЗначениеПоказателяЛевойЧастиСтр + " = 0";
					
					Если ЭтоОшибка Тогда
						ОписаниеНарушения = "Неправильное применение ставки";
						Норма = "ст. 193, 194 НК РФ";
						ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
					Иначе
						ОписаниеНарушения = "";
						Норма = "";
						ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
					КонецЕсли;
					
					ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, ЭтоОшибка, ОписаниеНарушения, Норма);
				КонецЕсли;
				НомерСтроки1 = НомерСтроки1 + 1;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	//--------------------------------------------------------------------------------------------------------------
	// Проверка 2.5 10001
	//--------------------------------------------------------------------------------------------------------------
	Сумма1 = 0;
	Для Каждого Страница1 Из Приложение1 Цикл
		Если Страница1.Данные.П000900001000 = "111" Или Страница1.Данные.П000900001000 = "121" Или Страница1.Данные.П000900001000 = "130" Или Страница1.Данные.П000900001000 = "140" Или Страница1.Данные.П000900001000 = "150" Или Страница1.Данные.П000900001000 = "160" Или Страница1.Данные.П000900001000 = "170" Или Страница1.Данные.П000900001000 = "210" Или Страница1.Данные.П000900001000 = "220" Или Страница1.Данные.П000900001000 = "230" Или Страница1.Данные.П000900001000 = "240" Или Страница1.Данные.П000900001000 = "291" Или Страница1.Данные.П000900001000 = "292" Или Страница1.Данные.П000900001000 = "293" Или Страница1.Данные.П000900001000 = "510" Или Страница1.Данные.П000900001000 = "520" Или Страница1.Данные.П000900001000 = "531" Или Страница1.Данные.П000900001000 = "532" Тогда
			Сумма2 = 0;
			НомерСтроки1 = 1;
			Пока Страница1.Данные.Свойство("П000900000004_" + НомерСтроки1) Цикл
				Если Страница1.Данные["П000900000001_" + НомерСтроки1] = "10001" Тогда
					Сумма2 = Сумма2 + Страница1.Данные["П000900000004_" + НомерСтроки1];
				КонецЕсли;
				НомерСтроки1 = НомерСтроки1 + 1;
			КонецЦикла;
			Сумма1 = Сумма1 + Сумма2;
		КонецЕсли;
	КонецЦикла;
	П1НалоговаяБаза = Сумма1;
	
	НомерСтраницы2 = 0;
	Для Каждого Страница2 Из Раздел2 Цикл
		НомерСтраницы2 = НомерСтраницы2 + 1;
		Если Страница2.Данные.П000200001000 = "111" Или Страница2.Данные.П000200001000 = "121" Или Страница2.Данные.П000200001000 = "130" Или Страница2.Данные.П000200001000 = "140" Или Страница2.Данные.П000200001000 = "150" Или Страница2.Данные.П000200001000 = "160" Или Страница2.Данные.П000200001000 = "170" Или Страница2.Данные.П000200001000 = "210" Или Страница2.Данные.П000200001000 = "220" Или Страница2.Данные.П000200001000 = "230" Или Страница2.Данные.П000200001000 = "240" Или Страница2.Данные.П000200001000 = "291" Или Страница2.Данные.П000200001000 = "292" Или Страница2.Данные.П000200001000 = "293" Или Страница2.Данные.П000200001000 = "510" Или Страница2.Данные.П000200001000 = "520" Или Страница2.Данные.П000200001000 = "531" Или Страница2.Данные.П000200001000 = "532" Тогда
			НомерСтроки2 = 1;
			Пока Страница2.Данные.Свойство("П000210001004_" + НомерСтроки2) Цикл
				Если Страница2.Данные["П000210001001_" + НомерСтроки2] = "10001" Тогда
					ОписаниеКС = "Сумма налоговой базы по графе 3 Подраздела 2.1 по кодам 10001-10020, 10022, 20003-20005 должна быть равна сумме строк графы 4 Приложения 1 по соответствующим строкам.";
					СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
					РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(СписокРасшифровкиФормулы, ОписаниеКС, , СчетчикФормулДляРасшифровок);
					
					ИмяПоказателяЛевойЧасти = "П000210001003_" + НомерСтроки2;
					НазваниеПоказателяЛевойЧасти = "Налоговая база";
					ЗначениеПоказателяЛевойЧасти = Страница2.Данные[ИмяПоказателяЛевойЧасти];
					ЗначениеПоказателяЛевойЧастиСтр = Формат(ЗначениеПоказателяЛевойЧасти, "ЧРД=.;ЧН=0");
					РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяПоказателяЛевойЧасти,
						НазваниеПоказателяЛевойЧасти, ЗначениеПоказателяЛевойЧастиСтр, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел2",
						Неопределено, НомерСтраницы2, СчетчикФормулДляРасшифровок);
						
					ЭтоОшибка = НЕ (ЗначениеПоказателяЛевойЧасти  = П1НалоговаяБаза);
					Расшифровка = "" + ЗначениеПоказателяЛевойЧастиСтр + " = " + П1НалоговаяБаза;
					
					Если ЭтоОшибка Тогда
						ОписаниеНарушения = "Арифметическая ошибка";
						Норма = "ст. 88 НК РФ";
						ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
					Иначе
						ОписаниеНарушения = "";
						Норма = "";
						ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
					КонецЕсли;
					
					ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, ЭтоОшибка, ОписаниеНарушения, Норма);
				КонецЕсли;
				НомерСтроки2 = НомерСтроки2 + 1;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	//--------------------------------------------------------------------------------------------------------------
	// Проверка 2.5
	//--------------------------------------------------------------------------------------------------------------
	Сумма1 = 0;
	Для Каждого Страница1 Из Приложение1 Цикл
		Если Страница1.Данные.П000900001000 = "111" Или Страница1.Данные.П000900001000 = "121" Или Страница1.Данные.П000900001000 = "130" Или Страница1.Данные.П000900001000 = "140" Или Страница1.Данные.П000900001000 = "150" Или Страница1.Данные.П000900001000 = "160" Или Страница1.Данные.П000900001000 = "170" Или Страница1.Данные.П000900001000 = "210" Или Страница1.Данные.П000900001000 = "220" Или Страница1.Данные.П000900001000 = "230" Или Страница1.Данные.П000900001000 = "240" Или Страница1.Данные.П000900001000 = "291" Или Страница1.Данные.П000900001000 = "292" Или Страница1.Данные.П000900001000 = "293" Или Страница1.Данные.П000900001000 = "510" Или Страница1.Данные.П000900001000 = "520" Или Страница1.Данные.П000900001000 = "531" Или Страница1.Данные.П000900001000 = "532" Тогда
			Сумма2 = 0;
			НомерСтроки1 = 1;
			Пока Страница1.Данные.Свойство("П000900000004_" + НомерСтроки1) Цикл
				Если Страница1.Данные["П000900000001_" + НомерСтроки1] = "10006" Тогда
					Сумма2 = Сумма2 + Страница1.Данные["П000900000004_" + НомерСтроки1];
				КонецЕсли;
				НомерСтроки1 = НомерСтроки1 + 1;
			КонецЦикла;
			Сумма1 = Сумма1 + Сумма2;
		КонецЕсли;
	КонецЦикла;
	П1НалоговаяБаза = Сумма1;
	
	НомерСтраницы2 = 0;
	Для Каждого Страница2 Из Раздел2 Цикл
		НомерСтраницы2 = НомерСтраницы2 + 1;
		Если Страница2.Данные.П000200001000 = "111" Или Страница2.Данные.П000200001000 = "121" Или Страница2.Данные.П000200001000 = "130" Или Страница2.Данные.П000200001000 = "140" Или Страница2.Данные.П000200001000 = "150" Или Страница2.Данные.П000200001000 = "160" Или Страница2.Данные.П000200001000 = "170" Или Страница2.Данные.П000200001000 = "210" Или Страница2.Данные.П000200001000 = "220" Или Страница2.Данные.П000200001000 = "230" Или Страница2.Данные.П000200001000 = "240" Или Страница2.Данные.П000200001000 = "291" Или Страница2.Данные.П000200001000 = "292" Или Страница2.Данные.П000200001000 = "293" Или Страница2.Данные.П000200001000 = "510" Или Страница2.Данные.П000200001000 = "520" Или Страница2.Данные.П000200001000 = "531" Или Страница2.Данные.П000200001000 = "532" Тогда
			НомерСтроки2 = 1;
			Пока Страница2.Данные.Свойство("П000210001004_" + НомерСтроки2) Цикл
				Если Страница2.Данные["П000210001001_" + НомерСтроки2] = "10006" Тогда
					ОписаниеКС = "Сумма налоговой базы по графе 3 Подраздела 2.1 по кодам 10001-10020, 10022, 20003-20005 должна быть равна сумме строк графы 4 Приложения 1 по соответствующим строкам.";
					СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
					РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(СписокРасшифровкиФормулы, ОписаниеКС, , СчетчикФормулДляРасшифровок);
					
					ИмяПоказателяЛевойЧасти = "П000210001003_" + НомерСтроки2;
					НазваниеПоказателяЛевойЧасти = "Налоговая база";
					ЗначениеПоказателяЛевойЧасти = Страница2.Данные[ИмяПоказателяЛевойЧасти];
					ЗначениеПоказателяЛевойЧастиСтр = Формат(ЗначениеПоказателяЛевойЧасти, "ЧРД=.;ЧН=0");
					РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяПоказателяЛевойЧасти,
						НазваниеПоказателяЛевойЧасти, ЗначениеПоказателяЛевойЧастиСтр, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел2",
						Неопределено, НомерСтраницы2, СчетчикФормулДляРасшифровок);
						
					ЭтоОшибка = НЕ (ЗначениеПоказателяЛевойЧасти  = П1НалоговаяБаза);
					Расшифровка = "" + ЗначениеПоказателяЛевойЧастиСтр + " = " + П1НалоговаяБаза;
					
					Если ЭтоОшибка Тогда
						ОписаниеНарушения = "Арифметическая ошибка";
						Норма = "ст. 88 НК РФ";
						ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
					Иначе
						ОписаниеНарушения = "";
						Норма = "";
						ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
					КонецЕсли;
					
					ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, ЭтоОшибка, ОписаниеНарушения, Норма);
				КонецЕсли;
				НомерСтроки2 = НомерСтроки2 + 1;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	//--------------------------------------------------------------------------------------------------------------
	// Проверка 2.5
	//--------------------------------------------------------------------------------------------------------------
	Сумма1 = 0;
	Для Каждого Страница1 Из Приложение1 Цикл
		Если Страница1.Данные.П000900001000 = "111" Или Страница1.Данные.П000900001000 = "121" Или Страница1.Данные.П000900001000 = "130" Или Страница1.Данные.П000900001000 = "140" Или Страница1.Данные.П000900001000 = "150" Или Страница1.Данные.П000900001000 = "160" Или Страница1.Данные.П000900001000 = "170" Или Страница1.Данные.П000900001000 = "210" Или Страница1.Данные.П000900001000 = "220" Или Страница1.Данные.П000900001000 = "230" Или Страница1.Данные.П000900001000 = "240" Или Страница1.Данные.П000900001000 = "291" Или Страница1.Данные.П000900001000 = "292" Или Страница1.Данные.П000900001000 = "293" Или Страница1.Данные.П000900001000 = "510" Или Страница1.Данные.П000900001000 = "520" Или Страница1.Данные.П000900001000 = "531" Или Страница1.Данные.П000900001000 = "532" Тогда
			Сумма2 = 0;
			НомерСтроки1 = 1;
			Пока Страница1.Данные.Свойство("П000900000004_" + НомерСтроки1) Цикл
				Если Страница1.Данные["П000900000001_" + НомерСтроки1] = "10007" Тогда
					Сумма2 = Сумма2 + Страница1.Данные["П000900000004_" + НомерСтроки1];
				КонецЕсли;
				НомерСтроки1 = НомерСтроки1 + 1;
			КонецЦикла;
			Сумма1 = Сумма1 + Сумма2;
		КонецЕсли;
	КонецЦикла;
	П1НалоговаяБаза = Сумма1;
	
	НомерСтраницы2 = 0;
	Для Каждого Страница2 Из Раздел2 Цикл
		НомерСтраницы2 = НомерСтраницы2 + 1;
		Если Страница2.Данные.П000200001000 = "111" Или Страница2.Данные.П000200001000 = "121" Или Страница2.Данные.П000200001000 = "130" Или Страница2.Данные.П000200001000 = "140" Или Страница2.Данные.П000200001000 = "150" Или Страница2.Данные.П000200001000 = "160" Или Страница2.Данные.П000200001000 = "170" Или Страница2.Данные.П000200001000 = "210" Или Страница2.Данные.П000200001000 = "220" Или Страница2.Данные.П000200001000 = "230" Или Страница2.Данные.П000200001000 = "240" Или Страница2.Данные.П000200001000 = "291" Или Страница2.Данные.П000200001000 = "292" Или Страница2.Данные.П000200001000 = "293" Или Страница2.Данные.П000200001000 = "510" Или Страница2.Данные.П000200001000 = "520" Или Страница2.Данные.П000200001000 = "531" Или Страница2.Данные.П000200001000 = "532" Тогда
			НомерСтроки2 = 1;
			Пока Страница2.Данные.Свойство("П000210001004_" + НомерСтроки2) Цикл
				Если Страница2.Данные["П000210001001_" + НомерСтроки2] = "10007" Тогда
					ОписаниеКС = "Сумма налоговой базы по графе 3 Подраздела 2.1 по кодам 10001-10020, 10022, 20003-20005 должна быть равна сумме строк графы 4 Приложения 1 по соответствующим строкам.";
					СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
					РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(СписокРасшифровкиФормулы, ОписаниеКС, , СчетчикФормулДляРасшифровок);
					
					ИмяПоказателяЛевойЧасти = "П000210001003_" + НомерСтроки2;
					НазваниеПоказателяЛевойЧасти = "Налоговая база";
					ЗначениеПоказателяЛевойЧасти = Страница2.Данные[ИмяПоказателяЛевойЧасти];
					ЗначениеПоказателяЛевойЧастиСтр = Формат(ЗначениеПоказателяЛевойЧасти, "ЧРД=.;ЧН=0");
					РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяПоказателяЛевойЧасти,
						НазваниеПоказателяЛевойЧасти, ЗначениеПоказателяЛевойЧастиСтр, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел2",
						Неопределено, НомерСтраницы2, СчетчикФормулДляРасшифровок);
						
					ЭтоОшибка = НЕ (ЗначениеПоказателяЛевойЧасти  = П1НалоговаяБаза);
					Расшифровка = "" + ЗначениеПоказателяЛевойЧастиСтр + " = " + П1НалоговаяБаза;
					
					Если ЭтоОшибка Тогда
						ОписаниеНарушения = "Арифметическая ошибка";
						Норма = "ст. 88 НК РФ";
						ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
					Иначе
						ОписаниеНарушения = "";
						Норма = "";
						ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
					КонецЕсли;
					
					ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, ЭтоОшибка, ОписаниеНарушения, Норма);
				КонецЕсли;
				НомерСтроки2 = НомерСтроки2 + 1;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	//--------------------------------------------------------------------------------------------------------------
	// Проверка 2.5
	//--------------------------------------------------------------------------------------------------------------
	Сумма1 = 0;
	Для Каждого Страница1 Из Приложение1 Цикл
		Если Страница1.Данные.П000900001000 = "111" Или Страница1.Данные.П000900001000 = "121" Или Страница1.Данные.П000900001000 = "130" Или Страница1.Данные.П000900001000 = "140" Или Страница1.Данные.П000900001000 = "150" Или Страница1.Данные.П000900001000 = "160" Или Страница1.Данные.П000900001000 = "170" Или Страница1.Данные.П000900001000 = "210" Или Страница1.Данные.П000900001000 = "220" Или Страница1.Данные.П000900001000 = "230" Или Страница1.Данные.П000900001000 = "240" Или Страница1.Данные.П000900001000 = "291" Или Страница1.Данные.П000900001000 = "292" Или Страница1.Данные.П000900001000 = "293" Или Страница1.Данные.П000900001000 = "510" Или Страница1.Данные.П000900001000 = "520" Или Страница1.Данные.П000900001000 = "531" Или Страница1.Данные.П000900001000 = "532" Тогда
			Сумма2 = 0;
			НомерСтроки1 = 1;
			Пока Страница1.Данные.Свойство("П000900000004_" + НомерСтроки1) Цикл
				Если Страница1.Данные["П000900000001_" + НомерСтроки1] = "10008" Тогда
					Сумма2 = Сумма2 + Страница1.Данные["П000900000004_" + НомерСтроки1];
				КонецЕсли;
				НомерСтроки1 = НомерСтроки1 + 1;
			КонецЦикла;
			Сумма1 = Сумма1 + Сумма2;
		КонецЕсли;
	КонецЦикла;
	П1НалоговаяБаза = Сумма1;
	
	НомерСтраницы2 = 0;
	Для Каждого Страница2 Из Раздел2 Цикл
		НомерСтраницы2 = НомерСтраницы2 + 1;
		Если Страница2.Данные.П000200001000 = "111" Или Страница2.Данные.П000200001000 = "121" Или Страница2.Данные.П000200001000 = "130" Или Страница2.Данные.П000200001000 = "140" Или Страница2.Данные.П000200001000 = "150" Или Страница2.Данные.П000200001000 = "160" Или Страница2.Данные.П000200001000 = "170" Или Страница2.Данные.П000200001000 = "210" Или Страница2.Данные.П000200001000 = "220" Или Страница2.Данные.П000200001000 = "230" Или Страница2.Данные.П000200001000 = "240" Или Страница2.Данные.П000200001000 = "291" Или Страница2.Данные.П000200001000 = "292" Или Страница2.Данные.П000200001000 = "293" Или Страница2.Данные.П000200001000 = "510" Или Страница2.Данные.П000200001000 = "520" Или Страница2.Данные.П000200001000 = "531" Или Страница2.Данные.П000200001000 = "532" Тогда
			НомерСтроки2 = 1;
			Пока Страница2.Данные.Свойство("П000210001004_" + НомерСтроки2) Цикл
				Если Страница2.Данные["П000210001001_" + НомерСтроки2] = "10008" Тогда
					ОписаниеКС = "Сумма налоговой базы по графе 3 Подраздела 2.1 по кодам 10001-10020, 10022, 20003-20005 должна быть равна сумме строк графы 4 Приложения 1 по соответствующим строкам.";
					СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
					РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(СписокРасшифровкиФормулы, ОписаниеКС, , СчетчикФормулДляРасшифровок);
					
					ИмяПоказателяЛевойЧасти = "П000210001003_" + НомерСтроки2;
					НазваниеПоказателяЛевойЧасти = "Налоговая база";
					ЗначениеПоказателяЛевойЧасти = Страница2.Данные[ИмяПоказателяЛевойЧасти];
					ЗначениеПоказателяЛевойЧастиСтр = Формат(ЗначениеПоказателяЛевойЧасти, "ЧРД=.;ЧН=0");
					РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяПоказателяЛевойЧасти,
						НазваниеПоказателяЛевойЧасти, ЗначениеПоказателяЛевойЧастиСтр, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел2",
						Неопределено, НомерСтраницы2, СчетчикФормулДляРасшифровок);
						
					ЭтоОшибка = НЕ (ЗначениеПоказателяЛевойЧасти  = П1НалоговаяБаза);
					Расшифровка = "" + ЗначениеПоказателяЛевойЧастиСтр + " = " + П1НалоговаяБаза;
					
					Если ЭтоОшибка Тогда
						ОписаниеНарушения = "Арифметическая ошибка";
						Норма = "ст. 88 НК РФ";
						ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
					Иначе
						ОписаниеНарушения = "";
						Норма = "";
						ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
					КонецЕсли;
					
					ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, ЭтоОшибка, ОписаниеНарушения, Норма);
				КонецЕсли;
				НомерСтроки2 = НомерСтроки2 + 1;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	//--------------------------------------------------------------------------------------------------------------
	// Проверка 2.5
	//--------------------------------------------------------------------------------------------------------------
	Сумма1 = 0;
	Для Каждого Страница1 Из Приложение1 Цикл
		Если Страница1.Данные.П000900001000 = "111" Или Страница1.Данные.П000900001000 = "121" Или Страница1.Данные.П000900001000 = "130" Или Страница1.Данные.П000900001000 = "140" Или Страница1.Данные.П000900001000 = "150" Или Страница1.Данные.П000900001000 = "160" Или Страница1.Данные.П000900001000 = "170" Или Страница1.Данные.П000900001000 = "210" Или Страница1.Данные.П000900001000 = "220" Или Страница1.Данные.П000900001000 = "230" Или Страница1.Данные.П000900001000 = "240" Или Страница1.Данные.П000900001000 = "291" Или Страница1.Данные.П000900001000 = "292" Или Страница1.Данные.П000900001000 = "293" Или Страница1.Данные.П000900001000 = "510" Или Страница1.Данные.П000900001000 = "520" Или Страница1.Данные.П000900001000 = "531" Или Страница1.Данные.П000900001000 = "532" Тогда
			Сумма2 = 0;
			НомерСтроки1 = 1;
			Пока Страница1.Данные.Свойство("П000900000004_" + НомерСтроки1) Цикл
				Если Страница1.Данные["П000900000001_" + НомерСтроки1] = "10009" Тогда
					Сумма2 = Сумма2 + Страница1.Данные["П000900000004_" + НомерСтроки1];
				КонецЕсли;
				НомерСтроки1 = НомерСтроки1 + 1;
			КонецЦикла;
			Сумма1 = Сумма1 + Сумма2;
		КонецЕсли;
	КонецЦикла;
	П1НалоговаяБаза = Сумма1;
	
	НомерСтраницы2 = 0;
	Для Каждого Страница2 Из Раздел2 Цикл
		НомерСтраницы2 = НомерСтраницы2 + 1;
		Если Страница2.Данные.П000200001000 = "111" Или Страница2.Данные.П000200001000 = "121" Или Страница2.Данные.П000200001000 = "130" Или Страница2.Данные.П000200001000 = "140" Или Страница2.Данные.П000200001000 = "150" Или Страница2.Данные.П000200001000 = "160" Или Страница2.Данные.П000200001000 = "170" Или Страница2.Данные.П000200001000 = "210" Или Страница2.Данные.П000200001000 = "220" Или Страница2.Данные.П000200001000 = "230" Или Страница2.Данные.П000200001000 = "240" Или Страница2.Данные.П000200001000 = "291" Или Страница2.Данные.П000200001000 = "292" Или Страница2.Данные.П000200001000 = "293" Или Страница2.Данные.П000200001000 = "510" Или Страница2.Данные.П000200001000 = "520" Или Страница2.Данные.П000200001000 = "531" Или Страница2.Данные.П000200001000 = "532" Тогда
			НомерСтроки2 = 1;
			Пока Страница2.Данные.Свойство("П000210001004_" + НомерСтроки2) Цикл
				Если Страница2.Данные["П000210001001_" + НомерСтроки2] = "10009" Тогда
					ОписаниеКС = "Сумма налоговой базы по графе 3 Подраздела 2.1 по кодам 10001-10020, 10022, 20003-20005 должна быть равна сумме строк графы 4 Приложения 1 по соответствующим строкам.";
					СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
					РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(СписокРасшифровкиФормулы, ОписаниеКС, , СчетчикФормулДляРасшифровок);
					
					ИмяПоказателяЛевойЧасти = "П000210001003_" + НомерСтроки2;
					НазваниеПоказателяЛевойЧасти = "Налоговая база";
					ЗначениеПоказателяЛевойЧасти = Страница2.Данные[ИмяПоказателяЛевойЧасти];
					ЗначениеПоказателяЛевойЧастиСтр = Формат(ЗначениеПоказателяЛевойЧасти, "ЧРД=.;ЧН=0");
					РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяПоказателяЛевойЧасти,
						НазваниеПоказателяЛевойЧасти, ЗначениеПоказателяЛевойЧастиСтр, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел2",
						Неопределено, НомерСтраницы2, СчетчикФормулДляРасшифровок);
						
					ЭтоОшибка = НЕ (ЗначениеПоказателяЛевойЧасти  = П1НалоговаяБаза);
					Расшифровка = "" + ЗначениеПоказателяЛевойЧастиСтр + " = " + П1НалоговаяБаза;
					
					Если ЭтоОшибка Тогда
						ОписаниеНарушения = "Арифметическая ошибка";
						Норма = "ст. 88 НК РФ";
						ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
					Иначе
						ОписаниеНарушения = "";
						Норма = "";
						ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
					КонецЕсли;
					
					ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, ЭтоОшибка, ОписаниеНарушения, Норма);
				КонецЕсли;
				НомерСтроки2 = НомерСтроки2 + 1;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	//--------------------------------------------------------------------------------------------------------------
	// Проверка 2.5
	//--------------------------------------------------------------------------------------------------------------
	Сумма1 = 0;
	Для Каждого Страница1 Из Приложение1 Цикл
		Если Страница1.Данные.П000900001000 = "111" Или Страница1.Данные.П000900001000 = "121" Или Страница1.Данные.П000900001000 = "130" Или Страница1.Данные.П000900001000 = "140" Или Страница1.Данные.П000900001000 = "150" Или Страница1.Данные.П000900001000 = "160" Или Страница1.Данные.П000900001000 = "170" Или Страница1.Данные.П000900001000 = "210" Или Страница1.Данные.П000900001000 = "220" Или Страница1.Данные.П000900001000 = "230" Или Страница1.Данные.П000900001000 = "240" Или Страница1.Данные.П000900001000 = "291" Или Страница1.Данные.П000900001000 = "292" Или Страница1.Данные.П000900001000 = "293" Или Страница1.Данные.П000900001000 = "510" Или Страница1.Данные.П000900001000 = "520" Или Страница1.Данные.П000900001000 = "531" Или Страница1.Данные.П000900001000 = "532" Тогда
			Сумма2 = 0;
			НомерСтроки1 = 1;
			Пока Страница1.Данные.Свойство("П000900000004_" + НомерСтроки1) Цикл
				Если Страница1.Данные["П000900000001_" + НомерСтроки1] = "10010" Тогда
					Сумма2 = Сумма2 + Страница1.Данные["П000900000004_" + НомерСтроки1];
				КонецЕсли;
				НомерСтроки1 = НомерСтроки1 + 1;
			КонецЦикла;
			Сумма1 = Сумма1 + Сумма2;
		КонецЕсли;
	КонецЦикла;
	П1НалоговаяБаза = Сумма1;
	
	НомерСтраницы2 = 0;
	Для Каждого Страница2 Из Раздел2 Цикл
		НомерСтраницы2 = НомерСтраницы2 + 1;
		Если Страница2.Данные.П000200001000 = "111" Или Страница2.Данные.П000200001000 = "121" Или Страница2.Данные.П000200001000 = "130" Или Страница2.Данные.П000200001000 = "140" Или Страница2.Данные.П000200001000 = "150" Или Страница2.Данные.П000200001000 = "160" Или Страница2.Данные.П000200001000 = "170" Или Страница2.Данные.П000200001000 = "210" Или Страница2.Данные.П000200001000 = "220" Или Страница2.Данные.П000200001000 = "230" Или Страница2.Данные.П000200001000 = "240" Или Страница2.Данные.П000200001000 = "291" Или Страница2.Данные.П000200001000 = "292" Или Страница2.Данные.П000200001000 = "293" Или Страница2.Данные.П000200001000 = "510" Или Страница2.Данные.П000200001000 = "520" Или Страница2.Данные.П000200001000 = "531" Или Страница2.Данные.П000200001000 = "532" Тогда
			НомерСтроки2 = 1;
			Пока Страница2.Данные.Свойство("П000210001004_" + НомерСтроки2) Цикл
				Если Страница2.Данные["П000210001001_" + НомерСтроки2] = "10010" Тогда
					ОписаниеКС = "Сумма налоговой базы по графе 3 Подраздела 2.1 по кодам 10001-10020, 10022, 20003-20005 должна быть равна сумме строк графы 4 Приложения 1 по соответствующим строкам.";
					СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
					РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(СписокРасшифровкиФормулы, ОписаниеКС, , СчетчикФормулДляРасшифровок);
					
					ИмяПоказателяЛевойЧасти = "П000210001003_" + НомерСтроки2;
					НазваниеПоказателяЛевойЧасти = "Налоговая база";
					ЗначениеПоказателяЛевойЧасти = Страница2.Данные[ИмяПоказателяЛевойЧасти];
					ЗначениеПоказателяЛевойЧастиСтр = Формат(ЗначениеПоказателяЛевойЧасти, "ЧРД=.;ЧН=0");
					РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяПоказателяЛевойЧасти,
						НазваниеПоказателяЛевойЧасти, ЗначениеПоказателяЛевойЧастиСтр, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел2",
						Неопределено, НомерСтраницы2, СчетчикФормулДляРасшифровок);
						
					ЭтоОшибка = НЕ (ЗначениеПоказателяЛевойЧасти  = П1НалоговаяБаза);
					Расшифровка = "" + ЗначениеПоказателяЛевойЧастиСтр + " = " + П1НалоговаяБаза;
					
					Если ЭтоОшибка Тогда
						ОписаниеНарушения = "Арифметическая ошибка";
						Норма = "ст. 88 НК РФ";
						ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
					Иначе
						ОписаниеНарушения = "";
						Норма = "";
						ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
					КонецЕсли;
					
					ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, ЭтоОшибка, ОписаниеНарушения, Норма);
				КонецЕсли;
				НомерСтроки2 = НомерСтроки2 + 1;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	//--------------------------------------------------------------------------------------------------------------
	// Проверка 2.5
	//--------------------------------------------------------------------------------------------------------------
	Сумма1 = 0;
	Для Каждого Страница1 Из Приложение1 Цикл
		Если Страница1.Данные.П000900001000 = "111" Или Страница1.Данные.П000900001000 = "121" Или Страница1.Данные.П000900001000 = "130" Или Страница1.Данные.П000900001000 = "140" Или Страница1.Данные.П000900001000 = "150" Или Страница1.Данные.П000900001000 = "160" Или Страница1.Данные.П000900001000 = "170" Или Страница1.Данные.П000900001000 = "210" Или Страница1.Данные.П000900001000 = "220" Или Страница1.Данные.П000900001000 = "230" Или Страница1.Данные.П000900001000 = "240" Или Страница1.Данные.П000900001000 = "291" Или Страница1.Данные.П000900001000 = "292" Или Страница1.Данные.П000900001000 = "293" Или Страница1.Данные.П000900001000 = "510" Или Страница1.Данные.П000900001000 = "520" Или Страница1.Данные.П000900001000 = "531" Или Страница1.Данные.П000900001000 = "532" Тогда
			Сумма2 = 0;
			НомерСтроки1 = 1;
			Пока Страница1.Данные.Свойство("П000900000004_" + НомерСтроки1) Цикл
				Если Страница1.Данные["П000900000001_" + НомерСтроки1] = "10011" Тогда
					Сумма2 = Сумма2 + Страница1.Данные["П000900000004_" + НомерСтроки1];
				КонецЕсли;
				НомерСтроки1 = НомерСтроки1 + 1;
			КонецЦикла;
			Сумма1 = Сумма1 + Сумма2;
		КонецЕсли;
	КонецЦикла;
	П1НалоговаяБаза = Сумма1;
	
	НомерСтраницы2 = 0;
	Для Каждого Страница2 Из Раздел2 Цикл
		НомерСтраницы2 = НомерСтраницы2 + 1;
		Если Страница2.Данные.П000200001000 = "111" Или Страница2.Данные.П000200001000 = "121" Или Страница2.Данные.П000200001000 = "130" Или Страница2.Данные.П000200001000 = "140" Или Страница2.Данные.П000200001000 = "150" Или Страница2.Данные.П000200001000 = "160" Или Страница2.Данные.П000200001000 = "170" Или Страница2.Данные.П000200001000 = "210" Или Страница2.Данные.П000200001000 = "220" Или Страница2.Данные.П000200001000 = "230" Или Страница2.Данные.П000200001000 = "240" Или Страница2.Данные.П000200001000 = "291" Или Страница2.Данные.П000200001000 = "292" Или Страница2.Данные.П000200001000 = "293" Или Страница2.Данные.П000200001000 = "510" Или Страница2.Данные.П000200001000 = "520" Или Страница2.Данные.П000200001000 = "531" Или Страница2.Данные.П000200001000 = "532" Тогда
			НомерСтроки2 = 1;
			Пока Страница2.Данные.Свойство("П000210001004_" + НомерСтроки2) Цикл
				Если Страница2.Данные["П000210001001_" + НомерСтроки2] = "10011" Тогда
					ОписаниеКС = "Сумма налоговой базы по графе 3 Подраздела 2.1 по кодам 10001-10020, 10022, 20003-20005 должна быть равна сумме строк графы 4 Приложения 1 по соответствующим строкам.";
					СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
					РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(СписокРасшифровкиФормулы, ОписаниеКС, , СчетчикФормулДляРасшифровок);
					
					ИмяПоказателяЛевойЧасти = "П000210001003_" + НомерСтроки2;
					НазваниеПоказателяЛевойЧасти = "Налоговая база";
					ЗначениеПоказателяЛевойЧасти = Страница2.Данные[ИмяПоказателяЛевойЧасти];
					ЗначениеПоказателяЛевойЧастиСтр = Формат(ЗначениеПоказателяЛевойЧасти, "ЧРД=.;ЧН=0");
					РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяПоказателяЛевойЧасти,
						НазваниеПоказателяЛевойЧасти, ЗначениеПоказателяЛевойЧастиСтр, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел2",
						Неопределено, НомерСтраницы2, СчетчикФормулДляРасшифровок);
						
					ЭтоОшибка = НЕ (ЗначениеПоказателяЛевойЧасти  = П1НалоговаяБаза);
					Расшифровка = "" + ЗначениеПоказателяЛевойЧастиСтр + " = " + П1НалоговаяБаза;
					
					Если ЭтоОшибка Тогда
						ОписаниеНарушения = "Арифметическая ошибка";
						Норма = "ст. 88 НК РФ";
						ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
					Иначе
						ОписаниеНарушения = "";
						Норма = "";
						ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
					КонецЕсли;
					
					ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, ЭтоОшибка, ОписаниеНарушения, Норма);
				КонецЕсли;
				НомерСтроки2 = НомерСтроки2 + 1;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	//--------------------------------------------------------------------------------------------------------------
	// Проверка 2.5
	//--------------------------------------------------------------------------------------------------------------
	Сумма1 = 0;
	Для Каждого Страница1 Из Приложение1 Цикл
		Если Страница1.Данные.П000900001000 = "111" Или Страница1.Данные.П000900001000 = "121" Или Страница1.Данные.П000900001000 = "130" Или Страница1.Данные.П000900001000 = "140" Или Страница1.Данные.П000900001000 = "150" Или Страница1.Данные.П000900001000 = "160" Или Страница1.Данные.П000900001000 = "170" Или Страница1.Данные.П000900001000 = "210" Или Страница1.Данные.П000900001000 = "220" Или Страница1.Данные.П000900001000 = "230" Или Страница1.Данные.П000900001000 = "240" Или Страница1.Данные.П000900001000 = "291" Или Страница1.Данные.П000900001000 = "292" Или Страница1.Данные.П000900001000 = "293" Или Страница1.Данные.П000900001000 = "510" Или Страница1.Данные.П000900001000 = "520" Или Страница1.Данные.П000900001000 = "531" Или Страница1.Данные.П000900001000 = "532" Тогда
			Сумма2 = 0;
			НомерСтроки1 = 1;
			Пока Страница1.Данные.Свойство("П000900000004_" + НомерСтроки1) Цикл
				Если Страница1.Данные["П000900000001_" + НомерСтроки1] = "10012" Тогда
					Сумма2 = Сумма2 + Страница1.Данные["П000900000004_" + НомерСтроки1];
				КонецЕсли;
				НомерСтроки1 = НомерСтроки1 + 1;
			КонецЦикла;
			Сумма1 = Сумма1 + Сумма2;
		КонецЕсли;
	КонецЦикла;
	П1НалоговаяБаза = Сумма1;
	
	НомерСтраницы2 = 0;
	Для Каждого Страница2 Из Раздел2 Цикл
		НомерСтраницы2 = НомерСтраницы2 + 1;
		Если Страница2.Данные.П000200001000 = "111" Или Страница2.Данные.П000200001000 = "121" Или Страница2.Данные.П000200001000 = "130" Или Страница2.Данные.П000200001000 = "140" Или Страница2.Данные.П000200001000 = "150" Или Страница2.Данные.П000200001000 = "160" Или Страница2.Данные.П000200001000 = "170" Или Страница2.Данные.П000200001000 = "210" Или Страница2.Данные.П000200001000 = "220" Или Страница2.Данные.П000200001000 = "230" Или Страница2.Данные.П000200001000 = "240" Или Страница2.Данные.П000200001000 = "291" Или Страница2.Данные.П000200001000 = "292" Или Страница2.Данные.П000200001000 = "293" Или Страница2.Данные.П000200001000 = "510" Или Страница2.Данные.П000200001000 = "520" Или Страница2.Данные.П000200001000 = "531" Или Страница2.Данные.П000200001000 = "532" Тогда
			НомерСтроки2 = 1;
			Пока Страница2.Данные.Свойство("П000210001004_" + НомерСтроки2) Цикл
				Если Страница2.Данные["П000210001001_" + НомерСтроки2] = "10012" Тогда
					ОписаниеКС = "Сумма налоговой базы по графе 3 Подраздела 2.1 по кодам 10001-10020, 10022, 20003-20005 должна быть равна сумме строк графы 4 Приложения 1 по соответствующим строкам.";
					СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
					РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(СписокРасшифровкиФормулы, ОписаниеКС, , СчетчикФормулДляРасшифровок);
					
					ИмяПоказателяЛевойЧасти = "П000210001003_" + НомерСтроки2;
					НазваниеПоказателяЛевойЧасти = "Налоговая база";
					ЗначениеПоказателяЛевойЧасти = Страница2.Данные[ИмяПоказателяЛевойЧасти];
					ЗначениеПоказателяЛевойЧастиСтр = Формат(ЗначениеПоказателяЛевойЧасти, "ЧРД=.;ЧН=0");
					РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяПоказателяЛевойЧасти,
						НазваниеПоказателяЛевойЧасти, ЗначениеПоказателяЛевойЧастиСтр, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел2",
						Неопределено, НомерСтраницы2, СчетчикФормулДляРасшифровок);
						
					ЭтоОшибка = НЕ (ЗначениеПоказателяЛевойЧасти  = П1НалоговаяБаза);
					Расшифровка = "" + ЗначениеПоказателяЛевойЧастиСтр + " = " + П1НалоговаяБаза;
					
					Если ЭтоОшибка Тогда
						ОписаниеНарушения = "Арифметическая ошибка";
						Норма = "ст. 88 НК РФ";
						ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
					Иначе
						ОписаниеНарушения = "";
						Норма = "";
						ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
					КонецЕсли;
					
					ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, ЭтоОшибка, ОписаниеНарушения, Норма);
				КонецЕсли;
				НомерСтроки2 = НомерСтроки2 + 1;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	//--------------------------------------------------------------------------------------------------------------
	// Проверка 2.5
	//--------------------------------------------------------------------------------------------------------------
	Сумма1 = 0;
	Для Каждого Страница1 Из Приложение1 Цикл
		Если Страница1.Данные.П000900001000 = "111" Или Страница1.Данные.П000900001000 = "121" Или Страница1.Данные.П000900001000 = "130" Или Страница1.Данные.П000900001000 = "140" Или Страница1.Данные.П000900001000 = "150" Или Страница1.Данные.П000900001000 = "160" Или Страница1.Данные.П000900001000 = "170" Или Страница1.Данные.П000900001000 = "210" Или Страница1.Данные.П000900001000 = "220" Или Страница1.Данные.П000900001000 = "230" Или Страница1.Данные.П000900001000 = "240" Или Страница1.Данные.П000900001000 = "291" Или Страница1.Данные.П000900001000 = "292" Или Страница1.Данные.П000900001000 = "293" Или Страница1.Данные.П000900001000 = "510" Или Страница1.Данные.П000900001000 = "520" Или Страница1.Данные.П000900001000 = "531" Или Страница1.Данные.П000900001000 = "532" Тогда
			Сумма2 = 0;
			НомерСтроки1 = 1;
			Пока Страница1.Данные.Свойство("П000900000004_" + НомерСтроки1) Цикл
				Если Страница1.Данные["П000900000001_" + НомерСтроки1] = "10020" Тогда
					Сумма2 = Сумма2 + Страница1.Данные["П000900000004_" + НомерСтроки1];
				КонецЕсли;
				НомерСтроки1 = НомерСтроки1 + 1;
			КонецЦикла;
			Сумма1 = Сумма1 + Сумма2;
		КонецЕсли;
	КонецЦикла;
	П1НалоговаяБаза = Сумма1;
	
	НомерСтраницы2 = 0;
	Для Каждого Страница2 Из Раздел2 Цикл
		НомерСтраницы2 = НомерСтраницы2 + 1;
		Если Страница2.Данные.П000200001000 = "111" Или Страница2.Данные.П000200001000 = "121" Или Страница2.Данные.П000200001000 = "130" Или Страница2.Данные.П000200001000 = "140" Или Страница2.Данные.П000200001000 = "150" Или Страница2.Данные.П000200001000 = "160" Или Страница2.Данные.П000200001000 = "170" Или Страница2.Данные.П000200001000 = "210" Или Страница2.Данные.П000200001000 = "220" Или Страница2.Данные.П000200001000 = "230" Или Страница2.Данные.П000200001000 = "240" Или Страница2.Данные.П000200001000 = "291" Или Страница2.Данные.П000200001000 = "292" Или Страница2.Данные.П000200001000 = "293" Или Страница2.Данные.П000200001000 = "510" Или Страница2.Данные.П000200001000 = "520" Или Страница2.Данные.П000200001000 = "531" Или Страница2.Данные.П000200001000 = "532" Тогда
			НомерСтроки2 = 1;
			Пока Страница2.Данные.Свойство("П000210001004_" + НомерСтроки2) Цикл
				Если Страница2.Данные["П000210001001_" + НомерСтроки2] = "10020" Тогда
					ОписаниеКС = "Сумма налоговой базы по графе 3 Подраздела 2.1 по кодам 10001-10020, 10022, 20003-20005 должна быть равна сумме строк графы 4 Приложения 1 по соответствующим строкам.";
					СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
					РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(СписокРасшифровкиФормулы, ОписаниеКС, , СчетчикФормулДляРасшифровок);
					
					ИмяПоказателяЛевойЧасти = "П000210001003_" + НомерСтроки2;
					НазваниеПоказателяЛевойЧасти = "Налоговая база";
					ЗначениеПоказателяЛевойЧасти = Страница2.Данные[ИмяПоказателяЛевойЧасти];
					ЗначениеПоказателяЛевойЧастиСтр = Формат(ЗначениеПоказателяЛевойЧасти, "ЧРД=.;ЧН=0");
					РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяПоказателяЛевойЧасти,
						НазваниеПоказателяЛевойЧасти, ЗначениеПоказателяЛевойЧастиСтр, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел2",
						Неопределено, НомерСтраницы2, СчетчикФормулДляРасшифровок);
						
					ЭтоОшибка = НЕ (ЗначениеПоказателяЛевойЧасти  = П1НалоговаяБаза);
					Расшифровка = "" + ЗначениеПоказателяЛевойЧастиСтр + " = " + П1НалоговаяБаза;
					
					Если ЭтоОшибка Тогда
						ОписаниеНарушения = "Арифметическая ошибка";
						Норма = "ст. 88 НК РФ";
						ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
					Иначе
						ОписаниеНарушения = "";
						Норма = "";
						ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
					КонецЕсли;
					
					ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, ЭтоОшибка, ОписаниеНарушения, Норма);
				КонецЕсли;
				НомерСтроки2 = НомерСтроки2 + 1;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	//--------------------------------------------------------------------------------------------------------------
	// Проверка 2.5
	//--------------------------------------------------------------------------------------------------------------
	Сумма1 = 0;
	Для Каждого Страница1 Из Приложение1 Цикл
		Если Страница1.Данные.П000900001000 = "111" Или Страница1.Данные.П000900001000 = "121" Или Страница1.Данные.П000900001000 = "130" Или Страница1.Данные.П000900001000 = "140" Или Страница1.Данные.П000900001000 = "150" Или Страница1.Данные.П000900001000 = "160" Или Страница1.Данные.П000900001000 = "170" Или Страница1.Данные.П000900001000 = "210" Или Страница1.Данные.П000900001000 = "220" Или Страница1.Данные.П000900001000 = "230" Или Страница1.Данные.П000900001000 = "240" Или Страница1.Данные.П000900001000 = "291" Или Страница1.Данные.П000900001000 = "292" Или Страница1.Данные.П000900001000 = "293" Или Страница1.Данные.П000900001000 = "510" Или Страница1.Данные.П000900001000 = "520" Или Страница1.Данные.П000900001000 = "531" Или Страница1.Данные.П000900001000 = "532" Тогда
			Сумма2 = 0;
			НомерСтроки1 = 1;
			Пока Страница1.Данные.Свойство("П000900000004_" + НомерСтроки1) Цикл
				Если Страница1.Данные["П000900000001_" + НомерСтроки1] = "10022" Тогда
					Сумма2 = Сумма2 + Страница1.Данные["П000900000004_" + НомерСтроки1];
				КонецЕсли;
				НомерСтроки1 = НомерСтроки1 + 1;
			КонецЦикла;
			Сумма1 = Сумма1 + Сумма2;
		КонецЕсли;
	КонецЦикла;
	П1НалоговаяБаза = Сумма1;
	
	НомерСтраницы2 = 0;
	Для Каждого Страница2 Из Раздел2 Цикл
		НомерСтраницы2 = НомерСтраницы2 + 1;
		Если Страница2.Данные.П000200001000 = "111" Или Страница2.Данные.П000200001000 = "121" Или Страница2.Данные.П000200001000 = "130" Или Страница2.Данные.П000200001000 = "140" Или Страница2.Данные.П000200001000 = "150" Или Страница2.Данные.П000200001000 = "160" Или Страница2.Данные.П000200001000 = "170" Или Страница2.Данные.П000200001000 = "210" Или Страница2.Данные.П000200001000 = "220" Или Страница2.Данные.П000200001000 = "230" Или Страница2.Данные.П000200001000 = "240" Или Страница2.Данные.П000200001000 = "291" Или Страница2.Данные.П000200001000 = "292" Или Страница2.Данные.П000200001000 = "293" Или Страница2.Данные.П000200001000 = "510" Или Страница2.Данные.П000200001000 = "520" Или Страница2.Данные.П000200001000 = "531" Или Страница2.Данные.П000200001000 = "532" Тогда
			НомерСтроки2 = 1;
			Пока Страница2.Данные.Свойство("П000210001004_" + НомерСтроки2) Цикл
				Если Страница2.Данные["П000210001001_" + НомерСтроки2] = "10022" Тогда
					ОписаниеКС = "Сумма налоговой базы по графе 3 Подраздела 2.1 по кодам 10001-10020, 10022, 20003-20005 должна быть равна сумме строк графы 4 Приложения 1 по соответствующим строкам.";
					СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
					РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(СписокРасшифровкиФормулы, ОписаниеКС, , СчетчикФормулДляРасшифровок);
					
					ИмяПоказателяЛевойЧасти = "П000210001003_" + НомерСтроки2;
					НазваниеПоказателяЛевойЧасти = "Налоговая база";
					ЗначениеПоказателяЛевойЧасти = Страница2.Данные[ИмяПоказателяЛевойЧасти];
					ЗначениеПоказателяЛевойЧастиСтр = Формат(ЗначениеПоказателяЛевойЧасти, "ЧРД=.;ЧН=0");
					РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяПоказателяЛевойЧасти,
						НазваниеПоказателяЛевойЧасти, ЗначениеПоказателяЛевойЧастиСтр, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел2",
						Неопределено, НомерСтраницы2, СчетчикФормулДляРасшифровок);
						
					ЭтоОшибка = НЕ (ЗначениеПоказателяЛевойЧасти  = П1НалоговаяБаза);
					Расшифровка = "" + ЗначениеПоказателяЛевойЧастиСтр + " = " + П1НалоговаяБаза;
					
					Если ЭтоОшибка Тогда
						ОписаниеНарушения = "Арифметическая ошибка";
						Норма = "ст. 88 НК РФ";
						ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
					Иначе
						ОписаниеНарушения = "";
						Норма = "";
						ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
					КонецЕсли;
					
					ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, ЭтоОшибка, ОписаниеНарушения, Норма);
				КонецЕсли;
				НомерСтроки2 = НомерСтроки2 + 1;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	//--------------------------------------------------------------------------------------------------------------
	// Проверка 2.5
	//--------------------------------------------------------------------------------------------------------------
	Сумма1 = 0;
	Для Каждого Страница1 Из Приложение1 Цикл
		Если Страница1.Данные.П000900001000 = "111" Или Страница1.Данные.П000900001000 = "121" Или Страница1.Данные.П000900001000 = "130" Или Страница1.Данные.П000900001000 = "140" Или Страница1.Данные.П000900001000 = "150" Или Страница1.Данные.П000900001000 = "160" Или Страница1.Данные.П000900001000 = "170" Или Страница1.Данные.П000900001000 = "210" Или Страница1.Данные.П000900001000 = "220" Или Страница1.Данные.П000900001000 = "230" Или Страница1.Данные.П000900001000 = "240" Или Страница1.Данные.П000900001000 = "291" Или Страница1.Данные.П000900001000 = "292" Или Страница1.Данные.П000900001000 = "293" Или Страница1.Данные.П000900001000 = "510" Или Страница1.Данные.П000900001000 = "520" Или Страница1.Данные.П000900001000 = "531" Или Страница1.Данные.П000900001000 = "532" Тогда
			Сумма2 = 0;
			НомерСтроки1 = 1;
			Пока Страница1.Данные.Свойство("П000900000004_" + НомерСтроки1) Цикл
				Если Страница1.Данные["П000900000001_" + НомерСтроки1] = "20003" Тогда
					Сумма2 = Сумма2 + Страница1.Данные["П000900000004_" + НомерСтроки1];
				КонецЕсли;
				НомерСтроки1 = НомерСтроки1 + 1;
			КонецЦикла;
			Сумма1 = Сумма1 + Сумма2;
		КонецЕсли;
	КонецЦикла;
	П1НалоговаяБаза = Сумма1;
	
	НомерСтраницы2 = 0;
	Для Каждого Страница2 Из Раздел2 Цикл
		НомерСтраницы2 = НомерСтраницы2 + 1;
		Если Страница2.Данные.П000200001000 = "111" Или Страница2.Данные.П000200001000 = "121" Или Страница2.Данные.П000200001000 = "130" Или Страница2.Данные.П000200001000 = "140" Или Страница2.Данные.П000200001000 = "150" Или Страница2.Данные.П000200001000 = "160" Или Страница2.Данные.П000200001000 = "170" Или Страница2.Данные.П000200001000 = "210" Или Страница2.Данные.П000200001000 = "220" Или Страница2.Данные.П000200001000 = "230" Или Страница2.Данные.П000200001000 = "240" Или Страница2.Данные.П000200001000 = "291" Или Страница2.Данные.П000200001000 = "292" Или Страница2.Данные.П000200001000 = "293" Или Страница2.Данные.П000200001000 = "510" Или Страница2.Данные.П000200001000 = "520" Или Страница2.Данные.П000200001000 = "531" Или Страница2.Данные.П000200001000 = "532" Тогда
			НомерСтроки2 = 1;
			Пока Страница2.Данные.Свойство("П000210001004_" + НомерСтроки2) Цикл
				Если Страница2.Данные["П000210001001_" + НомерСтроки2] = "20003" Тогда
					ОписаниеКС = "Сумма налоговой базы по графе 3 Подраздела 2.1 по кодам 10001-10020, 10022, 20003-20005 должна быть равна сумме строк графы 4 Приложения 1 по соответствующим строкам.";
					СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
					РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(СписокРасшифровкиФормулы, ОписаниеКС, , СчетчикФормулДляРасшифровок);
					
					ИмяПоказателяЛевойЧасти = "П000210001003_" + НомерСтроки2;
					НазваниеПоказателяЛевойЧасти = "Налоговая база";
					ЗначениеПоказателяЛевойЧасти = Страница2.Данные[ИмяПоказателяЛевойЧасти];
					ЗначениеПоказателяЛевойЧастиСтр = Формат(ЗначениеПоказателяЛевойЧасти, "ЧРД=.;ЧН=0");
					РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяПоказателяЛевойЧасти,
						НазваниеПоказателяЛевойЧасти, ЗначениеПоказателяЛевойЧастиСтр, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел2",
						Неопределено, НомерСтраницы2, СчетчикФормулДляРасшифровок);
						
					ЭтоОшибка = НЕ (ЗначениеПоказателяЛевойЧасти  = П1НалоговаяБаза);
					Расшифровка = "" + ЗначениеПоказателяЛевойЧастиСтр + " = " + П1НалоговаяБаза;
					
					Если ЭтоОшибка Тогда
						ОписаниеНарушения = "Арифметическая ошибка";
						Норма = "ст. 88 НК РФ";
						ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
					Иначе
						ОписаниеНарушения = "";
						Норма = "";
						ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
					КонецЕсли;
					
					ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, ЭтоОшибка, ОписаниеНарушения, Норма);
				КонецЕсли;
				НомерСтроки2 = НомерСтроки2 + 1;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	//--------------------------------------------------------------------------------------------------------------
	// Проверка 2.5
	//--------------------------------------------------------------------------------------------------------------
	Сумма1 = 0;
	Для Каждого Страница1 Из Приложение1 Цикл
		Если Страница1.Данные.П000900001000 = "111" Или Страница1.Данные.П000900001000 = "121" Или Страница1.Данные.П000900001000 = "130" Или Страница1.Данные.П000900001000 = "140" Или Страница1.Данные.П000900001000 = "150" Или Страница1.Данные.П000900001000 = "160" Или Страница1.Данные.П000900001000 = "170" Или Страница1.Данные.П000900001000 = "210" Или Страница1.Данные.П000900001000 = "220" Или Страница1.Данные.П000900001000 = "230" Или Страница1.Данные.П000900001000 = "240" Или Страница1.Данные.П000900001000 = "291" Или Страница1.Данные.П000900001000 = "292" Или Страница1.Данные.П000900001000 = "293" Или Страница1.Данные.П000900001000 = "510" Или Страница1.Данные.П000900001000 = "520" Или Страница1.Данные.П000900001000 = "531" Или Страница1.Данные.П000900001000 = "532" Тогда
			Сумма2 = 0;
			НомерСтроки1 = 1;
			Пока Страница1.Данные.Свойство("П000900000004_" + НомерСтроки1) Цикл
				Если Страница1.Данные["П000900000001_" + НомерСтроки1] = "20004" Тогда
					Сумма2 = Сумма2 + Страница1.Данные["П000900000004_" + НомерСтроки1];
				КонецЕсли;
				НомерСтроки1 = НомерСтроки1 + 1;
			КонецЦикла;
			Сумма1 = Сумма1 + Сумма2;
		КонецЕсли;
	КонецЦикла;
	П1НалоговаяБаза = Сумма1;
	
	НомерСтраницы2 = 0;
	Для Каждого Страница2 Из Раздел2 Цикл
		НомерСтраницы2 = НомерСтраницы2 + 1;
		Если Страница2.Данные.П000200001000 = "111" Или Страница2.Данные.П000200001000 = "121" Или Страница2.Данные.П000200001000 = "130" Или Страница2.Данные.П000200001000 = "140" Или Страница2.Данные.П000200001000 = "150" Или Страница2.Данные.П000200001000 = "160" Или Страница2.Данные.П000200001000 = "170" Или Страница2.Данные.П000200001000 = "210" Или Страница2.Данные.П000200001000 = "220" Или Страница2.Данные.П000200001000 = "230" Или Страница2.Данные.П000200001000 = "240" Или Страница2.Данные.П000200001000 = "291" Или Страница2.Данные.П000200001000 = "292" Или Страница2.Данные.П000200001000 = "293" Или Страница2.Данные.П000200001000 = "510" Или Страница2.Данные.П000200001000 = "520" Или Страница2.Данные.П000200001000 = "531" Или Страница2.Данные.П000200001000 = "532" Тогда
			НомерСтроки2 = 1;
			Пока Страница2.Данные.Свойство("П000210001004_" + НомерСтроки2) Цикл
				Если Страница2.Данные["П000210001001_" + НомерСтроки2] = "20004" Тогда
					ОписаниеКС = "Сумма налоговой базы по графе 3 Подраздела 2.1 по кодам 10001-10020, 10022, 20003-20005 должна быть равна сумме строк графы 4 Приложения 1 по соответствующим строкам.";
					СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
					РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(СписокРасшифровкиФормулы, ОписаниеКС, , СчетчикФормулДляРасшифровок);
					
					ИмяПоказателяЛевойЧасти = "П000210001003_" + НомерСтроки2;
					НазваниеПоказателяЛевойЧасти = "Налоговая база";
					ЗначениеПоказателяЛевойЧасти = Страница2.Данные[ИмяПоказателяЛевойЧасти];
					ЗначениеПоказателяЛевойЧастиСтр = Формат(ЗначениеПоказателяЛевойЧасти, "ЧРД=.;ЧН=0");
					РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяПоказателяЛевойЧасти,
						НазваниеПоказателяЛевойЧасти, ЗначениеПоказателяЛевойЧастиСтр, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел2",
						Неопределено, НомерСтраницы2, СчетчикФормулДляРасшифровок);
						
					ЭтоОшибка = НЕ (ЗначениеПоказателяЛевойЧасти  = П1НалоговаяБаза);
					Расшифровка = "" + ЗначениеПоказателяЛевойЧастиСтр + " = " + П1НалоговаяБаза;
					
					Если ЭтоОшибка Тогда
						ОписаниеНарушения = "Арифметическая ошибка";
						Норма = "ст. 88 НК РФ";
						ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
					Иначе
						ОписаниеНарушения = "";
						Норма = "";
						ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
					КонецЕсли;
					
					ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, ЭтоОшибка, ОписаниеНарушения, Норма);
				КонецЕсли;
				НомерСтроки2 = НомерСтроки2 + 1;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	//--------------------------------------------------------------------------------------------------------------
	// Проверка 2.5
	//--------------------------------------------------------------------------------------------------------------
	Сумма1 = 0;
	Для Каждого Страница1 Из Приложение1 Цикл
		Если Страница1.Данные.П000900001000 = "111" Или Страница1.Данные.П000900001000 = "121" Или Страница1.Данные.П000900001000 = "130" Или Страница1.Данные.П000900001000 = "140" Или Страница1.Данные.П000900001000 = "150" Или Страница1.Данные.П000900001000 = "160" Или Страница1.Данные.П000900001000 = "170" Или Страница1.Данные.П000900001000 = "210" Или Страница1.Данные.П000900001000 = "220" Или Страница1.Данные.П000900001000 = "230" Или Страница1.Данные.П000900001000 = "240" Или Страница1.Данные.П000900001000 = "291" Или Страница1.Данные.П000900001000 = "292" Или Страница1.Данные.П000900001000 = "293" Или Страница1.Данные.П000900001000 = "510" Или Страница1.Данные.П000900001000 = "520" Или Страница1.Данные.П000900001000 = "531" Или Страница1.Данные.П000900001000 = "532" Тогда
			Сумма2 = 0;
			НомерСтроки1 = 1;
			Пока Страница1.Данные.Свойство("П000900000004_" + НомерСтроки1) Цикл
				Если Страница1.Данные["П000900000001_" + НомерСтроки1] = "20005" Тогда
					Сумма2 = Сумма2 + Страница1.Данные["П000900000004_" + НомерСтроки1];
				КонецЕсли;
				НомерСтроки1 = НомерСтроки1 + 1;
			КонецЦикла;
			Сумма1 = Сумма1 + Сумма2;
		КонецЕсли;
	КонецЦикла;
	П1НалоговаяБаза = Сумма1;
	
	НомерСтраницы2 = 0;
	Для Каждого Страница2 Из Раздел2 Цикл
		НомерСтраницы2 = НомерСтраницы2 + 1;
		Если Страница2.Данные.П000200001000 = "111" Или Страница2.Данные.П000200001000 = "121" Или Страница2.Данные.П000200001000 = "130" Или Страница2.Данные.П000200001000 = "140" Или Страница2.Данные.П000200001000 = "150" Или Страница2.Данные.П000200001000 = "160" Или Страница2.Данные.П000200001000 = "170" Или Страница2.Данные.П000200001000 = "210" Или Страница2.Данные.П000200001000 = "220" Или Страница2.Данные.П000200001000 = "230" Или Страница2.Данные.П000200001000 = "240" Или Страница2.Данные.П000200001000 = "291" Или Страница2.Данные.П000200001000 = "292" Или Страница2.Данные.П000200001000 = "293" Или Страница2.Данные.П000200001000 = "510" Или Страница2.Данные.П000200001000 = "520" Или Страница2.Данные.П000200001000 = "531" Или Страница2.Данные.П000200001000 = "532" Тогда
			НомерСтроки2 = 1;
			Пока Страница2.Данные.Свойство("П000210001004_" + НомерСтроки2) Цикл
				Если Страница2.Данные["П000210001001_" + НомерСтроки2] = "20005" Тогда
					ОписаниеКС = "Сумма налоговой базы по графе 3 Подраздела 2.1 по кодам 10001-10020, 10022, 20003-20005 должна быть равна сумме строк графы 4 Приложения 1 по соответствующим строкам.";
					СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
					РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(СписокРасшифровкиФормулы, ОписаниеКС, , СчетчикФормулДляРасшифровок);
					
					ИмяПоказателяЛевойЧасти = "П000210001003_" + НомерСтроки2;
					НазваниеПоказателяЛевойЧасти = "Налоговая база";
					ЗначениеПоказателяЛевойЧасти = Страница2.Данные[ИмяПоказателяЛевойЧасти];
					ЗначениеПоказателяЛевойЧастиСтр = Формат(ЗначениеПоказателяЛевойЧасти, "ЧРД=.;ЧН=0");
					РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяПоказателяЛевойЧасти,
						НазваниеПоказателяЛевойЧасти, ЗначениеПоказателяЛевойЧастиСтр, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел2",
						Неопределено, НомерСтраницы2, СчетчикФормулДляРасшифровок);
						
					ЭтоОшибка = НЕ (ЗначениеПоказателяЛевойЧасти  = П1НалоговаяБаза);
					Расшифровка = "" + ЗначениеПоказателяЛевойЧастиСтр + " = " + П1НалоговаяБаза;
					
					Если ЭтоОшибка Тогда
						ОписаниеНарушения = "Арифметическая ошибка";
						Норма = "ст. 88 НК РФ";
						ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
					Иначе
						ОписаниеНарушения = "";
						Норма = "";
						ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
					КонецЕсли;
					
					ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, ЭтоОшибка, ОписаниеНарушения, Норма);
				КонецЕсли;
				НомерСтроки2 = НомерСтроки2 + 1;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	//--------------------------------------------------------------------------------------------------------------
	// Проверка 2.6
	//--------------------------------------------------------------------------------------------------------------
	
	Для Каждого Страница1 Из Раздел2 Цикл
		НомерСтраницы1 = Строка(Раздел2.Индекс(Страница1) + 1);
		Сумма1 = 0;
		НомерСтроки1 = 1;
		Пока Страница1.Данные.Свойство("П000210001004_" + НомерСтроки1) Цикл
			Сумма1 = Сумма1 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Страница1.Данные["П000210001004_" + НомерСтроки1]);
			НомерСтроки1 = НомерСтроки1 + 1;
		КонецЦикла;
		Если Сумма1 - ?(Страница1.Данные.П000220001001 <> "30010" И Страница1.Данные.П000220001001 <> "", РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Страница1.Данные.П000220001002), 0)
					- ?(Страница1.Данные.П000220002001 <> "30010" И Страница1.Данные.П000220002001 <> "", РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Страница1.Данные.П000220002002), 0)
					- ?(Страница1.Данные.П000220003001 <> "30010" И Страница1.Данные.П000220003001 <> "", РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Страница1.Данные.П000220003002), 0)
					- ?(Страница1.Данные.П000220004001 <> "30010" И Страница1.Данные.П000220004001 <> "", РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Страница1.Данные.П000220004002), 0)
					- ?(Страница1.Данные.П000220005001 <> "30010" И Страница1.Данные.П000220005001 <> "", РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Страница1.Данные.П000220005002), 0)
					- ?(Страница1.Данные.П000220006001 <> "30010" И Страница1.Данные.П000220006001 <> "", РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Страница1.Данные.П000220006002), 0)
					- ?(Страница1.Данные.П000220007001 <> "30010" И Страница1.Данные.П000220007001 <> "", РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Страница1.Данные.П000220007002), 0)
					- ?(Страница1.Данные.П000220008001 <> "30010" И Страница1.Данные.П000220008001 <> "", РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Страница1.Данные.П000220008002), 0)
					- ?(Страница1.Данные.П000220009001 <> "30010" И Страница1.Данные.П000220009001 <> "", РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Страница1.Данные.П000220009002), 0) >= 0 Тогда
			ОписаниеКС = "Сумма акциза, подлежащая в бюджет в графе 2 Подраздела 2.3 по коду ""40001"" должна быть равна сумме значений по строкам графы 4 Подраздела 2.1за минусом суммы значений по строкам графы 2 Подраздела 2.2 (за исключением строки по коду ""30010"").";
			СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
			РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(СписокРасшифровкиФормулы, ОписаниеКС, , СчетчикФормулДляРасшифровок);
			
			Сумма2 = 0;
			НомерСтроки2 = 1;
			Пока Страница1.Данные.Свойство("П000210001004_" + НомерСтроки2) Цикл
				РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000210001004_" + НомерСтроки2,
					"Сумма акциза (руб.)", РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Страница1.Данные["П000210001004_" + НомерСтроки2]), "", 
					СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел2", Неопределено, НомерСтраницы1, СчетчикФормулДляРасшифровок);
				Сумма2 = Сумма2 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Страница1.Данные["П000210001004_" + НомерСтроки2]);
				НомерСтроки2 = НомерСтроки2 + 1;
			КонецЦикла;
			
			РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000230001000",
				"Сумма вычета (руб.)", РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Страница1.Данные.П000230001000), "",
				СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел2", Неопределено, НомерСтраницы1, СчетчикФормулДляРасшифровок);
			
			ЭтоОшибка = Не (РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Страница1.Данные.П000230001000) = Сумма2
				- ?(Страница1.Данные.П000220001001 <> "30010" И Страница1.Данные.П000220001001 <> "", РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Страница1.Данные.П000220001002), 0)
				- ?(Страница1.Данные.П000220002001 <> "30010" И Страница1.Данные.П000220002001 <> "", РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Страница1.Данные.П000220002002), 0)
				- ?(Страница1.Данные.П000220003001 <> "30010" И Страница1.Данные.П000220003001 <> "", РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Страница1.Данные.П000220003002), 0)
				- ?(Страница1.Данные.П000220004001 <> "30010" И Страница1.Данные.П000220004001 <> "", РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Страница1.Данные.П000220004002), 0)
				- ?(Страница1.Данные.П000220005001 <> "30010" И Страница1.Данные.П000220005001 <> "", РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Страница1.Данные.П000220005002), 0)
				- ?(Страница1.Данные.П000220006001 <> "30010" И Страница1.Данные.П000220006001 <> "", РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Страница1.Данные.П000220006002), 0)
				- ?(Страница1.Данные.П000220007001 <> "30010" И Страница1.Данные.П000220007001 <> "", РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Страница1.Данные.П000220007002), 0)
				- ?(Страница1.Данные.П000220008001 <> "30010" И Страница1.Данные.П000220008001 <> "", РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Страница1.Данные.П000220008002), 0)
				- ?(Страница1.Данные.П000220009001 <> "30010" И Страница1.Данные.П000220009001 <> "", РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Страница1.Данные.П000220009002), 0));
			
			Сумма3 = 0;
			НомерСтроки3 = 1;
			Пока Страница1.Данные.Свойство("П000210001004_" + НомерСтроки3) Цикл
				Сумма3 = Сумма3 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Страница1.Данные["П000210001004_" + НомерСтроки3]);
				НомерСтроки3 = НомерСтроки3 + 1;
			КонецЦикла;
			Сумма4 = 0;
			НомерСтроки4 = 1;
			Пока Страница1.Данные.Свойство("П000210001004_" + НомерСтроки4) Цикл
				Сумма4 = Сумма4 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Страница1.Данные["П000210001004_" + НомерСтроки4]);
				НомерСтроки4 = НомерСтроки4 + 1;
			КонецЦикла;
			Расшифровка = "" + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Страница1.Данные.П000230001000) + " = " + Сумма3 + " - " + (
				?(Страница1.Данные.П000220001001 <> "30010" И Страница1.Данные.П000220001001 <> "", РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Страница1.Данные.П000220001002), 0) + 
				?(Страница1.Данные.П000220002001 <> "30010" И Страница1.Данные.П000220002001 <> "", РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Страница1.Данные.П000220002002), 0) + 
				?(Страница1.Данные.П000220003001 <> "30010" И Страница1.Данные.П000220003001 <> "", РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Страница1.Данные.П000220003002), 0) + 
				?(Страница1.Данные.П000220004001 <> "30010" И Страница1.Данные.П000220004001 <> "", РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Страница1.Данные.П000220004002), 0) + 
				?(Страница1.Данные.П000220005001 <> "30010" И Страница1.Данные.П000220005001 <> "", РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Страница1.Данные.П000220005002), 0) + 
				?(Страница1.Данные.П000220006001 <> "30010" И Страница1.Данные.П000220006001 <> "", РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Страница1.Данные.П000220006002), 0) + 
				?(Страница1.Данные.П000220007001 <> "30010" И Страница1.Данные.П000220007001 <> "", РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Страница1.Данные.П000220007002), 0) + 
				?(Страница1.Данные.П000220008001 <> "30010" И Страница1.Данные.П000220008001 <> "", РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Страница1.Данные.П000220008002), 0) + 
				?(Страница1.Данные.П000220009001 <> "30010" И Страница1.Данные.П000220009001 <> "", РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Страница1.Данные.П000220009002), 0)) + " Итог [" + (Сумма4 - 
				?(Страница1.Данные.П000220001001 <> "30010" И Страница1.Данные.П000220001001 <> "", РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Страница1.Данные.П000220001002), 0) - 
				?(Страница1.Данные.П000220002001 <> "30010" И Страница1.Данные.П000220002001 <> "", РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Страница1.Данные.П000220002002), 0) - 
				?(Страница1.Данные.П000220003001 <> "30010" И Страница1.Данные.П000220003001 <> "", РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Страница1.Данные.П000220003002), 0) - 
				?(Страница1.Данные.П000220004001 <> "30010" И Страница1.Данные.П000220004001 <> "", РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Страница1.Данные.П000220004002), 0) - 
				?(Страница1.Данные.П000220005001 <> "30010" И Страница1.Данные.П000220005001 <> "", РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Страница1.Данные.П000220005002), 0) - 
				?(Страница1.Данные.П000220006001 <> "30010" И Страница1.Данные.П000220006001 <> "", РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Страница1.Данные.П000220006002), 0) - 
				?(Страница1.Данные.П000220007001 <> "30010" И Страница1.Данные.П000220007001 <> "", РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Страница1.Данные.П000220007002), 0) - 
				?(Страница1.Данные.П000220008001 <> "30010" И Страница1.Данные.П000220008001 <> "", РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Страница1.Данные.П000220008002), 0) - 
				?(Страница1.Данные.П000220009001 <> "30010" И Страница1.Данные.П000220009001 <> "", РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Страница1.Данные.П000220009002), 0)) + "]";
				
			Если ЭтоОшибка Тогда
				ОписаниеНарушения = "Арифметическая ошибка";
				Норма = "ст. 88 НК РФ";
				ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
			Иначе
				ОписаниеНарушения = "";
				Норма = "";
				ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
			КонецЕсли;
			
			ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, ЭтоОшибка, ОписаниеНарушения, Норма);
		КонецЕсли;
	КонецЦикла;
	
	//--------------------------------------------------------------------------------------------------------------
	// Проверка 2.7
	//--------------------------------------------------------------------------------------------------------------
	
	Для Каждого Страница1 Из Раздел2 Цикл
		НомерСтраницы1 = Строка(Раздел2.Индекс(Страница1) + 1);
		Сумма1 = 0;
		НомерСтроки1 = 1;
		Пока Страница1.Данные.Свойство("П000210001004_" + НомерСтроки1) Цикл
			Сумма1 = Сумма1 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Страница1.Данные["П000210001004_" + НомерСтроки1]);
			НомерСтроки1 = НомерСтроки1 + 1;
		КонецЦикла;
		Если ?(Страница1.Данные.П000220001001 <> "30010" И Страница1.Данные.П000220001001 <> "", РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Страница1.Данные.П000220001002), 0) + 
			 ?(Страница1.Данные.П000220002001 <> "30010" И Страница1.Данные.П000220002001 <> "", РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Страница1.Данные.П000220002002), 0) +
			 ?(Страница1.Данные.П000220003001 <> "30010" И Страница1.Данные.П000220003001 <> "", РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Страница1.Данные.П000220003002), 0) +
			 ?(Страница1.Данные.П000220004001 <> "30010" И Страница1.Данные.П000220004001 <> "", РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Страница1.Данные.П000220004002), 0) + 
			 ?(Страница1.Данные.П000220005001 <> "30010" И Страница1.Данные.П000220005001 <> "", РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Страница1.Данные.П000220005002), 0) +
			 ?(Страница1.Данные.П000220006001 <> "30010" И Страница1.Данные.П000220006001 <> "", РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Страница1.Данные.П000220006002), 0) +
			 ?(Страница1.Данные.П000220007001 <> "30010" И Страница1.Данные.П000220007001 <> "", РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Страница1.Данные.П000220007002), 0) +
			 ?(Страница1.Данные.П000220008001 <> "30010" И Страница1.Данные.П000220008001 <> "", РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Страница1.Данные.П000220008002), 0) +
			 ?(Страница1.Данные.П000220009001 <> "30010" И Страница1.Данные.П000220009001 <> "", РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Страница1.Данные.П000220009002), 0) - Сумма1 >= 0 Тогда
			ОписаниеКС = "Сумма акциза, подлежащая в бюджет в графе 2 Подраздела 2.3 по коду ""40002"" должна быть равна отрицательной разнице значений по строкам графы 4 Подраздела 2.1за минусом суммы значений по строкам графы 2 Подраздела 2.2 (за исключением строки по коду ""30010"").";
			СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
			РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(СписокРасшифровкиФормулы, ОписаниеКС, , СчетчикФормулДляРасшифровок);
			
			Сумма2 = 0;
			НомерСтроки2 = 1;
			Пока Страница1.Данные.Свойство("П000210001004_" + НомерСтроки2) Цикл
				РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000210001004_" + НомерСтроки2,
					"Сумма акциза (руб.)", РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Страница1.Данные["П000210001004_" + НомерСтроки2]), "",
					СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел2", Неопределено, НомерСтраницы1, СчетчикФормулДляРасшифровок);
				Сумма2 = Сумма2 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Страница1.Данные["П000210001004_" + НомерСтроки2]);
				НомерСтроки2 = НомерСтроки2 + 1;
			КонецЦикла;
			ЭтоОшибка = Не (РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Страница1.Данные.П000230002000) = 
				?(Страница1.Данные.П000220001001 <> "30010" И Страница1.Данные.П000220001001 <> "", РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Страница1.Данные.П000220001002), 0) + 
				?(Страница1.Данные.П000220002001 <> "30010" И Страница1.Данные.П000220002001 <> "", РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Страница1.Данные.П000220002002), 0) + 
				?(Страница1.Данные.П000220003001 <> "30010" И Страница1.Данные.П000220003001 <> "", РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Страница1.Данные.П000220003002), 0) +
				?(Страница1.Данные.П000220004001 <> "30010" И Страница1.Данные.П000220004001 <> "", РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Страница1.Данные.П000220004002), 0) +
				?(Страница1.Данные.П000220005001 <> "30010" И Страница1.Данные.П000220005001 <> "", РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Страница1.Данные.П000220005002), 0) + 
				?(Страница1.Данные.П000220006001 <> "30010" И Страница1.Данные.П000220006001 <> "", РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Страница1.Данные.П000220006002), 0) + 
				?(Страница1.Данные.П000220007001 <> "30010" И Страница1.Данные.П000220007001 <> "", РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Страница1.Данные.П000220007002), 0) + 
				?(Страница1.Данные.П000220008001 <> "30010" И Страница1.Данные.П000220008001 <> "", РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Страница1.Данные.П000220008002), 0) + 
				?(Страница1.Данные.П000220009001 <> "30010" И Страница1.Данные.П000220009001 <> "", РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Страница1.Данные.П000220009002), 0) - Сумма2);
				
			РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000230002000",
				"Сумма вычета (руб.)", РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Страница1.Данные["П000230002000"]), "",
				СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел2", Неопределено, НомерСтраницы1, СчетчикФормулДляРасшифровок);
				
			Сумма3 = 0;
			НомерСтроки3 = 1;
			Пока Страница1.Данные.Свойство("П000210001004_" + НомерСтроки3) Цикл
				Сумма3 = Сумма3 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Страница1.Данные["П000210001004_" + НомерСтроки3]);
				НомерСтроки3 = НомерСтроки3 + 1;
			КонецЦикла;
			Сумма4 = 0;
			НомерСтроки4 = 1;
			Пока Страница1.Данные.Свойство("П000210001004_" + НомерСтроки4) Цикл
				Сумма4 = Сумма4 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Страница1.Данные["П000210001004_" + НомерСтроки4]);
				НомерСтроки4 = НомерСтроки4 + 1;
			КонецЦикла;
			Расшифровка = "" + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Страница1.Данные.П000230002000) + " = " + 
				(?(Страница1.Данные.П000220001001 <> "30010" И Страница1.Данные.П000220001001 <> "", РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Страница1.Данные.П000220001002), 0) + 
				 ?(Страница1.Данные.П000220002001 <> "30010" И Страница1.Данные.П000220002001 <> "", РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Страница1.Данные.П000220002002), 0) + 
				 ?(Страница1.Данные.П000220003001 <> "30010" И Страница1.Данные.П000220003001 <> "", РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Страница1.Данные.П000220003002), 0) + 
				 ?(Страница1.Данные.П000220004001 <> "30010" И Страница1.Данные.П000220004001 <> "", РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Страница1.Данные.П000220004002), 0) + 
				 ?(Страница1.Данные.П000220005001 <> "30010" И Страница1.Данные.П000220005001 <> "", РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Страница1.Данные.П000220005002), 0) + 
				 ?(Страница1.Данные.П000220006001 <> "30010" И Страница1.Данные.П000220006001 <> "", РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Страница1.Данные.П000220006002), 0) + 
				 ?(Страница1.Данные.П000220007001 <> "30010" И Страница1.Данные.П000220007001 <> "", РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Страница1.Данные.П000220007002), 0) + 
				 ?(Страница1.Данные.П000220008001 <> "30010" И Страница1.Данные.П000220008001 <> "", РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Страница1.Данные.П000220008002), 0) + 
				 ?(Страница1.Данные.П000220009001 <> "30010" И Страница1.Данные.П000220009001 <> "", РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Страница1.Данные.П000220009002), 0)) + " - " + Сумма3 + " Итог [" + 
				 (?(Страница1.Данные.П000220001001 <> "30010" И Страница1.Данные.П000220001001 <> "", РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Страница1.Данные.П000220001002), 0) +
				 ?(Страница1.Данные.П000220002001 <> "30010" И Страница1.Данные.П000220002001 <> "", РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Страница1.Данные.П000220002002), 0) + 
				 ?(Страница1.Данные.П000220003001 <> "30010" И Страница1.Данные.П000220003001 <> "", РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Страница1.Данные.П000220003002), 0) + 
				 ?(Страница1.Данные.П000220004001 <> "30010" И Страница1.Данные.П000220004001 <> "", РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Страница1.Данные.П000220004002), 0) + 
				 ?(Страница1.Данные.П000220005001 <> "30010" И Страница1.Данные.П000220005001 <> "", РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Страница1.Данные.П000220005002), 0) + 
				 ?(Страница1.Данные.П000220006001 <> "30010" И Страница1.Данные.П000220006001 <> "", РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Страница1.Данные.П000220006002), 0) + 
				 ?(Страница1.Данные.П000220007001 <> "30010" И Страница1.Данные.П000220007001 <> "", РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Страница1.Данные.П000220007002), 0) +
				 ?(Страница1.Данные.П000220008001 <> "30010" И Страница1.Данные.П000220008001 <> "", РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Страница1.Данные.П000220008002), 0) + 
				 ?(Страница1.Данные.П000220009001 <> "30010" И Страница1.Данные.П000220009001 <> "", РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Страница1.Данные.П000220009002), 0) - Сумма4) + "]";
			
			Если ЭтоОшибка Тогда
				ОписаниеНарушения = "Арифметическая ошибка";
				Норма = "ст. 88 НК РФ";
				ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
			Иначе
				ОписаниеНарушения = "";
				Норма = "";
				ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
			КонецЕсли;
			
			ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, ЭтоОшибка, ОписаниеНарушения, Норма);
		КонецЕсли;
	КонецЦикла;
	
	Если ОбщееЧислоОшибок + ОбщееЧислоБезОшибок > 0 Тогда
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок",    ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок",              СтруктураОшибок);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаРаздел24 (СтруктураРезультата)
	
	ОбщееЧислоОшибок = СтруктураРезультата.КоличествоНайденныхОшибок;
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок;
	
	СтруктураОшибок = СтруктураРезультата.СтруктураОшибок;
	
	Титульный = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаТитульный;
	Раздел1 = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить().ДанныеМногостраничныхРазделов.Раздел1;
	Раздел12 = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить().ДанныеМногостраничныхРазделов.Раздел12;
	Раздел13 = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить().ДанныеМногостраничныхРазделов.Раздел13;
	Раздел2 = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить().ДанныеМногостраничныхРазделов.Раздел2;
	Раздел24 = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить().ДанныеМногостраничныхРазделов.Раздел24;
	Раздел25 = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить().ДанныеМногостраничныхРазделов.Раздел25;
	Приложение1 = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить().ДанныеМногостраничныхРазделов.Приложение1;
	Приложение2 = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить().ДанныеМногостраничныхРазделов.Приложение2;
	
	ТекстФормулы = "Раздел 2.4";
	
	//--------------------------------------------------------------------------------------------------------------
	// Проверка 2.9
	//--------------------------------------------------------------------------------------------------------------
	
	Для Каждого Страница1 Из Раздел24 Цикл
		
		Если Раздел24.Индекс(Страница1) > Раздел2.Количество() - 1 Тогда
			Продолжить;
		КонецЕсли;
		
		НомерСтраницы1 = Строка(Раздел24.Индекс(Страница1) + 1);
		Если Раздел2[Раздел24.Индекс(Страница1)].Данные.П000200001000 = "110"
		 Или Раздел2[Раздел24.Индекс(Страница1)].Данные.П000200001000 = "111"
		 Или Раздел2[Раздел24.Индекс(Страница1)].Данные.П000200001000 = "120"
		 Или Раздел2[Раздел24.Индекс(Страница1)].Данные.П000200001000 = "121"
		 Или Раздел2[Раздел24.Индекс(Страница1)].Данные.П000200001000 = "130"
		 Или Раздел2[Раздел24.Индекс(Страница1)].Данные.П000200001000 = "140"
		 Или Раздел2[Раздел24.Индекс(Страница1)].Данные.П000200001000 = "150"
		 Или Раздел2[Раздел24.Индекс(Страница1)].Данные.П000200001000 = "160"
		 Или Раздел2[Раздел24.Индекс(Страница1)].Данные.П000200001000 = "170"
		 Или Раздел2[Раздел24.Индекс(Страница1)].Данные.П000200001000 = "210"
		 Или Раздел2[Раздел24.Индекс(Страница1)].Данные.П000200001000 = "220"
		 Или Раздел2[Раздел24.Индекс(Страница1)].Данные.П000200001000 = "230"
		 Или Раздел2[Раздел24.Индекс(Страница1)].Данные.П000200001000 = "240"
		 Или Раздел2[Раздел24.Индекс(Страница1)].Данные.П000200001000 = "291"
		 Или Раздел2[Раздел24.Индекс(Страница1)].Данные.П000200001000 = "292"
		 Или Раздел2[Раздел24.Индекс(Страница1)].Данные.П000200001000 = "293"
		 Или Раздел2[Раздел24.Индекс(Страница1)].Данные.П000200001000 = "510"
		 Или Раздел2[Раздел24.Индекс(Страница1)].Данные.П000200001000 = "520"
		 Или Раздел2[Раздел24.Индекс(Страница1)].Данные.П000200001000 = "531"
		 Или Раздел2[Раздел24.Индекс(Страница1)].Данные.П000200001000 = "532" Тогда
			НомерСтроки1 = 1;
			Пока Страница1.Данные.Свойство("П000240001003_" + НомерСтроки1) Цикл
				Если Страница1.Данные["П000240001001_" + НомерСтроки1] <> "" И (Страница1.Данные["П000240001001_" + НомерСтроки1] = "20001" Или Страница1.Данные["П000240001001_" + НомерСтроки1] = "20002" Или (Число(Страница1.Данные["П000240001001_" + НомерСтроки1]) >= 50001 И Число(Страница1.Данные["П000240001001_" + НомерСтроки1]) <= 50004)) Тогда
					ОписаниеКС = "Сумма налоговой базы по графе 2 Подраздела 2.4 по кодам 20001-20002, 50001-50004 должна быть равна сумме строк графы 4 Приложения 1 по соответствующим кодам.";
					СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
					РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(СписокРасшифровкиФормулы, ОписаниеКС, , СчетчикФормулДляРасшифровок);
					
					Квпт = Раздел2[Раздел24.Индекс(Страница1)].Данные.П000200001000;
					Кдп = Страница1.Данные["П000240001001_" + НомерСтроки1];
					Сумма1 = 0;
					Для Каждого Страница2 Из Приложение1 Цикл
						Если СокрЛП(Страница2.Данные.П000900001000) = Квпт Тогда
							Сумма2 = 0;
							НомерСтроки2 = 1;
							Пока Страница2.Данные.Свойство("П000900000004_" + НомерСтроки2) Цикл
								Если Страница2.Данные["П000900000001_" + НомерСтроки2] = Кдп Тогда
									Сумма2 = Сумма2 + Страница2.Данные["П000900000004_" + НомерСтроки2];
								КонецЕсли;
								НомерСтроки2 = НомерСтроки2 + 1;
							КонецЦикла;
							Сумма1 = Сумма1 + Сумма2;
						КонецЕсли;
					КонецЦикла;
					ЭтоОшибка = Не (Страница1.Данные["П000240001002_" + НомерСтроки1] = Сумма1);
					
					РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000240001002_" + НомерСтроки1,
						"Налоговая база", Страница1.Данные["П000240001002_" + НомерСтроки1], "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел24",
						Неопределено, НомерСтраницы1, СчетчикФормулДляРасшифровок);
					
					Квпт = Раздел2[Раздел24.Индекс(Страница1)].Данные.П000200001000;
					Кдп = Страница1.Данные["П000240001001_" + НомерСтроки1];
					Сумма3 = 0;
					Для Каждого Страница3 Из Приложение1 Цикл
						Если СокрЛП(Страница3.Данные.П000900001000) = Квпт Тогда
							Сумма4 = 0;
							НомерСтроки3 = 1;
							Пока Страница3.Данные.Свойство("П000900000004_" + НомерСтроки3) Цикл
								Если Страница3.Данные["П000900000001_" + НомерСтроки3] = Кдп Тогда
									РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000900000004_" + НомерСтроки3,
										"Налоговая база в пересчете на безводный этиловый спирт или общая мощность двигателей легковых автомобилей (мотоциклов), л.с.",
										Страница3.Данные["П000900000004_" + НомерСтроки3], "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Приложение1",
										Неопределено, НомерСтраницы1, СчетчикФормулДляРасшифровок);
									Сумма4 = Сумма4 + Страница3.Данные["П000900000004_" + НомерСтроки3];
								КонецЕсли;
								НомерСтроки3 = НомерСтроки3 + 1;
							КонецЦикла;
							Сумма3 = Сумма3 + Сумма4;
						КонецЕсли;
					КонецЦикла;
					Расшифровка = "" + Страница1.Данные["П000240001002_" + НомерСтроки1] + " = " + Сумма3;
					
					Если ЭтоОшибка Тогда
						ОписаниеНарушения = "Арифметическая ошибка";
						Норма = "ст. 88 НК РФ";
						ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
					Иначе
						ОписаниеНарушения = "";
						Норма = "";
						ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
					КонецЕсли;
					
					ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, ЭтоОшибка, ОписаниеНарушения, Норма);
				КонецЕсли;
				НомерСтроки1 = НомерСтроки1 + 1;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Если ОбщееЧислоОшибок + ОбщееЧислоБезОшибок > 0 Тогда
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок",    ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок",              СтруктураОшибок);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаРаздел25 (СтруктураРезультата)
	
	ОбщееЧислоОшибок = СтруктураРезультата.КоличествоНайденныхОшибок;
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок;
	
	СтруктураОшибок = СтруктураРезультата.СтруктураОшибок;
	
	Титульный = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаТитульный;
	Раздел1 = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить().ДанныеМногостраничныхРазделов.Раздел1;
	Раздел12 = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить().ДанныеМногостраничныхРазделов.Раздел12;
	Раздел13 = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить().ДанныеМногостраничныхРазделов.Раздел13;
	Раздел2 = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить().ДанныеМногостраничныхРазделов.Раздел2;
	Раздел24 = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить().ДанныеМногостраничныхРазделов.Раздел24;
	Раздел25 = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить().ДанныеМногостраничныхРазделов.Раздел25;
	Приложение1 = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить().ДанныеМногостраничныхРазделов.Приложение1;
	Приложение2 = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить().ДанныеМногостраничныхРазделов.Приложение2;
	
	ТекстФормулы = "Раздел 2.5";
	
	//--------------------------------------------------------------------------------------------------------------
	// Проверка 2.10
	//--------------------------------------------------------------------------------------------------------------
	
	Для Каждого Страница1 Из Раздел25 Цикл
		
		Если Раздел25.Индекс(Страница1) > Раздел2.Количество() - 1 Тогда
			Продолжить;
		КонецЕсли;
		
		НомерСтраницы1 = Строка(Раздел25.Индекс(Страница1) + 1);
		ОписаниеКС = "Сумма авансового платежа акциза графы 2 по коду 60004 должна быть равна сумме значений по строкам графы 5 Приложения 2 по все кодам ""60001"".";
		СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
		РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(СписокРасшифровкиФормулы, ОписаниеКС, , СчетчикФормулДляРасшифровок);
		
		Квпт = Раздел2[Раздел25.Индекс(Страница1)].Данные.П000200001000;
		
		Сумма1 = 0;
		Для Каждого Страница2 Из Приложение2 Цикл
			Сумма2 = 0;
			НомерСтроки1 = 1;
			Пока Страница2.Данные.Свойство("П000910000005_" + НомерСтроки1) Цикл
				Если Страница2.Данные["П000910000001_" + НомерСтроки1] = "60001" И Страница2.Данные["П000910000004_" + НомерСтроки1] = Квпт Тогда
					Сумма2 = Сумма2 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Страница2.Данные["П000910000005_" + НомерСтроки1]);
				КонецЕсли;
				НомерСтроки1 = НомерСтроки1 + 1;
			КонецЦикла;
			Сумма1 = Сумма1 + Сумма2;
		КонецЦикла;
		ЭтоОшибка = Не (РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Страница1.Данные.П000250004002) = Сумма1);
		
		РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000250004002",
			"Сумма авансового платежа акциза (руб.)", РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Страница1.Данные.П000250004002), "",
			СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел25", Неопределено, НомерСтраницы1, СчетчикФормулДляРасшифровок);
		
		Сумма3 = 0;
		Для Каждого Страница3 Из Приложение2 Цикл
			Сумма4 = 0;
			НомерСтроки2 = 1;
			Пока Страница3.Данные.Свойство("П000910000005_" + НомерСтроки2) Цикл
				Если Страница3.Данные["П000910000001_" + НомерСтроки2] = "60001" И Страница3.Данные["П000910000005_" + НомерСтроки2] = Квпт Тогда
					РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000910000005_" + НомерСтроки2,
					"Сумма авансового платежа акциза (руб.)", РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Страница3.Данные["П000910000005_" + НомерСтроки2]), "",
					СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Приложение2", Неопределено, НомерСтраницы1, СчетчикФормулДляРасшифровок);
					Сумма4 = Сумма4 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Страница3.Данные["П000910000005_" + НомерСтроки2]);
				КонецЕсли;
				НомерСтроки2 = НомерСтроки2 + 1;
			КонецЦикла;
			Сумма3 = Сумма3 + Сумма4;
		КонецЦикла;
		Расшифровка = "" + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Страница1.Данные.П000250004002) + " = " + Сумма3;
		
		Если ЭтоОшибка Тогда
			ОписаниеНарушения = "Арифметическая ошибка";
			Норма = "ст. 88 НК РФ";
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
		Иначе
			ОписаниеНарушения = "";
			Норма = "";
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
		КонецЕсли;
		
		ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, ЭтоОшибка, ОписаниеНарушения, Норма);
	КонецЦикла;
	
	//--------------------------------------------------------------------------------------------------------------
	// Проверка 2.11
	//--------------------------------------------------------------------------------------------------------------
	
	Для Каждого Страница1 Из Раздел25 Цикл
		
		Если Раздел25.Индекс(Страница1) > Раздел2.Количество() - 1 Тогда
			Продолжить;
		КонецЕсли;
		
		НомерСтраницы1 = Строка(Раздел25.Индекс(Страница1) + 1);
		ОписаниеКС = "Сумма авансового платежа акциза графы 2 по коду 60006 должна быть равна сумме значений по строкам графы 5 Приложения 2 по все кодам ""60002"".";
		СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
		РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(СписокРасшифровкиФормулы, ОписаниеКС, , СчетчикФормулДляРасшифровок);
		
		Квпт = Раздел2[Раздел25.Индекс(Страница1)].Данные.П000200001000;
		
		Сумма1 = 0;
		Для Каждого Страница2 Из Приложение2 Цикл
			Сумма2 = 0;
			НомерСтроки1 = 1;
			Пока Страница2.Данные.Свойство("П000910000005_" + НомерСтроки1) Цикл
				Если Страница2.Данные["П000910000001_" + НомерСтроки1] = "60002" И Страница2.Данные["П000910000004_" + НомерСтроки1] = Квпт Тогда
					Сумма2 = Сумма2 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Страница2.Данные["П000910000005_" + НомерСтроки1]);
				КонецЕсли;
				НомерСтроки1 = НомерСтроки1 + 1;
			КонецЦикла;
			Сумма1 = Сумма1 + Сумма2;
		КонецЦикла;
		ЭтоОшибка = Не (РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Страница1.Данные.П000250006002) = Сумма1);
		
		РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000250006002",
			"Сумма авансового платежа акциза (руб.)", РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Страница1.Данные.П000250006002), "",
			СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел25", Неопределено, НомерСтраницы1, СчетчикФормулДляРасшифровок);
			
		Сумма3 = 0;
		Для Каждого Страница3 Из Приложение2 Цикл
			Сумма4 = 0;
			НомерСтроки2 = 1;
			Пока Страница3.Данные.Свойство("П000910000005_" + НомерСтроки2) Цикл
				Если Страница3.Данные["П000910000001_" + НомерСтроки2] = "60002" И Страница3.Данные["П000910000004_" + НомерСтроки2] = Квпт Тогда
					РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000910000005_" + НомерСтроки2,
					"Сумма авансового платежа акциза (руб.)", РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Страница3.Данные["П000910000005_" + НомерСтроки2]), "",
					СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Приложение2", Неопределено, НомерСтраницы1, СчетчикФормулДляРасшифровок);
					Сумма4 = Сумма4 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Страница3.Данные["П000910000005_" + НомерСтроки2]);
				КонецЕсли;
				НомерСтроки2 = НомерСтроки2 + 1;
			КонецЦикла;
			Сумма3 = Сумма3 + Сумма4;
		КонецЦикла;
		Расшифровка = "" + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Страница1.Данные.П000250006002) + " = " + Сумма3;
		
		Если ЭтоОшибка Тогда
			ОписаниеНарушения = "Арифметическая ошибка";
			Норма = "ст. 88 НК РФ";
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
		Иначе
			ОписаниеНарушения = "";
			Норма = "";
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
		КонецЕсли;
		
		ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, ЭтоОшибка, ОписаниеНарушения, Норма);
	КонецЦикла;
	
	//--------------------------------------------------------------------------------------------------------------
	// Проверка 2.12
	//--------------------------------------------------------------------------------------------------------------
	
	Для Каждого Страница1 Из Раздел25 Цикл
		
		Если Раздел25.Индекс(Страница1) > Раздел2.Количество() - 1 Тогда
			Продолжить;
		КонецЕсли;
		
		НомерСтраницы1 = Строка(Раздел25.Индекс(Страница1) + 1);
		ОписаниеКС = "Величина значения по строке 010 Подраздела 2.5 должна быть равна сумме значений по строкам графы 3 Приложения 2 по всем кодам ""60001"".";
		СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
		РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(СписокРасшифровкиФормулы, ОписаниеКС, , СчетчикФормулДляРасшифровок);
		
		Квпт = Раздел2[Раздел25.Индекс(Страница1)].Данные.П000200001000;
		
		Сумма1 = 0;
		Для Каждого Страница2 Из Приложение2 Цикл
			Сумма2 = 0;
			НомерСтроки1 = 1;
			Пока Страница2.Данные.Свойство("П000910000003_" + НомерСтроки1) Цикл
				Если Страница2.Данные["П000910000001_" + НомерСтроки1] = "60001" И Страница2.Данные["П000910000004_" + НомерСтроки1] = Квпт Тогда
					Сумма2 = Сумма2 + Страница2.Данные["П000910000003_" + НомерСтроки1];
				КонецЕсли;
				НомерСтроки1 = НомерСтроки1 + 1;
			КонецЦикла;
			Сумма1 = Сумма1 + Сумма2;
		КонецЦикла;
		ЭтоОшибка = Не (Страница1.Данные.П000250001000 = Сумма1);
		
		РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000250001000",
			"Общий объем спирта этилового (в том числе этилового спирта-сырца) и (или) коньячного, при закупке (передаче в структуре) которого в налоговом периоде уплачена сумма авансового платежа акциза, указанная по коду показателя 60004",
			Страница1.Данные.П000250001000, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел25", Неопределено, НомерСтраницы1,
			СчетчикФормулДляРасшифровок);
		
		Сумма3 = 0;
		Для Каждого Страница3 Из Приложение2 Цикл
				Сумма4 = 0;
				НомерСтроки2 = 1;
				Пока Страница3.Данные.Свойство("П000910000003_" + НомерСтроки2) Цикл
					Если Страница3.Данные["П000910000001_" + НомерСтроки2] = "60001" И Страница3.Данные["П000910000004_" + НомерСтроки2] = Квпт Тогда
						РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000910000003_" + НомерСтроки2,
							"Объем приобретаемого (передаваемого в структуре) спирта (литров безводного спирта)", 
							Страница3.Данные["П000910000003_" + НомерСтроки2], "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Приложение2", Неопределено,
							НомерСтраницы1, СчетчикФормулДляРасшифровок);
						Сумма4 = Сумма4 + Страница3.Данные["П000910000003_" + НомерСтроки2];
					КонецЕсли;
					НомерСтроки2 = НомерСтроки2 + 1;
				КонецЦикла;
				Сумма3 = Сумма3 + Сумма4;
		КонецЦикла;
		Расшифровка = "" + Страница1.Данные.П000250001000 + " = " + Сумма3;
		
		Если ЭтоОшибка Тогда
			ОписаниеНарушения = "Арифметическая ошибка";
			Норма = "ст. 88 НК РФ";
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
		Иначе
			ОписаниеНарушения = "";
			Норма = "";
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
		КонецЕсли;
		
		ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, ЭтоОшибка, ОписаниеНарушения, Норма);
	КонецЦикла;
	
	//--------------------------------------------------------------------------------------------------------------
	// Проверка б/н
	//--------------------------------------------------------------------------------------------------------------
	
	Для Каждого Страница1 Из Раздел25 Цикл
		
		Если Раздел25.Индекс(Страница1) > Раздел2.Количество() - 1 Тогда
			Продолжить;
		КонецЕсли;
		
		НомерСтраницы1 = Строка(Раздел25.Индекс(Страница1) + 1);
		ОписаниеКС = "Величина значения по строке 020 Подраздела 2.5 должна быть равна сумме значений по строкам графы 3 Приложения 2 по всем кодам ""60002"".";
		СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
		РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(СписокРасшифровкиФормулы, ОписаниеКС, , СчетчикФормулДляРасшифровок);
		
		Квпт = Раздел2[Раздел25.Индекс(Страница1)].Данные.П000200001000;
		
		Сумма1 = 0;
		Для Каждого Страница2 Из Приложение2 Цикл
			Сумма2 = 0;
			НомерСтроки1 = 1;
			Пока Страница2.Данные.Свойство("П000910000003_" + НомерСтроки1) Цикл
				Если Страница2.Данные["П000910000001_" + НомерСтроки1] = "60002" И Страница2.Данные["П000910000004_" + НомерСтроки1] = Квпт Тогда
					Сумма2 = Сумма2 + Страница2.Данные["П000910000003_" + НомерСтроки1];
				КонецЕсли;
				НомерСтроки1 = НомерСтроки1 + 1;
			КонецЦикла;
			Сумма1 = Сумма1 + Сумма2;
		КонецЦикла;
		ЭтоОшибка = Не (Страница1.Данные.П000250002000 = Сумма1);
		
		РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000250002000",
			"Сумма авансового платежа акциза (руб.)", Страница1.Данные.П000250002000, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка,
			"Раздел25", Неопределено, НомерСтраницы1, СчетчикФормулДляРасшифровок);
		
		Сумма3 = 0;
		Для Каждого Страница3 Из Приложение2 Цикл
			Сумма4 = 0;
			НомерСтроки2 = 1;
			Пока Страница3.Данные.Свойство("П000910000003_" + НомерСтроки2) Цикл
				Если Страница3.Данные["П000910000001_" + НомерСтроки2] = "60002" И Страница3.Данные["П000910000004_" + НомерСтроки2] = Квпт Тогда
					РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000910000003_" + НомерСтроки2,
						"Объем приобретаемого (передаваемого в структуре) спирта (литров безводного спирта)", Страница3.Данные["П000910000003_" + НомерСтроки2],
						"", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Приложение2", Неопределено, НомерСтраницы1, СчетчикФормулДляРасшифровок);
					Сумма4 = Сумма4 + Страница3.Данные["П000910000003_" + НомерСтроки2];
				КонецЕсли;
				НомерСтроки2 = НомерСтроки2 + 1;
			КонецЦикла;
			Сумма3 = Сумма3 + Сумма4;
		КонецЦикла;
		Расшифровка = "" + Страница1.Данные.П000250002000 + " = " + Сумма3;
		
		Если ЭтоОшибка Тогда
			ОписаниеНарушения = "Арифметическая ошибка";
			Норма = "ст. 88 НК РФ";
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
		Иначе
			ОписаниеНарушения = "";
			Норма = "";
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
		КонецЕсли;
		
		ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, ЭтоОшибка, ОписаниеНарушения, Норма);
	КонецЦикла;
	
	Если ОбщееЧислоОшибок + ОбщееЧислоБезОшибок > 0 Тогда
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок",    ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок",              СтруктураОшибок);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаПриложение1 (СтруктураРезультата)
	
	ОбщееЧислоОшибок = СтруктураРезультата.КоличествоНайденныхОшибок;
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок;
	
	СтруктураОшибок = СтруктураРезультата.СтруктураОшибок;
	
	Титульный = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаТитульный;
	Раздел1 = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить().ДанныеМногостраничныхРазделов.Раздел1;
	Раздел12 = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить().ДанныеМногостраничныхРазделов.Раздел12;
	Раздел13 = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить().ДанныеМногостраничныхРазделов.Раздел13;
	Раздел2 = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить().ДанныеМногостраничныхРазделов.Раздел2;
	Раздел24 = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить().ДанныеМногостраничныхРазделов.Раздел24;
	Раздел25 = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить().ДанныеМногостраничныхРазделов.Раздел25;
	Приложение1 = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить().ДанныеМногостраничныхРазделов.Приложение1;
	Приложение2 = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить().ДанныеМногостраничныхРазделов.Приложение2;
	
	ТекстФормулы = "Приложение 1";
	
	//--------------------------------------------------------------------------------------------------------------
	// Проверка 3.1
	//--------------------------------------------------------------------------------------------------------------
	
	Для Каждого Страница1 Из Приложение1 Цикл
		НомерСтраницы1 = Строка(Приложение1.Индекс(Страница1) + 1);
		Если СокрЛП(Страница1.Данные.П000900001000) = "111" Или СокрЛП(Страница1.Данные.П000900001000) = "121" Или СокрЛП(Страница1.Данные.П000900001000) = "130" Или СокрЛП(Страница1.Данные.П000900001000) = "140" Или СокрЛП(Страница1.Данные.П000900001000) = "150" Или СокрЛП(Страница1.Данные.П000900001000) = "160" Или СокрЛП(Страница1.Данные.П000900001000) = "170" Или СокрЛП(Страница1.Данные.П000900001000) = "210" Или СокрЛП(Страница1.Данные.П000900001000) = "220" Или СокрЛП(Страница1.Данные.П000900001000) = "230" Или СокрЛП(Страница1.Данные.П000900001000) = "240" Или СокрЛП(Страница1.Данные.П000900001000) = "291" Или СокрЛП(Страница1.Данные.П000900001000) = "292" Или СокрЛП(Страница1.Данные.П000900001000) = "293" Тогда
			НомерСтроки1 = 1;
			Пока Страница1.Данные.Свойство("П000900000004_" + НомерСтроки1) Цикл
				Если Страница1.Данные["П000900000001_" + НомерСтроки1] <> "" И ((Число(Страница1.Данные["П000900000001_" + НомерСтроки1]) >= 10001 И Число(Страница1.Данные["П000900000001_" + НомерСтроки1]) <= 10020) Или Страница1.Данные["П000900000001_" + НомерСтроки1] = "10022" Или (Число(Страница1.Данные["П000900000001_" + НомерСтроки1]) >= 20001 И Число(Страница1.Данные["П000900000001_" + НомерСтроки1]) <= 20005) Или (Число(Страница1.Данные["П000900000001_" + НомерСтроки1]) >= 50001 И Число(Страница1.Данные["П000900000001_" + НомерСтроки1]) <= 50004)) Тогда
					ОписаниеКС = "Сумма налоговой базы графы 4 Приложения 1 по кодам 10001-10020, 10022, 20001-20005, 50001-50004 должна быть равна произведению значения графы 2 Приложения 1 и графы 3 Приложения 1 деленое на 100% по соответствующему коду.";
					СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
					РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(СписокРасшифровкиФормулы, ОписаниеКС, , СчетчикФормулДляРасшифровок);
					
					ЭтоОшибка = Не (Страница1.Данные["П000900000004_" + НомерСтроки1] = Окр(Страница1.Данные["П000900000002_" + НомерСтроки1] * Страница1.Данные["П000900000003_" + НомерСтроки1] / 100, 2));
					Расшифровка = "" + Страница1.Данные["П000900000004_" + НомерСтроки1] + " = " + Страница1.Данные["П000900000002_" + НомерСтроки1] + " * " + Страница1.Данные["П000900000003_" + НомерСтроки1] + " : 100 Итог [" + (Окр(Страница1.Данные["П000900000002_" + НомерСтроки1] * Страница1.Данные["П000900000003_" + НомерСтроки1] / 100, 2)) + "]";
					
					РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000900000004_" + НомерСтроки1,
						"Налоговая база в пересчете на безводный этиловый спирт или общая мощность двигателей легковых автомобилей (мотоциклов), л.с.",
						Страница1.Данные["П000900000004_" + НомерСтроки1], "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Приложение1", Неопределено,
						НомерСтраницы1, СчетчикФормулДляРасшифровок);
						
					РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000900000002_" + НомерСтроки1,
						"Содержание спирта (%) или мощность двигателя (л.с.)",
						Страница1.Данные["П000900000002_" + НомерСтроки1], "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Приложение1", Неопределено,
						НомерСтраницы1, СчетчикФормулДляРасшифровок);
						
					РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000900000003_" + НомерСтроки1,
						"Объем (количество) подакцизного товара",
						Страница1.Данные["П000900000003_" + НомерСтроки1], "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Приложение1", Неопределено,
						НомерСтраницы1, СчетчикФормулДляРасшифровок);
						
					Если ЭтоОшибка Тогда
						ОписаниеНарушения = "Арифметическая ошибка";
						Норма = "ст. 88 НК РФ";
						ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
					Иначе
						ОписаниеНарушения = "";
						Норма = "";
						ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
					КонецЕсли;
					
					ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, ЭтоОшибка, ОписаниеНарушения, Норма);
				КонецЕсли;
				НомерСтроки1 = НомерСтроки1 + 1;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	//--------------------------------------------------------------------------------------------------------------
	// Проверка 3.2
	//--------------------------------------------------------------------------------------------------------------
	
	Для Каждого Страница1 Из Приложение1 Цикл
		НомерСтраницы1 = Строка(Приложение1.Индекс(Страница1) + 1);
		Если СокрЛП(Страница1.Данные.П000900001000) = "510" Или СокрЛП(Страница1.Данные.П000900001000) = "520" Или 
			СокрЛП(Страница1.Данные.П000900001000) = "531" Или СокрЛП(Страница1.Данные.П000900001000) = "532" Тогда
			НомерСтроки1 = 1;
			Пока Страница1.Данные.Свойство("П000900000004_" + НомерСтроки1) Цикл
				Если Страница1.Данные["П000900000001_" + НомерСтроки1] <> "" И ((Число(Страница1.Данные["П000900000001_" + НомерСтроки1]) >= 10001 И Число(Страница1.Данные["П000900000001_" + НомерСтроки1]) <= 10020) Или Страница1.Данные["П000900000001_" + НомерСтроки1] = "10022" Или (Число(Страница1.Данные["П000900000001_" + НомерСтроки1]) >= 20001 И Число(Страница1.Данные["П000900000001_" + НомерСтроки1]) <= 20005) Или (Число(Страница1.Данные["П000900000001_" + НомерСтроки1]) >= 50001 И Число(Страница1.Данные["П000900000001_" + НомерСтроки1]) <= 50004)) Тогда
					ОписаниеКС = "Сумма налоговой базы графы 4 Приложения 1 по кодам 10001-10020, 10022, 20001-20005, 50001-50004 должна быть равна произведению значения графы 2 Приложения 1 и графы 3 Приложения 1 по соответствующему коду.";
					СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
					РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(СписокРасшифровкиФормулы, ОписаниеКС, , СчетчикФормулДляРасшифровок);
					
					ЭтоОшибка = Не (Страница1.Данные["П000900000004_" + НомерСтроки1] = Окр(Страница1.Данные["П000900000002_" + НомерСтроки1] * Страница1.Данные["П000900000003_" + НомерСтроки1], 2));
					Расшифровка = "" + Страница1.Данные["П000900000004_" + НомерСтроки1] + " = " + Страница1.Данные["П000900000002_" + НомерСтроки1] + " * " + Страница1.Данные["П000900000003_" + НомерСтроки1] + " Итог [" + (Окр(Страница1.Данные["П000900000002_" + НомерСтроки1] * Страница1.Данные["П000900000003_" + НомерСтроки1], 2)) + "]";
					
					РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000900000004_" + НомерСтроки1,
						"Налоговая база в пересчете на безводный этиловый спирт или общая мощность двигателей легковых автомобилей (мотоциклов), л.с.",
						Страница1.Данные["П000900000004_" + НомерСтроки1], "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Приложение1", Неопределено,
						НомерСтраницы1, СчетчикФормулДляРасшифровок);
						
					РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000900000002_" + НомерСтроки1,
						"Содержание спирта (%) или мощность двигателя (л.с.)",
						Страница1.Данные["П000900000002_" + НомерСтроки1], "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Приложение1", Неопределено,
						НомерСтраницы1, СчетчикФормулДляРасшифровок);
						
					РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, "П000900000003_" + НомерСтроки1,
						"Объем (количество) подакцизного товара",
						Страница1.Данные["П000900000003_" + НомерСтроки1], "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Приложение1", Неопределено,
						НомерСтраницы1, СчетчикФормулДляРасшифровок);
					
					Если ЭтоОшибка Тогда
						ОписаниеНарушения = "Арифметическая ошибка";
						Норма = "ст. 88 НК РФ";
						ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
					Иначе
						ОписаниеНарушения = "";
						Норма = "";
						ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
					КонецЕсли;
					
					ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, ЭтоОшибка, ОписаниеНарушения, Норма);
				КонецЕсли;
				НомерСтроки1 = НомерСтроки1 + 1;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Если ОбщееЧислоОшибок + ОбщееЧислоБезОшибок > 0 Тогда
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок",    ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок",              СтруктураОшибок);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ СТЫКОВКИ С СЕРВИСОМ СДАЧИ ОТЧЕТНОСТИ ЧЕРЕЗ ПРЕДСТАВИТЕЛЯ

&НаКлиенте
Процедура ОтправитьЧерезПредставителя(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОтправитьЧерезПредставителяЗавершение", ЭтотОбъект);

	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьЧерезПредставителяЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ПриНажатииНаКнопкуОтправкиЧерезПредставителяВРегламентированномОтчете(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВИнтернете(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьВИнтернетеЗавершение", ЭтотОбъект);

	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
		
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВИнтернетеЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ПроверитьВИнтернете(ЭтаФорма);
	
КонецПроцедуры

#Область ПанельОтправкиВКонтролирующиеОрганы

&НаКлиенте
Процедура ОбновитьОтправку(Команда)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОбновитьОтправкуИзПанелиОтправки(ЭтаФорма, "ФНС");
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаПротоколНажатие(Элемент)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьПротоколИзПанелиОтправки(ЭтаФорма, "ФНС");
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьНеотправленноеИзвещение(Команда)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОтправитьНеотправленноеИзвещениеИзПанелиОтправки(ЭтаФорма, "ФНС");
КонецПроцедуры

&НаКлиенте
Процедура ЭтапыОтправкиНажатие(Элемент)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьСостояниеОтправкиИзПанелиОтправки(ЭтаФорма, "ФНС");
КонецПроцедуры

&НаКлиенте
Процедура КритическиеОшибкиОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьКритическиеОшибкиИзПанелиОтправки(ЭтаФорма, "ФНС");
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаНаименованиеЭтапаНажатие(Элемент)
	
	ПараметрыИзменения = Новый Структура;
	ПараметрыИзменения.Вставить("Форма", ЭтаФорма);
	ПараметрыИзменения.Вставить("Организация", СтруктураРеквизитовФормы.Организация);
	ПараметрыИзменения.Вставить("КонтролирующийОрган",
		ПредопределенноеЗначение("Перечисление.ТипыКонтролирующихОрганов.ФНС"));
	
	РегламентированнаяОтчетностьКлиент.ИзменитьСтатусОтправки(ПараметрыИзменения);
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ОтправитьВКонтролирующийОрган(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверкаВозможностиВыгрузкиРегламентированногоОтчетаПередОтправкой", ЭтотОбъект);
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередОтправкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаВозможностиВыгрузкиРегламентированногоОтчетаПередОтправкой(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОтправитьВКонтролирующийОрганЗавершение", ЭтотОбъект);
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьВКонтролирующийОрганЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ПриНажатииНаКнопкуОтправкиВКонтролирующийОрган(ЭтаФорма, "ФНС");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Форма", ЭтаФорма);
	Оповещение = Новый ОписаниеОповещения("ПослеСохраненияФормыЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	СохранитьНаКлиенте(, Оповещение);
КонецПроцедуры

&НаКлиенте
Процедура ПослеСохраненияФормыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	ДополнительныеПараметры.Форма.Закрыть();
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция РазделТекущейОбласти(Форма, ТекущаяОбласть, ДлИмениОбласти = 13) Экспорт

	Если ТекущаяОбласть = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ИмяТекущейОбласти = СтрЗаменить(ТекущаяОбласть.Имя, "ДобавитьСтрокуЗначок", "ДобавитьСтроку");
	Если ИмяТекущейОбласти = "ДобавитьСтроку1" Тогда
		Возврат Форма.СтруктураРеквизитовФормы.мИдГруппы1;
	ИначеЕсли ИмяТекущейОбласти = "ДобавитьСтроку2" Тогда
		Возврат Форма.СтруктураРеквизитовФормы.мИдГруппы12;
	ИначеЕсли ИмяТекущейОбласти = "ДобавитьСтроку3" Тогда
		Возврат Форма.СтруктураРеквизитовФормы.мИдГруппы13;
	ИначеЕсли ИмяТекущейОбласти = "ДобавитьСтроку4" Тогда
		Возврат Форма.СтруктураРеквизитовФормы.мИдГруппы2;
	ИначеЕсли ИмяТекущейОбласти = "ДобавитьСтроку5" Тогда
		Возврат Форма.СтруктураРеквизитовФормы.мИдГруппы24;
	ИначеЕсли ИмяТекущейОбласти = "ДобавитьСтроку6" Тогда
		Возврат Форма.СтруктураРеквизитовФормы.мИдПриложения1;
	ИначеЕсли ИмяТекущейОбласти = "ДобавитьСтроку7" Тогда
		Возврат Форма.СтруктураРеквизитовФормы.мИдПриложения2;
	ИначеЕсли ИмяТекущейОбласти = "ДобавитьСтроку8" Тогда
		Возврат Форма.СтруктураРеквизитовФормы.мИдПриложения3;
	ИначеЕсли ИмяТекущейОбласти = "ДобавитьСтроку9" Тогда
		Возврат Форма.СтруктураРеквизитовФормы.мИдПриложения4;
	ИначеЕсли ИмяТекущейОбласти = "ДобавитьСтроку10" Тогда
		Возврат Форма.СтруктураРеквизитовФормы.мИдПриложения5;
	ИначеЕсли ИмяТекущейОбласти = "ДобавитьСтроку11" Тогда
		Возврат Форма.СтруктураРеквизитовФормы.мИдПриложения6;
	ИначеЕсли ИмяТекущейОбласти = "ДобавитьСтроку12" Тогда
		Возврат Форма.СтруктураРеквизитовФормы.мИдПриложения7;
	ИначеЕсли СтрНайти(ИмяТекущейОбласти, "УдалитьСтроку") > 0 Тогда
		ИмяТекущейОбласти = СтрЗаменить(ИмяТекущейОбласти, "УдалитьСтроку", "");
	КонецЕсли;

	ИмяАктивногоРаздела = Лев(ИмяТекущейОбласти, ДлИмениОбласти);
	
	Для Каждого ЭлементСтруктуры Из Форма.мСтруктураМногострочныхРазделов Цикл
		ИмяГруппы = ЭлементСтруктуры.Ключ;
		СтруктураГруппы = Форма[ЭлементСтруктуры.Значение];

		Если СтруктураГруппы[0].Свойство(ИмяАктивногоРаздела) Тогда
			Возврат ИмяГруппы;
		КонецЕсли;
	КонецЦикла;

	Возврат Неопределено;

КонецФункции

&НаКлиенте
Процедура ТабличныйДокументПриАктивизацииОбласти(Элемент)
	Элементы.ТабличныйДокументКонтекстноеМенюУдалитьСтроку.Доступность = Ложь;
	Элементы.ТабличныйДокументКонтекстноеМенюДобавитьСтроку.Доступность = Ложь;
	
	ИмяГруппы = РазделТекущейОбласти(ЭтаФорма, Элемент.ТекущаяОбласть);
	
	Если ЗначениеЗаполнено(ИмяГруппы) Тогда 
		ТестовоеИмя1 = ИмяГруппы + "01_" + Строка(мСтруктураИсхКолвоСтрокРазделов[ИмяГруппы] + 1);
		ТестовоеИмя2 = ИмяГруппы + "20_" + Строка(мСтруктураИсхКолвоСтрокРазделов[ИмяГруппы] + 1);
		Элементы.ТабличныйДокументКонтекстноеМенюДобавитьСтроку.Доступность = Истина;
		Если СтрЧислоВхождений(Элемент.ТекущаяОбласть.Имя, "ДобавитьСтроку") = 0 И
			(ТабличныйДокумент.Области.Найти(ТестовоеИмя1) <> Неопределено Или ТабличныйДокумент.Области.Найти(ТестовоеИмя2) <> Неопределено) Тогда
			Элементы.ТабличныйДокументКонтекстноеМенюУдалитьСтроку.Доступность = Истина;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОткрытьПрисоединенныеФайлы(Команда)
	
	РегламентированнаяОтчетностьКлиент.СохранитьОтчетИОткрытьФормуПрисоединенныеФайлы(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийПриИзменении(Элемент)
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Функция ОбъектОтчета(ЭтаФормаИмя) Экспорт
	
	Если мОбъектОтчета = Неопределено Тогда 
		мОбъектОтчета = РегламентированнаяОтчетностьВызовСервера.ОбъектОтчета(ЭтаФормаИмя);
	КонецЕсли;
	
	Возврат мОбъектОтчета;
	
КонецФункции