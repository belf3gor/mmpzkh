
////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ
//

#Область ОбработчикиСобытийЭлементовФормы

&НаСервере
// Обработчик события "ПриСозданииНаСервере" формы
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	УПЖКХ_ТиповыеМетодыВызовСервера.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
	Проживающий = Неопределено;
	Если Параметры.Свойство("Проживающий", Проживающий) Тогда
		Отчет.СписокПроживающих.Очистить();
		НоваяСтрока = Отчет.СписокПроживающих.Добавить();
		НоваяСтрока.Проживающий = Проживающий;
		Параметры.Свойство("ВидАдреса", НоваяСтрока.Вид);
		ВидАдресаПоУмолчанию   = НоваяСтрока.Вид;
		НоваяСтрока.Количество = 1;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриОткрытии" формы
Процедура ПриОткрытии(Отказ)
	
	Если Не ЗначениеЗаполнено(ВидАдресаПоУмолчанию) Тогда
		ВидАдресаПоУмолчанию = Элементы.ВидАдресаПоУмолчанию.СписокВыбора.Получить(0).Значение;
	КонецЕсли;
	УправлениеПометкамиКнопок();
	ПолеРазмерБумаги = Элементы.РазмерБумаги.СписокВыбора[0].Значение;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПередЗакрытием" формы
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ УПРАВЛЕНИЯ
//

#Область ОбработчикиСобытийЭлементовУправления

&НаКлиенте
// Обработчик события "ПриНачалеРедактирования" ТП СписокПроживающих
Процедура СписокПроживающихПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока И Не Копирование Тогда
		Элементы.СписокПроживающих.ТекущиеДанные.Количество = 1;
		Элементы.СписокПроживающих.ТекущиеДанные.Вид = ВидАдресаПоУмолчанию;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ГРУППЫ ОТБОРЫ

#Область ОбработчикиСобытийГруппыОтборы

&НаКлиенте
Процедура ОтборыПриИзменении(Элемент)
	
	УПЖКХ_ТиповыеМетодыКлиент.ОтборыПриИзменении(ЭтаФорма, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	УПЖКХ_ТиповыеМетодыКлиент.ОтборыПередНачаломДобавления(ЭтаФорма, Элемент, Отказ, Копирование, Родитель, Группа);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборыПередНачаломИзменения(Элемент, Отказ)
	
	УПЖКХ_ТиповыеМетодыКлиент.ОтборыПередНачаломИзменения(ЭтаФорма, Элемент, Отказ);	
	
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД
//

#Область ОбработчикиКоманд

&НаКлиенте
// Обработчик команды "КомандаВыполнитьОбработку"
Процедура КомандаВыполнитьОбработку(Команда)
	ВыполнитьОбработкуНаСервере();
	ДокументРезультат = ПолучитьИзВременногоХранилища(АдресХранилища);
	Если ВыводитьЛисткиНаПечать Тогда
		ДокументРезультат.Напечатать();
	Иначе
		ДокументРезультат.Показать("Листки прибытия(убытия)");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
// Обработчик команды "КомандаВыводитьЛисткиНаПечать"
Процедура КомандаВыводитьЛисткиНаПечать(Команда)
	ВыводитьЛисткиНаПечать = Не ВыводитьЛисткиНаПечать;
	УправлениеПометкамиКнопок();
КонецПроцедуры

&НаКлиенте
// Обработчик команды "КомандаОтобрать".
Процедура КомандаОтобрать(Команда)

	Если Не Отчет.СписокПроживающих.Количество() = 0 Тогда
		ПоказатьВопрос(	Новый ОписаниеОповещения("ОбработатьРезультатВопросаКомандаОтобрать", ЭтаФорма),
						"Список будет очищен. Продолжить?",
						РежимДиалогаВопрос.ДаНет);
		Возврат;
	КонецЕсли;
	
	СформироватьСписокПроживающихПоОтбору();
	
КонецПроцедуры // КомандаОтобрать()

&НаКлиенте
// Обработчик результата вопроса, вызванного в процедуре "КомандаОтобрать()".
Процедура ОбработатьРезультатВопросаКомандаОтобрать(Ответ, ДопПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		Отчет.СписокПроживающих.Очистить();
		СформироватьСписокПроживающихПоОтбору();
	КонецЕсли;
	
КонецПроцедуры // ОбработатьРезультатВопросаКомандаОтобрать()

&НаКлиенте
// Пустая команда для кнопки Настройка, которая обязательна для отчета СКД
Процедура КомандаНастройкаПустая(Команда)
	// Пустая команда
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

#Область ПроцедурыИФункцииОбщегоНазначения

&НаКлиенте
// Устанавливает пометками кнопок в соответствии с установленными значениями.
Процедура УправлениеПометкамиКнопок()

	Элементы.СписокПроживающихКомандаВыводитьЛисткиНаПечать.Пометка = ВыводитьЛисткиНаПечать;

КонецПроцедуры // УправлениеПометкамиКнопок()

&НаСервере
// Выполняет обработку на сервере
Процедура ВыполнитьОбработкуНаСервере()
	
	АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
	ОбработкаОбъект = РеквизитФормыВЗначение("Отчет");
	ОбработкаОбъект.ВыполнитьОбработку(АдресХранилища, ПолеРазмерБумаги);
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьЗапрещенныеПоля(Режим = "") Экспорт
	
	СписокПолей = Новый Массив;
	
	СписокПолей.Добавить("UserFields");
	СписокПолей.Добавить("DataParameters");
	СписокПолей.Добавить("SystemFields");
	СписокПолей.Добавить("Вид");
	СписокПолей.Добавить("Количество");
	
	Возврат Новый ФиксированныйМассив(СписокПолей);
	
КонецФункции

&НаСервере
Процедура СформироватьСписокПроживающихПоОтбору()
	
	Параметр = Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Период"));
	Параметр.Значение = УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьРабочуюДату();
	Параметр.Использование = Истина;
	Параметр = Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ВидАдреса"));
	Параметр.Значение = ВидАдресаПоУмолчанию;
	Параметр.Использование = Истина;
	Настройки = Отчет.КомпоновщикНастроек.Настройки;
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	СхемаКомпоновкиДанныхСписокПроживающих = ПолучитьИзВременногоХранилища(СхемаКомпоновкиДанных);
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанныхСписокПроживающих, Настройки,,,
													Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));

	// Инициализируем процессор СКД
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки);
	// Инициализируем процессор вывода
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ТЗСписокПроживающих = Новый ТаблицаЗначений();
	ПроцессорВывода.УстановитьОбъект(ТЗСписокПроживающих);
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	Отчет.СписокПроживающих.Загрузить(ТЗСписокПроживающих);
	
КонецПроцедуры

#КонецОбласти
