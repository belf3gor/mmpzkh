#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

Функция ПолучитьПараметрыИсполненияОтчета() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ИспользоватьПередКомпоновкойМакета", Истина);
	Результат.Вставить("ИспользоватьПослеКомпоновкиМакета",  Истина);
	Результат.Вставить("ИспользоватьПослеВыводаРезультата",  Истина);
	Результат.Вставить("ИспользоватьДанныеРасшифровки",      Ложь);
	Результат.Вставить("ИспользоватьПриВыводеЗаголовка",     Истина);
	Результат.Вставить("ИспользоватьВнешниеНаборыДанных",    Истина);
	Результат.Вставить("ИспользоватьПривилегированныйРежим", Истина);
	
	Возврат Результат;
	
КонецФункции

Процедура ПриВыводеЗаголовка(ПараметрыОтчета, КомпоновщикНастроек, Результат) Экспорт
	
	Макет = ПолучитьОбщийМакет("ОбщиеОбластиСтандартногоОтчета");
	ОбластьЗаголовок        = Макет.ПолучитьОбласть("ОбластьЗаголовок");
	ОбластьОписаниеНастроек = Макет.ПолучитьОбласть("ОписаниеНастроек");
	ОбластьОрганизация      = Макет.ПолучитьОбласть("Организация");
	
	//Организация
	ТекстОрганизация = БухгалтерскиеОтчетыВызовСервера.ПолучитьТекстОрганизация(
		ПараметрыОтчета.Организация, 
		ПараметрыОтчета.ВключатьОбособленныеПодразделения);
		
		ОбластьОрганизация.Параметры.НазваниеОрганизации = ТекстОрганизация;
	Результат.Вывести(ОбластьОрганизация);
	
	//Заголовок
	ОбластьЗаголовок.Параметры.ЗаголовокОтчета = "" + ПолучитьТекстЗаголовка(ПараметрыОтчета);
	Результат.Вывести(ОбластьЗаголовок);
	
	Результат.Область("R1:R" + Результат.ВысотаТаблицы).Имя = "Заголовок";
	
	// Единица измерения
	Если ПараметрыОтчета.Свойство("ВыводитьЕдиницуИзмерения")
		И ПараметрыОтчета.ВыводитьЕдиницуИзмерения Тогда
		ОбластьОписаниеЕдиницыИзмерения = Макет.ПолучитьОбласть("ОписаниеЕдиницыИзмерения");
		Результат.Вывести(ОбластьОписаниеЕдиницыИзмерения);
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьТекстЗаголовка(ПараметрыОтчета) Экспорт 
	
	ШаблонЗаголовка = НСтр("ru = 'Справка-расчет единого налога на вмененный доход %1'");
	ПредставлениеПериода = БухгалтерскиеОтчетыКлиентСервер.ПолучитьПредставлениеПериода(
		НачалоКвартала(ПараметрыОтчета.НачалоПериода),
		ПараметрыОтчета.КонецПериода);
		
	Возврат СтрШаблон(ШаблонЗаголовка, ПредставлениеПериода);
	
КонецФункции

Функция ПолучитьВнешниеНаборыДанных(ПараметрыОтчета, МакетКомпоновки) Экспорт
	
	Возврат Новый Структура("КлассификацияРасходов", УчетРасходовУменьшающихОтдельныеНалоги.СчетаРасходовУменьшающихНалог());
	
КонецФункции

// В процедуре можно доработать компоновщик перед выводом в отчет
// Изменения сохранены не будут
Процедура ПередКомпоновкойМакета(ПараметрыОтчета, Схема, КомпоновщикНастроек) Экспорт
	
	НачалоКвартала = НачалоКвартала(ПараметрыОтчета.НачалоПериода);
	
	Если ЗначениеЗаполнено(ПараметрыОтчета.НачалоПериода) Тогда
		НачалоКвартала = НачалоКвартала(ПараметрыОтчета.НачалоПериода);
	Иначе
		НачалоКвартала = НачалоКвартала(ТекущаяДатаСеанса());
	КонецЕсли;
	Если ЗначениеЗаполнено(ПараметрыОтчета.КонецПериода) Тогда
		БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "КонецПериода", КонецДня(ПараметрыОтчета.КонецПериода));
	КонецЕсли;
	
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "НачалоПериода", НачалоКвартала);
	
	Для ИндексПериода = 0 По 2 Цикл
		
		Период = КонецМесяца(ДобавитьМесяц(НачалоКвартала, ИндексПериода));
		КоличествоДней = День(Период);
		БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "Период" + ИндексПериода, Период);
		БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "КоличествоДнейВМесяце" + ИндексПериода, КоличествоДней);
		
	КонецЦикла;
	
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "ВыводитьРасходы", ПараметрыОтчета.ВыводитьРасходы);
	
	ЭтоЮрЛицо = ОбщегоНазначенияБПВызовСервераПовтИсп.ЭтоЮрЛицо(ПараметрыОтчета.Организация);
	
	ИПИспользуетТрудНаемныхРаботников = УчетЗарплаты.ИПИспользуетТрудНаемныхРаботниковЗаПериод(ПараметрыОтчета.Организация,
		НачалоКвартала, КонецДня(ПараметрыОтчета.КонецПериода));
	
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "ЕстьОграничениеНаСуммуРасходов", ЭтоЮрЛицо ИЛИ ИПИспользуетТрудНаемныхРаботников);
	
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(
		КомпоновщикНастроек, 
		"КоэффициентДефлятор", 
		УчетЕНВДКлиентСервер.КоэффициентДефлятор(ПараметрыОтчета.КонецПериода));
	
	ТаблицаРасчетЕНВД = НайтиПоИмени(КомпоновщикНастроек.Настройки.Структура, "РасчетЕНВД");
	
	Если ТаблицаРасчетЕНВД <> Неопределено Тогда
		
		Если ЭтоПолныйПериодЕНВД(ПараметрыОтчета) Тогда
			ИмяГруппировки = "ВидДеятельностиПолныйПериод";
		Иначе
			ИмяГруппировки = "ВидДеятельности";
		КонецЕсли;
		
		ГруппировкаВидДеятельности = НайтиПоИмени(ТаблицаРасчетЕНВД.Строки, ИмяГруппировки);
		
		Если ГруппировкаВидДеятельности <> Неопределено Тогда
			
			ГруппировкаВидДеятельности.Использование = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ПрименяетсяВычетПоОнлайнКассам = УчетЕНВД.ПрименяетсяВычетПоОнлайнКассам(
		ПараметрыОтчета.Организация,
		ПараметрыОтчета.КонецПериода);
	
	ГруппировкаРасходНаККТ = НайтиПоИмени(КомпоновщикНастроек.Настройки.Структура, "РасходНаККТ");
	ГруппировкаРасходНаККТ.Использование = ПараметрыОтчета.ВыводитьРасходы И ПрименяетсяВычетПоОнлайнКассам;
	
	БухгалтерскиеОтчетыВызовСервера.ДобавитьОтборПоОрганизации(ПараметрыОтчета, КомпоновщикНастроек);
	
КонецПроцедуры

Процедура ПослеКомпоновкиМакета(ПараметрыОтчета, МакетКомпоновки) Экспорт
	
	ИменаГруппировок = Новый Массив;
	
	ИменаГруппировок.Добавить("РасходыУменьшающиеСуммуЕНВД");
	
	Для Каждого Таблица Из МакетКомпоновки.Тело Цикл
		
		ОбработатьТаблицуМакета(Таблица, ИменаГруппировок);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПослеВыводаРезультата(ПараметрыОтчета, Результат) Экспорт
	
	БухгалтерскиеОтчетыВызовСервера.ОбработкаРезультатаОтчета(ПараметрыОтчета.ИдентификаторОтчета, Результат);
	
	Результат.ФиксацияСлева = 0;
	Результат.ФиксацияСверху = 0;
	
КонецПроцедуры

Функция ПолучитьНаборПоказателей() Экспорт
	
	НаборПоказателей = Новый Массив;
	НаборПоказателей.Добавить("БУ");
	
	Возврат НаборПоказателей;
	
КонецФункции

Процедура НастроитьВариантыОтчета(Настройки, ОписаниеОтчета) Экспорт
	
	ВариантыНастроек = ВариантыНастроек();
	Для Каждого Вариант Из ВариантыНастроек Цикл
		ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, Вариант.Имя).Размещение.Вставить(
			Метаданные.Подсистемы.Отчеты.Подсистемы.СправкиРасчеты.Подсистемы.БухгалтерскийУчет, "");
		ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, Вариант.Имя).Размещение.Вставить(
			Метаданные.Подсистемы.Отчеты.Подсистемы.СправкиРасчеты.Подсистемы.БухгалтерскийИНалоговыйУчет, "");
		ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, Вариант.Имя).Размещение.Вставить(
			Метаданные.Подсистемы.БухгалтерияПредприятияПодсистемы.Подсистемы.ПростойИнтерфейс.Подсистемы.Отчеты.Подсистемы.СправкиРасчеты, "");
	КонецЦикла;
	
КонецПроцедуры

//Процедура используется подсистемой варианты отчетов
//
Процедура НастройкиОтчета(Настройки) Экспорт
	
	ВариантыНастроек = ВариантыНастроек();
	Для Каждого Вариант Из ВариантыНастроек Цикл
		Настройки.ОписаниеВариантов.Вставить(Вариант.Имя,Вариант.Представление);
	КонецЦикла;
	
КонецПроцедуры

Функция ВариантыНастроек() Экспорт
	
	Массив = Новый Массив;
	
	Массив.Добавить(Новый Структура("Имя, Представление","СправкаРасчетЕдиногоНалогаНаВмененныйДоход", "Расчет ЕНВД"));
	
	Возврат Массив;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ЭтоПолныйПериодЕНВД(ПараметрыОтчета)
	
	Запрос = Новый Запрос;

	Запрос.Текст = "ВЫБРАТЬ
	               |	ВидыДеятельностиЕНВД.Ссылка
	               |ИЗ
	               |	Справочник.ВидыДеятельностиЕНВД КАК ВидыДеятельностиЕНВД
	               |ГДЕ
	               |	(ВидыДеятельностиЕНВД.ДатаНачала МЕЖДУ &НачалоПериода И &КонецПериода
	               |			ИЛИ ВидыДеятельностиЕНВД.ДатаПрекращения МЕЖДУ &НачалоПериода И &КонецПериода)
	               |	И ВидыДеятельностиЕНВД.Владелец = &Организация
	               |	И (ВидыДеятельностиЕНВД.Ссылка В (&ВидыДеятельности)
	               |			ИЛИ НЕ &ОтборПоВидуДеятельности)";
		
	Запрос.УстановитьПараметр("НачалоПериода", КонецДня(ПараметрыОтчета.НачалоПериода));
	Запрос.УстановитьПараметр("КонецПериода", ПараметрыОтчета.КонецПериода);
	Запрос.УстановитьПараметр("Организация", ПараметрыОтчета.Организация);
	
	ВидыДеятельности = Новый Массив;
	ПолеВидДеятельности = Новый ПолеКомпоновкиДанных("ВидДеятельности");
	
	Для Каждого ЭлементОтбора Из ПараметрыОтчета.НастройкиКомпоновкиДанных.Отбор.Элементы Цикл
		
		Если ЭлементОтбора.ЛевоеЗначение = ПолеВидДеятельности Тогда
			Если ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке Тогда
				
				Для Каждого ЗначениеОтбора Из ЭлементОтбора.ПравоеЗначение Цикл
					ВидыДеятельности.Добавить(ЗначениеОтбора);
				КонецЦикла;
				
			Иначе
				ВидыДеятельности.Добавить(ЭлементОтбора.ПравоеЗначение);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Запрос.УстановитьПараметр("ВидыДеятельности", ВидыДеятельности);
	Запрос.УстановитьПараметр("ОтборПоВидуДеятельности", ВидыДеятельности.Количество() > 0);
	
	Возврат Запрос.Выполнить().Пустой();
	
КонецФункции

Функция НайтиПоИмени(Структура, Имя)
	
	Группировка = Неопределено;
	
	Для каждого Элемент Из Структура Цикл
		Если ТипЗнч(Элемент) = Тип("ТаблицаКомпоновкиДанных") Тогда
			Если Элемент.Имя = Имя Тогда
				Возврат Элемент;
			КонецЕсли;
		Иначе
			Если Элемент.Имя = Имя Тогда
				Возврат Элемент;
			КонецЕсли;
			Для каждого Поле Из Элемент.ПоляГруппировки.Элементы Цикл
				Если Не ТипЗнч(Поле) = Тип("АвтоПолеГруппировкиКомпоновкиДанных") Тогда
					Если Поле.Поле = Новый ПолеКомпоновкиДанных(Имя) Тогда
						Возврат Элемент;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			Если Элемент.Структура.Количество() = 0 Тогда
				Продолжить;
			Иначе
				Группировка = НайтиПоИмени(Элемент.Структура, Имя);
				Если Не Группировка = Неопределено Тогда
					Возврат Группировка;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Группировка;
	
КонецФункции

Процедура ОбработатьТаблицуМакета(Таблица, ИменаГруппировок)
	
	Если Тип(Таблица) = Тип("ТаблицаМакетаКомпоновкиДанных") Тогда
		
		Для Каждого Строка Из Таблица.Строки Цикл
			Если ТипЗнч(Строка) = Тип("ГруппировкаТаблицыМакетаКомпоновкиДанных") Тогда
				УдалитьИтогИзГруппировки(Строка, ИменаГруппировок);
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли Тип(Таблица) = Тип("ГруппировкаМакетаКомпоновкиДанных") Тогда
		
		Для Каждого Тело Из Таблица.Тело Цикл
			
			ОбработатьТаблицуМакета(Тело, ИменаГруппировок);
			
		КонецЦикла;
		
	КонецЕсли;

КонецПроцедуры

Процедура УдалитьИтогИзГруппировки(Группировка, ИменаГруппировок)
	
	Если ИменаГруппировок.Найти(Группировка.Имя) <> Неопределено Тогда
		
		МакетГруппировкиИтога = Неопределено;
		
		Для Каждого МакетГруппировки Из Группировка.Тело Цикл
			
			Если ТипЗнч(МакетГруппировки) = Тип("МакетГруппировкиТаблицыМакетаКомпоновкиДанных") Тогда
				
				МакетГруппировкиИтога = МакетГруппировки;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Группировка.Тело.Удалить(МакетГруппировкиИтога);
		
	КонецЕсли;

	Для Каждого ПодГруппировка Из Группировка.Тело Цикл
		Если ТипЗнч(ПодГруппировка) = Тип("ГруппировкаМакетаКомпоновкиДанных") Тогда
			УдалитьИтогИзГруппировки(ПодГруппировка, ИменаГруппировок);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли