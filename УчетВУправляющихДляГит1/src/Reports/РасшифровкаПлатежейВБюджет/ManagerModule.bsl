
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

Функция ПолучитьПараметрыИсполненияОтчета() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ИспользоватьВнешниеНаборыДанных",    Истина);
	Результат.Вставить("ИспользоватьПередКомпоновкойМакета", Истина);
	Результат.Вставить("ИспользоватьПослеКомпоновкиМакета",  Ложь);
	Результат.Вставить("ИспользоватьПослеВыводаРезультата",  Истина);
	Результат.Вставить("ИспользоватьДанныеРасшифровки",      Истина);
	Результат.Вставить("ИспользоватьПриВыводеЗаголовка",     Ложь);
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьВнешниеНаборыДанных(ПараметрыОтчета, МакетКомпоновки) Экспорт
	
	ДанныеУплачено = НовыйВнешниеДанныеУплачено();
	
	Если ПараметрыОтчета.ВидОтчета = ВидыОтчета().ПлатежиУСН
		ИЛИ ПараметрыОтчета.ВидОтчета = ВидыОтчета().НачисленияПлатежиУСН Тогда
		
		ПлатежиУСН = УчетУСН.ДокументыУплатыНалогаЗаПериод(
			ПараметрыОтчета.Организация,
			ПараметрыОтчета.НачалоПериода,
			ПараметрыОтчета.КонецПериода);
		
		Если ПлатежиУСН <> Неопределено Тогда
			ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ПлатежиУСН, ДанныеУплачено);
		КонецЕсли;
		
	ИначеЕсли ПараметрыОтчета.ВидОТчета = ВидыОтчета().СтраховыеВзносы Тогда
		
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(
			УплаченныеСтраховыеВзносы(ПараметрыОтчета),
			ДанныеУплачено);
		
	КонецЕсли;
	
	ВнешниеНаборы = Новый Структура;
	ВнешниеНаборы.Вставить("Уплачено", ДанныеУплачено);
	
	Возврат ВнешниеНаборы;
	
КонецФункции

Функция УплаченныеСтраховыеВзносы(ПараметрыОтчета)
	
	СчетаДенежныхСредств = Новый Массив;
	СчетаДенежныхСредств.Добавить(ПланыСчетов.Хозрасчетный.КассаОрганизации); //50.01
	СчетаДенежныхСредств.Добавить(ПланыСчетов.Хозрасчетный.РасчетныеСчета);   //51
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("НачалоПериода", ПараметрыОтчета.НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода", ПараметрыОтчета.КонецПериода);
	Запрос.УстановитьПараметр("Организация", ПараметрыОтчета.Организация);
	
	Запрос.УстановитьПараметр("СчетаДенежныхСредств",
		БухгалтерскийУчет.СформироватьМассивСубсчетов(СчетаДенежныхСредств));
	Запрос.УстановитьПараметр("СчетаУчетаВзносов",
		УчетРасходовУменьшающихОтдельныеНалоги.СчетаСтраховыхВзносовУменьшающихНалог());
	Запрос.УстановитьПараметр("ВидыПлатежей", Перечисления.ВидыПлатежейВГосБюджет.ВидыНалоговыхПлатежей());
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ХозрасчетныйОборотыДтКт.Регистратор КАК ДокументОплаты,
	|	ХозрасчетныйОборотыДтКт.СуммаОборот КАК СуммаОборот,
	|	ХозрасчетныйОборотыДтКт.СубконтоДт1 КАК ВидПлатежа,
	|	ХозрасчетныйОборотыДтКт.СчетДт КАК СчетУчета,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ХозрасчетныйОборотыДтКт.Регистратор) = ТИП(Документ.СписаниеСРасчетногоСчета)
	|			ТОГДА ВЫРАЗИТЬ(ХозрасчетныйОборотыДтКт.Регистратор КАК Документ.СписаниеСРасчетногоСчета).НалоговыйПериод
	|		КОГДА ТИПЗНАЧЕНИЯ(ХозрасчетныйОборотыДтКт.Регистратор) = ТИП(Документ.РасходныйКассовыйОрдер)
	|			ТОГДА ВЫРАЗИТЬ(ХозрасчетныйОборотыДтКт.Регистратор КАК Документ.РасходныйКассовыйОрдер).НалоговыйПериод
	|		ИНАЧЕ ХозрасчетныйОборотыДтКт.Период
	|	КОНЕЦ КАК СтраховойПериод
	|ПОМЕСТИТЬ ВТ_Выписки
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			Регистратор,
	|			СчетДт В (&СчетаУчетаВзносов),
	|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет),
	|			СчетКт В (&СчетаДенежныхСредств),
	|			,
	|			Организация = &Организация
	|				И СубконтоДт1 В (&ВидыПлатежей)) КАК ХозрасчетныйОборотыДтКт
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ДокументОплаты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПлатежноеПоручение.Ссылка КАК Ссылка,
	|	ПлатежноеПоручение.СуммаДокумента КАК СуммаДокумента,
	|	ПлатежноеПоручение.ДокументОснование КАК ДокументОснование
	|ПОМЕСТИТЬ ВТ_Платежки
	|ИЗ
	|	Документ.ПлатежноеПоручение КАК ПлатежноеПоручение
	|ГДЕ
	|	ПлатежноеПоручение.Организация = &Организация
	|	И ПлатежноеПоручение.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|	И НЕ ПлатежноеПоручение.ПометкаУдаления
	|	И ПлатежноеПоручение.ПеречислениеВБюджет
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ДокументОснование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(ВТ_Платежки.Ссылка, ВТ_Выписки.ДокументОплаты) КАК ДокументОплаты,
	|	ВТ_Выписки.СуммаОборот КАК СуммаОплаты,
	|	ВЫБОР
	|		КОГДА ВЫРАЗИТЬ(ВТ_Выписки.ДокументОплаты КАК Документ.СписаниеСРасчетногоСчета).ДатаВходящегоДокумента = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА ВЫРАЗИТЬ(ВТ_Выписки.ДокументОплаты КАК Документ.СписаниеСРасчетногоСчета).Дата
	|		ИНАЧЕ ВЫРАЗИТЬ(ВТ_Выписки.ДокументОплаты КАК Документ.СписаниеСРасчетногоСчета).ДатаВходящегоДокумента
	|	КОНЕЦ КАК ДатаДокумента,
	|	ВЫБОР
	|		КОГДА ВЫРАЗИТЬ(ВТ_Выписки.ДокументОплаты КАК Документ.СписаниеСРасчетногоСчета).НомерВходящегоДокумента ПОДОБНО ""%[^ ]%""
	|			ТОГДА ВЫРАЗИТЬ(ВТ_Выписки.ДокументОплаты КАК Документ.СписаниеСРасчетногоСчета).НомерВходящегоДокумента
	|		ИНАЧЕ ВЫРАЗИТЬ(ВТ_Выписки.ДокументОплаты КАК Документ.СписаниеСРасчетногоСчета).Номер
	|	КОНЕЦ КАК НомерДокумента,
	|	ВТ_Выписки.СчетУчета КАК СчетУчета,
	|	ВТ_Выписки.ВидПлатежа КАК ВидПлатежа,
	|	ВТ_Выписки.СтраховойПериод КАК НалоговыйПериод
	|ИЗ
	|	ВТ_Выписки КАК ВТ_Выписки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Платежки КАК ВТ_Платежки
	|		ПО (ВТ_Платежки.Ссылка = ВТ_Выписки.ДокументОплаты.ДокументОснование
	|				ИЛИ ВТ_Выписки.ДокументОплаты = ВТ_Платежки.ДокументОснование)
	|ГДЕ
	|	ВТ_Выписки.ДокументОплаты ССЫЛКА Документ.СписаниеСРасчетногоСчета
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТ_Выписки.ДокументОплаты,
	|	ВТ_Выписки.СуммаОборот,
	|	ДанныеПервичныхДокументов.Дата,
	|	ДанныеПервичныхДокументов.Номер,
	|	ВТ_Выписки.СчетУчета,
	|	ВТ_Выписки.ВидПлатежа,
	|	ВТ_Выписки.СтраховойПериод
	|ИЗ
	|	ВТ_Выписки КАК ВТ_Выписки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК ДанныеПервичныхДокументов
	|		ПО ВТ_Выписки.ДокументОплаты = ДанныеПервичныхДокументов.Документ
	|			И (ДанныеПервичныхДокументов.Организация = &Организация)
	|ГДЕ
	|	ВТ_Выписки.ДокументОплаты ССЫЛКА Документ.РасходныйКассовыйОрдер
	|	И ВТ_Выписки.СуммаОборот > 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТ_Выписки.ДокументОплаты,
	|	ВТ_Выписки.СуммаОборот,
	|	ДанныеПервичныхДокументов.Дата,
	|	ДанныеПервичныхДокументов.Номер,
	|	ВТ_Выписки.СчетУчета,
	|	ВТ_Выписки.ВидПлатежа,
	|	ВТ_Выписки.СтраховойПериод
	|ИЗ
	|	ВТ_Выписки КАК ВТ_Выписки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК ДанныеПервичныхДокументов
	|		ПО ВТ_Выписки.ДокументОплаты = ДанныеПервичныхДокументов.Документ
	|			И (ДанныеПервичныхДокументов.Организация = &Организация)
	|ГДЕ
	|	ВТ_Выписки.ДокументОплаты ССЫЛКА Документ.ОперацияБух
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаДокумента"
	;
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция НовыйВнешниеДанныеУплачено()
	
	ДанныеУплачено = Новый ТаблицаЗначений;
	
	ДанныеУплачено.Колонки.Добавить("ДокументОплаты");
	ДанныеУплачено.Колонки.Добавить("СуммаОплаты");
	ДанныеУплачено.Колонки.Добавить("ДатаДокумента");
	ДанныеУплачено.Колонки.Добавить("НомерДокумента");
	ДанныеУплачено.Колонки.Добавить("СчетУчета");
	ДанныеУплачено.Колонки.Добавить("НалоговыйПериод");
	ДанныеУплачено.Колонки.Добавить("ВидПлатежа");
	
	Возврат ДанныеУплачено;
	
КонецФункции

// В процедуре можно доработать компоновщик перед выводом в отчет
// Изменения сохранены не будут
Процедура ПередКомпоновкойМакета(ПараметрыОтчета, Схема, КомпоновщикНастроек) Экспорт
	
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "Организация", ПараметрыОтчета.Организация);
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "НачалоПериода", ПараметрыОтчета.НачалоПериода);
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "КонецПериода", ПараметрыОтчета.КонецПериода);
	
	СчетаОплатыНалога = Новый Массив;
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СчетаОплатыНалога, БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.Касса));
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СчетаОплатыНалога, БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.РасчетныеСчета));
	
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "СчетаОплатыНалога", СчетаОплатыНалога);
	
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "СчетаНачисленияНалога",
		БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.ЕНприУСН));
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "ВидыПлатежей",
		Перечисления.ВидыПлатежейВГосБюджет.ВидыНалоговыхПлатежей());
	
	СтруктураОтчета = КомпоновщикНастроек.Настройки.Структура;
	
	Если ЭтоОтчетПоНалогуУСН(ПараметрыОтчета.ВидОтчета) Тогда
		
		Если ВыводитьНачисленияУСН(ПараметрыОтчета.ВидОтчета) Тогда
			
			ГруппировкаНачислено = СтруктураОтчета.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
			ГруппировкаНачислено.Имя = "Документ начисления";
			ГруппировкаНачислено.Использование = Истина;
			
			Если ВыводитьНачисленияИПлатежиУСН(ПараметрыОтчета.ВидОтчета) Тогда
				// Выводим заголовок, если в отчете несколько таблиц.
				ЭлементЗаголовок = ГруппировкаНачислено.ПараметрыВывода.Элементы.Найти("Заголовок");
				ЭлементЗаголовок.Значение = НСтр("ru = 'Начислено'");
				ЭлементЗаголовок.Использование = Истина;
			КонецЕсли;
			
			ВыбранноеПоле      = ГруппировкаНачислено.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
			ВыбранноеПоле.Поле = Новый ПолеКомпоновкиДанных("ДокументНачисления");
			ВыбранноеПоле      = ГруппировкаНачислено.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
			ВыбранноеПоле.Поле = Новый ПолеКомпоновкиДанных("СуммаНачисления");
			
			ЭлементУО = ГруппировкаНачислено.УсловноеОформление.Элементы.Добавить();
			КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ДокументНачисления");
			ЭлементУО.Оформление.УстановитьЗначениеПараметра("МинимальнаяШирина", 55);
			ЭлементУО.Оформление.УстановитьЗначениеПараметра("МаксимальнаяШирина", 55);
			
			ЭлементУО = ГруппировкаНачислено.УсловноеОформление.Элементы.Добавить();
			КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СуммаНачисления");
			ЭлементУО.Оформление.УстановитьЗначениеПараметра("МинимальнаяШирина", 13);
			ЭлементУО.Оформление.УстановитьЗначениеПараметра("МаксимальнаяШирина", 13);
			
		КонецЕсли;
		
		Если ВыводитьПлатежиУСН(ПараметрыОтчета.ВидОтчета) Тогда
			
			ГруппировкаОплачено               = СтруктураОтчета.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
			ГруппировкаОплачено.Имя           = "Документ оплаты";
			ГруппировкаОплачено.Использование = Истина;
			
			Если ВыводитьНачисленияИПлатежиУСН(ПараметрыОтчета.ВидОтчета) Тогда
				// Выводим заголовок, если в отчете несколько таблиц.
				ЭлементЗаголовок = ГруппировкаОплачено.ПараметрыВывода.Элементы.Найти("Заголовок");
				ЭлементЗаголовок.Значение = НСтр("ru = 'Оплачено'");
				ЭлементЗаголовок.Использование = Истина;
			КонецЕсли;
			
			ВыбранноеПоле      = ГруппировкаОплачено.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
			ВыбранноеПоле.Поле = Новый ПолеКомпоновкиДанных("ДокументОплаты");
			ВыбранноеПоле      = ГруппировкаОплачено.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
			ВыбранноеПоле.Поле = Новый ПолеКомпоновкиДанных("СуммаОплаты");
			ВыбранноеПоле      = ГруппировкаОплачено.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
			
			ЭлементУО = ГруппировкаОплачено.УсловноеОформление.Элементы.Добавить();
			КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ДокументОплаты");
			ЭлементУО.Оформление.УстановитьЗначениеПараметра("МинимальнаяШирина", 55);
			ЭлементУО.Оформление.УстановитьЗначениеПараметра("МаксимальнаяШирина", 55);
			
			ЭлементУО = ГруппировкаОплачено.УсловноеОформление.Элементы.Добавить();
			КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СуммаОплаты");
			ЭлементУО.Оформление.УстановитьЗначениеПараметра("МинимальнаяШирина", 13);
			ЭлементУО.Оформление.УстановитьЗначениеПараметра("МаксимальнаяШирина", 13);
			
		КонецЕсли;
		
	ИначеЕсли ПараметрыОтчета.ВидОтчета = ВидыОтчета().СтраховыеВзносы Тогда
		
		ДетальнаяГруппировка               = СтруктураОтчета.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
		ДетальнаяГруппировка.Имя           = "Детальная";
		ДетальнаяГруппировка.Использование = Истина;
		
		ВыбранноеПоле      = ДетальнаяГруппировка.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
		ВыбранноеПоле.Поле = Новый ПолеКомпоновкиДанных("ДокументОплаты");
		ВыбранноеПоле      = ДетальнаяГруппировка.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
		ВыбранноеПоле.Поле = Новый ПолеКомпоновкиДанных("СчетУчета");
		ВыбранноеПоле      = ДетальнаяГруппировка.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
		ВыбранноеПоле.Поле = Новый ПолеКомпоновкиДанных("СуммаОплаты");

		ЭлементУО = ДетальнаяГруппировка.УсловноеОформление.Элементы.Добавить();
		КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ДокументОплаты");
		ЭлементУО.Оформление.УстановитьЗначениеПараметра("МаксимальнаяШирина", 20);
		
		ЭлементУО = ДетальнаяГруппировка.УсловноеОформление.Элементы.Добавить();
		КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СчетУчета");
		ЭлементУО.Оформление.УстановитьЗначениеПараметра("МаксимальнаяШирина", 40);
		
		ЭлементУО = ДетальнаяГруппировка.УсловноеОформление.Элементы.Добавить();
		КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СуммаОплаты");
		ЭлементУО.Оформление.УстановитьЗначениеПараметра("МинимальнаяШирина", 13);
		
	КонецЕсли;
	
	КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Вставить("ВыводитьЗаголовок", Ложь);
	КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Вставить("ВыводитьПодвал"   , Ложь);
	
КонецПроцедуры

Процедура ПослеВыводаРезультата(ПараметрыОтчета, Результат) Экспорт
	
	БухгалтерскиеОтчетыВызовСервера.ОбработкаРезультатаОтчета(ПараметрыОтчета.ИдентификаторОтчета, Результат);
	
	Результат.ФиксацияСверху = 0;
	
	Результат.ФиксацияСлева = 0;
	
КонецПроцедуры

Функция ЭтоОтчетПоНалогуУСН(ВидОтчета) Экспорт
	
	ВсеВидыОтчета = ВидыОтчета();
	
	Возврат ВидОтчета = ВсеВидыОтчета.НачисленияПлатежиУСН
		Или ВидОтчета = ВсеВидыОтчета.НачисленияУСН
		Или ВидОтчета = ВсеВидыОтчета.ПлатежиУСН;
	
КонецФункции

Функция ВыводитьНачисленияУСН(ВидОтчета)
	
	ВсеВидыОтчета = ВидыОтчета();
	
	Возврат ВидОтчета = ВсеВидыОтчета.НачисленияПлатежиУСН
		Или ВидОтчета = ВсеВидыОтчета.НачисленияУСН;
	
КонецФункции

Функция ВыводитьПлатежиУСН(ВидОтчета)
	
	ВсеВидыОтчета = ВидыОтчета();
	
	Возврат ВидОтчета = ВсеВидыОтчета.НачисленияПлатежиУСН
		Или ВидОтчета = ВсеВидыОтчета.ПлатежиУСН;
	
КонецФункции

Функция ВыводитьНачисленияИПлатежиУСН(ВидОтчета)
	
	ВсеВидыОтчета = ВидыОтчета();
	
	Возврат ВидОтчета = ВсеВидыОтчета.НачисленияПлатежиУСН;
	
КонецФункции

Функция ВидыОтчета() Экспорт
	
	ПоддерживаемыеВидыОтчета = Новый Структура;
	
	ПоддерживаемыеВидыОтчета.Вставить("НачисленияУСН",        "НачисленияУСН");
	ПоддерживаемыеВидыОтчета.Вставить("ПлатежиУСН",           "ПлатежиУСН");
	ПоддерживаемыеВидыОтчета.Вставить("НачисленияПлатежиУСН", "НачисленияПлатежиУСН");
	ПоддерживаемыеВидыОтчета.Вставить("СтраховыеВзносы",      "СтраховыеВзносы");
	
	Возврат ПоддерживаемыеВидыОтчета;
	
КонецФункции

#КонецЕсли