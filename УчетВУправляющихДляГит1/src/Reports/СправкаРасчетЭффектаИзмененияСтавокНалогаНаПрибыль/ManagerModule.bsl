#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область БухгалтерскиеОтчеты

// Описывает свойства отчета (манифест), декларирующий поддержанные в нем возможности подсистемы,
// включая реализованный программный интерфейс.
//
Функция ПолучитьПараметрыИсполненияОтчета() Экспорт
	
	Манифест = Новый Структура;
	Манифест.Вставить("ИспользоватьДанныеРасшифровки",      Ложь);
	Манифест.Вставить("ИспользоватьПередКомпоновкойМакета", Истина);
	Манифест.Вставить("ИспользоватьПослеКомпоновкиМакета",  Истина);
	Манифест.Вставить("ИспользоватьПриВыводеЗаголовка",     Истина);
	Манифест.Вставить("ИспользоватьПослеВыводаРезультата",  Истина);
	
	СправкиРасчеты.УстановитьОтчетНеИспользуетНаборыСуммовыхПоказателей(Манифест);
	
	Возврат Манифест;

КонецФункции

#КонецОбласти

#Область ОбработчикиБухгалтерскиеОтчеты

// Обработчик события подсистемы БухгалтерскиеОтчеты.
// Вызов определяется параметром ИспользоватьПередКомпоновкойМакета.
//
// Параметры:
//  Контекст			 - Структура - контекст, в котором формируется отчет.
//                         См. СправкиРасчеты.КонтекстФормированияОтчета.
//  Схема				 - СхемаКомпоновкиДанных - схема отчета.
//  КомпоновщикНастроек	 - КомпоновщикНастроекКомпоновкиДанных - описание связи настроек и схемы отчета.
//
Процедура ПередКомпоновкойМакета(Контекст, Схема, КомпоновщикНастроек) Экспорт
	
	// Заполнение дат следует проверять.
	РегистрыСведений.РасчетОтложенногоНалога.НастроитьПериодОтчета(
		КомпоновщикНастроек, 
		Контекст.НачалоПериода,
		Контекст.КонецПериода,
		Контекст.Организация);
		
	СтавкиНалога = РегистрыСведений.ПримененныеСтавкиОтложенногоНалога.ПрочитатьСтавки(
		Контекст.КонецПериода,
		Контекст.Организация,
		"%");
		
	Контекст.ВыполнениеОтчета.Вставить("СтавкиНалога", СтавкиНалога);
		
	ТекстыЗаголовковГруппКолонок = ЗаголовкиГруппКолонок(СтавкиНалога, Контекст.НачалоПериода, Контекст.КонецПериода);
	БухгалтерскиеОтчеты.УстановитьЗаголовкиГруппКолонок(КомпоновщикНастроек, ТекстыЗаголовковГруппКолонок);
	
	БухгалтерскиеОтчетыВызовСервера.ДобавитьОтборПоОрганизации(Контекст, КомпоновщикНастроек);
	
КонецПроцедуры

// Обработчик события подсистемы БухгалтерскиеОтчеты.
// Вызов определяется параметром ИспользоватьПослеКомпоновкиМакета.
//
// Параметры:
//  Контекст		 - Структура - контекст, в котором формируется отчет.
//                     См. СправкиРасчеты.КонтекстФормированияОтчета.
//  МакетКомпоновки	 - МакетКомпоновкиДанных - сформированный макет компоновки данных.
//
Процедура ПослеКомпоновкиМакета(Контекст, МакетКомпоновки) Экспорт
	
	СправкиРасчеты.НастроитьГрафыОтчета(МакетКомпоновки, ГрафыОтчета());
	
КонецПроцедуры

// Обработчик события подсистемы БухгалтерскиеОтчеты.
// Вызов определяется параметром ИспользоватьПриВыводеЗаголовка.
//
// Параметры:
//  Контекст		 - Структура - контекст, в котором формируется отчет.
//                     См. СправкиРасчеты.КонтекстФормированияОтчета.
//  КомпоновщикНастроек	 - КомпоновщикНастроекКомпоновкиДанных - описание связи настроек и схемы отчета.
//  Результат - ТабличныйДокумент - табличный документ с сформированным отчетом.
//
Процедура ПриВыводеЗаголовка(Контекст, КомпоновщикНастроек, Результат) Экспорт
	
	СправкиРасчеты.ВывестиШапкуОтчета(Результат, Контекст);
	
КонецПроцедуры

// Обработчик события подсистемы БухгалтерскиеОтчеты.
// Вызов определяется параметром ИспользоватьПослеВыводаРезультата.
//
// Параметры:
//  Контекст		 - Структура - контекст, в котором формируется отчет.
//                     См. СправкиРасчеты.КонтекстФормированияОтчета.
//  Результат - ТабличныйДокумент - табличный документ с сформированным отчетом.
//
Процедура ПослеВыводаРезультата(Контекст, Результат) Экспорт
	
	Результат.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	
	СправкиРасчеты.ОформитьРезультатОтчета(Результат, Контекст, Истина);
	
	ВывестиПорядокРасчета(Результат, Контекст.ВыполнениеОтчета.СтавкиНалога, Контекст.НачалоПериода, Контекст.КонецПериода);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ТонкаяНастройка

Функция ИспользуютсяРазныеСтавки(СтавкиНалога)
	Возврат (ТипЗнч(СтавкиНалога) = Тип("Соответствие"));
КонецФункции

Функция ЗаголовкиГруппКолонок(СтавкиНалога, НачалоПериода, КонецПериода)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НаНачалоПериода",                      "");
	Заголовки.Вставить("ПересчетПоСтавкеТекущегоНалога",       "");
	Заголовки.Вставить("ВлияниеВременныхРазницНаТекущийНалог", "");
	Заголовки.Вставить("ПересчетПоСтавкеБудущегоНалога",       "");
	Заголовки.Вставить("НаКонецПериода",                       "");
	
	ИспользуютсяРазныеСтавки = ИспользуютсяРазныеСтавки(СтавкиНалога);
	Если ИспользуютсяРазныеСтавки Тогда
		ШаблонГраницаПериода = НСтр("ru = 'На [ОтчетнаяДата], по ставке [Ставка]%'");
		ШаблонПересчет       = НСтр("ru = 'Пересчет по ставке [Ставка]%'");
		ШаблонИзменение      = НСтр("ru = 'Эффект изменения временных разниц, по ставке [Ставка]%'");
	Иначе
		ШаблонГраницаПериода = НСтр("ru = 'На [ОтчетнаяДата]'");
		ШаблонПересчет       = НСтр("ru = 'Пересчет'");
		ШаблонИзменение      = НСтр("ru = 'Эффект изменения временных разниц'");
	КонецЕсли;
	
	// НаНачалоПериода
	ПараметрыТекста = Новый Структура;
	ПараметрыТекста.Вставить("ОтчетнаяДата", Формат(НачалоПериода, "ДЛФ=D"));
	Если ИспользуютсяРазныеСтавки Тогда
		ПараметрыТекста.Вставить("Ставка", СтавкиНалога[Перечисления.ВидыСтавокОтложенногоНалога.ПредыдущаяОценка]);
	КонецЕсли;
	
	Заголовки.НаНачалоПериода = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(ШаблонГраницаПериода, ПараметрыТекста);
	
	// ПересчетПоСтавкеТекущегоНалога
	// ВлияниеВременныхРазницНаТекущийНалог
	
	ПараметрыТекста = Новый Структура;
	Если ИспользуютсяРазныеСтавки Тогда
		ПараметрыТекста.Вставить("Ставка", СтавкиНалога[Перечисления.ВидыСтавокОтложенногоНалога.ТекущийНалог]);
	КонецЕсли;
	
	Заголовки.ПересчетПоСтавкеТекущегоНалога = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(
		ШаблонПересчет,
		ПараметрыТекста);
	Заголовки.ВлияниеВременныхРазницНаТекущийНалог = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(
		ШаблонИзменение,
		ПараметрыТекста);
		
	// ПересчетПоСтавкеБудущегоНалога
	// НаКонецПериода
	ПараметрыТекста = Новый Структура;
	ПараметрыТекста.Вставить("ОтчетнаяДата", Формат(КонецДня(КонецПериода) + 1, "ДЛФ=D"));
	Если ИспользуютсяРазныеСтавки Тогда
		ПараметрыТекста.Вставить("Ставка", СтавкиНалога[Перечисления.ВидыСтавокОтложенногоНалога.БудущийНалог]);
	КонецЕсли;
	
	Заголовки.ПересчетПоСтавкеБудущегоНалога = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(
		ШаблонПересчет,
		ПараметрыТекста);
		
	Заголовки.НаКонецПериода = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(
		ШаблонГраницаПериода,
		ПараметрыТекста);
	
	Возврат Заголовки;
		
КонецФункции

Функция ГрафыОтчета()
	
	Разделы = Новый Соответствие;
	
	СчетчикГраф = 0;
	ДобавитьГрафыРазделаОтчета(Разделы, СправкиРасчеты.СлужебноеИмяЗаголовкиСтрок(), 1, СчетчикГраф); // добавить одну графу
	ДобавитьГрафыРазделаОтчета(Разделы, "НаНачалоПериода",                           2, СчетчикГраф); // добавить две графы
	ДобавитьГрафыРазделаОтчета(Разделы, "ПересчетПоСтавкеТекущегоНалога",            2, СчетчикГраф);
	ДобавитьГрафыРазделаОтчета(Разделы, "ВлияниеВременныхРазницНаТекущийНалог",      4, СчетчикГраф);
	ДобавитьГрафыРазделаОтчета(Разделы, "ПересчетПоСтавкеБудущегоНалога",            2, СчетчикГраф);
	ДобавитьГрафыРазделаОтчета(Разделы, "НаКонецПериода",                            2, СчетчикГраф);
	
	Возврат Разделы;
	
КонецФункции

Процедура ДобавитьГрафыРазделаОтчета(Разделы, ИмяРаздела, КоличествоГраф, СчетчикГраф)
	
	ГрафыРаздела = Новый Массив;
	
	Для НомерГрафыВРазделе = 1 По КоличествоГраф Цикл
		СчетчикГраф        = СчетчикГраф + 1;
		ГрафыРаздела.Добавить(Формат(СчетчикГраф, ""));
	КонецЦикла;
	
	Разделы.Вставить(ИмяРаздела, ГрафыРаздела);
	
КонецПроцедуры

Процедура ВывестиПорядокРасчета(ТабличныйДокумент, СтавкиНалога, НачалоПериода, КонецПериода)
	
	Шаблон = Отчеты.СправкаРасчетЭффектаИзмененияСтавокНалогаНаПрибыль.ПолучитьМакет("ПорядокРасчета");
	
	// Заголовок
	ШаблонЗаголовок = Шаблон.ПолучитьОбласть("Заголовок");
	ТабличныйДокумент.Вывести(ШаблонЗаголовок);
	
	// Основной текст
	Если ИспользуютсяРазныеСтавки(СтавкиНалога) Тогда
		ИмяШаблонаПорядокРасчета = "РазныеСтавкиНалога";
	Иначе
		ИмяШаблонаПорядокРасчета = "ОдинаковаяСтавкаНалога";
	КонецЕсли;
	
	ШаблонПорядокРасчета = Шаблон.ПолучитьОбласть(ИмяШаблонаПорядокРасчета);
	
	ПараметрыТекста = Новый Структура;
	
	Если ИмяШаблонаПорядокРасчета = "РазныеСтавкиНалога" Тогда
		
		ПараметрыТекста.Вставить("НачалоПериода", Формат(КонецМесяца(НачалоПериода),    "ДЛФ=D"));
		ПараметрыТекста.Вставить("ОтчетнаяДата",  Формат(КонецМесяца(КонецПериода) + 1, "ДЛФ=D"));
		
		ПараметрыТекста.Вставить(
			"СтавкаНалогаПредыдущаяОценка",
			Формат(СтавкиНалога[Перечисления.ВидыСтавокОтложенногоНалога.ПредыдущаяОценка], "ЧН=0"));
		
		ПараметрыТекста.Вставить(
			"СтавкаНалогаТекущийНалог",
			Формат(СтавкиНалога[Перечисления.ВидыСтавокОтложенногоНалога.ТекущийНалог], "ЧН=0"));
		
		ПараметрыТекста.Вставить(
			"СтавкаНалогаБудущийНалог",
			Формат(СтавкиНалога[Перечисления.ВидыСтавокОтложенногоНалога.БудущийНалог], "ЧН=0"));
			
	КонецЕсли;
	
	ШаблонПорядокРасчета.Параметры.Заполнить(ПараметрыТекста);
	
	ТабличныйДокумент.Вывести(ШаблонПорядокРасчета);
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли
