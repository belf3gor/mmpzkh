#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныеПроцедурыИФункции

// Процедура формирует отчет.
Процедура СформироватьОтчет(ПараметрыОтчета, АдресХранилища) Экспорт
	
	Если ПараметрыОтчета.Организация.Пустая() Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Укажите организацию.");
		Возврат;
	КонецЕсли;
	
	Если ПараметрыОтчета.ЛицевойСчет.Пустая() Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Укажите лицевой счет.");
		Возврат;
	КонецЕсли;
	
	Если ПараметрыОтчета.НачалоПериода > ПараметрыОтчета.КонецПериода Тогда 
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Начало периода не может быть позже окончания периода.");
		Возврат;
	КонецЕсли;
	
	Если НЕ ПараметрыОтчета.Свойство("ВариантОтбораУслуг") Тогда
		ПараметрыОтчета.Вставить("ВариантОтбораУслуг", "формировать отчет по всем услугам");
	КонецЕсли;
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	Макет = УПЖКХ_ТиповыеМетодыСервер.ПолучитьМакет("Отчет.КВП_ВыпискаПоЛицевомуСчету.ПФ_MXL_ВыпискаПоЛицевомуСчету");
	
	НастройкиУчетнойПолитикиТСЖ = ПараметрыОтчета.НастройкиУчетнойПолитикиТСЖ;
	Если ПараметрыОтчета.НастройкиУчетнойПолитикиТСЖОтказ Тогда
		НастройкиУчетнойПолитикиТСЖ.Вставить("НеУчитыватьЛьготыВоВзаиморасчетах", Ложь);
	КонецЕсли;
	
	ЗаполнитьОбластьЗаголовкаОтчета(ТабличныйДокумент, Макет, ПараметрыОтчета);
	
	ЗаполнитьСведенияОЛицевомСчете(ТабличныйДокумент, Макет, ПараметрыОтчета);
	
	// Основные сведения о начислениях выводим по периодам.
	Запрос = Новый Запрос();
	
	Запрос.УстановитьПараметр("Организация",                   ПараметрыОтчета.Организация);
	Запрос.УстановитьПараметр("ЛицевойСчет",                   ПараметрыОтчета.ЛицевойСчет);
	Запрос.УстановитьПараметр("ДетализироватьСведенияПоПеням", ПараметрыОтчета.ДетализироватьСведенияПоПеням);
	Запрос.УстановитьПараметр("ПорядокУслуг",                  ПолучитьПорядокУслуг());
	
	Если НЕ ПараметрыОтчета.ВариантОтбораУслуг = "формировать отчет по всем услугам" Тогда
		Запрос.УстановитьПараметр("СписокУслуг", ПараметрыОтчета.СписокУслуг);
	КонецЕсли;
	
	Запрос.Текст = ПолучитьТекстЗапроса(ПараметрыОтчета);
	
	НачалоПериода   = НачалоДня(ПараметрыОтчета.НачалоПериода);
	КонецПериода    = КонецДня(ПараметрыОтчета.КонецПериода);
	ТаблицаПериодов = ПараметрыОтчета.ТаблицаПериодов;
	
	Если ПараметрыОтчета.ВыводитьСведенияПоМесяцам И ТаблицаПериодов.Количество() > 1 Тогда
		
		Для Каждого ТекущаяСтрокаПериода Из ТаблицаПериодов Цикл
			
			Запрос.УстановитьПараметр("ДатаНач", ТекущаяСтрокаПериода.НачалоПериода);
			Запрос.УстановитьПараметр("ДатаКон", ТекущаяСтрокаПериода.КонецПериода);
			
			ПараметрыОтчета.НачалоПериода = ТекущаяСтрокаПериода.НачалоПериода;
			ПараметрыОтчета.КонецПериода  = ТекущаяСтрокаПериода.КонецПериода;
			
			ЗаполнитьТаблицуСведенийОНачислениях(ТабличныйДокумент, Макет, ПараметрыОтчета, Запрос);
			
		КонецЦикла;
		
		Запрос.УстановитьПараметр("ДатаНач", НачалоПериода);
		Запрос.УстановитьПараметр("ДатаКон", КонецПериода);
		
		ПараметрыОтчета.НачалоПериода = НачалоПериода;
		ПараметрыОтчета.КонецПериода  = КонецПериода;
		
	Иначе
		
		Запрос.УстановитьПараметр("ДатаНач", НачалоПериода);
		Запрос.УстановитьПараметр("ДатаКон", КонецПериода);
		
		ЗаполнитьТаблицуСведенийОНачислениях(ТабличныйДокумент, Макет, ПараметрыОтчета, Запрос);
		
	КонецЕсли;
	
	// Заполняем сведения о задолженности и область подписи.
	ЗаполнитьОбластьПодвала(ТабличныйДокумент, Макет, ПараметрыОтчета, Запрос);
	
	// Настройи масштаба и печати.
	
	ТабличныйДокумент.АвтоМасштаб = Истина;
	
	// Первую колонку не печатаем.
	Если ПараметрыОтчета.ДетализироватьСведенияПоПеням Тогда
		ОбластьМакетаШапкаТаблицыНачислений = Макет.ПолучитьОбласть("ШапкаТаблицыСДетализациейПоПеням");
	Иначе
		ОбластьМакетаШапкаТаблицыНачислений = Макет.ПолучитьОбласть("ШапкаТаблицы");
	КонецЕсли;
	
	ТабличныйДокумент.ОбластьПечати = ТабличныйДокумент.Область(1, 1, ТабличныйДокумент.ВысотаТаблицы, ОбластьМакетаШапкаТаблицыНачислений.ШиринаТаблицы);
	
	// Присвоим имя для сохранения параметров печати табличного документа.
	ТабличныйДокумент.ИмяПараметровПечати = "ВыпискаПоЛицевомуСчетуКВП";
	
	ПоместитьВоВременноеХранилище(ТабличныйДокумент, АдресХранилища);
	
КонецПроцедуры

// Добавляет заголовок в отчет.
Процедура ЗаполнитьОбластьЗаголовкаОтчета(ТабличныйДокумент, Макет, ПараметрыОтчета)
	
	ОбластьМакета = Макет.ПолучитьОбласть("ШапкаОтчета");
	
	СтруктураЗаполнения = Новый Структура("ПредставлениеПериода", ПредставлениеПериода(ПараметрыОтчета.НачалоПериода, ПараметрыОтчета.КонецПериода));
	ОбластьМакета.Параметры.Заполнить(СтруктураЗаполнения);
	
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
КонецПроцедуры // ЗаполнитьОбластьЗаголовкаОтчета()

// Добавляет сведения о лицевом счете в отчет.
//
// Параметры:
//  ТабличныйДокумент	 - Табличный документ	 - документ отчета.
//  Макет				 - Табличный документ	 - макет отчета.
//  ПараметрыОтчета		 - Структура	 - настройки отчета.
//
Процедура ЗаполнитьСведенияОЛицевомСчете(ТабличныйДокумент, Макет, ПараметрыОтчета)
	
	ДатаНачала    = НачалоДня(ПараметрыОтчета.НачалоПериода);
	ДатаОкончания = КонецДня(ПараметрыОтчета.КонецПериода);
	
	// Получаем сведения по л/с, организации и участку.
	
	ДанныеПоЛС = СформироватьДанныеПоЛицевомуСчету(ПараметрыОтчета.ЛицевойСчет, ДатаОкончания, ПараметрыОтчета.НастройкиУчетнойПолитикиТСЖ, ПараметрыОтчета.Организация);
	
	СведенияОбОрганизации = УПЖКХ_ТиповыеМетодыСервер.СведенияОЮрФизЛице(ПараметрыОтчета.Организация, ДатаОкончания);
	ПредставлениеУчастка = УПЖКХ_ТиповыеМетодыВызовСервера.ОписаниеОрганизации(СведенияОбОрганизации, "ПолноеНаименование, ИНН");
	
	СтруктураПараметровШапкиОтчета = Новый Структура("ПредставлениеУчастка,АдресЛС,ДатаВыдачи,ЛицевойСчет,
													 |Собственник,КоличествоЗарегистрированных,ВременноПроживающих,ВременноОтсутствующих,
													 |ОбщаяПлощадь,ЖилаяПлощадь,ФормаСобственности,ДанныеОЛьготах");
	
	СтруктураПараметровШапкиОтчета.ПредставлениеУчастка         = СокрЛП(ПредставлениеУчастка);
	СтруктураПараметровШапкиОтчета.АдресЛС                      = ДанныеПоЛС.Адрес;
	СтруктураПараметровШапкиОтчета.ДатаВыдачи                   = ПараметрыОтчета.ДатаВыдачи;
	СтруктураПараметровШапкиОтчета.ЛицевойСчет                  = ПараметрыОтчета.ЛицевойСчет;
	СтруктураПараметровШапкиОтчета.Собственник                  = ДанныеПоЛС.Ответственный;
	СтруктураПараметровШапкиОтчета.КоличествоЗарегистрированных = ДанныеПоЛС.КоличествоЗарегистрированных;
	СтруктураПараметровШапкиОтчета.ВременноПроживающих          = ДанныеПоЛС.ВременноПроживающих;
	СтруктураПараметровШапкиОтчета.ВременноОтсутствующих        = ДанныеПоЛС.ВременноОтсутствующих;
	СтруктураПараметровШапкиОтчета.ОбщаяПлощадь                 = ДанныеПоЛС.ОбщаяПлощадь;
	СтруктураПараметровШапкиОтчета.ЖилаяПлощадь                 = ДанныеПоЛС.ЖилаяПлощадь;
	СтруктураПараметровШапкиОтчета.ДанныеОЛьготах               = ДанныеПоЛС.ДанныеОЛьготах;
	СтруктураПараметровШапкиОтчета.ФормаСобственности           = Неопределено;
	
	Если ЗначениеЗаполнено(ДанныеПоЛС.ТипСобственностиКвартиры) Тогда
		ФормаСобственности = "" + ДанныеПоЛС.ТипСобственностиКвартиры;
		Если ЗначениеЗаполнено(ДанныеПоЛС.ПодвидЧастнойСобственности) Тогда
			ФормаСобственности = ФормаСобственности + ", " + НРег(ДанныеПоЛС.ПодвидЧастнойСобственности);
		КонецЕсли;
		СтруктураПараметровШапкиОтчета.ФормаСобственности = ФормаСобственности;
	КонецЕсли;
	
	ОбластьМакета = Макет.ПолучитьОбласть("Адрес");
	ОбластьМакета.Параметры.Заполнить(СтруктураПараметровШапкиОтчета);
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	ОбластьМакета = Макет.ПолучитьОбласть("СведенияОЛицевомСчете");
	ОбластьМакета.Параметры.Заполнить(СтруктураПараметровШапкиОтчета);
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	// Вывод сведений о собственниках.
	ТаблицаСобственников = ДанныеПоЛС.ТаблицаСобственников;
	
	ВыводитьДоли = НЕ (ДанныеПоЛС.ТипСобственностиКвартиры     = Перечисления.УПЖКХ_ВидыСобственности.Частная
					 И ДанныеПоЛС.ПодвидЧастнойСобственности = Перечисления.УПЖКХ_ВидыЧастнойСобственности.Совместная);
	
	Если ТаблицаСобственников.Количество() > 0 Тогда
		ОбластьМакета = Макет.ПолучитьОбласть("ЗаголовокСведенияОСобственности");
		ТабличныйДокумент.Вывести(ОбластьМакета);
		Для Каждого СтрокаСобственника Из ТаблицаСобственников Цикл
			ОбластьМакета = Макет.ПолучитьОбласть("СведенияОСобственностиСтрока");
			Если НЕ ВыводитьДоли Тогда
				СтрокаСобственника.ДоляСобственностиПредст = "";
			КонецЕсли;
			ОбластьМакета.Параметры.Заполнить(СтрокаСобственника);
			ТабличныйДокумент.Вывести(ОбластьМакета);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьСведенияОЛицевомСчете()

// Добавляет сведения о начислениях в отчет.
//
// Параметры:
//  ТабличныйДокумент	 - Табличный документ	 - документ отчета.
//  Макет				 - Табличный документ	 - макет отчета.
//  ПараметрыОтчета		 - Структура	 - настройки отчета.
//  Запрос				 - Запрос	 - запрос данных.
//
Процедура ЗаполнитьТаблицуСведенийОНачислениях(ТабличныйДокумент, Макет, ПараметрыОтчета, Запрос)
	
	ДетализироватьСведенияПоПеням = ПараметрыОтчета.ДетализироватьСведенияПоПеням;
	
	Результат = Запрос.ВыполнитьПакет();
	
	ТаблицаРазмеровТарифов = Результат[8].Выгрузить();
	ТаблицаРезультат       = Результат[9].Выгрузить();
	
	// Вывод шапки таблицы.
	Если ДетализироватьСведенияПоПеням Тогда
		ОбластьМакета = Макет.ПолучитьОбласть("ШапкаТаблицыСДетализациейПоПеням");
	Иначе
		ОбластьМакета = Макет.ПолучитьОбласть("ШапкаТаблицы");
	КонецЕсли;
	
	Если ПараметрыОтчета.ВыводитьСведенияПоМесяцам И ПараметрыОтчета.ТаблицаПериодов.Количество() > 1 Тогда
		СтруктураЗаполнения = Новый Структура("ПредставлениеПериода", ПредставлениеПериода(ПараметрыОтчета.НачалоПериода, ПараметрыОтчета.КонецПериода));
		ОбластьМакета.Параметры.Заполнить(СтруктураЗаполнения);
	КонецЕсли;
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	// Получаем таблицу всех услуг.
	ТаблицаУслуг = ТаблицаРезультат.Скопировать(, "Услуга");
	ТаблицаУслуг.Свернуть("Услуга");
	
	СтрокаИтогов = ПолучитьСтрокуИтогов(ТаблицаРезультат, ПараметрыОтчета);
	
	СтруктураОтбораСтрокУслуг         = Новый Структура("Услуга");
	СтруктураОтбораСтрокУслугИТарифов = Новый Структура("Услуга, ВидТарифа");
	
	СтрокаФорматаРасхода = "ЧДЦ=" + Строка(ПараметрыОтчета.ТочностьОбъемаНачислений) + ";" + "ЧН=-; ЧГ=0;";
	
	Для каждого ТекУслуга из ТаблицаУслуг Цикл
		
		СтруктураОтбораСтрокУслуг.Услуга = ТекУслуга.Услуга;
		СтрокиУслуги = ТаблицаРезультат.НайтиСтроки(СтруктураОтбораСтрокУслуг);
		
		Для каждого ТекСтрокаУслуги из СтрокиУслуги Цикл
			
			Если ДетализироватьСведенияПоПеням Тогда
				ОбластьМакета = Макет.ПолучитьОбласть("СтрокаТаблицыСДетализациейПоПеням");
			Иначе
				ОбластьМакета = Макет.ПолучитьОбласть("СтрокаТаблицы");
			КонецЕсли;
			ОбластьМакета.Параметры.Заполнить(ТекСтрокаУслуги);
			
			// Детализация по видам тарифов.
			ТребуетсяДетализацияПоВидамТарифов = ТекСтрокаУслуги.КоличествоТарифов > 1;
			
			Если ТекСтрокаУслуги.ВидТарифа = Перечисления.КВП_ВидыТарифов.Дневной Тогда
				ОбластьМакета.Параметры.ВидУслуги = " - дн. начисление";
			ИначеЕсли ТекСтрокаУслуги.ВидТарифа = Перечисления.КВП_ВидыТарифов.Ночной Тогда
				ОбластьМакета.Параметры.ВидУслуги = " - нч. начисление";
			ИначеЕсли ТекСтрокаУслуги.ВидТарифа = Перечисления.КВП_ВидыТарифов.Пиковый Тогда
				ОбластьМакета.Параметры.ВидУслуги = " - пк. начисление";
			ИначеЕсли ТекСтрокаУслуги.ВидТарифа = Перечисления.КВП_ВидыТарифов.ПустаяСсылка() И ТребуетсяДетализацияПоВидамТарифов Тогда
				ОбластьМакета.Параметры.ВидУслуги = Строка(ОбластьМакета.Параметры.ВидУслуги) + ":";
			КонецЕсли;
			
			Если ТребуетсяДетализацияПоВидамТарифов Тогда
				ЗаполнитьЗначенияСвойств(СтруктураОтбораСтрокУслугИТарифов, ТекСтрокаУслуги);
				СтрокиРазмеровТарифов = ТаблицаРазмеровТарифов.НайтиСтроки(СтруктураОтбораСтрокУслугИТарифов);
			Иначе
				ЗаполнитьЗначенияСвойств(СтруктураОтбораСтрокУслуг, ТекСтрокаУслуги);
				СтрокиРазмеровТарифов = ТаблицаРазмеровТарифов.НайтиСтроки(СтруктураОтбораСтрокУслуг);
			КонецЕсли;
			
			СтрокаПредставленияТарифа = "";
			
			Если СтрокиРазмеровТарифов.Количество() = 0 Тогда
				СтрокаПредставленияТарифа = "-";
			Иначе
				Для каждого ТекСтрокаРазмераТарифа из СтрокиРазмеровТарифов Цикл
					
					Если ТекСтрокаРазмераТарифа.Тариф = 0 Тогда
						Продолжить;
					КонецЕсли;
					
					СтрокаПредставленияТарифа = СтрокаПредставленияТарифа + Формат(ТекСтрокаРазмераТарифа.Тариф, "ЧДЦ=2") + " / ";
					
				КонецЦикла;
				
				СтрокаПредставленияТарифа = Лев(СтрокаПредставленияТарифа, СтрДлина(СтрокаПредставленияТарифа) - 3);
				
			КонецЕсли;
			
			ОбластьМакета.Параметры.Тариф = СтрокаПредставленияТарифа;
			
			СписокФорматируемыхПараметров = Новый СписокЗначений;
			СписокФорматируемыхПараметров.Добавить("ОбъемУслуг");
			
			ОтформатироватьПараметрыОбласти(ОбластьМакета, СписокФорматируемыхПараметров, СтрокаФорматаРасхода);
			
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
		КонецЦикла;
	КонецЦикла;
	
	Если ДетализироватьСведенияПоПеням Тогда
		ОбластьМакета = Макет.ПолучитьОбласть("ПодвалТаблицыСДетализациейПоПеням");
	Иначе
		ОбластьМакета = Макет.ПолучитьОбласть("ПодвалТаблицы");
	КонецЕсли;
	ОбластьМакета.Параметры.Заполнить(СтрокаИтогов);
	
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
КонецПроцедуры // ЗаполнитьТаблицуСведенийОНачислениях()

// Добавляет подвал отчета.
//
// Параметры:
//  ТабличныйДокумент	 - Табличный документ	 - документ отчета.
//  Макет				 - Табличный документ	 - макет отчета.
//  ПараметрыОтчета		 - Структура	 - настройки отчета.
//  Запрос				 - Запрос	 - запрос данных.
//
Процедура ЗаполнитьОбластьПодвала(ТабличныйДокумент, Макет, ПараметрыОтчета, Запрос)
	
	// Подсчитываем задолженность.
	Если ПараметрыОтчета.ПараметрВыводаЗадолженности = 0 Тогда 
		ДатаЗадолженности = КонецДня(НачалоМесяца(ПараметрыОтчета.КонецПериода));
	ИначеЕсли ПараметрыОтчета.ПараметрВыводаЗадолженности = 1 Тогда 
		ДатаЗадолженности = КонецМесяца(ПараметрыОтчета.КонецПериода);
	ИначеЕсли ПараметрыОтчета.ПараметрВыводаЗадолженности = 2 Тогда
		ДатаЗадолженности = КонецДня(ПараметрыОтчета.ДатаВыдачи);
	КонецЕсли;
	
	СуммаДолга = 0;
	Если ПараметрыОтчета.ПараметрВыводаЗадолженности = 0
		ИЛИ ПараметрыОтчета.ПараметрВыводаЗадолженности = 1 Тогда
		
		Если ДатаЗадолженности < ПараметрыОтчета.НачалоПериода Тогда
			Запрос.УстановитьПараметр("ДатаНач", НачалоМесяца(ПараметрыОтчета.НачалоПериода));
			Запрос.УстановитьПараметр("ДатаКон", КонецДня(НачалоМесяца(ПараметрыОтчета.НачалоПериода)));
		Иначе
			Запрос.УстановитьПараметр("ДатаКон", ДатаЗадолженности);
		КонецЕсли;
		
		Результат = Запрос.ВыполнитьПакет();
		
		ТаблицаРезультат = Результат[9].Выгрузить();
		
		Если ТаблицаРезультат.Количество() = 0 Тогда
			СуммаДолга = 0;
		Иначе
			СтрокаИтогов = ПолучитьСтрокуИтогов(ТаблицаРезультат, ПараметрыОтчета);
			
			СуммаДолга = СтрокаИтогов.СуммаНачисленияКонечныйОстаток + ?(ПараметрыОтчета.ДетализироватьСведенияПоПеням, СтрокаИтогов.СуммаНачисленияКонечныйОстатокПени, 0);
		КонецЕсли;
		
	ИначеЕсли ПараметрыОтчета.ПараметрВыводаЗадолженности = 2 Тогда 
		
		СписокЛС = Новый СписокЗначений;
		СписокЛС.Добавить(ПараметрыОтчета.ЛицевойСчет);
		СтруктураДанныхДляЗапроса = Новый Структура("Организация, МинимальнаяСуммаЗадолженности, МинимальныйСрокЗадолженности, Здание", 
									ПараметрыОтчета.Организация, 0, 0, Неопределено);
		ТаблицаЗадолженности = УПЖКХ_РаботаСДолжниками.ПолучитьТаблицуДолжников(ДатаЗадолженности, СписокЛС, СтруктураДанныхДляЗапроса, ПараметрыОтчета.НастройкиУчетнойПолитикиТСЖ);
		
		Если НЕ ТаблицаЗадолженности.Количество() = 0 Тогда 
			СуммаДолга = ТаблицаЗадолженности.Итог("ОбщаяСуммаЗадолженности");
		КонецЕсли;
		
	КонецЕсли;
	
	Если СуммаДолга > 0 Тогда
		ЗаключениеПоДолгу = "Долг на " + Формат(ДатаЗадолженности, "ДФ=dd.MM.yyyy") + " составляет " + СуммаДолга + " руб.";
	Иначе
		ЗаключениеПоДолгу = "Долга на " + Формат(ДатаЗадолженности, "ДФ=dd.MM.yyyy") + " нет.";
	КонецЕсли;
	
	// Подвал с подписями.
	
	Руководители  = УПЖКХ_ТиповыеМетодыВызовСервера.ОтветственныеЛица(ПараметрыОтчета.Организация, ПараметрыОтчета.КонецПериода);
	ОбластьМакета = Макет.ПолучитьОбласть("ПодвалОтчета");
	
	СтруктураПараметровПодвалаОтчета = Новый Структура("ЗаключениеПоДолгу,Директор,ФИОДиректора,ФИОБухгалтера");
	СтруктураПараметровПодвалаОтчета.ЗаключениеПоДолгу = ЗаключениеПоДолгу;
	СтруктураПараметровПодвалаОтчета.Директор          = Руководители.РуководительДолжность;
	СтруктураПараметровПодвалаОтчета.ФИОДиректора      = Руководители.Руководитель;
	СтруктураПараметровПодвалаОтчета.ФИОБухгалтера     = Руководители.ГлавныйБухгалтер;
	
	ОбластьМакета.Параметры.Заполнить(СтруктураПараметровПодвалаОтчета);
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
КонецПроцедуры // ЗаполнитьОбластьПодвала()

// Возвращает сохраненную таблицу порядка услуг для вывода в отчете.
//
Функция ПолучитьПорядокУслуг()
	
	ТаблицаПорядокУслуг = ХранилищеОбщихНастроек.Загрузить("Отчет.КВП_ВыпискаПоЛицевомуСчету_ПорядокУслуг");
	
	Если НЕ ТипЗнч(ТаблицаПорядокУслуг) = Тип("ТаблицаЗначений") Тогда
		
		ТаблицаПорядокУслуг = Новый ТаблицаЗначений();
		ТаблицаПорядокУслуг.Колонки.Добавить("ВидУслуги", Новый ОписаниеТипов("СправочникСсылка.КВП_ВидыУслуг"));
		ТаблицаПорядокУслуг.Колонки.Добавить("Порядок",   Новый ОписаниеТипов("Число"));
		
	КонецЕсли;
	
	Возврат ТаблицаПорядокУслуг;
	
КонецФункции // ПолучитьПорядокУслуг()

// Возвращает текст запроса в зависимости от выбранного типа объектов.
Функция ПолучитьТекстЗапроса(ПараметрыОтчета)
	
	Если ПараметрыОтчета.ВариантОтбораУслуг = "формировать отчет по всем услугам" Тогда
		УсловиеНаУслугу = "ИСТИНА";
	Иначе
		Если ПараметрыОтчета.ВариантОтбораУслуг = "формировать отчет по указанным услугам" Тогда
			УсловиеНаУслугу = "Услуга В ИЕРАРХИИ (&СписокУслуг)";
		ИначеЕсли ПараметрыОтчета.ВариантОтбораУслуг = "формировать отчет, кроме указанных услуг" Тогда
			УсловиеНаУслугу = "НЕ Услуга В ИЕРАРХИИ (&СписокУслуг)";
		ИначеЕсли ПараметрыОтчета.ВариантОтбораУслуг = "формировать отчет по услугам кап. ремонта" Тогда
			УсловиеНаУслугу = "Услуга В (&СписокУслуг)";
		ИначеЕсли ПараметрыОтчета.ВариантОтбораУслуг = "формировать отчет по услугам, отличным от кап. ремонта" Тогда
			УсловиеНаУслугу = "НЕ Услуга В (&СписокУслуг)";
		КонецЕсли;
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПорядокУслуг.ВидУслуги КАК ВидУслуги,
	|	ПорядокУслуг.Порядок КАК Порядок
	|ПОМЕСТИТЬ втПорядокУслуг
	|ИЗ
	|	&ПорядокУслуг КАК ПорядокУслуг
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОстаткиИОбороты.Услуга КАК Услуга,
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОстаткиИОбороты.Услуга.СпособРасчета КАК СпособРасчетаУслуги,
	|	ЗНАЧЕНИЕ(Перечисление.КВП_ВидыТарифов.ПустаяСсылка) КАК ВидТарифа,
	|	0 КАК Тариф,
	|	0 КАК Количество,
	|	ВЫБОР
	|		КОГДА КВП_ВзаиморасчетыПоЛицевымСчетамОстаткиИОбороты.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.КВП_ВидыНачисленияОстатки.Пени)
	|			ТОГДА КВП_ВзаиморасчетыПоЛицевымСчетамОстаткиИОбороты.СуммаНачисленияНачальныйОстаток
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаНачисленияНачальныйОстатокПени,
	|	ВЫБОР
	|		КОГДА НЕ &ДетализироватьСведенияПоПеням
	|				ИЛИ &ДетализироватьСведенияПоПеням
	|					И НЕ КВП_ВзаиморасчетыПоЛицевымСчетамОстаткиИОбороты.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.КВП_ВидыНачисленияОстатки.Пени)
	|			ТОГДА КВП_ВзаиморасчетыПоЛицевымСчетамОстаткиИОбороты.СуммаНачисленияНачальныйОстаток
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаНачисленияНачальныйОстаток,
	|	ВЫБОР
	|		КОГДА КВП_ВзаиморасчетыПоЛицевымСчетамОстаткиИОбороты.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.КВП_ВидыНачисленияОстатки.Пени)
	|			ТОГДА КВП_ВзаиморасчетыПоЛицевымСчетамОстаткиИОбороты.СуммаНачисленияКонечныйОстаток
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаНачисленияКонечныйОстатокПени,
	|	ВЫБОР
	|		КОГДА НЕ &ДетализироватьСведенияПоПеням
	|				ИЛИ &ДетализироватьСведенияПоПеням
	|					И НЕ КВП_ВзаиморасчетыПоЛицевымСчетамОстаткиИОбороты.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.КВП_ВидыНачисленияОстатки.Пени)
	|			ТОГДА КВП_ВзаиморасчетыПоЛицевымСчетамОстаткиИОбороты.СуммаНачисленияКонечныйОстаток
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаНачисленияКонечныйОстаток,
	|	0 КАК СуммаПени,
	|	0 КАК СуммаНачисления,
	|	0 КАК СуммаЛьготы,
	|	0 КАК СуммаПерерасчетаПени,
	|	0 КАК СуммаПерерасчета,
	|	0 КАК СуммаОплатыПени,
	|	0 КАК СуммаОплаты
	|ПОМЕСТИТЬ втНачисленияИОстатки
	|ИЗ
	|	РегистрНакопления.КВП_ВзаиморасчетыПоЛицевымСчетам.ОстаткиИОбороты(
	|			&ДатаНач,
	|			&ДатаКон,
	|			Период,
	|			,
	|			Организация = &Организация
	|				И ЛицевойСчет = &ЛицевойСчет
	|				И &УсловиеНаУслугу) КАК КВП_ВзаиморасчетыПоЛицевымСчетамОстаткиИОбороты
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	УПЖКХ_НачисленияОбороты.Услуга,
	|	УПЖКХ_НачисленияОбороты.Услуга.СпособРасчета,
	|	ЕСТЬNULL(УПЖКХ_НачисленияОбороты.ВидТарифа, ЗНАЧЕНИЕ(Перечисление.КВП_ВидыТарифов.ПустаяСсылка)),
	|	УПЖКХ_НачисленияОбороты.Тариф,
	|	УПЖКХ_НачисленияОбороты.Количество,
	|	0,
	|	0,
	|	0,
	|	0,
	|	ВЫБОР
	|		КОГДА УПЖКХ_НачисленияОбороты.РазделУчета = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.Пени)
	|				И НЕ УПЖКХ_НачисленияОбороты.ВидНачисления В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Корректировка), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Оплата), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.ЗачетДолговИПереплат))
	|			ТОГДА УПЖКХ_НачисленияОбороты.СуммаНачисленияОборот
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА НЕ УПЖКХ_НачисленияОбороты.РазделУчета В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.Льготы), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.Пени))
	|				И НЕ УПЖКХ_НачисленияОбороты.ВидНачисления В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Корректировка), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.КорректировкаПриОтсутствииПоказанийПоИПУ), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.ПерерасчетНачисления), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Оплата), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.ЗачетДолговИПереплат))
	|			ТОГДА УПЖКХ_НачисленияОбороты.СуммаНачисленияОборот
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА УПЖКХ_НачисленияОбороты.РазделУчета = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.Льготы)
	|				И НЕ УПЖКХ_НачисленияОбороты.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Корректировка)
	|			ТОГДА -УПЖКХ_НачисленияОбороты.СуммаНачисленияОборот
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА УПЖКХ_НачисленияОбороты.РазделУчета = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.Пени)
	|				И УПЖКХ_НачисленияОбороты.ВидНачисления В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Корректировка), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.КорректировкаПриОтсутствииПоказанийПоИПУ), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.ПерерасчетНачисления))
	|			ТОГДА УПЖКХ_НачисленияОбороты.СуммаНачисленияОборот
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА НЕ &ДетализироватьСведенияПоПеням
	|					И УПЖКХ_НачисленияОбороты.ВидНачисления В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Корректировка), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.КорректировкаПриОтсутствииПоказанийПоИПУ), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.ПерерасчетНачисления))
	|				ИЛИ &ДетализироватьСведенияПоПеням
	|					И НЕ УПЖКХ_НачисленияОбороты.РазделУчета = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.Пени)
	|					И УПЖКХ_НачисленияОбороты.ВидНачисления В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Корректировка), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.КорректировкаПриОтсутствииПоказанийПоИПУ), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.ПерерасчетНачисления))
	|			ТОГДА УПЖКХ_НачисленияОбороты.СуммаНачисленияОборот
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА УПЖКХ_НачисленияОбороты.РазделУчета = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.Пени)
	|				И УПЖКХ_НачисленияОбороты.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Оплата)
	|			ТОГДА -УПЖКХ_НачисленияОбороты.СуммаНачисленияОборот
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА НЕ &ДетализироватьСведенияПоПеням
	|					И УПЖКХ_НачисленияОбороты.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Оплата)
	|				ИЛИ &ДетализироватьСведенияПоПеням
	|					И НЕ УПЖКХ_НачисленияОбороты.РазделУчета = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.Пени)
	|					И УПЖКХ_НачисленияОбороты.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Оплата)
	|			ТОГДА -УПЖКХ_НачисленияОбороты.СуммаНачисленияОборот
	|		ИНАЧЕ 0
	|	КОНЕЦ
	|ИЗ
	|	РегистрНакопления.УПЖКХ_Начисления.Обороты(
	|			&ДатаНач,
	|			&ДатаКон,
	|			Регистратор,
	|			Организация = &Организация
	|				И ЛицевойСчет = &ЛицевойСчет
	|				И &УсловиеНаУслугу) КАК УПЖКХ_НачисленияОбороты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втНачисленияИОстатки.Услуга КАК Услуга,
	|	втНачисленияИОстатки.Услуга.ВидУслуги КАК ВидУслуги,
	|	втНачисленияИОстатки.Услуга.ВидУслуги.ЕдиницаИзмерения КАК ЕдИзм,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА НЕ втНачисленияИОстатки.СпособРасчетаУслуги = ЗНАЧЕНИЕ(Перечисление.КВП_СпособыРасчета.ПоПоказаниямСчетчикаИНорме)
	|					И НЕ втНачисленияИОстатки.СпособРасчетаУслуги = ЗНАЧЕНИЕ(Перечисление.КВП_СпособыРасчета.СОграничениемПоНормам)
	|					И НЕ втНачисленияИОстатки.СпособРасчетаУслуги = ЗНАЧЕНИЕ(Перечисление.КВП_СпособыРасчета.ПоПоказаниямСчетчика)
	|					И НЕ втНачисленияИОстатки.СпособРасчетаУслуги = ЗНАЧЕНИЕ(Перечисление.КВП_СпособыРасчета.ФиксированноеНачисление)
	|					И НЕ втНачисленияИОстатки.СпособРасчетаУслуги = ЗНАЧЕНИЕ(Перечисление.КВП_СпособыРасчета.ПоНормамПотребления)
	|					И НЕ втНачисленияИОстатки.СпособРасчетаУслуги = ЗНАЧЕНИЕ(Перечисление.КВП_СпособыРасчета.СОграничениемПоНормам)
	|					И НЕ втНачисленияИОстатки.СпособРасчетаУслуги = ЗНАЧЕНИЕ(Перечисление.КВП_СпособыРасчета.КомиссияБанка)
	|				ТОГДА втНачисленияИОстатки.Количество
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ОбъемУслугДляСвертки,
	|	СУММА(втНачисленияИОстатки.Количество) КАК Количество,
	|	СУММА(втНачисленияИОстатки.СуммаНачисленияНачальныйОстаток) КАК СуммаНачисленияНачальныйОстаток,
	|	СУММА(втНачисленияИОстатки.СуммаНачисленияКонечныйОстаток) КАК СуммаНачисленияКонечныйОстаток,
	|	СУММА(втНачисленияИОстатки.СуммаНачисленияНачальныйОстатокПени) КАК СуммаНачисленияНачальныйОстатокПени,
	|	СУММА(втНачисленияИОстатки.СуммаНачисленияКонечныйОстатокПени) КАК СуммаНачисленияКонечныйОстатокПени,
	|	СУММА(втНачисленияИОстатки.СуммаНачисления) КАК СуммаНачисления,
	|	СУММА(втНачисленияИОстатки.СуммаЛьготы) КАК СуммаЛьготы,
	|	СУММА(втНачисленияИОстатки.СуммаПерерасчетаПени) КАК СуммаПерерасчетаПени,
	|	СУММА(втНачисленияИОстатки.СуммаПерерасчета) КАК СуммаПерерасчета,
	|	СУММА(втНачисленияИОстатки.СуммаОплаты) КАК СуммаОплаты,
	|	СУММА(втНачисленияИОстатки.СуммаОплатыПени) КАК СуммаОплатыПени,
	|	СУММА(втНачисленияИОстатки.СуммаНачисленияНачальныйОстаток - втНачисленияИОстатки.СуммаОплаты) КАК СуммаДолга,
	|	СУММА(втНачисленияИОстатки.СуммаПени) КАК СуммаПени
	|ПОМЕСТИТЬ втОсновныеСтрокиНачислений
	|ИЗ
	|	втНачисленияИОстатки КАК втНачисленияИОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	втНачисленияИОстатки.Услуга,
	|	втНачисленияИОстатки.Услуга.ВидУслуги,
	|	втНачисленияИОстатки.Услуга.ВидУслуги.ЕдиницаИзмерения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втНачисленияИОстатки.Услуга КАК Услуга,
	|	ВЫБОР
	|		КОГДА втНачисленияИОстатки.ВидТарифа = ЗНАЧЕНИЕ(Перечисление.КВП_ВидыТарифов.Общий)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.КВП_ВидыТарифов.Дневной)
	|		ИНАЧЕ втНачисленияИОстатки.ВидТарифа
	|	КОНЕЦ КАК ВидТарифа,
	|	втНачисленияИОстатки.Услуга.ВидУслуги КАК ВидУслуги,
	|	втНачисленияИОстатки.Услуга.ВидУслуги.ЕдиницаИзмерения КАК ЕдИзм,
	|	СУММА(втНачисленияИОстатки.Количество) КАК Количество,
	|	СУММА(втНачисленияИОстатки.СуммаНачисленияНачальныйОстаток) КАК СуммаНачисленияНачальныйОстаток,
	|	СУММА(втНачисленияИОстатки.СуммаНачисленияКонечныйОстаток) КАК СуммаНачисленияКонечныйОстаток,
	|	СУММА(втНачисленияИОстатки.СуммаНачисленияНачальныйОстатокПени) КАК СуммаНачисленияНачальныйОстатокПени,
	|	СУММА(втНачисленияИОстатки.СуммаНачисленияКонечныйОстатокПени) КАК СуммаНачисленияКонечныйОстатокПени,
	|	СУММА(втНачисленияИОстатки.СуммаНачисления) КАК СуммаНачисления,
	|	СУММА(втНачисленияИОстатки.СуммаЛьготы) КАК СуммаЛьготы,
	|	СУММА(втНачисленияИОстатки.СуммаПерерасчетаПени) КАК СуммаПерерасчетаПени,
	|	СУММА(втНачисленияИОстатки.СуммаПерерасчета) КАК СуммаПерерасчета,
	|	СУММА(втНачисленияИОстатки.СуммаОплаты) КАК СуммаОплаты,
	|	СУММА(втНачисленияИОстатки.СуммаОплатыПени) КАК СуммаОплатыПени,
	|	СУММА(втНачисленияИОстатки.СуммаНачисленияНачальныйОстаток - втНачисленияИОстатки.СуммаОплаты) КАК СуммаДолга,
	|	СУММА(втНачисленияИОстатки.СуммаПени) КАК СуммаПени
	|ПОМЕСТИТЬ втСтрокиДетализацииНачислений
	|ИЗ
	|	втНачисленияИОстатки КАК втНачисленияИОстатки
	|ГДЕ
	|	НЕ втНачисленияИОстатки.ВидТарифа = ЗНАЧЕНИЕ(Перечисление.КВП_ВидыТарифов.ПустаяСсылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	втНачисленияИОстатки.Услуга,
	|	ВЫБОР
	|		КОГДА втНачисленияИОстатки.ВидТарифа = ЗНАЧЕНИЕ(Перечисление.КВП_ВидыТарифов.Общий)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.КВП_ВидыТарифов.Дневной)
	|		ИНАЧЕ втНачисленияИОстатки.ВидТарифа
	|	КОНЕЦ,
	|	втНачисленияИОстатки.Услуга.ВидУслуги,
	|	втНачисленияИОстатки.Услуга.ВидУслуги.ЕдиницаИзмерения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_НачисленныеЛьготыОбороты.Услуга КАК Услуга,
	|	КВП_НачисленныеЛьготыОбороты.СуммаНачисленияОборот КАК СуммаНачисленияОборот
	|ПОМЕСТИТЬ втНачисленныеЛьготы
	|ИЗ
	|	РегистрНакопления.КВП_НачисленныеЛьготы.Обороты(
	|			&ДатаНач,
	|			&ДатаКон,
	|			Период,
	|			Организация = &Организация
	|				И ЛицевойСчет = &ЛицевойСчет
	|				И &УсловиеНаУслугу) КАК КВП_НачисленныеЛьготыОбороты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втТаблицаНачислений.Услуга КАК Услуга,
	|	втТаблицаНачислений.ВидУслуги КАК ВидУслуги,
	|	ЗНАЧЕНИЕ(Перечисление.КВП_ВидыТарифов.ПустаяСсылка) КАК ВидТарифа,
	|	втТаблицаНачислений.ЕдИзм КАК ЕдИзм,
	|	ВЫБОР
	|		КОГДА втТаблицаНачислений.ОбъемУслугДляСвертки = 0
	|			ТОГДА втТаблицаНачислений.Количество
	|		ИНАЧЕ втТаблицаНачислений.ОбъемУслугДляСвертки
	|	КОНЕЦ КАК Количество,
	|	втТаблицаНачислений.СуммаНачисленияНачальныйОстаток КАК СуммаНачисленияНачальныйОстаток,
	|	втТаблицаНачислений.СуммаНачисленияКонечныйОстаток КАК СуммаНачисленияКонечныйОстаток,
	|	втТаблицаНачислений.СуммаНачисленияНачальныйОстатокПени КАК СуммаНачисленияНачальныйОстатокПени,
	|	втТаблицаНачислений.СуммаНачисленияКонечныйОстатокПени КАК СуммаНачисленияКонечныйОстатокПени,
	|	втТаблицаНачислений.СуммаНачисления КАК СуммаНачисления,
	|	втТаблицаНачислений.СуммаПени КАК СуммаПени,
	|	ВЫБОР
	|		КОГДА втТаблицаНачислений.СуммаЛьготы = 0
	|			ТОГДА ЕСТЬNULL(втНачисленныеЛьготы.СуммаНачисленияОборот, 0)
	|		ИНАЧЕ втТаблицаНачислений.СуммаЛьготы
	|	КОНЕЦ КАК СуммаЛьготы,
	|	втТаблицаНачислений.СуммаПерерасчета КАК СуммаПерерасчета,
	|	втТаблицаНачислений.СуммаПерерасчетаПени КАК СуммаПерерасчетаПени,
	|	втТаблицаНачислений.СуммаОплаты КАК СуммаОплаты,
	|	втТаблицаНачислений.СуммаОплатыПени КАК СуммаОплатыПени,
	|	втТаблицаНачислений.СуммаДолга КАК СуммаДолга,
	|	0 КАК ПорядокТарифа
	|ПОМЕСТИТЬ втТаблицаНачисленийБезПорядкаУКслуг
	|ИЗ
	|	втОсновныеСтрокиНачислений КАК втТаблицаНачислений
	|		ЛЕВОЕ СОЕДИНЕНИЕ втНачисленныеЛьготы КАК втНачисленныеЛьготы
	|		ПО втТаблицаНачислений.Услуга = втНачисленныеЛьготы.Услуга
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	втТаблицаНачислений.Услуга,
	|	втТаблицаНачислений.ВидУслуги,
	|	втТаблицаНачислений.ВидТарифа,
	|	втТаблицаНачислений.ЕдИзм,
	|	втТаблицаНачислений.Количество,
	|	втТаблицаНачислений.СуммаНачисленияНачальныйОстаток,
	|	втТаблицаНачислений.СуммаНачисленияКонечныйОстаток,
	|	втТаблицаНачислений.СуммаНачисленияНачальныйОстатокПени,
	|	втТаблицаНачислений.СуммаНачисленияКонечныйОстатокПени,
	|	втТаблицаНачислений.СуммаНачисления,
	|	втТаблицаНачислений.СуммаПени,
	|	0,
	|	втТаблицаНачислений.СуммаПерерасчета,
	|	втТаблицаНачислений.СуммаПерерасчетаПени,
	|	втТаблицаНачислений.СуммаОплаты,
	|	втТаблицаНачислений.СуммаОплатыПени,
	|	втТаблицаНачислений.СуммаДолга,
	|	ВЫБОР
	|		КОГДА втТаблицаНачислений.ВидТарифа = ЗНАЧЕНИЕ(Перечисление.КВП_ВидыТарифов.ПустаяСсылка)
	|			ТОГДА 0
	|		ИНАЧЕ ВЫБОР
	|				КОГДА втТаблицаНачислений.ВидТарифа = ЗНАЧЕНИЕ(Перечисление.КВП_ВидыТарифов.Дневной)
	|					ТОГДА 1
	|				ИНАЧЕ ВЫБОР
	|						КОГДА втТаблицаНачислений.ВидТарифа = ЗНАЧЕНИЕ(Перечисление.КВП_ВидыТарифов.Ночной)
	|							ТОГДА 2
	|						ИНАЧЕ 3
	|					КОНЕЦ
	|			КОНЕЦ
	|	КОНЕЦ
	|ИЗ
	|	втСтрокиДетализацииНачислений КАК втТаблицаНачислений
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	втТаблицаНачисленийБезПорядкаУКслуг.Услуга КАК Услуга,
	|	втТаблицаНачисленийБезПорядкаУКслуг.ВидТарифа КАК ВидТарифа
	|ПОМЕСТИТЬ втВидыТарифовУслуг
	|ИЗ
	|	втТаблицаНачисленийБезПорядкаУКслуг КАК втТаблицаНачисленийБезПорядкаУКслуг
	|ГДЕ
	|	НЕ втТаблицаНачисленийБезПорядкаУКслуг.ВидТарифа = ЗНАЧЕНИЕ(Перечисление.КВП_ВидыТарифов.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втВидыТарифовУслуг.Услуга КАК Услуга,
	|	КОЛИЧЕСТВО(втВидыТарифовУслуг.ВидТарифа) КАК КоличествоТарифов
	|ПОМЕСТИТЬ втКоличествоТарифовУслуг
	|ИЗ
	|	втВидыТарифовУслуг КАК втВидыТарифовУслуг
	|
	|СГРУППИРОВАТЬ ПО
	|	втВидыТарифовУслуг.Услуга
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	втНачисленияИОстатки.Услуга КАК Услуга,
	|	ВЫБОР
	|		КОГДА втНачисленияИОстатки.ВидТарифа = ЗНАЧЕНИЕ(Перечисление.КВП_ВидыТарифов.Общий)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.КВП_ВидыТарифов.Дневной)
	|		ИНАЧЕ втНачисленияИОстатки.ВидТарифа
	|	КОНЕЦ КАК ВидТарифа,
	|	втНачисленияИОстатки.Тариф КАК Тариф
	|ИЗ
	|	втНачисленияИОстатки КАК втНачисленияИОстатки
	|ГДЕ
	|	НЕ втНачисленияИОстатки.ВидТарифа = ЗНАЧЕНИЕ(Перечисление.КВП_ВидыТарифов.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втТаблицаНачисленийБезПорядкаУКслуг.Услуга КАК Услуга,
	|	втТаблицаНачисленийБезПорядкаУКслуг.ВидУслуги КАК ВидУслуги,
	|	ВЫБОР
	|		КОГДА втКоличествоТарифовУслуг.КоличествоТарифов = 1
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.КВП_ВидыТарифов.ПустаяСсылка)
	|		ИНАЧЕ втТаблицаНачисленийБезПорядкаУКслуг.ВидТарифа
	|	КОНЕЦ КАК ВидТарифа,
	|	втТаблицаНачисленийБезПорядкаУКслуг.ЕдИзм КАК ЕдИзм,
	|	ВЫБОР
	|		КОГДА втКоличествоТарифовУслуг.КоличествоТарифов = 1
	|			ТОГДА 0
	|		ИНАЧЕ втТаблицаНачисленийБезПорядкаУКслуг.ПорядокТарифа
	|	КОНЕЦ КАК ПорядокТарифа,
	|	ЕСТЬNULL(втКоличествоТарифовУслуг.КоличествоТарифов, 1) КАК КоличествоТарифов,
	|	СУММА(втТаблицаНачисленийБезПорядкаУКслуг.Количество) КАК ОбъемУслуг,
	|	СУММА(втТаблицаНачисленийБезПорядкаУКслуг.СуммаНачисленияНачальныйОстаток) КАК СуммаНачисленияНачальныйОстаток,
	|	СУММА(втТаблицаНачисленийБезПорядкаУКслуг.СуммаНачисленияКонечныйОстаток) КАК СуммаНачисленияКонечныйОстаток,
	|	СУММА(втТаблицаНачисленийБезПорядкаУКслуг.СуммаНачисленияНачальныйОстатокПени) КАК СуммаНачисленияНачальныйОстатокПени,
	|	СУММА(втТаблицаНачисленийБезПорядкаУКслуг.СуммаНачисленияКонечныйОстатокПени) КАК СуммаНачисленияКонечныйОстатокПени,
	|	СУММА(втТаблицаНачисленийБезПорядкаУКслуг.СуммаНачисления) КАК СуммаНачисления,
	|	СУММА(втТаблицаНачисленийБезПорядкаУКслуг.СуммаПени) КАК СуммаПени,
	|	СУММА(втТаблицаНачисленийБезПорядкаУКслуг.СуммаЛьготы) КАК СуммаЛьготы,
	|	СУММА(втТаблицаНачисленийБезПорядкаУКслуг.СуммаПерерасчета) КАК СуммаПерерасчета,
	|	СУММА(втТаблицаНачисленийБезПорядкаУКслуг.СуммаПерерасчетаПени) КАК СуммаПерерасчетаПени,
	|	СУММА(втТаблицаНачисленийБезПорядкаУКслуг.СуммаОплаты) КАК СуммаОплаты,
	|	СУММА(втТаблицаНачисленийБезПорядкаУКслуг.СуммаОплатыПени) КАК СуммаОплатыПени,
	|	СУММА(втТаблицаНачисленийБезПорядкаУКслуг.СуммаДолга) КАК СуммаДолга,
	|	ЕСТЬNULL(втПорядокУслуг.Порядок, 1024) КАК Порядок
	|ИЗ
	|	втТаблицаНачисленийБезПорядкаУКслуг КАК втТаблицаНачисленийБезПорядкаУКслуг
	|		ЛЕВОЕ СОЕДИНЕНИЕ втПорядокУслуг КАК втПорядокУслуг
	|		ПО втТаблицаНачисленийБезПорядкаУКслуг.ВидУслуги = втПорядокУслуг.ВидУслуги
	|		ЛЕВОЕ СОЕДИНЕНИЕ втКоличествоТарифовУслуг КАК втКоличествоТарифовУслуг
	|		ПО втТаблицаНачисленийБезПорядкаУКслуг.Услуга = втКоличествоТарифовУслуг.Услуга
	|ГДЕ
	|	НЕ(ЕСТЬNULL(втКоличествоТарифовУслуг.КоличествоТарифов, 1) = 1
	|				И НЕ втТаблицаНачисленийБезПорядкаУКслуг.ВидТарифа = ЗНАЧЕНИЕ(Перечисление.КВП_ВидыТарифов.ПустаяСсылка))
	|
	|СГРУППИРОВАТЬ ПО
	|	втТаблицаНачисленийБезПорядкаУКслуг.Услуга,
	|	втТаблицаНачисленийБезПорядкаУКслуг.ВидУслуги,
	|	ВЫБОР
	|		КОГДА втКоличествоТарифовУслуг.КоличествоТарифов = 1
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.КВП_ВидыТарифов.ПустаяСсылка)
	|		ИНАЧЕ втТаблицаНачисленийБезПорядкаУКслуг.ВидТарифа
	|	КОНЕЦ,
	|	втТаблицаНачисленийБезПорядкаУКслуг.ЕдИзм,
	|	ЕСТЬNULL(втКоличествоТарифовУслуг.КоличествоТарифов, 1),
	|	ЕСТЬNULL(втПорядокУслуг.Порядок, 1024),
	|	ВЫБОР
	|		КОГДА втКоличествоТарифовУслуг.КоличествоТарифов = 1
	|			ТОГДА 0
	|		ИНАЧЕ втТаблицаНачисленийБезПорядкаУКслуг.ПорядокТарифа
	|	КОНЕЦ
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок,
	|	ПорядокТарифа";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеНаУслугу", УсловиеНаУслугу);
	
	Возврат ТекстЗапроса;
	
КонецФункции // ПолучитьТекстЗапроса()

// Формирует строку итогов по таблице начислений.
//
Функция ПолучитьСтрокуИтогов(ТаблицаНачислений, ПараметрыОтчета)
	
	ДетализироватьСведенияПоПеням = ПараметрыОтчета.ДетализироватьСведенияПоПеням;
	
	// Для получения итогов нужны только основные строки. Строки детализации учитывать нельзя.
	ОсновныеСтроки = ТаблицаНачислений.НайтиСтроки(Новый Структура("ВидТарифа", Перечисления.КВП_ВидыТарифов.ПустаяСсылка()));
	
	Если ДетализироватьСведенияПоПеням Тогда
		ТаблицаИтогов = ТаблицаНачислений.Скопировать(ОсновныеСтроки, "СуммаДолга, СуммаЛьготы, СуммаНачисления, СуммаНачисленияКонечныйОстаток, СуммаНачисленияКонечныйОстатокПени, СуммаНачисленияНачальныйОстаток, СуммаНачисленияНачальныйОстатокПени, СуммаОплаты, СуммаОплатыПени, СуммаПени, СуммаПерерасчета, СуммаПерерасчетаПени");
		ТаблицаИтогов.Свернуть(, "СуммаДолга, СуммаЛьготы, СуммаНачисления, СуммаНачисленияКонечныйОстаток, СуммаНачисленияКонечныйОстатокПени, СуммаНачисленияНачальныйОстаток, СуммаНачисленияНачальныйОстатокПени, СуммаОплаты, СуммаОплатыПени, СуммаПени, СуммаПерерасчета, СуммаПерерасчетаПени");
	Иначе
		ТаблицаИтогов = ТаблицаНачислений.Скопировать(ОсновныеСтроки, "СуммаДолга, СуммаЛьготы, СуммаНачисления, СуммаНачисленияКонечныйОстаток, СуммаНачисленияНачальныйОстаток, СуммаОплаты, СуммаПени, СуммаПерерасчета");
		ТаблицаИтогов.Свернуть(, "СуммаДолга, СуммаЛьготы, СуммаНачисления, СуммаНачисленияКонечныйОстаток, СуммаНачисленияНачальныйОстаток, СуммаОплаты, СуммаПени, СуммаПерерасчета");
	КонецЕсли;
	
	Если ТаблицаИтогов.Количество() > 0 Тогда
		Возврат ТаблицаИтогов[0];
	Иначе
		Если ДетализироватьСведенияПоПеням Тогда
			Возврат Новый Структура("СуммаДолга, СуммаЛьготы, СуммаНачисления, СуммаНачисленияКонечныйОстаток, СуммаНачисленияКонечныйОстатокПени, СуммаНачисленияНачальныйОстаток, СуммаНачисленияНачальныйОстатокПени, СуммаОплаты, СуммаОплатыПени, СуммаПени, СуммаПерерасчета, СуммаПерерасчетаПени");
		Иначе
			Возврат Новый Структура("СуммаДолга, СуммаЛьготы, СуммаНачисления, СуммаНачисленияКонечныйОстаток, СуммаНачисленияНачальныйОстаток, СуммаОплаты, СуммаПени, СуммаПерерасчета");
		КонецЕсли;
	КонецЕсли;
	
КонецФункции // ПолучитьСтрокуИтогов()

// Проверяет наличие реквизита объекта.
//
// Параметры:
//   Объект - объект.
//   ИмяРеквизита - Имя проверяемого реквизита объекта.
//
Функция ЕстьРеквизитОбъекта(Объект, ИмяРеквизита)
	
	КлючУникальности   = Новый УникальныйИдентификатор;
	СтруктураРеквизита = Новый Структура(ИмяРеквизита, КлючУникальности);
	
	ЗаполнитьЗначенияСвойств(СтруктураРеквизита, Объект);
	
	Возврат СтруктураРеквизита[ИмяРеквизита] <> КлючУникальности;
	
КонецФункции // ЕстьРеквизитОбъекта()

// Форматирует параметры области в соответствии с заданным форматом.
Процедура ОтформатироватьПараметрыОбласти(Область, СписокФорматируемыхПараметров, СтрокаФормата) Экспорт
	
	Если Область.Параметры.Количество() > 0 Тогда
		Для Каждого ФорматируемыйПараметр Из СписокФорматируемыхПараметров Цикл
			Если ЕстьРеквизитОбъекта(Область.Параметры, ФорматируемыйПараметр.Значение) Тогда
				Область.Параметры[ФорматируемыйПараметр.Значение] = Формат(Область.Параметры[ФорматируемыйПараметр.Значение], СтрокаФормата);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры // ОтформатироватьПараметрыОбласти()

#КонецОбласти 

#КонецЕсли