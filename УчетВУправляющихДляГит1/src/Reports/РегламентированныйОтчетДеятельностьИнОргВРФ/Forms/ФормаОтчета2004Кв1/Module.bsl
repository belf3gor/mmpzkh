&НаСервере
Перем мОбъектОтчета;

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	// Обход ошибки платформы Параметр сеанса отсутствует или удален
	ТабличныйДокумент.Очистить();
	
	СформироватьСтруктуруРеквизитовФормы();
	
	СтруктураРеквизитовФормы.СписокПечатаемыхЛистов = Новый СписокЗначений; 
	
	СтруктураРеквизитовФормы.мСоставПоказателей = "СоставПоказателей2004Кв1";
	
	СтруктураРеквизитовФормы.мОписаниеТиповЧислоЕ   = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(14, 2));
	
	// ОПИСАНИЕ ПАРАМЕТРОВ МНОГОСТРОЧНЫХ ГРУПП
	// Идентификаторы многострочных групп
	СтруктураРеквизитовФормы.мИдГруппы1 = "П0000100010";	
	СтруктураРеквизитовФормы.мИдГруппы2 = "П0000100020";
	СтруктураРеквизитовФормы.мИдГруппы3 = "П0000100030";
	СтруктураРеквизитовФормы.мИдГруппы4 = "П0000100031";
	
	СтруктураРеквизитовФормы.мИдГруппы5 = "П0000200010";
	СтруктураРеквизитовФормы.мИдГруппы6 = "П0000200020";
	СтруктураРеквизитовФормы.мИдГруппы7 = "П0000200030";	
	СтруктураРеквизитовФормы.мИдГруппы8 = "П0000200040";
	
	СтруктураРеквизитовФормы.мИдГруппы9  = "П0000300010";
	СтруктураРеквизитовФормы.мИдГруппы10 = "П0000300020";
	СтруктураРеквизитовФормы.мИдГруппы11 = "П0000300030";
	СтруктураРеквизитовФормы.мИдГруппы12 = "П0000300040";
	
	СтруктураРеквизитовФормы.мИдГруппы13 = "П0000400010";
	
	КолИсхСтрокИдГруппы1 = 1;
	КолИсхСтрокИдГруппы2 = 1;
	КолИсхСтрокИдГруппы3 = 1;
	КолИсхСтрокИдГруппы4 = 1;

	КолИсхСтрокИдГруппы5 = 1;
	КолИсхСтрокИдГруппы6 = 1;
	КолИсхСтрокИдГруппы7 = 1;
	КолИсхСтрокИдГруппы8 = 1;

	КолИсхСтрокИдГруппы9  = 1;
	КолИсхСтрокИдГруппы10 = 1;
	КолИсхСтрокИдГруппы11 = 1;
	КолИсхСтрокИдГруппы12 = 1;

	КолИсхСтрокИдГруппы13 = 1;
	
	
	КолКолонокИдГруппы1 = 1;
	КолКолонокИдГруппы2 = 1;
	КолКолонокИдГруппы3 = 8;
	КолКолонокИдГруппы4 = 8;
	
	КолКолонокИдГруппы5 = 1;
	КолКолонокИдГруппы6 = 2;
	КолКолонокИдГруппы7 = 2;
	КолКолонокИдГруппы8 = 2;
	
	КолКолонокИдГруппы9  = 1;
	КолКолонокИдГруппы10 = 1;
	КолКолонокИдГруппы11 = 4;
	КолКолонокИдГруппы12 = 1;
	
	КолКолонокИдГруппы13 = 3;
	
	СтруктураДанныхТитульный = Новый Структура;
	СтруктураДанныхРаздел1_1    = Новый Структура;
	СтруктураДанныхРаздел1_2    = Новый Структура;
	СтруктураДанныхРаздел1_3    = Новый Структура;
	СтруктураДанныхРаздел1_4    = Новый Структура;
	
	ИнициализацияМногостраничныхРазделов();
		
	// структура многострочных разделов формы
	мСтруктураМногострочныхРазделов = Новый Структура;
	мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы1, СтруктураРеквизитовФормы.мИдГруппы1);
	мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы2, СтруктураРеквизитовФормы.мИдГруппы2);
	мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы3, СтруктураРеквизитовФормы.мИдГруппы3);
	мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы4, СтруктураРеквизитовФормы.мИдГруппы4);
	мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы5, СтруктураРеквизитовФормы.мИдГруппы5);
	мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы6, СтруктураРеквизитовФормы.мИдГруппы6);
	мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы7, СтруктураРеквизитовФормы.мИдГруппы7);
	мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы8, СтруктураРеквизитовФормы.мИдГруппы8);
	мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы9, СтруктураРеквизитовФормы.мИдГруппы9);
	мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы10, СтруктураРеквизитовФормы.мИдГруппы10);
	мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы11, СтруктураРеквизитовФормы.мИдГруппы11);
	мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы12, СтруктураРеквизитовФормы.мИдГруппы12);
	мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы13, СтруктураРеквизитовФормы.мИдГруппы13);
                                       
	// Структура содержит данные дополнительных страниц
    мСтруктураМногостраничныхРазделов = Новый Структура;
	мСтруктураМногостраничныхРазделов.Вставить("ФизЛица", "ТаблицаСтраницыФизЛица");
	                                          	
	// Структура исходных строк (минимального кол-ва) многострочных разделов формы
	мСтруктураИсхКолвоСтрокРазделов = Новый Структура;
	мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы1, КолИсхСтрокИдГруппы1);
	мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы2, КолИсхСтрокИдГруппы2);
	мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы3, КолИсхСтрокИдГруппы3);
	мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы4, КолИсхСтрокИдГруппы4);
	мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы5, КолИсхСтрокИдГруппы5);
	мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы6, КолИсхСтрокИдГруппы6);
	мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы7, КолИсхСтрокИдГруппы7);
	мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы8, КолИсхСтрокИдГруппы8);
	мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы9, КолИсхСтрокИдГруппы9);
	мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы10, КолИсхСтрокИдГруппы10);
	мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы11, КолИсхСтрокИдГруппы11);
	мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы12, КолИсхСтрокИдГруппы12);
	мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы13, КолИсхСтрокИдГруппы13);
	
	мСтруктураКолвоКолонокРазделов = Новый Структура;
	мСтруктураКолвоКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы1, КолКолонокИдГруппы1);
	мСтруктураКолвоКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы2, КолКолонокИдГруппы2);
	мСтруктураКолвоКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы3, КолКолонокИдГруппы3);
	мСтруктураКолвоКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы4, КолКолонокИдГруппы4);
	мСтруктураКолвоКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы5, КолКолонокИдГруппы5);
	мСтруктураКолвоКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы6, КолКолонокИдГруппы6);
	мСтруктураКолвоКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы7, КолКолонокИдГруппы7);
	мСтруктураКолвоКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы8, КолКолонокИдГруппы8);
	мСтруктураКолвоКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы9, КолКолонокИдГруппы9);
	мСтруктураКолвоКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы10, КолКолонокИдГруппы10);
	мСтруктураКолвоКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы11, КолКолонокИдГруппы11);
	мСтруктураКолвоКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы12, КолКолонокИдГруппы12);
	мСтруктураКолвоКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы13, КолКолонокИдГруппы13);
	
	СтруктураРеквизитовФормы.мСоответствияМнгЧ = Новый Соответствие;
	СтруктураРеквизитовФормы.мСоответствияМнгЧ.Вставить(СтруктураРеквизитовФормы.мИдГруппы1, "МногострочнаяЧасть1");
	СтруктураРеквизитовФормы.мСоответствияМнгЧ.Вставить(СтруктураРеквизитовФормы.мИдГруппы2, "МногострочнаяЧасть2");
	СтруктураРеквизитовФормы.мСоответствияМнгЧ.Вставить(СтруктураРеквизитовФормы.мИдГруппы3, "МногострочнаяЧасть3");
	СтруктураРеквизитовФормы.мСоответствияМнгЧ.Вставить(СтруктураРеквизитовФормы.мИдГруппы4, "МногострочнаяЧасть4");
	СтруктураРеквизитовФормы.мСоответствияМнгЧ.Вставить(СтруктураРеквизитовФормы.мИдГруппы5, "МногострочнаяЧасть1");
	СтруктураРеквизитовФормы.мСоответствияМнгЧ.Вставить(СтруктураРеквизитовФормы.мИдГруппы6, "МногострочнаяЧасть2");
	СтруктураРеквизитовФормы.мСоответствияМнгЧ.Вставить(СтруктураРеквизитовФормы.мИдГруппы7, "МногострочнаяЧасть3");
	СтруктураРеквизитовФормы.мСоответствияМнгЧ.Вставить(СтруктураРеквизитовФормы.мИдГруппы8, "МногострочнаяЧасть4");
	СтруктураРеквизитовФормы.мСоответствияМнгЧ.Вставить(СтруктураРеквизитовФормы.мИдГруппы9, "МногострочнаяЧасть1");
	СтруктураРеквизитовФормы.мСоответствияМнгЧ.Вставить(СтруктураРеквизитовФормы.мИдГруппы10, "МногострочнаяЧасть2");
	СтруктураРеквизитовФормы.мСоответствияМнгЧ.Вставить(СтруктураРеквизитовФормы.мИдГруппы11, "МногострочнаяЧасть3");
	СтруктураРеквизитовФормы.мСоответствияМнгЧ.Вставить(СтруктураРеквизитовФормы.мИдГруппы12, "МногострочнаяЧасть4");
	СтруктураРеквизитовФормы.мСоответствияМнгЧ.Вставить(СтруктураРеквизитовФормы.мИдГруппы13, "МногострочнаяЧасть");

	мПустойОбразЛистаФЛ = Новый Структура;
	
	мСтруктураВариантыЗаполнения       = Новый Структура;
	мСтруктураВариантыЗаполненияЭталон = Новый Структура;

	//// ОПИСАНИЕ ПАРАМЕТРОВ ФОРМЫ ОТЧЕТА
	//
	// Версия формы
	СтруктураРеквизитовФормы.мВерсияФормы = "01/01/2006";
	
	// Код отчета, равен КНД
	СтруктураРеквизитовФормы.мКодОтчета = "1113020";
	
	СтруктураРеквизитовФормы.мПечатныеформы = Новый СписокЗначений;
	СтруктураРеквизитовФормы.мПечатаемыеРазделы = Новый СписокЗначений;
	
	ИмяРаздела = "Титульный";
		
	ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + ИмяРаздела));
	
	СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяРаздела;
	
	СтруктураРеквизитовФормы.мВыбраннаяФорма          = Параметры.мВыбраннаяФорма;
	СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета  = Параметры.мДатаКонцаПериодаОтчета;
	СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета = Параметры.мДатаНачалаПериодаОтчета;
	СтруктураРеквизитовФормы.мПериодичность           = Параметры.мПериодичность;
	СтруктураРеквизитовФормы.мСкопированаФорма        = Параметры.мСкопированаФорма;
	СтруктураРеквизитовФормы.мСохраненныйДок          = Параметры.мСохраненныйДок;
	СтруктураРеквизитовФормы.Организация              = Параметры.Организация;
	
	ДатаПодписи	= ТекущаяДатаСеанса();
	
	ПорядкиОкругленияОтчетности = Новый Структура;
	ПорядкиОкругленияОтчетности.Вставить("ПеречислениеПорядкиОкругленияОтчетностиОкр1",       Перечисления.ПорядкиОкругленияОтчетности.Окр1);
	ПорядкиОкругленияОтчетности.Вставить("ПеречислениеПорядкиОкругленияОтчетностиОкр1000",    Перечисления.ПорядкиОкругленияОтчетности.Окр1000);
	ПорядкиОкругленияОтчетности.Вставить("ПеречислениеПорядкиОкругленияОтчетностиОкр1000000", Перечисления.ПорядкиОкругленияОтчетности.Окр1000000);
	
	СтруктураРеквизитовФормы.СправочникиВидыКонтактнойИнформацииПочтовыйАдресОрганизации = Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресОрганизации;		
	
	Инициализация(Параметры.БезОткрытияФормы);
	
КонецПроцедуры

&НаСервере
Процедура ИнициализацияМногостраничныхРазделов()
	
	СтрПерваяСтраница = ЭтаФорма.ТаблицаСтраницыФизЛица.Добавить();
	СтрПерваяСтраница.Представление               = "Новая страница";
	СтрПерваяСтраница.АктивнаяСтраница            = Истина;
	СтрПерваяСтраница.АвтоматическоеПредставление = Истина;
		
КонецПроцедуры

&НаСервере
Процедура СформироватьСтруктуруРеквизитовФормы()
	
	СтруктураРеквизитовФормы = Новый Структура;
	СтруктураРеквизитовФормы.Вставить("Организация");
	СтруктураРеквизитовФормы.Вставить("ЕдиницаИзмерения");
	СтруктураРеквизитовФормы.Вставить("ТочностьЕдиницыИзмерения");
	СтруктураРеквизитовФормы.Вставить("мВыбраннаяФорма");
	СтруктураРеквизитовФормы.Вставить("мСкопированаФорма");
	СтруктураРеквизитовФормы.Вставить("мСохраненныйДок");
	СтруктураРеквизитовФормы.Вставить("мВерсияФормы");	
	СтруктураРеквизитовФормы.Вставить("мБезОткрытияФормы");	
	СтруктураРеквизитовФормы.Вставить("мСчетчикСтраниц");
	СтруктураРеквизитовФормы.Вставить("мДатаНачалаПериодаОтчета");
	СтруктураРеквизитовФормы.Вставить("мДатаКонцаПериодаОтчета");
	СтруктураРеквизитовФормы.Вставить("мПериодичность");
	СтруктураРеквизитовФормы.Вставить("мЗаписьЗапрещена");
	СтруктураРеквизитовФормы.Вставить("мЗаписываетсяНовыйДокумент");
	СтруктураРеквизитовФормы.Вставить("мВариант");
	СтруктураРеквизитовФормы.Вставить("ВидДокумента");
	СтруктураРеквизитовФормы.Вставить("мВПрограммеИзмененаОрганизация");
	СтруктураРеквизитовФормы.Вставить("мПечатныеФормы");
	СтруктураРеквизитовФормы.Вставить("мПечатаемыеРазделы");
	СтруктураРеквизитовФормы.Вставить("мСоставПоказателей");
	СтруктураРеквизитовФормы.Вставить("мТелОрганизации");
	СтруктураРеквизитовФормы.Вставить("мОргКодИМНС");
	СтруктураРеквизитовФормы.Вставить("мОргОГРН");
	СтруктураРеквизитовФормы.Вставить("мИННБухгалтер");
	СтруктураРеквизитовФормы.Вставить("мИННДиректор");
	СтруктураРеквизитовФормы.Вставить("мИННУпПред");
	СтруктураРеквизитовФормы.Вставить("мСтрокаФормата");
	СтруктураРеквизитовФормы.Вставить("мДелитель");
	СтруктураРеквизитовФормы.Вставить("мКодОтчета");
	СтруктураРеквизитовФормы.Вставить("мОписаниеТиповЧислоЕ");
	СтруктураРеквизитовФормы.Вставить("мДокументВосстановлен");
	СтруктураРеквизитовФормы.Вставить("мИдГруппы1");
	СтруктураРеквизитовФормы.Вставить("мИдГруппы2");
	СтруктураРеквизитовФормы.Вставить("мИдГруппы3");
	СтруктураРеквизитовФормы.Вставить("мИдГруппы4");
	СтруктураРеквизитовФормы.Вставить("мИдГруппы5");
	СтруктураРеквизитовФормы.Вставить("мИдГруппы6");
	СтруктураРеквизитовФормы.Вставить("мИдГруппы7");
	СтруктураРеквизитовФормы.Вставить("мИдГруппы8");
	СтруктураРеквизитовФормы.Вставить("мИдГруппы9");
	СтруктураРеквизитовФормы.Вставить("мИдГруппы10");
	СтруктураРеквизитовФормы.Вставить("мИдГруппы11");
	СтруктураРеквизитовФормы.Вставить("мИдГруппы12");
	СтруктураРеквизитовФормы.Вставить("мИдГруппы13");
	СтруктураРеквизитовФормы.Вставить("мСоответствияМнгЧ");
	СтруктураРеквизитовФормы.Вставить("СправочникиВидыКонтактнойИнформацииПочтовыйАдресОрганизации");
	СтруктураРеквизитовФормы.Вставить("ВыводитьСтраницуВТаблДокНаСервере");
	СтруктураРеквизитовФормы.Вставить("мИННЮЛ");
	СтруктураРеквизитовФормы.Вставить("мКППЮЛ");
	СтруктураРеквизитовФормы.Вставить("ИП");
	СтруктураРеквизитовФормы.Вставить("мКодРегионаФизЛица");
	СтруктураРеквизитовФормы.Вставить("СтрПериодОтчета");
	СтруктураРеквизитовФормы.Вставить("НаимОрганизации");
	СтруктураРеквизитовФормы.Вставить("НаимТекущегоРаздела");
	СтруктураРеквизитовФормы.Вставить("НомерТекущейСтраницы");
	СтруктураРеквизитовФормы.Вставить("СписокПечатаемыхЛистов");
	СтруктураРеквизитовФормы.Вставить("ТекущаяСтрокаРазделовОтчета");
	
КонецПроцедуры

&НаСервере
Функция СформироватьПустойЛистФизЛиц()
	
	СтруктураДанныхПоля = Новый Структура;

	СтруктураДанныхПоля.Вставить("ФизЛицГород","");
	СтруктураДанныхПоля.Вставить("ФизЛицГражданство","");
	СтруктураДанныхПоля.Вставить("ФизЛицДатаР","");
	СтруктураДанныхПоля.Вставить("ФизЛицДок","");
	СтруктураДанныхПоля.Вставить("ФизЛицДокВид","");
	СтруктураДанныхПоля.Вставить("ФизЛицДокВыдан","");
	СтруктураДанныхПоля.Вставить("ФизЛицДокДата","");
	СтруктураДанныхПоля.Вставить("ФизЛицДокСерияНомер","");
	СтруктураДанныхПоля.Вставить("ФизЛицДом","");
	СтруктураДанныхПоля.Вставить("ФизЛицИнд","");
	СтруктураДанныхПоля.Вставить("ФизЛицИноАдрес","");
	СтруктураДанныхПоля.Вставить("ФизЛицКвартира","");
	СтруктураДанныхПоля.Вставить("ФизЛицКодГражд","");
	СтруктураДанныхПоля.Вставить("ФизЛицКорпус","");
	СтруктураДанныхПоля.Вставить("ФизЛицМестоР","");
	СтруктураДанныхПоля.Вставить("ФизЛицНП","");
	СтруктураДанныхПоля.Вставить("ФизЛицПолЖ","");
	СтруктураДанныхПоля.Вставить("ФизЛицПолМ","");
	СтруктураДанныхПоля.Вставить("ФизЛицРайон","");
	СтруктураДанныхПоля.Вставить("ФизЛицС","");
	СтруктураДанныхПоля.Вставить("ФизЛицСлТел","");
	СтруктураДанныхПоля.Вставить("ФизЛицСубъект","");
	СтруктураДанныхПоля.Вставить("ФизЛицУлица","");
	СтруктураДанныхПоля.Вставить("ФизЛицФИО","");

	Возврат СтруктураДанныхПоля;
	
КонецФункции

&НаСервере
Процедура Инициализация(БезОткрытияФормы = Ложь) Экспорт
	
	Перем ИсходноеКоличествоСтрокГруппы;
	
	СтруктураРеквизитовФормы.мБезОткрытияФормы = БезОткрытияФормы;
	
	// выполняем начальные настройки
	ЗаполнитьНачальныеНастройки();
	
	ФормироватьСтруктуруСвойствСтраниц();
	ФормироватьСтруктуруСтраницОтчета();
			
	СтруктураРеквизитовФормы.ВидДокумента = 0;
	НомерКорректировки = 1;
	СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация = Ложь;
	СтруктураРеквизитовФормы.мДокументВосстановлен          = Ложь;
	
	РегламентированнаяОтчетность.ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставления(ЭтаФорма);
		
	Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
		
		НачальныеОперацииСМногострочнымиБлоками();
		
		Если СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено Тогда
			// документ скопирован
			ВосстановитьСохраненныеДанные();
		Иначе
			// Установим реквизиты формы по умолчанию
			СтруктураРеквизитовФормы.ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1;
			СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = 0;
			ТабличныйДокумент.Области.ВидДок.Значение = "1";
			
			КопироватьДанныеФормы(мДеревоСтраницОтчета, мДеревоВыбранныхСтраниц);
		КонецЕсли;
		
		Модифицированность = Истина;
		
	Иначе
		
		// При открытии или при копировании сохраненного
		// отчета восстанавливаем сохраненные данные.
		ВосстановитьСохраненныеДанные();
		
		Если ЗначениеЗаполнено(СтруктураРеквизитовФормы.мСкопированаФорма) Тогда
			СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено;
		КонецЕсли;
		
		Если НЕ БезОткрытияФормы
           И НЕ СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
				   
        	ЗаблокироватьДанныеДляРедактирования(СтруктураРеквизитовФормы.мСохраненныйДок, , ЭтаФорма.УникальныйИдентификатор);

        КонецЕсли;
		
	КонецЕсли;
	
	ПоказатьПериод();
	
	СтруктураРеквизитовФормы.ИП = НЕ РегламентированнаяОтчетностьВызовСервера.ЭтоЮридическоеЛицо(СтруктураРеквизитовФормы.Организация);
	
	СохрЗначВКвадратиках(ЭтаФорма);
		
	Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Или СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация Тогда
		ЗаполнитьСведенияОбОрганизацииНаСервере();
	КонецЕсли;
	
	ПолучитьИННКПП();

	СтруктураРеквизитовФормы.НаимОрганизации = СтруктураРеквизитовФормы.Организация.Наименование;
	СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
	
	Если НЕ БезОткрытияФормы Тогда
		
		мПустойОбразЛистаФЛ = СформироватьПустойЛистФизЛиц();
		ЗаполнитьСведенияОбФЛ();
		
	КонецЕсли;
	
	мСкопированаФорма = Неопределено;
	Параметры.Свойство("мСкопированаФорма", мСкопированаФорма);
	Если ЗначениеЗаполнено(мСкопированаФорма) Тогда 
		Модифицированность = Истина;
	КонецЕсли;
	ЗаполнитьДатуПодписи(ЭтаФорма);
	НомерКорректировки = НомерКорректировки * СтруктураРеквизитовФормы.ВидДокумента;
	ТабличныйДокумент.Области.НомКоррект.Значение = Строка(НомерКорректировки);
	мСкопированаФорма = Неопределено;
	Параметры.Свойство("мСкопированаФорма", мСкопированаФорма);
	Если ЗначениеЗаполнено(мСкопированаФорма) Тогда 
		Модифицированность = Истина;
	КонецЕсли;
	СформироватьДеревоРазделовОтчетаНаСервере();
	
	РегламентированнаяОтчетность.ДобавитьКнопкуПрисоединенныеФайлы(ЭтаФорма);
	
	РегламентированнаяОтчетностьКлиентСервер.ПриИнициализацииФормыРегламентированногоОтчета(ЭтаФорма);
	
	Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
		Элементы.НаименованиеЭтапа.Заголовок = "В работе";
	Иначе
		Статус = РегламентированнаяОтчетность.СохраненныйСтатусОтправкиРеглОтчета(СтруктураРеквизитовФормы.мСохраненныйДок);
		Если Статус <> Неопределено Тогда
			Элементы.НаименованиеЭтапа.Заголовок
			= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1'"), Статус);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНачальныеНастройки() Экспорт
	
	МакетСоставаПоказателей = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет("СоставПоказателей2004Кв1");
			
	Для Инд = 0 По МакетСоставаПоказателей.Области.Количество() - 1 Цикл
				
		ТекОбласть    = МакетСоставаПоказателей.Области[Инд];
		ИмяСтраницы   = ТекОбласть.Имя;
		
		ЭтаФорма["ТаблицаВариантыЗаполнения" + ИмяСтраницы].Добавить();
		
		// Таблица значений содержит информацию о вариантах заполнения показателя отчета.
		// В колонках таблицы значений отображается следующая информация:
		//   - имя ячейки (код показателя);
		//   - вариант заполнения ячейки;
		//   - вычисленное по данным ИБ значение ячейки;
		//   - величина автокорректировки значения ячейки;
		//   - примечание к ячейке.
		//
				
		Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
			// перебираем строки макета
            					
			// Код показателя (по составу показателей) определяется по первой колонке макета
			КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
			ИмяПоказателя = КодПоказателя;

			Если КодПоказателя = "===" Тогда         // признак конечной строки
				Прервать;
			КонецЕсли;

			Если Лев(КодПоказателя, 2) = "//" Тогда  // пропускаем комментарии
				Продолжить;
			КонецЕсли;

			// код показателя по форме отчете (имя ячейки в полях табличного документа формы)
			КодПоказателяПоФорме = СокрЛП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
			// признак многострочности определяется по третьей колонке макета
			ПризнМногострочность = СокрЛП(МакетСоставаПоказателей.Область(Ном, 3).Текст);
			// по четвертой колонке определяется тип данных реквизита
			ТипДанныхРеквизита   = СокрЛП(МакетСоставаПоказателей.Область(Ном, 4).Текст);
			// по колонке 5 определяется исходное количество строк многострочного раздела
			стрКолСтрокИсходный  = СокрЛП(МакетСоставаПоказателей.Область(Ном, 5).Текст);
			// вариант заполнения ячейки определяется по колонке 6 макета
			стрВариантЗаполнения = РегламентированнаяОтчетность.ПолучитьВариантЗаполненияПоказателяРегОтчета(МакетСоставаПоказателей, Ном);
			// код показателя из структуры, берется из колонки 9
			КодПоказателяПоСтруктуре = СокрЛП(МакетСоставаПоказателей.Область(Ном, 9).Текст);

			чКолСтрокИсходный    = ? (ПустаяСтрока(стрКолСтрокИсходный),  0, Число(стрКолСтрокИсходный));
			чВариантЗаполнения   = ? (ПустаяСтрока(стрВариантЗаполнения), 0, Число(стрВариантЗаполнения));

			// формируем таблицу значений, содержащей состав показателей отчета
			НоваяСтрока = мТаблицаСоставПоказателей.Добавить();
			НоваяСтрока.ИмяПоляТаблДокумента   = ИмяСтраницы;
			НоваяСтрока.КодПоказателяПоСоставу = КодПоказателя;
			НоваяСтрока.КодПоказателяПоФорме   = КодПоказателяПоФорме;
			НоваяСтрока.ПризнМногострочности   = ПризнМногострочность;
			НоваяСтрока.ТипДанныхПоказателя    = ТипДанныхРеквизита;
			НоваяСтрока.КодПоказателяПоСтруктуре = КодПоказателяПоСтруктуре;

			Если чВариантЗаполнения <> 0 Тогда
				// Если в колонке 6 задан вариант заполнения показателя, 
				// то его значение может определяться по данным ИБ.
				// Дополняем таблицу значений вариантов заполнения
				НоваяСтрока = ЭтаФорма["ТаблицаВариантыЗаполнения" + ИмяСтраницы][0].ТаблицаВариантовЗаполнения.Добавить();
				НоваяСтрока.КодПоказателя      = ? (Не ПустаяСтрока(КодПоказателяПоФорме), КодПоказателяПоФорме, КодПоказателя);
				НоваяСтрока.ВариантЗаполнения  = чВариантЗаполнения;
				НоваяСтрока.КодПоказателяПоСтруктуре  = КодПоказателяПоСтруктуре;
			КонецЕсли;

		КонецЦикла;

		Если ЭтаФорма["ТаблицаВариантыЗаполнения" + ИмяСтраницы][0].ТаблицаВариантовЗаполнения.Количество() > 0 Тогда		
			// имеются автоматически заполняемые ячейки
            
			// Создаем структуру, содержащей варианты заполнения показателей отчета.
			//
			// В качестве ключа используется имя страницы основной панели формы, содержащей
			//   табличный документ с автоматически заполняемыми показателями.
			// В качестве значения принимаем Массив из таблицы значений - вариантов заполнения
			//   показателей по каждой странице многостраничного раздела.
			//
			мСтруктураВариантыЗаполнения.Вставить(ИмяСтраницы, ИмяСтраницы);
			мСтруктураВариантыЗаполненияЭталон.Вставить(ИмяСтраницы, ИмяСтраницы);
						
		Конецесли;

	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ФормироватьСтруктуруСвойствСтраниц() Экспорт
    
	мСвойстваРазделовДекларации.ПолучитьЭлементы().Очистить();
        	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();

	// Добавим св-ва Титульного листа
	СтрокаУровня1.ИмяСтраницы                          = "Титульный";
	СтрокаУровня1.МногострочностьВРазделе              = 0;
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Ложь;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;

	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();

	// Добавим св-ва Титульного листа
	СтрокаУровня1.ИмяСтраницы                          = "ФизЛица";
	СтрокаУровня1.МногострочностьВРазделе              = 0;
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Истина;
	СтрокаУровня1.ОчищатьРаздел                        = Ложь;
	СтрокаУровня1.ИмяПредставления                     = "ФизЛицФИО";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;

	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();

	// Добавим св-ва Раздела 1
	СтрокаУровня1.ИмяСтраницы                          = "Раздел1_1";
	СтрокаУровня1.МногострочностьВРазделе              = 4;            // Многострочность в разделе, кол-во областей
	СтрокаУровня1.СохранятьМногострКакТЗ               = Истина;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;         // Многостраничность
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";           // Для многостраничных разделов, имя представления страницы
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;         // Есть ли квадратики на листе
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель"; // Название панели, в некоторых отчетах по две, три панели кроме "Основной"
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;

	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();

	// Добавим св-ва Раздела 1_2
	СтрокаУровня1.ИмяСтраницы                          = "Раздел1_2";
	СтрокаУровня1.МногострочностьВРазделе              = 4;            // Многострочность в разделе, кол-во областей
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;         // Многостраничность
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";           // Для многостраничных разделов, имя представления страницы
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;       // Есть ли квадратики на листе
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель"; // Название панели, в некоторых отчетах по две, три панели кроме "Основной"
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;

	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();

	// Добавим св-ва Раздела 1_3
	СтрокаУровня1.ИмяСтраницы                          = "Раздел1_3";
	СтрокаУровня1.МногострочностьВРазделе              = 4;            // Многострочность в разделе, кол-во областей
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;         // Многостраничность
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";           // Для многостраничных разделов, имя представления страницы
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;       // Есть ли квадратики на листе
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель"; // Название панели, в некоторых отчетах по две, три панели кроме "Основной"
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;

	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();

	// Добавим св-ва Раздела 2
	СтрокаУровня1.ИмяСтраницы                          = "Раздел1_4";
	СтрокаУровня1.МногострочностьВРазделе              = 1;            // Многострочность в разделе, кол-во областей
	СтрокаУровня1.СохранятьМногострКакТЗ               = Ложь;         // Сохраним как структуру
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;         // Многостраничность
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";           // Для многостраничных разделов, имя представления страницы
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;       // Есть ли квадратики на листе
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель"; // Название панели, в некоторых отчетах по две, три панели кроме "Основной"
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура ФормироватьСтруктуруСтраницОтчета()

	мДеревоСтраницОтчета.ПолучитьЭлементы().Очистить();

	// Дерево содержит коллекцию страниц отчета.
	// В колонках дерева хранятся следующие данные:
	//    - представление листа;
	//    - имя страницы основной панели формы, содержащей выводимый на печать лист;
	//    - ориентация страницы при печати;
	//    - число, метка вывода страницы на печать;
	//    - число, метка показа страницы на основной панели формы;
	//    - число, метка выгрузки данных страницы в ИМНС.
	//
	
	СтрокаУровня1 =  мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Титульный";
	СтрокаУровня1.Представление            = "Титульный лист";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;

	СтрокаУровня1 =  мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "ФизЛица";
	СтрокаУровня1.Представление            = "Сведения" + Символы.ПС + "о физ. лице";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;

	СтрокаУровня1 =  мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел1_1";
	СтрокаУровня1.Представление            = "Сведения" + Символы.ПС + "о деятельности";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;

	СтрокаУровня1 =  мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел1_2";
	СтрокаУровня1.Представление            = "Описание" + Символы.ПС + "учетной системы";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;

	СтрокаУровня1 =  мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел1_3";
	СтрокаУровня1.Представление            = "Расходы" + Символы.ПС + "отделения";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;

	СтрокаУровня1 =  мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел1_4";
	СтрокаУровня1.Представление            = "Сведения" + Символы.ПС + "о финансировании";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;

КонецПроцедуры

&НаСервере
Процедура НачальныеОперацииСМногострочнымиБлоками()
	
	Перем ИсходноеКоличествоСтрокГруппы;

	// создаем исходную структуру многострочных разделов
	Для Каждого ЭлементСтруктуры Из мСтруктураМногострочныхРазделов Цикл
		
		ИмяГруппы = ЭлементСтруктуры.Ключ;
		СтруктураГруппы = ЭтаФорма[ЭлементСтруктуры.Значение];
		
		мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);

		Для НСтр = 1 По ИсходноеКоличествоСтрокГруппы Цикл

			СтруктураГруппы.Добавить();
            			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПоказатьПериод()

	НомерМесяца = Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ=М");
	Если НомерМесяца = "12" Тогда
		НомерМесяца = "0";
	КонецЕсли;

	НомерГода = Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ=гггг");
	
	ТабличныйДокумент.Области.ОтчетГод.Значение = НомерГода;
			
	СтруктураРеквизитовФормы.СтрПериодОтчета = ПредставлениеПериода(НачалоДня(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета),
                     												КонецДня(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета),
                     												"Л=ru_RU;ФП=Истина");

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СохрЗначВКвадратиках(Форма)

	Форма.СтруктураРеквизитовФормы.мОргКодИМНС = Форма.ТабличныйДокумент.Области.КодИМНС.Значение;
					 
	Форма.СтруктураРеквизитовФормы.мИННДиректор = Форма.ТабличныйДокумент.Области.ИННРук.Значение;
					  	
	Форма.СтруктураРеквизитовФормы.мИННБухгалтер = Форма.ТабличныйДокумент.Области.ИННГБ.Значение;
					 
	Форма.СтруктураРеквизитовФормы.мИННУпПред = Форма.ТабличныйДокумент.Области.ИННУП.Значение;
					
	Форма.СтруктураРеквизитовФормы.мОргОГРН = Форма.ТабличныйДокумент.Области.ОГРН.Значение;
				
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСведенияОбОрганизацииНаСервере(ВПрограммеИзмененаДатаПодписи = Ложь)
	
	ЗаполнитьСведенияОбОрганизации(ЭтаФорма, ВПрограммеИзмененаДатаПодписи);
		
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьСведенияОбОрганизации(Форма, ВПрограммеИзмененаДатаПодписи = Ложь)
	
	Если (Форма.СтруктураРеквизитовФормы.Организация = Неопределено) Или (Форма.СтруктураРеквизитовФормы.Организация = РегламентированнаяОтчетностьКлиентСервер.ПустоеЗначениеТипа("СправочникСсылка.Организации")) Тогда
		Возврат
	КонецЕсли;
	
	// Составляем список данных, необходимых для вывода в декларацию
	Сведения = Новый СписокЗначений;

	Если НЕ ВПрограммеИзмененаДатаПодписи Тогда
		Сведения.Добавить("", "ИННЮЛ"); // ИНН
		Сведения.Добавить("", "КППЮЛ"); // КПП

		Сведения.Добавить("", "НаимЮЛПол"); // Полное наименование 

		Сведения.Добавить("", "ОГРН"); // ОГРН

		Сведения.Добавить("", "КодНО");  // Код Налогового Органа
		Сведения.Добавить("", "НаимНО"); // Наименование НО

		Сведения.Добавить("", "ТелОрганизации");  // ТелОрганизации

		Сведения.Добавить("", "СтрИО"); // Страна регистрации инкорп
		Сведения.Добавить("", "КодСтрИО"); // Код страны рег.

		Сведения.Добавить("", "СтрПостИО"); // Страна постоянного места нахожд
		Сведения.Добавить("", "КодСтрПостИО"); // Код страны постоянного места нахожд

		Сведения.Добавить("", "ТипНП"); // ТипНП

	КонецЕсли;

	Сведения.Добавить("", "ФИОРук"); // ФИО руководителя
	Сведения.Добавить("", "ИННРук"); // ИНН руководителя

	Сведения.Добавить("", "ФИОБух"); // ФИО бухгалтера
	Сведения.Добавить("", "ИННБух"); // ИНН бухгалтера

	Сведения.Добавить("", "ФИОУпПред");  // ФИО уполномоченного представителя
	Сведения.Добавить("", "ИННУпПред");  // ИНН уполномоченного представителя

	Сведения.Добавить("", "ФИО");

	// Теперь получаем данные из глобальной общей функции
	ОргСведения = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(Форма.СтруктураРеквизитовФормы.Организация, Форма.ДатаПодписи, Сведения);

	Если НЕ ВПрограммеИзмененаДатаПодписи Тогда
		КодНО = ОргСведения.КодНО;
		КПП   = ОргСведения.КППЮЛ;
	Иначе
		КодНО = РегламентированнаяОтчетностьКлиентСервер.ВернутьЗначениеПараметраСЛиста(Форма, "Титульный", "КодИМНС");
		КПП   = РегламентированнаяОтчетностьКлиентСервер.ВернутьЗначениеПараметраСЛиста(Форма, "Титульный", "КПП1");
	КонецЕсли;
	ДанныеПредставителя = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОПредставителе(Форма.СтруктураРеквизитовФормы.Организация, Форма.ДатаПодписи, Ложь, КодНО, КПП);
			
	Если НЕ ВПрограммеИзмененаДатаПодписи Тогда

		// Инициализируем переменные
		ИННЮЛ          = "";
		КППЮЛ          = "";
		НаимЮЛПол      = "";
		ОГРН           = "";
		КодНО          = "";
		НаимНО         = "";
		ТелОрганизации = "";
		СтрИО          = "";
		КодСтрИО       = "";
		ТипНП          = "";

	КонецЕсли;

	ФИОРук         = "";
	ИННРук         = "";
	ФИОБух         = "";
	ИННБух         = "";
	ФИОУпПред      = "";
	ИННУпПред      = "";
	ФИО            = "";
	
	СтрПостИО = "";    // Страна постоянного места нахожд
	КодСтрПостИО = ""; // Код страны постоянного места нахожд

	Если НЕ ВПрограммеИзмененаДатаПодписи Тогда
		
		// Получаем данные
		ОргСведения.Свойство("ИННЮЛ"         , ИННЮЛ);
		ОргСведения.Свойство("КППЮЛ"         , КППЮЛ);
		ОргСведения.Свойство("НаимЮЛПол"     , НаимЮЛПол);
		ОргСведения.Свойство("ОГРН"          , ОГРН);
		ОргСведения.Свойство("КодНО"         , КодНО);
		ОргСведения.Свойство("НаимНО"        , НаимНО);
		ОргСведения.Свойство("ТелОрганизации", ТелОрганизации);
		ОргСведения.Свойство("СтрИО"         , СтрИО);
		ОргСведения.Свойство("КодСтрИО"      , КодСтрИО);
		ОргСведения.Свойство("СтрПостИО"     , СтрПостИО);
		ОргСведения.Свойство("КодСтрПостИО"  , КодСтрПостИО);
		ОргСведения.Свойство("ТипНП"         , ТипНП);

	КонецЕсли;

	ОргСведения.Свойство("ФИОРук"        , ФИОРук);
	ОргСведения.Свойство("ИННРук"        , ИННРук);
	ОргСведения.Свойство("ФИОБух"        , ФИОБух);
	ОргСведения.Свойство("ИННБух"        , ИННБух);
	ОргСведения.Свойство("ФИОУпПред"     , ФИОУпПред);
	ОргСведения.Свойство("ИННУпПред"     , ИННУпПред);
	ОргСведения.Свойство("ФИО"     		 , ФИО);

	ФИОУпПред = ДанныеПредставителя.ФИОУпПред;
	ИННУпПред = ДанныеПредставителя.ИННУпПред;
	
	Если Форма.СтруктураРеквизитовФормы.ИП Тогда
		НаимЮЛПол = ФИО;

		ФИОРук        = "";
		ИННРук        = "            ";
		Форма.СтруктураРеквизитовФормы.мИННДиректор  = "            ";

		ФИОБух        = "";
		ИННБух        = "            ";
		Форма.СтруктураРеквизитовФормы.мИННБухгалтер = "            ";

		ФИОУпПред     = "";
		ИННУпПред     = "            ";
		Форма.СтруктураРеквизитовФормы.мИННУпПред    = "            ";

	КонецЕсли;

    // Производим операции связанные с текущей формой отчетности
	
	Если ВПрограммеИзмененаДатаПодписи Тогда

		// Обновим только то, что зависит от даты подписи и выйдем
		Форма.ТабличныйДокумент.Области.ОргДиректор.Значение  = ФИОРук;
		Форма.ТабличныйДокумент.Области.ОргБухгалтер.Значение = ФИОБух;
		Форма.ТабличныйДокумент.Области.ОргУП.Значение        = ФИОУпПред;
		Форма.ТабличныйДокумент.Области.ИННРук.Значение       = ИННРук;
		Форма.ТабличныйДокумент.Области.ИННГБ.Значение        = ИННБух;
		Форма.ТабличныйДокумент.Области.ИННУП.Значение        = ИННУпПред;

		Форма.СтруктураРеквизитовФормы.мИННДиректор  = ИННРук;
		Форма.СтруктураРеквизитовФормы.мИННБухгалтер = ИННБух;
		Форма.СтруктураРеквизитовФормы.мИННУпПред    = ИННУпПред;
		
		Если Форма.СтруктураРеквизитовФормы.ИП Тогда
			Форма.ТабличныйДокумент.Области.ОргНазв.Значение = ФИО;
		КонецЕсли;
		
		Возврат;
		
	КонецЕсли;

	Форма.СтруктураРеквизитовФормы.мТелОрганизации = ТелОрганизации;

	Если НЕ ЗначениеЗаполнено(ИННЮЛ) Тогда
		ИННЮЛ = "            ";
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(КППЮЛ) Тогда
		КППЮЛ = "         ";
	КонецЕсли;

	Форма.СтруктураРеквизитовФормы.мИННЮЛ = ИННЮЛ;
	
	КППЮЛ = РегламентированнаяОтчетностьКлиентСервер.ДополнитьСтроку(КППЮЛ, 9, " ");
	Форма.СтруктураРеквизитовФормы.мКППЮЛ = КППЮЛ;
		
	// Проставлять ИНН и КПП только в новыхо открыты отчетах и при смене ЮЛ
	Если (НЕ Форма.СтруктураРеквизитовФормы.мДокументВосстановлен) ИЛИ (Форма.СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация) Тогда
		Форма.ТабличныйДокумент.Области.ИНН1.Значение = ИННЮЛ;
		Форма.ТабличныйДокумент.Области.КПП1.Значение = КППЮЛ;
	КонецЕсли;
	
	Признаки = Форма.ТабличныйДокумент.Области.ТипОрг1.Значение
	   + Форма.ТабличныйДокумент.Области.ТипОрг2.Значение
	   + Форма.ТабличныйДокумент.Области.ТипОрг3.Значение;
	   
	Если (Форма.СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация) Или (ПустаяСтрока(Признаки)) Тогда

		Если ТипНП = 5 Тогда
			Форма.ТабличныйДокумент.Области.ТипОрг1.Значение = "V";
			Форма.ТабличныйДокумент.Области.ТипОрг2.Значение = "";
			Форма.ТабличныйДокумент.Области.ТипОрг3.Значение = "";
			Назв = ПолучитьНазваниеДляИностраннойОрганизации(Форма);
			Если (Форма.СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация) Или (ПустаяСтрока(Форма.ТабличныйДокумент.Области.ИноОргНазв.Значение)) Тогда
				Форма.ТабличныйДокумент.Области.ИноОргНазв.Значение = Назв;
			КонецЕсли;

		ИначеЕсли ТипНП = 3 Тогда
			Форма.ТабличныйДокумент.Области.ТипОрг1.Значение = "";
			Форма.ТабличныйДокумент.Области.ТипОрг2.Значение = "";
			Форма.ТабличныйДокумент.Области.ТипОрг3.Значение = "V";
			Форма.ТабличныйДокумент.Области.ИноОргНазв.Значение = "";

		Иначе // По умолчанию все на ТипОрг2
			Форма.ТабличныйДокумент.Области.ТипОрг1.Значение = "";
			Форма.ТабличныйДокумент.Области.ТипОрг2.Значение = "V";
			Форма.ТабличныйДокумент.Области.ТипОрг3.Значение = "";
			Форма.ТабличныйДокумент.Области.ИноОргНазв.Значение = "";

		КонецЕсли;

	КонецЕсли;

	Если (Форма.СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация) Или (ПустаяСтрока(Форма.ТабличныйДокумент.Области.ИноСтрКодПост.Значение)) Тогда
		// Если пустая строка на Титульном листе, то запишем имеющееся у нас значение
		Форма.ТабличныйДокумент.Области.ИноСтрКодПост.Значение = КодСтрПостИО;
	КонецЕсли;

	Если (Форма.СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация) Или (ПустаяСтрока(Форма.ТабличныйДокумент.Области.ИноСтранаПост.Значение)) Тогда
		// Если пустая строка на Титульном листе, то запишем имеющееся у нас значение
		Форма.ТабличныйДокумент.Области.ИноСтранаПост.Значение = СтрПостИО;
	КонецЕсли;

	Если (Форма.СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация) Или (ПустаяСтрока(Форма.ТабличныйДокумент.Области.ИноСтрана.Значение)) Тогда
		// Если пустая строка на Титульном листе, то запишем имеющееся у нас значение
		Форма.ТабличныйДокумент.Области.ИноСтрана.Значение = СтрИО;
	КонецЕсли;

	Если (Форма.СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация) Или (ПустаяСтрока(Форма.ТабличныйДокумент.Области.ИноСтрКод.Значение)) Тогда
		// Если пустая строка на Титульном листе, то запишем имеющееся у нас значение
		Форма.ТабличныйДокумент.Области.ИноСтрКод.Значение = КодСтрИО;
	КонецЕсли;

	// Работаем с названием ЮЛ
	Если (Форма.СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация) Или (ПустаяСтрока(Форма.ТабличныйДокумент.Области.ОргНазв.Значение)) Тогда
		// Если пустая строка на Титульном листе, то запишем имеющееся у нас значение
		Форма.ТабличныйДокумент.Области.ОргНазв.Значение = НаимЮЛПол;
	КонецЕсли;

	// Работаем с ФИО руководителя
	Если (Форма.СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация) Или (ПустаяСтрока(Форма.ТабличныйДокумент.Области.ОргДиректор.Значение)) Тогда
		Форма.ТабличныйДокумент.Области.ОргДиректор.Значение  = ФИОРук;
	КонецЕсли;

	// Работаем с ИНН руководителя
	Если (Форма.СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация) Или (ПустаяСтрока(Форма.СтруктураРеквизитовФормы.мИННДиректор)) Тогда
		Форма.ТабличныйДокумент.Области.ИННРук.Значение = ИННРук;
		Форма.СтруктураРеквизитовФормы.мИННДиректор = ИННРук;
	КонецЕсли;

	// Работаем с ФИО бухгалтера
	Если (Форма.СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация) Или (ПустаяСтрока(Форма.ТабличныйДокумент.Области.ОргБухгалтер.Значение)) Тогда
		Форма.ТабличныйДокумент.Области.ОргБухгалтер.Значение = ФИОБух;
	КонецЕсли;

	// Работаем с ИНН бухгалтера
	Если (Форма.СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация) Или (ПустаяСтрока(Форма.СтруктураРеквизитовФормы.мИННБухгалтер)) Тогда
		Форма.ТабличныйДокумент.Области.ИННГБ.Значение = ИННБух;
		Форма.СтруктураРеквизитовФормы.мИННБухгалтер = ИННБух;
	КонецЕсли;
	
	// Работаем с ОГРН
	Если (ТипНП <> 3) И ((Форма.СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация) Или (ПустаяСтрока(Форма.СтруктураРеквизитовФормы.мОргОГРН))) Тогда
		ОГРН = РегламентированнаяОтчетностьКлиентСервер.ДополнитьСтроку(ОГРН, 13, " ");
		Форма.ТабличныйДокумент.Области.ОГРН.Значение = ОГРН;
		Форма.СтруктураРеквизитовФормы.мОргОГРН = ОГРН;
	КонецЕсли;

	Если (ТипНП = 3) И (Форма.СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация) Тогда
		Форма.ТабличныйДокумент.Области.ОГРН.Значение = "            ";
		Форма.СтруктураРеквизитовФормы.мОргОГРН = "";
	КонецЕсли;
	
	Если (Форма.СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация) Или (ПустаяСтрока(Форма.СтруктураРеквизитовФормы.мОргКодИМНС)) Тогда
		КодНО = РегламентированнаяОтчетностьКлиентСервер.ДополнитьСтроку(КодНО, 4, " ");
		Форма.ТабличныйДокумент.Области.КодИМНС.Значение = КодНО;
		Форма.СтруктураРеквизитовФормы.мОргКодИМНС = КодНО;
	КонецЕсли;

	// Работаем с наименованием инспекции
	Если (Форма.СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация) Или (ПустаяСтрока(Форма.ТабличныйДокумент.Области.ОргИМНС.Значение)) Тогда
		Форма.ТабличныйДокумент.Области.ОргИМНС.Значение = НаимНО;
	КонецЕсли;

	// Работаем с ФИО уполномоченного представителя
	Если (Форма.СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация) Или (ПустаяСтрока(Форма.ТабличныйДокумент.Области.ОргУП.Значение)) Тогда
		Форма.ТабличныйДокумент.Области.ОргУП.Значение = ФИОУпПред;
	КонецЕсли;

	// Работаем с ИНН уполномоченного представителя
	Если (Форма.СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация) Или (ПустаяСтрока(Форма.СтруктураРеквизитовФормы.мИННУпПред)) Тогда
		ИННУпПред = РегламентированнаяОтчетностьКлиентСервер.ДополнитьСтроку(ИННУпПред, 12, " ");
		Форма.ТабличныйДокумент.Области.ИННУП.Значение = ИННУпПред;
		Форма.СтруктураРеквизитовФормы.мИННУпПред = ИННУпПред;
	КонецЕсли;
	
	// Работаем с телефоном организации
	Если (Форма.СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация) Или (ПустаяСтрока(Форма.ТабличныйДокумент.Области.ИноКТел.Значение)) Тогда
		Форма.ТабличныйДокумент.Области.ИноКТел.Значение = ТелОрганизации;
	КонецЕсли;
	
	Если (НЕ Форма.СтруктураРеквизитовФормы.мДокументВосстановлен) ИЛИ (Форма.СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация) Тогда
		ЗаполнитьДатуПодписи(Форма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДатуПодписиНаКлиенте() Экспорт
    	
	ЗаполнитьДатуПодписи(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДатуПодписиНаСервере() Экспорт
    	
	ЗаполнитьДатуПодписи(ЭтаФорма);
		
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьДатуПодписи(Форма)

	Форма.ТабличныйДокумент.Области.ДатаПодписи.Значение = Форма.ДатаПодписи;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьНазваниеДляИностраннойОрганизации(Форма)
	
	Сведения = Новый СписокЗначений;
	Сведения.Добавить("", "НаимИОПол"); // Наименование иностранной орг
	ОргСведения = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(Форма.СтруктураРеквизитовФормы.Организация, Форма.ДатаПодписи, Сведения);
	НаимИОПол = "";
	ОргСведения.Свойство("НаимИОПол", НаимИОПол);
	
	Возврат НаимИОПол;

КонецФункции

&НаСервере
Процедура ПолучитьИННКПП()

	// Теперь получаем данные из глобальной общей функции
	ОргСведения = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(СтруктураРеквизитовФормы.Организация, ДатаПодписи, "ИННЮЛ, КППЮЛ, ТелОрганизации");

	ИННЮЛ = "";
	КППЮЛ = "";
	ОргСведения.Свойство("ИННЮЛ", ИННЮЛ);
	ОргСведения.Свойство("КППЮЛ", КППЮЛ);

	Если НЕ ЗначениеЗаполнено(ИННЮЛ) Тогда
		ИННЮЛ = РегламентированнаяОтчетностьКлиентСервер.ДополнитьСтроку(ИННЮЛ, 12, " ");
	Иначе
		ИННЮЛ = РегламентированнаяОтчетностьКлиентСервер.ДополнитьСтроку(ИННЮЛ, 12, "0");
	КонецЕсли;

	КППЮЛ = РегламентированнаяОтчетностьКлиентСервер.ДополнитьСтроку(КППЮЛ, 9, " ");

	СтруктураРеквизитовФормы.мИННЮЛ = ИННЮЛ;
	СтруктураРеквизитовФормы.мКППЮЛ = КППЮЛ;

	СтруктураРеквизитовФормы.мТелОрганизации = "";
	ОргСведения.Свойство("ТелОрганизации", СтруктураРеквизитовФормы.мТелОрганизации);

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСведенияОбФЛ(СмениласьДатаПодписания = Ложь)

	Перем ТаблицаСтраницРаздела;

	Если (СтруктураРеквизитовФормы.Организация  = Неопределено) Или (СтруктураРеквизитовФормы.Организация = РегламентированнаяОтчетностьКлиентСервер.ПустоеЗначениеТипа("СправочникСсылка.Организации")) Тогда
		Возврат
	КонецЕсли;

	Если НЕ РегламентированнаяОтчетностьВызовСервера.ЭтоЮридическоеЛицо(СтруктураРеквизитовФормы.Организация) Тогда
		Возврат;
	КонецЕсли;

	СписокПоказателей = Новый СписокЗначений;

	// Составляем список данных, необходимых для вывода в декларацию
	Если ПустаяСтрока(СтруктураРеквизитовФормы.мИННДиректор) Тогда

		СписокПоказателей.Добавить("", "ФИОРук"); // ФИО руководителя
		СписокПоказателей.Добавить("", "ТелРук"); // телефон руководителя из контактной информации
		// СведенияФЛ.Добавить("", "ТелРукДом"); // телефон руководителя ДОМАШНИЙ

		СписокПоказателей.Добавить("", "ВидУдЛичнРук"); // вид уд личности руководителя
		СписокПоказателей.Добавить("", "КодУдЛичнРук"); // код уд личности руководителя
		СписокПоказателей.Добавить("", "СерияУдЛичнРук"); // код уд личности руководителя
		СписокПоказателей.Добавить("", "НомерУдЛичнРук"); // код уд личности руководителя
		СписокПоказателей.Добавить("", "ОрганВыданУдЛичнРук"); // Кем выдан
		СписокПоказателей.Добавить("", "ДатаУдЛичнРук");
		СписокПоказателей.Добавить("", "ДатаРождРук");
		СписокПоказателей.Добавить("", "МестоРождРук");
		СписокПоказателей.Добавить("", "ПолРук");

		СписокПоказателей.Добавить("", "ИндексМЖРук");
		СписокПоказателей.Добавить("", "СубъектМЖРук");
		СписокПоказателей.Добавить("", "КодСубъектМЖРук");
		СписокПоказателей.Добавить("", "РайонМЖРук");
		СписокПоказателей.Добавить("", "ГородМЖРук");
		СписокПоказателей.Добавить("", "НПунктМЖРук");
		СписокПоказателей.Добавить("", "УлицаМЖРук");
		СписокПоказателей.Добавить("", "ДомМЖРук");
		СписокПоказателей.Добавить("", "КорпусМЖРук");
		СписокПоказателей.Добавить("", "КвартираМЖРук");

		СписокПоказателей.Добавить("", "ГраждРук");
		СписокПоказателей.Добавить("", "ГраждСтранаРук");

	КонецЕсли;

	Если ПустаяСтрока(СтруктураРеквизитовФормы.мИННБухгалтер) Тогда
		// Получим данные о бухгалтере
		СписокПоказателей.Добавить("", "ФИОБух");
		СписокПоказателей.Добавить("", "ТелБух");

		СписокПоказателей.Добавить("", "ВидУдЛичнБух");
		СписокПоказателей.Добавить("", "КодУдЛичнБух");
		СписокПоказателей.Добавить("", "СерияУдЛичнБух");
		СписокПоказателей.Добавить("", "НомерУдЛичнБух");
		СписокПоказателей.Добавить("", "ОрганВыданУдЛичнБух");
		СписокПоказателей.Добавить("", "ДатаУдЛичнБух");
		СписокПоказателей.Добавить("", "ДатаРождБух");
		СписокПоказателей.Добавить("", "МестоРождБух");
		СписокПоказателей.Добавить("", "ПолБух");

		СписокПоказателей.Добавить("", "ИндексМЖБух");
		СписокПоказателей.Добавить("", "СубъектМЖБух");
		СписокПоказателей.Добавить("", "КодСубъектМЖБух");
		СписокПоказателей.Добавить("", "РайонМЖБух");
		СписокПоказателей.Добавить("", "ГородМЖБух");
		СписокПоказателей.Добавить("", "НПунктМЖБух");
		СписокПоказателей.Добавить("", "УлицаМЖБух");
		СписокПоказателей.Добавить("", "ДомМЖБух");
		СписокПоказателей.Добавить("", "КорпусМЖБух");
		СписокПоказателей.Добавить("", "КвартираМЖБух");

		СписокПоказателей.Добавить("", "ГраждБух");
		СписокПоказателей.Добавить("", "ГраждСтранаБух");

	КонецЕсли;

	Если ПустаяСтрока(СтруктураРеквизитовФормы.мИННУпПред) Тогда
		// Получим данные о УП
		СписокПоказателей.Добавить("", "ФИОУпПред");
		СписокПоказателей.Добавить("", "ТелУпПред");

		СписокПоказателей.Добавить("", "ВидУдЛичнУпПред");
		СписокПоказателей.Добавить("", "КодУдЛичнУпПред");
		СписокПоказателей.Добавить("", "СерияУдЛичнУпПред");
		СписокПоказателей.Добавить("", "НомерУдЛичнУпПред");
		СписокПоказателей.Добавить("", "ОрганВыданУдЛичнУпПред");
		СписокПоказателей.Добавить("", "ДатаУдЛичнУпПред");
		СписокПоказателей.Добавить("", "ДатаРождУпПред");
		СписокПоказателей.Добавить("", "МестоРождУпПред");
		СписокПоказателей.Добавить("", "ПолУпПред");

		СписокПоказателей.Добавить("", "ИндексМЖУпПред");
		СписокПоказателей.Добавить("", "СубъектМЖУпПред");
		СписокПоказателей.Добавить("", "КодСубъектМЖУпПред");
		СписокПоказателей.Добавить("", "РайонМЖУпПред");
		СписокПоказателей.Добавить("", "ГородМЖУпПред");
		СписокПоказателей.Добавить("", "НПунктМЖУпПред");
		СписокПоказателей.Добавить("", "УлицаМЖУпПред");
		СписокПоказателей.Добавить("", "ДомМЖУпПред");
		СписокПоказателей.Добавить("", "КорпусМЖУпПред");
		СписокПоказателей.Добавить("", "КвартираМЖУпПред");

		СписокПоказателей.Добавить("", "ГраждУпПред");
		СписокПоказателей.Добавить("", "ГраждСтранаУпПред");

		// Инициализируем данные о УП
	КонецЕсли;

	ОргСведения = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(СтруктураРеквизитовФормы.Организация, ДатаПодписи, СписокПоказателей);

	ТаблицаСтраницРаздела = Неопределено;
	Если Не мСтруктураМногостраничныхРазделов.Свойство("ФизЛица", ТаблицаСтраницРаздела) Тогда
		Возврат;
	КонецЕсли;

	ТаблицаСтраницРаздела = ЭтаФорма[ТаблицаСтраницРаздела];
	
	ОписаниеТиповСтрока254 = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(254));
	МассивБулево = Новый Массив;
	МассивБулево.Добавить(Тип("Булево"));
	ОписаниеТиповБулево    = Новый ОписаниеТипов(МассивБулево);

	Если (СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация Или СмениласьДатаПодписания) Тогда

		ТаблицаСтраницРаздела.Очистить();
		СтрПервая = ТаблицаСтраницРаздела.Добавить();
		СтрПервая.Представление = "Новая страница";
		СтрПервая.АктивнаяСтраница = Истина;
		СтрПервая.Данные.Добавить(ВозвратитьПустойОбразЛистаФЛ());
		СтрПервая.АвтоматическоеПредставление = Истина;

	ИначеЕсли (НЕ (СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация Или СмениласьДатаПодписания)) Тогда

		// Если документ новый, то в первый лист ФЛ запишем пустой образ листа ФЛ
		Если Не СтруктураРеквизитовФормы.мДокументВосстановлен Тогда
			ТаблицаСтраницРаздела[0].Данные.Добавить(ВозвратитьПустойОбразЛистаФЛ());
		КонецЕсли;

	КонецЕсли;

	Если ПустаяСтрока(СтруктураРеквизитовФормы.мИННДиректор) Тогда

		ФИОДиректора = ТабличныйДокумент.Области.ОргДиректор.Значение;

		Если НЕ ПустаяСтрока(ФИОДиректора) Тогда
			СвязьУстановлена = Ложь;
			ТекИндекс = -1;
			Для Каждого Строка Из ТаблицаСтраницРаздела Цикл
								Если Строка.Данные[0].Значение.ФизЛицФИО = ФИОДиректора Тогда
					ТекИндекс = ТаблицаСтраницРаздела.Индекс(Строка);
					СвязьУстановлена = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;

			ВыводДанныхОФизическомЛице(СвязьУстановлена, ОргСведения, 1,, ТаблицаСтраницРаздела, ТекИндекс);

		КонецЕсли; // Если ФИО пусто

	КонецЕсли;

	Если ПустаяСтрока(СтруктураРеквизитовФормы.мИННБухгалтер) Тогда

		ФИОБухгалтера = ТабличныйДокумент.Области.ОргБухгалтер.Значение;

		Если НЕ ПустаяСтрока(ФИОБухгалтера) Тогда
			СвязьУстановлена = Ложь;
			ТекИндекс = -1;
			Для Каждого Строка Из ТаблицаСтраницРаздела Цикл
				Если Строка.Данные[0].Значение.ФизЛицФИО = ФИОБухгалтера Тогда
					ТекИндекс = ТаблицаСтраницРаздела.Индекс(Строка);
					СвязьУстановлена = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;

			ВыводДанныхОФизическомЛице(СвязьУстановлена, ОргСведения, 2, Истина, ТаблицаСтраницРаздела, ТекИндекс);

		КонецЕсли; // Если ФИО пусто

	КонецЕсли;

	Если ПустаяСтрока(СтруктураРеквизитовФормы.мИННУпПред) Тогда
		Попытка
			ФИООргУП = ТабличныйДокумент.Области.ОргУП.Значение;

		Если НЕ ПустаяСтрока(ФИООргУП) Тогда
			СвязьУстановлена = Ложь;
			ТекИндекс = -1;
			Для Каждого Строка Из ТаблицаСтраницРаздела Цикл
				Если Строка.Данные[0].Значение.ФизЛицФИО = ФИООргУП Тогда
					ТекИндекс = ТаблицаСтраницРаздела.Индекс(Строка);
					СвязьУстановлена = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;

			ВыводДанныхОФизическомЛице(СвязьУстановлена, ОргСведения, 3,, ТаблицаСтраницРаздела, ТекИндекс);
		КонецЕсли;

		Исключение
		КонецПопытки;

	КонецЕсли;

	АктивнаяСтр = ТаблицаСтраницРаздела.НайтиСтроки(Новый Структура("АктивнаяСтраница", Истина));

	Если АктивнаяСтр.Количество() > 0 Тогда
		
		АктивнаяСтр = АктивнаяСтр[0];

		Шаг = ТаблицаСтраницРаздела.Индекс(АктивнаяСтр);

	Иначе
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ВозвратитьПустойОбразЛистаФЛ()

	СтруктураДанных = Новый Структура;

	Для Каждого Стр из мПустойОбразЛистаФЛ Цикл
		СтруктураДанных.Вставить(Стр.Ключ, Стр.Значение);
	КонецЦикла;

	Возврат СтруктураДанных;

КонецФункции

&НаСервере
Процедура ВыводДанныхОФизическомЛице(Знач СвязьУстановлена, Знач Данные, ТипДанных, ОграниченияВыводаУчесть = Ложь, ТаблицаСтраницРазделаМ, ИндексВТабл);

	ФИО = "";
	Тел = "";
	ВидУдЛичн = "";
	КодУдЛичн = "";
	СерияУдЛичн = "";
	НомерУдЛичн = "";
	ОрганВыданУдЛичн = "";
	ДатаУдЛичн = РегламентированнаяОтчетностьКлиентСервер.ПустоеЗначениеТипа(Тип("Дата"));
	ИндексМЖ = "";
	СубъектМЖ = "";
	КодСубъектМЖ = "";
	РайонМЖ = "";
	ГородМЖ = "";
	НПунктМЖ = "";
	УлицаМЖ = "";
	ДомМЖ = "";
	КорпусМЖ = "";
	КвартираМЖ = "";
	МестоРожд = "";
	Гражд = "";
	ГраждСтрана = "";

	Пол = 0;

	ДатаРожд = РегламентированнаяОтчетностьКлиентСервер.ПустоеЗначениеТипа(Тип("Дата"));
	
	Данные.Свойство(?(ТипДанных = 1,"ФИОРук", ?(ТипДанных = 2, "ФИОБух", ?(ТипДанных = 3, "ФИОУпПред",""))), ФИО);
	Данные.Свойство(?(ТипДанных = 1,"ГраждРук", ?(ТипДанных = 2, "ГраждБух", ?(ТипДанных = 3, "ГраждУпПред",""))), Гражд);
	Данные.Свойство(?(ТипДанных = 1,"ГраждСтранаРук", ?(ТипДанных = 2, "ГраждСтранаБух", ?(ТипДанных = 3, "ГраждСтранаУпПред",""))), ГраждСтрана);
	Данные.Свойство(?(ТипДанных = 1,"ТелРук", ?(ТипДанных = 2, "ТелБух", ?(ТипДанных = 3, "ТелУпПред",""))), Тел);
	Данные.Свойство(?(ТипДанных = 1,"ВидУдЛичнРук", ?(ТипДанных = 2, "ВидУдЛичнБух", ?(ТипДанных = 3, "ВидУдЛичнУпПред",""))), ВидУдЛичн);
	Данные.Свойство(?(ТипДанных = 1,"КодУдЛичнРук", ?(ТипДанных = 2, "КодУдЛичнБух", ?(ТипДанных = 3, "КодУдЛичнУпПред",""))), КодУдЛичн);
	Данные.Свойство(?(ТипДанных = 1,"ДатаРождРук", ?(ТипДанных = 2, "ДатаРождБух", ?(ТипДанных = 3, "ДатаРождУпПред",""))), ДатаРожд);
	Данные.Свойство(?(ТипДанных = 1,"МестоРождРук", ?(ТипДанных = 2, "МестоРождБух", ?(ТипДанных = 3, "МестоРождУпПред",""))), МестоРожд);
	Данные.Свойство(?(ТипДанных = 1,"СерияУдЛичнРук", ?(ТипДанных = 2, "СерияУдЛичнБух", ?(ТипДанных = 3, "СерияУдЛичнУпПред",""))), СерияУдЛичн);
	Данные.Свойство(?(ТипДанных = 1,"НомерУдЛичнРук", ?(ТипДанных = 2, "НомерУдЛичнБух", ?(ТипДанных = 3, "НомерУдЛичнУпПред",""))), НомерУдЛичн);
	Данные.Свойство(?(ТипДанных = 1,"ПолРук", ?(ТипДанных = 2, "ПолБух", ?(ТипДанных = 3, "ПолУпПред",""))), Пол);
	Данные.Свойство(?(ТипДанных = 1,"ОрганВыданУдЛичнРук", ?(ТипДанных = 2, "ОрганВыданУдЛичнБух", ?(ТипДанных = 3, "ОрганВыданУдЛичнУпПред",""))), ОрганВыданУдЛичн);
	Данные.Свойство(?(ТипДанных = 1,"ДатаУдЛичнРук", ?(ТипДанных = 2, "ДатаУдЛичнБух", ?(ТипДанных = 3, "ДатаУдЛичнУпПред",""))), ДатаУдЛичн);
	Данные.Свойство(?(ТипДанных = 1,"ИндексМЖРук", ?(ТипДанных = 2, "ИндексМЖБух", ?(ТипДанных = 3, "ИндексМЖУпПред",""))), ИндексМЖ);
	Данные.Свойство(?(ТипДанных = 1,"СубъектМЖРук", ?(ТипДанных = 2, "СубъектМЖБух", ?(ТипДанных = 3, "СубъектМЖУпПред",""))), СубъектМЖ);
	Данные.Свойство(?(ТипДанных = 1,"КодСубъектМЖРук", ?(ТипДанных = 2, "КодСубъектМЖБух", ?(ТипДанных = 3, "КодСубъектМЖУпПред",""))), КодСубъектМЖ);
	Данные.Свойство(?(ТипДанных = 1,"РайонМЖРук", ?(ТипДанных = 2, "РайонМЖБух", ?(ТипДанных = 3, "РайонМЖУпПред",""))), РайонМЖ);
	Данные.Свойство(?(ТипДанных = 1,"ГородМЖРук", ?(ТипДанных = 2, "ГородМЖБух", ?(ТипДанных = 3, "ГородМЖУпПред",""))), ГородМЖ);
	Данные.Свойство(?(ТипДанных = 1,"НПунктМЖРук", ?(ТипДанных = 2, "НПунктМЖБух", ?(ТипДанных = 3, "НПунктМЖУпПред",""))), НПунктМЖ);
	Данные.Свойство(?(ТипДанных = 1,"УлицаМЖРук", ?(ТипДанных = 2, "УлицаМЖБух", ?(ТипДанных = 3, "УлицаМЖУпПред",""))), УлицаМЖ);
	Данные.Свойство(?(ТипДанных = 1,"ДомМЖРук", ?(ТипДанных = 2, "ДомМЖБух", ?(ТипДанных = 3, "ДомМЖУпПред",""))), ДомМЖ);
	Данные.Свойство(?(ТипДанных = 1,"КорпусМЖРук", ?(ТипДанных = 2, "КорпусМЖБух", ?(ТипДанных = 3, "КорпусМЖУпПред",""))), КорпусМЖ);
	Данные.Свойство(?(ТипДанных = 1,"КвартираМЖРук", ?(ТипДанных = 2, "КвартираМЖБух", ?(ТипДанных = 3, "КвартираМЖУпПред",""))), КвартираМЖ);

	 //Заполним ИНН/КПП предприятия на новой странице

	Если НЕ СвязьУстановлена Тогда

		// нужно создать новый экземпляр докумнта, предварительно сняв активность у активного листа
		// в случае, если ФИО в структуре числое, то считаем что лист готов для заполнения и пишем информацию в него
		СтрТаблицаСтраницы = ТаблицаСтраницРазделаМ.НайтиСтроки(Новый Структура("АктивнаяСтраница" ,Истина));
		Если СтрТаблицаСтраницы.Количество() = 0 Тогда
						
			Сообщение = Новый СообщениеПользователю;

			Сообщение.Текст = НСтр("ru='Ошибка установки активной страницы раздела ФЛ'");

			Сообщение.Сообщить();
			
		Иначе
			СтрТаблицаСтраницы = СтрТаблицаСтраницы[0];
		КонецЕсли;

		Если ПустаяСтрока(СтрТаблицаСтраницы.Данные[0].Значение.ФизЛицФИО) Тогда

			СтрокаДляВставкиДанных = СтрТаблицаСтраницы;

			// Пишем в этот лист

		Иначе

			// Убираем активность у текущей страницы
			
			СтрТаблицаСтраницы.АктивнаяСтраница = Ложь;

			СтрНоваяСтраница = ТаблицаСтраницРазделаМ.Добавить();

			// Присваиваем представление по умолчанию
			СтрНоваяСтраница.Представление      = "Новая страница";

			СтрНоваяСтраница.АвтоматическоеПредставление = Истина;

			СтрНоваяСтраница.АктивнаяСтраница = Истина;

			СтрНоваяСтраница.Данные.Добавить(ВозвратитьПустойОбразЛистаФЛ());
            
			СтрокаДляВставкиДанных = СтрНоваяСтраница;

		КонецЕсли;

	ИначеЕсли СвязьУстановлена Тогда

		// Пишем в раздел с индексом ИндексВТабл
		СтрокаДляВставкиДанных = ТаблицаСтраницРазделаМ[ИндексВТабл];
	КонецЕсли;

	// Определим простой порядковый номер
	ИндексСтроки = ТаблицаСтраницРазделаМ.Индекс(СтрокаДляВставкиДанных);

	// Теперь можно выводить данные на страницу
	Если (НЕ СвязьУстановлена) Тогда

		СтрокаДляВставкиДанных.Данные[0].Значение.ФизЛицФИО = ФИО;
		Представление = СтрокаДляВставкиДанных.Данные[0].Значение.ФизЛицФИО;
		СтрокаДляВставкиДанных.Данные[0].Представление = Представление + ". Лист N " + Строка(ИндексСтроки + 1);

	КонецЕсли;

	Если (НЕ СвязьУстановлена) Или (ПустаяСтрока(СтрокаДляВставкиДанных.Данные[0].Значение.ФизЛицСлТел)) Тогда
		
		СтрокаДляВставкиДанных.Данные[0].Значение.ФизЛицСлТел = СтруктураРеквизитовФормы.мТелОрганизации;
			
 	КонецЕсли;

	Попытка
		Если НЕ ОграниченияВыводаУчесть Тогда
			ГраждСтрана = ?(НЕ ЗначениеЗаполнено(ГраждСтрана), "лицо без гражданства", ГраждСтрана);

			Если (НЕ СвязьУстановлена) или (ПустаяСтрока(СтрокаДляВставкиДанных.Данные[0].Значение.ФизЛицГражданство)) Тогда
				
				СтрокаДляВставкиДанных.Данные[0].Значение.ФизЛицГражданство = ГраждСтрана;
				
			КонецЕсли;
		КонецЕсли;
	Исключение
	// В случае, если на листе ФЛ такого параметра нет, то пропускаем, и делаем все через Попытку/Исключить
	// чтобы сохранить универсальность и переносимость функции
	КонецПопытки;

	Попытка
		Если ТипДанных <> 2 Тогда

			КодСтраны = СтрокаДляВставкиДанных.Данные[0].Значение.ФизЛицКодГражд;

			Если (НЕ СвязьУстановлена)или (ПустаяСтрока(КодСтраны)) Тогда
				
				СтрокаДляВставкиДанных.Данные[0].Значение.ФизЛицКодГражд = Гражд;
				
			КонецЕсли;

		КонецЕсли;
	Исключение
	// В случае, если на листе ФЛ такого параметра нет, то пропускаем, и делаем все через Попытку/Исключить
	// чтобы сохранить универсальность и переносимость функции
	КонецПопытки;
	
	Если (НЕ СвязьУстановлена) или (ПустаяСтрока(СтрокаДляВставкиДанных.Данные[0].Значение.ФизЛицДокВид)) Тогда

		СтрокаДляВставкиДанных.Данные[0].Значение.ФизЛицДокВид = ВидУдЛичн;

	КонецЕсли;
	
	Если (НЕ СвязьУстановлена) Или (ПустаяСтрока(СтрокаДляВставкиДанных.Данные[0].Значение.ФизЛицДок)) Тогда
		
		СтрокаДляВставкиДанных.Данные[0].Значение.ФизЛицДок = КодУдЛичн;  

	КонецЕсли;

	Если (НЕ СвязьУстановлена) Или (ПустаяСтрока(СтрокаДляВставкиДанных.Данные[0].Значение.ФизЛицДокСерияНомер)) Тогда

		СтрокаДляВставкиДанных.Данные[0].Значение.ФизЛицДокСерияНомер = СерияУдЛичн + "  " + НомерУдЛичн;

	КонецЕсли;

	Если (НЕ СвязьУстановлена) Или (ПустаяСтрока(СтрокаДляВставкиДанных.Данные[0].Значение.ФизЛицДокВыдан)) Тогда

		СтрокаДляВставкиДанных.Данные[0].Значение.ФизЛицДокВыдан = ОрганВыданУдЛичн;

	КонецЕсли;
	
	Попытка
		Если НЕ ОграниченияВыводаУчесть Тогда
		// в некоторых декларация определенные параметры для бухгалтера ввыводить на лист не нужно
			Если (НЕ СвязьУстановлена) Тогда
				СтрокаДляВставкиДанных.Данные[0].Значение.Вставить("ФизЛицДатаР", ДатаРожд);
			Иначе
				Если НЕ ЗначениеЗаполнено(СтрокаДляВставкиДанных.Данные[0].Значение.ФизЛицДатаР) Тогда
					СтрокаДляВставкиДанных.Данные[0].Значение.Вставить("ФизЛицДатаР", ДатаРожд);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	Исключение
	// В случае, если на листе ФЛ такого параметра нет, то пропускаем, и делаем все через Попытку/Исключить
	// чтобы сохранить универсальность и переносимость функции
	КонецПопытки;

	Если НЕ ОграниченияВыводаУчесть Тогда
	// в некоторых декларация определенные параметры для бухгалтера ввыводить на лист не нужно
		Если (НЕ СвязьУстановлена) Тогда
			СтрокаДляВставкиДанных.Данные[0].Значение.ФизЛицМестоР = МестоРожд;
		Иначе
			Если НЕ ЗначениеЗаполнено(СтрокаДляВставкиДанных.Данные[0].Значение.ФизЛицМестоР) Тогда
				СтрокаДляВставкиДанных.Данные[0].Значение.ФизЛицМестоР = МестоРожд;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Если (НЕ СвязьУстановлена) Тогда
		
		СтрокаДляВставкиДанных.Данные[0].Значение.Вставить("ФизЛицДокДата", ДатаУдЛичн);
		
	Иначе

		Если НЕ ЗначениеЗаполнено(СтрокаДляВставкиДанных.Данные[0].Значение.ФизЛицДокДата) Тогда

			СтрокаДляВставкиДанных.Данные[0].Значение.Вставить("ФизЛицДокДата", ДатаУдЛичн);

		КонецЕсли;

	КонецЕсли;

	Если НЕ ОграниченияВыводаУчесть Тогда
	// в некоторых декларация определенные параметры для бухгалтера ввыводить на лист не нужно
		ПолМ = СтрокаДляВставкиДанных.Данные[0].Значение.ФизЛицПолМ;
		ПолЖ = СтрокаДляВставкиДанных.Данные[0].Значение.ФизЛицПолЖ;

		Если (НЕ СвязьУстановлена) Тогда

			СтрокаДляВставкиДанных.Данные[0].Значение.ФизЛицПолМ = ?(Пол = 1, "V", "");
			СтрокаДляВставкиДанных.Данные[0].Значение.ФизЛицПолЖ = ?(Пол = 2, "V", "");

		Иначе

			Если (НЕ ЗначениеЗаполнено(ПолЖ)) И (НЕ ЗначениеЗаполнено(ПолМ)) Тогда
				СтрокаДляВставкиДанных.Данные[0].Значение.ФизЛицПолМ = ?(Пол = 1, "V", "");
				СтрокаДляВставкиДанных.Данные[0].Значение.ФизЛицПолЖ = ?(Пол = 2, "V", "");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Если (НЕ СвязьУстановлена) Тогда
		
		СтрокаДляВставкиДанных.Данные[0].Значение.ФизЛицИнд = ИндексМЖ;

	Иначе

		Если ПустаяСтрока(СтрокаДляВставкиДанных.Данные[0].Значение.ФизЛицИнд) Тогда
			
			СтрокаДляВставкиДанных.Данные[0].Значение.ФизЛицИнд = ИндексМЖ;
                                                                                 
		КонецЕсли;
	КонецЕсли;

	Если (НЕ СвязьУстановлена) Тогда

		СтрокаДляВставкиДанных.Данные[0].Значение.ФизЛицСубъект = СубъектМЖ;

	Иначе

		Если ПустаяСтрока(СтрокаДляВставкиДанных.Данные[0].Значение.ФизЛицСубъект) Тогда
			СтрокаДляВставкиДанных.Данные[0].Значение.ФизЛицСубъект = СубъектМЖ;
		КонецЕсли;

	КонецЕсли;

	Если (НЕ СвязьУстановлена) Тогда

		СтрокаДляВставкиДанных.Данные[0].Значение.ФизЛицС = КодСубъектМЖ;

	Иначе

		Если ПустаяСтрока(СтрокаДляВставкиДанных.Данные[0].Значение.ФизЛицС) Тогда
			
			СтрокаДляВставкиДанных.Данные[0].Значение.ФизЛицС = КодСубъектМЖ;

		КонецЕсли;

	КонецЕсли;

	Если (НЕ СвязьУстановлена) Тогда

		СтрокаДляВставкиДанных.Данные[0].Значение.ФизЛицРайон = РайонМЖ;

	Иначе

		Если ПустаяСтрока(СтрокаДляВставкиДанных.Данные[0].Значение.ФизЛицРайон) Тогда
			СтрокаДляВставкиДанных.Данные[0].Значение.ФизЛицРайон = РайонМЖ;
		КонецЕсли;

	КонецЕсли;

	Если (НЕ СвязьУстановлена) Тогда
		СтрокаДляВставкиДанных.Данные[0].Значение.ФизЛицГород = ГородМЖ;
	Иначе
		Если ПустаяСтрока(СтрокаДляВставкиДанных.Данные[0].Значение.ФизЛицГород) Тогда
			СтрокаДляВставкиДанных.Данные[0].Значение.ФизЛицГород = ГородМЖ;
		КонецЕсли;
	КонецЕсли;

	Если (НЕ СвязьУстановлена) Тогда

		СтрокаДляВставкиДанных.Данные[0].Значение.ФизЛицНП = НПунктМЖ;

	Иначе

		Если ПустаяСтрока(СтрокаДляВставкиДанных.Данные[0].Значение.ФизЛицНП) Тогда
			СтрокаДляВставкиДанных.Данные[0].Значение.ФизЛицНП = НПунктМЖ;
		КонецЕсли;

	КонецЕсли;

	Если (НЕ СвязьУстановлена) Тогда

		СтрокаДляВставкиДанных.Данные[0].Значение.ФизЛицУлица = УлицаМЖ;

	Иначе

		Если ПустаяСтрока(СтрокаДляВставкиДанных.Данные[0].Значение.ФизЛицУлица) Тогда
			СтрокаДляВставкиДанных.Данные[0].Значение.ФизЛицУлица = УлицаМЖ;
		КонецЕсли;

	КонецЕсли;

	Если (НЕ СвязьУстановлена) Тогда

		СтрокаДляВставкиДанных.Данные[0].Значение.ФизЛицДом = ДомМЖ;

	Иначе

		Если ПустаяСтрока(СтрокаДляВставкиДанных.Данные[0].Значение.ФизЛицДом) Тогда
			СтрокаДляВставкиДанных.Данные[0].Значение.ФизЛицДом = ДомМЖ;
		КонецЕсли;

	КонецЕсли;

	Если (НЕ СвязьУстановлена) Тогда

		СтрокаДляВставкиДанных.Данные[0].Значение.ФизЛицКорпус = КорпусМЖ;

	Иначе

		Если ПустаяСтрока(СтрокаДляВставкиДанных.Данные[0].Значение.ФизЛицКорпус) Тогда

			СтрокаДляВставкиДанных.Данные[0].Значение.ФизЛицКорпус = КорпусМЖ;

		КонецЕсли;

	КонецЕсли;

	Если (НЕ СвязьУстановлена) Тогда

		СтрокаДляВставкиДанных.Данные[0].Значение.ФизЛицКвартира = КвартираМЖ;

	Иначе

		Если ПустаяСтрока(СтрокаДляВставкиДанных.Данные[0].Значение.ФизЛицКвартира) Тогда

			СтрокаДляВставкиДанных.Данные[0].Значение.ФизЛицКвартира = КвартираМЖ;

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура СформироватьДеревоРазделовОтчетаНаСервере() Экспорт
	
	СформироватьДеревоРазделовОтчета(ЭтаФорма);
			
КонецПроцедуры // СформироватьДеревоРазделовОтчетаНаСервере()

&НаКлиенте
Процедура СформироватьДеревоРазделовОтчетаНаКлиенте() Экспорт
	
	СформироватьДеревоРазделовОтчета(ЭтаФорма);
			
КонецПроцедуры // СформироватьДеревоРазделовОтчетаНаКлиенте()

&НаКлиентеНаСервереБезКонтекста
Процедура СформироватьДеревоРазделовОтчета(Форма)
	
	Форма["РазделыОтчета"].ПолучитьЭлементы().Очистить();
	
	Для Каждого ЭлементДереваСтраницОтчета Из Форма["мДеревоСтраницОтчета"].ПолучитьЭлементы() Цикл
		
		Если ЭлементДереваСтраницОтчета.ПоказатьСтраницу = 1 Тогда
			
			ЭлементРазделовОтчета = Форма["РазделыОтчета"].ПолучитьЭлементы().Добавить();
			ЭлементРазделовОтчета.КолонкаРазделыОтчета         = ЭлементДереваСтраницОтчета.Представление;
			ЭлементРазделовОтчета.КолонкаРазделыОтчетаСокрНаим = ЭлементДереваСтраницОтчета.ИмяСтраницы;
			ЭлементРазделовОтчета.ИндексКартинки               = 1;
			ЭлементРазделовОтчета.РазделМногостраничный        = Ложь;
			ЭлементРазделовОтчета.РазделМногострочный          = РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(Форма, "мТаблицаМногострочныхРазделов");
			
			НайденноеЗначение = Неопределено;
			
			Если Форма["мСтруктураМногостраничныхРазделов"].Свойство(ЭлементРазделовОтчета.КолонкаРазделыОтчетаСокрНаим, НайденноеЗначение) Тогда
				
				Если НЕ НайденноеЗначение = Неопределено Тогда
					
					НайденноеЗначение = Форма[НайденноеЗначение];
					
					ЭлементРазделовОтчета.ИндексКартинки        = 0;
					ЭлементРазделовОтчета.РазделМногостраничный = Истина;
					
					Для НомерСтраницы = 1 По НайденноеЗначение.Количество() Цикл
						
						СтраницаРазделаОтчета = ЭлементРазделовОтчета.ПолучитьЭлементы().Добавить();
						
						СтраницаРазделаОтчета.КолонкаРазделыОтчета              = "Стр. " + НомерСтраницы;
						СтраницаРазделаОтчета.КолонкаРазделыОтчетаСокрНаим      = ЭлементРазделовОтчета.КолонкаРазделыОтчетаСокрНаим;
						СтраницаРазделаОтчета.КолонкаНомерСтраницыРазделаОтчета = НомерСтраницы;
						СтраницаРазделаОтчета.ИндексКартинки                    = 1;
						СтраницаРазделаОтчета.РазделМногостраничный             = ЭлементРазделовОтчета.РазделМногостраничный;
						СтраницаРазделаОтчета.РазделМногострочный               = ЭлементРазделовОтчета.РазделМногострочный;
						
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЕсли;
				
		КонецЕсли;
		
	КонецЦикла;
			
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если СтрНайти(Заголовок, СтруктураРеквизитовФормы.СтрПериодОтчета) = 0 Тогда
		Заголовок = Заголовок + " за " + СтруктураРеквизитовФормы.СтрПериодОтчета;
	КонецЕсли;
	
	ОргСтр = " (" + СтруктураРеквизитовФормы.НаимОрганизации + ")";
	Если СтрНайти(Заголовок, ОргСтр) = 0 Тогда
		Заголовок = Заголовок + ОргСтр;
	КонецЕсли;
	
	Заголовок = Заголовок + ?(СтрНайти(ЭтаФорма.ИмяФормы, "Внешний") > 0, " - внешний отчет", "");
	
	ПодключитьОбработчикОжидания("ВыполнитьПроверкуПередОткрытием", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПроверкуПередОткрытием()
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПриОткрытииЗавершение", ЭтотОбъект);
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередОткрытиемФормыРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытииЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Модифицированность = Ложь;
		Закрыть();
		Возврат;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	РегламентированнаяОтчетностьКлиент.ПередЗакрытиемРегламентированногоОтчета(ЭтаФорма, Отказ, СтандартнаяОбработка, ЗавершениеРаботы, ТекстПредупреждения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ЗавершениеРаботы Тогда
				
		Возврат;
		
	КонецЕсли;
	
	ПриЗакрытииНаСервере();

КонецПроцедуры

&НаСервере
Процедура ПриЗакрытииНаСервере()
	
	РегламентированнаяОтчетность.ПриЗакрытииРегламентированногоОтчета(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура СохранитьДеревоСтраницОтчета(Знач мСохраненныйДок)
	
	Если мСохраненныйДок <> Неопределено Тогда
				
		Если ТипЗнч(мСохраненныйДок) = Тип("ДокументСсылка.РегламентированныйОтчет") Тогда
			мСохраненныйДок = мСохраненныйДок.ПолучитьОбъект();
		КонецЕсли;
		
		Если Не мСохраненныйДок.ЭтоНовый() Тогда
			// Сохраняем выбранные листы для печати в хранилище
			ХранилищеДанных = Новый ХранилищеЗначения(РеквизитФормыВЗначение("мДеревоСтраницОтчета"));
			мСохраненныйДок.ДеревоНастройкиСтраниц = ХранилищеДанных;
			Попытка
				мСохраненныйДок.Записать();
			Исключение
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РазделыОтчетаПриАктивизацииСтроки(Элемент)
	
	Если Элемент.ТекущиеДанные = Неопределено
	 ИЛИ Элемент.ТекущаяСтрока = СтруктураРеквизитовФормы.ТекущаяСтрокаРазделовОтчета Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураРеквизитовФормы.ТекущаяСтрокаРазделовОтчета = Элемент.ТекущаяСтрока;
	
	Если СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере Тогда
		
		Если Элемент.ТекущиеДанные.РазделМногостраничный Тогда
			
			Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета = ?(Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета = Неопределено
															        ИЛИ Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета = 0, 1, Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета);
																
		КонецЕсли;														
		
		ВывестиМакетСтраницыВТабличныйДокументНаСервере(Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим, Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета);
		
	Иначе
		
		СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Истина;
		
	КонецЕсли;
	
	Если Элемент.ТекущиеДанные.РазделМногостраничный  Тогда
		
		Элемент.Развернуть(Элемент.ТекущаяСтрока);
		
	КонецЕсли;
	
	Если Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Титульный" Тогда
		Элементы.Обновить.Доступность                  = Истина;
	Иначе
		Элементы.Обновить.Доступность                  = Ложь;
	КонецЕсли;
	
	Если Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Титульный"
		Или Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "ФизЛица" Тогда
		Элементы.ТабличныйДокументКонтекстноеМенюГруппаСтроки.Видимость = Ложь;
	Иначе
		Элементы.ТабличныйДокументКонтекстноеМенюГруппаСтроки.Видимость = Истина;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.СпрятатьСсылкуУдалитьСтраницу(ЭтаФорма);
	
	Элементы.ТабличныйДокумент.ТекущаяОбласть = ТабличныйДокумент.Область(1, 1);
	
КонецПроцедуры

&НаСервере
Процедура ВывестиМакетСтраницыВТабличныйДокументНаСервере(ИмяТекРаздела, НомерСтраницыРазделаОтчета)
	
	СохранитьДанныеРаздела(СтруктураРеквизитовФормы.НаимТекущегоРаздела, Истина);
	ВывестиМакетВТаблДокНаСервере(ИмяТекРаздела, НомерСтраницыРазделаОтчета);
	
	СтруктураРеквизитовФормы.НаимТекущегоРаздела  = ИмяТекРаздела;
	СтруктураРеквизитовФормы.НомерТекущейСтраницы = НомерСтраницыРазделаОтчета;
	
КонецПроцедуры

&НаСервере
Процедура СохранитьДанныеРаздела(НаимРаздела, ОчищатьРазделЕслиЕстьМногострочность, ИзменятьАктивнуюСтраницу = Истина)
	
	// Многостраничные разделы.
	//
	Если НаимРаздела = "ФизЛица" Тогда
	     			
		СтруктураДанных = Новый Структура;
		
		Для Каждого Область Из ТабличныйДокумент.Области Цикл
			
			Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
				СтруктураДанных.Вставить(Область.Имя, Область.Значение);
			КонецЕсли;
			
		КонецЦикла;
		
		Если НаимРаздела = "ФизЛица" Тогда
			
			НаимТаблицыСтраницы = "ТаблицаСтраницыФизЛица";
				
		КонецЕсли;
		
		АктивнаяСтраница = ЭтаФорма[НаимТаблицыСтраницы].НайтиСтроки(Новый Структура("АктивнаяСтраница", Истина));
		
		Если АктивнаяСтраница.Количество() > 0 Тогда
			
			АктивнаяСтраница = АктивнаяСтраница[0];
			
			АктивнаяСтраница.Данные.Очистить();
			АктивнаяСтраница.Данные.Добавить(СтруктураДанных);
			
			АктивнаяСтраница.АктивнаяСтраница = НЕ ИзменятьАктивнуюСтраницу;
			
		КонецЕсли;
		
	// Многострочные разделы.
	//
	ИначеЕсли НаимРаздела = "Раздел1_1"
	      ИЛИ НаимРаздела = "Раздел1_2"
		  ИЛИ НаимРаздела = "Раздел1_3"
		  ИЛИ НаимРаздела = "Раздел1_4" Тогда
		
		ЭтаФорма["СтруктураДанных" + НаимРаздела] = СобратьДанныеТекущегоТаблПоля(ЭтаФорма, "ТабличныйДокумент");
		
		Если НаимРаздела = "Раздел1_1" Тогда
			
			ОбновитьСтруктуруМногострочногоРазделаНаСервере(СтруктураРеквизитовФормы.мИдГруппы1);
			ОбновитьСтруктуруМногострочногоРазделаНаСервере(СтруктураРеквизитовФормы.мИдГруппы2);
			ОбновитьСтруктуруМногострочногоРазделаНаСервере(СтруктураРеквизитовФормы.мИдГруппы3);
			ОбновитьСтруктуруМногострочногоРазделаНаСервере(СтруктураРеквизитовФормы.мИдГруппы4);

		ИначеЕсли НаимРаздела = "Раздел1_2" Тогда
				
			ОбновитьСтруктуруМногострочногоРазделаНаСервере(СтруктураРеквизитовФормы.мИдГруппы5);
			ОбновитьСтруктуруМногострочногоРазделаНаСервере(СтруктураРеквизитовФормы.мИдГруппы6);
			ОбновитьСтруктуруМногострочногоРазделаНаСервере(СтруктураРеквизитовФормы.мИдГруппы7);
			ОбновитьСтруктуруМногострочногоРазделаНаСервере(СтруктураРеквизитовФормы.мИдГруппы8);
			
		ИначеЕсли НаимРаздела = "Раздел1_3" Тогда
				
			ОбновитьСтруктуруМногострочногоРазделаНаСервере(СтруктураРеквизитовФормы.мИдГруппы9);
			ОбновитьСтруктуруМногострочногоРазделаНаСервере(СтруктураРеквизитовФормы.мИдГруппы10);
			ОбновитьСтруктуруМногострочногоРазделаНаСервере(СтруктураРеквизитовФормы.мИдГруппы11);
			ОбновитьСтруктуруМногострочногоРазделаНаСервере(СтруктураРеквизитовФормы.мИдГруппы12);
		
		ИначеЕсли НаимРаздела = "Раздел1_4" Тогда
			ОбновитьСтруктуруМногострочногоРазделаНаСервере(СтруктураРеквизитовФормы.мИдГруппы13);
		КонецЕсли;
		
	// Обычные разделы.
	//
	Иначе	
		ЭтаФорма["СтруктураДанных" + НаимРаздела] = СобратьДанныеТекущегоТаблПоля(ЭтаФорма, "ТабличныйДокумент");	
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Функция СобратьДанныеТекущегоТаблПоляНаСервере(ИмяТабличногоПоля) Экспорт
	
	Возврат СобратьДанныеТекущегоТаблПоля(ЭтаФорма, ИмяТабличногоПоля);

КонецФункции

&НаКлиенте
Функция СобратьДанныеТекущегоТаблПоляНаКлиенте(ИмяТабличногоПоля) Экспорт
	
	Возврат СобратьДанныеТекущегоТаблПоля(ЭтаФорма, ИмяТабличногоПоля);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СобратьДанныеТекущегоТаблПоля(Форма, ИмяТабличногоПоля) Экспорт

	ТабличноеПоле = Форма[ИмяТабличногоПоля];
	СтруктураДанныхПоля = Новый Структура;
	Для Инд = 0 По ТабличноеПоле.Области.Количество() - 1 Цикл
		ТекущаяОбласть = ТабличноеПоле.Области[Инд];
		
		Если ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник И ТекущаяОбласть.СодержитЗначение = Истина Тогда
						
			ИмяПоказателя      = ТекущаяОбласть.Имя;
			ЗначениеПоказателя = ТекущаяОбласть.Значение;

			СтруктураДанныхПоля.Вставить(ИмяПоказателя, ЗначениеПоказателя);

		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СтруктураДанныхПоля;

КонецФункции

&НаКлиенте
Функция ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаКлиенте(ИмяЛиста = Неопределено) Экспорт
	
	ИдГрупп = Новый Структура;
	
	Возврат ОпределитьИдМногострочногоРазделаПоАктивнойСтранице(ЭтаФорма, ИмяЛиста, ИмяЛиста, ИдГрупп);

КонецФункции

&НаСервере
Функция ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ИмяЛиста = Неопределено) Экспорт
	
	ИдГрупп = Новый Структура;
	
	Возврат ОпределитьИдМногострочногоРазделаПоАктивнойСтранице(ЭтаФорма, ИмяЛиста, ИмяЛиста, ИдГрупп);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ОпределитьИдМногострочногоРазделаПоАктивнойСтранице(Форма, ИмяЛиста = Неопределено, ТекущаяСтраница, ИдГрупп)
	
	Перем ИмяГруппы;

	Если ИмяЛиста = Неопределено Тогда
		ИмяТекущейСтраницыПанели = ТекущаяСтраница.Имя;
	Иначе
		ИмяТекущейСтраницыПанели = ИмяЛиста;
	КонецЕсли;

	Если ИмяТекущейСтраницыПанели = "Раздел1_1" Тогда
		
		ИмяГруппы = РазделТекущейОбласти(Форма, Форма.Элементы.ТабличныйДокумент.ТекущаяОбласть);
		
	ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел1_2" Тогда
		
		ИмяГруппы = РазделТекущейОбласти(Форма, Форма.Элементы.ТабличныйДокумент.ТекущаяОбласть);
		
	ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел1_3" Тогда
		
		ИмяГруппы = РазделТекущейОбласти(Форма, Форма.Элементы.ТабличныйДокумент.ТекущаяОбласть);
		
	ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел1_4" Тогда
		
		ИмяГруппы = РазделТекущейОбласти(Форма, Форма.Элементы.ТабличныйДокумент.ТекущаяОбласть);
		
	КонецЕсли;

	Возврат ИмяГруппы;
	
КонецФункции

&НаКлиенте
Процедура ОбновитьСтруктуруМногострочногоРазделаНаКлиенте(ИмяГруппы) Экспорт
	РегламентированнаяОтчетностьКлиентСервер.ОбновитьСтруктуруМногострочногоРаздела(ЭтаФорма, ИмяГруппы);
КонецПроцедуры

&НаСервере
Процедура ОбновитьСтруктуруМногострочногоРазделаНаСервере(ИмяГруппы) Экспорт
	РегламентированнаяОтчетностьКлиентСервер.ОбновитьСтруктуруМногострочногоРаздела(ЭтаФорма, ИмяГруппы);
КонецПроцедуры

&НаСервере
Процедура ВывестиМакетВТаблДокНаСервере(ИмяТекРаздела, НомерСтраницыРазделаОтчета)
	
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + ИмяТекРаздела));
		
	// Многостраничные разделы.
	//
	Если ИмяТекРаздела = "ФизЛица" Тогда
	 
	    НаимТаблицыСтраницы = "ТаблицаСтраницыФизЛица";
	    
	    СтруктураДанных = Новый Структура;
	    
	    СписокДанных = ЭтаФорма[НаимТаблицыСтраницы][НомерСтраницыРазделаОтчета - 1].Данные;
		
		Для каждого ТаблицаСтраницы Из ЭтаФорма[НаимТаблицыСтраницы] Цикл
			ТаблицаСтраницы.АктивнаяСтраница = Ложь;
		КонецЦикла;
		
		ЭтаФорма[НаимТаблицыСтраницы][НомерСтраницыРазделаОтчета - 1].АктивнаяСтраница = Истина;
		
	    Если СписокДанных.Количество() > 0 Тогда
	    	СтруктураДанных = СписокДанных[0].Значение;
	    КонецЕсли;
	     	 
		Для Каждого ЭлСтруктуры Из СтруктураДанных Цикл
			Попытка
				ТабличныйДокумент.Области[ЭлСтруктуры.Ключ].Значение = ЭлСтруктуры.Значение;
			Исключение
			КонецПопытки;
	    КонецЦикла;
						
	// Многострочные разделы.
	//
	ИначеЕсли ИмяТекРаздела = "Раздел1_1" 
		  ИЛИ ИмяТекРаздела = "Раздел1_2"
		  ИЛИ ИмяТекРаздела = "Раздел1_3"
		  ИЛИ ИмяТекРаздела = "Раздел1_4" Тогда
		
		Для Каждого ЭлСтруктуры Из ЭтаФорма["СтруктураДанных" + ИмяТекРаздела] Цикл
			Попытка
				ТабличныйДокумент.Области[ЭлСтруктуры.Ключ].Значение = ЭлСтруктуры.Значение;
			Исключение
			КонецПопытки;
		КонецЦикла;
		
		СтруктураГруппы = Неопределено;
		
		Если ИмяТекРаздела = "Раздел1_1" Тогда
									
			мСтруктураМногострочныхРазделов.Свойство(СтруктураРеквизитовФормы.мИдГруппы1, СтруктураГруппы);
			СтруктураГруппы = ЭтаФорма[СтруктураГруппы];
			ВывестиРазделВТабличныйДокумент(ЭтаФорма, СтруктураРеквизитовФормы.мИдГруппы1, СтруктураГруппы);
			
		    мСтруктураМногострочныхРазделов.Свойство(СтруктураРеквизитовФормы.мИдГруппы2, СтруктураГруппы);
			СтруктураГруппы = ЭтаФорма[СтруктураГруппы];
			ВывестиРазделВТабличныйДокумент(ЭтаФорма, СтруктураРеквизитовФормы.мИдГруппы2, СтруктураГруппы);
			
			мСтруктураМногострочныхРазделов.Свойство(СтруктураРеквизитовФормы.мИдГруппы3, СтруктураГруппы);
			СтруктураГруппы = ЭтаФорма[СтруктураГруппы];
			ВывестиРазделВТабличныйДокумент(ЭтаФорма, СтруктураРеквизитовФормы.мИдГруппы3, СтруктураГруппы);
			
			мСтруктураМногострочныхРазделов.Свойство(СтруктураРеквизитовФормы.мИдГруппы4, СтруктураГруппы);
			СтруктураГруппы = ЭтаФорма[СтруктураГруппы];
			ВывестиРазделВТабличныйДокумент(ЭтаФорма, СтруктураРеквизитовФормы.мИдГруппы4, СтруктураГруппы);
			
		ИначеЕсли ИмяТекРаздела = "Раздел1_2" Тогда
			
			мСтруктураМногострочныхРазделов.Свойство(СтруктураРеквизитовФормы.мИдГруппы5, СтруктураГруппы);
			СтруктураГруппы = ЭтаФорма[СтруктураГруппы];
			ВывестиРазделВТабличныйДокумент(ЭтаФорма, СтруктураРеквизитовФормы.мИдГруппы5, СтруктураГруппы);
			
		    мСтруктураМногострочныхРазделов.Свойство(СтруктураРеквизитовФормы.мИдГруппы6, СтруктураГруппы);
			СтруктураГруппы = ЭтаФорма[СтруктураГруппы];
			ВывестиРазделВТабличныйДокумент(ЭтаФорма, СтруктураРеквизитовФормы.мИдГруппы6, СтруктураГруппы);
			
			мСтруктураМногострочныхРазделов.Свойство(СтруктураРеквизитовФормы.мИдГруппы7, СтруктураГруппы);
			СтруктураГруппы = ЭтаФорма[СтруктураГруппы];
			ВывестиРазделВТабличныйДокумент(ЭтаФорма, СтруктураРеквизитовФормы.мИдГруппы7, СтруктураГруппы);
			
			мСтруктураМногострочныхРазделов.Свойство(СтруктураРеквизитовФормы.мИдГруппы8, СтруктураГруппы);
			СтруктураГруппы = ЭтаФорма[СтруктураГруппы];
			ВывестиРазделВТабличныйДокумент(ЭтаФорма, СтруктураРеквизитовФормы.мИдГруппы8, СтруктураГруппы);
			
		ИначеЕсли ИмяТекРаздела = "Раздел1_3" Тогда
			
			мСтруктураМногострочныхРазделов.Свойство(СтруктураРеквизитовФормы.мИдГруппы9, СтруктураГруппы);
			СтруктураГруппы = ЭтаФорма[СтруктураГруппы];
			ВывестиРазделВТабличныйДокумент(ЭтаФорма, СтруктураРеквизитовФормы.мИдГруппы9, СтруктураГруппы);
			
		    мСтруктураМногострочныхРазделов.Свойство(СтруктураРеквизитовФормы.мИдГруппы10, СтруктураГруппы);
			СтруктураГруппы = ЭтаФорма[СтруктураГруппы];
			ВывестиРазделВТабличныйДокумент(ЭтаФорма, СтруктураРеквизитовФормы.мИдГруппы10, СтруктураГруппы);
			
			мСтруктураМногострочныхРазделов.Свойство(СтруктураРеквизитовФормы.мИдГруппы11, СтруктураГруппы);
			СтруктураГруппы = ЭтаФорма[СтруктураГруппы];
			ВывестиРазделВТабличныйДокумент(ЭтаФорма, СтруктураРеквизитовФормы.мИдГруппы11, СтруктураГруппы);
			
			мСтруктураМногострочныхРазделов.Свойство(СтруктураРеквизитовФормы.мИдГруппы12, СтруктураГруппы);
			СтруктураГруппы = ЭтаФорма[СтруктураГруппы];
			ВывестиРазделВТабличныйДокумент(ЭтаФорма, СтруктураРеквизитовФормы.мИдГруппы12, СтруктураГруппы);
			
		ИначеЕсли ИмяТекРаздела = "Раздел1_4" Тогда
			
			мСтруктураМногострочныхРазделов.Свойство(СтруктураРеквизитовФормы.мИдГруппы13, СтруктураГруппы);
			СтруктураГруппы = ЭтаФорма[СтруктураГруппы];
			ВывестиРазделВТабличныйДокумент(ЭтаФорма, СтруктураРеквизитовФормы.мИдГруппы13, СтруктураГруппы);
			
		КонецЕсли;

	// Обычные разделы.
	//	
	Иначе
		
		Для Каждого ЭлСтруктуры Из ЭтаФорма["СтруктураДанных" + ИмяТекРаздела] Цикл
			Попытка
				ТабличныйДокумент.Области[ЭлСтруктуры.Ключ].Значение = ЭлСтруктуры.Значение;
			Исключение
			КонецПопытки;
		КонецЦикла;
		
	КонецЕсли;
	
	Если ИмяТекРаздела <> "Титульный" Тогда
				
		УстановитьФорматВыводаНаСервере(ИмяТекРаздела);
		
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура ВывестиРазделВТабличныйДокументНаСервере(ИмяГруппы, СтруктураГруппы) Экспорт
	
	ВывестиРазделВТабличныйДокумент(ЭтаФорма, ИмяГруппы, СтруктураГруппы);
	
КонецПроцедуры

&НаКлиенте
Процедура ВывестиРазделВТабличныйДокументНаКлиенте(ИмяГруппы, СтруктураГруппы) Экспорт
	
	ВывестиРазделВТабличныйДокумент(ЭтаФорма, ИмяГруппы, СтруктураГруппы);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ВывестиРазделВТабличныйДокумент(Форма, ИмяГруппы, СтруктураГруппы)
	
	Перем ИсходноеКоличествоСтрокГруппы;

	// определим исходное колво строк многострочного раздела,
	// соответствующее бумажной форме отчета
	Форма.мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);

	// реальное кол-во строк (колво заполненных строк)
	ТекущееКоличествоСтрокГруппы = СтруктураГруппы.Количество();
	
	ТекТабличноеПолеИмя = "ТабличныйДокумент";
	
	ТекТабличноеПоле = Форма[ТекТабличноеПолеИмя];
			
	// При восстановлении сохраненных данных отчета сравниваем исходное кол-во
	// отображаемых в форме строк многострочного раздела с реальным количеством
	// созданных строк в сохраненном отчете.
	Если ТекущееКоличествоСтрокГруппы > ИсходноеКоличествоСтрокГруппы Тогда
        				
		Форма.ДобавитьНеобходимоеКоличествоДопСтрокНаСервере(ТекТабличноеПоле, ТекТабличноеПолеИмя, ИсходноеКоличествоСтрокГруппы, ТекущееКоличествоСтрокГруппы, ИмяГруппы, СтруктураГруппы);
		
		Форма[ТекТабличноеПолеИмя] = ТекТабличноеПоле;
						
	КонецЕсли;
	
	ТекТабличноеПоле = Форма[ТекТабличноеПолеИмя];

	// выводим значения строк
	Для Каждого СтрокаТаблицы Из СтруктураГруппы Цикл
		
		Для НомерГрафы = 1 По Форма.мСтруктураКолвоКолонокРазделов[ИмяГруппы] Цикл
			
			КолонкаТаблицыИмя = ИмяГруппы + Формат(НомерГрафы, "ЧЦ=2; ЧВН=");
			
			Если СтруктураГруппы[0].Свойство(КолонкаТаблицыИмя) Тогда
				
				НомерСтрокиВТаблице      = СтруктураГруппы.Индекс(СтрокаТаблицы);
				НомерСтрокиВФормеТаблицы = Формат(НомерСтрокиВТаблице + 1, "ЧГ=");
				ИмяЯчейки                = КолонкаТаблицыИмя + "_" + НомерСтрокиВФормеТаблицы;
				ОбластьЯчейкиТаблицы     = ТекТабличноеПоле.Области[ИмяЯчейки];
				ЗначениеЯчейки           = СтрокаТаблицы[КолонкаТаблицыИмя];
				
				Если ОбластьЯчейкиТаблицы.СодержитЗначение Тогда
					// задаем значение ячейки
					ОбластьЯчейкиТаблицы.Значение = ЗначениеЯчейки;
					
				Иначе
					// устанавливаем порядковый номер строки
					ОбластьЯчейкиТаблицы.Текст    = ЗначениеЯчейки;
					
				КонецЕсли;
				
			КонецЕсли;	
			
		КонецЦикла;
		
	КонецЦикла;
	
	Если СтруктураГруппы.Количество() = 1 Тогда 
		Обл = Форма.ТабличныйДокумент.Области["УдалитьСтроку" + ИмяГруппы + "01_1"];
		Обл.Текст = "";
		Обл.Гиперссылка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьНеобходимоеКоличествоДопСтрокНаСервере(ТекТабличноеПоле, ТекТабличноеПолеИмя, ИсходноеКоличествоСтрокГруппы, ТекущееКоличествоСтрокГруппы, ИмяГруппы, СтруктураГруппы) Экспорт
		
	ИмяОбласти = СтруктураРеквизитовФормы.мСоответствияМнгЧ[ИмяГруппы];
		
	ОбластьДопСтроки = ТекТабличноеПоле.ПолучитьОбласть(ИмяОбласти);
	
	МногострочнаяЧастьВерх = ТекТабличноеПоле.Области[ИмяОбласти].Верх;
			
	ТекТабличноеПоле.ВставитьОбласть(ОбластьДопСтроки.Область(), ТекТабличноеПоле.Область(МногострочнаяЧастьВерх + 1, , МногострочнаяЧастьВерх + ТекущееКоличествоСтрокГруппы - 1), ТипСмещенияТабличногоДокумента.ПоВертикали);
		
	Для НомНовойСтроки = ИсходноеКоличествоСтрокГруппы По ТекущееКоличествоСтрокГруппы Цикл
		
		Постфикс = Формат(ТекущееКоличествоСтрокГруппы - НомНовойСтроки + 1, "ЧГ=");
		
		Для Каждого Область Из ОбластьДопСтроки.Области Цикл
			
			ОбластьТаблДок = ТекТабличноеПоле.Область(МногострочнаяЧастьВерх + ТекущееКоличествоСтрокГруппы - НомНовойСтроки, Область.Лево, МногострочнаяЧастьВерх + ТекущееКоличествоСтрокГруппы - НомНовойСтроки, Область.Право);
			
			Если ОбластьТаблДок.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
				
				Если ОбластьТаблДок.СодержитЗначение Тогда
					ОбластьТаблДок.Очистить();
				КонецЕсли;
				
				ОбластьТаблДок.Имя = Лев(Область.Имя, СтрНайти(Область.Имя, "_")) + Постфикс;
				
			КонецЕсли;
			
		КонецЦикла;
						
	КонецЦикла;	
		
	ТекТабличноеПоле.Область(ТекТабличноеПоле.Области[ИмяОбласти].Верх, , ТекТабличноеПоле.Области[ИмяОбласти].Верх).Имя = "";
	
	ТекТабличноеПоле.Область(МногострочнаяЧастьВерх, , МногострочнаяЧастьВерх).Имя = ИмяОбласти;
	
КонецПроцедуры

&НаСервере
Процедура ВставитьОбластьВТабличныйДокументНаСервере(ТекТабличноеПолеИмя, ИсходноеКоличествоСтрокГруппы, ТекущееКоличествоСтрокГруппы, ИмяГруппы, СтруктураГруппы) Экспорт
	
	ТекТабличноеПоле = ЭтаФорма[ТекТабличноеПолеИмя];
	
	// При превышении реального кол-ва строк над исходным кол-вом (по шаблону),
	// автоматически добавляем необходимое колво строк.
	Для НомНовойСтроки = ИсходноеКоличествоСтрокГруппы + 1 По ТекущееКоличествоСтрокГруппы Цикл
		
		НомНовойСтрокиСтр = Формат(НомНовойСтроки, "ЧГ=");
		
		НомИсходнойСтроки = НомНовойСтроки - 1;
		НомИсходнойСтрокиСтр = Формат(НомИсходнойСтроки, "ЧГ=");
		
		НомерГрафы = 1;
		
		КолонкаТаблицыИмя = ИмяГруппы + Формат(НомерГрафы, "ЧЦ=2; ЧВН=");
		
		// определяем имя первой ячейки последней из исходных строк
		ИмяПервойЯчейкиПоследнейСтроки = КолонкаТаблицыИмя + "_" + НомИсходнойСтрокиСтр;
		
		// область первой ячейки последней из исходных строк
		ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяПервойЯчейкиПоследнейСтроки];
		
		// номера строк исходной области
		НомерВерхЯчейкиОбласти = ОбластьЯчейки.Верх;
		НомерНижнЯчейкиОбласти = ОбластьЯчейки.Низ;
		
		СдвигСтрок = НомерНижнЯчейкиОбласти - НомерВерхЯчейкиОбласти + 1;
		
		// номера строк вставляемой области
		НомерВерхЯчейкиНовойОбласти = НомерВерхЯчейкиОбласти + СдвигСтрок;
		НомерНижнЯчейкиНовойОбласти = НомерНижнЯчейкиОбласти + СдвигСтрок;
		
		РегламентированнаяОтчетностьВызовСервера.СпециальногоДобавленияСтроки(ТекТабличноеПоле, ТекТабличноеПолеИмя, ИмяГруппы, НомерВерхЯчейкиОбласти, НомерНижнЯчейкиОбласти);
		
		ЭтаФорма[ТекТабличноеПолеИмя] = ТекТабличноеПоле;
		                            		
		// переопределяем имена вставленной области
		Для НомерГрафы = 1 По мСтруктураКолвоКолонокРазделов[ИмяГруппы] Цикл
			
			КолонкаТаблицыИмя = ИмяГруппы + Формат(НомерГрафы, "ЧЦ=2; ЧВН=");	
			
			// переопределяем имена вставленной области
			Если СтруктураГруппы[0].Свойство(КолонкаТаблицыИмя) Тогда
				
				ИмяОбластиЯчейки    = КолонкаТаблицыИмя + "_" + НомИсходнойСтрокиСтр;
				ИмяНовОбластиЯчейки = КолонкаТаблицыИмя + "_" + НомНовойСтрокиСтр;
				
				ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяОбластиЯчейки];
				ОбластьЯчейки.Имя = ИмяНовОбластиЯчейки;
				
				// определяем границы ячейки исходной области
				НомерВерхСтрокиЯчейки  = ОбластьЯчейки.Верх - СдвигСтрок;
				НомерНижнСтрокиЯчейки  = ОбластьЯчейки.Низ  - СдвигСтрок;
				НомерЛевоКолонкиЯчейки = ОбластьЯчейки.Лево;
				НомерПравКолонкиЯчейки = ОбластьЯчейки.Право;
				
				// Назначаем имя ячейки исходной области,
				// (т.к. в результате вставки новой области оно было очищено)
				ОбластьЯчейкиИсходнойОбласти = ТекТабличноеПоле.Область(НомерВерхСтрокиЯчейки, НомерЛевоКолонкиЯчейки, НомерНижнСтрокиЯчейки, НомерПравКолонкиЯчейки);
				ОбластьЯчейкиИсходнойОбласти.Имя = ИмяОбластиЯчейки;
				
				// очищаем значения ячеек вставленной области
				Если ОбластьЯчейки.СодержитЗначение = Истина Тогда
					ОбластьЯчейки.Очистить();
				Иначе
					// порядковый номер последней строки перед вставкой
					ИсходныйНомер        = Число("0"+ОбластьЯчейки.Текст);
					НовыйПорядковыйНомер = ИсходныйНомер + 1;
					
					ОбластьЯчейки.Текст  = Строка(НовыйПорядковыйНомер);
				КонецЕсли;
				
			КонецЕсли;	
			
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьФорматВыводаНаСервере(НаимРаздела)
	
	УстановитьФорматВывода(ЭтаФорма, НаимРаздела);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьФорматВыводаНаКлиенте(НаимРаздела)
	
	УстановитьФорматВывода(ЭтаФорма, НаимРаздела);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьФорматВывода(Форма, НаимРаздела) Экспорт
	Перем СтруктураГруппы;
	Перем РазмерностьПрописьюТекст;

	Если Форма.СтруктураРеквизитовФормы.ЕдиницаИзмерения = Форма.ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1 Тогда
		Форма.СтруктураРеквизитовФормы.мДелитель = 1;
		РазмерностьПрописьюТекст = "в рублях";
		Форма.СтруктураРеквизитовФормы.мСтрокаФормата = "ЧЦ = 14; ЧДЦ = " + Форма.СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧС = 0";
		
	ИначеЕсли Форма.СтруктураРеквизитовФормы.ЕдиницаИзмерения = Форма.ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1000 Тогда
		Форма.СтруктураРеквизитовФормы.мДелитель = 1000;
		РазмерностьПрописьюТекст = "в тыс. рублей";
		Форма.СтруктураРеквизитовФормы.мСтрокаФормата = "ЧЦ = 14; ЧДЦ = " + Форма.СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧС = 3";
		
	ИначеЕсли Форма.СтруктураРеквизитовФормы.ЕдиницаИзмерения = Форма.ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1000000 Тогда
		Форма.СтруктураРеквизитовФормы.мДелитель = 1000000;
		РазмерностьПрописьюТекст = "в млн. рублей";
		Форма.СтруктураРеквизитовФормы.мСтрокаФормата = "ЧЦ = 14; ЧДЦ = " + Форма.СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧС = 6";
		
	КонецЕсли;
		
	Для Каждого СтрПоказатели Из Форма.мТаблицаСоставПоказателей Цикл

		Если НЕ НаимРаздела = СтрПоказатели.ИмяПоляТаблДокумента Тогда
			Продолжить;
		КонецЕсли;
		
		ИмяПоляТаблДокумента = СокрП(СтрПоказатели.ИмяПоляТаблДокумента);
		КодПоказателя        = СокрП(СтрПоказатели.КодПоказателяПоСоставу);
		ПризнМногострочность = СокрП(СтрПоказатели.ПризнМногострочности);
		
		Если КодПоказателя = "===" Тогда
			Прервать;
		КонецЕсли;

		Если (Лев(КодПоказателя, 2) = "//") ИЛИ (КодПоказателя = "###") Тогда
			Продолжить;
		КонецЕсли;

		КодПоказателяВФорме = СокрП(СтрПоказатели.КодПоказателяПоФорме);

		ИмяПоказателя = КодПоказателя;
		Если Не ПустаяСтрока(КодПоказателяВФорме) Тогда
			ИмяПоказателя = КодПоказателяВФорме;
		КонецЕсли;

		ТипДанныхПоказателя = СокрП(СтрПоказатели.ТипДанныхПоказателя);

		Если ТипДанныхПоказателя = "Е" Тогда

			ТекТабличноеПоле = Форма.ТабличныйДокумент;

			Если ПризнМногострочность <> "/" Тогда
				ФорматируемаяОбласть = ТекТабличноеПоле.Области[ИмяПоказателя];
				ФорматируемаяОбласть.ТипЗначения = Форма.СтруктураРеквизитовФормы.мОписаниеТиповЧислоЕ;
				ФорматируемаяОбласть.Формат = Форма.СтруктураРеквизитовФормы.мСтрокаФормата;
			Иначе
				// определяем кол-во строк многострочного раздела
				// и применяем процедуру форматирования к данной графе
				// по всем строкам
				ИмяГруппы = Лев(ИмяПоказателя, 11);
				Форма.мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);

				СтруктураГруппы = Форма[СтруктураГруппы];
				
				Для НСтр = 1 По СтруктураГруппы.Количество() Цикл
					ФорматируемаяОбласть = ТекТабличноеПоле.Области[ИмяПоказателя + "_" + Формат(НСтр, "ЧГ=")];
					ФорматируемаяОбласть.ТипЗначения = Форма.СтруктураРеквизитовФормы.мОписаниеТиповЧислоЕ;
					ФорматируемаяОбласть.Формат = Форма.СтруктураРеквизитовФормы.мСтрокаФормата;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ВосстановитьСохраненныеДанные()
	Перем ДанныеМногострочныхРазделов;
	Перем ДанныеМногостраничныхРазделов;
	Перем ДанныеВариановАвтоЗаполнения;
	Перем ПоказателиОтчета;
	Перем ВерсияФормы;
	Перем ТаблицаМногостраничногоДокумента;

	// В случае, если формы была скопирована по F9, то проверим, не изменилась ли организация.
	Если СтруктураРеквизитовФормы.Организация <> СтруктураРеквизитовФормы.мСохраненныйДок.Организация
	   И СтруктураРеквизитовФормы.Организация <> РегламентированнаяОтчетностьКлиентСервер.ПустоеЗначениеТипа("СправочникСсылка.Организации")
	   И СтруктураРеквизитовФормы.Организация <> Неопределено Тогда
		СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация = Истина;
	Иначе
		// восстанавливаем реквизиты отчета
		СтруктураРеквизитовФормы.Организация = СтруктураРеквизитовФормы.мСохраненныйДок.Организация;
	КонецЕсли;
	
	СтруктураРеквизитовФормы.ЕдиницаИзмерения         = СтруктураРеквизитовФормы.мСохраненныйДок.ЕдиницаИзмерения;
	СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = СтруктураРеквизитовФормы.мСохраненныйДок.ТочностьЕдиницыИзмерения;
	ДатаПодписи										  = СтруктураРеквизитовФормы.мСохраненныйДок.ДатаПодписи;
	Комментарий										  = СтруктураРеквизитовФормы.мСохраненныйДок.Комментарий;

	// восстанавливаем сохраненные данные отчета
	СписокСохранения = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить();

	// список листов, выводимых на печать
	ДеревоНастройкиСтраниц = СтруктураРеквизитовФормы.мСохраненныйДок.ДеревоНастройкиСтраниц.Получить();
	ЗначениеВРеквизитФормы(ДеревоНастройкиСтраниц.Скопировать(), "мДеревоСтраницОтчета");

	// восстанавливаем сохраненные данные вариантов автозаполнения ячеек
	Если СписокСохранения.Свойство("ДанныеВариантовАвтоЗаполнения", ДанныеВариановАвтоЗаполнения) Тогда
		
		Если НЕ ДанныеВариановАвтоЗаполнения = Неопределено Тогда
			
			мСтруктураВариантыЗаполнения.Очистить();
			
			Для Каждого ЭлементСтруктуры Из ДанныеВариановАвтоЗаполнения Цикл
				
				мСтруктураВариантыЗаполнения.Вставить(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Ключ);
				
				ЭтаФорма["ТаблицаВариантыЗаполнения" + ЭлементСтруктуры.Ключ].Очистить();
				
				Для Каждого ЭлементМассива Из ЭлементСтруктуры.Значение Цикл
										
					ТаблВарЗаполнения = ЭтаФорма["ТаблицаВариантыЗаполнения" + ЭлементСтруктуры.Ключ].Добавить().ТаблицаВариантовЗаполнения;
										
					ЗначениеВДанныеФормы(ЭлементМассива, ТаблВарЗаполнения);
					
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// восстановим сохраненные данные редактируемых ячеек
	СписокСохранения.Свойство( "ПоказателиОтчета", ПоказателиОтчета );
	
	// восстанавливаем версию формы
	Если СписокСохранения.Свойство("ВерсияФормы", ВерсияФормы) Тогда
		Если ВерсияФормы <> СтруктураРеквизитовФормы.мВерсияФормы Тогда
			// Версия формы изменилась.
			// Обновляем пользовательские настройки.
			ОбновитьПользовательскиеНастройки();
		КонецЕсли;
	КонецЕсли;
	
	// восстанавливаем сохраненные данные многострочных разделов
	Если СписокСохранения.Свойство( "ДанныеМногострочныхРазделов", ДанныеМногострочныхРазделов) Тогда
		
		Для Каждого ЭлементСтруктуры Из ДанныеМногострочныхРазделов Цикл
			
			НайденноеЗначение = Неопределено;
			
			мСтруктураМногострочныхРазделов.Свойство(ЭлементСтруктуры.Ключ, НайденноеЗначение);
			
			Если НЕ НайденноеЗначение = Неопределено Тогда
				
				ЗначениеВДанныеФормы(ЭлементСтруктуры.Значение, ЭтаФорма[НайденноеЗначение])
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	// восстанавливаем сохраненные данные многостраничных разделов
	Если СписокСохранения.Свойство("ДанныеМногостраничныхРазделов", ДанныеМногостраничныхРазделов) Тогда
		Для Каждого ЭлементСтруктуры Из ДанныеМногостраничныхРазделов Цикл
			
			НайденноеЗначение = Неопределено;
			
			мСтруктураМногостраничныхРазделов.Свойство(ЭлементСтруктуры.Ключ, НайденноеЗначение);
			
			Если НЕ НайденноеЗначение = Неопределено Тогда
				
				НайденноеЗначение = ЭтаФорма[НайденноеЗначение];
				
				ЗначениеВДанныеФормы(ЭлементСтруктуры.Значение, НайденноеЗначение);
				
				Если НайденноеЗначение[0].Свойство("Данные") Тогда
					
					Для Каждого СтрокаТаблЗнач Из НайденноеЗначение Цикл
						
						Если ТипЗнч(СтрокаТаблЗнач.Данные) = Тип("СписокЗначений") Тогда
							
							СтрокаТаблЗнач.Данные.Очистить();
							
							СтрокаТаблЗнач.Данные.Добавить(ЭлементСтруктуры.Значение[НайденноеЗначение.Индекс(СтрокаТаблЗнач)].Данные);
							
						КонецЕсли;
						
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;      	
		
	// восстанавливаем флажок ПодсчетаСтраниц
	СписокСохранения.Свойство("ФлПодсчетСтраниц", СтруктураРеквизитовФормы.мСчетчикСтраниц);
    
	СформироватьДеревоРазделовОтчетаНаСервере();
	
	Префикс = "ПолеТабличногоДокумента";
	
    Для Каждого Раздел Из мСвойстваРазделовДекларации.ПолучитьЭлементы() Цикл	
		
		Если НЕ Раздел.МногостраничностьВРазделе Тогда
			ЭтаФорма["СтруктураДанных" + Раздел.ИмяСтраницы] = ПоказателиОтчета[Префикс + Раздел.ИмяСтраницы];
		КонецЕсли;
	
	КонецЦикла;
	
	ВосстановитьСведенияОбОрганизацииИзТитульногоЛистаСтарогоОбразца(ПоказателиОтчета);
	ВосстановитьСведенияОФизическихЛицахИзЛистаФизЛицаСтарогоОбразца();
	
	ИмяТекРаздела = "Титульный";
	
	Для Каждого ЭлСтруктуры Из ЭтаФорма["СтруктураДанных" + ИмяТекРаздела] Цикл
		Попытка
			ТабличныйДокумент.Области[ЭлСтруктуры.Ключ].Значение = ЭлСтруктуры.Значение;
		Исключение
		КонецПопытки;
	КонецЦикла;
		
	РегламентированнаяОтчетность.ОперацииПриВосстановленииРегламентированногоОтчета(ЭтаФорма);

	// Управляем видимостью страниц основной панели формы
	КопироватьДанныеФормы(мДеревоСтраницОтчета, мДеревоВыбранныхСтраниц);

	Модифицированность   = Ложь;

	СтруктураРеквизитовФормы.мДокументВосстановлен = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьСведенияОбОрганизацииИзТитульногоЛистаСтарогоОбразца(ПоказателиОтчета)
	
	ПоказателиТаблПоле = ПоказателиОтчета["ПолеТабличногоДокументаТитульный"];
	
	Для Каждого Показатель Из ПоказателиТаблПоле Цикл
		
		ИмяПоказателя = Показатель.Ключ;
		
		Если ИмяПоказателя = "ИНН1_1" Тогда
			СтруктураДанныхТитульный.Вставить("ИНН1");
			Для Ном = 1 По 12 Цикл
				СтруктураДанныхТитульный.ИНН1 = СокрЛП(СтруктураДанныхТитульный.ИНН1) + ПоказателиТаблПоле["ИНН1_" + Ном];
				СтруктураДанныхТитульный.Удалить("ИНН1_" + Ном);
			КонецЦикла;
			Если Лев(СтруктураДанныхТитульный.ИНН1, 2) = "00" Тогда
				СтруктураДанныхТитульный.ИНН1 = Сред(СтруктураДанныхТитульный.ИНН1, 3);
			КонецЕсли;
			Если Прав(СтруктураДанныхТитульный.ИНН1, 2) = "--" Тогда
				СтруктураДанныхТитульный.ИНН1 = Лев(СтруктураДанныхТитульный.ИНН1, СтрНайти(СтруктураДанныхТитульный.ИНН1, "--") - 1);
			КонецЕсли;
		ИначеЕсли ИмяПоказателя = "КПП1_1" Тогда
			СтруктураДанныхТитульный.Вставить("КПП1");
			Для Ном = 1 По 9 Цикл
				СтруктураДанныхТитульный.КПП1 = СокрЛП(СтруктураДанныхТитульный.КПП1) + ПоказателиТаблПоле["КПП1_" + Ном];
				СтруктураДанныхТитульный.Удалить("КПП1_" + Ном);
			КонецЦикла;
		ИначеЕсли ИмяПоказателя = "ОтчетГод1" Тогда
			СтруктураДанныхТитульный.Вставить("ОтчетГод");
			Для Ном = 1 По 4 Цикл
				СтруктураДанныхТитульный.ОтчетГод = СокрЛП(СтруктураДанныхТитульный.ОтчетГод) + ПоказателиТаблПоле["ОтчетГод" + Ном];
				СтруктураДанныхТитульный.Удалить("ОтчетГод" + Ном);
			КонецЦикла;						
		ИначеЕсли ИмяПоказателя = "КодИМНС1" Тогда
			СтруктураДанныхТитульный.Вставить("КодИМНС");
			Для Ном = 1 По 4 Цикл
				СтруктураДанныхТитульный.КодИМНС = СокрЛП(СтруктураДанныхТитульный.КодИМНС) + ПоказателиТаблПоле["КодИМНС" + Ном];
				СтруктураДанныхТитульный.Удалить("КодИМНС" + Ном);
			КонецЦикла;	
		ИначеЕсли ИмяПоказателя = "ИноСтрКод1" Тогда
			СтруктураДанныхТитульный.Вставить("ИноСтрКод");
			Для Ном = 1 По 2 Цикл
				СтруктураДанныхТитульный.ИноСтрКод = СокрЛП(СтруктураДанныхТитульный.ИноСтрКод) + ПоказателиТаблПоле["ИноСтрКод" + Ном];
				СтруктураДанныхТитульный.Удалить("ИноСтрКод" + Ном);
			КонецЦикла;	
		ИначеЕсли ИмяПоказателя = "ИноСтрКодПост1" Тогда
			СтруктураДанныхТитульный.Вставить("ИноСтрКодПост");
			Для Ном = 1 По 2 Цикл
				СтруктураДанныхТитульный.ИноСтрКодПост = СокрЛП(СтруктураДанныхТитульный.ИноСтрКодПост) + ПоказателиТаблПоле["ИноСтрКодПост" + Ном];
				СтруктураДанныхТитульный.Удалить("ИноСтрКодПост" + Ном);
			КонецЦикла;	
		ИначеЕсли ИмяПоказателя = "ОГРН1" Тогда
			СтруктураДанныхТитульный.Вставить("ОГРН");
			Для Ном = 1 По 13 Цикл
				СтруктураДанныхТитульный.ОГРН = СокрЛП(СтруктураДанныхТитульный.ОГРН) + ПоказателиТаблПоле["ОГРН" + Ном];
				СтруктураДанныхТитульный.Удалить("ОГРН" + Ном);
			КонецЦикла;	
		ИначеЕсли ИмяПоказателя = "ИННРук1" Тогда
			СтруктураДанныхТитульный.Вставить("ИННРук");
			Для Ном = 1 По 12 Цикл
				СтруктураДанныхТитульный.ИННРук = СокрЛП(СтруктураДанныхТитульный.ИННРук) + ПоказателиТаблПоле["ИННРук" + Ном];
				СтруктураДанныхТитульный.Удалить("ИННРук" + Ном);
			КонецЦикла;
			Если Лев(СтруктураДанныхТитульный.ИННРук, 2) = "00" Тогда
				СтруктураДанныхТитульный.ИННРук = Сред(СтруктураДанныхТитульный.ИННРук, 3);
			КонецЕсли;
			Если Прав(СтруктураДанныхТитульный.ИННРук, 2) = "--" Тогда
				СтруктураДанныхТитульный.ИННРук = Лев(СтруктураДанныхТитульный.ИННРук, СтрНайти(СтруктураДанныхТитульный.ИННРук, "--") - 1);
			КонецЕсли;
		ИначеЕсли ИмяПоказателя = "ИННГБ1" Тогда
			СтруктураДанныхТитульный.Вставить("ИННГБ");
			Для Ном = 1 По 12 Цикл
				СтруктураДанныхТитульный.ИННГБ = СокрЛП(СтруктураДанныхТитульный.ИННГБ) + ПоказателиТаблПоле["ИННГБ" + Ном];
				СтруктураДанныхТитульный.Удалить("ИННГБ" + Ном);
			КонецЦикла;
			Если Лев(СтруктураДанныхТитульный.ИННГБ, 2) = "00" Тогда
				СтруктураДанныхТитульный.ИННГБ = Сред(СтруктураДанныхТитульный.ИННГБ, 3);
			КонецЕсли;
			Если Прав(СтруктураДанныхТитульный.ИННГБ, 2) = "--" Тогда
				СтруктураДанныхТитульный.ИННГБ = Лев(СтруктураДанныхТитульный.ИННГБ, СтрНайти(СтруктураДанныхТитульный.ИННГБ, "--") - 1);
			КонецЕсли;
		ИначеЕсли ИмяПоказателя = "ИННУП1" Тогда
			СтруктураДанныхТитульный.Вставить("ИННУП");
			Для Ном = 1 По 12 Цикл
				СтруктураДанныхТитульный.ИННУП = СокрЛП(СтруктураДанныхТитульный.ИННУП) + ПоказателиТаблПоле["ИННУП" + Ном];
				СтруктураДанныхТитульный.Удалить("ИННУП" + Ном);
			КонецЦикла;
			Если Лев(СтруктураДанныхТитульный.ИННУП, 2) = "00" Тогда
				СтруктураДанныхТитульный.ИННУП = Сред(СтруктураДанныхТитульный.ИННУП, 3);
			КонецЕсли;
			Если Прав(СтруктураДанныхТитульный.ИННУП, 2) = "--" Тогда
				СтруктураДанныхТитульный.ИННУП = Лев(СтруктураДанныхТитульный.ИННУП, СтрНайти(СтруктураДанныхТитульный.ИННУП, "--") - 1);
			КонецЕсли;
		ИначеЕсли ИмяПоказателя = "СоставленаНа1" Тогда
			СтруктураДанныхТитульный.Вставить("СоставленаНа");
			Для Ном = 1 По 2 Цикл
				СтруктураДанныхТитульный.СоставленаНа = СокрЛП(СтруктураДанныхТитульный.СоставленаНа) + ПоказателиТаблПоле["СоставленаНа" + Ном];
				СтруктураДанныхТитульный.Удалить("СоставленаНа" + Ном);
			КонецЦикла;	
		КонецЕсли;
		
	КонецЦикла;
	
	ЗаполнитьДатуПодписи(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьСведенияОФизическихЛицахИзЛистаФизЛицаСтарогоОбразца()
	
	Для Каждого ЭлементТабл Из ЭтаФорма[мСтруктураМногостраничныхРазделов.ФизЛица] Цикл
		
		ЭлементТабл.АктивнаяСтраница = Ложь;
		
		ПоказателиТаблПоле = ЭлементТабл.Данные[0].Значение;
		
		СтруктураДанныхФизЛица = ЭлементТабл.Данные[0].Значение;
		
		Для Каждого Показатель Из ПоказателиТаблПоле Цикл
			
			ИмяПоказателя = Показатель.Ключ;
			
			Если ИмяПоказателя = "ФизЛицДатаР1" Тогда
				СтруктураДанныхФизЛица.Вставить("ФизЛицДатаР");
				Для Ном = 1 По 8 Цикл
					СтруктураДанныхФизЛица.ФизЛицДатаР = СокрЛП(СтруктураДанныхФизЛица.ФизЛицДатаР) + ПоказателиТаблПоле["ФизЛицДатаР" + Ном];
					СтруктураДанныхФизЛица.Удалить("ФизЛицДатаР" + Ном);
				КонецЦикла;
				Если ЗначениеЗаполнено(СтруктураДанныхФизЛица.ФизЛицДатаР) Тогда
					СтруктураДанныхФизЛица.ФизЛицДатаР = Дата(Сред(СтруктураДанныхФизЛица.ФизЛицДатаР, 5) + Сред(СтруктураДанныхФизЛица.ФизЛицДатаР, 3, 2) + Лев(СтруктураДанныхФизЛица.ФизЛицДатаР, 2));
				КонецЕсли	
			ИначеЕсли ИмяПоказателя = "ФизЛицКодГражд1" Тогда
				СтруктураДанныхФизЛица.Вставить("ФизЛицКодГражд");
				Для Ном = 1 По 3 Цикл
					СтруктураДанныхФизЛица.ФизЛицКодГражд = СокрЛП(СтруктураДанныхФизЛица.ФизЛицКодГражд) + ПоказателиТаблПоле["ФизЛицКодГражд" + Ном];
					СтруктураДанныхФизЛица.Удалить("ФизЛицКодГражд" + Ном);
				КонецЦикла;
			ИначеЕсли ИмяПоказателя = "ФизЛицДок1" Тогда
				СтруктураДанныхФизЛица.Вставить("ФизЛицДок");
				Для Ном = 1 По 2 Цикл
					СтруктураДанныхФизЛица.ФизЛицДок = СокрЛП(СтруктураДанныхФизЛица.ФизЛицДок) + ПоказателиТаблПоле["ФизЛицДок" + Ном];
					СтруктураДанныхФизЛица.Удалить("ФизЛицДок" + Ном);
				КонецЦикла;
			ИначеЕсли ИмяПоказателя = "ФизЛицДокДата1" Тогда
				СтруктураДанныхФизЛица.Вставить("ФизЛицДокДата");
				Для Ном = 1 По 8 Цикл
					СтруктураДанныхФизЛица.ФизЛицДокДата = СокрЛП(СтруктураДанныхФизЛица.ФизЛицДокДата) + ПоказателиТаблПоле["ФизЛицДокДата" + Ном];
					СтруктураДанныхФизЛица.Удалить("ФизЛицДокДата" + Ном);
				КонецЦикла;
				Если ЗначениеЗаполнено(СтруктураДанныхФизЛица.ФизЛицДокДата) Тогда
					СтруктураДанныхФизЛица.ФизЛицДокДата = Дата(Сред(СтруктураДанныхФизЛица.ФизЛицДокДата, 5) + Сред(СтруктураДанныхФизЛица.ФизЛицДокДата, 3, 2) + Лев(СтруктураДанныхФизЛица.ФизЛицДокДата, 2));
				КонецЕсли	
			ИначеЕсли ИмяПоказателя = "ФизЛицИнд1" Тогда
				СтруктураДанныхФизЛица.Вставить("ФизЛицИнд");
				Для Ном = 1 По 6 Цикл
					СтруктураДанныхФизЛица.ФизЛицИнд = СокрЛП(СтруктураДанныхФизЛица.ФизЛицИнд) + ПоказателиТаблПоле["ФизЛицИнд" + Ном];
					СтруктураДанныхФизЛица.Удалить("ФизЛицИнд" + Ном);
				КонецЦикла;		
			ИначеЕсли ИмяПоказателя = "ФизЛицС1" Тогда
				СтруктураДанныхФизЛица.Вставить("ФизЛицС");
				Для Ном = 1 По 2 Цикл
					СтруктураДанныхФизЛица.ФизЛицС = СокрЛП(СтруктураДанныхФизЛица.ФизЛицС) + ПоказателиТаблПоле["ФизЛицС" + Ном];
					СтруктураДанныхФизЛица.Удалить("ФизЛицС" + Ном);
				КонецЦикла;			
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьПользовательскиеНастройки()
	
	Сообщение = Новый СообщениеПользователю;

	Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Изменилась версия формы отчета.%1Выполняется обновление пользовательских настроек.'"), Символы.ПС);

	Сообщение.Сообщить();
				
	// Обновляем варианты заполнения показателей отчета
	ЕстьИзмененияВариантыЗаполнения = ОбновитьВариантыЗаполнения();

	// Обновляем настройки страниц отчета (содержание отчета)
	ЕстьИзмененияНастройкаСтраниц   = ОбновитьНастройкиСтраниц();

	Если ЕстьИзмененияВариантыЗаполнения ИЛИ ЕстьИзмененияНастройкаСтраниц Тогда
		// Если были изменения в пользовательских настройках,
		// то устанавливаем флаг модифицированности формы.
		Модифицированность = Истина;
		Сообщение = Новый СообщениеПользователю;

		Сообщение.Текст = НСтр("ru='Обновление пользовательских настроек успешно завершено!'");

		Сообщение.Сообщить();

	Иначе

		Сообщение = Новый СообщениеПользователю;

		Сообщение.Текст = НСтр("ru='Изменения в структуре пользовательских настроек не обнаружены!'");

		Сообщение.Сообщить();

	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ОбновитьВариантыЗаполнения()
	Перем МассивВариантовЗаполненияСтраниц;

	ЕстьИзменения = Ложь;

	// Подлежат обновлению следующие структуры:
	// 1.Пользовательские настройки вариантов заполнения таблиц

	// Сначала создадим эталонные модели вариантов автозаполнения таблиц.
	// Их определяем по макету СоставПоказателей
	МакетСоставаПоказателей = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(СтруктураРеквизитовФормы.мСоставПоказателей);

	ОписаниеТиповСтрока15   = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(15));
	ОписаниеТиповСтрока100  = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100));
	ОписаниеТиповСтрока50   = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(50));
	ОписаниеТиповЧисло1     = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(1));
	ОписаниеТиповЧисло15    = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2));

	ЕстьИзменения = Ложь;

	Для Инд = 0 По МакетСоставаПоказателей.Области.Количество() - 1 Цикл
		// организован цикл по именованным областям макета,
		// содержащим состав показателей и варианты автозаполнения
		// таблиц на каждой странице основной панели формы.

		ТекОбласть  = МакетСоставаПоказателей.Области[Инд];
		ИмяСтраницы = ТекОбласть.Имя;

		// Таблица значений содержит информацию о вариантах заполнения показателя отчета.
		// В колонках таблицы значений отображается следующая информация:
		//   - имя ячейки (код показателя);
		//   - вариант заполнения ячейки;
		//   - вычисленное по данным ИБ значение ячейки;
		//   - величина автокорректировки значения ячейки;
		//   - примечание к ячейке.
		//
		ТаблицаВариантыЗаполнения = Новый ТаблицаЗначений;
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "КодПоказателя",     ОписаниеТиповСтрока15  );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "ВариантЗаполнения", ОписаниеТиповЧисло1    );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "ЗначениеАвто",      ОписаниеТиповЧисло15   );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "Дельта",            ОписаниеТиповЧисло15   );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "Комментарий",       ОписаниеТиповСтрока100 );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "КодПоказателяПоСтруктуре",       ОписаниеТиповСтрока50 ); 
		
		Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
			// перебираем строки макета

			// Код показателя (по составу показателей) определяется по первой колонке макета
			КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
			ИмяПоказателя = КодПоказателя;

			Если КодПоказателя = "===" Тогда         // признак конечной строки
				Прервать;
			КонецЕсли;

			Если Лев(КодПоказателя, 2) = "//" Тогда  // пропускаем комментарии
				Продолжить;
			КонецЕсли;

			// код показателя по форме отчете (имя ячейки в полях табличного документа формы)
			КодПоказателяПоФорме = СокрЛП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
			// вариант заполнения ячейки определяется по колонке 6 макета
			стрВариантЗаполнения = РегламентированнаяОтчетность.ПолучитьВариантЗаполненияПоказателяРегОтчета(МакетСоставаПоказателей, Ном);

			чВариантЗаполнения   = ? (ПустаяСтрока(стрВариантЗаполнения), 0, Число(стрВариантЗаполнения));
			Если чВариантЗаполнения <> 0 Тогда
				// Если в колонке 6 задан варианет заполнения показателя, 
				// то его значение может определяться по данным ИБ.
				// Дополняем таблицу значений вариантов заполнения
				НоваяСтрока = ТаблицаВариантыЗаполнения.Добавить();
				НоваяСтрока.КодПоказателя      = ? (Не ПустаяСтрока(КодПоказателяПоФорме), КодПоказателяПоФорме, КодПоказателя);
				НоваяСтрока.ВариантЗаполнения  = чВариантЗаполнения;
			КонецЕсли;

		КонецЦикла;

		Если Не мСтруктураВариантыЗаполнения.Свойство(ИмяСтраницы, МассивВариантовЗаполненияСтраниц) Тогда
			
			МассивВариантовЗаполненияСтраниц = ЭтаФорма["ТаблицаВариантыЗаполнения" + ИмяСтраницы];
			
			Если ТаблицаВариантыЗаполнения.Количество() > 0 Тогда
								
				// Рассмотрим вариант, когда в предыдущей версии формы по данной странице
				// не было предусмотрено автозаполнение по данным ИБ.
				// Добавим такую возможность в пользовательскую настройку
				
				МассивВариантовЗаполненияСтраниц.Очистить();
				// Первым элементом массива является "эталонная" таблица значений вариантов заполнения
				МассивВариантовЗаполненияСтраниц.Добавить(ТаблицаВариантыЗаполнения);

				// сохраняем варианты заполнения таблиц на данной странице
				мСтруктураВариантыЗаполнения.Вставить(ИмяСтраницы, ИмяСтраницы);

				ЕстьИзменения = Истина;				
				
			КонецЕсли;
		Иначе
			
			МассивВариантовЗаполненияСтраниц = ЭтаФорма["ТаблицаВариантыЗаполнения" + ИмяСтраницы];
			
			Если ТаблицаВариантыЗаполнения.Количество() = 0 Тогда
				// Рассмотрим вариант, когда в предыдущей версии формы по данной странице
				// было предусмотрено автозаполнение таблицы, а в текущей версии - отключено.
				// В этом случае из структуры вариантов автозаполнения удаляем элемент,
				// хранящий настройки вариантов автозаполнения текущей станицы.
				мСтруктураВариантыЗаполнения.Удалить(ИмяСтраницы);

				ЕстьИзменения = Истина;
			Иначе
				// Рассмотрим вариант, когда и в предыдущей, и в текущей версии формы было предусмотрено
				// автозаполнение текущей страницы. В этом случае обновляем таблицу значений, содержащей
				// пользовательские настройки вариантов автозаполнения текущей страницы.

				Для каждого ЭлементМассива Из МассивВариантовЗаполненияСтраниц Цикл
					
					ЭлементМассива = ЭлементМассива.ТаблицаВариантовЗаполнения;
					
					Для каждого СтрокаТаблицы Из ТаблицаВариантыЗаполнения Цикл
						КодПоказателя     = СтрокаТаблицы.КодПоказателя;
						ВариантЗаполнения = СтрокаТаблицы.ВариантЗаполнения;

						Если ЭлементМассива.НайтиСтроки(Новый Структура("КодПоказателя", КодПоказателя)).Количество() = 0 Тогда	
							// Рассмотри вариант, когда в новой версии формы список реквизитов,
							// заполняемых автоматически по данным ИБ, дополнен новым реквизитом.
							НоваяСтрока = ЭлементМассива.Добавить();
							НоваяСтрока.КодПоказателя     = КодПоказателя;
							НоваяСтрока.ВариантЗаполнения = ВариантЗаполнения;

							ЕстьИзменения = Истина;
						КонецЕсли;
					КонецЦикла;

					ТаблДляЦикла = ЭлементМассива.Выгрузить();
					
					Для каждого СтрокаТаблицы Из ТаблДляЦикла Цикл
						КодПоказателя = СтрокаТаблицы.КодПоказателя;

						Если ТаблицаВариантыЗаполнения.Найти(КодПоказателя, "КодПоказателя") = Неопределено Тогда
							// Рассмотрим вариант, когда в предыдущей версии отчета для данной страницы
							// было предусмотрено автозаполнение ячейки по коду КодПоказателя,
							// а в текущей версии - отключено. В этом случае удаляем эту ячейку
							// из таблицы пользовательских настроек вариантов автозаполнения.
							СтрокиВЭлементеМассива = ЭлементМассива.НайтиСтроки(Новый Структура("КодПоказателя", КодПоказателя));
							Если  СтрокиВЭлементеМассива.Количество() > 0 Тогда
								ЭлементМассива.Удалить(СтрокиВЭлементеМассива[0]);
								ЕстьИзменения = Истина;
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
					
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;

	КонецЦикла;

	Возврат ЕстьИзменения;

КонецФункции

&НаСервере
Функция ОбновитьНастройкиСтраниц()

	ЕстьИзменения = Ложь;

	// формируем дерево значений - пользовательских настройки страниц отчета
	мПользовательскиеНастройкиСтраниц = РеквизитФормыВЗначение("мДеревоСтраницОтчета").Скопировать();

	// формируем дерево значений - настройки страниц отчета обновленной формы
	ФормироватьСтруктуруСтраницОтчета();

	// Сначала проверяем, не изменилась ли структура настроек страниц (колонки дерева)
	Для каждого ИсхКолонка Из РеквизитФормыВЗначение("мДеревоСтраницОтчета").Колонки Цикл

		Если мПользовательскиеНастройкиСтраниц.Колонки.Найти(ИсхКолонка.Имя) = Неопределено Тогда
			// добавиляем новую колонку
			мПользовательскиеНастройкиСтраниц.Колонки.Добавить(ИсхКолонка.Имя, ИсхКолонка.ТипЗначения, ИсхКолонка.Заголовок, ИсхКолонка.Ширина);
			мПользовательскиеНастройкиСтраниц.ЗагрузитьКолонку(РеквизитФормыВЗначение("мДеревоСтраницОтчета").ВыгрузитьКолонку(ИсхКолонка.Имя), ИсхКолонка.Имя);

			ЕстьИзменения = Истина;
		КонецЕсли;

	КонецЦикла;

	// Выполняем обратную задачу:
	// удаляем отсутствующие колонки
	Для каждого ТекКолонка Из мПользовательскиеНастройкиСтраниц.Колонки Цикл

		Если РеквизитФормыВЗначение("мДеревоСтраницОтчета").Колонки.Найти(ТекКолонка.Имя) = Неопределено Тогда
			// удаляем отсутствующую колонку
			мПользовательскиеНастройкиСтраниц.Колонки.Удалить(мПользовательскиеНастройкиСтраниц.Колонки.Индекс(ТекКолонка));

			ЕстьИзменения = Истина;
		КонецЕсли;

	КонецЦикла;

	// Обновляем строки дерева значений - пользовательских настроек:
	//
	// добавляем новые строки и удаляем лишние:
	Если мДеревоСтраницОтчета.ПолучитьЭлементы().Количество() <> мПользовательскиеНастройкиСтраниц.Строки.Количество() Тогда

		КолвоКолонок     = РеквизитФормыВЗначение("мДеревоСтраницОтчета").Колонки.Количество();

		// добавляем новые строки
		Для каждого Строка Из мДеревоСтраницОтчета.ПолучитьЭлементы() Цикл

			Если мПользовательскиеНастройкиСтраниц.Найти(Строка.ИмяСтраницы, "ИмяСтраницы") = Неопределено Тогда

				НоваяСтрока = мПользовательскиеНастройкиСтраниц.Строки.Добавить();
				Для НомКолонки = 0 По (КолвоКолонок - 1) Цикл
				
					НоваяСтрока[НомКолонки] = Строка[НомКолонки];
				
				КонецЦикла;

			КонецЕсли;

			// обновляем строки второго уровня
			Если Строка.Строки.Количество() > 0 Тогда

				Для каждого Строка2 Из Строка.Строки Цикл

					Если мПользовательскиеНастройкиСтраниц.Найти(Строка2.ИмяСтраницы, "ИмяСтраницы") = Неопределено Тогда

						НоваяСтрока2 = НоваяСтрока.Строки.Добавить();
						Для НомКолонки = 0 По (КолвоКолонок - 1) Цикл

							НоваяСтрока2[НомКолонки] = Строка2[НомКолонки];

						КонецЦикла;

					КонецЕсли;

				КонецЦикла; 

			КонецЕсли; 

		КонецЦикла;

		// удаляем лишние строки
		Для каждого Строка Из мПользовательскиеНастройкиСтраниц Цикл

			Если РеквизитФормыВЗначение("мДеревоСтраницОтчета").Найти(Строка.ИмяСтраницы, "ИмяСтраницы") = Неопределено Тогда

				мПользовательскиеНастройкиСтраниц.Строки.Удалить(мПользовательскиеНастройкиСтраниц.Строки.Индекс(Строка));

			КонецЕсли;

		КонецЦикла;

		ЕстьИзменения = Истина;
	КонецЕсли;

	Для каждого ТекСтрока Из мДеревоСтраницОтчета.ПолучитьЭлементы() Цикл

		НомСтр = мДеревоСтраницОтчета.ПолучитьЭлементы().Индекс(ТекСтрока);

		// обновляем представление
		Если ТекСтрока.Представление <> мПользовательскиеНастройкиСтраниц.Строки[НомСтр].Представление Тогда
			мПользовательскиеНастройкиСтраниц.Строки[НомСтр].Представление = ТекСтрока.Представление;
			ЕстьИзменения = Истина;
		КонецЕсли;

		// обновляем имя поля табличного документа
		Если ТекСтрока.ИмяПоляТабличногоДокум <> мПользовательскиеНастройкиСтраниц.Строки[НомСтр].ИмяПоляТабличногоДокум Тогда
			мПользовательскиеНастройкиСтраниц.Строки[НомСтр].ИмяПоляТабличногоДокум = ТекСтрока.ИмяПоляТабличногоДокум;
			ЕстьИзменения = Истина;
		КонецЕсли;

	КонецЦикла; 

	ЗначениеВРеквизитФормы(мПользовательскиеНастройкиСтраниц.Скопировать(), "мДеревоСтраницОтчета");

	Возврат ЕстьИзменения;

КонецФункции

&НаКлиенте
Процедура СохранитьОтчет(Команда)
	
	Если Элементы.РазделыОтчета.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СохранитьНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНаКлиенте(Автосохранение = Ложь, ВыполняемоеОповещение = Неопределено) Экспорт
	
	Если СтруктураДанныхТитульный.Количество() = 0
		ИЛИ СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
		СтруктураДанныхТитульный.Вставить("КодИМНС", ТабличныйДокумент.Области.КодИМНС.Значение);
		СтруктураДанныхТитульный.Вставить("КПП1", ТабличныйДокумент.Области.КПП1.Значение);
		СтруктураДанныхТитульный.Вставить("НомКоррект", ТабличныйДокумент.Области.НомКоррект.Значение);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СтруктураДанныхТитульный.НомКоррект) Тогда
		ЗначениеКорректировки = 0;
	Иначе
		ЗначениеКорректировки = Число(СтруктураДанныхТитульный.НомКоррект);
	КонецЕсли;
	Вариант = СтруктураРеквизитовФормы.ВидДокумента * ЗначениеКорректировки;
	
	КодИФНС = СтруктураДанныхТитульный.КодИМНС;
	КПП = СтруктураДанныхТитульный.КПП1;
                       
	Если НЕ РегламентированнаяОтчетностьКлиент.ПриЗаписиРегламентированногоОтчетаНаКлиенте(ЭтаФорма, КодИФНС, Автосохранение, Вариант) Тогда
		Возврат;
	КонецЕсли;
	
	ПодобныйОтчетСуществует = Ложь;
	ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки = Ложь;
	
	Если Элементы.РазделыОтчета.ТекущиеДанные = Неопределено Тогда
		НаименованиеТекущегоРаздела = СтруктураРеквизитовФормы.НаимТекущегоРаздела;
	Иначе
		НаименованиеТекущегоРаздела = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
	КонецЕсли;
	
	РезультатСохранения = ПередСохранением(КодИФНС, КПП, ПодобныйОтчетСуществует, Вариант, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, Автосохранение, НаименованиеТекущегоРаздела);
	
	ВидДокументаНомерКорректировкиИзменен = Неопределено;
	
	Если ПодобныйОтчетСуществует И Автосохранение Тогда
		Возврат;
	КонецЕсли;
	
	НуженВопросПередСохранением = (ПодобныйОтчетСуществует ИЛИ ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки);
	
	Если НуженВопросПередСохранением Тогда
		
		СохранитьНаКлиентеСВопросом(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, ПодобныйОтчетСуществует, КодИФНС, КПП);
		
	Иначе
		
		ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНаКлиентеСВопросом(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, ПодобныйОтчетСуществует, КодИФНС, КПП)
	
	Если ПодобныйОтчетСуществует Тогда
		
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(КодВозвратаДиалога.Да, "Сохранить");
		Кнопки.Добавить(КодВозвратаДиалога.Нет, "Отмена");
		
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Отчет с видом %1 уже существует.
			|Сохранить отчет с таким же видом?'"), ?(Вариант = 0, """Первичный""", """Корректирующий/" + Вариант + """"));
		ДополнительныеПараметры = Новый Структура("Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, КодИФНС, КПП", Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, КодИФНС, КПП);
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросСохранитьОтчетСТакимЖеВидомЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, Кнопки, , Кнопки.Получить(1).Значение);
		
	Иначе
		
		СохранитьНаКлиентеСВопросомПродолжение(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки,КодИФНС, КПП);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросСохранитьОтчетСТакимЖеВидомЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Автосохранение = ДополнительныеПараметры.Автосохранение;
	Вариант = ДополнительныеПараметры.Вариант;
	ВыполняемоеОповещение = ДополнительныеПараметры.ВыполняемоеОповещение;
	КодИФНС = ДополнительныеПараметры.КодИФНС;
	КПП = ДополнительныеПараметры.КПП;
	ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки = ДополнительныеПараметры.ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки;
	
	Ответ = РезультатВопроса;
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	СохранитьНаКлиентеСВопросомПродолжение(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки,КодИФНС, КПП);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНаКлиентеСВопросомПродолжение(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, КодИФНС, КПП)
	
	Если ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки Тогда
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("ВидОтчета", Вариант);
		
		ФормаВопроса = РегламентированнаяОтчетностьКлиент.ПолучитьОбщуюФормуПоИмени("ВопросПриИзмененииВидаДокументаНомераКорректировки", ПараметрыФормы);
		ФормаВопроса.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		ДополнительныеПараметры = Новый Структура("Автосохранение, Вариант, ВыполняемоеОповещение, КодИФНС, КПП", Автосохранение, Вариант, ВыполняемоеОповещение,КодИФНС, КПП );
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросПриИзмененииВидаДокументаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ФормаВопроса.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
		ФормаВопроса.Открыть();
	Иначе
		Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Сохраняется %1...'"), ЭтаФорма.Заголовок), , , БиблиотекаКартинок.Записать);
		РезультатСохранения = Сохранить(Автосохранение, КодИФНС, КПП, Вариант, Неопределено, Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
		ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПриИзмененииВидаДокументаЗавершение(КодВозврата, ДополнительныеПараметры) Экспорт
	
	Автосохранение = ДополнительныеПараметры.Автосохранение;
	Вариант = ДополнительныеПараметры.Вариант;
	ВыполняемоеОповещение = ДополнительныеПараметры.ВыполняемоеОповещение;
	КодИФНС = ДополнительныеПараметры.КодИФНС;
	КПП = ДополнительныеПараметры.КПП;
	Если КодВозврата = КодВозвратаДиалога.Да
		ИЛИ КодВозврата = КодВозвратаДиалога.Нет Тогда
		ВидДокументаНомерКорректировкиИзменен = ?(КодВозврата = КодВозвратаДиалога.Да, Истина, Ложь);
	Иначе
		Возврат;
	КонецЕсли;
	
	Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Сохраняется %1...'"), ЭтаФорма.Заголовок), , , БиблиотекаКартинок.Записать);
	РезультатСохранения = Сохранить(Автосохранение, КодИФНС, КПП, Вариант, ВидДокументаНомерКорректировкиИзменен, Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
	ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения)
	
	КлючУникальности = СтруктураРеквизитовФормы.мСохраненныйДок;
	
	Если РезультатСохранения Тогда
		
		РегламентированнаяОтчетностьКлиент.ПослеЗаписиРегламентированногоОтчета(ЭтаФорма);
		
		Если ВыполняемоеОповещение <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ВыполняемоеОповещение);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПередСохранением(КодИФНС, КПП, ПодобныйОтчетСуществует, Вариант, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, Автосохранение, НаимТекРаздела)
	
	Если РегламентированнаяОтчетность.БылиИзмененыКлючевыеРеквизитыОтчета(ЭтаФорма, КодИФНС, КПП)
	   И РегламентированнаяОтчетность.СуществуетДокументСАналогичнымиРеквизитами(ЭтаФорма, КодИФНС, КПП) Тогда
		
		ПодобныйОтчетСуществует = Истина;
		
	КонецЕсли;
	
	СтруктураРеквизитовФормы.мЗаписываетсяНовыйДокумент = (СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено ИЛИ СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено);
	
	Если Вариант <> Неопределено И ((СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено) ИЛИ (СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено) ИЛИ (Вариант <> СтруктураРеквизитовФормы.мВариант)) Тогда
		
		Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено ИЛИ СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено Тогда
						
		ИначеЕсли Вариант <> СтруктураРеквизитовФормы.мВариант Тогда
			
			ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки = Истина;
								
		КонецЕсли;

	КонецЕсли;
	
	Если ПодобныйОтчетСуществует
	 ИЛИ ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки Тогда
	 
	 	Возврат Ложь;
		
 	КонецЕсли;
		
	Возврат Сохранить(Автосохранение, КодИФНС, КПП, Вариант, , НаимТекРаздела);
		
КонецФункции

&НаСервере
Функция Сохранить(Автосохранение = Ложь, КодИФНС, КПП, Вариант, ВидДокументаНомерКорректировкиИзменен = Неопределено, НаимТекРаздела) Экспорт
	
	ДанныеДляРазблокирования = Неопределено;
	
	Если НЕ СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
		Если НЕ СтруктураРеквизитовФормы.мБезОткрытияФормы Тогда
			ДанныеДляРазблокирования = Новый Структура("Ключ,ИдФормы",
			СтруктураРеквизитовФормы.мСохраненныйДок, ЭтаФорма.УникальныйИдентификатор);
		КонецЕсли;
		СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.ПолучитьОбъект();
	КонецЕсли;
	
	Если НЕ РегламентированнаяОтчетность.ПриЗаписиРегламентированногоОтчетаНаСервере(ЭтаФорма, КодИФНС, Автосохранение, Вариант, ВидДокументаНомерКорректировкиИзменен, СтруктураРеквизитовФормы.мСохраненныйДок) Тогда
		СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
		Возврат Ложь;
	КонецЕсли;

	// установим текущие значения реквизитов документа	
	СтруктураРеквизитовФормы.мСохраненныйДок.ИсточникОтчета           = Метаданные.Отчеты[Сред(Лев(СтрЗаменить(ЭтаФорма.ИмяФормы, "Внешний", ""), СтрНайти(СтрЗаменить(ЭтаФорма.ИмяФормы, "Внешний", ""), ".Форма.") - 1), 7)].Имя;
	СтруктураРеквизитовФормы.мСохраненныйДок.НаименованиеОтчета       = Метаданные.Отчеты[Сред(Лев(СтрЗаменить(ЭтаФорма.ИмяФормы, "Внешний", ""), СтрНайти(СтрЗаменить(ЭтаФорма.ИмяФормы, "Внешний", ""), ".Форма.") - 1), 7)].ОсновнаяФорма.Синоним;
	СтруктураРеквизитовФормы.мСохраненныйДок.ДатаНачала               = СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета;
	СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания            = СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета;
	СтруктураРеквизитовФормы.мСохраненныйДок.Комментарий              = Комментарий;
	СтруктураРеквизитовФормы.мСохраненныйДок.Периодичность            = СтруктураРеквизитовФормы.мПериодичность;
	СтруктураРеквизитовФормы.мСохраненныйДок.ВыбраннаяФорма           = СтруктураРеквизитовФормы.мВыбраннаяФорма;
	СтруктураРеквизитовФормы.мСохраненныйДок.Организация              = СтруктураРеквизитовФормы.Организация;
	СтруктураРеквизитовФормы.мСохраненныйДок.ДатаПодписи              = ДатаПодписи;
	СтруктураРеквизитовФормы.мСохраненныйДок.ЕдиницаИзмерения         = СтруктураРеквизитовФормы.ЕдиницаИзмерения;
	СтруктураРеквизитовФормы.мСохраненныйДок.ТочностьЕдиницыИзмерения = СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения;
	СтруктураРеквизитовФормы.мСохраненныйДок.ВидОтчетности            = Перечисления.ВидыОтчетности.РегламентированнаяОтчетность;
	СтруктураРеквизитовФормы.мСохраненныйДок.КодНалоговогоОргана      = КодИФНС;
	СтруктураРеквизитовФормы.мСохраненныйДок.КПП        			  = КПП;
	СтруктураРеквизитовФормы.мСохраненныйДок.Вид                      = Вариант;
	СтруктураРеквизитовФормы.мСохраненныйДок.ПредставлениеВида        = РегламентированнаяОтчетность.ПредставлениеВидаДокумента(СтруктураРеквизитовФормы.мСохраненныйДок.Вид);
	СтруктураРеквизитовФормы.мВариант 								  = Вариант;
	
	СохранитьДанныеРаздела(НаимТекРаздела, Ложь, Ложь);
	
	ЗаполнитьПустыеСтруктурыДанных();
		
	// формируем данные редактируемых ячеек таблицы
	ПоказателиОтчета = Новый Структура();

	ЗаполнитьПоказателиОтчетаНаСервере(ПоказателиОтчета);
	
	// формируем список сохранения
	СписокСохранения = Новый Структура();
	
	// вставляем данные редактируемых ячеек таблицы	
	СписокСохранения.Вставить("ПоказателиОтчета", ПоказателиОтчета);
    	
	ДанныеМногострочныхРазделов = Новый Структура;
	
	Для Каждого ЭлементСтруктуры Из мСтруктураМногострочныхРазделов Цикл
		
		ДанныеМногострочныхРазделов.Вставить(ЭлементСтруктуры.Ключ, ДанныеФормыВЗначение(ЭтаФорма[ЭлементСтруктуры.Значение], Тип("ТаблицаЗначений")));
		
	КонецЦикла;
	
	// вставляем данные многострочных разделов
	СписокСохранения.Вставить("ДанныеМногострочныхРазделов", ДанныеМногострочныхРазделов);
	
	ДанныеМногостраничныхРазделов = Новый Структура;
	МассивТиповНеопределено = Новый Массив;
	
	МассивТиповНеопределено.Добавить(Тип("Неопределено"));
	
	ОписаниеТиповНеопределено = Новый ОписаниеТипов(МассивТиповНеопределено);
	
	Для Каждого ЭлементСтруктуры Из мСтруктураМногостраничныхРазделов Цикл
		
		ДанныеМногостраничныхРазделов.Вставить(ЭлементСтруктуры.Ключ, ДанныеФормыВЗначение(ЭтаФорма[ЭлементСтруктуры.Значение], Тип("ТаблицаЗначений")));
		
		ТаблЗнач = Неопределено;
		
		Если ДанныеМногостраничныхРазделов.Свойство(ЭлементСтруктуры.Ключ, ТаблЗнач) Тогда
			
			Если НЕ ТаблЗнач.Колонки.Найти("Данные") = Неопределено Тогда
				
				ТаблЗнач.Колонки.Удалить("Данные");
				
				ТаблЗнач.Колонки.Добавить("Данные", ОписаниеТиповНеопределено);
				
				Ном = 0;
				
				Для Каждого СтрокаТаблЗнач Из ТаблЗнач Цикл
					
					СтрокаТаблЗнач.Данные = ЭтаФорма[ЭлементСтруктуры.Значение][Ном].Данные[0].Значение;
					
					Ном = Ном + 1;
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
		
	// вставляем данные многостраничных разделов
	СписокСохранения.Вставить("ДанныеМногостраничныхРазделов", ДанныеМногостраничныхРазделов);
                        	
	ДанныеВариантовАвтоЗаполнения = Новый Структура;
	
	Для Каждого ЭлементСтруктуры Из мСтруктураВариантыЗаполнения Цикл
		
		МассивТаблЗнач = Новый Массив;
		
		ДанныеВариантовАвтоЗаполнения.Вставить(ЭлементСтруктуры.Ключ, МассивТаблЗнач);
			
		Для Каждого ЭлементМассива Из ЭтаФорма["ТаблицаВариантыЗаполнения" + ЭлементСтруктуры.Ключ] Цикл
			
			МассивТаблЗнач.Добавить(ДанныеФормыВЗначение(ЭлементМассива.ТаблицаВариантовЗаполнения, Тип("ТаблицаЗначений")));
			
		КонецЦикла;
			
	КонецЦикла;
	
	// вставляем данные вариантов автозаполнения ячеек
	СписокСохранения.Вставить("ДанныеВариантовАвтоЗаполнения", ДанныеВариантовАвтоЗаполнения);

	// вствляем версию формы
	СписокСохранения.Вставить("ВерсияФормы", СтруктураРеквизитовФормы.мВерсияФормы);
	
	// вствляем флажок пересчета страниц
	СписокСохранения.Вставить("ФлПодсчетСтраниц", СтруктураРеквизитовФормы.мСчетчикСтраниц);
    	
	ХранилищеДанных = Новый ХранилищеЗначения(СписокСохранения);
	СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета = ХранилищеДанных;

	// записываем документ, хранящий данные отчета
	Попытка
		СтруктураРеквизитовФормы.мСохраненныйДок.Записать();
		РегламентированнаяОтчетность.СохранитьСтатусОтправкиРеглОтчета(ЭтаФорма);
	Исключение
		Если НЕ Автосохранение Тогда
						
			Сообщение = Новый СообщениеПользователю;

			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), РегламентированнаяОтчетностьКлиентСервер.СформироватьТекстСообщения(ОписаниеОшибки()));

			Сообщение.Сообщить();
			
		КонецЕсли;
		СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
		Возврат Ложь;
	КонецПопытки;
	
	СохранитьДеревоСтраницОтчета(СтруктураРеквизитовФормы.мСохраненныйДок);
	    
	Модифицированность   = Ложь;
	
	СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
	
	Если НЕ СтруктураРеквизитовФормы.мБезОткрытияФормы
       И НЕ СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
				   
    	ЗаблокироватьДанныеДляРедактирования(СтруктураРеквизитовФормы.мСохраненныйДок, , ЭтаФорма.УникальныйИдентификатор);

    КонецЕсли;
	
	Если ДанныеДляРазблокирования <> Неопределено Тогда
		РазблокироватьДанныеДляРедактирования(ДанныеДляРазблокирования.Ключ, ДанныеДляРазблокирования.ИдФормы);
	КонецЕсли;
	
	Возврат Истина;

КонецФункции

&НаСервере
Процедура ЗаполнитьПустыеСтруктурыДанных()
	
	СохрТабличныйДокумент = Новый ТабличныйДокумент;
	
	СохрТабличныйДокумент.Вывести(ТабличныйДокумент);
	
	Для Каждого Раздел Из мСвойстваРазделовДекларации.ПолучитьЭлементы() Цикл
		
		Если НЕ Раздел.МногостраничностьВРазделе
		  И (ЭтаФорма["СтруктураДанных" + Раздел.ИмяСтраницы].Количество() = 0) Тогда
		  
			ТабличныйДокумент.Очистить();
			ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + Раздел.ИмяСтраницы));
			
			СохранитьДанныеРаздела(Раздел.ИмяСтраницы, Ложь);
			
		ИначеЕсли Раздел.МногостраничностьВРазделе
			    И (ЭтаФорма[мСтруктураМногостраничныхРазделов[Раздел.ИмяСтраницы]][0].Данные.Количество() = 0) Тогда
				
			ТабличныйДокумент.Очистить();
			ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + Раздел.ИмяСтраницы));
			
			СохранитьДанныеРаздела(Раздел.ИмяСтраницы, Ложь);	
			
		КонецЕсли;
	
	КонецЦикла;
	
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(СохрТабличныйДокумент);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоказателиОтчетаНаСервере(ПоказателиОтчета)
	
	Префикс = "ПолеТабличногоДокумента";
	
	Для Каждого Раздел Из мСвойстваРазделовДекларации.ПолучитьЭлементы() Цикл
			
		Если НЕ Раздел.МногостраничностьВРазделе Тогда
			ПоказателиОтчета.Вставить(Префикс + Раздел.ИмяСтраницы, ЭтаФорма["СтруктураДанных" + Раздел.ИмяСтраницы]);
		КонецЕсли;
	
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ДатаПодписиПриИзмененииНаСервере()
	
	ЗаполнитьСведенияОбОрганизацииНаСервере(Истина);
	ЗаполнитьСведенияОбФЛ(Истина);
	СформироватьДеревоРазделовОтчетаНаСервере();
	ЗаполнитьДатуПодписиНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ТабличныйДокументВыбор(Элемент, Область, СтандартнаяОбработка)

	Если СтрЧислоВхождений(Область.Имя, "ДобавитьСтроку") > 0 И Область.Текст <> "" Тогда
		ДобавитьСтроку("");
	ИначеЕсли СтрЧислоВхождений(Область.Имя, "УдалитьСтроку") > 0 И Область.Текст <> "" Тогда
		УдалитьСтроку("");
	КонецЕсли;
	
	Если РегламентированнаяОтчетностьКлиент.ВыбраннаяОбластьРегламентированногоОтчетаНеВерна(ЭтаФорма, Область, СтандартнаяОбработка) Тогда
		Возврат;
	КонецЕсли;
	
	Если Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Титульный" Тогда
		
		Если Область.Имя = "ТипОрг1" Тогда
			СтандартнаяОбработка = Ложь;
			Область.Значение = "V";
			ТабличныйДокумент.Области.ТипОрг2.Значение = "";
			ТабличныйДокумент.Области.ТипОрг3.Значение = "";
			Модифицированность = Истина;

		ИначеЕсли Область.Имя = "ТипОрг2" Тогда
			СтандартнаяОбработка = Ложь;
			Область.Значение = "V";
			ТабличныйДокумент.Области.ТипОрг1.Значение = "";
			ТабличныйДокумент.Области.ТипОрг3.Значение = "";
			Модифицированность = Истина;

		ИначеЕсли Область.Имя = "ТипОрг3" Тогда
			СтандартнаяОбработка = Ложь;
			Область.Значение = "V";
			ТабличныйДокумент.Области.ТипОрг1.Значение = "";
			ТабличныйДокумент.Области.ТипОрг2.Значение = "";
			Модифицированность = Истина;
			
		КонецЕсли;

	ИначеЕсли Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "ФизЛица" Тогда
		
		Если (СтрНайти(Область.Имя, "ФизЛицИнд") > 0)
	   		Или (Область.Имя = "ФизЛицСубъект")
	   		Или (Область.Имя = "ФизЛицРайон")
	   		Или (Область.Имя = "ФизЛицГород")
	   		Или (Область.Имя = "ФизЛицС")
	   		Или (Область.Имя = "ФизЛицНП")
	   		Или (Область.Имя = "ФизЛицУлица")
	   		Или (Область.Имя = "ФизЛицДом")
	   		Или (Область.Имя = "ФизЛицКорпус")
	   		Или (Область.Имя = "ФизЛицКвартира") Тогда

			ПолеТабличногоДокументаФизЛица = ТабличныйДокумент;
			НомерАдреса = "";
			СтандартнаяОбработка = Ложь;
		
			Индекс = ПолеТабличногоДокументаФизЛица.Области.ФизЛицИнд.Значение;
		   
			РоссийскийАдрес = Новый Соответствие;
		
			РоссийскийАдрес.Вставить("Индекс",	        ПолеТабличногоДокументаФизЛица.Области.ФизЛицИнд.Значение);
			РоссийскийАдрес.Вставить("Регион",          ПолеТабличногоДокументаФизЛица.Области.ФизЛицСубъект.Значение);
			РоссийскийАдрес.Вставить("КодРегиона",      ПолеТабличногоДокументаФизЛица.Области.ФизЛицС.Значение);
			РоссийскийАдрес.Вставить("Район",           ПолеТабличногоДокументаФизЛица.Области.ФизЛицРайон.Значение);
			РоссийскийАдрес.Вставить("Город",           ПолеТабличногоДокументаФизЛица.Области.ФизЛицГород.Значение);
			РоссийскийАдрес.Вставить("НаселенныйПункт", ПолеТабличногоДокументаФизЛица.Области.ФизЛицНП.Значение);
			РоссийскийАдрес.Вставить("Улица",           ПолеТабличногоДокументаФизЛица.Области.ФизЛицУлица.Значение);
			РоссийскийАдрес.Вставить("Дом",             ПолеТабличногоДокументаФизЛица.Области.ФизЛицДом.Значение);
			РоссийскийАдрес.Вставить("Корпус",          ПолеТабличногоДокументаФизЛица.Области.ФизЛицКорпус.Значение);
			РоссийскийАдрес.Вставить("Квартира",        ПолеТабличногоДокументаФизЛица.Области.ФизЛицКвартира.Значение);
		
			ЗначенияПолей = Новый СписокЗначений;
		
			ЗначенияПолей.Добавить(РоссийскийАдрес["Индекс"],          "Индекс");
			ЗначенияПолей.Добавить(РоссийскийАдрес["Регион"],          "Регион");
			ЗначенияПолей.Добавить(РоссийскийАдрес["КодРегиона"],      "КодРегиона");
			ЗначенияПолей.Добавить(РоссийскийАдрес["Район"],           "Район");
			ЗначенияПолей.Добавить(РоссийскийАдрес["Город"],           "Город");
			ЗначенияПолей.Добавить(РоссийскийАдрес["НаселенныйПункт"], "НаселенныйПункт");
			ЗначенияПолей.Добавить(РоссийскийАдрес["Улица"],           "Улица");
			ЗначенияПолей.Добавить(РоссийскийАдрес["Дом"],             "Дом");
			ЗначенияПолей.Добавить(РоссийскийАдрес["Корпус"],          "Корпус");
			ЗначенияПолей.Добавить(РоссийскийАдрес["Квартира"],        "Квартира");
								 		
			ПредставлениеАдреса = РегламентированнаяОтчетностьКлиентСервер.ПредставлениеАдресаВФормате9Запятых("643," + РоссийскийАдрес["Индекс"] + ","
						+ РоссийскийАдрес["Регион"] + ","
						+ РоссийскийАдрес["Район"] + ","
						+ РоссийскийАдрес["Город"] + ","
						+ РоссийскийАдрес["НаселенныйПункт"] + ","
						+ РоссийскийАдрес["Улица"] + ","
						+ РоссийскийАдрес["Дом"] + ","
						+ РоссийскийАдрес["Корпус"] + ","
						+ РоссийскийАдрес["Квартира"]);

			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("Заголовок",               "Ввод адреса");
			ПараметрыФормы.Вставить("ЗначенияПолей", 		   ЗначенияПолей);
			ПараметрыФормы.Вставить("Представление", 	  	   ПредставлениеАдреса);
			ПараметрыФормы.Вставить("ВидКонтактнойИнформации", СтруктураРеквизитовФормы.СправочникиВидыКонтактнойИнформацииПочтовыйАдресОрганизации);
							
			ДополнительныеПараметры = Новый Структура;
			ДополнительныеПараметры.Вставить("РоссийскийАдрес", РоссийскийАдрес);
			
			ТипЗначения = Тип("ОписаниеОповещения");
			ПараметрыКонструктора = Новый Массив(3);
			ПараметрыКонструктора[0] = "ОткрытьФормуКонтактнойИнформацииЗавершение";
			ПараметрыКонструктора[1] = ЭтаФорма;
			ПараметрыКонструктора[2] = ДополнительныеПараметры;
			
			Оповещение = Новый (ТипЗначения, ПараметрыКонструктора);
			
			ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеКонтактнойИнформациейКлиент").ОткрытьФормуКонтактнойИнформации(ПараметрыФормы, , Оповещение);

		ИначеЕсли Область.Имя = "ФизЛицПолМ" Тогда

			ПолеТабличногоДокументаФизЛица = ТабличныйДокумент;
			СтандартнаяОбработка = Ложь;
			Модифицированность = Истина;
			Если ПолеТабличногоДокументаФизЛица.Области.ФизЛицПолМ.Значение = "V" Тогда
				ПолеТабличногоДокументаФизЛица.Области.ФизЛицПолМ.Значение = "";
				Возврат;
			Иначе
				ПолеТабличногоДокументаФизЛица.Области.ФизЛицПолМ.Значение = "V";
				ПолеТабличногоДокументаФизЛица.Области.ФизЛицПолЖ.Значение = "";
			КонецЕсли;
		ИначеЕсли Область.Имя = "ФизЛицПолЖ" Тогда
			Модифицированность = Истина;
			СтандартнаяОбработка = Ложь;
			ПолеТабличногоДокументаФизЛица = ТабличныйДокумент;
			Если ПолеТабличногоДокументаФизЛица.Области.ФизЛицПолЖ.Значение = "V" Тогда
				ПолеТабличногоДокументаФизЛица.Области.ФизЛицПолЖ.Значение = "";
				Возврат;
			Иначе
				ПолеТабличногоДокументаФизЛица.Области.ФизЛицПолЖ.Значение = "V";
				ПолеТабличногоДокументаФизЛица.Области.ФизЛицПолМ.Значение = "";
			КонецЕсли;
		КонецЕсли;		
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуКонтактнойИнформацииЗавершение(Результат, Параметры) Экспорт
	
	ОбновитьАдресВТабличномДокументе(Результат, Параметры.РоссийскийАдрес);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьАдресВТабличномДокументе(Результат, РоссийскийАдрес)
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		
		// Обход ошибки платформы: в веб-клиенте, в результате выполнения процедуры "СформироватьАдрес"
		// общего модуля "РегламентированнаяОтчетностьВызовСервера", не изменяются значения ключей
		// соответствия "РоссийскийАдрес", передаваемого в качестве параметра.
		РоссийскийАдрес_ = РоссийскийАдрес;
		
		РегламентированнаяОтчетностьВызовСервера.СформироватьАдрес(Результат.КонтактнаяИнформация, РоссийскийАдрес_);
		
		ТабличныйДокумент.Области.ФизЛицС.Значение        = РоссийскийАдрес_["КодРегиона"];;
		ТабличныйДокумент.Области.ФизЛицИнд.Значение      = РоссийскийАдрес_["Индекс"];
		ТабличныйДокумент.Области.ФизЛицСубъект.Значение  = РоссийскийАдрес_["Регион"];
		ТабличныйДокумент.Области.ФизЛицРайон.Значение    = РоссийскийАдрес_["Район"];
		ТабличныйДокумент.Области.ФизЛицГород.Значение    = РоссийскийАдрес_["Город"];
		ТабличныйДокумент.Области.ФизЛицНП.Значение       = РоссийскийАдрес_["НаселенныйПункт"];
		ТабличныйДокумент.Области.ФизЛицУлица.Значение    = РоссийскийАдрес_["Улица"];
		ТабличныйДокумент.Области.ФизЛицДом.Значение      = РоссийскийАдрес_["Дом"];
		ТабличныйДокумент.Области.ФизЛицКорпус.Значение   = РоссийскийАдрес_["Корпус"];
		ТабличныйДокумент.Области.ФизЛицКвартира.Значение = РоссийскийАдрес_["Квартира"];
		
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТабличныйДокументПриИзмененииСодержимогоОбласти(Элемент, Область)
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
		ОбластьИмя = Область.Имя;
		Если ОбластьИмя = "ДатаПодписи" Тогда 
			ДатаПодписи = Область.Значение;
			СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация = Истина;
			ДатаПодписиПриИзмененииНаСервере();
			СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация = Ложь;
			Модифицированность = Истина;
		ИначеЕсли ОбластьИмя = "НомКоррект" Тогда 
			ОписаниеТипа = Новый ОписаниеТипов("Число");
			НомерКорректировки = ОписаниеТипа.ПривестиЗначение(Область.Значение);
			Область.Значение = Строка(НомерКорректировки);
			СтруктураРеквизитовФормы.ВидДокумента = ?(НомерКорректировки = 0, 0, 1);
			ТабличныйДокумент.Области["ВидДок"].Значение = ?(НомерКорректировки = 0, "1", "3");
			Модифицированность = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСтроку(Команда)
	
	#Если ВебКлиент Тогда
		
		ДобавитьСтрокуНаСервере(Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
				
	#Иначе
		
		ДобавитьСтрокуНаКлиенте(Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
		
	#КонецЕсли
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьСтрокуНаСервере(КолонкаРазделыОтчетаСокрНаим)
		
	ВставитьДополнительнуюСтроку(ЭтаФорма,КолонкаРазделыОтчетаСокрНаим);

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСтрокуНаКлиенте(КолонкаРазделыОтчетаСокрНаим)
		
	ВставитьДополнительнуюСтроку(ЭтаФорма, КолонкаРазделыОтчетаСокрНаим);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ВставитьДополнительнуюСтроку(Форма, ТекущаяСтраница)
	Перем СтруктураГруппы;
	Перем МаксимальноеКоличествоСтрокГруппы;

	// Сначала выполним проверку на активную страницу панели формы,
	// которая содержит многострочный раздел
			
	#Если НаКлиенте Тогда
		ИмяГруппы = Форма.ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаКлиенте(ТекущаяСтраница);
	#Иначе
		ИмяГруппы = Форма.ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ТекущаяСтраница);
	#КонецЕсли
		
	Если ИмяГруппы = Неопределено Тогда
		
		Сообщение = Новый СообщениеПользователю;
			
		Сообщение.Текст = НСтр("ru='Не выбран многострочный раздел, в который необходимо добавить строку.'");
			
		Сообщение.Сообщить();
		
		Возврат;
		
	КонецЕсли;

	// Исходное количество строк группы
	Форма.мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, МаксимальноеКоличествоСтрокГруппы);
    	
	ТекТабличноеПолеИмя = "ТабличныйДокумент";
	
	ТекТабличноеПоле = Форма[ТекТабличноеПолеИмя];
		
	Форма.мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);
	
	СтруктураГруппы = Форма[СтруктураГруппы];

	// определяем последнюю строку многострочной группы
	КолСтрок = СтруктураГруппы.Количество();
	КолСтрокСтр = Формат(КолСтрок, "ЧГ=0");
	КолСтрокСтр1 = Формат(КолСтрок + 1, "ЧГ=0");
	ИмяПервойЯчейкиПоследнейСтроки = ИмяГруппы + "01_" + КолСтрокСтр;

	// область первой ячейки последней строки многострочного раздела
	ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяПервойЯчейкиПоследнейСтроки];

	// номера строк исходной области
	НомерВерхЯчейкиОбласти = ОбластьЯчейки.Верх;
	НомерНижнЯчейкиОбласти = ОбластьЯчейки.Низ;
	СдвигСтрок = НомерНижнЯчейкиОбласти - НомерВерхЯчейкиОбласти + 1;

	// номера строк вставляемой области
	НомерВерхЯчейкиНовойОбласти = НомерВерхЯчейкиОбласти + СдвигСтрок;
	НомерНижнЯчейкиНовойОбласти = НомерНижнЯчейкиОбласти + СдвигСтрок;

	РегламентированнаяОтчетностьВызовСервера.СпециальногоДобавленияСтроки(ТекТабличноеПоле, ТекТабличноеПолеИмя, ИмяГруппы, НомерВерхЯчейкиОбласти, НомерНижнЯчейкиОбласти);
	
	Форма[ТекТабличноеПолеИмя] = ТекТабличноеПоле;
	
	Для НомерГрафы = 1 По Форма.мСтруктураКолвоКолонокРазделов[ИмяГруппы] Цикл
		
		ИмяКолонки = ИмяГруппы + Формат(НомерГрафы, "ЧЦ=2; ЧВН=");
		
		// переопределяем имена вставленной области
		Если СтруктураГруппы[0].Свойство(ИмяКолонки) Тогда
			
			ИмяОбластиЯчейки    = ИмяКолонки + "_" + КолСтрокСтр;
			ИмяНовОбластиЯчейки = ИмяКолонки + "_" + КолСтрокСтр1;
			
			ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяОбластиЯчейки];
			ОбластьЯчейки.Имя = ИмяНовОбластиЯчейки;
			
			// определяем границы ячейки исходной области
			НомерВерхСтрокиЯчейки  = ОбластьЯчейки.Верх - СдвигСтрок;
			НомерНижнСтрокиЯчейки  = ОбластьЯчейки.Низ  - СдвигСтрок;
			
			НомерЛевоКолонкиЯчейки = ОбластьЯчейки.Лево;
			НомерПравКолонкиЯчейки = ОбластьЯчейки.Право;
			
			// Назначаем имя ячейки исходной области,
			// (т.к. в результате вставки новой области оно было очищено)
			ОбластьЯчейкиИсходнойОбласти = ТекТабличноеПоле.Область(НомерВерхСтрокиЯчейки, НомерЛевоКолонкиЯчейки, НомерНижнСтрокиЯчейки, НомерПравКолонкиЯчейки);
			ОбластьЯчейкиИсходнойОбласти.Имя = ИмяОбластиЯчейки;
			
			// Назначаем имена областей для удаления строк
			Если НомерГрафы = 1 Тогда
				НовОбластьЯчейкиУдалитьСтроку = ТекТабличноеПоле.Область(ОбластьЯчейки.Верх, 1, ОбластьЯчейки.Верх, 1);
				НовОбластьЯчейкиУдалитьСтроку.Имя = "УдалитьСтроку" + ИмяНовОбластиЯчейки;
				ИсхОбластьЯчейкиУдалитьСтроку = ТекТабличноеПоле.Область(ОбластьЯчейкиИсходнойОбласти.Верх, 1, ОбластьЯчейкиИсходнойОбласти.Верх, 1);
				ИсхОбластьЯчейкиУдалитьСтроку.Имя = "УдалитьСтроку" + ИмяОбластиЯчейки;
			КонецЕсли;
			
			// очищаем значения ячеек вставленной области
			Если ОбластьЯчейки.СодержитЗначение = Истина Тогда
				ОбластьЯчейки.Очистить();
			Иначе
				// порядековый номер последней строки перед вставкой
				ИсходныйНомер        = Число("0" + ОбластьЯчейки.Текст);
				НовыйПорядковыйНомер = ИсходныйНомер + 1;
				
				ОбластьЯчейки.Текст  = ? (НЕ НовыйПорядковыйНомер > МаксимальноеКоличествоСтрокГруппы, Строка(НовыйПорядковыйНомер), "");
				
			КонецЕсли;
		КонецЕсли;	
	КонецЦикла;

	// Назначим текущей областью таблицы первую редактируемую ячейку добавленной строки.
	// Определяем текущую область таблицы
	ИмяТекущейОбласти = ИмяГруппы + "01_" + КолСтрокСтр1;

	Форма.Элементы[ТекТабличноеПолеИмя].ТекущаяОбласть = ТекТабличноеПоле.Области[ИмяТекущейОбласти];

	// установим фокус на поле табличн. документа
	Форма.ТекущийЭлемент = Форма.Элементы[ТекТабличноеПолеИмя];

	// добавляем в структуру многострочной группы новую строку
	СтруктураГруппы.Добавить();
	Инд = 0;
	Пока Истина Цикл 
		Инд = Инд + 1;
		Обл = ТекТабличноеПоле.Области.Найти("УдалитьСтроку" + ИмяГруппы + "01_" + Формат(Инд, "ЧГ="));
		Если Обл = Неопределено Тогда 
			Прервать;
		КонецЕсли;
		Обл.Гиперссылка = Истина;
		Обл.Текст = "х";
	КонецЦикла;
	Модифицированность = Истина;

КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтроку(Команда)
		
	ТекТабличноеПоле = ЭтаФорма["ТабличныйДокумент"];
	
	ТекущаяОбласть = ТекТабличноеПоле.ТекущаяОбласть;
	ИмяГруппы      = РазделТекущейОбласти(ЭтаФорма, ТекущаяОбласть);
	
	Если ИмяГруппы = Неопределено Тогда
		
		Сообщение = Новый СообщениеПользователю;
		
		Сообщение.Текст = НСтр("ru='Не выбрана удаляемая строка многострочного раздела.'");
		
		Сообщение.Сообщить();
		
		Возврат;
		
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("УдалитьСтрокуЗавершение", ЭтотОбъект);
	ТекстВопроса = НСтр("ru='Удалить выбранную строку?'");
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтрокуЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	#Если ВебКлиент Тогда
		
		УдалитьДополнительнуюСтрокуНаСервере(Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
		
	#Иначе
		
		УдалитьДополнительнуюСтрокуНаКлиенте(Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
		
	#КонецЕсли
	
КонецПроцедуры

&НаСервере
Процедура УдалитьДополнительнуюСтрокуНаСервере(ТекущаяСтраница)
	
	УдалитьДополнительнуюСтроку(ЭтаФорма, , , ТекущаяСтраница);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьДополнительнуюСтрокуНаКлиенте(ТекущаяСтраница)
	
	УдалитьДополнительнуюСтроку(ЭтаФорма, , , ТекущаяСтраница);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УдалитьДополнительнуюСтроку(Форма, СпециальноеДобавление = Ложь, ИмяКолонкиНомера = Неопределено, ТекущаяСтраница) Экспорт
	Перем ИсходноеКоличествоСтрокГруппы;
	Перем СтруктураГруппы;
	
	// Сначала выполним проверку на активную страницу панели формы,
	// которая содержит многострочный раздел
	#Если НаКлиенте Тогда
		ИмяГруппы = Форма.ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаКлиенте(ТекущаяСтраница);
	#Иначе
		ИмяГруппы = Форма.ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ТекущаяСтраница);
	#КонецЕсли
	
	// исходное количество строк группы
	Форма.мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);
	
	Форма.мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);
	
	ТекТабличноеПолеИмя = "ТабличныйДокумент";
	
	ТекТабличноеПоле = Форма[ТекТабличноеПолеИмя];
	ТекущаяОбласть = Форма.Элементы[ТекТабличноеПолеИмя].ТекущаяОбласть;
	ИмяЯчейки      = ТекущаяОбласть.Имя;
	
	ИмяГруппы = РазделТекущейОбласти(Форма, ТекущаяОбласть);
	
	// предварительно обновим структуру многострочных разделов
	РегламентированнаяОтчетностьКлиентСервер.ОбновитьСтруктуруМногострочногоРаздела(Форма, ИмяГруппы);
	
	// номер строки многострочного раздела определим
	// по имени выделенной ячейки
	НомУдаляемойСтроки = Число( Сред( ИмяЯчейки, СтрНайти( ИмяЯчейки, "_") + 1));
	НомерСтрокиТаблицы = НомУдаляемойСтроки - 1; // нумерация строк в таблице значений начинается с нуля
	СтруктураГруппы = Форма[СтруктураГруппы];
	Если СтруктураГруппы.Количество() > ИсходноеКоличествоСтрокГруппы Тогда
		// удаляется добавленная строка
		ИмяПервойЯчейкиУдаляемойСтроки = ИмяГруппы + "01_" + Формат(НомУдаляемойСтроки, "ЧГ=");
		
		// область первой ячейки удаляемой строки многострочного раздела
		ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяПервойЯчейкиУдаляемойСтроки];
		
		// номера строк удаляемой области
		НомерВерхЯчейкиОбласти = ОбластьЯчейки.Верх;
		НомерНижнЯчейкиОбласти = ОбластьЯчейки.Верх;
		
		РегламентированнаяОтчетностьВызовСервера.СпециальногоУдаленияСтроки(ТекТабличноеПоле, ТекТабличноеПолеИмя, ИмяГруппы, НомерВерхЯчейкиОбласти, НомерНижнЯчейкиОбласти);
		
		Форма[ТекТабличноеПолеИмя] = ТекТабличноеПоле;
				
		КолвоСдвигаемыхСтрок = СтруктураГруппы.Количество() - НомУдаляемойСтроки;
		
		// обновим имена ячеек сдвинутых строк
		Если КолвоСдвигаемыхСтрок > 0 Тогда
			
			Для НСтр = НомУдаляемойСтроки + 1 По СтруктураГруппы.Количество() Цикл
				
				НСтрСтр = Формат(НСтр, "ЧГ=");
				НСтрСтр1 = Формат(НСтр - 1, "ЧГ=");
				
				ТекСтрока = СтруктураГруппы[НСтр-1];
				
				Для НомерГрафы = 1 По Форма.мСтруктураКолвоКолонокРазделов[ИмяГруппы] Цикл
					
					КолонкаИмя = ИмяГруппы + Формат(НомерГрафы, "ЧЦ=2; ЧВН=");
					
					Если СтруктураГруппы[0].Свойство(КолонкаИмя) Тогда
						                        						
						ИмяСдвинутойЯчейки = КолонкаИмя + "_" + НСтрСтр;
						НовоеИмяСдвинутойЯчейки = КолонкаИмя + "_" + НСтрСтр1;
						
						ОбластьСдвинутойЯчейки     = ТекТабличноеПоле.Области[ИмяСдвинутойЯчейки];
						ОбластьСдвинутойЯчейки.Имя = НовоеИмяСдвинутойЯчейки;
						
						Если НомерГрафы = 1 Тогда
							ОбластьЯчейкиУдалитьСтроку = ТекТабличноеПоле.Область(ОбластьСдвинутойЯчейки.Верх, 1, ОбластьСдвинутойЯчейки.Верх, 1);
							ОбластьЯчейкиУдалитьСтроку.Имя = "УдалитьСтроку" + НовоеИмяСдвинутойЯчейки;
						КонецЕсли;
						
						Если ОбластьСдвинутойЯчейки.СодержитЗначение <> Истина Тогда
							// обновляем порядковый номер строки
							
							СтарыйНомер = Число(ТекСтрока[КолонкаИмя]);
							НовыйПорядковыйНомер = Строка(Макс(СтарыйНомер - 1, 0));
							ОбластьСдвинутойЯчейки.Текст = НовыйПорядковыйНомер;
							
							// обновляем значение элемента таблицы значений
							ТекСтрока[КолонкаИмя] = НовыйПорядковыйНомер;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
				
			КонецЦикла;
		КонецЕсли;
		
		// обновляем структуру многострочного раздела
		СтруктураГруппы.Удалить(НомерСтрокиТаблицы);
		
	Иначе
		// строка не удаляется в форме табличного документа,
		// а должна осуществляться сдвиг строк
		
		// обновляем структуру многострочного раздела
		// методом удаления выбранной строки и добавления пустой строки
		СтруктураГруппы.Удалить(НомерСтрокиТаблицы);
		
		ДобавляемаяСтрока = СтруктураГруппы.Добавить();
		
		// обновляем порядковые номера строк, выводимых в табличный документ
		Для Каждого СтрокаТаблицы Из СтруктураГруппы Цикл
			
			НомерСтрокиВТаблице = СтруктураГруппы.Индекс(СтрокаТаблицы);
			НомерСтрокиВФормеТаблицы = Формат(НомерСтрокиВТаблице + 1, "ЧГ=0");
			
			Для НомерГрафы = 1 По Форма.мСтруктураКолвоКолонокРазделов[ИмяГруппы] Цикл
				КолонкаТаблицыИмя = ИмяГруппы + Формат(НомерГрафы, "ЧЦ=2; ЧВН=");
				
				Если СтруктураГруппы[0].Свойство(КолонкаТаблицыИмя) Тогда
					
					ИмяЯчейки                = КолонкаТаблицыИмя + "_" + НомерСтрокиВФормеТаблицы;
					ОбластьЯчейкиТаблицы     = ТекТабличноеПоле.Области[ИмяЯчейки];
					
					Если ОбластьЯчейкиТаблицы.СодержитЗначение <> Истина Тогда
						
						ПервыйНомерВГруппе = 1;
						
						// обновляем порядковый номер строки
						НовыйПорядковыйНомер = Строка(ПервыйНомерВГруппе + НомерСтрокиВТаблице);
						
						СтрокаТаблицы[КолонкаТаблицыИмя] = НовыйПорядковыйНомер;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		// Данные в многострочном блоке обновляются в декларациях!
		// Обновляем экранную форму табличного документа
		#Если НаКлиенте Тогда
			Форма.ВывестиРазделВТабличныйДокументНаКлиенте(ИмяГруппы, СтруктураГруппы);
		#Иначе
			Форма.ВывестиРазделВТабличныйДокументНаСервере(ИмяГруппы, СтруктураГруппы);
		#КонецЕсли
		
	КонецЕсли;
			
	// назначим текущей областью таблицы первую редактируемую ячейку
	// удаленной строки, если ее порядковый номер меньше кол-ва строк
	// многострочного раздела, или последней строки раздела в противном случае
	Если СтруктураГруппы.Количество() = 1 Тогда
		Обл = ТекТабличноеПоле.Области["УдалитьСтроку" + ИмяГруппы + "01_1"];
		Обл.Гиперссылка = Ложь;
		Обл.Текст = "";
	КонецЕсли;
	// определяем текущую область таблицы
	НомТекущейСтроки  = Мин( НомУдаляемойСтроки, СтруктураГруппы.Количество() );
	ИмяТекущейОбласти = ИмяГруппы + "01_" + Формат(НомТекущейСтроки, "ЧГ=");
	
	Форма.Элементы[ТекТабличноеПолеИмя].ТекущаяОбласть = ТекТабличноеПоле.Области[ИмяТекущейОбласти];
	
	// установим фокус на поле табличн. документа
	ТекущийЭлемент = Форма.Элементы[ТекТабличноеПолеИмя];
	
	Форма.Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьБланк(Команда)
	
	Отказ = Ложь;
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("Команда", Команда);
	ОписаниеОповещения = Новый ОписаниеОповещения("ПоказатьБланкЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередПечатьюРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьБланкЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;

	Команда = ДополнительныеПараметры.Команда;
		
	Печать(Команда.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура Печать(ВидПечати, НеИзФормыОтчета = Ложь) Экспорт
    	        	
	Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1. Формируется печатная форма...'"), ЭтаФорма.Заголовок), , , БиблиотекаКартинок.Печать);
	
	Если НЕ ПечатьНаСервере(ВидПечати) Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ОткрытьФормуПредварительногоПросмотра(ЭтаФорма, ВидПечати, , СтруктураРеквизитовФормы.СписокПечатаемыхЛистов);
		
КонецПроцедуры

&НаСервере
Функция ПечатьНаСервере(ВидПечати)
	
	Если НЕ РегламентированнаяОтчетность.ПринтерДоступен() Тогда
		
		Сообщение = Новый СообщениеПользователю;

		Сообщение.Текст = НСтр("ru='Перед формированием печатных форм необходимо определить в системе принтер и задать его в качестве используемого по умолчанию!'");

		Сообщение.Сообщить();
		
		Возврат Ложь;
		
	КонецЕсли;
			
	Если ТипЗнч(мДеревоВыбранныхСтраниц) <> Тип("ДанныеФормыДерево") Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	СтруктураРеквизитовФормы.мПечатныеФормы.Очистить();
	
	СохранитьДанныеРаздела(СтруктураРеквизитовФормы.НаимТекущегоРаздела, Ложь, Ложь);
				
	сохрТаблДок = ТабличныйДокумент.ПолучитьОбласть();
	
	СтрПоля = "ПолеСверху, ПолеСправа, ПолеСнизу, ПолеСлева";
	ВремПоля = Новый Структура(СтрПоля);
	
	ЗаполнитьЗначенияСвойств(ВремПоля, ТабличныйДокумент, СтрПоля);
	
	Если НомерКорректировки = 0 Тогда
		СтруктураДанныхТитульный.Вставить("НомКоррект", "");
	КонецЕсли;
	ВывестиМакетВТаблДокНаСервере("Титульный", 0);
	
	ОбщиеРеквизитыРазделов = ПолучитьОбщиеРеквизитыСТитульногоЛиста();
	
	Для Каждого СтрокаУровня1 Из мДеревоВыбранныхСтраниц.ПолучитьЭлементы() Цикл
		
		Если СтрокаУровня1.ВыводНаПечать = 0 Тогда
			Продолжить;
		КонецЕсли;
						
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("НаименованиеЛиста",  СтрокаУровня1.Представление);
		СтруктураПараметров.Вставить("ОриентацияЛиста",    СтрокаУровня1.ОриентацияСтраницы);
		СтруктураПараметров.Вставить("ИмяСтраницы",        СтрокаУровня1.ИмяСтраницы);
		Структурапараметров.Вставить("ИмяОбластиТаблПоля", СтрокаУровня1.ИмяОбластиТабличногоПоля);
		СтруктураПараметров.Вставить("ВидПечати",          ВидПечати);
				
		Если НЕ мСтруктураМногостраничныхРазделов.Свойство(СтрокаУровня1.ИмяСтраницы) Тогда
			
			ВывестиМакетВТаблДокНаСервере(СтрокаУровня1.ИмяСтраницы, 0);
			ВывестиНаПечатьЛист(СтруктураПараметров, ОбщиеРеквизитыРазделов, СтрПоля);
			
		Иначе
			
			СтруктураПараметров.Вставить("ИмяСтраницыПанели", СтрокаУровня1.ИмяСтраницы);
			ВывестиНаПечатьДополнительныеСтраницы(СтруктураПараметров, ОбщиеРеквизитыРазделов);
	
		КонецЕсли;
		
	КонецЦикла;
	
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(сохрТаблДок);
	ЗаполнитьЗначенияСвойств(ТабличныйДокумент, ВремПоля, СтрПоля);
	
	РегламентированнаяОтчетностьКлиентСервер.ПроставлениеНомеровЛистов(ЭтаФорма, , СтруктураРеквизитовФормы.СписокПечатаемыхЛистов);
	СтруктураДанныхТитульный.Вставить("НомКоррект", Строка(НомерКорректировки));
	КопироватьДанныеФормы(мДеревоВыбранныхСтраниц, мДеревоСтраницОтчета);
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция ПолучитьОбщиеРеквизитыСТитульногоЛиста()
	
	МассивИНН            = Новый Массив(12);
	МассивКПП            = Новый Массив(9);
	МассивДатаПодписиРук = Новый Массив(8);
	МассивДатаПодписиБух = Новый Массив(8);
	МассивДатаПодписиУпП = Новый Массив(8);
	МассивДатаПодписиФЛ  = Новый Массив(8);
	
	ИсходныйМакет = ТабличныйДокумент;
		
	Область = ИсходныйМакет.Области.Найти("ИНН1");
	
	Если НЕ Область = Неопределено Тогда
		
		СтрИНН = Область.Значение;
		
		Если СтрДлина(СтрИНН) = 10 Тогда
			СтрИНН = "00" + СтрИНН;
		КонецЕсли;
				
		Для Ном = 1 По СтрДлина(СтрИНН) Цикл
			
			МассивИНН[Ном - 1] = Сред(СтрИНН, Ном, 1);
			
		КонецЦикла;
		
	КонецЕсли;
		
	Область = ИсходныйМакет.Области.Найти("КПП1");
	
	Если НЕ Область = Неопределено Тогда
		
		Для Ном = 1 По СтрДлина(Область.Значение) Цикл
			
			МассивКПП[Ном - 1] = Сред(Область.Значение, Ном, 1);
			
		КонецЦикла;
					
	КонецЕсли;
			
	Область = ИсходныйМакет.Области.Найти("ДатаПодписи");
	
	Если НЕ Область = Неопределено Тогда
		
		Если ТипЗнч(Область.Значение) = Тип("Строка") Тогда 
			СтрДатаПодписи = Лев(СтрЗаменить(Область.Значение, ".", ""), 8);
		ИначеЕсли ТипЗнч(Область.Значение) = Тип("Дата") Тогда 
			Если ЗначениеЗаполнено(Область.Значение) Тогда 
				СтрДатаПодписи = Лев(СтрЗаменить(Формат(Область.Значение, "ДФ = ""дд.ММ.гггг 'г.'"""), ".", ""), 8);
			Иначе
				СтрДатаПодписи = "        ";
			КонецЕсли;
		КонецЕсли;
		
		Для Ном = 1 По СтрДлина(СтрДатаПодписи) Цикл
			
			Если ЗначениеЗаполнено(ИсходныйМакет.Области.ОргДиректор.Значение) Тогда
				МассивДатаПодписиРук[Ном - 1] = Сред(СтрДатаПодписи, Ном, 1);
			КонецЕсли;	
			Если ЗначениеЗаполнено(ИсходныйМакет.Области.ОргБухгалтер.Значение) Тогда
				МассивДатаПодписиБух[Ном - 1] = Сред(СтрДатаПодписи, Ном, 1);
			КонецЕсли;	
			Если ЗначениеЗаполнено(ИсходныйМакет.Области.ОргУП.Значение) Тогда
				МассивДатаПодписиУпП[Ном - 1] = Сред(СтрДатаПодписи, Ном, 1);	
			КонецЕсли;	
			Если НЕ РегламентированнаяОтчетностьВызовСервера.ЭтоЮридическоеЛицо(СтруктураРеквизитовФормы.Организация) Тогда
				МассивДатаПодписиФЛ[Ном - 1] = Сред(СтрДатаПодписи, Ном, 1);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ОбщиеРеквизитыРазделов = Новый Структура;
		
	ОбщиеРеквизитыРазделов.Вставить("ИНН", МассивИНН);
	ОбщиеРеквизитыРазделов.Вставить("КПП", МассивКПП);
	ОбщиеРеквизитыРазделов.Вставить("ДатаПодписиРук", МассивДатаПодписиРук);
	ОбщиеРеквизитыРазделов.Вставить("ДатаПодписиБух", МассивДатаПодписиБух);
	ОбщиеРеквизитыРазделов.Вставить("ДатаПодписиУпП", МассивДатаПодписиУпП);	
	ОбщиеРеквизитыРазделов.Вставить("ДатаПодписиФЛ",  МассивДатаПодписиФЛ);
	
	Возврат ОбщиеРеквизитыРазделов;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьПечатнуюФорму(ПараметрыПечати, МакетПечатнойФормы, ОбщиеРеквизитыРазделов)
	
	ИсходныйМакет = ТабличныйДокумент;
		
	Для Каждого Область Из ИсходныйМакет.Области Цикл
		
			Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник И Область.СодержитЗначение Тогда
				
			Если СтрНайти(Область.Имя, "ДобавлениеСтроки") > 0
				Или СтрНайти(Область.Имя, "ДобавитьСтроку") > 0
				Или СтрНайти(Область.Имя, "УдалитьСтроку") > 0 Тогда 
				Продолжить;
			КонецЕсли;
			
			Если СтрНайти(Область.Имя, "ДобавитьСтраницу") > 0
				Или СтрНайти(Область.Имя, "УдалитьСтраницу") > 0 Тогда 
				Продолжить;
			КонецЕсли;
			
			Если ПараметрыПечати.ИмяСтраницы = "Титульный" Тогда
				
				Если СтрЧислоВхождений(Область.Имя, "ИНН1") > 0
				 ИЛИ СтрЧислоВхождений(Область.Имя, "КПП1") > 0
				 ИЛИ СтрЧислоВхождений(Область.Имя, "ДатаПодписи") > 0 Тогда
					
					Продолжить;
					
				ИначеЕсли СтрЧислоВхождений(Область.Имя, "ОтчетГод") > 0
					  ИЛИ СтрЧислоВхождений(Область.Имя, "КодИМНС") > 0
					  ИЛИ Область.Имя = "ОГРН"
					  ИЛИ СтрЧислоВхождений(Область.Имя, "ИноСтрКод") > 0
				      ИЛИ СтрЧислоВхождений(Область.Имя, "ИноСтрКодПост") > 0 
				   	  ИЛИ СтрЧислоВхождений(Область.Имя, "СоставленаНа") > 0 
					  ИЛИ СтрЧислоВхождений(Область.Имя, "ИННРук") > 0
					  ИЛИ СтрЧислоВхождений(Область.Имя, "ИННГБ") > 0 
					  ИЛИ СтрЧислоВхождений(Область.Имя, "ИННУП") > 0 Тогда
					
					Для Ном = 1 По СтрДлина(Область.Значение) Цикл
						
						МакетПечатнойФормы.Области[Область.Имя + Ном].Значение = Сред(Область.Значение, Ном, 1);
						
					КонецЦикла;
					
					Продолжить;
					
				КонецЕсли;	
				
			ИначеЕсли ПараметрыПечати.ИмяСтраницы = "ФизЛица" Тогда
				
				Если СтрЧислоВхождений(Область.Имя, "ФизЛицДатаР") > 0 
					ИЛИ СтрЧислоВхождений(Область.Имя, "ФизЛицДокДата") > 0 Тогда
					
					Если ЗначениеЗаполнено(Область.Значение) Тогда
						СтрокаДт =  Лев(СтрЗаменить(Область.Значение, ".", ""), 8);
						Для Ном = 1 По СтрДлина(СтрокаДт) Цикл
							
							МакетПечатнойФормы.Области[Область.Имя + Ном].Значение = Сред(СтрокаДт, Ном, 1);
							
						КонецЦикла;
						
					КонецЕсли;
					
					Продолжить;	
				ИначеЕсли (СтрЧислоВхождений(Область.Имя, "ФизЛицКодГражд") > 0
                    ИЛИ СтрЧислоВхождений(Область.Имя, "ФизЛицИнд") > 0  
					ИЛИ СтрЧислоВхождений(Область.Имя, "ФизЛицДок") > 0
				    ИЛИ СтрЧислоВхождений(Область.Имя, "ФизЛицС") > 0) 
					И (Область.Имя<>"ФизЛицДокВид") И (Область.Имя<>"ФизЛицДокВыдан")  
					И (Область.Имя<>"ФизЛицДокСерияНомер") 
					И (Область.Имя<>"ФизЛицСлТел")  И (Область.Имя<>"ФизЛицСубъект") Тогда
					
					Если Не ПустаяСтрока(Область.Значение) Тогда
					Для Ном = 1 По СтрДлина(Область.Значение) Цикл
						
						МакетПечатнойФормы.Области[Область.Имя + Ном].Значение = Сред(Область.Значение, Ном, 1);
						
					КонецЦикла;
					КонецЕсли;
					Продолжить;     				
					
				КонецЕсли;
					
			КонецЕсли;
			
			МакетПечатнойФормы.Области[Область.Имя].Значение = Область.Значение;
			
		КонецЕсли;
		
	КонецЦикла;
		
	Для Каждого Реквизит Из ОбщиеРеквизитыРазделов Цикл
		
		Индекс = 1;
		Постфикс = "_1";
		Разделитель = Истина;
		
		Если Реквизит.Ключ = "ДатаПодписиРук" Тогда
			Постфикс = "1";
			Разделитель = Ложь;
			Если ПараметрыПечати.ИмяСтраницы = "Титульный" Тогда
				НаименованиеОбласти = "ДатаПодписиРук";
			Иначе
				НаименованиеОбласти = "ДатаПодписи";
			КонецЕсли;
		ИначеЕсли Реквизит.Ключ = "ДатаПодписиБух" Тогда
			Постфикс = "1";
			Разделитель = Ложь;
			Если ПараметрыПечати.ИмяСтраницы = "Титульный" Тогда
				НаименованиеОбласти = "ДатаПодписиБух";
			Иначе
				НаименованиеОбласти = "ДатаПодписи";
			КонецЕсли;
		ИначеЕсли Реквизит.Ключ = "ДатаПодписиУпП" Тогда
			Постфикс = "1";
			Разделитель = Ложь;
			Если ПараметрыПечати.ИмяСтраницы = "Титульный" Тогда
			НаименованиеОбласти = "ДатаПодписиУпП";
			Иначе
				НаименованиеОбласти = "ДатаПодписи";
			КонецЕсли;
		ИначеЕсли Реквизит.Ключ = "ДатаПодписиФЛ" Тогда
			Постфикс = "1";
			Разделитель = Ложь;
		    Если ПараметрыПечати.ИмяСтраницы = "Титульный" Тогда
			НаименованиеОбласти = "ДатаПодписиФЛ";
			Иначе
				НаименованиеОбласти = "ДатаПодписи";
			КонецЕсли;	
		Иначе
			НаименованиеОбласти = Реквизит.Ключ + Индекс;
		КонецЕсли;
		
		Если Реквизит.Значение[Индекс] = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Пока НЕ МакетПечатнойФормы.Области.Найти(НаименованиеОбласти + Постфикс) = Неопределено Цикл
			
			Для Ном = 1 По Реквизит.Значение.Количество() Цикл
				Если НЕ Реквизит.Значение[Ном - 1] = Неопределено Тогда
					МакетПечатнойФормы.Области[НаименованиеОбласти + ?(Разделитель, "_", "") + Ном].Значение = Реквизит.Значение[Ном - 1];
				КонецЕсли;
			КонецЦикла;
			
			Индекс = Индекс + 1;
			
			НаименованиеОбласти = Реквизит.Ключ + Индекс;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиНаПечатьЛист(Парам1, ОбщиеРеквизитыРазделов, СтрПоля = Неопределено)
	
	СоответствиеРазделовМакетам = Новый Соответствие;
	
	СоответствиеРазделовМакетам.Вставить("Титульный", "ПечатнаяФормаОтчета2004Кв1_Титульный");
	СоответствиеРазделовМакетам.Вставить("ФизЛица",   "ПечатнаяФормаОтчета2004Кв1_ФизЛица");
	СоответствиеРазделовМакетам.Вставить("Раздел1_1", "ПечатнаяФормаОтчета2004Кв1_Раздел1_1");
	СоответствиеРазделовМакетам.Вставить("Раздел1_2", "ПечатнаяФормаОтчета2004Кв1_Раздел1_2");
	СоответствиеРазделовМакетам.Вставить("Раздел1_3", "ПечатнаяФормаОтчета2004Кв1_Раздел1_3");
	СоответствиеРазделовМакетам.Вставить("Раздел1_4", "ПечатнаяФормаОтчета2004Кв1_Раздел1_4");
	
	ПечатнаяФормаРаздела = СоответствиеРазделовМакетам[Парам1.ИмяСтраницы];
		
	МакетПечатнойФормы = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(ПечатнаяФормаРаздела);
	МакетПечатнойФормы.ПолеСверху = 5;
	МакетПечатнойФормы.ПолеСправа = 5;
	МакетПечатнойФормы.ПолеСнизу = 5;
	МакетПечатнойФормы.ПолеСлева = 5;
	
	КолвоМнгГрупп = 0;
	
	Если Парам1.ИмяСтраницы = "Раздел1_1" Тогда
		КолвоМнгГрупп = 4;
	ИначеЕсли Парам1.ИмяСтраницы = "Раздел1_2" Тогда	
		КолвоМнгГрупп = 4;
	ИначеЕсли Парам1.ИмяСтраницы = "Раздел1_3" Тогда	
		КолвоМнгГрупп = 4;
	ИначеЕсли Парам1.ИмяСтраницы = "Раздел1_4" Тогда	
		КолвоМнгГрупп = 1;	
	КонецЕсли;
	
	Для НомГруппы = 1 По КолвоМнгГрупп Цикл
		
		Если Парам1.ИмяСтраницы = "Раздел1_1" Тогда
			Если НомГруппы = 1 Тогда
				ИдГруппы = СтруктураРеквизитовФормы.мИдГруппы1;
			ИначеЕсли НомГруппы = 2 Тогда	
				ИдГруппы = СтруктураРеквизитовФормы.мИдГруппы2;
			ИначеЕсли НомГруппы = 3 Тогда		
				ИдГруппы = СтруктураРеквизитовФормы.мИдГруппы3;
			ИначеЕсли НомГруппы = 4 Тогда		
				ИдГруппы = СтруктураРеквизитовФормы.мИдГруппы4;
			КонецЕсли;

		ИначеЕсли Парам1.ИмяСтраницы = "Раздел1_2" Тогда	
			Если НомГруппы = 1 Тогда
				ИдГруппы = СтруктураРеквизитовФормы.мИдГруппы5;
			ИначеЕсли НомГруппы = 2 Тогда	
				ИдГруппы = СтруктураРеквизитовФормы.мИдГруппы6;
			ИначеЕсли НомГруппы = 3 Тогда		
				ИдГруппы = СтруктураРеквизитовФормы.мИдГруппы7;
			ИначеЕсли НомГруппы = 4 Тогда		
				ИдГруппы = СтруктураРеквизитовФормы.мИдГруппы8;
			КонецЕсли;
			
		ИначеЕсли Парам1.ИмяСтраницы = "Раздел1_3" Тогда	
			Если НомГруппы = 1 Тогда
				ИдГруппы = СтруктураРеквизитовФормы.мИдГруппы9;
			ИначеЕсли НомГруппы = 2 Тогда	
				ИдГруппы = СтруктураРеквизитовФормы.мИдГруппы10;
			ИначеЕсли НомГруппы = 3 Тогда		
				ИдГруппы = СтруктураРеквизитовФормы.мИдГруппы11;
			ИначеЕсли НомГруппы = 4 Тогда		
				ИдГруппы = СтруктураРеквизитовФормы.мИдГруппы12;
			КонецЕсли;
			
		ИначеЕсли Парам1.ИмяСтраницы = "Раздел1_4" Тогда	
			ИдГруппы = СтруктураРеквизитовФормы.мИдГруппы13;	
		КонецЕсли;
		
		КолвоСтрокВТаблДок = ЭтаФорма[ИдГруппы].Количество();
		
		Если Парам1.ИмяСтраницы = "Раздел1_4" Тогда
			ОбластьМнгЧасти       = МакетПечатнойФормы.ПолучитьОбласть("МногострочнаяЧасть");
			ВысотаОбластиМнгЧасти = МакетПечатнойФормы.ПолучитьОбласть("МногострочнаяЧасть").ВысотаТаблицы;
		Иначе
			ОбластьМнгЧасти       = МакетПечатнойФормы.ПолучитьОбласть("МногострочнаяЧасть" + НомГруппы);
			ВысотаОбластиМнгЧасти = МакетПечатнойФормы.ПолучитьОбласть("МногострочнаяЧасть" + НомГруппы).ВысотаТаблицы;
		КонецЕсли;

		ИмяОбластиПоследнейДопСтроки = ОбластьМнгЧасти.ПолучитьОбласть(ВысотаОбластиМнгЧасти, , ВысотаОбластиМнгЧасти).Области[0].Имя;
		
		КолвоСтрокВПечатнойФорме = Число(Сред(ИмяОбластиПоследнейДопСтроки, СтрНайти(ИмяОбластиПоследнейДопСтроки, "_") + 1));
		КолвоСтрокВПечатнойФормеСтр = Формат(КолвоСтрокВПечатнойФорме, "ЧГ=");
		
		Если КолвоСтрокВТаблДок > КолвоСтрокВПечатнойФорме Тогда
			
			НомерВерхЯчейкиОбласти = МакетПечатнойФормы.Область(ИдГруппы + "01_" + КолвоСтрокВПечатнойФормеСтр).Верх;
			НомерНижнЯчейкиОбласти = МакетПечатнойФормы.Область(ИдГруппы + Формат(мСтруктураКолвоКолонокРазделов[ИдГруппы], "ЧЦ=2; ЧВН=") + "_" + КолвоСтрокВПечатнойФормеСтр).Низ;
			
			ВставляемаяОбласть = МакетПечатнойФормы.Область(НомерВерхЯчейкиОбласти, , НомерНижнЯчейкиОбласти);
			
			КолвоДопСтрок = КолвоСтрокВТаблДок - КолвоСтрокВПечатнойФорме;
			
			Для Ном = 1 По КолвоДопСтрок Цикл
				
				МакетПечатнойФормы.ВставитьОбласть(ВставляемаяОбласть, , ТипСмещенияТабличногоДокумента.ПоВертикали);
				
			КонецЦикла;
			
			Для Каждого Область Из МакетПечатнойФормы.ПолучитьОбласть(НомерВерхЯчейкиОбласти + КолвоДопСтрок, , НомерНижнЯчейкиОбласти + КолвоДопСтрок).Области Цикл
				НайденнаяОбласть = МакетПечатнойФормы.Области.Найти(Область.Имя);
				Если НЕ НайденнаяОбласть = Неопределено Тогда 
					НайденнаяОбласть.Имя = Лев(НайденнаяОбласть.Имя, СтрНайти(НайденнаяОбласть.Имя, "_") - 1) + "_" + Формат(КолвоСтрокВТаблДок, "ЧЦ=3");
				КонецЕсли;
			КонецЦикла;
			
			Для Ном = 0 По КолвоДопСтрок - 1 Цикл
				
				Для Каждого Область Из МакетПечатнойФормы.ПолучитьОбласть(НомерВерхЯчейкиОбласти + КолвоДопСтрок, , НомерНижнЯчейкиОбласти + КолвоДопСтрок).Области Цикл
					НайденнаяОбласть = МакетПечатнойФормы.Область(НомерВерхЯчейкиОбласти + Ном, Область.Лево, НомерВерхЯчейкиОбласти + Ном, Область.Право);
					Если НЕ НайденнаяОбласть = Неопределено Тогда 
						НайденнаяОбласть.Имя = Лев(Область.Имя, СтрНайти(Область.Имя, "_") - 1) + "_" + Формат(КолвоСтрокВПечатнойФорме + Ном, "ЧЦ=3");
					КонецЕсли;
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ЗаполнитьПечатнуюФорму(Парам1, МакетПечатнойФормы, ОбщиеРеквизитыРазделов);
	
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(МакетПечатнойФормы);
	ЗаполнитьЗначенияСвойств(ТабличныйДокумент, МакетПечатнойФормы, СтрПоля, "Макет");
	
	УстановитьФорматВыводаНаПечать(ТабличныйДокумент);
	
	РегламентированнаяОтчетность.ВывестиНаПечатьЛистОбщая(ЭтаФорма.Заголовок, Парам1, ТабличныйДокумент, СтруктураРеквизитовФормы.мПечатныеФормы);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьФорматВыводаНаПечать(ТабДокумент)
	
	Если СтруктураРеквизитовФормы.ЕдиницаИзмерения
		= ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1 Тогда
		
		СтрокаФормата = "ЧДЦ = " + СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧС = 0";
		
	ИначеЕсли СтруктураРеквизитовФормы.ЕдиницаИзмерения
		= ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1000 Тогда
		
		СтрокаФормата = "ЧДЦ = " + СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧС = 3";
		
	ИначеЕсли СтруктураРеквизитовФормы.ЕдиницаИзмерения
		= ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1000000 Тогда
		
		СтрокаФормата = "ЧДЦ = " + СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧС = 6";
		
	КонецЕсли;
	
	Для Каждого Область Из ТабДокумент.Области Цикл
		
		Если СтрНайти(Область.Формат, "ЧН=-") > 0 Тогда
			
			Область.Формат = СтрокаФормата;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиНаПечатьДополнительныеСтраницы(СтруктураПараметровСтраницы, ОбщиеРеквизитыРазделов)
	
	Перем ИмяСтраницы;
	Перем ТаблицаСтраницРаздела;
	
	СтруктураПараметровСтраницы.Свойство("ИмяСтраницыПанели", ИмяСтраницы);
	
	Если Не мСтруктураМногостраничныхРазделов.Свойство(ИмяСтраницы, ТаблицаСтраницРаздела) Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаСтраницРаздела = ЭтаФорма[ТаблицаСтраницРаздела];
	
	МассивПризнаковАктивности = Новый Массив;
	Для Каждого Страница Из ТаблицаСтраницРаздела Цикл
		ТекущийИндекс = ТаблицаСтраницРаздела.Индекс(Страница);
		МассивПризнаковАктивности.Добавить(ТаблицаСтраницРаздела[ТекущийИндекс].АктивнаяСтраница);
	КонецЦикла;
	
	Для Каждого Страница Из ТаблицаСтраницРаздела Цикл
		ТекущийИндекс = ТаблицаСтраницРаздела.Индекс(Страница);
		ВывестиМакетВТаблДокНаСервере(ИмяСтраницы, ТекущийИндекс + 1);
		ВывестиНаПечатьЛист(СтруктураПараметровСтраницы, ОбщиеРеквизитыРазделов);
	КонецЦикла;
	
	Для Каждого Страница Из ТаблицаСтраницРаздела Цикл
		ТекущийИндекс = ТаблицаСтраницРаздела.Индекс(Страница);
		ТаблицаСтраницРаздела[ТекущийИндекс].АктивнаяСтраница = МассивПризнаковАктивности[ТекущийИндекс];
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьОтчет(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОчиститьОтчетЗавершение", ЭтотОбъект);
	Очистить(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьОтчетЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Модифицированность = Истина;
	
	РегламентированнаяОтчетностьКлиент.ОбновитьДеревоРазделовВФормеОтчета(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура Очистить(ВыполняемоеОповещение = Неопределено) Экспорт

	РегламентированнаяОтчетностьКлиент.Очистить(ЭтаФорма, ВыполняемоеОповещение);
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьНаСервере() Экспорт
	
	СтруктураДанныхРаздел1_1.Очистить();
	СтруктураДанныхРаздел1_2.Очистить();
	СтруктураДанныхРаздел1_3.Очистить();
	СтруктураДанныхРаздел1_4.Очистить();
	
	Для Каждого мнгРаздел Из мСтруктураМногострочныхРазделов Цикл
		ЭтаФорма[мнгРаздел.Ключ].Очистить();
	КонецЦикла;
	
	НачальныеОперацииСМногострочнымиБлоками();
	
	ЗаполнитьПустыеСтруктурыДанных();
	
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела <> "Титульный"
	   И СтруктураРеквизитовФормы.НаимТекущегоРаздела <> "ФизЛица" Тогда
		ОчиститьТабличноеПолеНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	КонецЕсли;
	
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела <> "ФизЛица" Тогда
		ВывестиМакетСтраницыВТабличныйДокументНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела, 1);
	КонецЕсли;
	
	СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
	
	РегламентированнаяОтчетностьКлиентСервер.ОчиститьВариантыЗаполнения(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТабличноеПолеНаКлиенте(ВыбТабличноеПолеИмя) Экспорт

	ОчиститьТабличноеПоле(ЭтаФорма, ВыбТабличноеПолеИмя);

КонецПроцедуры

&НаСервере
Процедура ОчиститьТабличноеПолеНаСервере(ВыбТабличноеПолеИмя) Экспорт

	ОчиститьТабличноеПоле(ЭтаФорма, ВыбТабличноеПолеИмя);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОчиститьТабличноеПоле(Форма, ВыбТабличноеПолеИмя)

	ВыбТабличноеПоле = Форма.ТабличныйДокумент;
	
	МассивМногострочныхБлоков = Новый Массив;

	Если ВыбТабличноеПолеИмя = "Раздел1_1" Тогда
		МассивМногострочныхБлоков.Добавить(Форма.СтруктураРеквизитовФормы.мИдГруппы1);
		МассивМногострочныхБлоков.Добавить(Форма.СтруктураРеквизитовФормы.мИдГруппы2);
		МассивМногострочныхБлоков.Добавить(Форма.СтруктураРеквизитовФормы.мИдГруппы3);
		МассивМногострочныхБлоков.Добавить(Форма.СтруктураРеквизитовФормы.мИдГруппы4);
	ИначеЕсли ВыбТабличноеПолеИмя = "Раздел1_2" Тогда
		МассивМногострочныхБлоков.Добавить(Форма.СтруктураРеквизитовФормы.мИдГруппы5);
		МассивМногострочныхБлоков.Добавить(Форма.СтруктураРеквизитовФормы.мИдГруппы6);
		МассивМногострочныхБлоков.Добавить(Форма.СтруктураРеквизитовФормы.мИдГруппы7);
		МассивМногострочныхБлоков.Добавить(Форма.СтруктураРеквизитовФормы.мИдГруппы8);
	ИначеЕсли ВыбТабличноеПолеИмя = "Раздел1_3" Тогда
		МассивМногострочныхБлоков.Добавить(Форма.СтруктураРеквизитовФормы.мИдГруппы9);
		МассивМногострочныхБлоков.Добавить(Форма.СтруктураРеквизитовФормы.мИдГруппы10);
		МассивМногострочныхБлоков.Добавить(Форма.СтруктураРеквизитовФормы.мИдГруппы11);
		МассивМногострочныхБлоков.Добавить(Форма.СтруктураРеквизитовФормы.мИдГруппы12);
	ИначеЕсли ВыбТабличноеПолеИмя = "Раздел1_4" Тогда
		МассивМногострочныхБлоков.Добавить(Форма.СтруктураРеквизитовФормы.мИдГруппы13);
	КонецЕсли;
		
		Форма.УдалитьОбластьИзТабличногоДокументаНаСервере(ВыбТабличноеПоле, ВыбТабличноеПолеИмя, МассивМногострочныхБлоков);
		
		Форма.ТабличныйДокумент = ВыбТабличноеПоле;
		
	// Непосредственно очищаем ячейки табличного документа.
	Для Инд = 0 По ВыбТабличноеПоле.Области.Количество() - 1 Цикл
		ТекущаяОбласть = ВыбТабличноеПоле.Области[Инд];

		Если Не ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			Продолжить;
		КонецЕсли;

		Если ТекущаяОбласть.СодержитЗначение <> Истина Тогда
			Продолжить;
		КонецЕсли;

		ТекущаяОбласть.Очистить();

	КонецЦикла;
							
	Для Инд = 0 По (МассивМногострочныхБлоков.Количество() - 1) Цикл
		// Идентификатор многострочного блока
		ИмяГруппыДопСтрок = МассивМногострочныхБлоков.Получить(Инд);
		Если ИмяГруппыДопСтрок <> Неопределено Тогда
			Форма.ОбновитьСтруктуруМногострочногоРазделаНаСервере(ИмяГруппыДопСтрок);	
			ИмяСтраницыПанели = ВыбТабличноеПолеИмя;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьОбластьИзТабличногоДокументаНаСервере(ВыбТабличноеПоле, ВыбТабличноеПолеИмя, МассивМногострочныхБлоков) Экспорт
		
	Для Инд = 0 По (МассивМногострочныхБлоков.Количество() - 1) Цикл
		
		// Идентификатор многострочного блока
		ИмяГруппыДопСтрок = МассивМногострочныхБлоков.Получить(Инд);
		
		// Получим таблицу значений, содержащую данные дополнительных строк.
		ПромТаблицаДопСтрокРаздела = Неопределено;
		мСтруктураМногострочныхРазделов.Свойство(ИмяГруппыДопСтрок, ПромТаблицаДопСтрокРаздела);
		
		ПромТаблицаДопСтрокРаздела = ЭтаФорма[ПромТаблицаДопСтрокРаздела];
		
		ИсходноеКоличествоСтрокГруппы = 0;
		мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппыДопСтрок, ИсходноеКоличествоСтрокГруппы);
		
		ТекущееКоличествоСтрок = ПромТаблицаДопСтрокРаздела.Количество();
		
		Если ТекущееКоличествоСтрок > ИсходноеКоличествоСтрокГруппы Тогда
			// Имеются дополнительные строки.
			// Удаляем их.
			
			НСтр = ПромТаблицаДопСтрокРаздела.Количество();
			
			Пока НСтр > ИсходноеКоличествоСтрокГруппы Цикл
				
				ТекСтрокаТаблицы = ПромТаблицаДопСтрокРаздела[НСтр - 1];
				
				НомерГрафы = 1;
				
				ИмяПервойКолонки = ИмяГруппыДопСтрок + Формат(НомерГрафы, "ЧЦ=2; ЧВН=");
				ИмяПервойЯчейкиУдаляемойСтроки  = ИмяПервойКолонки + "_" + Формат(НСтр, "ЧГ=");
				
				// область первой ячейки удаляемой строки многострочного раздела
				ОбластьЯчейки = ВыбТабличноеПоле.Области[ИмяПервойЯчейкиУдаляемойСтроки];
				
				// номера строк удаляемой области
				НомерВерхЯчейкиОбласти = ОбластьЯчейки.Верх;
				НомерНижнЯчейкиОбласти = ОбластьЯчейки.Низ;
				
				РегламентированнаяОтчетностьВызовСервера.УдалитьОбластьИзТабличногоДокумента(ВыбТабличноеПоле, НомерВерхЯчейкиОбласти, НомерНижнЯчейкиОбласти);
				
				ЭтаФорма.ТабличныйДокумент = ВыбТабличноеПоле;
				
				// удаляем из структуры многострочного раздела соответствующую строку
				ПромТаблицаДопСтрокРаздела.Удалить(ТекСтрокаТаблицы);
				
				НСтр = НСтр - 1;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	    	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуНастроек(Команда)
	
	ОткрытьФормуВыбораСтраниц("ВыбратьДляНастройки");

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораСтраниц(ВариантВыбора)
    Перем ТекущийРазделОтчетаСокрНаим;
	Перем НомерСтраницыРазделаОтчета;
	
	// Запоминаем текущий раздел, установленный в дереве разделов отчета.
	Если НЕ Элементы.РазделыОтчета.ТекущиеДанные = Неопределено Тогда
		ТекущийРазделОтчетаСокрНаим = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
		НомерСтраницыРазделаОтчета  = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета;
	КонецЕсли;
	
	мПараметры = Новый Структура;
	мПараметры.Вставить("ПроверкаСоотношений", Ложь);
	мПараметры.Вставить("ЗначенияИзСписка", Ложь);
	мПараметры.Вставить("РазрешитьВстроеннуюПечать", Ложь);
	мПараметры.Вставить("Автосохранение", Ложь);
	мПараметры.Вставить("ОтключитьАвтоРасчет", Ложь);
	мПараметры.Вставить("ИмеетсяРеквизитДеревоВыбранныхСтраниц", Истина);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("мСчетчикСтраниц", СтруктураРеквизитовФормы.мСчетчикСтраниц);
	ПараметрыФормы.Вставить("ЕдиницаИзмерения", СтруктураРеквизитовФормы.ЕдиницаИзмерения);
	ПараметрыФормы.Вставить("ТочностьЕдиницыИзмерения", СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения);
	ПараметрыФормы.Вставить("мПараметры", мПараметры);
					
	ФормаНастройкиОтчета = РегламентированнаяОтчетностьКлиент.ПолучитьОбщуюФормуПоИмени("НастройкиОтчета", ПараметрыФормы, ЭтаФорма, "дляВыбораСтраницОтчета");

	мДеревоВыбранныхСтраниц.ПолучитьЭлементы().Очистить();
    
	КопироватьДанныеФормы(мДеревоСтраницОтчета, ФормаНастройкиОтчета.Дерево);
	
	ЗначениеЕдИзм       = СтруктураРеквизитовФормы.ЕдиницаИзмерения;
	ЗначениеЗпт         = СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения;
	
	ДополнительныеПараметры = Новый Структура("ЗначениеЕдИзм, ЗначениеЗпт, НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим", ЗначениеЕдИзм, ЗначениеЗпт, НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим);
	ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьФормуВыбораСтраницЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ФормаНастройкиОтчета.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
	ФормаНастройкиОтчета.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	ФормаНастройкиОтчета.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораСтраницЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	ЗначениеЕдИзм = ДополнительныеПараметры.ЗначениеЕдИзм;
	ЗначениеЗпт = ДополнительныеПараметры.ЗначениеЗпт;
	НомерСтраницыРазделаОтчета = ДополнительныеПараметры.НомерСтраницыРазделаОтчета;
	ТекущийРазделОтчетаСокрНаим = ДополнительныеПараметры.ТекущийРазделОтчетаСокрНаим;
	
	Модифицированность = Истина;
	
	флЗначенияИдентичны = Истина;
	
	Для Индекс = 0 По мДеревоСтраницОтчета.ПолучитьЭлементы().Количество() - 1 Цикл
		
		Если НЕ мДеревоСтраницОтчета.ПолучитьЭлементы()[Индекс].ПоказатьСтраницу = мДеревоВыбранныхСтраниц.ПолучитьЭлементы()[Индекс].ПоказатьСтраницу Тогда	
			флЗначенияИдентичны = Ложь;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЗначениеЕдИзм <> СтруктураРеквизитовФормы.ЕдиницаИзмерения
		ИЛИ ЗначениеЗпт <> СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения Тогда
		ПослеСменыЕдИзмеренияИТочности();
	КонецЕсли;
	
	// Управляем видимостью страниц основной панели формы
	РегламентированнаяОтчетностьКлиент.ПоказатьСтраницыОтчетаНаКлиенте(ЭтаФорма);
	
	Если НЕ флЗначенияИдентичны Тогда
		
		СформироватьДеревоРазделовОтчетаНаКлиенте();
		
		Если НЕ ТекущийРазделОтчетаСокрНаим = Неопределено Тогда
			
			// Пытаемся найти ранее запомненный раздел.
			НайденнаяСтрока = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(РазделыОтчета.ПолучитьЭлементы(), "КолонкаРазделыОтчетаСокрНаим", ТекущийРазделОтчетаСокрНаим);
			
			Если НЕ НайденнаяСтрока = Неопределено 
				И НЕ НомерСтраницыРазделаОтчета = Неопределено 
				И НайденнаяСтрока.ПолучитьЭлементы().Количество() > 0 Тогда
				
				НайденнаяСтрока = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(НайденнаяСтрока.ПолучитьЭлементы(), "КолонкаНомерСтраницыРазделаОтчета", НомерСтраницыРазделаОтчета);
				
			КонецЕсли;
			
			// В случае успешного поиска, устанавливаем курсор на найденный раздел.
			Если НЕ НайденнаяСтрока = Неопределено Тогда
				Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяСтрока.ПолучитьИдентификатор();
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ПослеСменыЕдИзмеренияИТочности()

	ПроверитьТочность();
	УстановитьФорматВыводаНаКлиенте(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьТочность()
	
	Если СтруктураРеквизитовФормы.ЕдиницаИзмерения = ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1 Тогда

		Если СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения > 2 Тогда
									
			Сообщение = Новый СообщениеПользователю;

			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1: при выводе сумм в рублях точность не может превышать 2 знака'"), ЭтаФорма.Заголовок);

			Сообщение.Сообщить();
			
			СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = 2;
			
		КонецЕсли;

	ИначеЕсли СтруктураРеквизитовФормы.ЕдиницаИзмерения = ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1000 Тогда

		Если СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения > 3 Тогда
			
			Сообщение = Новый СообщениеПользователю;

			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1: при выводе сумм в тысячах рублей точность не может превышать 3 знака'"), ЭтаФорма.Заголовок);

			Сообщение.Сообщить();
			
			СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = 3;
			
		КонецЕсли;

	ИначеЕсли СтруктураРеквизитовФормы.ЕдиницаИзмерения = ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1000000 Тогда

		Если СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения > 6 Тогда
						
			Сообщение = Новый СообщениеПользователю;

			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1: при выводе сумм в миллионах рублей точность не может превышать 6 знаков'"), ЭтаФорма.Заголовок);

			Сообщение.Сообщить();
			
			СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = 6;
			
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура Обновить(Команда)
	
	СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация = Истина;
	
	ОбновитьНаСервере();
	
	СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация = Ложь;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьНаСервере()
	
	ЗаполнитьСведенияОбОрганизацииНаСервере();
	ЗаполнитьСведенияОбФЛ();
	СформироватьДеревоРазделовОтчетаНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Форма", ЭтаФорма);
	Оповещение = Новый ОписаниеОповещения("ПослеСохраненияФормыЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	СохранитьНаКлиенте(, Оповещение);
КонецПроцедуры

&НаКлиенте
Процедура ПослеСохраненияФормыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	ДополнительныеПараметры.Форма.Закрыть();
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция РазделТекущейОбласти(Форма, ТекущаяОбласть)

	Если ТекущаяОбласть = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ИмяТекущейОбласти = СтрЗаменить(ТекущаяОбласть.Имя, "ДобавитьСтрокуЗначок", "ДобавитьСтроку");
	Если ИмяТекущейОбласти = "ДобавитьСтроку1" Тогда
		Возврат Форма.СтруктураРеквизитовФормы.мИдГруппы3;
	ИначеЕсли ИмяТекущейОбласти = "ДобавитьСтроку2" Тогда
		Возврат Форма.СтруктураРеквизитовФормы.мИдГруппы4;
	ИначеЕсли ИмяТекущейОбласти = "ДобавитьСтроку3" Тогда
		Возврат Форма.СтруктураРеквизитовФормы.мИдГруппы5;
	ИначеЕсли ИмяТекущейОбласти = "ДобавитьСтроку4" Тогда
		Возврат Форма.СтруктураРеквизитовФормы.мИдГруппы6;
	ИначеЕсли ИмяТекущейОбласти = "ДобавитьСтроку5" Тогда
		Возврат Форма.СтруктураРеквизитовФормы.мИдГруппы7;
	ИначеЕсли ИмяТекущейОбласти = "ДобавитьСтроку6" Тогда
		Возврат Форма.СтруктураРеквизитовФормы.мИдГруппы8;
	ИначеЕсли ИмяТекущейОбласти = "ДобавитьСтроку7" Тогда
		Возврат Форма.СтруктураРеквизитовФормы.мИдГруппы9;
	ИначеЕсли ИмяТекущейОбласти = "ДобавитьСтроку8" Тогда
		Возврат Форма.СтруктураРеквизитовФормы.мИдГруппы10;
	ИначеЕсли ИмяТекущейОбласти = "ДобавитьСтроку9" Тогда
		Возврат Форма.СтруктураРеквизитовФормы.мИдГруппы11;
	ИначеЕсли ИмяТекущейОбласти = "ДобавитьСтроку10" Тогда
		Возврат Форма.СтруктураРеквизитовФормы.мИдГруппы12;
	ИначеЕсли ИмяТекущейОбласти = "ДобавитьСтроку11" Тогда
		Возврат Форма.СтруктураРеквизитовФормы.мИдГруппы13;
	ИначеЕсли ИмяТекущейОбласти = "ДобавитьСтроку12" Тогда
		Возврат Форма.СтруктураРеквизитовФормы.мИдГруппы1;
	ИначеЕсли ИмяТекущейОбласти = "ДобавитьСтроку13" Тогда
		Возврат Форма.СтруктураРеквизитовФормы.мИдГруппы2;
	ИначеЕсли СтрНайти(ИмяТекущейОбласти, "УдалитьСтроку") > 0 Тогда
		ИмяТекущейОбласти = СтрЗаменить(ИмяТекущейОбласти, "УдалитьСтроку", "");
	КонецЕсли;
	ИмяАктивногоРаздела = Лев(ИмяТекущейОбласти, 13);
	
	Для Каждого ЭлементСтруктуры Из Форма.мСтруктураМногострочныхРазделов Цикл
		ИмяГруппы = ЭлементСтруктуры.Ключ;
		СтруктураГруппы = Форма[ЭлементСтруктуры.Значение];
		
		Если СтруктураГруппы[0].Свойство(ИмяАктивногоРаздела) Тогда
			Возврат ИмяГруппы;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

&НаКлиенте
Процедура ТабличныйДокументПриАктивизацииОбласти(Элемент)
	Элементы.ТабличныйДокументКонтекстноеМенюУдалитьСтроку.Доступность = Ложь;
	Элементы.ТабличныйДокументКонтекстноеМенюДобавитьСтроку.Доступность = Ложь;
	
	ИмяГруппы = РазделТекущейОбласти(ЭтаФорма, Элемент.ТекущаяОбласть);
	
	Если ЗначениеЗаполнено(ИмяГруппы) Тогда 
		ТестовоеИмя = ИмяГруппы + "01_" + Формат(мСтруктураИсхКолвоСтрокРазделов[ИмяГруппы] + 1, "ЧГ=");
		Элементы.ТабличныйДокументКонтекстноеМенюДобавитьСтроку.Доступность = Истина;
		Если СтрЧислоВхождений(Элемент.ТекущаяОбласть.Имя, "ДобавитьСтроку") = 0 И
			ТабличныйДокумент.Области.Найти(ТестовоеИмя) <> Неопределено Тогда
			Элементы.ТабличныйДокументКонтекстноеМенюУдалитьСтроку.Доступность = Истина;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОткрытьПрисоединенныеФайлы(Команда)
	
	РегламентированнаяОтчетностьКлиент.СохранитьОтчетИОткрытьФормуПрисоединенныеФайлы(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийПриИзменении(Элемент)
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаНаименованиеСтатусаНажатие(Элемент)
	
	ПараметрыИзменения = Новый Структура;
	ПараметрыИзменения.Вставить("Форма", ЭтаФорма);
	ПараметрыИзменения.Вставить("Организация", СтруктураРеквизитовФормы.Организация);
	ПараметрыИзменения.Вставить("КонтролирующийОрган",
		ПредопределенноеЗначение("Перечисление.ТипыКонтролирующихОрганов.ФНС"));
	
	РегламентированнаяОтчетностьКлиент.ИзменитьСтатусОтправки(ПараметрыИзменения);
	
КонецПроцедуры

&НаСервере
Функция ОбъектОтчета(ЭтаФормаИмя) Экспорт
	
	Если мОбъектОтчета = Неопределено Тогда 
		мОбъектОтчета = РегламентированнаяОтчетностьВызовСервера.ОбъектОтчета(ЭтаФормаИмя);
	КонецЕсли;
	
	Возврат мОбъектОтчета;
	
КонецФункции