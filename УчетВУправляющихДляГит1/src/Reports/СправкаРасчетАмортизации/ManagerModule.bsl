#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныйПрограммныйИнтерфейс

#Область БухгалтерскиеОтчеты

Функция ПолучитьПараметрыИсполненияОтчета() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ИспользоватьВнешниеНаборыДанных",    Истина);
	Результат.Вставить("ИспользоватьПередКомпоновкойМакета", Истина);
	Результат.Вставить("ИспользоватьПослеКомпоновкиМакета",  Истина);
	Результат.Вставить("ИспользоватьПослеВыводаРезультата",  Истина);
	Результат.Вставить("ИспользоватьДанныеРасшифровки",      Ложь);
	Результат.Вставить("ИспользоватьПриВыводеЗаголовка",     Истина);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ОбработчикиБухгалтерскиеОтчеты

Процедура ПередКомпоновкойМакета(ПараметрыОтчета, Схема, КомпоновщикНастроек) Экспорт
	
	Если ЗначениеЗаполнено(ПараметрыОтчета.НачалоПериода) Тогда
		БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "НачалоПериода", ?(ПараметрыОтчета.СначалаГода,НачалоГода(ПараметрыОтчета.НачалоПериода),НачалоДня(ПараметрыОтчета.НачалоПериода)));
	КонецЕсли;
	Если ЗначениеЗаполнено(ПараметрыОтчета.КонецПериода) Тогда
		БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "КонецПериода", КонецДня(ПараметрыОтчета.КонецПериода));
	КонецЕсли;
	
	МассивСпособов = Новый Массив;
	
	Если ПараметрыОтчета.ПоказательНУ Тогда
		МассивСпособов.Добавить("ЛинейныйНУ");
		МассивСпособов.Добавить("НеЛинейныйНУ");
	Иначе
		МассивСпособов.Добавить("ЛинейныйБУ");
		МассивСпособов.Добавить("УменьшаемогоОстаткаБУ");
		МассивСпособов.Добавить("ПоСуммеЧиселЛетИспользованияБУ");
		МассивСпособов.Добавить("ПропорциональноОбъемуПродукцииБУ");
		МассивСпособов.Добавить("ПоЕНАОФБУ");
		МассивСпособов.Добавить("ПоЕНАОФНа1000кмПробегаБУ");
		МассивСпособов.Добавить("ИныеБУ");
	КонецЕсли;
	
	Для Каждого Способ Из МассивСпособов Цикл
	
		ТаблицаСпособа = НайтиПоИмени(КомпоновщикНастроек.Настройки.Структура,"СпособНачисленияАмортизации" + Способ);
		ТаблицаСпособа.Использование = Истина;
		
		Таблица = НайтиПоИмени(ТаблицаСпособа.Структура,"Амортизация" + Способ);
		
		МассивПоказателей = Новый Массив;
		
		Если ПараметрыОтчета.ПоказательНУ Тогда 
			СтрокаГруппировки = "";
			МассивПоказателей.Добавить("НУ");
		ИначеЕсли ПараметрыОтчета.ПоказательВР Тогда
			СтрокаГруппировки = "СРазницами";
			МассивПоказателей.Добавить("БУ");
			МассивПоказателей.Добавить("ПР");
			МассивПоказателей.Добавить("ВР");
		Иначе
			СтрокаГруппировки = "";
			МассивПоказателей.Добавить("БУ");
		КонецЕсли;
		
		Группировка         = НайтиПоИмени(Таблица.Строки,"Группировка"         + Способ + СтрокаГруппировки);
		ГруппировкаАмГруппа = НайтиПоИмени(Таблица.Строки,"ГруппировкаАмГруппа" + Способ + СтрокаГруппировки);
		ГруппировкаОбъект   = НайтиПоИмени(Таблица.Строки,"ГруппировкаОбъект"   + Способ + СтрокаГруппировки);
		ГруппировкаПериод   = НайтиПоИмени(Таблица.Строки,"ГруппировкаПериод"   + Способ + СтрокаГруппировки);
		
		Группировка.Использование = Истина;
		ГруппировкаАмГруппа.Использование = Истина;
		ГруппировкаОбъект.Использование = Истина;
		ГруппировкаПериод.Использование = Истина;
		
		МассивГруппировок = Новый Массив;
		МассивГруппировок.Добавить(Группировка);
		МассивГруппировок.Добавить(ГруппировкаАмГруппа);
		МассивГруппировок.Добавить(ГруппировкаОбъект);
		МассивГруппировок.Добавить(ГруппировкаПериод);
		
		Для Каждого ИмяГруппировки Из МассивГруппировок Цикл
			
			Группа = ИмяГруппировки.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
			Группа.Расположение = РасположениеПоляКомпоновкиДанных.ОтдельнаяКолонка;
			Если ИмяГруппировки = Группировка Тогда
				БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(Группа,"ВидИмущества");
			ИначеЕсли ИмяГруппировки = ГруппировкаОбъект Тогда
				БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(Группа,"Объект");
				БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(Группа,"ИнвентарныйНомер");
				БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(Группа,"ДатаВводаВЭксплуатацию");
				БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(Группа,"НачислятьАмортизацию" + ?(ПараметрыОтчета.ПоказательНУ,"НУ","БУ"));
				Если Способ = "НеЛинейныйНУ" Тогда
					БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(Группа,"НормаАмортизации");
				КонецЕсли;
			ИначеЕсли ИмяГруппировки = ГруппировкаАмГруппа Тогда
				БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(Группа,"АмортизационнаяГруппа");
			Иначе	
				БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(Группа,"ПериодРасчета");
			КонецЕсли;
			
			// Вывод названий суммовых покателей
			Если ПараметрыОтчета.ПоказательВР Тогда 
				Группа = ИмяГруппировки.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
				Группа.Расположение = РасположениеПоляКомпоновкиДанных.ОтдельнаяКолонка;
				ПодГруппа	= Группа.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
				ПодГруппа.Расположение 		= РасположениеПоляКомпоновкиДанных.Вертикально;
				
				Для Каждого ИмяПоказателя Из МассивПоказателей Цикл
					БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ПодГруппа, "Показатели." + ИмяПоказателя);
				КонецЦикла;
				
			КонецЕсли;
			
			// Вывод стоимости ОС
			Если ПараметрыОтчета.ПоказательВР Тогда 
				Группа = ИмяГруппировки.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
				Группа.Расположение = РасположениеПоляКомпоновкиДанных.ОтдельнаяКолонка;
				ПодГруппа	= Группа.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
				ПодГруппа.Расположение 		= РасположениеПоляКомпоновкиДанных.Вертикально;
			Иначе
				ПодГруппа = ИмяГруппировки.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
				ПодГруппа.Расположение = РасположениеПоляКомпоновкиДанных.ОтдельнаяКолонка;
			КонецЕсли;
			Для Каждого ИмяПоказателя Из МассивПоказателей Цикл
				
				Если ПараметрыОтчета["Показатель" + ИмяПоказателя] Тогда 
					БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ПодГруппа, "Стоимость" + ИмяПоказателя);
				КонецЕсли;	
			КонецЦикла;
			
			// Вывод остаточной стоимости 
			Если ПараметрыОтчета.ПоказательВР Тогда 
				Группа = ИмяГруппировки.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
				Группа.Расположение = РасположениеПоляКомпоновкиДанных.ОтдельнаяКолонка;
				ПодГруппа	= Группа.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
				ПодГруппа.Расположение 		= РасположениеПоляКомпоновкиДанных.Вертикально;
			Иначе
				ПодГруппа = ИмяГруппировки.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
				ПодГруппа.Расположение = РасположениеПоляКомпоновкиДанных.ОтдельнаяКолонка;
			КонецЕсли;
			Для Каждого ИмяПоказателя Из МассивПоказателей Цикл
				
				Если ПараметрыОтчета["Показатель" + ИмяПоказателя] Тогда 
					БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ПодГруппа, "ОстаточнаяСтоимость" + ИмяПоказателя);
				КонецЕсли;	
			КонецЦикла;
			
			// Вывод стоимости для начисления амортизации
			Если ПараметрыОтчета.ПоказательБУ Тогда 	
				Если ПараметрыОтчета.ПоказательВР Тогда 
					Группа = ИмяГруппировки.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
					Группа.Расположение = РасположениеПоляКомпоновкиДанных.ОтдельнаяКолонка;
					ПодГруппа	= Группа.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
					ПодГруппа.Расположение 		= РасположениеПоляКомпоновкиДанных.Вертикально;
					БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ПодГруппа, "СтоимостьДляАмортизацииБУ");
					БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ПодГруппа, "СтоимостьДляАмортизацииПР");
				Иначе
					ПодГруппа = ИмяГруппировки.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
					ПодГруппа.Расположение = РасположениеПоляКомпоновкиДанных.ОтдельнаяКолонка;
					БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ПодГруппа, "СтоимостьДляАмортизацииБУ");
				КонецЕсли;
			КонецЕсли;
			
			Если Способ = "ПропорциональноОбъемуПродукцииБУ" Тогда
				Группа = ИмяГруппировки.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
				Группа.Расположение = РасположениеПоляКомпоновкиДанных.ОтдельнаяКолонка;
				БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(Группа,"ОбъемПродукцииРабот");
				БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(Группа,"ОбъемПродукцииРаботДляАмортизации");
			ИначеЕсли Способ = "ПоСуммеЧиселЛетИспользованияБУ" Тогда
				Группа = ИмяГруппировки.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
				Группа.Расположение = РасположениеПоляКомпоновкиДанных.ОтдельнаяКолонка;
				БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(Группа,"СрокПолезногоИспользованияБУ");
				БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(Группа,"ЧислоЛетОставшихсяДоКонцаСПИ");
				БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(Группа,"СуммаЧиселЛетСПИ");
			ИначеЕсли Способ = "ПоЕНАОФБУ" Тогда
				Группа = ИмяГруппировки.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
				Группа.Расположение = РасположениеПоляКомпоновкиДанных.ОтдельнаяКолонка;
				БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(Группа,"КоэффициентАмортизации");
			ИначеЕсли Способ = "ПоЕНАОФНа1000кмПробегаБУ" Тогда
				Группа = ИмяГруппировки.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
				Группа.Расположение = РасположениеПоляКомпоновкиДанных.ОтдельнаяКолонка;
				БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(Группа,"ОбъемПродукцииРабот");
				БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(Группа,"КоэффициентАмортизации");
			ИначеЕсли Способ = "УменьшаемогоОстаткаБУ" Тогда
				Группа = ИмяГруппировки.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
				Группа.Расположение = РасположениеПоляКомпоновкиДанных.ОтдельнаяКолонка;
				БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(Группа,"СрокПолезногоИспользованияБУ");
				БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(Группа,"ОстатокСрокаПолезногоИспользованияБУ");
				БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(Группа,"КоэффициентУскорения");
			Иначе
				// Вывод срока использования
				Группа = ИмяГруппировки.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
				Группа.Расположение = РасположениеПоляКомпоновкиДанных.ОтдельнаяКолонка;
				БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(Группа,"СрокПолезногоИспользования"+ ?(ПараметрыОтчета.ПоказательНУ,"НУ","БУ"));
				БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(Группа,"ОстатокСрокаПолезногоИспользования"+ ?(ПараметрыОтчета.ПоказательНУ,"НУ","БУ"));
			КонецЕсли;
			
			// Вывод коэффициентов
			Если ПараметрыОтчета.ПоказательНУ Тогда
				БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(Группа,"КоэффициентАмортизацииНУ");
			КонецЕсли;
			
			// Вывод амортизации
			Если ПараметрыОтчета.ПоказательВР Тогда 
				Группа = ИмяГруппировки.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
				Группа.Расположение = РасположениеПоляКомпоновкиДанных.ОтдельнаяКолонка;
				ПодГруппа = Группа.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
				ПодГруппа.Расположение = РасположениеПоляКомпоновкиДанных.Вертикально;
			Иначе
				ПодГруппа = ИмяГруппировки.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
				ПодГруппа.Расположение = РасположениеПоляКомпоновкиДанных.ОтдельнаяКолонка;
			КонецЕсли;
			Для Каждого ИмяПоказателя Из МассивПоказателей Цикл
				Если ПараметрыОтчета["Показатель" + ИмяПоказателя] Тогда 
					БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ПодГруппа, "СуммаАмортизации" + ИмяПоказателя);
				КонецЕсли;	
			КонецЦикла;
			
			// Вывод способа отражения расходов
			Если ИмяГруппировки = ГруппировкаПериод Тогда 
				Группа = ИмяГруппировки.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
				Группа.Расположение = РасположениеПоляКомпоновкиДанных.ОтдельнаяКолонка;
				БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(Группа,"СпособыОтраженияРасходовПоАмортизации");
			КонецЕсли;
			
			ГруппаОтбор = ИмяГруппировки.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
			ГруппаОтбор.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
			Для Каждого ИмяПоказателя Из МассивПоказателей Цикл
				Если ПараметрыОтчета["Показатель" + ИмяПоказателя] Тогда 
					БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ГруппаОтбор, "СуммаАмортизации" + ИмяПоказателя, 0, ВидСравненияКомпоновкиДанных.НеРавно);
				КонецЕсли;
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;

	БухгалтерскиеОтчетыВызовСервера.ДобавитьОтборПоОрганизации(ПараметрыОтчета, КомпоновщикНастроек);
	
КонецПроцедуры

Процедура ПослеКомпоновкиМакета(ПараметрыОтчета, МакетКомпоновки) Экспорт
	
	// Удаление итоговых строк в группировке по вид имущества
	ИтогиГруппировкиТаблица = МакетКомпоновки.Тело[0].Тело[1].Строки[0].Тело[2];
	МакетКомпоновки.Тело[0].Тело[1].Строки[0].Тело.Удалить(ИтогиГруппировкиТаблица);
	
	ИтогиГруппировкиТаблица = МакетКомпоновки.Тело[2].Тело[1].Строки[0].Тело[2];
	МакетКомпоновки.Тело[2].Тело[1].Строки[0].Тело.Удалить(ИтогиГруппировкиТаблица);
	
	Если Не ПараметрыОтчета.ПоказательНУ Тогда
		
		ИтогиГруппировкиТаблица = МакетКомпоновки.Тело[4].Тело[1].Строки[0].Тело[2];
		МакетКомпоновки.Тело[4].Тело[1].Строки[0].Тело.Удалить(ИтогиГруппировкиТаблица);
		
		ИтогиГруппировкиТаблица = МакетКомпоновки.Тело[6].Тело[1].Строки[0].Тело[2];
		МакетКомпоновки.Тело[6].Тело[1].Строки[0].Тело.Удалить(ИтогиГруппировкиТаблица);
		
		ИтогиГруппировкиТаблица = МакетКомпоновки.Тело[8].Тело[1].Строки[0].Тело[2];
		МакетКомпоновки.Тело[8].Тело[1].Строки[0].Тело.Удалить(ИтогиГруппировкиТаблица);
		
		ИтогиГруппировкиТаблица = МакетКомпоновки.Тело[10].Тело[1].Строки[0].Тело[2];
		МакетКомпоновки.Тело[10].Тело[1].Строки[0].Тело.Удалить(ИтогиГруппировкиТаблица);
		
		ИтогиГруппировкиТаблица = МакетКомпоновки.Тело[12].Тело[1].Строки[0].Тело[2];
		МакетКомпоновки.Тело[12].Тело[1].Строки[0].Тело.Удалить(ИтогиГруппировкиТаблица);
		
	КонецЕсли;
	
	Если ПараметрыОтчета.Свойство("ВысотаШапки") Тогда
		ВысотаШапки = ПараметрыОтчета.ВысотаШапки;
	Иначе
		ВысотаШапки = 0;
	КонецЕсли;
	
	Для Каждого ЭлементТелаМакета Из МакетКомпоновки.Тело Цикл 
		Если ТипЗнч(ЭлементТелаМакета) = Тип("ТаблицаМакетаКомпоновкиДанных") Тогда
			ПараметрыОтчета.Вставить("ВысотаШапки", МакетКомпоновки.Макеты[ЭлементТелаМакета.МакетШапки].Макет.Количество() + ВысотаШапки); 
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьВнешниеНаборыДанных(ПараметрыОтчета, МакетКомпоновки) Экспорт
	
	Перем РасчетАмортизации;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РасчетАмортизации.ПериодРасчета КАК ПериодРасчета,
	|	РасчетАмортизации.Организация КАК Организация,
	|	РасчетАмортизации.Объект КАК Объект,
	|	РасчетАмортизации.СпособНачисленияАмортизацииБУ КАК СпособНачисленияАмортизацииБУ,
	|	РасчетАмортизации.СпособНачисленияАмортизацииНУ КАК СпособНачисленияАмортизацииНУ,
	|	МАКСИМУМ(РасчетАмортизации.АмортизационнаяГруппа) КАК АмортизационнаяГруппа,
	|	МАКСИМУМ(РасчетАмортизации.ИнвентарныйНомер) КАК ИнвентарныйНомер,
	|	МАКСИМУМ(РасчетАмортизации.ДатаВводаВЭксплуатацию) КАК ДатаВводаВЭксплуатацию,
	|	МАКСИМУМ(РасчетАмортизации.НачислятьАмортизациюБУ) КАК НачислятьАмортизациюБУ,
	|	МАКСИМУМ(РасчетАмортизации.НачислятьАмортизациюНУ) КАК НачислятьАмортизациюНУ,
	|	МАКСИМУМ(РасчетАмортизации.НормаАмортизации) КАК НормаАмортизации,
	|	МАКСИМУМ(РасчетАмортизации.СтоимостьБУ) КАК СтоимостьБУ,
	|	МАКСИМУМ(РасчетАмортизации.СтоимостьНУ) КАК СтоимостьНУ,
	|	МАКСИМУМ(РасчетАмортизации.СтоимостьПР) КАК СтоимостьПР,
	|	МАКСИМУМ(РасчетАмортизации.СтоимостьВР) КАК СтоимостьВР,
	|	МАКСИМУМ(РасчетАмортизации.ОстаточнаяСтоимостьБУ) КАК ОстаточнаяСтоимостьБУ,
	|	МАКСИМУМ(РасчетАмортизации.ОстаточнаяСтоимостьНУ) КАК ОстаточнаяСтоимостьНУ,
	|	МАКСИМУМ(РасчетАмортизации.ОстаточнаяСтоимостьПР) КАК ОстаточнаяСтоимостьПР,
	|	МАКСИМУМ(РасчетАмортизации.ОстаточнаяСтоимостьВР) КАК ОстаточнаяСтоимостьВР,
	|	МАКСИМУМ(РасчетАмортизации.СтоимостьДляАмортизацииБУ) КАК СтоимостьДляАмортизацииБУ,
	|	МАКСИМУМ(РасчетАмортизации.СтоимостьДляАмортизацииНУ) КАК СтоимостьДляАмортизацииНУ,
	|	МАКСИМУМ(РасчетАмортизации.СтоимостьДляАмортизацииПР) КАК СтоимостьДляАмортизацииПР,
	|	СУММА(РасчетАмортизации.СуммаАмортизацииБУ) КАК СуммаАмортизацииБУ,
	|	СУММА(РасчетАмортизации.СуммаАмортизацииНУ) КАК СуммаАмортизацииНУ,
	|	СУММА(РасчетАмортизации.СуммаАмортизацииПР) КАК СуммаАмортизацииПР,
	|	СУММА(РасчетАмортизации.СуммаАмортизацииВР) КАК СуммаАмортизацииВР,
	|	МАКСИМУМ(РасчетАмортизации.СрокПолезногоИспользованияБУ) КАК СрокПолезногоИспользованияБУ,
	|	МАКСИМУМ(РасчетАмортизации.СрокПолезногоИспользованияНУ) КАК СрокПолезногоИспользованияНУ,
	|	МАКСИМУМ(РасчетАмортизации.ОстатокСрокаПолезногоИспользованияБУ) КАК ОстатокСрокаПолезногоИспользованияБУ,
	|	МАКСИМУМ(РасчетАмортизации.ОстатокСрокаПолезногоИспользованияНУ) КАК ОстатокСрокаПолезногоИспользованияНУ,
	|	МАКСИМУМ(РасчетАмортизации.КоэффициентАмортизацииНУ) КАК КоэффициентАмортизацииНУ,
	|	МАКСИМУМ(РасчетАмортизации.СпособыОтраженияРасходовПоАмортизации) КАК СпособыОтраженияРасходовПоАмортизации,
	|	МАКСИМУМ(РасчетАмортизации.ЧислоЛетОставшихсяДоКонцаСПИ) КАК ЧислоЛетОставшихсяДоКонцаСПИ,
	|	МАКСИМУМ(РасчетАмортизации.СуммаЧиселЛетСПИ) КАК СуммаЧиселЛетСПИ,
	|	МАКСИМУМ(РасчетАмортизации.КоэффициентАмортизации) КАК КоэффициентАмортизации,
	|	МАКСИМУМ(РасчетАмортизации.КоэффициентУскорения) КАК КоэффициентУскорения,
	|	СУММА(РасчетАмортизации.ОбъемПродукцииРабот) КАК ОбъемПродукцииРабот,
	|	МАКСИМУМ(РасчетАмортизации.ОбъемПродукцииРаботДляАмортизации) КАК ОбъемПродукцииРаботДляАмортизации,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА РасчетАмортизации.Объект ССЫЛКА Справочник.ОсновныеСредства
	|				ТОГДА ""ОС""
	|			ИНАЧЕ ""НМА""
	|		КОНЕЦ) КАК ВидИмущества
	|ИЗ
	|	РегистрСведений.РасчетАмортизации КАК РасчетАмортизации
	|ГДЕ
	|	РасчетАмортизации.Активность
	|	И РасчетАмортизации.ПериодРасчета МЕЖДУ &НачалоПериода И &КонецПериода
	|	И РасчетАмортизации.Организация = &Организация
	|	И &ДопУсловие
	|
	|СГРУППИРОВАТЬ ПО
	|	РасчетАмортизации.ПериодРасчета,
	|	РасчетАмортизации.Организация,
	|	РасчетАмортизации.Объект,
	|	РасчетАмортизации.СпособНачисленияАмортизацииБУ,
	|	РасчетАмортизации.СпособНачисленияАмортизацииНУ";
	
	Если ПараметрыОтчета.ПоказательНУ Тогда 
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ДопУсловие", "РасчетАмортизации.СуммаАмортизацииНУ <> 0");
	ИначеЕсли ПараметрыОтчета.ПоказательВР Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ДопУсловие", "(РасчетАмортизации.СуммаАмортизацииБУ <> 0
																|			ИЛИ РасчетАмортизации.СуммаАмортизацииПР <> 0
																|			ИЛИ РасчетАмортизации.СуммаАмортизацииВР <> 0)");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ДопУсловие", "РасчетАмортизации.СуммаАмортизацииБУ <> 0");
	КонецЕсли;
	
	НачалоПериода = ?(ПараметрыОтчета.СНачалаГода, НачалоГода(ПараметрыОтчета.НачалоПериода), ПараметрыОтчета.НачалоПериода);
	
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода", ПараметрыОтчета.КонецПериода);
	Запрос.УстановитьПараметр("Организация", ПараметрыОтчета.Организация);
	
	РасчетАмортизации = Запрос.Выполнить().Выгрузить();
	
	ТаблицаРеквизиты = Новый ТаблицаЗначений;
	ТаблицаРеквизиты.Колонки.Добавить("Период", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя));
	ТаблицаРеквизиты.Колонки.Добавить("ДатаРасчета", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя));
	ТаблицаРеквизиты.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ТаблицаРеквизиты.Колонки.Добавить("Регистратор");
	ТаблицаРеквизиты.Колонки.Добавить("ВыдаватьСообщения", Новый ОписаниеТипов("Булево"));
	
	Для Сч = Месяц(НачалоПериода) По Месяц(ПараметрыОтчета.КонецПериода) Цикл
		
		ПериодРасчета = КонецМесяца(Дата(Год(НачалоПериода), Сч, 1));
		
		ПараметрыОтбора = Новый Структура("ПериодРасчета, ВидИмущества");
		ПараметрыОтбора.ПериодРасчета = НачалоДня(ПериодРасчета);
		ПараметрыОтбора.ВидИмущества = "ОС";
		
		Если РасчетАмортизации.НайтиСтроки(ПараметрыОтбора).Количество() = 0 Тогда
			
			ТаблицаРеквизиты.Очистить();
			
			Реквизиты = ТаблицаРеквизиты.Добавить();
			Реквизиты.Период      = НачалоМесяца(ПериодРасчета);
			Реквизиты.ДатаРасчета = НачалоМесяца(ПериодРасчета);
			Реквизиты.Организация = ПараметрыОтчета.Организация;
			
			Отказ = Ложь;
			
			ТаблицыРасчетаАмортизацииОС = УчетОС.ПодготовитьРасчетАмортизацииОС(Неопределено, ТаблицаРеквизиты, Отказ, Истина);
			
			Для Каждого СтрокаСправки Из ТаблицыРасчетаАмортизацииОС.СправкаРасчет Цикл
				
				Если ПараметрыОтчета.ПоказательНУ И СтрокаСправки.СуммаАмортизацииНУ = 0 Тогда 
					Продолжить;
				ИначеЕсли ПараметрыОтчета.ПоказательВР И СтрокаСправки.СуммаАмортизацииБУ = 0
					И СтрокаСправки.СуммаАмортизацииПР = 0 И СтрокаСправки.СуммаАмортизацииВР = 0 Тогда
					Продолжить;
				ИначеЕсли СтрокаСправки.СуммаАмортизацииБУ = 0 Тогда
					Продолжить;
				КонецЕсли;
				
				НоваяСтрокаРасчетАмортизации = РасчетАмортизации.Добавить();
				
				ЗаполнитьЗначенияСвойств(НоваяСтрокаРасчетАмортизации, СтрокаСправки);
				
				НоваяСтрокаРасчетАмортизации.ВидИмущества = "ОС";
				НоваяСтрокаРасчетАмортизации.Организация  = ПараметрыОтчета.Организация;
			КонецЦикла;
			
		КонецЕсли;
		
		ПараметрыОтбора.ВидИмущества = "НМА";
		
		Если РасчетАмортизации.НайтиСтроки(ПараметрыОтбора).Количество() = 0 Тогда
			
			ТаблицаРеквизиты.Очистить();
			
			Реквизиты = ТаблицаРеквизиты.Добавить();
			Реквизиты.Период      = ПериодРасчета;
			Реквизиты.ДатаРасчета = ПериодРасчета;
			Реквизиты.Организация = ПараметрыОтчета.Организация;
			
			Отказ = Ложь;
			
			ТаблицыРасчетаАмортизацииНМА = УчетНМА.ПодготовитьРасчетАмортизацииНМА(Неопределено, ТаблицаРеквизиты, Отказ, Истина);
			
			Для Каждого СтрокаСправки Из ТаблицыРасчетаАмортизацииНМА.СправкаРасчет Цикл
				
				Если ПараметрыОтчета.ПоказательНУ И СтрокаСправки.СуммаАмортизацииНУ = 0 Тогда 
					Продолжить;
				ИначеЕсли ПараметрыОтчета.ПоказательВР И СтрокаСправки.СуммаАмортизацииБУ = 0
					И СтрокаСправки.СуммаАмортизацииПР = 0 И СтрокаСправки.СуммаАмортизацииВР = 0 Тогда
					Продолжить;
				ИначеЕсли СтрокаСправки.СуммаАмортизацииБУ = 0 Тогда
					Продолжить;
				КонецЕсли;
				
				НоваяСтрокаРасчетАмортизации = РасчетАмортизации.Добавить();
				
				ЗаполнитьЗначенияСвойств(НоваяСтрокаРасчетАмортизации, СтрокаСправки);
				
				НоваяСтрокаРасчетАмортизации.ВидИмущества = "НМА";
				НоваяСтрокаРасчетАмортизации.Организация  = ПараметрыОтчета.Организация;
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ВнешниеНаборыДанных = Новый Структура("РасчетАмортизации", РасчетАмортизации);
	
	Возврат ВнешниеНаборыДанных;
	
КонецФункции

Процедура ПриВыводеЗаголовка(ПараметрыОтчета, КомпоновщикНастроек, Результат) Экспорт
	
	Макет = ПолучитьОбщийМакет("ОбщиеОбластиСтандартногоОтчета");
	ОбластьЗаголовок        = Макет.ПолучитьОбласть("ОбластьЗаголовок");
	ОбластьОписаниеНастроек = Макет.ПолучитьОбласть("ОписаниеНастроек");
	ОбластьОрганизация      = Макет.ПолучитьОбласть("Организация");
	
	//Организация
	ТекстОрганизация = БухгалтерскиеОтчетыВызовСервера.ПолучитьТекстОрганизация(ПараметрыОтчета.Организация, ПараметрыОтчета.ВключатьОбособленныеПодразделения);
	ОбластьОрганизация.Параметры.НазваниеОрганизации = ТекстОрганизация;
	Результат.Вывести(ОбластьОрганизация);
	
	//Заголовок
	ОбластьЗаголовок.Параметры.ЗаголовокОтчета = "" + ПолучитьТекстЗаголовка(ПараметрыОтчета) + " (" + ПараметрыОтчета.НазваниеНабораПоказателейОтчета + ")";
	Результат.Вывести(ОбластьЗаголовок);
	
	Результат.Область("R1:R" + Результат.ВысотаТаблицы).Имя = "Заголовок";
	
	// Единица измерения
	Если ПараметрыОтчета.Свойство("ВыводитьЕдиницуИзмерения")
		И ПараметрыОтчета.ВыводитьЕдиницуИзмерения Тогда
		ОбластьОписаниеЕдиницыИзмерения = Макет.ПолучитьОбласть("ОписаниеЕдиницыИзмерения");
		Результат.Вывести(ОбластьОписаниеЕдиницыИзмерения);
	КонецЕсли;
	
	ПараметрыОтчета.Вставить("ВысотаШапки",Результат.ВысотаТаблицы); 
	
КонецПроцедуры

Процедура ПослеВыводаРезультата(ПараметрыОтчета, Результат) Экспорт
	
	БухгалтерскиеОтчетыВызовСервера.ОбработкаРезультатаОтчета(ПараметрыОтчета.ИдентификаторОтчета, Результат);
	
	Если ПараметрыОтчета.Свойство("ВысотаШапки") Тогда
		Результат.ФиксацияСверху = ПараметрыОтчета.ВысотаШапки;
	КонецЕсли;
	
	Результат.ФиксацияСлева = 0;
	
	Результат.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	
КонецПроцедуры

#КонецОбласти

Функция ПолучитьТекстЗаголовка(ПараметрыОтчета) Экспорт 
	
	НачалоПериода = ?(ПараметрыОтчета.СНачалаГода, НачалоГода(ПараметрыОтчета.НачалоПериода), ПараметрыОтчета.НачалоПериода);
	ПредставлениеПериода = БухгалтерскиеОтчетыКлиентСервер.ПолучитьПредставлениеПериода(НачалоПериода, ПараметрыОтчета.КонецПериода);
	
	Возврат "Справка-расчет амортизации" + ПредставлениеПериода;
	
КонецФункции

Функция ПолучитьНаборПоказателей() Экспорт
	
	НаборПоказателей = Новый Массив;
	НаборПоказателей.Добавить("БУ");
	НаборПоказателей.Добавить("НУ");
	НаборПоказателей.Добавить("ПР");
	НаборПоказателей.Добавить("ВР");
	
	Возврат НаборПоказателей;
	
КонецФункции

Процедура НастроитьВариантыОтчета(Настройки, ОписаниеОтчета) Экспорт
	
	ВариантыНастроек = ВариантыНастроек();
	Для Каждого Вариант Из ВариантыНастроек Цикл
		ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, Вариант.Имя).Размещение.Вставить(
			Метаданные.Подсистемы.Отчеты.Подсистемы.СправкиРасчеты.Подсистемы.БухгалтерскийУчет, "");
		ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, Вариант.Имя).Размещение.Вставить(
			Метаданные.Подсистемы.Отчеты.Подсистемы.СправкиРасчеты.Подсистемы.БухгалтерскийИНалоговыйУчет, "");
		ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, Вариант.Имя).Размещение.Вставить(
			Метаданные.Подсистемы.БухгалтерияПредприятияПодсистемы.Подсистемы.ПростойИнтерфейс.Подсистемы.Отчеты.Подсистемы.СправкиРасчеты, "");
	КонецЦикла;
	
КонецПроцедуры

Процедура НастройкиОтчета(Настройки) Экспорт
	
	ВариантыНастроек = ВариантыНастроек();
	Для Каждого Вариант Из ВариантыНастроек Цикл
		Настройки.ОписаниеВариантов.Вставить(Вариант.Имя,Вариант.Представление);
	КонецЦикла;	
	
КонецПроцедуры

Функция ВариантыНастроек() Экспорт
	
	Массив = Новый Массив;
	
	Массив.Добавить(Новый Структура("Имя, Представление","Амортизация", "Амортизация"));
	
	Возврат Массив;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция НайтиПоИмени(Структура, Имя)
	
	Группировка = Неопределено;
	Для каждого Элемент Из Структура Цикл
		Если ТипЗнч(Элемент) = Тип("ТаблицаКомпоновкиДанных") Тогда
			Если Элемент.Имя = Имя Тогда
				Возврат Элемент;
			КонецЕсли;
		Иначе
			Если Элемент.Имя = Имя Тогда
				Возврат Элемент;
			КонецЕсли;
			Для каждого Поле Из Элемент.ПоляГруппировки.Элементы Цикл
				Если Не ТипЗнч(Поле) = Тип("АвтоПолеГруппировкиКомпоновкиДанных") Тогда
					Если Поле.Поле = Новый ПолеКомпоновкиДанных(Имя) Тогда
						Возврат Элемент;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			Если Элемент.Структура.Количество() = 0 Тогда
				Продолжить;
			Иначе
				Группировка = НайтиПоИмени(Элемент.Структура, Имя);
				Если Не Группировка = Неопределено Тогда
					Возврат Группировка;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Возврат Группировка;
	
КонецФункции

#КонецОбласти

#КонецЕсли