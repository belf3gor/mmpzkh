#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#КонецОбласти

#Область СлужебныеПроцедурыИФункции
Функция ДанноеУведомлениеДоступноДляОрганизации() Экспорт 
	Возврат Истина;
КонецФункции

Функция ДанноеУведомлениеДоступноДляИП() Экспорт 
	Возврат Истина;
КонецФункции

Функция ПолучитьОсновнуюФорму() Экспорт 
	Возврат "";
КонецФункции

Функция ПолучитьФормуПоУмолчанию() Экспорт 
	Возврат "Отчет.РегламентированноеУведомлениеПредоставлениеРассрочки.Форма.Форма2017_1";
КонецФункции

Функция ПолучитьТаблицуФорм() Экспорт 
	Результат = Документы.УведомлениеОСпецрежимахНалогообложения.ПолучитьПустуюТаблицуФормУведомления();
	
	Стр = Результат.Добавить();
	Стр.ИмяФормы = "Форма2017_1";
	Стр.ОписаниеФормы = "Заявление о предоставлении отсрочки (рассрочки) по уплате страховых взносов, пеней и штрафов в соответствии с приказом ФСС РФ от 25.04.2017 № 196";
	
	Возврат Результат;
КонецФункции

Функция ПечатьСразу(Объект, ИмяФормы) Экспорт
	Если ИмяФормы = "Форма2017_1" Тогда
		Возврат ПечатьСразу_Форма2017_1(Объект);
	КонецЕсли;
	Возврат Неопределено;
КонецФункции

Функция СформироватьМакет(Объект, ИмяФормы) Экспорт
	Если ИмяФормы = "Форма2017_1" Тогда
		Возврат СформироватьМакет_Форма2017_1(Объект);
	КонецЕсли;
	Возврат Неопределено;
КонецФункции

Функция СформироватьСписокЛистов(Объект) Экспорт
	Если Объект.ИмяФормы = "Форма2017_1" Тогда 
		Возврат СформироватьСписокЛистовФорма2017_1(Объект);
	КонецЕсли;
КонецФункции

Функция ПечатьСразу_Форма2017_1(Объект)
	ПечатнаяФорма = СформироватьМакет_Форма2017_1(Объект);
	
	ПечатнаяФорма.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	ПечатнаяФорма.АвтоМасштаб = Истина;
	ПечатнаяФорма.ПолеСверху = 0;
	ПечатнаяФорма.ПолеСнизу = 0;
	ПечатнаяФорма.ПолеСлева = 0;
	ПечатнаяФорма.ПолеСправа = 0;
	ПечатнаяФорма.ОбластьПечати = ПечатнаяФорма.Область();
	
	Возврат ПечатнаяФорма;
КонецФункции

Функция СформироватьМакет_Форма2017_1(Объект)
	ПечатнаяФорма = Новый ТабличныйДокумент;
	ПечатнаяФорма.Вывести(Документы.УведомлениеОСпецрежимахНалогообложения.ПолучитьМакет("МакетПредупреждениеОНевозможностиПечати"));
	Возврат ПечатнаяФорма;
КонецФункции

Функция СформироватьСписокЛистовФорма2017_1(Объект) Экспорт
	Листы = Новый СписокЗначений;
	
	ПечатнаяФорма = УведомлениеОСпецрежимахНалогообложения.НовыйПустойЛист();
	СтруктураПараметров = Объект.Ссылка.ДанныеУведомления.Получить();
	
	Для Каждого Стр Из СтруктураПараметров.ДеревоСтраниц.Строки Цикл
		ИмяМакета = Стр.ИмяМакета;
		Попытка
			МакетПФ = Отчеты.РегламентированноеУведомлениеПредоставлениеРассрочки.ПолучитьМакет(Стр.МакетыПФ);
		Исключение
			Продолжить;
		КонецПопытки;
	
		Если ИмяМакета = "График" Тогда 
			О1 = МакетПФ.ПолучитьОбласть("ОсновнаяЧасть1");
			О2 = МакетПФ.ПолучитьОбласть("ОсновнаяЧасть2");
			Заголовок = МакетПФ.ПолучитьОбласть("Header_МнгСтр");
			Строка = МакетПФ.ПолучитьОбласть("Str_МнгСтр");
			Для Каждого Обл Из О2.Области Цикл 
				Если Обл.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник И Обл.СодержитЗначение = Истина Тогда 
					СтруктураПараметров.ДанныеУведомления[ИмяМакета].Свойство(Обл.Имя, Обл.Значение);
				КонецЕсли;
			КонецЦикла;
			ПечатнаяФорма.Вывести(О1);
			ПечатнаяФорма.Вывести(Заголовок);
			
			МассивПроверки = Новый Массив;
			МассивПроверки.Вставить(0, Неопределено);
			МассивПроверки.Вставить(1, О2);
			Для Каждого Стр Из СтруктураПараметров.ДанныеДопСтрокБД.МнгСтр Цикл 
				Для Каждого Обл Из Строка.Области Цикл 
					Если Обл.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник И Обл.СодержитЗначение = Истина Тогда 
						Обл.Значение = Стр[Обл.Имя];
					КонецЕсли;
				КонецЦикла;
				МассивПроверки[0] = Строка;
				
				Если Не ПечатнаяФорма.ПроверитьВывод(МассивПроверки) Тогда 
					УведомлениеОСпецрежимахНалогообложения.ПоложитьПФВСписокЛистов(Объект, Листы, ПечатнаяФорма, 0, Ложь);
					ПечатнаяФорма.Вывести(Заголовок);
				КонецЕсли;
				ПечатнаяФорма.Вывести(Строка);
			КонецЦикла;
			ПечатнаяФорма.Вывести(О2);
			УведомлениеОСпецрежимахНалогообложения.ПоложитьПФВСписокЛистов(Объект, Листы, ПечатнаяФорма, 0, Ложь);
		Иначе
			Для Каждого Обл Из МакетПФ.Области Цикл 
				Если Обл.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник И Обл.СодержитЗначение = Истина Тогда 
					СтруктураПараметров.ДанныеУведомления[ИмяМакета].Свойство(Обл.Имя, Обл.Значение);
				КонецЕсли;
			КонецЦикла;
			ПечатнаяФорма.Вывести(МакетПФ);
			УведомлениеОСпецрежимахНалогообложения.ПоложитьПФВСписокЛистов(Объект, Листы, ПечатнаяФорма, 0, Ложь);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Листы;
КонецФункции

Функция СформироватьДеревоСтраниц()
	ДеревоСтраниц = Новый ДеревоЗначений;
	ДеревоСтраниц.Колонки.Добавить("ИндексКартинки", Новый ОписаниеТипов("Число"));
	ДеревоСтраниц.Колонки.Добавить("Наименование", Новый ОписаниеТипов("Строка"));
	ДеревоСтраниц.Колонки.Добавить("УИД", Новый ОписаниеТипов("УникальныйИдентификатор"));
	ДеревоСтраниц.Колонки.Добавить("ИмяМакета", Новый ОписаниеТипов("Строка"));
	ДеревоСтраниц.Колонки.Добавить("Многостраничность", Новый ОписаниеТипов("Булево"));
	ДеревоСтраниц.Колонки.Добавить("Многострочность", Новый ОписаниеТипов("Булево"));
	ДеревоСтраниц.Колонки.Добавить("ИДНаименования", Новый ОписаниеТипов("Строка"));
	ДеревоСтраниц.Колонки.Добавить("МногострочныеЧасти", Новый ОписаниеТипов("СписокЗначений"));
	ДеревоСтраниц.Колонки.Добавить("МакетыПФ", Новый ОписаниеТипов("Строка"));
	
	КорневойУровень = ДеревоСтраниц.Строки;
	Стр001 = КорневойУровень.Добавить();
	Стр001.Наименование = "Заявление о" + Символы.ПС + "предоставлении отсрочки";
	Стр001.ИндексКартинки = 1;
	Стр001.ИмяМакета = "Заявление";
	Стр001.Многостраничность = Ложь;
	Стр001.Многострочность = Ложь;
	Стр001.УИД = Новый УникальныйИдентификатор;
	Стр001.ИДНаименования = "Заявление";
	Стр001.МакетыПФ = "Печать_Форма2017_1_Заявление";
	
	Стр001 = КорневойУровень.Добавить();
	Стр001.Наименование = "Обязательство о" + Символы.ПС + "соблюдении условий";
	Стр001.ИндексКартинки = 1;
	Стр001.ИмяМакета = "Обязательство";
	Стр001.Многостраничность = Ложь;
	Стр001.Многострочность = Ложь;
	Стр001.УИД = Новый УникальныйИдентификатор;
	Стр001.ИДНаименования = "Обязательство";
	Стр001.МакетыПФ = "Печать_Форма2017_1_Обязательство";
	
	Стр001 = КорневойУровень.Добавить();
	Стр001.Наименование = "График платежей";
	Стр001.ИндексКартинки = 1;
	Стр001.ИмяМакета = "График";
	Стр001.Многостраничность = Ложь;
	Стр001.Многострочность = Истина;
	Стр001.УИД = Новый УникальныйИдентификатор;
	Стр001.ИДНаименования = "График";
	Стр001.МногострочныеЧасти.Добавить("МнгСтр");
	Стр001.МакетыПФ = "Печать_Форма2017_1_График";
	
	Возврат ДеревоСтраниц;
КонецФункции

Функция СоздатьНовоеУведомлениеПоДанным(Выборка)
	ИсходныеДанные = Выборка.Ссылка.ДанныеОтчета.Получить();
	
	ДокОбъект = Документы.УведомлениеОСпецрежимахНалогообложения.СоздатьДокумент();
	ДокОбъект.ИмяФормы = "Форма2017_1";
	ДокОбъект.ИмяОтчета = "РегламентированноеУведомлениеПредоставлениеРассрочки";
	ДокОбъект.ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ЗаявлениеОПредоставленииРассрочкиФСС;
	ДокОбъект.Дата = ТекущаяДатаСеанса();
	ДокОбъект.ДатаПодписи = Выборка.ДатаПодписи;
	ДокОбъект.Организация = Выборка.Организация;
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ДеревоСтраниц", СформироватьДеревоСтраниц());
	
	ИдентификаторыОбычныхСтраниц = Новый Структура;
	Для Каждого Стр Из СтруктураПараметров.ДеревоСтраниц.Строки Цикл 
		ИдентификаторыОбычныхСтраниц.Вставить(Стр.ИДНаименования, Стр.УИД);
	КонецЦикла;
	СтруктураПараметров.Вставить("ИдентификаторыОбычныхСтраниц", ИдентификаторыОбычныхСтраниц);
	
	ТЗ = Новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("МнгНом");
	ТЗ.Колонки.Добавить("МнгСрок");
	ТЗ.Колонки.Добавить("МнгСумВсего");
	ТЗ.Колонки.Добавить("МнгСумПени");
	ТЗ.Колонки.Добавить("МнгСумПроц");
	ТЗ.Колонки.Добавить("МнгСумСтрВзн");
	ТЗ.Колонки.Добавить("МнгСумШтр");
	ТЗ.Колонки.Добавить("УИД");
	Для Каждого Стр Из ИсходныеДанные.ДанныеМногострочныхРазделов.П0020001001 Цикл 
		НовСтр = ТЗ.Добавить();
		НовСтр.МнгНом = Стр.П002000100101;
		НовСтр.МнгСрок = Стр.П002000100102;
		НовСтр.МнгСумВсего = Стр.П002000100103;
		НовСтр.МнгСумПени = Стр.П002000100104;
		НовСтр.МнгСумПроц = Стр.П002000100105;
		НовСтр.МнгСумСтрВзн = Стр.П002000100106;
		НовСтр.МнгСумШтр = Стр.П002000100107;
		НовСтр.УИД = ИдентификаторыОбычныхСтраниц["График"];
	КонецЦикла;
	СтруктураПараметров.Вставить("ДанныеДопСтрокБД", Новый Структура("МнгСтр", ТЗ));
	
	ДанныеУведомления = Новый Структура;
	Для Каждого КЗ Из ИсходныеДанные.ПоказателиОтчета Цикл 
		ДанныеУведомления.Вставить(СтрЗаменить(КЗ.Ключ, "ПолеТабличногоДокумента", ""), КЗ.Значение);
	КонецЦикла;
	СтруктураПараметров.Вставить("ДанныеУведомления", ДанныеУведомления);
	
	ДокОбъект.ДанныеУведомления = Новый ХранилищеЗначения(СтруктураПараметров);
	Возврат ДокОбъект;
КонецФункции

Процедура СоздатьСконвертированныйРассрочкаФСС(Выборка) Экспорт 
	Попытка
		Если Не ОбщегоНазначения.ПодсистемаСуществует("РегламентированнаяОтчетность.СообщенияВКонтролирующиеОрганы.КонвертацияОтчетовПриПереходеС82") Тогда
			Возврат;
		КонецЕсли;
		
		НачатьТранзакцию();
		НовоеУведомление = СоздатьНовоеУведомлениеПоДанным(Выборка);
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(НовоеУведомление);
		
		РегОтчет = Выборка.Ссылка.ПолучитьОбъект();
		РегОтчет.Комментарий = "##УведомлениеОСпецрежимахНалогообложения##" + Выборка.Комментарий;
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(РегОтчет);
		
		ЗаписьСоответствия = РегистрыСведений["СоответствиеРегОтчетовУведомлениям"].СоздатьМенеджерЗаписи();
		ЗаписьСоответствия.РегОтчет = РегОтчет;
		ЗаписьСоответствия.Прочитать();
		ЗаписьСоответствия.РегОтчет = РегОтчет;
		ЗаписьСоответствия.Уведомление = НовоеУведомление;
		ЗаписьСоответствия.Записать(Истина);
		
		ЗафиксироватьТранзакцию();
	Исключение
		Если ТранзакцияАктивна() Тогда 
			ОтменитьТранзакцию();
		КонецЕсли;
		Ошибка = ИнформацияОбОшибке();
		СтрОш = НСтр("ru = 'Создание уведомления о предоставлении рассрочки ФСС'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		ЗаписьЖурналаРегистрации(СтрОш, УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
КонецПроцедуры

#КонецОбласти
#КонецЕсли
