&НаКлиенте
Перем ПараметрыОбработчикаОжидания;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЗаполнитьЗначенияСвойств(Отчет, Параметры);
	
	Если НЕ ЗначениеЗаполнено(Отчет.НачалоПериода) Тогда
		Отчет.НачалоПериода = НачалоДня(ОбщегоНазначения.ТекущаяДатаПользователя());
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Отчет.КонецПериода) Тогда
		Отчет.КонецПериода  = КонецДня(ОбщегоНазначения.ТекущаяДатаПользователя());
	КонецЕсли;
	
	ПриИзмененииПериода(ЭтотОбъект);
	
	Если НЕ ЗначениеЗаполнено(Отчет.Организация) Тогда
		Отчет.Организация   = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация");
	КонецЕсли;
	
	Если БухгалтерскийУчетПереопределяемый.ВестиУчетПоПодразделениям() И НЕ ЗначениеЗаполнено(Отчет.ПодразделениеОрганизации) Тогда
		Отчет.ПодразделениеОрганизации = ПодразделениеПоУмолчанию();
	КонецЕсли;
	
	КнигаФормируется = НЕ Отчет.ПлатежныйАгент;
	
	УстановитьДоступностьПодразделения(ЭтотОбъект);
	УстановитьПараметрыВыбораОбособленногоПодразделения();
	
	ОбновитьТекстЗаголовка(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеПользовательскихНастроекНаСервере(Настройки)
	
	БухгалтерскиеОтчетыВызовСервера.ПриЗагрузкеПользовательскихНастроекНаСервере(ЭтотОбъект, Настройки, Истина);
	КнигаФормируется = НЕ Отчет.ПлатежныйАгент;
	
	Если Параметры.Свойство("Организация") И ЗначениеЗаполнено(Параметры.Организация) И Отчет.Организация <> Параметры.Организация Тогда
		Отчет.Организация = Параметры.Организация;
		
		Если БухгалтерскийУчетПереопределяемый.ВестиУчетПоПодразделениям() И НЕ ЗначениеЗаполнено(Отчет.ПодразделениеОрганизации) Тогда
			Отчет.ПодразделениеОрганизации = ПодразделениеПоУмолчанию();
		КонецЕсли;
	КонецЕсли;
	
	УстановитьДоступностьПодразделения(ЭтотОбъект);
	
	ПриИзмененииПериода(ЭтотОбъект);
	
	ОбновитьТекстЗаголовка(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПриСохраненииПользовательскихНастроекНаСервере(Настройки)
	
	БухгалтерскиеОтчетыВызовСервера.ПриСохраненииПользовательскихНастроекНаСервере(ЭтотОбъект, Настройки, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	БухгалтерскиеОтчетыКлиент.ПриОткрытии(ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	ВариантМодифицирован                    = Ложь;
	ПользовательскиеНастройкиМодифицированы = НЕ Отчет.РежимРасшифровки;
	БухгалтерскиеОтчетыКлиент.ПередЗакрытием(ЭтотОбъект, Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	БухгалтерскиеОтчетыКлиент.ПриЗакрытии(ЭтотОбъект, ЗавершениеРаботы);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ИзменениеРеквизитаШапкиОтчета(ЭтотОбъект);
	
	Если НЕ ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КнигаФормируетсяПриИзменении(Элемент)
	
	Отчет.ПлатежныйАгент = НЕ КнигаФормируется;
	ИзменениеРеквизитаШапкиОтчета(ЭтотОбъект);
	
	Если НЕ ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодразделениеПриИзменении(Элемент)
	
	ИзменениеРеквизитаШапкиОтчета(ЭтотОбъект);
	ФормироватьПоПодразделению = ЗначениеЗаполнено(Отчет.ПодразделениеОрганизации);
	УстановитьДоступностьПодразделения(ЭтотОбъект);
	
	Если НЕ ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыводитьОснованияПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоследнийЛистПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ФормироватьПоПодразделениюПриИзменении(Элемент)
	
	Если НЕ ФормироватьПоПодразделению Тогда
		Отчет.ПодразделениеОрганизации = Неопределено;
	КонецЕсли;
	
	ИзменениеРеквизитаШапкиОтчета(ЭтотОбъект);
	УстановитьДоступностьПодразделения(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура НачалоПериодаПриИзменении(Элемент)
	
	ПриИзмененииПериода(ЭтотОбъект);
	
	Если НЕ ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КонецПериодаПриИзменении(Элемент)
	
	ПриИзмененииПериода(ЭтотОбъект);
	
	Если НЕ ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийПоляТабличногоДокументаРезультат

&НаКлиенте
Процедура РезультатПриАктивизацииОбласти(Элемент)
	
	Если Элементы.РазделыОтчета.ТекущаяСтраница = Элементы.НастройкиОтчета Тогда
		Элементы.РазделыОтчета.ТекущаяСтраница = Элементы.Отчет;
	КонецЕсли;
	
	Если ТипЗнч(Результат.ВыделенныеОбласти) = Тип("ВыделенныеОбластиТабличногоДокумента") Тогда
		ИнтервалОжидания = ?(ПолучитьСкоростьКлиентскогоСоединения() = СкоростьКлиентскогоСоединения.Низкая, 1, 0.2);
		ПодключитьОбработчикОжидания("Подключаемый_РезультатПриАктивизацииОбластиПодключаемый", ИнтервалОжидания, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РезультатВыбор(Элемент, Область, СтандартнаяОбработка)
	
	Если Результат.Области.Найти("ОповеститьОПроблеме") <> Неопределено Тогда
		Если Область.Верх = Результат.Области.ОповеститьОПроблеме.Верх Тогда
			СтандартнаяОбработка = Ложь;
			
			ОчиститьСообщения();
			ОтключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания");
			
			ПересчитатьНомераЛистов = Истина;
			РезультатВыполнения = СформироватьОтчетНаСервере(Область.Расшифровка);
			Если НЕ РезультатВыполнения.ЗаданиеВыполнено Тогда
				ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
				ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
				ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "ФормированиеОтчета");
			Иначе
				ПоказатьОповещениеПользователя(НСтр("ru = 'Произведен пересчет'"),, НСтр("ru = 'номеров листов Кассовой книги'"),
					БиблиотекаКартинок.Информация);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура СформироватьОтчет(Команда)
	
	ОчиститьСообщения();
	ОтключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания");
	
	Если ФормироватьПоПодразделению И НЕ ЗначениеЗаполнено(Отчет.ПодразделениеОрганизации) Тогда
		ТекстСообщения = ОбщегоНазначенияБПКлиентСервер.ПолучитьТекстСообщения(
			"Поле", "Заполнение", НСтр("ru = 'Подразделение'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,
			"ПодразделениеОрганизации", "Отчет");
		Возврат;
	КонецЕсли;
	
	ПредупреждениеСбойНумерации  = "";
	ПоказатьОповещениеОПересчете = ПересчитатьНомераЛистов;
	
	РезультатВыполнения = СформироватьОтчетНаСервере();
	Если НЕ РезультатВыполнения.ЗаданиеВыполнено Тогда
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "ФормированиеОтчета");
	Иначе
		Если ПоказатьОповещениеОПересчете Тогда
			ПоказатьОповещениеПользователя(НСтр("ru = 'Произведен пересчет'"),, НСтр("ru = 'номеров листов Кассовой книги'"),
				БиблиотекаКартинок.Информация);
		КонецЕсли;
	КонецЕсли;
	
	Элементы.РазделыОтчета.ТекущаяСтраница = Элементы.Отчет;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьНастройки(Команда)
	
	Элементы.ПрименитьНастройки.КнопкаПоУмолчанию = Истина;
	Элементы.РазделыОтчета.ТекущаяСтраница = Элементы.НастройкиОтчета;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьНастройки(Команда)
	
	Элементы.Сформировать.КнопкаПоУмолчанию = Истина;
	Элементы.РазделыОтчета.ТекущаяСтраница = Элементы.Отчет;
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиКЛисту(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПерейтиКЛистуЗавершение", ЭтотОбъект);
	
	ТекущийЛист = Неопределено;
	Если НЕ ПустаяСтрока(СписокВыбораЛиста) Тогда
		ТекущийЛист = СписокЛистов.НайтиПоЗначению(СписокВыбораЛиста);
	КонецЕсли;
	
	СписокЛистов.ПоказатьВыборЭлемента(ОписаниеОповещения, НСтр("ru = 'Перейти к листу кассовой книги'"), ТекущийЛист);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьПериод(Команда)
	
	ПараметрыВыбора    = Новый Структура("НачалоПериода, КонецПериода", Отчет.НачалоПериода, Отчет.КонецПериода);
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыбратьПериодЗавершение", ЭтотОбъект);
	ОткрытьФорму("ОбщаяФорма.ВыборСтандартногоПериода", ПараметрыВыбора, Элементы.ВыбратьПериод,,,, ОписаниеОповещения);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ФОРМЫ

&НаСервере
Функция ПодготовитьПараметрыОтчета()
	
	ПараметрыОтчета = Новый Структура;
	ПараметрыОтчета.Вставить("НачалоПериода",              Отчет.НачалоПериода);
	ПараметрыОтчета.Вставить("КонецПериода",               Отчет.КонецПериода);
	ПараметрыОтчета.Вставить("Организация",                Отчет.Организация);
	ПараметрыОтчета.Вставить("ПодразделениеОрганизации",   Отчет.ПодразделениеОрганизации);
	ПараметрыОтчета.Вставить("ПлатежныйАгент",             Отчет.ПлатежныйАгент);
	ПараметрыОтчета.Вставить("ПроверитьНомера",            ПроверитьНомераЛистовСНачалаГода);
	ПараметрыОтчета.Вставить("ПересчитатьНомераЛистов",    ПересчитатьНомераЛистов);
	ПараметрыОтчета.Вставить("ПоследнийЛист",              Отчет.ПоследнийЛист);
	ПараметрыОтчета.Вставить("НомерЛистаНачало",           НомерЛистаНачало);
	ПараметрыОтчета.Вставить("ВыводитьОснования",          Отчет.ВыводитьОснования);
	ПараметрыОтчета.Вставить("ФормироватьПоПодразделению", ФормироватьПоПодразделению);
	ПараметрыОтчета.Вставить("СписокСформированныхЛистов", СписокЛистов);
	ПараметрыОтчета.Вставить("ТабличныйДокумент",          Неопределено);
	ПараметрыОтчета.Вставить("СформироватьОбложку",        Отчет.СформироватьОбложку);
	ПараметрыОтчета.Вставить("РежимРасшифровки",           Отчет.РежимРасшифровки);
	ПараметрыОтчета.Вставить("ГлавныйБухгалтер",           ГлавныйБухгалтер);
	ПараметрыОтчета.Вставить("Кассир",                     Кассир);
	
	Возврат ПараметрыОтчета;
	
КонецФункции

&НаСервере
Функция СформироватьОтчетНаСервере(Знач ГраницыПересчетаЛистов = Неопределено)
	
	Если НЕ ПроверитьЗаполнение() Тогда
		Возврат Новый Структура("ЗаданиеВыполнено", Истина);
	КонецЕсли;
	
	Если ГраницыПересчетаЛистов <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(Отчет, ГраницыПересчетаЛистов);
		ОбновитьТекстЗаголовка(ЭтотОбъект);
	КонецЕсли;
	
	ИдентификаторЗадания = Неопределено;
	ИБФайловая = ОбщегоНазначения.ИнформационнаяБазаФайловая();
	ДлительныеОперации.ОтменитьВыполнениеЗадания(ИдентификаторЗадания);
	ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеИспользовать");
	
	ПараметрыОтчета = ПодготовитьПараметрыОтчета();
	
	Если ИБФайловая Тогда
		АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
		Отчеты.КассоваяКнига.СформироватьОтчет(ПараметрыОтчета, АдресХранилища);
		РезультатВыполнения = Новый Структура("ЗаданиеВыполнено", Истина);
	Иначе
		РезультатВыполнения = ДлительныеОперации.ЗапуститьВыполнениеВФоне(
			УникальныйИдентификатор,
			"Отчеты.КассоваяКнига.СформироватьОтчет",
			ПараметрыОтчета,
			БухгалтерскиеОтчетыКлиентСервер.ПолучитьНаименованиеЗаданияВыполненияОтчета(ЭтотОбъект));
		
		АдресХранилища       = РезультатВыполнения.АдресХранилища;
		ИдентификаторЗадания = РезультатВыполнения.ИдентификаторЗадания;
	КонецЕсли;
	
	Если РезультатВыполнения.ЗаданиеВыполнено Тогда
		ЗагрузитьПодготовленныеДанные();
	КонецЕсли;
	
	Элементы.Сформировать.КнопкаПоУмолчанию = Истина;
	
	Возврат РезультатВыполнения;
	
КонецФункции

&НаСервере
Функция ПодразделениеПоУмолчанию()
	
	ПодразделениеОрганизации = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию(
		"ОсновноеПодразделениеОрганизации");
	Если ЗначениеЗаполнено(ПодразделениеОрганизации) Тогда
		СвойстваПодразделения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПодразделениеОрганизации,
			"Владелец, ОбособленноеПодразделение");
		Если СвойстваПодразделения.ОбособленноеПодразделение И СвойстваПодразделения.Владелец = Отчет.Организация Тогда
			Возврат ПодразделениеОрганизации;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
	
КонецФункции

&НаСервере
Процедура ЗагрузитьПодготовленныеДанные()
	
	ВозвращаемыеПараметры = ПолучитьИзВременногоХранилища(АдресХранилища);
	СписокЛистов = ВозвращаемыеПараметры.СписокСформированныхЛистов;
	
	Если СписокЛистов.Количество() > 0 Тогда
		СписокВыбораЛиста = СписокЛистов.Получить(0).Значение;
		Элементы.КнопкаПерейтиКЛисту.Видимость = Истина;
	КонецЕсли;
	
	ПоказатьОповещениеОНумерации = ВозвращаемыеПараметры.ПоказатьОповещениеОНумерации;
	ПоказатьТабличныйДокумент(ВозвращаемыеПараметры.ТабличныйДокумент);
	
	ИдентификаторЗадания = Неопределено;
	ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеИспользовать");
	
	Для каждого ДатаЛиста Из ВозвращаемыеПараметры.ДатыЛистовСОшибками Цикл
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Обороты по документам и проводкам за %1 не совпадают!'"),
			Формат(ДатаЛиста, "ДФ=dd.MM.yyyy"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЦикла;
	
	Если ПересчитатьНомераЛистов Тогда
		ПересчитатьНомераЛистов = Ложь;
		
		НомерЛистаНачало = ПолучитьНомерЛистаНачало(ПодготовитьПараметрыОтчета());
		УстановитьДоступностьНомерЛистаНачало(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВычислитьСуммуВыделенныхЯчеекТабличногоДокументаВКонтекстеНаСервере()
	
	ПолеСумма = БухгалтерскиеОтчетыВызовСервера.ВычислитьСуммуВыделенныхЯчеекТабличногоДокумента(
		Результат, КэшВыделеннойОбласти);
	
КонецПроцедуры

&НаСервере
Процедура ПоказатьТабличныйДокумент(ТабДокумент)
	
	Результат.Очистить();
	Результат.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_КассоваяКнига";
	
	Результат.Вывести(ТабДокумент);
	Если ПоказатьОповещениеОНумерации Тогда
		ОбластьПредупреждения = Результат.Область(2, 1, Результат.ВысотаТаблицы, Результат.ШиринаТаблицы);
		Результат.ОбластьПечати  = ОбластьПредупреждения;
		Результат.ФиксацияСверху = 1;
	Иначе
		Результат.ФиксацияСверху = 0;
	КонецЕсли;
	
	Результат.ТолькоПросмотр = Истина;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПараметрыВыбораОбособленногоПодразделения()
	
	ПараметрыВыбора = Новый Массив();
	ПараметрыВыбора.Добавить(Новый ПараметрВыбора("Отбор.ОбособленноеПодразделение", Истина));
	
	Элементы.Подразделение.ПараметрыВыбора = Новый ФиксированныйМассив(ПараметрыВыбора);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаданиеВыполнено(ИдентификаторЗадания)
	
	Возврат ДлительныеОперации.ЗаданиеВыполнено(ИдентификаторЗадания);
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьОтветственныхИУполномоченных(Знач ПараметрыОтчета)
	
	ОтветственныеЛица = Новый Структура("ГлавныйБухгалтер, Кассир");
	
	ДанныеОтветственныхЛиц  = ОтветственныеЛицаБП.ОтветственныеЛица(
		ПараметрыОтчета.Организация, ПараметрыОтчета.КонецПериода, ПараметрыОтчета.ПодразделениеОрганизации);
	ЗаполнитьЗначенияСвойств(ОтветственныеЛица, ДанныеОтветственныхЛиц, "ГлавныйБухгалтер, Кассир");
	
	ДанныеУполномоченныхЛиц = ОтветственныеЛицаБП.ДанныеУполномоченногоЛица(
		ПараметрыОтчета.Организация, Пользователи.ТекущийПользователь());
	
	Если ЗначениеЗаполнено(ДанныеУполномоченныхЛиц.ГлавныйБухгалтер)
		И ДанныеОтветственныхЛиц.ГлавныйБухгалтер <> ДанныеУполномоченныхЛиц.ГлавныйБухгалтер Тогда
		ОтветственныеЛица.ГлавныйБухгалтер = ДанныеУполномоченныхЛиц.ГлавныйБухгалтер;
	КонецЕсли;
	
	Если ДанныеУполномоченныхЛиц.Свойство("Кассир") И ЗначениеЗаполнено(ДанныеУполномоченныхЛиц.Кассир)
		И ДанныеОтветственныхЛиц.Кассир <> ДанныеУполномоченныхЛиц.Кассир Тогда
		ОтветственныеЛица.Кассир = ДанныеУполномоченныхЛиц.Кассир;
	КонецЕсли;
	
	Возврат ОтветственныеЛица;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьНомерЛистаНачало(Знач ПараметрыОтчета)
	
	Возврат РегистрыСведений.НомераЛистовКассовойКниги.ПолучитьНомерЛистаНачало(ПараметрыОтчета);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьИндексСформированногоЛиста(ИмяЛиста, СписокСформированныхЛистов)
	
	Если ИмяЛиста = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Для каждого Лист Из СписокСформированныхЛистов Цикл
		Если Лист.Значение = ИмяЛиста Тогда
			Возврат СписокСформированныхЛистов.Индекс(Лист);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьВидимостьПоследнийЛист(Форма)
	
	Отчет    = Форма.Отчет;
	Элементы = Форма.Элементы;
	
	Элементы.ПоследнийЛист.Видимость = ?(Отчет.КонецПериода < '20150101', Истина, Ложь);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьНомерЛистаНачало(Форма)
	
	Форма.Элементы.НомерЛистаНачало.Доступность = Форма.Отчет.НачалоПериода > НачалоГода(Форма.Отчет.НачалоПериода);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПриИзмененииПериода(Форма)
	
	Отчет = Форма.Отчет;
	Если КонецДня(Отчет.КонецПериода) = КонецГода(Отчет.КонецПериода) Тогда
		Отчет.ПоследнийЛист       = 2;
		Отчет.СформироватьОбложку = Истина;
	ИначеЕсли КонецДня(Отчет.КонецПериода) = КонецМесяца(Отчет.КонецПериода) Тогда
		Отчет.ПоследнийЛист       = 1;
		Отчет.СформироватьОбложку = Ложь;
	Иначе
		Отчет.ПоследнийЛист       = 0;
		Отчет.СформироватьОбложку = Ложь;
	КонецЕсли;
	
	ИзменениеРеквизитаШапкиОтчета(Форма);
	УстановитьДоступностьНомерЛистаНачало(Форма);
	УстановитьВидимостьПоследнийЛист(Форма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ИзменениеРеквизитаШапкиОтчета(Форма)
	
	Отчет = Форма.Отчет;
	
	ПараметрыОтчета = Новый Структура;
	ПараметрыОтчета.Вставить("НачалоПериода",            Отчет.НачалоПериода);
	ПараметрыОтчета.Вставить("КонецПериода",             Отчет.КонецПериода);
	ПараметрыОтчета.Вставить("Организация",              Отчет.Организация);
	ПараметрыОтчета.Вставить("ПодразделениеОрганизации", Отчет.ПодразделениеОрганизации);
	ПараметрыОтчета.Вставить("ПлатежныйАгент",           Отчет.ПлатежныйАгент);
	
	Ответственные = ПолучитьОтветственныхИУполномоченных(ПараметрыОтчета);
	ЗаполнитьЗначенияСвойств(Форма, Ответственные, "Кассир, ГлавныйБухгалтер");
	
	Форма.НомерЛистаНачало = ПолучитьНомерЛистаНачало(ПараметрыОтчета);
	
	ОбновитьТекстЗаголовка(Форма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьПодразделения(Форма)
	
	Отчет    = Форма.Отчет;
	Элементы = Форма.Элементы;
	
	Если ЗначениеЗаполнено(Отчет.ПодразделениеОрганизации) Тогда
		Форма.ФормироватьПоПодразделению = Истина;
	КонецЕсли;
	
	Элементы.Подразделение.Доступность = Форма.ФормироватьПоПодразделению;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьТекстЗаголовка(Форма)
	
	Отчет = Форма.Отчет;
	
	ЗаголовокОтчета = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Кассовая книга%1'"),
		БухгалтерскиеОтчетыКлиентСервер.ПолучитьПредставлениеПериода(Отчет.НачалоПериода, Отчет.КонецПериода));
	
	Если ЗначениеЗаполнено(Отчет.Организация) И Форма.ИспользуетсяНесколькоОрганизаций Тогда
		ЗаголовокОтчета = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '%1 %2'"),
			ЗаголовокОтчета,
			БухгалтерскиеОтчетыВызовСервера.ПолучитьТекстОрганизация(Отчет.Организация));
	КонецЕсли;
	
	Форма.Заголовок = ЗаголовокОтчета;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПОДКЛЮЧАЕМЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеЗадания()
	
	Попытка
		Если ЗаданиеВыполнено(ИдентификаторЗадания) Тогда
			ПоказатьОповещениеОПересчете = ПересчитатьНомераЛистов;
			ЗагрузитьПодготовленныеДанные();
			Если ПоказатьОповещениеОПересчете Тогда
				ПоказатьОповещениеПользователя(НСтр("ru = 'Произведен пересчет'"),, НСтр("ru = 'номеров листов Кассовой книги'"),
					БиблиотекаКартинок.Информация);
			КонецЕсли;
			
			ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеИспользовать");
		Иначе
			ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
			ПодключитьОбработчикОжидания(
				"Подключаемый_ПроверитьВыполнениеЗадания", 
				ПараметрыОбработчикаОжидания.ТекущийИнтервал, 
				Истина);
		КонецЕсли;
	Исключение
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеИспользовать");
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_РезультатПриАктивизацииОбластиПодключаемый()
	
	НеобходимоВычислятьНаСервере = Ложь;
	БухгалтерскиеОтчетыКлиент.ВычислитьСуммуВыделенныхЯчеекТабличногоДокумента(
		ПолеСумма, Результат, КэшВыделеннойОбласти, НеобходимоВычислятьНаСервере);
	
	Если НеобходимоВычислятьНаСервере Тогда
		ВычислитьСуммуВыделенныхЯчеекТабличногоДокументаВКонтекстеНаСервере();
	КонецЕсли;
	
	ОтключитьОбработчикОжидания("Подключаемый_РезультатПриАктивизацииОбластиПодключаемый");
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ЗАВЕРШЕНИЕ НЕМОДАЛЬНЫХ ВЫЗОВОВ

&НаКлиенте
Процедура ВыбратьПериодЗавершение(РезультатВыбора, ДопПараметры) Экспорт
	
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(Отчет, РезультатВыбора, "НачалоПериода, КонецПериода");
	
	ПриИзмененииПериода(ЭтотОбъект);
	Если НЕ ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиКЛистуЗавершение(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныйЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СписокВыбораЛиста = ВыбранныйЭлемент.Значение;
	ИндексСформированногоЛиста = ПолучитьИндексСформированногоЛиста(СписокВыбораЛиста, СписокЛистов);
	Если ИндексСформированногоЛиста <> Неопределено Тогда
		СформированныйЛист = Сред(СписокЛистов.Получить(ИндексСформированногоЛиста).Значение, 2);
		
		ПолеТабличногоДокумента    = Элементы["Результат"];
		ТабличныйДокумент          = ЭтотОбъект["Результат"];
		ОбластьВыбранногоДокумента = ТабличныйДокумент.Области.Найти(СформированныйЛист);
		
		ПолеТабличногоДокумента.ТекущаяОбласть = ТабличныйДокумент.Область("R1C1"); // переход к началу
		
		Если ОбластьВыбранногоДокумента <> Неопределено Тогда
			ПолеТабличногоДокумента.ТекущаяОбласть = ТабличныйДокумент.Область(
				ОбластьВыбранногоДокумента.Верх,, ОбластьВыбранногоДокумента.Низ,);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
