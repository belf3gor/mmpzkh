#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

Процедура ДобавитьОбороты(РабочаяТаблица, Валюта, ВалПриход, Приход, ВалРасход, Расход)
	
	СтрокаТаблицы = РабочаяТаблица.Найти(Валюта, "Валюта");
	Если СтрокаТаблицы = Неопределено Тогда
		НоваяСтрока = РабочаяТаблица.Добавить();
		НоваяСтрока.Валюта     = Валюта;
		НоваяСтрока.ВалютаПредставление = Строка(Валюта);
		НоваяСтрока.ВалОстаток = 0;
		НоваяСтрока.Остаток    = 0;
		НоваяСтрока.ВалПриход  = ВалПриход;
		НоваяСтрока.Приход     = Приход;
		НоваяСтрока.ВалРасход  = ВалРасход;
		НоваяСтрока.Расход     = Расход;
	Иначе
		СтрокаТаблицы.ВалПриход = СтрокаТаблицы.ВалПриход + ВалПриход;
		СтрокаТаблицы.Приход    = СтрокаТаблицы.Приход    + Приход;
		СтрокаТаблицы.ВалРасход = СтрокаТаблицы.ВалРасход + ВалРасход;
		СтрокаТаблицы.Расход    = СтрокаТаблицы.Расход    + Расход;
	КонецЕсли;
	
КонецПроцедуры

Процедура СформироватьОтчет(Знач ПараметрыОтчета, АдресХранилища) Экспорт
	
	ПоказатьОповещениеОНумерации = Ложь;
	ДатыЛистовСОшибками          = Новый Массив;
	ПараметрыОтчета.СписокСформированныхЛистов.Очистить();
	
	СформироватьЛистыКассовойКниги(ПараметрыОтчета, ДатыЛистовСОшибками, ПоказатьОповещениеОНумерации);
	
	ВозвращаемыеПараметры =
		Новый Структура("ТабличныйДокумент, СписокСформированныхЛистов, ДатыЛистовСОшибками, ПоказатьОповещениеОНумерации",
			ПараметрыОтчета.ТабличныйДокумент, ПараметрыОтчета.СписокСформированныхЛистов, ДатыЛистовСОшибками, ПоказатьОповещениеОНумерации);
	ПоместитьВоВременноеХранилище(ВозвращаемыеПараметры, АдресХранилища);
	
КонецПроцедуры

Процедура СформироватьЛистыКассовойКниги(ПараметрыОтчета, ДатыЛистовСОшибками, ПоказатьОповещениеОНумерации)
	Перем ДатаЛиста;
	
	ТабличныйДокумент  = Новый ТабличныйДокумент; // Итоговый табличный документ листа кассовой книги
	
	Если Не ЗначениеЗаполнено(ПараметрыОтчета.Организация) Тогда
		ПараметрыОтчета.Вставить("ТабличныйДокумент", ТабличныйДокумент);
		Возврат;
	КонецЕсли;
	
	ВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	НаименованиеВалютыРеглУчета    = СокрЛП(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
		ВалютаРегламентированногоУчета, "НаименованиеПолное"));
	
	НомерСтрокиНачало  = 1;
	
	ЛистыКассовойКниги = Новый ТабличныйДокумент; // временный табличный документ, для формирования кассовой книги
	ДокументРезультат  = Новый ТабличныйДокумент; // временный табличный документ, для формирования листа кассовой книги
	
	НачалоГода = НачалоГода(ПараметрыОтчета.НачалоПериода);
	НачИтоги   = ?(ПараметрыОтчета.ПроверитьНомера И НЕ ПараметрыОтчета.ПересчитатьНомераЛистов, НачалоГода, ПараметрыОтчета.НачалоПериода);
	
	// расчет номера начального листа
	// осуществляется по проводкам так как не все операции по
	// кассе оформляются приходными/расходными ордерами
	
	ЛистовЗаГод        = 0;
	ЛистовЗаМесяц      = 0;
	
	СписокПодразделений  = Неопределено;
	ПодразделениеВыбрано = ЗначениеЗаполнено(ПараметрыОтчета.ПодразделениеОрганизации);
	Если ПараметрыОтчета.ФормироватьПоПодразделению Тогда
		Если ПодразделениеВыбрано Тогда
			СведенияОПодразделении = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПараметрыОтчета.ПодразделениеОрганизации,
				"Наименование, НаименованиеПолное, ОбособленноеПодразделение");
			ФормироватьПоПодразделению = СведенияОПодразделении.ОбособленноеПодразделение;
			Если ФормироватьПоПодразделению Тогда
				ПредставлениеПодразделения  = ?(ПустаяСтрока(СведенияОПодразделении.НаименованиеПолное),
					СокрЛП(СведенияОПодразделении.Наименование), СокрЛП(СведенияОПодразделении.НаименованиеПолное));
				СписокПодразделений = Справочники.ПодразделенияОрганизаций.ПодчиненныеПодразделения(ПараметрыОтчета.ПодразделениеОрганизации).ПодчиненныеСтруктурныеЕдиницы;
				Если СписокПодразделений = Неопределено Тогда
					СписокПодразделений = Новый Массив;
				КонецЕсли;
				
				СписокПодразделений.Добавить(ПараметрыОтчета.ПодразделениеОрганизации);
			Иначе
				ПредставлениеПодразделения = "";
			КонецЕсли;
		Иначе
			ПредставлениеПодразделения = "";
		КонецЕсли;
	ИначеЕсли БухгалтерскийУчетПереопределяемый.ВестиУчетПоПодразделениям() Тогда
		СписокПодразделений = Справочники.ПодразделенияОрганизаций.ПодчиненныеПодразделения(ПараметрыОтчета.Организация).ПодчиненныеСтруктурныеЕдиницы;
		Если СписокПодразделений = Неопределено Тогда
			СписокПодразделений = Новый Массив;
		КонецЕсли;
		
		СписокПодразделений.Добавить(Справочники.ПодразделенияОрганизаций.ПустаяСсылка());
	КонецЕсли;
	
	ОтветственныеЛица = ПолучитьОтветственныеЛицаКассовойКниги(ПараметрыОтчета,, КонецДня(ПараметрыОтчета.КонецПериода));
	
	НумерацияЛистовИзменилась = Ложь;
	ДатаНачальногоЛиста       = '00010101';
	ОтборЛисты = РегистрыСведений.НомераЛистовКассовойКниги.Отбор(ПараметрыОтчета);
	Если ПараметрыОтчета.НачалоПериода > НачалоГода Тогда
		Номера = РегистрыСведений.НомераЛистовКассовойКниги.СрезПоследних(ПараметрыОтчета.НачалоПериода - 86400, ОтборЛисты);
		Если Номера.Количество() > 0 Тогда
			Если Номера[0].Период >= НачалоГода Тогда
				ЛистовЗаГод = Номера[0].НомерЛиста;
				
				Если ПараметрыОтчета.ПересчитатьНомераЛистов Тогда
					РазницаЛистов = 0;
				Иначе
					РазницаЛистов = ЛистовЗаГод - ПараметрыОтчета.НомерЛистаНачало + 1;
				КонецЕсли;
				
				ЛистовЗаПредыдущиеМесяцы = 0;
				НомераПредМесяцев = РегистрыСведений.НомераЛистовКассовойКниги.СрезПоследних(
					НачалоМесяца(ПараметрыОтчета.НачалоПериода) - 86400, ОтборЛисты);
				
				Если НомераПредМесяцев.Количество() > 0 И НомераПредМесяцев[0].Период >= НачалоГода Тогда
					ЛистовЗаПредыдущиеМесяцы = НомераПредМесяцев[0].НомерЛиста;
				КонецЕсли;
				
				ЛистовЗаМесяц = ЛистовЗаГод - РазницаЛистов - ЛистовЗаПредыдущиеМесяцы;
				ЛистовЗаМесяц = ?(ЛистовЗаМесяц < 0, 0, ЛистовЗаМесяц);
				
				Если РазницаЛистов <> 0 Тогда
					НумерацияЛистовИзменилась               = Истина;
					ПараметрыОтчета.ПересчитатьНомераЛистов = Истина;
					ДатаНачальногоЛиста = Номера[0].Период;
					
					ЛистовЗаГод = ПараметрыОтчета.НомерЛистаНачало - 1;
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли ПараметрыОтчета.НомерЛистаНачало > 1 Тогда
			НумерацияЛистовИзменилась               = Истина;
			ПараметрыОтчета.ПересчитатьНомераЛистов = Истина;
			ДатаНачальногоЛиста = ПараметрыОтчета.НачалоПериода - 86400;
			ЛистовЗаГод         = ПараметрыОтчета.НомерЛистаНачало - 1;
		Иначе
			ТекНомера = РегистрыСведений.НомераЛистовКассовойКниги.СрезПоследних(ПараметрыОтчета.НачалоПериода, ОтборЛисты);
			Если ТекНомера.Количество() > 0 И ТекНомера[0].НомерЛиста <> ПараметрыОтчета.НомерЛистаНачало Тогда
				НумерацияЛистовИзменилась               = Истина;
				ПараметрыОтчета.ПересчитатьНомераЛистов = Истина;
				ЛистовЗаГод         = ПараметрыОтчета.НомерЛистаНачало - 1;
				Если ПараметрыОтчета.НомерЛистаНачало > 1 Тогда
					ДатаНачальногоЛиста = ПараметрыОтчета.НачалоПериода - 86400;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ПараметрыОтчета.ПересчитатьНомераЛистов Тогда
		ДатаНачальногоЛиста = ПараметрыОтчета.НачалоПериода;
	КонецЕсли;
	
	// Инициируем области отчета
	Макет = ПолучитьМакет("КассоваяКнига");
	ОбластьВалОстатокОтчет              = Макет.ПолучитьОбласть("ВалОстаток|Отчет");
	ОбластьПодвалОтчет                  = Макет.ПолучитьОбласть("Подвал|Отчет");
	ОбластьВТомЧислеОтчет               = Макет.ПолучитьОбласть("ВТомЧисле|Отчет");
	ОбластьОстатокОтчет                 = Макет.ПолучитьОбласть("Остаток|Отчет");
	ОбластьЛистовЗаМесяцОтчет           = Макет.ПолучитьОбласть("ЛистовЗаМесяц|Отчет");
	ОбластьЛистовЗаГодОтчет             = Макет.ПолучитьОбласть("ЛистовЗаГод|Отчет");
	ОбластьВкладнойЛистОтчет            = Макет.ПолучитьОбласть("ВкладнойЛист|Отчет");
	ОбластьОтчетКассираОтчет            = Макет.ПолучитьОбласть("ОтчетКассира|Отчет");
	ЗаголовокЛиста373ПОтчет             = Макет.ПолучитьОбласть("ЗаголовокЛиста373П|Отчет");
	ОбластьШапкаОтчет                   = Макет.ПолучитьОбласть("Шапка|Отчет");
	ОбластьОстатокНаНДОтчет             = Макет.ПолучитьОбласть("ОстатокНаНД|Отчет");
	ОбластьКурсовыеРазницыОтчет         = Макет.ПолучитьОбласть("КурсовыеРазницы|Отчет");
	ОбластьКурсовыеРазницыПоВалютеОтчет = Макет.ПолучитьОбласть("КурсовыеРазницыПоВалюте|Отчет");
	ОбластьПереносОтчет                 = Макет.ПолучитьОбласть("Перенос|Отчет");
	ОбластьСтрокаВалШирокаяОтчет        = Макет.ПолучитьОбласть("СтрокаВалШирокая|Отчет");
	ОбластьСтрокаВалОтчет               = Макет.ПолучитьОбласть("СтрокаВал|Отчет");
	ОбластьСтрокаШирокаяОтчет           = Макет.ПолучитьОбласть("СтрокаШирокая|Отчет");
	ОбластьСтрокаОтчет                  = Макет.ПолучитьОбласть("Строка|Отчет");
	ОбластьОборотОтчет                  = Макет.ПолучитьОбласть("Оборот|Отчет");
	ОбластьОборотРубОтчет               = Макет.ПолучитьОбласть("ОборотРуб|Отчет");
	ОбластьОборотВалОтчет               = Макет.ПолучитьОбласть("ОборотВал|Отчет");
	ОбластьКурсоваяРазницаОтчет         = Макет.ПолучитьОбласть("КурсоваяРазница|Отчет");
	ОбластьКурсоваяРазницаПоВалютеОтчет = Макет.ПолучитьОбласть("КурсоваяРазницаПоВалюте|Отчет");
	ОбластьКонечныйОстатокОтчет         = Макет.ПолучитьОбласть("КонечныйОстаток|Отчет");
	
	Если ПараметрыОтчета.ПлатежныйАгент Тогда
		СчетаКассы = БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.КассаПлатежногоАгента);
	Иначе
		ПредопределенныеСчетаКассы = Новый Массив;
		ПредопределенныеСчетаКассы.Добавить(ПланыСчетов.Хозрасчетный.КассаОрганизации);    // 50.01
		ПредопределенныеСчетаКассы.Добавить(ПланыСчетов.Хозрасчетный.КассаОрганизацииВал); // 50.21
		СчетаКассы = БухгалтерскийУчет.СформироватьМассивСубсчетов(ПредопределенныеСчетаКассы);
	КонецЕсли;
	
	ЗапросПоИтогам = Новый Запрос;
	ЗапросПоИтогам.УстановитьПараметр("НачИтоги",     НачалоДня(НачИтоги));
	ЗапросПоИтогам.УстановитьПараметр("КонецПериода", КонецДня(ПараметрыОтчета.КонецПериода));
	ЗапросПоИтогам.УстановитьПараметр("Организация",  ПараметрыОтчета.Организация);
	ЗапросПоИтогам.УстановитьПараметр("СчетаКассы",   СчетаКассы);
	ТекстЗапросПоИтогам =
	"ВЫБРАТЬ
	|	ХозрасчетныйОстаткиИОбороты.Период КАК Период,
	|	ХозрасчетныйОстаткиИОбороты.Валюта КАК Валюта,
	|	ХозрасчетныйОстаткиИОбороты.СуммаНачальныйОстатокДт КАК СуммаНачальныйОстатокДт,
	|	ХозрасчетныйОстаткиИОбороты.ВалютнаяСуммаНачальныйОстатокДт КАК ВалютнаяСуммаНачальныйОстатокДт,
	|	ХозрасчетныйОстаткиИОбороты.СуммаКонечныйОстатокДт КАК СуммаКонечныйОстатокДт,
	|	ХозрасчетныйОстаткиИОбороты.ВалютнаяСуммаКонечныйОстатокДт КАК ВалютнаяСуммаКонечныйОстатокДт,
	|	ХозрасчетныйОстаткиИОбороты.СуммаОборотДт КАК СуммаОборотДт,
	|	ХозрасчетныйОстаткиИОбороты.СуммаОборотКт КАК СуммаОборотКт
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ОстаткиИОбороты(
	|			&НачИтоги,
	|			&КонецПериода,
	|			ДЕНЬ,
	|			ДвиженияИГраницыПериода,
	|			Счет В (&СчетаКассы),
	|			,
	|			Организация = &Организация
	|				И Подразделение В (&СписокПодразделений)) КАК ХозрасчетныйОстаткиИОбороты
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период
	|ИТОГИ
	|	СУММА(СуммаНачальныйОстатокДт),
	|	СУММА(ВалютнаяСуммаНачальныйОстатокДт),
	|	СУММА(СуммаКонечныйОстатокДт),
	|	СУММА(ВалютнаяСуммаКонечныйОстатокДт),
	|	СУММА(СуммаОборотДт),
	|	СУММА(СуммаОборотКт)
	|ПО
	|	ОБЩИЕ,
	|	Период ПЕРИОДАМИ(ДЕНЬ, , ),
	|	Валюта
	|АВТОУПОРЯДОЧИВАНИЕ";
	
	Если СписокПодразделений <> Неопределено Тогда
		ЗапросПоИтогам.УстановитьПараметр("СписокПодразделений", СписокПодразделений);
	Иначе
		ТекстЗапросПоИтогам = СтрЗаменить(ТекстЗапросПоИтогам, "И Подразделение В (&СписокПодразделений)", "");
	КонецЕсли;
	
	ЗапросПоИтогам.Текст = ТекстЗапросПоИтогам;
	
	ЗапросПоДокументам = Новый Запрос;
	ЗапросПоДокументам.УстановитьПараметр("НачИтоги",     НачалоДня(НачИтоги));
	ЗапросПоДокументам.УстановитьПараметр("КонецПериода", КонецДня(ПараметрыОтчета.КонецПериода));
	ЗапросПоДокументам.УстановитьПараметр("Организация",  ПараметрыОтчета.Организация);
	ЗапросПоДокументам.УстановитьПараметр("СчетаКассы",   СчетаКассы);
	ТекстЗапросПоДокументам =
	"ВЫБРАТЬ
	|	ПриходныйКассовыйОрдер.Ссылка КАК Документ,
	|	ПриходныйКассовыйОрдер.Дата КАК Дата,
	|	ПриходныйКассовыйОрдер.Номер КАК Номер,
	|	ПриходныйКассовыйОрдер.ВидОперации КАК ВидОперации,
	|	ПриходныйКассовыйОрдер.ВалютаДокумента КАК ВалютаДокумента,
	|	ПриходныйКассовыйОрдер.СчетУчетаРасчетовСКонтрагентом КАК СчетУчетаРасчетовСКонтрагентом,
	|	ПОДСТРОКА(ПриходныйКассовыйОрдер.Основание, 1, 200) КАК Основание,
	|	ПриходныйКассовыйОрдер.ПринятоОт КАК ТекстДок,
	|	ПриходныйКассовыйОрдер.СуммаДокумента КАК Приход,
	|	0 КАК Расход
	|ПОМЕСТИТЬ ВТ_КассовыеДокументы
	|ИЗ
	|	Документ.ПриходныйКассовыйОрдер КАК ПриходныйКассовыйОрдер
	|ГДЕ
	|	НЕ ПриходныйКассовыйОрдер.ПометкаУдаления
	|	И ПриходныйКассовыйОрдер.Проведен
	|	И ПриходныйКассовыйОрдер.Дата МЕЖДУ &НачИтоги И &КонецПериода
	|	И ПриходныйКассовыйОрдер.Организация = &Организация
	|	И ПриходныйКассовыйОрдер.ПодразделениеОрганизации В(&СписокПодразделений)
	|	И ПриходныйКассовыйОрдер.СчетКасса В(&СчетаКассы)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РасходныйКассовыйОрдер.Ссылка,
	|	РасходныйКассовыйОрдер.Дата,
	|	РасходныйКассовыйОрдер.Номер,
	|	НЕОПРЕДЕЛЕНО,
	|	РасходныйКассовыйОрдер.ВалютаДокумента,
	|	НЕОПРЕДЕЛЕНО,
	|	ПОДСТРОКА(РасходныйКассовыйОрдер.Основание, 1, 200),
	|	РасходныйКассовыйОрдер.Выдать,
	|	0,
	|	РасходныйКассовыйОрдер.СуммаДокумента
	|ИЗ
	|	Документ.РасходныйКассовыйОрдер КАК РасходныйКассовыйОрдер
	|ГДЕ
	|	НЕ РасходныйКассовыйОрдер.ПометкаУдаления
	|	И РасходныйКассовыйОрдер.Проведен
	|	И РасходныйКассовыйОрдер.Дата МЕЖДУ &НачИтоги И &КонецПериода
	|	И РасходныйКассовыйОрдер.Организация = &Организация
	|	И РасходныйКассовыйОрдер.ПодразделениеОрганизации В(&СписокПодразделений)
	|	И РасходныйКассовыйОрдер.СчетКасса В(&СчетаКассы)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Документ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Хозрасчетный.СчетДт КАК СчетДт,
	|	Хозрасчетный.СчетКт КАК СчетКт,
	|	Хозрасчетный.Регистратор КАК Регистратор
	|ПОМЕСТИТЬ ВТ_Проводки
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Активность
	|	И Хозрасчетный.Период МЕЖДУ &НачИтоги И &КонецПериода
	|	И Хозрасчетный.Организация = &Организация
	|	И (Хозрасчетный.СчетДт В (&СчетаКассы)
	|				И (НЕ Хозрасчетный.СчетДт.Валютный
	|					ИЛИ Хозрасчетный.ВалютнаяСуммаДт <> 0)
	|				И Хозрасчетный.ПодразделениеДт В (&СписокПодразделений)
	|			ИЛИ Хозрасчетный.СчетКт В (&СчетаКассы)
	|				И (НЕ Хозрасчетный.СчетКт.Валютный
	|					ИЛИ Хозрасчетный.ВалютнаяСуммаКт <> 0)
	|				И Хозрасчетный.ПодразделениеКт В (&СписокПодразделений))
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Регистратор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_КассовыеДокументы.Документ КАК Документ,
	|	НАЧАЛОПЕРИОДА(ВТ_КассовыеДокументы.Дата, ДЕНЬ) КАК День,
	|	ВТ_КассовыеДокументы.Дата КАК ДатаДок,
	|	ВТ_КассовыеДокументы.Номер КАК НомерДок,
	|	ВТ_КассовыеДокументы.ВалютаДокумента КАК Валюта,
	|	ВТ_КассовыеДокументы.Основание КАК Основание,
	|	ВТ_КассовыеДокументы.ТекстДок КАК ТекстДок,
	|	ВТ_КассовыеДокументы.Приход КАК Приход,
	|	ВТ_КассовыеДокументы.Расход КАК Расход,
	|	ВЫБОР
	|		КОГДА ВТ_КассовыеДокументы.Документ ССЫЛКА Документ.РасходныйКассовыйОрдер
	|			ТОГДА ВТ_Проводки.СчетДт
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ВТ_КассовыеДокументы.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПКО.РозничнаяВыручка)
	|					ТОГДА ВЫБОР
	|							КОГДА ВТ_КассовыеДокументы.СчетУчетаРасчетовСКонтрагентом = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ВыручкаНеЕНВД)
	|								ТОГДА ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.Выручка)
	|							КОГДА ВТ_КассовыеДокументы.СчетУчетаРасчетовСКонтрагентом = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ВыручкаЕНВД)
	|								ТОГДА ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.Выручка)
	|							ИНАЧЕ ВТ_КассовыеДокументы.СчетУчетаРасчетовСКонтрагентом
	|						КОНЕЦ
	|				ИНАЧЕ ВТ_Проводки.СчетКт
	|			КОНЕЦ
	|	КОНЕЦ КАК Счет
	|ИЗ
	|	ВТ_КассовыеДокументы КАК ВТ_КассовыеДокументы
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Проводки КАК ВТ_Проводки
	|		ПО ВТ_КассовыеДокументы.Документ = ВТ_Проводки.Регистратор
	|
	|УПОРЯДОЧИТЬ ПО
	|	День,
	|	ДатаДок,
	|	Документ
	|ИТОГИ
	|	МАКСИМУМ(ДатаДок),
	|	МАКСИМУМ(НомерДок),
	|	МАКСИМУМ(Валюта),
	|	МАКСИМУМ(Основание),
	|	МАКСИМУМ(ТекстДок),
	|	МАКСИМУМ(Приход),
	|	МАКСИМУМ(Расход)
	|ПО
	|	День,
	|	Документ,
	|	Счет
	|АВТОУПОРЯДОЧИВАНИЕ";
	
	Если СписокПодразделений <> Неопределено Тогда
		ЗапросПоДокументам.УстановитьПараметр("СписокПодразделений", СписокПодразделений);
	Иначе
		ТекстЗапросПоДокументам = СтрЗаменить(ТекстЗапросПоДокументам,
			"И ПриходныйКассовыйОрдер.ПодразделениеОрганизации В(&СписокПодразделений)", "");
		ТекстЗапросПоДокументам = СтрЗаменить(ТекстЗапросПоДокументам,
			"И РасходныйКассовыйОрдер.ПодразделениеОрганизации В(&СписокПодразделений)", "");
		ТекстЗапросПоДокументам = СтрЗаменить(ТекстЗапросПоДокументам,
			"И Хозрасчетный.ПодразделениеДт В (&СписокПодразделений)", "");
		ТекстЗапросПоДокументам = СтрЗаменить(ТекстЗапросПоДокументам,
			"И Хозрасчетный.ПодразделениеКт В (&СписокПодразделений)", "");
	КонецЕсли;
	
	ЗапросПоДокументам.Текст = ТекстЗапросПоДокументам;
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапросаПоИтогам = ЗапросПоИтогам.Выполнить();
	РезультатЗапросаПоДокументам = ЗапросПоДокументам.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	ТаблицаДокументы = Новый ТаблицаЗначений;
	Для каждого Колонка Из РезультатЗапросаПоДокументам.Колонки Цикл
		ТаблицаДокументы.Колонки.Добавить(Колонка.Имя, Колонка.ТипЗначения);
	КонецЦикла;
	
	ТаблицаДокументы.Колонки.Добавить("СтрокаСчет",   Новый ОписаниеТипов("Строка"));
	ТаблицаДокументы.Колонки.Добавить("Валютный",     Новый ОписаниеТипов("Булево"));
	ТаблицаДокументы.Колонки.Добавить("ВидДокумента", Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(30)));
	
	ТипЧисло = ОбщегоНазначения.ОписаниеТипаЧисло(15, 2);
	
	РабочаяТаблица = Новый ТаблицаЗначений;
	РабочаяТаблица.Колонки.Добавить("Валюта",              Новый ОписаниеТипов("СправочникСсылка.Валюты"));
	РабочаяТаблица.Колонки.Добавить("ВалютаПредставление", Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(100)));
	РабочаяТаблица.Колонки.Добавить("ВалОстаток",          ТипЧисло);
	РабочаяТаблица.Колонки.Добавить("Остаток",             ТипЧисло);
	РабочаяТаблица.Колонки.Добавить("ВалПриход",           ТипЧисло);
	РабочаяТаблица.Колонки.Добавить("Приход",              ТипЧисло);
	РабочаяТаблица.Колонки.Добавить("ВалРасход",           ТипЧисло);
	РабочаяТаблица.Колонки.Добавить("Расход",              ТипЧисло);
	РабочаяТаблица.Индексы.Добавить("Валюта");
	
	ВыборкаПоВалюте = РезультатЗапросаПоИтогам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Валюта");
	Пока ВыборкаПоВалюте.Следующий() Цикл
		Если ЗначениеЗаполнено(ВыборкаПоВалюте.Валюта) Тогда
			Строка            = РабочаяТаблица.Добавить();
			Строка.Валюта     = ВыборкаПоВалюте.Валюта;
			Строка.ВалютаПредставление = Строка(ВыборкаПоВалюте.Валюта);
			Строка.Остаток    = ВыборкаПоВалюте.СуммаНачальныйОстатокДт;
			Строка.ВалОстаток = ВыборкаПоВалюте.ВалютнаяСуммаНачальныйОстатокДт;
		КонецЕсли;
	КонецЦикла;
	
	Строка        = РабочаяТаблица.Добавить();
	Строка.Валюта = Справочники.Валюты.ПустаяСсылка();
	
	ВыборкаОбщихИтогов = РезультатЗапросаПоИтогам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Общие");
	Если ВыборкаОбщихИтогов.Следующий() Тогда
		Строка.Остаток    = ВыборкаОбщихИтогов["СуммаНачальныйОстатокДт"] - РабочаяТаблица.Итог("Остаток");
		Строка.ВалОстаток = ВыборкаОбщихИтогов["ВалютнаяСуммаНачальныйОстатокДт"] - РабочаяТаблица.Итог("ВалОстаток");
	Иначе
		Строка.Остаток    = 0;
		Строка.ВалОстаток = 0;
	КонецЕсли;
	
	РабочаяТаблица.Сортировать("ВалютаПредставление");
	
	// Определяем последние дни месяцев за которые формируется кассовая книга
	СписокДней = Новый СписокЗначений;
	
	ВыборкаИтоговПоДням = РезультатЗапросаПоИтогам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Период");
	Пока ВыборкаИтоговПоДням.Следующий() Цикл
		СписокДней.Добавить(ВыборкаИтоговПоДням.Период);
	КонецЦикла;
	
	ВыборкаДокументовПоДням = РезультатЗапросаПоДокументам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "День");
	Пока ВыборкаДокументовПоДням.Следующий() Цикл
		СписокДней.Добавить(ВыборкаДокументовПоДням.День);
	КонецЦикла;
	
	СписокДней.СортироватьПоЗначению();
	КоличествоДней = СписокДней.Количество();
	
	// отработаем ручное задание начального номера
	Если НЕ ЗначениеЗаполнено(ДатаНачальногоЛиста) И КоличествоДней > 0 Тогда
		ПерваяДатаВСписке = СписокДней[0].Значение;
		Если ПерваяДатаВСписке > ПараметрыОтчета.НачалоПериода Тогда
			ТекНомера = РегистрыСведений.НомераЛистовКассовойКниги.СрезПоследних(ПерваяДатаВСписке, ОтборЛисты);
			ЛистНаНачало = ТекНомера.Найти(ПерваяДатаВСписке);
			Если ЛистНаНачало <> Неопределено И ЛистНаНачало.НомерЛиста <> ПараметрыОтчета.НомерЛистаНачало И ЛистНаНачало.НомерЛиста > 1 Тогда
				ДатаНачальногоЛиста = ПерваяДатаВСписке;
				ЛистовЗаГод = ЛистНаНачало.НомерЛиста - 1;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ПоследниеДниМесяцев = Новый Соответствие;
	Для й = 2 По КоличествоДней Цикл
		Если НачалоМесяца(СписокДней[й - 2].Значение) <> НачалоМесяца(СписокДней[й - 1].Значение) Тогда
			ПоследниеДниМесяцев.Вставить(СписокДней[й - 2].Значение, Истина);
		КонецЕсли;
	КонецЦикла;
	
	ПоследнийДеньПериода = ПараметрыОтчета.КонецПериода;
	Если КоличествоДней > 0 Тогда
		ПоследнийДеньПериода = СписокДней[КоличествоДней - 1].Значение;
	КонецЕсли;
	
	// Формирование листов кассовой книги
	
	ВыборкаИтоговПоДням     = РезультатЗапросаПоИтогам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам,     "Период");
	ВыборкаДокументовПоДням = РезультатЗапросаПоДокументам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "День");
	
	ПоПроводкам  = ВыборкаИтоговПоДням.Следующий();
	ПоДокументам = ВыборкаДокументовПоДням.Следующий();
	
	БылиОшибки   = Ложь;
	ВывестиЛисты = Ложь;
	
	ДатаДействияПриказа373П = '20120101';
	ТипПКО = Тип("ДокументСсылка.ПриходныйКассовыйОрдер");
	ТипРКО = Тип("ДокументСсылка.РасходныйКассовыйОрдер");
	СчетКурсовыхРазниц = ПланыСчетов.Хозрасчетный.ПрочиеДоходыИРасходы;
	
	СоответствиеЛистыТек = Новый Соответствие;
	
	Пока ПоПроводкам ИЛИ ПоДокументам Цикл
		Если НЕ ПоПроводкам Тогда
			ДатаЛиста = ВыборкаДокументовПоДням.День;
		ИначеЕсли НЕ ПоДокументам Тогда
			ДатаЛиста = ВыборкаИтоговПоДням.Период;
		Иначе
			ДатаЛиста = Мин(ВыборкаДокументовПоДням.День, ВыборкаИтоговПоДням.Период);
		КонецЕсли;
		
		Если ВыборкаИтоговПоДням.СуммаОборотДт = 0 И ВыборкаИтоговПоДням.СуммаОборотКт = 0 Тогда
			Если НЕ ПоДокументам ИЛИ ДатаЛиста <> ВыборкаДокументовПоДням.День Тогда
				ПоПроводкам = ВыборкаИтоговПоДням.Следующий();
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		НомерЛиста    = ЛистовЗаГод   + 1;
		ЛистовЗаГод   = ЛистовЗаГод   + 1;
		ЛистовЗаМесяц = ЛистовЗаМесяц + 1;
		
		КоличествоПриходныхДокументов = 0;
		КоличествоРасходныхДокументов = 0;
		
		Остаток = РабочаяТаблица.Итог("Остаток");
		Если ДатаЛиста >= ПараметрыОтчета.НачалоПериода Тогда
			ЗаголовокЛиста = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = '  КАССА за %1'"), Формат(ДатаЛиста, "ДФ=dd.MM.yyyy"));
			НомерЛистаСтр  = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Лист %1'"), НомерЛиста);
			Если ДатаЛиста < ДатаДействияПриказа373П Тогда
				ОбластьВкладнойЛистОтчет.Параметры.ЗаголовокЛиста = ЗаголовокЛиста;
				ДокументРезультат.Вывести(ОбластьВкладнойЛистОтчет);
				ОбластьОтчетКассираОтчет.Параметры.ЗаголовокЛиста = ЗаголовокЛиста;
				ДокументРезультат.Присоединить(ОбластьОтчетКассираОтчет);
				
				ОбластьШапкаОтчет.Параметры.ТекстНомерЛиста       = НомерЛистаСтр;
			Иначе
				ЗаголовокЛиста = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = '  КАССА за %1'"), Формат(ДатаЛиста, "ДЛФ=DD"));
				ЗаголовокЛиста373ПОтчет.Параметры.ЗаголовокЛиста  = ЗаголовокЛиста;
				ЗаголовокЛиста373ПОтчет.Параметры.ТекстНомерЛиста = НомерЛистаСтр;
				ДокументРезультат.Вывести(ЗаголовокЛиста373ПОтчет);
				ДокументРезультат.Присоединить(ЗаголовокЛиста373ПОтчет);
				
				ОбластьШапкаОтчет.Параметры.ТекстПлатежныйАгент   = "";
				ОбластьШапкаОтчет.Параметры.ТекстНомерЛиста       = "";
			КонецЕсли;
			
			Если ПараметрыОтчета.ПлатежныйАгент Тогда
				ОбластьШапкаОтчет.Параметры.ТекстПлатежныйАгент   = НСтр("ru = 'По деятельности платежного агента'");
			Иначе
				ОбластьШапкаОтчет.Параметры.ТекстПлатежныйАгент   = "";
			КонецЕсли;
			
			ДокументРезультат.Вывести(ОбластьШапкаОтчет);
			ДокументРезультат.Присоединить(ОбластьШапкаОтчет);
			
			ОбластьОстатокНаНДОтчет.Параметры.ОстатокНачало = Остаток;
			ДокументРезультат.Вывести(ОбластьОстатокНаНДОтчет);
			ДокументРезультат.Присоединить(ОбластьОстатокНаНДОтчет);
		КонецЕсли;
		
		ПоВалютам = Ложь;
		Для каждого Строка Из РабочаяТаблица Цикл
			Если (Строка.Остаток <> 0 ИЛИ Строка.ВалОстаток <> 0) И ЗначениеЗаполнено(Строка.Валюта) Тогда
				ПоВалютам = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
//		Высота каждой строки = 13 пунктов
//		На стандартную страницу помещается 59 строк
//		
//		Высоты секций в строках:
//		Шапка = 5 стр
//		ВкладнойЛист = 3 стр
//		ОтчетКассира = 3 стр
//		ОстатокНаНачало = 1 стр
//		ВТомЧисле = 1 стр
//		Остаток = 1 стр
//		ВалОстаток = 2 стр
//		КурсовыеРазницы = 2 стр
//		КурсовыеРазницыПоВалюте = 1 стр
//		Строка = 2 стр
//		СтрокаШирокая = 4 стр
//		СтрокаВал = 2 стр
//		СтрокаВалШирокая = 4 стр
//		Перенос = 1 стр
//		Оборот = 1 стр
//		ОборотРуб = 1 стр
//		ОборотВал = 2 стр
//		КурсоваяРазница = 1 стр
//		КурсоваяРазницаПоВалюте = 1 стр
//		КонечныйОстаток = 1 стр
//		Подвал = 11 стр
//		ЛистовЗаМесяц = 1 стр
//		ЛистовЗаГод = 1 стр
		
		ВысотаСтроки = ?(ПараметрыОтчета.ВыводитьОснования, 4, 2); // высота секции документа
		СтрокШапки   = 9;
		СтрокПодвала = 13;
		
		Если ПоВалютам Тогда
			Если ДатаЛиста >= ПараметрыОтчета.НачалоПериода Тогда
				ДокументРезультат.Вывести(ОбластьВТомЧислеОтчет);
				ДокументРезультат.Присоединить(ОбластьВТомЧислеОтчет);
			КонецЕсли;
			
			СтрокШапки = СтрокШапки + 1;
			
			Для каждого Строка Из РабочаяТаблица Цикл
				Валюта     = Строка.Валюта;
				РубОстаток = Строка.Остаток;
				ВалОстаток = Строка.ВалОстаток;
				Если НЕ ЗначениеЗаполнено(Строка.Валюта) И ДатаЛиста >= ПараметрыОтчета.НачалоПериода Тогда
					ОбластьОстатокОтчет.Параметры.ВалютаРеглУчета = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'национальная валюта (%1):'"), НаименованиеВалютыРеглУчета);
					ОбластьОстатокОтчет.Параметры.РеглОстаток = РубОстаток;
					
					ДокументРезультат.Вывести(ОбластьОстатокОтчет);
					ДокументРезультат.Присоединить(ОбластьОстатокОтчет);
					
					СтрокШапки = СтрокШапки + 1;
				Иначе
					Если (РубОстаток <> 0 ИЛИ ВалОстаток <> 0) И ДатаЛиста >= ПараметрыОтчета.НачалоПериода Тогда
						ОбластьВалОстатокОтчет.Параметры.ВалютаВалУчета = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru = 'иностранная валюта (%1):'"), СокрЛП(Валюта.НаименованиеПолное));
						ОбластьВалОстатокОтчет.Параметры.ВалОстатокРегл = РубОстаток;
						ОбластьВалОстатокОтчет.Параметры.ВалОстатокВал  = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru = '%1 %2'"), Формат(ВалОстаток, "ЧЦ=15; ЧДЦ=2; ЧРД=="), СокрЛП(Валюта.Наименование));
						
						ДокументРезультат.Вывести(ОбластьВалОстатокОтчет);
						ДокументРезультат.Присоединить(ОбластьВалОстатокОтчет);
						
						СтрокШапки = СтрокШапки + 2;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		ТаблицаДокументы.Очистить();
		Валюты = Новый СписокЗначений;
		
		Если ПоДокументам И ВыборкаДокументовПоДням.День = ДатаЛиста Тогда
			ВыборкаДокументов = ВыборкаДокументовПоДням.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Документ");
			Пока ВыборкаДокументов.Следующий() Цикл
				НоваяСтрока = ТаблицаДокументы.Добавить();
				НоваяСтрока.ВидДокумента = ?(ТипЗнч(ВыборкаДокументов.Документ) = ТипПКО, "ПриходныйОрдер", "РасходныйОрдер");
				НоваяСтрока.Документ     = ВыборкаДокументов.Документ;
				НоваяСтрока.ДатаДок      = ВыборкаДокументов.ДатаДок;
				НоваяСтрока.День         = ВыборкаДокументов.День;
				НоваяСтрока.НомерДок     = ВыборкаДокументов.НомерДок;
				НоваяСтрока.Валюта       = ВыборкаДокументов.Валюта;
				НоваяСтрока.Приход       = ВыборкаДокументов.Приход;
				НоваяСтрока.Расход       = ВыборкаДокументов.Расход;
				НоваяСтрока.Основание    = ВыборкаДокументов.Основание;
				НоваяСтрока.ТекстДок     = ВыборкаДокументов.ТекстДок;
				
				НоваяСтрока.Валютный = ВыборкаДокументов.Валюта <> ВалютаРегламентированногоУчета;
				Если НоваяСтрока.Валютный И Валюты.НайтиПоЗначению(ВыборкаДокументов.Валюта) = Неопределено Тогда
					Валюты.Добавить(ВыборкаДокументов.Валюта);
				КонецЕсли;
				
				ВыборкаСчетов = ВыборкаДокументов.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Счет");
				СписокСчетов  = Новый ТаблицаЗначений;
				СписокСчетов.Колонки.Добавить("Счет");
				Пока ВыборкаСчетов.Следующий() Цикл
					СтрокаТаблицыСчетов      = СписокСчетов.Добавить();
					СтрокаТаблицыСчетов.Счет = ВыборкаСчетов.Счет;
				КонецЦикла;
				
				СписокСчетов.Свернуть("Счет");
				
				СтрокаСчет = "";
				Для каждого СтрокаТаблицыСчетов Из СписокСчетов Цикл
					СтрокаСчет = СтрокаСчет + СтрокаТаблицыСчетов.Счет + Символы.ПС;
				КонецЦикла;
				
				НоваяСтрока.СтрокаСчет = СтрокаСчет;
			КонецЦикла;
		КонецЕсли;
		
		СумПриход    = 0;
		СумРасход    = 0;
		ПерваяСтрока = 1;
		Для каждого СтрокаТаблица Из РабочаяТаблица Цикл
			Если СтрокаТаблица.Валюта = Справочники.Валюты.ПустаяСсылка() Тогда
				Продолжить;
			КонецЕсли;
			
			Если ДатаЛиста <> НачалоДня(КонецМесяца(ДатаЛиста)) Тогда
				Если Валюты.НайтиПоЗначению(СтрокаТаблица.Валюта) = Неопределено Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			СтруктураКурсов = РаботаСКурсамиВалют.ПолучитьКурсВалюты(СтрокаТаблица.Валюта, ДатаЛиста);
			
			Курс      = СтруктураКурсов.Курс;
			Кратность = СтруктураКурсов.Кратность;
			Кратность = ?(Кратность = 0, 1, Кратность);
			
			КурсоваяРазница = Окр(СтрокаТаблица.ВалОстаток * Окр(Курс / Кратность, 4), 2, 1) - СтрокаТаблица.Остаток;
			Если КурсоваяРазница <> 0 Тогда
				Если ПерваяСтрока = 1 Тогда
					Если ДатаЛиста >= ПараметрыОтчета.НачалоПериода Тогда
						ДокументРезультат.Вывести(ОбластьКурсовыеРазницыОтчет);
						ДокументРезультат.Присоединить(ОбластьКурсовыеРазницыОтчет);
					КонецЕсли;
					
					СтрокШапки   = СтрокШапки + 2;
					ПерваяСтрока = 0;
				КонецЕсли;
				
				Валюта = СтрокаТаблица.Валюта;
				Приход = 0;
				Расход = 0;
				КоррСчет = СчетКурсовыхРазниц;
				Если КурсоваяРазница > 0 Тогда
					Приход    = КурсоваяРазница;
					СумПриход = СумПриход + КурсоваяРазница;
				Иначе
					Расход    = -КурсоваяРазница;
					СумРасход = СумРасход - КурсоваяРазница;
				КонецЕсли;
				
				СтрокаТаблица.Приход = СтрокаТаблица.Приход + Приход;
				СтрокаТаблица.Расход = СтрокаТаблица.Расход + Расход;
				Если ДатаЛиста >= ПараметрыОтчета.НачалоПериода Тогда
					ОбластьКурсовыеРазницыПоВалютеОтчет.Параметры.НадписьКРВалюта =
						СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'по %1'"), СокрЛП(Валюта.Наименование));
					ОбластьКурсовыеРазницыПоВалютеОтчет.Параметры.КоррСчет = КоррСчет;
					ОбластьКурсовыеРазницыПоВалютеОтчет.Параметры.Приход   = Приход;
					ОбластьКурсовыеРазницыПоВалютеОтчет.Параметры.Расход   = Расход;
					
					ДокументРезультат.Вывести(ОбластьКурсовыеРазницыПоВалютеОтчет);
					ДокументРезультат.Присоединить(ОбластьКурсовыеРазницыПоВалютеОтчет);
				КонецЕсли;
				
				СтрокШапки = СтрокШапки + 1;
			КонецЕсли;
		КонецЦикла;
		
		// Для простоты настройки печатной формы примем следующие соглашения:
		//	-   высота строк в таблице печатной формы задана жестко,
		//		тогда известно, сколько строк помещается на странице;
		СтрокНаСтранице = ?(ПараметрыОтчета.НачалоПериода >= '20150101', 59, 58);
		//	-   высота шапки и подвала задана жестко и кратна высоте строк таблицы,
		//		тогда можно указать, сколько строк занимают шапка и подвал
		//		в пересчете на строки таблицы;
		//	-   Количество строк шапки определено при выводе валюты в шапку;
		//	-   Количество строк подвала определим позже по количеству валют;
		//	-   для нормальной работы алгоритма необходимо, чтобы шапка и подвал
		//		могли поместиться на одной странице + хотя бы одна строка таблицы:
		//		СтрокНаСтранице >= СтрокШапки + СтрокПодвала + 1
		//	-   если подвал не помещается на странице, он переносится на другую
		//		страницу с последней строкой; исключение составляет случай,
		//		когда в таблице всего одна строка.
		
		// Резервирование строк для вывода сведений о валюте в подвале.
		// Найдем количество валют, по которым будет остаток в конце дня.
		КоличествоВалютВПодвале = РабочаяТаблица.Количество() - 1; // без рублей
		// Добавим валюты, по которым нет итогов, но по которым есть оборот,
		// введенный документами.
		Для каждого Валюта Из Валюты Цикл
			Если РабочаяТаблица.Найти(Валюта.Значение, "Валюта") = Неопределено Тогда
				КоличествоВалютВПодвале = КоличествоВалютВПодвале + 1;
			КонецЕсли;
		КонецЦикла;
		
		// По каждой валюте добавляется:
		//  2 строки для оборота;
		//  2 строки для остатка;
		//  1 строка под курсовую разницу.
		// Для рублей добавляется:
		//  1 строка для оборота;
		//  1 строка для остатка.
		// Добавляет строка для секции "КурсоваяРазница" и "ВТомЧисле".
		СтрокПодвала = СтрокПодвала + ?(КоличествоВалютВПодвале > 0, КоличествоВалютВПодвале * 5 + 4, 0);
		
		// Резервирование строк подвала для секции "ЛистовЗаМесяц" и "ЛистовЗаГод".
		// Согласно Указанию ЦБ РФ от 11.03.14 №3210-У выводить такие записи больше не требуется
		Если ДатаЛиста < '20150101' И ПоследниеДниМесяцев[ДатаЛиста] = Истина Тогда
			СтрокПодвала = СтрокПодвала + ?(ПараметрыОтчета.ПоследнийЛист > 0, ПараметрыОтчета.ПоследнийЛист, 0);
		КонецЕсли;
		
		// Если (ЦелыхСтраницСПодвалом - ЦелыхСтраницБезПодвала) = 1 - переносить,
		// если (ЦелыхСтраницСПодвалом - ЦелыхСтраницБезПодвала) = 0 - не надо переносить:
		Если (ТаблицаДокументы.Количество() * ВысотаСтроки) <= (СтрокНаСтранице - СтрокШапки - СтрокПодвала) Тогда
			ПереноситьПоследнююСтроку = Ложь;
		Иначе
			ЦелыхСтраницСПодвалом  = Цел(((СтрокШапки - 5) + ТаблицаДокументы.Количество() * ВысотаСтроки + СтрокПодвала - 1) / (СтрокНаСтранице - 5));
			ЦелыхСтраницБезПодвала = Цел(((СтрокШапки - 5) + ТаблицаДокументы.Количество() * ВысотаСтроки - 1) / (СтрокНаСтранице - 5));
			ПереноситьПоследнююСтроку = (ЦелыхСтраницСПодвалом - ЦелыхСтраницБезПодвала) = 1;
		КонецЕсли;
		
		КоличествоСтраниц    = 1;
		Индекс               = 1;
		ПрошлыйРазБылПеренос = Ложь;
		Для каждого Документ Из ТаблицаДокументы Цикл
			Если Документ.ВидДокумента = "ПриходныйОрдер" ИЛИ Документ.ВидДокумента = "РасходныйОрдер" Тогда
				ЕстьВалюта = Документ.Валютный;
			Иначе
				ЕстьВалюта = Ложь;
			КонецЕсли;
			
			Если ЕстьВалюта Тогда
				Валюта          = Документ.Валюта;
				СтруктураКурсов = РаботаСКурсамиВалют.ПолучитьКурсВалюты(Валюта, Документ.ДатаДок);
				Курс      = СтруктураКурсов.Курс;
				Кратность = СтруктураКурсов.Кратность;
				Кратность = ?(Кратность = 0, 1, Кратность);
			Иначе
				Валюта    = Справочники.Валюты.ПустаяСсылка();
				Курс      = 1;
				Кратность = 1;
			КонецЕсли;
			
			Если Документ.ВидДокумента = "РасходныйОрдер" Тогда
				Клиент = СокрЛП(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Выдано %1 %2'"),
					СокрЛП(Документ.ТекстДок),
					?(ПараметрыОтчета.ВыводитьОснования, Документ.Основание, "")));
				КоличествоРасходныхДокументов = КоличествоРасходныхДокументов + 1;
				ВалРасход = Документ.Расход;
				Расход    = Окр(Документ.Расход * Курс / Кратность, 2, 1);
				ВалПриход = 0;
				Приход    = 0;
			Иначе
				Клиент = СокрЛП(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Принято от %1 %2'"),
					СокрЛП(Документ.ТекстДок),
					?(ПараметрыОтчета.ВыводитьОснования, Документ.Основание, "")));
				КоличествоПриходныхДокументов = КоличествоПриходныхДокументов + 1;
				ВалПриход = Документ.Приход;
				Приход    = Окр(Документ.Приход * Курс / Кратность, 2, 1);
				ВалРасход = 0;
				Расход    = 0;
			КонецЕсли;
			
			НомерДокПечатнойФормы = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Документ.НомерДок, Истина, Ложь);
			КоррСчет = Документ.СтрокаСчет;
			
			// Начинаем новую страницу, если предыдущая строка была последней на странице
			// или пора переносить последнюю строку на последнюю страницу с подвалом.
			ЦелаяСтраница = Цел(((СтрокШапки - 5) + (КоличествоСтраниц - 1) + (Индекс * ВысотаСтроки) - 1) / (СтрокНаСтранице - 5));
			Если (ЦелаяСтраница = КоличествоСтраниц ИЛИ
					ПереноситьПоследнююСтроку И Индекс = ТаблицаДокументы.Количество())
					И НЕ ПрошлыйРазБылПеренос Тогда
				ПриходЗаДень = РабочаяТаблица.Итог("Приход");
				РасходЗаДень = РабочаяТаблица.Итог("Расход");
				Если ДатаЛиста >= ПараметрыОтчета.НачалоПериода Тогда
					ОбластьПереносОтчет.Параметры.ПриходЗаДень = ПриходЗаДень;
					ОбластьПереносОтчет.Параметры.РасходЗаДень = РасходЗаДень;
					ДокументРезультат.Вывести(ОбластьПереносОтчет);
					ДокументРезультат.Присоединить(ОбластьПереносОтчет);
				КонецЕсли;
				
				НомерЛиста        = НомерЛиста        + 1;
				КоличествоСтраниц = КоличествоСтраниц + 1;
				ЛистовЗаГод       = ЛистовЗаГод       + 1;
				ЛистовЗаМесяц     = ЛистовЗаМесяц     + 1;
				
				Если ДатаЛиста >= ПараметрыОтчета.НачалоПериода Тогда
					ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
					
					НомерЛистаДляПерехода = НомерЛиста - 1;
					ИмяОбласти = "Лист_" + Прав("0000000" + Формат(НомерЛистаДляПерехода, "ЧН=; ЧГ="), 7);
					ОбластьЛисты = ДокументРезультат.Область(1,, ДокументРезультат.ВысотаТаблицы,);
					ОбластьЛисты.Имя = ИмяОбласти;
					ОбластьЛисты.СоздатьФорматСтрок();
					ЛистыКассовойКниги.Вывести(ДокументРезультат);
					ПараметрыОтчета.СписокСформированныхЛистов.Добавить("3" + ИмяОбласти, "Лист " + Формат(НомерЛистаДляПерехода, "ЧН=; ЧГ="));
					
					ДокументРезультат = Новый ТабличныйДокумент;
					
					ОбластьШапкаОтчет.Параметры.ТекстНомерЛиста = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Лист %1'"), НомерЛиста);
					Если ДатаЛиста >= ДатаДействияПриказа373П Тогда
						ОбластьШапкаОтчет.Параметры.ТекстПлатежныйАгент = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru = '  КАССА за %1%2'"),
							Формат(ДатаЛиста, "ДЛФ=DD"),
							?(ПараметрыОтчета.ПлатежныйАгент, НСтр("ru = ' (по деятельности платежного агента)'"), ""));
					КонецЕсли;
					
					ДокументРезультат.Вывести(ОбластьШапкаОтчет);
					ДокументРезультат.Присоединить(ОбластьШапкаОтчет);
				КонецЕсли;
				
				ПрошлыйРазБылПеренос = Истина;
			Иначе
				ПрошлыйРазБылПеренос = Ложь;
			КонецЕсли;
			
			Если ДатаЛиста >= ПараметрыОтчета.НачалоПериода Тогда
				Если ЕстьВалюта Тогда
					Если ПараметрыОтчета.ВыводитьОснования Тогда
						ОбластьСтрокаВалШирокаяОтчет.Параметры.НомерДокПечатнойФормы = НомерДокПечатнойФормы;
						ОбластьСтрокаВалШирокаяОтчет.Параметры.Контрагент = Клиент;
						ОбластьСтрокаВалШирокаяОтчет.Параметры.КоррСчет   = КоррСчет;
						ОбластьСтрокаВалШирокаяОтчет.Параметры.Приход     = Приход;
						ОбластьСтрокаВалШирокаяОтчет.Параметры.Расход     = Расход;
						ОбластьСтрокаВалШирокаяОтчет.Параметры.ВалПриход  = ?(ВалПриход > 0,
							СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								НСтр("ru = '%1 %2'"), Формат(ВалПриход, "ЧЦ=15; ЧДЦ=2; ЧРД=="), СокрЛП(Валюта.Наименование)), "");
						ОбластьСтрокаВалШирокаяОтчет.Параметры.ВалРасход  = ?(ВалРасход > 0,
							СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								НСтр("ru = '%1 %2'"), Формат(ВалРасход, "ЧЦ=15; ЧДЦ=2; ЧРД=="), СокрЛП(Валюта.Наименование)), "");
						ОбластьСтрокаВалШирокаяОтчет.Параметры.Документ   = Документ.Документ;
						
						ДокументРезультат.Вывести(ОбластьСтрокаВалШирокаяОтчет);
						ДокументРезультат.Присоединить(ОбластьСтрокаВалШирокаяОтчет);
					Иначе
						ОбластьСтрокаВалОтчет.Параметры.НомерДокПечатнойФормы = НомерДокПечатнойФормы;
						ОбластьСтрокаВалОтчет.Параметры.Контрагент = Клиент;
						ОбластьСтрокаВалОтчет.Параметры.КоррСчет   = КоррСчет;
						ОбластьСтрокаВалОтчет.Параметры.Приход     = Приход;
						ОбластьСтрокаВалОтчет.Параметры.Расход     = Расход;
						ОбластьСтрокаВалОтчет.Параметры.ВалПриход  = ?(ВалПриход > 0,
							СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								НСтр("ru = '%1 %2'"), Формат(ВалПриход, "ЧЦ=15; ЧДЦ=2; ЧРД=="), СокрЛП(Валюта.Наименование)), "");
						ОбластьСтрокаВалОтчет.Параметры.ВалРасход  = ?(ВалРасход > 0,
							СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								НСтр("ru = '%1 %2'"), Формат(ВалРасход, "ЧЦ=15; ЧДЦ=2; ЧРД=="), СокрЛП(Валюта.Наименование)), "");
						
						ОбластьСтрокаВалОтчет.Параметры.Документ   = Документ.Документ;
						
						ДокументРезультат.Вывести(ОбластьСтрокаВалОтчет);
						ДокументРезультат.Присоединить(ОбластьСтрокаВалОтчет);
					КонецЕсли;
				Иначе
					Если ПараметрыОтчета.ВыводитьОснования Тогда
						ОбластьСтрокаШирокаяОтчет.Параметры.НомерДокПечатнойФормы = НомерДокПечатнойФормы;
						ОбластьСтрокаШирокаяОтчет.Параметры.Контрагент = Клиент;
						ОбластьСтрокаШирокаяОтчет.Параметры.КоррСчет   = КоррСчет;
						ОбластьСтрокаШирокаяОтчет.Параметры.Приход     = Приход;
						ОбластьСтрокаШирокаяОтчет.Параметры.Расход     = Расход;
						ОбластьСтрокаШирокаяОтчет.Параметры.Документ   = Документ.Документ;
						
						ДокументРезультат.Вывести(ОбластьСтрокаШирокаяОтчет);
						ДокументРезультат.Присоединить(ОбластьСтрокаШирокаяОтчет);
					Иначе
						ОбластьСтрокаОтчет.Параметры.НомерДокПечатнойФормы = НомерДокПечатнойФормы;
						ОбластьСтрокаОтчет.Параметры.Контрагент = Клиент;
						ОбластьСтрокаОтчет.Параметры.КоррСчет   = КоррСчет;
						ОбластьСтрокаОтчет.Параметры.Приход     = Приход;
						ОбластьСтрокаОтчет.Параметры.Расход     = Расход;
						ОбластьСтрокаОтчет.Параметры.Документ   = Документ.Документ;
						
						ДокументРезультат.Вывести(ОбластьСтрокаОтчет);
						ДокументРезультат.Присоединить(ОбластьСтрокаОтчет);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			ДобавитьОбороты(РабочаяТаблица, Валюта, ВалПриход, Приход, ВалРасход, Расход);
			Индекс = Индекс + 1;
		КонецЦикла;
		
		ПриходЗаДень = РабочаяТаблица.Итог("Приход");
		РасходЗаДень = РабочаяТаблица.Итог("Расход");
		Если ДатаЛиста >= ПараметрыОтчета.НачалоПериода Тогда
			ОбластьОборотОтчет.Параметры.ПриходЗаДень = ПриходЗаДень;
			ОбластьОборотОтчет.Параметры.РасходЗаДень = РасходЗаДень;
			
			ДокументРезультат.Вывести(ОбластьОборотОтчет);
			ДокументРезультат.Присоединить(ОбластьОборотОтчет);
			
			ПоВалютам = Ложь;
			Для каждого Строка Из РабочаяТаблица Цикл
				Если ЗначениеЗаполнено(Строка.Валюта)
					И (Строка.ВалПриход <> 0 ИЛИ Строка.Приход <> 0
						ИЛИ Строка.ВалРасход <> 0 ИЛИ Строка.Расход <> 0) Тогда
					ПоВалютам = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если ПоВалютам Тогда
				Для каждого Строка Из РабочаяТаблица Цикл
					Валюта = Строка.Валюта;
					ВалПриходЗаДень = Строка.ВалПриход;
					РубПриходЗаДень = Строка.Приход;
					ВалРасходЗаДень = Строка.ВалРасход;
					РубРасходЗаДень = Строка.Расход;
					Если НЕ ЗначениеЗаполнено(Строка.Валюта) Тогда
						ОбластьОборотРубОтчет.Параметры.РеглПриходЗаДень = РубПриходЗаДень;
						ОбластьОборотРубОтчет.Параметры.РеглРасходЗаДень = РубРасходЗаДень;
						ОбластьОборотРубОтчет.Параметры.ВалютаРеглУчета  = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru = 'национальная валюта (%1):'"), НаименованиеВалютыРеглУчета);
						
						ДокументРезультат.Вывести(ОбластьОборотРубОтчет);
						ДокументРезультат.Присоединить(ОбластьОборотРубОтчет);
					Иначе
						Если ВалПриходЗаДень <> 0 ИЛИ РубПриходЗаДень <> 0
							 ИЛИ ВалРасходЗаДень <> 0 ИЛИ РубРасходЗаДень <> 0 Тогда
							ОбластьОборотВалОтчет.Параметры.ВалютаВалУчета = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								НСтр("ru = 'иностранная валюта (%1):'"), СокрЛП(Валюта.НаименованиеПолное));
							ОбластьОборотВалОтчет.Параметры.ВалПриходЗаДеньРегл = РубПриходЗаДень;
							ОбластьОборотВалОтчет.Параметры.ВалРасходЗаДеньРегл = РубРасходЗаДень;
							ОбластьОборотВалОтчет.Параметры.ВалПриходЗаДеньВал  = ?(ВалПриходЗаДень > 0,
								Формат(ВалПриходЗаДень, "ЧЦ=15; ЧДЦ=2; ЧРД==") + " " + СокрЛП(Валюта), 0);
							ОбластьОборотВалОтчет.Параметры.ВалРасходЗаДеньВал  = ?(ВалРасходЗаДень > 0,
								Формат(ВалРасходЗаДень, "ЧЦ=15; ЧДЦ=2; ЧРД==") + " " + СокрЛП(Валюта), 0);
							
							ДокументРезультат.Вывести(ОбластьОборотВалОтчет);
							ДокументРезультат.Присоединить(ОбластьОборотВалОтчет);
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		ПерваяСтрока = Истина;
		Остаток      = Остаток + ПриходЗаДень - РасходЗаДень;
		Для каждого Строка Из РабочаяТаблица Цикл
			Если НЕ ЗначениеЗаполнено(Строка.Валюта) Тогда
				Продолжить;
			КонецЕсли;
			
			Если ДатаЛиста <> НачалоДня(КонецМесяца(ДатаЛиста)) Тогда
				Если Валюты.НайтиПоЗначению(Строка.Валюта) = Неопределено Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			СтруктураКурсов = РаботаСКурсамиВалют.ПолучитьКурсВалюты(Строка.Валюта, ДатаЛиста);
			
			Курс      = СтруктураКурсов.Курс;
			Кратность = СтруктураКурсов.Кратность;
			Кратность = ?(Кратность = 0, 1, Кратность);
			
			// Отбрасываем отклонение пересчета рублевого покрытия менее чем 0.5 копейки, т.к. это меньше погрешности округления до 2 знаков.
			КурсоваяРазница = Окр((Строка.ВалОстаток + Строка.ВалПриход - Строка.ВалРасход) * Курс / Кратность, 2, 1)
				- Строка.Остаток - Строка.Приход + Строка.Расход;
			
			Если КурсоваяРазница <> 0 Тогда
				Если ПерваяСтрока Тогда
					Если ДатаЛиста >= ПараметрыОтчета.НачалоПериода Тогда
						ДокументРезультат.Вывести(ОбластьКурсоваяРазницаОтчет);
						ДокументРезультат.Присоединить(ОбластьКурсоваяРазницаОтчет);
					КонецЕсли;
					
					ПерваяСтрока = Ложь;
				КонецЕсли;
				
				Валюта       = Строка.Валюта;
				ПриходЗаДень = 0;
				РасходЗаДень = 0;
				Если КурсоваяРазница > 0 Тогда
					ПриходЗаДень  = КурсоваяРазница;
					Строка.Приход = Строка.Приход + КурсоваяРазница;
				Иначе
					РасходЗаДень  = -КурсоваяРазница;
					Строка.Расход = Строка.Расход - КурсоваяРазница;
				КонецЕсли;
				
				Если ДатаЛиста >= ПараметрыОтчета.НачалоПериода Тогда
					ОбластьКурсоваяРазницаПоВалютеОтчет.Параметры.Валюта       = Валюта;
					ОбластьКурсоваяРазницаПоВалютеОтчет.Параметры.ПриходЗаДень = ПриходЗаДень;
					ОбластьКурсоваяРазницаПоВалютеОтчет.Параметры.РасходЗаДень = РасходЗаДень;
					
					ДокументРезультат.Вывести(ОбластьКурсоваяРазницаПоВалютеОтчет);
					ДокументРезультат.Присоединить(ОбластьКурсоваяРазницаПоВалютеОтчет);
				КонецЕсли;
				
				Остаток = Остаток + КурсоваяРазница;
			КонецЕсли;
		КонецЦикла;
		
		Если ДатаЛиста >= ПараметрыОтчета.НачалоПериода Тогда
			ОбластьКонечныйОстатокОтчет.Параметры.ОстатокКонец = Остаток;
			
			ДокументРезультат.Вывести(ОбластьКонечныйОстатокОтчет);
			ДокументРезультат.Присоединить(ОбластьКонечныйОстатокОтчет);
			
			ПоВалютам = Ложь;
			Для каждого Строка Из РабочаяТаблица Цикл
				Если ЗначениеЗаполнено(Строка.Валюта)
					И (Строка.Остаток + Строка.Приход - Строка.Расход <> 0
						ИЛИ Строка.ВалОстаток + Строка.ВалПриход - Строка.ВалРасход <> 0) Тогда
					ПоВалютам = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если ПоВалютам Тогда
				ДокументРезультат.Вывести(ОбластьВТомЧислеОтчет);
				ДокументРезультат.Присоединить(ОбластьВТомЧислеОтчет);
				
				Для каждого Строка Из РабочаяТаблица Цикл
					Валюта     = Строка.Валюта;
					РубОстаток = Строка.Остаток + Строка.Приход - Строка.Расход;
					ВалОстаток = Строка.ВалОстаток + Строка.ВалПриход - Строка.ВалРасход;
					Если НЕ ЗначениеЗаполнено(Строка.Валюта) Тогда
						ОбластьОстатокОтчет.Параметры.ВалютаРеглУчета = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru = 'национальная валюта (%1):'"), НаименованиеВалютыРеглУчета);
						ОбластьОстатокОтчет.Параметры.РеглОстаток     = РубОстаток;
						
						ДокументРезультат.Вывести(ОбластьОстатокОтчет);
						ДокументРезультат.Присоединить(ОбластьОстатокОтчет);
					Иначе
						Если РубОстаток <> 0 ИЛИ ВалОстаток <> 0 Тогда
							ОбластьВалОстатокОтчет.Параметры.ВалютаВалУчета = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								НСтр("ru = 'иностранная валюта (%1):'"), СокрЛП(Валюта.НаименованиеПолное));
							ОбластьВалОстатокОтчет.Параметры.ВалОстатокРегл = РубОстаток;
							ОбластьВалОстатокОтчет.Параметры.ВалОстатокВал  = Формат(ВалОстаток,
								"ЧЦ=15; ЧДЦ=2; ЧРД==") + " " + СокрЛП(Валюта.Наименование);
							
							ДокументРезультат.Вывести(ОбластьВалОстатокОтчет);
							ДокументРезультат.Присоединить(ОбластьВалОстатокОтчет);
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			ОбластьПодвалОтчет.Параметры.НадписьКолПриходныхРасходных = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = '%1 и %2 получил.'"),
				?(КоличествоПриходныхДокументов > 0,
					ЧислоПрописью(КоличествоПриходныхДокументов, "Л = ru_RU; НД = Ложь", "приходный,приходных,приходных,м,,,,,0"),
					" - "),
				?(КоличествоРасходныхДокументов > 0,
					ЧислоПрописью(КоличествоРасходныхДокументов, "Л = ru_RU; НД = Ложь", "расходный,расходных,расходных,м,,,,,0"),
					" - "));
			
			ОтветственныеЛица = ПолучитьОтветственныеЛицаКассовойКниги(ПараметрыОтчета, ОтветственныеЛица, КонецДня(ДатаЛиста));
			
			ОбластьПодвалОтчет.Параметры.ГлБухгалтер = ОтветственныеЛица.ГлавныйБухгалтерПредставление;
			ОбластьПодвалОтчет.Параметры.Кассир      = ОтветственныеЛица.КассирПредставление;
			
			ДокументРезультат.Вывести(ОбластьПодвалОтчет);
			ДокументРезультат.Присоединить(ОбластьПодвалОтчет);
		КонецЕсли;
		
		Ошибка      = Ложь;
		Сортировать = Ложь;
		ВыборкаПоВалюте = ВыборкаИтоговПоДням.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Валюта");
		Пока ВыборкаПоВалюте.Следующий() Цикл
			Если ЗначениеЗаполнено(ВыборкаПоВалюте.Валюта) Тогда
				Строка = РабочаяТаблица.Найти(ВыборкаПоВалюте.Валюта, "Валюта");
				Если Строка = Неопределено Тогда
					Строка        = РабочаяТаблица.Добавить();
					Строка.Валюта = ВыборкаПоВалюте.Валюта;
					Строка.ВалютаПредставление = Строка(ВыборкаПоВалюте.Валюта);
					Сортировать   = Истина;
				КонецЕсли;
				
				Если Строка.ВалОстаток + Строка.ВалПриход - Строка.ВалРасход <> ВыборкаПоВалюте.ВалютнаяСуммаКонечныйОстатокДт
					 ИЛИ Строка.Остаток + Строка.Приход - Строка.Расход <> ВыборкаПоВалюте.СуммаКонечныйОстатокДт Тогда
					Ошибка = Истина;
				КонецЕсли;
				
				Строка.ВалОстаток = ВыборкаПоВалюте.ВалютнаяСуммаКонечныйОстатокДт;
				Строка.Остаток    = ВыборкаПоВалюте.СуммаКонечныйОстатокДт;
			КонецЕсли;
		КонецЦикла;
		
		Строка = РабочаяТаблица.Найти(Справочники.Валюты.ПустаяСсылка(), "Валюта");
		Если Строка = Неопределено Тогда
			Строка        = РабочаяТаблица.Добавить();
			Строка.Валюта = Справочники.Валюты.ПустаяСсылка();
			Сортировать   = Истина;
		Иначе
			Строка.Остаток = 0;
		КонецЕсли;
		
		Если ДатаЛиста = ВыборкаИтоговПоДням.Период Тогда
			Строка.Остаток = ВыборкаИтоговПоДням.СуммаКонечныйОстатокДт - РабочаяТаблица.Итог("Остаток");
			Если Остаток <> ВыборкаИтоговПоДням.СуммаКонечныйОстатокДт Тогда
				Ошибка = Истина;
			КонецЕсли;
		Иначе
			Если ПоПроводкам Тогда
				Строка.Остаток = ВыборкаИтоговПоДням.СуммаНачальныйОстатокДт - РабочаяТаблица.Итог("Остаток");
				Если Остаток <> ВыборкаИтоговПоДням.СуммаНачальныйОстатокДт Тогда
					Ошибка = Истина;
				КонецЕсли;
			Иначе
				Строка.Остаток = -РабочаяТаблица.Итог("Остаток");
				Если Остаток <> 0 Тогда
					Ошибка = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если Ошибка Тогда
			ДатыЛистовСОшибками.Добавить(ДатаЛиста);
		КонецЕсли;
		
		Если Сортировать Тогда
			РабочаяТаблица.Сортировать("ВалютаПредставление");
		КонецЕсли;
		
		РабочаяТаблица.ЗаполнитьЗначения(0, "ВалПриход, Приход, ВалРасход, Расход");
		
		Если ПоПроводкам И ДатаЛиста = ВыборкаИтоговПоДням.Период Тогда
			ПоПроводкам = ВыборкаИтоговПоДням.Следующий();
		КонецЕсли;
		
		Если ПоДокументам И ДатаЛиста = ВыборкаДокументовПоДням.День Тогда
			ПоДокументам = ВыборкаДокументовПоДням.Следующий();
		КонецЕсли;
		
		// Если лист последний в текущем месяце, то выведем количество листов.
		// Согласно Указанию ЦБ РФ от 11.03.14 №3210-У выводить такие записи больше не требуется
		Если ДатаЛиста < '20150101' И ПоследниеДниМесяцев[ДатаЛиста] = Истина И ДатаЛиста >= ПараметрыОтчета.НачалоПериода Тогда
			ОбластьЛистовЗаМесяцОтчет.Параметры.НадписьЛистовЗаМесяц = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Количество листов кассовой книги за месяц: %1'"),
				ЛистовЗаМесяц);
			ДокументРезультат.Вывести(ОбластьЛистовЗаМесяцОтчет);
			ДокументРезультат.Присоединить(ОбластьЛистовЗаМесяцОтчет);
			
			ЛистовЗаМесяц = 0;
		КонецЕсли;
		
		Если ПоПроводкам
			И ВыборкаИтоговПоДням.Период = НачалоДня(ПараметрыОтчета.КонецПериода)
			И ВыборкаИтоговПоДням.СуммаОборотДт = 0
			И ВыборкаИтоговПоДням.СуммаОборотКт = 0 Тогда
			ПоПроводкам = ВыборкаИтоговПоДням.Следующий();
		КонецЕсли;
		
		ВывестиЛисты = Истина;
		
		// Согласно Указанию ЦБ РФ от 11.03.14 №3210-У выводить такие записи больше не требуется
		Если ДатаЛиста < '20150101'
			И (ДатаЛиста = ПоследнийДеньПериода ИЛИ НЕ ПоПроводкам И НЕ ПоДокументам) Тогда
			Если ПараметрыОтчета.ПоследнийЛист > 0 И ЛистовЗаМесяц > 0 Тогда
				ОбластьЛистовЗаМесяцОтчет.Параметры.НадписьЛистовЗаМесяц = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Количество листов кассовой книги за месяц: %1'"),
				ЛистовЗаМесяц);
				ДокументРезультат.Вывести(ОбластьЛистовЗаМесяцОтчет);
				ДокументРезультат.Присоединить(ОбластьЛистовЗаМесяцОтчет);
			КонецЕсли;
			
			Если ПараметрыОтчета.ПоследнийЛист = 2 Тогда
				Если ЛистовЗаГод > 0 Тогда
					ОбластьЛистовЗаГодОтчет.Параметры.НадписьЛистовЗаГод = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Количество листов кассовой книги за год: %1'"),
					ЛистовЗаГод);
					ДокументРезультат.Вывести(ОбластьЛистовЗаГодОтчет);
					ДокументРезультат.Присоединить(ОбластьЛистовЗаГодОтчет);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если ПоПроводкам ИЛИ ПоДокументам Тогда
			ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ИмяОбласти = "Лист_" + Прав("0000000" + Формат(НомерЛиста, "ЧН=; ЧГ="), 7);
		ОбластьЛисты = ДокументРезультат.Область(1,, ДокументРезультат.ВысотаТаблицы,);
		ОбластьЛисты.Имя = ИмяОбласти;
		ОбластьЛисты.СоздатьФорматСтрок();
		ДокументРезультат.ТолькоПросмотр = Истина;
		ЛистыКассовойКниги.Вывести(ДокументРезультат);
		ПараметрыОтчета.СписокСформированныхЛистов.Добавить("3" + ИмяОбласти, "Лист " + Формат(НомерЛиста, "ЧН=; ЧГ="));
		
		ДокументРезультат = Новый ТабличныйДокумент;
		СоответствиеЛистыТек.Вставить(ДатаЛиста, НомерЛиста);
	КонецЦикла;
	
	СведенияОНарушеннойНумерации = РегистрыСведений.НомераЛистовКассовойКниги.ПроверитьИзменитьНумерацию(ПараметрыОтчета,
		СписокПодразделений, НумерацияЛистовИзменилась, ДатаНачальногоЛиста, СоответствиеЛистыТек);
	
	Если СведенияОНарушеннойНумерации.СтекСообщенийОНумерации.Количество() > 0 Тогда
		ОповеститьОПроблемеСНумерацией(ТабличныйДокумент, ПараметрыОтчета, СведенияОНарушеннойНумерации);
		ПоказатьОповещениеОНумерации = Истина;
	КонецЕсли;
	
	// Печать обложки и титульного листа
	СформироватьОбложку(ТабличныйДокумент, ПараметрыОтчета, ДатаЛиста, ПредставлениеПодразделения);
	
	Если ВывестиЛисты Тогда
		ТабличныйДокумент.Вывести(ЛистыКассовойКниги);
	КонецЕсли;
	
	// Последний лист кассовой книги
	СформироватьЗавершающийЛист(ТабличныйДокумент, ПараметрыОтчета, ЛистовЗаГод, ОтветственныеЛица);
	
	ПараметрыОтчета.СписокСформированныхЛистов.СортироватьПоЗначению();
	ТабличныйДокумент.ОтображатьСетку     = Ложь;
	ТабличныйДокумент.ОтображатьЗаголовки = Ложь;
	ТабличныйДокумент.ТолькоПросмотр      = Истина;
	ПараметрыОтчета.Вставить("ТабличныйДокумент", ТабличныйДокумент);
	
КонецПроцедуры // СформироватьЛистыКассовойКниги

Процедура СформироватьОбложку(ТабличныйДокумент, ПараметрыОтчета, ДатаЛиста, ПредставлениеПодразделения)
	
	Если НЕ ПараметрыОтчета.СформироватьОбложку Тогда
		Возврат;
	КонецЕсли;
	
	ИмяОбласти      = "Обложка";
	Обложка         = Новый ТабличныйДокумент;
	МакетОбложка    = ПолучитьМакет("Обложка");
	ОбластьОбложка  = МакетОбложка.ПолучитьОбласть(ИмяОбласти + "|Отчет");
	УстановитьПривилегированныйРежим(Истина);
	СведенияОбОрганизации    = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(ПараметрыОтчета.Организация, ПараметрыОтчета.КонецПериода);
	ПредставлениеОрганизации = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОбОрганизации,
		"НаименованиеДляПечатныхФорм,");
	УстановитьПривилегированныйРежим(Ложь);
	
	ОбластьОбложка.Параметры.НазваниеОрганизации   = ПредставлениеОрганизации;
	ОбластьОбложка.Параметры.НазваниеПодразделения = ПредставлениеПодразделения;
	
	Если ПараметрыОтчета.ПлатежныйАгент Тогда
		Если ЗначениеЗаполнено(ПредставлениеПодразделения) Тогда
			ОбластьОбложка.Параметры.НазваниеПодразделения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = '%1
				|По деятельности платежного агента'"),
				ПредставлениеПодразделения);
		Иначе
			ОбластьОбложка.Параметры.НазваниеПодразделения = НСтр("ru = 'По деятельности платежного агента'");
		КонецЕсли;
	КонецЕсли;
	
	ОбластьОбложка.Параметры.НадписьОбложка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = ' на %1 г.'"), Формат(ДатаЛиста, "ДФ=yyyy"));
	ОбластьОбложка.Параметры.КодОКПО = СведенияОбОрганизации.КодПоОКПО;
	
	Обложка.Вывести(ОбластьОбложка);
	Обложка.Присоединить(ОбластьОбложка);
	ОблОбложка = Обложка.Область(1,, Обложка.ВысотаТаблицы,);
	ОблОбложка.Имя = ИмяОбласти;
	ОблОбложка.СоздатьФорматСтрок();
	
	ТабличныйДокумент.Вывести(Обложка);
	ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
	
	ПараметрыОтчета.СписокСформированныхЛистов.Добавить("1" + ИмяОбласти, "Обложка");
	
КонецПроцедуры

Процедура СформироватьЗавершающийЛист(ТабличныйДокумент, ПараметрыОтчета, ЛистовЗаГод, ОтветственныеЛица)
	
	Если НЕ ПараметрыОтчета.СформироватьОбложку Тогда
		Возврат;
	КонецЕсли;
	
	ИмяОбласти   = "ПослДеньГода";
	ПослДеньГода = Новый ТабличныйДокумент;
	МакетОбложка = ПолучитьМакет("Обложка");
	ОбластьПослДеньГода = МакетОбложка.ПолучитьОбласть(ИмяОбласти + "|ОтчетПодвал");
	
	ОтветственныеЛица = ОтветственныеЛицаБП.ОтветственныеЛица(ПараметрыОтчета.Организация, КонецДня(ПараметрыОтчета.КонецПериода));
	
	ОбластьПослДеньГода.Параметры.ГлБухгалтер           = ОтветственныеЛица.ГлавныйБухгалтерПредставление;
	ОбластьПослДеньГода.Параметры.Руководитель          = ОтветственныеЛица.РуководительПредставление;
	ОбластьПослДеньГода.Параметры.РуководительДолжность = ОтветственныеЛица.РуководительДолжностьПредставление;
	
	ОбластьПослДеньГода.Параметры.ЛистовЗаГод           = ЛистовЗаГод;
	
	ПослДеньГода.Вывести(ОбластьПослДеньГода);
	ОблПослДеньГода = ПослДеньГода.Область(1,, ПослДеньГода.ВысотаТаблицы,);
	ОблПослДеньГода.Имя = ИмяОбласти;
	ОблПослДеньГода.СоздатьФорматСтрок();
	
	ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
	ТабличныйДокумент.Вывести(ПослДеньГода);
	
	ПараметрыОтчета.СписокСформированныхЛистов.Добавить("2" + ИмяОбласти, "Завершающий лист");
	
КонецПроцедуры

Функция ПолучитьОтветственныеЛицаКассовойКниги(Параметры, ТекущиеОтветственные = Неопределено, ДатаСреза)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Результат = Новый Структура("
		|РуководительПредставление, РуководительДолжностьПредставление,
		|ГлавныйБухгалтерПредставление,
		|КассирПредставление",
		"", "", "", "");
	
	Если ТекущиеОтветственные <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(Результат, ТекущиеОтветственные);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Параметры.ГлавныйБухгалтер) Тогда
		ДанныеГлБухгалтера = УчетЗарплаты.ДанныеФизическихЛиц(Параметры.Организация, Параметры.ГлавныйБухгалтер, ДатаСреза);
		Результат.ГлавныйБухгалтерПредставление = ДанныеГлБухгалтера.Представление;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Параметры.Кассир) Тогда
		ДанныеКассира = УчетЗарплаты.ДанныеФизическихЛиц(Параметры.Организация, Параметры.Кассир, ДатаСреза);
		Результат.КассирПредставление = ДанныеКассира.Представление;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ОповеститьОПроблемеСНумерацией(ТабличныйДокумент, Знач ПараметрыОтчета, Знач СведенияОНарушеннойНумерации)
	
	ТаблицаОповещение = Новый ТабличныйДокумент;
	МакетОповещенияОПроблеме = ПолучитьМакет("ОповеститьОПроблеме");
	ОбластьОповещения        = МакетОповещенияОПроблеме.ПолучитьОбласть("ОповеститьОПроблеме");
	РасшифровкаЯчейки = Новый Структура("НачалоПериода, КонецПериода");
	ЗаполнитьЗначенияСвойств(РасшифровкаЯчейки, ПараметрыОтчета);
	
	Если СведенияОНарушеннойНумерации.РазницаЛистовДоЭтого <> 0 Тогда
		РасшифровкаЯчейки.НачалоПериода = НачалоГода(ПараметрыОтчета.НачалоПериода);
		РасшифровкаЯчейки.Вставить("ПоследнийЛист", 2);
	ИначеЕсли ЗначениеЗаполнено(СведенияОНарушеннойНумерации.ДатаПервогоЛистаСНарушеннойНумерацией) Тогда
		РасшифровкаЯчейки.НачалоПериода = СведенияОНарушеннойНумерации.ДатаПервогоЛистаСНарушеннойНумерацией;
	КонецЕсли;
	
	Если СведенияОНарушеннойНумерации.ДатаПоследнегоЛиста > ПараметрыОтчета.КонецПериода Тогда
		РасшифровкаЯчейки.КонецПериода = СведенияОНарушеннойНумерации.ДатаПоследнегоЛиста;
		РасшифровкаЯчейки.Вставить("ПоследнийЛист", 2);
	КонецЕсли;
	
	ПериодОтличается =  РасшифровкаЯчейки.НачалоПериода <> ПараметрыОтчета.НачалоПериода
					ИЛИ РасшифровкаЯчейки.КонецПериода  <> ПараметрыОтчета.КонецПериода;
	
	Если ПериодОтличается Тогда
		ТекстОповещения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Номера листов кассовой книги за период: с %1 по %2 отличаются от ранее сформированных.'"),
		Формат(РасшифровкаЯчейки.НачалоПериода, "ДФ=dd.MM.yy"), Формат(РасшифровкаЯчейки.КонецПериода, "ДФ=dd.MM.yy"));
	Иначе
		ТекстОповещения = НСтр("ru = 'Номера листов кассовой книги за указанный период отличаются от ранее сформированных.'");
	КонецЕсли;
	
	ОбластьОповещения.Параметры.ТекстОповещения        = ТекстОповещения;
	ОбластьОповещения.Параметры.ГраницыПересчетаЛистов = РасшифровкаЯчейки;
	
	ТаблицаОповещение.Вывести(ОбластьОповещения);
	ОбластьПредупреждения = ТаблицаОповещение.Область(1,, ТаблицаОповещение.ВысотаТаблицы,);
	ОбластьПредупреждения.Имя = "ОповеститьОПроблеме";
	ОбластьПредупреждения.СоздатьФорматСтрок();
	
	ТабличныйДокумент.Вывести(ТаблицаОповещение);
	
КонецПроцедуры

#КонецЕсли