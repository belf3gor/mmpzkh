#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Инициализирует набор параметров, задающих флаги выполнения дополнительных действий над сущностями, обрабатываемыми
// в процессе формирования отчета.
//
// Возвращаемое значение:
//   Структура   - флаги, задающие необходимость дополнительных действий.
//
Функция ПолучитьПараметрыИсполненияОтчета() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ИспользоватьПередКомпоновкойМакета", Истина);
	Результат.Вставить("ИспользоватьПослеКомпоновкиМакета",  Истина);
	Результат.Вставить("ИспользоватьПослеВыводаРезультата",  Истина);
	Результат.Вставить("ИспользоватьДанныеРасшифровки",      Истина);
	Результат.Вставить("ПроверкаИтогов",                     Истина);

	Возврат Результат;

КонецФункции

// Формирует текст, выводимый в заголовке отчета.
//
// Параметры:
//  ПараметрыОтчета - Структура - см. ПодготовитьПараметрыОтчета() в ФормаОтчета.
//
// Возвращаемое значение:
//   Строка      - текст заголовка с учетом периода.
//
Функция ПолучитьТекстЗаголовка(ПараметрыОтчета) Экспорт 
	
	Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Обороты счета %1%2'"),
		ПараметрыОтчета.Счет,
		БухгалтерскиеОтчетыКлиентСервер.ПолучитьПредставлениеПериода(ПараметрыОтчета.НачалоПериода, ПараметрыОтчета.КонецПериода));
	
КонецФункции

// В процедуре можно доработать компоновщик перед выводом в отчет. Изменения сохранены не будут.
//
// Параметры:
//  ПараметрыОтчета - Структура - см. ПодготовитьПараметрыОтчета() в ФормаОтчета.
//  Схема        - СхемаКомпоновкиДанных - описание получаемых данных.
//  КомпоновщикНастроек - КомпоновщикНастроекКомпоновкиДанных - связь настроек компоновки данных и схемы компоновки.
//
Процедура ПередКомпоновкойМакета(ПараметрыОтчета, Схема, КомпоновщикНастроек) Экспорт
	
	КомпоновщикНастроек.Настройки.Структура.Очистить();
	КомпоновщикНастроек.Настройки.Выбор.Элементы.Очистить();
	
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек,
		"Счет", БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПараметрыОтчета.Счет));
	
	ИзменитьСхемуДляОтборовПоСубконтоСубсчетов(ПараметрыОтчета, Схема, КомпоновщикНастроек);
	
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "Периодичность", ПараметрыОтчета.Периодичность);
	
	Если ЗначениеЗаполнено(ПараметрыОтчета.НачалоПериода) Тогда
		БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "НачалоПериода", НачалоДня(ПараметрыОтчета.НачалоПериода));
	КонецЕсли;
	Если ЗначениеЗаполнено(ПараметрыОтчета.КонецПериода) Тогда
		БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "КонецПериода", КонецДня(ПараметрыОтчета.КонецПериода));
		БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "ПараметрПериод", КонецДня(ПараметрыОтчета.КонецПериода));
	Иначе
		БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "ПараметрПериод", КонецДня(ТекущаяДатаСеанса()));
	КонецЕсли;
	
	КоличествоПоказателей = БухгалтерскиеОтчетыВызовСервера.КоличествоПоказателей(ПараметрыОтчета);
	
	Таблица = КомпоновщикНастроек.Настройки.Структура.Добавить(Тип("ТаблицаКомпоновкиДанных"));
	
	// Колонка "показатели".
	Если КоличествоПоказателей > 1 Тогда
		Колонка = Таблица.Колонки.Добавить();
		Колонка.Имя           = "Показатели";
		Колонка.Использование = Истина;
		
		ГруппаПоказатели = Колонка.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
		ГруппаПоказатели.Использование = Истина;
		ГруппаПоказатели.Расположение  = РасположениеПоляКомпоновкиДанных.Вертикально;
		
		Для Каждого ИмяПоказателя Из ПараметрыОтчета.НаборПоказателей Цикл
			Если ПараметрыОтчета["Показатель" + ИмяПоказателя] Тогда 
				БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ГруппаПоказатели, "Показатели." + ИмяПоказателя);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	МассивПоказателей = Новый Массив;
	МассивПоказателей.Добавить("БУ");
	МассивПоказателей.Добавить("НУ");
	МассивПоказателей.Добавить("ПР");
	МассивПоказателей.Добавить("ВР");
	МассивПоказателей.Добавить("Контроль");

	МассивПоказателейДоп = Новый Массив;
	МассивПоказателейДоп.Добавить("ВалютнаяСумма");
	МассивПоказателейДоп.Добавить("Количество");
	
	ВидОстатков = ?(ПараметрыОтчета.РазвернутоеСальдо, "Развернутый", "");
	
	ВыводимыеПоля = Новый Массив;
	ПоляОстатков = Новый Массив;
	
	// Колонка "Сальдо на начало Дт".
	Если ПараметрыОтчета.СальдоНаНачалоДт Тогда
		Колонка = Таблица.Колонки.Добавить();
		Колонка.Имя           = "НачальноеСальдоДт";
		Колонка.Использование = Истина;
		
		Группа = Колонка.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
		Группа.Использование = Истина;
		Группа.Расположение  = РасположениеПоляКомпоновкиДанных.Вертикально;
		
		Для Каждого ИмяПоказателя Из МассивПоказателей Цикл
			Если ПараметрыОтчета["Показатель" + ИмяПоказателя] Тогда 
				ВыбранноеПоле = Новый ПолеКомпоновкиДанных("СальдоНаНачалоПериода." + ИмяПоказателя + "Начальный" + ВидОстатков + "ОстатокДт");
				ВыводимыеПоля.Добавить(ВыбранноеПоле);
				ПоляОстатков.Добавить(ВыбранноеПоле);
				БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(Группа, ВыбранноеПоле);
			КонецЕсли;
		КонецЦикла;
		Для Каждого ИмяПоказателя Из МассивПоказателейДоп Цикл
			Если ПараметрыОтчета["Показатель" + ИмяПоказателя] Тогда 
				ВыбранноеПоле = Новый ПолеКомпоновкиДанных("СальдоНаНачалоПериода." + ИмяПоказателя + "НачальныйОстатокДт");
				ВыводимыеПоля.Добавить(ВыбранноеПоле);
				ПоляОстатков.Добавить(ВыбранноеПоле);
				БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(Группа, ВыбранноеПоле);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// Колонка "Сальдо на начало Кт".
	Если ПараметрыОтчета.СальдоНаНачалоКт Тогда
		Колонка = Таблица.Колонки.Добавить();
		Колонка.Имя           = "НачальноеСальдоКт";
		Колонка.Использование = Истина;
		
		Группа = Колонка.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
		Группа.Использование = Истина;
		Группа.Расположение  = РасположениеПоляКомпоновкиДанных.Вертикально;
		
		Для Каждого ИмяПоказателя Из МассивПоказателей Цикл
			Если ПараметрыОтчета["Показатель" + ИмяПоказателя] Тогда 
				ВыбранноеПоле = Новый ПолеКомпоновкиДанных("СальдоНаНачалоПериода." + ИмяПоказателя + "Начальный" + ВидОстатков + "ОстатокКт");
				ВыводимыеПоля.Добавить(ВыбранноеПоле);
				ПоляОстатков.Добавить(ВыбранноеПоле);
				БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(Группа, ВыбранноеПоле);
			КонецЕсли;
		КонецЦикла;
		Для Каждого ИмяПоказателя Из МассивПоказателейДоп Цикл
			Если ПараметрыОтчета["Показатель" + ИмяПоказателя] Тогда 
				ВыбранноеПоле = Новый ПолеКомпоновкиДанных("СальдоНаНачалоПериода." + ИмяПоказателя + "НачальныйОстатокКт");
				ВыводимыеПоля.Добавить(ВыбранноеПоле);
				ПоляОстатков.Добавить(ВыбранноеПоле);
				БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(Группа, ВыбранноеПоле);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// Колонка "Обороты за период Дт".
	Если ПараметрыОтчета.ОборотыЗаПериодДт Тогда
		Колонка = Таблица.Колонки.Добавить();
		Колонка.Имя           = "ОборотДт";
		Колонка.Использование = Истина;
		
		Группа = Колонка.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
		Группа.Использование = Истина;
		Группа.Расположение  = РасположениеПоляКомпоновкиДанных.Вертикально;
		
		Для Каждого ИмяПоказателя Из МассивПоказателей Цикл
			Если ПараметрыОтчета["Показатель" + ИмяПоказателя] Тогда 
				ВыбранноеПоле = Новый ПолеКомпоновкиДанных("ОборотыЗаПериод." + ИмяПоказателя + "ОборотДт");
				ВыводимыеПоля.Добавить(ВыбранноеПоле);
				БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(Группа, ВыбранноеПоле);
			КонецЕсли;
		КонецЦикла;
		Для Каждого ИмяПоказателя Из МассивПоказателейДоп Цикл
			Если ПараметрыОтчета["Показатель" + ИмяПоказателя] Тогда 
				ВыбранноеПоле = Новый ПолеКомпоновкиДанных("ОборотыЗаПериод." + ИмяПоказателя + "ОборотДт");
				ВыводимыеПоля.Добавить(ВыбранноеПоле);
				БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(Группа, ВыбранноеПоле);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	УсловноеОформлениеАвтоотступа = Неопределено;
	Для каждого ЭлементОформления Из КомпоновщикНастроек.Настройки.УсловноеОформление.Элементы Цикл
		Если ЭлементОформления.Представление = НСтр("ru = 'Уменьшенный автоотступ'") Тогда
			УсловноеОформлениеАвтоотступа = ЭлементОформления;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если УсловноеОформлениеАвтоотступа = Неопределено Тогда
		УсловноеОформлениеАвтоотступа = КомпоновщикНастроек.Настройки.УсловноеОформление.Элементы.Добавить();
		УсловноеОформлениеАвтоотступа.Представление = НСтр("ru = 'Уменьшенный автоотступ'");
		УсловноеОформлениеАвтоотступа.Оформление.УстановитьЗначениеПараметра("Автоотступ", 1);
		УсловноеОформлениеАвтоотступа.Использование = Ложь;
		УсловноеОформлениеАвтоотступа.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ;
	Иначе
		УсловноеОформлениеАвтоотступа.Поля.Элементы.Очистить();
	КонецЕсли;
	
	// Колонка "Обороты со счетами Дт".
	Если ПараметрыОтчета.ОборотыСоСчетамиДт Тогда
		Если ПараметрыОтчета.ОборотыЗаПериодДт Тогда 
			Колонка = Колонка.Структура.Добавить();
		Иначе 
			Колонка = Таблица.Колонки.Добавить();
		КонецЕсли;
		Колонка.Имя           = "КорСчетДт";
		Колонка.Использование = Истина;
		
		ПолеГруппировки = Колонка.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
		ПолеГруппировки.Использование  = Истина;
		ПолеГруппировки.Поле           = Новый ПолеКомпоновкиДанных("КорСчет");
		ПолеГруппировки.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.Иерархия;
		
		ПолеОформления = УсловноеОформлениеАвтоотступа.Поля.Элементы.Добавить();
		ПолеОформления.Поле = ПолеГруппировки.Поле;
		
		Если Не ПараметрыОтчета.ПоСубсчетамКорСчетов Тогда
			ЗначениеОтбора = БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(Колонка.Отбор, "SystemFields.LevelInGroup", 1);
			ЗначениеОтбора.Применение = ТипПримененияОтбораКомпоновкиДанных.Иерархия;
			БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметрВывода(Колонка, "ВыводитьОтбор", ТипВыводаТекстаКомпоновкиДанных.НеВыводить);
		КонецЕсли;
		
		ЭлементПорядка = Колонка.Порядок.Элементы.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
		ЭлементПорядка.Использование     = Истина;
		ЭлементПорядка.Поле              = Новый ПолеКомпоновкиДанных("КорСчет");
		ЭлементПорядка.ТипУпорядочивания = НаправлениеСортировкиКомпоновкиДанных.Возр;
		
		БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметрВывода(Колонка, "РасположениеОбщихИтогов", РасположениеИтоговКомпоновкиДанных.Нет);
		
		БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(Колонка.Выбор, "КорСчет");
		
		Группа = Колонка.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
		Группа.Использование = Истина;
		Группа.Расположение  = РасположениеПоляКомпоновкиДанных.Вертикально;
		
		ОтборГруппаИЛИ = Колонка.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
		ОтборГруппаИЛИ.Применение = ТипПримененияОтбораКомпоновкиДанных.Элементы;
		ОтборГруппаИЛИ.ТипГруппы  = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
		
		Для Каждого ИмяПоказателя Из МассивПоказателей Цикл
			Если ПараметрыОтчета["Показатель" + ИмяПоказателя] Тогда 
				ВыбранноеПоле = Новый ПолеКомпоновкиДанных("ОборотыЗаПериод." + ИмяПоказателя + "ОборотДт");
				ВыводимыеПоля.Добавить(ВыбранноеПоле);
				БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(Группа, ВыбранноеПоле);
				БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ОтборГруппаИЛИ, ВыбранноеПоле, 0, ВидСравненияКомпоновкиДанных.НеРавно);
			КонецЕсли;
		КонецЦикла;
		Для Каждого ИмяПоказателя Из МассивПоказателейДоп Цикл
			Если ПараметрыОтчета["Показатель" + ИмяПоказателя] Тогда 
				ВыбранноеПоле = Новый ПолеКомпоновкиДанных("ОборотыЗаПериод." + ИмяПоказателя + "ОборотДт");
				ВыводимыеПоля.Добавить(ВыбранноеПоле);
				БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(Группа, ВыбранноеПоле);
				БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ОтборГруппаИЛИ, ВыбранноеПоле, 0, ВидСравненияКомпоновкиДанных.НеРавно);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// Колонка "Обороты за период Кт"
	Если ПараметрыОтчета.ОборотыЗаПериодКт Тогда
		Колонка = Таблица.Колонки.Добавить();
		Колонка.Имя           = "ОборотКт";
		Колонка.Использование = Истина;
		
		Группа = Колонка.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
		Группа.Использование = Истина;
		Группа.Расположение  = РасположениеПоляКомпоновкиДанных.Вертикально;
		
		Для Каждого ИмяПоказателя Из МассивПоказателей Цикл
			Если ПараметрыОтчета["Показатель" + ИмяПоказателя] Тогда 
				ВыбранноеПоле = Новый ПолеКомпоновкиДанных("ОборотыЗаПериод." + ИмяПоказателя + "ОборотКт");
				ВыводимыеПоля.Добавить(ВыбранноеПоле);
				БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(Группа, ВыбранноеПоле);
			КонецЕсли;
		КонецЦикла;
		Для Каждого ИмяПоказателя Из МассивПоказателейДоп Цикл
			Если ПараметрыОтчета["Показатель" + ИмяПоказателя] Тогда 
				ВыбранноеПоле = Новый ПолеКомпоновкиДанных("ОборотыЗаПериод." + ИмяПоказателя + "ОборотКт");
				ВыводимыеПоля.Добавить(ВыбранноеПоле);
				БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(Группа, ВыбранноеПоле);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// Колонка "Обороты со счетами Кт"
	Если ПараметрыОтчета.ОборотыСоСчетамиКт Тогда
		Если ПараметрыОтчета.ОборотыЗаПериодДт Тогда 
			Колонка = Колонка.Структура.Добавить();
		Иначе 
			Колонка = Таблица.Колонки.Добавить();
		КонецЕсли;
		Колонка.Имя           = "КорСчетКт";
		Колонка.Использование = Истина;
		
		ПолеГруппировки = Колонка.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
		ПолеГруппировки.Использование  = Истина;
		ПолеГруппировки.Поле           = Новый ПолеКомпоновкиДанных("КорСчет");
		ПолеГруппировки.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.Иерархия;
		
		ПолеОформления = УсловноеОформлениеАвтоотступа.Поля.Элементы.Добавить();
		ПолеОформления.Поле = ПолеГруппировки.Поле;
		
		Если Не ПараметрыОтчета.ПоСубсчетамКорСчетов Тогда
			ЗначениеОтбора = БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(Колонка.Отбор, "SystemFields.LevelInGroup", 1);
			ЗначениеОтбора.Применение = ТипПримененияОтбораКомпоновкиДанных.Иерархия;
			БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметрВывода(Колонка, "ВыводитьОтбор", ТипВыводаТекстаКомпоновкиДанных.НеВыводить);
		КонецЕсли;
		
		ЭлементПорядка = Колонка.Порядок.Элементы.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
		ЭлементПорядка.Использование     = Истина;
		ЭлементПорядка.Поле              = Новый ПолеКомпоновкиДанных("КорСчет");
		ЭлементПорядка.ТипУпорядочивания = НаправлениеСортировкиКомпоновкиДанных.Возр;
		
		БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметрВывода(Колонка, "РасположениеОбщихИтогов", РасположениеИтоговКомпоновкиДанных.Нет);
		
		БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(Колонка.Выбор, "КорСчет");
		
		Группа = Колонка.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
		Группа.Использование = Истина;
		Группа.Расположение  = РасположениеПоляКомпоновкиДанных.Вертикально;
		
		ОтборГруппаИЛИ = Колонка.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
		ОтборГруппаИЛИ.Применение = ТипПримененияОтбораКомпоновкиДанных.Элементы;
		ОтборГруппаИЛИ.ТипГруппы  = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;

		Для Каждого ИмяПоказателя Из МассивПоказателей Цикл
			Если ПараметрыОтчета["Показатель" + ИмяПоказателя] Тогда 
				ВыбранноеПоле = Новый ПолеКомпоновкиДанных("ОборотыЗаПериод." + ИмяПоказателя + "ОборотКт");
				ВыводимыеПоля.Добавить(ВыбранноеПоле);
				БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(Группа, ВыбранноеПоле);
				БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ОтборГруппаИЛИ, ВыбранноеПоле, 0, ВидСравненияКомпоновкиДанных.НеРавно);
			КонецЕсли;
		КонецЦикла;
		Для Каждого ИмяПоказателя Из МассивПоказателейДоп Цикл
			Если ПараметрыОтчета["Показатель" + ИмяПоказателя] Тогда 
				ВыбранноеПоле = Новый ПолеКомпоновкиДанных("ОборотыЗаПериод." + ИмяПоказателя + "ОборотКт");
				ВыводимыеПоля.Добавить(ВыбранноеПоле);
				БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(Группа, ВыбранноеПоле);
				БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ОтборГруппаИЛИ, ВыбранноеПоле, 0, ВидСравненияКомпоновкиДанных.НеРавно);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// Колонка "Сальдо на конец Дт"
	Если ПараметрыОтчета.СальдоНаКонецДт Тогда
		Колонка = Таблица.Колонки.Добавить();
		Колонка.Имя           = "КонечноеСальдоДт";
		Колонка.Использование = Истина;
		
		Группа = Колонка.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
		Группа.Использование = Истина;
		Группа.Расположение  = РасположениеПоляКомпоновкиДанных.Вертикально;
		
		Для Каждого ИмяПоказателя Из МассивПоказателей Цикл
			Если ПараметрыОтчета["Показатель" + ИмяПоказателя] Тогда 
				ВыбранноеПоле = Новый ПолеКомпоновкиДанных("СальдоНаКонецПериода." + ИмяПоказателя + "Конечный" + ВидОстатков + "ОстатокДт");
				ВыводимыеПоля.Добавить(ВыбранноеПоле);
				ПоляОстатков.Добавить(ВыбранноеПоле);
				БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(Группа, ВыбранноеПоле);
			КонецЕсли;
		КонецЦикла;
		Для Каждого ИмяПоказателя Из МассивПоказателейДоп Цикл
			Если ПараметрыОтчета["Показатель" + ИмяПоказателя] Тогда 
				ВыбранноеПоле = Новый ПолеКомпоновкиДанных("СальдоНаКонецПериода." + ИмяПоказателя + "КонечныйОстатокДт");
				ВыводимыеПоля.Добавить(ВыбранноеПоле);
				ПоляОстатков.Добавить(ВыбранноеПоле);
				БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(Группа, ВыбранноеПоле);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// Колонка "Сальдо на конец Кт"
	Если ПараметрыОтчета.СальдоНаКонецКт Тогда
		Колонка = Таблица.Колонки.Добавить();
		Колонка.Имя           = "КонечноеСальдоКт";
		Колонка.Использование = Истина;
		
		Группа = Колонка.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
		Группа.Использование = Истина;
		Группа.Расположение  = РасположениеПоляКомпоновкиДанных.Вертикально;
		
		Для Каждого ИмяПоказателя Из МассивПоказателей Цикл
			Если ПараметрыОтчета["Показатель" + ИмяПоказателя] Тогда 
				ВыбранноеПоле = Новый ПолеКомпоновкиДанных("СальдоНаКонецПериода." + ИмяПоказателя + "Конечный" + ВидОстатков + "ОстатокКт");
				ВыводимыеПоля.Добавить(ВыбранноеПоле);
				ПоляОстатков.Добавить(ВыбранноеПоле);
				БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(Группа, ВыбранноеПоле);
			КонецЕсли;
		КонецЦикла;
		Для Каждого ИмяПоказателя Из МассивПоказателейДоп Цикл
			Если ПараметрыОтчета["Показатель" + ИмяПоказателя] Тогда 
				ВыбранноеПоле = Новый ПолеКомпоновкиДанных("СальдоНаКонецПериода." + ИмяПоказателя + "КонечныйОстатокКт");
				ВыводимыеПоля.Добавить(ВыбранноеПоле);
				ПоляОстатков.Добавить(ВыбранноеПоле);
				БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(Группа, ВыбранноеПоле);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// Дополнительные данные
	БухгалтерскиеОтчетыВызовСервера.ДобавитьДополнительныеПоля(ПараметрыОтчета, КомпоновщикНастроек);
	
	ДобавитьОтборПоВыводимымПолям(ВыводимыеПоля, КомпоновщикНастроек.Настройки, Ложь);
	
	Структура = Таблица.Строки.Добавить();
	Структура.Имя = "Счет";
	
	ПолеГруппировки = Структура.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
	ПолеГруппировки.Использование  = Истина;
	ПолеГруппировки.Поле           = Новый ПолеКомпоновкиДанных("Счет");
	ПолеГруппировки.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.Иерархия;
	Структура.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
	Структура.Порядок.Элементы.Добавить(Тип("АвтоЭлементПорядкаКомпоновкиДанных")); 
	
	ПолеОформления = УсловноеОформлениеАвтоотступа.Поля.Элементы.Добавить();
	ПолеОформления.Поле = ПолеГруппировки.Поле;
	
	Если Не ПараметрыОтчета.ПоСубсчетам Тогда
		ЗначениеОтбора = БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(Структура.Отбор, "SystemFields.LevelInGroup", 1);
		ЗначениеОтбора.Применение = ТипПримененияОтбораКомпоновкиДанных.Иерархия;
		БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметрВывода(Структура, "ВыводитьОтбор", ТипВыводаТекстаКомпоновкиДанных.НеВыводить);			
	КонецЕсли;
	
	КоличествоГруппировок = ?(ПараметрыОтчета.ПоСубсчетам, 1, 0);
	Для Каждого ПолеВыбраннойГруппировки Из ПараметрыОтчета.Группировка Цикл 
		Если ПолеВыбраннойГруппировки.Использование Тогда
			Структура = Структура.Структура.Добавить();
			
			Если СтрНайти(ПолеВыбраннойГруппировки.Поле, "КорСубконто1") <> 0
				ИЛИ СтрНайти(ПолеВыбраннойГруппировки.Поле, "КорСубконто2") <> 0
				ИЛИ СтрНайти(ПолеВыбраннойГруппировки.Поле, "КорСубконто3") <> 0 Тогда
				
				ДобавитьУсловноеОформлениеОстатков(Структура, ПоляОстатков);
				
			КонецЕсли;
			
			ПолеГруппировки = Структура.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
			ПолеГруппировки.Использование  = Истина;
			ПолеГруппировки.Поле           = Новый ПолеКомпоновкиДанных(ПолеВыбраннойГруппировки.Поле);
			
			Если ПолеВыбраннойГруппировки.ТипГруппировки = 1 Тогда
				ПолеГруппировки.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.Иерархия;
			ИначеЕсли ПолеВыбраннойГруппировки.ТипГруппировки = 2 Тогда
				ПолеГруппировки.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.ТолькоИерархия;
			Иначе
				ПолеГруппировки.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.Элементы;
			КонецЕсли;
			
			Структура.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
			Структура.Порядок.Элементы.Добавить(Тип("АвтоЭлементПорядкаКомпоновкиДанных"));
			
			ПолеОформления = УсловноеОформлениеАвтоотступа.Поля.Элементы.Добавить();
			ПолеОформления.Поле = ПолеГруппировки.Поле;
						
			КоличествоГруппировок = КоличествоГруппировок + 1;
		КонецЕсли;
	КонецЦикла;
	
	// Период.
	БухгалтерскиеОтчетыВызовСервера.ДобавитьГруппировкуПоПериоду(ПараметрыОтчета, Структура);
	
	Для каждого ЭлементГруппировки Из Структура.ПоляГруппировки.Элементы Цикл
		Если ЭлементГруппировки.Поле = Новый ПолеКомпоновкиДанных(?(ПараметрыОтчета.Периодичность = 2, "Регистратор", "Период")) Тогда
			Поле = УсловноеОформлениеАвтоотступа.Поля.Элементы.Добавить();
			Поле.Поле = ЭлементГруппировки.Поле;
		КонецЕсли;
	КонецЦикла;
	
	// Валюта.
	Если ПараметрыОтчета.ПоказательВалютнаяСумма И БухгалтерскиеОтчетыКлиентСервер.НайтиГруппировку(Таблица.Строки, "Валюта") = Неопределено Тогда
		Структура = Структура.Структура.Добавить();
		ПолеГруппировки = Структура.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
		ПолеГруппировки.Использование  = Истина;
		ПолеГруппировки.Поле           = Новый ПолеКомпоновкиДанных("Валюта");		
		Структура.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
		Структура.Порядок.Элементы.Добавить(Тип("АвтоЭлементПорядкаКомпоновкиДанных"));	
		
		ПолеОформления = УсловноеОформлениеАвтоотступа.Поля.Элементы.Добавить();
		ПолеОформления.Поле = ПолеГруппировки.Поле;
				
	КонецЕсли;
	           
	БухгалтерскиеОтчетыВызовСервера.ДобавитьОтборПоОрганизации(ПараметрыОтчета, КомпоновщикНастроек);
		
	Если УсловноеОформлениеАвтоотступа.Поля.Элементы.Количество() = 0 Тогда
		УсловноеОформлениеАвтоотступа.Использование = Ложь;
	КонецЕсли;
	
	// Пометить строки для удаления по счетам, на которых не ведется налоговый учет.
	МассивПоказателей = Новый Массив;
	МассивПоказателей.Добавить("НУ");
	МассивПоказателей.Добавить("ВР");
	МассивПоказателей.Добавить("ПР");
	МассивПоказателей.Добавить("Контроль");
	
	УсловноеОформление = КомпоновщикНастроек.Настройки.УсловноеОформление.Элементы.Добавить();
	Для Каждого Показатель Из МассивПоказателей Цикл
		Поле = УсловноеОформление.Поля.Элементы.Добавить();
		Поле.Поле = Новый ПолеКомпоновкиДанных("СальдоНаНачалоПериода." + Показатель + "НачальныйОстатокДт");
		Поле = УсловноеОформление.Поля.Элементы.Добавить();
		Поле.Поле = Новый ПолеКомпоновкиДанных("СальдоНаНачалоПериода." + Показатель + "НачальныйРазвернутыйОстатокДт");
	КонецЦикла;
	
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(УсловноеОформление.Отбор, "Счет.НалоговыйУчет", Ложь);
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(УсловноеОформление.Оформление, "МаксимальнаяВысота", 1);
	
КонецПроцедуры

// В процедуре можно уточнить особенности вывода данных в отчет.
//
// Параметры:
//  ПараметрыОтчета - Структура - см. ПодготовитьПараметрыОтчета() в ФормаОтчета.
//  МакетКомпоновки - МакетКомпоновкиДанных - описание выводимых данных.
//
Процедура ПослеКомпоновкиМакета(ПараметрыОтчета, МакетКомпоновки) Экспорт
	
	// Снимем флаг ИгнорироватьЗначенияNULL для реквизитов субконто.
	БухгалтерскиеОтчеты.ОтключитьИгнорированиеNull(МакетКомпоновки.НаборыДанных.ОстаткиИОборотыПоКорсчетам.Поля);
	
	Для Каждого ЭлементТелаМакета Из МакетКомпоновки.Тело Цикл 
		Если ТипЗнч(ЭлементТелаМакета) = Тип("ТаблицаМакетаКомпоновкиДанных") Тогда
			ПараметрыОтчета.Вставить("ВысотаШапки", МакетКомпоновки.Макеты[ЭлементТелаМакета.МакетШапки].Макет.Количество()); 
			Прервать;	
		КонецЕсли;
	КонецЦикла;
		
	Для Каждого ГруппировкаТелаКомпоновки Из МакетКомпоновки.Тело Цикл
		Если ТипЗнч(ГруппировкаТелаКомпоновки) = Тип("ТаблицаМакетаКомпоновкиДанных") Тогда
			ПараметрыОтчета.Вставить("ШиринаШапки", МакетКомпоновки.Макеты[ГруппировкаТелаКомпоновки.МакетШапки].Макет[0].Ячейки.Количество()); 
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Процедура проверяет контрольное соотношение "начальные остатки + обороты Дт - обороты Кт = конечные остатки".
//
// Параметры:
//  ПараметрыОтчета - Структура - см. ПодготовитьПараметрыОтчета() в ФормаОтчета.
//  Результат    - ТабличныйДокумент - содержит результат формирования отчета.
//
Процедура ПроверитьКорректностьИтогов(ПараметрыОтчета, Результат) Экспорт
	
	ДополнительныеСвойства = ПараметрыОтчета.НастройкиКомпоновкиДанных.ДополнительныеСвойства;
	ДополнительныеСвойства.Вставить("КонтрольноеСоотношениеИтоговВыполняется", Истина);
	
	Если Не (ПараметрыОтчета.СальдоНаНачалоДт И ПараметрыОтчета.СальдоНаНачалоКт
		И ПараметрыОтчета.СальдоНаКонецДт И ПараметрыОтчета.СальдоНаКонецКт
		И ПараметрыОтчета.ОборотыЗаПериодДт И ПараметрыОтчета.ОборотыЗаПериодКт) Тогда
		// Недостаточно данных для проверки.
		Возврат;
	КонецЕсли;
	
	ОбластьИтогов = БухгалтерскиеОтчеты.ОбластьЧтенияИтогов(ПараметрыОтчета);
	Если ОбластьИтогов.РазделительДробнойЧасти = Неопределено // нет однозначного представления сумм в ячейках
	 Или ОбластьИтогов.НомерСтрокиПоказателяКонтрольОтносительный = 0 // единственный показатель - это "Контроль"
		Тогда
		
		Возврат;
		
	КонецЕсли;
	
	КонтрольноеСоотношение = 0;
	
	// Определяем позиции колонок с суммами.
	КоличествоПоказателей = БухгалтерскиеОтчетыВызовСервера.КоличествоПоказателей(ПараметрыОтчета);
	ПоследняяИзЯчеекИтогов = Результат.ШиринаТаблицы;
	Если ПараметрыОтчета.РазмещениеДополнительныхПолей <> 0 Тогда
		Для ПерваяИзЯчеекИтогов = 2 По ПоследняяИзЯчеекИтогов Цикл
			Если Результат.Область(Результат.ВысотаТаблицы, ПерваяИзЯчеекИтогов).Расшифровка <> Неопределено Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
	Иначе
		ПерваяИзЯчеекИтогов = 2;
	КонецЕсли;
	Если КоличествоПоказателей > 1 Тогда // есть колонка с именами показателей
		ПерваяИзЯчеекИтогов = ПерваяИзЯчеекИтогов + 1;		
	КонецЕсли;

	ФлагиОбщегоИтога = ОбластьИтогов.ФлагиОбщегоИтога;
	ФлагиОбщегоИтога.Вставить(ПерваяИзЯчеекИтогов, -1);       // сальдо начальное Дебет
	ФлагиОбщегоИтога.Вставить(ПерваяИзЯчеекИтогов + 1, 1);    // сальдо начальное Кредит
	ФлагиОбщегоИтога.Вставить(ПерваяИзЯчеекИтогов + 2, -1);   // оборот Дебет
	ФлагиОбщегоИтога.Вставить(ПоследняяИзЯчеекИтогов - 1, 1); // сальдо конечное Дебет
	ФлагиОбщегоИтога.Вставить(ПоследняяИзЯчеекИтогов, -1);    // сальдо конечное Кредит
	
	Если ПараметрыОтчета.ОборотыСоСчетамиКт Тогда
		// Позиция колонки "Оборот Кт" динамически изменяется в зависимости от данных.
		НомерСтроки = 1;
		Если ПараметрыОтчета.ВыводитьЗаголовок Тогда
			ОбластьЗаголовок = Результат.Области.Найти("Заголовок");
			Если ОбластьЗаголовок <> Неопределено Тогда
				НомерСтроки = ОбластьЗаголовок.Низ + 1;
			КонецЕсли;
		КонецЕсли;
		КолонкаОборотКт = Результат.НайтиТекст("Оборот Кт", ,
			Результат.Область(НомерСтроки, ПерваяИзЯчеекИтогов + 2, НомерСтроки, ПоследняяИзЯчеекИтогов - 2));
		Если КолонкаОборотКт = Неопределено Тогда
			// Недостаточно данных для проверки.
			Возврат;
		КонецЕсли;	
		ФлагиОбщегоИтога.Вставить(КолонкаОборотКт.Лево, 1); // оборот Кредит
		
	Иначе
			
		ФлагиОбщегоИтога.Вставить(ПоследняяИзЯчеекИтогов - 2, 1); // оборот Кредит
		
	КонецЕсли;

	ОбластьИтогов.ПоследняяИзСтрокИтогов = Результат.ВысотаТаблицы;
	ОбластьИтогов.ПерваяИзСтрокИтогов = ОбластьИтогов.ПоследняяИзСтрокИтогов - КоличествоПоказателей + 1;
	Если ПараметрыОтчета.ПоказательКонтроль Тогда
		ОбластьИтогов.НомерСтрокиПоказателяКонтрольАбсолютный = ОбластьИтогов.ПерваяИзСтрокИтогов
			+ ОбластьИтогов.НомерСтрокиПоказателяКонтрольОтносительный - 1;
	КонецЕсли;
	БухгалтерскиеОтчеты.ДополнитьКонтрольноеСоотношение(Результат, ОбластьИтогов, КонтрольноеСоотношение);

	Если КонтрольноеСоотношение <> 0 Тогда
		// Проверим, нет ли настройек отбора, которые допускают вывод оборотов без вывода остатков.
		ЭлементыОтбора = ПараметрыОтчета.НастройкиКомпоновкиДанных.Отбор.Элементы;
		
		Если БухгалтерскиеОтчеты.ЕстьОтборПоКорполю(ЭлементыОтбора) Тогда
			Возврат;
		КонецЕсли;
		
		ОтбираемыеКорСубконто = Новый Массив;
		БухгалтерскиеОтчеты.СписокОтборовПоСубконто(ЭлементыОтбора, ОтбираемыеКорСубконто, , Истина);
		Если ОтбираемыеКорСубконто.Количество() > 0 Тогда
			Возврат;
		КонецЕсли;
		
		Если БухгалтерскиеОтчеты.ИспользуютсяОборотныеСубконто(ПараметрыОтчета.Счет, ЭлементыОтбора) Тогда
			Возврат;
		КонецЕсли;

	КонецЕсли;
	
	ДополнительныеСвойства.Вставить("КонтрольноеСоотношениеИтоговВыполняется", КонтрольноеСоотношение = 0);
	
КонецПроцедуры

// В процедуре можно изменить табличный документ после вывода в него данных.
//
// Параметры:
//  ПараметрыОтчета - Структура - см. ПодготовитьПараметрыОтчета() в ФормаОтчета.
//  Результат    - ТабличныйДокумент - сформированный отчет.
//
Процедура ПослеВыводаРезультата(ПараметрыОтчета, Результат) Экспорт
	
	БухгалтерскиеОтчетыВызовСервера.ОбработкаРезультатаОтчета(ПараметрыОтчета.ИдентификаторОтчета, Результат);

	Если Результат.Области.Найти("Заголовок") = Неопределено Тогда
		Результат.ФиксацияСверху = ПараметрыОтчета.ВысотаШапки;
	Иначе
		Результат.ФиксацияСверху = Результат.Области.Заголовок.Низ + ПараметрыОтчета.ВысотаШапки;
	КонецЕсли;
	
	Результат.ФиксацияСлева = ПараметрыОтчета.ШиринаШапки;
		
КонецПроцедуры

// Задает набор показателей, которые позволяет анализировать отчет.
//
// Возвращаемое значение:
//   Массив      - основные суммовые показатели отчета.
//
Функция ПолучитьНаборПоказателей() Экспорт
	
	НаборПоказателей = Новый Массив;
	НаборПоказателей.Добавить("БУ");
	НаборПоказателей.Добавить("НУ");
	НаборПоказателей.Добавить("ПР");
	НаборПоказателей.Добавить("ВР");
	НаборПоказателей.Добавить("Контроль");
	НаборПоказателей.Добавить("ВалютнаяСумма");
	НаборПоказателей.Добавить("Количество");
	
	Возврат НаборПоказателей;
	
КонецФункции

// Задает набор опций, которые позволяет настраивать отчет.
//
// Возвращаемое значение:
//   Массив      - имена опций.
//
Функция СохраняемыеОпции() Экспорт
	
	КоллекцияНастроек = Новый Массив;
	Для каждого Показатель Из ПолучитьНаборПоказателей() Цикл
		КоллекцияНастроек.Добавить("Показатель" + Показатель);
	КонецЦикла;
	КоллекцияНастроек.Добавить("РазвернутоеСальдо");
	КоллекцияНастроек.Добавить("ПоСубсчетам");
	КоллекцияНастроек.Добавить("ПоСубсчетамКорСчетов");
	КоллекцияНастроек.Добавить("Периодичность");
	КоллекцияНастроек.Добавить("РазмещениеДополнительныхПолей");
	КоллекцияНастроек.Добавить("СальдоНаНачалоДт");
	КоллекцияНастроек.Добавить("СальдоНаНачалоКт");
	КоллекцияНастроек.Добавить("СальдоНаКонецДт");
	КоллекцияНастроек.Добавить("СальдоНаКонецКт");
	КоллекцияНастроек.Добавить("ОборотыЗаПериодДт");
	КоллекцияНастроек.Добавить("ОборотыЗаПериодКт");
	КоллекцияНастроек.Добавить("ОборотыСоСчетамиДт");
	КоллекцияНастроек.Добавить("ОборотыСоСчетамиКт");
	
	Возврат КоллекцияНастроек;
	
КонецФункции

#КонецОбласти

#Область РасшифровкаСтандартныхОтчетов

// Заполняет настройки расшифровки (см. БухгалтерскиеОтчетыКлиентСервер.НовыйУниверсальныеНастройки) для переданного экземпляра отчета.
//
// Параметры:
//  Настройки				 - Структура								 - Настройки расшифровки отчета, которые нужно заполнить (см. БухгалтерскиеОтчетыКлиентСервер.НовыйУниверсальныеНастройки).
//  Объект					 - ОтчетОбъект								 - Отчет из данных которого нудно собрать универсальные настройки.
//  ДанныеРасшифровки		 - ДанныеРасшифровкиКомпоновкиДанных		 - Данные расшифровки отчета.
//  ИдентификаторРасшифровки - ИдентификаторРасшифровкиКомпоновкиДанных  - Идентификатор расшифровки из ячейки для которой вызвана расшифровка.
//  РеквизитыРасшифровки	 - Структура								 - Реквизиты отчета полученные из контекста расшифровываемой ячейки.
//
Процедура ЗаполнитьНастройкиРасшифровки(Настройки, Объект, ДанныеРасшифровки, ИдентификаторРасшифровки, РеквизитыРасшифровки) Экспорт

	БухгалтерскиеОтчетыРасшифровка.ЗаполнитьНастройкиРасшифровкиПоДаннымСтандартногоОтчета(
		Настройки,
		ДанныеРасшифровки,
		ИдентификаторРасшифровки,
		Объект,
		РеквизитыРасшифровки);
	
КонецПроцедуры

// Адаптирует переданные настройки для данного вида отчетов.
// Перед применением настроек расшифровки может возникнуть необходимость учесть особенности этого вида отчетов.
//
// Параметры:
//  Настройки	 - Структура - Настройки которые нужно адаптировать (см. БухгалтерскиеОтчетыКлиентСервер.НовыйУниверсальныеНастройки).
//
Процедура АдаптироватьНастройки(Настройки) Экспорт
	
	ПолеСчет = Новый ПолеКомпоновкиДанных("Счет");
	УдалитьОтбор = Новый Массив;
	
	Для Каждого ЭлементОтбора Из Настройки.Отбор.Элементы Цикл
		
		Если ЭлементОтбора.ЛевоеЗначение = ПолеСчет Тогда
			
			УдалитьОтбор.Добавить(ЭлементОтбора);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого ЭлементОтбора Из УдалитьОтбор Цикл
		
		Настройки.Отбор.Элементы.Удалить(ЭлементОтбора);
		
	КонецЦикла;
	
КонецПроцедуры

// Устанавливает какими отчетами и при каких условиях может быть расшифрован этот вид отчетов.
//
// Параметры:
//  Правила - ТаблицаЗначений - Правила расшифровки этого отчета см. БухгалтерскиеОтчетыРасшифровка.НовыйПравилаРасшифровки.
//
Процедура ЗаполнитьПравилаРасшифровки(Правила) Экспорт

	Правило = Правила.Добавить();
	Правило.Отчет = "ОтчетПоПроводкам";
	БухгалтерскиеОтчетыРасшифровка.ДобавитьТребуемыйРеквизитРасшифровки(Правило.ТребуемыеРеквизиты, "БухТипРесурса", "БухТипРесурса");
	Правило.ШаблонПредставления = НСтр("ru = 'Отчет по проводкам'");
	
	Правило = Правила.Добавить();
	Правило.Отчет = "ОтчетПоПроводкам";
	БухгалтерскиеОтчетыРасшифровка.ДобавитьТребуемыйРеквизитРасшифровки(Правило.ТребуемыеРеквизиты, "БухТипРесурса", "БухТипРесурса", "");
	Правило.Условия.Вставить("БухТипРесурса", "");
	
	Правило.ШаблонПредставления = НСтр("ru = 'Отчет по проводкам'");
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Процедура НастроитьСхемуКомпоновкиДанных(ПараметрыОтчета, Схема) Экспорт
	
	Если Не ЗначениеЗаполнено(ПараметрыОтчета.Счет) Тогда
		Возврат;
	КонецЕсли;
		
	СвойстваСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(ПараметрыОтчета.Счет);
	КоличествоСубконто = СвойстваСчета.КоличествоСубконто;
	
	ИмяПоляПрефикс = "Субконто";
	
	ПараметрыОС      = Новый Структура("ИндексСубконто, ЗаголовокСубконто", 0, "");
	ПараметрыНМА     = Новый Структура("ИндексСубконто, ЗаголовокСубконто", 0, "");
	ПараметрыФизЛица = Новый Структура("ИндексСубконто, ЗаголовокСубконто", 0, "");
	
	// Изменение представления и наложения ограничения типа значения
	ОсновнойНабор = Схема.НаборыДанных.ОстаткиИОборотыПоКорсчетам;
	МассивНаборовДанных = Новый Массив;
	Для каждого НаборДанных Из ОсновнойНабор.Элементы Цикл
		МассивНаборовДанных.Добавить(НаборДанных);
	КонецЦикла;
	МассивНаборовДанных.Добавить(ОсновнойНабор);
	Для Индекс = 1 По КоличествоСубконто Цикл
		Для Каждого НаборДанных Из МассивНаборовДанных Цикл
			
			Поле = НаборДанных.Поля.Найти(ИмяПоляПрефикс + Индекс);
			
			// Приведение поля к типу субконто.
			Если Поле <> Неопределено Тогда
				ТипЗначения = СвойстваСчета["ВидСубконто" + Индекс + "ТипЗначения"];
				Поле.ТипЗначения = ТипЗначения;
				Поле.Заголовок   = СвойстваСчета["ВидСубконто" + Индекс + "Наименование"];
			КонецЕсли;
			
			// Обработка особых типов субконто.
			Если ПолучитьФункциональнуюОпцию("ВедетсяУчетОсновныхСредств")
			   И Поле.ТипЗначения.СодержитТип(БухгалтерскийУчетКлиентСерверПереопределяемый.ТипОсновныеСредства()) Тогда
				ПараметрыОС.ИндексСубконто    = Индекс;
				ПараметрыОС.ЗаголовокСубконто = Поле.Заголовок;
			ИначеЕсли ПолучитьФункциональнуюОпцию("ВедетсяУчетНМА")
			   И Поле.ТипЗначения.СодержитТип(Тип("СправочникСсылка.НематериальныеАктивы")) Тогда
				ПараметрыНМА.ИндексСубконто    = Индекс;
				ПараметрыНМА.ЗаголовокСубконто = Поле.Заголовок;
			ИначеЕсли Поле.ТипЗначения.СодержитТип(Тип("СправочникСсылка.ФизическиеЛица")) Тогда
				ПараметрыФизЛица.ИндексСубконто    = Индекс;
				ПараметрыФизЛица.ЗаголовокСубконто = Поле.Заголовок;
			КонецЕсли;
			
		КонецЦикла;
	КонецЦикла;
	БухгалтерскиеОтчеты.ОбработатьНаборДанныхСвязаннойИнформации(Схема, "ДанныеОС"     , ПараметрыОС);
	БухгалтерскиеОтчеты.ОбработатьНаборДанныхСвязаннойИнформации(Схема, "ДанныеНМА"    , ПараметрыНМА);
	БухгалтерскиеОтчеты.ОбработатьНаборДанныхСвязаннойИнформации(Схема, "ДанныеФизЛица", ПараметрыФизЛица);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ДобавитьОтборПоВыводимымПолям(ВыводимыеПоля, Структура, ВыводитьОтбор = Истина)
	
	// Добавим отбор на пустые строки (Если все выводимые поля для записи равны 0).
	Если ВыводитьОтбор Тогда
		БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметрВывода(Структура, "ВыводитьОтбор", ТипВыводаТекстаКомпоновкиДанных.НеВыводить);
	КонецЕсли;
	
	ОтборГруппировки = Структура.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ОтборГруппировки.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	ОтборГруппировки.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	
	ПропускатьКонтроль = НЕ СтрНайти(ВыводимыеПоля[0], ".Контроль");
	
	Для Каждого ВыбранноеПоле Из ВыводимыеПоля Цикл
		
		Если ПропускатьКонтроль И СтрНайти(ВыбранноеПоле, ".Контроль") Тогда
			Продолжить;
		КонецЕсли;
		
		БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ОтборГруппировки, ВыбранноеПоле, 0, ВидСравненияКомпоновкиДанных.НеРавно);
		
	КонецЦикла;
		
КонецПроцедуры

Процедура ДобавитьУсловноеОформлениеОстатков(Настройки, ПоляОстатков)
	
	// Если нет оформляемых полей, то оформление добавлять не нужно.
	Если ПоляОстатков.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	УсловноеОформление = Настройки.УсловноеОформление.Элементы.Добавить();
	Поля = УсловноеОформление.Поля;
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(УсловноеОформление.Оформление, "Текст", "");
	
	Для Каждого Поле Из ПоляОстатков Цикл
		
		ОформляемоеПоле = Поля.Элементы.Добавить();
		ОформляемоеПоле.Поле = Поле;
		
	КонецЦикла;
	
КонецПроцедуры

// Убирает конструкции, которые не должны дублироваться при копировании текста запроса.
//
Процедура УдалитьОднократноИспользуемыеКонструкцииЗапроса(ТекстЗапроса)
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВЫБРАТЬ РАЗРЕШЕННЫЕ", "ВЫБРАТЬ");
	
	НачалоСкобок = СтрНайти(ТекстЗапроса, "{ВЫБРАТЬ");
	Если НачалоСкобок <> 0 Тогда
		
		КонецСкобок = СтрНайти(ТекстЗапроса, "}", НаправлениеПоиска.СНачала, НачалоСкобок);
		ТекстЗапроса = Лев(ТекстЗапроса, НачалоСкобок - 2) + Сред(ТекстЗапроса, КонецСкобок + 1);
		
	КонецЕсли;
	
КонецПроцедуры

// Вместо видов субконто счета-группы подставляет виды субконто из КонфигурацияСубконто.
//
Функция ЗаменитьНомераСубконтоВТексте(Знач ТекстЗапроса, СтрокаКартыСубконто)
	
	// Предполагается, что исходный текст запроса содержит:
	// Субконто1 КАК Субконто1,
	// Субконто2 КАК Субконто2,
	// Требуется подставить на место Субконто1 и Субконто2 поля с правильными номерами из виртуальной таблицы, а псевдонимы сохранить.
	
	МаксНомерЗаполненногоСубконто = 0;
	Для НомерСубконто = 1 По 3 Цикл
		НомерСубконтоВиртуальнойТаблицы = СтрокаКартыСубконто["СубконтоВиртуальнойТаблицыВПозиции" + НомерСубконто];
		Если ЗначениеЗаполнено(НомерСубконтоВиртуальнойТаблицы) Тогда
			МаксНомерЗаполненногоСубконто = НомерСубконто;
		КонецЕсли;
	КонецЦикла;
	
	Для НомерСубконто = 1 По 3 Цикл
	
		НомерСубконтоВиртуальнойТаблицы = СтрокаКартыСубконто["СубконтоВиртуальнойТаблицыВПозиции" + НомерСубконто];
		
		Если НомерСубконтоВиртуальнойТаблицы = НомерСубконто Тогда
			// Менять не требуется.
			Продолжить;
		КонецЕсли;
	
		Если ЗначениеЗаполнено(НомерСубконтоВиртуальнойТаблицы) Тогда
		
			ТекстПодстановки = Строка(НомерСубконтоВиртуальнойТаблицы);	
		
			ШаблонПоиска = "(Субконто%1).* КАК Субконто%2";
			ИсходноеСоответствие = СтрШаблон(ШаблонПоиска, НомерСубконто, НомерСубконто);
			НовоеСоответствие = СтрШаблон(ШаблонПоиска, ТекстПодстановки, НомерСубконто);
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ИсходноеСоответствие, НовоеСоответствие);
			
			ШаблонПоиска = ".Субконто%1 КАК Субконто%2";
			ИсходноеСоответствие = СтрШаблон(ШаблонПоиска, НомерСубконто,НомерСубконто);
			НовоеСоответствие = СтрШаблон(ШаблонПоиска, ТекстПодстановки, НомерСубконто);
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ИсходноеСоответствие, НовоеСоответствие);
			
			ШаблонПоиска = ".Субконто%1) КАК Субконто%2Представление";
			ИсходноеСоответствие = СтрШаблон(ШаблонПоиска, НомерСубконто, НомерСубконто);
			НовоеСоответствие = СтрШаблон(ШаблонПоиска, ТекстПодстановки, НомерСубконто);
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ИсходноеСоответствие, НовоеСоответствие);
			
		Иначе
			
			Если НомерСубконто < МаксНомерЗаполненногоСубконто Тогда
				// Вставляем заглушку вместо поля виртуальной таблицы в промежуточную позицию.
				ТекстПодстановки   = "НЕОПРЕДЕЛЕНО";
				ТекстПредставления = """<...>""";
			Иначе
				// Субконто вообще не должно выводиться в отчет.
				// Заменяем его на NULL, чтобы удалилось при компоновке отчета.
				ТекстПодстановки   = "NULL";
				ТекстПредставления = """""";
			КонецЕсли;
		
			ШаблонПоиска = "(Субконто%1).* КАК Субконто%2";
			ИсходноеСоответствие = СтрШаблон(ШаблонПоиска, НомерСубконто, НомерСубконто);
			НовоеСоответствие = СтрШаблон("(%1) КАК Субконто%2", ТекстПодстановки, НомерСубконто);
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ИсходноеСоответствие, НовоеСоответствие);

			НомерСимвола = СтрНайти(ТекстЗапроса, "РегистрБухгалтерии.Хозрасчетный.");
			ТаблицаВТексте = "Хозрасчетный" + Сред(ТекстЗапроса, НомерСимвола + 32,
				СтрНайти(ТекстЗапроса, "(", , НомерСимвола + 32) - НомерСимвола - 32);
				
			ШаблонПоиска = ТаблицаВТексте + ".Субконто%1 КАК Субконто%2";
			ИсходноеСоответствие = СтрШаблон(ШаблонПоиска, НомерСубконто, НомерСубконто);
			НовоеСоответствие = СтрШаблон("%1 КАК Субконто%2", ТекстПодстановки, НомерСубконто);
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ИсходноеСоответствие, НовоеСоответствие);
			
			ШаблонПоиска = "ПРЕДСТАВЛЕНИЕССЫЛКИ(" + ТаблицаВТексте + ".Субконто%1) КАК Субконто%2Представление";
			ИсходноеСоответствие = СтрШаблон(ШаблонПоиска, НомерСубконто, НомерСубконто);
			НовоеСоответствие = СтрШаблон("%1 КАК Субконто%2Представление", ТекстПредставления, НомерСубконто);
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ИсходноеСоответствие, НовоеСоответствие);
			
		КонецЕсли;
			
	КонецЦикла;
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Получим расстановку субконто по результатам запросов к субсчетам, исходя из принципа:
// - если у субсчета есть вид субконто такой же как у счета-группы, то он должен быть на той же позиции;
// - если у субсчета такого вида субконто нет, то подставляем другой из имеющихся у субсчета;
// - если между видами субконто субсчета имеется дырка, то заполняем ее значениями Неопределено.
//
Функция КартаСубконто(СчетГруппа, НомераИспользуемыхСубконтоСчетаГруппы, Субсчета)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Субсчета",   Субсчета);

	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Хозрасчетный.Ссылка КАК Счет,
	|	ЕСТЬNULL(ВидыСубконто1.ВидСубконто, НЕОПРЕДЕЛЕНО) КАК ВидСубконто1,
	|	ЕСТЬNULL(ВидыСубконто2.ВидСубконто, НЕОПРЕДЕЛЕНО) КАК ВидСубконто2,
	|	ЕСТЬNULL(ВидыСубконто3.ВидСубконто, НЕОПРЕДЕЛЕНО) КАК ВидСубконто3
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Хозрасчетный.ВидыСубконто КАК ВидыСубконто1
	|		ПО Хозрасчетный.Ссылка = ВидыСубконто1.Ссылка
	|			И (ВидыСубконто1.НомерСтроки = 1)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Хозрасчетный.ВидыСубконто КАК ВидыСубконто2
	|		ПО Хозрасчетный.Ссылка = ВидыСубконто2.Ссылка
	|			И (ВидыСубконто2.НомерСтроки = 2)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Хозрасчетный.ВидыСубконто КАК ВидыСубконто3
	|		ПО Хозрасчетный.Ссылка = ВидыСубконто3.Ссылка
	|			И (ВидыСубконто3.НомерСтроки = 3)
	|ГДЕ
	|	Хозрасчетный.Ссылка В (&Субсчета)";
	
	СвойстваСчетов = Запрос.Выполнить().Выгрузить();

	// Определим позиции поля субконто в запросе к виртуальной таблице для субконто каждого субсчета.
	// Например, в оборотах счета по 76 выбрана группировка только по договорам, номер субконто Договоры на счете 76 = 2.
	// В параметре &ВидыСубконто виртуальной таблицы ОстаткиИОбороты() нужно передать только один элемент ПВХ.ВидыСубконтоХозрасчетные.Договоры.
	// Поэтому в запросе договор будет доступно как поле Субконто1.
	// Чтобы оно правильно сопоставилось с полем договоры в настройках СКД, в запросе потребуется заменить его псевдоним:
	//      Субконто1 КАК Субконто2

	ОписаниеТиповЧисло       = ОбщегоНазначения.ОписаниеТипаЧисло(2);
	ОписаниеТиповВидСубконто = Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.ВидыСубконтоХозрасчетные");
	
	ДетальнаяКартаСубконто = Новый ТаблицаЗначений;
	ДетальнаяКартаСубконто.Колонки.Добавить("Счет",         Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	// Виды субконто, которые передаются в параметр &ВидыСубконто виртуальной таблицы.
	ДетальнаяКартаСубконто.Колонки.Добавить("ВидСубконто1", ОписаниеТиповВидСубконто);
	ДетальнаяКартаСубконто.Колонки.Добавить("ВидСубконто2", ОписаниеТиповВидСубконто);
	ДетальнаяКартаСубконто.Колонки.Добавить("ВидСубконто3", ОписаниеТиповВидСубконто);
	// Содержат номер псевдонима (КАК Субконто1, КАК Субконто2, КАК Субконто3) для поля субконто из результата виртуальной таблицы.
	ДетальнаяКартаСубконто.Колонки.Добавить("СубконтоВиртуальнойТаблицыВПозиции1", ОписаниеТиповЧисло);
	ДетальнаяКартаСубконто.Колонки.Добавить("СубконтоВиртуальнойТаблицыВПозиции2", ОписаниеТиповЧисло);
	ДетальнаяКартаСубконто.Колонки.Добавить("СубконтоВиртуальнойТаблицыВПозиции3", ОписаниеТиповЧисло);

	// Для субконто счета группы номера на счете в плане счетов совпадают с позициями псевдонимов в запросе.
	СвойстваСчетаГруппы = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СчетГруппа);
	
	ПозицииСубконтоСчетаГруппы = Новый Соответствие;
	Для Счетчик = 0 По НомераИспользуемыхСубконтоСчетаГруппы.ВГраница() Цикл
		НомерСубконтоСчетаГруппы = НомераИспользуемыхСубконтоСчетаГруппы[Счетчик];
		ПозицииСубконтоСчетаГруппы.Вставить(СвойстваСчетаГруппы["ВидСубконто" + НомерСубконтоСчетаГруппы], НомерСубконтоСчетаГруппы);
	КонецЦикла;

	// Расставляем субконто субсчетов в запросе.
	Для каждого СвойстваСубсчета Из СвойстваСчетов Цикл
	
		СтрокаКарты      = ДетальнаяКартаСубконто.Добавить();
		СтрокаКарты.Счет = СвойстваСубсчета.Счет;
	
		НомерСубконтоВиртуальнойТаблицы = 0;
	
		// Сначала виды субконто, совпадающие со счетом группой, на соответствующие позиции.
		Для НомерСубконтоСубсчета = 1 По 3 Цикл

			ВидСубконтоСубсчета = СвойстваСубсчета["ВидСубконто" + НомерСубконтоСубсчета];
			Если НЕ ЗначениеЗаполнено(ВидСубконтоСубсчета) Тогда
				Продолжить;
			КонецЕсли;
			
			НомерСубконтоСчетаГруппы = ПозицииСубконтоСчетаГруппы[ВидСубконтоСубсчета];
			Если НЕ ЗначениеЗаполнено(НомерСубконтоСчетаГруппы) Тогда
				// У счета группы нет такого вида субконто, либо оно не выбрано в отчете.
				Продолжить;
			КонецЕсли;
			
			НомерСубконтоВиртуальнойТаблицы = НомерСубконтоВиртуальнойТаблицы + 1;
			СтрокаКарты["ВидСубконто" + НомерСубконтоВиртуальнойТаблицы]                 = ВидСубконтоСубсчета;
			СтрокаКарты["СубконтоВиртуальнойТаблицыВПозиции" + НомерСубконтоСчетаГруппы] = НомерСубконтоВиртуальнойТаблицы;
			
			// Очистим вид субконто в таблице выборки из плана счетов, чтобы в дальнейшем его не учитывать.
			СвойстваСубсчета["ВидСубконто" + НомерСубконтоСубсчета] = Неопределено;
			
		КонецЦикла;
		
		// В остальных позиции в запросе подставляем субконто субсчета с тем же номером, что и у счета группы.
		Для каждого НомерСубконто из НомераИспользуемыхСубконтоСчетаГруппы Цикл

			Если НомерСубконтоВиртуальнойТаблицы >= НомераИспользуемыхСубконтоСчетаГруппы.Количество() Тогда
				// Все субконто разместили.
				Прервать;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрокаКарты["СубконтоВиртуальнойТаблицыВПозиции" + НомерСубконто]) Тогда
				// Позиция уже занята.
				Продолжить;
			КонецЕсли;
			
			ВидСубконтоСубсчета = СвойстваСубсчета["ВидСубконто" + НомерСубконто];
			Если НЕ ЗначениеЗаполнено(ВидСубконтоСубсчета) Тогда
				// У субсчета нет субконто с таким номером.
				Продолжить;
			КонецЕсли;
			
			НомерСубконтоВиртуальнойТаблицы = НомерСубконтоВиртуальнойТаблицы + 1;
			СтрокаКарты["ВидСубконто" + НомерСубконтоВиртуальнойТаблицы]        = ВидСубконтоСубсчета;
			СтрокаКарты["СубконтоВиртуальнойТаблицыВПозиции" + НомерСубконто] = НомерСубконтоВиртуальнойТаблицы;
			
			// Очистим вид субконто в таблице выборки из плана счетов, чтобы в дальнейшем его не учитывать.
			СвойстваСубсчета["ВидСубконто" + НомерСубконто] = Неопределено;
			
		КонецЦикла;
	
	КонецЦикла;
	
	// Упорядочиваем для объединения счетов с одинаковыми комбинациями субконто в один запрос к виртуальной таблице.
	ИменаГруппируемыхКолонок = "ВидСубконто1, ВидСубконто2, ВидСубконто3,
		|СубконтоВиртуальнойТаблицыВПозиции1, СубконтоВиртуальнойТаблицыВПозиции2, СубконтоВиртуальнойТаблицыВПозиции3";
	
	ДетальнаяКартаСубконто.Сортировать(ИменаГруппируемыхКолонок);
	
	СвернутаяКартаСубконто = ДетальнаяКартаСубконто.СкопироватьКолонки(
		"СубконтоВиртуальнойТаблицыВПозиции1, СубконтоВиртуальнойТаблицыВПозиции2, СубконтоВиртуальнойТаблицыВПозиции3");
	СвернутаяКартаСубконто.Колонки.Добавить("Счета",        Новый ОписаниеТипов("СписокЗначений"));
	СвернутаяКартаСубконто.Колонки.Добавить("ВидыСубконто", Новый ОписаниеТипов("СписокЗначений"));
	
	СтрокаСвернутойКарты = Неопределено;
	
	Для Индекс = 0 По ДетальнаяКартаСубконто.Количество() - 1 Цикл
		
		СтрокаДетальнойКарты = ДетальнаяКартаСубконто[Индекс];
		Если Индекс > 0 Тогда
			ПредыдущаяСтрокаДетальнойКарты = ДетальнаяКартаСубконто[Индекс - 1];
		КонецЕсли;
	                                                                       
		Если Индекс = 0
			ИЛИ СтрокаДетальнойКарты.ВидСубконто1 <> ПредыдущаяСтрокаДетальнойКарты.ВидСубконто1
			ИЛИ СтрокаДетальнойКарты.ВидСубконто2 <> ПредыдущаяСтрокаДетальнойКарты.ВидСубконто2
			ИЛИ СтрокаДетальнойКарты.ВидСубконто3 <> ПредыдущаяСтрокаДетальнойКарты.ВидСубконто3
			ИЛИ СтрокаДетальнойКарты.СубконтоВиртуальнойТаблицыВПозиции1 <> ПредыдущаяСтрокаДетальнойКарты.СубконтоВиртуальнойТаблицыВПозиции1
			ИЛИ СтрокаДетальнойКарты.СубконтоВиртуальнойТаблицыВПозиции2 <> ПредыдущаяСтрокаДетальнойКарты.СубконтоВиртуальнойТаблицыВПозиции2
			ИЛИ СтрокаДетальнойКарты.СубконтоВиртуальнойТаблицыВПозиции3 <> ПредыдущаяСтрокаДетальнойКарты.СубконтоВиртуальнойТаблицыВПозиции3 Тогда
			
			СтрокаСвернутойКарты = СвернутаяКартаСубконто.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаСвернутойКарты, СтрокаДетальнойКарты);
			
			Для НомерСубконто = 1 По 3 Цикл
				ВидСубконто = СтрокаДетальнойКарты["ВидСубконто" + НомерСубконто];
				Если ЗначениеЗаполнено(ВидСубконто) Тогда
					СтрокаСвернутойКарты.ВидыСубконто.Добавить(ВидСубконто);
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
		// Накапливаем список счетов.
		СтрокаСвернутойКарты.Счета.Добавить(СтрокаДетальнойКарты.Счет);
	
	КонецЦикла;
	
	Возврат СвернутаяКартаСубконто;

КонецФункции

// Дополняет текст наборов данных подзапросами, учитывающими отбор по субконто с несовпадающими номерами.
//
// Параметры:
//  ПараметрыОтчета - Структура - см. ПодготовитьПараметрыОтчета() в ФормаОтчета.
//  Схема        - СхемаКомпоновкиДанных - описание получаемых данных.
//  КомпоновщикНастроек - КомпоновщикНастроекКомпоновкиДанных - связь настроек компоновки данных и схемы компоновки.
//
Процедура ИзменитьСхемуДляОтборовПоСубконтоСубсчетов(ПараметрыОтчета, Схема, КомпоновщикНастроек)
	
	НомераОтбираемыхСубконто = Новый Массив;
  	Для каждого Группировка Из ПараметрыОтчета.Группировка Цикл
		                                                           
  		Если НЕ Группировка.Использование Тогда
  			Продолжить;
  		КонецЕсли;
  	
		Если НЕ СтрНачинаетсяС(Группировка.Поле, "Субконто") Тогда
			Продолжить;
		КонецЕсли;
		
		НомерСубконто = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(Сред(Группировка.Поле, 9, 1));
		Если НомераОтбираемыхСубконто.Найти(НомерСубконто) = Неопределено Тогда
			НомераОтбираемыхСубконто.Добавить(НомерСубконто);
		КонецЕсли;

	КонецЦикла;	
	
	БухгалтерскиеОтчеты.СписокОтборовПоСубконто(КомпоновщикНастроек.Настройки.Отбор.Элементы, НомераОтбираемыхСубконто);
	
	Если НомераОтбираемыхСубконто.Количество() = 0 Тогда // Группировка и отборы по субконто не используются.
		Возврат;
	КонецЕсли;

	// Упорядочим и свернем массив номеров субконто.
	НомераИспользуемыхСубконтоСчетаГруппы = Новый Массив;
	Для НомерСубконто = 1 По БухгалтерскийУчет.МаксимальноеКоличествоСубконто() Цикл
		Если НомераОтбираемыхСубконто.Найти(НомерСубконто) <> Неопределено Тогда
			НомераИспользуемыхСубконтоСчетаГруппы.Добавить(НомерСубконто);
		КонецЕсли;
	КонецЦикла;

	ПараметрСчет = БухгалтерскиеОтчетыКлиентСервер.ПолучитьПараметр(КомпоновщикНастроек, "Счет");
	
	// Проверяем наличие видов субконто субсчетов, которые не совпадают с видами субконто счета-группы.
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СчетГруппа",     ПараметрыОтчета.Счет);
	Запрос.УстановитьПараметр("Субсчета",       ПараметрСчет.Значение);
	Запрос.УстановитьПараметр("НомераИспользуемыхСубконтоСчетаГруппы", НомераИспользуемыхСубконтоСчетаГруппы);
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ХозрасчетныйВидыСубконто_СчетГруппа.НомерСтроки КАК НомерСубконто,
	|	ХозрасчетныйВидыСубконто_Субсчета.НомерСтроки КАК НомерСубконтоСубсчета,
	|	Хозрасчетный_Субсчета.Ссылка КАК Субсчет
	|ИЗ
	|	ПланСчетов.Хозрасчетный.ВидыСубконто КАК ХозрасчетныйВидыСубконто_СчетГруппа
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланСчетов.Хозрасчетный КАК Хозрасчетный_Субсчета
	|		ПО (Хозрасчетный_Субсчета.Ссылка В (&Субсчета))
	|			И (Хозрасчетный_Субсчета.Ссылка <> &СчетГруппа)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Хозрасчетный.ВидыСубконто КАК ХозрасчетныйВидыСубконто_Субсчета
	|		ПО (Хозрасчетный_Субсчета.Ссылка = ХозрасчетныйВидыСубконто_Субсчета.Ссылка)
	|			И ХозрасчетныйВидыСубконто_СчетГруппа.ВидСубконто = ХозрасчетныйВидыСубконто_Субсчета.ВидСубконто
	|ГДЕ
	|	ХозрасчетныйВидыСубконто_СчетГруппа.Ссылка = &СчетГруппа
	|	И ХозрасчетныйВидыСубконто_СчетГруппа.НомерСтроки В(&НомераИспользуемыхСубконтоСчетаГруппы)
	|	И ХозрасчетныйВидыСубконто_СчетГруппа.НомерСтроки <> ЕСТЬNULL(ХозрасчетныйВидыСубконто_Субсчета.НомерСтроки, 0)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Субсчет";
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда // нет несовпадающих видов субконто среди субсчетов
		Возврат;
	КонецЕсли;
	
	КартаСубконто = КартаСубконто(ПараметрыОтчета.Счет, НомераИспользуемыхСубконтоСчетаГруппы, ПараметрСчет.Значение);
	
	ПодготовитьСхемуКомпоновкиДанныхДляИзменения(ПараметрыОтчета, Схема, КомпоновщикНастроек);
	
	ТекстОсновнойНаборДанных = Схема.НаборыДанных.ОстаткиИОборотыПоКорсчетам.Элементы.ОсновнойНаборДанных.Запрос;
	ТекстОбороты = Схема.НаборыДанных.ОстаткиИОборотыПоКорсчетам.Элементы.Обороты.Запрос;

	Для НомерКомбинацииСубконто = 1 По КартаСубконто.Количество() Цикл

		СтрокаКарты = КартаСубконто[НомерКомбинацииСубконто - 1];
		
		ТекстЗапроса = ЗаменитьНомераСубконтоВТексте(ТекстОсновнойНаборДанных, СтрокаКарты);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Счет", "&Счет" + НомерКомбинацииСубконто);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ВидыСубконто", "&ВидыСубконто" + НомерКомбинацииСубконто);
		ОсновнойНаборДанныхСводный = ?(НомерКомбинацииСубконто > 1, ОсновнойНаборДанныхСводный + "
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|", "") + ТекстЗапроса;
		
		ТекстЗапроса = ЗаменитьНомераСубконтоВТексте(ТекстОбороты, СтрокаКарты);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Счет", "&Счет" + НомерКомбинацииСубконто);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ВидыСубконто",
			?(СтрокаКарты.ВидыСубконто.Количество() = 0, "", "&ВидыСубконто" + НомерКомбинацииСубконто));
		ОборотыСводный = ?(НомерКомбинацииСубконто > 1, ОборотыСводный + "
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|", "") + ТекстЗапроса;
		
		Если НомерКомбинацииСубконто = 1 Тогда

			// Для подзапросов, начиная со второго, исключим из текста шаблона недопустимые 
			// конструкции языка запросов (РАЗРЕШЕННЫЕ и др.).
			УдалитьОднократноИспользуемыеКонструкцииЗапроса(ТекстОсновнойНаборДанных);
			УдалитьОднократноИспользуемыеКонструкцииЗапроса(ТекстОбороты);
			
		КонецЕсли;
		
	КонецЦикла; 

	// Заново инициализируем СКД, чтобы стали доступны параметры-списки счетов и видов субконто для подзапросов.
	Схема.НаборыДанных.ОстаткиИОборотыПоКорсчетам.Элементы.ОсновнойНаборДанных.Запрос = ОсновнойНаборДанныхСводный;
	Схема.НаборыДанных.ОстаткиИОборотыПоКорсчетам.Элементы.Обороты.Запрос = ОборотыСводный;
	Для НомерКомбинацииСубконто = 1 По КартаСубконто.Количество() Цикл
	
		СтрокаКарты = КартаСубконто[НомерКомбинацииСубконто - 1];

		ПараметрСхемы = Схема.Параметры.Добавить();
		ПараметрСхемы.Имя                      = "Счет" + НомерКомбинацииСубконто;
		ПараметрСхемы.Заголовок                = ПараметрСхемы.Имя;
		ПараметрСхемы.ТипЗначения              = Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный");
		ПараметрСхемы.ДоступенСписокЗначений   = Истина;
		ПараметрСхемы.ВключатьВДоступныеПоля   = Истина;
		ПараметрСхемы.ОграничениеИспользования = Истина;
	
		
		ПараметрСхемы = Схема.Параметры.Добавить();
		ПараметрСхемы.Имя                      = "ВидыСубконто" + НомерКомбинацииСубконто;
		ПараметрСхемы.Заголовок                = ПараметрСхемы.Имя;
		ПараметрСхемы.ТипЗначения              = Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.ВидыСубконтоХозрасчетные");
		ПараметрСхемы.ДоступенСписокЗначений   = Истина;
		ПараметрСхемы.ВключатьВДоступныеПоля   = Истина;
		ПараметрСхемы.ОграничениеИспользования = Истина;
	
	КонецЦикла;

	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(Схема));
	Для НомерКомбинацииСубконто = 1 По КартаСубконто.Количество() Цикл

		СтрокаКарты = КартаСубконто[НомерКомбинацииСубконто - 1];

		БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(
			КомпоновщикНастроек,
			"Счет" + НомерКомбинацииСубконто,
			СтрокаКарты.Счета);
			
		БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(
			КомпоновщикНастроек,
			"ВидыСубконто" + НомерКомбинацииСубконто,
			СтрокаКарты.ВидыСубконто);
	
	КонецЦикла;
	
КонецПроцедуры

Процедура ПодготовитьСхемуКомпоновкиДанныхДляИзменения(ПараметрыОтчета, Схема, КомпоновщикНастроек)

	// При изменении счета на форме отчета для полей наборов схемы назначаются заголовки и типы значений
	// в соответствии с видами субконто на выбранном счете.
	// Т.к. сейчас для работы будем использовать новый объект Схема на основе типового макета,
	// то повторим эти настройки полей для нового объекта схемы.

	Если КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Свойство("ИзмененТекстЗапросаСКД") Тогда
		// В схему уже ранее были внесены изменения в рамках текущего сеанса формирования отчета, 
		// повторно получать типовую схему из макета отчета не требуется.
		Возврат;
	КонецЕсли;

	// Запомним, что схему уже изменили.
	КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Вставить("ИзмененТекстЗапросаСКД", Истина);

	Схема = ПолучитьМакет("СхемаКомпоновкиДанных");
	
	НастроитьСхемуКомпоновкиДанных(ПараметрыОтчета, Схема);

КонецПроцедуры

#КонецОбласти

#КонецЕсли