&НаКлиенте
Перем ПараметрыОбработчикаОжидания; 

&НаКлиенте
Перем ПараметрыОбработчикаОжиданияАктуализации Экспорт;

&НаКлиенте
Перем СуммируемыеЯчейки;

#Область СлужебныйПрограммныйИнтерфейс

#Область БухгалтерскиеОтчеты

Функция СформироватьОтчетНаСервере() Экспорт
	
	// Экспортный метод - для совместимости с подсистемой БухгалтерскиеОтчеты.
	// Запрещено переопределять в нем что-либо.
	
	Возврат СправкиРасчеты.СформироватьОтчет(ЭтотОбъект, СобытияФормированияОтчета());
	
КонецФункции

&НаКлиенте
Функция ПолучитьПараметрыВыбораЗначенияОтбора() Экспорт
	
	Возврат НовыйПараметрыВыбораЗначенияОтбора();
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	СтандартныеГруппировки = Истина; // в настройках пользователя может быть другое значение
	
	Отчеты.СправкаРасчетКалькуляцияСебестоимости.ЗаполнитьОграничениеИнтерактивнойНастройки(ОграничениеИнтерактивнойНастройки);
	
	СправкиРасчеты.ИнициализироватьФорму(ЭтотОбъект, Отказ, СтандартнаяОбработка, СобытияФормированияОтчета());
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	НачатьДействияПриОткрытии();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	СправкиРасчетыКлиент.ПередСохранениемНастроек(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	БухгалтерскиеОтчетыКлиент.ПриЗакрытии(ЭтаФорма, ЗавершениеРаботы);
	
КонецПроцедуры

&НаСервере
Процедура ПриОбновленииСоставаПользовательскихНастроекНаСервере(СтандартнаяОбработка)
	
	ИнициализироватьГруппировки();
	
КонецПроцедуры

&НаСервере
Процедура ПриСохраненииПользовательскихНастроекНаСервере(Настройки)
	
	ПрименитьГруппировки(Настройки);
	Настройки.ДополнительныеСвойства.Вставить("СтандартныеГруппировки",СтандартныеГруппировки);
	БухгалтерскиеОтчетыВызовСервера.ПриСохраненииПользовательскихНастроекНаСервере(ЭтаФорма, Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеПользовательскихНастроекНаСервере(Настройки)
	
	Если Настройки.ДополнительныеСвойства.Свойство("СтандартныеГруппировки") Тогда
		СтандартныеГруппировки = Настройки.ДополнительныеСвойства.СтандартныеГруппировки;
	КонецЕсли;
	
	СправкиРасчеты.ПрименитьЗагруженныеПользовательскиеНастройки(ЭтотОбъект, Настройки, НастройкиГруппировок());
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	БухгалтерскийУчетКлиентПереопределяемый.ОбработкаОповещенияАктуализации(ЭтотОбъект, Отчет.Организация, Отчет.КонецПериода, ИмяСобытия, Параметр, Источник);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

#Область Контекст

&НаКлиенте
Процедура НачалоПериодаПриИзменении(Элемент)
	
	НастроитьПериодНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура КонецПериодаПриИзменении(Элемент)
	
	НастроитьПериодНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьПериод(Команда)
	
	СправкиРасчетыКлиент.НачатьВыборИнтервала(
		ЭтотОбъект,
		Новый ОписаниеОповещения("ВыборПериода", ЭтотОбъект));
	
	// См. далее ВыборПериода()
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборПериода(РезультатВыбора, НеиспользуемыйОбязательныйПараметр) Экспорт // обработчик оповещения
	
	// По аналогии с СправкиРасчетыКлиент.ВыборПериода
	
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СправкиРасчетыКлиентСервер.ОтметитьОтчетНеАктуальный(ЭтотОбъект);
	
	Отчет.НачалоПериода = РезультатВыбора.НачалоПериода;
	Отчет.КонецПериода  = РезультатВыбора.КонецПериода;
	
	НастроитьПериодНаКлиенте(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	Если СправкиРасчетыКлиентСервер.ОрганизацияВыбранаПовторно(Отчет.Организация, ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	ОрганизацияПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()
	
	СправкиРасчеты.ОрганизацияПриИзменении(ЭтотОбъект);
	
	// Получаем текущие группировки, если у нас установлены стандартные группировки и открыты настройки отчета
	Если ОткрытыНастройкиОтчета И СтандартныеГруппировки Тогда
		ВосстановитьГруппировкиНаСервере();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Настройки

&НаКлиенте
Процедура ПереключательПриИзменении(Элемент)
	
	СправкиРасчетыКлиентСервер.НастроитьКнопкиСохраненияРегистровБухгалтерскогоУчета(ЭтотОбъект, Отчет.НаборПоказателейОтчета);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийПоляТабличногоДокумента

&НаКлиенте
Процедура РезультатПриАктивизацииОбласти(Элемент)
	
	БухгалтерскиеОтчетыКлиент.НачатьРасчетСуммыВыделенныхЯчеек(
		Результат,
		ЭтотОбъект,
		ИмяОбработчикаВыделенаОбластьЯчеек());
	
КонецПроцедуры

&НаКлиенте
Процедура РезультатОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	
	БухгалтерскиеОтчетыКлиент.ОбработкаРасшифровкиСтандартногоОтчета(ЭтаФорма, Элемент, Расшифровка, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура РезультатОбработкаДополнительнойРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	
	// Не будем обрабатывать нажатие на правую кнопку мыши.
	// Покажем стандартное контекстное меню ячейки табличного документа.
	Расшифровка = Неопределено;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиКомандФормы

#Область ОсновныеКоманды

&НаКлиенте
Процедура СформироватьОтчет(Команда)
	
	НачатьФормированиеОтчета();
	
КонецПроцедуры

#КонецОбласти

#Область КомандыАктуализацияДанных

&НаКлиенте
Процедура Актуализировать(Команда)
	
	БухгалтерскийУчетКлиентПереопределяемый.Актуализировать(ЭтотОбъект, Отчет.Организация, Отчет.КонецПериода);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьАктуализацию(Команда)
	
	БухгалтерскийУчетКлиентПереопределяемый.ОтменитьАктуализацию(ЭтотОбъект, Отчет.Организация, Отчет.КонецПериода);
	
КонецПроцедуры

&НаКлиенте
Процедура СкрытьНажатие(Элемент)
	
	БухгалтерскийУчетКлиентПереопределяемый.СкрытьПанельАктуализации(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область КомандыРегистровБухгалтерскогоУчета

&НаКлиенте
Процедура СохранитьРегистрУчета(Команда)
				
	РегистрыУчетаКлиент.СохранитьРегистрУчета(ЭтаФорма);		
			
КонецПроцедуры

&НаКлиенте
Процедура СохранитьРегистрУчетаИПодписатьЭП(Команда)
	
	РегистрыУчетаКлиент.СохранитьРегистрУчета(ЭтаФорма, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьАрхивРегистровУчета(Команда)
	
	РегистрыУчетаКлиент.ОткрытьАрхивРегистровУчета(ЭтаФорма);

КонецПроцедуры

#КонецОбласти


#КонецОбласти

#Область ОбработчикиПодключаемыеПодсистемойБухгалтерскиеОтчеты

&НаКлиенте
Процедура Подключаемый_ПроверитьАктуальность()
	
	БухгалтерскийУчетКлиентПереопределяемый.ПроверитьАктуальность(ЭтотОбъект, Отчет.Организация, Отчет.КонецПериода);

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеАктуализации()
	
	БухгалтерскийУчетКлиентПереопределяемый.ПроверитьВыполнениеАктуализацииОтчета(ЭтотОбъект, Отчет.Организация, Отчет.КонецПериода);

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПроверитьЗавершениеАктуализации()
	
	БухгалтерскийУчетКлиентПереопределяемый.ПроверитьЗавершениеАктуализации(ЭтотОбъект, Отчет.Организация, Отчет.КонецПериода);
	
КонецПроцедуры

#КонецОбласти

#Область СтандартныеОбработчикиЭлементовФормы

// Процедуры этого раздела в основном кэшируют код подсистемы БухгалтерскиеОтчеты

#Область СписокОтборы

&НаКлиенте
Процедура ОтборыПриИзменении(Элемент)
	
	БухгалтерскиеОтчетыКлиент.ОтборыПриИзменении(ЭтаФорма, Элемент, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	БухгалтерскиеОтчетыКлиент.ОтборыПередНачаломДобавления(ЭтаФорма, Элемент, Отказ, Копирование, Родитель, Группа);

КонецПроцедуры

&НаКлиенте
Процедура ОтборыПередНачаломИзменения(Элемент, Отказ)
	
	БухгалтерскиеОтчетыКлиент.ОтборыПередНачаломИзменения(ЭтаФорма, Элемент, Отказ);	
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборыПравоеЗначениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СписокПараметров = ПолучитьПараметрыВыбораЗначенияОтбора();
	БухгалтерскиеОтчетыКлиент.ОтборыПравоеЗначениеНачалоВыбора(ЭтаФорма, Элемент, ДанныеВыбора, СтандартнаяОбработка, СписокПараметров);
	
КонецПроцедуры

#КонецОбласти

#Область СписокОформление

&НаКлиенте
Процедура МакетОформленияПриИзменении(Элемент)
	
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметрВывода(Отчет.КомпоновщикНастроек.Настройки, "МакетОформления", МакетОформления);
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыводитьЗаголовокПриИзменении(Элемент)

	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВыводитьПодвалПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВыводитьЕдиницуИзмеренияПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область НастройкаПоПериоду

// Изменение периода может требовать дорогого контекстного вызова сервера, но часто - не требует.

&НаКлиенте
Процедура НастроитьПериодНаКлиенте(ЦелыйИнтервал = Ложь)
	
	ТребуетсяВызовСервера = Новый Структура;
	
	СправкиРасчетыКлиентСервер.ОтметитьОтчетНеАктуальный(ЭтотОбъект);
	
	// Настроим период, определяемый двумя датами.
	ИнформацияНалоговыйПериод = СправкиРасчетыКлиент.НастроитьПериодИнтервал(ЭтотОбъект, ЦелыйИнтервал);
	Если ИнформацияНалоговыйПериод <> Неопределено Тогда
		ТребуетсяВызовСервера.Вставить("НастроитьЭлементИнформацияНалоговыйПериод", ИнформацияНалоговыйПериод);
	КонецЕсли;
	
	Если ОткрытыНастройкиОтчета И СтандартныеГруппировки Тогда
		// Получаем текущие группировки, если у нас установлены стандартные группировки и открыты настройки отчета
		ТребуетсяВызовСервера.Вставить("ВосстановитьГруппировки");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТребуетсяВызовСервера) Тогда
		
		НастроитьПериодНаСервере(ТребуетсяВызовСервера);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьПериодНаСервере(ТребуетсяВызовСервера)
	
	Если ТребуетсяВызовСервера.Свойство("НастроитьЭлементИнформацияНалоговыйПериод") Тогда
		СправкиРасчеты.НастроитьЭлементИнформацияНалоговыйПериод(
			ЭтотОбъект,
			ТребуетсяВызовСервера.НастроитьЭлементИнформацияНалоговыйПериод);
	КонецЕсли;
	
	Если ТребуетсяВызовСервера.Свойство("ВосстановитьГруппировки") Тогда
		ВосстановитьГруппировкиНаСервере();
	КонецЕсли;
	
КонецПроцедуры		

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Функция ПараметрыЗаполненияГруппировок()
	
	ПараметрыЗаполненияГруппировок = Отчеты.СправкаРасчетКалькуляцияСебестоимости.НовыйПараметрыЗаполненияГруппировок();
	ПараметрыЗаполненияГруппировок.НастройкиГруппировок   = НастройкиГруппировок();
	ПараметрыЗаполненияГруппировок.СтандартныеГруппировки = СтандартныеГруппировки;
	ПараметрыЗаполненияГруппировок.НачалоПериода          = Отчет.НачалоПериода;
	ПараметрыЗаполненияГруппировок.КонецПериода           = Отчет.КонецПериода;
	ПараметрыЗаполненияГруппировок.Организация            = Отчет.Организация;
	
	Возврат ПараметрыЗаполненияГруппировок;
	
КонецФункции


&НаСервере
Функция СобытияФормированияОтчета()
	
	События = Новый Структура;
	События.Вставить("ЗаполнитьПользовательскиеНастройкиДаннымиФормы", ПараметрыЗаполненияГруппировок());
	
	Возврат События;
	
КонецФункции

#Область ОбработкаОжидания

&НаСервере
Процедура ОтобразитьРезультатОтчета()

	СправкиРасчеты.ОтобразитьРезультатОтчета(ЭтотОбъект);

КонецПроцедуры

#КонецОбласти

#Область РасчетСуммыВыделенныхЯчеек

&НаКлиенте
Функция ИмяОбработчикаВыделенаОбластьЯчеек()
	Возврат "Подключаемый_ВыделенаОбластьЯчеек";
КонецФункции

&НаКлиенте
Процедура Подключаемый_ВыделенаОбластьЯчеек()
	
	ТребуетсяВызовСервера = БухгалтерскиеОтчетыКлиент.ВычислитьСуммуВыделенныхЯчеекТабличногоДокумента(
		СуммаВыделенныхЯчеек,
		Результат,
		СуммируемыеЯчейки);

	Если ТребуетсяВызовСервера Тогда
		РассчитатьСуммуВыделенныхЯчеекНаСервере(СуммируемыеЯчейки);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьСуммуВыделенныхЯчеекНаСервере(Знач СуммируемыеЯчейки)
	
	СуммаВыделенныхЯчеек = БухгалтерскиеОтчетыВызовСервера.ВычислитьСуммуВыделенныхЯчеекТабличногоДокумента(
		Результат,
		СуммируемыеЯчейки);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область КэшКодаБухгалтерскиеОтчеты

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеЗадания()
	
	Попытка
		Если ЗаданиеВыполнено(ИдентификаторЗадания) Тогда
			ОтобразитьРезультатОтчета();
			БухгалтерскийУчетКлиентПереопределяемый.ПослеФормированияОтчета(ЭтотОбъект);
		Иначе
			ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
			ПодключитьОбработчикОжидания(
				"Подключаемый_ПроверитьВыполнениеЗадания",
				ПараметрыОбработчикаОжидания.ТекущийИнтервал,
				Истина);
		КонецЕсли;
	Исключение
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеИспользовать");
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаданиеВыполнено(ИдентификаторЗадания)
	
	Возврат ДлительныеОперации.ЗаданиеВыполнено(ИдентификаторЗадания);
	
КонецФункции

&НаКлиенте
Процедура НачатьФормированиеОтчета()
	
	ОчиститьСообщения();
	
	РезультатВыполнения = СформироватьОтчетНаСервере();
	Если Не РезультатВыполнения.ЗаданиеВыполнено Тогда
		
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "ФормированиеОтчета");
		
	ИначеЕсли НЕ РезультатВыполнения.Свойство("ОтказПроверкиЗаполнения") Тогда 
		БухгалтерскийУчетКлиентПереопределяемый.ПослеФормированияОтчета(ЭтотОбъект);
	КонецЕсли;
	
	Если РезультатВыполнения.Свойство("ОтказПроверкиЗаполнения") Тогда
		ПоказатьНастройки("");
	Иначе	
		СкрытьНастройки();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьЗапрещенныеПоля(Режим = "") Экспорт
	
	СписокПолей = Новый Массив;
	
	// Общие для всех отчетов
	СписокПолей.Добавить("UserFields");
	СписокПолей.Добавить("DataParameters");
	СписокПолей.Добавить("SystemFields");
	СписокПолей.Добавить("Показатели");
	СписокПолей.Добавить("Параметры");
	СписокПолей.Добавить("Ресурсы");
	СписокПолей.Добавить("Группировки");
	СписокПолей.Добавить("Организация");
	
	// Особенные для этого отчета
	Если ПустаяСтрока(Режим) Тогда
		ОтобранныеСтроки = ОграничениеИнтерактивнойНастройки;
	Иначе
		Отбор = Новый Структура;
		Отбор.Вставить("РольПоля", Режим);
		ОтобранныеСтроки = ОграничениеИнтерактивнойНастройки.НайтиСтроки(Отбор);
	КонецЕсли;
	
	Для Каждого ОписаниеПоля Из ОтобранныеСтроки Цикл
		СписокПолей.Добавить(ОписаниеПоля.ИмяПоля);
	КонецЦикла;
	
	Возврат Новый ФиксированныйМассив(СписокПолей);
	
КонецФункции

&НаКлиенте
Функция НовыйПараметрыВыбораЗначенияОтбора()
	
	ПараметрыВыбора = Новый Структура;
	ПараметрыВыбора.Вставить("Дата");
	ПараметрыВыбора.Вставить("Организация");
	ПараметрыВыбора.Вставить("Номенклатура");
	ПараметрыВыбора.Вставить("Склад");
	ПараметрыВыбора.Вставить("Контрагент");
	ПараметрыВыбора.Вставить("ДоговорКонтрагента");
	
	ПараметрыВыбора.Дата        = Отчет.КонецПериода;
	ПараметрыВыбора.Организация = Отчет.Организация;
	
	Возврат ПараметрыВыбора;
	
КонецФункции

#Область ОтображениеСтраницыНастроек

&НаКлиенте
Процедура ОткрытьНастройки()
	
	Элементы.РазделыОтчета.ТекущаяСтраница = Элементы.НастройкиОтчета;
	
	//Если используются автоматические группировки, то их нужно обновить
	ОткрытыНастройкиОтчета = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьНастройки(Команда)
	
	Элементы.ПрименитьНастройки.КнопкаПоУмолчанию = Истина;
	
	ОткрытьНастройки();
	
КонецПроцедуры

&НаКлиенте
Процедура СкрытьНастройки()
	
	Элементы.РазделыОтчета.ТекущаяСтраница = Элементы.Отчет;
	
	ОткрытыНастройкиОтчета = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьНастройки(Команда)
	
	Элементы.Сформировать.КнопкаПоУмолчанию = Истина;
	СкрытьНастройки();
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура НачатьДействияПриОткрытии()
	
	ПодключитьОбработчикОжидания = ЗначениеЗаполнено(ИдентификаторЗадания);
	Если ПодключитьОбработчикОжидания Тогда		
		
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "ФормированиеОтчета");
			
	ИначеЕсли Отчет.РежимРасшифровки Тогда
		
		БухгалтерскийУчетКлиентПереопределяемый.ПослеФормированияОтчета(ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

#Область АктуализацияДанных

&НаКлиенте
Процедура ТекстПриНеобходимостиАктуализацииОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	ПараметрыАктуализации = ЗакрытиеМесяцаКлиентСервер.НовыйПараметрыАктуализацииОтчета();
	ПараметрыАктуализации.Вставить("Организация",                       Отчет.Организация);
	ПараметрыАктуализации.Вставить("ВключатьОбособленныеПодразделения", Отчет.ВключатьОбособленныеПодразделения);
	ПараметрыАктуализации.Вставить("ДатаАктуальности",                  ДатаАктуальности);
	ПараметрыАктуализации.Вставить("ДатаОкончанияАктуализации",         Отчет.КонецПериода);

	ЗакрытиеМесяцаКлиент.ТекстПриНеобходимостиАктуализацииОбработкаНавигационнойСсылки(
		НавигационнаяСсылкаФорматированнойСтроки,
		СтандартнаяОбработка,
		ЭтотОбъект,
		ПараметрыАктуализации);
	
КонецПроцедуры

&НаКлиенте
// См. ЗакрытиеМесяцаКлиент.ТекстПриНеобходимостиАктуализацииОбработкаНавигационнойСсылки
Процедура ЗакрытиеМесяцаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = "СформироватьОтчет" Тогда
		
		БухгалтерскийУчетКлиентПереопределяемый.СкрытьПанельАктуализации(ЭтотОбъект);
		Активизировать();
		НачатьФормированиеОтчета();
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Группировки

&НаКлиенте
Процедура ИзменитьФлажки(Группировки, Использование)
	
	СтандартныеГруппировки = Ложь;
	
	Для каждого СтрокаТаблицы Из Группировки Цикл
		Если СтрокаТаблицы.Использование <> Использование Тогда
			Если СтрокаТаблицы.Представление = "Продукция" Тогда
				СтрокаТаблицы.Использование = Истина;
			Иначе
				СтрокаТаблицы.Использование = Использование;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппировкаШапкиУстановитьФлажки(Команда)
	
	ИзменитьФлажки(ГруппировкиОбщие, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппировкаШапкиСнятьФлажки(Команда)
	
	ИзменитьФлажки(ГруппировкиОбщие, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппировкаТаблицыУстановитьФлажки(Команда)
	
	ИзменитьФлажки(ГруппировкиТаблицы, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппировкаТаблицыСнятьФлажки(Команда)
	
	ИзменитьФлажки(ГруппировкиТаблицы, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ВосстановитьГруппировки(Команда)
	
	ВосстановитьГруппировкиНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьГруппировкиНаСервере()
	
	СтандартныеГруппировки = Истина;
	
	Схема = ПолучитьИзВременногоХранилища(СхемаКомпоновкиДанных);
	ВариантПоУмолчанию = Схема.ВариантыНастроек.Найти(КлючТекущегоВарианта);
	
	Если ВариантПоУмолчанию = Неопределено Тогда
		Возврат;
	КонецЕсли;
		
	ИсточникДоступныхНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных);
	КомпоновщикПользовательскихНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикПользовательскихНастроек.Инициализировать(ИсточникДоступныхНастроек);
	КомпоновщикПользовательскихНастроек.ЗагрузитьНастройки(ВариантПоУмолчанию.Настройки);
	Отчет.КомпоновщикНастроек.ЗагрузитьПользовательскиеНастройки(КомпоновщикПользовательскихНастроек.ПользовательскиеНастройки);
	
	ИнициализироватьГруппировки();
		
	// устанавливаем автоматические группировки
	Отчеты.СправкаРасчетКалькуляцияСебестоимости.УстановитьСтандартныеГруппировки(ПараметрыЗаполненияГруппировок());
	
КонецПроцедуры


&НаСервере
Функция НастройкиГруппировок()
	
	НастройкиГруппировок = Новый Массив;// Группировки отчета показываем на форме раздельно для "шапки" и таблицы
	НастройкиГруппировок.Добавить(ГруппировкиОбщие);// шапка
	НастройкиГруппировок.Добавить(ГруппировкиТаблицы);
	
	Возврат НастройкиГруппировок;
	
КонецФункции

&НаСервере
Процедура ИнициализироватьГруппировки()
	
	СправкиРасчеты.ИнициализироватьГруппировки(НастройкиГруппировок(), Отчет.КомпоновщикНастроек, "СправкаРасчетКалькуляцияСебестоимости");
	
КонецПроцедуры

&НаСервере
Процедура ПрименитьГруппировки(ПользовательскиеНастройки)
	
	СправкиРасчеты.ПрименитьГруппировки(ПользовательскиеНастройки, НастройкиГруппировок());
	
КонецПроцедуры

&НаКлиенте
Процедура ОбщаяНастройкаОтчетаИспользованиеПриИзменении(Элемент)
	
	СтандартныеГруппировки = Ложь;
	
	Если Элементы.ГруппировкиОбщие.ТекущиеДанные.Представление = "Продукция" Тогда
		Элементы.ГруппировкиОбщие.ТекущиеДанные.Использование = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаТаблицОтчетаИспользованиеПриИзменении(Элемент)
	СтандартныеГруппировки = Ложь;
КонецПроцедуры

#КонецОбласти

#КонецОбласти
