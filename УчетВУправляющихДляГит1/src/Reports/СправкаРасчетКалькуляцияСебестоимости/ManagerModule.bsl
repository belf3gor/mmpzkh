#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область ПрограммныйИнтерфейс

#Область БухгалтерскиеОтчеты

Функция ПолучитьПараметрыИсполненияОтчета() Экспорт
	
	ПараметрыИсполнения = Новый Структура;
	ПараметрыИсполнения.Вставить("ИспользоватьПередКомпоновкойМакета", Истина);
	ПараметрыИсполнения.Вставить("ИспользоватьПослеВыводаРезультата",  Истина);
	ПараметрыИсполнения.Вставить("ИспользоватьПриВыводеЗаголовка",     Истина);
	ПараметрыИсполнения.Вставить("ИспользоватьДанныеРасшифровки",      Ложь);

	Возврат ПараметрыИсполнения;

КонецФункции

Функция ЗаполнитьОграничениеИнтерактивнойНастройки(Ограничение) Экспорт
	
	ОграничениеОтбора = Новый Массив;
	ОграничениеОтбора.Добавить("ПериодЗатрат");
	ОграничениеОтбора.Добавить("СчетРасходов");
	ОграничениеОтбора.Добавить("ЭлементЗатрат");
	ОграничениеОтбора.Добавить("СтатьяЗатрат");
	ОграничениеОтбора.Добавить("Материал");
	
	Для Каждого ИмяПоля Из ОграничениеОтбора Цикл
		ЗаписьОграничение = Ограничение.Добавить();
		ЗаписьОграничение.РольПоля = "Отбор";
		ЗаписьОграничение.ИмяПоля  = ИмяПоля;
	КонецЦикла;
	
КонецФункции

#КонецОбласти

#Область СправкиРасчеты

// Определяет поддерживаемый набор суммовых показателей справки-расчета.
// См. соответствующие методы модулей подсистемы СправкиРасчеты.
// Справка-расчет должна поддерживать хотя бы один набор.
// Если поддерживается несколько наборов, то конкретный набор выбирается в форме
// и передается через свойство отчета НаборПоказателейОтчета.
//
// Возвращаемое значение:
//  Массив - номера наборов суммовых показателей.
//
Функция ПоддерживаемыеНаборыСуммовыхПоказателей() Экспорт
	
	Возврат СправкиРасчетыКлиентСервер.ВсеНаборыСуммовыхПоказателей();
	
КонецФункции

// Определяет набор группировок отчета, которые в силу функциональных опций должны быть недоступны
// для выбора пользователем.
//
// Возвращаемое значение:
//  Массив - имена группировок
//
Функция ГруппировкиЗапрещенныеФункциональнымиОпциями() Экспорт
	
	ЗапрещенныеГруппировки = Новый Массив;
	
	Если Не ПолучитьФункциональнуюОпцию("ВестиУчетЗатратПоПодразделениям") Тогда
		ЗапрещенныеГруппировки.Добавить("Подразделение");
	КонецЕсли;
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоНоменклатурныхГрупп") Тогда
		ЗапрещенныеГруппировки.Добавить("НоменклатурнаяГруппа");
	КонецЕсли;
	
	Возврат ЗапрещенныеГруппировки;
	
КонецФункции

#КонецОбласти

#КонецОбласти
	
#Область НастройкиОтчета

// Будущий программный интерфейс

Функция ПоляПоВидамУчета()
	
	ПоляПоВидамУчета = Новый Соответствие;
	ПоляПоВидамУчета.Вставить("Сумма",                  "БУ");
	ПоляПоВидамУчета.Вставить("СуммаВР",                "ВР");
	ПоляПоВидамУчета.Вставить("СуммаНУ",                "НУ");
	ПоляПоВидамУчета.Вставить("СуммаПР",                "ПР");
	ПоляПоВидамУчета.Вставить("СебестоимостьЕдиницы",   "БУ");
	ПоляПоВидамУчета.Вставить("СебестоимостьЕдиницыНУ", "НУ");
	ПоляПоВидамУчета.Вставить("ЦенаМатериала",          "БУ");
	ПоляПоВидамУчета.Вставить("ЦенаМатериалаНУ",        "НУ");
	Возврат ПоляПоВидамУчета;
	
КонецФункции

#КонецОбласти

#Область ТонкаяНастройка

Функция ВидыУчета(ПараметрыОтчета)
	
	ВидыУчета = Новый Массив;
	Для Каждого ВидУчета Из ПолучитьНаборПоказателей() Цикл
		Если ПараметрыОтчета["Показатель" + ВидУчета] Тогда
			ВидыУчета.Добавить(ВидУчета);
		КонецЕсли;
	КонецЦикла;
	Возврат ВидыУчета;
	
КонецФункции

Процедура НастроитьОбъединениеЗаголовкаГруппировокТаблицы(Настройки)
	
	// Для таблицы КалькуляцияПродукции следует вывести единый заголовок для всех группировок, поскольку они относятся к одной теме.
	// Это обеспечивается так: выводим единый заголовок в первой группировке, не выводим никакой заголовок в остальных.
	// Для этого назначаем всем группировкам таблицы, кроме первой, пустой макет группировки (он заранее помещен в схему).
	
	ЕдиныйЗаголовок = НСтр("ru = 'Затраты'");
	
	Отбор = Новый Структура;
	Отбор.Вставить("ИмяТаблицы",      "КалькуляцияПродукции");
	Отбор.Вставить("Направление",     "Строки");
	Отбор.Вставить("Состояние",       СостояниеЭлементаНастройкиКомпоновкиДанных.Включен);
	Отбор.Вставить("КоличествоПолей", 1);
	
	ОбъединяемыеГруппировки = Новый Массив;
	БухгалтерскиеОтчеты.НайтиГруппировкиТаблицы(ОбъединяемыеГруппировки, Настройки.Структура, Отбор);
	
	Если ОбъединяемыеГруппировки.Количество() < 2 Тогда
		Возврат;
	КонецЕсли;
	
	ОбъединяемыеГруппировки[0].Выбор.Элементы[0].Заголовок = ЕдиныйЗаголовок;
	
	Для Индекс = 1 По ОбъединяемыеГруппировки.ВГраница() Цикл
		ОбъединяемыеГруппировки[Индекс].Имя = "ОбъединенныйЗаголовок";
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ДанныеПрошлыхПериодов

Процедура ДобавитьДанныеПрошлыхПериодовВРегистр(НачалоПериода, КонецПериода, Организация)
	
	Если Не ПравоДоступа("Просмотр", Метаданные.РегистрыБухгалтерии.Хозрасчетный) Тогда
		Возврат;
	КонецЕсли;
	
	МесяцыДляЗаполнения = МесяцыДляЗаполненияРегистра(НачалоПериода, КонецПериода, Организация);
	
	Для Каждого МесяцЗаполнения Из МесяцыДляЗаполнения Цикл
		
		ДобавитьДанныеПрошлогоМесяцаВРегистр(НачалоМесяца(МесяцЗаполнения), КонецМесяца(МесяцЗаполнения), Организация);
		
	КонецЦикла;
	
КонецПроцедуры

Функция МесяцыДляЗаполненияРегистра(Знач НачалоПериода, КонецПериода, Организация)
	
	// НачалоПериода должно быть заполнено. Это обеспечено тем, что для реквизита НачалоПериода в свойствах установлена проверка заполнения.
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НАЧАЛОПЕРИОДА(РасчетКалькуляцииСебестоимости.ПериодРасчета, МЕСЯЦ) КАК НачалоМесяца
	|ИЗ
	|	РегистрСведений.РасчетКалькуляцииСебестоимости КАК РасчетКалькуляцииСебестоимости
	|ГДЕ
	|	РасчетКалькуляцииСебестоимости.Организация = &Организация
	|	И РасчетКалькуляцииСебестоимости.ПериодРасчета МЕЖДУ &ДатаНачала И &ДатаОкончания
	|
	|УПОРЯДОЧИТЬ ПО
	|	НачалоМесяца";
	
	Запрос.УстановитьПараметр("Организация",   Организация);
	Запрос.УстановитьПараметр("ДатаНачала",    НачалоМесяца(НачалоПериода));
	Запрос.УстановитьПараметр("ДатаОкончания", КонецМесяца(КонецПериода));
	
	МесяцыЗаполненныеДанными = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("НачалоМесяца");
	
	МесяцыИзПериодаОтчета = Новый Массив;
	Месяц = НачалоМесяца(НачалоПериода);
	Пока Месяц <= КонецПериода Цикл
		МесяцыИзПериодаОтчета.Добавить(Месяц);
		Месяц = ДобавитьМесяц(Месяц, 1);
	КонецЦикла;
	
	// Нужно заполнить все месяцы из периода отчета, кроме уже заполненных
	Возврат ОбщегоНазначенияКлиентСервер.РазностьМассивов(МесяцыИзПериодаОтчета, МесяцыЗаполненныеДанными);
	
КонецФункции

Процедура ДобавитьДанныеПрошлогоМесяцаВРегистр(НачалоПериода, КонецПериода, Организация)
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Находим документ Регламентная операция - он будет регистратором для записи данных в регистр
	Ссылка = Документы.РегламентнаяОперация.НайтиДокумент(
		НачалоПериода,
		Организация,
		Перечисления.ВидыРегламентныхОпераций.ЗакрытиеСчетов20_23_25_26);
	
	Если Ссылка.Пустая() Тогда
		
		// Предполагаем, что если регламентной операции нет, то и нет никаких данных о себестоимости.
		// Пользователю следует закрыть месяц и тогда регламентная операция сама заполнит регистр.
		
		Возврат;
		
	КонецЕсли;
	
	// Заполнение регистра РасчетКалькуляцииСебестоимости
	
	СчетаПрямыхРасходов = БухгалтерскийУчет.СформироватьМассивСубсчетов(УчетЗатрат.ПредопределенныеКалькуляционныеСчета());
	СчетаИсключения     = БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.ПроизводствоИзДавальческогоСырья);
	СчетаПрямыхРасходов = ОбщегоНазначенияКлиентСервер.РазностьМассивов(СчетаПрямыхРасходов, СчетаИсключения);
	
	СчетаКосвенныхРасходов = БухгалтерскийУчет.СформироватьМассивСубсчетов(УчетЗатрат.ПредопределенныеСчетаКосвенныхРасходов());
	
	СубконтоПрямыхРасходов = Новый Массив;
	СубконтоПрямыхРасходов.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы);
	СубконтоПрямыхРасходов.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачалоПериода",            НачалоМесяца(НачалоПериода));
	Запрос.УстановитьПараметр("КонецПериода",             КонецМесяца(КонецПериода));
	Запрос.УстановитьПараметр("Организация",              Организация);
	Запрос.УстановитьПараметр("НачалоСледующегоПериода",  КонецМесяца(КонецПериода) + 1);
	Запрос.УстановитьПараметр("НачалоПредыдущегоПериода", НачалоМесяца(ДобавитьМесяц(НачалоПериода, -1)));
	Запрос.УстановитьПараметр("СчетаПрямыхРасходов",      СчетаПрямыхРасходов);
	Запрос.УстановитьПараметр("СчетаКосвенныхРасходов",   СчетаКосвенныхРасходов);
	Запрос.УстановитьПараметр("СубконтоПрямыхРасходов",   СубконтоПрямыхРасходов);
	Запрос.УстановитьПараметр("ЭлементыЗатратКорСчета",   Перечисления.ЭлементыЗатрат.КорСчета());
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВыпускПродукции.Счет КАК СчетВыпуска,
	|	ВыпускПродукции.Подразделение КАК Подразделение,
	|	ВыпускПродукции.Субконто1 КАК НоменклатурнаяГруппа,
	|	ВыпускПродукции.КорСубконто1 КАК Продукция,
	|	ВыпускПродукции.СуммаОборотКт КАК Сумма,
	|	ВыпускПродукции.СуммаНУОборотКт КАК СуммаНУ,
	|	ВыпускПродукции.СуммаПРОборотКт КАК СуммаПР,
	|	ВыпускПродукции.СуммаВРОборотКт КАК СуммаВР
	|ПОМЕСТИТЬ ВыпускПродукции
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(&НачалоПериода, &КонецПериода, , Счет В (&СчетаПрямыхРасходов), ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы), Организация = &Организация, , ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура)) КАК ВыпускПродукции
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Выпуск.СчетВыпуска КАК СчетВыпуска,
	|	Выпуск.Подразделение КАК Подразделение,
	|	Выпуск.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	|	СУММА(Выпуск.Сумма) КАК Сумма,
	|	СУММА(Выпуск.СуммаНУ) КАК СуммаНУ,
	|	СУММА(Выпуск.СуммаПР) КАК СуммаПР,
	|	СУММА(Выпуск.СуммаВР) КАК СуммаВР
	|ПОМЕСТИТЬ ВыпускБезПродукции
	|ИЗ
	|	(ВЫБРАТЬ
	|		Выпуск.Счет КАК СчетВыпуска,
	|		Выпуск.Подразделение КАК Подразделение,
	|		Выпуск.Субконто1 КАК НоменклатурнаяГруппа,
	|		Выпуск.СуммаОборотКт КАК Сумма,
	|		Выпуск.СуммаНУОборотКт КАК СуммаНУ,
	|		Выпуск.СуммаПРОборотКт КАК СуммаПР,
	|		Выпуск.СуммаВРОборотКт КАК СуммаВР
	|	ИЗ
	|		РегистрБухгалтерии.Хозрасчетный.Обороты(&НачалоПериода, &КонецПериода, , Счет В (&СчетаПрямыхРасходов), ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы), Организация = &Организация, , ) КАК Выпуск
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ВыпускПродукцииСторно.СчетВыпуска,
	|		ВыпускПродукцииСторно.Подразделение,
	|		ВыпускПродукцииСторно.НоменклатурнаяГруппа,
	|		-ВыпускПродукцииСторно.Сумма,
	|		-ВыпускПродукцииСторно.СуммаНУ,
	|		-ВыпускПродукцииСторно.СуммаПР,
	|		-ВыпускПродукцииСторно.СуммаВР
	|	ИЗ
	|		ВыпускПродукции КАК ВыпускПродукцииСторно) КАК Выпуск
	|
	|СГРУППИРОВАТЬ ПО
	|	Выпуск.СчетВыпуска,
	|	Выпуск.Подразделение,
	|	Выпуск.НоменклатурнаяГруппа
	|
	|ИМЕЮЩИЕ
	|	(СУММА(Выпуск.Сумма) <> 0
	|		ИЛИ СУММА(Выпуск.СуммаНУ) <> 0
	|		ИЛИ СУММА(Выпуск.СуммаПР) <> 0
	|		ИЛИ СУММА(Выпуск.СуммаВР) <> 0)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СчетВыпуска,
	|	Подразделение,
	|	НоменклатурнаяГруппа
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Выпуск.СчетЗатрат КАК СчетВыпуска,
	|	Выпуск.Подразделение КАК Подразделение,
	|	Выпуск.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	|	Выпуск.Продукция КАК Продукция,
	|	СУММА(ВЫБОР
	|			КОГДА Выпуск.ПрямыеРасходыРаспределятьПоКоличеству
	|				ТОГДА Выпуск.КоличествоОборот
	|			ИНАЧЕ Выпуск.ПлановаяСтоимостьОборот
	|		КОНЕЦ) КАК БазаРаспределения
	|ПОМЕСТИТЬ РаспределениеВыпускаПоПродукции
	|ИЗ
	|	РегистрНакопления.ВыпускПродукцииУслуг.Обороты(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			,
	|			Организация = &Организация
	|				И (СчетЗатрат, Подразделение, НоменклатурнаяГруппа) В
	|					(ВЫБРАТЬ
	|						ВыпускБезПродукции.СчетВыпуска,
	|						ВыпускБезПродукции.Подразделение,
	|						ВыпускБезПродукции.НоменклатурнаяГруппа
	|					ИЗ
	|						ВыпускБезПродукции КАК ВыпускБезПродукции)
	|				И НЕ (СчетЗатрат, Подразделение, НоменклатурнаяГруппа, Продукция) В
	|						(ВЫБРАТЬ
	|							ВыпускПродукции.СчетВыпуска,
	|							ВыпускПродукции.Подразделение,
	|							ВыпускПродукции.НоменклатурнаяГруппа,
	|							ВыпускПродукции.Продукция
	|						ИЗ
	|							ВыпускПродукции)) КАК Выпуск
	|
	|СГРУППИРОВАТЬ ПО
	|	Выпуск.СчетЗатрат,
	|	Выпуск.Подразделение,
	|	Выпуск.НоменклатурнаяГруппа,
	|	Выпуск.Продукция
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РаспределениеВыпускаПоПродукции.СчетВыпуска КАК СчетВыпуска,
	|	РаспределениеВыпускаПоПродукции.Подразделение КАК Подразделение,
	|	РаспределениеВыпускаПоПродукции.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	|	СУММА(РаспределениеВыпускаПоПродукции.БазаРаспределения) КАК БазаРаспределения
	|ПОМЕСТИТЬ РаспределениеВыпускаПоПродукцииИтоги
	|ИЗ
	|	РаспределениеВыпускаПоПродукции КАК РаспределениеВыпускаПоПродукции
	|
	|СГРУППИРОВАТЬ ПО
	|	РаспределениеВыпускаПоПродукции.СчетВыпуска,
	|	РаспределениеВыпускаПоПродукции.Подразделение,
	|	РаспределениеВыпускаПоПродукции.НоменклатурнаяГруппа
	|
	|ИМЕЮЩИЕ
	|	СУММА(РаспределениеВыпускаПоПродукции.БазаРаспределения) > 0
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СчетВыпуска,
	|	Подразделение,
	|	НоменклатурнаяГруппа
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РаспределениеВыпускаПоПродукции.СчетВыпуска КАК СчетВыпуска,
	|	РаспределениеВыпускаПоПродукции.Подразделение КАК Подразделение,
	|	РаспределениеВыпускаПоПродукции.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	|	РаспределениеВыпускаПоПродукции.Продукция,
	|	ВЫРАЗИТЬ(ВыпускБезПродукции.Сумма * РаспределениеВыпускаПоПродукции.БазаРаспределения / РаспределениеВыпускаПоПродукцииИтоги.БазаРаспределения КАК ЧИСЛО(15, 2)) КАК Сумма,
	|	ВЫРАЗИТЬ(ВыпускБезПродукции.СуммаНУ * РаспределениеВыпускаПоПродукции.БазаРаспределения / РаспределениеВыпускаПоПродукцииИтоги.БазаРаспределения КАК ЧИСЛО(15, 2)) КАК СуммаНУ,
	|	ВЫРАЗИТЬ(ВыпускБезПродукции.СуммаПР * РаспределениеВыпускаПоПродукции.БазаРаспределения / РаспределениеВыпускаПоПродукцииИтоги.БазаРаспределения КАК ЧИСЛО(15, 2)) КАК СуммаПР,
	|	ВЫРАЗИТЬ(ВыпускБезПродукции.СуммаВР * РаспределениеВыпускаПоПродукции.БазаРаспределения / РаспределениеВыпускаПоПродукцииИтоги.БазаРаспределения КАК ЧИСЛО(15, 2)) КАК СуммаВР
	|ПОМЕСТИТЬ ВыпускРаспределенныйПоПродукции
	|ИЗ
	|	ВыпускБезПродукции КАК ВыпускБезПродукции
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РаспределениеВыпускаПоПродукции КАК РаспределениеВыпускаПоПродукции
	|		ПО ВыпускБезПродукции.СчетВыпуска = РаспределениеВыпускаПоПродукции.СчетВыпуска
	|			И ВыпускБезПродукции.Подразделение = РаспределениеВыпускаПоПродукции.Подразделение
	|			И ВыпускБезПродукции.НоменклатурнаяГруппа = РаспределениеВыпускаПоПродукции.НоменклатурнаяГруппа
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РаспределениеВыпускаПоПродукцииИтоги КАК РаспределениеВыпускаПоПродукцииИтоги
	|		ПО ВыпускБезПродукции.СчетВыпуска = РаспределениеВыпускаПоПродукцииИтоги.СчетВыпуска
	|			И ВыпускБезПродукции.Подразделение = РаспределениеВыпускаПоПродукцииИтоги.Подразделение
	|			И ВыпускБезПродукции.НоменклатурнаяГруппа = РаспределениеВыпускаПоПродукцииИтоги.НоменклатурнаяГруппа
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СчетВыпуска,
	|	Подразделение,
	|	НоменклатурнаяГруппа
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Выпуск.СчетВыпуска КАК СчетВыпуска,
	|	Выпуск.Подразделение КАК Подразделение,
	|	Выпуск.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	|	Выпуск.НезавершенноеПроизводство КАК НезавершенноеПроизводство,
	|	Выпуск.Продукция КАК Продукция,
	|	СУММА(Выпуск.Сумма) КАК Сумма,
	|	СУММА(Выпуск.СуммаНУ) КАК СуммаНУ,
	|	СУММА(Выпуск.СуммаПР) КАК СуммаПР,
	|	СУММА(Выпуск.СуммаВР) КАК СуммаВР
	|ПОМЕСТИТЬ Выпуск
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЛОЖЬ КАК НезавершенноеПроизводство,
	|		ВыпускПродукции.СчетВыпуска КАК СчетВыпуска,
	|		ВыпускПродукции.Подразделение КАК Подразделение,
	|		ВыпускПродукции.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	|		ВыпускПродукции.Продукция КАК Продукция,
	|		ВыпускПродукции.Сумма КАК Сумма,
	|		ВыпускПродукции.СуммаНУ КАК СуммаНУ,
	|		ВыпускПродукции.СуммаПР КАК СуммаПР,
	|		ВыпускПродукции.СуммаВР КАК СуммаВР
	|	ИЗ
	|		ВыпускПродукции КАК ВыпускПродукции
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ЛОЖЬ,
	|		ВыпускБезПродукции.СчетВыпуска,
	|		ВыпускБезПродукции.Подразделение,
	|		ВыпускБезПродукции.НоменклатурнаяГруппа,
	|		ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка),
	|		ВыпускБезПродукции.Сумма,
	|		ВыпускБезПродукции.СуммаНУ,
	|		ВыпускБезПродукции.СуммаПР,
	|		ВыпускБезПродукции.СуммаВР
	|	ИЗ
	|		ВыпускБезПродукции КАК ВыпускБезПродукции
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ЛОЖЬ,
	|		ВыпускРаспределенныйПоПродукцииСторно.СчетВыпуска,
	|		ВыпускРаспределенныйПоПродукцииСторно.Подразделение,
	|		ВыпускРаспределенныйПоПродукцииСторно.НоменклатурнаяГруппа,
	|		ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка),
	|		-ВыпускРаспределенныйПоПродукцииСторно.Сумма,
	|		-ВыпускРаспределенныйПоПродукцииСторно.СуммаНУ,
	|		-ВыпускРаспределенныйПоПродукцииСторно.СуммаПР,
	|		-ВыпускРаспределенныйПоПродукцииСторно.СуммаВР
	|	ИЗ
	|		ВыпускРаспределенныйПоПродукции КАК ВыпускРаспределенныйПоПродукцииСторно
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ЛОЖЬ,
	|		ВыпускРаспределенныйПоПродукции.СчетВыпуска,
	|		ВыпускРаспределенныйПоПродукции.Подразделение,
	|		ВыпускРаспределенныйПоПродукции.НоменклатурнаяГруппа,
	|		ВыпускРаспределенныйПоПродукции.Продукция,
	|		ВыпускРаспределенныйПоПродукции.Сумма,
	|		ВыпускРаспределенныйПоПродукции.СуммаНУ,
	|		ВыпускРаспределенныйПоПродукции.СуммаПР,
	|		ВыпускРаспределенныйПоПродукции.СуммаВР
	|	ИЗ
	|		ВыпускРаспределенныйПоПродукции КАК ВыпускРаспределенныйПоПродукции
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ИСТИНА,
	|		КонечныйОстатокНЗП.Счет,
	|		КонечныйОстатокНЗП.Подразделение,
	|		КонечныйОстатокНЗП.Субконто1,
	|		ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка),
	|		КонечныйОстатокНЗП.СуммаОстаток,
	|		КонечныйОстатокНЗП.СуммаНУОстаток,
	|		КонечныйОстатокНЗП.СуммаПРОстаток,
	|		КонечныйОстатокНЗП.СуммаВРОстаток
	|	ИЗ
	|		РегистрБухгалтерии.Хозрасчетный.Остатки(&НачалоСледующегоПериода, Счет В (&СчетаПрямыхРасходов), ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы), Организация = &Организация) КАК КонечныйОстатокНЗП) КАК Выпуск
	|
	|СГРУППИРОВАТЬ ПО
	|	Выпуск.НезавершенноеПроизводство,
	|	Выпуск.СчетВыпуска,
	|	Выпуск.Подразделение,
	|	Выпуск.НоменклатурнаяГруппа,
	|	Выпуск.Продукция
	|
	|ИМЕЮЩИЕ
	|	(СУММА(Выпуск.Сумма) <> 0
	|		ИЛИ СУММА(Выпуск.СуммаНУ) <> 0
	|		ИЛИ СУММА(Выпуск.СуммаПР) <> 0
	|		ИЛИ СУММА(Выпуск.СуммаВР) <> 0)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СчетВыпуска,
	|	Подразделение,
	|	НоменклатурнаяГруппа
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Материалы.Счет КАК СчетВыпуска,
	|	Материалы.КорСчет КАК СчетЗатрат,
	|	Материалы.Субконто1 КАК НоменклатурнаяГруппа,
	|	Материалы.Субконто2 КАК СтатьяЗатрат,
	|	Материалы.Подразделение КАК Подразделение,
	|	Материалы.КорСубконто1 КАК Материал,
	|	Материалы.СуммаОборотДт КАК Сумма,
	|	Материалы.СуммаНУОборотДт КАК СуммаНУ,
	|	Материалы.СуммаПРОборотДт КАК СуммаПР,
	|	Материалы.СуммаВРОборотДт КАК СуммаВР,
	|	Материалы.КоличествоКорОборотДт КАК Количество
	|ПОМЕСТИТЬ Материалы
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(&НачалоПериода, &КонецПериода, , Счет В (&СчетаПрямыхРасходов), &СубконтоПрямыхРасходов, Организация = &Организация, , ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура)) КАК Материалы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЭлементыЗатратКорСчета.Элемент,
	|	ЭлементыЗатратКорСчета.КорСчет КАК КорСчет
	|ПОМЕСТИТЬ ЭлементыЗатратКорСчета
	|ИЗ
	|	&ЭлементыЗатратКорСчета КАК ЭлементыЗатратКорСчета
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	КорСчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Расходы.СчетВыпуска КАК СчетВыпуска,
	|	Расходы.Подразделение КАК Подразделение,
	|	Расходы.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	|	Расходы.ПериодЗатрат,
	|	ВЫБОР
	|		КОГДА Расходы.СчетЗатрат В (&СчетаКосвенныхРасходов)
	|			ТОГДА Расходы.СчетЗатрат
	|		ИНАЧЕ ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
	|	КОНЕЦ КАК СчетРасходов,
	|	ЕСТЬNULL(ЭлементыЗатратКорСчета.Элемент, ЗНАЧЕНИЕ(Перечисление.ЭлементыЗатрат.ПрочиеЗатраты)) КАК ЭлементЗатрат,
	|	Расходы.СтатьяЗатрат,
	|	Расходы.Материал,
	|	СУММА(Расходы.Количество) КАК Количество,
	|	СУММА(Расходы.Сумма) КАК Сумма,
	|	СУММА(Расходы.СуммаНУ) КАК СуммаНУ,
	|	СУММА(Расходы.СуммаПР) КАК СуммаПР,
	|	СУММА(Расходы.СуммаВР) КАК СуммаВР
	|ПОМЕСТИТЬ Расходы
	|ИЗ
	|	(ВЫБРАТЬ
	|		Расходы.Счет КАК СчетВыпуска,
	|		&НачалоПериода КАК ПериодЗатрат,
	|		Расходы.КорСчет КАК СчетЗатрат,
	|		Расходы.Субконто1 КАК НоменклатурнаяГруппа,
	|		Расходы.Субконто2 КАК СтатьяЗатрат,
	|		Расходы.Подразделение КАК Подразделение,
	|		Расходы.СуммаОборотДт КАК Сумма,
	|		Расходы.СуммаНУОборотДт КАК СуммаНУ,
	|		Расходы.СуммаПРОборотДт КАК СуммаПР,
	|		Расходы.СуммаВРОборотДт КАК СуммаВР,
	|		ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка) КАК Материал,
	|		0 КАК Количество
	|	ИЗ
	|		РегистрБухгалтерии.Хозрасчетный.Обороты(&НачалоПериода, &КонецПериода, , Счет В (&СчетаПрямыхРасходов), &СубконтоПрямыхРасходов, Организация = &Организация, , ) КАК Расходы
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		МатериалыСторно.СчетВыпуска,
	|		&НачалоПериода,
	|		МатериалыСторно.СчетЗатрат,
	|		МатериалыСторно.НоменклатурнаяГруппа,
	|		МатериалыСторно.СтатьяЗатрат,
	|		МатериалыСторно.Подразделение,
	|		-МатериалыСторно.Сумма,
	|		-МатериалыСторно.СуммаНУ,
	|		-МатериалыСторно.СуммаПР,
	|		-МатериалыСторно.СуммаВР,
	|		ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка),
	|		0
	|	ИЗ
	|		Материалы КАК МатериалыСторно
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Материалы.СчетВыпуска,
	|		&НачалоПериода,
	|		Материалы.СчетЗатрат,
	|		Материалы.НоменклатурнаяГруппа,
	|		Материалы.СтатьяЗатрат,
	|		Материалы.Подразделение,
	|		Материалы.Сумма,
	|		Материалы.СуммаНУ,
	|		Материалы.СуммаПР,
	|		Материалы.СуммаВР,
	|		Материалы.Материал,
	|		Материалы.Количество
	|	ИЗ
	|		Материалы КАК Материалы
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		НЗППрошлогоПериода.Счет,
	|		&НачалоПредыдущегоПериода,
	|		НЗППрошлогоПериода.Счет,
	|		ЕСТЬNULL(НЗППрошлогоПериода.Субконто1, ЗНАЧЕНИЕ(Справочник.НоменклатурныеГруппы.ПустаяСсылка)),
	|		ЕСТЬNULL(НЗППрошлогоПериода.Субконто2, ЗНАЧЕНИЕ(Справочник.СтатьиЗатрат.ПустаяСсылка)),
	|		НЗППрошлогоПериода.Подразделение,
	|		НЗППрошлогоПериода.СуммаОстаток,
	|		НЗППрошлогоПериода.СуммаНУОстаток,
	|		НЗППрошлогоПериода.СуммаПРОстаток,
	|		НЗППрошлогоПериода.СуммаВРОстаток,
	|		ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка),
	|		0
	|	ИЗ
	|		РегистрБухгалтерии.Хозрасчетный.Остатки(&НачалоПериода, Счет В (&СчетаПрямыхРасходов), &СубконтоПрямыхРасходов, Организация = &Организация) КАК НЗППрошлогоПериода) КАК Расходы
	|		ЛЕВОЕ СОЕДИНЕНИЕ ЭлементыЗатратКорСчета КАК ЭлементыЗатратКорСчета
	|		ПО Расходы.СчетЗатрат = ЭлементыЗатратКорСчета.КорСчет
	|
	|СГРУППИРОВАТЬ ПО
	|	Расходы.ПериодЗатрат,
	|	Расходы.Подразделение,
	|	Расходы.СтатьяЗатрат,
	|	Расходы.Материал,
	|	Расходы.НоменклатурнаяГруппа,
	|	Расходы.СчетВыпуска,
	|	ЕСТЬNULL(ЭлементыЗатратКорСчета.Элемент, ЗНАЧЕНИЕ(Перечисление.ЭлементыЗатрат.ПрочиеЗатраты)),
	|	ВЫБОР
	|		КОГДА Расходы.СчетЗатрат В (&СчетаКосвенныхРасходов)
	|			ТОГДА Расходы.СчетЗатрат
	|		ИНАЧЕ ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
	|	КОНЕЦ
	|
	|ИМЕЮЩИЕ
	|	(СУММА(Расходы.Количество) <> 0
	|		ИЛИ СУММА(Расходы.Сумма) <> 0
	|		ИЛИ СУММА(Расходы.СуммаНУ) <> 0
	|		ИЛИ СУММА(Расходы.СуммаПР) <> 0
	|		ИЛИ СУММА(Расходы.СуммаВР) <> 0)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СчетВыпуска,
	|	Подразделение,
	|	НоменклатурнаяГруппа
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Выпуск.СчетВыпуска КАК СчетВыпуска,
	|	Выпуск.Подразделение КАК Подразделение,
	|	Выпуск.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	|	Выпуск.Сумма КАК СуммаВыпуска,
	|	Выпуск.СуммаНУ КАК СуммаВыпускаНУ,
	|	Выпуск.СуммаПР КАК СуммаВыпускаПР,
	|	Выпуск.СуммаВР КАК СуммаВыпускаВР,
	|	Расходы.ПериодЗатрат КАК ПериодЗатрат,
	|	ВЫБОР
	|		КОГДА Расходы.СчетРасходов <> ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
	|			ТОГДА Расходы.СчетРасходов
	|		ИНАЧЕ Выпуск.СчетВыпуска
	|	КОНЕЦ КАК СчетРасходов,
	|	Расходы.ЭлементЗатрат КАК ЭлементЗатрат,
	|	Расходы.СтатьяЗатрат КАК СтатьяЗатрат,
	|	Расходы.Материал КАК Материал,
	|	ЕСТЬNULL(Расходы.Количество, 0) КАК КоличествоМатериала,
	|	ЕСТЬNULL(Расходы.Сумма, 0) КАК СуммаЗатрат,
	|	ЕСТЬNULL(Расходы.СуммаНУ, 0) КАК СуммаЗатратНУ,
	|	ЕСТЬNULL(Расходы.СуммаПР, 0) КАК СуммаЗатратПР,
	|	ЕСТЬNULL(Расходы.СуммаВР, 0) КАК СуммаЗатратВР,
	|	Выпуск.НезавершенноеПроизводство КАК НезавершенноеПроизводство,
	|	Выпуск.Продукция КАК Продукция
	|ИЗ
	|	Выпуск КАК Выпуск
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Расходы КАК Расходы
	|		ПО Выпуск.СчетВыпуска = Расходы.СчетВыпуска
	|			И Выпуск.Подразделение = Расходы.Подразделение
	|			И Выпуск.НоменклатурнаяГруппа = Расходы.НоменклатурнаяГруппа
	|ИТОГИ
	|	МАКСИМУМ(КоличествоМатериала),
	|	МАКСИМУМ(СуммаЗатрат),
	|	МАКСИМУМ(СуммаЗатратНУ),
	|	МАКСИМУМ(СуммаЗатратПР),
	|	МАКСИМУМ(СуммаЗатратВР)
	|ПО
	|	СчетВыпуска,
	|	Подразделение,
	|	НоменклатурнаяГруппа,
	|	ПериодЗатрат,
	|	СчетРасходов,
	|	ЭлементЗатрат,
	|	СтатьяЗатрат,
	|	Материал";
	
	ГлубинаИтогов = 8; // Количество контрольных точек в выражении ИТОГИ ПО <..>
	
	РезультатЗапроса = Запрос.Выполнить();
	
	// Создадим заполняемую коллекцию
	ДанныеЗаполнения = Новый ТаблицаЗначений;
	Для Каждого Измерение Из Метаданные.РегистрыСведений.РасчетКалькуляцииСебестоимости.Измерения Цикл
		ДанныеЗаполнения.Колонки.Добавить(Измерение.Имя, Измерение.Тип);
	КонецЦикла;
	Для Каждого Ресурс Из Метаданные.РегистрыСведений.РасчетКалькуляцииСебестоимости.Ресурсы Цикл
		ДанныеЗаполнения.Колонки.Добавить(Ресурс.Имя, Ресурс.Тип);
	КонецЦикла;
	
	// Для однотипной работы со всеми числовыми значениями (количество, суммы) 
	// опишем все варианты этих значений
	ВариантыЧисловыхЗначений = Новый ТаблицаЗначений;
	ВариантыЧисловыхЗначений.Колонки.Добавить("Имя",        Новый ОписаниеТипов("Строка"));
	ВариантыЧисловыхЗначений.Колонки.Добавить("ИмяЗатраты", Новый ОписаниеТипов("Строка"));
	ВариантыЧисловыхЗначений.Колонки.Добавить("ИмяВыпуск",  Новый ОписаниеТипов("Строка"));
	ВариантыЧисловыхЗначений.Колонки.Добавить("Точность",   Новый ОписаниеТипов("Число"));
	
	СуффиксыСумм = Новый Массив;
	СуффиксыСумм.Добавить(""); // БУ
	СуффиксыСумм.Добавить("НУ");
	СуффиксыСумм.Добавить("ПР");
	СуффиксыСумм.Добавить("ВР");

	Вариант = ВариантыЧисловыхЗначений.Добавить();
	Вариант.Имя        = "КоличествоМатериала";
	Вариант.ИмяЗатраты = "КоличествоМатериала";
	Вариант.ИмяВыпуск  = "СуммаВыпуска";// Количество распределим пропорционально сумме БУ
	
	Для Каждого Суффикс Из СуффиксыСумм Цикл
		Вариант = ВариантыЧисловыхЗначений.Добавить();
		Вариант.Имя        = "Сумма"       + Суффикс;
		Вариант.ИмяЗатраты = "СуммаЗатрат" + Суффикс;
		Вариант.ИмяВыпуск  = "СуммаВыпуска"+ Суффикс;
	КонецЦикла;
	
	РесурсыРегистра = Метаданные.РегистрыСведений.РасчетКалькуляцииСебестоимости.Ресурсы;
	Для Каждого Вариант Из ВариантыЧисловыхЗначений Цикл
		Вариант.Точность = РесурсыРегистра[Вариант.Имя].Тип.КвалификаторыЧисла.РазрядностьДробнойЧасти;
	КонецЦикла;
	
	// Заполним таблицу ДанныеЗаполнения результатом запроса
	// Распределим затраты между выпуском
	
	// Заполним таблицу ДанныеЗаполнения результатом запроса
	// Для этого обходим все контрольные точки итогов
	// и распределяем затраты (комбинации контрольных точек)
	// между направлениями выпуска (детальными записями).
	
	Выборки = Новый Массив;
	Выборки.Добавить(РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией));
	
	Пока ЗначениеЗаполнено(Выборки) Цикл
		
		ВыборкаЗатрат = Выборки[0];
		
		Если Не ВыборкаЗатрат.Следующий() Тогда
			// Вернемся на предыдущий уровень итогов
			Выборки.Удалить(0);
		ИначеЕсли Выборки.Количество() < ГлубинаИтогов Тогда
			// Перейдем на следующий уровень итогов
			Выборки.Вставить(0, ВыборкаЗатрат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией));
		Иначе
			// Обойдем уровень детальных записей
			РаспределитьЗатратыНаВыпуск(ДанныеЗаполнения, ВыборкаЗатрат, ВариантыЧисловыхЗначений);
		КонецЕсли;
		
	КонецЦикла;
	
	ДанныеЗаполнения.ЗаполнитьЗначения(Организация,  "Организация");
	ДанныеЗаполнения.ЗаполнитьЗначения(КонецПериода, "ПериодРасчета");
	
	НаборЗаписей = РегистрыСведений.РасчетКалькуляцииСебестоимости.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Регистратор.Установить(Ссылка);
	
	// Запись данных в регистр
	// Подготовимся использовать ЗаписьВоВспомогательныеРегистрыСведений()
	РеквизитыЗаписи = ЗакрытиеМесяца.РеквизитыЗаписиВоВспомогательныеРегистрыСведений(КонецПериода, Организация);
	
	ЭмуляцияКоллекцииДвижения = Новый Структура;
	ЭмуляцияКоллекцииДвижения.Вставить("РасчетКалькуляцииСебестоимости", НаборЗаписей);
	
	ЗакрытиеМесяца.ЗаписьВоВспомогательныеРегистрыСведений(
		ЭмуляцияКоллекцииДвижения,
		ДанныеЗаполнения,
		РеквизитыЗаписи,
		"РасчетКалькуляцииСебестоимости",
		Истина);
	
	Если НаборЗаписей.Записывать Тогда
		НаборЗаписей.Записать(Истина);
		// Не участвует в ДатыЗапретаИзменения
	КонецЕсли;
	
КонецПроцедуры

Процедура РаспределитьЗатратыНаВыпуск(ДанныеЗаполнения, ВыборкаЗатрат, ВариантыЧисловыхЗначений)
	
	ВыборкаВыпуск = ВыборкаЗатрат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	СуммыВыпуска = Новый Соответствие;
	Для Каждого Вариант Из ВариантыЧисловыхЗначений Цикл
		СуммыВыпуска.Вставить(Вариант.ИмяВыпуск, Новый Массив);
	КонецЦикла;
	
	Пока ВыборкаВыпуск.Следующий() Цикл
		
		// Добавим направления выпуска
		
		НоваяСтрока = ДанныеЗаполнения.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаВыпуск);
		
		Для Каждого ЭлементСумм Из СуммыВыпуска Цикл
			ЭлементСумм.Значение.Добавить(ВыборкаВыпуск[ЭлементСумм.Ключ]);
		КонецЦикла;
		
	КонецЦикла;
	
	// Распределим суммы затрат между направлениями выпуска - заполним их в добавленных записях
	КоличествоЗаписей = ДанныеЗаполнения.Количество();
	Для Каждого Вариант Из ВариантыЧисловыхЗначений Цикл
		
		// У нас есть
		// 1. числовые показатели затрат на некоторую _группу_ продукции (ВыборкаЗатрат)
		// 2. суммы выпуска каждой _конкретной_ продукции из группы (СуммыВыпуска)
		
		// Распределим затраты (1) между выпуском (2)
		
		РаспределяемаяСумма       = ВыборкаЗатрат[Вариант.ИмяЗатраты];
		КоэффициентыРаспределения = СуммыВыпуска[Вариант.ИмяВыпуск]; // соответствует последним строкам таблицы ДанныеЗаполнения
		
		РезультатРаспределения = ОбщегоНазначения.РаспределитьСуммуПропорциональноКоэффициентам(
			РаспределяемаяСумма,
			КоэффициентыРаспределения,
			Вариант.Точность);
		
		Если РезультатРаспределения = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		КоличествоСтрокВМассиве = РезультатРаспределения.Количество(); // Соответствует количеству добавленных записей
		
		Для Шаг = 1 По КоличествоСтрокВМассиве Цикл
			ЗаписьДанныеЗаполнения = ДанныеЗаполнения[КоличествоЗаписей - Шаг];
			ЗаписьДанныеЗаполнения[Вариант.Имя] = РезультатРаспределения[КоличествоСтрокВМассиве - Шаг];
		КонецЦикла;
		
	КонецЦикла;
		
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область БухгалтерскиеОтчеты

Функция ПолучитьНаборПоказателей() Экспорт
	
	Возврат ОсновнойНаборСуммовыхПоказателей();
	
КонецФункции

#КонецОбласти

#КонецОбласти
	
#Область ОбработчикиБухгалтерскиеОтчеты

Функция ПолучитьТекстЗаголовка(Контекст) Экспорт
	
	Возврат СправкиРасчеты.ЗаголовокОтчета(Контекст);
	
КонецФункции

Процедура ПриВыводеЗаголовка(Контекст, КомпоновщикНастроек, Результат) Экспорт
	
	СправкиРасчеты.ВывестиШапкуОтчета(Результат, Контекст);
	
КонецПроцедуры

Процедура ПередКомпоновкойМакета(ПараметрыОтчета, Схема, КомпоновщикНастроек) Экспорт
	
	ДобавитьДанныеПрошлыхПериодовВРегистр(ПараметрыОтчета.НачалоПериода, ПараметрыОтчета.КонецПериода, ПараметрыОтчета.Организация);
	
	УстановитьСтандартныеПараметрыОтчета(КомпоновщикНастроек, ПараметрыОтчета);
	
	НастроитьРесурсыПоВидамУчета(
		КомпоновщикНастроек,
		ВидыУчета(ПараметрыОтчета),
		ПоляПоВидамУчета());
		
	НастроитьОбъединениеЗаголовкаГруппировокТаблицы(КомпоновщикНастроек.Настройки);
	
	БухгалтерскиеОтчетыВызовСервера.ДобавитьОтборПоОрганизации(ПараметрыОтчета, КомпоновщикНастроек);
	
КонецПроцедуры

Процедура ПослеВыводаРезультата(Контекст, Результат) Экспорт
	
	СправкиРасчеты.ОформитьРезультатОтчета(Результат, Контекст);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСправкиРасчеты

Процедура ЗаполнитьПользовательскиеНастройкиДаннымиФормы(ПользовательскиеНастройки, ПараметрыЗаполнения) Экспорт
	
	УстановитьСтандартныеГруппировки(ПараметрыЗаполнения);
		
	СправкиРасчеты.ПрименитьГруппировки(ПользовательскиеНастройки, ПараметрыЗаполнения.НастройкиГруппировок);
	
КонецПроцедуры

#КонецОбласти

#Область КэшКодаБухгалтерскиеОтчеты

Процедура УстановитьСтандартныеПараметрыОтчета(КомпоновщикНастроек, ПараметрыОтчета)
	
	Если ЗначениеЗаполнено(ПараметрыОтчета.НачалоПериода) Тогда
		БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "НачалоПериода", НачалоДня(ПараметрыОтчета.НачалоПериода));
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыОтчета.КонецПериода) Тогда
		БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "КонецПериода", КонецДня(ПараметрыОтчета.КонецПериода));
	КонецЕсли;
	
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(
		КомпоновщикНастроек,
		"НалоговыйУчет",
		ПараметрыОтчета.ПоказательНУ);
	
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(
		КомпоновщикНастроек,
		"ВестиУчетЗатратПоПодразделениям",
		ПолучитьФункциональнуюОпцию("ВестиУчетЗатратПоПодразделениям"));
		
КонецПроцедуры

Функция ОсновнойНаборСуммовыхПоказателей()
	
	НаборПоказателей = Новый Массив;
	НаборПоказателей.Добавить("БУ");
	НаборПоказателей.Добавить("НУ");
	НаборПоказателей.Добавить("ПР");
	НаборПоказателей.Добавить("ВР");
	
	Возврат НаборПоказателей;
	
КонецФункции

#Область ВидыУчета

Процедура НастроитьРесурсыПоВидамУчета(КомпоновщикНастроек, ВидыУчета, ПоляПоВидамУчета)
	
	Ресурсы = Новый Массив;
	НайтиРесурсы(Ресурсы, КомпоновщикНастроек.Настройки, ПоляПоВидамУчета);
	
	Для Каждого ЭлементРесурса Из Ресурсы Цикл
		
		Если ТипЗнч(ЭлементРесурса) = Тип("ВыбранноеПолеКомпоновкиДанных")
			Или ТипЗнч(ЭлементРесурса) = Тип("ЭлементПорядкаКомпоновкиДанных") Тогда
			ПолеКомпоновкиДанных = ЭлементРесурса.Поле;
		ИначеЕсли ТипЗнч(ЭлементРесурса) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			ПолеКомпоновкиДанных = ЭлементРесурса.ЛевоеЗначение;
		Иначе
			Продолжить;
		КонецЕсли;
		
		ИмяРесурса = БухгалтерскиеОтчетыКлиентСервер.КореньРесурса(ПолеКомпоновкиДанных);
		ВидУчета = ПоляПоВидамУчета[ИмяРесурса];
		ЭлементРесурса.Использование = (ВидыУчета.Найти(ВидУчета) <> Неопределено);
		
	КонецЦикла;
	
КонецПроцедуры

// Настройки: НастройкиКомпоновкиДанных, ГруппировкаКомпоновкиДанных, ГруппировкаТаблицыКомпоновкиДанных, ГруппировкаДиаграммыКомпоновкиДанных
Процедура НайтиРесурсы(ОтобранныеЭлементы, Настройки, Отбор)
	
	ВыбранныеПоля = ЭлементыКоллекцииКомпоновкиДанных(Настройки.Выбор.Элементы);
	Для Каждого Поле Из ВыбранныеПоля Цикл
		Если Отбор[БухгалтерскиеОтчетыКлиентСервер.КореньРесурса(Поле.Поле)] <> Неопределено Тогда
			ОтобранныеЭлементы.Добавить(Поле);
		КонецЕсли;
	КонецЦикла;
	
	ЭлементыОтбора = ЭлементыКоллекцииКомпоновкиДанных(Настройки.Отбор.Элементы);
	Для Каждого ЭлементОтбора Из ЭлементыОтбора Цикл
		Если Отбор[БухгалтерскиеОтчетыКлиентСервер.КореньРесурса(ЭлементОтбора.ЛевоеЗначение)] <> Неопределено Тогда
			ОтобранныеЭлементы.Добавить(ЭлементОтбора);
		КонецЕсли;
	КонецЦикла;
	
	ЭлементыУпорядочивания = ЭлементыКоллекцииКомпоновкиДанных(Настройки.Порядок.Элементы);
	Для Каждого ЭлементУпорядочивания Из ЭлементыУпорядочивания Цикл
		Если Отбор[БухгалтерскиеОтчетыКлиентСервер.КореньРесурса(ЭлементУпорядочивания.Поле)] <> Неопределено Тогда
			ОтобранныеЭлементы.Добавить(ЭлементУпорядочивания);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ПодчиненныйУровень Из Настройки.Структура Цикл
		
		ТипЭлемента = ТипЗнч(ПодчиненныйУровень);
		Если ТипЭлемента = Тип("ГруппировкаКомпоновкиДанных") 
			Или ТипЭлемента = Тип("ГруппировкаТаблицыКомпоновкиДанных") Тогда
			НайтиРесурсы(ОтобранныеЭлементы, ПодчиненныйУровень, Отбор);
		ИначеЕсли ТипЭлемента = Тип("ТаблицаКомпоновкиДанных") Тогда
			Для Каждого Группировка Из ПодчиненныйУровень.Колонки Цикл
				НайтиРесурсы(ОтобранныеЭлементы, Группировка, Отбор);
			КонецЦикла;
			Для Каждого Группировка Из ПодчиненныйУровень.Строки Цикл
				НайтиРесурсы(ОтобранныеЭлементы, Группировка, Отбор);
			КонецЦикла;
		ИначеЕсли ТипЭлемента = Тип("ДиаграммаКомпоновкиДанных") Тогда
			Для Каждого Группировка Из ПодчиненныйУровень.Серии Цикл
				НайтиРесурсы(ОтобранныеЭлементы, Группировка, Отбор);
			КонецЦикла;
			Для Каждого Группировка Из ПодчиненныйУровень.Точки Цикл
				НайтиРесурсы(ОтобранныеЭлементы, Группировка, Отбор);
			КонецЦикла;
		ИначеЕсли ТипЭлемента = Тип("НастройкиВложенногоОбъектаКомпоновкиДанных") Тогда
			НайтиРесурсы(ОтобранныеЭлементы, ПодчиненныйУровень.Настройки, Отбор);
		КонецЕсли;
		
	КонецЦикла;
		
КонецПроцедуры

// КоллекцияКомпоновкиДанных:
//   КоллекцияВыбранныхПолейКомпоновкиДанных, 
//   КоллекцияЭлементовОтбораКомпоновкиДанных,
//   КоллекцияЭлементовПорядкаКомпоновкиДанных
Функция ЭлементыКоллекцииКомпоновкиДанных(КоллекцияКомпоновкиДанных)
	
	Элементы = Новый Массив;
	
	Для Каждого Элемент Из КоллекцияКомпоновкиДанных Цикл
		
		ТипЭлемента = ТипЗнч(Элемент);
		Если ТипЭлемента = Тип("ВыбранноеПолеКомпоновкиДанных") 
			Или ТипЭлемента = Тип("ЭлементОтбораКомпоновкиДанных")
			Или ТипЭлемента = Тип("ЭлементПорядкаКомпоновкиДанных") Тогда
			
			Элементы.Добавить(Элемент);
			
		ИначеЕсли ТипЭлемента = Тип("ГруппаВыбранныхПолейКомпоновкиДанных") 
			Или ТипЭлемента = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			
			ВложенныеЭлементы = ЭлементыКоллекцииКомпоновкиДанных(Элемент.Элементы);
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Элементы, ВложенныеЭлементы);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Элементы;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СтандартныеГруппировки

Функция НовыйПараметрыЗаполненияГруппировок() Экспорт
	
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("НастройкиГруппировок",   Новый Массив);
	ПараметрыЗаполнения.Вставить("СтандартныеГруппировки", Ложь);
	ПараметрыЗаполнения.Вставить("НачалоПериода",          '0001-01-01');
	ПараметрыЗаполнения.Вставить("КонецПериода",           '0001-01-01');
	ПараметрыЗаполнения.Вставить("Организация",            Справочники.Организации.ПустаяСсылка());
	
	Возврат ПараметрыЗаполнения;
	
КонецФункции

Процедура УстановитьСтандартныеГруппировки(ПараметрыЗаполнения) Экспорт
	
	Если Не ПараметрыЗаполнения.СтандартныеГруппировки Тогда
		Возврат;
	КонецЕсли;
	
	НастраиваемыеАвтоматическиПоляГруппировок = Новый Структура;
	НастраиваемыеАвтоматическиПоляГруппировок.Вставить("Подразделение",        Справочники.ПодразделенияОрганизаций.ПустаяСсылка());
	НастраиваемыеАвтоматическиПоляГруппировок.Вставить("НоменклатурнаяГруппа", Справочники.НоменклатурныеГруппы.ПустаяСсылка());
	НастраиваемыеАвтоматическиПоляГруппировок.Вставить("Материал",             Справочники.Номенклатура.ПустаяСсылка());
	НастраиваемыеАвтоматическиПоляГруппировок.Вставить("СчетРасходов",         ПланыСчетов.Хозрасчетный.ПустаяСсылка());
	НастраиваемыеАвтоматическиПоляГруппировок.Вставить("СтатьяЗатрат",         Справочники.СтатьиЗатрат.ПустаяСсылка());
	// Группировка Продукция включена всегда;
	// перечисленные выше группировки будут включены, если это имеет смысл исходя из фактических данных;
	// не названные поля группировки в ходе автоматической настройки не изменяются.
	// Значения набора группировок по умолчанию, применяемые до обращения к фактическим данным, заданы в схеме.
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаНачала",    ПараметрыЗаполнения.НачалоПериода);
	Запрос.УстановитьПараметр("ДатаОкончания", ПараметрыЗаполнения.КонецПериода);
	Запрос.УстановитьПараметр("Организация",   ПараметрыЗаполнения.Организация);
	// Также будут добавлены параметры с пустыми ссылками
	
	// Выберем имена полей, в данных которых более одного значащего варианта значения
	ШаблонТекстаЗапроса =
	// В шаблоне используется слово "Продукция", которое затем будет неминуемо заменено на имя одного из автоматически настраиваемых полей.
	"ВЫБРАТЬ
	|	""Продукция"" КАК Имя
	|ИЗ
	|	(ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 2
	|		ОтображаемыеДанные.Продукция КАК Продукция
	|	ИЗ
	|		РегистрСведений.РасчетКалькуляцииСебестоимости КАК ОтображаемыеДанные
	|	ГДЕ
	|		ОтображаемыеДанные.Активность
	|		И ОтображаемыеДанные.Продукция <> &ПродукцияПустаяСсылка
	|		И ОтображаемыеДанные.ПериодРасчета МЕЖДУ &ДатаНачала И &ДатаОкончания
	|		И ОтображаемыеДанные.Организация = &Организация) КАК ВариантыЗначения
	|
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(ВариантыЗначения.Продукция) > 1";
	
	ЭлементыТекстаЗапроса = Новый Массив;
	Для Каждого ОписаниеАвтоПоля Из НастраиваемыеАвтоматическиПоляГруппировок Цикл
		ЭлементыТекстаЗапроса.Добавить(СтрЗаменить(ШаблонТекстаЗапроса, "Продукция", ОписаниеАвтоПоля.Ключ));
		Запрос.УстановитьПараметр(ОписаниеАвтоПоля.Ключ + "ПустаяСсылка", ОписаниеАвтоПоля.Значение);
	КонецЦикла;
	
	Запрос.Текст = СтрСоединить(
		ЭлементыТекстаЗапроса, 
		"
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|");
	
	ИменаПолейВключитьГруппировки = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Имя");
	НастроитьАвтоматически = ЗначениеЗаполнено(ИменаПолейВключитьГруппировки);
	
	Для Каждого НастройкаГруппировок Из ПараметрыЗаполнения.НастройкиГруппировок Цикл
		
		Для Каждого Группировка Из НастройкаГруппировок Цикл
			
			Если Группировка.Имя = "Продукция" Тогда
				Группировка.Использование = Истина;
				Продолжить;
			КонецЕсли;
			
			Если Не НастроитьАвтоматически 
				Или Не НастраиваемыеАвтоматическиПоляГруппировок.Свойство(Группировка.Имя) Тогда
				Продолжить;
			КонецЕсли;
			
			Группировка.Использование = (ИменаПолейВключитьГруппировки.Найти(Группировка.Имя) <> Неопределено);
			
		КонецЦикла;
		
	КонецЦикла;
		
КонецПроцедуры

#КонецОбласти

#КонецЕсли
