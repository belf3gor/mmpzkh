#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область СлужебныеПроцедурыИФункции

#Область ФормированиеРегламентированногоОтчета

Функция СформироватьАвтоматическиРеглОтчет(ПараметрыАвтоформирования, КорректирующийОтчет) Экспорт
	
	ИмяФормы = ПараметрыАвтоформирования.ИмяФормыОтчета;
	
	РазделыОтчета = РазделыРеглОтчета(ИмяФормы);
			
	ДанныеРеглОтчета = Новый Структура;
	ДанныеРеглОтчета.Вставить("ДатаПодписи", ТекущаядатаСеанса());
	
	ПараметрыАвтоФормирования.Вставить("ДатаПодписи", ДанныеРеглОтчета.ДатаПодписи);
	
	ПараметрыАвтоФормирования.Вставить("НомерКорректировки", ?(КорректирующийОтчет, 1, 0));
	
	ЗаполнитьРеглОтчет(ИмяФормы,
					   ПараметрыАвтоформирования,
					   КорректирующийОтчет,
					   РазделыОтчета,
					   ДанныеРеглОтчета);
		
	РазделыОтчета.Титульный.Данные.НомерКорректировки = ПараметрыАвтоФормирования.НомерКорректировки;
	РазделыОтчета.Титульный.Данные.ДатаПодписи = ДанныеРеглОтчета.ДатаПодписи;
	
	ДанныеРеглОтчета.СтруктураРеквизитовФормы.ВидДокумента = ?(КорректирующийОтчет, 1, 0);
	ДанныеРеглОтчета.СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета = ПараметрыАвтоформирования.ДатаНачала;
	ДанныеРеглОтчета.СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета  = ПараметрыАвтоформирования.ДатаОкончания;
	
	ДанныеРеглОтчета.Вставить("СтруктураВариантыЗаполнения", Новый Структура);
	СформироватьВариантыЗаполнения(ИмяФормы,
								   ДанныеРеглОтчета.СтруктураРеквизитовФормы,
								   ДанныеРеглОтчета.СтруктураВариантыЗаполнения);
													  
	ПоказатьПериод(ИмяФормы, ДанныеРеглОтчета.СтруктураРеквизитовФормы);
	
	ЗаполнитьСведенияОбОрганизации(ИмяФормы,
								   РазделыОтчета.Титульный.Данные,
								   ДанныеРеглОтчета.СтруктураРеквизитовФормы,
								   ДанныеРеглОтчета.ДатаПодписи);
	
	ДеревоСтраницОтчета = СтруктураСтраницОтчета(ИмяФормы);
	
	ДанныеРеглОтчета.Вставить("ДеревоСтраницОтчета", ДеревоСтраницОтчета);
													  
	ПараметрыЗаписи = Новый Структура;
	ПараметрыЗаписи.Вставить("ИсточникОтчета", ПараметрыАвтоформирования.ИсточникОтчета);
	ПараметрыЗаписи.Вставить("ИмяФормыОтчета", ПараметрыАвтоформирования.ИмяФормыОтчета);
	ПараметрыЗаписи.Вставить("Организация", ПараметрыАвтоформирования.Организация);
	ПараметрыЗаписи.Вставить("ДатаНачала", ПараметрыАвтоформирования.ДатаНачала);
	ПараметрыЗаписи.Вставить("ДатаОкончания", ПараметрыАвтоформирования.ДатаОкончания);
	ПараметрыЗаписи.Вставить("СохраняемыйРеглОтчет", ПараметрыАвтоформирования.СсылкаНаСохрРеглОтчет);
	ПараметрыЗаписи.Вставить("Ошибки", ПараметрыАвтоформирования.Ошибки);
	ПараметрыЗаписи.Вставить("ДатаПодписи", ДанныеРеглОтчета.ДатаПодписи);
	ПараметрыЗаписи.Вставить("ЕдиницаИзмерения", Перечисления.ПорядкиОкругленияОтчетности.Окр1);
	ПараметрыЗаписи.Вставить("ТочностьЕдиницыИзмерения", 0);
	ПараметрыЗаписи.Вставить("Периодичность", ДанныеРеглОтчета.СтруктураРеквизитовФормы.мПериодичность);
	ПараметрыЗаписи.Вставить("Комментарий", "");
	ПараметрыЗаписи.Вставить("КодИФНС", РазделыОтчета.Титульный.Данные.КодИМНС);
	ПараметрыЗаписи.Вставить("КПП", РазделыОтчета.Титульный.Данные.КПП1);
	ПараметрыЗаписи.Вставить("СтруктураРеквизитовФормы", ДанныеРеглОтчета.СтруктураРеквизитовФормы);
	ПараметрыЗаписи.Вставить("СтруктураВариантыЗаполнения", ДанныеРеглОтчета.СтруктураВариантыЗаполнения);
	ПараметрыЗаписи.Вставить("ВерсияФормы", ДанныеРеглОтчета.СтруктураРеквизитовФормы.мВерсияФормы);
	ПараметрыЗаписи.Вставить("ФлОтклВыборЗначений", Ложь);
	ПараметрыЗаписи.Вставить("Автозаполнение", Ложь);
	ПараметрыЗаписи.Вставить("ПечатьБезШтрихкодаРазрешена", Неопределено);
	ПараметрыЗаписи.Вставить("ФлПодсчетСтраниц", Неопределено);
	ПараметрыЗаписи.Вставить("ДеревоСтраницОтчета", ДеревоСтраницОтчета);
	ПараметрыЗаписи.Вставить("Вариант", ?(КорректирующийОтчет, 1, 0));
	ПараметрыЗаписи.Вставить("РазделыОтчета", РазделыОтчета);
	ПараметрыЗаписи.Вставить("НаименованиеОтчета", ДанныеРеглОтчета.СтруктураРеквизитовФормы.НаименованиеОтчета);
	 				
	Возврат ЗаписатьРеглОтчет(ИмяФормы, ПараметрыЗаписи);
	
КонецФункции

Функция ЗаписатьРеглОтчет(ИмяФормы, ПараметрыЗаписи)
			
	Если НЕ ПараметрыЗаписи.СохраняемыйРеглОтчет = Неопределено Тогда
		
		Если ТипЗнч(ПараметрыЗаписи.СохраняемыйРеглОтчет) = Тип("ДокументСсылка.РегламентированныйОтчет")
		   И НЕ ПараметрыЗаписи.СохраняемыйРеглОтчет.Пустая() Тогда
			
			ДокументРегламентированныйОтчет = ПараметрыЗаписи.СохраняемыйРеглОтчет.ПолучитьОбъект();
			
			РегламентированнаяОтчетность.ЗаблокироватьДокумент(ДокументРегламентированныйОтчет);
						
		ИначеЕсли ТипЗнч(ПараметрыЗаписи.СохраняемыйРеглОтчет) = Тип("ДокументОбъект.РегламентированныйОтчет") Тогда
			
			ДокументРегламентированныйОтчет = ПараметрыЗаписи.СохраняемыйРеглОтчет;
			
			РегламентированнаяОтчетность.ЗаблокироватьДокумент(ДокументРегламентированныйОтчет);
						
		Иначе
			
			РегламентированнаяОтчетность.ДобавитьОшибкуФормированияРеглОтчета(ПараметрыЗаписи,
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Неверный тип входящего параметра (%1) при автоматическом формировании формы %2'"),
						ТипЗнч(ПараметрыЗаписи.СохраняемыйРеглОтчет),  ПараметрыЗаписи.НаименованиеОтчета));
						
			Возврат Неопределено;
			
		КонецЕсли
		
	Иначе
		
		ДокументРегламентированныйОтчет = Документы.РегламентированныйОтчет.СоздатьДокумент();
		
		РегламентированнаяОтчетность.ЗаблокироватьДокумент(ДокументРегламентированныйОтчет);
		
		ДокументРегламентированныйОтчет.Дата = ПараметрыЗаписи.ДатаОкончания;
		ДокументРегламентированныйОтчет.УстановитьВремя();
		ДокументРегламентированныйОтчет.УстановитьНовыйНомер();
		
	КонецЕсли;
		
	ПараметрыЗаписи.СохраняемыйРеглОтчет = ДокументРегламентированныйОтчет;
		
	Если ЗаписатьДокумент(ИмяФормы, ПараметрыЗаписи) = Ложь Тогда
		Возврат Неопределено;
	КонецЕсли;
			
	Возврат ДокументРегламентированныйОтчет.Ссылка;
	
КонецФункции

Функция ЗаписатьДокумент(ИмяФормы, ПараметрыЗаписи) Экспорт
	
	ДокументРегламентированныйОтчет = ПараметрыЗаписи.СохраняемыйРеглОтчет;
				
	ДокументРегламентированныйОтчет.ИсточникОтчета           = ПараметрыЗаписи.ИсточникОтчета;
	ДокументРегламентированныйОтчет.НаименованиеОтчета       = ПараметрыЗаписи.НаименованиеОтчета;
	ДокументРегламентированныйОтчет.ДатаНачала               = ПараметрыЗаписи.ДатаНачала;
	ДокументРегламентированныйОтчет.ДатаОкончания            = ПараметрыЗаписи.ДатаОкончания;
	ДокументРегламентированныйОтчет.Периодичность            = ПараметрыЗаписи.Периодичность;
	ДокументРегламентированныйОтчет.ВыбраннаяФорма           = ПараметрыЗаписи.ИмяФормыОтчета;
	ДокументРегламентированныйОтчет.Организация              = ПараметрыЗаписи.Организация;
	ДокументРегламентированныйОтчет.ДатаПодписи              = ПараметрыЗаписи.ДатаПодписи;
	ДокументРегламентированныйОтчет.ЕдиницаИзмерения         = ПараметрыЗаписи.ЕдиницаИзмерения;
	ДокументРегламентированныйОтчет.ТочностьЕдиницыИзмерения = ПараметрыЗаписи.ТочностьЕдиницыИзмерения;
	ДокументРегламентированныйОтчет.ВидОтчетности            = Перечисления.ВидыОтчетности.РегламентированнаяОтчетность;
	ДокументРегламентированныйОтчет.Комментарий              = ПараметрыЗаписи.Комментарий;
	ДокументРегламентированныйОтчет.КодНалоговогоОргана      = ПараметрыЗаписи.КодИФНС;
	ДокументРегламентированныйОтчет.КПП                      = ПараметрыЗаписи.КПП;
	ДокументРегламентированныйОтчет.Вид                      = ПараметрыЗаписи.Вариант;
	ДокументРегламентированныйОтчет.ФорматВыгрузки           = "Автоматически";
	ДокументРегламентированныйОтчет.ПредставлениеВида        = РегламентированнаяОтчетность.
															   ПредставлениеВидаДокумента(
															   ДокументРегламентированныйОтчет.Вид);
															   
	ПараметрыЗаписи.РазделыОтчета.Титульный.Данные.Вставить("ПредставительФизЛицо",
		ПараметрыЗаписи.СтруктураРеквизитовФормы.мПредставительФизЛицо);
	ПараметрыЗаписи.РазделыОтчета.Титульный.Данные.Вставить("НазваниеПредставителя",
		ПараметрыЗаписи.СтруктураРеквизитовФормы.мНазваниеПредставителя);
	ПараметрыЗаписи.РазделыОтчета.Титульный.Данные.Вставить("ДокументПредставителя",
		ПараметрыЗаписи.СтруктураРеквизитовФормы.мДокументПредставителя);
	ПараметрыЗаписи.РазделыОтчета.Титульный.Данные.Вставить("ФамилияПредставителя",
		ПараметрыЗаписи.СтруктураРеквизитовФормы.мФамилияПредставителя);
	ПараметрыЗаписи.РазделыОтчета.Титульный.Данные.Вставить("ИмяПредставителя",
		ПараметрыЗаписи.СтруктураРеквизитовФормы.мИмяПредставителя);
	ПараметрыЗаписи.РазделыОтчета.Титульный.Данные.Вставить("ОтчествоПредставителя",
		ПараметрыЗаписи.СтруктураРеквизитовФормы.мОтчествоПредставителя);
	ПараметрыЗаписи.РазделыОтчета.Титульный.Данные.Вставить("ВсегоЧисленность",
		ПараметрыЗаписи.СтруктураРеквизитовФормы.мВсегоЧисленность);
		
	Если НЕ ЗначениеЗаполнено(ПараметрыЗаписи.РазделыОтчета.Титульный.Данные.ДатаПериод) Тогда
		ПараметрыЗаписи.РазделыОтчета.Титульный.Данные.ДатаПериод = Дата(КонецГода(ПараметрыЗаписи.ДатаОкончания) + 1);
	КонецЕсли;
																   
	ПоказателиОтчета = Новый Структура;
	Префикс = "ПолеТабличногоДокумента";
	Для Каждого Раздел Из ПараметрыЗаписи.РазделыОтчета Цикл
		Если НЕ Раздел.Значение.МногостраничностьВРазделе Тогда
			ПоказателиОтчета.Вставить(Префикс + Раздел.Ключ, Раздел.Значение.Данные);
		КонецЕсли;
	КонецЦикла;
							
	СписокСохранения = Новый Структура;
	СписокСохранения.Вставить("ПоказателиОтчета", ПоказателиОтчета);
	
	СписокСохранения.Вставить("ДанныеМногострочныхРазделов", Новый Структура);
	
	СписокСохранения.Вставить("ДанныеМногостраничныхРазделов", Новый Структура);
	
	СписокСохранения.Вставить("ДанныеВариантовАвтоЗаполнения", ПараметрыЗаписи.СтруктураВариантыЗаполнения);
	
	СписокСохранения.Вставить("ВерсияФормы", ПараметрыЗаписи.ВерсияФормы);
	
	СписокСохранения.Вставить("ФлПодсчетСтраниц", ПараметрыЗаписи.ФлПодсчетСтраниц);
	
	СписокСохранения.Вставить("ФлОтклВыборЗначений", ПараметрыЗаписи.ФлОтклВыборЗначений);
	
	СписокСохранения.Вставить("ПечатьБезШтрихкодаРазрешена", ПараметрыЗаписи.ПечатьБезШтрихкодаРазрешена);
	
	ДокументРегламентированныйОтчет.ДанныеОтчета = Новый ХранилищеЗначения(СписокСохранения);
	
	ДокументРегламентированныйОтчет.ДеревоНастройкиСтраниц = Новый ХранилищеЗначения(
												 ПараметрыЗаписи.ДеревоСтраницОтчета);
	
	Попытка
		
		ДокументРегламентированныйОтчет.Записать();
		
		ДокументРегламентированныйОтчет.Разблокировать();
						
	Исключение
		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"),
			РегламентированнаяОтчетностьКлиентСервер.СформироватьТекстСообщения(ОписаниеОшибки()));
		
		РегламентированнаяОтчетность.ДобавитьОшибкуФормированияРеглОтчета(ПараметрыЗаписи, ТекстСообщения);
		
		ДокументРегламентированныйОтчет.Разблокировать();
		
		Возврат Ложь;
		
	КонецПопытки;
			
	Возврат Истина;
	
КонецФункции

Функция РазделыРеглОтчета(ИмяФормы) Экспорт
			
	РазделыОтчета = Новый Структура;
	РазделыОтчета.Вставить("Титульный", Новый Структура("МногостраничностьВРазделе, Данные", Ложь, Новый Структура));
		
	Возврат РазделыОтчета;
	
КонецФункции

Процедура ЗаполнитьРеглОтчет(ИмяФормы,
							 ПараметрыАвтоформирования,
							 КорректирующийОтчет,
							 РазделыОтчета,
							 ДанныеРеглОтчета)
		
	ИсточникОтчета = ПараметрыАвтоформирования.ИсточникОтчета;
	ИмяФормыОтчета = ПараметрыАвтоформирования.ИмяФормыОтчета;
	
	Организация = ПараметрыАвтоформирования.Организация;
			
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("ДатаНачала", ПараметрыАвтоформирования.ДатаНачала);
	ДопПараметры.Вставить("ДатаОкончания", ПараметрыАвтоформирования.ДатаОкончания);
		
	ДанныеРеглОтчета.Вставить("СтруктураРеквизитовФормы");
	
	СформироватьСтруктуруРеквизитовФормы(ИмяФормы, ДанныеРеглОтчета.СтруктураРеквизитовФормы);
			
	ДанныеРеглОтчета.СтруктураРеквизитовФормы.Организация = ПараметрыАвтоформирования.Организация;
	
	ЗаполнитьПустыеСтруктурыДанных(ИмяФормы, РазделыОтчета);
		
	ПараметрыОтчета = Новый Структура();
	ПараметрыОтчета.Вставить("Организация",             ПараметрыАвтоформирования.Организация);
	ПараметрыОтчета.Вставить("ДатаНачалаПериодаОтчета", ПараметрыАвтоформирования.ДатаНачала);
	ПараметрыОтчета.Вставить("ДатаКонцаПериодаОтчета",  ПараметрыАвтоформирования.ДатаОкончания);
	ПараметрыОтчета.Вставить("НомерКорректировки",      ПараметрыАвтоформирования.НомерКорректировки);
	ПараметрыОтчета.Вставить("ДатаПодписи",             ПараметрыАвтоформирования.ДатаПодписи);
		
	Контейнер = Новый Структура;
	Контейнер.Вставить("Титульный",  РазделыОтчета.Титульный.Данные);
			
	Если ПараметрыАвтоформирования.Свойство("ЗаполнятьВнешнимиДанными")
	   И ПараметрыАвтоформирования.ЗаполнятьВнешнимиДанными = Истина Тогда
		
		ЗаполнитьРеглОтчетВнешнимиДанными(ИмяФормы, Контейнер, ПараметрыАвтоформирования.ВнешниеДанные);
					
	КонецЕсли;
			
КонецПроцедуры

Процедура СформироватьСтруктуруРеквизитовФормы(ИмяФормы, СтруктураРеквизитовФормы) Экспорт

	СтруктураРеквизитовФормы = Новый Структура;
	СтруктураРеквизитовФормы.Вставить("мВерсияФормы", "01/01/" + Лев(Прав(СокрЛП(ИмяФормы), 7), 4));
	СтруктураРеквизитовФормы.Вставить("мСоставПоказателей", "СоставПоказателей" + Прав(СокрЛП(ИмяФормы), 7));
	СтруктураРеквизитовФормы.Вставить("НаименованиеОтчета", "Сведения о среднесписочной численности работников");
	СтруктураРеквизитовФормы.Вставить("мВсегоЧисленность", 0);
	СтруктураРеквизитовФормы.Вставить("ОтображатьКнопкуЗаполнить", Ложь);
	СтруктураРеквизитовФормы.Вставить("ОтображатьКнопкуРасшифровать", Ложь);
	СтруктураРеквизитовФормы.Вставить("Организация");
	СтруктураРеквизитовФормы.Вставить("ЕдиницаИзмерения");
	СтруктураРеквизитовФормы.Вставить("ТочностьЕдиницыИзмерения");
	СтруктураРеквизитовФормы.Вставить("мДелитель");
    СтруктураРеквизитовФормы.Вставить("ВидДокумента");
	СтруктураРеквизитовФормы.Вставить("ИП");
	СтруктураРеквизитовФормы.Вставить("мВПрограммеИзмененаОрганизация");
	СтруктураРеквизитовФормы.Вставить("мАвтоВыборКодов");
	СтруктураРеквизитовФормы.Вставить("мИнтервалАвтосохранения");
	СтруктураРеквизитовФормы.Вставить("мВариант");
	СтруктураРеквизитовФормы.Вставить("мВыбраннаяФорма");
	СтруктураРеквизитовФормы.Вставить("мБезОткрытияФормы");	
	СтруктураРеквизитовФормы.Вставить("мДатаКонцаПериодаОтчета");
	СтруктураРеквизитовФормы.Вставить("мДатаНачалаПериодаОтчета");
	СтруктураРеквизитовФормы.Вставить("мДокументВосстановлен");
	СтруктураРеквизитовФормы.Вставить("мДокументПредставителя");
	СтруктураРеквизитовФормы.Вставить("мЗаписываетсяНовыйДокумент");
	СтруктураРеквизитовФормы.Вставить("СтрПериодОтчета");
	СтруктураРеквизитовФормы.Вставить("мЗаписьЗапрещена");
	СтруктураРеквизитовФормы.Вставить("мИмяПредставителя");
	СтруктураРеквизитовФормы.Вставить("мКодОтчета");
	СтруктураРеквизитовФормы.Вставить("мНазваниеПредставителя");
	СтруктураРеквизитовФормы.Вставить("мОписаниеТиповЧислоЕ");
	СтруктураРеквизитовФормы.Вставить("мОтчествоПредставителя");
	СтруктураРеквизитовФормы.Вставить("мПериодичность");
	СтруктураРеквизитовФормы.Вставить("мПечатаемыеРазделы");
	СтруктураРеквизитовФормы.Вставить("мПечатныеФормы");
	СтруктураРеквизитовФормы.Вставить("мПечатьБезШтрихкодаРазрешена");
	СтруктураРеквизитовФормы.Вставить("мПредставительФизЛицо");
	СтруктураРеквизитовФормы.Вставить("мРежимПечати");
	СтруктураРеквизитовФормы.Вставить("мСкопированаФорма");
	СтруктураРеквизитовФормы.Вставить("мСохраненныйДок");
	СтруктураРеквизитовФормы.Вставить("мСчетчикСтраниц");
	СтруктураРеквизитовФормы.Вставить("мФамилияПредставителя");
	СтруктураРеквизитовФормы.Вставить("НаимТекущегоРаздела");
	СтруктураРеквизитовФормы.Вставить("СписокПечатаемыхЛистов");
	СтруктураРеквизитовФормы.Вставить("мСтрокаФормата");
	СтруктураРеквизитовФормы.Вставить("НаимОрганизации");
	СтруктураРеквизитовФормы.Вставить("ДоступенМеханизмПечатиРеглОтчетностиСДвухмернымШтрихкодомPDF417");
	СтруктураРеквизитовФормы.Вставить("СформироватьФормуОтчетаАвтоматически");
	СтруктураРеквизитовФормы.Вставить("ДатаПериод");
	СтруктураРеквизитовФормы.Вставить("ДатаРегистрацииОрганизации");
		
КонецПроцедуры

Процедура ЗаполнитьПустыеСтруктурыДанных(ИмяФормы, РазделыОтчета)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
			
	Для Каждого Раздел Из РазделыОтчета Цикл
		
		Если Раздел.Значение.Данные.Количество() = 0 Тогда
			
			ТабличныйДокумент.Очистить();
			
			ТабличныйДокумент.Вывести(ЭтотОбъект.ПолучитьМакет(ИмяФормы + "_" + Раздел.Ключ));
		
			Раздел.Значение.Данные = СобратьДанные(ИмяФормы, ТабличныйДокумент);
			
			Если Раздел.Значение.Свойство("ДанныеДопСтрок") Тогда
				
				Если ТипЗнч(Раздел.Значение.ДанныеДопСтрок) = Тип("Структура") Тогда
					
					Для Каждого ДопСтрока Из Раздел.Значение.ДанныеДопСтрок Цикл
						
						ДопСтрока.Значение.Добавить();
						
					КонецЦикла;
										
				Иначе
					
					Раздел.Значение.ДанныеДопСтрок.Добавить();
					
				КонецЕсли;	
				
			КонецЕсли;	
							
		КонецЕсли;
	
	КонецЦикла;
			
КонецПроцедуры

Функция СобратьДанные(ИмяФормы, ТабличныйДокумент)

	СтруктураДанныхПоля = Новый Структура;
	
	Для Инд = 0 По ТабличныйДокумент.Области.Количество() - 1 Цикл
		
		ТекущаяОбласть = ТабличныйДокумент.Области[Инд];

		Если НЕ ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			Продолжить;
		КонецЕсли;

		Если ТекущаяОбласть.СодержитЗначение <> Истина Тогда
			Продолжить;
		КонецЕсли;

		ИмяПоказателя      = ТекущаяОбласть.Имя;
		ЗначениеПоказателя = ТекущаяОбласть.Значение;
		
		СтруктураДанныхПоля.Вставить(ИмяПоказателя, ЗначениеПоказателя);

	КонецЦикла;

	Возврат СтруктураДанныхПоля;
	
КонецФункции

Процедура ЗаполнитьРеглОтчетВнешнимиДанными(ИмяФормы, Приемник, Источник)
	
	// Дата, на которую указана среднесписочная численность.
	Приемник.Титульный.ДатаПериод = Дата(Источник.Титульный.ДатаПериод);
		
	// Код тарифа плательщика.
	Приемник.Титульный.Численность = Строка(Источник.Титульный.Численность);
			 	 	
КонецПроцедуры

Процедура СформироватьВариантыЗаполнения(ИмяФормы,
										 СтруктураРеквизитовФормы,
										 СтруктураВариантыЗаполнения,
										 ТаблицаСоставПоказателей = Неопределено) Экспорт
	
	МакетСоставаПоказателей = ЭтотОбъект.ПолучитьМакет(СтруктураРеквизитовФормы.мСоставПоказателей);
	
	Для Инд = 0 По МакетСоставаПоказателей.Области.Количество() - 1 Цикл
		
		ТекОбласть  = МакетСоставаПоказателей.Области[Инд];
		ИмяСтраницы = ТекОбласть.Имя;
		
		ТаблицаВариантыЗаполнения = Новый ТаблицаЗначений;
		ТаблицаВариантыЗаполнения.Колонки.Добавить("КодПоказателя",
			Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(50)));
		ТаблицаВариантыЗаполнения.Колонки.Добавить("ВариантЗаполнения",
			Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(1, 0)));
		ТаблицаВариантыЗаполнения.Колонки.Добавить("ЗначениеАвто",
			Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(16, 2)));
		ТаблицаВариантыЗаполнения.Колонки.Добавить("Дельта",
			Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(16, 2)));
		ТаблицаВариантыЗаполнения.Колонки.Добавить("Комментарий",
			Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100)));
		ТаблицаВариантыЗаполнения.Колонки.Добавить("КодПоказателяПоСтруктуре",
			Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(50)));
			
		Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
			
			КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
			ИмяПоказателя = КодПоказателя;
			
			Если КодПоказателя = "===" Тогда
				Прервать;
			КонецЕсли;
			
			Если Лев(КодПоказателя, 2) = "//" Тогда
				Продолжить;
			КонецЕсли;
			
			КодПоказателяПоФорме 	 = СокрЛП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
			ПризнМногострочность 	 = СокрЛП(МакетСоставаПоказателей.Область(Ном, 3).Текст);
			ТипДанныхРеквизита	     = СокрЛП(МакетСоставаПоказателей.Область(Ном, 4).Текст);
			КодПоказателяПоСтруктуре = СокрЛП(МакетСоставаПоказателей.Область(Ном, 9).Текст);						

			стрКолСтрокИсходный = СокрЛП(МакетСоставаПоказателей.Область(Ном, 5).Текст);
			
			стрВариантЗаполнения = РегламентированнаяОтчетность.ПолучитьВариантЗаполненияПоказателяРегОтчета(
								   	МакетСоставаПоказателей, Ном);
									
			чКолСтрокИсходный  = ? (ПустаяСтрока(стрКолСтрокИсходный),  0, Число(стрКолСтрокИсходный));						
			чВариантЗаполнения = ? (ПустаяСтрока(стрВариантЗаполнения), 0, Число(стрВариантЗаполнения));
			
			Если ТипЗнч(ТаблицаСоставПоказателей) = Тип("ТаблицаЗначений") Тогда
				
				НоваяСтрока = ТаблицаСоставПоказателей.Добавить();
				НоваяСтрока.ИмяПоляТаблДокумента   	 = ИмяСтраницы;
				НоваяСтрока.КодПоказателяПоСоставу 	 = КодПоказателя;
				НоваяСтрока.КодПоказателяПоФорме   	 = КодПоказателяПоФорме;
				НоваяСтрока.ПризнМногострочности   	 = ПризнМногострочность;
				НоваяСтрока.ТипДанныхПоказателя 	 = ТипДанныхРеквизита;
				НоваяСтрока.КодПоказателяПоСтруктуре = КодПоказателяпоСтруктуре;
				
			КонецЕсли;	
						
			Если чВариантЗаполнения <> 0
			 ИЛИ КодПоказателяПоФорме = "Численность" Тогда
				
				НоваяСтрока = ТаблицаВариантыЗаполнения.Добавить();
				НоваяСтрока.КодПоказателя = ? (НЕ ПустаяСтрока(КодПоказателяПоФорме), КодПоказателяПоФорме, КодПоказателя);
				НоваяСтрока.ВариантЗаполнения = чВариантЗаполнения;
				НоваяСтрока.КодПоказателяПоСтруктуре = КодПоказателяПоСтруктуре;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если ТаблицаВариантыЗаполнения.Количество() > 0 Тогда
			
			МассивВариантовЗаполненияСтраниц = Новый Массив;
			МассивВариантовЗаполненияСтраниц.Добавить(ТаблицаВариантыЗаполнения);
			
			СтруктураВариантыЗаполнения.Вставить(ИмяСтраницы, МассивВариантовЗаполненияСтраниц);
			
		КонецЕсли;
		
	КонецЦикла;
	                 	
КонецПроцедуры

Процедура ПоказатьПериод(ИмяФормы, СтруктураРеквизитовФормы) Экспорт
	
	СтруктураРеквизитовФормы.мПериодичность = Перечисления.Периодичность.Год;
	
	СтруктураРеквизитовФормы.СтрПериодОтчета = ПредставлениеПериода(НачалоДня(
		СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета),
		КонецДня(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета), "ФП = Истина");
	
КонецПроцедуры
	
Процедура ЗаполнитьСведенияОбОрганизации(ИмяФормы,
										 СтруктураДанныхТитульный,
										 СтруктураРеквизитовФормы,
										 ДатаПодписи,
										 ВПрограммеИзмененаДатаПодписи = Ложь) Экспорт
															
	СтруктураРеквизитовФормы.ИП = НЕ РегламентированнаяОтчетностьВызовСервера.ЭтоЮридическоеЛицо(
		СтруктураРеквизитовФормы.Организация);
															
	Сведения = "ФИОРук, ФИО";
	
	Если НЕ ВПрограммеИзмененаДатаПодписи Тогда
		
		Сведения = Сведения + " ,ИННЮЛ, КППЮЛ, НаимЮЛПол, КодНО, НаимНО, ";
		
	КонецЕсли;
	
	СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(
		СтруктураРеквизитовФормы.Организация, ДатаПодписи, Сведения);
		
	Если ТипЗнч(СтруктураДанныхТитульный) = Тип("ТабличныйДокумент") Тогда	
		
		Если НЕ ВПрограммеИзмененаДатаПодписи Тогда
			
			СтруктураДанныхТитульный.Области["ИНН1"].Значение    = СведенияОбОрганизации.ИННЮЛ;
			СтруктураДанныхТитульный.Области["КПП1"].Значение    = СведенияОбОрганизации.КППЮЛ;
			СтруктураДанныхТитульный.Области["КодИМНС"].Значение = СведенияОбОрганизации.КодНО;
			СтруктураДанныхТитульный.Области["ОргИМНС"].Значение = СведенияОбОрганизации.НаимНО;
			
			Если СтруктураРеквизитовФормы.ИП Тогда
				СтруктураДанныхТитульный.Области.ОргНазв.Значение = СокрЛП(СведенияОбОрганизации.ФИО);
			Иначе
				СтруктураДанныхТитульный.Области.ОргНазв.Значение = СокрЛП(СведенияОбОрганизации.НаимЮлПол);
			КонецЕсли;
			
		КонецЕсли;	
		
		СтруктураДанныхТитульный.Области["ОргДиректор"].Значение
		= ?(СтруктураРеквизитовФормы.ИП, "", СведенияОбОрганизации.ФИОРук);
		
	ИначеЕсли ТипЗнч(СтруктураДанныхТитульный) = Тип("Структура") Тогда
		
		Если НЕ ВПрограммеИзмененаДатаПодписи Тогда
			
			СтруктураДанныхТитульный.ИНН1    = СведенияОбОрганизации.ИННЮЛ;
			СтруктураДанныхТитульный.КПП1    = СведенияОбОрганизации.КППЮЛ;
			СтруктураДанныхТитульный.КодИМНС = СведенияОбОрганизации.КодНО;
			СтруктураДанныхТитульный.ОргИМНС = СведенияОбОрганизации.НаимНО;
			
			Если СтруктураРеквизитовФормы.ИП Тогда
				СтруктураДанныхТитульный.ОргНазв = СокрЛП(СведенияОбОрганизации.ФИО);
			Иначе
				СтруктураДанныхТитульный.ОргНазв = СокрЛП(СведенияОбОрганизации.НаимЮлПол);
			КонецЕсли;
			
		КонецЕсли;	
		
		СтруктураДанныхТитульный.ОргДиректор
		= ?(СтруктураРеквизитовФормы.ИП, "", СведенияОбОрганизации.ФИОРук);
		
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("СтруктураРеквизитовФормы", СтруктураРеквизитовФормы);
	СтруктураПараметров.Вставить("ДатаПодписи", ДатаПодписи);
	СтруктураПараметров.Вставить("ТабличныйДокумент", СтруктураДанныхТитульный);
	
	РегламентированнаяОтчетностьКлиентСервер.ПроставитьСведенияОПредставителеОрганизации(СтруктураПараметров, Ложь);
	
КонецПроцедуры

Функция СтруктураСтраницОтчета(ИмяФормы) Экспорт
	
	ДеревоСтраницОтчета = Новый ДеревоЗначений;
	
	ДеревоСтраницОтчета.Колонки.Добавить("Представление",
		Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100)));
	ДеревоСтраницОтчета.Колонки.Добавить("ИмяСтраницы",
		Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100)));
	ДеревоСтраницОтчета.Колонки.Добавить("ИмяПоляТабличногоДокум",
		Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100)));	
	ДеревоСтраницОтчета.Колонки.Добавить("ИмяОбластиТабличногоПоля",
		Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100)));
	ДеревоСтраницОтчета.Колонки.Добавить("ОриентацияСтраницы");
	ДеревоСтраницОтчета.Колонки.Добавить("ВыводНаПечать",
		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(1, 0)));
	ДеревоСтраницОтчета.Колонки.Добавить("ПоказатьСтраницу",
		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(1, 0)));
	ДеревоСтраницОтчета.Колонки.Добавить("ВыгрузитьСтраницу",
		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(1, 0)));	
							
	ДеревоСтраницОтчета.Строки.Очистить();
	
	СтрокаУровня1 = ДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы        = "Титульный";
	СтрокаУровня1.Представление      = "Титульный лист";
	СтрокаУровня1.ОриентацияСтраницы = "Портрет";
	СтрокаУровня1.ВыводНаПечать      = 1;
	СтрокаУровня1.ПоказатьСтраницу   = 1;
	СтрокаУровня1.ВыгрузитьСтраницу  = 2;
		
	Возврат ДеревоСтраницОтчета;
	
КонецФункции

#КонецОбласти

#Область ВыгрузкаРегламентированногоОтчета

Функция УниверсальнаяВыгрузка(Параметры) Экспорт
	
	Перем ДанныеОтчета;
	Перем СтруктураРеквизитовФормы;
		
	СохраненныйОтчет  = Параметры.СохраненныйОтчет;
	ИсточникОтчета    = Параметры.ИсточникОтчета;
	ИмяФормы	      = Параметры.ВыбраннаяФорма;
	РезультатВыгрузки = Параметры.РезультатВыгрузки;
		
	СформироватьСтруктуруРеквизитовФормы(ИмяФормы, СтруктураРеквизитовФормы);
																  
	СтруктураРеквизитовФормы.мСохраненныйДок = СохраненныйОтчет;
															  
	СформироватьСтруктуруПоказателей(ИмяФормы,
									 ДанныеОтчета,
									 СтруктураРеквизитовФормы);
	
	ПараметрыВыгрузки = СформироватьСтруктуруПараметров(ИмяФормы,
														ДанныеОтчета,
														СтруктураРеквизитовФормы);
																		   
	Если НЕ ПроверитьВозможностьВыгрузки(ИмяФормы,
										 ДанныеОтчета,
										 ПараметрыВыгрузки,
										 РезультатВыгрузки) Тогда
		
		РезультатВыгрузки.Вставить("РеглОтчетВыгружен", Ложь);
		
		Возврат РезультатВыгрузки;
		
	КонецЕсли;																	   
	
	ДеревоВыгрузки = ИзвлечьСтруктуруXML(ИмяФормы);
	
	ЗаполнитьДанными(ИмяФормы,
					 ДанныеОтчета,
					 ПараметрыВыгрузки,
					 ДеревоВыгрузки,
					 РезультатВыгрузки,
					 СтруктураРеквизитовФормы);
										
	Если НЕ ПроверитьДанные(ИмяФормы, ДеревоВыгрузки, РезультатВыгрузки) Тогда
											
		РезультатВыгрузки.Вставить("РеглОтчетВыгружен", Ложь);
		
		Возврат РезультатВыгрузки;
		
	КонецЕсли;
													
	КодировкаФайлаВыгрузки = "windows-1251";									
										
	ТекстФайлаВыгрузки = ВыгрузитьДеревоВXML(ИмяФормы, ДеревоВыгрузки);
																
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("xml");
	ЗаписьТекста = Новый ЗаписьТекста(ИмяВременногоФайла, КодировкаФайлаВыгрузки);
	ЗаписьТекста.Записать(ТекстФайлаВыгрузки);
	ЗаписьТекста.Закрыть();
	ЗаписьТекста = Неопределено;
	
	ФайлВыгрузки = Новый ДвоичныеДанные(ИмяВременногоФайла);
	
	АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(ФайлВыгрузки, Новый УникальныйИдентификатор);
	
	УдалитьФайлы(ИмяВременногоФайла);
	
	РезультатВыгрузки.Вставить("ИмяФайлаВыгрузки", ПараметрыВыгрузки.ИдФайл + ".xml");
	РезультатВыгрузки.Вставить("АдресФайлаВыгрузки", АдресВоВременномХранилище);
	РезультатВыгрузки.Вставить("КодировкаФайлаВыгрузки", КодировкаФайлаВыгрузки);
	РезультатВыгрузки.Вставить("ТипФайлаВыгрузки", "СведенияОСреднесписочнойЧисленностиРаботников");
	РезультатВыгрузки.Вставить("РеглОтчетВыгружен", Истина);
		
	Возврат РезультатВыгрузки;
	
КонецФункции

Функция ПроверитьДанные(ИмяФормы, ДеревоВыгрузки, РезультатВыгрузки) Экспорт
	
	СтатусПроверки = Истина;
	
	Если ТипЗнч(ДеревоВыгрузки) <> Тип("ДеревоЗначений") Тогда
		Если НЕ ЗначениеСоответствуетФормату(ИмяФормы, ДеревоВыгрузки, РезультатВыгрузки) Тогда
			СтатусПроверки = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Для Каждого Стр из ДеревоВыгрузки.Строки Цикл
		СтатусПроверки = (ПроверитьДанные(ИмяФормы, Стр, РезультатВыгрузки) И СтатусПроверки);
	КонецЦикла;
	
	Возврат СтатусПроверки;
	
КонецФункции

Функция ЗначениеСоответствуетФормату(ИмяФормы, Стр, РезультатВыгрузки)
	
	СтатусПроверки = Истина;
	
	Если Стр.Формат = "Т" ИЛИ Стр.Формат = "T" Тогда // Учтем оба варианта: кириллицу и латиницу.
		ДлинаЗначения = СтрДлина(Стр.Значение);
		Если ДлинаЗначения < Стр.МинРазмерность Тогда
			СтатусПроверки = Ложь;
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
				НСтр("ru='Формирование XML: Длина значения показателя """
				+ РегламентированнаяОтчетность.ПредставлениеПоказателя(Стр)
				+ """ (" + АдресПоказателя(ИмяФормы, Стр)+ ") меньше минимально возможной ("
				+ ДлинаЗначения + " < " + Стр.МинРазмерность + ")'"),
				"Титульный", "");
		КонецЕсли;
		Если ДлинаЗначения > Стр.МаксРазмерность Тогда
			СтатусПроверки = Ложь;
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
				НСтр("ru='Формирование XML: Длина значения показателя """
				+ РегламентированнаяОтчетность.ПредставлениеПоказателя(Стр)
				+ """ (" + АдресПоказателя(ИмяФормы, Стр)+ ") больше максимально возможной ("
				+ ДлинаЗначения + " > " + Стр.МаксРазмерность + ")'"),
				"Титульный", "");
		КонецЕсли;
	КонецЕсли;
	
	Возврат СтатусПроверки;
	
КонецФункции

Функция АдресПоказателя(ИмяФормы, СтрокаПоказателя)
	
	Результат = СтрокаПоказателя.Код;
	
	СтрокаВерхнегоУровня = СтрокаПоказателя.Родитель;
	
	Пока ЗначениеЗаполнено(СтрокаВерхнегоУровня) Цикл
		Результат = СтрокаВерхнегоУровня.Код + "\" + Результат;
		СтрокаВерхнегоУровня = СтрокаВерхнегоУровня.Родитель;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ИзвлечьСтруктуруXML(ИмяФормы) Экспорт
	
	ДеревоСтруктуры = Новый ДеревоЗначений;
	ДеревоСтруктуры.Колонки.Добавить("Код");
	ДеревоСтруктуры.Колонки.Добавить("Тип");
	ДеревоСтруктуры.Колонки.Добавить("Формат");
	ДеревоСтруктуры.Колонки.Добавить("МинРазмерность");
	ДеревоСтруктуры.Колонки.Добавить("МаксРазмерность");
	ДеревоСтруктуры.Колонки.Добавить("Обязательность");
	ДеревоСтруктуры.Колонки.Добавить("Многостраничность");
	ДеревоСтруктуры.Колонки.Добавить("Многострочность");
	ДеревоСтруктуры.Колонки.Добавить("Раздел");
	ДеревоСтруктуры.Колонки.Добавить("Ключ");
	ДеревоСтруктуры.Колонки.Добавить("Условие");
	ДеревоСтруктуры.Колонки.Добавить("ЗначениеПоУмолчанию");
	ДеревоСтруктуры.Колонки.Добавить("Значение");
	ДеревоСтруктуры.Колонки.Добавить("Представление");
	ДеревоСтруктуры.Колонки.Добавить("Показатели");
	
	Макет = ЭтотОбъект.ПолучитьМакет("СтруктураXML" + Лев(Прав(СокрЛП(ИмяФормы), 7), 4));
	ВысотаТаблицы = Макет.ВысотаТаблицы;
	
	УчтенныеГруппы = Новый Соответствие;
	
	Для Уровень = 0 По Макет.КоличествоУровнейГруппировокСтрок() - 1 Цикл
		Макет.ПоказатьУровеньГруппировокСтрок(Уровень);
		Для НомерСтроки = 2 По ВысотаТаблицы Цикл
			НомСтр = ВысотаТаблицы - НомерСтроки + 2;
			Если Макет.Область(НомСтр, 0, НомСтр, 0).Видимость И УчтенныеГруппы.Получить(НомСтр) = Неопределено Тогда
				
				РодительскийУзел = ДеревоСтруктуры;
				Если Уровень <> 0 Тогда
					Для Инд = 1 По НомСтр - 2 Цикл
						Узел = УчтенныеГруппы.Получить(НомСтр - Инд);
						Если Узел <> Неопределено Тогда
							РодительскийУзел = Узел;
							Прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				НовСтр = РодительскийУзел.Строки.Вставить(0);
				НовСтр.Код = СокрЛП(Макет.Область(НомСтр, 1, НомСтр, 1).Текст);
				НовСтр.Раздел = СокрЛП(Макет.Область(НомСтр, 2, НомСтр, 2).Текст);
				НовСтр.Ключ = СокрЛП(Макет.Область(НомСтр, 3, НомСтр, 3).Текст);
				НовСтр.Тип = СокрЛП(Макет.Область(НомСтр, 4, НомСтр, 4).Текст);
				НовСтр.Формат = СокрЛП(Макет.Область(НомСтр, 5, НомСтр, 5).Текст);
				МинРазмерность = СокрЛП(Макет.Область(НомСтр, 6, НомСтр, 6).Текст);
				НовСтр.МинРазмерность = ?(ПустаяСтрока(МинРазмерность), ?(НовСтр.Формат = "N", 99999, 0), Число(МинРазмерность));
				МаксРазмерность = СокрЛП(Макет.Область(НомСтр, 7, НомСтр, 7).Текст);
				НовСтр.МаксРазмерность = ?(ПустаяСтрока(МаксРазмерность), 99999, Число(МаксРазмерность));
				НовСтр.Обязательность = СокрЛП(Макет.Область(НомСтр, 8, НомСтр, 8).Текст);
				НовСтр.Многостраничность = НЕ ПустаяСтрока(Макет.Область(НомСтр, 9, НомСтр, 9).Текст);
				НовСтр.Многострочность = НЕ ПустаяСтрока(Макет.Область(НомСтр, 10, НомСтр, 10).Текст);
				НовСтр.Условие = СокрЛП(Макет.Область(НомСтр, 11, НомСтр, 11).Текст);
				НовСтр.ЗначениеПоУмолчанию = СокрЛП(Макет.Область(НомСтр, 12, НомСтр, 12).Текст);
				НовСтр.Представление = СокрЛП(Макет.Область(НомСтр, 13, НомСтр, 13).Текст);
				
				УчтенныеГруппы.Вставить(НомСтр, НовСтр);
				
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат ДеревоСтруктуры;
	
КонецФункции

Процедура СформироватьСтруктуруПоказателей(ИмяФормы,
										   ДанныеОтчета,
										   СтруктураРеквизитовФормы) Экспорт
	
	ДанныеОтчета = Новый Структура;
			
	СохрСтруктура = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить();
	
	ПоказателиОтчета = СохрСтруктура.ПоказателиОтчета;
	
	Для Каждого Раздел Из ПоказателиОтчета Цикл
		
		ДанныеОтчета.Вставить(Раздел.Ключ,
			РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(Раздел.Значение));
			
	КонецЦикла;
			
КонецПроцедуры

Функция СформироватьСтруктуруПараметров(ИмяФормы,
										ДанныеОтчета,
										СтруктураРеквизитовФормы) Экспорт
														   
	Титульный = ДанныеОтчета.ПолеТабличногоДокументаТитульный;
	
	ПараметрыВыгрузки = Новый Структура;
	ПараметрыВыгрузки.Вставить("ВерсПрог",		РегламентированнаяОтчетность.НазваниеИВерсияПрограммы());
	ПараметрыВыгрузки.Вставить("ИдДок",			Строка(Новый УникальныйИдентификатор));
	ПараметрыВыгрузки.Вставить("НаимОрг",		СокрЛП(Титульный.ОргНазв));
	ПараметрыВыгрузки.Вставить("ИННОрг",		СокрЛП(СтруктураРеквизитовФормы.мСохраненныйДок.Организация.ИНН));
	ПараметрыВыгрузки.Вставить("КППОрг",		СокрЛП(Титульный.КПП1));
	ПараметрыВыгрузки.Вставить("КНД",			"1110018");
	ПараметрыВыгрузки.Вставить("ВидДок",		Строка(СтруктураРеквизитовФормы.мСохраненныйДок.Вид));
	ПараметрыВыгрузки.Вставить("ГодПериодОтч",	Формат(СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания, "ДФ=гггг"));
	ПараметрыВыгрузки.Вставить("ДатаДок",		Формат(ТекущаяДатаСеанса(), "ДФ=дд.ММ.гггг"));
	ПараметрыВыгрузки.Вставить("КодИФНС",		СокрЛП(Титульный.КодИМНС));
	ПараметрыВыгрузки.Вставить("КодИФНСПосредника",
		?(СтруктураРеквизитовФормы.мСохраненныйДок.Организация.КрупнейшийНалогоплательщик,
		СокрЛП(СтруктураРеквизитовФормы.мСохраненныйДок.Организация.КодНалоговогоОрганаПолучателя), ""));
	
	ФИОРук = РегламентированнаяОтчетность.РазложитьФИО(Титульный.ОргДиректор);
	ПараметрыВыгрузки.Вставить("ФамилияРук",	ФИОРук.Фамилия);
	ПараметрыВыгрузки.Вставить("ИмяРук",		ФИОРук.Имя);
	ПараметрыВыгрузки.Вставить("ОтчествоРук",	ФИОРук.Отчество);
	
	ФИОПред = РегламентированнаяОтчетность.РазложитьФИО(Титульный.ОргУп);
	ПараметрыВыгрузки.Вставить("НаимОргПред",	СокрЛП(Титульный.ОргУП));
	ПараметрыВыгрузки.Вставить("ФамилияПред",	ФИОПред.Фамилия);
	ПараметрыВыгрузки.Вставить("ИмяПред",		ФИОПред.Имя);
	ПараметрыВыгрузки.Вставить("ОтчествоПред",	ФИОПред.Отчество);
	ПараметрыВыгрузки.Вставить("ДокПред",		СокрЛП(Титульный.ДокУпПред));
	ПараметрыВыгрузки.Вставить("ПредставительФизЛицо", Титульный.ПредставительФизЛицо);
	
	ФИОИП = РегламентированнаяОтчетность.РазложитьФИО(Титульный.ОргНазв);
	ПараметрыВыгрузки.Вставить("ФамилияИП",		ФИОИП.Фамилия);
	ПараметрыВыгрузки.Вставить("ИмяИП",			ФИОИП.Имя);
	ПараметрыВыгрузки.Вставить("ОтчествоИП",	ФИОИП.Отчество);
	
	ПараметрыВыгрузки.Вставить("ЭтоПБОЮЛ", НЕ РегламентированнаяОтчетностьВызовСервера.ЭтоЮридическоеЛицо(
											  СтруктураРеквизитовФормы.мСохраненныйДок.Организация));

	ПараметрыВыгрузки.Вставить("ДолжОтв");
	ПараметрыВыгрузки.Вставить("ФамилияОтв");
	ПараметрыВыгрузки.Вставить("ИмяОтв");
	ПараметрыВыгрузки.Вставить("ОтчествоОтв");
	ПараметрыВыгрузки.Вставить("ТелОтв");
												   
	Если ЗначениеЗаполнено(ПараметрыВыгрузки.ПредставительФизЛицо)
	   И ПараметрыВыгрузки.ПредставительФизЛицо Тогда
		
		ПараметрыВыгрузки.Вставить("ДолжОтв",	  "Представитель");
		ПараметрыВыгрузки.Вставить("ФамилияОтв",  ФИОПред.Фамилия);
		ПараметрыВыгрузки.Вставить("ИмяОтв",	  ФИОПред.Имя);
		ПараметрыВыгрузки.Вставить("ОтчествоОтв", ФИОПред.Отчество);
																	   
	ИначеЕсли ПараметрыВыгрузки.ЭтоПБОЮЛ
			И НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.ПредставительФизЛицо) Тогда
								
		ПараметрыВыгрузки.Вставить("ДолжОтв",	  "Индивидуальный предприниматель");
		ПараметрыВыгрузки.Вставить("ФамилияОтв",  ФИОИП.Фамилия);
		ПараметрыВыгрузки.Вставить("ИмяОтв",	  ФИОИП.Имя);
		ПараметрыВыгрузки.Вставить("ОтчествоОтв", ФИОИП.Отчество);
		ПараметрыВыгрузки.Вставить("ТелОтв",      ?(ПараметрыВыгрузки.Свойство("ТелОрг"), ПараметрыВыгрузки.ТелОрг, ""));
		
	ИначеЕсли ЗначениеЗаполнено(Титульный.ОргДиректор) Тогда
						
		ПараметрыВыгрузки.Вставить("ДолжОтв",	  "Руководитель");
		ПараметрыВыгрузки.Вставить("ФамилияОтв",  ФИОРук.Фамилия);
		ПараметрыВыгрузки.Вставить("ИмяОтв",	  ФИОРук.Имя);
		ПараметрыВыгрузки.Вставить("ОтчествоОтв", ФИОРук.Отчество);
		ПараметрыВыгрузки.Вставить("ТелОтв",      РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(
			СтруктураРеквизитовФормы.мСохраненныйДок.Организация, ТекущаяДатаСеанса(), "ТелРук").ТелРук);
		
	КонецЕсли;
	
	ПараметрыВыгрузки.Вставить("ИдФайл", СформироватьИдФайл(ИмяФормы, ПараметрыВыгрузки));

	Возврат ПараметрыВыгрузки;													   
														   
КонецФункции

Функция СформироватьИдФайл(ИмяФормы, ПараметрыВыгрузки)
	
	Возврат "NO_SRCHIS"
	+ "_" + ?(ЗначениеЗаполнено(ПараметрыВыгрузки.КодИФНСПосредника),
		ПараметрыВыгрузки.КодИФНСПосредника, ПараметрыВыгрузки.КодИФНС)
	+ "_" + ПараметрыВыгрузки.КодИФНС
	+ "_" + ?(ПараметрыВыгрузки.ЭтоПБОЮЛ,
		СокрЛП(ПараметрыВыгрузки.ИННОрг), СокрЛП(ПараметрыВыгрузки.ИННОрг) + СокрЛП(ПараметрыВыгрузки.КППОрг))
	+ "_" + Формат(ТекущаяДатаСеанса(), "ДФ=ггггММдд")
	+ "_" + Строка(Новый УникальныйИдентификатор);
	
КонецФункции

Функция ПроверитьВозможностьВыгрузки(ИмяФормы,
									 ДанныеОтчета,
									 ПараметрыВыгрузки,
									 РезультатВыгрузки) Экспорт
														
	СтатусПроверки = Истина;
	
	Титульный = ДанныеОтчета.ПолеТабличногоДокументаТитульный;
	
	Если ПараметрыВыгрузки.ЭтоПБОЮЛ Тогда
		Если ПустаяСтрока(ПараметрыВыгрузки.ФамилияИП) Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
				НСтр("ru='Не задана фамилия индивидуального предпринимателя.'"),
				"Титульный", "ОргНазв");
			СтатусПроверки = Ложь;
		КонецЕсли;
		Если ПустаяСтрока(ПараметрыВыгрузки.ИмяИП) Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
				НСтр("ru='Не задано имя индивидуального предпринимателя.'"),
				"Титульный", "ОргНазв");
			СтатусПроверки = Ложь;
		КонецЕсли;
	Иначе
		Если ПустаяСтрока(Титульный.ОргНазв) Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
				НСтр("ru='На указано полное наименование организации.'"),
				"Титульный", "ОргНазв");
			СтатусПроверки = Ложь;
		КонецЕсли;
	КонецЕсли;
			
	Если ПустаяСтрока(Титульный.ОргИМНС) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
			НСтр("ru='Не указано наименование налогового органа.'"),
			"Титульный", "ОргИМНС");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ПустаяСтрока(Титульный.КодИМНС) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
			НСтр("ru='Не указан код налогового органа.'"),
			"Титульный", "КодИМНС");
		СтатусПроверки = Ложь;
	КонецЕсли;
			
	Если ПустаяСтрока(ПараметрыВыгрузки.НаимОргПред) Тогда
		Если НЕ ПараметрыВыгрузки.ЭтоПБОЮЛ Тогда
			Если ПустаяСтрока(ПараметрыВыгрузки.ФамилияРук) Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
					НСтр("ru='Не задана фамилия руководителя.'"),
					"Титульный", "ОргДиректор");
				СтатусПроверки = Ложь;
			КонецЕсли;
			Если ПустаяСтрока(ПараметрыВыгрузки.ИмяРук) Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
					НСтр("ru='Не задано имя руководителя.'"),
					"Титульный", "ОргДиректор");
				СтатусПроверки = Ложь;
			КонецЕсли;
		КонецЕсли;
	Иначе
		Если ПараметрыВыгрузки.ПредставительФизЛицо = Истина Тогда
			Если ПустаяСтрока(ПараметрыВыгрузки.ФамилияПред) Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
					НСтр("ru='Не задана фамилия представителя.'"),
					"Титульный", "ОргУп");
				СтатусПроверки = Ложь;
			КонецЕсли;
			Если ПустаяСтрока(ПараметрыВыгрузки.ИмяПред) Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
					НСтр("ru='Не задано имя представителя.'"),
					"Титульный", "ОргУп");
				СтатусПроверки = Ложь;
			КонецЕсли;
		КонецЕсли;
		Если ПустаяСтрока(ПараметрыВыгрузки.ДокПред) Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
				НСтр("ru='Не задано наименование документа, подтверждающего полномочия представителя.'"),
				"Титульный", "ДокУпПред");
			СтатусПроверки = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если ПустаяСтрока(Титульный.ДатаПериод) Тогда
		
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
			НСтр("ru='Не указана дата, по состоянию на которую указывается среднесписочная численность.'"),
			"Титульный", "ДатаПериод");
		СтатусПроверки = Ложь;
		
	КонецЕсли;
			
	Возврат СтатусПроверки;														
														
КонецФункции

Процедура ЗаполнитьДанными(ИмяФормы,
						   ДанныеОтчета,
						   ПараметрыВыгрузки,
						   ДеревоВыгрузки,
						   РезультатВыгрузки,
						   СтруктураРеквизитовФормы) Экспорт
	
	ОбработатьУсловныеЭлементы(ИмяФормы,
							   ДанныеОтчета,
							   ПараметрыВыгрузки,
							   ДеревоВыгрузки,
							   РезультатВыгрузки);
												  
	ЗаполнитьДаннымиУзел(ИмяФормы,
						 ДанныеОтчета,
						 СтруктураРеквизитовФормы,
						 ПараметрыВыгрузки,
						 ДеревоВыгрузки);
											
	ОтсечьНезаполненныеНеобязательныеУзлы(ИмяФормы, ДеревоВыгрузки);
		
КонецПроцедуры

Процедура ОбработатьУсловныеЭлементы(ИмяФормы,
									 ДанныеОтчета,
									 Знач ПараметрыВыгрузки,
									 Узел,
									 РезультатВыгрузки)
	
	Если ТипЗнч(Узел) <> Тип("ДеревоЗначений") Тогда
		Если Узел.Код = "СодПерСвед" Тогда
			Возврат;
		КонецЕсли;
		РегламентированнаяОтчетность.ДополнитьСтруктуруПараметровПрочиеОтчеты(ДанныеОтчета, ПараметрыВыгрузки, Узел);
	КонецЕсли;
	
	КоличествоСтрок = Узел.Строки.Количество();
	
	Для Инд = 1 По КоличествоСтрок Цикл
		ТекСтр = Узел.Строки.Получить(КоличествоСтрок - Инд);
		Если НЕ ПустаяСтрока(ТекСтр.Условие) Тогда
			Если НЕ РегламентированнаяОтчетность.УсловиеВыполнено(РезультатВыгрузки, ПараметрыВыгрузки, ТекСтр.Условие) Тогда
				Узел.Строки.Удалить(ТекСтр);
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		ОбработатьУсловныеЭлементы(ИмяФормы, ДанныеОтчета, ПараметрыВыгрузки, ТекСтр, РезультатВыгрузки);
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьДаннымиУзел(ИмяФормы,
							   ДанныеОтчета,
							   СтруктураРеквизитовФормы,
							   ПараметрыВыгрузки,
							   Узел,
							   НомерСтроки = Неопределено)
												  
	Для Каждого Стр из Узел.Строки Цикл
		Если Стр.Тип = "С" ИЛИ Стр.Тип = "C" Тогда // учтем оба варианта: кириллицу и латиницу
			Если Стр.Код = "СодПерСвед" Тогда
				ЗаполнитьСодержательнуюЧасть(ИмяФормы, ДанныеОтчета, СтруктураРеквизитовФормы, Стр);
			Иначе
				ЗаполнитьДаннымиУзел(ИмяФормы,
									 ДанныеОтчета,
									 СтруктураРеквизитовФормы,
									 ПараметрыВыгрузки,
									 Стр);
			КонецЕсли;
		Иначе
			Если ПустаяСтрока(Стр.ЗначениеПоУмолчанию) Тогда
				Если НЕ ПустаяСтрока(Стр.Ключ) Тогда
					ВывестиПоказательВXML(ИмяФормы, Стр, ПараметрыВыгрузки[Стр.Ключ]);
				Иначе
					Стр.Значение = "";
				КонецЕсли;
			ИначеЕсли Лев(Стр.ЗначениеПоУмолчанию, 1) = "&" Тогда
				ВывестиПоказательВXML(ИмяФормы, Стр, ПараметрыВыгрузки[Сред(Стр.ЗначениеПоУмолчанию, 2)]);
			Иначе
				Стр.Значение = Стр.ЗначениеПоУмолчанию;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;												  
												  
КонецПроцедуры

Процедура ЗаполнитьСодержательнуюЧасть(ИмяФормы,
									   ДанныеОтчета,
									   СтруктураРеквизитовФормы,
									   УзелРодитель)
	
	ДатаСредСпЧислСтрока = ДанныеОтчета.ПолеТабличногоДокументаТитульный["ДатаПериод"];
	
	Если ДатаСредСпЧислСтрока = "00.00.0000" Тогда
		ДатаСредСпЧислСтрока = СтруктураРеквизитовФормы.мСохраненныйДок.ДатаНачала;
	КонецЕсли;						
	
	ЗадатьЗначениеЭлемента(ИмяФормы, УзелРодитель, "ДатаСредСпЧисл", ДатаСредСпЧислСтрока);
	
	КоличествоЧеловекСтрока = ДанныеОтчета.ПолеТабличногоДокументаТитульный.Численность;
	КоличествоЧеловекЧисло = ?(ПустаяСтрока(КоличествоЧеловекСтрока), 0, Число(КоличествоЧеловекСтрока));
	ЗадатьЗначениеЭлемента(ИмяФормы, УзелРодитель, "КолЧел", КоличествоЧеловекЧисло);
	
КонецПроцедуры

Функция ВывестиПоказательВXML(ИмяФормы, Узел, ЗначениеПоказателя)
	
	МинШирина = Узел.МинРазмерность;
	МаксШирина = Узел.МаксРазмерность;
	
	Если Узел.Формат = "T" ИЛИ Узел.Формат = "Т" Тогда // учтем оба варианта: кириллицу и латиницу
		Узел.Значение = ?(МаксШирина < СтрДлина(СокрЛП(ЗначениеПоказателя)),
						  СокрЛП(Лев(СокрЛП(ЗначениеПоказателя), МаксШирина)),
						  СокрЛП(ЗначениеПоказателя));
	ИначеЕсли Узел.Формат = "N" Тогда
		СтрокаФормата = "ЧРД=.;ЧН=0;ЧГ=;";
		Если Узел.МаксРазмерность <> 0 И Узел.МаксРазмерность <> 99999 Тогда
			СтрокаФормата = СтрокаФормата + "ЧЦ=" + Формат(Узел.МаксРазмерность, "ЧГ=") + ";";
		КонецЕсли;
		Если Узел.МинРазмерность <> 99999 Тогда
			СтрокаФормата = СтрокаФормата + "ЧДЦ=" + Формат(Узел.МинРазмерность, "ЧГ=") + ";";
		КонецЕсли;
		Узел.Значение = СокрЛП(Формат(ЗначениеПоказателя, СтрокаФормата));
	ИначеЕсли Узел.Формат = "gYear" Тогда
		Если ТипЗнч(ЗначениеПоказателя) = Тип("Дата") Тогда
			Узел.Значение = СокрЛП(Формат(ЗначениеПоказателя, "ДФ=гггг"));
		Иначе
			Узел.Значение = Прав(СокрЛП(ЗначениеПоказателя), 4);
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

Процедура ЗадатьЗначениеЭлемента(ИмяФормы, Узел, КодЭлемента, Значение)
	
	ВывестиПоказательВXML(ИмяФормы, ПолучитьПодчиненныйЭлемент(ИмяФормы, Узел, КодЭлемента), Значение);
	
КонецПроцедуры

Функция ПолучитьПодчиненныйЭлемент(ИмяФормы, Узел, КодЭлемента)
	
	Для Каждого Стр Из Узел.Строки Цикл
		Если Стр.Код = КодЭлемента Тогда
			Возврат Стр;
		КонецЕсли;
	КонецЦикла;
	
КонецФункции

Процедура ОтсечьНезаполненныеНеобязательныеУзлы(ИмяФормы, Узел)
	
	КоличествоСтрок = Узел.Строки.Количество();
	Для Инд = 1 По КоличествоСтрок Цикл
		Стр = Узел.Строки.Получить(КоличествоСтрок - Инд);
		Если (СтрНайти(Стр.Обязательность, "Н") <> 0
		  ИЛИ СтрНайти(Стр.Обязательность, "H") <> 0)
		    И УзелПуст(ИмяФормы, Стр) Тогда // учтем оба варианта: кириллицу и латиницу
			Узел.Строки.Удалить(Стр);
		Иначе
			ОтсечьНезаполненныеНеобязательныеУзлы(ИмяФормы, Стр);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ВыгрузитьДеревоВXML(ИмяФормы, ДеревоВыгрузки)
	
	ПотокXML = РегламентированнаяОтчетность.СоздатьНовыйПотокXML();
	ЗаписатьУзелДереваВXML(ИмяФормы, ДеревоВыгрузки, ПотокXML);
	ТекстДляЗаписи = ПотокXML.Закрыть();
	
	ТекстДляЗаписи = "<?xml version=""1.0"" encoding=""windows-1251""?>"
				   + Сред(ТекстДляЗаписи, СтрНайти(ТекстДляЗаписи, Символы.ПС));
	
	Возврат ТекстДляЗаписи;
	
КонецФункции

Функция ЗаписатьУзелДереваВXML(ИмяФормы, СтрокаДерева, ПотокXML)
	
	Если ТипЗнч(СтрокаДерева) = Тип("ДеревоЗначений") Тогда
		ПотокXML.ЗаписатьНачалоЭлемента("Файл");
		ПотокXML.ЗаписатьАтрибут("xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");
		ПотокXML.ЗаписатьАтрибут("xsi:noNamespaceSchemaLocation", "NO_SRCHIS_1_082_00_04_01_01.xsd");
		Для каждого Стр Из СтрокаДерева.Строки Цикл
			ЗаписатьУзелДереваВXML(ИмяФормы, Стр, ПотокXML);
		КонецЦикла;
		ПотокXML.ЗаписатьКонецЭлемента();
	Иначе
		Если СтрокаДерева.Тип = "А" ИЛИ СтрокаДерева.Тип = "A" Тогда 
			ПотокXML.ЗаписатьАтрибут(СтрокаДерева.Код, Строка(СтрокаДерева.Значение));
		Иначе
			ПотокXML.ЗаписатьНачалоЭлемента(СтрокаДерева.Код);
			Для каждого Лист из СтрокаДерева.Строки Цикл
				ЗаписатьУзелДереваВXML(ИмяФормы, Лист, ПотокXML);
			КонецЦикла;
			ПотокXML.ЗаписатьТекст(Строка(СтрокаДерева.Значение));
			ПотокXML.ЗаписатьКонецЭлемента();
		КонецЕсли;
	КонецЕсли;
	          
КонецФункции

Функция УзелПуст(ИмяФормы, Узел)
	
	ПустойУзел = НЕ ЗначениеЗаполнено(Узел.Значение);
	Для Каждого Стр из Узел.Строки Цикл
		Если НЕ УзелПуст(ИмяФормы, Стр) Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	Возврат ПустойУзел;
	
КонецФункции

#КонецОбласти

#КонецОбласти
	
#КонецЕсли