&НаКлиенте
Перем ПараметрыОбработчикаОжидания; // Хранит параметры обработчика ожидания.

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

#Область ПроцедурыИФункцииОбщегоНазначения

&НаСервере
// Процедура заполняет начальные настройки отчета.
//
Процедура ЗаполнитьДополнительныеПоля()
	
КонецПроцедуры

&НаСервере
// Процедура вычисляет суммы ячеек на сервере.
Процедура ВычислитьСуммуВыделенныхЯчеекТабличногоДокументаВКонтекстеНаСервере()
	
	ПолеСумма = УПЖКХ_ТиповыеМетодыВызовСервера.ВычислитьСуммуВыделенныхЯчеекТабличногоДокумента(
		Результат, КэшВыделеннойОбласти);
	
КонецПроцедуры

&НаКлиенте
// Подключаемый обработчик вычисления суммы ячеек.
Процедура Подключаемый_РезультатПриАктивизацииОбластиПодключаемый()
	
	НеобходимоВычислятьНаСервере = Ложь;
	УПЖКХ_ТиповыеМетодыКлиент.ВычислитьСуммуВыделенныхЯчеекТабличногоДокумента(
		ПолеСумма, Результат, КэшВыделеннойОбласти, НеобходимоВычислятьНаСервере);
	
	Если НеобходимоВычислятьНаСервере Тогда
		ВычислитьСуммуВыделенныхЯчеекТабличногоДокументаВКонтекстеНаСервере();
	КонецЕсли;
	
	ОтключитьОбработчикОжидания("Подключаемый_РезультатПриАктивизацииОбластиПодключаемый");
	
КонецПроцедуры

&НаСервере
// Процедура добавляет поля в набор компоновки на сервере.
Процедура ПередКомпоновкойМакетаНаСервере()
	
	// Добавим поля с дополнительными свойствами в схему компоновки.
	ПараметрыОтчета = ПодготовитьПараметрыОтчетаНаСервере();
	ПередКомпоновкойМакета(ПараметрыОтчета,
							ПолучитьИзВременногоХранилища(СхемаКомпоновкиДанных), Отчет.КомпоновщикНастроек);
	
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

#Область ОбработчикиСобытийФормы

&НаСервере
// Обработчик события "ПриСозданииНаСервере" формы.
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УПЖКХ_ТиповыеМетодыВызовСервера.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
	ТекРабДата = УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьРабочуюДату();
	
	Если Не ЗначениеЗаполнено(Отчет.НачалоПериода) Тогда
		Отчет.НачалоПериода = НачалоМесяца(ТекРабДата);
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Отчет.КонецПериода) Тогда
		Отчет.КонецПериода = КонецМесяца(ТекРабДата);
	КонецЕсли;
	
	УправлениеФормой(ЭтаФорма);
	
	// СхемыУчета
	ОТР_СхемыУчетаСервер.ПриСозданииНаСервере(ЭтаФорма, Элементы.ГруппаОсновнаяКоманднаяПанель);
	// Конец СхемыУчета
	
	// Реклама
	ОТР_РекламаКлиентСервер.ПриСозданииНаСервере(ЭтаФорма);
	// Конец Реклама
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриОткрытии" формы.
Процедура ПриОткрытии(Отказ)
	
	ОбновитьТекстЗаголовка(ЭтаФорма);
	
	ИБФайловая = СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиента().ИнформационнаяБазаФайловая;
	ПодключитьОбработчикОжидания = Не ИБФайловая И ЗначениеЗаполнено(ИдентификаторЗадания);
	Если ПодключитьОбработчикОжидания Тогда
		УПЖКХ_ТиповыеМетодыКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
		УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "ФормированиеОтчета");
	КонецЕсли;
	
	УПЖКХ_ТиповыеМетодыКлиент.ПриОткрытии(ЭтаФорма, Отказ);
	
	ПередКомпоновкойМакетаНаСервере();
	
	// Добавим дополнительные поля.
	Если Отчет.ДополнительныеПоля.Количество() = 0 Тогда
		ЗаполнитьДополнительныеПоля();
	КонецЕсли;
	
	// Сформируем отчет если необходимо формировать при открытии.
	Если СформироватьПриОткрытии Тогда
		НажатиеСформироватьОтчет(Команды.СформироватьОтчет);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПередЗакрытием" формы.
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	УПЖКХ_ТиповыеМетодыКлиент.ПередЗакрытием(ЭтаФорма, Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриЗакрытии" формы.
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	УПЖКХ_ТиповыеМетодыКлиент.ПриЗакрытии(ЭтаФорма, ЗавершениеРаботы);
	
КонецПроцедуры

&НаСервере
// Процедура возникает при сохранении настроек на сервере.
Процедура ПриСохраненииПользовательскихНастроекНаСервере(Настройки)
	
	УПЖКХ_ТиповыеМетодыВызовСервера.ПриСохраненииПользовательскихНастроекНаСервере(ЭтаФорма, Настройки);
	
КонецПроцедуры

&НаСервере
// Процедура возникает при загрузке настроек на сервере.
Процедура ПриЗагрузкеПользовательскихНастроекНаСервере(Настройки)
	
	УПЖКХ_ТиповыеМетодыВызовСервера.ПриЗагрузкеПользовательскихНастроекНаСервере(ЭтаФорма, Настройки);
	
	ОбновитьТекстЗаголовка(ЭтаФорма);
	
	УправлениеФормой(ЭтаФорма);
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
// Процедура возникает при загрузке варианта на сервере.
Процедура ПриЗагрузкеВариантаНаСервере(Настройки)
	
	УПЖКХ_ТиповыеМетодыВызовСервера.УстановитьНастройкиПоУмолчанию(ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
// Обработчик события "ПриИзменении" поля "ВидПериода".
Процедура ВидПериодаПриИзменении(Элемент)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВидПериодаПриИзменении(Элемент, ВидПериода, Отчет.НачалоПериода, Отчет.КонецПериода, Период);
	УПЖКХ_ТиповыеМетодыКлиентСервер.ПереключитьТекущуюСтраницуВыбораПериода(ВидПериода, Элементы.ГруппаПоляВводаПериода);
	
	ОбновитьТекстЗаголовка(ЭтаФорма);
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля "Период".
Процедура ПериодПриИзменении(Элемент)
	
	УПЖКХ_ТиповыеМетодыКлиент.ПериодПриИзменении(Элемент, Период, Отчет.НачалоПериода, Отчет.КонецПериода);
	
	ОбновитьТекстЗаголовка(ЭтаФорма);
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "НачалоВыбора" поля "Период".
Процедура ПериодНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПериодНачалоВыбораЗавершение", ЭтотОбъект);
	
	УПЖКХ_ТиповыеМетодыКлиент.ПериодНачалоВыбора(ЭтаФорма, Элемент, СтандартнаяОбработка, 
		ВидПериода, Отчет.НачалоПериода, ОписаниеОповещения);
	
	ОбновитьТекстЗаголовка(ЭтаФорма);
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
КонецПроцедуры

// Процедура окончания асинхроного выбора периода.
//
// Параметры:
//  СтруктураПериода        - Структура - Структура периода отчета.
//  ДополнительныеПараметры - Структура - Структура дополнительных параметров.
//
&НаКлиенте
Процедура ПериодНачалоВыбораЗавершение(СтруктураПериода, ДополнительныеПараметры) Экспорт
	
	// Установим полученный период.
	Если СтруктураПериода <> Неопределено Тогда
		ВидПериода = СтруктураПериода.ВидПериода;
		Период = СтруктураПериода.Период;
		Отчет.НачалоПериода = СтруктураПериода.НачалоПериода;
		Отчет.КонецПериода = СтруктураПериода.КонецПериода;
	КонецЕсли;
	
	ОбновитьТекстЗаголовка(ЭтаФорма);
	
	Если НЕ ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
// Обработчик события "ОбработкаВыбора" поля "Период".
Процедура ПериодОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	УПЖКХ_ТиповыеМетодыКлиент.ПериодОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка,
		ВидПериода, Период, Отчет.НачалоПериода, Отчет.КонецПериода);
		
	ОбновитьТекстЗаголовка(ЭтаФорма);
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "АвтоПодбор" поля "Период".
Процедура ПериодАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	УПЖКХ_ТиповыеМетодыКлиент.ПериодАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка,
		ВидПериода, Период, Отчет.НачалоПериода, Отчет.КонецПериода);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ОкончаниеВводаТекста" поля "Период".
Процедура ПериодОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	УПЖКХ_ТиповыеМетодыКлиент.ПериодОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка,
		ВидПериода, Период, Отчет.НачалоПериода, Отчет.КонецПериода);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля "НачалоПериода".
Процедура НачалоПериодаПриИзменении(Элемент)
	
	ОбновитьТекстЗаголовка(ЭтаФорма);
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля "КонецПериода".
Процедура КонецПериодаПриИзменении(Элемент)
	
	ОбновитьТекстЗаголовка(ЭтаФорма);
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля "НачалоПериодаДень".
Процедура НачалоПериодаДеньПриИзменении(Элемент)
	
	Отчет.КонецПериода = КонецДня(Отчет.НачалоПериода);
	
	ОбновитьТекстЗаголовка(ЭтаФорма);
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ОбработкаДополнительнойРасшифровки" поля "Результат".
Процедура РезультатОбработкаДополнительнойРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	
	// Не будем обрабатывать нажатие на правую кнопку мыши.
	// Покажем стандартное контекстное меню ячейки табличного документа.
	Расшифровка = Неопределено;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриАктивизацииОбласти" поля "Результат".
Процедура РезультатПриАктивизацииОбласти(Элемент)
	
	Если ТипЗнч(Результат.ВыделенныеОбласти) = Тип("ВыделенныеОбластиТабличногоДокумента") Тогда
		ИнтервалОжидания = ?(ПолучитьСкоростьКлиентскогоСоединения() = СкоростьКлиентскогоСоединения.Низкая, 1, 0.2);
		ПодключитьОбработчикОжидания("Подключаемый_РезультатПриАктивизацииОбластиПодключаемый", ИнтервалОжидания, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля "Организация".
Процедура ОрганизацияПриИзменении(Элемент)
	
	ОбновитьТекстЗаголовка(ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ГРУППЫ ОТБОРЫ

#Область ОбработчикиСобытийГруппыОтборы

&НаКлиенте
// Обработчик события "ПриИзменении" группы "Отборы".
Процедура ОтборыПриИзменении(Элемент)
	
	УПЖКХ_ТиповыеМетодыКлиент.ОтборыПриИзменении(ЭтаФорма, Элемент);
	
	ОбновитьТекстЗаголовка(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПередНачаломДобавления" группы "Отборы".
Процедура ОтборыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	УПЖКХ_ТиповыеМетодыКлиент.ОтборыПередНачаломДобавления(ЭтаФорма, Элемент, Отказ, Копирование, Родитель, Группа);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПередНачаломИзменения" группы "Отборы".
Процедура ОтборыПередНачаломИзменения(Элемент, Отказ)
	
	УПЖКХ_ТиповыеМетодыКлиент.ОтборыПередНачаломИзменения(ЭтаФорма, Элемент, Отказ);	
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПравоеЗначениеНачалоВыбора" группы "Отборы".
Процедура ОтборыПравоеЗначениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СписокПараметров = ПолучитьПараметрыВыбораЗначенияОтбора();
	УПЖКХ_ТиповыеМетодыКлиент.ОтборыПравоеЗначениеНачалоВыбора(ЭтаФорма, Элемент, ДанныеВыбора,
																СтандартнаяОбработка, СписокПараметров);
	
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ГРУППЫ ДОПОЛНИТЕЛЬНЫЕ ПОЛЯ

#Область ОбработчикиСобытийГруппыДополнительныеПоля

&НаКлиенте
// Обработчик события "ПриИзменении" поля "РазмещениеДополнительныхПолей".
Процедура РазмещениеДополнительныхПолейПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля "ДополнительныеПоля".
Процедура ДополнительныеПоляПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля "ПередНачаломДобавления".
Процедура ДополнительныеПоляПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	УПЖКХ_ТиповыеМетодыКлиент.ДополнительныеПоляПередНачаломДобавления(ЭтаФорма, Элемент, Отказ,
																		Копирование, Родитель, Группа);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля "ПередНачаломИзменения".
Процедура ДополнительныеПоляПередНачаломИзменения(Элемент, Отказ)
	
	УПЖКХ_ТиповыеМетодыКлиент.ДополнительныеПоляПередНачаломИзменения(ЭтаФорма, Элемент, Отказ);
	
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ГРУППЫ ОФОРМЛЕНИЕ

#Область ОбработчикиСобытийГруппыОформление

&НаКлиенте
// Обработчик события "ПриИзменении" поля "ВыводитьЗаголовок".
Процедура ВыводитьЗаголовокПриИзменении(Элемент)

	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля "ВыводитьПодвал".
Процедура ВыводитьПодвалПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
// Обработчик команды "ДополнительныеПоляСнятьФлажки".
Процедура ДополнительныеПоляСнятьФлажки(Команда)
	
	Для Каждого СтрокаТаблицы Из Отчет.ДополнительныеПоля Цикл
		СтрокаТаблицы.Использование = Ложь;
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик команды "ДополнительныеПоляУстановитьФлажки".
Процедура ДополнительныеПоляУстановитьФлажки(Команда)
	
	Для Каждого СтрокаТаблицы Из Отчет.ДополнительныеПоля Цикл
		СтрокаТаблицы.Использование = Истина;
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

#Область ОбработчикиКомандФормы

#Область Реклама

&НаКлиенте
// Процедура - обработчик нажатия на картинку баннера.
Процедура Подключаемый_РекламаОткрытьСтраницуСайта(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОТР_РекламаКлиент.Подключаемый_РекламаОткрытьСтраницуСайта(ЭтаФорма);
	
КонецПроцедуры // Подключаемый_РекламаОткрытьСтраницуСайта()

&НаКлиенте
// Процедура - обработчик нажатия на картинку закрытия баннера.
Процедура Подключаемый_РекламаКартникаЗакрытияБаннераНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;

	ОТР_РекламаКлиент.Подключаемый_РекламаКартникаЗакрытияБаннераНажатие(ЭтаФорма);
	
КонецПроцедуры // Подключаемый_РекламаОткрытьСтраницуСайта()

#КонецОбласти // Реклама

&НаКлиенте
// Обработчик команды "СформироватьОтчет".
Процедура НажатиеСформироватьОтчет(Команда)
	
	ОчиститьСообщения();
	
	ОтключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания");
	
	РезультатВыполнения = СформироватьОтчетНаСервере();
	Если Не РезультатВыполнения.ЗаданиеВыполнено Тогда
		УПЖКХ_ТиповыеМетодыКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
		УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "ФормированиеОтчета");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик команды "ПанельНастроек".
Процедура ПанельНастроек(Команда)
	
	Элементы.ГруппаПанельНастроек.Видимость = Не Элементы.ГруппаПанельНастроек.Видимость;
	УПЖКХ_ТиповыеМетодыКлиентСервер.ИзменитьЗаголовокКнопкиПанельНастроек(
		Элементы.ПанельНастроек, Элементы.ГруппаПанельНастроек.Видимость);
	
КонецПроцедуры

&НаКлиенте
// Обработчик команды "ГруппировкаСнятьФлажки".
Процедура ГруппировкаСнятьФлажки(Команда)
	
	Для Каждого СтрокаТаблицы Из Отчет.Группировка Цикл
		СтрокаТаблицы.Использование = Ложь;
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик команды "ГруппировкаУстановитьФлажки".
Процедура ГруппировкаУстановитьФлажки(Команда)
	
	Для Каждого СтрокаТаблицы Из Отчет.Группировка Цикл
		СтрокаТаблицы.Использование = Истина;
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
КонецПроцедуры

// СхемыУчета
&НаКлиенте
// Подключаемый обработчик команды перехода к схеме учета.
Процедура Подключаемый_ОткрытьСхемуУчета(Команда)
	
	ОТР_СхемыУчетаКлиент.Подключаемый_ОткрытьСхемуУчета(ЭтаФорма.ИмяФормы);
	
КонецПроцедуры
// Конец СхемыУчета

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

#Область СлужебныеПроцедурыИФункции

&НаСервере
// Формирование отчета "Сводная ведомость по рассрочке".
//
// Параметры:
//  ПараметрыОтчета - Структура - структура параметров для отчета.
//  АдресХранилища  - Строка - адрес временного хранилища, в которое помещается структура, содержащая 
//                 сформированный отчет и отчет для печати.
//
Процедура СформироватьОтчет(ПараметрыОтчета, АдресХранилища) Экспорт
	
	ВыводитьПолностью = Истина;
	
	Отказ = Ложь;
	ДанныеРасшифровкиОбъект = Неопределено;
	ПараметрыИсполненияОтчета = Неопределено;
	
	МенеджерОтчета = Отчеты[ПараметрыОтчета.ИдентификаторОтчета];
	
	Попытка
		ПараметрыИсполненияОтчета = ПолучитьПараметрыИсполненияОтчета();
	Исключение
		// Запись в журнал регистрации не требуется.
	КонецПопытки;
	
	ИспользоватьВнешниеНаборыДанных            = Ложь;
	ИспользоватьПриВыводеЗаголовка             = Ложь;
	ИспользоватьПриВыводеПодвала               = Ложь;
	ИспользоватьПередКомпоновкойМакета         = Ложь;
	ИспользоватьПослеКомпоновкиМакета          = Ложь;
	ИспользоватьПередВыводомЭлементаРезультата = Ложь;
	ИспользоватьПослеВыводаРезультата          = Ложь;
	ИспользоватьДанныеРасшифровки              = Истина;
	ИспользоватьПривилегированныйРежим         = Истина;
	
	Если ПараметрыИсполненияОтчета <> Неопределено Тогда
		Если ПараметрыИсполненияОтчета.Свойство("ИспользоватьВнешниеНаборыДанных") Тогда
			ИспользоватьВнешниеНаборыДанных = ПараметрыИсполненияОтчета.ИспользоватьВнешниеНаборыДанных;
		КонецЕсли;
		Если ПараметрыИсполненияОтчета.Свойство("ИспользоватьПриВыводеЗаголовка") Тогда
			ИспользоватьПриВыводеЗаголовка = ПараметрыИсполненияОтчета.ИспользоватьПриВыводеЗаголовка;
		КонецЕсли;
		Если ПараметрыИсполненияОтчета.Свойство("ИспользоватьПриВыводеПодвала") Тогда
			ИспользоватьПриВыводеПодвала = ПараметрыИсполненияОтчета.ИспользоватьПриВыводеПодвала;
		КонецЕсли;
		Если ПараметрыИсполненияОтчета.Свойство("ИспользоватьПередКомпоновкойМакета") Тогда
			ИспользоватьПередКомпоновкойМакета = ПараметрыИсполненияОтчета.ИспользоватьПередКомпоновкойМакета;
		КонецЕсли;
		Если ПараметрыИсполненияОтчета.Свойство("ИспользоватьПослеКомпоновкиМакета") Тогда
			ИспользоватьПослеКомпоновкиМакета = ПараметрыИсполненияОтчета.ИспользоватьПослеКомпоновкиМакета;
		КонецЕсли;
		Если ПараметрыИсполненияОтчета.Свойство("ИспользоватьПередВыводомЭлементаРезультата") Тогда
			ИспользоватьПередВыводомЭлементаРезультата = ПараметрыИсполненияОтчета.ИспользоватьПередВыводомЭлементаРезультата;
		КонецЕсли;
		Если ПараметрыИсполненияОтчета.Свойство("ИспользоватьПослеВыводаРезультата") Тогда
			ИспользоватьПослеВыводаРезультата = ПараметрыИсполненияОтчета.ИспользоватьПослеВыводаРезультата;
		КонецЕсли;
		Если ПараметрыИсполненияОтчета.Свойство("ИспользоватьДанныеРасшифровки") Тогда
			ИспользоватьДанныеРасшифровки = ПараметрыИсполненияОтчета.ИспользоватьДанныеРасшифровки;
		КонецЕсли;
		Если ПараметрыИсполненияОтчета.Свойство("ИспользоватьПривилегированныйРежим") Тогда
			ИспользоватьПривилегированныйРежим = ПараметрыИсполненияОтчета.ИспользоватьПривилегированныйРежим;
		КонецЕсли;
	КонецЕсли;
	
	Если ТипЗнч(ПараметрыОтчета.СхемаКомпоновкиДанных) = Тип("Строка") Тогда
		Если ЭтоАдресВременногоХранилища(ПараметрыОтчета.СхемаКомпоновкиДанных) Тогда
			СхемаКомпоновкиДанныхДляКомпоновщика = ПолучитьИзВременногоХранилища(ПараметрыОтчета.СхемаКомпоновкиДанных);
		КонецЕсли;
	Иначе
		СхемаКомпоновкиДанныхДляКомпоновщика = ПараметрыОтчета.СхемаКомпоновкиДанных;
	КонецЕсли;
	
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНастроек.ЗагрузитьНастройки(ПараметрыОтчета.НастройкиКомпоновкиДанных);
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанныхДляКомпоновщика));
	
	ВыводитьЗаголовок = Истина;
	ВыводитьПодвал    = Истина;
	
	Если КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Свойство("ВыводитьЗаголовок") Тогда
		ВыводитьЗаголовок = КомпоновщикНастроек.Настройки.ДополнительныеСвойства.ВыводитьЗаголовок;
	КонецЕсли;
	
	Если КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Свойство("ВыводитьПодвал") Тогда
		ВыводитьПодвал = КомпоновщикНастроек.Настройки.ДополнительныеСвойства.ВыводитьПодвал;
	КонецЕсли;
	
	Результат = Новый ТабличныйДокумент;
	
	Если ВыводитьЗаголовок Тогда
		БухгалтерскиеОтчетыВызовСервера.ВывестиЗаголовокОтчета(ПараметрыОтчета, КомпоновщикНастроек, Результат);
	КонецЕсли;
	
	Если ВыводитьПолностью Тогда
		Если ИспользоватьПередКомпоновкойМакета Тогда
			ПередКомпоновкойМакета(ПараметрыОтчета, СхемаКомпоновкиДанныхДляКомпоновщика, КомпоновщикНастроек);
		КонецЕсли;
		КомпоновщикНастроек.Восстановить();
		
		НастройкиДляКомпоновкиМакета = КомпоновщикНастроек.ПолучитьНастройки();
		
		БухгалтерскиеОтчетыВызовСервера.УстановитьМакетОформленияОтчета(ПараметрыОтчета, НастройкиДляКомпоновкиМакета);
		
		// Сгенерируем макет компоновки данных при помощи компоновщика макета.
		КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
		
		Попытка
			
			// В качестве схемы компоновки будет выступать схема самого отчета.
			// В качестве настроек отчета - текущие настройки отчета.
			// Данные расшифровки будем помещать в ДанныеРасшифровки.
			Если ИспользоватьДанныеРасшифровки Тогда 
				МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанныхДляКомпоновщика, НастройкиДляКомпоновкиМакета, ДанныеРасшифровкиОбъект);
			Иначе
				МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанныхДляКомпоновщика, НастройкиДляКомпоновкиМакета);
			КонецЕсли;
			
			// Вызываем событие отчета.
			Если ИспользоватьПослеКомпоновкиМакета Тогда
				ПослеКомпоновкиМакета(ПараметрыОтчета, МакетКомпоновки);
			КонецЕсли;
			
			Если ИспользоватьВнешниеНаборыДанных Тогда
				ВнешниеНаборыДанных = ПолучитьВнешниеНаборыДанных(ПараметрыОтчета, МакетКомпоновки);
			КонецЕсли;
		
			// Создадим и инициализируем процессор компоновки.
			ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
			Если ВнешниеНаборыДанных = Неопределено Тогда
				ПроцессорКомпоновки.Инициализировать(МакетКомпоновки,,, Истина);
			Иначе
				ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, ВнешниеНаборыДанных,, Истина);
			КонецЕсли;
			
			// Создадим и инициализируем процессор вывода результата.
			ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
			ПроцессорВывода.УстановитьДокумент(Результат);
			
			// Перед началом вывода установим привилегированный режим.
			Если ИспользоватьПривилегированныйРежим Тогда
				УстановитьПривилегированныйРежим(Истина);
			КонецЕсли;
		
			// Обозначим начало вывода.
			ПроцессорВывода.НачатьВывод();
			
			Если ИспользоватьПередВыводомЭлементаРезультата Тогда
				// Основной цикл вывода отчета.
				Пока Истина Цикл
					
					// ОбработкаПрерыванияПользователя();
					// Получим следующий элемент результата компоновки.
					ЭлементРезультата = ПроцессорКомпоновки.Следующий();
					
					Если ЭлементРезультата = Неопределено Тогда
						// Следующий элемент не получен - заканчиваем цикл вывода.
						Прервать;
					КонецЕсли;
				КонецЦикла;
				
				// Завершение вывода отчета.
				ПроцессорВывода.ЗакончитьВывод();
			Иначе
				ПроцессорВывода.Вывести(ПроцессорКомпоновки, Истина);
			КонецЕсли;
			
			// После окончания процессором вывода отчета, поместим расшифровку во временное хранилище.
			ДанныеДляРасшифровки = Новый Структура("Объект, ДанныеРасшифровки", ПараметрыОтчета, ДанныеРасшифровкиОбъект); 
			ДанныеРасшифровки = ПоместитьВоВременноеХранилище(ДанныеДляРасшифровки, ПараметрыОтчета.ДанныеРасшифровки);
			
			// Квартплата+
			
			// Здесь мы выведем результат компоновки в таблицу или дерево при необходимости.
			// Далее полученные данные будем выводить в процедуре "ВывестиДанныеКоллекцииВДокумент"
			// модуля менеджера отчета. Затем стандартно помещаем результат в хранилище и завершаем работу процедуры.
			
			Если ПараметрыОтчета.Свойство("ВыводитьДанныеВТаблицу") Или ПараметрыОтчета.Свойство("ВыводитьДанныеВДерево") Тогда
				
				// Выгрузим данные в коллекцию.
				МакетКомпоновкиДляВыводаВКоллекцию = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанныхДляКомпоновщика, НастройкиДляКомпоновкиМакета,,, Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
				
				Таблица = Неопределено;
				Если ПараметрыОтчета["ВыводитьДанныеВТаблицу"] Тогда
					
					Таблица = Новый ТаблицаЗначений;
					
					ПроцессорКомпоновкиДляВыводаВКоллекцию = Новый ПроцессорКомпоновкиДанных;
					Если ВнешниеНаборыДанных = Неопределено Тогда
						ПроцессорКомпоновкиДляВыводаВКоллекцию.Инициализировать(МакетКомпоновкиДляВыводаВКоллекцию, , , Истина);
					Иначе
						ПроцессорКомпоновкиДляВыводаВКоллекцию.Инициализировать(МакетКомпоновкиДляВыводаВКоллекцию, ВнешниеНаборыДанных, , Истина);
					КонецЕсли;
					ПроцессорВыводаВКоллекцию = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
					ПроцессорВыводаВКоллекцию.УстановитьОбъект(Таблица);
					ПроцессорВыводаВКоллекцию.Вывести(ПроцессорКомпоновкиДляВыводаВКоллекцию, Истина);
					
				КонецЕсли;
				
				Дерево = Неопределено;
				Если ПараметрыОтчета["ВыводитьДанныеВДерево"] Тогда
					
					Дерево = Новый ДеревоЗначений;
					
					ПроцессорВыводаВКоллекцию = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
					ПроцессорВыводаВКоллекцию.УстановитьОбъект(Дерево);
					ПроцессорКомпоновкиДляВыводаВКоллекцию = Новый ПроцессорКомпоновкиДанных;
					Если ВнешниеНаборыДанных = Неопределено Тогда
						ПроцессорКомпоновкиДляВыводаВКоллекцию.Инициализировать(МакетКомпоновкиДляВыводаВКоллекцию, , , Истина);
					Иначе
						ПроцессорКомпоновкиДляВыводаВКоллекцию.Инициализировать(МакетКомпоновкиДляВыводаВКоллекцию, ВнешниеНаборыДанных, , Истина);
					КонецЕсли;
					ПроцессорВыводаВКоллекцию.Вывести(ПроцессорКомпоновкиДляВыводаВКоллекцию, Истина);
					
				КонецЕсли;
				
				ВывестиДанныеКоллекцииВДокумент(ПараметрыОтчета, Таблица, Дерево, Результат);
				
				Если Не Отказ Тогда
					Если ВыводитьПодвал Тогда
						Если НЕ ИспользоватьПриВыводеПодвала Тогда 
							БухгалтерскиеОтчетыВызовСервера.ВывестиПодвалОтчета(ПараметрыОтчета, КомпоновщикНастроек, Результат);
						КонецЕсли;
					КонецЕсли;
					
					Если ИспользоватьПослеВыводаРезультата Тогда
						УПЖКХ_ТиповыеМетодыВызовСервера.ОбработкаРезультатаОтчета(ПараметрыОтчета.ИдентификаторОтчета, Результат);
					Иначе
						УПЖКХ_ТиповыеМетодыВызовСервера.ОбработкаРезультатаОтчета(ПараметрыОтчета.ИдентификаторОтчета, Результат);
					КонецЕсли;
				КонецЕсли;
				
				ПоместитьВоВременноеХранилище(Новый Структура("Результат,ДанныеРасшифровки", Результат, ДанныеРасшифровки), АдресХранилища);
				
				Возврат;
				
			КонецЕсли;
			
			// Квартплата-
			
			// Отключаем привилегированный режим если он использовался.
			Если ИспользоватьПривилегированныйРежим Тогда
				УстановитьПривилегированныйРежим(Ложь);
			КонецЕсли;
			
		Исключение
			// Запись в журнал регистрации не требуется.
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			Пока ИнформацияОбОшибке.Причина <> Неопределено Цикл
				ИнформацияОбОшибке = ИнформацияОбОшибке.Причина;
			КонецЦикла;
			ТекстСообщения = НСтр("ru = 'Отчет не сформирован!'") + Символы.ПС + ИнформацияОбОшибке.Описание;
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			Отказ = Истина;
		КонецПопытки;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
// Процедура проверяет, выполнено ли задание.
Функция ЗаданиеВыполнено(ИдентификаторЗадания)
	
	Возврат УПЖКХ_ТиповыеМетодыСервер.ЗаданиеВыполнено(ИдентификаторЗадания);
	
КонецФункции

&НаСервере
// Процедура готовит параметры на сервере.
Функция ПодготовитьПараметрыОтчетаНаСервере()
	
	ПараметрыОтчета = Новый Структура;
	
	ПараметрыОтчета.Вставить("Организация"                      , Отчет.Организация);
	ПараметрыОтчета.Вставить("НачалоПериода"                    , Отчет.НачалоПериода);
	ПараметрыОтчета.Вставить("КонецПериода"                     , КонецДня(Отчет.КонецПериода));
	ПараметрыОтчета.Вставить("ВключатьОбособленныеПодразделения", Отчет.ВключатьОбособленныеПодразделения);
	ПараметрыОтчета.Вставить("РежимРасшифровки"                 , Отчет.РежимРасшифровки);
	ПараметрыОтчета.Вставить("ВыводитьЗаголовок"                , ВыводитьЗаголовок);
	ПараметрыОтчета.Вставить("ВыводитьПодвал"                   , Истина);
	ПараметрыОтчета.Вставить("ДанныеРасшифровки"                , ДанныеРасшифровки);
	ПараметрыОтчета.Вставить("МакетОформления"                  , МакетОформления);
	ПараметрыОтчета.Вставить("СхемаКомпоновкиДанных"            , ПолучитьИзВременногоХранилища(СхемаКомпоновкиДанных));
	ПараметрыОтчета.Вставить("ИдентификаторОтчета"              , УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьИдентификаторОбъекта(ЭтаФорма));
	ПараметрыОтчета.Вставить("НастройкиКомпоновкиДанных"        , Отчет.КомпоновщикНастроек.ПолучитьНастройки());
	ПараметрыОтчета.Вставить("ДополнительныеПоля"               , Отчет.ДополнительныеПоля.Выгрузить());
	ПараметрыОтчета.Вставить("РазмещениеДополнительныхПолей"    , Отчет.РазмещениеДополнительныхПолей);
	ПараметрыОтчета.Вставить("ГруппироватьПоЗданиям"            , Отчет.ГруппироватьПоЗданиям);
	ПараметрыОтчета.Вставить("ВыводитьЛицевыеСчетаСПогашеннымиРассрочками", Отчет.ВыводитьЛицевыеСчетаСПогашеннымиРассрочками);
	ПараметрыОтчета.Вставить("Услуги",                           Отчет.Услуги.Выгрузить());
	
	Возврат ПараметрыОтчета;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
// Процедура обновляет текст заголовка.
Процедура ОбновитьТекстЗаголовка(Форма)
	
	Отчет = Форма.Отчет;
	
	ЗаголовокОтчета = "Сводная ведомость по рассрочкам платежей"
					+ УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьПредставлениеПериода(Отчет.НачалоПериода, Отчет.КонецПериода);
	
	Если ЗначениеЗаполнено(Отчет.Организация) Тогда
		ЗаголовокОтчета = ЗаголовокОтчета + " "
						+ УПЖКХ_ТиповыеМетодыВызовСервера.ПолучитьТекстОрганизация(Отчет.Организация,
																					Отчет.ВключатьОбособленныеПодразделения);
	КонецЕсли;
	
	Форма.Заголовок = ЗаголовокОтчета;
	
КонецПроцедуры

// Функция получает запрещенные поля.
//
// Параметры:
//  Режим - Строка - Режим получения запрещенных полей отчета.
//
&НаКлиенте
Функция ПолучитьЗапрещенныеПоля(Режим = "") Экспорт
	
	СписокПолей = Новый Массив;
	
	СписокПолей.Добавить("UserFields");
	СписокПолей.Добавить("DataParameters");
	СписокПолей.Добавить("SystemFields");
	СписокПолей.Добавить("Показатели");
	СписокПолей.Добавить("Период");
	
	СписокРазрешенных = Новый Массив;
	СписокРазрешенных.Добавить("Здание");
	СписокРазрешенных.Добавить("ВладелецЛС");
	СписокРазрешенных.Добавить("КоличествоЗарегистрированных");
	СписокРазрешенных.Добавить("КоличествоПроживающих");
	СписокРазрешенных.Добавить("Контрагент");
	СписокРазрешенных.Добавить("ОбщаяПлощадь");
	СписокРазрешенных.Добавить("Помещение");
	СписокРазрешенных.Добавить("Улица");
	
	Если Режим = "Выбор" Тогда
		Для Каждого ДоступноеПоле Из Отчет.КомпоновщикНастроек.Настройки.ДоступныеПоляВыбора.Элементы Цикл
			Если ДоступноеПоле.Ресурс И СписокРазрешенных.Найти(Строка(ДоступноеПоле.Поле)) = Неопределено Тогда
				СписокПолей.Добавить(Строка(ДоступноеПоле.Поле));
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	СписокПолей.Добавить("ППНомер");
	СписокПолей.Добавить("ФлагНачисления");
	СписокПолей.Добавить("ФлагОплаты");
	СписокПолей.Добавить("ЭтоГруппаЛС");
	СписокПолей.Добавить("ЛицевойСчет");
	
	МассивРесурсовИсключений = Новый Массив;
	МассивРесурсовИсключений.Добавить("Здание");
	МассивРесурсовИсключений.Добавить("Помещение");
	МассивРесурсовИсключений.Добавить("ЛицевойСчет");
	
	Если Режим = "Отбор" ИЛИ Режим = "Порядок" Тогда
		УПЖКХ_ТиповыеМетодыКлиент.ДобавитьПоляРесурсовВЗапрещенныеПоля(ЭтаФорма, СписокПолей);
		
		Для Каждого РесурсИсключение Из МассивРесурсовИсключений Цикл
			ИндексРесурса = СписокПолей.Найти(РесурсИсключение);
			Если Не ИндексРесурса = Неопределено Тогда
				СписокПолей.Удалить(ИндексРесурса);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Новый ФиксированныйМассив(СписокПолей);
	
КонецФункции

// Функция получает сведения о рассрочках.
//
// Параметры:
//  ПараметрыОтчета - Структура - структура параметров для отчета.
//
&НаСервере
Функция ПолучитьСведенияОРассрочках(ПараметрыОтчета)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	УПЖКХ_СведенияОРассрочкеСрезПоследних.ЛицевойСчет,
	|	УПЖКХ_СведенияОРассрочкеСрезПоследних.Услуга,
	|	УПЖКХ_СведенияОРассрочкеСрезПоследних.ЗаявлениеНаРассрочку,
	|	УПЖКХ_СведенияОРассрочкеСрезПоследних.ГодоваяПроцентнаяСтавка,
	|	УПЖКХ_СведенияОРассрочкеСрезПоследних.Период КАК МесяцРассрочки,
	|	УПЖКХ_СведенияОРассрочкеСрезПоследних.ВидРассрочки,
	|	УПЖКХ_СведенияОРассрочкеСрезПоследних.ВидПлатежей,
	|	УПЖКХ_СведенияОРассрочкеСрезПоследних.СуммаРассрочки
	|ПОМЕСТИТЬ втРассрочки
	|ИЗ
	|	РегистрСведений.УПЖКХ_СведенияОРассрочке.СрезПоследних(&ДатаКон, Услуга В (&Услуги)) КАК УПЖКХ_СведенияОРассрочкеСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УПЖКХ_НачисленияПоРассрочкеОбороты.ЛицевойСчет,
	|	УПЖКХ_НачисленияПоРассрочкеОбороты.Услуга,
	|	УПЖКХ_НачисленияПоРассрочкеОбороты.ЗаявлениеНаРассрочку,
	|	УПЖКХ_НачисленияПоРассрочкеОбороты.ВидОперации,
	|	УПЖКХ_НачисленияПоРассрочкеОбороты.МесяцРассрочки,
	|	УПЖКХ_НачисленияПоРассрочкеОбороты.СуммаНачисленияОборот КАК Предоплата
	|ПОМЕСТИТЬ втПредоплаты
	|ИЗ
	|	РегистрНакопления.УПЖКХ_НачисленияПоРассрочке.Обороты(
	|			&ДатаНач,
	|			&ДатаКон,
	|			Месяц,
	|			Организация = &Организация
	|				И Услуга В (&Услуги)
	|				И ВидОперации = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_Рассрочка.Предоплата)) КАК УПЖКХ_НачисленияПоРассрочкеОбороты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УПЖКХ_НачисленияОбороты.ЛицевойСчет,
	|	УПЖКХ_НачисленияОбороты.Услуга,
	|	УПЖКХ_НачисленияОбороты.МесяцНачисления,
	|	СУММА(ВЫБОР
	|			КОГДА УПЖКХ_НачисленияОбороты.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Начисление)
	|				ТОГДА УПЖКХ_НачисленияОбороты.СуммаНачисленияОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ОбщееНачисление,
	|	СУММА(ВЫБОР
	|			КОГДА УПЖКХ_НачисленияОбороты.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Начисление)
	|					И НЕ УПЖКХ_НачисленияОбороты.Регистратор ССЫЛКА Документ.КВП_РегистрацияОплаты
	|				ТОГДА УПЖКХ_НачисленияОбороты.СуммаНачисленияОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК Начисление,
	|	СУММА(ВЫБОР
	|			КОГДА УПЖКХ_НачисленияОбороты.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Комиссия)
	|				ТОГДА УПЖКХ_НачисленияОбороты.СуммаНачисленияОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК Проценты,
	|	СУММА(ВЫБОР
	|			КОГДА (УПЖКХ_НачисленияОбороты.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Оплата)
	|					ИЛИ УПЖКХ_НачисленияОбороты.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Начисление)
	|						И УПЖКХ_НачисленияОбороты.Регистратор ССЫЛКА Документ.КВП_РегистрацияОплаты)
	|					И (УПЖКХ_НачисленияОбороты.Период МЕЖДУ &ДатаНач И &ДатаКон)
	|				ТОГДА УПЖКХ_НачисленияОбороты.СуммаНачисленияОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК Оплаты,
	|	СУММА(ВЫБОР
	|			КОГДА УПЖКХ_НачисленияОбороты.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Начисление)
	|					И УПЖКХ_НачисленияОбороты.Период < &ДатаНач
	|				ТОГДА УПЖКХ_НачисленияОбороты.СуммаНачисленияОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ОбщееНачислениеЗаПредПериоды,
	|	СУММА(ВЫБОР
	|			КОГДА УПЖКХ_НачисленияОбороты.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Комиссия)
	|					И УПЖКХ_НачисленияОбороты.Период < &ДатаНач
	|				ТОГДА УПЖКХ_НачисленияОбороты.СуммаНачисленияОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ПроцентыЗаПредПериоды,
	|	СУММА(ВЫБОР
	|			КОГДА УПЖКХ_НачисленияОбороты.ВидНачисления В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Оплата), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.ЗачетДолговИПереплат))
	|					И УПЖКХ_НачисленияОбороты.Период < &ДатаНач
	|				ТОГДА УПЖКХ_НачисленияОбороты.СуммаНачисленияОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ОплатыЗаПредПериоды
	|ПОМЕСТИТЬ втОборотыПоРассрочкамБазовая
	|ИЗ
	|	РегистрНакопления.УПЖКХ_Начисления.Обороты(
	|			,
	|			&ДатаКон,
	|			Запись,
	|			Организация = &Организация
	|				И ЛицевойСчет В
	|					(ВЫБРАТЬ
	|						втРассрочки.ЛицевойСчет
	|					ИЗ
	|						втРассрочки КАК втРассрочки)
	|				И Услуга В (&Услуги)
	|				И РазделУчета = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.Рассрочка)) КАК УПЖКХ_НачисленияОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	УПЖКХ_НачисленияОбороты.ЛицевойСчет,
	|	УПЖКХ_НачисленияОбороты.Услуга,
	|	УПЖКХ_НачисленияОбороты.МесяцНачисления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втРассрочки.ЛицевойСчет,
	|	втРассрочки.Услуга,
	|	втРассрочки.МесяцРассрочки КАК МесяцРассрочки,
	|	втОборотыПоРассрочкамБазовая.МесяцНачисления,
	|	втОборотыПоРассрочкамБазовая.ОбщееНачисление,
	|	втОборотыПоРассрочкамБазовая.Начисление,
	|	втОборотыПоРассрочкамБазовая.Проценты,
	|	втОборотыПоРассрочкамБазовая.Оплаты,
	|	втОборотыПоРассрочкамБазовая.ОбщееНачислениеЗаПредПериоды,
	|	втОборотыПоРассрочкамБазовая.ПроцентыЗаПредПериоды,
	|	втОборотыПоРассрочкамБазовая.ОплатыЗаПредПериоды
	|ПОМЕСТИТЬ втОборотыПоРассрочкам
	|ИЗ
	|	втРассрочки КАК втРассрочки
	|		ЛЕВОЕ СОЕДИНЕНИЕ втОборотыПоРассрочкамБазовая КАК втОборотыПоРассрочкамБазовая
	|		ПО втРассрочки.ЛицевойСчет = втОборотыПоРассрочкамБазовая.ЛицевойСчет
	|			И втРассрочки.Услуга = втОборотыПоРассрочкамБазовая.Услуга
	|ГДЕ
	|	втОборотыПоРассрочкамБазовая.МесяцНачисления >= втРассрочки.МесяцРассрочки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втОборотыПоРассрочкам.ЛицевойСчет,
	|	втОборотыПоРассрочкам.Услуга,
	|	втОборотыПоРассрочкам.МесяцНачисления,
	|	ВЫБОР
	|		КОГДА -втОборотыПоРассрочкам.Оплаты > втОборотыПоРассрочкам.Проценты
	|			ТОГДА -втОборотыПоРассрочкам.Проценты
	|		ИНАЧЕ втОборотыПоРассрочкам.Оплаты
	|	КОНЕЦ КАК ОплатыПоКомиссии,
	|	втОборотыПоРассрочкам.Оплаты КАК ОплатыОбщие
	|ПОМЕСТИТЬ втРассрочкиПерваяОбработка
	|ИЗ
	|	втОборотыПоРассрочкам КАК втОборотыПоРассрочкам
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	втРассрочкиПерваяОбработка.ЛицевойСчет,
	|	втРассрочкиПерваяОбработка.Услуга,
	|	втРассрочкиПерваяОбработка.МесяцНачисления,
	|	втРассрочкиПерваяОбработка.ОплатыОбщие,
	|	втРассрочкиПерваяОбработка.ОплатыПоКомиссии,
	|	ВЫБОР
	|		КОГДА втРассрочкиПерваяОбработка.ОплатыПоКомиссии < 0
	|			ТОГДА втРассрочкиПерваяОбработка.ОплатыОбщие - втРассрочкиПерваяОбработка.ОплатыПоКомиссии
	|		ИНАЧЕ втРассрочкиПерваяОбработка.ОплатыОбщие
	|	КОНЕЦ КАК ОплатыПоОсновнойЧасти
	|ПОМЕСТИТЬ втРассрочкиВтораяОбработка
	|ИЗ
	|	втРассрочкиПерваяОбработка КАК втРассрочкиПерваяОбработка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втРассрочкиВтораяОбработка.ЛицевойСчет,
	|	втРассрочкиВтораяОбработка.Услуга,
	|	СУММА(втРассрочкиВтораяОбработка.ОплатыПоОсновнойЧасти) КАК ОплатыПоОсновнойЧасти,
	|	СУММА(втРассрочкиВтораяОбработка.ОплатыПоКомиссии) КАК ОплатыПоКомиссии
	|ПОМЕСТИТЬ втОплаты
	|ИЗ
	|	втРассрочкиВтораяОбработка КАК втРассрочкиВтораяОбработка
	|
	|СГРУППИРОВАТЬ ПО
	|	втРассрочкиВтораяОбработка.ЛицевойСчет,
	|	втРассрочкиВтораяОбработка.Услуга
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втОборотыПоРассрочкам.ЛицевойСчет,
	|	втОборотыПоРассрочкам.Услуга,
	|	втОборотыПоРассрочкам.МесяцНачисления,
	|	ВЫБОР
	|		КОГДА -втОборотыПоРассрочкам.ОплатыЗаПредПериоды > втОборотыПоРассрочкам.ПроцентыЗаПредПериоды
	|			ТОГДА -втОборотыПоРассрочкам.ПроцентыЗаПредПериоды
	|		ИНАЧЕ втОборотыПоРассрочкам.ОплатыЗаПредПериоды
	|	КОНЕЦ КАК ОплатыПоКомиссии,
	|	втОборотыПоРассрочкам.ОплатыЗаПредПериоды КАК ОплатыОбщие
	|ПОМЕСТИТЬ втРассрочкиПерваяОбработкаЗаПредПериоды
	|ИЗ
	|	втОборотыПоРассрочкам КАК втОборотыПоРассрочкам
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	втРассрочкиПерваяОбработкаЗаПредПериоды.ЛицевойСчет,
	|	втРассрочкиПерваяОбработкаЗаПредПериоды.Услуга,
	|	ВЫБОР
	|		КОГДА втРассрочкиПерваяОбработкаЗаПредПериоды.ОплатыПоКомиссии < 0
	|			ТОГДА втРассрочкиПерваяОбработкаЗаПредПериоды.ОплатыОбщие - втРассрочкиПерваяОбработкаЗаПредПериоды.ОплатыПоКомиссии
	|		ИНАЧЕ втРассрочкиПерваяОбработкаЗаПредПериоды.ОплатыОбщие
	|	КОНЕЦ КАК ОплатыПоОсновнойЧасти
	|ПОМЕСТИТЬ втРассрочкиВтораяОбработкаЗаПредПериоды
	|ИЗ
	|	втРассрочкиПерваяОбработкаЗаПредПериоды КАК втРассрочкиПерваяОбработкаЗаПредПериоды
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втРассрочкиВтораяОбработкаЗаПредПериоды.ЛицевойСчет,
	|	втРассрочкиВтораяОбработкаЗаПредПериоды.Услуга,
	|	СУММА(втРассрочкиВтораяОбработкаЗаПредПериоды.ОплатыПоОсновнойЧасти) КАК ОплатыПоОсновнойЧасти
	|ПОМЕСТИТЬ втОплатыЗаПредПериоды
	|ИЗ
	|	втРассрочкиВтораяОбработкаЗаПредПериоды КАК втРассрочкиВтораяОбработкаЗаПредПериоды
	|
	|СГРУППИРОВАТЬ ПО
	|	втРассрочкиВтораяОбработкаЗаПредПериоды.ЛицевойСчет,
	|	втРассрочкиВтораяОбработкаЗаПредПериоды.Услуга
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втОборотыПоРассрочкам.ЛицевойСчет,
	|	втОборотыПоРассрочкам.Услуга,
	|	втОборотыПоРассрочкам.МесяцНачисления,
	|	ВЫБОР
	|		КОГДА втОборотыПоРассрочкам.Начисление > 0
	|			ТОГДА втОборотыПоРассрочкам.Начисление
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Начисление,
	|	ВЫБОР
	|		КОГДА втОборотыПоРассрочкам.Проценты > 0
	|			ТОГДА втОборотыПоРассрочкам.Проценты
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Проценты
	|ПОМЕСТИТЬ втНачисленияЗаПериод
	|ИЗ
	|	втОборотыПоРассрочкам КАК втОборотыПоРассрочкам
	|ГДЕ
	|	втОборотыПоРассрочкам.МесяцНачисления МЕЖДУ &ДатаНач И &ДатаКон
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втРассрочки.ЛицевойСчет.Адрес.Владелец КАК Здание,
	|	втРассрочки.ЛицевойСчет,
	|	втРассрочки.Услуга,
	|	втРассрочки.Услуга.ВидУслуги КАК ВидУслуги,
	|	втРассрочки.ВидРассрочки,
	|	втРассрочки.ВидПлатежей,
	|	ЕСТЬNULL(втРассрочки.ГодоваяПроцентнаяСтавка, 0) КАК ПроцентнаяСтавка,
	|	втРассрочки.МесяцРассрочки,
	|	ЕСТЬNULL(втРассрочки.СуммаРассрочки, 0) КАК СуммаОснование,
	|	ЕСТЬNULL(втРассрочки.СуммаРассрочки, 0) + ЕСТЬNULL(втОплатыЗаПредПериоды.ОплатыПоОсновнойЧасти, 0) КАК НепогашенныйОстатокНаНачалоМесяца,
	|	-ЕСТЬNULL(втПредоплаты.Предоплата, 0) КАК Предоплата,
	|	ЕСТЬNULL(втОплатыЗаПредПериоды.ОплатыПоОсновнойЧасти, 0) КАК ОплатыПоОсновнойЧастиЗаПредПериоды,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(втРассрочки.СуммаРассрочки, 0) >= -ЕСТЬNULL(втОплаты.ОплатыПоОсновнойЧасти, 0) - ЕСТЬNULL(втОплатыЗаПредПериоды.ОплатыПоОсновнойЧасти, 0) - ЕСТЬNULL(втПредоплаты.Предоплата, 0)
	|			ТОГДА ЕСТЬNULL(втРассрочки.СуммаРассрочки, 0) + ЕСТЬNULL(втОплаты.ОплатыПоОсновнойЧасти, 0) + ЕСТЬNULL(втОплатыЗаПредПериоды.ОплатыПоОсновнойЧасти, 0) + ЕСТЬNULL(втПредоплаты.Предоплата, 0)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ОстатокНаКонецМесяцаОсновнаяСумма,
	|	-ЕСТЬNULL(втОплаты.ОплатыПоОсновнойЧасти, 0) КАК ОплаченоОсновнаяСумма,
	|	-ЕСТЬNULL(втОплаты.ОплатыПоКомиссии, 0) КАК ОплаченоПроценты,
	|	СУММА(ЕСТЬNULL(втНачисленияЗаПериод.Начисление, 0)) КАК НачисленоОсновнаяСумма,
	|	СУММА(ЕСТЬNULL(втНачисленияЗаПериод.Проценты, 0)) КАК НачисленоПроценты,
	|	0 КАК НепогашенныеПроцентыНаНачалоМесяца,
	|	0 КАК ОстатокНаКонецМесяцаПроценты
	|ПОМЕСТИТЬ втИтоги
	|ИЗ
	|	втРассрочки КАК втРассрочки
	|		ЛЕВОЕ СОЕДИНЕНИЕ втОплаты КАК втОплаты
	|		ПО втРассрочки.ЛицевойСчет = втОплаты.ЛицевойСчет
	|			И втРассрочки.Услуга = втОплаты.Услуга
	|		ЛЕВОЕ СОЕДИНЕНИЕ втНачисленияЗаПериод КАК втНачисленияЗаПериод
	|		ПО втРассрочки.ЛицевойСчет = втНачисленияЗаПериод.ЛицевойСчет
	|			И втРассрочки.Услуга = втНачисленияЗаПериод.Услуга
	|		ЛЕВОЕ СОЕДИНЕНИЕ втОплатыЗаПредПериоды КАК втОплатыЗаПредПериоды
	|		ПО втРассрочки.ЛицевойСчет = втОплатыЗаПредПериоды.ЛицевойСчет
	|			И втРассрочки.Услуга = втОплатыЗаПредПериоды.Услуга
	|		ЛЕВОЕ СОЕДИНЕНИЕ втПредоплаты КАК втПредоплаты
	|		ПО втРассрочки.ЛицевойСчет = втПредоплаты.ЛицевойСчет
	|			И втРассрочки.Услуга = втПредоплаты.Услуга
	|
	|СГРУППИРОВАТЬ ПО
	|	втРассрочки.ЛицевойСчет.Адрес.Владелец,
	|	втРассрочки.ЛицевойСчет,
	|	втРассрочки.Услуга,
	|	втРассрочки.Услуга.ВидУслуги,
	|	втРассрочки.ВидРассрочки,
	|	втРассрочки.ВидПлатежей,
	|	ЕСТЬNULL(втРассрочки.ГодоваяПроцентнаяСтавка, 0),
	|	втРассрочки.МесяцРассрочки,
	|	ЕСТЬNULL(втРассрочки.СуммаРассрочки, 0),
	|	ЕСТЬNULL(втРассрочки.СуммаРассрочки, 0) + ЕСТЬNULL(втОплатыЗаПредПериоды.ОплатыПоОсновнойЧасти, 0),
	|	-ЕСТЬNULL(втПредоплаты.Предоплата, 0),
	|	ЕСТЬNULL(втОплатыЗаПредПериоды.ОплатыПоОсновнойЧасти, 0),
	|	-ЕСТЬNULL(втОплаты.ОплатыПоОсновнойЧасти, 0),
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(втРассрочки.СуммаРассрочки, 0) >= -ЕСТЬNULL(втОплаты.ОплатыПоОсновнойЧасти, 0) - ЕСТЬNULL(втОплатыЗаПредПериоды.ОплатыПоОсновнойЧасти, 0) - ЕСТЬNULL(втПредоплаты.Предоплата, 0)
	|			ТОГДА ЕСТЬNULL(втРассрочки.СуммаРассрочки, 0) + ЕСТЬNULL(втОплаты.ОплатыПоОсновнойЧасти, 0) + ЕСТЬNULL(втОплатыЗаПредПериоды.ОплатыПоОсновнойЧасти, 0) + ЕСТЬNULL(втПредоплаты.Предоплата, 0)
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	ЕСТЬNULL(втПредоплаты.Предоплата, 0) - ЕСТЬNULL(втОплаты.ОплатыПоОсновнойЧасти, 0),
	|	-ЕСТЬNULL(втОплаты.ОплатыПоКомиссии, 0),
	|	ЕСТЬNULL(втОплаты.ОплатыПоОсновнойЧасти, 0)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втИтоги.Здание,
	|	втИтоги.ЛицевойСчет,
	|	втИтоги.Услуга,
	|	втИтоги.ВидУслуги,
	|	втИтоги.ВидРассрочки,
	|	втИтоги.ВидПлатежей,
	|	втИтоги.ПроцентнаяСтавка,
	|	втИтоги.МесяцРассрочки,
	|	втИтоги.СуммаОснование,
	|	втИтоги.НепогашенныйОстатокНаНачалоМесяца,
	|	втИтоги.Предоплата,
	|	втИтоги.ОплатыПоОсновнойЧастиЗаПредПериоды,
	|	втИтоги.ОстатокНаКонецМесяцаОсновнаяСумма,
	|	втИтоги.ОплаченоОсновнаяСумма,
	|	втИтоги.ОплаченоПроценты,
	|	втИтоги.НачисленоОсновнаяСумма,
	|	втИтоги.НачисленоПроценты,
	|	втИтоги.НепогашенныеПроцентыНаНачалоМесяца,
	|	втИтоги.ОстатокНаКонецМесяцаПроценты
	|ИЗ
	|	втИтоги КАК втИтоги" + ?(ПараметрыОтчета.ВыводитьЛицевыеСчетаСПогашеннымиРассрочками, "", "
	|ГДЕ
	|	втИтоги.ОстатокНаКонецМесяцаОсновнаяСумма > 0");
	
	Запрос.УстановитьПараметр("ДатаНач",     ПараметрыОтчета.НачалоПериода);
	Запрос.УстановитьПараметр("ДатаКон",     ПараметрыОтчета.КонецПериода);
	Запрос.УстановитьПараметр("Организация", ПараметрыОтчета.Организация);
	Запрос.УстановитьПараметр("Услуги",      ?(ПараметрыОтчета.Услуги.Количество() = 0, ПолучитьВсеУслуги(), ПараметрыОтчета.Услуги.ВыгрузитьКолонку("Услуга")));
	Запрос.УстановитьПараметр("ВыводитьЛицевыеСчетаСПогашеннымиРассрочками", ПараметрыОтчета.ВыводитьЛицевыеСчетаСПогашеннымиРассрочками);
	
	ТаблицаРассрочек = Запрос.Выполнить().Выгрузить();
	
	// Формируем суммы долга по процентам.
	// Срок рассрочки.
	// Вид платежей - аннуитетный дифференциальный.
	
	Для каждого ТекСтрока из ТаблицаРассрочек Цикл
		
		ТекСтрока.НепогашенныеПроцентыНаНачалоМесяца = ПолучитьСуммыПроцентовПолные(ТекСтрока.ВидРассрочки, ТекСтрока.ВидПлатежей, ТекСтрока.ПроцентнаяСтавка, ТекСтрока.СуммаОснование, ТекСтрока.НепогашенныйОстатокНаНачалоМесяца);
		ТекСтрока.ОстатокНаКонецМесяцаПроценты       = ПолучитьСуммыПроцентовПолные(ТекСтрока.ВидРассрочки, ТекСтрока.ВидПлатежей, ТекСтрока.ПроцентнаяСтавка, ТекСтрока.СуммаОснование, ТекСтрока.ОстатокНаКонецМесяцаОсновнаяСумма);
		
	КонецЦикла;
	
	Возврат ТаблицаРассрочек;
	
КонецФункции

&НаСервере
// Функция получает все услуги.
Функция ПолучитьВсеУслуги()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	КВП_Услуги.Ссылка КАК Услуга
	               |ИЗ
	               |	Справочник.КВП_Услуги КАК КВП_Услуги
	               |ГДЕ
	               |	НЕ КВП_Услуги.ПометкаУдаления
	               |	И НЕ КВП_Услуги.ЭтоГруппа";
	
	ТаблицаУслуг = Запрос.Выполнить().Выгрузить();
	
	Возврат ТаблицаУслуг.ВыгрузитьКолонку("Услуга");
	
КонецФункции

&НаСервере
// Функция получает полные суммы процентов.
Функция ПолучитьСуммыПроцентовПолные(ВидРассрочки, ВидПлатежей, ПроцентнаяСтавка, СуммаОснование, Знач ОстатокСуммы)
	
	Если ОстатокСуммы <= 0 Тогда
		
		Возврат 0;
		
	Иначе
		
		КоличествоМесяцевРассрочки = ?(ВидРассрочки = Перечисления.УПЖКХ_ВидыРассрочки.РассрочкаНаПлатуЗаУстановкуСчетчика, 60, 12);
		МесячнаяПроцентнаяСтавка = ПроцентнаяСтавка / КоличествоМесяцевРассрочки;
		
		СуммаРассрочкиИтог = 0;
		СуммаРассрочкиТек  = 0;
		
		КомиссияЗаРассрочкуТек = 0;
		КомиссияЗаРассрочкуИтог = 0;
		
		СуммаПроцентов = 0;
		ТекОстаток     = 0;
		
		Если ВидПлатежей = ПредопределенноеЗначение("Перечисление.УПЖКХ_ВидыПлатежейРассрочки.Дифференцированные") Тогда
			
			СуммаРассрочки     = СуммаОснование / КоличествоМесяцевРассрочки;
			ТекущийРазмерПлаты = ОстатокСуммы;
			
			Для Счетчик = 0 По КоличествоМесяцевРассрочки - 1 Цикл
				
				Если Счетчик = КоличествоМесяцевРассрочки - 1 Тогда
					
					ОстатокСуммы = ТекущийРазмерПлаты - СуммаРассрочкиИтог;
					
					СуммаРассрочкиТек = ОстатокСуммы;
					
				Иначе
					СуммаРассрочкиТек = СуммаРассрочки;
					
				КонецЕсли;
				
				СуммаРассрочкиИтог = СуммаРассрочкиИтог + СуммаРассрочкиТек;
				
				КомиссияЗаРассрочкуТек = (ОстатокСуммы * ПроцентнаяСтавка) / 12;
				КомиссияЗаРассрочкуИтог = КомиссияЗаРассрочкуИтог + ?(КомиссияЗаРассрочкуТек < 0, 0, КомиссияЗаРассрочкуТек);
				
				ОстатокСуммы = ОстатокСуммы - СуммаРассрочки;
				
			КонецЦикла;
			
			КомиссияЗаРассрочкуИтог = Окр(КомиссияЗаРассрочкуИтог,2);
			
		Иначе
			
			ЗнаменательДроби = Pow(1 + МесячнаяПроцентнаяСтавка, КоличествоМесяцевРассрочки) - 1;
			ЗнаменательДроби = ?(ЗнаменательДроби = 0, 1, ЗнаменательДроби);
			
			ИтоговыйРазмерПлаты = СуммаОснование * (МесячнаяПроцентнаяСтавка + МесячнаяПроцентнаяСтавка / ЗнаменательДроби);
			
			ТекущийРазмерПлаты = ОстатокСуммы;
			
			Для Счетчик = 0 По КоличествоМесяцевРассрочки - 1 Цикл
				
				КомиссияЗаРассрочкуТек = ОстатокСуммы * МесячнаяПроцентнаяСтавка;
				СуммаРассрочки         = ИтоговыйРазмерПлаты - КомиссияЗаРассрочкуТек;
				
				КомиссияЗаРассрочкуИтог = КомиссияЗаРассрочкуИтог + Окр(?(КомиссияЗаРассрочкуТек < 0, 0, КомиссияЗаРассрочкуТек), 2);
				
				СуммаРассрочкиИтог = СуммаРассрочкиИтог + Окр(СуммаРассрочки, 2);
				
				Если Счетчик = КоличествоМесяцевРассрочки - 1 Тогда
					ОстатокСуммы = ТекущийРазмерПлаты - СуммаРассрочкиИтог;
					СуммаРассрочкиТек = ОстатокСуммы;
				Иначе
					СуммаРассрочкиТек = СуммаРассрочки;
				КонецЕсли;
				
				ОстатокСуммы = ОстатокСуммы - СуммаРассрочки;
				
				Если ОстатокСуммы < 0 Тогда
					ОстатокСуммы = 0;
				КонецЕсли;
				
			КонецЦикла;
		
		КонецЕсли;
	КонецЕсли;
	
	Возврат КомиссияЗаРассрочкуИтог;
	
КонецФункции

&НаСервере
// Функция формирует отчет на сервере.
Функция СформироватьОтчетНаСервере() Экспорт
	
	Если Не ПроверитьЗаполнение() Тогда 
		Возврат Новый Структура("ЗаданиеВыполнено", Истина);
	КонецЕсли;
	
	ИБФайловая = УПЖКХ_ТиповыеМетодыСервер.ИнформационнаяБазаФайловая();
	
	УПЖКХ_ТиповыеМетодыСервер.ОтменитьВыполнениеЗадания(ИдентификаторЗадания);
	
	ИдентификаторЗадания = Неопределено;
	
	УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеИспользовать");
	
	Отчет.КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Вставить("ВыводитьЗаголовок", ВыводитьЗаголовок);
	Отчет.КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Вставить("ВыводитьПодвал"   , ВыводитьПодвал);
	
	ПараметрыОтчета = ПодготовитьПараметрыОтчетаНаСервере();
	
	Если ИБФайловая Тогда
		АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
		СформироватьОтчет(ПараметрыОтчета, АдресХранилища);
		РезультатВыполнения = Новый Структура("ЗаданиеВыполнено", Истина);
	Иначе
		РезультатВыполнения = УПЖКХ_ТиповыеМетодыСервер.ЗапуститьВыполнениеВФоне(
			УникальныйИдентификатор,
			"СформироватьОтчет",
			ПараметрыОтчета,
			УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьНаименованиеЗаданияВыполненияОтчета(ЭтаФорма));
			
		АдресХранилища       = РезультатВыполнения.АдресХранилища;
		ИдентификаторЗадания = РезультатВыполнения.ИдентификаторЗадания;
	КонецЕсли;
	
	Если РезультатВыполнения.ЗаданиеВыполнено Тогда
		ЗагрузитьПодготовленныеДанныеНаСервере();
	КонецЕсли;
	
	УПЖКХ_ТиповыеМетодыКлиентСервер.СкрыватьНастройкиПриФормированииОтчета(ЭтаФорма);
	
	Возврат РезультатВыполнения;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
// Управляет видимостью элементов формы.
Процедура УправлениеФормой(Форма)
	
	Отчет    = Форма.Отчет;
	Элементы = Форма.Элементы;
	
	Форма.Период = УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьПредставлениеПериодаОтчета(
		Форма.ВидПериода, Отчет.НачалоПериода, Отчет.КонецПериода);
		
	УПЖКХ_ТиповыеМетодыКлиентСервер.ПереключитьТекущуюСтраницуВыбораПериода(Форма.ВидПериода,
																			Элементы.ГруппаПоляВводаПериода);
	
КонецПроцедуры

&НаСервере
// Процедура загружает подготовленные данные на сервере.
Процедура ЗагрузитьПодготовленныеДанныеНаСервере()

	РезультатВыполнения = ПолучитьИзВременногоХранилища(АдресХранилища);
	Результат         = РезультатВыполнения.Результат;
	ДанныеРасшифровки = РезультатВыполнения.ДанныеРасшифровки;
	
	ИдентификаторЗадания = Неопределено;
	
	УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеИспользовать");
	
	ДополнительныеСвойства = Отчет.КомпоновщикНастроек.Настройки.ДополнительныеСвойства;
	
КонецПроцедуры

&НаКлиенте
// Процедуры проверяет выполнение задания.
Процедура Подключаемый_ПроверитьВыполнениеЗадания()
	
	Попытка
		Если ЗаданиеВыполнено(ИдентификаторЗадания) Тогда 
			ЗагрузитьПодготовленныеДанныеНаСервере();
			УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеИспользовать");
		Иначе
			УПЖКХ_ТиповыеМетодыКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
			ПодключитьОбработчикОжидания(
				"Подключаемый_ПроверитьВыполнениеЗадания",
				ПараметрыОбработчикаОжидания.ТекущийИнтервал,
				Истина);
		КонецЕсли;
	Исключение
		УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеИспользовать");
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
// Функция возвращает параметры выбора значения отбора.
Функция ПолучитьПараметрыВыбораЗначенияОтбора()
	
	СписокПараметров = Новый Структура;
	СписокПараметров.Вставить("Организация", Отчет.Организация);
	
	Возврат СписокПараметров;
	
КонецФункции

#КонецОбласти

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// ВЫВОД ДАННЫХ В ТАБЛИЧНЫЙ ДОКУМЕНТ

#Область ВводДанныхВТабличныйДокумент

// Формирует список имен областей макета, которые нужно вывести.
//
// Возвращаемое значение:
//  СписокЗначений - список имен областей.
//
Функция ПолучитьСписокОбластейДляВывода(ПараметрыОтчета)
	
	СписокОбластейВывода = Новый СписокЗначений();
	
	СписокОбластейВывода.Добавить("Граница");
	СписокОбластейВывода.Добавить("НомерСтроки");
	
	Если НЕ ПараметрыОтчета.ГруппироватьПоЗданиям Тогда
		СписокОбластейВывода.Добавить("Здание");
	КонецЕсли;
	
	СписокОбластейВывода.Добавить("ЛицевойСчет");
	
	Поля = ПараметрыОтчета.ДополнительныеПоля;
	Для Каждого ТекПоле Из Поля Цикл
		Если ТекПоле.Использование Тогда
			СписокОбластейВывода.Добавить(СтрЗаменить(ТекПоле.Поле, ".", ""), ТекПоле.Представление);
		КонецЕсли;
	КонецЦикла;
	
	Возврат СписокОбластейВывода;
	
КонецФункции

// Выводит в документ строку макета с указанными колонками.
//
// Параметры:
//  Результат - ТабличныйДокумент, в который выводится область.
//  Макет        - ТабличныйДокумент, из которого берется область.
//  Строка       - Строка, содержащая имя области-строки.
//  Колонки      - Строка с именем выводимой колонки или
//                 Структура или СписокЗначений со списком имен колонок.
//  Выборка      - ВыборкаИзРезультатаЗапроса.
Процедура ВывестиСтрокуОбщДанные(ПараметрыОтчета,
								 Результат, 
								 Макет,
								 Строка,
								 Колонки,
								 Выборка = Неопределено,
								 ТаблицаИтоговыхПолей = Неопределено, 
								 ВыводПараметра = Ложь, 
								 ИмяПараметра = Неопределено,
								 // Добавим параметр "ЭтоЛицевойСчет", в который передадим истина в том случае, 
								 // если текущий уровень группировки соответствует Лицевому счету, для того, 
								 // чтобы вывести данные по дополнительным полям.
								 //ВыводИтога = Ложь )
								 ВыводИтога = Ложь, ЭтоЛицевойСчет = Ложь )

	Если Выборка = Неопределено Тогда
		Выборка = Новый Структура();
	КонецЕсли;
	
	// Выводим области "Граница" и "ФиксированнаяЧасть".
	Если ТипЗнч(Выборка) = Тип("Структура") Тогда
		Область = Макет.ПолучитьОбласть(Строка + "|Граница");
		Результат.Вывести(Область);
		Область = Макет.ПолучитьОбласть(Строка + "|НомерСтроки");
		Результат.Присоединить(Область);
		
		Если НЕ ПараметрыОтчета.ГруппироватьПоЗданиям Тогда
			Область = Макет.ПолучитьОбласть(Строка + "|Здание");
			Результат.Присоединить(Область);
		КонецЕсли;
		
		Область = Макет.ПолучитьОбласть(Строка + "|ЛицевойСчет");
		Результат.Присоединить(Область);
		
	Иначе
		Область = Макет.ПолучитьОбласть(Строка + "|Граница");
		Результат.Вывести(Область);
		Область = Макет.ПолучитьОбласть(Строка + "|Номер");
		Результат.Присоединить(Область);
		
		Если НЕ ПараметрыОтчета.ГруппироватьПоЗданиям Тогда
			Область = Макет.ПолучитьОбласть(Строка + "|Здание");
			Результат.Присоединить(Область);
		КонецЕсли;
		
		Область = Макет.ПолучитьОбласть(Строка + "|ЛицевойСчет");
		Результат.Присоединить(Область);
		
		Результат.Присоединить(Область, Выборка.Уровень());
	Конецесли;
	
	// Выводим области полей, выбранных в настройках на закладке "Поля".
	Поля = ПараметрыОтчета.ДополнительныеПоля;
	Для Каждого ТекПоле Из Поля Цикл
		Если Не ТекПоле.Использование Тогда
			Продолжить;
		КонецЕсли;
		
		Область = Макет.ПолучитьОбласть("" + Строка + "|ДобавлПоле");
		Если Не ВыводПараметра И Не ВыводИтога Тогда
			Если ТипЗнч(Выборка) = Тип("Структура") Тогда
				Область.Параметры.ДобавлПоле = ТекПоле.Представление;
			Иначе
				// Получим итоговые данные для группировки в родительской строке.
				НаименованиеТекПоля = СтрЗаменить(ТекПоле.Поле, ".", "");
				
				Если Выборка.Родитель = Неопределено ИЛИ ЭтоЛицевойСчет Тогда
					Область.Параметры.ДобавлПоле = Выборка[НаименованиеТекПоля];
				Иначе
					Область.Параметры.ДобавлПоле = Выборка.Родитель[НаименованиеТекПоля];
				КонецЕсли;
			КонецЕсли;
			Если ТекПоле.Поле = "КоличествоПроживающих"
			 ИЛИ ТекПоле.Поле = "КоличествоЗарегистрированных" Тогда
				Область.ТекущаяОбласть.Формат = "ЧДЦ=";
			КонецЕсли;
		КонецЕсли;
		Если Не ТипЗнч(Выборка) = Тип("Структура") Тогда
			тмЦветФона = ПараметрыОтчета.мСоотвЦветов.Получить(Выборка.Уровень());
			Если НЕ тмЦветФона = Неопределено Тогда
				Область.Область().ЦветФона = тмЦветФона;
			КонецЕсли;
		КонецЕсли;
		Результат.Присоединить(Область);
	КонецЦикла;
	
КонецПроцедуры

// Выводит в документ строку макета с указанными колонками.
//
// Параметры:
//  Результат - ТабличныйДокумент, в который выводится область.
//  Макет        - ТабличныйДокумент, из которого берется область.
//  Строка       - Строка, содержащая имя области-строки.
//  Колонки      - Строка с именем выводимой колонки или
//                 Структура или СписокЗначений со списком имен колонок.
//  Выборка      - ВыборкаИзРезультатаЗапроса.
Процедура ВывестиСтроку1(ПараметрыОтчета,
						Результат,
						Макет,
						ППНомер, 
						Строка, 
						СоотвУровнейГруппировки,
						СпИтоговыхПолей, 
						СписокОбластейВывода, 
						СпУслугНачисления, 
						СпУслугОплаты, 
						СтрокаДерева = Неопределено,
						ТаблицаНачислений = Неопределено, 
						// Передадим в процедуру параметром текущий уровень группировки. По умолчанию значения уровня группировки = 0.
						//Итог = Ложь)
						Итог = Ложь, ТекущийУровеньГруппировки = 0)
	
	Для Каждого СтрокаУровень Из СтрокаДерева.Строки Цикл
		
		// ВЫВОД СТРОК С СУММАМИ НАЧИСЛЕНИЯ
		
		ИмяГруппировки = "";
		ОчиститьИтоговыеПоля = Ложь;
		
		Если Итог Тогда
			ОчиститьИтоговыеПоля = Истина;
		Иначе
			НомерГруппировки = СоотвУровнейГруппировки.Получить(СтрокаУровень.Уровень());
			НомерГруппировки = ?(НомерГруппировки = Неопределено, 0, НомерГруппировки);
			НомерГруппировки = СтрокаУровень.Уровень();
			ИмяГруппировки = "ЛицевойСчет";
			НайденнаяСтрока = ПараметрыОтчета.ТаблицаСтруктуры.Найти(НомерГруппировки, "УровеньГруппировки");
			Если Не НайденнаяСтрока = Неопределено Тогда
				ИмяГруппировки = НайденнаяСтрока.ИмяГруппировки;
			КонецЕсли;
			
			Попытка
				СтрокаУровень.ЭтоГруппаЛС = ?(НЕ ЗначениеЗаполнено(СтрокаУровень.ЭтоГруппаЛС), ЛОЖЬ, СтрокаУровень.ЭтоГруппаЛС);
				ЭтоГруппаЛС = СтрокаУровень.ЭтоГруппаЛС;
			Исключение
				ЭтоГруппаЛС = Ложь;
			КонецПопытки;
			
			Если НЕ ИмяГруппировки = "ЛицевойСчет" ИЛИ ЭтоГруппаЛС Тогда
				СтрокаУровень.ЛицевойсчетОписание = СтрокаУровень[ИмяГруппировки];
				ОчиститьИтоговыеПоля = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
		Если ОчиститьИтоговыеПоля Тогда
			Для Сч = 2 По СписокОбластейВывода.Количество()-2 Цикл
				ТекКолонка = СписокОбластейВывода[Сч];
				ТекЗначение = СпИтоговыхПолей.НайтиПоЗначению(ТекКолонка.Значение);
				Если ТекЗначение = Неопределено Тогда
					СтрокаУровень[ТекКолонка.Значение] = "";
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		// Будем выводить строку дерева только в том случае, если текущая группировка еще не была выведена.
		Если НЕ ТекущийУровеньГруппировки = СтрокаУровень.Уровень() Тогда
			ТекущийУровеньГруппировки = СтрокаУровень.Уровень();
			
			СтрокаУровень.ППНомер = ППНомер;
			
			// Выводим области строки с колонками "№", "ЛицевойСчет", "Задолженность на начало" 
			// и колонками, выбранными в настройках на закладке "Поля".
			ЭтоЛицевойСчет = (ИмяГруппировки = "ЛицевойСчет");
			ВывестиСтрокуОбщДанные(ПараметрыОтчета, Результат, Макет, Строка, СписокОбластейВывода, СтрокаУровень, , , , , ЭтоЛицевойСчет);
			
			// Выводим область строки с колонкой "Начисления всего".
			Если СпУслугНачисления.Количество() > 0 Тогда
				Область = Макет.ПолучитьОбласть(Строка + "|НачисленияВсего");
				// Получим итоговые данные для группировки в родительской строке.
				//Область.Параметры.Заполнить(СтрокаУровень);
				Если Не СтрокаУровень.Родитель = Неопределено Тогда
					Область.Параметры.Заполнить(СтрокаУровень.Родитель);
				Иначе
					Область.Параметры.Заполнить(СтрокаУровень);
				КонецЕсли;
				тмЦветФона = ПараметрыОтчета.мСоотвЦветов.Получить(СтрокаУровень.Уровень());
				Если НЕ тмЦветФона = Неопределено Тогда
					Область.Область().ЦветФона = тмЦветФона;
				КонецЕсли;
				Результат.Присоединить(Область);
			КонецЕсли;
			
			// Выводим области строки с начислениями по каждой услуге.
			// Если выводим строку подвала, то передаем ТаблицуНачисления с итогами по каждой услуге.
			ВывестиСтрокуПоУслугам(	ПараметрыОтчета,
			Результат,
			Макет,
			"ИзменяемаяЧасть", 
			"Начисления",
			СпУслугНачисления,
			?(Итог, Неопределено, СтрокаУровень),
			?(Итог, ТаблицаНачислений, Неопределено) );
			
			// Выводим область строки с колонками "Пени" и "Итого начислено".
			Область = Макет.ПолучитьОбласть(Строка + "|КолонкаИтог");
			
			// Получим итоговые данные для группировки в родительской строке.
			//Область.Параметры.Заполнить(СтрокаУровень);
			Если Не СтрокаУровень.Родитель = Неопределено Тогда
				Область.Параметры.Заполнить(СтрокаУровень.Родитель);
			Иначе
				Область.Параметры.Заполнить(СтрокаУровень);
			КонецЕсли;
			
			тмЦветФона = ПараметрыОтчета.мСоотвЦветов.Получить(СтрокаУровень.Уровень());
			Если НЕ тмЦветФона = Неопределено Тогда
				Область.Область().ЦветФона = тмЦветФона;
			КонецЕсли;
			Результат.Присоединить(Область);
			
			// Выводим разделитель колонок.
			Область = Макет.ПолучитьОбласть(Строка + "|РазделительКолонок");
			Результат.Присоединить(Область);
			
			// Выводим область строки с колонкой "Оплаты всего".
			Область = Макет.ПолучитьОбласть(Строка + "|ОплаченоВсего");
			
			// Получим итоговые данные для группировки в родительской строке.
			//Область.Параметры.Заполнить(СтрокаУровень);
			Если Не СтрокаУровень.Родитель = Неопределено Тогда
				Область.Параметры.Заполнить(СтрокаУровень.Родитель);
			Иначе
				Область.Параметры.Заполнить(СтрокаУровень);
			КонецЕсли;
			
			тмЦветФона = ПараметрыОтчета.мСоотвЦветов.Получить(СтрокаУровень.Уровень());
			Если НЕ тмЦветФона = Неопределено Тогда
				Область.Область().ЦветФона = тмЦветФона;
			КонецЕсли;
			Результат.Присоединить(Область);
			
			// Выводим области строки с оплатами по услугам.
			// Если выводим подвал, то передаем ТаблицуНачисления с итогами по каждой услуге.
			ВывестиСтрокуПоУслугам(	ПараметрыОтчета,
			Результат,
			Макет, 
			"ИзменяемаяЧастьОплат", 
			"Оплаты",
			СпУслугОплаты,
			?(Итог, Неопределено,СтрокаУровень),
			?(Итог, ТаблицаНачислений, Неопределено) );
			
			Область = Макет.ПолучитьОбласть(Строка + "|ОплаченоИтог");
			Область.Параметры.Заполнить(СтрокаУровень);
			тмЦветФона = ПараметрыОтчета.мСоотвЦветов.Получить(СтрокаУровень.Уровень());
			Если НЕ тмЦветФона = Неопределено Тогда
				Область.Область().ЦветФона = тмЦветФона;
			КонецЕсли;
			Результат.Присоединить(Область);
			
			// Выводим разделитель колонок.
			Область = Макет.ПолучитьОбласть(Строка + "|РазделительКолонок");
			Результат.Присоединить(Область);
			
			Если ПараметрыОтчета.Пени Тогда
				// Выводим области строки с колонкой "Всего на конец месяца".
				Область = Макет.ПолучитьОбласть(Строка + "|КолонкаВсегоОплат");
				Область.Параметры.Заполнить(СтрокаУровень);
				тмЦветФона = ПараметрыОтчета.мСоотвЦветов.Получить(СтрокаУровень.Уровень());
				Если НЕ тмЦветФона = Неопределено Тогда
					Область.Область().ЦветФона = тмЦветФона;
				КонецЕсли;
				Результат.Присоединить(Область);
			КонецЕсли;
		
			// Выводим области строки с колонкой "Сумма на конец месяца".
			Область = Макет.ПолучитьОбласть(Строка + "|КолонкаИтогОплат");
			
			// Получим итоговые данные для группировки в родительской строке.
			//Область.Параметры.Заполнить(СтрокаУровень);
			Если Не СтрокаУровень.Родитель = Неопределено Тогда
				Область.Параметры.Заполнить(СтрокаУровень.Родитель);
			Иначе
				Область.Параметры.Заполнить(СтрокаУровень);
			КонецЕсли;
			
			тмЦветФона = ПараметрыОтчета.мСоотвЦветов.Получить(СтрокаУровень.Уровень());
			Если НЕ тмЦветФона = Неопределено Тогда
				Область.Область().ЦветФона = тмЦветФона;
			КонецЕсли;
			Результат.Присоединить(Область);
			
			ППНомер = ППНомер + 1;
			
			// ВЫВОД СТРОК СО ЛЬГОТАМИ И ПЕРЕРАСЧЕТАМИ
			// Если установлен флаг "Льготы", то выводим строку со льготами. 
			СтрокаПараметра = "СтрокаПараметра";
			Если ПараметрыОтчета.Льгота Тогда
				ИмяПараметра = "Льготы";
				ВывестиСтрокуСПараметром( ПараметрыОтчета,
				Результат, 
				Макет, 
				СпУслугНачисления, 
				СпУслугОплаты, 
				ТаблицаНачислений, 
				СписокОбластейВывода, 
				СтрокаУровень, 
				ИмяПараметра );
			КонецЕсли;
			// Если установлен флаг "Перерасчеты", то выводим строку с перерасчетами.
			Если ПараметрыОтчета.Перерасчет Тогда
				ИмяПараметра = "Перерасчет";
				ВывестиСтрокуСПараметром( ПараметрыОтчета,
				Результат, 
				Макет, 
				СпУслугНачисления, 
				СпУслугОплаты, 
				ТаблицаНачислений, 
				СписокОбластейВывода, 
				СтрокаУровень, 
				ИмяПараметра );
			КонецЕсли;			
			Если ПараметрыОтчета.Пени Тогда
				ИмяПараметра = "Пени";
				ВывестиСтрокуСПараметром( ПараметрыОтчета,
				Результат, 
				Макет, 
				СпУслугНачисления, 
				СпУслугОплаты, 
				ТаблицаНачислений, 
				СписокОбластейВывода, 
				СтрокаУровень, 
				ИмяПараметра );
			КонецЕсли;
			
		КонецЕсли;
		
		// Выводим оставшиеся строки группировок.
		Если НЕ Итог Тогда
			Если СтрокаУровень.Строки.Количество() > 0 Тогда
				СтрокаПроверка = СтрокаУровень.Строки[0];
				Если СтрокаПроверка.Строки.Количество() > 0 Тогда
					ВывестиСтроку1(	ПараметрыОтчета,
									Результат,
									Макет, 
									ППНомер,
									"СтрокаТаблицы", 
									СоотвУровнейГруппировки, 
									СпИтоговыхПолей, 
									СписокОбластейВывода, 
									СпУслугНачисления,
									СпУслугОплаты, 
									// Передадим в процедуру текущий уровень группировки.
									//СтрокаУровень );
									СтрокаУровень, , , СтрокаУровень.Уровень());
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		// Выводим строку таблицы "ПодвалФактически" с итоговыми суммами. 
		Если Итог Тогда
			ВывестиПодвал( ПараметрыОтчета,
						   Результат, 
						   Макет, 
						   СпУслугНачисления, 
						   СпУслугОплаты,  
						   СписокОбластейВывода, 
						   СтрокаУровень,
						   ТаблицаНачислений );
		КонецЕсли;	
		
	КонецЦикла;
	
		// Выводим строку таблицы "Подвал".
	Если Итог Тогда
		
		СтрокаУровень = СтрокаДерева;
		
		// ВЫВОД СТРОК С СУММАМИ НАЧИСЛЕНИЯ
		
		ИмяГруппировки = "";
		ОчиститьИтоговыеПоля = Ложь;
		Если Итог Тогда
			ОчиститьИтоговыеПоля = Истина;
		Иначе
			НомерГруппировки = СоотвУровнейГруппировки.Получить(СтрокаУровень.Уровень());
			НомерГруппировки = ?(НомерГруппировки = Неопределено, 0, НомерГруппировки);
			Попытка
				СтрокаУровень.ЭтоГруппаЛС = ?(НЕ ЗначениеЗаполнено(СтрокаУровень.ЭтоГруппаЛС), ЛОЖЬ, СтрокаУровень.ЭтоГруппаЛС);
				ЭтоГруппаЛС = СтрокаУровень.ЭтоГруппаЛС;
			Исключение
				ЭтоГруппаЛС = Ложь;
			КонецПопытки;
		КонецЕсли;
		
		Если ОчиститьИтоговыеПоля Тогда
			Для Сч = 2 По СписокОбластейВывода.Количество()-2 Цикл
				ТекКолонка = СписокОбластейВывода[Сч];
				ТекЗначение = СпИтоговыхПолей.НайтиПоЗначению(ТекКолонка.Значение);
				Если ТекЗначение = Неопределено Тогда
					СтрокаУровень[ТекКолонка.Значение] = "";
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		СтрокаУровень.ППНомер = ППНомер;
		
		// Выводим области строки с колонками "№", "ЛицевойСчет", "Задолженность на начало" 
		// и колонками, выбранными в настройках на закладке "Поля".
		ВывестиСтрокуОбщДанные(ПараметрыОтчета, Результат, Макет, Строка, СписокОбластейВывода, СтрокаУровень);
		
		// Выводим область строки с колонкой "Начисления всего".
		Если СпУслугНачисления.Количество() > 0 Тогда
			Область = Макет.ПолучитьОбласть(Строка + "|НачисленияВсего");
			Область.Параметры.Заполнить(СтрокаУровень);
			тмЦветФона = ПараметрыОтчета.мСоотвЦветов.Получить(СтрокаУровень.Уровень());
			Если НЕ тмЦветФона = Неопределено Тогда
				Область.Область().ЦветФона = тмЦветФона;
			КонецЕсли;
			Результат.Присоединить(Область);
		КонецЕсли;
		
		// Выводим области строки с начислениями по каждой услуге.
		// Если выводим строку подвала, то передаем ТаблицуНачисления с итогами по каждой услуге.
		ВывестиСтрокуПоУслугам(	ПараметрыОтчета,
								Результат,
								Макет,
								"ИзменяемаяЧасть", 
								"Начисления",
								СпУслугНачисления,
								?(Итог, Неопределено, СтрокаУровень),
								?(Итог, ТаблицаНачислений, Неопределено) );
								
		// Выводим область строки с колонками "Пени" и "Итого начислено".
		Область = Макет.ПолучитьОбласть(Строка + "|КолонкаИтог");
		Область.Параметры.Заполнить(СтрокаУровень);
		тмЦветФона = ПараметрыОтчета.мСоотвЦветов.Получить(СтрокаУровень.Уровень());
		Если НЕ тмЦветФона = Неопределено Тогда
			Область.Область().ЦветФона = тмЦветФона;
		КонецЕсли;
		Результат.Присоединить(Область);
		
		// Выводим разделитель колонок.
		Область = Макет.ПолучитьОбласть(Строка + "|РазделительКолонок");
		Результат.Присоединить(Область);
		
		// Выводим область строки с колонкой "Оплаты всего".
		Область = Макет.ПолучитьОбласть(Строка + "|ОплаченоВсего");
		Область.Параметры.Заполнить(СтрокаУровень);
		тмЦветФона = ПараметрыОтчета.мСоотвЦветов.Получить(СтрокаУровень.Уровень());
		Если НЕ тмЦветФона = Неопределено Тогда
			Область.Область().ЦветФона = тмЦветФона;
		КонецЕсли;
		Результат.Присоединить(Область);
		
		// Выводим области строки с оплатами по услугам.
		// Если выводим подвал, то передаем ТаблицуНачисления с итогами по каждой услуге.
		ВывестиСтрокуПоУслугам(	ПараметрыОтчета,
								Результат,
								Макет, 
								"ИзменяемаяЧастьОплат", 
								"Оплаты",
								СпУслугОплаты,
								?(Итог, Неопределено,СтрокаУровень),
								?(Итог, ТаблицаНачислений, Неопределено) );
								
		Область = Макет.ПолучитьОбласть(Строка + "|ОплаченоИтог");
		Область.Параметры.Заполнить(СтрокаУровень);
		тмЦветФона = ПараметрыОтчета.мСоотвЦветов.Получить(СтрокаУровень.Уровень());
		Если НЕ тмЦветФона = Неопределено Тогда
			Область.Область().ЦветФона = тмЦветФона;
		КонецЕсли;
		Результат.Присоединить(Область);
		
		// Выводим разделитель колонок.
		Область = Макет.ПолучитьОбласть(Строка + "|РазделительКолонок");
		Результат.Присоединить(Область);
		
		Если ПараметрыОтчета.Пени Тогда
			// Выводим области строки с колонкой "Всего на конец месяца".
			Область = Макет.ПолучитьОбласть(Строка + "|КолонкаВсегоОплат");
			Область.Параметры.Заполнить(СтрокаУровень);
			тмЦветФона = ПараметрыОтчета.мСоотвЦветов.Получить(СтрокаУровень.Уровень());
			Если НЕ тмЦветФона = Неопределено Тогда
				Область.Область().ЦветФона = тмЦветФона;
			КонецЕсли;
			Результат.Присоединить(Область);
		КонецЕсли;
		
		// Выводим области строки с колонкой "Сумма на конец месяца".
		Область = Макет.ПолучитьОбласть(Строка + "|КолонкаИтогОплат");
		Область.Параметры.Заполнить(СтрокаУровень);
		тмЦветФона = ПараметрыОтчета.мСоотвЦветов.Получить(СтрокаУровень.Уровень());
		Если НЕ тмЦветФона = Неопределено Тогда
			Область.Область().ЦветФона = тмЦветФона;
		КонецЕсли;
		Результат.Присоединить(Область);
		
		ППНомер = ППНомер + 1;
		
		// ВЫВОД СТРОК СО ЛЬГОТАМИ И ПЕРЕРАСЧЕТАМИ
		// Если установлен флаг "Льготы", то выводим строку со льготами. 
		СтрокаПараметра = "СтрокаПараметра";
		Если ПараметрыОтчета.Льгота Тогда
			ИмяПараметра = "Льготы";
			ВывестиСтрокуСПараметром( ПараметрыОтчета,
									  Результат, 
									  Макет, 
									  СпУслугНачисления, 
									  СпУслугОплаты, 
									  ТаблицаНачислений, 
									  СписокОбластейВывода, 
									  СтрокаУровень, 
									  ИмяПараметра );
		КонецЕсли;
		// Если установлен флаг "Перерасчеты", то выводим строку с перерасчетами.
		Если ПараметрыОтчета.Перерасчет Тогда
			ИмяПараметра = "Перерасчет";
			ВывестиСтрокуСПараметром( ПараметрыОтчета,
									  Результат, 
									  Макет, 
									  СпУслугНачисления, 
									  СпУслугОплаты, 
									  ТаблицаНачислений, 
									  СписокОбластейВывода, 
									  СтрокаУровень, 
									  ИмяПараметра );
		КонецЕсли;			
		
		// Если установлен флаг "Пени", то выводим строку с пени.
		Если ПараметрыОтчета.Пени Тогда
			ИмяПараметра = "Пени";
			ВывестиСтрокуСПараметром( ПараметрыОтчета,
									  Результат, 
									  Макет, 
									  СпУслугНачисления, 
									  СпУслугОплаты, 
									  ТаблицаНачислений, 
									  СписокОбластейВывода, 
									  СтрокаУровень, 
									  ИмяПараметра );
		КонецЕсли;			

		// Выводим оставшиеся строки группировок.
		Если НЕ Итог Тогда
			Если СтрокаУровень.Строки.Количество() > 0 Тогда
				СтрокаПроверка = СтрокаУровень.Строки[0];
				Если СтрокаПроверка.Строки.Количество() > 0 Тогда
					ВывестиСтроку1(	ПараметрыОтчета,
									Результат,
									Макет, 
									ППНомер,
									"СтрокаТаблицы", 
									СоотвУровнейГруппировки, 
									СпИтоговыхПолей, 
									СписокОбластейВывода, 
									СпУслугНачисления,
									СпУслугОплаты, 
									СтрокаУровень );
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		ВывестиПодвал(ПараметрыОтчета,
					  Результат, 
					  Макет, 
					  СпУслугНачисления, 
					  СпУслугОплаты,  
					  СписокОбластейВывода, 
					  СтрокаУровень,
					  ТаблицаНачислений );
	КонецЕсли;
	
КонецПроцедуры

// Подсчитывает итоговые суммы количественных полей, выбранных в настройках
// на закладке "Поля".
Процедура ПересчитатьИтоговыеПоля(СтрокаДерева, СпИтоговыхПолей, СписокОбластейВывода, ТекущийЛС = "")

	Для Каждого ТекСтрока Из СтрокаДерева.Строки Цикл
		
		Если ТекСтрока.Строки.Количество() > 0 Тогда
			ПересчитатьИтоговыеПоля(ТекСтрока, СпИтоговыхПолей, СписокОбластейВывода);
			Для Каждого ТекКолонка Из СпИтоговыхПолей Цикл
				ТекЗначение = СписокОбластейВывода.НайтиПоЗначению(ТекКолонка.Значение);
				Если НЕ ТекЗначение = Неопределено Тогда
					ТекСтрока[ТекЗначение.Значение] = ТекСтрока.Строки.Итог(ТекЗначение.Значение);
				КонецЕсли;
			КонецЦикла;
		Иначе
			Если ТекущийЛС = ТекСтрока.ЛицевойСчетОписание Тогда
				Для Каждого ТекКолонка Из СпИтоговыхПолей Цикл
					ТекЗначение = СписокОбластейВывода.НайтиПоЗначению(ТекКолонка.Значение);
					Если НЕ ТекЗначение = Неопределено Тогда
						ТекСтрока[ТекЗначение.Значение] = 0;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			ТекущийЛС = ТекСтрока.ЛицевойСчетОписание;
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры // ПересчитатьИтоговыеПоля()

// Выводит строку "Подвал".
//
Процедура ВывестиПодвал(ПараметрыОтчета, Результат, Макет, СпУслугНачисления, СпУслугОплаты, СписокОбластейВывода, СтрокаУровень, ТаблицаНачислений)
	
	Итог = Истина;
	
	СтрокаФактически = "Подвал";
	
	// Выводим область строки с фиксированными колонками и колонками, выбранными в настройках
	// на закладке "Поля".
	ВывестиСтрокуОбщДанные(ПараметрыОтчета, Результат, Макет, СтрокаФактически, СписокОбластейВывода, СтрокаУровень, , , , Истина);
	
	// Выводим область строки с колонкой "Начисления всего".
	Если СпУслугНачисления.Количество() > 0 Тогда
		Область = Макет.ПолучитьОбласть(СтрокаФактически + "|НачисленияВсего");
		тмЦветФона = ПараметрыОтчета.мСоотвЦветов.Получить(СтрокаУровень.Уровень());
		Если НЕ тмЦветФона = Неопределено Тогда
			Область.Область().ЦветФона = тмЦветФона;
		КонецЕсли;
		Результат.Присоединить(Область);
	КонецЕсли;
	
	// Выводим область строки с начислениями по услугам.
	ВывестиСтрокуПоУслугам( ПараметрыОтчета,
							Результат,
							Макет,
							"ИзменяемаяЧасть", 
							"Начисления",
							СпУслугНачисления,
							Неопределено,
							ТаблицаНачислений,
							, ,
							Истина );
	
	// Выводим область строки с колонкой "Начислено итого".
	Область = Макет.ПолучитьОбласть(СтрокаФактически + "|КолонкаИтог");
	тмЦветФона = ПараметрыОтчета.мСоотвЦветов.Получить(СтрокаУровень.Уровень());
	Если НЕ тмЦветФона = Неопределено Тогда
		Область.Область().ЦветФона = тмЦветФона;
	КонецЕсли;
	Результат.Присоединить(Область);
	
	// Выводим разделитель колонок.
	Область = Макет.ПолучитьОбласть(СтрокаФактически + "|РазделительКолонок");
	Результат.Присоединить(Область);
	
	// Выводим область строка с колонкой "Оплаты всего".
	Область = Макет.ПолучитьОбласть(СтрокаФактически + "|ОплаченоВсего");
	тмЦветФона = ПараметрыОтчета.мСоотвЦветов.Получить(СтрокаУровень.Уровень());
	Если НЕ тмЦветФона = Неопределено Тогда
		Область.Область().ЦветФона = тмЦветФона;
	КонецЕсли;
	Результат.Присоединить(Область);
	
	// Выводим область строки с оплатами по услугам.
	ВывестиСтрокуПоУслугам( ПараметрыОтчета,
							Результат,
							Макет, 
							"ИзменяемаяЧастьОплат", 
							"Оплаты",
							СпУслугОплаты,
							Неопределено,
							ТаблицаНачислений,
							, , 
							Истина );
							
	Область = Макет.ПолучитьОбласть(СтрокаФактически + "|ОплаченоИтог");
	тмЦветФона = ПараметрыОтчета.мСоотвЦветов.Получить(СтрокаУровень.Уровень());
	Если НЕ тмЦветФона = Неопределено Тогда
		Область.Область().ЦветФона = тмЦветФона;
	КонецЕсли;
	Результат.Присоединить(Область);
	
	// Выводим разделитель колонок.
	Область = Макет.ПолучитьОбласть(СтрокаФактически + "|РазделительКолонок");
	Результат.Присоединить(Область);
	
	Если ПараметрыОтчета.Пени Тогда
		// Выводим область строки с колонкой "Сумма на конец месяца".
		Область = Макет.ПолучитьОбласть(СтрокаФактически + "|КолонкаВсегоОплат");
		тмЦветФона = ПараметрыОтчета.мСоотвЦветов.Получить(СтрокаУровень.Уровень());
		Если НЕ тмЦветФона = Неопределено Тогда
			Область.Область().ЦветФона = тмЦветФона;
		КонецЕсли;
		Результат.Присоединить(Область);
	КонецЕсли;
	
	// Выводим область строки с колонкой "Сумма на конец месяца".
	Область = Макет.ПолучитьОбласть(СтрокаФактически + "|КолонкаИтогОплат");
	тмЦветФона = ПараметрыОтчета.мСоотвЦветов.Получить(СтрокаУровень.Уровень());
	Если НЕ тмЦветФона = Неопределено Тогда
		Область.Область().ЦветФона = тмЦветФона;
	КонецЕсли;
	Результат.Присоединить(Область);
	
КонецПроцедуры // ВывестиПодвал()

// Выводит строку с параметром. 
// Нужный параметр определяется через перменную ИмяПараметра.
Процедура ВывестиСтрокуСПараметром(ПараметрыОтчета, Результат, Макет, СпУслугНачисления, СпУслугОплаты, ТаблицаНачислений, СписокОбластейВывода, СтрокаУровень, ИмяПараметра)

	СтрокаПараметра = "СтрокаПараметра";
	Итог = Ложь;
	
	ВывестиСтрокуОбщДанные(ПараметрыОтчета, Результат, Макет, СтрокаПараметра, СписокОбластейВывода, СтрокаУровень, , Истина, ИмяПараметра);
			
	Если СпУслугНачисления.Количество() > 0 Тогда
		Область = Макет.ПолучитьОбласть(СтрокаПараметра + "|НачисленияВсего");
		Если ИмяПараметра =  "Льготы" Тогда
			Область.Параметры.СуммаВсего = СтрокаУровень.СуммаЛьготы;
		ИначеЕсли ИмяПараметра = "Пени" Тогда
			Область.Параметры.СуммаВсего = СтрокаУровень.СуммаПени;
		ИначеЕсли ИмяПараметра = "Перерасчет" Тогда
			Область.Параметры.СуммаВсего = СтрокаУровень.СуммаПерерасчета;
		КонецЕсли;	
		тмЦветФона = ПараметрыОтчета.мСоотвЦветов.Получить(СтрокаУровень.Уровень());
		Если НЕ тмЦветФона = Неопределено Тогда
			Область.Область().ЦветФона = тмЦветФона;
		КонецЕсли;
		Результат.Присоединить(Область);
	КонецЕсли;
			
	ВывестиСтрокуПоУслугам(	ПараметрыОтчета,
							Результат,
							Макет,
							"ИзменяемаяЧасть", 
							"Начисления",
							СпУслугНачисления,
							?(Итог, Неопределено, СтрокаУровень),
							?(Итог, ТаблицаНачислений, Неопределено),
							Истина,
							ИмяПараметра );	
									
	Область = Макет.ПолучитьОбласть(СтрокаПараметра + "|КолонкаИтог");
	тмЦветФона = ПараметрыОтчета.мСоотвЦветов.Получить(СтрокаУровень.Уровень());
	Если НЕ тмЦветФона = Неопределено Тогда
		Область.Область().ЦветФона = тмЦветФона;
	КонецЕсли;
	Результат.Присоединить(Область);
							
	Область = Макет.ПолучитьОбласть(СтрокаПараметра + "|РазделительКолонок");
	Результат.Присоединить(Область);
	
	Область = Макет.ПолучитьОбласть(СтрокаПараметра + "|ОплаченоВсего");
	тмЦветФона = ПараметрыОтчета.мСоотвЦветов.Получить(СтрокаУровень.Уровень());
	Если НЕ тмЦветФона = Неопределено Тогда
		Область.Область().ЦветФона = тмЦветФона;
	КонецЕсли;
	Если ИмяПараметра = "Пени" Тогда	// Оформляем пунктиром строку с оплаченными пенями.
		ТипЛинии = ТипЛинииЯчейкиТабличногоДокумента.ЧастыйПунктир;
		Область.Область().ГраницаСверху = Новый Линия(ТипЛинии, 1);
		Область.Параметры.Заполнить(СтрокаУровень);
	КонецЕсли;
	Результат.Присоединить(Область);			
			
	ВывестиСтрокуПоУслугам(	ПараметрыОтчета,
							Результат,
							Макет, 
							"ИзменяемаяЧастьОплат", 
							"Оплаты",
							СпУслугОплаты,
							?(Итог, Неопределено, СтрокаУровень),
							?(Итог, ТаблицаНачислений, Неопределено),
							Истина,
							ИмяПараметра );						
									
							
							
	Область = Макет.ПолучитьОбласть(СтрокаПараметра + "|ОплаченоИтог");
	тмЦветФона = ПараметрыОтчета.мСоотвЦветов.Получить(СтрокаУровень.Уровень());
	Если НЕ тмЦветФона = Неопределено Тогда
		Область.Область().ЦветФона = тмЦветФона;
	КонецЕсли;
	
	Результат.Присоединить(Область);
	
	Область = Макет.ПолучитьОбласть(СтрокаПараметра + "|РазделительКолонок");
	Результат.Присоединить(Область);
	
	Если ПараметрыОтчета.Пени Тогда
		Область = Макет.ПолучитьОбласть(СтрокаПараметра + "|КолонкаВсегоОплат");
		тмЦветФона = ПараметрыОтчета.мСоотвЦветов.Получить(СтрокаУровень.Уровень());
		Если НЕ тмЦветФона = Неопределено Тогда
			Область.Область().ЦветФона = тмЦветФона;
		КонецЕсли;
		Если ИмяПараметра = "Пени" Тогда	// Оформляем пунктиром строку с пенями.
			ТипЛинии = ТипЛинииЯчейкиТабличногоДокумента.ЧастыйПунктир;
			Область.Область().ГраницаСверху = Новый Линия(ТипЛинии, 1);
			Область.Параметры.Заполнить(СтрокаУровень);
		КонецЕсли;
		
		Результат.Присоединить(Область);
	КонецЕсли;
	
	Область = Макет.ПолучитьОбласть(СтрокаПараметра + "|КолонкаИтогОплат");
	тмЦветФона = ПараметрыОтчета.мСоотвЦветов.Получить(СтрокаУровень.Уровень());
	Если НЕ тмЦветФона = Неопределено Тогда
		Область.Область().ЦветФона = тмЦветФона;
	КонецЕсли;
	Результат.Присоединить(Область);
		
КонецПроцедуры // ВывестиСтрокуСПараметром()

// Выводит в документ строку макета с указанными колонками.
//
// Параметры:
//  Результат - ТабличныйДокумент, в который выводится область.
//  Макет        - ТабличныйДокумент, из которого берется область.
//  Строка       - Строка, содержащая имя области-строки.
//  Колонки      - Строка с именем выводимой колонки или
//                 Структура или СписокЗначений со списком имен колонок.
//  Выборка      - ВыборкаИзРезультатаЗапроса.
Процедура ВывестиСтрокуПоУслугам(ПараметрыОтчета,
								 Результат, 
								 Макет, 
								 Колонка,
								 ТипСуммы,
								 СпУслуг, 
								 СтрокаДерева = Неопределено,
								 ТаблицаНачислений = Неопределено, 
								 ВыводПараметра = Ложь,
								 ИмяПараметра = Неопределено,
								 ВыводИтога = Ложь )
								 
	// Вывод подвала. 
	// В зависимости от значения переменной "ВыводИтога" выводим строку с фактическими 
	// или итоговыми начислениями.
	Если СтрокаДерева = Неопределено Тогда
		Для Каждого ТекСтрока Из СпУслуг Цикл
			Если Не ВыводИтога Тогда
				Область = Макет.ПолучитьОбласть("ПодвалСтрока|" + Колонка);
			Иначе
				Область = Макет.ПолучитьОбласть("Подвал|" + Колонка);
			КонецЕсли;	
			СтрокаНачислений = ТаблицаНачислений.Найти(ТекСтрока.Значение, "Услуга");
			Если НЕ СтрокаНачислений = Неопределено Тогда
				Область.Параметры.Заполнить(СтрокаНачислений);
			КонецЕсли;
			Результат.Присоединить(Область);
		КонецЦикла;
		
	// Вывод строки с параметром(т.е. со льготами или перерасчетами) или строки с 
	// с итоговыми начислениями.
	ИначеЕсли ВыводПараметра Или ВыводИтога Тогда
	    // область колонок начисления.
		Если ТипСуммы = "Начисления" Тогда
			Для Каждого  ТекСтрока Из СпУслуг Цикл
				Если ВыводИтога Тогда
					Область = Макет.ПолучитьОбласть("Подвал|" + Колонка);
				Иначе	
					Область = Макет.ПолучитьОбласть("СтрокаПараметра|" + Колонка);
				КонецЕсли;
				
				// Подсчитываем итоги начисления по каждой услуге.
				СуммаПараметра = 0;
				
				// Получим итоговые данные для группировки в родительской строке.
				Если Не СтрокаДерева.Родитель = Неопределено Тогда
					СтрокиУслуги = СтрокаДерева.Родитель.Строки.НайтиСтроки(Новый Структура("Услуга", ТекСтрока.Значение), Истина);
				Иначе
					СтрокиУслуги = СтрокаДерева.Строки.НайтиСтроки(Новый Структура("Услуга", ТекСтрока.Значение), Истина);
				КонецЕсли;
				// Возьмем те строки, где ППНомер = 0.
				врСтрокиУслуги = Новый Массив;
				Для Каждого СтрокаМассива Из СтрокиУслуги Цикл
					Если СтрокаМассива.ППНомер = 0 Тогда
						врСтрокиУслуги.Добавить(СтрокаМассива);
					КонецЕсли;
				КонецЦикла;
				СтрокиУслуги = врСтрокиУслуги;
				
				Для Каждого ТекСтрокаУслуги Из СтрокиУслуги Цикл
					Если ИмяПараметра = "Льготы" Тогда
						СуммаПараметра = СуммаПараметра + ТекСтрокаУслуги.СуммаЛьготы;
					ИначеЕсли ИмяПараметра = "Пени" Тогда  
						СуммаПараметра = СуммаПараметра + ТекСтрокаУслуги.СуммаПени;
					ИначеЕсли ИмяПараметра = "Перерасчет" Тогда
						СуммаПараметра = СуммаПараметра + ТекСтрокаУслуги.СуммаПерерасчета;
					КонецЕсли;
				КонецЦикла;
				
				Область = Макет.ПолучитьОбласть("СтрокаПараметра|" + Колонка);
				тмЦветФона = ПараметрыОтчета.мСоотвЦветов.Получить(СтрокаДерева.Уровень());
				Если НЕ тмЦветФона = Неопределено Тогда
					Область.Область().ЦветФона = тмЦветФона;
				КонецЕсли;
				Область.Параметры.СуммаУслуга = СуммаПараметра;
				Результат.Присоединить(Область);
			КонецЦикла;
			
		// область колонок оплат.
		Иначе
			Для Каждого ТекСтрока Из СпУслуг Цикл
				СуммаОплатыПени = 0;
				ИтогоОплачено = 0;
				
				// Получим итоговые данные для группировки в родительской строке.
				//СтрокиУслуги = СтрокаДерева.Строки.НайтиСтроки(Новый Структура("Услуга", ТекСтрока.Значение), Истина);
				Если Не СтрокаДерева.Родитель = Неопределено Тогда
					СтрокиУслуги = СтрокаДерева.Родитель.Строки.НайтиСтроки(Новый Структура("Услуга", ТекСтрока.Значение), Истина);
				Иначе
					СтрокиУслуги = СтрокаДерева.Строки.НайтиСтроки(Новый Структура("Услуга", ТекСтрока.Значение), Истина);
				КонецЕсли;
				// возьмем те строки, где ППНомер = 0.
				врСтрокиУслуги = Новый Массив;
				Для Каждого СтрокаМассива Из СтрокиУслуги Цикл
					Если СтрокаМассива.ППНомер = 0 Тогда
						врСтрокиУслуги.Добавить(СтрокаМассива);
					КонецЕсли;
				КонецЦикла;
				СтрокиУслуги = врСтрокиУслуги;
				
				Для Каждого ТекСтрокаУслуги Из СтрокиУслуги Цикл
					Если ИмяПараметра = "Пени" Тогда
						СуммаОплатыПени = СуммаОплатыПени + ТекСтрокаУслуги.СуммаОплатыПени;
						ИтогоОплачено =  ИтогоОплачено + ТекСтрокаУслуги.ИтогоОплачено;
					КонецЕсли;	
				КонецЦикла;	
				
				Область = Макет.ПолучитьОбласть("СтрокаПараметра|" + Колонка);
				Область.Параметры.СуммаОплатыПени = СуммаОплатыПени;
				тмЦветФона = ПараметрыОтчета.мСоотвЦветов.Получить(СтрокаДерева.Уровень());
				Если НЕ тмЦветФона = Неопределено Тогда
					Область.Область().ЦветФона = тмЦветФона;
				КонецЕсли;
				Если ИмяПараметра = "Пени" Тогда
					ТипЛинии = ТипЛинииЯчейкиТабличногоДокумента.ЧастыйПунктир;
					Область.Область().ГраницаСверху = Новый Линия(ТипЛинии, 1);	
				КонецЕсли;
				Результат.Присоединить(Область);
			КонецЦикла;
		КонецЕсли;
		
	// Вывод остальные строки начисления.
	Иначе
	    // область колонок начисления.
		Если ТипСуммы = "Начисления" Тогда
			Для Каждого ТекСтрока Из СпУслуг Цикл
				
				// Подсчитываем итоги начисления по каждой услуге.
				СуммаНачисления = 0;
				СуммаЛьготы = 0;
				
				// Получим итоговые данные для группировки в родительской строке.
				//СтрокиУслуги = СтрокаДерева.Строки.НайтиСтроки(Новый Структура("Услуга", ТекСтрока.Значение), Истина);
				Если Не СтрокаДерева.Родитель = Неопределено Тогда
					СтрокиУслуги = СтрокаДерева.Родитель.Строки.НайтиСтроки(Новый Структура("Услуга", ТекСтрока.Значение), Истина);   //*************************
				Иначе
					СтрокиУслуги = СтрокаДерева.Строки.НайтиСтроки(Новый Структура("Услуга", ТекСтрока.Значение), Истина);   //*************************
				КонецЕсли;
				// возьмем те строки, где ППНомер = 0.
				врСтрокиУслуги = Новый Массив;
				Для Каждого СтрокаМассива Из СтрокиУслуги Цикл
					Если СтрокаМассива.ППНомер = 0 Тогда
						врСтрокиУслуги.Добавить(СтрокаМассива);
					КонецЕсли;
				КонецЦикла;
				СтрокиУслуги = врСтрокиУслуги;
				
				Для Каждого ТекСтрокаУслуги Из СтрокиУслуги Цикл
					СуммаНачисления = СуммаНачисления + ТекСтрокаУслуги.СуммаНачисления;
					СуммаЛьготы = СуммаЛьготы + ТекСтрокаУслуги.СуммаЛьготы;
				КонецЦикла;
				
				Область = Макет.ПолучитьОбласть("СтрокаТаблицы|" + Колонка);
				тмЦветФона = ПараметрыОтчета.мСоотвЦветов.Получить(СтрокаДерева.Уровень());
				Если НЕ тмЦветФона = Неопределено Тогда
					Область.Область().ЦветФона = тмЦветФона;
				КонецЕсли;
				Область.Параметры.СуммаНачисления = СуммаНачисления;
				Результат.Присоединить(Область);
			КонецЦикла;
		Иначе
			
			// область колонок оплат.
			Для Каждого ТекСтрока Из СпУслуг Цикл
				
				// Подсчитываем итоги оплат по каждой услуге.
				СуммаОплаты = 0;
				
				// Получим итоговые данные для группировки в родительской строке.
				//СтрокиУслуги = СтрокаДерева.Строки.НайтиСтроки(Новый Структура("Услуга", ТекСтрока.Значение), Истина);
				Если Не СтрокаДерева.Родитель = Неопределено Тогда
					СтрокиУслуги = СтрокаДерева.Родитель.Строки.НайтиСтроки(Новый Структура("Услуга", ТекСтрока.Значение), Истина);
				Иначе
					СтрокиУслуги = СтрокаДерева.Строки.НайтиСтроки(Новый Структура("Услуга", ТекСтрока.Значение), Истина);
				КонецЕсли;
				// возьмем те строки, где ППНомер = 0.
				врСтрокиУслуги = Новый Массив;
				Для Каждого СтрокаМассива Из СтрокиУслуги Цикл
					Если СтрокаМассива.ППНомер = 0 Тогда
						врСтрокиУслуги.Добавить(СтрокаМассива);
					КонецЕсли;
				КонецЦикла;
				СтрокиУслуги = врСтрокиУслуги;
				
				Для Каждого ТекСтрокаУслуги Из СтрокиУслуги Цикл
					СуммаОплаты = СуммаОплаты + ТекСтрокаУслуги.СуммаОплаты;
				КонецЦикла;
				Область = Макет.ПолучитьОбласть("СтрокаТаблицы|" + Колонка);
				тмЦветФона = ПараметрыОтчета.мСоотвЦветов.Получить(СтрокаДерева.Уровень());
				Если НЕ тмЦветФона = Неопределено Тогда
					Область.Область().ЦветФона = тмЦветФона;
				КонецЕсли;
				Область.Параметры.СуммаОплаты = СуммаОплаты;
				Результат.Присоединить(Область);
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

#Область ПрограммныйИнтерфейс

// Процедура выводит данные коллекции в табличный документ.
// Используется, если вывести результат надо через обычный макет.
//
// Параметры:
//  ПараметрыОтчета - Структура - Структура параметров отчета;
//  Таблица         - ТаблицаЗначений - Таблица результата компоновки отчета;
//  Дерево          - ДеревоЗначений - Дерево результата компоновки отчета;
//  Результат       - ТабличныйДокумент - Табличный документ с результатом отчета.
//
Процедура ВывестиДанныеКоллекцииВДокумент(ПараметрыОтчета, Таблица = Неопределено, Дерево = Неопределено, Результат)
	
	Результат = Новый ТабличныйДокумент;
	
	ТаблицаНачислений = Таблица;
	
	ОтчетОбъект = РеквизитФормыВЗначение("Отчет");
	Макет = ОтчетОбъект.ПолучитьМакет("ВедомостьПоРассрочкам");
	
	// ВЫВОД СТРОК НАЧИСЛЕНИЙ ПО РАССРОЧКАМ
	ОбластьЗаголовка   = Макет.ПолучитьОбласть("Заголовок");
	ОбластьАдресЗдания = Макет.ПолучитьОбласть("АдресЗдания");
	
	ОбластьУслугаШапка         = Макет.ПолучитьОбласть("Шапка|Услуга");
	ОбластьФиксПолеШапка       = Макет.ПолучитьОбласть("Шапка|ФиксПоле");
	ОбластьСуммыОснованияШапка = Макет.ПолучитьОбласть("Шапка|СуммыОснования");
	ОбластьДолгНаНачалоШапка   = Макет.ПолучитьОбласть("Шапка|ДолгНаНачало");
	ОбластьНачисленоШапка      = Макет.ПолучитьОбласть("Шапка|Начислено");
	ОбластьОплаченоШапка       = Макет.ПолучитьОбласть("Шапка|Оплачено");
	ОбластьПредоплатаШапка     = Макет.ПолучитьОбласть("Шапка|Предоплата");
	ОбластьДолгНаКонецШапка    = Макет.ПолучитьОбласть("Шапка|ДолгНаКонец");
	
	ОбластьГраница        = Макет.ПолучитьОбласть("СтрокаТаблицы|Граница");
	ОбластьНомерСтроки    = Макет.ПолучитьОбласть("СтрокаТаблицы|НомерСтроки");
	ОбластьЗдание         = Макет.ПолучитьОбласть("СтрокаТаблицы|Здание");
	ОбластьЛицевойСчет    = Макет.ПолучитьОбласть("СтрокаТаблицы|ЛицевойСчет");
	ОбластьДобавлПоле     = Макет.ПолучитьОбласть("СтрокаТаблицы|ДобавлПоле");
	ОбластьУслуга         = Макет.ПолучитьОбласть("СтрокаТаблицы|Услуга");
	ОбластьФиксПоле       = Макет.ПолучитьОбласть("СтрокаТаблицы|ФиксПоле");
	ОбластьСуммыОснования = Макет.ПолучитьОбласть("СтрокаТаблицы|СуммыОснования");
	ОбластьДолгНаНачало   = Макет.ПолучитьОбласть("СтрокаТаблицы|ДолгНаНачало");
	ОбластьНачислено      = Макет.ПолучитьОбласть("СтрокаТаблицы|Начислено");
	ОбластьОплачено       = Макет.ПолучитьОбласть("СтрокаТаблицы|Оплачено");
	ОбластьПредоплата     = Макет.ПолучитьОбласть("СтрокаТаблицы|Предоплата");
	ОбластьДолгНаКонец    = Макет.ПолучитьОбласть("СтрокаТаблицы|ДолгНаКонец");
	
	ОбластьНомерСтрокиПустая = Макет.ПолучитьОбласть("Пустая|НомерСтроки");
	ОбластьЛицевойСчетПустая = Макет.ПолучитьОбласть("Пустая|ЛицевойСчет");
	ОбластьЗданиеПустая      = Макет.ПолучитьОбласть("Пустая|Здание");
	ОбластьДобавлПолеПустая  = Макет.ПолучитьОбласть("Пустая|ДобавлПоле");
	
	ОбластьГраницаПодвал        = Макет.ПолучитьОбласть("Подвал|Граница");
	ОбластьНомерСтрокиПодвал    = Макет.ПолучитьОбласть("Подвал|НомерСтроки");
	ОбластьЗданиеПодвал         = Макет.ПолучитьОбласть("Подвал|Здание");
	ОбластьЛицевойСчетПодвал    = Макет.ПолучитьОбласть("Подвал|ЛицевойСчет");
	ОбластьДобавлПолеПодвал     = Макет.ПолучитьОбласть("Подвал|ДобавлПоле");
	ОбластьУслугаПодвал         = Макет.ПолучитьОбласть("Подвал|Услуга");
	ОбластьФиксПолеПодвал       = Макет.ПолучитьОбласть("Подвал|ФиксПоле");
	ОбластьСуммыОснованияПодвал = Макет.ПолучитьОбласть("Подвал|СуммыОснования");
	ОбластьДолгНаНачалоПодвал   = Макет.ПолучитьОбласть("Подвал|ДолгНаНачало");
	ОбластьНачисленоПодвал      = Макет.ПолучитьОбласть("Подвал|Начислено");
	ОбластьОплаченоПодвал       = Макет.ПолучитьОбласть("Подвал|Оплачено");
	ОбластьПредоплатаПодвал     = Макет.ПолучитьОбласть("Подвал|Предоплата");
	ОбластьДолгНаКонецПодвал    = Макет.ПолучитьОбласть("Подвал|ДолгНаКонец");
	
	ОбластьГраницаПодвалПустая        = Макет.ПолучитьОбласть("ПодвалПустая|Граница");
	ОбластьНомерСтрокиПодвалПустая    = Макет.ПолучитьОбласть("ПодвалПустая|НомерСтроки");
	ОбластьЗданиеПодвалПустая         = Макет.ПолучитьОбласть("ПодвалПустая|Здание");
	ОбластьЛицевойСчетПодвалПустая    = Макет.ПолучитьОбласть("ПодвалПустая|ЛицевойСчет");
	ОбластьДобавлПолеПодвалПустая     = Макет.ПолучитьОбласть("ПодвалПустая|ДобавлПоле");
	ОбластьУслугаПодвалПустая         = Макет.ПолучитьОбласть("ПодвалПустая|Услуга");
	ОбластьФиксПолеПодвалПустая       = Макет.ПолучитьОбласть("ПодвалПустая|ФиксПоле");
	ОбластьСуммыОснованияПодвалПустая = Макет.ПолучитьОбласть("ПодвалПустая|СуммыОснования");
	ОбластьДолгНаНачалоПодвалПустая   = Макет.ПолучитьОбласть("ПодвалПустая|ДолгНаНачало");
	ОбластьНачисленоПодвалПустая      = Макет.ПолучитьОбласть("ПодвалПустая|Начислено");
	ОбластьОплаченоПодвалПустая       = Макет.ПолучитьОбласть("ПодвалПустая|Оплачено");
	ОбластьПредоплатаПодвалПустая     = Макет.ПолучитьОбласть("ПодвалПустая|Предоплата");
	ОбластьДолгНаКонецПодвалПустая    = Макет.ПолучитьОбласть("ПодвалПустая|ДолгНаКонец");
	
	тмДокумент = Новый ТабличныйДокумент;

	// Получает список областей вывода печатной формы, предшествующих области "НачисленияВсего", из которых
	// "Граница", "ФиксированнаяЧасть" и "НачальноеСальдо" являются обязательными. Остальные области
	// выводятся взависимости от выбранных полей в настройках на закладке "Поля".
	СписокОбластейВывода = Новый СписокЗначений();
	СписокОбластейВывода = ПолучитьСписокОбластейДляВывода(ПараметрыОтчета);
	
	// ЗАГОЛОВОК
	Если ПараметрыОтчета.ВыводитьЗаголовок Тогда
		ОбластьЗаголовка.Параметры.Заголовок = ПолучитьТекстЗаголовка(ПараметрыОтчета);
		Результат.Вывести(ОбластьЗаголовка);
	КонецЕсли;
	
	///////////////////////////////////////////////////////////////
	// Разделение детализации по зданиям
	
	Если ПараметрыОтчета.ГруппироватьПоЗданиям Тогда
		
		// Получаем перечень зданий
		ТаблицаЗданий = Таблица.Скопировать(, "Здание");
		ТаблицаЗданий.Свернуть("Здание");
		
		ОтбораПоЗданию = Новый Структура("Здание");
		ОтборПоЛС      = Новый Структура("ЛицевойСчет");
		
		Для каждого ТекЗдание из ТаблицаЗданий Цикл
			
			// ПОДГОТОВКА ДАННЫХ
			// Строки здания
			ОтбораПоЗданию.Здание = ТекЗдание.Здание;
			ТаблицаСтрокЗдания = Таблица.Скопировать(Таблица.НайтиСтроки(ОтбораПоЗданию));
			ТаблицаСтрокЗдания.Сортировать("ЛицевойСчет, Услуга");
			
			// Лицевые счета
			ТаблицаЛСЗдания = ТаблицаСтрокЗдания.Скопировать(, "ЛицевойСчет");
			ТаблицаЛСЗдания.Свернуть("ЛицевойСчет");
			
			// ВЫВОД
			
			// Заголовок здания
			ОбластьАдресЗдания.Параметры.АдресЗдания = ТекЗдание.Здание;
			Результат.Вывести(ОбластьАдресЗдания);
			
			// ШАПКА
			// Выводит шапку таблицы.
			ПерваяСтрокаШапки = Результат.ВысотаТаблицы + 1;
			ВывестиСтрокуОбщДанные(ПараметрыОтчета, Результат, Макет, "Шапка", СписокОбластейВывода);
			ПоследняяСтрокаШапки = Результат.ВысотаТаблицы;
			
			Результат.Присоединить(ОбластьУслугаШапка, 1);
			Результат.Присоединить(ОбластьФиксПолеШапка, 1);
			Результат.Присоединить(ОбластьСуммыОснованияШапка, 1);
			Результат.Присоединить(ОбластьДолгНаНачалоШапка, 1);
			Результат.Присоединить(ОбластьНачисленоШапка, 1);
			Результат.Присоединить(ОбластьОплаченоШапка, 1);
			Результат.Присоединить(ОбластьПредоплатаШапка, 1);
			Результат.Присоединить(ОбластьДолгНаКонецШапка, 1);
			
			// СТРОКИ ТАБЛИЦЫ
			
			тмДокумент = Новый ТабличныйДокумент;
			
			НомерСтроки = 1;
			
			Для каждого ТекЛС из ТаблицаЛСЗдания Цикл
				
				ОтборПоЛС.ЛицевойСчет = ТекЛС.ЛицевойСчет;
				СтрокиЛС = ТаблицаСтрокЗдания.НайтиСтроки(ОтборПоЛС);
				
				ЭтоПерваяСтрокаЛС = Истина;
				ПредСтрока        = Неопределено; // Для заполнения доп. полей.
				
				Для каждого ТекУслуга из СтрокиЛС Цикл
					
					тмДокумент.Очистить();
					тмДокумент.Вывести(ОбластьГраница);
					
					Если ЭтоПерваяСтрокаЛС Тогда
						
						ОбластьНомерСтроки.Параметры.ППНомер = НомерСтроки;
						тмДокумент.Присоединить(ОбластьНомерСтроки, 1);
						
						ОбластьЛицевойСчет.Параметры.ЛицевойСчет = ТекЛС.ЛицевойСчет;
						тмДокумент.Присоединить(ОбластьЛицевойСчет, 1);
						
						// Добавленные поля
						Поля = ПараметрыОтчета.ДополнительныеПоля;
						Для Каждого ТекПоле Из Поля Цикл
							Если Не ТекПоле.Использование Тогда
								Продолжить;
							КонецЕсли;
								
							ОбластьДобавлПоле.Параметры.ДобавлПоле = ТекУслуга[ТекПоле.Поле];
							тмДокумент.Присоединить(ОбластьДобавлПоле, 1);
						КонецЦикла;
						
						ЭтоПерваяСтрокаЛС = Ложь;
						ПредСтрока        = ТекУслуга;
						
					Иначе
						
						тмДокумент.Присоединить(ОбластьНомерСтрокиПустая, 1);
						тмДокумент.Присоединить(ОбластьЛицевойСчетПустая, 1);
						
						Поля = ПараметрыОтчета.ДополнительныеПоля;
						Для Каждого ТекПоле Из Поля Цикл
							Если Не ТекПоле.Использование Тогда
								Продолжить;
							КонецЕсли;
							
							Если ТекУслуга[ТекПоле.Поле] = ПредСтрока[ТекПоле.Поле] Тогда
								тмДокумент.Присоединить(ОбластьДобавлПолеПустая, 1);
							Иначе
								ОбластьДобавлПоле.Параметры.ДобавлПоле = ТекУслуга[ТекПоле.Поле];
								тмДокумент.Присоединить(ОбластьДобавлПоле, 1);
							КонецЕсли;
						КонецЦикла;
						
					КонецЕсли;
					
					ОбластьУслуга.Параметры.Услуга = ТекУслуга.Услуга;
					тмДокумент.Присоединить(ОбластьУслуга, 1);
					
					тмДокумент.Присоединить(ОбластьФиксПоле, 1);
					
					ОбластьСуммыОснования.Параметры.Суммаоснование = ТекУслуга.СуммаОснование;
					тмДокумент.Присоединить(ОбластьСуммыОснования, 1);
					
					ОбластьДолгНаНачало.Параметры.ДолгНаНачало         = ТекУслуга.НепогашенныйОстатокНаНачалоМесяца;
					ОбластьДолгНаНачало.Параметры.ДолгНаНачалоПроценты = ТекУслуга.НепогашенныеПроцентыНаНачалоМесяца;
					тмДокумент.Присоединить(ОбластьДолгНаНачало, 1);
					
					ОбластьНачислено.Параметры.Начислено         = ТекУслуга.НачисленоОсновнаяСумма;
					ОбластьНачислено.Параметры.НачисленоПроценты = ТекУслуга.НачисленоПроценты;
					тмДокумент.Присоединить(ОбластьНачислено, 1);
					
					ОбластьОплачено.Параметры.Оплачено         = ТекУслуга.ОплаченоОсновнаяСумма;
					ОбластьОплачено.Параметры.ОплаченоПроценты = ТекУслуга.ОплаченоПроценты;
					тмДокумент.Присоединить(ОбластьОплачено, 1);
					
					ОбластьПредоплата.Параметры.Предоплата = ТекУслуга.Предоплата;
					тмДокумент.Присоединить(ОбластьПредоплата, 1);
					
					ОбластьДолгНаКонец.Параметры.ДолгНаКонец = ТекУслуга.ОстатокНаКонецМесяцаОсновнаяСумма;
					ОбластьДолгНаКонец.Параметры.ДолгНаКонецПроценты = ТекУслуга.ОстатокНаКонецМесяцаПроценты;
					тмДокумент.Присоединить(ОбластьДолгНаКонец, 1);
					
					Результат.Вывести(тмДокумент);
					
				КонецЦикла;
				
				НомерСтроки = НомерСтроки + 1;
				
			КонецЦикла;
			
			// ПОДВАЛ
			
			тмДокумент = Новый ТабличныйДокумент;
			
			Если ПараметрыОтчета.ВыводитьПодвал Тогда
				
				Итоги = ПолучитьИтоги(ТаблицаСтрокЗдания);
				
				Если Итоги = Неопределено Тогда
					
					тмДокумент.Присоединить(ОбластьГраницаПодвалПустая, 1);
					тмДокумент.Присоединить(ОбластьНомерСтрокиПодвалПустая, 1);
					тмДокумент.Присоединить(ОбластьЛицевойСчетПодвалПустая, 1);
					
					Поля = ПараметрыОтчета.ДополнительныеПоля;
					Для Каждого ТекПоле Из Поля Цикл
						Если Не ТекПоле.Использование Тогда
							Продолжить;
						КонецЕсли;
							
						тмДокумент.Присоединить(ОбластьДобавлПолеПодвалПустая, 1);
					КонецЦикла;
					
					тмДокумент.Присоединить(ОбластьУслугаПодвалПустая, 1);
					тмДокумент.Присоединить(ОбластьФиксПолеПодвалПустая, 1);
					тмДокумент.Присоединить(ОбластьСуммыОснованияПодвалПустая, 1);
					тмДокумент.Присоединить(ОбластьДолгНаНачалоПодвалПустая, 1);
					тмДокумент.Присоединить(ОбластьНачисленоПодвалПустая, 1);
					тмДокумент.Присоединить(ОбластьОплаченоПодвалПустая, 1);
					тмДокумент.Присоединить(ОбластьПредоплатаПодвалПустая, 1);
					тмДокумент.Присоединить(ОбластьДолгНаКонецПодвалПустая, 1);
					
				Иначе
				
					ОбластьСуммыОснованияПодвал.Параметры.Суммаоснование     = Итоги.СуммаОснование;
					ОбластьДолгНаНачалоПодвал.Параметры.ДолгНаНачало         = Итоги.НепогашенныйОстатокНаНачалоМесяца;
					ОбластьДолгНаНачалоПодвал.Параметры.ДолгНаНачалоПроценты = Итоги.НепогашенныеПроцентыНаНачалоМесяца;
					ОбластьНачисленоПодвал.Параметры.Начислено               = Итоги.НачисленоОсновнаяСумма;
					ОбластьНачисленоПодвал.Параметры.НачисленоПроценты       = Итоги.НачисленоПроценты;
					ОбластьОплаченоПодвал.Параметры.Оплачено                 = Итоги.ОплаченоОсновнаяСумма;
					ОбластьОплаченоПодвал.Параметры.ОплаченоПроценты         = Итоги.ОплаченоПроценты;
					ОбластьПредоплатаПодвал.Параметры.Предоплата             = Итоги.Предоплата;
					ОбластьДолгНаКонецПодвал.Параметры.ДолгНаКонец           = Итоги.ОстатокНаКонецМесяцаОсновнаяСумма;
					ОбластьДолгНаКонецПодвал.Параметры.ДолгНаКонецПроценты   = Итоги.ОстатокНаКонецМесяцаПроценты;
					
					тмДокумент.Присоединить(ОбластьГраницаПодвал, 1);
					тмДокумент.Присоединить(ОбластьНомерСтрокиПодвал, 1);
					тмДокумент.Присоединить(ОбластьЛицевойСчетПодвал, 1);
					
					Поля = ПараметрыОтчета.ДополнительныеПоля;
					Для Каждого ТекПоле Из Поля Цикл
						Если Не ТекПоле.Использование Тогда
							Продолжить;
						КонецЕсли;
							
						тмДокумент.Присоединить(ОбластьДобавлПолеПодвал, 1);
					КонецЦикла;
				
					тмДокумент.Присоединить(ОбластьУслугаПодвал, 1);
					тмДокумент.Присоединить(ОбластьФиксПолеПодвал, 1);
					тмДокумент.Присоединить(ОбластьСуммыОснованияПодвал, 1);
					тмДокумент.Присоединить(ОбластьДолгНаНачалоПодвал, 1);
					тмДокумент.Присоединить(ОбластьНачисленоПодвал, 1);
					тмДокумент.Присоединить(ОбластьОплаченоПодвал, 1);
					тмДокумент.Присоединить(ОбластьПредоплатаПодвал, 1);
					тмДокумент.Присоединить(ОбластьДолгНаКонецПодвал, 1);
					
				КонецЕсли;
			Иначе
				
				тмДокумент.Присоединить(ОбластьГраницаПодвалПустая, 1);
				тмДокумент.Присоединить(ОбластьНомерСтрокиПодвалПустая, 1);
				тмДокумент.Присоединить(ОбластьЛицевойСчетПодвалПустая, 1);
				
				Поля = ПараметрыОтчета.ДополнительныеПоля;
				Для Каждого ТекПоле Из Поля Цикл
					Если Не ТекПоле.Использование Тогда
						Продолжить;
					КонецЕсли;
						
					тмДокумент.Присоединить(ОбластьДобавлПолеПодвалПустая, 1);
				КонецЦикла;
			
				тмДокумент.Присоединить(ОбластьУслугаПодвалПустая, 1);
				тмДокумент.Присоединить(ОбластьФиксПолеПодвалПустая, 1);
				тмДокумент.Присоединить(ОбластьСуммыОснованияПодвалПустая, 1);
				тмДокумент.Присоединить(ОбластьДолгНаНачалоПодвалПустая, 1);
				тмДокумент.Присоединить(ОбластьНачисленоПодвалПустая, 1);
				тмДокумент.Присоединить(ОбластьОплаченоПодвалПустая, 1);
				тмДокумент.Присоединить(ОбластьПредоплатаПодвалПустая, 1);
				тмДокумент.Присоединить(ОбластьДолгНаКонецПодвалПустая, 1);
				
			КонецЕсли;
			
			Результат.Вывести(тмДокумент);
			
		КонецЦикла;
		
	Иначе
		
		Таблица.Сортировать("Здание, ЛицевойСчет, Услуга");
		
		// ШАПКА
		// Выводит шапку таблицы.
		ПерваяСтрокаШапки = Результат.ВысотаТаблицы + 1;
		ВывестиСтрокуОбщДанные(ПараметрыОтчета, Результат, Макет, "Шапка", СписокОбластейВывода);
		ПоследняяСтрокаШапки = Результат.ВысотаТаблицы;
		
		Результат.Присоединить(ОбластьУслугаШапка, 1);
		Результат.Присоединить(ОбластьФиксПолеШапка, 1);
		Результат.Присоединить(ОбластьСуммыОснованияШапка, 1);
		Результат.Присоединить(ОбластьДолгНаНачалоШапка, 1);
		Результат.Присоединить(ОбластьНачисленоШапка, 1);
		Результат.Присоединить(ОбластьОплаченоШапка, 1);
		Результат.Присоединить(ОбластьПредоплатаШапка, 1);
		Результат.Присоединить(ОбластьДолгНаКонецШапка, 1);
		
		// СТРОКИ ТАБЛИЦЫ
		
		тмДокумент = Новый ТабличныйДокумент;
		
		НомерСтроки       = 1;
		ЭтоПерваяСтрокаЛС = Истина;
		ПредСтрока        = Неопределено;
		
		Для каждого ТекСтрока из Таблица Цикл
			
			тмДокумент.Очистить();
			тмДокумент.Вывести(ОбластьГраница);
			
			Если ЭтоПерваяСтрокаЛС ИЛИ НЕ ТекСтрока.ЛицевойСчет = ПредСтрока.ЛицевойСчет Тогда
				
				ОбластьНомерСтроки.Параметры.ППНомер = НомерСтроки;
				тмДокумент.Присоединить(ОбластьНомерСтроки, 1);
				
				ОбластьЗдание.Параметры.Здание = ТекСтрока.Здание;
				тмДокумент.Присоединить(ОбластьЗдание, 1);
				
				ОбластьЛицевойСчет.Параметры.ЛицевойСчет = ТекСтрока.ЛицевойСчет;
				тмДокумент.Присоединить(ОбластьЛицевойСчет, 1);
				
				// Добавленные поля
				Поля = ПараметрыОтчета.ДополнительныеПоля;
				Для Каждого ТекПоле Из Поля Цикл
					Если Не ТекПоле.Использование Тогда
						Продолжить;
					КонецЕсли;
						
					ОбластьДобавлПоле.Параметры.ДобавлПоле = ТекСтрока[ТекПоле.Поле];
					тмДокумент.Присоединить(ОбластьДобавлПоле, 1);
				КонецЦикла;
				
				ЭтоПерваяСтрокаЛС = Ложь;
				
				НомерСтроки = НомерСтроки + 1;
				
			Иначе
				
				тмДокумент.Присоединить(ОбластьНомерСтрокиПустая, 1);
				тмДокумент.Присоединить(ОбластьЗданиеПустая,      1);
				тмДокумент.Присоединить(ОбластьЛицевойСчетПустая, 1);
			
				Поля = ПараметрыОтчета.ДополнительныеПоля;
				Для Каждого ТекПоле Из Поля Цикл
					Если Не ТекПоле.Использование Тогда
						Продолжить;
					КонецЕсли;
					
					Если ТекСтрока[ТекПоле.Поле] = ПредСтрока[ТекПоле.Поле] Тогда
						тмДокумент.Присоединить(ОбластьДобавлПолеПустая, 1);
					Иначе
						ОбластьДобавлПоле.Параметры.ДобавлПоле = ТекСтрока[ТекПоле.Поле];
						тмДокумент.Присоединить(ОбластьДобавлПоле, 1);
					КонецЕсли;
				КонецЦикла;
				
			КонецЕсли;
			
			ПредСтрока = ТекСтрока;
			
			ОбластьУслуга.Параметры.Услуга = ТекСтрока.Услуга;
			тмДокумент.Присоединить(ОбластьУслуга, 1);
			
			тмДокумент.Присоединить(ОбластьФиксПоле, 1);
			
			ОбластьСуммыОснования.Параметры.Суммаоснование = ТекСтрока.СуммаОснование;
			тмДокумент.Присоединить(ОбластьСуммыОснования, 1);
			
			ОбластьДолгНаНачало.Параметры.ДолгНаНачало         = ТекСтрока.НепогашенныйОстатокНаНачалоМесяца;
			ОбластьДолгНаНачало.Параметры.ДолгНаНачалоПроценты = ТекСтрока.НепогашенныеПроцентыНаНачалоМесяца;
			тмДокумент.Присоединить(ОбластьДолгНаНачало, 1);
			
			ОбластьНачислено.Параметры.Начислено         = ТекСтрока.НачисленоОсновнаяСумма;
			ОбластьНачислено.Параметры.НачисленоПроценты = ТекСтрока.НачисленоПроценты;
			тмДокумент.Присоединить(ОбластьНачислено, 1);
			
			ОбластьОплачено.Параметры.Оплачено         = ТекСтрока.ОплаченоОсновнаяСумма;
			ОбластьОплачено.Параметры.ОплаченоПроценты = ТекСтрока.ОплаченоПроценты;
			тмДокумент.Присоединить(ОбластьОплачено, 1);
			
			ОбластьПредоплата.Параметры.Предоплата = ТекСтрока.Предоплата;
			тмДокумент.Присоединить(ОбластьПредоплата, 1);
			
			ОбластьДолгНаКонец.Параметры.ДолгНаКонец         = ТекСтрока.ОстатокНаКонецМесяцаОсновнаяСумма;
			ОбластьДолгНаКонец.Параметры.ДолгНаКонецПроценты = ТекСтрока.ОстатокНаКонецМесяцаПроценты;
			тмДокумент.Присоединить(ОбластьДолгНаКонец, 1);
			
			Результат.Вывести(тмДокумент);
			
		КонецЦикла;
		
		// ПОДВАЛ
		
		тмДокумент = Новый ТабличныйДокумент;
		
		Если ПараметрыОтчета.ВыводитьПодвал Тогда
			
			Итоги = ПолучитьИтоги(Таблица);
			
			Если Итоги = Неопределено Тогда
				
				тмДокумент.Присоединить(ОбластьГраницаПодвалПустая, 1);
				тмДокумент.Присоединить(ОбластьНомерСтрокиПодвалПустая, 1);
				тмДокумент.Присоединить(ОбластьЗданиеПодвалПустая, 1);
				тмДокумент.Присоединить(ОбластьЛицевойСчетПодвалПустая, 1);
				
				Поля = ПараметрыОтчета.ДополнительныеПоля;
				Для Каждого ТекПоле Из Поля Цикл
					Если Не ТекПоле.Использование Тогда
						Продолжить;
					КонецЕсли;
						
					тмДокумент.Присоединить(ОбластьДобавлПолеПодвалПустая, 1);
				КонецЦикла;
				
				тмДокумент.Присоединить(ОбластьУслугаПодвалПустая, 1);
				тмДокумент.Присоединить(ОбластьФиксПолеПодвалПустая, 1);
				тмДокумент.Присоединить(ОбластьСуммыОснованияПодвалПустая, 1);
				тмДокумент.Присоединить(ОбластьДолгНаНачалоПодвалПустая, 1);
				тмДокумент.Присоединить(ОбластьНачисленоПодвалПустая, 1);
				тмДокумент.Присоединить(ОбластьОплаченоПодвалПустая, 1);
				тмДокумент.Присоединить(ОбластьПредоплатаПодвалПустая, 1);
				тмДокумент.Присоединить(ОбластьДолгНаКонецПодвалПустая, 1);
				
			Иначе
				
				ОбластьСуммыОснованияПодвал.Параметры.Суммаоснование     = Итоги.СуммаОснование;
				ОбластьДолгНаНачалоПодвал.Параметры.ДолгНаНачало         = Итоги.НепогашенныйОстатокНаНачалоМесяца;
				ОбластьДолгНаНачалоПодвал.Параметры.ДолгНаНачалоПроценты = Итоги.НепогашенныеПроцентыНаНачалоМесяца;
				ОбластьНачисленоПодвал.Параметры.Начислено               = Итоги.НачисленоОсновнаяСумма;
				ОбластьНачисленоПодвал.Параметры.НачисленоПроценты       = Итоги.НачисленоПроценты;
				ОбластьОплаченоПодвал.Параметры.Оплачено                 = Итоги.ОплаченоОсновнаяСумма;
				ОбластьОплаченоПодвал.Параметры.ОплаченоПроценты         = Итоги.ОплаченоПроценты;
				ОбластьПредоплатаПодвал.Параметры.Предоплата             = Итоги.Предоплата;
				ОбластьДолгНаКонецПодвал.Параметры.ДолгНаКонец           = Итоги.ОстатокНаКонецМесяцаОсновнаяСумма;
				ОбластьДолгНаКонецПодвал.Параметры.ДолгНаКонецПроценты   = Итоги.ОстатокНаКонецМесяцаПроценты;
				
				тмДокумент.Присоединить(ОбластьГраницаПодвал, 1);
				тмДокумент.Присоединить(ОбластьНомерСтрокиПодвал, 1);
				тмДокумент.Присоединить(ОбластьЗданиеПодвал, 1);
				тмДокумент.Присоединить(ОбластьЛицевойСчетПодвал, 1);
				
				Поля = ПараметрыОтчета.ДополнительныеПоля;
				Для Каждого ТекПоле Из Поля Цикл
					Если Не ТекПоле.Использование Тогда
						Продолжить;
					КонецЕсли;
						
					тмДокумент.Присоединить(ОбластьДобавлПолеПодвал, 1);
				КонецЦикла;
				
				тмДокумент.Присоединить(ОбластьУслугаПодвал, 1);
				тмДокумент.Присоединить(ОбластьФиксПолеПодвал, 1);
				тмДокумент.Присоединить(ОбластьСуммыОснованияПодвал, 1);
				тмДокумент.Присоединить(ОбластьДолгНаНачалоПодвал, 1);
				тмДокумент.Присоединить(ОбластьНачисленоПодвал, 1);
				тмДокумент.Присоединить(ОбластьОплаченоПодвал, 1);
				тмДокумент.Присоединить(ОбластьПредоплатаПодвал, 1);
				тмДокумент.Присоединить(ОбластьДолгНаКонецПодвал, 1);
			КонецЕсли;
			
		Иначе
			
			тмДокумент.Присоединить(ОбластьГраницаПодвалПустая, 1);
			тмДокумент.Присоединить(ОбластьНомерСтрокиПодвалПустая, 1);
			тмДокумент.Присоединить(ОбластьЗданиеПодвалПустая, 1);
			тмДокумент.Присоединить(ОбластьЛицевойСчетПодвалПустая, 1);
			
			Поля = ПараметрыОтчета.ДополнительныеПоля;
			Для Каждого ТекПоле Из Поля Цикл
				Если Не ТекПоле.Использование Тогда
					Продолжить;
				КонецЕсли;
					
				тмДокумент.Присоединить(ОбластьДобавлПолеПодвалПустая, 1);
			КонецЦикла;
			
			тмДокумент.Присоединить(ОбластьУслугаПодвалПустая, 1);
			тмДокумент.Присоединить(ОбластьФиксПолеПодвалПустая, 1);
			тмДокумент.Присоединить(ОбластьСуммыОснованияПодвалПустая, 1);
			тмДокумент.Присоединить(ОбластьДолгНаНачалоПодвалПустая, 1);
			тмДокумент.Присоединить(ОбластьНачисленоПодвалПустая, 1);
			тмДокумент.Присоединить(ОбластьОплаченоПодвалПустая, 1);
			тмДокумент.Присоединить(ОбластьПредоплатаПодвалПустая, 1);
			тмДокумент.Присоединить(ОбластьДолгНаКонецПодвалПустая, 1);
			
		КонецЕсли;
		
		Результат.Вывести(тмДокумент);
		
	КонецЕсли;

КонецПроцедуры

Функция ПолучитьИтоги(Таблица)
	
	Итоги = Таблица.Скопировать(, "СуммаОснование,
								  |НепогашенныйОстатокНаНачалоМесяца,
								  |НепогашенныеПроцентыНаНачалоМесяца,
								  |НачисленоОсновнаяСумма,
								  |НачисленоПроценты,
								  |ОплаченоОсновнаяСумма,
								  |ОплаченоПроценты,
								  |Предоплата,
								  |ОстатокНаКонецМесяцаОсновнаяСумма,
								  |ОстатокНаКонецМесяцаПроценты");
	
	Итоги.Свернуть(, "СуммаОснование,
					 |НепогашенныйОстатокНаНачалоМесяца,
					 |НепогашенныеПроцентыНаНачалоМесяца,
					 |НачисленоОсновнаяСумма,
					 |НачисленоПроценты,
					 |ОплаченоОсновнаяСумма,
					 |ОплаченоПроценты,
					 |Предоплата,
					 |ОстатокНаКонецМесяцаОсновнаяСумма,
					 |ОстатокНаКонецМесяцаПроценты");
	
	Если Итоги.Количество() = 0 Тогда
		Возврат Неопределено;
	Иначе
		Возврат Итоги[0];
	КонецЕсли;
	
КонецФункции

// Функция возвращает параметры исполнения отчета.
Функция ПолучитьПараметрыИсполненияОтчета()
	
	Возврат Новый Структура("ИспользоватьПередКомпоновкойМакета,
							|ИспользоватьПослеКомпоновкиМакета,
							|ИспользоватьПослеВыводаРезультата,
							|ИспользоватьДанныеРасшифровки,
							|ИспользоватьВнешниеНаборыДанных,
							|ИспользоватьРасширенныеПараметрыРасшифровки",
							Истина, Истина, Истина, Ложь, Истина, Ложь);
	
КонецФункции

// Функция возвращает текст заголовка.
//
// Параметры:
//  ПараметрыОтчета    - Структура - Структура параметров отчета.
//  ОрганизацияВНачале - Булево - Признак организации в начале.
//
Функция ПолучитьТекстЗаголовка(ПараметрыОтчета, ОрганизацияВНачале = Истина)
	
	Возврат "Сводная ведомость по рассрочкам платежей" + УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьПредставлениеПериода(ПараметрыОтчета.НачалоПериода, ПараметрыОтчета.КонецПериода);
	
КонецФункции

// Функция возвращает внешние наборы данных.
//
// Параметры:
//  ПараметрыОтчета - Структура - Структура параметров отчета.
//  МакетКомпоновки - Макет - Макет компоновки данных отчета.
//
Функция ПолучитьВнешниеНаборыДанных(ПараметрыОтчета, МакетКомпоновки)
	
	ВнешниеНаборыДанных = Новый Структура();
	
	ВнешниеНаборыДанных.Вставить("СведенияОРассрочках", ПолучитьСведенияОРассрочках(ПараметрыОтчета));
	
	Возврат ВнешниеНаборыДанных;
	
КонецФункции

// В процедуре можно доработать компоновщик перед выводом в отчет.
// Изменения сохранены не будут.
//
// Параметры:
//  ПараметрыОтчета     - Структура - Структура параметров отчета.
//  Схема               - СхемаКомпоновкиДанных - Схема компоновки данных отчета.
//  КомпоновщикНастроек - КомпоновщикНастроек - Компоновщик настроек СКД отчета.
//
Процедура ПередКомпоновкойМакета(ПараметрыОтчета, Схема, КомпоновщикНастроек)
	
	// Данные будем выводить в дерево значений, поэтому определим специальные параметры.
	ПараметрыОтчета.Вставить("ВыводитьДанныеВТаблицу", Истина);
	ПараметрыОтчета.Вставить("ВыводитьДанныеВДерево",  Истина);
	
	// Обозначим структуру схемы компоновки в параметрах отчета, которая понадобится при выводе.
	ТаблицаСтруктуры = Новый ТаблицаЗначений;
	ТаблицаСтруктуры.Колонки.Добавить("ИмяГруппировки",     Новый ОписаниеТипов("Строка"));
	ТаблицаСтруктуры.Колонки.Добавить("УровеньГруппировки", Новый ОписаниеТипов("Число"));
	УровеньГруппировки = 1;
	ДобавитьГруппировкиВТаблицуСтруктуры(ТаблицаСтруктуры, КомпоновщикНастроек.Настройки.Структура, УровеньГруппировки);
	ПараметрыОтчета.Вставить("ТаблицаСтруктуры",             ТаблицаСтруктуры);
	
	УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "ДатаНач",     ПараметрыОтчета.НачалоПериода);
	УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "ДатаКон",      ПараметрыОтчета.КонецПериода);
	УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "Организация",       ПараметрыОтчета.Организация);
	
	// Добавим дополнительные поля в структуру отчета для их вывода.
	УПЖКХ_ТиповыеМетодыВызовСервера.ДобавитьДополнительныеПоля(ПараметрыОтчета, КомпоновщикНастроек);
	
	// После добавления дополнительных полей в структуру компоновки значения полей
	// могут и не выводится, так как выводимые поля, например "Здание", является полем
	// детальных записей и на верхних уровнях группировки не вычисляется.
	//
	// Поэтому, если дополнительного поля нет в группировках, то нужно его добавить на верхий уровень.
	// В результате, значения дополнительного поля будут вычислены и выведены в отчет.
	
КонецПроцедуры

// Возникает после компоновки макета.
//
// Параметры:
//  ПараметрыОтчета - Структура - Структура параметров отчета.
//  МакетКомпоновки - Макет - Макет компоновки данных отчета.
//
Процедура ПослеКомпоновкиМакета(ПараметрыОтчета, МакетКомпоновки)
	
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

#Область СлужебныеПроцедурыИФункцииДополнительные

Процедура ДобавитьГруппировкиВТаблицуСтруктуры(ТаблицаСтруктуры, КоллекцияСтруктуры, УровеньГруппировки)
	
	Для Каждого ТекЭлементГруппировки Из КоллекцияСтруктуры Цикл
		
		Если ТипЗнч(ТекЭлементГруппировки) = Тип("ГруппировкаКомпоновкиДанных")
			И ТекЭлементГруппировки.ПоляГруппировки.Элементы.Количество() > 0 Тогда
			
			НоваяСтрока = ТаблицаСтруктуры.Добавить();
			// Уберем из наименований группировок символы "." (точка)
			// Данные символы появляются в именах группировок при обращении к полям через разыменование.
			НоваяСтрока.ИмяГруппировки     = СтрЗаменить(ТекЭлементГруппировки.ПоляГруппировки.Элементы[0].Поле, ".", "");
			НоваяСтрока.УровеньГруппировки = УровеньГруппировки;
			
			УровеньГруппировки = УровеньГруппировки + 1;
			
			ДобавитьГруппировкиВТаблицуСтруктуры(ТаблицаСтруктуры, ТекЭлементГруппировки.Структура, УровеньГруппировки);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Функция выполняет поиск поля компоновки данных в списке полей группировки.
//
Функция ПолучитьСписокПолейГруппировки(СтруктураПолей, МассивПолей)
	
	Для Каждого ТекЭлементГруппировки Из СтруктураПолей Цикл
		
		Если ТипЗнч(ТекЭлементГруппировки) = Тип("ГруппировкаКомпоновкиДанных") Тогда
			Для Каждого ТекПоле Из ТекЭлементГруппировки.ПоляГруппировки.Элементы Цикл
				МассивПолей.Добавить(ТекПоле.Поле);
			КонецЦикла;
		КонецЕсли;
		
		Если ТекЭлементГруппировки.Структура.Количество() > 0 Тогда
			
			ПолучитьСписокПолейГруппировки(ТекЭлементГруппировки.Структура, МассивПолей);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецФункции

#КонецОбласти

#КонецЕсли
