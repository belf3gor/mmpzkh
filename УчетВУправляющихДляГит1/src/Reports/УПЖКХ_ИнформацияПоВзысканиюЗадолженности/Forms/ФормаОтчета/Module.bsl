&НаКлиенте
Перем ПараметрыОбработчикаОжидания;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

#Область ПроцедурыИФункцииОбщегоНазначения

#Область Реклама

&НаКлиенте
// Процедура - обработчик нажатия на картинку баннера.
Процедура Подключаемый_РекламаОткрытьСтраницуСайта(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОТР_РекламаКлиент.Подключаемый_РекламаОткрытьСтраницуСайта(ЭтаФорма);
	
КонецПроцедуры // Подключаемый_РекламаОткрытьСтраницуСайта()

&НаКлиенте
// Процедура - обработчик нажатия на картинку закрытия баннера.
Процедура Подключаемый_РекламаКартникаЗакрытияБаннераНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;

	ОТР_РекламаКлиент.Подключаемый_РекламаКартникаЗакрытияБаннераНажатие(ЭтаФорма);
	
КонецПроцедуры // Подключаемый_РекламаОткрытьСтраницуСайта()

#КонецОбласти // Реклама

&НаСервере
// Процедура заполняет начальные настройки отчета.
//
Процедура ЗаполнитьДополнительныеПоля()
	
	//ДобавитьДополнительноеПоле("ВидСобственности",       "Вид собственности");
	//ДобавитьДополнительноеПоле("Адрес",                  "Адрес");
	//ДобавитьДополнительноеПоле("Благоустройство",        "Благоустройство");
	//ДобавитьДополнительноеПоле("ДатаВводаВЭксплуатацию", "Дата ввода в эксплуатацию");
	//ДобавитьДополнительноеПоле("ПлощадьЗданияОбщая",     "Площадь здания (общая)");
	
КонецПроцедуры

&НаСервере
// Процедура добавляет поля в набор компоновки на сервере.
Процедура ДобавитьПоляВНаборКомпоновкиНаСервере()
	
	// Добавим поля с дополнительными свойствами в схему компоновки.
	ПараметрыОтчета = ПодготовитьПараметрыОтчетаНаСервере();
	Отчеты.УПЖКХ_ДанныеПоПУ.ДобавитьПоляВНаборКомпоновки(ПараметрыОтчета,
															ПолучитьИзВременногоХранилища(СхемаКомпоновкиДанных));
	
КонецПроцедуры

&НаСервере
// Процедура вычисляет суммы ячеек на сервере.
Процедура ВычислитьСуммуВыделенныхЯчеекТабличногоДокументаВКонтекстеНаСервере()
	
	ПолеСумма = УПЖКХ_ТиповыеМетодыВызовСервера.ВычислитьСуммуВыделенныхЯчеекТабличногоДокумента(
		Результат, КэшВыделеннойОбласти);
	
КонецПроцедуры

&НаКлиенте
// Подключаемый обработчик вычисления суммы ячеек.
Процедура Подключаемый_РезультатПриАктивизацииОбластиПодключаемый()
	
	НеобходимоВычислятьНаСервере = Ложь;
	УПЖКХ_ТиповыеМетодыКлиент.ВычислитьСуммуВыделенныхЯчеекТабличногоДокумента(
		ПолеСумма, Результат, КэшВыделеннойОбласти, НеобходимоВычислятьНаСервере);
	
	Если НеобходимоВычислятьНаСервере Тогда
		ВычислитьСуммуВыделенныхЯчеекТабличногоДокументаВКонтекстеНаСервере();
	КонецЕсли;
	
	ОтключитьОбработчикОжидания("Подключаемый_РезультатПриАктивизацииОбластиПодключаемый");
	
КонецПроцедуры

&НаСервере
// Подготавливает параметры на сервере
Функция ПодготовитьПараметрыОтчетаНаСервере()
	
	НастройкиКомпоновкиДанных = Отчет.КомпоновщикНастроек.ПолучитьНастройки();
	Организация = Неопределено;
	Поле = Новый ПолеКомпоновкиДанных("Организация");
	ном = 0;
	Пока ном < НастройкиКомпоновкиДанных.Отбор.Элементы.Количество() И Организация = Неопределено Цикл
		Если НастройкиКомпоновкиДанных.Отбор.Элементы[ном].ЛевоеЗначение = Поле Тогда
			Организация = НастройкиКомпоновкиДанных.Отбор.Элементы[ном].ПравоеЗначение;
		КонецЕсли;
		ном = ном + 1;
	КонецЦикла;;
	
	ПараметрыОтчета = Новый Структура;
	ПараметрыОтчета.Вставить("Организация"                    , Организация);
	ПараметрыОтчета.Вставить("ВключатьОбособленныеПодразделения", Ложь);
	ПараметрыОтчета.Вставить("НачалоПериода"                    , НачалоДня(Отчет.НачалоПериода));
	ПараметрыОтчета.Вставить("КонецПериода"                     , КонецДня(Отчет.КонецПериода));
	ПараметрыОтчета.Вставить("РазмещениеДополнительныхПолей"    , Отчет.РазмещениеДополнительныхПолей);
	ПараметрыОтчета.Вставить("Группировка"                      , Отчет.Группировка.Выгрузить());
	ПараметрыОтчета.Вставить("ДополнительныеПоля"               , Отчет.ДополнительныеПоля.Выгрузить());
	ПараметрыОтчета.Вставить("РежимРасшифровки"                 , Отчет.РежимРасшифровки);
	ПараметрыОтчета.Вставить("ВыводитьЗаголовок"                , ВыводитьЗаголовок);
	ПараметрыОтчета.Вставить("ВыводитьПодвал"                   , ВыводитьПодвал);
	ПараметрыОтчета.Вставить("ДанныеРасшифровки"                , ДанныеРасшифровки);
	ПараметрыОтчета.Вставить("МакетОформления"                  , МакетОформления);	
	ПараметрыОтчета.Вставить("СхемаКомпоновкиДанных"            , ПолучитьИзВременногоХранилища(СхемаКомпоновкиДанных));
	ПараметрыОтчета.Вставить("ИдентификаторОтчета"              , 
																  УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьИдентификаторОбъекта(ЭтаФорма));
	ПараметрыОтчета.Вставить("НастройкиКомпоновкиДанных"        , НастройкиКомпоновкиДанных);
	ПараметрыОтчета.Вставить("НаборПоказателей"                 , 
																  Отчеты[ПараметрыОтчета.ИдентификаторОтчета].ПолучитьНаборПоказателей());
		
	Возврат ПараметрыОтчета;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
// Обновляет текст заголовка.
Процедура ОбновитьТекстЗаголовка(Форма)
	
	Отчет = Форма.Отчет;
	
	ЗаголовокОтчета = НСтр("ru = 'Информация по взысканию задолженности (ЖКХ) '")
					+ УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьПредставлениеПериода(Отчет.НачалоПериода, Отчет.КонецПериода);

	Форма.Заголовок = ЗаголовокОтчета;

КонецПроцедуры

&НаКлиенте
// Функция получает запрещенные поля.
Функция ПолучитьЗапрещенныеПоля(Режим = "") Экспорт
	
	СписокПолей = Новый Массив;
	
	СписокПолей.Добавить("UserFields");
	СписокПолей.Добавить("DataParameters");
	СписокПолей.Добавить("SystemFields");
	СписокПолей.Добавить("Показатели");
	СписокПолей.Добавить("Период");
	
	Если Режим = "Выбор" Тогда
		Для Каждого ДоступноеПоле Из Отчет.КомпоновщикНастроек.Настройки.ДоступныеПоляВыбора.Элементы Цикл
			Если ДоступноеПоле.Ресурс Тогда
				СписокПолей.Добавить(Строка(ДоступноеПоле.Поле));
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если Режим = "Отбор" ИЛИ Режим = "Порядок" Тогда
		УПЖКХ_ТиповыеМетодыКлиент.ДобавитьПоляРесурсовВЗапрещенныеПоля(ЭтаФорма, СписокПолей);
	КонецЕсли;
	
	Возврат Новый ФиксированныйМассив(СписокПолей);
	
КонецФункции

&НаСервере
// Формирует отчет на сервере.
Функция СформироватьОтчетНаСервере() Экспорт
	
	Если Не ПроверитьЗаполнение() Тогда 
		Возврат Новый Структура("ЗаданиеВыполнено", Истина);
	КонецЕсли;
	
	ИБФайловая = УПЖКХ_ТиповыеМетодыСервер.ИнформационнаяБазаФайловая();
	
	УПЖКХ_ТиповыеМетодыСервер.ОтменитьВыполнениеЗадания(ИдентификаторЗадания);
	
	ИдентификаторЗадания = Неопределено;
	
	УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеИспользовать");
	
	Отчет.КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Вставить("ВыводитьЗаголовок", ВыводитьЗаголовок);
	Отчет.КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Вставить("ВыводитьПодвал"   , ВыводитьПодвал);
	
	ПараметрыОтчета = ПодготовитьПараметрыОтчетаНаСервере();
	
	Если ИБФайловая Тогда
		АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
		УПЖКХ_ТиповыеМетодыВызовСервера.СформироватьОтчет(ПараметрыОтчета, АдресХранилища);
		РезультатВыполнения = Новый Структура("ЗаданиеВыполнено", Истина);
	Иначе
		РезультатВыполнения = УПЖКХ_ТиповыеМетодыСервер.ЗапуститьВыполнениеВФоне(
			УникальныйИдентификатор,
			"УПЖКХ_ТиповыеМетодыВызовСервера.СформироватьОтчет",
			ПараметрыОтчета,
			УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьНаименованиеЗаданияВыполненияОтчета(ЭтаФорма));
			
		АдресХранилища       = РезультатВыполнения.АдресХранилища;
		ИдентификаторЗадания = РезультатВыполнения.ИдентификаторЗадания;
	КонецЕсли;
	
	Если РезультатВыполнения.ЗаданиеВыполнено Тогда
		ЗагрузитьПодготовленныеДанныеНаСервере();
	КонецЕсли;
	
	УПЖКХ_ТиповыеМетодыКлиентСервер.СкрыватьНастройкиПриФормированииОтчета(ЭтаФорма);
	
	Возврат РезультатВыполнения;
	
КонецФункции

&НаСервере
// Заполняет настройки по умолчанию.
Процедура ЗаполнитьНастройкамиПоУмолчанию(ЗаполняемыеНастройки)
	
	Если ЗаполняемыеНастройки.Свойство("Показатели") Тогда
		Если ЗаполняемыеНастройки.Показатели Тогда
			//// Управление показателями
			//Отчет.ПоказательБУ            = Истина;
			//Отчет.ПоказательНУ            = Ложь;
			//Отчет.ПоказательПР            = Ложь;
			//Отчет.ПоказательВР            = Ложь;
			//Отчет.ПоказательКонтроль      = Ложь;
		КонецЕсли;
	КонецЕсли;

	Если ЗаполняемыеНастройки.Свойство("Группировка") Тогда
		Если ЗаполняемыеНастройки.Группировка Тогда
			Отчет.Группировка.Очистить();
			
			//НоваяСтрока = Отчет.Группировка.Добавить();
			//НоваяСтрока.Поле           = "Подразделение";
			//НоваяСтрока.Использование  = Истина;
			//НоваяСтрока.Представление  = "Подразделение";
			//НоваяСтрока.ТипГруппировки = 0;
		
		КонецЕсли;
	КонецЕсли;
	
	// Дополнительные поля	
	Если ЗаполняемыеНастройки.Свойство("ДополнительныеПоля") Тогда
		Если ЗаполняемыеНастройки.ДополнительныеПоля Тогда
			Отчет.ДополнительныеПоля.Очистить();
			
			//НоваяСтрока = Отчет.ДополнительныеПоля.Добавить();
			//НоваяСтрока.Поле           = "ОсновноеСредство.ДатаПринятияКУчету";
			//НоваяСтрока.Представление  = "Дата принятия к учету";
			//НоваяСтрока.Использование  = Ложь;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
// Управление формой.
Процедура УправлениеФормой(Форма)
	
	Элементы = Форма.Элементы;
	Отчет    = Форма.Отчет;
	
	Форма.Период = УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьПредставлениеПериодаОтчета(
		Форма.ВидПериода, Отчет.НачалоПериода, Отчет.КонецПериода);
		
	УПЖКХ_ТиповыеМетодыКлиентСервер.ПереключитьТекущуюСтраницуВыбораПериода(Форма.ВидПериода,
																			Элементы.ГруппаПоляВводаПериода);

КонецПроцедуры

&НаСервере
// Процедура загрузки данных на сервере.
Процедура ЗагрузитьПодготовленныеДанныеНаСервере()

	РезультатВыполнения = ПолучитьИзВременногоХранилища(АдресХранилища);
	Результат         = РезультатВыполнения.Результат;
	ДанныеРасшифровки = РезультатВыполнения.ДанныеРасшифровки;
	
	ИдентификаторЗадания = Неопределено;
	
	УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеИспользовать");
	
	ДополнительныеСвойства = Отчет.КомпоновщикНастроек.Настройки.ДополнительныеСвойства;
	
КонецПроцедуры

&НаКлиенте
// Обработчик проверки выполнения задания.
Процедура Подключаемый_ПроверитьВыполнениеЗадания()
	
	Попытка
		Если ЗаданиеВыполнено(ИдентификаторЗадания) Тогда 
			ЗагрузитьПодготовленныеДанныеНаСервере();
			УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеИспользовать");
		Иначе
			УПЖКХ_ТиповыеМетодыКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
			ПодключитьОбработчикОжидания(
				"Подключаемый_ПроверитьВыполнениеЗадания",
				ПараметрыОбработчикаОжидания.ТекущийИнтервал,
				Истина);
		КонецЕсли;
	Исключение
		УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеИспользовать");
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

&НаСервереБезКонтекста
// Проверяет, выполнено ли задание.
Функция ЗаданиеВыполнено(ИдентификаторЗадания)
	
	Возврат  УПЖКХ_ТиповыеМетодыСервер.ЗаданиеВыполнено(ИдентификаторЗадания);
	
КонецФункции

#КонецОбласти 

/////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ПОЛЯ ТАБЛИЧНОГО ДОКУМЕНТА

#Область ОбработчикиСобытийПоляТабличногоДокумента

&НаКлиенте
// Обработчик события "ПриАктивизацииОбласти" поля "Результат".
Процедура РезультатПриАктивизацииОбласти(Элемент)
	
	Если ТипЗнч(Результат.ВыделенныеОбласти) = Тип("ВыделенныеОбластиТабличногоДокумента") Тогда
		ИнтервалОжидания = ?(ПолучитьСкоростьКлиентскогоСоединения() = СкоростьКлиентскогоСоединения.Низкая, 1, 0.2);
		ПодключитьОбработчикОжидания("Подключаемый_РезультатПриАктивизацииОбластиПодключаемый", ИнтервалОжидания, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ОбработкаРасшифровки" поля "Результат".
Процедура РезультатОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	
	УПЖКХ_ТиповыеМетодыКлиент.ОбработкаРасшифровкиСтандартногоОтчета(ЭтаФорма, Элемент, Расшифровка, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти 

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

#Область ОбработчикиСобытийФормы

&НаСервере
// Обработчик события "ПриСозданииНаСервере" формы.
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("НачалоПериода") Тогда
		ПараметрНачалоПериода = Параметры.НачалоПериода;
	КонецЕсли;
	
	Если Параметры.Свойство("КонецПериода") Тогда
		ПараметрКонецПериода = Параметры.КонецПериода;
	КонецЕсли;
	
	ЗаполняемыеНастройки = Новый Структура("Группировка, Отбор, ДополнительныеПоля",
		Истина, Истина, Истина, Истина);
	ЗаполнитьНастройкамиПоУмолчанию(ЗаполняемыеНастройки);
	
	УПЖКХ_ТиповыеМетодыВызовСервера.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
	// Реклама
	ОТР_РекламаКлиентСервер.ПриСозданииНаСервере(ЭтаФорма);
	// Конец Реклама
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриОткрытии" формы.
Процедура ПриОткрытии(Отказ)
	
	Если ЗначениеЗаполнено(ПараметрНачалоПериода) Тогда
		Отчет.НачалоПериода = ПараметрНачалоПериода;
	КонецЕсли;
	Если ЗначениеЗаполнено(ПараметрКонецПериода) Тогда
		Отчет.КонецПериода = ПараметрКонецПериода;
	КонецЕсли;
	
	УправлениеФормой(ЭтаФорма);
	
	ОбновитьТекстЗаголовка(ЭтаФорма);
	
	ИБФайловая = СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиента().ИнформационнаяБазаФайловая;
	ПодключитьОбработчикОжидания = Не ИБФайловая И ЗначениеЗаполнено(ИдентификаторЗадания);
	Если ПодключитьОбработчикОжидания Тогда
		УПЖКХ_ТиповыеМетодыКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
		УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "ФормированиеОтчета");
	КонецЕсли;
	
	УПЖКХ_ТиповыеМетодыКлиент.ПриОткрытии(ЭтаФорма, Отказ);
	
	// Добавим дополнительные поля.
	Если Отчет.ДополнительныеПоля.Количество() = 0 Тогда
		ЗаполнитьДополнительныеПоля();
	КонецЕсли;
	
	// Добавим поля компоновки на сервере.
	ДобавитьПоляВНаборКомпоновкиНаСервере();
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПередЗакрытием" формы.
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	УПЖКХ_ТиповыеМетодыКлиент.ПередЗакрытием(ЭтаФорма, Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриЗакрытии" формы.
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	УПЖКХ_ТиповыеМетодыКлиент.ПриЗакрытии(ЭтаФорма, ЗавершениеРаботы);
	
КонецПроцедуры

&НаСервере
// Обработчик события "ПриСохраненииПользовательскихНастроекНаСервере" формы.
Процедура ПриСохраненииПользовательскихНастроекНаСервере(Настройки)
	
	УПЖКХ_ТиповыеМетодыВызовСервера.ПриСохраненииПользовательскихНастроекНаСервере(ЭтаФорма, Настройки);
	
КонецПроцедуры

&НаСервере
// Обработчик события "ПриЗагрузкеПользовательскихНастроекНаСервере" формы.
Процедура ПриЗагрузкеПользовательскихНастроекНаСервере(Настройки)
	
	УПЖКХ_ТиповыеМетодыВызовСервера.ПриЗагрузкеПользовательскихНастроекНаСервере(ЭтаФорма, Настройки);
	
	ОбновитьТекстЗаголовка(ЭтаФорма);
	
	УправлениеФормой(ЭтаФорма);
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
// Процедура возникает при загрузке варианта на сервере.
Процедура ПриЗагрузкеВариантаНаСервере(Настройки)
	
	УПЖКХ_ТиповыеМетодыВызовСервера.УстановитьНастройкиПоУмолчанию(ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти 

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

#Область ПроцедурыДействияКомандныхПанелейФормы

&НаКлиенте
// Обработчик команды "СформироватьОтчет".
Процедура СформироватьОтчет(Команда)
	
	ОчиститьСообщения();
	
	ОтключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания");
	
	РезультатВыполнения = СформироватьОтчетНаСервере();
	Если Не РезультатВыполнения.ЗаданиеВыполнено Тогда		
		УПЖКХ_ТиповыеМетодыКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
		УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "ФормированиеОтчета");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик команды "ПанельНастроек".
Процедура ПанельНастроек(Команда)
	
	Элементы.ГруппаПанельНастроек.Видимость = Не Элементы.ГруппаПанельНастроек.Видимость;
	УПЖКХ_ТиповыеМетодыКлиентСервер.ИзменитьЗаголовокКнопкиПанельНастроек(
		Элементы.ПанельНастроек, Элементы.ГруппаПанельНастроек.Видимость);
	
КонецПроцедуры

#КонецОбласти 

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
// Обработчик события "ПриИзменении" поля "ВидПериода".
Процедура ВидПериодаПриИзменении(Элемент)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВидПериодаПриИзменении(Элемент, ВидПериода, Отчет.НачалоПериода, Отчет.КонецПериода, Период);
	УПЖКХ_ТиповыеМетодыКлиентСервер.ПереключитьТекущуюСтраницуВыбораПериода(ВидПериода, Элементы.ГруппаПоляВводаПериода);
	
	ОбновитьТекстЗаголовка(ЭтаФорма);
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля "Период".
Процедура ПериодПриИзменении(Элемент)
	
	УПЖКХ_ТиповыеМетодыКлиент.ПериодПриИзменении(Элемент, Период, Отчет.НачалоПериода, Отчет.КонецПериода);
	
	ОбновитьТекстЗаголовка(ЭтаФорма);
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "НачалоВыбора" поля "Период".
Процедура ПериодНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПериодНачалоВыбораЗавершение", ЭтотОбъект);
	
	УПЖКХ_ТиповыеМетодыКлиент.ПериодНачалоВыбора(ЭтаФорма, Элемент, СтандартнаяОбработка, 
		ВидПериода, Отчет.НачалоПериода, ОписаниеОповещения);
	
	ОбновитьТекстЗаголовка(ЭтаФорма);
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура окончания асинхроного выбора периода.
Процедура ПериодНачалоВыбораЗавершение(СтруктураПериода, ДополнительныеПараметры) Экспорт
	
	// Установим полученный период
	Если СтруктураПериода <> Неопределено Тогда
		ВидПериода = СтруктураПериода.ВидПериода;
		Период = СтруктураПериода.Период;
		Отчет.НачалоПериода = СтруктураПериода.НачалоПериода;
		Отчет.КонецПериода = СтруктураПериода.КонецПериода;
	КонецЕсли;
	
	ОбновитьТекстЗаголовка(ЭтаФорма);
	
	Если НЕ ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
// Обработчик события "ОбработкаВыбора" поля "Период".
Процедура ПериодОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	УПЖКХ_ТиповыеМетодыКлиент.ПериодОбработкаВыбора(
		Элемент, ВыбранноеЗначение, СтандартнаяОбработка,
		ВидПериода, Период, Отчет.НачалоПериода, Отчет.КонецПериода);
		
	ОбновитьТекстЗаголовка(ЭтаФорма);
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "АвтоПодбор" поля "Период".
Процедура ПериодАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	УПЖКХ_ТиповыеМетодыКлиент.ПериодАвтоПодбор(
		Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка,
		ВидПериода, Период, Отчет.НачалоПериода, Отчет.КонецПериода);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ОкончаниеВводаТекста" поля "Период".
Процедура ПериодОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	УПЖКХ_ТиповыеМетодыКлиент.ПериодОкончаниеВводаТекста(
		Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка,
		ВидПериода, Период, Отчет.НачалоПериода, Отчет.КонецПериода);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля "НачалоПериода".
Процедура НачалоПериодаПриИзменении(Элемент)
	
	ОбновитьТекстЗаголовка(ЭтаФорма);
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля "КонецПериода".
Процедура КонецПериодаПриИзменении(Элемент)
	
	ОбновитьТекстЗаголовка(ЭтаФорма);
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля "НачалоПериодаДень".
Процедура НачалоПериодаДеньПриИзменении(Элемент)
	
	Отчет.КонецПериода = КонецДня(Отчет.НачалоПериода);
	
	ОбновитьТекстЗаголовка(ЭтаФорма);
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти 

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ГРУППЫ ОТБОРЫ

#Область ОбработчикиСобытийГруппыОтборы

&НаКлиенте
// Обработчик события "ПриИзменении" поля "Отборы".
Процедура ОтборыПриИзменении(Элемент)
	
	УПЖКХ_ТиповыеМетодыКлиент.ОтборыПриИзменении(ЭтаФорма, Элемент);
	
	ОбновитьТекстЗаголовка(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПередНачаломДобавления" поля "Отборы".
Процедура ОтборыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	УПЖКХ_ТиповыеМетодыКлиент.ОтборыПередНачаломДобавления(ЭтаФорма, Элемент, Отказ, Копирование, Родитель, Группа);

КонецПроцедуры

&НаКлиенте
// Обработчик события "ПередНачаломИзменения" поля "Отборы".
Процедура ОтборыПередНачаломИзменения(Элемент, Отказ)
	
	УПЖКХ_ТиповыеМетодыКлиент.ОтборыПередНачаломИзменения(ЭтаФорма, Элемент, Отказ);	
	
КонецПроцедуры

#КонецОбласти 

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ГРУППЫ ДОПОЛНИТЕЛЬНЫЕ ПОЛЯ

#Область ОбработчикиСобытийГруппыДополнительныеПоля

&НаКлиенте
// Обработчик события "ПриИзменении" поля "РазмещениеДополнительныхПолей".
Процедура РазмещениеДополнительныхПолейПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля "ДополнительныеПоля".
Процедура ДополнительныеПоляПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
// Обработчик события "ПередНачаломДобавления" поля "ДополнительныеПоля".
Процедура ДополнительныеПоляПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	УПЖКХ_ТиповыеМетодыКлиент.ДополнительныеПоляПередНачаломДобавления(ЭтаФорма, Элемент, Отказ,
																		Копирование, Родитель, Группа);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПередНачаломИзменения" поля "ДополнительныеПоля".
Процедура ДополнительныеПоляПередНачаломИзменения(Элемент, Отказ)
	
	УПЖКХ_ТиповыеМетодыКлиент.ДополнительныеПоляПередНачаломИзменения(ЭтаФорма, Элемент, Отказ);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "СнятьФлажки" поля "ДополнительныеПоля".
Процедура ДополнительныеПоляСнятьФлажки(Команда)
	
	Для каждого СтрокаТаблицы Из Отчет.ДополнительныеПоля Цикл
		СтрокаТаблицы.Использование = Ложь;
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "УстановитьФлажки" поля "ДополнительныеПоля".
Процедура ДополнительныеПоляУстановитьФлажки(Команда)
	
	Для каждого СтрокаТаблицы Из Отчет.ДополнительныеПоля Цикл
		СтрокаТаблицы.Использование = Истина;
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти 

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ГРУППЫ СОРТИРОВКА

#Область ОбработчикиСобытийГруппыСортировка

&НаКлиенте
// Обработчик события "УстановитьФлажки" поля "Сортировка".
Процедура СортировкаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	УПЖКХ_ТиповыеМетодыКлиент.СортировкаПередНачаломДобавления(ЭтаФорма, Элемент, Отказ, Копирование, Родитель, Группа);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПередНачаломИзменения" поля "Сортировка".
Процедура СортировкаПередНачаломИзменения(Элемент, Отказ)
	
	УПЖКХ_ТиповыеМетодыКлиент.СортировкаПередНачаломИзменения(ЭтаФорма, Элемент, Отказ);
	
КонецПроцедуры

#КонецОбласти 

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ГРУППЫ ОФОРМЛЕНИЕ

#Область ОбработчикиСобытийГруппыОформление

&НаКлиенте
// Обработчик события "ПриИзменении" поля "МакетОформления".
Процедура МакетОформленияПриИзменении(Элемент)
	
	УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьПараметрВывода(Отчет.КомпоновщикНастроек.Настройки,
																"МакетОформления", МакетОформления);
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля "ВыводитьЗаголовок".
Процедура ВыводитьЗаголовокПриИзменении(Элемент)

	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля "ВыводитьПодвал".
Процедура ВыводитьПодвалПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;

КонецПроцедуры

#КонецОбласти 
