#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Для формирования отчета в фоновом задании.
//
// Параметры:
//  ПараметрыОтчета - Структура - см. ПодготовитьПараметрыОтчета() в ФормаОтчета.
//  АдресХранилища - Строка - адрес временного хранилища, куда будет помещен результат формирования отчета.
//
Процедура СформироватьОтчет(Знач ПараметрыОтчета, АдресХранилища) Экспорт

	ПредставленияПериодичности = Новый Соответствие;
	ПредставленияПериодичности.Вставить(0, "");
	ПредставленияПериодичности.Вставить(9, "Месяц");
	ПредставленияПериодичности.Вставить(10, "Квартал");
	ПредставленияПериодичности.Вставить(11, "Полугодие");
	ПредставленияПериодичности.Вставить(12, "Год");
	
	ПараметрыОтчета.Вставить("ПредставленияПериодичности", ПредставленияПериодичности);
	
	ДокументРезультат = Новый ТабличныйДокумент;
	ДокументРезультат.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;

	ВыводитьЗаголовок = Истина;
	Если ПараметрыОтчета.Свойство("ВыводитьЗаголовок") Тогда
		ВыводитьЗаголовок = ПараметрыОтчета.ВыводитьЗаголовок;
	КонецЕсли;
	
	ПараметрыОтчета.Вставить("МассивШиринКолонок", Новый Массив);

	// Выполним общий запрос.
	Результат = ВыполнитьОбщийЗапрос(ПараметрыОтчета);
	
	Макет = ПолучитьМакет("ГлавнаяКнига");

	Если ВыводитьЗаголовок Тогда
		// Вывод заголовка отчета.
		ОбластьЗаголовка = СформироватьЗаголовок(ПараметрыОтчета);
		ВысотаЗаголовка = ОбластьЗаголовка.ВысотаТаблицы;
		ДокументРезультат.Вывести(ОбластьЗаголовка, 1);
	КонецЕсли;
	
	// Получим форматную строку для формирования наименований периодов.
	ФорматПериода = ПолучитьСтрокуФорматаПериода(ПараметрыОтчета.Периодичность);

	СтруктураПараметров = СформироватьСтруктуруПараметров(ДокументРезультат, Макет, ФорматПериода);

	ВыводитьРазвернутоеСальдо = Ложь;
	Для Каждого СтрокаТаблицы Из ПараметрыОтчета.РазвернутоеСальдо Цикл
		Если СтрокаТаблицы.Использование И ЗначениеЗаполнено(СтрокаТаблицы.Счет) Тогда
			ВыводитьРазвернутоеСальдо = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	// Вывод отчета.
	ВыборкаПоСчетам = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Счет");
	Пока ВыборкаПоСчетам.Следующий() Цикл
		// Если разбиваем по листам, то каждый счет печатается в своем документе.
		Если ПараметрыОтчета.РазбитьПоЛистам Тогда
			ДокументОтдельногоСчета = Новый ТабличныйДокумент;
			СтруктураПараметров.Вставить("ДокументРезультат", ДокументОтдельногоСчета);
		КонецЕсли;
		СтруктураПараметров.Вставить("Счет",              ВыборкаПоСчетам.Счет);
		СтруктураПараметров.Вставить("СчетПредставление", ВыборкаПоСчетам.СчетПредставление);

		Если ВыводитьРазвернутоеСальдо Тогда
			СтрокаРазвернутогоСальдо = НайтиСтрокуРазвернутогоСальдо(ПараметрыОтчета, ВыборкаПоСчетам.Счет);
			СтруктураПараметров.Вставить("РазвернутоеСальдо", СтрокаРазвернутогоСальдо <> Неопределено);
			СтруктураПараметров.Вставить("СтрокаРазвернутогоСальдо", СтрокаРазвернутогоСальдо);
		Иначе
			СтруктураПараметров.Вставить("РазвернутоеСальдо", Ложь);
			СтруктураПараметров.Вставить("СтрокаРазвернутогоСальдо", Неопределено);
		КонецЕсли;
		
		ВывестиСчет(ПараметрыОтчета, ВыборкаПоСчетам, СтруктураПараметров, ВыводитьЗаголовок);
		
		// Разобьем на страницы, если это необходимо.
		Если ПараметрыОтчета.РазбитьПоЛистам Тогда
			Если ДокументОтдельногоСчета.ВысотаТаблицы <> 0 Тогда
				ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
			Иначе
				Продолжить;
			КонецЕсли;
			
			ТабДок = Новый ТабличныйДокумент;
			ТабДок.ОриентацияСтраницы = ДокументРезультат.ОриентацияСтраницы;

			Начало = ДокументОтдельногоСчета.ПолучитьОбласть(, 1,, 1);
			Хвост  = ДокументОтдельногоСчета.ПолучитьОбласть(, 2,, ДокументОтдельногоСчета.ШиринаТаблицы);
			
			МассивТаблиц = Новый Массив;
			МассивТаблиц.Добавить(Хвост);
			
			ТабДок.Вывести(Начало);
			
			// Считаем что по высоте таблица счета всегда умещается на странице.
			Если ТабДок.ПроверитьПрисоединение(МассивТаблиц) Тогда
				// Если табличка по одному счету помещается на один лист, то сразу выводим ее.
				ПараметрыОтчета.Вставить("МассивШиринКолонок", Новый Массив);
				
				Ширина1 = ДокументРезультат.ШиринаТаблицы;
				Ширина2 = ДокументОтдельногоСчета.ШиринаТаблицы;
				Для к = Ширина1 + 1 По Ширина2 Цикл
					ПараметрыОтчета.МассивШиринКолонок.Добавить(ДокументОтдельногоСчета.Область(, к,, к).ШиринаКолонки);
				КонецЦикла;
				
				ДокументРезультат.Вывести(ДокументОтдельногоСчета);
				
				Для к = 0 По ПараметрыОтчета.МассивШиринКолонок.Количество()-1 Цикл
					ДокументРезультат.Область(, Ширина1 + 1 + к,, Ширина1 + 1 + к).ШиринаКолонки = ПараметрыОтчета.МассивШиринКолонок[к];
				КонецЦикла;
				
			Иначе
				// Если табличка по одному счету не помещается на один лист.
				
				НачальноеСмещение = Начало.ШиринаТаблицы + 1;
				н = НачальноеСмещение;
				
				ШиринаТаблицы = ДокументОтдельногоСчета.ШиринаТаблицы;
				Пока н <= ШиринаТаблицы Цикл
					
					МассивКолонок = Новый Массив;
					
					Для н = НачальноеСмещение По ШиринаТаблицы + 1 Цикл
						
						Если н = ШиринаТаблицы + 1 Тогда
							Прервать;
						КонецЕсли;
						
						МассивКолонок.Добавить(ДокументОтдельногоСчета.ПолучитьОбласть(, н,, н));
						
						Если Не ТабДок.ПроверитьПрисоединение(МассивКолонок) Тогда
							Прервать;
						КонецЕсли;
						
					КонецЦикла;
					
					ПоследнийЭлемент = МассивКолонок.Количество() - ?(н <= ШиринаТаблицы, 2, 1);
					
					Для к = 0 По ПоследнийЭлемент Цикл
						ТабДок.Присоединить(МассивКолонок[0]);
						МассивКолонок.Удалить(0);
					КонецЦикла;
					
					ПараметрыОтчета.Вставить("МассивШиринКолонок", Новый Массив);
					
					Ширина1 = ДокументРезультат.ШиринаТаблицы;
					Ширина2 = ТабДок.ШиринаТаблицы;
					Для к = Ширина1 + 1 По Ширина2 Цикл
						ПараметрыОтчета.МассивШиринКолонок.Добавить(ТабДок.Область(, к,, к).ШиринаКолонки);
					КонецЦикла;
					
					ДокументРезультат.Вывести(ТабДок);
					ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
					
					Для к = 0 По ПараметрыОтчета.МассивШиринКолонок.Количество() - 1 Цикл
						ДокументРезультат.Область(, Ширина1 + 1 + к,, Ширина1 + 1 + к).ШиринаКолонки = ПараметрыОтчета.МассивШиринКолонок[к];
					КонецЦикла;
					
					ТабДок.Очистить();
					ТабДок.Вывести(Начало);
					// Добавим надписи периодов.
					ТабДок.Присоединить(ДокументОтдельногоСчета.ПолучитьОбласть(, 2,, 2));
					
					НачальноеСмещение = н;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	ОбластьПодписи = СформироватьПодписи(ПараметрыОтчета);
	ДокументРезультат.Вывести(ОбластьПодписи, 1);
	
	ДокументРезультат.Области.Подписи.Видимость = ПараметрыОтчета.ВыводитьПодвал;
	
	// Отчет выведен.
	
	// Заполним общую расшифровку.
	СтруктураНастроекОтчета = Новый Структура;

	СтруктураНастроекОтчета.Вставить("Организация"  , ПараметрыОтчета.Организация);
	СтруктураНастроекОтчета.Вставить("НачалоПериода", ПараметрыОтчета.НачалоПериода);
	СтруктураНастроекОтчета.Вставить("КонецПериода" , ПараметрыОтчета.КонецПериода);
	СтруктураНастроекОтчета.Вставить("ПоказыватьЗаголовок", ВыводитьЗаголовок);

	ДокументРезультат.Область(1, 1).Расшифровка = СтруктураНастроекОтчета;
	
	// Первую колонку не печатаем.
	ДокументРезультат.ОбластьПечати = ДокументРезультат.Область(1, 2, ДокументРезультат.ВысотаТаблицы + 1, ДокументРезультат.ШиринаТаблицы);
	
	// Присвоим имя для сохранения параметров печати табличного документа.
	ДокументРезультат.КлючПараметровПечати = "ГлавнаяКнига";
	
	УправлениеКолонтитулами.УстановитьКолонтитулы(ДокументРезультат, НСтр("ru = 'Главная книга'"));
	
	ПоместитьВоВременноеХранилище(ПараметрыОтчета, ПараметрыОтчета.ДанныеРасшифровки);
	ПоместитьВоВременноеХранилище(ДокументРезультат, АдресХранилища);
	
КонецПроцедуры

// Выводит подписи отчета.
//
// Параметры:
//	ПараметрыОтчета - Структура - Содержит настройки формирования отчета. См. СформироватьПодписи().
//
// Возвращаемое значение:
//	ТабличныйДокумент - Табличный документ, содержащий область с подписями.
//
Функция СформироватьПодписи(ПараметрыОтчета) Экспорт

	ОбластьПодписи = ПолучитьМакет("ГлавнаяКнига").ПолучитьОбласть("Подписи");
	
	ДополнительныеПараметры = Новый Структура("Период,Организация,ОтветственноеЛицо", 
		ПараметрыОтчета.КонецПериода, 
		ПараметрыОтчета.Организация, 
		Перечисления.ОтветственныеЛицаОрганизаций.ОтветственныйЗаБухгалтерскиеРегистры);
		
	ДанныеОтветственногоЛица = БухгалтерскиеОтчетыВызовСервера.ПолучитьДанныеОтветственногоЛица(ДополнительныеПараметры);
	ОбластьПодписи.Параметры.Заполнить(ДанныеОтветственногоЛица);
	
	Возврат ОбластьПодписи;	

КонецФункции

// Инициализирует набор параметров, задающих флаги выполнения дополнительных действий над сущностями, обрабатываемыми
// в процессе формирования отчета.
//
// Возвращаемое значение:
//   Структура   - флаги, задающие необходимость дополнительных действий.
//
Функция ПолучитьПараметрыИсполненияОтчета() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ИспользоватьПередКомпоновкойМакета", Ложь);
	Результат.Вставить("ИспользоватьПослеКомпоновкиМакета",  Ложь);

	Возврат Результат;
							
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция СформироватьЗаголовок(ПараметрыОтчета)

	ОписаниеПериода = БухгалтерскиеОтчетыКлиентСервер.ПолучитьПредставлениеПериода(ПараметрыОтчета.НачалоПериода, ПараметрыОтчета.КонецПериода);
	
	Макет = ПолучитьМакет("ГлавнаяКнига");

	ЗаголовокОтчета = Макет.ПолучитьОбласть("Заголовок");
	ОбластьЗаголовок = Макет.Область("Заголовок");

	// После удаления областей нужно установить свойства ПоВыделеннымКолонкам.
	Для Индекс = 1 По ЗаголовокОтчета.ВысотаТаблицы - 1 Цикл
		Макет.Область(ОбластьЗаголовок.Верх + Индекс, 2, ОбластьЗаголовок.Верх + Индекс, 2).РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Переносить;
		Макет.Область(ОбластьЗаголовок.Верх + Индекс, 2, ОбластьЗаголовок.Верх + Индекс, ОбластьЗаголовок.Право).ПоВыделеннымКолонкам = Истина;
	КонецЦикла;

	ЗаголовокОтчета = Макет.ПолучитьОбласть("Заголовок");

	НазваниеОрганизации = ПараметрыОтчета.Организация.НаименованиеПолное;
	Если ПустаяСтрока(НазваниеОрганизации) Тогда
		НазваниеОрганизации = ПараметрыОтчета.Организация;
	КонецЕсли;

	ЗаголовокОтчета.Параметры.НазваниеОрганизации = НазваниеОрганизации;
	ЗаголовокОтчета.Параметры.ОписаниеПериода     = ОписаниеПериода;

	ТекстПроСписокПоказателей = "Выводимые данные: сумма";
	ТекстПроИтоги = "";
	ТекстПроИтоги = Сред(ТекстПроИтоги, 3);

	Если Не ПустаяСтрока(ТекстПроИтоги) Тогда
		ЗаголовокОтчета.Параметры.ТекстПроИтоги = "Детализация по " + ТекстПроИтоги;
	КонецЕсли;
	
	Если ПараметрыОтчета.ВыводитьЕдиницуИзмерения Тогда
		ЗаголовокОтчета.Параметры.ТекстПроИтоги = СокрЛП("" + ЗаголовокОтчета.Параметры.ТекстПроИтоги + Символы.ПС + "Единица измерения: рубль (код по ОКЕИ 383)");
	КонецЕсли;

	ЗаголовокОтчета.Параметры.Заголовок = "Главная книга";
	
	Возврат ЗаголовокОтчета;

КонецФункции

Функция СформироватьСтруктуруПараметров(ДокументРезультат, Макет, ФорматПериода)

	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ДокументРезультат", ДокументРезультат);
	СтруктураПараметров.Вставить("Макет", Макет);
	
	// Период.
	СтруктураПараметров.Вставить("ОбластьСтрокаПериод", Макет.ПолучитьОбласть("Строка|Период"));
	СтруктураПараметров.ОбластьСтрокаПериод.Область(1, 2).Формат = ФорматПериода;
	
	// Начальное сальдо.
	СтруктураПараметров.Вставить("ОбластьСтрокаСальдоНачДт", Макет.ПолучитьОбласть("Строка|СальдоНачДт"));
	СтруктураПараметров.Вставить("ОбластьСтрокаСальдоНачКт", Макет.ПолучитьОбласть("Строка|СальдоНачКт"));
	
	// Конечное сальдо.
	СтруктураПараметров.Вставить("ОбластьСтрокаСальдоКонДт", Макет.ПолучитьОбласть("Строка|СальдоКонДт"));
	СтруктураПараметров.Вставить("ОбластьСтрокаСальдоКонКт", Макет.ПолучитьОбласть("Строка|СальдоКонКт"));
	
	// Оборот.
	СтруктураПараметров.Вставить("ОбластьСтрокаОборотДт", Макет.ПолучитьОбласть("Строка|ОборотДт"));
	СтруктураПараметров.Вставить("ОбластьСтрокаОборотКт", Макет.ПолучитьОбласть("Строка|ОборотКт"));
	СтруктураПараметров.Вставить("ОбластьСтрокаОборотДтКорСчет", Макет.ПолучитьОбласть("Строка|ОборотДтКорСчет"));
	
	// По субконто.
	// Период.
	СтруктураПараметров.Вставить("ОбластьСтрокаСубконтоПериод", Макет.ПолучитьОбласть("СтрокаСубконто|Период"));
	
	// Начальное сальдо.
	СтруктураПараметров.Вставить("ОбластьСтрокаСубконтоСальдоНачДт", Макет.ПолучитьОбласть("СтрокаСубконто|СальдоНачДт"));
	СтруктураПараметров.Вставить("ОбластьСтрокаСубконтоСальдоНачКт", Макет.ПолучитьОбласть("СтрокаСубконто|СальдоНачКт"));
	
	// Конечное сальдо.
	СтруктураПараметров.Вставить("ОбластьСтрокаСубконтоСальдоКонДт", Макет.ПолучитьОбласть("СтрокаСубконто|СальдоКонДт"));
	СтруктураПараметров.Вставить("ОбластьСтрокаСубконтоСальдоКонКт", Макет.ПолучитьОбласть("СтрокаСубконто|СальдоКонКт"));
	
	// Оборот.
	СтруктураПараметров.Вставить("ОбластьСтрокаСубконтоОборотДт", Макет.ПолучитьОбласть("СтрокаСубконто|ОборотДт"));
	СтруктураПараметров.Вставить("ОбластьСтрокаСубконтоОборотКт", Макет.ПолучитьОбласть("СтрокаСубконто|ОборотКт"));
	СтруктураПараметров.Вставить("ОбластьСтрокаСубконтоОборотДтКорСчет", Макет.ПолучитьОбласть("СтрокаСубконто|ОборотДтКорСчет"));
	
	// По валютам.
	// Период.
	СтруктураПараметров.Вставить("ОбластьСтрокаВалютаПериод", Макет.ПолучитьОбласть("СтрокаВалюта|Период"));
	
	// Начальное сальдо.
	СтруктураПараметров.Вставить("ОбластьСтрокаВалютаСальдоНачДт", Макет.ПолучитьОбласть("СтрокаВалюта|СальдоНачДт"));
	СтруктураПараметров.Вставить("ОбластьСтрокаВалютаСальдоНачКт", Макет.ПолучитьОбласть("СтрокаВалюта|СальдоНачКт"));
	
	// Конечное сальдо.
	СтруктураПараметров.Вставить("ОбластьСтрокаВалютаСальдоКонДт", Макет.ПолучитьОбласть("СтрокаВалюта|СальдоКонДт"));
	СтруктураПараметров.Вставить("ОбластьСтрокаВалютаСальдоКонКт", Макет.ПолучитьОбласть("СтрокаВалюта|СальдоКонКт"));
	
	// Оборот.
	СтруктураПараметров.Вставить("ОбластьСтрокаВалютаОборотДт", Макет.ПолучитьОбласть("СтрокаВалюта|ОборотДт"));
	СтруктураПараметров.Вставить("ОбластьСтрокаВалютаОборотКт", Макет.ПолучитьОбласть("СтрокаВалюта|ОборотКт"));
	СтруктураПараметров.Вставить("ОбластьСтрокаВалютаОборотДтКорСчет", Макет.ПолучитьОбласть("СтрокаВалюта|ОборотДтКорСчет"));
	
	Возврат СтруктураПараметров;
	
КонецФункции

Функция ВыполнитьОбщийЗапрос(ПараметрыОтчета)

	Запрос = Новый Запрос;
	
	// Установим параметры.
	Запрос.УстановитьПараметр("Организация", ПараметрыОтчета.Организация);
	
	Запрос.УстановитьПараметр("НачалоПериода", ПараметрыОтчета.НачалоПериода);
	
	Если ПараметрыОтчета.НачалоПериода = '00010101000000' Тогда
		Запрос.УстановитьПараметр("НачалоПериода", ПараметрыОтчета.НачалоПериода + 1);
	КонецЕсли;
	
	Если ПараметрыОтчета.КонецПериода <> '00010101000000' Тогда
		Запрос.УстановитьПараметр("КонецПериода", КонецДня(ПараметрыОтчета.КонецПериода));
	Иначе
		Запрос.УстановитьПараметр("КонецПериода", ПараметрыОтчета.КонецПериода);
	КонецЕсли;
	
	// Сформируем текст запроса.
	Запрос.Текст = ПолучитьТекстОбщегоЗапроса(ПараметрыОтчета);
	
	Возврат Запрос.Выполнить();

КонецФункции

Функция ПолучитьТекстОбщегоЗапроса(ПараметрыОтчета)

	ПоПериодам = ЗначениеЗаполнено(ПараметрыОтчета.Периодичность);
	
	СтрокаОграниченийПоРеквизитам = "";
	ОтборПоОрганизации(СтрокаОграниченийПоРеквизитам, ПараметрыОтчета);
	
	Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Счета.Ссылка КАК Счет,
	|	Счета.Наименование КАК СчетНаименование,
	|	Счета.Родитель КАК СчетРодитель,
	|	Счета.Валютный КАК СчетВалютный,
	|	ПРЕДСТАВЛЕНИЕ(Счета.Ссылка) КАК СчетПредставление,"
	+ ?(ПоПериодам, "Обороты.Период КАК Период,", "") + "
	|	КорСчета.Ссылка КАК КорСчет,
	|	ПРЕДСТАВЛЕНИЕ(КорСчета.Ссылка) КАК КорСчетПредставление,
	|	Обороты.СуммаОборотДт КАК СуммаОборотДт,
	|	Обороты.СуммаОборотКт КАК СуммаОборотКт,
	|	КорСчета.Порядок КАК КорСчетПорядок,
	|	Счета.Порядок КАК СчетПорядок,
	|	NULL КАК СуммаНачДт,
	|	NULL КАК СуммаНачКт
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(&НачалоПериода, &КонецПериода, " + ПараметрыОтчета.ПредставленияПериодичности[ПараметрыОтчета.Периодичность] + ", , , " + СтрокаОграниченийПоРеквизитам + ", , ) КАК Обороты
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Хозрасчетный КАК Счета
	|			ПО Обороты.Счет = Счета.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Хозрасчетный КАК КорСчета
	|			ПО Обороты.КорСчет = КорСчета.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Счета.Ссылка,
	|	Счета.Наименование,
	|	Счета.Родитель,
	|	Счета.Валютный,
	|	ПРЕДСТАВЛЕНИЕ(Счета.Ссылка),"
	+ ?(ПоПериодам, "NULL КАК Период,", "") + "
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	Счета.Порядок,
	|	Остатки.СуммаОстатокДт,
	|	Остатки.СуммаОстатокКт
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(&НачалоПериода, , , " + СтрокаОграниченийПоРеквизитам + ") КАК Остатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Хозрасчетный КАК Счета
	|			ПО Остатки.Счет = Счета.Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	СчетПорядок,"
	+ ?(ПоПериодам, "Период,", "") + "
	|	КорСчетПорядок
	|ИТОГИ
	|	СУММА(СуммаОборотДт),
	|	СУММА(СуммаОборотКт),
	|	СУММА(СуммаНачДт),
	|	СУММА(СуммаНачКт)
	|ПО
	|	Счет " + ?(ПараметрыОтчета.ПоСубсчетам, "", "ИЕРАРХИЯ") + ","
	+ ?(ПоПериодам, "Период, ", "") + "
	|	КорСчет ИЕРАРХИЯ";
	
	Возврат Текст;
	
КонецФункции

Процедура ВывестиСчет(ПараметрыОтчета, ОбщийИтог, СтруктураПараметров, ПоказыватьЗаголовок)
	
	Если ПараметрыОтчета.ПоСубсчетам Тогда
		Если Не ЗначениеЗаполнено(ОбщийИтог.Счет) Тогда
			Возврат;
		КонецЕсли;
	Иначе
		Если ПропуститьСчет(ОбщийИтог.СчетРодитель) Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ВысотаУжеВыведеннойТаблицы = СтруктураПараметров.ДокументРезультат.ВысотаТаблицы;
	ШиринаВыводимогоРаздела = 0;
	
	БазовыйУровеньВыборки = ОбщийИтог.Уровень() + 1;
	
	// Вывод кор счетов с дебетовыми оборотами.
	Выборка = ОбщийИтог.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "КорСчет", "Все");
	
	СписокДт = Новый СписокЗначений;
	СтруктураПараметров.Вставить("СписокДт", СписокДт);
	
	СписокКт = Новый Соответствие;
	СтруктураПараметров.Вставить("СписокКт", СписокКт);
	
	СтруктураПараметров.ДокументРезультат.НачатьАвтогруппировкуСтрок();
	
	ВывестиШапкуТаблицы(ПараметрыОтчета, СтруктураПараметров, Выборка, ШиринаВыводимогоРаздела);
	
	// Списки значений хранят счета, по которым были обороты.
	ЗаполнитьТаблицуРазвернутыхОстатков(ПараметрыОтчета, СтруктураПараметров);
	
	Если ЗначениеЗаполнено(ПараметрыОтчета.Периодичность) Тогда
		ВывестиПериоды(ПараметрыОтчета, ОбщийИтог, СтруктураПараметров, Новый Соответствие, БазовыйУровеньВыборки);
	КонецЕсли;
	
	// Итого.
	ВывестиПодвалТаблицы(ПараметрыОтчета, ОбщийИтог, СтруктураПараметров, Выборка);
	
	СтруктураПараметров.ДокументРезультат.ЗакончитьАвтогруппировкуСтрок();
	
	// Обведение таблицы отчета линией, как в области границы.
	ОбластьИтогПериод = СтруктураПараметров.Макет.ПолучитьОбласть("Итог|Период");
	
	ТолстаяЛиния = ОбластьИтогПериод.Область(1, 2).ГраницаСверху;
	
	СтруктураПараметров.ДокументРезультат.Область(ВысотаУжеВыведеннойТаблицы + 3, 2, СтруктураПараметров.ДокументРезультат.ВысотаТаблицы, ШиринаВыводимогоРаздела).Обвести(ТолстаяЛиния, ТолстаяЛиния, ТолстаяЛиния, ТолстаяЛиния);
	
	ШиринаТаблицы = СтруктураПараметров.ДокументРезультат.ШиринаТаблицы;
	
	// Восстановление значений ширины колонок.
	Если ТипЗнч(ПараметрыОтчета.МассивШиринКолонок) = Тип("Массив") Тогда
		Если ПараметрыОтчета.МассивШиринКолонок.Количество() = ШиринаТаблицы Тогда
			Инд = 0;
			Для Каждого Элемент Из ПараметрыОтчета.МассивШиринКолонок Цикл
				СтруктураПараметров.ДокументРезультат.Область(, 1 + Инд, ,1 + Инд).ШиринаКолонки = Элемент;
				Инд = Инд + 1;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	// Заполним общую расшифровку.
	СтруктураНастроекОтчета = Новый Структура;
	
	СтруктураНастроекОтчета.Вставить("НачалоПериода", ПараметрыОтчета.НачалоПериода);
	СтруктураНастроекОтчета.Вставить("КонецПериода" , ПараметрыОтчета.КонецПериода);
	СтруктураНастроекОтчета.Вставить("Организация" , ПараметрыОтчета.Организация);
	СтруктураНастроекОтчета.Вставить("ПоказыватьЗаголовок", ПоказыватьЗаголовок);
	
	СтруктураПараметров.ДокументРезультат.Область(1,1).Расшифровка = СтруктураНастроекОтчета;
	
КонецПроцедуры

Процедура ВывестиШапкуТаблицы(ПараметрыОтчета, СтруктураПараметров, Выборка, ШиринаВыводимогоРаздела)
	
	ИмяСтроки = "ЗаголовокТаблицы";
	
	НачалоЗаголовка = СтруктураПараметров.Макет.ПолучитьОбласть(ИмяСтроки + "|Период");
	ШиринаВыводимогоРаздела = ШиринаВыводимогоРаздела + НачалоЗаголовка.ШиринаТаблицы;
	
	Выборка.Следующий();
	
	НачалоЗаголовка.Параметры.ОписаниеСчета = "Главная книга. Счет " + Выборка.СчетПредставление + " """ + Выборка.СчетНаименование + """";
	Если ЗначениеЗаполнено(ПараметрыОтчета.Периодичность) Тогда
		НачалоЗаголовка.Параметры.Заголовок = "Период";
	КонецЕсли;
	
	Выборка.Сбросить();
	
	СтруктураПараметров.ДокументРезультат.Вывести(НачалоЗаголовка, 0);
	
	МакетСальдоНачДт = СтруктураПараметров.Макет.ПолучитьОбласть(ИмяСтроки + "|СальдоНачДт");
	СтруктураПараметров.ДокументРезультат.Присоединить(МакетСальдоНачДт, 0);
	ШиринаВыводимогоРаздела = ШиринаВыводимогоРаздела + МакетСальдоНачДт.ШиринаТаблицы;
	
	МакетСальдоНачКт = СтруктураПараметров.Макет.ПолучитьОбласть(ИмяСтроки + "|СальдоНачКт");
	СтруктураПараметров.ДокументРезультат.Присоединить(МакетСальдоНачКт, 0);
	ШиринаВыводимогоРаздела = ШиринаВыводимогоРаздела + МакетСальдоНачКт.ШиринаТаблицы;
	
	ВерхнийУровень = 1000;
	Область = СтруктураПараметров.Макет.ПолучитьОбласть(ИмяСтроки + "|ОборотДтКорсчет");
	Пока Выборка.Следующий() Цикл
		// Это итог по строке остатка.
		Если Выборка.КорСчет = NULL Тогда
			Продолжить;
		КонецЕсли;		
		
		Если Не ПараметрыОтчета.ПоСубсчетамКорСчетов Тогда
			// Выводим только верхний уровень.
			Если ВерхнийУровень < Выборка.Уровень() Тогда
				Продолжить;
			Иначе
				ВерхнийУровень = Выборка.Уровень();
			КонецЕсли;
		КонецЕсли;		
		
		Если ЗначениеЗаполнено(ПараметрыОтчета.Периодичность) Тогда			
			ВыборкаПериод = Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Период", "Все");			
			Пока ВыборкаПериод.Следующий() Цикл
				Если ПривестиКЧислу(ВыборкаПериод.СуммаОборотДт) <> 0 Тогда
					СтруктураПараметров.СписокДт.Добавить(Выборка.КорСчет);
					
					Область.Параметры.Заполнить(Выборка);
					СтруктураПараметров.ДокументРезультат.Присоединить(Область, Выборка.Уровень()+1);
					ШиринаВыводимогоРаздела = ШиринаВыводимогоРаздела + Область.ШиринаТаблицы;
					Прервать;
				КонецЕсли;
			КонецЦикла;		
		Иначе		
			Если ПривестиКЧислу(Выборка.СуммаОборотДт) <> 0 Тогда
				СтруктураПараметров.СписокДт.Добавить(Выборка.КорСчет);
				
				Область.Параметры.Заполнить(Выборка);
				СтруктураПараметров.ДокументРезультат.Присоединить(Область, Выборка.Уровень() + 1);
				ШиринаВыводимогоРаздела = ШиринаВыводимогоРаздела + Область.ШиринаТаблицы;
			КонецЕсли;		
		КонецЕсли;
	КонецЦикла;
	
	МакетОборотДт = СтруктураПараметров.Макет.ПолучитьОбласть(ИмяСтроки + "|ОборотДт");
	СтруктураПараметров.ДокументРезультат.Присоединить(МакетОборотДт, 0);
	ШиринаВыводимогоРаздела = ШиринаВыводимогоРаздела + МакетОборотДт.ШиринаТаблицы;
	
	МакетОборотКт = СтруктураПараметров.Макет.ПолучитьОбласть(ИмяСтроки + "|ОборотКт");
	СтруктураПараметров.ДокументРезультат.Присоединить(МакетОборотКт, 0);
	ШиринаВыводимогоРаздела = ШиринаВыводимогоРаздела + МакетОборотКт.ШиринаТаблицы;
	
	МакетСальдоКонДт = СтруктураПараметров.Макет.ПолучитьОбласть(ИмяСтроки + "|СальдоКонДт");
	СтруктураПараметров.ДокументРезультат.Присоединить(МакетСальдоКонДт, 0);
	ШиринаВыводимогоРаздела = ШиринаВыводимогоРаздела + МакетСальдоКонДт.ШиринаТаблицы;
	
	МакетСальдоКонКт = СтруктураПараметров.Макет.ПолучитьОбласть(ИмяСтроки + "|СальдоКонКт");
	СтруктураПараметров.ДокументРезультат.Присоединить(МакетСальдоКонКт, 0);
	ШиринаВыводимогоРаздела = ШиринаВыводимогоРаздела + МакетСальдоКонКт.ШиринаТаблицы;
	
КонецПроцедуры

Функция ПривестиКЧислу(Значение)
	
	Если Значение = NULL Тогда
		Возврат 0;
	Иначе
		Возврат Значение;
	КонецЕсли;
	
КонецФункции

Процедура ЗаполнитьТаблицуРазвернутыхОстатков(ПараметрыОтчета, СтруктураПараметров)

	Если СтруктураПараметров.РазвернутоеСальдо Тогда
		ТекстПолей  = "";
		ТекстИтогов = "";
		Если СтруктураПараметров.СтрокаРазвернутогоСальдо.ПоСубсчетам Тогда
			ТекстПолей  = ТекстПолей + ", ОстаткиИОбороты.Счет";
			ТекстИтогов = ТекстИтогов + ", Счет ИЕРАРХИЯ";
		КонецЕсли;
		Если ЗначениеЗаполнено(СтруктураПараметров.СтрокаРазвернутогоСальдо.ПоСубконто) Тогда
			ПоСубконто = СтруктураПараметров.СтрокаРазвернутогоСальдо.ПоСубконто;
			КоличествоСубконто = СтрДлина(ПоСубконто) / 2;
			Для Индекс = 1 По КоличествоСубконто Цикл
				Если Сред(ПоСубконто, Индекс * 2 - 1, 1) = "+" Тогда
					ТекстПолей  = ТекстПолей + ", ОстаткиИОбороты.Субконто" + Сред(ПоСубконто, Индекс*2, 1);
					ТекстИтогов = ТекстИтогов + ", Субконто" + Сред(ПоСубконто, Индекс*2, 1);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		СтрокаОграниченийПоРеквизитам = "";
		ОтборПоОрганизации(СтрокаОграниченийПоРеквизитам, ПараметрыОтчета);
		
		ТекстЗапроса = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	" + ?(Не ЗначениеЗаполнено(ПараметрыОтчета.Периодичность), "", "ОстаткиИОбороты.Период КАК Период,") + "
		|	ОстаткиИОбороты.СуммаКонечныйРазвернутыйОстатокДт КАК СуммаРазвернутоКонДт,
		|	ОстаткиИОбороты.СуммаКонечныйРазвернутыйОстатокКт КАК СуммаРазвернутоКонКт,
		|	ОстаткиИОбороты.СуммаНачальныйРазвернутыйОстатокДт КАК СуммаРазвернутоНачДт,
		|	ОстаткиИОбороты.СуммаНачальныйРазвернутыйОстатокКт КАК СуммаРазвернутоНачКт"
		+ ТекстПолей + "
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.ОстаткиИОбороты(&НачалоПериода, &КонецПериода, " + ПараметрыОтчета.ПредставленияПериодичности[ПараметрыОтчета.Периодичность] + ", , Счет В (&Субсчета), , " + СтрокаОграниченийПоРеквизитам + ") КАК ОстаткиИОбороты
		|
		|" + ?(Не ЗначениеЗаполнено(ПараметрыОтчета.Периодичность), "", "УПОРЯДОЧИТЬ ПО
		|	Период") + "
		|ИТОГИ
		|	СУММА(СуммаРазвернутоКонДт),
		|	СУММА(СуммаРазвернутоКонКт),
		|	СУММА(СуммаРазвернутоНачДт),
		|	СУММА(СуммаРазвернутоНачКт)
		|ПО
		|	ОБЩИЕ" + ?(Не ЗначениеЗаполнено(ПараметрыОтчета.Периодичность), "", ", Период ПЕРИОДАМИ(" + ПараметрыОтчета.ПредставленияПериодичности[ПараметрыОтчета.Периодичность] + ", , )")
		+ ТекстИтогов;
				
		Запрос = Новый Запрос(ТекстЗапроса);
		
		Запрос.УстановитьПараметр("НачалоПериода", ПараметрыОтчета.НачалоПериода);
		
		Если ПараметрыОтчета.КонецПериода <> '00010101000000' Тогда
			Запрос.УстановитьПараметр("КонецПериода", КонецДня(ПараметрыОтчета.КонецПериода));
		Иначе
			Запрос.УстановитьПараметр("КонецПериода", ПараметрыОтчета.КонецПериода);
		КонецЕсли;

		Запрос.УстановитьПараметр("Организация", ПараметрыОтчета.Организация);
		Запрос.УстановитьПараметр("Субсчета",    БухгалтерскийУчетПовтИсп.СчетаВИерархии(СтруктураПараметров.Счет));
		
		ДеревоОстатков = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		СтруктураПараметров.Вставить("ДеревоОстатков", ДеревоОстатков);
	КонецЕсли;

КонецПроцедуры

Процедура ОтборПоОрганизации(СтрокаОграничения, ПараметрыОтчета)
	
	Если ПараметрыОтчета.ВключатьОбособленныеПодразделения Тогда
		ТекстОтбора = "(Организация = &Организация ИЛИ Организация.ГоловнаяОрганизация = &Организация)";
	ИначеЕсли ЗначениеЗаполнено(ПараметрыОтчета.Организация) Тогда
		ТекстОтбора = "Организация = &Организация";
	Иначе Возврат;
	КонецЕсли;
	
	СтрокаОграничения = ОбъединитьОграничения(СтрокаОграничения, ТекстОтбора);

КонецПроцедуры

Функция ОбъединитьОграничения(Знач Ограничение1, Знач Ограничение2, Знач СтрокаОбъединенияОграничений = "И")
	
	Если ПустаяСтрока(Ограничение1) Тогда
		Возврат Ограничение2;
	КонецЕсли;
	
	Если ПустаяСтрока(Ограничение2) Тогда
		Возврат Ограничение1;
	КонецЕсли;
	
	СтрокаОграничения = Ограничение1 + " " + СтрокаОбъединенияОграничений + " " + Ограничение2;
	
	Возврат СтрокаОграничения;
	
КонецФункции

Процедура ВывестиПериоды(ПараметрыОтчета, Выборка, СтруктураПараметров, ОтборДляРасшифровки, БазовыйУровеньВыборки = 0)
	
	ВыборкаПоПериодам = Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Период", "Счет");
	
	СуммаНачДт = 0;
	СуммаНачКт = 0;
	КоличествоНачДт = 0;
	КоличествоНачКт = 0;
	
	ОблНачало          = СтруктураПараметров.ОбластьСтрокаПериод;
	ОблОборотДт        = СтруктураПараметров.ОбластьСтрокаОборотДт;
	ОблОборотКт        = СтруктураПараметров.ОбластьСтрокаОборотКт;
	ОблОборотДтКорСчет = СтруктураПараметров.ОбластьСтрокаОборотДтКорСчет;
	ОблСальдоКонДт     = СтруктураПараметров.ОбластьСтрокаСальдоКонДт;
	ОблСальдоКонКт     = СтруктураПараметров.ОбластьСтрокаСальдоКонКт;
	ОблСальдоНачДт     = СтруктураПараметров.ОбластьСтрокаСальдоНачДт;
	ОблСальдоНачКт     = СтруктураПараметров.ОбластьСтрокаСальдоНачКт;
	
	// Идем по остаткам, т.к. там есть начпериоды без оборотов.
	Пока ВыборкаПоПериодам.Следующий() Цикл		
		// Сначала получим остатки.
		Если ВыборкаПоПериодам.Период = NULL Тогда			
		
			Если СтруктураПараметров.РазвернутоеСальдо Тогда
				
				ДеревоОстатков = СтруктураПараметров["ДеревоОстатков"];
				Если ДеревоОстатков.Строки.Количество() <> 0 Тогда 
					СтрокаОстатков = ДеревоОстатков.Строки[0];
					СуммаНачДт = СтрокаОстатков.СуммаРазвернутоНачДт;
					СуммаНачКт = СтрокаОстатков.СуммаРазвернутоНачКт;
				КонецЕсли;
			
			Иначе
		
				СуммаНачДт = ПривестиКЧислу(ВыборкаПоПериодам.СуммаНачДт);
				СуммаНачКт = ПривестиКЧислу(ВыборкаПоПериодам.СуммаНачКт);
				
				Если СуммаНачДт > СуммаНачКт Тогда
					СуммаНачДт = СуммаНачДт - СуммаНачКт;
					СуммаНачКт = 0;
				Иначе
					СуммаНачКт = СуммаНачКт - СуммаНачДт;
					СуммаНачДт = 0;
				КонецЕсли;
				
			КонецЕсли;
			
			// Остатки получили, пойдем за оборотами.
			Продолжить;
		КонецЕсли;
		
		Уровень = ВыборкаПоПериодам.Уровень();
		
		// Вывод начального сальдо.
		
		// Выводим начало строки.
		ОблНачало.Параметры.Заполнить(ВыборкаПоПериодам);
		ОблНачало.Область(1, 2, ОблНачало.ВысотаТаблицы, 2).Отступ = Уровень - БазовыйУровеньВыборки;
		
		// Расшифровка.
		Расшифровка = ПолучитьСоответствиеРасшифровки(ВыборкаПоПериодам, ОтборДляРасшифровки);
		Расшифровка.Вставить("Счет"             , СтруктураПараметров.Счет);
		Расшифровка.Вставить("СчетПредставление", СтруктураПараметров.СчетПредставление);
		ОблНачало.Параметры.Расшифровка = ПолучитьСписокРасшифровок(Расшифровка, Ложь);
		
		СтруктураПараметров.ДокументРезультат.Вывести(ОблНачало, Уровень - БазовыйУровеньВыборки + 1);
		
		// Вывод начального сальдо.
		ОблСальдоНачДт.Параметры.СуммаНачДт = СуммаНачДт;
		СтруктураПараметров.ДокументРезультат.Присоединить(ОблСальдоНачДт);
		
		ОблСальдоНачКт.Параметры.СуммаНачКт = СуммаНачКт;
		СтруктураПараметров.ДокументРезультат.Присоединить(ОблСальдоНачКт);
		
		// Одна выборку будем использовать для вывода дебетовых и кредитовых оборотов.
		ВыборкаОборотыПоКорСчетам = ВыборкаПоПериодам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "КорСчет");
		
		// Вывод вложенных итогов по кор счетам.
		ВывестиКорСчета(ПараметрыОтчета, ВыборкаОборотыПоКорСчетам, СтруктураПараметров, "ДТ", "Сумма", ОблОборотДтКорСчет, Расшифровка);
		
		// Оборот Дт.
		ОблОборотДт.Параметры.Заполнить(ВыборкаПоПериодам);
		
		СтруктураПараметров.ДокументРезультат.Присоединить(ОблОборотДт);
		
		// Оборот Кт.
		ОблОборотКт.Параметры.Заполнить(ВыборкаПоПериодам);
		РасшифровкаКт = СоздатьКопиюСоответствияСтруктуры(Расшифровка);
		РасшифровкаКт.Вставить("СчетКт",СтруктураПараметров.Счет);
		РасшифровкаКт.Удалить("СчетДт");
		ОблОборотКт.Параметры.Расшифровка = ПолучитьСписокРасшифровок(РасшифровкаКт);
		
		СтруктураПараметров.ДокументРезультат.Присоединить(ОблОборотКт);
		
		СуммаОборотДт = ПривестиКЧислу(ВыборкаПоПериодам.СуммаОборотДт);
		СуммаОборотКт = ПривестиКЧислу(ВыборкаПоПериодам.СуммаОборотКт);
		
		Если СтруктураПараметров.РазвернутоеСальдо Тогда
			
			СтрокаОстатков = ПолучитьСтрокуИзДереваОстатков(ПараметрыОтчета, СтруктураПараметров, ВыборкаПоПериодам.Период);
			
			Если СтрокаОстатков = Неопределено Тогда
				// Не нашли остатков вообще.
				СуммаКонДт = 0;
				СуммаКонКт = 0;
			Иначе
				Если ВыборкаПоПериодам.Период = NULL Тогда
					СуммаКонДт = ПривестиКЧислу(СтрокаОстатков.СуммаРазвернутоНачДт);
					СуммаКонКт = ПривестиКЧислу(СтрокаОстатков.СуммаРазвернутоНачКт);
				Иначе
					СуммаКонДт = ПривестиКЧислу(СтрокаОстатков.СуммаРазвернутоКонДт);
					СуммаКонКт = ПривестиКЧислу(СтрокаОстатков.СуммаРазвернутоКонКт);
				КонецЕсли;
			КонецЕсли;
			
		Иначе
			// Вывод оборота и кон сальдо.
			Если СуммаОборотДт <> 0
				ИЛИ СуммаОборотКт <> 0 Тогда
				
				СуммаКонДт = СуммаНачДт + СуммаОборотДт - СуммаОборотКт;
				СуммаКонКт = СуммаНачКт;
			Иначе
				СуммаКонДт = СуммаНачДт;
				СуммаКонКт = СуммаНачКт;
			КонецЕсли;
			
			Если СуммаКонДт > СуммаКонКт Тогда
				СуммаКонДт = СуммаКонДт - СуммаКонКт;
				СуммаКонКт = 0;
			Иначе
				СуммаКонКт = СуммаКонКт - СуммаКонДт;
				СуммаКонДт = 0;
			КонецЕсли;
		КонецЕсли;
		
		// Вывод конечного сальдо.
		ОблСальдоКонДт.Параметры.СуммаКонДт = СуммаКонДт;
		СтруктураПараметров.ДокументРезультат.Присоединить(ОблСальдоКонДт);
		
		ОблСальдоКонКт.Параметры.СуммаКонКт = СуммаКонКт;
		СтруктураПараметров.ДокументРезультат.Присоединить(ОблСальдоКонКт);

		// Нач.сальдо следующего периода равен кон.сальдо предыдущего.
		СуммаНачДт = СуммаКонДт;
		СуммаНачКт = СуммаКонКт;
	КонецЦикла;

КонецПроцедуры

// Формирование структуры данных для заполнения расшифровки.
//
// Параметры:
//  Выборка - Выборка из результата запроса.
//  ОтборСубконто - Структура - Отбор по субконто.
//
// Возвращаемое значение:
//   Соответствие - сформированная структура данных для расшифровки.
//
Функция ПолучитьСоответствиеРасшифровки(Выборка, ОтборСубконто = Неопределено)

	ПараметрыРасшифровки = Новый Соответствие;
	
	ПараметрыРасшифровки.Вставить("Счет"             , Выборка.Счет);
	ПараметрыРасшифровки.Вставить("СчетПредставление", Выборка.СчетПредставление);

	Если Лев(Выборка.Группировка(), СтрДлина(Выборка.Группировка()) - 1) = "Субконто" Тогда
		Если ОтборСубконто <> Неопределено Тогда			
			ОтборСубконто.Вставить(Выборка.Группировка(), Выборка[Выборка.Группировка()]);			
			
			// Область должна содержать свою копию отбора по субконто.
			ОтборРасшифровка = Новый Соответствие;			
			Для Каждого ЭлементОтбора Из ОтборСубконто Цикл			
				ОтборРасшифровка.Вставить(ЭлементОтбора.Ключ, ЭлементОтбора.Значение);			
			КонецЦикла; 			
			ПараметрыРасшифровки.Вставить("Отбор", ОтборРасшифровка);			
		КонецЕсли;
		
	ИначеЕсли Выборка.Группировка() = "Период" Тогда		
		Если ОтборСубконто <> Неопределено Тогда			
			ОтборСубконто.Вставить(Выборка.Группировка(), Выборка[Выборка.Группировка()]);			
			
			// Область должна содержать свою копию отбора по субконто.
			ОтборРасшифровка = Новый Соответствие;			
			Для каждого ЭлементОтбора Из ОтборСубконто Цикл			
				ОтборРасшифровка.Вставить(ЭлементОтбора.Ключ, ЭлементОтбора.Значение);			
			КонецЦикла; 			
			ПараметрыРасшифровки.Вставить("Отбор", ОтборРасшифровка);			
		КонецЕсли;
		
	ИначеЕсли Выборка.Группировка() = "Валюта" Тогда		
		Если ОтборСубконто <> Неопределено Тогда			
			ОтборСубконто.Вставить(Выборка.Группировка(), Выборка[Выборка.Группировка()]);
			
			// Область должна содержать свою копию отбора по субконто.
			ОтборРасшифровка = Новый Соответствие;			
			Для каждого ЭлементОтбора Из ОтборСубконто Цикл			
				ОтборРасшифровка.Вставить(ЭлементОтбора.Ключ, ЭлементОтбора.Значение);			
			КонецЦикла; 			
			ПараметрыРасшифровки.Вставить("Отбор", ОтборРасшифровка);			
		КонецЕсли;
	Иначе		
		ОтборРасшифровка = Новый Соответствие;
		ПараметрыРасшифровки.Вставить("Отбор", ОтборРасшифровка);		
	КонецЕсли;

	Возврат ПараметрыРасшифровки;
	
КонецФункции

// Формирование списка возможных расшифровок.
//
// Параметры:
//  ПараметрыРасшифровки - Соответствие - данные необходимые для построения расшифровочного отчета.
//
// Возвращаемое значение:
//   СписокЗначений - Список возможных расшифровок.
//
Функция ПолучитьСписокРасшифровок(ПараметрыРасшифровки, ОтчетПоПроводкам = Истина)
	
	Если ПараметрыРасшифровки <> Неопределено Тогда		
		СписокРасшифровки = Новый СписокЗначений;
		
		СтрокаСчета = ПараметрыРасшифровки.Получить("СчетПредставление");
		Если Не ЗначениеЗаполнено(СтрокаСчета) Тогда
			СтрокаСчета = Строка(ПараметрыРасшифровки.Получить("Счет"));
		КонецЕсли;
		
		КопияРасшифровки = СоздатьКопиюСоответствияСтруктуры(ПараметрыРасшифровки);
		КопияРасшифровки.Вставить("ИмяОбъекта", "ОборотыСчета");
		СписокРасшифровки.Добавить(КопияРасшифровки, "Обороты счета " + СтрокаСчета);
		
		Если ОтчетПоПроводкам Тогда
			КопияРасшифровки = СоздатьКопиюСоответствияСтруктуры(ПараметрыРасшифровки);
			КопияРасшифровки.Вставить("ИмяОбъекта", "ОтчетПоПроводкам");
			СписокРасшифровки.Добавить(КопияРасшифровки, "Отчет по проводкам");
		КонецЕсли;
	Иначе
		СписокРасшифровки = Неопределено;
	КонецЕсли;
	
	Возврат СписокРасшифровки;
	
КонецФункции

Процедура ВывестиКорСчета(ПараметрыОтчета, ВыборкаОборотыПоКорСчетам, СтруктураПараметров, ВидОборота, Ресурсы, ВыводимаяОбласть, РодительскаяРасшифровка=0)
	
	СтРесурсы = Новый Структура(Ресурсы);
	
	Если ВидОборота = "ДТ" Тогда		
		ТипПоля = "ОборотДт";
		
		СписокСчетов = СтруктураПараметров.СписокДт;		
	Иначе
		Возврат;
	КонецЕсли;
	
	// Создадим структуру соответствия кор счетов структуре ресурсов.
	Соотв = Новый Соответствие;
	Для Каждого Элемент Из СписокСчетов Цикл
		Соотв[Элемент.Значение] = Новый Структура(Ресурсы);
	КонецЦикла;

	ВерхнийУровень = 1000;
	
	// Обойдем выборку по счетам, получим все ненулевые значения ресурсов и поставим их в соответствие счетам.
	Пока ВыборкаОборотыПоКорСчетам.Следующий() Цикл
		
		// Это итог по строке остатка.
		Если ВыборкаОборотыПоКорСчетам.КорСчет = NULL Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не ПараметрыОтчета.ПоСубсчетамКорСчетов Тогда
			// Выводим только верхний уровень.
			Если ВерхнийУровень < ВыборкаОборотыПоКорСчетам.Уровень() Тогда
				Продолжить;
			Иначе
				ВерхнийУровень = ВыборкаОборотыПоКорСчетам.Уровень();
			КонецЕсли;
		КонецЕсли;
		
		СтЗначенияРесурсов = Новый Структура(Ресурсы);
		Вставлять = Ложь;
		
		Для Каждого Элемент Из СтРесурсы Цикл		
			Если НЕ ПривестиКЧислу(ВыборкаОборотыПоКорСчетам[Элемент.Ключ + ТипПоля]) = 0 И ВыборкаОборотыПоКорСчетам[Элемент.Ключ + ТипПоля] <> NULL Тогда
				СтЗначенияРесурсов.Вставить(Элемент.Ключ, ВыборкаОборотыПоКорСчетам[Элемент.Ключ + ТипПоля]);
				
				Вставлять = Истина;
			КонецЕсли;
		КонецЦикла;
		
		// Полученную структуру вставляем в соответствие счетов.
		Если Вставлять Тогда
			Соотв.Вставить(ВыборкаОборотыПоКорСчетам.КорСчет, СтЗначенияРесурсов);
		КонецЕсли;
		
	КонецЦикла;
	
	Счет = СтруктураПараметров.Счет;
	// Вывод ресурсов.
	Для Каждого ЭлементСчет Из СписокСчетов Цикл
		
		Для каждого Элемент Из Соотв[ЭлементСчет.Значение] Цикл
			ВыводимаяОбласть.Параметры[Элемент.Ключ + ТипПоля] = Элемент.Значение;
		КонецЦикла;
		
		Если ТипЗнч(РодительскаяРасшифровка) = Тип("Соответствие") Тогда
			Расшифровка = СоздатьКопиюСоответствияСтруктуры(РодительскаяРасшифровка);
			
			Расшифровка.Вставить("КорСчет", ЭлементСчет.Значение);
			
			Если ВидОборота = "ДТ" Тогда
				Расшифровка.Вставить("СчетДт", Счет);
				Расшифровка.Вставить("СчетКт", ЭлементСчет.Значение);
			КонецЕсли;
			
			ВыводимаяОбласть.Параметры.Расшифровка = ПолучитьСписокРасшифровок(Расшифровка);
		КонецЕсли;
		
		СтруктураПараметров.ДокументРезультат.Присоединить(ВыводимаяОбласть);
	КонецЦикла;

КонецПроцедуры

// Создание копии структуры или соответствия.
//
// Параметры:
//   СоотвИсх - Структура, Соответствие - Исходная структура, с которой будет создаваться копия.
//
// Возвращаемое значение:
//   Структура, Соответствие - Копия исходной структуры. Тип данных повторяет тип исходной структуры.
Функция СоздатьКопиюСоответствияСтруктуры(Знач СоответствиеИсточник)
	
	Если СоответствиеИсточник = Неопределено Тогда
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	КопияСоответствия = Новый (ТипЗнч(СоответствиеИсточник));
		
	Для Каждого ЭлементОтбора Из СоответствиеИсточник Цикл
				
		КопияСоответствия.Вставить(ЭлементОтбора.Ключ, ЭлементОтбора.Значение);
				
	КонецЦикла;
	
	Возврат КопияСоответствия;
	
КонецФункции

// Вывод таблички для отдельного счета.
// Получение строки остатков из дерева развернутого сальдо.
Функция ПолучитьСтрокуИзДереваОстатков(ПараметрыОтчета, СтруктураПараметров, ДатаПоиска)
	
	ДеревоОстатков = СтруктураПараметров["ДеревоОстатков"];
	
	ДатаОстатков = ?(ДатаПоиска = NULL, ПараметрыОтчета.НачалоПериода, ДатаПоиска);
	
	ОбщиеОстатки   = ДеревоОстатков.Строки[0];
	СтрокаОстатков = ОбщиеОстатки.Строки.Найти(ДатаОстатков, "Период", Ложь);
	
	// Строки на данную дату не нашли. Будем искать строки с более ранними датами.
	Если СтрокаОстатков = Неопределено Тогда
		
		Для Каждого стр Из ОбщиеОстатки.Строки Цикл
			
			Если стр.Период = NULL Тогда
				Продолжить;
			КонецЕсли;
			
			Если стр.Период <= ДатаОстатков Тогда
				СтрокаОстатков = стр;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат СтрокаОстатков;
	
КонецФункции

Процедура ВывестиПодвалТаблицы(ПараметрыОтчета, ОбщийИтог, СтруктураПараметров, Выборка)

	// Итого по отчету.
	ИмяСтроки = "Итог";
	
	ОблНачало = СтруктураПараметров.Макет.ПолучитьОбласть(ИмяСтроки + "|Период");
	
	Расшифровка = ПолучитьСоответствиеРасшифровки(ОбщийИтог, Новый Соответствие);
	Расшифровка.Вставить("Счет"             , СтруктураПараметров.Счет);
	Расшифровка.Вставить("СчетПредставление", СтруктураПараметров.СчетПредставление);
	ОблНачало.Параметры.Расшифровка = ПолучитьСписокРасшифровок(Расшифровка, Ложь);
	
	СтруктураПараметров.ДокументРезультат.Вывести(ОблНачало, 0);
	
	Если ЗначениеЗаполнено(ПараметрыОтчета.Периодичность) Тогда
		ВыборкаИтогПоСчету = ОбщийИтог.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Период", "Все");
		ВыборкаИтогПоСчету.Следующий();
	Иначе
		ВыборкаИтогПоСчету = ОбщийИтог;
	КонецЕсли;
	
	Если СтруктураПараметров.РазвернутоеСальдо Тогда
		ДеревоОстатков = СтруктураПараметров["ДеревоОстатков"];
		КолвоСтрок = ДеревоОстатков.Строки.Количество();
		
		Если КолвоСтрок <> 0 Тогда 
			СтрокаОстатков = ДеревоОстатков.Строки[0];
			СуммаНачДт = СтрокаОстатков.СуммаРазвернутоНачДт;
			СуммаНачКт = СтрокаОстатков.СуммаРазвернутоНачКт;
		Иначе
			СуммаНачДт = 0;
			СуммаНачКт = 0;
		КонецЕсли;
	КонецЕсли;

	Если Не СтруктураПараметров.РазвернутоеСальдо Тогда
		
		СуммаНачДт = ПривестиКЧислу(ВыборкаИтогПоСчету.СуммаНачДт);
		СуммаНачКт = ПривестиКЧислу(ВыборкаИтогПоСчету.СуммаНачКт);
		
		// Если это были начальные остатки, то надо двинуть выборку дальше.
		Если ЗначениеЗаполнено(ПараметрыОтчета.Периодичность) Тогда
			Если ВыборкаИтогПоСчету.Период = NULL Тогда
				ВыборкаИтогПоСчету.Следующий();
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Обл = СтруктураПараметров.Макет.ПолучитьОбласть(ИмяСтроки + "|СальдоНачДт");
	Обл.Параметры.СуммаНачДт = ?(СтруктураПараметров.РазвернутоеСальдо, СуммаНачДт, ?(СуммаНачДт > СуммаНачКт, СуммаНачДт - СуммаНачКт, 0));
	СтруктураПараметров.ДокументРезультат.Присоединить(Обл);
	
	Обл = СтруктураПараметров.Макет.ПолучитьОбласть(ИмяСтроки + "|СальдоНачКт");
	Обл.Параметры.СуммаНачКт = ?(СтруктураПараметров.РазвернутоеСальдо, СуммаНачКт, ?(СуммаНачКт > СуммаНачДт, СуммаНачКт - СуммаНачДт, 0));
	СтруктураПараметров.ДокументРезультат.Присоединить(Обл);
	
	// Вывод кор счетов с дебетовыми оборотами.
	Выборка.Сбросить();
	
	ВерхнийУровень = 1000;
	Обл = СтруктураПараметров.Макет.ПолучитьОбласть(ИмяСтроки + "|ОборотДтКорсчет");
	Пока Выборка.Следующий() Цикл
		
		// Это итог по строке остатка.
		Если Выборка.КорСчет = NULL Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не ПараметрыОтчета.ПоСубсчетамКорСчетов Тогда
			// Выводим только верхний уровень.
			Если ВерхнийУровень < Выборка.Уровень() Тогда
				Продолжить;
			Иначе
				ВерхнийУровень = Выборка.Уровень();
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ПараметрыОтчета.Периодичность) Тогда		
			ВыборкаПериод = Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Период", "Все");
			
			Пока ВыборкаПериод.Следующий() Цикл
				Если ПривестиКЧислу(ВыборкаПериод.СуммаОборотДт) <> 0 Тогда
					Обл.Параметры.Заполнить(Выборка);
					СтруктураПараметров.ДокументРезультат.Присоединить(Обл, Выборка.Уровень());
					Прервать;
				КонецЕсли;
			КонецЦикла;			
		Иначе			
			Если ПривестиКЧислу(Выборка.СуммаОборотДт) <> 0 Тогда
				Обл.Параметры.Заполнить(Выборка);
				СтруктураПараметров.ДокументРезультат.Присоединить(Обл, Выборка.Уровень());
			КонецЕсли;			
		КонецЕсли;
	КонецЦикла;
	
	Обл = СтруктураПараметров.Макет.ПолучитьОбласть(ИмяСтроки + "|ОборотДт");
	Обл.Параметры.Заполнить(ОбщийИтог);
	СтруктураПараметров.ДокументРезультат.Присоединить(Обл);
	
	Обл = СтруктураПараметров.Макет.ПолучитьОбласть(ИмяСтроки + "|ОборотКт");
	Обл.Параметры.Заполнить(ОбщийИтог);
	СтруктураПараметров.ДокументРезультат.Присоединить(Обл);
	
	// Получим конечное сальдо.
	Если Не СтруктураПараметров.РазвернутоеСальдо Тогда	
		СуммаКонДт = СуммаНачДт + ПривестиКЧислу(ОбщийИтог.СуммаОборотДт) - ПривестиКЧислу(ОбщийИтог.СуммаОборотКт);
		СуммаКонКт = СуммаНачКт;		
	Иначе		
		КолвоСтрок = ДеревоОстатков.Строки.Количество();		
		Если КолвоСтрок <> 0 Тогда			
			СтрокаОстатков = ДеревоОстатков.Строки[0];
			
			СуммаКонДт = СтрокаОстатков.СуммаРазвернутоКонДт;
			СуммаКонКт = СтрокаОстатков.СуммаРазвернутоКонКт;			
		Иначе
			СуммаКонДт = 0;
			СуммаКонКт = 0;
		КонецЕсли;
	КонецЕсли;
	
	Если Не СтруктураПараметров.РазвернутоеСальдо Тогда		
		Если СуммаКонДт > СуммаКонКт Тогда
			СуммаКонДт = СуммаКонДт - СуммаКонКт;
			СуммаКонКт = 0;
		Иначе
			СуммаКонКт = СуммаКонКт - СуммаКонДт;
			СуммаКонДт = 0;
		КонецЕсли;	
	КонецЕсли;
		
	Обл = СтруктураПараметров.Макет.ПолучитьОбласть(ИмяСтроки + "|СальдоКонДт");
	Обл.Параметры.СуммаКонДт = СуммаКонДт;
	СтруктураПараметров.ДокументРезультат.Присоединить(Обл);
	
	Обл = СтруктураПараметров.Макет.ПолучитьОбласть(ИмяСтроки + "|СальдоКонКт");
	Обл.Параметры.СуммаКонКт = СуммаКонКт;
	СтруктураПараметров.ДокументРезультат.Присоединить(Обл);

КонецПроцедуры

Функция ПолучитьСтрокуФорматаПериода(Периодичность)
	
	ФорматПериода = "";
	Если ЗначениеЗаполнено(Периодичность) Тогда
		Если Периодичность = 12 Тогда
			ФорматПериода = "ДФ = ""гггг """"г.""""""";
		ИначеЕсли Периодичность = 11 Тогда
			ФорматПериода = "ДФ = """"""Полугодие с"""" дд.ММ.гггг """"""";
		ИначеЕсли Периодичность = 10 Тогда
			ФорматПериода = "ДФ = ""к"""" квартал"""" гггг """"г.""""""";
		ИначеЕсли Периодичность = 9 Тогда
			ФорматПериода = "ДФ = ""ММММ гггг """"г.""""""";
		КонецЕсли;
	КонецЕсли;
	
	Возврат ФорматПериода;
	
КонецФункции

Функция ПропуститьСчет(Сч)

	Результат = Ложь;
	
	Если Сч = NULL Тогда
		Результат = Истина;
	Иначе
		Если Не Сч.Пустая() Тогда
			Результат = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

// Возвращает строку с настройками развернутого сальдо для указанного счета.
//
Функция НайтиСтрокуРазвернутогоСальдо(ПараметрыОтчета, Счет)

	Если НЕ ЗначениеЗаполнено(Счет) Тогда
		Возврат Неопределено;
	КонецЕсли;

	// Сначала пытаемся найти настройку для самого указанного счета.
	СтрокаРазвернутогоСальдо = ПараметрыОтчета.РазвернутоеСальдо.Найти(Счет, "Счет");
	Если СтрокаРазвернутогоСальдо <> Неопределено Тогда
		Возврат СтрокаРазвернутогоСальдо;
	КонецЕсли;

	// Возможно, настройка для развернутого сальдо задана для счета-группы, а выводим в отчет по субсчетам.
	// Поэтому попробуем найти с учетом иерархии.
	Если ПараметрыОтчета.РазвернутоеСальдо.Колонки.Найти("Субсчета") = Неопределено Тогда
		// Добавляем колонку для хранения списка субсчетов, чтобы их получать один раз при первом обращении.
		ПараметрыОтчета.РазвернутоеСальдо.Колонки.Добавить("Субсчета");
	КонецЕсли;
	
	Для каждого СтрокаРазвернутогоСальдо Из ПараметрыОтчета.РазвернутоеСальдо Цикл
		
		Если НЕ СтрокаРазвернутогоСальдо.Использование
			ИЛИ НЕ ЗначениеЗаполнено(СтрокаРазвернутогоСальдо.Счет) Тогда
			Продолжить;
		КонецЕсли;
	
		Если СтрокаРазвернутогоСальдо.Субсчета = Неопределено Тогда
			// Для счета еще не составляли список субсчетов, заполним его сейчас.
			СтрокаРазвернутогоСальдо.Субсчета = БухгалтерскийУчетПовтИсп.СчетаВИерархии(СтрокаРазвернутогоСальдо.Счет);
		КонецЕсли;
		
		Если СтрокаРазвернутогоСальдо.Субсчета.Найти(Счет) <> Неопределено Тогда
			Возврат СтрокаРазвернутогоСальдо;
		КонецЕсли;
		
	КонецЦикла;
	
	// Не нашли настройку для вывода развернутого сальдо.
	Возврат Неопределено;

КонецФункции

#КонецОбласти

#КонецЕсли