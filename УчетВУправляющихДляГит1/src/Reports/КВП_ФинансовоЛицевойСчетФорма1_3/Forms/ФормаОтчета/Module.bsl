&НаКлиенте
Перем ПараметрыОбработчикаОжидания; // Хранит параметры обработчика ожидания.

#Область ПроцедурыИФункцииОбщегоНазначения

&НаСервереБезКонтекста
// Функция возвращает данные л/с по владельцу.
Функция ПолучитьДанныеЛСПоСобственнику(Дата, ОтветственныйВладелец)
	
	СтруктураЛС = Новый Структура("ЛицевойСчет, Адрес");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчетаСрезПоследних.ЛицевойСчет,
	|	УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчетаСрезПоследних.ЛицевойСчет.Адрес КАК Адрес
	|ИЗ
	|	РегистрСведений.УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчета.СрезПоследних(&Дата, ОтветственныйВладелец = &ВыбранноеЗначение) КАК УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчетаСрезПоследних";
	Запрос.УстановитьПараметр("Дата",              Дата);
	Запрос.УстановитьПараметр("ВыбранноеЗначение", ОтветственныйВладелец);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(СтруктураЛС, Выборка);
	КонецЕсли;
	
	Возврат СтруктураЛС;
	
КонецФункции

&НаСервере
// Возвращает таблицу лицевых счетов.
Функция ПолучитьСписокЛицевыхСчетов(Адрес)

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_ЛицевыеСчетаСрезПоследних.ЛицевойСчет
	|ИЗ
	|	РегистрСведений.КВП_ЛицевыеСчета.СрезПоследних(&Дата, Объект = &Помещение) КАК КВП_ЛицевыеСчетаСрезПоследних";

	Запрос.УстановитьПараметр("Дата",      КонецДня(Отчет.КонецПериода));
	Запрос.УстановитьПараметр("Помещение", Адрес);

	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ЛицевойСчет");

КонецФункции // ПолучитьТаблицуЛицевыхСчетов()

&НаСервере
// Заполняет поле Проживающий, если по лицевому счету он один.
Процедура ЗаполнитьПолучателя(ВыбранноеЗначение)

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЕСТЬNULL(УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.Жилец, УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчетаСрезПоследних.ОтветственныйВладелец) КАК Жилец
	|ИЗ
	|	РегистрСведений.УПЖКХ_СведенияОЗарегистрированных.СрезПоследних(
	|			&Дата,
	|			ЛицевойСчет = &ЛицевойСчет
	|				И ДатаИзменения <= &Дата) КАК УПЖКХ_СведенияОЗарегистрированныхСрезПоследних
	|		ПОЛНОЕ СОЕДИНЕНИЕ РегистрСведений.УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчета.СрезПоследних(&Дата, ЛицевойСчет = &ЛицевойСчет) КАК УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчетаСрезПоследних
	|		ПО УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.ЛицевойСчет = УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчетаСрезПоследних.ЛицевойСчет";
	
	Запрос.УстановитьПараметр("Дата",        Отчет.КонецПериода);
	Запрос.УстановитьПараметр("ЛицевойСчет", ВыбранноеЗначение);
	
	ТаблицаРезультат = Запрос.Выполнить().Выгрузить();
	Отчет.Проживающий = ?(ТаблицаРезультат.Количество() > 0, ТаблицаРезультат[0].Жилец, Справочники.УПЖКХ_Жильцы.ПустаяСсылка());
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
// Обработчик события "ПриСозданииНаСервере" формы.
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Отчет.Организация   = УПЖКХ_ТиповыеМетодыВызовСервера.ПолучитьОсновнуюОрганизацию();
	Отчет.Ответственный = УПЖКХ_ТиповыеМетодыКлиентСервер.ТекущийПользователь();
	
	ТекРабДата          = УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьРабочуюДату();
	Отчет.НачалоПериода = НачалоМесяца(ДобавитьМесяц(ТекРабДата, -5));
	Отчет.КонецПериода  = КонецМесяца(ТекРабДата);
	
	НачалоПериодаСтрока = УПЖКХ_РаботаСДиалогамиКлиентСервер.ДатаКакМесяцПредставление(Отчет.НачалоПериода);
	КонецПериодаСтрока = УПЖКХ_РаботаСДиалогамиКлиентСервер.ДатаКакМесяцПредставление(Отчет.КонецПериода);
	
	СтруктураПараметров = УПЖКХ_ТиповыеМетодыВызовСервера.ХранилищеОбщихНастроекЗагрузить("ФинансовоЛицевойСчетФорма1_3");
	
	Если НЕ СтруктураПараметров = Неопределено Тогда
		СтруктураПараметров.Свойство("ФинансовоЛицевойСчетФорма1_3_Номер", НомерСчета);
		СтруктураПараметров.Свойство("НастройкаВидовУдобств",              Отчет.НастройкаВидовУдобств);
		СтруктураПараметров.Свойство("ВыводитьОтветственного",             Отчет.ВыводитьОтветственного);
		
		Если НомерСчета = Неопределено Тогда
			НомерСчета = 1;
		КонецЕсли;
		
		Отчет.Номер = НомерСчета;
		
	КонецЕсли;
	
	Параметры.Свойство("ЛицевойСчет", Отчет.ЛицевойСчет);
	Параметры.Свойство("Адрес",       Отчет.Адрес);
	Параметры.Свойство("Проживающий", Отчет.Проживающий);
	Параметры.Свойство("СформироватьПриОткрытии", СформироватьПриОткрытии);
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриОткрытии" формы.
Процедура ПриОткрытии(Отказ)
	
	Если СформироватьПриОткрытии Тогда
		СформироватьОтчет(Команды.СформироватьОтчет);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПередЗакрытием" формы.
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ЗавершениеРаботы Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	ОтменитьВыполнениеЗаданияНаСервере();
	
	Попытка
		НомерСчета = Число(Отчет.Номер) + 1;
	Исключение
		НомерСчета = НомерСчета + 1;
	КонецПопытки;
	
	СтруктураПараметров = Новый Структура;
	
	СтруктураПараметров.Вставить("ФинансовоЛицевойСчетФорма1_3_Номер", Число(Формат(НомерСчета, "ЧГ=0")));
	СтруктураПараметров.Вставить("НастройкаВидовУдобств",              Отчет.НастройкаВидовУдобств);
	СтруктураПараметров.Вставить("ВыводитьОтветственного",             Отчет.ВыводитьОтветственного);
	
	УПЖКХ_ТиповыеМетодыВызовСервера.ХранилищеОбщихНастроекСохранить("ФинансовоЛицевойСчетФорма1_3",, СтруктураПараметров);
	
КонецПроцедуры

&НаСервере
// Процедура возникает при сохранении настроек на сервере.
Процедура ПриСохраненииПользовательскихНастроекНаСервере(Настройки)
	
	УПЖКХ_ТиповыеМетодыВызовСервера.ПриСохраненииПользовательскихНастроекНаСервере(ЭтаФорма, Настройки);
	
КонецПроцедуры

&НаСервере
// Процедура возникает при загрузке настроек на сервере.
Процедура ПриЗагрузкеПользовательскихНастроекНаСервере(Настройки)
	
	УПЖКХ_ТиповыеМетодыВызовСервера.ПриЗагрузкеПользовательскихНастроекНаСервере(ЭтаФорма, Настройки);
	
	УправлениеФормой(ЭтаФорма);
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
// Обработчик события "ПриИзменении" поля "НачалоПериодаСтрока".
Процедура НачалоПериодаСтрокаПриИзменении(Элемент)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВводМесяцаПриИзменении(ЭтаФорма, "Отчет.НачалоПериода", "НачалоПериодаСтрока");
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "НачалоВыбора" поля "НачалоПериодаСтрока".
Процедура НачалоПериодаСтрокаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВводМесяцаНачалоВыбора(ЭтаФорма, ЭтаФорма, "Отчет.НачалоПериода", "НачалоПериодаСтрока", Ложь);
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
КонецПроцедуры // НачалоПериодаСтрокаНачалоВыбора()

&НаКлиенте
// Обработчик события "Регулирование" поля "НачалоПериодаСтрока".
Процедура НачалоПериодаСтрокаРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВводМесяцаРегулирование(ЭтаФорма, "Отчет.НачалоПериода", "НачалоПериодаСтрока",
														Направление);
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ОкончаниеВводаТекста" поля " НачалоПериодаСтрока".
Процедура НачалоПериодаСтрокаОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВводМесяцаОкончаниеВводаТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "АвтоПодбор" поля "НачалоПериодаСтрока".
Процедура НачалоПериодаСтрокаАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВводМесяцаАвтоПодборТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля "КонецПериодаСтрока".
Процедура КонецПериодаСтрокаПриИзменении(Элемент)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВводМесяцаПриИзменении(ЭтаФорма, "Отчет.КонецПериода", "КонецПериодаСтрока");
	
	Отчет.КонецПериода = КонецМесяца(Отчет.КонецПериода);
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "НачалоВыбора" поля "КонецПериодаСтрока".
Процедура КонецПериодаСтрокаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВводМесяцаНачалоВыбора(ЭтаФорма, ЭтаФорма, "Отчет.КонецПериода", "КонецПериодаСтрока", Ложь);
	
	Отчет.КонецПериода = КонецМесяца(Отчет.КонецПериода);
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "Регулирование" поля "КонецПериодаСтрока".
Процедура КонецПериодаСтрокаРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВводМесяцаРегулирование(ЭтаФорма, "Отчет.КонецПериода", "КонецПериодаСтрока", Направление);
	
	Отчет.КонецПериода = КонецМесяца(Отчет.КонецПериода);
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ОкончаниеВводаТекста" поля "КонецПериодаСтрока".
Процедура КонецПериодаСтрокаОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВводМесяцаОкончаниеВводаТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "АвтоПодбор" поля "КонецПериодаСтрока".
Процедура КонецПериодаСтрокаАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВводМесяцаАвтоПодборТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля "Организация".
Процедура ОрганизацияПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля "Проживающий".
Процедура ПроживающийПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля флажка "ВыводитьОтветственного".
Процедура ВыводитьОтветственногоПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "НачалоВыбора" поля "Проживающий".
Процедура ПроживающийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	предЗначение = Отчет.Проживающий;
	
	Если ЗначениеЗаполнено(Отчет.ЛицевойСчет) И ТипЗнч(Отчет.Проживающий) = Тип("СправочникСсылка.УПЖКХ_Жильцы") Тогда
		СтандартнаяОбработка = Ложь;
		
		ПараметрыФормы = Новый Структура("Отбор", Новый Структура("Владелец", Отчет.ЛицевойСчет));
		ДопПараметры   = Новый Структура("предЗначение", предЗначение);
		ОткрытьФорму("Справочник.УПЖКХ_Жильцы.ФормаВыбора",
					 ПараметрыФормы,
					 ЭтаФорма,,,,
					 Новый ОписаниеОповещения("ОбработатьРезультатВыбораПроживающийНачалоВыбора", ЭтаФорма, ДопПараметры),
					 РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ПроживающийНачалоВыбора()

&НаКлиенте
// Обработчик результата выбора, вызванного в процедуре "ПроживающийНачалоВыбора()".
Процедура ОбработатьРезультатВыбораПроживающийНачалоВыбора(ВыбранноеЗначение, ДополнительныеПараметры) Экспорт
	
	Если Не ВыбранноеЗначение = Неопределено Тогда
		Отчет.Проживающий = ВыбранноеЗначение;
	КонецЕсли;
	
	ТекЛицевойСчет    = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(ВыбранноеЗначение, "Владелец");
	Отчет.Адрес       = ?(ЗначениеЗаполнено(ВыбранноеЗначение), УПЖКХ_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(ТекЛицевойСчет, "Адрес"), Отчет.Адрес);
	Отчет.ЛицевойСчет = ?(ЗначениеЗаполнено(ВыбранноеЗначение), ТекЛицевойСчет, Отчет.ЛицевойСчет);
	
КонецПроцедуры // ОбработатьРезультатВыбораПроживающийНачалоВыбора()

&НаКлиенте
// Обработчик события "ОбработкаВыбора" поля "Проживающий".
Процедура ПроживающийОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.УПЖКХ_Жильцы") Тогда
		Отчет.ЛицевойСчет = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(ВыбранноеЗначение, "Владелец");
		Отчет.Адрес = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(Отчет.ЛицевойСчет, "Адрес");
	КонецЕсли;
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.Контрагенты") Тогда
		СтруктураЛС = ПолучитьДанныеЛСПоСобственнику(Отчет.КонецПериода, ВыбранноеЗначение);
		Отчет.ЛицевойСчет = СтруктураЛС.ЛицевойСчет;
		Отчет.Адрес       = СтруктураЛС.Адрес;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "Очистка" поля "Проживающий".
Процедура ПроживающийОчистка(Элемент, СтандартнаяОбработка)
	
	Отчет.Адрес = "";
	Отчет.ЛицевойСчет = "";
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "НачалоВыбора" поля "ЛицевойСчет".
Процедура ЛицевойСчетНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	предЛицевойСчет = Отчет.ЛицевойСчет;
	
	Если ЗначениеЗаполнено(Отчет.Адрес) Тогда
		
		МассивЛС = ПолучитьСписокЛицевыхСчетов(Отчет.Адрес);
		
		Если МассивЛС.Количество() > 0 Тогда
			
			СтандартнаяОбработка = Ложь;
			
			ПараметрыФормы = Новый Структура("Отбор", Новый Структура("Адрес", Отчет.Адрес));
			
			ДопПараметры   = Новый Структура("предЛицевойСчет", предЛицевойСчет);
			ОткрытьФорму("Справочник.КВП_ЛицевыеСчета.ФормаВыбора",
						 ПараметрыФормы,
						 ЭтаФорма,,,,
						 Новый ОписаниеОповещения("ОбработатьРезультатВыбораЛицевойСчетНачалоВыбора", ЭтаФорма, ДопПараметры),
						 РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			// Установим отображение списка.
			Для Каждого текОкно Из ПолучитьОкна() Цикл
				Для Каждого текСодержимое Из текОкно.Содержимое Цикл
					Если текСодержимое.ВладелецФормы = ЭтаФорма Тогда
						текСодержимое.Элементы.Список.Отображение = ОтображениеТаблицы.Список;
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
			
			Возврат;
		КонецЕсли;
		
	ИначеЕсли ЗначениеЗаполнено(Отчет.Проживающий) Тогда
		
		// Данная ветка упрощена.
		СтруктураЛС = ПолучитьДанныеЛСПоСобственнику(Отчет.КонецПериода, Отчет.Проживающий);
		
		Отчет.ЛицевойСчет = СтруктураЛС.ЛицевойСчет;
		Отчет.Адрес       = СтруктураЛС.Адрес;
		
	КонецЕсли;
	
КонецПроцедуры // ЛицевойСчетНачалоВыбора()

&НаКлиенте
// Обработчик результата выбора, вызванного в процедуре "ПроживающийНачалоВыбора()".
Процедура ОбработатьРезультатВыбораЛицевойСчетНачалоВыбора(ВыбранноеЗначение, ДополнительныеПараметры) Экспорт
	
	предЛицевойСчет   = ДополнительныеПараметры.предЛицевойСчет;
	Отчет.ЛицевойСчет = ?(ЗначениеЗаполнено(ВыбранноеЗначение), ВыбранноеЗначение, предЛицевойСчет);
	Отчет.Адрес       = ?(ЗначениеЗаполнено(ВыбранноеЗначение), УПЖКХ_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(ВыбранноеЗначение, "Адрес"),
								 ?(ЗначениеЗаполнено(предЛицевойСчет), УПЖКХ_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(предЛицевойСчет, "Адрес"), Отчет.Адрес));
	
	Если Отчет.ЛицевойСчет <> предЛицевойСчет Тогда
		ЗаполнитьПолучателя(Отчет.ЛицевойСчет);
		Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ОбработатьРезультатВыбораЛицевойСчетНачалоВыбора()

&НаКлиенте
// Обработчик события "ОбработкаВыбора" поля "ЛицевойСчет".
Процедура ЛицевойСчетОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Отчет.Адрес = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(ВыбранноеЗначение, "Адрес");
	
	ЗаполнитьПолучателя(ВыбранноеЗначение);
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "НачалоВыбора" поля "Адрес".
Процедура АдресНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	предАдрес            = Отчет.Адрес;
	
	Если ЗначениеЗаполнено(Отчет.ЛицевойСчет) Тогда
		
		ТекАдрес = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(Отчет.ЛицевойСчет, "Адрес");
		ТекЗдание = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(ТекАдрес, "Владелец");
		
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("Владелец", ТекЗдание);
		
		ФормаВыбора = ПолучитьФорму("Справочник.УПЖКХ_Помещения.ФормаВыбора", Новый Структура("Отбор", СтруктураОтбора));
		
		УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьЭлементОтбора(ФормаВыбора.Список.Отбор, "Наименование", УПЖКХ_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(ТекАдрес, "Наименование"));
		
	Иначе
		
		ФормаВыбора = ПолучитьФорму("Справочник.УПЖКХ_Помещения.ФормаВыбора");
		
	КонецЕсли;
	
	ДопПараметры = Новый Структура("предАдрес", предАдрес);
	ФормаВыбора.ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения("ОбработатьРезультатВыбораАдресНачалоВыбора", ЭтаФорма, ДопПараметры);
	
	ФормаВыбора.Открыть();
	
КонецПроцедуры // АдресНачалоВыбора()

&НаКлиенте
// Обработчик результата выбора, вызванного в процедуре "АдресНачалоВыбора()".
Процедура ОбработатьРезультатВыбораАдресНачалоВыбора(ВыбранноеЗначение, ДополнительныеПараметры) Экспорт
	
	предАдрес = ДополнительныеПараметры.предАдрес;
	
	Отчет.Адрес = ?(ЗначениеЗаполнено(ВыбранноеЗначение), ВыбранноеЗначение, предАдрес);
	
	СписокЛС = ПолучитьСписокЛицевыхСчетов(Отчет.Адрес);
	Если СписокЛС.Количество() > 0 Тогда
		Отчет.ЛицевойСчет = СписокЛС[0];
		Если Отчет.Адрес <> предАдрес Тогда
			ЗаполнитьПолучателя(Отчет.ЛицевойСчет);
			
			Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
				УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
			КонецЕсли;
			
		КонецЕсли;
	Иначе
		Отчет.ЛицевойСчет = "";
		Отчет.Проживающий = "";
	КонецЕсли;
	
КонецПроцедуры // ОбработатьРезультатВыбораАдресНачалоВыбора()

&НаКлиенте
// Обработчик события "ПриИзменении" поля "Номер".
Процедура НомерПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля "НастройкаВидовУдобств".
Процедура НастройкаВидовУдобствПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийПоля_Результат

&НаКлиенте
// Обработчик события "ОбработкаРасшифровки" поля "Результат".
Процедура РезультатОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	
	УПЖКХ_ТиповыеМетодыКлиент.ОбработкаРасшифровкиСтандартногоОтчета(ЭтаФорма, Элемент, Расшифровка, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ОбработкаДополнительнойРасшифровки" поля "Результат".
Процедура РезультатОбработкаДополнительнойРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	
	// Не будем обрабатывать нажатие на правую кнопку мыши.
	// Покажем стандартное контекстное меню ячейки табличного документа.
	Расшифровка = Неопределено;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикКомандФормы

&НаКлиенте
// Обработчик команды "СформироватьОтчет".
Процедура СформироватьОтчет(Команда)
	
	ОчиститьСообщения();
	
	ОтключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания");
	
	РезультатВыполнения = СформироватьОтчетНаСервере();
	Если Не РезультатВыполнения.ЗаданиеВыполнено Тогда		
		УПЖКХ_ТиповыеМетодыКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
		УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "ФормированиеОтчета");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик команды "КопироватьЛС".
Процедура КопироватьЛС(Команда)
	
	Если Не Отчет.ЛицевойСчет.Пустая() Тогда
		Отчет.Номер = Строка(Отчет.ЛицевойСчет);
		
		Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик команды "СравнитьМакетСТиповым".
Процедура СравнитьМакетСТиповым(Команда)
	
	УПЖКХ_РаботаСДиалогамиКлиент.СравнитьТиповойМакетСПользовательским("Отчет.КВП_ФинансовоЛицевойСчетФорма1_3", "ПФ_MXL_Форма_1_3");
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервереБезКонтекста
// Процедура проверяет, выполнено ли задание.
Функция ЗаданиеВыполнено(ИдентификаторЗадания)
	
	Возврат УПЖКХ_ТиповыеМетодыСервер.ЗаданиеВыполнено(ИдентификаторЗадания);
	
КонецФункции

&НаСервере
// Процедура отменяет выполнение задания.
Процедура ОтменитьВыполнениеЗаданияНаСервере()
	
	УПЖКХ_ТиповыеМетодыСервер.ОтменитьВыполнениеЗадания(ИдентификаторЗадания);
	
КонецПроцедуры

&НаСервере
// Процедура готовит параметры на сервере.
Функция ПодготовитьПараметрыОтчетаНаСервере()
	
	ПараметрыОтчета = Новый Структура;
	
	ПараметрыОтчета.Вставить("НачалоПериода"          , НачалоДня(Отчет.НачалоПериода));
	ПараметрыОтчета.Вставить("КонецПериода"           , КонецДня(Отчет.КонецПериода));
	ПараметрыОтчета.Вставить("Организация"            , Отчет.Организация);
	ПараметрыОтчета.Вставить("Проживающий"            , Отчет.Проживающий);
	ПараметрыОтчета.Вставить("ЛицевойСчет"            , Отчет.ЛицевойСчет);
	ПараметрыОтчета.Вставить("Адрес"                  , Отчет.Адрес);
	ПараметрыОтчета.Вставить("Номер"                  , Отчет.Номер);
	ПараметрыОтчета.Вставить("НастройкаВидовУдобств"  , Отчет.НастройкаВидовУдобств);
	ПараметрыОтчета.Вставить("ВыводитьОтветственного" , Отчет.ВыводитьОтветственного);
	ПараметрыОтчета.Вставить("Ответственный"          , Отчет.Ответственный);
	
	Возврат ПараметрыОтчета;
	
КонецФункции

&НаСервере
// Функция формирует отчет на сервере.
Функция СформироватьОтчетНаСервере() Экспорт
	
	Если Не ПроверитьЗаполнение() Тогда 
		Возврат Новый Структура("ЗаданиеВыполнено", Истина);
	КонецЕсли;
	
	Если Отчет.НачалоПериода > Отчет.КонецПериода Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Период задан не верно!");
		Возврат Новый Структура("ЗаданиеВыполнено", Истина);
	КонецЕсли;
	
	ИБФайловая = УПЖКХ_ТиповыеМетодыСервер.ИнформационнаяБазаФайловая();
	
	УПЖКХ_ТиповыеМетодыСервер.ОтменитьВыполнениеЗадания(ИдентификаторЗадания);
	
	ИдентификаторЗадания = Неопределено;
	
	УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеИспользовать");
	
	ПараметрыОтчета = ПодготовитьПараметрыОтчетаНаСервере();
	
	Если ИБФайловая Тогда
		АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
		Отчеты.КВП_ФинансовоЛицевойСчетФорма1_3.СформироватьОтчет(ПараметрыОтчета, АдресХранилища);
		РезультатВыполнения = Новый Структура("ЗаданиеВыполнено", Истина);
	Иначе
		РезультатВыполнения = УПЖКХ_ТиповыеМетодыСервер.ЗапуститьВыполнениеВФоне(
			УникальныйИдентификатор,
			"Отчеты.КВП_ФинансовоЛицевойСчетФорма1_3.СформироватьОтчет",
			ПараметрыОтчета,
			УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьНаименованиеЗаданияВыполненияОтчета(ЭтаФорма));
			
		АдресХранилища       = РезультатВыполнения.АдресХранилища;
		ИдентификаторЗадания = РезультатВыполнения.ИдентификаторЗадания;
	КонецЕсли;
	
	Если РезультатВыполнения.ЗаданиеВыполнено Тогда
		ЗагрузитьПодготовленныеДанныеНаСервере();
	КонецЕсли;
	
	Возврат РезультатВыполнения;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
// Управляет видимостью элементов формы.
Процедура УправлениеФормой(Форма)
	
	Отчет    = Форма.Отчет;
	Элементы = Форма.Элементы;
	
	Элементы.Ответственный.Видимость         = Отчет.ВыводитьОтветственного;
	Элементы.СравнитьМакетСТиповым.Видимость = УПЖКХ_ОбщегоНазначенияКлиентСервер.ОпределитьИспользованиеПользовательскогоМакетаПечати("Отчет.КВП_ФинансовоЛицевойСчетФорма1_3", "ПФ_MXL_Форма_1_3");
	
КонецПроцедуры

&НаСервере
// Процедура загружает подготовленные данные на сервере.
Процедура ЗагрузитьПодготовленныеДанныеНаСервере()
	
	Результат = ПолучитьИзВременногоХранилища(АдресХранилища);
	
	УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеИспользовать");
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
// Процедуры проверяет выполнение задания.
Процедура Подключаемый_ПроверитьВыполнениеЗадания()
	
	Попытка
		Если ЗаданиеВыполнено(ИдентификаторЗадания) Тогда 
			ЗагрузитьПодготовленныеДанныеНаСервере();
			УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеИспользовать");
		Иначе
			УПЖКХ_ТиповыеМетодыКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
			ПодключитьОбработчикОжидания(
				"Подключаемый_ПроверитьВыполнениеЗадания",
				ПараметрыОбработчикаОжидания.ТекущийИнтервал,
				Истина);
		КонецЕсли;
	Исключение
		УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеИспользовать");
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти
