#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Получает сведения о здании квартиры проживающего.
Функция ПолучитьСведенияОЗдании(Здание)

	ХарактеристикаЗдания = Новый Структура;
	
	СоотвБлагоустройств = Новый Соответствие;
	СоотвНаименований   = Новый Соответствие;
	
	СоотвБлагоустройств.Вставить(Справочники.КВП_ВидыБлагоустройстваОбъектов.ЦентрализованноеОтопление, "ЦентрОтопление");
	СоотвНаименований.Вставить("ЦентрОтопление", "Центр. отопление");
	
	СоотвБлагоустройств.Вставить(Справочники.КВП_ВидыБлагоустройстваОбъектов.Канализация,               "Канализация");
	СоотвНаименований.Вставить("Канализация", "Канализация");
	
	СоотвБлагоустройств.Вставить(Справочники.КВП_ВидыБлагоустройстваОбъектов.Лифт,                      "Лифт");
	СоотвНаименований.Вставить("Лифт", "Лифт");
	
	СоотвБлагоустройств.Вставить(Справочники.КВП_ВидыБлагоустройстваОбъектов.Мусоропровод,              "Мусоропровод");
	СоотвНаименований.Вставить("Мусоропровод", "Мусоропровод");
	
	СоотвБлагоустройств.Вставить(Справочники.КВП_ВидыБлагоустройстваОбъектов.Ванна ,                    "Ванна");
	СоотвНаименований.Вставить("Ванна", "Ванна");
	
	ПустаяСсылкаВБ = Справочники.КВП_ВидыБлагоустройстваОбъектов.ПустаяСсылка();
	ТекЭлемент = Справочники.КВП_ВидыБлагоустройстваОбъектов.НайтиПоНаименованию("Водопровод");
	Если НЕ ТекЭлемент = ПустаяСсылкаВБ Тогда
		СоотвБлагоустройств.Вставить(ТекЭлемент, "Водопровод");
		СоотвНаименований.Вставить("Водопровод", "Водопровод");
	КонецЕсли;
	ТекЭлемент = Справочники.КВП_ВидыБлагоустройстваОбъектов.НайтиПоНаименованию("Электроэнергия");
	Если НЕ ТекЭлемент = ПустаяСсылкаВБ Тогда
		СоотвБлагоустройств.Вставить(ТекЭлемент, "Электроэнергия");
		СоотвНаименований.Вставить("Электроэнергия", "Электроэнергия");
	КонецЕсли;
	ТекЭлемент = Справочники.КВП_ВидыБлагоустройстваОбъектов.НайтиПоНаименованию("Газовая плита");
	Если НЕ ТекЭлемент = ПустаяСсылкаВБ Тогда
		СоотвБлагоустройств.Вставить(ТекЭлемент, "ГазПлита");
		СоотвНаименований.Вставить("ГазПлита", "Газовая плита");
	КонецЕсли;
	ТекЭлемент = Справочники.КВП_ВидыБлагоустройстваОбъектов.НайтиПоНаименованию("Централизованная горячая вода");
	Если НЕ ТекЭлемент = ПустаяСсылкаВБ Тогда
		СоотвБлагоустройств.Вставить(ТекЭлемент, "ЦентрГорВода");
	КонецЕсли;
	ТекЭлемент = Справочники.КВП_ВидыБлагоустройстваОбъектов.НайтиПоНаименованию("Газовая колонка");
	Если НЕ ТекЭлемент = ПустаяСсылкаВБ Тогда
		СоотвБлагоустройств.Вставить(ТекЭлемент, "ГазКолонка");
	КонецЕсли;
	
	СпБлагоустройств = Новый СписокЗначений;
	Для Каждого ТекСоответствие Из СоотвБлагоустройств Цикл
		СпБлагоустройств.Добавить(ТекСоответствие.Ключ);
	КонецЦикла;
	
	ТаблицаБлагоустройств = КВП_ПрочиеПроцедурыИФункции.ПолучитьБлагоустройстваОбъекта(Здание, , СпБлагоустройств);
	
	Для Каждого ТекСтрока Из ТаблицаБлагоустройств Цикл
		ХарактеристикаЗдания.Вставить(СоотвБлагоустройств.Получить(ТекСтрока.ВидБлагоустройства), ТекСтрока.Значение);
	КонецЦикла;

	ХарактеристикаЗдания.Вставить("ЭтажностьЗдания", Здание.Этажей);
	ХарактеристикаЗдания.Вставить("ПроцентИзноса",   Здание.ПроцентИзноса);
	
	Возврат ХарактеристикаЗдания;
	
КонецФункции // ПолучитьСведенияОЗдании()

// Получает сведения о благустройстве помещения.
Функция ПолучитьСведенияОБлагоустройствеПомещения(Помещение)
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	КВП_БлагоустройствоОбъектов.Объект КАК Помещение,
	|	КВП_БлагоустройствоОбъектов.ВидБлагоустройства,
	|	КВП_БлагоустройствоОбъектов.Значение
	|ПОМЕСТИТЬ втБлагоустройствПомещения
	|ИЗ
	|	РегистрСведений.КВП_БлагоустройствоОбъектов КАК КВП_БлагоустройствоОбъектов
	|ГДЕ
	|	КВП_БлагоустройствоОбъектов.Объект = &Помещение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	КВП_БлагоустройствоОбъектов.Объект КАК Здание,
	|	КВП_БлагоустройствоОбъектов.ВидБлагоустройства,
	|	КВП_БлагоустройствоОбъектов.Значение
	|ПОМЕСТИТЬ втБлагоустройствЗдания
	|ИЗ
	|	РегистрСведений.КВП_БлагоустройствоОбъектов КАК КВП_БлагоустройствоОбъектов
	|ГДЕ
	|	КВП_БлагоустройствоОбъектов.Объект = &Здание
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ЕСТЬNULL(втБлагоустройствПомещения.ВидБлагоустройства, втБлагоустройствЗдания.ВидБлагоустройства) КАК ВидБлагоустройства,
	|	ЕСТЬNULL(втБлагоустройствПомещения.Значение, втБлагоустройствЗдания.Значение) КАК Значение
	|ИЗ
	|	втБлагоустройствПомещения КАК втБлагоустройствПомещения
	|		ПОЛНОЕ СОЕДИНЕНИЕ втБлагоустройствЗдания КАК втБлагоустройствЗдания
	|		ПО втБлагоустройствПомещения.Помещение.Владелец = втБлагоустройствЗдания.Здание
	|			И втБлагоустройствПомещения.ВидБлагоустройства = втБлагоустройствЗдания.ВидБлагоустройства
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЕСТЬNULL(втБлагоустройствПомещения.ВидБлагоустройства, втБлагоустройствЗдания.ВидБлагоустройства),
	|	ЕСТЬNULL(втБлагоустройствПомещения.Значение, втБлагоустройствЗдания.Значение)
	|ИЗ
	|	втБлагоустройствПомещения КАК втБлагоустройствПомещения
	|		ПОЛНОЕ СОЕДИНЕНИЕ втБлагоустройствЗдания КАК втБлагоустройствЗдания
	|		ПО втБлагоустройствПомещения.Помещение.Владелец = втБлагоустройствЗдания.Здание
	|			И втБлагоустройствПомещения.ВидБлагоустройства <> втБлагоустройствЗдания.ВидБлагоустройства";
	
	Запрос.УстановитьПараметр("Помещение", Помещение);
	Запрос.УстановитьПараметр("Здание",    Помещение.Владелец);
	
	Результат = Запрос.Выполнить().Выгрузить();
	Возврат Результат;
КонецФункции // ПолучитьСведенияОБлагоустройствеПомещения()

// Получает таблицу сведений о зарегистрированных вместе с жильцом.
Функция ПолучитьТаблицуЗарегистрированных(ПараметрыОтчета)
	
	// Структура запроса по пакетам:
	//
	// 1. Собираем сведения о жильцах:
	//    а) зарегистрированных;
	//    б) являющимихся собственниками;
	//    в) являющихся ответственными собственниками л/с.
	// 2. Собираем жильцов вместе.
	// 3. Находим актуального ответственного собственника лицевого счета на конец периода формирования отчета.
	// 4. Формируем таблицу жильцов, связывая каждого жильца с актуальным ответственным собственником выбранной квартиры;
	// 3. Дополняем сведения о жильцах данными о:
	//    а) проживании;
	//    б) степени родства к ответственному собственнику;
	//    в) целях прибытия (временная\постоянная регистрация):
	//         1) смотрим цели прибытия на конец периода формирования отчета;
	//         2) рассматриваем случай, когда жилец был снят с временной регистрации в течение периода формирования отчета;
	//         3) формируем цели прибытия, учитывая изменения за период;
	//    г) датах регистрации
	//    д) датах снятия с регистрации.
	// 4. Выполняем выборку данных, дополнив их данными о датах выбытия жильцов.
	// 5. Формируем итоговую таблицу со всеми данными о жильцах и присоединяем к списку жильцов контрагентов.
	
	Запрос = Новый Запрос;
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("ДатаНач",     НачалоМесяца(ПараметрыОтчета.НачалоПериода));
	Запрос.УстановитьПараметр("ДатаКон",     КонецМесяца(ПараметрыОтчета.КонецПериода));
	Запрос.УстановитьПараметр("ЛицевойСчет", ПараметрыОтчета.ЛицевойСчет);
	Запрос.УстановитьПараметр("Помещение",   ПараметрыОтчета.ЛицевойСчет.Адрес);
	Запрос.УстановитьПараметр("УпрощенныйВариантУчетаСобственников", ИспользуетсяУпрощенныйВариантУчетаСобственников());
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.Жилец КАК Жилец,
	|	УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.Жилец.ФизЛицо КАК ФизЛицо,
	|	УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.ЛицевойСчет КАК ЛицевойСчет
	|ПОМЕСТИТЬ втСведенияОЗарегистрированныхНаНачалоИИзмененияхРегистрацииЗаПериод
	|ИЗ
	|	РегистрСведений.УПЖКХ_СведенияОЗарегистрированных.СрезПоследних(
	|			,
	|			ЛицевойСчет = &ЛицевойСчет
	|				И ДатаИзменения <= &ДатаНач) КАК УПЖКХ_СведенияОЗарегистрированныхСрезПоследних
	|ГДЕ
	|	УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.Зарегистрирован
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	УПЖКХ_СведенияОЗарегистрированных.Жилец,
	|	УПЖКХ_СведенияОЗарегистрированных.Жилец.ФизЛицо,
	|	УПЖКХ_СведенияОЗарегистрированных.ЛицевойСчет
	|ИЗ
	|	РегистрСведений.УПЖКХ_СведенияОЗарегистрированных КАК УПЖКХ_СведенияОЗарегистрированных
	|ГДЕ
	|	УПЖКХ_СведенияОЗарегистрированных.ЛицевойСчет = &ЛицевойСчет
	|	И УПЖКХ_СведенияОЗарегистрированных.ДатаИзменения МЕЖДУ &ДатаНач И &ДатаКон
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УПЖКХ_СобственникиПомещенийСрезПоследних.Собственник КАК Собственник,
	|	УПЖКХ_СобственникиПомещенийСрезПоследних.Помещение КАК Помещение
	|ПОМЕСТИТЬ втСведенияОСобственникахНаНачалоИИзмененияхЗаПериод
	|ИЗ
	|	РегистрСведений.УПЖКХ_СобственникиПомещений.СрезПоследних(&ДатаНач, Помещение = &Помещение) КАК УПЖКХ_СобственникиПомещенийСрезПоследних
	|ГДЕ
	|	УПЖКХ_СобственникиПомещенийСрезПоследних.Действует
	|	И ВЫБОР
	|			КОГДА УПЖКХ_СобственникиПомещенийСрезПоследних.Собственник ССЫЛКА Справочник.Контрагенты
	|				ТОГДА УПЖКХ_СобственникиПомещенийСрезПоследних.Собственник.ЮридическоеФизическоеЛицо = ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ФизическоеЛицо)
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	УПЖКХ_СобственникиПомещений.Собственник,
	|	УПЖКХ_СобственникиПомещений.Помещение
	|ИЗ
	|	РегистрСведений.УПЖКХ_СобственникиПомещений КАК УПЖКХ_СобственникиПомещений
	|ГДЕ
	|	УПЖКХ_СобственникиПомещений.Помещение = &Помещение
	|	И УПЖКХ_СобственникиПомещений.Период МЕЖДУ &ДатаНач И &ДатаКон
	|	И ВЫБОР
	|			КОГДА УПЖКХ_СобственникиПомещений.Собственник ССЫЛКА Справочник.Контрагенты
	|				ТОГДА УПЖКХ_СобственникиПомещений.Собственник.ЮридическоеФизическоеЛицо = ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ФизическоеЛицо)
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчетаСрезПоследних.Период КАК Период,
	|	УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчетаСрезПоследних.ОтветственныйВладелец КАК ОтветственныйСобственник
	|ПОМЕСТИТЬ втСведенияОбОтветственныхСобственникахНаНачалоИИзмененияхЗаПериод
	|ИЗ
	|	РегистрСведений.УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчета.СрезПоследних(&ДатаНач, ЛицевойСчет = &ЛицевойСчет) КАК УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчетаСрезПоследних
	|ГДЕ
	|	ВЫБОР
	|			КОГДА УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчетаСрезПоследних.ОтветственныйВладелец ССЫЛКА Справочник.Контрагенты
	|				ТОГДА УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчетаСрезПоследних.ОтветственныйВладелец.ЮридическоеФизическоеЛицо = ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ФизическоеЛицо)
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчета.Период,
	|	УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчета.ОтветственныйВладелец
	|ИЗ
	|	РегистрСведений.УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчета КАК УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчета
	|ГДЕ
	|	УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчета.Период МЕЖДУ &ДатаНач И &ДатаКон
	|	И УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчета.ЛицевойСчет = &ЛицевойСчет
	|	И ВЫБОР
	|			КОГДА УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчета.ОтветственныйВладелец ССЫЛКА Справочник.Контрагенты
	|				ТОГДА УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчета.ОтветственныйВладелец.ЮридическоеФизическоеЛицо = ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ФизическоеЛицо)
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втСведенияОЗарегистрированныхНаНачалоИИзмененияхРегистрацииЗаПериод.Жилец КАК Жилец,
	|	втСведенияОЗарегистрированныхНаНачалоИИзмененияхРегистрацииЗаПериод.ФизЛицо КАК ФизЛицо,
	|	втСведенияОЗарегистрированныхНаНачалоИИзмененияхРегистрацииЗаПериод.ЛицевойСчет КАК ЛицевойСчет
	|ПОМЕСТИТЬ втЖильцы
	|ИЗ
	|	втСведенияОЗарегистрированныхНаНачалоИИзмененияхРегистрацииЗаПериод КАК втСведенияОЗарегистрированныхНаНачалоИИзмененияхРегистрацииЗаПериод
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	УПЖКХ_Жильцы.Ссылка,
	|	втСведенияОСобственникахНаНачалоИИзмененияхЗаПериод.Собственник,
	|	УПЖКХ_Жильцы.Владелец
	|ИЗ
	|	втСведенияОСобственникахНаНачалоИИзмененияхЗаПериод КАК втСведенияОСобственникахНаНачалоИИзмененияхЗаПериод
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.УПЖКХ_Жильцы КАК УПЖКХ_Жильцы
	|		ПО втСведенияОСобственникахНаНачалоИИзмененияхЗаПериод.Собственник = УПЖКХ_Жильцы.ФизЛицо
	|			И втСведенияОСобственникахНаНачалоИИзмененияхЗаПериод.Помещение = УПЖКХ_Жильцы.Владелец.Адрес
	|ГДЕ
	|	втСведенияОСобственникахНаНачалоИИзмененияхЗаПериод.Собственник В
	|			(ВЫБРАТЬ
	|				УПЖКХ_Жильцы.ФизЛицо
	|			ИЗ
	|				Справочник.УПЖКХ_Жильцы КАК УПЖКХ_Жильцы
	|			ГДЕ
	|				УПЖКХ_Жильцы.Владелец = &ЛицевойСчет)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	втСведенияОбОтветственныхСобственникахНаНачалоИИзмененияхЗаПериод.ОтветственныйСобственник,
	|	втСведенияОбОтветственныхСобственникахНаНачалоИИзмененияхЗаПериод.ОтветственныйСобственник.ФизЛицо,
	|	втСведенияОбОтветственныхСобственникахНаНачалоИИзмененияхЗаПериод.ОтветственныйСобственник.Владелец
	|ИЗ
	|	втСведенияОбОтветственныхСобственникахНаНачалоИИзмененияхЗаПериод КАК втСведенияОбОтветственныхСобственникахНаНачалоИИзмененияхЗаПериод
	|ГДЕ
	|	втСведенияОбОтветственныхСобственникахНаНачалоИИзмененияхЗаПериод.ОтветственныйСобственник ССЫЛКА Справочник.УПЖКХ_Жильцы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчетаСрезПоследних.ЛицевойСчет КАК ЛицевойСчет,
	|	УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчетаСрезПоследних.ОтветственныйВладелец КАК АктуальныйОтветственныйСобственник,
	|	ЕСТЬNULL(втЖильцы.Жилец, ЗНАЧЕНИЕ(Справочник.УПЖКХ_Жильцы.ПустаяСсылка)) КАК СоответствиеСЖильцом,
	|	ЕСТЬNULL(втЖильцы.ФизЛицо, ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)) КАК СоответствиеСФизЛицом
	|ПОМЕСТИТЬ втАктуальныйОтветственныйНаКонецПериода
	|ИЗ
	|	РегистрСведений.УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчета.СрезПоследних(&ДатаКон, ЛицевойСчет = &ЛицевойСчет) КАК УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчетаСрезПоследних
	|		ЛЕВОЕ СОЕДИНЕНИЕ втЖильцы КАК втЖильцы
	|		ПО (ВЫБОР
	|				КОГДА УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчетаСрезПоследних.ОтветственныйВладелец ССЫЛКА Справочник.УПЖКХ_Жильцы
	|					ТОГДА УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчетаСрезПоследних.ОтветственныйВладелец = втЖильцы.Жилец
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ)
	|ГДЕ
	|	ВЫБОР
	|			КОГДА УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчетаСрезПоследних.ОтветственныйВладелец ССЫЛКА Справочник.Контрагенты
	|				ТОГДА УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчетаСрезПоследних.ОтветственныйВладелец.ЮридическоеФизическоеЛицо = ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ФизическоеЛицо)
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втЖильцы.ЛицевойСчет КАК ЛицевойСчет,
	|	втЖильцы.Жилец КАК Жилец,
	|	втЖильцы.Жилец.ФизЛицо КАК ФизЛицо,
	|	втЖильцы.Жилец.Наименование КАК Наименование,
	|	ЕСТЬNULL(втАктуальныйОтветственныйНаКонецПериода.СоответствиеСЖильцом, ЗНАЧЕНИЕ(Справочник.УПЖКХ_Жильцы.ПустаяСсылка)) КАК АктуальныйОтветственныйЖилец,
	|	ЕСТЬNULL(втАктуальныйОтветственныйНаКонецПериода.СоответствиеСФизЛицом, ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)) КАК АктуальныйОтветственныйФизЛицо
	|ПОМЕСТИТЬ втЖильцовСоСвязнымиСобственникамиИКонтрагентами
	|ИЗ
	|	втЖильцы КАК втЖильцы
	|		ЛЕВОЕ СОЕДИНЕНИЕ втАктуальныйОтветственныйНаКонецПериода КАК втАктуальныйОтветственныйНаКонецПериода
	|		ПО (втАктуальныйОтветственныйНаКонецПериода.ЛицевойСчет = втЖильцы.ЛицевойСчет)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УПЖКХ_СведенияОПроживающихСрезПоследних.Жилец КАК Жилец,
	|	УПЖКХ_СведенияОПроживающихСрезПоследних.Проживает КАК Проживает
	|ПОМЕСТИТЬ втСтатусыПроживанияЖильцов
	|ИЗ
	|	РегистрСведений.УПЖКХ_СведенияОПроживающих.СрезПоследних(
	|			&ДатаКон,
	|			Жилец В
	|					(ВЫБРАТЬ
	|						втЖильцовСоСвязнымиСобственникамиИКонтрагентами.Жилец КАК Жилец
	|					ИЗ
	|						втЖильцовСоСвязнымиСобственникамиИКонтрагентами КАК втЖильцовСоСвязнымиСобственникамиИКонтрагентами)
	|				И ДатаИзменения <= &ДатаКон) КАК УПЖКХ_СведенияОПроживающихСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УПЖКХ_СтепеньРодстваФизЛицСрезПоследних.ФизическоеЛицоОсновное КАК ФизическоеЛицоОсновное,
	|	УПЖКХ_СтепеньРодстваФизЛицСрезПоследних.ФизическоеЛицоСвязанное КАК ФизическоеЛицоСвязанное,
	|	УПЖКХ_СтепеньРодстваФизЛицСрезПоследних.СтепеньРодства.Наименование КАК СтепеньРодства
	|ПОМЕСТИТЬ втСведенияОСтепеняхРодстваФизЛиц
	|ИЗ
	|	РегистрСведений.УПЖКХ_СтепеньРодстваФизЛиц.СрезПоследних(
	|			&ДатаКон,
	|			ФизическоеЛицоОсновное В
	|				(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|					втЖильцовСоСвязнымиСобственникамиИКонтрагентами.АктуальныйОтветственныйФизЛицо
	|				ИЗ
	|					втЖильцовСоСвязнымиСобственникамиИКонтрагентами КАК втЖильцовСоСвязнымиСобственникамиИКонтрагентами)) КАК УПЖКХ_СтепеньРодстваФизЛицСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.Жилец КАК Жилец,
	|	УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.Зарегистрирован КАК Зарегистрирован,
	|	УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.ВременнаяРегистрация КАК ВременнаяРегистрация,
	|	УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.ДатаИзменения КАК ДатаИзменения,
	|	ВЫБОР
	|		КОГДА УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.Зарегистрирован
	|			ТОГДА ВЫБОР
	|					КОГДА УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.ВременнаяРегистрация
	|						ТОГДА ""Временно""
	|					ИНАЧЕ ""Постоянно""
	|				КОНЕЦ
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК ЦельПрибытия
	|ПОМЕСТИТЬ втЦелиПрибытияНаКонецПериода
	|ИЗ
	|	РегистрСведений.УПЖКХ_СведенияОЗарегистрированных.СрезПоследних(
	|			&ДатаКон,
	|			Жилец В
	|					(ВЫБРАТЬ
	|						втЖильцовСоСвязнымиСобственникамиИКонтрагентами.Жилец КАК Жилец
	|					ИЗ
	|						втЖильцовСоСвязнымиСобственникамиИКонтрагентами КАК втЖильцовСоСвязнымиСобственникамиИКонтрагентами)
	|				И ДатаИзменения <= &ДатаКон) КАК УПЖКХ_СведенияОЗарегистрированныхСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.Жилец КАК Жилец,
	|	УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.Зарегистрирован КАК Зарегистрирован,
	|	УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.ВременнаяРегистрация КАК ВременнаяРегистрация,
	|	УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.ДатаИзменения КАК ДатаИзменения,
	|	""Временно"" КАК ЦельПрибытия
	|ПОМЕСТИТЬ втЦелиПрибытияДоИзмененийЗаПериод
	|ИЗ
	|	РегистрСведений.УПЖКХ_СведенияОЗарегистрированных.СрезПоследних(
	|			&ДатаКон,
	|			Жилец В
	|					(ВЫБРАТЬ
	|						втЦелиПрибытияНаКонецПериода.Жилец
	|					ИЗ
	|						втЦелиПрибытияНаКонецПериода КАК втЦелиПрибытияНаКонецПериода
	|					ГДЕ
	|						НЕ втЦелиПрибытияНаКонецПериода.Зарегистрирован
	|						И втЦелиПрибытияНаКонецПериода.ДатаИзменения >= &ДатаНач)
	|				И НЕ (Жилец, Зарегистрирован, ВременнаяРегистрация, ДатаИзменения) В
	|						(ВЫБРАТЬ
	|							втЦелиПрибытияНаКонецПериода.Жилец,
	|							втЦелиПрибытияНаКонецПериода.Зарегистрирован,
	|							втЦелиПрибытияНаКонецПериода.ВременнаяРегистрация,
	|							втЦелиПрибытияНаКонецПериода.ДатаИзменения
	|						ИЗ
	|							втЦелиПрибытияНаКонецПериода КАК втЦелиПрибытияНаКонецПериода)
	|				И ДатаИзменения <= &ДатаКон) КАК УПЖКХ_СведенияОЗарегистрированныхСрезПоследних
	|ГДЕ
	|	УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.ВременнаяРегистрация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втЦелиПрибытияНаКонецПериода.Жилец КАК Жилец,
	|	втЦелиПрибытияНаКонецПериода.ДатаИзменения КАК ДатаИзменения,
	|	ВЫБОР
	|		КОГДА втЦелиПрибытияНаКонецПериода.ЦельПрибытия = """"
	|			ТОГДА ЕСТЬNULL(втЦелиПрибытияДоИзмененийЗаПериод.ЦельПрибытия, """")
	|		ИНАЧЕ втЦелиПрибытияНаКонецПериода.ЦельПрибытия
	|	КОНЕЦ КАК ЦельПрибытия
	|ПОМЕСТИТЬ втЦелиПрибытия
	|ИЗ
	|	втЦелиПрибытияНаКонецПериода КАК втЦелиПрибытияНаКонецПериода
	|		ЛЕВОЕ СОЕДИНЕНИЕ втЦелиПрибытияДоИзмененийЗаПериод КАК втЦелиПрибытияДоИзмененийЗаПериод
	|		ПО втЦелиПрибытияНаКонецПериода.Жилец = втЦелиПрибытияДоИзмененийЗаПериод.Жилец
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.Жилец КАК Жилец,
	|	УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.ДатаИзменения КАК ДатаРегистрации
	|ПОМЕСТИТЬ втДатыРегистрации
	|ИЗ
	|	РегистрСведений.УПЖКХ_СведенияОЗарегистрированных.СрезПоследних(
	|			&ДатаКон,
	|			Жилец В
	|					(ВЫБРАТЬ
	|						втЖильцовСоСвязнымиСобственникамиИКонтрагентами.Жилец КАК Жилец
	|					ИЗ
	|						втЖильцовСоСвязнымиСобственникамиИКонтрагентами КАК втЖильцовСоСвязнымиСобственникамиИКонтрагентами)
	|				И Зарегистрирован
	|				И ДатаИзменения <= &ДатаКон) КАК УПЖКХ_СведенияОЗарегистрированныхСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.Жилец КАК Жилец,
	|	УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.ДатаИзменения КАК ДатаСнятияСРегистрации
	|ПОМЕСТИТЬ втДатыСнятияСРегистрации
	|ИЗ
	|	РегистрСведений.УПЖКХ_СведенияОЗарегистрированных.СрезПоследних(
	|			&ДатаКон,
	|			Жилец В
	|					(ВЫБРАТЬ
	|						втЦелиПрибытияНаКонецПериода.Жилец КАК Жилец
	|					ИЗ
	|						втЦелиПрибытияНаКонецПериода КАК втЦелиПрибытияНаКонецПериода
	|					ГДЕ
	|						НЕ втЦелиПрибытияНаКонецПериода.Зарегистрирован)
	|				И НЕ Зарегистрирован
	|				И ДатаИзменения <= &ДатаКон) КАК УПЖКХ_СведенияОЗарегистрированныхСрезПоследних
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.Жилец,
	|	УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.ДатаИзменения
	|ИЗ
	|	РегистрСведений.УПЖКХ_СведенияОЗарегистрированных.СрезПоследних(
	|			&ДатаКон,
	|			Жилец В
	|				(ВЫБРАТЬ
	|					втЦелиПрибытияНаКонецПериода.Жилец КАК Жилец
	|				ИЗ
	|					втЦелиПрибытияНаКонецПериода КАК втЦелиПрибытияНаКонецПериода
	|				ГДЕ
	|					втЦелиПрибытияНаКонецПериода.ВременнаяРегистрация)) КАК УПЖКХ_СведенияОЗарегистрированныхСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втЖильцовСоСвязнымиСобственникамиИКонтрагентами.Жилец КАК Жилец,
	|	втЖильцовСоСвязнымиСобственникамиИКонтрагентами.Наименование КАК Наименование,
	|	втЖильцовСоСвязнымиСобственникамиИКонтрагентами.ФизЛицо КАК ФизЛицо,
	|	ЕСТЬNULL(втСтатусыПроживанияЖильцов.Проживает, ЛОЖЬ) КАК Проживает,
	|	ЕСТЬNULL(втЦелиПрибытия.ЦельПрибытия, """") КАК ЦельПрибытия,
	|	ЕСТЬNULL(втДатыРегистрации.ДатаРегистрации, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаРегистрации,
	|	ЕСТЬNULL(втДатыСнятияСРегистрации.ДатаСнятияСРегистрации, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаСнятияСРегистрации,
	|	ВЫБОР
	|		КОГДА втЖильцовСоСвязнымиСобственникамиИКонтрагентами.АктуальныйОтветственныйФизЛицо = втСведенияОСтепеняхРодстваФизЛиц.ФизическоеЛицоОсновное
	|				И втЖильцовСоСвязнымиСобственникамиИКонтрагентами.ФизЛицо = втСведенияОСтепеняхРодстваФизЛиц.ФизическоеЛицоСвязанное
	|			ТОГДА ЕСТЬNULL(втСведенияОСтепеняхРодстваФизЛиц.СтепеньРодства, """")
	|		КОГДА втЖильцовСоСвязнымиСобственникамиИКонтрагентами.АктуальныйОтветственныйФизЛицо = втЖильцовСоСвязнымиСобственникамиИКонтрагентами.ФизЛицо
	|			ТОГДА ""Ответственный собственник/наниматель""
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК СтепеньРодства,
	|	втЖильцовСоСвязнымиСобственникамиИКонтрагентами.АктуальныйОтветственныйЖилец КАК АктуальныйОтветственныйСобственник
	|ПОМЕСТИТЬ врДанныеЖильцов
	|ИЗ
	|	втЖильцовСоСвязнымиСобственникамиИКонтрагентами КАК втЖильцовСоСвязнымиСобственникамиИКонтрагентами
	|		ЛЕВОЕ СОЕДИНЕНИЕ втСтатусыПроживанияЖильцов КАК втСтатусыПроживанияЖильцов
	|		ПО втЖильцовСоСвязнымиСобственникамиИКонтрагентами.Жилец = втСтатусыПроживанияЖильцов.Жилец
	|		ЛЕВОЕ СОЕДИНЕНИЕ втЦелиПрибытия КАК втЦелиПрибытия
	|		ПО втЖильцовСоСвязнымиСобственникамиИКонтрагентами.Жилец = втЦелиПрибытия.Жилец
	|		ЛЕВОЕ СОЕДИНЕНИЕ втДатыРегистрации КАК втДатыРегистрации
	|		ПО втЖильцовСоСвязнымиСобственникамиИКонтрагентами.Жилец = втДатыРегистрации.Жилец
	|		ЛЕВОЕ СОЕДИНЕНИЕ втСведенияОСтепеняхРодстваФизЛиц КАК втСведенияОСтепеняхРодстваФизЛиц
	|		ПО втЖильцовСоСвязнымиСобственникамиИКонтрагентами.АктуальныйОтветственныйФизЛицо = втСведенияОСтепеняхРодстваФизЛиц.ФизическоеЛицоОсновное
	|			И втЖильцовСоСвязнымиСобственникамиИКонтрагентами.ФизЛицо = втСведенияОСтепеняхРодстваФизЛиц.ФизическоеЛицоСвязанное
	|		ЛЕВОЕ СОЕДИНЕНИЕ втДатыСнятияСРегистрации КАК втДатыСнятияСРегистрации
	|		ПО втЖильцовСоСвязнымиСобственникамиИКонтрагентами.Жилец = втДатыСнятияСРегистрации.Жилец";
	
	Запрос.Выполнить();
	
	ЗапросПоЗданиям = Новый Запрос;
	ЗапросПоЗданиям.МенеджерВременныхТаблиц = Запрос.МенеджерВременныхТаблиц;
	ЗапросПоЗданиям.Текст = 
	"ВЫБРАТЬ
	|	врДанныеЖильцов.Жилец КАК Объект
	|ИЗ
	|	врДанныеЖильцов КАК врДанныеЖильцов
	|
	|СГРУППИРОВАТЬ ПО
	|	врДанныеЖильцов.Жилец";
	
	МассивОбъектов = ЗапросПоЗданиям.Выполнить().Выгрузить().ВыгрузитьКолонку("Объект");
	
	
	// Определим даты прибытия жильцов.
	МассивВидовКонтактнойИнформации = Новый Массив;
	МассивВидовКонтактнойИнформации.Добавить(Справочники.ВидыКонтактнойИнформации.УПЖКХ_АдресПрибытияЖильца);
	
	// Помещает в менеджер временных таблиц запроса таблицу контактной информации "втКонтактнаяИнформация".
	УПЖКХ_ТиповыеМетодыСервер.СформироватьТаблицуКонтактнойИнформацииОбъектов(Запрос.МенеджерВременныхТаблиц, МассивВидовКонтактнойИнформации, МассивОбъектов);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	врДанныеЖильцов.Жилец КАК Жилец,
	|	врДанныеЖильцов.Наименование КАК Наименование,
	|	врДанныеЖильцов.ФизЛицо КАК ФизЛицо,
	|	врДанныеЖильцов.Проживает КАК Проживает,
	|	врДанныеЖильцов.ЦельПрибытия КАК ЦельПрибытия,
	|	врДанныеЖильцов.ДатаРегистрации КАК ДатаРегистрации,
	|	врДанныеЖильцов.ДатаСнятияСРегистрации КАК ДатаСнятияСРегистрации,
	|	врДанныеЖильцов.СтепеньРодства КАК СтепеньРодства,
	|	врДанныеЖильцов.АктуальныйОтветственныйСобственник КАК АктуальныйОтветственныйСобственник,
	|	ЕСТЬNULL(втКонтактнаяИнформация.Период, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаПрибытия
	|ПОМЕСТИТЬ втЖильцыСДатаПрибытия
	|ИЗ
	|	врДанныеЖильцов КАК врДанныеЖильцов
	|		ЛЕВОЕ СОЕДИНЕНИЕ втКонтактнаяИнформация КАК втКонтактнаяИнформация
	|		ПО врДанныеЖильцов.Жилец = втКонтактнаяИнформация.Объект
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ втКонтактнаяИнформация";
	
	Запрос.Выполнить();
	
	// Определим даты выбытия жильцов.
	МассивВидовКонтактнойИнформации.Очистить();
	МассивВидовКонтактнойИнформации.Добавить(Справочники.ВидыКонтактнойИнформации.УПЖКХ_АдресВыбытияЖильца);
	
	// Помещает в менеджер временных таблиц запроса таблицу контактной информации "втКонтактнаяИнформация".
	УПЖКХ_ТиповыеМетодыСервер.СформироватьТаблицуКонтактнойИнформацииОбъектов(Запрос.МенеджерВременныхТаблиц, МассивВидовКонтактнойИнформации, МассивОбъектов);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	втЖильцыСДатаПрибытия.Жилец КАК Жилец,
	|	втЖильцыСДатаПрибытия.Наименование КАК Наименование,
	|	втЖильцыСДатаПрибытия.ФизЛицо КАК ФизЛицо,
	|	втЖильцыСДатаПрибытия.Проживает КАК Проживает,
	|	втЖильцыСДатаПрибытия.ЦельПрибытия КАК ЦельПрибытия,
	|	втЖильцыСДатаПрибытия.ДатаРегистрации КАК ДатаРегистрации,
	|	втЖильцыСДатаПрибытия.ДатаСнятияСРегистрации КАК ДатаСнятияСРегистрации,
	|	втЖильцыСДатаПрибытия.СтепеньРодства КАК СтепеньРодства,
	|	втЖильцыСДатаПрибытия.АктуальныйОтветственныйСобственник КАК АктуальныйОтветственныйСобственник,
	|	втЖильцыСДатаПрибытия.ДатаПрибытия КАК ДатаПрибытия,
	|	ЕСТЬNULL(втКонтактнаяИнформация.Период, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаВыбытия
	|ПОМЕСТИТЬ втЖильцыСДопИнформацией
	|ИЗ
	|	втЖильцыСДатаПрибытия КАК втЖильцыСДатаПрибытия
	|		ЛЕВОЕ СОЕДИНЕНИЕ втКонтактнаяИнформация КАК втКонтактнаяИнформация
	|		ПО втЖильцыСДатаПрибытия.Жилец = втКонтактнаяИнформация.Объект
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ втКонтактнаяИнформация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втЖильцыСДопИнформацией.Наименование КАК ФИО,
	|	втЖильцыСДопИнформацией.Проживает КАК Проживает,
	|	втЖильцыСДопИнформацией.ЦельПрибытия КАК ЦельПрибытия,
	|	втЖильцыСДопИнформацией.СтепеньРодства КАК СтепеньРодства,
	|	ВЫБОР
	|		КОГДА втЖильцыСДопИнформацией.ДатаПрибытия <> ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА втЖильцыСДопИнформацией.ДатаПрибытия
	|		ИНАЧЕ втЖильцыСДопИнформацией.ДатаРегистрации
	|	КОНЕЦ КАК ДатаРегистрацииПрибытия,
	|	ВЫБОР
	|		КОГДА втЖильцыСДопИнформацией.ДатаВыбытия <> ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА втЖильцыСДопИнформацией.ДатаВыбытия
	|		ИНАЧЕ втЖильцыСДопИнформацией.ДатаСнятияСРегистрации
	|	КОНЕЦ КАК ДатаВыбытия,
	|	втЖильцыСДопИнформацией.ФизЛицо.ДатаРождения КАК ДатаРождения
	|ПОМЕСТИТЬ втИтоговая
	|ИЗ
	|	втЖильцыСДопИнформацией КАК втЖильцыСДопИнформацией
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	втСведенияОСобственникахНаНачалоИИзмененияхЗаПериод.Собственник.Наименование,
	|	ЛОЖЬ,
	|	"""",
	|	"""",
	|	ДАТАВРЕМЯ(1, 1, 1),
	|	ДАТАВРЕМЯ(1, 1, 1),
	|	ВЫБОР
	|		КОГДА втСведенияОСобственникахНаНачалоИИзмененияхЗаПериод.Собственник ССЫЛКА Справочник.ФизическиеЛица
	|			ТОГДА втСведенияОСобственникахНаНачалоИИзмененияхЗаПериод.Собственник.ДатаРождения
	|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
	|	КОНЕЦ
	|ИЗ
	|	втСведенияОСобственникахНаНачалоИИзмененияхЗаПериод КАК втСведенияОСобственникахНаНачалоИИзмененияхЗаПериод
	|ГДЕ
	|	НЕ втСведенияОСобственникахНаНачалоИИзмененияхЗаПериод.Собственник В
	|			(ВЫБРАТЬ
	|				втЖильцыСДопИнформацией.ФизЛицо
	|			ИЗ
	|				втЖильцыСДопИнформацией КАК втЖильцыСДопИнформацией)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	втСведенияОбОтветственныхСобственникахНаНачалоИИзмененияхЗаПериод.ОтветственныйСобственник.Наименование,
	|	ЛОЖЬ,
	|	"""",
	|	ВЫБОР
	|		КОГДА втСведенияОбОтветственныхСобственникахНаНачалоИИзмененияхЗаПериод.ОтветственныйСобственник В
	|			(ВЫБРАТЬ
	|				втАктуальныйОтветственныйНаКонецПериода.АктуальныйОтветственныйСобственник
	|			ИЗ
	|				втАктуальныйОтветственныйНаКонецПериода КАК втАктуальныйОтветственныйНаКонецПериода)
	|				ТОГДА ""Ответственный собственник/наниматель""
	|		ИНАЧЕ """"
	|	КОНЕЦ,
	|	ДАТАВРЕМЯ(1, 1, 1),
	|	ДАТАВРЕМЯ(1, 1, 1),
	|	ВЫБОР
	|		КОГДА втСведенияОбОтветственныхСобственникахНаНачалоИИзмененияхЗаПериод.ОтветственныйСобственник ССЫЛКА Справочник.УПЖКХ_Жильцы
	|			ТОГДА втСведенияОбОтветственныхСобственникахНаНачалоИИзмененияхЗаПериод.ОтветственныйСобственник.ФизЛицо.ДатаРождения
	|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
	|	КОНЕЦ
	|ИЗ
	|	втСведенияОбОтветственныхСобственникахНаНачалоИИзмененияхЗаПериод КАК втСведенияОбОтветственныхСобственникахНаНачалоИИзмененияхЗаПериод
	|ГДЕ
	|	НЕ втСведенияОбОтветственныхСобственникахНаНачалоИИзмененияхЗаПериод.ОтветственныйСобственник В
	|				(ВЫБРАТЬ
	|					втЖильцыСДопИнформацией.Жилец
	|				ИЗ
	|					втЖильцыСДопИнформацией КАК втЖильцыСДопИнформацией)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втИтоговая.ФИО КАК ФИО,
	|	МАКСИМУМ(втИтоговая.ДатаРождения) КАК ДатаРождения,
	|	МАКСИМУМ(втИтоговая.Проживает) КАК Проживает,
	|	МАКСИМУМ(втИтоговая.ЦельПрибытия) КАК ЦельПрибытия,
	|	МАКСИМУМ(втИтоговая.СтепеньРодства) КАК СтепеньРодства,
	|	МАКСИМУМ(втИтоговая.ДатаРегистрацииПрибытия) КАК ДатаРегистрацииПрибытия,
	|	МАКСИМУМ(втИтоговая.ДатаВыбытия) КАК ДатаВыбытия
	|ИЗ
	|	втИтоговая КАК втИтоговая
	|
	|СГРУППИРОВАТЬ ПО
	|	втИтоговая.ФИО";
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Возврат Результат;
	
КонецФункции // ПолучитьТаблицуЗарегистрированных()

// Получает задолженность по лицевому счету на указанную дату.
//
// Параметры
//  ДатаСальдо - дата получения сальдо.
//
// Возвращаемое значение:
//   Число     - задолженность по л/с.
//
Функция ПолучитьЗадолженностьПоЛС(ДатаСальдо, ПараметрыОтчета)

	ЗадолженностьПоЛС = 0;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.СуммаНачисленияОстаток КАК ЗадолженностьПоЛС
	|ИЗ
	|	РегистрНакопления.КВП_ВзаиморасчетыПоЛицевымСчетам.Остатки(
	|			&Дата,
	|			Организация = &Организация
	|				И ЛицевойСчет = &ЛицевойСчет) КАК КВП_ВзаиморасчетыПоЛицевымСчетамОстатки";

	Граница = Новый Граница(ДатаСальдо, ВидГраницы.Включая);
	
	Запрос.УстановитьПараметр("Дата",        Граница);
	Запрос.УстановитьПараметр("Организация", ПараметрыОтчета.Организация);
	Запрос.УстановитьПараметр("ЛицевойСчет", ПараметрыОтчета.ЛицевойСчет);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ЗадолженностьПоЛС = Выборка.ЗадолженностьПоЛС;
	КонецЕсли;
	
	ЗадолженностьПоЛС = ?(ЗадолженностьПоЛС < 0, 0, ЗадолженностьПоЛС);
	
	Возврат ЗадолженностьПоЛС;
	
КонецФункции // ПолучитьЗадолженностьПоЛС()

// Получает таблицу начислений по лицевому счету.
Функция ПолучитьТаблицуНачислений(ЛицевойСчет, ПараметрыОтчета)
	
	// Получим таблицу начислений.
	// Примечание: данные по начислениям берутся в разрезе расчетных периодов, а не месяцев начисления.
	// Если за период есть сторнирование начислений, то в отчет попадает сумма без учета сторно.
	// То есть, отражение сторнирования происходит не за месяц, по которому корректируются начисления (Месяц начисления),
	// а в том месяце, когда производилось сторнирование (Расчетный месяц).
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УПЖКХ_НачисленияОбороты.Услуга.ВидУслуги КАК Услуга,
	|	ВЫБОР
	|		КОГДА НЕ УПЖКХ_НачисленияОбороты.РазделУчета = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.Льготы)
	|				И НЕ УПЖКХ_НачисленияОбороты.ВидНачисления В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Оплата), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.ЗачетДолговИПереплат))
	|			ТОГДА УПЖКХ_НачисленияОбороты.СуммаНачисленияОборот
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаНачисленияБезЛьгот,
	|	ВЫБОР
	|		КОГДА УПЖКХ_НачисленияОбороты.РазделУчета = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.Льготы)
	|			ТОГДА -УПЖКХ_НачисленияОбороты.СуммаНачисленияОборот
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаЛьготы,
	|	УПЖКХ_НачисленияОбороты.Период КАК РасчетныйПериод
	|ПОМЕСТИТЬ втСуммыНачисленийПоУслугам
	|ИЗ
	|	РегистрНакопления.УПЖКХ_Начисления.Обороты(
	|			&ДатаНач,
	|			&ДатаКон,
	|			Месяц,
	|			Организация = &Организация
	|				И ЛицевойСчет = &ЛицевойСчет) КАК УПЖКХ_НачисленияОбороты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втСуммыНачисленийПоУслугам.Услуга КАК Услуга,
	|	СУММА(втСуммыНачисленийПоУслугам.СуммаНачисленияБезЛьгот) КАК СуммаНачисленияБезЛьгот,
	|	СУММА(втСуммыНачисленийПоУслугам.СуммаНачисленияБезЛьгот - втСуммыНачисленийПоУслугам.СуммаЛьготы) КАК СуммаНачисления,
	|	СУММА(втСуммыНачисленийПоУслугам.СуммаЛьготы) КАК ВыпадающиеДоходы,
	|	КОНЕЦПЕРИОДА(втСуммыНачисленийПоУслугам.РасчетныйПериод, МЕСЯЦ) КАК РасчетныйПериод
	|ИЗ
	|	втСуммыНачисленийПоУслугам КАК втСуммыНачисленийПоУслугам
	|
	|СГРУППИРОВАТЬ ПО
	|	втСуммыНачисленийПоУслугам.Услуга,
	|	втСуммыНачисленийПоУслугам.РасчетныйПериод
	|
	|УПОРЯДОЧИТЬ ПО
	|	РасчетныйПериод
	|ИТОГИ
	|	СУММА(СуммаНачисленияБезЛьгот),
	|	СУММА(СуммаНачисления),
	|	СУММА(ВыпадающиеДоходы)
	|ПО
	|	РасчетныйПериод";
	
	Запрос.УстановитьПараметр("ДатаНач",     НачалоМесяца(ПараметрыОтчета.НачалоПериода));
	Запрос.УстановитьПараметр("ДатаКон",     КонецМесяца(ПараметрыОтчета.КонецПериода));
	Запрос.УстановитьПараметр("Организация", ПараметрыОтчета.Организация);
	Запрос.УстановитьПараметр("ЛицевойСчет", ЛицевойСчет);
	
	Возврат Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	
КонецФункции // ПолучитьТаблицуНачислений()

// Функция возвращает таблицу значений, содержащую площади помещений квартиры.
//
Функция ПолучитьПлощадиПомещенийКвартиры(ЛицевойСчет, ПараметрыОтчета)
	
	Запрос = Новый Запрос;
	
	СписокТиповПомещений = Новый СписокЗначений;
	СписокТиповПомещений.Добавить(Перечисления.КВП_ТипыПомещений.Комната);
	СписокТиповПомещений.Добавить(Перечисления.КВП_ТипыПомещений.Кабинет);
	
	Запрос.УстановитьПараметр("Помещение",              ЛицевойСчет.Адрес);
	Запрос.УстановитьПараметр("Период",                 ПараметрыОтчета.НачалоПериода);
	Запрос.УстановитьПараметр("СписокТиповПомещений",   СписокТиповПомещений);
	Запрос.УстановитьПараметр("ВидПлощадиОбщаяПлощадь", Справочники.УПЖКХ_ВидыПлощадей.ОбщаяПлощадь);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЕСТЬNULL(КВП_ПлощадьПомещенияСрезПоследних.Площадь, 0) КАК Площадь,
	|	КВП_ПлощадьПомещенияСрезПоследних.Объект.ВидПомещения.ТипПомещения КАК ТипПомещения
	|ИЗ
	|	РегистрСведений.КВП_ПлощадьПомещения.СрезПоследних(&Период, ВидПлощади = &ВидПлощадиОбщаяПлощадь) КАК КВП_ПлощадьПомещенияСрезПоследних
	|ГДЕ
	|	КВП_ПлощадьПомещенияСрезПоследних.Объект.Родитель = &Помещение
	|	И КВП_ПлощадьПомещенияСрезПоследних.Объект.ВидПомещения.ТипПомещения В(&СписокТиповПомещений)";
	
	ТаблицаРезультат = Запрос.Выполнить().Выгрузить();
	Возврат ТаблицаРезультат;
	
КонецФункции

// Получает наименование документа собственности по лицевому счету на указанную дату.
//
// Параметры:
//  Период      - дата получения документа собственности.
//  ЛицевойСчет - лицевой счет.
//
// Возвращаемое значение:
//  НаименованиеДокРегПраваСоб.
//
Функция ПолучитьДокументСобственности(ПараметрыОтчета)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Период", КонецМесяца(ПараметрыОтчета.КонецПериода));
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УПЖКХ_СобственникиПомещенийСрезПоследних.ДатаДокумента КАК ДатаДокумента,
	|	УПЖКХ_СобственникиПомещенийСрезПоследних.ВидДокумента КАК ВидДокумента,
	|	УПЖКХ_СобственникиПомещенийСрезПоследних.НомерДокумента КАК НомерДокумента
	|ИЗ
	|	РегистрСведений.УПЖКХ_СобственникиПомещений.СрезПоследних(&Период, Помещение = &Помещение) КАК УПЖКХ_СобственникиПомещенийСрезПоследних
	|ГДЕ
	|	УПЖКХ_СобственникиПомещенийСрезПоследних.Действует
	|
	|СГРУППИРОВАТЬ ПО
	|	УПЖКХ_СобственникиПомещенийСрезПоследних.ДатаДокумента,
	|	УПЖКХ_СобственникиПомещенийСрезПоследних.ВидДокумента,
	|	УПЖКХ_СобственникиПомещенийСрезПоследних.НомерДокумента";
	
	Запрос.УстановитьПараметр("Помещение", ПараметрыОтчета.ЛицевойСчет.Адрес);

	ТаблицаРезультат = Запрос.Выполнить().Выгрузить();
	
	НаименованиеДокРегПраваСоб = "";
	
	Для Каждого Строка ИЗ ТаблицаРезультат Цикл
		НаименованиеДокРегПраваСоб = НаименованиеДокРегПраваСоб + ?(ПустаяСтрока(НаименованиеДокРегПраваСоб), "", ", ")
									 + ПолучитьПредставлениеДокументаСобственности(Строка.НомерДокумента, Строка.ДатаДокумента, Строка.ВидДокумента);
	КонецЦикла;
	
	Возврат НаименованиеДокРегПраваСоб;
	
КонецФункции // ПолучитьДокументСобственности()

// Формирует ФИО (фамилию и инициалы).
//
// Возвращаемое значение:
//  Строка - ФИО ответственного
//
Функция ПолучитьФИООтветственного(ПараметрыОтчета)
	
	ФИО = ПараметрыОтчета.Ответственный.Наименование;
	ФизЛицоПользователя = Справочники.ФизическиеЛица.НайтиПоНаименованию(ФИО);
	Если Не ФизЛицоПользователя.Пустая() Тогда
		Запрос = Новый Запрос();
		Запрос.УстановитьПараметр("ДатаСреза", КонецМесяца(ПараметрыОтчета.КонецПериода));
		Запрос.УстановитьПараметр("ФизЛицо",   ФизЛицоПользователя);
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ФИОФизическихЛицСрезПоследних.Фамилия + ВЫБОР
		|		КОГДА ПОДСТРОКА(ФИОФизическихЛицСрезПоследних.Имя, 1, 1) <> """"
		|			ТОГДА "" "" + ПОДСТРОКА(ФИОФизическихЛицСрезПоследних.Имя, 1, 1) + "".""
		|		ИНАЧЕ """"
		|	КОНЕЦ + ВЫБОР
		|		КОГДА ПОДСТРОКА(ФИОФизическихЛицСрезПоследних.Отчество, 1, 1) <> """"
		|			ТОГДА "" "" + ПОДСТРОКА(ФИОФизическихЛицСрезПоследних.Отчество, 1, 1) + "".""
		|		ИНАЧЕ """"
		|	КОНЕЦ КАК ФИОПолное
		|ИЗ
		|	РегистрСведений.ФИОФизическихЛиц.СрезПоследних(&ДатаСреза, ФизическоеЛицо = &ФизЛицо) КАК ФИОФизическихЛицСрезПоследних";
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ФИО = Выборка.ФИОПолное;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ФИО;
	
КонецФункции // ПолучитьФИООтветственного()

// Формирует отчет по переданным параметрам и помещает его результат во временное хранилище.
//
// Параметры:
//	ПараметрыОтчета - Структура - Содержит параметры отчета.
//	АдресХранилища - Строка - Адрес временного хранилища, в которое необходимо поместить результат.
//
Процедура СформироватьОтчет(ПараметрыОтчета, АдресХранилища) Экспорт
	
	ДокументРезультат = Новый ТабличныйДокумент;
	
	Макет = УПЖКХ_ТиповыеМетодыСервер.ПолучитьМакет("Отчет.КВП_ФинансовоЛицевойСчетФорма1_3.ПФ_MXL_Форма_1_3");
	
	// Вывод отчета
	Помещение            = ПараметрыОтчета.ЛицевойСчет.Адрес;
	Здание               = Помещение.Владелец;
	СтрАдрес             = ПолучитьАдрес(Здание, Перечисления.КВП_ВидыАдресов.Здание);
	ДанныеПоЛС           = СформироватьДанныеПоЛицевомуСчету(ПараметрыОтчета.ЛицевойСчет,
															 КонецМесяца(ПараметрыОтчета.КонецПериода),
															 ,
															 ПараметрыОтчета.Организация);
	ДанныеОСобственности = ПолучитьДокументСобственности(ПараметрыОтчета);
	
	// Вывод шапки отчета.
	ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
	
	СтруктураПараметровШапкиОтчета = Новый Структура;
	СтруктураПараметровШапкиОтчета.Вставить("НомерСчета",        ПараметрыОтчета.Номер);
	СтруктураПараметровШапкиОтчета.Вставить("Организация",       ПараметрыОтчета.Организация);
	СтруктураПараметровШапкиОтчета.Вставить("Помещение",         Помещение.Код);
	СтруктураПараметровШапкиОтчета.Вставить("Телефон",           ПараметрыОтчета.ЛицевойСчет.Телефон);
	СтруктураПараметровШапкиОтчета.Вставить("ДокументНаПлощадь", ДанныеОСобственности);
	
	Если ТипЗнч(ПараметрыОтчета.Проживающий) = Тип("СправочникСсылка.Контрагенты") Тогда
		СтруктураПараметровШапкиОтчета.Вставить("ФИО",ПараметрыОтчета.Проживающий.Наименование);
	Иначе
		СтруктураПараметровШапкиОтчета.Вставить("ФИО",ПараметрыОтчета.Проживающий);
	КонецЕсли;
	
	Если (ТипЗнч(ПараметрыОтчета.Проживающий) = Тип("СправочникСсылка.УПЖКХ_Жильцы")
		И ДанныеПоЛС.ТаблицаСобственников.Найти(ПараметрыОтчета.Проживающий.ФизЛицо, "Собственник") <> Неопределено)
		ИЛИ (ТипЗнч(ПараметрыОтчета.Проживающий) = Тип("СправочникСсылка.Контрагенты") И ПараметрыОтчета.Проживающий = ДанныеПоЛС.Ответственный) Тогда
		СтруктураПараметровШапкиОтчета.Вставить("ФИОПолучателя", "Ф.И.О. собственника");
	Иначе
		СтруктураПараметровШапкиОтчета.Вставить("ФИОПолучателя", "Ф.И.О. нанимателя");
	КонецЕсли;
	
	ОбластьШапка.Параметры.Заполнить(СтрАдрес);
	ОбластьШапка.Параметры.Заполнить(ДанныеПоЛС);
	ОбластьШапка.Параметры.Заполнить(СтруктураПараметровШапкиОтчета);
	
	ДокументРезультат.Вывести(ОбластьШапка);
	
	// ОБЩИЕ ДАННЫЕ.
	
	Если ПараметрыОтчета.НастройкаВидовУдобств Тогда
		ОбластьСвойств        = Макет.ПолучитьОбласть("ОбластьСвойствСНастройками");
		ХарактеристикиОбъекта = ПолучитьСведенияОБлагоустройствеПомещения(Помещение);
	Иначе
		ОбластьСвойств        = Макет.ПолучитьОбласть("ОбщиеСвойстваБезНастройки");
		ХарактеристикиОбъекта = ПолучитьСведенияОЗдании(Здание);
	КонецЕсли;
	
	// Заполним некоторые параметры в области свойств данными по л/с.
	ОбластьСвойств.Параметры.Заполнить(ДанныеПоЛС);
	
	// Заполним площади помещений.
	ПлощадиПомещений = ПолучитьПлощадиПомещенийКвартиры(ПараметрыОтчета.ЛицевойСчет, ПараметрыОтчета);
	
	Для Каждого ТекСтрока Из ПлощадиПомещений Цикл
		НомерТекСтроки = ПлощадиПомещений.Индекс(ТекСтрока) + 1;
		
		Если НомерТекСтроки <= 7 Тогда
			
			СтруктураПлощади  = Новый Структура;
			СтруктураПлощади.Вставить("НомерСтроки"    + НомерТекСтроки, ?(ТекСтрока.ТипПомещения = Перечисления.КВП_ТипыПомещений.Комната,
																		   Строка(НомерТекСтроки) + "комн.= ",
																		   Строка(НомерТекСтроки) + "каб.= "));
			СтруктураПлощади.Вставить("ПлощадьКомнаты" + НомерТекСтроки, ?(Не ТекСтрока.Площадь = 0,
																		   Строка(ТекСтрока.Площадь)+" кв.м",
																		   0));
			
			ОбластьСвойств.Параметры.Заполнить(СтруктураПлощади);
			
		КонецЕсли;
		
	КонецЦикла;
	
	СтруктураПлощадиИтого = Новый Структура;
	СтруктураПлощадиИтого.Вставить("ПлощадьКомнатИтого", ?(Не ПлощадиПомещений.Итог("Площадь") = 0,
														   Строка(ПлощадиПомещений.Итог("Площадь")) + " кв.м",
														   0));
	ОбластьСвойств.Параметры.Заполнить(СтруктураПлощадиИтого);
	
	Если ПараметрыОтчета.НастройкаВидовУдобств Тогда
		НомерТекСтроки = 0;
		КоличествоВидовУдобств = ХарактеристикиОбъекта.Количество();
		
		Пока НомерТекСтроки < КоличествоВидовУдобств Цикл
			
			Если НомерТекСтроки < 10 Тогда
				
				СтруктураУдобства = Новый Структура;
				СтруктураУдобства.Вставить("ВидУдобства" + НомерТекСтроки, ХарактеристикиОбъекта[НомерТекСтроки].ВидБлагоустройства);
				СтруктураУдобства.Вставить("Значение"    + НомерТекСтроки, ХарактеристикиОбъекта[НомерТекСтроки].Значение);
				
				ОбластьСвойств.Параметры.Заполнить(СтруктураУдобства);
				
			Иначе
				
				Если НомерТекСтроки = 10 Тогда
					ДокументРезультат.Вывести(ОбластьСвойств);
					ОбластьДопСвойств = Макет.ПолучитьОбласть("ОбластьДопСвойств");
				КонецЕсли;
				
				СтруктураУдобства = Новый Структура;
				СтруктураУдобства.Вставить("ВидУдобства", ХарактеристикиОбъекта[НомерТекСтроки].ВидБлагоустройства);
				СтруктураУдобства.Вставить("Значение",    ХарактеристикиОбъекта[НомерТекСтроки].Значение);
				
				ОбластьДопСвойств.Параметры.Заполнить(СтруктураУдобства);
				ДокументРезультат.Вывести(ОбластьДопСвойств);
				
			КонецЕсли;
			
			НомерТекСтроки = НомерТекСтроки + 1;
			
		КонецЦикла;
		
		Если КоличествоВидовУдобств <= 10 Тогда
			ДокументРезультат.Вывести(ОбластьСвойств);
		КонецЕсли;
		
	Иначе
		
		ОбластьСвойств.Параметры.Заполнить(ХарактеристикиОбъекта);
		ДокументРезультат.Вывести(ОбластьСвойств);
		
	КонецЕсли;
	
	ХарактеристикиЗдания = ПолучитьСведенияОЗдании(Здание);
	ХарактеристикиЗдания.Вставить("Этаж", Помещение.Этаж);
	
	ОбластьЗдания = Макет.ПолучитьОбласть("ОбластьЗдания");
	ОбластьЗдания.Параметры.Заполнить(ХарактеристикиЗдания);
	ДокументРезультат.Вывести(ОбластьЗдания);
	
	// СВЕДЕНИЯ О СОСТАВЕ СЕМЬИ.
	
	ТаблицаЗарегистрированных = ПолучитьТаблицуЗарегистрированных(ПараметрыОтчета);
	
	Если ТаблицаЗарегистрированных.Количество()>0 Тогда
		
		ОбластьШапкаТаблицы = Макет.ПолучитьОбласть("ШапкаТаблицы");
		ДокументРезультат.Вывести(ОбластьШапкаТаблицы);
		
		ОбластьСтрокаТаблицы = Макет.ПолучитьОбласть("СтрокаТаблицы");
		Для Каждого ТекСтрока Из ТаблицаЗарегистрированных Цикл
			ОбластьСтрокаТаблицы.Параметры.Заполнить(ТекСтрока);
			ДокументРезультат.Вывести(ОбластьСтрокаТаблицы);
		КонецЦикла;
		
	КонецЕсли;
	
	// ПОДВАЛ.
	
	Если ПараметрыОтчета.ВыводитьОтветственного Тогда
		
		ОбластьМакета = Макет.ПолучитьОбласть("ПодвалОтветственный");
		
		СтруктураОтветственный = Новый Структура;
		СтруктураОтветственный.Вставить("Ответственный", ?(ПустаяСтрока(ПараметрыОтчета.Ответственный), "", "/ " + ПолучитьФИООтветственного(ПараметрыОтчета) + " /"));
		
		ОбластьМакета.Параметры.Заполнить(СтруктураОтветственный);
		ДокументРезультат.Вывести(ОбластьМакета);
		
	КонецЕсли;
	
	ОбластьПодвал = Макет.ПолучитьОбласть("Подвал");
	
	Руководители = УПЖКХ_ТиповыеМетодыВызовСервера.ОтветственныеЛица(ПараметрыОтчета.Организация, КонецДня(ПараметрыОтчета.КонецПериода));
	
	СтруктураРуководители = Новый Структура;
	СтруктураРуководители.Вставить("ДолжностьДиректора", ?(ПустаяСтрока(Руководители.РуководительДолжность), "Директор", Руководители.РуководительДолжность));
	СтруктураРуководители.Вставить("ФИОДиректора",       ?(ПустаяСтрока(Руководители.Руководитель), "", "/ " + Руководители.Руководитель + " /"));
	
	ОбластьПодвал.Параметры.Заполнить(СтруктураРуководители);
	ДокументРезультат.Вывести(ОбластьПодвал);
	
	// ОБОРОТНАЯ СТОРОНА.
	
	ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
	
	ДеревоНачислений = ПолучитьТаблицуНачислений(ПараметрыОтчета.ЛицевойСчет, ПараметрыОтчета);
	
	СпУслуг = Новый СписокЗначений;
	
	Для Каждого ТекПериод Из ДеревоНачислений.Строки Цикл
		
		Для Каждого ТекНачисление Из ТекПериод.Строки Цикл
			
			Если СпУслуг.НайтиПоЗначению(ТекНачисление.Услуга) = Неопределено Тогда
				СпУслуг.Добавить(ТекНачисление.Услуга);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	СпУслуг.СортироватьПоЗначению();
	
	ОбластьПлательщик = Макет.ПолучитьОбласть("ШапкаОборотная|Плательщик");
	
	СтруктураФИО = Новый Структура;
	СтруктураФИО.Вставить("ФИО", УПЖКХ_ОбщегоНазначенияСервер.ПолучитьСведенияДляВзаиморасчетовПоЛицевомуСчету(ПараметрыОтчета.ЛицевойСчет,
																											   ПараметрыОтчета.Организация,
																											   ПараметрыОтчета.КонецПериода,
																											   "Контрагент"));
	
	ОбластьПлательщик.Параметры.Заполнить(СтруктураФИО);
	ДокументРезультат.Вывести(ОбластьПлательщик);
	
	Для Каждого ТекУслуга Из СпУслуг Цикл
		
		ОбластьУслугаВШапке = Макет.ПолучитьОбласть("ШапкаОборотная|Услуга");
		
		СтруктураУслуги = Новый Структура;
		СтруктураУслуги.Вставить("Услуга", ТекУслуга.Значение);
		
		ОбластьУслугаВШапке.Параметры.Заполнить(СтруктураУслуги);
		ДокументРезультат.Присоединить(ОбластьУслугаВШапке);
		
	КонецЦикла;
	
	ТекПериод = КонецМесяца(ПараметрыОтчета.НачалоПериода);
	
	Пока ТекПериод <= КонецМесяца(ПараметрыОтчета.КонецПериода) Цикл
		
		СтрокаПериода = ДеревоНачислений.Строки.Найти(ТекПериод, "РасчетныйПериод");
		
		ОбластьПлательщик = Макет.ПолучитьОбласть("СтрокаНачисление|Плательщик");
		
		СтруктураПериодНачисления = Новый Структура;
		СтруктураПериодНачисления.Вставить("ПериодНачисления",Формат(ТекПериод, "ДФ='MMММ yyyy'"));
		
		ОбластьПлательщик.Параметры.Заполнить(СтруктураПериодНачисления);
		
		Если СтрокаПериода = Неопределено Тогда
			ДокументРезультат.Вывести(ОбластьПлательщик);
			
			Для Каждого ТекУслуга Из СпУслуг Цикл
				ОбластьУслуга = Макет.ПолучитьОбласть("СтрокаНачисление|Услуга");
				ДокументРезультат.Присоединить(ОбластьУслуга);
			КонецЦикла;
			
		Иначе
			
			СтруктураСуммИтого = Новый Структура;
			СтруктураСуммИтого.Вставить("ИтогоСуммаНачисленияБезЛьгот", СтрокаПериода.СуммаНачисленияБезЛьгот);
			СтруктураСуммИтого.Вставить("ИтогоСуммаНачисления",         СтрокаПериода.СуммаНачисления);
			СтруктураСуммИтого.Вставить("ИтогоВыпадающиеДоходы",        СтрокаПериода.ВыпадающиеДоходы);
			
			ОбластьПлательщик.Параметры.Заполнить(СтруктураСуммИтого);
			ДокументРезультат.Вывести(ОбластьПлательщик);
			
			Для Каждого ТекУслуга Из СпУслуг Цикл
				
				ОбластьУслуга = Макет.ПолучитьОбласть("СтрокаНачисление|Услуга");
				СтрокаУслуги = СтрокаПериода.Строки.Найти(ТекУслуга.Значение, "Услуга");
				
				Если НЕ СтрокаУслуги = Неопределено Тогда
					
					СтруктураСумм = Новый Структура;
					СтруктураСумм.Вставить("СуммаНачисленияБезЛьгот",СтрокаУслуги.СуммаНачисленияБезЛьгот);
					СтруктураСумм.Вставить("СуммаНачисления",        СтрокаУслуги.СуммаНачисления);
					СтруктураСумм.Вставить("ВыпадающиеДоходы",       СтрокаУслуги.ВыпадающиеДоходы);
					
					ОбластьУслуга.Параметры.Заполнить(СтруктураСумм);
					
				КонецЕсли;
				
				ДокументРезультат.Присоединить(ОбластьУслуга);
				
			КонецЦикла;
			
		КонецЕсли;
		
		ТекПериод = КонецМесяца(ДобавитьМесяц(ТекПериод, 1));
		
	КонецЦикла;
	
	ОбластьЗадолженность = Макет.ПолучитьОбласть("СтрокаЗадолженность");
	
	КонецПериода      = КонецМесяца(ПараметрыОтчета.КонецПериода);
	ЗадолженностьПоЛС = ПолучитьЗадолженностьПоЛС(КонецПериода, ПараметрыОтчета);
	
	СтруктураЗадолженности = Новый Структура;
	СтруктураЗадолженности.Вставить("КонецПериода",      Формат(КонецПериода, "ДФ=dd.MM.yy"));
	СтруктураЗадолженности.Вставить("ЗадолженностьПоЛС", ?(ЗадолженностьПоЛС = 0, "0,00" , Формат(ЗадолженностьПоЛС, "ЧДЦ=2")));
	
	ОбластьЗадолженность.Параметры.Заполнить(СтруктураЗадолженности);
	ДокументРезультат.Вывести(ОбластьЗадолженность);
	
	ДокументРезультат.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	ДокументРезультат.АвтоМасштаб        = Истина;
	
	ПоместитьВоВременноеХранилище(ДокументРезультат, АдресХранилища);
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли