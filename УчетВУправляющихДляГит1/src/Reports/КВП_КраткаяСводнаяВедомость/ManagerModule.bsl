#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныеПроцедурыИФункции

// Формирует представление указанного объекта: здания, подъезда или лицевого счета.
//
// Параметры
//  Объект       - ссылка на элемент справочника Здания, Подъезды или
//                 Лицевые счета, или на группу справочника.
//
// Возвращаемое значение:
//  Строка - представление объекта.
//
Функция ПолучитьПредставлениеОбъекта(ПараметрыОтчета) Экспорт

	ПредставлениеОбъекта = "";
	Если Не ЗначениеЗаполнено(ПараметрыОтчета.Объект) Тогда
		ПредставлениеОбъекта = "По всем объектам";
	ИначеЕсли ПараметрыОтчета.Объект.ЭтоГруппа Тогда
		ПредставлениеОбъекта = ПолноеНаименованиеСправочника(ПараметрыОтчета.Объект);
	Иначе
		Если      ТипЗнч(ПараметрыОтчета.Объект) = Тип("СправочникСсылка.КВП_Здания") Тогда
			ПредставлениеОбъекта = ПолноеНаименованиеСправочника(ПараметрыОтчета.Объект);
		ИначеЕсли ТипЗнч(ПараметрыОтчета.Объект) = Тип("СправочникСсылка.КВП_Подъезды") Тогда
			ПредставлениеОбъекта = ПолноеНаименованиеСправочника(ПараметрыОтчета.Объект.Владелец)
								 + ", " 
								 + ПараметрыОтчета.Объект.Наименование;
		ИначеЕсли ТипЗнч(ПараметрыОтчета.Объект) = Тип("СправочникСсылка.КВП_ЛицевыеСчета") Тогда
			ТекВладелецОбъекта = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьОтветственногоСобственникаЛицевогоСчета(ПараметрыОтчета.Объект, ПараметрыОтчета.КонецПериода);
			ПредставлениеОбъекта = ПолноеНаименованиеСправочника(ПараметрыОтчета.Объект.Адрес.Владелец)
								 + ", " 
								 + НРег(ПараметрыОтчета.Объект.Адрес.Наименование) 
								 + "; " 
								 + ПараметрыОтчета.Объект.Наименование 
								 + ?(ЗначениеЗаполнено(ПараметрыОтчета.Объект), "; " + ТекВладелецОбъекта, "");
		КонецЕсли;
	КонецЕсли;

	Возврат ПредставлениеОбъекта;

КонецФункции // ПолучитьПредставлениеОбъекта()

// Формирует заголовок отчета.
//
// Возвращаемое значение:
//  Текст – заголовок отчета
//
Функция ЗаголовокОтчета(ПараметрыОтчета) Экспорт

	ТекстЗаголовка = "Краткая сводная ведомость за " + ПредставлениеПериода(НачалоДня(ПараметрыОтчета.НачалоПериода), КонецДня(ПараметрыОтчета.КонецПериода));

	Возврат ТекстЗаголовка;

КонецФункции // ЗаголовокОтчета()

// Процедура формирует отчет.
Процедура СформироватьОтчет(ПараметрыОтчета, АдресХранилища) Экспорт
	
	Если Не ЗначениеЗаполнено(ПараметрыОтчета.КонецПериода) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Не указан период!");
		Возврат;
	КонецЕсли;
	
	Если ПараметрыОтчета.НачалоПериода > ПараметрыОтчета.КонецПериода Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Неверно указан период!");
		Возврат;
	КонецЕсли;
	
	Если НЕ ПараметрыОтчета.Свойство("ВариантОтбораУслуг") Тогда
		ПараметрыОтчета.Вставить("ВариантОтбораУслуг", "формировать отчет по всем услугам");
	КонецЕсли;
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	СписокОбъектов = ПолучитьЭлементыСправочникаПоГруппе(ПараметрыОтчета.Объект);
	Если      ТипЗнч(ПараметрыОтчета.Объект) = Тип("СправочникСсылка.КВП_Здания") Тогда
		СписокЛС = КВП_ПолучитьСписокЛицевыхСчетовПоЗданиям(СписокОбъектов, НачалоДня(ПараметрыОтчета.НачалоПериода), КонецДня(ПараметрыОтчета.КонецПериода), Ложь);
	ИначеЕсли ТипЗнч(ПараметрыОтчета.Объект) = Тип("СправочникСсылка.КВП_Подъезды") Тогда
		СписокЛС = КВП_ПолучитьСписокЛицевыхСчетовПоПодъездам(СписокОбъектов, НачалоДня(ПараметрыОтчета.НачалоПериода), КонецДня(ПараметрыОтчета.КонецПериода), Ложь);
	ИначеЕсли ТипЗнч(ПараметрыОтчета.Объект) = Тип("СправочникСсылка.КВП_ЛицевыеСчета") Тогда
		СписокЛС = СписокОбъектов;
	КонецЕсли;
	
	Запрос = Новый Запрос();

	Запрос.УстановитьПараметр("ДатаНач",     НачалоДня(ПараметрыОтчета.НачалоПериода));
	Запрос.УстановитьПараметр("ДатаКон",     КонецДня(ПараметрыОтчета.КонецПериода));
	Запрос.УстановитьПараметр("Организация", ПараметрыОтчета.Организация);
	Запрос.УстановитьПараметр("СписокЛС",    СписокЛС);
	
	Запрос.УстановитьПараметр("КонстантаУказыватьКоличествоПрожИЗарегЧислами", Константы.УПЖКХ_УказыватьКоличествоПрожИЗарегЧислами.Получить());
	
	Если НЕ ПараметрыОтчета.ВариантОтбораУслуг = "формировать отчет по всем услугам" Тогда
		Запрос.УстановитьПараметр("СписокУслуг", ПараметрыОтчета.СписокУслуг);
	КонецЕсли;
	
	Запрос.Текст = ПолучитьТекстЗапроса(ПараметрыОтчета);
	ВыборкаИтоги = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ВыборкаИтоги.Следующий();

	// ВЫВОД ОТЧЕТА

	Макет = ПолучитьМакет("Макет");

	// Шапка отчета.
	ПредставлениеОбъекта = ПолучитьПредставлениеОбъекта(ПараметрыОтчета);
	ОписаниеПриватизации = "";
	Если      ПараметрыОтчета.Приватизация = 0 Тогда
		ОписаниеПриватизации = "Все квартиры";
	ИначеЕсли ПараметрыОтчета.Приватизация = 1 Тогда
		ОписаниеПриватизации = "Только приватизированные";
	ИначеЕсли ПараметрыОтчета.Приватизация = 2 Тогда
		ОписаниеПриватизации = "Только неприватизированные";
	КонецЕсли;

	ОбластьМакета = Макет.ПолучитьОбласть("ШапкаОтчета");
	ОбластьМакета.Параметры.Организация     = ПараметрыОтчета.Организация;
	ОбластьМакета.Параметры.ЗаголовокОтчета = ЗаголовокОтчета(ПараметрыОтчета);
	ОбластьМакета.Параметры.Объект          = ПредставлениеОбъекта;
	ОбластьМакета.Параметры.Приватизация    = ОписаниеПриватизации;
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	// Шапка таблицы.
	ОбластьМакета = Макет.ПолучитьОбласть("ШапкаТаблицы");
	Если НЕ ЗначениеЗаполнено(ПараметрыОтчета.Объект) Тогда
		ОбластьМакета = Макет.ПолучитьОбласть("ШапкаТаблицыДляГруппировки");
	КонецЕсли;
	ТабличныйДокумент.Вывести(ОбластьМакета);

	// Таблица.
	Если НЕ ЗначениеЗаполнено(ПараметрыОтчета.Объект) Тогда
		
		Выборка = ВыборкаИтоги.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока Выборка.Следующий() Цикл
			
			// Выводим текущую дату.
			
			ОбластьМакета = Макет.ПолучитьОбласть("СтрокаТаблицы|ОбластьДокумента");
			ОбластьМакета.Параметры.Заполнить(Выборка);
			ОбластьМакета.Параметры.ЛицевойСчетНаименование = Выборка.Здание;
			ТабличныйДокумент.НачатьАвтогруппировкуСтрок();
			ОбластьМакета.Область().ЦветФона = ЦветаСтиля.ЦветФонаГруппировкиОтчета1;
			НовыйШрифт = Новый Шрифт (ОбластьМакета.ТекущаяОбласть.Шрифт,,,Истина); // получили такой же шрифт, но жирный
			ОбластьМакета.Область().Шрифт = НовыйШрифт;
			НомерСтроки   = ТабличныйДокумент.ВысотаТаблицы + 1;
			ТабличныйДокумент.Вывести(ОбластьМакета, 1);
			ТабличныйДокумент.Область(НомерСтроки, 2, НомерСтроки, 4).Объединить();
			ВыборкаДеталей = Выборка.Выбрать();
			
			Пока ВыборкаДеталей.Следующий() Цикл
				ОбластьМакета = Макет.ПолучитьОбласть("СтрокаТаблицы");
				ОбластьМакета.Параметры.Заполнить(ВыборкаДеталей);
				
				ТабличныйДокумент.Вывести(ОбластьМакета, 2);
			КонецЦикла;
			
			ТабличныйДокумент.ЗакончитьАвтогруппировкуСтрок();
			
		КонецЦикла;
	
	Иначе
		
		Выборка = ВыборкаИтоги.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			// Выводим текущую дату.
			
			ОбластьМакета = Макет.ПолучитьОбласть("СтрокаТаблицы");
			ОбластьМакета.Параметры.Заполнить(Выборка);
			
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
			КонецЦикла;
		
	КонецЕсли;
	
	// Подвал таблицы.
	ОбластьМакета = Макет.ПолучитьОбласть("ИтогТаблицы");
	ОбластьМакета.Параметры.Заполнить(ВыборкаИтоги);
	ТабличныйДокумент.Вывести(ОбластьМакета, 1);

	Если НЕ ЗначениеЗаполнено(ПараметрыОтчета.Объект) Тогда
		
	КонецЕсли;

	// Первую колонку не печатаем
	ТабличныйДокумент.ОбластьПечати = ТабличныйДокумент.Область(1, 2,
	                                  ТабличныйДокумент.ВысотаТаблицы, ТабличныйДокумент.ШиринаТаблицы);

	// Присвоим имя для сохранения параметров печати табличного документа
	ТабличныйДокумент.ИмяПараметровПечати = "НастройкиПечати_КВП_КраткаяСводнаяВедомость";
	
	ПоместитьВоВременноеХранилище(ТабличныйДокумент, АдресХранилища);
	
КонецПроцедуры

// Формирует текст запроса.
Функция ПолучитьТекстЗапроса(ПараметрыОтчета)

	ЕстьФильтрПоПрив = Ложь;
	Если      ПараметрыОтчета.Приватизация = 1 Тогда
		ЕстьФильтрПоПрив = Истина;
		ТекстФильтраПоПрив = " И УПЖКХ_СобственностьНаПомещенияСрезПоследних.ВидСобственности = 
		|	ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыСобственности.Частная)";
	ИначеЕсли ПараметрыОтчета.Приватизация = 2 Тогда
		ЕстьФильтрПоПрив = Истина;
		ТекстФильтраПоПрив = " И НЕ УПЖКХ_СобственностьНаПомещенияСрезПоследних.ВидСобственности =
		|	ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыСобственности.Частная)";
	КонецЕсли;
	
	Если ПараметрыОтчета.ВариантОтбораУслуг = "формировать отчет по всем услугам" Тогда
		УсловиеНаУслугу = "ИСТИНА";
	Иначе
		Если ПараметрыОтчета.ВариантОтбораУслуг = "формировать отчет по указанным услугам" Тогда
			УсловиеНаУслугу = "Услуга В ИЕРАРХИИ (&СписокУслуг)";
		ИначеЕсли ПараметрыОтчета.ВариантОтбораУслуг = "формировать отчет по услугам кап. ремонта" Тогда
			УсловиеНаУслугу = "Услуга В (&СписокУслуг)";
		ИначеЕсли ПараметрыОтчета.ВариантОтбораУслуг = "формировать отчет по услугам, отличным от кап. ремонта" Тогда
			УсловиеНаУслугу = "НЕ Услуга В (&СписокУслуг)";
		КонецЕсли;
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОстаткиИОбороты.ЛицевойСчет КАК ЛицевойСчет,
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОстаткиИОбороты.ЛицевойСчет.Адрес КАК Квартира,
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОстаткиИОбороты.ЛицевойСчет.Адрес.Владелец КАК Здание,
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОстаткиИОбороты.СуммаНачисленияНачальныйОстаток КАК СуммаНач,
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОстаткиИОбороты.СуммаНачисленияКонечныйОстаток КАК СуммаКон,
	|	0 КАК СуммаНачислено,
	|	0 КАК СуммаОплачено
	|ПОМЕСТИТЬ втНачисленияОстаткиИОбороты
	|ИЗ
	|	РегистрНакопления.КВП_ВзаиморасчетыПоЛицевымСчетам.ОстаткиИОбороты(
	|			&ДатаНач,
	|			&ДатаКон,
	|			,
	|			,
	|			Организация = &Организация" + ?(ЗначениеЗаполнено(ПараметрыОтчета.Объект), " И ЛицевойСчет В (&СписокЛС)", "") + " И &ДопПараметр) КАК КВП_ВзаиморасчетыПоЛицевымСчетамОстаткиИОбороты
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	УПЖКХ_НачисленияОбороты.ЛицевойСчет,
	|	УПЖКХ_НачисленияОбороты.ЛицевойСчет.Адрес,
	|	УПЖКХ_НачисленияОбороты.ЛицевойСчет.Адрес.Владелец,
	|	0,
	|	0,
	|	ВЫБОР
	|		КОГДА УПЖКХ_НачисленияОбороты.ВидНачисления В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Оплата), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.ЗачетДолговИПереплат))
	|			ТОГДА 0
	|		ИНАЧЕ УПЖКХ_НачисленияОбороты.СуммаНачисленияОборот
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА УПЖКХ_НачисленияОбороты.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Оплата)
	|			ТОГДА -УПЖКХ_НачисленияОбороты.СуммаНачисленияОборот
	|		ИНАЧЕ 0
	|	КОНЕЦ
	|ИЗ
	|	РегистрНакопления.УПЖКХ_Начисления.Обороты(
	|			&ДатаНач,
	|			&ДатаКон,
	|			,
	|			Организация = &Организация" + ?(ЗначениеЗаполнено(ПараметрыОтчета.Объект), " И ЛицевойСчет В (&СписокЛС)", "") + " И &ДопПараметр) КАК УПЖКХ_НачисленияОбороты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втНачисленияОстаткиИОбороты.ЛицевойСчет,
	|	втНачисленияОстаткиИОбороты.Квартира,
	|	втНачисленияОстаткиИОбороты.Здание,
	|	СУММА(втНачисленияОстаткиИОбороты.СуммаНач) КАК СуммаНач,
	|	СУММА(втНачисленияОстаткиИОбороты.СуммаКон) КАК СуммаКон,
	|	СУММА(втНачисленияОстаткиИОбороты.СуммаНачислено) КАК СуммаНачислено,
	|	СУММА(втНачисленияОстаткиИОбороты.СуммаОплачено) КАК СуммаОплачено
	|ПОМЕСТИТЬ втНачисления
	|ИЗ
	|	втНачисленияОстаткиИОбороты КАК втНачисленияОстаткиИОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	втНачисленияОстаткиИОбороты.ЛицевойСчет,
	|	втНачисленияОстаткиИОбороты.Квартира,
	|	втНачисленияОстаткиИОбороты.Здание
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УПЖКХ_СведенияОПроживающихСрезПоследних.ЛицевойСчет,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ УПЖКХ_СведенияОПроживающихСрезПоследних.Жилец) КАК КоличествоПроживающих
	|ПОМЕСТИТЬ втПроживающиеИзСведений
	|ИЗ
	|	РегистрСведений.УПЖКХ_СведенияОПроживающих.СрезПоследних(
	|			&ДатаКон,
	|			ЛицевойСчет В
	|					(ВЫБРАТЬ
	|						втНачисления.ЛицевойСчет
	|					ИЗ
	|						втНачисления КАК втНачисления)
	|				И ДатаИзменения <= &ДатаКон) КАК УПЖКХ_СведенияОПроживающихСрезПоследних
	|ГДЕ
	|	УПЖКХ_СведенияОПроживающихСрезПоследних.Проживает
	|
	|СГРУППИРОВАТЬ ПО
	|	УПЖКХ_СведенияОПроживающихСрезПоследних.ЛицевойСчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_УчетКоличестваЖильцовПоЛицевымСчетамСрезПоследних.ЛицевойСчет,
	|	СУММА(КВП_УчетКоличестваЖильцовПоЛицевымСчетамСрезПоследних.КоличествоПроживающих) КАК КоличествоПроживающих
	|ПОМЕСТИТЬ втПроживающиеИзУчетаЖильцов
	|ИЗ
	|	РегистрСведений.КВП_УчетКоличестваЖильцовПоЛицевымСчетам.СрезПоследних(
	|			&ДатаКон,
	|			ЛицевойСчет В
	|				(ВЫБРАТЬ
	|					втНачисления.ЛицевойСчет
	|				ИЗ
	|					втНачисления КАК втНачисления)) КАК КВП_УчетКоличестваЖильцовПоЛицевымСчетамСрезПоследних
	|
	|СГРУППИРОВАТЬ ПО
	|	КВП_УчетКоличестваЖильцовПоЛицевымСчетамСрезПоследних.ЛицевойСчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_РазмерыДолейЛицевыхСчетовСрезПоследних.Объект,
	|	КВП_РазмерыДолейЛицевыхСчетовСрезПоследних.ЛицевойСчет,
	|	КВП_РазмерыДолейЛицевыхСчетовСрезПоследних.ДоляЧислитель,
	|	КВП_РазмерыДолейЛицевыхСчетовСрезПоследних.ДоляЗнаменатель
	|ПОМЕСТИТЬ втРазмерыДолейЛС
	|ИЗ
	|	РегистрСведений.КВП_РазмерыДолейЛицевыхСчетов.СрезПоследних(
	|			&ДатаКон,
	|			ЛицевойСчет В
	|				(ВЫБРАТЬ
	|					втНачисления.ЛицевойСчет
	|				ИЗ
	|					втНачисления КАК втНачисления)) КАК КВП_РазмерыДолейЛицевыхСчетовСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_ПлощадьПомещенияСрезПоследних.Объект,
	|	КВП_ПлощадьПомещенияСрезПоследних.Площадь
	|ПОМЕСТИТЬ втПлощадиПомещений
	|ИЗ
	|	РегистрСведений.КВП_ПлощадьПомещения.СрезПоследних(
	|			&ДатаКон,
	|			Объект В
	|					(ВЫБРАТЬ
	|						втНачисления.Квартира
	|					ИЗ
	|						втНачисления КАК втНачисления)
	|				И ВидПлощади = ЗНАЧЕНИЕ(Справочник.УПЖКХ_ВидыПлощадей.ОбщаяПлощадь)) КАК КВП_ПлощадьПомещенияСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втРазмерыДолейЛС.ЛицевойСчет,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА втРазмерыДолейЛС.ДоляЗнаменатель = 0
	|				ТОГДА 0
	|			ИНАЧЕ ВЫБОР
	|					КОГДА втРазмерыДолейЛС.ДоляЧислитель = 0
	|						ТОГДА 0
	|					ИНАЧЕ втРазмерыДолейЛС.ДоляЧислитель / втРазмерыДолейЛС.ДоляЗнаменатель * ЕСТЬNULL(втПлощадиПомещений.Площадь, 0)
	|				КОНЕЦ
	|		КОНЕЦ) КАК Площадь
	|ПОМЕСТИТЬ втДанныеОПлощадях
	|ИЗ
	|	втРазмерыДолейЛС КАК втРазмерыДолейЛС
	|		ЛЕВОЕ СОЕДИНЕНИЕ втПлощадиПомещений КАК втПлощадиПомещений
	|		ПО втРазмерыДолейЛС.Объект = втПлощадиПомещений.Объект
	|
	|СГРУППИРОВАТЬ ПО
	|	втРазмерыДолейЛС.ЛицевойСчет" + 
	?(ЕстьФильтрПоПрив, "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УПЖКХ_СобственностьНаПомещенияСрезПоследних.Помещение
	|ПОМЕСТИТЬ втСобственностьНаПомещения
	|ИЗ
	|	РегистрСведений.УПЖКХ_СобственностьНаПомещения.СрезПоследних(
	|			&ДатаКон,
	|			Помещение В
	|				(ВЫБРАТЬ
	|					втНачисления.Квартира
	|				ИЗ
	|					втНачисления КАК втНачисления)) КАК УПЖКХ_СобственностьНаПомещенияСрезПоследних
	|ГДЕ
	|	УПЖКХ_СобственностьНаПомещенияСрезПоследних.Действует
	|			" + ТекстФильтраПоПрив, "") + "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчетаСрезПоследних.ЛицевойСчет,
	|	УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчетаСрезПоследних.ОтветственныйВладелец КАК Владелец,
	|	УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчетаСрезПоследних.ОтветственныйВладелец.Наименование КАК ВладелецНаименование
	|ПОМЕСТИТЬ втОтветственныеСобственники
	|ИЗ
	|	РегистрСведений.УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчета.СрезПоследних(
	|			&ДатаКон,
	|			ЛицевойСчет В
	|				(ВЫБРАТЬ
	|					втНачисления.ЛицевойСчет
	|				ИЗ
	|					втНачисления КАК втНачисления)) КАК УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчетаСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втНачисления.ЛицевойСчет,
	|	втНачисления.Квартира,"
	+ ?(ЗначениеЗаполнено(ПараметрыОтчета.Объект), "", "втНачисления.Здание КАК Здание,") + "
	|	втНачисления.Квартира.Представление КАК КвартираНаименование,
	|	втНачисления.ЛицевойСчет.Представление КАК ЛицевойСчетНаименование,
	|	втНачисления.СуммаНач КАК СуммаНач,
	|	втНачисления.СуммаКон КАК СуммаКон,
	|	втНачисления.СуммаНачислено КАК СуммаНачислено,
	|	втНачисления.СуммаОплачено КАК СуммаОплачено,
	|	ВЫБОР
	|		КОГДА &КонстантаУказыватьКоличествоПрожИЗарегЧислами
	|			ТОГДА ЕСТЬNULL(втПроживающиеИзУчетаЖильцов.КоличествоПроживающих, 0)
	|		ИНАЧЕ ЕСТЬNULL(втПроживающиеИзСведений.КоличествоПроживающих, 0)
	|	КОНЕЦ КАК КоличествоПроживающих,
	|	ЕСТЬNULL(втДанныеОПлощадях.Площадь, 0) КАК Площадь,
	|	ЕСТЬNULL(втОтветственныеСобственники.Владелец, ЗНАЧЕНИЕ(Справочник.УПЖКХ_Жильцы.ПустаяСсылка)) КАК Владелец,
	|	ЕСТЬNULL(втОтветственныеСобственники.ВладелецНаименование, """") КАК ВладелецНаименование
	|ИЗ
	|	втНачисления КАК втНачисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ втПроживающиеИзСведений КАК втПроживающиеИзСведений
	|		ПО втНачисления.ЛицевойСчет = втПроживающиеИзСведений.ЛицевойСчет
	|		ЛЕВОЕ СОЕДИНЕНИЕ втПроживающиеИзУчетаЖильцов КАК втПроживающиеИзУчетаЖильцов
	|		ПО втНачисления.ЛицевойСчет = втПроживающиеИзУчетаЖильцов.ЛицевойСчет
	|		ЛЕВОЕ СОЕДИНЕНИЕ втДанныеОПлощадях КАК втДанныеОПлощадях
	|		ПО втНачисления.ЛицевойСчет = втДанныеОПлощадях.ЛицевойСчет
	|		ЛЕВОЕ СОЕДИНЕНИЕ втОтветственныеСобственники КАК втОтветственныеСобственники
	|		ПО втНачисления.ЛицевойСчет = втОтветственныеСобственники.ЛицевойСчет
	|			" + ?(ЕстьФильтрПоПрив, "
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втСобственностьНаПомещения КАК втСобственностьНаПомещения
	|		ПО втНачисления.Квартира = втСобственностьНаПомещения.Помещение", "") + "
	|
	|УПОРЯДОЧИТЬ ПО"
	+ ?(ЗначениеЗаполнено(ПараметрыОтчета.Объект), "", " втНачисления.Здание.Наименование,") + "
	|	втНачисления.Квартира.ВидПомещения.Наименование,
	|	втНачисления.Квартира.Код,
	|	втНачисления.Квартира.Суффикс
	|ИТОГИ
	|	СУММА(СуммаНач),
	|	СУММА(СуммаКон),
	|	СУММА(СуммаНачислено),
	|	СУММА(СуммаОплачено),
	|	СУММА(КоличествоПроживающих),
	|	СУММА(Площадь)
	|ПО
	|	ОБЩИЕ
	|	" + ?(ЗначениеЗаполнено(ПараметрыОтчета.Объект),"", ", Здание");
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ДопПараметр", УсловиеНаУслугу);
	
	Возврат ТекстЗапроса;

КонецФункции // ПолучитьТекстЗапроса()

#КонецОбласти

#КонецЕсли