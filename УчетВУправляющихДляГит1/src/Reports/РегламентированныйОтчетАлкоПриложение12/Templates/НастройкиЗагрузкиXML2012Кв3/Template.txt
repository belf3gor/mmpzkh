// Область "Настройки" описывает параметры инициализации механизма загрузки
// регламентированных отчетов из файлов выгрузки. Формат области настроек - JSON.
//
// Описание параметров:
//  * Установкой параметра "РазрешитьЗагрузку" в "true" или "false" регулируем видимость
//    кнопки "Загрузить" и возможность загрузки из файла в форме отчета.
//  * Параметр "ФорматыСхемВыгрузки" описывает соответствие имен макетов схем выгрузки
//    поддерживаемым форматам загрузки. Если у формы единственная схема выгрузки или
//    нужно всегда использовать схему по умолчанию - указываем значение "null".
//  * Параметр "ОбластиОбработчиков" содержит список имен используемых обработчиков
//    загружаемых данных. Имена соответствуют областям макета, в которых можно размещать
//    произвольные алгоритмы на языке "1С:Предприятие" для обработки доступных объектов.
//
// Примечание:
//  Сопоставление имен узлов из файла XML и имен показателей отчета выполняется по данным схемы выгрузки,
//  поэтому обработчики используются для получения значений показателей не описанных в схеме выгрузки.
//
#Область Настройки
{
	"РазрешитьЗагрузку"   : true,
	
	"ФорматыСхемВыгрузки" : {
		"СхемаВыгрузки420_2012Кв1" : "4.20",
		"СхемаВыгрузки430_2014Кв1" : "4.30",
		"СхемаВыгрузки431_2015Кв4" : "4.31",
	},
	"ОбластиОбработчиков" : {
		"ПередЗагрузкой"  : "ПредОбработкаСхемыЗагрузки",
		"ПослеЗагрузки"   : "ПостОбработкаДокументаОтчета",
	}
}
#КонецОбласти

// Доступны параметры:
//
//  П.ДеревоДляЗагрузки - выбранное дерево схемы загрузки, не заполненное данными;
//  П.ПараметрыОтчета   - параметры, сформированные в форме отчета, используются для выгрузки.
//
#Область ПредОбработкаСхемыЗагрузки
	
	// Сохраним все узлы содержащие условия.
	П.ПараметрыОтчета.Вставить("Первичная", Истина);
	П.ПараметрыОтчета.Вставить("Корректирующая", Истина);
	
	ВерсияФормата = Неопределено;
	П.ПараметрыОтчета.Свойство("ВерсФорм", ВерсияФормата);
	
	Если НЕ ЗначениеЗаполнено(ВерсияФормата)
		ИЛИ ВерсияФормата = "4.20"
		ИЛИ ВерсияФормата = "4.30" Тогда
		НайденныеУзлы = УзлыПоXPath(П.ДеревоДляЗагрузки, "//ОбъемОборота/@НаимЮЛ");
	Иначе
		НайденныеУзлы = УзлыПоXPath(П.ДеревоДляЗагрузки, "//ОбъемОборота/@Наим");
	КонецЕсли;
	Для Каждого НайденныйУзел Из НайденныеУзлы Цикл
		НайденныйУзел.МаксРазмерность = 10000;
		НайденныйУзел.Раздел = "Раздел1";
		НайденныйУзел.Ключ = "ОбособленноеПодразделение";
	КонецЦикла;
	
	НайденныеУзлыОО = УзлыПоXPath(П.ДеревоДляЗагрузки, "//ОбъемОборота");
	Для Каждого НайденныйУзел Из НайденныеУзлыОО Цикл
		НайденныйУзел.Обязательность = НайденныйУзел.Обязательность + "П";
	КонецЦикла;
	
	НайденныеУзлы = УзлыПоXPath(НайденныеУзлыОО[0], "Оборот");
	Для Каждого НайденныйУзел Из НайденныеУзлы Цикл
		НайденныйУзел.Обязательность = НайденныйУзел.Обязательность + "П";
		УзлыДвижениеРесурсы = УзлыПоXPath(НайденныйУзел, "СведПроизвИмпорт/Движение/@*");
		Для Каждого УзелРесурс Из УзлыДвижениеРесурсы Цикл
			УзелРесурс.Ключ = ?(Лев(УзелРесурс.Код, 2) = "П1", "П0000100003" + Прав(УзелРесурс.Код, 2), "");
		КонецЦикла;
		УзлыДвижениеРесурсы = УзлыПоXPath(НайденныйУзел, "СведПроизвИмпорт/Поставщик/Продукция/@*");
		Для Каждого УзелРесурс Из УзлыДвижениеРесурсы Цикл
			УзелРесурс.Ключ = ?(Лев(УзелРесурс.Код, 2) = "П2", "П0000200003"
				+ Формат(ЧислоИзСтроки(Прав(УзелРесурс.Код, 2)) - 4, "ЧЦ=2; ЧВН="), "");
		КонецЦикла;
	КонецЦикла;
	
#КонецОбласти

// Доступны параметры:
//
//  П.ДанныеОтчета      - заполненные данные документа регламентированного отчета;
//  П.ДеревоДляЗагрузки - выбранное дерево схемы загрузки, не заполненное данными;
//  П.ПараметрыОтчета   - параметры, сформированные в форме отчета, используются для выгрузки.
//
#Область ПостОбработкаДокументаОтчета
	
	ОрганизацияИНН = "";
	ОрганизацияКПП = "";
	ЭтоПБОЮЛ = Ложь;
	
	ИННЮЛ = Неопределено;
	ИННФЛ = Неопределено;
	КППЮЛ = Неопределено;
	П.ПараметрыОтчета.Свойство("ИННЮЛ", ИННЮЛ);
	П.ПараметрыОтчета.Свойство("ИННФЛ", ИННФЛ);
	П.ПараметрыОтчета.Свойство("КППЮЛ", КППЮЛ);
	
	Если ЗначениеЗаполнено(ИННФЛ) И НЕ ЗначениеЗаполнено(КППЮЛ) Тогда
		ЭтоПБОЮЛ = Истина;
		ОрганизацияИНН = ИННФЛ;
	Иначе
		ОрганизацияИНН = ИННЮЛ;
		ОрганизацияКПП = КППЮЛ;
	КонецЕсли;
	
	ИмяРегРаздел1  = "СведенияРеглОтчетАлкоПрил12Раздел1";
	ИмяРегРаздел2  = "СведенияРеглОтчетАлкоПрил12Раздел2";
	
	ТабРегРаздел1  = Новый ТаблицаЗначений;
	ТабРегРаздел2  = Новый ТаблицаЗначений;
	
	// Добавляем в таблицы значений все необходимые колонки.
	РегламентированнаяОтчетностьАЛКО.ОбработкаТаблицыПередЗаписьюВРегистр(ИмяРегРаздел1, ТабРегРаздел1);
	РегламентированнаяОтчетностьАЛКО.ОбработкаТаблицыПередЗаписьюВРегистр(ИмяРегРаздел2, ТабРегРаздел2);
	
	ДокументОтчета        = П.ДанныеОтчета.ДокументОтчета;
	СтруктураДанныхОтчета = П.ДанныеОтчета.СтруктураДанныхОтчета;
	
	УзелСправочники  = УзлыПоXPath(П.ДеревоДляЗагрузки, "Справочники")[0];
	
	УзелДокумент     = УзлыПоXPath(П.ДеревоДляЗагрузки, "Документ")[0];
	УзелОрганизация  = УзлыПоXPath(УзелДокумент, "Организация")[0];
	
	ОбъектОтчета = Неопределено;
	ИмяФормыОтчета = "Отчет.РегламентированныйОтчетАлкоПриложение12.Форма." + ДокументОтчета.ВыбраннаяФорма;
	
	ИмяМакета = Неопределено;
	Если ДокументОтчета.ДатаОкончания < '20190101' Тогда
		ИмяМакета = ?(ДокументОтчета.ДатаОкончания < '20150901', "Списки2014Кв1", "Списки2015Кв3");
	КонецЕсли;
	КоллекцияСписковВыбора = РегламентированнаяОтчетностьАЛКО.СчитатьКоллекциюСписковВыбораАЛКО(
		ДокументОтчета.ДатаОкончания, ИмяФормыОтчета, ОбъектОтчета, ИмяМакета); // здесь возвращается ОбъектОтчета
	
	МаксИндексСтраницы  = 0;
	ВсегоСтрокСохранено = 0;
	
	Титульный = Неопределено;
	П.ДанныеОтчета.ПоказателиОтчета.Свойство("ПолеТабличногоДокументаТитульный", Титульный);
	Если Титульный <> Неопределено Тогда
		Титульный.Вставить("НомКорр", П.ПараметрыОтчета.НомерКорректировки);
	КонецЕсли;
	
	// Подготовка данных для раздела 1 (данные используются и для формирования раздела 2).
	
	УзлыОбъемОборота = УзлыПоXPath(УзелДокумент, "ОбъемОборота"); // узлы раздела 1
	Для НомСтраницы = 1 По УзлыОбъемОборота.Количество() Цикл
		СтраницаРаздела = УзлыОбъемОборота[НомСтраницы - 1];
		
		НаличиеОборота = Истина;
		УзлыОборот = Новый Массив;
		УзелНаименование = Неопределено;
		
		ОбособленноеПодразделение = ""; Разделитель = "=";
		Для Каждого ПодчиненныйУзел Из СтраницаРаздела.Строки Цикл
			КодУзла = ВРег(ПодчиненныйУзел.Код);
			Если КодУзла = "НАИМ" ИЛИ КодУзла = "НАИМЮЛ" Тогда
				ОбособленноеПодразделение = ОбособленноеПодразделение + "Наименование" + Разделитель + ПодчиненныйУзел.Значение + Символы.ПС;
				УзелНаименование = ПодчиненныйУзел;
			ИначеЕсли КодУзла = "КППЮЛ" Тогда
				ОбособленноеПодразделение = ОбособленноеПодразделение + "КПП" + Разделитель + ПодчиненныйУзел.Значение + Символы.ПС;
			ИначеЕсли КодУзла = "НАЛИЧИЕОБОРОТА" Тогда
				Если ВРег(ПодчиненныйУзел.Значение) = "FALSE" Тогда
					НаличиеОборота = Ложь;
				КонецЕсли;
			ИначеЕсли КодУзла = "АДРОРГ" Тогда
				Для Каждого УзелПолеАдреса Из ПодчиненныйУзел.Строки Цикл
					КодПоляАдреса = ВРег(УзелПолеАдреса.Код);
					Если КодПоляАдреса = "КОДСТРАНЫ" И ЗначениеЗаполнено(УзелПолеАдреса.Значение) Тогда
						НазваниеСтраны = ?(УзелПолеАдреса.Значение = "643", "РОССИЯ", "");
						ОбособленноеПодразделение = ОбособленноеПодразделение + "Страна" + Разделитель + НазваниеСтраны + Символы.ПС;
						ОбособленноеПодразделение = ОбособленноеПодразделение + "КодСтраны" + Разделитель + УзелПолеАдреса.Значение + Символы.ПС;
					ИначеЕсли КодПоляАдреса = "ИНДЕКС" И ЗначениеЗаполнено(УзелПолеАдреса.Значение)Тогда
						ОбособленноеПодразделение = ОбособленноеПодразделение + "Индекс" + Разделитель + УзелПолеАдреса.Значение + Символы.ПС;
					ИначеЕсли КодПоляАдреса = "КОДРЕГИОН" И ЗначениеЗаполнено(УзелПолеАдреса.Значение) Тогда
						ОбособленноеПодразделение = ОбособленноеПодразделение + "КодРегиона" + Разделитель + УзелПолеАдреса.Значение + Символы.ПС;
					ИначеЕсли КодПоляАдреса = "РАЙОН" И ЗначениеЗаполнено(УзелПолеАдреса.Значение) Тогда
						ОбособленноеПодразделение = ОбособленноеПодразделение + "Район" + Разделитель + УзелПолеАдреса.Значение + Символы.ПС;
					ИначеЕсли КодПоляАдреса = "ГОРОД" И ЗначениеЗаполнено(УзелПолеАдреса.Значение) Тогда
						ОбособленноеПодразделение = ОбособленноеПодразделение + "Город" + Разделитель + УзелПолеАдреса.Значение + Символы.ПС;
					ИначеЕсли КодПоляАдреса = "НАСЕЛПУНКТ" И ЗначениеЗаполнено(УзелПолеАдреса.Значение) Тогда
						ОбособленноеПодразделение = ОбособленноеПодразделение + "НаселенныйПункт" + Разделитель + УзелПолеАдреса.Значение + Символы.ПС;
					ИначеЕсли КодПоляАдреса = "УЛИЦА" И ЗначениеЗаполнено(УзелПолеАдреса.Значение) Тогда
						ОбособленноеПодразделение = ОбособленноеПодразделение + "Улица" + Разделитель + УзелПолеАдреса.Значение + Символы.ПС;
					ИначеЕсли КодПоляАдреса = "ДОМ" И ЗначениеЗаполнено(УзелПолеАдреса.Значение) Тогда
						МассивТипНомерДома = СтрРазделить(УзелПолеАдреса.Значение, " ");
						ТипДома   = ?(МассивТипНомерДома.ВГраница() > 0, МассивТипНомерДома[0], "");
						НомерДома = ?(МассивТипНомерДома.ВГраница() > 0, МассивТипНомерДома[1], МассивТипНомерДома[0]);
						Если НЕ ПустаяСтрока(ТипДома) Тогда
							ОбособленноеПодразделение = ОбособленноеПодразделение + "ТипДома" + Разделитель + ТипДома + Символы.ПС;
						КонецЕсли;
						ОбособленноеПодразделение = ОбособленноеПодразделение + "Дом" + Разделитель + НомерДома + Символы.ПС;
					ИначеЕсли КодПоляАдреса = "КОРПУС" И ЗначениеЗаполнено(УзелПолеАдреса.Значение) Тогда
						МассивТипНомерКорпуса = СтрРазделить(УзелПолеАдреса.Значение, " ");
						ТипКорпуса   = ?(МассивТипНомерКорпуса.ВГраница() > 0, МассивТипНомерКорпуса[0], "");
						НомерКорпуса = ?(МассивТипНомерКорпуса.ВГраница() > 0, МассивТипНомерКорпуса[1], МассивТипНомерКорпуса[0]);
						Если НЕ ПустаяСтрока(ТипКорпуса) Тогда
							ОбособленноеПодразделение = ОбособленноеПодразделение + "ТипКорпуса" + Разделитель + ТипКорпуса + Символы.ПС;
						КонецЕсли;
						ОбособленноеПодразделение = ОбособленноеПодразделение + "Корпус" + Разделитель + НомерКорпуса + Символы.ПС;
					ИначеЕсли КодПоляАдреса = "ЛИТЕРА" И ЗначениеЗаполнено(УзелПолеАдреса.Значение) Тогда
						МассивТипНомерЛитера = СтрРазделить(УзелПолеАдреса.Значение, " ");
						ТипЛитера   = ?(МассивТипНомерЛитера.ВГраница() > 0, МассивТипНомерЛитера[0], "");
						НомерЛитера = ?(МассивТипНомерЛитера.ВГраница() > 0, МассивТипНомерЛитера[1], МассивТипНомерЛитера[0]);
						ТипЛитера = ?(ЗначениеЗаполнено(ТипЛитера), ТипЛитера, "Литера");
						ОбособленноеПодразделение = ОбособленноеПодразделение + "ТипКорпуса" + Разделитель + ТипЛитера + Символы.ПС;
						ОбособленноеПодразделение = ОбособленноеПодразделение + "Корпус" + Разделитель + НомерЛитера + Символы.ПС;
					ИначеЕсли КодПоляАдреса = "КВАРТ" И ЗначениеЗаполнено(УзелПолеАдреса.Значение) Тогда
						МассивТипНомерКвартиры = СтрРазделить(УзелПолеАдреса.Значение, " ");
						ТипКвартиры   = ?(МассивТипНомерКвартиры.ВГраница() > 0, МассивТипНомерКвартиры[0], "");
						НомерКвартиры = ?(МассивТипНомерКвартиры.ВГраница() > 0, МассивТипНомерКвартиры[1], МассивТипНомерКвартиры[0]);
						Если НЕ ПустаяСтрока(ТипКвартиры) Тогда
							ОбособленноеПодразделение = ОбособленноеПодразделение + "ТипКвартиры" + Разделитель + ТипКвартиры + Символы.ПС;
						КонецЕсли;
						ОбособленноеПодразделение = ОбособленноеПодразделение + "Квартира" + Разделитель + НомерКвартиры + Символы.ПС;
					КонецЕсли;
				КонецЦикла;
			ИначеЕсли КодУзла = "ОБОРОТ" Тогда
				УзлыОборот.Добавить(ПодчиненныйУзел);
			КонецЕсли;
		КонецЦикла;
		
		Если УзелНаименование <> Неопределено Тогда
			УзелНаименование.Значение = ОбособленноеПодразделение;
		КонецЕсли;
		
		ЗаполнитьДаннымиСохраненныйДокументИзДереваДляЗагрузки(СтраницаРаздела, П.ДанныеОтчета, П.ПараметрыОтчета, , НомСтраницы);
		
		УзлыОбъемОборота[НомСтраницы - 1] = УзлыОборот; // после завершения цикла массив "УзлыОбъемОборота" содержит массивы узлов оборотов
	КонецЦикла;
	
	// Раздел 2 заполняем в процессе обработки страниц раздела 1.
	ИндексСтраницыРаздел2 = 0;
	Раздел2 = Неопределено;
	П.ДанныеОтчета.ДанныеМногостраничныхРазделов.Свойство("Раздел2", Раздел2);
	
	// Обработка страниц раздела 1.
	ИндексСтраницы = 0;
	Раздел1 = Неопределено;
	П.ДанныеОтчета.ДанныеМногостраничныхРазделов.Свойство("Раздел1", Раздел1);
	Если Раздел1 <> Неопределено Тогда
		Раздел1Сведения = СтруктураДанныхОтчета.СтруктураСервисРегистров.СведенияРеглОтчетАлкоПрил12Раздел1;
		Раздел1СведенияУдаленные = СтруктураДанныхОтчета.СтруктураСервисРегистровУдаленные.СведенияРеглОтчетАлкоПрил12Раздел1;
		
		Раздел2Сведения = СтруктураДанныхОтчета.СтруктураСервисРегистров.СведенияРеглОтчетАлкоПрил12Раздел2;
		Раздел2СведенияУдаленные = СтруктураДанныхОтчета.СтруктураСервисРегистровУдаленные.СведенияРеглОтчетАлкоПрил12Раздел2;
		
		Для Каждого СтраницаРаздела Из Раздел1 Цикл
			
			ДанныеРаздела = СтраницаРаздела.Данные;
			ДопДанныеРаздела = СкопированнаяСтруктура(СтраницаРаздела.ДополнительныеДанные, Истина);
			ОборотыРаздела = УзлыОбъемОборота[ИндексСтраницы];
			
			СтраницаРаздела.ДополнительныеДанные = ДопДанныеРаздела;
			
			ЗначениеПоказателя = "";
			Если ДанныеРаздела.Свойство("ОбособленноеПодразделение", ЗначениеПоказателя) Тогда
				ЗначениеПоказателя = "" + ЗначениеПоказателя;
				СведенияОбОПАдрес = РегламентированнаяОтчетностьАЛКО.ПолучитьСтруктуруАдресаИзСтандартногоПредставленияИлиXML(ЗначениеПоказателя);
				
				МассивЗначенийПоказателей = СтрРазделить(ЗначениеПоказателя, Символы.ПС);
				Наименование = СтрЗаменить(МассивЗначенийПоказателей[0], "Наименование=", "");
				КПП = "";
				Если МассивЗначенийПоказателей.ВГраница() > 0 И СтрНайти(МассивЗначенийПоказателей[1], "КПП=") > 0 Тогда
					КПП = СтрЗаменить(МассивЗначенийПоказателей[1], "КПП=", "");
				КонецЕсли;
				
				СведенияОбОП = РегламентированнаяОтчетностьАЛКО.ПолучитьПустуюСтруктуруСведенийОбОП();
				ЗаполнитьЗначенияСвойств(СведенияОбОП, СведенияОбОПАдрес);
				СведенияОбОП.Наименование = Наименование; СведенияОбОП.КПП = КПП;
				Если НЕ ЗначениеЗаполнено(СведенияОбОП.УникальныйНомерФИАС) Тогда
					СведенияОбОП.УникальныйНомерФИАС = Строка(Новый УникальныйИдентификатор);
				КонецЕсли;
				
				ДопДанныеРаздела.Вставить("СведенияОбОП", СведенияОбОП);
				
				ДанныеРаздела.ОбособленноеПодразделение = РегламентированнаяОтчетностьАЛКОКлиентСервер.СформироватьОбособленноеПодразделениеАЛКО(СведенияОбОП, ПустаяСтрока(КПП), ОрганизацияИНН);
				
				Если СокрЛП(ОрганизацияКПП) = СокрЛП(КПП) Тогда
					СтраницаРаздела.ФлагГоловногоОП = Истина;
					СтруктураДанныхОтчета.НомерСтраницыФлагГоловногоОПРаздел1 = ИндексСтраницы + 1;
				Иначе
					СтраницаРаздела.ФлагГоловногоОП = Ложь;
				КонецЕсли;
			КонецЕсли;
			
			Раздел1СведенияСтрока = ?(ИндексСтраницы < Раздел1Сведения.Количество(),
				Раздел1Сведения[ИндексСтраницы], Раздел1Сведения.Добавить());
			
			ИндексСтраницы     = ИндексСтраницы + 1;
			МаксИндексСтраницы = МаксИндексСтраницы + 1;
			
			// Заполнение таблиц для переноса данных в регистры разделов.
			
			ТабВидыПродукции = КоллекцияСписковВыбора["ВидыПродукции"];
			
			КодВидаПродукции  = "";
			ВидПродукции = Неопределено;
			
			ИдПроизвИмпортера = "";
			УзелПроизводительИмпортер = Неопределено;
			КэшУзловПроизводителиИмпортеры  = Новый Соответствие;
			КэшСсылокПроизводителиИмпортеры = Новый Соответствие;
			
			ИдПоставщика = "";
			УзелПоставщик = Неопределено;
			КэшУзловПоставщики  = Новый Соответствие;
			КэшСсылокПоставщики = Новый Соответствие;
			
			КвоСтрокПродукция = 0;
			КвоСтрокДвижение  = 0;
			
			ТабРегРаздел1.Очистить();
			ТабРегРаздел2.Очистить();
			
			ДопДанныеРаздела2 = Новый Структура;
			
			Для Каждого УзелОборот Из ОборотыРаздела Цикл
				Для Каждого УзелПодчиненныйОборот Из УзелОборот.Строки Цикл
					
					Если УзелПодчиненныйОборот.Код = "П000000000003" Тогда
						
						КодВидаПродукции = УзелПодчиненныйОборот.Значение;
						ВидПродукции = ТабВидыПродукции.Найти(КодВидаПродукции, "Код");
						
					ИначеЕсли УзелПодчиненныйОборот.Код = "СведПроизвИмпорт" Тогда
						
						Для Каждого УзелПодчиненныйСведПроизвИмпорт Из УзелПодчиненныйОборот.Строки Цикл
							
							Если УзелПодчиненныйСведПроизвИмпорт.Код = "ИдПроизвИмп" Тогда
								
								ИдПроизвИмпортера = УзелПодчиненныйСведПроизвИмпорт.Значение;
								Если ЗначениеЗаполнено(ИдПроизвИмпортера) Тогда
									УзелПроизводительИмпортер = КэшУзловПроизводителиИмпортеры[ИдПроизвИмпортера];
									Если УзелПроизводительИмпортер = Неопределено Тогда
										УзлыПроизводителиИмпортеры = УзлыПоXPath(УзелСправочники, "ПроизводителиИмпортеры[@ИДПроизвИмп='" + ИдПроизвИмпортера + "']");
										Если ЗначениеЗаполнено(УзлыПроизводителиИмпортеры) Тогда
											УзелПроизводительИмпортер = УзлыПроизводителиИмпортеры[0];
											КэшУзловПроизводителиИмпортеры.Вставить(ИдПроизвИмпортера, УзелПроизводительИмпортер);
										Иначе
											КэшУзловПроизводителиИмпортеры.Вставить(ИдПроизвИмпортера, "");
										КонецЕсли;
									КонецЕсли;
								КонецЕсли;
								
							ИначеЕсли УзелПодчиненныйСведПроизвИмпорт.Код = "Поставщик" Тогда
								
								Для Каждого УзелПодчиненныйПоставщик Из УзелПодчиненныйСведПроизвИмпорт.Строки Цикл
									Если УзелПодчиненныйПоставщик.Код = "ИдПоставщика" Тогда
										
										ИдПоставщика = УзелПодчиненныйПоставщик.Значение;
										Если ЗначениеЗаполнено(ИдПоставщика) Тогда
											УзелПоставщик = КэшУзловПоставщики[ИдПоставщика];
											Если УзелПоставщик = Неопределено Тогда
												УзлыПоставщики = УзлыПоXPath(УзелСправочники, "Поставщики[@ИдПостав='" + ИдПоставщика + "']");
												Если ЗначениеЗаполнено(УзлыПоставщики) Тогда
													УзелПоставщик = УзлыПоставщики[0];
													КэшУзловПоставщики.Вставить(ИдПоставщика, УзелПоставщик);
												Иначе
													КэшУзловПоставщики.Вставить(ИдПоставщика, "");
												КонецЕсли;
											КонецЕсли;
										КонецЕсли;
										
									ИначеЕсли УзелПодчиненныйПоставщик.Код = "Продукция" Тогда
										
										КвоСтрокПродукция = КвоСтрокПродукция + 1;
										СтрокаПродукция = ТабРегРаздел2.Добавить();
										СтрокаПродукция.Документ = ДокументОтчета;
										// СтрокаПродукция.ИндексСтраницы = 0; // не используется в БРО 1.1.11 или выше
										СтрокаПродукция.ИндексСтроки = КвоСтрокПродукция;
										Если ЗначениеЗаполнено(КодВидаПродукции) Тогда
											СтрокаПродукция.П000020000302 = КодВидаПродукции;
											Если ВидПродукции <> Неопределено Тогда
												СтрокаПродукция.П000020000301 = ВидПродукции[1];
											КонецЕсли;
										КонецЕсли;
										
										Если ЗначениеЗаполнено(УзелПроизводительИмпортер) Тогда
											Для Каждого УзелСведенияПроизводительИмпортер Из УзелПроизводительИмпортер.Строки Цикл
												Если УзелСведенияПроизводительИмпортер.Код = "П000000000004" Тогда
													СтрокаПродукция.П000020000303 = УзелСведенияПроизводительИмпортер.Значение;
												ИначеЕсли УзелСведенияПроизводительИмпортер.Код = "ЮЛ" Тогда
													СтрокаПродукция.П000020000304 = УзлыПоXPath(УзелСведенияПроизводительИмпортер, "@П000000000005")[0].Значение;
													СтрокаПродукция.П000020000305 = УзлыПоXPath(УзелСведенияПроизводительИмпортер, "@П000000000006")[0].Значение;
												ИначеЕсли УзелСведенияПроизводительИмпортер.Код = "ФЛ" Тогда
													Если НЕ ЗначениеЗаполнено(СтрокаПродукция.П000020000304) Тогда
														СтрокаПродукция.П000020000304 = УзлыПоXPath(УзелСведенияПроизводительИмпортер, "@П000000000005")[0].Значение;
														СтрокаПродукция.П000020000305 = "";
													КонецЕсли;
												КонецЕсли;
											КонецЦикла;
											// По заполненным данным пытаемся найти производителя/импортера в ИБ.
											СсылкаПроизводительИмпортер = КэшСсылокПроизводителиИмпортеры[ИдПроизвИмпортера];
											Если СсылкаПроизводительИмпортер = Неопределено Тогда
												СсылкаПроизводительИмпортер = ОбъектОтчета.ОпределитьПроизводителяИмпортера(
													СтрокаПродукция.П000020000304,  // ИНН
													СтрокаПродукция.П000020000305,  // КПП
													СтрокаПродукция.П000020000303,  // Наименование
													СтрокаПродукция.П000020000302); // КодВидаПродукции
												Если НЕ ЗначениеЗаполнено(СсылкаПроизводительИмпортер) Тогда
													// Отключаем повторное назначение производителя/импортера в процедурах отчета.
													СсылкаПроизводительИмпортер = Ложь; // ЗначениеЗаполнено(Ложь) => Истина
												КонецЕсли;
												КэшСсылокПроизводителиИмпортеры.Вставить(ИдПроизвИмпортера, СсылкаПроизводительИмпортер);
											КонецЕсли;
											СтрокаПродукция.ПроизводительИмпортер = СсылкаПроизводительИмпортер;
										КонецЕсли;
										
										Если ЗначениеЗаполнено(УзелПоставщик) Тогда
											Для Каждого УзелСведенияПоставщик Из УзелПоставщик.Строки Цикл
												Если УзелСведенияПоставщик.Код = "П000000000007" Тогда
													СтрокаПродукция.П000020000306 = УзелСведенияПоставщик.Значение;
												ИначеЕсли УзелСведенияПоставщик.Код = "ЮЛ" Тогда
													СтрокаПродукция.П000020000307 = УзлыПоXPath(УзелСведенияПоставщик, "@П000000000009")[0].Значение;
													СтрокаПродукция.П000020000308 = УзлыПоXPath(УзелСведенияПоставщик, "@П000000000010")[0].Значение;
												ИначеЕсли УзелСведенияПоставщик.Код = "ФЛ" Тогда
													Если НЕ ЗначениеЗаполнено(СтрокаПродукция.П000020000307) Тогда
														СтрокаПродукция.П000020000307 = УзлыПоXPath(УзелСведенияПоставщик, "@П000000000009")[0].Значение;
														СтрокаПродукция.П000020000308 = "";
													КонецЕсли;
												КонецЕсли;
											КонецЦикла;
											// По заполненным данным пытаемся найти поставщика в ИБ.
											СсылкаПоставщик = КэшСсылокПоставщики[ИдПоставщика];
											Если СсылкаПоставщик = Неопределено Тогда
												СсылкаПоставщик = ОбъектОтчета.ОпределитьПоставщика(
													СтрокаПродукция.П000020000307,  // ИНН
													СтрокаПродукция.П000020000308,  // КПП
													СтрокаПродукция.П000020000306); // Наименование
												Если НЕ ЗначениеЗаполнено(СсылкаПоставщик) Тогда
													// Отключаем повторное назначение поставщика в процедурах отчета.
													СсылкаПоставщик = Ложь; // ЗначениеЗаполнено(Ложь) => Истина
												КонецЕсли;
												КэшСсылокПоставщики.Вставить(ИдПоставщика, СсылкаПоставщик);
											КонецЕсли;
											СтрокаПродукция.Поставщик = СсылкаПоставщик;
										КонецЕсли;
										
										Для Каждого УзелПодчиненныйПродукция Из УзелПодчиненныйПоставщик.Строки Цикл
											Если ЗначениеЗаполнено(УзелПодчиненныйПродукция.Ключ) Тогда
												Если УзелПодчиненныйПродукция.Ключ = "П000020000312" Тогда
													ЗначениеПоказателя = 0;
													ЗначениеИзУзла = ЧислоИзСтроки(УзелПодчиненныйПродукция.Значение);
													СтрокаПродукция[УзелПодчиненныйПродукция.Ключ] = ЗначениеИзУзла;
													Если ДопДанныеРаздела2.Свойство(УзелПодчиненныйПродукция.Ключ, ЗначениеПоказателя) Тогда
														ДопДанныеРаздела2[УзелПодчиненныйПродукция.Ключ] = ЗначениеИзУзла + ЗначениеПоказателя;
													Иначе
														ДопДанныеРаздела2.Вставить(УзелПодчиненныйПродукция.Ключ, ЗначениеИзУзла);
													КонецЕсли;
												ИначеЕсли УзелПодчиненныйПродукция.Ключ = "П000020000309" Тогда
													СтрокаПродукция[УзелПодчиненныйПродукция.Ключ] = ДатаИзСтрокиЛюбогоФормата(УзелПодчиненныйПродукция.Значение);
												Иначе
													СтрокаПродукция[УзелПодчиненныйПродукция.Ключ] = УзелПодчиненныйПродукция.Значение;
												КонецЕсли;
											КонецЕсли;
										КонецЦикла;
										
									КонецЕсли;
								КонецЦикла;
								
							ИначеЕсли УзелПодчиненныйСведПроизвИмпорт.Код = "Движение" Тогда
								
								КвоСтрокДвижение = КвоСтрокДвижение + 1;
								СтрокаДвижение = ТабРегРаздел1.Добавить();
								СтрокаДвижение.Документ = ДокументОтчета;
								// СтрокаДвижение.ИндексСтраницы = ИндексСтраницы; // не используется в БРО 1.1.11 или выше
								СтрокаДвижение.ИндексСтроки = КвоСтрокДвижение;
								Если ЗначениеЗаполнено(КодВидаПродукции) Тогда
									СтрокаДвижение.П000010000302 = КодВидаПродукции;
									Если ВидПродукции <> Неопределено Тогда
										СтрокаДвижение.П000010000301 = ВидПродукции[1];
									КонецЕсли;
								КонецЕсли;
								
								Если ЗначениеЗаполнено(УзелПроизводительИмпортер) Тогда
									Для Каждого УзелСведенияПроизводительИмпортер Из УзелПроизводительИмпортер.Строки Цикл
										Если УзелСведенияПроизводительИмпортер.Код = "П000000000004" Тогда
											СтрокаДвижение.П000010000303 = УзелСведенияПроизводительИмпортер.Значение;
										ИначеЕсли УзелСведенияПроизводительИмпортер.Код = "ЮЛ" Тогда
											СтрокаДвижение.П000010000304 = УзлыПоXPath(УзелСведенияПроизводительИмпортер, "@П000000000005")[0].Значение;
											СтрокаДвижение.П000010000305 = УзлыПоXPath(УзелСведенияПроизводительИмпортер, "@П000000000006")[0].Значение;
										ИначеЕсли УзелСведенияПроизводительИмпортер.Код = "ФЛ" Тогда
											Если НЕ ЗначениеЗаполнено(СтрокаДвижение.П000010000304) Тогда
												СтрокаДвижение.П000010000304 = УзлыПоXPath(УзелСведенияПроизводительИмпортер, "@П000000000005")[0].Значение;
												СтрокаДвижение.П000010000305 = "";
											КонецЕсли;
										КонецЕсли;
									КонецЦикла;
									// По заполненным данным пытаемся найти производителя/импортера в ИБ.
									СсылкаПроизводительИмпортер = КэшСсылокПроизводителиИмпортеры[ИдПроизвИмпортера];
									Если СсылкаПроизводительИмпортер = Неопределено Тогда
										СсылкаПроизводительИмпортер = ОбъектОтчета.ОпределитьПроизводителяИмпортера(
											СтрокаДвижение.П000010000304,  // ИНН
											СтрокаДвижение.П000010000305,  // КПП
											СтрокаДвижение.П000010000303,  // Наименование
											СтрокаДвижение.П000010000302); // КодВидаПродукции
										Если НЕ ЗначениеЗаполнено(СсылкаПроизводительИмпортер) Тогда
											// Отключаем повторное назначение производителя/импортера в процедурах отчета.
											СсылкаПроизводительИмпортер = Ложь; // ЗначениеЗаполнено(Ложь) => Истина
										КонецЕсли;
										КэшСсылокПроизводителиИмпортеры.Вставить(ИдПроизвИмпортера, СсылкаПроизводительИмпортер);
									КонецЕсли;
									СтрокаДвижение.ПроизводительИмпортер = СсылкаПроизводительИмпортер;
								КонецЕсли;
								
								Для Каждого УзелПодчиненныйДвижение Из УзелПодчиненныйСведПроизвИмпорт.Строки Цикл
									Если ЗначениеЗаполнено(УзелПодчиненныйДвижение.Ключ) Тогда
										ЗначениеПоказателя = 0;
										ЗначениеИзУзла = ЧислоИзСтроки(УзелПодчиненныйДвижение.Значение);
										СтрокаДвижение[УзелПодчиненныйДвижение.Ключ] = ЗначениеИзУзла;
										Если ДопДанныеРаздела.Свойство(УзелПодчиненныйДвижение.Ключ, ЗначениеПоказателя) Тогда
											ДопДанныеРаздела[УзелПодчиненныйДвижение.Ключ] = ЗначениеИзУзла + ЗначениеПоказателя;
										Иначе
											ДопДанныеРаздела.Вставить(УзелПодчиненныйДвижение.Ключ, ЗначениеИзУзла);
										КонецЕсли;
									КонецЕсли;
								КонецЦикла;
								
							КонецЕсли;
							
						КонецЦикла;
						
					КонецЕсли;
					
				КонецЦикла;
			КонецЦикла;
			
			// Заполнение регистров разделов 1 и 2.
			Если КвоСтрокДвижение > 0 Тогда
				
				ТекстСообщения = СтрШаблон(НСтр("ru='
					|Заполнение отчета данными (раздел 1, стр. %1)'"), Формат(ИндексСтраницы, "ЧГ="));
				ДлительныеОперации.СообщитьПрогресс(, ТекстСообщения);
				
				РегламентированнаяОтчетностьАЛКО.ДобавитьТаблицуЗначенийВРегистрСведенийАлко(ДокументОтчета,
					ИмяФормыОтчета, ИмяРегРаздел1, ИндексСтраницы, ТабРегРаздел1, 0);
				
				ВсегоСтрокСохранено = ВсегоСтрокСохранено + КвоСтрокДвижение;
			КонецЕсли;
				
			Если КвоСтрокПродукция > 0 И Раздел2 <> Неопределено Тогда // здесь создаем страницы и заполняем данными раздел 2
				СтраницаРаздела2 = ?(ИндексСтраницыРаздел2 < Раздел2.Количество(),
					Раздел2[ИндексСтраницыРаздел2], Раздел2.Добавить());
					
				Раздел2СведенияСтрока = ?(ИндексСтраницыРаздел2 < Раздел2Сведения.Количество(),
					Раздел2Сведения[ИндексСтраницыРаздел2], Раздел2Сведения.Добавить());
				
				ИндексСтраницыРаздел2 = ИндексСтраницыРаздел2 + 1;
				МаксИндексСтраницы = МаксИндексСтраницы + 1;
				
				СтраницаРаздела2.Представление = "Лист N " + Формат(ИндексСтраницыРаздел2, "ЧН=; ЧГ=");
				СтраницаРаздела2.АктивнаяСтраница = Ложь;
				СтраницаРаздела2.АвтоматическоеПредставление = Истина;
				СтраницаРаздела2.ФлагГоловногоОП = СтраницаРаздела.ФлагГоловногоОП;
				Если СтраницаРаздела2.ФлагГоловногоОП Тогда
					СтруктураДанныхОтчета.НомерСтраницыФлагГоловногоОПРаздел2 = ИндексСтраницыРаздел2;
				КонецЕсли;
				СтраницаРаздела2.Данные = СкопированнаяСтруктура(СтраницаРаздела.Данные);
				СтраницаРаздела2.ДополнительныеДанные = ДопДанныеРаздела2;
				СтраницаРаздела2.ДополнительныеДанные.Вставить(
					"СведенияОбОП", СкопированнаяСтруктура(СтраницаРаздела.ДополнительныеДанные.СведенияОбОП));
				
				Раздел2СведенияСтрока.КоличествоСтрок = КвоСтрокПродукция;
				Раздел2СведенияСтрока.ИндексСтраницыРегистра = ИндексСтраницыРаздел2;
				
				ТекстСообщения = СтрШаблон(НСтр("ru='
					|Заполнение отчета данными (раздел 2, стр. %1)'"), Формат(ИндексСтраницыРаздел2, "ЧГ="));
				ДлительныеОперации.СообщитьПрогресс(, ТекстСообщения);
				
				РегламентированнаяОтчетностьАЛКО.ДобавитьТаблицуЗначенийВРегистрСведенийАлко(ДокументОтчета,
					ИмяФормыОтчета, ИмяРегРаздел2, ИндексСтраницыРаздел2, ТабРегРаздел2, 0);
				
				ВсегоСтрокСохранено = ВсегоСтрокСохранено + КвоСтрокПродукция;
			КонецЕсли;
			
			Раздел1СведенияСтрока.КоличествоСтрок = КвоСтрокДвижение;
			Раздел1СведенияСтрока.ИндексСтраницыРегистра = ИндексСтраницы;
		КонецЦикла;
		
		Если СтруктураДанныхОтчета.НомерСтраницыФлагГоловногоОПРаздел1 > 0 Тогда
			ИндексСтраницыФлагГоловногоОПРаздел1 = СтруктураДанныхОтчета.НомерСтраницыФлагГоловногоОПРаздел1 - 1;
			СтраницыРаздела1 = Раздел1.НайтиСтроки(Новый Структура("ФлагГоловногоОП", Истина));
			Для Каждого СтраницаРаздела1 Из СтраницыРаздела1 Цикл
				Если Раздел1.Индекс(СтраницаРаздела1) <> ИндексСтраницыФлагГоловногоОПРаздел1 Тогда
					СтраницаРаздела1.ФлагГоловногоОП = Ложь;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если СтруктураДанныхОтчета.НомерСтраницыФлагГоловногоОПРаздел2 > 0 Тогда
			ИндексСтраницыФлагГоловногоОПРаздел2 = СтруктураДанныхОтчета.НомерСтраницыФлагГоловногоОПРаздел2 - 1;
			СтраницыРаздела2 = Раздел2.НайтиСтроки(Новый Структура("ФлагГоловногоОП", Истина));
			Для Каждого СтраницаРаздела2 Из СтраницыРаздела2 Цикл
				Если Раздел2.Индекс(СтраницаРаздела2) <> ИндексСтраницыФлагГоловногоОПРаздел2 Тогда
					СтраницаРаздела2.ФлагГоловногоОП = Ложь;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	СтруктураДанныхОтчета.МаксИндексСтраницы  = МаксИндексСтраницы;  // общее количество страниц отчета
	СтруктураДанныхОтчета.ВсегоСтрокСохранено = ВсегоСтрокСохранено; // общее количество строк отчета
	
#КонецОбласти