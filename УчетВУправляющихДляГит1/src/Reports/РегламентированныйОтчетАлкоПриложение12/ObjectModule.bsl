#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОписаниеПеременных


Перем мПолноеИмяФайлаВнешнейОбработки Экспорт; // для варианта внешнего отчета
Перем мВерсияОтчета Экспорт; // для варианта внешнего отчета


// Структура реквизитов формы отчета.
Перем СтруктураРеквизитовФормы;

// Массивы кодов из макета Списки.
Перем СписокКодовДеятельности, СписокКодовПродукции;
// Структура адреса из схемы xsd, если отличается от стандартной.
Перем ОписаниеСтруктурыАдресаИзОтчета;
// Признак режима отладки.
Перем РежимОтладки;
// Предельное количество ошибок, по достижении которого дальнейшая проверка прекращается.
Перем МаксимальноеКоличествоОшибок, ТекущееКоличествоОшибок;
Перем МаксимальноеКоличествоПредупреждений, ТекущееКоличествоПредупреждений;
// Дата начала и конца отчета.
Перем ДатаНачалаОтчета, ДатаКонцаОтчета;
// Границы дат по xsd.
Перем НижняяГраницаДатыПоXSD, ВерхняяГраницаДатыПоXSD;

// Данные обособленных подразделений разделов.
Перем ДанныеОП;

// Справочники.
Перем СправочникиОтчета;

// Документ.РегламентированныйОтчет к которому привязан отчет.
Перем ДокументСсылкаАлкоОтчет;

// Структура получаемая функцией ПолучитьСтруктуруСервисРегистров()
// модуля формы отчета.
Перем СтруктураСервисРегистров;

// Объект метаданных отчета.
Перем ОбъектЭтогоОтчета;

// Переменные, полученные из реквизитов формы отчета.
Перем СтруктураДанныхТитульный, мДеревоВыбранныхСтраниц, ДополнительныеДанные, 
	  НомерКорректировки, ДатаПодписи;

// Переменные, используемые при проверке и выгрузке отчета.
Перем ДеревоВыгрузки, ПараметрыВыгрузки, СтатусПроверки, ИмяФормыОбъекта;

// Переменные, полученные из реквизитов формы отчета.
Перем ТаблицаСтраницыЛицензии, ТаблицаСтраницыРаздел1, ТаблицаСтраницыРаздел2;

// Вспомогательные таблицы значений, отражающие состав ресурсов регистров сведений
// по группам.
Перем ТабП0000000002, ТабП0000100003, ТабП0000200003;

// Таблица значений, в которую записываются найденные при проверке выгрузки ошибки.
Перем ТаблицаСообщений; 

// Таблица значений, в который записываются информационные сообщения при проверке выгрузки ошибки.
Перем ТаблицаСообщенийДляСведения;

// Счетчики для справочников отчета.
Перем СчетчикИДПроизвИмп, СчетчикИдПоставщиков, СчетчикИдЛицензий;

// Данные движений продукции с привязкой к производителю-импортеру.
Перем ДанныеДвижений;

// Вспомогательные переменные.
Перем ВсегоСтрокПоРазделу1, ВсегоСтрокПоРазделу2, НужноОбработатьСтрок,
	ОбработаноСтрок, КолСтрокПриПроверкеЗаполнения;
	
// Содержит процент выполнения процесса проверки или выгрузки, который соответсвует проверке заполнения разделов.
// Для процесса проверки с ошибками - 100%, проверка без ошибок - 90%, при выгрузке без ошибок - 84%.
Перем ПроцентБезЗавершающейПроверкиДанных, ПроцентБезКонвертацииАрхивации;

// Адрес временного хранилища для обмена вспомогательной информацией (процент выполнения, этап).
Перем ВспомогательныйАдрес;
// Содержит шаг информирования о проценте выполнения процесса.
Перем ШагИнформирования;

// Признак отсутствия ошибок при проверке.
Перем НетОшибокПроверки;

// Версия БСП.
Перем ВерсияБСПЧислом;


#КонецОбласти


#Область ПрограммныйИнтерфейс


#Область ОбработкаПриЗаписиИзФормЗаписиРегистров

// В зависимости от имени регистра обрабатывает поля ресурсов записи и 
// вычисляет значения реквизитов при необходимости.
//
// Параметры:
//
//	 	ИмяРегистра 				- Строка - Имя регистра, запись которого обрабатывается.
// 		Запись 						- Запись регистра сведений	- Запись, которая обрабатывается.
//
Процедура ОбработкаЗаписи(ИмяРегистра, Запись, ВышеБРО_1_1_11_0 = Неопределено) Экспорт
	
	Если ВышеБРО_1_1_11_0 = Неопределено Тогда
	    ВышеБРО_1_1_11_0 = РегламентированнаяОтчетностьАЛКОВызовСервера.СравнениеВерсииПодсистемы(
													"РегламентированнаяОтчетность", "1.1.11.0");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Запись.Документ) И ВышеБРО_1_1_11_0 Тогда	
		Запись.Организация = Запись.Документ.Организация;	
	КонецЕсли; 
	
	Если ИмяРегистра = "СведенияРеглОтчетАлкоПрил12Раздел1" Тогда
		
		// Производитель
		Запись.П000010000302 = СокрЛП(Запись.П000010000302);
		КодПродукции = Запись.П000010000302;
		
		Запись.П000010000303 = СокрЛП(Запись.П000010000303);
		Наименование = Запись.П000010000303;
		
		Запись.П000010000304 = СтрЗаменить(Запись.П000010000304, " ", "");
		ИНН = Запись.П000010000304;
		
		Запись.П000010000305 = СтрЗаменить(Запись.П000010000305, " ", "");
		КПП = Запись.П000010000305;
		
		Если НЕ ЗначениеЗаполнено(Запись.ПроизводительИмпортер) Тогда		
			Запись.ПроизводительИмпортер = ОпределитьПроизводителяИмпортера(ИНН, КПП, Наименование, КодПродукции);
			Запись.П000010000303 = Наименование;
			Запись.П000010000305 = КПП;
		КонецЕсли; 
		
		СтруктураХешИдПроизводителя = РегламентированнаяОтчетностьАЛКО.ПолучитьВсеИдПроизводителя(КодПродукции, Наименование, 
																								ИНН, КПП);
		ЗаполнитьЗначенияСвойств(Запись, СтруктураХешИдПроизводителя);
		
	КонецЕсли;
	
	Если ИмяРегистра = "СведенияРеглОтчетАлкоПрил12Раздел2" Тогда
		
		// Производитель
		Запись.П000020000302 = СокрЛП(Запись.П000020000302);
		КодПродукции = Запись.П000020000302;
		
		Запись.П000020000303 = СокрЛП(Запись.П000020000303);
		Наименование = Запись.П000020000303;
		
		Запись.П000020000304 = СтрЗаменить(Запись.П000020000304, " ", "");
		ИНН = Запись.П000020000304;
		
		Запись.П000020000305 = СтрЗаменить(Запись.П000020000305, " ", "");
		КПП = Запись.П000020000305;
		
		Если НЕ ЗначениеЗаполнено(Запись.ПроизводительИмпортер) Тогда		
			Запись.ПроизводительИмпортер = ОпределитьПроизводителяИмпортера(ИНН, КПП, Наименование, КодПродукции);
			Запись.П000020000303 = Наименование;
			Запись.П000020000305 = КПП;
		КонецЕсли;
		
		СтруктураХешИдПроизводителя = РегламентированнаяОтчетностьАЛКО.ПолучитьВсеИдПроизводителя(КодПродукции, Наименование, 
																								ИНН, КПП);
		ЗаполнитьЗначенияСвойств(Запись, СтруктураХешИдПроизводителя);		
		
		// Поставщик
		Запись.П000020000306 = СокрЛП(Запись.П000020000306);
		Наименование = Запись.П000020000306;
		
		Запись.П000020000307 = СтрЗаменить(Запись.П000020000307, " ", "");
		ИНН = Запись.П000020000307;
		
		Запись.П000020000308 = СтрЗаменить(Запись.П000020000308, " ", "");
		КПП = Запись.П000020000308;
		
		Если НЕ ЗначениеЗаполнено(Запись.Поставщик) Тогда		
			Запись.Поставщик = ОпределитьПоставщика(ИНН, КПП, Наименование);
			Запись.П000020000306 = Наименование;
			Запись.П000020000308 = КПП;
		КонецЕсли;
		
		// Лицензии нет.
		Серия 			= "";
		Номер 			= "";		
		ДатаВыдачи 		= "";
		ДатаОкончания 	= "";
		КемВыдана 		= "";
		
		СтруктураСведений = Новый Структура;
		
		СтруктураСведений.Вставить("Наименование", 			Наименование);
		СтруктураСведений.Вставить("ИНН", 					ИНН);
		СтруктураСведений.Вставить("КПП", 					КПП);
		СтруктураСведений.Вставить("ПредставлениеАдреса", 	Неопределено);
		СтруктураСведений.Вставить("Номер", 				Номер);
		СтруктураСведений.Вставить("Серия", 				Серия);
		СтруктураСведений.Вставить("ДатаВыдачи", 			ДатаВыдачи);
		СтруктураСведений.Вставить("ДатаОкончания", 		ДатаОкончания);
		СтруктураСведений.Вставить("КемВыдана", 			КемВыдана);
		
		СтруктураХешИдПоставщика = РегламентированнаяОтчетностьАЛКО.ПолучитьВсеИдПоставщика(СтруктураСведений);
		
		ЗаполнитьЗначенияСвойств(Запись, СтруктураХешИдПоставщика);
		
	КонецЕсли;
	
	Если ИмяРегистра = "СведенияРеглОтчетАлкоЛицензии" Тогда
		
	    Запись.П000000000201 = СокрЛП(Запись.П000000000201);
		Запись.П000000000202 = СокрЛП(Запись.П000000000202);
	    Запись.П000000000203 = СокрЛП(Запись.П000000000203);
		Запись.П000000000204 = СокрЛП(Запись.П000000000204);
		Запись.П000000000205 = СокрЛП(Запись.П000000000205);
		Запись.П000000000206 = СокрЛП(Запись.П000000000206);
		Запись.П000000000207 = СокрЛП(Запись.П000000000207);
		
	КонецЕсли; 
	
КонецПроцедуры

Функция ОпределитьПроизводителяИмпортера(ИНН, КПП, ПолноеНаименование, КодПродукции) Экспорт
	
	Возврат  РегламентированнаяОтчетностьАЛКО.ОпределитьПроизводителяИмпортераАЛКО(
											ИНН, КПП, ПолноеНаименование, КодПродукции, "Пиво");
	
КонецФункции

Функция ОпределитьПоставщика(ИНН, КПП, ПолноеНаименование) Экспорт
	               
	Возврат  РегламентированнаяОтчетностьАЛКО.ОпределитьКонтрагентаИзЛицензийПоставщиковАЛКО(
											ИНН, КПП, ПолноеНаименование, "Пиво");	
КонецФункции

#КонецОбласти


#Область Расчет

// Производит расчет "по строке" полей ресурсов Записи. 
//
// Параметры:
//
//	 	ИдГруппы 				- Строка - Имя табличной группы, к которой относится регистр сведений.
// 		Запись 					- Запись регистра сведений	- Запись, которая обрабатывается.
//
Процедура Расчет(ИдГруппы, Запись) Экспорт

	Если ИдГруппы = "П0000100003" Тогда
		РасчетРаздел1(Запись);
	КонецЕсли;
	
КонецПроцедуры
	
#КонецОбласти 


#КонецОбласти


#Область СлужебныеПроцедурыИФункции


#Область Служебные

Процедура СообщитьОбОшибкеЗаполнения(ДокументСсылка,
		ТаблицаСообщенийОбОшибках, СтатусПроверкиОтчета = Ложь, СтруктураОшибки,
		МаксимальноеКоличествоОшибок = Неопределено, ТекущееКоличествоОшибок = Неопределено)
		
	РегламентированнаяОтчетностьАЛКО.СообщитьОбОшибкеЗаполнения(
		ДокументСсылка, ТаблицаСообщенийОбОшибках, СтатусПроверкиОтчета, СтруктураОшибки, РежимОтладки,
		МаксимальноеКоличествоОшибок, ТекущееКоличествоОшибок);

КонецПроцедуры

Функция ПолучитьИмяРегистраСведений(ИдГруппы)
	
	Возврат РегламентированнаяОтчетностьАЛКОКлиентСервер.ПолучитьИмяРегистраСведенийАЛКО(ИдГруппы, СтруктураРеквизитовФормы);
	
КонецФункции

Функция ПолучитьКоличествоСтрокПоСтраницеГруппы(ИдГруппы, ИндексСтраницы, БезПомеченныхНаУдаление = Истина)
	
	ИмяРегистраСведений = ПолучитьИмяРегистраСведений(ИдГруппы);
	СервисРегистровГруппы = СтруктураСервисРегистров[ИмяРегистраСведений];
		 
	Возврат РегламентированнаяОтчетностьАЛКОКлиентСервер.ПолучитьКоличествоСтрокПоСтраницеИзСервисРегистровГруппы(
						СервисРегистровГруппы, ИндексСтраницы, БезПомеченныхНаУдаление);
	
КонецФункции

Функция ПолучитьКоличествоСтрокПоГруппе(ИдГруппы, БезПомеченныхНаУдаление = Истина)
	
	ИмяРегистраСведений = ПолучитьИмяРегистраСведений(ИдГруппы);
	СервисРегистровГруппы = СтруктураСервисРегистров[ИмяРегистраСведений];			
	
	Возврат РегламентированнаяОтчетностьАЛКОКлиентСервер.ПолучитьКоличествоСтрокПоГруппеИзСервисРегистровГруппы(
						СервисРегистровГруппы, БезПомеченныхНаУдаление);
	
КонецФункции

Функция ИзвлечьСтруктуруXML()

	Возврат РегламентированнаяОтчетностьАЛКО.ИзвлечьСтруктуруXMLАЛКО(ДатаКонцаОтчета, ИмяФормыОбъекта, ОбъектЭтогоОтчета);
		
КонецФункции

#КонецОбласти 


#Область ОбработкаПриЗаполнении

Процедура ОбработкаСтрокиТаблицыСтарогоФормата(ИмяРегистра, СтрокаТЗ, ВышеБРО_1_1_11_0 = Неопределено) Экспорт
	
	ОбработкаЗаписи(ИмяРегистра, СтрокаТЗ, ВышеБРО_1_1_11_0);

КонецПроцедуры

#КонецОбласти


#Область СлужебныеРасчет

Процедура РасчетРаздел1(Запись)
	
	Запись.П000010000306 = ?(Запись.П000010000306 = Неопределено, 0, Запись.П000010000306);
	
	Запись.П000010000307 = ?(Запись.П000010000307 = Неопределено, 0, Запись.П000010000307);
	Запись.П000010000308 = ?(Запись.П000010000308 = Неопределено, 0, Запись.П000010000308);
	Запись.П000010000309 = ?(Запись.П000010000309 = Неопределено, 0, Запись.П000010000309);
	
	Запись.П000010000311 = ?(Запись.П000010000311 = Неопределено, 0, Запись.П000010000311);
	Запись.П000010000312 = ?(Запись.П000010000312 = Неопределено, 0, Запись.П000010000312);
	
	Запись.П000010000314 = ?(Запись.П000010000314 = Неопределено, 0, Запись.П000010000314);
	Запись.П000010000315 = ?(Запись.П000010000315 = Неопределено, 0, Запись.П000010000315);
	Запись.П000010000316 = ?(Запись.П000010000316 = Неопределено, 0, Запись.П000010000316);
		
	Запись.П000010000310 = Запись.П000010000307 + Запись.П000010000308
										+ Запись.П000010000309;
	
	Запись.П000010000313 = Запись.П000010000310 + Запись.П000010000311
										+ Запись.П000010000312;
	
	Запись.П000010000317 = Запись.П000010000314 + Запись.П000010000315 
										+ Запись.П000010000316;
							
	Запись.П000010000318 = Запись.П000010000306 + Запись.П000010000313
										- Запись.П000010000317;

КонецПроцедуры
	
#КонецОбласти 


#Область ПроверитьВыгрузку 

Функция ПроверитьЗаполнениеТитульный(СтатусПроверки)
	
	СтруктураПараметров = Новый Структура;
	
	СтруктураПараметров.Вставить("ОписаниеСтруктурыАдресаИзОтчета", ОписаниеСтруктурыАдресаИзОтчета);
	
	СтруктураПараметров.Вставить("МаксимальноеКоличествоОшибок", МаксимальноеКоличествоОшибок);
	СтруктураПараметров.Вставить("ТекущееКоличествоОшибок", ТекущееКоличествоОшибок);
	СтруктураПараметров.Вставить("МаксимальноеКоличествоПредупреждений", МаксимальноеКоличествоПредупреждений);
	СтруктураПараметров.Вставить("ТекущееКоличествоПредупреждений", ТекущееКоличествоПредупреждений);
	
	Результат = РегламентированнаяОтчетностьАЛКО.ВерноеЗаполнениеТитульный(
								ДокументСсылкаАлкоОтчет, ТаблицаСообщений, ТаблицаСообщенийДляСведения, 
								СтатусПроверки, ПараметрыВыгрузки, СтруктураПараметров, РежимОтладки);
								
	СтруктураПараметров.Свойство("МаксимальноеКоличествоОшибок", МаксимальноеКоличествоОшибок);
	СтруктураПараметров.Свойство("ТекущееКоличествоОшибок", ТекущееКоличествоОшибок);
	СтруктураПараметров.Свойство("МаксимальноеКоличествоПредупреждений", МаксимальноеКоличествоПредупреждений);
	СтруктураПараметров.Свойство("ТекущееКоличествоПредупреждений", ТекущееКоличествоПредупреждений);
			
	Возврат Результат;
		
КонецФункции

Процедура ПроверитьЗаполнениеРаздел1(СтатусПроверки)

	ИмяРаздела = "Раздел1";
	СтрВКакомРазделе = "В Разделе 1";
	ПоказательОП = "ОбособленноеПодразделение";

	// Раздел 1 может не заполняться.
	// Необходимость проверки определяется переменной ЕстьАктивныеСтрокиВТаблице.
	ИдГруппы = СтруктураРеквизитовФормы.мИдГруппы12;
	
	ДанныеРаздела = ТаблицаСтраницыРаздел1;

	ИмяРегистраСведений = ПолучитьИмяРегистраСведений(ИдГруппы);
	СервисРегистров = СтруктураСервисРегистров[ИмяРегистраСведений];

	НомерЛиста = 0;
	Для Каждого ЛистРаздела Из ДанныеРаздела Цикл

		НомерЛиста = НомерЛиста + 1;

		СтруктураСведенийПроверки = Новый Структура;
		СтруктураСведенийПроверки.Вставить("ПараметрыВыгрузки", ПараметрыВыгрузки);
		СтруктураСведенийПроверки.Вставить("ИмяРаздела", ИмяРаздела);
		СтруктураСведенийПроверки.Вставить("СтрВКакомРазделе", СтрВКакомРазделе);
		СтруктураСведенийПроверки.Вставить("НомерЛиста", НомерЛиста);
		СтруктураСведенийПроверки.Вставить("ЛистРаздела", ЛистРаздела);

		// Раздел 1 не обязателен к заполнению, но если есть заполненные строки при незаполненном ОП - нужно выдать ошибку.
		КолАктивныхСтрокНаСтранице = ПолучитьКоличествоСтрокПоСтраницеГруппы(ИдГруппы, НомерЛиста
			- 1, Истина);
		ЕстьАктивныеСтрокиВТаблице = (КолАктивныхСтрокНаСтранице > 0);

		СтруктураСведенийПроверки.Вставить("ПроверятьНаПустоту", ЕстьАктивныеСтрокиВТаблице);

		СтруктураСведенийПроверки.Вставить("ОписаниеСтруктурыАдресаИзОтчета", ОписаниеСтруктурыАдресаИзОтчета);
		
		СтруктураСведенийПроверки.Вставить("МаксимальноеКоличествоОшибок", МаксимальноеКоличествоОшибок);
		СтруктураСведенийПроверки.Вставить("ТекущееКоличествоОшибок", ТекущееКоличествоОшибок);
		СтруктураСведенийПроверки.Вставить("МаксимальноеКоличествоПредупреждений", МаксимальноеКоличествоПредупреждений);
		СтруктураСведенийПроверки.Вставить("ТекущееКоличествоПредупреждений", ТекущееКоличествоПредупреждений);
	
		СведенияОбОП = Неопределено;

		РегламентированнаяОтчетностьАЛКО.ВерноеЗаполнениеОП(
					ДокументСсылкаАлкоОтчет, ТаблицаСообщений, ТаблицаСообщенийДляСведения, СтатусПроверки, 
					СтруктураСведенийПроверки, СведенияОбОП, РежимОтладки);

		СтруктураСведенийПроверки.Свойство("МаксимальноеКоличествоОшибок", МаксимальноеКоличествоОшибок);
		СтруктураСведенийПроверки.Свойство("ТекущееКоличествоОшибок", ТекущееКоличествоОшибок);
		СтруктураСведенийПроверки.Свойство("МаксимальноеКоличествоПредупреждений", МаксимальноеКоличествоПредупреждений);
		СтруктураСведенийПроверки.Свойство("ТекущееКоличествоПредупреждений", ТекущееКоличествоПредупреждений);
		
		СтрокаГде = РегламентированнаяОтчетностьАЛКО.СтрокаГдеСообщенийОбОшибках(СтрВКакомРазделе, НомерЛиста, Неопределено, Неопределено, РежимОтладки);

		ИндексСтраницыРегистраРаздел1 = СервисРегистров[НомерЛиста
			- 1].ИндексСтраницыРегистра;

		ИдОП = "";
		Если ТипЗнч(ЛистРаздела.ДополнительныеДанные[0].Значение) = Тип("Структура")
				И ЛистРаздела.ДополнительныеДанные[0].Значение.Свойство("СведенияОбОП", СведенияОбОП) Тогда

			Если ЗначениеЗаполнено(СведенияОбОП.КПП)
					или ЗначениеЗаполнено(СведенияОбОП.Наименование) Тогда

				Наименование_ОП = СведенияОбОП.Наименование;
				КПП_ОП = СведенияОбОП.КПП;
				ИдОП = ИдентификаторОП(СведенияОбОП);

				// Контроль записей на уникальность в Разделе("КПП ОП" + "Наименование ОП").
				Если НЕ ДанныеОП["Раздел1"].Получить(ИдОП) = Неопределено Тогда

				// Такое ОП уже есть.
					ЛистПовтора = ДанныеОП["Раздел1"][ИдОП]["НомерЛистаРаздел1"];
					ЛистПовтораСтроковый = РегламентированнаяОтчетностьАЛКОКлиентСервер.СтрокаЧГ0(ЛистПовтора);
					ТекстОписанияОшибки = СтрокаГде
						+ " обособленное подразделение повторяет заполненное на листе "
						+ ЛистПовтораСтроковый + "!
						|ОП: " + Наименование_ОП + ?(ПустаяСтрока(КПП_ОП), "", ", (КПП "
						+ КПП_ОП + ")")
						+ ?(НЕ ЗначениеЗаполнено(СведенияОбОП.ПредставлениеАдреса), "", "
						|Адрес: " + СведенияОбОП.ПредставлениеАдреса);

					СтруктураОшибки = Новый Структура;
					СтруктураОшибки.Вставить("ТекстОписанияОшибки", ТекстОписанияОшибки);
					СтруктураОшибки.Вставить("Раздел", ИмяРаздела);
					СтруктураОшибки.Вставить("Показатель", ПоказательОП);
					СтруктураОшибки.Вставить("ЛистРаздела", НомерЛиста);
					СтруктураОшибки.Вставить("ТипОшибки", "ПовторОП");

					СообщитьОбОшибкеЗаполнения(ДокументСсылкаАлкоОтчет, ТаблицаСообщений, СтатусПроверки, СтруктураОшибки, 
												МаксимальноеКоличествоОшибок, ТекущееКоличествоОшибок);

				Иначе

					ДанныеОП["Раздел1"].Вставить(ИдОП, Новый Соответствие);

					КопияСведенияОбОП = ОбщегоНазначенияКлиентСервер.СкопироватьРекурсивно(СведенияОбОП);

					ДанныеОП["Раздел1"][ИдОП].Вставить("ОП", КопияСведенияОбОП);

					ДанныеОП["Раздел1"][ИдОП].Вставить("НомерЛистаРаздел1", НомерЛиста);

					ДанныеОП["Раздел1"][ИдОП].Вставить("ИндексСтраницыРегистраРаздел1", ИндексСтраницыРегистраРаздел1);

					ДанныеОП["Раздел1"][ИдОП].Вставить("КолСтрокПоРазделу1", 0);
					ДанныеОП["Раздел1"][ИдОП].Вставить("КолСтрокПоРазделу2", 0);

					ДанныеДвижений.Вставить(ИдОП, Новый Соответствие);

				КонецЕсли;
			КонецЕсли;

		КонецЕсли;

		Если ЕстьАктивныеСтрокиВТаблице Тогда

		// Проверка заполнения таблиц декларации.
			ПроверитьЗаполнениеТаблицыРаздел1(СтатусПроверки, ИдГруппы, НомерЛиста, ИдОП);

		КонецЕсли;

		Если НетОшибокПроверки и (ТекущееКоличествоОшибок > 0) Тогда

			НетОшибокПроверки = Ложь;
			ПроцентБезЗавершающейПроверкиДанных = 100;
			НужноОбработатьСтрок = НужноОбработатьСтрок / 2;

		КонецЕсли;

		Если ТекущееКоличествоОшибок > МаксимальноеКоличествоОшибок Тогда
			ОбработаноСтрок = НужноОбработатьСтрок;			
			Возврат;
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

Процедура ПроверитьЗаполнениеТаблицыРаздел1(СтатусПроверки, ИдГруппы,
		НомерЛиста, ИдОП = "")

	ИндексСтраницы = НомерЛиста - 1;

	ИмяТаблицы = Неопределено;

	МетаданныеКонтрагенты = Метаданные.Справочники.Контрагенты;
	ЕстьСтранаРегистрации = ОбщегоНазначения.ЕстьРеквизитОбъекта("СтранаРегистрации", МетаданныеКонтрагенты);

	СтранаРоссия = Неопределено;
	Если ЕстьСтранаРегистрации Тогда
		СтранаРоссия = ПредопределенноеЗначение("Справочник.СтраныМира.Россия");
	КонецЕсли;

	ЕстьИдОП = НЕ ПустаяСтрока(СтрЗаменить(ИдОП, "\", ""));

	// Опеределим регистр сведений.
	ИмяРегистраСведений = ПолучитьИмяРегистраСведений(ИдГруппы);

	СервисРегистров = СтруктураСервисРегистров[ИмяРегистраСведений];
	ИндексСтраницыРегистра = СервисРегистров[ИндексСтраницы].ИндексСтраницыРегистра;
	ИДДокИндСтраницы = РегламентированнаяОтчетностьАЛКО.ПолучитьИдДокИндСтраницы(ДокументСсылкаАлкоОтчет, ИндексСтраницыРегистра);

	ДанныеДвиженийПоОП = Неопределено;
	Если ЕстьИдОП Тогда
		ДанныеДвиженийПоОП = ДанныеДвижений[ИдОП];
		ДанныеОП["Раздел1"][ИдОП].Вставить("ИДДокИндСтраницыРаздел1", ИДДокИндСтраницы);
	КонецЕсли;

	ТекущийИндексСтроки = 0;
	КолСтрокРаздел1 = 0;

	// Зафиксируем имена ключевых полей.
	ИмяКодаВидаПродукции = ИдГруппы + "02";

	ИмяНаименованияПроизводителя = ИдГруппы + "03";
	ИмяИННПроизводителя = ИдГруппы + "04";
	ИмяКПППроизводителя = ИдГруппы + "05";

	ИмяРаздела = "Раздел1";
	СтрВКакомРазделе = "В Разделе 1";
	КоличествоКолонокВРазделе = 18;
	
	КоличествоПервых = 1000;

	СтруктураСинонимовЗаписи = РегламентированнаяОтчетностьАЛКО.ПолучитьСтруктуруСинонимовЗаписиРегистраСведений(ИмяРегистраСведений, , Тип("Число"));
	РабочийРегистрСведений = РегистрыСведений[ИмяРегистраСведений];
	НаборЗаписей = РабочийРегистрСведений.СоздатьНаборЗаписей();
	ВременнаяЗаписьРегистра = НаборЗаписей.Добавить();

	// Для получения в запросе сразу страны регистрации контрагента.
	СписокПолейКонтрагентов = Новый Массив;
	СписокПолейКонтрагентов.Добавить("ПроизводительИмпортер");

	Пока Истина Цикл

		СтруктураНастроек = Новый Структура;
		СтруктураНастроек.Вставить("КоличествоПервых", КоличествоПервых);
		СтруктураНастроек.Вставить("ТекущийИндексСтроки", ТекущийИндексСтроки);
		СтруктураНастроек.Вставить("ЕстьСтранаРегистрации", ЕстьСтранаРегистрации);
		СтруктураНастроек.Вставить("СписокПолейКонтрагентов", СписокПолейКонтрагентов);

		РезЗапросаДанных = РегламентированнаяОтчетностьАЛКО.ЗаполнитьПоСтраницеРазделаАЛКО(ИдГруппы, ИндексСтраницы, СтруктураРеквизитовФормы, , ИДДокИндСтраницы, Ложь, СтруктураНастроек);

		Если РезЗапросаДанных.Количество() = 0 Тогда
			Прервать;
		КонецЕсли;

		Для каждого СтрокаДекларации Из РезЗапросаДанных Цикл

			НомерСтроки = СтрокаДекларации.ИндексСтроки;
			ТекущийИндексСтроки = СтрокаДекларации.ИндексСтроки;
			КолСтрокРаздел1 = КолСтрокРаздел1 + 1;

			НомерСтрокиСтроковый = РегламентированнаяОтчетностьАЛКОКлиентСервер.СтрокаЧГ0(НомерСтроки);

			СтрокаЗаполнена = РегламентированнаяОтчетностьАЛКО.СтрокаДекларацииЗаполнена(СтрокаДекларации, ИдГруппы, КоличествоКолонокВРазделе);

			СтрокаГде = РегламентированнаяОтчетностьАЛКО.СтрокаГдеСообщенийОбОшибках(СтрВКакомРазделе, НомерЛиста, НомерСтрокиСтроковый, ИмяТаблицы, РежимОтладки);

			Если НЕ СтрокаЗаполнена Тогда

				ТекстОписанияОшибки = СтрокаГде + " не заполнено ни одно поле!";

				ИмяПоказателя = ИмяКодаВидаПродукции + "_" + НомерСтрокиСтроковый;

				СтруктураОшибки = Новый Структура;
				СтруктураОшибки.Вставить("ТекстОписанияОшибки", ТекстОписанияОшибки);
				СтруктураОшибки.Вставить("Раздел", ИмяРаздела);
				СтруктураОшибки.Вставить("Показатель", ИмяПоказателя);
				СтруктураОшибки.Вставить("ЛистРаздела", НомерЛиста);
				СтруктураОшибки.Вставить("ТипОшибки", "ПустаяСтрока");

				СообщитьОбОшибкеЗаполнения(ДокументСсылкаАлкоОтчет, ТаблицаСообщений, СтатусПроверки, СтруктураОшибки, 
											МаксимальноеКоличествоОшибок, ТекущееКоличествоОшибок);

				Продолжить;
			КонецЕсли;

			ОбработаноСтрок = ОбработаноСтрок + 1;

			ИмяПоказателя = ИмяКодаВидаПродукции + "_" + НомерСтрокиСтроковый;
			КодВидаПродукции = СокрЛП(СтрокаДекларации[ИмяКодаВидаПродукции]);

			СтруктураИнформацииВидаПродукции = Новый Структура;

			СтруктураИнформацииВидаПродукции.Вставить("ИмяПоказателя", ИмяПоказателя);
			СтруктураИнформацииВидаПродукции.Вставить("ИмяРаздела", ИмяРаздела);
			СтруктураИнформацииВидаПродукции.Вставить("НомерЛиста", НомерЛиста);
			СтруктураИнформацииВидаПродукции.Вставить("СписокКодов", СписокКодовПродукции);
			СтруктураИнформацииВидаПродукции.Вставить("СтрокаГде", СтрокаГде);
			СтруктураИнформацииВидаПродукции.Вставить("СтрВКакомРазделе", СтрВКакомРазделе);
			СтруктураИнформацииВидаПродукции.Вставить("НомерСтрокиСтроковый", НомерСтрокиСтроковый);
			СтруктураИнформацииВидаПродукции.Вставить("ИмяТаблицы", ИмяТаблицы);
			
			СтруктураИнформацииВидаПродукции.Вставить("МаксимальноеКоличествоОшибок", МаксимальноеКоличествоОшибок);
			СтруктураИнформацииВидаПродукции.Вставить("ТекущееКоличествоОшибок", ТекущееКоличествоОшибок);
			СтруктураИнформацииВидаПродукции.Вставить("МаксимальноеКоличествоПредупреждений", МаксимальноеКоличествоПредупреждений);
			СтруктураИнформацииВидаПродукции.Вставить("ТекущееКоличествоПредупреждений", ТекущееКоличествоПредупреждений);

			РегламентированнаяОтчетностьАЛКО.ВерныйКодВидаПродукции(
							ДокументСсылкаАлкоОтчет, ТаблицаСообщений, ТаблицаСообщенийДляСведения, 
							СтатусПроверки, КодВидаПродукции, СтруктураИнформацииВидаПродукции, РежимОтладки);
							
			СтруктураИнформацииВидаПродукции.Свойство("МаксимальноеКоличествоОшибок", МаксимальноеКоличествоОшибок);
			СтруктураИнформацииВидаПродукции.Свойство("ТекущееКоличествоОшибок", ТекущееКоличествоОшибок);
			СтруктураИнформацииВидаПродукции.Свойство("МаксимальноеКоличествоПредупреждений", МаксимальноеКоличествоПредупреждений);
			СтруктураИнформацииВидаПродукции.Свойство("ТекущееКоличествоПредупреждений", ТекущееКоличествоПредупреждений);

			////////////////////////////////////////////////////////////////////////////////
			// Контроль Наименования-ИНН-КПП.
			ИмяПоказателяНаименования = ИмяНаименованияПроизводителя + "_"
				+ НомерСтрокиСтроковый;
			НаименованиеПроизводителя = СокрЛП(СтрокаДекларации[ИмяНаименованияПроизводителя]);

			ИмяПоказателяИНН = ИмяИННПроизводителя + "_" + НомерСтрокиСтроковый;
			ИННПроизводителя = СокрЛП(СтрокаДекларации[ИмяИННПроизводителя]);

			ИмяПоказателяКПП = ИмяКПППроизводителя + "_" + НомерСтрокиСтроковый;
			КПППроизводителя = СокрЛП(СтрокаДекларации[ИмяКПППроизводителя]);

			РодПадежЧейИННКПП = "производителя/импортера";
			
			СтранаРегистрации = ?(ЕстьСтранаРегистрации, 
								СтрокаДекларации["СтранаРегистрацииПроизводительИмпортер"], "");
			
			РоссийскийРезидент = Ложь;
			РезидентЕАЭС = Ложь;
				
			РегламентированнаяОтчетностьАЛКО.ОпределитьПринадлежностьЕАЭСиРФ(ИННПроизводителя, КПППроизводителя, НаименованиеПроизводителя, 
											СтранаРегистрации, РоссийскийРезидент, РезидентЕАЭС, РежимОтладки);


			МожетБытьПустойИНН = Ложь;
			МожетБытьПустойКПП = Истина;
			КонтрольОП = Ложь;
			РоссийскийТолькоЮЛ = Неопределено;
			РоссийскийТолькоФЛ = Неопределено;
			
			ТолькоЕАЭС = Ложь;
			ТолькоРФ = Ложь;
			МинДлинаИННпоXSD = 1;
			МаксДлинаИННпоXSD = 20;
			
			КПП56СимволыМогутБытьБуквами = Ложь;
			ИННLiteТип = Ложь;
			КППLiteТип = Истина;

			СтруктураСведенийИННКПП = Новый Структура;

			СтруктураСведенийИННКПП.Вставить("ИмяРаздела", ИмяРаздела);

			СтруктураСведенийИННКПП.Вставить("СтрокаГде", СтрокаГде);
			СтруктураСведенийИННКПП.Вставить("СтрВКакомРазделе", СтрВКакомРазделе);
			СтруктураСведенийИННКПП.Вставить("НомерСтрокиСтроковый", НомерСтрокиСтроковый);
			СтруктураСведенийИННКПП.Вставить("ИмяТаблицы", ИмяТаблицы);

			СтруктураСведенийИННКПП.Вставить("НомерЛиста", НомерЛиста);
			СтруктураСведенийИННКПП.Вставить("КонтрольОП", КонтрольОП);

			СтруктураСведенийИННКПП.Вставить("ИмяПоказателяНаименования", ИмяПоказателяНаименования);
			СтруктураСведенийИННКПП.Вставить("Наименование", НаименованиеПроизводителя);

			СтруктураСведенийИННКПП.Вставить("ИмяПоказателяИНН", ИмяПоказателяИНН);
			СтруктураСведенийИННКПП.Вставить("ИНН", ИННПроизводителя);
			СтруктураСведенийИННКПП.Вставить("ИмяПоказателяКПП", ИмяПоказателяКПП);
			СтруктураСведенийИННКПП.Вставить("КПП", КПППроизводителя);
			СтруктураСведенийИННКПП.Вставить("РодПадежЧейИННКПП", РодПадежЧейИННКПП);

			СтруктураСведенийИННКПП.Вставить("МожетБытьПустойИНН", МожетБытьПустойИНН);
			СтруктураСведенийИННКПП.Вставить("МожетБытьПустойКПП", МожетБытьПустойКПП);

			СтруктураСведенийИННКПП.Вставить("РоссийскийТолькоЮЛ", РоссийскийТолькоЮЛ);
			СтруктураСведенийИННКПП.Вставить("РоссийскийТолькоФЛ", РоссийскийТолькоФЛ);
			СтруктураСведенийИННКПП.Вставить("КПП56СимволыМогутБытьБуквами", КПП56СимволыМогутБытьБуквами);
			СтруктураСведенийИННКПП.Вставить("ИННLiteТип", ИННLiteТип);
			СтруктураСведенийИННКПП.Вставить("КППLiteТип", КППLiteТип);
			
			СтруктураСведенийИННКПП.Вставить("МаксимальноеКоличествоОшибок", МаксимальноеКоличествоОшибок);
			СтруктураСведенийИННКПП.Вставить("ТекущееКоличествоОшибок", ТекущееКоличествоОшибок);
			СтруктураСведенийИННКПП.Вставить("МаксимальноеКоличествоПредупреждений", МаксимальноеКоличествоПредупреждений);
			СтруктураСведенийИННКПП.Вставить("ТекущееКоличествоПредупреждений", ТекущееКоличествоПредупреждений);
			
			КодСтраны = ?(ЗначениеЗаполнено(СтранаРегистрации), СтранаРегистрации.Код, "");
			СтруктураСведенийИННКПП.Вставить("КодСтраны", КодСтраны);
			СтруктураСведенийИННКПП.Вставить("ТолькоЕАЭС", ТолькоЕАЭС);
			СтруктураСведенийИННКПП.Вставить("ТолькоРФ", ТолькоРФ); 
			СтруктураСведенийИННКПП.Вставить("МаксДлинаИННпоXSD", МаксДлинаИННпоXSD); 	// По умолчанию 20.
			СтруктураСведенийИННКПП.Вставить("МинДлинаИННпоXSD", МинДлинаИННпоXSD);		// По умолчанию 1.

			РегламентированнаяОтчетностьАЛКО.ВерныеНаименованиеИННКПП(ДокументСсылкаАлкоОтчет, ТаблицаСообщений, ТаблицаСообщенийДляСведения, СтатусПроверки, СтруктураСведенийИННКПП, РоссийскийРезидент, РежимОтладки);

			СтруктураСведенийИННКПП.Свойство("МаксимальноеКоличествоОшибок", МаксимальноеКоличествоОшибок);
			СтруктураСведенийИННКПП.Свойство("ТекущееКоличествоОшибок", ТекущееКоличествоОшибок);
			СтруктураСведенийИННКПП.Свойство("МаксимальноеКоличествоПредупреждений", МаксимальноеКоличествоПредупреждений);
			СтруктураСведенийИННКПП.Свойство("ТекущееКоличествоПредупреждений", ТекущееКоличествоПредупреждений);
			
			//
			////////////////////////////////////////////////////////////////////////////////

			// Проверяем соответствие расчету.
			ЗаполнитьЗначенияСвойств(ВременнаяЗаписьРегистра, СтрокаДекларации);
			РасчетРаздел1(ВременнаяЗаписьРегистра);

			СуммаЧисловыхПолей = 0;
			ЕстьЧисловыеПоля = Ложь;
			
			Для каждого КлючЗначение Из СтруктураСинонимовЗаписи Цикл

				Показатель = КлючЗначение.Ключ + "_" + НомерСтрокиСтроковый;
				
				Если НЕ ЕстьЧисловыеПоля Тогда
				// Это первое числовое поле.
					ИмяПоказателяПустаяСтрока = Показатель;				
				КонецЕсли; 
				ЕстьЧисловыеПоля = Истина;
				
				НазваниеПоказателя = КлючЗначение.Значение;
				СтрНомерКолонки = Прав(КлючЗначение.Ключ, 2);

				СуммаЧисловыхПолей = СуммаЧисловыхПолей + СтрокаДекларации[КлючЗначение.Ключ];
				
				// Проверяются только данные типа Число.
				Если СтрокаДекларации[КлючЗначение.Ключ] <> ВременнаяЗаписьРегистра[КлючЗначение.Ключ] Тогда

				// Значение строки декларации не соответствует расчетному.
					ТекстОписанияОшибки = СтрокаГде + " значение не соответствует расчетному
						|в колонке """ + СтрНомерКолонки + """ (""" + НазваниеПоказателя + """).
						|Текущее значение   : "
						+ Формат(СтрокаДекларации[КлючЗначение.Ключ], "ЧГ=0; ЧВН=") + "
						|Расчетное значение : "
						+ Формат(ВременнаяЗаписьРегистра[КлючЗначение.Ключ], "ЧГ=0; ЧВН=");

					СтруктураОшибки = Новый Структура;
					СтруктураОшибки.Вставить("ТекстОписанияОшибки", ТекстОписанияОшибки);
					СтруктураОшибки.Вставить("Раздел", ИмяРаздела);
					СтруктураОшибки.Вставить("Показатель", Показатель);
					СтруктураОшибки.Вставить("ЛистРаздела", НомерЛиста);
					СтруктураОшибки.Вставить("ТипОшибки", "НеверныйРасчет");

					СообщитьОбОшибкеЗаполнения(ДокументСсылкаАлкоОтчет, ТаблицаСообщенийДляСведения, , СтруктураОшибки,
												МаксимальноеКоличествоПредупреждений, ТекущееКоличествоПредупреждений);

				КонецЕсли;

				// Проверяем на отрицательные значения.
				Если СтрокаДекларации[КлючЗначение.Ключ] < 0 Тогда

				// Значение строки декларации не может быть отрицательным.
					ТекстОписанияОшибки = СтрокаГде + " отрицательное значение
						|в колонке """ + СтрНомерКолонки + """ (""" + НазваниеПоказателя
						+ """).";

					СтруктураОшибки = Новый Структура;
					СтруктураОшибки.Вставить("ТекстОписанияОшибки", ТекстОписанияОшибки);
					СтруктураОшибки.Вставить("Раздел", ИмяРаздела);
					СтруктураОшибки.Вставить("Показатель", Показатель);
					СтруктураОшибки.Вставить("ЛистРаздела", НомерЛиста);
					СтруктураОшибки.Вставить("ТипОшибки", "ОтрицательноеЗначение");

					СообщитьОбОшибкеЗаполнения(ДокументСсылкаАлкоОтчет, ТаблицаСообщений, СтатусПроверки, СтруктураОшибки, 
													МаксимальноеКоличествоОшибок, ТекущееКоличествоОшибок);

				КонецЕсли;
				
			КонецЦикла;
			
			Если ЕстьЧисловыеПоля И СуммаЧисловыхПолей = 0 Тогда
			
				ТекстОписанияОшибки = СтрокаГде + " не заполнены числовые данные!";
				
				ИмяПоказателя = ИмяПоказателяПустаяСтрока;
				
				СтруктураОшибки = Новый Структура;
				СтруктураОшибки.Вставить("ТекстОписанияОшибки", ТекстОписанияОшибки);
				СтруктураОшибки.Вставить("Раздел", ИмяРаздела);
				СтруктураОшибки.Вставить("Показатель", ИмяПоказателя);
				СтруктураОшибки.Вставить("ЛистРаздела", НомерЛиста);
				СтруктураОшибки.Вставить("ТипОшибки", "ПустаяСтрока");

				СообщитьОбОшибкеЗаполнения(ДокументСсылкаАлкоОтчет, ТаблицаСообщений, СтатусПроверки, СтруктураОшибки, 
											МаксимальноеКоличествоОшибок, ТекущееКоличествоОшибок);                
			
			КонецЕсли;

			// Заполняем Таблицу Производителей раздела 1.
			Если ЕстьИдОП Тогда

				ИдКодПродПроизв = "Х" + СтрокаДекларации.ХешИдКодПродПроизв;
				ИдПроизв = "Х" + СтрокаДекларации.ХешИдПроизводителя;

				Если НЕ ПустаяСтрока(КодВидаПродукции) Тогда

				// Вначале заполняем справочник Производителей.
					Если СправочникиОтчета["ПроизводителиИмпортеры"].Получить(ИдПроизв) = Неопределено Тогда

						СчетчикИДПроизвИмп = СчетчикИДПроизвИмп + 1;
						СправочникиОтчета["ПроизводителиИмпортеры"].Вставить(ИдПроизв, Новый Соответствие);
						СправочникиОтчета["ПроизводителиИмпортеры"][ИдПроизв].Вставить("ИДПроизвИмп", СчетчикИДПроизвИмп);
						СправочникиОтчета["ПроизводителиИмпортеры"][ИдПроизв].Вставить("П000000000004", НаименованиеПроизводителя);
						СправочникиОтчета["ПроизводителиИмпортеры"][ИдПроизв].Вставить("П000000000005", ИННПроизводителя);
						СправочникиОтчета["ПроизводителиИмпортеры"][ИдПроизв].Вставить("П000000000006", КПППроизводителя);

					КонецЕсли;

					// Ведущие нули в строке вызывают ошибку при попытке назначения ключем.
					КодВидаПродукцииКлюч = "Х" + КодВидаПродукции;

					Если ДанныеДвиженийПоОП.Получить(КодВидаПродукцииКлюч) = Неопределено Тогда

						ДанныеДвиженийПоОП.Вставить(КодВидаПродукцииКлюч, Новый Соответствие);
						ДанныеДвиженийПоОП[КодВидаПродукцииКлюч].Вставить("КоличествоСтрокРаздел2ПоКоду", 0);
						ДанныеДвиженийПоОП[КодВидаПродукцииКлюч].Вставить("КодПродПроизв", Новый Соответствие);

					КонецЕсли;
					ДанныеДвижений_ПоОП_ПоКоду = ДанныеДвиженийПоОП[КодВидаПродукцииКлюч]["КодПродПроизв"];

					Если НЕ ДанныеДвижений_ПоОП_ПоКоду.Получить(ИдКодПродПроизв) = Неопределено Тогда

					// Проверка на дублирование.
						СтрокаПовтора = ДанныеДвижений_ПоОП_ПоКоду[ИдКодПродПроизв]["НомерСтрокиРаздел1"];
						СтрокаПовтораСтроковый = РегламентированнаяОтчетностьАЛКОКлиентСервер.СтрокаЧГ0(СтрокаПовтора);

						АдресДубликата = ИмяКодаВидаПродукции + "_" + НомерСтрокиСтроковый;

						ТекстОписанияОшибки = СтрокаГде
							+ " повторяется сочетание кода вида продукции и реквизитов производителя/импортера,
							|ранее обнаруженное в строке " + СтрокаПовтораСтроковый + "!";

						СтруктураОшибки = Новый Структура;
						СтруктураОшибки.Вставить("ТекстОписанияОшибки", ТекстОписанияОшибки);
						СтруктураОшибки.Вставить("Раздел", ИмяРаздела);
						СтруктураОшибки.Вставить("Показатель", АдресДубликата);
						СтруктураОшибки.Вставить("ЛистРаздела", НомерЛиста);
						СтруктураОшибки.Вставить("ТипОшибки", "ПовторСочетанияКодПроизводитель");

						СообщитьОбОшибкеЗаполнения(ДокументСсылкаАлкоОтчет, ТаблицаСообщений, СтатусПроверки, СтруктураОшибки,
													МаксимальноеКоличествоОшибок, ТекущееКоличествоОшибок);

					Иначе

						ДанныеДвижений_ПоОП_ПоКоду.Вставить(ИдКодПродПроизв, Новый Соответствие);
						// Заполняем Движения.
						ДанныеДвижений_ПоОП_ПоКоду[ИдКодПродПроизв].Вставить("НомерСтрокиРаздел1", НомерСтроки);
						ДанныеДвижений_ПоОП_ПоКоду[ИдКодПродПроизв].Вставить("ИдПроизв", ИдПроизв);
						ДанныеДвижений_ПоОП_ПоКоду[ИдКодПродПроизв].Вставить("КоличествоСтрокРаздел2ПоКодПродПроизв", 0);
						ДанныеДвижений_ПоОП_ПоКоду[ИдКодПродПроизв].Вставить("ПоступлениеПоРазделу2", 0);
						ДанныеДвижений_ПоОП_ПоКоду[ИдКодПродПроизв].Вставить("Поставщики", Новый Соответствие);

						// Нет смысла собирать данные по Движениям, если есть ошибки заполнения.
						Если ТекущееКоличествоОшибок = 0 Тогда

						// ИДПроизвИмп.
							ДанныеДвижений_ПоОП_ПоКоду[ИдКодПродПроизв].Вставить("ИдПроизвИмп", СправочникиОтчета["ПроизводителиИмпортеры"][ИдПроизв]["ИДПроизвИмп"]);
							// Остаток на начало.
							ДанныеДвижений_ПоОП_ПоКоду[ИдКодПродПроизв].Вставить("П100000000006", СтрокаДекларации[ИдГруппы
								+ "06"]);
								// Поступление (закупки) от организаций- производителей.
							ДанныеДвижений_ПоОП_ПоКоду[ИдКодПродПроизв].Вставить("П100000000007", СтрокаДекларации[ИдГруппы
								+ "07"]);
								// Поступление (закупки) от организаций оптовой торговли.
							ДанныеДвижений_ПоОП_ПоКоду[ИдКодПродПроизв].Вставить("П100000000008", СтрокаДекларации[ИдГруппы
								+ "08"]);
								// Поступление (закупки) по импорту.
							ДанныеДвижений_ПоОП_ПоКоду[ИдКодПродПроизв].Вставить("П100000000009", СтрокаДекларации[ИдГруппы
								+ "09"]);
								// Поступление (закупки) итого.
							ДанныеДвижений_ПоОП_ПоКоду[ИдКодПродПроизв].Вставить("П100000000010", СтрокаДекларации[ИдГруппы
								+ "10"]);
								// Поступление (возврат от покупателей).
							ДанныеДвижений_ПоОП_ПоКоду[ИдКодПродПроизв].Вставить("П100000000011", СтрокаДекларации[ИдГруппы
								+ "11"]);
								// Прочие поступления.
							ДанныеДвижений_ПоОП_ПоКоду[ИдКодПродПроизв].Вставить("П100000000012", СтрокаДекларации[ИдГруппы
								+ "12"]);
								// Поступление всего.
							ДанныеДвижений_ПоОП_ПоКоду[ИдКодПродПроизв].Вставить("П100000000013", СтрокаДекларации[ИдГруппы
								+ "13"]);
								// Расход (объем розничной продажи).
							ДанныеДвижений_ПоОП_ПоКоду[ИдКодПродПроизв].Вставить("П100000000014", СтрокаДекларации[ИдГруппы
								+ "14"]);
								// Прочий расход.
							ДанныеДвижений_ПоОП_ПоКоду[ИдКодПродПроизв].Вставить("П100000000015", СтрокаДекларации[ИдГруппы
								+ "15"]);
								// Возврат поставщику.
							ДанныеДвижений_ПоОП_ПоКоду[ИдКодПродПроизв].Вставить("П100000000016", СтрокаДекларации[ИдГруппы
								+ "16"]);
								// Расход всего.
							ДанныеДвижений_ПоОП_ПоКоду[ИдКодПродПроизв].Вставить("П100000000017", СтрокаДекларации[ИдГруппы
								+ "17"]);
								// Остаток продукции на конец отчетного периода - всего.
							ДанныеДвижений_ПоОП_ПоКоду[ИдКодПродПроизв].Вставить("П100000000018", СтрокаДекларации[ИдГруппы
								+ "18"]);
							
						КонецЕсли;

					КонецЕсли;

				КонецЕсли;

			КонецЕсли;

			Если НетОшибокПроверки и (ТекущееКоличествоОшибок > 0) Тогда
				НетОшибокПроверки = Ложь;
				ПроцентБезЗавершающейПроверкиДанных = 100;
				НужноОбработатьСтрок = НужноОбработатьСтрок / 2;
			КонецЕсли;

			Если ТекущееКоличествоОшибок > МаксимальноеКоличествоОшибок Тогда
				ОбработаноСтрок = НужноОбработатьСтрок;
				Возврат;
			КонецЕсли;

			// Информируем о ходе выполнения.
			Если (НужноОбработатьСтрок > 0) И (ОбработаноСтрок % ШагИнформирования = 0) Тогда

				РегламентированнаяОтчетностьАлко.СообщитьПроцентВыполнения("Проверка заполнения Раздел 1.", ОбработаноСтрок, НужноОбработатьСтрок, ПроцентБезЗавершающейПроверкиДанных, РежимОтладки);

			КонецЕсли;

		КонецЦикла;

		// Информируем о ходе выполнения.
		Если НужноОбработатьСтрок > 0 Тогда

			РегламентированнаяОтчетностьАлко.СообщитьПроцентВыполнения("Проверка заполнения Раздел 1.", ОбработаноСтрок, НужноОбработатьСтрок, ПроцентБезЗавершающейПроверкиДанных, РежимОтладки);

		КонецЕсли;

	КонецЦикла;

	Если ЕстьИдОП Тогда
		ДанныеОП["Раздел1"][ИдОП].Вставить("КолСтрокПоРазделу1", КолСтрокРаздел1);
	КонецЕсли;

КонецПроцедуры

Процедура ПроверитьЗаполнениеРаздел2(СтатусПроверки)

	ИмяРаздела = "Раздел2";
	СтрВКакомРазделе = "В Разделе 2";
	ПоказательОП = "ОбособленноеПодразделение";

	// Раздел 2 может не заполняться. 
	// Необходимость проверки определяется переменной ЕстьАктивныеСтрокиВТаблице.
	ИдГруппы = СтруктураРеквизитовФормы.мИдГруппы22;

	ДанныеРаздела = ТаблицаСтраницыРаздел2;
	
	ИмяРегистраСведений = ПолучитьИмяРегистраСведений(ИдГруппы);
	СервисРегистров = СтруктураСервисРегистров[ИмяРегистраСведений];

	НомерЛиста = 0;
	Для Каждого ЛистРаздела Из ДанныеРаздела Цикл

		НомерЛиста = НомерЛиста + 1;

		СтруктураСведенийПроверки = Новый Структура;
		СтруктураСведенийПроверки.Вставить("ПараметрыВыгрузки", ПараметрыВыгрузки);
		СтруктураСведенийПроверки.Вставить("ИмяРаздела", ИмяРаздела);
		СтруктураСведенийПроверки.Вставить("СтрВКакомРазделе", СтрВКакомРазделе);
		СтруктураСведенийПроверки.Вставить("НомерЛиста", НомерЛиста);
		СтруктураСведенийПроверки.Вставить("ЛистРаздела", ЛистРаздела);

		// Раздел 2 не обязателен к заполнению, но если есть заполненные строки при незаполненном ОП - нужно выдать ошибку.
		КолАктивныхСтрокНаСтранице = ПолучитьКоличествоСтрокПоСтраницеГруппы(ИдГруппы, НомерЛиста
			- 1, Истина);
		ЕстьАктивныеСтрокиВТаблице = (КолАктивныхСтрокНаСтранице > 0);

		СтруктураСведенийПроверки.Вставить("ПроверятьНаПустоту", ЕстьАктивныеСтрокиВТаблице);

		СтруктураСведенийПроверки.Вставить("ОписаниеСтруктурыАдресаИзОтчета", ОписаниеСтруктурыАдресаИзОтчета);
		
		СтруктураСведенийПроверки.Вставить("МаксимальноеКоличествоОшибок", МаксимальноеКоличествоОшибок);
		СтруктураСведенийПроверки.Вставить("ТекущееКоличествоОшибок", ТекущееКоличествоОшибок);
		СтруктураСведенийПроверки.Вставить("МаксимальноеКоличествоПредупреждений", МаксимальноеКоличествоПредупреждений);
		СтруктураСведенийПроверки.Вставить("ТекущееКоличествоПредупреждений", ТекущееКоличествоПредупреждений);

		СведенияОбОП = Неопределено;
		
		РегламентированнаяОтчетностьАЛКО.ВерноеЗаполнениеОП(ДокументСсылкаАлкоОтчет, ТаблицаСообщений, ТаблицаСообщенийДляСведения, СтатусПроверки, СтруктураСведенийПроверки, СведенияОбОП, РежимОтладки);

		СтруктураСведенийПроверки.Свойство("МаксимальноеКоличествоОшибок", МаксимальноеКоличествоОшибок);
		СтруктураСведенийПроверки.Свойство("ТекущееКоличествоОшибок", ТекущееКоличествоОшибок);
		СтруктураСведенийПроверки.Свойство("МаксимальноеКоличествоПредупреждений", МаксимальноеКоличествоПредупреждений);
		СтруктураСведенийПроверки.Свойство("ТекущееКоличествоПредупреждений", ТекущееКоличествоПредупреждений);
		
		СтрокаГде = РегламентированнаяОтчетностьАЛКО.СтрокаГдеСообщенийОбОшибках(СтрВКакомРазделе, НомерЛиста, Неопределено, Неопределено, РежимОтладки);

		ИндексСтраницыРегистраРаздел2 = СервисРегистров[НомерЛиста
			- 1].ИндексСтраницыРегистра;

		ИдОП = "";
		НужноПерекрестноПроверятьПроизводителей = Истина;

		Если ТипЗнч(ЛистРаздела.ДополнительныеДанные[0].Значение) = Тип("Структура")
				И ЛистРаздела.ДополнительныеДанные[0].Значение.Свойство("СведенияОбОП", СведенияОбОП) Тогда

			Если ЗначениеЗаполнено(СведенияОбОП.КПП)
					или ЗначениеЗаполнено(СведенияОбОП.Наименование) Тогда

				Наименование_ОП = СведенияОбОП.Наименование;
				КПП_ОП = СведенияОбОП.КПП;
				ИдОП = ИдентификаторОП(СведенияОбОП);

				// Контроль записей на уникальность в Разделе("КПП ОП" + "Наименование ОП").
				Если НЕ ДанныеОП["Раздел2"].Получить(ИдОП) = Неопределено Тогда

				// Такое ОП уже есть.
					ЛистПовтора = ДанныеОП["Раздел2"][ИдОП];
					ЛистПовтораСтроковый = РегламентированнаяОтчетностьАЛКОКлиентСервер.СтрокаЧГ0(ЛистПовтора);
					ТекстОписанияОшибки = СтрокаГде
						+ " обособленное подразделение повторяет заполненное на листе "
						+ ЛистПовтораСтроковый + "!
						|ОП: " + Наименование_ОП + ?(ПустаяСтрока(КПП_ОП), "", ", (КПП "
						+ КПП_ОП + ")")
						+ ?(НЕ ЗначениеЗаполнено(СведенияОбОП.ПредставлениеАдреса), "", "
						|Адрес: " + СведенияОбОП.ПредставлениеАдреса);

					СтруктураОшибки = Новый Структура;
					СтруктураОшибки.Вставить("ТекстОписанияОшибки", ТекстОписанияОшибки);
					СтруктураОшибки.Вставить("Раздел", ИмяРаздела);
					СтруктураОшибки.Вставить("Показатель", ПоказательОП);
					СтруктураОшибки.Вставить("ЛистРаздела", НомерЛиста);
					СтруктураОшибки.Вставить("ТипОшибки", "ПовторОП");

					СообщитьОбОшибкеЗаполнения(ДокументСсылкаАлкоОтчет, ТаблицаСообщений, СтатусПроверки, СтруктураОшибки,
												МаксимальноеКоличествоОшибок, ТекущееКоличествоОшибок);

				Иначе
					ДанныеОП["Раздел2"].Вставить(ИдОП, НомерЛиста);
				КонецЕсли;

				// Контроль на наличие в Разделе 1 всех ОП из Раздела 2.
				Если ДанныеОП["Раздел1"].Получить(ИдОП) = Неопределено Тогда
				// Такого ОП нет в Разделе 1.
					ТекстОписанияОшибки = СтрокаГде
						+ " заполнены данные по обособленному подразделению 
						|ОП: " + Наименование_ОП + ?(ПустаяСтрока(КПП_ОП), "", ", (КПП "
						+ КПП_ОП + ")")
						+ ?(НЕ ЗначениеЗаполнено(СведенияОбОП.ПредставлениеАдреса), "", "
						|Адрес: " + СведенияОбОП.ПредставлениеАдреса) + " 
						|но это обособленное подразделение не найдено в Разделе 1!";

					СтруктураОшибки = Новый Структура;
					СтруктураОшибки.Вставить("ТекстОписанияОшибки", ТекстОписанияОшибки);
					СтруктураОшибки.Вставить("Раздел", ИмяРаздела);
					СтруктураОшибки.Вставить("Показатель", ПоказательОП);
					СтруктураОшибки.Вставить("ЛистРаздела", НомерЛиста);
					СтруктураОшибки.Вставить("ТипОшибки", "НеНайденОП");

					СообщитьОбОшибкеЗаполнения(ДокументСсылкаАлкоОтчет, ТаблицаСообщений, СтатусПроверки, СтруктураОшибки,
												МаксимальноеКоличествоОшибок, ТекущееКоличествоОшибок);

					// ОП не найдено в Разделе 1 - непонятно со страницей какого ОП Раздела 1 сверять.
					НужноПерекрестноПроверятьПроизводителей = Ложь;

				Иначе
					ДанныеОП["Раздел1"][ИдОП].Вставить("НомерЛистаРаздел2", НомерЛиста);
					ДанныеОП["Раздел1"][ИдОП].Вставить("ИндексСтраницыРегистраРаздел2", ИндексСтраницыРегистраРаздел2);
				КонецЕсли;
			Иначе
			// ОП не заполнено - непонятно со страницей какого ОП Раздела 1 сверять.
				НужноПерекрестноПроверятьПроизводителей = Ложь;
			КонецЕсли;
		Иначе
		// ОП не заполнено - непонятно со страницей какого ОП Раздела 1 сверять.
			НужноПерекрестноПроверятьПроизводителей = Ложь;
		КонецЕсли;

		// Проверка заполнения таблиц декларации.
		Если ЕстьАктивныеСтрокиВТаблице Тогда

			ПроверитьЗаполнениеТаблицыРаздел2(СтатусПроверки, ИдГруппы, НомерЛиста, ИдОП, НужноПерекрестноПроверятьПроизводителей);

		КонецЕсли;

		Если НетОшибокПроверки и (ТекущееКоличествоОшибок > 0) Тогда

			НетОшибокПроверки = Ложь;
			ПроцентБезЗавершающейПроверкиДанных = 100;
			НужноОбработатьСтрок = НужноОбработатьСтрок / 2;

		КонецЕсли;

		Если ТекущееКоличествоОшибок > МаксимальноеКоличествоОшибок Тогда
			ОбработаноСтрок = НужноОбработатьСтрок;
			Возврат;
		КонецЕсли;
		
	КонецЦикла;

	// Проверяем контрольное соотношение Закупки итого (графа 10) по ОП 
	// по конкретному коду продукции и производителю/импортеру Раздела 1
	// должны соответствовать сумме накладных от поставщиков по тому же ОП
	// по конкретному коду продукции и производителю/импортеру Раздела 2.
	Если НетОшибокПроверки Тогда

		Для Каждого ЭлементОП Из ДанныеОП["Раздел1"] Цикл

			ИдОП = ЭлементОП.Ключ;
			СтруктураОП = ЭлементОП.Значение;

			ДанныеДвиженийПоОП = ДанныеДвижений[ИдОП];

			Для каждого ЭлементДвиженияПоОП Из ДанныеДвиженийПоОП Цикл

				КодВидаПродукцииКлюч = ЭлементДвиженияПоОП.Ключ;
				КодВидаПродукции = Сред(КодВидаПродукцииКлюч, 2);

				ДанныеДвижений_ПоОП_ПоКоду = ЭлементДвиженияПоОП.Значение["КодПродПроизв"];

				Для Каждого Элемент_ДанныеДвижений_ПоОП_ПоКоду Из ДанныеДвижений_ПоОП_ПоКоду Цикл

				// ИдКодПродПроизв	в Элемент_ДанныеДвижений_ПоОП_ПоКоду.Ключ.
					СтрокаСведенийОПроизводителеИмпортере = Элемент_ДанныеДвижений_ПоОП_ПоКоду.Значение;

					ПоступлениеПоРазделу2 = СтрокаСведенийОПроизводителеИмпортере["ПоступлениеПоРазделу2"];
					// Поступление (закупки) итого.
					ПоступлениеПоРазделу1 = СтрокаСведенийОПроизводителеИмпортере["П100000000010"];

					Если ПоступлениеПоРазделу1 <> ПоступлениеПоРазделу2 Тогда

					// Не совпадают данные по закупкам из Раздела 1 и сумма накладных по Разделу 2.
						// Заполняем сведения по ОП.
						СведенияОбОП = СтруктураОП["ОП"];

						ЭтоПБОЮЛ = ПараметрыВыгрузки.ЭтоПБОЮЛ;

						Если ЭтоПБОЮЛ Тогда
							ИНН_ОП = ПараметрыВыгрузки.ИННФЛ;
						Иначе
							ИНН_ОП = ПараметрыВыгрузки.ИННЮЛ;
						КонецЕсли;

						СтрОбособленноеПодразделение = РегламентированнаяОтчетностьАЛКОКлиентСервер.СформироватьОбособленноеПодразделениеАЛКО(СведенияОбОП, ЭтоПБОЮЛ, ИНН_ОП);

						НомерЛистаРаздел1 = СтруктураОП["НомерЛистаРаздел1"];
						НомерЛистаРаздел2 = СтруктураОП["НомерЛистаРаздел2"];

						НомерСтрокиРаздел1 = СтрокаСведенийОПроизводителеИмпортере["НомерСтрокиРаздел1"];
						НомерСтрокиРаздел1Строковый = РегламентированнаяОтчетностьАЛКОКлиентСервер.СтрокаЧГ0(НомерСтрокиРаздел1);

						// Указывать будем на поле итога в Разделе 1.
						Показатель = СтруктураРеквизитовФормы.мИдГруппы12 + "10_"
							+ НомерСтрокиРаздел1Строковый;

						ИдПроизв = СтрокаСведенийОПроизводителеИмпортере["ИдПроизв"];
						ПроизводительИмпортер = СправочникиОтчета["ПроизводителиИмпортеры"][ИдПроизв];

						НазваниеПроизводителя = ПроизводительИмпортер["П000000000004"];
						ИНН_Производителя = ПроизводительИмпортер["П000000000005"];
						КПП_Производителя = ПроизводительИмпортер["П000000000006"];

						СтрПроизводитель = РегламентированнаяОтчетностьАЛКОКлиентСервер.ПредставлениеОрганизации(НазваниеПроизводителя, ИНН_Производителя, КПП_Производителя);

						// Ошибку позиционируем в Раздел 1.
						СтрВКакомРазделе = "В Разделе 1";
						ИмяРаздела = "Раздел1";
						СтрокаГде = РегламентированнаяОтчетностьАЛКО.СтрокаГдеСообщенийОбОшибках(СтрВКакомРазделе, НомерЛистаРаздел1, НомерСтрокиРаздел1Строковый, "", РежимОтладки);

						ТекстОписанияОшибки = СтрокаГде
							+ " не совпадает значение по графе 10 ""Поступление - закупки - итого"" Раздела 1 и сумма объемов по накладным из Раздела 2!
							|Подробно:
							|ОП: " + СтрОбособленноеПодразделение + "
							|ОП на листе " + НомерЛистаРаздел1 + " Раздела 1, и на листе "
							+ НомерЛистаРаздел2 + " Раздела 2
							|Код продукции: " + КодВидаПродукции + "
							|Производитель/импортер: " + СтрПроизводитель + "
							|сумма по графе 10 Раздела 1 """
							+ Формат(ПоступлениеПоРазделу1, "ЧН=; ЧЦ=15; ЧДЦ=5")
							+ """, сумма по накладным Раздела 2 """
							+ Формат(ПоступлениеПоРазделу2, "ЧН=; ЧЦ=15; ЧДЦ=5") + """";

						СтруктураОшибки = Новый Структура;
						СтруктураОшибки.Вставить("ТекстОписанияОшибки", ТекстОписанияОшибки);
						СтруктураОшибки.Вставить("Раздел", ИмяРаздела);
						СтруктураОшибки.Вставить("Показатель", Показатель);
						СтруктураОшибки.Вставить("ЛистРаздела", НомерЛистаРаздел1);
						СтруктураОшибки.Вставить("ТипОшибки", "НеСовпадаетИтогЗакупок");

						СообщитьОбОшибкеЗаполнения(ДокументСсылкаАлкоОтчет, ТаблицаСообщенийДляСведения, , СтруктураОшибки,
													МаксимальноеКоличествоПредупреждений, ТекущееКоличествоПредупреждений);

					КонецЕсли;

				КонецЦикла;

			КонецЦикла;

		КонецЦикла;

	КонецЕсли;

КонецПроцедуры

Процедура ПроверитьЗаполнениеТаблицыРаздел2(СтатусПроверки, ИдГруппы,
		НомерЛиста, ИдОП = "",
		НужноПерекрестноПроверятьПроизводителей = Истина)

	ИндексСтраницы = НомерЛиста - 1;

	ИмяТаблицы = Неопределено;

	МетаданныеКонтрагенты = Метаданные.Справочники.Контрагенты;
	ЕстьСтранаРегистрации = ОбщегоНазначения.ЕстьРеквизитОбъекта("СтранаРегистрации", МетаданныеКонтрагенты);

	СтранаРоссия = Неопределено;
	Если ЕстьСтранаРегистрации Тогда
		СтранаРоссия = ПредопределенноеЗначение("Справочник.СтраныМира.Россия");
	КонецЕсли;

	ЕстьИдОП = НЕ ПустаяСтрока(СтрЗаменить(ИдОП, "\", ""));

	// Опеределим регистр сведений.
	ИмяРегистраСведений = ПолучитьИмяРегистраСведений(ИдГруппы);

	СервисРегистров = СтруктураСервисРегистров[ИмяРегистраСведений];
	ИндексСтраницыРегистра = СервисРегистров[ИндексСтраницы].ИндексСтраницыРегистра;
	ИДДокИндСтраницы = РегламентированнаяОтчетностьАЛКО.ПолучитьИдДокИндСтраницы(ДокументСсылкаАлкоОтчет, ИндексСтраницыРегистра);

	ДанныеДвиженийПоОП = Неопределено;
	Если НужноПерекрестноПроверятьПроизводителей И ЕстьИдОП Тогда
		ДанныеДвиженийПоОП = ДанныеДвижений[ИдОП];
		ДанныеОП["Раздел1"][ИдОП].Вставить("ИДДокИндСтраницыРаздел2", ИДДокИндСтраницы);
	КонецЕсли;

	ТекущийИндексСтроки = 0;
	КолСтрокРаздел2 = 0;

	// Зафиксируем имена ключевых полей.
	ИмяКодаВидаПродукции = ИдГруппы + "02";

	ИмяНаименованияПроизводителя = ИдГруппы + "03";
	ИмяИННПроизводителя = ИдГруппы + "04";
	ИмяКПППроизводителя = ИдГруппы + "05";

	ИмяНаименованияПоставщика = ИдГруппы + "06";
	ИмяИННПоставщика = ИдГруппы + "07";
	ИмяКПППоставщика = ИдГруппы + "08";

	ИмяДатыТТН = ИдГруппы + "09";
	ИмяНомерТТН = ИдГруппы + "10";
	ИмяНомерГТД = ИдГруппы + "11";
	ИмяОбъемПоТТН = ИдГруппы + "12";

	ИмяРаздела = "Раздел2";
	СтрВКакомРазделе = "В Разделе 2";
	КоличествоКолонокВРазделе = 12;
	
	КоличествоПервых = 1000;

	// Для получения в запросе сразу страны регистрации контрагента.
	СписокПолейКонтрагентов = Новый Массив;
	СписокПолейКонтрагентов.Добавить("ПроизводительИмпортер");
	СписокПолейКонтрагентов.Добавить("Поставщик");

	Пока Истина Цикл

		СтруктураНастроек = Новый Структура;
		СтруктураНастроек.Вставить("КоличествоПервых", КоличествоПервых);
		СтруктураНастроек.Вставить("ТекущийИндексСтроки", ТекущийИндексСтроки);
		СтруктураНастроек.Вставить("ЕстьСтранаРегистрации", ЕстьСтранаРегистрации);
		СтруктураНастроек.Вставить("СписокПолейКонтрагентов", СписокПолейКонтрагентов);

		РезЗапросаДанных = РегламентированнаяОтчетностьАЛКО.ЗаполнитьПоСтраницеРазделаАЛКО(ИдГруппы, ИндексСтраницы, СтруктураРеквизитовФормы, , ИДДокИндСтраницы, Ложь, СтруктураНастроек);

		Если РезЗапросаДанных.Количество() = 0 Тогда
			Прервать;
		КонецЕсли;

		Для каждого СтрокаДекларации Из РезЗапросаДанных Цикл

			НомерСтроки = СтрокаДекларации.ИндексСтроки;
			ТекущийИндексСтроки = СтрокаДекларации.ИндексСтроки;
			КолСтрокРаздел2 = КолСтрокРаздел2 + 1;

			НомерСтрокиСтроковый = РегламентированнаяОтчетностьАЛКОКлиентСервер.СтрокаЧГ0(НомерСтроки);

			СтрокаЗаполнена = РегламентированнаяОтчетностьАЛКО.СтрокаДекларацииЗаполнена(СтрокаДекларации, ИдГруппы, КоличествоКолонокВРазделе);

			СтрокаГде = РегламентированнаяОтчетностьАЛКО.СтрокаГдеСообщенийОбОшибках(СтрВКакомРазделе, НомерЛиста, НомерСтрокиСтроковый, ИмяТаблицы, РежимОтладки);

			Если НЕ СтрокаЗаполнена Тогда

				ТекстОписанияОшибки = СтрокаГде + " не заполнено ни одно поле!";

				ИмяПоказателя = ИмяКодаВидаПродукции + "_" + НомерСтрокиСтроковый;

				СтруктураОшибки = Новый Структура;
				СтруктураОшибки.Вставить("ТекстОписанияОшибки", ТекстОписанияОшибки);
				СтруктураОшибки.Вставить("Раздел", ИмяРаздела);
				СтруктураОшибки.Вставить("Показатель", ИмяПоказателя);
				СтруктураОшибки.Вставить("ЛистРаздела", НомерЛиста);
				СтруктураОшибки.Вставить("ТипОшибки", "ПустаяСтрока");

				СообщитьОбОшибкеЗаполнения(ДокументСсылкаАлкоОтчет, ТаблицаСообщений, СтатусПроверки, СтруктураОшибки,
											МаксимальноеКоличествоОшибок, ТекущееКоличествоОшибок);

				Продолжить;
			КонецЕсли;

			ОбработаноСтрок = ОбработаноСтрок + 1;

			ИмяПоказателя = ИмяКодаВидаПродукции + "_" + НомерСтрокиСтроковый;
			КодВидаПродукции = СокрЛП(СтрокаДекларации[ИмяКодаВидаПродукции]);

			СтруктураИнформацииВидаПродукции = Новый Структура;

			СтруктураИнформацииВидаПродукции.Вставить("ИмяПоказателя", ИмяПоказателя);
			СтруктураИнформацииВидаПродукции.Вставить("ИмяРаздела", ИмяРаздела);
			СтруктураИнформацииВидаПродукции.Вставить("НомерЛиста", НомерЛиста);
			СтруктураИнформацииВидаПродукции.Вставить("СписокКодов", СписокКодовПродукции);
			СтруктураИнформацииВидаПродукции.Вставить("СтрокаГде", СтрокаГде);
			СтруктураИнформацииВидаПродукции.Вставить("СтрВКакомРазделе", СтрВКакомРазделе);
			СтруктураИнформацииВидаПродукции.Вставить("НомерСтрокиСтроковый", НомерСтрокиСтроковый);
			СтруктураИнформацииВидаПродукции.Вставить("ИмяТаблицы", ИмяТаблицы);
			
			СтруктураИнформацииВидаПродукции.Вставить("МаксимальноеКоличествоОшибок", МаксимальноеКоличествоОшибок);
			СтруктураИнформацииВидаПродукции.Вставить("ТекущееКоличествоОшибок", ТекущееКоличествоОшибок);
			СтруктураИнформацииВидаПродукции.Вставить("МаксимальноеКоличествоПредупреждений", МаксимальноеКоличествоПредупреждений);
			СтруктураИнформацииВидаПродукции.Вставить("ТекущееКоличествоПредупреждений", ТекущееКоличествоПредупреждений);

			РегламентированнаяОтчетностьАЛКО.ВерныйКодВидаПродукции(ДокументСсылкаАлкоОтчет, ТаблицаСообщений, ТаблицаСообщенийДляСведения, СтатусПроверки, КодВидаПродукции, СтруктураИнформацииВидаПродукции, РежимОтладки);

			СтруктураИнформацииВидаПродукции.Свойство("МаксимальноеКоличествоОшибок", МаксимальноеКоличествоОшибок);
			СтруктураИнформацииВидаПродукции.Свойство("ТекущееКоличествоОшибок", ТекущееКоличествоОшибок);
			СтруктураИнформацииВидаПродукции.Свойство("МаксимальноеКоличествоПредупреждений", МаксимальноеКоличествоПредупреждений);
			СтруктураИнформацииВидаПродукции.Свойство("ТекущееКоличествоПредупреждений", ТекущееКоличествоПредупреждений);

			////////////////////////////////////////////////////////////////////////////////
			// Контроль Наименования-ИНН-КПП производителя-импортера.
			ИмяПоказателяНаименования = ИмяНаименованияПроизводителя + "_"
				+ НомерСтрокиСтроковый;
			НаименованиеПроизводителя = СокрЛП(СтрокаДекларации[ИмяНаименованияПроизводителя]);

			ИмяПоказателяИНН = ИмяИННПроизводителя + "_" + НомерСтрокиСтроковый;
			ИННПроизводителя = СокрЛП(СтрокаДекларации[ИмяИННПроизводителя]);

			ИмяПоказателяКПП = ИмяКПППроизводителя + "_" + НомерСтрокиСтроковый;
			КПППроизводителя = СокрЛП(СтрокаДекларации[ИмяКПППроизводителя]);

			РодПадежЧейИННКПП = "производителя/импортера";

			СтранаРегистрации = ?(ЕстьСтранаРегистрации, 
								СтрокаДекларации["СтранаРегистрацииПроизводительИмпортер"], "");
			
			РоссийскийРезидент = Ложь;
			РезидентЕАЭС = Ложь;
				
			РегламентированнаяОтчетностьАЛКО.ОпределитьПринадлежностьЕАЭСиРФ(ИННПроизводителя, КПППроизводителя, НаименованиеПроизводителя, 
											СтранаРегистрации, РоссийскийРезидент, РезидентЕАЭС, РежимОтладки);

			МожетБытьПустойИНН = Ложь;
			МожетБытьПустойКПП = Истина;
			КонтрольОП = Ложь;
			РоссийскийТолькоЮЛ = Неопределено;
			РоссийскийТолькоФЛ = Неопределено;
			
			ТолькоЕАЭС = Ложь;
			ТолькоРФ = Ложь;
			МинДлинаИННпоXSD = 1;
			МаксДлинаИННпоXSD = 20;
			
			КПП56СимволыМогутБытьБуквами = Ложь;
			ИННLiteТип = Ложь;
			КППLiteТип = Истина;

			СтруктураСведенийИННКПП = Новый Структура;

			СтруктураСведенийИННКПП.Вставить("ИмяРаздела", ИмяРаздела);

			СтруктураСведенийИННКПП.Вставить("СтрокаГде", СтрокаГде);
			СтруктураСведенийИННКПП.Вставить("СтрВКакомРазделе", СтрВКакомРазделе);
			СтруктураСведенийИННКПП.Вставить("НомерСтрокиСтроковый", НомерСтрокиСтроковый);
			СтруктураСведенийИННКПП.Вставить("ИмяТаблицы", ИмяТаблицы);

			СтруктураСведенийИННКПП.Вставить("НомерЛиста", НомерЛиста);
			СтруктураСведенийИННКПП.Вставить("КонтрольОП", КонтрольОП);

			СтруктураСведенийИННКПП.Вставить("ИмяПоказателяНаименования", ИмяПоказателяНаименования);
			СтруктураСведенийИННКПП.Вставить("Наименование", НаименованиеПроизводителя);

			СтруктураСведенийИННКПП.Вставить("ИмяПоказателяИНН", ИмяПоказателяИНН);
			СтруктураСведенийИННКПП.Вставить("ИНН", ИННПроизводителя);
			СтруктураСведенийИННКПП.Вставить("ИмяПоказателяКПП", ИмяПоказателяКПП);
			СтруктураСведенийИННКПП.Вставить("КПП", КПППроизводителя);
			СтруктураСведенийИННКПП.Вставить("РодПадежЧейИННКПП", РодПадежЧейИННКПП);

			СтруктураСведенийИННКПП.Вставить("МожетБытьПустойИНН", МожетБытьПустойИНН);
			СтруктураСведенийИННКПП.Вставить("МожетБытьПустойКПП", МожетБытьПустойКПП);

			СтруктураСведенийИННКПП.Вставить("РоссийскийТолькоЮЛ", РоссийскийТолькоЮЛ);
			СтруктураСведенийИННКПП.Вставить("РоссийскийТолькоФЛ", РоссийскийТолькоФЛ);
			СтруктураСведенийИННКПП.Вставить("КПП56СимволыМогутБытьБуквами", КПП56СимволыМогутБытьБуквами);
			СтруктураСведенийИННКПП.Вставить("ИННLiteТип", ИННLiteТип);
			СтруктураСведенийИННКПП.Вставить("КППLiteТип", КППLiteТип);
			
			СтруктураСведенийИННКПП.Вставить("МаксимальноеКоличествоОшибок", МаксимальноеКоличествоОшибок);
			СтруктураСведенийИННКПП.Вставить("ТекущееКоличествоОшибок", ТекущееКоличествоОшибок);
			СтруктураСведенийИННКПП.Вставить("МаксимальноеКоличествоПредупреждений", МаксимальноеКоличествоПредупреждений);
			СтруктураСведенийИННКПП.Вставить("ТекущееКоличествоПредупреждений", ТекущееКоличествоПредупреждений);

			КодСтраны = ?(ЗначениеЗаполнено(СтранаРегистрации), СтранаРегистрации.Код, "");
			СтруктураСведенийИННКПП.Вставить("КодСтраны", КодСтраны);
			СтруктураСведенийИННКПП.Вставить("ТолькоЕАЭС", ТолькоЕАЭС);
			СтруктураСведенийИННКПП.Вставить("ТолькоРФ", ТолькоРФ); 
			СтруктураСведенийИННКПП.Вставить("МаксДлинаИННпоXSD", МаксДлинаИННпоXSD); 	// По умолчанию 20.
			СтруктураСведенийИННКПП.Вставить("МинДлинаИННпоXSD", МинДлинаИННпоXSD);		// По умолчанию 1.
			
			РегламентированнаяОтчетностьАЛКО.ВерныеНаименованиеИННКПП(ДокументСсылкаАлкоОтчет, 
					ТаблицаСообщений, ТаблицаСообщенийДляСведения, СтатусПроверки, СтруктураСведенийИННКПП, 
					РоссийскийРезидент, РежимОтладки);

			СтруктураСведенийИННКПП.Свойство("МаксимальноеКоличествоОшибок", МаксимальноеКоличествоОшибок);
			СтруктураСведенийИННКПП.Свойство("ТекущееКоличествоОшибок", ТекущееКоличествоОшибок);
			СтруктураСведенийИННКПП.Свойство("МаксимальноеКоличествоПредупреждений", МаксимальноеКоличествоПредупреждений);
			СтруктураСведенийИННКПП.Свойство("ТекущееКоличествоПредупреждений", ТекущееКоличествоПредупреждений);

			//
			////////////////////////////////////////////////////////////////////////////////

			////////////////////////////////////////////////////////////////////////////////
			// Контроль Наименования-ИНН-КПП поставщика.
			ИмяПоказателяНаименования = ИмяНаименованияПоставщика + "_"
				+ НомерСтрокиСтроковый;
			НаименованиеПоставщика = СокрЛП(СтрокаДекларации[ИмяНаименованияПоставщика]);

			ИмяПоказателяИНН = ИмяИННПоставщика + "_" + НомерСтрокиСтроковый;
			ИННПоставщика = СокрЛП(СтрокаДекларации[ИмяИННПоставщика]);

			ИмяПоказателяКПП = ИмяКПППоставщика + "_" + НомерСтрокиСтроковый;
			КПППоставщика = СокрЛП(СтрокаДекларации[ИмяКПППоставщика]);

			РодПадежЧейИННКПП = "поставщика";
			
			СтранаРегистрации = ?(ЕстьСтранаРегистрации, 
								СтрокаДекларации["СтранаРегистрацииПоставщик"], "");
								
			РоссийскийРезидент = Ложь;
			РезидентЕАЭС = Ложь;
				
			РегламентированнаяОтчетностьАЛКО.ОпределитьПринадлежностьЕАЭСиРФ(ИННПоставщика, КПППоставщика, НаименованиеПоставщика, 
											СтранаРегистрации, РоссийскийРезидент, РезидентЕАЭС, РежимОтладки);

			МожетБытьПустойИНН = Ложь;
			МожетБытьПустойКПП = Истина;
			КонтрольОП = Ложь;
			РоссийскийТолькоЮЛ = Неопределено;
			РоссийскийТолькоФЛ = Неопределено;
			
			ТолькоЕАЭС = Ложь;
			ТолькоРФ = Ложь;
			МинДлинаИННпоXSD = 1;
			МаксДлинаИННпоXSD = 20;
			
			КПП56СимволыМогутБытьБуквами = Ложь;
			ИННLiteТип = Ложь;
			КППLiteТип = Истина;

			СтруктураСведенийИННКПП = Новый Структура;

			СтруктураСведенийИННКПП.Вставить("ИмяРаздела", ИмяРаздела);

			СтруктураСведенийИННКПП.Вставить("СтрокаГде", СтрокаГде);
			СтруктураСведенийИННКПП.Вставить("СтрВКакомРазделе", СтрВКакомРазделе);
			СтруктураСведенийИННКПП.Вставить("НомерСтрокиСтроковый", НомерСтрокиСтроковый);
			СтруктураСведенийИННКПП.Вставить("ИмяТаблицы", ИмяТаблицы);

			СтруктураСведенийИННКПП.Вставить("НомерЛиста", НомерЛиста);
			СтруктураСведенийИННКПП.Вставить("КонтрольОП", КонтрольОП);

			СтруктураСведенийИННКПП.Вставить("ИмяПоказателяНаименования", ИмяПоказателяНаименования);
			СтруктураСведенийИННКПП.Вставить("Наименование", НаименованиеПоставщика);

			СтруктураСведенийИННКПП.Вставить("ИмяПоказателяИНН", ИмяПоказателяИНН);
			СтруктураСведенийИННКПП.Вставить("ИНН", ИННПоставщика);
			СтруктураСведенийИННКПП.Вставить("ИмяПоказателяКПП", ИмяПоказателяКПП);
			СтруктураСведенийИННКПП.Вставить("КПП", КПППоставщика);
			СтруктураСведенийИННКПП.Вставить("РодПадежЧейИННКПП", РодПадежЧейИННКПП);

			СтруктураСведенийИННКПП.Вставить("МожетБытьПустойИНН", МожетБытьПустойИНН);
			СтруктураСведенийИННКПП.Вставить("МожетБытьПустойКПП", МожетБытьПустойКПП);

			СтруктураСведенийИННКПП.Вставить("РоссийскийТолькоЮЛ", РоссийскийТолькоЮЛ);
			СтруктураСведенийИННКПП.Вставить("РоссийскийТолькоФЛ", РоссийскийТолькоФЛ);
			СтруктураСведенийИННКПП.Вставить("КПП56СимволыМогутБытьБуквами", КПП56СимволыМогутБытьБуквами);
			СтруктураСведенийИННКПП.Вставить("ИННLiteТип", ИННLiteТип);
			СтруктураСведенийИННКПП.Вставить("КППLiteТип", КППLiteТип);
			
			СтруктураСведенийИННКПП.Вставить("МаксимальноеКоличествоОшибок", МаксимальноеКоличествоОшибок);
			СтруктураСведенийИННКПП.Вставить("ТекущееКоличествоОшибок", ТекущееКоличествоОшибок);
			СтруктураСведенийИННКПП.Вставить("МаксимальноеКоличествоПредупреждений", МаксимальноеКоличествоПредупреждений);
			СтруктураСведенийИННКПП.Вставить("ТекущееКоличествоПредупреждений", ТекущееКоличествоПредупреждений);

			КодСтраны = ?(ЗначениеЗаполнено(СтранаРегистрации), СтранаРегистрации.Код, "");
			СтруктураСведенийИННКПП.Вставить("КодСтраны", КодСтраны);
			СтруктураСведенийИННКПП.Вставить("ТолькоЕАЭС", ТолькоЕАЭС);
			СтруктураСведенийИННКПП.Вставить("ТолькоРФ", ТолькоРФ); 
			СтруктураСведенийИННКПП.Вставить("МаксДлинаИННпоXSD", МаксДлинаИННпоXSD); 	// По умолчанию 20.
			СтруктураСведенийИННКПП.Вставить("МинДлинаИННпоXSD", МинДлинаИННпоXSD);		// По умолчанию 1.
			
			НетПроблемИННКПППоставщика = РегламентированнаяОтчетностьАЛКО.ВерныеНаименованиеИННКПП(ДокументСсылкаАлкоОтчет,
						ТаблицаСообщений, ТаблицаСообщенийДляСведения, СтатусПроверки, СтруктураСведенийИННКПП, 
						РоссийскийРезидент, РежимОтладки);

			СтруктураСведенийИННКПП.Свойство("МаксимальноеКоличествоОшибок", МаксимальноеКоличествоОшибок);
			СтруктураСведенийИННКПП.Свойство("ТекущееКоличествоОшибок", ТекущееКоличествоОшибок);
			СтруктураСведенийИННКПП.Свойство("МаксимальноеКоличествоПредупреждений", МаксимальноеКоличествоПредупреждений);
			СтруктураСведенийИННКПП.Свойство("ТекущееКоличествоПредупреждений", ТекущееКоличествоПредупреждений);
			
			//
			////////////////////////////////////////////////////////////////////////////////
						
			////////////////////////////////////////////////////////////////////////////////
			// Контроль ТТН.
			ЗаполненаТТН = Ложь;

			ТипНакладной = "ТТН"; // ТипНакладной для Уведомления "Уведомление".
			ОбязателенКЗаполнению = Истина;

			СтруктураСведенийНакладной = Новый Структура;

			СтруктураСведенийНакладной.Вставить("ИмяРаздела", ИмяРаздела);
			СтруктураСведенийНакладной.Вставить("СтрВКакомРазделе", СтрВКакомРазделе);
			СтруктураСведенийНакладной.Вставить("НомерЛиста", НомерЛиста);
			СтруктураСведенийНакладной.Вставить("СтрокаГде", СтрокаГде);
			СтруктураСведенийНакладной.Вставить("НомерСтрокиСтроковый", НомерСтрокиСтроковый);
			СтруктураСведенийНакладной.Вставить("ИмяТаблицы", ИмяТаблицы);

			СтруктураСведенийНакладной.Вставить("ИмяДатыТТН", ИмяДатыТТН + "_"
				+ НомерСтрокиСтроковый);
			СтруктураСведенийНакладной.Вставить("ДатаТТН", СтрокаДекларации[ИмяДатыТТН]);
			СтруктураСведенийНакладной.Вставить("ИмяНомерТТН", ИмяНомерТТН + "_"
				+ НомерСтрокиСтроковый);
			СтруктураСведенийНакладной.Вставить("НомерТТН", СтрокаДекларации[ИмяНомерТТН]);
			СтруктураСведенийНакладной.Вставить("ИмяНомерГТД", ИмяНомерГТД + "_"
				+ НомерСтрокиСтроковый);
			СтруктураСведенийНакладной.Вставить("НомерГТД", СтрокаДекларации[ИмяНомерГТД]);
			СтруктураСведенийНакладной.Вставить("ИмяОбъемПоТТН", ИмяОбъемПоТТН + "_"
				+ НомерСтрокиСтроковый);
			СтруктураСведенийНакладной.Вставить("ОбъемПоТТН", СтрокаДекларации[ИмяОбъемПоТТН]);

			СтруктураСведенийНакладной.Вставить("ДатаНачалаОтчета", ДатаНачалаОтчета);
			СтруктураСведенийНакладной.Вставить("ДатаКонцаОтчета", ДатаКонцаОтчета);
			СтруктураСведенийНакладной.Вставить("НижняяГраницаДатыПоXSD", НижняяГраницаДатыПоXSD);
			СтруктураСведенийНакладной.Вставить("ВерхняяГраницаДатыПоXSD", ВерхняяГраницаДатыПоXSD);

			СтруктураСведенийНакладной.Вставить("Обязательный", ОбязателенКЗаполнению);

			СтруктураСведенийНакладной.Вставить("МаксимальноеКоличествоОшибок", МаксимальноеКоличествоОшибок);
			СтруктураСведенийНакладной.Вставить("ТекущееКоличествоОшибок", ТекущееКоличествоОшибок);
			СтруктураСведенийНакладной.Вставить("МаксимальноеКоличествоПредупреждений", МаксимальноеКоличествоПредупреждений);
			СтруктураСведенийНакладной.Вставить("ТекущееКоличествоПредупреждений", ТекущееКоличествоПредупреждений);

			РегламентированнаяОтчетностьАЛКО.ВернаяНакладная(ДокументСсылкаАлкоОтчет, ТаблицаСообщений, ТаблицаСообщенийДляСведения, СтатусПроверки, СтруктураСведенийНакладной, ТипНакладной, ЗаполненаТТН, РежимОтладки);

			СтруктураСведенийНакладной.Свойство("МаксимальноеКоличествоОшибок", МаксимальноеКоличествоОшибок);
			СтруктураСведенийНакладной.Свойство("ТекущееКоличествоОшибок", ТекущееКоличествоОшибок);
			СтруктураСведенийНакладной.Свойство("МаксимальноеКоличествоПредупреждений", МаксимальноеКоличествоПредупреждений);
			СтруктураСведенийНакладной.Свойство("ТекущееКоличествоПредупреждений", ТекущееКоличествоПредупреждений);
			
			//
			////////////////////////////////////////////////////////////////////////////////

			// Расчета в разделе 2 нет. Проверка на отсутствие отрицательных чисел - при проверке ТТН. 
			
			////////////////////////////////////////////////////////////////////////////////
			// Контроль по наличию Производителей/Импортеров из Раздела 2 в Разделе 1.
			НетОшибкиПоКодуПродукцииПроизводителю = Истина;

			Если НужноПерекрестноПроверятьПроизводителей Тогда

				ИдКодПродПроизв = "Х" + СтрокаДекларации.ХешИдКодПродПроизв;

				Если НЕ ПустаяСтрока(КодВидаПродукции) Тогда

				// Ведущие нули в строке вызывают ошибку при попытке назначения ключем.
					КодВидаПродукцииКлюч = "Х" + КодВидаПродукции;

					Если ДанныеДвиженийПоОП.Получить(КодВидаПродукцииКлюч) = Неопределено Тогда
						НетОшибкиПоКодуПродукцииПроизводителю = Ложь;
					Иначе
						ДанныеДвиженийПоОП[КодВидаПродукцииКлюч]["КоличествоСтрокРаздел2ПоКоду"] = 
								ДанныеДвиженийПоОП[КодВидаПродукцииКлюч]["КоличествоСтрокРаздел2ПоКоду"] + 1;
						ДанныеДвижений_ПоОП_ПоКоду = ДанныеДвиженийПоОП[КодВидаПродукцииКлюч]["КодПродПроизв"];
					КонецЕсли;

					Если НетОшибкиПоКодуПродукцииПроизводителю Тогда
						Если ДанныеДвижений_ПоОП_ПоКоду.Получить(ИдКодПродПроизв) = Неопределено Тогда
							НетОшибкиПоКодуПродукцииПроизводителю = Ложь;
						Иначе
						// Заполняем вспомогательные данные. 
							ДанныеДвижений_ПоОП_ПоКоду[ИдКодПродПроизв]["КоличествоСтрокРаздел2ПоКодПродПроизв"] = 
								ДанныеДвижений_ПоОП_ПоКоду[ИдКодПродПроизв]["КоличествоСтрокРаздел2ПоКодПродПроизв"] + 1;
							ДанныеДвижений_ПоОП_ПоКоду[ИдКодПродПроизв]["ПоступлениеПоРазделу2"] = 
								ДанныеДвижений_ПоОП_ПоКоду[ИдКодПродПроизв]["ПоступлениеПоРазделу2"]
								+ ?(СтрокаДекларации[ИмяОбъемПоТТН] > 0, СтрокаДекларации[ИмяОбъемПоТТН], 0);
						КонецЕсли;
					КонецЕсли;

					Если НЕ НетОшибкиПоКодуПродукцииПроизводителю Тогда

					// Нет по текущему коду продукции такого производителя в Разделе 1 по тому же ОП.
						ТекстОписанияОшибки = СтрокаГде + " указан Производитель/Импортер "
							+ НаименованиеПроизводителя + " ("
							+ ?(ПустаяСтрока(ИННПроизводителя), "ИНН незаполнен", "ИНН "
							+ ИННПроизводителя) + ?(ПустаяСтрока(КПППроизводителя), "", ", КПП "
							+ КПППроизводителя)
							+ "), которого нет по тому же обособленному подразделению в Разделе 1 для кода продукции "
							+ КодВидаПродукции + ".";

						СтруктураОшибки = Новый Структура;

						СтруктураОшибки.Вставить("ТекстОписанияОшибки", ТекстОписанияОшибки);
						СтруктураОшибки.Вставить("Раздел", ИмяРаздела);
						СтруктураОшибки.Вставить("Показатель", ИмяПоказателяНаименования);
						СтруктураОшибки.Вставить("ЛистРаздела", НомерЛиста);
						СтруктураОшибки.Вставить("ТипОшибки", "НетСочетанияКодПроизводительРаздел2");

						СообщитьОбОшибкеЗаполнения(ДокументСсылкаАлкоОтчет, ТаблицаСообщений, СтатусПроверки, СтруктураОшибки,
													МаксимальноеКоличествоОшибок, ТекущееКоличествоОшибок);

					КонецЕсли;

				КонецЕсли;

			КонецЕсли;

			//
			////////////////////////////////////////////////////////////////////////////////

			// Заполняем справочники Поставщиков и Лицензий поставщиков.
			Если НужноПерекрестноПроверятьПроизводителей
					и (ТекущееКоличествоОшибок = 0) Тогда

				ИдПоставщика = "Х" + СтрокаДекларации.ХешИдПоставщика;

				Если СправочникиОтчета["Поставщики"].Получить(ИдПоставщика) = Неопределено Тогда

					СчетчикИдПоставщиков = СчетчикИдПоставщиков + 1;

					СправочникиОтчета["Поставщики"].Вставить(ИдПоставщика, Новый Соответствие);

					СправочникиОтчета["Поставщики"][ИдПоставщика].Вставить("ИдПостав", СчетчикИдПоставщиков);
					СправочникиОтчета["Поставщики"][ИдПоставщика].Вставить("П000000000007", НаименованиеПоставщика);
					СправочникиОтчета["Поставщики"][ИдПоставщика].Вставить("П000000000009", ИННПоставщика);
					СправочникиОтчета["Поставщики"][ИдПоставщика].Вставить("П000000000010", КПППоставщика);
					
				КонецЕсли;

				ТекущийПоставщик = СправочникиОтчета["Поставщики"][ИдПоставщика];

				Если ДанныеДвижений_ПоОП_ПоКоду[ИдКодПродПроизв]["Поставщики"].Получить(ИдПоставщика) = Неопределено Тогда

					ДанныеДвижений_ПоОП_ПоКоду[ИдКодПродПроизв]["Поставщики"].Вставить(ИдПоставщика, Новый Соответствие);

					СтруктураПоставщика = ДанныеДвижений_ПоОП_ПоКоду[ИдКодПродПроизв]["Поставщики"][ИдПоставщика];

					СтруктураПоставщика.Вставить("ХешИдПоставщика", СтрокаДекларации.ХешИдПоставщика);
					СтруктураПоставщика.Вставить("ИдПоставщика", ТекущийПоставщик["ИдПостав"]);
					
				КонецЕсли;
				
			КонецЕсли;

			Если НетОшибокПроверки и (ТекущееКоличествоОшибок > 0) Тогда
				НетОшибокПроверки = Ложь;
				ПроцентБезЗавершающейПроверкиДанных = 100;
				НужноОбработатьСтрок = НужноОбработатьСтрок / 2;
			КонецЕсли;

			Если ТекущееКоличествоОшибок > МаксимальноеКоличествоОшибок Тогда
				ОбработаноСтрок = НужноОбработатьСтрок;
				Возврат;
			КонецЕсли;

			// Информируем о ходе выполнения.
			Если (НужноОбработатьСтрок > 0) И (ОбработаноСтрок % ШагИнформирования = 0) Тогда

				РегламентированнаяОтчетностьАлко.СообщитьПроцентВыполнения("Проверка заполнения Раздел 2.", ОбработаноСтрок, НужноОбработатьСтрок, ПроцентБезЗавершающейПроверкиДанных, РежимОтладки);

			КонецЕсли;

		КонецЦикла;

		// Информируем о ходе выполнения.
		Если НужноОбработатьСтрок > 0 Тогда

			РегламентированнаяОтчетностьАлко.СообщитьПроцентВыполнения("Проверка заполнения Раздел 2.", 
					ОбработаноСтрок, НужноОбработатьСтрок, ПроцентБезЗавершающейПроверкиДанных, РежимОтладки);

		КонецЕсли;

	КонецЦикла;

	Если НужноПерекрестноПроверятьПроизводителей Тогда
		ДанныеОП["Раздел1"][ИдОП].Вставить("КолСтрокПоРазделу2", КолСтрокРаздел2);
	КонецЕсли;

КонецПроцедуры

Функция ОтчетЗаполненКорректно()

	СтатусПроверки = Истина;

	ПроверитьЗаполнениеТитульный(СтатусПроверки);
	
	Если ТекущееКоличествоОшибок < МаксимальноеКоличествоОшибок Тогда

	// информируем о ходе выполнения				
		Если НужноОбработатьСтрок > 0 Тогда

			РегламентированнаяОтчетностьАлко.СообщитьПроцентВыполнения("Проверка заполнения Раздел 1.", 
					ОбработаноСтрок, НужноОбработатьСтрок, ПроцентБезЗавершающейПроверкиДанных, РежимОтладки);

		КонецЕсли;

		ПроверитьЗаполнениеРаздел1(СтатусПроверки);

	КонецЕсли;

	Если ТекущееКоличествоОшибок < МаксимальноеКоличествоОшибок Тогда

	// информируем о ходе выполнения				
		Если НужноОбработатьСтрок > 0 Тогда

			РегламентированнаяОтчетностьАлко.СообщитьПроцентВыполнения("Проверка заполнения Раздел 2.", 
					ОбработаноСтрок, НужноОбработатьСтрок, ПроцентБезЗавершающейПроверкиДанных, РежимОтладки);

		КонецЕсли;
		ПроверитьЗаполнениеРаздел2(СтатусПроверки);

	КонецЕсли;

	КолСтрокПриПроверкеЗаполнения = ОбработаноСтрок;

	Возврат СтатусПроверки;

КонецФункции

Процедура ОтсечьНезаполненныеНеобязательныеУзлы(Узел)
	
	РегламентированнаяОтчетностьАЛКО.ОтсечьНезаполненныеНеобязательныеУзлыАЛКО(Узел);
	
КонецПроцедуры

Процедура ОбработатьУсловныеЭлементы(Знач ПараметрыВыгрузки, Узел)
	
	РегламентированнаяОтчетностьАЛКО.ОбработатьУсловныеЭлементыАЛКО(ПараметрыВыгрузки, Узел, 
						ДокументСсылкаАлкоОтчет, ТаблицаСообщений, СтатусПроверки, ВерсияБСПЧислом);
	
КонецПроцедуры

Функция ПолучитьПодчиненныйЭлемент(Узел, КодЭлемента)
	
	Возврат РегламентированнаяОтчетностьАЛКО.ПолучитьПодчиненныйЭлементАЛКО(Узел, КодЭлемента);
	
КонецФункции 

Функция НовыйУзелИзПрототипа(ПрототипУзла)
	
	Возврат РегламентированнаяОтчетностьАЛКО.НовыйУзелИзПрототипаАЛКО(ПрототипУзла);
	
КонецФункции

Процедура УстановитьЗначениеЭлемента(УзелРодитель, ИмяЭлемента, ЗначениеЭлемента)
	
	РегламентированнаяОтчетностьАЛКО.УстановитьЗначениеЭлементаАЛКО(УзелРодитель, ИмяЭлемента, ЗначениеЭлемента);
	
КонецПроцедуры

Функция ИдентификаторОП(СведенияОП)
	
	Возврат РегламентированнаяОтчетностьАЛКО.ИдентификаторОП_АЛКО(СведенияОП);
	
КонецФункции

Процедура ВывестиПоказательВXML(Узел, ЗначениеПоказателя)
	
	РегламентированнаяОтчетностьАЛКО.ВывестиПоказательВXML_АЛКО(Узел, ЗначениеПоказателя);
	
КонецПроцедуры

Функция ПроверитьДанные(Узел)
	
	Возврат РегламентированнаяОтчетностьАЛКО.ПроверитьДанныеАЛКО(Узел, 
							ДокументСсылкаАлкоОтчет, ТаблицаСообщений, СтатусПроверки);
		
КонецФункции


Процедура ЗаполнитьСправочникиДекларации(УзелСправочники)
	
	ПрототипУзла_ПроизводителиИмпортеры = ПолучитьПодчиненныйЭлемент(УзелСправочники, "ПроизводителиИмпортеры");
	
	Для Каждого ЭлементСправочникиПроизводителиИмпортеры Из СправочникиОтчета["ПроизводителиИмпортеры"] Цикл
		
		СтрокаПроизводителяИмпортера = ЭлементСправочникиПроизводителиИмпортеры.Значение;
		
		Узел_ПроизводителиИмпортеры = НовыйУзелИзПрототипа(ПрототипУзла_ПроизводителиИмпортеры);
		
		УстановитьЗначениеЭлемента(Узел_ПроизводителиИмпортеры, "ИДПроизвИмп", СтрокаПроизводителяИмпортера["ИДПроизвИмп"]);
		УстановитьЗначениеЭлемента(Узел_ПроизводителиИмпортеры, "П000000000004", СтрокаПроизводителяИмпортера["П000000000004"]);
		
		УказанИНН = НЕ ПустаяСтрока(СтрокаПроизводителяИмпортера["П000000000005"]);
		УказанКПП = НЕ ПустаяСтрока(СтрокаПроизводителяИмпортера["П000000000006"]);
		
		Узел_ЮЛ = ПолучитьПодчиненныйЭлемент(Узел_ПроизводителиИмпортеры, "ЮЛ");
		Узел_ФЛ = ПолучитьПодчиненныйЭлемент(Узел_ПроизводителиИмпортеры, "ФЛ");
		Если УказанКПП Тогда
			УстановитьЗначениеЭлемента(Узел_ЮЛ, "П000000000005", СтрокаПроизводителяИмпортера["П000000000005"]);
			УстановитьЗначениеЭлемента(Узел_ЮЛ, "П000000000006", СтрокаПроизводителяИмпортера["П000000000006"]);
			РегламентированнаяОтчетность.УдалитьУзел(Узел_ФЛ);
		Иначе			
			УстановитьЗначениеЭлемента(Узел_ФЛ, "П000000000005", СтрокаПроизводителяИмпортера["П000000000005"]);
			РегламентированнаяОтчетность.УдалитьУзел(Узел_ЮЛ);
		КонецЕсли;
		
	КонецЦикла;
	
	СправочникиОтчета["ПроизводителиИмпортеры"].Очистить();
	
	РегламентированнаяОтчетность.УдалитьУзел(ПрототипУзла_ПроизводителиИмпортеры);
	
	ПрототипУзла_Поставщики = ПолучитьПодчиненныйЭлемент(УзелСправочники, "Поставщики");
	
	Для Каждого ЭлементСправочникиПоставщики Из СправочникиОтчета["Поставщики"] Цикл
		
		СтрокаПоставщика = ЭлементСправочникиПоставщики.Значение;
		
		Узел_Поставщики = НовыйУзелИзПрототипа(ПрототипУзла_Поставщики);
		
		УстановитьЗначениеЭлемента(Узел_Поставщики, "ИдПостав", СтрокаПоставщика["ИдПостав"]);
		УстановитьЗначениеЭлемента(Узел_Поставщики, "П000000000007", СтрокаПоставщика["П000000000007"]);
		
		УказанКПП = НЕ ПустаяСтрока(СтрокаПоставщика["П000000000010"]);
		
		Узел_ЮЛ = ПолучитьПодчиненныйЭлемент(Узел_Поставщики, "ЮЛ");
		Узел_ФЛ = ПолучитьПодчиненныйЭлемент(Узел_Поставщики, "ФЛ");
		Если УказанКПП Тогда
			УстановитьЗначениеЭлемента(Узел_ЮЛ, "П000000000009", СтрокаПоставщика["П000000000009"]);
			УстановитьЗначениеЭлемента(Узел_ЮЛ, "П000000000010", СтрокаПоставщика["П000000000010"]);
			РегламентированнаяОтчетность.УдалитьУзел(Узел_ФЛ);
		Иначе			
			УстановитьЗначениеЭлемента(Узел_ФЛ, "П000000000009", СтрокаПоставщика["П000000000009"]);
			РегламентированнаяОтчетность.УдалитьУзел(Узел_ЮЛ);
		КонецЕсли;
		
	КонецЦикла;
	
	СправочникиОтчета["Поставщики"].Очистить();	
	
	РегламентированнаяОтчетность.УдалитьУзел(ПрототипУзла_Поставщики);
	
КонецПроцедуры

Процедура ЗаполнитьСведенияДекларации(НовыйУзелОбъемОборота, ИдОП, ИДДокИндСтраницыРаздел2)
		
	ТекстЗапросаРаздел2 = "ВЫБРАТЬ
		|	РегистрСведенийАлкоПрил12Раздел2.Документ,
		|	РегистрСведенийАлкоПрил12Раздел2.ИндексСтроки,
		|	РегистрСведенийАлкоПрил12Раздел2.ИДДокИндСтраницы,
		|	РегистрСведенийАлкоПрил12Раздел2.П000020000301,
		|	РегистрСведенийАлкоПрил12Раздел2.П000020000302,
		|	РегистрСведенийАлкоПрил12Раздел2.П000020000303,
		|	РегистрСведенийАлкоПрил12Раздел2.П000020000304,
		|	РегистрСведенийАлкоПрил12Раздел2.П000020000305,
		|	РегистрСведенийАлкоПрил12Раздел2.П000020000306,
		|	РегистрСведенийАлкоПрил12Раздел2.П000020000307,
		|	РегистрСведенийАлкоПрил12Раздел2.П000020000308,
		|	РегистрСведенийАлкоПрил12Раздел2.П000020000309,
		|	РегистрСведенийАлкоПрил12Раздел2.П000020000310,
		|	РегистрСведенийАлкоПрил12Раздел2.П000020000311,
		|	РегистрСведенийАлкоПрил12Раздел2.П000020000312,
		|	РегистрСведенийАлкоПрил12Раздел2.Активно,
		|	РегистрСведенийАлкоПрил12Раздел2.ХешИдКодПродПроизв КАК ХешИдКодПродПроизв,
		|	РегистрСведенийАлкоПрил12Раздел2.ХешИдПоставщика
		|ИЗ
		|	РегистрСведений.СведенияРеглОтчетАлкоПрил12Раздел2 КАК РегистрСведенийАлкоПрил12Раздел2
		|ГДЕ
		|	РегистрСведенийАлкоПрил12Раздел2.ИДДокИндСтраницы = &ИДДокИндСтраницы
		|	И РегистрСведенийАлкоПрил12Раздел2.Активно = ИСТИНА	                      
		|
		|УПОРЯДОЧИТЬ ПО
		|	ХешИдКодПродПроизв,
		|	ХешИдПоставщика";
								  
	ТекстЗапросаРаздел2_КодПрод = "ВЫБРАТЬ
		|	РегистрСведенийАлкоПрил12Раздел2.Документ,
		|	РегистрСведенийАлкоПрил12Раздел2.ИндексСтроки,
		|	РегистрСведенийАлкоПрил12Раздел2.ИДДокИндСтраницы,
		|	РегистрСведенийАлкоПрил12Раздел2.П000020000301,
		|	РегистрСведенийАлкоПрил12Раздел2.П000020000302,
		|	РегистрСведенийАлкоПрил12Раздел2.П000020000303,
		|	РегистрСведенийАлкоПрил12Раздел2.П000020000304,
		|	РегистрСведенийАлкоПрил12Раздел2.П000020000305,
		|	РегистрСведенийАлкоПрил12Раздел2.П000020000306,
		|	РегистрСведенийАлкоПрил12Раздел2.П000020000307,
		|	РегистрСведенийАлкоПрил12Раздел2.П000020000308,
		|	РегистрСведенийАлкоПрил12Раздел2.П000020000309,
		|	РегистрСведенийАлкоПрил12Раздел2.П000020000310,
		|	РегистрСведенийАлкоПрил12Раздел2.П000020000311,
		|	РегистрСведенийАлкоПрил12Раздел2.П000020000312,
		|	РегистрСведенийАлкоПрил12Раздел2.Активно,
		|	РегистрСведенийАлкоПрил12Раздел2.ХешИдКодПродПроизв КАК ХешИдКодПродПроизв,
		|	РегистрСведенийАлкоПрил12Раздел2.ХешИдПоставщика
		|ИЗ
		|	РегистрСведений.СведенияРеглОтчетАлкоПрил12Раздел2 КАК РегистрСведенийАлкоПрил12Раздел2
		|ГДЕ
		|	РегистрСведенийАлкоПрил12Раздел2.ИДДокИндСтраницы = &ИДДокИндСтраницы
		|	И РегистрСведенийАлкоПрил12Раздел2.П000020000302 = &КодПродукции
		|	И РегистрСведенийАлкоПрил12Раздел2.Активно = ИСТИНА	                              
		|
		|УПОРЯДОЧИТЬ ПО
		|	ХешИдКодПродПроизв,
		|	ХешИдПоставщика";
	
	ТекстЗапросаРаздел2_КодПрод_Произв = "ВЫБРАТЬ
		|	РегистрСведенийАлкоПрил12Раздел2.Документ,
		|	РегистрСведенийАлкоПрил12Раздел2.ИндексСтроки,
		|	РегистрСведенийАлкоПрил12Раздел2.ИДДокИндСтраницы,
		|	РегистрСведенийАлкоПрил12Раздел2.П000020000301,
		|	РегистрСведенийАлкоПрил12Раздел2.П000020000302,
		|	РегистрСведенийАлкоПрил12Раздел2.П000020000303,
		|	РегистрСведенийАлкоПрил12Раздел2.П000020000304,
		|	РегистрСведенийАлкоПрил12Раздел2.П000020000305,
		|	РегистрСведенийАлкоПрил12Раздел2.П000020000306,
		|	РегистрСведенийАлкоПрил12Раздел2.П000020000307,
		|	РегистрСведенийАлкоПрил12Раздел2.П000020000308,
		|	РегистрСведенийАлкоПрил12Раздел2.П000020000309,
		|	РегистрСведенийАлкоПрил12Раздел2.П000020000310,
		|	РегистрСведенийАлкоПрил12Раздел2.П000020000311,
		|	РегистрСведенийАлкоПрил12Раздел2.П000020000312,
		|	РегистрСведенийАлкоПрил12Раздел2.Активно,
		|	РегистрСведенийАлкоПрил12Раздел2.ХешИдКодПродПроизв,
		|	РегистрСведенийАлкоПрил12Раздел2.ХешИдПоставщика
		|ИЗ
		|	РегистрСведений.СведенияРеглОтчетАлкоПрил12Раздел2 КАК РегистрСведенийАлкоПрил12Раздел2
		|ГДЕ
		|	РегистрСведенийАлкоПрил12Раздел2.ИДДокИндСтраницы = &ИДДокИндСтраницы
		|	И РегистрСведенийАлкоПрил12Раздел2.ХешИдКодПродПроизв = &ХешИдКодПродПроизв
		|	И РегистрСведенийАлкоПрил12Раздел2.Активно = ИСТИНА	                                     
		|
		|УПОРЯДОЧИТЬ ПО
		|	ХешИдПоставщика";
	
	ТекстЗапросаРаздел2_КодПрод_Произв_Поставщик = "ВЫБРАТЬ
		|	РегистрСведенийАлкоПрил12Раздел2.*
		|ИЗ
		|	РегистрСведений.СведенияРеглОтчетАлкоПрил12Раздел2 КАК РегистрСведенийАлкоПрил12Раздел2
		|ГДЕ
		|	РегистрСведенийАлкоПрил12Раздел2.ИДДокИндСтраницы = &ИДДокИндСтраницы
		|	И РегистрСведенийАлкоПрил12Раздел2.ХешИдКодПродПроизв = &ХешИдКодПродПроизв
		|	И РегистрСведенийАлкоПрил12Раздел2.ХешИдПоставщика = &ХешИдПоставщика
		|	И РегистрСведенийАлкоПрил12Раздел2.Активно = ИСТИНА";
	
	ЗапросРаздел2 = Новый Запрос;
		
	КолСтрокПоРазделу2 = ДанныеОП["Раздел1"][ИдОП]["КолСтрокПоРазделу2"];
	
	// Стандартно 3000.
	Лимит = 3000;
	
	ЗапросПоРазделу2НеВыполнен = Истина;
	Если (ВсегоСтрокПоРазделу1 + КолСтрокПоРазделу2 <= Лимит)
			или (КолСтрокПоРазделу2 <= Цел(Лимит/2)) Тогда

			// Есть смысл сразу рассчитать.
		ЗапросРаздел2.Текст = ТекстЗапросаРаздел2;
		ЗапросРаздел2.Параметры.Вставить("ИДДокИндСтраницы", ИДДокИндСтраницыРаздел2);

		ТаблицаЗапроса = ЗапросРаздел2.Выполнить().Выгрузить();
		// Очищаем.
		ЗапросРаздел2 = Новый Запрос;
		// Выставляем признак.
		ЗапросПоРазделу2НеВыполнен = Ложь;
		
		ТаблицаЗапроса.Индексы.Добавить("ХешИдКодПродПроизв, ХешИдПоставщика"); 

	КонецЕсли; 
		
	ОбразецУзлаОборот = ПолучитьПодчиненныйЭлемент(НовыйУзелОбъемОборота, "Оборот");
	
	ДанныеДвиженийПоОП = ДанныеДвижений[ИдОП];
	
	НомерППКодаВидаПродукции = 0;
	
	Для Каждого ЭлементДвиженияПоОП Из ДанныеДвиженийПоОП Цикл
	
		КодВидаПродукцииКлюч = ЭлементДвиженияПоОП.Ключ;
		КодВидаПродукции = Сред(КодВидаПродукцииКлюч, 2);
		
	    НовыйУзелОборот = НовыйУзелИзПрототипа(ОбразецУзлаОборот);
		
		НомерППКодаВидаПродукции = НомерППКодаВидаПродукции + 1;
		
		УстановитьЗначениеЭлемента(НовыйУзелОборот, "ПN", НомерППКодаВидаПродукции);
		УстановитьЗначениеЭлемента(НовыйУзелОборот, "П000000000003", КодВидаПродукции);
		
		ОбразецУзлаСведПроизвИмпорт = ПолучитьПодчиненныйЭлемент(НовыйУзелОборот, "СведПроизвИмпорт");
		
		КоличествоСтрокРаздел2ПоКоду = ЭлементДвиженияПоОП.Значение["КоличествоСтрокРаздел2ПоКоду"];

		ЗапросПоКодуНеВыполнен = Истина;

		Если ЗапросПоРазделу2НеВыполнен и ((ВсегоСтрокПоРазделу1
				+ КоличествоСтрокРаздел2ПоКоду <= Лимит)
				или (КоличествоСтрокРаздел2ПоКоду <= Цел(Лимит/2))) Тогда

				// Есть смысл сразу рассчитать.
			ЗапросРаздел2.Текст = ТекстЗапросаРаздел2_КодПрод;
			ЗапросРаздел2.Параметры.Вставить("ИДДокИндСтраницы", ИДДокИндСтраницыРаздел2);
			ЗапросРаздел2.Параметры.Вставить("КодПродукции", КодВидаПродукции);
			ТаблицаЗапроса = ЗапросРаздел2.Выполнить().Выгрузить();
			// Очищаем.
			ЗапросРаздел2 = Новый Запрос;
			// Выставляем признак.
			ЗапросПоКодуНеВыполнен = Ложь;
			
			ТаблицаЗапроса.Индексы.Добавить("ХешИдКодПродПроизв, ХешИдПоставщика");

		КонецЕсли;

		ДанныеДвижений_ПоОП_ПоКоду = ЭлементДвиженияПоОП.Значение["КодПродПроизв"];

		НомерППСведенийОПроизводителеИмпортере = 0;

		Для Каждого Элемент_ДанныеДвижений_ПоОП_ПоКоду Из ДанныеДвижений_ПоОП_ПоКоду Цикл

			ИдКодПродПроизв = Элемент_ДанныеДвижений_ПоОП_ПоКоду.Ключ;
			ХешИдКодПродПроизв = Сред(ИдКодПродПроизв, 2);

			СтрокаСведенийОПроизводителеИмпортере = Элемент_ДанныеДвижений_ПоОП_ПоКоду.Значение;

			КоличествоСтрокРаздел2ПоКодПродПроизв = СтрокаСведенийОПроизводителеИмпортере["КоличествоСтрокРаздел2ПоКодПродПроизв"];

			ЗапросПоКодуПроизводителюНеВыполнен = Истина;
			Если ЗапросПоРазделу2НеВыполнен и ЗапросПоКодуНеВыполнен
					и ((ВсегоСтрокПоРазделу1
					+ КоличествоСтрокРаздел2ПоКодПродПроизв <= Лимит)
					или (КоличествоСтрокРаздел2ПоКодПродПроизв <= Цел(Лимит/2))) Тогда

				ЗапросРаздел2.Текст = ТекстЗапросаРаздел2_КодПрод_Произв;
				ЗапросРаздел2.Параметры.Вставить("ИДДокИндСтраницы", ИДДокИндСтраницыРаздел2);
				ЗапросРаздел2.Параметры.Вставить("ХешИдКодПродПроизв", ХешИдКодПродПроизв);
				ТаблицаЗапроса = ЗапросРаздел2.Выполнить().Выгрузить();
				// Очищаем.
				ЗапросРаздел2 = Новый Запрос;
				// Выставляем признак.
				ЗапросПоКодуПроизводителюНеВыполнен = Ложь;
				
				ТаблицаЗапроса.Индексы.Добавить("ХешИдКодПродПроизв, ХешИдПоставщика");

			КонецЕсли;

			НовыйУзелСведПроизвИмпорт = НовыйУзелИзПрототипа(ОбразецУзлаСведПроизвИмпорт);

			НомерППСведенийОПроизводителеИмпортере = НомерППСведенийОПроизводителеИмпортере
				+ 1;
			 
			ИдПроизвИмп = СтрокаСведенийОПроизводителеИмпортере["ИдПроизвИмп"];

			УстановитьЗначениеЭлемента(НовыйУзелСведПроизвИмпорт, "ПN", НомерППСведенийОПроизводителеИмпортере);
			УстановитьЗначениеЭлемента(НовыйУзелСведПроизвИмпорт, "ИдПроизвИмп", ИдПроизвИмп);

			// Сведения о поставщиках.
			ОбразецУзлаПоставщик = ПолучитьПодчиненныйЭлемент(НовыйУзелСведПроизвИмпорт, "Поставщик");

			Поставщики = СтрокаСведенийОПроизводителеИмпортере["Поставщики"];
			НомерПППоставщика = 0;

			Для Каждого ЭлементПоставщика Из Поставщики Цикл
			
				НовыйУзелПоставщик = НовыйУзелИзПрототипа(ОбразецУзлаПоставщик);
				
				НомерПППоставщика = НомерПППоставщика + 1;
				
				СтруктураПоставщика = ЭлементПоставщика.Значение;
								
				ИдПоставщика = СтруктураПоставщика["ИдПоставщика"];
				ХешИдПоставщика = СтруктураПоставщика["ХешИдПоставщика"];
				
				УстановитьЗначениеЭлемента(НовыйУзелПоставщик, "ПN", НомерПППоставщика);
				УстановитьЗначениеЭлемента(НовыйУзелПоставщик, "ИдПоставщика", ИдПоставщика);
				
				// Сведения о поставках продукции.
				ОбразецУзлаПродукция = ПолучитьПодчиненныйЭлемент(НовыйУзелПоставщик, "Продукция");
				
				Если ЗапросПоРазделу2НеВыполнен и ЗапросПоКодуНеВыполнен
						и ЗапросПоКодуПроизводителюНеВыполнен Тогда
				
					// Выполняем запрос	по поставщику.
					ЗапросРаздел2.Текст = ТекстЗапросаРаздел2_КодПрод_Произв_Поставщик;
					ЗапросРаздел2.Параметры.Вставить("ИДДокИндСтраницы", 	ИДДокИндСтраницыРаздел2);
				    ЗапросРаздел2.Параметры.Вставить("ХешИдКодПродПроизв", 	ХешИдКодПродПроизв);
					ЗапросРаздел2.Параметры.Вставить("ХешИдПоставщика", 	ХешИдПоставщика);
					ТаблицаЗапроса = ЗапросРаздел2.Выполнить().Выгрузить();
					НайденныеСтроки = ТаблицаЗапроса;
					// Очищаем.
					ЗапросРаздел2 = Новый Запрос;
					
				ИначеЕсли НЕ ЗапросПоКодуПроизводителюНеВыполнен Тогда
					
					// Отбираем строки по поставщику,
					// отберется только один Поставщик.
					УсловияОтбора = Новый Структура;
					УсловияОтбора.Вставить("ХешИдПоставщика", ХешИдПоставщика);
					НайденныеСтроки = ТаблицаЗапроса.НайтиСтроки(УсловияОтбора);
					
				Иначе
					
					// Был запрос по Разделу2 по данному ОП или запрос по коду продукции из Раздела2 по данному ОП
					// отбор для этих запросов одинаковый, поскольку ХешИдКодПродПроизв включает пару Код-Производитель
					// и отдельно отбирать по коду не надо.
					// Отбираем строки связанному ИдКодПродПроизводителя и ИдПоставщика.					
				    УсловияОтбора = Новый Структура;
					УсловияОтбора.Вставить("ХешИдКодПродПроизв", 	ХешИдКодПродПроизв);
					УсловияОтбора.Вставить("ХешИдПоставщика", 		ХешИдПоставщика);
					НайденныеСтроки = ТаблицаЗапроса.НайтиСтроки(УсловияОтбора);
									
				КонецЕсли; 
				
				Для Каждого СтрокаПродукции Из НайденныеСтроки Цикл
				
					НовыйУзелПродукция = НовыйУзелИзПрототипа(ОбразецУзлаПродукция);
					
					УстановитьЗначениеЭлемента(НовыйУзелПродукция, "П200000000013", СтрокаПродукции.П000020000309);
					УстановитьЗначениеЭлемента(НовыйУзелПродукция, "П200000000014", СтрокаПродукции.П000020000310);
					УстановитьЗначениеЭлемента(НовыйУзелПродукция, "П200000000015", СтрокаПродукции.П000020000311);
					УстановитьЗначениеЭлемента(НовыйУзелПродукция, "П200000000016", СтрокаПродукции.П000020000312);
										
					ОбработаноСтрок = ОбработаноСтрок + 1;
					
				КонецЦикла; 
				
				// Удаляем отработанные строки.
				Если ЗапросПоРазделу2НеВыполнен И ЗапросПоКодуНеВыполнен
					И ЗапросПоКодуПроизводителюНеВыполнен Тогда
						// НайденныеСтроки и есть ТаблицаЗапроса.
					ТаблицаЗапроса.Очистить();
				Иначе
					Для Каждого СтрокаПродукции Из НайденныеСтроки Цикл
						ТаблицаЗапроса.Удалить(СтрокаПродукции);
					КонецЦикла;
				КонецЕсли;
				
				НайденныеСтроки = Неопределено;				
				РегламентированнаяОтчетность.УдалитьУзел(ОбразецУзлаПродукция);
				
				Поставщики.Удалить(ЭлементПоставщика.Ключ);
			
			КонецЦикла;
			
			РегламентированнаяОтчетность.УдалитьУзел(ОбразецУзлаПоставщик);
			СтрокаСведенийОПроизводителеИмпортере.Удалить("Поставщики");
			
			// Сведения о движениях.
			ОбразецУзлаДвижение = ПолучитьПодчиненныйЭлемент(НовыйУзелСведПроизвИмпорт, "Движение");
			
			// Движение по связке Код продукции - производитель/импортер может быть только одно
			НомерППДвижения = 1;
			НовыйУзелДвижение = НовыйУзелИзПрототипа(ОбразецУзлаДвижение);
		    УстановитьЗначениеЭлемента(НовыйУзелДвижение, "ПN", НомерППДвижения);
			
			УстановитьЗначениеЭлемента(НовыйУзелДвижение, "П100000000006", СтрокаСведенийОПроизводителеИмпортере["П100000000006"]);
			УстановитьЗначениеЭлемента(НовыйУзелДвижение, "П100000000007", СтрокаСведенийОПроизводителеИмпортере["П100000000007"]);
			УстановитьЗначениеЭлемента(НовыйУзелДвижение, "П100000000008", СтрокаСведенийОПроизводителеИмпортере["П100000000008"]);
			УстановитьЗначениеЭлемента(НовыйУзелДвижение, "П100000000009", СтрокаСведенийОПроизводителеИмпортере["П100000000009"]);
			УстановитьЗначениеЭлемента(НовыйУзелДвижение, "П100000000010", СтрокаСведенийОПроизводителеИмпортере["П100000000010"]);
			УстановитьЗначениеЭлемента(НовыйУзелДвижение, "П100000000011", СтрокаСведенийОПроизводителеИмпортере["П100000000011"]);
			УстановитьЗначениеЭлемента(НовыйУзелДвижение, "П100000000012", СтрокаСведенийОПроизводителеИмпортере["П100000000012"]);
			УстановитьЗначениеЭлемента(НовыйУзелДвижение, "П100000000013", СтрокаСведенийОПроизводителеИмпортере["П100000000013"]);
			УстановитьЗначениеЭлемента(НовыйУзелДвижение, "П100000000014", СтрокаСведенийОПроизводителеИмпортере["П100000000014"]);
			УстановитьЗначениеЭлемента(НовыйУзелДвижение, "П100000000015", СтрокаСведенийОПроизводителеИмпортере["П100000000015"]);
			УстановитьЗначениеЭлемента(НовыйУзелДвижение, "П100000000016", СтрокаСведенийОПроизводителеИмпортере["П100000000016"]);
			УстановитьЗначениеЭлемента(НовыйУзелДвижение, "П100000000017", СтрокаСведенийОПроизводителеИмпортере["П100000000017"]);
			УстановитьЗначениеЭлемента(НовыйУзелДвижение, "П100000000018", СтрокаСведенийОПроизводителеИмпортере["П100000000018"]);
			
			ОбработаноСтрок = ОбработаноСтрок + 1;
			
			РегламентированнаяОтчетность.УдалитьУзел(ОбразецУзлаДвижение);
			
			ДанныеДвижений_ПоОП_ПоКоду.Удалить(ИдКодПродПроизв);
			
		КонецЦикла;
				
		РегламентированнаяОтчетность.УдалитьУзел(ОбразецУзлаСведПроизвИмпорт);
		ДанныеДвиженийПоОП.Удалить(КодВидаПродукцииКлюч);
		
		// информируем о ходе выполнения				
		Если НужноОбработатьСтрок > 0 Тогда
			
			РегламентированнаяОтчетностьАлко.СообщитьПроцентВыполнения("Заполнение данными дерева выгрузки.", 
					ОбработаноСтрок, НужноОбработатьСтрок, ПроцентБезЗавершающейПроверкиДанных, РежимОтладки);
			
		КонецЕсли;
	
	КонецЦикла; 
	
	РегламентированнаяОтчетность.УдалитьУзел(ОбразецУзлаОборот);
		
КонецПроцедуры

Процедура ЗаполнитьСодержательнуюЧасть(УзелРодитель, КорневойУзел,
		ПараметрыВыгрузки)

	УзелСправочники = ПолучитьПодчиненныйЭлемент(КорневойУзел, "Справочники");
	Узел_Документ = УзелРодитель;

	Узел_Организация = ПолучитьПодчиненныйЭлемент(Узел_Документ, "Организация");
	
	ПрототипУзла_ОбъемОборота = ПолучитьПодчиненныйЭлемент(Узел_Документ, "ОбъемОборота");

	Для Каждого ЭлементОП Из ДанныеОП["Раздел1"] Цикл

		ИдОП = ЭлементОП.Ключ;
		СтруктураОП = ЭлементОП.Значение;

		СведенияОбОП = СтруктураОП["ОП"];

		ИДДокИндСтраницыРаздел2 = Строка(СтруктураОП["ИДДокИндСтраницыРаздел2"]);

		// Заполняем сведения по ОП.
		НазваниеОрганизации = СведенияОбОП.Наименование;
		КПП = СведенияОбОП.КПП;

		Если ПустаяСтрока(НазваниеОрганизации) И ПустаяСтрока(КПП) Тогда
			Продолжить;
		КонецЕсли;

		Узел_ОбъемОборота = НовыйУзелИзПрототипа(ПрототипУзла_ОбъемОборота);

		Узел_Наим = ПолучитьПодчиненныйЭлемент(Узел_ОбъемОборота, "Наим");
		Если НЕ Узел_Наим = Неопределено Тогда
			// формат 4.31.
			УстановитьЗначениеЭлемента(Узел_ОбъемОборота, "Наим", НазваниеОрганизации);		
		КонецЕсли;
		
		Узел_НаимЮЛ = ПолучитьПодчиненныйЭлемент(Узел_ОбъемОборота, "НаимЮЛ");
		Если НЕ Узел_НаимЮЛ = Неопределено Тогда
			// формат 4.30.
			УстановитьЗначениеЭлемента(Узел_ОбъемОборота, "НаимЮЛ", НазваниеОрганизации);		
		КонецЕсли;

		Если ЗначениеЗаполнено(КПП) Тогда
			УстановитьЗначениеЭлемента(Узел_ОбъемОборота, "КППЮЛ", КПП);
		КонецЕсли;

		Узел_АдрОрг = ПолучитьПодчиненныйЭлемент(Узел_ОбъемОборота, "АдрОрг");
		УстановитьЗначениеЭлемента(Узел_АдрОрг, "КодСтраны", СведенияОбОП.КодСтраны);
		УстановитьЗначениеЭлемента(Узел_АдрОрг, "Индекс", СведенияОбОП.Индекс);
		УстановитьЗначениеЭлемента(Узел_АдрОрг, "КодРегион", СведенияОбОП.КодРегиона);
		УстановитьЗначениеЭлемента(Узел_АдрОрг, "Район", СведенияОбОП.Район);
		УстановитьЗначениеЭлемента(Узел_АдрОрг, "Город", СведенияОбОП.Город);
		УстановитьЗначениеЭлемента(Узел_АдрОрг, "НаселПункт", СведенияОбОП.НаселенныйПункт);
		УстановитьЗначениеЭлемента(Узел_АдрОрг, "Улица", СведенияОбОП.Улица);
		УстановитьЗначениеЭлемента(Узел_АдрОрг, "Дом", СведенияОбОП.Дом);
		УстановитьЗначениеЭлемента(Узел_АдрОрг, "Корпус", СведенияОбОП.Корпус);
		УстановитьЗначениеЭлемента(Узел_АдрОрг, "Литера", СведенияОбОП.Литера);
		УстановитьЗначениеЭлемента(Узел_АдрОрг, "Кварт", СведенияОбОП.Квартира);

		ЗаполнитьСведенияДекларации(Узел_ОбъемОборота, ИдОП, ИДДокИндСтраницыРаздел2);

		Узел_Оборот = ПолучитьПодчиненныйЭлемент(Узел_ОбъемОборота, "Оборот");
		ЕстьОборот = (Узел_Оборот <> Неопределено);
		УстановитьЗначениеЭлемента(Узел_ОбъемОборота, "НаличиеОборота", ?(ЕстьОборот, "true", "false"));

	КонецЦикла;

	// Для пустой декларации надо выгрузить хотя бы один узел ОбъемОборота.
	// В качестве ОП - сама организация.
	Если ДанныеОП["Раздел1"].Количество() = 0 Тогда

	// Заполняем сведения по ОП.
		НазваниеОрганизации = ПараметрыВыгрузки.НаимЮЛ;
		КПП = "";
		ПараметрыВыгрузки.Свойство("КППЮЛ", КПП);

		Узел_ОбъемОборота = НовыйУзелИзПрототипа(ПрототипУзла_ОбъемОборота);

		Узел_Наим = ПолучитьПодчиненныйЭлемент(Узел_ОбъемОборота, "Наим");
		Если НЕ Узел_Наим = Неопределено Тогда
			// формат 4.31.
			УстановитьЗначениеЭлемента(Узел_ОбъемОборота, "Наим", НазваниеОрганизации);		
		КонецЕсли;
		
		Узел_НаимЮЛ = ПолучитьПодчиненныйЭлемент(Узел_ОбъемОборота, "НаимЮЛ");
		Если НЕ Узел_НаимЮЛ = Неопределено Тогда
			// формат 4.30.
			УстановитьЗначениеЭлемента(Узел_ОбъемОборота, "НаимЮЛ", НазваниеОрганизации);		
		КонецЕсли;

		Если ЗначениеЗаполнено(КПП) Тогда
			УстановитьЗначениеЭлемента(Узел_ОбъемОборота, "КППЮЛ", КПП);
		КонецЕсли;

		АдресОрганизации = ПараметрыВыгрузки.АдресОрганизации;
		Узел_АдрОрг = ПолучитьПодчиненныйЭлемент(Узел_ОбъемОборота, "АдрОрг");
		УстановитьЗначениеЭлемента(Узел_АдрОрг, "КодСтраны", АдресОрганизации.КодСтраны);
		УстановитьЗначениеЭлемента(Узел_АдрОрг, "Индекс", АдресОрганизации.Индекс);
		УстановитьЗначениеЭлемента(Узел_АдрОрг, "КодРегион", АдресОрганизации.КодРегиона);
		УстановитьЗначениеЭлемента(Узел_АдрОрг, "Район", АдресОрганизации.Район);
		УстановитьЗначениеЭлемента(Узел_АдрОрг, "Город", АдресОрганизации.Город);
		УстановитьЗначениеЭлемента(Узел_АдрОрг, "НаселПункт", АдресОрганизации.НаселенныйПункт);
		УстановитьЗначениеЭлемента(Узел_АдрОрг, "Улица", АдресОрганизации.Улица);
		УстановитьЗначениеЭлемента(Узел_АдрОрг, "Дом", АдресОрганизации.Дом);
		УстановитьЗначениеЭлемента(Узел_АдрОрг, "Корпус", АдресОрганизации.Корпус);
		УстановитьЗначениеЭлемента(Узел_АдрОрг, "Литера", АдресОрганизации.Литера);
		УстановитьЗначениеЭлемента(Узел_АдрОрг, "Кварт", АдресОрганизации.Квартира);

		УстановитьЗначениеЭлемента(Узел_ОбъемОборота, "НаличиеОборота", "false");

	КонецЕсли;

	РегламентированнаяОтчетность.УдалитьУзел(ПрототипУзла_ОбъемОборота);

	ЗаполнитьСправочникиДекларации(УзелСправочники);

	КолСтрокЗаполнено = ОбработаноСтрок - КолСтрокПриПроверкеЗаполнения;

	Если КолСтрокЗаполнено <> КолСтрокПриПроверкеЗаполнения Тогда

	// Выгружено не то количество, что есть по данным заполнения отчета.
		ТекстОписанияОшибки = "В выгрузку попало меньшее количество строк, чем заполнено по разделам Раздел 1 и Раздел 2!
			|Немедленно свяжитесь с техподдержкой, желательно выслать выгрузку 
			|Вашей информационной базы в виде файла .dt";

		СтруктураОшибки = Новый Структура;
		СтруктураОшибки.Вставить("ТекстОписанияОшибки", ТекстОписанияОшибки);
		СтруктураОшибки.Вставить("Раздел", "Титульный");
		СтруктураОшибки.Вставить("Показатель", Неопределено);
		СтруктураОшибки.Вставить("ЛистРаздела", Неопределено);
		СтруктураОшибки.Вставить("ТипОшибки", "НеВсяИнформацияПопалаВВыгрузку");

		СообщитьОбОшибкеЗаполнения(ДокументСсылкаАлкоОтчет, ТаблицаСообщений, СтатусПроверки, СтруктураОшибки,
									МаксимальноеКоличествоОшибок, ТекущееКоличествоОшибок);

	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьДаннымиУзел(ПараметрыВыгрузки, Узел,
		НомерСтроки = Неопределено)

	Для Каждого Стр из Узел.Строки Цикл
		Если Стр.Тип = "С" ИЛИ Стр.Тип = "C" Тогда // учтем оба варианта: кириллицу и латиницу
			Если ПараметрыВыгрузки.Свойство("ИмяКлючевогоУзлаСодержательнойЧасти")
					И Стр.Код = ПараметрыВыгрузки.ИмяКлючевогоУзлаСодержательнойЧасти Тогда
				ЗаполнитьДаннымиУзел(ПараметрыВыгрузки, Стр);
				ЗаполнитьСодержательнуюЧасть(Стр, Узел, ПараметрыВыгрузки);
			Иначе
				ЗаполнитьДаннымиУзел(ПараметрыВыгрузки, Стр);
			КонецЕсли;
		Иначе
			Если ПустаяСтрока(Стр.ЗначениеПоУмолчанию) Тогда

				Если НЕ ПустаяСтрока(Стр.Ключ) Тогда

					НайденКлюч = Истина;
					КлючВыгрузки = Строка(Стр.Ключ);
					ПозицияТочки = СтрНайти(КлючВыгрузки, ".");
					СтруктураПараметровВыгрузки = ПараметрыВыгрузки;

					Пока ПозицияТочки > 0 Цикл

						ПромежуточныйКлюч = Лев(КлючВыгрузки, ПозицияТочки - 1);
						КлючВыгрузки = Сред(КлючВыгрузки, ПозицияТочки + 1);

						Если СтруктураПараметровВыгрузки.Свойство(ПромежуточныйКлюч) Тогда
							СтруктураПараметровВыгрузки = СтруктураПараметровВыгрузки[ПромежуточныйКлюч];
						Иначе
							НайденКлюч = Ложь;
							Прервать;
						КонецЕсли;

						ПозицияТочки = СтрНайти(КлючВыгрузки, ".");

					КонецЦикла;

					Если НайденКлюч Тогда
						
						ЗначениеПараметра = Неопределено;
                    	СтруктураПараметровВыгрузки.Свойство(КлючВыгрузки, ЗначениеПараметра);
						
						Если ЗначениеЗаполнено(ЗначениеПараметра) Тогда
							ВывестиПоказательВXML(Стр, ЗначениеПараметра);
						Иначе	
							Стр.Значение = "";
						КонецЕсли; 
                    	
					Иначе
						Стр.Значение = "";
					КонецЕсли;

				Иначе
					Стр.Значение = "";
				КонецЕсли;

			ИначеЕсли Лев(Стр.ЗначениеПоУмолчанию, 1) = "&" Тогда

				Ключ = Сред(Стр.ЗначениеПоУмолчанию, 2);

				НайденКлюч = Истина;
				КлючВыгрузки = Строка(Ключ);
				ПозицияТочки = СтрНайти(КлючВыгрузки, ".");
				СтруктураПараметровВыгрузки = ПараметрыВыгрузки;

				Пока ПозицияТочки > 0 Цикл

					ПромежуточныйКлюч = Лев(КлючВыгрузки, ПозицияТочки - 1);
					КлючВыгрузки = Сред(КлючВыгрузки, ПозицияТочки + 1);

					Если СтруктураПараметровВыгрузки.Свойство(ПромежуточныйКлюч) Тогда
						СтруктураПараметровВыгрузки = СтруктураПараметровВыгрузки[ПромежуточныйКлюч];
					Иначе
						НайденКлюч = Ложь;
						Прервать;
					КонецЕсли;

					ПозицияТочки = СтрНайти(КлючВыгрузки, ".");

				КонецЦикла;

				Если НайденКлюч Тогда
						
					ЗначениеПараметра = Неопределено;
                	СтруктураПараметровВыгрузки.Свойство(КлючВыгрузки, ЗначениеПараметра);
					
					Если ЗначениеЗаполнено(ЗначениеПараметра) Тогда
						ВывестиПоказательВXML(Стр, ЗначениеПараметра);
					Иначе	
						Стр.Значение = "";
					КонецЕсли; 
                	
				Иначе
					Стр.Значение = "";
				КонецЕсли;

			Иначе
				ВывестиПоказательВXML(Стр, Стр.ЗначениеПоУмолчанию);				
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

Процедура ЗаполнитьДанными()

	Если НужноОбработатьСтрок > 0 Тогда

		РегламентированнаяОтчетностьАлко.СообщитьПроцентВыполнения("Заполнение данными дерева выгрузки.", 
				ОбработаноСтрок, НужноОбработатьСтрок, ПроцентБезЗавершающейПроверкиДанных, РежимОтладки);

	КонецЕсли;

	ОбработатьУсловныеЭлементы(ПараметрыВыгрузки, ДеревоВыгрузки); // формируем точную структуру XML-макета
	ЗаполнитьДаннымиУзел(ПараметрыВыгрузки, ДеревоВыгрузки); // заполняем дерево данными
	Если НужноОбработатьСтрок > 0 Тогда

		РегламентированнаяОтчетностьАлко.СообщитьПроцентВыполнения("Заполнение данными дерева выгрузки.", 
				ОбработаноСтрок, НужноОбработатьСтрок, ПроцентБезЗавершающейПроверкиДанных, РежимОтладки);

	КонецЕсли;

	ОтсечьНезаполненныеНеобязательныеУзлы(ДеревоВыгрузки);

	Если НужноОбработатьСтрок > 0 Тогда

		РегламентированнаяОтчетностьАлко.СообщитьПроцентВыполнения("Заполнение данными дерева выгрузки.", 
				ПроцентБезЗавершающейПроверкиДанных, 100, , РежимОтладки);

	КонецЕсли;

КонецПроцедуры

Функция ПроверитьВыгрузку(ПараметрыДокумента, ЭтоВыгрузка = Ложь) Экспорт

	ОбъектЭтогоОтчета = ЭтотОбъект;
	
	ВерсияБСПЧислом = РегламентированнаяОтчетностьАлко.ПолучитьВерсиюБСПЧислом();

	РежимОтладки = ОбщегоНазначенияКлиентСервер.РежимОтладки();

	ДокументСсылкаАлкоОтчет = ПараметрыДокумента.ДокументСсылка;

	ИмяФормыОбъекта = ПараметрыДокумента.ИмяФормыОбъекта;
	ВспомогательныйАдрес = ПараметрыДокумента.ВспомогательныйАдрес;
	ПараметрыФормы = ПараметрыДокумента.ПараметрыФормы;
	ПараметрыВыгрузки = ПараметрыДокумента.ПараметрыВыгрузки;

	// Таблица результата.
	ТаблицаСообщений = РегламентированнаяОтчетностьАлко.СоздатьТаблицуСообщенийОбОшибках();
	ТаблицаСообщенийДляСведения = РегламентированнаяОтчетностьАлко.СоздатьТаблицуСообщенийОбОшибках();

	ТаблицаСтраницыЛицензии = ПараметрыФормы.ТаблицаСтраницыЛицензии;
	ТаблицаСтраницыРаздел1 = ПараметрыФормы.ТаблицаСтраницыРаздел1;
	ТаблицаСтраницыРаздел2 = ПараметрыФормы.ТаблицаСтраницыРаздел2;

	ТабП0000000002 = ПараметрыФормы.ТабП0000000002;
	ТабП0000100003 = ПараметрыФормы.ТабП0000100003;
	ТабП0000200003 = ПараметрыФормы.ТабП0000200003;

	СтруктураРеквизитовФормы = ПараметрыФормы.СтруктураРеквизитовФормы;
	СтруктураСервисРегистров = ПараметрыФормы.СтруктураСервисРегистров;

	ОбработаноСтрок = 0;
	ШагИнформирования = 200;
	НетОшибокПроверки = Истина;

	ДатаНачалаОтчета = СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета;
	ДатаКонцаОтчета = СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета;
	НижняяГраницаДатыПоXSD = Неопределено;
	ВерхняяГраницаДатыПоXSD = Неопределено;
	
	МаксимальноеКоличествоОшибок = 1000;
	ТекущееКоличествоОшибок = 0;
	МаксимальноеКоличествоПредупреждений = 1000; 
	ТекущееКоличествоПредупреждений = 0;
	
	ДеревоВыгрузки = ИзвлечьСтруктуруXML();

	ВсегоСтрокПоРазделу1 = ПолучитьКоличествоСтрокПоГруппе(СтруктураРеквизитовФормы.мИдГруппы12, Истина);
	ВсегоСтрокПоРазделу2 = ПолучитьКоличествоСтрокПоГруппе(СтруктураРеквизитовФормы.мИдГруппы22, Истина);
	
	ДанныеДвижений = Новый Соответствие;
	
	ДанныеОП = Новый Соответствие;
	ДанныеОП.Вставить("Раздел1", Новый Соответствие);
	ДанныеОП.Вставить("Раздел2", Новый Соответствие);
	
	СправочникиОтчета = Новый Соответствие;
	СправочникиОтчета.Вставить("ПроизводителиИмпортеры", Новый Соответствие);
	СправочникиОтчета.Вставить("Поставщики", Новый Соответствие);
			
	СчетчикИДПроизвИмп = 0;
	СчетчикИдПоставщиков = 0;
	
	// Один проход при проверке заполнения,
	// второй - при заполнении выгрузки - все вместе 90%
	// на завершающую проверку данных отводим 10%.
	НужноОбработатьСтрок = 2 * (ВсегоСтрокПоРазделу1 + ВсегоСтрокПоРазделу2);
	// При выгрузке проверка заполнения строк и заполнение дерева выгрузки составляет примерно 84%.
	// При проверке выгрузки - примерно 90% от общего времени выполнения.
	ПроцентБезЗавершающейПроверкиДанных = ?(ЭтоВыгрузка, 84, 90);
	
	// ОписаниеСтруктурыАдресаИзОтчета	- Структура.
	//		Поля структуры соответствуют структуре, получаемой при вызове
	//		функции ПолучитьПустуюСтруктуруАдреса(). 
	//		Может не содержать поля УникальныйНомерФИАС, ДополнительныеКоды, АдресXML, КодСтраны
	//		Страна, КодРегиона, Регион, ТипДома, ТипКорпуса, ТипКвартиры, ПредставлениеАдреса.
	//		При наличии перечисленных полей - они будут удалены!
	//		
	//		Значениями всех полей структуры является структура вида:
	//			* ПредставлениеПоля - осмысленное название поля адреса.
	//			* МинДлина - минимальная длина строки поля адреса, к которому относится структура.
	//			* МаксДлина- максимальная длина строки поля адреса, к которому относится структура.
	//			* ТолькоЦифры - Булево. Признак что в поле адреса должны быть только цифры.
	//
	// Эта структура используется в РегламентированнаяОтчетностьАЛКО.ПроверитьАдрес() для контроля типа и длины полей.
	// Если не указана - в РегламентированнаяОтчетностьАЛКО.ПроверитьАдрес() используется структура по умолчанию,
	// на момент написания кода структура по умолчанию соответствует описанию адреса во всех схемах XSD ФСРАР.
	//
	// Если в будущем описание адреса для конкретных отчетов изменится - нужно заполнять структуру ОписаниеСтруктурыАдресаИзОтчета
	// для этого отчета. Если описание изменится для всех отчетов - нужно менять описание структуры в
	// РегламентированнаяОтчетностьАЛКО.ПроверитьАдрес().
	ОписаниеСтруктурыАдресаИзОтчета = Неопределено;

	ИмяОбластиКодовМакета = "ВидыПродукции";
	СписокКодовПродукции = РегламентированнаяОтчетностьАЛКО.МассивКодовИзМакетаСписки(ИмяОбластиКодовМакета, 
														ДатаКонцаОтчета, ИмяФормыОбъекта, ОбъектЭтогоОтчета);
	
	Если НЕ ОтчетЗаполненКорректно() Тогда

		Результат = Новый Структура;
		Результат.Вставить("ТаблицаСообщений", ТаблицаСообщений);
		Результат.Вставить("ТаблицаСообщенийДляСведения", ТаблицаСообщенийДляСведения);
		Возврат Результат;

	КонецЕсли;

	// Информируем о ходе выполнения.
	Если НужноОбработатьСтрок > 0 Тогда

		РегламентированнаяОтчетностьАлко.СообщитьПроцентВыполнения("Заполнение данными дерева выгрузки.", 
				ОбработаноСтрок, НужноОбработатьСтрок, ПроцентБезЗавершающейПроверкиДанных, РежимОтладки);

	КонецЕсли;

	ЗаполнитьДанными();

	Если ТекущееКоличествоОшибок > 0 Тогда

		Результат = Новый Структура;
		Результат.Вставить("ТаблицаСообщений", ТаблицаСообщений);
		Результат.Вставить("ТаблицаСообщенийДляСведения", ТаблицаСообщенийДляСведения);
		Возврат Результат;

	КонецЕсли;

	// Информируем о ходе выполнения.				
	Если НужноОбработатьСтрок > 0 Тогда

		РегламентированнаяОтчетностьАлко.СообщитьПроцентВыполнения("Проверка данных по схеме выгрузки.", 
				ПроцентБезЗавершающейПроверкиДанных, 100, , РежимОтладки);

	КонецЕсли;

	Если НЕ ПроверитьДанные(ДеревоВыгрузки) Тогда
	// Информируем о ходе выполнения.
		Если НужноОбработатьСтрок > 0 Тогда

			РегламентированнаяОтчетностьАлко.СообщитьПроцентВыполнения("", 100, 100, , РежимОтладки);

		КонецЕсли;

		Результат = Новый Структура;
		Результат.Вставить("ТаблицаСообщений", ТаблицаСообщений);
		Результат.Вставить("ТаблицаСообщенийДляСведения", ТаблицаСообщенийДляСведения);
		Возврат Результат;

	КонецЕсли;

	// Информируем о ходе выполнения.				
	Если НужноОбработатьСтрок > 0 Тогда

		РегламентированнаяОтчетностьАлко.СообщитьПроцентВыполнения(?(ЭтоВыгрузка, "Запись выгрузки в XML.", ""), 
				?(ЭтоВыгрузка, 93, 100), 100, , РежимОтладки);

	КонецЕсли;

	Результат = Новый Структура;
	Результат.Вставить("ТаблицаСообщений", ТаблицаСообщений);
	Результат.Вставить("ТаблицаСообщенийДляСведения", ТаблицаСообщенийДляСведения);

	Возврат Результат;

КонецФункции

Функция СписокРазделовОшибок() Экспорт
	
	СписокРазделов = Новый Массив;
	СписокРазделов.Добавить("Титульный");
	// Раздела "Лицензии" нет.
	СписокРазделов.Добавить("Раздел1");
	СписокРазделов.Добавить("Раздел2");

	Возврат СписокРазделов;

КонецФункции
#КонецОбласти


#Область Выгрузка

Функция ВыгрузитьОтчет(ПараметрыДокумента) Экспорт

	ЭтоВыгрузка = Истина;

	Результат = ПроверитьВыгрузку(ПараметрыДокумента, ЭтоВыгрузка);

	Если ТекущееКоличествоОшибок > 0 Тогда
	// Есть сообщения о ошибках
		Возврат Результат;
	КонецЕсли;

	// Проверка прошла успешно.
	// Пишем XML в файл.
	ИмяФайлаXML = Неопределено;

	// расширение по умолчанию - .tmp
	ИмяФайлаXML = ПолучитьИмяВременногоФайла();

	РегламентированнаяОтчетностьАЛКО.ВыгрузитьДеревоВXML(ДеревоВыгрузки, ПараметрыВыгрузки, ИмяФайлаXML);

	// информируем о ходе выполнения				
	Если НужноОбработатьСтрок > 0 Тогда

		РегламентированнаяОтчетностьАлко.СообщитьПроцентВыполнения("", 100, 100, , РежимОтладки);

	КонецЕсли;

	Результат.Вставить("ИмяФайлаXML", ИмяФайлаXML);

	Возврат Результат;

КонецФункции
#КонецОбласти 


#Область Печать

Функция ПечататьРаздел(СтрокаРаздела)
		
	// Если в настройках взведен флаг печати, то добавляем раздел в список печатаемых и выходим.
	Если СтрокаРаздела.ВыводНаПечать <> 0 Тогда
		СтруктураРеквизитовФормы.мПечатаемыеРазделы.Добавить(СтрокаРаздела.ИмяСтраницы);
		Возврат 1;
	КонецЕсли;
	
	Возврат 0;
	
КонецФункции

Функция ПечатьОтчета(ПараметрыДокумента)  Экспорт
	
	ОбъектЭтогоОтчета = ЭтотОбъект;
	
	ДокументСсылкаАлкоОтчет		= ПараметрыДокумента.ДокументСсылка;

	ИмяФормыОбъекта				= ПараметрыДокумента.ИмяФормыОбъекта;
	ВспомогательныйАдрес		= ПараметрыДокумента.ВспомогательныйАдрес;
	ПараметрыФормы				= ПараметрыДокумента.ПараметрыФормы;
	
	ВидПечати					= ПараметрыДокумента.ВидПечати;
	
	ТаблицаСтраницыЛицензии = ПараметрыФормы.ТаблицаСтраницыЛицензии;
	ТаблицаСтраницыРаздел1  = ПараметрыФормы.ТаблицаСтраницыРаздел1;
	ТаблицаСтраницыРаздел2  = ПараметрыФормы.ТаблицаСтраницыРаздел2;
	
	ТабП0000000002 				= ПараметрыФормы.ТабП0000000002;
	ТабП0000100003 				= ПараметрыФормы.ТабП0000100003;
	ТабП0000200003 				= ПараметрыФормы.ТабП0000200003;
	СтруктураСервисРегистров 	= ПараметрыФормы.СтруктураСервисРегистров;
	
	СтруктураРеквизитовФормы = ПараметрыФормы.СтруктураРеквизитовФормы;
	
	ВсегоСтрокПоЛицензиям = ПолучитьКоличествоСтрокПоГруппе(СтруктураРеквизитовФормы.мИдГруппы01, Истина);
	ВсегоСтрокПоРазделу1 = ПолучитьКоличествоСтрокПоГруппе(СтруктураРеквизитовФормы.мИдГруппы12, Истина);
	ВсегоСтрокПоРазделу2 = ПолучитьКоличествоСтрокПоГруппе(СтруктураРеквизитовФормы.мИдГруппы22, Истина);
	
	// Один проход при выводе в целом по организации,
	// второй - при выводе по ОП
	// Лицензии выводятся один раз.
	// Все это в 2 кратном размере, поскольку сначала вся информация отбирается в запросе.
	НужноОбработатьСтрок = (2*(ВсегоСтрокПоРазделу1 + ВсегоСтрокПоРазделу2) + ВсегоСтрокПоЛицензиям)*2;
	
	ОбработаноСтрок = 0;
	
	Если ВидПечати = "ПечатьФайлZIP" Тогда
		
	    ТипЭкспорта = СтруктураРеквизитовФормы.ТипЭкспорта;
		
		Если ТипЭкспорта = ТипФайлаТабличногоДокумента.PDF Тогда
		    ПроцентБезКонвертацииАрхивации = 14;
		ИначеЕсли ТипЭкспорта = ТипФайлаТабличногоДокумента.XLSX Тогда
			ПроцентБезКонвертацииАрхивации = 55;
		ИначеЕсли ТипЭкспорта = ТипФайлаТабличногоДокумента.MXL Тогда
			// Только сжать.
			ПроцентБезКонвертацииАрхивации = 95;
		ИначеЕсли ТипЭкспорта = ТипФайлаТабличногоДокумента.HTML Тогда
			ПроцентБезКонвертацииАрхивации = 20;
		КонецЕсли; 
		
	Иначе
		ПроцентБезКонвертацииАрхивации = 100;
	КонецЕсли; 
	
	СтруктураДанныхТитульный = ПараметрыФормы.СтруктураДанныхТитульный;
	мДеревоВыбранныхСтраниц  = ПараметрыФормы.мДеревоВыбранныхСтраниц;
	НомерКорректировки		 = ПараметрыФормы.НомерКорректировки;
	ДополнительныеДанные	 = ПараметрыФормы.ДополнительныеДанные;
	ДатаПодписи				 = ПараметрыФормы.ДатаПодписи;
	
	СтруктураПараметров = Новый Структура;
	
	Для Каждого СтрокаУровня1 Из мДеревоВыбранныхСтраниц.Строки Цикл
		
		Пометка = ПечататьРаздел(СтрокаУровня1);

		ИмяСтраницыПанели  = СтрокаУровня1.ИмяСтраницы;
		НаименованиеЛиста  = СтрокаУровня1.Представление;
		ОриентацияЛиста    = СтрокаУровня1.ОриентацияСтраницы;
		ИмяОбластиТаблПоля = СтрокаУровня1.ИмяОбластиТабличногоПоля;

		Если Пометка = 0 Тогда
			Продолжить;
		КонецЕсли;

		СтруктураПараметров.Очистить();
		СтруктураПараметров.Вставить("НаименованиеЛиста",  НаименованиеЛиста);
		СтруктураПараметров.Вставить("ОриентацияЛиста",    ОриентацияЛиста);
		СтруктураПараметров.Вставить("ИмяСтраницы",        ИмяСтраницыПанели);
		СтруктураПараметров.Вставить("ИмяРаздела",        ИмяСтраницыПанели);
		Структурапараметров.Вставить("ИмяОбластиТаблПоля", ИмяОбластиТаблПоля);
		СтруктураПараметров.Вставить("ВидПечати",          ВидПечати);
		СтруктураПараметров.Вставить("ИмяФормыОбъекта",    ИмяФормыОбъекта);

		
		Если ИмяСтраницыПанели = "Титульный" Тогда
			
			ВывестиНаПечатьТитульный(СтруктураПараметров);	
			
		ИначеЕсли ИмяСтраницыПанели = "Раздел1" Тогда
			
			ВывестиНаПечатьРаздел1(СтруктураПараметров);
			
		ИначеЕсли ИмяСтраницыПанели = "Раздел2" Тогда
			
			ВывестиНаПечатьРаздел2(СтруктураПараметров);
			
		ИначеЕсли ИмяСтраницыПанели = "Лицензии" Тогда
			
			ВывестиНаПечатьРазделЛицензии(СтруктураПараметров);
		
		КонецЕсли;
		
	КонецЦикла;
	
	// Информируем о ходе выполнения.				
	Если НужноОбработатьСтрок > 0 Тогда
				
		РегламентированнаяОтчетностьАлко.СообщитьПроцентВыполнения(
		?(ВидПечати = "ПечатьФайлZIP" , "Конвертация в выбранный формат и архивация.", ""), 
		НужноОбработатьСтрок, НужноОбработатьСтрок, ПроцентБезКонвертацииАрхивации, РежимОтладки);
		
	КонецЕсли;
	
	Возврат СтруктураРеквизитовФормы;
	
КонецФункции

Процедура ВывестиНаПечатьТитульный(СтруктураПараметровСтраницы)
	
	НастройкиСтраницы = Новый Структура;
		
	НастройкиСтраницы.Вставить("ОтображатьЗаголовки", 	Ложь);
	НастройкиСтраницы.Вставить("ОтображатьСетку", 		Ложь);
	НастройкиСтраницы.Вставить("ЧерноБелыйПросмотр", 	Истина);
	НастройкиСтраницы.Вставить("ЧерноБелаяПечать", 		Истина);
	НастройкиСтраницы.Вставить("Автомасштаб", 			Истина);
	НастройкиСтраницы.Вставить("ОриентацияСтраницы", 	ОриентацияСтраницы.Портрет);
	НастройкиСтраницы.Вставить("ПолеСверху", 			5);
	НастройкиСтраницы.Вставить("ПолеСнизу", 			5);
	НастройкиСтраницы.Вставить("ПолеСлева", 			5);
	НастройкиСтраницы.Вставить("ПолеСправа", 			5);
	
	СтруктураПараметровСтраницы.Вставить("НастройкиСтраницы", 			НастройкиСтраницы);
	СтруктураПараметровСтраницы.Вставить("СтруктураДанныхТитульный", 	СтруктураДанныхТитульный);
	СтруктураПараметровСтраницы.Вставить("ДокументСсылкаАлкоОтчет", 	ДокументСсылкаАлкоОтчет);
	
	РегламентированнаяОтчетностьАЛКО.ВывестиНаПечатьТитульный(	
		СтруктураПараметровСтраницы, СтруктураРеквизитовФормы, ОбъектЭтогоОтчета);
								
КонецПроцедуры

Процедура ВывестиНаПечатьРазделЛицензии(СтруктураПараметровСтраницы)
	
	НастройкиСтраницы = Новый Структура;
		
	НастройкиСтраницы.Вставить("ОтображатьЗаголовки", 	Ложь);
	НастройкиСтраницы.Вставить("ОтображатьСетку", 		Ложь);
	НастройкиСтраницы.Вставить("ЧерноБелыйПросмотр", 	Истина);
	НастройкиСтраницы.Вставить("ЧерноБелаяПечать", 		Истина);
	НастройкиСтраницы.Вставить("Автомасштаб", 			Истина);
	НастройкиСтраницы.Вставить("ОриентацияСтраницы", 	ОриентацияСтраницы.Портрет);
	НастройкиСтраницы.Вставить("ПолеСверху", 			10);
	НастройкиСтраницы.Вставить("ПолеСнизу", 			5);
	НастройкиСтраницы.Вставить("ПолеСлева", 			5);
	НастройкиСтраницы.Вставить("ПолеСправа", 			5);
	
	СтруктураПараметровСтраницы.Вставить("НастройкиСтраницы", 				НастройкиСтраницы);
	СтруктураПараметровСтраницы.Вставить("СтруктураДанныхТитульный", 		СтруктураДанныхТитульный);
	СтруктураПараметровСтраницы.Вставить("СтруктураСервисРегистров", 		СтруктураСервисРегистров);
	СтруктураПараметровСтраницы.Вставить("ТаблицаСтраницыЛицензии", 		ТаблицаСтраницыЛицензии);
	СтруктураПараметровСтраницы.Вставить("НужноОбработатьСтрок", 			НужноОбработатьСтрок);
	СтруктураПараметровСтраницы.Вставить("ПроцентБезКонвертацииАрхивации", 	ПроцентБезКонвертацииАрхивации);	
	СтруктураПараметровСтраницы.Вставить("ДокументСсылкаАлкоОтчет", 		ДокументСсылкаАлкоОтчет);
		
	РегламентированнаяОтчетностьАЛКО.ВывестиНаПечатьРазделЛицензии(СтруктураПараметровСтраницы, СтруктураРеквизитовФормы,
																	ОбработаноСтрок, ОбъектЭтогоОтчета, РежимОтладки);
				
КонецПроцедуры

Процедура ВывестиНаПечатьРаздел1(СтруктураПараметровСтраницы)
	
	// В структуре СтруктураПараметровСтраницы уже установлены свойства 
	// ИмяФормыОбъекта, ИмяРаздела, НаименованиеЛиста - в процедуре ПечатьОтчета().
	
	СтруктураПараметровСтраницы.Вставить("ДокументСсылкаАлкоОтчет", 	ДокументСсылкаАлкоОтчет);
	
	СтруктураПараметровСтраницы.Вставить("СтруктураДанныхТитульный", 	СтруктураДанныхТитульный);
	СтруктураПараметровСтраницы.Вставить("СтруктураСервисРегистров", 	СтруктураСервисРегистров);
	СтруктураПараметровСтраницы.Вставить("ДополнительныеДанные", 		ДополнительныеДанные);
	СтруктураПараметровСтраницы.Вставить("ТаблицаСтраницыРаздела", 		ТаблицаСтраницыРаздел1);
	
	// Настройки листа.
	НастройкиСтраницы = Новый Структура;		
	НастройкиСтраницы.Вставить("ОтображатьЗаголовки", 	Ложь);
	НастройкиСтраницы.Вставить("ОтображатьСетку", 		Ложь);
	НастройкиСтраницы.Вставить("ЧерноБелыйПросмотр", 	Истина);
	НастройкиСтраницы.Вставить("ЧерноБелаяПечать", 		Истина);
	НастройкиСтраницы.Вставить("Автомасштаб", 			Истина);
	НастройкиСтраницы.Вставить("ОриентацияСтраницы", 	ОриентацияСтраницы.Ландшафт);
	НастройкиСтраницы.Вставить("ПолеСверху", 			10);
	НастройкиСтраницы.Вставить("ПолеСнизу", 			5);
	НастройкиСтраницы.Вставить("ПолеСлева", 			5);
	НастройкиСтраницы.Вставить("ПолеСправа", 			5);
		
	СтруктураПараметровСтраницы.Вставить("НастройкиСтраницы", НастройкиСтраницы);
	
	// Высоты в стандартных строках с установленным свойством "Автовысота" (11,25).
	// Вычисляются методом пробной печати заведомо большого количества строк.
	// Например ВысотаСтраницыВСтроках = 120 и строк в отчете 200, значения короткие чтобы в одну строку 
	// помещались в поле.
	// После печати считается сколько поместилось на странице, с учетом что некоторые строки высотой в 2-3
	// "стандартных" - это и есть правильная ВысотаСтраницыВСтроках. 
	// Лучше ставить с небольшим запасом, в меньшую сторону. Если строк на листе вышло 100, лучше поставить 95.
	// Остальные высоты считаются по макету - сколько стандартных строк по высоте занимают.
	СтруктураВысот = Новый Структура;
	СтруктураВысот.Вставить("ВысотаСтраницыВСтроках", 			80);
	СтруктураВысот.Вставить("Высота_НомерСтраницыВСтроках", 	1);
	СтруктураВысот.Вставить("Высота_ЗаголовокЛистаВСтроках", 	5);
	СтруктураВысот.Вставить("Высота_ПустаяСтрокаВСтроках", 		1);
	СтруктураВысот.Вставить("Высота_ЗаголовокТаблицыВСтроках", 	10);
	СтруктураВысот.Вставить("Высота_СтрокаОПВСтроках", 			2);
	СтруктураВысот.Вставить("Высота_ПодвалВСтроках", 			9);
	
	СтруктураПараметровСтраницы.Вставить("СтруктураВысот", СтруктураВысот);
	
	
		
	НастройкиАлгоритмаПечати = Новый Структура;
	
	/////////////////////////////////////////////////////////////
	// Общие настройки печати по разделу.
	/////////////////////////////////////////////////////////////
	
	НастройкиАлгоритмаПечати.Вставить("ИмяОбластиПустаяСтрока", 			"ПустаяСтрока");
	НастройкиАлгоритмаПечати.Вставить("ИмяОбластиПодвал", 					"Подвал");
	
    Если СтруктураДанныхТитульный.ЭтоПБОЮЛ Тогда
		
	    НастройкиАлгоритмаПечати.Вставить("ИмяОбластиОргДиректор", 				"ИндивидуальныйПредприниматель");
		НастройкиАлгоритмаПечати.Вставить("ИмяОбластиОргБухгалтер", 			"");
		
	Иначе
				
	    НастройкиАлгоритмаПечати.Вставить("ИмяОбластиОргДиректор", 				"ОргДиректор");	
	    НастройкиАлгоритмаПечати.Вставить("ИмяОбластиОргБухгалтер", 			"ОргБухгалтер");
		
	КонецЕсли;
	
	НастройкиАлгоритмаПечати.Вставить("ВыводитьСводнуюТаблицуПоОрганизацииВЦелом", 	Истина);
	НастройкиАлгоритмаПечати.Вставить("ВыводитьВозвратыЗаДекларацией", 				Ложь);
	// Описание заголовка и шапки таблицы.
	НастройкиАлгоритмаПечати.Вставить("ИмяОбластиНомерСтраницы", 			"НомерСтраницы");	
	НастройкиАлгоритмаПечати.Вставить("ИмяОбластиЗаголовокЛиста", 			"ЗаголовокЛиста");	
	НастройкиАлгоритмаПечати.Вставить("ИмяОбластиЗаголовокТаблицы", 		"ЗаголовокТаблицы");
	
	// СписокПереносимыхПолей - список, значения которого - количество стандартных символов, помещающихся в 
	// в одну строчку по длине поля ,при шрифте и величине шрифта, установленных для поля в макете в области
	// "СтрокаТаблицы" или аналогичном.	
	// В представлении элементов списка хранится имена ИмяПоляПереносимойСтроки, т.е поля,
	// в котором слова могут переносится на следующую строку, если не хватает длины.
	// Строка "СтрокаТаблицы" или аналогичная должна иметь настройку АвтовысотаСтроки = Истина.
	//
	// В списке указываются поля с привязкой к ИДгруппы таблицы раздела (ресурсов в регистре).
	// Действуют и на общую часть по организации и на часть по ОП.
	СписокПереносимыхПолей = Новый СписокЗначений;
	СписокПереносимыхПолей.Добавить(27, "П000010000301");
	СписокПереносимыхПолей.Добавить(27, "П000010000303");
	
	НастройкиАлгоритмаПечати.Вставить("СписокПереносимыхПолей", 			СписокПереносимыхПолей);
		
	// Описание областей макета, выводящих строки общей информации по ОП и организации.
	НастройкиАлгоритмаПечати.Вставить("ИмяОбластиСтрокаОП", 				"СтрокаОП");
	НастройкиАлгоритмаПечати.Вставить("ИмяОбластиСтрокаОрг",				"СтрокаОП");
	
	// Описание областей макета, выводящих строки общей информации по ОП и организации. 
	НастройкиАлгоритмаПечати.Вставить("ИмяОбластиЗаголовокРеквизитовОП", 	"ЗаголовокРеквизитов");
	НастройкиАлгоритмаПечати.Вставить("ИмяОбластиЗаголовокРеквизитовОрг", 	"ЗаголовокРеквизитов");
	
	// Текст пояснения к общим сведениям по ОП и организации.
	НастройкиАлгоритмаПечати.Вставить("ЗаголовокРеквизитовОП", 
		"Сведения по обособленному подразделению (с указанием ИНН, КПП и адреса)/по объекту торговли индивидуального предпринимателя (с указанием адреса)");
	НастройкиАлгоритмаПечати.Вставить("ЗаголовокРеквизитовОрг", 
		"Сведения по организации/индивидуальному предпринимателю");
	
	// Имя области в которой выводится общая информация по ОП и Организации.
	НастройкиАлгоритмаПечати.Вставить("ИмяОбластиРеквизитовОП", 			"ОП");
	НастройкиАлгоритмаПечати.Вставить("ИмяОбластиРеквизитовОрг", 			"ОП");
		
	// Информация по колонкам группировки, суммирования и запрету вывода.
	// Используется при выводе строк по организации - выводить "как есть" или сворачивать
	// по определенным полям.
	//
	// Пустая строка колонок группировки и суммирования означает автоопределение 
	// - все что не числа - колонки группировки.
	// - все что числа - колонки суммирования.
	//
	// Значение "Не сворачивать" или "НеСворачивать" в колонках группировки вместо списка колонок
	// предотвращает сворачивание, независимо от значения колонок суммирования.
	
	НастройкиАлгоритмаПечати.Вставить("КолонкиГруппировокОрг", "");	 
	НастройкиАлгоритмаПечати.Вставить("КолонкиСуммированияОрг", "");	
	НастройкиАлгоритмаПечати.Вставить("КолонкиНеВыводитьОрг", "");
	
	/////////////////////////////////////////////////////////////
	// Алгоритм печати строк ОП.
	/////////////////////////////////////////////////////////////
	
	НастройкиАлгоритмаПечатиСтрокОП = Новый Структура;
	НастройкиАлгоритмаПечатиСтрокОП.Вставить("ИдГруппыОбластиСтрокаМакета", "П0000100003");
	НастройкиАлгоритмаПечатиСтрокОП.Вставить("ИмяОбластиНомера", "П000010000300");				
	НастройкиАлгоритмаПечатиСтрокОП.Вставить("ИмяОбластиСтрокаТаблицы", "СтрокаТаблицы");
	
	СписокСтруктурИнформацииИтогов = Новый СписокЗначений;
	
	СтруктураИнформацииИтога = Новый Структура;
	СтруктураИнформацииИтога.Вставить("ИдГруппыОбластейМакетаИтоги", "П0000100004");
	СтруктураИнформацииИтога.Вставить("ИмяОбластиСтрокаИтогов", "СтрокаИтого");
	СтруктураИнформацииИтога.Вставить("ИмяОбластиРазмещенияПояснения", "ОписаниеИтого");
	СтруктураИнформацииИтога.Вставить("ТекстПояснения", "Итого по коду %#02#%");
	СтруктураИнформацииИтога.Вставить("КолонкиГруппировок", "02");
	СтруктураИнформацииИтога.Вставить("КолонкиСуммирования", "06,07,08,09,10,11,12,13,14,15,16,17,18");
	
	СписокСтруктурИнформацииИтогов.Добавить(СтруктураИнформацииИтога, "1");
	
	СтруктураИнформацииИтога2 = Новый Структура;
	СтруктураИнформацииИтога2.Вставить("ИдГруппыОбластейМакетаИтоги", "П0000100004");
	СтруктураИнформацииИтога2.Вставить("ИмяОбластиСтрокаИтогов", "СтрокаИтого");
	СтруктураИнформацииИтога2.Вставить("ИмяОбластиРазмещенияПояснения", "ОписаниеИтого");
	СтруктураИнформацииИтога2.Вставить("ТекстПояснения", "ИТОГО");
	СтруктураИнформацииИтога2.Вставить("КолонкиГруппировок", "");
	СтруктураИнформацииИтога2.Вставить("КолонкиСуммирования", "06,07,08,09,10,11,12,13,14,15,16,17,18");
	
	СписокСтруктурИнформацииИтогов.Добавить(СтруктураИнформацииИтога2, "2");
	
	НастройкиАлгоритмаПечатиСтрокОП.Вставить("СписокСтруктурИнформацииИтогов", СписокСтруктурИнформацииИтогов);
	
	НастройкиАлгоритмаПечати.Вставить("НастройкиАлгоритмаПечатиСтрокОП", НастройкиАлгоритмаПечатиСтрокОП);
	
	/////////////////////////////////////////////////////////////
	// Алгоритм печати строк Организации.
	/////////////////////////////////////////////////////////////
	
	НастройкиАлгоритмаПечатиСтрокОрг = Новый Структура;
	НастройкиАлгоритмаПечатиСтрокОрг.Вставить("ИдГруппыОбластиСтрокаМакета", "П0000100003");
	НастройкиАлгоритмаПечатиСтрокОрг.Вставить("ИмяОбластиНомера", "П000010000300");				
	НастройкиАлгоритмаПечатиСтрокОрг.Вставить("ИмяОбластиСтрокаТаблицы", "СтрокаТаблицы");
	
	СписокСтруктурИнформацииИтоговОрг = Новый СписокЗначений;
	
	СтруктураИнформацииИтога = Новый Структура;
	СтруктураИнформацииИтога.Вставить("ИдГруппыОбластейМакетаИтоги", "П0000100004");
	СтруктураИнформацииИтога.Вставить("ИмяОбластиСтрокаИтогов", "СтрокаИтого");
	СтруктураИнформацииИтога.Вставить("ИмяОбластиРазмещенияПояснения", "ОписаниеИтого");
	СтруктураИнформацииИтога.Вставить("ТекстПояснения", "Итого по коду %#02#%");
	СтруктураИнформацииИтога.Вставить("КолонкиГруппировок", "02");
	СтруктураИнформацииИтога.Вставить("КолонкиСуммирования", "06,07,08,09,10,11,12,13,14,15,16,17,18");
	
	СписокСтруктурИнформацииИтоговОрг.Добавить(СтруктураИнформацииИтога, "1");
	
	СтруктураИнформацииИтога2 = Новый Структура;
	СтруктураИнформацииИтога2.Вставить("ИдГруппыОбластейМакетаИтоги", "П0000100004");
	СтруктураИнформацииИтога2.Вставить("ИмяОбластиСтрокаИтогов", "СтрокаИтого");
	СтруктураИнформацииИтога2.Вставить("ИмяОбластиРазмещенияПояснения", "ОписаниеИтого");
	СтруктураИнформацииИтога2.Вставить("ТекстПояснения", "ИТОГО");
	СтруктураИнформацииИтога2.Вставить("КолонкиГруппировок", "");
	СтруктураИнформацииИтога2.Вставить("КолонкиСуммирования", "06,07,08,09,10,11,12,13,14,15,16,17,18");
	
	СписокСтруктурИнформацииИтоговОрг.Добавить(СтруктураИнформацииИтога2, "2");
	
	НастройкиАлгоритмаПечатиСтрокОрг.Вставить("СписокСтруктурИнформацииИтогов", СписокСтруктурИнформацииИтоговОрг);
	
	НастройкиАлгоритмаПечати.Вставить("НастройкиАлгоритмаПечатиСтрокОрг", НастройкиАлгоритмаПечатиСтрокОрг);
	
	/////////////////////////////////////////////////////////////
	// Конец настроек алгоритма печати
	/////////////////////////////////////////////////////////////
	
	СтруктураПараметровСтраницы.Вставить("НастройкиАлгоритмаПечати", НастройкиАлгоритмаПечати);
	
	// Заполнение данных для показа шкалы прогресса.
	СтруктураПараметровСтраницы.Вставить("НужноОбработатьСтрок", НужноОбработатьСтрок);
	СтруктураПараметровСтраницы.Вставить("ПроцентБезКонвертацииАрхивации", ПроцентБезКонвертацииАрхивации);
	
	
	РегламентированнаяОтчетностьАЛКО.ВывестиНаПечатьРазделДекларации(СтруктураПараметровСтраницы, СтруктураРеквизитовФормы,
																		ОбработаноСтрок, ОбъектЭтогоОтчета, РежимОтладки);
	
КонецПроцедуры

Процедура ВывестиНаПечатьРаздел2(СтруктураПараметровСтраницы)
	
	// В структуре СтруктураПараметровСтраницы уже установлены свойства 
	// ИмяФормыОбъекта, ИмяРаздела, НаименованиеЛиста - в процедуре ПечатьОтчета().
	
	СтруктураПараметровСтраницы.Вставить("ДокументСсылкаАлкоОтчет", 	ДокументСсылкаАлкоОтчет);
	СтруктураПараметровСтраницы.Вставить("СтруктураДанныхТитульный", 	СтруктураДанныхТитульный);
	СтруктураПараметровСтраницы.Вставить("СтруктураСервисРегистров", 	СтруктураСервисРегистров);
	СтруктураПараметровСтраницы.Вставить("ДополнительныеДанные", 		ДополнительныеДанные);
	СтруктураПараметровСтраницы.Вставить("ТаблицаСтраницыРаздела", 		ТаблицаСтраницыРаздел2);
	
	// Настройки листа.
	НастройкиСтраницы = Новый Структура;		
	НастройкиСтраницы.Вставить("ОтображатьЗаголовки", 	Ложь);
	НастройкиСтраницы.Вставить("ОтображатьСетку", 		Ложь);
	НастройкиСтраницы.Вставить("ЧерноБелыйПросмотр", 	Истина);
	НастройкиСтраницы.Вставить("ЧерноБелаяПечать", 		Истина);
	НастройкиСтраницы.Вставить("Автомасштаб", 			Истина);
	НастройкиСтраницы.Вставить("ОриентацияСтраницы", 	ОриентацияСтраницы.Ландшафт);
	НастройкиСтраницы.Вставить("ПолеСверху", 			10);
	НастройкиСтраницы.Вставить("ПолеСнизу", 			5);
	НастройкиСтраницы.Вставить("ПолеСлева", 			5);
	НастройкиСтраницы.Вставить("ПолеСправа", 			5);
		
	СтруктураПараметровСтраницы.Вставить("НастройкиСтраницы", НастройкиСтраницы);
	
	// Высоты в стандартных строках с установленным свойством "Автовысота" (11,25).
	// Вычисляются методом пробной печати заведомо большого количества строк.
	// Например ВысотаСтраницыВСтроках = 120 и строк в отчете 200, значения короткие чтобы в одну строку 
	// помещались в поле.
	// После печати считается сколько поместилось на странице, с учетом что некоторые строки высотой в 2-3
	// "стандартных" - это и есть правильная ВысотаСтраницыВСтроках. 
	// Лучше ставить с небольшим запасом, в меньшую сторону. Если строк на листе вышло 100, лучше поставить 95.
	// Остальные высоты считаются по макету - сколько стандартных строк по высоте занимают.
	СтруктураВысот = Новый Структура;
	СтруктураВысот.Вставить("ВысотаСтраницыВСтроках", 			65);
	СтруктураВысот.Вставить("Высота_НомерСтраницыВСтроках", 	1);
	СтруктураВысот.Вставить("Высота_ЗаголовокЛистаВСтроках", 	2);
	СтруктураВысот.Вставить("Высота_ПустаяСтрокаВСтроках", 		1);
	СтруктураВысот.Вставить("Высота_ЗаголовокТаблицыВСтроках", 	7);
	СтруктураВысот.Вставить("Высота_СтрокаОПВСтроках", 			2);
	СтруктураВысот.Вставить("Высота_ПодвалВСтроках", 			9);
	
	СтруктураПараметровСтраницы.Вставить("СтруктураВысот", СтруктураВысот);
	
	
		
	НастройкиАлгоритмаПечати = Новый Структура;
	
	/////////////////////////////////////////////////////////////
	// Общие настройки печати по разделу.
	/////////////////////////////////////////////////////////////
	
	НастройкиАлгоритмаПечати.Вставить("ИмяОбластиПустаяСтрока", 			"ПустаяСтрока");
	НастройкиАлгоритмаПечати.Вставить("ИмяОбластиПодвал", 					"Подвал");
	
    Если СтруктураДанныхТитульный.ЭтоПБОЮЛ Тогда
		
	    НастройкиАлгоритмаПечати.Вставить("ИмяОбластиОргДиректор", 				"ИндивидуальныйПредприниматель");
		НастройкиАлгоритмаПечати.Вставить("ИмяОбластиОргБухгалтер", 			"");
		
	Иначе
				
	    НастройкиАлгоритмаПечати.Вставить("ИмяОбластиОргДиректор", 				"ОргДиректор");	
	    НастройкиАлгоритмаПечати.Вставить("ИмяОбластиОргБухгалтер", 			"ОргБухгалтер");
		
	КонецЕсли;
	
	НастройкиАлгоритмаПечати.Вставить("ВыводитьСводнуюТаблицуПоОрганизацииВЦелом", 	Истина);
	НастройкиАлгоритмаПечати.Вставить("ВыводитьВозвратыЗаДекларацией", 				Ложь);
	// Описание заголовка и шапки таблицы.
	НастройкиАлгоритмаПечати.Вставить("ИмяОбластиНомерСтраницы", 			"НомерСтраницы");	
	НастройкиАлгоритмаПечати.Вставить("ИмяОбластиЗаголовокЛиста", 			"ЗаголовокЛиста");	
	НастройкиАлгоритмаПечати.Вставить("ИмяОбластиЗаголовокТаблицы", 		"ЗаголовокТаблицы");
	
	// СписокПереносимыхПолей - список, значения которого - количество стандартных символов, помещающихся в 
	// в одну строчку по длине поля ,при шрифте и величине шрифта, установленных для поля в макете в области
	// "СтрокаТаблицы" или аналогичном.	
	// В представлении элементов списка хранится имена ИмяПоляПереносимойСтроки, т.е поля,
	// в котором слова могут переносится на следующую строку, если не хватает длины.
	// Строка "СтрокаТаблицы" или аналогичная должна иметь настройку АвтовысотаСтроки = Истина.
	//
	// В списке указываются поля с привязкой к ИДгруппы таблицы раздела (ресурсов в регистре).
	// Действуют и на общую часть по организации и на часть по ОП.
	СписокПереносимыхПолей = Новый СписокЗначений;
	СписокПереносимыхПолей.Добавить(27, "П000020000301");
	СписокПереносимыхПолей.Добавить(27, "П000020000303");
	СписокПереносимыхПолей.Добавить(27, "П000020000306");
	СписокПереносимыхПолей.Добавить(27, "П000020000310");
	СписокПереносимыхПолей.Добавить(27, "П000020000311");
	
	НастройкиАлгоритмаПечати.Вставить("СписокПереносимыхПолей", 			СписокПереносимыхПолей);
		
	// Описание областей макета, выводящих строки общей информации по ОП и организации.
	НастройкиАлгоритмаПечати.Вставить("ИмяОбластиСтрокаОП", 				"СтрокаОП");
	НастройкиАлгоритмаПечати.Вставить("ИмяОбластиСтрокаОрг",				"СтрокаОП");
	
	// Описание областей макета, выводящих строки общей информации по ОП и организации. 
	НастройкиАлгоритмаПечати.Вставить("ИмяОбластиЗаголовокРеквизитовОП", 	"ЗаголовокРеквизитов");
	НастройкиАлгоритмаПечати.Вставить("ИмяОбластиЗаголовокРеквизитовОрг", 	"ЗаголовокРеквизитов");
	
	// Текст пояснения к общим сведениям по ОП и организации.
	НастройкиАлгоритмаПечати.Вставить("ЗаголовокРеквизитовОП", 
		"Сведения по обособленному подразделению (с указанием ИНН, КПП и адреса)/по объекту торговли индивидуального предпринимателя (с указанием адреса)");
	НастройкиАлгоритмаПечати.Вставить("ЗаголовокРеквизитовОрг", 
		"Сведения по организации/индивидуальному предпринимателю");
	
	// Имя области в которой выводится общая информация по ОП и Организации.
	НастройкиАлгоритмаПечати.Вставить("ИмяОбластиРеквизитовОП", 			"ОП");
	НастройкиАлгоритмаПечати.Вставить("ИмяОбластиРеквизитовОрг", 			"ОП");
		
	// Информация по колонкам группировки, суммирования и запрету вывода.
	// Используется при выводе строк по организации - выводить "как есть" или сворачивать
	// по определенным полям.
	//
	// Пустая строка колонок группировки и суммирования означает автоопределение 
	// - все что не числа - колонки группировки.
	// - все что числа - колонки суммирования.
	//
	// Значение "Не сворачивать" или "НеСворачивать" в колонках группировки вместо списка колонок
	// предотвращает сворачивание, независимо от значения колонок суммирования.
	
	НастройкиАлгоритмаПечати.Вставить("КолонкиГруппировокОрг", "");	 
	НастройкиАлгоритмаПечати.Вставить("КолонкиСуммированияОрг", "");	
	НастройкиАлгоритмаПечати.Вставить("КолонкиНеВыводитьОрг", "");
	
	/////////////////////////////////////////////////////////////
	// Алгоритм печати строк ОП.
	/////////////////////////////////////////////////////////////
	
	НастройкиАлгоритмаПечатиСтрокОП = Новый Структура;
	НастройкиАлгоритмаПечатиСтрокОП.Вставить("ИдГруппыОбластиСтрокаМакета", "П0000200003");
	НастройкиАлгоритмаПечатиСтрокОП.Вставить("ИмяОбластиНомера", "П000020000300");				
	НастройкиАлгоритмаПечатиСтрокОП.Вставить("ИмяОбластиСтрокаТаблицы", "СтрокаТаблицы");
	
	СписокСтруктурИнформацииИтогов = Новый СписокЗначений;
	
	СтруктураИнформацииИтога = Новый Структура;
	СтруктураИнформацииИтога.Вставить("ИдГруппыОбластейМакетаИтоги", "П0000200004");
	СтруктураИнформацииИтога.Вставить("ИмяОбластиСтрокаИтогов", "СтрокаИтого");
	СтруктураИнформацииИтога.Вставить("ИмяОбластиРазмещенияПояснения", "ОписаниеИтого");
	СтруктураИнформацииИтога.Вставить("ТекстПояснения", "Итого по коду %#02#%");
	СтруктураИнформацииИтога.Вставить("КолонкиГруппировок", "02");
	СтруктураИнформацииИтога.Вставить("КолонкиСуммирования", "12");
	
	СписокСтруктурИнформацииИтогов.Добавить(СтруктураИнформацииИтога, "1");
	
	СтруктураИнформацииИтога2 = Новый Структура;
	СтруктураИнформацииИтога2.Вставить("ИдГруппыОбластейМакетаИтоги", "П0000200004");
	СтруктураИнформацииИтога2.Вставить("ИмяОбластиСтрокаИтогов", "СтрокаИтого");
	СтруктураИнформацииИтога2.Вставить("ИмяОбластиРазмещенияПояснения", "ОписаниеИтого");
	СтруктураИнформацииИтога2.Вставить("ТекстПояснения", "ИТОГО");
	СтруктураИнформацииИтога2.Вставить("КолонкиГруппировок", "");
	СтруктураИнформацииИтога2.Вставить("КолонкиСуммирования", "12");
	
	СписокСтруктурИнформацииИтогов.Добавить(СтруктураИнформацииИтога2, "2");
	
	НастройкиАлгоритмаПечатиСтрокОП.Вставить("СписокСтруктурИнформацииИтогов", СписокСтруктурИнформацииИтогов);
	
	НастройкиАлгоритмаПечати.Вставить("НастройкиАлгоритмаПечатиСтрокОП", НастройкиАлгоритмаПечатиСтрокОП);
	
	/////////////////////////////////////////////////////////////
	// Алгоритм печати строк Организации.
	/////////////////////////////////////////////////////////////
	
	НастройкиАлгоритмаПечатиСтрокОрг = Новый Структура;
	НастройкиАлгоритмаПечатиСтрокОрг.Вставить("ИдГруппыОбластиСтрокаМакета", "П0000200003");
	НастройкиАлгоритмаПечатиСтрокОрг.Вставить("ИмяОбластиНомера", "П000020000300");				
	НастройкиАлгоритмаПечатиСтрокОрг.Вставить("ИмяОбластиСтрокаТаблицы", "СтрокаТаблицы");
	
	СписокСтруктурИнформацииИтоговОрг = Новый СписокЗначений;
	
	СтруктураИнформацииИтога = Новый Структура;
	СтруктураИнформацииИтога.Вставить("ИдГруппыОбластейМакетаИтоги", "П0000200004");
	СтруктураИнформацииИтога.Вставить("ИмяОбластиСтрокаИтогов", "СтрокаИтого");
	СтруктураИнформацииИтога.Вставить("ИмяОбластиРазмещенияПояснения", "ОписаниеИтого");
	СтруктураИнформацииИтога.Вставить("ТекстПояснения", "Итого по коду %#02#%");
	СтруктураИнформацииИтога.Вставить("КолонкиГруппировок", "02");
	СтруктураИнформацииИтога.Вставить("КолонкиСуммирования", "12");
	
	СписокСтруктурИнформацииИтоговОрг.Добавить(СтруктураИнформацииИтога, "1");
	
	СтруктураИнформацииИтога2 = Новый Структура;
	СтруктураИнформацииИтога2.Вставить("ИдГруппыОбластейМакетаИтоги", "П0000200004");
	СтруктураИнформацииИтога2.Вставить("ИмяОбластиСтрокаИтогов", "СтрокаИтого");
	СтруктураИнформацииИтога2.Вставить("ИмяОбластиРазмещенияПояснения", "ОписаниеИтого");
	СтруктураИнформацииИтога2.Вставить("ТекстПояснения", "ИТОГО");
	СтруктураИнформацииИтога2.Вставить("КолонкиГруппировок", "");
	СтруктураИнформацииИтога2.Вставить("КолонкиСуммирования", "12");
	
	СписокСтруктурИнформацииИтоговОрг.Добавить(СтруктураИнформацииИтога2, "2");
	
	НастройкиАлгоритмаПечатиСтрокОрг.Вставить("СписокСтруктурИнформацииИтогов", СписокСтруктурИнформацииИтоговОрг);
	
	НастройкиАлгоритмаПечати.Вставить("НастройкиАлгоритмаПечатиСтрокОрг", НастройкиАлгоритмаПечатиСтрокОрг);
	
	/////////////////////////////////////////////////////////////
	// Конец настроек алгоритма печати
	/////////////////////////////////////////////////////////////
	
	СтруктураПараметровСтраницы.Вставить("НастройкиАлгоритмаПечати", НастройкиАлгоритмаПечати);
	
	// Заполнение данных для показа шкалы прогресса.
	СтруктураПараметровСтраницы.Вставить("НужноОбработатьСтрок", НужноОбработатьСтрок);
	СтруктураПараметровСтраницы.Вставить("ПроцентБезКонвертацииАрхивации", ПроцентБезКонвертацииАрхивации);
		
	
	РегламентированнаяОтчетностьАЛКО.ВывестиНаПечатьРазделДекларации(СтруктураПараметровСтраницы, СтруктураРеквизитовФормы,
																		ОбработаноСтрок, ОбъектЭтогоОтчета, РежимОтладки);
	
КонецПроцедуры

#КонецОбласти 


#Область ВнешнийОтчет

// Процедуры и функции этой области используются только в случае
// публикации в виде внешнего отчета.

#Область ПрограммныйИнтерфейсВнешнийОтчет

Функция ВерсияФорматаВыгрузки(Знач НаДату = Неопределено, 
		ВыбраннаяФорма = Неопределено) Экспорт
	
	Если НаДату = Неопределено Тогда
		НаДату = ТекущаяДатаСеанса();
	КонецЕсли;
	
	Возврат Перечисления.ВерсииФорматовВыгрузки.Версия401алко;
		
КонецФункции

Функция ТаблицаФормОтчета() Экспорт
	
	ОписаниеТиповСтрока = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(0));
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("Дата"));
	ОписаниеТиповДата = Новый ОписаниеТипов(МассивТипов, , Новый КвалификаторыДаты(ЧастиДаты.Дата));
	
	ТаблицаФормОтчета = Новый ТаблицаЗначений;
	ТаблицаФормОтчета.Колонки.Добавить("ФормаОтчета",        ОписаниеТиповСтрока);
	ТаблицаФормОтчета.Колонки.Добавить("ОписаниеОтчета",     ОписаниеТиповСтрока, "Утверждена",  20);
	ТаблицаФормОтчета.Колонки.Добавить("ДатаНачалоДействия", ОписаниеТиповДата,   "Действует с", 5);
	ТаблицаФормОтчета.Колонки.Добавить("ДатаКонецДействия",  ОписаниеТиповДата,   "         по", 5);
	ТаблицаФормОтчета.Колонки.Добавить("РедакцияФормы",      ОписаниеТиповСтрока, "Редакция формы", 20);
	
	НоваяФорма = ТаблицаФормОтчета.Добавить();
	НоваяФорма.ФормаОтчета        = "ФормаОтчета2012Кв3";
	НоваяФорма.ОписаниеОтчета     = "Приложение № 12 к Правилам представления деклараций об объеме производства, оборота и (или) использования этилового спирта, алкогольной и спиртосодержащей продукции, об использовании производственных мощностей (Утверждено ПП РФ от 09.08.2012 № 815).";
	НоваяФорма.РедакцияФормы	  = "от 09.08.2012 № 815.";
	НоваяФорма.ДатаНачалоДействия = '20120101';
	НоваяФорма.ДатаКонецДействия  = РегламентированнаяОтчетностьКлиентСервер.ПустоеЗначениеТипа(Тип("Дата"));
	
	Возврат ТаблицаФормОтчета;
	
КонецФункции

Функция ДанныеРеглОтчета(ЭкземплярРеглОтчета) Экспорт
	
	Возврат Неопределено;
	
КонецФункции

Функция ДеревоФормИФорматов() Экспорт
	
	ФормыИФорматы = Новый ДеревоЗначений;
	ФормыИФорматы.Колонки.Добавить("Код");
	ФормыИФорматы.Колонки.Добавить("ДатаПриказа");
	ФормыИФорматы.Колонки.Добавить("НомерПриказа");
	ФормыИФорматы.Колонки.Добавить("ДатаНачалаДействия");
	ФормыИФорматы.Колонки.Добавить("ДатаОкончанияДействия");
	ФормыИФорматы.Колонки.Добавить("ИмяОбъекта");
	ФормыИФорматы.Колонки.Добавить("Описание");
	
	Форма20120701 = ОпределитьФормуВДеревеФормИФорматов(ФормыИФорматы, "1152030", '2012-08-09', "815", "ФормаОтчета2012Кв3");
	ОпределитьФорматВДеревеФормИФорматов(Форма20120701, "4.20", , , '2012-01-01', '2013-12-31');
	ОпределитьФорматВДеревеФормИФорматов(Форма20120701, "4.30", , , '2014-01-01', '2015-08-31');
	ОпределитьФорматВДеревеФормИФорматов(Форма20120701, "4.31", , , '2015-09-01');
	
	Возврат ФормыИФорматы;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункцииВнешнийОтчет

Функция ОпределитьФормуВДеревеФормИФорматов(ДеревоФормИФорматов, Код, 
		ДатаПриказа = '00010101', НомерПриказа = "", ИмяОбъекта = "",
		ДатаНачалаДействия = '00010101', ДатаОкончанияДействия = '00010101', 
		Описание = "")
	
	НовСтр = ДеревоФормИФорматов.Строки.Добавить();
	НовСтр.Код = СокрЛП(Код);
	НовСтр.ДатаПриказа = ДатаПриказа;
	НовСтр.НомерПриказа = СокрЛП(НомерПриказа);
	НовСтр.ДатаНачалаДействия = ДатаНачалаДействия;
	НовСтр.ДатаОкончанияДействия = ДатаОкончанияДействия;
	НовСтр.ИмяОбъекта = СокрЛП(ИмяОбъекта);
	НовСтр.Описание = СокрЛП(Описание);
	Возврат НовСтр;
	
КонецФункции

Функция ОпределитьФорматВДеревеФормИФорматов(Форма, Версия, 
		ДатаПриказа = '00010101', НомерПриказа = "",
		ДатаНачалаДействия = Неопределено, ДатаОкончанияДействия = Неопределено, 
		ИмяОбъекта = "", Описание = "")
	
	НовСтр = Форма.Строки.Добавить();
	НовСтр.Код = СокрЛП(Версия);
	НовСтр.ДатаПриказа = ДатаПриказа;
	НовСтр.НомерПриказа = СокрЛП(НомерПриказа);
	НовСтр.ДатаНачалаДействия = ?(ДатаНачалаДействия = Неопределено, Форма.ДатаНачалаДействия, ДатаНачалаДействия);
	НовСтр.ДатаОкончанияДействия = ?(ДатаОкончанияДействия = Неопределено, Форма.ДатаОкончанияДействия, ДатаОкончанияДействия);
	НовСтр.ИмяОбъекта = СокрЛП(ИмяОбъекта);
	НовСтр.Описание = СокрЛП(Описание);
	Возврат НовСтр;
	
КонецФункции

#КонецОбласти

 мВерсияОтчета = "БПКОРП 3.0.42.54.4";
 
#КонецОбласти 


#КонецОбласти

#КонецЕсли






 