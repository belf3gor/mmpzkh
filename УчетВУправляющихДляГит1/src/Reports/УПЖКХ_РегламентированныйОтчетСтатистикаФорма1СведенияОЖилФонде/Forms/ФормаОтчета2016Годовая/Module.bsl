
#Область ОсновныеПроцедурыИФункции

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	// Обход ошибки платформы Параметр сеанса отсутствует или удален
	ПолеТабличногоДокументаФормаОтчета.Очистить();
	
	СформироватьСтруктуруРеквизитовФормы();
	
	СтруктураРеквизитовФормы.СписокПечатаемыхЛистов = Новый СписокЗначений;
	
	// ОПИСАНИЕ ПАРМЕТРОВ ФОРМЫ
	//
	// Версия формы
	СтруктураРеквизитовФормы.мВерсияФормы = "15/08/2016";
	// Код отчета, равен коду по ОКУД
	СтруктураРеквизитовФормы.мКодОтчета   = "0609200";
	
	СтруктураРеквизитовФормы.мПечатныеФормы = Новый СписокЗначений;
	
	ПолеТабличногоДокументаФормаОтчета.Вывести(Отчеты[Сред(Лев(ЭтаФорма.ИмяФормы, Найти(ЭтаФорма.ИмяФормы, ".Форма.") - 1), 7)].ПолучитьМакет("ФормаОтчета2016Годовая_ФормаОтчета"));

	СтруктураРеквизитовФормы.мВыбраннаяФорма          = Параметры.мВыбраннаяФорма;
	СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета  = Параметры.мДатаКонцаПериодаОтчета;
	СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета = Параметры.мДатаНачалаПериодаОтчета;
	СтруктураРеквизитовФормы.мПериодичность           = Параметры.мПериодичность;
	СтруктураРеквизитовФормы.мСкопированаФорма        = Параметры.мСкопированаФорма;
	СтруктураРеквизитовФормы.мСохраненныйДок          = Параметры.мСохраненныйДок;
	СтруктураРеквизитовФормы.Организация              = Параметры.Организация;
	
	ДатаПодписи = ТекущаяДатаСеанса();
	
	СтруктураРеквизитовФормы.СправочникиВидыКонтактнойИнформацииПочтовыйАдресОрганизации = Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресОрганизации;
	
	Инициализация(Параметры.БезОткрытияФормы);
	
КонецПроцедуры

&НаСервере
Процедура СформироватьСтруктуруРеквизитовФормы()
	
	СтруктураРеквизитовФормы = РегламентированнаяОтчетность.СформироватьСтруктуруОбязательныхРеквизитовСтатистическогоОтчета();
	
КонецПроцедуры

&НаСервере
Процедура Инициализация(БезОткрытияФормы = Ложь) Экспорт
	
	СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация = Ложь;
	
	ТекТабличноеПоле = ПолеТабличногоДокументаФормаОтчета;
	
	СтруктураРеквизитовФормы.ВидДокумента = 0;
	НомерКорректировки = 1;
	СтруктураРеквизитовФормы.мАдресвФорматеДляВыгрузки = "";
	
	Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
		
		Если СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено Тогда
			// документ скопирован
			ВосстановитьСохраненныеДанные();
		КонецЕсли;
		
		Модифицированность = Истина;
		
	Иначе
		
		// При открытии или при копировании сохраненного
		// отчета восстанавливаем сохраненные данные.
		ВосстановитьСохраненныеДанные();
		
		Если ЗначениеЗаполнено(СтруктураРеквизитовФормы.мСкопированаФорма) Тогда
			СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено;
		КонецЕсли;
		
	КонецЕсли;
	
	Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
		НомерКорректировки = 0;
	Иначе
		НомерКорректировки = СтруктураРеквизитовФормы.мСохраненныйДок.Вид;
	КонецЕсли;
	
	// Кварплата+
	ТекТабличноеПоле.Области.ДатаСоставленияОтчета.Текст = Формат(ДатаПодписи, "ДФ=""дд ММММ гггг 'г.'""");
	// Кварплата-
	
	ПоказатьПериод();
	
	Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Или СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация Тогда
		ЗаполнитьСведенияОбОрганизацииНаСервере();
	КонецЕсли;
	
	СтруктураРеквизитовФормы.НаимОрганизации = СтруктураРеквизитовФормы.Организация.Наименование;
	
	ТекущийЭлемент = Элементы["ПолеТабличногоДокументаФормаОтчета"];
	РегламентированнаяОтчетностьКлиентСервер.ПриИнициализацииФормыРегламентированногоОтчета(ЭтаФорма, "ФСГС");
	
КонецПроцедуры

// Процедура управляет показом в форме периода построения отчета.
//
&НаСервере
Процедура ПоказатьПериод()
	
	ПолеТабличногоДокументаФормаОтчета.Области.ПериодОтчета.Значение = Прав(Год(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета), 2);
	
КонецПроцедуры

// Восстанавливает сохраненные данные отчета.
//
&НаСервере
Процедура ВосстановитьСохраненныеДанные()
	Перем ДанныеМногострочныхРазделов;
	Перем ДанныеВариановАвтоЗаполнения;
	Перем ПоказателиОтчета;
	Перем ВерсияФормы;

	// В случае, если формы была скопирована по F9, то проверим, не изменилась ли организация.
	Если СтруктураРеквизитовФормы.Организация <> СтруктураРеквизитовФормы.мСохраненныйДок.Организация
	   И СтруктураРеквизитовФормы.Организация <> РегламентированнаяОтчетностьКлиентСервер.ПустоеЗначениеТипа("СправочникСсылка.Организации")
	   И СтруктураРеквизитовФормы.Организация <> Неопределено Тогда
		// Меняем переменную, для того, чтобы запустилась процедура ЗаполнитьСведенияОбОрганизации.
		СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация = Истина;
		//СтруктураРеквизитовФормы.мСохраненныйДок.Организация = СтруктураРеквизитовФормы.Организация;
	Иначе
		// восстанавливаем реквизиты отчета
		СтруктураРеквизитовФормы.Организация = СтруктураРеквизитовФормы.мСохраненныйДок.Организация;
	КонецЕсли;

	ДатаПодписи              = СтруктураРеквизитовФормы.мСохраненныйДок.ДатаПодписи;
	СтруктураРеквизитовФормы.ЕдиницаИзмерения         = СтруктураРеквизитовФормы.мСохраненныйДок.ЕдиницаИзмерения;
	СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = СтруктураРеквизитовФормы.мСохраненныйДок.ТочностьЕдиницыИзмерения;
	Комментарий                    = СтруктураРеквизитовФормы.мСохраненныйДок.Комментарий;

	// восстанавливаем сохраненные данные отчета
	СписокСохранения = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить();
	
	// восстанавливаем сохраненные данные вариантов автозаполнения ячеек
	Если СписокСохранения.Свойство("ДанныеВариантовАвтоЗаполнения", ДанныеВариановАвтоЗаполнения) Тогда
		
		Если НЕ ДанныеВариановАвтоЗаполнения = Неопределено Тогда
			
			мСтруктураВариантыЗаполнения.Очистить();
			
			Для Каждого ЭлементСтруктуры Из ДанныеВариановАвтоЗаполнения Цикл
				
				мСтруктураВариантыЗаполнения.Вставить(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Ключ);
				
				ЭтаФорма["ТаблицаВариантыЗаполнения" + ЭлементСтруктуры.Ключ].Очистить();
				
				Для Каждого ЭлементМассива Из ЭлементСтруктуры.Значение Цикл
										
					ТаблВарЗаполнения = ЭтаФорма["ТаблицаВариантыЗаполнения" + ЭлементСтруктуры.Ключ].Добавить().ТаблицаВариантовЗаполнения;
										
					ЗначениеВДанныеФормы(ЭлементМассива, ТаблВарЗаполнения);
					
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЕсли;
			
	КонецЕсли;

	// восстанавливаем версию формы
	СписокСохранения.Свойство("ВерсияФормы", ВерсияФормы);
	
	// восстанавливаем сохраненные данные многострочных разделов
	Если СписокСохранения.Свойство("ДанныеМногострочныхРазделов", ДанныеМногострочныхРазделов) И ДанныеМногострочныхРазделов <> Неопределено Тогда
		
		Для Каждого ЭлементСтруктуры Из ДанныеМногострочныхРазделов Цикл
			
			НайденноеЗначение = Неопределено;
			
			мСтруктураМногострочныхРазделов.Свойство(ЭлементСтруктуры.Ключ, НайденноеЗначение);
			
			Если НЕ НайденноеЗначение = Неопределено Тогда
				
				ЗначениеВДанныеФормы(ЭлементСтруктуры.Значение, ЭтаФорма[НайденноеЗначение]);
				
				ВывестиРазделВТабличныйДокументНаСервере(НайденноеЗначение, ЭтаФорма[НайденноеЗначение]);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	// восстановим сохраненные данные редактируемых ячеек
	СписокСохранения.Свойство( "ПоказателиОтчета", ПоказателиОтчета );
	
	Для Каждого ПоказателиСтраницы Из ПоказателиОтчета Цикл
		ИмяТекТабличноеПоле = ПоказателиСтраницы.Ключ;
		ТекТабличноеПоле    = ЭтаФорма[ИмяТекТабличноеПоле];
		ПоказателиТаблПоле  = ПоказателиСтраницы.Значение;

		Для Каждого Показатель Из ПоказателиТаблПоле Цикл
			ИмяПоказателя       = Показатель.Ключ;
			ЗначениеПоказателя  = Показатель.Значение;

			// установим значение в таблице
			Попытка
				Если Лев(ИмяПоказателя, 2) = "ЧН" Тогда
					// значение показателя с префиксом "ЧН" содержит формат представления нуля
					ОбластьПоказателя = ТекТабличноеПоле.Области[Сред(ИмяПоказателя, 3)];
					ОбластьПоказателя.Формат = РегламентированнаяОтчетностьКлиентСервер.ЗаменитьПредставлениеНуляВСтрокеФормата(ОбластьПоказателя.Формат, ЗначениеПоказателя);
					Продолжить;
				КонецЕсли;
				ТекТабличноеПоле.Области[ИмяПоказателя].Значение = ЗначениеПоказателя;
			Исключение
			КонецПопытки;
		КонецЦикла;
	КонецЦикла;

	СтруктураРеквизитовФормы.мАдресвФорматеДляВыгрузки = ПолеТабличногоДокументаФормаОтчета.Области.ОргАдрес.Значение;
	ПолеТабличногоДокументаФормаОтчета.Области.ОргАдрес.Значение = РегламентированнаяОтчетностьКлиентСервер.ПредставлениеАдресаВФормате9Запятых(СтруктураРеквизитовФормы.мАдресвФорматеДляВыгрузки);

	РегламентированнаяОтчетность.ОперацииПриВосстановленииРегламентированногоОтчета(ЭтаФорма);
	
	Модифицированность   = Ложь;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСведенияОбОрганизацииНаСервере(ВПрограммеИзмененаДатаПодписи = Ложь)
	
	РегламентированнаяОтчетностьКлиентСервер.ЗаполнитьСведенияОбОрганизацииДляОтчетаСтатистики(ЭтаФорма, ВПрограммеИзмененаДатаПодписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСведенияОбОрганизацииНаКлиенте(ВПрограммеИзмененаДатаПодписи = Ложь)
	
	РегламентированнаяОтчетностьКлиентСервер.ЗаполнитьСведенияОбОрганизацииДляОтчетаСтатистики(ЭтаФорма, ВПрограммеИзмененаДатаПодписи);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьОтчет(Команда)
	
	СохранитьНаКлиенте();
	
КонецПроцедуры

// СохранитьНаКлиенте()
&НаКлиенте
Процедура СохранитьНаКлиенте(Автосохранение = Ложь, ВыполняемоеОповещение = Неопределено) Экспорт
	
	Вариант = СтруктураРеквизитовФормы.ВидДокумента * НомерКорректировки;
	
	Если НЕ РегламентированнаяОтчетностьКлиент.ПриЗаписиРегламентированногоОтчетаНаКлиенте(ЭтаФорма, , Автосохранение, Вариант) Тогда
		Возврат;
	КонецЕсли;
	
	ПодобныйОтчетСуществует = Ложь;
	ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки = Ложь;
	
	// формируем данные редактируемых ячеек таблицы
	ПоказателиОтчета = Новый Структура();
	
	#Если ВебКлиент Тогда
		ЗаполнитьПоказателиОтчетаНаСервере(ПоказателиОтчета);
	#Иначе
		ЗаполнитьПоказателиОтчетаНаКлиенте(ПоказателиОтчета);
	#КонецЕсли
	
	РезультатСохранения = ПередСохранением(, ПодобныйОтчетСуществует, Вариант, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, Автосохранение, ПоказателиОтчета);
	
	ВидДокументаНомерКорректировкиИзменен = Неопределено;
	
	Если ПодобныйОтчетСуществует И Автосохранение Тогда
		Возврат;
	КонецЕсли;
	
	НуженВопросПередСохранением = (ПодобныйОтчетСуществует ИЛИ ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки);
	
	Если НуженВопросПередСохранением Тогда
		СохранитьНаКлиентеСВопросом(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, ПодобныйОтчетСуществует, ПоказателиОтчета);
	Иначе		
		ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения);		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНаКлиентеСВопросом(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, ПодобныйОтчетСуществует, ПоказателиОтчета)
	
	Если ПодобныйОтчетСуществует Тогда
		
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(КодВозвратаДиалога.Да, "Сохранить");
		Кнопки.Добавить(КодВозвратаДиалога.Нет, "Отмена");
		
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Отчет с видом %1 уже существует.
		|Сохранить отчет с таким же видом?'"), ?(Вариант = 0, """Первичный""", """Корректирующий/" + Вариант + """"));
		ДополнительныеПараметры = Новый Структура("Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, ПоказателиОтчета", Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, ПоказателиОтчета);
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросСохранитьОтчетСТакимЖеВидомЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, Кнопки, , Кнопки.Получить(1).Значение);
		
	Иначе
		
		СохранитьНаКлиентеСВопросомПродолжение(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, ПоказателиОтчета);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросСохранитьОтчетСТакимЖеВидомЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	Автосохранение = ДополнительныеПараметры.Автосохранение;
	Вариант = ДополнительныеПараметры.Вариант;
	ВыполняемоеОповещение = ДополнительныеПараметры.ВыполняемоеОповещение;
	ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки = ДополнительныеПараметры.ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки;
	ПоказателиОтчета = ДополнительныеПараметры.ПоказателиОтчета;
	
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		
		Возврат;
		
	КонецЕсли;
	
	СохранитьНаКлиентеСВопросомПродолжение(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, ПоказателиОтчета);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНаКлиентеСВопросомПродолжение(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, ПоказателиОтчета)
	
	Если ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки Тогда
		
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("ВидОтчета", Вариант);
		
		ФормаВопроса = РегламентированнаяОтчетностьКлиент.ПолучитьОбщуюФормуПоИмени("ВопросПриИзмененииВидаДокументаНомераКорректировки", ПараметрыФормы);
		
		ДополнительныеПараметры = Новый Структура("Автосохранение, Вариант, ВыполняемоеОповещение, ПоказателиОтчета", Автосохранение, Вариант, ВыполняемоеОповещение, ПоказателиОтчета);
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросПриИзмененииВидаДокументаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		
		ФормаВопроса.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
		ФормаВопроса.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		ФормаВопроса.Открыть();
		
	Иначе
		Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Сохраняется %1...'"), ЭтаФорма.Заголовок), , , БиблиотекаКартинок.Записать);
		РезультатСохранения = Сохранить(Автосохранение, , Вариант, Ложь, ПоказателиОтчета);
		ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПриИзмененииВидаДокументаЗавершение(КодВозврата, ДополнительныеПараметры) Экспорт
	
	Автосохранение = ДополнительныеПараметры.Автосохранение;
	Вариант = ДополнительныеПараметры.Вариант;
	ВыполняемоеОповещение = ДополнительныеПараметры.ВыполняемоеОповещение;
	ПоказателиОтчета = ДополнительныеПараметры.ПоказателиОтчета;
	
	Если КодВозврата = КодВозвратаДиалога.Да
		ИЛИ КодВозврата = КодВозвратаДиалога.Нет Тогда
		
		ВидДокументаНомерКорректировкиИзменен = ?(КодВозврата = КодВозвратаДиалога.Да, Истина, Ложь);
		
	Иначе
		
		Возврат;
		
	КонецЕсли;
	
	Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Сохраняется %1...'"), ЭтаФорма.Заголовок), , , БиблиотекаКартинок.Записать);
	РезультатСохранения = Сохранить(Автосохранение, , Вариант, ВидДокументаНомерКорректировкиИзменен, ПоказателиОтчета);
	ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения)
	
	КлючУникальности = СтруктураРеквизитовФормы.мСохраненныйДок;
	
	Если РезультатСохранения Тогда
		
		РегламентированнаяОтчетностьКлиент.ПослеЗаписиРегламентированногоОтчета(ЭтаФорма);
		
		Если ВыполняемоеОповещение <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ВыполняемоеОповещение);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры
// СохранитьНаКлиенте

// ПередСохранением()
//
&НаСервере
Функция ПередСохранением(КодИФНС = "не применимо", ПодобныйОтчетСуществует, Вариант, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, Автосохранение, ПоказателиОтчета)
	
	Если РегламентированнаяОтчетность.БылиИзмененыКлючевыеРеквизитыОтчета(ЭтаФорма, КодИФНС)
	   И РегламентированнаяОтчетность.СуществуетДокументСАналогичнымиРеквизитами(ЭтаФорма, КодИФНС) Тогда
		
		ПодобныйОтчетСуществует = Истина;
		
	КонецЕсли;
	
	СтруктураРеквизитовФормы.мЗаписываетсяНовыйДокумент = (СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено ИЛИ СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено);
	
	Если Вариант <> Неопределено И ((СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено) ИЛИ (СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено) ИЛИ (Вариант <> СтруктураРеквизитовФормы.мВариант)) Тогда
		
		Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено ИЛИ СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено Тогда
						
		ИначеЕсли Вариант <> СтруктураРеквизитовФормы.мВариант Тогда
			
			ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки = Истина;
								
		КонецЕсли;

	КонецЕсли;
	
	Если ПодобныйОтчетСуществует
	 ИЛИ ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки Тогда
	 
	 	Возврат Ложь;
		
 	КонецЕсли;
		
	Возврат Сохранить(Автосохранение, КодИФНС, Вариант, , ПоказателиОтчета);
		
КонецФункции

// Формирует структуру данных отчета и помещает в реквизит типа ХранилищеЗначения
// документа РегламентированныйОтчет.
// 
// При первом сохранении данных отчета создает новый документ этого вида.
// Структура данных отчета состоит из элементов:
//   - значения редактируемых реквизитов отчета;
//   - данные по многострочным разделам отчета;
//   - данные по  многостраничным разделам отчета;
//   - данные по вариантам заполнения реквизитов,
//     участвующих в автозаполнении.
//
&НаСервере
Функция Сохранить(Автосохранение = Ложь, КодИФНС = "не применимо", Вариант, ВидДокументаНомерКорректировкиИзменен = Неопределено, ПоказателиОтчета) Экспорт
	
	Если НЕ СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
		СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.ПолучитьОбъект();
	КонецЕсли;
			
	Если НЕ РегламентированнаяОтчетность.ПриЗаписиРегламентированногоОтчетаНаСервере(ЭтаФорма, КодИФНС, Автосохранение, Вариант, ВидДокументаНомерКорректировкиИзменен, СтруктураРеквизитовФормы.мСохраненныйДок) Тогда
		СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
		Возврат Ложь;
	КонецЕсли;

	// установим текущие значения реквизитов документа
	СтруктураРеквизитовФормы.мСохраненныйДок.ИсточникОтчета           = Метаданные.Отчеты[Сред(Лев(ЭтаФорма.ИмяФормы, Найти(ЭтаФорма.ИмяФормы, ".Форма.") - 1), 7)].Имя;
	СтруктураРеквизитовФормы.мСохраненныйДок.НаименованиеОтчета       = Метаданные.Отчеты[Сред(Лев(ЭтаФорма.ИмяФормы, Найти(ЭтаФорма.ИмяФормы, ".Форма.") - 1), 7)].ОсновнаяФорма.Синоним;
	СтруктураРеквизитовФормы.мСохраненныйДок.ДатаНачала               = СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета;
	СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания            = СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета;
	СтруктураРеквизитовФормы.мСохраненныйДок.Периодичность            = СтруктураРеквизитовФормы.мПериодичность;
	СтруктураРеквизитовФормы.мСохраненныйДок.ВыбраннаяФорма           = СтруктураРеквизитовФормы.мВыбраннаяФорма;
	СтруктураРеквизитовФормы.мСохраненныйДок.Организация              = СтруктураРеквизитовФормы.Организация;
	СтруктураРеквизитовФормы.мСохраненныйДок.ДатаПодписи              = ДатаПодписи;	
	СтруктураРеквизитовФормы.мСохраненныйДок.ЕдиницаИзмерения         = Неопределено;	
	СтруктураРеквизитовФормы.мСохраненныйДок.ТочностьЕдиницыИзмерения = СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения;	
	СтруктураРеквизитовФормы.мСохраненныйДок.ВидОтчетности            = Перечисления.ВидыОтчетности.РегламентированнаяОтчетность;	
	СтруктураРеквизитовФормы.мСохраненныйДок.Вид                      = Вариант;	
	СтруктураРеквизитовФормы.мСохраненныйДок.ПредставлениеВида        = РегламентированнаяОтчетность.ПредставлениеВидаДокумента(СтруктураРеквизитовФормы.мСохраненныйДок.Вид);	
	СтруктураРеквизитовФормы.мСохраненныйДок.Комментарий              = Комментарий;
	
	СтруктураРеквизитовФормы.мВариант = Вариант;

	// формируем список сохранения
	СписокСохранения = Новый Структура();
	
	// вставляем данные редактируемых ячеек таблицы	
	СписокСохранения.Вставить("ПоказателиОтчета", ПоказателиОтчета);

	// вставляем данные многострочных разделов
	ДанныеМногострочныхРазделов = Новый Структура;
	
	//Для Каждого ЭлементСтруктуры Из мСтруктураМногострочныхРазделов Цикл
	//	
	//	ДанныеМногострочныхРазделов.Вставить(ЭлементСтруктуры.Ключ, ДанныеФормыВЗначение(ЭтаФорма[ЭлементСтруктуры.Значение], Тип("ТаблицаЗначений")));
	//	
	//КонецЦикла;
	
	СписокСохранения.Вставить("ДанныеМногострочныхРазделов", ДанныеМногострочныхРазделов);

	// вставляем данные вариантов автозаполнения ячеек
	СписокСохранения.Вставить("ДанныеВариантовАвтоЗаполнения", Неопределено);

	// вствляем версию формы
	СписокСохранения.Вставить("ВерсияФормы", СтруктураРеквизитовФормы.мВерсияФормы);

	ХранилищеДанных = Новый ХранилищеЗначения(СписокСохранения);
	СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета = ХранилищеДанных;

	// записываем документ, хранящий данные отчета
	Попытка
		СтруктураРеквизитовФормы.мСохраненныйДок.Записать();
	Исключение
		
		Если НЕ Автосохранение Тогда
			
			Сообщение = Новый СообщениеПользователю;

			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), РегламентированнаяОтчетностьКлиентСервер.СформироватьТекстСообщения(ОписаниеОшибки()));

			Сообщение.Сообщить();
				
		КонецЕсли;
		
		СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
		
		Возврат Ложь;
		
	КонецПопытки;
		
	Модифицированность   = Ложь;
	
	СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;

	Возврат Истина;

КонецФункции

&НаКлиенте
Функция СобратьДанныеТекущегоТаблПоляНаКлиенте(ИмяТабличногоПоля) Экспорт
	
	Возврат РегламентированнаяОтчетностьКлиентСервер.СобратьДанныеТекущегоТаблПоля(ЭтаФорма, ИмяТабличногоПоля);
	
КонецФункции

&НаСервере
Функция СобратьДанныеТекущегоТаблПоляНаСервере(ИмяТабличногоПоля) Экспорт
	
	Возврат РегламентированнаяОтчетностьКлиентСервер.СобратьДанныеТекущегоТаблПоля(ЭтаФорма, ИмяТабличногоПоля);

КонецФункции

&НаСервере
Процедура ЗаполнитьПоказателиОтчетаНаСервере(ПоказателиОтчета)
	
	РегламентированнаяОтчетностьКлиентСервер.ЗаполнитьПоказателиОтчета(ЭтаФорма, ПоказателиОтчета);
	           	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоказателиОтчетаНаКлиенте(ПоказателиОтчета)
	
	РегламентированнаяОтчетностьКлиентСервер.ЗаполнитьПоказателиОтчета(ЭтаФорма, ПоказателиОтчета);
	
КонецПроцедуры

&НаКлиенте
Функция ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаКлиенте(ИмяЛиста = Неопределено) Экспорт
	
	ИдГрупп = Новый Структура;
	
	Возврат ОпределитьИдМногострочногоРазделаПоАктивнойСтранице(ЭтаФорма, ИмяЛиста, ИмяЛиста, ИдГрупп);

КонецФункции

&НаСервере
Функция ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ИмяЛиста = Неопределено) Экспорт
	
	ИдГрупп = Новый Структура;
	
	Возврат ОпределитьИдМногострочногоРазделаПоАктивнойСтранице(ЭтаФорма, ИмяЛиста, ИмяЛиста, ИдГрупп);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ОпределитьИдМногострочногоРазделаПоАктивнойСтранице(Форма, ИмяЛиста = Неопределено, ТекущаяСтраница, ИдГрупп)
	
	Перем ИмяГруппы;

	Если ИмяЛиста = Неопределено Тогда
		ИмяТекущейСтраницыПанели = ТекущаяСтраница.Имя;
	Иначе
		ИмяТекущейСтраницыПанели = ИмяЛиста;
	КонецЕсли;

	Если ИмяТекущейСтраницыПанели = "ФормаОтчета" Тогда
		
		ИмяГруппы = РегламентированнаяОтчетностьКлиентСервер.РазделТекущейОбласти(Форма, Форма.Элементы.ПолеТабличногоДокументаФормаОтчета.ТекущаяОбласть);
		
	КонецЕсли;

	Возврат ИмяГруппы;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьСтруктуруМногострочногоРаздела(Форма, ИмяГруппы) Экспорт
	
	Перем СтруктураГруппы;
	
	Форма.мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);
	
	СтруктураГруппы = Форма[СтруктураГруппы];
	
	ТекТабличноеПолеИмя = "ПолеТабличногоДокументаФормаОтчета";
	
	ТекТабличноеПоле = Форма[ТекТабличноеПолеИмя];
	
	Для НСтр = 1 По СтруктураГруппы.Количество() Цикл
		ТекСтрокаТаблицы = СтруктураГруппы[НСтр - 1];
		НСтрСтр = Формат(НСтр, "ЧГ=0");
		
		Для НомерГрафы = 1 По Форма.мСтруктураКолвоКолонокРазделов[ИмяГруппы] Цикл
			
			ИмяКолонки = ИмяГруппы + Формат(НомерГрафы, "ЧЦ=2; ЧВН=");
			
			Если СтруктураГруппы[0].Свойство(ИмяКолонки) Тогда
				
				ИмяЯчейки     = ИмяКолонки + "_" + НСтрСтр;
				ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяЯчейки];
				
				Если ОбластьЯчейки.СодержитЗначение = Истина Тогда
					ЗначениеЯчейки = ОбластьЯчейки.Значение;
				Иначе
					ЗначениеЯчейки = ОбластьЯчейки.Текст;
				КонецЕсли;
				
				ТекСтрокаТаблицы[ИмяКолонки] = ЗначениеЯчейки;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиРазделВТабличныйДокументНаСервере(ИмяГруппы, СтруктураГруппы) Экспорт
	
	ВывестиРазделВТабличныйДокумент(ЭтаФорма, ИмяГруппы, СтруктураГруппы);
	
КонецПроцедуры

&НаКлиенте
Процедура ВывестиРазделВТабличныйДокументНаКлиенте(ИмяГруппы, СтруктураГруппы) Экспорт
	
	ВывестиРазделВТабличныйДокумент(ЭтаФорма, ИмяГруппы, СтруктураГруппы);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ВывестиРазделВТабличныйДокумент(Форма, ИмяГруппы, СтруктураГруппы)
	
	Перем ИсходноеКоличествоСтрокГруппы;

	// Определим исходное колво строк многострочного раздела,
	// соответствующее бумажной форме отчета.
	Форма.мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);

	// реальное кол-во строк (колво заполненных строк)
	ТекущееКоличествоСтрокГруппы = СтруктураГруппы.Количество();
	
	ТекТабличноеПолеИмя = "ПолеТабличногоДокументаФормаОтчета";
	
	ТекТабличноеПоле = Форма[ТекТабличноеПолеИмя];
			
	// При восстановлении сохраненных данных отчета сравниваем исходное кол-во
	// отображаемых в форме строк многострочного раздела с реальным количеством
	// созданных строк в сохраненном отчете.
	Если ТекущееКоличествоСтрокГруппы > ИсходноеКоличествоСтрокГруппы Тогда
						
		РегламентированнаяОтчетностьКлиентСервер.ДобавитьНеобходимоеКоличествоДопСтрок(Форма, ТекТабличноеПоле, ТекТабличноеПолеИмя, ИсходноеКоличествоСтрокГруппы, ТекущееКоличествоСтрокГруппы, ИмяГруппы, СтруктураГруппы);
		
		Форма[ТекТабличноеПолеИмя] = ТекТабличноеПоле;
		
	КонецЕсли;
	
	ТекТабличноеПоле = Форма[ТекТабличноеПолеИмя];

	// выводим значения строк
	Для Каждого СтрокаТаблицы Из СтруктураГруппы Цикл
		
		Для НомерГрафы = 1 По Форма.мСтруктураКолвоКолонокРазделов[ИмяГруппы] Цикл
			
			КолонкаТаблицыИмя = ИмяГруппы + Формат(НомерГрафы, "ЧЦ=2; ЧВН=");
			
			Если СтруктураГруппы[0].Свойство(КолонкаТаблицыИмя) Тогда
				
				НомерСтрокиВТаблице      = СтруктураГруппы.Индекс(СтрокаТаблицы);
				НомерСтрокиВФормеТаблицы = НомерСтрокиВТаблице + 1;
				ИмяЯчейки                = КолонкаТаблицыИмя + "_" + НомерСтрокиВФормеТаблицы;
				ОбластьЯчейкиТаблицы     = ТекТабличноеПоле.Области[ИмяЯчейки];
				ЗначениеЯчейки           = СтрокаТаблицы[КолонкаТаблицыИмя];
				
				Если ОбластьЯчейкиТаблицы.СодержитЗначение Тогда
					// задаем значение ячейки
					ОбластьЯчейкиТаблицы.Значение = ЗначениеЯчейки;
					
				Иначе
					ОбластьЯчейкиТаблицы.Текст    = ЗначениеЯчейки;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если Найти(Заголовок, СтруктураРеквизитовФормы.СтрПериодОтчета) = 0 Тогда
		Заголовок = Заголовок + " за " + СтруктураРеквизитовФормы.СтрПериодОтчета;
	КонецЕсли;
	
	ОргСтр = " (" + СтруктураРеквизитовФормы.НаимОрганизации + ")";
	Если Найти(Заголовок, ОргСтр) = 0 Тогда
		Заголовок = Заголовок + ОргСтр;
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("ВыполнитьПроверкуПередОткрытием", 0.1, Истина);

КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПроверкуПередОткрытием()
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПриОткрытииЗавершение", ЭтотОбъект);
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередОткрытиемФормыРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытииЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Модифицированность = Ложь;
		Закрыть();
		Возврат;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
// Обработчик события "ПередЗакрытием" формы.
//
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	УПЖКХ_ТиповыеМетодыКлиент.ПередЗакрытиемРегламентированногоОтчета(ЭтаФорма, Отказ, СтандартнаяОбработка, ЗавершениеРаботы, ТекстПредупреждения);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриЗакрытии" формы.
//
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	ПриЗакрытииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПриЗакрытииНаСервере()
	
	УПЖКХ_ТиповыеМетодыСервер.ПриЗакрытииРегламентированногоОтчета(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолеТабличногоДокументаФормаОтчетаВыбор(Элемент, Область, СтандартнаяОбработка)
	
	Если Область.Имя = "ОргАдрес" Тогда
		РегламентированнаяОтчетностьКлиент.ОбработкаАдресаВСтатистическомОтчете(ЭтаФорма, Область, СтандартнаяОбработка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуКонтактнойИнформацииЗавершение(Результат, Параметры) Экспорт
	
	РегламентированнаяОтчетностьКлиент.ОбновитьАдресВТабличномДокументеСтатистическойОтчетности(Результат, Параметры.Область, СтруктураРеквизитовФормы);
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолеТабличногоДокументаФормаОтчетаПриИзмененииСодержимогоОбласти(Элемент, Область)
	
	Если Область.Имя = "ДатаСоставленияОтчета" Тогда 
		ДатаПодписи = Область.Значение;
		ЗаполнитьСведенияОбОрганизацииНаКлиенте(Истина);
		Модифицированность = Истина;
		Возврат;
	ИначеЕсли Область.Имя = "НомерКорректировки" Тогда 
		Если Область.Значение = 0 Тогда 
			СтруктураРеквизитовФормы.ВидДокумента = 0;
			НомерКорректировки = 0;
		Иначе 
			СтруктураРеквизитовФормы.ВидДокумента = 1;
			НомерКорректировки = Область.Значение;
		КонецЕсли;
		Модифицированность = Истина;
		Возврат;
	КонецЕсли;
	
	Если Область.СодержитЗначение И Область.ТипЗначения.СодержитТип(Тип("Число")) Тогда
		Если Область.Значение = 0 И Область.ТипЗначения.КвалификаторыЧисла.РазрядностьДробнойЧасти = 0 Тогда
			
			ФорматПредставленияНуля = РегламентированнаяОтчетностьКлиентСервер.ПолучитьПредставлениеНуляИзСтрокиФормата(Область.Формат);
			
			ОтображениеНуля = СокрЛП(Формат(0, РегламентированнаяОтчетностьКлиентСервер.ЗаменитьПредставлениеНуляВСтрокеФормата(Область.Формат, "ЧН=")));
			Если ПустаяСтрока(ОтображениеНуля) Тогда
				ОтображениеНуля = "0";
			КонецЕсли;
			ТипСтрокиЗаполнения = Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(СтрДлина(ОтображениеНуля), ДопустимаяДлина.Фиксированная));
			СтрокаЗаполнения = ТипСтрокиЗаполнения.ПривестиЗначение();
			
			Список = Новый СписокЗначений;
			Список.Добавить("ЧН=' '", "  <Пустое значение>    " + СтрокаЗаполнения);
			Список.Добавить("ЧН=" + ОтображениеНуля, "  Отображать как """ + ОтображениеНуля + """  ");
			
			НайденнаяСтрока = Список.НайтиПоЗначению(ФорматПредставленияНуля);
			
			ДополнительныеПараметры = Новый Структура("Область, Элемент", Область, Элемент); 
			ОписаниеОповещения = Новый ОписаниеОповещения("ПолеТабличногоДокументаФормаОтчетаПриИзмененииСодержимогоОбластиЗавершение", ЭтотОбъект, ДополнительныеПараметры);
						
			// Обход ошибок платформы: в тонком клиенте не работает ПоказатьВыборИзСписка (ПоказатьВыборИзМеню не работает в веб-клиенте 
			// и в событии ПриИзмененииСодержимогоОбласти табличного документа - где мы его и хотим использовать прежде всего).
			# Если ВебКлиент Тогда
			
				Если НайденнаяСтрока = Неопределено Тогда
					ПоказатьВыборИзСписка(ОписаниеОповещения, Список, Элемент);
				Иначе
					ПоказатьВыборИзСписка(ОписаниеОповещения, Список, Элемент, НайденнаяСтрока);
				КонецЕсли;
				
			#Иначе
				
				Список.ПоказатьВыборЭлемента(ОписаниеОповещения, "Выберите значение", Элемент);
					
			#КонецЕсли
			Модифицированность = Истина;
			Возврат;
			
		КонецЕсли;
	КонецЕсли;
	
	Модифицированность = Истина;
	
	ОбластьИмя = Элемент.ТекущаяОбласть.Имя;

	РасчетНаКлиенте("", ОбластьИмя);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолеТабличногоДокументаФормаОтчетаПриИзмененииСодержимогоОбластиЗавершение(СписокЭлемент, ДополнительныеПараметры) Экспорт
	
	Область = ДополнительныеПараметры.Область;
	Элемент = ДополнительныеПараметры.Элемент;
	
	Если СписокЭлемент <> Неопределено  Тогда
		
		Область.Формат = РегламентированнаяОтчетностьКлиентСервер.ЗаменитьПредставлениеНуляВСтрокеФормата(Область.Формат, СписокЭлемент.Значение);
		
	КонецЕсли;
	
	ОбластьИмя = Элемент.ТекущаяОбласть.Имя;
	
	РасчетНаКлиенте("", ОбластьИмя);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура РасчетНаКлиенте(ИмяСтраницыПанели = "", ОбластьИмя = "") Экспорт	

	Расчет(ЭтаФорма, ИмяСтраницыПанели, ОбластьИмя);

КонецПроцедуры

&НаСервере
Процедура РасчетНаСервере(ИмяСтраницыПанели = "", ОбластьИмя = "") Экспорт

	Расчет(ЭтаФорма, ИмяСтраницыПанели, ОбластьИмя);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура Расчет(Форма, ИмяТекущейСтраницыПанели = "", ОбластьИмя = "")
	
	Области = Форма.ПолеТабличногоДокументаФормаОтчета.Области;
	
	// Раздел 1
	Области.ЖФ102.Значение = Области.ЖФ103.Значение + Области.ЖФ104.Значение;
	Области.ЖФ202.Значение = Области.ЖФ203.Значение + Области.ЖФ204.Значение;
	Области.ЖФ302.Значение = Области.ЖФ303.Значение + Области.ЖФ304.Значение;
	Области.ЖФ101.Значение = Области.ЖФ102.Значение + Области.ЖФ105.Значение + Области.ЖФ109.Значение + Области.ЖФ110.Значение;
	Области.ЖФ201.Значение = Области.ЖФ202.Значение + Области.ЖФ205.Значение + Области.ЖФ209.Значение + Области.ЖФ210.Значение;
	Области.ЖФ301.Значение = Области.ЖФ302.Значение + Области.ЖФ305.Значение + Области.ЖФ309.Значение + Области.ЖФ310.Значение;
		//Области.ЖФ111.Значение = Области.ЖФ112.Значение + Области.ЖФ113.Значение;
		//Области.ЖФ211.Значение = Области.ЖФ212.Значение + Области.ЖФ213.Значение;
		//Области.ЖФ311.Значение = Области.ЖФ312.Значение + Области.ЖФ313.Значение;
	
	// Раздел 2
	Области.ЖФ117.Значение = Области.ЖФ217.Значение + Области.ЖФ317.Значение + Области.ЖФ417.Значение + Области.ЖФ517.Значение;
	Области.ЖФ118.Значение = Области.ЖФ218.Значение + Области.ЖФ318.Значение + Области.ЖФ418.Значение + Области.ЖФ518.Значение;
	Области.ЖФ119.Значение = Области.ЖФ219.Значение + Области.ЖФ319.Значение + Области.ЖФ419.Значение + Области.ЖФ519.Значение;
	Области.ЖФ120.Значение = Области.ЖФ220.Значение + Области.ЖФ320.Значение + Области.ЖФ420.Значение + Области.ЖФ520.Значение;
	Области.ЖФ121.Значение = Области.ЖФ220.Значение + Области.ЖФ321.Значение + Области.ЖФ421.Значение + Области.ЖФ521.Значение;
	Области.ЖФ122.Значение = Области.ЖФ222.Значение + Области.ЖФ322.Значение + Области.ЖФ422.Значение + Области.ЖФ522.Значение;
	Области.ЖФ123.Значение = Области.ЖФ223.Значение + Области.ЖФ323.Значение + Области.ЖФ423.Значение + Области.ЖФ523.Значение;
	
	// Раздел 3
	//Если НЕ Области.ЖФ223.Значение = 0 И НЕ Области.ЖФ423.Значение = 0 И НЕ Области.ЖФ623.Значение = 0
	//   И НЕ Области.ЖФ823.Значение = 0 И (НЕ Области.ЖФ1123.Значение = 0 ИЛИ НЕ Области.ЖФ1223.Значение = 0) Тогда
	//	Области.ЖФ124.Значение = Области.ЖФ223.Значение + Области.ЖФ423.Значение + Области.ЖФ623.Значение + Области.ЖФ823.Значение
	//						   + ?(Не Области.ЖФ1223.Значение = 0, Области.ЖФ1223.Значение, Области.ЖФ1123.Значение);
	//Иначе
	//	Области.ЖФ124.Значение = 0;
	//КонецЕсли;
	Если Не Области.ЖФ130.Значение = 0 И Не Области.ЖФ131.Значение = 0 Тогда
		
		Области.ЖФ129.Значение = Области.ЖФ130.Значение + Области.ЖФ131.Значение;
		
	ИначеЕсли Не Области.ЖФ130.Значение = 0 Тогда
		
		Области.ЖФ129.Значение = Области.ЖФ130.Значение;
		
	ИначеЕсли Не Области.ЖФ131.Значение = 0 Тогда
		
		Области.ЖФ129.Значение = Области.ЖФ131.Значение;
		
	Иначе
		
		Области.ЖФ129.Значение = 0;
		
	КонецЕсли;
	
	// Раздел 5
	Области.ЖФ149.Значение = Области.ЖФ157.Значение + Области.ЖФ151.Значение + Области.ЖФ152.Значение;
	//Области.ЖФ256.Значение = Области.ЖФ257.Значение + Области.ЖФ258.Значение + Области.ЖФ259.Значение;
	
	// Раздел 6
	Области.ЖФ158.Значение = Области.ЖФ159.Значение + Области.ЖФ160.Значение + Области.ЖФ161.Значение + Области.ЖФ162.Значение;
	Области.ЖФ163.Значение = Области.ЖФ164.Значение + Области.ЖФ165.Значение + Области.ЖФ166.Значение + Области.ЖФ167.Значение + Области.ЖФ168.Значение + Области.ЖФ169.Значение;
	Области.ЖФ170.Значение = Области.ЖФ157.Значение + Области.ЖФ158.Значение - Области.ЖФ163.Значение;

	
	// Гр. 5 = Сумма гр.: 6, 7, 8.
	//Для НомСтр = 1 По 4 Цикл
	//	ТекСумма = 0;
	//	Для НомКол = 6 По 8 Цикл
	//		ТекСумма = ТекСумма + мФормаОтчета.Области["П000001"
	//		+ Формат(НомСтр, "ЧЦ=4; ЧВН=; ЧГ=") + Формат(НомКол, "ЧЦ=2; ЧВН=; ЧГ=")].Значение;
	//	КонецЦикла;
	//	мФормаОтчета.Области["П000001" + Формат(НомСтр, "ЧЦ=4; ЧВН=; ЧГ=") + "05"].Значение = ТекСумма;
	//КонецЦикла;
	//
	//// Стр. 1 = Сумма стр.: 2, 3, 4.
	//Для НомКол = 3 По 8 Цикл
	//	ТекСумма = 0;
	//	Для НомСтр = 2 По 4 Цикл
	//		ТекСумма = ТекСумма + мФормаОтчета.Области["П000001"
	//		+ Формат(НомСтр, "ЧЦ=4; ЧВН=; ЧГ=") + Формат(НомКол, "ЧЦ=2; ЧВН=; ЧГ=")].Значение;
	//	КонецЦикла;
	//	мФормаОтчета.Области["П0000010001" + Формат(НомКол, "ЧЦ=2; ЧВН=; ЧГ=")].Значение = ТекСумма;
	//КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура Обновить(Команда)
	
	СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация = Истина;
	ЗаполнитьСведенияОбОрганизацииНаКлиенте();
	СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьОтчет(Команда)
	
	ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Внимание! Будут очищены все показатели отчета.%1Продолжить операцию?'"), Символы.ПС);
	ОписаниеОповещения = Новый ОписаниеОповещения("ОчиститьОтчетЗавершение", ЭтотОбъект);
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьОтчетЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Нет Тогда        
		Возврат;       
	Иначе        
		Очистить();       
	КонецЕсли;
	
КонецПроцедуры // ОчиститьОтчет()

// Процедура очищает содержимое редактируемых и вычисляемых
// ячеек табличного документа.
//
&НаКлиенте
Процедура Очистить() Экспорт
		
	ОчиститьТабличноеПолеНаСервере();

	// устанавливаем флаг модифицированности формы
	Модифицированность = Истина;

КонецПроцедуры

&НаСервере
Процедура ОчиститьТабличноеПолеНаСервере()
	
	// Список ячеек, которые очищать не нужно
	Перем СписокПоказателейНеПодлежащихОчистке;

	ВыбТабличноеПоле = ПолеТабличногоДокументаФормаОтчета;
	
	СписокПоказателейНеПодлежащихОчистке = Новый СписокЗначений;
	СписокПоказателейНеПодлежащихОчистке.Добавить(ВыбТабличноеПоле.Области["ОргНазв"].Значение,                  "ОргНазв");
	СписокПоказателейНеПодлежащихОчистке.Добавить(ВыбТабличноеПоле.Области["ОргАдрес"].Значение,                 "ОргАдрес");
	СписокПоказателейНеПодлежащихОчистке.Добавить(ВыбТабличноеПоле.Области["ОргКодОКТМО"].Значение,              "ОргКодОКТМО");
	СписокПоказателейНеПодлежащихОчистке.Добавить(ВыбТабличноеПоле.Области["Код1"].Значение,                     "Код1");
	СписокПоказателейНеПодлежащихОчистке.Добавить(ВыбТабличноеПоле.Области["Код2"].Значение,                     "Код2");
	СписокПоказателейНеПодлежащихОчистке.Добавить(ВыбТабличноеПоле.Области["Код3"].Значение,                     "Код3");
	СписокПоказателейНеПодлежащихОчистке.Добавить(ВыбТабличноеПоле.Области["Код4"].Значение,                     "Код4");
	СписокПоказателейНеПодлежащихОчистке.Добавить(ВыбТабличноеПоле.Области["ОргКодНазв"].Значение,               "ОргКодНазв");
	СписокПоказателейНеПодлежащихОчистке.Добавить(ВыбТабличноеПоле.Области["ОргКодЗнач"].Значение,               "ОргКодЗнач");
	СписокПоказателейНеПодлежащихОчистке.Добавить(ВыбТабличноеПоле.Области["ОргДолжностьИсп"].Значение,          "ОргДолжностьИсп");
	СписокПоказателейНеПодлежащихОчистке.Добавить(ВыбТабличноеПоле.Области["ОргИсполнитель"].Значение,           "ОргИсполнитель");
	СписокПоказателейНеПодлежащихОчистке.Добавить(ВыбТабличноеПоле.Области["ОргТелефонИсп"].Значение,            "ОргТелефонИсп");
	СписокПоказателейНеПодлежащихОчистке.Добавить(ВыбТабличноеПоле.Области["ОргАдресЭлектроннойПочты"].Значение, "ОргАдресЭлектроннойПочты");

	ВыбТабличноеПоле.Очистить();
	ВыбТабличноеПоле.Вывести(Отчеты[Сред(Лев(ЭтаФорма.ИмяФормы, Найти(ЭтаФорма.ИмяФормы, ".Форма.") - 1), 7)].ПолучитьМакет("ФормаОтчета2016Годовая_ФормаОтчета"));
	
	ПолеТабличногоДокументаФормаОтчета = ВыбТабличноеПоле;
	
	Для каждого ЭлементСписка Из СписокПоказателейНеПодлежащихОчистке Цикл
	
		ВыбТабличноеПоле.Области[ЭлементСписка.Представление].Значение = ЭлементСписка.Значение;
	
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура АктивизироватьЯчейку(Ячейка) Экспорт
	
	ИмяПоляТабличногоДокумента = "ПолеТабличногоДокументаФормаОтчета";
	
	НайденнаяОбласть = ЭтаФорма[ИмяПоляТабличногоДокумента].Области.Найти(Ячейка.ИмяЯчейки);
	
	Если НЕ НайденнаяОбласть = Неопределено Тогда
		
		Элементы[ИмяПоляТабличногоДокумента].ТекущаяОбласть = НайденнаяОбласть;
		
	ИначеЕсли Ячейка.СтрокаПП <> Неопределено И ЗначениеЗаполнено(Ячейка.СтрокаПП) Тогда
		
		НайденнаяОбласть = ЭтаФорма[ИмяПоляТабличногоДокумента].Области.Найти(Ячейка.ИмяЯчейки + Ячейка.СтрокаПП);
		
		Если НЕ НайденнаяОбласть = Неопределено Тогда
			
			Элементы[ИмяПоляТабличногоДокумента].ТекущаяОбласть = НайденнаяОбласть;
			
		Иначе
			
			НайденнаяОбласть = ЭтаФорма[ИмяПоляТабличногоДокумента].Области.Найти(Ячейка.ИмяЯчейки + "_" + Ячейка.СтрокаПП);
			
			Если НЕ НайденнаяОбласть = Неопределено Тогда
				
				Элементы[ИмяПоляТабличногоДокумента].ТекущаяОбласть = НайденнаяОбласть;
				
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		НайденнаяОбласть = ЭтаФорма[ИмяПоляТабличногоДокумента].Области.Найти(Ячейка.ИмяЯчейки + "1");
		
		Если НЕ НайденнаяОбласть = Неопределено Тогда
			
			Элементы[ИмяПоляТабличногоДокумента].ТекущаяОбласть = НайденнаяОбласть;
			
		Иначе
			
			НайденнаяОбласть = ЭтаФорма[ИмяПоляТабличногоДокумента].Области.Найти(Ячейка.ИмяЯчейки + "_1");
			
			Если НЕ НайденнаяОбласть = Неопределено Тогда
				
				Элементы[ИмяПоляТабличногоДокумента].ТекущаяОбласть = НайденнаяОбласть;
				
			Иначе
				
				Элементы[ИмяПоляТабличногоДокумента].ТекущаяОбласть = ЭтаФорма[ИмяПоляТабличногоДокумента].Область(Ячейка.ИмяЯчейки);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПечататьСразу(Команда)
	
	Отказ = Ложь;
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("Команда", Команда);
	ОписаниеОповещения = Новый ОписаниеОповещения("ПечататьСразуЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередПечатьюРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПечататьСразуЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;

	Команда = ДополнительныеПараметры.Команда;
		
	Если Команда <> Неопределено Тогда
		Печать(Команда.Имя);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьБланк(Команда)
	
	Отказ = Ложь;
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("Команда", Команда);
	ОписаниеОповещения = Новый ОписаниеОповещения("ПоказатьБланкЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередПечатьюРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьБланкЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;

	Команда = ДополнительныеПараметры.Команда;
		
	Если Команда <> Неопределено Тогда
		Печать(Команда.Имя);
	КонецЕсли;
	
КонецПроцедуры

// Процедура управляет выводом отчета на печать.
//
// Параметры:
//  ВидПечати - строка, задающая способ печати:
//              "ПоказатьБланк" - непосредственный вывод на печать;
//              "ПечататьСразу" - с предварительным просмотром.
//
&НаКлиенте
Процедура Печать(ВидПечати, НеИзФормыОтчета = Ложь) Экспорт
    
	Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1. Формируется печатная форма...'"), ЭтаФорма.Заголовок), , , БиблиотекаКартинок.Печать);
	
	Если НЕ ПечатьНаСервере(ВидПечати) Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ОткрытьФормуПредварительногоПросмотра(ЭтаФорма, ВидПечати, , СтруктураРеквизитовФормы.СписокПечатаемыхЛистов);
		
КонецПроцедуры

&НаСервере
Функция ПечатьНаСервере(ВидПечати)
	
	Если НЕ РегламентированнаяОтчетность.ПринтерДоступен() Тогда
		
		Сообщение = Новый СообщениеПользователю;

		Сообщение.Текст = НСтр("ru='Перед формированием печатных форм необходимо определить в системе принтер и задать его в качестве используемого по умолчанию!'");

		Сообщение.Сообщить();
		
		Возврат Ложь;
		
	КонецЕсли;
	
	ТабличныйДокумент = ЭтаФорма["ПолеТабличногоДокументаФормаОтчета"];
	
	СтруктураРеквизитовФормы.мПечатныеФормы.Очистить();
	
	ОбщиеРеквизитыРазделов = Новый Структура;
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("НаименованиеЛиста",  "Форма 1 ""Сведения о жилищном фонде""");
	СтруктураПараметров.Вставить("ОриентацияЛиста",    "Ландшафт");
	СтруктураПараметров.Вставить("ИмяСтраницы",        "Форма 1 ""Сведения о жилищном фонде""");
	Структурапараметров.Вставить("ИмяОбластиТаблПоля", "ПолеТабличногоДокументаФормаОтчета");
	СтруктураПараметров.Вставить("ВидПечати",          ВидПечати);
	
	РегламентированнаяОтчетность.ВывестиНаПечатьЛистОбщая(ЭтаФорма.Заголовок, СтруктураПараметров, ТабличныйДокумент, СтруктураРеквизитовФормы.мПечатныеФормы);
	РегламентированнаяОтчетность.УдалитьНомерКорректировки(СтруктураРеквизитовФормы.мПечатныеФормы[0].Значение);
	РегламентированнаяОтчетностьКлиентСервер.ПроставлениеНомеровЛистов(ЭтаФорма, , СтруктураРеквизитовФормы.СписокПечатаемыхЛистов);
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура ВыгрузитьЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьИзФормыПослеСохраненияЗавершение", ЭтотОбъект);
	Если Модифицированность Тогда
		СохранитьНаКлиенте(, ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьИзФормыЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ВыгрузитьОтчет(Истина);
	Иначе
		СпДокОсн = Новый СписокЗначений;
		СпДокОсн.Добавить(СтруктураРеквизитовФормы.мСохраненныйДок);
		ОшибкиОтчета = Новый Массив;
		РегламентированнаяОтчетностьКлиент.ПроверитьРегламентированныеОтчеты(СпДокОсн, ОшибкиОтчета);
		РегламентированнаяОтчетностьКлиент.ОткрытьФормуНавигацииПоОшибкамВыгрузки(ОшибкиОтчета);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузку(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьВыгрузкуЗавершение", ЭтотОбъект);

	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
		
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузкуЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПроверитьВыгрузкуОтчета();
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузкуОтчета()
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьВыгрузкуОтчетаЗавершение", ЭтотОбъект);
	
	Если НЕ ЗначениеЗаполнено(СтруктураРеквизитовФормы.Организация) Тогда
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Организация не выбрана! Выгрузка невозможна.'");
		Сообщение.Сообщить();
		Возврат;
		
	КонецЕсли;
	
	Если Модифицированность Тогда
		СохранитьНаКлиенте(,ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура ПроверитьВыгрузкуОтчетаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ФормаВыгрузкиРеглОтчета = ПолучитьФорму("Документ.ВыгрузкаРегламентированныхОтчетов.Форма.ФормаДокумента", , ЭтаФорма);
	
	СпДокОсн = Новый СписокЗначений;
	СпДокОсн.Добавить(СтруктураРеквизитовФормы.мСохраненныйДок);
	
	ФормаВыгрузкиРеглОтчета.Проверить(СпДокОсн);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьОтчет(ВыгружатьСОшибками = Ложь) Экспорт
	
	ДополнительныеПараметры = Новый Структура("ВыгружатьСОшибками", ВыгружатьСОшибками);
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьОтчетЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	Если Модифицированность Тогда
		СохранитьНаКлиенте(, ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура ВыгрузитьОтчетЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ФормаВыгрузкиРеглОтчета = ПолучитьФорму("Документ.ВыгрузкаРегламентированныхОтчетов.Форма.ФормаДокумента", , ЭтаФорма);
	
	СпДокОсн = Новый СписокЗначений;
	СпДокОсн.Добавить(СтруктураРеквизитовФормы.мСохраненныйДок);
	
	ФормаВыгрузкиРеглОтчета.СформироватьИЗаписать(СпДокОсн,,,,,,,,,ДополнительныеПараметры.ВыгружатьСОшибками);
	
КонецПроцедуры

&НаСервере
Функция ТекущийФорматВыгрузки(Организация)
	
	Возврат РегламентированнаяОтчетность.ФорматВыгрузкиСтатистическойОтчетностиВЭлектронномВиде(Организация);
	
КонецФункции

&НаКлиенте
Функция УниверсальнаяВыгрузка(ТекстВыгрузки = Неопределено, ПроверятьБлокировки = Истина, ИмяФайлаВыгрузки = "", ВыгружатьСОшибками = Ложь) Экспорт
	
	Перем ПараметрыВыгрузки;
	
	Если ТекущийФорматВыгрузки(СтруктураРеквизитовФормы.Организация) = Неопределено Тогда
		РегламентированнаяОтчетностьКлиент.ПоказатьФормуНастроекФорматаВыгрузкиСтатистическойОтчетностиВЭлектронномВиде(
			СтруктураРеквизитовФормы.Организация, Ложь, Истина);
			
		Возврат "НеВыбранФормат";
	КонецЕсли;
	
	Если Модифицированность Тогда
		
		Если Найти(Заголовок, СтруктураРеквизитовФормы.СтрПериодОтчета) = 0 Тогда
			ТекстЗаголовка = Заголовок + " за " + СтруктураРеквизитовФормы.СтрПериодОтчета;
		Иначе
			ТекстЗаголовка = Заголовок;
		КонецЕсли;
		
		ОргСтр = " (" + СтруктураРеквизитовФормы.НаимОрганизации + ")";
		Если Найти(Заголовок, ОргСтр) = 0 Тогда
			ТекстЗаголовка = ТекстЗаголовка + ОргСтр;
		КонецЕсли;
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Отчет """ + ТекстЗаголовка + """ не сохранен.";
		Сообщение.Сообщить();
		
		Возврат Ложь;
		
	КонецЕсли;
	
	ИмяФайлаВыгрузки = ПараметрыВыгрузки.ИмяФайла;
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти 

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ СТЫКОВКИ С СЕРВИСОМ СДАЧИ ОТЧЕТНОСТИ ЧЕРЕЗ ПРЕДСТАВИТЕЛЯ

#Область ПроцедурыИФункцииСтыковкиССервисомСдачиОтчетностиЧерезПредставителя

&НаКлиенте
Процедура ОтправитьЧерезПредставителя(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОтправитьЧерезПредставителяЗавершение", ЭтотОбъект);

	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьЧерезПредставителяЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ПриНажатииНаКнопкуОтправкиЧерезПредставителяВРегламентированномОтчете(ЭтаФорма, "ФСГС");
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВИнтернете(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьВИнтернетеЗавершение", ЭтотОбъект);

	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
		
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВИнтернетеЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ПроверитьВИнтернете(ЭтаФорма, "ФСГС");
	
КонецПроцедуры

#КонецОбласти 

#Область ПанельОтправкиВКонтролирующиеОрганы

&НаКлиенте
Процедура ОбновитьОтправку(Команда)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОбновитьОтправкуИзПанелиОтправки(ЭтаФорма, "ФСГС");
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаПротоколНажатие(Элемент)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьПротоколИзПанелиОтправки(ЭтаФорма, "ФСГС");
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьНеотправленноеИзвещение(Команда)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОтправитьНеотправленноеИзвещениеИзПанелиОтправки(ЭтаФорма, "ФСГС");
КонецПроцедуры

&НаКлиенте
Процедура ЭтапыОтправкиНажатие(Элемент)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьСостояниеОтправкиИзПанелиОтправки(ЭтаФорма, "ФСГС");
КонецПроцедуры

&НаКлиенте
Процедура КритическиеОшибкиОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылка, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьКритическиеОшибкиИзПанелиОтправки(ЭтаФорма, "ФСГС");
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьВКонтролирующийОрган(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверкаВозможностиВыгрузкиРегламентированногоОтчетаПередОтправкой", ЭтотОбъект);
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередОтправкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаВозможностиВыгрузкиРегламентированногоОтчетаПередОтправкой(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОтправитьВКонтролирующийОрганЗавершение", ЭтотОбъект);
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьВКонтролирующийОрганЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ПриНажатииНаКнопкуОтправкиВКонтролирующийОрган(ЭтаФорма, "ФСГС");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Форма", ЭтаФорма);
	Оповещение = Новый ОписаниеОповещения("ПослеСохраненияФормыЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	СохранитьНаКлиенте(, Оповещение);
КонецПроцедуры

&НаКлиенте
Процедура ПослеСохраненияФормыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	ДополнительныеПараметры.Форма.Закрыть();
КонецПроцедуры

#КонецОбласти 

#Область ПроцедурыПодсистемыКвартплаты

&НаКлиенте
// Процедуры заполнения
Процедура Заполнить(Команда)
	
	Оповещение = Новый ОписаниеОповещения("ЗаполнитьОтчетЗавершение", ЭтотОбъект);
	ПоказатьВопрос(Оповещение, "Перед автозаполнением произойдет очистка отчета. Продолжить?", РежимДиалогаВопрос.ДаНет, 0, КодВозвратаДиалога.Да);
	
КонецПроцедуры

&НаКлиенте
// Завершение обработчика нажатия кнопки "Заполнить".
//
Процедура ЗаполнитьОтчетЗавершение(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		ЗаполнитьАвто();
		РасчетНаКлиенте();
		
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьОтчетЗавершение()

////////////////////////////////////////////////////////////////////////////////
// ФУНКЦИИ АВТОЗАПОЛНЕНИЯ

&НаСервере
// Процедура производит автозаполнение формы регламентированного отчета.
//
Процедура ЗаполнитьАвто()
	
	Перем СписокМатериаловСтен;
	
	// Очищаем поле вывода отчета.
	ПолеТабличногоДокументаФормаОтчета.Очистить();
	
	ПолеТабличногоДокументаФормаОтчета.Вывести(Отчеты[Сред(Лев(ЭтаФорма.ИмяФормы, Найти(ЭтаФорма.ИмяФормы, ".Форма.") - 1), 7)].ПолучитьМакет("ФормаОтчета2016Годовая_ФормаОтчета"));
	
	Инициализация(Истина);
	
	НастройкиУказаны = Ложь;
	
	НастройкиУчетнойПолитикиТСЖОтказ = Ложь;
	
	НастройкиУчетнойПолитикиТСЖ = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьПараметрыУчетнойПолитикиЖКХ(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, СтруктураРеквизитовФормы.Организация, НастройкиУчетнойПолитикиТСЖОтказ);
	
	Если НастройкиУчетнойПолитикиТСЖОтказ Тогда
		Возврат;
	КонецЕсли;
	
	ТабДокумент = ПолеТабличногоДокументаФормаОтчета;
	
	ПолучитьСписокМатериаловСтен(СписокМатериаловСтен);
	
	СписокВидовЖилыхПомещений = Новый СписокЗначений;
	СписокВидовЖилыхПомещений.ЗагрузитьЗначения(Справочники.УПЖКХ_ВидыПомещений.ПолучитьСписокВидовПомещений(Истина));
	
	ТаблицаЖилыхПомещений = ПолучитьТаблицуЖилыхПомещений(СписокВидовЖилыхПомещений);
	Если ТаблицаЖилыхПомещений.Количество() = 0 Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Отсутствуют данные для заполнения отчета.");
		Возврат;
	КонецЕсли;
	
	ЗаполнитьРаздел1(ТабДокумент, ТаблицаЖилыхПомещений);
	ЗаполнитьРаздел2(ТабДокумент, ТаблицаЖилыхПомещений);
	ЗаполнитьРаздел3(ТабДокумент, ТаблицаЖилыхПомещений);
	ЗаполнитьРаздел4(ТабДокумент, СписокМатериаловСтен, ТаблицаЖилыхПомещений);
	// ЗаполнитьРаздел5(ТабДокумент, СписокМатериаловСтен, ТаблицаЖилыхПомещений);
	
КонецПроцедуры // ЗаполнитьАвто()

&НаСервере
// Возвращает таблицу жилых помещений в базе.
Функция ПолучитьТаблицуЖилыхПомещений(СписокВидовЖилыхПомещений)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УПЖКХ_Помещения.Ссылка КАК Квартира,
	|	УПЖКХ_Помещения.КоличествоКомнат,
	|	УПЖКХ_Помещения.Владелец КАК Здание,
	|	УПЖКХ_Помещения.Родитель
	|ПОМЕСТИТЬ врЖилыеПомещения
	|ИЗ
	|	Справочник.УПЖКХ_Помещения КАК УПЖКХ_Помещения
	|ГДЕ
	|	НЕ УПЖКХ_Помещения.ПометкаУдаления
	|	И УПЖКХ_Помещения.ВидПомещения В(&ВидыЖилыхПомещений)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Здание
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_Здания.Ссылка КАК Здание,
	|	КВП_Здания.Многоквартирное,
	|	КВП_Здания.ГодПостройки,
	|	КВП_Здания.ПроцентИзноса,
	|	КВП_Здания.МатериалСтен
	|ПОМЕСТИТЬ втЗдания
	|ИЗ
	|	Справочник.КВП_Здания КАК КВП_Здания
	|ГДЕ
	|	КВП_Здания.Ссылка В
	|			(ВЫБРАТЬ
	|				врЖилыеПомещения.Здание
	|			ИЗ
	|				врЖилыеПомещения КАК врЖилыеПомещения)
	|	И НЕ КВП_Здания.ПометкаУдаления
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Здание
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втЗдания.Здание,
	|	втЗдания.Многоквартирное КАК ЗданиеМногоквартирное,
	|	втЗдания.ГодПостройки КАК ЗданиеГодПостройки,
	|	втЗдания.ПроцентИзноса КАК ЗданиеПроцентИзноса,
	|	втЗдания.МатериалСтен КАК ЗданиеМатериалСтен,
	|	врЖилыеПомещения.Квартира КАК Квартира,
	|	врЖилыеПомещения.КоличествоКомнат,
	|	врЖилыеПомещения.Родитель
	|ПОМЕСТИТЬ врЖилыеПомещенияПодробно
	|ИЗ
	|	врЖилыеПомещения КАК врЖилыеПомещения
	|		ЛЕВОЕ СОЕДИНЕНИЕ втЗдания КАК втЗдания
	|		ПО врЖилыеПомещения.Здание = втЗдания.Здание
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Квартира
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ врЖилыеПомещения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ втЗдания
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_ПлощадьПомещенияСрезПоследних.Объект КАК Помещение,
	|	ЕСТЬNULL(КВП_ПлощадьПомещенияСрезПоследних.Площадь, 0) КАК ОбщаяПлощадь
	|ПОМЕСТИТЬ втПлощадиПомещений
	|ИЗ
	|	РегистрСведений.КВП_ПлощадьПомещения.СрезПоследних(
	|			&ДатаКон,
	|			Объект В
	|					(ВЫБРАТЬ
	|						врЖилыеПомещенияПодробно.Квартира
	|					ИЗ
	|						врЖилыеПомещенияПодробно КАК врЖилыеПомещенияПодробно)
	|				И ВидПлощади = ЗНАЧЕНИЕ(Справочник.УПЖКХ_ВидыПлощадей.ОбщаяПлощадь)) КАК КВП_ПлощадьПомещенияСрезПоследних
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Помещение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	врЖилыеПомещенияПодробно.Квартира,
	|	врЖилыеПомещенияПодробно.КоличествоКомнат,
	|	врЖилыеПомещенияПодробно.Здание,
	|	врЖилыеПомещенияПодробно.ЗданиеМногоквартирное,
	|	врЖилыеПомещенияПодробно.Родитель,
	|	врЖилыеПомещенияПодробно.ЗданиеГодПостройки,
	|	врЖилыеПомещенияПодробно.ЗданиеПроцентИзноса,
	|	врЖилыеПомещенияПодробно.ЗданиеМатериалСтен,
	|	ЕСТЬNULL(втПлощадиПомещений.ОбщаяПлощадь, 0) КАК ОбщаяПлощадь
	|ИЗ
	|	врЖилыеПомещенияПодробно КАК врЖилыеПомещенияПодробно
	|		ЛЕВОЕ СОЕДИНЕНИЕ втПлощадиПомещений КАК втПлощадиПомещений
	|		ПО врЖилыеПомещенияПодробно.Квартира = втПлощадиПомещений.Помещение";
	Запрос.УстановитьПараметр("ДатаКон",            СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	Запрос.УстановитьПараметр("ВидыЖилыхПомещений", СписокВидовЖилыхПомещений);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции // ПолучитьТаблицуЖилыхПомещений()

&НаСервере
// Формирует список материалов стен зданий.
Процедура ПолучитьСписокМатериаловСтен(СписокМатериаловСтен)
	
	МатериалСтенКаменные   = Справочники.КВП_МатериалСтен.НайтиПоНаименованию("Каменные", Истина);
	МатериалСтенПанельные  = Справочники.КВП_МатериалСтен.НайтиПоНаименованию("Панельные", Истина);
	МатериалСтенМонолитные = Справочники.КВП_МатериалСтен.НайтиПоНаименованию("Монолитные", Истина);
	СписокМатериаловСтен   = Новый СписокЗначений;
	// Не менять порядок добавления элементов в список!!!
	СписокМатериаловСтен.Добавить(МатериалСтенКаменные);
	СписокМатериаловСтен.Добавить(Справочники.КВП_МатериалСтен.Кирпичные);
	СписокМатериаловСтен.Добавить(МатериалСтенПанельные);
	СписокМатериаловСтен.Добавить(Справочники.КВП_МатериалСтен.Блочные);
	СписокМатериаловСтен.Добавить(МатериалСтенМонолитные);
	СписокМатериаловСтен.Добавить(Справочники.КВП_МатериалСтен.Смешанные);
	СписокМатериаловСтен.Добавить(Справочники.КВП_МатериалСтен.Деревянные);
	
КонецПроцедуры // ПолучитьСписокМатериаловСтен()

&НаСервере
// Процедура заполняет раздел 1.
Процедура ЗаполнитьРаздел1(ТабДокумент, ТаблицаЖилыхПомещений)
	
	МенеджерВременныхТаблиц        = Новый МенеджерВременныхТаблиц;
	Запрос                         = Новый Запрос;
	
	МассивВидовКонтактнойИнформации = Новый Массив;
	МассивВидовКонтактнойИнформации.Добавить(Справочники.ВидыКонтактнойИнформации.УПЖКХ_ПочтовыйАдресЗдания);
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("ВидыЖилыхПомещений",    СписокВидовЖилыхПомещений);
	Запрос.УстановитьПараметр("ДатаКон",               СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	Запрос.УстановитьПараметр("ТаблицаЖилыхПомещений", ТаблицаЖилыхПомещений);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаЖилыхПомещений.Квартира КАК Помещение,
	|	ТаблицаЖилыхПомещений.Здание,
	|	ТаблицаЖилыхПомещений.ЗданиеМногоквартирное,
	|	ТаблицаЖилыхПомещений.ОбщаяПлощадь
	|ПОМЕСТИТЬ врТаблицаЖилыхПомещений
	|ИЗ
	|	&ТаблицаЖилыхПомещений КАК ТаблицаЖилыхПомещений
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	врТаблицаЖилыхПомещений.Помещение,
	|	врТаблицаЖилыхПомещений.Здание,
	|	врТаблицаЖилыхПомещений.ЗданиеМногоквартирное,
	|	врТаблицаЖилыхПомещений.ОбщаяПлощадь,
	|	ЕСТЬNULL(КВП_СостояниеПомещения.Состояние, ЗНАЧЕНИЕ(Перечисление.КВП_СостоянияПомещения.ПустаяСсылка)) КАК СостояниеКвартиры,
	|	ЕСТЬNULL(КВП_СостояниеПомещения.КатегорияКвартиры, ЗНАЧЕНИЕ(Перечисление.КВП_КатегорииКвартир.ПустаяСсылка)) КАК КатегорияКвартиры
	|ПОМЕСТИТЬ втПомещения
	|ИЗ
	|	врТаблицаЖилыхПомещений КАК врТаблицаЖилыхПомещений
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КВП_СостояниеПомещения КАК КВП_СостояниеПомещения
	|		ПО врТаблицаЖилыхПомещений.Помещение = КВП_СостояниеПомещения.Объект
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УПЖКХ_СобственностьНаПомещенияСрезПоследних.Помещение,
	|	ЕСТЬNULL(УПЖКХ_СобственностьНаПомещенияСрезПоследних.ВидСобственности, ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыСобственности.ПустаяСсылка)) КАК ВидСобственности
	|ПОМЕСТИТЬ втВидыСобственностиПомещений
	|ИЗ
	|	РегистрСведений.УПЖКХ_СобственностьНаПомещения.СрезПоследних(
	|			&ДатаКон,
	|			Помещение В
	|				(ВЫБРАТЬ
	|					втПомещения.Помещение
	|				ИЗ
	|					втПомещения КАК втПомещения)) КАК УПЖКХ_СобственностьНаПомещенияСрезПоследних
	|ГДЕ
	|	УПЖКХ_СобственностьНаПомещенияСрезПоследних.Действует
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втПомещения.Помещение,
	|	втПомещения.Здание,
	|	втПомещения.СостояниеКвартиры,
	|	втПомещения.КатегорияКвартиры,
	|	втПомещения.ЗданиеМногоквартирное,
	|	втПомещения.ОбщаяПлощадь,
	|	ЕСТЬNULL(втВидыСобственностиПомещений.ВидСобственности, ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыСобственности.ПустаяСсылка)) КАК ВидСобственности
	|ПОМЕСТИТЬ втИтоговаяВидыСобственностиПомещений
	|ИЗ
	|	втПомещения КАК втПомещения
	|		ЛЕВОЕ СОЕДИНЕНИЕ втВидыСобственностиПомещений КАК втВидыСобственностиПомещений
	|		ПО втПомещения.Помещение = втВидыСобственностиПомещений.Помещение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УПЖКХ_СобственникиПомещенийСрезПоследних.Помещение КАК Помещение,
	|	УПЖКХ_СобственникиПомещенийСрезПоследних.Собственник КАК Собственник,
	|	УПЖКХ_СобственникиПомещенийСрезПоследних.ДоляСобственникаЧислитель,
	|	УПЖКХ_СобственникиПомещенийСрезПоследних.ДоляСобственникаЗнаменатель,
	|	ВЫБОР
	|		КОГДА НЕ УПЖКХ_СобственникиПомещенийСрезПоследних.Собственник ЕСТЬ NULL 
	|			ТОГДА ВЫБОР
	|					КОГДА УПЖКХ_СобственникиПомещенийСрезПоследних.Собственник ССЫЛКА Справочник.ФизическиеЛица
	|						ТОГДА ИСТИНА
	|					КОГДА УПЖКХ_СобственникиПомещенийСрезПоследних.Собственник ССЫЛКА Справочник.Контрагенты
	|							И УПЖКХ_СобственникиПомещенийСрезПоследних.Собственник.ЮридическоеФизическоеЛицо = ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ФизическоеЛицо)
	|						ТОГДА ИСТИНА
	|					ИНАЧЕ ЛОЖЬ
	|				КОНЕЦ
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК СобственностьГраждан,
	|	ВЫБОР
	|		КОГДА НЕ УПЖКХ_СобственникиПомещенийСрезПоследних.Собственник ЕСТЬ NULL 
	|			ТОГДА ВЫБОР
	|					КОГДА УПЖКХ_СобственникиПомещенийСрезПоследних.Собственник ССЫЛКА Справочник.Контрагенты
	|							И УПЖКХ_СобственникиПомещенийСрезПоследних.Собственник.ЮридическоеФизическоеЛицо = ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ЮридическоеЛицо)
	|						ТОГДА ИСТИНА
	|					ИНАЧЕ ЛОЖЬ
	|				КОНЕЦ
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК СобственностьЮрЛиц
	|ПОМЕСТИТЬ втСобственникиПомещений
	|ИЗ
	|	РегистрСведений.УПЖКХ_СобственникиПомещений.СрезПоследних(
	|			&ДатаКон,
	|			Помещение В
	|				(ВЫБРАТЬ
	|					втИтоговаяВидыСобственностиПомещений.Помещение
	|				ИЗ
	|					втИтоговаяВидыСобственностиПомещений КАК втИтоговаяВидыСобственностиПомещений)) КАК УПЖКХ_СобственникиПомещенийСрезПоследних
	|ГДЕ
	|	УПЖКХ_СобственникиПомещенийСрезПоследних.Действует
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втИтоговаяВидыСобственностиПомещений.Помещение,
	|	втИтоговаяВидыСобственностиПомещений.Здание,
	|	втИтоговаяВидыСобственностиПомещений.СостояниеКвартиры,
	|	втИтоговаяВидыСобственностиПомещений.КатегорияКвартиры,
	|	втИтоговаяВидыСобственностиПомещений.ЗданиеМногоквартирное,
	|	втИтоговаяВидыСобственностиПомещений.ВидСобственности,
	|	втСобственникиПомещений.СобственностьГраждан,
	|	втСобственникиПомещений.СобственностьЮрЛиц,
	|	СУММА(ВЫБОР
	|			КОГДА НЕ ЕСТЬNULL(втСобственникиПомещений.ДоляСобственникаЧислитель, 0) = 0
	|					И НЕ ЕСТЬNULL(втСобственникиПомещений.ДоляСобственникаЗнаменатель, 0) = 0
	|				ТОГДА втИтоговаяВидыСобственностиПомещений.ОбщаяПлощадь * втСобственникиПомещений.ДоляСобственникаЧислитель / втСобственникиПомещений.ДоляСобственникаЗнаменатель
	|			ИНАЧЕ втИтоговаяВидыСобственностиПомещений.ОбщаяПлощадь
	|		КОНЕЦ) КАК ОбщаяПлощадь
	|ПОМЕСТИТЬ втИтоговаяПоСобственникамПомещений
	|ИЗ
	|	втИтоговаяВидыСобственностиПомещений КАК втИтоговаяВидыСобственностиПомещений
	|		ЛЕВОЕ СОЕДИНЕНИЕ втСобственникиПомещений КАК втСобственникиПомещений
	|		ПО втИтоговаяВидыСобственностиПомещений.Помещение = втСобственникиПомещений.Помещение
	|
	|СГРУППИРОВАТЬ ПО
	|	втИтоговаяВидыСобственностиПомещений.Здание,
	|	втИтоговаяВидыСобственностиПомещений.Помещение,
	|	втИтоговаяВидыСобственностиПомещений.ЗданиеМногоквартирное,
	|	втИтоговаяВидыСобственностиПомещений.СостояниеКвартиры,
	|	втИтоговаяВидыСобственностиПомещений.ВидСобственности,
	|	втИтоговаяВидыСобственностиПомещений.КатегорияКвартиры,
	|	втСобственникиПомещений.СобственностьГраждан,
	|	втСобственникиПомещений.СобственностьЮрЛиц";
	Запрос.Выполнить();
	
	ЗапросПоЗданиям = Новый Запрос;
	ЗапросПоЗданиям.МенеджерВременныхТаблиц = Запрос.МенеджерВременныхТаблиц;
	ЗапросПоЗданиям.Текст = 
	"ВЫБРАТЬ
	|	втИтоговаяПоСобственникамПомещений.Здание КАК Объект
	|ИЗ
	|	втИтоговаяПоСобственникамПомещений КАК втИтоговаяПоСобственникамПомещений
	|
	|СГРУППИРОВАТЬ ПО
	|	втИтоговаяПоСобственникамПомещений.Здание";
	
	МассивОбъектов = ЗапросПоЗданиям.Выполнить().Выгрузить().ВыгрузитьКолонку("Объект");
	
	// Помещает в менеджер временных таблиц запроса таблицу контактной информации "втКонтактнаяИнформация".
	УПЖКХ_ТиповыеМетодыСервер.СформироватьТаблицуКонтактнойИнформацииОбъектов(Запрос.МенеджерВременныхТаблиц, МассивВидовКонтактнойИнформации, МассивОбъектов);
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	втКонтактнаяИнформация.Объект КАК Здание,
	|	втКонтактнаяИнформация.Регион,
	|	втКонтактнаяИнформация.Город
	|ПОМЕСТИТЬ втАдресаПоРегионуИГороду
	|ИЗ
	|	втКонтактнаяИнформация КАК втКонтактнаяИнформация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	втИтоговаяПоСобственникамПомещений.Помещение,
	|	втИтоговаяПоСобственникамПомещений.Здание,
	|	втИтоговаяПоСобственникамПомещений.СостояниеКвартиры,
	|	втИтоговаяПоСобственникамПомещений.КатегорияКвартиры,
	|	втИтоговаяПоСобственникамПомещений.ЗданиеМногоквартирное,
	|	втИтоговаяПоСобственникамПомещений.ОбщаяПлощадь,
	|	втИтоговаяПоСобственникамПомещений.ВидСобственности,
	|	втИтоговаяПоСобственникамПомещений.СобственностьГраждан,
	|	втИтоговаяПоСобственникамПомещений.СобственностьЮрЛиц,
	|	ВЫБОР
	|		КОГДА втАдресаПоРегионуИГороду.Регион ПОДОБНО ""%Москва%""
	|				ИЛИ втАдресаПоРегионуИГороду.Город ПОДОБНО ""%Москва%""
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ПринадлежащийМоскве,
	|	ВЫБОР
	|		КОГДА втАдресаПоРегионуИГороду.Регион ПОДОБНО ""%Санкт-Петербург%""
	|				ИЛИ втАдресаПоРегионуИГороду.Город ПОДОБНО ""%Санкт-Петербург%""
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ПринадлежащийСанктПетербургу,
	|	ВЫБОР
	|		КОГДА втАдресаПоРегионуИГороду.Регион ПОДОБНО ""%Севастополь%""
	|				ИЛИ втАдресаПоРегионуИГороду.Город ПОДОБНО ""%Севастополь%""
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ПринадлежащийСевастополю
	|ПОМЕСТИТЬ втПоПринадлежности
	|ИЗ
	|	втИтоговаяПоСобственникамПомещений КАК втИтоговаяПоСобственникамПомещений
	|		ЛЕВОЕ СОЕДИНЕНИЕ втАдресаПоРегионуИГороду КАК втАдресаПоРегионуИГороду
	|		ПО втИтоговаяПоСобственникамПомещений.Здание = втАдресаПоРегионуИГороду.Здание
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втПоПринадлежности.Помещение,
	|	втПоПринадлежности.Здание,
	|	втПоПринадлежности.СостояниеКвартиры,
	|	втПоПринадлежности.КатегорияКвартиры,
	|	втПоПринадлежности.ЗданиеМногоквартирное,
	|	втПоПринадлежности.ВидСобственности,
	|	втПоПринадлежности.СобственностьГраждан,
	|	втПоПринадлежности.СобственностьЮрЛиц,
	|	втПоПринадлежности.ПринадлежащийМоскве,
	|	втПоПринадлежности.ПринадлежащийСанктПетербургу,
	|	втПоПринадлежности.ПринадлежащийСевастополю,
	|	втПоПринадлежности.ОбщаяПлощадь / 1000 КАК Графа1,
	|	ВЫБОР
	|		КОГДА НЕ втПоПринадлежности.ЗданиеМногоквартирное
	|			ТОГДА втПоПринадлежности.ОбщаяПлощадь / 1000
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Графа2,
	|	ВЫБОР
	|		КОГДА втПоПринадлежности.ЗданиеМногоквартирное
	|			ТОГДА втПоПринадлежности.ОбщаяПлощадь / 1000
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Графа3
	|ПОМЕСТИТЬ втОсновная
	|ИЗ
	|	втПоПринадлежности КАК втПоПринадлежности";
	
	Запрос.Выполнить();
	
	ТекстЗапросаРезультат = 
	"ВЫБРАТЬ
	|	СУММА(втОсновная.Графа1) КАК Графа1,
	|	СУММА(втОсновная.Графа2) КАК Графа2,
	|	СУММА(втОсновная.Графа3) КАК Графа3
	|ИЗ
	|	втОсновная КАК втОсновная
	|ГДЕ "; // последний пробел в запросе не удалять!!!
	
	// Строки 01 и 02 заполняются суммированием указанных ниже строк.
	
	// Строка 01 = Сумма строк (02, 05, 08, 09), ИНАЧЕ брать из базы, т.е. раскомментировать строки ниже.
			//Запрос.Текст = СтрЗаменить(ТекстЗапросаРезультат, "ГДЕ", "");
			//Выборка = Запрос.Выполнить().Выбрать();
			//Если Выборка.Следующий() Тогда
			//	ТабДокумент.Области.ЖФ101.Значение = Выборка.Графа1;
			//	ТабДокумент.Области.ЖФ201.Значение = Выборка.Графа2;
			//	ТабДокумент.Области.ЖФ301.Значение = Выборка.Графа3;
			//КонецЕсли;
	
	// Строка 02 = Сумма строк (03, 04), ИНАЧЕ брать из базы, т.е. раскомментировать строки ниже.
			//Запрос.Текст = ТекстЗапросаРезультат + "втОсновная.ВидСобственности = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыСобственности.Частная)";
			//Выборка = Запрос.Выполнить().Выбрать();
			//Если Выборка.Следующий() Тогда
			//	ТабДокумент.Области.ЖФ102.Значение = Выборка.Графа1;
			//	ТабДокумент.Области.ЖФ202.Значение = Выборка.Графа2;
			//	ТабДокумент.Области.ЖФ302.Значение = Выборка.Графа3;
			//КонецЕсли;
	
	// Строка 03.
	Запрос.Текст = ТекстЗапросаРезультат + "втОсновная.СобственностьГраждан И втОсновная.ВидСобственности = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыСобственности.Частная)";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ТабДокумент.Области.ЖФ103.Значение = Выборка.Графа1;
		ТабДокумент.Области.ЖФ203.Значение = Выборка.Графа2;
		ТабДокумент.Области.ЖФ303.Значение = Выборка.Графа3;
	КонецЕсли;
	
	// Строка 04.
	Запрос.Текст = ТекстЗапросаРезультат + "втОсновная.СобственностьЮрЛиц И втОсновная.ВидСобственности = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыСобственности.Частная)";
	Запрос.УстановитьПараметр("СобственностьЮрЛиц", Истина);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ТабДокумент.Области.ЖФ104.Значение = Выборка.Графа1;
		ТабДокумент.Области.ЖФ204.Значение = Выборка.Графа2;
		ТабДокумент.Области.ЖФ304.Значение = Выборка.Графа3;
	КонецЕсли;
	
	// Строка 05.
	Запрос.Текст = ТекстЗапросаРезультат + "(втОсновная.ВидСобственности = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыСобственности.Государственная) ИЛИ втОсновная.ВидСобственности = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыСобственности.Ведомственная))";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ТабДокумент.Области.ЖФ105.Значение = Выборка.Графа1;
		ТабДокумент.Области.ЖФ205.Значение = Выборка.Графа2;
		ТабДокумент.Области.ЖФ305.Значение = Выборка.Графа3;
	КонецЕсли;
	
	// Строка 06.
	Запрос.Текст = ТекстЗапросаРезультат + "(втОсновная.ВидСобственности = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыСобственности.Государственная) ИЛИ втОсновная.ВидСобственности = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыСобственности.Ведомственная))
											| И втОсновная.ПринадлежащийМоскве";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ТабДокумент.Области.ЖФ106.Значение = Выборка.Графа1;
		ТабДокумент.Области.ЖФ206.Значение = Выборка.Графа2;
		ТабДокумент.Области.ЖФ306.Значение = Выборка.Графа3;
	КонецЕсли;
	
	// Строка 07.
	Запрос.Текст = ТекстЗапросаРезультат + "(втОсновная.ВидСобственности = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыСобственности.Государственная) ИЛИ втОсновная.ВидСобственности = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыСобственности.Ведомственная))
											| И втОсновная.ПринадлежащийСанктПетербургу";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ТабДокумент.Области.ЖФ107.Значение = Выборка.Графа1;
		ТабДокумент.Области.ЖФ207.Значение = Выборка.Графа2;
		ТабДокумент.Области.ЖФ307.Значение = Выборка.Графа3;
	КонецЕсли;
	
	// Строка 08С.
	Запрос.Текст = ТекстЗапросаРезультат + "(втОсновная.ВидСобственности = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыСобственности.Государственная) ИЛИ втОсновная.ВидСобственности = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыСобственности.Ведомственная))
											| И втОсновная.ПринадлежащийСевастополю";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ТабДокумент.Области.ЖФ108.Значение = Выборка.Графа1;
		ТабДокумент.Области.ЖФ208.Значение = Выборка.Графа2;
		ТабДокумент.Области.ЖФ308.Значение = Выборка.Графа3;
	КонецЕсли;
	
	// Строка 09.
	Запрос.Текст = ТекстЗапросаРезультат + "втОсновная.ВидСобственности = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыСобственности.Муниципальная)";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ТабДокумент.Области.ЖФ109.Значение = Выборка.Графа1;
		ТабДокумент.Области.ЖФ209.Значение = Выборка.Графа2;
		ТабДокумент.Области.ЖФ309.Значение = Выборка.Графа3;
	КонецЕсли;
	
	// Строка 10.
	Запрос.Текст = ТекстЗапросаРезультат + "НЕ втОсновная.ВидСобственности В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыСобственности.Частная),
																			| ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыСобственности.Государственная),
																			| ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыСобственности.Ведомственная),
																			| ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыСобственности.Муниципальная))";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ТабДокумент.Области.ЖФ110.Значение = Выборка.Графа1;
		ТабДокумент.Области.ЖФ210.Значение = Выборка.Графа2;
		ТабДокумент.Области.ЖФ310.Значение = Выборка.Графа3;
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьРаздел1()

&НаСервере
// Процедура заполняет раздел 2.
Процедура ЗаполнитьРаздел2(ТабДокумент, ТаблицаЖилыхПомещений)
	
	МенеджерВременныхТаблиц        = Новый МенеджерВременныхТаблиц;
	Запрос                         = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст                   = ПолучитьТекстЗапросаПоРазделу2();
	
	Запрос.УстановитьПараметр("ВидыЖилыхПомещений",    СписокВидовЖилыхПомещений);
	Запрос.УстановитьПараметр("ДатаКон",               СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	Запрос.УстановитьПараметр("ТаблицаЖилыхПомещений", ТаблицаЖилыхПомещений);
	Запрос.Выполнить();
	
	ТекстЗапросаРезультат = 
	"ВЫБРАТЬ
	|	СУММА(втОсновная.КоличествоКвартир) КАК КоличествоКвартир,
	|	СУММА(втОсновная.ОбщаяПлощадь) КАК ОбщаяПлощадь
	|ИЗ
	|	втОсновная КАК втОсновная
	|ГДЕ &ПризнакМногоквартирности";
	
	СписокСоответствийГраф = Новый Соответствие;
	СписокСоответствийГраф.Вставить(2, "И втОсновная.Однокомнатные");
	СписокСоответствийГраф.Вставить(3, "И втОсновная.Двухкомнатные");
	СписокСоответствийГраф.Вставить(4, "И втОсновная.Трехкомнатные");
	СписокСоответствийГраф.Вставить(5, "И втОсновная.ЧетырехИБолееКомнатные");
	
	// По многоквартирным жилым домам для строк: 17, 18, 19.
	ТекстЗапросаРезультатМногоквартирные = СтрЗаменить(ТекстЗапросаРезультат, "&ПризнакМногоквартирности", "втОсновная.ЗданиеМногоквартирное ");
	Для текСтрока = 17 По 19 Цикл
		Для Каждого ТекСоответствие Из СписокСоответствийГраф Цикл
			Запрос.Текст = ?(текСтрока = 18, ТекстЗапросаРезультатМногоквартирные + ТекСоответствие.Значение + " И ЭтоЧастнаяКвартира",
											 ТекстЗапросаРезультатМногоквартирные + ТекСоответствие.Значение);
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				ИмяОбласти = "ЖФ" + ТекСоответствие.Ключ + текСтрока;
				ТабДокумент.Области[ИмяОбласти].Значение = ?(текСтрока = 19, Выборка.ОбщаяПлощадь,
																			 Выборка.КоличествоКвартир);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	// По немногоквартирным жилым домам для строк: 22 и 23.
	ТекстЗапросаРезультатНеМногоквартирные = СтрЗаменить(ТекстЗапросаРезультат, "&ПризнакМногоквартирности", "Не втОсновная.ЗданиеМногоквартирное ");
	Для текСтрока = 22 По 23 Цикл
		Для Каждого ТекСоответствие Из СписокСоответствийГраф Цикл
			Запрос.Текст = ТекстЗапросаРезультатНеМногоквартирные + ТекСоответствие.Значение;
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				ИмяОбласти = "ЖФ" + ТекСоответствие.Ключ + текСтрока;
				ТабДокумент.Области[ИмяОбласти].Значение = ?(текСтрока = 23, Выборка.ОбщаяПлощадь,
																			 Выборка.КоличествоКвартир);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьРаздел2()

&НаСервере
// Возвращает текст запроса по разделу 2.
Функция ПолучитьТекстЗапросаПоРазделу2()
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаЖилыхПомещений.Квартира,
	|	ТаблицаЖилыхПомещений.ЗданиеМногоквартирное,
	|	ТаблицаЖилыхПомещений.Родитель,
	|	ТаблицаЖилыхПомещений.КоличествоКомнат,
	|	ТаблицаЖилыхПомещений.ОбщаяПлощадь
	|ПОМЕСТИТЬ втЖилыеКвартиры
	|ИЗ
	|	&ТаблицаЖилыхПомещений КАК ТаблицаЖилыхПомещений
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Комнаты.Ссылка) КАК КолВоКомнат,
	|	Комнаты.Родитель КАК Квартира
	|ПОМЕСТИТЬ втКомнаты
	|ИЗ
	|	Справочник.УПЖКХ_Помещения КАК Комнаты
	|ГДЕ
	|	НЕ Комнаты.Родитель = ЗНАЧЕНИЕ(Справочник.УПЖКХ_Помещения.ПустаяСсылка)
	|	И НЕ Комнаты.ПометкаУдаления
	|
	|СГРУППИРОВАТЬ ПО
	|	Комнаты.Родитель
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	втЖилыеКвартиры.Квартира,
	|	втЖилыеКвартиры.ЗданиеМногоквартирное,
	|	втЖилыеКвартиры.ОбщаяПлощадь,
	|	ВЫБОР
	|		КОГДА НЕ втКомнаты.КолВоКомнат = 0
	|			ТОГДА втКомнаты.КолВоКомнат
	|		КОГДА НЕ втЖилыеКвартиры.КоличествоКомнат = 0
	|			ТОГДА втЖилыеКвартиры.КоличествоКомнат
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК КоличествоКомнат
	|ПОМЕСТИТЬ втКолКомнат
	|ИЗ
	|	втЖилыеКвартиры КАК втЖилыеКвартиры
	|		ЛЕВОЕ СОЕДИНЕНИЕ втКомнаты КАК втКомнаты
	|		ПО втЖилыеКвартиры.Квартира = втКомнаты.Квартира
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втКолКомнат.Квартира,
	|	втКолКомнат.ЗданиеМногоквартирное,
	|	втКолКомнат.ОбщаяПлощадь,
	|	втКолКомнат.КоличествоКомнат
	|ПОМЕСТИТЬ втИтоговая
	|ИЗ
	|	втКолКомнат КАК втКолКомнат
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УПЖКХ_СобственностьНаПомещенияСрезПоследних.Помещение КАК Квартира,
	|	УПЖКХ_СобственностьНаПомещенияСрезПоследних.ВидСобственности
	|ПОМЕСТИТЬ втСобственностьНаПомещениЧастная
	|ИЗ
	|	РегистрСведений.УПЖКХ_СобственностьНаПомещения.СрезПоследних(
	|			&ДатаКон,
	|			Помещение В
	|				(ВЫБРАТЬ
	|					втИтоговая.Квартира
	|				ИЗ
	|					втИтоговая КАК втИтоговая)) КАК УПЖКХ_СобственностьНаПомещенияСрезПоследних
	|ГДЕ
	|	УПЖКХ_СобственностьНаПомещенияСрезПоследних.Действует
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ втИтоговая.Квартира) КАК КоличествоКвартир,
	|	втИтоговая.ЗданиеМногоквартирное,
	|	ВЫБОР
	|		КОГДА втСобственностьНаПомещениЧастная.ВидСобственности = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыСобственности.Частная)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоЧастнаяКвартира,
	|	втИтоговая.КоличествоКомнат,
	|	СУММА(втИтоговая.ОбщаяПлощадь) / 1000 КАК ОбщаяПлощадь,
	|	ВЫБОР
	|		КОГДА втИтоговая.КоличествоКомнат = 1
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Однокомнатные,
	|	ВЫБОР
	|		КОГДА втИтоговая.КоличествоКомнат = 2
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Двухкомнатные,
	|	ВЫБОР
	|		КОГДА втИтоговая.КоличествоКомнат = 3
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Трехкомнатные,
	|	ВЫБОР
	|		КОГДА втИтоговая.КоличествоКомнат >= 4
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЧетырехИБолееКомнатные
	|ПОМЕСТИТЬ втОсновная
	|ИЗ
	|	втИтоговая КАК втИтоговая
	|		ЛЕВОЕ СОЕДИНЕНИЕ втСобственностьНаПомещениЧастная КАК втСобственностьНаПомещениЧастная
	|		ПО втИтоговая.Квартира = втСобственностьНаПомещениЧастная.Квартира
	|
	|СГРУППИРОВАТЬ ПО
	|	втИтоговая.ЗданиеМногоквартирное,
	|	втИтоговая.КоличествоКомнат,
	|	ВЫБОР
	|		КОГДА втСобственностьНаПомещениЧастная.ВидСобственности = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыСобственности.Частная)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(втОсновная.КоличествоКвартир) КАК КоличествоКвартир,
	|	СУММА(втОсновная.ОбщаяПлощадь) КАК ОбщаяПлощадь
	|ИЗ
	|	втОсновная КАК втОсновная";
	
	Возврат ТекстЗапроса;
	
КонецФункции // ПолучитьТекстЗапросаПоРазделу2()

&НаСервере
// Процедура заполняет раздел 3.
Процедура ЗаполнитьРаздел3(ТабДокумент, ТаблицаЖилыхПомещений)
	
	СписокВидовЖилыхПомещений = Новый СписокЗначений;
	МассивЗначений            = Справочники.УПЖКХ_ВидыПомещений.ПолучитьСписокВидовПомещений(Истина);
	СписокВидовЖилыхПомещений.ЗагрузитьЗначения(МассивЗначений);
	
	ВидыБлагоустройств = Новый СписокЗначений;
	ВидыБлагоустройств.Добавить(Справочники.КВП_ВидыБлагоустройстваОбъектов.Ванна);
	ВидыБлагоустройств.Добавить(Справочники.КВП_ВидыБлагоустройстваОбъектов.Ванная);
	ВидыБлагоустройств.Добавить(Справочники.КВП_ВидыБлагоустройстваОбъектов.ГорячееВодоснабжение);
	ВидыБлагоустройств.Добавить(Справочники.КВП_ВидыБлагоустройстваОбъектов.Канализация);
	ВидыБлагоустройств.Добавить(Справочники.КВП_ВидыБлагоустройстваОбъектов.Отопление);
	ВидыБлагоустройств.Добавить(Справочники.КВП_ВидыБлагоустройстваОбъектов.Плита);
	ВидыБлагоустройств.Добавить(Справочники.КВП_ВидыБлагоустройстваОбъектов.ХолодноеВодоснабжение);
	ВидыБлагоустройств.Добавить(Справочники.КВП_ВидыБлагоустройстваОбъектов.ЦентрализованноеОтопление);
	ВидыБлагоустройств.Добавить(Справочники.КВП_ВидыБлагоустройстваОбъектов.Мусоропровод);
	ВидыБлагоустройств.Добавить(Справочники.КВП_ВидыБлагоустройстваОбъектов.Лифт);
	
	// Список возможных значений благоустройств, установленных пользователем.
	СписокЗначенийБлагоустройства = Новый СписокЗначений;
	СписокЗначенийБлагоустройства.Добавить(Истина);
	СписокЗначенийБлагоустройства.Добавить("ДА");
	СписокЗначенийБлагоустройства.Добавить("да");
	СписокЗначенийБлагоустройства.Добавить("Да");
	СписокЗначенийБлагоустройства.Добавить("Имеется");
	СписокЗначенийБлагоустройства.Добавить("имеется");
	СписокЗначенийБлагоустройства.Добавить("Присутствует");
	СписокЗначенийБлагоустройства.Добавить("присутствует");
	СписокЗначенийБлагоустройства.Добавить("Есть");
	СписокЗначенийБлагоустройства.Добавить("есть");
	СписокЗначенийБлагоустройства.Добавить("+");
	СписокЗначенийБлагоустройства.Добавить(Перечисления.КВП_Плита.Электрическая);
	СписокЗначенийБлагоустройства.Добавить(Перечисления.КВП_Плита.Газовая);
	СписокЗначенийБлагоустройства.Добавить(Перечисления.УПЖКХ_ТипыГорячегоВодоснабжения.Централизованное);
	СписокЗначенийБлагоустройства.Добавить(Перечисления.УПЖКХ_ТипыХолодногоВодоснабжения.Централизованное);
	
	Запрос       = Новый Запрос;
	Запрос.Текст = ПолучитьТекстЗапросаПоРазделу3();
	
	Запрос.УстановитьПараметр("ВидыЖилыхПомещений",            СписокВидовЖилыхПомещений);
	Запрос.УстановитьПараметр("ДатаКон",                       СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	Запрос.УстановитьПараметр("ВидБлагоустройства",            ВидыБлагоустройств);
	Запрос.УстановитьПараметр("ТаблицаЖилыхПомещений",         ТаблицаЖилыхПомещений);
	Запрос.УстановитьПараметр("СписокЗначенийБлагоустройства", СписокЗначенийБлагоустройства);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		ТабДокумент.Области.ЖФ124.Значение  = Выборка.ОбщаяПлощадь;
		
		ТабДокумент.Области.ЖФ224.Значение  = Выборка.Водопровод;
		ТабДокумент.Области.ЖФ324.Значение  = Выборка.ЦентрализованныйВодопровод;
		
		ТабДокумент.Области.ЖФ424.Значение  = Выборка.Канализация;
		ТабДокумент.Области.ЖФ524.Значение  = Выборка.ЦентральнаяКанализация;
		
		ТабДокумент.Области.ЖФ624.Значение  = Выборка.ОтоплениеПлощадь;
		ТабДокумент.Области.ЖФ724.Значение  = Выборка.ЦентрализованноеОтоплениеПлощадь;
		
		ТабДокумент.Области.ЖФ824.Значение  = Выборка.ГорячееВодоснабжение;
		ТабДокумент.Области.ЖФ924.Значение  = Выборка.ЦентрализованноеГорячееВодоснабжение;
		
		ТабДокумент.Области.ЖФ1024.Значение = Выборка.ВаннаяПлощадь;
		
		ТабДокумент.Области.ЖФ1124.Значение = Выборка.ПлитаГазовая;
		ТабДокумент.Области.ЖФ1224.Значение = Выборка.ПлитаЭлектрическая;
		
		ТабДокумент.Области.ЖФ125.Значение  = Выборка.Строка25;
		
		ТабДокумент.Области.ЖФ126.Значение  = Выборка.КоличествоЗданийСМусоропроводом;
		ТабДокумент.Области.ЖФ127.Значение  = Выборка.КоличествоМусоропроводов;
		ТабДокумент.Области.ЖФ128.Значение  = Выборка.КоличествоЗданийСЛифтами;
		ТабДокумент.Области.ЖФ130.Значение  = Выборка.КоличествоЛифтовВсего;
		
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьРаздел3()

&НаСервере
// Возвращает текст запроса по разделу 3.
Функция ПолучитьТекстЗапросаПоРазделу3()
	
	// Запрос получает информацию, необходимую для заполнения Раздела 3.
	// Информация получается следующим образом:
	// 1.  Получаем список всех жилых помещений с площадями, в ранее созданном запросе;
	// 2.  Получим площади жилых помещений всех зданий из списка;
	// 3.  Получим таблицу со значениями благоустройств в квартирах;
	// 4.  Получим таблицу со значениями благоустройств в зданиях;
	//     Разграничение по помещениям и зданиям производится для того, чтобы избежать задвоения площадей в выходных данных,
	//     в том случае, если одно  тоже благоустройство присутствует и в здании и в помещении, находящемся в этом здании.
	// 5.  Получим текущую информацию о благоустройстве всех объектов, объеденив таблицы пп. 3 и 4, сначала смотрим ,есть ли
	//     данное благоустройство в здании, и только если оно отсутствует, проверяем его в помещениях, таким образом,
	//     избегаем задвоения данных;
	// 6.  Добавляем к таблице п. 5 данные о площадях и признак многоквартирного здания;
	// 7.  Получим признаки наличия необходимых для заполнения раздела 3 благоустройств, если благоустройство присутствует для
	//     данного объекта - тогда присваиваем значению признака ИСТИНА, если нет - ЛОЖЬ;
	// 8.  Получи итоговую информацию о каждом объекте, сгруппировав сроки таблицы п. 7, таким образом, по каждому объекту будет
	//     одна строка с информацией о наличии всех интересующих нас видов благоустройств (либо есть, либо нет);
	// Начнем формировать итоговую таблицу:
	// 9.  Получим информацию об общей площади жилых помещений;
	// 10. Получим сумму площадей помещений, для которых назначен соответствующий вид благоустройства, также здесь же получим информацию
	//     с указанием площади жилых помещений, оборудованных одновременно водопроводом, горячим водоснабжением,водоотведением, отоплением,
	//     и газом (или электрическими плитами);
	// 11. Получим сведения о количестве зданий с мусоропроводом и общем количестве мусоропроводов, причем, если в значении благоустройства
	//     мусоропровод указано числовое значений, тогда берем его, если нет - тогда просто прибавляем 1;
	// 12. Получим сведения о количестве зданий с лифтом и общем количестве лифтов, причем, если в значении благоустройства
	//     лифт указано числовое значений, тогда берем его, если нет - тогда просто прибавляем 1;
	// 13. Соединим всю полученную в пп. 9 - 12 информацию в итоговую таблицу.
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаЖилыхПомещений.Квартира,
	|	ТаблицаЖилыхПомещений.Здание,
	|	ТаблицаЖилыхПомещений.ОбщаяПлощадь / 1000 КАК ОбщаяПлощадь,
	|	ТаблицаЖилыхПомещений.ЗданиеМногоквартирное
	|ПОМЕСТИТЬ втЖилыеПомещенияСПлощадями
	|ИЗ
	|	&ТаблицаЖилыхПомещений КАК ТаблицаЖилыхПомещений
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втЖилыеПомещенияСПлощадями.Здание,
	|	СУММА(втЖилыеПомещенияСПлощадями.ОбщаяПлощадь) КАК ОбщаяПлощадь,
	|	втЖилыеПомещенияСПлощадями.ЗданиеМногоквартирное
	|ПОМЕСТИТЬ втПлощадиЖилыхПомещенийСГруппировкойПоЗданиям
	|ИЗ
	|	втЖилыеПомещенияСПлощадями КАК втЖилыеПомещенияСПлощадями
	|
	|СГРУППИРОВАТЬ ПО
	|	втЖилыеПомещенияСПлощадями.Здание,
	|	втЖилыеПомещенияСПлощадями.ЗданиеМногоквартирное
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_БлагоустройствоОбъектов.Объект.Владелец КАК Здание,
	|	КВП_БлагоустройствоОбъектов.Объект КАК Помещение,
	|	КВП_БлагоустройствоОбъектов.ВидБлагоустройства КАК ВидБлагоустройстваПомещения,
	|	КВП_БлагоустройствоОбъектов.Значение КАК ЗначениеПомещение
	|ПОМЕСТИТЬ втБлагоустройстваПоПомещениям
	|ИЗ
	|	РегистрСведений.КВП_БлагоустройствоОбъектов КАК КВП_БлагоустройствоОбъектов
	|ГДЕ
	|	НЕ КВП_БлагоустройствоОбъектов.Значение = ЛОЖЬ
	|	И КВП_БлагоустройствоОбъектов.Объект В
	|			(ВЫБРАТЬ
	|				втЖилыеПомещенияСПлощадями.Квартира
	|			ИЗ
	|				втЖилыеПомещенияСПлощадями КАК втЖилыеПомещенияСПлощадями)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_БлагоустройствоОбъектов.Объект,
	|	КВП_БлагоустройствоОбъектов.ВидБлагоустройства КАК ВидБлагоустройстваЗдания,
	|	КВП_БлагоустройствоОбъектов.Значение КАК ЗначениеЗдание
	|ПОМЕСТИТЬ втБлагоустройстваПоЗданиям
	|ИЗ
	|	РегистрСведений.КВП_БлагоустройствоОбъектов КАК КВП_БлагоустройствоОбъектов
	|ГДЕ
	|	НЕ КВП_БлагоустройствоОбъектов.Значение = ЛОЖЬ
	|	И КВП_БлагоустройствоОбъектов.Объект В
	|			(ВЫБРАТЬ
	|				втПлощадиЖилыхПомещенийСГруппировкойПоЗданиям.Здание
	|			ИЗ
	|				втПлощадиЖилыхПомещенийСГруппировкойПоЗданиям КАК втПлощадиЖилыхПомещенийСГруппировкойПоЗданиям)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втБлагоустройстваПоЗданиям.Объект КАК Объект,
	|	втБлагоустройстваПоЗданиям.ВидБлагоустройстваЗдания КАК ВидБлагоустройства,
	|	втБлагоустройстваПоЗданиям.ЗначениеЗдание КАК Значение
	|ПОМЕСТИТЬ втТекущиеБлагоустройстваОбъектов
	|ИЗ
	|	втБлагоустройстваПоЗданиям КАК втБлагоустройстваПоЗданиям
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	втБлагоустройстваПоПомещениям.Помещение,
	|	втБлагоустройстваПоПомещениям.ВидБлагоустройстваПомещения,
	|	втБлагоустройстваПоПомещениям.ЗначениеПомещение
	|ИЗ
	|	втБлагоустройстваПоПомещениям КАК втБлагоустройстваПоПомещениям
	|		ЛЕВОЕ СОЕДИНЕНИЕ втБлагоустройстваПоЗданиям КАК втБлагоустройстваПоЗданиям
	|		ПО втБлагоустройстваПоПомещениям.Здание = втБлагоустройстваПоЗданиям.Объект
	|			И втБлагоустройстваПоПомещениям.ВидБлагоустройстваПомещения = втБлагоустройстваПоЗданиям.ВидБлагоустройстваЗдания
	|ГДЕ
	|	втБлагоустройстваПоЗданиям.ВидБлагоустройстваЗдания ЕСТЬ NULL
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втТекущиеБлагоустройстваОбъектов.Объект,
	|	втТекущиеБлагоустройстваОбъектов.ВидБлагоустройства,
	|	втТекущиеБлагоустройстваОбъектов.Значение,
	|	ЕСТЬNULL(втЖилыеПомещенияСПлощадями.ОбщаяПлощадь, втПлощадиЖилыхПомещенийСГруппировкойПоЗданиям.ОбщаяПлощадь) КАК ОбщаяПлощадьОбъекта,
	|	ЕСТЬNULL(втПлощадиЖилыхПомещенийСГруппировкойПоЗданиям.ЗданиеМногоквартирное, ЛОЖЬ) КАК ЗданиеМногоквартирное
	|ПОМЕСТИТЬ втИтоговаяТаблицаТекущихБлагоустройств
	|ИЗ
	|	втТекущиеБлагоустройстваОбъектов КАК втТекущиеБлагоустройстваОбъектов
	|		ЛЕВОЕ СОЕДИНЕНИЕ втЖилыеПомещенияСПлощадями КАК втЖилыеПомещенияСПлощадями
	|		ПО втТекущиеБлагоустройстваОбъектов.Объект = втЖилыеПомещенияСПлощадями.Квартира
	|		ЛЕВОЕ СОЕДИНЕНИЕ втПлощадиЖилыхПомещенийСГруппировкойПоЗданиям КАК втПлощадиЖилыхПомещенийСГруппировкойПоЗданиям
	|		ПО втТекущиеБлагоустройстваОбъектов.Объект = втПлощадиЖилыхПомещенийСГруппировкойПоЗданиям.Здание
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	втИтоговаяТаблицаТекущихБлагоустройств.Объект,
	|	ВЫБОР
	|		КОГДА втИтоговаяТаблицаТекущихБлагоустройств.ВидБлагоустройства = ЗНАЧЕНИЕ(Справочник.КВП_ВидыБлагоустройстваОбъектов.Отопление)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ПризнакНаличияОтопления,
	|	ВЫБОР
	|		КОГДА втИтоговаяТаблицаТекущихБлагоустройств.ВидБлагоустройства = ЗНАЧЕНИЕ(Справочник.КВП_ВидыБлагоустройстваОбъектов.ЦентрализованноеОтопление)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ПризнакНаличияЦентрализованногоОтопления,
	|	ВЫБОР
	|		КОГДА втИтоговаяТаблицаТекущихБлагоустройств.ВидБлагоустройства = ЗНАЧЕНИЕ(Справочник.КВП_ВидыБлагоустройстваОбъектов.Канализация)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ПризнакНаличияКанализации,
	|	ВЫБОР
	|		КОГДА втИтоговаяТаблицаТекущихБлагоустройств.ВидБлагоустройства = ЗНАЧЕНИЕ(Справочник.КВП_ВидыБлагоустройстваОбъектов.Канализация)
	|				И втИтоговаяТаблицаТекущихБлагоустройств.Значение = ЗНАЧЕНИЕ(Перечисление.КВП_Канализация.Центральная)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ПризнакНаличияЦентральнойКанализации,
	|	ВЫБОР
	|		КОГДА втИтоговаяТаблицаТекущихБлагоустройств.ВидБлагоустройства = ЗНАЧЕНИЕ(Справочник.КВП_ВидыБлагоустройстваОбъектов.ГорячееВодоснабжение)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ПризнакНаличияГВС,
	|	ВЫБОР
	|		КОГДА втИтоговаяТаблицаТекущихБлагоустройств.ВидБлагоустройства = ЗНАЧЕНИЕ(Справочник.КВП_ВидыБлагоустройстваОбъектов.ГорячееВодоснабжение)
	|				И втИтоговаяТаблицаТекущихБлагоустройств.Значение = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ТипыГорячегоВодоснабжения.Централизованное)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ПризнакНаличияЦентрализованногоГВС,
	|	ВЫБОР
	|		КОГДА втИтоговаяТаблицаТекущихБлагоустройств.ВидБлагоустройства = ЗНАЧЕНИЕ(Справочник.КВП_ВидыБлагоустройстваОбъектов.Плита)
	|				И втИтоговаяТаблицаТекущихБлагоустройств.Значение = ЗНАЧЕНИЕ(Перечисление.КВП_Плита.Газовая)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ПризнакНаличияПлитыГазовой,
	|	ВЫБОР
	|		КОГДА втИтоговаяТаблицаТекущихБлагоустройств.ВидБлагоустройства = ЗНАЧЕНИЕ(Справочник.КВП_ВидыБлагоустройстваОбъектов.Плита)
	|				И втИтоговаяТаблицаТекущихБлагоустройств.Значение = ЗНАЧЕНИЕ(Перечисление.КВП_Плита.Электрическая)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ПризнакНаличияПлитыЭлектрической,
	|	ВЫБОР
	|		КОГДА втИтоговаяТаблицаТекущихБлагоустройств.ВидБлагоустройства = ЗНАЧЕНИЕ(Справочник.КВП_ВидыБлагоустройстваОбъектов.ХолодноеВодоснабжение)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ПризнакНаличияХВС,
	|	ВЫБОР
	|		КОГДА втИтоговаяТаблицаТекущихБлагоустройств.ВидБлагоустройства = ЗНАЧЕНИЕ(Справочник.КВП_ВидыБлагоустройстваОбъектов.ХолодноеВодоснабжение)
	|				И втИтоговаяТаблицаТекущихБлагоустройств.Значение = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ТипыХолодногоВодоснабжения.Централизованное)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ПризнакНаличияЦентрализованногоХВС,
	|	ВЫБОР
	|		КОГДА втИтоговаяТаблицаТекущихБлагоустройств.ВидБлагоустройства В (ЗНАЧЕНИЕ(Справочник.КВП_ВидыБлагоустройстваОбъектов.Ванна), ЗНАЧЕНИЕ(Справочник.КВП_ВидыБлагоустройстваОбъектов.Ванная))
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ПризнакНаличияВанной,
	|	втИтоговаяТаблицаТекущихБлагоустройств.ОбщаяПлощадьОбъекта
	|ПОМЕСТИТЬ втПризнакиНаличияБлагоустройств
	|ИЗ
	|	втИтоговаяТаблицаТекущихБлагоустройств КАК втИтоговаяТаблицаТекущихБлагоустройств
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втПризнакиНаличияБлагоустройств.Объект,
	|	МАКСИМУМ(втПризнакиНаличияБлагоустройств.ПризнакНаличияОтопления) КАК ПризнакНаличияОтопления,
	|	МАКСИМУМ(втПризнакиНаличияБлагоустройств.ПризнакНаличияЦентрализованногоОтопления) КАК ПризнакНаличияЦентрализованногоОтопления,
	|	МАКСИМУМ(втПризнакиНаличияБлагоустройств.ПризнакНаличияКанализации) КАК ПризнакНаличияКанализации,
	|	МАКСИМУМ(втПризнакиНаличияБлагоустройств.ПризнакНаличияЦентральнойКанализации) КАК ПризнакНаличияЦентральнойКанализации,
	|	МАКСИМУМ(втПризнакиНаличияБлагоустройств.ПризнакНаличияГВС) КАК ПризнакНаличияГВС,
	|	МАКСИМУМ(втПризнакиНаличияБлагоустройств.ПризнакНаличияЦентрализованногоГВС) КАК ПризнакНаличияЦентрализованногоГВС,
	|	МАКСИМУМ(втПризнакиНаличияБлагоустройств.ПризнакНаличияПлитыГазовой) КАК ПризнакНаличияПлитыГазовой,
	|	МАКСИМУМ(втПризнакиНаличияБлагоустройств.ПризнакНаличияПлитыЭлектрической) КАК ПризнакНаличияПлитыЭлектрической,
	|	МАКСИМУМ(втПризнакиНаличияБлагоустройств.ПризнакНаличияХВС) КАК ПризнакНаличияХВС,
	|	МАКСИМУМ(втПризнакиНаличияБлагоустройств.ПризнакНаличияЦентрализованногоХВС) КАК ПризнакНаличияЦентрализованногоХВС,
	|	МАКСИМУМ(втПризнакиНаличияБлагоустройств.ПризнакНаличияВанной) КАК ПризнакНаличияВанной,
	|	втПризнакиНаличияБлагоустройств.ОбщаяПлощадьОбъекта
	|ПОМЕСТИТЬ втИтоговаяСДаннымиОБлагосутройствеПоПлощадямДляРаздела3
	|ИЗ
	|	втПризнакиНаличияБлагоустройств КАК втПризнакиНаличияБлагоустройств
	|
	|СГРУППИРОВАТЬ ПО
	|	втПризнакиНаличияБлагоустройств.Объект,
	|	втПризнакиНаличияБлагоустройств.ОбщаяПлощадьОбъекта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(втЖилыеПомещенияСПлощадями.ОбщаяПлощадь) КАК ОбщаяПлощадь
	|ПОМЕСТИТЬ втОбщаяСумммаЖилыхПлощадей
	|ИЗ
	|	втЖилыеПомещенияСПлощадями КАК втЖилыеПомещенияСПлощадями
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(ВЫБОР
	|			КОГДА втИтоговаяСДаннымиОБлагосутройствеПоПлощадямДляРаздела3.ПризнакНаличияХВС
	|				ТОГДА втИтоговаяСДаннымиОБлагосутройствеПоПлощадямДляРаздела3.ОбщаяПлощадьОбъекта
	|			ИНАЧЕ ВЫБОР
	|					КОГДА втИтоговаяСДаннымиОБлагосутройствеПоПлощадямДляРаздела3.ПризнакНаличияЦентрализованногоХВС
	|						ТОГДА втИтоговаяСДаннымиОБлагосутройствеПоПлощадямДляРаздела3.ОбщаяПлощадьОбъекта
	|					ИНАЧЕ 0
	|				КОНЕЦ
	|		КОНЕЦ) КАК Водопровод,
	|	СУММА(ВЫБОР
	|			КОГДА втИтоговаяСДаннымиОБлагосутройствеПоПлощадямДляРаздела3.ПризнакНаличияЦентрализованногоХВС
	|				ТОГДА втИтоговаяСДаннымиОБлагосутройствеПоПлощадямДляРаздела3.ОбщаяПлощадьОбъекта
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ЦентрализованныйВодопровод,
	|	СУММА(ВЫБОР
	|			КОГДА втИтоговаяСДаннымиОБлагосутройствеПоПлощадямДляРаздела3.ПризнакНаличияКанализации
	|				ТОГДА втИтоговаяСДаннымиОБлагосутройствеПоПлощадямДляРаздела3.ОбщаяПлощадьОбъекта
	|			ИНАЧЕ ВЫБОР
	|					КОГДА втИтоговаяСДаннымиОБлагосутройствеПоПлощадямДляРаздела3.ПризнакНаличияЦентральнойКанализации
	|						ТОГДА втИтоговаяСДаннымиОБлагосутройствеПоПлощадямДляРаздела3.ОбщаяПлощадьОбъекта
	|					ИНАЧЕ 0
	|				КОНЕЦ
	|		КОНЕЦ) КАК Канализация,
	|	СУММА(ВЫБОР
	|			КОГДА втИтоговаяСДаннымиОБлагосутройствеПоПлощадямДляРаздела3.ПризнакНаличияЦентральнойКанализации
	|				ТОГДА втИтоговаяСДаннымиОБлагосутройствеПоПлощадямДляРаздела3.ОбщаяПлощадьОбъекта
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ЦентральнаяКанализация,
	|	СУММА(ВЫБОР
	|			КОГДА втИтоговаяСДаннымиОБлагосутройствеПоПлощадямДляРаздела3.ПризнакНаличияОтопления
	|				ТОГДА втИтоговаяСДаннымиОБлагосутройствеПоПлощадямДляРаздела3.ОбщаяПлощадьОбъекта
	|			ИНАЧЕ ВЫБОР
	|					КОГДА втИтоговаяСДаннымиОБлагосутройствеПоПлощадямДляРаздела3.ПризнакНаличияЦентрализованногоОтопления
	|						ТОГДА втИтоговаяСДаннымиОБлагосутройствеПоПлощадямДляРаздела3.ОбщаяПлощадьОбъекта
	|					ИНАЧЕ 0
	|				КОНЕЦ
	|		КОНЕЦ) КАК ОтоплениеПлощадь,
	|	СУММА(ВЫБОР
	|			КОГДА втИтоговаяСДаннымиОБлагосутройствеПоПлощадямДляРаздела3.ПризнакНаличияЦентрализованногоОтопления
	|				ТОГДА втИтоговаяСДаннымиОБлагосутройствеПоПлощадямДляРаздела3.ОбщаяПлощадьОбъекта
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ЦентрализованноеОтоплениеПлощадь,
	|	СУММА(ВЫБОР
	|			КОГДА втИтоговаяСДаннымиОБлагосутройствеПоПлощадямДляРаздела3.ПризнакНаличияГВС
	|				ТОГДА втИтоговаяСДаннымиОБлагосутройствеПоПлощадямДляРаздела3.ОбщаяПлощадьОбъекта
	|			ИНАЧЕ ВЫБОР
	|					КОГДА втИтоговаяСДаннымиОБлагосутройствеПоПлощадямДляРаздела3.ПризнакНаличияЦентрализованногоГВС
	|						ТОГДА втИтоговаяСДаннымиОБлагосутройствеПоПлощадямДляРаздела3.ОбщаяПлощадьОбъекта
	|					ИНАЧЕ 0
	|				КОНЕЦ
	|		КОНЕЦ) КАК ГорячееВодоснабжение,
	|	СУММА(ВЫБОР
	|			КОГДА втИтоговаяСДаннымиОБлагосутройствеПоПлощадямДляРаздела3.ПризнакНаличияЦентрализованногоГВС
	|				ТОГДА втИтоговаяСДаннымиОБлагосутройствеПоПлощадямДляРаздела3.ОбщаяПлощадьОбъекта
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ЦентрализованноеГорячееВодоснабжение,
	|	СУММА(ВЫБОР
	|			КОГДА втИтоговаяСДаннымиОБлагосутройствеПоПлощадямДляРаздела3.ПризнакНаличияВанной
	|				ТОГДА втИтоговаяСДаннымиОБлагосутройствеПоПлощадямДляРаздела3.ОбщаяПлощадьОбъекта
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ВаннаяПлощадь,
	|	СУММА(ВЫБОР
	|			КОГДА втИтоговаяСДаннымиОБлагосутройствеПоПлощадямДляРаздела3.ПризнакНаличияПлитыГазовой
	|				ТОГДА втИтоговаяСДаннымиОБлагосутройствеПоПлощадямДляРаздела3.ОбщаяПлощадьОбъекта
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ПлитаГазовая,
	|	СУММА(ВЫБОР
	|			КОГДА втИтоговаяСДаннымиОБлагосутройствеПоПлощадямДляРаздела3.ПризнакНаличияПлитыЭлектрической
	|				ТОГДА втИтоговаяСДаннымиОБлагосутройствеПоПлощадямДляРаздела3.ОбщаяПлощадьОбъекта
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ПлитаЭлектрическая,
	|	СУММА(ВЫБОР
	|			КОГДА (втИтоговаяСДаннымиОБлагосутройствеПоПлощадямДляРаздела3.ПризнакНаличияОтопления
	|					ИЛИ втИтоговаяСДаннымиОБлагосутройствеПоПлощадямДляРаздела3.ПризнакНаличияЦентрализованногоОтопления)
	|					И (втИтоговаяСДаннымиОБлагосутройствеПоПлощадямДляРаздела3.ПризнакНаличияКанализации
	|						ИЛИ втИтоговаяСДаннымиОБлагосутройствеПоПлощадямДляРаздела3.ПризнакНаличияЦентральнойКанализации)
	|					И (втИтоговаяСДаннымиОБлагосутройствеПоПлощадямДляРаздела3.ПризнакНаличияГВС
	|						ИЛИ втИтоговаяСДаннымиОБлагосутройствеПоПлощадямДляРаздела3.ПризнакНаличияЦентрализованногоГВС)
	|					И (втИтоговаяСДаннымиОБлагосутройствеПоПлощадямДляРаздела3.ПризнакНаличияПлитыГазовой
	|						ИЛИ втИтоговаяСДаннымиОБлагосутройствеПоПлощадямДляРаздела3.ПризнакНаличияПлитыЭлектрической)
	|					И (втИтоговаяСДаннымиОБлагосутройствеПоПлощадямДляРаздела3.ПризнакНаличияХВС
	|						ИЛИ втИтоговаяСДаннымиОБлагосутройствеПоПлощадямДляРаздела3.ПризнакНаличияЦентрализованногоХВС)
	|				ТОГДА втИтоговаяСДаннымиОБлагосутройствеПоПлощадямДляРаздела3.ОбщаяПлощадьОбъекта
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК Строка25
	|ПОМЕСТИТЬ втДанныеОПлощадяхДляРаздела3
	|ИЗ
	|	втИтоговаяСДаннымиОБлагосутройствеПоПлощадямДляРаздела3 КАК втИтоговаяСДаннымиОБлагосутройствеПоПлощадямДляРаздела3
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ втИтоговаяТаблицаТекущихБлагоустройств.Объект) КАК КоличествоЗданийСМусоропроводом,
	|	СУММА(ВЫБОР
	|			КОГДА ТИПЗНАЧЕНИЯ(втИтоговаяТаблицаТекущихБлагоустройств.Значение) = ТИП(ЧИСЛО)
	|				ТОГДА ВЫРАЗИТЬ(втИтоговаяТаблицаТекущихБлагоустройств.Значение КАК ЧИСЛО(2, 0))
	|			ИНАЧЕ 1
	|		КОНЕЦ) КАК КоличествоМусоропроводов
	|ПОМЕСТИТЬ втДанныеКоличествеМусоропроводовВМногоквартирныхДомах
	|ИЗ
	|	втИтоговаяТаблицаТекущихБлагоустройств КАК втИтоговаяТаблицаТекущихБлагоустройств
	|ГДЕ
	|	втИтоговаяТаблицаТекущихБлагоустройств.ЗданиеМногоквартирное
	|	И втИтоговаяТаблицаТекущихБлагоустройств.ВидБлагоустройства = ЗНАЧЕНИЕ(Справочник.КВП_ВидыБлагоустройстваОбъектов.Мусоропровод)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ втИтоговаяТаблицаТекущихБлагоустройств.Объект) КАК КоличествоЗданийСЛифтами,
	|	СУММА(ВЫБОР
	|			КОГДА ТИПЗНАЧЕНИЯ(втИтоговаяТаблицаТекущихБлагоустройств.Значение) = ТИП(ЧИСЛО)
	|				ТОГДА ВЫРАЗИТЬ(втИтоговаяТаблицаТекущихБлагоустройств.Значение КАК ЧИСЛО(2, 0))
	|			ИНАЧЕ 1
	|		КОНЕЦ) КАК КоличествоЛифтовВсего
	|ПОМЕСТИТЬ втДанныеКоличествеЛифтовВМногоквартирныхДомах
	|ИЗ
	|	втИтоговаяТаблицаТекущихБлагоустройств КАК втИтоговаяТаблицаТекущихБлагоустройств
	|ГДЕ
	|	втИтоговаяТаблицаТекущихБлагоустройств.ЗданиеМногоквартирное
	|	И втИтоговаяТаблицаТекущихБлагоустройств.ВидБлагоустройства = ЗНАЧЕНИЕ(Справочник.КВП_ВидыБлагоустройстваОбъектов.Лифт)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втОбщаяСумммаЖилыхПлощадей.ОбщаяПлощадь,
	|	втДанныеОПлощадяхДляРаздела3.Водопровод,
	|	втДанныеОПлощадяхДляРаздела3.ЦентрализованныйВодопровод,
	|	втДанныеОПлощадяхДляРаздела3.Канализация,
	|	втДанныеОПлощадяхДляРаздела3.ЦентральнаяКанализация,
	|	втДанныеОПлощадяхДляРаздела3.ОтоплениеПлощадь,
	|	втДанныеОПлощадяхДляРаздела3.ЦентрализованноеОтоплениеПлощадь,
	|	втДанныеОПлощадяхДляРаздела3.ГорячееВодоснабжение,
	|	втДанныеОПлощадяхДляРаздела3.ЦентрализованноеГорячееВодоснабжение,
	|	втДанныеОПлощадяхДляРаздела3.ВаннаяПлощадь,
	|	втДанныеОПлощадяхДляРаздела3.ПлитаГазовая,
	|	втДанныеОПлощадяхДляРаздела3.ПлитаЭлектрическая,
	|	втДанныеОПлощадяхДляРаздела3.Строка25,
	|	втДанныеКоличествеМусоропроводовВМногоквартирныхДомах.КоличествоЗданийСМусоропроводом,
	|	втДанныеКоличествеМусоропроводовВМногоквартирныхДомах.КоличествоМусоропроводов,
	|	втДанныеКоличествеЛифтовВМногоквартирныхДомах.КоличествоЗданийСЛифтами,
	|	втДанныеКоличествеЛифтовВМногоквартирныхДомах.КоличествоЛифтовВсего
	|ИЗ
	|	втОбщаяСумммаЖилыхПлощадей КАК втОбщаяСумммаЖилыхПлощадей,
	|	втДанныеОПлощадяхДляРаздела3 КАК втДанныеОПлощадяхДляРаздела3,
	|	втДанныеКоличествеМусоропроводовВМногоквартирныхДомах КАК втДанныеКоличествеМусоропроводовВМногоквартирныхДомах,
	|	втДанныеКоличествеЛифтовВМногоквартирныхДомах КАК втДанныеКоличествеЛифтовВМногоквартирныхДомах";
	
	Возврат ТекстЗапроса;
	
КонецФункции // ПолучитьТекстЗапросаПоРазделу3()

&НаСервере
// Процедура заполняет раздел 4.
Процедура ЗаполнитьРаздел4(ТабДокумент, СписокМатериаловСтен, ТаблицаЖилыхПомещений)
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст = ПолучитьТекстЗапросаПоРазделу4(ТаблицаЖилыхПомещений);
	Запрос.УстановитьПараметр("ВидыЖилыхПомещений",    СписокВидовЖилыхПомещений);
	Запрос.УстановитьПараметр("ДатаКон",               СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	Запрос.УстановитьПараметр("ТаблицаЖилыхПомещений", ТаблицаЖилыхПомещений);
	Запрос.Выполнить();
	
	ТекстЗапросаРезультат = 
	"ВЫБРАТЬ
	|	СУММА(втОсновная.ОбщаяПлощадь) / 1000 КАК ОбщаяПлощадь,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВЫБОР
	|			КОГДА НЕ втОсновная.ЗданиеМногоквартирное
	|				ТОГДА втОсновная.Здание
	|		КОНЕЦ) КАК КолВоНеМногоквартирныхДомов,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВЫБОР
	|			КОГДА втОсновная.ЗданиеМногоквартирное
	|				ТОГДА втОсновная.Здание
	|		КОНЕЦ) КАК КолВоМногоквартирныхДомов
	|ИЗ
	|	втОсновная КАК втОсновная
	|ГДЕ "; // последний пробел в запросе не удалять!!!
	
	// По материалу стен.
	
	// Строка 32.
	МатериалыСтенКаменные = СписокМатериаловСтен[0].Значение;
	Если Не МатериалыСтенКаменные.Пустая() Тогда
		Запрос.УстановитьПараметр("Каменные", МатериалыСтенКаменные);
		Запрос.Текст = ТекстЗапросаРезультат + "втОсновная.МатериалСтен = &Каменные";
		Выборка      = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ТабДокумент.Области.ЖФ132.Значение = Выборка.ОбщаяПлощадь;
			ТабДокумент.Области.ЖФ232.Значение = Выборка.КолВоНеМногоквартирныхДомов;
			ТабДокумент.Области.ЖФ332.Значение = Выборка.КолВоМногоквартирныхДомов;
		КонецЕсли;
	КонецЕсли;
	
	// Строка 33.
	Запрос.УстановитьПараметр("Кирпичные", СписокМатериаловСтен[1].Значение);
	Запрос.Текст = ТекстЗапросаРезультат + "втОсновная.МатериалСтен = &Кирпичные";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ТабДокумент.Области.ЖФ133.Значение = Выборка.ОбщаяПлощадь;
		ТабДокумент.Области.ЖФ233.Значение = Выборка.КолВоНеМногоквартирныхДомов;
		ТабДокумент.Области.ЖФ333.Значение = Выборка.КолВоМногоквартирныхДомов;
	КонецЕсли;
	
	// Строка 34.
	МатериалыСтенПанельные = СписокМатериаловСтен[2].Значение;
	Если Не МатериалыСтенПанельные.Пустая() Тогда
		Запрос.УстановитьПараметр("Панельные", МатериалыСтенПанельные);
		Запрос.Текст = ТекстЗапросаРезультат + "втОсновная.МатериалСтен = &Панельные";
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ТабДокумент.Области.ЖФ134.Значение = Выборка.ОбщаяПлощадь;
			ТабДокумент.Области.ЖФ234.Значение = Выборка.КолВоНеМногоквартирныхДомов;
			ТабДокумент.Области.ЖФ334.Значение = Выборка.КолВоМногоквартирныхДомов;
		КонецЕсли;
	КонецЕсли;
	
	// Строка 35.
	Запрос.УстановитьПараметр("Блочные", СписокМатериаловСтен[3].Значение);
	Запрос.Текст = ТекстЗапросаРезультат + "втОсновная.МатериалСтен = &Блочные";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ТабДокумент.Области.ЖФ135.Значение = Выборка.ОбщаяПлощадь;
		ТабДокумент.Области.ЖФ235.Значение = Выборка.КолВоНеМногоквартирныхДомов;
		ТабДокумент.Области.ЖФ335.Значение = Выборка.КолВоМногоквартирныхДомов;
	КонецЕсли;
	
	// Строка 36.
	МатериалыСтенМонолитные = СписокМатериаловСтен[4].Значение;
	Если Не МатериалыСтенМонолитные.Пустая() Тогда
		Запрос.УстановитьПараметр("Монолитные", МатериалыСтенМонолитные);
		Запрос.Текст = ТекстЗапросаРезультат + "втОсновная.МатериалСтен = &Монолитные";
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ТабДокумент.Области.ЖФ136.Значение = Выборка.ОбщаяПлощадь;
			ТабДокумент.Области.ЖФ236.Значение = Выборка.КолВоНеМногоквартирныхДомов;
			ТабДокумент.Области.ЖФ336.Значение = Выборка.КолВоМногоквартирныхДомов;
		КонецЕсли;
	КонецЕсли;
	
	// Строка 37.
	Запрос.УстановитьПараметр("Смешанные", СписокМатериаловСтен[5].Значение);
	Запрос.Текст = ТекстЗапросаРезультат + "втОсновная.МатериалСтен = &Смешанные";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ТабДокумент.Области.ЖФ137.Значение = Выборка.ОбщаяПлощадь;
		ТабДокумент.Области.ЖФ237.Значение = Выборка.КолВоНеМногоквартирныхДомов;
		ТабДокумент.Области.ЖФ337.Значение = Выборка.КолВоМногоквартирныхДомов;
	КонецЕсли;
	
	// Строка 38.
	Запрос.УстановитьПараметр("Деревянные", СписокМатериаловСтен[6].Значение);
	Запрос.Текст = ТекстЗапросаРезультат + "втОсновная.МатериалСтен = &Деревянные";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ТабДокумент.Области.ЖФ138.Значение = Выборка.ОбщаяПлощадь;
		ТабДокумент.Области.ЖФ238.Значение = Выборка.КолВоНеМногоквартирныхДомов;
		ТабДокумент.Области.ЖФ338.Значение = Выборка.КолВоМногоквартирныхДомов;
	КонецЕсли;
	
	// Строка 39.
	Если НЕ МатериалыСтенКаменные.Пустая()
	   И НЕ МатериалыСтенПанельные.Пустая()
	   И НЕ МатериалыСтенМонолитные.Пустая() Тогда
		Запрос.УстановитьПараметр("СписокМатериаловСтен", СписокМатериаловСтен);
		Запрос.Текст = ТекстЗапросаРезультат + "НЕ втОсновная.МатериалСтен В (&СписокМатериаловСтен)";
		Выборка      = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ТабДокумент.Области.ЖФ139.Значение = Выборка.ОбщаяПлощадь;
			ТабДокумент.Области.ЖФ239.Значение = Выборка.КолВоНеМногоквартирныхДомов;
			ТабДокумент.Области.ЖФ339.Значение = Выборка.КолВоМногоквартирныхДомов;
		КонецЕсли;
	КонецЕсли;
	
	// По годам возведения.
	
	// Строка 40.
	Запрос.Текст = ТекстЗапросаРезультат + "втОсновная.ГодПостройки <= 1920";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ТабДокумент.Области.ЖФ140.Значение = Выборка.ОбщаяПлощадь;
		ТабДокумент.Области.ЖФ240.Значение = Выборка.КолВоНеМногоквартирныхДомов;
		ТабДокумент.Области.ЖФ340.Значение = Выборка.КолВоМногоквартирныхДомов;
	КонецЕсли;
	
	// Строка 41.
	Запрос.Текст = ТекстЗапросаРезультат + "втОсновная.ГодПостройки МЕЖДУ 1921 И 1945";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ТабДокумент.Области.ЖФ141.Значение = Выборка.ОбщаяПлощадь;
		ТабДокумент.Области.ЖФ241.Значение = Выборка.КолВоНеМногоквартирныхДомов;
		ТабДокумент.Области.ЖФ341.Значение = Выборка.КолВоМногоквартирныхДомов;
	КонецЕсли;
	
	// Строка 42.
	Запрос.Текст = ТекстЗапросаРезультат + "втОсновная.ГодПостройки МЕЖДУ 1946 И 1970";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ТабДокумент.Области.ЖФ142.Значение = Выборка.ОбщаяПлощадь;
		ТабДокумент.Области.ЖФ242.Значение = Выборка.КолВоНеМногоквартирныхДомов;
		ТабДокумент.Области.ЖФ342.Значение = Выборка.КолВоМногоквартирныхДомов;
	КонецЕсли;
	
	// Строка 43.
	Запрос.Текст = ТекстЗапросаРезультат + "втОсновная.ГодПостройки МЕЖДУ 1971 И 1995";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ТабДокумент.Области.ЖФ143.Значение = Выборка.ОбщаяПлощадь;
		ТабДокумент.Области.ЖФ243.Значение = Выборка.КолВоНеМногоквартирныхДомов;
		ТабДокумент.Области.ЖФ343.Значение = Выборка.КолВоМногоквартирныхДомов;
	КонецЕсли;
	
	// Строка 44.
	Запрос.Текст = ТекстЗапросаРезультат + "втОсновная.ГодПостройки > 1995";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ТабДокумент.Области.ЖФ144.Значение = Выборка.ОбщаяПлощадь;
		ТабДокумент.Области.ЖФ244.Значение = Выборка.КолВоНеМногоквартирныхДомов;
		ТабДокумент.Области.ЖФ344.Значение = Выборка.КолВоМногоквартирныхДомов;
	КонецЕсли;
	
	// По проценту износа.
	
	// Строка 45.
	Запрос.Текст = ТекстЗапросаРезультат + "втОсновная.ПроцентИзноса МЕЖДУ 0 И 30";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ТабДокумент.Области.ЖФ145.Значение = Выборка.ОбщаяПлощадь;
		ТабДокумент.Области.ЖФ245.Значение = Выборка.КолВоНеМногоквартирныхДомов;
		ТабДокумент.Области.ЖФ345.Значение = Выборка.КолВоМногоквартирныхДомов;
	КонецЕсли;
	
	// Строка 46.
	Запрос.Текст = ТекстЗапросаРезультат + "втОсновная.ПроцентИзноса МЕЖДУ 31 И 65";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ТабДокумент.Области.ЖФ146.Значение = Выборка.ОбщаяПлощадь;
		ТабДокумент.Области.ЖФ246.Значение = Выборка.КолВоНеМногоквартирныхДомов;
		ТабДокумент.Области.ЖФ346.Значение = Выборка.КолВоМногоквартирныхДомов;
	КонецЕсли;
	
	// Строка 47.
	Запрос.Текст = ТекстЗапросаРезультат + "втОсновная.ПроцентИзноса МЕЖДУ 66 И 70";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ТабДокумент.Области.ЖФ147.Значение = Выборка.ОбщаяПлощадь;
		ТабДокумент.Области.ЖФ247.Значение = Выборка.КолВоНеМногоквартирныхДомов;
		ТабДокумент.Области.ЖФ347.Значение = Выборка.КолВоМногоквартирныхДомов;
	КонецЕсли;
	
	// Строка 48.
	Запрос.Текст = ТекстЗапросаРезультат + "втОсновная.ПроцентИзноса > 70";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ТабДокумент.Области.ЖФ148.Значение = Выборка.ОбщаяПлощадь;
		ТабДокумент.Области.ЖФ248.Значение = Выборка.КолВоНеМногоквартирныхДомов;
		ТабДокумент.Области.ЖФ348.Значение = Выборка.КолВоМногоквартирныхДомов;
	КонецЕсли;
	
	
КонецПроцедуры // ЗаполнитьРаздел4()

&НаСервере
// Возвращает текст запроса по разделу 4.
Функция ПолучитьТекстЗапросаПоРазделу4(ТаблицаЖилыхПомещений)
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаЖилыхПомещений.Квартира,
	|	ТаблицаЖилыхПомещений.Здание,
	|	ТаблицаЖилыхПомещений.ЗданиеМногоквартирное,
	|	ТаблицаЖилыхПомещений.ЗданиеГодПостройки КАК ГодПостройки,
	|	ТаблицаЖилыхПомещений.ЗданиеПроцентИзноса КАК ПроцентИзноса,
	|	ТаблицаЖилыхПомещений.ЗданиеМатериалСтен КАК МатериалСтен,
	|	ТаблицаЖилыхПомещений.ОбщаяПлощадь
	|ПОМЕСТИТЬ втОсновная
	|ИЗ
	|	&ТаблицаЖилыхПомещений КАК ТаблицаЖилыхПомещений";
	
	Возврат ТекстЗапроса;
	
КонецФункции // ПолучитьТекстЗапросаПоРазделам4И5()

// Квартплата -

#КонецОбласти
