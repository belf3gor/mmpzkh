&НаСервере
Перем мОбъектОтчета;

&НаКлиенте
Перем ФормаВыгрузкиРеглОтчета; // Обход ошибки в платформе.

&НаСервере
Перем СтруктураМногострочныхЧастей;

&НаСервере
Перем ТаблицаСоставПоказателей;

&НаСервере
Перем ДеревоНастроекБаланс;

&НаСервере
Перем ДеревоНастроекФормаОтчета;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	// Обход ошибки платформы "Параметр сеанса отсутствует или удален".
	ТабличныйДокумент.Очистить();
	
	СформироватьСтруктуруРеквизитовФормы();
	
	СтруктураРеквизитовФормы.СписокПечатаемыхЛистов = Новый СписокЗначений;
	
	// Имена вспомогательных макетов и форм.
	НастройкиФормы = Новый Структура;
	НастройкиФормы.Вставить("МакетСоставаПоказателей",           "СоставПоказателей2011Кв4");
	НастройкиФормы.Вставить("МакетНастройкиСоставаПоказателей",  "НастройкаСоставаПоказателей2011Кв4");
	НастройкиФормы.Вставить("МакетСтруктурыМногострочныхЧастей", "СтруктураМногострочныхЧастей2011Кв4");
	
	мСтруктураМногострочныхРазделов = Новый Структура;
	мСтруктураИсхКолвоСтрокРазделов = Новый Структура;
	
	СтруктураМногострочныхЧастей = Новый Структура;
	
	СтруктураРеквизитовФормы.АдресВоВремХранилищеСтруктураМногострочныхЧастей
		= ПоместитьВоВременноеХранилище(СтруктураМногострочныхЧастей, УникальныйИдентификатор);
	
	ДеревоНастроекБаланс = Новый ДеревоЗначений;
	ДеревоНастроекФормаОтчета = Новый ДеревоЗначений;
	
	ИнициализироватьДеревоНастроекСоставаДопСтрок(ДеревоНастроекБаланс);
	ИнициализироватьДеревоНастроекСоставаДопСтрок(ДеревоНастроекФормаОтчета);
	
	СтруктураРеквизитовФормы.АдресВоВремХранилищеДеревоНастроекБаланс
		= ПоместитьВоВременноеХранилище(ДеревоНастроекБаланс, УникальныйИдентификатор);
	СтруктураРеквизитовФормы.АдресВоВремХранилищеДеревоНастроекФормаОтчета
		= ПоместитьВоВременноеХранилище(ДеревоНастроекФормаОтчета, УникальныйИдентификатор);
	
	СтруктураРеквизитовФормы.СоответствиеПоказателейМногострочныхЧастейИхОписанию = Новый Соответствие;
	
	мСтруктураМногостраничныхРазделов = Новый Структура;
	
	ЦветЗаполняетсяТолькоВручную    = Новый Цвет(255, 255, 225);
	ЦветЗаполняетсяАвтоКорректир    = Новый Цвет(255, 240, 200);
	ЦветЗаполняетсяАвтоБезКорректир = Новый Цвет(230, 240, 220);
	ЦветЗаполняетсяАвтоАрифметика   = Новый Цвет(192, 220, 192);
	ЦветЗаполняетсяВсегдаВручную    = Новый Цвет(255, 255, 192);
	ЦветНеЗаполняется               = Новый Цвет(255, 255, 255);
	
	// Структура цветов раскраски автозаполняемых ячеек.
	мСтруктураЦветовРаскраски = Новый Структура;
	мСтруктураЦветовРаскраски.Вставить("_0", ЦветЗаполняетсяВсегдаВручную);
	мСтруктураЦветовРаскраски.Вставить("_1", ЦветЗаполняетсяТолькоВручную);
	мСтруктураЦветовРаскраски.Вставить("_2", ЦветЗаполняетсяАвтоКорректир);
	мСтруктураЦветовРаскраски.Вставить("_3", ЦветЗаполняетсяАвтоБезКорректир);
	мСтруктураЦветовРаскраски.Вставить("_4", ЦветЗаполняетсяАвтоАрифметика);
	мСтруктураЦветовРаскраски.Вставить("_5", ЦветНеЗаполняется);
	
	СтруктураДанныхБаланс                   = Новый Структура;
	СтруктураДанныхФормаОтчета              = Новый Структура;
	СтруктураДанныхОДДС                     = Новый Структура;
	СтруктураДанныхОИК                      = Новый Структура;
	СтруктураДанныхДополнительныеПоказатели = Новый Структура;
	
	СтруктураДанныхРасшифровкиОбеспечений = НовоеОписаниеРазделаБезВводаДанных("РасшифровкиОбеспечений");
	СтруктураДанныхОСВ_008                = НовоеОписаниеРазделаБезВводаДанных("ОСВ_008");
	СтруктураДанныхОСВ_009                = НовоеОписаниеРазделаБезВводаДанных("ОСВ_009");
	
	СтруктураДанныхЗадолженностьПоКредитамЗаймам = НовоеОписаниеРазделаБезВводаДанных("ЗадолженностьПоКредитамЗаймам");
	СтруктураДанныхОСВ_66                        = Новый Структура;
	СтруктураДанныхОСВ_67                        = Новый Структура;
	
	СтруктураДанныхЛизингОбязательства = Новый Структура;
	
	СтруктураДанныхДенежныеСредства = НовоеОписаниеРазделаБезВводаДанных("ДенежныеСредства");
	СтруктураДанныхАнализ_50        = НовоеОписаниеРазделаБезВводаДанных("Анализ_50");
	СтруктураДанныхАнализ_51        = НовоеОписаниеРазделаБезВводаДанных("Анализ_51");
	СтруктураДанныхАнализ_52        = НовоеОписаниеРазделаБезВводаДанных("Анализ_52");
	СтруктураДанныхАнализ_55        = НовоеОписаниеРазделаБезВводаДанных("Анализ_55");
	
	мСтруктураВариантыЗаполнения       = Новый Структура;
	мСтруктураВариантыЗаполненияЭталон = Новый Структура;
	
	// Параметры формы отчета.
	
	СтруктураРеквизитовФормы.мВерсияФормы = "01/08/2016";
	
	СтруктураРеквизитовФормы.мПечатныеформы = Новый СписокЗначений;
	СтруктураРеквизитовФормы.мПечатаемыеРазделы = Новый СписокЗначений;
	
	СтруктураРеквизитовФормы.мВыбраннаяФорма           = Параметры.мВыбраннаяФорма;
	СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета   = Параметры.мДатаКонцаПериодаОтчета;
	СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета  = Параметры.мДатаНачалаПериодаОтчета;
	СтруктураРеквизитовФормы.мСкопированаФорма         = Параметры.мСкопированаФорма;
	СтруктураРеквизитовФормы.мСохраненныйДок           = Параметры.мСохраненныйДок;
	СтруктураРеквизитовФормы.Организация               = Параметры.Организация;
	СтруктураРеквизитовФормы.ЭтоБалансНекоммерческойОрганизации = Параметры.ЭтоБалансНекоммерческойОрганизации;
	СтруктураРеквизитовФормы.СформироватьФормуОтчетаАвтоматически = Параметры.СформироватьФормуОтчетаАвтоматически;
	
	ДатаПодписи = ТекущаяДатаСеанса();
	
	ПорядкиОкругленияОтчетности = Новый Структура;
	ПорядкиОкругленияОтчетности.Вставить("ПеречислениеПорядкиОкругленияОтчетностиОкр1",       Перечисления.ПорядкиОкругленияОтчетности.Окр1);
	ПорядкиОкругленияОтчетности.Вставить("ПеречислениеПорядкиОкругленияОтчетностиОкр1000",    Перечисления.ПорядкиОкругленияОтчетности.Окр1000);
	ПорядкиОкругленияОтчетности.Вставить("ПеречислениеПорядкиОкругленияОтчетностиОкр1000000", Перечисления.ПорядкиОкругленияОтчетности.Окр1000000);
	
	СтруктураРеквизитовФормы.ИмяСохраняемогоПараметра = "БухгалтерскаяОтчетностьВБанк_ФормаОтчета2011Кв4_Изменения";
	СтруктураРеквизитовФормы.СохраненныйВыборПользователя = Загрузить(СтруктураРеквизитовФормы.ИмяСохраняемогоПараметра);
	СтруктураРеквизитовФормы.КоличествоСтрокИнформационногоМакета = 0;
	
	СтруктураРеквизитовФормы.УчетРасходовПоЭлементамЗатрат.Вставить("РасходыУчитываютсяПоЭЗВОтчетномГоду",   Неопределено);
	СтруктураРеквизитовФормы.УчетРасходовПоЭлементамЗатрат.Вставить("РасходыУчитываютсяПоЭЗВПредыдущемГоду", Неопределено);
	
	СтруктураРеквизитовФормы.ОборотыСчета75_01 = Новый Структура;
	СтруктураРеквизитовФормы.ОборотыСчета75_01.Вставить("Графа04", 0);
	СтруктураРеквизитовФормы.ОборотыСчета75_01.Вставить("Графа05", 0);
	СтруктураРеквизитовФормы.ОборотыСчета75_01.Вставить("Графа06", 0);
	
	СтруктураРеквизитовФормы.Банк = Параметры.Банк;
	
	Инициализация(Параметры.БезОткрытияФормы);
	
	Если ЗначениеЗаполнено(СтруктураРеквизитовФормы.мСохраненныйДок) Тогда
		СтатусОтчета = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтруктураРеквизитовФормы.мСохраненныйДок, "СтатусОтчета");
	Иначе
		СтатусОтчета = Нстр("ru = 'Не отправлено'");
	КонецЕсли;
	
	ОбновитьОтображениеСостоянияОтчета();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если СтрНайти(Заголовок, СтруктураРеквизитовФормы.СтрПериодОтчета) = 0 Тогда
		Заголовок = Заголовок + " за " + СтруктураРеквизитовФормы.СтрПериодОтчета;
	КонецЕсли;
	
	ОргСтр = " (" + СтруктураРеквизитовФормы.НаимОрганизации + ")";
	Если СтрНайти(Заголовок, ОргСтр) = 0 Тогда
		Заголовок = Заголовок + ОргСтр;
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("ВыполнитьПроверкуПередОткрытием", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	РегламентированнаяОтчетностьКлиент.ПередЗакрытиемРегламентированногоОтчета(ЭтаФорма, Отказ, СтандартнаяОбработка, ЗавершениеРаботы, ТекстПредупреждения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ЗавершениеРаботы Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ПриЗакрытииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ПолученСтатусОтчетаВБанке"
		И Параметр.Найти(СтруктураРеквизитовФормы.мСохраненныйДок) <> Неопределено Тогда
		СтатусОтчета = СтатусОтчета(СтруктураРеквизитовФормы.мСохраненныйДок);
		ОбновитьОтображениеСостоянияОтчета();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура РазделыОтчетаПриАктивизацииСтроки(Элемент)
	
	Если Элемент.ТекущиеДанные = Неопределено
	 ИЛИ Элемент.ТекущаяСтрока = СтруктураРеквизитовФормы.ТекущаяСтрокаРазделовОтчета Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураРеквизитовФормы.ТекущаяСтрокаРазделовОтчета = Элемент.ТекущаяСтрока;
	
	КолонкаРазделыОтчетаСокрНаим      = Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
	КолонкаНомерСтраницыРазделаОтчета = Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета;
	
	Элементы.ОчиститьТекущуюСтраницу.Доступность = Истина;
	
	Элементы.ТабличныйДокументКонтекстноеМенюДобавитьСтроку.Видимость = Ложь;
	Элементы.ТабличныйДокументКонтекстноеМенюУдалитьСтроку.Видимость  = Ложь;
	Элементы.ЗаполнитьТекущий.Доступность = Истина;
	
	Если СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере Тогда
		Элементы.СтраницыОтчета.ТекущаяСтраница = Элементы.ТаблДок;
		ВывестиМакетСтраницыВТабличныйДокументНаСервере(КолонкаРазделыОтчетаСокрНаим, КолонкаНомерСтраницыРазделаОтчета);
		
	Иначе
		Элементы.СтраницыОтчета.ТекущаяСтраница = Элементы.ТаблДок;
		СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Истина;
		
	КонецЕсли;
	
	Если КолонкаРазделыОтчетаСокрНаим = "Баланс" Тогда
		Элементы.Обновить.Доступность = Истина;
	Иначе
		Элементы.Обновить.Доступность = Ложь;
	КонецЕсли;
	
	Если КолонкаРазделыОтчетаСокрНаим = "Баланс"
	 ИЛИ КолонкаРазделыОтчетаСокрНаим = "ФормаОтчета"
	 ИЛИ КолонкаРазделыОтчетаСокрНаим = "ОДДС"
	 ИЛИ КолонкаРазделыОтчетаСокрНаим = "ОИК"
	 ИЛИ КолонкаРазделыОтчетаСокрНаим = "ОСВ_66"
	 ИЛИ КолонкаРазделыОтчетаСокрНаим = "ОСВ_67"
	 ИЛИ КолонкаРазделыОтчетаСокрНаим = "ЛизингОбязательства" Тогда
		Элементы.ТабличныйДокументКонтекстноеМенюДобавитьСтроку.Видимость  = Истина;
		Элементы.ТабличныйДокументКонтекстноеМенюУдалитьСтроку.Видимость   = Истина;
	КонецЕсли;
	
	Если КолонкаРазделыОтчетаСокрНаим = "Баланс"
	 ИЛИ КолонкаРазделыОтчетаСокрНаим = "ФормаОтчета"
	 ИЛИ КолонкаРазделыОтчетаСокрНаим = "ОИК"
	 ИЛИ КолонкаРазделыОтчетаСокрНаим = "ОДДС"
	 ИЛИ КолонкаРазделыОтчетаСокрНаим = "ДополнительныеПоказатели" Тогда
		// Для разделов предусмотрена расшифровка автозаполнения.
		Элементы.Расшифровать.Доступность = Истина;
	Иначе
		Элементы.Расшифровать.Доступность = Ложь;
	КонецЕсли;
	
	ОчиститьБлокВариантЗаполнения();
	
	Элементы.ТабличныйДокумент.ТекущаяОбласть = ТабличныйДокумент.Область(1, 1);
	
КонецПроцедуры

&НаКлиенте
Процедура ТабличныйДокументВыбор(Элемент, Область, СтандартнаяОбработка)
	
	Если СтрЧислоВхождений(Область.Имя, "ДобавитьСтроку") = 1 И Область.Текст <> "" Тогда
		СтандартнаяОбработка = Ложь;
		ДобавитьСтроку("");
		
	ИначеЕсли СтрЧислоВхождений(Область.Имя, "УдалитьСтроку") = 1 И Область.Текст <> "" Тогда
		СтандартнаяОбработка = Ложь;
		УдалитьСтроку("");
		
	ИначеЕсли Область.Имя = "НастройкаСоставаСтрок" Тогда 
		НастроитьСтроки(Неопределено);
		Модифицированность = Истина;
		
		Возврат;
		
	ИначеЕсли Область.Имя = "ОрганизацииДляЗаполненияОтчета" И Область.Текст <> "" Тогда 
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("НачальноеЗначениеВыбора", Новый Структура("Организация", СтруктураРеквизитовФормы.Организация));
		ПараметрыФормы.Вставить("Организация", СтруктураРеквизитовФормы.ГруппаОрганизаций);
		
		ФормаВыбораОрганизаций = РегламентированнаяОтчетностьКлиент.ПолучитьОбщуюФормуПоИмени("ФормаВыбораОрганизаций", ПараметрыФормы, ЭтаФорма);
		ФормаВыбораОрганизаций.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		ФормаВыбораОрганизаций.Открыть();
		Модифицированность = Истина;
		
		Возврат;
		
	ИначеЕсли Область.Имя = "ВидОтчетности" Тогда
		СтандартнаяОбработка = Ложь;
		Периоды = Новый СписокЗначений;
		Периоды.Добавить("1", "Обычная");
		Периоды.Добавить("2", "Промежуточная при ликвидации/реорганизации");
		Периоды.Добавить("3", "Ликвидационная");
		ОписаниеОповещения = Новый ОписаниеОповещения("ВыбратьИзСпискаВидОтчетностиЗавершение", ЭтотОбъект);
		ПоказатьВыборИзСписка(ОписаниеОповещения, Периоды);
		Модифицированность = Истина;
		
		Возврат;
		
	ИначеЕсли СтрНайти(Область.Имя, "П00007М100015") = 1 ИЛИ СтрНайти(Область.Имя, "П00008М100015") = 1 Тогда
		СтандартнаяОбработка = Ложь;
		Периоды = Новый СписокЗначений;
		Периоды.Добавить("", "<не указан>");
		Периоды.Добавить("Кредит", "Кредит");
		Периоды.Добавить("Овердрафт", "Овердрафт");
		Периоды.Добавить("Займ");
		Периоды.Добавить("Иное");
		
		ПараметрыОповещения = Новый Структура;
		ПараметрыОповещения.Вставить("ИмяОбласти", Область.Имя);
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ВыбратьИзСпискаЗавершение", ЭтотОбъект, ПараметрыОповещения);
		ПоказатьВыборИзСписка(ОписаниеОповещения, Периоды);
		
		Возврат;
		
	ИначеЕсли СтрНайти(Область.Имя, "П000100600104") = 1 Тогда
		СтандартнаяОбработка = Ложь;
		Периоды = Новый СписокЗначений;
		Периоды.Добавить("", "<не указан>");
		Периоды.Добавить("Финансовый лизинг", "Финансовый лизинг");
		Периоды.Добавить("Операционный лизинг", "Операционный лизинг");
		
		ПараметрыОповещения = Новый Структура;
		ПараметрыОповещения.Вставить("ИмяОбласти", Область.Имя);
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ВыбратьИзСпискаЗавершение", ЭтотОбъект, ПараметрыОповещения);
		ПоказатьВыборИзСписка(ОписаниеОповещения, Периоды);
		
		Возврат;
		
	ИначеЕсли СтрНайти(Область.Имя, "П000100600105") = 1 Тогда
		СтандартнаяОбработка = Ложь;
		Периоды = Новый СписокЗначений;
		Периоды.Добавить("", "<не указан>");
		Периоды.Добавить("Баланс", "Баланс");
		Периоды.Добавить("Забаланс", "Забаланс");
		
		ПараметрыОповещения = Новый Структура;
		ПараметрыОповещения.Вставить("ИмяОбласти", Область.Имя);
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ВыбратьИзСпискаЗавершение", ЭтотОбъект, ПараметрыОповещения);
		ПоказатьВыборИзСписка(ОписаниеОповещения, Периоды);
		
		Возврат;
		
	ИначеЕсли СтрНайти("П00007М100017,П00008М100017,П000100600108", Лев(Область.Имя, 13)) > 0 Тогда
		СтандартнаяОбработка = Ложь;
		ФормаВыбора = ПолучитьФорму(
			"Справочник.Валюты.ФормаВыбора", Новый Структура("РежимВыбора", Истина), ЭтаФорма);
		ФормаВыбора.Заголовок = "Выбор валюты";
		ДополнительныеПараметры = Новый Структура("Область", Область);
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ОткрытьФормуВыбораВалютыЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ФормаВыбора.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
		ФормаВыбора.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		ФормаВыбора.Открыть();
		
	ИначеЕсли Область.Имя = "ОргПочтАдрес" Тогда
		
		Адреса = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(СтруктураРеквизитовФормы.Организация, ДатаПодписи, "АдрФакт, АдрЮР, АдрПочт");
		
		Если ПустаяСтрока(СтрЗаменить(Адреса.АдрФакт, ",", "")) Тогда
			Адреса.АдрФакт = "";
		Иначе
			Адреса.АдрФакт = РегламентированнаяОтчетностьКлиентСервер.ПредставлениеАдресаВФормате9Запятых(Адреса.АдрФакт);
		КонецЕсли;
			
		Если ПустаяСтрока(СтрЗаменить(Адреса.АдрЮР, ",", "")) Тогда
			Адреса.АдрЮР = "";
		Иначе
			Адреса.АдрЮР = РегламентированнаяОтчетностьКлиентСервер.ПредставлениеАдресаВФормате9Запятых(Адреса.АдрЮР);
		КонецЕсли;
			
		Если ПустаяСтрока(СтрЗаменить(Адреса.АдрПочт, ",", "")) Тогда
			Адреса.АдрПочт = "";
		Иначе
			Адреса.АдрПочт = РегламентированнаяОтчетностьКлиентСервер.ПредставлениеАдресаВФормате9Запятых(Адреса.АдрПочт);
		КонецЕсли;
		
		ТаблицаВыбора.Очистить();
				
		НовСтр = ТаблицаВыбора.Добавить();
		НовСтр.Код = "Пустое значение";
		НовСтр.Название = "Адрес не указывается";
		
		Если ЗначениеЗаполнено(Адреса.АдрФакт) Тогда
			НовСтр = ТаблицаВыбора.Добавить();
			НовСтр.Код = "Фактический адрес";
			НовСтр.Название = Адреса.АдрФакт;
		КонецЕсли;

		Если ЗначениеЗаполнено(Адреса.АдрЮР) Тогда
			НовСтр = ТаблицаВыбора.Добавить();
			НовСтр.Код = "Юридический адрес";
			НовСтр.Название = Адреса.АдрЮР;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Адреса.АдрПочт) Тогда
			НовСтр = ТаблицаВыбора.Добавить();
			НовСтр.Код = "Почтовый адрес";
			НовСтр.Название = Адреса.АдрПочт;
		КонецЕсли;
			
		Если ТаблицаВыбора.Количество() = 1 Тогда
			ПоказатьПредупреждение(,НСтр("ru='В контактной информации не указаны адреса организации.'"));
			Возврат;
		КонецЕсли;
		
		ПоискЗначение = ?(ПустаяСтрока(Область.Значение), "Адрес не указывается", Область.Значение);
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Заголовок",           "Выберите адрес");
		ПараметрыФормы.Вставить("ТаблицаЗначений",     ТаблицаВыбора);
		ПараметрыФормы.Вставить("СтруктураДляПоиска",  Новый Структура("Название", ПоискЗначение));
		ПараметрыФормы.Вставить("НаимКолонкиКод",      "Тип адреса");
		ПараметрыФормы.Вставить("НаимКолонкиНазвание", "Адрес");
		
		ДополнительныеПараметры = Новый Структура("Область", Область);
		ОписаниеОповещения = Новый ОписаниеОповещения("ТабличныйДокументВыборЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		
		ОткрытьФорму("Обработка.ОбщиеОбъектыРеглОтчетности.Форма.ФормаВыбораЗначенияИзТаблицы", ПараметрыФормы, ЭтаФорма,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТабличныйДокументПриИзмененииСодержимогоОбласти(Элемент, Область)
	
	Если НЕ ((Область.Имя = "ОргНазв") Или (Область.Имя = "ОргКодОКПО") Или (Область.Имя = "ОргОтрасль")
		Или (Область.Имя = "ОргКодОКВЭД") Или (Область.Имя = "ОргФорма") Или (Область.Имя = "ОргФормаСобств")
		Или (Область.Имя = "ОргКодОКОПФ") Или (Область.Имя = "ОргКодОКФС") Или (Область.Имя = "ОргПочтАдрес")
		Или (Область.Имя = "ОргДиректор") Или (Область.Имя = "ОргБухгалтер")) Тогда
		
		Если Область.Имя = "П000100123004" Тогда
			СтруктураРеквизитовФормы.ОборотыСчета75_01.Графа04 = 0;
		ИначеЕсли Область.Имя = "П000100123005" Тогда
			СтруктураРеквизитовФормы.ОборотыСчета75_01.Графа05 = 0;
		ИначеЕсли Область.Имя = "П000100123006" Тогда
			СтруктураРеквизитовФормы.ОборотыСчета75_01.Графа06 = 0;
		КонецЕсли;
		
		Если Лев(Область.Имя, 12) = "П00010056650"
			ИЛИ Лев(Область.Имя, 12) = "П00010056700"
			ИЛИ Лев(Область.Имя, 12) = "П00010056800" Тогда
			НомГрафы_Стр = Прав(Область.Имя, 1);
			Период_Стр = ?(НомГрафы_Стр = "3", "за период отчетного года", "за период предыдущего года");
			МассивСообщений = Новый Массив;
			Если Лев(Область.Имя, 12) = "П00010056650"
				И ЗначениеЗаполнено(Область.Значение) Тогда
				ТекСтрока = "5665";
				Обл = ТабличныйДокумент.Области.Найти("П00010056700" + НомГрафы_Стр);
				Если ЗначениеЗаполнено(Обл.Значение) Тогда
					Обл.Очистить();
					МассивСообщений.Добавить("Не допускается заполнение строки " + ТекСтрока
					+ " и строки 5670 в одной графе. Значение в строке 5670 " + Период_Стр + " очищено.");
				КонецЕсли;
				Обл = ТабличныйДокумент.Области.Найти("П00010056800" + НомГрафы_Стр);
				Если ЗначениеЗаполнено(Обл.Значение) Тогда
					Обл.Очистить();
					МассивСообщений.Добавить("Не допускается заполнение строки " + ТекСтрока
					+ " и строки 5680 в одной графе. Значение в строке 5680 " + Период_Стр + " очищено.");
				КонецЕсли;
			ИначеЕсли (Лев(Область.Имя, 12) = "П00010056700"
				ИЛИ Лев(Область.Имя, 12) = "П00010056800")
				И ЗначениеЗаполнено(Область.Значение) Тогда
				ТекСтрока = Сред(Область.Имя, 8, 4);
				Обл = ТабличныйДокумент.Области.Найти("П00010056650" + НомГрафы_Стр);
				Если ЗначениеЗаполнено(Обл.Значение) Тогда
					Обл.Очистить();
					МассивСообщений.Добавить("Не допускается заполнение строки " + ТекСтрока
					+ " и строки 5665 в одной графе. Значение в строке 5665 " + Период_Стр + " очищено.");
				КонецЕсли;
			КонецЕсли;
			Для каждого Сообщ Из МассивСообщений Цикл
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = Сообщ;
				Сообщение.Сообщить();
			КонецЦикла;
		КонецЕсли;
		
		РасчетНаКлиенте(СтруктураРеквизитовФормы.НаимТекущегоРаздела, Область.Имя);
		
	КонецЕсли;
	
	Если Область.Имя = "ДатаПодписиОтчета" Тогда 
		ДатаПодписи = Область.Значение;
		ДатаПодписиПриИзмененииНаСервере();
		СтруктураДанныхОДДС.Вставить("ДатаПодписиОтчета", ДатаПодписи);
		СтруктураДанныхОИК.Вставить("ДатаПодписиОтчета", ДатаПодписи);
		СтруктураДанныхФормаОтчета.Вставить("ДатаПодписиОтчета", ДатаПодписи);
	ИначеЕсли Область.Имя = "НомерКорректировки" Тогда
		НомерКорректировки = Область.Значение;
		СтруктураРеквизитовФормы.ВидДокумента = ?(НомерКорректировки = 0, 0, 1);
	КонецЕсли;
	
	Если СтрНайти(Область.Имя, "П") = 1 Тогда
		ЦветФонаЯчейки = Элемент.ТекущаяОбласть.ЦветФона;
		Если ЦветФонаЯчейки = мСтруктураЦветовРаскраски["_2"] Тогда
			ОбновитьПараметрыАвтозаполненияЯчейки();
		КонецЕсли;
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ТабличныйДокументПриАктивизацииОбласти(Элемент)
	
	ИмяОбласти = Элемент.ТекущаяОбласть.Имя;
	
	Если Лев(ИмяОбласти, 1) = "П"
		И Элемент.ТекущаяОбласть.СодержитЗначение = Истина// здесь исключаем значение Неопределено
		И ТипЗнч(Элемент.ТекущаяОбласть.Значение) = Тип("Число") Тогда
		ЦветФонаЯчейки = Элемент.ТекущаяОбласть.ЦветФона;
		Если ЦветФонаЯчейки = мСтруктураЦветовРаскраски["_1"]
		 ИЛИ ЦветФонаЯчейки = мСтруктураЦветовРаскраски["_2"] Тогда
			УправлениеБлокомВариантЗаполнения(ИмяОбласти);
		ИначеЕсли ЦветФонаЯчейки = мСтруктураЦветовРаскраски["_3"] Тогда
			ОчиститьБлокВариантЗаполнения(Истина);
		ИначеЕсли ЭтаФорма.Элементы.ВариантЗаполнения.Доступность Тогда
			ОчиститьБлокВариантЗаполнения();
		КонецЕсли;
	Иначе
		Если ЭтаФорма.Элементы.ВариантЗаполнения.Доступность Тогда
			ОчиститьБлокВариантЗаполнения();
		КонецЕсли;
	КонецЕсли;
	
	#Если Не ВебКлиент Тогда
		Элементы.ТабличныйДокументКонтекстноеМенюУдалитьСтроку.Доступность = Ложь;
		Элементы.ТабличныйДокументКонтекстноеМенюДобавитьСтроку.Доступность = Ложь;
		
		Если СтрНайти(ИмяОбласти, "ДобавитьСтроку") = 1 Тогда 
			ИмяПоказателя = СтрЗаменить(ИмяОбласти, "ДобавитьСтрокуЗначок_", "");
			ИмяПоказателя = СтрЗаменить(ИмяПоказателя, "ДобавитьСтроку_", "");
			ИмяПоказателя = ИмяПоказателяБезСчетчика(ИмяПоказателя);
		ИначеЕсли СтрНайти(ИмяОбласти, "УдалитьСтроку") = 1 Тогда 
			ИмяПоказателя = СтрЗаменить(ИмяОбласти, "УдалитьСтроку", "");
			ИмяПоказателя = ИмяПоказателяБезСчетчика(ИмяПоказателя);
		ИначеЕсли СтрНайти(ИмяОбласти, "П") = 1 И СтрНайти(ИмяОбласти, "_") > 1 Тогда
			ИмяПоказателя = ИмяПоказателяБезСчетчика(ИмяОбласти);
		Иначе 
			Возврат;
		КонецЕсли;
		
		ИмяГруппы = ?(ЗначениеЗаполнено(ИмяПоказателя), Лев(ИмяПоказателя, СтрДлина(ИмяПоказателя) - 2), "");
		
		Если ЗначениеЗаполнено(ИмяГруппы) Тогда 
			ТестовоеИмя = ИмяГруппы + "01_2";
			Элементы.ТабличныйДокументКонтекстноеМенюДобавитьСтроку.Доступность = Истина;
			Если СтрЧислоВхождений(ИмяОбласти, "ДобавитьСтроку") = 0 И
				ТабличныйДокумент.Области.Найти(ТестовоеИмя) <> Неопределено Тогда
				Элементы.ТабличныйДокументКонтекстноеМенюУдалитьСтроку.Доступность = Истина;
			КонецЕсли;
		КонецЕсли;
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ВариантЗаполненияПриИзменении(Элемент)
	
	ИмяПоказателя = ТабличныйДокумент.ТекущаяОбласть.Имя;
	
	ИмяРаздела = СтруктураРеквизитовФормы.НаимТекущегоРаздела;
	
	НайденнаяСтрокаТВЗ = ВариантЗаполненияПоказателя(ИмяРаздела, ИмяПоказателя);
	
	Если НайденнаяСтрокаТВЗ <> Неопределено Тогда
		
		НовыйВариант = ЭтаФорма.Элементы.ВариантЗаполнения.СписокВыбора.Индекс(
			ЭтаФорма.Элементы.ВариантЗаполнения.СписокВыбора.НайтиПоЗначению(ВариантЗаполнения)) + 1;
		
		НайденнаяСтрокаТВЗ.ВариантЗаполнения = НовыйВариант;
		
		Если НовыйВариант = 1 Тогда
			
			НайденнаяСтрокаТВЗ.Дельта = 0;
			ВеличинаАвтокорректировки = 0;
			
		ИначеЕсли НовыйВариант = 2 Тогда
			
			Если (ТабличныйДокумент.Области[ИмяПоказателя].Значение = 0 И НайденнаяСтрокаТВЗ.Дельта = 0)
				И НайденнаяСтрокаТВЗ.ЗначениеАвто <> 0 Тогда
				
				ТабличныйДокумент.Области[ИмяПоказателя].Значение = НайденнаяСтрокаТВЗ.ЗначениеАвто;
				Расчет(ЭтаФорма, СтруктураРеквизитовФормы.НаимТекущегоРаздела, ИмяПоказателя);
				
			КонецЕсли;
			
			Дельта = ТабличныйДокумент.Области[ИмяПоказателя].Значение - НайденнаяСтрокаТВЗ.ЗначениеАвто;
			
			НайденнаяСтрокаТВЗ.Дельта = Дельта;
			ВеличинаАвтокорректировки = Дельта;
			
		ИначеЕсли НовыйВариант = 3 Тогда
			
			Если (ТабличныйДокумент.Области[ИмяПоказателя].Значение = 0) И (НайденнаяСтрокаТВЗ.Дельта = 0) Тогда
				ТабличныйДокумент.Области[ИмяПоказателя].Значение = НайденнаяСтрокаТВЗ.ЗначениеАвто;
			КонецЕсли;
			
			НайденнаяСтрокаТВЗ.Дельта = 0;
			НайденнаяСтрокаТВЗ.Комментарий = "";
			
			ВеличинаАвтокорректировки = 0;
			КомментарийКВариантуЗаполнения = "";
			
		КонецЕсли;
		
		ТабличныйДокумент.ТекущаяОбласть.ЦветФона = мСтруктураЦветовРаскраски["_" + НовыйВариант];
		
		УправлениеБлокомВариантЗаполнения(НайденнаяСтрокаТВЗ);
		
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВеличинаАвтокорректировкиПриИзменении(Элемент)
	
	ТекущаяОбласть = ТабличныйДокумент.ТекущаяОбласть;
	ИмяПоказателя = ТекущаяОбласть.Имя;
	
	ИмяРаздела = СтруктураРеквизитовФормы.НаимТекущегоРаздела;
	
	НайденнаяСтрокаТВЗ = ВариантЗаполненияПоказателя(ИмяРаздела, ИмяПоказателя);
	
	Если НайденнаяСтрокаТВЗ <> Неопределено Тогда
		
		НайденнаяСтрокаТВЗ.Дельта = ВеличинаАвтокорректировки;
		
		ТекущаяОбласть.Значение = НайденнаяСтрокаТВЗ.ЗначениеАвто + НайденнаяСтрокаТВЗ.Дельта;
		
		РасчетНаКлиенте(ИмяРаздела, ИмяПоказателя);
		
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийКВариантуЗаполненияПриИзменении(Элемент)
	
	ТекущаяОбласть = ТабличныйДокумент.ТекущаяОбласть;
	ИмяПоказателя = ТекущаяОбласть.Имя;
	
	ИмяРаздела = СтруктураРеквизитовФормы.НаимТекущегоРаздела;
	
	НайденнаяСтрокаТВЗ = ВариантЗаполненияПоказателя(ИмяРаздела, ИмяПоказателя);
	
	Если НайденнаяСтрокаТВЗ <> Неопределено Тогда
		
		НайденнаяСтрокаТВЗ.Комментарий = КомментарийКВариантуЗаполнения;
		
		ТабличныйДокумент.Области[ИмяПоказателя].Примечание.Текст = КомментарийКВариантуЗаполнения;
		
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийПриИзменении(Элемент)
	
	Модифицированность = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Выгрузить(Команда)
	
	Если СтруктураРеквизитовФормы.ИП Тогда
		РегламентированнаяОтчетностьКлиент.ПоказатьПредупреждениеОНевозможностиВыгрузкиОтчета();
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьЗавершение", ЭтотОбъект);
	
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСтроку(Команда)
	
	ВставитьДополнительнуюСтроку();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Форма", ЭтаФорма);
	Оповещение = Новый ОписаниеОповещения("ПослеСохраненияФормыЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	СохранитьНаКлиенте(, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьАвто(Команда)
	
	Отказ = Ложь;
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("Команда", Команда);
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьАвтоЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередЗаполнениемРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьСтроки(Команда)
	
	ПараметрыФормы = Новый Структура;
	
	ПараметрыФормы.Вставить("ДеревоНастроек",
		СтруктураРеквизитовФормы["АдресВоВремХранилищеДеревоНастроек"
		+ СтруктураРеквизитовФормы.НаимТекущегоРаздела]);
	
	ФормаНастроек = ПолучитьФорму("Отчет.РегламентированныйОтчетБухОтчетность.Форма.НастройкаРасшифровкиОтдельныхПоказателей", ПараметрыФормы);
	
	КонецЗаголовка = "";
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Баланс" Тогда
		КонецЗаголовка = "бухгалтерского баланса";
	Иначе
		Если ДатаПодписи >= '2013-01-01' Тогда
			КонецЗаголовка = "отчета о финансовых результатах";
		Иначе
			КонецЗаголовка = "отчета о прибылях и убытках";
		КонецЕсли;
	КонецЕсли;
	ФормаНастроек.Заголовок = "Настройка расшифровки отдельных показателей " + КонецЗаголовка;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("НастроитьСтрокиЗавершение", ЭтотОбъект);
	ФормаНастроек.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
	ФормаНастроек.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	ФормаНастроек.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура Обновить(Команда)
	
	СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация = Истина;
	
	ОбновитьСведенияОбОрганизацииВРазделахНаСервере();
	
	СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация = Ложь;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьИнформационноеОкно(Команда)
	
	ОткрытьУведомление(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуНастроек(Команда)
	
	ОткрытьФормуВыбораСтраниц("ВыбратьДляНастройки");
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьВБанк(Команда)
	
	ОчиститьСообщения();
	
	Если СтруктураРеквизитовФормы.ИП Тогда
		ПоказатьПредупреждение( , НСтр("ru='Для индивидуальных предпринимателей отправка не предусмотрена форматом.'"));
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОтправитьВБанкЗавершение", ЭтотОбъект);
	
	Если Модифицированность Тогда
		СохранитьНаКлиенте( , ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьОтчет(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОчиститьОтчетЗавершение", ЭтотОбъект);
	ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Внимание! Будут очищены все показатели отчета.%1Продолжить операцию?'"), Символы.ПС);
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТекущуюСтраницу(Команда)
	
	Если Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "ДополнительныеФайлы" Тогда
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Внимание! Будут очищены сведения о дополнительных файлах.%1Продолжить операцию?'"), Символы.ПС);
	Иначе
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Внимание! Будут очищены все показатели текущего отчета.%1Продолжить операцию?'"), Символы.ПС);
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяРаздела", СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОчиститьТекущуюСтраницуЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузку(Команда)
	
	Если СтруктураРеквизитовФормы.ИП Тогда
		
		РегламентированнаяОтчетностьКлиент.ПоказатьПредупреждениеОНевозможностиВыгрузкиОтчета();
		
		Возврат;
		
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьВыгрузкуЗавершение", ЭтотОбъект);
	
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура Расшифровать(Команда)
	
	ПараметрыОтчета = Новый Структура();
	ПараметрыОтчета.Вставить("Организация",                         СтруктураРеквизитовФормы.Организация);
	ПараметрыОтчета.Вставить("мДатаНачалаПериодаОтчета",            СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
	ПараметрыОтчета.Вставить("мДатаКонцаПериодаОтчета",             СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	ПараметрыОтчета.Вставить("АдресВременногоХранилищаРасшифровки", СтруктураРеквизитовФормы.АдресВременногоХранилищаРасшифровки);
	
	ИДИменПоказателей = Новый Массив();
	ИДИменПоказателей.Добавить(Элементы.ТабличныйДокумент.ТекущаяОбласть.Имя);
	
	РегламентированнаяОтчетностьКлиент.ОткрытьРасшифровкуОтчета(Сред(Лев(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, ".Форма.") - 1), 7), Сред(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, ".Форма.") + 7), ИДИменПоказателей, ПараметрыОтчета)
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьОтчет(Команда)
	
	Если Элементы.РазделыОтчета.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СохранитьНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтроку(Команда)
	
	ИмяПоказателя = ТабличныйДокумент.ТекущаяОбласть.Имя;
	ДополнительныеПараметры = Новый Структура("ИмяПоказателя", ИмяПоказателя);
	ОписаниеОповещения = Новый ОписаниеОповещения("УдалитьСтрокуЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ТекстВопроса = НСтр("ru='Удалить выбранную строку?'");
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ОбновитьОтображениеСостоянияОтчета()
	
	ЦветФона = ЦветаСтиля.ЦветФонаНеначавшейсяОтправки;
	Если СтатусОтчета = НСтр("ru = 'Отправлено'") Тогда
		ЦветФона = ЦветаСтиля.ЦветФонаТекущейОтправки;// желтый
	ИначеЕсли СтатусОтчета = НСтр("ru = 'Отклонено'") Тогда
		ЦветФона = ЦветаСтиля.ЦветФонаОшибкиОтправки;// красный
	ИначеЕсли СтатусОтчета = НСтр("ru = 'Доставлено'") Тогда
		ЦветФона = ЦветаСтиля.ЦветФонаУдачнойОтправки;// зеленый
	КонецЕсли;
	
	Элементы.БлокСостоянияОтправки.ЦветФона = ЦветФона;
	Элементы.ОтправитьВБанк.Видимость = (СтатусОтчета = НСтр("ru = 'Не отправлено'")
		ИЛИ СтатусОтчета = НСтр("ru = 'Отклонено'"));
	
КонецПроцедуры

&НаСервере
Функция Загрузить(ИмяСохраняемогоПараметра)
	
	Возврат ХранилищеНастроекДанныхФорм.Загрузить("Отчет.РегламентированныйОтчетБухОтчетность.Форма.УведомлениеОбИзменениях", ИмяСохраняемогоПараметра);
	
КонецФункции

&НаСервере
Процедура СформироватьСтруктуруРеквизитовФормы()
	
	СтруктураРеквизитовФормы = Новый Структура;
	СтруктураРеквизитовФормы.Вставить("мВыбраннаяФорма");
	СтруктураРеквизитовФормы.Вставить("мСкопированаФорма");
	СтруктураРеквизитовФормы.Вставить("мСохраненныйДок");
	СтруктураРеквизитовФормы.Вставить("мДатаНачалаПериодаОтчета");
	СтруктураРеквизитовФормы.Вставить("мДатаКонцаПериодаОтчета");
	СтруктураРеквизитовФормы.Вставить("мЗаписьЗапрещена");
	СтруктураРеквизитовФормы.Вставить("мЗаписываетсяНовыйДокумент");
	СтруктураРеквизитовФормы.Вставить("мВариант");
	СтруктураРеквизитовФормы.Вставить("мПечатьБезШтрихкодаРазрешена");
	СтруктураРеквизитовФормы.Вставить("мСтрокаФормата");
	СтруктураРеквизитовФормы.Вставить("мПечатаемыеРазделы");
	СтруктураРеквизитовФормы.Вставить("мДелитель");
	СтруктураРеквизитовФормы.Вставить("мВерсияФормы");
	СтруктураРеквизитовФормы.Вставить("мПечатныеФормы");
	СтруктураРеквизитовФормы.Вставить("мВПрограммеИзмененаОрганизация");
	СтруктураРеквизитовФормы.Вставить("мТипАдреса");
	СтруктураРеквизитовФормы.Вставить("мАдресДляВыгрузки");
	СтруктураРеквизитовФормы.Вставить("мБезОткрытияФормы");
	СтруктураРеквизитовФормы.Вставить("мРежимПечати");
	СтруктураРеквизитовФормы.Вставить("ЗаголовокДатаОтчетная");
	СтруктураРеквизитовФормы.Вставить("ЗаголовокДатаКонцаПрошлогоГода");
	СтруктураРеквизитовФормы.Вставить("ЗаголовокДатаКонцаПозапрошлогоГода");
	СтруктураРеквизитовФормы.Вставить("ЗаголовокДатаОтчетногоПериода");
	СтруктураРеквизитовФормы.Вставить("ЗаголовокДатаОтчетногоПериодаПрошлогоГода");
	СтруктураРеквизитовФормы.Вставить("ЗаголовокДатаАналогичногоПериодаПрошлогоГода");
	СтруктураРеквизитовФормы.Вставить("ПериодЗагрузкиДанных");
	СтруктураРеквизитовФормы.Вставить("ОтчетныйГодЗагрузкиДанных");
	СтруктураРеквизитовФормы.Вставить("НаимТекущегоРаздела");
	СтруктураРеквизитовФормы.Вставить("ВидДокумента");
	СтруктураРеквизитовФормы.Вставить("СтрПериодОтчета");
	СтруктураРеквизитовФормы.Вставить("Организация");
	СтруктураРеквизитовФормы.Вставить("ЕдиницаИзмерения");
	СтруктураРеквизитовФормы.Вставить("ТочностьЕдиницыИзмерения");
	СтруктураРеквизитовФормы.Вставить("ИП");
	СтруктураРеквизитовФормы.Вставить("НаимОрганизации");
	СтруктураРеквизитовФормы.Вставить("ВыводитьСтраницуВТаблДокНаСервере");
	СтруктураРеквизитовФормы.Вставить("ОтображатьКнопкуЗаполнить", Ложь);
	СтруктураРеквизитовФормы.Вставить("ОтображатьКнопкуРасшифровать", Ложь);
	СтруктураРеквизитовФормы.Вставить("АдресВременногоХранилищаРасшифровки");
	СтруктураРеквизитовФормы.Вставить("мСохранятьРасшифровку", Истина);
	СтруктураРеквизитовФормы.Вставить("ПрименениеЕНВД");
	СтруктураРеквизитовФормы.Вставить("мПроверятьСоотношенияПриПечатиИВыгрузки");
	СтруктураРеквизитовФормы.Вставить("ЭтоБалансНекоммерческойОрганизации");
	СтруктураРеквизитовФормы.Вставить("мОписаниеТиповЧислоЕ");
	СтруктураРеквизитовФормы.Вставить("СоответствиеПоказателейМногострочныхЧастейИхОписанию");
	СтруктураРеквизитовФормы.Вставить("ЗаголовкиОтчетов");
	СтруктураРеквизитовФормы.Вставить("ФлажокОтклАвтоРасчет", Ложь);
	СтруктураРеквизитовФормы.Вставить("СписокПечатаемыхЛистов");
	СтруктураРеквизитовФормы.Вставить("ТекущаяСтрокаРазделовОтчета");
	СтруктураРеквизитовФормы.Вставить("АдресВоВременномХранилище");
	СтруктураРеквизитовФормы.Вставить("ГруппаОрганизаций", Новый СписокЗначений);
	СтруктураРеквизитовФормы.Вставить("СформироватьФормуОтчетаАвтоматически");
	СтруктураРеквизитовФормы.Вставить("КоличествоСтрокИнформационногоМакета");
	СтруктураРеквизитовФормы.Вставить("ИмяСохраняемогоПараметра");
	СтруктураРеквизитовФормы.Вставить("СохраненныйВыборПользователя");
	СтруктураРеквизитовФормы.Вставить("ФайлПояснительнойЗаписки");
	СтруктураРеквизитовФормы.Вставить("ФайлАудиторскогоЗаключения");
	СтруктураРеквизитовФормы.Вставить("ФайлЗаявленияСоюзаСельхозпроизводителей");
	СтруктураРеквизитовФормы.Вставить("УчетРасходовПоЭлементамЗатрат", Новый Структура);
	СтруктураРеквизитовФормы.Вставить("ОборотыСчета75_01"); // сведения для вычета из авторасчета
	СтруктураРеквизитовФормы.Вставить("ВключенныеДопСтрокиОФРПриПримененииЕНВД");
	СтруктураРеквизитовФормы.Вставить("АдресВоВремХранилищеСтруктураМногострочныхЧастей");
	СтруктураРеквизитовФормы.Вставить("АдресВоВремХранилищеДеревоНастроекБаланс");
	СтруктураРеквизитовФормы.Вставить("АдресВоВремХранилищеДеревоНастроекФормаОтчета");
	СтруктураРеквизитовФормы.Вставить("АдресВоВремХранилищеТаблицаСоставПоказателей");
	СтруктураРеквизитовФормы.Вставить("Банк");
	
	СтруктураРеквизитовФормы.Вставить("НомераСтрокМногоуровнегоРаздела");
	СтруктураРеквизитовФормы.Вставить("СтруктураМногострочныхЧастей");
	СтруктураРеквизитовФормы.Вставить("ДлинаИмениГруппы");
	СтруктураРеквизитовФормы.Вставить("ДлинаИмениГрафы");
	СтруктураРеквизитовФормы.Вставить("мИдГруппы7М1");
	СтруктураРеквизитовФормы.Вставить("мИдГруппы7М2");
	СтруктураРеквизитовФормы.Вставить("мИдГруппы8М1");
	СтруктураРеквизитовФормы.Вставить("мИдГруппы8М2");
	
КонецПроцедуры

&НаСервере
Процедура Инициализация(БезОткрытияФормы = Ложь) Экспорт
	
	Перем ИсходноеКоличествоСтрокГруппы;
	
	СтруктураРеквизитовФормы.мБезОткрытияФормы = БезОткрытияФормы;
	СтруктураРеквизитовФормы.мРежимПечати = Ложь;
	
	ИнициализироватьТаблицуСоставаПоказателей();
	
	СтруктураРеквизитовФормы.ВключенныеДопСтрокиОФРПриПримененииЕНВД = ДопСтрокиОФРПриПримененииЕНВД();
	
	Если СтруктураРеквизитовФормы.мСохраненныйДок <> Неопределено Тогда
		СписокСохранения = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить();
		Если НЕ ЗначениеЗаполнено(СтруктураРеквизитовФормы.мСкопированаФорма) Тогда
			СтруктураРеквизитовФормы.Организация = СтруктураРеквизитовФормы.мСохраненныйДок.Организация;
		КонецЕсли;
		СписокСохранения.Свойство("ГруппаОрганизаций", СтруктураРеквизитовФормы.ГруппаОрганизаций);
		СписокСохранения.Свойство("БалансНекоммерческойОрганизации", СтруктураРеквизитовФормы.ЭтоБалансНекоммерческойОрганизации);
		ИнициализацияЗаполнитьСтруктурыДанных(СписокСохранения);
	Иначе
		ИнициализацияЗаполнитьСтруктурыДанных();
	КонецЕсли;
	
	ИнициализироватьСтруктуруЗаголовковОтчетов();
	
	ИнициализироватьОписанияМногострочныхЧастей();
	
	ИнициализироватьМногоуровневыеРазделы();
	
	ИнициализироватьСвойстваРазделовОтчета();
	
	ЗаполнитьСтруктуруЗависимыхЯчеекДляАвторасчета();
	
	РегламентированнаяОтчетностьПереопределяемый.ПолучитьПризнакУчетаРасходовПоЭлементамЗатрат(
		СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета,
		СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,
		СтруктураРеквизитовФормы.Организация,
		СтруктураРеквизитовФормы.УчетРасходовПоЭлементамЗатрат.РасходыУчитываютсяПоЭЗВОтчетномГоду);
	
	НачалоПредшествующегоПериодаОтчета = ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета, -12);
	КонецПредшествующегоПериодаОтчета  = ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,  -12);
	
	РегламентированнаяОтчетностьПереопределяемый.ПолучитьПризнакУчетаРасходовПоЭлементамЗатрат(
		НачалоПредшествующегоПериодаОтчета,
		КонецПредшествующегоПериодаОтчета,
		СтруктураРеквизитовФормы.Организация,
		СтруктураРеквизитовФормы.УчетРасходовПоЭлементамЗатрат.РасходыУчитываютсяПоЭЗВПредыдущемГоду);
	
	ЗаполнитьНачальныеНастройки();
	
	Если Не СтруктураРеквизитовФормы.мБезОткрытияФормы Тогда
		
		КопироватьДанныеФормы(мДеревоСтраницОтчета, мДеревоВыбранныхСтраниц);
		
	КонецЕсли;
	
	СформироватьДеревоРазделовОтчетаНаСервере();
	
	Если СтруктураРеквизитовФормы.СформироватьФормуОтчетаАвтоматически Тогда
		СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация = Истина;
	Иначе
		СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация = Ложь;
	КонецЕсли;
	
	СтруктураРеквизитовФормы.ВидДокумента = 0;
	НомерКорректировки = 1;
	
	Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
		// Новый документ.
		ИмяРаздела = "Баланс";
		ТабличныйДокумент.Очистить();
		ТабличныйДокумент.Вывести(МакетРаздела15(ИмяРаздела));
		Если ВидСдачиОтчетности = 1 Тогда 
			ТабличныйДокумент.Области.ВидОтчетности.Значение = "Обычная";
		ИначеЕсли ВидСдачиОтчетности = 2 Тогда
			ТабличныйДокумент.Области.ВидОтчетности.Значение = "Промежуточная при ликвидации/реорганизации";
		ИначеЕсли ВидСдачиОтчетности = 3 Тогда
			ТабличныйДокумент.Области.ВидОтчетности.Значение = "Ликвидационная";
		КонецЕсли;
		
		СтруктураРеквизитовФормы.ЕдиницаИзмерения         = Перечисления.ПорядкиОкругленияОтчетности.Окр1000;
		СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = 0;
		
		СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки = Ложь;
		
		КопироватьДанныеФормы(мДеревоСтраницОтчета, мДеревоВыбранныхСтраниц);
		
		СтруктураРеквизитовФормы.мТипАдреса = ТипАдресаПоУмолчанию();
		
		СформироватьНастройкиСоставаДополнительныхСтрок(СоставДополнительныхСтрок);
		
		СтруктураРеквизитовФормы.ИП = НЕ РегламентированнаяОтчетностьВызовСервера.ЭтоЮридическоеЛицо(СтруктураРеквизитовФормы.Организация);
		
		ЗаполнитьСведенияОбОрганизацииНаСервере();
		
		ТабличныйДокумент.Области.НомерКорректировки.Значение = 0;
		
		ТабличныйДокумент.Области.ДатаПодписиОтчета.Значение = ДатаПодписи;
		
		// Отображение первого активного раздела отчета.
		ИмяРаздела = РазделыОтчета.ПолучитьЭлементы()[0].КолонкаРазделыОтчетаСокрНаим;
		Если ИмяРаздела <> "Баланс" Тогда
			СохранитьДанныеРаздела("Баланс", Истина);
			ТабличныйДокумент.Очистить();
			ТабличныйДокумент.Вывести(МакетРаздела15(ИмяРаздела));
		КонецЕсли;
		
		Модифицированность = Истина;
		
	Иначе
		// Сохраненный или скопированный документ.
		ВосстановитьСохраненныеДанные();
		
		Если ЗначениеЗаполнено(СтруктураРеквизитовФормы.мСкопированаФорма) Тогда
			// Действия при копировании формы.
			СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено;
			Модифицированность = Истина;
		КонецЕсли;
		
		Если НЕ БезОткрытияФормы
		   И НЕ СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
			ЗаблокироватьДанныеДляРедактирования(СтруктураРеквизитовФормы.мСохраненныйДок, , ЭтаФорма.УникальныйИдентификатор);
		КонецЕсли;
		
		СтруктураРеквизитовФормы.ИП = НЕ РегламентированнаяОтчетностьВызовСервера.ЭтоЮридическоеЛицо(СтруктураРеквизитовФормы.Организация);
		
		Если СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация Тогда
			ЗаполнитьСведенияОбОрганизацииНаСервере();
		КонецЕсли;
		
	КонецЕсли;
	
	ИмяРаздела = РазделыОтчета.ПолучитьЭлементы()[0].КолонкаРазделыОтчетаСокрНаим;
	
	НомерКорректировки = НомерКорректировки * СтруктураРеквизитовФормы.ВидДокумента;
	
	ЗаполнитьПериодыВРазделахОтчетности(ИмяРаздела);
	
	ПолучитьСтруктуруМногострочныхЧастей();
	
	Для Каждого ЭлементСтруктуры Из СтруктураМногострочныхЧастей Цикл
		ПеренумероватьСтрокиИЗаполнитьЗаголовкиМногострочнойЧасти(ЭлементСтруктуры.Значение, ИмяРаздела);
	КонецЦикла;
	
	СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяРаздела;
	
	УстановитьФорматВыводаНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
	ПолучитьСведенияОПоказателяхОтчета();
	
	Если НЕ СтруктураРеквизитовФормы.ОтображатьКнопкуЗаполнить Тогда
		Элементы.Заполнить.Видимость = Ложь;
		СтруктураРеквизитовФормы.мСохранятьРасшифровку = Ложь;
	КонецЕсли;
	
	Если НЕ СтруктураРеквизитовФормы.ОтображатьКнопкуРасшифровать Тогда
		Элементы.Расшифровать.Видимость = Ложь;
		Элементы.ТабличныйДокументКонтекстноеМенюРасшифровать.Видимость = Ложь;
	КонецЕсли;
	
	ПоказатьПериод(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
	ОчиститьПолеПодписиБухгалтера();
	
	УстановитьЦветФонаЯчейкиНаСервере(,, СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	СтруктураРеквизитовФормы.НаимОрганизации = СтруктураРеквизитовФормы.Организация.Наименование;
	ИзменитьНазванияОтчетов(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	УстановитьВидимостьДополнительныхСтрок(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	СкрытьСсылкуНастройкаСоставаОрганизаций();
	СкрытьПоказательДатаУтвержденияОтчетности();
	СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
	РегламентированнаяОтчетностьКлиентСервер.ПриИнициализацииФормыРегламентированногоОтчета(ЭтаФорма);
	
	мСкопированаФорма = Неопределено;
	Параметры.Свойство("мСкопированаФорма", мСкопированаФорма);
	Если ЗначениеЗаполнено(мСкопированаФорма) Тогда 
		Модифицированность = Истина;
	КонецЕсли;
	
	ОтрисоватьЗначкиУдаленияСтрок(ТабличныйДокумент);
	
	Если СтруктураРеквизитовФормы.СформироватьФормуОтчетаАвтоматически Тогда
		ЗаданиеВыполнено = ЗаполнитьАвтоНаСервере();
		Если ЗаданиеВыполнено Тогда
			Если Элементы.Расшифровать.Видимость Тогда
				Элементы.Расшифровать.Доступность = Истина;
				Элементы.ТабличныйДокументКонтекстноеМенюРасшифровать.Доступность = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьДеревоНастроекСоставаДопСтрок(ДеревоНастроек)
	
	ОписаниеТиповСтрока   = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки());
	ОписаниеТиповЧисло1   = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(1, 0, ДопустимыйЗнак.Неотрицательный));
	ОписаниеТиповЧисло3   = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(3, 0, ДопустимыйЗнак.Неотрицательный));
	ОписаниеТиповЧисло5_2 = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(5, 2, ДопустимыйЗнак.Неотрицательный));
	ОписаниеТиповБулево   = Новый ОписаниеТипов("Булево");
	
	КолонкиДН = ДеревоНастроек.Колонки;
	
	КолонкиДН.Добавить("Наименование", ОписаниеТиповСтрока);
	КолонкиДН.Добавить("Код", ОписаниеТиповСтрока);
	КолонкиДН.Добавить("ВключатьВОтчет", ОписаниеТиповЧисло1);
	КолонкиДН.Добавить("Существенность", ОписаниеТиповЧисло5_2);
	КолонкиДН.Добавить("ИмяОбластиДопСтроки", ОписаниеТиповСтрока);
	КолонкиДН.Добавить("ТипСостава", ОписаниеТиповСтрока);
	КолонкиДН.Добавить("МаксимальноеКоличество", ОписаниеТиповЧисло3);
	КолонкиДН.Добавить("ДостДляРедактирования_Существенность", ОписаниеТиповБулево);
	КолонкиДН.Добавить("ДостДляРедактирования_МаксимальноеКоличество", ОписаниеТиповБулево);
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьТаблицуСоставаПоказателей()
	
	ОписаниеТиповСтрока = Новый ОписаниеТипов("Строка");
	
	ТаблицаСоставПоказателей = Новый ТаблицаЗначений;
	
	КолонкиТЗ = ТаблицаСоставПоказателей.Колонки;
	КолонкиТЗ.Добавить("ИмяПоляТаблДокумента",   ОписаниеТиповСтрока);
	КолонкиТЗ.Добавить("КодПоказателяПоСоставу", ОписаниеТиповСтрока);
	КолонкиТЗ.Добавить("КодПоказателяПоФорме",   ОписаниеТиповСтрока);
	КолонкиТЗ.Добавить("ПризнМногострочности",   ОписаниеТиповСтрока);
	КолонкиТЗ.Добавить("ТипДанныхПоказателя",    ОписаниеТиповСтрока);
	
	СтруктураРеквизитовФормы.АдресВоВремХранилищеТаблицаСоставПоказателей
		= ПоместитьВоВременноеХранилище(ТаблицаСоставПоказателей, УникальныйИдентификатор);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьВключенныеДопСтрокиОФРПриПримененииЕНВД()
	
	СтруктураРеквизитовФормы.ВключенныеДопСтрокиОФРПриПримененииЕНВД.Очистить();
	
	МассивДопСтрок = ДопСтрокиОФРПриПримененииЕНВД();
	
	Для каждого ДопСтрока Из МассивДопСтрок Цикл
		Если ВключенВОтчет(ДеревоНастроекФормаОтчета, ДопСтрока) Тогда
			СтруктураРеквизитовФормы.ВключенныеДопСтрокиОФРПриПримененииЕНВД.Добавить(ДопСтрока);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ОпределитьСтраницуПанелиПоКодуПоказателя(Знач КодПоказателя)
	
	ПолучитьТаблицуСоставаПоказателей();
	
	НайденныеСтроки = ТаблицаСоставПоказателей.НайтиСтроки(Новый Структура("КодПоказателяПоСоставу", КодПоказателя));
	Если НайденныеСтроки.Количество() > 0 Тогда
		Возврат НайденныеСтроки[0].ИмяПоляТаблДокумента;
	Иначе
		НайденныеСтроки = ТаблицаСоставПоказателей.НайтиСтроки(Новый Структура("КодПоказателяПоФорме", КодПоказателя));
		Если НайденныеСтроки.Количество() > 0 Тогда
			Возврат НайденныеСтроки[0].ИмяПоляТаблДокумента;
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ПолучитьДеревоНастроекСоставаДопСтрок(ИмяРаздела)
	
	Если ИмяРаздела = "Баланс" Тогда
		Если ДеревоНастроекБаланс = Неопределено Тогда
			ДеревоНастроекБаланс = ПолучитьИзВременногоХранилища(
				СтруктураРеквизитовФормы.АдресВоВремХранилищеДеревоНастроекБаланс);
		КонецЕсли;
	ИначеЕсли ИмяРаздела = "ФормаОтчета" Тогда
		Если ДеревоНастроекФормаОтчета = Неопределено Тогда
			ДеревоНастроекФормаОтчета = ПолучитьИзВременногоХранилища(
				СтруктураРеквизитовФормы.АдресВоВремХранилищеДеревоНастроекФормаОтчета);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьСтруктуруМногострочныхЧастей()
	
	Если СтруктураМногострочныхЧастей = Неопределено Тогда
		СтруктураМногострочныхЧастей = ПолучитьИзВременногоХранилища(
			СтруктураРеквизитовФормы.АдресВоВремХранилищеСтруктураМногострочныхЧастей);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьТаблицуСоставаПоказателей()
	
	Если ТаблицаСоставПоказателей = Неопределено Тогда
		ТаблицаСоставПоказателей = ПолучитьИзВременногоХранилища(
			СтруктураРеквизитовФормы.АдресВоВремХранилищеТаблицаСоставПоказателей);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьДопСтрокПеренумероватьСтрокиРасшифровкиНаСервере(РезультатНастройки)
	
	Если РезультатНастройки <> Неопределено Тогда
		Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Баланс" Тогда
			ДеревоНастроекБаланс = ДанныеФормыВЗначение(РезультатНастройки, Тип("ДеревоЗначений"));
			СтруктураРеквизитовФормы["АдресВоВремХранилищеДеревоНастроекБаланс"]
				= ПоместитьВоВременноеХранилище(ДеревоНастроекБаланс, УникальныйИдентификатор);
		ИначеЕсли СтруктураРеквизитовФормы.НаимТекущегоРаздела = "ФормаОтчета" Тогда
			ДеревоНастроекФормаОтчета = ДанныеФормыВЗначение(РезультатНастройки, Тип("ДеревоЗначений"));
			СтруктураРеквизитовФормы["АдресВоВремХранилищеДеревоНастроекФормаОтчета"]
				= ПоместитьВоВременноеХранилище(ДеревоНастроекФормаОтчета, УникальныйИдентификатор);
			ОбновитьВключенныеДопСтрокиОФРПриПримененииЕНВД();
		КонецЕсли;
	КонецЕсли;
	
	УстановитьВидимостьДополнительныхСтрок(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Баланс" Тогда
		ПеренумероватьСтрокиРасшифровкиБаланса();
	ИначеЕсли СтруктураРеквизитовФормы.НаимТекущегоРаздела = "ФормаОтчета" Тогда
		ПеренумероватьСтрокиРасшифровкиОПУ();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗакрытииНаСервере()
	
	РегламентированнаяОтчетность.ПриЗакрытииРегламентированногоОтчета(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ИнициализацияЗаполнитьСтруктурыДанных(СохраненныеДанные = Неопределено)
	
	СтруктураОтчета = ПолучитьСтруктуруОтчета2014Кв4();
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСтруктуруОтчета2014Кв4()
	
	СоставНастройкаОтчета = Новый Структура;
	
	// Бухгалтерский баланс.
	СтруктураОтчета = Новый Структура();
	Если СтруктураРеквизитовФормы.ЭтоБалансНекоммерческойОрганизации Тогда
		СтруктураОтчета.Вставить("ИмяСтраницы", "Баланс");
		СтруктураОтчета.Вставить("ИмяМакета", "БалансНКО_2012Кв4_3");
		СтруктураОтчета.Вставить("ИмяСекцииПоказателей", "БалансНКО_2012Кв4_3");
		СтруктураОтчета.Вставить("ИмяОписанияМногострочныхЧастей", "БалансНКО_2012Кв4_3");
		СтруктураОтчета.Вставить("ИмяСекцииНастройкиСоставаПоказателей", "БалансНКО_2012Кв4_3");
		СтруктураОтчета.Вставить("ИдентификаторАвтозаполнения", "БалансНКО_2012Кв4_3");
	Иначе
		СтруктураОтчета.Вставить("ИмяСтраницы", "Баланс");
		СтруктураОтчета.Вставить("ИмяМакета", "Баланс_2012Кв4_3");
		СтруктураОтчета.Вставить("ИмяСекцииПоказателей", "Баланс_2012Кв4_3");
		СтруктураОтчета.Вставить("ИмяОписанияМногострочныхЧастей", "Баланс_2012Кв4_3");
		СтруктураОтчета.Вставить("ИмяСекцииНастройкиСоставаПоказателей", "Баланс_2012Кв4_3");
		СтруктураОтчета.Вставить("ИдентификаторАвтозаполнения", "Баланс_2012Кв4_3");
	КонецЕсли;
	
	СоставНастройкаОтчета.Вставить("Баланс", СтруктураОтчета);
	
	ДополнитьСтруктуруОтчетаОбщимиОтчетами(СоставНастройкаОтчета);
	
	Возврат СоставНастройкаОтчета;
	
КонецФункции

&НаСервере
Процедура ДополнитьСтруктуруОтчетаОбщимиОтчетами(СоставНастройкаОтчета)
	
	// Отчет о прибылях и убытках.
	СтруктураОтчета = Новый Структура();
	Если ИспользуютсяМакетыЕНВД() Тогда
		СтруктураОтчета.Вставить("ИмяСтраницы",                    "ФормаОтчета");
		СтруктураОтчета.Вставить("ИмяМакета",                      "ОПУ_ЕНВД");
		СтруктураОтчета.Вставить("ИмяСекцииПоказателей",           "ФормаОтчетаЕНВД");
		СтруктураОтчета.Вставить("ИмяОписанияМногострочныхЧастей", "ОПУ_ЕНВД");
		СтруктураОтчета.Вставить("ИмяСекцииНастройкиСоставаПоказателей", "ОПУ_ЕНВД");
	Иначе
		СтруктураОтчета.Вставить("ИмяСтраницы",                    "ФормаОтчета");
		СтруктураОтчета.Вставить("ИмяМакета",                      "ОПУ_НеЕНВД");
		СтруктураОтчета.Вставить("ИмяСекцииПоказателей",           "ФормаОтчетаНеЕНВД");
		СтруктураОтчета.Вставить("ИмяОписанияМногострочныхЧастей", "ОПУ_НеЕНВД");
		СтруктураОтчета.Вставить("ИмяСекцииНастройкиСоставаПоказателей", "ОПУ_НеЕНВД");
	КонецЕсли;
	
	СоставНастройкаОтчета.Вставить("ОПУ", СтруктураОтчета);
	
	// Отчет об изменениях капитала.
	СтруктураРаздела = Новый Структура();
	СтруктураРаздела.Вставить("ИмяСтраницы",                    "ОИК");
	СтруктураРаздела.Вставить("ИмяМакета",                      "ОИК");
	СтруктураРаздела.Вставить("ИмяСекцииПоказателей",           "ОИК_2014Кв4");
	СтруктураРаздела.Вставить("ИмяОписанияМногострочныхЧастей", "ОИК");
	
	СоставНастройкаОтчета.Вставить("ОИК", СтруктураРаздела);
	
	// Отчет о движении денежных средств.
	СтруктураОтчета = Новый Структура();
	СтруктураОтчета.Вставить("ИмяСтраницы",                    "ОДДС");
	СтруктураОтчета.Вставить("ИмяМакета",                      "ОДДС");
	СтруктураОтчета.Вставить("ИмяСекцииПоказателей",           "ОДДС");
	СтруктураОтчета.Вставить("ИмяОписанияМногострочныхЧастей", "ОДДС");
	
	СоставНастройкаОтчета.Вставить("ОДДС", СтруктураОтчета);
	
	// Дополнительные показатели.
	СтруктураРаздела = Новый Структура();
	СтруктураРаздела.Вставить("ИмяСтраницы",                    "ДополнительныеПоказатели");
	СтруктураРаздела.Вставить("ИмяМакета",                      "ДополнительныеПоказатели");
	СтруктураРаздела.Вставить("ИмяСекцииПоказателей",           "ДополнительныеПоказатели");
	СтруктураРаздела.Вставить("ИмяОписанияМногострочныхЧастей", "ДополнительныеПоказатели");
	
	СоставНастройкаОтчета.Вставить("ДополнительныеПоказатели", СтруктураРаздела);
	
	// Расшифровки обеспечений.
	СтруктураРаздела = Новый Структура();
	СтруктураРаздела.Вставить("ИмяСтраницы",                    "РасшифровкиОбеспечений");
	СтруктураРаздела.Вставить("ИмяМакета",                      "");
	СтруктураРаздела.Вставить("ИмяСекцииПоказателей",           "");
	СтруктураРаздела.Вставить("ИмяОписанияМногострочныхЧастей", "");
	
	СоставНастройкаОтчета.Вставить("РасшифровкиОбеспечений", СтруктураРаздела);
	
	// ОСВ по счету 008.
	СтруктураРаздела = Новый Структура();
	СтруктураРаздела.Вставить("ИмяСтраницы",                    "ОСВ_008");
	СтруктураРаздела.Вставить("ИмяМакета",                      "");
	СтруктураРаздела.Вставить("ИмяСекцииПоказателей",           "");
	СтруктураРаздела.Вставить("ИмяОписанияМногострочныхЧастей", "");
	
	СоставНастройкаОтчета.Вставить("ОСВ_008", СтруктураРаздела);
	
	// ОСВ по счету 009.
	СтруктураРаздела = Новый Структура();
	СтруктураРаздела.Вставить("ИмяСтраницы",                    "ОСВ_009");
	СтруктураРаздела.Вставить("ИмяМакета",                      "");
	СтруктураРаздела.Вставить("ИмяСекцииПоказателей",           "");
	СтруктураРаздела.Вставить("ИмяОписанияМногострочныхЧастей", "");
	
	СоставНастройкаОтчета.Вставить("ОСВ_009", СтруктураРаздела);
	
	// Задолженность по кредитам и займам.
	СтруктураРаздела = Новый Структура();
	СтруктураРаздела.Вставить("ИмяСтраницы",                    "ЗадолженностьПоКредитамЗаймам");
	СтруктураРаздела.Вставить("ИмяМакета",                      "");
	СтруктураРаздела.Вставить("ИмяСекцииПоказателей",           "");
	СтруктураРаздела.Вставить("ИмяОписанияМногострочныхЧастей", "");
	
	СоставНастройкаОтчета.Вставить("ЗадолженностьПоКредитамЗаймам", СтруктураРаздела);
	
	// ОСВ по счету 66.
	СтруктураРаздела = Новый Структура();
	СтруктураРаздела.Вставить("ИмяСтраницы",                    "ОСВ_66");
	СтруктураРаздела.Вставить("ИмяМакета",                      "ОСВ_66");
	СтруктураРаздела.Вставить("ИмяСекцииПоказателей",           "");
	СтруктураРаздела.Вставить("ИмяОписанияМногострочныхЧастей", "");
	
	СоставНастройкаОтчета.Вставить("ОСВ_66", СтруктураРаздела);
	
	// ОСВ по счету 67.
	СтруктураРаздела = Новый Структура();
	СтруктураРаздела.Вставить("ИмяСтраницы",                    "ОСВ_67");
	СтруктураРаздела.Вставить("ИмяМакета",                      "ОСВ_67");
	СтруктураРаздела.Вставить("ИмяСекцииПоказателей",           "");
	СтруктураРаздела.Вставить("ИмяОписанияМногострочныхЧастей", "");
	
	СоставНастройкаОтчета.Вставить("ОСВ_67", СтруктураРаздела);
	
	// Расходы по финансовому лизингу.
	СтруктураРаздела = Новый Структура();
	СтруктураРаздела.Вставить("ИмяСтраницы",                    "ЛизингОбязательства");
	СтруктураРаздела.Вставить("ИмяМакета",                      "ЛизингОбязательства");
	СтруктураРаздела.Вставить("ИмяСекцииПоказателей",           "ЛизингОбязательства");
	СтруктураРаздела.Вставить("ИмяОписанияМногострочныхЧастей", "ЛизингОбязательства");
	
	СоставНастройкаОтчета.Вставить("ЛизингОбязательства", СтруктураРаздела);
	
	// Денежные средства.
	СтруктураРаздела = Новый Структура();
	СтруктураРаздела.Вставить("ИмяСтраницы",                    "ДенежныеСредства");
	СтруктураРаздела.Вставить("ИмяМакета",                      "");
	СтруктураРаздела.Вставить("ИмяСекцииПоказателей",           "");
	СтруктураРаздела.Вставить("ИмяОписанияМногострочныхЧастей", "");
	
	СоставНастройкаОтчета.Вставить("ДенежныеСредства", СтруктураРаздела);
	
	// Анализ счета 50.
	СтруктураРаздела = Новый Структура();
	СтруктураРаздела.Вставить("ИмяСтраницы",                    "Анализ_50");
	СтруктураРаздела.Вставить("ИмяМакета",                      "");
	СтруктураРаздела.Вставить("ИмяСекцииПоказателей",           "");
	СтруктураРаздела.Вставить("ИмяОписанияМногострочныхЧастей", "");
	
	СоставНастройкаОтчета.Вставить("Анализ_50", СтруктураРаздела);
	
	// Анализ счета 51.
	СтруктураРаздела = Новый Структура();
	СтруктураРаздела.Вставить("ИмяСтраницы",                    "Анализ_51");
	СтруктураРаздела.Вставить("ИмяМакета",                      "");
	СтруктураРаздела.Вставить("ИмяСекцииПоказателей",           "");
	СтруктураРаздела.Вставить("ИмяОписанияМногострочныхЧастей", "");
	
	СоставНастройкаОтчета.Вставить("Анализ_51", СтруктураРаздела);
	
	// Анализ счета 52.
	СтруктураРаздела = Новый Структура();
	СтруктураРаздела.Вставить("ИмяСтраницы",                    "Анализ_52");
	СтруктураРаздела.Вставить("ИмяМакета",                      "");
	СтруктураРаздела.Вставить("ИмяСекцииПоказателей",           "");
	СтруктураРаздела.Вставить("ИмяОписанияМногострочныхЧастей", "");
	
	СоставНастройкаОтчета.Вставить("Анализ_52", СтруктураРаздела);
	
	// Анализ счета 55.
	СтруктураРаздела = Новый Структура();
	СтруктураРаздела.Вставить("ИмяСтраницы",                    "Анализ_55");
	СтруктураРаздела.Вставить("ИмяМакета",                      "");
	СтруктураРаздела.Вставить("ИмяСекцииПоказателей",           "");
	СтруктураРаздела.Вставить("ИмяОписанияМногострочныхЧастей", "");
	
	СоставНастройкаОтчета.Вставить("Анализ_55", СтруктураРаздела);
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьСтруктуруЗаголовковОтчетов()
	
	СтруктураРеквизитовФормы.ЗаголовкиОтчетов = Новый Соответствие;
	
	КонецПредыдущегоГода = КонецГода(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, -12));
	КонецГодаПредшествующегоПредыдущему = КонецГода(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, -24));
	
	ГодОтчета = Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ = 'гггг'");
	ГодПредыдущий = Формат(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, -12), "ДФ = 'гггг'");
	
	СтруктураРеквизитовФормы.ЗаголовкиОтчетов.Вставить("ЗаПериодОтчетногоГода", "за " + ГодОтчета + "г.");
	СтруктураРеквизитовФормы.ЗаголовкиОтчетов.Вставить("ЗаПериодПредыдущегоГода", "за " + ГодПредыдущий + "г.");
	
	СтруктураРеквизитовФормы.ЗаголовкиОтчетов.Вставить("НаОтчетнуюДату", "На " + Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДЛФ=DD"));
	СтруктураРеквизитовФормы.ЗаголовкиОтчетов.Вставить("НаКонецПредыдущегоГода", "На " + Формат(КонецПредыдущегоГода, "ДЛФ=DD"));
	СтруктураРеквизитовФормы.ЗаголовкиОтчетов.Вставить("НаКонецГодаПредшествующегоПредыдущему", "На " + Формат(КонецГодаПредшествующегоПредыдущему, "ДЛФ=DD"));
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьОписанияМногострочныхЧастей()
	
	ИмяМакетаСтруктурыМногострочныхЧастей = НастройкиФормы.МакетСтруктурыМногострочныхЧастей;
	ТекстОписанияСтруктуры = Отчеты[Сред(Лев(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, ".Форма.") - 1), 7)].ПолучитьМакет(ИмяМакетаСтруктурыМногострочныхЧастей).ПолучитьТекст();
	ИнициализироватьОписанияМногострочныхПоXML(ТекстОписанияСтруктуры);
	
	ПолучитьСтруктуруМногострочныхЧастей();
	
	// Заполнение соответствия показателей и их описаний в структуре
	// для возможности получения описания по имени показателя.
	Для Каждого МногострочнаяЧасть Из СтруктураМногострочныхЧастей Цикл
		
		ИдентификаторМногострочнойЧасти = МногострочнаяЧасть.Ключ;
		ПоказателиМногострочнойЧасти    = МногострочнаяЧасть.Значение.Состав;
		
		Если ТипЗнч(ПоказателиМногострочнойЧасти) <> Тип("Массив") Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого Показатель Из ПоказателиМногострочнойЧасти[0] Цикл
			СтруктураРеквизитовФормы.СоответствиеПоказателейМногострочныхЧастейИхОписанию.Вставить(Показатель.Ключ, ИдентификаторМногострочнойЧасти);
		КонецЦикла;
		
	КонецЦикла;
	
	ИнициализироватьОписанияДревовидныхМногострочныхЧастей();
	
КонецПроцедуры

&НаСервере
Процедура ПеренумероватьСтрокиИЗаполнитьЗаголовкиМногострочнойЧасти(СтруктураМногострочнойЧасти, ИмяТекРаздела)

	Перем Кодификаторы;
	Перем Заголовки;
	
	Если СтруктураМногострочнойЧасти.Свойство("ИмяПоляТабличногоДокумента")
	   И НЕ СтруктураМногострочнойЧасти.ИмяПоляТабличногоДокумента = ИмяТекРаздела Тогда
		Возврат;
	КонецЕсли;
	
	// Если в описании структуры многострочной части указаны кодификаторы, то производится перенумерация
	Если СтруктураМногострочнойЧасти.Свойство("Кодификаторы", Кодификаторы) Тогда
		Если ТипЗнч(Кодификаторы) = Тип("Массив") Тогда
			Для Каждого Кодификатор Из Кодификаторы Цикл
				
				КоличествоКодов = СтруктураМногострочнойЧасти.Состав.Количество();
				МаксимальноеКоличествоСтрок = Неопределено;
				Если СтруктураМногострочнойЧасти.Свойство("Масштаб")
				   И СтруктураМногострочнойЧасти.Масштаб.Свойство("МаксимальноеКоличествоСтрок", МаксимальноеКоличествоСтрок)
				   И МаксимальноеКоличествоСтрок <> 0 Тогда
					КоличествоКодов = Мин(МаксимальноеКоличествоСтрок, КоличествоКодов);
				КонецЕсли;
				Для Инд = 1 По КоличествоКодов Цикл
					ОбластьСКодом = ТабличныйДокумент.Области[Кодификатор.Область + "_" + СтрокаЧГ0(Инд)];
					ОбластьСКодом.Текст = Формат(Кодификатор.Код + Инд - 1, "ЧГ=0");
				КонецЦикла;
				// Для остальных строк коды не назначаются.
				Для Инд = КоличествоКодов + 1 По СтруктураМногострочнойЧасти.Состав.Количество() Цикл
					ОбластьСКодом = ТабличныйДокумент.Области[Кодификатор.Область + "_" + СтрокаЧГ0(Инд)];
					ОбластьСКодом.Текст = "";
				КонецЦикла;
				
			КонецЦикла;
		ИначеЕсли ТипЗнч(Кодификаторы) = Тип("Структура") Тогда
			Для Инд = 1 По СтруктураМногострочнойЧасти.Состав.Количество() Цикл
				ОбластьСКодом = ТабличныйДокумент.Области[Кодификаторы.Область + "_" + СтрокаЧГ0(Инд)];
				ОбластьСКодом.Текст = Формат(Кодификаторы.Код + Инд - 1, "ЧГ=0");
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;

	// Если в описании структуры встречаются поля с датами, то производится их заполнение
	Если СтруктураМногострочнойЧасти.Свойство("Заголовки", Заголовки) Тогда
		Если ТипЗнч(Заголовки) = Тип("Массив") Тогда
			Для Каждого ЗаголовокСтроки Из Заголовки Цикл
				Для Инд = 1 По СтруктураМногострочнойЧасти.Состав.Количество() Цикл
					ОбластьОтчета = ТабличныйДокумент.Области[ЗаголовокСтроки.Область + "_" + СтрокаЧГ0(Инд)];
					ОбластьОтчета.Текст = СтруктураРеквизитовФормы.ЗаголовкиОтчетов[ЗаголовокСтроки.Заголовок];
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ИнициализироватьСвойстваРазделовОтчета() Экспорт
	
	мСвойстваРазделовДекларации.ПолучитьЭлементы().Очистить();
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	
	СтрокаУровня1.ИмяСтраницы                          = "Баланс";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Истина;
	СтрокаУровня1.МногострочностьВРазделе.Добавить();
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	
	СтрокаУровня1.ИмяСтраницы                          = "ФормаОтчета"; // Отчет о прибылях и убытках
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Истина;
	СтрокаУровня1.МногострочностьВРазделе.Добавить();
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	
	СтрокаУровня1.ИмяСтраницы                          = "ОИК"; // Отчет об изменениях капитала
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Истина;
	СтрокаУровня1.МногострочностьВРазделе.Добавить();
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	
	СтрокаУровня1.ИмяСтраницы                          = "ОДДС"; // Отчет о движении денежных средств
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Истина;
	СтрокаУровня1.МногострочностьВРазделе.Добавить();
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	
	СтрокаУровня1.ИмяСтраницы                          = "ДополнительныеПоказатели";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Истина;
	СтрокаУровня1.МногострочностьВРазделе.Добавить();
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	
	СтрокаУровня1.ИмяСтраницы                          = "РасшифровкиОбеспечений";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Истина;
	СтрокаУровня1.МногострочностьВРазделе.Добавить();
	
	СтрокаУровня2 = СтрокаУровня1.ПолучитьЭлементы().Добавить();
	
	СтрокаУровня2.ИмяСтраницы                          = "ОСВ_008";
	СтрокаУровня2.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня2.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня2.ОчищатьРаздел                        = Истина;
	СтрокаУровня2.ИмяПредставления                     = "";
	СтрокаУровня2.ПредставлениеДанных                  = Истина;
	СтрокаУровня2.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня2.РазделЯвляетсяАвтозаполняемым        = Истина;
	СтрокаУровня2.МногострочностьВРазделе.Добавить();
	
	СтрокаУровня2 = СтрокаУровня1.ПолучитьЭлементы().Добавить();
	
	СтрокаУровня2.ИмяСтраницы                          = "ОСВ_009";
	СтрокаУровня2.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня2.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня2.ОчищатьРаздел                        = Истина;
	СтрокаУровня2.ИмяПредставления                     = "";
	СтрокаУровня2.ПредставлениеДанных                  = Истина;
	СтрокаУровня2.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня2.РазделЯвляетсяАвтозаполняемым        = Истина;
	СтрокаУровня2.МногострочностьВРазделе.Добавить();
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	
	СтрокаУровня1.ИмяСтраницы                          = "ЗадолженностьПоКредитамЗаймам";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Истина;
	СтрокаУровня1.МногострочностьВРазделе.Добавить();
	
	СтрокаУровня2 = СтрокаУровня1.ПолучитьЭлементы().Добавить();
	
	СтрокаУровня2.ИмяСтраницы                          = "ОСВ_66";
	СтрокаУровня2.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня2.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня2.ОчищатьРаздел                        = Истина;
	СтрокаУровня2.ИмяПредставления                     = "";
	СтрокаУровня2.ПредставлениеДанных                  = Истина;
	СтрокаУровня2.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня2.РазделЯвляетсяАвтозаполняемым        = Истина;
	СтрокаУровня2.МногострочностьВРазделе.Добавить();
	
	СтрокаУровня2 = СтрокаУровня1.ПолучитьЭлементы().Добавить();
	
	СтрокаУровня2.ИмяСтраницы                          = "ОСВ_67";
	СтрокаУровня2.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня2.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня2.ОчищатьРаздел                        = Истина;
	СтрокаУровня2.ИмяПредставления                     = "";
	СтрокаУровня2.ПредставлениеДанных                  = Истина;
	СтрокаУровня2.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня2.РазделЯвляетсяАвтозаполняемым        = Истина;
	СтрокаУровня2.МногострочностьВРазделе.Добавить();
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	
	СтрокаУровня1.ИмяСтраницы                          = "ЛизингОбязательства";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Истина;
	СтрокаУровня1.МногострочностьВРазделе.Добавить();
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	
	СтрокаУровня1.ИмяСтраницы                          = "ДенежныеСредства";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Истина;
	СтрокаУровня1.МногострочностьВРазделе.Добавить();
	
	СтрокаУровня2 = СтрокаУровня1.ПолучитьЭлементы().Добавить();
	
	СтрокаУровня2.ИмяСтраницы                          = "Анализ_50";
	СтрокаУровня2.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня2.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня2.ОчищатьРаздел                        = Истина;
	СтрокаУровня2.ИмяПредставления                     = "";
	СтрокаУровня2.ПредставлениеДанных                  = Истина;
	СтрокаУровня2.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня2.РазделЯвляетсяАвтозаполняемым        = Истина;
	СтрокаУровня2.МногострочностьВРазделе.Добавить();
	
	СтрокаУровня2 = СтрокаУровня1.ПолучитьЭлементы().Добавить();
	
	СтрокаУровня2.ИмяСтраницы                          = "Анализ_51";
	СтрокаУровня2.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня2.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня2.ОчищатьРаздел                        = Истина;
	СтрокаУровня2.ИмяПредставления                     = "";
	СтрокаУровня2.ПредставлениеДанных                  = Истина;
	СтрокаУровня2.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня2.РазделЯвляетсяАвтозаполняемым        = Истина;
	СтрокаУровня2.МногострочностьВРазделе.Добавить();
	
	СтрокаУровня2 = СтрокаУровня1.ПолучитьЭлементы().Добавить();
	
	СтрокаУровня2.ИмяСтраницы                          = "Анализ_52";
	СтрокаУровня2.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня2.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня2.ОчищатьРаздел                        = Истина;
	СтрокаУровня2.ИмяПредставления                     = "";
	СтрокаУровня2.ПредставлениеДанных                  = Истина;
	СтрокаУровня2.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня2.РазделЯвляетсяАвтозаполняемым        = Истина;
	СтрокаУровня2.МногострочностьВРазделе.Добавить();
	
	СтрокаУровня2 = СтрокаУровня1.ПолучитьЭлементы().Добавить();
	
	СтрокаУровня2.ИмяСтраницы                          = "Анализ_55";
	СтрокаУровня2.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня2.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня2.ОчищатьРаздел                        = Истина;
	СтрокаУровня2.ИмяПредставления                     = "";
	СтрокаУровня2.ПредставлениеДанных                  = Истина;
	СтрокаУровня2.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня2.РазделЯвляетсяАвтозаполняемым        = Истина;
	СтрокаУровня2.МногострочностьВРазделе.Добавить();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтруктуруЗависимыхЯчеекДляАвторасчета()
	
	// БАЛАНС.
	//
	СтруктураЗависимыхЯчеекДляАвторасчета = Новый Структура;
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100110004", "П000100111004;П000100112004;П000100113004;П000100114004;П000100115004;П000100116004;П000100117004;П000100118004;П000100119004");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100110005", "П000100111005;П000100112005;П000100113005;П000100114005;П000100115005;П000100116005;П000100117005;П000100118005;П000100119005");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100110006", "П000100111006;П000100112006;П000100113006;П000100114006;П000100115006;П000100116006;П000100117006;П000100118006;П000100119006");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100120004", "П000100121004;П000100122004;П000100123004;П000100124004;П000100125004;П000100126004");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100120005", "П000100121005;П000100122005;П000100123005;П000100124005;П000100125005;П000100126005");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100120006", "П000100121006;П000100122006;П000100123006;П000100124006;П000100125006;П000100126006");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100160004", "П000100110004;П000100120004;П000100111004;П000100112004;П000100113004;П000100114004;П000100115004;П000100116004;П000100117004;П000100118004;П000100119004;П000100121004;П000100122004;П000100123004;П000100124004;П000100125004;П000100126004");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100160005", "П000100110005;П000100120005;П000100111005;П000100112005;П000100113005;П000100114005;П000100115005;П000100116005;П000100117005;П000100118005;П000100119005;П000100121005;П000100122005;П000100123005;П000100124005;П000100125005;П000100126005");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100160006", "П000100110006;П000100120006;П000100111006;П000100112006;П000100113006;П000100114006;П000100115006;П000100116006;П000100117006;П000100118006;П000100119006;П000100121006;П000100122006;П000100123006;П000100124006;П000100125006;П000100126006");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100130004", "П000100131004;П000100132004;П000100134004;П000100135004;П000100136004;П000100137004");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100130005", "П000100131005;П000100132005;П000100134005;П000100135005;П000100136005;П000100137005");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100130006", "П000100131006;П000100132006;П000100134006;П000100135006;П000100136006;П000100137006");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100140004", "П000100141004;П000100142004;П000100143004;П000100145004");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100140005", "П000100141005;П000100142005;П000100143005;П000100145005");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100140006", "П000100141006;П000100142006;П000100143006;П000100145006");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100150004", "П000100151004;П000100152004;П000100153004;П000100154004;П000100155004");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100150005", "П000100151005;П000100152005;П000100153005;П000100154005;П000100155005");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100150006", "П000100151006;П000100152006;П000100153006;П000100154006;П000100155006");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100170004", "П000100130004;П000100140004;П000100150004;П000100131004;П000100132004;П000100134004;П000100135004;П000100136004;П000100137004;П000100141004;П000100142004;П000100143004;П000100145004;П000100151004;П000100152004;П000100153004;П000100154004;П000100155004");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100170005", "П000100130005;П000100140005;П000100150005;П000100131005;П000100132005;П000100134005;П000100135005;П000100136005;П000100137005;П000100141005;П000100142005;П000100143005;П000100145005;П000100151005;П000100152005;П000100153005;П000100154005;П000100155005");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100170006", "П000100130006;П000100140006;П000100150006;П000100131006;П000100132006;П000100134006;П000100135006;П000100136006;П000100137006;П000100141006;П000100142006;П000100143006;П000100145006;П000100151006;П000100152006;П000100153006;П000100154006;П000100155006");
	
	// ОТЧЕТ О ПРИБЫЛЯХ И УБЫТКАХ.
	//
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100210004", "П000100211004;П000100212004");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100210005", "П000100211005;П000100212005");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100220004", "П000100210004;П000100221004;П000100222004;П000100211004;П000100212004");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100220005", "П000100210005;П000100221005;П000100222005;П000100211005;П000100212005");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100230004", "П000100220004;П000100231004;П000100232004;П000100233004;П000100234004;П000100235004;П000100210004;П000100221004;П000100222004;П000100211004;П000100212004");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100230005", "П000100220005;П000100231005;П000100232005;П000100233005;П000100234005;П000100235005;П000100210005;П000100221005;П000100222005;П000100211005;П000100212005");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100240004", "П000100230004;П000100241004;П000100243004;П000100245004;П000100246004;П000100220004;П000100231004;П000100232004;П000100233004;П000100234004;П000100235004;П000100210004;П000100221004;П000100222004;П000100211004;П000100212004");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100240005", "П000100230005;П000100241005;П000100243005;П000100245005;П000100246005;П000100220005;П000100231005;П000100232005;П000100233005;П000100234005;П000100235005;П000100210005;П000100221005;П000100222005;П000100211005;П000100212005");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100250004", "П000100240004;П000100251004;П000100252004;П000100230004;П000100241004;П000100243004;П000100245004;П000100246004;П000100220004;П000100231004;П000100232004;П000100233004;П000100234004;П000100235004;П000100210004;П000100221004;П000100222004;П000100211004;П000100212004");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100250005", "П000100240005;П000100251005;П000100252005;П000100230005;П000100241005;П000100243005;П000100245005;П000100246005;П000100220005;П000100231005;П000100232005;П000100233005;П000100234005;П000100235005;П000100210005;П000100221005;П000100222005;П000100211005;П000100212005");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000102100104", "П000102110104;П000102120104");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000102100105", "П000102110105;П000102120105");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000102100204", "П000102110204;П000102120204");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000102100205", "П000102110205;П000102120205");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000102200104", "П000102110104;П000102120104;П000102210104;П000102220104");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000102200105", "П000102110105;П000102120105;П000102210105;П000102220105");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000102200204", "П000102110204;П000102120204;П000102210204;П000102220204");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000102200205", "П000102110205;П000102120205;П000102210205;П000102220205");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000102300104", "П000102110104;П000102120104;П000102210104;П000102220104;П000100231004;П000100232004;П000100234004;П000100233004;П000100235004");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000102300105", "П000102110105;П000102120105;П000102210105;П000102220105;П000100231005;П000100232005;П000100234005;П000100233005;П000100235005");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000102300204", "П000102110204;П000102120204;П000102210204;П000102220204");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000102300205", "П000102110205;П000102120205;П000102210205;П000102220205");
	
	// ОТЧЕТ ОБ ИЗМЕНЕНИЯХ КАПИТАЛА.
	//
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100310008", "П000100310003;П000100310004;П000100310005;П000100310006;П000100310007");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100321108", "П000100321107");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100321208", "П000100321205;П000100321207");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100321308", "П000100321305;П000100321307");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100321408", "П000100321403;П000100321404;П000100321405");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100321608", "П000100321603;П000100321604;П000100321605;П000100321606;П000100321607");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П100100321008", "П100100321003;П100100321004;П100100321005;П100100321006;П100100321007");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100321003", "П000100321403;П000100321503;П000100321603;П100100321003");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100321004", "П000100321404;П000100321504;П000100321604;П100100321004");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100321005", "П000100321205;П000100321305;П000100321405;П000100321505;П000100321605;П100100321005");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100321006", "П000100321606;П100100321006");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100321007", "П000100321107;П000100321207;П000100321307;П000100321507;П000100321607;П100100321007");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100321008", "П000100321108;П000100321208;П000100321308;П000100321408;П000100321608;П100100321008;П000100321107;П000100321205;П000100321207;П000100321305;П000100321307;П000100321403;П000100321404;П000100321405;П000100321603;П000100321604;П000100321605;П000100321606;П000100321607;П100100321003;П100100321004;П100100321005;П100100321006;П100100321007");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100322108", "П000100322107");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100322208", "П000100322205;П000100322207");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100322308", "П000100322305;П000100322307");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100322408", "П000100322403;П000100322404;П000100322405;П000100322407");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100322508", "П000100322503;П000100322504;П000100322505;П000100322507");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100322608", "П000100322603;П000100322604;П000100322605;П000100322606;П000100322607");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100322708", "П000100322707");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100324007", "П000100324006");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100322003", "П000100322403;П000100322503;П000100322603");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100322004", "П000100322404;П000100322504;П000100322604");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100322005", "П000100322205;П000100322305;П000100322405;П000100322505;П000100322605");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100322006", "П000100322606");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100322007", "П000100322107;П000100322207;П000100322307;П000100322407;П000100322507;П000100322607;П000100322707");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100322008", "П000100322108;П000100322208;П000100322308;П000100322408;П000100322508;П000100322608;П000100322708;П000100322107;П000100322205;П000100322207;П000100322305;П000100322307;П000100322403;П000100322404;П000100322405;П000100322407;П000100322503;П000100322504;П000100322505;П000100322507;П000100322603;П000100322604;П000100322605;П000100322606;П000100322607;П000100322707;П000100322003;П000100322004;П000100322005;П000100322006;П000100322007;П000100322403;П000100322503;П000100322603;П000100322404;П000100322504;П000100322604;П000100322205;П000100322305;П000100322405;П000100322505;П000100322605;П000100322606;П000100322107;П000100322207;П000100322307;П000100322407;П000100322507;П000100322607;П000100322707");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100320008", "П000100320003;П000100320004;П000100320005;П000100320006;П000100320007");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100331108", "П000100331107");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100331208", "П000100331205;П000100331207");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100331308", "П000100331305;П000100331307");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100331408", "П000100331403;П000100331404;П000100331405");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100331608", "П000100331603;П000100331604;П000100331605;П000100331606;П000100331607");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П100100331008", "П100100331003;П100100331004;П100100331005;П100100331006;П100100331007");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100331003", "П000100331403;П000100331503;П000100331603;П100100331003");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100331004", "П000100331404;П000100331504;П000100331604;П100100331004");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100331005", "П000100331205;П000100331305;П000100331405;П000100331505;П000100331605;П100100331005");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100331006", "П000100331606;П100100331006");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100331007", "П000100331107;П000100331207;П000100331307;П000100331507;П000100331607;П100100331007");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100331008", "П000100331108;П000100331208;П000100331308;П000100331408;П000100331608;П100100331008;П000100331107;П000100331205;П000100331207;П000100331305;П000100331307;П000100331403;П000100331404;П000100331405;П000100331603;П000100331604;П000100331605;П000100331606;П000100331607;П100100331003;П100100331004;П100100331005;П100100331006;П100100331007");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100332108", "П000100332107");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100332208", "П000100332205;П000100332207");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100332308", "П000100332305;П000100332307");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100332408", "П000100332403;П000100332404;П000100332405;П000100332407");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100332508", "П000100332503;П000100332504;П000100332505;П000100332507");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100332608", "П000100332603;П000100332604;П000100332605;П000100332606;П000100332607");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100332708", "П000100332707");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100332003", "П000100332403;П000100332503;П000100332603");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100332004", "П000100332404;П000100332504;П000100332604");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100332005", "П000100332205;П000100332305;П000100332405;П000100332505;П000100332605");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100332006", "П000100332606");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100332007", "П000100332107;П000100332207;П000100332307;П000100332407;П000100332507;П000100332607;П000100332707");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100332008", "П000100332108;П000100332208;П000100332308;П000100332408;П000100332508;П000100332608;П000100332708;П000100332107;П000100332205;П000100332207;П000100332305;П000100332307;П000100332403;П000100332404;П000100332405;П000100332407;П000100332503;П000100332504;П000100332505;П000100332507;П000100332603;П000100332604;П000100332605;П000100332606;П000100332607;П000100332707");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100334007", "П000100334006");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100330008", "П000100330003;П000100330004;П000100330005;П000100330006;П000100330007");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100340105", "П000100340106;П000100340103;П000100340104");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100341106", "П000100341103;П000100341104;П000100341105");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100342106", "П000100342103;П000100342104;П000100342105");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100350103", "П000100340103;П000100341103;П000100342103");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100350104", "П000100340104;П000100341104;П000100342104");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100350105", "П000100340105;П000100341105;П000100342105;П000100340106;П000100340103;П000100340104");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100350106", "П000100350103;П000100350104;П000100350105;П000100340103;П000100341103;П000100342103;П000100340104;П000100341104;П000100342104;П000100340105;П000100341105;П000100342105;П000100340106;П000100340103;П000100340104");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П100100340006_1", "П100100340003_1;П100100340004_1;П100100340005_1");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П100100341006_1", "П100100341003_1;П100100341004_1;П100100341005_1");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П100100342006_1", "П100100342003_1;П100100342004_1;П100100342005_1");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П100100350003_1", "П100100340003_1;П100100341003_1;П100100342003_1");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П100100350004_1", "П100100340004_1;П100100341004_1;П100100342004_1");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П100100350005_1", "П100100340005_1;П100100341005_1;П100100342005_1");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П100100350006_1", "П100100350003_1;П100100350004_1;П100100350005_1;П100100340003_1;П100100341003_1;П100100342003_1;П100100340004_1;П100100341004_1;П100100342004_1;П100100340005_1;П100100341005_1;П100100342005_1");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100341003", "П000100341103;П100100341003_1");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100341004", "П000100341104;П100100341004_1");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100341005", "П000100341105;П100100341005_1");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100342003", "П000100342103;П100100342003_1");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100342004", "П000100342104;П100100342004_1");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100342005", "П000100342105;П100100342005_1");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100340005", "П000100340006;П000100340003;П000100340004");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100341006", "П000100341003;П000100341004;П000100341005;П000100341103;П100100341003_1;П000100341104;П100100341004_1;П000100341105;П100100341005_1");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100342006", "П000100342003;П000100342004;П000100342005;П000100342103;П100100342003_1;П000100342104;П100100342004_1;П000100342105;П100100342005_1");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100350003", "П000100340003;П000100341003;П000100342003;П000100341103;П100100341003_1;П000100342103;П100100342003_1");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100350004", "П000100340004;П000100341004;П000100342004;П000100341104;П100100341004_1;П000100342104;П100100342004_1");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100350005", "П000100340005;П000100341005;П000100342005;П000100341105;П100100341005_1;П000100342105;П100100342005_1;П000100340006;П000100340003;П000100340004");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100350006", "П000100350003;П000100350004;П000100350005;П000100340003;П000100341003;П000100342003;П000100341103;П100100341003_1;П000100342103;П100100342003_1;П000100340004;П000100341004;П000100342004;П000100341104;П100100341004_1;П000100342104;П100100342004_1;П000100340005;П000100341005;П000100342005;П000100341105;П100100341005_1;П000100342105;П100100342005_1;П000100340006;П000100340003;П000100340004");
	
	Если СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета >= '20141101' Тогда
		
		// Данные "Стоимости чистых активов" (из РАСЧЕТА АКТИВОВ).
		//
		СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100360003", "П000100111004;П000100112004;П000100113004;П000100114004;П000100115004;П000100116004;П000100117004;П000100118004;П000100119004;П000100121004;П000100122004;П000100123004;П000100124004;П000100125004;П000100126004;П000100141004;П000100142004;П000100143004;П000100145004;П000100151004;П000100152004;П000100154004;П000100155004");
		СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100360004", "П000100111005;П000100112005;П000100113005;П000100114005;П000100115005;П000100116005;П000100117005;П000100118005;П000100119005;П000100121005;П000100122005;П000100123005;П000100124005;П000100125005;П000100126005;П000100141005;П000100142005;П000100143005;П000100145005;П000100151005;П000100152005;П000100154005;П000100155005");
		СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100360005", "П000100111006;П000100112006;П000100113006;П000100114006;П000100115006;П000100116006;П000100117006;П000100118006;П000100119006;П000100121006;П000100122006;П000100123006;П000100124006;П000100125006;П000100126006;П000100141006;П000100142006;П000100143006;П000100145006;П000100151006;П000100152006;П000100154006;П000100155006");
		
	КонецЕсли;
	
	// ОТЧЕТ О ДВИЖЕНИИ ДЕНЕЖНЫХ СРЕДСТВ.
	//
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100411003", "П000100411103;П000100411203;П000100411303;П100100411003;П000100411903");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100411004", "П000100411104;П000100411204;П000100411304;П100100411004;П000100411904");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100412003", "П000100412103;П000100412203;П000100412303;П000100412403;П100100412003;П000100412903");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100412004", "П000100412104;П000100412204;П000100412304;П000100412404;П100100412004;П000100412904");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100410003", "П000100411003;П000100412003;П000100411103;П000100411203;П000100411303;П100100411003;П000100411903;П000100412103;П000100412203;П000100412303;П000100412403;П100100412003;П000100412903");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100410004", "П000100411004;П000100412004;П000100411104;П000100411204;П000100411304;П100100411004;П000100411904;П000100412104;П000100412204;П000100412304;П000100412404;П100100412004;П000100412904");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100421003", "П000100421103;П000100421203;П000100421303;П000100421403;П100100421003;П000100421903");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100421004", "П000100421104;П000100421204;П000100421304;П000100421404;П100100421004;П000100421904");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100422003", "П000100422103;П000100422203;П000100422303;П000100422403;П100100422003;П000100422903");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100422004", "П000100422104;П000100422204;П000100422304;П000100422404;П100100422004;П000100422904");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100420003", "П000100421003;П000100422003;П000100421103;П000100421203;П000100421303;П000100421403;П100100421003;П000100421903;П000100422103;П000100422203;П000100422303;П000100422403;П100100422003;П000100422903");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100420004", "П000100421004;П000100422004;П000100421104;П000100421204;П000100421304;П000100421404;П100100421004;П000100421904;П000100422104;П000100422204;П000100422304;П000100422404;П100100422004;П000100422904");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100431003", "П000100431103;П000100431203;П000100431303;П000100431403;П100100431003;П000100431903");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100431004", "П000100431104;П000100431204;П000100431304;П000100431404;П100100431004;П000100431904");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100432003", "П000100432103;П000100432203;П000100432303;П100100432003;П000100432903");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100432004", "П000100432104;П000100432204;П000100432304;П100100432004;П000100432904");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100430003", "П000100431003;П000100432003;П000100431103;П000100431203;П000100431303;П000100431403;П100100431003;П000100431903;П000100432103;П000100432203;П000100432303;П100100432003;П000100432903");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100430004", "П000100431004;П000100432004;П000100431104;П000100431204;П000100431304;П000100431404;П100100431004;П000100431904;П000100432104;П000100432204;П000100432304;П100100432004;П000100432904");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100440003", "П000100410003;П000100420003;П000100430003;П000100411003;П000100412003;П000100411103;П000100411203;П000100411303;П100100411003;П000100411903;П000100412103;П000100412203;П000100412303;П000100412403;П100100412003;П000100412903;П000100421003;П000100422003;П000100421103;П000100421203;П000100421303;П000100421403;П100100421003;П000100421903;П000100422103;П000100422203;П000100422303;П000100422403;П100100422003;П000100422903;П000100431003;П000100432003;П000100431103;П000100431203;П000100431303;П000100431403;П100100431003;П000100431903;П000100432103;П000100432203;П000100432303;П100100432003;П000100432903");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100440004", "П000100410004;П000100420004;П000100430004;П000100411004;П000100412004;П000100411104;П000100411204;П000100411304;П100100411004;П000100411904;П000100412104;П000100412204;П000100412304;П000100412404;П100100412004;П000100412904;П000100421004;П000100422004;П000100421104;П000100421204;П000100421304;П000100421404;П100100421004;П000100421904;П000100422104;П000100422204;П000100422304;П000100422404;П100100422004;П000100422904;П000100431004;П000100432004;П000100431104;П000100431204;П000100431304;П000100431404;П100100431004;П000100431904;П000100432104;П000100432204;П000100432304;П100100432004;П000100432904");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100450003", "П000100440003;П000100445003;П000100449003;П000100410003;П000100420003;П000100430003;П000100411003;П000100412003;П000100411103;П000100411203;П000100411303;П100100411003;П000100411903;П000100412103;П000100412203;П000100412303;П000100412403;П100100412003;П000100412903;П000100421003;П000100422003;П000100421103;П000100421203;П000100421303;П000100421403;П100100421003;П000100421903;П000100422103;П000100422203;П000100422303;П000100422403;П100100422003;П000100422903;П000100431003;П000100432003;П000100431103;П000100431203;П000100431303;П000100431403;П100100431003;П000100431903;П000100432103;П000100432203;П000100432303;П100100432003;П000100432903");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100450004", "П000100440004;П000100445004;П000100449004;П000100410004;П000100420004;П000100430004;П000100411004;П000100412004;П000100411104;П000100411204;П000100411304;П100100411004;П000100411904;П000100412104;П000100412204;П000100412304;П000100412404;П100100412004;П000100412904;П000100421004;П000100422004;П000100421104;П000100421204;П000100421304;П000100421404;П100100421004;П000100421904;П000100422104;П000100422204;П000100422304;П000100422404;П100100422004;П000100422904;П000100431004;П000100432004;П000100431104;П000100431204;П000100431304;П000100431404;П100100431004;П000100431904;П000100432104;П000100432204;П000100432304;П100100432004;П000100432904");
	
КонецПроцедуры

&НаСервере
Процедура СформироватьСоставПоказателей()
	
	ПолучитьТаблицуСоставаПоказателей();
	ТаблицаСоставПоказателей.Очистить();
	
	ПрименяетсяПБУ18ВОтчетномПериоде = ПрименяетсяПБУ18НаКонецПериода(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	ПрименяетсяПБУ18ВПредыдущемГоду  = ПрименяетсяПБУ18НаКонецПериода(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, -12));
	
	МакетСоставаПоказателей = Отчеты[Сред(Лев(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, ".Форма.") - 1), 7)].ПолучитьМакет(НастройкиФормы.МакетСоставаПоказателей);
	
	Для Каждого Отчет Из СтруктураОтчета Цикл
		
		ИмяСтраницы = Отчет.Значение.ИмяСтраницы;
		ИмяОбласти  = Отчет.Значение.ИмяСекцииПоказателей;
		
		Если НЕ ЗначениеЗаполнено(ИмяОбласти) Тогда
			Продолжить;
		КонецЕсли;
		
		ТекОбласть = МакетСоставаПоказателей.Области[ИмяОбласти];
		
		ЭтаФорма["ТаблицаВариантыЗаполнения" + ИмяСтраницы].Добавить();
		
		Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
			// перебираем строки макета
			
			// Код показателя (по составу показателей) определяется по первой колонке макета
			КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
			ИмяПоказателя = КодПоказателя;
			
			Если КодПоказателя = "===" Тогда         // признак конечной строки
				Прервать;
			КонецЕсли;
			
			Если Лев(КодПоказателя, 2) = "//" Тогда  // пропускаем комментарии
				Продолжить;
			КонецЕсли;
			
			// код показателя по форме отчете (имя ячейки в полях табличного документа формы)
			КодПоказателяПоФорме = СокрЛП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
			// признак многострочности определяется по третьей колонке макета
			ПризнМногострочность = СокрЛП(МакетСоставаПоказателей.Область(Ном, 3).Текст);
			// по четвертой колонке определяется тип данных реквизита
			ТипДанныхРеквизита   = СокрЛП(МакетСоставаПоказателей.Область(Ном, 4).Текст);
			// по колонке 5 определяется исходное количество строк многострочного раздела
			стрКолСтрокИсходный  = СокрЛП(МакетСоставаПоказателей.Область(Ном, 5).Текст);
			// вариант заполнения ячейки определяется по колонке 6 макета
			стрВариантЗаполнения = РегламентированнаяОтчетность.ПолучитьВариантЗаполненияПоказателяРегОтчета(МакетСоставаПоказателей, Ном);
			
			чКолСтрокИсходный    = ? (ПустаяСтрока(стрКолСтрокИсходный),  0, Число(стрКолСтрокИсходный));
			чВариантЗаполнения   = ? (ПустаяСтрока(стрВариантЗаполнения), 0, Число(стрВариантЗаполнения));
			
			// формируем таблицу значений, содержащей состав показателей отчета
			НоваяСтрока = ТаблицаСоставПоказателей.Добавить();
			НоваяСтрока.ИмяПоляТаблДокумента   = ИмяСтраницы;
			НоваяСтрока.КодПоказателяПоСоставу = КодПоказателя;
			НоваяСтрока.КодПоказателяПоФорме   = КодПоказателяПоФорме;
			НоваяСтрока.ПризнМногострочности   = ПризнМногострочность;
			НоваяСтрока.ТипДанныхПоказателя    = ТипДанныхРеквизита;
			
			// Переопределение варианты заполнения для отдельных показателей
			// отчета движения денежных средств по сведениям до 2010 года
			Если СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета < '20110101' Тогда
				// графа 03
				Если КодПоказателя = "П000100411203"
				 ИЛИ КодПоказателя = "П000100411303"
				 ИЛИ КодПоказателя = "П000100412303"
				 ИЛИ КодПоказателя = "П000100412403"
				 ИЛИ КодПоказателя = "П000100421203"
				 ИЛИ КодПоказателя = "П000100422203"
				 ИЛИ КодПоказателя = "П000100431203" Тогда
					чВариантЗаполнения = 0;
				КонецЕсли;
			КонецЕсли;
			
			Если ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, -12) < '20110101' Тогда
				// Графа 04
				Если КодПоказателя = "П000100411204"
				 ИЛИ КодПоказателя = "П000100411304"
				 ИЛИ КодПоказателя = "П000100412304"
				 ИЛИ КодПоказателя = "П000100412404"
				 ИЛИ КодПоказателя = "П000100421204"
				 ИЛИ КодПоказателя = "П000100422204"
				 ИЛИ КодПоказателя = "П000100431204" Тогда
					чВариантЗаполнения = 0;
				КонецЕсли;
			КонецЕсли;
			
			// Переопределение вариантов заполнения строки 2510 и строк расшифровки показателей строки 2510
			// при заполнении промежуточной отчетности
			Если СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета <> КонецГода(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) Тогда
				Если КодПоказателя = "П000100251004"
				 ИЛИ КодПоказателя = "П000100251005"
				 ИЛИ КодПоказателя = "П000102510104"
				 ИЛИ КодПоказателя = "П000102510105"
				 ИЛИ КодПоказателя = "П000102510204"
				 ИЛИ КодПоказателя = "П000102510205" Тогда
					чВариантЗаполнения = 5;
				КонецЕсли;
			КонецЕсли;
			
			Если НЕ ПрименяетсяПБУ18ВОтчетномПериоде Тогда
				Если КодПоказателя = "П000100242104"
				 ИЛИ КодПоказателя = "П000100243004"
				 ИЛИ КодПоказателя = "П000100245004" Тогда
					чВариантЗаполнения = 5;
				КонецЕсли;
			КонецЕсли;
			
			Если НЕ ПрименяетсяПБУ18ВПредыдущемГоду Тогда
				Если КодПоказателя = "П000100242105"
				 ИЛИ КодПоказателя = "П000100243005"
				 ИЛИ КодПоказателя = "П000100245005" Тогда
					чВариантЗаполнения = 5;
				КонецЕсли;
			КонецЕсли;
			
			Если чВариантЗаполнения <> 0 Тогда
				// Если в колонке 6 задан вариант заполнения показателя, 
				// то его значение может определяться по данным ИБ.
				// Дополняем таблицу значений вариантов заполнения
				НоваяСтрока = ЭтаФорма["ТаблицаВариантыЗаполнения" + ИмяСтраницы][0].ТаблицаВариантовЗаполнения.Добавить();
				НоваяСтрока.КодПоказателя      = ? (Не ПустаяСтрока(КодПоказателяПоФорме), КодПоказателяПоФорме, КодПоказателя);
				НоваяСтрока.ВариантЗаполнения  = чВариантЗаполнения;
				
			КонецЕсли;
			
		КонецЦикла;

		Если ЭтаФорма["ТаблицаВариантыЗаполнения" + ИмяСтраницы][0].ТаблицаВариантовЗаполнения.Количество() > 0
		 ИЛИ ИмяСтраницы = "ДополнительныеПоказатели" Тогда
			
			мСтруктураВариантыЗаполнения.Вставить(ИмяСтраницы, ИмяСтраницы);
			мСтруктураВариантыЗаполненияЭталон.Вставить(ИмяСтраницы, ИмяСтраницы);
			
		Конецесли;
		
	КонецЦикла;
	
	УстановитьВидимостьПолейПоПБУ18();
	
	СтруктураРеквизитовФормы.АдресВоВремХранилищеТаблицаСоставПоказателей
		= ПоместитьВоВременноеХранилище(ТаблицаСоставПоказателей, УникальныйИдентификатор);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНачальныеНастройки() Экспорт
	
	УстановитьВидСдачиОтчетности(1);
	ИнициализироватьСвойстваПечатиРазделовОтчета();
	СформироватьСоставПоказателей();
	
КонецПроцедуры

&НаСервере
Процедура СформироватьДеревоРазделовОтчетаНаСервере() Экспорт
	
	СформироватьДеревоРазделовОтчета(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьДеревоРазделовОтчетаНаКлиенте() Экспорт
	
	СформироватьДеревоРазделовОтчета(ЭтаФорма);
			
КонецПроцедуры

&НаСервере
Процедура УстановитьФорматВыводаНаСервере(НаимРаздела)
	Перем СтруктураГруппы;
	
	Если СтруктураРеквизитовФормы.ЕдиницаИзмерения = ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1 Тогда
		СтруктураРеквизитовФормы.мДелитель = 1;
		СтруктураРеквизитовФормы.мСтрокаФормата = "ЧЦ = 15; ЧДЦ = " + СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧО=0; ЧС = 0";
	ИначеЕсли СтруктураРеквизитовФормы.ЕдиницаИзмерения = ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1000 Тогда
		СтруктураРеквизитовФормы.мДелитель = 1000;
		СтруктураРеквизитовФормы.мСтрокаФормата = "ЧЦ = 15; ЧДЦ = " + СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧО=0; ЧС = 3";
	ИначеЕсли СтруктураРеквизитовФормы.ЕдиницаИзмерения = ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1000000 Тогда
		СтруктураРеквизитовФормы.мДелитель = 1000000;
		СтруктураРеквизитовФормы.мСтрокаФормата = "ЧЦ = 15; ЧДЦ = " + СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧО=0; ЧС = 6";
	КонецЕсли;
	
	ПоказатьКодЕИ();
	
	ПолучитьТаблицуСоставаПоказателей();
	
	Для Каждого СтрПоказатели Из ТаблицаСоставПоказателей Цикл
		Если НЕ НаимРаздела = СтрПоказатели.ИмяПоляТаблДокумента Тогда
			Продолжить;
		КонецЕсли;
		
		КодПоказателя        = СокрП(СтрПоказатели.КодПоказателяПоСоставу);
		ПризнМногострочность = СокрП(СтрПоказатели.ПризнМногострочности);
		Если КодПоказателя = "===" Тогда
			Прервать;
		КонецЕсли;
		Если (Лев(КодПоказателя, 2) = "//") ИЛИ (КодПоказателя = "###") Тогда
			Продолжить;
		КонецЕсли;
		КодПоказателяВФорме = СокрП(СтрПоказатели.КодПоказателяПоФорме);
		ИмяПоказателя = КодПоказателя;
		Если Не ПустаяСтрока(КодПоказателяВФорме) Тогда
			ИмяПоказателя = КодПоказателяВФорме;
		КонецЕсли;
		ТипДанныхПоказателя = СокрП(СтрПоказатели.ТипДанныхПоказателя);
		Если ТипДанныхПоказателя = "Е" Тогда
			ТекТабличноеПоле = ТабличныйДокумент;
			Если ПризнМногострочность <> "/" Тогда
				ФорматируемаяОбласть = ТекТабличноеПоле.Области[ИмяПоказателя];
				ФорматируемаяОбласть.Формат = СтруктураРеквизитовФормы.мСтрокаФормата;
			Иначе
				УстановитьФорматВыводаМногострочногоПоказателя(ТекТабличноеПоле, ИмяПоказателя);
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьНастройкиСоставаДополнительныхСтрок(ПеременнаяНастроекСостава)
	
	ПеременнаяНастроекСостава = Новый Структура;
	МакетНастроекПоУмолчанию = Отчеты[Сред(Лев(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, ".Форма.") - 1), 7)].ПолучитьМакет(НастройкиФормы.МакетНастройкиСоставаПоказателей);
			
	ОбластьВерсии = МакетНастроекПоУмолчанию.Области["Версия"];
	НаименованиеВерсии = МакетНастроекПоУмолчанию.Область(ОбластьВерсии.Верх, 1).Текст;
	ПеременнаяНастроекСостава.Вставить("Версия", НаименованиеВерсии);
	ПеременнаяНастроекСостава.Вставить("Модифицированность", Ложь); // Настройки по умолчанию не модифицированы
	ПеременнаяНастроекСостава.Вставить("СтруктураСоставов", Новый Структура);
	
	ПолучитьДеревоНастроекСоставаДопСтрок("Баланс");
	ПолучитьДеревоНастроекСоставаДопСтрок("ФормаОтчета");
	
	ИзвлечьИсходнуюСтруктуруНастроек(МакетНастроекПоУмолчанию, СтруктураОтчета.Баланс.ИмяСекцииНастройкиСоставаПоказателей, ДеревоНастроекБаланс);
	ИзвлечьИсходнуюСтруктуруНастроек(МакетНастроекПоУмолчанию, СтруктураОтчета.ОПУ.ИмяСекцииНастройкиСоставаПоказателей, ДеревоНастроекФормаОтчета);
	
	СтруктураРеквизитовФормы.АдресВоВремХранилищеДеревоНастроекБаланс
		= ПоместитьВоВременноеХранилище(ДеревоНастроекБаланс, УникальныйИдентификатор);
	СтруктураРеквизитовФормы.АдресВоВремХранилищеДеревоНастроекФормаОтчета
		= ПоместитьВоВременноеХранилище(ДеревоНастроекФормаОтчета, УникальныйИдентификатор);
	ОбновитьВключенныеДопСтрокиОФРПриПримененииЕНВД();
	
	ПеременнаяНастроекСостава.СтруктураСоставов.Вставить("Баланс", "ДеревоНастроекБаланс");
	ПеременнаяНастроекСостава.СтруктураСоставов.Вставить("ФормаОтчета", "ДеревоНастроекФормаОтчета");
	
КонецПроцедуры

&НаСервере
Процедура ПоказатьПериод(НаимТекущегоРаздела)
	
	Если НаимТекущегоРаздела = "Баланс" Тогда
		
		Если НачалоГода(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета) <> НачалоДня(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета) Тогда
			СтруктураРеквизитовФормы.СтрПериодОтчета = Формат(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета, "ДФ=dd.MM.yyyy") + " - " + Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ='ММММ гггг'") + " г." ;
		Иначе
			Если Месяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) = 1 Тогда 
				СтруктураРеквизитовФормы.СтрПериодОтчета = Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ='ММММ гггг'") + " г." ;
			Иначе
				СтруктураРеквизитовФормы.СтрПериодОтчета = "Январь - " + Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ='ММММ гггг'") + " г." ;
			КонецЕсли;
		КонецЕсли;
		
		ТабличныйДокумент.Области.ДатаБаланса.Значение = "на " + Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ = 'дд ММММ гггг'")+ " г.";
		
		ДатаКонцаПрошлогоГода 	  = Дата(Год(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) - 1, 12, 31);
		ДатаКонцаПозапрошлогоГода = Дата(Год(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) - 2, 12, 31);
		
		СтруктураРеквизитовФормы.ЗаголовокДатаОтчетная 				= "На " + Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ = 'дд ММММ гггг'")+ " г.";
		СтруктураРеквизитовФормы.ЗаголовокДатаКонцаПрошлогоГода 	= "На " + Формат(ДатаКонцаПрошлогоГода, "ДФ = 'дд ММММ гггг'")+ " г.";
		СтруктураРеквизитовФормы.ЗаголовокДатаКонцаПозапрошлогоГода = "На " + Формат(ДатаКонцаПозапрошлогоГода, "ДФ = 'дд ММММ гггг'")+ " г.";
		
		ТабличныйДокумент.Области.ДатаОтчетная.Значение 			  = СтруктураРеквизитовФормы.ЗаголовокДатаОтчетная;
		ТабличныйДокумент.Области.ДатаОтчетная2.Значение 			  = СтруктураРеквизитовФормы.ЗаголовокДатаОтчетная;
		ТабличныйДокумент.Области.ДатаКонцаПрошлогоГода.Значение 	  = СтруктураРеквизитовФормы.ЗаголовокДатаКонцаПрошлогоГода;
		ТабличныйДокумент.Области.ДатаКонцаПрошлогоГода2.Значение 	  = СтруктураРеквизитовФормы.ЗаголовокДатаКонцаПрошлогоГода;
		ТабличныйДокумент.Области.ДатаКонцаПозапрошлогоГода.Значение  = СтруктураРеквизитовФормы.ЗаголовокДатаКонцаПозапрошлогоГода;
		ТабличныйДокумент.Области.ДатаКонцаПозапрошлогоГода2.Значение = СтруктураРеквизитовФормы.ЗаголовокДатаКонцаПозапрошлогоГода;
		
		// Период в списке кодов в форме баланса.
		ТабличныйДокумент.Области.ДатаКонцаПериодаОтчетаГод.Значение   = Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ = 'гггг'");
		ТабличныйДокумент.Области.ДатаКонцаПериодаОтчетаМесяц.Значение = Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ = 'ММ'");
		ТабличныйДокумент.Области.ДатаКонцаПериодаОтчетаЧисло.Значение = Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ = 'дд'");
		
	ИначеЕсли НаимТекущегоРаздела = "ФормаОтчета" Тогда
		
		//ОТЧЕТ О ПРИБЫЛЯХ И УБЫТКАХ
		ДатаКонцаПериодаОтчета = ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, -12);
		
		Если НачалоГода(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета) <> НачалоДня(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета) Тогда
			СтрПериод = Формат(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета, "ДФ=dd.MM.yyyy") + " - " + Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ='ММММ гггг'") + " г." ;
		Иначе
			Если НачалоМесяца(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) = СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета Тогда
				СтрПериод = Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ = 'ММММ гггг'") + " г.";
			Иначе
				СтрПериод = "Январь - " + Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ = 'ММММ гггг'") + " г.";
			КонецЕсли;
		КонецЕсли;
		
		Если Месяц(ДатаКонцаПериодаОтчета) = 1 Тогда
			СтрПериодПрошлыйГод = Формат(ДатаКонцаПериодаОтчета, "ДФ = 'ММММ гггг'") + " г.";
		Иначе
			СтрПериодПрошлыйГод = "Январь - " + Формат(ДатаКонцаПериодаОтчета, "ДФ = 'ММММ гггг'") + " г.";
		КонецЕсли;
		
		ПериодОтчета = " за " + СтрПериод;
		
		// Период в заголовке.
		ТабличныйДокумент.Области.ПериодОтчета.Значение = ПериодОтчета;
		
		// Период в списке кодов в форме отчета.
		ТабличныйДокумент.Области.ДатаКонцаПериодаОтчетаГод.Значение   = Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ = 'гггг'");
		ТабличныйДокумент.Области.ДатаКонцаПериодаОтчетаМесяц.Значение = Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ = 'ММ'");
		ТабличныйДокумент.Области.ДатаКонцаПериодаОтчетаЧисло.Значение = Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ = 'дд'");
		
		// Заголовки таблиц.
		СтруктураРеквизитовФормы.ЗаголовокДатаОтчетногоПериода = "За " + СтрПериод;
		СтруктураРеквизитовФормы.ЗаголовокДатаОтчетногоПериодаПрошлогоГода = "За " + СтрПериодПрошлыйГод;
		
		ТабличныйДокумент.Области.ДатаОтчетногоПериода.Значение = СтруктураРеквизитовФормы.ЗаголовокДатаОтчетногоПериода;
		ТабличныйДокумент.Области.ДатаОтчетногоПериода2.Значение = СтруктураРеквизитовФормы.ЗаголовокДатаОтчетногоПериода;
		
		ТабличныйДокумент.Области.ДатаОтчетногоПериодаПрошлогоГода.Значение = СтруктураРеквизитовФормы.ЗаголовокДатаОтчетногоПериодаПрошлогоГода;
		ТабличныйДокумент.Области.ДатаОтчетногоПериодаПрошлогоГода2.Значение = СтруктураРеквизитовФормы.ЗаголовокДатаОтчетногоПериодаПрошлогоГода;
		
	ИначеЕсли НаимТекущегоРаздела = "ОИК" Тогда
		
		ДатаКонцаПериодаОтчета 	  = СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета;
		ДатаКонцаПрошлогоГода 	  = Дата(Год(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) - 1, 12, 31);
		ДатаКонцаПозапрошлогоГода = Дата(Год(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) - 2, 12, 31);
		
		Если НачалоГода(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета) <> НачалоДня(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета) Тогда
			СтрПериод = Формат(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета, "ДФ=dd.MM.yyyy") + " - " + Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ='ММММ гггг'") + " г." ;
		Иначе
			Если НачалоМесяца(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) = СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета Тогда
				СтрПериод = Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ = 'ММММ гггг'") + " г.";
			Иначе
				СтрПериод = "Январь - " + Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ = 'ММММ гггг'") + " г.";
			КонецЕсли;
		КонецЕсли;
		
		ПериодОтчета = " за " + СтрПериод;
		
		// Период в заголовке.
		ТабличныйДокумент.Области.ПериодОтчета.Значение = ПериодОтчета;
		
		// Период в списке кодов в форме отчета.
		ТабличныйДокумент.Области.ДатаКонцаПериодаОтчетаГод.Значение   = Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ = 'гггг'");
		ТабличныйДокумент.Области.ДатаКонцаПериодаОтчетаМесяц.Значение = Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ = 'ММ'");
		ТабличныйДокумент.Области.ДатаКонцаПериодаОтчетаЧисло.Значение = Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ = 'дд'");
		
		// Заголовки таблиц.
		ТабличныйДокумент.Области.ДатаВеличиныКапиталаПозапрошлогоГода.Значение = "Величина капитала на " + Формат(ДатаКонцаПозапрошлогоГода, "ДФ = 'дд ММММ гггг'")+ " г.";
		ТабличныйДокумент.Области.ДатаВеличиныКапиталаПрошлогоГода.Значение = "Величина капитала на " + Формат(ДатаКонцаПрошлогоГода, "ДФ = 'дд ММММ гггг'")+ " г.";
		ТабличныйДокумент.Области.ДатаВеличиныКапиталаПериодаОтчета.Значение = "Величина капитала на " + Формат(ДатаКонцаПериодаОтчета, "ДФ = 'дд ММММ гггг'")+ " г.";
		
		ТабличныйДокумент.Области.ПериодИзмененияКапиталаПрошлогоГода.Значение = "За " + Формат(ДатаКонцаПрошлогоГода, "ДФ = 'гггг'")+ " г.";
		ТабличныйДокумент.Области.ПериодИзмененияКапиталаПериодаОтчета.Значение = "За " + Формат(ДатаКонцаПериодаОтчета, "ДФ = 'гггг'")+ " г.";
		
		СтруктураРеквизитовФормы.ЗаголовокДатаОтчетная              = "На " + Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ = 'дд ММММ гггг'")+ " г.";
		СтруктураРеквизитовФормы.ЗаголовокДатаКонцаПрошлогоГода     = "На " + Формат(ДатаКонцаПрошлогоГода, "ДФ = 'дд ММММ гггг'")+ " г.";
		СтруктураРеквизитовФормы.ЗаголовокДатаКонцаПозапрошлогоГода = "На " + Формат(ДатаКонцаПозапрошлогоГода, "ДФ = 'дд ММММ гггг'")+ " г.";
		
		ТабличныйДокумент.Области.ДатаКорректировокПозапрошлогоГода.Значение = СтруктураРеквизитовФормы.ЗаголовокДатаКонцаПозапрошлогоГода;
		ТабличныйДокумент.Области.ДатаКорректировокПрошлогоГода.Значение     = СтруктураРеквизитовФормы.ЗаголовокДатаКонцаПрошлогоГода;
		ТабличныйДокумент.Области.ПериодКорректировокПрошлогоГода.Значение   = "Изменения капитала за " + Формат(ДатаКонцаПрошлогоГода, "ДФ = 'гггг'")+ " г.";
		
		ТабличныйДокумент.Области.ДатаАктивовПозапрошлогоГода.Значение = СтруктураРеквизитовФормы.ЗаголовокДатаКонцаПозапрошлогоГода;
		ТабличныйДокумент.Области.ДатаАктивовПрошлогоГода.Значение     = СтруктураРеквизитовФормы.ЗаголовокДатаКонцаПрошлогоГода;
		ТабличныйДокумент.Области.ДатаАктивовПериодаОтчета.Значение    = СтруктураРеквизитовФормы.ЗаголовокДатаОтчетная;
		
	ИначеЕсли НаимТекущегоРаздела = "ОДДС" Тогда
		
		//ОТЧЕТ О ДВИЖЕНИИ ДЕНЕЖНЫХ СРЕДСТВ
		ДатаКонцаПериодаОтчета = ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, -12);
		
		Если НачалоГода(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета) <> НачалоДня(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета) Тогда
			СтрПериод = Формат(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета, "ДФ=dd.MM.yyyy") + " - " + Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ='ММММ гггг'") + " г." ;
		Иначе
			Если НачалоМесяца(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) = СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета Тогда
				СтрПериод = Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ = 'ММММ гггг'") + " г.";
			Иначе
				СтрПериод = "Январь - " + Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ = 'ММММ гггг'") + " г.";
			КонецЕсли;
		КонецЕсли;
		
		Если Месяц(ДатаКонцаПериодаОтчета) = 1 Тогда
			СтрПериодПрошлыйГод = Формат(ДатаКонцаПериодаОтчета, "ДФ = 'ММММ гггг'") + " г.";
		Иначе
			СтрПериодПрошлыйГод = "Январь - " + Формат(ДатаКонцаПериодаОтчета, "ДФ = 'ММММ гггг'") + " г.";
		КонецЕсли;
		
		ПериодОтчета = " за " + СтрПериод;
		
		// Период в заголовке.
		ТабличныйДокумент.Области.ПериодОтчета.Значение = ПериодОтчета;
		
		// Период в списке кодов в форме отчета.
		ТабличныйДокумент.Области.ДатаКонцаПериодаОтчетаГод.Значение   = Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ = 'гггг'");
		ТабличныйДокумент.Области.ДатаКонцаПериодаОтчетаМесяц.Значение = Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ = 'ММ'");
		ТабличныйДокумент.Области.ДатаКонцаПериодаОтчетаЧисло.Значение = Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ = 'дд'");
		
		// Заголовки таблиц.
		СтруктураРеквизитовФормы.ЗаголовокДатаОтчетногоПериода = "За " + СтрПериод;
		СтруктураРеквизитовФормы.ЗаголовокДатаОтчетногоПериодаПрошлогоГода = "За " + СтрПериодПрошлыйГод;
		
		ТабличныйДокумент.Области.ДатаОтчетногоПериода.Значение = СтруктураРеквизитовФормы.ЗаголовокДатаОтчетногоПериода;
		ТабличныйДокумент.Области.ДатаОтчетногоПериода2.Значение = СтруктураРеквизитовФормы.ЗаголовокДатаОтчетногоПериода;
		
		ТабличныйДокумент.Области.ДатаОтчетногоПериодаПрошлогоГода.Значение = СтруктураРеквизитовФормы.ЗаголовокДатаОтчетногоПериодаПрошлогоГода;
		ТабличныйДокумент.Области.ДатаОтчетногоПериодаПрошлогоГода2.Значение = СтруктураРеквизитовФормы.ЗаголовокДатаОтчетногоПериодаПрошлогоГода;
		
	ИначеЕсли НаимТекущегоРаздела = "ДополнительныеПоказатели" Тогда
		ТабличныйДокумент.Области.ДатаДополнительныхПоказателей.Значение = "на " + Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ = 'дд ММММ гггг'")+ " г.";
		
		ДатаКонцаПериодаОтчета    = СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета;
		ДатаКонцаПрошлогоГода     = Дата(Год(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) - 1, 12, 31);
		ДатаКонцаПозапрошлогоГода = Дата(Год(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) - 2, 12, 31);
		
		СтруктураРеквизитовФормы.ЗаголовокДатаОтчетная              = "На " + Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ = 'дд ММММ гггг'")+ " г.";
		СтруктураРеквизитовФормы.ЗаголовокДатаКонцаПрошлогоГода     = "На " + Формат(ДатаКонцаПрошлогоГода, "ДФ = 'дд ММММ гггг'")+ " г.";
		СтруктураРеквизитовФормы.ЗаголовокДатаКонцаПозапрошлогоГода = "На " + Формат(ДатаКонцаПозапрошлогоГода, "ДФ = 'дд ММММ гггг'")+ " г.";
		
		ТабличныйДокумент.Области.ДатаОтчетная.Значение              = СтруктураРеквизитовФормы.ЗаголовокДатаОтчетная;
		ТабличныйДокумент.Области.ДатаКонцаПрошлогоГода.Значение     = СтруктураРеквизитовФормы.ЗаголовокДатаКонцаПрошлогоГода;
		ТабличныйДокумент.Области.ДатаКонцаПозапрошлогоГода.Значение = СтруктураРеквизитовФормы.ЗаголовокДатаКонцаПозапрошлогоГода;
		
	КонецЕсли;
	
	// Заголовки для использования в расшфировках ОФР.
	ДатаКонцаАналогичногоПериодаПрошлогоГода = КонецМесяца(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, -12));
	Если НачалоГода(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета) <> НачалоДня(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета) Тогда
		ОписаниеПериода = Формат(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета, "ДФ=dd.MM.yyyy") + " - " + Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ='ММММ гггг'") + " г." ;	
	Иначе
		Если НачалоМесяца(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) = СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета Тогда
			ОписаниеПериода = Формат(ДатаКонцаПериодаОтчета, "ДФ = 'ММММ гггг'") + " г.";
		Иначе
			ОписаниеПериода = "Январь - " + Формат(ДатаКонцаПериодаОтчета, "ДФ = 'ММММ гггг'") + " г.";
		КонецЕсли;
	КонецЕсли;
	СтруктураРеквизитовФормы.ЗаголовокДатаАналогичногоПериодаПрошлогоГода =  "За " + ОписаниеПериода;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЗаголовкиВРазделахОтчетностиПоЕдиницеИзмерения(ИмяТекРаздела)

	Если СтруктураРеквизитовФормы.ЕдиницаИзмерения = ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1 Тогда	
		НазваниеЕдиницыИзмерения = "руб";
	ИначеЕсли СтруктураРеквизитовФормы.ЕдиницаИзмерения = ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1000 Тогда
		НазваниеЕдиницыИзмерения = "тыс. руб";
	ИначеЕсли СтруктураРеквизитовФормы.ЕдиницаИзмерения = ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1000000 Тогда	
		НазваниеЕдиницыИзмерения = "млн. руб";
	Иначе
		НазваниеЕдиницыИзмерения = "";
	КонецЕсли;
	
	Если ДатаПодписи >= '2013-01-01' Тогда
		НазваниеОПУ = "о финансовых результатах";
	Иначе
		НазваниеОПУ = "о прибылях и убытках";
	КонецЕсли;

	ЗаголовокПояснения1 = "Пояснения к бухгалтерскому балансу" + Символы.ПС 
						+ "и отчету " + НазваниеОПУ + " (" + НазваниеЕдиницыИзмерения + ")";
						
	Если ИмяТекРаздела = "Пояснения1" Тогда
		ТабличныйДокумент.Области.ЗаголовокРаздела.Текст = ЗаголовокПояснения1;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПериодыВРазделахОтчетности(ИмяРаздела)

	Если ИмяРаздела = "Пояснения1" Тогда
		ЗаполнитьПериодыВРазделахОтчетностиПояснения1();
	ИначеЕсли ИмяРаздела = "Пояснения2" Тогда
		ЗаполнитьПериодыВРазделахОтчетностиПояснения2();
	ИначеЕсли ИмяРаздела = "Пояснения3" Тогда
		ЗаполнитьПериодыВРазделахОтчетностиПояснения3();
	ИначеЕсли ИмяРаздела = "Пояснения4" Тогда
		ЗаполнитьПериодыВРазделахОтчетностиПояснения4();
	ИначеЕсли ИмяРаздела = "Пояснения5" Тогда
		ЗаполнитьПериодыВРазделахОтчетностиПояснения5();
	ИначеЕсли ИмяРаздела = "Пояснения6" Тогда
		ЗаполнитьПериодыВРазделахОтчетностиПояснения6();
	ИначеЕсли ИмяРаздела = "Пояснения8" Тогда
		ЗаполнитьПериодыВРазделахОтчетностиПояснения8();
	ИначеЕсли ИмяРаздела = "Пояснения9" Тогда
		ЗаполнитьПериодыВРазделахОтчетностиПояснения9();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПериодыВРазделахОтчетностиПояснения1()

	ЗаголовокЗаПериодОтчетногоГода   = СтруктураРеквизитовФормы.ЗаголовкиОтчетов["ЗаПериодОтчетногоГода"];
	ЗаголовокЗаПериодПредыдущегоГода = СтруктураРеквизитовФормы.ЗаголовкиОтчетов["ЗаПериодПредыдущегоГода"];

	ЗаголовокНаОтчетнуюДату                        = СтруктураРеквизитовФормы.ЗаголовкиОтчетов["НаОтчетнуюДату"];
	ЗаголовокНаКонецПредыдущегоГода                = СтруктураРеквизитовФормы.ЗаголовкиОтчетов["НаКонецПредыдущегоГода"];
	ЗаголовокНаКонецГодаПредшествующегоПредыдущему = СтруктураРеквизитовФормы.ЗаголовкиОтчетов["НаКонецГодаПредшествующегоПредыдущему"];

	ТабличныйДокумент.Области.ЗаПериодОтчетногоГода5100.Текст   = ЗаголовокЗаПериодОтчетногоГода;
	ТабличныйДокумент.Области.ЗаПериодПредыдущегоГода5110.Текст = ЗаголовокЗаПериодПредыдущегоГода;

	ТабличныйДокумент.Области.НаОтчетнуюДату12.Текст                        = ЗаголовокНаОтчетнуюДату;
	ТабличныйДокумент.Области.НаКонецПредыдущегоГода12.Текст                = ЗаголовокНаКонецПредыдущегоГода;
	ТабличныйДокумент.Области.НаКонецГодаПредшествующегоПредыдущему12.Текст = ЗаголовокНаКонецГодаПредшествующегоПредыдущему;

	ТабличныйДокумент.Области.НаОтчетнуюДату13.Текст                        = ЗаголовокНаОтчетнуюДату;
	ТабличныйДокумент.Области.НаКонецПредыдущегоГода13.Текст                = ЗаголовокНаКонецПредыдущегоГода;
	ТабличныйДокумент.Области.НаКонецГодаПредшествующегоПредыдущему13.Текст = ЗаголовокНаКонецГодаПредшествующегоПредыдущему;

	ТабличныйДокумент.Области.ЗаПериодОтчетногоГода5140.Текст   = ЗаголовокЗаПериодОтчетногоГода;
	ТабличныйДокумент.Области.ЗаПериодПредыдущегоГода5150.Текст = ЗаголовокЗаПериодПредыдущегоГода;

	ТабличныйДокумент.Области.ЗаПериодОтчетногоГода5160.Текст   = ЗаголовокЗаПериодОтчетногоГода;
	ТабличныйДокумент.Области.ЗаПериодПредыдущегоГода5170.Текст = ЗаголовокЗаПериодПредыдущегоГода;

	ТабличныйДокумент.Области.ЗаПериодОтчетногоГода5180.Текст   = ЗаголовокЗаПериодОтчетногоГода;
	ТабличныйДокумент.Области.ЗаПериодПредыдущегоГода5190.Текст = ЗаголовокЗаПериодПредыдущегоГода;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПериодыВРазделахОтчетностиПояснения2()

	ЗаголовокЗаПериодОтчетногоГода   = СтруктураРеквизитовФормы.ЗаголовкиОтчетов["ЗаПериодОтчетногоГода"];
	ЗаголовокЗаПериодПредыдущегоГода = СтруктураРеквизитовФормы.ЗаголовкиОтчетов["ЗаПериодПредыдущегоГода"];

	ЗаголовокНаОтчетнуюДату                        = СтруктураРеквизитовФормы.ЗаголовкиОтчетов["НаОтчетнуюДату"];
	ЗаголовокНаКонецПредыдущегоГода                = СтруктураРеквизитовФормы.ЗаголовкиОтчетов["НаКонецПредыдущегоГода"];
	ЗаголовокНаКонецГодаПредшествующегоПредыдущему = СтруктураРеквизитовФормы.ЗаголовкиОтчетов["НаКонецГодаПредшествующегоПредыдущему"];

	ТабличныйДокумент.Области.ЗаПериодОтчетногоГода5200.Текст   = ЗаголовокЗаПериодОтчетногоГода;
	ТабличныйДокумент.Области.ЗаПериодПредыдущегоГода5210.Текст = ЗаголовокЗаПериодПредыдущегоГода;

	ТабличныйДокумент.Области.ЗаПериодОтчетногоГода5220.Текст   = ЗаголовокЗаПериодОтчетногоГода;
	ТабличныйДокумент.Области.ЗаПериодПредыдущегоГода5230.Текст = ЗаголовокЗаПериодПредыдущегоГода;

	ТабличныйДокумент.Области.ЗаПериодОтчетногоГода5240.Текст   = ЗаголовокЗаПериодОтчетногоГода;
	ТабличныйДокумент.Области.ЗаПериодПредыдущегоГода5250.Текст = ЗаголовокЗаПериодПредыдущегоГода;

	ТабличныйДокумент.Области.ЗаПериодОтчетногоГода5240.Текст   = ЗаголовокЗаПериодОтчетногоГода;
	ТабличныйДокумент.Области.ЗаПериодПредыдущегоГода5250.Текст = ЗаголовокЗаПериодПредыдущегоГода;

	ТабличныйДокумент.Области.ЗаПериодОтчетногоГода23.Текст   = ЗаголовокЗаПериодОтчетногоГода;
	ТабличныйДокумент.Области.ЗаПериодПредыдущегоГода23.Текст = ЗаголовокЗаПериодПредыдущегоГода;

	ТабличныйДокумент.Области.НаОтчетнуюДату24.Текст                        = ЗаголовокНаОтчетнуюДату;
	ТабличныйДокумент.Области.НаКонецПредыдущегоГода24.Текст                = ЗаголовокНаКонецПредыдущегоГода;
	ТабличныйДокумент.Области.НаКонецГодаПредшествующегоПредыдущему24.Текст = ЗаголовокНаКонецГодаПредшествующегоПредыдущему;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПериодыВРазделахОтчетностиПояснения3()

	ЗаголовокЗаПериодОтчетногоГода   = СтруктураРеквизитовФормы.ЗаголовкиОтчетов["ЗаПериодОтчетногоГода"];
	ЗаголовокЗаПериодПредыдущегоГода = СтруктураРеквизитовФормы.ЗаголовкиОтчетов["ЗаПериодПредыдущегоГода"];

	ЗаголовокНаОтчетнуюДату                        = СтруктураРеквизитовФормы.ЗаголовкиОтчетов["НаОтчетнуюДату"];
	ЗаголовокНаКонецПредыдущегоГода                = СтруктураРеквизитовФормы.ЗаголовкиОтчетов["НаКонецПредыдущегоГода"];
	ЗаголовокНаКонецГодаПредшествующегоПредыдущему = СтруктураРеквизитовФормы.ЗаголовкиОтчетов["НаКонецГодаПредшествующегоПредыдущему"];

	ТабличныйДокумент.Области.ЗаПериодОтчетногоГода5301.Текст   = ЗаголовокЗаПериодОтчетногоГода;
	ТабличныйДокумент.Области.ЗаПериодПредыдущегоГода5311.Текст = ЗаголовокЗаПериодПредыдущегоГода;

	ТабличныйДокумент.Области.ЗаПериодОтчетногоГода5305.Текст   = ЗаголовокЗаПериодОтчетногоГода;
	ТабличныйДокумент.Области.ЗаПериодПредыдущегоГода5315.Текст = ЗаголовокЗаПериодПредыдущегоГода;

	ТабличныйДокумент.Области.ЗаПериодОтчетногоГода5300.Текст   = ЗаголовокЗаПериодОтчетногоГода;
	ТабличныйДокумент.Области.ЗаПериодПредыдущегоГода5310.Текст = ЗаголовокЗаПериодПредыдущегоГода;

	ТабличныйДокумент.Области.НаОтчетнуюДату32.Текст                        = ЗаголовокНаОтчетнуюДату;
	ТабличныйДокумент.Области.НаКонецПредыдущегоГода32.Текст                = ЗаголовокНаКонецПредыдущегоГода;
	ТабличныйДокумент.Области.НаКонецГодаПредшествующегоПредыдущему32.Текст = ЗаголовокНаКонецГодаПредшествующегоПредыдущему;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПериодыВРазделахОтчетностиПояснения4()
	
	ЗаголовокЗаПериодОтчетногоГода   = СтруктураРеквизитовФормы.ЗаголовкиОтчетов["ЗаПериодОтчетногоГода"];
	ЗаголовокЗаПериодПредыдущегоГода = СтруктураРеквизитовФормы.ЗаголовкиОтчетов["ЗаПериодПредыдущегоГода"];
	
	ЗаголовокНаОтчетнуюДату                        = СтруктураРеквизитовФормы.ЗаголовкиОтчетов["НаОтчетнуюДату"];
	ЗаголовокНаКонецПредыдущегоГода                = СтруктураРеквизитовФормы.ЗаголовкиОтчетов["НаКонецПредыдущегоГода"];
	ЗаголовокНаКонецГодаПредшествующегоПредыдущему = СтруктураРеквизитовФормы.ЗаголовкиОтчетов["НаКонецГодаПредшествующегоПредыдущему"];
	
	ТабличныйДокумент.Области.ЗаПериодОтчетногоГода5400.Текст   = ЗаголовокЗаПериодОтчетногоГода;
	ТабличныйДокумент.Области.ЗаПериодПредыдущегоГода5420.Текст = ЗаголовокЗаПериодПредыдущегоГода;
	
	ТабличныйДокумент.Области.ЗаПериодОтчетногоГода5401.Текст   = ЗаголовокЗаПериодОтчетногоГода;
	ТабличныйДокумент.Области.ЗаПериодПредыдущегоГода5421.Текст = ЗаголовокЗаПериодПредыдущегоГода;
	
	ТабличныйДокумент.Области.ЗаПериодОтчетногоГода5402.Текст   = ЗаголовокЗаПериодОтчетногоГода;
	ТабличныйДокумент.Области.ЗаПериодПредыдущегоГода5422.Текст = ЗаголовокЗаПериодПредыдущегоГода;
	
	ТабличныйДокумент.Области.ЗаПериодОтчетногоГода5403.Текст   = ЗаголовокЗаПериодОтчетногоГода;
	ТабличныйДокумент.Области.ЗаПериодПредыдущегоГода5423.Текст = ЗаголовокЗаПериодПредыдущегоГода;
	
	ТабличныйДокумент.Области.ЗаПериодОтчетногоГода5404.Текст   = ЗаголовокЗаПериодОтчетногоГода;
	ТабличныйДокумент.Области.ЗаПериодПредыдущегоГода5424.Текст = ЗаголовокЗаПериодПредыдущегоГода;
	
	ТабличныйДокумент.Области.ЗаПериодОтчетногоГода5405.Текст   = ЗаголовокЗаПериодОтчетногоГода;
	ТабличныйДокумент.Области.ЗаПериодПредыдущегоГода5425.Текст = ЗаголовокЗаПериодПредыдущегоГода;
	
	ТабличныйДокумент.Области.ЗаПериодОтчетногоГода5406.Текст   = ЗаголовокЗаПериодОтчетногоГода;
	ТабличныйДокумент.Области.ЗаПериодПредыдущегоГода5426.Текст = ЗаголовокЗаПериодПредыдущегоГода;
	
	ТабличныйДокумент.Области.ЗаПериодОтчетногоГода5407.Текст   = ЗаголовокЗаПериодОтчетногоГода;
	ТабличныйДокумент.Области.ЗаПериодПредыдущегоГода5427.Текст = ЗаголовокЗаПериодПредыдущегоГода;
	
	ТабличныйДокумент.Области.НаОтчетнуюДату42.Текст                        = ЗаголовокНаОтчетнуюДату;
	ТабличныйДокумент.Области.НаКонецПредыдущегоГода42.Текст                = ЗаголовокНаКонецПредыдущегоГода;
	ТабличныйДокумент.Области.НаКонецГодаПредшествующегоПредыдущему42.Текст = ЗаголовокНаКонецГодаПредшествующегоПредыдущему;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПериодыВРазделахОтчетностиПояснения5()

	ЗаголовокЗаПериодОтчетногоГода   = СтруктураРеквизитовФормы.ЗаголовкиОтчетов["ЗаПериодОтчетногоГода"];
	ЗаголовокЗаПериодПредыдущегоГода = СтруктураРеквизитовФормы.ЗаголовкиОтчетов["ЗаПериодПредыдущегоГода"];

	ЗаголовокНаОтчетнуюДату                        = СтруктураРеквизитовФормы.ЗаголовкиОтчетов["НаОтчетнуюДату"];
	ЗаголовокНаКонецПредыдущегоГода                = СтруктураРеквизитовФормы.ЗаголовкиОтчетов["НаКонецПредыдущегоГода"];
	ЗаголовокНаКонецГодаПредшествующегоПредыдущему = СтруктураРеквизитовФормы.ЗаголовкиОтчетов["НаКонецГодаПредшествующегоПредыдущему"];

	ТабличныйДокумент.Области.ЗаПериодОтчетногоГода5501.Текст   = ЗаголовокЗаПериодОтчетногоГода;
	ТабличныйДокумент.Области.ЗаПериодПредыдущегоГода5521.Текст = ЗаголовокЗаПериодПредыдущегоГода;

	ТабличныйДокумент.Области.ЗаПериодОтчетногоГода5502.Текст   = ЗаголовокЗаПериодОтчетногоГода;
	ТабличныйДокумент.Области.ЗаПериодПредыдущегоГода5522.Текст = ЗаголовокЗаПериодПредыдущегоГода;

	ТабличныйДокумент.Области.ЗаПериодОтчетногоГода5503.Текст   = ЗаголовокЗаПериодОтчетногоГода;
	ТабличныйДокумент.Области.ЗаПериодПредыдущегоГода5523.Текст = ЗаголовокЗаПериодПредыдущегоГода;

	ТабличныйДокумент.Области.ЗаПериодОтчетногоГода5504.Текст   = ЗаголовокЗаПериодОтчетногоГода;
	ТабличныйДокумент.Области.ЗаПериодПредыдущегоГода5524.Текст = ЗаголовокЗаПериодПредыдущегоГода;

	ТабличныйДокумент.Области.ЗаПериодОтчетногоГода5511.Текст   = ЗаголовокЗаПериодОтчетногоГода;
	ТабличныйДокумент.Области.ЗаПериодПредыдущегоГода5531.Текст = ЗаголовокЗаПериодПредыдущегоГода;

	ТабличныйДокумент.Области.ЗаПериодОтчетногоГода5512.Текст   = ЗаголовокЗаПериодОтчетногоГода;
	ТабличныйДокумент.Области.ЗаПериодПредыдущегоГода5532.Текст = ЗаголовокЗаПериодПредыдущегоГода;

	ТабличныйДокумент.Области.ЗаПериодОтчетногоГода5513.Текст   = ЗаголовокЗаПериодОтчетногоГода;
	ТабличныйДокумент.Области.ЗаПериодПредыдущегоГода5533.Текст = ЗаголовокЗаПериодПредыдущегоГода;

	ТабличныйДокумент.Области.ЗаПериодОтчетногоГода5514.Текст   = ЗаголовокЗаПериодОтчетногоГода;
	ТабличныйДокумент.Области.ЗаПериодПредыдущегоГода5534.Текст = ЗаголовокЗаПериодПредыдущегоГода;

	ТабличныйДокумент.Области.ЗаПериодОтчетногоГода5500.Текст   = ЗаголовокЗаПериодОтчетногоГода;
	ТабличныйДокумент.Области.ЗаПериодПредыдущегоГода5520.Текст = ЗаголовокЗаПериодПредыдущегоГода;

	ТабличныйДокумент.Области.НаОтчетнуюДату52.Текст                        = ЗаголовокНаОтчетнуюДату;
	ТабличныйДокумент.Области.НаКонецПредыдущегоГода52.Текст                = ЗаголовокНаКонецПредыдущегоГода;
	ТабличныйДокумент.Области.НаКонецГодаПредшествующегоПредыдущему52.Текст = ЗаголовокНаКонецГодаПредшествующегоПредыдущему;

	ТабличныйДокумент.Области.ЗаПериодОтчетногоГода5551.Текст   = ЗаголовокЗаПериодОтчетногоГода;
	ТабличныйДокумент.Области.ЗаПериодПредыдущегоГода5571.Текст = ЗаголовокЗаПериодПредыдущегоГода;

	ТабличныйДокумент.Области.ЗаПериодОтчетногоГода5552.Текст   = ЗаголовокЗаПериодОтчетногоГода;
	ТабличныйДокумент.Области.ЗаПериодПредыдущегоГода5572.Текст = ЗаголовокЗаПериодПредыдущегоГода;

	ТабличныйДокумент.Области.ЗаПериодОтчетногоГода5553.Текст   = ЗаголовокЗаПериодОтчетногоГода;
	ТабличныйДокумент.Области.ЗаПериодПредыдущегоГода5573.Текст = ЗаголовокЗаПериодПредыдущегоГода;

	ТабличныйДокумент.Области.ЗаПериодОтчетногоГода5554.Текст   = ЗаголовокЗаПериодОтчетногоГода;
	ТабличныйДокумент.Области.ЗаПериодПредыдущегоГода5574.Текст = ЗаголовокЗаПериодПредыдущегоГода;

	ТабличныйДокумент.Области.ЗаПериодОтчетногоГода5560.Текст   = ЗаголовокЗаПериодОтчетногоГода;
	ТабличныйДокумент.Области.ЗаПериодПредыдущегоГода5580.Текст = ЗаголовокЗаПериодПредыдущегоГода;

	ТабличныйДокумент.Области.ЗаПериодОтчетногоГода5561.Текст   = ЗаголовокЗаПериодОтчетногоГода;
	ТабличныйДокумент.Области.ЗаПериодПредыдущегоГода5581.Текст = ЗаголовокЗаПериодПредыдущегоГода;

	ТабличныйДокумент.Области.ЗаПериодОтчетногоГода5562.Текст   = ЗаголовокЗаПериодОтчетногоГода;
	ТабличныйДокумент.Области.ЗаПериодПредыдущегоГода5582.Текст = ЗаголовокЗаПериодПредыдущегоГода;

	ТабличныйДокумент.Области.ЗаПериодОтчетногоГода5563.Текст   = ЗаголовокЗаПериодОтчетногоГода;
	ТабличныйДокумент.Области.ЗаПериодПредыдущегоГода5583.Текст = ЗаголовокЗаПериодПредыдущегоГода;

	ТабличныйДокумент.Области.ЗаПериодОтчетногоГода5564.Текст   = ЗаголовокЗаПериодОтчетногоГода;
	ТабличныйДокумент.Области.ЗаПериодПредыдущегоГода5584.Текст = ЗаголовокЗаПериодПредыдущегоГода;

	ТабличныйДокумент.Области.ЗаПериодОтчетногоГода5565.Текст   = ЗаголовокЗаПериодОтчетногоГода;
	ТабличныйДокумент.Области.ЗаПериодПредыдущегоГода5585.Текст = ЗаголовокЗаПериодПредыдущегоГода;

	ТабличныйДокумент.Области.ЗаПериодОтчетногоГода5566.Текст   = ЗаголовокЗаПериодОтчетногоГода;
	ТабличныйДокумент.Области.ЗаПериодПредыдущегоГода5586.Текст = ЗаголовокЗаПериодПредыдущегоГода;

	ТабличныйДокумент.Области.ЗаПериодОтчетногоГода5550.Текст   = ЗаголовокЗаПериодОтчетногоГода;
	ТабличныйДокумент.Области.ЗаПериодПредыдущегоГода5570.Текст = ЗаголовокЗаПериодПредыдущегоГода;

	ТабличныйДокумент.Области.НаОтчетнуюДату54.Текст                        = ЗаголовокНаОтчетнуюДату;
	ТабличныйДокумент.Области.НаКонецПредыдущегоГода54.Текст                = ЗаголовокНаКонецПредыдущегоГода;
	ТабличныйДокумент.Области.НаКонецГодаПредшествующегоПредыдущему54.Текст = ЗаголовокНаКонецГодаПредшествующегоПредыдущему;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПериодыВРазделахОтчетностиПояснения6()

	ЗаголовокЗаПериодОтчетногоГода   = СтруктураРеквизитовФормы.ЗаголовкиОтчетов["ЗаПериодОтчетногоГода"];
	ЗаголовокЗаПериодПредыдущегоГода = СтруктураРеквизитовФормы.ЗаголовкиОтчетов["ЗаПериодПредыдущегоГода"];

	ТабличныйДокумент.Области.ЗаПериодОтчетногоГода6.Текст   = ЗаголовокЗаПериодОтчетногоГода;
	ТабличныйДокумент.Области.ЗаПериодПредыдущегоГода6.Текст = ЗаголовокЗаПериодПредыдущегоГода;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПериодыВРазделахОтчетностиПояснения8()

	ЗаголовокНаОтчетнуюДату                        = СтруктураРеквизитовФормы.ЗаголовкиОтчетов["НаОтчетнуюДату"];
	ЗаголовокНаКонецПредыдущегоГода                = СтруктураРеквизитовФормы.ЗаголовкиОтчетов["НаКонецПредыдущегоГода"];
	ЗаголовокНаКонецГодаПредшествующегоПредыдущему = СтруктураРеквизитовФормы.ЗаголовкиОтчетов["НаКонецГодаПредшествующегоПредыдущему"];

	ТабличныйДокумент.Области.НаОтчетнуюДату8.Текст                        = ЗаголовокНаОтчетнуюДату;
	ТабличныйДокумент.Области.НаКонецПредыдущегоГода8.Текст                = ЗаголовокНаКонецПредыдущегоГода;
	ТабличныйДокумент.Области.НаКонецГодаПредшествующегоПредыдущему8.Текст = ЗаголовокНаКонецГодаПредшествующегоПредыдущему;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПериодыВРазделахОтчетностиПояснения9()

	ЗаголовокЗаПериодОтчетногоГода   = СтруктураРеквизитовФормы.ЗаголовкиОтчетов["ЗаПериодОтчетногоГода"];
	ЗаголовокЗаПериодПредыдущегоГода = СтруктураРеквизитовФормы.ЗаголовкиОтчетов["ЗаПериодПредыдущегоГода"];

	ТабличныйДокумент.Области.ЗаПериодОтчетногоГода9.Текст   = ЗаголовокЗаПериодОтчетногоГода;
	ТабличныйДокумент.Области.ЗаПериодПредыдущегоГода9.Текст = ЗаголовокЗаПериодПредыдущегоГода;

	ТабличныйДокумент.Области.ЗаПериодОтчетногоГода5910.Текст   = ЗаголовокЗаПериодОтчетногоГода;
	ТабличныйДокумент.Области.ЗаПериодПредыдущегоГода5920.Текст = ЗаголовокЗаПериодПредыдущегоГода;

КонецПроцедуры

&НаСервере
Процедура ВывестиМакетСтраницыВТабличныйДокументНаСервере(ИмяТекРаздела, НомерСтраницыРазделаОтчета)
	
	СохранитьДанныеРаздела(СтруктураРеквизитовФормы.НаимТекущегоРаздела, Истина);
	
	СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяТекРаздела;
	
	ВывестиМакетВТаблДокНаСервере(ИмяТекРаздела, НомерСтраницыРазделаОтчета);
	
	ПоказатьПериод(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
	Если НЕ ТабличныйДокумент.Области.Найти("ДатаПодписиОтчета") = Неопределено Тогда
		ТабличныйДокумент.Области.ДатаПодписиОтчета.Значение = ДатаПодписи;
	КонецЕсли;
	
	ЗаполнитьСведенияОбОрганизацииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура СохранитьДанныеРаздела(НаимРаздела, ОчищатьРазделЕслиЕстьМногострочность)
	
	ЭтоДревовидныйРаздел = (НаимРаздела = "ОСВ_66" ИЛИ НаимРаздела = "ОСВ_67");
	
	ЭтоРазделБезВводаДанных = ТипЗнч(ЭтаФорма["СтруктураДанных" + НаимРаздела]) = Тип("Структура")
	                        И ЭтаФорма["СтруктураДанных" + НаимРаздела].Свойство("АдресПредставления");
	
	Если ЭтоДревовидныйРаздел Тогда
		СохранитьДанныеДревовидногоРаздела(НаимРаздела);
	ИначеЕсли НЕ ЭтоРазделБезВводаДанных Тогда
		ЭтаФорма["СтруктураДанных" + НаимРаздела] = СобратьДанныеТекущегоТаблПоля(ЭтаФорма, "ТабличныйДокумент");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиМакетВТаблДокНаСервере(ИмяТекРаздела, НомерСтраницыРазделаОтчета)
	
	ТабличныйДокумент.Очистить();
	
	ТабличныйДокумент.Вывести(МакетРаздела15(ИмяТекРаздела));
	
	ПолучитьСтруктуруМногострочныхЧастей();
	
	// Многострочные разделы.
	//
	Если ИмяТекРаздела = "Баланс"
	 ИЛИ ИмяТекРаздела = "ФормаОтчета"
	 ИЛИ ИмяТекРаздела = "ОИК"
	 ИЛИ ИмяТекРаздела = "ОДДС"
	 ИЛИ ИмяТекРаздела = "ЛизингОбязательства" Тогда
		Для Каждого ЭлементСтруктуры Из СтруктураМногострочныхЧастей Цикл
			Если ЭлементСтруктуры.Значение.Свойство("ИмяПоляТабличногоДокумента")
			   И ЭлементСтруктуры.Значение.ИмяПоляТабличногоДокумента = ИмяТекРаздела Тогда
				ВывестиРазделВТабличныйДокумент(ЭлементСтруктуры.Ключ);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если ИмяТекРаздела = "ОСВ_66" ИЛИ ИмяТекРаздела = "ОСВ_67" Тогда
		ВывестиДанныеВТабличныйДокумент(ИмяТекРаздела, СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела);
		
	Иначе
		Для Каждого ЭлСтруктуры Из ЭтаФорма["СтруктураДанных" + ИмяТекРаздела] Цикл
			Обл = ТабличныйДокумент.Области.Найти(ЭлСтруктуры.Ключ);
			Если Обл <> Неопределено И Обл.СодержитЗначение Тогда
				Обл.Значение = ЭлСтруктуры.Значение;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	ЗаполнитьПериодыВРазделахОтчетности(ИмяТекРаздела);
	
	Для Каждого ЭлементСтруктуры Из СтруктураМногострочныхЧастей Цикл
		ПеренумероватьСтрокиИЗаполнитьЗаголовкиМногострочнойЧасти(ЭлементСтруктуры.Значение, ИмяТекРаздела)
	КонецЦикла;
	
	УстановитьФорматВыводаНаСервере(ИмяТекРаздела);
	
	УстановитьЦветФонаЯчейкиНаСервере( , , ИмяТекРаздела);
	
	УстановитьВидимостьДополнительныхСтрок(ИмяТекРаздела);
	
	Если ИмяТекРаздела = "Баланс" Тогда
		ПеренумероватьСтрокиРасшифровкиБаланса();
	ИначеЕсли ИмяТекРаздела = "ФормаОтчета" Тогда
		ПеренумероватьСтрокиРасшифровкиОПУ();
	КонецЕсли;
	
	Если ИмяТекРаздела <> "Баланс" Тогда
		Если ТабличныйДокумент.Области.Найти("ОргДиректор") <> Неопределено
			И СтруктураДанныхБаланс.Свойство("ОргДиректор") Тогда
			ТабличныйДокумент.Области.ОргДиректор.Значение = СтруктураДанныхБаланс.ОргДиректор;
		КонецЕсли;
	КонецЕсли;
	
	Если СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета >= '2012-12-01' Тогда
		ОчиститьПолеПодписиБухгалтера();
	КонецЕсли;
	
	Если ИмяТекРаздела = "Баланс"
	 ИЛИ ИмяТекРаздела = "ФормаОтчета"
	 ИЛИ ИмяТекРаздела = "ОИК"
	 ИЛИ ИмяТекРаздела = "ОДДС" Тогда
		
		ОтрисоватьЗначкиУдаленияСтрок(ТабличныйДокумент);
		
	КонецЕсли;
	
	ИзменитьНазванияОтчетов(ИмяТекРаздела);
	СкрытьСсылкуНастройкаСоставаОрганизаций();
	СкрытьПоказательДатаУтвержденияОтчетности();
	
КонецПроцедуры

&НаСервере
Процедура ВывестиРазделВТабличныйДокумент(ИдентификаторМногострочнойЧасти)
	
	ПолучитьСтруктуруМногострочныхЧастей();
	
	СтруктураМногострочнойЧасти = СтруктураМногострочныхЧастей[ИдентификаторМногострочнойЧасти];
	
	// Очищаем именованную область многострочной части и сохраняем исходную позицию.
	ИмяОбластиМногострочнойЧастиВТаблице = ИдентификаторМногострочнойЧасти;
	Если СтрНайти(ИдентификаторМногострочнойЧасти, "П00010") = 1 ИЛИ СтрНайти(ИдентификаторМногострочнойЧасти, "П10010") Тогда
		КодСтроки = Сред(ИмяОбластиМногострочнойЧастиВТаблице, 7);
		Пока Лев(КодСтроки, 1) = "0" Цикл
			КодСтроки = Сред(КодСтроки, 2);
		КонецЦикла;
		ИмяОбластиМногострочнойЧастиВТаблице = "ДопСтрока" + КодСтроки;
	КонецЕсли;
		
	Если ТабличныйДокумент.Области.Найти(ИмяОбластиМногострочнойЧастиВТаблице) <> Неопределено Тогда
		ИсходнаяОбластьСтрокВерх = ТабличныйДокумент.Области[ИмяОбластиМногострочнойЧастиВТаблице].Верх;
		ИсходнаяОбластьСтрокНиз  = ТабличныйДокумент.Области[ИмяОбластиМногострочнойЧастиВТаблице].Низ;
		ТабличныйДокумент.Области[ИмяОбластиМногострочнойЧастиВТаблице].Имя = "";
	Иначе
		ИсходнаяОбластьСтрокВерх = 0;
		ИсходнаяОбластьСтрокНиз  = 0;
	КонецЕсли;
	
	СтрокВМакете = СтруктураМногострочнойЧасти.Масштаб.МинимальноеКоличествоСтрок;
	ИзменениеОбластиСтрокПоВысоте = 0;
	
	КоличествоСтрокВМногострочнойЧасти = СтруктураМногострочнойЧасти.Состав.Количество();
	Пока СтрокВМакете < КоличествоСтрокВМногострочнойЧасти Цикл
		// За основу для копирования используется последняя строка многострочного раздела в макете.
		ИмяВерхнегоЭлементаСтроки = СтруктураМногострочнойЧасти.Габариты.ВерхнийЭлементСтроки + "_" + СтрокаЧГ0(СтрокВМакете);
		ИмяНижнегоЭлементаСтроки  = СтруктураМногострочнойЧасти.Габариты.НижнийЭлементСтроки + "_" + СтрокаЧГ0(СтрокВМакете);
		
		ОбластьВставляемойСтрокиВерх = ТабличныйДокумент.Области[ИмяВерхнегоЭлементаСтроки].Верх;
		ОбластьВставляемойСтрокиНиз  = ТабличныйДокумент.Области[ИмяНижнегоЭлементаСтроки].Низ;
		
		ОбластьВставляемойСтроки = ТабличныйДокумент.Область(ОбластьВставляемойСтрокиВерх, , ОбластьВставляемойСтрокиНиз, );
		
		ТабличныйДокумент.ВставитьОбласть(ОбластьВставляемойСтроки, , ТипСмещенияТабличногоДокумента.ПоВертикали, Ложь);
		
		ВысотаСтроки = ОбластьВставляемойСтрокиНиз - ОбластьВставляемойСтрокиВерх + 1;
		ИзменениеОбластиСтрокПоВысоте = ИзменениеОбластиСтрокПоВысоте + ВысотаСтроки;
		Смещение = ВысотаСтроки * СтрокВМакете;
		
		// Назначаем имена областям показателей на базе первой строки многострочной части.
		ОсноваИмениПоказателяДляДопСтроки = "";
		Для Каждого ЭлементСтруктуры Из СтруктураМногострочнойЧасти.Состав[0] Цикл
			ОсноваИмениПоказателя = ЭлементСтруктуры.Ключ;
			Если Лев(ОсноваИмениПоказателя, 1) = "П" И Прав(ОсноваИмениПоказателя, 2) = "01" Тогда 
				ОсноваИмениПоказателяДляДопСтроки = ОсноваИмениПоказателя;
			КонецЕсли;
			ИсходнаяОбластьПоказателя = ТабличныйДокумент.Области[ОсноваИмениПоказателя + "_1"];
			
			ОбластьПоказателяНовойСтроки = ТабличныйДокумент.Область(ИсходнаяОбластьПоказателя.Верх + Смещение, ИсходнаяОбластьПоказателя.Лево,
			                                                               ИсходнаяОбластьПоказателя.Низ + Смещение, ИсходнаяОбластьПоказателя.Право);
			ОбластьПоказателяНовойСтроки.Имя = ОсноваИмениПоказателя + "_" + СтрокаЧГ0(СтрокВМакете + 1);
		КонецЦикла;
		
		СтрокВМакете = СтрокВМакете + 1;
		ОбластьУдалитьНовая = ТабличныйДокумент.Область(ОбластьВставляемойСтрокиВерх + ВысотаСтроки, 2, ОбластьВставляемойСтрокиВерх + ВысотаСтроки, 2);
		ОбластьУдалитьНовая.Имя = "УдалитьСтроку" + ОсноваИмениПоказателяДляДопСтроки  + "_" + СтрокаЧГ0(СтрокВМакете);
		
	КонецЦикла;
	
	Если ИсходнаяОбластьСтрокВерх <> 0 Тогда
		ОбластьСтрокДляИменования = ТабличныйДокумент.Область(ИсходнаяОбластьСтрокВерх, , ИсходнаяОбластьСтрокНиз + ИзменениеОбластиСтрокПоВысоте, );
		ОбластьСтрокДляИменования.Имя = ИмяОбластиМногострочнойЧастиВТаблице;
	КонецЕсли;

	Для Инд = 1 По КоличествоСтрокВМногострочнойЧасти Цикл
		ПостфиксИмениОбласти = "_" + СтрокаЧГ0(Инд);
		ИндексСтроки = Инд - 1;
		СтрокаМногострочнойЧасти = СтруктураМногострочнойЧасти.Состав.Получить(ИндексСтроки);
		Для Каждого ЭлементСтруктуры Из СтрокаМногострочнойЧасти Цикл
			ИмяОбласти = ЭлементСтруктуры.Ключ + ПостфиксИмениОбласти;
			Область = ТабличныйДокумент.Области[ИмяОбласти];
			Если Область.СодержитЗначение Тогда
				Область.Значение = ЭлементСтруктуры.Значение;
			Иначе
				Область.Текст = ЭлементСтруктуры.Значение;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	ПеренумероватьСтрокиИЗаполнитьЗаголовкиМногострочнойЧасти(СтруктураМногострочнойЧасти, СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСведенияОбОрганизацииНаСервере(ВПрограммеИзмененаДатаПодписи = Ложь)
	
	ЗаполнитьСведенияОбОрганизации(ЭтаФорма, ВПрограммеИзмененаДатаПодписи);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьСведенияОбОрганизации(Форма, ВПрограммеИзмененаДатаПодписи = Ложь, СведенияОбОрганизации = Неопределено)
	
	Если (Форма.СтруктураРеквизитовФормы.Организация  = Неопределено) Или (Форма.СтруктураРеквизитовФормы.Организация = РегламентированнаяОтчетностьКлиентСервер.ПустоеЗначениеТипа("СправочникСсылка.Организации")) Тогда
		Возврат
	КонецЕсли;
	
	// Составляем список данных, необходимых для вывода в декларацию
	Сведения = Новый СписокЗначений;
	
	Если НЕ ВПрограммеИзмененаДатаПодписи Тогда
		Сведения.Добавить("", "ИННЮЛ"); // ИНН
		Сведения.Добавить("", "НаимЮЛПол"); // Полное наименование 
		Сведения.Добавить("", "ОКПО");
		Сведения.Добавить("", "ОКВЭД2");
		Сведения.Добавить("", "ОснВидДеят");
		Сведения.Добавить("", "ОКОПФ");
		Сведения.Добавить("", "ОКФС");
		Сведения.Добавить("", "ФормСобств");
		Сведения.Добавить("", "ОргПравФорм");
		Сведения.Добавить("", Форма.СтруктураРеквизитовФормы.мТипАдреса);
	КонецЕсли;
	
	Сведения.Добавить("", "ФИОРук"); // ФИО руководителя
	Сведения.Добавить("", "ФИОБух"); // ФИО бухгалтера
	
	//В поле "Адрес" указывается:
	//- для организации - место ее государственной регистрации (место нахождения);
	//- для обособленного подразделения - место его нахождения;
	//- для физического лица - полный адрес постоянного места жительства физического лица на основании документа, удостоверяющего его личность, либо иного документа, подтверждающего адрес постоянного места жительства.
	
	// Теперь получаем данные из глобальной общей функции
	ОргСведения = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(Форма.СтруктураРеквизитовФормы.Организация, Форма.ДатаПодписи, Сведения);
	
	Если НЕ ВПрограммеИзмененаДатаПодписи Тогда
		// Инициализируем переменные
		ИННЮЛ = ""; // ИНН
		НаимЮЛПол = ""; // Полное наименование 
		ОКПО = "";
		ОКВЭД2 = "";
		ПолныйАдрЮР = "";
		ОснВидДеят = "";
		ФормСобств = "";
		ОКОПФ = "";
		ОКФС = "";
		ОргПравФорм1 = "";
		ПолныйАдрес = "";
	КонецЕсли;
	
	ФИОРук = ""; // ФИО руководителя
	ФИОБух = ""; // ФИО бухгалтера
	
	Если НЕ ВПрограммеИзмененаДатаПодписи Тогда
		ОргСведения.Свойство("ИННЮЛ", ИННЮЛ);
		ОргСведения.Свойство("НаимЮЛПол", НаимЮЛПол);
		ОргСведения.Свойство("ОКПО", ОКПО);
		ОргСведения.Свойство("ОКВЭД2", ОКВЭД2);
		ОргСведения.Свойство("ОКОПФ", ОКОПФ);
		ОргСведения.Свойство("ОКФС", ОКФС);
		ОргСведения.Свойство("ОснВидДеят", ОснВидДеят);
		ОргСведения.Свойство("ПолныйАдрЮР", ПолныйАдрЮР);
		ОргСведения.Свойство("ФормСобств", ФормСобств);
		ОргСведения.Свойство("ОргПравФорм", ОргПравФорм1);
		ОргСведения.Свойство(Форма.СтруктураРеквизитовФормы.мТипАдреса, ПолныйАдрес);
	КонецЕсли;
	
	ОргСведения.Свойство("ФИОРук", ФИОРук);
	ОргСведения.Свойство("ФИОБух", ФИОБух);
	
	Если ВПрограммеИзмененаДатаПодписи Тогда
		
		// Обновим только то, что зависит от даты подписи
		Если НЕ Форма.ТабличныйДокумент.Области.Найти("ОргДиректор") = Неопределено Тогда
			Форма.ТабличныйДокумент.Области.ОргДиректор.Значение = ФИОРук;
		КонецЕсли;
		Если (Форма.СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета < '2012-12-01')
		   И НЕ Форма.ТабличныйДокумент.Области.Найти("ОргБухгалтер") = Неопределено Тогда
			Форма.ТабличныйДокумент.Области.ОргБухгалтер.Значение = ФИОБух;
		КонецЕсли;
		
	КонецЕсли;
	
	// Анализируем переменную ИННЮЛ, в которой хранится идентификационный
	// номер налогоплательщика, на предмет пустого значения.
	
	Если НЕ ЗначениеЗаполнено(ИННЮЛ) Тогда
		ИННЮЛ = "";
	КонецЕсли;
	
	мИННЮЛ = ИННЮЛ;
	
	Если НЕ Форма.ТабличныйДокумент.Области.Найти("ОргИНН") = Неопределено И ((Форма.СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация) Или (ПустаяСтрока(Форма.ТабличныйДокумент.Области.ОргИНН.Значение))) Тогда
		Форма.ТабличныйДокумент.Области.ОргИНН.Значение = мИННЮЛ;
	КонецЕсли;
	
	// Работаем с названием ЮЛ
	Если НЕ Форма.ТабличныйДокумент.Области.Найти("ОргНазв") = Неопределено
	   И ((Форма.СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация) Или (ПустаяСтрока(Форма.ТабличныйДокумент.Области.ОргНазв.Значение))) Тогда
		// Если пустая строка на Титульном листе, то запишем имеющееся у нас значение
		Форма.ТабличныйДокумент.Области.ОргНазв.Значение = НаимЮЛПол;
	КонецЕсли;
	
	// Работаем с ФИО руководителя
	Если НЕ Форма.ТабличныйДокумент.Области.Найти("ОргКодОКПО") = Неопределено И ((Форма.СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация) Или (ПустаяСтрока(Форма.ТабличныйДокумент.Области.ОргКодОКПО.Значение))) Тогда	
				
		Если Форма.СтруктураРеквизитовФормы.ИП Тогда
			Форма.ТабличныйДокумент.Области.ОргКодОКПО.Значение = "";
		Иначе
			Форма.ТабличныйДокумент.Области.ОргКодОКПО.Значение = ОКПО;
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ Форма.ТабличныйДокумент.Области.Найти("ОргКодОКВЭД") = Неопределено И ((Форма.СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация) Или (ПустаяСтрока(Форма.ТабличныйДокумент.Области.ОргКодОКВЭД.Значение))) Тогда	
		Форма.ТабличныйДокумент.Области.ОргКодОКВЭД.Значение = ОКВЭД2;
	КонецЕсли;
	
	Если НЕ Форма.ТабличныйДокумент.Области.Найти("ОргФорма") = Неопределено И ((Форма.СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация) Или (ПустаяСтрока(Форма.ТабличныйДокумент.Области.ОргФорма.Значение))) Тогда	
		Форма.ТабличныйДокумент.Области.ОргФорма.Значение = ОргПравФорм1;
	КонецЕсли;
		
	Если НЕ Форма.ТабличныйДокумент.Области.Найти("ОргОтрасль") = Неопределено И ((Форма.СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация) Или (ПустаяСтрока(Форма.ТабличныйДокумент.Области.ОргОтрасль.Значение))) Тогда	
		Форма.ТабличныйДокумент.Области.ОргОтрасль.Значение = ОснВидДеят;
	КонецЕсли;
	
	Если НЕ Форма.ТабличныйДокумент.Области.Найти("ОргКодОКОПФ") = Неопределено И ((Форма.СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация) Или (ПустаяСтрока(Форма.ТабличныйДокумент.Области.ОргКодОКОПФ.Значение))) Тогда	
		Форма.ТабличныйДокумент.Области.ОргКодОКОПФ.Значение = ОКОПФ;
	КонецЕсли;
	
	Если НЕ Форма.ТабличныйДокумент.Области.Найти("ОргКодОКФС") = Неопределено И ((Форма.СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация) Или (ПустаяСтрока(Форма.ТабличныйДокумент.Области.ОргКодОКФС.Значение))) Тогда	
		Форма.ТабличныйДокумент.Области.ОргКодОКФС.Значение = ОКФС;
	КонецЕсли;
	
	Если НЕ Форма.ТабличныйДокумент.Области.Найти("ОргФормаСобств") = Неопределено И ((Форма.СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация) Или (ПустаяСтрока(Форма.ТабличныйДокумент.Области.ОргФормаСобств.Значение))) Тогда	
		Форма.ТабличныйДокумент.Области.ОргФормаСобств.Значение = ФормСобств;
	КонецЕсли;
	
	Если (НЕ Форма.ТабличныйДокумент.Области.Найти("ОргПочтАдрес") = Неопределено) И ((Форма.СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация) Или (ПустаяСтрока(Форма.ТабличныйДокумент.Области.ОргПочтАдрес.Значение))) Тогда	
		
		Форма.ТабличныйДокумент.Области.ОргПочтАдрес.Значение = РегламентированнаяОтчетностьКлиентСервер.ПредставлениеАдресаВФормате9Запятых(ПолныйАдрес);
		Форма.СтруктураРеквизитовФормы.мАдресДляВыгрузки = ПолныйАдрес;
		
	КонецЕсли;
	
	Если НЕ Форма.ТабличныйДокумент.Области.Найти("ОргДиректор") = Неопределено И ((Форма.СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация) ИЛИ (ПустаяСтрока(Форма.ТабличныйДокумент.Области.ОргДиректор.Значение))) Тогда	
		Форма.ТабличныйДокумент.Области.ОргДиректор.Значение = ФИОРук;
	КонецЕсли;
	
	Если (Форма.СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета < '2012-12-01')
	   И НЕ Форма.ТабличныйДокумент.Области.Найти("ОргБухгалтер") = Неопределено И ((Форма.СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация) ИЛИ (ПустаяСтрока(Форма.ТабличныйДокумент.Области.ОргБухгалтер.Значение))) Тогда	
		Форма.ТабличныйДокумент.Области.ОргБухгалтер.Значение = ФИОБух;
	КонецЕсли;
	
	Если ТипЗнч(СведенияОбОрганизации) = Тип("Структура") Тогда
		СведенияОбОрганизации.Вставить("ОргДиректор",    ФИОРук);
		СведенияОбОрганизации.Вставить("ОргБухгалтер",   ФИОБух);
		СведенияОбОрганизации.Вставить("ОргИНН",         мИННЮЛ);
		СведенияОбОрганизации.Вставить("ОргНазв",        НаимЮЛПол);
		СведенияОбОрганизации.Вставить("ОргКодОКПО",     ОКПО);
		СведенияОбОрганизации.Вставить("ОргКодОКВЭД",    ОКВЭД2);
		СведенияОбОрганизации.Вставить("ОргФорма",       ОргПравФорм1);
		СведенияОбОрганизации.Вставить("ОргОтрасль",     ОснВидДеят);
		СведенияОбОрганизации.Вставить("ОргКодОКОПФ",    ОКОПФ);
		СведенияОбОрганизации.Вставить("ОргКодОКФС",     ОКФС);
		СведенияОбОрганизации.Вставить("ОргФормаСобств", ФормСобств);
		СведенияОбОрганизации.Вставить("ОргПочтАдрес",
			РегламентированнаяОтчетностьКлиентСервер.ПредставлениеАдресаВФормате9Запятых(ПолныйАдрес));
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЦветФонаЯчейкиНаСервере(ИмяЯчейки = Неопределено, ВариантЗаполнения = Неопределено, ИмяТекущейСтраницыПанели = "") Экспорт
	
	Перем ЦветФона;
	Перем Комментарий;
	
	// Не нужно разукрашивать табличные поля, если открывается без открытия формы (например печать или просмотр)
	Если СтруктураРеквизитовФормы.мБезОткрытияФормы Или СтруктураРеквизитовФормы.мРежимПечати Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ИмяЯчейки = Неопределено Тогда
		// устанавливаем цвет фона конкретной ячейки
		ИмяСтраницыПанели = ОпределитьСтраницуПанелиПоКодуПоказателя(ИмяЯчейки);
		
		Если ИмяСтраницыПанели = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ИмяПоляТаблДокумента = "ТабличныйДокумент";
		
		Ключ = "_" + ВариантЗаполнения;
		мСтруктураЦветовРаскраски.Свойство(Ключ, ЦветФона);
		
		// КодПоказателяПоСтруктуре
		ЗначениеВКвадратах = РегламентированнаяОтчетностьКлиентСервер.ОбластьЯвляетсяЯчейкойСоставногоПоля(ЭтаФорма, ИмяЯчейки);
		
		Если ВариантЗаполнения = 4 Тогда
			
			Если ЗначениеВКвадратах Тогда
				// если ЗНАЧЕНИЕ КВАДРАТИЧНОЕ
				РегламентированнаяОтчетностьКлиентСервер.СвойстваГрупповыхЗначений(ЭтаФорма, ИмяЯчейки, "УстановитьЗащиту");
			Иначе
				ЭтаФорма[ИмяПоляТаблДокумента].Области[ИмяЯчейки].Защита = Истина;
			КонецЕсли;
			
		ИначеЕсли ВариантЗаполнения = 5 Тогда
			
			Если ЗначениеВКвадратах Тогда
				// если ЗНАЧЕНИЕ КВАДРАТИЧНОЕ
				РегламентированнаяОтчетностьКлиентСервер.СвойстваГрупповыхЗначений(ЭтаФорма, ИмяЯчейки, "УстановитьЗащиту");
			Иначе
				ЭтаФорма[ИмяПоляТаблДокумента].Области[ИмяЯчейки].Защита = Ложь;
			КонецЕсли;
			
		Иначе
			
			Если ЗначениеВКвадратах Тогда
				// если ЗНАЧЕНИЕ КВАДРАТИЧНОЕ
				РегламентированнаяОтчетностьКлиентСервер.СвойстваГрупповыхЗначений(ЭтаФорма, ИмяЯчейки, "СнятьЗащиту");
			Иначе
				ЭтаФорма[ИмяПоляТаблДокумента].Области[ИмяЯчейки].Защита = Ложь;
			КонецЕсли;
			
		КонецЕсли;
		
		// установим цвет ячейки
		Если ЗначениеВКвадратах Тогда
			РегламентированнаяОтчетностьКлиентСервер.СвойстваГрупповыхЗначений(ЭтаФорма, ИмяЯчейки, "ПроставитьЦветРаскраски", ЦветФона);
		Иначе
			ЭтаФорма[ИмяПоляТаблДокумента].Области[ИмяЯчейки].ЦветФона = ЦветФона;
		КонецЕсли;
		
	Иначе
		// устанавливаем цвет фона всех автозаполняемых ячеек активной страницы
		
		ТаблицаВариантыЗаполнения = РегламентированнаяОтчетностьВызовСервера.ПолучитьТаблицуВариантовЗаполненияНаСервере(ЭтаФорма, ИмяТекущейСтраницыПанели);
		
		Если ТаблицаВариантыЗаполнения = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Для Каждого Строка Из ТаблицаВариантыЗаполнения Цикл
			ИмяПоказателя            =  Строка.КодПоказателя;
			ВариантЗаполнения        =  Строка.ВариантЗаполнения;
			Комментарий              =  Строка.Комментарий;
			КодПоказателяПоСтруктуре =  Строка.КодПоказателяПоСтруктуре;
			
			КолвоСтрокВМногострочнойЧасти = ПоказательВходитВМногострочнуюЧасть(ИмяПоказателя);
			
			Если КолвоСтрокВМногострочнойЧасти > 0 Тогда
				Многострочность = Истина;
				БазоваяЧасть = ИмяПоказателя;
				ВБлокеВсеПоказателиЗаполняются = Истина;
				
			Иначе
				Многострочность = Ложь;
				ВБлокеВсеПоказателиЗаполняются = Истина;
				КолвоСтрокВМногострочнойЧасти = 1;
			КонецЕсли;
			
			Для Инд = 1 по КолвоСтрокВМногострочнойЧасти Цикл
				
				Если Многострочность Тогда
					ИмяПоказателя = БазоваяЧасть + "_" + СтрокаЧГ0(Инд);
					
				КонецЕсли;
				
				// пропускаем фантомные ячейки несуществующих многострочных частей
				Если ТабличныйДокумент.Области.Найти(ИмяПоказателя) = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				ТекОбластьЯчеек = ТабличныйДокумент.Области[ИмяПоказателя];
				Если (Не ПустаяСтрока(Комментарий)) ИЛИ (Не ПустаяСтрока(ТекОбластьЯчеек.Примечание.Текст)) Тогда
					ТекОбластьЯчеек.Примечание.Текст = Комментарий;
				КонецЕсли;
				
				Ключ = "_" + ВариантЗаполнения;
				мСтруктураЦветовРаскраски.Свойство(Ключ, ЦветФона);
				
				ЗначениеВКвадратах = ?(ПустаяСтрока(КодПоказателяПоСтруктуре), Ложь, Истина);
				
				Если ВариантЗаполнения = 4 Тогда
					
					Если ЗначениеВКвадратах Тогда
						// если ЗНАЧЕНИЕ КВАДРАТИЧНОЕ
						РегламентированнаяОтчетностьКлиентСервер.СвойстваГрупповыхЗначений(ЭтаФорма, ИмяПоказателя, "УстановитьЗащиту");
					Иначе
						ТабличныйДокумент.Области[ИмяПоказателя].Защита = Истина;
					КонецЕсли;
					
				ИначеЕсли ВариантЗаполнения = 5 Тогда
					
					Если ЗначениеВКвадратах Тогда
						// если ЗНАЧЕНИЕ КВАДРАТИЧНОЕ
						РегламентированнаяОтчетностьКлиентСервер.СвойстваГрупповыхЗначений(ЭтаФорма, ИмяПоказателя, "УстановитьЗащиту");
					Иначе
						ТабличныйДокумент.Области[ИмяПоказателя].Защита = Истина;
					КонецЕсли;
					
				Иначе
					
					Если ЗначениеВКвадратах Тогда
						// если ЗНАЧЕНИЕ КВАДРАТИЧНОЕ
						РегламентированнаяОтчетностьКлиентСервер.СвойстваГрупповыхЗначений(ЭтаФорма, ИмяПоказателя, "СнятьЗащиту");
					Иначе
						ТабличныйДокумент.Области[ИмяПоказателя].Защита = Ложь;
					КонецЕсли;
				КонецЕсли;
				
				Если ЗначениеВКвадратах Тогда
					РегламентированнаяОтчетностьКлиентСервер.СвойстваГрупповыхЗначений(ЭтаФорма, ИмяПоказателя, "ПроставитьЦветРаскраски", ЦветФона);
				Иначе
					ТабличныйДокумент.Области[ИмяПоказателя].ЦветФона = ЦветФона;
				КонецЕсли;
			КонецЦикла;
			
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьДополнительныхСтрок(ИмяОтчета)
	
	Если ИмяОтчета = "Баланс"
	 ИЛИ ИмяОтчета = "ФормаОтчета" Тогда
		
		ПолучитьДеревоНастроекСоставаДопСтрок(ИмяОтчета);
		
		Если ИмяОтчета = "Баланс" Тогда
			ДеревоНастроек = ДеревоНастроекБаланс;
		ИначеЕсли ИмяОтчета = "ФормаОтчета" Тогда
			ДеревоНастроек = ДеревоНастроекФормаОтчета;
		КонецЕсли;
		
		Для Каждого СтрокаОсновногоПоказателя Из ДеревоНастроек.Строки Цикл
			Если Не ПустаяСтрока(СтрокаОсновногоПоказателя.ИмяОбластиДопСтроки) Тогда
				ОбластьДополнительнойСтроки = ТабличныйДокумент.Области.Найти(
					СтрокаОсновногоПоказателя.ИмяОбластиДопСтроки);
				Если ОбластьДополнительнойСтроки <> Неопределено Тогда
					ОбластьДополнительнойСтроки.Видимость = СтрокаОсновногоПоказателя.ВключатьВОтчет;
				КонецЕсли;
				ОбластьДополнительнойСтроки = ТабличныйДокумент.Области.Найти(
					"ДобавлениеСтроки_" + СтрокаОсновногоПоказателя.ИмяОбластиДопСтроки);
				Если ОбластьДополнительнойСтроки <> Неопределено Тогда
					ОбластьДополнительнойСтроки.Видимость = СтрокаОсновногоПоказателя.ВключатьВОтчет;
				КонецЕсли;
			КонецЕсли;
			
			Для Каждого ДополнительнаяСтрока Из СтрокаОсновногоПоказателя.Строки Цикл
				Если Не ПустаяСтрока(ДополнительнаяСтрока.ИмяОбластиДопСтроки) Тогда
					ОбластьДополнительнойСтроки = ТабличныйДокумент.Области.Найти(
						ДополнительнаяСтрока.ИмяОбластиДопСтроки);
					Если ОбластьДополнительнойСтроки <> Неопределено Тогда
						ОбластьДополнительнойСтроки.Видимость = ДополнительнаяСтрока.ВключатьВОтчет;
					КонецЕсли;
					ОбластьДополнительнойСтроки = ТабличныйДокумент.Области.Найти(
						"ДобавлениеСтроки_" + ДополнительнаяСтрока.ИмяОбластиДопСтроки);
					Если ОбластьДополнительнойСтроки <> Неопределено Тогда
						ОбластьДополнительнойСтроки.Видимость = ДополнительнаяСтрока.ВключатьВОтчет;
					КонецЕсли;
				КонецЕсли;
				
				Для Каждого СтрокаУровня3 Из ДополнительнаяСтрока.Строки Цикл
					Если Не ПустаяСтрока(СтрокаУровня3.ИмяОбластиДопСтроки) Тогда
						ОбластьДополнительнойСтроки = ТабличныйДокумент.Области.Найти(
							СтрокаУровня3.ИмяОбластиДопСтроки);
						Если ОбластьДополнительнойСтроки <> Неопределено Тогда
							ОбластьДополнительнойСтроки.Видимость = СтрокаУровня3.ВключатьВОтчет;
						КонецЕсли;
						ОбластьДополнительнойСтроки = ТабличныйДокумент.Области.Найти(
							"ДобавлениеСтроки_" + СтрокаУровня3.ИмяОбластиДопСтроки);
						Если ОбластьДополнительнойСтроки <> Неопределено Тогда
							ОбластьДополнительнойСтроки.Видимость = СтрокаУровня3.ВключатьВОтчет;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
		
	КонецЕсли;
	
	Если ИмяОтчета = "ФормаОтчета" И ИспользуютсяМакетыЕНВД() Тогда
		
		ПолучитьДеревоНастроекСоставаДопСтрок(ИмяОтчета);
		ДеревоНастройкиСостава = ДеревоНастроекФормаОтчета;
		
		ТабличныйДокумент.Области.ВТомЧисле2110.Видимость
			= ВключенВОтчет(ДеревоНастройкиСостава, "ДопСтрока21101")
			ИЛИ ВключенВОтчет(ДеревоНастройкиСостава, "ДопСтрока21102");
		ТабличныйДокумент.Области.ВТомЧисле2120.Видимость
			= ВключенВОтчет(ДеревоНастройкиСостава, "ДопСтрока21201")
			ИЛИ ВключенВОтчет(ДеревоНастройкиСостава, "ДопСтрока21202");
		ТабличныйДокумент.Области.ВТомЧисле2210.Видимость
			= ВключенВОтчет(ДеревоНастройкиСостава, "ДопСтрока22101")
			ИЛИ ВключенВОтчет(ДеревоНастройкиСостава, "ДопСтрока22102");
		ТабличныйДокумент.Области.ВТомЧисле2220.Видимость
			= ВключенВОтчет(ДеревоНастройкиСостава, "ДопСтрока22201")
			ИЛИ ВключенВОтчет(ДеревоНастройкиСостава, "ДопСтрока22202");
		ТабличныйДокумент.Области.ВТомЧисле2100.Видимость
			= ВключенВОтчет(ДеревоНастройкиСостава, "ДопСтрока21001")
			ИЛИ ВключенВОтчет(ДеревоНастройкиСостава, "ДопСтрока21002");
		ТабличныйДокумент.Области.ВТомЧисле2200.Видимость
			= ВключенВОтчет(ДеревоНастройкиСостава, "ДопСтрока22001")
			ИЛИ ВключенВОтчет(ДеревоНастройкиСостава, "ДопСтрока22002");
		ТабличныйДокумент.Области.ВТомЧисле2300.Видимость
			= ВключенВОтчет(ДеревоНастройкиСостава, "ДопСтрока23001")
			ИЛИ ВключенВОтчет(ДеревоНастройкиСостава, "ДопСтрока23002");
		
		ТабличныйДокумент.Области.ДобавлениеСтроки_ДопСтрока21101.Видимость
			= ВключенВОтчет(ДеревоНастройкиСостава, "ДопСтрока21101")
			ИЛИ ВключенВОтчет(ДеревоНастройкиСостава, "ДопСтрока21102");
		ТабличныйДокумент.Области.ДобавлениеСтроки_ДопСтрока21201.Видимость
			= ВключенВОтчет(ДеревоНастройкиСостава, "ДопСтрока21201")
			ИЛИ ВключенВОтчет(ДеревоНастройкиСостава, "ДопСтрока21202");
		ТабличныйДокумент.Области.ДобавлениеСтроки_ДопСтрока22101.Видимость
			= ВключенВОтчет(ДеревоНастройкиСостава, "ДопСтрока22101")
			ИЛИ ВключенВОтчет(ДеревоНастройкиСостава, "ДопСтрока22102");
		ТабличныйДокумент.Области.ДобавлениеСтроки_ДопСтрока22201.Видимость
			= ВключенВОтчет(ДеревоНастройкиСостава, "ДопСтрока22201")
			ИЛИ ВключенВОтчет(ДеревоНастройкиСостава, "ДопСтрока22202");
		ТабличныйДокумент.Области.ДобавлениеСтроки_ДопСтрока21001.Видимость
			= ВключенВОтчет(ДеревоНастройкиСостава, "ДопСтрока21001")
			ИЛИ ВключенВОтчет(ДеревоНастройкиСостава, "ДопСтрока21002");
		ТабличныйДокумент.Области.ДобавлениеСтроки_ДопСтрока22001.Видимость
			= ВключенВОтчет(ДеревоНастройкиСостава, "ДопСтрока22001")
			ИЛИ ВключенВОтчет(ДеревоНастройкиСостава, "ДопСтрока22002");
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ИспользуютсяМакетыЕНВД() Экспорт
	
	Перем СохраненноеПрименениеЕНВД;
	
	// Инициализируем признак применения организацией ЕНВД, если эти сведения сохранены в информационной базе.
	Если СтруктураРеквизитовФормы.ПрименениеЕНВД = Неопределено И СтруктураРеквизитовФормы.мСохраненныйДок <> Неопределено Тогда
		СписокСохранения = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить();
		Если СписокСохранения.Свойство("ПрименениеЕНВД", СохраненноеПрименениеЕНВД) Тогда
			СтруктураРеквизитовФормы.ПрименениеЕНВД = СохраненноеПрименениеЕНВД;
		КонецЕсли;
	КонецЕсли;
	
	// Если признак не был сохранен, то определяем его на основании учетной политики организации.
	Если СтруктураРеквизитовФормы.ПрименениеЕНВД = Неопределено Тогда
		СтруктураРеквизитовФормы.ПрименениеЕНВД = (ОрганизацияПрименяетЕНВД(СтруктураРеквизитовФормы.Организация, СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета)
	                 ИЛИ ОрганизацияПрименяетЕНВД(СтруктураРеквизитовФормы.Организация, ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, -12)));
	КонецЕсли;
	
	Возврат СтруктураРеквизитовФормы.ПрименениеЕНВД;
	
КонецФункции

&НаСервере
Процедура ИнициализироватьОписанияМногострочныхПоXML(ТекстXML);
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(ТекстXML);
	ПостроительDOM = Новый ПостроительDOM;
	
	КорневойУзел = ПостроительDOM.Прочитать(ЧтениеXML);
	
	Для Каждого Узел Из КорневойУзел.ДочерниеУзлы Цикл
		
		Если Узел.ИмяУзла <> "МногострочныеЧасти" Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого УзелМногострочныхЧастей Из Узел.ДочерниеУзлы Цикл
			ИмяРазделаМногострочныхЧастей = ПолучитьАтрибутКакСтроку(УзелМногострочныхЧастей, "ИмяРаздела");
			Если ИспользоватьОписаниеМногострочнойЧасти(ИмяРазделаМногострочныхЧастей) Тогда
				ВнестиОписаниеМногострочныхЧастейРаздела(УзелМногострочныхЧастей);
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПрименяетсяПБУ18НаКонецПериода(ДатаОпределения)
	
	ЕстьОрганизацияПрименяющаяПБУ18 = Ложь;
	
	СписокОрганизаций = Новый СписокЗначений;
	СписокОрганизаций.Добавить(СтруктураРеквизитовФормы.Организация);
	
	Для Каждого ЭлементСпискаОрганизаций Из СписокОрганизаций Цикл
		ПроверяемаяОрганизация = ЭлементСпискаОрганизаций.Значение;
		Если ОрганизацияПрименяетПБУ18(ПроверяемаяОрганизация, ДатаОпределения) Тогда
			ЕстьОрганизацияПрименяющаяПБУ18 = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ЕстьОрганизацияПрименяющаяПБУ18;
	
КонецФункции

&НаСервере
Процедура ИнициализироватьСвойстваПечатиРазделовОтчета()
	
	ЭтоОтчетностьЗаКвартал = (КонецМесяца(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета)
	                       = КонецКвартала(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета));
	ПоказыватьЗаКвартал = ?(ЭтоОтчетностьЗаКвартал, 1, 0);
	ПоказыватьЗаМесяц   = ?(ЭтоОтчетностьЗаКвартал, 0, 1);
	
	мДеревоСтраницОтчета.ПолучитьЭлементы().Очистить();
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Баланс";
	СтрокаУровня1.Представление            = "Бухгалтерский баланс";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = ПоказыватьЗаКвартал;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	СтрокаУровня1.АвторасчетПоказателей    = Истина;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "ФормаОтчета";
	СтрокаУровня1.Представление            = "Отчет о прибылях и убытках";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = ПоказыватьЗаКвартал;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	СтрокаУровня1.АвторасчетПоказателей    = Истина;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "ОИК";
	СтрокаУровня1.Представление            = "Отчет об изменениях капитала";
	СтрокаУровня1.ОриентацияСтраницы       = "Ландшафт";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = ПоказыватьЗаКвартал;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	СтрокаУровня1.АвторасчетПоказателей    = Истина;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "ОДДС";
	СтрокаУровня1.Представление            = "Отчет о движении денежных средств";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = ПоказыватьЗаКвартал;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	СтрокаУровня1.АвторасчетПоказателей    = Истина;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "ДополнительныеПоказатели";
	СтрокаУровня1.Представление            = "Дополнительные показатели";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = ПоказыватьЗаКвартал;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	СтрокаУровня1.АвторасчетПоказателей    = Истина;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "РасшифровкиОбеспечений";
	СтрокаУровня1.Представление            = "Расшифровки обеспечений";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = ПоказыватьЗаКвартал;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	СтрокаУровня1.АвторасчетПоказателей    = Истина;
	
	СтрокаУровня2 = СтрокаУровня1.ПолучитьЭлементы().Добавить();
	СтрокаУровня2.ИмяСтраницы              = "ОСВ_008";
	СтрокаУровня2.Представление            = "Полученные";
	СтрокаУровня2.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня2.ВыводНаПечать            = 1;
	СтрокаУровня2.ПоказатьСтраницу         = ПоказыватьЗаКвартал;
	СтрокаУровня2.ВыгрузитьСтраницу        = 2;
	СтрокаУровня2.АвторасчетПоказателей    = Истина;
	
	СтрокаУровня2 = СтрокаУровня1.ПолучитьЭлементы().Добавить();
	СтрокаУровня2.ИмяСтраницы              = "ОСВ_009";
	СтрокаУровня2.Представление            = "Выданные";
	СтрокаУровня2.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня2.ВыводНаПечать            = 1;
	СтрокаУровня2.ПоказатьСтраницу         = ПоказыватьЗаКвартал;
	СтрокаУровня2.ВыгрузитьСтраницу        = 2;
	СтрокаУровня2.АвторасчетПоказателей    = Истина;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "ЗадолженностьПоКредитамЗаймам";
	СтрокаУровня1.Представление            = "Задолженность по кредитам и займам";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = ПоказыватьЗаМесяц;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	СтрокаУровня1.АвторасчетПоказателей    = Истина;
	
	СтрокаУровня2 = СтрокаУровня1.ПолучитьЭлементы().Добавить();
	СтрокаУровня2.ИмяСтраницы              = "ОСВ_66";
	СтрокаУровня2.Представление            = "Краткосрочная";
	СтрокаУровня2.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня2.ВыводНаПечать            = 1;
	СтрокаУровня2.ПоказатьСтраницу         = ПоказыватьЗаМесяц;
	СтрокаУровня2.ВыгрузитьСтраницу        = 2;
	СтрокаУровня2.АвторасчетПоказателей    = Истина;
	
	СтрокаУровня2 = СтрокаУровня1.ПолучитьЭлементы().Добавить();
	СтрокаУровня2.ИмяСтраницы              = "ОСВ_67";
	СтрокаУровня2.Представление            = "Долгосрочная";
	СтрокаУровня2.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня2.ВыводНаПечать            = 1;
	СтрокаУровня2.ПоказатьСтраницу         = ПоказыватьЗаМесяц;
	СтрокаУровня2.ВыгрузитьСтраницу        = 2;
	СтрокаУровня2.АвторасчетПоказателей    = Истина;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "ЛизингОбязательства";
	СтрокаУровня1.Представление            = "Расходы по лизингу";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = ПоказыватьЗаКвартал;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	СтрокаУровня1.АвторасчетПоказателей    = Истина;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "ДенежныеСредства";
	СтрокаУровня1.Представление            = "Денежные средства";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = ПоказыватьЗаМесяц;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	СтрокаУровня1.АвторасчетПоказателей    = Истина;
	
	СтрокаУровня2 = СтрокаУровня1.ПолучитьЭлементы().Добавить();
	СтрокаУровня2.ИмяСтраницы              = "Анализ_50";
	СтрокаУровня2.Представление            = "Касса (счет 50)";
	СтрокаУровня2.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня2.ВыводНаПечать            = 1;
	СтрокаУровня2.ПоказатьСтраницу         = ПоказыватьЗаМесяц;
	СтрокаУровня2.ВыгрузитьСтраницу        = 2;
	СтрокаУровня2.АвторасчетПоказателей    = Истина;
	
	СтрокаУровня2 = СтрокаУровня1.ПолучитьЭлементы().Добавить();
	СтрокаУровня2.ИмяСтраницы              = "Анализ_51";
	СтрокаУровня2.Представление            = "Расчетные счета (счет 51)";
	СтрокаУровня2.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня2.ВыводНаПечать            = 1;
	СтрокаУровня2.ПоказатьСтраницу         = 1;
	СтрокаУровня2.ВыгрузитьСтраницу        = 2;
	СтрокаУровня2.АвторасчетПоказателей    = Истина;
	
	СтрокаУровня2 = СтрокаУровня1.ПолучитьЭлементы().Добавить();
	СтрокаУровня2.ИмяСтраницы              = "Анализ_52";
	СтрокаУровня2.Представление            = "Валютные счета (счет 52)";
	СтрокаУровня2.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня2.ВыводНаПечать            = 1;
	СтрокаУровня2.ПоказатьСтраницу         = ПоказыватьЗаМесяц;
	СтрокаУровня2.ВыгрузитьСтраницу        = 2;
	СтрокаУровня2.АвторасчетПоказателей    = Истина;
	
	СтрокаУровня2 = СтрокаУровня1.ПолучитьЭлементы().Добавить();
	СтрокаУровня2.ИмяСтраницы              = "Анализ_55";
	СтрокаУровня2.Представление            = "Специальные счета в банках (счет 55)";
	СтрокаУровня2.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня2.ВыводНаПечать            = 1;
	СтрокаУровня2.ПоказатьСтраницу         = ПоказыватьЗаМесяц;
	СтрокаУровня2.ВыгрузитьСтраницу        = 2;
	СтрокаУровня2.АвторасчетПоказателей    = Истина;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидСдачиОтчетности(КодВидаСдачиОтчетности = 1)

	Если КодВидаСдачиОтчетности <> Неопределено Тогда
		Если НЕ (КодВидаСдачиОтчетности = 2 ИЛИ КодВидаСдачиОтчетности = 3) Тогда
			КодВидаСдачиОтчетности = 1;
		КонецЕсли;
	Иначе
		КодВидаСдачиОтчетности = 1;
	КонецЕсли;
	
	ВидСдачиОтчетности = КодВидаСдачиОтчетности;
	
	Если ВидСдачиОтчетности = 1 Тогда
		ПолеВыбораВидСдачиОтчетности = "Обычная";
	ИначеЕсли ВидСдачиОтчетности = 2 Тогда
		ПолеВыбораВидСдачиОтчетности = "Промежуточная при ликвидации/реорганизации";
	ИначеЕсли ВидСдачиОтчетности = 3 Тогда	
	    ПолеВыбораВидСдачиОтчетности = "Ликвидационная";
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьПолейПоПБУ18()
	
	ПрименяетсяПБУ18ВОтчетномПериоде = ПрименяетсяПБУ18НаКонецПериода(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	ПрименяетсяПБУ18ВПредыдущемГоду  = ПрименяетсяПБУ18НаКонецПериода(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, -12));
	
	СкрыватьСтрокиРасшифровкиПоПБУ18 = (НЕ (ПрименяетсяПБУ18ВОтчетномПериоде ИЛИ ПрименяетсяПБУ18ВПредыдущемГоду));
	Если СкрыватьСтрокиРасшифровкиПоПБУ18
	   И СтруктураРеквизитовФормы.НаимТекущегоРаздела = "ФормаОтчета" Тогда
		ТабличныйДокумент.Области.ВТомЧисле2421.Видимость = Ложь;
		ТабличныйДокумент.Области.ДопСтрока2421.Видимость = Ложь;
		
		ТабличныйДокумент.Области.ВТомЧисле2430.Видимость = Ложь;
		ТабличныйДокумент.Области.ДопСтрока2430.Видимость = Ложь;
		
		ТабличныйДокумент.Области.ВТомЧисле2450.Видимость = Ложь;
		ТабличныйДокумент.Области.ДопСтрока2450.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИзвлечьИсходнуюСтруктуруНастроек(Знач МакетНастроек, ИмяСекции, ДеревоНастроек)

	Если ТипЗнч(МакетНастроек) = Тип("Строка") Тогда
		МакетНастроек = Отчеты[Сред(Лев(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, ".Форма.") - 1), 7)].ПолучитьМакет(МакетНастроек);
	КонецЕсли;
		
	Если ПустаяСтрока(ИмяСекции) Тогда
		
		ДеревоНастроек.Очистить();
		
		Возврат;
		
	КонецЕсли;
	
	ПерваяСтрокаМакетаСостава = МакетНастроек.Области[ИмяСекции].Верх;
	ВысотаМакетаСостава = МакетНастроек.Области[ИмяСекции].Низ;
	
	УчтенныеГруппы = Новый Соответствие;
	
	Для Уровень = 0 По МакетНастроек.КоличествоУровнейГруппировокСтрок() - 1 Цикл
		МакетНастроек.ПоказатьУровеньГруппировокСтрок(Уровень);
		Для НомерСтроки = ПерваяСтрокаМакетаСостава По ВысотаМакетаСостава Цикл
			НомСтр = ВысотаМакетаСостава - (НомерСтроки - ПерваяСтрокаМакетаСостава);
			Если МакетНастроек.Область(НомСтр, 1, НомСтр, 1).Видимость И УчтенныеГруппы.Получить(НомСтр) = Неопределено Тогда
				
				РодительскийУзел = ДеревоНастроек;
				Если Уровень <> 0 Тогда
					Для Инд = 1 По НомСтр - 1 Цикл
						Узел = УчтенныеГруппы.Получить(НомСтр - Инд);
						Если Узел <> Неопределено Тогда
							РодительскийУзел = Узел;
							Прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				НовСтр = РодительскийУзел.Строки.Вставить(0);
				НовСтр.Наименование = СокрЛП(МакетНастроек.Область(НомСтр, 1).Текст);
				НовСтр.Код = СокрЛП(МакетНастроек.Область(НомСтр, 2).Текст);
				НовСтр.ВключатьВОтчет = НЕ ПустаяСтрока(МакетНастроек.Область(НомСтр, 3).Текст);
				НовСтр.Существенность = СокрЛП(МакетНастроек.Область(НомСтр, 4).Текст);
				НовСтр.ИмяОбластиДопСтроки = СокрЛП(МакетНастроек.Область(НомСтр, 5).Текст);
				НовСтр.ТипСостава = СокрЛП(МакетНастроек.Область(НомСтр, 6).Текст);
				НовСтр.МаксимальноеКоличество = СокрЛП(МакетНастроек.Область(НомСтр, 7).Текст);
				
				НовСтр.ДостДляРедактирования_Существенность = ЗначениеЗаполнено(НовСтр.Существенность);
				НовСтр.ДостДляРедактирования_МаксимальноеКоличество = ЗначениеЗаполнено(НовСтр.МаксимальноеКоличество);
				
				УчтенныеГруппы.Вставить(НомСтр, НовСтр);
				
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
		
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СобратьДанныеТекущегоТаблПоля(Форма, ТабличноеПоле) Экспорт
	
	СтруктураДанныхПоля = Новый Структура;
	
	ТабличноеПоле = Форма[ТабличноеПоле];
	
	Для Инд = 0 По ТабличноеПоле.Области.Количество() - 1 Цикл
		ТекущаяОбласть = ТабличноеПоле.Области[Инд];
		
		Если Не ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТекущаяОбласть.СодержитЗначение <> Истина Тогда
			Продолжить;
		КонецЕсли;
		
		ИмяПоказателя      = ТекущаяОбласть.Имя;
		ЗначениеПоказателя = ТекущаяОбласть.Значение;
		СтруктураДанныхПоля.Вставить(ИмяПоказателя, ЗначениеПоказателя);
		
	КонецЦикла;
	
	Возврат СтруктураДанныхПоля;
	
КонецФункции

&НаСервере
Функция ОрганизацияПрименяетЕНВД(Организация, ДатаОпределения)
	
	Возврат РегламентированнаяОтчетностьПереопределяемый.ПлательщикЕНВД(Организация, ДатаОпределения);
	
КонецФункции

&НаСервере
Функция ПолучитьАтрибутКакСтроку(Узел, ИмяАтрибута)
	
	Атрибут = Узел.Атрибуты.ПолучитьИменованныйЭлемент(ИмяАтрибута);
	
	Если Атрибут = Неопределено Тогда
		Значение = "";
	Иначе
		Значение = Атрибут.Значение;
	КонецЕсли;
	
	Возврат Значение;
	
КонецФункции

&НаСервере
Функция ИспользоватьОписаниеМногострочнойЧасти(ИмяОписанияМногострочныхЧастей)
	
	Результат = Ложь;
	
	Для Каждого Отчет Из СтруктураОтчета Цикл
		Если Отчет.Значение.ИмяОписанияМногострочныхЧастей = ИмяОписанияМногострочныхЧастей Тогда
			Результат = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ВнестиОписаниеМногострочныхЧастейРаздела(УзелРаздела)
	
	ОписаниеТиповЧисло  = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2));
	ОписаниеТиповСтрока = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(254));
	
	ИмяПоляТабличногоДокумента = СтрЗаменить(УзелРаздела.Атрибуты.ПолучитьИменованныйЭлемент("РасположениеРаздела").Значение, "ПолеТабличногоДокумента", "");
	
	ПолучитьСтруктуруМногострочныхЧастей();
	
	Если СтруктураМногострочныхЧастей = Неопределено Тогда
		СтруктураМногострочныхЧастей = Новый Структура;
	КонецЕсли;
	
	Для Каждого Узел Из УзелРаздела.ДочерниеУзлы Цикл
		
		Если Узел.ИмяУзла <> "МногострочнаяЧасть" Тогда
			Продолжить;
		КонецЕсли;
		
		ИдентификаторМногострочнойЧасти = ПолучитьАтрибутКакСтроку(Узел, "Идентификатор");
		МинимальноеКоличествоСтрок  = ПолучитьАтрибутКакЧисло(Узел, "МинимальноеКоличествоСтрок");
		МаксимальноеКоличествоСтрок = ПолучитьАтрибутКакЧисло(Узел, "МаксимальноеКоличествоСтрок");
		ВерхнийЭлементСтроки = ПолучитьАтрибутКакСтроку(Узел, "ВерхнийЭлементСтроки");
		НижнийЭлементСтроки  = ПолучитьАтрибутКакСтроку(Узел, "НижнийЭлементСтроки");
		
		СтруктураМногострочнойЧасти = Новый Структура;
		СтруктураМногострочнойЧасти.Вставить("Масштаб", Новый Структура("МинимальноеКоличествоСтрок, МаксимальноеКоличествоСтрок", МинимальноеКоличествоСтрок, МаксимальноеКоличествоСтрок));
		СтруктураМногострочнойЧасти.Вставить("Габариты", Новый Структура("ВерхнийЭлементСтроки, НижнийЭлементСтроки", ВерхнийЭлементСтроки, НижнийЭлементСтроки));
		СтруктураМногострочнойЧасти.Вставить("ИмяПоляТабличногоДокумента", ИмяПоляТабличногоДокумента);
		
		Для Каждого ДочернийУзел Из Узел.ДочерниеУзлы Цикл
			
			Если ДочернийУзел.ИмяУзла = "Кодификаторы" Тогда
				ВнестиОписаниеКодификаторовМногострочнойЧасти(ДочернийУзел, СтруктураМногострочнойЧасти);
				
			ИначеЕсли ДочернийУзел.ИмяУзла = "Заголовки" Тогда
				ВнестиОписаниеЗаголовковМногострочнойЧасти(ДочернийУзел, СтруктураМногострочнойЧасти);
				
			ИначеЕсли ДочернийУзел.ИмяУзла = "Состав" Тогда
				ВнестиОписаниеСоставаМногострочнойЧасти(ДочернийУзел, СтруктураМногострочнойЧасти);
				
			КонецЕсли;
			
		КонецЦикла;
		
		СтруктураМногострочныхЧастей.Вставить(ИдентификаторМногострочнойЧасти, СтруктураМногострочнойЧасти);
		
	КонецЦикла;
	
	СтруктураРеквизитовФормы.АдресВоВремХранилищеСтруктураМногострочныхЧастей
		= ПоместитьВоВременноеХранилище(СтруктураМногострочныхЧастей, УникальныйИдентификатор);
	
КонецПроцедуры

&НаСервере
Функция ОрганизацияПрименяетПБУ18(Организация, ДатаОпределения)
	
	// При применении УСН ПБУ 18 применяться не может.
	// Однако возможна ситуация, когда в регистре учетной политики установлен признак
	// применения ПБУ 18 при системе налогообложения УСН.
				
	ОрганизацияПерешлаНаУСН   = (РегламентированнаяОтчетностьПереопределяемый.СистемаНалогообложения(Организация, ДатаОпределения) = "Упрощенная");
	ОрганизацияПрименяетПБУ18 = РегламентированнаяОтчетностьПереопределяемый.ПрименяетсяПБУ18(Организация, ДатаОпределения);
		
	Возврат (НЕ ОрганизацияПерешлаНаУСН И ОрганизацияПрименяетПБУ18);
	
КонецФункции

&НаСервере
Функция ПолучитьАтрибутКакЧисло(Узел, ИмяАтрибута)
	
	Атрибут = Узел.Атрибуты.ПолучитьИменованныйЭлемент(ИмяАтрибута);
	
	Если Атрибут = Неопределено Тогда
		Значение = 0;
	Иначе
		Значение = Число(Атрибут.Значение);
	КонецЕсли;
	
	Возврат Значение;
	
КонецФункции

&НаСервере
Процедура ВнестиОписаниеКодификаторовМногострочнойЧасти(Узел, СтруктураМногострочнойЧасти)
	
	МассивКодификаторов = Новый Массив;
	
	Для Каждого ДочернийУзел Из Узел.ДочерниеУзлы Цикл
		Если ДочернийУзел.ИмяУзла <> "Кодификатор" Тогда
			Продолжить;
		КонецЕсли;
		
		ОбластьКода = ПолучитьАтрибутКакСтроку(ДочернийУзел, "ОбластьКода");
		НачальныйКод = ПолучитьАтрибутКакЧисло(ДочернийУзел, "НачальныйКод");
		
		МассивКодификаторов.Добавить(Новый Структура("Область, Код", ОбластьКода, НачальныйКод));
		
	КонецЦикла;
	
	Если МассивКодификаторов.Количество() > 0 Тогда
		СтруктураМногострочнойЧасти.Вставить("Кодификаторы", МассивКодификаторов);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВнестиОписаниеЗаголовковМногострочнойЧасти(Узел, СтруктураМногострочнойЧасти)
	
	МассивЗаголовков = Новый Массив;
	
	Для Каждого ДочернийУзел Из Узел.ДочерниеУзлы Цикл
		Если ДочернийУзел.ИмяУзла <> "Заголовок" Тогда
			Продолжить;
		КонецЕсли;
		
		ОбластьЗаголовка = ПолучитьАтрибутКакСтроку(ДочернийУзел, "ОбластьЗаголовка");
		ШаблонЗаголовка = ПолучитьАтрибутКакСтроку(ДочернийУзел, "ШаблонЗаголовка");
		
		МассивЗаголовков.Добавить(Новый Структура("Область, Заголовок", ОбластьЗаголовка, ШаблонЗаголовка));
		
	КонецЦикла;
	
	Если МассивЗаголовков.Количество() > 0 Тогда
		СтруктураМногострочнойЧасти.Вставить("Заголовки", МассивЗаголовков);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВнестиОписаниеСоставаМногострочнойЧасти(Узел, СтруктураМногострочнойЧасти)
		
	ТаблицаСостава = Новый Массив;
	СтруктураСостава = Новый Структура;
	
	Для Каждого ДочернийУзел Из Узел.ДочерниеУзлы Цикл
		
		Если ДочернийУзел.ИмяУзла <> "ЭлементСтроки" Тогда
			Продолжить;
		КонецЕсли;
		
		Область = ПолучитьАтрибутКакСтроку(ДочернийУзел, "Область");
		
		СтруктураСостава.Вставить(Область);
		
	КонецЦикла;
	
	НачальноеКоличествоСтрок = СтруктураМногострочнойЧасти.Масштаб.МинимальноеКоличествоСтрок;
	Для Инд = 1 По НачальноеКоличествоСтрок Цикл
		ТаблицаСостава.Добавить(СтруктураСостава);
	КонецЦикла;
	
	СтруктураМногострочнойЧасти.Вставить("Состав", ТаблицаСостава);
	
КонецПроцедуры

&НаСервере
Процедура ПоказатьКодЕИ()

	Если ТабличныйДокумент.Области.Найти("КодЕИ") = Неопределено
	 ИЛИ ТабличныйДокумент.Области.Найти("НазвЕИ") = Неопределено Тогда
		Возврат;
	КонецЕсли;
		
	Если СтруктураРеквизитовФормы.ЕдиницаИзмерения = ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1 Тогда
		ТабличныйДокумент.Области.КодЕИ.Значение = "383";
		ТабличныйДокумент.Области.НазвЕИ.Значение = "в рублях";
	ИначеЕсли СтруктураРеквизитовФормы.ЕдиницаИзмерения = ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1000 Тогда
		ТабличныйДокумент.Области.КодЕИ.Значение = "384";
		ТабличныйДокумент.Области.НазвЕИ.Значение = "в тыс. рублей";
	ИначеЕсли СтруктураРеквизитовФормы.ЕдиницаИзмерения = ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1000000 Тогда
		ТабличныйДокумент.Области.КодЕИ.Значение = "385";
		ТабличныйДокумент.Области.НазвЕИ.Значение = "в млн. рублей";
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьФорматВыводаМногострочногоПоказателя(ПолеТабличногоДокумента, ИмяПоказателяБезСчетчика)
	
	ИдентификаторМногострочнойЧасти = СтруктураРеквизитовФормы.СоответствиеПоказателейМногострочныхЧастейИхОписанию[ИмяПоказателяБезСчетчика];
	ПолучитьСтруктуруМногострочныхЧастей();
	СтруктураМногострочнойЧасти = СтруктураМногострочныхЧастей[ИдентификаторМногострочнойЧасти];
	КоличествоСтрокВМногострочнойЧасти = СтруктураМногострочнойЧасти.Состав.Количество();
	
	Для Инд = 1 По КоличествоСтрокВМногострочнойЧасти Цикл
		ИмяОбласти = ИмяПоказателяБезСчетчика + "_" + СтрокаЧГ0(Инд);
		Область = ПолеТабличногоДокумента.Области[ИмяОбласти];
		Область.Формат = СтруктураРеквизитовФормы.мСтрокаФормата;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПоказательВходитВМногострочнуюЧасть(ИмяПоказателя)
	
	// Поиск показателя в множестве альтернативных описаний многострочных частей.
	ИмяСтруктурыМногострочнойЧасти
		= СтруктураРеквизитовФормы.СоответствиеПоказателейМногострочныхЧастейИхОписанию[ИмяПоказателя];
	Если ИмяСтруктурыМногострочнойЧасти <> Неопределено Тогда
		ПолучитьСтруктуруМногострочныхЧастей();
		СтруктураМногострочнойЧасти = СтруктураМногострочныхЧастей[ИмяСтруктурыМногострочнойЧасти];
		КоличествоСтрокМногострочнойЧасти = СтруктураМногострочнойЧасти.Состав.Количество();
		Возврат КоличествоСтрокМногострочнойЧасти;
	КонецЕсли;
	
	Возврат 0;
	
КонецФункции

&НаСервере
Функция ВключенВОтчет(ДеревоНастроекСтрокРасшифровки, ИмяОбластиДопСтроки)
	
	НайденныеВетвиНастройки = ДеревоНастроекСтрокРасшифровки.Строки.НайтиСтроки(Новый Структура("ИмяОбластиДопСтроки", ИмяОбластиДопСтроки), Истина);
	
	Если НайденныеВетвиНастройки.Количество() = 0 Тогда
		// Настройка не обнаружена. Считаем, что допстрока должна входить в отчет.
		Возврат Истина;
	Иначе
		Возврат НайденныеВетвиНастройки[0].ВключатьВОтчет;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ВыполнитьПроверкуПередОткрытием()
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПриОткрытииЗавершение", ЭтотОбъект);
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередОткрытиемФормыРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытииЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Модифицированность = Ложь;
		Закрыть();
		Возврат;	
	КонецЕсли;

	ОткрытьУведомление();
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьСтрокиЗавершение(РезультатНастройки, ДополнительныеПараметры) Экспорт
	
	Если РезультатНастройки <> Неопределено Тогда
		Модифицированность = Истина;
		СоставДополнительныхСтрок.Модифицированность = Истина;
	КонецЕсли;
	
	УстановитьВидимостьДопСтрокПеренумероватьСтрокиРасшифровкиНаСервере(РезультатНастройки);
	
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "ФормаОтчета" Тогда
		РасчетНаКлиенте(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	КонецЕсли;
	
	ТекстОбластиТаблДок = ТабличныйДокумент.Область().Текст;
	
КонецПроцедуры

&НаСервере
Процедура ПеренумероватьСтрокиРасшифровкиБаланса()
	
	ПолучитьДеревоНастроекСоставаДопСтрок("Баланс");
	
	ДеревоНастроек = ДеревоНастроекБаланс;
	
	ДлинаПрефиксаИмениДопстроки = СтрДлина("ДопСтрока");
	
	Для Каждого СтрокаДерева1Уровня Из ДеревоНастроек.Строки Цикл
		Если СтрокаДерева1Уровня.Строки.Количество() > 0 Тогда
			ИмяОбластиДопСтрокиПервогоЭлемента = СтрокаДерева1Уровня.Строки[0].ИмяОбластиДопСтроки;
			НомерДопСтрокиПервогоЭлемента = Сред(ИмяОбластиДопСтрокиПервогоЭлемента, ДлинаПрефиксаИмениДопстроки + 1);
			НомерСтроки = Число(НомерДопСтрокиПервогоЭлемента);
			
			Если СтруктураРеквизитовФормы.ЭтоБалансНекоммерческойОрганизации И НомерСтроки = 15302 Тогда
				НомерСтроки = 15301;
			КонецЕсли;
			
			Для Каждого Строка2Уровня Из СтрокаДерева1Уровня.Строки Цикл
				Если ЗначениеЗаполнено(Строка2Уровня.ВключатьВОтчет) Тогда
					ИмяОбластиДопСтроки = Строка2Уровня.ИмяОбластиДопСтроки;
					НомерДопСтроки = Сред(ИмяОбластиДопСтроки, ДлинаПрефиксаИмениДопстроки + 1);
					ИмяОбластиНомера = "П00010" + НомерДопСтроки + "03";
					
					КодСтроки = Формат(НомерСтроки, "ЧГ=0");
					
					Если НЕ ТабличныйДокумент.Области.Найти(ИмяОбластиНомера) = Неопределено Тогда
						ОбластьНомера = ТабличныйДокумент.Области[ИмяОбластиНомера];
						ОбластьНомера.Текст = КодСтроки;
						НомерСтроки = НомерСтроки + 1;
					КонецЕсли;
					
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПеренумероватьСтрокиРасшифровкиОПУ()
	
	ПолучитьДеревоНастроекСоставаДопСтрок("ФормаОтчета");
	
	ДеревоНастроек = ДеревоНастроекФормаОтчета;
	
	ДлинаПрефиксаИмениДопстроки = СтрДлина("ДопСтрока");
	
	Для Каждого СтрокаДерева1Уровня Из ДеревоНастроек.Строки Цикл
		Если СтрокаДерева1Уровня.Строки.Количество() > 0 Тогда
			ИмяОбластиДопСтрокиПервогоЭлемента = СтрокаДерева1Уровня.Строки[0].ИмяОбластиДопСтроки;
			Если НЕ ПустаяСтрока(ИмяОбластиДопСтрокиПервогоЭлемента) Тогда
				НомерДопСтрокиПервогоЭлемента = Сред(ИмяОбластиДопСтрокиПервогоЭлемента, ДлинаПрефиксаИмениДопстроки + 1);
				НомерСтроки = Число(НомерДопСтрокиПервогоЭлемента);
				Для Каждого Строка2Уровня Из СтрокаДерева1Уровня.Строки Цикл
					Если Строка2Уровня.ВключатьВОтчет Тогда
						ИмяОбластиДопСтроки = Строка2Уровня.ИмяОбластиДопСтроки;
						НомерДопСтроки = Сред(ИмяОбластиДопСтроки, ДлинаПрефиксаИмениДопстроки + 1);
						ИмяОбластиНомера = "П00010" + НомерДопСтроки + "03";
						
						КодСтроки = Формат(НомерСтроки, "ЧГ=0");
						
						ОбластьНомера = ТабличныйДокумент.Области[ИмяОбластиНомера];
						ОбластьНомера.Текст = КодСтроки;
						
						НомерСтроки = НомерСтроки + 1;
						
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтрокуЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	ИмяПоказателя = ДополнительныеПараметры.ИмяПоказателя;
	ИмяПоказателя = СтрЗаменить(ИмяПоказателя, "УдалитьСтроку", "");
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "ОСВ_66"
	 ИЛИ СтруктураРеквизитовФормы.НаимТекущегоРаздела = "ОСВ_67" Тогда
		УдалитьДопСтрокуНаСервере();
	Иначе
		УдалитьДополнительнуюСтроку(ИмяПоказателя);
	КонецЕсли;
	
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "ОИК"
	 ИЛИ СтруктураРеквизитовФормы.НаимТекущегоРаздела = "ОДДС" Тогда
		РасчетНаКлиенте(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВставитьДополнительнуюСтроку()
	
	ТекущаяОбласть = Элементы.ТабличныйДокумент.ТекущаяОбласть;
	ИмяОбласти = ТекущаяОбласть.Имя;
	
	Если СтрНайти(ИмяОбласти, "ДобавитьСтроку") = 1 Тогда
		ИмяПоказателя = СтрЗаменить(ИмяОбласти, "ДобавитьСтрокуЗначок_", "");
		ИмяПоказателя = СтрЗаменить(ИмяПоказателя, "ДобавитьСтроку_", "");
		
	Иначе
		ИмяПоказателя = ИмяПоказателяБезСчетчика(ТекущаяОбласть.Имя);
		
	КонецЕсли;
	
	Если СтрНайти(ИмяПоказателя, "П00007М") <> 0
	 ИЛИ СтрНайти(ИмяПоказателя, "П00008М") <> 0 Тогда
		ВставитьДревовиднуюДополнительнуюСтроку();
	Иначе
		ВставитьДополнительнуюСтрокуПоСистемеБухОтчетности(ИмяПоказателя);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВставитьДополнительнуюСтрокуПоСистемеБухОтчетности(ИмяПоказателя)
	
	// Идентификатор многострочной части должен совпадать с именем области многострочной части в таблице.
	ИдентификаторМногострочнойЧасти = СтруктураРеквизитовФормы.СоответствиеПоказателейМногострочныхЧастейИхОписанию[ИмяПоказателя];
	
	Попытка
		
		Если ИдентификаторМногострочнойЧасти = "ДопСтрока3400" Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='Не выбран многострочный раздел, в который необходимо добавить строку.'");
			Сообщение.Сообщить();
			Возврат;
		КонецЕсли;
		
		ПолучитьСтруктуруМногострочныхЧастей();
		
		ОписаниеМногострочнойЧасти = СтруктураМногострочныхЧастей[ИдентификаторМногострочнойЧасти];
		
	Исключение
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Не выбран многострочный раздел, в который необходимо добавить строку.'");
		Сообщение.Сообщить();
		Возврат;
		
	КонецПопытки;
	
	// Если количество строк достигло предела, то добавления не производится.
	КоличествоСтрокВМногострочнойЧасти = ОписаниеМногострочнойЧасти.Состав.Количество();
	Если ЛОЖЬ И ОписаниеМногострочнойЧасти.Масштаб.МаксимальноеКоличествоСтрок <> 0	
	   И КоличествоСтрокВМногострочнойЧасти >= ОписаниеМногострочнойЧасти.Масштаб.МаксимальноеКоличествоСтрок Тогда
		
		Сообщение = Новый СообщениеПользователю;

		Сообщение.Текст = НСтр("ru='Невозможно добавить строку многострочного раздела: достигнуто максимальное количество.'");

		Сообщение.Сообщить();
		
		Возврат;
		
	КонецЕсли;
	
	// Очищаем именованную область многострочной части и сохраняем исходную позицию.
	ИмяОбластиМногострочнойЧастиВТаблице = ИдентификаторМногострочнойЧасти;
	Если СтрНайти(ИдентификаторМногострочнойЧасти, "П00010") = 1 ИЛИ СтрНайти(ИдентификаторМногострочнойЧасти, "П10010") Тогда
		КодСтроки = Сред(ИмяОбластиМногострочнойЧастиВТаблице, 7);
		Пока Лев(КодСтроки, 1) = "0" Цикл
			КодСтроки = Сред(КодСтроки, 2);
		КонецЦикла;
		ИмяОбластиМногострочнойЧастиВТаблице = "ДопСтрока" + КодСтроки;
	КонецЕсли;
	
	Если ТабличныйДокумент.Области.Найти(ИмяОбластиМногострочнойЧастиВТаблице) <> Неопределено Тогда
		ИсходнаяОбластьСтрокВерх = ТабличныйДокумент.Области[ИмяОбластиМногострочнойЧастиВТаблице].Верх;
		ИсходнаяОбластьСтрокНиз  = ТабличныйДокумент.Области[ИмяОбластиМногострочнойЧастиВТаблице].Низ;
		ТабличныйДокумент.Области[ИмяОбластиМногострочнойЧастиВТаблице].Имя = "";
	Иначе
		ИсходнаяОбластьСтрокВерх = 0;
		ИсходнаяОбластьСтрокНиз  = 0;
	КонецЕсли;
	
	// За основу для копирования используется последняя строка многострочного раздела.
	ИмяВерхнегоЭлементаСтроки = ОписаниеМногострочнойЧасти.Габариты.ВерхнийЭлементСтроки + "_" + СтрокаЧГ0(КоличествоСтрокВМногострочнойЧасти);
	ИмяНижнегоЭлементаСтроки  = ОписаниеМногострочнойЧасти.Габариты.НижнийЭлементСтроки + "_" + СтрокаЧГ0(КоличествоСтрокВМногострочнойЧасти);
	
	ОбластьВставляемойСтрокиВерх = ТабличныйДокумент.Области[ИмяВерхнегоЭлементаСтроки].Верх;
	ОбластьВставляемойСтрокиНиз  = ТабличныйДокумент.Области[ИмяНижнегоЭлементаСтроки].Низ;
	
	ОбластьВставляемойСтроки = ТабличныйДокумент.Область(ОбластьВставляемойСтрокиВерх, , ОбластьВставляемойСтрокиНиз, );
	
	// Добавляем строку к макету и назначаем имена областям показателей.
	ТабличныйДокумент.ВставитьОбласть(ОбластьВставляемойСтроки, , ТипСмещенияТабличногоДокумента.ПоВертикали, Ложь);
	
	ВысотаСтроки = ОбластьВставляемойСтрокиНиз - ОбластьВставляемойСтрокиВерх + 1;
	Смещение = ВысотаСтроки * КоличествоСтрокВМногострочнойЧасти;
	
	СтруктураЭлементовМногострочнойЧасти = Новый Структура;
	
	ОсноваИмениПоказателяДляДопСтроки = "";
	Для Каждого Элемент Из ОписаниеМногострочнойЧасти.Состав[0] Цикл
		ОсноваИмениПоказателя = Элемент.Ключ;
		Если Лев(ОсноваИмениПоказателя, 1) = "П" И Прав(ОсноваИмениПоказателя, 2) = "01" Тогда 
			ОсноваИмениПоказателяДляДопСтроки = ОсноваИмениПоказателя;
		КонецЕсли;
		
		СтруктураЭлементовМногострочнойЧасти.Вставить(ОсноваИмениПоказателя);
		
		ИсходнаяОбластьПоказателя = ТабличныйДокумент.Области[ОсноваИмениПоказателя + "_1"];
		
		ОбластьПоказателяНовойСтроки = ТабличныйДокумент.Область(ИсходнаяОбластьПоказателя.Верх + Смещение, ИсходнаяОбластьПоказателя.Лево,
		                                                               ИсходнаяОбластьПоказателя.Низ + Смещение, ИсходнаяОбластьПоказателя.Право);
		ИмяОбластиНовойСтроки = ОсноваИмениПоказателя + "_" + СтрокаЧГ0(КоличествоСтрокВМногострочнойЧасти + 1);
		
		ОбластьПоказателяНовойСтроки.Имя = ИмяОбластиНовойСтроки;
		
		Если ТабличныйДокумент.Области[ИмяОбластиНовойСтроки].СодержитЗначение Тогда
			ОбластьПоказателяНовойСтроки.Значение = Неопределено;
		КонецЕсли;
		
	КонецЦикла;
	
	// Назначаем новую именнованную область многострочной части.
	Если ИсходнаяОбластьСтрокВерх <> 0 Тогда
		ОбластьДляИменования = ТабличныйДокумент.Область(ИсходнаяОбластьСтрокВерх, , ИсходнаяОбластьСтрокНиз + ВысотаСтроки, );
		ОбластьДляИменования.Имя = ИмяОбластиМногострочнойЧастиВТаблице;
		ОбластьУдалитьНовая = ТабличныйДокумент.Область(ИсходнаяОбластьСтрокНиз + 1, 2, ИсходнаяОбластьСтрокНиз + 1, 2);
		ОбластьУдалитьНовая.Имя = "УдалитьСтроку" + ОсноваИмениПоказателяДляДопСтроки  + "_" + СтрокаЧГ0(КоличествоСтрокВМногострочнойЧасти + 1);
	Иначе 
		Верх = ОбластьВставляемойСтрокиВерх;
		Шаг = ОбластьВставляемойСтрокиНиз - ОбластьВставляемойСтрокиВерх + 1;
		ОбластьУдалитьНовая = ТабличныйДокумент.Область(Верх + Шаг, 2, Верх + Шаг, 2);
		ОбластьУдалитьНовая.Имя = "УдалитьСтроку" + ОсноваИмениПоказателяДляДопСтроки  + "_" + СтрокаЧГ0(ОписаниеМногострочнойЧасти.Состав.Количество() + 1);
	КонецЕсли;
	
	// Зафиксируем увеличение многострочной части в структуре описаний.
	ОписаниеМногострочнойЧасти.Состав.Добавить(СтруктураЭлементовМногострочнойЧасти);
	
	ПеренумероватьСтрокиИЗаполнитьЗаголовкиМногострочнойЧасти(ОписаниеМногострочнойЧасти, СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
	// Установим первое поле добавленной строки текущим.
	НомерПоследнейСтроки = ОписаниеМногострочнойЧасти.Состав.Количество();
	ИмяОбластиДляФокусаВвода = ИмяПоказателя + "_" + СтрокаЧГ0(НомерПоследнейСтроки);
	Элементы.ТабличныйДокумент.ТекущаяОбласть = ТабличныйДокумент.Области[ИмяОбластиДляФокусаВвода];
	
	ТекущийЭлемент = Элементы.ТабличныйДокумент;
	ОтрисоватьЗначкиУдаленияСтрок(ТабличныйДокумент);
	
	СтруктураРеквизитовФормы.АдресВоВремХранилищеСтруктураМногострочныхЧастей
		= ПоместитьВоВременноеХранилище(СтруктураМногострочныхЧастей, УникальныйИдентификатор);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ИмяПоказателяБезСчетчика(Знач ИмяПоказателя)
	
	ПозицияСчетчика = СтрНайти(ИмяПоказателя, "_");
	
	Если ПозицияСчетчика > 0 Тогда
		Возврат Лев(ИмяПоказателя, ПозицияСчетчика - 1);
	КонецЕсли;
	
	Возврат ИмяПоказателя;
	
КонецФункции

&НаСервере
Процедура УдалитьДополнительнуюСтроку(ИмяПоказателя)
	
	УдалитьДополнительнуюСтрокуПосистемеБухОтчетности(ИмяПоказателя);
	
КонецПроцедуры

&НаСервере
Процедура УдалитьДополнительнуюСтрокуПосистемеБухОтчетности(ИмяПоказателя)
	
	// Идентификатор многострочной части должен совпадать с областью многострочной части в таблице.
	ИмяПоказателяБезСчетчика = ИмяПоказателяБезСчетчика(ИмяПоказателя);
	
	ИдентификаторМногострочнойЧасти = СтруктураРеквизитовФормы.СоответствиеПоказателейМногострочныхЧастейИхОписанию[ИмяПоказателяБезСчетчика];
	
	Если ИдентификаторМногострочнойЧасти = Неопределено
	 ИЛИ ИдентификаторМногострочнойЧасти = "ДопСтрока3400" Тогда
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Не выбрана удаляемая строка многострочного раздела.'");
		Сообщение.Сообщить();
		
		Возврат;
		
	КонецЕсли;
	
	ПолучитьСтруктуруМногострочныхЧастей();
	
	СтруктураМногострочнойЧасти = СтруктураМногострочныхЧастей[ИдентификаторМногострочнойЧасти];
	
	// Номер строки удаляемой многострочной части определим по имени выделенной ячейки.
	НомерУдаляемойСтроки = Число(Сред(ИмяПоказателя, СтрНайти(ИмяПоказателя, "_") + 1));
	ИндексСтрокиТаблицы = НомерУдаляемойСтроки - 1;
	
	Если СтруктураМногострочнойЧасти.Состав.Количество() > СтруктураМногострочнойЧасти.Масштаб.МинимальноеКоличествоСтрок Тогда
		
		ПеремещатьФокусВвода = (НомерУдаляемойСтроки = СтруктураМногострочнойЧасти.Состав.Количество());
		
		УдаляемаяОбластьВерх = ТабличныйДокумент.Области[СтруктураМногострочнойЧасти.Габариты.ВерхнийЭлементСтроки + "_" + СтрокаЧГ0(НомерУдаляемойСтроки)].Верх;
		УдаляемаяОбластьНиз  = ТабличныйДокумент.Области[СтруктураМногострочнойЧасти.Габариты.НижнийЭлементСтроки  + "_" + СтрокаЧГ0(НомерУдаляемойСтроки)].Низ;
		
		ВысотаСтроки = УдаляемаяОбластьНиз - УдаляемаяОбластьВерх + 1;
		УдаляемаяОбласть = ТабличныйДокумент.Область(УдаляемаяОбластьВерх, , УдаляемаяОбластьНиз, );
		ТабличныйДокумент.УдалитьОбласть(УдаляемаяОбласть, ТипСмещенияТабличногоДокумента.ПоВертикали);
		
		// Переименование областей многострочной части.
		Для Инд = НомерУдаляемойСтроки + 1 По СтруктураМногострочнойЧасти.Состав.Количество() Цикл
			Для Каждого Элемент Из СтруктураМногострочнойЧасти.Состав[0] Цикл
				ОсноваИмениОбласти = Элемент.Ключ;
				Если Прав(ОсноваИмениОбласти, 2) = "01" И Лев(ОсноваИмениОбласти, 1) = "П" Тогда 
					ПереименуемаяОбласть = ТабличныйДокумент.Области["УдалитьСтроку" + ОсноваИмениОбласти + "_" + СтрокаЧГ0(Инд)];
					ПереименуемаяОбласть.Имя = "УдалитьСтроку" + ОсноваИмениОбласти + "_" + СтрокаЧГ0(Инд - 1);
				КонецЕсли;
				ПереименуемаяОбласть = ТабличныйДокумент.Области[ОсноваИмениОбласти + "_" + СтрокаЧГ0(Инд)];
				ПереименуемаяОбласть.Имя = ОсноваИмениОбласти + "_" + СтрокаЧГ0(Инд - 1);
			КонецЦикла;
		КонецЦикла;
		
		СтруктураМногострочнойЧасти.Состав.Удалить(ИндексСтрокиТаблицы);
		
		Если ПеремещатьФокусВвода Тогда
			// Установим первое поле добавленной строки текущим.
			НомерПоследнейСтроки = СтруктураМногострочнойЧасти.Состав.Количество();
			ИмяБудущейТекущейОбласти = ИмяПоказателяБезСчетчика + "_" + СтрокаЧГ0(НомерПоследнейСтроки);
			Элементы.ТабличныйДокумент.ТекущаяОбласть = ТабличныйДокумент.Области[ИмяБудущейТекущейОбласти];
		КонецЕсли;
		
	Иначе
		Для Инд = 1 По СтруктураМногострочнойЧасти.Масштаб.МинимальноеКоличествоСтрок Цикл
			Для Каждого Элемент Из СтруктураМногострочнойЧасти.Состав[0] Цикл
				ИмяОчищаемойОбласти = Элемент.Ключ + "_" + СтрокаЧГ0(Инд);
				ОчищаемаяОбласть = ТабличныйДокумент.Области[ИмяОчищаемойОбласти];
				Если ОчищаемаяОбласть.СодержитЗначение Тогда
					Если ТипЗнч(ОчищаемаяОбласть.Значение) = Тип("Строка") Тогда
						ОчищаемаяОбласть.Значение = "";
					Иначе
						ОчищаемаяОбласть.Значение = 0;
					КонецЕсли;
				Иначе
					ОчищаемаяОбласть.Текст = "";
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
	КонецЕсли;
	
	ПеренумероватьСтрокиИЗаполнитьЗаголовкиМногострочнойЧасти(СтруктураМногострочнойЧасти, СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	ОтрисоватьЗначкиУдаленияСтрок(ТабличныйДокумент);
	ТекущийЭлемент = Элементы.ТабличныйДокумент;
	
	СтруктураРеквизитовФормы.АдресВоВремХранилищеСтруктураМногострочныхЧастей
		= ПоместитьВоВременноеХранилище(СтруктураМногострочныхЧастей, УникальныйИдентификатор);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура РасчетНаКлиенте(ИмяСтраницыПанели = "", ОбластьИмя = "") Экспорт

	Расчет(ЭтаФорма, ИмяСтраницыПанели, ОбластьИмя);

КонецПроцедуры

&НаСервере
Процедура РасчетНаСервере(ИмяСтраницыПанели = "", ОбластьИмя = "") Экспорт
	
	Расчет(ЭтаФорма, ИмяСтраницыПанели, ОбластьИмя);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура Расчет(Форма, ИмяСтраницыПанели = "", Знач ОбластьИмя = "")
	
	Если Форма.СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Тогда
		Возврат;
	КонецЕсли;
	
	// БАЛАНС
	//
	Если ИмяСтраницыПанели = "Баланс" Тогда
		
		Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Баланс" Тогда
			
			мБаланс = Форма.ТабличныйДокумент.Области;
			
			// Актив
			// Строка 1100
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100110004, ОбластьИмя) > 0 Тогда
				
				СуммаСтрок1180_1190 = 0;
				 
				Если НЕ ПустаяСтрока(Форма.СтруктураОтчета.Баланс.ИмяМакета)
				   И НЕ Форма.СтруктураОтчета.Баланс.ИмяМакета = "Баланс"
				   И НЕ Форма.СтруктураОтчета.Баланс.ИмяМакета = "БалансНКО"
	 			   И НЕ Форма.СтруктураОтчета.Баланс.ИмяМакета = "Баланс_2011Кв4"
	 			   И НЕ Форма.СтруктураОтчета.Баланс.ИмяМакета = "БалансНКО_2011Кв4" Тогда 
				 
					 СуммаСтрок1180_1190 = мБаланс.П000100118004.Значение + мБаланс.П000100119004.Значение;
					 
			 	КонецЕсли;
				
				мБаланс.П000100110004.Значение = мБаланс.П000100111004.Значение
				+ мБаланс.П000100112004.Значение
				+ мБаланс.П000100113004.Значение
				+ мБаланс.П000100114004.Значение
				+ мБаланс.П000100115004.Значение
				+ мБаланс.П000100116004.Значение
				+ мБаланс.П000100117004.Значение
				+ СуммаСтрок1180_1190;
				
			КонецЕсли;									   
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100110005, ОбластьИмя) > 0 Тогда									   
				
				СуммаСтрок1180_1190 = 0;
				
				Если НЕ ПустаяСтрока(Форма.СтруктураОтчета.Баланс.ИмяМакета)
				   И НЕ Форма.СтруктураОтчета.Баланс.ИмяМакета = "Баланс"
				   И НЕ Форма.СтруктураОтчета.Баланс.ИмяМакета = "БалансНКО"
	 			   И НЕ Форма.СтруктураОтчета.Баланс.ИмяМакета = "Баланс_2011Кв4"
	 			   И НЕ Форма.СтруктураОтчета.Баланс.ИмяМакета = "БалансНКО_2011Кв4" Тогда 
				 
					 СуммаСтрок1180_1190 = мБаланс.П000100118005.Значение + мБаланс.П000100119005.Значение;
					 
			 	КонецЕсли;
				
				мБаланс.П000100110005.Значение = мБаланс.П000100111005.Значение
				+ мБаланс.П000100112005.Значение
				+ мБаланс.П000100113005.Значение
				+ мБаланс.П000100114005.Значение
				+ мБаланс.П000100115005.Значение
				+ мБаланс.П000100116005.Значение
				+ мБаланс.П000100117005.Значение
				+ СуммаСтрок1180_1190;
				
			КонецЕсли;									   
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100110006, ОбластьИмя) > 0 Тогда									   
				
				СуммаСтрок1180_1190 = 0;
				
				Если НЕ ПустаяСтрока(Форма.СтруктураОтчета.Баланс.ИмяМакета)
				   И НЕ Форма.СтруктураОтчета.Баланс.ИмяМакета = "Баланс"
				   И НЕ Форма.СтруктураОтчета.Баланс.ИмяМакета = "БалансНКО"
	 			   И НЕ Форма.СтруктураОтчета.Баланс.ИмяМакета = "Баланс_2011Кв4"
	 			   И НЕ Форма.СтруктураОтчета.Баланс.ИмяМакета = "БалансНКО_2011Кв4" Тогда 
				 
					 СуммаСтрок1180_1190 = мБаланс.П000100118006.Значение + мБаланс.П000100119006.Значение;
					 
				КонецЕсли;
				 
				мБаланс.П000100110006.Значение = мБаланс.П000100111006.Значение
				+ мБаланс.П000100112006.Значение
				+ мБаланс.П000100113006.Значение
				+ мБаланс.П000100114006.Значение
				+ мБаланс.П000100115006.Значение
				+ мБаланс.П000100116006.Значение
				+ мБаланс.П000100117006.Значение
				+ СуммаСтрок1180_1190;
				
			КонецЕсли;									   
			
			// строка 1200
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100120004, ОбластьИмя) > 0 Тогда
				мБаланс.П000100120004.Значение = мБаланс.П000100121004.Значение
				+ мБаланс.П000100122004.Значение
				+ мБаланс.П000100123004.Значение
				+ мБаланс.П000100124004.Значение
				+ мБаланс.П000100125004.Значение
				+ мБаланс.П000100126004.Значение;
			КонецЕсли;									   
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100120005, ОбластьИмя) > 0 Тогда									   
				мБаланс.П000100120005.Значение = мБаланс.П000100121005.Значение
				+ мБаланс.П000100122005.Значение
				+ мБаланс.П000100123005.Значение
				+ мБаланс.П000100124005.Значение
				+ мБаланс.П000100125005.Значение
				+ мБаланс.П000100126005.Значение;
			КонецЕсли;									   
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100120006, ОбластьИмя) > 0 Тогда									   
				мБаланс.П000100120006.Значение = мБаланс.П000100121006.Значение
				+ мБаланс.П000100122006.Значение
				+ мБаланс.П000100123006.Значение
				+ мБаланс.П000100124006.Значение
				+ мБаланс.П000100125006.Значение
				+ мБаланс.П000100126006.Значение;
			КонецЕсли;									   
			
			// строка 1600
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100160004, ОбластьИмя) > 0 Тогда
				мБаланс.П000100160004.Значение = мБаланс.П000100110004.Значение
				+ мБаланс.П000100120004.Значение;	
			КонецЕсли;									   
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100160005, ОбластьИмя) > 0 Тогда									   
				мБаланс.П000100160005.Значение = мБаланс.П000100110005.Значение
				+ мБаланс.П000100120005.Значение;
			КонецЕсли;									   
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100160006, ОбластьИмя) > 0 Тогда									   
				мБаланс.П000100160006.Значение = мБаланс.П000100110006.Значение
				+ мБаланс.П000100120006.Значение;
			КонецЕсли;
			
			// Пассив
			// строка 1300
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100130004, ОбластьИмя) > 0 Тогда
				
				Строка1340 = 0;
				
				Если НЕ Форма.СтруктураРеквизитовФормы.ЭтоБалансНекоммерческойОрганизации Тогда
					Строка1340 = мБаланс.П000100134004.Значение;
				КонецЕсли;
				
				мБаланс.П000100130004.Значение = мБаланс.П000100131004.Значение
				+ мБаланс.П000100132004.Значение
				+ Строка1340
				+ мБаланс.П000100135004.Значение
				+ мБаланс.П000100136004.Значение
				+ мБаланс.П000100137004.Значение;
				
			КонецЕсли;									   
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100130005, ОбластьИмя) > 0 Тогда									   
				
				Строка1340 = 0;
				
				Если НЕ Форма.СтруктураРеквизитовФормы.ЭтоБалансНекоммерческойОрганизации Тогда
					Строка1340 = мБаланс.П000100134005.Значение;
				КонецЕсли;
				
				мБаланс.П000100130005.Значение = мБаланс.П000100131005.Значение
				+ мБаланс.П000100132005.Значение
				+ Строка1340
				+ мБаланс.П000100135005.Значение
				+ мБаланс.П000100136005.Значение
				+ мБаланс.П000100137005.Значение;
				
			КонецЕсли;									   
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100130006, ОбластьИмя) > 0 Тогда									   
				
				Строка1340 = 0;
				
				Если НЕ Форма.СтруктураРеквизитовФормы.ЭтоБалансНекоммерческойОрганизации Тогда
					Строка1340 = мБаланс.П000100134006.Значение;
				КонецЕсли;
				
				мБаланс.П000100130006.Значение = мБаланс.П000100131006.Значение
				+ мБаланс.П000100132006.Значение
				+ Строка1340
				+ мБаланс.П000100135006.Значение
				+ мБаланс.П000100136006.Значение
				+ мБаланс.П000100137006.Значение;
				
			КонецЕсли;									   
			
			// строка 1400
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100140004, ОбластьИмя) > 0 Тогда
				мБаланс.П000100140004.Значение = мБаланс.П000100141004.Значение
				+ мБаланс.П000100142004.Значение
				+ мБаланс.П000100143004.Значение
				+ мБаланс.П000100145004.Значение;
			КонецЕсли;									   
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100140005, ОбластьИмя) > 0 Тогда									   
				мБаланс.П000100140005.Значение = мБаланс.П000100141005.Значение
				+ мБаланс.П000100142005.Значение
				+ мБаланс.П000100143005.Значение
				+ мБаланс.П000100145005.Значение;
			КонецЕсли;									   
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100140006, ОбластьИмя) > 0 Тогда									   
				мБаланс.П000100140006.Значение = мБаланс.П000100141006.Значение
				+ мБаланс.П000100142006.Значение
				+ мБаланс.П000100143006.Значение
				+ мБаланс.П000100145006.Значение;
			КонецЕсли;									   
			
			// строка 1500
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100150004, ОбластьИмя) > 0 Тогда
				мБаланс.П000100150004.Значение = мБаланс.П000100151004.Значение
				+ мБаланс.П000100152004.Значение
				+ мБаланс.П000100153004.Значение
				+ мБаланс.П000100154004.Значение
				+ мБаланс.П000100155004.Значение;
			КонецЕсли;									   
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100150005, ОбластьИмя) > 0 Тогда									   
				мБаланс.П000100150005.Значение = мБаланс.П000100151005.Значение
				+ мБаланс.П000100152005.Значение
				+ мБаланс.П000100153005.Значение
				+ мБаланс.П000100154005.Значение
				+ мБаланс.П000100155005.Значение;
			КонецЕсли;									   
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100150006, ОбластьИмя) > 0 Тогда									   
				мБаланс.П000100150006.Значение = мБаланс.П000100151006.Значение
				+ мБаланс.П000100152006.Значение
				+ мБаланс.П000100153006.Значение
				+ мБаланс.П000100154006.Значение
				+ мБаланс.П000100155006.Значение;
			КонецЕсли;									   
			
			// строка 1700
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100170004, ОбластьИмя) > 0 Тогда
				мБаланс.П000100170004.Значение = мБаланс.П000100130004.Значение
				+ мБаланс.П000100140004.Значение
				+ мБаланс.П000100150004.Значение;
			КонецЕсли;									   
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100170005, ОбластьИмя) > 0 Тогда									   
				мБаланс.П000100170005.Значение = мБаланс.П000100130005.Значение
				+ мБаланс.П000100140005.Значение
				+ мБаланс.П000100150005.Значение;
			КонецЕсли;									   
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100170006, ОбластьИмя) > 0 Тогда									   
				мБаланс.П000100170006.Значение = мБаланс.П000100130006.Значение
				+ мБаланс.П000100140006.Значение
				+ мБаланс.П000100150006.Значение;
			КонецЕсли;
			
		Иначе
			
			мБаланс = Форма.СтруктураДанныхБаланс;
			
			// Актив
			// Строка 1100
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100110004, ОбластьИмя) > 0 Тогда
				
				СуммаСтрок1180_1190 = 0;
				
				Если НЕ ПустаяСтрока(Форма.СтруктураОтчета.Баланс.ИмяМакета)
				   И НЕ Форма.СтруктураОтчета.Баланс.ИмяМакета = "Баланс"
				   И НЕ Форма.СтруктураОтчета.Баланс.ИмяМакета = "БалансНКО"
	 			   И НЕ Форма.СтруктураОтчета.Баланс.ИмяМакета = "Баланс_2011Кв4"
	 			   И НЕ Форма.СтруктураОтчета.Баланс.ИмяМакета = "БалансНКО_2011Кв4" Тогда 
				 
					 СуммаСтрок1180_1190 = мБаланс.П000100118004 + мБаланс.П000100119004;
					 
			 	КонецЕсли;
				
				мБаланс.П000100110004 = мБаланс.П000100111004
				+ мБаланс.П000100112004
				+ мБаланс.П000100113004
				+ мБаланс.П000100114004
				+ мБаланс.П000100115004
				+ мБаланс.П000100116004
				+ мБаланс.П000100117004
				+ СуммаСтрок1180_1190;
				
			КонецЕсли;									   
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100110005, ОбластьИмя) > 0 Тогда									   
				
				СуммаСтрок1180_1190 = 0;
				
				Если НЕ ПустаяСтрока(Форма.СтруктураОтчета.Баланс.ИмяМакета)
				   И НЕ Форма.СтруктураОтчета.Баланс.ИмяМакета = "Баланс"
				   И НЕ Форма.СтруктураОтчета.Баланс.ИмяМакета = "БалансНКО"
	 			   И НЕ Форма.СтруктураОтчета.Баланс.ИмяМакета = "Баланс_2011Кв4"
	 			   И НЕ Форма.СтруктураОтчета.Баланс.ИмяМакета = "БалансНКО_2011Кв4" Тогда 
				 
					 СуммаСтрок1180_1190 = мБаланс.П000100118005 + мБаланс.П000100119005;
					 
			 	КонецЕсли;
				
				мБаланс.П000100110005 = мБаланс.П000100111005
				+ мБаланс.П000100112005
				+ мБаланс.П000100113005
				+ мБаланс.П000100114005
				+ мБаланс.П000100115005
				+ мБаланс.П000100116005
				+ мБаланс.П000100117005
				+ СуммаСтрок1180_1190;
				
			КонецЕсли;									   
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100110006, ОбластьИмя) > 0 Тогда									   
				
				СуммаСтрок1180_1190 = 0;
				
				Если НЕ ПустаяСтрока(Форма.СтруктураОтчета.Баланс.ИмяМакета)
				   И НЕ Форма.СтруктураОтчета.Баланс.ИмяМакета = "Баланс"
				   И НЕ Форма.СтруктураОтчета.Баланс.ИмяМакета = "БалансНКО"
	 			   И НЕ Форма.СтруктураОтчета.Баланс.ИмяМакета = "Баланс_2011Кв4"
	 			   И НЕ Форма.СтруктураОтчета.Баланс.ИмяМакета = "БалансНКО_2011Кв4" Тогда 
				 
					 СуммаСтрок1180_1190 = мБаланс.П000100118006 + мБаланс.П000100119006;
					 
				КонецЕсли;
				 
				мБаланс.П000100110006 = мБаланс.П000100111006
				+ мБаланс.П000100112006
				+ мБаланс.П000100113006
				+ мБаланс.П000100114006
				+ мБаланс.П000100115006
				+ мБаланс.П000100116006
				+ мБаланс.П000100117006
				+ СуммаСтрок1180_1190;
				
			КонецЕсли;									   
			
			// строка 1200
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100120004, ОбластьИмя) > 0 Тогда
				мБаланс.П000100120004 = мБаланс.П000100121004
				+ мБаланс.П000100122004
				+ мБаланс.П000100123004
				+ мБаланс.П000100124004
				+ мБаланс.П000100125004
				+ мБаланс.П000100126004;
			КонецЕсли;									   
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100120005, ОбластьИмя) > 0 Тогда									   
				мБаланс.П000100120005 = мБаланс.П000100121005
				+ мБаланс.П000100122005
				+ мБаланс.П000100123005
				+ мБаланс.П000100124005
				+ мБаланс.П000100125005
				+ мБаланс.П000100126005;
			КонецЕсли;									   
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100120006, ОбластьИмя) > 0 Тогда									   
				мБаланс.П000100120006 = мБаланс.П000100121006
				+ мБаланс.П000100122006
				+ мБаланс.П000100123006
				+ мБаланс.П000100124006
				+ мБаланс.П000100125006
				+ мБаланс.П000100126006;
			КонецЕсли;									   
			
			// строка 1600
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100160004, ОбластьИмя) > 0 Тогда
				мБаланс.П000100160004 = мБаланс.П000100110004
				+ мБаланс.П000100120004;	
			КонецЕсли;									   
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100160005, ОбластьИмя) > 0 Тогда									   
				мБаланс.П000100160005 = мБаланс.П000100110005
				+ мБаланс.П000100120005;
			КонецЕсли;									   
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100160006, ОбластьИмя) > 0 Тогда									   
				мБаланс.П000100160006 = мБаланс.П000100110006
				+ мБаланс.П000100120006;
			КонецЕсли;
			
			// Пассив
			// строка 1300
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100130004, ОбластьИмя) > 0 Тогда
				
				Строка1340 = 0;
				
				Если НЕ Форма.СтруктураРеквизитовФормы.ЭтоБалансНекоммерческойОрганизации Тогда
					Строка1340 = мБаланс.П000100134004;
				КонецЕсли;
				
				мБаланс.П000100130004 = мБаланс.П000100131004
				+ мБаланс.П000100132004
				+ Строка1340
				+ мБаланс.П000100135004
				+ мБаланс.П000100136004
				+ мБаланс.П000100137004;
				
			КонецЕсли;									   
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100130005, ОбластьИмя) > 0 Тогда									   
				
				Строка1340 = 0;
				
				Если НЕ Форма.СтруктураРеквизитовФормы.ЭтоБалансНекоммерческойОрганизации Тогда
					Строка1340 = мБаланс.П000100134005;
				КонецЕсли;
				
				мБаланс.П000100130005 = мБаланс.П000100131005
				+ мБаланс.П000100132005
				+ Строка1340
				+ мБаланс.П000100135005
				+ мБаланс.П000100136005
				+ мБаланс.П000100137005;
				
			КонецЕсли;									   
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100130006, ОбластьИмя) > 0 Тогда									   
				
				Строка1340 = 0;
				
				Если НЕ Форма.СтруктураРеквизитовФормы.ЭтоБалансНекоммерческойОрганизации Тогда
					Строка1340 = мБаланс.П000100134006;
				КонецЕсли;
				
				мБаланс.П000100130006 = мБаланс.П000100131006
				+ мБаланс.П000100132006
				+ Строка1340
				+ мБаланс.П000100135006
				+ мБаланс.П000100136006
				+ мБаланс.П000100137006;
				
			КонецЕсли;									   
			
			// строка 1400
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100140004, ОбластьИмя) > 0 Тогда
				мБаланс.П000100140004 = мБаланс.П000100141004
				+ мБаланс.П000100142004
				+ мБаланс.П000100143004
				+ мБаланс.П000100145004;
			КонецЕсли;									   
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100140005, ОбластьИмя) > 0 Тогда									   
				мБаланс.П000100140005 = мБаланс.П000100141005
				+ мБаланс.П000100142005
				+ мБаланс.П000100143005
				+ мБаланс.П000100145005;
			КонецЕсли;									   
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100140006, ОбластьИмя) > 0 Тогда									   
				мБаланс.П000100140006 = мБаланс.П000100141006
				+ мБаланс.П000100142006
				+ мБаланс.П000100143006
				+ мБаланс.П000100145006;
			КонецЕсли;									   
			
			// строка 1500
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100150004, ОбластьИмя) > 0 Тогда
				мБаланс.П000100150004 = мБаланс.П000100151004
				+ мБаланс.П000100152004
				+ мБаланс.П000100153004
				+ мБаланс.П000100154004
				+ мБаланс.П000100155004;
			КонецЕсли;									   
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100150005, ОбластьИмя) > 0 Тогда									   
				мБаланс.П000100150005 = мБаланс.П000100151005
				+ мБаланс.П000100152005
				+ мБаланс.П000100153005
				+ мБаланс.П000100154005
				+ мБаланс.П000100155005;
			КонецЕсли;									   
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100150006, ОбластьИмя) > 0 Тогда									   
				мБаланс.П000100150006 = мБаланс.П000100151006
				+ мБаланс.П000100152006
				+ мБаланс.П000100153006
				+ мБаланс.П000100154006
				+ мБаланс.П000100155006;
			КонецЕсли;									   
			
			// строка 1700
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100170004, ОбластьИмя) > 0 Тогда
				мБаланс.П000100170004 = мБаланс.П000100130004
				+ мБаланс.П000100140004
				+ мБаланс.П000100150004;
			КонецЕсли;									   
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100170005, ОбластьИмя) > 0 Тогда									   
				мБаланс.П000100170005 = мБаланс.П000100130005
				+ мБаланс.П000100140005
				+ мБаланс.П000100150005;
			КонецЕсли;									   
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100170006, ОбластьИмя) > 0 Тогда									   
				мБаланс.П000100170006 = мБаланс.П000100130006
				+ мБаланс.П000100140006
				+ мБаланс.П000100150006;
			КонецЕсли;
			
		КонецЕсли;
		
	// ОТЧЕТ О ПРИБЫЛЯХ И УБЫТКАХ
	//
	ИначеЕсли ИмяСтраницыПанели = "ФормаОтчета" Тогда
		
		ВключенныеДопСтроки = Форма.СтруктураРеквизитовФормы.ВключенныеДопСтрокиОФРПриПримененииЕНВД;
		
		Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "ФормаОтчета" Тогда
			
			мФормаОтчета = Форма.ТабличныйДокумент.Области;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100210004, ОбластьИмя) > 0 Тогда									   
				
				П000100211004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100211004.Значение);
				П000100212004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100212004.Значение);
								
				мФормаОтчета.П000100210004.Значение = П000100211004 + П000100212004;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100210005, ОбластьИмя) > 0 Тогда									   
				
				П000100211005 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100211005.Значение);
				П000100212005 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100212005.Значение);
				
				мФормаОтчета.П000100210005.Значение = П000100211005 + П000100212005;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100220004, ОбластьИмя) > 0 Тогда									   
				
				П000100210004 = мФормаОтчета.П000100210004.Значение;
				П000100221004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100221004.Значение);
				П000100222004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100222004.Значение);
				
				П000100220004 = П000100210004 + П000100221004 + П000100222004;
				
				мФормаОтчета.П000100220004.Значение = П000100220004;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100220005, ОбластьИмя) > 0 Тогда
				
				П000100210005 = мФормаОтчета.П000100210005.Значение;
				П000100221005 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100221005.Значение);
				П000100222005 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100222005.Значение);
				
				П000100220005 = П000100210005 + П000100221005 + П000100222005;
				
				мФормаОтчета.П000100220005.Значение = П000100220005;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100230004, ОбластьИмя) > 0 Тогда
				
				П000100220004 = мФормаОтчета.П000100220004.Значение;
				
				П000100231004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100231004.Значение);
				П000100232004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100232004.Значение);
				П000100233004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100233004.Значение);
				П000100234004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100234004.Значение);
				П000100235004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100235004.Значение);
								
				П000100230004 = П000100220004 + П000100231004 + П000100232004 + П000100233004 + П000100234004 + П000100235004;
				
				мФормаОтчета.П000100230004.Значение = П000100230004;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100230005, ОбластьИмя) > 0 Тогда
				
				П000100220005 = мФормаОтчета.П000100220005.Значение;
				
				П000100231005 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100231005.Значение);
				П000100232005 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100232005.Значение);
				П000100233005 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100233005.Значение);
				П000100234005 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100234005.Значение);
				П000100235005 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100235005.Значение);
				
				П000100230005 = П000100220005 + П000100231005 + П000100232005 + П000100233005 + П000100234005 + П000100235005;
				
				мФормаОтчета.П000100230005.Значение = П000100230005;
				
			КонецЕсли;		
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100240004, ОбластьИмя) > 0 Тогда
				
				П000100230004 = мФормаОтчета.П000100230004.Значение;
				
				П000100241004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100241004.Значение);
				П000100243004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100243004.Значение);
				П000100245004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100245004.Значение);
				П000100246004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100246004.Значение);
				
				П000100240004 = П000100230004 + П000100241004 + П000100243004 + П000100245004 + П000100246004;
				
				мФормаОтчета.П000100240004.Значение = П000100240004;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100240005, ОбластьИмя) > 0 Тогда
				
				П000100230005 = мФормаОтчета.П000100230005.Значение;
				
				П000100241005 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100241005.Значение);
				П000100243005 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100243005.Значение);
				П000100245005 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100245005.Значение);
				П000100246005 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100246005.Значение);
				
				П000100240005 = П000100230005 + П000100241005 + П000100243005 + П000100245005 + П000100246005;
				
				мФормаОтчета.П000100240005.Значение = П000100240005;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100250004, ОбластьИмя) > 0 Тогда
				
				П000100240004 = мФормаОтчета.П000100240004.Значение;
				
				П000100251004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100251004.Значение);
				П000100252004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100252004.Значение);
				
				П000100250004 = П000100240004 + П000100251004 + П000100252004;
				
				мФормаОтчета.П000100250004.Значение = П000100250004;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100250005, ОбластьИмя) > 0 Тогда
				
				П000100240005 = мФормаОтчета.П000100240005.Значение;
				
				П000100251005 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100251005.Значение);
				П000100252005 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100252005.Значение);
				
				П000100250005 = П000100240005 + П000100251005 + П000100252005;
				
				мФормаОтчета.П000100250005.Значение = П000100250005;
				
			КонецЕсли;
			
			Если Форма.СтруктураРеквизитовФормы.ПрименениеЕНВД Тогда
				
				// отключаемые автозаполняемые строки расшифровки
				Если ВключенныеДопСтроки.Найти("ДопСтрока21101") <> Неопределено Тогда
					П000102110104 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000102110104.Значение);
					П000102110105 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000102110105.Значение);
				Иначе
					П000102110104 = 0;
					П000102110105 = 0;
				КонецЕсли;
				
				Если ВключенныеДопСтроки.Найти("ДопСтрока21102") <> Неопределено Тогда
					П000102110204 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000102110204.Значение);
					П000102110205 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000102110205.Значение);
				Иначе
					П000102110204 = 0;
					П000102110205 = 0;
				КонецЕсли;
				
				Если ВключенныеДопСтроки.Найти("ДопСтрока21201") <> Неопределено Тогда
					П000102120104 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000102120104.Значение);
					П000102120105 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000102120105.Значение);
				Иначе
					П000102120104 = 0;
					П000102120105 = 0;
				КонецЕсли;
				
				Если ВключенныеДопСтроки.Найти("ДопСтрока21202") <> Неопределено Тогда
					П000102120204 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000102120204.Значение);
					П000102120205 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000102120205.Значение);
				Иначе
					П000102120204 = 0;
					П000102120205 = 0;
				КонецЕсли;
				
				Если ВключенныеДопСтроки.Найти("ДопСтрока22101") <> Неопределено Тогда
					П000102210104 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000102210104.Значение);
					П000102210105 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000102210105.Значение);
				Иначе
					П000102210104 = 0;
					П000102210105 = 0;
				КонецЕсли;
				
				Если ВключенныеДопСтроки.Найти("ДопСтрока22102") <> Неопределено Тогда
					П000102210204 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000102210204.Значение);
					П000102210205 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000102210205.Значение);
				Иначе
					П000102210204 = 0;
					П000102210205 = 0;
				КонецЕсли;
				
				Если ВключенныеДопСтроки.Найти("ДопСтрока22201") <> Неопределено Тогда
					П000102220104 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000102220104.Значение);
					П000102220105 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000102220105.Значение);
				Иначе
					П000102220104 = 0;
					П000102220105 = 0;
				КонецЕсли;
				
				Если ВключенныеДопСтроки.Найти("ДопСтрока22202") <> Неопределено Тогда
					П000102220204 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000102220204.Значение);
					П000102220205 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000102220205.Значение);
				Иначе
					П000102220204 = 0;
					П000102220205 = 0;
				КонецЕсли;
				
				// отключаемые расчитываемые строки расшифровки
				Если ВключенныеДопСтроки.Найти("ДопСтрока21001") <> Неопределено Тогда
					П000102100104 = П000102110104 + П000102120104;
					П000102100105 = П000102110105 + П000102120105;
				Иначе
					П000102100104 = 0;
					П000102100105 = 0;
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000102100104, ОбластьИмя) > 0 Тогда
					мФормаОтчета.П000102100104.Значение = П000102100104;
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000102100105, ОбластьИмя) > 0 Тогда
					мФормаОтчета.П000102100105.Значение = П000102100105;
				КонецЕсли;
								
				Если ВключенныеДопСтроки.Найти("ДопСтрока21002") <> Неопределено Тогда
					П000102100204 = П000102110204 + П000102120204;
					П000102100205 = П000102110205 + П000102120205;
				Иначе
					П000102100204 = 0;
					П000102100205 = 0;
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000102100204, ОбластьИмя) > 0 Тогда
					мФормаОтчета.П000102100204.Значение = П000102100204;
				КонецЕсли;	
				
				Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000102100205, ОбластьИмя) > 0 Тогда
					мФормаОтчета.П000102100205.Значение = П000102100205;
				КонецЕсли;
								
				Если ВключенныеДопСтроки.Найти("ДопСтрока22001") <> Неопределено Тогда
					П000102200104 = П000102100104 + П000102210104 + П000102220104;
					П000102200105 = П000102100105 + П000102210105 + П000102220105;
				Иначе
					П000102200104 = 0;
					П000102200105 = 0;
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000102200104, ОбластьИмя) > 0 Тогда
					мФормаОтчета.П000102200104.Значение = П000102200104;
				КонецЕсли;	
				
				Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000102200105, ОбластьИмя) > 0 Тогда
					мФормаОтчета.П000102200105.Значение = П000102200105;
				КонецЕсли;
								
				Если ВключенныеДопСтроки.Найти("ДопСтрока22002") <> Неопределено Тогда
					П000102200204 = П000102100204 + П000102210204 + П000102220204;
					П000102200205 = П000102100205 + П000102210205 + П000102220205;
				Иначе
					П000102200204 = 0;
					П000102200205 = 0;
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000102200204, ОбластьИмя) > 0 Тогда
					мФормаОтчета.П000102200204.Значение = П000102200204;
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000102200205, ОбластьИмя) > 0 Тогда
					мФормаОтчета.П000102200205.Значение = П000102200205;
				КонецЕсли;
								
				Если ВключенныеДопСтроки.Найти("ДопСтрока23001") <> Неопределено Тогда
					
					П000100231004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100231004.Значение);
					П000100232004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100232004.Значение);
					П000100233004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100233004.Значение);
					П000100234004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100234004.Значение);
					П000100235004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100235004.Значение);
					
					П000100231005 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100231005.Значение);
					П000100232005 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100232005.Значение);
					П000100233005 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100233005.Значение);
					П000100234005 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100234005.Значение);
					П000100235005 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100235005.Значение);
										
					П000102300104 = П000102200104 + П000100231004 + П000100232004 + П000100234004 + П000100233004 + П000100235004;
					П000102300105 = П000102200105 + П000100231005 + П000100232005 + П000100234005 + П000100233005 + П000100235005;
					
				Иначе
					П000102300104 = 0;
					П000102300105 = 0;
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000102300104, ОбластьИмя) > 0 Тогда
					мФормаОтчета.П000102300104.Значение = П000102300104;
				КонецЕсли;	
				
				Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000102300105, ОбластьИмя) > 0 Тогда
					мФормаОтчета.П000102300105.Значение = П000102300105;
				КонецЕсли;
								
				Если ВключенныеДопСтроки.Найти("ДопСтрока23002") <> Неопределено Тогда
					П000102300204 = П000102200204;
					П000102300205 = П000102200205;
				Иначе
					П000102300204 = 0;
					П000102300205 = 0;
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000102300204, ОбластьИмя) > 0 Тогда
					мФормаОтчета.П000102300204.Значение = П000102300204;
				КонецЕсли;	
				
				Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000102300205, ОбластьИмя) > 0 Тогда
					мФормаОтчета.П000102300205.Значение = П000102300205;
				КонецЕсли;	
				
			КонецЕсли;
			
		Иначе
			
			мФормаОтчета = Форма.СтруктураДанныхФормаОтчета;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100210004, ОбластьИмя) > 0 Тогда									   
				
				П000100211004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100211004);
				П000100212004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100212004);
								
				мФормаОтчета.П000100210004 = П000100211004 + П000100212004;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100210005, ОбластьИмя) > 0 Тогда									   
				
				П000100211005 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100211005);
				П000100212005 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100212005);
				
				мФормаОтчета.П000100210005 = П000100211005 + П000100212005;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100220004, ОбластьИмя) > 0 Тогда									   
				
				П000100210004 = мФормаОтчета.П000100210004;
				П000100221004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100221004);
				П000100222004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100222004);
				
				П000100220004 = П000100210004 + П000100221004 + П000100222004;
				
				мФормаОтчета.П000100220004 = П000100220004;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100220005, ОбластьИмя) > 0 Тогда
				
				П000100210005 = мФормаОтчета.П000100210005;
				П000100221005 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100221005);
				П000100222005 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100222005);
				
				П000100220005 = П000100210005 + П000100221005 + П000100222005;
				
				мФормаОтчета.П000100220005 = П000100220005;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100230004, ОбластьИмя) > 0 Тогда
				
				П000100220004 = мФормаОтчета.П000100220004;
				
				П000100231004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100231004);
				П000100232004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100232004);
				П000100233004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100233004);
				П000100234004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100234004);
				П000100235004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100235004);
								
				П000100230004 = П000100220004 + П000100231004 + П000100232004 + П000100233004 + П000100234004 + П000100235004;
				
				мФормаОтчета.П000100230004 = П000100230004;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100230005, ОбластьИмя) > 0 Тогда
				
				П000100220005 = мФормаОтчета.П000100220005;
				
				П000100231005 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100231005);
				П000100232005 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100232005);
				П000100233005 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100233005);
				П000100234005 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100234005);
				П000100235005 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100235005);
				
				П000100230005 = П000100220005 + П000100231005 + П000100232005 + П000100233005 + П000100234005 + П000100235005;
				
				мФормаОтчета.П000100230005 = П000100230005;
				
			КонецЕсли;		
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100240004, ОбластьИмя) > 0 Тогда
				
				П000100230004 = мФормаОтчета.П000100230004;
				
				П000100241004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100241004);
				П000100243004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100243004);
				П000100245004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100245004);
				П000100246004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100246004);
				
				П000100240004 = П000100230004 + П000100241004 + П000100243004 + П000100245004 + П000100246004;
				
				мФормаОтчета.П000100240004 = П000100240004;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100240005, ОбластьИмя) > 0 Тогда
				
				П000100230005 = мФормаОтчета.П000100230005;
				
				П000100241005 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100241005);
				П000100243005 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100243005);
				П000100245005 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100245005);
				П000100246005 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100246005);
				
				П000100240005 = П000100230005 + П000100241005 + П000100243005 + П000100245005 + П000100246005;
				
				мФормаОтчета.П000100240005 = П000100240005;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100250004, ОбластьИмя) > 0 Тогда
				
				П000100240004 = мФормаОтчета.П000100240004;
				
				П000100251004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100251004);
				П000100252004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100252004);
				
				П000100250004 = П000100240004 + П000100251004 + П000100252004;
				
				мФормаОтчета.П000100250004 = П000100250004;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100250005, ОбластьИмя) > 0 Тогда
				
				П000100240005 = мФормаОтчета.П000100240005;
				
				П000100251005 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100251005);
				П000100252005 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100252005);
				
				П000100250005 = П000100240005 + П000100251005 + П000100252005;
				
				мФормаОтчета.П000100250005 = П000100250005;
				
			КонецЕсли;
			
			Если Форма.СтруктураРеквизитовФормы.ПрименениеЕНВД Тогда
				
				// отключаемые автозаполняемые строки расшифровки
				Если ВключенныеДопСтроки.Найти("ДопСтрока21101") <> Неопределено Тогда
					П000102110104 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000102110104);
					П000102110105 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000102110105);
				Иначе
					П000102110104 = 0;
					П000102110105 = 0;
				КонецЕсли;
				
				Если ВключенныеДопСтроки.Найти("ДопСтрока21102") <> Неопределено Тогда
					П000102110204 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000102110204);
					П000102110205 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000102110205);
				Иначе
					П000102110204 = 0;
					П000102110205 = 0;
				КонецЕсли;
				
				Если ВключенныеДопСтроки.Найти("ДопСтрока21201") <> Неопределено Тогда
					П000102120104 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000102120104);
					П000102120105 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000102120105);
				Иначе
					П000102120104 = 0;
					П000102120105 = 0;
				КонецЕсли;
				
				Если ВключенныеДопСтроки.Найти("ДопСтрока21202") <> Неопределено Тогда
					П000102120204 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000102120204);
					П000102120205 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000102120205);
				Иначе
					П000102120204 = 0;
					П000102120205 = 0;
				КонецЕсли;
				
				Если ВключенныеДопСтроки.Найти("ДопСтрока22101") <> Неопределено Тогда
					П000102210104 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000102210104);
					П000102210105 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000102210105);
				Иначе
					П000102210104 = 0;
					П000102210105 = 0;
				КонецЕсли;
				
				Если ВключенныеДопСтроки.Найти("ДопСтрока22102") <> Неопределено Тогда
					П000102210204 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000102210204);
					П000102210205 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000102210205);
				Иначе
					П000102210204 = 0;
					П000102210205 = 0;
				КонецЕсли;
				
				Если ВключенныеДопСтроки.Найти("ДопСтрока22201") <> Неопределено Тогда
					П000102220104 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000102220104);
					П000102220105 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000102220105);
				Иначе
					П000102220104 = 0;
					П000102220105 = 0;
				КонецЕсли;
				
				Если ВключенныеДопСтроки.Найти("ДопСтрока22202") <> Неопределено Тогда
					П000102220204 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000102220204);
					П000102220205 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000102220205);
				Иначе
					П000102220204 = 0;
					П000102220205 = 0;
				КонецЕсли;
				
				// отключаемые расчитываемые строки расшифровки
				Если ВключенныеДопСтроки.Найти("ДопСтрока21001") <> Неопределено Тогда
					П000102100104 = П000102110104 + П000102120104;
					П000102100105 = П000102110105 + П000102120105;
				Иначе
					П000102100104 = 0;
					П000102100105 = 0;
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000102100104, ОбластьИмя) > 0 Тогда
					мФормаОтчета.П000102100104 = П000102100104;
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000102100105, ОбластьИмя) > 0 Тогда
					мФормаОтчета.П000102100105 = П000102100105;
				КонецЕсли;
								
				Если ВключенныеДопСтроки.Найти("ДопСтрока21002") <> Неопределено Тогда
					П000102100204 = П000102110204 + П000102120204;
					П000102100205 = П000102110205 + П000102120205;
				Иначе
					П000102100204 = 0;
					П000102100205 = 0;
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000102100204, ОбластьИмя) > 0 Тогда
					мФормаОтчета.П000102100204 = П000102100204;
				КонецЕсли;	
				
				Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000102100205, ОбластьИмя) > 0 Тогда
					мФормаОтчета.П000102100205 = П000102100205;
				КонецЕсли;
								
				Если ВключенныеДопСтроки.Найти("ДопСтрока22001") <> Неопределено Тогда
					П000102200104 = П000102100104 + П000102210104 + П000102220104;
					П000102200105 = П000102100105 + П000102210105 + П000102220105;
				Иначе
					П000102200104 = 0;
					П000102200105 = 0;
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000102200104, ОбластьИмя) > 0 Тогда
					мФормаОтчета.П000102200104 = П000102200104;
				КонецЕсли;	
				
				Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000102200105, ОбластьИмя) > 0 Тогда
					мФормаОтчета.П000102200105 = П000102200105;
				КонецЕсли;
								
				Если ВключенныеДопСтроки.Найти("ДопСтрока22002") <> Неопределено Тогда
					П000102200204 = П000102100204 + П000102210204 + П000102220204;
					П000102200205 = П000102100205 + П000102210205 + П000102220205;
				Иначе
					П000102200204 = 0;
					П000102200205 = 0;
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000102200204, ОбластьИмя) > 0 Тогда
					мФормаОтчета.П000102200204 = П000102200204;
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000102200205, ОбластьИмя) > 0 Тогда
					мФормаОтчета.П000102200205 = П000102200205;
				КонецЕсли;
								
				Если ВключенныеДопСтроки.Найти("ДопСтрока23001") <> Неопределено Тогда
					
					П000100231004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100231004);
					П000100232004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100232004);
					П000100233004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100233004);
					П000100234004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100234004);
					П000100235004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100235004);
					
					П000100231005 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100231005);
					П000100232005 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100232005);
					П000100233005 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100233005);
					П000100234005 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100234005);
					П000100235005 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100235005);
										
					П000102300104 = П000102200104 + П000100231004 + П000100232004 + П000100234004 + П000100233004 + П000100235004;
					П000102300105 = П000102200105 + П000100231005 + П000100232005 + П000100234005 + П000100233005 + П000100235005;
					
				Иначе
					П000102300104 = 0;
					П000102300105 = 0;
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000102300104, ОбластьИмя) > 0 Тогда
					мФормаОтчета.П000102300104 = П000102300104;
				КонецЕсли;	
				
				Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000102300105, ОбластьИмя) > 0 Тогда
					мФормаОтчета.П000102300105 = П000102300105;
				КонецЕсли;
								
				Если ВключенныеДопСтроки.Найти("ДопСтрока23002") <> Неопределено Тогда
					П000102300204 = П000102200204;
					П000102300205 = П000102200205;
				Иначе
					П000102300204 = 0;
					П000102300205 = 0;
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000102300204, ОбластьИмя) > 0 Тогда
					мФормаОтчета.П000102300204 = П000102300204;
				КонецЕсли;	
				
				Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000102300205, ОбластьИмя) > 0 Тогда
					мФормаОтчета.П000102300205 = П000102300205;
				КонецЕсли;	
				
			КонецЕсли;
						
		КонецЕсли;	
		
	// ОТЧЕТ ОБ ИЗМЕНЕНИЯХ КАПИТАЛА
	//
	ИначеЕсли ИмяСтраницыПанели = "ОИК" Тогда
		
		НомПозиции = СтрНайти(ОбластьИмя, "_");
		
		Если ЗначениеЗаполнено(ОбластьИмя) Тогда
			ИндексВИмениОбласти = "_" + СтрокаЧГ0(Сред(ОбластьИмя, НомПозиции + 1));
		Иначе
			ИндексВИмениОбласти = "_" + СтрокаЧГ0(1);
		КонецЕсли;
		
		Если НомПозиции > 0 Тогда
			ОбластьИмя = Лев(ОбластьИмя, НомПозиции - 1);
		КонецЕсли;
		
		Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "ОИК" Тогда
			
			мФормаОтчета = Форма.ТабличныйДокумент.Области;
			
			// Таблица 1
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100310008, ОбластьИмя) > 0 Тогда
												
				П000100310003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100310003.Значение);
				П000100310004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100310004.Значение);
				П000100310005 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100310005.Значение);
				П000100310006 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100310006.Значение);
				П000100310007 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100310007.Значение);
				
				мФормаОтчета.П000100310008.Значение = П000100310003 + П000100310004 + П000100310005 + П000100310006 + П000100310007;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100321108, ОбластьИмя) > 0 Тогда
												
				П000100321107 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100321107.Значение);
								
				мФормаОтчета.П000100321108.Значение = П000100321107;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100321208, ОбластьИмя) > 0 Тогда
												
				П000100321205 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100321205.Значение);
				П000100321207 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100321207.Значение);
								
				мФормаОтчета.П000100321208.Значение = П000100321205 + П000100321207;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100321308, ОбластьИмя) > 0 Тогда
												
				П000100321305 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100321305.Значение);
				П000100321307 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100321307.Значение);
								
				мФормаОтчета.П000100321308.Значение = П000100321305 + П000100321307;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100321408, ОбластьИмя) > 0 Тогда
												
				П000100321403 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100321403.Значение);
				П000100321404 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100321404.Значение);
				П000100321405 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100321405.Значение);
								
				мФормаОтчета.П000100321408.Значение = П000100321403 + П000100321404 + П000100321405;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100321608, ОбластьИмя) > 0 Тогда
												
				П000100321603 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100321603.Значение);
				П000100321604 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100321604.Значение);
				П000100321605 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100321605.Значение);
				П000100321606 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100321606.Значение);
				П000100321607 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100321607.Значение);
								
				мФормаОтчета.П000100321608.Значение = П000100321603 + П000100321604 + П000100321605 + П000100321606 + П000100321607;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П100100321008, ОбластьИмя) > 0 Тогда
				
				Если ЗначениеЗаполнено(ОбластьИмя) Тогда
					
					П100100321003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета["П100100321003" + ИндексВИмениОбласти].Значение);
					П100100321004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета["П100100321004" + ИндексВИмениОбласти].Значение);
					П100100321005 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета["П100100321005" + ИндексВИмениОбласти].Значение);
					П100100321006 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета["П100100321006" + ИндексВИмениОбласти].Значение);
					П100100321007 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета["П100100321007" + ИндексВИмениОбласти].Значение);
					
					мФормаОтчета["П100100321008" + ИндексВИмениОбласти].Значение
						= П100100321003 + П100100321004 + П100100321005 + П100100321006 + П100100321007;
					
				Иначе
					
					Индекс = 1;
					П100100321003 = 0;
					П100100321004 = 0;
					П100100321005 = 0;
					П100100321006 = 0;
					П100100321007 = 0;
					
					Пока НЕ мФормаОтчета.Найти("П100100321008_" + Индекс) = Неопределено Цикл
						
						П100100321003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета["П100100321003_" + Индекс].Значение);
						П100100321004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета["П100100321004_" + Индекс].Значение);
						П100100321005 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета["П100100321005_" + Индекс].Значение);
						П100100321006 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета["П100100321006_" + Индекс].Значение);
						П100100321007 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета["П100100321007_" + Индекс].Значение);
						
						мФормаОтчета["П100100321008_" + Индекс].Значение
							= П100100321003 + П100100321004 + П100100321005 + П100100321006 + П100100321007;
						
						Индекс = Индекс + 1;
						
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100321003, ОбластьИмя) > 0 Тогда
												
				П000100321403 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100321403.Значение);
				П000100321503 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100321503.Значение);
				П000100321603 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100321603.Значение);
				
				Индекс = 1;
				П100100321003 = 0;
				
				Пока НЕ мФормаОтчета.Найти("П100100321003_" + Индекс) = Неопределено Цикл
					П100100321003 = П100100321003 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета["П100100321003_" + Индекс].Значение);
					Индекс = Индекс + 1;
				КонецЦикла;
				
				мФормаОтчета.П000100321003.Значение = П000100321403 + П000100321503 + П000100321603 + П100100321003;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100321004, ОбластьИмя) > 0 Тогда
												
				П000100321404 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100321404.Значение);
				П000100321504 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100321504.Значение);
				П000100321604 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100321604.Значение);
				
				Индекс = 1;
				П100100321004 = 0;
				
				Пока НЕ мФормаОтчета.Найти("П100100321004_" + Индекс) = Неопределено Цикл
					П100100321004 = П100100321004 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета["П100100321004_" + Индекс].Значение);
					Индекс = Индекс + 1;
				КонецЦикла;
				
				мФормаОтчета.П000100321004.Значение = П000100321404 + П000100321504 + П000100321604 + П100100321004;
				
			КонецЕсли;
									
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100321005, ОбластьИмя) > 0 Тогда
												
				П000100321205 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100321205.Значение);
				П000100321305 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100321305.Значение);
				П000100321405 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100321405.Значение);
				П000100321505 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100321505.Значение);
				П000100321605 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100321605.Значение);
				
				Индекс = 1;
				П100100321005 = 0;
				
				Пока НЕ мФормаОтчета.Найти("П100100321005_" + Индекс) = Неопределено Цикл
					П100100321005 = П100100321005 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета["П100100321005_" + Индекс].Значение);
					Индекс = Индекс + 1;
				КонецЦикла;
				
				мФормаОтчета.П000100321005.Значение = П000100321205 + П000100321305 + П000100321405 + П000100321505 + П000100321605 + П100100321005;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100321006, ОбластьИмя) > 0 Тогда
												
				П000100321606 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100321606.Значение);
				
				Индекс = 1;
				П100100321006 = 0;
				
				Пока НЕ мФормаОтчета.Найти("П100100321006_" + Индекс) = Неопределено Цикл
					П100100321006 = П100100321006 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета["П100100321006_" + Индекс].Значение);
					Индекс = Индекс + 1;
				КонецЦикла;
				
				мФормаОтчета.П000100321006.Значение = П000100321606 + П100100321006;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100321007, ОбластьИмя) > 0 Тогда
												
				П000100321107 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100321107.Значение);
				П000100321207 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100321207.Значение);
				П000100321307 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100321307.Значение);
				П000100321507 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100321507.Значение);
				П000100321607 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100321607.Значение);
				
				Индекс = 1;
				П100100321007 = 0;
				
				Пока НЕ мФормаОтчета.Найти("П100100321007_" + Индекс) = Неопределено Цикл
					П100100321007 = П100100321007 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета["П100100321007_" + Индекс].Значение);
					Индекс = Индекс + 1;
				КонецЦикла;
				
				мФормаОтчета.П000100321007.Значение = П000100321107 + П000100321207 + П000100321307 + П000100321507 + П000100321607 + П100100321007;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100321008, ОбластьИмя) > 0 Тогда
												
				П000100321108 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100321108.Значение);
				П000100321208 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100321208.Значение);
				П000100321308 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100321308.Значение);
				П000100321408 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100321408.Значение);
				П000100321608 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100321608.Значение);
				
				Индекс = 1;
				П100100321008 = 0;
				
				Пока НЕ мФормаОтчета.Найти("П100100321008_" + Индекс) = Неопределено Цикл
					П100100321008 = П100100321008 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета["П100100321008_" + Индекс].Значение);
					Индекс = Индекс + 1;
				КонецЦикла;
				
				мФормаОтчета.П000100321008.Значение = П000100321108 + П000100321208 + П000100321308 + П000100321408 + П000100321608 + П100100321008;
				
			КонецЕсли;
						
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100322108, ОбластьИмя) > 0 Тогда
												
				П000100322107 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100322107.Значение);
				 								
				мФормаОтчета.П000100322108.Значение = П000100322107;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100322208, ОбластьИмя) > 0 Тогда
												
				П000100322205 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100322205.Значение);
				П000100322207 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100322207.Значение);
				 								
				мФормаОтчета.П000100322208.Значение = П000100322205 + П000100322207;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100322308, ОбластьИмя) > 0 Тогда
												
				П000100322305 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100322305.Значение);
				П000100322307 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100322307.Значение);
								
				мФормаОтчета.П000100322308.Значение = П000100322305 + П000100322307;
				
			КонецЕсли;
						
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100322408, ОбластьИмя) > 0 Тогда
												
				П000100322403 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100322403.Значение);
				П000100322404 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100322404.Значение);
				П000100322405 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100322405.Значение);
				П000100322407 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100322407.Значение);
								
				мФормаОтчета.П000100322408.Значение = П000100322403 + П000100322404 + П000100322405 + П000100322407;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100322508, ОбластьИмя) > 0 Тогда
												
				П000100322503 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100322503.Значение);
				П000100322504 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100322504.Значение);
				П000100322505 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100322505.Значение);
				П000100322507 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100322507.Значение);
								
				мФормаОтчета.П000100322508.Значение = П000100322503 + П000100322504 + П000100322505 + П000100322507;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100322608, ОбластьИмя) > 0 Тогда
												
				П000100322603 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100322603.Значение);
				П000100322604 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100322604.Значение);
				П000100322605 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100322605.Значение);
				П000100322606 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100322606.Значение);
				П000100322607 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100322607.Значение);
								
				мФормаОтчета.П000100322608.Значение = П000100322603 + П000100322604 + П000100322605 + П000100322606 + П000100322607;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100322708, ОбластьИмя) > 0 Тогда
												
				П000100322707 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100322707.Значение);
				 				 								
				мФормаОтчета.П000100322708.Значение = П000100322707;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100322008, ОбластьИмя) > 0 Тогда
												
				П000100322003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100322003.Значение);
				П000100322004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100322004.Значение);
				П000100322005 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100322005.Значение);
				П000100322006 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100322006.Значение);
				П000100322007 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100322007.Значение);
				
				мФормаОтчета.П000100322008.Значение = П000100322003 + П000100322004 + П000100322005 + П000100322006 + П000100322007;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100324007, ОбластьИмя) > 0 Тогда
												
				П000100324006 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100324006.Значение);
				 								
				мФормаОтчета.П000100324007.Значение = -П000100324006;
				
			КонецЕсли;
									
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100322003, ОбластьИмя) > 0 Тогда
												
				П000100322403 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100322403.Значение);
				П000100322503 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100322503.Значение);
				П000100322603 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100322603.Значение);
				
				мФормаОтчета.П000100322003.Значение = П000100322403 + П000100322503 + П000100322603;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100322004, ОбластьИмя) > 0 Тогда
												
				П000100322404 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100322404.Значение);
				П000100322504 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100322504.Значение);
				П000100322604 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100322604.Значение);
				
				мФормаОтчета.П000100322004.Значение = П000100322404 + П000100322504 + П000100322604;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100322005, ОбластьИмя) > 0 Тогда
												
				П000100322205 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100322205.Значение);
				П000100322305 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100322305.Значение);
				П000100322405 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100322405.Значение);
				П000100322505 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100322505.Значение);
				П000100322605 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100322605.Значение);
				
				мФормаОтчета.П000100322005.Значение = П000100322205 + П000100322305 + П000100322405 + П000100322505 + П000100322605;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100322006, ОбластьИмя) > 0 Тогда
												
				П000100322606 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100322606.Значение);
				
				мФормаОтчета.П000100322006.Значение = П000100322606;
				
			КонецЕсли;
						
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100322007, ОбластьИмя) > 0 Тогда
												
				П000100322107 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100322107.Значение);
				П000100322207 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100322207.Значение);
				П000100322307 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100322307.Значение);
				П000100322407 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100322407.Значение);
				П000100322507 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100322507.Значение);
				П000100322607 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100322607.Значение);
				П000100322707 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100322707.Значение);
				
				мФормаОтчета.П000100322007.Значение = П000100322107 + П000100322207 + П000100322307 + П000100322407 + П000100322507 + П000100322607 + П000100322707;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100322008, ОбластьИмя) > 0 Тогда
												
				П000100322108 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100322108.Значение);
				П000100322208 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100322208.Значение);
				П000100322308 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100322308.Значение);
				П000100322408 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100322408.Значение);
				П000100322508 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100322508.Значение);
				П000100322608 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100322608.Значение);
				П000100322708 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100322708.Значение);
								
				мФормаОтчета.П000100322008.Значение = П000100322108 + П000100322208 + П000100322308 + П000100322408 + П000100322508 + П000100322608 + П000100322708;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100320008, ОбластьИмя) > 0 Тогда
												
				П000100320003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100320003.Значение);
				П000100320004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100320004.Значение);
				П000100320005 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100320005.Значение);
				П000100320006 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100320006.Значение);
				П000100320007 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100320007.Значение);
								
				мФормаОтчета.П000100320008.Значение = П000100320003 + П000100320004 + П000100320005 + П000100320006 + П000100320007;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100331108, ОбластьИмя) > 0 Тогда
												
				П000100331107 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100331107.Значение);
				 								
				мФормаОтчета.П000100331108.Значение = П000100331107;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100331208, ОбластьИмя) > 0 Тогда
												
				П000100331205 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100331205.Значение);
				П000100331207 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100331207.Значение);
											
				мФормаОтчета.П000100331208.Значение = П000100331205 + П000100331207;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100331308, ОбластьИмя) > 0 Тогда
												
				П000100331305 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100331305.Значение);
				П000100331307 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100331307.Значение);
				 								
				мФормаОтчета.П000100331308.Значение = П000100331305 + П000100331307;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100331408, ОбластьИмя) > 0 Тогда
												
				П000100331403 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100331403.Значение);
				П000100331404 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100331404.Значение);
				П000100331405 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100331405.Значение);
								
				мФормаОтчета.П000100331408.Значение = П000100331403 + П000100331404 + П000100331405;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100331608, ОбластьИмя) > 0 Тогда
												
				П000100331603 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100331603.Значение);
				П000100331604 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100331604.Значение);
				П000100331605 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100331605.Значение);
				П000100331606 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100331606.Значение);
				П000100331607 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100331607.Значение);
								
				мФормаОтчета.П000100331608.Значение = П000100331603 + П000100331604 + П000100331605 + П000100331606 + П000100331607;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П100100331008, ОбластьИмя) > 0 Тогда
				
				Если ЗначениеЗаполнено(ОбластьИмя) Тогда
					
					П100100331003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета["П100100331003" + ИндексВИмениОбласти].Значение);
					П100100331004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета["П100100331004" + ИндексВИмениОбласти].Значение);
					П100100331005 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета["П100100331005" + ИндексВИмениОбласти].Значение);
					П100100331006 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета["П100100331006" + ИндексВИмениОбласти].Значение);
					П100100331007 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета["П100100331007" + ИндексВИмениОбласти].Значение);
					
					мФормаОтчета["П100100331008" + ИндексВИмениОбласти].Значение
						= П100100331003 + П100100331004 + П100100331005 + П100100331006 + П100100331007;
					
				Иначе
					
					Индекс = 1;
					П100100331003 = 0;
					П100100331004 = 0;
					П100100331005 = 0;
					П100100331006 = 0;
					П100100331007 = 0;
					
					Пока НЕ мФормаОтчета.Найти("П100100331008_" + Индекс) = Неопределено Цикл
						
						П100100331003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета["П100100331003_" + Индекс].Значение);
						П100100331004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета["П100100331004_" + Индекс].Значение);
						П100100331005 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета["П100100331005_" + Индекс].Значение);
						П100100331006 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета["П100100331006_" + Индекс].Значение);
						П100100331007 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета["П100100331007_" + Индекс].Значение);
						
						мФормаОтчета["П100100331008_" + Индекс].Значение
							= П100100331003 + П100100331004 + П100100331005 + П100100331006 + П100100331007;
						
						Индекс = Индекс + 1;
						
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100331003, ОбластьИмя) > 0 Тогда
												
				П000100331403 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100331403.Значение);
				П000100331503 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100331503.Значение);
				П000100331603 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100331603.Значение);
				
				Индекс = 1;
				П100100331003 = 0;
				
				Пока НЕ мФормаОтчета.Найти("П100100331003_" + Индекс) = Неопределено Цикл
					П100100331003 = П100100331003 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета["П100100331003_" + Индекс].Значение);
					Индекс = Индекс + 1;
				КонецЦикла;
				
				мФормаОтчета.П000100331003.Значение = П000100331403 + П000100331503 + П000100331603 + П100100331003;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100331004, ОбластьИмя) > 0 Тогда
												
				П000100331404 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100331404.Значение);
				П000100331504 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100331504.Значение);
				П000100331604 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100331604.Значение);
				
				Индекс = 1;
				П100100331004 = 0;
				
				Пока НЕ мФормаОтчета.Найти("П100100331004_" + Индекс) = Неопределено Цикл
					П100100331004 = П100100331004 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета["П100100331004_" + Индекс].Значение);
					Индекс = Индекс + 1;
				КонецЦикла;
				
				мФормаОтчета.П000100331004.Значение = П000100331404 + П000100331504 + П000100331604 + П100100331004;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100331005, ОбластьИмя) > 0 Тогда
												
				П000100331205 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100331205.Значение);
				П000100331305 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100331305.Значение);
				П000100331405 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100331405.Значение);
				П000100331505 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100331505.Значение);
				П000100331605 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100331605.Значение);
				
				Индекс = 1;
				П100100331005 = 0;
				
				Пока НЕ мФормаОтчета.Найти("П100100331005_" + Индекс) = Неопределено Цикл
					П100100331005 = П100100331005 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета["П100100331005_" + Индекс].Значение);
					Индекс = Индекс + 1;
				КонецЦикла;
				
				мФормаОтчета.П000100331005.Значение = П000100331205 + П000100331305 + П000100331405 + П000100331505 + П000100331605 + П100100331005;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100331006, ОбластьИмя) > 0 Тогда
												
				П000100331606 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100331606.Значение);
				
				Индекс = 1;
				П100100331006 = 0;
				
				Пока НЕ мФормаОтчета.Найти("П100100331006_" + Индекс) = Неопределено Цикл
					П100100331006 = П100100331006 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета["П100100331006_" + Индекс].Значение);
					Индекс = Индекс + 1;
				КонецЦикла;
				
				мФормаОтчета.П000100331006.Значение = П000100331606 + П100100331006;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100331007, ОбластьИмя) > 0 Тогда
												
				П000100331107 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100331107.Значение);
				П000100331207 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100331207.Значение);
				П000100331307 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100331307.Значение);
				П000100331507 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100331507.Значение);
				П000100331607 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100331607.Значение);
				
				Индекс = 1;
				П100100331007 = 0;
				
				Пока НЕ мФормаОтчета.Найти("П100100331007_" + Индекс) = Неопределено Цикл
					П100100331007 = П100100331007 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета["П100100331007_" + Индекс].Значение);
					Индекс = Индекс + 1;
				КонецЦикла;
				
				мФормаОтчета.П000100331007.Значение = П000100331107 + П000100331207 + П000100331307 + П000100331507 + П000100331607 + П100100331007;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100331008, ОбластьИмя) > 0 Тогда
												
				П000100331108 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100331108.Значение);
				П000100331208 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100331208.Значение);
				П000100331308 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100331308.Значение);
				П000100331408 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100331408.Значение);
				П000100331608 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100331608.Значение);
				
				Индекс = 1;
				П100100331008 = 0;
				
				Пока НЕ мФормаОтчета.Найти("П100100331008_" + Индекс) = Неопределено Цикл
					П100100331008 = П100100331008 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета["П100100331008_" + Индекс].Значение);
					Индекс = Индекс + 1;
				КонецЦикла;
				
				мФормаОтчета.П000100331008.Значение = П000100331108 + П000100331208 + П000100331308 + П000100331408 + П000100331608 + П100100331008;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100332108, ОбластьИмя) > 0 Тогда
												
				П000100332107 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100332107.Значение);
				 								
				мФормаОтчета.П000100332108.Значение = П000100332107;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100332208, ОбластьИмя) > 0 Тогда
												
				П000100332205 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100332205.Значение);
				П000100332207 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100332207.Значение);
								
				мФормаОтчета.П000100332208.Значение = П000100332205 + П000100332207;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100332308, ОбластьИмя) > 0 Тогда
												
				П000100332305 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100332305.Значение);
				П000100332307 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100332307.Значение);
				 								
				мФормаОтчета.П000100332308.Значение = П000100332305 + П000100332307;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100332408, ОбластьИмя) > 0 Тогда
												
				П000100332403 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100332403.Значение);
				П000100332404 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100332404.Значение);
				П000100332405 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100332405.Значение);
				П000100332407 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100332407.Значение);
								
				мФормаОтчета.П000100332408.Значение = П000100332403 + П000100332404 + П000100332405 + П000100332407;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100332508, ОбластьИмя) > 0 Тогда
												
				П000100332503 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100332503.Значение);
				П000100332504 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100332504.Значение);
				П000100332505 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100332505.Значение);
				П000100332507 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100332507.Значение);
								
				мФормаОтчета.П000100332508.Значение = П000100332503 + П000100332504 + П000100332505 + П000100332507;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100332608, ОбластьИмя) > 0 Тогда
												
				П000100332603 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100332603.Значение);
				П000100332604 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100332604.Значение);
				П000100332605 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100332605.Значение);
				П000100332606 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100332606.Значение);
				П000100332607 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100332607.Значение);
								
				мФормаОтчета.П000100332608.Значение = П000100332603 + П000100332604 + П000100332605 + П000100332606 + П000100332607;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100332708, ОбластьИмя) > 0 Тогда
												
				П000100332707 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100332707.Значение);
				 								
				мФормаОтчета.П000100332708.Значение = П000100332707;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100332003, ОбластьИмя) > 0 Тогда
												
				П000100332403 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100332403.Значение);
				П000100332503 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100332503.Значение);
				П000100332603 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100332603.Значение);
								
				мФормаОтчета.П000100332003.Значение = П000100332403 + П000100332503 + П000100332603;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100332004, ОбластьИмя) > 0 Тогда
												
				П000100332404 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100332404.Значение);
				П000100332504 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100332504.Значение);
				П000100332604 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100332604.Значение);
								
				мФормаОтчета.П000100332004.Значение = П000100332404 + П000100332504 + П000100332604;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100332005, ОбластьИмя) > 0 Тогда
												
				П000100332205 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100332205.Значение);
				П000100332305 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100332305.Значение);
				П000100332405 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100332405.Значение);
				П000100332505 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100332505.Значение);
				П000100332605 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100332605.Значение);
								
				мФормаОтчета.П000100332005.Значение = П000100332205 + П000100332305 + П000100332405 + П000100332505 + П000100332605;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100332006, ОбластьИмя) > 0 Тогда
												
				П000100332606 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100332606.Значение);
				 								
				мФормаОтчета.П000100332006.Значение = П000100332606;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100332007, ОбластьИмя) > 0 Тогда
												
				П000100332107 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100332107.Значение);
				П000100332207 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100332207.Значение);
				П000100332307 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100332307.Значение);
				П000100332407 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100332407.Значение);
				П000100332507 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100332507.Значение);
				П000100332607 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100332607.Значение);
				П000100332707 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100332707.Значение);
								
				мФормаОтчета.П000100332007.Значение = П000100332107 + П000100332207 + П000100332307 + П000100332407 + П000100332507 + П000100332607 + П000100332707;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100332008, ОбластьИмя) > 0 Тогда
												
				П000100332108 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100332108.Значение);
				П000100332208 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100332208.Значение);
				П000100332308 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100332308.Значение);
				П000100332408 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100332408.Значение);
				П000100332508 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100332508.Значение);
				П000100332608 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100332608.Значение);
				П000100332708 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100332708.Значение);
								
				мФормаОтчета.П000100332008.Значение = П000100332108 + П000100332208 + П000100332308 + П000100332408 + П000100332508 + П000100332608 + П000100332708;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100334007, ОбластьИмя) > 0 Тогда
												
				П000100334006 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100334006.Значение);
				 								
				мФормаОтчета.П000100334007.Значение = -П000100334006;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100330008, ОбластьИмя) > 0 Тогда
												
				П000100330003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100330003.Значение);
				П000100330004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100330004.Значение);
				П000100330005 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100330005.Значение);
				П000100330006 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100330006.Значение);
				П000100330007 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100330007.Значение);
								
				мФормаОтчета.П000100330008.Значение = П000100330003 + П000100330004 + П000100330005 + П000100330006 + П000100330007;
				
			КонецЕсли;
			
			// Таблица 2
			//
						
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100340105, ОбластьИмя) > 0 Тогда
												
				П000100340106 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100340106.Значение);
				П000100340103 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100340103.Значение);
				П000100340104 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100340104.Значение);
								
				мФормаОтчета.П000100340105.Значение = П000100340106 - П000100340103 - П000100340104;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100341106, ОбластьИмя) > 0 Тогда
												
				П000100341103 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100341103.Значение);
				П000100341104 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100341104.Значение);
				П000100341105 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100341105.Значение);
								
				мФормаОтчета.П000100341106.Значение = П000100341103 + П000100341104 + П000100341105;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100342106, ОбластьИмя) > 0 Тогда
												
				П000100342103 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100342103.Значение);
				П000100342104 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100342104.Значение);
				П000100342105 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100342105.Значение);
								
				мФормаОтчета.П000100342106.Значение = П000100342103 + П000100342104 + П000100342105;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100350103, ОбластьИмя) > 0 Тогда
												
				П000100340103 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100340103.Значение);
				П000100341103 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100341103.Значение);
				П000100342103 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100342103.Значение);
								
				мФормаОтчета.П000100350103.Значение = П000100340103 + П000100341103 + П000100342103;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100350104, ОбластьИмя) > 0 Тогда
												
				П000100340104 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100340104.Значение);
				П000100341104 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100341104.Значение);
				П000100342104 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100342104.Значение);
								
				мФормаОтчета.П000100350104.Значение = П000100340104 + П000100341104 + П000100342104;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100350105, ОбластьИмя) > 0 Тогда
												
				П000100340105 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100340105.Значение);
				П000100341105 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100341105.Значение);
				П000100342105 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100342105.Значение);
								
				мФормаОтчета.П000100350105.Значение = П000100340105 + П000100341105 + П000100342105;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100350106, ОбластьИмя) > 0 Тогда
												
				П000100350103 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100350103.Значение);
				П000100350104 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100350104.Значение);
				П000100350105 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100350105.Значение);
								
				мФормаОтчета.П000100350106.Значение = П000100350103 + П000100350104 + П000100350105;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П100100340006_1, ОбластьИмя) > 0 Тогда
												
				П100100340003_1 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П100100340003_1.Значение);
				П100100340004_1 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П100100340004_1.Значение);
				П100100340005_1 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П100100340005_1.Значение);
								
				мФормаОтчета.П100100340006_1.Значение = П100100340003_1 + П100100340004_1 + П100100340005_1;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П100100341006_1, ОбластьИмя) > 0 Тогда
												
				П100100341003_1 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П100100341003_1.Значение);
				П100100341004_1 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П100100341004_1.Значение);
				П100100341005_1 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П100100341005_1.Значение);
								
				мФормаОтчета.П100100341006_1.Значение = П100100341003_1 + П100100341004_1 + П100100341005_1;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П100100342006_1, ОбластьИмя) > 0 Тогда
												
				П100100342003_1 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П100100342003_1.Значение);
				П100100342004_1 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П100100342004_1.Значение);
				П100100342005_1 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П100100342005_1.Значение);
								
				мФормаОтчета.П100100342006_1.Значение = П100100342003_1 + П100100342004_1 + П100100342005_1;
				
			КонецЕсли;
				
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П100100350003_1, ОбластьИмя) > 0 Тогда
												
				П100100340003_1 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П100100340003_1.Значение);
				П100100341003_1 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П100100341003_1.Значение);
				П100100342003_1 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П100100342003_1.Значение);
								
				мФормаОтчета.П100100350003_1.Значение = П100100340003_1 + П100100341003_1 + П100100342003_1;
				
			КонецЕсли;				
				
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П100100350004_1, ОбластьИмя) > 0 Тогда
												
				П100100340004_1 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П100100340004_1.Значение);
				П100100341004_1 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П100100341004_1.Значение);
				П100100342004_1 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П100100342004_1.Значение);
								
				мФормаОтчета.П100100350004_1.Значение = П100100340004_1 + П100100341004_1 + П100100342004_1;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П100100350005_1, ОбластьИмя) > 0 Тогда
												
				П100100340005_1 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П100100340005_1.Значение);
				П100100341005_1 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П100100341005_1.Значение);
				П100100342005_1 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П100100342005_1.Значение);
								
				мФормаОтчета.П100100350005_1.Значение = П100100340005_1 + П100100341005_1 + П100100342005_1;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П100100350006_1, ОбластьИмя) > 0 Тогда
												
				П100100350003_1 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П100100350003_1.Значение);
				П100100350004_1 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П100100350004_1.Значение);
				П100100350005_1 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П100100350005_1.Значение);
								
				мФормаОтчета.П100100350006_1.Значение = П100100350003_1 + П100100350004_1 + П100100350005_1;
				
			КонецЕсли;
											
			// заглавный блок
			// значения в суммируемых показателях уже прошли стадию округления, если это было необходимо
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100341003, ОбластьИмя) > 0 Тогда
												
				П000100341003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100341103.Значение);
				П000100341003 = П000100341003 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П100100341003_1.Значение);
								
				мФормаОтчета.П000100341003.Значение = П000100341003;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100341004, ОбластьИмя) > 0 Тогда
												
				П000100341004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100341104.Значение);
				П000100341004 = П000100341004 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П100100341004_1.Значение);
								
				мФормаОтчета.П000100341004.Значение = П000100341004;
				
			КонецЕсли;
			      		
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100341005, ОбластьИмя) > 0 Тогда
												
				П000100341005 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100341105.Значение);
				П000100341005 = П000100341005 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П100100341005_1.Значение);
								
				мФормаОтчета.П000100341005.Значение = П000100341005;
				
			КонецЕсли;						
			                    			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100342003, ОбластьИмя) > 0 Тогда
												
				П000100342003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100342103.Значение);
				П000100342003 = П000100342003 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П100100342003_1.Значение);
								
				мФормаОтчета.П000100342003.Значение = П000100342003;
				
			КонецЕсли;			
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100342004, ОбластьИмя) > 0 Тогда
												
				П000100342004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100342104.Значение);
				П000100342004 = П000100342004 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П100100342004_1.Значение);
								
				мФормаОтчета.П000100342004.Значение = П000100342004;
				
			КонецЕсли;			
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100342005, ОбластьИмя) > 0 Тогда
												
				П000100342005 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100342105.Значение);
				П000100342005 = П000100342005 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П100100342005_1.Значение);
								
				мФормаОтчета.П000100342005.Значение = П000100342005;
				
			КонецЕсли;			
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100340005, ОбластьИмя) > 0 Тогда
												
				П000100340006 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100340006.Значение);
				П000100340003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100340003.Значение);
				П000100340004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100340004.Значение);
								
				мФормаОтчета.П000100340005.Значение = П000100340006 - П000100340003 - П000100340004;
				
			КонецЕсли;

			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100341006, ОбластьИмя) > 0 Тогда
												
				П000100341003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100341003.Значение);
				П000100341004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100341004.Значение);
				П000100341005 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100341005.Значение);
								
				мФормаОтчета.П000100341006.Значение = П000100341003 + П000100341004 + П000100341005;
				
			КонецЕсли;

			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100342006, ОбластьИмя) > 0 Тогда
												
				П000100342003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100342003.Значение);
				П000100342004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100342004.Значение);
				П000100342005 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100342005.Значение);
								
				мФормаОтчета.П000100342006.Значение = П000100342003 + П000100342004 + П000100342005;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100350003, ОбластьИмя) > 0 Тогда
												
				П000100340003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100340003.Значение);
				П000100341003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100341003.Значение);
				П000100342003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100342003.Значение);
								
				мФормаОтчета.П000100350003.Значение = П000100340003 + П000100341003 + П000100342003;
				
			КонецЕсли;

			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100350004, ОбластьИмя) > 0 Тогда
												
				П000100340004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100340004.Значение);
				П000100341004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100341004.Значение);
				П000100342004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100342004.Значение);
								
				мФормаОтчета.П000100350004.Значение = П000100340004 + П000100341004 + П000100342004;
				
			КонецЕсли;

			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100350005, ОбластьИмя) > 0 Тогда
												
				П000100340005 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100340005.Значение);
				П000100341005 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100341005.Значение);
				П000100342005 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100342005.Значение);
								
				мФормаОтчета.П000100350005.Значение = П000100340005 + П000100341005 + П000100342005;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100350006, ОбластьИмя) > 0 Тогда
												
				П000100350003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100350003.Значение);
				П000100350004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100350004.Значение);
				П000100350005 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100350005.Значение);
								
				мФормаОтчета.П000100350006.Значение = П000100350003 + П000100350004 + П000100350005;
				
			КонецЕсли;
			
		Иначе
			
			мФормаОтчета = Форма.СтруктураДанныхОИК;
			
			// Таблица 1
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100310008, ОбластьИмя) > 0 Тогда
												
				П000100310003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100310003);
				П000100310004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100310004);
				П000100310005 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100310005);
				П000100310006 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100310006);
				П000100310007 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100310007);
				
				мФормаОтчета.П000100310008 = П000100310003 + П000100310004 + П000100310005 + П000100310006 + П000100310007;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100321108, ОбластьИмя) > 0 Тогда
												
				П000100321107 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100321107);
								
				мФормаОтчета.П000100321108 = П000100321107;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100321208, ОбластьИмя) > 0 Тогда
												
				П000100321205 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100321205);
				П000100321207 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100321207);
								
				мФормаОтчета.П000100321208 = П000100321205 + П000100321207;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100321308, ОбластьИмя) > 0 Тогда
												
				П000100321305 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100321305);
				П000100321307 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100321307);
								
				мФормаОтчета.П000100321308 = П000100321305 + П000100321307;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100321408, ОбластьИмя) > 0 Тогда
												
				П000100321403 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100321403);
				П000100321404 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100321404);
				П000100321405 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100321405);
								
				мФормаОтчета.П000100321408 = П000100321403 + П000100321404 + П000100321405;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100321608, ОбластьИмя) > 0 Тогда
												
				П000100321603 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100321603);
				П000100321604 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100321604);
				П000100321605 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100321605);
				П000100321606 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100321606);
				П000100321607 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100321607);
								
				мФормаОтчета.П000100321608 = П000100321603 + П000100321604 + П000100321605 + П000100321606 + П000100321607;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П100100321008, ОбластьИмя) > 0 Тогда
				
				ЗначениеПоказателя = Неопределено;
				
				Если ЗначениеЗаполнено(ОбластьИмя) Тогда
					
					П100100321003 = 0;
					П100100321004 = 0;
					П100100321005 = 0;
					П100100321006 = 0;
					П100100321007 = 0;
					
					Если мФормаОтчета.Свойство("П100100321003" + ИндексВИмениОбласти, ЗначениеПоказателя) Тогда
						П100100321003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, ЗначениеПоказателя);
					КонецЕсли;
					
					Если мФормаОтчета.Свойство("П100100321004" + ИндексВИмениОбласти, ЗначениеПоказателя) Тогда
						П100100321004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, ЗначениеПоказателя);
					КонецЕсли;
					
					Если мФормаОтчета.Свойство("П100100321005" + ИндексВИмениОбласти, ЗначениеПоказателя) Тогда
						П100100321005 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, ЗначениеПоказателя);
					КонецЕсли;
					
					Если мФормаОтчета.Свойство("П100100321006" + ИндексВИмениОбласти, ЗначениеПоказателя) Тогда
						П100100321006 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, ЗначениеПоказателя);
					КонецЕсли;
					
					Если мФормаОтчета.Свойство("П100100321007" + ИндексВИмениОбласти, ЗначениеПоказателя) Тогда
						П100100321007 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, ЗначениеПоказателя);
					КонецЕсли;
					
					мФормаОтчета.Вставить("П100100321008" + ИндексВИмениОбласти,
						П100100321003 + П100100321004 + П100100321005 + П100100321006 + П100100321007);
					
				Иначе
					
					Индекс = 1;
					
					Пока мФормаОтчета.Свойство("П100100321003_" + Индекс)
					 ИЛИ мФормаОтчета.Свойство("П100100321004_" + Индекс)
					 ИЛИ мФормаОтчета.Свойство("П100100321005_" + Индекс)
					 ИЛИ мФормаОтчета.Свойство("П100100321006_" + Индекс)
					 ИЛИ мФормаОтчета.Свойство("П100100321007_" + Индекс)
					 ИЛИ мФормаОтчета.Свойство("П100100321008_" + Индекс) Цикл
						
						П100100321003 = 0;
						П100100321004 = 0;
						П100100321005 = 0;
						П100100321006 = 0;
						П100100321007 = 0;
						
						Если мФормаОтчета.Свойство("П100100321003_" + Индекс, ЗначениеПоказателя) Тогда
							П100100321003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, ЗначениеПоказателя);
						КонецЕсли;
						
						Если мФормаОтчета.Свойство("П100100321004_" + Индекс, ЗначениеПоказателя) Тогда
							П100100321004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, ЗначениеПоказателя);
						КонецЕсли;
						
						Если мФормаОтчета.Свойство("П100100321005_" + Индекс, ЗначениеПоказателя) Тогда
							П100100321005 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, ЗначениеПоказателя);
						КонецЕсли;
						
						Если мФормаОтчета.Свойство("П100100321006_" + Индекс, ЗначениеПоказателя) Тогда
							П100100321006 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, ЗначениеПоказателя);
						КонецЕсли;
						
						Если мФормаОтчета.Свойство("П100100321007_" + Индекс, ЗначениеПоказателя) Тогда
							П100100321007 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, ЗначениеПоказателя);
						КонецЕсли;
						
						мФормаОтчета.Вставить("П100100321008_" + Индекс,
							П100100321003 + П100100321004 + П100100321005 + П100100321006 + П100100321007);
						
						Индекс = Индекс + 1;
						
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100321003, ОбластьИмя) > 0 Тогда
												
				П000100321403 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100321403);
				П000100321503 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100321503);
				П000100321603 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100321603);
				
				Индекс = 1;
				П100100321003  = 0;
				П100100321003_ = 0;
				
				Пока мФормаОтчета.Свойство("П100100321003_" + Индекс, П100100321003_) Цикл
					П100100321003 = П100100321003 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, П100100321003_);
					Индекс = Индекс + 1;
				КонецЦикла;
				
				мФормаОтчета.П000100321003 = П000100321403 + П000100321503 + П000100321603 + П100100321003;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100321004, ОбластьИмя) > 0 Тогда
												
				П000100321404 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100321404);
				П000100321504 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100321504);
				П000100321604 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100321604);
				
				Индекс = 1;
				П100100321004  = 0;
				П100100321004_ = 0;
				
				Пока мФормаОтчета.Свойство("П100100321004_" + Индекс, П100100321004_) Цикл
					П100100321004 = П100100321004 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, П100100321004_);
					Индекс = Индекс + 1;
				КонецЦикла;
				
				мФормаОтчета.П000100321004 = П000100321404 + П000100321504 + П000100321604 + П100100321004;
				
			КонецЕсли;
									
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100321005, ОбластьИмя) > 0 Тогда
												
				П000100321205 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100321205);
				П000100321305 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100321305);
				П000100321405 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100321405);
				П000100321505 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100321505);
				П000100321605 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100321605);
				
				Индекс = 1;
				П100100321005  = 0;
				П100100321005_ = 0;
				
				Пока мФормаОтчета.Свойство("П100100321005_" + Индекс, П100100321005_) Цикл
					П100100321005 = П100100321005 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, П100100321005_);
					Индекс = Индекс + 1;
				КонецЦикла;
				
				мФормаОтчета.П000100321005 = П000100321205 + П000100321305 + П000100321405 + П000100321505 + П000100321605 + П100100321005;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100321006, ОбластьИмя) > 0 Тогда
												
				П000100321606 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100321606);
				
				Индекс = 1;
				П100100321006  = 0;
				П100100321006_ = 0;
				
				Пока мФормаОтчета.Свойство("П100100321006_" + Индекс, П100100321006_) Цикл
					П100100321006 = П100100321006 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, П100100321006_);
					Индекс = Индекс + 1;
				КонецЦикла;
				
				мФормаОтчета.П000100321006 = П000100321606 + П100100321006;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100321007, ОбластьИмя) > 0 Тогда
												
				П000100321107 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100321107);
				П000100321207 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100321207);
				П000100321307 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100321307);
				П000100321507 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100321507);
				П000100321607 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100321607);
				
				Индекс = 1;
				П100100321007  = 0;
				П100100321007_ = 0;
				
				Пока мФормаОтчета.Свойство("П100100321007_" + Индекс, П100100321007_) Цикл
					П100100321007 = П100100321007 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, П100100321007_);
					Индекс = Индекс + 1;
				КонецЦикла;
				
				мФормаОтчета.П000100321007 = П000100321107 + П000100321207 + П000100321307 + П000100321507 + П000100321607 + П100100321007;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100321008, ОбластьИмя) > 0 Тогда
												
				П000100321108 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100321108);
				П000100321208 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100321208);
				П000100321308 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100321308);
				П000100321408 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100321408);
				П000100321608 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100321608);
				
				Индекс = 1;
				П100100321008  = 0;
				П100100321008_ = 0;
				
				Пока мФормаОтчета.Свойство("П100100321008_" + Индекс, П100100321008_) Цикл
					П100100321008 = П100100321008 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, П100100321008_);
					Индекс = Индекс + 1;
				КонецЦикла;
				
				мФормаОтчета.П000100321008 = П000100321108 + П000100321208 + П000100321308 + П000100321408 + П000100321608 + П100100321008;
				
			КонецЕсли;
						
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100322108, ОбластьИмя) > 0 Тогда
												
				П000100322107 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100322107);
				 								
				мФормаОтчета.П000100322108 = П000100322107;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100322208, ОбластьИмя) > 0 Тогда
												
				П000100322205 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100322205);
				П000100322207 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100322207);
				 								
				мФормаОтчета.П000100322208 = П000100322205 + П000100322207;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100322308, ОбластьИмя) > 0 Тогда
												
				П000100322305 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100322305);
				П000100322307 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100322307);
								
				мФормаОтчета.П000100322308 = П000100322305 + П000100322307;
				
			КонецЕсли;
						
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100322408, ОбластьИмя) > 0 Тогда
												
				П000100322403 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100322403);
				П000100322404 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100322404);
				П000100322405 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100322405);
				П000100322407 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100322407);
								
				мФормаОтчета.П000100322408 = П000100322403 + П000100322404 + П000100322405 + П000100322407;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100322508, ОбластьИмя) > 0 Тогда
												
				П000100322503 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100322503);
				П000100322504 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100322504);
				П000100322505 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100322505);
				П000100322507 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100322507);
								
				мФормаОтчета.П000100322508 = П000100322503 + П000100322504 + П000100322505 + П000100322507;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100322608, ОбластьИмя) > 0 Тогда
												
				П000100322603 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100322603);
				П000100322604 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100322604);
				П000100322605 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100322605);
				П000100322606 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100322606);
				П000100322607 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100322607);
								
				мФормаОтчета.П000100322608 = П000100322603 + П000100322604 + П000100322605 + П000100322606 + П000100322607;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100322708, ОбластьИмя) > 0 Тогда
												
				П000100322707 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100322707);
				 				 								
				мФормаОтчета.П000100322708 = П000100322707;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100322008, ОбластьИмя) > 0 Тогда
												
				П000100322003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100322003);
				П000100322004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100322004);
				П000100322005 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100322005);
				П000100322006 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100322006);
				П000100322007 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100322007);
								
				мФормаОтчета.П000100322008 = П000100322003 + П000100322004 + П000100322005 + П000100322006 + П000100322007;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100324007, ОбластьИмя) > 0 Тогда
												
				П000100324006 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100324006);
				 								
				мФормаОтчета.П000100324007 = -П000100324006;
				
			КонецЕсли;
									
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100322003, ОбластьИмя) > 0 Тогда
												
				П000100322403 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100322403);
				П000100322503 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100322503);
				П000100322603 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100322603);
								
				мФормаОтчета.П000100322003 = П000100322403 + П000100322503 + П000100322603;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100322004, ОбластьИмя) > 0 Тогда
												
				П000100322404 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100322404);
				П000100322504 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100322504);
				П000100322604 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100322604);
								
				мФормаОтчета.П000100322004 = П000100322404 + П000100322504 + П000100322604;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100322005, ОбластьИмя) > 0 Тогда
												
				П000100322205 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100322205);
				П000100322305 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100322305);
				П000100322405 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100322405);
				П000100322505 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100322505);
				П000100322605 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100322605);
								
				мФормаОтчета.П000100322005 = П000100322205 + П000100322305 + П000100322405 + П000100322505 + П000100322605;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100322006, ОбластьИмя) > 0 Тогда
												
				П000100322606 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100322606);
				 								
				мФормаОтчета.П000100322006 = П000100322606;
				
			КонецЕсли;
						
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100322007, ОбластьИмя) > 0 Тогда
												
				П000100322107 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100322107);
				П000100322207 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100322207);
				П000100322307 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100322307);
				П000100322407 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100322407);
				П000100322507 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100322507);
				П000100322607 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100322607);
				П000100322707 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100322707);
								
				мФормаОтчета.П000100322007 = П000100322107 + П000100322207 + П000100322307 + П000100322407 + П000100322507 + П000100322607 + П000100322707;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100322008, ОбластьИмя) > 0 Тогда
												
				П000100322108 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100322108);
				П000100322208 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100322208);
				П000100322308 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100322308);
				П000100322408 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100322408);
				П000100322508 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100322508);
				П000100322608 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100322608);
				П000100322708 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100322708);
								
				мФормаОтчета.П000100322008 = П000100322108 + П000100322208 + П000100322308 + П000100322408 + П000100322508 + П000100322608 + П000100322708;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100320008, ОбластьИмя) > 0 Тогда
												
				П000100320003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100320003);
				П000100320004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100320004);
				П000100320005 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100320005);
				П000100320006 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100320006);
				П000100320007 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100320007);
								
				мФормаОтчета.П000100320008 = П000100320003 + П000100320004 + П000100320005 + П000100320006 + П000100320007;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100331108, ОбластьИмя) > 0 Тогда
												
				П000100331107 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100331107);
				 								
				мФормаОтчета.П000100331108 = П000100331107;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100331208, ОбластьИмя) > 0 Тогда
												
				П000100331205 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100331205);
				П000100331207 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100331207);
											
				мФормаОтчета.П000100331208 = П000100331205 + П000100331207;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100331308, ОбластьИмя) > 0 Тогда
												
				П000100331305 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100331305);
				П000100331307 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100331307);
				 								
				мФормаОтчета.П000100331308 = П000100331305 + П000100331307;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100331408, ОбластьИмя) > 0 Тогда
												
				П000100331403 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100331403);
				П000100331404 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100331404);
				П000100331405 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100331405);
								
				мФормаОтчета.П000100331408 = П000100331403 + П000100331404 + П000100331405;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100331608, ОбластьИмя) > 0 Тогда
												
				П000100331603 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100331603);
				П000100331604 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100331604);
				П000100331605 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100331605);
				П000100331606 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100331606);
				П000100331607 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100331607);
								
				мФормаОтчета.П000100331608 = П000100331603 + П000100331604 + П000100331605 + П000100331606 + П000100331607;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П100100331008, ОбластьИмя) > 0 Тогда
				
				ЗначениеПоказателя = Неопределено;
				
				Если ЗначениеЗаполнено(ОбластьИмя) Тогда
					
					П100100331003 = 0;
					П100100331004 = 0;
					П100100331005 = 0;
					П100100331006 = 0;
					П100100331007 = 0;
					
					Если мФормаОтчета.Свойство("П100100331003" + ИндексВИмениОбласти, ЗначениеПоказателя) Тогда
						П100100331003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, ЗначениеПоказателя);
					КонецЕсли;
					
					Если мФормаОтчета.Свойство("П100100331004" + ИндексВИмениОбласти, ЗначениеПоказателя) Тогда
						П100100331004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, ЗначениеПоказателя);
					КонецЕсли;
					
					Если мФормаОтчета.Свойство("П100100331005" + ИндексВИмениОбласти, ЗначениеПоказателя) Тогда
						П100100331005 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, ЗначениеПоказателя);
					КонецЕсли;
					
					Если мФормаОтчета.Свойство("П100100331006" + ИндексВИмениОбласти, ЗначениеПоказателя) Тогда
						П100100331006 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, ЗначениеПоказателя);
					КонецЕсли;
					
					Если мФормаОтчета.Свойство("П100100331007" + ИндексВИмениОбласти, ЗначениеПоказателя) Тогда
						П100100331007 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, ЗначениеПоказателя);
					КонецЕсли;
					
					мФормаОтчета.Вставить("П100100331008" + ИндексВИмениОбласти,
						П100100331003 + П100100331004 + П100100331005 + П100100331006 + П100100331007);
					
				Иначе
					
					Индекс = 1;
					
					Пока мФормаОтчета.Свойство("П100100331003_" + Индекс)
					 ИЛИ мФормаОтчета.Свойство("П100100331004_" + Индекс)
					 ИЛИ мФормаОтчета.Свойство("П100100331005_" + Индекс)
					 ИЛИ мФормаОтчета.Свойство("П100100331006_" + Индекс)
					 ИЛИ мФормаОтчета.Свойство("П100100331007_" + Индекс)
					 ИЛИ мФормаОтчета.Свойство("П100100331008_" + Индекс) Цикл
						
						П100100331003 = 0;
						П100100331004 = 0;
						П100100331005 = 0;
						П100100331006 = 0;
						П100100331007 = 0;
						
						Если мФормаОтчета.Свойство("П100100331003_" + Индекс, ЗначениеПоказателя) Тогда
							П100100331003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, ЗначениеПоказателя);
						КонецЕсли;
						
						Если мФормаОтчета.Свойство("П100100331004_" + Индекс, ЗначениеПоказателя) Тогда
							П100100331004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, ЗначениеПоказателя);
						КонецЕсли;
						
						Если мФормаОтчета.Свойство("П100100331005_" + Индекс, ЗначениеПоказателя) Тогда
							П100100331005 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, ЗначениеПоказателя);
						КонецЕсли;
						
						Если мФормаОтчета.Свойство("П100100331006_" + Индекс, ЗначениеПоказателя) Тогда
							П100100331006 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, ЗначениеПоказателя);
						КонецЕсли;
						
						Если мФормаОтчета.Свойство("П100100331007_" + Индекс, ЗначениеПоказателя) Тогда
							П100100331007 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, ЗначениеПоказателя);
						КонецЕсли;
						
						мФормаОтчета.Вставить("П100100331008_" + Индекс,
							П100100331003 + П100100331004 + П100100331005 + П100100331006 + П100100331007);
						
						Индекс = Индекс + 1;
						
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100331003, ОбластьИмя) > 0 Тогда
												
				П000100331403 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100331403);
				П000100331503 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100331503);
				П000100331603 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100331603);
				
				Индекс = 1;
				П100100331003  = 0;
				П100100331003_ = 0;
				
				Пока мФормаОтчета.Свойство("П100100331003_" + Индекс, П100100331003_) Цикл
					П100100331003 = П100100331003 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, П100100331003_);
					Индекс = Индекс + 1;
				КонецЦикла;
				
				мФормаОтчета.П000100331003 = П000100331403 + П000100331503 + П000100331603 + П100100331003;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100331004, ОбластьИмя) > 0 Тогда
												
				П000100331404 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100331404);
				П000100331504 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100331504);
				П000100331604 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100331604);
				
				Индекс = 1;
				П100100331004  = 0;
				П100100331004_ = 0;
				
				Пока мФормаОтчета.Свойство("П100100331004_" + Индекс, П100100331004_) Цикл
					П100100331004 = П100100331004 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, П100100331004_);
					Индекс = Индекс + 1;
				КонецЦикла;
				
				мФормаОтчета.П000100331004 = П000100331404 + П000100331504 + П000100331604 + П100100331004;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100331005, ОбластьИмя) > 0 Тогда
												
				П000100331205 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100331205);
				П000100331305 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100331305);
				П000100331405 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100331405);
				П000100331505 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100331505);
				П000100331605 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100331605);
				
				Индекс = 1;
				П100100331005  = 0;
				П100100331005_ = 0;
				
				Пока мФормаОтчета.Свойство("П100100331005_" + Индекс, П100100331005_) Цикл
					П100100331005 = П100100331005 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, П100100331005_);
					Индекс = Индекс + 1;
				КонецЦикла;
				
				мФормаОтчета.П000100331005 = П000100331205 + П000100331305 + П000100331405 + П000100331505 + П000100331605 + П100100331005;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100331006, ОбластьИмя) > 0 Тогда
												
				П000100331606 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100331606);
				
				Индекс = 1;
				П100100331006  = 0;
				П100100331006_ = 0;
				
				Пока мФормаОтчета.Свойство("П100100331006_" + Индекс, П100100331006_) Цикл
					П100100331006 = П100100331006 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, П100100331006_);
					Индекс = Индекс + 1;
				КонецЦикла;
				
				мФормаОтчета.П000100331006 = П000100331606 + П100100331006;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100331007, ОбластьИмя) > 0 Тогда
												
				П000100331107 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100331107);
				П000100331207 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100331207);
				П000100331307 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100331307);
				П000100331507 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100331507);
				П000100331607 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100331607);
				
				Индекс = 1;
				П100100331007  = 0;
				П100100331007_ = 0;
				
				Пока мФормаОтчета.Свойство("П100100331007_" + Индекс, П100100331007_) Цикл
					П100100331007 = П100100331007 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, П100100331007_);
					Индекс = Индекс + 1;
				КонецЦикла;
				
				мФормаОтчета.П000100331007 = П000100331107 + П000100331207 + П000100331307 + П000100331507 + П000100331607 + П100100331007;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100331008, ОбластьИмя) > 0 Тогда
												
				П000100331108 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100331108);
				П000100331208 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100331208);
				П000100331308 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100331308);
				П000100331408 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100331408);
				П000100331608 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100331608);
				
				Индекс = 1;
				П100100331008  = 0;
				П100100331008_ = 0;
				
				Пока мФормаОтчета.Свойство("П100100331008_" + Индекс, П100100331008_) Цикл
					П100100331008 = П100100331008 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, П100100331008_);
					Индекс = Индекс + 1;
				КонецЦикла;
				
				мФормаОтчета.П000100331008 = П000100331108 + П000100331208 + П000100331308 + П000100331408 + П000100331608 + П100100331008;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100332108, ОбластьИмя) > 0 Тогда
												
				П000100332107 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100332107);
				 								
				мФормаОтчета.П000100332108 = П000100332107;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100332208, ОбластьИмя) > 0 Тогда
												
				П000100332205 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100332205);
				П000100332207 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100332207);
								
				мФормаОтчета.П000100332208 = П000100332205 + П000100332207;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100332308, ОбластьИмя) > 0 Тогда
												
				П000100332305 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100332305);
				П000100332307 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100332307);
				 								
				мФормаОтчета.П000100332308 = П000100332305 + П000100332307;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100332408, ОбластьИмя) > 0 Тогда
												
				П000100332403 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100332403);
				П000100332404 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100332404);
				П000100332405 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100332405);
				П000100332407 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100332407);
								
				мФормаОтчета.П000100332408 = П000100332403 + П000100332404 + П000100332405 + П000100332407;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100332508, ОбластьИмя) > 0 Тогда
												
				П000100332503 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100332503);
				П000100332504 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100332504);
				П000100332505 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100332505);
				П000100332507 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100332507);
								
				мФормаОтчета.П000100332508 = П000100332503 + П000100332504 + П000100332505 + П000100332507;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100332608, ОбластьИмя) > 0 Тогда
												
				П000100332603 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100332603);
				П000100332604 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100332604);
				П000100332605 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100332605);
				П000100332606 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100332606);
				П000100332607 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100332607);
								
				мФормаОтчета.П000100332608 = П000100332603 + П000100332604 + П000100332605 + П000100332606 + П000100332607;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100332708, ОбластьИмя) > 0 Тогда
												
				П000100332707 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100332707);
				 								
				мФормаОтчета.П000100332708 = П000100332707;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100332003, ОбластьИмя) > 0 Тогда
												
				П000100332403 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100332403);
				П000100332503 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100332503);
				П000100332603 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100332603);
								
				мФормаОтчета.П000100332003 = П000100332403 + П000100332503 + П000100332603;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100332004, ОбластьИмя) > 0 Тогда
												
				П000100332404 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100332404);
				П000100332504 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100332504);
				П000100332604 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100332604);
								
				мФормаОтчета.П000100332004 = П000100332404 + П000100332504 + П000100332604;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100332005, ОбластьИмя) > 0 Тогда
												
				П000100332205 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100332205);
				П000100332305 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100332305);
				П000100332405 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100332405);
				П000100332505 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100332505);
				П000100332605 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100332605);
								
				мФормаОтчета.П000100332005 = П000100332205 + П000100332305 + П000100332405 + П000100332505 + П000100332605;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100332006, ОбластьИмя) > 0 Тогда
												
				П000100332606 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100332606);
				 								
				мФормаОтчета.П000100332006 = П000100332606;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100332007, ОбластьИмя) > 0 Тогда
												
				П000100332107 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100332107);
				П000100332207 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100332207);
				П000100332307 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100332307);
				П000100332407 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100332407);
				П000100332507 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100332507);
				П000100332607 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100332607);
				П000100332707 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100332707);
								
				мФормаОтчета.П000100332007 = П000100332107 + П000100332207 + П000100332307 + П000100332407 + П000100332507 + П000100332607 + П000100332707;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100332008, ОбластьИмя) > 0 Тогда
												
				П000100332108 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100332108);
				П000100332208 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100332208);
				П000100332308 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100332308);
				П000100332408 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100332408);
				П000100332508 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100332508);
				П000100332608 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100332608);
				П000100332708 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100332708);
								
				мФормаОтчета.П000100332008 = П000100332108 + П000100332208 + П000100332308 + П000100332408 + П000100332508 + П000100332608 + П000100332708;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100334007, ОбластьИмя) > 0 Тогда
												
				П000100334006 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100334006);
				 								
				мФормаОтчета.П000100334007 = -П000100334006;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100330008, ОбластьИмя) > 0 Тогда
												
				П000100330003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100330003);
				П000100330004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100330004);
				П000100330005 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100330005);
				П000100330006 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100330006);
				П000100330007 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100330007);
								
				мФормаОтчета.П000100330008 = П000100330003 + П000100330004 + П000100330005 + П000100330006 + П000100330007;
				
			КонецЕсли;
			
			// Таблица 2
			//
						
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100340105, ОбластьИмя) > 0 Тогда
												
				П000100340106 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100340106);
				П000100340103 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100340103);
				П000100340104 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100340104);
								
				мФормаОтчета.П000100340105 = П000100340106 - П000100340103 - П000100340104;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100341106, ОбластьИмя) > 0 Тогда
												
				П000100341103 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100341103);
				П000100341104 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100341104);
				П000100341105 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100341105);
								
				мФормаОтчета.П000100341106 = П000100341103 + П000100341104 + П000100341105;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100342106, ОбластьИмя) > 0 Тогда
												
				П000100342103 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100342103);
				П000100342104 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100342104);
				П000100342105 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100342105);
								
				мФормаОтчета.П000100342106 = П000100342103 + П000100342104 + П000100342105;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100350103, ОбластьИмя) > 0 Тогда
												
				П000100340103 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100340103);
				П000100341103 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100341103);
				П000100342103 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100342103);
								
				мФормаОтчета.П000100350103 = П000100340103 + П000100341103 + П000100342103;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100350104, ОбластьИмя) > 0 Тогда
												
				П000100340104 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100340104);
				П000100341104 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100341104);
				П000100342104 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100342104);
								
				мФормаОтчета.П000100350104 = П000100340104 + П000100341104 + П000100342104;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100350105, ОбластьИмя) > 0 Тогда
												
				П000100340105 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100340105);
				П000100341105 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100341105);
				П000100342105 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100342105);
								
				мФормаОтчета.П000100350105 = П000100340105 + П000100341105 + П000100342105;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100350106, ОбластьИмя) > 0 Тогда
												
				П000100350103 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100350103);
				П000100350104 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100350104);
				П000100350105 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100350105);
								
				мФормаОтчета.П000100350106 = П000100350103 + П000100350104 + П000100350105;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П100100340006_1, ОбластьИмя) > 0 Тогда
												
				П100100340003_1 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П100100340003_1);
				П100100340004_1 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П100100340004_1);
				П100100340005_1 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П100100340005_1);
								
				мФормаОтчета.П100100340006_1 = П100100340003_1 + П100100340004_1 + П100100340005_1;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П100100341006_1, ОбластьИмя) > 0 Тогда
												
				П100100341003_1 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П100100341003_1);
				П100100341004_1 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П100100341004_1);
				П100100341005_1 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П100100341005_1);
								
				мФормаОтчета.П100100341006_1 = П100100341003_1 + П100100341004_1 + П100100341005_1;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П100100342006_1, ОбластьИмя) > 0 Тогда
												
				П100100342003_1 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П100100342003_1);
				П100100342004_1 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П100100342004_1);
				П100100342005_1 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П100100342005_1);
								
				мФормаОтчета.П100100342006_1 = П100100342003_1 + П100100342004_1 + П100100342005_1;
				
			КонецЕсли;
				
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П100100350003_1, ОбластьИмя) > 0 Тогда
												
				П100100340003_1 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П100100340003_1);
				П100100341003_1 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П100100341003_1);
				П100100342003_1 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П100100342003_1);
								
				мФормаОтчета.П100100350003_1 = П100100340003_1 + П100100341003_1 + П100100342003_1;
				
			КонецЕсли;				
				
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П100100350004_1, ОбластьИмя) > 0 Тогда
												
				П100100340004_1 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П100100340004_1);
				П100100341004_1 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П100100341004_1);
				П100100342004_1 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П100100342004_1);
								
				мФормаОтчета.П100100350004_1 = П100100340004_1 + П100100341004_1 + П100100342004_1;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П100100350005_1, ОбластьИмя) > 0 Тогда
												
				П100100340005_1 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П100100340005_1);
				П100100341005_1 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П100100341005_1);
				П100100342005_1 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П100100342005_1);
								
				мФормаОтчета.П100100350005_1 = П100100340005_1 + П100100341005_1 + П100100342005_1;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П100100350006_1, ОбластьИмя) > 0 Тогда
												
				П100100350003_1 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П100100350003_1);
				П100100350004_1 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П100100350004_1);
				П100100350005_1 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П100100350005_1);
								
				мФормаОтчета.П100100350006_1 = П100100350003_1 + П100100350004_1 + П100100350005_1;
				
			КонецЕсли;
											
			// заглавный блок
			// значения в суммируемых показателях уже прошли стадию округления, если это было необходимо
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100341003, ОбластьИмя) > 0 Тогда
												
				П000100341003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100341103);
				П000100341003 = П000100341003 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П100100341003_1);
								
				мФормаОтчета.П000100341003 = П000100341003;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100341004, ОбластьИмя) > 0 Тогда
												
				П000100341004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100341104);
				П000100341004 = П000100341004 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П100100341004_1);
								
				мФормаОтчета.П000100341004 = П000100341004;
				
			КонецЕсли;
			      		
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100341005, ОбластьИмя) > 0 Тогда
												
				П000100341005 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100341105);
				П000100341005 = П000100341005 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П100100341005_1);
								
				мФормаОтчета.П000100341005 = П000100341005;
				
			КонецЕсли;						
			                    			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100342003, ОбластьИмя) > 0 Тогда
												
				П000100342003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100342103);
				П000100342003 = П000100342003 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П100100342003_1);
								
				мФормаОтчета.П000100342003 = П000100342003;
				
			КонецЕсли;			
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100342004, ОбластьИмя) > 0 Тогда
												
				П000100342004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100342104);
				П000100342004 = П000100342004 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П100100342004_1);
								
				мФормаОтчета.П000100342004 = П000100342004;
				
			КонецЕсли;			
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100342005, ОбластьИмя) > 0 Тогда
												
				П000100342005 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100342105);
				П000100342005 = П000100342005 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П100100342005_1);
								
				мФормаОтчета.П000100342005 = П000100342005;
				
			КонецЕсли;			
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100340005, ОбластьИмя) > 0 Тогда
												
				П000100340006 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100340006);
				П000100340003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100340003);
				П000100340004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100340004);
								
				мФормаОтчета.П000100340005 = П000100340006 - П000100340003 - П000100340004;
				
			КонецЕсли;

			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100341006, ОбластьИмя) > 0 Тогда
												
				П000100341003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100341003);
				П000100341004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100341004);
				П000100341005 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100341005);
								
				мФормаОтчета.П000100341006 = П000100341003 + П000100341004 + П000100341005;
				
			КонецЕсли;

			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100342006, ОбластьИмя) > 0 Тогда
												
				П000100342003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100342003);
				П000100342004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100342004);
				П000100342005 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100342005);
								
				мФормаОтчета.П000100342006 = П000100342003 + П000100342004 + П000100342005;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100350003, ОбластьИмя) > 0 Тогда
												
				П000100340003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100340003);
				П000100341003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100341003);
				П000100342003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100342003);
								
				мФормаОтчета.П000100350003 = П000100340003 + П000100341003 + П000100342003;
				
			КонецЕсли;

			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100350004, ОбластьИмя) > 0 Тогда
												
				П000100340004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100340004);
				П000100341004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100341004);
				П000100342004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100342004);
								
				мФормаОтчета.П000100350004 = П000100340004 + П000100341004 + П000100342004;
				
			КонецЕсли;

			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100350005, ОбластьИмя) > 0 Тогда
												
				П000100340005 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100340005);
				П000100341005 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100341005);
				П000100342005 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100342005);
								
				мФормаОтчета.П000100350005 = П000100340005 + П000100341005 + П000100342005;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100350006, ОбластьИмя) > 0 Тогда
												
				П000100350003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100350003);
				П000100350004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100350004);
				П000100350005 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100350005);
								
				мФормаОтчета.П000100350006 = П000100350003 + П000100350004 + П000100350005;
				
			КонецЕсли;
			
	    КонецЕсли;
		
	// ОТЧЕТ О ДВИЖЕНИИ ДЕНЕЖНЫХ СРЕДСТВ
	//
	ИначеЕсли ИмяСтраницыПанели = "ОДДС" Тогда	
		
		НомПозиции = СтрНайти(ОбластьИмя, "_");
	
		Если НомПозиции > 0 Тогда
			ОбластьИмя = Лев(ОбластьИмя, НомПозиции - 1);
		КонецЕсли;
		
		Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "ОДДС" Тогда
			
			мФормаОтчета = Форма.ТабличныйДокумент.Области;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100411003, ОбластьИмя) > 0 Тогда
												
				П000100411103 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100411103.Значение);
				П000100411203 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100411203.Значение);
				П000100411303 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100411303.Значение);
				
				Индекс = 1;
				П100100411003 = 0;
				
				Пока НЕ мФормаОтчета.Найти("П100100411003_" + Индекс) = Неопределено Цикл
					
					П100100411003 = П100100411003 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета["П100100411003_" + Индекс].Значение);
					
					Индекс = Индекс + 1;
					
				КонецЦикла;
				 
				П000100411903 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100411903.Значение);
								
				мФормаОтчета.П000100411003.Значение = П000100411103 + П000100411203 + П000100411303 + П100100411003 + П000100411903;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100411004, ОбластьИмя) > 0 Тогда
												
				П000100411104 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100411104.Значение);
				П000100411204 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100411204.Значение);
				П000100411304 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100411304.Значение);
				
				Индекс = 1;
				П100100411004 = 0;
				
				Пока НЕ мФормаОтчета.Найти("П100100411004_" + Индекс) = Неопределено Цикл
					
					П100100411004 = П100100411004 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета["П100100411004_" + Индекс].Значение);
					
					Индекс = Индекс + 1;
					
				КонецЦикла;
				 
				П000100411904 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100411904.Значение);
								
				мФормаОтчета.П000100411004.Значение = П000100411104 + П000100411204 + П000100411304 + П100100411004 + П000100411904;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100412003, ОбластьИмя) > 0 Тогда
												
				П000100412103 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100412103.Значение);
				П000100412203 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100412203.Значение);
				П000100412303 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100412303.Значение);
				П000100412403 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100412403.Значение);
				
				Индекс = 1;
				П100100412003 = 0;
				
				Пока НЕ мФормаОтчета.Найти("П100100412003_" + Индекс) = Неопределено Цикл
					
					П100100412003 = П100100412003 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета["П100100412003_" + Индекс].Значение);
					
					Индекс = Индекс + 1;
					
				КонецЦикла;
				 
				П000100412903 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100412903.Значение);
								
				мФормаОтчета.П000100412003.Значение = П000100412103 + П000100412203 + П000100412303 + П000100412403 + П100100412003 + П000100412903;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100412004, ОбластьИмя) > 0 Тогда
												
				П000100412104 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100412104.Значение);
				П000100412204 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100412204.Значение);
				П000100412304 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100412304.Значение);
				П000100412404 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100412404.Значение);
				
				Индекс = 1;
				П100100412004 = 0;
				
				Пока НЕ мФормаОтчета.Найти("П100100412004_" + Индекс) = Неопределено Цикл
					
					П100100412004 = П100100412004 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета["П100100412004_" + Индекс].Значение);
					
					Индекс = Индекс + 1;
					
				КонецЦикла;
				 
				П000100412904 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100412904.Значение);
								
				мФормаОтчета.П000100412004.Значение = П000100412104 + П000100412204 + П000100412304 + П000100412404 + П100100412004 + П000100412904;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100410003, ОбластьИмя) > 0 Тогда
												
				П000100411003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100411003.Значение);
				П000100412003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100412003.Значение);
								
				мФормаОтчета.П000100410003.Значение = П000100411003 + П000100412003;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100410004, ОбластьИмя) > 0 Тогда
												
				П000100411004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100411004.Значение);
				П000100412004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100412004.Значение);
								
				мФормаОтчета.П000100410004.Значение = П000100411004 + П000100412004;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100421003, ОбластьИмя) > 0 Тогда
												
				П000100421103 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100421103.Значение);
				П000100421203 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100421203.Значение);
				П000100421303 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100421303.Значение);
				П000100421403 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100421403.Значение);
				
				Индекс = 1;
				П100100421003 = 0;
				
				Пока НЕ мФормаОтчета.Найти("П100100421003_" + Индекс) = Неопределено Цикл
					
					П100100421003 = П100100421003 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета["П100100421003_" + Индекс].Значение);
					
					Индекс = Индекс + 1;
					
				КонецЦикла;
				 
				П000100421903 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100421903.Значение);
								
				мФормаОтчета.П000100421003.Значение = П000100421103 + П000100421203 + П000100421303 + П000100421403 + П100100421003 + П000100421903;
				
			КонецЕсли;			

			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100421004, ОбластьИмя) > 0 Тогда
												
				П000100421104 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100421104.Значение);
				П000100421204 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100421204.Значение);
				П000100421304 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100421304.Значение);
				П000100421404 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100421404.Значение);
				
				Индекс = 1;
				П100100421004 = 0;
				
				Пока НЕ мФормаОтчета.Найти("П100100421004_" + Индекс) = Неопределено Цикл
					
					П100100421004 = П100100421004 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета["П100100421004_" + Индекс].Значение);
					
					Индекс = Индекс + 1;
					
				КонецЦикла;
				 
				П000100421904 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100421904.Значение);
								
				мФормаОтчета.П000100421004.Значение = П000100421104 + П000100421204 + П000100421304 + П000100421404 + П100100421004 + П000100421904;
				
			КонецЕсли;			
						
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100422003, ОбластьИмя) > 0 Тогда
												
				П000100422103 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100422103.Значение);
				П000100422203 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100422203.Значение);
				П000100422303 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100422303.Значение);
				П000100422403 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100422403.Значение);
				
				Индекс = 1;
				П100100422003 = 0;
				
				Пока НЕ мФормаОтчета.Найти("П100100422003_" + Индекс) = Неопределено Цикл
					
					П100100422003 = П100100422003 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета["П100100422003_" + Индекс].Значение);
					
					Индекс = Индекс + 1;
					
				КонецЦикла;
				 
				П000100422903 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100422903.Значение);
								
				мФормаОтчета.П000100422003.Значение = П000100422103 + П000100422203 + П000100422303 + П000100422403 + П100100422003 + П000100422903;
				
			КонецЕсли;			

			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100422004, ОбластьИмя) > 0 Тогда
												
				П000100422104 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100422104.Значение);
				П000100422204 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100422204.Значение);
				П000100422304 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100422304.Значение);
				П000100422404 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100422404.Значение);
				
				Индекс = 1;
				П100100422004 = 0;
				
				Пока НЕ мФормаОтчета.Найти("П100100422004_" + Индекс) = Неопределено Цикл
					
					П100100422004 = П100100422004 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета["П100100422004_" + Индекс].Значение);
					
					Индекс = Индекс + 1;
					
				КонецЦикла;
				 
				П000100422904 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100422904.Значение);
								
				мФормаОтчета.П000100422004.Значение = П000100422104 + П000100422204 + П000100422304 + П000100422404 + П100100422004 + П000100422904;
				
			КонецЕсли;			
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100420003, ОбластьИмя) > 0 Тогда
												
				П000100421003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100421003.Значение);
				П000100422003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100422003.Значение);
				 								
				мФормаОтчета.П000100420003.Значение = П000100421003 + П000100422003;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100420004, ОбластьИмя) > 0 Тогда
												
				П000100421004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100421004.Значение);
				П000100422004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100422004.Значение);
				 								
				мФормаОтчета.П000100420004.Значение = П000100421004 + П000100422004;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100431003, ОбластьИмя) > 0 Тогда
												
				П000100431103 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100431103.Значение);
				П000100431203 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100431203.Значение);
				П000100431303 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100431303.Значение);
				П000100431403 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100431403.Значение);
				
				Индекс = 1;
				П100100431003 = 0;
				
				Пока НЕ мФормаОтчета.Найти("П100100431003_" + Индекс) = Неопределено Цикл
					
					П100100431003 = П100100431003 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета["П100100431003_" + Индекс].Значение);
					
					Индекс = Индекс + 1;
					
				КонецЦикла;
				 
				П000100431903 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100431903.Значение);
								
				мФормаОтчета.П000100431003.Значение = П000100431103 + П000100431203 + П000100431303 + П000100431403 + П100100431003 + П000100431903;
				
			КонецЕсли;			
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100431004, ОбластьИмя) > 0 Тогда
												
				П000100431104 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100431104.Значение);
				П000100431204 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100431204.Значение);
				П000100431304 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100431304.Значение);
				П000100431404 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100431404.Значение);
				
				Индекс = 1;
				П100100431004 = 0;
				
				Пока НЕ мФормаОтчета.Найти("П100100431004_" + Индекс) = Неопределено Цикл
					
					П100100431004 = П100100431004 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета["П100100431004_" + Индекс].Значение);
					
					Индекс = Индекс + 1;
					
				КонецЦикла;
				 
				П000100431904 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100431904.Значение);
								
				мФормаОтчета.П000100431004.Значение = П000100431104 + П000100431204 + П000100431304 + П000100431404 + П100100431004 + П000100431904;
				
			КонецЕсли;			
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100432003, ОбластьИмя) > 0 Тогда
												
				П000100432103 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100432103.Значение);
				П000100432203 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100432203.Значение);
				П000100432303 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100432303.Значение);
				
				Индекс = 1;
				П100100432003 = 0;
				
				Пока НЕ мФормаОтчета.Найти("П100100432003_" + Индекс) = Неопределено Цикл
					
					П100100432003 = П100100432003 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета["П100100432003_" + Индекс].Значение);
					
					Индекс = Индекс + 1;
					
				КонецЦикла;
				 
				П000100432903 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100432903.Значение);
								
				мФормаОтчета.П000100432003.Значение = П000100432103 + П000100432203 + П000100432303 + П100100432003 + П000100432903;
				
			КонецЕсли;			
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100432004, ОбластьИмя) > 0 Тогда
												
				П000100432104 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100432104.Значение);
				П000100432204 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100432204.Значение);
				П000100432304 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100432304.Значение);
				
				Индекс = 1;
				П100100432004 = 0;
				
				Пока НЕ мФормаОтчета.Найти("П100100432004_" + Индекс) = Неопределено Цикл
					
					П100100432004 = П100100432004 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета["П100100432004_" + Индекс].Значение);
					
					Индекс = Индекс + 1;
					
				КонецЦикла;
				 
				П000100432904 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100432904.Значение);
								
				мФормаОтчета.П000100432004.Значение = П000100432104 + П000100432204 + П000100432304 + П100100432004 + П000100432904;
				
			КонецЕсли;			
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100430003, ОбластьИмя) > 0 Тогда
												
				П000100431003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100431003.Значение);
				П000100432003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100432003.Значение);
				 								
				мФормаОтчета.П000100430003.Значение = П000100431003 + П000100432003;
				
			КонецЕсли;
						
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100430004, ОбластьИмя) > 0 Тогда
												
				П000100431004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100431004.Значение);
				П000100432004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100432004.Значение);
				 								
				мФормаОтчета.П000100430004.Значение = П000100431004 + П000100432004;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100440003, ОбластьИмя) > 0 Тогда
												
				П000100410003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100410003.Значение);
				П000100420003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100420003.Значение);
				П000100430003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100430003.Значение);
								
				мФормаОтчета.П000100440003.Значение = П000100410003 + П000100420003 + П000100430003;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100440004, ОбластьИмя) > 0 Тогда
												
				П000100410004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100410004.Значение);
				П000100420004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100420004.Значение);
				П000100430004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100430004.Значение);
								
				мФормаОтчета.П000100440004.Значение = П000100410004 + П000100420004 + П000100430004;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100450003, ОбластьИмя) > 0 Тогда
												
				П000100440003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100440003.Значение);
				П000100445003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100445003.Значение);
				П000100449003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100449003.Значение);
								
				мФормаОтчета.П000100450003.Значение = П000100440003 + П000100445003 + П000100449003;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100450004, ОбластьИмя) > 0 Тогда
												
				П000100440004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100440004.Значение);
				П000100445004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100445004.Значение);
				П000100449004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100449004.Значение);
								
				мФормаОтчета.П000100450004.Значение = П000100440004 + П000100445004 + П000100449004;
				
			КонецЕсли;
			
		Иначе	
			
			мФормаОтчета = Форма.СтруктураДанныхОДДС;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100411003, ОбластьИмя) > 0 Тогда
												
				П000100411103 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100411103);
				П000100411203 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100411203);
				П000100411303 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100411303);
				
				Индекс = 1;
				П100100411003  = 0;
				П100100411003_ = 0;
								
				Пока мФормаОтчета.Свойство("П100100411003_" + Индекс, П100100411003_) Цикл
					
					П100100411003 = П100100411003 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, П100100411003_);
					
					Индекс = Индекс + 1;
					
				КонецЦикла;
				 
				П000100411903 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100411903);
								
				мФормаОтчета.П000100411003 = П000100411103 + П000100411203 + П000100411303 + П100100411003 + П000100411903;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100411004, ОбластьИмя) > 0 Тогда
												
				П000100411104 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100411104);
				П000100411204 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100411204);
				П000100411304 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100411304);
				
				Индекс = 1;
				П100100411004  = 0;
				П100100411004_ = 0;
				
				Пока мФормаОтчета.Свойство("П100100411004_" + Индекс, П100100411004_) Цикл
					
					П100100411004 = П100100411004 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, П100100411004_);
					
					Индекс = Индекс + 1;
					
				КонецЦикла;
				 
				П000100411904 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100411904);
								
				мФормаОтчета.П000100411004 = П000100411104 + П000100411204 + П000100411304 + П100100411004 + П000100411904;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100412003, ОбластьИмя) > 0 Тогда
												
				П000100412103 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100412103);
				П000100412203 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100412203);
				П000100412303 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100412303);
				П000100412403 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100412403);
				
				Индекс = 1;
				П100100412003  = 0;
				П100100412003_ = 0;
				
				Пока мФормаОтчета.Свойство("П100100412003_" + Индекс, П100100412003_) Цикл
					
					П100100412003 = П100100412003 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, П100100412003_);
					
					Индекс = Индекс + 1;
					
				КонецЦикла;
				 
				П000100412903 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100412903);
								
				мФормаОтчета.П000100412003 = П000100412103 + П000100412203 + П000100412303 + П000100412403 + П100100412003 + П000100412903;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100412004, ОбластьИмя) > 0 Тогда
												
				П000100412104 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100412104);
				П000100412204 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100412204);
				П000100412304 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100412304);
				П000100412404 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100412404);
				
				Индекс = 1;
				П100100412004  = 0;
				П100100412004_ = 0;
				
				Пока мФормаОтчета.Свойство("П100100412004_" + Индекс, П100100412004_) Цикл
					
					П100100412004 = П100100412004 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, П100100412004_);
					
					Индекс = Индекс + 1;
					
				КонецЦикла;
				 
				П000100412904 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100412904);
								
				мФормаОтчета.П000100412004 = П000100412104 + П000100412204 + П000100412304 + П000100412404 + П100100412004 + П000100412904;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100410003, ОбластьИмя) > 0 Тогда
												
				П000100411003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100411003);
				П000100412003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100412003);
								
				мФормаОтчета.П000100410003 = П000100411003 + П000100412003;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100410004, ОбластьИмя) > 0 Тогда
												
				П000100411004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100411004);
				П000100412004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100412004);
								
				мФормаОтчета.П000100410004 = П000100411004 + П000100412004;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100421003, ОбластьИмя) > 0 Тогда
												
				П000100421103 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100421103);
				П000100421203 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100421203);
				П000100421303 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100421303);
				П000100421403 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100421403);
				
				Индекс = 1;
				П100100421003  = 0;
				П100100421003_ = 0;
				
				Пока мФормаОтчета.Свойство("П100100421003_" + Индекс, П100100421003_) Цикл
					
					П100100421003 = П100100421003 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, П100100421003_);
					
					Индекс = Индекс + 1;
					
				КонецЦикла;
				 
				П000100421903 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100421903);
								
				мФормаОтчета.П000100421003 = П000100421103 + П000100421203 + П000100421303 + П000100421403 + П100100421003 + П000100421903;
				
			КонецЕсли;			

			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100421004, ОбластьИмя) > 0 Тогда
												
				П000100421104 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100421104);
				П000100421204 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100421204);
				П000100421304 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100421304);
				П000100421404 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100421404);
				
				Индекс = 1;
				П100100421004  = 0;
				П100100421004_ = 0;
				
				Пока мФормаОтчета.Свойство("П100100421004_" + Индекс, П100100421004_) Цикл
					
					П100100421004 = П100100421004 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, П100100421004_);
					
					Индекс = Индекс + 1;
					
				КонецЦикла;
				 
				П000100421904 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100421904);
								
				мФормаОтчета.П000100421004 = П000100421104 + П000100421204 + П000100421304 + П000100421404 + П100100421004 + П000100421904;
				
			КонецЕсли;			
						
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100422003, ОбластьИмя) > 0 Тогда
												
				П000100422103 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100422103);
				П000100422203 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100422203);
				П000100422303 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100422303);
				П000100422403 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100422403);
				
				Индекс = 1;
				П100100422003  = 0;
				П100100422003_ = 0;
				
				Пока мФормаОтчета.Свойство("П100100422003_" + Индекс, П100100422003_) Цикл
					
					П100100422003 = П100100422003 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, П100100422003_);
					
					Индекс = Индекс + 1;
					
				КонецЦикла;
				 
				П000100422903 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100422903);
								
				мФормаОтчета.П000100422003 = П000100422103 + П000100422203 + П000100422303 + П000100422403 + П100100422003 + П000100422903;
				
			КонецЕсли;			

			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100422004, ОбластьИмя) > 0 Тогда
												
				П000100422104 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100422104);
				П000100422204 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100422204);
				П000100422304 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100422304);
				П000100422404 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100422404);
				
				Индекс = 1;
				П100100422004  = 0;
				П100100422004_ = 0;
				
				Пока мФормаОтчета.Свойство("П100100422004_" + Индекс, П100100422004_) Цикл
					
					П100100422004 = П100100422004 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, П100100422004_);
					
					Индекс = Индекс + 1;
					
				КонецЦикла;
				 
				П000100422904 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100422904);
								
				мФормаОтчета.П000100422004 = П000100422104 + П000100422204 + П000100422304 + П000100422404 + П100100422004 + П000100422904;
				
			КонецЕсли;			
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100420003, ОбластьИмя) > 0 Тогда
												
				П000100421003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100421003);
				П000100422003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100422003);
				 								
				мФормаОтчета.П000100420003 = П000100421003 + П000100422003;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100420004, ОбластьИмя) > 0 Тогда
												
				П000100421004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100421004);
				П000100422004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100422004);
				 								
				мФормаОтчета.П000100420004 = П000100421004 + П000100422004;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100431003, ОбластьИмя) > 0 Тогда
												
				П000100431103 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100431103);
				П000100431203 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100431203);
				П000100431303 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100431303);
				П000100431403 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100431403);
				
				Индекс = 1;
				П100100431003  = 0;
				П100100431003_ = 0;
				
				Пока мФормаОтчета.Свойство("П100100431003_" + Индекс, П100100431003_) Цикл
					
					П100100431003 = П100100431003 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, П100100431003_);
					
					Индекс = Индекс + 1;
					
				КонецЦикла;
				 
				П000100431903 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100431903);
								
				мФормаОтчета.П000100431003 = П000100431103 + П000100431203 + П000100431303 + П000100431403 + П100100431003 + П000100431903;
				
			КонецЕсли;			
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100431004, ОбластьИмя) > 0 Тогда
												
				П000100431104 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100431104);
				П000100431204 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100431204);
				П000100431304 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100431304);
				П000100431404 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100431404);
				
				Индекс = 1;
				П100100431004  = 0;
				П100100431004_ = 0;
				
				Пока мФормаОтчета.Свойство("П100100431004_" + Индекс, П100100431004_) Цикл
					
					П100100431004 = П100100431004 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, П100100431004_);
					
					Индекс = Индекс + 1;
					
				КонецЦикла;
				 
				П000100431904 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100431904);
								
				мФормаОтчета.П000100431004 = П000100431104 + П000100431204 + П000100431304 + П000100431404 + П100100431004 + П000100431904;
				
			КонецЕсли;			
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100432003, ОбластьИмя) > 0 Тогда
												
				П000100432103 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100432103);
				П000100432203 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100432203);
				П000100432303 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100432303);
				
				Индекс = 1;
				П100100432003  = 0;
				П100100432003_ = 0;
				
				Пока мФормаОтчета.Свойство("П100100432003_" + Индекс, П100100432003_) Цикл
					
					П100100432003 = П100100432003 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, П100100432003_);
					
					Индекс = Индекс + 1;
					
				КонецЦикла;
				 
				П000100432903 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100432903);
								
				мФормаОтчета.П000100432003 = П000100432103 + П000100432203 + П000100432303 + П100100432003 + П000100432903;
				
			КонецЕсли;			
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100432004, ОбластьИмя) > 0 Тогда
												
				П000100432104 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100432104);
				П000100432204 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100432204);
				П000100432304 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100432304);
				
				Индекс = 1;
				П100100432004  = 0;
				П100100432004_ = 0;
				
				Пока мФормаОтчета.Свойство("П100100432004_" + Индекс, П100100432004_) Цикл
					
					П100100432004 = П100100432004 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, П100100432004_);
					
					Индекс = Индекс + 1;
					
				КонецЦикла;
				 
				П000100432904 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100432904);
								
				мФормаОтчета.П000100432004 = П000100432104 + П000100432204 + П000100432304 + П100100432004 + П000100432904;
				
			КонецЕсли;			
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100430003, ОбластьИмя) > 0 Тогда
												
				П000100431003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100431003);
				П000100432003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100432003);
				 								
				мФормаОтчета.П000100430003 = П000100431003 + П000100432003;
				
			КонецЕсли;
						
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100430004, ОбластьИмя) > 0 Тогда
												
				П000100431004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100431004);
				П000100432004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100432004);
				 								
				мФормаОтчета.П000100430004 = П000100431004 + П000100432004;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100440003, ОбластьИмя) > 0 Тогда
												
				П000100410003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100410003);
				П000100420003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100420003);
				П000100430003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100430003);
								
				мФормаОтчета.П000100440003 = П000100410003 + П000100420003 + П000100430003;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100440004, ОбластьИмя) > 0 Тогда
												
				П000100410004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100410004);
				П000100420004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100420004);
				П000100430004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100430004);
								
				мФормаОтчета.П000100440004 = П000100410004 + П000100420004 + П000100430004;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100450003, ОбластьИмя) > 0 Тогда
												
				П000100440003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100440003);
				П000100445003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100445003);
				П000100449003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100449003);
								
				мФормаОтчета.П000100450003 = П000100440003 + П000100445003 + П000100449003;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100450004, ОбластьИмя) > 0 Тогда
												
				П000100440004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100440004);
				П000100445004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100445004);
				П000100449004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100449004);
								
				мФормаОтчета.П000100450004 = П000100440004 + П000100445004 + П000100449004;
				
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ИмяСтраницыПанели = "" Тогда
		
		Расчет(Форма, "Баланс",        ОбластьИмя);
		Расчет(Форма, "ФормаОтчета",   ОбластьИмя);
		Расчет(Форма, "ОИК",           ОбластьИмя);
		Расчет(Форма, "ОДДС",          ОбластьИмя);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьИзСпискаВидОтчетностиЗавершение(ПериодЭлемент, ДополнительныеПараметры) Экспорт
	Если ПериодЭлемент <> Неопределено Тогда
		ТабличныйДокумент.Области["ВидОтчетности"].Значение = ПериодЭлемент.Представление;
		ВидСдачиОтчетности = ПериодЭлемент.Значение;
		Модифицированность = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТабличныйДокументВыборЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Область = ДополнительныеПараметры.Область;
	УказанныйАдрес = Результат;
	
	Если УказанныйАдрес = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Модифицированность = Истина;
	
	Область.Значение = ?(УказанныйАдрес.Название = "Адрес не указывается", "", УказанныйАдрес.Название);
	
	Если УказанныйАдрес.Название = "Адрес не указывается" Тогда
		
		СтруктураРеквизитовФормы.мТипАдреса = "АдрФакт";
		СтруктураРеквизитовФормы.мАдресДляВыгрузки = "";
		
	КонецЕсли;
	
	Если УказанныйАдрес.Код = "Фактический адрес" Тогда
		
		СтруктураРеквизитовФормы.мТипАдреса = "АдрФакт";
		СтруктураРеквизитовФормы.мАдресДляВыгрузки = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(СтруктураРеквизитовФормы.Организация, ДатаПодписи, "АдрФакт").АдрФакт;
		
	КонецЕсли;
	
	Если УказанныйАдрес.Код = "Юридический адрес" Тогда
		
		СтруктураРеквизитовФормы.мТипАдреса = "АдрЮР";
		СтруктураРеквизитовФормы.мАдресДляВыгрузки = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(СтруктураРеквизитовФормы.Организация, ДатаПодписи, "АдрЮР").АдрЮР;
		
	КонецЕсли;
	
	Если УказанныйАдрес.Код = "Почтовый адрес" Тогда
		
		СтруктураРеквизитовФормы.мТипАдреса = "АдрПочт";
		СтруктураРеквизитовФормы.мАдресДляВыгрузки = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(СтруктураРеквизитовФормы.Организация, ДатаПодписи, "АдрПочт").АдрПочт;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДатаПодписиПриИзмененииНаСервере()
	
	ЗаполнитьСведенияОбОрганизацииНаСервере(Истина);
	
	ИзменитьНазванияОтчетов(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
КонецПроцедуры

&НаСервере
Процедура ПослеСменыЕдИзмеренияИТочности()
	
	ЗаполнитьПустыеСтруктурыДанных();
	
	ПроверитьТочность();
	
	УстановитьФорматВыводаНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
	ЗаполнитьЗаголовкиВРазделахОтчетностиПоЕдиницеИзмерения(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
	РасчетНаСервере();
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Функция ДанныеРазделаОИКСодержащегоТолькоЧистыеАктивыИДатуПодписи()
	
	ДанныеРаздела = ЭтаФорма["СтруктураДанныхОИК"];
	
	Если ДанныеРаздела.Количество() <= 4
		И (ДанныеРаздела.Свойство("П000100360003")
		ИЛИ ДанныеРаздела.Свойство("П000100360004")
		ИЛИ ДанныеРаздела.Свойство("П000100360005")
		ИЛИ ДанныеРаздела.Свойство("ДатаПодписиОтчета")) Тогда
		
		МассивПоказателей = Новый Массив;
		МассивПоказателей.Добавить(?(ДанныеРаздела.Свойство("П000100360003"),
			ДанныеРаздела["П000100360003"], 0));
		МассивПоказателей.Добавить(?(ДанныеРаздела.Свойство("П000100360004"),
			ДанныеРаздела["П000100360004"], 0));
		МассивПоказателей.Добавить(?(ДанныеРаздела.Свойство("П000100360005"),
			ДанныеРаздела["П000100360005"], 0));
		МассивПоказателей.Добавить(?(ДанныеРаздела.Свойство("ДатаПодписиОтчета"),
			ДанныеРаздела["ДатаПодписиОтчета"], '00010101'));
		
		Возврат МассивПоказателей;
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьПустыеСтруктурыДанных(ЗаполнятьСведенияОбОрганизации = Истина)
	
	СохрТабличныйДокумент = Новый ТабличныйДокумент;
	
	СохрТабличныйДокумент.Вывести(ТабличныйДокумент);
	
	Для Каждого Раздел Из мСвойстваРазделовДекларации.ПолучитьЭлементы() Цикл
		
		МассивПоказателейОИК = Неопределено;
		Если Раздел.ИмяСтраницы = "ОИК" Тогда
			// Предварительное сохранение данных "Чистых активов"
			// и "Даты подписи отчета" раздела ОИК.
			МассивПоказателейОИК = ДанныеРазделаОИКСодержащегоТолькоЧистыеАктивыИДатуПодписи();
		КонецЕсли;
		
		ПоказательДатаПодписиРаздела = '00010101';
		ВРазделеТолькоДатаПодписи
			= ЭтаФорма["СтруктураДанных" + Раздел.ИмяСтраницы].Количество() = 1
			И ЭтаФорма["СтруктураДанных" + Раздел.ИмяСтраницы].Свойство("ДатаПодписиОтчета");
		Если ВРазделеТолькоДатаПодписи Тогда
			// Предварительное сохранение значения единственного
			// показателя раздела - "Даты подписи отчета".
			ПоказательДатаПодписиРаздела = ЭтаФорма["СтруктураДанных" + Раздел.ИмяСтраницы].ДатаПодписиОтчета;
		КонецЕсли;
		
		Если НЕ Раздел.МногостраничностьВРазделе
		  И (ЭтаФорма["СтруктураДанных" + Раздел.ИмяСтраницы].Количество() = 0
		  ИЛИ (МассивПоказателейОИК <> Неопределено ИЛИ ВРазделеТолькоДатаПодписи))
		  И НЕ Раздел.ИмяСтраницы = "ДополнительныеФайлы" Тогда
		  
			ТабличныйДокумент.Очистить();
			ТабличныйДокумент.Вывести(Отчеты[Сред(Лев(ЭтаФорма.ИмяФормы,
				СтрНайти(ЭтаФорма.ИмяФормы, ".Форма.") - 1), 7)].ПолучитьМакет(Сред(ЭтаФорма.ИмяФормы,
				СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + ?(Раздел.ИмяСтраницы = "ФормаОтчета",
				СтруктураОтчета.ОПУ.ИмяМакета, СтруктураОтчета[Раздел.ИмяСтраницы].ИмяМакета)));
			
			ПоказатьПериод(Раздел.ИмяСтраницы);
	
			Если НЕ ТабличныйДокумент.Области.Найти("ДатаПодписиОтчета") = Неопределено Тогда
				ТабличныйДокумент.Области.ДатаПодписиОтчета.Значение = ДатаПодписи;
			КонецЕсли;
			Если НЕ ТабличныйДокумент.Области.Найти("НомерКорректировки") = Неопределено Тогда
				ТабличныйДокумент.Области.НомерКорректировки.Значение = НомерКорректировки;
			КонецЕсли;
			Если НЕ ТабличныйДокумент.Области.Найти("ВидОтчетности") = Неопределено Тогда
				Если ВидСдачиОтчетности = 1 Тогда
					ТабличныйДокумент.Области.ВидОтчетности.Значение = "Обычная";
				ИначеЕсли ВидСдачиОтчетности = 2 Тогда
					ТабличныйДокумент.Области.ВидОтчетности.Значение = "Промежуточная при ликвидации/реорганизации";
				ИначеЕсли ВидСдачиОтчетности = 3 Тогда
					ТабличныйДокумент.Области.ВидОтчетности.Значение = "Ликвидационная";
				КонецЕсли;
			КонецЕсли;
			
			Если ЗаполнятьСведенияОбОрганизации Тогда
				ЗаполнитьСведенияОбОрганизацииНаСервере();
			КонецЕсли;
			
			СохранитьДанныеРаздела(Раздел.ИмяСтраницы, Ложь);
			
			// Восстановление предварительно сохраненных данных "Чистых активов"
			// и "Даты подписи отчета" раздела ОИК.
			Если МассивПоказателейОИК <> Неопределено Тогда
				ЭтаФорма["СтруктураДанных" + Раздел.ИмяСтраницы].Вставить("П000100360003", МассивПоказателейОИК[0]);
				ЭтаФорма["СтруктураДанных" + Раздел.ИмяСтраницы].Вставить("П000100360004", МассивПоказателейОИК[1]);
				ЭтаФорма["СтруктураДанных" + Раздел.ИмяСтраницы].Вставить("П000100360005", МассивПоказателейОИК[2]);
				ЭтаФорма["СтруктураДанных" + Раздел.ИмяСтраницы].Вставить("ДатаПодписиОтчета", МассивПоказателейОИК[3]);
			КонецЕсли;
			
			Если ВРазделеТолькоДатаПодписи Тогда
				// Восстановление предварительно сохраненного значения единственного
				// показателя раздела - "Даты подписи отчета".
				ЭтаФорма["СтруктураДанных" + Раздел.ИмяСтраницы].Вставить(
					"ДатаПодписиОтчета", ПоказательДатаПодписиРаздела);
			КонецЕсли;
			
		КонецЕсли;
	
	КонецЦикла;
	
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(СохрТабличныйДокумент);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоказателиОтчетаНаСервере(ПоказателиОтчета)
	
	Префикс = "ПолеТабличногоДокумента";
	
	Для Каждого Раздел Из мСвойстваРазделовДекларации.ПолучитьЭлементы() Цикл
			
		Если НЕ Раздел.МногостраничностьВРазделе Тогда
			ПоказателиОтчета.Вставить(Префикс + Раздел.ИмяСтраницы, ЭтаФорма["СтруктураДанных" + Раздел.ИмяСтраницы]);
		КонецЕсли;
	
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьТочность()
	
	Если СтруктураРеквизитовФормы.ЕдиницаИзмерения = ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1 Тогда

		Если СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения > 2 Тогда
									
			Сообщение = Новый СообщениеПользователю;
			
			Сообщение.Текст = НСтр("ru='Баланс: при выводе сумм в рублях точность не может превышать 2 знака.'");

			Сообщение.Сообщить();
			
			СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = 2;
			
		КонецЕсли;

	ИначеЕсли СтруктураРеквизитовФормы.ЕдиницаИзмерения = ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1000 Тогда

		Если СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения > 3 Тогда
			
			Сообщение = Новый СообщениеПользователю;

			Сообщение.Текст = НСтр("ru='Баланс: при выводе сумм в тысячах рублей точность не может превышать 3 знака.'");

			Сообщение.Сообщить();
			
			СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = 3;
			
		КонецЕсли;

	ИначеЕсли СтруктураРеквизитовФормы.ЕдиницаИзмерения = ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1000000 Тогда

		Если СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения > 6 Тогда
						
			Сообщение = Новый СообщениеПользователю;

			Сообщение.Текст = НСтр("ru='Баланс: при выводе сумм в миллионах рублей точность не может превышать 6 знаков.'");

			Сообщение.Сообщить();
			
			СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = 6;
			
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

// СохранитьНаКлиенте
&НаКлиенте
Процедура СохранитьНаКлиенте(Автосохранение = Ложь, ВыполняемоеОповещение=Неопределено) Экспорт
	
	Вариант = СтруктураРеквизитовФормы.ВидДокумента * НомерКорректировки;
	
	Если НЕ РегламентированнаяОтчетностьКлиент.ПриЗаписиРегламентированногоОтчетаНаКлиенте(ЭтаФорма, , Автосохранение, Вариант) Тогда
		Возврат;
	КонецЕсли;
	
	ПодобныйОтчетСуществует = Ложь;
	ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки = Ложь;
	
	Если Элементы.РазделыОтчета.ТекущиеДанные = Неопределено Тогда
		НаименованиеТекущегоРаздела = СтруктураРеквизитовФормы.НаимТекущегоРаздела;
	Иначе
		НаименованиеТекущегоРаздела = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
	КонецЕсли;
	
	РезультатСохранения = ПередСохранением(, ПодобныйОтчетСуществует, Вариант, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, Автосохранение, НаименованиеТекущегоРаздела);
	
	Если РезультатСохранения = Истина Тогда
		ОповеститьОбИзменении(СтруктураРеквизитовФормы.мСохраненныйДок);
	КонецЕсли;
	
	ВидДокументаНомерКорректировкиИзменен = Неопределено;
	
	Если ПодобныйОтчетСуществует И Автосохранение Тогда
		Возврат;
	КонецЕсли;
	
	НуженВопросПередСохранением = (ПодобныйОтчетСуществует ИЛИ ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки);
	
	Если НуженВопросПередСохранением Тогда
		
		СохранитьНаКлиентеСВопросом(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, ПодобныйОтчетСуществует);
		
	Иначе
		
		ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНаКлиентеСВопросом(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, ПодобныйОтчетСуществует)
	
	Если ПодобныйОтчетСуществует Тогда
		
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(КодВозвратаДиалога.Да, "Сохранить");
		Кнопки.Добавить(КодВозвратаДиалога.Нет, "Отмена");
		
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Отчет с видом %1 уже существует.
			|Сохранить отчет с таким же видом?'"), ?(Вариант = 0, """Первичный""", """Корректирующий/" + Вариант + """"));
		ДополнительныеПараметры = Новый Структура("Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки", Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки);
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросСохранитьОтчетСТакимЖеВидомЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, Кнопки, , Кнопки.Получить(1).Значение);
		
	Иначе
		
		СохранитьНаКлиентеСВопросомПродолжение(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросСохранитьОтчетСТакимЖеВидомЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Автосохранение = ДополнительныеПараметры.Автосохранение;
	Вариант = ДополнительныеПараметры.Вариант;
	ВыполняемоеОповещение = ДополнительныеПараметры.ВыполняемоеОповещение;
	ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки = ДополнительныеПараметры.ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки;
	
	Ответ = РезультатВопроса;
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	СохранитьНаКлиентеСВопросомПродолжение(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНаКлиентеСВопросомПродолжение(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки)
	
	Если ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки Тогда
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("ВидОтчета", Вариант);
		
		ФормаВопроса = РегламентированнаяОтчетностьКлиент.ПолучитьОбщуюФормуПоИмени("ВопросПриИзмененииВидаДокументаНомераКорректировки", ПараметрыФормы);
		ФормаВопроса.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		ДополнительныеПараметры = Новый Структура("Автосохранение, Вариант, ВыполняемоеОповещение", Автосохранение, Вариант, ВыполняемоеОповещение);
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросПриИзмененииВидаДокументаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ФормаВопроса.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
		ФормаВопроса.Открыть();
	Иначе
		Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Сохраняется %1...'"), ЭтаФорма.Заголовок), , , БиблиотекаКартинок.Записать);
		РезультатСохранения = Сохранить(Автосохранение, , Вариант, Ложь, Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
		Если РезультатСохранения = Истина Тогда
			ОповеститьОбИзменении(СтруктураРеквизитовФормы.мСохраненныйДок);
		КонецЕсли;
		ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПриИзмененииВидаДокументаЗавершение(КодВозврата, ДополнительныеПараметры) Экспорт
	
	Автосохранение = ДополнительныеПараметры.Автосохранение;
	Вариант = ДополнительныеПараметры.Вариант;
	ВыполняемоеОповещение = ДополнительныеПараметры.ВыполняемоеОповещение;
	
	Если КодВозврата = КодВозвратаДиалога.Да
		ИЛИ КодВозврата = КодВозвратаДиалога.Нет Тогда
		ВидДокументаНомерКорректировкиИзменен = ?(КодВозврата = КодВозвратаДиалога.Да, Истина, Ложь);
	Иначе
		Возврат;
	КонецЕсли;
	
	Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Сохраняется %1...'"), ЭтаФорма.Заголовок), , , БиблиотекаКартинок.Записать);
	РезультатСохранения = Сохранить(Автосохранение, , Вариант, ВидДокументаНомерКорректировкиИзменен, Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
	Если РезультатСохранения = Истина Тогда
		ОповеститьОбИзменении(СтруктураРеквизитовФормы.мСохраненныйДок);
	КонецЕсли;

	ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения)
	
	КлючУникальности = СтруктураРеквизитовФормы.мСохраненныйДок;
	
	Если РезультатСохранения Тогда
		
		РегламентированнаяОтчетностьКлиент.ПослеЗаписиРегламентированногоОтчета(ЭтаФорма);
		
		Если ВыполняемоеОповещение <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ВыполняемоеОповещение);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПередСохранением(КодИФНС = "не применимо", ПодобныйОтчетСуществует, Вариант, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, Автосохранение, НаимТекРаздела)
	
	Если РегламентированнаяОтчетность.БылиИзмененыКлючевыеРеквизитыОтчета(ЭтаФорма, КодИФНС)
	   И РегламентированнаяОтчетность.СуществуетДокументСАналогичнымиРеквизитами(ЭтаФорма, КодИФНС) Тогда
		
		ПодобныйОтчетСуществует = Истина;
		
	КонецЕсли;
	
	СтруктураРеквизитовФормы.мЗаписываетсяНовыйДокумент = (СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено ИЛИ СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено);
	
	Если Вариант <> Неопределено И ((СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено) ИЛИ (СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено) ИЛИ (Вариант <> СтруктураРеквизитовФормы.мВариант)) Тогда
		
		Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено ИЛИ СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено Тогда
						
		ИначеЕсли Вариант <> СтруктураРеквизитовФормы.мВариант Тогда
			
			ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки = Истина;
								
		КонецЕсли;

	КонецЕсли;
	
	Если ПодобныйОтчетСуществует
	 ИЛИ ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки Тогда
	 
	 	Возврат Ложь;
		
 	КонецЕсли;
		
	Возврат Сохранить(Автосохранение, КодИФНС, Вариант, , НаимТекРаздела);
		
КонецФункции

&НаСервере
Функция Сохранить(Автосохранение = Ложь, КодИФНС = "не применимо", Вариант, ВидДокументаНомерКорректировкиИзменен = Неопределено, НаимТекРаздела) Экспорт
	
	ДанныеДляРазблокирования = Неопределено;
	
	Если НЕ СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
		Если НЕ СтруктураРеквизитовФормы.мБезОткрытияФормы Тогда
			ДанныеДляРазблокирования = Новый Структура("Ключ,ИдФормы",
			СтруктураРеквизитовФормы.мСохраненныйДок, ЭтаФорма.УникальныйИдентификатор);
		КонецЕсли;
		СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.ПолучитьОбъект();
	КонецЕсли;
	
	Если НЕ РегламентированнаяОтчетность.ПриЗаписиРегламентированногоОтчетаНаСервере(ЭтаФорма, КодИФНС, Автосохранение, Вариант, ВидДокументаНомерКорректировкиИзменен, СтруктураРеквизитовФормы.мСохраненныйДок) Тогда
		СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
		Возврат Ложь;
	КонецЕсли;

	// установим текущие значения реквизитов документа
	СтруктураРеквизитовФормы.мСохраненныйДок.ИсточникОтчета             = Метаданные.Отчеты[Сред(Лев(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, ".Форма.") - 1), 7)].Имя;
	СтруктураРеквизитовФормы.мСохраненныйДок.НаименованиеОтчета         = Нстр("ru = 'Бухгалтерская отчетность для Сбербанка'");
	СтруктураРеквизитовФормы.мСохраненныйДок.ДатаНачала                 = СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета;
	СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания              = СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета;
	СтруктураРеквизитовФормы.мСохраненныйДок.ВыбраннаяФорма             = СтруктураРеквизитовФормы.мВыбраннаяФорма;
	СтруктураРеквизитовФормы.мСохраненныйДок.Организация                = СтруктураРеквизитовФормы.Организация;
	СтруктураРеквизитовФормы.мСохраненныйДок.ДатаПодписи                = ДатаПодписи;
	СтруктураРеквизитовФормы.мСохраненныйДок.ЕдиницаИзмерения           = СтруктураРеквизитовФормы.ЕдиницаИзмерения;
	СтруктураРеквизитовФормы.мСохраненныйДок.ТочностьЕдиницыИзмерения   = СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения;
	СтруктураРеквизитовФормы.мСохраненныйДок.ВидОтчетности              = Перечисления.ВидыОтчетности.РегламентированнаяОтчетность;
	СтруктураРеквизитовФормы.мСохраненныйДок.Комментарий                = Комментарий;
	СтруктураРеквизитовФормы.мСохраненныйДок.Вид                        = Вариант;
	СтруктураРеквизитовФормы.мСохраненныйДок.ПредставлениеВида          = РегламентированнаяОтчетность.ПредставлениеВидаДокумента(СтруктураРеквизитовФормы.мСохраненныйДок.Вид);
	СтруктураРеквизитовФормы.мСохраненныйДок.Банк                       = СтруктураРеквизитовФормы.Банк;
	СтруктураРеквизитовФормы.мСохраненныйДок.СтатусОтчета               = СтатусОтчета;
	СтруктураРеквизитовФормы.мВариант                                   = Вариант;

	Если СтруктураРеквизитовФормы.Организация <> Справочники.Организации.ПустаяСсылка() Тогда
		СтруктураРеквизитовФормы.мСохраненныйДок.КодНалоговогоОргана = СтруктураРеквизитовФормы.Организация.КодНалоговогоОргана;
	КонецЕсли;

	СтруктураРеквизитовФормы.мСохраненныйДок.ФорматВыгрузки = "Автоматически";
	
	СохранитьДанныеРаздела(НаимТекРаздела, Ложь);
	
	ЗаполнитьПустыеСтруктурыДанных();
	
	// формируем данные редактируемых ячеек таблицы
	ПоказателиОтчета = Новый Структура();
	
	ЗаполнитьПоказателиОтчетаНаСервере(ПоказателиОтчета);
	
	// формируем список сохранения
	СписокСохранения = Новый Структура();
	
	СписокСохранения.Вставить("ПоказателиОтчета", ПоказателиОтчета);
	
	ДанныеВариантовАвтоЗаполнения = Новый Структура;
	
	Для Каждого ЭлементСтруктуры Из мСтруктураВариантыЗаполнения Цикл
		МассивТаблЗнач = Новый Массив;
		ДанныеВариантовАвтоЗаполнения.Вставить(ЭлементСтруктуры.Ключ, МассивТаблЗнач);
		
		Для Каждого ЭлементМассива Из ЭтаФорма["ТаблицаВариантыЗаполнения" + ЭлементСтруктуры.Ключ] Цикл
			МассивТаблЗнач.Добавить(ДанныеФормыВЗначение(ЭлементМассива.ТаблицаВариантовЗаполнения, Тип("ТаблицаЗначений")));
		КонецЦикла;
		
	КонецЦикла;
	
	СписокСохранения.Вставить("ДанныеВариантовАвтоЗаполнения", ДанныеВариантовАвтоЗаполнения);
	
	ДанныеМногоуровневыхРазделов = Новый Структура;
	Для Каждого Элем Из мСтруктураМногоуровневыхРазделов Цикл
		СтруктураРаздела = Элем.Значение;
		Если НЕ СтруктураРаздела.Свойство("Подчиненность") Тогда
			ДанныеМногоуровневыхРазделов.Вставить(Элем.Ключ, ПолучитьИзВременногоХранилища(
				СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + Элем.Ключ]));
		КонецЕсли;
	КонецЦикла;
	
	СписокСохранения.Вставить("ДанныеМногоуровневыхРазделов", ДанныеМногоуровневыхРазделов);
	
	СписокСохранения.Вставить("ВерсияФормы", СтруктураРеквизитовФормы.мВерсияФормы);
	
	СписокСохранения.Вставить("СохранятьРасшифровку", СтруктураРеквизитовФормы.мСохранятьРасшифровку);
	
	Если СтруктураРеквизитовФормы.АдресВременногоХранилищаРасшифровки <> Неопределено Тогда
	
		ТаблицаРасшифровки = ПолучитьИзВременногоХранилища(СтруктураРеквизитовФормы.АдресВременногоХранилищаРасшифровки);

		Если СтруктураРеквизитовФормы.мСохранятьРасшифровку = Истина Тогда
			СписокСохранения.Вставить("Расшифровка", ТаблицаРасшифровки);
		КонецЕсли;
		
	КонецЕсли;
	
	СписокСохранения.Вставить("ГруппаОрганизаций", СтруктураРеквизитовФормы.ГруппаОрганизаций);
	
	СписокСохранения.Вставить("ТипАдреса", СтруктураРеквизитовФормы.мТипАдреса);
	
	СписокСохранения.Вставить("Адрес9Запятых", СтруктураРеквизитовФормы.мАдресДляВыгрузки);
	
	СписокСохранения.Вставить("ПечатьБезШтрихкодаРазрешена", СтруктураРеквизитовФормы.мПечатьБезШтрихкодаРазрешена);
	
	СписокСохранения.Вставить("мПроверятьСоотношенияПриПечатиИВыгрузки", СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки);
	
	СписокСохранения.Вставить("ПрименениеЕНВД", СтруктураРеквизитовФормы.ПрименениеЕНВД);
	
	СписокСохранения.Вставить("Авторасчет", СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);
	
	СохрСоставДополнительныхСтрок = Новый Структура;
	
	Для Каждого ЭлементСтруктуры Из СоставДополнительныхСтрок Цикл
		
		Если ЭлементСтруктуры.Ключ = "СтруктураСоставов" Тогда
			
			СтруктураСоставов = Новый Структура;
			
			Для Каждого Элемент Из ЭлементСтруктуры.Значение Цикл
				
				ПолучитьДеревоНастроекСоставаДопСтрок(Элемент.Ключ);
				
				Если Элемент.Ключ = "Баланс" Тогда
					СтруктураСоставов.Вставить(Элемент.Ключ, ДеревоНастроекБаланс);
				ИначеЕсли Элемент.Ключ = "ФормаОтчета" Тогда
					СтруктураСоставов.Вставить(Элемент.Ключ, ДеревоНастроекФормаОтчета);
				КонецЕсли;
			
			КонецЦикла;
			
			СохрСоставДополнительныхСтрок.Вставить(ЭлементСтруктуры.Ключ, СтруктураСоставов);
			
		Иначе
			
			СохрСоставДополнительныхСтрок.Вставить(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Значение);
			
		КонецЕсли;
		
	КонецЦикла;
	
	СписокСохранения.Вставить("СоставДополнительныхСтрок", СохрСоставДополнительныхСтрок);
	
	// Сохранение разделов без формы ввода сведений.
	РазделыБезВводаСведений = Новый Структура;
	
	ДополнитьДаннымиРазделаБезВводаСведений(РазделыБезВводаСведений, "ОСВ_008");
	ДополнитьДаннымиРазделаБезВводаСведений(РазделыБезВводаСведений, "ОСВ_009");
	
	ДополнитьДаннымиРазделаБезВводаСведений(РазделыБезВводаСведений, "Анализ_50");
	ДополнитьДаннымиРазделаБезВводаСведений(РазделыБезВводаСведений, "Анализ_51");
	ДополнитьДаннымиРазделаБезВводаСведений(РазделыБезВводаСведений, "Анализ_52");
	ДополнитьДаннымиРазделаБезВводаСведений(РазделыБезВводаСведений, "Анализ_55");
	
	СписокСохранения.Вставить("РазделыБезВводаСведений", РазделыБезВводаСведений);
	
	СохрСтруктураМногострочныхЧастей = Новый Структура;
	
	ПолучитьСтруктуруМногострочныхЧастей();
	
	Для Каждого МногострочнаяЧасть Из СтруктураМногострочныхЧастей Цикл
		
		НовыйЭлементСтруктуры = Новый Структура;
		
		Для Каждого ЭлементСтруктуры Из МногострочнаяЧасть.Значение Цикл
			
			Если ЭлементСтруктуры.Ключ = "ИмяПоляТабличногоДокумента" Тогда
				
				НовыйЭлементСтруктуры.Вставить(ЭлементСтруктуры.Ключ, "ПолеТабличногоДокумента" + ЭлементСтруктуры.Значение);
				
			ИначеЕсли ЭлементСтруктуры.Ключ = "Состав" Тогда
				
				ТаблЗнач = Новый ТаблицаЗначений;
				
				Колонки = ЭлементСтруктуры.Значение[0];
				
				Для Каждого Колонка Из Колонки Цикл
					
					ТаблЗнач.Колонки.Добавить(Колонка.Ключ);
					
				КонецЦикла;
				
				Для Каждого Элемент Из ЭлементСтруктуры.Значение Цикл
					
					СтрТаблЗнач = ТаблЗнач.Добавить();
					
					Для Каждого ЗначениеКолонки Из Элемент Цикл
						
						СтрТаблЗнач[ЗначениеКолонки.Ключ] = ЗначениеКолонки.Значение;
						
					КонецЦикла;
					
				КонецЦикла;
				
				НовыйЭлементСтруктуры.Вставить(ЭлементСтруктуры.Ключ, ТаблЗнач);
				
			Иначе 
				
				НовыйЭлементСтруктуры.Вставить(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Значение);
				
			КонецЕсли;
			
		КонецЦикла;
		
		СохрСтруктураМногострочныхЧастей.Вставить(МногострочнаяЧасть.Ключ, НовыйЭлементСтруктуры);
		
	КонецЦикла;
	
	СписокСохранения.Вставить("СтруктураМногострочныхЧастей", СохрСтруктураМногострочныхЧастей);
	СписокСохранения.Вставить("ВидСдачиОтчетности", ВидСдачиОтчетности);
	СписокСохранения.Вставить("БалансНекоммерческойОрганизации", СтруктураРеквизитовФормы.ЭтоБалансНекоммерческойОрганизации);
	
	СписокСохранения.Вставить("СтруктураОтчета", СтруктураОтчета);
	
	СписокСохранения.Вставить("ОборотыСчета75_01", СтруктураРеквизитовФормы.ОборотыСчета75_01);
	
	СписокСохранения.Вставить("ПодверсияВыгрузки", "1.5");
	
	ХранилищеДанных = Новый ХранилищеЗначения(СписокСохранения);
	СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета = ХранилищеДанных;
	
	// Записываем документ, хранящий данные отчета.
	Попытка
		СтруктураРеквизитовФормы.мСохраненныйДок.Записать();
		
	Исключение
		Если НЕ Автосохранение Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), РегламентированнаяОтчетностьКлиентСервер.СформироватьТекстСообщения(ОписаниеОшибки()));
			Сообщение.Сообщить();
		КонецЕсли;
		
		СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
		Возврат Ложь;
		
	КонецПопытки;
	
	СохранитьДеревоСтраницОтчета(СтруктураРеквизитовФормы.мСохраненныйДок);
	
	Модифицированность = Ложь;

	СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
	
	Если НЕ СтруктураРеквизитовФормы.мБезОткрытияФормы
	   И НЕ СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
		ЗаблокироватьДанныеДляРедактирования(СтруктураРеквизитовФормы.мСохраненныйДок, , ЭтаФорма.УникальныйИдентификатор);
	КонецЕсли;
	
	Если ДанныеДляРазблокирования <> Неопределено Тогда
		РазблокироватьДанныеДляРедактирования(ДанныеДляРазблокирования.Ключ, ДанныеДляРазблокирования.ИдФормы);
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Процедура СохранитьДеревоСтраницОтчета(Знач мСохраненныйДок)
	
	Если мСохраненныйДок <> Неопределено Тогда
				
		Если ТипЗнч(мСохраненныйДок) = Тип("ДокументСсылка.РегламентированныйОтчет") Тогда
			мСохраненныйДок = мСохраненныйДок.ПолучитьОбъект();
		КонецЕсли;
		
		Если Не мСохраненныйДок.ЭтоНовый() Тогда
			
			// Сохраняем выбранные листы для печати в хранилище
			ХранилищеДанных = Новый ХранилищеЗначения(РеквизитФормыВЗначение("мДеревоСтраницОтчета"));
			мСохраненныйДок.ДеревоНастройкиСтраниц = ХранилищеДанных;
			Попытка
				мСохраненныйДок.Записать();
			Исключение
			КонецПопытки;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьСохраненныеДанные()
	
	Перем ДанныеМногоуровневыхРазделов;
	Перем ДанныеМногострочногоРаздела;
	Перем ДанныеВариановАвтоЗаполнения;
	Перем ПоказателиОтчета;
	Перем ВерсияФормы;
	Перем ТаблицаРасшифровки;
	Перем СохраненнаяСтруктураМногострочныхЧастей;
	Перем Авторасчет;
	
	// Обновление сведений об организации в случае копирования отчета.
	Если СтруктураРеквизитовФормы.Организация <> СтруктураРеквизитовФормы.мСохраненныйДок.Организация
	   И СтруктураРеквизитовФормы.Организация <> РегламентированнаяОтчетностьКлиентСервер.ПустоеЗначениеТипа("СправочникСсылка.Организации")
	   И СтруктураРеквизитовФормы.Организация <> Неопределено Тогда
		СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация = Истина;
	Иначе
		// восстанавливаем реквизиты отчета
		СтруктураРеквизитовФормы.Организация = СтруктураРеквизитовФормы.мСохраненныйДок.Организация;
	КонецЕсли;
	
	ДатаПодписи                                       = СтруктураРеквизитовФормы.мСохраненныйДок.ДатаПодписи;
	СтруктураРеквизитовФормы.ЕдиницаИзмерения         = СтруктураРеквизитовФормы.мСохраненныйДок.ЕдиницаИзмерения;
	СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = СтруктураРеквизитовФормы.мСохраненныйДок.ТочностьЕдиницыИзмерения;
	Комментарий                                       = СтруктураРеквизитовФормы.мСохраненныйДок.Комментарий;
	
	СтруктураРеквизитовФормы.Банк = СтруктураРеквизитовФормы.мСохраненныйДок.Банк;
	
	// Заполнение настроек состава страниц по сохраненным значениям.
	СписокСохранения = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить();
	
	Если СписокСохранения.Свойство("ДанныеМногоуровневыхРазделов", ДанныеМногоуровневыхРазделов) Тогда
		Для Каждого ЭлементСтруктуры Из ДанныеМногоуровневыхРазделов Цикл
			СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ЭлементСтруктуры.Ключ]
				= ПоместитьВоВременноеХранилище(ЭлементСтруктуры.Значение, УникальныйИдентификатор);
		КонецЦикла;
	КонецЕсли;
	
	ИсходноеДеревоСтраниц = РеквизитФормыВЗначение("мДеревоСтраницОтчета");
	ДеревоНастройкиСтраниц = СтруктураРеквизитовФормы.мСохраненныйДок.ДеревоНастройкиСтраниц.Получить();
	ДеревоНастройкиСтраниц.Колонки.Добавить("ПреобразоватьВМассив", Новый ОписаниеТипов("Булево"));
	ОтборВсехСтрок = Новый Структура("ПреобразоватьВМассив", Ложь);
	СтрокиНастройкиСтраниц = ДеревоНастройкиСтраниц.Строки.НайтиСтроки(ОтборВсехСтрок, Истина);
	
	Для Каждого СтрокаНастройкиСтраницы Из СтрокиНастройкиСтраниц Цикл
		ИмяРаздела = СтрокаНастройкиСтраницы.ИмяСтраницы;
		СтрокаДереваРазделов = ИсходноеДеревоСтраниц.Строки.Найти(ИмяРаздела, "ИмяСтраницы", Истина);
		Если СтрокаДереваРазделов <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(СтрокаДереваРазделов, СтрокаНастройкиСтраницы);
		КонецЕсли;
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(ИсходноеДеревоСтраниц.Скопировать(), "мДеревоСтраницОтчета");
	
	СписокСохранения.Свойство("Авторасчет", Авторасчет);
	Если НЕ Авторасчет = Неопределено Тогда
		СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет = Авторасчет;
	КонецЕсли;
	
	// Сохраненные данные вариантов автозаполнения ячеек.
	Если СписокСохранения.Свойство("ДанныеВариантовАвтоЗаполнения", ДанныеВариановАвтоЗаполнения) Тогда
		Если НЕ ДанныеВариановАвтоЗаполнения = Неопределено Тогда
			мСтруктураВариантыЗаполнения.Очистить();
			
			Для Каждого ЭлементСтруктуры Из ДанныеВариановАвтоЗаполнения Цикл
				
				мСтруктураВариантыЗаполнения.Вставить(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Ключ);
				
				ЭтаФорма["ТаблицаВариантыЗаполнения" + ЭлементСтруктуры.Ключ].Очистить();
				
				Для Каждого ЭлементМассива Из ЭлементСтруктуры.Значение Цикл
					ТаблВарЗаполнения = ЭтаФорма["ТаблицаВариантыЗаполнения" + ЭлементСтруктуры.Ключ].Добавить().ТаблицаВариантовЗаполнения;
					ЗначениеВДанныеФормы(ЭлементМассива, ТаблВарЗаполнения);
				КонецЦикла;
				
			КонецЦикла;
			
			КонвертироватьТаблицуВариантовЗаполнения();
			
		КонецЕсли;
		
	КонецЕсли;
	
	СписокСохранения.Свойство("ВидСдачиОтчетности", ВидСдачиОтчетности);
	УстановитьВидСдачиОтчетности(ВидСдачиОтчетности);
	
	СписокСохранения.Свойство("СтруктураМногострочныхЧастей", СохраненнаяСтруктураМногострочныхЧастей);
	
	Если СохраненнаяСтруктураМногострочныхЧастей <> Неопределено Тогда
		Для Каждого ЭлементСтруктуры Из СохраненнаяСтруктураМногострочныхЧастей Цикл
			
			Если НЕ ЭлементСтруктуры.Значение.Свойство("Состав") Тогда
				Продолжить;
			КонецЕсли;
			
			ТаблЗнач = ЭлементСтруктуры.Значение.Состав;
			
			СтруктураЗнач = Новый Структура;
			МассивЗнач    = Новый Массив;
			
			Для Каждого СтрТаблЗнач Из ТаблЗнач Цикл
				СтруктураЗнач.Очистить();
				
				Для Каждого Колонка Из ТаблЗнач.Колонки Цикл
					СтруктураЗнач.Вставить(Колонка.Имя, СтрТаблЗнач[Колонка.Имя]);
				КонецЦикла;
				
				МассивЗнач.Добавить(СтруктураЗнач);
				
			КонецЦикла;
			
			ЭлементСтруктуры.Значение.Состав = МассивЗнач;
			
			ЭлементСтруктуры.Значение.ИмяПоляТабличногоДокумента = СтрЗаменить(ЭлементСтруктуры.Значение.ИмяПоляТабличногоДокумента, "ПолеТабличногоДокумента", "");
			
		КонецЦикла;
		
		КонвертироватьСтруктуруМногострочныхЧастей(СохраненнаяСтруктураМногострочныхЧастей);
		
		СтруктураМногострочныхЧастей = СохраненнаяСтруктураМногострочныхЧастей;
		
	КонецЕсли;
	
	СтруктураРеквизитовФормы.АдресВоВремХранилищеСтруктураМногострочныхЧастей =
		ПоместитьВоВременноеХранилище(СтруктураМногострочныхЧастей, УникальныйИдентификатор);
	
	// Сведения о настройке состава дополнительных строк.
	СформироватьНастройкиСоставаДополнительныхСтрок(СоставДополнительныхСтрок);
	СохраненныйСоставДополнительныхСтрок = Неопределено;
	СписокСохранения.Свойство("СоставДополнительныхСтрок", СохраненныйСоставДополнительныхСтрок);
	
	Если ТипЗнч(СохраненныйСоставДополнительныхСтрок) = Тип("Структура")
	   И СохраненныйСоставДополнительныхСтрок.Свойство("СтруктураСоставов")
	   И СохраненныйСоставДополнительныхСтрок.СтруктураСоставов.Свойство("Баланс")
	   И ТипЗнч(СохраненныйСоставДополнительныхСтрок.СтруктураСоставов.Баланс) = Тип("ДеревоЗначений") Тогда
		НайденнаяСтрока = СохраненныйСоставДополнительныхСтрок.СтруктураСоставов.Баланс.Строки.Найти("1520", "Код");
		
		Если НЕ НайденнаяСтрока = Неопределено Тогда
			
			Если ТипЗнч(НайденнаяСтрока) = Тип("СтрокаДереваЗначений")
			   И НайденнаяСтрока.Строки.Найти("ДопСтрока15209", "ИмяОбластиДопСтроки") = Неопределено Тогда
				
				НоваяСтрока = НайденнаяСтрока.Строки.Добавить();
				
				НоваяСтрока.ИмяОбластиДопСтроки = "ДопСтрока15209";
				НоваяСтрока.Наименование        = "Расчеты с персоналом по прочим операциям";
				
			КонецЕсли;
			
		КонецЕсли;
		
		НайденнаяСтрока = СохраненныйСоставДополнительныхСтрок.СтруктураСоставов.Баланс.Строки.Найти("1150", "Код");
		
		Если НЕ НайденнаяСтрока = Неопределено Тогда
			
			Если ТипЗнч(НайденнаяСтрока) = Тип("СтрокаДереваЗначений")
			   И НайденнаяСтрока.Строки.Найти("ДопСтрока11509", "ИмяОбластиДопСтроки") = Неопределено Тогда
				
				НоваяСтрока = НайденнаяСтрока.Строки.Добавить();
				
				НоваяСтрока.ИмяОбластиДопСтроки = "ДопСтрока11509";
				НоваяСтрока.Наименование        = "Арендованное имущество";
				
			КонецЕсли;
			
		КонецЕсли;
		
		НайденнаяСтрока = СохраненныйСоставДополнительныхСтрок.СтруктураСоставов.Баланс.Строки.Найти("1540", "Код");
		
		Если (СтруктураОтчета.Баланс.ИмяМакета = "Баланс_2012Кв4_3"
		 ИЛИ СтруктураОтчета.Баланс.ИмяМакета = "БалансНКО_2012Кв4_3")
		   И НайденнаяСтрока = Неопределено Тогда
		   
			НайденнаяСтрока = СохраненныйСоставДополнительныхСтрок.СтруктураСоставов.Баланс.Строки.Добавить();
		   
		   	НайденнаяСтрока.ВключатьВОтчет         = 0;
			НайденнаяСтрока.ИмяОбластиДопСтроки    = "";
			НайденнаяСтрока.Код                    = "1540";
			НайденнаяСтрока.МаксимальноеКоличество = 0;
			НайденнаяСтрока.Наименование           = "Оценочные обязательства";
			НайденнаяСтрока.Существенность         = 0;
			НайденнаяСтрока.ТипСостава             = "";
		   
		КонецЕсли;   
		
		Если НЕ НайденнаяСтрока = Неопределено Тогда
			
			Если ТипЗнч(НайденнаяСтрока) = Тип("СтрокаДереваЗначений")
			   И НайденнаяСтрока.Строки.Найти("ДопСтрока15401", "ИмяОбластиДопСтроки") = Неопределено Тогда
				
				НоваяСтрока = НайденнаяСтрока.Строки.Добавить();
				
				НоваяСтрока.ИмяОбластиДопСтроки = "ДопСтрока15401";
				НоваяСтрока.Наименование        = "Оценочные обязательства по вознаграждениям работников";
				
			КонецЕсли;
			
			Если ТипЗнч(НайденнаяСтрока) = Тип("СтрокаДереваЗначений")
			   И НайденнаяСтрока.Строки.Найти("ДопСтрока15402", "ИмяОбластиДопСтроки") = Неопределено Тогда
				
				НоваяСтрока = НайденнаяСтрока.Строки.Добавить();
				
				НоваяСтрока.ИмяОбластиДопСтроки = "ДопСтрока15402";
				НоваяСтрока.Наименование        = "Резервы предстоящих расходов прочие";
				
			КонецЕсли;
			
		КонецЕсли;
		
		НайденнаяСтрока = СохраненныйСоставДополнительныхСтрок.СтруктураСоставов.Баланс.Строки.Найти("1260", "Код");
		
		Если НЕ НайденнаяСтрока = Неопределено Тогда
			
			Если ТипЗнч(НайденнаяСтрока) = Тип("СтрокаДереваЗначений")
			   И НайденнаяСтрока.Строки.Найти("ДопСтрока12610", "ИмяОбластиДопСтроки") = Неопределено Тогда
				
				НоваяСтрока = НайденнаяСтрока.Строки.Добавить();
				
				НоваяСтрока.ИмяОбластиДопСтроки = "ДопСтрока12610";
				НоваяСтрока.Наименование        = "НДС по арендным обязательствам";
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ТипЗнч(СохраненныйСоставДополнительныхСтрок) = Тип("Структура")
	   И СохраненныйСоставДополнительныхСтрок.Свойство("СтруктураСоставов")
	   И СохраненныйСоставДополнительныхСтрок.СтруктураСоставов.Свойство("ФормаОтчета")
	   И ТипЗнч(СохраненныйСоставДополнительныхСтрок.СтруктураСоставов.Баланс) = Тип("ДеревоЗначений") Тогда
		
		НайденнаяСтрока = СохраненныйСоставДополнительныхСтрок.СтруктураСоставов.ФормаОтчета.Строки.Найти("ДопСтрока24601", "ИмяОбластиДопСтроки", Истина);
		
		Если НЕ НайденнаяСтрока = Неопределено Тогда
			
			НайденнаяСтрока.Наименование = "Налоги, уплачиваемые в связи с применением специальных налоговых режимов";
			
		КонецЕсли;
	КонецЕсли;
	
	Если СохраненныйСоставДополнительныхСтрок = Неопределено Тогда
		// Используются настройки по умолчанию.
	ИначеЕсли Число(СоставДополнительныхСтрок.Версия) > Число (СохраненныйСоставДополнительныхСтрок.Версия) Тогда
		Если СохраненныйСоставДополнительныхСтрок.Модифицированность Тогда
			ОбновитьСоставДополнительныхСтрокИзСохраненныхДанных(СохраненныйСоставДополнительныхСтрок);
		Иначе
			// Используются настройки по умолчанию новой версии.
		КонецЕсли;
	Иначе
		СоставДополнительныхСтрок.Очистить();
		
		Для Каждого ЭлементСтруктуры Из СохраненныйСоставДополнительныхСтрок Цикл
			
			Если ЭлементСтруктуры.Ключ = "СтруктураСоставов" Тогда
				
				СтруктураСоставов = Новый Структура;
				
				Для Каждого Элемент Из ЭлементСтруктуры.Значение Цикл
					
					Если Элемент.Значение.Колонки.Найти("ДостДляРедактирования_Существенность") = Неопределено Тогда
						
						Элемент.Значение.Колонки.Добавить("ДостДляРедактирования_Существенность");
						Элемент.Значение.Колонки.Добавить("ДостДляРедактирования_МаксимальноеКоличество");
						
						Для Каждого СтрокаДерева Из Элемент.Значение.Строки Цикл
							
							СтрокаДерева.ДостДляРедактирования_Существенность
								= ЗначениеЗаполнено(СтрокаДерева.Существенность);
							
							СтрокаДерева.ДостДляРедактирования_МаксимальноеКоличество
								= ЗначениеЗаполнено(СтрокаДерева.Существенность);
							
							СтрокаДерева.МаксимальноеКоличество
								= ?(ЗначениеЗаполнено(СтрокаДерева.Существенность), 10, 0);
							
						КонецЦикла;
						
					КонецЕсли;
					
					Если Элемент.Ключ = "Баланс" Тогда
						ДеревоНастроекБаланс = Элемент.Значение.Скопировать();
						СтруктураРеквизитовФормы.АдресВоВремХранилищеДеревоНастроекБаланс
							= ПоместитьВоВременноеХранилище(ДеревоНастроекБаланс, УникальныйИдентификатор);
					ИначеЕсли Элемент.Ключ = "ФормаОтчета" Тогда
						ДеревоНастроекФормаОтчета = Элемент.Значение.Скопировать();
						СтруктураРеквизитовФормы.АдресВоВремХранилищеДеревоНастроекФормаОтчета
							= ПоместитьВоВременноеХранилище(ДеревоНастроекФормаОтчета, УникальныйИдентификатор);
						ОбновитьВключенныеДопСтрокиОФРПриПримененииЕНВД();
					КонецЕсли;
					
					СтруктураСоставов.Вставить(Элемент.Ключ, "ДеревоНастроек" + Элемент.Ключ);
					
				КонецЦикла;
				
				СоставДополнительныхСтрок.Вставить("СтруктураСоставов", СтруктураСоставов);
				
			Иначе
				
				СоставДополнительныхСтрок.Вставить(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Значение);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	// Восстановление сведений разделов без ввода данных.
	РазделыБезВводаСведений = Неопределено;
	СписокСохранения.Свойство("РазделыБезВводаСведений", РазделыБезВводаСведений);
	Если ТипЗнч(РазделыБезВводаСведений) = Тип("Структура") Тогда
		Для Каждого РазделБезВводаСведений Из РазделыБезВводаСведений Цикл
			ИмяРаздела = РазделБезВводаСведений.Ключ;
			ДанныеРаздела = РазделБезВводаСведений.Значение;
			Попытка
				ПоместитьВоВременноеХранилище(ДанныеРаздела.Представление, ЭтаФорма["СтруктураДанных" + ИмяРаздела].АдресПредставления);
				ПоместитьВоВременноеХранилище(ДанныеРаздела.Сведения,      ЭтаФорма["СтруктураДанных" + ИмяРаздела].АдресСведений);
			Исключение
				ПоместитьВоВременноеХранилище(Новый ТабличныйДокумент, ЭтаФорма["СтруктураДанных" + ИмяРаздела].АдресПредставления);
				ПоместитьВоВременноеХранилище(Новый ТаблицаЗначений,   ЭтаФорма["СтруктураДанных" + ИмяРаздела].АдресСведений);
			КонецПопытки;
		КонецЦикла;
	КонецЕсли;
	
	Если (СписокСохранения.Свойство("ВерсияФормы", ВерсияФормы) И ВерсияФормы <> СтруктураРеквизитовФормы.мВерсияФормы)
	 ИЛИ ЗначениеЗаполнено(СтруктураРеквизитовФормы.мСкопированаФорма) Тогда
		СформироватьСоставПоказателей();
		
		// Перекрашивание фона ячеек в цвет ручного ввода данных.
		Если СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Тогда
			// Для корректной работы универсального механизма, необходимо проинициализировать
			// свойство "НаимТекущегоРаздела" структуры "СтруктураРеквизитовФормы".
			ВременноОпределеноНаимТекущегоРаздела = Ложь;
			Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = Неопределено Тогда
				СтруктураРеквизитовФормы.НаимТекущегоРаздела = РазделыОтчета.ПолучитьЭлементы()[0].КолонкаРазделыОтчетаСокрНаим;
				ВременноОпределеноНаимТекущегоРаздела = Истина;
			КонецЕсли;
			ИзменитьТаблицуВариантовЗаполненияНаСервере();
			Если ВременноОпределеноНаимТекущегоРаздела Тогда
				СтруктураРеквизитовФормы.НаимТекущегоРаздела = Неопределено;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	// Флажок проверки соотношения показателей при печати и выгрузке.
	СписокСохранения.Свойство("мПроверятьСоотношенияПриПечатиИВыгрузки", СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки);
	Если СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки = Неопределено Тогда
		СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки = Ложь;
	КонецЕсли;
	
	Если Месяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) % 3 = 0 Тогда
		Если НЕ СписокСохранения.Свойство("ПечатьБезШтрихкодаРазрешена", СтруктураРеквизитовФормы.мПечатьБезШтрихкодаРазрешена) Тогда
			СтруктураРеквизитовФормы.мПечатьБезШтрихкодаРазрешена = Ложь;
		КонецЕсли;
	Иначе
		СтруктураРеквизитовФормы.мПечатьБезШтрихкодаРазрешена = Истина;
	КонецЕсли;
	
	СписокСохранения.Свойство("ПрименениеЕНВД", СтруктураРеквизитовФормы.ПрименениеЕНВД);
	
	СписокСохранения.Свойство("СохранятьРасшифровку", СтруктураРеквизитовФормы.мСохранятьРасшифровку);
	Если СтруктураРеквизитовФормы.мСохранятьРасшифровку = Неопределено Тогда
		СтруктураРеквизитовФормы.мСохранятьРасшифровку = Истина;
	КонецЕсли;
	
	СписокСохранения.Свойство("Расшифровка", ТаблицаРасшифровки);
	
	Если ТипЗнч(ТаблицаРасшифровки) = Тип("ТаблицаЗначений") Тогда
		
		Если ТаблицаРасшифровки.Колонки.Найти("НомСтроки") <> Неопределено Тогда
			
			ИмяПоказателя     = ТаблицаРасшифровки.Колонки.Найти("ИмяПоказателя");
			ИмяПоказателя.Имя = "НаименованиеПоказателя";
			
			ИмяЯчейки     = ТаблицаРасшифровки.Колонки.Найти("ИмяЯчейки");
			ИмяЯчейки.Имя = "ИмяПоказателя";
			
			Раздел     = ТаблицаРасшифровки.Колонки.Найти("Раздел");
			Раздел.Имя = "ИмяРаздела";
			
			ИмяСлагаемого     = ТаблицаРасшифровки.Колонки.Найти("ИмяСлагаемого");
			ИмяСлагаемого.Имя = "НаименованиеСлагаемого";
			
			ТаблицаРасшифровки.Колонки.Добавить("ДополнительныеПараметры");
			
			Для Каждого Элемент Из ТаблицаРасшифровки Цикл
				
				Если ЗначениеЗаполнено(Элемент.КодСчета) Тогда
					Элемент.НаименованиеСлагаемого = Элемент.НаименованиеСлагаемого + Элемент.КодСчета.Код;
				КонецЕсли;
				
				ДопПараметры = Новый Структура;
				
				Если ЗначениеЗаполнено(Элемент.Субконто1) Тогда
					ДопПараметры.Вставить("Субконто1", Новый Структура("ВидСубконто,ЗначениеСубконто", Элемент.КодСчета.ВидыСубконто[0].ВидСубконто, Элемент.Субконто1));
				КонецЕсли;
				
				Если ЗначениеЗаполнено(Элемент.Субконто2) Тогда
					ДопПараметры.Вставить("Субконто2", Новый Структура("ВидСубконто,ЗначениеСубконто", Элемент.КодСчета.ВидыСубконто[1].ВидСубконто, Элемент.Субконто2));
				КонецЕсли;
				
				Если ЗначениеЗаполнено(Элемент.Субконто3) Тогда
					ДопПараметры.Вставить("Субконто3", Новый Структура("ВидСубконто,ЗначениеСубконто", Элемент.КодСчета.ВидыСубконто[2].ВидСубконто, Элемент.Субконто3));
				КонецЕсли;
				
				Элемент.ДополнительныеПараметры = ДопПараметры;
				
			КонецЦикла;
			
			ТаблицаРасшифровки = ТаблицаРасшифровки.Скопировать(, "ИмяПоказателя, НаименованиеПоказателя, ЗнакОперации, НаименованиеСлагаемого, Сумма, ИмяРаздела, ДополнительныеПараметры");
			
		КонецЕсли;
		
		СтруктураРеквизитовФормы.АдресВременногоХранилищаРасшифровки = ПоместитьВоВременноеХранилище(ТаблицаРасшифровки, УникальныйИдентификатор);
		Элементы.Расшифровать.Доступность = Истина;
		Элементы.ТабличныйДокументКонтекстноеМенюРасшифровать.Доступность = Истина;
		
	КонецЕсли;
	
	СохраненныеОборотыСчета75_01 = Неопределено;
	Если СписокСохранения.Свойство("ОборотыСчета75_01", СохраненныеОборотыСчета75_01) Тогда
		УстановитьОборотыСчета75_01(СохраненныеОборотыСчета75_01);
	КонецЕсли;
	
	// Сохраненные данные редактируемых ячеек.
	СписокСохранения.Свойство("ПоказателиОтчета", ПоказателиОтчета);
	
	СписокДополнительныхФайлов = Неопределено;
	Если СписокСохранения.Свойство("СписокДополнительныхФайлов", СписокДополнительныхФайлов) И СписокДополнительныхФайлов <> Неопределено Тогда
		ИмяФайлаПояснительнойЗаписки       = СписокДополнительныхФайлов.ИмяФайлаПояснительнойЗаписки;
		ИмяФайлаАудиторскогоЗаключения     = СписокДополнительныхФайлов.ИмяФайлаАудиторскогоЗаключения;
		ИмяФайлаЗаявленияРевизионногоСоюза = СписокДополнительныхФайлов.ИмяФайлаЗаявленияРевизионногоСоюза;
	КонецЕсли;
	
	СписокСохранения.Свойство("ГруппаОрганизаций", СтруктураРеквизитовФормы.ГруппаОрганизаций);
	Если СтруктураРеквизитовФормы.ГруппаОрганизаций = Неопределено Тогда
		СтруктураРеквизитовФормы.ГруппаОрганизаций = Новый СписокЗначений;
	КонецЕсли;
	
	СписокСохранения.Свойство("ТипАдреса", СтруктураРеквизитовФормы.мТипАдреса);
	Если СтруктураРеквизитовФормы.мТипАдреса = Неопределено ИЛИ ПустаяСтрока(СтруктураРеквизитовФормы.мТипАдреса) ИЛИ СтрНайти("АдрФакт, АдрЮР, АдрПочт", СтруктураРеквизитовФормы.мТипАдреса) = 0 Тогда
		СтруктураРеквизитовФормы.мТипАдреса = ТипАдресаПоУмолчанию();
	КонецЕсли;
	
	СписокСохранения.Свойство("Адрес9Запятых", СтруктураРеквизитовФормы.мАдресДляВыгрузки);
	Если СтруктураРеквизитовФормы.мАдресДляВыгрузки = Неопределено Тогда
		СтруктураРеквизитовФормы.мАдресДляВыгрузки = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(СтруктураРеквизитовФормы.Организация, ДатаПодписи, СтруктураРеквизитовФормы.мТипАдреса)[СтруктураРеквизитовФормы.мТипАдреса];
	КонецЕсли;
	
	СформироватьДеревоРазделовОтчетаНаСервере();
	
	Префикс = "ПолеТабличногоДокумента";
	
	Для Каждого Раздел Из мСвойстваРазделовДекларации.ПолучитьЭлементы() Цикл
		ИмяСтраницы = Раздел.ИмяСтраницы;
		
		Если ПоказателиОтчета.Свойство(Префикс + ИмяСтраницы)
		   И НЕ ПоказателиОтчета[Префикс + ИмяСтраницы].Свойство("АдресСведений") Тогда
			ЭтаФорма["СтруктураДанных" + ИмяСтраницы] = ПоказателиОтчета[Префикс + ИмяСтраницы];
		КонецЕсли;
		
	КонецЦикла;
	
	ИмяТекРаздела = РазделыОтчета.ПолучитьЭлементы()[0].КолонкаРазделыОтчетаСокрНаим;
	
	ТабличныйДокумент.Вывести(МакетРаздела15(ИмяТекРаздела));
	
	Для Каждого ЭлементСтруктуры Из СтруктураМногострочныхЧастей Цикл
		Если ЭлементСтруктуры.Значение.Свойство("ИмяПоляТабличногоДокумента")
		   И ЭлементСтруктуры.Значение.ИмяПоляТабличногоДокумента = ИмяТекРаздела Тогда
			// Линейная многострочная часть.
			ВывестиРазделВТабличныйДокумент(ЭлементСтруктуры.Ключ);
		Иначе
			// Древовидная многострочная часть.
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ЭлСтруктуры Из ЭтаФорма["СтруктураДанных" + ИмяТекРаздела] Цикл
		Попытка
			ТабличныйДокумент.Области[ЭлСтруктуры.Ключ].Значение = ЭлСтруктуры.Значение;
		Исключение
		КонецПопытки;
	КонецЦикла;
	
	ЗаполнитьПустыеСтруктурыДанных(Ложь);
	
	Если Месяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) % 3 = 0 Тогда
		Если НЕ СписокСохранения.Свойство("ПечатьБезШтрихкодаРазрешена", СтруктураРеквизитовФормы.мПечатьБезШтрихкодаРазрешена) Тогда
			СтруктураРеквизитовФормы.мПечатьБезШтрихкодаРазрешена = Ложь;
		КонецЕсли;
	Иначе
		СтруктураРеквизитовФормы.мПечатьБезШтрихкодаРазрешена = Истина;
	КонецЕсли;
	
	ИсходноеОтображениеБаланса = мДеревоСтраницОтчета.ПолучитьЭлементы()[0].ПоказатьСтраницу;
	
	РегламентированнаяОтчетность.ОперацииПриВосстановленииРегламентированногоОтчета(ЭтаФорма);
	
	мДеревоСтраницОтчета.ПолучитьЭлементы()[0].ПоказатьСтраницу = ИсходноеОтображениеБаланса;
	
	УстановитьФорматВыводаНаСервере(ИмяТекРаздела);
	
	КопироватьДанныеФормы(мДеревоСтраницОтчета, мДеревоВыбранныхСтраниц);
	
	ПеренумероватьСтрокиРасшифровкиБаланса();
	
	РасчетНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОборотыСчета75_01(СохраненноеЗначение)
	
	Если ТипЗнч(СохраненноеЗначение) = Тип("Структура") Тогда
		
		Для Каждого ЭлементСтруктуры Из СохраненноеЗначение Цикл
			
			ИмяЭлемента = ЭлементСтруктуры.Ключ;
			ЗначениеЭлемента = ЭлементСтруктуры.Значение;
			
			Если ТипЗнч(ЗначениеЭлемента) = Тип("Число")
				И СтруктураРеквизитовФормы.ОборотыСчета75_01.Свойство(ИмяЭлемента) Тогда
				СтруктураРеквизитовФормы.ОборотыСчета75_01[ИмяЭлемента] = ЗначениеЭлемента;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура КонвертироватьТаблицуВариантовЗаполнения()
	
	Если ЭтаФорма["ТаблицаВариантыЗаполненияОИК"][0].ТаблицаВариантовЗаполнения.НайтиСтроки(
		Новый Структура("КодПоказателя", "П100100321008")).Количество() = 0 Тогда
		
		НовыйЭлемент = ЭтаФорма["ТаблицаВариантыЗаполненияОИК"][0].ТаблицаВариантовЗаполнения.Добавить();
		НовыйЭлемент["КодПоказателя"] = "П100100321008";
		Если СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Тогда
			НовыйЭлемент["ВариантЗаполнения"] = 0;
		Иначе
			НовыйЭлемент["ВариантЗаполнения"] = 4;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЭтаФорма["ТаблицаВариантыЗаполненияОИК"][0].ТаблицаВариантовЗаполнения.НайтиСтроки(
		Новый Структура("КодПоказателя", "П100100331008")).Количество() = 0 Тогда
		
		НовыйЭлемент = ЭтаФорма["ТаблицаВариантыЗаполненияОИК"][0].ТаблицаВариантовЗаполнения.Добавить();
		НовыйЭлемент["КодПоказателя"] = "П100100331008";
		Если СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Тогда
			НовыйЭлемент["ВариантЗаполнения"] = 0;
		Иначе
			НовыйЭлемент["ВариантЗаполнения"] = 4;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура КонвертироватьСтруктуруМногострочныхЧастей(СохрСтруктураМногострочныхЧастей)
	
	Для каждого ЭлемИницСтруктурыМногострочныхЧастей Из СтруктураМногострочныхЧастей Цикл
		Если НЕ СохрСтруктураМногострочныхЧастей.Свойство(ЭлемИницСтруктурыМногострочныхЧастей.Ключ) Тогда
			СохрСтруктураМногострочныхЧастей.Вставить(
				ЭлемИницСтруктурыМногострочныхЧастей.Ключ,
				ЭлемИницСтруктурыМногострочныхЧастей.Значение);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСоставДополнительныхСтрокИзСохраненныхДанных(СохраненныйСоставДополнительныхСтрок)
	
	// Обновление настроек Бухгалтерского баланса.
	СохраненныйСоставДопСтрокБаланса = Неопределено;
	Если СохраненныйСоставДополнительныхСтрок.СтруктураСоставов.Свойство("Баланс", СохраненныйСоставДопСтрокБаланса) Тогда
		
		ПолучитьДеревоНастроекСоставаДопСтрок("Баланс");
		
		Для Каждого СтрокаУровня1 Из СохраненныйСоставДопстрокБаланса.Строки Цикл
			Для Каждого СтрокаУровня2 Из СтрокаУровня1.Строки Цикл
				ИмяОбластиДопСтроки = СтрокаУровня2.ИмяОбластиДопСтроки;
				НайденнаяСтрока = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(ЭтаФорма[СоставДополнительныхСтрок.СтруктураСоставов.Баланс].ПолучитьЭлементы(), "ИмяОбластиДопСтроки", ИмяОбластиДопСтроки);
				Если НайденнаяСтрока <> Неопределено Тогда
					НайденнаяСтрока.ВключатьВОтчет = СтрокаУровня2.ВключатьВОтчет;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		СтруктураРеквизитовФормы.АдресВоВремХранилищеДеревоНастроекБаланс
			= ПоместитьВоВременноеХранилище(ДеревоНастроекБаланс, УникальныйИдентификатор);
		
	КонецЕсли;
	
	// Обновление настроек Отчета о прибылях и убытках.
	СохраненныйСоставДопСтрокОПУ = Неопределено;
	Если СохраненныйСоставДополнительныхСтрок.СтруктураСоставов.Свойство("ФормаОтчета", СохраненныйСоставДопСтрокОПУ) Тогда
		
		ПолучитьДеревоНастроекСоставаДопСтрок("ФормаОтчета");
		
		Для Каждого СтрокаУровня1 Из СохраненныйСоставДопСтрокОПУ.Строки Цикл
			
			ЭтоФиксированныеДопстроки = ПустаяСтрока(СтрокаУровня1.ТипСостава);
			
			Если ЭтоФиксированныеДопстроки Тогда
				Для Каждого СтрокаУровня2 Из СтрокаУровня1.Строки Цикл
					ИмяОбластиДопСтроки = СтрокаУровня2.ИмяОбластиДопСтроки;
					НайденныеСтроки = ДеревоНастроекФормаОтчета.Строки.НайтиСтроки(
						Новый Структура("ИмяОбластиДопСтроки", ИмяОбластиДопСтроки), Истина);
					Если НайденныеСтроки.Количество() > 0 Тогда
						НайденныеСтроки[0].ВключатьВОтчет = СтрокаУровня2.ВключатьВОтчет;
					КонецЕсли;
				КонецЦикла;
			Иначе
				НайденныеСтрокиУровня1 = ДеревоНастроекФормаОтчета.Строки.НайтиСтроки(
					Новый Структура("ИмяОбластиДопСтроки", СтрокаУровня1.ИмяОбластиДопСтроки), Истина);
				Если НайденныеСтрокиУровня1.Количество() > 0 Тогда
					ЗаполнитьЗначенияСвойств(НайденныеСтрокиУровня1[0], СтрокаУровня1);
					Для Каждого СтрокаУровня2 Из СтрокаУровня1.Строки Цикл
						НоваяПользовательскаяСтрока = НайденныеСтрокиУровня1[0].Строки.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяПользовательскаяСтрока, СтрокаУровня2);
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
		СтруктураРеквизитовФормы.АдресВоВремХранилищеДеревоНастроекФормаОтчета
			= ПоместитьВоВременноеХранилище(ДеревоНастроекФормаОтчета, УникальныйИдентификатор);
		ОбновитьВключенныеДопСтрокиОФРПриПримененииЕНВД();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСведенияОбОрганизацииВРазделахНаСервере()
	
	СведенияОбОрганизации = Новый Структура;
	
	ЗаполнитьСведенияОбОрганизации(ЭтаФорма, , СведенияОбОрганизации);
	
	Если ТипЗнч(СведенияОбОрганизации) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Раздел Из мСвойстваРазделовДекларации.ПолучитьЭлементы() Цикл
		
		Если Раздел.МногостраничностьВРазделе
			ИЛИ Лев(Раздел.ИмяСтраницы, 6) = "Баланс"
			ИЛИ Раздел.ИмяСтраницы = "ДополнительныеФайлы" Тогда
			Продолжить;
		КонецЕсли;
		
		ДанныеРаздела = ЭтаФорма["СтруктураДанных" + Раздел.ИмяСтраницы];
		
		Если ДанныеРаздела.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Для каждого Пок Из СведенияОбОрганизации Цикл
			Если ДанныеРаздела.Свойство(Пок.Ключ) Тогда
				Если Пок.Ключ = "ОргБухгалтер" Тогда
					Если СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета < '2012-12-01' Тогда
						ДанныеРаздела.Вставить(Пок.Ключ, Пок.Значение);
					КонецЕсли;
				ИначеЕсли Пок.Ключ = "ОргКодОКПО" Тогда
					Если СтруктураРеквизитовФормы.ИП Тогда
						ДанныеРаздела.Вставить(Пок.Ключ, "");
					Иначе
						ДанныеРаздела.Вставить(Пок.Ключ, Пок.Значение);
					КонецЕсли;
				Иначе
					ДанныеРаздела.Вставить(Пок.Ключ, Пок.Значение);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьАвтоЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Команда = ДополнительныеПараметры.Команда;
	
	ИмяРаздела = Неопределено;
	Если Команда.Имя = "ЗаполнитьТекущий" Тогда
		ИмяРаздела = СтруктураРеквизитовФормы.НаимТекущегоРаздела;
	КонецЕсли;
	
	РезультатЗапускаФоновогоЗадания = ЗаполнитьАвтоНаСервере(ИмяРаздела);
	
	Если РезультатЗапускаФоновогоЗадания.Статус = "Выполняется" Тогда
		ОповещениеОЗавершении = Новый ОписаниеОповещения("ОбработатьЗавершениеАвтозаполненияВФоне", ЭтотОбъект);
		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтаФорма);
		ДлительныеОперацииКлиент.ОжидатьЗавершение(РезультатЗапускаФоновогоЗадания, ОповещениеОЗавершении, ПараметрыОжидания);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьЗавершениеАвтозаполненияВФоне(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		Если Результат.Статус = "Выполнено" Тогда
			ЗагрузитьПодготовленныеДанные();
			
		ИначеЕсли Результат.Статус = "Ошибка" Тогда
			ВызватьИсключение Результат.ПодробноеПредставлениеОшибки;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЗаполнитьАвтоНаСервере(ИмяРаздела = Неопределено)
	
	Модифицированность = Истина;
	
	СохранитьДанныеРаздела(СтруктураРеквизитовФормы.НаимТекущегоРаздела, Ложь);
	
	ЗаполнитьПустыеСтруктурыДанных();
	
	СтруктураРеквизитовФормы.АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
	
	ПолучитьСтруктуруМногострочныхЧастей();
	
	ПолучитьДеревоНастроекСоставаДопСтрок("Баланс");
	ПолучитьДеревоНастроекСоставаДопСтрок("ФормаОтчета");
	
	ПараметрыОтчета = Новый Структура();
	ПараметрыОтчета.Вставить("Организация",                     СтруктураРеквизитовФормы.Организация);
	ПараметрыОтчета.Вставить("ГруппаОрганизаций",               СтруктураРеквизитовФормы.ГруппаОрганизаций);
	ПараметрыОтчета.Вставить("мДатаНачалаПериодаОтчета",        СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
	ПараметрыОтчета.Вставить("мДатаКонцаПериодаОтчета",         СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	ПараметрыОтчета.Вставить("УникальныйИдентификаторФормы",    ЭтаФорма.УникальныйИдентификатор);
	ПараметрыОтчета.Вставить("АдресВоВременномХранилище",       СтруктураРеквизитовФормы.АдресВоВременномХранилище);
	ПараметрыОтчета.Вставить("СтруктураОтчета",                 СтруктураОтчета);
	ПараметрыОтчета.Вставить("СоставДополнительныхСтрокБаланс", ДеревоНастроекБаланс);
	ПараметрыОтчета.Вставить("СоставДополнительныхСтрокОПУ",    ДеревоНастроекФормаОтчета);
	ПараметрыОтчета.Вставить("ПрименениеЕНВД",                  СтруктураРеквизитовФормы.ПрименениеЕНВД);
	ПараметрыОтчета.Вставить("СтруктураМногострочныхЧастей",    СтруктураМногострочныхЧастей);
	Если СтруктураРеквизитовФормы.АдресВременногоХранилищаРасшифровки <> Неопределено Тогда
		ТаблицаРасшифровки = ПолучитьИзВременногоХранилища(СтруктураРеквизитовФормы.АдресВременногоХранилищаРасшифровки);
	Иначе
		ТаблицаРасшифровки = Неопределено;
	КонецЕсли;
	ПараметрыОтчета.Вставить("ТаблицаРасшифровки", ТаблицаРасшифровки);
	
	ЗаполнятьВсеВидимые = (НЕ ЗначениеЗаполнено(ИмяРаздела));
	
	ПараметрыОтчета.Вставить("ЗаполнятьБаланс",     (ЗаполнятьВсеВидимые ИЛИ ИмяРаздела = "Баланс")      И СтраницаВидимаНаСервере("Баланс"));
	ПараметрыОтчета.Вставить("ЗаполнятьОФР",        (ЗаполнятьВсеВидимые ИЛИ ИмяРаздела = "ФормаОтчета") И СтраницаВидимаНаСервере("ФормаОтчета"));
	ПараметрыОтчета.Вставить("ЗаполнятьОИК",        (ЗаполнятьВсеВидимые ИЛИ ИмяРаздела = "ОИК")         И СтраницаВидимаНаСервере("ОИК"));
	ПараметрыОтчета.Вставить("ЗаполнятьОДДС",       (ЗаполнятьВсеВидимые ИЛИ ИмяРаздела = "ОДДС")        И СтраницаВидимаНаСервере("ОДДС"));
	
	ПараметрыОтчета.Вставить("ЗаполнятьДополнительныеПоказатели", (ЗаполнятьВсеВидимые ИЛИ ИмяРаздела = "ДополнительныеПоказатели") И СтраницаВидимаНаСервере("ДополнительныеПоказатели"));
	
	Если ЗаполнятьВсеВидимые ИЛИ ИмяРаздела = "РасшифровкиОбеспечений" Тогда
		ПараметрыОтчета.Вставить("ЗаполнятьОСВ_008", СтраницаВидимаНаСервере("ОСВ_008"));
		ПараметрыОтчета.Вставить("ЗаполнятьОСВ_009", СтраницаВидимаНаСервере("ОСВ_009"));
	Иначе
		ПараметрыОтчета.Вставить("ЗаполнятьОСВ_008", ИмяРаздела = "ОСВ_008");
		ПараметрыОтчета.Вставить("ЗаполнятьОСВ_009", ИмяРаздела = "ОСВ_009");
	КонецЕсли;
	
	ПараметрыОтчета.Вставить("ШаблонПредставленияОСВ_008", МакетРаздела("ОСВ_008"));
	ПараметрыОтчета.Вставить("ШаблонПредставленияОСВ_009", МакетРаздела("ОСВ_009"));
	
	Если ЗаполнятьВсеВидимые ИЛИ ИмяРаздела = "ЗадолженностьПоКредитамЗаймам" Тогда
		ПараметрыОтчета.Вставить("ЗаполнятьОСВ_66", СтраницаВидимаНаСервере("ОСВ_66"));
		ПараметрыОтчета.Вставить("ЗаполнятьОСВ_67", СтраницаВидимаНаСервере("ОСВ_67"));
	Иначе
		ПараметрыОтчета.Вставить("ЗаполнятьОСВ_66", ИмяРаздела = "ОСВ_66");
		ПараметрыОтчета.Вставить("ЗаполнятьОСВ_67", ИмяРаздела = "ОСВ_67");
	КонецЕсли;
	
	Если ЗаполнятьВсеВидимые ИЛИ ИмяРаздела = "ДенежныеСредства" Тогда
		ПараметрыОтчета.Вставить("ЗаполнятьАнализ_50", СтраницаВидимаНаСервере("Анализ_50"));
		ПараметрыОтчета.Вставить("ЗаполнятьАнализ_51", СтраницаВидимаНаСервере("Анализ_51"));
		ПараметрыОтчета.Вставить("ЗаполнятьАнализ_52", СтраницаВидимаНаСервере("Анализ_52"));
		ПараметрыОтчета.Вставить("ЗаполнятьАнализ_55", СтраницаВидимаНаСервере("Анализ_55"));
	Иначе
		ПараметрыОтчета.Вставить("ЗаполнятьАнализ_50", ИмяРаздела = "Анализ_50");
		ПараметрыОтчета.Вставить("ЗаполнятьАнализ_51", ИмяРаздела = "Анализ_51");
		ПараметрыОтчета.Вставить("ЗаполнятьАнализ_52", ИмяРаздела = "Анализ_52");
		ПараметрыОтчета.Вставить("ЗаполнятьАнализ_55", ИмяРаздела = "Анализ_55");
	КонецЕсли;
	
	ПараметрыОтчета.Вставить("ШаблонПредставленияАнализ_50", МакетРаздела("Анализ_50"));
	ПараметрыОтчета.Вставить("ШаблонПредставленияАнализ_51", МакетРаздела("Анализ_51"));
	ПараметрыОтчета.Вставить("ШаблонПредставленияАнализ_52", МакетРаздела("Анализ_52"));
	ПараметрыОтчета.Вставить("ШаблонПредставленияАнализ_55", МакетРаздела("Анализ_55"));
	
	// Для обработки данных после автозаполнения необходимо знать, какие разделы заполнялись.
	ИменаЗаполняемыхРазделов = Новый Массив;
	Если ПараметрыОтчета.ЗаполнятьБаланс Тогда
		ИменаЗаполняемыхРазделов.Добавить("Баланс");
	КонецЕсли;
	Если ПараметрыОтчета.ЗаполнятьОФР Тогда
		ИменаЗаполняемыхРазделов.Добавить("ФормаОтчета");
	КонецЕсли;
	Если ПараметрыОтчета.ЗаполнятьОИК Тогда
		ИменаЗаполняемыхРазделов.Добавить("ОИК");
	КонецЕсли;
	Если ПараметрыОтчета.ЗаполнятьОДДС Тогда
		ИменаЗаполняемыхРазделов.Добавить("ОДДС");
	КонецЕсли;
	Если ПараметрыОтчета.ЗаполнятьДополнительныеПоказатели Тогда
		ИменаЗаполняемыхРазделов.Добавить("ДополнительныеПоказатели");
	КонецЕсли;
	Если ПараметрыОтчета.ЗаполнятьОСВ_008 Тогда
		ИменаЗаполняемыхРазделов.Добавить("ОСВ_008");
	КонецЕсли;
	Если ПараметрыОтчета.ЗаполнятьОСВ_009 Тогда
		ИменаЗаполняемыхРазделов.Добавить("ОСВ_009");
	КонецЕсли;
	Если ПараметрыОтчета.ЗаполнятьОСВ_66 Тогда
		ИменаЗаполняемыхРазделов.Добавить("ОСВ_66");
	КонецЕсли;
	Если ПараметрыОтчета.ЗаполнятьОСВ_67 Тогда
		ИменаЗаполняемыхРазделов.Добавить("ОСВ_67");
	КонецЕсли;
	Если ПараметрыОтчета.ЗаполнятьАнализ_50 Тогда
		ИменаЗаполняемыхРазделов.Добавить("Анализ_50");
	КонецЕсли;
	Если ПараметрыОтчета.ЗаполнятьАнализ_51 Тогда
		ИменаЗаполняемыхРазделов.Добавить("Анализ_51");
	КонецЕсли;
	Если ПараметрыОтчета.ЗаполнятьАнализ_52 Тогда
		ИменаЗаполняемыхРазделов.Добавить("Анализ_52");
	КонецЕсли;
	Если ПараметрыОтчета.ЗаполнятьАнализ_55 Тогда
		ИменаЗаполняемыхРазделов.Добавить("Анализ_55");
	КонецЕсли;
	СтруктураРеквизитовФормы.Вставить("ИменаАвтоЗаполняемыхРазделов", ИменаЗаполняемыхРазделов);
	
	СохрДатаУтвОтчетности = Неопределено;
	Если СтруктураДанныхБаланс.Свойство("ДатаУтвОтчетности") Тогда
		СохрДатаУтвОтчетности = СтруктураДанныхБаланс.ДатаУтвОтчетности;
	КонецЕсли;
	
	ОчиститьНаСервере(ИмяРаздела, Ложь);
	
	Если СохрДатаУтвОтчетности <> Неопределено Тогда
		СтруктураДанныхБаланс.Вставить("ДатаУтвОтчетности", СохрДатаУтвОтчетности);
	КонецЕсли;
	
	СтруктураДанныхБаланс.Вставить("НомерКорректировки", НомерКорректировки);
	СтруктураДанныхБаланс.Вставить("ДатаПодписиОтчета", ДатаПодписи);
	Если ВидСдачиОтчетности = 1 Тогда
		СтруктураДанныхБаланс.Вставить("ВидОтчетности", "Обычная");
	ИначеЕсли ВидСдачиОтчетности = 2 Тогда
		СтруктураДанныхБаланс.Вставить("ВидОтчетности", "Промежуточная при ликвидации/реорганизации");
	ИначеЕсли ВидСдачиОтчетности = 3 Тогда
		СтруктураДанныхБаланс.Вставить("ВидОтчетности", "Ликвидационная");
	КонецЕсли;
	
	Контейнер = Новый Структура();
	Контейнер.Вставить("Баланс",        СтруктураДанныхБаланс);
	Контейнер.Вставить("ФормаОтчета",   СтруктураДанныхФормаОтчета);
	Контейнер.Вставить("ОИК",           СтруктураДанныхОИК);
	Контейнер.Вставить("ОДДС",          СтруктураДанныхОДДС);
	
	Контейнер.Вставить("ДополнительныеПоказатели", СтруктураДанныхДополнительныеПоказатели);
	
	Контейнер.Вставить("ОСВ_008", СтруктураДанныхОСВ_008);
	Контейнер.Вставить("ОСВ_009", СтруктураДанныхОСВ_009);
	
	Контейнер66 = ПолучитьИзВременногоХранилища(СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхОСВ_66"]);
	Контейнер.Вставить("ОСВ_66", СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхОСВ_66"]);
	Контейнер.Вставить("ОСВ_67", СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхОСВ_67"]);
	
	Контейнер.Вставить("Анализ_50", СтруктураДанныхАнализ_50);
	Контейнер.Вставить("Анализ_51", СтруктураДанныхАнализ_51);
	Контейнер.Вставить("Анализ_52", СтруктураДанныхАнализ_52);
	Контейнер.Вставить("Анализ_55", СтруктураДанныхАнализ_55);
	
	НаименованиеЗадания = НСтр("ru = 'Автоматическое заполнение по данным информационной базы'");
	
	ПараметрыПроцедуры = Новый Структура;
	ПараметрыПроцедуры.Вставить("ИДОтчета", Сред(Лев(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, ".Форма.") - 1), 7));
	ПараметрыПроцедуры.Вставить("ИДРедакцииОтчета", Сред(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, ".Форма.") + 7));
	ПараметрыПроцедуры.Вставить("ПараметрыОтчета", ПараметрыОтчета);
	ПараметрыПроцедуры.Вставить("Контейнер", Контейнер);
	
	ПараметрыВыполненияВФоне = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполненияВФоне.НаименованиеФоновогоЗадания = НаименованиеЗадания;
	ПараметрыВыполненияВФоне.ЗапуститьВФоне = Истина;
	
	РезультатЗапуска = ДлительныеОперации.ВыполнитьВФоне("РегламентированнаяОтчетность.ЗаполнитьОтчетВФоне",
		ПараметрыПроцедуры, ПараметрыВыполненияВФоне);
	
	Если РезультатЗапуска.Статус = "Выполнено" Тогда
		ЗагрузитьПодготовленныеДанные();
		
	ИначеЕсли РезультатЗапуска.Статус = "Ошибка" Тогда
		ВызватьИсключение РезультатЗапуска.ПодробноеПредставлениеОшибки;
		
	КонецЕсли;
	
	Возврат РезультатЗапуска;
	
КонецФункции

&НаСервере
Функция СтраницаВидимаНаСервере(ИмяСтраницыОтчета)
	
	Результат = Ложь;
	
	ДеревоСтраницОтчета = ДанныеФормыВЗначение(мДеревоВыбранныхСтраниц, Тип("ДеревоЗначений"));
	
	НайденнаяСтраницаОтчета = ДеревоСтраницОтчета.Строки.Найти(ИмяСтраницыОтчета, "ИмяСтраницы", Истина);
	Если НайденнаяСтраницаОтчета <> Неопределено Тогда
		Результат = (НайденнаяСтраницаОтчета.ПоказатьСтраницу = 1);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ЗагрузитьПодготовленныеДанные()
	
	СтруктураДанных = ПолучитьИзВременногоХранилища(СтруктураРеквизитовФормы.АдресВоВременномХранилище);
	
	Если ТипЗнч(СтруктураДанных) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Контейнер = Неопределено;
	Если СтруктураДанных.Свойство("Контейнер", Контейнер) И ТипЗнч(Контейнер) = Тип("Структура") Тогда
		
		ИменаЗаполняемыхРазделов = СтруктураРеквизитовФормы.ИменаАвтоЗаполняемыхРазделов;
		
		Для Каждого ЭлементСтруктуры Из Контейнер Цикл
			ИмяРаздела    = ЭлементСтруктуры.Ключ;
			ДанныеРаздела = ЭлементСтруктуры.Значение;
			
			Если ТипЗнч(ДанныеРаздела) = Тип("Строка") Тогда
				// Древовидная многострочная часть.
				Продолжить;
			КонецЕсли;
			
			Если ТипЗнч(ДанныеРаздела) = Тип("Структура")
			   И ДанныеРаздела.Свойство("АдресПредставления") Тогда
				// Используется альтернативное хранение представления отчета и его сведений для выгрузки.
				Продолжить;
			КонецЕсли;
			
			Для Каждого ДанныеПоказателя Из ДанныеРаздела Цикл
				ИмяПоказателя      = ДанныеПоказателя.Ключ;
				ЗначениеПоказателя = ДанныеПоказателя.Значение;
				Если ТипЗнч(ЗначениеПоказателя) = Тип("Число") Тогда
					ПараметрыОтбора = Новый Структура("КодПоказателя", ИмяПоказателя);
					МассивСтрок = ЭтаФорма["ТаблицаВариантыЗаполнения" + ИмяРаздела][0].ТаблицаВариантовЗаполнения.НайтиСтроки(ПараметрыОтбора);
					Если МассивСтрок.Количество() > 0 Тогда
						МассивСтрок[0].ЗначениеАвто = ЗначениеПоказателя;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
			Если ИменаЗаполняемыхРазделов.Найти(ИмяРаздела) <> Неопределено Тогда
				
				ПарамОтбора = Новый Структура("ВариантЗаполнения", 1);
				МассивСтрокВЗ_1 = ЭтаФорма["ТаблицаВариантыЗаполнения" + ИмяРаздела][0].ТаблицаВариантовЗаполнения.НайтиСтроки(ПарамОтбора);
				ПарамОтбора = Новый Структура("ВариантЗаполнения", 2);
				МассивСтрокВЗ_2 = ЭтаФорма["ТаблицаВариантыЗаполнения" + ИмяРаздела][0].ТаблицаВариантовЗаполнения.НайтиСтроки(ПарамОтбора);
				
				ЭтаФорма["СтруктураДанных" + ИмяРаздела] = ЭлементСтруктуры.Значение;
				
				Для каждого ЭлМассива Из МассивСтрокВЗ_1 Цикл
					ЭтаФорма["СтруктураДанных" + ИмяРаздела][ЭлМассива.КодПоказателя] = 0;
				КонецЦикла;
				Для каждого ЭлМассива Из МассивСтрокВЗ_2 Цикл
					ЭтаФорма["СтруктураДанных" + ИмяРаздела][ЭлМассива.КодПоказателя]
						= ЭтаФорма["СтруктураДанных" + ИмяРаздела][ЭлМассива.КодПоказателя] + ЭлМассива.Дельта;
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	// Получение данных оборотов по счету 75.01, для исключения их
	// при последующем расчете из данных строки 1230 в форме "Расчет активов".
	ОборотыСчета75_01 = Неопределено;
	Если СтруктураДанных.Свойство("ОборотыСчета75_01", ОборотыСчета75_01) Тогда
		УстановитьОборотыСчета75_01(ОборотыСчета75_01);
	КонецЕсли;
	
	ТаблицаРасшифровки = Неопределено;
	Если СтруктураДанных.Свойство("ТаблицаРасшифровки", ТаблицаРасшифровки) И ТипЗнч(ТаблицаРасшифровки) = Тип("ТаблицаЗначений") Тогда
		СтруктураРеквизитовФормы.АдресВременногоХранилищаРасшифровки = ПоместитьВоВременноеХранилище(ТаблицаРасшифровки, УникальныйИдентификатор);
		Элементы.Расшифровать.Доступность = Истина;
		Элементы.ТабличныйДокументКонтекстноеМенюРасшифровать.Доступность = Истина;
	КонецЕсли;
	
	ПолучитьСтруктуруМногострочныхЧастей();
	
	Если СтруктураМногострочныхЧастей = Неопределено Тогда
		СтруктураМногострочныхЧастей = Новый Структура;
	КонецЕсли;
	
	СтруктураМСЧ = Неопределено;
	Если СтруктураДанных.Свойство("СтруктураМногострочныхЧастей", СтруктураМСЧ) И ТипЗнч(СтруктураМСЧ) = Тип("Структура") Тогда
		Для Каждого ЭлементСтруктуры ИЗ СтруктураМСЧ Цикл
			СтруктураМногострочныхЧастей.Вставить(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Значение);
		КонецЦикла;
	КонецЕсли;
	
	ВывестиМакетВТаблДокНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела, 1);
	
	РасчетНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьОтчетЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ОчиститьНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТекущуюСтраницуЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	ИмяРаздела = ДополнительныеПараметры.ИмяРаздела;
	
	Если РезультатВопроса <> КодВозвратаДиалога.Нет Тогда
		
		Если ИмяРаздела = "ОСВ_66" ИЛИ ИмяРаздела = "ОСВ_67" Тогда
			ОчисткаРегламентированногоОтчетаНаСервере(ИмяРаздела);
		Иначе
			ОчиститьНаСервере(Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьНаСервере(НаимТекущегоРаздела = "", ОчищатьНомерКорректировки = Истина)
	
	Если НЕ ЗначениеЗаполнено(НаимТекущегоРаздела)
	 ИЛИ НаимТекущегоРаздела = "Баланс" Тогда
		СтруктураДанныхБаланс.Очистить();
		СтруктураРеквизитовФормы.ОборотыСчета75_01.Графа04 = 0;
		СтруктураРеквизитовФормы.ОборотыСчета75_01.Графа05 = 0;
		СтруктураРеквизитовФормы.ОборотыСчета75_01.Графа06 = 0;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(НаимТекущегоРаздела)
	 ИЛИ НаимТекущегоРаздела = "ФормаОтчета" Тогда
		СтруктураДанныхФормаОтчета.Очистить();
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(НаимТекущегоРаздела)
	 ИЛИ НаимТекущегоРаздела = "ОИК" Тогда
		СтруктураДанныхОИК.Очистить();
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(НаимТекущегоРаздела)
	 ИЛИ НаимТекущегоРаздела = "ОДДС" Тогда
		СтруктураДанныхОДДС.Очистить();
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(НаимТекущегоРаздела)
	 ИЛИ НаимТекущегоРаздела = "ДополнительныеПоказатели" Тогда
		СтруктураДанныхДополнительныеПоказатели.Очистить();
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(НаимТекущегоРаздела)
	 ИЛИ НаимТекущегоРаздела = "ЛизингОбязательства" Тогда
		СтруктураДанныхЛизингОбязательства.Очистить();
	КонецЕсли;
	
	ЗаполнитьПустыеСтруктурыДанных();
	
	Если НЕ ЗначениеЗаполнено(НаимТекущегоРаздела)
	 ИЛИ НаимТекущегоРаздела = "ЗадолженностьПоКредитамЗаймам" Тогда
		ПолучитьСтруктуруМногострочныхЧастей();
		ИнициализироватьОписанияДревовидныхМногострочныхЧастей();
		ИнициализироватьМногоуровневыеРазделы();
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(НаимТекущегоРаздела)
	 ИЛИ НаимТекущегоРаздела = "РасшифровкиОбеспечений"
	 ИЛИ НаимТекущегоРаздела = "ОСВ_008" Тогда
		СтруктураДанныхОСВ_008 = НовоеОписаниеРазделаБезВводаДанных("ОСВ_008");
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(НаимТекущегоРаздела)
	 ИЛИ НаимТекущегоРаздела = "РасшифровкиОбеспечений"
	 ИЛИ НаимТекущегоРаздела = "ОСВ_009" Тогда
		СтруктураДанныхОСВ_009 = НовоеОписаниеРазделаБезВводаДанных("ОСВ_009");
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(НаимТекущегоРаздела)
	 ИЛИ НаимТекущегоРаздела = "ДенежныеСредства"
	 ИЛИ НаимТекущегоРаздела = "Анализ_50" Тогда
		СтруктураДанныхАнализ_50 = НовоеОписаниеРазделаБезВводаДанных("Анализ_50");
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(НаимТекущегоРаздела)
	 ИЛИ НаимТекущегоРаздела = "ДенежныеСредства"
	 ИЛИ НаимТекущегоРаздела = "Анализ_51" Тогда
		СтруктураДанныхАнализ_51 = НовоеОписаниеРазделаБезВводаДанных("Анализ_51");
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(НаимТекущегоРаздела)
	 ИЛИ НаимТекущегоРаздела = "ДенежныеСредства"
	 ИЛИ НаимТекущегоРаздела = "Анализ_52" Тогда
		СтруктураДанныхАнализ_52 = НовоеОписаниеРазделаБезВводаДанных("Анализ_52");
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(НаимТекущегоРаздела)
	 ИЛИ НаимТекущегоРаздела = "ДенежныеСредства"
	 ИЛИ НаимТекущегоРаздела = "Анализ_55" Тогда
		СтруктураДанныхАнализ_55 = НовоеОписаниеРазделаБезВводаДанных("Анализ_55");
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(НаимТекущегоРаздела)
	 ИЛИ НаимТекущегоРаздела = "Баланс" Тогда
		Если НЕ ЗначениеЗаполнено(НаимТекущегоРаздела) Тогда 
			СтруктураДанныхБаланс.Вставить("НомерКорректировки", НомерКорректировки);
			СтруктураДанныхБаланс.Вставить("ДатаПодписиОтчета", ДатаПодписи);
			
			Если ВидСдачиОтчетности = 1 Тогда
				СтруктураДанныхБаланс.Вставить("ВидОтчетности", "Обычная");
			ИначеЕсли ВидСдачиОтчетности = 2 Тогда
				СтруктураДанныхБаланс.Вставить("ВидОтчетности", "Промежуточная при ликвидации/реорганизации");
			ИначеЕсли ВидСдачиОтчетности = 3 Тогда
				СтруктураДанныхБаланс.Вставить("ВидОтчетности", "Ликвидационная");
			КонецЕсли;
		ИначеЕсли ОчищатьНомерКорректировки Тогда  
			НомерКорректировки = 0;
			СтруктураРеквизитовФормы.ВидДокумента = 0;
			ДатаПодписи = Неопределено;
			ВидСдачиОтчетности = 1;
			СтруктураДанныхБаланс.Вставить("НомерКорректировки", НомерКорректировки);
			СтруктураДанныхБаланс.Вставить("ДатаПодписиОтчета", ДатаПодписи);
			СтруктураДанныхБаланс.Вставить("ВидОтчетности", "Обычная");
			ОблВидОтчетности = ТабличныйДокумент.Области.Найти("ВидОтчетности");
			Если ОблВидОтчетности <> Неопределено Тогда 
				ОблВидОтчетности.Значение = "Обычная";
				ТабличныйДокумент.Области.Найти("НомерКорректировки").Значение = НомерКорректировки;
				ТабличныйДокумент.Области.Найти("ДатаПодписиОтчета").Значение = ДатаПодписи;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ОчиститьТабличноеПоле(НаимТекущегоРаздела);
	
	ВывестиМакетСтраницыВТабличныйДокументНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела, 1);
	
	РасчетНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
	// Очищаем расшифровку.
	Если СтруктураРеквизитовФормы.АдресВременногоХранилищаРасшифровки <> Неопределено Тогда
		ТаблицаРасшифровки = ПолучитьИзВременногоХранилища(СтруктураРеквизитовФормы.АдресВременногоХранилищаРасшифровки);
		
		Если НЕ ПустаяСтрока(НаимТекущегоРаздела) Тогда
			Если НаимТекущегоРаздела <> "ДополнительныеФайлы" Тогда
				Для Каждого ОбластьОтчета Из ТабличныйДокумент.Области Цикл
					Если ОбластьОтчета.ТипОбласти <> ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
						Продолжить;
					КонецЕсли;
					СтрокиРасшифровки = ТаблицаРасшифровки.НайтиСтроки(Новый Структура("ИмяПоказателя", ОбластьОтчета.Имя));
					Для Каждого СтрокаРасшифровки Из СтрокиРасшифровки Цикл
						ТаблицаРасшифровки.Удалить(СтрокаРасшифровки);
					КонецЦикла;
				КонецЦикла;
			КонецЕсли;
		Иначе
			ТаблицаРасшифровки.Очистить();
			Элементы.Расшифровать.Доступность = Ложь;
			Элементы.ТабличныйДокументКонтекстноеМенюРасшифровать.Доступность = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьТабличноеПоле(НаимТекущегоРаздела = "")
	
	ПоказателиНеПодлежащиеОчистке = Новый Массив;
	ПоказателиНеПодлежащиеОчистке.Добавить("ОргНазв");
	ПоказателиНеПодлежащиеОчистке.Добавить("ОргКодОКПО");
	ПоказателиНеПодлежащиеОчистке.Добавить("ОргОтрасль");
	ПоказателиНеПодлежащиеОчистке.Добавить("ОргКодОКВЭД");
	ПоказателиНеПодлежащиеОчистке.Добавить("ОргФорма");
	ПоказателиНеПодлежащиеОчистке.Добавить("ОргКодОКОПФ");
	ПоказателиНеПодлежащиеОчистке.Добавить("ОргФормаСобств");
	ПоказателиНеПодлежащиеОчистке.Добавить("ОргКодОКФС");
	ПоказателиНеПодлежащиеОчистке.Добавить("ОргПочтАдрес");
	ПоказателиНеПодлежащиеОчистке.Добавить("ОргДиректор");
	ПоказателиНеПодлежащиеОчистке.Добавить("ОргБухгалтер");
	ПоказателиНеПодлежащиеОчистке.Добавить("НомерКорректировки");
	ПоказателиНеПодлежащиеОчистке.Добавить("ВидОтчетности");
	ПоказателиНеПодлежащиеОчистке.Добавить("ДатаПодписиОтчета");
	ПоказателиНеПодлежащиеОчистке.Добавить("ДатаУтвОтчетности");
	
	ПолучитьСтруктуруМногострочныхЧастей();
	
	// Определяем содержание многострочных блоков и удаляем все строки кроме первой
	Для Каждого ЭлементСтруктуры Из СтруктураМногострочныхЧастей Цикл
		
		СтруктураМногострочнойЧасти = ЭлементСтруктуры.Значение;
		
		Если НЕ СтруктураМногострочнойЧасти.Свойство("ИмяПоляТабличногоДокумента")
		 ИЛИ (ЗначениеЗаполнено(НаимТекущегоРаздела)
		      И НЕ СтруктураМногострочнойЧасти.ИмяПоляТабличногоДокумента = НаимТекущегоРаздела) Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураГруппы = СтруктураМногострочнойЧасти.Состав;
		
		КопияСтруктураГруппы = СтруктураГруппы[0];
		
		// очищаем структуру группы и воссоздаем строку по умолчанию
		СтруктураГруппы.Очистить();
		СтруктураГруппы.Добавить(КопияСтруктураГруппы);
		
	КонецЦикла;
	
	Для Инд = 0 По ТабличныйДокумент.Области.Количество() - 1 Цикл
		ТекущаяОбласть = ТабличныйДокумент.Области[Инд];

		// Ячейки не подлежащие очистки
		Если ПоказателиНеПодлежащиеОчистке.Найти(ТекущаяОбласть.Имя) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;

		Если Не ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			Продолжить;
		КонецЕсли;

		Если ТекущаяОбласть.СодержитЗначение = Неопределено ИЛИ НЕ ТекущаяОбласть.СодержитЗначение Тогда	
			Продолжить;
		КонецЕсли;

		Если ТекущаяОбласть.Защита <> Неопределено И ТекущаяОбласть.Защита Тогда
			Если НЕ (ТипЗнч(ТекущаяОбласть.Значение) = Тип("Число")) Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;

		ТекущаяОбласть.Очистить();
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораСтраниц(ВариантВыбора)
	
	Перем ТекущийРазделОтчетаСокрНаим;
	Перем НомерСтраницыРазделаОтчета;
	
	// Запоминаем текущий раздел, установленный в дереве разделов отчета.
	Если НЕ Элементы.РазделыОтчета.ТекущиеДанные = Неопределено Тогда
		ТекущийРазделОтчетаСокрНаим = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
		НомерСтраницыРазделаОтчета  = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета;
	КонецЕсли;
	
	мПараметры = Новый Структура;
	мПараметры.Вставить("ПроверкаСоотношений", Ложь);
	мПараметры.Вставить("Автосохранение", Ложь);
	мПараметры.Вставить("СчетчикСтраниц", Ложь);
	мПараметры.Вставить("ЗначенияИзСписка", Ложь);
	мПараметры.Вставить("ИмеетсяРеквизитДеревоВыбранныхСтраниц", Истина);
	Если СтруктураРеквизитовФормы.ОтображатьКнопкуРасшифровать Тогда
		мПараметры.Вставить("СохранятьРасшифровкуАвтозаполнения", Истина);
	КонецЕсли;
	мПараметры.Вставить("РазрешитьВстроеннуюПечать", Ложь);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ФлажокОтклАвтоРасчет", СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);
	ПараметрыФормы.Вставить("мПечатьБезШтрихкодаРазрешена", СтруктураРеквизитовФормы.мПечатьБезШтрихкодаРазрешена);
	ПараметрыФормы.Вставить("ЕдиницаИзмерения", СтруктураРеквизитовФормы.ЕдиницаИзмерения);
	ПараметрыФормы.Вставить("ТочностьЕдиницыИзмерения", СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения);
	ПараметрыФормы.Вставить("СохранятьРасшифровкуАвтозаполнения", СтруктураРеквизитовФормы.мСохранятьРасшифровку);
	ПараметрыФормы.Вставить("мПараметры", мПараметры);
	
	ФормаНастройкиОтчета = ПолучитьФорму("Отчет.БухгалтерскаяОтчетностьВБанк.Форма.НастройкиОтчета", ПараметрыФормы, ЭтаФорма);
	
	мДеревоВыбранныхСтраниц.ПолучитьЭлементы().Очистить();
	
	КопироватьДанныеФормы(мДеревоСтраницОтчета, ФормаНастройкиОтчета.Дерево);
	
	ЗначениеАвторасчета = СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет;
	ЗначениеЕдИзм = СтруктураРеквизитовФормы.ЕдиницаИзмерения;
	ЗначениеЗпт   = СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения;
	
	ДополнительныеПараметры = Новый Структура("ЗначениеАвторасчета, ЗначениеЕдИзм, ЗначениеЗпт, НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим", ЗначениеАвторасчета, ЗначениеЕдИзм, ЗначениеЗпт, НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим);
	ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьФормуВыбораСтраницЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ФормаНастройкиОтчета.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
	ФормаНастройкиОтчета.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	ФормаНастройкиОтчета.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораСтраницЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	ЗначениеАвторасчета = ДополнительныеПараметры.ЗначениеАвторасчета;
	ЗначениеЕдИзм = ДополнительныеПараметры.ЗначениеЕдИзм;
	ЗначениеЗпт = ДополнительныеПараметры.ЗначениеЗпт;
	НомерСтраницыРазделаОтчета = ДополнительныеПараметры.НомерСтраницыРазделаОтчета;
	ТекущийРазделОтчетаСокрНаим = ДополнительныеПараметры.ТекущийРазделОтчетаСокрНаим;
	
	Модифицированность = Истина;
	
	флЗначенияИдентичны = Истина;
	
	Для Индекс = 0 По мДеревоСтраницОтчета.ПолучитьЭлементы().Количество() - 1 Цикл
		
		Если НЕ мДеревоСтраницОтчета.ПолучитьЭлементы()[Индекс].ПоказатьСтраницу = мДеревоВыбранныхСтраниц.ПолучитьЭлементы()[Индекс].ПоказатьСтраницу Тогда
			флЗначенияИдентичны = Ложь;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЗначениеАвторасчета <> СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Тогда
		
		ИзменитьТаблицуВариантовЗаполненияНаСервере();
		РасчетНаСервере();
		Модифицированность = Истина;
		
	КонецЕсли;
	
	Если ЗначениеЕдИзм <> СтруктураРеквизитовФормы.ЕдиницаИзмерения
		ИЛИ ЗначениеЗпт <> СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения Тогда
		ПослеСменыЕдИзмеренияИТочности();
	КонецЕсли;
	
	// Управляем видимостью страниц основной панели формы
	РегламентированнаяОтчетностьКлиент.ПоказатьСтраницыОтчетаНаКлиенте(ЭтаФорма);
	
	Если НЕ флЗначенияИдентичны Тогда
		
		СформироватьДеревоРазделовОтчетаНаКлиенте();
		
		Если НЕ ТекущийРазделОтчетаСокрНаим = Неопределено Тогда
			
			// Пытаемся найти ранее запомненный раздел.
			НайденнаяСтрока = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(РазделыОтчета.ПолучитьЭлементы(), "КолонкаРазделыОтчетаСокрНаим", ТекущийРазделОтчетаСокрНаим);
			
			Если НЕ НайденнаяСтрока = Неопределено 
				И НЕ НомерСтраницыРазделаОтчета = Неопределено 
				И НайденнаяСтрока.ПолучитьЭлементы().Количество() > 0 Тогда
				
				НайденнаяСтрока = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(НайденнаяСтрока.ПолучитьЭлементы(), "КолонкаНомерСтраницыРазделаОтчета", НомерСтраницыРазделаОтчета);
				
			КонецЕсли;
			
			// В случае успешного поиска, устанавливаем курсор на найденный раздел.
			Если НЕ НайденнаяСтрока = Неопределено Тогда
				Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяСтрока.ПолучитьИдентификатор();
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьТаблицуВариантовЗаполненияНаСервере()
	
	РегламентированнаяОтчетностьКлиентСервер.ИзменитьТаблицуВариантовЗаполнения(ЭтаФорма, НЕ СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);
	
	ПолучитьСведенияОПоказателяхОтчета();
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьСведенияОПоказателяхОтчета()
	
	ПараметрыОтчета = Новый Структура;
	ПараметрыОтчета.Вставить("СтруктураОтчета", СтруктураОтчета);
	ПараметрыОтчета.Вставить("СтруктураРеквизитовФормы", СтруктураРеквизитовФормы);
	
	РегламентированнаяОтчетность.ПолучитьСведенияОПоказателяхОтчета(ЭтаФорма, ПараметрыОтчета);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ МЕХАНИЗМА ВЫГРУЗКИ В ЭЛЕКТРОННОМ ВИДЕ
//

&НаКлиенте
Функция УниверсальнаяВыгрузка(Текст = Неопределено, ПроверятьБлокировки = Истина) Экспорт
	
	Возврат УниверсальнаяВыгрузкаXML(Текст);
	
КонецФункции

&НаКлиенте
Процедура ВыгрузитьЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ВыгрузитьОтчет();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьОтчет() Экспорт
		
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьОтчетЗавершение", ЭтотОбъект);
	
	Если Модифицированность Тогда
		СохранитьНаКлиенте(,ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьОтчетЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ФормаВыгрузкиРеглОтчета = Неопределено; // обход ошибки в платформе
	
	ФормаВыгрузкиРеглОтчета = ПолучитьФорму("Документ.ВыгрузкаРегламентированныхОтчетов.Форма.ФормаДокумента", , ЭтаФорма);
	
	СпДокОсн = Новый СписокЗначений;
	СпДокОсн.Добавить(СтруктураРеквизитовФормы.мСохраненныйДок);
	
	ФормаВыгрузкиРеглОтчета.СформироватьИЗаписать(СпДокОсн);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузкуЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПроверитьВыгрузкуОтчета();
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузкуОтчета()
	
	Если НЕ ЗначениеЗаполнено(СтруктураРеквизитовФормы.Организация) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Организация не выбрана! Выгрузка невозможна.'");
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьВыгрузкуОтчетаЗавершение", ЭтотОбъект);
	
	Если Модифицированность Тогда
		СохранитьНаКлиенте(,ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузкуОтчетаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ФормаВыгрузкиРеглОтчета = ПолучитьФорму("Документ.ВыгрузкаРегламентированныхОтчетов.Форма.ФормаДокумента", , ЭтаФорма);
	
	СпДокОсн = Новый СписокЗначений;
	СпДокОсн.Добавить(СтруктураРеквизитовФормы.мСохраненныйДок);
	
	ФормаВыгрузкиРеглОтчета.Проверить(СпДокОсн);
	
КонецПроцедуры

&НаСервере
Функция ПроверитьПоказатели() Экспорт
	
	ПризнакПроверкиПоказателей = ПроверитьПоказателиXML();
	
	мДанныеОтчета = Неопределено;
	
	Возврат ПризнакПроверкиПоказателей;
	
КонецФункции

&НаКлиенте
Процедура АктивизироватьЯчейку(Ячейка) Экспорт
	
	РегламентированнаяОтчетностьКлиент.АктивизироватьЯчейку(ЭтаФорма, Ячейка);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ МЕХАНИЗМА ВЫГРУЗКИ В ФОРМАТЕ 5 (XML)
//

&НаСервере
Функция ПроверитьПоказателиXML() Экспорт
	
	СформироватьСтруктуруПоказателей();
	
	ПараметрыВыгрузки = ПараметрыЭлектронногоПредставления();
	
	Если НЕ ПроверитьВозможностьВыгрузки(ПараметрыВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ДеревоВыгрузки = ИзвлечьСтруктуруXML();
	
	ЗаполнитьДанными(ДеревоВыгрузки, ПараметрыВыгрузки);
	
	Если НЕ ПроверитьДанные(ДеревоВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Функция УниверсальнаяВыгрузкаXML(ТекстВыгрузки) Экспорт
	
	Если Модифицированность Тогда
		ТекстЗаголовка = ЗаголовокРегламентированногоОтчета(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета, СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
		
		ОргСтр = " (" + СтруктураРеквизитовФормы.Организация + ")";
		Если СтрНайти(ТекстЗаголовка, ОргСтр) = 0 Тогда
			ТекстЗаголовка = ТекстЗаголовка + ОргСтр;
		КонецЕсли;
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Отчет """ + ТекстЗаголовка + """ не сохранен.";
		Сообщение.Сообщить();
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Если Открыта() Тогда
		Если СтруктураРеквизитовФормы.ЕдиницаИзмерения = ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1 Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='Перед выгрузкой необходимо установить единицу измерения ""в тысячах"" или ""в миллионах"".'");
			Сообщение.Сообщить();
			
			Возврат Ложь;
			
		КонецЕсли;
		
		Если СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения <> 0 Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='Перед выгрузкой необходимо установить точность ""0"".'");
			Сообщение.Сообщить();
			
			Возврат Ложь;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ УниверсальнаяВыгрузкаXMLНаСервере(ТекстВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция УниверсальнаяВыгрузкаXMLНаСервере(ТекстВыгрузки)
	
	СформироватьСтруктуруПоказателей();
	ПараметрыВыгрузки = ПараметрыЭлектронногоПредставления();
	
	Если НЕ ПроверитьВозможностьВыгрузки(ПараметрыВыгрузки) Тогда
		мДанныеОтчета = Неопределено;
		Возврат Ложь;
	КонецЕсли;
	
	ДеревоВыгрузки = ИзвлечьСтруктуруXML();
	
	ЗаполнитьДанными(ДеревоВыгрузки, ПараметрыВыгрузки);
	
	Если НЕ ПроверитьДанные(ДеревоВыгрузки) Тогда
		мДанныеОтчета = Неопределено;
		Возврат Ложь;
	КонецЕсли;
	
	ТекстВыгрузки = ВыгрузитьДеревоВXML(ДеревоВыгрузки, ПараметрыВыгрузки);
	
	мДанныеОтчета = Неопределено;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Функция ЗаголовокРегламентированногоОтчета(ДатаНач, ДатаКон, Периодичность = Неопределено) Экспорт
		
	СтруктураРеквизитовФормы.СтрПериодОтчета = ПредставлениеПериода( НачалоДня(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета), КонецДня(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета), "ФП = Истина" );
		
	Если СтрНайти(ЭтаФорма.Заголовок, СтруктураРеквизитовФормы.СтрПериодОтчета) = 0 Тогда
		Возврат ЭтаФорма.Заголовок + " за " + СтруктураРеквизитовФормы.СтрПериодОтчета;
	Иначе
		Возврат ЭтаФорма.Заголовок;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ИзвлечьСтруктуруXML()
	
	ДеревоСтруктуры = Новый ДеревоЗначений;
	ДеревоСтруктуры.Колонки.Добавить("Код");
	ДеревоСтруктуры.Колонки.Добавить("Тип");
	ДеревоСтруктуры.Колонки.Добавить("Формат");
	ДеревоСтруктуры.Колонки.Добавить("МинРазмерность");
	ДеревоСтруктуры.Колонки.Добавить("МаксРазмерность");
	ДеревоСтруктуры.Колонки.Добавить("Обязательность");
	ДеревоСтруктуры.Колонки.Добавить("Многостраничность");
	ДеревоСтруктуры.Колонки.Добавить("Многострочность");
	ДеревоСтруктуры.Колонки.Добавить("Раздел");
	ДеревоСтруктуры.Колонки.Добавить("Ключ");
	ДеревоСтруктуры.Колонки.Добавить("Условие");
	ДеревоСтруктуры.Колонки.Добавить("ЗначениеПоУмолчанию");
	ДеревоСтруктуры.Колонки.Добавить("Значение");
	ДеревоСтруктуры.Колонки.Добавить("Представление");
	ДеревоСтруктуры.Колонки.Добавить("Показатели");
	
	Макет = Отчеты[Сред(Лев(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, ".Форма.") - 1), 7)].ПолучитьМакет("СхемаВыгрузки506");
	
	ВысотаТаблицы = Макет.ВысотаТаблицы;
	
	УчтенныеГруппы = Новый Соответствие;
	
	Для Уровень = 0 По Макет.КоличествоУровнейГруппировокСтрок() - 1 Цикл
		Макет.ПоказатьУровеньГруппировокСтрок(Уровень);
		Для НомерСтроки = 2 По ВысотаТаблицы Цикл
			НомСтр = ВысотаТаблицы - НомерСтроки + 2;
			Если Макет.Область(НомСтр, 0, НомСтр, 0).Видимость И УчтенныеГруппы.Получить(НомСтр) = Неопределено Тогда
				
				РодительскийУзел = ДеревоСтруктуры;
				Если Уровень <> 0 Тогда
					Для Инд = 1 По НомСтр - 2 Цикл
						Узел = УчтенныеГруппы.Получить(НомСтр - Инд);
						Если Узел <> Неопределено Тогда
							РодительскийУзел = Узел;
							Прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				НовСтр = РодительскийУзел.Строки.Вставить(0);
				НовСтр.Код = СокрЛП(Макет.Область(НомСтр, 1, НомСтр, 1).Текст);
				НовСтр.Раздел = СокрЛП(Макет.Область(НомСтр, 2, НомСтр, 2).Текст);
				НовСтр.Ключ = СокрЛП(Макет.Область(НомСтр, 3, НомСтр, 3).Текст);
				НовСтр.Тип = СокрЛП(Макет.Область(НомСтр, 4, НомСтр, 4).Текст);
				НовСтр.Формат = СокрЛП(Макет.Область(НомСтр, 5, НомСтр, 5).Текст);
				МинРазмерность = СокрЛП(Макет.Область(НомСтр, 6, НомСтр, 6).Текст);
				НовСтр.МинРазмерность = ?(ПустаяСтрока(МинРазмерность), ?(НовСтр.Формат = "N", 99999, 0), Число(МинРазмерность));
				МаксРазмерность = СокрЛП(Макет.Область(НомСтр, 7, НомСтр, 7).Текст);
				НовСтр.МаксРазмерность = ?(ПустаяСтрока(МаксРазмерность), 99999, Число(МаксРазмерность));
				НовСтр.Обязательность = СокрЛП(Макет.Область(НомСтр, 8, НомСтр, 8).Текст);
				НовСтр.Многостраничность = НЕ ПустаяСтрока(Макет.Область(НомСтр, 9, НомСтр, 9).Текст);
				НовСтр.Многострочность = НЕ ПустаяСтрока(Макет.Область(НомСтр, 10, НомСтр, 10).Текст);
				НовСтр.Условие = СокрЛП(Макет.Область(НомСтр, 11, НомСтр, 11).Текст);
				НовСтр.ЗначениеПоУмолчанию = СокрЛП(Макет.Область(НомСтр, 12, НомСтр, 12).Текст);
				НовСтр.Представление = СокрЛП(Макет.Область(НомСтр, 13, НомСтр, 13).Текст);
				
				УчтенныеГруппы.Вставить(НомСтр, НовСтр);
				
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат ДеревоСтруктуры;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////

&НаСервере
Функция СформироватьИдФайл(ПараметрыВыгрузки)
	
	Возврат ПараметрыВыгрузки.ПрефиксИмениФайлаВыгрузки
			+ "_" + ?(ЗначениеЗаполнено(ПараметрыВыгрузки.КодИФНСПосредника), ПараметрыВыгрузки.КодИФНСПосредника, ПараметрыВыгрузки.КодИФНС)
			+ "_" + ПараметрыВыгрузки.КодИФНС
			+ "_" + ?(ПараметрыВыгрузки.Свойство("ЭтоПБОЮЛ") И ПараметрыВыгрузки.ЭтоПБОЮЛ, СокрЛП(ПараметрыВыгрузки.ИННОрг), СокрЛП(ПараметрыВыгрузки.ИННОрг) + СокрЛП(ПараметрыВыгрузки.КППОрг))
			+ "_" + Формат(ТекущаяДатаСеанса(), "ДФ=ггггММдд")
			+ "_" + ПараметрыВыгрузки.ИдентификаторФайлаВыгрузки;
	
КонецФункции

&НаСервере
Процедура ОбработатьПоказателиПередВыгрузкой()
	
	Перем ЗначениеПоказателя;
	
	ИменаПоказателейСоЗнакомПлюс = ПолучитьСписокВычитаемыхПоказателей();
	
	Разделы = Новый Массив;
	Разделы.Добавить(мДанныеОтчета.ПолеТабличногоДокументаБаланс);
	Разделы.Добавить(мДанныеОтчета.ПолеТабличногоДокументаФормаОтчета);
	Разделы.Добавить(мДанныеОтчета.ПолеТабличногоДокументаОИК);
	Разделы.Добавить(мДанныеОтчета.ПолеТабличногоДокументаОДДС);
	
	Для Каждого Пок Из ИменаПоказателейСоЗнакомПлюс Цикл
		Для Каждого ПоказателиТекущегоРаздела Из Разделы Цикл
			Если ПоказателиТекущегоРаздела.Свойство(Пок + "_1") Тогда
				НомерСтроки = 1;
				Пока ПоказателиТекущегоРаздела.Свойство(Пок + "_" + СтрокаЧГ0(НомерСтроки), ЗначениеПоказателя) Цикл	
					Если ЗначениеПоказателя < 0 Тогда
						ПоказателиТекущегоРаздела.Вставить(Пок + "_" + СтрокаЧГ0(НомерСтроки), -ЗначениеПоказателя);
					КонецЕсли;
					НомерСтроки = НомерСтроки + 1;
				КонецЦикла;
			ИначеЕсли ПоказателиТекущегоРаздела.Свойство(Пок, ЗначениеПоказателя) И ЗначениеПоказателя < 0 Тогда
				ПоказателиТекущегоРаздела.Вставить(Пок, -ЗначениеПоказателя);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьВиртуальныеСтрокиРасшифровки(Раздел, ДанныеРаздела, СоставДополнительныхСтрок, ПрименяетсяЕНВД = Ложь)

	Если Раздел = "ПолеТабличногоДокументаБаланс" Тогда
		
		Если ПустаяСтрока(СтруктураОтчета.Баланс.ИмяМакета)
		 ИЛИ СтруктураОтчета.Баланс.ИмяМакета = "Баланс"
		 ИЛИ СтруктураОтчета.Баланс.ИмяМакета = "БалансНКО"
		 ИЛИ СтруктураОтчета.Баланс.ИмяМакета = "Баланс_2011Кв4"
		 ИЛИ СтруктураОтчета.Баланс.ИмяМакета = "БалансНКО_2011Кв4" Тогда
		 
			ДобавитьВиртуальныеСтрокиРасшифровкиБаланс2011(Раздел, ДанныеРаздела, СоставДополнительныхСтрок, ПрименяетсяЕНВД);
			
		Иначе

			ДобавитьВиртуальныеСтрокиРасшифровкиБаланс2012(Раздел, ДанныеРаздела, СоставДополнительныхСтрок, ПрименяетсяЕНВД);

		КонецЕсли;
		
	КонецЕсли;
	
	Если Раздел = "ПолеТабличногоДокументаФормаОтчета" Тогда
		ДобавитьВиртуальныеСтрокиРасшифровкиФормаОтчета(Раздел, ДанныеРаздела, СоставДополнительныхСтрок, ПрименяетсяЕНВД);
	КонецЕсли;
	
	Возврат ДанныеРаздела; 
	
КонецФункции

&НаСервере
Процедура ВнестиВиртуальныеСтрокиРасшифровкиБаланс(ДанныеРаздела, ДеревоНастройкиСостава, ПрефиксВиртуальнойСтроки, СтруктураФиксированныхСтрок = Неопределено, ПрефиксМногострочнойЧасти)

	НомерСтроки = 1;
	// Фиксированные строки.
	Если СтруктураФиксированныхСтрок <> Неопределено Тогда
		Для Каждого ФиксированнаяСтрока Из СтруктураФиксированныхСтрок Цикл
			КодСтроки = ФиксированнаяСтрока.Значение;
			НаименованиеСтроки = ФиксированнаяСтрока.Представление;
			ПрефиксСтроки = "П00010" + КодСтроки;
			Если ВключенВОтчет(ДеревоНастройкиСостава, "ДопСтрока" + КодСтроки)
			   И ДанныеРаздела.Свойство(ПрефиксСтроки + "01") Тогда	
				ДанныеРаздела.Вставить(ПрефиксВиртуальнойСтроки + "01_" + СтрокаЧГ0(НомерСтроки), ДанныеРаздела[ПрефиксСтроки + "01"]);
				ДанныеРаздела.Вставить(ПрефиксВиртуальнойСтроки + "02_" + СтрокаЧГ0(НомерСтроки), НаименованиеСтроки);
				ДанныеРаздела.Вставить(ПрефиксВиртуальнойСтроки + "04_" + СтрокаЧГ0(НомерСтроки), ДанныеРаздела[ПрефиксСтроки + "04"]);
				ДанныеРаздела.Вставить(ПрефиксВиртуальнойСтроки + "05_" + СтрокаЧГ0(НомерСтроки), ДанныеРаздела[ПрефиксСтроки + "05"]);
				ДанныеРаздела.Вставить(ПрефиксВиртуальнойСтроки + "06_" + СтрокаЧГ0(НомерСтроки), ДанныеРаздела[ПрефиксСтроки + "06"]);
				НомерСтроки = НомерСтроки + 1;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// Пользовательские строки.
	НомерСтрокиМногострочнойЧасти = 1;
	Пока ДанныеРаздела.Свойство(ПрефиксМногострочнойЧасти + "02_" + СтрокаЧГ0(НомерСтрокиМногострочнойЧасти)) Цикл
		Если НЕ ПустаяСтрока(ДанныеРаздела[ПрефиксМногострочнойЧасти + "02_" + СтрокаЧГ0(НомерСтрокиМногострочнойЧасти)]) Тогда	
			ДанныеРаздела.Вставить(ПрефиксВиртуальнойСтроки + "01_" + СтрокаЧГ0(НомерСтроки), ДанныеРаздела[ПрефиксМногострочнойЧасти + "01_" + СтрокаЧГ0(НомерСтрокиМногострочнойЧасти)]);
			ДанныеРаздела.Вставить(ПрефиксВиртуальнойСтроки + "02_" + СтрокаЧГ0(НомерСтроки), ДанныеРаздела[ПрефиксМногострочнойЧасти + "02_" + СтрокаЧГ0(НомерСтрокиМногострочнойЧасти)]);
			ДанныеРаздела.Вставить(ПрефиксВиртуальнойСтроки + "04_" + СтрокаЧГ0(НомерСтроки), ДанныеРаздела[ПрефиксМногострочнойЧасти + "04_" + СтрокаЧГ0(НомерСтрокиМногострочнойЧасти)]);
			ДанныеРаздела.Вставить(ПрефиксВиртуальнойСтроки + "05_" + СтрокаЧГ0(НомерСтроки), ДанныеРаздела[ПрефиксМногострочнойЧасти + "05_" + СтрокаЧГ0(НомерСтрокиМногострочнойЧасти)]);
			ДанныеРаздела.Вставить(ПрефиксВиртуальнойСтроки + "06_" + СтрокаЧГ0(НомерСтроки), ДанныеРаздела[ПрефиксМногострочнойЧасти + "06_" + СтрокаЧГ0(НомерСтрокиМногострочнойЧасти)]);
			НомерСтроки = НомерСтроки + 1;
		КонецЕсли;
		НомерСтрокиМногострочнойЧасти = НомерСтрокиМногострочнойЧасти + 1;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ВнестиВиртуальныеСтрокиРасшифровкиФормаОтчета(ДанныеРаздела, ДеревоНастройкиСостава, ПрефиксВиртуальнойСтроки, СтруктураФиксированныхСтрок = Неопределено, ПрефиксМногострочнойЧасти)

	НомерСтроки = 1;
	// Фиксированные строки.
	Если СтруктураФиксированныхСтрок <> Неопределено Тогда
		Для Каждого ФиксированнаяСтрока Из СтруктураФиксированныхСтрок Цикл
			КодСтроки = ФиксированнаяСтрока.Значение;
			НаименованиеСтроки = ФиксированнаяСтрока.Представление;
			ПрефиксСтроки = "П00010" + КодСтроки;
			Если ВключенВОтчет(ДеревоНастройкиСостава, "ДопСтрока" + КодСтроки)
			   И ДанныеРаздела.Свойство(ПрефиксСтроки + "01") Тогда	
				ДанныеРаздела.Вставить(ПрефиксВиртуальнойСтроки + "01_" + СтрокаЧГ0(НомерСтроки), ДанныеРаздела[ПрефиксСтроки + "01"]);
				ДанныеРаздела.Вставить(ПрефиксВиртуальнойСтроки + "02_" + СтрокаЧГ0(НомерСтроки), НаименованиеСтроки);
				ДанныеРаздела.Вставить(ПрефиксВиртуальнойСтроки + "04_" + СтрокаЧГ0(НомерСтроки), ДанныеРаздела[ПрефиксСтроки + "04"]);
				ДанныеРаздела.Вставить(ПрефиксВиртуальнойСтроки + "05_" + СтрокаЧГ0(НомерСтроки), ДанныеРаздела[ПрефиксСтроки + "05"]);
				НомерСтроки = НомерСтроки + 1;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// Пользовательские строки.
	Если НЕ ПустаяСтрока(ПрефиксМногострочнойЧасти) Тогда	
		НомерСтрокиМногострочнойЧасти = 1;
		Пока ДанныеРаздела.Свойство(ПрефиксМногострочнойЧасти + "02_" + СтрокаЧГ0(НомерСтрокиМногострочнойЧасти)) Цикл
			Если Не ПустаяСтрока(ДанныеРаздела[ПрефиксМногострочнойЧасти + "02_" + СтрокаЧГ0(НомерСтрокиМногострочнойЧасти)]) Тогда
				ДанныеРаздела.Вставить(ПрефиксВиртуальнойСтроки + "01_" + СтрокаЧГ0(НомерСтроки), ДанныеРаздела[ПрефиксМногострочнойЧасти + "01_" + СтрокаЧГ0(НомерСтрокиМногострочнойЧасти)]);
				ДанныеРаздела.Вставить(ПрефиксВиртуальнойСтроки + "02_" + СтрокаЧГ0(НомерСтроки), ДанныеРаздела[ПрефиксМногострочнойЧасти + "02_" + СтрокаЧГ0(НомерСтрокиМногострочнойЧасти)]);
				ДанныеРаздела.Вставить(ПрефиксВиртуальнойСтроки + "04_" + СтрокаЧГ0(НомерСтроки), ДанныеРаздела[ПрефиксМногострочнойЧасти + "04_" + СтрокаЧГ0(НомерСтрокиМногострочнойЧасти)]);
				ДанныеРаздела.Вставить(ПрефиксВиртуальнойСтроки + "05_" + СтрокаЧГ0(НомерСтроки), ДанныеРаздела[ПрефиксМногострочнойЧасти + "05_" + СтрокаЧГ0(НомерСтрокиМногострочнойЧасти)]);
				НомерСтроки = НомерСтроки + 1;
			КонецЕсли;
			НомерСтрокиМногострочнойЧасти = НомерСтрокиМногострочнойЧасти + 1;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция СформироватьСтруктуруПоказателей()
	
	мДанныеОтчета = Новый Структура;
	
	СохрСтруктура = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить();
	ПоказателиОтчета = СохрСтруктура.ПоказателиОтчета;
	ПрименяетсяЕНВД = СохрСтруктура.ПрименениеЕНВД;
	СтруктураРеквизитовФормы.ЭтоБалансНекоммерческойОрганизации = СохрСтруктура.БалансНекоммерческойОрганизации;
	
	СохраненныйСоставДополнительныхСтрок = СохрСтруктура.СоставДополнительныхСтрок;
	
	СоставДополнительныхСтрок.Очистить();
		
	Для Каждого ЭлементСтруктуры Из СохраненныйСоставДополнительныхСтрок Цикл
		
		Если ЭлементСтруктуры.Ключ = "СтруктураСоставов" Тогда
			
			СтруктураСоставов = Новый Структура;
			
			Для Каждого Элемент Из ЭлементСтруктуры.Значение Цикл
				
				Если Элемент.Значение.Колонки.Найти("ДостДляРедактирования_Существенность") = Неопределено Тогда
					
					Элемент.Значение.Колонки.Добавить("ДостДляРедактирования_Существенность");
					Элемент.Значение.Колонки.Добавить("ДостДляРедактирования_МаксимальноеКоличество");
					
					Для Каждого СтрокаДерева Из Элемент.Значение.Строки Цикл
						
						СтрокаДерева.ДостДляРедактирования_Существенность
							= ЗначениеЗаполнено(СтрокаДерева.Существенность);
						
						СтрокаДерева.ДостДляРедактирования_МаксимальноеКоличество
							= ЗначениеЗаполнено(СтрокаДерева.Существенность);
						
						СтрокаДерева.МаксимальноеКоличество
							= ?(ЗначениеЗаполнено(СтрокаДерева.Существенность), 10, 0);
						
					КонецЦикла;
					
				КонецЕсли;
				
				Если Элемент.Ключ = "Баланс" Тогда
					ДеревоНастроекБаланс = Элемент.Значение.Скопировать();
				ИначеЕсли Элемент.Ключ = "ФормаОтчета" Тогда
					ДеревоНастроекФормаОтчета = Элемент.Значение.Скопировать();
				КонецЕсли;
				
				СтруктураСоставов.Вставить(Элемент.Ключ, "ДеревоНастроек" + Элемент.Ключ);
				
			КонецЦикла;
			
			СоставДополнительныхСтрок.Вставить("СтруктураСоставов", СтруктураСоставов);
			
		Иначе	
			
			СоставДополнительныхСтрок.Вставить(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Значение);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если Не СохрСтруктура.Свойство("СтруктураОтчета")
	 ИЛИ СохрСтруктура.СтруктураОтчета = Неопределено Тогда
		СтруктураОтчета = ПолучитьСтруктуруОтчета2014Кв4();
	Иначе
		СтруктураОтчета = СохрСтруктура.СтруктураОтчета;
	КонецЕсли;
	
	Для Каждого Раздел Из ПоказателиОтчета Цикл
		// Подмена строк расшифровки виртуальной многострочной частью
		ЗначенияРаздела = ПолучитьВиртуальныеСтрокиРасшифровки(Раздел.Ключ, Раздел.Значение, СоставДополнительныхСтрок, ПрименяетсяЕНВД);
		мДанныеОтчета.Вставить(Раздел.Ключ, ЗначенияРаздела);
	КонецЦикла;
	
	ОбработатьПоказателиПередВыгрузкой();
	
	АдресДляВыгрузки = "";
	Если ПустаяСтрока(ПоказателиОтчета.ПолеТабличногоДокументаБаланс.ОргПочтАдрес) Тогда
		СтруктураРеквизитовФормы.мАдресДляВыгрузки = "";
	ИначеЕсли НЕ СохрСтруктура.Свойство("Адрес9Запятых", АдресДляВыгрузки) ИЛИ НЕ ЗначениеЗаполнено(АдресДляВыгрузки) Тогда
		Адреса = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(СтруктураРеквизитовФормы.Организация, ДатаПодписи, "АдрФакт, АдрЮР, АдрПочт");
		Если ПустаяСтрока(СтрЗаменить(Адреса.АдрФакт, ",", "")) Тогда
			АдрФакт = "";
		Иначе
			АдрФакт = Адреса.АдрФакт;
		КонецЕсли;
		Если ПустаяСтрока(СтрЗаменить(Адреса.АдрЮР, ",", "")) Тогда
			АдрЮР = "";
		Иначе
			АдрЮР = Адреса.АдрЮР;
		КонецЕсли;
		Если ПустаяСтрока(СтрЗаменить(Адреса.АдрПочт, ",", "")) Тогда
			АдрПочт = "";
		Иначе
			АдрПочт = Адреса.АдрПочт;
		КонецЕсли;
		Если ЗначениеЗаполнено(АдрФакт) Тогда
			АдресДляВыгрузки = АдрФакт;
		ИначеЕсли ЗначениеЗаполнено(АдрЮР) Тогда
			АдресДляВыгрузки = АдрЮР;
		Иначе
			АдресДляВыгрузки = АдрПочт;
		КонецЕсли;
	КонецЕсли;
	мДанныеОтчета.Вставить("АдресДляВыгрузки", АдресДляВыгрузки);
	
	мДанныеОтчета.Вставить("СтруктураМногострочныхЧастей", СохрСтруктура.СтруктураМногострочныхЧастей);
	
КонецФункции

&НаСервере
Функция ПараметрыЭлектронногоПредставления()
	
	Перем ВидСдачиОтчетности; // переопределяем переменную для восстановления вида отчетности из сведений сохраненного документа
	
	Титульный = мДанныеОтчета.ПолеТабличногоДокументаБаланс;
	
	СоответствиеМесяцаОкончанияПериодаОтчетаПризнакуПериода = Новый Соответствие;
	СоответствиеМесяцаОкончанияПериодаОтчетаПризнакуПериода.Вставить(1,  "21");
	СоответствиеМесяцаОкончанияПериодаОтчетаПризнакуПериода.Вставить(2,  "21");
	СоответствиеМесяцаОкончанияПериодаОтчетаПризнакуПериода.Вставить(3,  "21");
	СоответствиеМесяцаОкончанияПериодаОтчетаПризнакуПериода.Вставить(4,  "31");
	СоответствиеМесяцаОкончанияПериодаОтчетаПризнакуПериода.Вставить(5,  "31");
	СоответствиеМесяцаОкончанияПериодаОтчетаПризнакуПериода.Вставить(6,  "31");
	СоответствиеМесяцаОкончанияПериодаОтчетаПризнакуПериода.Вставить(7,  "33");
	СоответствиеМесяцаОкончанияПериодаОтчетаПризнакуПериода.Вставить(8,  "33");
	СоответствиеМесяцаОкончанияПериодаОтчетаПризнакуПериода.Вставить(9,  "33");
	СоответствиеМесяцаОкончанияПериодаОтчетаПризнакуПериода.Вставить(10, "34");
	СоответствиеМесяцаОкончанияПериодаОтчетаПризнакуПериода.Вставить(11, "34");
	СоответствиеМесяцаОкончанияПериодаОтчетаПризнакуПериода.Вставить(12, "34");
	
	СоответствиеЕдиницыИзмеренияСдвигу = Новый Соответствие;
	СоответствиеЕдиницыИзмеренияСдвигу.Вставить(Перечисления.ПорядкиОкругленияОтчетности.Окр1000000, 6);
	СоответствиеЕдиницыИзмеренияСдвигу.Вставить(Перечисления.ПорядкиОкругленияОтчетности.Окр1000, 3);
	СоответствиеЕдиницыИзмеренияСдвигу.Вставить(Перечисления.ПорядкиОкругленияОтчетности.Окр1, 0);
	
	ПараметрыВыгрузки = Новый Структура;
	ПараметрыВыгрузки.Вставить("ВерсПрог", РегламентированнаяОтчетность.НазваниеИВерсияПрограммы());
	ПараметрыВыгрузки.Вставить("ДатаДок",  Формат(ТекущаяДатаСеанса(), "ДФ=дд.ММ.гггг"));
	
	ПериодОтчетности = СоответствиеМесяцаОкончанияПериодаОтчетаПризнакуПериода[Месяц(СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания)];
	
	ПараметрыВыгрузки.Вставить("Период", ПериодОтчетности);
	
	ПараметрыВыгрузки.Вставить("ОтчетГод",          Формат(СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания, "ДФ=гггг"));
	ПараметрыВыгрузки.Вставить("ВидДок",            Строка(СтруктураРеквизитовФормы.мСохраненныйДок.Вид));
	ПараметрыВыгрузки.Вставить("НаимОрг",           СокрЛП(Титульный.ОргНазв));
	ПараметрыВыгрузки.Вставить("ИННОрг",            СокрЛП(Титульный.ОргИНН));
	ПараметрыВыгрузки.Вставить("КППОрг",            СокрЛП(СтруктураРеквизитовФормы.Организация.КПП));
	ПараметрыВыгрузки.Вставить("КодИФНС",           СокрЛП(СтруктураРеквизитовФормы.Организация.КодНалоговогоОргана));
	ПараметрыВыгрузки.Вставить("КодИФНСПосредника", ?(СтруктураРеквизитовФормы.Организация.КрупнейшийНалогоплательщик,
		СокрЛП(СтруктураРеквизитовФормы.Организация.КодНалоговогоОрганаПолучателя), ""));
	
	ПараметрыВыгрузки.Вставить("ОКПО",  СокрЛП(Титульный.ОргКодОКПО));
	ПараметрыВыгрузки.Вставить("ОКВЭД", СокрЛП(Титульный.ОргКодОКВЭД));
	ПараметрыВыгрузки.Вставить("ОКОПФ", СокрЛП(Титульный.ОргКодОКОПФ));
	ПараметрыВыгрузки.Вставить("ОКФС",  СокрЛП(Титульный.ОргКодОКФС));
	ПараметрКодЕИ = "";
	Если ЗначениеЗаполнено(Титульный.КодЕИ) Тогда
		ПараметрКодЕИ = СокрЛП(Титульный.КодЕИ);
	ИначеЕсли ЗначениеЗаполнено(СтруктураДанныхБаланс.КодЕИ) Тогда
		ПараметрКодЕИ = СокрЛП(СтруктураДанныхБаланс.КодЕИ);
	Иначе
		Попытка
			ПараметрКодЕИ = СокрЛП(ТабличныйДокумент.Области.КодЕИ.Значение);
		Исключение
			Если СтруктураРеквизитовФормы.ЕдиницаИзмерения
				= ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1 Тогда
				ПараметрКодЕИ = "383";
			ИначеЕсли СтруктураРеквизитовФормы.ЕдиницаИзмерения
				= ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1000 Тогда
				ПараметрКодЕИ = "384";
			ИначеЕсли СтруктураРеквизитовФормы.ЕдиницаИзмерения
				= ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1000000 Тогда
				ПараметрКодЕИ = "385";
			КонецЕсли;
		КонецПопытки;
	КонецЕсли;
	ПараметрыВыгрузки.Вставить("ОКЕИ", ПараметрКодЕИ);
	
	// определяем форматную строку, используемую для получения суммовых значений, помещаемых в файл выгрузки
	ПараметрыВыгрузки.Вставить("ФорматВывода", "ЧДЦ=0; ЧН=0; ЧС=" + СоответствиеЕдиницыИзмеренияСдвигу[СтруктураРеквизитовФормы.мСохраненныйДок.ЕдиницаИзмерения]);
	
	ЗаполнитьСведенияПодписантов(ПараметрыВыгрузки);
	
	ПараметрыВыгрузки.Вставить("ТелОрг", РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(СтруктураРеквизитовФормы.мСохраненныйДок.Организация, СтруктураРеквизитовФормы.мСохраненныйДок.ДатаПодписи, "ТелОрганизации").ТелОрганизации);
		
	СтруктураАдреса = РегламентированнаяОтчетностьКлиентСервер.РазложитьАдрес(мДанныеОтчета.АдресДляВыгрузки);
	ПараметрыВыгрузки.Вставить("АдрИндекс",     СокрЛП(СтруктураАдреса.Индекс));
	ПараметрыВыгрузки.Вставить("АдрКодРегион",  РегламентированнаяОтчетностьВызовСервера.КодРегионаПоНазванию(СокрЛП(СтруктураАдреса.Регион)));
	ПараметрыВыгрузки.Вставить("АдрРегион",     СокрЛП(СтруктураАдреса.Регион));
	ПараметрыВыгрузки.Вставить("АдрРайон",      СокрЛП(СтруктураАдреса.Район));
	ПараметрыВыгрузки.Вставить("АдрГород",      СокрЛП(СтруктураАдреса.Город));
	ПараметрыВыгрузки.Вставить("АдрНаселПункт", СокрЛП(СтруктураАдреса.НаселенныйПункт));
	ПараметрыВыгрузки.Вставить("АдрУлица",      СокрЛП(СтруктураАдреса.Улица));
	ПараметрыВыгрузки.Вставить("АдрДом",        СокрЛП(СтруктураАдреса.Дом));
	ПараметрыВыгрузки.Вставить("АдрКорпус",     СокрЛП(СтруктураАдреса.Корпус));
	ПараметрыВыгрузки.Вставить("АдрКварт",      СокрЛП(СтруктураАдреса.Квартира));
	
	ПараметрыВыгрузки.Вставить("ПрефиксИмениФайлаВыгрузки", "BANK_BUHOTCH");
	
	ПараметрыВыгрузки.Вставить("ИдентификаторФайлаВыгрузки", Строка(Новый УникальныйИдентификатор));
	
	// Формируем ИдФайл на основании значений других параметров.
	ПараметрыВыгрузки.Вставить("ИдФайл", СформироватьИдФайл(ПараметрыВыгрузки));
	
	// Условия включения узлов и элементов в выгрузку.
	ПараметрыВыгрузки.Вставить("БалансКоммерческойОрганизации", НЕ СтруктураРеквизитовФормы.ЭтоБалансНекоммерческойОрганизации);
	ПараметрыВыгрузки.Вставить("БалансНекоммерческойОрганизации", СтруктураРеквизитовФормы.ЭтоБалансНекоммерческойОрганизации);
	
	ПараметрыВыгрузки.Вставить("Период349094", (ПериодОтчетности = "34" ИЛИ ПериодОтчетности = "90" ИЛИ ПериодОтчетности = "94"));
	
	ВерсияФормата = ВерсияФормата(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	ДеревоНастройкиСтраниц = СтруктураРеквизитовФормы.мСохраненныйДок.ДеревоНастройкиСтраниц.Получить();
	
	ПараметрыВыгрузки.Вставить("ДатаУтвОтч", "");
	Если Титульный.Свойство("ДатаУтвОтчетности") Тогда
		Если ЗначениеЗаполнено(Титульный.ДатаУтвОтчетности) Тогда
			ПараметрыВыгрузки.Вставить("ДатаУтвОтч", Формат(Титульный.ДатаУтвОтчетности, "ДФ=дд.ММ.гггг"));
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыВыгрузки.Вставить("ВключитьБаланс", РазделВключенВОтчет("Баланс", ДеревоНастройкиСтраниц));
	ПараметрыВыгрузки.Вставить("ВключитьОФР",    РазделВключенВОтчет("ФормаОтчета", ДеревоНастройкиСтраниц));
	ПараметрыВыгрузки.Вставить("ВключитьОИК",    РазделВключенВОтчет("ОИК", ДеревоНастройкиСтраниц));
	ПараметрыВыгрузки.Вставить("ВключитьОДДС",   РазделВключенВОтчет("ОДДС", ДеревоНастройкиСтраниц));
	
	ПараметрыВыгрузки.Вставить("ВключитьДопСведения", РазделВключенВОтчет("ДополнительныеПоказатели", ДеревоНастройкиСтраниц));
	
	Возврат ПараметрыВыгрузки;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////

&НаСервере
Функция ПроверитьВозможностьВыгрузки(ПараметрыВыгрузки)
	
	СтатусПроверки = Истина;
	
	Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.Период) Тогда
		СообщитьВТаблицуСообщений(ЭтаФорма, "Выгрузка за указанный период не предусмотрена по формату представления в электронной форме!", "Баланс", "ДатаБаланса");
		СтатусПроверки = Ложь;
		Возврат СтатусПроверки;
	КонецЕсли;
	
	Если ПустаяСтрока(ПараметрыВыгрузки.КодИФНС) Тогда
		СообщитьВТаблицуСообщений(ЭтаФорма, "В справочнике ""Организации"" для текущей организации не задан код ИФНС, необходимый для формирования имени файла выгрузки!", "Баланс");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ПустаяСтрока(ПараметрыВыгрузки.КППОрг) Тогда
		СообщитьВТаблицуСообщений(ЭтаФорма, "В справочнике ""Организации"" для текущей организации не задан КПП, необходимый для формирования корректного файла выгрузки!", "Баланс");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ПустаяСтрока(ПараметрыВыгрузки.НаимОрг) Тогда
		СообщитьВТаблицуСообщений(ЭтаФорма, "На указано полное наименование организации!", "Баланс", "ОргНазв");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.ИННОрг) Тогда
		СообщитьВТаблицуСообщений(ЭтаФорма, "Не задан ИНН организации!", "Баланс", "ОргИНН");
		СтатусПроверки = Ложь;
	ИначеЕсли НЕ РегламентированнаяОтчетностьВызовСервера.ИННСоответствуетТребованиямНаСервере(ПараметрыВыгрузки.ИННОрг, Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо) Тогда
		СообщитьВТаблицуСообщений(ЭтаФорма, "Задан некорректный ИНН юридического лица!", "Баланс", "ОргИНН");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ПараметрыВыгрузки.ПрПодп = "1" Тогда
		// Руководитель организации.
		Если ПустаяСтрока(ПараметрыВыгрузки.ПодпФамилия) Тогда
			СообщитьВТаблицуСообщений(ЭтаФорма, "Не удалось определить фамилию руководителя!", "Баланс", "ОргДиректор");
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		Если ПустаяСтрока(ПараметрыВыгрузки.ПодпИмя) Тогда
			СообщитьВТаблицуСообщений(ЭтаФорма, "Не удалось определить имя руководителя!", "Баланс", "ОргДиректор");
			СтатусПроверки = Ложь;
		КонецЕсли;
		
	Иначе
		// Уполномоченный представитель.
		Если ПустаяСтрока(ПараметрыВыгрузки.ПодпФамилия) Тогда
			СообщитьВТаблицуСообщений(ЭтаФорма, "Не удалось определить фамилию уполномоченного представителя!", "Баланс", "ОргДиректор");
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		Если ПустаяСтрока(ПараметрыВыгрузки.ПодпИмя) Тогда
			СообщитьВТаблицуСообщений(ЭтаФорма, "Не удалось определить имя уполномоченного представителя!", "Баланс", "ОргДиректор");
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		Если ПустаяСтрока(ПараметрыВыгрузки.ПодпНаимДок) Тогда
			СообщитьВТаблицуСообщений(ЭтаФорма, "Не задано наименование документа, удостоверяющего полномочия представителя!", "Баланс", "");
			СтатусПроверки = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ПараметрыВыгрузки.ОКПО) И (СтрДлина(ПараметрыВыгрузки.ОКПО) < 8 ИЛИ СтрДлина(ПараметрыВыгрузки.ОКПО) > 10 ИЛИ НЕ СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(ПараметрыВыгрузки.ОКПО)) Тогда
		СообщитьВТаблицуСообщений(ЭтаФорма, "На титульном листе задан некорректный код по ОКПО!", "Баланс", "ОргКодОКПО");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ПустаяСтрока(ПараметрыВыгрузки.ОКВЭД) Тогда
		СообщитьВТаблицуСообщений(ЭтаФорма, "Не указано значение кода вида деятельности по ОКВЭД!", "Баланс", "ОргКодОКВЭД");
		СтатусПроверки = Ложь;
	ИначеЕсли НЕ РегламентированнаяОтчетностьКлиентСервер.ОКВЭДСоответствуетТребованиям(ПараметрыВыгрузки.ОКВЭД) Тогда
		СообщитьВТаблицуСообщений(ЭтаФорма, "Указано некорректное значение кода вида деятельности по ОКВЭД! Допустимы значения, соответствующие следующим шаблонам: ""XX"", ""XX.X"", ""XX.XX"", ""XX.XX.X"", ""XX.XX.XX"" (X - любая цифра).!", "Баланс", "ОргКодОКВЭД");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ПустаяСтрока(ПараметрыВыгрузки.ОКОПФ) Тогда
		СообщитьВТаблицуСообщений(ЭтаФорма, "Не задан код по ОКОПФ!", "Баланс", "ОргКодОКОПФ");
		СтатусПроверки = Ложь;
	ИначеЕсли (СтрДлина(ПараметрыВыгрузки.ОКОПФ) <> 2 И СтрДлина(ПараметрыВыгрузки.ОКОПФ) <> 5) ИЛИ НЕ СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(ПараметрыВыгрузки.ОКОПФ) Тогда	
		СообщитьВТаблицуСообщений(ЭтаФорма, "Задан некорректный код по ОКОПФ!", "Баланс", "ОргКодОКОПФ");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ПустаяСтрока(ПараметрыВыгрузки.ОКФС) Тогда
		СообщитьВТаблицуСообщений(ЭтаФорма, "Не задан код по ОКФС!", "Баланс", "ОргКодОКФС");
		СтатусПроверки = Ложь;
	ИначеЕсли СтрДлина(ПараметрыВыгрузки.ОКФС) <> 2 ИЛИ НЕ СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(ПараметрыВыгрузки.ОКФС) Тогда
		СообщитьВТаблицуСообщений(ЭтаФорма, "Задан некорректный код по ОКФС!", "Баланс", "ОргКодОКФС");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ПустаяСтрока(ПараметрыВыгрузки.ОКЕИ) Тогда
		СообщитьВТаблицуСообщений(ЭтаФорма, "Не задан код по ОКЕИ!", "Баланс", "КодЕИ");
		СтатусПроверки = Ложь;
	ИначеЕсли СтрДлина(ПараметрыВыгрузки.ОКЕИ) <> 3 ИЛИ НЕ СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(ПараметрыВыгрузки.ОКЕИ) Тогда
		СообщитьВТаблицуСообщений(ЭтаФорма, "Задан некорректный код по ОКЕИ!", "Баланс", "КодЕИ");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.АдрКодРегион) Тогда
		СообщитьВТаблицуСообщений(ЭтаФорма, "Требуется указание как минимум кода региона в адресе!", "Баланс", "ОргПочтАдрес");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	// Проверка заполнения выгружаемых многострочных частей.
	Для Каждого ЭлементСтруктуры Из мДанныеОтчета.СтруктураМногострочныхЧастей Цикл
		
		МногострочнаяЧасть = ЭлементСтруктуры.Значение;
		
		Если НЕ МногострочнаяЧасть.Свойство("ИмяПоляТабличногоДокумента") Тогда
			Продолжить;
		КонецЕсли;
		
		Если МногострочнаяЧасть.ИмяПоляТабличногоДокумента = "ПолеТабличногоДокумента" + "Баланс" Тогда
			СообщениеОбОшибке = НСтр("ru='В бухгалтерском балансе не задано наименование строки расшифровки!'");
			РезультатПроверки = МногострочнаяЧастьЗаполненаПравильно(мДанныеОтчета.ПолеТабличногоДокументаБаланс, МногострочнаяЧасть, "02", "04, 05, 06", СообщениеОбОшибке, ПараметрыВыгрузки);
			СтатусПроверки = (СтатусПроверки И РезультатПроверки);
			
		ИначеЕсли МногострочнаяЧасть.ИмяПоляТабличногоДокумента = "ПолеТабличногоДокумента" + "ФормаОтчета" Тогда
			СообщениеОбОшибке = НСтр("ru='В отчете о прибылях и убытках не задано наименование строки расшифровки!'");
			РезультатПроверки = МногострочнаяЧастьЗаполненаПравильно(мДанныеОтчета.ПолеТабличногоДокументаФормаОтчета, МногострочнаяЧасть, "02", "04, 05", СообщениеОбОшибке, ПараметрыВыгрузки);
			СтатусПроверки = (СтатусПроверки И РезультатПроверки);
			
		ИначеЕсли МногострочнаяЧасть.ИмяПоляТабличногоДокумента = "ПолеТабличногоДокумента" + "ОДДС" Тогда
			СообщениеОбОшибке = НСтр("ru='В отчете о движении денежных средств не задано наименование строки расшифровки!'");
			РезультатПроверки = МногострочнаяЧастьЗаполненаПравильно(мДанныеОтчета.ПолеТабличногоДокументаОДДС, МногострочнаяЧасть, "01", "03, 04", СообщениеОбОшибке, ПараметрыВыгрузки);
			СтатусПроверки = (СтатусПроверки И РезультатПроверки);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ПроверитьЗаполнение_ЛизингОбязательства(СтатусПроверки);
	
	ПроверитьЗаполнение_ЗадолженностьПоКредитамЗаймам(СтатусПроверки);
	
	Возврат СтатусПроверки;
	
КонецФункции

&НаСервере
Процедура СообщитьВТаблицуСообщений(Форма, Описание, Раздел, ИмяЯчейки = "", ФИО = "") Экспорт
	
	НовСтр = ТаблицаСообщений.Добавить();
	НовСтр.Раздел = Раздел;
	НовСтр.ИмяЯчейки = ИмяЯчейки;
	НовСтр.Описание = Описание;
	НовСтр.Страница = ФИО;
	
	НовСтр.ОтчетДок = СтруктураРеквизитовФормы.мСохраненныйДок;
	НовСтр.Отчет    = РегламентированнаяОтчетностьКлиентСервер.ПредставлениеДокументаРеглОтч(СтруктураРеквизитовФормы.мСохраненныйДок);
	
КонецПроцедуры

&НаСервере
Функция СкопироватьУзел(Родитель, Узел)
	
	// находим узел в максимальным индексом с тем же кодом, что и у копируемого и добавляем его сразу после найденного элемента
	СтрокиСТемЖеКодом = Родитель.Строки.НайтиСтроки(Новый Структура("Код", Узел.Код), Ложь);
	МаксИндекс = -1;
	Для Каждого СтрокаСТемЖеКодом Из СтрокиСТемЖеКодом Цикл
		ТекИндекс = Родитель.Строки.Индекс(СтрокаСТемЖеКодом);
		Если ТекИндекс > МаксИндекс Тогда
			МаксИндекс = ТекИндекс;
		КонецЕсли;
	КонецЦикла;
	
	ИндексСоздаваемогоУзла = МаксИндекс + 1;
	Если ИндексСоздаваемогоУзла >= Родитель.Строки.Количество() ИЛИ ИндексСоздаваемогоУзла = 0 Тогда // если аналогичный узел не найден или найденный узел - последний
		НовыйУзел = Родитель.Строки.Добавить();
	Иначе
		НовыйУзел = Родитель.Строки.Вставить(ИндексСоздаваемогоУзла);
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(НовыйУзел, Узел, , "Родитель, Строки");
	Для Каждого Стр из Узел.Строки Цикл
		СкопироватьУзел(НовыйУзел, Стр);
	КонецЦикла;
	
	Возврат НовыйУзел;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьДанными(ДеревоВыгрузки, ПараметрыВыгрузки)
	
	ОбработатьУсловныеЭлементы(ПараметрыВыгрузки, ДеревоВыгрузки); // формируем точную структуру XML-макета
	
	ЗаполнитьДаннымиУзел(ПараметрыВыгрузки, ДеревоВыгрузки); // заполняем дерево данными
	
	Узел_Документ = ПолучитьПодчиненныйЭлемент(ДеревоВыгрузки, "Документ");
	
	ВыгрузитьРасшифровкиОбеспечений(Узел_Документ);
	
	ВыгрузитьЗадолженностьПоКредитамЗаймам(Узел_Документ);
	
	ВыгрузитьАнализПоБанковскимСчетам(Узел_Документ);
	
	ОтсечьНезаполненныеНеобязательныеУзлы(ДеревоВыгрузки);
	
КонецПроцедуры

&НаСервере
Процедура ОтсечьНезаполненныеНеобязательныеУзлы(Узел)
	
	КоличествоСтрок = Узел.Строки.Количество();
	Для Инд = 1 По КоличествоСтрок Цикл
		Стр = Узел.Строки.Получить(КоличествоСтрок - Инд);
		ОтсечьНезаполненныеНеобязательныеУзлы(Стр);
	КонецЦикла;
	
	Если ТипЗнч(Узел) <> Тип("ДеревоЗначений") Тогда
		УзелПуст = УзелПуст(Узел);
		Если УзелПуст Тогда
			Если СтрНайти(Узел.Обязательность, "Н") <> 0 ИЛИ СтрНайти(Узел.Обязательность, "H") <> 0 Тогда // учтем оба варианта: кириллицу и латиницу
				РегламентированнаяОтчетность.УдалитьУзел(Узел);
			ИначеЕсли (СтрНайти(Узел.Обязательность, "М") <> 0 ИЛИ СтрНайти(Узел.Обязательность, "M") <> 0) // учтем оба варианта: кириллицу и латиницу
			И ?(СтрНайти(Узел.Обязательность, "О") <> 0 ИЛИ СтрНайти(Узел.Обязательность, "O") <> 0, РегламентированнаяОтчетность.ИмеютсяАналогичныеСоседниеУзлыКлюч(Узел), Истина) Тогда
				РегламентированнаяОтчетность.УдалитьУзел(Узел);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция УзелПуст(Узел)
	
	ПустойУзел = ?(Узел.Формат = "N",
	               Узел.Значение = "0" ИЛИ НЕ ЗначениеЗаполнено(Узел.Значение),
	               НЕ ЗначениеЗаполнено(Узел.Значение) ИЛИ Узел.Код = "ОКУД");
	Для Каждого Стр из Узел.Строки Цикл
		Если НЕ УзелПуст(Стр) Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	Возврат ПустойУзел;
	
КонецФункции

&НаСервере
Процедура ОбработатьУсловныеЭлементы(Знач ПараметрыВыгрузки, Узел)
	
	Если ТипЗнч(Узел) <> Тип("ДеревоЗначений") Тогда
		РегламентированнаяОтчетность.ДополнитьСтруктуруПараметровПрочиеОтчеты(мДанныеОтчета, ПараметрыВыгрузки, Узел);
	КонецЕсли;
	КоличествоСтрок = Узел.Строки.Количество();
	Для Инд = 1 По КоличествоСтрок Цикл
		ТекСтр = Узел.Строки.Получить(КоличествоСтрок - Инд);
		Если НЕ ПустаяСтрока(ТекСтр.Условие) Тогда
			Если НЕ РегламентированнаяОтчетность.УсловиеВыполнено(ЭтаФорма, ПараметрыВыгрузки, ТекСтр.Условие, "Баланс") Тогда
				Узел.Строки.Удалить(ТекСтр);
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		ОбработатьУсловныеЭлементы(ПараметрыВыгрузки, ТекСтр);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ВывестиПоказательВXML(Узел, ЗначениеПоказателя)
	
	МинШирина = Узел.МинРазмерность;
	МаксШирина = Узел.МаксРазмерность;
	
	Если Узел.Формат = "T" ИЛИ Узел.Формат = "Т" Тогда // учтем оба варианта: кириллицу и латиницу
		Если ТипЗнч(ЗначениеПоказателя) = Тип("Дата") Тогда
			ПредставлениеЗначения = Формат(ЗначениеПоказателя, "ДФ=dd.MM.yyyy");
		Иначе
			ПредставлениеЗначения = СокрЛП(ЗначениеПоказателя);
		КонецЕсли;
		
		Узел.Значение = ?(МаксШирина < СтрДлина(ПредставлениеЗначения), СокрЛП(Лев(ПредставлениеЗначения, МаксШирина)), ПредставлениеЗначения);
		
	ИначеЕсли Узел.Формат = "N" Тогда
		СтрокаФормата = "ЧРД=.;ЧН=0;ЧГ=;";
		Если Узел.МаксРазмерность <> 0 И Узел.МаксРазмерность <> 99999 Тогда
			СтрокаФормата = СтрокаФормата + "ЧЦ=" + Формат(Узел.МаксРазмерность, "ЧГ=") + ";";
		КонецЕсли;
		Если Узел.МинРазмерность <> 99999 Тогда
			СтрокаФормата = СтрокаФормата + "ЧДЦ=" + Формат(Узел.МинРазмерность, "ЧГ=") + ";";
		КонецЕсли;
		
		Узел.Значение = СокрЛП(Формат(ЗначениеПоказателя, СтрокаФормата));
		
	ИначеЕсли Узел.Формат = "gYear" Тогда
		Если ТипЗнч(ЗначениеПоказателя) = Тип("Дата") Тогда
			Узел.Значение = СокрЛП(Формат(ЗначениеПоказателя, "ДФ=гггг"));
		Иначе
			Узел.Значение = Прав(СокрЛП(ЗначениеПоказателя), 4);
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ПолучитьПервыйКлючВПодчиненииКУзлу(Узел)
	
	Если ЗначениеЗаполнено(Узел.Ключ) Тогда
		Возврат Узел.Ключ;
	КонецЕсли;
	
	Для Каждого Стр Из Узел.Строки Цикл
		КлючВПодчинении = ПолучитьПервыйКлючВПодчиненииКУзлу(Стр);
		Если ЗначениеЗаполнено(КлючВПодчинении) Тогда
			Возврат КлючВПодчинении;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

&НаСервере
Функция ОпределитьКоличествоСтрокМногострочнойЧасти(ПараметрыВыгрузки, Узел)
	
	ПервыйКлюч = ПолучитьПервыйКлючВПодчиненииКУзлу(Узел);
	Если ЗначениеЗаполнено(ПервыйКлюч) Тогда
		НомерСтроки = 1;
		Пока ПараметрыВыгрузки.Свойство(ПервыйКлюч + "_" + СтрокаЧГ0(НомерСтроки)) Цикл	
			НомерСтроки = НомерСтроки + 1;
		КонецЦикла;
		Возврат НомерСтроки - 1;
	Иначе
		Возврат 0;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ЗначениеПериведенноеКЕдиницеИзмерения(Значение, ПараметрыВыгрузки)
	
	Возврат Число(Формат(Значение, ПараметрыВыгрузки.ФорматВывода));
	
КонецФункции

&НаСервере
Процедура ЗаполнитьДаннымиУзел(ПараметрыВыгрузки, Узел, НомерСтроки = Неопределено)
	
	МассивУзлов = Новый Массив;
	Для Каждого Ед Из Узел.Строки Цикл
		МассивУзлов.Добавить(Ед);
	КонецЦикла;
	
	Для Каждого Стр из МассивУзлов Цикл
		Если Стр.Тип = "С" ИЛИ Стр.Тип = "C" Тогда // учтем оба варианта: кириллицу и латиницу
			Если Стр.Многострочность Тогда
				КоличествоСтрок = ОпределитьКоличествоСтрокМногострочнойЧасти(ПараметрыВыгрузки, Стр);
				Для НомСтр = 1 По КоличествоСтрок Цикл
					НовыйУзел = СкопироватьУзел(Узел, Стр);
					ЗаполнитьДаннымиУзел(ПараметрыВыгрузки, НовыйУзел, НомСтр);
				КонецЦикла;
			Иначе
				ЗаполнитьДаннымиУзел(ПараметрыВыгрузки, Стр, НомерСтроки);
			КонецЕсли;
		Иначе
			Если ПустаяСтрока(Стр.ЗначениеПоУмолчанию) Тогда
				Если НЕ ПустаяСтрока(Стр.Ключ) Тогда
					ИмяСвойства = Стр.Ключ + ?(НомерСтроки = Неопределено, "", "_" + СтрокаЧГ0(НомерСтроки));
					Если ПараметрыВыгрузки.Свойство(ИмяСвойства) Тогда
						ЗначениеСвойства = ПараметрыВыгрузки[ИмяСвойства];
						
						Если ТипЗнч(ЗначениеСвойства) = Тип("Строка") Тогда
							ВывестиПоказательВXML(Стр, ЗначениеСвойства);
						ИначеЕсли ТипЗнч(ЗначениеСвойства) = Тип("Дата") Тогда
							ВывестиПоказательВXML(Стр, Формат(ЗначениеСвойства, "ДФ=dd.MM.yyyy"));
						Иначе
							ВыгружатьБезПриведения = (Лев(Стр.Ключ, 11) = "П0001006001");
							Если ВыгружатьБезПриведения Тогда
								ВывестиПоказательВXML(Стр, ЗначениеСвойства);
							Иначе
								ВывестиПоказательВXML(Стр, ЗначениеПериведенноеКЕдиницеИзмерения(ЗначениеСвойства, ПараметрыВыгрузки));
							КонецЕсли;
						КонецЕсли;
						
					Иначе
						Стр.Значение = ?(Стр.Формат = "N", "0", "");
					КонецЕсли;
					
				Иначе
					Стр.Значение = ?(Стр.Формат = "N", "0", "");
				КонецЕсли;
				
			ИначеЕсли Лев(Стр.ЗначениеПоУмолчанию, 1) = "&" Тогда
				ВывестиПоказательВXML(Стр, ПараметрыВыгрузки[Сред(Стр.ЗначениеПоУмолчанию, 2)]);
			Иначе
				Стр.Значение = Стр.ЗначениеПоУмолчанию;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ЗначениеСоответствуетФормату(Стр)
	
	СтатусПроверки = Истина;
	Если Стр.Формат = "Т" ИЛИ Стр.Формат = "T" Тогда // учтем оба варианта: кириллицу и латиницу
		ДлинаЗначения = СтрДлина(Стр.Значение);
		Если ДлинаЗначения < Стр.МинРазмерность Тогда
			
			СтатусПроверки = Ложь;
			Если ЗначениеЗаполнено(Стр.Раздел) И ЗначениеЗаполнено(Стр.Ключ) Тогда
				СообщитьВТаблицуСообщений(ЭтаФорма,
					"Длина значения показателя """
					+ РегламентированнаяОтчетность.ПредставлениеПоказателя(Стр)
					+ """ меньше минимально возможной (" + ДлинаЗначения
					+ " < " + Стр.МинРазмерность + ")", Стр.Раздел, Стр.Ключ, "");
			Иначе
				СообщитьВТаблицуСообщений(ЭтаФорма,
					"Длина значения показателя """
					+ РегламентированнаяОтчетность.ПредставлениеПоказателя(Стр)
					+ """ меньше минимально возможной (" + ДлинаЗначения
					+ " < " + Стр.МинРазмерность + ")", "Баланс", "");
			КонецЕсли;
			
		КонецЕсли;
		Если ДлинаЗначения > Стр.МаксРазмерность Тогда
			
			СтатусПроверки = Ложь;
			Если ЗначениеЗаполнено(Стр.Раздел) И ЗначениеЗаполнено(Стр.Ключ) Тогда
				СообщитьВТаблицуСообщений(ЭтаФорма,
					"Длина значения показателя """
					+ РегламентированнаяОтчетность.ПредставлениеПоказателя(Стр)
					+ """ больше максимально возможной (" + ДлинаЗначения
					+ " > " + Стр.МаксРазмерность + ")", Стр.Раздел, Стр.Ключ, "");
			Иначе
				СообщитьВТаблицуСообщений(ЭтаФорма,
					"Длина значения показателя """
					+ РегламентированнаяОтчетность.ПредставлениеПоказателя(Стр)
					+ """ больше максимально возможной (" + ДлинаЗначения
					+ " > " + Стр.МаксРазмерность + ")", "Баланс", "");
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	Возврат СтатусПроверки;
	
КонецФункции

&НаСервере
Функция ПроверитьДанные(Узел)
	
	СтатусПроверки = Истина;
	Если ТипЗнч(Узел) <> Тип("ДеревоЗначений") Тогда
		Если НЕ ЗначениеСоответствуетФормату(Узел) Тогда
			СтатусПроверки = Ложь;
		КонецЕсли;
	КонецЕсли;
	Для Каждого Стр из Узел.Строки Цикл
		СтатусПроверки = (ПроверитьДанные(Стр) И СтатусПроверки); // именно в указанном порядке для выдачи всех ошибок
	КонецЦикла;
	Возврат СтатусПроверки;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////

&НаСервере
Функция ВыгрузитьДеревоВXML(ДеревоВыгрузки, ПараметрыВыгрузки)
	
	ПотокXML = РегламентированнаяОтчетность.СоздатьНовыйПотокXML(); // создаем новый поток для записи
	ЗаписатьУзелДереваВXML(ДеревоВыгрузки, ПотокXML); // пишем дерево в поток
	ТекстДляЗаписи = ПотокXML.Закрыть(); // получаем текст XML
	ТекстДляЗаписи = "<?xml version=""1.0"" encoding=""windows-1251""?>" + Сред(ТекстДляЗаписи, СтрНайти(ТекстДляЗаписи, Символы.ПС));
	Возврат ТекстДляЗаписи;
	
КонецФункции

&НаСервере
Функция ЗаписатьУзелДереваВXML(СтрокаДерева, ПотокXML) Экспорт
	
	Если ТипЗнч(СтрокаДерева) = Тип("ДеревоЗначений") Тогда
		ПотокXML.ЗаписатьНачалоЭлемента("Файл");
		ПотокXML.ЗаписатьАтрибут("xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");
		Для каждого Стр Из СтрокаДерева.Строки Цикл
			ЗаписатьУзелДереваВXML(Стр, ПотокXML);
		КонецЦикла;
		ПотокXML.ЗаписатьКонецЭлемента();
	Иначе
		Если СтрокаДерева.Тип = "А" ИЛИ СтрокаДерева.Тип = "A" Тогда 
			ПотокXML.ЗаписатьАтрибут(СтрокаДерева.Код, Строка(СтрокаДерева.Значение));
		Иначе
			ПотокXML.ЗаписатьНачалоЭлемента(СтрокаДерева.Код);
			Для каждого Лист из СтрокаДерева.Строки Цикл
				ЗаписатьУзелДереваВXML(Лист, ПотокXML);
			КонецЦикла;
			ПотокXML.ЗаписатьТекст(Строка(СтрокаДерева.Значение));
			ПотокXML.ЗаписатьКонецЭлемента();
		КонецЕсли;
	КонецЕсли;

КонецФункции

&НаСервере
Функция ПолучитьСписокВычитаемыхПоказателей()
	
	ИменаПоказателейСоЗнакомПлюс = Новый Массив;
	
	// Вычитаемые показатели (в показателях отчета хранятся со знаком "-", при выгрузке должны быть положительными).
	
	// Бухгалтерский баланс
	Если НЕ СтруктураРеквизитовФормы.ЭтоБалансНекоммерческойОрганизации Тогда
		ИменаПоказателейСоЗнакомПлюс.Добавить("П000100132004");
		ИменаПоказателейСоЗнакомПлюс.Добавить("П000100132005");
		ИменаПоказателейСоЗнакомПлюс.Добавить("П000100132006");
	КонецЕсли;
	
	// Отчет о прибылях и убытках.
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000100212004");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000100212005");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000100221004");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000100221005");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000100222004");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000100222005");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000100233004");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000100233005");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000100235004");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000100235005");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000100241004");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000100241005");
	
	// Отчет об изменениях капитала
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000100310004");
	
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000100322003");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000100322005");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000100322006");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000100322007");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000100322008");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000100322107");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000100322108");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000100322205");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000100322207");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000100322208");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000100322305");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000100322307");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000100322308");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000100322403");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000100322408");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000100322503");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000100322508");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000100322608");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000100322707");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000100322708");
	
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000100320004");
	
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000100332003");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000100332005");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000100332006");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000100332007");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000100332008");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000100332107");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000100332108");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000100332205");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000100332207");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000100332208");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000100332305");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000100332307");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000100332308");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000100332403");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000100332408");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000100332503");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000100332508");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000100332608");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000100332707");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000100332708");
	
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000100330004");
	                                 	
	// Отчет о движении денежных средств.
	СписокВычитаемыхСтрок = "4120, 4121, 4122, 4123, 4124, 4129"
	                      + ", 4220, 4221, 4222, 4223, 4224, 4229"
	                      + ", 4320, 4321, 4322, 4323, 4329";
	МассивВычитаемыхСтрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СписокВычитаемыхСтрок, ",");
	Для Каждого ВычитаемаяСтрока ИЗ МассивВычитаемыхСтрок Цикл
		ИменаПоказателейСоЗнакомПлюс.Добавить("П000100" + СокрЛП(ВычитаемаяСтрока) + "03");
		ИменаПоказателейСоЗнакомПлюс.Добавить("П000100" + СокрЛП(ВычитаемаяСтрока) + "04");
	КонецЦикла;
	СписокВычитаемыхДопСтрок = "4120, 4220, 4320";
	МассивВычитаемыхДопСтрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СписокВычитаемыхСтрок, ",");
	Для Каждого ВычитаемаяДопСтрока ИЗ МассивВычитаемыхДопСтрок Цикл
		ИменаПоказателейСоЗнакомПлюс.Добавить("П100100" + СокрЛП(ВычитаемаяДопСтрока) + "03");
		ИменаПоказателейСоЗнакомПлюс.Добавить("П100100" + СокрЛП(ВычитаемаяДопСтрока) + "04");
	КонецЦикла;
	
	// Отчет о целевом использовании полученных средств.
	СписокВычитаемыхСтрок = "6310, 6311, 6312, 6313, 6320, 6321, 6322, 6323, 6324, 6325, 6326, 6330, 6350, 6300";
	МассивВычитаемыхСтрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СписокВычитаемыхСтрок, ",");
	Для Каждого ВычитаемаяСтрока ИЗ МассивВычитаемыхСтрок Цикл
		ИменаПоказателейСоЗнакомПлюс.Добавить("П000100" + СокрЛП(ВычитаемаяСтрока) + "04");
		ИменаПоказателейСоЗнакомПлюс.Добавить("П000100" + СокрЛП(ВычитаемаяСтрока) + "05");
	КонецЦикла;
	
	// Виртуальные вычитаемые многострочные показатели, необходимые для представления
	// фиксированных и вписываемых дополнительных строк как единого массива строк.
	Если НЕ СтруктураРеквизитовФормы.ЭтоБалансНекоммерческойОрганизации Тогда
		ИменаПоказателейСоЗнакомПлюс.Добавить("П200100132004");
		ИменаПоказателейСоЗнакомПлюс.Добавить("П200100132005");
		ИменаПоказателейСоЗнакомПлюс.Добавить("П200100132006");
	КонецЕсли;
	
	ИменаПоказателейСоЗнакомПлюс.Добавить("П200100212004");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П200100212005");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П200100221004");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П200100221005");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П200100222004");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П200100222005");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П200100233004");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П200100233005");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П200100235004");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П200100235005");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П200100241004");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П200100241005");
	
	Возврат ИменаПоказателейСоЗнакомПлюс;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////

&НаСервере
Процедура ЗаполнитьСведенияПодписантов(ПараметрыВыгрузки)
	
	Титульный = мДанныеОтчета.ПолеТабличногоДокументаБаланс;
	
	Если СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания >= '2013-01-01' Тогда
		
		// Форматы выгрузки 5.06, 5.05.
		КодНО = СокрЛП(СтруктураРеквизитовФормы.Организация.КодНалоговогоОргана);
		КПП = СокрЛП(СтруктураРеквизитовФормы.Организация.КПП);
		
		СведенияОПредставителе = РегламентированнаяОтчетностьВызовСервера.ПолучитьПоКодамСведенияОПредставителе(СтруктураРеквизитовФормы.Организация, КодНО, КПП);
		
		ТипПодписанта = СведенияОПредставителе.ТипПодписанта;
		
		Если ТипПодписанта = "1" Тогда
			// Руководитель организации.
			ПараметрыВыгрузки.Вставить("ПрПодп", "1");
			
			ФИОРук = РегламентированнаяОтчетность.РазложитьФИО(Титульный.ОргДиректор);
			ПараметрыВыгрузки.Вставить("ПодпФамилия",  СокрЛП(ФИОРук.Фамилия));
			ПараметрыВыгрузки.Вставить("ПодпИмя",      СокрЛП(ФИОРук.Имя));
			ПараметрыВыгрузки.Вставить("ПодпОтчество", СокрЛП(ФИОРук.Отчество));
			
			ПараметрыВыгрузки.Вставить("ПодпНаимДок", "");
		Иначе
			// Уполномоченный представитель.
			ПараметрыВыгрузки.Вставить("ПрПодп", "2");
			
			ФИОПредставителя = РегламентированнаяОтчетность.РазложитьФИО(СведенияОПредставителе.ФИОПредставителя);
			ПараметрыВыгрузки.Вставить("ПодпФамилия",  СокрЛП(ФИОПредставителя.Фамилия));
			ПараметрыВыгрузки.Вставить("ПодпИмя",      СокрЛП(ФИОПредставителя.Имя));
			ПараметрыВыгрузки.Вставить("ПодпОтчество", СокрЛП(ФИОПредставителя.Отчество));
			
			ПараметрыВыгрузки.Вставить("ПодпНаимДок", СведенияОПредставителе.ДокументПредставителя);
			
		КонецЕсли;
		
	Иначе
		// Форматы выгрузки 5.04, 5.02.
		ФИОРук = РегламентированнаяОтчетность.РазложитьФИО(Титульный.ОргДиректор);
		ПараметрыВыгрузки.Вставить("ФамилияРук",  СокрЛП(ФИОРук.Фамилия));
		ПараметрыВыгрузки.Вставить("ИмяРук",      СокрЛП(ФИОРук.Имя));
		ПараметрыВыгрузки.Вставить("ОтчествоРук", СокрЛП(ФИОРук.Отчество));
		
		ВыгружатьСведенияБухгалтера = (СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания < '2012-12-01');
		Если ВыгружатьСведенияБухгалтера Тогда
			ФИОБух = РегламентированнаяОтчетность.РазложитьФИО(Титульный.ОргБухгалтер);
			ПараметрыВыгрузки.Вставить("КодПодписантаБух", "4");
			ПараметрыВыгрузки.Вставить("ФамилияБух",  СокрЛП(ФИОБух.Фамилия));
			ПараметрыВыгрузки.Вставить("ИмяБух",      СокрЛП(ФИОБух.Имя));
			ПараметрыВыгрузки.Вставить("ОтчествоБух", СокрЛП(ФИОБух.Отчество));
		Иначе
			ПараметрыВыгрузки.Вставить("КодПодписантаБух", "");
			ПараметрыВыгрузки.Вставить("ФамилияБух",  "");
			ПараметрыВыгрузки.Вставить("ИмяБух",      "");
			ПараметрыВыгрузки.Вставить("ОтчествоБух", "");
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция МногострочнаяЧастьЗаполненаПравильно(ДанныеОтчета, МногострочнаяЧасть, ГрафаИмени, ГрафыЗначений, СообщениеОбОшибке, ПараметрыВыгрузки)
	
	Перем НаименованиеСтроки;
	
	РезультатПроверки = Истина;
	
	ИмяПоказателяНаименования = "";
	ИменаЧисловыхПоказателей = Новый Массив;
	
	Для Каждого Колонка Из МногострочнаяЧасть.Состав.Колонки Цикл
		ИмяКолонки = Колонка.Имя;
		
		Если СтрДлина(ИмяКолонки) = 13 И Лев(ИмяКолонки, 1) = "П" Тогда
			НомерГрафы = Прав(ИмяКолонки, 2);
			Если НомерГрафы = ГрафаИмени Тогда
				ИмяПоказателяНаименования = ИмяКолонки;
			ИначеЕсли СтрНайти(ГрафыЗначений, НомерГрафы) > 0 Тогда
				ИменаЧисловыхПоказателей.Добавить(ИмяКолонки);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	НомерСтроки = 1;
	
	Пока ДанныеОтчета.Свойство(ИмяПоказателяНаименования + "_" + СтрокаЧГ0(НомерСтроки), НаименованиеСтроки) Цикл
		Если ПустаяСтрока(НаименованиеСтроки) Тогда
			ЗаполненыЧисловыеПоказатели = Ложь;
			Для Каждого ИмяЧисловогоПоказателя Из ИменаЧисловыхПоказателей Цикл
				ЗначениеПоказателя = ДанныеОтчета[ИмяЧисловогоПоказателя + "_" + СтрокаЧГ0(НомерСтроки)];
				ЗначениеПоказателя = ЗначениеПериведенноеКЕдиницеИзмерения(ЗначениеПоказателя, ПараметрыВыгрузки);
				Если ЗначениеЗаполнено(ЗначениеПоказателя) Тогда
					ЗаполненыЧисловыеПоказатели = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если ЗаполненыЧисловыеПоказатели Тогда
				ИмяОтчета = Сред(МногострочнаяЧасть.ИмяПоляТабличногоДокумента, СтрДлина("ПолеТабличногоДокумента") + 1);
				
				ПолноеИмяПоказателяНаименования = ИмяПоказателяНаименования + "_" + СтрокаЧГ0(НомерСтроки);
				СообщитьВТаблицуСообщений(ЭтаФорма, СообщениеОбОшибке, ИмяОтчета, ПолноеИмяПоказателяНаименования);
				РезультатПроверки = Ложь;
			КонецЕсли;
		КонецЕсли;
		
		НомерСтроки = НомерСтроки + 1;
	КонецЦикла;
	
	Возврат РезультатПроверки;
	
КонецФункции

&НаСервере
Функция ВерсияФормата(ДатаДействия)
	
	Если ДатаДействия >= '2015-01-01' Тогда
		ВерсияФормата = "5.06";
	ИначеЕсли ДатаДействия >= '2013-12-01' Тогда
		ВерсияФормата = "5.05";
	ИначеЕсли ДатаДействия >= '2012-01-01' Тогда
		ВерсияФормата = "5.04";
	Иначе
		ВерсияФормата = "5.02";
	КонецЕсли;
	
	Возврат ВерсияФормата;
	
КонецФункции

&НаСервере
Функция РазделВключенВОтчет(ИмяРаздела, Знач СписокРазделов = Неопределено)
	
	Если СписокРазделов = Неопределено Тогда
		СписокРазделов = ДанныеФормыВЗначение(мДеревоВыбранныхСтраниц, Тип("ДеревоЗначений"));
	КонецЕсли;
	
	Результат = Ложь;
	
	НайденнаяСтраницаОтчета = СписокРазделов.Строки.Найти(ИмяРаздела, "ИмяСтраницы");
	
	Если НайденнаяСтраницаОтчета <> Неопределено Тогда
		Результат = (НайденнаяСтраницаОтчета.ПоказатьСтраницу = 1);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ СТЫКОВКИ С СЕРВИСОМ СДАЧИ ОТЧЕТНОСТИ ЧЕРЕЗ ПРЕДСТАВИТЕЛЯ

&НаСервере
Процедура ДобавитьВиртуальныеСтрокиРасшифровкиБаланс2011(Раздел, ДанныеРаздела, СоставДополнительныхСтрок, ПрименяетсяЕНВД)
	
	ПолучитьДеревоНастроекСоставаДопСтрок("Баланс");
	ДеревоНастройкиСостава = ДеревоНастроекБаланс;
	
	// Строки расшифровки строки 1110.
	ПрефиксВиртуальнойСтроки  = "П2001001110";
	ПрефиксМногострочнойЧасти = "П0001011199";
	СписокФиксированныхСтрок = Новый СписокЗначений;
	СписокФиксированныхСтрок.Добавить("11101", "Нематериальные активы в организации");
	СписокФиксированныхСтрок.Добавить("11102", "Приобретение нематериальных активов");
	ВнестиВиртуальныеСтрокиРасшифровкиБаланс(ДанныеРаздела, ДеревоНастройкиСостава, ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
	
	// Строки расшифровки строки 1120.
	ПрефиксВиртуальнойСтроки  = "П2001001120";
	ПрефиксМногострочнойЧасти = "П0001011299";
	СписокФиксированныхСтрок = Новый СписокЗначений;
	СписокФиксированныхСтрок.Добавить("11201", "Расходы на научно-исследовательские, опытно-конструкторские и технологические работы");
	СписокФиксированныхСтрок.Добавить("11202", "Выполнение научно-исследовательских, опытно-конструкторских и технологических работ");
	ВнестиВиртуальныеСтрокиРасшифровкиБаланс(ДанныеРаздела, ДеревоНастройкиСостава, ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
	
	// Строки расшифровки строки 1130.
	ПрефиксВиртуальнойСтроки  = "П2001001130";
	ПрефиксМногострочнойЧасти = "П0001011399";
	СписокФиксированныхСтрок = Новый СписокЗначений;
	СписокФиксированныхСтрок.Добавить("11301", "Основные средства в организации");
	СписокФиксированныхСтрок.Добавить("11302", "Объекты недвижимости, права собственности на которые не зарегистрированы");
	СписокФиксированныхСтрок.Добавить("11303", "Оборудование к установке");
	СписокФиксированныхСтрок.Добавить("11304", "Приобретение земельных участков");
	СписокФиксированныхСтрок.Добавить("11305", "Приобретение объектов природопользования");
	СписокФиксированныхСтрок.Добавить("11306", "Строительство объектов основных средств");
	СписокФиксированныхСтрок.Добавить("11307", "Приобретение объектов основных средств");
	СписокФиксированныхСтрок.Добавить("11308", "Расходы будущих периодов");
	ВнестиВиртуальныеСтрокиРасшифровкиБаланс(ДанныеРаздела, ДеревоНастройкиСостава, ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
	
	// Строки расшифровки строки 1140.
	ПрефиксВиртуальнойСтроки  = "П2001001140";
	ПрефиксМногострочнойЧасти = "П0001011499";
	СписокФиксированныхСтрок = Новый СписокЗначений;
	СписокФиксированныхСтрок.Добавить("11401", "Материальные ценности в организации");
	СписокФиксированныхСтрок.Добавить("11402", "Материальные ценности предоставленные во временное владение и пользование");
	СписокФиксированныхСтрок.Добавить("11403", "Материальные ценности предоставленные во временное пользование");
	СписокФиксированныхСтрок.Добавить("11404", "Прочие доходные вложения");
	ВнестиВиртуальныеСтрокиРасшифровкиБаланс(ДанныеРаздела, ДеревоНастройкиСостава, ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
	
	// Строки расшифровки строки 1150.
	ПрефиксВиртуальнойСтроки  = "П2001001150";
	ПрефиксМногострочнойЧасти = "П0001011599";
	СписокФиксированныхСтрок = Новый СписокЗначений;
	СписокФиксированныхСтрок.Добавить("11501", "Паи");
	ВнестиВиртуальныеСтрокиРасшифровкиБаланс(ДанныеРаздела, ДеревоНастройкиСостава, ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
	
	// Строки расшифровки строки 1160.
	ПрефиксВиртуальнойСтроки  = "П2001001160";
	ПрефиксМногострочнойЧасти = "П0001011699";
	СписокФиксированныхСтрок = Новый СписокЗначений;
	ВнестиВиртуальныеСтрокиРасшифровкиБаланс(ДанныеРаздела, ДеревоНастройкиСостава, ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
	
	// Строки расшифровки строки 1170.
	ПрефиксВиртуальнойСтроки  = "П2001001170";
	ПрефиксМногострочнойЧасти = "П0001011799";
	СписокФиксированныхСтрок = Новый СписокЗначений;
	СписокФиксированныхСтрок.Добавить("11701", "Перевод молодняка животных в основное стадо");
	СписокФиксированныхСтрок.Добавить("11702", "Приобретение взрослых животных");
	СписокФиксированныхСтрок.Добавить("11703", "Расходы будущих периодов");
	ВнестиВиртуальныеСтрокиРасшифровкиБаланс(ДанныеРаздела, ДеревоНастройкиСостава, ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
	
	// Строки расшифровки строки 1210
	ПрефиксВиртуальнойСтроки  = "П2001001210";
	ПрефиксМногострочнойЧасти = "П0001012199";
	СписокФиксированныхСтрок = Новый СписокЗначений;
	СписокФиксированныхСтрок.Добавить("12101", "Материалы");
	СписокФиксированныхСтрок.Добавить("12102", "Брак в производстве");
	СписокФиксированныхСтрок.Добавить("12103", "Товары отгруженные");
	СписокФиксированныхСтрок.Добавить("12104", "Товары");
	СписокФиксированныхСтрок.Добавить("12105", "Готовая продукция");
	СписокФиксированныхСтрок.Добавить("12106", "Расходы на продажу");
	СписокФиксированныхСтрок.Добавить("12107", "Выполненные этапы по незавершенным работам");
	СписокФиксированныхСтрок.Добавить("12108", "Основное производство");
	СписокФиксированныхСтрок.Добавить("12109", "Полуфабрикаты собственного производства");
	СписокФиксированныхСтрок.Добавить("12110", "Вспомогательные производства");
	СписокФиксированныхСтрок.Добавить("12111", "Обслуживающие производства и хозяйства");
	СписокФиксированныхСтрок.Добавить("12112", "Расходы будущих периодов");
	ВнестиВиртуальныеСтрокиРасшифровкиБаланс(ДанныеРаздела, ДеревоНастройкиСостава, ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
	
	// Строки расшифровки строки 1220
	ПрефиксВиртуальнойСтроки  = "П2001001220";
	ПрефиксМногострочнойЧасти = "П0001012299";
	СписокФиксированныхСтрок = Новый СписокЗначений;
	СписокФиксированныхСтрок.Добавить("12201", "НДС по приобретенным ОС");
	СписокФиксированныхСтрок.Добавить("12202", "НДС по приобретенным НМА");
	СписокФиксированныхСтрок.Добавить("12203", "НДС по приобретенным материально-производственным запасам");
	СписокФиксированныхСтрок.Добавить("12204", "НДС по приобретенным услугам");
	СписокФиксированныхСтрок.Добавить("12205", "НДС, уплаченный при ввозе товаров на территорию РФ");
	СписокФиксированныхСтрок.Добавить("12206", "НДС по товарам, реализованным по ставке 0% (экспорт)");
	СписокФиксированныхСтрок.Добавить("12207", "НДС при строительстве ОС");
	ВнестиВиртуальныеСтрокиРасшифровкиБаланс(ДанныеРаздела, ДеревоНастройкиСостава, ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
	
	// Строки расшифровки строки 1230
	ПрефиксВиртуальнойСтроки  = "П2001001230";
	ПрефиксМногострочнойЧасти = "П0001012399";
	СписокФиксированныхСтрок = Новый СписокЗначений;
	СписокФиксированныхСтрок.Добавить("12301", "Расчеты с поставщиками и подрядчиками");
	СписокФиксированныхСтрок.Добавить("12302", "Расчеты с покупателями и заказчиками");
	СписокФиксированныхСтрок.Добавить("12303", "Расчеты по налогам и сборам");
	СписокФиксированныхСтрок.Добавить("12304", "Расчеты по социальному страхованию и обеспечению");
	СписокФиксированныхСтрок.Добавить("12310", "Расчеты с персоналом по оплате труда");
	СписокФиксированныхСтрок.Добавить("12305", "Расчеты с подотчетными лицами");
	СписокФиксированныхСтрок.Добавить("12306", "Расчеты с персоналом по прочим операциям");
	СписокФиксированныхСтрок.Добавить("12307", "Расчеты по вкладам в уставный (складочный) капитал");
	СписокФиксированныхСтрок.Добавить("12308", "Расчеты с разными дебиторами и кредиторами");
	СписокФиксированныхСтрок.Добавить("12309", "Расходы будущих периодов");
	ВнестиВиртуальныеСтрокиРасшифровкиБаланс(ДанныеРаздела, ДеревоНастройкиСостава, ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
	
	// Строки расшифровки строки 1240
	ПрефиксВиртуальнойСтроки  = "П2001001240";
	ПрефиксМногострочнойЧасти = "П0001012499";
	СписокФиксированныхСтрок = Новый СписокЗначений;
	СписокФиксированныхСтрок.Добавить("12401", "Акции");
	СписокФиксированныхСтрок.Добавить("12402", "Долговые ценные бумаги");
	СписокФиксированныхСтрок.Добавить("12403", "Предоставленные займы");
	СписокФиксированныхСтрок.Добавить("12404", "Вклады по договору простого товарищества");
	СписокФиксированныхСтрок.Добавить("12405", "Приобретенные права в рамках оказания финансовых услуг");
	СписокФиксированныхСтрок.Добавить("12406", "Депозитные счета");
	СписокФиксированныхСтрок.Добавить("12407", "Депозитные счета (в валюте)");
	ВнестиВиртуальныеСтрокиРасшифровкиБаланс(ДанныеРаздела, ДеревоНастройкиСостава, ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
	
	// Строки расшифровки строки 1250
	ПрефиксВиртуальнойСтроки  = "П2001001250";
	ПрефиксМногострочнойЧасти = "П0001012599";
	СписокФиксированныхСтрок = Новый СписокЗначений;
	СписокФиксированныхСтрок.Добавить("12501", "Касса организации");
	СписокФиксированныхСтрок.Добавить("12502", "Операционная касса");
	СписокФиксированныхСтрок.Добавить("12503", "Касса организации (в валюте)");
	СписокФиксированныхСтрок.Добавить("12504", "Расчетные счета");
	СписокФиксированныхСтрок.Добавить("12505", "Валютные счета");
	СписокФиксированныхСтрок.Добавить("12506", "Аккредитивы");
	СписокФиксированныхСтрок.Добавить("12507", "Чековые книжки");
	СписокФиксированныхСтрок.Добавить("12508", "Прочие специальные счета");
	СписокФиксированныхСтрок.Добавить("12509", "Аккредитивы (в валюте)");
	СписокФиксированныхСтрок.Добавить("12510", "Прочие специальные счета (в валюте)");
	СписокФиксированныхСтрок.Добавить("12511", "Переводы в пути");
	ВнестиВиртуальныеСтрокиРасшифровкиБаланс(ДанныеРаздела, ДеревоНастройкиСостава, ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
	
	// Строки расшифровки строки 1260
	ПрефиксВиртуальнойСтроки  = "П2001001260";
	ПрефиксМногострочнойЧасти = "П0001012699";
	СписокФиксированныхСтрок = Новый СписокЗначений;
	СписокФиксированныхСтрок.Добавить("12601", "Акцизы по оплаченным материальным ценностям");
	СписокФиксированныхСтрок.Добавить("12602", "Денежные документы");
	СписокФиксированныхСтрок.Добавить("12603", "Денежные документы (в валюте)");
	СписокФиксированныхСтрок.Добавить("12604", "НДС по экспорту к возмещению");
	СписокФиксированныхСтрок.Добавить("12605", "НДС по авансам и предоплатам");
	СписокФиксированныхСтрок.Добавить("12606", "НДС, начисленный по отгрузке");
	СписокФиксированныхСтрок.Добавить("12607", "Расчеты по НДС при исполнении обязанностей налогового агента");
	СписокФиксированныхСтрок.Добавить("12608", "Расходы будущих периодов");
	СписокФиксированныхСтрок.Добавить("12609", "Недостачи и потери от порчи ценностей");
	СписокФиксированныхСтрок.Добавить("12610", "Оценочные обязательства");
	ВнестиВиртуальныеСтрокиРасшифровкиБаланс(ДанныеРаздела, ДеревоНастройкиСостава, ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
	
	// Строки расшифровки строки 1310
	ПрефиксВиртуальнойСтроки  = "П2001001310";
	ПрефиксМногострочнойЧасти = "П0001013199";
	СписокФиксированныхСтрок = Новый СписокЗначений;
	ВнестиВиртуальныеСтрокиРасшифровкиБаланс(ДанныеРаздела, ДеревоНастройкиСостава, ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
	
	// Строки расшифровки строки 1320
	ПрефиксВиртуальнойСтроки  = "П2001001320";
	ПрефиксМногострочнойЧасти = "П0001013299";
	СписокФиксированныхСтрок = Новый СписокЗначений;
	ВнестиВиртуальныеСтрокиРасшифровкиБаланс(ДанныеРаздела, ДеревоНастройкиСостава, ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
	
	// Строки расшифровки строки 1340
	Если НЕ СтруктураРеквизитовФормы.ЭтоБалансНекоммерческойОрганизации Тогда
		ПрефиксВиртуальнойСтроки  = "П2001001340";
		ПрефиксМногострочнойЧасти = "П0001013499";
		СписокФиксированныхСтрок = Новый СписокЗначений;
		СписокФиксированныхСтрок.Добавить("13401", "Переоценка основных средств");
		СписокФиксированныхСтрок.Добавить("13402", "Переоценка НМА");
		СписокФиксированныхСтрок.Добавить("13403", "Переоценка прочих внеоборотных активов");
		ВнестиВиртуальныеСтрокиРасшифровкиБаланс(ДанныеРаздела, ДеревоНастройкиСостава, ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
	КонецЕсли;
	
	// Строки расшифровки строки 1350
	ПрефиксВиртуальнойСтроки  = "П2001001350";
	ПрефиксМногострочнойЧасти = "П0001013599";
	СписокФиксированныхСтрок = Новый СписокЗначений;
	ВнестиВиртуальныеСтрокиРасшифровкиБаланс(ДанныеРаздела, ДеревоНастройкиСостава, ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
	
	// Строки расшифровки строки 1360
	ПрефиксВиртуальнойСтроки  = "П2001001360";
	ПрефиксМногострочнойЧасти = "П0001013699";
	СписокФиксированныхСтрок = Новый СписокЗначений;
	Если НЕ СтруктураРеквизитовФормы.ЭтоБалансНекоммерческойОрганизации Тогда
		СписокФиксированныхСтрок.Добавить("13601", "Резервы, образованные в соответствии с законодательством");
		СписокФиксированныхСтрок.Добавить("13602", "Резервы, образованные в соответствии с учредительными документами");
	КонецЕсли;
	ВнестиВиртуальныеСтрокиРасшифровкиБаланс(ДанныеРаздела, ДеревоНастройкиСостава, ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
	
	// Строки расшифровки строки 1370
	ПрефиксВиртуальнойСтроки  = "П2001001370";
	ПрефиксМногострочнойЧасти = "П0001013799";
	СписокФиксированныхСтрок = Новый СписокЗначений;
	ВнестиВиртуальныеСтрокиРасшифровкиБаланс(ДанныеРаздела, ДеревоНастройкиСостава, ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
	
	// Строки расшифровки строки 1410
	ПрефиксВиртуальнойСтроки  = "П2001001410";
	ПрефиксМногострочнойЧасти = "П0001014199";
	СписокФиксированныхСтрок = Новый СписокЗначений;
	СписокФиксированныхСтрок.Добавить("14101", "Долгосрочные кредиты");
	СписокФиксированныхСтрок.Добавить("14102", "Долгосрочные займы");
	СписокФиксированныхСтрок.Добавить("14103", "Долгосрочные кредиты (в валюте)");
	СписокФиксированныхСтрок.Добавить("14104", "Долгосрочные займы (в валюте)");
	ВнестиВиртуальныеСтрокиРасшифровкиБаланс(ДанныеРаздела, ДеревоНастройкиСостава, ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
	
	// Строки расшифровки строки 1420
	ПрефиксВиртуальнойСтроки  = "П2001001420";
	ПрефиксМногострочнойЧасти = "П0001014299";
	СписокФиксированныхСтрок = Новый СписокЗначений;
	ВнестиВиртуальныеСтрокиРасшифровкиБаланс(ДанныеРаздела, ДеревоНастройкиСостава, ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
	
	// Строки расшифровки строки 1450
	ПрефиксВиртуальнойСтроки  = "П2001001450";
	ПрефиксМногострочнойЧасти = "П0001014599";
	СписокФиксированныхСтрок = Новый СписокЗначений;
	ВнестиВиртуальныеСтрокиРасшифровкиБаланс(ДанныеРаздела, ДеревоНастройкиСостава, ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
	
	// Строки расшифровки строки 1510
	ПрефиксВиртуальнойСтроки  = "П2001001510";
	ПрефиксМногострочнойЧасти = "П0001015199";
	СписокФиксированныхСтрок = Новый СписокЗначений;
	СписокФиксированныхСтрок.Добавить("15101", "Краткосрочные кредиты");
	СписокФиксированныхСтрок.Добавить("15102", "Краткосрочные займы");
	СписокФиксированныхСтрок.Добавить("15103", "Проценты по краткосрочным кредитам");
	СписокФиксированныхСтрок.Добавить("15104", "Проценты по долгосрочным кредитам");
	СписокФиксированныхСтрок.Добавить("15105", "Проценты по краткосрочным займам");
	СписокФиксированныхСтрок.Добавить("15106", "Проценты по долгосрочным займам");
	СписокФиксированныхСтрок.Добавить("15107", "Краткосрочные кредиты (в валюте)");
	СписокФиксированныхСтрок.Добавить("15108", "Краткосрочные займы (в валюте)");
	СписокФиксированныхСтрок.Добавить("15109", "Проценты по краткосрочным кредитам (в валюте)");
	СписокФиксированныхСтрок.Добавить("15110", "Проценты по долгосрочным кредитам (в валюте)");
	СписокФиксированныхСтрок.Добавить("15111", "Проценты по краткосрочным займам (в валюте)");
	СписокФиксированныхСтрок.Добавить("15112", "Проценты по долгосрочным займам (в валюте)");
	ВнестиВиртуальныеСтрокиРасшифровкиБаланс(ДанныеРаздела, ДеревоНастройкиСостава, ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
	
	// Строки расшифровки строки 1520
	ПрефиксВиртуальнойСтроки  = "П2001001520";
	ПрефиксМногострочнойЧасти = "П0001015299";
	СписокФиксированныхСтрок = Новый СписокЗначений;
	СписокФиксированныхСтрок.Добавить("15201", "Расчеты с поставщиками и подрядчиками");
	СписокФиксированныхСтрок.Добавить("15202", "Расчеты с покупателями и заказчиками");
	СписокФиксированныхСтрок.Добавить("15203", "Расчеты по налогам и сборам");
	СписокФиксированныхСтрок.Добавить("15204", "Расчеты по социальному страхованию и обеспечению");
	СписокФиксированныхСтрок.Добавить("15205", "Расчеты с персоналом по оплате труда");
	СписокФиксированныхСтрок.Добавить("15206", "Расчеты с подотчетными лицами");
	СписокФиксированныхСтрок.Добавить("15207", "Задолженность участникам (учредителям) по выплате доходов");
	СписокФиксированныхСтрок.Добавить("15208", "Расчеты с разными дебиторами и кредиторами");
	СписокФиксированныхСтрок.Добавить("15209", "Расчеты с персоналом по прочим операциям");
	ВнестиВиртуальныеСтрокиРасшифровкиБаланс(ДанныеРаздела, ДеревоНастройкиСостава, ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
	
	// Строки расшифровки строки 1530
	ПрефиксВиртуальнойСтроки  = "П2001001530";
	ПрефиксМногострочнойЧасти = "П0001015399";
	СписокФиксированныхСтрок = Новый СписокЗначений;
	Если НЕ СтруктураРеквизитовФормы.ЭтоБалансНекоммерческойОрганизации Тогда
		СписокФиксированныхСтрок.Добавить("15301", "Целевое финансирование");
	КонецЕсли;
	СписокФиксированныхСтрок.Добавить("15302", "Доходы, полученные в счет будущих периодов");
	СписокФиксированныхСтрок.Добавить("15303", "Безвозмездные поступления");
	СписокФиксированныхСтрок.Добавить("15304", "Предстоящие поступления по недостачам, выявленным за прошлые годы");
	СписокФиксированныхСтрок.Добавить("15305", "Разница между суммой, подлежащей взысканию с виновных лиц, и балансовой стоимостью по недостачам ценностей");
	ВнестиВиртуальныеСтрокиРасшифровкиБаланс(ДанныеРаздела, ДеревоНастройкиСостава, ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
	
	// Строки расшифровки строки 1550
	ПрефиксВиртуальнойСтроки  = "П2001001550";
	ПрефиксМногострочнойЧасти = "П0001015599";
	СписокФиксированныхСтрок = Новый СписокЗначений;
	ВнестиВиртуальныеСтрокиРасшифровкиБаланс(ДанныеРаздела, ДеревоНастройкиСостава, ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьВиртуальныеСтрокиРасшифровкиБаланс2012(Раздел, ДанныеРаздела, СоставДополнительныхСтрок, ПрименяетсяЕНВД)
	
	СтрокаОтраженияСчета76_АВ = "1260";
	СтрокаОтраженияСчета76_ВА = "1550";
	СтрокаОтраженияСчета46 = "1210";
	СтрокаОтраженияСчета96 = "1260";
	
	Если СтруктураОтчета.Баланс.ИмяМакета = "Баланс_2012Кв4"
	 ИЛИ СтруктураОтчета.Баланс.ИмяМакета = "БалансНКО_2012Кв4" Тогда
		СтрокаОтраженияСчета46 = "1260";
	КонецЕсли;
	
	Если СтруктураОтчета.Баланс.ИмяМакета = "Баланс_2012Кв4_2"
	 ИЛИ СтруктураОтчета.Баланс.ИмяМакета = "БалансНКО_2012Кв4_2"
	 ИЛИ СтруктураОтчета.Баланс.ИмяМакета = "Баланс_2012Кв4_3"
	 ИЛИ СтруктураОтчета.Баланс.ИмяМакета = "БалансНКО_2012Кв4_3" Тогда
		СтрокаОтраженияСчета46 = "1230";
		СтрокаОтраженияСчета96 = "1230";
	КонецЕсли;				   
	
	Если СтруктураОтчета.Баланс.ИмяМакета = "Баланс_2012Кв4_3"
	 ИЛИ СтруктураОтчета.Баланс.ИмяМакета = "БалансНКО_2012Кв4_3" Тогда
		СтрокаОтраженияСчета76_АВ = "1520";
		СтрокаОтраженияСчета76_ВА = "1230";
	КонецЕсли;
	
	ПолучитьДеревоНастроекСоставаДопСтрок("Баланс");
	ДеревоНастройкиСостава = ДеревоНастроекБаланс;
	
	// Строки расшифровки строки 1110.
	ПрефиксВиртуальнойСтроки  = "П2001001110";
	ПрефиксМногострочнойЧасти = "П1001001110";
	СписокФиксированныхСтрок = Новый СписокЗначений;
	СписокФиксированныхСтрок.Добавить("11101", "Нематериальные активы в организации");
	СписокФиксированныхСтрок.Добавить("11102", "Приобретение нематериальных активов");
	ВнестиВиртуальныеСтрокиРасшифровкиБаланс(ДанныеРаздела, ДеревоНастройкиСостава, ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
	
	// Строки расшифровки строки 1120.
	ПрефиксВиртуальнойСтроки  = "П2001001120";
	ПрефиксМногострочнойЧасти = "П1001001120";
	СписокФиксированныхСтрок = Новый СписокЗначений;
	СписокФиксированныхСтрок.Добавить("11201", "Расходы на научно-исследовательские, опытно-конструкторские и технологические работы");
	СписокФиксированныхСтрок.Добавить("11202", "Выполнение научно-исследовательских, опытно-конструкторских и технологических работ");
	ВнестиВиртуальныеСтрокиРасшифровкиБаланс(ДанныеРаздела, ДеревоНастройкиСостава, ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
	
	// Строки расшифровки строки 1130.
	ПрефиксВиртуальнойСтроки  = "П2001001130";
	ПрефиксМногострочнойЧасти = "П1001001130";
	СписокФиксированныхСтрок = Новый СписокЗначений;
	ВнестиВиртуальныеСтрокиРасшифровкиБаланс(ДанныеРаздела, ДеревоНастройкиСостава, ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
	
	// Строки расшифровки строки 1140.
	ПрефиксВиртуальнойСтроки  = "П2001001140";
	ПрефиксМногострочнойЧасти = "П1001001140";
	СписокФиксированныхСтрок = Новый СписокЗначений;
	ВнестиВиртуальныеСтрокиРасшифровкиБаланс(ДанныеРаздела, ДеревоНастройкиСостава, ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
	
	// Строки расшифровки строки 1150.
	ПрефиксВиртуальнойСтроки  = "П2001001150";
	ПрефиксМногострочнойЧасти = "П1001001150";
	СписокФиксированныхСтрок = Новый СписокЗначений;
	СписокФиксированныхСтрок.Добавить("11501", "Основные средства в организации");
	СписокФиксированныхСтрок.Добавить("11502", "Объекты недвижимости, права собственности на которые не зарегистрированы");
	СписокФиксированныхСтрок.Добавить("11503", "Оборудование к установке");
	СписокФиксированныхСтрок.Добавить("11504", "Приобретение земельных участков");
	СписокФиксированныхСтрок.Добавить("11505", "Приобретение объектов природопользования");
	СписокФиксированныхСтрок.Добавить("11506", "Строительство объектов основных средств");
	СписокФиксированныхСтрок.Добавить("11507", "Приобретение объектов основных средств");
	СписокФиксированныхСтрок.Добавить("11508", "Расходы будущих периодов");
	Если СтруктураОтчета.Баланс.ИмяМакета = "Баланс_2012Кв4_3"
 	 ИЛИ СтруктураОтчета.Баланс.ИмяМакета = "БалансНКО_2012Кв4_3" Тогда
		СписокФиксированныхСтрок.Добавить("11509", "Арендованное имущество");
	КонецЕсли;	
	ВнестиВиртуальныеСтрокиРасшифровкиБаланс(ДанныеРаздела, ДеревоНастройкиСостава, ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
	
	// Строки расшифровки строки 1160.
	ПрефиксВиртуальнойСтроки  = "П2001001160";
	ПрефиксМногострочнойЧасти = "П1001001160";
	СписокФиксированныхСтрок = Новый СписокЗначений;
	СписокФиксированныхСтрок.Добавить("11601", "Материальные ценности в организации");
	СписокФиксированныхСтрок.Добавить("11602", "Материальные ценности предоставленные во временное владение и пользование");
	СписокФиксированныхСтрок.Добавить("11603", "Материальные ценности предоставленные во временное пользование");
	СписокФиксированныхСтрок.Добавить("11604", "Прочие доходные вложения");
	ВнестиВиртуальныеСтрокиРасшифровкиБаланс(ДанныеРаздела, ДеревоНастройкиСостава, ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
	
	// Строки расшифровки строки 1170.
	ПрефиксВиртуальнойСтроки  = "П2001001170";
	ПрефиксМногострочнойЧасти = "П1001001170";
	СписокФиксированныхСтрок = Новый СписокЗначений;
	СписокФиксированныхСтрок.Добавить("11701", "Паи");
	ВнестиВиртуальныеСтрокиРасшифровкиБаланс(ДанныеРаздела, ДеревоНастройкиСостава, ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
	
	// Строки расшифровки строки 1180.
	ПрефиксВиртуальнойСтроки  = "П2001001180";
	ПрефиксМногострочнойЧасти = "П1001001180";
	СписокФиксированныхСтрок = Новый СписокЗначений;
	ВнестиВиртуальныеСтрокиРасшифровкиБаланс(ДанныеРаздела, ДеревоНастройкиСостава, ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
	
	// Строки расшифровки строки 1190.
	ПрефиксВиртуальнойСтроки  = "П2001001190";
	ПрефиксМногострочнойЧасти = "П1001001190";
	СписокФиксированныхСтрок = Новый СписокЗначений;
	СписокФиксированныхСтрок.Добавить("11901", "Перевод молодняка животных в основное стадо");
	СписокФиксированныхСтрок.Добавить("11902", "Приобретение взрослых животных");
	СписокФиксированныхСтрок.Добавить("11903", "Расходы будущих периодов");
	ВнестиВиртуальныеСтрокиРасшифровкиБаланс(ДанныеРаздела, ДеревоНастройкиСостава, ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
	
	// Строки расшифровки строки 1210
	ПрефиксВиртуальнойСтроки  = "П2001001210";
	ПрефиксМногострочнойЧасти = "П1001001210";
	СписокФиксированныхСтрок = Новый СписокЗначений;
	СписокФиксированныхСтрок.Добавить("12101", "Материалы");
	СписокФиксированныхСтрок.Добавить("12102", "Брак в производстве");
	СписокФиксированныхСтрок.Добавить("12103", "Товары отгруженные");
	СписокФиксированныхСтрок.Добавить("12104", "Товары");
	СписокФиксированныхСтрок.Добавить("12105", "Готовая продукция");
	СписокФиксированныхСтрок.Добавить("12106", "Расходы на продажу");
	Если СтрокаОтраженияСчета46 = "1210" Тогда	
		СписокФиксированныхСтрок.Добавить("12107", "Выполненные этапы по незавершенным работам");
	КонецЕсли;
	СписокФиксированныхСтрок.Добавить("12108", "Основное производство");
	СписокФиксированныхСтрок.Добавить("12109", "Полуфабрикаты собственного производства");
	СписокФиксированныхСтрок.Добавить("12110", "Вспомогательные производства");
	СписокФиксированныхСтрок.Добавить("12111", "Обслуживающие производства и хозяйства");
	СписокФиксированныхСтрок.Добавить("12112", "Расходы будущих периодов");
	ВнестиВиртуальныеСтрокиРасшифровкиБаланс(ДанныеРаздела, ДеревоНастройкиСостава, ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
	
	// Строки расшифровки строки 1220
	ПрефиксВиртуальнойСтроки  = "П2001001220";
	ПрефиксМногострочнойЧасти = "П1001001220";
	СписокФиксированныхСтрок = Новый СписокЗначений;
	СписокФиксированныхСтрок.Добавить("12201", "НДС по приобретенным ОС");
	СписокФиксированныхСтрок.Добавить("12202", "НДС по приобретенным НМА");
	СписокФиксированныхСтрок.Добавить("12203", "НДС по приобретенным материально-производственным запасам");
	СписокФиксированныхСтрок.Добавить("12204", "НДС по приобретенным услугам");
	СписокФиксированныхСтрок.Добавить("12205", "НДС, уплаченный при ввозе товаров на территорию РФ");
	СписокФиксированныхСтрок.Добавить("12206", "НДС по товарам, реализованным по ставке 0% (экспорт)");
	СписокФиксированныхСтрок.Добавить("12207", "НДС при строительстве ОС");
	ВнестиВиртуальныеСтрокиРасшифровкиБаланс(ДанныеРаздела, ДеревоНастройкиСостава, ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
	
	// Строки расшифровки строки 1230
	ПрефиксВиртуальнойСтроки  = "П2001001230";
	ПрефиксМногострочнойЧасти = "П1001001230";
	СписокФиксированныхСтрок = Новый СписокЗначений;
	СписокФиксированныхСтрок.Добавить("12301", "Расчеты с поставщиками и подрядчиками");
	СписокФиксированныхСтрок.Добавить("12302", "Расчеты с покупателями и заказчиками");
	СписокФиксированныхСтрок.Добавить("12303", "Расчеты по налогам и сборам");
	СписокФиксированныхСтрок.Добавить("12304", "Расчеты по социальному страхованию и обеспечению");
	СписокФиксированныхСтрок.Добавить("12310", "Расчеты с персоналом по оплате труда");
	СписокФиксированныхСтрок.Добавить("12305", "Расчеты с подотчетными лицами");
	СписокФиксированныхСтрок.Добавить("12306", "Расчеты с персоналом по прочим операциям");
	СписокФиксированныхСтрок.Добавить("12307", "Расчеты по вкладам в уставный (складочный) капитал");
	СписокФиксированныхСтрок.Добавить("12308", "Расчеты с разными дебиторами и кредиторами");
	СписокФиксированныхСтрок.Добавить("12309", "Расходы будущих периодов");
	Если СтрокаОтраженияСчета46 = "1230" Тогда
		СписокФиксированныхСтрок.Добавить("12311", "Выполненные этапы по незавершенным работам");
	КонецЕсли;
	Если СтрокаОтраженияСчета96 = "1230" Тогда
		СписокФиксированныхСтрок.Добавить("12312", "Оценочные обязательства");
	КонецЕсли;
	ВнестиВиртуальныеСтрокиРасшифровкиБаланс(ДанныеРаздела, ДеревоНастройкиСостава, ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
	
	// Строки расшифровки строки 1240
	ПрефиксВиртуальнойСтроки  = "П2001001240";
	ПрефиксМногострочнойЧасти = "П1001001240";
	СписокФиксированныхСтрок = Новый СписокЗначений;
	СписокФиксированныхСтрок.Добавить("12401", "Акции");
	СписокФиксированныхСтрок.Добавить("12402", "Долговые ценные бумаги");
	СписокФиксированныхСтрок.Добавить("12403", "Предоставленные займы");
	СписокФиксированныхСтрок.Добавить("12404", "Вклады по договору простого товарищества");
	СписокФиксированныхСтрок.Добавить("12405", "Приобретенные права в рамках оказания финансовых услуг");
	СписокФиксированныхСтрок.Добавить("12406", "Депозитные счета");
	СписокФиксированныхСтрок.Добавить("12407", "Депозитные счета (в валюте)");
	ВнестиВиртуальныеСтрокиРасшифровкиБаланс(ДанныеРаздела, ДеревоНастройкиСостава, ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
	
	// Строки расшифровки строки 1250
	ПрефиксВиртуальнойСтроки  = "П2001001250";
	ПрефиксМногострочнойЧасти = "П1001001250";
	СписокФиксированныхСтрок = Новый СписокЗначений;
	СписокФиксированныхСтрок.Добавить("12501", "Касса организации");
	СписокФиксированныхСтрок.Добавить("12502", "Операционная касса");
	СписокФиксированныхСтрок.Добавить("12503", "Касса организации (в валюте)");
	СписокФиксированныхСтрок.Добавить("12512", "Касса по деятельности платежного агента");
	СписокФиксированныхСтрок.Добавить("12504", "Расчетные счета");
	СписокФиксированныхСтрок.Добавить("12505", "Валютные счета");
	СписокФиксированныхСтрок.Добавить("12506", "Аккредитивы");
	СписокФиксированныхСтрок.Добавить("12507", "Чековые книжки");
	СписокФиксированныхСтрок.Добавить("12508", "Прочие специальные счета");
	СписокФиксированныхСтрок.Добавить("12509", "Аккредитивы (в валюте)");
	СписокФиксированныхСтрок.Добавить("12510", "Прочие специальные счета (в валюте)");
	СписокФиксированныхСтрок.Добавить("12511", "Переводы в пути");
	ВнестиВиртуальныеСтрокиРасшифровкиБаланс(ДанныеРаздела, ДеревоНастройкиСостава, ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
	
	// Строки расшифровки строки 1260
	ПрефиксВиртуальнойСтроки  = "П2001001260";
	ПрефиксМногострочнойЧасти = "П1001001260";
	СписокФиксированныхСтрок = Новый СписокЗначений;
	СписокФиксированныхСтрок.Добавить("12601", "Акцизы по оплаченным материальным ценностям");
	СписокФиксированныхСтрок.Добавить("12602", "Денежные документы");
	СписокФиксированныхСтрок.Добавить("12603", "Денежные документы (в валюте)");
	СписокФиксированныхСтрок.Добавить("12604", "НДС по экспорту к возмещению");
	Если СтрокаОтраженияСчета76_АВ = "1260" Тогда
		СписокФиксированныхСтрок.Добавить("12605", "НДС по авансам и предоплатам");
	КонецЕсли;
	СписокФиксированныхСтрок.Добавить("12606", "НДС, начисленный по отгрузке");
	СписокФиксированныхСтрок.Добавить("12607", "Расчеты по НДС при исполнении обязанностей налогового агента");
	СписокФиксированныхСтрок.Добавить("12608", "Расходы будущих периодов");
	СписокФиксированныхСтрок.Добавить("12609", "Недостачи и потери от порчи ценностей");
	Если СтруктураОтчета.Баланс.ИмяМакета = "Баланс_2012Кв4_3"
     ИЛИ СтруктураОтчета.Баланс.ИмяМакета = "БалансНКО_2012Кв4_3" Тогда
		СписокФиксированныхСтрок.Добавить("12610", "НДС по арендным обязательствам");
	КонецЕсли;	
	Если СтрокаОтраженияСчета96 = "1260" Тогда	
		СписокФиксированныхСтрок.Добавить("12610", "Оценочные обязательства");
	КонецЕсли;
	Если СтрокаОтраженияСчета46 = "1260" Тогда	
		СписокФиксированныхСтрок.Добавить("12611", "Выполненные этапы по незавершенным работам");
	КонецЕсли;
	ВнестиВиртуальныеСтрокиРасшифровкиБаланс(ДанныеРаздела, ДеревоНастройкиСостава, ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
	
	// Строки расшифровки строки 1310
	ПрефиксВиртуальнойСтроки  = "П2001001310";
	ПрефиксМногострочнойЧасти = "П1001001310";
	СписокФиксированныхСтрок = Новый СписокЗначений;
	ВнестиВиртуальныеСтрокиРасшифровкиБаланс(ДанныеРаздела, ДеревоНастройкиСостава, ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
	
	// Строки расшифровки строки 1320
	ПрефиксВиртуальнойСтроки  = "П2001001320";
	ПрефиксМногострочнойЧасти = "П1001001320";
	СписокФиксированныхСтрок = Новый СписокЗначений;
	ВнестиВиртуальныеСтрокиРасшифровкиБаланс(ДанныеРаздела, ДеревоНастройкиСостава, ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
	
	// Строки расшифровки строки 1340
	Если НЕ СтруктураРеквизитовФормы.ЭтоБалансНекоммерческойОрганизации Тогда
		ПрефиксВиртуальнойСтроки  = "П2001001340";
		ПрефиксМногострочнойЧасти = "П1001001340";
		СписокФиксированныхСтрок = Новый СписокЗначений;
		СписокФиксированныхСтрок.Добавить("13401", "Переоценка основных средств");
		СписокФиксированныхСтрок.Добавить("13402", "Переоценка НМА");
		СписокФиксированныхСтрок.Добавить("13403", "Переоценка прочих внеоборотных активов");
		ВнестиВиртуальныеСтрокиРасшифровкиБаланс(ДанныеРаздела, ДеревоНастройкиСостава, ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
	КонецЕсли;
	
	// Строки расшифровки строки 1350
	ПрефиксВиртуальнойСтроки  = "П2001001350";
	ПрефиксМногострочнойЧасти = "П1001001350";
	СписокФиксированныхСтрок = Новый СписокЗначений;
	ВнестиВиртуальныеСтрокиРасшифровкиБаланс(ДанныеРаздела, ДеревоНастройкиСостава, ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
	
	// Строки расшифровки строки 1360
	ПрефиксВиртуальнойСтроки  = "П2001001360";
	ПрефиксМногострочнойЧасти = "П1001001360";
	СписокФиксированныхСтрок = Новый СписокЗначений;
	Если НЕ СтруктураРеквизитовФормы.ЭтоБалансНекоммерческойОрганизации Тогда
		СписокФиксированныхСтрок.Добавить("13601", "Резервы, образованные в соответствии с законодательством");
		СписокФиксированныхСтрок.Добавить("13602", "Резервы, образованные в соответствии с учредительными документами");
	КонецЕсли;
	ВнестиВиртуальныеСтрокиРасшифровкиБаланс(ДанныеРаздела, ДеревоНастройкиСостава, ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
	
	// Строки расшифровки строки 1370
	ПрефиксВиртуальнойСтроки  = "П2001001370";
	ПрефиксМногострочнойЧасти = "П1001001370";
	СписокФиксированныхСтрок = Новый СписокЗначений;
	ВнестиВиртуальныеСтрокиРасшифровкиБаланс(ДанныеРаздела, ДеревоНастройкиСостава, ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
	
	// Строки расшифровки строки 1410
	ПрефиксВиртуальнойСтроки  = "П2001001410";
	ПрефиксМногострочнойЧасти = "П1001001410";
	СписокФиксированныхСтрок = Новый СписокЗначений;
	СписокФиксированныхСтрок.Добавить("14101", "Долгосрочные кредиты");
	СписокФиксированныхСтрок.Добавить("14102", "Долгосрочные займы");
	СписокФиксированныхСтрок.Добавить("14103", "Долгосрочные кредиты (в валюте)");
	СписокФиксированныхСтрок.Добавить("14104", "Долгосрочные займы (в валюте)");
	ВнестиВиртуальныеСтрокиРасшифровкиБаланс(ДанныеРаздела, ДеревоНастройкиСостава, ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
	
	// Строки расшифровки строки 1420
	ПрефиксВиртуальнойСтроки  = "П2001001420";
	ПрефиксМногострочнойЧасти = "П1001001420";
	СписокФиксированныхСтрок = Новый СписокЗначений;
	ВнестиВиртуальныеСтрокиРасшифровкиБаланс(ДанныеРаздела, ДеревоНастройкиСостава, ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
	
	// Строки расшифровки строки 1450
	ПрефиксВиртуальнойСтроки  = "П2001001450";
	ПрефиксМногострочнойЧасти = "П1001001450";
	СписокФиксированныхСтрок = Новый СписокЗначений;
	ВнестиВиртуальныеСтрокиРасшифровкиБаланс(ДанныеРаздела, ДеревоНастройкиСостава, ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
	
	// Строки расшифровки строки 1510
	ПрефиксВиртуальнойСтроки  = "П2001001510";
	ПрефиксМногострочнойЧасти = "П1001001510";
	СписокФиксированныхСтрок = Новый СписокЗначений;
	СписокФиксированныхСтрок.Добавить("15101", "Краткосрочные кредиты");
	СписокФиксированныхСтрок.Добавить("15102", "Краткосрочные займы");
	СписокФиксированныхСтрок.Добавить("15103", "Проценты по краткосрочным кредитам");
	СписокФиксированныхСтрок.Добавить("15104", "Проценты по долгосрочным кредитам");
	СписокФиксированныхСтрок.Добавить("15105", "Проценты по краткосрочным займам");
	СписокФиксированныхСтрок.Добавить("15106", "Проценты по долгосрочным займам");
	СписокФиксированныхСтрок.Добавить("15107", "Краткосрочные кредиты (в валюте)");
	СписокФиксированныхСтрок.Добавить("15108", "Краткосрочные займы (в валюте)");
	СписокФиксированныхСтрок.Добавить("15109", "Проценты по краткосрочным кредитам (в валюте)");
	СписокФиксированныхСтрок.Добавить("15110", "Проценты по долгосрочным кредитам (в валюте)");
	СписокФиксированныхСтрок.Добавить("15111", "Проценты по краткосрочным займам (в валюте)");
	СписокФиксированныхСтрок.Добавить("15112", "Проценты по долгосрочным займам (в валюте)");
	ВнестиВиртуальныеСтрокиРасшифровкиБаланс(ДанныеРаздела, ДеревоНастройкиСостава, ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
	
	// Строки расшифровки строки 1520
	ПрефиксВиртуальнойСтроки  = "П2001001520";
	ПрефиксМногострочнойЧасти = "П1001001520";
	СписокФиксированныхСтрок = Новый СписокЗначений;
	СписокФиксированныхСтрок.Добавить("15201", "Расчеты с поставщиками и подрядчиками");
	СписокФиксированныхСтрок.Добавить("15202", "Расчеты с покупателями и заказчиками");
	СписокФиксированныхСтрок.Добавить("15203", "Расчеты по налогам и сборам");
	СписокФиксированныхСтрок.Добавить("15204", "Расчеты по социальному страхованию и обеспечению");
	СписокФиксированныхСтрок.Добавить("15205", "Расчеты с персоналом по оплате труда");
	СписокФиксированныхСтрок.Добавить("15206", "Расчеты с подотчетными лицами");
	СписокФиксированныхСтрок.Добавить("15207", "Задолженность участникам (учредителям) по выплате доходов");
	СписокФиксированныхСтрок.Добавить("15208", "Расчеты с разными дебиторами и кредиторами");
	СписокФиксированныхСтрок.Добавить("15209", "Расчеты с персоналом по прочим операциям");
	ВнестиВиртуальныеСтрокиРасшифровкиБаланс(ДанныеРаздела, ДеревоНастройкиСостава, ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
	
	// Строки расшифровки строки 1530
	ПрефиксВиртуальнойСтроки  = "П2001001530";
	ПрефиксМногострочнойЧасти = "П1001001530";
	СписокФиксированныхСтрок = Новый СписокЗначений;
	Если НЕ СтруктураРеквизитовФормы.ЭтоБалансНекоммерческойОрганизации Тогда
		СписокФиксированныхСтрок.Добавить("15301", "Целевое финансирование");
	КонецЕсли;
	СписокФиксированныхСтрок.Добавить("15302", "Доходы, полученные в счет будущих периодов");
	СписокФиксированныхСтрок.Добавить("15303", "Безвозмездные поступления");
	СписокФиксированныхСтрок.Добавить("15304", "Предстоящие поступления по недостачам, выявленным за прошлые годы");
	СписокФиксированныхСтрок.Добавить("15305", "Разница между суммой, подлежащей взысканию с виновных лиц, и балансовой стоимостью по недостачам ценностей");
	ВнестиВиртуальныеСтрокиРасшифровкиБаланс(ДанныеРаздела, ДеревоНастройкиСостава, ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
			
	// Строки расшифровки строки 1540
	ПрефиксВиртуальнойСтроки  = "П2001001540";
	ПрефиксМногострочнойЧасти = "П1001001540";
	СписокФиксированныхСтрок = Новый СписокЗначений;
	
	Если СтруктураОтчета.Баланс.ИмяМакета = "Баланс_2012Кв4_3"
 	 ИЛИ СтруктураОтчета.Баланс.ИмяМакета = "БалансНКО_2012Кв4_3" Тогда
	 
		СписокФиксированныхСтрок.Добавить("15401", "Оценочные обязательства по вознаграждениям работников");
		СписокФиксированныхСтрок.Добавить("15402", "Резервы предстоящих расходов прочие");
		
	КонецЕсли;	
	
	ВнестиВиртуальныеСтрокиРасшифровкиБаланс(ДанныеРаздела, ДеревоНастройкиСостава, ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
	
	// Строки расшифровки строки 1550
	ПрефиксВиртуальнойСтроки  = "П2001001550";
	ПрефиксМногострочнойЧасти = "П1001001550";
	СписокФиксированныхСтрок = Новый СписокЗначений;
	ВнестиВиртуальныеСтрокиРасшифровкиБаланс(ДанныеРаздела, ДеревоНастройкиСостава, ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьВиртуальныеСтрокиРасшифровкиФормаОтчета(Раздел, ДанныеРаздела, СоставДополнительныхСтрок, ПрименяетсяЕНВД)
	
	ПолучитьДеревоНастроекСоставаДопСтрок("ФормаОтчета");
	ДеревоНастройкиСостава = ДеревоНастроекФормаОтчета;
	
	// Строки расшифровки строки 2110
	Если ПрименяетсяЕНВД Тогда
		ПрефиксВиртуальнойСтроки  = "П2001002110";
		ПрефиксМногострочнойЧасти = "";
		СписокФиксированныхСтрок = Новый СписокЗначений;
		СписокФиксированныхСтрок.Добавить("21101", "Выручка по деятельности с основной системой налогообложения");
		СписокФиксированныхСтрок.Добавить("21102", "Выручка по отдельным видам деятельности (ЕНВД)");
	Иначе
		ПрефиксВиртуальнойСтроки  = "П2001002110";
		ПрефиксМногострочнойЧасти = ?(ВключенВОтчет(ДеревоНастройкиСостава, "ДопСтрока2110"), "П1001002110", "");
		СписокФиксированныхСтрок = Новый СписокЗначений;
	КонецЕсли;
	ВнестиВиртуальныеСтрокиРасшифровкиФормаОтчета(ДанныеРаздела, ДеревоНастройкиСостава, ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
	
	// Строки расшифровки строки 2120
	Если ПрименяетсяЕНВД Тогда
		ПрефиксВиртуальнойСтроки  = "П2001002120";
		ПрефиксМногострочнойЧасти = "";
		СписокФиксированныхСтрок = Новый СписокЗначений;
		СписокФиксированныхСтрок.Добавить("21201", "Себестоимость продаж по деятельности с основной системой налогообложения");
		СписокФиксированныхСтрок.Добавить("21202", "Себестоимость продаж по отдельным видам деятельности (ЕНВД)");
	Иначе
		ПрефиксВиртуальнойСтроки  = "П2001002120";
		ПрефиксМногострочнойЧасти = ?(ВключенВОтчет(ДеревоНастройкиСостава, "ДопСтрока2120"), "П1001002120", "");
		СписокФиксированныхСтрок = Новый СписокЗначений;
	КонецЕсли;
	ВнестиВиртуальныеСтрокиРасшифровкиФормаОтчета(ДанныеРаздела, ДеревоНастройкиСостава, ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
	
	// Строки расшифровки строки 2100
	Если ПрименяетсяЕНВД Тогда
		ПрефиксВиртуальнойСтроки  = "П2001002100";
		ПрефиксМногострочнойЧасти = "";
		СписокФиксированныхСтрок = Новый СписокЗначений;
		СписокФиксированныхСтрок.Добавить("21001", "Валовая прибыль (убыток) по деятельности с основной системой налогообложения");
		СписокФиксированныхСтрок.Добавить("21002", "Валовая прибыль (убыток) по отдельным видам деятельности (ЕНВД)");
	Иначе
		ПрефиксВиртуальнойСтроки  = "П2001002100";
		ПрефиксМногострочнойЧасти = "П1001002100";
		СписокФиксированныхСтрок = Новый СписокЗначений;
	КонецЕсли;
	ВнестиВиртуальныеСтрокиРасшифровкиФормаОтчета(ДанныеРаздела, ДеревоНастройкиСостава, ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
	
	// Строки расшифровки строки 2210
	Если ПрименяетсяЕНВД Тогда
		ПрефиксВиртуальнойСтроки  = "П2001002210";
		ПрефиксМногострочнойЧасти = "";
		СписокФиксированныхСтрок = Новый СписокЗначений;
		СписокФиксированныхСтрок.Добавить("22101", "Коммерческие расходы по деятельности с основной системой налогообложения");
		СписокФиксированныхСтрок.Добавить("22102", "Коммерческие расходы по отдельным видам деятельности (ЕНВД)");
	Иначе
		ПрефиксВиртуальнойСтроки  = "П2001002210";
		ПрефиксМногострочнойЧасти = ?(ВключенВОтчет(ДеревоНастройкиСостава, "ДопСтрока2210"), "П1001002210", "");
		СписокФиксированныхСтрок = Новый СписокЗначений;
	КонецЕсли;
	ВнестиВиртуальныеСтрокиРасшифровкиФормаОтчета(ДанныеРаздела, ДеревоНастройкиСостава, ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
	
	// Строки расшифровки строки 2220
	Если ПрименяетсяЕНВД Тогда
		ПрефиксВиртуальнойСтроки  = "П2001002220";
		ПрефиксМногострочнойЧасти = "";
		СписокФиксированныхСтрок = Новый СписокЗначений;
		СписокФиксированныхСтрок.Добавить("22201", "Управленческие расходы по деятельности с основной системой налогообложения");
		СписокФиксированныхСтрок.Добавить("22202", "Управленческие  расходы по отдельным видам деятельности (ЕНВД)");
	Иначе
		ПрефиксВиртуальнойСтроки  = "П2001002220";
		ПрефиксМногострочнойЧасти = ?(ВключенВОтчет(ДеревоНастройкиСостава, "ДопСтрока2220"), "П1001002220", "");
		СписокФиксированныхСтрок = Новый СписокЗначений;
	КонецЕсли;
	ВнестиВиртуальныеСтрокиРасшифровкиФормаОтчета(ДанныеРаздела, ДеревоНастройкиСостава, ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
	
	// Строки расшифровки строки 2200
	Если ПрименяетсяЕНВД Тогда
		ПрефиксВиртуальнойСтроки  = "П2001002200";
		ПрефиксМногострочнойЧасти = "";
		СписокФиксированныхСтрок = Новый СписокЗначений;
		СписокФиксированныхСтрок.Добавить("22001", "Прибыль (убыток) от продаж по деятельности с основной системой налогообложения");
		СписокФиксированныхСтрок.Добавить("22002", "Прибыль (убыток) от продаж по отдельным видам деятельности (ЕНВД)");
	Иначе
		ПрефиксВиртуальнойСтроки  = "П2001002200";
		ПрефиксМногострочнойЧасти = "П1001002200";
		СписокФиксированныхСтрок = Новый СписокЗначений;
	КонецЕсли;
	ВнестиВиртуальныеСтрокиРасшифровкиФормаОтчета(ДанныеРаздела, ДеревоНастройкиСостава, ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
	
	// Строки расшифровки строки 2310
	ПрефиксВиртуальнойСтроки  = "П2001002310";
	ПрефиксМногострочнойЧасти = "";
	СписокФиксированныхСтрок = Новый СписокЗначений;
	СписокФиксированныхСтрок.Добавить("23101", "Доходы (расходы), связанные с участием в других организациях");
	СписокФиксированныхСтрок.Добавить("23102", "Долевое участие в иностранных организациях");
	СписокФиксированныхСтрок.Добавить("23103", "Долевое участие в российских организациях");
	ВнестиВиртуальныеСтрокиРасшифровкиФормаОтчета(ДанныеРаздела, ДеревоНастройкиСостава, ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
	
	// Строки расшифровки строки 2320
	ПрефиксВиртуальнойСтроки  = "П2001002320";
	ПрефиксМногострочнойЧасти = "";
	СписокФиксированныхСтрок = Новый СписокЗначений;
	СписокФиксированныхСтрок.Добавить("23201", "Проценты к получению");
	СписокФиксированныхСтрок.Добавить("23202", "Проценты по государственным ценным бумагам");
	СписокФиксированныхСтрок.Добавить("23203", "Проценты по государственным ценным бумагам по ставке 0%");
	ВнестиВиртуальныеСтрокиРасшифровкиФормаОтчета(ДанныеРаздела, ДеревоНастройкиСостава, ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
	
	// Строки расшифровки строки 2330
	ПрефиксВиртуальнойСтроки  = "П2001002330";
	ПрефиксМногострочнойЧасти = "";
	СписокФиксированныхСтрок = Новый СписокЗначений;
	СписокФиксированныхСтрок.Добавить("23301", "Проценты к уплате");
	СписокФиксированныхСтрок.Добавить("23302", "Проценты, начисленные в соответствии со статьей 269 НК РФ");
	ВнестиВиртуальныеСтрокиРасшифровкиФормаОтчета(ДанныеРаздела, ДеревоНастройкиСостава, ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
	
	// Строки расшифровки строки 2340
	ПрефиксВиртуальнойСтроки  = "П2001002340";
	ПрефиксМногострочнойЧасти = "П1001002340";
	СписокФиксированныхСтрок = Новый СписокЗначений;
	СписокФиксированныхСтрок.Добавить("23401", "Доходы, связанные с реализацией основных средств");
	СписокФиксированныхСтрок.Добавить("23402", "Доходы, связанные с ликвидацией основных средств");
	СписокФиксированныхСтрок.Добавить("23403", "Доходы, связанные с реализацией нематериальных активов");
	СписокФиксированныхСтрок.Добавить("23404", "Доходы, связанные с реализацией прочего имущества");
	СписокФиксированныхСтрок.Добавить("23405", "Доходы, связанные с реализацией права требования как оказания финансовых услуг");
	СписокФиксированныхСтрок.Добавить("23406", "Доходы, связанные с реализацией права до наступления платежа");
	СписокФиксированныхСтрок.Добавить("23407", "Доходы, связанные с реализацией права после наступления срока платежа");
	СписокФиксированныхСтрок.Добавить("23408", "Доходы, связанные с реализацией имущественных прав, кроме права требования");
	СписокФиксированныхСтрок.Добавить("23409", "Доходы, связанные с реализацией имущественных прав по объектам обслуживающих производств и хозяйств");
	СписокФиксированныхСтрок.Добавить("23410", "Доходы, связанные с реализацией ценных бумаг");
	СписокФиксированныхСтрок.Добавить("23411", "Доходы по операциям с финансовыми инструментами срочных сделок, не обращающимися на организованном рынке");
	СписокФиксированныхСтрок.Добавить("23412", "Доходы по операциям с финансовыми инструментами срочных сделок, обращающимися на организованном рынке");
	СписокФиксированныхСтрок.Добавить("23413", "Доходы, связанные со сдачей имущества в аренду (субаренду)");
	СписокФиксированныхСтрок.Добавить("23414", "Доходы в виде восстановленных оценочных резервов");
	СписокФиксированныхСтрок.Добавить("23415", "Разница между первоначальной и номинальной стоимостью по долговым ценным бумагам");
	СписокФиксированныхСтрок.Добавить("23416", "Прочие операционные доходы");
	СписокФиксированныхСтрок.Добавить("23417", "Штрафы, пени, неустойки к получению");
	СписокФиксированныхСтрок.Добавить("23418", "Прибыль прошлых лет");
	СписокФиксированныхСтрок.Добавить("23419", "Возмещение убытков к получению");
	СписокФиксированныхСтрок.Добавить("23420", "Курсовые разницы");
	СписокФиксированныхСтрок.Добавить("23421", "Курсовые разницы по расчетам в у.е.");
	СписокФиксированныхСтрок.Добавить("23422", "Доходы в виде списанной кредиторской задолженности");
	СписокФиксированныхСтрок.Добавить("23423", "Доходы, связанные с переоценкой внеоборотных активов");
	СписокФиксированныхСтрок.Добавить("23424", "Прочие внереализационные доходы");
	СписокФиксированныхСтрок.Добавить("23425", "Корректировка прибыли до рыночных цен");
	СписокФиксированныхСтрок.Добавить("23426", "Доходы, связанные с реализацией объектов строительства");
	ВнестиВиртуальныеСтрокиРасшифровкиФормаОтчета(ДанныеРаздела, ДеревоНастройкиСостава, ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
	
	// Строки расшифровки строки 2350
	ПрефиксВиртуальнойСтроки  = "П2001002350";
	ПрефиксМногострочнойЧасти = "П1001002350";
	СписокФиксированныхСтрок = Новый СписокЗначений;
	СписокФиксированныхСтрок.Добавить("23501", "Расходы, связанные с участием в других организациях");
	СписокФиксированныхСтрок.Добавить("23502", "Расходы, связанные с участием в российских организациях");
	СписокФиксированныхСтрок.Добавить("23503", "Расходы, связанные с участием в иностранных организациях");
	СписокФиксированныхСтрок.Добавить("23504", "Расходы, связанные с реализацией основных средств");
	СписокФиксированныхСтрок.Добавить("23505", "Расходы, связанные с ликвидацией основных средств");
	СписокФиксированныхСтрок.Добавить("23506", "Расходы, связанные с реализацией нематериальных активов");
	СписокФиксированныхСтрок.Добавить("23507", "Расходы, связанные с реализацией прочего имущества");
	СписокФиксированныхСтрок.Добавить("23508", "Расходы, связанный с реализацией права требования как оказания финансовых услуг");
	СписокФиксированныхСтрок.Добавить("23509", "Расходы, связанные с реализацией права требования до наступления срока платежа");
	СписокФиксированныхСтрок.Добавить("23510", "Расходы, связанные с реализацией права требования после наступления срока платежа");
	СписокФиксированныхСтрок.Добавить("23511", "Расходы, связанные с реализацией имущественных прав, кроме права требования");
	СписокФиксированныхСтрок.Добавить("23512", "Расходы, связанные с реализацией имущественных прав по объектам обслуживающих производств и хозяйств");
	СписокФиксированныхСтрок.Добавить("23513", "Расходы, связанные с реализацией ценных бумаг");
	СписокФиксированныхСтрок.Добавить("23514", "Расходы по операциям с финансовыми инструментами срочных сделок, не обращающимися на организованном рынке");
	СписокФиксированныхСтрок.Добавить("23515", "Расходы по операциям с финансовыми инструментами срочных сделок, обращающимися на организованном рынке");
	СписокФиксированныхСтрок.Добавить("23516", "Расходы, связанные со сдачей имущества в аренду (субаренду)");
	СписокФиксированныхСтрок.Добавить("23517", "Расходы в виде образованных оценочных резервов");
	СписокФиксированныхСтрок.Добавить("23518", "Разница между первоначальной и номинальной стоимостью по долговым ценным бумагам");
	СписокФиксированныхСтрок.Добавить("23519", "Расходы на услуги банков");
	СписокФиксированныхСтрок.Добавить("23520", "Прочие операционные расходы");
	СписокФиксированныхСтрок.Добавить("23521", "Штрафы, пени, неустойки к уплате");
	СписокФиксированныхСтрок.Добавить("23522", "Убытки прошлых лет");
	СписокФиксированныхСтрок.Добавить("23523", "Курсовые разницы");
	СписокФиксированныхСтрок.Добавить("23524", "Курсовые разницы по расчетам в у.е.");
	СписокФиксированныхСтрок.Добавить("23525", "Налоги и сборы");
	СписокФиксированныхСтрок.Добавить("23526", "Премия, выплаченная покупателю");
	СписокФиксированныхСтрок.Добавить("23527", "Расходы в виде списанной дебиторской задолженности");
	СписокФиксированныхСтрок.Добавить("23528", "Расходы, связанные с безвозмездным получением имущества, работ, услуг или имущественных прав");
	СписокФиксированныхСтрок.Добавить("23529", "Расходы по передаче товаров (работ, услуг) безвозмездно и для собственных нужд");
	СписокФиксированныхСтрок.Добавить("23530", "Прочие внереализационные расходы");
	СписокФиксированныхСтрок.Добавить("23531", "Прочие косвенные расходы");
	СписокФиксированныхСтрок.Добавить("23532", "Расходы, связанные с переоценкой внеоборотных активов");
	СписокФиксированныхСтрок.Добавить("23533", "Прочие убытки, приравненные к внереализационным расходам");
	СписокФиксированныхСтрок.Добавить("23534", "Расходы, связанные с реализацией объектов строительства");
	ВнестиВиртуальныеСтрокиРасшифровкиФормаОтчета(ДанныеРаздела, ДеревоНастройкиСостава, ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
	
	// Строки расшифровки строки 2300
	Если ПрименяетсяЕНВД Тогда
		ПрефиксВиртуальнойСтроки  = "П2001002300";
		ПрефиксМногострочнойЧасти = "";
		СписокФиксированныхСтрок = Новый СписокЗначений;
		СписокФиксированныхСтрок.Добавить("23001", "Прибыль (убыток) до налогообложения по деятельности с основной системой налогообложения");
		СписокФиксированныхСтрок.Добавить("23002", "Прибыль (убыток) до налогообложения по отдельным видам деятельности (ЕНВД)");
	Иначе
		ПрефиксВиртуальнойСтроки  = "П2001002300";
		ПрефиксМногострочнойЧасти = "П1001002300";
		СписокФиксированныхСтрок = Новый СписокЗначений;
	КонецЕсли;
	ВнестиВиртуальныеСтрокиРасшифровкиФормаОтчета(ДанныеРаздела, ДеревоНастройкиСостава, ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
	
	// Строки расшифровки строки 2421
	ПрефиксВиртуальнойСтроки  = "П2001002421";
	ПрефиксМногострочнойЧасти = "П1001002421";
	СписокФиксированныхСтрок = Новый СписокЗначений;
	ВнестиВиртуальныеСтрокиРасшифровкиФормаОтчета(ДанныеРаздела, ДеревоНастройкиСостава, ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
	
	// Строки расшифровки строки 2430
	ПрефиксВиртуальнойСтроки  = "П2001002430";
	ПрефиксМногострочнойЧасти = "П1001002430";
	СписокФиксированныхСтрок = Новый СписокЗначений;
	ВнестиВиртуальныеСтрокиРасшифровкиФормаОтчета(ДанныеРаздела, ДеревоНастройкиСостава, ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
	
	// Строки расшифровки строки 2450
	ПрефиксВиртуальнойСтроки  = "П2001002450";
	ПрефиксМногострочнойЧасти = "П1001002450";
	СписокФиксированныхСтрок = Новый СписокЗначений;
	ВнестиВиртуальныеСтрокиРасшифровкиФормаОтчета(ДанныеРаздела, ДеревоНастройкиСостава, ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
	
	// Строки расшифровки строки 2460
	ПрефиксВиртуальнойСтроки  = "П2001002460";
	ПрефиксМногострочнойЧасти = "П1001002460";
	СписокФиксированныхСтрок = Новый СписокЗначений;
	СписокФиксированныхСтрок.Добавить("24601", "Налоги, уплачиваемые в связи с применением специальных налоговых режимов");
	СписокФиксированныхСтрок.Добавить("24602", "Штрафные санкции и пени за нарушение налогового и иного законодательства");
	ВнестиВиртуальныеСтрокиРасшифровкиФормаОтчета(ДанныеРаздела, ДеревоНастройкиСостава, ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
	
	// Строки расшифровки строки 2510
	ПрефиксВиртуальнойСтроки  = "П2001002510";
	ПрефиксМногострочнойЧасти = "";
	СписокФиксированныхСтрок = Новый СписокЗначений;
	СписокФиксированныхСтрок.Добавить("25101", "Результат от переоценки основных средств, не включаемый в чистую прибыль (убыток) периода");
	СписокФиксированныхСтрок.Добавить("25102", "Результат от переоценки нематериальных активов, не включаемый в чистую прибыль (убыток) периода");
	ВнестиВиртуальныеСтрокиРасшифровкиФормаОтчета(ДанныеРаздела, ДеревоНастройкиСостава, ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
	
КонецПроцедуры

&НаСервере
Функция ДопСтрокиОФРПриПримененииЕНВД()
	
	НовМассив = Новый Массив;
	
	НовМассив.Добавить("ДопСтрока21101");
	НовМассив.Добавить("ДопСтрока21102");
	НовМассив.Добавить("ДопСтрока21201");
	НовМассив.Добавить("ДопСтрока21202");
	НовМассив.Добавить("ДопСтрока22101");
	НовМассив.Добавить("ДопСтрока22102");
	НовМассив.Добавить("ДопСтрока22201");
	НовМассив.Добавить("ДопСтрока22202");
	НовМассив.Добавить("ДопСтрока21001");
	НовМассив.Добавить("ДопСтрока21002");
	НовМассив.Добавить("ДопСтрока22001");
	НовМассив.Добавить("ДопСтрока22002");
	НовМассив.Добавить("ДопСтрока23001");
	НовМассив.Добавить("ДопСтрока23002");
	
	Возврат НовМассив;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СтрокаЧГ0(ИсходноеЧисло)
	
	Возврат Формат(ИсходноеЧисло, "ЧГ=0");
	
КонецФункции

&НаСервере
Функция ТипАдресаПоУмолчанию()
	
	Результат = "АдрФакт";
	
	Адреса = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(СтруктураРеквизитовФормы.Организация, ДатаПодписи, "АдрФакт, АдрЮР, АдрПочт");
	
	Если ПустаяСтрока(СтрЗаменить(Адреса.АдрФакт, ",", "")) Тогда
		Адреса.АдрФакт = "";
	Иначе
		Адреса.АдрФакт = РегламентированнаяОтчетностьКлиентСервер.ПредставлениеАдресаВФормате9Запятых(Адреса.АдрФакт);
	КонецЕсли;
	
	Если ПустаяСтрока(СтрЗаменить(Адреса.АдрЮР, ",", "")) Тогда
		Адреса.АдрЮР = "";
	Иначе
		Адреса.АдрЮР = РегламентированнаяОтчетностьКлиентСервер.ПредставлениеАдресаВФормате9Запятых(Адреса.АдрЮР);
	КонецЕсли;
	
	Если ПустаяСтрока(СтрЗаменить(Адреса.АдрПочт, ",", "")) Тогда
		Адреса.АдрПочт = "";
	Иначе
		Адреса.АдрПочт = РегламентированнаяОтчетностьКлиентСервер.ПредставлениеАдресаВФормате9Запятых(Адреса.АдрПочт);
	КонецЕсли;
		
	Если НЕ ПустаяСтрока(Адреса.АдрФакт) Тогда
		Результат = "АдрФакт";
	ИначеЕсли НЕ ПустаяСтрока(Адреса.АдрЮР) Тогда
		Результат = "АдрЮР";
	ИначеЕсли НЕ ПустаяСтрока(Адреса.АдрПочт) Тогда
		Результат = "АдрПочт";
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ИзменитьНазванияОтчетов(ИмяТекРаздела)
	
	НазваниеОПУ = НазваниеОПУ();
	
	Если ИмяТекРаздела = "ФормаОтчета" Тогда
		ТабличныйДокумент.Области.НазваниеОтчета.Текст          = НазваниеОПУ;
		ТабличныйДокумент.Области.НазваниеСтрокиСправочно.Текст = НазваниеСтрокиСправочно_ОПУ();
		ТабличныйДокумент.Области.НазваниеСтроки2900.Текст      = НазваниеСтроки2900_ОПУ();
	КонецЕсли;
	
	РазделФормаОтчета = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(РазделыОтчета.ПолучитьЭлементы(), "КолонкаРазделыОтчетаСокрНаим", "ФормаОтчета");
	
	Если НЕ РазделФормаОтчета = Неопределено Тогда
		РазделФормаОтчета.КолонкаРазделыОтчета = НазваниеОПУ;
	КонецЕсли;
	
	РазделФормаОтчета = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(мДеревоСтраницОтчета.ПолучитьЭлементы(), "ИмяСтраницы", "ФормаОтчета");
	РазделФормаОтчета.Представление = НазваниеОПУ;
	
	РазделФормаОтчета = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(мДеревоВыбранныхСтраниц.ПолучитьЭлементы(), "ИмяСтраницы", "ФормаОтчета");
	РазделФормаОтчета.Представление = НазваниеОПУ;
	
	ЗаполнитьЗаголовкиВРазделахОтчетностиПоЕдиницеИзмерения(ИмяТекРаздела);
	
КонецПроцедуры

&НаСервере
Функция НазваниеОПУ()
	
	Если ДатаПодписи >= '2013-01-01' Тогда
		Возврат "Отчет о финансовых результатах";
	Иначе
		Возврат "Отчет о прибылях и убытках";
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция НазваниеСтроки2900_ОПУ()
	
	Если СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета >= '2015-01-01' Тогда
		Возврат "Справочно" + Символы.ПС + "Базовая прибыль (убыток) на акцию";
	Иначе
		Возврат "Базовая прибыль (убыток) на акцию";
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция НазваниеСтрокиСправочно_ОПУ()
	
	Если СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета >= '2015-01-01' Тогда
		Возврат "";
	Иначе
		Возврат "СПРАВОЧНО";
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ОчиститьПолеПодписиБухгалтера()
	
	Если НЕ ТабличныйДокумент.Области.Найти("ПодписьБухгалтер") = Неопределено Тогда
		ТабличныйДокумент.Области.ПодписьБухгалтер.Очистить(Истина, Истина, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьУведомление(ОткрытьПринудительно = Ложь) Экспорт
	
	ЗначениеНеПоказывать = Формат(СтруктураРеквизитовФормы.КоличествоСтрокИнформационногоМакета, "ЧН=; ЧГ=0") + "_НеПоказывать";
	
	СтруктураРеквизитовФормы.СохраненныйВыборПользователя = ЗначениеНеПоказывать;
	
	ПоказатьОписаниеИзменений = ОткрытьПринудительно
							ИЛИ СтруктураРеквизитовФормы.СохраненныйВыборПользователя <> ЗначениеНеПоказывать;
	
	Если ПоказатьОписаниеИзменений Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("РежимОткрытия", ?(ОткрытьПринудительно, "Принудительно", "ПоВыбору"));
		ПараметрыФормы.Вставить("ИмяСохраняемогоПараметра", СтруктураРеквизитовФормы.ИмяСохраняемогоПараметра);
		ПараметрыФормы.Вставить("ЗначениеНеПоказывать", ЗначениеНеПоказывать);
		
		ОткрытьФорму("Обработка.ОбщиеОбъектыРеглОтчетности.Форма.УведомлениеОбИзмененияхВФормеОтчета",
			ПараметрыФормы, ЭтаФорма, СтруктураРеквизитовФормы.ИмяСохраняемогоПараметра);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьВБанкЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Текст = Неопределено;
	
	СформированТекстЭлектронногоПредставления = УниверсальнаяВыгрузкаXML(Текст);
	
	Если СформированТекстЭлектронногоПредставления <> Истина Тогда
		ОтобразитьФормуНавигацииПоОшибкам();
		Возврат;
	КонецЕсли;
	
	ДвоичныеДанныеФайла = ДвоичныеДанныеФайла(Текст);
	
	ДатаВыгрузки = ТекущаяДата();
	
	ИНН = СокрЛП(СтруктураДанныхБаланс.ОргИНН);
	КПП = СокрЛП(КППОрганизации(СтруктураРеквизитовФормы.Организация));
	
	ГодОтчета = Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ=гггг");
	КварталОтчета = Строка(Месяц(КонецКвартала(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета)) / 3) + "Q";
	
	МоментВыгрузки = Формат(ДатаВыгрузки, "ДФ=yyyyMMddHHmmss");
	НомерВыгрузки = НомерВыгрузкиВБанк(ДатаВыгрузки, СтруктураРеквизитовФормы.Организация);
	
	ИмяФайлаДляБанка = ИНН + "_" + КПП + "_"
	                 + ГодОтчета + "_" + КварталОтчета + "_"
	                 + МоментВыгрузки + "_" + НомерВыгрузки + ".xml";
	
	Оповещение = Новый ОписаниеОповещения("ПослеОтправкиОтчетаВБанк", ЭтотОбъект);
	ОтчетностьВБанкиСлужебныйКлиент.ОтправитьОтчетВБанк(Оповещение, СтруктураРеквизитовФормы.мСохраненныйДок,
		СтруктураРеквизитовФормы.Организация, СтруктураРеквизитовФормы.Банк, ДвоичныеДанныеФайла, ИмяФайлаДляБанка);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ДвоичныеДанныеФайла(Текст)
	
	ВремФайл = ПолучитьИмяВременногоФайла("xml");
	
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ТекстовыйДокумент.УстановитьТекст(Текст);
	ТекстовыйДокумент.Записать(ВремФайл, "windows-1251");
	ДвоичныеДанныеФайла = Новый ДвоичныеДанные(ВремФайл);
	УдалитьФайлы(ВремФайл);
	Возврат ДвоичныеДанныеФайла;
	
КонецФункции

&НаСервереБезКонтекста
Функция КППОрганизации(Организация)
	
	Возврат Организация.КПП;
	
КонецФункции

&НаСервереБезКонтекста
Функция НомерВыгрузкиВБанк(ДатаВыгрузки, Организация)
	
	НомерВыгрузки = 0;
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	СчетчикВыгрузокОтчетностиВБанк.Значение
	                      |ИЗ
	                      |	РегистрСведений.СчетчикВыгрузокОтчетностиВБанк КАК СчетчикВыгрузокОтчетностиВБанк
	                      |ГДЕ
	                      |	СчетчикВыгрузокОтчетностиВБанк.Организация = &Организация
	                      |	И СчетчикВыгрузокОтчетностиВБанк.День = &День");
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("День", НачалоДня(ДатаВыгрузки));
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Если Выборка.Следующий() Тогда
			НомерВыгрузки = ?(НЕ ЗначениеЗаполнено(Выборка.Значение), 0, Выборка.Значение);
		КонецЕсли;
	КонецЕсли;
	
	НомерВыгрузки = НомерВыгрузки + 1;
	
	МенеджерЗаписи = РегистрыСведений.СчетчикВыгрузокОтчетностиВБанк.СоздатьМенеджерЗаписи();
	
	МенеджерЗаписи.Организация = Организация;
	МенеджерЗаписи.День = ДатаВыгрузки;
	МенеджерЗаписи.Значение = НомерВыгрузки;
	
	МенеджерЗаписи.Записать(Истина);
	
	Возврат Формат(НомерВыгрузки, "ЧЦ=3; ЧН=; ЧВН=");
	
КонецФункции

&НаКлиенте
Процедура ОтобразитьФормуНавигацииПоОшибкам()
	
	Если ТаблицаСообщений.Количество() = 0 Тогда
		НовСтр = ТаблицаСообщений.Добавить();
		НовСтр.Описание = "Выгрузка прервана.";
	Иначе
		ТекстСообщения = "В ходе проверки были найдены ошибки, препятствующие выгрузке."
		               + Символы.ПС
		               + "Для исправления ошибок используйте специальное окно навигации по ошибкам.";
		#Если НЕ ВебКлиент Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = ТекстСообщения;
			Сообщение.Сообщить();
		#КонецЕсли
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("ВладелецТС", Новый Структура("ТаблицаСообщений", ТаблицаСообщений));
	
	ФормаНавигацииПоОшибкам = ПолучитьФорму("Документ.ВыгрузкаРегламентированныхОтчетов.Форма.ФормаНавигацииПоОшибкам", ПараметрыФормы);
	
	Если ФормаНавигацииПоОшибкам.Открыта() Тогда
		ФормаНавигацииПоОшибкам.Закрыть();
		ФормаНавигацииПоОшибкам = ПолучитьФорму("Документ.ВыгрузкаРегламентированныхОтчетов.Форма.ФормаНавигацииПоОшибкам", ПараметрыФормы);
	КонецЕсли;
	
	ФормаНавигацииПоОшибкам.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеСохраненияФормыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	ДополнительныеПараметры.Форма.Закрыть();
КонецПроцедуры

&НаСервере
Процедура СкрытьСсылкуНастройкаСоставаОрганизаций()
	
	Если РегламентированнаяОтчетностьВызовСервера.ИспользуетсяОднаОрганизация() Тогда
		Обл = ТабличныйДокумент.Области.Найти("ОрганизацииДляЗаполненияОтчета");
		Если Обл <> Неопределено И Не Обл.СодержитЗначение Тогда 
			Обл.Текст = "";
			Обл.Гиперссылка = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ СтруктураРеквизитовФормы.ОтображатьКнопкуЗаполнить Тогда
		Обл = ТабличныйДокумент.Области.Найти("ОрганизацииДляЗаполненияОтчета");
		Если Обл <> Неопределено И Не Обл.СодержитЗначение Тогда 
			Обл.Текст = "";
			Обл.Гиперссылка = Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СкрытьПоказательДатаУтвержденияОтчетности()
	
	Если СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета < '2015-01-01' Тогда
		
		НетЛинии = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.НетЛинии);
		
		Обл1 = ТабличныйДокумент.Области.Найти("ДатаУтвОтчетности");
		Если Обл1 <> Неопределено Тогда
			Обл1.Значение = "";
			Обл1.Формат = "";
			Обл1.ГраницаСверху = НетЛинии;
			Обл1.ГраницаСнизу = НетЛинии;
			Обл1.ГраницаСлева = НетЛинии;
			Обл1.ГраницаСправа = НетЛинии;
			Обл1.Защита = Истина;
			Обл1.ЦветФона = мСтруктураЦветовРаскраски["_5"];
		КонецЕсли;
		Обл1 = ТабличныйДокумент.Области.Найти("ДатаУтвОтчетностиЗаголовок");
		Если Обл1 <> Неопределено Тогда
			Обл1.Текст = "";
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОтрисоватьЗначкиУдаленияСтрок(ТабДок)
	
	МассивОбластейСДопСтроками = Новый Массив;
	
	Для Каждого ОбластьТД Из ТабДок.Области Цикл
		Если СтрЧислоВхождений(ОбластьТД.Имя, "УдалитьСтроку") > 0 Тогда
			Если СтрЧислоВхождений(ОбластьТД.Имя, "_2") > 0 Тогда
				МассивОбластейСДопСтроками.Добавить(Лев(ОбластьТД.Имя, СтрНайти(ОбластьТД.Имя, "_") - 1));
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ОбластьТД Из ТабДок.Области Цикл
		Если СтрЧислоВхождений(ОбластьТД.Имя, "УдалитьСтроку") > 0 Тогда
			Если МассивОбластейСДопСтроками.Найти(Лев(ОбластьТД.Имя, СтрНайти(ОбластьТД.Имя, "_") - 1)) = Неопределено Тогда
				ОбластьТД.Гиперссылка = Ложь;
				ОбластьТД.Текст = "";
			Иначе
				ОбластьТД.Гиперссылка = Истина;
				ОбластьТД.Текст = "х";
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура УправлениеБлокомВариантЗаполнения(ДанныеПоказателя)
	
	// ДанныеПоказателя - имя показателя.
	//
	Если ТипЗнч(ДанныеПоказателя) = Тип("Строка") Тогда
		
		ИмяРаздела = СтруктураРеквизитовФормы.НаимТекущегоРаздела;
		
		НайденнаяСтрокаТВЗ = ВариантЗаполненияПоказателя(ИмяРаздела, ДанныеПоказателя);
		
		Если НайденнаяСтрокаТВЗ <> Неопределено Тогда
			
			ТекВариант     = НайденнаяСтрокаТВЗ.ВариантЗаполнения;
			ТекДельта      = НайденнаяСтрокаТВЗ.Дельта;
			ТекКомментарий = НайденнаяСтрокаТВЗ.Комментарий;
			Если ТекВариант = 1
			 ИЛИ ТекВариант = 2
			 ИЛИ ТекВариант = 3 Тогда
				ВариантЗаполнения = ЭтаФорма.Элементы.ВариантЗаполнения.СписокВыбора[ТекВариант - 1].Значение;
				ВеличинаАвтокорректировки = ТекДельта;
				КомментарийКВариантуЗаполнения = ТекКомментарий;
				ЭтаФорма.Элементы.ВариантЗаполнения.Доступность = Истина;
				ЭтаФорма.Элементы.ВеличинаАвтокорректировки.Доступность = ТекВариант = 2;
				ЭтаФорма.Элементы.КомментарийКВариантуЗаполнения.Доступность = ТекВариант <> 3;
				ТабличныйДокумент.Области[ДанныеПоказателя].Примечание.Текст = ТекКомментарий;
			КонецЕсли;
		Иначе
			ОчиститьБлокВариантЗаполнения();
		КонецЕсли;
		
	// ДанныеПоказателя - строка таблицы вариантов заполнения.
	//
	ИначеЕсли ТипЗнч(ДанныеПоказателя) = Тип("ДанныеФормыЭлементКоллекции") Тогда
		
		ТекВариант     = ДанныеПоказателя.ВариантЗаполнения;
		ТекДельта      = ДанныеПоказателя.Дельта;
		ТекКомментарий = ДанныеПоказателя.Комментарий;
		Если ТекВариант = 1
		 ИЛИ ТекВариант = 2
		 ИЛИ ТекВариант = 3 Тогда
			ВариантЗаполнения = ЭтаФорма.Элементы.ВариантЗаполнения.СписокВыбора[ТекВариант - 1].Значение;
			ВеличинаАвтокорректировки = ТекДельта;
			КомментарийКВариантуЗаполнения = ТекКомментарий;
			ЭтаФорма.Элементы.ВариантЗаполнения.Доступность = Истина;
			ЭтаФорма.Элементы.ВеличинаАвтокорректировки.Доступность = ТекВариант = 2;
			ЭтаФорма.Элементы.КомментарийКВариантуЗаполнения.Доступность = ТекВариант <> 3;
			ТабличныйДокумент.Области[ДанныеПоказателя.КодПоказателя].Примечание.Текст = ТекКомментарий;
		Иначе
			ОчиститьБлокВариантЗаполнения();
		КонецЕсли;
		
	Иначе
		ОчиститьБлокВариантЗаполнения();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьБлокВариантЗаполнения(АвтозаполнениеБезКорректировки = Ложь)
	
	ВариантЗаполнения = ?(АвтозаполнениеБезКорректировки, ЭтаФорма.Элементы.ВариантЗаполнения.СписокВыбора[2].Значение, "");
	ВеличинаАвтокорректировки = 0;
	КомментарийКВариантуЗаполнения = "";
	ЭтаФорма.Элементы.ВариантЗаполнения.Доступность = АвтозаполнениеБезКорректировки;
	ЭтаФорма.Элементы.ВеличинаАвтокорректировки.Доступность = Ложь;
	ЭтаФорма.Элементы.КомментарийКВариантуЗаполнения.Доступность = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПараметрыАвтозаполненияЯчейки()
	
	ТекущаяОбласть = ТабличныйДокумент.ТекущаяОбласть;
	ИмяПоказателя = ТекущаяОбласть.Имя;
	
	ИмяРаздела = СтруктураРеквизитовФормы.НаимТекущегоРаздела;
	
	НайденнаяСтрокаТВЗ = ВариантЗаполненияПоказателя(ИмяРаздела, ИмяПоказателя);
	
	Если НайденнаяСтрокаТВЗ <> Неопределено Тогда
		
		Если ТипЗнч(ТекущаяОбласть.Значение) = Тип("Число") Тогда
			Дельта = ТекущаяОбласть.Значение - НайденнаяСтрокаТВЗ.ЗначениеАвто;
		Иначе
			Дельта = 0;
		КонецЕсли;
		
		НайденнаяСтрокаТВЗ.Дельта = Дельта;
		
		ВеличинаАвтокорректировки = Дельта;
		
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ВариантЗаполненияПоказателя(ИмяРаздела, ИмяПоказателя)
	
	Если ИмяРаздела = Неопределено ИЛИ ИмяПоказателя = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	#Если ВебКлиент Тогда
		ПараметрыОтбора = Новый Структура("КодПоказателя", ИмяПоказателя);
		МассивСтрок = ЭтаФорма["ТаблицаВариантыЗаполнения" + ИмяРаздела][0].ТаблицаВариантовЗаполнения.НайтиСтроки(ПараметрыОтбора);
		Если МассивСтрок.Количество() > 0 Тогда
			Возврат МассивСтрок[0];
		КонецЕсли;
	#Иначе
		Для каждого ТекСтрока Из ЭтаФорма["ТаблицаВариантыЗаполнения" + ИмяРаздела][0].ТаблицаВариантовЗаполнения Цикл
			КодПоказателя = ТекСтрока.КодПоказателя;
			Если КодПоказателя = ИмяПоказателя Тогда
				Возврат ТекСтрока;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	#КонецЕсли
	
	Возврат Неопределено;
	
КонецФункции

&НаКлиенте
Процедура ПослеОтправкиОтчетаВБанк(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат Тогда
		СтатусОтчета = Нстр("ru = 'Отправлено'");
		ПоказатьОповещениеПользователя(НСтр("ru = 'Отчет отправлен.'"));
	Иначе
		СтатусОтчета = НСтр("ru = 'Не отправлено'");
		ПоказатьОповещениеПользователя(НСтр("ru = 'Отчет не отправлен.'"));
	КонецЕсли;
	
	ИзменитьСтатусОтчетаНаСервере(СтруктураРеквизитовФормы.мСохраненныйДок, СтатусОтчета);
	ОповеститьОбИзменении(СтруктураРеквизитовФормы.мСохраненныйДок);
	ОбновитьОтображениеСостоянияОтчета();
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ИзменитьСтатусОтчетаНаСервере(ОтчетСсылка, Статус)
	
	ОтчетОбъект = ОтчетСсылка.ПолучитьОбъект();
	ОтчетОбъект.СтатусОтчета = Статус;
	ОтчетОбъект.Записать();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СтатусОтчета(Знач Отчет)
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Отчет, "СтатусОтчета");
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура СформироватьДеревоРазделовОтчета(Форма)
	
	Форма["РазделыОтчета"].ПолучитьЭлементы().Очистить();
	
	СформироватьУзелДереваРазделовОтчета(Форма["мДеревоСтраницОтчета"], Форма["РазделыОтчета"]);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СформироватьУзелДереваРазделовОтчета(РодительскийУзелДереваСтраниц, РодительскийУзелРазделовОтчета)
	
	Для Каждого УзелДереваСтраницОтчета Из РодительскийУзелДереваСтраниц.ПолучитьЭлементы() Цикл
		Если УзелДереваСтраницОтчета.ПоказатьСтраницу = 1 Тогда
			УзелРазделовОтчета = РодительскийУзелРазделовОтчета.ПолучитьЭлементы().Добавить();
			УзелРазделовОтчета.КолонкаРазделыОтчета         = УзелДереваСтраницОтчета.Представление;
			УзелРазделовОтчета.КолонкаРазделыОтчетаСокрНаим = УзелДереваСтраницОтчета.ИмяСтраницы;
			УзелРазделовОтчета.ИндексКартинки               = 1;
			УзелРазделовОтчета.РазделМногостраничный        = Ложь;
			УзелРазделовОтчета.РазделМногострочный          = Ложь;
			
			СформироватьУзелДереваРазделовОтчета(УзелДереваСтраницОтчета, УзелРазделовОтчета)
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция НовоеОписаниеРазделаБезВводаДанных(ИмяМакета)
	
	ОписаниеРаздела = Новый Структура;
	
	ПредставлениеНезаполненногоРаздела = ПредставлениеНезаполненногоРаздела(МакетРаздела(ИмяМакета));
	
	ОписаниеРаздела.Вставить("АдресПредставления", ПоместитьВоВременноеХранилище(ПредставлениеНезаполненногоРаздела, УникальныйИдентификатор));
	ОписаниеРаздела.Вставить("АдресСведений", ПоместитьВоВременноеХранилище(Новый ТаблицаЗначений, УникальныйИдентификатор));
	
	Возврат ОписаниеРаздела;
	
КонецФункции

&НаСервере
Функция МакетРаздела(ИмяРаздела)
	
	ИмяМакетаРаздела = Сред(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета"))
	                 + "_" + ИмяРаздела;
	Отчет = Отчеты[Сред(Лев(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, ".Форма.") - 1), 7)];
	
	Возврат Отчет.ПолучитьМакет(ИмяМакетаРаздела);
	
КонецФункции

&НаСервере
Процедура ДополнитьДаннымиРазделаБезВводаСведений(РазделыБезВводаСведений, ИмяРаздела)
	
	ДанныеРаздела = Новый Структура;
	ДанныеРаздела.Вставить("Представление", ПолучитьИзВременногоХранилища(ЭтаФорма["СтруктураДанных" + ИмяРаздела].АдресПредставления));
	ДанныеРаздела.Вставить("Сведения", ПолучитьИзВременногоХранилища(ЭтаФорма["СтруктураДанных" + ИмяРаздела].АдресСведений));
	
	РазделыБезВводаСведений.Вставить(ИмяРаздела, ДанныеРаздела);
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьОписанияДревовидныхМногострочныхЧастей()
	
	// Свойства, общие для всех многострочных групп.
	СтруктураРеквизитовФормы.ДлинаИмениГруппы = 8;
	СтруктураРеквизитовФормы.ДлинаИмениГрафы  = 13;
	
	// Идентификаторы многоуровневых многострочных групп.
	СтруктураРеквизитовФормы.мИдГруппы7М1 = "П00007М1";
	СтруктураРеквизитовФормы.мИдГруппы7М2 = "П00007М2";
	
	СтруктураРеквизитовФормы.мИдГруппы8М1 = "П00008М1";
	СтруктураРеквизитовФормы.мИдГруппы8М2 = "П00008М2";
	
	// Группа П00007М1.
	ИменаГраф = Новый Массив;
	ИменаГраф.Добавить("П00007М100001");
	ИменаГраф.Добавить("П00007М100002");
	ИменаГраф.Добавить("П00007М100003");
	ИменаГраф.Добавить("П00007М100004");
	ИменаГраф.Добавить("П00007М100005");
	ИменаГраф.Добавить("П00007М100006");
	ИменаГраф.Добавить("П00007М100007");
	ИменаГраф.Добавить("П00007М100008");
	ИменаГраф.Добавить("П00007М100009");
	ИменаГраф.Добавить("П00007М100010");
	ИменаГраф.Добавить("П00007М100011");
	ИменаГраф.Добавить("П00007М100012");
	ИменаГраф.Добавить("П00007М100013");
	ИменаГраф.Добавить("П00007М100014");
	ИменаГраф.Добавить("П00007М100015");
	ИменаГраф.Добавить("П00007М100016");
	ИменаГраф.Добавить("П00007М100017");
	ИменаГраф.Добавить("П00007М100018");
	ИменаПодчиненныхГрупп = Новый Массив;
	ИменаПодчиненныхГрупп.Добавить(СтруктураРеквизитовФормы.мИдГруппы7М2);
	СтруктураМногострочныхЧастей.Вставить(
		СтруктураРеквизитовФормы.мИдГруппы7М1, Новый Структура(
		"ИменаГраф, ИсхКолСтрок, УровеньПодчинения, ИменаПодчиненныхГрупп",
		ИменаГраф, 1, 0, ИменаПодчиненныхГрупп));
	
	// Группа П00007М2.
	ИменаГраф = Новый Массив;
	ИменаГраф.Добавить("П00007М200001"); // Дата
	ИменаГраф.Добавить("П00007М200002"); // Сумма
	ИменаПодчиненныхГрупп = Новый Массив;
	СтруктураМногострочныхЧастей.Вставить(
		СтруктураРеквизитовФормы.мИдГруппы7М2, Новый Структура(
		"ИменаГраф, ИсхКолСтрок, УровеньПодчинения, ИменаПодчиненныхГрупп",
		ИменаГраф, 1, 1, ИменаПодчиненныхГрупп));
	
	// Группа П00008М1.
	ИменаГраф = Новый Массив;
	ИменаГраф.Добавить("П00008М100001");
	ИменаГраф.Добавить("П00008М100002");
	ИменаГраф.Добавить("П00008М100003");
	ИменаГраф.Добавить("П00008М100004");
	ИменаГраф.Добавить("П00008М100005");
	ИменаГраф.Добавить("П00008М100006");
	ИменаГраф.Добавить("П00008М100007");
	ИменаГраф.Добавить("П00008М100008");
	ИменаГраф.Добавить("П00008М100009");
	ИменаГраф.Добавить("П00008М100010");
	ИменаГраф.Добавить("П00008М100011");
	ИменаГраф.Добавить("П00008М100012");
	ИменаГраф.Добавить("П00008М100013");
	ИменаГраф.Добавить("П00008М100014");
	ИменаГраф.Добавить("П00008М100015");
	ИменаГраф.Добавить("П00008М100016");
	ИменаГраф.Добавить("П00008М100017");
	ИменаГраф.Добавить("П00008М100018");
	ИменаПодчиненныхГрупп = Новый Массив;
	ИменаПодчиненныхГрупп.Добавить(СтруктураРеквизитовФормы.мИдГруппы8М2);
	СтруктураМногострочныхЧастей.Вставить(
		СтруктураРеквизитовФормы.мИдГруппы8М1, Новый Структура(
		"ИменаГраф, ИсхКолСтрок, УровеньПодчинения, ИменаПодчиненныхГрупп",
		ИменаГраф, 1, 0, ИменаПодчиненныхГрупп));
	
	// Группа П00008М2.
	ИменаГраф = Новый Массив;
	ИменаГраф.Добавить("П00008М200001"); // Дата
	ИменаГраф.Добавить("П00008М200002"); // Сумма
	ИменаПодчиненныхГрупп = Новый Массив;
	СтруктураМногострочныхЧастей.Вставить(
		СтруктураРеквизитовФормы.мИдГруппы8М2, Новый Структура(
		"ИменаГраф, ИсхКолСтрок, УровеньПодчинения, ИменаПодчиненныхГрупп",
		ИменаГраф, 1, 1, ИменаПодчиненныхГрупп));
	
	СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей = СтруктураМногострочныхЧастей;
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьМногоуровневыеРазделы()
	
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела = Новый Массив;
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Добавить(1);
	
	мСтруктураМногоуровневыхРазделов = Новый Структура;
	
	СтруктураРаздела = Новый Структура;
	ИменаГруппМнЧ = Новый Массив;
	ИменаГруппМнЧ.Добавить(СтруктураРеквизитовФормы.мИдГруппы7М1);
	СтруктураРаздела.Вставить("ИменаГруппМнЧ", ИменаГруппМнЧ);
	мСтруктураМногоуровневыхРазделов.Вставить("ОСВ_66", СтруктураРаздела);
	
	СтруктураРаздела = Новый Структура;
	ИменаГруппМнЧ = Новый Массив;
	ИменаГруппМнЧ.Добавить(СтруктураРеквизитовФормы.мИдГруппы8М1);
	СтруктураРаздела.Вставить("ИменаГруппМнЧ", ИменаГруппМнЧ);
	мСтруктураМногоуровневыхРазделов.Вставить("ОСВ_67", СтруктураРаздела);
	
	// Формирование начальной структуры дерева разделов
	// с заполнением каждого уровня пустыми данными.
	//
	ДеревоДанных = Новый ДеревоЗначений;
	ДеревоДанных.Колонки.Добавить("Данные");
	ДеревоДанных.Колонки.Добавить("ДанныеМногострочныхЧастей");
	
	СохрТаблДокумент = Новый ТабличныйДокумент;
	СохрТаблДокумент.Вывести(ТабличныйДокумент);
	
	Для Каждого Элем Из мСтруктураМногоуровневыхРазделов Цикл
		Если Элем.Значение.Свойство("Подчиненность") Тогда
			Продолжить;
		КонецЕсли;
		
		ДеревоДанныхРаздела = ДеревоДанных.Скопировать();
		ТекВетка = ДеревоДанныхРаздела.Строки.Добавить();
		
		ТабличныйДокумент.Очистить();
		ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + Элем.Ключ));
		
		ДанныеТаблДокумента = ДанныеТабличногоДокумента(Элем.Ключ);
		
		ТекВетка.Данные = ДанныеТаблДокумента.Данные;
		ТекВетка.ДанныеМногострочныхЧастей = ДанныеТаблДокумента.ДанныеМногострочныхЧастей;
		
		ИнициализироватьПодчиненныеРазделы(Элем.Ключ, ТекВетка);
		
		СтруктураРеквизитовФормы.Вставить("АдресВоВрХранилищеДеревоДанных" + Элем.Ключ,
			ПоместитьВоВременноеХранилище(ДеревоДанныхРаздела, УникальныйИдентификатор));
	КонецЦикла;
	
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(СохрТаблДокумент);
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьПодчиненныеРазделы(Знач ИмяРаздела, Ветка)
	
	Если мСтруктураМногоуровневыхРазделов[ИмяРаздела].Свойство("ИменаПодчиненныхРазделов") Тогда
		
		ИменаПодчРазделов = мСтруктураМногоуровневыхРазделов[ИмяРаздела]["ИменаПодчиненныхРазделов"];
		Для Каждого ИмяПодчРаздела Из ИменаПодчРазделов Цикл
			ПодчВетка = Ветка.Строки.Добавить().Строки.Добавить();
			
			ТабличныйДокумент.Очистить();
			ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + ИмяПодчРаздела));
			
			ДанныеТаблДокумента = ДанныеТабличногоДокумента(ИмяПодчРаздела);
			
			ПодчВетка.Данные = ДанныеТаблДокумента.Данные;
			ПодчВетка.ДанныеМногострочныхЧастей = ДанныеТаблДокумента.ДанныеМногострочныхЧастей;
			
			ИнициализироватьПодчиненныеРазделы(ИмяПодчРаздела, ПодчВетка);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВставитьДревовиднуюДополнительнуюСтроку()
	
	ИмяТекОбласти = Элементы.ТабличныйДокумент.ТекущаяОбласть.Имя;
	
	Если СтрНайти(ИмяТекОбласти, "ДобавитьСтроку") Тогда
		ИмяОбластиПреемника = СтрЗаменить(ИмяТекОбласти, "ДобавитьСтроку", "");
		ИмяОбластиПреемника = СтрЗаменить(ИмяОбластиПреемника, "Значок", "");
		ИмяГруппы = Лев(ИмяОбластиПреемника, СтруктураРеквизитовФормы.ДлинаИмениГруппы);
		ИмяОбластиПреемника = "ДобавлениеСтроки" + ИмяОбластиПреемника;
	Иначе
		ИмяГруппы = Лев(ИмяТекОбласти, СтруктураРеквизитовФормы.ДлинаИмениГруппы);
		ИмяГрафы = Лев(ИмяТекОбласти, СтруктураРеквизитовФормы.ДлинаИмениГрафы);
		МаксИнд = ИндексПоказателя(ИмяТекОбласти);
		Координаты = СтрокаСКоординатамиПоказателя(ИмяТекОбласти);
		Пока ТабличныйДокумент.Области.Найти(ИмяГрафы + Координаты + СтрокаСИндексомПоказателя(МаксИнд + 1)) <> Неопределено Цикл
			МаксИнд = МаксИнд + 1;
		КонецЦикла;
		ИмяОбластиПреемника = "ДобавлениеСтроки" + ИмяГруппы + Координаты + СтрокаСИндексомПоказателя(МаксИнд);
	КонецЕсли;
	
	Если СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей.Свойство(ИмяГруппы) Тогда
		ВставитьДревовиднуюДопСтроку(ИмяГруппы, ИмяОбластиПреемника);
		СохранитьДанныеДревовидногоРаздела(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВставитьДревовиднуюДопСтроку(Знач ИмяГруппы, Знач ИмяОбластиПреемника, ЭтоАвтоВставкаПодчиненнойМнЧ = Ложь)
	
	НачИндекс = "_1";
	
	Если СтрНайти(ИмяОбластиПреемника, "ДобавлениеСтроки" + ИмяГруппы) > 0 Тогда
		
		ИскомаяОбласть = ТабличныйДокумент.Области.Найти("МногострочнаяЧасть" + ИмяГруппы);
		
		ВремТаблДок = ТабличныйДокумент.ПолучитьОбласть(ИскомаяОбласть.Имя);
		ВставляемаяОбласть = ВремТаблДок.Область(ИскомаяОбласть.Имя);
		ВставляемаяОбласть.Имя = "";
		
		НовКоординаты = СтрокаСКоординатамиПоказателя(ИмяОбластиПреемника);
		
		КолУровнейПодчиненности = СтрЧислоВхождений(НовКоординаты, "_");
		НачКоординаты = "";
		Для НомУр = 1 По КолУровнейПодчиненности Цикл
			НачКоординаты = НачКоординаты + НачИндекс;
		КонецЦикла;
		
		ПреИндекс_Число = ИндексПоказателя(ИмяОбластиПреемника);
		НовИндекс_Число = ?(ЭтоАвтоВставкаПодчиненнойМнЧ, 1, ПреИндекс_Число + 1);
		
		ПреИндекс = СтрокаСИндексомПоказателя(ПреИндекс_Число);
		НовИндекс = СтрокаСИндексомПоказателя(НовИндекс_Число);
		
		НачПостфикс = ИмяГруппы + НачКоординаты + НачИндекс;
		ПреПостфикс = ИмяГруппы + НовКоординаты + ПреИндекс;
		НовПостфикс = ИмяГруппы + НовКоординаты + НовИндекс;
		
		МассивИменГраф = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппы]["ИменаГраф"];
		
		Для каждого ИмяГрафы Из МассивИменГраф Цикл
			
			НачИмяОбл = ИмяГрафы + НачКоординаты + НачИндекс;
			НовИмяОбл = ИмяГрафы + НовКоординаты + НовИндекс;
			
			ОбластьЯчейки = ВремТаблДок.Области[НачИмяОбл];
			ОбластьЯчейки.Имя = НовИмяОбл;
			
			Если ОбластьЯчейки.СодержитЗначение = Истина Тогда
				ОбластьЯчейки.Очистить();
			КонецЕсли;
			
		КонецЦикла;
		
		Обл = ВремТаблДок.Области.Найти("УдалитьСтроку" + НачПостфикс);
		Если Обл <> Неопределено Тогда
			Обл.Имя = "УдалитьСтроку" + НовПостфикс;
		КонецЕсли;
		
		Если ЭтоАвтоВставкаПодчиненнойМнЧ Тогда
			Обл = ВремТаблДок.Области.Найти("УдалитьСтроку" + НовПостфикс);
			Если Обл <> Неопределено Тогда
				Обл.Гиперссылка = Ложь;
				Обл.Текст = "";
			КонецЕсли;
		Иначе
			Обл = ВремТаблДок.Области.Найти("УдалитьСтроку" + НовПостфикс);
			Если Обл <> Неопределено Тогда
				Обл.Гиперссылка = Истина;
				Обл.Текст = "х";
				Если НовИндекс_Число = 2 Тогда
					Если Обл <> Неопределено Тогда
						Обл = ТабличныйДокумент.Области.Найти("УдалитьСтроку" + ПреПостфикс);
						Обл.Гиперссылка = Истина;
						Обл.Текст = "х";
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Обл = ТабличныйДокумент.Области.Найти("ДобавитьСтроку" + ПреПостфикс);
		Если Обл <> Неопределено Тогда
			Обл.Имя = "ДобавитьСтроку" + НовПостфикс;
		КонецЕсли;
		Обл = ТабличныйДокумент.Области.Найти("ДобавитьСтрокуЗначок" + ПреПостфикс);
		Если Обл <> Неопределено Тогда
			Обл.Имя = "ДобавитьСтрокуЗначок" + НовПостфикс;
		КонецЕсли;
		
		ОблПреемник = ТабличныйДокумент.Области.Найти(ИмяОбластиПреемника);
		ОблПреемник.Имя = "ДобавлениеСтроки" + НовПостфикс;
		
		// Изменения в оформлении ячеек: установка значения "НетЛинии"/"Сплошная" для
		// свойства "ГраницаСнизу" (в случае задания номеров специальных колонок):
		НомераСпецКолонок = Неопределено;
		СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппы].Свойство(
			"КолонкиСИзмНижнГраницей", НомераСпецКолонок);
		Если НомераСпецКолонок <> Неопределено Тогда
			Для каждого НомКолонки Из НомераСпецКолонок Цикл
				// Удаление линии в определенных колонках последней (до добавления) строки.
				Если НЕ ЭтоАвтоВставкаПодчиненнойМнЧ Тогда
					Обл = ТабличныйДокумент.Область(
						ОблПреемник.Верх - 1, НомКолонки, ОблПреемник.Верх - 1, НомКолонки);
					Если Обл <> Неопределено Тогда
						Обл.ГраницаСнизу = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.НетЛинии);
					КонецЕсли;
				КонецЕсли;
				// Установка линии в определенных колонках добавляемой строки.
				Обл = ВремТаблДок.Область(
					ВставляемаяОбласть.Низ, НомКолонки, ВставляемаяОбласть.Низ, НомКолонки);
				Если Обл <> Неопределено Тогда
					Обл.ГраницаСнизу = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		ОблПреемник_ = ТабличныйДокумент.Область(
			ОблПреемник.Верх, , ОблПреемник.Верх + ИскомаяОбласть.Низ - ИскомаяОбласть.Верх, );
		ТабличныйДокумент.ВставитьОбласть(
			ВставляемаяОбласть, ОблПреемник_, ТипСмещенияТабличногоДокумента.ПоВертикали);
		
		Если НЕ ЭтоАвтоВставкаПодчиненнойМнЧ Тогда
			// Установка текущей области после добавления строки.
			НовИмяТекОбл = МассивИменГраф[0] + НовКоординаты + НовИндекс;
			НовТекОбл = ТабличныйДокумент.Области[НовИмяТекОбл];
			Элементы.ТабличныйДокумент.ТекущаяОбласть = НовТекОбл;
		КонецЕсли;
		
	КонецЕсли;
	
	ИменаПодчиненныхГрупп = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[
		ИмяГруппы]["ИменаПодчиненныхГрупп"];
	Для каждого ИмяПодчГруппы Из ИменаПодчиненныхГрупп Цикл
		НовКоординатыДляПодчОбласти = НовКоординаты + НовИндекс;
		
		КолУровнейПодчиненности = СтрЧислоВхождений(НовКоординатыДляПодчОбласти, "_");
		НачКоординатыДляПодчОбласти = "";
		Для НомУр = 1 По КолУровнейПодчиненности Цикл
			НачКоординатыДляПодчОбласти = НачКоординатыДляПодчОбласти + НачИндекс;
		КонецЦикла;
		
		НачИндВставляемойОбласти = НачИндекс;
		
		ИскомаяОбласть = ТабличныйДокумент.Области.Найти(
			"ДобавлениеСтроки" + ИмяПодчГруппы + НачКоординатыДляПодчОбласти + НачИндВставляемойОбласти);
		
		Если ИскомаяОбласть = Неопределено Тогда
			НачИндВставляемойОбласти = 1;
			Пока ТабличныйДокумент.Области.Найти("ДобавлениеСтроки" + ИмяПодчГруппы
				+ НачКоординатыДляПодчОбласти + "_" + Формат(НачИндВставляемойОбласти, "ЧГ=")) = Неопределено Цикл
				НачИндВставляемойОбласти = НачИндВставляемойОбласти + 1;
			КонецЦикла;
			НачИндВставляемойОбласти = "_" + Формат(НачИндВставляемойОбласти, "ЧГ=");
			ИскомаяОбласть = ТабличныйДокумент.Области.Найти(
				"ДобавлениеСтроки" + ИмяПодчГруппы + НачКоординатыДляПодчОбласти + НачИндВставляемойОбласти);
		КонецЕсли;
		
		ВремТабличныйДокумент = ТабличныйДокумент.ПолучитьОбласть(ИскомаяОбласть.Имя);
		ВставляемаяОбласть = ВремТабличныйДокумент.Область(ИскомаяОбласть.Имя);
		Для каждого ОбластьЯчейки Из ВремТабличныйДокумент.Области Цикл
			ОбластьЯчейки.Имя = СтрЗаменить(ОбластьЯчейки.Имя,
				ИмяПодчГруппы + НачКоординатыДляПодчОбласти + НачИндВставляемойОбласти,
				ИмяПодчГруппы + НовКоординатыДляПодчОбласти + НачИндекс);
		КонецЦикла;
		ИмяОбластиПреемникаДляПодчОбласти = СтрЗаменить(ИмяОбластиПреемника, ПреПостфикс, НовПостфикс);
		ОбластьПреемник = ТабличныйДокумент.Области.Найти(ИмяОбластиПреемникаДляПодчОбласти);
		
		ТабличныйДокумент.ВставитьОбласть(ВставляемаяОбласть, ОбластьПреемник, ТипСмещенияТабличногоДокумента.ПоВертикали);
		
		ИмяОбластиПреемникаДляПодчОбласти = "ДобавлениеСтроки" + ИмяПодчГруппы + НовКоординатыДляПодчОбласти + НачИндекс;
		
		ВставитьДревовиднуюДопСтроку(ИмяПодчГруппы, ИмяОбластиПреемникаДляПодчОбласти, Истина);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьДопСтрокуНаСервере()
	
	ИмяТекОбласти = Элементы.ТабличныйДокумент.ТекущаяОбласть.Имя;
	
	УдалитьДопСтроку(ИмяТекОбласти);
	
	СохранитьДанныеДревовидногоРаздела(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
	Расчет(ЭтаФорма, СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
КонецПроцедуры

&НаСервере
Процедура УдалитьДопСтроку(ИмяОбласти)
	
	ИмяГруппы = СтрЗаменить(ИмяОбласти, "УдалитьСтроку", "");
	ИмяГруппы = Лев(ИмяГруппы, СтруктураРеквизитовФормы.ДлинаИмениГруппы);
	
	ТекКоординаты = СтрокаСКоординатамиПоказателя(ИмяОбласти);
	
	ТекИндекс_Число = ИндексПоказателя(ИмяОбласти);
	ТекИндекс = СтрокаСИндексомПоказателя(ТекИндекс_Число);
	ТекПостфикс = ИмяГруппы + ТекКоординаты + ТекИндекс;
	
	МассивИменГраф = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппы]["ИменаГраф"];
	ИмяПервойГрафы = МассивИменГраф[0];
	
	ОблПервУдаляемогоПоказателя = ТабличныйДокумент.Область(ИмяПервойГрафы + ТекКоординаты + ТекИндекс);
	ОблУдалитьСтроку = ТабличныйДокумент.Область("УдалитьСтроку" + ИмяГруппы + ТекКоординаты + ТекИндекс);
	СмещениеОтВерхаМнЧ = ОблПервУдаляемогоПоказателя.Верх - ОблУдалитьСтроку.Верх;
	
	ОблДобавлениеСтроки = ТабличныйДокумент.Области.Найти("ДобавлениеСтроки" + ТекПостфикс);
	
	// Удаляется последняя строка.
	//
	Если ОблДобавлениеСтроки <> Неопределено Тогда
		
		ПреИндекс_Число = ТекИндекс_Число - 1;
		ПреИндекс = СтрокаСИндексомПоказателя(ПреИндекс_Число);
		ПреПостфикс = ИмяГруппы + ТекКоординаты + ПреИндекс;
		
		ВерхУдОбласти = ОблПервУдаляемогоПоказателя.Верх - СмещениеОтВерхаМнЧ;
		НизУдОбласти  = ОблДобавлениеСтроки.Верх - 1;
		
		УдаляемаяОбласть = ТабличныйДокумент.Область(ВерхУдОбласти, , НизУдОбласти, );
		ТабличныйДокумент.УдалитьОбласть(УдаляемаяОбласть, ТипСмещенияТабличногоДокумента.ПоВертикали);
		
		Обл = ТабличныйДокумент.Области.Найти("ДобавлениеСтроки" + ТекПостфикс);
		Обл.Имя = "ДобавлениеСтроки" + ПреПостфикс;
		Обл = ТабличныйДокумент.Области.Найти("ДобавитьСтроку" + ТекПостфикс);
		Обл.Имя = "ДобавитьСтроку" + ПреПостфикс;
		Обл = ТабличныйДокумент.Области.Найти("ДобавитьСтрокуЗначок" + ТекПостфикс);
		Обл.Имя = "ДобавитьСтрокуЗначок" + ПреПостфикс;
		
		Если ПреИндекс_Число = 1 Тогда
			Обл = ТабличныйДокумент.Область("УдалитьСтроку" + ПреПостфикс);
			Обл.Гиперссылка = Ложь;
			Обл.Текст = "";
		КонецЕсли;
		
		// Изменения в оформлении ячеек в случае задания номеров специальных колонок.
		НомераСпецКолонок = Неопределено;
		СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппы].Свойство(
			"КолонкиСИзмНижнГраницей", НомераСпецКолонок);
		Если НомераСпецКолонок <> Неопределено Тогда
			Для каждого НомКолонки Из НомераСпецКолонок Цикл
				// Установка линии в определенных колонках последней (после удаления) строки.
				Обл = ТабличныйДокумент.Область(
					ВерхУдОбласти - 1, НомКолонки, ВерхУдОбласти - 1, НомКолонки);
				Если Обл <> Неопределено Тогда
					Обл.ГраницаСнизу = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		НовИмяТекОбл = ИмяПервойГрафы + ТекКоординаты + ПреИндекс;
		Элементы.ТабличныйДокумент.ТекущаяОбласть = ТабличныйДокумент.Области[НовИмяТекОбл];
		
	// Удаляемая строка не последняя.
	//
	Иначе
		
		НовИндекс_Число = ТекИндекс_Число + 1;
		НовИндекс = СтрокаСИндексомПоказателя(НовИндекс_Число);
		
		ОблСледующегоПоказателя = ТабличныйДокумент.Область(ИмяПервойГрафы + ТекКоординаты + НовИндекс);
		
		ВерхУдОбласти = ОблПервУдаляемогоПоказателя.Верх - СмещениеОтВерхаМнЧ;
		НизУдОбласти  = ОблСледующегоПоказателя.Верх - СмещениеОтВерхаМнЧ - 1;
		
		УдаляемаяОбласть = ТабличныйДокумент.Область(ВерхУдОбласти, , НизУдОбласти, );
		
		// Сохранение свойств "эталонных" областей для последующего восстановления.
		СпОбластейДляВосстановленияПослеУдаления = Новый СписокЗначений;
		ВремТаблДок = ТабличныйДокумент.ПолучитьОбласть(УдаляемаяОбласть.Имя);
		Для каждого ЭлемСтруктуры Из СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей Цикл
			ИмяИскомойобласти = "МногострочнаяЧасть" + ЭлемСтруктуры.Ключ;
			Искомаяобласть = ВремТаблДок.Области.Найти(ИмяИскомойобласти);
			Если Искомаяобласть <> Неопределено Тогда
				ВысотаОбл = Искомаяобласть.Низ - Искомаяобласть.Верх + 1;
				СпОбластейДляВосстановленияПослеУдаления.Добавить(ВысотаОбл, ЭлемСтруктуры.Ключ);
			КонецЕсли;
		КонецЦикла;
		
		ТабличныйДокумент.УдалитьОбласть(УдаляемаяОбласть, ТипСмещенияТабличногоДокумента.ПоВертикали);
		
		НовИндекс_Число = ТекИндекс_Число;
		
		// Реиндексация имен областей текущей многострочной части после удаления строки.
		Пока ТабличныйДокумент.Области.Найти(ИмяПервойГрафы + ТекКоординаты
			+ СтрокаСИндексомПоказателя(НовИндекс_Число + 1)) <> Неопределено Цикл
			
			ПреИндекс = СтрокаСИндексомПоказателя(НовИндекс_Число + 1);
			НовИндекс = СтрокаСИндексомПоказателя(НовИндекс_Число);
			
			Для каждого ИмяГрафы Из МассивИменГраф Цикл
				ПреИмяОбл = ИмяГрафы + ТекКоординаты + ПреИндекс;
				НовИмяОбл = ИмяГрафы + ТекКоординаты + НовИндекс;
				
				ОбластьЯчейки = ТабличныйДокумент.Области[ПреИмяОбл];
				ОбластьЯчейки.Имя = НовИмяОбл;
			КонецЦикла;
			
			ПреПостфикс = ИмяГруппы + ТекКоординаты + ПреИндекс;
			НовПостфикс = ИмяГруппы + ТекКоординаты + НовИндекс;
			
			Обл = ТабличныйДокумент.Области.Найти("УдалитьСтроку" + ПреПостфикс);
			Обл.Имя = "УдалитьСтроку" + НовПостфикс;
			
			// Обновление координат в именах областей подчиненных многострочных частей.
			ИменаПодчиненныхГрупп = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[
				ИмяГруппы]["ИменаПодчиненныхГрупп"];
			Для каждого ИмяПодчГруппы Из ИменаПодчиненныхГрупп Цикл
				ПарамРеинд = Новый Структура("ИмяГруппы,ПреКоординаты,НовКоординаты",
					ИмяПодчГруппы, ТекКоординаты + ПреИндекс, ТекКоординаты + НовИндекс);
				РеиндексироватьПодчиненныеДопСтроки(ПарамРеинд);
			КонецЦикла;
			
			НовИндекс_Число = НовИндекс_Число + 1;
			
		КонецЦикла;
		
		ПреИндекс = СтрокаСИндексомПоказателя(НовИндекс_Число);
		НовИндекс = СтрокаСИндексомПоказателя(НовИндекс_Число - 1);
		
		ПреПостфикс = ИмяГруппы + ТекКоординаты + ПреИндекс;
		НовПостфикс = ИмяГруппы + ТекКоординаты + НовИндекс;
		
		Обл = ТабличныйДокумент.Области.Найти("ДобавлениеСтроки" + ПреПостфикс);
		Обл.Имя = "ДобавлениеСтроки" + НовПостфикс;
		Обл = ТабличныйДокумент.Области.Найти("ДобавитьСтроку" + ПреПостфикс);
		Обл.Имя = "ДобавитьСтроку" + НовПостфикс;
		Обл = ТабличныйДокумент.Области.Найти("ДобавитьСтрокуЗначок" + ПреПостфикс);
		Обл.Имя = "ДобавитьСтрокуЗначок" + НовПостфикс;
		
		// Восстановление удаленных "эталонных" областей по предварительно сохраненным свойствам.
		НачИндекс = "_1";
		Для каждого ЭлемСписка Из СпОбластейДляВосстановленияПослеУдаления Цикл
			НачКоординаты = "";
			УровеньПодчиненияГруппы = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[
				ЭлемСписка.Представление]["УровеньПодчинения"];
			
			Для НомУр = 1 По УровеньПодчиненияГруппы Цикл
				НачКоординаты = НачКоординаты + НачИндекс;
			КонецЦикла;
			
			ИмяГрафыДляПозиционирования = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[
				ЭлемСписка.Представление]["ИменаГраф"][0];
			
			ИмяОбластиДляПозиционирования = ИмяГрафыДляПозиционирования + НачКоординаты + НачИндекс;
			ОбластьДляПозиционирования = ТабличныйДокумент.Область(ИмяОбластиДляПозиционирования);
			
			Если ЭлемСписка.Представление = ИмяГруппы Тогда
				ВосстОбластьВерх = ОбластьДляПозиционирования.Верх - СмещениеОтВерхаМнЧ;
			Иначе
				ВосстОбластьВерх = ОбластьДляПозиционирования.Верх;
			КонецЕсли;
			ВосстОбластьНиз  = ВосстОбластьВерх + ЭлемСписка.Значение - 1;
			
			ВосстОбласть = ТабличныйДокумент.Область(ВосстОбластьВерх, , ВосстОбластьНиз, );
			ВосстОбласть.Имя = "МногострочнаяЧасть" + ЭлемСписка.Представление;
		КонецЦикла;
		
		Если НовИндекс = НачИндекс Тогда // после удаления осталась единственная строка
			Обл = ТабличныйДокумент.Область("УдалитьСтроку" + НовПостфикс);
			Обл.Гиперссылка = Ложь;
			Обл.Текст = "";
		КонецЕсли;
		
		НовИмяТекОбл = ИмяПервойГрафы + ТекКоординаты + ТекИндекс;
		Элементы.ТабличныйДокумент.ТекущаяОбласть = ТабличныйДокумент.Области[НовИмяТекОбл];
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура РеиндексироватьПодчиненныеДопСтроки(ПараметрыРеиндексации)
	
	ИмяГруппы = ПараметрыРеиндексации["ИмяГруппы"];
	ПреКоординаты = ПараметрыРеиндексации["ПреКоординаты"];
	НовКоординаты = ПараметрыРеиндексации["НовКоординаты"];
	
	МассивИменГраф = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппы]["ИменаГраф"];
	ИмяПервойГрафы = МассивИменГраф[0];
	
	Инд_Число = 1;
	Пока ТабличныйДокумент.Области.Найти(ИмяПервойГрафы
		+ ПреКоординаты + СтрокаСИндексомПоказателя(Инд_Число)) <> Неопределено Цикл
		
		Инд = СтрокаСИндексомПоказателя(Инд_Число);
		
		Для каждого ИмяГрафы Из МассивИменГраф Цикл
			ПреИмяОбл = ИмяГрафы + ПреКоординаты + Инд;
			НовИмяОбл = ИмяГрафы + НовКоординаты + Инд;
			
			ОбластьЯчейки = ТабличныйДокумент.Области[ПреИмяОбл];
			ОбластьЯчейки.Имя = НовИмяОбл;
		КонецЦикла;
		
		ПреПостфикс = ИмяГруппы + ПреКоординаты + Инд;
		НовПостфикс = ИмяГруппы + НовКоординаты + Инд;
		
		Обл = ТабличныйДокумент.Области.Найти("УдалитьСтроку" + ПреПостфикс);
		Обл.Имя = "УдалитьСтроку" + НовПостфикс;
		
		ИменаПодчиненныхГрупп = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппы]["ИменаПодчиненныхГрупп"];
		Для каждого ИмяПодчГруппы Из ИменаПодчиненныхГрупп Цикл
			ПарамРеинд = Новый Структура("ИмяГруппы,ПреКоординаты,НовКоординаты",
				ИмяПодчГруппы, ПреКоординаты + Инд, НовКоординаты + Инд);
			РеиндексироватьПодчиненныеДопСтроки(ПарамРеинд);
		КонецЦикла;
		
		Инд_Число = Инд_Число + 1;
		
	КонецЦикла;
	
	Инд = СтрокаСИндексомПоказателя(Инд_Число - 1);
	
	ПреПостфикс = ИмяГруппы + ПреКоординаты + Инд;
	НовПостфикс = ИмяГруппы + НовКоординаты + Инд;
	
	Обл = ТабличныйДокумент.Области.Найти("ДобавлениеСтроки" + ПреПостфикс);
	Обл.Имя = "ДобавлениеСтроки" + НовПостфикс;
	Обл = ТабличныйДокумент.Области.Найти("ДобавитьСтроку" + ПреПостфикс);
	Обл.Имя = "ДобавитьСтроку" + НовПостфикс;
	Обл = ТабличныйДокумент.Области.Найти("ДобавитьСтрокуЗначок" + ПреПостфикс);
	Обл.Имя = "ДобавитьСтрокуЗначок" + НовПостфикс;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ИндексПоказателя(Знач ИмяОбласти)
	
	МассивСтрок = СтрРазделить(ИмяОбласти, "_");
	
	КолСтрок = МассивСтрок.Количество();
	
	Если КолСтрок = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ИндексСтрока = МассивСтрок[КолСтрок - 1];
	Если СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(ИндексСтрока) Тогда
		Возврат Число(ИндексСтрока);
	КонецЕсли;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СтрокаСИндексомПоказателя(Знач Индекс)
	
	Если ТипЗнч(Индекс) <> Тип("Число") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат "_" + Формат(Индекс, "ЧГ=");
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СтрокаСКоординатамиПоказателя(Знач Координаты)
	
	СтрокаСКоординатами = "";
	
	Если ТипЗнч(Координаты) = Тип("Массив") Тогда
		Для каждого КоординатаЧисло Из Координаты Цикл
			Если ТипЗнч(КоординатаЧисло) <> Тип("Число") Тогда
				Возврат Неопределено;
			КонецЕсли;
			СтрокаСКоординатами = СтрокаСКоординатами + "_" + Формат(КоординатаЧисло, "ЧГ=");
		КонецЦикла;
	ИначеЕсли ТипЗнч(Координаты) = Тип("Строка") Тогда
		МассивСтрок = СтрРазделить(Координаты, "_");
		КолСтрок = МассивСтрок.Количество();
		Если КолСтрок = 0 Тогда
			Возврат Неопределено;
		КонецЕсли;
		МассивСтрок.Удалить(КолСтрок - 1);
		МассивСтрок.Удалить(0);
		Для каждого КоординатаСтрока Из МассивСтрок Цикл
			Если СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(КоординатаСтрока) Тогда
				СтрокаСКоординатами = СтрокаСКоординатами + "_" + Формат(КоординатаСтрока, "ЧГ=");
			Иначе
				Возврат Неопределено;
			КонецЕсли;
		КонецЦикла;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат СтрокаСКоординатами;
	
КонецФункции

&НаСервере
Процедура СохранитьДанныеДревовидногоРаздела(НаимРаздела, ВеткаРаздела = Неопределено)
	
	// Многоуровневые разделы.
	Если мСтруктураМногоуровневыхРазделов.Свойство(НаимРаздела) Тогда
		
		Если ВеткаРаздела = Неопределено Тогда
			
			СтруктураРаздела = мСтруктураМногоуровневыхРазделов[НаимРаздела];
			
			ИмяГлРаздела = Неопределено;
			СтруктураРаздела.Свойство("ИмяГлавногоРаздела", ИмяГлРаздела);
			ИмяГлРаздела = ?(ИмяГлРаздела = Неопределено, НаимРаздела, ИмяГлРаздела);
			
			ДеревоДанныхРаздела = ПолучитьИзВременногоХранилища(
				СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяГлРаздела]);
			
			ТекВетка = ДеревоДанныхРаздела;
			
			Для каждого НомерСтроки Из СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела Цикл
				ТекВетка = ТекВетка.Строки[0];
			КонецЦикла;
			
		Иначе
			
			ТекВетка = ВеткаРаздела;
			
		КонецЕсли;
		
		ДанныеТаблДокумента = ДанныеТабличногоДокумента(НаимРаздела);
		
		ТекВетка.Данные = ДанныеТаблДокумента.Данные;
		ТекВетка.ДанныеМногострочныхЧастей = ДанныеТаблДокумента.ДанныеМногострочныхЧастей;
		
		СтруктураРеквизитовФормы.Вставить("АдресВоВрХранилищеДеревоДанных" + ИмяГлРаздела,
			ПоместитьВоВременноеХранилище(ДеревоДанныхРаздела, УникальныйИдентификатор));
		
		ДеревоДанныхРаздела = Неопределено;
		
	// Обычные разделы.
	Иначе
		
		ЭтаФорма["СтруктураДанных" + НаимРаздела] = ДанныеТабличногоДокумента(НаимРаздела);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиДанныеВТабличныйДокументНаСервере(ИмяТекРаздела, НовыеНомераСтрокМногоуровнегоРаздела = Неопределено)
	
	СохранитьДанныеДревовидногоРаздела(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
	ВывестиДанныеВТабличныйДокумент(ИмяТекРаздела, НовыеНомераСтрокМногоуровнегоРаздела);
	
	СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяТекРаздела;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиДанныеВТабличныйДокумент(ИмяТекРаздела, НовыеНомераСтрокМногоуровнегоРаздела = Неопределено)
	
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(Отчеты[
		Сред(Лев(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, ".Форма.") - 1), 7)].ПолучитьМакет(
		Сред(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + ИмяТекРаздела));
	
	// Многоуровневые разделы.
	//
	Если мСтруктураМногоуровневыхРазделов.Свойство(ИмяТекРаздела) Тогда
		
		СтруктураРаздела = мСтруктураМногоуровневыхРазделов[ИмяТекРаздела];
		
		ИмяГлРаздела = Неопределено;
		СтруктураРаздела.Свойство("ИмяГлавногоРаздела", ИмяГлРаздела);
		ИмяГлРаздела = ?(ИмяГлРаздела = Неопределено, ИмяТекРаздела, ИмяГлРаздела);
		
		ДеревоДанныхРаздела = ПолучитьИзВременногоХранилища(
			СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяГлРаздела]);
		
		ТекВетка = ДеревоДанныхРаздела;
		
		Для каждого НомерСтроки Из НовыеНомераСтрокМногоуровнегоРаздела Цикл
			ТекВетка = ТекВетка.Строки[НомерСтроки - 1];
		КонецЦикла;
		
		// Вывод немногострочных данных.
		Для Каждого ЭлСтруктуры Из ТекВетка.Данные Цикл
			Обл = ТабличныйДокумент.Области.Найти(ЭлСтруктуры.Ключ);
			Если Обл <> Неопределено Тогда
				Обл.Значение = ЭлСтруктуры.Значение;
			КонецЕсли;
		КонецЦикла;
		
		// Добавление в многострочную часть необходимого количества
		// дополнительных строк, вывод многострочных данных.
		ВывестиМногострочныеДанныеВТабличныйДокумент(ТекВетка);
		
		ДеревоДанныхРаздела = Неопределено;
		
		СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела = НовыеНомераСтрокМногоуровнегоРаздела;
		
	// Обычные разделы.
	//
	Иначе
		
		Для Каждого ЭлСтруктуры Из ЭтаФорма["СтруктураДанных" + ИмяТекРаздела] Цикл
			Обл = ТабличныйДокумент.Области.Найти(ЭлСтруктуры.Ключ);
			Если Обл <> Неопределено Тогда
				Обл.Значение = ЭлСтруктуры.Значение;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиМногострочныеДанныеВТабличныйДокумент(Ветка, Координаты = "")
	
	ДанныеМнЧ = Ветка.ДанныеМногострочныхЧастей;
	
	Для каждого ЭлемСтруктуры Из ДанныеМнЧ Цикл
		
		ДеревоМнЧ = ЭлемСтруктуры.Значение;
		
		Для Инд_Число = 0 По ДеревоМнЧ.Строки.Количество() - 1 Цикл
			
			// Добавление необходимого количества доп. строк.
			Если Инд_Число > 0 Тогда
				Инд = СтрокаСИндексомПоказателя(Инд_Число);
				ИмяОбластиПреемника = "ДобавлениеСтроки" + ЭлемСтруктуры.Ключ + Координаты + Инд;
				ВставитьДревовиднуюДопСтроку(ЭлемСтруктуры.Ключ, ИмяОбластиПреемника);
			КонецЕсли;
			
			// Обработка гиперссылок удаления строки, если эта строка единственная.
			Если ДеревоМнЧ.Строки.Количество() = 1 Тогда
				Инд = СтрокаСИндексомПоказателя(1);
				ИмяИскомойОбласти = "УдалитьСтроку" + ЭлемСтруктуры.Ключ + Координаты + Инд;
				Обл = ТабличныйДокумент.Области.Найти(ИмяИскомойОбласти);
				Если Обл <> Неопределено Тогда
					Обл.Гиперссылка = Ложь;
					Обл.Текст = "";
				КонецЕсли;
			КонецЕсли;
			
			// Вывод многострочных данных.
			Данные = ДеревоМнЧ.Строки[Инд_Число].Данные;
			Инд = СтрокаСИндексомПоказателя(Инд_Число + 1);
			Для Каждого ЭлСтруктуры Из Данные Цикл
				ИмяИскомойОбласти = ЭлСтруктуры.Ключ + Координаты + Инд;
				Обл = ТабличныйДокумент.Области.Найти(ИмяИскомойОбласти);
				Если Обл <> Неопределено Тогда
					Обл.Значение = ЭлСтруктуры.Значение;
				КонецЕсли;
			КонецЦикла;
			
			// Добавление необходимого количества подчиненных доп. строк.
			ПодчВетка = ДеревоМнЧ.Строки[Инд_Число];
			ПодчКоординаты = Координаты + Инд;
			ВывестиМногострочныеДанныеВТабличныйДокумент(ПодчВетка, ПодчКоординаты);
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ДанныеТабличногоДокумента(НаимРаздела)
	
	ДанныеТаблДокумента = Новый Структура;
	
	// Многоуровневые разделы.
	//
	Если мСтруктураМногоуровневыхРазделов.Свойство(НаимРаздела) Тогда
		
		СтруктураРаздела = мСтруктураМногоуровневыхРазделов[НаимРаздела];
		
		ИменаГруппМнЧ = Неопределено;
		СтруктураРаздела.Свойство("ИменаГруппМнЧ", ИменаГруппМнЧ);
		РазделСодержитМнЧ = (ИменаГруппМнЧ <> Неопределено);
		
		СтруктураДанных = Новый Структура();
		Для Каждого ТекущаяОбласть Из ТабличныйДокумент.Области Цикл
			Если СтрЧислоВхождений(Тип(ТекущаяОбласть), "Рисунок") = 0
				И ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник
				И ТекущаяОбласть.СодержитЗначение = Истина Тогда
				Если РазделСодержитМнЧ Тогда
					Если МногострочнаяЧастьТекущейОбласти(ЭтаФорма, ТекущаяОбласть.Имя) = Неопределено Тогда
						СтруктураДанных.Вставить(ТекущаяОбласть.Имя, ТекущаяОбласть.Значение);
					КонецЕсли;
				Иначе
					СтруктураДанных.Вставить(ТекущаяОбласть.Имя, ТекущаяОбласть.Значение);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		ДанныеТаблДокумента.Вставить("Данные", СтруктураДанных);
		
		СтруктураДанныхМногострочныхЧастей = Новый Структура;
		Если РазделСодержитМнЧ Тогда
			Для каждого ИмяГруппыМнЧ Из СтруктураРаздела["ИменаГруппМнЧ"] Цикл
				ЭлемСтруктуры = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппыМнЧ];
				Если ЭлемСтруктуры["УровеньПодчинения"] = 0 Тогда
					ДеревоДанных = Новый ДеревоЗначений;
					ДеревоДанных.Колонки.Добавить("Данные");
					ДеревоДанных.Колонки.Добавить("ДанныеМногострочныхЧастей");
					СформироватьДеревоМногострочнойЧастиПоДаннымТабличногоДокумента(ИмяГруппыМнЧ, ДеревоДанных);
					СтруктураДанныхМногострочныхЧастей.Вставить(ИмяГруппыМнЧ, ДеревоДанных);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		ДанныеТаблДокумента.Вставить("ДанныеМногострочныхЧастей", СтруктураДанныхМногострочныхЧастей);
		
	// Обычные разделы.
	//
	Иначе
		
		Для Инд = 0 По ТабличныйДокумент.Области.Количество() - 1 Цикл
			
			ТекОбласть = ТабличныйДокумент.Области[Инд];
			
			Если СтрЧислоВхождений(Тип(ТекОбласть), "Рисунок") = 0
				И ТекОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник
				И ТекОбласть.СодержитЗначение = Истина Тогда
				
				ДанныеТаблДокумента.Вставить(ТекОбласть.Имя, ТекОбласть.Значение);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ДанныеТаблДокумента;
	
КонецФункции

&НаСервере
Процедура СформироватьДеревоМногострочнойЧастиПоДаннымТабличногоДокумента(ИмяГруппы, ДеревоДанных, Координаты = "")
	
	Если НЕ СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей.Свойство(ИмяГруппы) Тогда
		Возврат;
	КонецЕсли;
	
	МассивИменГраф = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппы]["ИменаГраф"];
	ИмяПервойГрафы = МассивИменГраф[0];
	
	Инд_Число = 1;
	Пока ТабличныйДокумент.Области.Найти(ИмяПервойГрафы + Координаты + СтрокаСИндексомПоказателя(Инд_Число)) <> Неопределено Цикл
		НовВетка = ДеревоДанных.Строки.Добавить();
		
		// Заполнение данными из текущей строки многострочной части.
		Данные = Новый Структура;
		Инд = СтрокаСИндексомПоказателя(Инд_Число);
		Для каждого ИмяГрафы Из МассивИменГраф Цикл
			Обл = ТабличныйДокумент.Области.Найти(ИмяГрафы + Координаты + Инд);
			Если Обл <> Неопределено Тогда
				Данные.Вставить(ИмяГрафы, Обл.Значение);
			КонецЕсли;
		КонецЦикла;
		НовВетка.Данные = Данные;
		
		// Заполнение данными из строк многострочных частей, подчиненных текущей строке многострочной части.
		ДанныеМногострочныхЧастей = Новый Структура;
		ИменаПодчГрупп = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппы]["ИменаПодчиненныхГрупп"];
		Для каждого ИмяПодчГруппы Из ИменаПодчГрупп Цикл
			ДеревоПодчСтрок = Новый ДеревоЗначений;
			ДеревоПодчСтрок.Колонки.Добавить("Данные");
			ДеревоПодчСтрок.Колонки.Добавить("ДанныеМногострочныхЧастей");
			ПодчКоординаты = Координаты + Инд;
			СформироватьДеревоМногострочнойЧастиПоДаннымТабличногоДокумента(
				ИмяПодчГруппы, ДеревоПодчСтрок, ПодчКоординаты);
			ДанныеМногострочныхЧастей.Вставить(ИмяПодчГруппы, ДеревоПодчСтрок);
		КонецЦикла;
		НовВетка.ДанныеМногострочныхЧастей = ДанныеМногострочныхЧастей;
		
		Инд_Число = Инд_Число + 1;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция МногострочнаяЧастьТекущейОбласти(Форма, Знач ИмяОбласти)
	
	Если НЕ ЗначениеЗаполнено(ИмяОбласти) Тогда
		Возврат Неопределено;
	Иначе
		НомПозПодчеркивания = Форма.СтруктураРеквизитовФормы.ДлинаИмениГрафы + 1;
		Если НЕ (СтрДлина(ИмяОбласти) > НомПозПодчеркивания
			И Сред(ИмяОбласти, НомПозПодчеркивания, 1) = "_") Тогда
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	ИмяОбласти = СтрЗаменить(ИмяОбласти, "ДобавитьСтрокуЗначок", "");
	ИмяОбласти = СтрЗаменить(ИмяОбласти, "ДобавитьСтроку", "");
	ИмяОбласти = СтрЗаменить(ИмяОбласти, "УдалитьСтроку", "");
	
	ИмяГруппы = Лев(ИмяОбласти, Форма.СтруктураРеквизитовФормы.ДлинаИмениГруппы);
	
	Для каждого ЭлемСтруктуры Из Форма.СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей Цикл
		Если ЭлемСтруктуры.Ключ = ИмяГруппы Тогда
			Возврат ИмяГруппы;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

&НаСервере
Процедура ВыгрузитьРасшифровкиОбеспечений(Узел_Документ)
	
	Узел_РасшифровкиОбеспечений = ПолучитьПодчиненныйЭлемент(Узел_Документ, "РасшифровкиОбеспечений");
	
	Узел_ОСВ_008 = ПолучитьПодчиненныйЭлемент(Узел_РасшифровкиОбеспечений, "ОСВ_008");
	СведенияРаздела = ПолучитьИзВременногоХранилища(СтруктураДанныхОСВ_008.АдресСведений);
	Если СведенияРаздела <> Неопределено И СведенияРаздела.Количество() > 0 Тогда
		ВыгрузитьРасшифровкуОбеспечения(Узел_ОСВ_008, СведенияРаздела);
	КонецЕсли;
	
	Узел_ОСВ_009 = ПолучитьПодчиненныйЭлемент(Узел_РасшифровкиОбеспечений, "ОСВ_009");
	СведенияРаздела = ПолучитьИзВременногоХранилища(СтруктураДанныхОСВ_009.АдресСведений);
	Если СведенияРаздела <> Неопределено И СведенияРаздела.Количество() > 0 Тогда
		ВыгрузитьРасшифровкуОбеспечения(Узел_ОСВ_009, СведенияРаздела);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВыгрузитьРасшифровкуОбеспечения(Узел_ОСВ, СведенияОСВ)
	
	ПрототипУзла_СтрокаОСВ = ПолучитьПодчиненныйЭлемент(Узел_ОСВ, "СтрокаОСВ");
	
	Для Каждого СтрокаОСВ Из СведенияОСВ Цикл
		Узел_СтрокаОСВ = НовыйУзелИзПрототипа(ПрототипУзла_СтрокаОСВ);
		
		Узел_Счет = ПолучитьПодчиненныйЭлемент(Узел_СтрокаОСВ, "Счет");
		
		ЗадатьЗначениеЭлемента(Узел_Счет, "КодСчета", СтрокаОСВ.КодСчета);
		
		ЗадатьЗначениеЭлемента(Узел_Счет, "СНД", СтрокаОСВ.СНД);
		ЗадатьЗначениеЭлемента(Узел_Счет, "СНК", СтрокаОСВ.СНК);
		ЗадатьЗначениеЭлемента(Узел_Счет, "ДО",  СтрокаОСВ.ДО);
		ЗадатьЗначениеЭлемента(Узел_Счет, "КО",  СтрокаОСВ.КО);
		ЗадатьЗначениеЭлемента(Узел_Счет, "СКД", СтрокаОСВ.СКД);
		ЗадатьЗначениеЭлемента(Узел_Счет, "СКК", СтрокаОСВ.СКК);
		
		Узел_Контрагент = ПолучитьПодчиненныйЭлемент(Узел_Счет, "Контрагент");
		
		ЗадатьЗначениеЭлемента(Узел_Контрагент, "Наименование", СтрокаОСВ.КонтрагентНаименование);
		ЗадатьЗначениеЭлемента(Узел_Контрагент, "ИНН", СтрокаОСВ.КонтрагентИНН);
		ЗадатьЗначениеЭлемента(Узел_Контрагент, "КПП", СтрокаОСВ.КонтрагентКПП);
		
		Узел_Договор = ПолучитьПодчиненныйЭлемент(Узел_Счет, "Договор");
		
		ЗадатьЗначениеЭлемента(Узел_Договор, "Представление", СтрокаОСВ.ДоговорПредставление);
		ЗадатьЗначениеЭлемента(Узел_Договор, "Номер", СтрокаОСВ.ДоговорНомер);
		ЗадатьЗначениеЭлемента(Узел_Договор, "Дата", Формат(СтрокаОСВ.ДоговорДата, "ДФ=dd.MM.yyyy"));
		ЗадатьЗначениеЭлемента(Узел_Договор, "СрокОкончания", Формат(СтрокаОСВ.ДоговорСрокДействия, "ДФ=dd.MM.yyyy"));
		
	КонецЦикла;
	
	УдалитьУзел(ПрототипУзла_СтрокаОСВ);
	
КонецПроцедуры

&НаСервере
Процедура ВыгрузитьЗадолженностьПоКредитамЗаймам(Узел_Документ)
	
	Узел_ЗадолженностьПоКредитамЗаймам = ПолучитьПодчиненныйЭлемент(Узел_Документ, "ЗадолженностьПоКредитамЗаймам");
	
	Узел_ОСВ = ПолучитьПодчиненныйЭлемент(Узел_ЗадолженностьПоКредитамЗаймам, "ОСВ_66");
	СведенияРаздела = ПолучитьИзВременногоХранилища(СтруктураРеквизитовФормы.АдресВоВрХранилищеДеревоДанныхОСВ_66);
	ВыгрузитьЗадолженностьПоКредитамЗаймамПоСчету(Узел_ОСВ, "П00007", СведенияРаздела);
	
	Узел_ОСВ = ПолучитьПодчиненныйЭлемент(Узел_ЗадолженностьПоКредитамЗаймам, "ОСВ_67");
	СведенияРаздела = ПолучитьИзВременногоХранилища(СтруктураРеквизитовФормы.АдресВоВрХранилищеДеревоДанныхОСВ_67);
	ВыгрузитьЗадолженностьПоКредитамЗаймамПоСчету(Узел_ОСВ, "П00008", СведенияРаздела);
	
КонецПроцедуры

&НаСервере
Процедура ВыгрузитьЗадолженностьПоКредитамЗаймамПоСчету(Узел_ОСВ, ПрефиксРаздела, СведенияРаздела);
	
	ПрототипУзла_СтрокаОСВ = ПолучитьПодчиненныйЭлемент(Узел_ОСВ, "СтрокаОСВ");
	
	Для Каждого СведенияСтраницы Из СведенияРаздела.Строки Цикл
		МСЧ_1 = СведенияСтраницы.ДанныеМногострочныхЧастей[ПрефиксРаздела + "М1"];
		
		Для Каждого СтрокаМСЧ_1 Из МСЧ_1.Строки Цикл
			КодСчета = СтрокаМСЧ_1.Данные[ПрефиксРаздела + "М100001"];
			
			Если НЕ ЗначениеЗаполнено(КодСчета) Тогда
				Продолжить;
			КонецЕсли;
			
			Узел_СтрокаОСВ = НовыйУзелИзПрототипа(ПрототипУзла_СтрокаОСВ);
			
			Узел_Счет = ПолучитьПодчиненныйЭлемент(Узел_СтрокаОСВ, "Счет");
			
			ЗадатьЗначениеЭлемента(Узел_Счет, "КодСчета", КодСчета);
			
			ЗадатьЗначениеЭлемента(Узел_Счет, "СНД", СтрокаМСЧ_1.Данные[ПрефиксРаздела + "М100002"]);
			ЗадатьЗначениеЭлемента(Узел_Счет, "СНК", СтрокаМСЧ_1.Данные[ПрефиксРаздела + "М100003"]);
			ЗадатьЗначениеЭлемента(Узел_Счет, "ДО",  СтрокаМСЧ_1.Данные[ПрефиксРаздела + "М100004"]);
			ЗадатьЗначениеЭлемента(Узел_Счет, "КО",  СтрокаМСЧ_1.Данные[ПрефиксРаздела + "М100005"]);
			ЗадатьЗначениеЭлемента(Узел_Счет, "СКД", СтрокаМСЧ_1.Данные[ПрефиксРаздела + "М100006"]);
			ЗадатьЗначениеЭлемента(Узел_Счет, "СКК", СтрокаМСЧ_1.Данные[ПрефиксРаздела + "М100007"]);
			
			Узел_Контрагент = ПолучитьПодчиненныйЭлемент(Узел_Счет, "Контрагент");
			
			ЗадатьЗначениеЭлемента(Узел_Контрагент, "Наименование", СтрокаМСЧ_1.Данные[ПрефиксРаздела + "М100008"]);
			ЗадатьЗначениеЭлемента(Узел_Контрагент, "ИНН",          СтрокаМСЧ_1.Данные[ПрефиксРаздела + "М100009"]);
			ЗадатьЗначениеЭлемента(Узел_Контрагент, "КПП",          СтрокаМСЧ_1.Данные[ПрефиксРаздела + "М100010"]);
			
			Узел_Договор = ПолучитьПодчиненныйЭлемент(Узел_Счет, "Договор");
			
			ЗадатьЗначениеЭлемента(Узел_Договор, "Представление",   СтрокаМСЧ_1.Данные[ПрефиксРаздела + "М100011"]);
			ЗадатьЗначениеЭлемента(Узел_Договор, "Номер",           СтрокаМСЧ_1.Данные[ПрефиксРаздела + "М100012"]);
			ЗадатьЗначениеЭлемента(Узел_Договор, "Дата",            СтрокаМСЧ_1.Данные[ПрефиксРаздела + "М100013"]);
			ЗадатьЗначениеЭлемента(Узел_Договор, "СрокПогашения",   СтрокаМСЧ_1.Данные[ПрефиксРаздела + "М100014"]);
			ЗадатьЗначениеЭлемента(Узел_Договор, "Продукт",         СтрокаМСЧ_1.Данные[ПрефиксРаздела + "М100015"]);
			ЗадатьЗначениеЭлемента(Узел_Договор, "СуммаПоДоговору", СтрокаМСЧ_1.Данные[ПрефиксРаздела + "М100016"]);
			ЗадатьЗначениеЭлемента(Узел_Договор, "КодВалюты",       СтрокаМСЧ_1.Данные[ПрефиксРаздела + "М100017"]);
			ЗадатьЗначениеЭлемента(Узел_Договор, "Ставка",          СтрокаМСЧ_1.Данные[ПрефиксРаздела + "М100018"]);
			
			МСЧ_2 = СтрокаМСЧ_1.ДанныеМногострочныхЧастей[ПрефиксРаздела + "М2"];
			
			ПрототипУзла_ДатаПлатежа = ПолучитьПодчиненныйЭлемент(Узел_Договор, "ДатаПлатежа");
			
			Для Каждого СтрокаМСЧ_2 Из МСЧ_2.Строки Цикл
				ДатаПлатежа = СтрокаМСЧ_2.Данные[ПрефиксРаздела + "М200001"];
				
				Если НЕ ЗначениеЗаполнено(ДатаПлатежа) Тогда
					Продолжить;
				КонецЕсли;
				
				Узел_ДатаПлатежа = НовыйУзелИзПрототипа(ПрототипУзла_ДатаПлатежа);
				
				ЗадатьЗначениеЭлемента(Узел_ДатаПлатежа, "Дата",  ДатаПлатежа);
				ЗадатьЗначениеЭлемента(Узел_ДатаПлатежа, "Сумма", СтрокаМСЧ_2.Данные[ПрефиксРаздела + "М200002"]);
				
			КонецЦикла;
			
			УдалитьУзел(ПрототипУзла_ДатаПлатежа);
			
		КонецЦикла;
		
	КонецЦикла;
	
	УдалитьУзел(ПрототипУзла_СтрокаОСВ);
	
КонецПроцедуры

&НаСервере
Процедура ВыгрузитьАнализПоБанковскимСчетам(Узел_Документ)
	
	Узел_ДенежныеСредства = ПолучитьПодчиненныйЭлемент(Узел_Документ, "ДенежныеСредства");
	
	Узел_Анализ_50 = ПолучитьПодчиненныйЭлемент(Узел_ДенежныеСредства, "Анализ_50");
	СведенияРаздела = ПолучитьИзВременногоХранилища(СтруктураДанныхАнализ_50.АдресСведений);
	Если СведенияРаздела <> Неопределено Тогда
		ВыгрузитьРазделАнализаПоКассе(Узел_Анализ_50, СведенияРаздела);
	КонецЕсли;
	
	Узел_Анализ_51 = ПолучитьПодчиненныйЭлемент(Узел_ДенежныеСредства, "Анализ_51");
	СведенияРаздела = ПолучитьИзВременногоХранилища(СтруктураДанныхАнализ_51.АдресСведений);
	Если СведенияРаздела <> Неопределено Тогда
		ВыгрузитьРазделАнализаПоБанковскимСчетам(Узел_Анализ_51, СведенияРаздела);
	КонецЕсли;
	
	Узел_Анализ_52 = ПолучитьПодчиненныйЭлемент(Узел_ДенежныеСредства, "Анализ_52");
	СведенияРаздела = ПолучитьИзВременногоХранилища(СтруктураДанныхАнализ_52.АдресСведений);
	Если СведенияРаздела <> Неопределено Тогда
		ВыгрузитьРазделАнализаПоБанковскимСчетам(Узел_Анализ_52, СведенияРаздела);
	КонецЕсли;
	
	Узел_Анализ_55 = ПолучитьПодчиненныйЭлемент(Узел_ДенежныеСредства, "Анализ_55");
	СведенияРаздела = ПолучитьИзВременногоХранилища(СтруктураДанныхАнализ_55.АдресСведений);
	Если СведенияРаздела <> Неопределено Тогда
		ВыгрузитьРазделАнализаПоБанковскимСчетам(Узел_Анализ_55, СведенияРаздела);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВыгрузитьРазделАнализаПоКассе(УзелРаздела, СведенияРаздела)
	
	ПрототипУзла_СтрокаАнализа = ПолучитьПодчиненныйЭлемент(УзелРаздела, "СтрокаАнализа");
	
	Если ТипЗнч(СведенияРаздела) = Тип("ДеревоЗначений") Тогда
		
		Для Каждого СтрокаСчета Из СведенияРаздела.Строки Цикл
			Для Каждого СтрокаПериода Из СтрокаСчета.Строки Цикл
				Узел_СтрокаАнализа = НовыйУзелИзПрототипа(ПрототипУзла_СтрокаАнализа);
				Узел_Счет = ПолучитьПодчиненныйЭлемент(Узел_СтрокаАнализа, "Счет");
				
				ЗадатьЗначениеЭлемента(Узел_Счет, "КодСчета", СтрокаПериода.Счет.Код);
				
				ЗадатьЗначениеЭлемента(Узел_Счет, "ПериодГод",   Год(СтрокаПериода.Период));
				ЗадатьЗначениеЭлемента(Узел_Счет, "ПериодМесяц", Месяц(СтрокаПериода.Период));
				
				ПрототипУзла_Корреспонденция = ПолучитьПодчиненныйЭлемент(Узел_СтрокаАнализа, "Корреспонденция");
				
				Для Каждого СтрокаКорреспонденции Из СтрокаПериода.Строки Цикл
					Если ЗначениеЗаполнено(СтрокаКорреспонденции.КорСчет) Тогда
						Узел_Корреспонденция = НовыйУзелИзПрототипа(ПрототипУзла_Корреспонденция);
						
						ЗадатьЗначениеЭлемента(Узел_Корреспонденция, "КодСчета", СтрокаКорреспонденции.КорСчет.Код);
						ЗадатьЗначениеЭлемента(Узел_Корреспонденция, "ДО", СтрокаКорреспонденции.ДО);
						ЗадатьЗначениеЭлемента(Узел_Корреспонденция, "КО", СтрокаКорреспонденции.КО);
					Иначе
						ЗадатьЗначениеЭлемента(Узел_Счет, "СНД", СтрокаКорреспонденции.СНД);
						ЗадатьЗначениеЭлемента(Узел_Счет, "СНК", СтрокаКорреспонденции.СНК);
						ЗадатьЗначениеЭлемента(Узел_Счет, "ДО",  СтрокаКорреспонденции.ДО);
						ЗадатьЗначениеЭлемента(Узел_Счет, "КО",  СтрокаКорреспонденции.КО);
						ЗадатьЗначениеЭлемента(Узел_Счет, "СКД", СтрокаКорреспонденции.СКД);
						ЗадатьЗначениеЭлемента(Узел_Счет, "СКК", СтрокаКорреспонденции.СКК);
					КонецЕсли;
					
				КонецЦикла;
				
				УдалитьУзел(ПрототипУзла_Корреспонденция);
				
			КонецЦикла;
		КонецЦикла;
		
	КонецЕсли;
	
	УдалитьУзел(ПрототипУзла_СтрокаАнализа);
	
КонецПроцедуры

&НаСервере
Процедура ВыгрузитьРазделАнализаПоБанковскимСчетам(УзелРаздела, СведенияРаздела)
	
	ПрототипУзла_СтрокаАнализа = ПолучитьПодчиненныйЭлемент(УзелРаздела, "СтрокаАнализа");
	
	Если ТипЗнч(СведенияРаздела) = Тип("ДеревоЗначений") Тогда
		
		Для Каждого СтрокаСчета Из СведенияРаздела.Строки Цикл
			Для Каждого СтрокаБанковскогоСчета Из СтрокаСчета.Строки Цикл
				Для Каждого СтрокаПериода Из СтрокаБанковскогоСчета.Строки Цикл
					Узел_СтрокаАнализа = НовыйУзелИзПрототипа(ПрототипУзла_СтрокаАнализа);
					Узел_Счет = ПолучитьПодчиненныйЭлемент(Узел_СтрокаАнализа, "Счет");
					
					ЗадатьЗначениеЭлемента(Узел_Счет, "КодСчета", СтрокаПериода.Счет.Код);
					
					ЗадатьЗначениеЭлемента(Узел_Счет, "ПериодГод",   Год(СтрокаПериода.Период));
					ЗадатьЗначениеЭлемента(Узел_Счет, "ПериодМесяц", Месяц(СтрокаПериода.Период));
					
					Узел_Субконто = ПолучитьПодчиненныйЭлемент(Узел_Счет, "Субконто");
					Узел_БанковскийСчет = ПолучитьПодчиненныйЭлемент(Узел_Субконто, "БанковскийСчет");
					
					ЗадатьЗначениеЭлемента(Узел_БанковскийСчет, "Наименование", СтрокаПериода.БанковскийСчет.Наименование);
					ЗадатьЗначениеЭлемента(Узел_БанковскийСчет, "НомерСчета", СтрокаПериода.БанковскийСчет.НомерСчета);
					Если ЗначениеЗаполнено(СтрокаПериода.БанковскийСчет.Банк) Тогда
						ЗадатьЗначениеЭлемента(Узел_БанковскийСчет, "НаименованиеБанка", СтрокаПериода.БанковскийСчет.Банк.Наименование);
						ЗадатьЗначениеЭлемента(Узел_БанковскийСчет, "БИК", СтрокаПериода.БанковскийСчет.Банк.Код);
					КонецЕсли;
					
					ПрототипУзла_Корреспонденция = ПолучитьПодчиненныйЭлемент(Узел_СтрокаАнализа, "Корреспонденция");
					
					Для Каждого СтрокаКорреспонденции Из СтрокаПериода.Строки Цикл
						Если ЗначениеЗаполнено(СтрокаКорреспонденции.КорСчет) Тогда
							Узел_Корреспонденция = НовыйУзелИзПрототипа(ПрототипУзла_Корреспонденция);
							
							ЗадатьЗначениеЭлемента(Узел_Корреспонденция, "КодСчета", СтрокаКорреспонденции.КорСчет.Код);
							ЗадатьЗначениеЭлемента(Узел_Корреспонденция, "ДО", СтрокаКорреспонденции.ДО);
							ЗадатьЗначениеЭлемента(Узел_Корреспонденция, "КО", СтрокаКорреспонденции.КО);
						Иначе
							ЗадатьЗначениеЭлемента(Узел_Счет, "СНД", СтрокаКорреспонденции.СНД);
							ЗадатьЗначениеЭлемента(Узел_Счет, "СНК", СтрокаКорреспонденции.СНК);
							ЗадатьЗначениеЭлемента(Узел_Счет, "ДО",  СтрокаКорреспонденции.ДО);
							ЗадатьЗначениеЭлемента(Узел_Счет, "КО",  СтрокаКорреспонденции.КО);
							ЗадатьЗначениеЭлемента(Узел_Счет, "СКД", СтрокаКорреспонденции.СКД);
							ЗадатьЗначениеЭлемента(Узел_Счет, "СКК", СтрокаКорреспонденции.СКК);
						КонецЕсли;
						
					КонецЦикла;
					
					УдалитьУзел(ПрототипУзла_Корреспонденция);
					
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
		
	КонецЕсли;
	
	УдалитьУзел(ПрототипУзла_СтрокаАнализа);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьПодчиненныйЭлемент(Узел, КодЭлемента)
	
	Для Каждого Стр Из Узел.Строки Цикл
		Если Стр.Код = КодЭлемента Тогда
			Возврат Стр;
		КонецЕсли;
	КонецЦикла;
	
КонецФункции

&НаСервере
Функция НовыйУзелИзПрототипа(ПрототипУзла)
	
	РодительУзла = ПрототипУзла.Родитель;
	
	ПозицияИсходногоУзла = РодительУзла.Строки.Индекс(ПрототипУзла);
	НовыйУзел = РодительУзла.Строки.Вставить(ПозицияИсходногоУзла);
	ЗаполнитьЗначенияСвойств(НовыйУзел, ПрототипУзла, , "Родитель, Строки");
	Для Каждого Стр из ПрототипУзла.Строки Цикл
		СкопироватьУзел(НовыйУзел, Стр);
	КонецЦикла;
	
	Возврат НовыйУзел;
	
КонецФункции

&НаСервере
Процедура ЗадатьЗначениеЭлемента(Узел, КодЭлемента, Значение)
	
	ВывестиПоказательВXML(ПолучитьПодчиненныйЭлемент(Узел, КодЭлемента), Значение);
	
КонецПроцедуры

&НаСервере
Процедура УдалитьУзел(Узел)
	
	РодительУзла = ?(Узел.Родитель = Неопределено, Узел.Владелец(), Узел.Родитель);
	РодительУзла.Строки.Удалить(Узел);
	
КонецПроцедуры

&НаСервере
Функция ПредставлениеНезаполненногоРаздела(МакетРаздела)
	
	ТабличныйДокументРаздела = Новый ТабличныйДокумент;
	
	Секция_Заголовок    = МакетРаздела.ПолучитьОбласть("Заголовок");
	Секция_ПустаяСтрока = МакетРаздела.ПолучитьОбласть("ПустаяСтрока");
	Секция_Незаполнено  = МакетРаздела.ПолучитьОбласть("Незаполнено");
	
	ТабличныйДокументРаздела.Вывести(Секция_Заголовок);
	ТабличныйДокументРаздела.Вывести(Секция_ПустаяСтрока);
	ТабличныйДокументРаздела.Вывести(Секция_Незаполнено);
	
	Возврат ТабличныйДокументРаздела;
	
КонецФункции

&НаСервере
Функция ОбъектОтчета(ЭтаФормаИмя) Экспорт
	
	Если мОбъектОтчета = Неопределено Тогда 
		мОбъектОтчета = РегламентированнаяОтчетностьВызовСервера.ОбъектОтчета(ЭтаФормаИмя);
	КонецЕсли;
	
	Возврат мОбъектОтчета;
	
КонецФункции

&НаСервере
Процедура ОчисткаРегламентированногоОтчетаНаСервере(ИмяСтраницы) Экспорт
	
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(Отчеты[
		Сред(Лев(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, ".Форма.") - 1), 7)].ПолучитьМакет(
		Сред(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + ИмяСтраницы));
	
	ВывестиДанныеВТабличныйДокументНаСервере(ИмяСтраницы, СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьИзСпискаЗавершение(ПериодЭлемент, ДополнительныеПараметры) Экспорт
	
	Если ПериодЭлемент <> Неопределено Тогда
		ТабличныйДокумент.Области[ДополнительныеПараметры.ИмяОбласти].Значение = ПериодЭлемент.Значение;
		ВидСдачиОтчетности = ПериодЭлемент.Значение;
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораВалютыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Область = ДополнительныеПараметры.Область;
	
	ПрежнийКодВалюты = "";
	
	Если ЗначениеЗаполнено(Область.Значение) Тогда
		ПрежнийКодВалюты = Область.Значение;
	КонецЕсли;
	
	Если Результат <> Неопределено Тогда
		РеквизитыВалюты = РеквизитыЭлементаСправочникаВалют(Результат);
		
		Если ПрежнийКодВалюты = РеквизитыВалюты.СимвольныйКод Тогда
			Область.Очистить();
		Иначе
			Область.Значение = РеквизитыВалюты.СимвольныйКод;
		КонецЕсли;
		
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция РеквизитыЭлементаСправочникаВалют(РезультатВыбора)
	
	ЦифровойКод   = РезультатВыбора.Код;
	СимвольныйКод = РезультатВыбора.Наименование;
	
	// Коды рубля по ISO 4217.
	Если ЦифровойКод = "643" Тогда
		СимвольныйКод = "RUB";
	ИначеЕсли ЦифровойКод = "810" Тогда
		СимвольныйКод = "RUR";
	КонецЕсли;
	
	Результат = Новый Структура("ЦифровойКод, СимвольныйКод", ЦифровойКод, СимвольныйКод);
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ПроверитьЗаполнение_ЛизингОбязательства(СтатусПроверки)
	
	ИмяРаздела = "ЛизингОбязательства";
	ДанныеРаздела = мДанныеОтчета["ПолеТабличногоДокумента" + ИмяРаздела];
	
	НомерСтроки = 1;
	Пока ДанныеРаздела.Свойство("П000100600101" + "_" + СтрокаЧГ0(НомерСтроки)) Цикл
		Постфикс = "_" + СтрокаЧГ0(НомерСтроки);
		
		СтрокаЗаполнена = ЗначениеЗаполнено(ДанныеРаздела["П000100600101" + Постфикс])
		              ИЛИ ЗначениеЗаполнено(ДанныеРаздела["П000100600102" + Постфикс])
		              ИЛИ ЗначениеЗаполнено(ДанныеРаздела["П000100600103" + Постфикс])
		              ИЛИ ЗначениеЗаполнено(ДанныеРаздела["П000100600104" + Постфикс])
		              ИЛИ ЗначениеЗаполнено(ДанныеРаздела["П000100600105" + Постфикс])
		              ИЛИ ЗначениеЗаполнено(ДанныеРаздела["П000100600106" + Постфикс])
		              ИЛИ ЗначениеЗаполнено(ДанныеРаздела["П000100600107" + Постфикс])
		              ИЛИ ЗначениеЗаполнено(ДанныеРаздела["П000100600108" + Постфикс])
		              ИЛИ ЗначениеЗаполнено(ДанныеРаздела["П000100600109" + Постфикс])
		              ИЛИ ЗначениеЗаполнено(ДанныеРаздела["П000100600110" + Постфикс])
		              ИЛИ ЗначениеЗаполнено(ДанныеРаздела["П000100600111" + Постфикс]);
		
		Если СтрокаЗаполнена Тогда
			ИмяПоказателя = "П000100600101" + Постфикс;
			КомпанияНаименование = ДанныеРаздела[ИмяПоказателя];
			
			Если НЕ ЗначениеЗаполнено(КомпанияНаименование) Тогда
				ОписаниеОшибки = "В строке " + СтрокаЧГ0(НомерСтроки) + " расходов по финансовому лизингу "
				               + "не указано наименование компании";
				ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, ИмяРаздела, ИмяПоказателя);
			КонецЕсли;
			
			ИмяПоказателя = "П000100600102" + Постфикс;
			КомпанияИНН = СокрЛП(ДанныеРаздела[ИмяПоказателя]);
			
			Если ЗначениеЗаполнено(КомпанияИНН)
			   И СтрДлина(КомпанияИНН) <> 10 И СтрДлина(КомпанияИНН) <> 12 Тогда
				ОписаниеОшибки = "В строке " + СтрокаЧГ0(НомерСтроки) + " расходов по финансовому лизингу "
				               + " указан ИНН компании, не состоящий из 10 или 12 символов";
				ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, ИмяРаздела, ИмяПоказателя);
			КонецЕсли;
			
			ИмяПоказателя = "П000100600103" + Постфикс;
			КомпанияКПП = СокрЛП(ДанныеРаздела[ИмяПоказателя]);
			
			Если СтрДлина(КомпанияИНН) = 10 Тогда
				Если СтрДлина(КомпанияКПП) <> 9 Тогда
					ОписаниеОшибки = "В строке " + СтрокаЧГ0(НомерСтроки) + " расходов по финансовому лизингу "
					               + "не указан КПП компании, состоящий из 9 символов";
					ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, ИмяРаздела, ИмяПоказателя);
				КонецЕсли;
				
			ИначеЕсли ЗначениеЗаполнено(КомпанияКПП) Тогда
				ОписаниеОшибки = "В строке " + СтрокаЧГ0(НомерСтроки) + " расходов по финансовому лизингу "
				               + " не должен указываться КПП компании";
				ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, ИмяРаздела, ИмяПоказателя);
				
			КонецЕсли;
			
			ИмяПоказателя = "П000100600104" + Постфикс;
			Продукт = СокрЛП(ДанныеРаздела[ИмяПоказателя]);
			
			Если НЕ ЗначениеЗаполнено(Продукт) Тогда
				ОписаниеОшибки = "В строке " + СтрокаЧГ0(НомерСтроки) + " расходов по финансовому лизингу "
				               + "не указан вид продукта";
				ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, ИмяРаздела, ИмяПоказателя);
			КонецЕсли;
			
			ИмяПоказателя = "П000100600108" + Постфикс;
			Валюта = СокрЛП(ДанныеРаздела[ИмяПоказателя]);
			
			Если НЕ ЗначениеЗаполнено(Валюта) Тогда
				ОписаниеОшибки = "В строке " + СтрокаЧГ0(НомерСтроки) + " расходов по финансовому лизингу "
				               + "не указан код валюты договора";
				ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, ИмяРаздела, ИмяПоказателя);
			ИначеЕсли СтрДлина(Валюта) <> 3 Тогда
				ОписаниеОшибки = "В строке " + СтрокаЧГ0(НомерСтроки) + " расходов по финансовому лизингу "
				               + "указан код валюты договора, не состоящий из 3 символов";
				ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, ИмяРаздела, ИмяПоказателя);
			КонецЕсли;
			
			ИмяПоказателя = "П000100600105" + Постфикс;
			УчетОбязательств = СокрЛП(ДанныеРаздела[ИмяПоказателя]);
			
			Если НЕ ЗначениеЗаполнено(УчетОбязательств) Тогда
				ОписаниеОшибки = "В строке " + СтрокаЧГ0(НомерСтроки) + " расходов по финансовому лизингу "
				               + "не указан вариант учета обязательва";
				ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, ИмяРаздела, ИмяПоказателя);
			КонецЕсли;
			
		КонецЕсли;
		
		НомерСтроки = НомерСтроки + 1;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьЗаполнение_ЗадолженностьПоКредитамЗаймам(СтатусПроверки)
	
	СведенияРаздела = ПолучитьИзВременногоХранилища(СтруктураРеквизитовФормы.АдресВоВрХранилищеДеревоДанныхОСВ_66);
	
	ПараметрыПроверки = Новый Структура;
	ПараметрыПроверки.Вставить("ИмяРаздела",       "ОСВ_66");
	ПараметрыПроверки.Вставить("ПрефиксРаздела",   "П00007");
	ПараметрыПроверки.Вставить("СведенияРаздела",  СведенияРаздела);
	ПараметрыПроверки.Вставить("ТипЗадолженности", "краткосрочным");
	
	ПроверитьЗаполнение_ЗадолженностьПоКредитамЗаймамПоСчету(СтатусПроверки, ПараметрыПроверки);
	
	СведенияРаздела = ПолучитьИзВременногоХранилища(СтруктураРеквизитовФормы.АдресВоВрХранилищеДеревоДанныхОСВ_67);
	
	ПараметрыПроверки = Новый Структура;
	ПараметрыПроверки.Вставить("ИмяРаздела",       "ОСВ_67");
	ПараметрыПроверки.Вставить("ПрефиксРаздела",   "П00008");
	ПараметрыПроверки.Вставить("СведенияРаздела",  СведенияРаздела);
	ПараметрыПроверки.Вставить("ТипЗадолженности", "долгосрочным");
	
	ПроверитьЗаполнение_ЗадолженностьПоКредитамЗаймамПоСчету(СтатусПроверки, ПараметрыПроверки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьЗаполнение_ЗадолженностьПоКредитамЗаймамПоСчету(СтатусПроверки, ПараметрыПроверки)
	
	ИмяРаздела = ПараметрыПроверки.ИмяРаздела;
	ПрефиксРаздела = ПараметрыПроверки.ПрефиксРаздела;
	СведенияРаздела = ПараметрыПроверки.СведенияРаздела;
	ТипЗадолженности = ПараметрыПроверки.ТипЗадолженности;
	
	Для Каждого СведенияСтраницы Из СведенияРаздела.Строки Цикл
		МСЧ_1 = СведенияСтраницы.ДанныеМногострочныхЧастей[ПрефиксРаздела + "М1"];
		
		Для Каждого СтрокаМСЧ_1 Из МСЧ_1.Строки Цикл
			НомерСтроки = СтрокаЧГ0(МСЧ_1.Строки.Индекс(СтрокаМСЧ_1) + 1);
			
			СтрокаЗаполнена = Ложь;
			Для Каждого ПоказательСтроки Из СтрокаМСЧ_1.Данные Цикл
				ЗначениеПоказателя = ПоказательСтроки.Значение;
				СтрокаЗаполнена = ЗначениеЗаполнено(ЗначениеПоказателя);
				
				Если СтрокаЗаполнена Тогда
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
			
			МСЧ_2 = СтрокаМСЧ_1.ДанныеМногострочныхЧастей[ПрефиксРаздела + "М2"];
			
			ЗаполненГрафикПлатежей = Ложь;
			
			Для Каждого СтрокаМСЧ_2 Из МСЧ_2.Строки Цикл
				Для Каждого ПоказательСтроки Из СтрокаМСЧ_2.Данные Цикл
					ЗначениеПоказателя = ПоказательСтроки.Значение;
					Если ЗначениеЗаполнено(ЗначениеПоказателя) Тогда
						СтрокаЗаполнена = Истина;
						ЗаполненГрафикПлатежей = Истина;
					КонецЕсли;
					
					Если ЗаполненГрафикПлатежей Тогда
						Прервать;
					КонецЕсли;
					
				КонецЦикла;
				
				Если ЗаполненГрафикПлатежей Тогда
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
		
			Если НЕ СтрокаЗаполнена Тогда
				Продолжить;
			КонецЕсли;
			
			ИмяПоказателя = ПрефиксРаздела + "М100001";
			ИмяПоказателяМакета = ИмяПоказателя + "_" + НомерСтроки;
			КодСчета = СокрЛП(СтрокаМСЧ_1.Данные[ИмяПоказателя]);
			
			Если НЕ ЗначениеЗаполнено(КодСчета) Тогда
				ОписаниеОшибки = "В строке " + НомерСтроки + " задолженности по " + ТипЗадолженности + " кредитам и займам "
				               + "не указан код счета учета";
				ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, ИмяРаздела, ИмяПоказателяМакета);
			КонецЕсли;
			
			УказанКонтрагент = ЗначениеЗаполнено(СтрокаМСЧ_1.Данные[ПрефиксРаздела + "М100008"])
			               ИЛИ ЗначениеЗаполнено(СтрокаМСЧ_1.Данные[ПрефиксРаздела + "М100009"])
			               ИЛИ ЗначениеЗаполнено(СтрокаМСЧ_1.Данные[ПрефиксРаздела + "М100010"]);
			
			Если УказанКонтрагент Тогда
				ИмяПоказателя = ПрефиксРаздела + "М100008";
				ИмяПоказателяМакета = ИмяПоказателя + "_" + НомерСтроки;
				КонтрагентНаименование = СтрокаМСЧ_1.Данные[ИмяПоказателя];
				
				Если НЕ ЗначениеЗаполнено(КонтрагентНаименование) Тогда
					ОписаниеОшибки = "В строке " + НомерСтроки + " задолженности по " + ТипЗадолженности + " кредитам и займам "
					               + "не указано наименование контрагента";
					ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, ИмяРаздела, ИмяПоказателяМакета);
				КонецЕсли;
				
				ИмяПоказателя = ПрефиксРаздела + "М100009";
				ИмяПоказателяМакета = ИмяПоказателя + "_" + НомерСтроки;
				КонтрагентИНН = СокрЛП(СтрокаМСЧ_1.Данные[ИмяПоказателя]);
				
				Если ЗначениеЗаполнено(КонтрагентИНН)
				   И СтрДлина(КонтрагентИНН) <> 10 И СтрДлина(КонтрагентИНН) <> 12 Тогда
					ОписаниеОшибки = "В строке " + НомерСтроки + " задолженности по " + ТипЗадолженности + " кредитам и займам "
					               + " указан ИНН контрагента, не состоящий из 10 или 12 символов";
					ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, ИмяРаздела, ИмяПоказателяМакета);
				КонецЕсли;
				
				ИмяПоказателя = ПрефиксРаздела + "М100010";
				ИмяПоказателяМакета = ИмяПоказателя + "_" + НомерСтроки;
				КонтрагентКПП = СокрЛП(СтрокаМСЧ_1.Данные[ИмяПоказателя]);
				
				Если СтрДлина(КонтрагентИНН) = 10 Тогда
					Если СтрДлина(КонтрагентКПП) <> 9 Тогда
						ОписаниеОшибки = "В строке " + НомерСтроки + " задолженности по " + ТипЗадолженности + " кредитам и займам "
						               + "не указан КПП контрагента, состоящий из 9 символов";
						ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, ИмяРаздела, ИмяПоказателяМакета);
					КонецЕсли;
					
				ИначеЕсли ЗначениеЗаполнено(КонтрагентКПП) Тогда
					ОписаниеОшибки = "В строке " + НомерСтроки + " задолженности по " + ТипЗадолженности + " кредитам и займам "
					               + " не должен указываться КПП контрагента";
					ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, ИмяРаздела, ИмяПоказателяМакета);
					
				КонецЕсли;
				
			КонецЕсли;
			
			УказанДоговор = ЗначениеЗаполнено(СтрокаМСЧ_1.Данные[ПрефиксРаздела + "М100011"])
			            ИЛИ ЗначениеЗаполнено(СтрокаМСЧ_1.Данные[ПрефиксРаздела + "М100012"])
			            ИЛИ ЗначениеЗаполнено(СтрокаМСЧ_1.Данные[ПрефиксРаздела + "М100013"])
			            ИЛИ ЗначениеЗаполнено(СтрокаМСЧ_1.Данные[ПрефиксРаздела + "М100014"])
			            ИЛИ ЗначениеЗаполнено(СтрокаМСЧ_1.Данные[ПрефиксРаздела + "М100015"])
			            ИЛИ ЗначениеЗаполнено(СтрокаМСЧ_1.Данные[ПрефиксРаздела + "М100016"])
			            ИЛИ ЗначениеЗаполнено(СтрокаМСЧ_1.Данные[ПрефиксРаздела + "М100017"])
			            ИЛИ ЗначениеЗаполнено(СтрокаМСЧ_1.Данные[ПрефиксРаздела + "М100018"])
			            ИЛИ ЗаполненГрафикПлатежей;
			
			Если УказанДоговор Тогда
				ИмяПоказателя = ПрефиксРаздела + "М100011";
				ИмяПоказателяМакета = ИмяПоказателя + "_" + НомерСтроки;
				ПредставлениеДоговора = СтрокаМСЧ_1.Данные[ИмяПоказателя];
				
				Если НЕ ЗначениеЗаполнено(ПредставлениеДоговора) Тогда
					ОписаниеОшибки = "В строке " + НомерСтроки + " задолженности по " + ТипЗадолженности + " кредитам и займам "
					               + "не указан договор";
					ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, ИмяРаздела, ИмяПоказателяМакета);
				КонецЕсли;
				
			КонецЕсли;
			
			ИмяПоказателя = ПрефиксРаздела + "М100017";
			ИмяПоказателяМакета = ИмяПоказателя + "_" + НомерСтроки;
			КодВалюты = СокрЛП(СтрокаМСЧ_1.Данные[ИмяПоказателя]);
			
			Если ЗначениеЗаполнено(КодВалюты) И СтрДлина(КодВалюты) <> 3 Тогда
				ОписаниеОшибки = "В строке " + НомерСтроки + " задолженности по " + ТипЗадолженности + " кредитам и займам "
				               + "указан код валюты, не состоящий из 3 символов";
				ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, ИмяРаздела, ИмяПоказателяМакета);
			КонецЕсли;
			
			Для Каждого СтрокаМСЧ_2 Из МСЧ_2.Строки Цикл
				НомерСтрокиГрафикаПлатежей = СтрокаЧГ0(МСЧ_2.Строки.Индекс(СтрокаМСЧ_2) + 1);
				
				Если ЗначениеЗаполнено(СтрокаМСЧ_2.Данные[ПрефиксРаздела + "М200002"])
				   И НЕ ЗначениеЗаполнено(СтрокаМСЧ_2.Данные[ПрефиксРаздела + "М200001"]) Тогда
					ИмяПоказателяМакета = ПрефиксРаздела + "М200001" + "_" + НомерСтроки + "_" + НомерСтрокиГрафикаПлатежей;
					ОписаниеОшибки = "В строке " + НомерСтрокиГрафикаПлатежей + " графика платежей "
					               + "строки " + НомерСтроки + " задолженности по " + ТипЗадолженности + " кредитам и займам "
					               + "не указана дата платежа";
					ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, ИмяРаздела, ИмяПоказателяМакета);
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, Описание, Раздел, ИмяЯчейки = "", ФИО = "")
	
	СообщитьВТаблицуСообщений(ЭтаФорма, Описание, Раздел, ИмяЯчейки, ФИО);
	СтатусПроверки = Ложь;
	
КонецПроцедуры

Функция МакетРаздела15(ИмяРаздела)
	
	ИмяМакетаРаздела = ?(ИмяРаздела = "ФормаОтчета", СтруктураОтчета.ОПУ.ИмяМакета, СтруктураОтчета[ИмяРаздела].ИмяМакета);
	
	Если ЗначениеЗаполнено(ИмяМакетаРаздела) Тогда
		ИмяМакета = Сред(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + ИмяМакетаРаздела;
		МакетРаздела = Отчеты[Сред(Лев(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, ".Форма.") - 1), 7)].ПолучитьМакет(ИмяМакета);
	Иначе
		АдресМакета = ЭтаФорма["СтруктураДанных" + ИмяРаздела].АдресПредставления;
		МакетРаздела = ПолучитьИзВременногоХранилища(АдресМакета);
	КонецЕсли;
	
	Возврат МакетРаздела;
	
КонецФункции

#КонецОбласти
