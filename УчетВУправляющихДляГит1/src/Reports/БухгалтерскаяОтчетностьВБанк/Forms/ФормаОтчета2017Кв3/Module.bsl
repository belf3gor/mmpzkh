#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Обход ошибки платформы "Параметр сеанса отсутствует или удален".
	ТабличныйДокумент.Очистить();
	
	СчетаОСВПоСчету = ОтчетностьВБанкиСлужебный.СчетаЗаполнения("ОСВПоСчету", "ФормаОтчета2017Кв3");
	ЗначениеВРеквизитФормы(СчетаОСВПоСчету, "СписокСтраницОСВПоСчету");
	
	СчетаАнализСчета = ОтчетностьВБанкиСлужебный.СчетаЗаполнения("АнализСчета", "ФормаОтчета2017Кв3");
	ЗначениеВРеквизитФормы(СчетаАнализСчета, "СписокСтраницАнализСчета");
	
	СформироватьСтруктуруРеквизитовФормы();
	
	СтруктураРеквизитовФормы.мВерсияФормы = "01/11/2017";
	
	СтруктураРеквизитовФормы.мВыбраннаяФорма           = Параметры.мВыбраннаяФорма;
	СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета   = Параметры.мДатаКонцаПериодаОтчета;
	СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета  = Параметры.мДатаНачалаПериодаОтчета;
	СтруктураРеквизитовФормы.мСкопированаФорма         = Параметры.мСкопированаФорма;
	СтруктураРеквизитовФормы.мСохраненныйДок           = Параметры.мСохраненныйДок;
	СтруктураРеквизитовФормы.Организация               = Параметры.Организация;
	
	мСтруктураЦветовРаскраски = Новый Структура;
	мСтруктураЦветовРаскраски.Вставить("_0", Новый Цвет(255, 255, 192));
	мСтруктураЦветовРаскраски.Вставить("_1", Новый Цвет(192, 192, 192));
	мСтруктураЦветовРаскраски.Вставить("_3", Новый Цвет(230, 240, 220));
	мСтруктураЦветовРаскраски.Вставить("_4", Новый Цвет(192, 220, 192));
	мСтруктураЦветовРаскраски.Вставить("_5", Новый Цвет(255, 255, 255));
	
	ПорядкиОкругленияОтчетности = Новый Структура;
	ПорядкиОкругленияОтчетности.Вставить("ПеречислениеПорядкиОкругленияОтчетностиОкр1",       Перечисления.ПорядкиОкругленияОтчетности.Окр1);
	ПорядкиОкругленияОтчетности.Вставить("ПеречислениеПорядкиОкругленияОтчетностиОкр1000",    Перечисления.ПорядкиОкругленияОтчетности.Окр1000);
	ПорядкиОкругленияОтчетности.Вставить("ПеречислениеПорядкиОкругленияОтчетностиОкр1000000", Перечисления.ПорядкиОкругленияОтчетности.Окр1000000);
	
	ДатаПодписи = ТекущаяДатаСеанса();
	
	СтруктураРеквизитовФормы.Банк = Параметры.Банк;
	
	Инициализация(Параметры.БезОткрытияФормы);
	
	Если ЗначениеЗаполнено(СтруктураРеквизитовФормы.мСохраненныйДок) Тогда
		СтатусОтчета = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтруктураРеквизитовФормы.мСохраненныйДок, "СтатусОтчета");
	Иначе
		СтатусОтчета = Нстр("ru = 'Не отправлено'");
	КонецЕсли;
	
	ОбновитьОтображениеСостоянияОтчета();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если СтрНайти(Заголовок, СтруктураРеквизитовФормы.СтрПериодОтчета) = 0 Тогда
		Заголовок = Заголовок + " за " + СтруктураРеквизитовФормы.СтрПериодОтчета;
	КонецЕсли;
	
	ОргСтр = " (" + СтруктураРеквизитовФормы.НаимОрганизации + ")";
	Если СтрНайти(Заголовок, ОргСтр) = 0 Тогда
		Заголовок = Заголовок + ОргСтр;
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("ВыполнитьПроверкуПередОткрытием", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если Модифицированность Тогда
		Отказ = Истина;
		
		Если ЗавершениеРаботы Тогда
			ТекстПредупреждения = НСтр("ru='Данные отчета были изменены.
			                               |Перед завершением работы рекомендуется записать отчет,
			                               |иначе измененные данные будут утеряны.'");
			Возврат;
		КонецЕсли;
		
		Оповещение = Новый ОписаниеОповещения("ВопросСохранитьИзмененияЗавершение", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, НСтр("ru='Данные были изменены. Сохранить изменения?'"), РежимДиалогаВопрос.ДаНетОтмена, , КодВозвратаДиалога.Да);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ЗавершениеРаботы Тогда
		// Принудительное закрытие приводит к разрушению данных.
		// Восстановление актуального состояния можно произвести только при повторном открытии.
		Возврат;
	КонецЕсли;
	
	ПриЗакрытииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ПолученСтатусОтчетаВБанке"
	   И Параметр.Найти(СтруктураРеквизитовФормы.мСохраненныйДок) <> Неопределено Тогда
		СтатусОтчета = СтатусОтчета(СтруктураРеквизитовФормы.мСохраненныйДок);
		ОбновитьОтображениеСостоянияОтчета();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура РазделыОтчетаПриАктивизацииСтроки(Элемент)
	
	Если Элемент.ТекущиеДанные = Неопределено
	 ИЛИ Элемент.ТекущаяСтрока = СтруктураРеквизитовФормы.ТекущаяСтрокаРазделовОтчета Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураРеквизитовФормы.ТекущаяСтрокаРазделовОтчета = Элемент.ТекущаяСтрока;
	Элементы.ОчиститьТекущуюСтраницу.Доступность = Истина;
	
	Если СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере Тогда
		ИмяРаздела = Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
		
		// Коррекция недопустимого значения номера страницы.
		Если мСтруктураМногоуровневыхРазделов.Свойство(ИмяРаздела) Тогда
			НомерСтраницыРаздела = Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета;
			
			Если НЕ мСтруктураМногоуровневыхРазделов[ИмяРаздела].Свойство("СписокСтраниц")
			   И НЕ ЗначениеЗаполнено(НомерСтраницыРаздела) Тогда
				НомерСтраницыРаздела = 1;
			КонецЕсли;
			
			Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета = НомерСтраницыРаздела;
			
		КонецЕсли;
		
		Если мСтруктураМногоуровневыхРазделов.Свойство(ИмяРаздела) Тогда
			СтруктураЭлемента = мСтруктураМногоуровневыхРазделов[ИмяРаздела];
			АдресВДеревеДанныхРаздела = Новый Массив;
			
			ИмяКорневогоРаздела = Неопределено;
			СтруктураЭлемента.Свойство("КорневойРаздел", ИмяКорневогоРаздела);
			
			Если ЗначениеЗаполнено(ИмяКорневогоРаздела) Тогда
				ПромежуточныйЭлемент = Элемент.ТекущиеДанные;
				РодительЭлемента = ПромежуточныйЭлемент.ПолучитьРодителя();
				
				Пока РодительЭлемента <> Неопределено Цикл
					ИмяЭлемента = ПромежуточныйЭлемент.КолонкаРазделыОтчетаСокрНаим;
					ИмяРодителяЭлемента = РодительЭлемента.КолонкаРазделыОтчетаСокрНаим;
					СтруктураРодителя = мСтруктураМногоуровневыхРазделов[ИмяРодителяЭлемента];
					
					Если СтруктураРодителя.Свойство("ИменаПодчиненныхРазделов") Тогда
						ИменаПодчиненныхРазделов = СтруктураРодителя["ИменаПодчиненныхРазделов"];
						ИндексСтраницыРодителя = ИменаПодчиненныхРазделов.Найти(ИмяЭлемента);
						АдресВДеревеДанныхРаздела.Вставить(0, ИндексСтраницыРодителя + 1);
					КонецЕсли;
					
					ПромежуточныйЭлемент = РодительЭлемента;
					РодительЭлемента = РодительЭлемента.ПолучитьРодителя();
					
				КонецЦикла;
				
				Если СтруктураЭлемента.Свойство("Многостраничность") Тогда
					АдресВДеревеДанныхРаздела.Вставить(0, ПромежуточныйЭлемент.КолонкаНомерСтраницыРазделаОтчета);
				Иначе
					АдресВДеревеДанныхРаздела.Вставить(0, 1);
				КонецЕсли;
				
			КонецЕсли;
			
			Если СтруктураЭлемента.Свойство("СписокСтраниц") Тогда
				Если Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета <> 0 Тогда
					АдресВДеревеДанныхРаздела.Добавить(Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета);
				КонецЕсли;
			ИначеЕсли СтруктураЭлемента.Свойство("Многостраничность") Тогда
				АдресВДеревеДанныхРаздела.Добавить(Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета);
			Иначе
				АдресВДеревеДанныхРаздела.Добавить(1);
			КонецЕсли;
			
			ПереключитьРаздел(ИмяРаздела, АдресВДеревеДанныхРаздела);
			
		Иначе
			ПереключитьРаздел(ИмяРаздела);
			
		КонецЕсли;
		
	Иначе
		СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Истина;
		
	КонецЕсли;
	
	КМенюРО = Элементы.РазделыОтчета.КонтекстноеМеню;
	КМенюРО.Видимость = Ложь;
	КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюДобавитьСтраницу.Видимость = Ложь;
	КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюУдалитьСтраницу.Видимость = Ложь;
	
	Если мСтруктураМногоуровневыхРазделов.Свойство(Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим) Тогда
		СтруктураРаздела = мСтруктураМногоуровневыхРазделов[Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим];
		
		ЭтоРазделСПризнаком_Многостраничность = СтруктураРаздела.Свойство("Многостраничность");
		Если ЭтоРазделСПризнаком_Многостраничность Тогда
			Элемент.Развернуть(Элемент.ТекущаяСтрока);
			КМенюРО.Видимость = Истина;
			Если Элемент.ТекущиеДанные.ПолучитьРодителя() = Неопределено Тогда
				Элементы.ОчиститьТекущуюСтраницу.Доступность = Ложь;
			КонецЕсли;
			
			Если НЕ Элемент.ТекущиеДанные.ПолучитьРодителя() = Неопределено
				И Элемент.ТекущиеДанные.ПолучитьРодителя().ПолучитьЭлементы().Количество() > 1 Тогда
				КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюДобавитьСтраницу.Видимость = Истина;
				КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюУдалитьСтраницу.Видимость = Истина;
				
			Иначе
				КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюДобавитьСтраницу.Видимость = Истина;
				КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюУдалитьСтраницу.Видимость = Ложь;
				
			КонецЕсли;
			
			#Если ВебКлиент Тогда
				ВидимостьМеню = КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюДобавитьСтраницу.Видимость;
				КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюДобавитьСтраницу.Видимость = Ложь;
			#КонецЕсли
			
			КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюДобавитьСтраницу.Заголовок = "Добавить страницу";
			
			#Если ВебКлиент Тогда
				КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюДобавитьСтраницу.Видимость = ВидимостьМеню;
			#КонецЕсли
		КонецЕсли;
		
		ЭтоРазделСПризнаком_СписокСтраниц = СтруктураРаздела.Свойство("СписокСтраниц");
		Если ЭтоРазделСПризнаком_СписокСтраниц Тогда
			Элемент.Развернуть(Элемент.ТекущаяСтрока);
		КонецЕсли;
		
	КонецЕсли;
	
	ИмяРаздела = Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
	
	Если ИмяРаздела = "Титульный" Тогда
		Элементы.Обновить.Доступность = Истина;
		Элементы.ТабличныйДокументКонтекстноеМенюГруппаСтроки.Видимость = Ложь;
	Иначе
		Элементы.Обновить.Доступность = Ложь;
		Элементы.ТабличныйДокументКонтекстноеМенюГруппаСтроки.Видимость = Истина;
	КонецЕсли;
	
	ВидимостьОчиститьТекущуюСтраницу = (Элемент.ТекущиеДанные.ПолучитьРодителя() <> Неопределено);
	Элементы.ОчиститьТекущуюСтраницу.Видимость = ВидимостьОчиститьТекущуюСтраницу;
	
	Элементы.ТабличныйДокумент.ТекущаяОбласть = ТабличныйДокумент.Область(1, 1);
	Элементы.ТабличныйДокументСПризнакомВеденияУчета.ТекущаяОбласть = ТабличныйДокумент.Область(1, 1);
	
	УстановитьДоступностьРасшифровкиНаКлиенте(ИмяРаздела);
	
КонецПроцедуры

&НаКлиенте
Процедура ТабличныйДокументВыбор(Элемент, Область, СтандартнаяОбработка)
	
	Если СтрЧислоВхождений(Область.Имя, "ДобавитьСтроку") = 1 И Область.Текст <> "" Тогда
		ДобавитьСтроку("");
	ИначеЕсли СтрЧислоВхождений(Область.Имя, "УдалитьСтроку") = 1 И Область.Текст <> "" Тогда
		УдалитьСтроку("");
	ИначеЕсли СтрЧислоВхождений(Область.Имя, "ДобавитьСтраницу") > 0 И Область.Текст <> "" Тогда
		ДобавитьСтраницу("");
	ИначеЕсли СтрЧислоВхождений(Область.Имя, "УдалитьСтраницу") > 0 И Область.Текст <> "" Тогда
		УдалитьСтраницу("");
	КонецЕсли;
	
	Расшифровка = Область.Расшифровка;
	Если ЗначениеЗаполнено(Расшифровка) И ТипЗнч(Расшифровка) = Тип("Структура")
	   И Расшифровка.Свойство("ВидПерехода") И Расшифровка.ВидПерехода = "ДетальныйПеречень" Тогда
		ПрефиксИдентификатораДанных = Расшифровка.ПрефиксИдентификатораДанных;
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("РегламентированныйОтчет", СтруктураРеквизитовФормы.мСохраненныйДок);
		ПараметрыФормы.Вставить("ПрефиксИдентификатораДанных", ПрефиксИдентификатораДанных);
		ПараметрыФормы.Вставить("ИмяМакетаОтчета", "ФормаОтчета2017Кв3_ПереченьОпераций");
		ПараметрыФормы.Вставить("ЗаголовокОтчета", Расшифровка.ЗаголовокОтчета);
		
		ОткрытьФорму("Отчет.БухгалтерскаяОтчетностьВБанк.Форма.ДетальныйПереченьОпераций", ПараметрыФормы, ЭтаФорма, ПрефиксИдентификатораДанных);
		
	КонецЕсли;
	
	Если Область.Имя = "НастроитьОтчетыПоСчетам" Тогда
		НастроитьОтчетПоСчетам(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли;
	
	Если СтрНайти(Область.Имя, "Навигация") = 1 Тогда
		ПерейтиНаСегментОтчета(СтруктураРеквизитовФормы.НаимТекущегоРаздела, Область.Имя);
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли;
	
	ИмяОбласти = Область.Имя;
	
	ПоляВводаФайлов = "П000110000101, П000110000201, П000110000301, П000110000401, П000110000501,
	                  |П000110000601, П000110000701, П000110000801, П000110000901";
	Если СтрНайти(ПоляВводаФайлов, ИмяОбласти) > 0 Тогда
		ВыбратьОткрытьТипизированныйФайл(ИмяОбласти);
	КонецЕсли;
	
	Если СтрНайти(ИмяОбласти, "УдалитьФайл_П00011") Тогда
		УдалитьТипизированныйФайл(ИмяОбласти);
	КонецЕсли;
	
	Если РегламентированнаяОтчетностьКлиент.ВыбраннаяОбластьРегламентированногоОтчетаНеВерна(
		ЭтаФорма, Область, СтандартнаяОбработка) Тогда
		Возврат;
	КонецЕсли;
	
	Если СтрНайти(ИмяОбласти, "П00007М100015") = 1
	 ИЛИ СтрНайти(ИмяОбласти, "П00008М100015") = 1 Тогда
		СтандартнаяОбработка = Ложь;
		
		СписокВыбора = Новый СписокЗначений;
		СписокВыбора.Добавить("", "<не указан>");
		СписокВыбора.Добавить("Кредит", "Кредит");
		СписокВыбора.Добавить("Овердрафт", "Овердрафт");
		СписокВыбора.Добавить("Займ");
		СписокВыбора.Добавить("Иное");
		
		ОповещениеВыбора = Новый ОписаниеОповещения("ВыборИзСпискаЗавершение", ЭтотОбъект, Область);
		
		ПоказатьВыборИзСписка(ОповещениеВыбора, СписокВыбора, Область,
			СписокВыбора.НайтиПоЗначению(СокрЛП(Область.Значение)));
		
		Возврат;
		
	КонецЕсли;
	
	Если СтрНайти(ИмяОбласти, "П00006М100106") = 1 Тогда
		СтандартнаяОбработка = Ложь;
		
		СписокВыбора = Новый СписокЗначений;
		СписокВыбора.Добавить("", "<не указан>");
		СписокВыбора.Добавить("Финансовый лизинг", "Финансовый лизинг");
		СписокВыбора.Добавить("Операционный лизинг", "Операционный лизинг");
		
		ОповещениеВыбора = Новый ОписаниеОповещения("ВыборИзСпискаЗавершение", ЭтотОбъект, Область);
		
		ПоказатьВыборИзСписка(ОповещениеВыбора, СписокВыбора, Область,
			СписокВыбора.НайтиПоЗначению(СокрЛП(Область.Значение)));
		
		Возврат;
		
	КонецЕсли;
	
	Если СтрНайти(ИмяОбласти, "П00006М100107") = 1 Тогда
		СтандартнаяОбработка = Ложь;
		
		СписокВыбора = Новый СписокЗначений;
		СписокВыбора.Добавить("", "<не указан>");
		СписокВыбора.Добавить("Баланс", "Баланс");
		СписокВыбора.Добавить("Забаланс", "Забаланс");
		
		ОповещениеВыбора = Новый ОписаниеОповещения("ВыборИзСпискаЗавершение", ЭтотОбъект, Область);
		
		ПоказатьВыборИзСписка(ОповещениеВыбора, СписокВыбора, Область,
			СписокВыбора.НайтиПоЗначению(СокрЛП(Область.Значение)));
		
		Возврат;
		
	КонецЕсли;
	
	ПоляВводаВалюты = "П00007М100017,П00008М100017,П00006М100109,П00012М100107,П00013М100107";
	Если СтрНайти(ПоляВводаВалюты, Лев(ИмяОбласти, 13)) > 0 Тогда
		СтандартнаяОбработка = Ложь;
		ФормаВыбора = ПолучитьФорму(
			"Справочник.Валюты.ФормаВыбора", Новый Структура("РежимВыбора", Истина), ЭтаФорма);
		ФормаВыбора.Заголовок = "Выбор валюты";
		ДополнительныеПараметры = Новый Структура("Область", Область);
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ОткрытьФормуВыбораВалютыЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ФормаВыбора.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
		ФормаВыбора.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		ФормаВыбора.Открыть();
		
		Возврат;
		
	КонецЕсли;
	
	ПоляВводаВалюты = "П00010М100101";
	Если СтрНайти(ПоляВводаВалюты, Лев(ИмяОбласти, 13)) > 0 Тогда
		СтандартнаяОбработка = Ложь;
		ФормаВыбора = ПолучитьФорму(
			"Справочник.Валюты.ФормаВыбора", Новый Структура("РежимВыбора", Истина), ЭтаФорма);
		ФормаВыбора.Заголовок = "Выбор валюты";
		
		ДополнительныеПараметры = Новый Структура("Область", Область);
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ОткрытьФормуВыбораВалютыПоНаименованиюЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		
		ФормаВыбора.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
		ФормаВыбора.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		ФормаВыбора.Открыть();
		
		Возврат;
		
	КонецЕсли;
	
	Если ИмяОбласти = "П000090000402" ИЛИ ИмяОбласти = "П000090000602"
	 ИЛИ ИмяОбласти = "П000090000902" ИЛИ ИмяОбласти = "П000090001102"
	 ИЛИ ИмяОбласти = "П000090001202" ИЛИ ИмяОбласти = "П000090001302" Тогда
		СтандартнаяОбработка = Ложь;
		
		СписокВыбора = Новый СписокЗначений;
		СписокВыбора.Добавить("да");
		СписокВыбора.Добавить("нет");
		
		ОповещениеВыбора = Новый ОписаниеОповещения("ВыборИзСпискаЗавершение", ЭтотОбъект, Область);
		
		ПоказатьВыборИзСписка(ОповещениеВыбора, СписокВыбора, Область,
			СписокВыбора.НайтиПоЗначению(СокрЛП(Область.Значение)));
		
	КонецЕсли;
	
	Если ИмяОбласти = "П000090001402" Тогда
		СтандартнаяОбработка = Ложь;
		
		СписокВыбора = Новый СписокЗначений;
		СписокВыбора.Добавить("имеются");
		СписокВыбора.Добавить("отсутствуют");
		
		ОповещениеВыбора = Новый ОписаниеОповещения("ВыборИзСпискаЗавершение", ЭтотОбъект, Область);
		
		ПоказатьВыборИзСписка(ОповещениеВыбора, СписокВыбора, Элементы.ТабличныйДокумент.ТекущаяОбласть,
			СписокВыбора.НайтиПоЗначению(СокрЛП(Область.Значение)));
		
	КонецЕсли;
	
	Если СтрНайти(ИмяОбласти, "П00011М100101") = 1 Тогда
		СтандартнаяОбработка = Ложь;
		
		ИндексОписания = ИндексПоказателя(ИмяОбласти) - 1;
		
		Если ИндексОписания <= СтруктураРеквизитовФормы.ДополнительныеФайлы.ВГраница() Тогда
			ОписаниеФайла = СтруктураРеквизитовФормы.ДополнительныеФайлы[ИндексОписания];
			
			Попытка
				ПолучитьФайл(ОписаниеФайла.АдресХранения, ОписаниеФайла.ИмяФайла, Истина);
				
			Исключение
				ШаблонСообщения = НСтр("ru = 'При выгрузке файла возникла ошибка.
					|%1'");
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					ШаблонСообщения, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
				ПоказатьПредупреждение(, ТекстСообщения, , НСтр("ru = 'Ошибка'"));
				
			КонецПопытки;
			
		КонецЕсли;
		
		Возврат;
		
	КонецЕсли;
	
	ПараметрВводаПоля = РегламентированнаяОтчетностьКлиентСервер.НайтиСвойстваПоказателя(ЭтаФорма, Область.Имя);
	
	Если ПараметрВводаПоля <> Неопределено И ПараметрВводаПоля.ТаблицаЗначений.Количество() > 0 Тогда
		КодПоказателя = ПараметрВводаПоля.Показатель;
		КопироватьДанныеФормы(ПараметрВводаПоля.ТаблицаЗначений, ТЗВыбора);
		
		ВвестиПоказатель(Элемент, Область, КодПоказателя, Ложь, ПараметрВводаПоля.ТекстПриВыборе, ТЗВыбора, СтандартнаяОбработка);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТабличныйДокументПриИзмененииСодержимогоОбласти(Элемент, Область)
	
	ИмяРаздела = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
	
	ИмяПоказателя = Область.Имя;
	ЗначениеПоказателя = Область.Значение;
	
	ОтметитьРазделКакЗаполненный(ИмяРаздела);
	
	Если ИмяСтраницыВывода(ИмяРаздела) = "СтраницаОтчетаСПризнакомОтсутствияДанных" Тогда
		СтатусЗаполненияОтчета = "заполнен";
		НеотображаемыеПоказатели.СтатусЗаполнения = СтатусЗаполненияОтчета;
	КонецЕсли;
	
	Модифицированность = Истина;
	
	Если ИмяРаздела = "ПрочиеПоказатели" И Область.Имя = "П000090001002" И Область.Значение > 100 Тогда
		Область.Значение = 100;
	КонецЕсли;
	
	Если СтруктураЗависимыхЯчеекДляАвторасчета.Свойство(ИмяРаздела) Тогда
		Если ИмяРаздела = "ФинансовыеВложенияКраткосрочные" Тогда
			РасчитатьПоказатели_ФинансовыеВложенияКраткосрочные();
			
		ИначеЕсли ИмяРаздела = "ФинансовыеВложенияДолгосрочные" Тогда
			РасчитатьПоказатели_ФинансовыеВложенияДолгосрочные();
			
		ИначеЕсли ИмяРаздела = "СтруктураВыручки" Тогда
			РасчитатьПоказатели_СтруктураВыручки();
			
		ИначеЕсли ИмяРаздела = "ДополнительныеФайлы" Тогда
			РасчитатьПоказатели_ДополнительныеФайлы();
			
		Иначе
			РасчетПриИзмененииПоказателяНаКлиенте(ИмяРаздела, Область.Имя);
			
		КонецЕсли;
		
	КонецЕсли;
	
	УстановитьДоступностьОбластей(ЭтаФорма, ИмяРаздела);
	
КонецПроцедуры

&НаКлиенте
Процедура ТабличныйДокументПриАктивизацииОбласти(Элемент)
	
	Элементы.ТабличныйДокументКонтекстноеМенюУдалитьСтроку.Доступность = Ложь;
	Элементы.ТабличныйДокументКонтекстноеМенюДобавитьСтроку.Доступность = Ложь;
	
	ИмяГруппы = МногострочнаяЧастьТекущейОбласти(ЭтаФорма, Элемент.ТекущаяОбласть.Имя);
	
	Если ЗначениеЗаполнено(ИмяГруппы) Тогда
		
		Элементы.ТабличныйДокументКонтекстноеМенюДобавитьСтроку.Доступность = Истина;
		
		ИмяПервойГрафы = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппы]["ИменаГраф"][0];
		ИсхКолСтрок = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппы]["ИсхКолСтрок"];
		Координаты = СтрокаСКоординатамиПоказателя(Элемент.ТекущаяОбласть.Имя);
		
		ТестИмя = ИмяПервойГрафы + Координаты + СтрокаСИндексомПоказателя(ИсхКолСтрок + 1);
		Если СтрЧислоВхождений(Элемент.ТекущаяОбласть.Имя, "ДобавитьСтроку") = 0
			И ТабличныйДокумент.Области.Найти(ТестИмя) <> Неопределено Тогда
			Элементы.ТабличныйДокументКонтекстноеМенюУдалитьСтроку.Доступность = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	ДопТекст = ДополнительныйТекстПриДобавленииУдаленииСтрок(ИмяГруппы);
	Если ДопТекст <> Неопределено Тогда
		Элементы.ТабличныйДокументКонтекстноеМенюДобавитьСтроку.Заголовок =
			ДопТекст.ЗаголовокКонтекстногоМенюДобавитьСтроку;
		Элементы.ТабличныйДокументКонтекстноеМенюУдалитьСтроку.Заголовок =
			ДопТекст.ЗаголовокКонтекстногоМенюУдалитьСтроку;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеБухОтчетностиФНСНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ИмяФормыВыбора = "Отчет.БухгалтерскаяОтчетностьВБанк.Форма.ФормаВыбораОтчетаФНС";
	
	ПараметрыФормыВыбора = Новый Структура;
	ПараметрыФормыВыбора.Вставить("ИсточникОтчета", "РегламентированныйОтчетБухОтчетность");
	ПараметрыФормыВыбора.Вставить("Организация", СтруктураРеквизитовФормы.Организация);
	
	ОповещениеОбработчикаВыбора = Новый ОписаниеОповещения(
		"ПредставлениеБухОтчетностиФНСОбработкаВыбора", ЭтотОбъект);
	
	ОткрытьФорму(ИмяФормыВыбора, ПараметрыФормыВыбора, , , , ,
		ОповещениеОбработчикаВыбора, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеБухОтчетностиФНСОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СтруктураРеквизитовФормы.ОтчетыФНС_Бухотчетность = Неопределено;
	СтруктураРеквизитовФормы.ОтчетыФНС_БухотчетностьПредставление = "";
	СтруктураРеквизитовФормы.ОтчетыФНС_БухотчетностьПакет = Неопределено;
	
	ПредставлениеБухОтчетностиФНС = СтруктураРеквизитовФормы.ОтчетыФНС_БухотчетностьПредставление;
	
	ОтметитьРазделКакНезаполненный("ОтчетыФНС");
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеБухОтчетностиФНСОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ЗначениеЗаполнено(СтруктураРеквизитовФормы.ОтчетыФНС_Бухотчетность) Тогда
		ПоказатьЗначение( , СтруктураРеквизитовФормы.ОтчетыФНС_Бухотчетность);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеДекларацииПрибыльФНСНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ИмяФормыВыбора = "Отчет.БухгалтерскаяОтчетностьВБанк.Форма.ФормаВыбораОтчетаФНС";
	
	ПараметрыФормыВыбора = Новый Структура;
	ПараметрыФормыВыбора.Вставить("ИсточникОтчета", "РегламентированныйОтчетПрибыль");
	ПараметрыФормыВыбора.Вставить("Организация", СтруктураРеквизитовФормы.Организация);
	
	ОповещениеОбработчикаВыбора = Новый ОписаниеОповещения(
		"ПредставлениеДекларацииПрибыльФНСОбработкаВыбора", ЭтотОбъект);
	
	ОткрытьФорму(ИмяФормыВыбора, ПараметрыФормыВыбора, , , , ,
		ОповещениеОбработчикаВыбора, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеДекларацииПрибыльФНСОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СтруктураРеквизитовФормы.ОтчетыФНС_Прибыль = Неопределено;
	СтруктураРеквизитовФормы.ОтчетыФНС_ПрибыльПредставление = "";
	СтруктураРеквизитовФормы.ОтчетыФНС_ПрибыльПакет = Неопределено;
	
	ПредставлениеДекларацииПрибыльФНС = СтруктураРеквизитовФормы.ОтчетыФНС_ПрибыльПредставление;
	
	ОтметитьРазделКакНезаполненный("ОтчетыФНС");
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеДекларацииПрибыльФНСОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ЗначениеЗаполнено(СтруктураРеквизитовФормы.ОтчетыФНС_Прибыль) Тогда
		ПоказатьЗначение( , СтруктураРеквизитовФормы.ОтчетыФНС_Прибыль);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеДекларацииНДСФНСНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ИмяФормыВыбора = "Отчет.БухгалтерскаяОтчетностьВБанк.Форма.ФормаВыбораОтчетаФНС";
	
	ПараметрыФормыВыбора = Новый Структура;
	ПараметрыФормыВыбора.Вставить("ИсточникОтчета", "РегламентированныйОтчетНДС");
	ПараметрыФормыВыбора.Вставить("Организация", СтруктураРеквизитовФормы.Организация);
	
	ОповещениеОбработчикаВыбора = Новый ОписаниеОповещения(
		"ПредставлениеДекларацииНДСФНСОбработкаВыбора", ЭтотОбъект);
	
	ОткрытьФорму(ИмяФормыВыбора, ПараметрыФормыВыбора, , , , ,
		ОповещениеОбработчикаВыбора, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеДекларацииНДСФНСОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СтруктураРеквизитовФормы.ОтчетыФНС_НДС = Неопределено;
	СтруктураРеквизитовФормы.ОтчетыФНС_НДСПредставление = "";
	СтруктураРеквизитовФормы.ОтчетыФНС_НДСПакет = Неопределено;
	
	ПредставлениеДекларацииНДСФНС = СтруктураРеквизитовФормы.ОтчетыФНС_НДСПредставление;
	
	ОтметитьРазделКакНезаполненный("ОтчетыФНС");
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеДекларацииНДСФНСОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ЗначениеЗаполнено(СтруктураРеквизитовФормы.ОтчетыФНС_НДС) Тогда
		ПоказатьЗначение( , СтруктураРеквизитовФормы.ОтчетыФНС_НДС);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеСправкиОбИсполненииОбязанностейПоУплатеФНСНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ИмяФормыВыбора = "Отчет.БухгалтерскаяОтчетностьВБанк.Форма.ФормаВыбораСправкиФНС";
	
	ПараметрыФормыВыбора = Новый Структура;
	ПараметрыФормыВыбора.Вставить("ИсточникОтчета", "РегламентированныйОтчетУСН");
	ПараметрыФормыВыбора.Вставить("Организация", СтруктураРеквизитовФормы.Организация);
	
	ОповещениеОбработчикаВыбора = Новый ОписаниеОповещения(
		"ПредставлениеСправкиОбИсполненииОбязанностейПоУплатеФНСОбработкаВыбора", ЭтотОбъект);
	
	ОткрытьФорму(ИмяФормыВыбора, ПараметрыФормыВыбора, , , , ,
		ОповещениеОбработчикаВыбора, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеСправкиОбИсполненииОбязанностейПоУплатеФНСОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СтруктураРеквизитовФормы.ОтчетыФНС_СправкаИспОбУпл = Неопределено;
	СтруктураРеквизитовФормы.ОтчетыФНС_СправкаИспОбУплПредставление = "";
	СтруктураРеквизитовФормы.ОтчетыФНС_СправкаИспОбУплПакет = Неопределено;
	
	ПредставлениеСправкиОбИсполненииОбязанностейПоУплатеФНС = СтруктураРеквизитовФормы.ОтчетыФНС_СправкаИспОбУплПредставление;
	
	ОтметитьРазделКакНезаполненный("ОтчетыФНС");
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеСправкиОбИсполненииОбязанностейПоУплатеФНСОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ЗначениеЗаполнено(СтруктураРеквизитовФормы.ОтчетыФНС_СправкаИспОбУпл) Тогда
		ПоказатьЗначение( , СтруктураРеквизитовФормы.ОтчетыФНС_СправкаИспОбУпл);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийПриИзменении(Элемент)
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура СтатусЗаполненияОтчетаПриИзменении(Элемент)
	
	Модифицированность = Истина;
	
	ИмяРаздела = СтруктураРеквизитовФормы.НаимТекущегоРаздела;
	АдресСтраницыОтчета = СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела;
	
	Если СтатусЗаполненияОтчета = "новый" Тогда
		ОчисткаСтраницыРазделаРеглОтчетаНаСервере(ИмяРаздела);
		Элементы.ТабличныйДокументСПризнакомВеденияУчета.ТекущаяОбласть = ТабличныйДокумент.Область(1, 1);
		
	ИначеЕсли СтатусЗаполненияОтчета = "заполнен" Тогда
		Если РазделАвтозаполняется(ИмяРаздела) Тогда
			РезультатЗапускаФоновогоЗадания = ЗаполнитьАвтоНаСервере(Ложь);
			
			Если РезультатЗапускаФоновогоЗадания.Статус = "Выполняется" Тогда
				ОповещениеОЗавершении = Новый ОписаниеОповещения("ОбработатьЗавершениеАвтозаполненияВФоне", ЭтотОбъект);
				ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтаФорма);
				ДлительныеОперацииКлиент.ОжидатьЗавершение(РезультатЗапускаФоновогоЗадания, ОповещениеОЗавершении, ПараметрыОжидания);
				
			КонецЕсли;
			
		Иначе
			УстановитьСтатусЗаполненияВПараметрахОтчета();
			
		КонецЕсли;
		
	ИначеЕсли СтатусЗаполненияОтчета = "пустой" Тогда
		Если РазделАвтозаполняется(ИмяРаздела) Тогда
			ОчисткаСтраницыРазделаРеглОтчетаНаСервере(ИмяРаздела);
			Элементы.ТабличныйДокументСПризнакомВеденияУчета.ТекущаяОбласть = ТабличныйДокумент.Область(1, 1);
			СтатусЗаполненияОтчета = "пустой";
		КонецЕсли;
		
		УстановитьСтатусЗаполненияВПараметрахОтчета();
		
	КонецЕсли;
	
	ПоказатьРаздел(ИмяРаздела, АдресСтраницыОтчета);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура СохранитьОтчет(Команда)
	
	Если Элементы.РазделыОтчета.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СохранитьНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуНастроек(Команда)
	
	ОткрытьФормуВыбораСтраниц("ВыбратьДляНастройки");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьАвто(Команда)
	
	Отказ = Ложь;
	
	РегламентированнаяОтчетностьКлиентПереопределяемый.ПроверитьВозможностьАвтоЗаполненияРеглОтчета(ИмяФормы, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("Команда", Команда);
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьАвтоСохранениеНового", ЭтотОбъект, ДополнительныеПараметры);
	
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередЗаполнениемРегламентированногоОтчета(
		ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура Расшифровать(Команда)
	
	ИмяРаздела = СтруктураРеквизитовФормы.НаимТекущегоРаздела;
	Если ИмяСтраницыВывода(ИмяРаздела) = "СтраницаОтчетаСПризнакомОтсутствияДанных" Тогда
		ЭлементОтображения = Элементы.ТабличныйДокументСПризнакомВеденияУчета;
	Иначе
		ЭлементОтображения = Элементы.ТабличныйДокумент;
	КонецЕсли;
	
	Если ТипЗнч(НеотображаемыеПоказатели) = Тип("Структура")
	   И НеотображаемыеПоказатели.Свойство("Расшифровка")
	   И ЗначениеЗаполнено(НеотображаемыеПоказатели.Расшифровка) Тогда
		ПараметрыОтчета = Новый Структура;
		ПараметрыОтчета.Вставить("Организация",                         СтруктураРеквизитовФормы.Организация);
		ПараметрыОтчета.Вставить("мДатаНачалаПериодаОтчета",            СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
		ПараметрыОтчета.Вставить("мДатаКонцаПериодаОтчета",             СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
		
		АдресТаблицыРасшифровок = АдресТаблицыРасшифровок(
			СтруктураРеквизитовФормы.АдресВременногоХранилищаРасшифровки,
			НеотображаемыеПоказатели.Расшифровка);
		
		ПараметрыОтчета.Вставить("АдресВременногоХранилищаРасшифровки", АдресТаблицыРасшифровок);
		
		ИДОтчета = Сред(Лев(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, ".Форма.") - 1), 7);
		ИДРедакцииОтчета = Сред(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, ".Форма.") + 7);
		
		ИДИменПоказателей = Новый Массив();
		ИДИменПоказателей.Добавить(ЭлементОтображения.ТекущаяОбласть.Имя);
		
		РегламентированнаяОтчетностьКлиент.ОткрытьРасшифровкуОтчета(ИДОтчета, ИДРедакцииОтчета, ИДИменПоказателей, ПараметрыОтчета);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузку(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьВыгрузкуЗавершение", ЭтотОбъект);
	
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьВБанк(Команда)
	
	ОчиститьСообщения();
	
	ЕдиницаИзмерения = СтруктураРеквизитовФормы.ЕдиницаИзмерения;
	ТочностьЕдиницыИзмерения = СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения;
	
	КорректнаяЕдиницаИзмеренияТочность = 
		(ЕдиницаИзмерения = ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1000
		ИЛИ ЕдиницаИзмерения = ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1000000)
		И (СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = 0);
	
	Если НЕ КорректнаяЕдиницаИзмеренияТочность Тогда
		ТекстПредупреждения = НСтр("ru='Для отправки установите единицу измерения ""в тысячах рублей"" или ""в миллионах рублей"" с точностью ""0""'");
		ПоказатьПредупреждение( , ТекстПредупреждения);
		
		Возврат;
		
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОтправитьВБанкЗавершение", ЭтотОбъект);
	
	Если Модифицированность Тогда
		СохранитьНаКлиенте( , ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Форма", ЭтаФорма);
	Оповещение = Новый ОписаниеОповещения("ПослеСохраненияФормыЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	СохранитьНаКлиенте(, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура Обновить(Команда)
	
	ЗаполнитьСведенияОбОрганизации();
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьОтчет(Команда)
	
	РегламентированнаяОтчетностьКлиент.МеханизмыОчисткиРегламентированныхОтчетов(
		ЭтаФорма, "ОчиститьВесьОтчет");
		
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТекущийРаздел(Команда)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяРаздела", СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	ДополнительныеПараметры.Вставить("ВыполняемоеОповещение", Новый ОписаниеОповещения("ОчиститьТекущийРазделЗавершение", ЭтотОбъект));
	
	ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='Внимание! Будет очищен текущий раздел.%1Продолжить?'"), Символы.ПС);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВопросОчиститьТекущийРазделЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТекущуюСтраницу(Команда)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяРаздела", СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	ДополнительныеПараметры.Вставить("ВыполняемоеОповещение", Новый ОписаниеОповещения("ОчиститьТекущуюСтраницуЗавершение", ЭтотОбъект));
	
	ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
	НСтр("ru='Внимание! Будет очищена текущая страница.%1Продолжить?'"), Символы.ПС);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВопросОчиститьТекущуюСтраницуЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
	
КонецПроцедуры

&НаКлиенте
Процедура Выгрузить(Команда)
	
	ОчиститьСообщения();
	
	ЕдиницаИзмерения = СтруктураРеквизитовФормы.ЕдиницаИзмерения;
	ТочностьЕдиницыИзмерения = СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения;
	
	КорректнаяЕдиницаИзмеренияТочность = 
		(ЕдиницаИзмерения = ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1000
		ИЛИ ЕдиницаИзмерения = ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1000000)
		И (СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = 0);
	
	Если НЕ КорректнаяЕдиницаИзмеренияТочность Тогда
		ТекстПредупреждения = НСтр("ru='Для выгрузки пакета отчетности на диск установите единицу измерения ""в тысячах рублей"" или ""в миллионах рублей"" с точностью ""0""'");
		ПоказатьПредупреждение( , ТекстПредупреждения);
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьЗавершение", ЭтотОбъект);
	
	Если Модифицированность Тогда
		СохранитьНаКлиенте( , ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ИнициализацияФормы

&НаСервере
Процедура СформироватьСтруктуруРеквизитовФормы()
	
	СтруктураРеквизитовФормы = Новый Структура;
	СтруктураРеквизитовФормы.Вставить("мВыбраннаяФорма");
	СтруктураРеквизитовФормы.Вставить("мСкопированаФорма");
	СтруктураРеквизитовФормы.Вставить("мСохраненныйДок");
	СтруктураРеквизитовФормы.Вставить("мДатаНачалаПериодаОтчета");
	СтруктураРеквизитовФормы.Вставить("мДатаКонцаПериодаОтчета");
	СтруктураРеквизитовФормы.Вставить("мЗаписываетсяНовыйДокумент");
	СтруктураРеквизитовФормы.Вставить("мВариант");
	СтруктураРеквизитовФормы.Вставить("мВерсияФормы");
	СтруктураРеквизитовФормы.Вставить("мВПрограммеИзмененаОрганизация", Ложь);
	СтруктураРеквизитовФормы.Вставить("мБезОткрытияФормы");
	СтруктураРеквизитовФормы.Вставить("мРежимПечати");
	СтруктураРеквизитовФормы.Вставить("НаимТекущегоРаздела");
	СтруктураРеквизитовФормы.Вставить("НомерСтраницыТекущегоРаздела");
	СтруктураРеквизитовФормы.Вставить("ВидДокумента");
	СтруктураРеквизитовФормы.Вставить("СтрПериодОтчета");
	СтруктураРеквизитовФормы.Вставить("Организация");
	СтруктураРеквизитовФормы.Вставить("ИП");
	СтруктураРеквизитовФормы.Вставить("НаимОрганизации");
	СтруктураРеквизитовФормы.Вставить("ВыводитьСтраницуВТаблДокНаСервере");
	СтруктураРеквизитовФормы.Вставить("ФлажокОтклАвтоРасчет", Ложь);
	СтруктураРеквизитовФормы.Вставить("ТекущаяСтрокаРазделовОтчета");
	СтруктураРеквизитовФормы.Вставить("АдресВоВременномХранилище");
	СтруктураРеквизитовФормы.Вставить("АдресВременногоХранилищаРасшифровки");
	СтруктураРеквизитовФормы.Вставить("Банк");
	
	СтруктураРеквизитовФормы.Вставить("ЕдиницаИзмерения");
	СтруктураРеквизитовФормы.Вставить("ТочностьЕдиницыИзмерения");
	СтруктураРеквизитовФормы.Вставить("мСтрокаФормата");
	
	СтруктураРеквизитовФормы.Вставить("НомераСтрокМногоуровнегоРаздела");
	СтруктураРеквизитовФормы.Вставить("СтруктураМногострочныхЧастей");
	СтруктураРеквизитовФормы.Вставить("ДлинаИмениГруппы");
	СтруктураРеквизитовФормы.Вставить("ДлинаИмениГрафы");
	СтруктураРеквизитовФормы.Вставить("мИдГруппы6М1");
	СтруктураРеквизитовФормы.Вставить("мИдГруппы6М2");
	СтруктураРеквизитовФормы.Вставить("мИдГруппы7М1");
	СтруктураРеквизитовФормы.Вставить("мИдГруппы7М2");
	СтруктураРеквизитовФормы.Вставить("мИдГруппы8М1");
	СтруктураРеквизитовФормы.Вставить("мИдГруппы8М2");
	СтруктураРеквизитовФормы.Вставить("мИдГруппы10М1");
	СтруктураРеквизитовФормы.Вставить("мИдГруппы11М1");
	СтруктураРеквизитовФормы.Вставить("мИдГруппы12М1");
	СтруктураРеквизитовФормы.Вставить("мИдГруппы13М1");
	
	СтруктураРеквизитовФормы.Вставить("АвтозаполняемыеПоказатели");
	СтруктураРеквизитовФормы.Вставить("ОтображатьКнопкуЗаполнить", Ложь);
	СтруктураРеквизитовФормы.Вставить("ОтображатьКнопкуРасшифровать", Ложь);
	СтруктураРеквизитовФормы.Вставить("мСохранятьРасшифровку", Истина);
	
	СтруктураРеквизитовФормы.Вставить("ДополнительныеТипизированныеФайлы", НовоеОписаниеТипизированныхФайлов());
	СтруктураРеквизитовФормы.Вставить("ДополнительныеФайлы", Новый Массив);
	
	СтруктураРеквизитовФормы.Вставить("ОтчетыФНС_Бухотчетность"); // ссылка на документ регламентированного отчета
	СтруктураРеквизитовФормы.Вставить("ОтчетыФНС_БухотчетностьПредставление", "");
	СтруктураРеквизитовФормы.Вставить("ОтчетыФНС_БухотчетностьПакет"); // двоичные данные пакета
	
	СтруктураРеквизитовФормы.Вставить("ОтчетыФНС_Прибыль"); // ссылка на документ регламентированного отчета
	СтруктураРеквизитовФормы.Вставить("ОтчетыФНС_ПрибыльПредставление", "");
	СтруктураРеквизитовФормы.Вставить("ОтчетыФНС_ПрибыльПакет"); // двоичные данные пакета
	
	СтруктураРеквизитовФормы.Вставить("ОтчетыФНС_НДС"); // ссылка на документ регламентированного отчета
	СтруктураРеквизитовФормы.Вставить("ОтчетыФНС_НДСПредставление", "");
	СтруктураРеквизитовФормы.Вставить("ОтчетыФНС_НДСПакет"); // двоичные данные пакета
	
	СтруктураРеквизитовФормы.Вставить("ОтчетыФНС_СправкаИспОбУпл"); // ссылка на документ запроса на информационное обслуживание
	СтруктураРеквизитовФормы.Вставить("ОтчетыФНС_СправкаИспОбУплПредставление", "");
	СтруктураРеквизитовФормы.Вставить("ОтчетыФНС_СправкаИспОбУплПакет"); // двоичные данные пакета
	
	СтруктураРеквизитовФормы.Вставить("АктивныйСегмент");
	
	СтруктураРеквизитовФормы.Вставить("ПрименениеУСН0"); // в отчетном периоде
	СтруктураРеквизитовФормы.Вставить("ПрименениеУСН1"); // в предшествующем периоде
	
	СтруктураРеквизитовФормы.Вставить("НаблюдательЗаполненияРазделов", Новый Структура);
	
	СтруктураРеквизитовФормы.Вставить("ВерсияФормата");
	
КонецПроцедуры

&НаСервере
Процедура Инициализация(БезОткрытияФормы = Ложь) Экспорт
	
	СтруктураРеквизитовФормы.мБезОткрытияФормы = БезОткрытияФормы;
	СтруктураРеквизитовФормы.мРежимПечати = Ложь;
	
	СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный";
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(МакетРаздела(СтруктураРеквизитовФормы.НаимТекущегоРаздела));
	Элементы.ЗаполнитьТекущий.Доступность = Ложь;
	
	ИнициализироватьМногострочныеЧасти();
	ИнициализироватьМногоуровневыеРазделы();
	ИнициализироватьОбычныеРазделы();
	
	ЗаполнитьСтруктуруЗависимыхЯчеекДляАвторасчета();
	
	СформироватьСпискиВыбора();
	
	ИнициализироватьДеревоРазделовОтчета();
	УстановитьПризнакиЗаполненияРазделовПоСведениямИБ();
	ИнициализироватьНаблюдательЗаполненияРазделов();
	
	Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
		// Новый документ.
		НомерКорректировки = 1;
		СтруктураРеквизитовФормы.ВидДокумента = 0;
		
		СтруктураРеквизитовФормы.ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1000;
		СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = 0;
		
		СтруктураРеквизитовФормы.ВерсияФормата = "5.10.01";
		
		КопироватьДанныеФормы(мДеревоСтраницОтчета, мДеревоВыбранныхСтраниц);
		
		СтруктураРеквизитовФормы.ИП = НЕ РегламентированнаяОтчетностьВызовСервера.ЭтоЮридическоеЛицо(СтруктураРеквизитовФормы.Организация);
		
		ЗаполнитьСведенияОбОрганизации();
		
		ТабличныйДокумент.Области.ДатаУтвОтчетности.Значение = ДатаПодписи;
		
		СформироватьДеревоРазделовОтчетаНаСервере();
		
		ОтметитьРазделыКакНезаполненные();
		
		Модифицированность = Истина;
		
	Иначе
		// Сохраненный или скопированный документ.
		ВосстановитьСохраненныеДанные();
		
		Если ЗначениеЗаполнено(СтруктураРеквизитовФормы.мСкопированаФорма) Тогда
			// Действия при копировании формы.
			СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено;
			Модифицированность = Истина;
		КонецЕсли;
		
		Если НЕ БезОткрытияФормы
		   И НЕ СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
			ЗаблокироватьДанныеДляРедактирования(СтруктураРеквизитовФормы.мСохраненныйДок, , ЭтаФорма.УникальныйИдентификатор);
		КонецЕсли;
		
		СтруктураРеквизитовФормы.ИП = НЕ РегламентированнаяОтчетностьВызовСервера.ЭтоЮридическоеЛицо(СтруктураРеквизитовФормы.Организация);
		
		Если СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация Тогда
			ЗаполнитьСведенияОбОрганизации();
		КонецЕсли;
		
	КонецЕсли;
	
	УстановитьПризнакиПримененияУСН();
	УстановитьСтраницыВыводаОтчетов();
	
	СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
	
	СтруктураРеквизитовФормы.НаимОрганизации = СтруктураРеквизитовФормы.Организация.Наименование;
	
	УстановитьЗаголовокОтчетности();
	
	ПолучитьСведенияОПоказателяхОтчета();
	
	Если НЕ СтруктураРеквизитовФормы.ОтображатьКнопкуЗаполнить Тогда
		Элементы.Заполнить.Видимость = Ложь;
	КонецЕсли;
	
	Если НЕ СтруктураРеквизитовФормы.ОтображатьКнопкуРасшифровать Тогда
		Элементы.Расшифровать.Видимость = Ложь;
		Элементы.ТабличныйДокументКонтекстноеМенюРасшифровать.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьМногострочныеЧасти()
	
	// Идентификаторы многострочных групп.
	СтруктураРеквизитовФормы.мИдГруппы6М1  = "П00006М1";
	СтруктураРеквизитовФормы.мИдГруппы6М2  = "П00006М2";
	СтруктураРеквизитовФормы.мИдГруппы7М1  = "П00007М1";
	СтруктураРеквизитовФормы.мИдГруппы7М2  = "П00007М2";
	СтруктураРеквизитовФормы.мИдГруппы8М1  = "П00008М1";
	СтруктураРеквизитовФормы.мИдГруппы8М2  = "П00008М2";
	СтруктураРеквизитовФормы.мИдГруппы10М1 = "П00010М1";
	СтруктураРеквизитовФормы.мИдГруппы11М1 = "П00011М1";
	СтруктураРеквизитовФормы.мИдГруппы12М1 = "П00012М1";
	СтруктураРеквизитовФормы.мИдГруппы13М1 = "П00013М1";
	
	// Свойства, общие для всех многострочных групп.
	СтруктураРеквизитовФормы.ДлинаИмениГруппы = 8;
	СтруктураРеквизитовФормы.ДлинаИмениГрафы  = 13;
	
	// Структура с описанием свойств каждой группы в отдельности.
	СтруктураМногострочныхЧастей = Новый Структура;
	
	// Группа П00006М1.
	ИменаГраф = Новый Массив;
	Для Инд = 1 По 17 Цикл
		ИменаГраф.Добавить("П00006М1001" + Формат(Инд, "ЧЦ=2; ЧВН=; ЧГ=0"));
	КонецЦикла;
	
	ИменаПодчиненныхГрупп = Новый Массив;
	ИменаПодчиненныхГрупп.Добавить(СтруктураРеквизитовФормы.мИдГруппы6М2);
	
	СтруктураМногострочныхЧастей.Вставить(
		СтруктураРеквизитовФормы.мИдГруппы6М1, Новый Структура(
		"ИменаГраф, ИсхКолСтрок, УровеньПодчинения, ИменаПодчиненныхГрупп",
		ИменаГраф, 1, 0, ИменаПодчиненныхГрупп));
	
	// Группа П00006М2.
	ИменаГраф = Новый Массив;
	Для Инд = 1 По 5 Цикл
		ИменаГраф.Добавить("П00006М2001" + Формат(Инд, "ЧЦ=2; ЧВН=; ЧГ=0"));
	КонецЦикла;
	
	ИменаПодчиненныхГрупп = Новый Массив;
	
	СтруктураМногострочныхЧастей.Вставить(
		СтруктураРеквизитовФормы.мИдГруппы6М2, Новый Структура(
		"ИменаГраф, ИсхКолСтрок, УровеньПодчинения, ИменаПодчиненныхГрупп",
		ИменаГраф, 1, 1, ИменаПодчиненныхГрупп));
	
	// Группа П00007М1.
	ИменаГраф = Новый Массив;
	Для Инд = 1 По 32 Цикл
		ИменаГраф.Добавить("П00007М1000" + Формат(Инд, "ЧЦ=2; ЧВН=; ЧГ=0"));
	КонецЦикла;
	
	ИменаПодчиненныхГрупп = Новый Массив;
	ИменаПодчиненныхГрупп.Добавить(СтруктураРеквизитовФормы.мИдГруппы7М2);
	
	СтруктураМногострочныхЧастей.Вставить(
		СтруктураРеквизитовФормы.мИдГруппы7М1, Новый Структура(
		"ИменаГраф, ИсхКолСтрок, УровеньПодчинения, ИменаПодчиненныхГрупп",
		ИменаГраф, 1, 0, ИменаПодчиненныхГрупп));
	
	// Группа П00007М2.
	ИменаГраф = Новый Массив;
	Для Инд = 1 По 5 Цикл
		ИменаГраф.Добавить("П00007М2000" + Формат(Инд, "ЧЦ=2; ЧВН=; ЧГ=0"));
	КонецЦикла;
	
	ИменаПодчиненныхГрупп = Новый Массив;
	
	СтруктураМногострочныхЧастей.Вставить(
		СтруктураРеквизитовФормы.мИдГруппы7М2, Новый Структура(
		"ИменаГраф, ИсхКолСтрок, УровеньПодчинения, ИменаПодчиненныхГрупп",
		ИменаГраф, 1, 1, ИменаПодчиненныхГрупп));
	
	// Группа П00008М1.
	ИменаГраф = Новый Массив;
	Для Инд = 1 По 32 Цикл
		ИменаГраф.Добавить("П00008М1000" + Формат(Инд, "ЧЦ=2; ЧВН=; ЧГ=0"));
	КонецЦикла;
	
	ИменаПодчиненныхГрупп = Новый Массив;
	ИменаПодчиненныхГрупп.Добавить(СтруктураРеквизитовФормы.мИдГруппы8М2);
	
	СтруктураМногострочныхЧастей.Вставить(
		СтруктураРеквизитовФормы.мИдГруппы8М1, Новый Структура(
		"ИменаГраф, ИсхКолСтрок, УровеньПодчинения, ИменаПодчиненныхГрупп",
		ИменаГраф, 1, 0, ИменаПодчиненныхГрупп));
	
	// Группа П00008М2.
	ИменаГраф = Новый Массив;
	Для Инд = 1 По 5 Цикл
		ИменаГраф.Добавить("П00008М2000" + Формат(Инд, "ЧЦ=2; ЧВН=; ЧГ=0"));
	КонецЦикла;
	
	ИменаПодчиненныхГрупп = Новый Массив;
	
	СтруктураМногострочныхЧастей.Вставить(
		СтруктураРеквизитовФормы.мИдГруппы8М2, Новый Структура(
		"ИменаГраф, ИсхКолСтрок, УровеньПодчинения, ИменаПодчиненныхГрупп",
		ИменаГраф, 1, 1, ИменаПодчиненныхГрупп));
	
	// Группа П00010М1.
	ИменаГраф = Новый Массив;
	ИменаГраф.Добавить("П00010М100101");
	ИменаГраф.Добавить("П00010М100102");
	ИменаГраф.Добавить("П00010М100103");
	
	ИменаПодчиненныхГрупп = Новый Массив;
	
	СтруктураМногострочныхЧастей.Вставить(
		СтруктураРеквизитовФормы.мИдГруппы10М1, Новый Структура(
		"ИменаГраф, ИсхКолСтрок, УровеньПодчинения, ИменаПодчиненныхГрупп",
		ИменаГраф, 1, 0, ИменаПодчиненныхГрупп));
	
	// Группа П00011М1.
	ИменаГраф = Новый Массив;
	ИменаГраф.Добавить("П00011М100101");
	ИменаГраф.Добавить("П00011М100102");
	
	ИменаПодчиненныхГрупп = Новый Массив;
	
	СтруктураМногострочныхЧастей.Вставить(
		СтруктураРеквизитовФормы.мИдГруппы11М1, Новый Структура(
		"ИменаГраф, ИсхКолСтрок, УровеньПодчинения, ИменаПодчиненныхГрупп",
		ИменаГраф, 1, 0, ИменаПодчиненныхГрупп));
	
	// Группа П00012М1.
	ИменаГраф = Новый Массив;
	Для Инд = 1 По 12 Цикл
		ИменаГраф.Добавить("П00012М1001" + Формат(Инд, "ЧЦ=2; ЧВН=; ЧГ=0"));
	КонецЦикла;
	
	ИменаПодчиненныхГрупп = Новый Массив;
	
	СтруктураМногострочныхЧастей.Вставить(
		СтруктураРеквизитовФормы.мИдГруппы12М1, Новый Структура(
		"ИменаГраф, ИсхКолСтрок, УровеньПодчинения, ИменаПодчиненныхГрупп",
		ИменаГраф, 1, 0, ИменаПодчиненныхГрупп));
	
	// Группа П00013М1.
	ИменаГраф = Новый Массив;
	Для Инд = 1 По 12 Цикл
		ИменаГраф.Добавить("П00013М1001" + Формат(Инд, "ЧЦ=2; ЧВН=; ЧГ=0"));
	КонецЦикла;
	
	ИменаПодчиненныхГрупп = Новый Массив;
	
	СтруктураМногострочныхЧастей.Вставить(
		СтруктураРеквизитовФормы.мИдГруппы13М1, Новый Структура(
		"ИменаГраф, ИсхКолСтрок, УровеньПодчинения, ИменаПодчиненныхГрупп",
		ИменаГраф, 1, 0, ИменаПодчиненныхГрупп));
	
	СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей = СтруктураМногострочныхЧастей;
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьМногоуровневыеРазделы()
	
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела = Новый Массив;
	
	мСтруктураМногоуровневыхРазделов = Новый Структура;
	
	СтруктураРаздела = Новый Структура;
	мСтруктураМногоуровневыхРазделов.Вставить("Баланс", СтруктураРаздела);
	
	СтруктураРаздела = Новый Структура;
	мСтруктураМногоуровневыхРазделов.Вставить("ОФР", СтруктураРаздела);
	
	СтруктураРаздела = Новый Структура;
	мСтруктураМногоуровневыхРазделов.Вставить("ОИК", СтруктураРаздела);
	
	СтруктураРаздела = Новый Структура;
	мСтруктураМногоуровневыхРазделов.Вставить("ОДДС", СтруктураРаздела);
	
	СтруктураРаздела = Новый Структура;
	мСтруктураМногоуровневыхРазделов.Вставить("ОЦИС", СтруктураРаздела);
	
	СтруктураРаздела = Новый Структура;
	мСтруктураМногоуровневыхРазделов.Вставить("ДополнительныеПоказатели", СтруктураРаздела);
	
	// Расшифровки обеспечений.
	
	СтруктураРаздела = Новый Структура;
	ИменаПодчиненныхРазделов = Новый Массив;
	ИменаПодчиненныхРазделов.Добавить("РасшифровкиОбеспеченийПолученные");
	ИменаПодчиненныхРазделов.Добавить("РасшифровкиОбеспеченийВыданные");
	СтруктураРаздела.Вставить("ИменаПодчиненныхРазделов", ИменаПодчиненныхРазделов);
	мСтруктураМногоуровневыхРазделов.Вставить("РасшифровкиОбеспечений", СтруктураРаздела);
	
	СтруктураРаздела = Новый Структура;
	СтруктураРаздела.Вставить("Подчиненность");
	СтруктураРаздела.Вставить("КорневойРаздел", "РасшифровкиОбеспечений");
	мСтруктураМногоуровневыхРазделов.Вставить("РасшифровкиОбеспеченийПолученные", СтруктураРаздела);
	
	СтруктураРаздела = Новый Структура;
	СтруктураРаздела.Вставить("Подчиненность");
	СтруктураРаздела.Вставить("КорневойРаздел", "РасшифровкиОбеспечений");
	мСтруктураМногоуровневыхРазделов.Вставить("РасшифровкиОбеспеченийВыданные", СтруктураРаздела);
	
	// Задолженность по кредитам и займам.
	СтруктураРаздела = Новый Структура;
	ИменаПодчиненныхРазделов = Новый Массив;
	ИменаПодчиненныхРазделов.Добавить("ЗадолженностьПоКредитамЗаймамКраткосрочная");
	ИменаПодчиненныхРазделов.Добавить("ЗадолженностьПоКредитамЗаймамДолгосрочная");
	СтруктураРаздела.Вставить("ИменаПодчиненныхРазделов", ИменаПодчиненныхРазделов);
	мСтруктураМногоуровневыхРазделов.Вставить("ЗадолженностьПоКредитамЗаймам", СтруктураРаздела);
	
	СтруктураРаздела = Новый Структура;
	СтруктураРаздела.Вставить("Подчиненность");
	СтруктураРаздела.Вставить("КорневойРаздел", "ЗадолженностьПоКредитамЗаймам");
	ИменаГруппМнЧ = Новый Массив;
	ИменаГруппМнЧ.Добавить(СтруктураРеквизитовФормы.мИдГруппы7М1);
	СтруктураРаздела.Вставить("ИменаГруппМнЧ", ИменаГруппМнЧ);
	мСтруктураМногоуровневыхРазделов.Вставить("ЗадолженностьПоКредитамЗаймамКраткосрочная", СтруктураРаздела);
	
	СтруктураРаздела = Новый Структура;
	СтруктураРаздела.Вставить("Подчиненность");
	СтруктураРаздела.Вставить("КорневойРаздел", "ЗадолженностьПоКредитамЗаймам");
	ИменаГруппМнЧ = Новый Массив;
	ИменаГруппМнЧ.Добавить(СтруктураРеквизитовФормы.мИдГруппы8М1);
	СтруктураРаздела.Вставить("ИменаГруппМнЧ", ИменаГруппМнЧ);
	мСтруктураМногоуровневыхРазделов.Вставить("ЗадолженностьПоКредитамЗаймамДолгосрочная", СтруктураРаздела);
	
	// Финансовый лизинг.
	
	СтруктураРаздела = Новый Структура;
	ИменаГруппМнЧ = Новый Массив;
	ИменаГруппМнЧ.Добавить(СтруктураРеквизитовФормы.мИдГруппы6М1);
	СтруктураРаздела.Вставить("ИменаГруппМнЧ", ИменаГруппМнЧ);
	мСтруктураМногоуровневыхРазделов.Вставить("ЛизингОбязательства", СтруктураРаздела);
	
	// Денежные средства.
	
	СтруктураРаздела = Новый Структура;
	ИменаПодчиненныхРазделов = Новый Массив;
	ИменаПодчиненныхРазделов.Добавить("ДенежныеСредства50");
	ИменаПодчиненныхРазделов.Добавить("ДенежныеСредства51");
	ИменаПодчиненныхРазделов.Добавить("ДенежныеСредства52");
	ИменаПодчиненныхРазделов.Добавить("ДенежныеСредства55");
	СтруктураРаздела.Вставить("ИменаПодчиненныхРазделов", ИменаПодчиненныхРазделов);
	мСтруктураМногоуровневыхРазделов.Вставить("ДенежныеСредства", СтруктураРаздела);
	
	СтруктураРаздела = Новый Структура;
	СтруктураРаздела.Вставить("Подчиненность");
	СтруктураРаздела.Вставить("КорневойРаздел", "ДенежныеСредства");
	мСтруктураМногоуровневыхРазделов.Вставить("ДенежныеСредства50", СтруктураРаздела);
	
	СтруктураРаздела = Новый Структура;
	СтруктураРаздела.Вставить("Подчиненность");
	СтруктураРаздела.Вставить("КорневойРаздел", "ДенежныеСредства");
	мСтруктураМногоуровневыхРазделов.Вставить("ДенежныеСредства51", СтруктураРаздела);
	
	СтруктураРаздела = Новый Структура;
	СтруктураРаздела.Вставить("Подчиненность");
	СтруктураРаздела.Вставить("КорневойРаздел", "ДенежныеСредства");
	мСтруктураМногоуровневыхРазделов.Вставить("ДенежныеСредства52", СтруктураРаздела);
	
	СтруктураРаздела = Новый Структура;
	СтруктураРаздела.Вставить("Подчиненность");
	СтруктураРаздела.Вставить("КорневойРаздел", "ДенежныеСредства");
	мСтруктураМногоуровневыхРазделов.Вставить("ДенежныеСредства55", СтруктураРаздела);
	
	// Оборотно-сальдовая ведомость по всем счетам.
	
	СтруктураРаздела = Новый Структура;
	мСтруктураМногоуровневыхРазделов.Вставить("ОСВ", СтруктураРаздела);
	
	// Оборотно-сальдовая ведомость по счету.
	
	СтруктураРаздела = Новый Структура;
	СтруктураРаздела.Вставить("СписокСтраниц", "СписокСтраницОСВПоСчету");
	мСтруктураМногоуровневыхРазделов.Вставить("ОСВПоСчету", СтруктураРаздела);
	
	// Анализ счета.
	
	СтруктураРаздела = Новый Структура;
	СтруктураРаздела.Вставить("СписокСтраниц", "СписокСтраницАнализСчета");
	мСтруктураМногоуровневыхРазделов.Вставить("АнализСчета", СтруктураРаздела);
	
	// Операции по банковским счетам.
	
	СтруктураРаздела = Новый Структура;
	ИменаПодчиненныхРазделов = Новый Массив;
	ИменаПодчиненныхРазделов.Добавить("Операции51");
	ИменаПодчиненныхРазделов.Добавить("Операции52");
	ИменаПодчиненныхРазделов.Добавить("Операции55");
	СтруктураРаздела.Вставить("ИменаПодчиненныхРазделов", ИменаПодчиненныхРазделов);
	мСтруктураМногоуровневыхРазделов.Вставить("ОперацииПоБанковскимСчетам", СтруктураРаздела);
	
	СтруктураРаздела = Новый Структура;
	СтруктураРаздела.Вставить("Подчиненность");
	СтруктураРаздела.Вставить("КорневойРаздел", "ОперацииПоБанковскимСчетам");
	мСтруктураМногоуровневыхРазделов.Вставить("Операции51", СтруктураРаздела);
	
	СтруктураРаздела = Новый Структура;
	СтруктураРаздела.Вставить("Подчиненность");
	СтруктураРаздела.Вставить("КорневойРаздел", "ОперацииПоБанковскимСчетам");
	мСтруктураМногоуровневыхРазделов.Вставить("Операции52", СтруктураРаздела);
	
	СтруктураРаздела = Новый Структура;
	СтруктураРаздела.Вставить("Подчиненность");
	СтруктураРаздела.Вставить("КорневойРаздел", "ОперацииПоБанковскимСчетам");
	мСтруктураМногоуровневыхРазделов.Вставить("Операции55", СтруктураРаздела);
	
	// Дебиторская и кредиторская задолженность.
	
	СтруктураРаздела = Новый Структура;
	ИменаПодчиненныхРазделов = Новый Массив;
	ИменаПодчиненныхРазделов.Добавить("Дебиторская");
	ИменаПодчиненныхРазделов.Добавить("Кредиторская");
	СтруктураРаздела.Вставить("ИменаПодчиненныхРазделов", ИменаПодчиненныхРазделов);
	мСтруктураМногоуровневыхРазделов.Вставить("ДебКредЗадолженность", СтруктураРаздела);
	
	СтруктураРаздела = Новый Структура;
	СтруктураРаздела.Вставить("Подчиненность");
	СтруктураРаздела.Вставить("КорневойРаздел", "ДебКредЗадолженность");
	мСтруктураМногоуровневыхРазделов.Вставить("Дебиторская", СтруктураРаздела);
	
	СтруктураРаздела = Новый Структура;
	СтруктураРаздела.Вставить("Подчиненность");
	СтруктураРаздела.Вставить("КорневойРаздел", "ДебКредЗадолженность");
	мСтруктураМногоуровневыхРазделов.Вставить("Кредиторская", СтруктураРаздела);
	
	// Расшифровка прочих доходов и прочих расходов.
	СтруктураРаздела = Новый Структура;
	мСтруктураМногоуровневыхРазделов.Вставить("ДоходыРасходы", СтруктураРаздела);
	
	// Расшифровка финансовых вложений.
	СтруктураРаздела = Новый Структура;
	ИменаПодчиненныхРазделов = Новый Массив;
	ИменаПодчиненныхРазделов.Добавить("ФинансовыеВложенияКраткосрочные");
	ИменаПодчиненныхРазделов.Добавить("ФинансовыеВложенияДолгосрочные");
	СтруктураРаздела.Вставить("ИменаПодчиненныхРазделов", ИменаПодчиненныхРазделов);
	мСтруктураМногоуровневыхРазделов.Вставить("ФинансовыеВложения", СтруктураРаздела);
	
	СтруктураРаздела = Новый Структура;
	СтруктураРаздела.Вставить("Подчиненность");
	СтруктураРаздела.Вставить("КорневойРаздел", "ФинансовыеВложения");
	ИменаГруппМнЧ = Новый Массив;
	ИменаГруппМнЧ.Добавить(СтруктураРеквизитовФормы.мИдГруппы12М1);
	СтруктураРаздела.Вставить("ИменаГруппМнЧ", ИменаГруппМнЧ);
	мСтруктураМногоуровневыхРазделов.Вставить("ФинансовыеВложенияКраткосрочные", СтруктураРаздела);
	
	СтруктураРаздела = Новый Структура;
	СтруктураРаздела.Вставить("Подчиненность");
	СтруктураРаздела.Вставить("КорневойРаздел", "ФинансовыеВложения");
	ИменаГруппМнЧ = Новый Массив;
	ИменаГруппМнЧ.Добавить(СтруктураРеквизитовФормы.мИдГруппы13М1);
	СтруктураРаздела.Вставить("ИменаГруппМнЧ", ИменаГруппМнЧ);
	мСтруктураМногоуровневыхРазделов.Вставить("ФинансовыеВложенияДолгосрочные", СтруктураРаздела);
	
	// Справка о структуре выручки и прочих поступлениях.
	СтруктураРаздела = Новый Структура;
	ИменаГруппМнЧ = Новый Массив;
	ИменаГруппМнЧ.Добавить(СтруктураРеквизитовФормы.мИдГруппы10М1);
	СтруктураРаздела.Вставить("ИменаГруппМнЧ", ИменаГруппМнЧ);
	мСтруктураМногоуровневыхРазделов.Вставить("СтруктураВыручки", СтруктураРаздела);
	
	// Справка о прочих показателях деятельности.
	СтруктураРаздела = Новый Структура;
	мСтруктураМногоуровневыхРазделов.Вставить("ПрочиеПоказатели", СтруктураРаздела);
	
	// Дополнительные файлы.
	СтруктураРаздела = Новый Структура;
	ИменаГруппМнЧ = Новый Массив;
	ИменаГруппМнЧ.Добавить(СтруктураРеквизитовФормы.мИдГруппы11М1);
	СтруктураРаздела.Вставить("ИменаГруппМнЧ", ИменаГруппМнЧ);
	мСтруктураМногоуровневыхРазделов.Вставить("ДополнительныеФайлы", СтруктураРаздела);
	
	// Формирование структуры данных, обслуживающих вывод разделов.
	
	СформироватьДанныеМногоуровневыхРазделов();
	
	ИнициализироватьТекстыГиперссылокДополнительныхФайлов();
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьОбычныеРазделы(МассивИменРазделов = Неопределено)
	
	Если МассивИменРазделов = Неопределено Тогда
		МассивИменРазделов = Новый Массив;
		МассивИменРазделов.Добавить("Титульный");
	КонецЕсли;
	
	СохрТабличныйДокумент = Новый ТабличныйДокумент;
	СохрТабличныйДокумент.Вывести(ТабличныйДокумент);
	
	Для Каждого ИмяРаздела Из МассивИменРазделов Цикл
		
		ЭтаФорма["СтруктураДанных" + ИмяРаздела] = Новый Структура;
		
		ТабличныйДокумент.Очистить();
		ТабличныйДокумент.Вывести(МакетРаздела(ИмяРаздела));
		
		СохранитьДанныеРаздела(ИмяРаздела);
		
	КонецЦикла;
	
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(СохрТабличныйДокумент);
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьДеревоРазделовОтчета()
	
	ЭтоИП = Ложь;
	Если ЗначениеЗаполнено(СтруктураРеквизитовФормы.Организация) Тогда
		ЭтоИП = НЕ РегламентированнаяОтчетностьВызовСервера.ЭтоЮридическоеЛицо(СтруктураРеквизитовФормы.Организация);
	КонецЕсли;
	
	Показать     = 1; // раздел включен в отчетность
	НеПоказывать = 0; // раздел не включен в отчетность, но может быть добавлен пользователем
	Исключить    = -1; // раздел не включен в отчетность, возможность добавления отсутствует
	
	ЭтоОтчетностьЗаКвартал = (КонецМесяца(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета)
	                       = КонецКвартала(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета));
	ПоказыватьЗаКвартал = ?(ЭтоОтчетностьЗаКвартал, Показать, Исключить);
	ДоступнаЗаКвартал = ?(ЭтоОтчетностьЗаКвартал, НеПоказывать, Исключить);
	
	ЭтоОтчетностьЗаГод = (КонецМесяца(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета)
	                   = КонецГода(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета));
	ПоказыватьЗаГод = ?(ЭтоОтчетностьЗаГод, Показать, Исключить);
	
	ПоказыватьЗаКварталНеИП = ?(ЭтоОтчетностьЗаКвартал И НЕ ЭтоИП, Показать, Исключить);
	ПоказыватьЗаГодНеИП = ?(ЭтоОтчетностьЗаГод И НЕ ЭтоИП, Показать, Исключить);
	
	мДеревоСтраницОтчета.ПолучитьЭлементы().Очистить();
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Титульный";
	СтрокаУровня1.Представление            = "Титульный лист";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = Показать;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	СтрокаУровня1.АвторасчетПоказателей    = Истина;
	СтрокаУровня1.СтраницаВывода           = "СтраницаОтчета";
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Баланс";
	СтрокаУровня1.Представление            = "Бухгалтерский баланс";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = ПоказыватьЗаКварталНеИП;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	СтрокаУровня1.АвторасчетПоказателей    = Истина;
	СтрокаУровня1.СтраницаВывода           = "СтраницаОтчета";
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "ОФР";
	СтрокаУровня1.Представление            = "Отчет о финансовых результатах";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = ПоказыватьЗаКварталНеИП;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	СтрокаУровня1.АвторасчетПоказателей    = Истина;
	СтрокаУровня1.СтраницаВывода           = "СтраницаОтчета";
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "ОИК";
	СтрокаУровня1.Представление            = "Отчет об изменениях капитала";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = ПоказыватьЗаГодНеИП;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	СтрокаУровня1.АвторасчетПоказателей    = Истина;
	СтрокаУровня1.СтраницаВывода           = "СтраницаОтчета";
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "ОДДС";
	СтрокаУровня1.Представление            = "Отчет о движении денежных средств";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = ПоказыватьЗаГодНеИП;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	СтрокаУровня1.АвторасчетПоказателей    = Истина;
	СтрокаУровня1.СтраницаВывода           = "СтраницаОтчета";
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "ОЦИС";
	СтрокаУровня1.Представление            = "Отчет о целевом использовании средств";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = ПоказыватьЗаГодНеИП;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	СтрокаУровня1.АвторасчетПоказателей    = Истина;
	СтрокаУровня1.СтраницаВывода           = "СтраницаОтчета";
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "ДополнительныеПоказатели";
	СтрокаУровня1.Представление            = "Дополнительные показатели";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = ПоказыватьЗаКвартал;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	СтрокаУровня1.АвторасчетПоказателей    = Истина;
	СтрокаУровня1.СтраницаВывода           = "СтраницаОтчета";
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "РасшифровкиОбеспечений";
	СтрокаУровня1.Представление            = "Расшифровки обеспечений";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = ПоказыватьЗаКвартал;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	СтрокаУровня1.АвторасчетПоказателей    = Истина;
	СтрокаУровня1.СтраницаВывода           = "СтраницаОтчета";
	
	СтрокаУровня2 = СтрокаУровня1.ПолучитьЭлементы().Добавить();
	СтрокаУровня2.ИмяСтраницы              = "РасшифровкиОбеспеченийПолученные";
	СтрокаУровня2.Представление            = "Полученные";
	СтрокаУровня2.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня2.ВыводНаПечать            = 1;
	СтрокаУровня2.ПоказатьСтраницу         = ПоказыватьЗаКвартал;
	СтрокаУровня2.ВыгрузитьСтраницу        = 2;
	СтрокаУровня2.АвторасчетПоказателей    = Истина;
	СтрокаУровня2.СтраницаВывода           = "СтраницаОтчета";
	
	СтрокаУровня2 = СтрокаУровня1.ПолучитьЭлементы().Добавить();
	СтрокаУровня2.ИмяСтраницы              = "РасшифровкиОбеспеченийВыданные";
	СтрокаУровня2.Представление            = "Выданные";
	СтрокаУровня2.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня2.ВыводНаПечать            = 1;
	СтрокаУровня2.ПоказатьСтраницу         = ПоказыватьЗаКвартал;
	СтрокаУровня2.ВыгрузитьСтраницу        = 2;
	СтрокаУровня2.АвторасчетПоказателей    = Истина;
	СтрокаУровня2.СтраницаВывода           = "СтраницаОтчета";
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "ЗадолженностьПоКредитамЗаймам";
	СтрокаУровня1.Представление            = "Задолженность по кредитам и займам";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = Показать;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	СтрокаУровня1.АвторасчетПоказателей    = Истина;
	СтрокаУровня1.СтраницаВывода           = "СтраницаОтчета";
	
	СтрокаУровня2 = СтрокаУровня1.ПолучитьЭлементы().Добавить();
	СтрокаУровня2.ИмяСтраницы              = "ЗадолженностьПоКредитамЗаймамКраткосрочная";
	СтрокаУровня2.Представление            = "Краткосрочная";
	СтрокаУровня2.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня2.ВыводНаПечать            = 1;
	СтрокаУровня2.ПоказатьСтраницу         = Показать;
	СтрокаУровня2.ВыгрузитьСтраницу        = 2;
	СтрокаУровня2.АвторасчетПоказателей    = Истина;
	СтрокаУровня2.СтраницаВывода           = "СтраницаОтчета";
	
	СтрокаУровня2 = СтрокаУровня1.ПолучитьЭлементы().Добавить();
	СтрокаУровня2.ИмяСтраницы              = "ЗадолженностьПоКредитамЗаймамДолгосрочная";
	СтрокаУровня2.Представление            = "Долгосрочная";
	СтрокаУровня2.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня2.ВыводНаПечать            = 1;
	СтрокаУровня2.ПоказатьСтраницу         = Показать;
	СтрокаУровня2.ВыгрузитьСтраницу        = 2;
	СтрокаУровня2.АвторасчетПоказателей    = Истина;
	СтрокаУровня2.СтраницаВывода           = "СтраницаОтчета";
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "ЛизингОбязательства";
	СтрокаУровня1.Представление            = "Лизинг";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = ПоказыватьЗаКвартал;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	СтрокаУровня1.АвторасчетПоказателей    = Истина;
	СтрокаУровня1.СтраницаВывода           = "СтраницаОтчета";
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "ДенежныеСредства";
	СтрокаУровня1.Представление            = "Денежные средства";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = Исключить;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	СтрокаУровня1.АвторасчетПоказателей    = Истина;
	СтрокаУровня1.СтраницаВывода           = "СтраницаОтчета";
	
	СтрокаУровня2 = СтрокаУровня1.ПолучитьЭлементы().Добавить();
	СтрокаУровня2.ИмяСтраницы              = "ДенежныеСредства50";
	СтрокаУровня2.Представление            = "Касса (счет 50)";
	СтрокаУровня2.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня2.ВыводНаПечать            = 1;
	СтрокаУровня2.ПоказатьСтраницу         = Исключить;
	СтрокаУровня2.ВыгрузитьСтраницу        = 2;
	СтрокаУровня2.АвторасчетПоказателей    = Истина;
	СтрокаУровня2.СтраницаВывода           = "СтраницаОтчета";
	
	СтрокаУровня2 = СтрокаУровня1.ПолучитьЭлементы().Добавить();
	СтрокаУровня2.ИмяСтраницы              = "ДенежныеСредства51";
	СтрокаУровня2.Представление            = "Расчетные счета (счет 51)";
	СтрокаУровня2.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня2.ВыводНаПечать            = 1;
	СтрокаУровня2.ПоказатьСтраницу         = Исключить;
	СтрокаУровня2.ВыгрузитьСтраницу        = 2;
	СтрокаУровня2.АвторасчетПоказателей    = Истина;
	СтрокаУровня2.СтраницаВывода           = "СтраницаОтчета";
	
	СтрокаУровня2 = СтрокаУровня1.ПолучитьЭлементы().Добавить();
	СтрокаУровня2.ИмяСтраницы              = "ДенежныеСредства52";
	СтрокаУровня2.Представление            = "Валютные счета (счет 52)";
	СтрокаУровня2.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня2.ВыводНаПечать            = 1;
	СтрокаУровня2.ПоказатьСтраницу         = Исключить;
	СтрокаУровня2.ВыгрузитьСтраницу        = 2;
	СтрокаУровня2.АвторасчетПоказателей    = Истина;
	СтрокаУровня2.СтраницаВывода           = "СтраницаОтчета";
	
	СтрокаУровня2 = СтрокаУровня1.ПолучитьЭлементы().Добавить();
	СтрокаУровня2.ИмяСтраницы              = "ДенежныеСредства55";
	СтрокаУровня2.Представление            = "Специальные счета в банках (счет 55)";
	СтрокаУровня2.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня2.ВыводНаПечать            = 1;
	СтрокаУровня2.ПоказатьСтраницу         = Исключить;
	СтрокаУровня2.ВыгрузитьСтраницу        = 2;
	СтрокаУровня2.АвторасчетПоказателей    = Истина;
	СтрокаУровня2.СтраницаВывода           = "СтраницаОтчета";
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "ОСВ";
	СтрокаУровня1.Представление            = "ОСВ";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = Показать;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	СтрокаУровня1.АвторасчетПоказателей    = Истина;
	СтрокаУровня1.СтраницаВывода           = "СтраницаОтчета";
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "ОСВПоСчету";
	СтрокаУровня1.Представление            = "ОСВ по счету";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = НеПоказывать;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	СтрокаУровня1.АвторасчетПоказателей    = Истина;
	СтрокаУровня1.СтраницаВывода           = "СтраницаОтчета";
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "АнализСчета";
	СтрокаУровня1.Представление            = "Анализ счета";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = Показать;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	СтрокаУровня1.АвторасчетПоказателей    = Истина;
	СтрокаУровня1.СтраницаВывода           = "СтраницаОтчета";
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "ОперацииПоБанковскимСчетам";
	СтрокаУровня1.Представление            = "Операции по банковским счетам (транзакции)";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = НеПоказывать;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	СтрокаУровня1.АвторасчетПоказателей    = Истина;
	СтрокаУровня1.СтраницаВывода           = "СтраницаОтчета";
	
	СтрокаУровня2 = СтрокаУровня1.ПолучитьЭлементы().Добавить();
	СтрокаУровня2.ИмяСтраницы              = "Операции51";
	СтрокаУровня2.Представление            = "Расчетные счета (счет 51)";
	СтрокаУровня2.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня2.ВыводНаПечать            = 1;
	СтрокаУровня2.ПоказатьСтраницу         = НеПоказывать;
	СтрокаУровня2.ВыгрузитьСтраницу        = 2;
	СтрокаУровня2.АвторасчетПоказателей    = Истина;
	СтрокаУровня2.СтраницаВывода           = "СтраницаОтчета";
	
	СтрокаУровня2 = СтрокаУровня1.ПолучитьЭлементы().Добавить();
	СтрокаУровня2.ИмяСтраницы              = "Операции52";
	СтрокаУровня2.Представление            = "Валютные счета (счет 52)";
	СтрокаУровня2.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня2.ВыводНаПечать            = 1;
	СтрокаУровня2.ПоказатьСтраницу         = НеПоказывать;
	СтрокаУровня2.ВыгрузитьСтраницу        = 2;
	СтрокаУровня2.АвторасчетПоказателей    = Истина;
	СтрокаУровня2.СтраницаВывода           = "СтраницаОтчета";
	
	СтрокаУровня2 = СтрокаУровня1.ПолучитьЭлементы().Добавить();
	СтрокаУровня2.ИмяСтраницы              = "Операции55";
	СтрокаУровня2.Представление            = "Специальные счета в банках (счет 55)";
	СтрокаУровня2.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня2.ВыводНаПечать            = 1;
	СтрокаУровня2.ПоказатьСтраницу         = НеПоказывать;
	СтрокаУровня2.ВыгрузитьСтраницу        = 2;
	СтрокаУровня2.АвторасчетПоказателей    = Истина;
	СтрокаУровня2.СтраницаВывода           = "СтраницаОтчета";
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "ДебКредЗадолженность";
	СтрокаУровня1.Представление            = "Дебиторская и кредиторская задолженность";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = ПоказыватьЗаКвартал;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	СтрокаУровня1.АвторасчетПоказателей    = Истина;
	СтрокаУровня1.СтраницаВывода           = "СтраницаОтчета";
	
	СтрокаУровня2 = СтрокаУровня1.ПолучитьЭлементы().Добавить();
	СтрокаУровня2.ИмяСтраницы              = "Дебиторская";
	СтрокаУровня2.Представление            = "Дебиторская";
	СтрокаУровня2.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня2.ВыводНаПечать            = 1;
	СтрокаУровня2.ПоказатьСтраницу         = ПоказыватьЗаКвартал;
	СтрокаУровня2.ВыгрузитьСтраницу        = 2;
	СтрокаУровня2.АвторасчетПоказателей    = Истина;
	СтрокаУровня2.СтраницаВывода           = "СтраницаОтчета";
	
	СтрокаУровня2 = СтрокаУровня1.ПолучитьЭлементы().Добавить();
	СтрокаУровня2.ИмяСтраницы              = "Кредиторская";
	СтрокаУровня2.Представление            = "Кредиторская";
	СтрокаУровня2.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня2.ВыводНаПечать            = 1;
	СтрокаУровня2.ПоказатьСтраницу         = ПоказыватьЗаКвартал;
	СтрокаУровня2.ВыгрузитьСтраницу        = 2;
	СтрокаУровня2.АвторасчетПоказателей    = Истина;
	СтрокаУровня2.СтраницаВывода           = "СтраницаОтчета";
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "ДоходыРасходы";
	СтрокаУровня1.Представление            = "Прочие доходы и расходы";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = ПоказыватьЗаКвартал;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	СтрокаУровня1.АвторасчетПоказателей    = Истина;
	СтрокаУровня1.СтраницаВывода           = "СтраницаОтчета";
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "ФинансовыеВложения";
	СтрокаУровня1.Представление            = "Финансовые вложения";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = ПоказыватьЗаКвартал;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	СтрокаУровня1.АвторасчетПоказателей    = Истина;
	СтрокаУровня1.СтраницаВывода           = "СтраницаОтчета";
	
	СтрокаУровня2 = СтрокаУровня1.ПолучитьЭлементы().Добавить();
	СтрокаУровня2.ИмяСтраницы              = "ФинансовыеВложенияКраткосрочные";
	СтрокаУровня2.Представление            = "Краткосрочные";
	СтрокаУровня2.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня2.ВыводНаПечать            = 1;
	СтрокаУровня2.ПоказатьСтраницу         = ПоказыватьЗаКвартал;
	СтрокаУровня2.ВыгрузитьСтраницу        = 2;
	СтрокаУровня2.АвторасчетПоказателей    = Истина;
	СтрокаУровня2.СтраницаВывода           = "СтраницаОтчета";
	
	СтрокаУровня2 = СтрокаУровня1.ПолучитьЭлементы().Добавить();
	СтрокаУровня2.ИмяСтраницы              = "ФинансовыеВложенияДолгосрочные";
	СтрокаУровня2.Представление            = "Долгосрочные";
	СтрокаУровня2.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня2.ВыводНаПечать            = 1;
	СтрокаУровня2.ПоказатьСтраницу         = ПоказыватьЗаКвартал;
	СтрокаУровня2.ВыгрузитьСтраницу        = 2;
	СтрокаУровня2.АвторасчетПоказателей    = Истина;
	СтрокаУровня2.СтраницаВывода           = "СтраницаОтчета";
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "СтруктураВыручки";
	СтрокаУровня1.Представление            = "Структура выручки";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = ДоступнаЗаКвартал;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	СтрокаУровня1.АвторасчетПоказателей    = Истина;
	СтрокаУровня1.СтраницаВывода           = "СтраницаОтчета";
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "ПрочиеПоказатели";
	СтрокаУровня1.Представление            = "Прочие показатели";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = ДоступнаЗаКвартал;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	СтрокаУровня1.АвторасчетПоказателей    = Истина;
	СтрокаУровня1.СтраницаВывода           = "СтраницаОтчета";
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "ДополнительныеФайлы";
	СтрокаУровня1.Представление            = "Дополнительные файлы";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = НеПоказывать;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	СтрокаУровня1.АвторасчетПоказателей    = Истина;
	СтрокаУровня1.СтраницаВывода           = "СтраницаОтчета";
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "ОтчетыФНС";
	СтрокаУровня1.Представление            = "ФНС";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = НеПоказывать;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	СтрокаУровня1.АвторасчетПоказателей    = Истина;
	СтрокаУровня1.СтраницаВывода           = "ОтчетыФНС";
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСтраницыВыводаОтчетов()
	
	Если ДействуетСВерсииФормата("5.10.01") Тогда
		ОтчетыСПризнакомОтсутствияДанных = Новый Массив;
		ОтчетыСПризнакомОтсутствияДанных.Добавить("РасшифровкиОбеспеченийВыданные");
		ОтчетыСПризнакомОтсутствияДанных.Добавить("РасшифровкиОбеспеченийПолученные");
		ОтчетыСПризнакомОтсутствияДанных.Добавить("ЗадолженностьПоКредитамЗаймамДолгосрочная");
		ОтчетыСПризнакомОтсутствияДанных.Добавить("ЗадолженностьПоКредитамЗаймамКраткосрочная");
		ОтчетыСПризнакомОтсутствияДанных.Добавить("ЛизингОбязательства");
		ОтчетыСПризнакомОтсутствияДанных.Добавить("Дебиторская");
		ОтчетыСПризнакомОтсутствияДанных.Добавить("Кредиторская");
		ОтчетыСПризнакомОтсутствияДанных.Добавить("ФинансовыеВложенияДолгосрочные");
		ОтчетыСПризнакомОтсутствияДанных.Добавить("ФинансовыеВложенияКраткосрочные");
		
		ДеревоОтчетов = РеквизитФормыВЗначение("мДеревоСтраницОтчета");
		
		Для Каждого ИмяОтчета Из ОтчетыСПризнакомОтсутствияДанных Цикл
			СтраницаОтчета = ДеревоОтчетов.Строки.Найти(ИмяОтчета, "ИмяСтраницы", Истина);
			СтраницаОтчета.СтраницаВывода = "СтраницаОтчетаСПризнакомОтсутствияДанных";
		КонецЦикла;
		
		ЗначениеВРеквизитФормы(ДеревоОтчетов, "мДеревоСтраницОтчета");
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СохранениеВосстановлениеОтчета

&НаСервере
Функция Сохранить(Автосохранение = Ложь, КодИФНС = "не применимо", Вариант, ВидДокументаНомерКорректировкиИзменен = Неопределено, НаимТекРаздела) Экспорт
	
	ДанныеДляРазблокирования = Неопределено;
	
	Если НЕ СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
		Если НЕ СтруктураРеквизитовФормы.мБезОткрытияФормы Тогда
			ДанныеДляРазблокирования = Новый Структура("Ключ,ИдФормы",
			СтруктураРеквизитовФормы.мСохраненныйДок, ЭтаФорма.УникальныйИдентификатор);
		КонецЕсли;
		СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.ПолучитьОбъект();
	КонецЕсли;
	
	Если НЕ РегламентированнаяОтчетность.ПриЗаписиРегламентированногоОтчетаНаСервере(ЭтаФорма, КодИФНС, Автосохранение, Вариант, ВидДокументаНомерКорректировкиИзменен, СтруктураРеквизитовФормы.мСохраненныйДок) Тогда
		СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
		Возврат Ложь;
	КонецЕсли;
	
	СтруктураРеквизитовФормы.мСохраненныйДок.ИсточникОтчета             = Метаданные.Отчеты[Сред(Лев(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, ".Форма.") - 1), 7)].Имя;
	СтруктураРеквизитовФормы.мСохраненныйДок.НаименованиеОтчета         = Нстр("ru = 'Бухгалтерская отчетность для Сбербанка'");
	СтруктураРеквизитовФормы.мСохраненныйДок.ДатаНачала                 = СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета;
	СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания              = СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета;
	СтруктураРеквизитовФормы.мСохраненныйДок.ВыбраннаяФорма             = СтруктураРеквизитовФормы.мВыбраннаяФорма;
	СтруктураРеквизитовФормы.мСохраненныйДок.Организация                = СтруктураРеквизитовФормы.Организация;
	СтруктураРеквизитовФормы.мСохраненныйДок.ДатаПодписи                = ДатаПодписи;
	СтруктураРеквизитовФормы.мСохраненныйДок.ЕдиницаИзмерения           = СтруктураРеквизитовФормы.ЕдиницаИзмерения;
	СтруктураРеквизитовФормы.мСохраненныйДок.ТочностьЕдиницыИзмерения   = СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения;
	СтруктураРеквизитовФормы.мСохраненныйДок.ВидОтчетности              = Перечисления.ВидыОтчетности.РегламентированнаяОтчетность;
	СтруктураРеквизитовФормы.мСохраненныйДок.Комментарий                = Комментарий;
	СтруктураРеквизитовФормы.мСохраненныйДок.Вид                        = Вариант;
	СтруктураРеквизитовФормы.мСохраненныйДок.ПредставлениеВида          = РегламентированнаяОтчетность.ПредставлениеВидаДокумента(СтруктураРеквизитовФормы.мСохраненныйДок.Вид);
	СтруктураРеквизитовФормы.мСохраненныйДок.Банк                       = СтруктураРеквизитовФормы.Банк;
	СтруктураРеквизитовФормы.мСохраненныйДок.СтатусОтчета               = СтатусОтчета;
	СтруктураРеквизитовФормы.мВариант                                   = Вариант;
	
	Если СтруктураРеквизитовФормы.Организация <> Справочники.Организации.ПустаяСсылка() Тогда
		СтруктураРеквизитовФормы.мСохраненныйДок.КодНалоговогоОргана = СтруктураРеквизитовФормы.Организация.КодНалоговогоОргана;
	КонецЕсли;
	
	СтруктураРеквизитовФормы.мСохраненныйДок.ФорматВыгрузки = "Автоматически";
	
	СохранитьДанныеРаздела(НаимТекРаздела);
	
	ПоказателиОтчета = Новый Структура();
	ПоказателиОтчета.Вставить("ПолеТабличногоДокументаТитульный", СтруктураДанныхТитульный);
	
	СписокСохранения = Новый Структура();
	
	СписокСохранения.Вставить("ПоказателиОтчета", ПоказателиОтчета);
	
	ДанныеМногоуровневыхРазделов = Новый Структура;
	Для Каждого Элем Из мСтруктураМногоуровневыхРазделов Цикл
		СтруктураРаздела = Элем.Значение;
		Если НЕ СтруктураРаздела.Свойство("Подчиненность") Тогда
			ДанныеМногоуровневыхРазделов.Вставить(Элем.Ключ, ПолучитьИзВременногоХранилища(
				СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + Элем.Ключ]));
		КонецЕсли;
	КонецЦикла;
	
	СписокСохранения.Вставить("ДанныеМногоуровневыхРазделов", ДанныеМногоуровневыхРазделов);
	
	Если СтруктураРеквизитовФормы.АдресВременногоХранилищаРасшифровки <> Неопределено Тогда
		РасшифровкиПоказателей = ПолучитьИзВременногоХранилища(СтруктураРеквизитовФормы.АдресВременногоХранилищаРасшифровки);
		Если СтруктураРеквизитовФормы.мСохранятьРасшифровку = Истина Тогда
			СписокСохранения.Вставить("Расшифровка", РасшифровкиПоказателей);
		КонецЕсли;
	КонецЕсли;
	
	СписокСохранения.Вставить("ВерсияФормы", СтруктураРеквизитовФормы.мВерсияФормы);
	
	СписокСохранения.Вставить("Авторасчет", СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);
	
	СписокСохранения.Вставить("СписокСтраницОСВПоСчету",  РеквизитФормыВЗначение("СписокСтраницОСВПоСчету"));
	СписокСохранения.Вставить("СписокСтраницАнализСчета", РеквизитФормыВЗначение("СписокСтраницАнализСчета"));
	
	СписокСохранения.Вставить("НаблюдательЗаполненияРазделов", СтруктураРеквизитовФормы.НаблюдательЗаполненияРазделов);
	
	// Регламентированная отчетность, принятая в ФНС.
	ОтчетыФНС = Новый ТаблицаЗначений;
	ОтчетыФНС.Колонки.Добавить("ВидОтчета"); // вид регламентированного отчета по имени метаданных
	ОтчетыФНС.Колонки.Добавить("РегламентированныйОтчет"); // ссылка на документ регламентированного отчета
	ОтчетыФНС.Колонки.Добавить("Представление"); // пользовательское представление регламентированного отчета
	ОтчетыФНС.Колонки.Добавить("Пакет"); // двоичные данные пакета
	
	Если ЗначениеЗаполнено(СтруктураРеквизитовФормы.ОтчетыФНС_Бухотчетность) Тогда
		ОтчетФНС = ОтчетыФНС.Добавить();
		ОтчетФНС.ВидОтчета = "РегламентированныйОтчетБухОтчетность";
		ОтчетФНС.РегламентированныйОтчет = СтруктураРеквизитовФормы.ОтчетыФНС_Бухотчетность;
		ОтчетФНС.Представление = СтруктураРеквизитовФормы.ОтчетыФНС_БухотчетностьПредставление;
		ОтчетФНС.Пакет = СтруктураРеквизитовФормы.ОтчетыФНС_БухотчетностьПакет;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтруктураРеквизитовФормы.ОтчетыФНС_Прибыль) Тогда
		ОтчетФНС = ОтчетыФНС.Добавить();
		ОтчетФНС.ВидОтчета = "РегламентированныйОтчетПрибыль";
		ОтчетФНС.РегламентированныйОтчет = СтруктураРеквизитовФормы.ОтчетыФНС_Прибыль;
		ОтчетФНС.Представление = СтруктураРеквизитовФормы.ОтчетыФНС_ПрибыльПредставление;
		ОтчетФНС.Пакет = СтруктураРеквизитовФормы.ОтчетыФНС_ПрибыльПакет;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтруктураРеквизитовФормы.ОтчетыФНС_НДС) Тогда
		ОтчетФНС = ОтчетыФНС.Добавить();
		ОтчетФНС.ВидОтчета = "РегламентированныйОтчетНДС";
		ОтчетФНС.РегламентированныйОтчет = СтруктураРеквизитовФормы.ОтчетыФНС_НДС;
		ОтчетФНС.Представление = СтруктураРеквизитовФормы.ОтчетыФНС_НДСПредставление;
		ОтчетФНС.Пакет = СтруктураРеквизитовФормы.ОтчетыФНС_НДСПакет;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтруктураРеквизитовФормы.ОтчетыФНС_СправкаИспОбУпл) Тогда
		ОтчетФНС = ОтчетыФНС.Добавить();
		ОтчетФНС.ВидОтчета = "ЗапросНаИнформационноеОбслуживаниеНалогоплательщикаСправкаИспОбУпл";
		ОтчетФНС.РегламентированныйОтчет = СтруктураРеквизитовФормы.ОтчетыФНС_СправкаИспОбУпл;
		ОтчетФНС.Представление = СтруктураРеквизитовФормы.ОтчетыФНС_СправкаИспОбУплПредставление;
		ОтчетФНС.Пакет = СтруктураРеквизитовФормы.ОтчетыФНС_СправкаИспОбУплПакет;
	КонецЕсли;
	
	СписокСохранения.Вставить("ОтчетыФНС", ОтчетыФНС);
	
	СписокСохранения.Вставить("ВерсияФормата", СтруктураРеквизитовФормы.ВерсияФормата);
	
	СписокСохранения.Вставить("ДополнительныеФайлы", СтруктураРеквизитовФормы.ДополнительныеФайлы);
	СписокСохранения.Вставить("ДополнительныеТипизированныеФайлы",
		СтруктураРеквизитовФормы.ДополнительныеТипизированныеФайлы);
	
	ХранилищеДанных = Новый ХранилищеЗначения(СписокСохранения);
	СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета = ХранилищеДанных;
	
	// Запись документа, хранящего данные отчета.
	НачатьТранзакцию();
	
	Попытка
		СтруктураРеквизитовФормы.мСохраненныйДок.Записать();
		
		// Нетипизированные дополнительные файлы.
		ПрефиксВидаФайла = "ДополнительныйФайл.";
		ВыборкаСегментов = ВыборкаСегментовОтчетаПоШаблону(ПрефиксВидаФайла + "%");
		
		Пока ВыборкаСегментов.Следующий() Цикл
			ЗаписьСегмента = РегистрыСведений.ДополнительныеФайлыРегламентированныхОтчетов.СоздатьМенеджерЗаписи();
			ЗаписьСегмента.РегламентированныйОтчет = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
			ЗаписьСегмента.ВидДополнительногоФайла = ВыборкаСегментов.ВидДополнительногоФайла;
			
			ЗаписьСегмента.Удалить();
			
		КонецЦикла;
		
		НомерФайла = 0;
		Для Каждого СтруктураДопФайла Из СтруктураРеквизитовФормы.ДополнительныеФайлы Цикл
			НомерФайла = НомерФайла + 1;
			
			ЗаписьРегистраСведений = РегистрыСведений.ДополнительныеФайлыРегламентированныхОтчетов.СоздатьМенеджерЗаписи();
			ЗаписьРегистраСведений.РегламентированныйОтчет = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
			ЗаписьРегистраСведений.ВидДополнительногоФайла = ПрефиксВидаФайла + СтрокаЧГ0(НомерФайла);
			
			ЗаписьРегистраСведений.СодержимоеФайла = Новый ХранилищеЗначения(
				ПолучитьИзВременногоХранилища(СтруктураДопФайла.АдресХранения));
			ЗаписьРегистраСведений.ИмяФайла = СтруктураДопФайла.ИмяФайла;
			ЗаписьРегистраСведений.Размер = СтруктураДопФайла.РазмерФайла;
			ЗаписьРегистраСведений.ДатаДобавления = СтруктураДопФайла.ДатаДобавления;
			
			ЗаписьРегистраСведений.Записать();
			
		КонецЦикла;
		
		// Типизированные дополнительные файлы.
		ПрефиксВидаФайла = "ДополнительныйТипизированныйФайл.";
		ВыборкаСегментов = ВыборкаСегментовОтчетаПоШаблону(ПрефиксВидаФайла + "%");
		
		Пока ВыборкаСегментов.Следующий() Цикл
			ЗаписьСегмента = РегистрыСведений.ДополнительныеФайлыРегламентированныхОтчетов.СоздатьМенеджерЗаписи();
			ЗаписьСегмента.РегламентированныйОтчет = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
			ЗаписьСегмента.ВидДополнительногоФайла = ВыборкаСегментов.ВидДополнительногоФайла;
			
			ЗаписьСегмента.Удалить();
			
		КонецЦикла;
		
		Для Каждого ОписаниеФайла Из СтруктураРеквизитовФормы.ДополнительныеТипизированныеФайлы Цикл
			ТипФайла = ОписаниеФайла.Ключ;
			Описание = ОписаниеФайла.Значение;
			
			Если ЗначениеЗаполнено(Описание.Адрес) Тогда
				ЗаписьРегистраСведений = РегистрыСведений.ДополнительныеФайлыРегламентированныхОтчетов.СоздатьМенеджерЗаписи();
				ЗаписьРегистраСведений.РегламентированныйОтчет = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
				ЗаписьРегистраСведений.ВидДополнительногоФайла = ПрефиксВидаФайла + ТипФайла;
				
				ЗаписьРегистраСведений.СодержимоеФайла = Новый ХранилищеЗначения(
					ПолучитьИзВременногоХранилища(Описание.Адрес));
				ЗаписьРегистраСведений.ИмяФайла = Описание.Имя;
				ЗаписьРегистраСведений.Размер = Описание.Размер;
				ЗаписьРегистраСведений.ДатаДобавления = Описание.ДатаДобавления;
				
				ЗаписьРегистраСведений.Записать();
				
			КонецЕсли;
			
		КонецЦикла;
		
	Исключение
		Если НЕ Автосохранение Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"),
				РегламентированнаяОтчетностьКлиентСервер.СформироватьТекстСообщения(ОписаниеОшибки()));
			Сообщение.Сообщить();
		КонецЕсли;
		
		СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
		Возврат Ложь;
		
	КонецПопытки;
	
	СохранитьДеревоСтраницОтчета(СтруктураРеквизитовФормы.мСохраненныйДок);
	
	Если ТипЗнч(НеотображаемыеПоказатели) = Тип("Структура")
	   И НеотображаемыеПоказатели.Свойство("ИсходныйПлан") Тогда
		НеотображаемыеПоказатели.ИсходныйПлан = НеотображаемыеПоказатели.АктивныйПлан;
	КонецЕсли;
	
	ЗафиксироватьТранзакцию();
	
	Модифицированность = Ложь;
	
	СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
	
	Если НЕ СтруктураРеквизитовФормы.мБезОткрытияФормы
	   И НЕ СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
		ЗаблокироватьДанныеДляРедактирования(СтруктураРеквизитовФормы.мСохраненныйДок, , ЭтаФорма.УникальныйИдентификатор);
	КонецЕсли;
	
	Если ДанныеДляРазблокирования <> Неопределено Тогда
		РазблокироватьДанныеДляРедактирования(ДанныеДляРазблокирования.Ключ, ДанныеДляРазблокирования.ИдФормы);
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Процедура ВосстановитьСохраненныеДанные()
	
	Перем Авторасчет;
	
	// Обновление сведений об организации при копирования отчета.
	Если СтруктураРеквизитовФормы.Организация <> СтруктураРеквизитовФормы.мСохраненныйДок.Организация
	   И СтруктураРеквизитовФормы.Организация <> РегламентированнаяОтчетностьКлиентСервер.ПустоеЗначениеТипа("СправочникСсылка.Организации")
	   И СтруктураРеквизитовФормы.Организация <> Неопределено Тогда
		СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация = Истина;
	Иначе
		СтруктураРеквизитовФормы.Организация = СтруктураРеквизитовФормы.мСохраненныйДок.Организация;
	КонецЕсли;
	
	ДатаПодписи = СтруктураРеквизитовФормы.мСохраненныйДок.ДатаПодписи;
	Комментарий = СтруктураРеквизитовФормы.мСохраненныйДок.Комментарий;
	
	СтруктураРеквизитовФормы.ЕдиницаИзмерения = СтруктураРеквизитовФормы.мСохраненныйДок.ЕдиницаИзмерения;
	СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = СтруктураРеквизитовФормы.мСохраненныйДок.ТочностьЕдиницыИзмерения;
	
	СтруктураРеквизитовФормы.Банк = СтруктураРеквизитовФормы.мСохраненныйДок.Банк;
	
	СписокСохранения = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить();
	
	ДанныеМногоуровневыхРазделов = Неопределено;
	Если СписокСохранения.Свойство("ДанныеМногоуровневыхРазделов", ДанныеМногоуровневыхРазделов) Тогда
		Для Каждого ЭлементСтруктуры Из ДанныеМногоуровневыхРазделов Цикл
			ИмяРаздела = ЭлементСтруктуры.Ключ;
			
			Если СтруктураРеквизитовФормы.Свойство("АдресВоВрХранилищеДеревоДанных" + ИмяРаздела) Тогда
				ДанныеРаздела = ЭлементСтруктуры.Значение;
				
				Если ИмяРаздела = "ОСВПоСчету" Тогда
					ЗаменитьДетализированныеСчетаВСтраницахРаздела(ДанныеРаздела);
				КонецЕсли;
				
				ДополнитьПоказателиРазделовДоработанныхОтчетов(ДанныеРаздела, ИмяРаздела);
				
				АдресДанныхРаздела = ПоместитьВоВременноеХранилище(ДанныеРаздела, УникальныйИдентификатор);
				СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяРаздела] = АдресДанныхРаздела;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	РасшифровкиПоказателей = Неопределено;
	СписокСохранения.Свойство("Расшифровка", РасшифровкиПоказателей);
	Если РасшифровкиПоказателей <> Неопределено Тогда
		СтруктураРеквизитовФормы.АдресВременногоХранилищаРасшифровки =
			ПоместитьВоВременноеХранилище(РасшифровкиПоказателей, УникальныйИдентификатор);
	КонецЕсли;
	
	СохраненныйСписокСчетовРаздела = Неопределено;
	Если СписокСохранения.Свойство("СписокСтраницОСВПоСчету", СохраненныйСписокСчетовРаздела) Тогда
		ЗаменитьДетализированныеСчетаВНастройкахСтраниц(СохраненныйСписокСчетовРаздела);
		ЗначениеВРеквизитФормы(СохраненныйСписокСчетовРаздела, "СписокСтраницОСВПоСчету");
	КонецЕсли;
	Если СписокСохранения.Свойство("СписокСтраницАнализСчета", СохраненныйСписокСчетовРаздела) Тогда
		ЗначениеВРеквизитФормы(СохраненныйСписокСчетовРаздела, "СписокСтраницАнализСчета");
	КонецЕсли;
	
	ВосстановитьСохраненныеНастройкиДереваРазделов();
	
	СформироватьДеревоРазделовОтчетаНаСервере();
	
	СписокСохранения.Свойство("Авторасчет", Авторасчет);
	Если НЕ Авторасчет = Неопределено Тогда
		СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет = Авторасчет;
	КонецЕсли;
	
	НаблюдательЗаполненияРазделов = Неопределено;
	Если СписокСохранения.Свойство("НаблюдательЗаполненияРазделов", НаблюдательЗаполненияРазделов) Тогда
		ЗаполнитьЗначенияСвойств(СтруктураРеквизитовФормы.НаблюдательЗаполненияРазделов, НаблюдательЗаполненияРазделов);
	КонецЕсли;
	
	ВерсияФормата = Неопределено;
	Если СписокСохранения.Свойство("ВерсияФормата", ВерсияФормата) Тогда
		СтруктураРеквизитовФормы.ВерсияФормата = ВерсияФормата;
	Иначе
		// Версия формата, действовавшая в отчетности без сохранения версии.
		СтруктураРеквизитовФормы.ВерсияФормата = "5.09.02";
	КонецЕсли;
	
	// Регламентированная отчетность, принятая в ФНС.
	ОтчетыФНС = Неопределено;
	
	Если СписокСохранения.Свойство("ОтчетыФНС", ОтчетыФНС) Тогда
		Для Каждого ОтчетФНС Из ОтчетыФНС Цикл
			Если ОтчетФНС.ВидОтчета = "РегламентированныйОтчетБухОтчетность" Тогда
				СтруктураРеквизитовФормы.ОтчетыФНС_Бухотчетность = ОтчетФНС.РегламентированныйОтчет;
				СтруктураРеквизитовФормы.ОтчетыФНС_БухотчетностьПредставление = ОтчетФНС.Представление;
				СтруктураРеквизитовФормы.ОтчетыФНС_БухотчетностьПакет = ОтчетФНС.Пакет;
				
				ПредставлениеБухОтчетностиФНС = СтруктураРеквизитовФормы.ОтчетыФНС_БухотчетностьПредставление;
				
			КонецЕсли;
			
			Если ОтчетФНС.ВидОтчета = "РегламентированныйОтчетПрибыль" Тогда
				СтруктураРеквизитовФормы.ОтчетыФНС_Прибыль = ОтчетФНС.РегламентированныйОтчет;
				СтруктураРеквизитовФормы.ОтчетыФНС_ПрибыльПредставление = ОтчетФНС.Представление;
				СтруктураРеквизитовФормы.ОтчетыФНС_ПрибыльПакет = ОтчетФНС.Пакет;
				
				ПредставлениеДекларацииПрибыльФНС = СтруктураРеквизитовФормы.ОтчетыФНС_ПрибыльПредставление;
				
			КонецЕсли;
			
			Если ОтчетФНС.ВидОтчета = "РегламентированныйОтчетНДС" Тогда
				СтруктураРеквизитовФормы.ОтчетыФНС_НДС = ОтчетФНС.РегламентированныйОтчет;
				СтруктураРеквизитовФормы.ОтчетыФНС_НДСПредставление = ОтчетФНС.Представление;
				СтруктураРеквизитовФормы.ОтчетыФНС_НДСПакет = ОтчетФНС.Пакет;
				
				ПредставлениеДекларацииНДСФНС = СтруктураРеквизитовФормы.ОтчетыФНС_НДСПредставление;
				
			КонецЕсли;
			
			Если ОтчетФНС.ВидОтчета = "ЗапросНаИнформационноеОбслуживаниеНалогоплательщикаСправкаИспОбУпл" Тогда
				СтруктураРеквизитовФормы.ОтчетыФНС_СправкаИспОбУпл = ОтчетФНС.РегламентированныйОтчет;
				СтруктураРеквизитовФормы.ОтчетыФНС_СправкаИспОбУплПредставление = ОтчетФНС.Представление;
				СтруктураРеквизитовФормы.ОтчетыФНС_СправкаИспОбУплПакет = ОтчетФНС.Пакет;
				
				ПредставлениеСправкиОбИсполненииОбязанностейПоУплатеФНС = СтруктураРеквизитовФормы.ОтчетыФНС_СправкаИспОбУплПредставление;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	// Дополнительные файлы.
	ДополнительныеФайлы = Неопределено;
	ОбъемДополнительныхФайлов = 0;
	Если СписокСохранения.Свойство("ДополнительныеФайлы", ДополнительныеФайлы) Тогда
		НомерФайла = 0;
		Для Каждого СтруктураДопФайла Из ДополнительныеФайлы Цикл
			НомерФайла = НомерФайла + 1;
			
			ЗаписьРегистраСведений = РегистрыСведений.ДополнительныеФайлыРегламентированныхОтчетов.СоздатьМенеджерЗаписи();
			ЗаписьРегистраСведений.РегламентированныйОтчет = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
			ЗаписьРегистраСведений.ВидДополнительногоФайла = "ДополнительныйФайл." + СтрокаЧГ0(НомерФайла);
			
			ЗаписьРегистраСведений.Прочитать();
			
			Если ЗаписьРегистраСведений.Выбран() Тогда
				АдресХранения = ПоместитьВоВременноеХранилище(ЗаписьРегистраСведений.СодержимоеФайла.Получить(), УникальныйИдентификатор);
				ИмяФайла = ЗаписьРегистраСведений.ИмяФайла;
				РазмерФайла = ЗаписьРегистраСведений.Размер;
				ДатаДобавления = ЗаписьРегистраСведений.ДатаДобавления;
				
				ПолноеОписаниеФайла = ПолноеОписаниеФайла(ИмяФайла, АдресХранения, РазмерФайла, ДатаДобавления);
				
				СтруктураРеквизитовФормы.ДополнительныеФайлы.Добавить(ПолноеОписаниеФайла);
				
				ОбъемДополнительныхФайлов = ОбъемДополнительныхФайлов + РазмерФайла;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	// Типизированные дополнительные файлы.
	ДополнительныеТипизированныеФайлы = Неопределено;
	Если СписокСохранения.Свойство("ДополнительныеТипизированныеФайлы", ДополнительныеТипизированныеФайлы) Тогда
		Для Каждого ОписаниеФайла Из ДополнительныеТипизированныеФайлы Цикл
			ТипФайла = ОписаниеФайла.Ключ;
			Описание = ОписаниеФайла.Значение;
			
			ЗаписьРегистраСведений = РегистрыСведений.ДополнительныеФайлыРегламентированныхОтчетов.СоздатьМенеджерЗаписи();
			ЗаписьРегистраСведений.РегламентированныйОтчет = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
			ЗаписьРегистраСведений.ВидДополнительногоФайла = "ДополнительныйТипизированныйФайл." + ТипФайла;
			
			ЗаписьРегистраСведений.Прочитать();
			
			Если ЗаписьРегистраСведений.Выбран() Тогда
				ХранилищеОписания = СтруктураРеквизитовФормы.ДополнительныеТипизированныеФайлы[ТипФайла];
				ХранилищеОписания.Адрес = ПоместитьВоВременноеХранилище(
					ЗаписьРегистраСведений.СодержимоеФайла.Получить(), УникальныйИдентификатор);
				ХранилищеОписания.Имя = ЗаписьРегистраСведений.ИмяФайла;
				ХранилищеОписания.Размер = ЗаписьРегистраСведений.Размер;
				ХранилищеОписания.ДатаДобавления = ЗаписьРегистраСведений.ДатаДобавления;
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		ИнициализироватьТекстыГиперссылокДополнительныхФайлов();
		РассчитатьНовыеПоказателейДоработанныхОтчетов_ДополнительныеФайлы();
		
	КонецЕсли;
	
	ДеревоДанныхРаздела = ПолучитьИзВременногоХранилища(
		СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + "ДополнительныеФайлы"]);
		
	МногострочнаяЧасть = ДеревоДанныхРаздела.Строки[0].ДанныеМногострочныхЧастей.П00011М1.Строки;
	СформироватьМСЧДополнительныхФайлов(МногострочнаяЧасть);
	
	ПоместитьВоВременноеХранилище(ДеревоДанныхРаздела,
		СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + "ДополнительныеФайлы"]);
	
	// Сохраненные данные редактируемых ячеек.
	ПоказателиОтчета = Неопределено;
	СписокСохранения.Свойство("ПоказателиОтчета", ПоказателиОтчета);
	
	Префикс = "ПолеТабличногоДокумента";
	
	УпрощенныеРазделы = Новый Массив;
	УпрощенныеРазделы.Добавить("Титульный");
	
	Для Каждого ИмяСтраницы Из УпрощенныеРазделы Цикл
		Если ПоказателиОтчета.Свойство(Префикс + ИмяСтраницы) Тогда
			ЗаполнитьЗначенияСвойств(ЭтаФорма["СтруктураДанных" + ИмяСтраницы], ПоказателиОтчета[Префикс + ИмяСтраницы]);
		КонецЕсли;
	КонецЦикла;
	
	ИмяТекРаздела = РазделыОтчета.ПолучитьЭлементы()[0].КолонкаРазделыОтчетаСокрНаим;
	
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(МакетРаздела(ИмяТекРаздела));
	
	Для Каждого ЭлСтруктуры Из ЭтаФорма["СтруктураДанных" + ИмяТекРаздела] Цикл
		Если ТабличныйДокумент.Области.Найти(ЭлСтруктуры.Ключ) <> Неопределено Тогда
			ТабличныйДокумент.Области[ЭлСтруктуры.Ключ].Значение = ЭлСтруктуры.Значение;
		КонецЕсли;
	КонецЦикла;
	
	РегламентированнаяОтчетность.ОперацииПриВосстановленииРегламентированногоОтчета(ЭтаФорма);
	
	КопироватьДанныеФормы(мДеревоСтраницОтчета, мДеревоВыбранныхСтраниц);
	
КонецПроцедуры

#КонецОбласти

&НаСервере
Функция НовоеОписаниеТипизированныхФайлов()
	
	ОписаниеФайлов = Новый Структура;
	
	ТипФайла = "ОтсутствиеИзмененийУчрДок";
	ОписаниеФайлов.Вставить(ТипФайла, НовоеОписаниеТипизированногоФайла());
	ОписаниеФайлов[ТипФайла].СтрокаПоказателя = "П0001100001";
	ОписаниеФайлов[ТипФайла].ТипФайла = "ОтсутствиеИзмененийУчрДок";
	ОписаниеФайлов[ТипФайла].ЗаголовокВыбора =
		НСтр("ru='Выбрать письмо-заверение об отсутствии изменений в учредительных документах'");
	ОписаниеФайлов[ТипФайла].ОграничениеПоРасширению = "*.doc, *.docx, *.pdf";
	ОписаниеФайлов[ТипФайла].ОграничениеПоРазмеру = 5 * Мебибайт();
	
	ТипФайла = "РасшифровкаПФИ";
	ОписаниеФайлов.Вставить(ТипФайла, НовоеОписаниеТипизированногоФайла());
	ОписаниеФайлов[ТипФайла].СтрокаПоказателя = "П0001100002";
	ОписаниеФайлов[ТипФайла].ЗаголовокВыбора = НСтр("ru='Выбрать расшифровку производных финансовых инструментов'");
	ОписаниеФайлов[ТипФайла].ОграничениеПоРасширению = "*.xls, *.xlsx";
	ОписаниеФайлов[ТипФайла].ОграничениеПоРазмеру = 2 * Мебибайт();
	
	ТипФайла = "ХодРеализацииПроекта";
	ОписаниеФайлов.Вставить(ТипФайла, НовоеОписаниеТипизированногоФайла());
	ОписаниеФайлов[ТипФайла].СтрокаПоказателя = "П0001100003";
	ОписаниеФайлов[ТипФайла].ЗаголовокВыбора = НСтр("ru='Выбрать отчет о ходе реализации проекта'");
	ОписаниеФайлов[ТипФайла].ОграничениеПоРасширению = "*.xls, *.xlsx";
	ОписаниеФайлов[ТипФайла].ОграничениеПоРазмеру = 2 * Мебибайт();
	
	ТипФайла = "РеализацияКвартир";
	ОписаниеФайлов.Вставить(ТипФайла, НовоеОписаниеТипизированногоФайла());
	ОписаниеФайлов[ТипФайла].СтрокаПоказателя = "П0001100004";
	ОписаниеФайлов[ТипФайла].ЗаголовокВыбора = НСтр("ru='Выбрать отчет о реализации квартир'");
	ОписаниеФайлов[ТипФайла].ОграничениеПоРасширению = "*.xls, *.xlsx";
	ОписаниеФайлов[ТипФайла].ОграничениеПоРазмеру = 2 * Мебибайт();
	
	ТипФайла = "ПроизводственнаяПрограмма";
	ОписаниеФайлов.Вставить(ТипФайла, НовоеОписаниеТипизированногоФайла());
	ОписаниеФайлов[ТипФайла].СтрокаПоказателя = "П0001100005";
	ОписаниеФайлов[ТипФайла].ЗаголовокВыбора = НСтр("ru='Выбрать производственную программу'");
	ОписаниеФайлов[ТипФайла].ОграничениеПоРасширению = "*.xls, *.xlsx";
	ОписаниеФайлов[ТипФайла].ОграничениеПоРазмеру = 2 * Мебибайт();
	
	ТипФайла = "ОтсутствиеЛизинговыхОбязательств";
	ОписаниеФайлов.Вставить(ТипФайла, НовоеОписаниеТипизированногоФайла());
	ОписаниеФайлов[ТипФайла].СтрокаПоказателя = "П0001100006";
	ОписаниеФайлов[ТипФайла].ЗаголовокВыбора = НСтр("ru='Выбрать справку об отсутствии лизинговых обязательств'");
	ОписаниеФайлов[ТипФайла].ОграничениеПоРасширению = "*.doc, *.docx, *.pdf";
	ОписаниеФайлов[ТипФайла].ОграничениеПоРазмеру = 5 * Мебибайт();
	
	ТипФайла = "ОтсутствиеДебЗадолженности";
	ОписаниеФайлов.Вставить(ТипФайла, НовоеОписаниеТипизированногоФайла());
	ОписаниеФайлов[ТипФайла].СтрокаПоказателя = "П0001100007";
	ОписаниеФайлов[ТипФайла].ЗаголовокВыбора = НСтр("ru='Выбрать справку об отсутствии дебиторской задолженности'");
	ОписаниеФайлов[ТипФайла].ОграничениеПоРасширению = "*.doc, *.docx, *.pdf";
	ОписаниеФайлов[ТипФайла].ОграничениеПоРазмеру = 5 * Мебибайт();
	
	ТипФайла = "ОтсутствиеКредЗадолженности";
	ОписаниеФайлов.Вставить(ТипФайла, НовоеОписаниеТипизированногоФайла());
	ОписаниеФайлов.ОтсутствиеКредЗадолженности.СтрокаПоказателя = "П0001100008";
	ОписаниеФайлов[ТипФайла].ЗаголовокВыбора = НСтр("ru='Выбрать справку об отсутствии кредиторской задолженности'");
	ОписаниеФайлов[ТипФайла].ОграничениеПоРасширению = "*.doc, *.docx, *.pdf";
	ОписаниеФайлов[ТипФайла].ОграничениеПоРазмеру = 5 * Мебибайт();
	
	ТипФайла = "ОтсутствиеФинВложений";
	ОписаниеФайлов.Вставить(ТипФайла, НовоеОписаниеТипизированногоФайла());
	ОписаниеФайлов[ТипФайла].СтрокаПоказателя = "П0001100009";
	ОписаниеФайлов[ТипФайла].ЗаголовокВыбора = НСтр("ru='Выбрать справку об отсутствии финансовых вложений'");
	ОписаниеФайлов[ТипФайла].ОграничениеПоРасширению = "*.doc, *.docx, *.pdf";
	ОписаниеФайлов[ТипФайла].ОграничениеПоРазмеру = 5 * Мебибайт();
	
	Возврат ОписаниеФайлов;
	
КонецФункции

&НаСервере
Функция НовоеОписаниеТипизированногоФайла()
	
	ОписаниеФайла = Новый Структура;
	
	ОписаниеФайла.Вставить("СтрокаПоказателя", "");
	ОписаниеФайла.Вставить("ТипФайла", "");
	ОписаниеФайла.Вставить("Имя", "");
	ОписаниеФайла.Вставить("Адрес");
	ОписаниеФайла.Вставить("Размер", 0);
	ОписаниеФайла.Вставить("ДатаДобавления", '0001-01-01');
	ОписаниеФайла.Вставить("ЗаголовокВыбора", "");
	ОписаниеФайла.Вставить("ОграничениеПоРасширению", "");
	ОписаниеФайла.Вставить("ОграничениеПоРазмеру", 0);
	
	Возврат ОписаниеФайла;
	
КонецФункции

&НаСервере
Процедура УстановитьПризнакиЗаполненияРазделовПоСведениямИБ()
	
	ИмяФормыРедакцииОтчета = Сред(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, ".Форма.") + 7);
	
	ЗаполняемыеРазделы = ОтчетностьВБанкиСлужебный.РазделыЗаполняемыеПоСведениямИБ(ИмяФормыРедакцииОтчета);
	
	ДеревоСтраниц = РеквизитФормыВЗначение("мДеревоСтраницОтчета");
	
	Для Каждого ЗаполняемыйРаздел Из ЗаполняемыеРазделы Цикл
		СтрокаРаздела = ДеревоСтраниц.Строки.Найти(ЗаполняемыйРаздел, "ИмяСтраницы", Истина);
		СтрокаРаздела.ЗаполняетсяПоИБ = Истина;
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(ДеревоСтраниц, "мДеревоСтраницОтчета");
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьДеревоРазделовОтчетаНаКлиенте() Экспорт
	
	// Процедура требуется для работы универсального механизма.
	Возврат;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьДеревоРазделовОтчетаНаСервере()
	
	ЭтаФорма["РазделыОтчета"].ПолучитьЭлементы().Очистить();
	
	Для Каждого ЭлементДереваСтраницОтчета Из ЭтаФорма["мДеревоСтраницОтчета"].ПолучитьЭлементы() Цикл
		
		Если ЭлементДереваСтраницОтчета.ПоказатьСтраницу = 1 Тогда
			
			ЭлементРазделовОтчета = ЭтаФорма["РазделыОтчета"].ПолучитьЭлементы().Добавить();
			ЭлементРазделовОтчета.КолонкаРазделыОтчета         = ЭлементДереваСтраницОтчета.Представление;
			ЭлементРазделовОтчета.КолонкаРазделыОтчетаСокрНаим = ЭлементДереваСтраницОтчета.ИмяСтраницы;
			
			ИмяРаздела = ЭлементДереваСтраницОтчета.ИмяСтраницы;
			
			Если мСтруктураМногоуровневыхРазделов.Свойство(ИмяРаздела) Тогда
				ДеревоДанныхРаздела = ПолучитьИзВременногоХранилища(
					СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяРаздела]);
				
				ОформитьВеткуМногоуровнегоРаздела(ИмяРаздела, ЭлементРазделовОтчета, ДеревоДанныхРаздела);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОформитьВеткуМногоуровнегоРаздела(ИмяРаздела, ЭлементРазделовОтчета, ДеревоДанныхРаздела)
	
	СтруктураРаздела = мСтруктураМногоуровневыхРазделов[ИмяРаздела];
	
	Если СтруктураРаздела.Свойство("СписокСтраниц") Тогда
		СписокСтраниц = РеквизитФормыВЗначение("СписокСтраниц" + ИмяРаздела);
		
		КолСтрокВДеревеДанныхРаздела = ДеревоДанныхРаздела.Строки.Количество();
		Для НомерСтраницыРаздела = 1 По КолСтрокВДеревеДанныхРаздела Цикл
			КодСчетаСтраницы = ДеревоДанныхРаздела.Строки[НомерСтраницыРаздела - 1].Параметры.Счет;
			СтрокаСтраницы = СписокСтраниц.Найти(КодСчетаСтраницы, "");
			
			СтраницаВключенаВОтчет = СтрокаСтраницы <> Неопределено
			                       И СтрокаСтраницы.Включен = Истина;
			
			Если СтраницаВключенаВОтчет Тогда
				ЭлементРаздел = ЭлементРазделовОтчета.ПолучитьЭлементы().Добавить();
				НаимСтраницы = ДеревоДанныхРаздела.Строки[НомерСтраницыРаздела - 1].Параметры.НаименованиеСтраницы;
				
				ЭлементРаздел.КолонкаРазделыОтчета              = НаимСтраницы;
				ЭлементРаздел.КолонкаРазделыОтчетаСокрНаим      = ИмяРаздела;
				ЭлементРаздел.КолонкаНомерСтраницыРазделаОтчета = НомерСтраницыРаздела;
				
				СформироватьПодчиненныеРазделы(СтруктураРаздела, ДеревоДанныхРаздела, ЭлементРаздел);
				
			КонецЕсли;
			
		КонецЦикла;
		
	ИначеЕсли СтруктураРаздела.Свойство("Многостраничность") Тогда
		КолСтрокВДеревеДанныхРаздела = Макс(ДеревоДанныхРаздела.Строки.Количество(), 1);
		
		Для НомерСтраницыРаздела = 1 По КолСтрокВДеревеДанныхРаздела Цикл
			ЭлементРаздел = ЭлементРазделовОтчета.ПолучитьЭлементы().Добавить();
			НаимСтраницы = "Стр.";
			Если СтруктураРаздела.Свойство("НаимСтраницы") Тогда
				НаимСтраницы = СтруктураРаздела["НаимСтраницы"];
			КонецЕсли;
			ЭлементРаздел.КолонкаРазделыОтчета              = НаимСтраницы
				+ ?(НаимСтраницы = "Стр.", "", ". Стр. ") + Формат(НомерСтраницыРаздела, "ЧГ=");
			ЭлементРаздел.КолонкаРазделыОтчетаСокрНаим      = ИмяРаздела;
			ЭлементРаздел.КолонкаНомерСтраницыРазделаОтчета = НомерСтраницыРаздела;
			
			СформироватьПодчиненныеРазделы(СтруктураРаздела, ДеревоДанныхРаздела, ЭлементРаздел);
			
		КонецЦикла;
		
	Иначе
		СформироватьПодчиненныеРазделы(СтруктураРаздела, ДеревоДанныхРаздела, ЭлементРазделовОтчета);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьПодчиненныеРазделы(СтруктураРаздела, ДеревоДанныхРаздела, ЭлементРаздел)
	
	Если СтруктураРаздела.Свойство("ИменаПодчиненныхРазделов") Тогда
		
		ИменаПодчиненныхРазделов = СтруктураРаздела["ИменаПодчиненныхРазделов"];
		КолПодчРазделов = ИменаПодчиненныхРазделов.Количество();
		
		Для ИндПодчРаздела = 0 По КолПодчРазделов - 1 Цикл
			ИмяРаздела = ИменаПодчиненныхРазделов[ИндПодчРаздела];
			СтруктураПодчРаздела = мСтруктураМногоуровневыхРазделов[ИмяРаздела];
			
			ПараметрыРаздела = ПараметрыРазделаВДеревеСтраницОтчета(ИмяРаздела);
			
			Если ПараметрыРаздела.Показать Тогда
				ПодчиненныйЭлемент = ЭлементРаздел.ПолучитьЭлементы().Добавить();
				
				ПодчиненныйЭлемент.КолонкаРазделыОтчета         = ПараметрыРаздела.Представление;
				ПодчиненныйЭлемент.КолонкаРазделыОтчетаСокрНаим = ИмяРаздела;
				
				ОформитьВеткуМногоуровнегоРаздела(ИмяРаздела, ПодчиненныйЭлемент, ДеревоДанныхРаздела);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПараметрыРазделаВДеревеСтраницОтчета(ИмяРаздела)
	
	ПараметрыРаздела = Новый Структура;
	ПараметрыРаздела.Вставить("Показать", Ложь);
	ПараметрыРаздела.Вставить("Представление", "раздел не существует");
	
	ДеревоСтраниц = РеквизитФормыВЗначение("мДеревоСтраницОтчета");
	НайденнаяВетвь = ДеревоСтраниц.Строки.Найти(ИмяРаздела, "ИмяСтраницы", Истина);
	
	Если НайденнаяВетвь <> Неопределено Тогда
		ПараметрыРаздела.Вставить("Показать", НайденнаяВетвь.ПоказатьСтраницу = 1);
		ПараметрыРаздела.Вставить("Представление", НайденнаяВетвь.Представление);
	КонецЕсли;
	
	Возврат ПараметрыРаздела;
	
КонецФункции

&НаКлиенте
Процедура ВыполнитьПроверкуПередОткрытием()
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПриОткрытииЗавершение", ЭтотОбъект);
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередОткрытиемФормыРегламентированногоОтчета(
		ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытииЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Модифицированность = Ложь;
		Закрыть();
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьДанныеМногоуровневыхРазделов()
	
	// Формирование начальной структуры дерева разделов
	// с заполнением каждого уровня пустыми данными.
	
	ДеревоДанных = Новый ДеревоЗначений;
	ДеревоДанных.Колонки.Добавить("Данные");
	ДеревоДанных.Колонки.Добавить("ДанныеМногострочныхЧастей");
	ДеревоДанных.Колонки.Добавить("Параметры");
	ДеревоДанных.Колонки.Добавить("ДополнительныеДанные");
	
	СохрТаблДокумент = Новый ТабличныйДокумент;
	СохрТаблДокумент.Вывести(ТабличныйДокумент);
	
	Для Каждого Элем Из мСтруктураМногоуровневыхРазделов Цикл
		ИмяРаздела = Элем.Ключ;
		
		Если Элем.Значение.Свойство("Подчиненность") Тогда
			Продолжить;
		КонецЕсли;
		
		ДеревоДанныхРаздела = ДеревоДанных.Скопировать();
		
		ТабличныйДокумент.Очистить();
		ТабличныйДокумент.Вывести(МакетРаздела(ИмяРаздела));
		
		Если Элем.Значение.Свойство("СписокСтраниц") Тогда
			СписокСтраниц = РеквизитФормыВЗначение("СписокСтраниц" + ИмяРаздела);
			Для Каждого Страница Из СписокСтраниц Цикл
				ТекВетка = ДеревоДанныхРаздела.Строки.Добавить();
				
				ДанныеТаблДокумента = ДанныеТабличногоДокумента(ИмяРаздела);
				
				ТекВетка.Данные = ДанныеТаблДокумента.Данные;
				ТекВетка.ДанныеМногострочныхЧастей = ДанныеТаблДокумента.ДанныеМногострочныхЧастей;
				ТекВетка.Параметры = ПараметрыСтраницыРазделаНовогоОтчета(ИмяРаздела, Страница);
				
			КонецЦикла;
			
		Иначе
			ИсходноеКоличествоСтраниц = 1;
			Если Элем.Значение.Свойство("Многостраничность")
			   И Элем.Значение.Многостраничность <> Неопределено Тогда
				ИсходноеКоличествоСтраниц = Элем.Значение.Многостраничность;
			КонецЕсли;
			
			Для Инд = 1 По ИсходноеКоличествоСтраниц Цикл
				ТекВетка = ДеревоДанныхРаздела.Строки.Добавить();
				
				ДанныеТаблДокумента = ДанныеТабличногоДокумента(ИмяРаздела);
				
				ТекВетка.Данные = ДанныеТаблДокумента.Данные;
				ТекВетка.ДанныеМногострочныхЧастей = ДанныеТаблДокумента.ДанныеМногострочныхЧастей;
				ТекВетка.Параметры = ПараметрыСтраницыРазделаНовогоОтчета(ИмяРаздела);
				
				СформироватьДанныеПодчиненныхРазделов(ИмяРаздела, ТекВетка);
				
			КонецЦикла;
			
		КонецЕсли;
		
		СтруктураРеквизитовФормы.Вставить("АдресВоВрХранилищеДеревоДанных" + ИмяРаздела,
		ПоместитьВоВременноеХранилище(ДеревоДанныхРаздела, УникальныйИдентификатор));
		
	КонецЦикла;
	
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(СохрТаблДокумент);
	
КонецПроцедуры

&НаСервере
Процедура СформироватьДанныеМногоуровневогоРаздела(ИмяРаздела)
	
	УдалитьИзВременногоХранилища(
		СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяРаздела]);
	
	ДеревоДанных = Новый ДеревоЗначений;
	ДеревоДанных.Колонки.Добавить("Данные");
	ДеревоДанных.Колонки.Добавить("ДанныеМногострочныхЧастей");
	ДеревоДанных.Колонки.Добавить("Параметры");
	ДеревоДанных.Колонки.Добавить("ДополнительныеДанные");
	
	СохрТаблДокумент = Новый ТабличныйДокумент;
	СохрТаблДокумент.Вывести(ТабличныйДокумент);
	
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(МакетРаздела(ИмяРаздела));
	
	ИсходноеКоличествоСтраниц = 1;
	
	СтруктураРаздела = мСтруктураМногоуровневыхРазделов[ИмяРаздела];
	
	Если СтруктураРаздела.Свойство("Многостраничность")
	   И СтруктураРаздела.Многостраничность <> Неопределено Тогда
		ИсходноеКоличествоСтраниц = СтруктураРаздела.Многостраничность;
	КонецЕсли;
	
	Для Инд = 1 По ИсходноеКоличествоСтраниц Цикл
		ТекВетка = ДеревоДанных.Строки.Добавить();
		
		ДанныеТаблДокумента = ДанныеТабличногоДокумента(ИмяРаздела);
		
		ТекВетка.Данные = ДанныеТаблДокумента.Данные;
		ТекВетка.ДанныеМногострочныхЧастей = ДанныеТаблДокумента.ДанныеМногострочныхЧастей;
		ТекВетка.Параметры = ПараметрыСтраницыРазделаНовогоОтчета(ИмяРаздела);
		
		СформироватьДанныеПодчиненныхРазделов(ИмяРаздела, ТекВетка);
		
	КонецЦикла;
	
	СтруктураРеквизитовФормы.Вставить("АдресВоВрХранилищеДеревоДанных" + ИмяРаздела,
		ПоместитьВоВременноеХранилище(ДеревоДанных, УникальныйИдентификатор));
	
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(СохрТаблДокумент);
	
КонецПроцедуры

&НаСервере
Процедура СформироватьДанныеПодчиненныхРазделов(Знач ИмяРаздела, Ветка)
	
	Если мСтруктураМногоуровневыхРазделов[ИмяРаздела].Свойство("ИменаПодчиненныхРазделов") Тогда
		
		ИменаПодчРазделов = мСтруктураМногоуровневыхРазделов[ИмяРаздела]["ИменаПодчиненныхРазделов"];
		
		Для Каждого ИмяПодчРаздела Из ИменаПодчРазделов Цикл
			ПодчВетка = Ветка.Строки.Добавить().Строки.Добавить();
			
			ТабличныйДокумент.Очистить();
			ТабличныйДокумент.Вывести(МакетРаздела(ИмяПодчРаздела));
			
			ДанныеТаблДокумента = ДанныеТабличногоДокумента(ИмяПодчРаздела);
			
			ПодчВетка.Данные = ДанныеТаблДокумента.Данные;
			ПодчВетка.ДанныеМногострочныхЧастей = ДанныеТаблДокумента.ДанныеМногострочныхЧастей;
			ПодчВетка.Параметры = ПараметрыСтраницыРазделаНовогоОтчета(ИмяРаздела);
			
			СформироватьДанныеПодчиненныхРазделов(ИмяПодчРаздела, ПодчВетка);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПараметрыСтраницыРазделаНовогоОтчета(ИмяРаздела, ДополнительныеСведения = Неопределено)
	
	ПараметрыРаздела = Новый Структура;
	
	Если ИмяРаздела = "Баланс" Тогда
		ПараметрыРаздела.Вставить("НаименованиеСтраницы"); // Строка - наименование страницы в дереве разделов
		ПараметрыРаздела.Вставить("Расшифровка"); // УникальныйИдентификатор, Неопределено - расшифровка показателей
		
	ИначеЕсли ИмяРаздела = "ОФР" Тогда
		ПараметрыРаздела.Вставить("НаименованиеСтраницы"); // Строка - наименование страницы в дереве разделов
		ПараметрыРаздела.Вставить("Расшифровка"); // УникальныйИдентификатор, Неопределено - расшифровка показателей
		
	ИначеЕсли ИмяРаздела = "ОИК" Тогда
		ПараметрыРаздела.Вставить("НаименованиеСтраницы"); // Строка - наименование страницы в дереве разделов
		ПараметрыРаздела.Вставить("Расшифровка"); // УникальныйИдентификатор, Неопределено - расшифровка показателей
		
	ИначеЕсли ИмяРаздела = "ОДДС" Тогда
		ПараметрыРаздела.Вставить("НаименованиеСтраницы"); // Строка - наименование страницы в дереве разделов
		ПараметрыРаздела.Вставить("Расшифровка"); // УникальныйИдентификатор, Неопределено - расшифровка показателей
		
	ИначеЕсли ИмяРаздела = "ОЦИС" Тогда
		ПараметрыРаздела.Вставить("НаименованиеСтраницы"); // Строка - наименование страницы в дереве разделов
		ПараметрыРаздела.Вставить("Расшифровка"); // УникальныйИдентификатор, Неопределено - расшифровка показателей
		
	ИначеЕсли ИмяРаздела = "ДополнительныеПоказатели" Тогда
		ПараметрыРаздела.Вставить("НаименованиеСтраницы"); // Строка - наименование страницы в дереве разделов
		ПараметрыРаздела.Вставить("Расшифровка"); // УникальныйИдентификатор, Неопределено - расшифровка показателей
		
	ИначеЕсли ИмяРаздела = "РасшифровкиОбеспечений"
	      ИЛИ ИмяРаздела = "РасшифровкиОбеспеченийПолученные"
	      ИЛИ ИмяРаздела = "РасшифровкиОбеспеченийВыданные" Тогда
		ПараметрыРаздела.Вставить("ВидОбеспечений"); // Строка - тип срочности задолженности: полученные, выданные
		ПараметрыРаздела.Вставить("НаименованиеСтраницы"); // Строка - наименование страницы в дереве разделов
		ПараметрыРаздела.Вставить("СтатусЗаполнения", "новый"); // Строка - статус заполнения отчета
		
	ИначеЕсли ИмяРаздела = "ЗадолженностьПоКредитамЗаймам"
	      ИЛИ ИмяРаздела = "ЗадолженностьПоКредитамЗаймамДолгосрочная"
	      ИЛИ ИмяРаздела = "ЗадолженностьПоКредитамЗаймамКраткосрочная" Тогда
		ПараметрыРаздела.Вставить("НаименованиеСтраницы"); // Строка - наименование страницы в дереве разделов
		ПараметрыРаздела.Вставить("ДатаНачалаОтчета", НачалоМесяца(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета)); // Дата - конец периода отчета
		ПараметрыРаздела.Вставить("ДатаКонцаОтчета", КонецДня(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета)); // Дата - конец периода отчета
		ПараметрыРаздела.Вставить("СтатусЗаполнения", "новый"); // Строка - статус заполнения отчета
		
	ИначеЕсли ИмяРаздела = "ЛизингОбязательства" Тогда
		ПараметрыРаздела.Вставить("НаименованиеСтраницы"); // Строка - наименование страницы в дереве разделов
		ПараметрыРаздела.Вставить("СтатусЗаполнения", "новый"); // Строка - статус заполнения отчета
		
	ИначеЕсли ИмяРаздела = "ДенежныеСредства" Тогда
		ПараметрыРаздела.Вставить("ВидДенежныхСредств"); // Строка - вид денежных средств: касса, расчетные, валютные, специальные
		ПараметрыРаздела.Вставить("НаименованиеСтраницы"); // Строка - наименование страницы в дереве разделов
		
	ИначеЕсли ИмяРаздела = "ОСВ" Тогда
		ПараметрыРаздела.Вставить("НаименованиеСтраницы"); // Строка - наименование страницы в дереве разделов
		
	ИначеЕсли ИмяРаздела = "ОСВПоСчету" Тогда
		ПараметрыРаздела.Вставить("Счет", ДополнительныеСведения.Счет); // ПланСчетовСсылка.Хозрасчетный - счет, по которому заполняется отчет
		ПараметрыРаздела.Вставить("НаименованиеСтраницы", ДополнительныеСведения.Счет.Код); // Строка - наименование страницы в дереве разделов
		
	ИначеЕсли ИмяРаздела = "АнализСчета" Тогда
		ПараметрыРаздела.Вставить("Счет", ДополнительныеСведения.Счет); // ПланСчетовСсылка.Хозрасчетный - счет, по которому заполняется отчет
		ПараметрыРаздела.Вставить("НаименованиеСтраницы", ДополнительныеСведения.Счет.Код); // Строка - наименование страницы в дереве разделов
		
	ИначеЕсли ИмяРаздела = "ДебКредЗадолженность"
	      ИЛИ ИмяРаздела = "Дебиторская"
	      ИЛИ ИмяРаздела = "Кредиторская" Тогда
		ПараметрыРаздела.Вставить("НаименованиеСтраницы"); // Строка - наименование страницы в дереве разделов
		ПараметрыРаздела.Вставить("СтатусЗаполнения", "новый"); // Строка - статус заполнения отчета
		
	ИначеЕсли ИмяРаздела = "ДоходыРасходы" Тогда
		ПараметрыРаздела.Вставить("НаименованиеСтраницы"); // Строка - наименование страницы в дереве разделов
		
	ИначеЕсли ИмяРаздела = "ФинансовыеВложения"
	      ИЛИ ИмяРаздела = "ФинансовыеВложенияДолгосрочные"
	      ИЛИ ИмяРаздела = "ФинансовыеВложенияКраткосрочные" Тогда
		ПараметрыРаздела.Вставить("НаименованиеСтраницы"); // Строка - наименование страницы в дереве разделов
		ПараметрыРаздела.Вставить("СтатусЗаполнения", "новый"); // Строка - статус заполнения отчета
		
	ИначеЕсли ИмяРаздела = "СтруктураВыручки" Тогда
		ПараметрыРаздела.Вставить("НаименованиеСтраницы"); // Строка - наименование страницы в дереве разделов
		
	ИначеЕсли ИмяРаздела = "ПрочиеПоказатели" Тогда
		ПараметрыРаздела.Вставить("НаименованиеСтраницы"); // Строка - наименование страницы в дереве разделов
		
	ИначеЕсли ИмяРаздела = "ДополнительныеФайлы" Тогда
		ПараметрыРаздела.Вставить("НаименованиеСтраницы"); // Строка - наименование страницы в дереве разделов
		
	КонецЕсли;
	
	Возврат ПараметрыРаздела;
	
КонецФункции

&НаСервере
Процедура ОбновитьОтображениеСостоянияОтчета()
	
	ЦветФона = ЦветаСтиля.ЦветФонаНеначавшейсяОтправки;
	Если СтатусОтчета = НСтр("ru = 'Отправлено'") Тогда
		ЦветФона = ЦветаСтиля.ЦветФонаТекущейОтправки;
	ИначеЕсли СтатусОтчета = НСтр("ru = 'Отклонено'") Тогда
		ЦветФона = ЦветаСтиля.ЦветФонаОшибкиОтправки;
	ИначеЕсли СтатусОтчета = НСтр("ru = 'Доставлено'") Тогда
		ЦветФона = ЦветаСтиля.ЦветФонаУдачнойОтправки;
	КонецЕсли;
	
	Элементы.БлокСостоянияОтправки.ЦветФона = ЦветФона;
	Элементы.ОтправитьВБанк.Видимость = (СтатусОтчета = НСтр("ru = 'Не отправлено'")
		ИЛИ СтатусОтчета = НСтр("ru = 'Отклонено'"));
	
КонецПроцедуры

&НаСервере
Функция МакетРаздела(ИмяРаздела)
	
	ИмяМакета = Сред(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + ИмяРаздела;
	МакетРаздела = Отчеты[Сред(Лев(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, ".Форма.") - 1), 7)].ПолучитьМакет(ИмяМакета);
	
	Возврат МакетРаздела;
	
КонецФункции

&НаСервере
Функция МакетРазделаСоСпискомСтраниц(ИмяРаздела)
	
	Шаблон = МакетРаздела(ИмяРаздела + "_СписокСтраниц");
	МакетРаздела = Новый ТабличныйДокумент;
	
	Секция_Шапка = Шаблон.ПолучитьОбласть("Шапка");
	МакетРаздела.Вывести(Секция_Шапка);
	
	СписокСтраниц = РеквизитФормыВЗначение("СписокСтраниц" + ИмяРаздела);
	ВыбранныеСтраницы = СписокСтраниц.НайтиСтроки(Новый Структура("Включен", Истина));
	
	Если ВыбранныеСтраницы.Количество() = 0 Тогда
		Секция_СчетаНеОтмечены = Шаблон.ПолучитьОбласть("СчетаНеОтмечены");
		МакетРаздела.Вывести(Секция_СчетаНеОтмечены);
		
	Иначе
		Секция_ОписаниеСчета = Шаблон.ПолучитьОбласть("ОписаниеСчета");
		Для Каждого СтрокаВыбранногоСчета Из ВыбранныеСтраницы Цикл
			Секция_ОписаниеСчета.Параметры.ОписаниеСчета = "- " + СтрокаВыбранногоСчета.Наименование;
			МакетРаздела.Вывести(Секция_ОписаниеСчета);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат МакетРаздела;
	
КонецФункции

&НаСервере
Функция СборныйМакетРаздела(ИмяРаздела, ДанныеРаздела)
	
	Шаблон = МакетРаздела(ИмяРаздела);
	МакетРаздела = Новый ТабличныйДокумент;
	
	НомерКвартала = Месяц(КонецКвартала(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета)) / 3;
	ГодаОтчета = Год(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	
	Если ИмяРаздела = "ОСВ"
	 ИЛИ ИмяРаздела = "ДенежныеСредства50"
	 ИЛИ ИмяРаздела = "ДенежныеСредства51"
	 ИЛИ ИмяРаздела = "ДенежныеСредства52"
	 ИЛИ ИмяРаздела = "ДенежныеСредства55" Тогда
		Если ДанныеРаздела.ДополнительныеДанные <> Неопределено Тогда
			МакетРаздела.Вывести(Шаблон.ПолучитьОбласть("Шапка"));
			МакетРаздела.Вывести(ДанныеРаздела.ДополнительныеДанные.Представление);
		Иначе
			МакетРаздела.Вывести(Шаблон.ПолучитьОбласть("Шапка"));
			МакетРаздела.Вывести(Шаблон.ПолучитьОбласть("ЗаполнениеОтчета"));
		КонецЕсли;
		
	ИначеЕсли ИмяРаздела = "ОСВПоСчету" ИЛИ ИмяРаздела = "АнализСчета" Тогда
		Если ТипЗнч(ДанныеРаздела) <> Тип("СтрокаДереваЗначений") Тогда
			МакетРаздела.Вывести(МакетРазделаСоСпискомСтраниц(ИмяРаздела));
			
		Иначе
			Если ИмяРаздела = "ОСВПоСчету" Тогда
				СформироватьСекциюОСВПоСчету(МакетРаздела, Шаблон, ДанныеРаздела);
			ИначеЕсли ИмяРаздела = "АнализСчета" Тогда
				СформироватьСекциюАнализаСчета(МакетРаздела, Шаблон, ДанныеРаздела);
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ИмяРаздела = "Операции51" ИЛИ ИмяРаздела = "Операции52" ИЛИ ИмяРаздела = "Операции55" Тогда
		Если ДанныеРаздела.ДополнительныеДанные <> Неопределено Тогда
			СформироватьСводныйОтчетПоБанковскимСчетам(МакетРаздела, Шаблон, ДанныеРаздела);
		Иначе
			МакетРаздела.Вывести(Шаблон.ПолучитьОбласть("Шапка"));
			МакетРаздела.Вывести(Шаблон.ПолучитьОбласть("ЗаполнениеОтчета"));
		КонецЕсли;
		
	ИначеЕсли ИмяРаздела = "Дебиторская" ИЛИ ИмяРаздела = "Кредиторская" Тогда
		Если ДействуетСВерсииФормата("5.10.01") И ДанныеРаздела.Параметры.СтатусЗаполнения = "пустой" Тогда
			Шаблон.Параметры.ДатаСправки = Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДЛФ=DD");
			Шаблон.Параметры.НаименованиеОрганизации = НаименованиеОрганизации();
			МакетРаздела.Вывести(Шаблон.ПолучитьОбласть("Справка"));
			
		ИначеЕсли ДанныеРаздела.ДополнительныеДанные <> Неопределено Тогда
			СформироватьПредставлениеДебКредЗадолженности(ИмяРаздела, МакетРаздела, Шаблон, ДанныеРаздела);
			
		Иначе
			МакетРаздела.Вывести(Шаблон.ПолучитьОбласть("Шапка"));
			МакетРаздела.Вывести(Шаблон.ПолучитьОбласть("ЗаполнениеОтчета"));
			
		КонецЕсли;
		
	ИначеЕсли ИмяРаздела = "ДоходыРасходы" Тогда
		Если ДанныеРаздела.ДополнительныеДанные <> Неопределено Тогда
			СформироватьПредставлениеДоходовРасходов(МакетРаздела, Шаблон, ДанныеРаздела);
		Иначе
			МакетРаздела.Вывести(Шаблон.ПолучитьОбласть("Шапка"));
			МакетРаздела.Вывести(Шаблон.ПолучитьОбласть("ЗаполнениеОтчета"));
		КонецЕсли;
		
	ИначеЕсли ИмяРаздела = "ПрочиеПоказатели" ИЛИ ИмяРаздела = "СтруктураВыручки" Тогда
		Шаблон.Параметры.НомерКвартала = СтрокаЧГ0(НомерКвартала);
		Шаблон.Параметры.ГодОтчета = СтрокаЧГ0(ГодаОтчета);
		МакетРаздела.Вывести(Шаблон);
		
	ИначеЕсли ИмяРаздела = "РасшифровкиОбеспеченийПолученные"
	      ИЛИ ИмяРаздела = "РасшифровкиОбеспеченийВыданные" Тогда
		Шаблон.Параметры.НомерКвартала = СтрокаЧГ0(НомерКвартала);
		Шаблон.Параметры.ГодОтчета = СтрокаЧГ0(ГодаОтчета);
		
		Если ДействуетСВерсииФормата("5.10.01") И ДанныеРаздела.Параметры.СтатусЗаполнения = "пустой" Тогда
			Шаблон.Параметры.ДатаСправки = Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДЛФ=DD");
			Шаблон.Параметры.НаименованиеОрганизации = НаименованиеОрганизации();
			МакетРаздела.Вывести(Шаблон.ПолучитьОбласть("Справка"));
			
		ИначеЕсли ДанныеРаздела.ДополнительныеДанные <> Неопределено Тогда
			СформироватьПредставлениеОбеспечений(МакетРаздела, Шаблон, ДанныеРаздела);
			
		Иначе
			МакетРаздела.Вывести(Шаблон.ПолучитьОбласть("Шапка"));
			МакетРаздела.Вывести(Шаблон.ПолучитьОбласть("ЗаполнениеОтчета"));
			
		КонецЕсли;
		
	ИначеЕсли ИмяРаздела = "ЛизингОбязательства"
	      ИЛИ ИмяРаздела = "ФинансовыеВложенияДолгосрочные"
	      ИЛИ ИмяРаздела = "ФинансовыеВложенияКраткосрочные" Тогда
		Если ДействуетСВерсииФормата("5.10.01") И ДанныеРаздела.Параметры.СтатусЗаполнения = "пустой" Тогда
			Шаблон.Параметры.ДатаСправки = Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДЛФ=DD");
			Шаблон.Параметры.НаименованиеОрганизации = НаименованиеОрганизации();
			МакетРаздела.Вывести(Шаблон.ПолучитьОбласть("Справка"));
			
		Иначе
			ОбластьСправки = Шаблон.Область("Справка");
			Шаблон.УдалитьОбласть(ОбластьСправки, ТипСмещенияТабличногоДокумента.ПоВертикали);
			
			МакетРаздела.Вывести(Шаблон);
			
		КонецЕсли;
		
	ИначеЕсли ИмяРаздела = "ЗадолженностьПоКредитамЗаймамКраткосрочная"
	      ИЛИ ИмяРаздела = "ЗадолженностьПоКредитамЗаймамДолгосрочная" Тогда
		Если ДействуетСВерсииФормата("5.10.01") И ДанныеРаздела.Параметры.СтатусЗаполнения = "пустой" Тогда
			Шаблон.Параметры.ДатаСправки = Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДЛФ=DD");
			Шаблон.Параметры.НаименованиеОрганизации = НаименованиеОрганизации();
			МакетРаздела.Вывести(Шаблон.ПолучитьОбласть("Справка"));
			
		Иначе
			ОбластьСправки = Шаблон.Область("Справка");
			Шаблон.УдалитьОбласть(ОбластьСправки, ТипСмещенияТабличногоДокумента.ПоВертикали);
			
			МакетРаздела.Вывести(Шаблон);
			
			Если ДанныеРаздела.Параметры.Свойство("ДатаНачалаОтчета") Тогда
				ДатаНачалаОтчета = ДанныеРаздела.Параметры.ДатаНачалаОтчета;
				ДатаКонцаОтчета  = ДанныеРаздела.Параметры.ДатаКонцаОтчета;
			Иначе
				ДатаНачалаОтчета = НачалоКвартала(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
				ДатаКонцаОтчета  = КонецКвартала(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
			КонецЕсли;
			
			ЗаголовокНачальногоСальдо = "Сальдо на " + Формат(ДатаНачалаОтчета, "ДФ=dd.MM.yyyy");
			ЗаголовокКонечногоСальдо  = "Сальдо на " + Формат(ДатаКонцаОтчета,  "ДФ=dd.MM.yyyy");
			
			ОбластьСН = МакетРаздела.Области.ЗаголовокСН;
			ОбластьСН.Текст = ЗаголовокНачальногоСальдо;
			ОбластьСН.Имя = "";
			
			ОбластьСК = МакетРаздела.Области.ЗаголовокСК;
			ОбластьСК.Текст = ЗаголовокКонечногоСальдо;
			ОбластьСК.Имя = "";
			
		КонецЕсли;
		
	Иначе
		МакетРаздела.Вывести(Шаблон);
		
	КонецЕсли;
	
	Возврат МакетРаздела;
	
КонецФункции

&НаСервере
Процедура СформироватьСекциюОСВПоСчету(МакетРаздела, Шаблон, ДанныеРаздела, НомерСекции = 1)
	
	ИмяРаздела = "ОСВПоСчету";
	
	СтруктураРеквизитовФормы.АктивныйСегмент = НомерСекции;
	
	Область_Шапка = Шаблон.ПолучитьОбласть("Шапка");
	Область_Шапка.Параметры.ОсновнойСчет = ДанныеРаздела.Параметры.Счет.Код;
	МакетРаздела.Вывести(Область_Шапка);
	
	СчетУчета = ДанныеРаздела.Параметры.Счет;
	ВыборкаСегментов = ВыборкаСегментовОтчетаПоСчету(ИмяРаздела, СчетУчета);
	
	Если ВыборкаСегментов.Количество() = 0 Тогда
		МакетРаздела.Вывести(Шаблон.ПолучитьОбласть("ЗаполнениеОтчета"));
		
	Иначе
		Если ВыборкаСегментов.Количество() > 1 Тогда
			Область_Навигация = Шаблон.ПолучитьОбласть("Навигация");
			НомерСтраницы = "Стр. " + СтрокаЧГ0(НомерСекции) + " из " + СтрокаЧГ0(ВыборкаСегментов.Количество());
			Область_Навигация.Параметры.НомерСтраницы = НомерСтраницы;
			МакетРаздела.Вывести(Область_Навигация);
		КонецЕсли;
		
		Область_ШапкаТаблицы = Шаблон.ПолучитьОбласть("ШапкаТаблицы");
		
		ДатаНачалаОтчета = НачалоМесяца(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
		ДатаКонцаОтчета  = КонецМесяца(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
		
		Область_ШапкаТаблицы.Параметры.НачалоПериода = Формат(ДатаНачалаОтчета, "ДФ=dd.MM.yyyy");
		Область_ШапкаТаблицы.Параметры.КонецПериода  = Формат(ДатаКонцаОтчета, "ДФ=dd.MM.yyyy");
		
		МакетРаздела.Вывести(Область_ШапкаТаблицы);
		
		Если НомерСекции = 1 Тогда
			ВыборкаСегментовИтогов = ВыборкаСегментовОтчетаПоСчету(ИмяРаздела + "Итоги", СчетУчета);
			
			Если ВыборкаСегментовИтогов.Следующий() Тогда
				ИтогиОтчета = ДанныеРегистраДополнительныхФайлов(ВыборкаСегментовИтогов.ВидДополнительногоФайла);
				
				Область_ИтогТаблицы = Шаблон.ПолучитьОбласть("ИтогТаблицы");
				Область_ИтогТаблицы.Параметры.Заполнить(ИтогиОтчета);
				МакетРаздела.Вывести(Область_ИтогТаблицы);
				
			КонецЕсли;
			
		КонецЕсли;
		
		ВидДополнительногоФайла = ИмяРаздела + "." + СчетУчета.УникальныйИдентификатор() + "." + СтрокаЧГ0(НомерСекции);
		СтрокиСекции = ДанныеРегистраДополнительныхФайлов(ВидДополнительногоФайла);
		
		Для Каждого СтрокаСекции Из СтрокиСекции Цикл
			Область_СтрокаТаблицы = Шаблон.ПолучитьОбласть("СтрокаТаблицы");
			Область_СтрокаТаблицы.Параметры.Заполнить(СтрокаСекции);
			МакетРаздела.Вывести(Область_СтрокаТаблицы);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьСекциюАнализаСчета(МакетРаздела, Шаблон, ДанныеРаздела, НомерСекции = 1)
	
	ИмяРаздела = "АнализСчета";
	
	СтруктураРеквизитовФормы.АктивныйСегмент = НомерСекции;
	
	Область_Шапка = Шаблон.ПолучитьОбласть("Шапка");
	Область_Шапка.Параметры.ОсновнойСчет = ДанныеРаздела.Параметры.Счет.Код;
	МакетРаздела.Вывести(Область_Шапка);
	
	СчетУчета = ДанныеРаздела.Параметры.Счет;
	ВыборкаСегментов = ВыборкаСегментовОтчетаПоСчету(ИмяРаздела, СчетУчета);
	
	Если ВыборкаСегментов.Количество() = 0 Тогда
		МакетРаздела.Вывести(Шаблон.ПолучитьОбласть("ЗаполнениеОтчета"));
		
	Иначе
		Если ВыборкаСегментов.Количество() > 1 Тогда
			Область_Навигация = Шаблон.ПолучитьОбласть("Навигация");
			НомерСтраницы = "Стр. " + СтрокаЧГ0(НомерСекции) + " из " + СтрокаЧГ0(ВыборкаСегментов.Количество());
			Область_Навигация.Параметры.НомерСтраницы = НомерСтраницы;
			МакетРаздела.Вывести(Область_Навигация);
		КонецЕсли;
		
		Область_ШапкаТаблицы = Шаблон.ПолучитьОбласть("ШапкаТаблицы");
		
		ДатаНачалаОтчета = НачалоМесяца(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
		ДатаКонцаОтчета  = КонецМесяца(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
		
		Область_ШапкаТаблицы.Параметры.НачалоПериода = Формат(ДатаНачалаОтчета, "ДФ=dd.MM.yyyy");
		Область_ШапкаТаблицы.Параметры.КонецПериода  = Формат(ДатаКонцаОтчета, "ДФ=dd.MM.yyyy");
		
		МакетРаздела.Вывести(Область_ШапкаТаблицы);
		
		Если НомерСекции = 1 Тогда
			ВыборкаСегментовИтогов = ВыборкаСегментовОтчетаПоСчету(ИмяРаздела + "Итоги", СчетУчета);
			
			Если ВыборкаСегментовИтогов.Следующий() Тогда
				ИтогиОтчета = ДанныеРегистраДополнительныхФайлов(ВыборкаСегментовИтогов.ВидДополнительногоФайла);
				
				Область_ИтогТаблицы = Шаблон.ПолучитьОбласть("ИтогТаблицы");
				Область_ИтогТаблицы.Параметры.Заполнить(ИтогиОтчета);
				МакетРаздела.Вывести(Область_ИтогТаблицы);
				
			КонецЕсли;
			
		КонецЕсли;
		
		ВидДополнительногоФайла = ИмяРаздела + "." + СчетУчета.УникальныйИдентификатор() + "." + СтрокаЧГ0(НомерСекции);
		СтрокиСекции = ДанныеРегистраДополнительныхФайлов(ВидДополнительногоФайла);
		
		Для Каждого СтрокаСекции Из СтрокиСекции Цикл
			Если СтрокаСекции.Уровень = 1 Тогда
				Область_СтрокаТаблицы = Шаблон.ПолучитьОбласть("СтрокаТаблицы");
			ИначеЕсли СтрокаСекции.Уровень = 2 Тогда
				Область_СтрокаТаблицы = Шаблон.ПолучитьОбласть("СтрокаТаблицыКорСчет");
			Иначе
				ВызватьИсключение "Недопустимое значение в служебных данных при построении анализа счета";
			КонецЕсли;
			
			Область_СтрокаТаблицы.Параметры.Заполнить(СтрокаСекции);
			МакетРаздела.Вывести(Область_СтрокаТаблицы);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьСводныйОтчетПоБанковскимСчетам(МакетРаздела, Шаблон, ДанныеРаздела)
	
	МакетРаздела.Вывести(Шаблон.ПолучитьОбласть("Шапка"));
	
	Область_ШапкаТаблицы = Шаблон.ПолучитьОбласть("ШапкаТаблицы");
	
	ДатаНачалаОтчета = НачалоМесяца(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	ДатаКонцаОтчета  = КонецМесяца(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	
	Область_ШапкаТаблицы.Параметры.НачалоПериода = Формат(ДатаНачалаОтчета, "ДФ=dd.MM.yyyy");
	Область_ШапкаТаблицы.Параметры.КонецПериода  = Формат(ДатаКонцаОтчета, "ДФ=dd.MM.yyyy");
	
	МакетРаздела.Вывести(Область_ШапкаТаблицы);
	
	// Вывод сведений по счету верхнего уровня.
	СтрокаСчетаВерхнегоУровня = ДанныеРаздела.ДополнительныеДанные.Данные.Строки[0];
	
	Область_БухгалтерскийСчет = Шаблон.ПолучитьОбласть("БухгалтерскийСчет");
	Область_БухгалтерскийСчет.Параметры.Заполнить(СтрокаСчетаВерхнегоУровня);
	
	МакетРаздела.Вывести(Область_БухгалтерскийСчет);
	
	ВеличинаОтступа = 2;
	
	ПараметрыВывода = Новый Структура;
	ПараметрыВывода.Вставить("СтрокиДерева", СтрокаСчетаВерхнегоУровня.Строки);
	ПараметрыВывода.Вставить("ВеличинаОтступа", ВеличинаОтступа);
	ПараметрыВывода.Вставить("Шаблон", Шаблон);
	ПараметрыВывода.Вставить("МакетРаздела", МакетРаздела);
	ПараметрыВывода.Вставить("ДатаКонцаОтчета", ДатаКонцаОтчета);
	ПараметрыВывода.Вставить("СчетВерхнегоУровня", СтрокаСчетаВерхнегоУровня.Счет);
	
	ВывестиСведенияПоСубсчетамИБанковскимСчетам(ПараметрыВывода);
	
КонецПроцедуры

&НаСервере
Процедура ВывестиСведенияПоСубсчетамИБанковскимСчетам(ПараметрыВывода)
	
	СтрокиДерева = ПараметрыВывода.СтрокиДерева;
	ВеличинаОтступа = ПараметрыВывода.ВеличинаОтступа;
	Шаблон = ПараметрыВывода.Шаблон;
	ДатаКонцаОтчета = ПараметрыВывода.ДатаКонцаОтчета;
	МакетРаздела = ПараметрыВывода.МакетРаздела;
	СчетВерхнегоУровня = ПараметрыВывода.СчетВерхнегоУровня;
	
	ОписаниеТипаБанковскиеСчета = ОтчетностьВБанкиСлужебный.ТипыСущности("БанковскиеСчета");
	
	Для Каждого СтрокаСчета Из СтрокиДерева Цикл
		Если ОписаниеТипаБанковскиеСчета.СодержитТип(ТипЗнч(СтрокаСчета.Счет)) Тогда
			Область_БанковскийСчет = Шаблон.ПолучитьОбласть("БанковскийСчет");
			Область_БанковскийСчет.Области.ОбластьБанковскийСчет.Отступ = ВеличинаОтступа;
			
			Область_БанковскийСчет.Параметры.Заполнить(СтрокаСчета);
			
			ПрефиксИдентификатораДанных = "БанковскиеСчета." + СчетВерхнегоУровня.УникальныйИдентификатор()
			                            + "." + СтрокаСчета.Счет.УникальныйИдентификатор();
			ЗаголовокОтчета = "Операции за " + Формат(ДатаКонцаОтчета, "ДФ='ММММ гггг ''г.'''")
			                + " по счету " + СтрокаСчета.Счет;
			
			ПараметрыДетальногоПеречня = Новый Структура;
			ПараметрыДетальногоПеречня.Вставить("ВидПерехода", "ДетальныйПеречень");
			ПараметрыДетальногоПеречня.Вставить("ПрефиксИдентификатораДанных", ПрефиксИдентификатораДанных);
			ПараметрыДетальногоПеречня.Вставить("ЗаголовокОтчета", ЗаголовокОтчета);
			
			Область_БанковскийСчет.Параметры.ДетальныйПеречень = ПараметрыДетальногоПеречня;
			
			МакетРаздела.Вывести(Область_БанковскийСчет);
			
		Иначе
			Область_БухгалтерскийСубсчет = Шаблон.ПолучитьОбласть("БухгалтерскийСубсчет");
			Область_БухгалтерскийСубсчет.Области.ОбластьСубсчет.Отступ = ВеличинаОтступа;
			
			Область_БухгалтерскийСубсчет.Параметры.Заполнить(СтрокаСчета);
			
			МакетРаздела.Вывести(Область_БухгалтерскийСубсчет);
			
			ПараметрыВывода.ВеличинаОтступа = ВеличинаОтступа + 2;
			ПараметрыВывода.Вставить("СтрокиДерева", СтрокаСчета.Строки);
			
			ВывестиСведенияПоСубсчетамИБанковскимСчетам(ПараметрыВывода);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьПредставлениеДебКредЗадолженности(ИмяРаздела, МакетРаздела, Шаблон, ДанныеРаздела)
	
	СтрокаФормата = СтрокаФорматаЯчеекДебКредЗадолженности();
	УстановитьЕдиницуИзмеренияПоказателейВШаблоне(Шаблон, СтрокаФормата);
	
	Интервалы = ДанныеРаздела.ДополнительныеДанные.Интервалы;
	ДеревоЗадолженности = ДанныеРаздела.ДополнительныеДанные.Данные;
	
	Область_Шапка = Шаблон.ПолучитьОбласть("Шапка");
	МакетРаздела.Вывести(Область_Шапка);
	
	Для Каждого ЗадолженностьПоСроку Из ДеревоЗадолженности.Строки Цикл
		МакетШапкиТаблицы = Новый ТабличныйДокумент;
		
		Область_ШапкаТаблицы_Задолженность = Шаблон.ПолучитьОбласть("ШапкаТаблицы|Задолженность");
		ЗаголовокТаблицы = ЗадолженностьПоСроку.ВидЗадолженности + " задолженность на "
		                 + Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ=dd.MM.yyyy");
		Область_ШапкаТаблицы_Задолженность.Параметры.СрочностьЗадолженности = ЗаголовокТаблицы;
		МакетШапкиТаблицы.Вывести(Область_ШапкаТаблицы_Задолженность);
		
		Для Каждого Интервал Из Интервалы Цикл
			ЗаголовокИнтервала = Интервал.Заголовок;
			Если ИгнорироватьПервыйИнтервал() Тогда
				Если Интервалы.Индекс(Интервал) = 0 Тогда
					Продолжить;
				Иначе
					Если СтрНайти(ЗаголовокИнтервала, "Просроченная") <> 1 Тогда
						ЗаголовокИнтервала = "Просроченная задолженность " + НРег(Интервал.Заголовок);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			Область_ШапкаТаблицы_ЗадолженностьПоСроку = Шаблон.ПолучитьОбласть("ШапкаТаблицы|ЗадолженностьПоСроку");
			Область_ШапкаТаблицы_ЗадолженностьПоСроку.Параметры.ЗаголовокИнтервала = ЗаголовокИнтервала;
			МакетШапкиТаблицы.Присоединить(Область_ШапкаТаблицы_ЗадолженностьПоСроку);
			
		КонецЦикла;
		
		Область_ШапкаТаблицы_Резерв = Шаблон.ПолучитьОбласть("ШапкаТаблицы|Резерв");
		Область_ШапкаТаблицы_Резерв.Параметры.ЕдиницаИзмерения =
			ПредставлениеЕдиницыИзмерения(СтруктураРеквизитовФормы.ЕдиницаИзмерения);
		МакетШапкиТаблицы.Присоединить(Область_ШапкаТаблицы_Резерв);
		
		// Объединение ячеек заголовка таблицы.
		Если НЕ ИгнорироватьПервыйИнтервал() Тогда
			ОбъединяемаяОбласть = МакетШапкиТаблицы.Область(2, 7, 2, 7 + Интервалы.Количество() - 1);
			ОбъединяемаяОбласть.Объединить();
		КонецЕсли;
		
		МакетРаздела.Вывести(МакетШапкиТаблицы);
		
		Для Каждого ЗадолженностьПоВиду Из ЗадолженностьПоСроку.Строки Цикл
			Область_ВидЗадолженности_Задолженность = Шаблон.ПолучитьОбласть("ВидЗадолженности|Задолженность");
			Область_ВидЗадолженности_Задолженность.Параметры.Заполнить(ЗадолженностьПоВиду);
			Область_ВидЗадолженности_Задолженность.Параметры.ВидЗадолженности =
				ПолноеИмяВидаЗадолженности(ИмяРаздела, ЗадолженностьПоВиду.ВидЗадолженности);
			МакетРаздела.Вывести(Область_ВидЗадолженности_Задолженность);
			
			Для Каждого Интервал Из Интервалы Цикл
				Если ИгнорироватьПервыйИнтервал() И Интервалы.Индекс(Интервал) = 0 Тогда
					Продолжить;
				КонецЕсли;
				
				Область_ВидЗадолженности_ЗадолженностьПоСроку = Шаблон.ПолучитьОбласть("ВидЗадолженности|ЗадолженностьПоСроку");
				ИмяКолонки = "ПросроченнаяПоСроку" + Интервал.Код;
				Область_ВидЗадолженности_ЗадолженностьПоСроку.Параметры.ПросроченнаяПоСроку = ЗадолженностьПоВиду[ИмяКолонки];
				МакетРаздела.Присоединить(Область_ВидЗадолженности_ЗадолженностьПоСроку);
				
			КонецЦикла;
			
			Область_ВидЗадолженности_Резерв = Шаблон.ПолучитьОбласть("ВидЗадолженности|Резерв");
			Область_ВидЗадолженности_Резерв.Параметры.Заполнить(ЗадолженностьПоВиду);
			МакетРаздела.Присоединить(Область_ВидЗадолженности_Резерв);
			
			ВывестиЗадолженностьПоОбъектам(ЗадолженностьПоВиду, МакетРаздела, Шаблон, Интервалы);
			
		КонецЦикла;
		
		// Итог по срочности задолженности.
		Область_Итого_Задолженность = Шаблон.ПолучитьОбласть("Итого|Задолженность");
		Область_Итого_Задолженность.Параметры.Заполнить(ЗадолженностьПоСроку);
		МакетРаздела.Вывести(Область_Итого_Задолженность);
		
		Для Каждого Интервал Из Интервалы Цикл
			Если ИгнорироватьПервыйИнтервал() И Интервалы.Индекс(Интервал) = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			Область_Итого_ЗадолженностьПоСроку = Шаблон.ПолучитьОбласть("Итого|ЗадолженностьПоСроку");
			ИмяКолонки = "ПросроченнаяПоСроку" + Интервал.Код;
			Область_Итого_ЗадолженностьПоСроку.Параметры.ПросроченнаяПоСроку = ЗадолженностьПоСроку[ИмяКолонки];
			МакетРаздела.Присоединить(Область_Итого_ЗадолженностьПоСроку);
			
		КонецЦикла;
		
		Область_Итого_Резерв = Шаблон.ПолучитьОбласть("Итого|Резерв");
		Область_Итого_Резерв.Параметры.Заполнить(ЗадолженностьПоСроку);
		МакетРаздела.Присоединить(Область_Итого_Резерв);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьПредставлениеДоходовРасходов(МакетРаздела, Шаблон, ДанныеРаздела)
	
	ДатаКонцаПериода = КонецМесяца(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	ДатаНачалаПериода = НачалоГода(ДатаКонцаПериода);
	
	Если НачалоМесяца(ДатаКонцаПериода) = ДатаНачалаПериода Тогда
		СтрПериод = Формат(ДатаКонцаПериода, "ДФ = 'ММММ гггг'") + " г.";
	Иначе
		СтрПериод = "Январь - " + Формат(ДатаКонцаПериода, "ДФ = 'ММММ гггг'") + " г.";
	КонецЕсли;
	
	ПериодОтчета = " за " + СтрПериод;
	
	Шаблон = МакетРаздела("ДоходыРасходы");
	
	СтрокаФормата = СтрокаФорматаЯчеекБухгалтерскойОтчетности();
	УстановитьЕдиницуИзмеренияПоказателейВШаблоне(Шаблон, СтрокаФормата);
	
	Область_Шапка = Шаблон.ПолучитьОбласть("Шапка");
	МакетРаздела.Вывести(Область_Шапка);
	
	ДанныеТаблицы = ДанныеРаздела.ДополнительныеДанные.Доходы;
	Заголовки = Новый Структура;
	Заголовки.Вставить("НаименованиеТаблицы", "Прочие доходы" + ПериодОтчета);
	Заголовки.Вставить("НаименованиеСтрокиИтого", "Итого*");
	
	СформироватьПредставлениеДоходовРасходовПоВиду(МакетРаздела, Шаблон, ДанныеТаблицы, Заголовки);
	
	ДанныеТаблицы = ДанныеРаздела.ДополнительныеДанные.Расходы;
	Заголовки = Новый Структура;
	Заголовки.Вставить("НаименованиеТаблицы", "Прочие расходы" + ПериодОтчета);
	Заголовки.Вставить("НаименованиеСтрокиИтого", "Итого*");
	
	СформироватьПредставлениеДоходовРасходовПоВиду(МакетРаздела, Шаблон, ДанныеТаблицы, Заголовки);
	
	Область_Подвал = Шаблон.ПолучитьОбласть("Подвал");
	МакетРаздела.Вывести(Область_Подвал);
	
КонецПроцедуры

&НаСервере
Процедура СформироватьПредставлениеДоходовРасходовПоВиду(МакетРаздела, Шаблон, ДанныеТаблицы, Заголовки)
	
	Область_ШапкаТаблицы = Шаблон.ПолучитьОбласть("ШапкаТаблицы");
	
	Область_ШапкаТаблицы.Параметры.ЕдиницаИзмерения =
		ПредставлениеЕдиницыИзмерения(СтруктураРеквизитовФормы.ЕдиницаИзмерения);
	Область_ШапкаТаблицы.Параметры.НаименованиеТаблицы = Заголовки.НаименованиеТаблицы;
	
	МакетРаздела.Вывести(Область_ШапкаТаблицы);
	
	Для Каждого Статья Из ДанныеТаблицы Цикл
		Область_Статья = Шаблон.ПолучитьОбласть("Статья");
		Область_Статья.Параметры.Заполнить(Статья);
		МакетРаздела.Вывести(Область_Статья);
	КонецЦикла;
	
	Область_Итого = Шаблон.ПолучитьОбласть("Итого");
	
	Область_Итого.Параметры.НаименованиеСтрокиИтого = Заголовки.НаименованиеСтрокиИтого;
	Область_Итого.Параметры.СуммаИтоги = ДанныеТаблицы.Итог("СуммаПоСтатье");
	
	МакетРаздела.Вывести(Область_Итого);
	
КонецПроцедуры

&НаСервере
Процедура СформироватьПредставлениеОбеспечений(МакетРаздела, Шаблон, ДанныеРаздела)
	
	Область_Шапка = Шаблон.ПолучитьОбласть("Шапка");
	МакетРаздела.Вывести(Область_Шапка);
	
	Область_ШапкаТаблицы = Шаблон.ПолучитьОбласть("ШапкаТаблицы");
	МакетРаздела.Вывести(Область_ШапкаТаблицы);
	
	ИтогоСтоимость = 0;
	
	ДанныеОтчета = ДанныеРаздела.ДополнительныеДанные.Данные;
	Для Каждого СтрокаТаблицы Из ДанныеОтчета Цикл
		НомерСтроки = ДанныеОтчета.Индекс(СтрокаТаблицы) + 1;
		ИмяОбластиСтроки = "Строка_" + СтрокаЧГ0(НомерСтроки);
		
		Область_СтрокаТаблицы = Шаблон.ПолучитьОбласть("СтрокаТаблицы");
		Область_СтрокаТаблицы.Область(1, , 1, ).Имя = ИмяОбластиСтроки;
		
		Область_СтрокаТаблицы.Параметры.Заполнить(СтрокаТаблицы);
		
		МакетРаздела.Вывести(Область_СтрокаТаблицы);
		
		СтоимостьПоЕдиницеИзмерения = Окр(СтрокаТаблицы.Стоимость / 1000, 3);
		ИтогоСтоимость = ИтогоСтоимость + СтоимостьПоЕдиницеИзмерения;
		
	КонецЦикла;
	
	Область_ИтогТаблицы = Шаблон.ПолучитьОбласть("ИтогТаблицы");
	Область_ИтогТаблицы.Параметры.Стоимость = ИтогоСтоимость;
	МакетРаздела.Вывести(Область_ИтогТаблицы);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЕдиницуИзмеренияПоказателейВШаблоне(Шаблон, СтрокаФормата)
	
	УдаляемыеОбласти = Новый Массив;
	
	Для Каждого Область ИЗ Шаблон.Области Цикл
		Префикс = "УстановитьЕдИзм";
		
		ИмяОбласти = Область.Имя;
		Если Лев(ИмяОбласти, 15) = Префикс Тогда
			Область.Формат = СтрокаФормата;
			УдаляемыеОбласти.Добавить(ИмяОбласти);
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого ИмяОбласти Из УдаляемыеОбласти Цикл
		Шаблон.Области[ИмяОбласти].Имя = "";
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьТекстыГиперссылокДополнительныхФайлов()
	
	ИмяРаздела = "ДополнительныеФайлы";
	
	СтруктураРаздела = мСтруктураМногоуровневыхРазделов[ИмяРаздела];
	
	ДеревоДанныхРаздела = ПолучитьИзВременногоХранилища(
		СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяРаздела]);
	
	Показатели = ДеревоДанныхРаздела.Строки[0].Данные;
	
	Для Каждого ОписаниеФайла Из СтруктураРеквизитовФормы.ДополнительныеТипизированныеФайлы Цикл
		ХранилищеОписания = ОписаниеФайла.Значение;
		ПредельныйРазмерМб = Окр(ХранилищеОписания.ОграничениеПоРазмеру / Мебибайт());
		ТекстГиперссылки = "Добавить файл (%1; не более %2 Мб)";
		ТекстГиперссылки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ТекстГиперссылки, ХранилищеОписания.ОграничениеПоРасширению, ПредельныйРазмерМб);
		
		Показатели[ХранилищеОписания.СтрокаПоказателя + "01"] = ТекстГиперссылки;
		Показатели[ХранилищеОписания.СтрокаПоказателя + "02"] = 0;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПолноеИмяВидаЗадолженности(ИмяРаздела, ВидЗадолженности)
	
	ПолноеИмяВидаЗадолженности = ВидЗадолженности;
	
	Если ВидЗадолженности = "Расчеты" Тогда
		Если ИмяРаздела = "Дебиторская" Тогда
			ПолноеИмяВидаЗадолженности = "Расчеты с покупателями и заказчиками";
		ИначеЕсли ИмяРаздела = "Кредиторская" Тогда
			ПолноеИмяВидаЗадолженности = "Расчеты с поставщиками и подрядчиками";
		КонецЕсли;
		
	ИначеЕсли ВидЗадолженности = "Авансы" Тогда
		Если ИмяРаздела = "Дебиторская" Тогда
			ПолноеИмяВидаЗадолженности = "Авансы выданные";
		ИначеЕсли ИмяРаздела = "Кредиторская" Тогда
			ПолноеИмяВидаЗадолженности = "Авансы полученные";
		КонецЕсли;
		
	ИначеЕсли ВидЗадолженности = "Платежи" Тогда
		ПолноеИмяВидаЗадолженности = "Расчеты по налогам и взносам";
		
	ИначеЕсли ВидЗадолженности = "Учредители" Тогда
		ПолноеИмяВидаЗадолженности = "Расчеты с учредителями";
		
	ИначеЕсли ВидЗадолженности = "Лизинг" Тогда
		ПолноеИмяВидаЗадолженности = "Лизинг";
		
	ИначеЕсли ВидЗадолженности = "Прочая" Тогда
		ПолноеИмяВидаЗадолженности = "Прочая";
		
	КонецЕсли;
	
	Возврат ПолноеИмяВидаЗадолженности;
	
КонецФункции

&НаСервере
Процедура ВывестиЗадолженностьПоОбъектам(ЗадолженностьПоОбъектам, МакетРаздела, Шаблон, Интервалы)
	
	ИндексСтрокиПоСрочности = 1
		+ ЗадолженностьПоОбъектам.Родитель.Владелец().Строки.Индекс(ЗадолженностьПоОбъектам.Родитель);
	
	ИндексСтрокиПоВидуЗадолженности = 1
		+ ЗадолженностьПоОбъектам.Родитель.Строки.Индекс(ЗадолженностьПоОбъектам);
		
	ИндексСтрокиПоОбъекту = 0;
	
	Для Каждого ЗадолженностьПоОбъекту Из ЗадолженностьПоОбъектам.Строки Цикл
		ИндексСтрокиПоОбъекту = ИндексСтрокиПоОбъекту + 1;
		
		Если НЕ СтрокаЗаполненаПоЕдИзм(ЗадолженностьПоОбъекту) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ЗадолженностьПоОбъекту.Контрагент) Тогда
			ВидОбъекта = "Контрагент";
		Иначе
			ВидОбъекта = "ПредметУчета";
		КонецЕсли;
		
		Область_ОбъектУчета_Задолженность = Шаблон.ПолучитьОбласть(ВидОбъекта + "|Задолженность");
		Область_ОбъектУчета_Задолженность.Параметры.Заполнить(ЗадолженностьПоОбъекту);
		МакетРаздела.Вывести(Область_ОбъектУчета_Задолженность);
		
		Для Каждого Интервал Из Интервалы Цикл
			Если ИгнорироватьПервыйИнтервал() И Интервалы.Индекс(Интервал) = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			Область_ОбъектУчета_ЗадолженностьПоСроку = Шаблон.ПолучитьОбласть(ВидОбъекта + "|ЗадолженностьПоСроку");
			ИмяКолонки = "ПросроченнаяПоСроку" + Интервал.Код;
			Область_ОбъектУчета_ЗадолженностьПоСроку.Параметры.ПросроченнаяПоСроку = ЗадолженностьПоОбъекту[ИмяКолонки];
			МакетРаздела.Присоединить(Область_ОбъектУчета_ЗадолженностьПоСроку);
			
		КонецЦикла;
		
		Область_ОбъектУчета_Резерв = Шаблон.ПолучитьОбласть(ВидОбъекта + "|Резерв");
		Область_ОбъектУчета_Резерв.Параметры.Заполнить(ЗадолженностьПоОбъекту);
		МакетРаздела.Присоединить(Область_ОбъектУчета_Резерв);
		
		// Области даты погашения и комментария
		ОбластьДатыПогашения = МакетРаздела.Области[ВидОбъекта + "ДатаПогашения"];
		ОбластьКомментария   = МакетРаздела.Области[ВидОбъекта + "Комментарий"];
		
		ПостфиксИмени = "_" + СтрокаЧГ0(ИндексСтрокиПоСрочности)
		              + "_" + СтрокаЧГ0(ИндексСтрокиПоВидуЗадолженности)
		              + "_" + СтрокаЧГ0(ИндексСтрокиПоОбъекту);
		ОбластьДатыПогашения.Имя = "ДатаПогашения" + ПостфиксИмени;
		ОбластьКомментария.Имя   = "Комментарий" + ПостфиксИмени;
		
		Если ЗадолженностьПоОбъекту.Просроченная = 0 Тогда
			ОбластьДатыПогашения.Защита   = Истина;
			ОбластьДатыПогашения.ЦветФона = Новый Цвет();
			
			ОбластьКомментария.Защита   = Истина;
			ОбластьКомментария.ЦветФона = Новый Цвет();
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция СтрокаЗаполненаПоЕдИзм(СтрокаДанныхОтчета, СтрокаФормата = Неопределено)
	
	Колонки = СтрокаДанныхОтчета.Владелец().Колонки;
	ТипЧисло = Новый ОписаниеТипов("Число");
	
	Если СтрокаФормата = Неопределено Тогда
		СтрокаФормата = СтрокаФорматаПроверкиЗаполненияПоЕдИзм();
	КонецЕсли;
	
	СтрокаЗаполнена = Ложь;
	
	Для Каждого Колонка Из Колонки Цикл
		Если Колонка.ТипЗначения = ТипЧисло Тогда
			ПриведенноеЗначение = ЗначениеПриведенноеКЕдиницеИзмерения(СтрокаДанныхОтчета[Колонка.Имя], СтрокаФормата);
			
			Если ЗначениеЗаполнено(ПриведенноеЗначение) Тогда
				СтрокаЗаполнена = Истина;
				Прервать;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СтрокаЗаполнена;
	
КонецФункции

&НаСервере
Функция ВыборкаСегментовОтчета(ИмяРаздела)
	
	ШаблонОтбора = ИмяРаздела + ".%";
	
	Возврат ВыборкаСегментовОтчетаПоШаблону(ШаблонОтбора);
	
КонецФункции

&НаСервере
Функция ВыборкаСегментовОтчетаПоСчету(ИмяРаздела, СчетУчета)
	
	ШаблонОтбора = ИмяРаздела + "." + СчетУчета.УникальныйИдентификатор() + ".%";
	
	Возврат ВыборкаСегментовОтчетаПоШаблону(ШаблонОтбора);
	
КонецФункции

&НаСервере
Функция ВыборкаСегментовОтчетаПоШаблону(ШаблонОтбора)
	
	ЗапросПоДанным = Новый Запрос;
	ЗапросПоДанным.Текст = "ВЫБРАТЬ
	                       |	ДополнительныеФайлыРегламентированныхОтчетов.ВидДополнительногоФайла КАК ВидДополнительногоФайла
	                       |ИЗ
	                       |	РегистрСведений.ДополнительныеФайлыРегламентированныхОтчетов КАК ДополнительныеФайлыРегламентированныхОтчетов
	                       |ГДЕ
	                       |	ДополнительныеФайлыРегламентированныхОтчетов.РегламентированныйОтчет = &РегламентированныйОтчет
	                       |	И ДополнительныеФайлыРегламентированныхОтчетов.ВидДополнительногоФайла ПОДОБНО &ШаблонОтбора
	                       |
	                       |УПОРЯДОЧИТЬ ПО
	                       |	ВидДополнительногоФайла";
	
	ЗапросПоДанным.УстановитьПараметр("ШаблонОтбора", ШаблонОтбора);
	ЗапросПоДанным.УстановитьПараметр("РегламентированныйОтчет", СсылкаНаОтчет());
	
	ВыборкаСегментов = ЗапросПоДанным.Выполнить().Выбрать();
	
	Возврат ВыборкаСегментов;
	
КонецФункции

&НаСервере
Функция СсылкаНаОтчет()
	
	СсылкаНаОтчет = Документы.РегламентированныйОтчет.ПустаяСсылка();
	
	Если ТипЗнч(СтруктураРеквизитовФормы.мСохраненныйДок) = Тип("ДокументСсылка.РегламентированныйОтчет") 
	 ИЛИ ТипЗнч(СтруктураРеквизитовФормы.мСохраненныйДок) = Тип("ДокументОбъект.РегламентированныйОтчет") Тогда
		СсылкаНаОтчет = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
	КонецЕсли;
	
	Возврат СсылкаНаОтчет;
	
КонецФункции

&НаСервере
Функция ДанныеРегистраДополнительныхФайлов(ВидДополнительногоФайла)
	
	ЗаписьРегистраСведений = РегистрыСведений.ДополнительныеФайлыРегламентированныхОтчетов.СоздатьМенеджерЗаписи();
	
	ЗаписьРегистраСведений.РегламентированныйОтчет = СсылкаНаОтчет();
	ЗаписьРегистраСведений.ВидДополнительногоФайла = ВидДополнительногоФайла;
	
	ЗаписьРегистраСведений.Прочитать();
	
	Если ЗаписьРегистраСведений.Выбран() Тогда
		Данные = ЗаписьРегистраСведений.СодержимоеФайла.Получить();
	Иначе
		Данные = Неопределено;
	КонецЕсли;
	
	Возврат Данные;
	
КонецФункции

#Область ПомещениеДанныхИзМестХраненияВТабличныйДокумент

&НаСервере
Процедура ПереключитьРаздел(ИмяРаздела, НовыеНомераСтрокМногоуровнегоРаздела = Неопределено)
	
	ИмяИсходногоРаздела = СтруктураРеквизитовФормы.НаимТекущегоРаздела;
	
	СохранитьДанныеРаздела(ИмяИсходногоРаздела);
	
	ПоказатьРаздел(ИмяРаздела, НовыеНомераСтрокМногоуровнегоРаздела);
	
КонецПроцедуры

&НаСервере
Процедура ПоказатьРаздел(ИмяРаздела, НовыеНомераСтрокМногоуровнегоРаздела = Неопределено)
	
	ИмяСтраницыВывода = ИмяСтраницыВывода(ИмяРаздела);
	
	Элементы.СтраницыОтчета.ТекущаяСтраница = Элементы[ИмяСтраницыВывода];
	
	Если ИмяРаздела <> "ОтчетыФНС" Тогда
		ВывестиДанныеВТабличныйДокумент(ИмяРаздела, НовыеНомераСтрокМногоуровнегоРаздела);
		
		Если ИмяРаздела = "ДополнительныеФайлы" Тогда
			НастроитьОбластиУдаленияТипизированныхФайлов();
		КонецЕсли;
		
	КонецЕсли;
	
	СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяРаздела;
	СтруктураРеквизитовФормы.НомерСтраницыТекущегоРаздела = НовыеНомераСтрокМногоуровнегоРаздела;
	
	Элементы.ЗаполнитьТекущий.Доступность = РазделАвтозаполняется(ИмяРаздела);
	
КонецПроцедуры

&НаСервере
Процедура НастроитьОбластиУдаленияТипизированныхФайлов()
	
	Для Каждого ОписаниеФайла Из СтруктураРеквизитовФормы.ДополнительныеТипизированныеФайлы Цикл
		ТипФайла = ОписаниеФайла.Ключ;
		Описание = ОписаниеФайла.Значение;
		
		ЭтоГиперссылка = ЗначениеЗаполнено(Описание.Адрес);
		ТекстОбласти = ?(ЗначениеЗаполнено(Описание.Адрес), "х", "");
		
		ОбластьКнопкиУдаления = ТабличныйДокумент.Области["УдалитьФайл_" + Описание.СтрокаПоказателя + "01"];
		ОбластьКнопкиУдаления.Гиперссылка = ЭтоГиперссылка;
		ОбластьКнопкиУдаления.Текст = ТекстОбласти;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиДанныеВТабличныйДокумент(ИмяТекРаздела, НовыеНомераСтрокМногоуровнегоРаздела = Неопределено)
	
	ТабличныйДокумент.Очистить();
	
	Если мСтруктураМногоуровневыхРазделов.Свойство(ИмяТекРаздела) Тогда
		// Многоуровневые разделы.
		СтруктураРаздела = мСтруктураМногоуровневыхРазделов[ИмяТекРаздела];
		
		ИмяГлРаздела = Неопределено;
		СтруктураРаздела.Свойство("КорневойРаздел", ИмяГлРаздела);
		ИмяГлРаздела = ?(ИмяГлРаздела = Неопределено, ИмяТекРаздела, ИмяГлРаздела);
		
		ДеревоДанныхРаздела = ПолучитьИзВременногоХранилища(
			СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяГлРаздела]);
		
		ТекВетка = ДеревоДанныхРаздела;
		
		СкрыватьЭлементыУдаленияСтраницы = Ложь;
		Для Каждого НомерСтроки Из НовыеНомераСтрокМногоуровнегоРаздела Цикл
			СкрыватьЭлементыУдаленияСтраницы = (ТекВетка.Строки.Количество() < 2);
			ТекВетка = ТекВетка.Строки[НомерСтроки - 1];
		КонецЦикла;
		
		МакетРаздела = СборныйМакетРаздела(ИмяТекРаздела, ТекВетка);
		
		ТабличныйДокумент.Вывести(МакетРаздела);
		УстановитьПереключательОтсутствияДанных(ИмяТекРаздела, ТекВетка);
		
		Если СкрыватьЭлементыУдаленияСтраницы Тогда
			СкрытьЭлементыУдаленияСтраницы();
		КонецЕсли;
		
		Если ТипЗнч(ТекВетка) = Тип("СтрокаДереваЗначений") Тогда
			НеотображаемыеПоказатели = ТекВетка.Параметры;
			
			// Вывод немногострочных данных.
			Для Каждого ЭлСтруктуры Из ТекВетка.Данные Цикл
				Обл = ТабличныйДокумент.Области.Найти(ЭлСтруктуры.Ключ);
				Если Обл <> Неопределено Тогда
					Обл.Значение = ЭлСтруктуры.Значение;
				КонецЕсли;
			КонецЦикла;
			
			// Добавление в многострочную часть необходимого количества
			// дополнительных строк, вывод многострочных данных.
			ВыводитсяСправкаОбОтсутствии = ДействуетСВерсииФормата("5.10.01")
				И ТекВетка.Параметры.Свойство("СтатусЗаполнения")
				И ТекВетка.Параметры.СтатусЗаполнения = "пустой";
			
			Если НЕ ВыводитсяСправкаОбОтсутствии Тогда
				ВывестиМногострочныеДанныеВТабличныйДокумент(ТекВетка);
			КонецЕсли;
			
		КонецЕсли;
		
		ДеревоДанныхРаздела = Неопределено;
		
		СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела = НовыеНомераСтрокМногоуровнегоРаздела;
		
	ИначеЕсли ИмяТекРаздела = "ОтчетыФНС" Тогда
		// Альтернативные страницы.
		
	Иначе
		// Обычные разделы.
		ТабличныйДокумент.Вывести(МакетРаздела(ИмяТекРаздела));
		
		Для Каждого ЭлСтруктуры Из ЭтаФорма["СтруктураДанных" + ИмяТекРаздела] Цикл
			Обл = ТабличныйДокумент.Области.Найти(ЭлСтруктуры.Ключ);
			Если Обл <> Неопределено Тогда
				Обл.Значение = ЭлСтруктуры.Значение;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	ЗаполнитьПериодыЕдиницыИзмеренияОтчета(ИмяТекРаздела);
	УстановитьФорматВыводаНаСервере(ИмяТекРаздела);
	
	УстановитьДоступностьОбластей(ЭтаФорма, ИмяТекРаздела);
	
КонецПроцедуры

&НаСервере
Процедура ВывестиМногострочныеДанныеВТабличныйДокумент(Ветка, Координаты = "")
	
	ДанныеМнЧ = Ветка.ДанныеМногострочныхЧастей;
	
	Для каждого ЭлемСтруктуры Из ДанныеМнЧ Цикл
		
		ИмяГруппы = ЭлемСтруктуры.Ключ;
		ДеревоМнЧ = ЭлемСтруктуры.Значение;
		
		Для Инд_Число = 0 По ДеревоМнЧ.Строки.Количество() - 1 Цикл
			
			// Добавление необходимого количества доп. строк.
			Если Инд_Число > 0 Тогда
				Инд = СтрокаСИндексомПоказателя(Инд_Число);
				ИмяОбластиПреемника = "ДобавлениеСтроки" + ЭлемСтруктуры.Ключ + Координаты + Инд;
				ВставитьДопСтроку(ЭлемСтруктуры.Ключ, ИмяОбластиПреемника);
			КонецЕсли;
			
			// Обработка гиперссылок удаления строки, если эта строка единственная.
			Если ДеревоМнЧ.Строки.Количество() = 1 Тогда
				Инд = СтрокаСИндексомПоказателя(1);
				ИмяИскомойОбласти = "УдалитьСтроку" + ЭлемСтруктуры.Ключ + Координаты + Инд;
				Обл = ТабличныйДокумент.Области.Найти(ИмяИскомойОбласти);
				
				Если Обл <> Неопределено Тогда
					ЭтоОдинокаяСтрокаДопФайла = (ИмяГруппы = СтруктураРеквизитовФормы.мИдГруппы11М1)
					                          И СтруктураРеквизитовФормы.ДополнительныеФайлы.Количество() = 1;
					Если НЕ ЭтоОдинокаяСтрокаДопФайла Тогда
						Обл.Гиперссылка = Ложь;
						Обл.Текст = "";
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
			// Вывод многострочных данных.
			Данные = ДеревоМнЧ.Строки[Инд_Число].Данные;
			Инд = СтрокаСИндексомПоказателя(Инд_Число + 1);
			Для Каждого ЭлСтруктуры Из Данные Цикл
				ИмяИскомойОбласти = ЭлСтруктуры.Ключ + Координаты + Инд;
				Обл = ТабличныйДокумент.Области.Найти(ИмяИскомойОбласти);
				Если Обл <> Неопределено Тогда
					Обл.Значение = ЭлСтруктуры.Значение;
				КонецЕсли;
			КонецЦикла;
			
			// Добавление необходимого количества подчиненных доп. строк.
			ПодчВетка = ДеревоМнЧ.Строки[Инд_Число];
			ПодчКоординаты = Координаты + Инд;
			ВывестиМногострочныеДанныеВТабличныйДокумент(ПодчВетка, ПодчКоординаты);
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПереключательОтсутствияДанных(ИмяРаздела, ДанныеСтраницы)
	
	Если ИмяСтраницыВывода(ИмяРаздела) = "СтраницаОтчетаСПризнакомОтсутствияДанных" Тогда
		СтатусЗаполненияОтчета = ДанныеСтраницы.Параметры.СтатусЗаполнения;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ИмяСтраницыВывода(ИмяРаздела)
	
	ДеревоСтраниц = РеквизитФормыВЗначение("мДеревоСтраницОтчета");
	СтраницаОтчета = ДеревоСтраниц.Строки.Найти(ИмяРаздела, "ИмяСтраницы", Истина);
	ИмяСтраницыВывода = СтраницаОтчета.СтраницаВывода;
	
	Возврат ИмяСтраницыВывода;
	
КонецФункции

#КонецОбласти

#Область ДобавлениеУдалениеСтраницМногоуровневыхРазделов

&НаКлиенте
Процедура ДобавитьСтраницу(Команда)
	
	ИмяРаздела = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
	
	Если ИмяРаздела = "ОСВ"
	 ИЛИ ИмяРаздела = "ДенежныеСредства"
	 ИЛИ ИмяРаздела = "ЛизингОбязательства"
	 ИЛИ ИмяРаздела = "Баланс"
	 ИЛИ ИмяРаздела = "ОФР"
	 ИЛИ ИмяРаздела = "ОИК"
	 ИЛИ ИмяРаздела = "ОДДС"
	 ИЛИ ИмяРаздела = "ОЦИС"
	 ИЛИ ИмяРаздела = "ДополнительныеПоказатели"
	 ИЛИ ИмяРаздела = "ДоходыРасходы"
	 ИЛИ ИмяРаздела = "СтруктураВыручки"
	 ИЛИ ИмяРаздела = "ПрочиеПоказатели"
	 ИЛИ ИмяРаздела = "ДополнительныеФайлы" Тогда
		ДобавитьСтраницуУровня0(ИмяРаздела);
		
		Обл = ТабличныйДокумент.Области["УдалитьСтраницуЗначок"];
		Обл.Гиперссылка = Истина;
		Обл.Текст = "х";
		
		Обл = ТабличныйДокумент.Области["УдалитьСтраницу"];
		Обл.Гиперссылка = Истина;
		Обл.Текст = "Удалить страницу";
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьСтраницуУровня0(ИмяРаздела)
	
	ДеревоРаздела = ПолучитьИзВременногоХранилища(
		СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяРаздела]);
	
	// Нахождение строки в дереве значений, соответствующей текущей странице.
	ТекВетка = ДеревоРаздела.Строки[
		СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[0] - 1];
	// Помещение данных текущей страницы в структуры найденной строки.
	ДанныеТаблДокумента = ДанныеТабличногоДокумента(ИмяРаздела);
	ТекВетка.Данные = ДанныеТаблДокумента.Данные;
	ТекВетка.ДанныеМногострочныхЧастей = ДанныеТаблДокумента.ДанныеМногострочныхЧастей;
	ЗаполнитьЗначенияСвойств(ТекВетка.Параметры, НеотображаемыеПоказатели);
	
	// Добавление новой страницы.
	// (Добавляется строка в конец коллекции строк дерева значений.)
	НовВетка = ДеревоРаздела.Строки.Добавить();
	// Добавление разделов, подчиненных новой странице.
	СформироватьДанныеПодчиненныхРазделов(ИмяРаздела, НовВетка);
	
	НомерНовВетки = ДеревоРаздела.Строки.Количество();
	
	// Вывод и помещение начальных данных новой страницы
	// в структуры вновь добавленной строки дерева значений.
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(Отчеты[Сред(
		Лев(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, ".Форма.") - 1), 7)].ПолучитьМакет(Сред(
		ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + ИмяРаздела));
	ДанныеТаблДокумента = ДанныеТабличногоДокумента(ИмяРаздела);
	
	НовВетка.Данные = ДанныеТаблДокумента.Данные;
	НовВетка.ДанныеМногострочныхЧастей = ДанныеТаблДокумента.ДанныеМногострочныхЧастей;
	НовВетка.Параметры = ПараметрыСтраницыРазделаНовогоОтчета(ИмяРаздела);
	
	НеотображаемыеПоказатели = НовВетка.Параметры;
	
	// Сохранение изменений в дереве значений.
	СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяРаздела]
		= ПоместитьВоВременноеХранилище(ДеревоРаздела, УникальныйИдентификатор);
	
	ДеревоРаздела = Неопределено;
	
	СформироватьДеревоРазделовОтчетаНаСервере();
	
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[0] = НомерНовВетки;
	
	Для каждого ИскомыйРаздел Из РазделыОтчета.ПолучитьЭлементы() Цикл
		Если ИскомыйРаздел.КолонкаРазделыОтчетаСокрНаим = ИмяРаздела Тогда
			Для каждого НайденнаяСтраница Из ИскомыйРаздел.ПолучитьЭлементы() Цикл
				Если НайденнаяСтраница.КолонкаНомерСтраницыРазделаОтчета
					= СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[0] Тогда
					Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяСтраница.ПолучитьИдентификатор();
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтраницу(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("УдалитьСтраницуЗавершение", ЭтотОбъект);
	ТекстВопроса = НСтр("ru='Удалить текущую страницу?'");
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 60, КодВозвратаДиалога.Да);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтраницуЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	ИмяРаздела = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
	
	Если ИмяРаздела = "ОСВ"
	 ИЛИ ИмяРаздела = "Баланс"
	 ИЛИ ИмяРаздела = "ОФР"
	 ИЛИ ИмяРаздела = "ОИК"
	 ИЛИ ИмяРаздела = "ОДДС"
	 ИЛИ ИмяРаздела = "ОЦИС"
	 ИЛИ ИмяРаздела = "ДополнительныеПоказатели"
	 ИЛИ ИмяРаздела = "ДенежныеСредства"
	 ИЛИ ИмяРаздела = "ЛизингОбязательства"
	 ИЛИ ИмяРаздела = "ДоходыРасходы"
	 ИЛИ ИмяРаздела = "СтруктураВыручки"
	 ИЛИ ИмяРаздела = "ПрочиеПоказатели"
	 ИЛИ ИмяРаздела = "ДополнительныеФайлы" Тогда
		УдалитьСтраницуУровня0(ИмяРаздела);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьСтраницуУровня0(ИмяРаздела)
	
	ДеревоДанных = ПолучитьИзВременногоХранилища(
		СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяРаздела]);
	
	НомПоследнейСтраницы = ДеревоДанных.Строки.Количество();
	
	// Номер строки дерева значений, соответствующий номеру удаляемой страницы.
	НомУдаляемойСтраницы = СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[0];
	
	// Номер строки дерева значений, соответствующий номеру выводимой после удаления страницы.
	НомСтраницыПослеУдаления = ?(НомУдаляемойСтраницы = НомПоследнейСтраницы,
		НомУдаляемойСтраницы - 1, НомУдаляемойСтраницы);
	
	// Удаление страницы.
	ДеревоДанных.Строки.Удалить(НомУдаляемойСтраницы - 1);
	
	// Сохранение изменений в дереве значений.
	СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяРаздела]
		= ПоместитьВоВременноеХранилище(ДеревоДанных, УникальныйИдентификатор);
	
	ДеревоДанных = Неопределено;
	
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[0] = НомСтраницыПослеУдаления;
	
	// Вывод данных строки дерева значений после удаления страницы.
	ПоказатьРаздел(ИмяРаздела, СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела);
	
	СформироватьДеревоРазделовОтчетаНаСервере();
	
	Для Каждого ИскомыйРаздел Из РазделыОтчета.ПолучитьЭлементы() Цикл
		Если ИскомыйРаздел.КолонкаРазделыОтчетаСокрНаим = ИмяРаздела Тогда
			Для каждого НайденнаяСтраница Из ИскомыйРаздел.ПолучитьЭлементы() Цикл
				Если НайденнаяСтраница.КолонкаНомерСтраницыРазделаОтчета = НомСтраницыПослеУдаления Тогда
					Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяСтраница.ПолучитьИдентификатор();
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Модифицированность = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область ДобавлениеУдалениеДополнительныхСтрокМногострочныхЧастейМногоуровневыхРазделов

&НаКлиенте
Процедура ДобавитьСтроку(Команда)
	
	НаимТекРазделаОтчета = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
	
	Если НаимТекРазделаОтчета = "ДополнительныеФайлы" Тогда
		ДобавитьФайл();
		
	Иначе
		ВставитьДополнительнуюСтроку();
		ИмяРаздела = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
		УстановитьДоступностьОбластей(ЭтаФорма, ИмяРаздела);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВставитьДополнительнуюСтроку()
	
	ИмяРаздела = СтруктураРеквизитовФормы.НаимТекущегоРаздела;
	Если ИмяСтраницыВывода(ИмяРаздела) = "СтраницаОтчетаСПризнакомОтсутствияДанных" Тогда
		ЭлементОтображения = Элементы.ТабличныйДокументСПризнакомВеденияУчета;
	Иначе
		ЭлементОтображения = Элементы.ТабличныйДокумент;
	КонецЕсли;
	
	ИмяТекОбласти = ЭлементОтображения.ТекущаяОбласть.Имя;
	
	Если СтрНайти(ИмяТекОбласти, "ДобавитьСтроку") Тогда
		ИмяОбластиПреемника = СтрЗаменить(ИмяТекОбласти, "ДобавитьСтроку", "");
		ИмяОбластиПреемника = СтрЗаменить(ИмяОбластиПреемника, "Значок", "");
		ИмяГруппы = Лев(ИмяОбластиПреемника, СтруктураРеквизитовФормы.ДлинаИмениГруппы);
		ИмяОбластиПреемника = "ДобавлениеСтроки" + ИмяОбластиПреемника;
	Иначе
		ИмяГруппы = Лев(ИмяТекОбласти, СтруктураРеквизитовФормы.ДлинаИмениГруппы);
		ИмяГрафы = Лев(ИмяТекОбласти, СтруктураРеквизитовФормы.ДлинаИмениГрафы);
		МаксИнд = ИндексПоказателя(ИмяТекОбласти);
		Координаты = СтрокаСКоординатамиПоказателя(ИмяТекОбласти);
		Пока ТабличныйДокумент.Области.Найти(ИмяГрафы + Координаты + СтрокаСИндексомПоказателя(МаксИнд + 1)) <> Неопределено Цикл
			МаксИнд = МаксИнд + 1;
		КонецЦикла;
		ИмяОбластиПреемника = "ДобавлениеСтроки" + ИмяГруппы + Координаты + СтрокаСИндексомПоказателя(МаксИнд);
	КонецЕсли;
	
	Если СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей.Свойство(ИмяГруппы) Тогда
		ВставитьДопСтроку(ИмяГруппы, ИмяОбластиПреемника);
		СохранитьДанныеРаздела(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВставитьДопСтроку(Знач ИмяГруппы, Знач ИмяОбластиПреемника, ЭтоАвтоВставкаПодчиненнойМнЧ = Ложь)
	
	ИмяРаздела = СтруктураРеквизитовФормы.НаимТекущегоРаздела;
	Если ИмяСтраницыВывода(ИмяРаздела) = "СтраницаОтчетаСПризнакомОтсутствияДанных" Тогда
		ЭлементОтображения = Элементы.ТабличныйДокументСПризнакомВеденияУчета;
	Иначе
		ЭлементОтображения = Элементы.ТабличныйДокумент;
	КонецЕсли;
	
	НачИндекс = "_1";
	
	Если СтрНайти(ИмяОбластиПреемника, "ДобавлениеСтроки" + ИмяГруппы) > 0 Тогда
		ИскомаяОбласть = ТабличныйДокумент.Области.Найти("МногострочнаяЧасть" + ИмяГруппы);
		
		ВремТаблДок = ТабличныйДокумент.ПолучитьОбласть(ИскомаяОбласть.Имя);
		ВставляемаяОбласть = ВремТаблДок.Область(ИскомаяОбласть.Имя);
		ВставляемаяОбласть.Имя = "";
		
		НовКоординаты = СтрокаСКоординатамиПоказателя(ИмяОбластиПреемника);
		
		КолУровнейПодчиненности = СтрЧислоВхождений(НовКоординаты, "_");
		НачКоординаты = "";
		Для НомУр = 1 По КолУровнейПодчиненности Цикл
			НачКоординаты = НачКоординаты + НачИндекс;
		КонецЦикла;
		
		ПреИндекс_Число = ИндексПоказателя(ИмяОбластиПреемника);
		НовИндекс_Число = ?(ЭтоАвтоВставкаПодчиненнойМнЧ, 1, ПреИндекс_Число + 1);
		
		ПреИндекс = СтрокаСИндексомПоказателя(ПреИндекс_Число);
		НовИндекс = СтрокаСИндексомПоказателя(НовИндекс_Число);
		
		НачПостфикс = ИмяГруппы + НачКоординаты + НачИндекс;
		ПреПостфикс = ИмяГруппы + НовКоординаты + ПреИндекс;
		НовПостфикс = ИмяГруппы + НовКоординаты + НовИндекс;
		
		МассивИменГраф = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппы]["ИменаГраф"];
		
		Для каждого ИмяГрафы Из МассивИменГраф Цикл
			
			НачИмяОбл = ИмяГрафы + НачКоординаты + НачИндекс;
			НовИмяОбл = ИмяГрафы + НовКоординаты + НовИндекс;
			
			ОбластьЯчейки = ВремТаблДок.Области[НачИмяОбл];
			ОбластьЯчейки.Имя = НовИмяОбл;
			
			Если ОбластьЯчейки.СодержитЗначение = Истина Тогда
				ОбластьЯчейки.Очистить();
			КонецЕсли;
			
		КонецЦикла;
		
		Обл = ВремТаблДок.Области.Найти("УдалитьСтроку" + НачПостфикс);
		Если Обл <> Неопределено Тогда
			Обл.Имя = "УдалитьСтроку" + НовПостфикс;
		КонецЕсли;
		
		Если ЭтоАвтоВставкаПодчиненнойМнЧ Тогда
			Обл = ВремТаблДок.Области.Найти("УдалитьСтроку" + НовПостфикс);
			Если Обл <> Неопределено Тогда
				Обл.Гиперссылка = Ложь;
				Обл.Текст = "";
			КонецЕсли;
		Иначе
			Обл = ВремТаблДок.Области.Найти("УдалитьСтроку" + НовПостфикс);
			Если Обл <> Неопределено Тогда
				Обл.Гиперссылка = Истина;
				Обл.Текст = "х";
				Если НовИндекс_Число = 2 Тогда
					Если Обл <> Неопределено Тогда
						Обл = ТабличныйДокумент.Области.Найти("УдалитьСтроку" + ПреПостфикс);
						Обл.Гиперссылка = Истина;
						Обл.Текст = "х";
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Обл = ТабличныйДокумент.Области.Найти("ДобавитьСтроку" + ПреПостфикс);
		Если Обл <> Неопределено Тогда
			Обл.Имя = "ДобавитьСтроку" + НовПостфикс;
		КонецЕсли;
		Обл = ТабличныйДокумент.Области.Найти("ДобавитьСтрокуЗначок" + ПреПостфикс);
		Если Обл <> Неопределено Тогда
			Обл.Имя = "ДобавитьСтрокуЗначок" + НовПостфикс;
		КонецЕсли;
		
		ОблПреемник = ТабличныйДокумент.Области.Найти(ИмяОбластиПреемника);
		ОблПреемник.Имя = "ДобавлениеСтроки" + НовПостфикс;
		
		// Изменения в оформлении ячеек: установка значения "НетЛинии"/"Сплошная" для
		// свойства "ГраницаСнизу" (в случае задания номеров специальных колонок):
		НомераСпецКолонок = Неопределено;
		СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппы].Свойство(
			"КолонкиСИзмНижнГраницей", НомераСпецКолонок);
		Если НомераСпецКолонок <> Неопределено Тогда
			Для каждого НомКолонки Из НомераСпецКолонок Цикл
				// Удаление линии в определенных колонках последней (до добавления) строки.
				Если НЕ ЭтоАвтоВставкаПодчиненнойМнЧ Тогда
					Обл = ТабличныйДокумент.Область(
						ОблПреемник.Верх - 1, НомКолонки, ОблПреемник.Верх - 1, НомКолонки);
					Если Обл <> Неопределено Тогда
						Обл.ГраницаСнизу = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.НетЛинии);
					КонецЕсли;
				КонецЕсли;
				// Установка линии в определенных колонках добавляемой строки.
				Обл = ВремТаблДок.Область(
					ВставляемаяОбласть.Низ, НомКолонки, ВставляемаяОбласть.Низ, НомКолонки);
				Если Обл <> Неопределено Тогда
					Обл.ГраницаСнизу = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		ОблПреемник_ = ТабличныйДокумент.Область(
			ОблПреемник.Верх, , ОблПреемник.Верх + ИскомаяОбласть.Низ - ИскомаяОбласть.Верх, );
		ТабличныйДокумент.ВставитьОбласть(
			ВставляемаяОбласть, ОблПреемник_, ТипСмещенияТабличногоДокумента.ПоВертикали);
		
		Если НЕ ЭтоАвтоВставкаПодчиненнойМнЧ Тогда
			// Установка текущей области после добавления строки.
			НовИмяТекОбл = МассивИменГраф[0] + НовКоординаты + НовИндекс;
			НовТекОбл = ТабличныйДокумент.Области[НовИмяТекОбл];
			ЭлементОтображения.ТекущаяОбласть = НовТекОбл;
		КонецЕсли;
		
	КонецЕсли;
	
	ИменаПодчиненныхГрупп = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[
		ИмяГруппы]["ИменаПодчиненныхГрупп"];
	Для каждого ИмяПодчГруппы Из ИменаПодчиненныхГрупп Цикл
		НовКоординатыДляПодчОбласти = НовКоординаты + НовИндекс;
		
		КолУровнейПодчиненности = СтрЧислоВхождений(НовКоординатыДляПодчОбласти, "_");
		НачКоординатыДляПодчОбласти = "";
		Для НомУр = 1 По КолУровнейПодчиненности Цикл
			НачКоординатыДляПодчОбласти = НачКоординатыДляПодчОбласти + НачИндекс;
		КонецЦикла;
		
		НачИндВставляемойОбласти = НачИндекс;
		
		ИскомаяОбласть = ТабличныйДокумент.Области.Найти(
			"ДобавлениеСтроки" + ИмяПодчГруппы + НачКоординатыДляПодчОбласти + НачИндВставляемойОбласти);
		
		Если ИскомаяОбласть = Неопределено Тогда
			НачИндВставляемойОбласти = 1;
			Пока ТабличныйДокумент.Области.Найти("ДобавлениеСтроки" + ИмяПодчГруппы
				+ НачКоординатыДляПодчОбласти + "_" + Формат(НачИндВставляемойОбласти, "ЧГ=")) = Неопределено Цикл
				НачИндВставляемойОбласти = НачИндВставляемойОбласти + 1;
			КонецЦикла;
			НачИндВставляемойОбласти = "_" + Формат(НачИндВставляемойОбласти, "ЧГ=");
			ИскомаяОбласть = ТабличныйДокумент.Области.Найти(
				"ДобавлениеСтроки" + ИмяПодчГруппы + НачКоординатыДляПодчОбласти + НачИндВставляемойОбласти);
		КонецЕсли;
		
		ВремТабличныйДокумент = ТабличныйДокумент.ПолучитьОбласть(ИскомаяОбласть.Имя);
		ВставляемаяОбласть = ВремТабличныйДокумент.Область(ИскомаяОбласть.Имя);
		Для каждого ОбластьЯчейки Из ВремТабличныйДокумент.Области Цикл
			ОбластьЯчейки.Имя = СтрЗаменить(ОбластьЯчейки.Имя,
				ИмяПодчГруппы + НачКоординатыДляПодчОбласти + НачИндВставляемойОбласти,
				ИмяПодчГруппы + НовКоординатыДляПодчОбласти + НачИндекс);
		КонецЦикла;
		ИмяОбластиПреемникаДляПодчОбласти = СтрЗаменить(ИмяОбластиПреемника, ПреПостфикс, НовПостфикс);
		ОбластьПреемник = ТабличныйДокумент.Области.Найти(ИмяОбластиПреемникаДляПодчОбласти);
		
		ТабличныйДокумент.ВставитьОбласть(ВставляемаяОбласть, ОбластьПреемник, ТипСмещенияТабличногоДокумента.ПоВертикали);
		
		ИмяОбластиПреемникаДляПодчОбласти = "ДобавлениеСтроки" + ИмяПодчГруппы + НовКоординатыДляПодчОбласти + НачИндекс;
		
		ВставитьДопСтроку(ИмяПодчГруппы, ИмяОбластиПреемникаДляПодчОбласти, Истина);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтроку(Команда)
	
	ИмяРаздела = СтруктураРеквизитовФормы.НаимТекущегоРаздела;
	Если ИмяСтраницыВывода(ИмяРаздела) = "СтраницаОтчетаСПризнакомОтсутствияДанных" Тогда
		ЭлементОтображения = Элементы.ТабличныйДокументСПризнакомВеденияУчета;
	Иначе
		ЭлементОтображения = Элементы.ТабличныйДокумент;
	КонецЕсли;
	
	ИмяТекОбласти = ЭлементОтображения.ТекущаяОбласть.Имя;
	ИмяТекОбласти = СтрЗаменить(ИмяТекОбласти, "УдалитьСтроку", "");
	
	ИмяГруппы = Лев(ИмяТекОбласти, СтруктураРеквизитовФормы.ДлинаИмениГруппы);
	
	Если НЕ СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей.Свойство(ИмяГруппы) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Не выбрана удаляемая строка многострочного раздела.'");
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("УдалитьСтрокуЗавершение", ЭтотОбъект);
	
	ДопТекст = ДополнительныйТекстПриДобавленииУдаленииСтрок(ИмяГруппы);
	Если ДопТекст <> Неопределено Тогда
		ТекстВопроса = ДопТекст.ТекстВопросаПередУдалениемСтроки;
	Иначе
		ТекстВопроса = НСтр("ru='Удалить выбранную строку?'");
	КонецЕсли;
	
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	
КонецПроцедуры

&НаКлиенте
Функция ДополнительныйТекстПриДобавленииУдаленииСтрок(Знач ИмяГруппы)
	
	Если НЕ ЗначениеЗаполнено(ИмяГруппы) Тогда
		Возврат Неопределено;
	ИначеЕсли НЕ СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей.Свойство(ИмяГруппы) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ИмяГруппы = СтруктураРеквизитовФормы.мИдГруппы11М1 Тогда
		Подстрока = "файл";
		ТекстВопроса = НСтр("ru='Удалить выбранный файл?'");
		
	Иначе
		Подстрока = "строку";
		ТекстВопроса = НСтр("ru='Удалить выбранную строку?'");
		
	КонецЕсли;
	
	ДопТекст = Новый Структура;
	ДопТекст.Вставить("ЗаголовокКонтекстногоМенюДобавитьСтроку", "Добавить " + Подстрока);
	ДопТекст.Вставить("ЗаголовокКонтекстногоМенюУдалитьСтроку", "Удалить " + Подстрока);
	ДопТекст.Вставить("ТекстВопросаПередУдалениемСтроки", ТекстВопроса);
	
	Возврат ДопТекст;
	
КонецФункции

&НаКлиенте
Процедура УдалитьСтрокуЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	УдалитьДопСтрокуНаСервере();
	
	ИмяРаздела = СтруктураРеквизитовФормы.НаимТекущегоРаздела;
	
	Если ИмяРаздела = "ФинансовыеВложенияКраткосрочные" Тогда
		РасчитатьПоказатели_ФинансовыеВложенияКраткосрочные();
		
	ИначеЕсли ИмяРаздела = "ФинансовыеВложенияДолгосрочные" Тогда
		РасчитатьПоказатели_ФинансовыеВложенияДолгосрочные();
		
	ИначеЕсли ИмяРаздела = "СтруктураВыручки" Тогда
		РасчитатьПоказатели_СтруктураВыручки();
		
	ИначеЕсли ИмяРаздела = "ДополнительныеФайлы" Тогда
		РасчитатьПоказатели_ДополнительныеФайлы();
		
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьДопСтрокуНаСервере()
	
	ИмяРаздела = СтруктураРеквизитовФормы.НаимТекущегоРаздела;
	Если ИмяСтраницыВывода(ИмяРаздела) = "СтраницаОтчетаСПризнакомОтсутствияДанных" Тогда
		ЭлементОтображения = Элементы.ТабличныйДокументСПризнакомВеденияУчета;
	Иначе
		ЭлементОтображения = Элементы.ТабличныйДокумент;
	КонецЕсли;
	
	ИмяТекОбласти = ЭлементОтображения.ТекущаяОбласть.Имя;
	
	УдалитьДопСтроку(ИмяТекОбласти);
	
	СохранитьДанныеРаздела(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
КонецПроцедуры

&НаСервере
Процедура УдалитьДопСтроку(ИмяОбласти)
	
	ИмяРаздела = СтруктураРеквизитовФормы.НаимТекущегоРаздела;
	Если ИмяСтраницыВывода(ИмяРаздела) = "СтраницаОтчетаСПризнакомОтсутствияДанных" Тогда
		ЭлементОтображения = Элементы.ТабличныйДокументСПризнакомВеденияУчета;
	Иначе
		ЭлементОтображения = Элементы.ТабличныйДокумент;
	КонецЕсли;
	
	ИмяГруппы = СтрЗаменить(ИмяОбласти, "УдалитьСтроку", "");
	ИмяГруппы = Лев(ИмяГруппы, СтруктураРеквизитовФормы.ДлинаИмениГруппы);
	
	ТекКоординаты = СтрокаСКоординатамиПоказателя(ИмяОбласти);
	
	ТекИндекс_Число = ИндексПоказателя(ИмяОбласти);
	ТекИндекс = СтрокаСИндексомПоказателя(ТекИндекс_Число);
	ТекПостфикс = ИмяГруппы + ТекКоординаты + ТекИндекс;
	
	МассивИменГраф = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппы]["ИменаГраф"];
	
	// Удаление описания дополнительного файла.
	Если ИмяГруппы = СтруктураРеквизитовФормы.мИдГруппы11М1 Тогда
		СтруктураРеквизитовФормы.ДополнительныеФайлы.Удалить(ТекИндекс_Число - 1);
		
		Если СтруктураРеквизитовФормы.ДополнительныеФайлы.Количество() = 0 Тогда
			// Особый сценарий удаления последней строки дополнительных файлов.
			Обл = ТабличныйДокумент.Область("УдалитьСтроку" + ИмяГруппы + "_1");
			Обл.Гиперссылка = Ложь;
			Обл.Текст = "";
			
			Для Каждого ИмяГрафы Из МассивИменГраф Цикл
				Обл = ТабличныйДокумент.Область(ИмяГрафы + "_1");
				Обл.Очистить();
			КонецЦикла;
			
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ИмяПервойГрафы = МассивИменГраф[0];
	
	ОблПервУдаляемогоПоказателя = ТабличныйДокумент.Область(ИмяПервойГрафы + ТекКоординаты + ТекИндекс);
	ОблУдалитьСтроку = ТабличныйДокумент.Область("УдалитьСтроку" + ИмяГруппы + ТекКоординаты + ТекИндекс);
	СмещениеОтВерхаМнЧ = ОблПервУдаляемогоПоказателя.Верх - ОблУдалитьСтроку.Верх;
	
	ОблДобавлениеСтроки = ТабличныйДокумент.Области.Найти("ДобавлениеСтроки" + ТекПостфикс);
	
	Если ОблДобавлениеСтроки <> Неопределено Тогда
		// Удаляется последняя строка.
		ПреИндекс_Число = ТекИндекс_Число - 1;
		ПреИндекс = СтрокаСИндексомПоказателя(ПреИндекс_Число);
		ПреПостфикс = ИмяГруппы + ТекКоординаты + ПреИндекс;
		
		ВерхУдОбласти = ОблПервУдаляемогоПоказателя.Верх - СмещениеОтВерхаМнЧ;
		НизУдОбласти  = ОблДобавлениеСтроки.Верх - 1;
		
		УдаляемаяОбласть = ТабличныйДокумент.Область(ВерхУдОбласти, , НизУдОбласти, );
		ТабличныйДокумент.УдалитьОбласть(УдаляемаяОбласть, ТипСмещенияТабличногоДокумента.ПоВертикали);
		
		Обл = ТабличныйДокумент.Области.Найти("ДобавлениеСтроки" + ТекПостфикс);
		Обл.Имя = "ДобавлениеСтроки" + ПреПостфикс;
		Обл = ТабличныйДокумент.Области.Найти("ДобавитьСтроку" + ТекПостфикс);
		Обл.Имя = "ДобавитьСтроку" + ПреПостфикс;
		Обл = ТабличныйДокумент.Области.Найти("ДобавитьСтрокуЗначок" + ТекПостфикс);
		Обл.Имя = "ДобавитьСтрокуЗначок" + ПреПостфикс;
		
		Если ПреИндекс_Число = 1 Тогда
			Обл = ТабличныйДокумент.Область("УдалитьСтроку" + ПреПостфикс);
			Обл.Гиперссылка = Ложь;
			Обл.Текст = "";
		КонецЕсли;
		
		// Изменения в оформлении ячеек в случае задания номеров специальных колонок.
		НомераСпецКолонок = Неопределено;
		СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппы].Свойство(
			"КолонкиСИзмНижнГраницей", НомераСпецКолонок);
		Если НомераСпецКолонок <> Неопределено Тогда
			Для каждого НомКолонки Из НомераСпецКолонок Цикл
				// Установка линии в определенных колонках последней (после удаления) строки.
				Обл = ТабличныйДокумент.Область(
					ВерхУдОбласти - 1, НомКолонки, ВерхУдОбласти - 1, НомКолонки);
				Если Обл <> Неопределено Тогда
					Обл.ГраницаСнизу = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		НовИмяТекОбл = ИмяПервойГрафы + ТекКоординаты + ПреИндекс;
		ЭлементОтображения.ТекущаяОбласть = ТабличныйДокумент.Области[НовИмяТекОбл];
		
	Иначе
		// Удаляемая строка не последняя.
		НовИндекс_Число = ТекИндекс_Число + 1;
		НовИндекс = СтрокаСИндексомПоказателя(НовИндекс_Число);
		
		ОблСледующегоПоказателя = ТабличныйДокумент.Область(ИмяПервойГрафы + ТекКоординаты + НовИндекс);
		
		ВерхУдОбласти = ОблПервУдаляемогоПоказателя.Верх - СмещениеОтВерхаМнЧ;
		НизУдОбласти  = ОблСледующегоПоказателя.Верх - СмещениеОтВерхаМнЧ - 1;
		
		УдаляемаяОбласть = ТабличныйДокумент.Область(ВерхУдОбласти, , НизУдОбласти, );
		
		// Сохранение свойств "эталонных" областей для последующего восстановления.
		СпОбластейДляВосстановленияПослеУдаления = Новый СписокЗначений;
		ВремТаблДок = ТабличныйДокумент.ПолучитьОбласть(УдаляемаяОбласть.Имя);
		Для каждого ЭлемСтруктуры Из СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей Цикл
			ИмяИскомойобласти = "МногострочнаяЧасть" + ЭлемСтруктуры.Ключ;
			Искомаяобласть = ВремТаблДок.Области.Найти(ИмяИскомойобласти);
			Если Искомаяобласть <> Неопределено Тогда
				ВысотаОбл = Искомаяобласть.Низ - Искомаяобласть.Верх + 1;
				СпОбластейДляВосстановленияПослеУдаления.Добавить(ВысотаОбл, ЭлемСтруктуры.Ключ);
			КонецЕсли;
		КонецЦикла;
		
		ТабличныйДокумент.УдалитьОбласть(УдаляемаяОбласть, ТипСмещенияТабличногоДокумента.ПоВертикали);
		
		НовИндекс_Число = ТекИндекс_Число;
		
		// Реиндексация имен областей текущей многострочной части после удаления строки.
		Пока ТабличныйДокумент.Области.Найти(ИмяПервойГрафы + ТекКоординаты
			+ СтрокаСИндексомПоказателя(НовИндекс_Число + 1)) <> Неопределено Цикл
			
			ПреИндекс = СтрокаСИндексомПоказателя(НовИндекс_Число + 1);
			НовИндекс = СтрокаСИндексомПоказателя(НовИндекс_Число);
			
			Для каждого ИмяГрафы Из МассивИменГраф Цикл
				ПреИмяОбл = ИмяГрафы + ТекКоординаты + ПреИндекс;
				НовИмяОбл = ИмяГрафы + ТекКоординаты + НовИндекс;
				
				ОбластьЯчейки = ТабличныйДокумент.Области[ПреИмяОбл];
				ОбластьЯчейки.Имя = НовИмяОбл;
			КонецЦикла;
			
			ПреПостфикс = ИмяГруппы + ТекКоординаты + ПреИндекс;
			НовПостфикс = ИмяГруппы + ТекКоординаты + НовИндекс;
			
			Обл = ТабличныйДокумент.Области.Найти("УдалитьСтроку" + ПреПостфикс);
			Обл.Имя = "УдалитьСтроку" + НовПостфикс;
			
			// Обновление координат в именах областей подчиненных многострочных частей.
			ИменаПодчиненныхГрупп = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[
				ИмяГруппы]["ИменаПодчиненныхГрупп"];
			Для каждого ИмяПодчГруппы Из ИменаПодчиненныхГрупп Цикл
				ПарамРеинд = Новый Структура("ИмяГруппы,ПреКоординаты,НовКоординаты",
					ИмяПодчГруппы, ТекКоординаты + ПреИндекс, ТекКоординаты + НовИндекс);
				РеиндексироватьПодчиненныеДопСтроки(ПарамРеинд);
			КонецЦикла;
			
			НовИндекс_Число = НовИндекс_Число + 1;
			
		КонецЦикла;
		
		ПреИндекс = СтрокаСИндексомПоказателя(НовИндекс_Число);
		НовИндекс = СтрокаСИндексомПоказателя(НовИндекс_Число - 1);
		
		ПреПостфикс = ИмяГруппы + ТекКоординаты + ПреИндекс;
		НовПостфикс = ИмяГруппы + ТекКоординаты + НовИндекс;
		
		Обл = ТабличныйДокумент.Области.Найти("ДобавлениеСтроки" + ПреПостфикс);
		Обл.Имя = "ДобавлениеСтроки" + НовПостфикс;
		Обл = ТабличныйДокумент.Области.Найти("ДобавитьСтроку" + ПреПостфикс);
		Обл.Имя = "ДобавитьСтроку" + НовПостфикс;
		Обл = ТабличныйДокумент.Области.Найти("ДобавитьСтрокуЗначок" + ПреПостфикс);
		Обл.Имя = "ДобавитьСтрокуЗначок" + НовПостфикс;
		
		// Восстановление удаленных "эталонных" областей по предварительно сохраненным свойствам.
		НачИндекс = "_1";
		Для каждого ЭлемСписка Из СпОбластейДляВосстановленияПослеУдаления Цикл
			НачКоординаты = "";
			УровеньПодчиненияГруппы = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[
				ЭлемСписка.Представление]["УровеньПодчинения"];
			
			Для НомУр = 1 По УровеньПодчиненияГруппы Цикл
				НачКоординаты = НачКоординаты + НачИндекс;
			КонецЦикла;
			
			ИмяГрафыДляПозиционирования = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[
				ЭлемСписка.Представление]["ИменаГраф"][0];
			
			ИмяОбластиДляПозиционирования = ИмяГрафыДляПозиционирования + НачКоординаты + НачИндекс;
			ОбластьДляПозиционирования = ТабличныйДокумент.Область(ИмяОбластиДляПозиционирования);
			
			Если ЭлемСписка.Представление = ИмяГруппы Тогда
				ВосстОбластьВерх = ОбластьДляПозиционирования.Верх - СмещениеОтВерхаМнЧ;
			Иначе
				ВосстОбластьВерх = ОбластьДляПозиционирования.Верх;
			КонецЕсли;
			ВосстОбластьНиз  = ВосстОбластьВерх + ЭлемСписка.Значение - 1;
			
			ВосстОбласть = ТабличныйДокумент.Область(ВосстОбластьВерх, , ВосстОбластьНиз, );
			ВосстОбласть.Имя = "МногострочнаяЧасть" + ЭлемСписка.Представление;
		КонецЦикла;
		
		// После удаления осталась единственная строка.
		Если НовИндекс = НачИндекс Тогда
			ЭтоОдинокаяСтрокаДопФайла = (ИмяГруппы = СтруктураРеквизитовФормы.мИдГруппы11М1)
			                          И СтруктураРеквизитовФормы.ДополнительныеФайлы.Количество() = 1;
			Если НЕ ЭтоОдинокаяСтрокаДопФайла Тогда
				Обл = ТабличныйДокумент.Область("УдалитьСтроку" + НовПостфикс);
				Обл.Гиперссылка = Ложь;
				Обл.Текст = "";
			КонецЕсли;
			
		КонецЕсли;
		
		НовИмяТекОбл = ИмяПервойГрафы + ТекКоординаты + ТекИндекс;
		ЭлементОтображения.ТекущаяОбласть = ТабличныйДокумент.Области[НовИмяТекОбл];
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура РеиндексироватьПодчиненныеДопСтроки(ПараметрыРеиндексации)
	
	ИмяГруппы = ПараметрыРеиндексации["ИмяГруппы"];
	ПреКоординаты = ПараметрыРеиндексации["ПреКоординаты"];
	НовКоординаты = ПараметрыРеиндексации["НовКоординаты"];
	
	МассивИменГраф = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппы]["ИменаГраф"];
	ИмяПервойГрафы = МассивИменГраф[0];
	
	Инд_Число = 1;
	Пока ТабличныйДокумент.Области.Найти(ИмяПервойГрафы
		+ ПреКоординаты + СтрокаСИндексомПоказателя(Инд_Число)) <> Неопределено Цикл
		
		Инд = СтрокаСИндексомПоказателя(Инд_Число);
		
		Для каждого ИмяГрафы Из МассивИменГраф Цикл
			ПреИмяОбл = ИмяГрафы + ПреКоординаты + Инд;
			НовИмяОбл = ИмяГрафы + НовКоординаты + Инд;
			
			ОбластьЯчейки = ТабличныйДокумент.Области[ПреИмяОбл];
			ОбластьЯчейки.Имя = НовИмяОбл;
		КонецЦикла;
		
		ПреПостфикс = ИмяГруппы + ПреКоординаты + Инд;
		НовПостфикс = ИмяГруппы + НовКоординаты + Инд;
		
		Обл = ТабличныйДокумент.Области.Найти("УдалитьСтроку" + ПреПостфикс);
		Обл.Имя = "УдалитьСтроку" + НовПостфикс;
		
		ИменаПодчиненныхГрупп = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппы]["ИменаПодчиненныхГрупп"];
		Для каждого ИмяПодчГруппы Из ИменаПодчиненныхГрупп Цикл
			ПарамРеинд = Новый Структура("ИмяГруппы,ПреКоординаты,НовКоординаты",
				ИмяПодчГруппы, ПреКоординаты + Инд, НовКоординаты + Инд);
			РеиндексироватьПодчиненныеДопСтроки(ПарамРеинд);
		КонецЦикла;
		
		Инд_Число = Инд_Число + 1;
		
	КонецЦикла;
	
	Инд = СтрокаСИндексомПоказателя(Инд_Число - 1);
	
	ПреПостфикс = ИмяГруппы + ПреКоординаты + Инд;
	НовПостфикс = ИмяГруппы + НовКоординаты + Инд;
	
	Обл = ТабличныйДокумент.Области.Найти("ДобавлениеСтроки" + ПреПостфикс);
	Обл.Имя = "ДобавлениеСтроки" + НовПостфикс;
	Обл = ТабличныйДокумент.Области.Найти("ДобавитьСтроку" + ПреПостфикс);
	Обл.Имя = "ДобавитьСтроку" + НовПостфикс;
	Обл = ТабличныйДокумент.Области.Найти("ДобавитьСтрокуЗначок" + ПреПостфикс);
	Обл.Имя = "ДобавитьСтрокуЗначок" + НовПостфикс;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ИндексПоказателя(Знач ИмяОбласти)
	
	МассивСтрок = СтрРазделить(ИмяОбласти, "_");
	
	КолСтрок = МассивСтрок.Количество();
	
	Если КолСтрок = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ИндексСтрока = МассивСтрок[КолСтрок - 1];
	Если СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(ИндексСтрока) Тогда
		Возврат Число(ИндексСтрока);
	КонецЕсли;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СтрокаСИндексомПоказателя(Знач Индекс)
	
	Если ТипЗнч(Индекс) <> Тип("Число") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат "_" + Формат(Индекс, "ЧГ=");
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СтрокаСКоординатамиПоказателя(Знач Координаты)
	
	СтрокаСКоординатами = "";
	
	Если ТипЗнч(Координаты) = Тип("Массив") Тогда
		Для каждого КоординатаЧисло Из Координаты Цикл
			Если ТипЗнч(КоординатаЧисло) <> Тип("Число") Тогда
				Возврат Неопределено;
			КонецЕсли;
			СтрокаСКоординатами = СтрокаСКоординатами + "_" + Формат(КоординатаЧисло, "ЧГ=");
		КонецЦикла;
	ИначеЕсли ТипЗнч(Координаты) = Тип("Строка") Тогда
		МассивСтрок = СтрРазделить(Координаты, "_");
		КолСтрок = МассивСтрок.Количество();
		Если КолСтрок = 0 Тогда
			Возврат Неопределено;
		КонецЕсли;
		МассивСтрок.Удалить(КолСтрок - 1);
		МассивСтрок.Удалить(0);
		Для каждого КоординатаСтрока Из МассивСтрок Цикл
			Если СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(КоординатаСтрока) Тогда
				СтрокаСКоординатами = СтрокаСКоординатами + "_" + Формат(КоординатаСтрока, "ЧГ=");
			Иначе
				Возврат Неопределено;
			КонецЕсли;
		КонецЦикла;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат СтрокаСКоординатами;
	
КонецФункции

#КонецОбласти

#Область ДобавлениеУдалениеДополнительныхФайлов

&НаКлиенте
Процедура ДобавитьФайл()
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ДобавитьФайлЗавершение", ЭтаФорма);
	
	ЗаголовокВыбора = НСтр("ru='Выберите файл для отправки в банк'");
	ОграничениеПоРасширению = "*.pdf, *.xls, *.xlsx, *.doc, *.docx, *.jpg";
	
	ОписаниеФильтра = НСтр("ru='Файл для отправки в банк'");
	МаскаВыбора = СтрЗаменить(ОграничениеПоРасширению, ",", ";");
	МаскаВыбора = СтрЗаменить(МаскаВыбора, " ", "");
	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогВыбораФайла.МножественныйВыбор = Ложь;
	ДиалогВыбораФайла.Заголовок = ЗаголовокВыбора;
	ДиалогВыбораФайла.Фильтр = ОписаниеФильтра + " (" + ОграничениеПоРасширению + ")|" + МаскаВыбора;
	
	НачатьПомещениеФайлов(ОписаниеОповещения, , ДиалогВыбораФайла, Истина, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьФайлЗавершение(ПомещенныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ПомещенныеФайлы <> Неопределено Тогда
		Если НЕ ДобавитьФайлНаСервере(ПомещенныеФайлы[0]) Тогда
			Сообщение = Новый СообщениеПользователю;
			СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Размер файла превышает %1 Мб. Приложите файл меньшего размера'"), 5);
			Сообщение.Текст = СтрокаСообщения;
			Сообщение.Сообщить();
			
		Иначе
			РасчитатьПоказатели_ДополнительныеФайлы();
			Модифицированность = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ДобавитьФайлНаСервере(ОписаниеФайла)
	
	ИмяРаздела = СтруктураРеквизитовФормы.НаимТекущегоРаздела;
	НомерСтраницыРаздела = СтруктураРеквизитовФормы.НомерСтраницыТекущегоРаздела;
	
	ПолноеИмяФайла = ОписаниеФайла.Имя;
	АдресХранения = ОписаниеФайла.Хранение;
	РазмерФайла = ПолучитьИзВременногоХранилища(АдресХранения).Размер();
	
	Если РазмерФайла > 5 * Мебибайт() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	СохранитьДанныеРаздела(ИмяРаздела);
	
	ЭлементыИмениФайла = ОбщегоНазначенияКлиентСервер.РазложитьПолноеИмяФайла(ПолноеИмяФайла);
	
	ПолноеОписаниеФайла = ПолноеОписаниеФайла(ЭлементыИмениФайла.Имя, АдресХранения, РазмерФайла);
	
	СтруктураРеквизитовФормы.ДополнительныеФайлы.Добавить(ПолноеОписаниеФайла);
	
	ДеревоДанныхРаздела = ПолучитьИзВременногоХранилища(
		СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяРаздела]);
	МногострочнаяЧасть = ДеревоДанныхРаздела.Строки[0].ДанныеМногострочныхЧастей.П00011М1.Строки;
	СформироватьМСЧДополнительныхФайлов(МногострочнаяЧасть);
	
	ПоказатьРаздел(ИмяРаздела, НомерСтраницыРаздела);
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция ПолноеОписаниеФайла(ИмяФайла, АдресХранения, РазмерФайла, Знач ДатаДобавления = Неопределено)
	
	Если НЕ ЗначениеЗаполнено(ДатаДобавления) Тогда
		ДатаДобавления = ТекущаяДатаСеанса();
	КонецЕсли;
	
	Описание = Новый Структура;
	
	Описание.Вставить("ИмяФайла", ИмяФайла);
	Описание.Вставить("АдресХранения", АдресХранения);
	Описание.Вставить("РазмерФайла", РазмерФайла);
	Описание.Вставить("ДатаДобавления", ДатаДобавления);
	
	Возврат Описание;
	
КонецФункции

&НаСервере
Процедура СформироватьМСЧДополнительныхФайлов(МногострочнаяЧасть)
	
	МногострочнаяЧасть.Очистить();
	
	Для Каждого ОписаниеФайла Из СтруктураРеквизитовФормы.ДополнительныеФайлы Цикл
		НоваяСтрокаМСЧ = МногострочнаяЧасть.Добавить();
		НоваяСтрокаМСЧ.Данные = Новый Структура("П00011М100101, П00011М100102");
		НоваяСтрокаМСЧ.Данные.П00011М100101 = ОписаниеФайла.ИмяФайла;
		НоваяСтрокаМСЧ.Данные.П00011М100102 = Окр(ОписаниеФайла.РазмерФайла / 1024);
		
		НоваяСтрокаМСЧ.ДанныеМногострочныхЧастей = Новый Структура;
		
	КонецЦикла;
	
	Если МногострочнаяЧасть.Количество() = 0 Тогда
		НоваяСтрокаМСЧ = МногострочнаяЧасть.Добавить();
		НоваяСтрокаМСЧ.Данные = Новый Структура("П00011М100101, П00011М100102");
		НоваяСтрокаМСЧ.Данные.П00011М100101 = "";
		НоваяСтрокаМСЧ.Данные.П00011М100102 = 0;
		
		НоваяСтрокаМСЧ.ДанныеМногострочныхЧастей = Новый Структура;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьОткрытьТипизированныйФайл(ИмяОбласти)
	
	ТипФайла = ТипФайлаПоИмениОбласти(ИмяОбласти);
	
	Если ЗначениеЗаполнено(ТипФайла) Тогда
		ХранилищеОписания = СтруктураРеквизитовФормы.ДополнительныеТипизированныеФайлы[ТипФайла];
		
		Если ЗначениеЗаполнено(ХранилищеОписания.Адрес) Тогда
			Попытка
				ПолучитьФайл(ХранилищеОписания.Адрес, ХранилищеОписания.Имя, Истина);
				
			Исключение
				ШаблонСообщения = НСтр("ru = 'При выгрузке файла возникла ошибка.
					|%1'");
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					ШаблонСообщения, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
				ПоказатьПредупреждение(, ТекстСообщения, , НСтр("ru = 'Ошибка'"));
				
			КонецПопытки;
			
		Иначе
			ЗаголовокВыбора = ХранилищеОписания.ЗаголовокВыбора;
			ОграничениеПоРасширению = ХранилищеОписания.ОграничениеПоРасширению;
			ОграничениеПоРазмеру = ХранилищеОписания.ОграничениеПоРазмеру;
			
			ОписаниеФильтра = НСтр("ru='Файл для отправки в банк'");
			МаскаВыбора = СтрЗаменить(ОграничениеПоРасширению, ",", ";");
			МаскаВыбора = СтрЗаменить(МаскаВыбора, " ", "");
			
			ДополнительныеПараметры = Новый Структура;
			ДополнительныеПараметры.Вставить("ОграничениеПоРазмеру", ОграничениеПоРазмеру);
			ДополнительныеПараметры.Вставить("ТипФайла", ТипФайла);
			
			ОписаниеОповещения = Новый ОписаниеОповещения(
				"ВыбратьТипизированныйФайлЗавершение", ЭтаФорма, ДополнительныеПараметры);
			
			ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
			ДиалогВыбораФайла.МножественныйВыбор = Ложь;
			ДиалогВыбораФайла.Заголовок = ЗаголовокВыбора;
			ДиалогВыбораФайла.Фильтр = ОписаниеФильтра + " (" + ОграничениеПоРасширению + ")|" + МаскаВыбора;
			
			НачатьПомещениеФайлов(ОписаниеОповещения, , ДиалогВыбораФайла, Истина, УникальныйИдентификатор);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьТипизированныйФайлЗавершение(ПомещенныеФайлы, ДополнительныеПараметры) Экспорт
	
	ТипФайла = ДополнительныеПараметры.ТипФайла;
	ОграничениеПоРазмеру = ДополнительныеПараметры.ОграничениеПоРазмеру;
	
	Если ПомещенныеФайлы <> Неопределено Тогда
		ФайлДобавлен = ДобавитьТипизированныйФайлНаСервере(
			ПомещенныеФайлы[0], ТипФайла, ОграничениеПоРазмеру);
			
		Если ФайлДобавлен Тогда
			РасчитатьПоказатели_ДополнительныеФайлы();
			Модифицированность = Истина;
			
		Иначе
			Сообщение = Новый СообщениеПользователю;
			СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Размер файла превышает %1 Мб. Приложите файл меньшего размера'"),
				Окр(ОграничениеПоРазмеру / Мебибайт()));
			Сообщение.Текст = СтрокаСообщения;
			Сообщение.Сообщить();
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ДобавитьТипизированныйФайлНаСервере(ОписаниеФайла, ТипФайла, ОграничениеПоРазмеру)
	
	ПолноеИмяФайла = ОписаниеФайла.Имя;
	АдресХранения = ОписаниеФайла.Хранение;
	РазмерФайла = ПолучитьИзВременногоХранилища(АдресХранения).Размер();
	
	Если РазмерФайла > ОграничениеПоРазмеру Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ЭлементыИмениФайла = ОбщегоНазначенияКлиентСервер.РазложитьПолноеИмяФайла(ПолноеИмяФайла);
	
	ХранилищеОписания = СтруктураРеквизитовФормы.ДополнительныеТипизированныеФайлы[ТипФайла];
	
	ХранилищеОписания.Имя    = ЭлементыИмениФайла.Имя;
	ХранилищеОписания.Адрес  = АдресХранения;
	ХранилищеОписания.Размер = РазмерФайла;
	ХранилищеОписания.ДатаДобавления = ТекущаяДатаСеанса();
	
	ТабличныйДокумент.Области[ХранилищеОписания.СтрокаПоказателя + "01"].Значение =
		ХранилищеОписания.Имя;
	ТабличныйДокумент.Области[ХранилищеОписания.СтрокаПоказателя + "02"].Значение =
		Окр(ХранилищеОписания.Размер / 1024);
		
	ОбластьКнопкиУдаления = ТабличныйДокумент.Области["УдалитьФайл_" + ХранилищеОписания.СтрокаПоказателя + "01"];
	ОбластьКнопкиУдаления.Гиперссылка = Истина;
	ОбластьКнопкиУдаления.Текст = "х";
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура УдалитьТипизированныйФайл(ИмяОбласти)
	
	ТипФайла = ТипФайлаПоИмениОбласти(Прав(ИмяОбласти, 13));
	
	ХранилищеОписания = СтруктураРеквизитовФормы.ДополнительныеТипизированныеФайлы[ТипФайла];
	ХранилищеОписания.Имя    = "";
	ХранилищеОписания.Адрес  = Неопределено;
	ХранилищеОписания.Размер = 0;
	ХранилищеОписания.ДатаДобавления = '0001-01-01';
	
	ПредельныйРазмерМб = Окр(ХранилищеОписания.ОграничениеПоРазмеру / Мебибайт());
	ТекстГиперссылки = "Добавить файл (%1; не более %2 Мб)";
	ТекстГиперссылки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		ТекстГиперссылки, ХранилищеОписания.ОграничениеПоРасширению, ПредельныйРазмерМб);
	
	ТабличныйДокумент.Области[ХранилищеОписания.СтрокаПоказателя + "01"].Значение = ТекстГиперссылки;
	ТабличныйДокумент.Области[ХранилищеОписания.СтрокаПоказателя + "02"].Значение = 0;
	
	ОбластьКнопкиУдаления = ТабличныйДокумент.Области["УдалитьФайл_" + ХранилищеОписания.СтрокаПоказателя + "01"];
	ОбластьКнопкиУдаления.Гиперссылка = Ложь;
	ОбластьКнопкиУдаления.Текст = "";
	
	РасчитатьПоказатели_ДополнительныеФайлы();
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ТипФайлаПоИмениОбласти(ИмяОбласти)
	
	ТипФайла = "";
	
	Если ИмяОбласти = "П000110000101" Тогда
		ТипФайла = "ОтсутствиеИзмененийУчрДок";
	ИначеЕсли ИмяОбласти = "П000110000201" Тогда
		ТипФайла = "РасшифровкаПФИ";
	ИначеЕсли ИмяОбласти = "П000110000301" Тогда
		ТипФайла = "ХодРеализацииПроекта";
	ИначеЕсли ИмяОбласти = "П000110000401" Тогда
		ТипФайла = "РеализацияКвартир";
	ИначеЕсли ИмяОбласти = "П000110000501" Тогда
		ТипФайла = "ПроизводственнаяПрограмма";
	ИначеЕсли ИмяОбласти = "П000110000601" Тогда
		ТипФайла = "ОтсутствиеЛизинговыхОбязательств";
	ИначеЕсли ИмяОбласти = "П000110000701" Тогда
		ТипФайла = "ОтсутствиеДебЗадолженности";
	ИначеЕсли ИмяОбласти = "П000110000801" Тогда
		ТипФайла = "ОтсутствиеКредЗадолженности";
	ИначеЕсли ИмяОбласти = "П000110000901" Тогда
		ТипФайла = "ОтсутствиеФинВложений";
	КонецЕсли;
	
	Возврат ТипФайла;
	
КонецФункции

#КонецОбласти

&НаСервере
Процедура СохранитьДанныеРаздела(НаимРаздела, ВеткаРаздела = Неопределено)
	
	Если мСтруктураМногоуровневыхРазделов.Свойство(НаимРаздела) Тогда
		// Многоуровневые разделы.
		Если ВеткаРаздела = Неопределено Тогда
			СтруктураРаздела = мСтруктураМногоуровневыхРазделов[НаимРаздела];
			
			ИмяГлРаздела = Неопределено;
			СтруктураРаздела.Свойство("КорневойРаздел", ИмяГлРаздела);
			ИмяГлРаздела = ?(ИмяГлРаздела = Неопределено, НаимРаздела, ИмяГлРаздела);
			
			ДеревоДанныхРаздела = ПолучитьИзВременногоХранилища(
				СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяГлРаздела]);
			
			ТекВетка = ДеревоДанныхРаздела;
			
			Для каждого НомерСтроки Из СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела Цикл
				ТекВетка = ТекВетка.Строки[НомерСтроки - 1];
			КонецЦикла;
			
		Иначе
			ТекВетка = ВеткаРаздела;
			
		КонецЕсли;
		
		Если ТипЗнч(ТекВетка) = Тип("СтрокаДереваЗначений") Тогда
			ОтправляетсяСправкаОбОтсутствии = НеотображаемыеПоказатели.Свойство("СтатусЗаполнения")
				И НеотображаемыеПоказатели.СтатусЗаполнения = "пустой";
			
			Если НЕ ОтправляетсяСправкаОбОтсутствии Тогда
				ДанныеТаблДокумента = ДанныеТабличногоДокумента(НаимРаздела);
				
				ТекВетка.Данные = ДанныеТаблДокумента.Данные;
				ТекВетка.ДанныеМногострочныхЧастей = ДанныеТаблДокумента.ДанныеМногострочныхЧастей;
				
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойств(ТекВетка.Параметры, НеотображаемыеПоказатели);
			
		КонецЕсли;
		
		СтруктураРеквизитовФормы.Вставить("АдресВоВрХранилищеДеревоДанных" + ИмяГлРаздела,
			ПоместитьВоВременноеХранилище(ДеревоДанныхРаздела, УникальныйИдентификатор));
		
		ДеревоДанныхРаздела = Неопределено;
		
	ИначеЕсли НаимРаздела = "ОтчетыФНС" Тогда
		// Раздел не содержит изменяемых данных.
		
	Иначе
		// Обычные разделы.
		ЭтаФорма["СтруктураДанных" + НаимРаздела] = ДанныеТабличногоДокумента(НаимРаздела);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ДанныеТабличногоДокумента(НаимРаздела)
	
	ДанныеТаблДокумента = Новый Структура;
	
	Если мСтруктураМногоуровневыхРазделов.Свойство(НаимРаздела) Тогда
		// Многоуровневые разделы.
		СтруктураРаздела = мСтруктураМногоуровневыхРазделов[НаимРаздела];
		
		ИменаГруппМнЧ = Неопределено;
		СтруктураРаздела.Свойство("ИменаГруппМнЧ", ИменаГруппМнЧ);
		РазделСодержитМнЧ = (ИменаГруппМнЧ <> Неопределено);
		
		СтруктураДанных = Новый Структура();
		Для Каждого ТекущаяОбласть Из ТабличныйДокумент.Области Цикл
			Если СтрЧислоВхождений(Тип(ТекущаяОбласть), "Рисунок") = 0
				И ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник
				И ТекущаяОбласть.СодержитЗначение = Истина Тогда
				Если РазделСодержитМнЧ Тогда
					Если МногострочнаяЧастьТекущейОбласти(ЭтаФорма, ТекущаяОбласть.Имя) = Неопределено Тогда
						СтруктураДанных.Вставить(ТекущаяОбласть.Имя, ТекущаяОбласть.Значение);
					КонецЕсли;
				Иначе
					СтруктураДанных.Вставить(ТекущаяОбласть.Имя, ТекущаяОбласть.Значение);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		ДанныеТаблДокумента.Вставить("Данные", СтруктураДанных);
		
		СтруктураДанныхМногострочныхЧастей = Новый Структура;
		Если РазделСодержитМнЧ Тогда
			Для каждого ИмяГруппыМнЧ Из СтруктураРаздела["ИменаГруппМнЧ"] Цикл
				ЭлемСтруктуры = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппыМнЧ];
				Если ЭлемСтруктуры["УровеньПодчинения"] = 0 Тогда
					ДеревоДанных = Новый ДеревоЗначений;
					ДеревоДанных.Колонки.Добавить("Данные");
					ДеревоДанных.Колонки.Добавить("ДанныеМногострочныхЧастей");
					СформироватьДеревоМногострочнойЧастиПоДаннымТабличногоДокумента(ИмяГруппыМнЧ, ДеревоДанных);
					СтруктураДанныхМногострочныхЧастей.Вставить(ИмяГруппыМнЧ, ДеревоДанных);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		ДанныеТаблДокумента.Вставить("ДанныеМногострочныхЧастей", СтруктураДанныхМногострочныхЧастей);
		
	ИначеЕсли НаимРаздела = "ОтчетыФНС" Тогда
		// Разделы без изменяемых сведений.
		
	Иначе
		// Обычные разделы.
		Для Инд = 0 По ТабличныйДокумент.Области.Количество() - 1 Цикл
			ТекОбласть = ТабличныйДокумент.Области[Инд];
			
			Если СтрЧислоВхождений(Тип(ТекОбласть), "Рисунок") = 0
			   И ТекОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник
			   И ТекОбласть.СодержитЗначение = Истина Тогда
				
				ДанныеТаблДокумента.Вставить(ТекОбласть.Имя, ТекОбласть.Значение);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ДанныеТаблДокумента;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция МногострочнаяЧастьТекущейОбласти(Форма, Знач ИмяОбласти)
	
	Если НЕ ЗначениеЗаполнено(ИмяОбласти) Тогда
		Возврат Неопределено;
	Иначе
		НомПозПодчеркивания = Форма.СтруктураРеквизитовФормы.ДлинаИмениГрафы + 1;
		Если НЕ (СтрДлина(ИмяОбласти) > НомПозПодчеркивания
			И Сред(ИмяОбласти, НомПозПодчеркивания, 1) = "_") Тогда
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	ИмяОбласти = СтрЗаменить(ИмяОбласти, "ДобавитьСтрокуЗначок", "");
	ИмяОбласти = СтрЗаменить(ИмяОбласти, "ДобавитьСтроку", "");
	ИмяОбласти = СтрЗаменить(ИмяОбласти, "УдалитьСтроку", "");
	
	ИмяГруппы = Лев(ИмяОбласти, Форма.СтруктураРеквизитовФормы.ДлинаИмениГруппы);
	
	Для каждого ЭлемСтруктуры Из Форма.СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей Цикл
		Если ЭлемСтруктуры.Ключ = ИмяГруппы Тогда
			Возврат ИмяГруппы;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

&НаСервере
Процедура СформироватьДеревоМногострочнойЧастиПоДаннымТабличногоДокумента(ИмяГруппы, ДеревоДанных, Координаты = "")
	
	Если НЕ СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей.Свойство(ИмяГруппы) Тогда
		Возврат;
	КонецЕсли;
	
	МассивИменГраф = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппы]["ИменаГраф"];
	ИмяПервойГрафы = МассивИменГраф[0];
	
	Инд_Число = 1;
	Пока ТабличныйДокумент.Области.Найти(ИмяПервойГрафы + Координаты + СтрокаСИндексомПоказателя(Инд_Число)) <> Неопределено Цикл
		НовВетка = ДеревоДанных.Строки.Добавить();
		
		// Заполнение данными из текущей строки многострочной части.
		Данные = Новый Структура;
		Инд = СтрокаСИндексомПоказателя(Инд_Число);
		Для каждого ИмяГрафы Из МассивИменГраф Цикл
			Обл = ТабличныйДокумент.Области.Найти(ИмяГрафы + Координаты + Инд);
			Если Обл <> Неопределено Тогда
				Данные.Вставить(ИмяГрафы, Обл.Значение);
			КонецЕсли;
		КонецЦикла;
		НовВетка.Данные = Данные;
		
		// Заполнение данными из строк многострочных частей, подчиненных текущей строке многострочной части.
		ДанныеМногострочныхЧастей = Новый Структура;
		ИменаПодчГрупп = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппы]["ИменаПодчиненныхГрупп"];
		Для каждого ИмяПодчГруппы Из ИменаПодчГрупп Цикл
			ДеревоПодчСтрок = Новый ДеревоЗначений;
			ДеревоПодчСтрок.Колонки.Добавить("Данные");
			ДеревоПодчСтрок.Колонки.Добавить("ДанныеМногострочныхЧастей");
			ПодчКоординаты = Координаты + Инд;
			СформироватьДеревоМногострочнойЧастиПоДаннымТабличногоДокумента(
				ИмяПодчГруппы, ДеревоПодчСтрок, ПодчКоординаты);
			ДанныеМногострочныхЧастей.Вставить(ИмяПодчГруппы, ДеревоПодчСтрок);
		КонецЦикла;
		НовВетка.ДанныеМногострочныхЧастей = ДанныеМногострочныхЧастей;
		
		Инд_Число = Инд_Число + 1;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСведенияОбОрганизации()
	
	СтрокаСведений = "ИННЮЛ, КППЮЛ, НаимЮЛПол, НаимЮЛСокр, ФИОРук, ФИО";
	
	СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(
		СтруктураРеквизитовФормы.Организация, ДатаПодписи, СтрокаСведений);
	
	Если СтруктураРеквизитовФормы.ИП Тогда
		НаименованиеОрганизации = СокрЛП(СведенияОбОрганизации.ФИО);
	Иначе
		НаименованиеОрганизации = СокрЛП(СведенияОбОрганизации.НаимЮлПол);
	КонецЕсли;
	
	ТабличныйДокумент.Области.НаименованиеОрганизации.Значение = НаименованиеОрганизации;
	ТабличныйДокумент.Области.НаименованиеОрганизацииКраткое.Значение = СокрЛП(СведенияОбОрганизации.НаимЮЛСокр);
	ТабличныйДокумент.Области.ИНН.Значение = СокрЛП(СведенияОбОрганизации.ИННЮЛ);
	ТабличныйДокумент.Области.КПП.Значение = СокрЛП(СведенияОбОрганизации.КППЮЛ);
	
	ТабличныйДокумент.Области.Подписант.Значение = СокрЛП(СведенияОбОрганизации.ФИОРук);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНаКлиенте(Автосохранение = Ложь, ВыполняемоеОповещение = Неопределено) Экспорт
	
	Вариант = СтруктураРеквизитовФормы.ВидДокумента * НомерКорректировки;
	
	Если НЕ РегламентированнаяОтчетностьКлиент.ПриЗаписиРегламентированногоОтчетаНаКлиенте(ЭтаФорма, , Автосохранение, Вариант) Тогда
		Возврат;
	КонецЕсли;
	
	ПодобныйОтчетСуществует = Ложь;
	ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки = Ложь;
	
	Если Элементы.РазделыОтчета.ТекущиеДанные = Неопределено Тогда
		НаименованиеТекущегоРаздела = СтруктураРеквизитовФормы.НаимТекущегоРаздела;
	Иначе
		НаименованиеТекущегоРаздела = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
	КонецЕсли;
	
	РезультатСохранения = ПередСохранением( , ПодобныйОтчетСуществует, Вариант, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, Автосохранение, НаименованиеТекущегоРаздела);
	
	Если РезультатСохранения = Истина Тогда
		ОповеститьОбИзменении(СтруктураРеквизитовФормы.мСохраненныйДок);
	КонецЕсли;
	
	ВидДокументаНомерКорректировкиИзменен = Неопределено;
	
	Если ПодобныйОтчетСуществует И Автосохранение Тогда
		Возврат;
	КонецЕсли;
	
	НуженВопросПередСохранением = (ПодобныйОтчетСуществует ИЛИ ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки);
	
	Если НуженВопросПередСохранением Тогда
		СохранитьНаКлиентеСВопросом(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, ПодобныйОтчетСуществует);
	Иначе
		ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПередСохранением(КодИФНС = "не применимо", ПодобныйОтчетСуществует, Вариант, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, Автосохранение, НаимТекРаздела)
	
	ПодобныйОтчетСуществует = Ложь;
	
	СтруктураРеквизитовФормы.мЗаписываетсяНовыйДокумент = (СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено ИЛИ СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено);
	
	Если Вариант <> Неопределено И ((СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено) ИЛИ (СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено) ИЛИ (Вариант <> СтруктураРеквизитовФормы.мВариант)) Тогда
		Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено ИЛИ СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено Тогда
			// Открытие формы вопроса по исходному значению параметра.
		ИначеЕсли Вариант <> СтруктураРеквизитовФормы.мВариант Тогда
			ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если ПодобныйОтчетСуществует
	 ИЛИ ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Сохранить(Автосохранение, КодИФНС, Вариант, , НаимТекРаздела);
	
КонецФункции

&НаКлиенте
Процедура СохранитьНаКлиентеСВопросом(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, ПодобныйОтчетСуществует)
	
	Если ПодобныйОтчетСуществует Тогда
		
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(КодВозвратаДиалога.Да, "Сохранить");
		Кнопки.Добавить(КодВозвратаДиалога.Нет, "Отмена");
		
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Отчет с видом %1 уже существует.
			|Сохранить отчет с таким же видом?'"), ?(Вариант = 0, """Первичный""", """Корректирующий/" + Вариант + """"));
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("Автосохранение", Автосохранение);
		ДополнительныеПараметры.Вставить("Вариант", Вариант);
		ДополнительныеПараметры.Вставить("ВыполняемоеОповещение", ВыполняемоеОповещение);
		ДополнительныеПараметры.Вставить("ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки", ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки);
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросСохранитьОтчетСТакимЖеВидомЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, Кнопки, , Кнопки.Получить(1).Значение);
		
	Иначе
		
		СохранитьНаКлиентеСВопросомПродолжение(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросСохранитьОтчетСТакимЖеВидомЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Автосохранение = ДополнительныеПараметры.Автосохранение;
	Вариант = ДополнительныеПараметры.Вариант;
	ВыполняемоеОповещение = ДополнительныеПараметры.ВыполняемоеОповещение;
	ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки = ДополнительныеПараметры.ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки;
	
	Ответ = РезультатВопроса;
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	СохранитьНаКлиентеСВопросомПродолжение(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНаКлиентеСВопросомПродолжение(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки)
	
	Если ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки Тогда
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("ВидОтчета", Вариант);
		
		ФормаВопроса = РегламентированнаяОтчетностьКлиент.ПолучитьОбщуюФормуПоИмени("ВопросПриИзмененииВидаДокументаНомераКорректировки", ПараметрыФормы);
		ФормаВопроса.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		ДополнительныеПараметры = Новый Структура("Автосохранение, Вариант, ВыполняемоеОповещение", Автосохранение, Вариант, ВыполняемоеОповещение);
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросПриИзмененииВидаДокументаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ФормаВопроса.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
		ФормаВопроса.Открыть();
	Иначе
		Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Сохраняется %1...'"), ЭтаФорма.Заголовок), , , БиблиотекаКартинок.Записать);
		РезультатСохранения = Сохранить(Автосохранение, , Вариант, Ложь, Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
		Если РезультатСохранения = Истина Тогда
			ОповеститьОбИзменении(СтруктураРеквизитовФормы.мСохраненныйДок);
		КонецЕсли;
		ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения)
	
	КлючУникальности = СтруктураРеквизитовФормы.мСохраненныйДок;
	
	Если РезультатСохранения Тогда
		
		РегламентированнаяОтчетностьКлиент.ПослеЗаписиРегламентированногоОтчета(ЭтаФорма);
		
		Если ВыполняемоеОповещение <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ВыполняемоеОповещение);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СохранитьДеревоСтраницОтчета(Знач мСохраненныйДок)
	
	Если мСохраненныйДок <> Неопределено Тогда
		Если ТипЗнч(мСохраненныйДок) = Тип("ДокументСсылка.РегламентированныйОтчет") Тогда
			мСохраненныйДок = мСохраненныйДок.ПолучитьОбъект();
		КонецЕсли;
		
		Если Не мСохраненныйДок.ЭтоНовый() Тогда
			ХранилищеДанных = Новый ХранилищеЗначения(РеквизитФормыВЗначение("мДеревоСтраницОтчета"));
			мСохраненныйДок.ДеревоНастройкиСтраниц = ХранилищеДанных;
			Попытка
				мСохраненныйДок.Записать();
			Исключение
			КонецПопытки;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьСохраненныеНастройкиДереваРазделов()
	
	ОтборВсехСтрок = Новый Структура("ПреобразоватьВМассив", Ложь);
	
	ИсходноеДеревоСтраниц = РеквизитФормыВЗначение("мДеревоСтраницОтчета");
	
	// Исключение всех разделов, чтобы видны были только разделы, включенные в сохраненый отчет.
	ИсходноеДеревоСтраниц.Колонки.Добавить("ПреобразоватьВМассив", Новый ОписаниеТипов("Булево"));
	
	СтрокиИсходногоДерева = ИсходноеДеревоСтраниц.Строки.НайтиСтроки(ОтборВсехСтрок, Истина);
	Для Каждого СтрокаДерева Из СтрокиИсходногоДерева Цикл
		СтрокаДерева.ПоказатьСтраницу = 0;
	КонецЦикла;
	
	ИсходноеДеревоСтраниц.Колонки.Удалить("ПреобразоватьВМассив");
	
	ДеревоНастройкиСтраниц = СтруктураРеквизитовФормы.мСохраненныйДок.ДеревоНастройкиСтраниц.Получить();
	Если ДеревоНастройкиСтраниц.Колонки.Найти("ЗаполняетсяПоИБ") <> Неопределено Тогда
		// Сохраненные значения в служебной колонке неактуальны и игнорируются.
		ДеревоНастройкиСтраниц.Колонки.Удалить("ЗаполняетсяПоИБ");
	КонецЕсли;
	
	Если ТипЗнч(ДеревоНастройкиСтраниц) = Тип("ДеревоЗначений") Тогда
		ДеревоНастройкиСтраниц.Колонки.Добавить("ПреобразоватьВМассив", Новый ОписаниеТипов("Булево"));
		СтрокиНастройкиСтраниц = ДеревоНастройкиСтраниц.Строки.НайтиСтроки(ОтборВсехСтрок, Истина);
		
		Для Каждого СтрокаНастройкиСтраницы Из СтрокиНастройкиСтраниц Цикл
			ИмяРаздела = СтрокаНастройкиСтраницы.ИмяСтраницы;
			СтрокаДереваРазделов = ИсходноеДеревоСтраниц.Строки.Найти(ИмяРаздела, "ИмяСтраницы", Истина);
			
			Если СтрокаДереваРазделов <> Неопределено Тогда
				ИсключаемыеСвойства = "Представление";
				ЗаполнитьЗначенияСвойств(СтрокаДереваРазделов, СтрокаНастройкиСтраницы, , ИсключаемыеСвойства);
				
			КонецЕсли;
			
		КонецЦикла;
		
		ЗначениеВРеквизитФормы(ИсходноеДеревоСтраниц.Скопировать(), "мДеревоСтраницОтчета");
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДополнитьПоказателиРазделовДоработанныхОтчетов(ДанныеРаздела, ИмяРаздела)
	
	Если ИмяРаздела = "ЛизингОбязательства" Тогда
		ДополнитьПоказателиРазделовДоработанныхОтчетов_ЛизингОбязательства(ДанныеРаздела);
		
	ИначеЕсли ИмяРаздела = "ЗадолженностьПоКредитамЗаймам" Тогда
		ДополнитьПоказателиРазделовДоработанныхОтчетов_ЗадолженностьПоКредитамЗаймам(ДанныеРаздела.Строки[0].Строки[0], "П00007");
		ДополнитьПоказателиРазделовДоработанныхОтчетов_ЗадолженностьПоКредитамЗаймам(ДанныеРаздела.Строки[0].Строки[1], "П00008");
		
	ИначеЕсли ИмяРаздела = "РасшифровкиОбеспечений" Тогда
		КонвертироватьПоказателиРазделов_РасшифровкиОбеспечений(ДанныеРаздела.Строки[0].Строки[0]);
		КонвертироватьПоказателиРазделов_РасшифровкиОбеспечений(ДанныеРаздела.Строки[0].Строки[1]);
		
	ИначеЕсли ИмяРаздела = "ДополнительныеФайлы" Тогда
		ДополнитьПоказателиРазделовДоработанныхОтчетов_ДополнительныеФайлы(ДанныеРаздела);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДополнитьПоказателиРазделовДоработанныхОтчетов_ЛизингОбязательства(ДанныеРаздела)
	
	Показатели = ДанныеРаздела.Строки[0].Данные;
	
	Если НЕ Показатели.Свойство("П000060000101") Тогда
		Для Инд = 1 По 8 Цикл
			Показатели.Вставить("П000060000" + Инд + "01", "");
			Показатели.Вставить("П000060000" + Инд + "02", 0);
		КонецЦикла;
	КонецЕсли;
	
	ДеревоДанных = Новый ДеревоЗначений; // Прототип дерева для многострочных частей
	ДеревоДанных.Колонки.Добавить("Данные");
	ДеревоДанных.Колонки.Добавить("ДанныеМногострочныхЧастей");
	
	ПрефиксМСЧ = "П00006";
	
	СтрокиМСЧ = ДанныеРаздела.Строки[0].ДанныеМногострочныхЧастей.П00006М1;
	
	Для Каждого СтрокаМСЧ Из СтрокиМСЧ.Строки Цикл
		ПоказателиСтроки = СтрокаМСЧ.Данные;
		
		Если НЕ ПоказателиСтроки.Свойство(ПрефиксМСЧ + "М100115") Тогда
			ПоказателиСтроки.Вставить(ПрефиксМСЧ + "М100115", 0);
			ПоказателиСтроки.Вставить(ПрефиксМСЧ + "М100116", 0);
			ПоказателиСтроки.Вставить(ПрефиксМСЧ + "М100117", 0);
			
			СтрокаМСЧ.ДанныеМногострочныхЧастей = Новый Структура(ПрефиксМСЧ + "М2", ДеревоДанных.Скопировать());
			
			МСЧ2 = СтрокаМСЧ.ДанныеМногострочныхЧастей[ПрефиксМСЧ + "М2"];
			
			СтрокаМСЧ2 = МСЧ2.Строки.Добавить();
			
			СтрокаМСЧ2.Данные = Новый Структура;
			СтрокаМСЧ2.Данные.Вставить(ПрефиксМСЧ + "М200101", '0001-01-01');
			СтрокаМСЧ2.Данные.Вставить(ПрефиксМСЧ + "М200102", 0);
			СтрокаМСЧ2.Данные.Вставить(ПрефиксМСЧ + "М200103", 0);
			СтрокаМСЧ2.Данные.Вставить(ПрефиксМСЧ + "М200104", 0);
			СтрокаМСЧ2.Данные.Вставить(ПрефиксМСЧ + "М200105", 0);
			
			СтрокаМСЧ2.ДанныеМногострочныхЧастей = Новый Структура;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ДополнитьПоказателиРазделовДоработанныхОтчетов_ЗадолженностьПоКредитамЗаймам(ДанныеРаздела, Префикс)
	
	Показатели = ДанныеРаздела.Строки[0].Данные;
	
	СтрокиМСЧ1 = ДанныеРаздела.Строки[0].ДанныеМногострочныхЧастей[Префикс + "М1"];
	Для Каждого СтрокаМСЧ1 Из СтрокиМСЧ1.Строки Цикл
		ПоказателиСтроки1 = СтрокаМСЧ1.Данные;
		Если НЕ ПоказателиСтроки1.Свойство(Префикс + "М100019") Тогда
			ПоказателиСтроки1.Вставить(Префикс + "М100019", 0);
			ПоказателиСтроки1.Вставить(Префикс + "М100020", 0);
			ПоказателиСтроки1.Вставить(Префикс + "М100021", 0);
			ПоказателиСтроки1.Вставить(Префикс + "М100022", 0);
			ПоказателиСтроки1.Вставить(Префикс + "М100023", 0);
			ПоказателиСтроки1.Вставить(Префикс + "М100024", 0);
			ПоказателиСтроки1.Вставить(Префикс + "М100025", 0);
			ПоказателиСтроки1.Вставить(Префикс + "М100026", '0001-01-01');
			ПоказателиСтроки1.Вставить(Префикс + "М100027", '0001-01-01');
			ПоказателиСтроки1.Вставить(Префикс + "М100028", 0);
			ПоказателиСтроки1.Вставить(Префикс + "М100029", 0);
			ПоказателиСтроки1.Вставить(Префикс + "М100030", "");
			ПоказателиСтроки1.Вставить(Префикс + "М100031", '0001-01-01');
			ПоказателиСтроки1.Вставить(Префикс + "М100032", "");
			
			СтрокиМСЧ2 = СтрокаМСЧ1.ДанныеМногострочныхЧастей[Префикс + "М2"];
			Для Каждого СтрокаМСЧ2 Из СтрокиМСЧ2.Строки Цикл
				ПоказателиСтроки2 = СтрокаМСЧ2.Данные;
				ПоказателиСтроки2.Вставить(Префикс + "М200003", 0);
				ПоказателиСтроки2.Вставить(Префикс + "М200004", 0);
				ПоказателиСтроки2.Вставить(Префикс + "М200005", 0);
			КонецЦикла;
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура КонвертироватьПоказателиРазделов_РасшифровкиОбеспечений(ДанныеРаздела)
	
	Если ДанныеРаздела.Строки[0].ДополнительныеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Показатели = ДанныеРаздела.Строки[0].ДополнительныеДанные.Данные;
	
	ТребуетсяКонвертация = (Показатели.Колонки.Найти("СНД") <> Неопределено);
	
	Если НЕ ТребуетсяКонвертация Тогда
		Возврат;
	КонецЕсли;
	
	// Удаление неактуальных колонок.
	Показатели.Колонки.Удалить("ДО");
	Показатели.Колонки.Удалить("КО");
	Показатели.Колонки.Удалить("СНД");
	Показатели.Колонки.Удалить("СНК");
	Показатели.Колонки.Удалить("СКК");
	Показатели.Колонки.Удалить("КонтрагентКПП");
	Показатели.Колонки.Удалить("КодСчета");
	Показатели.Колонки.Удалить("ДоговорПредставление");
	
	// Переименование колонок.
	Показатели.Колонки.СКД.Имя = "Стоимость";
	Показатели.Колонки.ДоговорДата.Имя = "ДоговорНач";
	Показатели.Колонки.ДоговорСрокДействия.Имя = "ДоговорКон";
	
	// Новые колонки отчета.
	Показатели.Колонки.Добавить("ДолжникНаименование", Новый ОписаниеТипов("Строка"));
	Показатели.Колонки.Добавить("ДолжникИНН", Новый ОписаниеТипов("Строка"));
	Показатели.Колонки.Добавить("ВидОбеспечения", Новый ОписаниеТипов("Строка"));
	Показатели.Колонки.Добавить("СуммаВал", Новый ОписаниеТипов("Число"));
	Показатели.Колонки.Добавить("Валюта", Новый ОписаниеТипов("Строка"));
	
КонецПроцедуры

&НаСервере
Процедура ЗаменитьДетализированныеСчетаВНастройкахСтраниц(СохраненныйСписокСчетовРаздела)
	
	Для Каждого СтрокаСчета Из СохраненныйСписокСчетовРаздела Цикл
		СчетОтчета = СтрокаСчета.Счет;
		
		Для Инд = 1 По 2 Цикл
			Если НЕ ЗначениеЗаполнено(СчетОтчета.Родитель) Тогда
				Прервать;
			КонецЕсли;
			
			СчетОтчета = СчетОтчета.Родитель;
			
		КонецЦикла;
		
		СтрокаСчета.Счет = СчетОтчета;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаменитьДетализированныеСчетаВСтраницахРаздела(ДанныеРаздела)
	
	Для Каждого СтраницаРаздела Из ДанныеРаздела.Строки Цикл
		СчетОтчета = СтраницаРаздела.Параметры.Счет;
		
		Для Инд = 1 По 2 Цикл
			Если НЕ ЗначениеЗаполнено(СчетОтчета.Родитель) Тогда
				Прервать;
			КонецЕсли;
			
			СчетОтчета = СчетОтчета.Родитель;
			
		КонецЦикла;
		
		СтраницаРаздела.Параметры.Счет = СчетОтчета;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ДополнитьПоказателиРазделовДоработанныхОтчетов_ДополнительныеФайлы(ДанныеРаздела)
	
	Показатели = ДанныеРаздела.Строки[0].Данные;
	
	Если НЕ Показатели.Свойство("П000110000101") Тогда
		Для Инд = 1 По 9 Цикл
			Показатели.Вставить("П000110000" + Инд + "01", "");
			Показатели.Вставить("П000110000" + Инд + "02", 0);
		КонецЦикла;
		
		Показатели.Вставить("П000110002002", 0);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьНовыеПоказателейДоработанныхОтчетов_ДополнительныеФайлы()
	
	ИмяРаздела = "ДополнительныеФайлы";
	
	СтруктураРаздела = мСтруктураМногоуровневыхРазделов[ИмяРаздела];
	
	ДеревоДанныхРаздела = ПолучитьИзВременногоХранилища(
		СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяРаздела]);
	
	Показатели = ДеревоДанныхРаздела.Строки[0].Данные;
	
	П000110002002 = 0;
	Для Каждого ОписаниеФайла Из СтруктураРеквизитовФормы.ДополнительныеФайлы Цикл
		П000110002002 = П000110002002 + ОписаниеФайла.РазмерФайла;
	КонецЦикла;
	
	П000110002002 = Окр(П000110002002 / 1024);
	Показатели.Вставить("П000110002002", П000110002002);
	
	СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяРаздела] =
		ПоместитьВоВременноеХранилище(ДеревоДанныхРаздела, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СтрокаЧГ0(ФорматируемоеЧисло)
	
	Возврат Формат(ФорматируемоеЧисло, "ЧН=; ЧГ=0");
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьАвтоСохранениеНового(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("Команда", ДополнительныеПараметры.Команда);
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьАвтоЗавершение", ЭтотОбъект, ПараметрыОповещения);
	
	Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
		СохранитьНаКлиенте( , ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьАвтоЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Команда = ДополнительныеПараметры.Команда;
	
	РезультатЗапускаФоновогоЗадания = ЗаполнитьАвтоНаСервере(Команда.Имя = "Заполнить");
	
	Если РезультатЗапускаФоновогоЗадания.Статус = "Выполняется" Тогда
		ОповещениеОЗавершении = Новый ОписаниеОповещения("ОбработатьЗавершениеАвтозаполненияВФоне", ЭтотОбъект);
		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтаФорма);
		ДлительныеОперацииКлиент.ОжидатьЗавершение(РезультатЗапускаФоновогоЗадания, ОповещениеОЗавершении, ПараметрыОжидания);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьЗавершениеАвтозаполненияВФоне(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		Если Результат.Статус = "Выполнено" Тогда
			ЗагрузитьПодготовленныеДанные();
			
		ИначеЕсли Результат.Статус = "Ошибка" Тогда
			ВызватьИсключение Результат.ПодробноеПредставлениеОшибки;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЗаполнитьАвтоНаСервере(ЗаполнятьВсеРазделы)
	
	Модифицированность = Истина;
	
	СохранитьДанныеРаздела(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
	ПараметрыОтчета = ПараметрыАвтозаполнения(ЗаполнятьВсеРазделы);
	
	ОтметитьАвтозаполненныеРазделы(ПараметрыОтчета);
	
	Контейнер = Новый Структура;
	
	НаименованиеЗадания = НСтр("ru = 'Автоматическое заполнение по данным информационной базы'");
	
	ПараметрыПроцедуры = Новый Структура;
	ПараметрыПроцедуры.Вставить("ИДОтчета", Сред(Лев(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, ".Форма.") - 1), 7));
	ПараметрыПроцедуры.Вставить("ИДРедакцииОтчета", Сред(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, ".Форма.") + 7));
	ПараметрыПроцедуры.Вставить("ПараметрыОтчета", ПараметрыОтчета);
	ПараметрыПроцедуры.Вставить("Контейнер", Контейнер);
	
	ПараметрыВыполненияВФоне = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполненияВФоне.НаименованиеФоновогоЗадания = НаименованиеЗадания;
	ПараметрыВыполненияВФоне.ЗапуститьВФоне = Истина;
	
	РезультатЗапуска = ДлительныеОперации.ВыполнитьВФоне("РегламентированнаяОтчетность.ЗаполнитьОтчетВФоне",
		ПараметрыПроцедуры, ПараметрыВыполненияВФоне);
	
	Если РезультатЗапуска.Статус = "Выполнено" Тогда
		ЗагрузитьПодготовленныеДанные();
		
	ИначеЕсли РезультатЗапуска.Статус = "Ошибка" Тогда
		ВызватьИсключение РезультатЗапуска.ПодробноеПредставлениеОшибки;
		
	КонецЕсли;
	
	Возврат РезультатЗапуска;
	
КонецФункции

&НаСервере
Функция ПараметрыАвтозаполнения(ЗаполнятьВсеРазделы)
	
	ИмяТекущегоРаздела = СтруктураРеквизитовФормы.НаимТекущегоРаздела;
	
	// Адрес результата автозаполнения.
	СтруктураРеквизитовФормы.АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
	
	ПараметрыАвтозаполнения = Новый Структура;
	
	ПараметрыАвтозаполнения.Вставить("Организация",                  СтруктураРеквизитовФормы.Организация);
	ПараметрыАвтозаполнения.Вставить("мДатаНачалаПериодаОтчета",     НачалоДня(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета));
	ПараметрыАвтозаполнения.Вставить("мДатаКонцаПериодаОтчета",      КонецДня(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета));
	
	ПараметрыАвтозаполнения.Вставить("УникальныйИдентификаторФормы", ЭтаФорма.УникальныйИдентификатор);
	ПараметрыАвтозаполнения.Вставить("АдресВоВременномХранилище",    СтруктураРеквизитовФормы.АдресВоВременномХранилище);
	
	ПараметрыАвтозаполнения.Вставить("РегламентированныйОтчет", СтруктураРеквизитовФормы.мСохраненныйДок);
	
	ПараметрыАвтозаполнения.Вставить("ПрименениеУСН0", СтруктураРеквизитовФормы.ПрименениеУСН0);
	ПараметрыАвтозаполнения.Вставить("ПрименениеУСН1", СтруктураРеквизитовФормы.ПрименениеУСН1);
	
	Если НЕ ЗаполнятьВсеРазделы
	   И СтруктураРеквизитовФормы.АдресВременногоХранилищаРасшифровки <> Неопределено Тогда
		РасшифровкиПоказателей = ПолучитьИзВременногоХранилища(СтруктураРеквизитовФормы.АдресВременногоХранилищаРасшифровки);
	Иначе
		РасшифровкиПоказателей = Неопределено;
	КонецЕсли;
	ПараметрыАвтозаполнения.Вставить("РасшифровкиПоказателей", РасшифровкиПоказателей);
	
	НомерСтраницы = Неопределено;
	Если НЕ ЗаполнятьВсеРазделы Тогда
		Если СтруктураРеквизитовФормы.НомерСтраницыТекущегоРаздела.Количество() > 0 Тогда
			НомерСтраницы = СтруктураРеквизитовФормы.НомерСтраницыТекущегоРаздела[0];
		КонецЕсли;
	КонецЕсли;
	
	УсловияВключенияРазделов = Новый Структура;
	УсловияВключенияРазделов.Вставить("ЗаполнятьВсеРазделы", ЗаполнятьВсеРазделы);
	УсловияВключенияРазделов.Вставить("АктивныйРаздел", ИмяТекущегоРаздела);
	УсловияВключенияРазделов.Вставить("НомерСтраницыРаздела", НомерСтраницы);
	
	ДополнитьПараметрыАвтозаполнения_Баланс(ПараметрыАвтозаполнения, УсловияВключенияРазделов);
	
	ДополнитьПараметрыАвтозаполнения_ОФР(ПараметрыАвтозаполнения, УсловияВключенияРазделов);
	
	ДополнитьПараметрыАвтозаполнения_ОИК(ПараметрыАвтозаполнения, УсловияВключенияРазделов);
	
	ДополнитьПараметрыАвтозаполнения_ОДДС(ПараметрыАвтозаполнения, УсловияВключенияРазделов);
	
	ДополнитьПараметрыАвтозаполнения_ОЦИС(ПараметрыАвтозаполнения, УсловияВключенияРазделов);
	
	ДополнитьПараметрыАвтозаполнения_ДополнительныеПоказатели(ПараметрыАвтозаполнения, УсловияВключенияРазделов);
	
	ИмяКорневогоРаздела = "РасшифровкиОбеспечений";
	АдресДанныхКорневогоРаздела = СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяКорневогоРаздела];
	ДанныеКорневогоРаздела = ПолучитьИзВременногоХранилища(АдресДанныхКорневогоРаздела);
	ПараметрыАвтозаполнения.Вставить(ИмяКорневогоРаздела + "_ДанныеРаздела", ДанныеКорневогоРаздела);
	
	ДополнитьПараметрыАвтозаполнения_РасшифровкиОбеспеченийПолученные(ПараметрыАвтозаполнения, УсловияВключенияРазделов);
	ДополнитьПараметрыАвтозаполнения_РасшифровкиОбеспеченийВыданные(ПараметрыАвтозаполнения, УсловияВключенияРазделов);
	
	ИмяКорневогоРаздела = "ЗадолженностьПоКредитамЗаймам";
	АдресДанныхКорневогоРаздела = СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяКорневогоРаздела];
	ДанныеКорневогоРаздела = ПолучитьИзВременногоХранилища(АдресДанныхКорневогоРаздела);
	ПараметрыАвтозаполнения.Вставить(ИмяКорневогоРаздела + "_ДанныеРаздела", ДанныеКорневогоРаздела);
	
	ДополнитьПараметрыАвтозаполнения_ЗадолженностьПоКредитамЗаймамКраткосрочная(ПараметрыАвтозаполнения, УсловияВключенияРазделов);
	ДополнитьПараметрыАвтозаполнения_ЗадолженностьПоКредитамЗаймамДолгосрочная(ПараметрыАвтозаполнения, УсловияВключенияРазделов);
	
	ДополнитьПараметрыАвтозаполнения_ЛизингОбязательства(ПараметрыАвтозаполнения, УсловияВключенияРазделов);
	
	ИмяКорневогоРаздела = "ДенежныеСредства";
	АдресДанныхКорневогоРаздела = СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяКорневогоРаздела];
	ДанныеКорневогоРаздела = ПолучитьИзВременногоХранилища(АдресДанныхКорневогоРаздела);
	ПараметрыАвтозаполнения.Вставить(ИмяКорневогоРаздела + "_ДанныеРаздела", ДанныеКорневогоРаздела);
	
	ДополнитьПараметрыАвтозаполнения_ДенежныеСредства50(ПараметрыАвтозаполнения, УсловияВключенияРазделов);
	ДополнитьПараметрыАвтозаполнения_ДенежныеСредства51(ПараметрыАвтозаполнения, УсловияВключенияРазделов);
	ДополнитьПараметрыАвтозаполнения_ДенежныеСредства52(ПараметрыАвтозаполнения, УсловияВключенияРазделов);
	ДополнитьПараметрыАвтозаполнения_ДенежныеСредства55(ПараметрыАвтозаполнения, УсловияВключенияРазделов);
	
	ДополнитьПараметрыАвтозаполнения_ОСВ(ПараметрыАвтозаполнения, УсловияВключенияРазделов);
	
	ДополнитьПараметрыАвтозаполнения_ОСВПоСчету(ПараметрыАвтозаполнения, УсловияВключенияРазделов);
	
	ДополнитьПараметрыАвтозаполнения_АнализСчета(ПараметрыАвтозаполнения, УсловияВключенияРазделов);
	
	ИмяКорневогоРаздела = "ОперацииПоБанковскимСчетам";
	АдресДанныхКорневогоРаздела = СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяКорневогоРаздела];
	ДанныеКорневогоРаздела = ПолучитьИзВременногоХранилища(АдресДанныхКорневогоРаздела);
	ПараметрыАвтозаполнения.Вставить(ИмяКорневогоРаздела + "_ДанныеРаздела", ДанныеКорневогоРаздела);
	
	ДополнитьПараметрыАвтозаполнения_Операции51(ПараметрыАвтозаполнения, УсловияВключенияРазделов);
	ДополнитьПараметрыАвтозаполнения_Операции52(ПараметрыАвтозаполнения, УсловияВключенияРазделов);
	ДополнитьПараметрыАвтозаполнения_Операции55(ПараметрыАвтозаполнения, УсловияВключенияРазделов);
	
	ИмяКорневогоРаздела = "ДебКредЗадолженность";
	АдресДанныхКорневогоРаздела = СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяКорневогоРаздела];
	ДанныеКорневогоРаздела = ПолучитьИзВременногоХранилища(АдресДанныхКорневогоРаздела);
	ПараметрыАвтозаполнения.Вставить(ИмяКорневогоРаздела + "_ДанныеРаздела", ДанныеКорневогоРаздела);
	
	ДополнитьПараметрыАвтозаполнения_Дебиторская(ПараметрыАвтозаполнения, УсловияВключенияРазделов);
	ДополнитьПараметрыАвтозаполнения_Кредиторская(ПараметрыАвтозаполнения, УсловияВключенияРазделов);
	
	ДополнитьПараметрыАвтозаполнения_ДоходыРасходы(ПараметрыАвтозаполнения, УсловияВключенияРазделов);
	
	ИмяКорневогоРаздела = "ФинансовыеВложения";
	АдресДанныхКорневогоРаздела = СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяКорневогоРаздела];
	ДанныеКорневогоРаздела = ПолучитьИзВременногоХранилища(АдресДанныхКорневогоРаздела);
	ПараметрыАвтозаполнения.Вставить(ИмяКорневогоРаздела + "_ДанныеРаздела", ДанныеКорневогоРаздела);
	
	ДополнитьПараметрыАвтозаполнения_ФинансовыеВложенияКраткосрочные(ПараметрыАвтозаполнения, УсловияВключенияРазделов);
	ДополнитьПараметрыАвтозаполнения_ФинансовыеВложенияДолгосрочные(ПараметрыАвтозаполнения, УсловияВключенияРазделов);
	
	ДополнитьПараметрыАвтозаполнения_СтруктураВыручки(ПараметрыАвтозаполнения, УсловияВключенияРазделов);
	ДополнитьПараметрыАвтозаполнения_ПрочиеПоказатели(ПараметрыАвтозаполнения, УсловияВключенияРазделов);
	
	Возврат ПараметрыАвтозаполнения;
	
КонецФункции

&НаСервере
Процедура ДополнитьПараметрыАвтозаполнения_Баланс(ПараметрыАвтозаполнения, УсловияВключенияРазделов)
	
	ИмяРаздела    = "Баланс";
	НомерСтраницы = УсловияВключенияРазделов.НомерСтраницыРаздела;
	
	Если НЕ ЗаполнятьРазделПоСведениямИБ(ИмяРаздела, УсловияВключенияРазделов) Тогда
		Возврат;
	КонецЕсли;
	
	АдресДанныхРаздела = СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяРаздела];
	ДанныеРаздела = ПолучитьИзВременногоХранилища(АдресДанныхРаздела);
	
	ПараметрыАвтозаполнения.Вставить("Заполнять" + ИмяРаздела, Истина);
	ПараметрыАвтозаполнения.Вставить(ИмяРаздела + "_АдресДанныхРаздела", АдресДанныхРаздела);
	ПараметрыАвтозаполнения.Вставить(ИмяРаздела + "_ДанныеРаздела", ДанныеРаздела);
	ПараметрыАвтозаполнения.Вставить(ИмяРаздела + "_ЗаполняемыеСтраницы", НомерСтраницы);
	
КонецПроцедуры

&НаСервере
Процедура ДополнитьПараметрыАвтозаполнения_ОФР(ПараметрыАвтозаполнения, УсловияВключенияРазделов)
	
	ИмяРаздела = "ОФР";
	НомерСтраницы = УсловияВключенияРазделов.НомерСтраницыРаздела;
	
	Если НЕ ЗаполнятьРазделПоСведениямИБ(ИмяРаздела, УсловияВключенияРазделов) Тогда
		Возврат;
	КонецЕсли;
	
	АдресДанныхРаздела = СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяРаздела];
	ДанныеРаздела = ПолучитьИзВременногоХранилища(АдресДанныхРаздела);
	
	ПараметрыАвтозаполнения.Вставить("Заполнять" + ИмяРаздела, Истина);
	ПараметрыАвтозаполнения.Вставить(ИмяРаздела + "_АдресДанныхРаздела", АдресДанныхРаздела);
	ПараметрыАвтозаполнения.Вставить(ИмяРаздела + "_ДанныеРаздела", ДанныеРаздела);
	ПараметрыАвтозаполнения.Вставить(ИмяРаздела + "_ЗаполняемыеСтраницы", НомерСтраницы);
	
КонецПроцедуры

&НаСервере
Процедура ДополнитьПараметрыАвтозаполнения_ОИК(ПараметрыАвтозаполнения, УсловияВключенияРазделов)
	
	ИмяРаздела = "ОИК";
	НомерСтраницы = УсловияВключенияРазделов.НомерСтраницыРаздела;
	
	Если НЕ ЗаполнятьРазделПоСведениямИБ(ИмяРаздела, УсловияВключенияРазделов) Тогда
		Возврат;
	КонецЕсли;
	
	АдресДанныхРаздела = СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяРаздела];
	ДанныеРаздела = ПолучитьИзВременногоХранилища(АдресДанныхРаздела);
	
	ПараметрыАвтозаполнения.Вставить("Заполнять" + ИмяРаздела, Истина);
	ПараметрыАвтозаполнения.Вставить(ИмяРаздела + "_АдресДанныхРаздела", АдресДанныхРаздела);
	ПараметрыАвтозаполнения.Вставить(ИмяРаздела + "_ДанныеРаздела", ДанныеРаздела);
	ПараметрыАвтозаполнения.Вставить(ИмяРаздела + "_ЗаполняемыеСтраницы", НомерСтраницы);
	
КонецПроцедуры

&НаСервере
Процедура ДополнитьПараметрыАвтозаполнения_ОДДС(ПараметрыАвтозаполнения, УсловияВключенияРазделов)
	
	ИмяРаздела = "ОДДС";
	НомерСтраницы = УсловияВключенияРазделов.НомерСтраницыРаздела;
	
	Если НЕ ЗаполнятьРазделПоСведениямИБ(ИмяРаздела, УсловияВключенияРазделов) Тогда
		Возврат;
	КонецЕсли;
	
	АдресДанныхРаздела = СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяРаздела];
	ДанныеРаздела = ПолучитьИзВременногоХранилища(АдресДанныхРаздела);
	
	ПараметрыАвтозаполнения.Вставить("Заполнять" + ИмяРаздела, Истина);
	ПараметрыАвтозаполнения.Вставить(ИмяРаздела + "_АдресДанныхРаздела", АдресДанныхРаздела);
	ПараметрыАвтозаполнения.Вставить(ИмяРаздела + "_ДанныеРаздела", ДанныеРаздела);
	ПараметрыАвтозаполнения.Вставить(ИмяРаздела + "_ЗаполняемыеСтраницы", НомерСтраницы);
	
КонецПроцедуры

&НаСервере
Процедура ДополнитьПараметрыАвтозаполнения_ОЦИС(ПараметрыАвтозаполнения, УсловияВключенияРазделов)
	
	ИмяРаздела = "ОЦИС";
	НомерСтраницы = УсловияВключенияРазделов.НомерСтраницыРаздела;
	
	Если НЕ ЗаполнятьРазделПоСведениямИБ(ИмяРаздела, УсловияВключенияРазделов) Тогда
		Возврат;
	КонецЕсли;
	
	АдресДанныхРаздела = СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяРаздела];
	ДанныеРаздела = ПолучитьИзВременногоХранилища(АдресДанныхРаздела);
	
	ПараметрыАвтозаполнения.Вставить("Заполнять" + ИмяРаздела, Истина);
	ПараметрыАвтозаполнения.Вставить(ИмяРаздела + "_АдресДанныхРаздела", АдресДанныхРаздела);
	ПараметрыАвтозаполнения.Вставить(ИмяРаздела + "_ДанныеРаздела", ДанныеРаздела);
	ПараметрыАвтозаполнения.Вставить(ИмяРаздела + "_ЗаполняемыеСтраницы", НомерСтраницы);
	
КонецПроцедуры

&НаСервере
Процедура ДополнитьПараметрыАвтозаполнения_ДополнительныеПоказатели(ПараметрыАвтозаполнения, УсловияВключенияРазделов)
	
	ИмяРаздела = "ДополнительныеПоказатели";
	НомерСтраницы = УсловияВключенияРазделов.НомерСтраницыРаздела;
	
	Если НЕ ЗаполнятьРазделПоСведениямИБ(ИмяРаздела, УсловияВключенияРазделов) Тогда
		Возврат;
	КонецЕсли;
	
	АдресДанныхРаздела = СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяРаздела];
	ДанныеРаздела = ПолучитьИзВременногоХранилища(АдресДанныхРаздела);
	
	ПараметрыАвтозаполнения.Вставить("Заполнять" + ИмяРаздела, Истина);
	ПараметрыАвтозаполнения.Вставить(ИмяРаздела + "_АдресДанныхРаздела", АдресДанныхРаздела);
	ПараметрыАвтозаполнения.Вставить(ИмяРаздела + "_ДанныеРаздела", ДанныеРаздела);
	ПараметрыАвтозаполнения.Вставить(ИмяРаздела + "_ЗаполняемыеСтраницы", НомерСтраницы);
	
КонецПроцедуры

&НаСервере
Процедура ДополнитьПараметрыАвтозаполнения_РасшифровкиОбеспеченийПолученные(ПараметрыАвтозаполнения, УсловияВключенияРазделов)
	
	ИмяРаздела = "РасшифровкиОбеспеченийПолученные";
	НомерСтраницы = УсловияВключенияРазделов.НомерСтраницыРаздела;
	
	Если НЕ ЗаполнятьРазделПоСведениямИБ(ИмяРаздела, УсловияВключенияРазделов) Тогда
		Возврат;
	КонецЕсли;
	
	ИмяКорневогоРаздела = мСтруктураМногоуровневыхРазделов[ИмяРаздела].КорневойРаздел;
	АдресДанныхРаздела = СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяКорневогоРаздела];
	ДанныеРаздела = ПолучитьИзВременногоХранилища(АдресДанныхРаздела);
	
	ПараметрыАвтозаполнения.Вставить("Заполнять" + ИмяРаздела, Истина);
	ПараметрыАвтозаполнения.Вставить(ИмяРаздела + "_АдресДанныхРаздела", АдресДанныхРаздела);
	ПараметрыАвтозаполнения.Вставить(ИмяРаздела + "_ЗаполняемыеСтраницы", НомерСтраницы);
	ПараметрыАвтозаполнения.Вставить(ИмяРаздела + "_МакетРаздела", МакетРаздела(ИмяРаздела));
	
	Если ДействуетСВерсииФормата("5.10.01") Тогда
		ПараметрыОтчета = ДанныеРаздела.Строки[0].Строки[0].Строки[0].Параметры;
		ПараметрыОтчета.СтатусЗаполнения = "заполнен";
		ПоместитьВоВременноеХранилище(ДанныеРаздела, АдресДанныхРаздела);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДополнитьПараметрыАвтозаполнения_РасшифровкиОбеспеченийВыданные(ПараметрыАвтозаполнения, УсловияВключенияРазделов)
	
	ИмяРаздела = "РасшифровкиОбеспеченийВыданные";
	НомерСтраницы = УсловияВключенияРазделов.НомерСтраницыРаздела;
	
	Если НЕ ЗаполнятьРазделПоСведениямИБ(ИмяРаздела, УсловияВключенияРазделов) Тогда
		Возврат;
	КонецЕсли;
	
	ИмяКорневогоРаздела = мСтруктураМногоуровневыхРазделов[ИмяРаздела].КорневойРаздел;
	АдресДанныхРаздела = СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяКорневогоРаздела];
	ДанныеРаздела = ПолучитьИзВременногоХранилища(АдресДанныхРаздела);
	
	ПараметрыАвтозаполнения.Вставить("Заполнять" + ИмяРаздела, Истина);
	ПараметрыАвтозаполнения.Вставить(ИмяРаздела + "_АдресДанныхРаздела", АдресДанныхРаздела);
	ПараметрыАвтозаполнения.Вставить(ИмяРаздела + "_ЗаполняемыеСтраницы", НомерСтраницы);
	ПараметрыАвтозаполнения.Вставить(ИмяРаздела + "_МакетРаздела", МакетРаздела(ИмяРаздела));
	
	Если ДействуетСВерсииФормата("5.10.01") Тогда
		ПараметрыОтчета = ДанныеРаздела.Строки[0].Строки[1].Строки[0].Параметры;
		ПараметрыОтчета.СтатусЗаполнения = "заполнен";
		ПоместитьВоВременноеХранилище(ДанныеРаздела, АдресДанныхРаздела);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДополнитьПараметрыАвтозаполнения_ЗадолженностьПоКредитамЗаймамКраткосрочная(ПараметрыАвтозаполнения, УсловияВключенияРазделов)
	
	ИмяРаздела = "ЗадолженностьПоКредитамЗаймамКраткосрочная";
	НомерСтраницы = УсловияВключенияРазделов.НомерСтраницыРаздела;
	
	Если НЕ ЗаполнятьРазделПоСведениямИБ(ИмяРаздела, УсловияВключенияРазделов) Тогда
		Возврат;
	КонецЕсли;
	
	ИмяКорневогоРаздела = мСтруктураМногоуровневыхРазделов[ИмяРаздела].КорневойРаздел;
	АдресДанныхРаздела = СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяКорневогоРаздела];
	
	ДанныеРаздела = ПолучитьИзВременногоХранилища(АдресДанныхРаздела);
	ПараметрыОтчета = ДанныеРаздела.Строки[0].Строки[0].Строки[0].Параметры;
	
	Если ПараметрыОтчета.Свойство("ДатаНачалаОтчета") Тогда
		ДатаНачалаОтчета = ПараметрыОтчета.ДатаНачалаОтчета;
		ДатаКонцаОтчета  = ПараметрыОтчета.ДатаКонцаОтчета;
	Иначе
		ДатаНачалаОтчета = НачалоКвартала(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
		ДатаКонцаОтчета  = КонецКвартала(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	КонецЕсли;
	
	ПараметрыАвтозаполнения.Вставить("Заполнять" + ИмяРаздела, Истина);
	ПараметрыАвтозаполнения.Вставить(ИмяРаздела + "_АдресДанныхРаздела", АдресДанныхРаздела);
	ПараметрыАвтозаполнения.Вставить(ИмяРаздела + "_ЗаполняемыеСтраницы", НомерСтраницы);
	ПараметрыАвтозаполнения.Вставить(ИмяРаздела + "_МакетРаздела", МакетРаздела(ИмяРаздела));
	
	ПараметрыАвтозаполнения.Вставить(ИмяРаздела + "_ДатаНачалаОтчета", ДатаНачалаОтчета);
	ПараметрыАвтозаполнения.Вставить(ИмяРаздела + "_ДатаКонцаОтчета", ДатаКонцаОтчета);
	
	Если ДействуетСВерсииФормата("5.10.01") Тогда
		ПараметрыОтчета.СтатусЗаполнения = "заполнен";
		ПоместитьВоВременноеХранилище(ДанныеРаздела, АдресДанныхРаздела);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДополнитьПараметрыАвтозаполнения_ЗадолженностьПоКредитамЗаймамДолгосрочная(ПараметрыАвтозаполнения, УсловияВключенияРазделов)
	
	ИмяРаздела = "ЗадолженностьПоКредитамЗаймамДолгосрочная";
	НомерСтраницы = УсловияВключенияРазделов.НомерСтраницыРаздела;
	
	Если НЕ ЗаполнятьРазделПоСведениямИБ(ИмяРаздела, УсловияВключенияРазделов) Тогда
		Возврат;
	КонецЕсли;
	
	ИмяКорневогоРаздела = мСтруктураМногоуровневыхРазделов[ИмяРаздела].КорневойРаздел;
	АдресДанныхРаздела = СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяКорневогоРаздела];
	
	ДанныеРаздела = ПолучитьИзВременногоХранилища(АдресДанныхРаздела);
	ПараметрыОтчета = ДанныеРаздела.Строки[0].Строки[1].Строки[0].Параметры;
	
	Если ПараметрыОтчета.Свойство("ДатаНачалаОтчета") Тогда
		ДатаНачалаОтчета = ПараметрыОтчета.ДатаНачалаОтчета;
		ДатаКонцаОтчета  = ПараметрыОтчета.ДатаКонцаОтчета;
	Иначе
		ДатаНачалаОтчета = НачалоКвартала(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
		ДатаКонцаОтчета  = КонецКвартала(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	КонецЕсли;
	
	ПараметрыАвтозаполнения.Вставить("Заполнять" + ИмяРаздела, Истина);
	ПараметрыАвтозаполнения.Вставить(ИмяРаздела + "_АдресДанныхРаздела", АдресДанныхРаздела);
	ПараметрыАвтозаполнения.Вставить(ИмяРаздела + "_ЗаполняемыеСтраницы", НомерСтраницы);
	ПараметрыАвтозаполнения.Вставить(ИмяРаздела + "_МакетРаздела", МакетРаздела(ИмяРаздела));
	
	ПараметрыАвтозаполнения.Вставить(ИмяРаздела + "_ДатаНачалаОтчета", ДатаНачалаОтчета);
	ПараметрыАвтозаполнения.Вставить(ИмяРаздела + "_ДатаКонцаОтчета", ДатаКонцаОтчета);
	
	Если ДействуетСВерсииФормата("5.10.01") Тогда
		ПараметрыОтчета.СтатусЗаполнения = "заполнен";
		ПоместитьВоВременноеХранилище(ДанныеРаздела, АдресДанныхРаздела);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДополнитьПараметрыАвтозаполнения_ЛизингОбязательства(ПараметрыАвтозаполнения, УсловияВключенияРазделов)
	
	ИмяРаздела = "ЛизингОбязательства";
	НомерСтраницы = УсловияВключенияРазделов.НомерСтраницыРаздела;
	
	Если НЕ ЗаполнятьРазделПоСведениямИБ(ИмяРаздела, УсловияВключенияРазделов) Тогда
		Возврат;
	КонецЕсли;
	
	АдресДанныхРаздела = СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяРаздела];
	ДанныеРаздела = ПолучитьИзВременногоХранилища(АдресДанныхРаздела);
	
	ПараметрыАвтозаполнения.Вставить("Заполнять" + ИмяРаздела, Истина);
	ПараметрыАвтозаполнения.Вставить(ИмяРаздела + "_АдресДанныхРаздела", АдресДанныхРаздела);
	ПараметрыАвтозаполнения.Вставить(ИмяРаздела + "_ДанныеРаздела", ДанныеРаздела);
	ПараметрыАвтозаполнения.Вставить(ИмяРаздела + "_ЗаполняемыеСтраницы", НомерСтраницы);
	
	Если ДействуетСВерсииФормата("5.10.01") Тогда
		ПараметрыОтчета = ДанныеРаздела.Строки[0].Строки[0].Строки[0].Параметры;
		ПараметрыОтчета.СтатусЗаполнения = "заполнен";
		ПоместитьВоВременноеХранилище(ДанныеРаздела, АдресДанныхРаздела);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДополнитьПараметрыАвтозаполнения_ДенежныеСредства50(ПараметрыАвтозаполнения, УсловияВключенияРазделов)
	
	ИмяРаздела = "ДенежныеСредства50";
	НомерСтраницы = УсловияВключенияРазделов.НомерСтраницыРаздела;
	
	Если НЕ ЗаполнятьРазделПоСведениямИБ(ИмяРаздела, УсловияВключенияРазделов) Тогда
		Возврат;
	КонецЕсли;
	
	ИмяКорневогоРаздела = мСтруктураМногоуровневыхРазделов[ИмяРаздела].КорневойРаздел;
	
	МакетРаздела = МакетРаздела(ИмяРаздела);
	МакетРаздела.Области.ЕдиницаИзмерения.Текст =
		ПредставлениеЕдиницыИзмерения(СтруктураРеквизитовФормы.ЕдиницаИзмерения);
	МакетРаздела.Области.ЕдиницаИзмеренияКасса.Текст =
		ПредставлениеЕдиницыИзмерения(СтруктураРеквизитовФормы.ЕдиницаИзмерения);
	
	АдресДанныхРаздела = СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяКорневогоРаздела];
	ДанныеРаздела = ПолучитьИзВременногоХранилища(АдресДанныхРаздела);
	
	ПараметрыАвтозаполнения.Вставить("Заполнять" + ИмяРаздела, Истина);
	ПараметрыАвтозаполнения.Вставить(ИмяРаздела + "_АдресДанныхРаздела", АдресДанныхРаздела);
	ПараметрыАвтозаполнения.Вставить(ИмяРаздела + "_ДанныеРаздела", ДанныеРаздела);
	ПараметрыАвтозаполнения.Вставить(ИмяРаздела + "_ЗаполняемыеСтраницы", НомерСтраницы);
	ПараметрыАвтозаполнения.Вставить(ИмяРаздела + "_МакетРаздела", МакетРаздела);
	ПараметрыАвтозаполнения.Вставить(ИмяРаздела + "_Делитель", ДелительПоЕдиницеИзмерения(СтруктураРеквизитовФормы.ЕдиницаИзмерения));
	
КонецПроцедуры

&НаСервере
Процедура ДополнитьПараметрыАвтозаполнения_ДенежныеСредства51(ПараметрыАвтозаполнения, УсловияВключенияРазделов)
	
	ИмяРаздела = "ДенежныеСредства51";
	НомерСтраницы = УсловияВключенияРазделов.НомерСтраницыРаздела;
	
	Если НЕ ЗаполнятьРазделПоСведениямИБ(ИмяРаздела, УсловияВключенияРазделов) Тогда
		Возврат;
	КонецЕсли;
	
	ИмяКорневогоРаздела = мСтруктураМногоуровневыхРазделов[ИмяРаздела].КорневойРаздел;
	
	МакетРаздела = МакетРаздела(ИмяРаздела);
	МакетРаздела.Области.ЕдиницаИзмерения.Текст =
		ПредставлениеЕдиницыИзмерения(СтруктураРеквизитовФормы.ЕдиницаИзмерения);
	МакетРаздела.Области.ЕдиницаИзмеренияКасса.Текст =
		ПредставлениеЕдиницыИзмерения(СтруктураРеквизитовФормы.ЕдиницаИзмерения);
	
	АдресДанныхРаздела = СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяКорневогоРаздела];
	ДанныеРаздела = ПолучитьИзВременногоХранилища(АдресДанныхРаздела);
	
	ПараметрыАвтозаполнения.Вставить("Заполнять" + ИмяРаздела, Истина);
	ПараметрыАвтозаполнения.Вставить(ИмяРаздела + "_АдресДанныхРаздела", АдресДанныхРаздела);
	ПараметрыАвтозаполнения.Вставить(ИмяРаздела + "_ДанныеРаздела", ДанныеРаздела);
	ПараметрыАвтозаполнения.Вставить(ИмяРаздела + "_ЗаполняемыеСтраницы", НомерСтраницы);
	ПараметрыАвтозаполнения.Вставить(ИмяРаздела + "_МакетРаздела", МакетРаздела);
	ПараметрыАвтозаполнения.Вставить(ИмяРаздела + "_Делитель", ДелительПоЕдиницеИзмерения(СтруктураРеквизитовФормы.ЕдиницаИзмерения));
	
КонецПроцедуры

&НаСервере
Процедура ДополнитьПараметрыАвтозаполнения_ДенежныеСредства52(ПараметрыАвтозаполнения, УсловияВключенияРазделов)
	
	ИмяРаздела = "ДенежныеСредства52";
	НомерСтраницы = УсловияВключенияРазделов.НомерСтраницыРаздела;
	
	Если НЕ ЗаполнятьРазделПоСведениямИБ(ИмяРаздела, УсловияВключенияРазделов) Тогда
		Возврат;
	КонецЕсли;
	
	ИмяКорневогоРаздела = мСтруктураМногоуровневыхРазделов[ИмяРаздела].КорневойРаздел;
	
	МакетРаздела = МакетРаздела(ИмяРаздела);
	МакетРаздела.Области.ЕдиницаИзмерения.Текст =
		ПредставлениеЕдиницыИзмерения(СтруктураРеквизитовФормы.ЕдиницаИзмерения);
	МакетРаздела.Области.ЕдиницаИзмеренияКасса.Текст =
		ПредставлениеЕдиницыИзмерения(СтруктураРеквизитовФормы.ЕдиницаИзмерения);
	
	АдресДанныхРаздела = СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяКорневогоРаздела];
	ДанныеРаздела = ПолучитьИзВременногоХранилища(АдресДанныхРаздела);
	
	ПараметрыАвтозаполнения.Вставить("Заполнять" + ИмяРаздела, Истина);
	ПараметрыАвтозаполнения.Вставить(ИмяРаздела + "_АдресДанныхРаздела", АдресДанныхРаздела);
	ПараметрыАвтозаполнения.Вставить(ИмяРаздела + "_ДанныеРаздела", ДанныеРаздела);
	ПараметрыАвтозаполнения.Вставить(ИмяРаздела + "_ЗаполняемыеСтраницы", НомерСтраницы);
	ПараметрыАвтозаполнения.Вставить(ИмяРаздела + "_МакетРаздела", МакетРаздела);
	ПараметрыАвтозаполнения.Вставить(ИмяРаздела + "_Делитель", ДелительПоЕдиницеИзмерения(СтруктураРеквизитовФормы.ЕдиницаИзмерения));
	
КонецПроцедуры

&НаСервере
Процедура ДополнитьПараметрыАвтозаполнения_ДенежныеСредства55(ПараметрыАвтозаполнения, УсловияВключенияРазделов)
	
	ИмяРаздела = "ДенежныеСредства55";
	НомерСтраницы = УсловияВключенияРазделов.НомерСтраницыРаздела;
	
	Если НЕ ЗаполнятьРазделПоСведениямИБ(ИмяРаздела, УсловияВключенияРазделов) Тогда
		Возврат;
	КонецЕсли;
	
	ИмяКорневогоРаздела = мСтруктураМногоуровневыхРазделов[ИмяРаздела].КорневойРаздел;
	
	МакетРаздела = МакетРаздела(ИмяРаздела);
	МакетРаздела.Области.ЕдиницаИзмерения.Текст =
		ПредставлениеЕдиницыИзмерения(СтруктураРеквизитовФормы.ЕдиницаИзмерения);
	МакетРаздела.Области.ЕдиницаИзмеренияКасса.Текст =
		ПредставлениеЕдиницыИзмерения(СтруктураРеквизитовФормы.ЕдиницаИзмерения);
	
	АдресДанныхРаздела = СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяКорневогоРаздела];
	ДанныеРаздела = ПолучитьИзВременногоХранилища(АдресДанныхРаздела);
	
	ПараметрыАвтозаполнения.Вставить("Заполнять" + ИмяРаздела, Истина);
	ПараметрыАвтозаполнения.Вставить(ИмяРаздела + "_АдресДанныхРаздела", АдресДанныхРаздела);
	ПараметрыАвтозаполнения.Вставить(ИмяРаздела + "_ДанныеРаздела", ДанныеРаздела);
	ПараметрыАвтозаполнения.Вставить(ИмяРаздела + "_ЗаполняемыеСтраницы", НомерСтраницы);
	ПараметрыАвтозаполнения.Вставить(ИмяРаздела + "_МакетРаздела", МакетРаздела);
	ПараметрыАвтозаполнения.Вставить(ИмяРаздела + "_Делитель", ДелительПоЕдиницеИзмерения(СтруктураРеквизитовФормы.ЕдиницаИзмерения));
	
КонецПроцедуры

&НаСервере
Процедура ДополнитьПараметрыАвтозаполнения_ОСВ(ПараметрыАвтозаполнения, УсловияВключенияРазделов)
	
	ИмяРаздела = "ОСВ";
	НомерСтраницы = УсловияВключенияРазделов.НомерСтраницыРаздела;
	
	Если НЕ ЗаполнятьРазделПоСведениямИБ(ИмяРаздела, УсловияВключенияРазделов) Тогда
		Возврат;
	КонецЕсли;
	
	АдресДанныхРаздела = СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяРаздела];
	ДанныеРаздела = ПолучитьИзВременногоХранилища(АдресДанныхРаздела);
	
	ПараметрыАвтозаполнения.Вставить("Заполнять" + ИмяРаздела, Истина);
	ПараметрыАвтозаполнения.Вставить(ИмяРаздела + "_АдресДанныхРаздела", АдресДанныхРаздела);
	ПараметрыАвтозаполнения.Вставить(ИмяРаздела + "_ДанныеРаздела", ДанныеРаздела);
	ПараметрыАвтозаполнения.Вставить(ИмяРаздела + "_ЗаполняемыеСтраницы", НомерСтраницы);
	ПараметрыАвтозаполнения.Вставить(ИмяРаздела + "_МакетРаздела", МакетРаздела(ИмяРаздела));
	
КонецПроцедуры

&НаСервере
Процедура ДополнитьПараметрыАвтозаполнения_ОСВПоСчету(ПараметрыАвтозаполнения, УсловияВключенияРазделов)
	
	ИмяРаздела = "ОСВПоСчету";
	НомерСтраницы = УсловияВключенияРазделов.НомерСтраницыРаздела;
	
	Если НЕ ЗаполнятьРазделПоСведениямИБ(ИмяРаздела, УсловияВключенияРазделов) Тогда
		Возврат;
	КонецЕсли;
	
	АдресДанныхРаздела = СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяРаздела];
	ДанныеРаздела = ПолучитьИзВременногоХранилища(АдресДанныхРаздела);
	
	ПараметрыАвтозаполнения.Вставить("Заполнять" + ИмяРаздела, Истина);
	ПараметрыАвтозаполнения.Вставить(ИмяРаздела + "_АдресДанныхРаздела", АдресДанныхРаздела);
	ПараметрыАвтозаполнения.Вставить(ИмяРаздела + "_ДанныеРаздела", ДанныеРаздела);
	ПараметрыАвтозаполнения.Вставить(ИмяРаздела + "_ЗаполняемыеСтраницы", НомерСтраницы);
	ПараметрыАвтозаполнения.Вставить(ИмяРаздела + "_МакетРаздела", МакетРаздела(ИмяРаздела));
	ПараметрыАвтозаполнения.Вставить(ИмяРаздела + "_Счета", РеквизитФормыВЗначение("СписокСтраницОСВПоСчету"));
	
КонецПроцедуры

&НаСервере
Процедура ДополнитьПараметрыАвтозаполнения_АнализСчета(ПараметрыАвтозаполнения, УсловияВключенияРазделов)
	
	ИмяРаздела = "АнализСчета";
	НомерСтраницы = УсловияВключенияРазделов.НомерСтраницыРаздела;
	
	Если НЕ ЗаполнятьРазделПоСведениямИБ(ИмяРаздела, УсловияВключенияРазделов) Тогда
		Возврат;
	КонецЕсли;
	
	АдресДанныхРаздела = СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяРаздела];
	ДанныеРаздела = ПолучитьИзВременногоХранилища(АдресДанныхРаздела);
	
	ПараметрыАвтозаполнения.Вставить("Заполнять" + ИмяРаздела, Истина);
	ПараметрыАвтозаполнения.Вставить(ИмяРаздела + "_АдресДанныхРаздела", АдресДанныхРаздела);
	ПараметрыАвтозаполнения.Вставить(ИмяРаздела + "_ДанныеРаздела", ДанныеРаздела);
	ПараметрыАвтозаполнения.Вставить(ИмяРаздела + "_ЗаполняемыеСтраницы", НомерСтраницы);
	ПараметрыАвтозаполнения.Вставить(ИмяРаздела + "_МакетРаздела", МакетРаздела(ИмяРаздела));
	ПараметрыАвтозаполнения.Вставить(ИмяРаздела + "_Счета", РеквизитФормыВЗначение("СписокСтраницАнализСчета"));
	
КонецПроцедуры

&НаСервере
Процедура ДополнитьПараметрыАвтозаполнения_Операции51(ПараметрыАвтозаполнения, УсловияВключенияРазделов)
	
	ИмяРаздела = "Операции51";
	НомерСтраницы = УсловияВключенияРазделов.НомерСтраницыРаздела;
	
	Если НЕ ЗаполнятьРазделПоСведениямИБ(ИмяРаздела, УсловияВключенияРазделов) Тогда
		Возврат;
	КонецЕсли;
	
	ИмяКорневогоРаздела = мСтруктураМногоуровневыхРазделов[ИмяРаздела].КорневойРаздел;
	
	АдресДанныхРаздела = СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяКорневогоРаздела];
	ДанныеРаздела = ПолучитьИзВременногоХранилища(АдресДанныхРаздела);
	
	ПараметрыАвтозаполнения.Вставить("Заполнять" + ИмяРаздела, Истина);
	ПараметрыАвтозаполнения.Вставить(ИмяРаздела + "_АдресДанныхРаздела", АдресДанныхРаздела);
	ПараметрыАвтозаполнения.Вставить(ИмяРаздела + "_ДанныеРаздела", ДанныеРаздела);
	ПараметрыАвтозаполнения.Вставить(ИмяРаздела + "_ЗаполняемыеСтраницы", НомерСтраницы);
	ПараметрыАвтозаполнения.Вставить(ИмяРаздела + "_МакетРаздела", МакетРаздела(ИмяРаздела));
	
КонецПроцедуры

&НаСервере
Процедура ДополнитьПараметрыАвтозаполнения_Операции52(ПараметрыАвтозаполнения, УсловияВключенияРазделов)
	
	ИмяРаздела = "Операции52";
	НомерСтраницы = УсловияВключенияРазделов.НомерСтраницыРаздела;
	
	Если НЕ ЗаполнятьРазделПоСведениямИБ(ИмяРаздела, УсловияВключенияРазделов) Тогда
		Возврат;
	КонецЕсли;
	
	ИмяКорневогоРаздела = мСтруктураМногоуровневыхРазделов[ИмяРаздела].КорневойРаздел;
	
	АдресДанныхРаздела = СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяКорневогоРаздела];
	ДанныеРаздела = ПолучитьИзВременногоХранилища(АдресДанныхРаздела);
	
	ПараметрыАвтозаполнения.Вставить("Заполнять" + ИмяРаздела, Истина);
	ПараметрыАвтозаполнения.Вставить(ИмяРаздела + "_АдресДанныхРаздела", АдресДанныхРаздела);
	ПараметрыАвтозаполнения.Вставить(ИмяРаздела + "_ДанныеРаздела", ДанныеРаздела);
	ПараметрыАвтозаполнения.Вставить(ИмяРаздела + "_ЗаполняемыеСтраницы", НомерСтраницы);
	ПараметрыАвтозаполнения.Вставить(ИмяРаздела + "_МакетРаздела", МакетРаздела(ИмяРаздела));
	
КонецПроцедуры

&НаСервере
Процедура ДополнитьПараметрыАвтозаполнения_Операции55(ПараметрыАвтозаполнения, УсловияВключенияРазделов)
	
	ИмяРаздела = "Операции55";
	НомерСтраницы = УсловияВключенияРазделов.НомерСтраницыРаздела;
	
	Если НЕ ЗаполнятьРазделПоСведениямИБ(ИмяРаздела, УсловияВключенияРазделов) Тогда
		Возврат;
	КонецЕсли;
	
	ИмяКорневогоРаздела = мСтруктураМногоуровневыхРазделов[ИмяРаздела].КорневойРаздел;
	
	АдресДанныхРаздела = СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяКорневогоРаздела];
	ДанныеРаздела = ПолучитьИзВременногоХранилища(АдресДанныхРаздела);
	
	ПараметрыАвтозаполнения.Вставить("Заполнять" + ИмяРаздела, Истина);
	ПараметрыАвтозаполнения.Вставить(ИмяРаздела + "_АдресДанныхРаздела", АдресДанныхРаздела);
	ПараметрыАвтозаполнения.Вставить(ИмяРаздела + "_ДанныеРаздела", ДанныеРаздела);
	ПараметрыАвтозаполнения.Вставить(ИмяРаздела + "_ЗаполняемыеСтраницы", НомерСтраницы);
	ПараметрыАвтозаполнения.Вставить(ИмяРаздела + "_МакетРаздела", МакетРаздела(ИмяРаздела));
	
КонецПроцедуры

&НаСервере
Процедура ДополнитьПараметрыАвтозаполнения_Дебиторская(ПараметрыАвтозаполнения, УсловияВключенияРазделов)
	
	ИмяРаздела = "Дебиторская";
	НомерСтраницы = УсловияВключенияРазделов.НомерСтраницыРаздела;
	
	Если НЕ ЗаполнятьРазделПоСведениямИБ(ИмяРаздела, УсловияВключенияРазделов) Тогда
		Возврат;
	КонецЕсли;
	
	ИмяКорневогоРаздела = мСтруктураМногоуровневыхРазделов[ИмяРаздела].КорневойРаздел;
	
	АдресДанныхРаздела = СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяКорневогоРаздела];
	ДанныеРаздела = ПолучитьИзВременногоХранилища(АдресДанныхРаздела);
	
	ПараметрыАвтозаполнения.Вставить("Заполнять" + ИмяРаздела, Истина);
	ПараметрыАвтозаполнения.Вставить(ИмяРаздела + "_АдресДанныхРаздела", АдресДанныхРаздела);
	ПараметрыАвтозаполнения.Вставить(ИмяРаздела + "_ДанныеРаздела", ДанныеРаздела);
	ПараметрыАвтозаполнения.Вставить(ИмяРаздела + "_ЗаполняемыеСтраницы", НомерСтраницы);
	ПараметрыАвтозаполнения.Вставить(ИмяРаздела + "_МакетРаздела", МакетРаздела(ИмяРаздела));
	ПараметрыАвтозаполнения.Вставить(ИмяРаздела + "_Интервалы", ИнтервалыСроковДолга());
	
	Если ДействуетСВерсииФормата("5.10.01") Тогда
		ПараметрыОтчета = ДанныеРаздела.Строки[0].Строки[0].Строки[0].Параметры;
		ПараметрыОтчета.СтатусЗаполнения = "заполнен";
		ПоместитьВоВременноеХранилище(ДанныеРаздела, АдресДанныхРаздела);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДополнитьПараметрыАвтозаполнения_Кредиторская(ПараметрыАвтозаполнения, УсловияВключенияРазделов)
	
	ИмяРаздела = "Кредиторская";
	НомерСтраницы = УсловияВключенияРазделов.НомерСтраницыРаздела;
	
	Если НЕ ЗаполнятьРазделПоСведениямИБ(ИмяРаздела, УсловияВключенияРазделов) Тогда
		Возврат;
	КонецЕсли;
	
	ИмяКорневогоРаздела = мСтруктураМногоуровневыхРазделов[ИмяРаздела].КорневойРаздел;
	
	АдресДанныхРаздела = СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяКорневогоРаздела];
	ДанныеРаздела = ПолучитьИзВременногоХранилища(АдресДанныхРаздела);
	
	ПараметрыАвтозаполнения.Вставить("Заполнять" + ИмяРаздела, Истина);
	ПараметрыАвтозаполнения.Вставить(ИмяРаздела + "_АдресДанныхРаздела", АдресДанныхРаздела);
	ПараметрыАвтозаполнения.Вставить(ИмяРаздела + "_ДанныеРаздела", ДанныеРаздела);
	ПараметрыАвтозаполнения.Вставить(ИмяРаздела + "_ЗаполняемыеСтраницы", НомерСтраницы);
	ПараметрыАвтозаполнения.Вставить(ИмяРаздела + "_МакетРаздела", МакетРаздела(ИмяРаздела));
	ПараметрыАвтозаполнения.Вставить(ИмяРаздела + "_Интервалы", ИнтервалыСроковДолга());
	
	Если ДействуетСВерсииФормата("5.10.01") Тогда
		ПараметрыОтчета = ДанныеРаздела.Строки[0].Строки[1].Строки[0].Параметры;
		ПараметрыОтчета.СтатусЗаполнения = "заполнен";
		ПоместитьВоВременноеХранилище(ДанныеРаздела, АдресДанныхРаздела);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДополнитьПараметрыАвтозаполнения_ДоходыРасходы(ПараметрыАвтозаполнения, УсловияВключенияРазделов)
	
	ИмяРаздела    = "ДоходыРасходы";
	НомерСтраницы = УсловияВключенияРазделов.НомерСтраницыРаздела;
	
	Если НЕ ЗаполнятьРазделПоСведениямИБ(ИмяРаздела, УсловияВключенияРазделов) Тогда
		Возврат;
	КонецЕсли;
	
	АдресДанныхРаздела = СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяРаздела];
	ДанныеРаздела = ПолучитьИзВременногоХранилища(АдресДанныхРаздела);
	
	ПараметрыАвтозаполнения.Вставить("Заполнять" + ИмяРаздела, Истина);
	ПараметрыАвтозаполнения.Вставить(ИмяРаздела + "_АдресДанныхРаздела", АдресДанныхРаздела);
	ПараметрыАвтозаполнения.Вставить(ИмяРаздела + "_ДанныеРаздела", ДанныеРаздела);
	ПараметрыАвтозаполнения.Вставить(ИмяРаздела + "_ЗаполняемыеСтраницы", НомерСтраницы);
	
КонецПроцедуры

&НаСервере
Процедура ДополнитьПараметрыАвтозаполнения_ФинансовыеВложенияКраткосрочные(ПараметрыАвтозаполнения, УсловияВключенияРазделов)
	
	ИмяРаздела = "ФинансовыеВложенияКраткосрочные";
	НомерСтраницы = УсловияВключенияРазделов.НомерСтраницыРаздела;
	
	Если НЕ ЗаполнятьРазделПоСведениямИБ(ИмяРаздела, УсловияВключенияРазделов) Тогда
		Возврат;
	КонецЕсли;
	
	ИмяКорневогоРаздела = мСтруктураМногоуровневыхРазделов[ИмяРаздела].КорневойРаздел;
	АдресДанныхРаздела = СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяКорневогоРаздела];
	ДанныеРаздела = ПолучитьИзВременногоХранилища(АдресДанныхРаздела);
	
	ПараметрыАвтозаполнения.Вставить("Заполнять" + ИмяРаздела, Истина);
	ПараметрыАвтозаполнения.Вставить(ИмяРаздела + "_АдресДанныхРаздела", АдресДанныхРаздела);
	ПараметрыАвтозаполнения.Вставить(ИмяРаздела + "_ЗаполняемыеСтраницы", НомерСтраницы);
	
	Если ДействуетСВерсииФормата("5.10.01") Тогда
		ПараметрыОтчета = ДанныеРаздела.Строки[0].Строки[0].Строки[0].Параметры;
		ПараметрыОтчета.СтатусЗаполнения = "заполнен";
		ПоместитьВоВременноеХранилище(ДанныеРаздела, АдресДанныхРаздела);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДополнитьПараметрыАвтозаполнения_ФинансовыеВложенияДолгосрочные(ПараметрыАвтозаполнения, УсловияВключенияРазделов)
	
	ИмяРаздела = "ФинансовыеВложенияДолгосрочные";
	НомерСтраницы = УсловияВключенияРазделов.НомерСтраницыРаздела;
	
	Если НЕ ЗаполнятьРазделПоСведениямИБ(ИмяРаздела, УсловияВключенияРазделов) Тогда
		Возврат;
	КонецЕсли;
	
	ИмяКорневогоРаздела = мСтруктураМногоуровневыхРазделов[ИмяРаздела].КорневойРаздел;
	АдресДанныхРаздела = СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяКорневогоРаздела];
	ДанныеРаздела = ПолучитьИзВременногоХранилища(АдресДанныхРаздела);
	
	ПараметрыАвтозаполнения.Вставить("Заполнять" + ИмяРаздела, Истина);
	ПараметрыАвтозаполнения.Вставить(ИмяРаздела + "_АдресДанныхРаздела", АдресДанныхРаздела);
	ПараметрыАвтозаполнения.Вставить(ИмяРаздела + "_ЗаполняемыеСтраницы", НомерСтраницы);
	
	Если ДействуетСВерсииФормата("5.10.01") Тогда
		ПараметрыОтчета = ДанныеРаздела.Строки[0].Строки[1].Строки[0].Параметры;
		ПараметрыОтчета.СтатусЗаполнения = "заполнен";
		ПоместитьВоВременноеХранилище(ДанныеРаздела, АдресДанныхРаздела);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДополнитьПараметрыАвтозаполнения_СтруктураВыручки(ПараметрыАвтозаполнения, УсловияВключенияРазделов)
	
	ИмяРаздела    = "СтруктураВыручки";
	НомерСтраницы = УсловияВключенияРазделов.НомерСтраницыРаздела;
	
	Если НЕ ЗаполнятьРазделПоСведениямИБ(ИмяРаздела, УсловияВключенияРазделов) Тогда
		Возврат;
	КонецЕсли;
	
	АдресДанныхРаздела = СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяРаздела];
	ДанныеРаздела = ПолучитьИзВременногоХранилища(АдресДанныхРаздела);
	
	ПараметрыАвтозаполнения.Вставить("Заполнять" + ИмяРаздела, Истина);
	ПараметрыАвтозаполнения.Вставить(ИмяРаздела + "_АдресДанныхРаздела", АдресДанныхРаздела);
	ПараметрыАвтозаполнения.Вставить(ИмяРаздела + "_ДанныеРаздела", ДанныеРаздела);
	ПараметрыАвтозаполнения.Вставить(ИмяРаздела + "_ЗаполняемыеСтраницы", НомерСтраницы);
	
КонецПроцедуры

&НаСервере
Процедура ДополнитьПараметрыАвтозаполнения_ПрочиеПоказатели(ПараметрыАвтозаполнения, УсловияВключенияРазделов)
	
	ИмяРаздела    = "ПрочиеПоказатели";
	НомерСтраницы = УсловияВключенияРазделов.НомерСтраницыРаздела;
	
	Если НЕ ЗаполнятьРазделПоСведениямИБ(ИмяРаздела, УсловияВключенияРазделов) Тогда
		Возврат;
	КонецЕсли;
	
	АдресДанныхРаздела = СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяРаздела];
	ДанныеРаздела = ПолучитьИзВременногоХранилища(АдресДанныхРаздела);
	
	ПараметрыАвтозаполнения.Вставить("Заполнять" + ИмяРаздела, Истина);
	ПараметрыАвтозаполнения.Вставить(ИмяРаздела + "_АдресДанныхРаздела", АдресДанныхРаздела);
	ПараметрыАвтозаполнения.Вставить(ИмяРаздела + "_ДанныеРаздела", ДанныеРаздела);
	ПараметрыАвтозаполнения.Вставить(ИмяРаздела + "_ЗаполняемыеСтраницы", НомерСтраницы);
	
КонецПроцедуры

&НаСервере
Функция ЗаполнятьРазделПоСведениямИБ(ИмяРаздела, УсловияВключенияРазделов)
	
	ЗаполнятьВсеРазделы = УсловияВключенияРазделов.ЗаполнятьВсеРазделы;
	ИмяТекущегоРаздела  = УсловияВключенияРазделов.АктивныйРаздел;
	
	ЗаполнятьРаздел = Ложь;
	
	Если РазделАвтозаполняется(ИмяРаздела) Тогда
		ЗаполнятьРаздел = ЗаполнятьВсеРазделы И РазделВключенВОтчет(ИмяРаздела)
		              ИЛИ ИмяТекущегоРаздела = ИмяРаздела;
	КонецЕсли;
	
	Возврат ЗаполнятьРаздел;
	
КонецФункции

&НаСервере
Функция ИнтервалыСроковДолга()
	
	Интервалы = Новый ТаблицаЗначений;
	Интервалы.Колонки.Добавить("Код", Новый ОписаниеТипов("Число"));
	Интервалы.Колонки.Добавить("Начало", Новый ОписаниеТипов("Число"));
	Интервалы.Колонки.Добавить("Окончание", Новый ОписаниеТипов("Число"));
	Интервалы.Колонки.Добавить("Заголовок", Новый ОписаниеТипов("Строка"));
	
	ДобавитьИнтервалСроковДолга(Интервалы, 1, 1, 90, "До 90 дней");
	ДобавитьИнтервалСроковДолга(Интервалы, 2, 91, 3650000, "Свыше 90 дней");
	
	Возврат Интервалы;
	
КонецФункции

&НаСервере
Процедура ДобавитьИнтервалСроковДолга(ТаблицаИнтервалов, Код, Начало, Окончание, Заголовок)
	
	Интервал = ТаблицаИнтервалов.Добавить();
	Интервал.Код = Код;
	Интервал.Начало = Начало;
	Интервал.Окончание = Окончание;
	Интервал.Заголовок = Заголовок;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СтатусОтчета(Знач Отчет)
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Отчет, "СтатусОтчета");
	
КонецФункции

&НаСервере
Процедура ПриЗакрытииНаСервере()
	
	РегламентированнаяОтчетность.ПриЗакрытииРегламентированногоОтчета(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросСохранитьИзмененияЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("Форма", ЭтаФорма);
		Оповещение = Новый ОписаниеОповещения("ПослеСохраненияФормыЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		
		СохранитьНаКлиенте( , Оповещение);
		
	ИначеЕсли Ответ = КодВозвратаДиалога.Нет Тогда
		Модифицированность = Ложь;
		Закрыть();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеСохраненияФормыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ДополнительныеПараметры.Форма.Закрыть();
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьПодготовленныеДанные()
	
	СтруктураДанных = ПолучитьИзВременногоХранилища(СтруктураРеквизитовФормы.АдресВоВременномХранилище);
	
	Если ТипЗнч(СтруктураДанных) = Тип("Структура") Тогда
		СтруктураРеквизитовФормы.АдресВременногоХранилищаРасшифровки =
			ПоместитьВоВременноеХранилище(СтруктураДанных.РасшифровкиПоказателей, УникальныйИдентификатор);
	КонецЕсли;
	
	РасчетПолный();
	
	ИмяРаздела = СтруктураРеквизитовФормы.НаимТекущегоРаздела;
	ПоказатьРаздел(ИмяРаздела, СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела);
	УстановитьДоступностьРасшифровкиНаСервере(ИмяРаздела);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьВБанкЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ДвоичныеДанныеФайла = Неопределено;
	ИмяПакетаДляБанка = ПодготовитьОкружениеДляОтправкиИВыгрузки(ДвоичныеДанныеФайла);
	
	Если ЗначениеЗаполнено(ИмяПакетаДляБанка) Тогда
		Оповещение = Новый ОписаниеОповещения("ПослеОтправкиОтчетаВБанк", ЭтотОбъект);
		ОтчетностьВБанкиСлужебныйКлиент.ОтправитьОтчетВБанк(Оповещение, СтруктураРеквизитовФормы.мСохраненныйДок,
			СтруктураРеквизитовФормы.Организация, СтруктураРеквизитовФормы.Банк, ДвоичныеДанныеФайла, ИмяПакетаДляБанка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеОтправкиОтчетаВБанк(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат Тогда
		СтатусОтчета = Нстр("ru = 'Отправлено'");
		ПоказатьОповещениеПользователя(НСтр("ru = 'Отчет отправлен.'"));
	Иначе
		СтатусОтчета = НСтр("ru = 'Не отправлено'");
		ПоказатьОповещениеПользователя(НСтр("ru = 'Отчет не отправлен.'"));
	КонецЕсли;
	
	ИзменитьСтатусОтчетаНаСервере(СтруктураРеквизитовФормы.мСохраненныйДок, СтатусОтчета);
	ОповеститьОбИзменении(СтруктураРеквизитовФормы.мСохраненныйДок);
	ОбновитьОтображениеСостоянияОтчета();
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ИзменитьСтатусОтчетаНаСервере(ОтчетСсылка, Статус)
	
	ОтчетОбъект = ОтчетСсылка.ПолучитьОбъект();
	ОтчетОбъект.СтатусОтчета = Статус;
	ОтчетОбъект.Записать();
	
КонецПроцедуры

&НаКлиенте
Функция ЗаголовокРегламентированногоОтчета(ДатаНач, ДатаКон, Периодичность = Неопределено) Экспорт
	
	СтруктураРеквизитовФормы.СтрПериодОтчета = ПредставлениеПериода( НачалоДня(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета), КонецДня(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета), "ФП = Истина" );
	
	Если СтрНайти(ЭтаФорма.Заголовок, СтруктураРеквизитовФормы.СтрПериодОтчета) = 0 Тогда
		Возврат ЭтаФорма.Заголовок + " за " + СтруктураРеквизитовФормы.СтрПериодОтчета;
	Иначе
		Возврат ЭтаФорма.Заголовок;
	КонецЕсли;
	
КонецФункции

&НаСервереБезКонтекста
Функция КППОрганизации(Организация)
	
	Возврат Организация.КПП;
	
КонецФункции

&НаСервереБезКонтекста
Функция НомерВыгрузкиВБанк(ДатаВыгрузки, Организация)
	
	НомерВыгрузки = 0;
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	СчетчикВыгрузокОтчетностиВБанк.Значение
	                      |ИЗ
	                      |	РегистрСведений.СчетчикВыгрузокОтчетностиВБанк КАК СчетчикВыгрузокОтчетностиВБанк
	                      |ГДЕ
	                      |	СчетчикВыгрузокОтчетностиВБанк.Организация = &Организация
	                      |	И СчетчикВыгрузокОтчетностиВБанк.День = &День");
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("День", НачалоДня(ДатаВыгрузки));
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Если Выборка.Следующий() Тогда
			НомерВыгрузки = ?(НЕ ЗначениеЗаполнено(Выборка.Значение), 0, Выборка.Значение);
		КонецЕсли;
	КонецЕсли;
	
	НомерВыгрузки = НомерВыгрузки + 1;
	
	МенеджерЗаписи = РегистрыСведений.СчетчикВыгрузокОтчетностиВБанк.СоздатьМенеджерЗаписи();
	
	МенеджерЗаписи.Организация = Организация;
	МенеджерЗаписи.День = ДатаВыгрузки;
	МенеджерЗаписи.Значение = НомерВыгрузки;
	
	МенеджерЗаписи.Записать(Истина);
	
	Возврат Формат(НомерВыгрузки, "ЧЦ=3; ЧН=; ЧВН=");
	
КонецФункции

&НаКлиенте
Функция УниверсальнаяВыгрузкаXML(ДвоичныеДанныеФайла, ИмяФайлаПредставления, ПостфиксПредставлений) Экспорт
	
	Если Модифицированность Тогда
		ТекстЗаголовка = ЗаголовокРегламентированногоОтчета(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета, СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
		
		ОргСтр = " (" + СтруктураРеквизитовФормы.Организация + ")";
		Если СтрНайти(ТекстЗаголовка, ОргСтр) = 0 Тогда
			ТекстЗаголовка = ТекстЗаголовка + ОргСтр;
		КонецЕсли;
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Отчет """ + ТекстЗаголовка + """ не сохранен.";
		Сообщение.Сообщить();
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Если Открыта() Тогда
		Если СтруктураРеквизитовФормы.ЕдиницаИзмерения = ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1 Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='Перед выгрузкой необходимо установить единицу измерения ""в тысячах"" или ""в миллионах"".'");
			Сообщение.Сообщить();
			
			Возврат Ложь;
			
		КонецЕсли;
		
		Если СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения <> 0 Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='Перед выгрузкой необходимо установить точность ""0"".'");
			Сообщение.Сообщить();
			
			Возврат Ложь;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ УниверсальнаяВыгрузкаXMLНаСервере(ДвоичныеДанныеФайла, ИмяФайлаПредставления, ПостфиксПредставлений) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция УниверсальнаяВыгрузкаXMLНаСервере(ДвоичныеДанныеФайла, ИмяФайлаПредставления, ПостфиксПредставлений)
	
	ПодготовитьСведенияСохраненногоОтчета();
	ПараметрыВыгрузки = ПараметрыЭлектронногоПредставления();
	
	Если НЕ ПроверитьВозможностьВыгрузки(ПараметрыВыгрузки) Тогда
		мДанныеОтчета = Неопределено;
		Возврат Ложь;
	КонецЕсли;
	
	ВременныйКаталогПакета = КаталогВременныхФайлов();
	ВременныйКаталогПакета = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(ВременныйКаталогПакета);
	ВременныйКаталогПакета = ВременныйКаталогПакета
		+ СтрЗаменить(Новый УникальныйИдентификатор, "-", "") + ПолучитьРазделительПути();
	СоздатьКаталог(ВременныйКаталогПакета);
	
	ИменаФайловРазделов = СформироватьФайлыПредставленийРазделов(ВременныйКаталогПакета, ПостфиксПредставлений);
	
	ПолноеИмяФайлаПредставления = ВременныйКаталогПакета + ИмяФайлаПредставления + ".xml";
	СформироватьФайлЭлектронногоПредставления(ПараметрыВыгрузки, ПолноеИмяФайлаПредставления);
	
	ПакетОтправки = Новый ЗаписьZipФайла();
	
	Для Каждого ИмяФайлаРаздела Из ИменаФайловРазделов Цикл
		ПакетОтправки.Добавить(ИмяФайлаРаздела);
	КонецЦикла;
	ПакетОтправки.Добавить(ПолноеИмяФайлаПредставления);
	
	ДвоичныеДанныеФайла = ПакетОтправки.ПолучитьДвоичныеДанные();
	
	УдалитьФайлы(ВременныйКаталогПакета);
	
	мДанныеОтчета = Неопределено;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция ПодготовитьСведенияСохраненногоОтчета()
	
	мДанныеОтчета = Новый Структура;
	
	СохрСтруктура = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить();
	ПоказателиОтчета = СохрСтруктура.ПоказателиОтчета;
	
	Для Каждого Раздел Из ПоказателиОтчета Цикл
		мДанныеОтчета.Вставить(Раздел.Ключ, Раздел.Значение);
	КонецЦикла;
	
	// Регламентированная отчетность, принятая в ФНС.
	ОтчетыФНС = Неопределено;
	
	Если СохрСтруктура.Свойство("ОтчетыФНС", ОтчетыФНС) Тогда
		Для Каждого ОтчетФНС Из ОтчетыФНС Цикл
			Если ОтчетФНС.ВидОтчета = "РегламентированныйОтчетБухОтчетность" Тогда
				СтруктураРеквизитовФормы.ОтчетыФНС_Бухотчетность = ОтчетФНС.РегламентированныйОтчет;
				СтруктураРеквизитовФормы.ОтчетыФНС_БухотчетностьПредставление = ОтчетФНС.Представление;
				СтруктураРеквизитовФормы.ОтчетыФНС_БухотчетностьПакет = ОтчетФНС.Пакет;
			КонецЕсли;
			
			Если ОтчетФНС.ВидОтчета = "РегламентированныйОтчетПрибыль" Тогда
				СтруктураРеквизитовФормы.ОтчетыФНС_Прибыль = ОтчетФНС.РегламентированныйОтчет;
				СтруктураРеквизитовФормы.ОтчетыФНС_ПрибыльПредставление = ОтчетФНС.Представление;
				СтруктураРеквизитовФормы.ОтчетыФНС_ПрибыльПакет = ОтчетФНС.Пакет;
			КонецЕсли;
			
			Если ОтчетФНС.ВидОтчета = "РегламентированныйОтчетНДС" Тогда
				СтруктураРеквизитовФормы.ОтчетыФНС_НДС = ОтчетФНС.РегламентированныйОтчет;
				СтруктураРеквизитовФормы.ОтчетыФНС_НДСПредставление = ОтчетФНС.Представление;
				СтруктураРеквизитовФормы.ОтчетыФНС_НДСПакет = ОтчетФНС.Пакет;
			КонецЕсли;
			
			Если ОтчетФНС.ВидОтчета = "ЗапросНаИнформационноеОбслуживаниеНалогоплательщикаСправкаИспОбУпл" Тогда
				СтруктураРеквизитовФормы.ОтчетыФНС_СправкаИспОбУпл = ОтчетФНС.РегламентированныйОтчет;
				СтруктураРеквизитовФормы.ОтчетыФНС_СправкаИспОбУплПредставление = ОтчетФНС.Представление;
				СтруктураРеквизитовФормы.ОтчетыФНС_СправкаИспОбУплПакет = ОтчетФНС.Пакет;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ПараметрыЭлектронногоПредставления()
	
	Титульный = мДанныеОтчета.ПолеТабличногоДокументаТитульный;
	
	ПараметрыВыгрузки = Новый Структура;
	
	ПараметрыВыгрузки.Вставить("ВерсФорм", СтруктураРеквизитовФормы.ВерсияФормата);
	
	ПараметрыВыгрузки.Вставить("ВерсПрог", РегламентированнаяОтчетность.НазваниеИВерсияПрограммы());
	ПараметрыВыгрузки.Вставить("ДатаДок",  Формат(ТекущаяДатаСеанса(), "ДФ=дд.ММ.гггг"));
	
	ПараметрыВыгрузки.Вставить("ВидДок",            Строка(СтруктураРеквизитовФормы.мСохраненныйДок.Вид));
	ПараметрыВыгрузки.Вставить("НаимОрг",           СокрЛП(Титульный.НаименованиеОрганизации));
	ПараметрыВыгрузки.Вставить("НаимОргКраткое",    СокрЛП(Титульный.НаименованиеОрганизацииКраткое));
	
	Если СтруктураРеквизитовФормы.ИП Тогда
		ПараметрыВыгрузки.Вставить("ИННФЛ", СокрЛП(СтруктураРеквизитовФормы.Организация.ИНН));
		ФИО = РегламентированнаяОтчетность.РазложитьФИО(Титульный.НаименованиеОрганизации);
		
		ПараметрыВыгрузки.Вставить("ФЛФамилия",  ФИО.Фамилия);
		ПараметрыВыгрузки.Вставить("ФЛИмя",      ФИО.Имя);
		ПараметрыВыгрузки.Вставить("ФЛОтчество", ФИО.Отчество);
		
	Иначе
		ПараметрыВыгрузки.Вставить("ИННОрг",            СокрЛП(Титульный.ИНН));
		ПараметрыВыгрузки.Вставить("КППОрг",            СокрЛП(Титульный.КПП));
		
	КонецЕсли;
	
	ПараметрыВыгрузки.Вставить("ЭтоПБОЮЛ", СтруктураРеквизитовФормы.ИП);
	ПараметрыВыгрузки.Вставить("КодИФНС",           СокрЛП(СтруктураРеквизитовФормы.Организация.КодНалоговогоОргана));
	ПараметрыВыгрузки.Вставить("КодИФНСПосредника", ?(СтруктураРеквизитовФормы.Организация.КрупнейшийНалогоплательщик,
		СокрЛП(СтруктураРеквизитовФормы.Организация.КодНалоговогоОрганаПолучателя), ""));
	
	ЗаполнитьСведенияПодписантов(ПараметрыВыгрузки);
	
	ПараметрыВыгрузки.Вставить("ПрефиксИмениФайлаВыгрузки", "BANK_BUHOTCH");
	
	ПараметрыВыгрузки.Вставить("ИдентификаторФайлаВыгрузки", Строка(Новый УникальныйИдентификатор));
	
	ПараметрыВыгрузки.Вставить("ИдФайл", СформироватьИдФайл(ПараметрыВыгрузки));
	
	ПараметрыВыгрузки.Вставить("ДатаУтвОтч", "");
	Если Титульный.Свойство("ДатаУтвОтчетности") Тогда
		Если ЗначениеЗаполнено(Титульный.ДатаУтвОтчетности) Тогда
			ПараметрыВыгрузки.Вставить("ДатаУтвОтч", Формат(Титульный.ДатаУтвОтчетности, "ДФ=дд.ММ.гггг"));
		КонецЕсли;
	КонецЕсли;
	
	КонецОтчетногоПериода = КонецДня(СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания);
	ПараметрыВыгрузки.Вставить("КонецОтчетногоПериода", КонецОтчетногоПериода);
	
	ДеревоНастройкиСтраниц = СтруктураРеквизитовФормы.мСохраненныйДок.ДеревоНастройкиСтраниц.Получить();
	ПараметрыВыгрузки.Вставить("ДеревоНастройкиСтраниц", ДеревоНастройкиСтраниц);
	
	Возврат ПараметрыВыгрузки;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьСведенияПодписантов(ПараметрыВыгрузки)
	
	Титульный = мДанныеОтчета.ПолеТабличногоДокументаТитульный;
	
	ПараметрыВыгрузки.Вставить("ПрПодп", "1");
	
	ФИОРук = РегламентированнаяОтчетность.РазложитьФИО(Титульный.Подписант);
	ПараметрыВыгрузки.Вставить("ПодпФамилия",  СокрЛП(ФИОРук.Фамилия));
	ПараметрыВыгрузки.Вставить("ПодпИмя",      СокрЛП(ФИОРук.Имя));
	ПараметрыВыгрузки.Вставить("ПодпОтчество", СокрЛП(ФИОРук.Отчество));
	
	ПараметрыВыгрузки.Вставить("ПодпНаимДок", "");
	
КонецПроцедуры

&НаСервере
Функция СформироватьИдФайл(ПараметрыВыгрузки)
	
	ИдОтправителя = ?(ПараметрыВыгрузки.Свойство("ЭтоПБОЮЛ") И ПараметрыВыгрузки.ЭтоПБОЮЛ,
		СокрЛП(ПараметрыВыгрузки.ИННФЛ),
		СокрЛП(ПараметрыВыгрузки.ИННОрг) + СокрЛП(ПараметрыВыгрузки.КППОрг));
	
	Возврат ПараметрыВыгрузки.ПрефиксИмениФайлаВыгрузки
		+ "_" + ИдОтправителя
		+ "_" + Формат(ТекущаяДатаСеанса(), "ДФ=ггггММдд")
		+ "_" + ПараметрыВыгрузки.ИдентификаторФайлаВыгрузки;
	
КонецФункции

#Область ПроверкаВозможностиВыгрузки

&НаКлиенте
Процедура ПроверитьВыгрузкуЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПроверитьВыгрузкуОтчета();
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузкуОтчета()
	
	Если НЕ ЗначениеЗаполнено(СтруктураРеквизитовФормы.Организация) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Организация не выбрана! Выгрузка невозможна.'");
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьВыгрузкуОтчетаЗавершение", ЭтотОбъект);
	
	Если Модифицированность Тогда
		СохранитьНаКлиенте(,ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузкуОтчетаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ТаблицаСообщений.Очистить();
	
	ФормаВыгрузкиРеглОтчета = ПолучитьФорму("Документ.ВыгрузкаРегламентированныхОтчетов.Форма.ФормаДокумента", , ЭтаФорма);
	
	СпДокОсн = Новый СписокЗначений;
	СпДокОсн.Добавить(СтруктураРеквизитовФормы.мСохраненныйДок);
	
	ФормаВыгрузкиРеглОтчета.Проверить(СпДокОсн);
	
КонецПроцедуры

&НаСервере
Функция ПроверитьПоказатели() Экспорт
	
	ПризнакПроверкиПоказателей = ПроверитьПоказателиXML();
	
	мДанныеОтчета = Неопределено;
	
	Возврат ПризнакПроверкиПоказателей;
	
КонецФункции

&НаСервере
Функция ПроверитьПоказателиXML() Экспорт
	
	ПодготовитьСведенияСохраненногоОтчета();
	ПараметрыВыгрузки = ПараметрыЭлектронногоПредставления();
	
	Если НЕ ПроверитьВозможностьВыгрузки(ПараметрыВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция ПроверитьВозможностьВыгрузки(ПараметрыВыгрузки)
	
	СтатусПроверки = Истина;
	
	ПроверитьЗаполнение_Титульный(СтатусПроверки, ПараметрыВыгрузки);
	
	ПроверитьЗаполнение_Баланс(СтатусПроверки, ПараметрыВыгрузки);
	
	ПроверитьЗаполнение_ОФР(СтатусПроверки, ПараметрыВыгрузки);
	
	ПроверитьЗаполнение_ОИК(СтатусПроверки, ПараметрыВыгрузки);
	
	ПроверитьЗаполнение_ОДДС(СтатусПроверки, ПараметрыВыгрузки);
	
	ПроверитьЗаполнение_ОЦИС(СтатусПроверки, ПараметрыВыгрузки);
	
	ПроверитьЗаполнение_ДополнительныеПоказатели(СтатусПроверки, ПараметрыВыгрузки);
	
	ПроверитьЗаполнение_РасшифровкиОбеспеченийПолученные(СтатусПроверки, ПараметрыВыгрузки);
	ПроверитьЗаполнение_РасшифровкиОбеспеченийВыданные(СтатусПроверки, ПараметрыВыгрузки);
	
	ПараметрыПроверки = Новый Структура;
	ПараметрыПроверки.Вставить("ИмяРаздела",      "ЗадолженностьПоКредитамЗаймамКраткосрочная");
	ПараметрыПроверки.Вставить("НазваниеРаздела", "Задолженность по краткосрочным кредитам и займам");
	ПараметрыПроверки.Вставить("ПрефиксРаздела",  "П00007");
	ПараметрыПроверки.Вставить("ВидВРасшифровке", " краткосрочной задолженности по кредитам и займам");
	ПараметрыПроверки.Вставить("ИндексВДереве",   0);
	
	ПроверитьЗаполнение_ЗадолженностьПоКредитамЗаймам(СтатусПроверки, ПараметрыВыгрузки, ПараметрыПроверки);
	
	ПараметрыПроверки = Новый Структура;
	ПараметрыПроверки.Вставить("ИмяРаздела",      "ЗадолженностьПоКредитамЗаймамДолгосрочная");
	ПараметрыПроверки.Вставить("НазваниеРаздела", "Задолженность по долгосрочным кредитам и займам");
	ПараметрыПроверки.Вставить("ПрефиксРаздела",  "П00008");
	ПараметрыПроверки.Вставить("ВидВРасшифровке", " долгосрочной задолженности по кредитам и займам");
	ПараметрыПроверки.Вставить("ИндексВДереве",   1);
	
	ПроверитьЗаполнение_ЗадолженностьПоКредитамЗаймам(СтатусПроверки, ПараметрыВыгрузки, ПараметрыПроверки);
	
	ПроверитьЗаполнение_ЛизингОбязательства(СтатусПроверки, ПараметрыВыгрузки);
	
	ПроверитьЗаполнение_ДенежныеСредства(СтатусПроверки, ПараметрыВыгрузки);
	
	ПроверитьЗаполнение_ОСВ(СтатусПроверки, ПараметрыВыгрузки);
	
	ПроверитьЗаполнение_ОСВПоСчету(СтатусПроверки, ПараметрыВыгрузки);
	
	ПроверитьЗаполнение_АнализСчета(СтатусПроверки, ПараметрыВыгрузки);
	
	ПроверитьЗаполнение_ОперацииПоБанковскимСчетам(СтатусПроверки, ПараметрыВыгрузки);
	
	ПроверитьЗаполнение_ДебКредЗадолженность(СтатусПроверки, ПараметрыВыгрузки);
	
	ПроверитьЗаполнение_ДоходыРасходы(СтатусПроверки, ПараметрыВыгрузки);
	
	ПараметрыПроверки = Новый Структура;
	ПараметрыПроверки.Вставить("ИмяРаздела",      "ФинансовыеВложенияКраткосрочные");
	ПараметрыПроверки.Вставить("НазваниеРаздела", "Расшифровка краткосрочных финансовых вложений");
	ПараметрыПроверки.Вставить("ПрефиксРаздела",  "П00012");
	ПараметрыПроверки.Вставить("ВидВРасшифровке", " расшифровки краткосрочных финансовых вложений");
	ПараметрыПроверки.Вставить("ИндексВДереве",   0);
	
	ПроверитьЗаполнение_ФинансовыеВложения(СтатусПроверки, ПараметрыВыгрузки, ПараметрыПроверки);
	
	ПараметрыПроверки = Новый Структура;
	ПараметрыПроверки.Вставить("ИмяРаздела",      "ФинансовыеВложенияДолгосрочные");
	ПараметрыПроверки.Вставить("НазваниеРаздела", "Расшифровка долгосрочных финансовых вложений");
	ПараметрыПроверки.Вставить("ПрефиксРаздела",  "П00013");
	ПараметрыПроверки.Вставить("ВидВРасшифровке", " расшифровки долгосрочных финансовых вложений");
	ПараметрыПроверки.Вставить("ИндексВДереве",   1);
	
	ПроверитьЗаполнение_ФинансовыеВложения(СтатусПроверки, ПараметрыВыгрузки, ПараметрыПроверки);
	
	ПроверитьЗаполнение_СтруктураВыручки(СтатусПроверки, ПараметрыВыгрузки);
	
	ПроверитьЗаполнение_ПрочиеПоказатели(СтатусПроверки, ПараметрыВыгрузки);
	
	ПроверитьЗаполнение_ОтчетыФНС(СтатусПроверки, ПараметрыВыгрузки);
	
	ПроверитьЗаполнение_ДополнительныеФайлы(СтатусПроверки, ПараметрыВыгрузки);
	
	Возврат СтатусПроверки;
	
КонецФункции

&НаСервере
Процедура ПроверитьЗаполнение_Титульный(СтатусПроверки, ПараметрыВыгрузки)
	
	ИмяРаздела = "Титульный";
	
	Если ПустаяСтрока(ПараметрыВыгрузки.НаимОрг) Тогда
		СообщитьВТаблицуСообщений(ЭтаФорма, "На указано полное наименование организации", ИмяРаздела, "НаименованиеОрганизации");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ПустаяСтрока(ПараметрыВыгрузки.НаимОргКраткое) Тогда
		СообщитьВТаблицуСообщений(ЭтаФорма, "На указано полное наименование организации", ИмяРаздела, "НаименованиеОрганизацииКраткое");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если СтруктураРеквизитовФормы.ИП Тогда
		Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.ИННФЛ) Тогда
			СообщитьВТаблицуСообщений(ЭтаФорма, "Не указан ИНН индивидуального предпринимателя", ИмяРаздела, "ИНН");
			СтатусПроверки = Ложь;
		ИначеЕсли НЕ РегламентированнаяОтчетностьВызовСервера.ИННСоответствуетТребованиямНаСервере(ПараметрыВыгрузки.ИННФЛ, Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо) Тогда
			СообщитьВТаблицуСообщений(ЭтаФорма, "Указан некорректный ИНН индивидуального предпринимателя", ИмяРаздела, "ИНН");
			СтатусПроверки = Ложь;
		КонецЕсли;
		
	Иначе
		Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.ИННОрг) Тогда
			СообщитьВТаблицуСообщений(ЭтаФорма, "Не указан ИНН организации", ИмяРаздела, "ИНН");
			СтатусПроверки = Ложь;
		ИначеЕсли НЕ РегламентированнаяОтчетностьВызовСервера.ИННСоответствуетТребованиямНаСервере(ПараметрыВыгрузки.ИННОрг, Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо) Тогда
			СообщитьВТаблицуСообщений(ЭтаФорма, "Указан некорректный ИНН юридического лица", ИмяРаздела, "ИНН");
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		Если ПустаяСтрока(ПараметрыВыгрузки.КППОрг) Тогда
			СообщитьВТаблицуСообщений(ЭтаФорма, "Не указан КПП юридического лица", ИмяРаздела, "КПП");
			СтатусПроверки = Ложь;
		ИначеЕсли СтрДлина(ПараметрыВыгрузки.КППОрг) <> 9 Тогда
			СообщитьВТаблицуСообщений(ЭтаФорма, "Указан некорректный КПП юридического лица", ИмяРаздела, "КПП");
			СтатусПроверки = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	// Руководитель организации.
	Если ПустаяСтрока(ПараметрыВыгрузки.ПодпФамилия) Тогда
		СообщитьВТаблицуСообщений(ЭтаФорма, "Не указана фамилия лица, утвердившего отчетность", ИмяРаздела, "Подписант");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ПустаяСтрока(ПараметрыВыгрузки.ПодпИмя) Тогда
		СообщитьВТаблицуСообщений(ЭтаФорма, "Не указано имя лица, утвердившего отчетность", ИмяРаздела, "Подписант");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьЗаполнение_Баланс(СтатусПроверки, ПараметрыВыгрузки)
	
	ИмяРаздела = "Баланс";
	
	Если НЕ РазделВключенВОтчет(ИмяРаздела, ПараметрыВыгрузки.ДеревоНастройкиСтраниц) Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеРаздела = ПолучитьИзВременногоХранилища(СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяРаздела]);
	
	СтраницаРаздела = ДанныеРаздела.Строки[0];
	ДанныеСтраницы = СтраницаРаздела.Данные;
	ПараметрыСтраницы = СтраницаРаздела.Параметры;
	
	Делитель = ДелительПоЕдиницеИзмерения(СтруктураРеквизитовФормы.ЕдиницаИзмерения);
	ФорматнаяСтрока = ФорматнаяСтрокаПоЕдиницеИзмерения(Делитель);
	
	// Отчетный период.
	АктивОП  = ЗначениеПриведенноеКЕдиницеИзмерения(ДанныеСтраницы["П000100160004"], ФорматнаяСтрока);
	ПассивОП = ЗначениеПриведенноеКЕдиницеИзмерения(ДанныеСтраницы["П000100170004"], ФорматнаяСтрока);
	БалансСходитсяОП = (АктивОП = ПассивОП);
	
	// Предыдущий год.
	АктивПГ  = ЗначениеПриведенноеКЕдиницеИзмерения(ДанныеСтраницы["П000100160005"], ФорматнаяСтрока);
	ПассивПГ = ЗначениеПриведенноеКЕдиницеИзмерения(ДанныеСтраницы["П000100170005"], ФорматнаяСтрока);
	БалансСходитсяПГ = (АктивПГ = ПассивПГ);
	
	// Год, предшествующий предыдущему.
	АктивГПП  = ЗначениеПриведенноеКЕдиницеИзмерения(ДанныеСтраницы["П000100160006"], ФорматнаяСтрока);
	ПассивГПП = ЗначениеПриведенноеКЕдиницеИзмерения(ДанныеСтраницы["П000100170006"], ФорматнаяСтрока);
	БалансСходитсяГПП = (АктивГПП = ПассивГПП);
	
	ПозицияПерехода = "";
	Если НЕ БалансСходитсяОП Тогда
		ПозицияПерехода = "П000100160004";
	ИначеЕсли НЕ БалансСходитсяПГ Тогда
		ПозицияПерехода = "П000100160005";
	ИначеЕсли НЕ БалансСходитсяГПП Тогда
		ПозицияПерехода = "П000100160006";
	КонецЕсли;
	
	КонецОП  = ПараметрыВыгрузки.КонецОтчетногоПериода;
	КонецПГ  = КонецГода(ДобавитьМесяц(КонецОП, -12));
	КонецГПП = КонецГода(ДобавитьМесяц(КонецОП, -24));
	
	ОписаниеОшибки = "";
	
	Если НЕ БалансСходитсяОП Тогда
		ОписаниеОшибки = "Актив баланса на " + Формат(КонецОП, "ДЛФ=DD") + " не равен пассиву";
	КонецЕсли;
	
	Если НЕ БалансСходитсяПГ Тогда
		Если ЗначениеЗаполнено(ОписаниеОшибки) Тогда
			ОписаниеОшибки = ОписаниеОшибки + ", актив"
		Иначе
			ОписаниеОшибки = "Актив";
		КонецЕсли;
		
		ОписаниеОшибки = ОписаниеОшибки + " баланса на " + Формат(КонецПГ, "ДЛФ=DD") + " не равен пассиву";
	КонецЕсли;
	
	Если НЕ БалансСходитсяГПП Тогда
		Если ЗначениеЗаполнено(ОписаниеОшибки) Тогда
			ОписаниеОшибки = ОписаниеОшибки + ", актив"
		Иначе
			ОписаниеОшибки = "Актив";
		КонецЕсли;
		
		ОписаниеОшибки = ОписаниеОшибки + " баланса на " + Формат(КонецГПП, "ДЛФ=DD") + " не равен пассиву";
	КонецЕсли;
	
	ОписаниеОшибки = "Внимание! " + ОписаниеОшибки + "! Проверьте заполнение баланса.";
	
	Если ЗначениеЗаполнено(ПозицияПерехода) Тогда
		ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, ИмяРаздела, ПозицияПерехода);
	КонецЕсли;
	
	// Проверка заполнения раздела.
	Если СтруктураРеквизитовФормы.НаблюдательЗаполненияРазделов.Свойство(ИмяРаздела)
	   И СтруктураРеквизитовФормы.НаблюдательЗаполненияРазделов[ИмяРаздела] = Ложь Тогда
		ОписаниеОшибки = "Бухгалтерский баланс не заполнен";
		ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, ИмяРаздела);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьЗаполнение_ОФР(СтатусПроверки, ПараметрыВыгрузки)
	
	ИмяРаздела = "ОФР";
	
	Если НЕ РазделВключенВОтчет(ИмяРаздела, ПараметрыВыгрузки.ДеревоНастройкиСтраниц) Тогда
		Возврат;
	КонецЕсли;
	
	// Проверка заполнения раздела.
	Если СтруктураРеквизитовФормы.НаблюдательЗаполненияРазделов.Свойство(ИмяРаздела)
	   И СтруктураРеквизитовФормы.НаблюдательЗаполненияРазделов[ИмяРаздела] = Ложь Тогда
		ОписаниеОшибки = "Отчет о финансовых результатах не заполнен";
		ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, ИмяРаздела);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьЗаполнение_ОИК(СтатусПроверки, ПараметрыВыгрузки)
	
	ИмяРаздела = "ОИК";
	
	Если НЕ РазделВключенВОтчет(ИмяРаздела, ПараметрыВыгрузки.ДеревоНастройкиСтраниц) Тогда
		Возврат;
	КонецЕсли;
	
	// Проверка заполнения раздела.
	Если СтруктураРеквизитовФормы.НаблюдательЗаполненияРазделов.Свойство(ИмяРаздела)
	   И СтруктураРеквизитовФормы.НаблюдательЗаполненияРазделов[ИмяРаздела] = Ложь Тогда
		ОписаниеОшибки = "Отчет об изменениях капитала не заполнен";
		ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, ИмяРаздела);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьЗаполнение_ОДДС(СтатусПроверки, ПараметрыВыгрузки)
	
	ИмяРаздела = "ОДДС";
	
	Если НЕ РазделВключенВОтчет(ИмяРаздела, ПараметрыВыгрузки.ДеревоНастройкиСтраниц) Тогда
		Возврат;
	КонецЕсли;
	
	// Проверка заполнения раздела.
	Если СтруктураРеквизитовФормы.НаблюдательЗаполненияРазделов.Свойство(ИмяРаздела)
	   И СтруктураРеквизитовФормы.НаблюдательЗаполненияРазделов[ИмяРаздела] = Ложь Тогда
		ОписаниеОшибки = "Отчет о движении денежных средств не заполнен";
		ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, ИмяРаздела);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьЗаполнение_ОЦИС(СтатусПроверки, ПараметрыВыгрузки)
	
	ИмяРаздела = "ОЦИС";
	
	Если НЕ РазделВключенВОтчет(ИмяРаздела, ПараметрыВыгрузки.ДеревоНастройкиСтраниц) Тогда
		Возврат;
	КонецЕсли;
	
	// Проверка заполнения раздела.
	Если СтруктураРеквизитовФормы.НаблюдательЗаполненияРазделов.Свойство(ИмяРаздела)
	   И СтруктураРеквизитовФормы.НаблюдательЗаполненияРазделов[ИмяРаздела] = Ложь Тогда
		ОписаниеОшибки = "Отчет о целевом использовании средств не заполнен";
		ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, ИмяРаздела);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьЗаполнение_ДополнительныеПоказатели(СтатусПроверки, ПараметрыВыгрузки)
	
	ИмяРаздела = "ДополнительныеПоказатели";
	
	Если НЕ РазделВключенВОтчет(ИмяРаздела, ПараметрыВыгрузки.ДеревоНастройкиСтраниц) Тогда
		Возврат;
	КонецЕсли;
	
	// Проверка заполнения раздела.
	Если СтруктураРеквизитовФормы.НаблюдательЗаполненияРазделов.Свойство(ИмяРаздела)
	   И СтруктураРеквизитовФормы.НаблюдательЗаполненияРазделов[ИмяРаздела] = Ложь Тогда
		ОписаниеОшибки = "Дополнительные показатели не заполнены";
		ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, ИмяРаздела);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьЗаполнение_РасшифровкиОбеспеченийПолученные(СтатусПроверки, ПараметрыВыгрузки)
	
	ИмяРаздела = "РасшифровкиОбеспеченийПолученные";
	
	Если НЕ РазделВключенВОтчет(ИмяРаздела, ПараметрыВыгрузки.ДеревоНастройкиСтраниц) Тогда
		Возврат;
	КонецЕсли;
	
	АдресДанныхМетаРаздела = СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + "РасшифровкиОбеспечений"];
	ДанныеМетаРаздела = ПолучитьИзВременногоХранилища(АдресДанныхМетаРаздела);
	ДанныеРаздела = ДанныеМетаРаздела.Строки[0].Строки[0].Строки[0];
	
	ОписаниеОшибкиЗаполнения = "Отправка незаполненного отчета ""Расшифровка полученных обеспечений обязательств и платежей"" не предусмотрена. Исключите отчет из отправляемой отчетности или установите статус ""данные отсутствуют""";
	
	Если ДействуетСВерсииФормата("5.10.01") Тогда
		Если ДанныеРаздела.Параметры.СтатусЗаполнения = "пустой" Тогда
			Возврат;
			
		ИначеЕсли ДанныеРаздела.Параметры.СтатусЗаполнения = "новый" Тогда
			ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибкиЗаполнения, ИмяРаздела);
			Возврат;
			
		ИначеЕсли ДанныеРаздела.Параметры.СтатусЗаполнения = "заполнен" Тогда
			Если ДанныеРаздела.ДополнительныеДанные = Неопределено
			 ИЛИ ДанныеРаздела.ДополнительныеДанные.Данные.Количество() = 0 Тогда
				ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибкиЗаполнения, ИмяРаздела);
				Возврат;
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		Если ДанныеРаздела.ДополнительныеДанные = Неопределено Тогда
			ОписаниеОшибки = "Расшифровка полученных обеспечений обязательств и платежей не заполнена";
			ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, ИмяРаздела);
			
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ОтчетЗаполнен = Ложь;
	
	СтрокиОтчета = ДанныеРаздела.ДополнительныеДанные.Данные;
	Для Каждого СтрокаОтчета Из СтрокиОтчета Цикл
		НомерСтроки = СтрокаЧГ0(СтрокиОтчета.Индекс(СтрокаОтчета) + 1);
		
		ОбщаяЧастьОписания = "В строке " + НомерСтроки
		                   + " расшифровки полученных обязательств обеспечений обязательств и платежей ";
		
		ИмяПоказателя = "ДолжникНаименование";
		ЗначениеПоказателя = СтрокаОтчета[ИмяПоказателя];
		Если НЕ ЗначениеЗаполнено(ЗначениеПоказателя) Тогда
			ОписаниеОшибки = ОбщаяЧастьОписания
			               + "не указано наименование организации за которую получено обеспечение";
			ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, ИмяРаздела, ИмяПоказателя, НомерСтроки);
		КонецЕсли;
		
		ИмяПоказателя = "ДолжникИНН";
		ЗначениеПоказателя = СтрокаОтчета[ИмяПоказателя];
		Если ЗначениеЗаполнено(ЗначениеПоказателя) И СтрДлина(ЗначениеПоказателя) <> 10 И СтрДлина(ЗначениеПоказателя) <> 12 Тогда
			ОписаниеОшибки = ОбщаяЧастьОписания
			               + "указан ИНН организации, не состоящий из 10 или 12 символов";
			ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, ИмяРаздела, ИмяПоказателя, НомерСтроки);
		КонецЕсли;
		
		ИмяПоказателя = "КонтрагентНаименование";
		ЗначениеПоказателя = СтрокаОтчета[ИмяПоказателя];
		Если НЕ ЗначениеЗаполнено(ЗначениеПоказателя) Тогда
			ОписаниеОшибки = ОбщаяЧастьОписания
			               + "не указано наименование организации, предоставившей обеспечение";
			ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, ИмяРаздела, ИмяПоказателя, НомерСтроки);
		КонецЕсли;
		
		ИмяПоказателя = "КонтрагентИНН";
		ЗначениеПоказателя = СтрокаОтчета[ИмяПоказателя];
		Если ЗначениеЗаполнено(ЗначениеПоказателя) И СтрДлина(ЗначениеПоказателя) <> 10 И СтрДлина(ЗначениеПоказателя) <> 12 Тогда
			ОписаниеОшибки = ОбщаяЧастьОписания
			               + "указан ИНН организации, не состоящий из 10 или 12 символов";
			ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, ИмяРаздела, ИмяПоказателя, НомерСтроки);
		КонецЕсли;
		
		ИмяПоказателя = "ДоговорНомер";
		ЗначениеПоказателя = СтрокаОтчета[ИмяПоказателя];
		Если НЕ ЗначениеЗаполнено(ЗначениеПоказателя) Тогда
			ОписаниеОшибки = ОбщаяЧастьОписания
			               + "не указан номер договора";
			ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, ИмяРаздела, ИмяПоказателя, НомерСтроки);
		КонецЕсли;
		
		ИмяПоказателя = "ВидОбеспечения";
		ЗначениеПоказателя = СтрокаОтчета[ИмяПоказателя];
		Если НЕ ЗначениеЗаполнено(ЗначениеПоказателя) Тогда
			ОписаниеОшибки = ОбщаяЧастьОписания
			               + "не указан вид обеспечения";
			ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, ИмяРаздела, ИмяПоказателя, НомерСтроки);
		КонецЕсли;
		
		ИмяПоказателя = "Валюта";
		ЗначениеПоказателя = СтрокаОтчета[ИмяПоказателя];
		Если ЗначениеЗаполнено(СтрокаОтчета.СуммаВал) И НЕ ЗначениеЗаполнено(ЗначениеПоказателя) Тогда
			ОписаниеОшибки = ОбщаяЧастьОписания
			               + "не указан код валюты";
			ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, ИмяРаздела, ИмяПоказателя, НомерСтроки);
		ИначеЕсли ЗначениеЗаполнено(ЗначениеПоказателя) И СтрДлина(ЗначениеПоказателя) <> 3 Тогда
			ОписаниеОшибки = ОбщаяЧастьОписания
			               + "указан код валюты, не состоящий из 3 символов";
			ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, ИмяРаздела, ИмяПоказателя, НомерСтроки);
		КонецЕсли;
		
		ИмяПоказателя = "ДоговорНач";
		ЗначениеПоказателя = СтрокаОтчета[ИмяПоказателя];
		Если НЕ ЗначениеЗаполнено(ЗначениеПоказателя) Тогда
			ОписаниеОшибки = ОбщаяЧастьОписания
			               + "не указана дата начала действия договора";
			ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, ИмяРаздела, ИмяПоказателя, НомерСтроки);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьЗаполнение_РасшифровкиОбеспеченийВыданные(СтатусПроверки, ПараметрыВыгрузки)
	
	ИмяРаздела = "РасшифровкиОбеспеченийВыданные";
	
	Если НЕ РазделВключенВОтчет(ИмяРаздела, ПараметрыВыгрузки.ДеревоНастройкиСтраниц) Тогда
		Возврат;
	КонецЕсли;
	
	АдресДанныхМетаРаздела = СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + "РасшифровкиОбеспечений"];
	ДанныеМетаРаздела = ПолучитьИзВременногоХранилища(АдресДанныхМетаРаздела);
	ДанныеРаздела = ДанныеМетаРаздела.Строки[0].Строки[1].Строки[0];
	
	ОписаниеОшибкиЗаполнения = "Отправка незаполненного отчета ""Расшифровка выданных обеспечений обязательств и платежей"" не предусмотрена. Исключите отчет из отправляемой отчетности или установите статус ""данные отсутствуют""";
	
	Если ДействуетСВерсииФормата("5.10.01") Тогда
		Если ДанныеРаздела.Параметры.СтатусЗаполнения = "пустой" Тогда
			Возврат;
			
		ИначеЕсли ДанныеРаздела.Параметры.СтатусЗаполнения = "новый" Тогда
			ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибкиЗаполнения, ИмяРаздела);
			Возврат;
			
		ИначеЕсли ДанныеРаздела.Параметры.СтатусЗаполнения = "заполнен" Тогда
			Если ДанныеРаздела.ДополнительныеДанные = Неопределено
			 ИЛИ ДанныеРаздела.ДополнительныеДанные.Данные.Количество() = 0 Тогда
				ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибкиЗаполнения, ИмяРаздела);
				Возврат;
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		Если ДанныеРаздела.ДополнительныеДанные = Неопределено Тогда
			ОписаниеОшибки = "Расшифровка выданных обеспечений обязательств и платежей не заполнена";
			ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, ИмяРаздела);
			
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
	
	СтрокиОтчета = ДанныеРаздела.ДополнительныеДанные.Данные;
	Для Каждого СтрокаОтчета Из СтрокиОтчета Цикл
		НомерСтроки = СтрокаЧГ0(СтрокиОтчета.Индекс(СтрокаОтчета) + 1);
		
		ОбщаяЧастьОписания = "В строке " + НомерСтроки
		                   + " расшифровки выданных обязательств обеспечений обязательств и платежей ";
		
		ИмяПоказателя = "ДолжникНаименование";
		ЗначениеПоказателя = СтрокаОтчета[ИмяПоказателя];
		Если НЕ ЗначениеЗаполнено(ЗначениеПоказателя) Тогда
			ОписаниеОшибки = ОбщаяЧастьОписания
			               + "не указано наименование организации за которую предоставлено обеспечение";
			ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, ИмяРаздела, ИмяПоказателя, НомерСтроки);
		КонецЕсли;
		
		ИмяПоказателя = "ДолжникИНН";
		ЗначениеПоказателя = СтрокаОтчета[ИмяПоказателя];
		Если ЗначениеЗаполнено(ЗначениеПоказателя) И СтрДлина(ЗначениеПоказателя) <> 10 И СтрДлина(ЗначениеПоказателя) <> 12 Тогда
			ОписаниеОшибки = ОбщаяЧастьОписания
			               + "указан ИНН организации, не состоящий из 10 или 12 символов";
			ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, ИмяРаздела, ИмяПоказателя, НомерСтроки);
		КонецЕсли;
		
		ИмяПоказателя = "КонтрагентНаименование";
		ЗначениеПоказателя = СтрокаОтчета[ИмяПоказателя];
		Если НЕ ЗначениеЗаполнено(ЗначениеПоказателя) Тогда
			ОписаниеОшибки = ОбщаяЧастьОписания
			               + "не указано наименование организации, в пользу которой предоставлено обеспечение";
			ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, ИмяРаздела, ИмяПоказателя, НомерСтроки);
		КонецЕсли;
		
		ИмяПоказателя = "КонтрагентИНН";
		ЗначениеПоказателя = СтрокаОтчета[ИмяПоказателя];
		Если ЗначениеЗаполнено(ЗначениеПоказателя) И СтрДлина(ЗначениеПоказателя) <> 10 И СтрДлина(ЗначениеПоказателя) <> 12 Тогда
			ОписаниеОшибки = ОбщаяЧастьОписания
			               + "указан ИНН организации, не состоящий из 10 или 12 символов";
			ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, ИмяРаздела, ИмяПоказателя, НомерСтроки);
		КонецЕсли;
		
		ИмяПоказателя = "ДоговорНомер";
		ЗначениеПоказателя = СтрокаОтчета[ИмяПоказателя];
		Если НЕ ЗначениеЗаполнено(ЗначениеПоказателя) Тогда
			ОписаниеОшибки = ОбщаяЧастьОписания
			               + "не указан номер договора";
			ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, ИмяРаздела, ИмяПоказателя, НомерСтроки);
		КонецЕсли;
		
		ИмяПоказателя = "ВидОбеспечения";
		ЗначениеПоказателя = СтрокаОтчета[ИмяПоказателя];
		Если НЕ ЗначениеЗаполнено(ЗначениеПоказателя) Тогда
			ОписаниеОшибки = ОбщаяЧастьОписания
			               + "не указан вид обеспечения";
			ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, ИмяРаздела, ИмяПоказателя, НомерСтроки);
		КонецЕсли;
		
		ИмяПоказателя = "Валюта";
		ЗначениеПоказателя = СтрокаОтчета[ИмяПоказателя];
		Если ЗначениеЗаполнено(СтрокаОтчета.СуммаВал) И НЕ ЗначениеЗаполнено(ЗначениеПоказателя) Тогда
			ОписаниеОшибки = ОбщаяЧастьОписания
			               + "не указан код валюты";
			ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, ИмяРаздела, ИмяПоказателя, НомерСтроки);
		ИначеЕсли ЗначениеЗаполнено(ЗначениеПоказателя) И СтрДлина(ЗначениеПоказателя) <> 3 Тогда
			ОписаниеОшибки = ОбщаяЧастьОписания
			               + "указан код валюты, не состоящий из 3 символов";
			ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, ИмяРаздела, ИмяПоказателя, НомерСтроки);
		КонецЕсли;
		
		ИмяПоказателя = "ДоговорНач";
		ЗначениеПоказателя = СтрокаОтчета[ИмяПоказателя];
		Если НЕ ЗначениеЗаполнено(ЗначениеПоказателя) Тогда
			ОписаниеОшибки = ОбщаяЧастьОписания
			               + "не указана дата начала действия договора";
			ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, ИмяРаздела, ИмяПоказателя, НомерСтроки);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьЗаполнение_ЗадолженностьПоКредитамЗаймам(СтатусПроверки, ПараметрыВыгрузки, ПараметрыПроверки)
	
	ИмяРаздела      = ПараметрыПроверки.ИмяРаздела;
	НазваниеРаздела = ПараметрыПроверки.НазваниеРаздела;
	ПрефиксРаздела  = ПараметрыПроверки.ПрефиксРаздела;
	ИндексВДереве   = ПараметрыПроверки.ИндексВДереве;
	ВидВРасшифровке = ПараметрыПроверки.ВидВРасшифровке;
	
	Если НЕ РазделВключенВОтчет(ИмяРаздела, ПараметрыВыгрузки.ДеревоНастройкиСтраниц) Тогда
		Возврат;
	КонецЕсли;
	
	ИмяКорневогоРаздела = мСтруктураМногоуровневыхРазделов[ИмяРаздела].КорневойРаздел;
	ДанныеРаздела = ПолучитьИзВременногоХранилища(СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяКорневогоРаздела]);
	СтраницаРаздела = ДанныеРаздела.Строки[0].Строки[ИндексВДереве].Строки[0];
	ПараметрыСтраницы = СтраницаРаздела.Параметры;
	
	ОписаниеОшибкиЗаполнения = "Отправка незаполненного отчета ""%1"" не предусмотрена. Исключите отчет из отправляемой отчетности или установите статус ""данные отсутствуют""";
	ОписаниеОшибкиЗаполнения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		ОписаниеОшибкиЗаполнения, НазваниеРаздела);
	
	Если ДействуетСВерсииФормата("5.10.01") Тогда
		Если ПараметрыСтраницы.СтатусЗаполнения = "пустой" Тогда
			Возврат;
			
		ИначеЕсли ПараметрыСтраницы.СтатусЗаполнения = "новый" Тогда
			ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибкиЗаполнения, ИмяРаздела);
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ФорматнаяСтрока = "ЧДЦ=3; ЧС=3; ЧН=; ЧГ=0";
	
	МСЧ1 = СтраницаРаздела.ДанныеМногострочныхЧастей[ПрефиксРаздела + "М1"];
	
	ОтчетЗаполнен = Ложь;
	
	НомерСтроки = 0;
	Для Каждого СтрокаМСЧ1 Из МСЧ1.Строки Цикл
		ДанныеСтроки = СтрокаМСЧ1.Данные;
		НомерСтроки = НомерСтроки + 1;
		Постфикс1 = "_" + СтрокаЧГ0(НомерСтроки);
		
		СтрокаЗаполнена = ЗначениеЗаполнено(ДанныеСтроки[ПрефиксРаздела + "М100001"])
		              ИЛИ ЗначениеЗаполнено(ЗначениеПриведенноеКЕдиницеИзмерения(ДанныеСтроки[ПрефиксРаздела + "М100002"], ФорматнаяСтрока))
		              ИЛИ ЗначениеЗаполнено(ЗначениеПриведенноеКЕдиницеИзмерения(ДанныеСтроки[ПрефиксРаздела + "М100003"], ФорматнаяСтрока))
		              ИЛИ ЗначениеЗаполнено(ЗначениеПриведенноеКЕдиницеИзмерения(ДанныеСтроки[ПрефиксРаздела + "М100004"], ФорматнаяСтрока))
		              ИЛИ ЗначениеЗаполнено(ЗначениеПриведенноеКЕдиницеИзмерения(ДанныеСтроки[ПрефиксРаздела + "М100005"], ФорматнаяСтрока))
		              ИЛИ ЗначениеЗаполнено(ЗначениеПриведенноеКЕдиницеИзмерения(ДанныеСтроки[ПрефиксРаздела + "М100006"], ФорматнаяСтрока))
		              ИЛИ ЗначениеЗаполнено(ЗначениеПриведенноеКЕдиницеИзмерения(ДанныеСтроки[ПрефиксРаздела + "М100007"], ФорматнаяСтрока))
		              ИЛИ ЗначениеЗаполнено(ДанныеСтроки[ПрефиксРаздела + "М100008"])
		              ИЛИ ЗначениеЗаполнено(ДанныеСтроки[ПрефиксРаздела + "М100009"])
		              ИЛИ ЗначениеЗаполнено(ДанныеСтроки[ПрефиксРаздела + "М100010"])
		              ИЛИ ЗначениеЗаполнено(ДанныеСтроки[ПрефиксРаздела + "М100011"])
		              ИЛИ ЗначениеЗаполнено(ДанныеСтроки[ПрефиксРаздела + "М100012"])
		              ИЛИ ЗначениеЗаполнено(ДанныеСтроки[ПрефиксРаздела + "М100013"])
		              ИЛИ ЗначениеЗаполнено(ДанныеСтроки[ПрефиксРаздела + "М100014"])
		              ИЛИ ЗначениеЗаполнено(ДанныеСтроки[ПрефиксРаздела + "М100015"])
		              ИЛИ ЗначениеЗаполнено(ЗначениеПриведенноеКЕдиницеИзмерения(ДанныеСтроки[ПрефиксРаздела + "М100016"], ФорматнаяСтрока))
		              ИЛИ ЗначениеЗаполнено(ДанныеСтроки[ПрефиксРаздела + "М100017"])
		              ИЛИ ЗначениеЗаполнено(ДанныеСтроки[ПрефиксРаздела + "М100018"])
		              ИЛИ ЗначениеЗаполнено(ДанныеСтроки[ПрефиксРаздела + "М100019"])
		              ИЛИ ЗначениеЗаполнено(ДанныеСтроки[ПрефиксРаздела + "М100020"])
		              ИЛИ ЗначениеЗаполнено(ДанныеСтроки[ПрефиксРаздела + "М100021"])
		              ИЛИ ЗначениеЗаполнено(ДанныеСтроки[ПрефиксРаздела + "М100022"])
		              ИЛИ ЗначениеЗаполнено(ДанныеСтроки[ПрефиксРаздела + "М100023"])
		              ИЛИ ЗначениеЗаполнено(ДанныеСтроки[ПрефиксРаздела + "М100024"])
		              ИЛИ ЗначениеЗаполнено(ДанныеСтроки[ПрефиксРаздела + "М100025"])
		              ИЛИ ЗначениеЗаполнено(ДанныеСтроки[ПрефиксРаздела + "М100026"])
		              ИЛИ ЗначениеЗаполнено(ДанныеСтроки[ПрефиксРаздела + "М100027"])
		              ИЛИ ЗначениеЗаполнено(ЗначениеПриведенноеКЕдиницеИзмерения(ДанныеСтроки[ПрефиксРаздела + "М100028"], ФорматнаяСтрока))
		              ИЛИ ЗначениеЗаполнено(ДанныеСтроки[ПрефиксРаздела + "М100029"])
		              ИЛИ ЗначениеЗаполнено(ДанныеСтроки[ПрефиксРаздела + "М100030"])
		              ИЛИ ЗначениеЗаполнено(ДанныеСтроки[ПрефиксРаздела + "М100031"])
		              ИЛИ ЗначениеЗаполнено(ДанныеСтроки[ПрефиксРаздела + "М100032"]);
		
		МСЧ2 = СтрокаМСЧ1.ДанныеМногострочныхЧастей[ПрефиксРаздела + "М2"];
		ЗаполненГрафикПлатежей = Ложь;
		
		Для Каждого СтрокаМСЧ2 Из МСЧ2.Строки Цикл
			ДатаПлатежа = СтрокаМСЧ2.Данные[ПрефиксРаздела + "М200001"];
			СуммаПлатежа = ЗначениеПриведенноеКЕдиницеИзмерения(СтрокаМСЧ2.Данные[ПрефиксРаздела + "М200002"], ФорматнаяСтрока);
			ОсновнойДолг = ЗначениеПриведенноеКЕдиницеИзмерения(СтрокаМСЧ2.Данные[ПрефиксРаздела + "М200003"], ФорматнаяСтрока);
			СуммаПлатежаВал = СтрокаМСЧ2.Данные[ПрефиксРаздела + "М200004"];
			ОсновнойДолгВал = СтрокаМСЧ2.Данные[ПрефиксРаздела + "М200005"];
			
			ЗаполненГрафикПлатежей = ЗначениеЗаполнено(ДатаПлатежа)
			                     ИЛИ ЗначениеЗаполнено(СуммаПлатежа) ИЛИ ЗначениеЗаполнено(ОсновнойДолг)
			                     ИЛИ ЗначениеЗаполнено(СуммаПлатежаВал) ИЛИ ЗначениеЗаполнено(ОсновнойДолгВал);
			
			Если ЗаполненГрафикПлатежей Тогда
				СтрокаЗаполнена = Истина;
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		Если СтрокаЗаполнена Тогда
			ОтчетЗаполнен = Истина;
			
			ИмяПоказателя = ПрефиксРаздела + "М100001";
			ИмяПоказателяМакета = ИмяПоказателя + Постфикс1;
			КодСчета = СокрЛП(СтрокаМСЧ1.Данные[ИмяПоказателя]);
			
			Если НЕ ЗначениеЗаполнено(КодСчета) Тогда
				ОписаниеОшибки = "В строке " + СтрокаЧГ0(НомерСтроки) + ВидВРасшифровке
				               + " не указан код счета учета";
				ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, ИмяРаздела, ИмяПоказателяМакета);
			КонецЕсли;
			
			УказанКонтрагент = ЗначениеЗаполнено(СтрокаМСЧ1.Данные[ПрефиксРаздела + "М100008"])
			               ИЛИ ЗначениеЗаполнено(СтрокаМСЧ1.Данные[ПрефиксРаздела + "М100009"])
			               ИЛИ ЗначениеЗаполнено(СтрокаМСЧ1.Данные[ПрефиксРаздела + "М100010"]);
			
			Если УказанКонтрагент Тогда
				ИмяПоказателя = ПрефиксРаздела + "М100008";
				ИмяПоказателяМакета = ИмяПоказателя + Постфикс1;
				КонтрагентНаименование = СтрокаМСЧ1.Данные[ИмяПоказателя];
				
				Если НЕ ЗначениеЗаполнено(КонтрагентНаименование) Тогда
					ОписаниеОшибки = "В строке " + СтрокаЧГ0(НомерСтроки) + ВидВРасшифровке
					               + " не указано наименование контрагента";
					ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, ИмяРаздела, ИмяПоказателяМакета);
				КонецЕсли;
				
				ИмяПоказателя = ПрефиксРаздела + "М100009";
				ИмяПоказателяМакета = ИмяПоказателя + Постфикс1;
				КонтрагентИНН = СокрЛП(СтрокаМСЧ1.Данные[ИмяПоказателя]);
				
				Если ЗначениеЗаполнено(КонтрагентИНН)
				   И СтрДлина(КонтрагентИНН) <> 10 И СтрДлина(КонтрагентИНН) <> 12 Тогда
					ОписаниеОшибки = "В строке " + СтрокаЧГ0(НомерСтроки) + ВидВРасшифровке
					               + " указан ИНН контрагента, не состоящий из 10 или 12 символов";
					ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, ИмяРаздела, ИмяПоказателяМакета);
				КонецЕсли;
				
				ИмяПоказателя = ПрефиксРаздела + "М100010";
				ИмяПоказателяМакета = ИмяПоказателя + Постфикс1;
				КонтрагентКПП = СокрЛП(СтрокаМСЧ1.Данные[ИмяПоказателя]);
				
				Если СтрДлина(КонтрагентИНН) = 10 Тогда
					Если СтрДлина(КонтрагентКПП) <> 9 Тогда
						ОписаниеОшибки = "В строке " + СтрокаЧГ0(НомерСтроки) + ВидВРасшифровке
						               + " не указан КПП контрагента, состоящий из 9 символов";
						ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, ИмяРаздела, ИмяПоказателяМакета);
					КонецЕсли;
					
				ИначеЕсли ЗначениеЗаполнено(КонтрагентКПП) Тогда
					ОписаниеОшибки = "В строке " + СтрокаЧГ0(НомерСтроки) + ВидВРасшифровке
					               + " не должен указываться КПП контрагента";
					ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, ИмяРаздела, ИмяПоказателяМакета);
					
				КонецЕсли;
				
			КонецЕсли;
			
			УказанДоговор = ЗначениеЗаполнено(СтрокаМСЧ1.Данные[ПрефиксРаздела + "М100011"])
			            ИЛИ ЗначениеЗаполнено(СтрокаМСЧ1.Данные[ПрефиксРаздела + "М100012"])
			            ИЛИ ЗначениеЗаполнено(СтрокаМСЧ1.Данные[ПрефиксРаздела + "М100013"])
			            ИЛИ ЗначениеЗаполнено(СтрокаМСЧ1.Данные[ПрефиксРаздела + "М100014"])
			            ИЛИ ЗначениеЗаполнено(СтрокаМСЧ1.Данные[ПрефиксРаздела + "М100015"])
			            ИЛИ ЗначениеЗаполнено(ЗначениеПриведенноеКЕдиницеИзмерения(СтрокаМСЧ1.Данные[ПрефиксРаздела + "М100016"], ФорматнаяСтрока))
			            ИЛИ ЗначениеЗаполнено(СтрокаМСЧ1.Данные[ПрефиксРаздела + "М100017"])
			            ИЛИ ЗначениеЗаполнено(СтрокаМСЧ1.Данные[ПрефиксРаздела + "М100018"])
			            ИЛИ ЗаполненГрафикПлатежей;
			
			Если УказанДоговор Тогда
				ИмяПоказателя = ПрефиксРаздела + "М100011";
				ИмяПоказателяМакета = ИмяПоказателя + Постфикс1;
				ПредставлениеДоговора = СтрокаМСЧ1.Данные[ИмяПоказателя];
				
				Если НЕ ЗначениеЗаполнено(ПредставлениеДоговора) Тогда
					ОписаниеОшибки = "В строке " + СтрокаЧГ0(НомерСтроки) + ВидВРасшифровке
					               + " не указан договор";
					ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, ИмяРаздела, ИмяПоказателяМакета);
				КонецЕсли;
				
				ИмяПоказателя = ПрефиксРаздела + "М100017";
				ИмяПоказателяМакета = ИмяПоказателя + Постфикс1;
				КодВалюты = СокрЛП(СтрокаМСЧ1.Данные[ИмяПоказателя]);
				
				Если ЗначениеЗаполнено(КодВалюты) И СтрДлина(КодВалюты) <> 3 Тогда
					ОписаниеОшибки = "В строке " + СтрокаЧГ0(НомерСтроки) + ВидВРасшифровке
					               + " указан код валюты, не состоящий из 3 символов";
					ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, ИмяРаздела, ИмяПоказателяМакета);
				КонецЕсли;
				
				Для Каждого СтрокаМСЧ2 Из МСЧ2.Строки Цикл
					НомерСтрокиГрафикаПлатежей = СтрокаЧГ0(МСЧ2.Строки.Индекс(СтрокаМСЧ2) + 1);
					
					ДатаПлатежа = СтрокаМСЧ2.Данные[ПрефиксРаздела + "М200001"];
					СуммаПлатежа = ЗначениеПриведенноеКЕдиницеИзмерения(СтрокаМСЧ2.Данные[ПрефиксРаздела + "М200002"], ФорматнаяСтрока);
					ОсновнойДолг = ЗначениеПриведенноеКЕдиницеИзмерения(СтрокаМСЧ2.Данные[ПрефиксРаздела + "М200003"], ФорматнаяСтрока);
					СуммаПлатежаВал = СтрокаМСЧ2.Данные[ПрефиксРаздела + "М200004"];
					ОсновнойДолгВал = СтрокаМСЧ2.Данные[ПрефиксРаздела + "М200005"];
					
					ЗаполненГрафикПлатежей = ЗначениеЗаполнено(ДатаПлатежа)
					                     ИЛИ ЗначениеЗаполнено(СуммаПлатежа) ИЛИ ЗначениеЗаполнено(ОсновнойДолг)
					                     ИЛИ ЗначениеЗаполнено(СуммаПлатежаВал) ИЛИ ЗначениеЗаполнено(ОсновнойДолгВал);
					
					Если ЗаполненГрафикПлатежей И НЕ ЗначениеЗаполнено(ДатаПлатежа) Тогда
						ИмяПоказателяМакета = ПрефиксРаздела + "М200001" + Постфикс1 + "_" + НомерСтрокиГрафикаПлатежей;
						ОписаниеОшибки = "В строке " + НомерСтрокиГрафикаПлатежей + " графика платежей"
						               + " строки " + СтрокаЧГ0(НомерСтроки) + ВидВРасшифровке
						               + " не указана дата платежа";
						ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, ИмяРаздела, ИмяПоказателяМакета);
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
			ДатаОбразованияЗадолженности = ДанныеСтроки[ПрефиксРаздела + "М100026"];
			ДатаПогашенияЗадолженности = ДанныеСтроки[ПрефиксРаздела + "М100027"];
			СуммаЗадолженности = ЗначениеПриведенноеКЕдиницеИзмерения(СтрокаМСЧ1.Данные[ПрефиксРаздела + "М100028"], ФорматнаяСтрока);
			СуммаЗадолженностиВал = ДанныеСтроки[ПрефиксРаздела + "М100029"];
			
			УказанаПросроченнаяЗадолженность = ЗначениеЗаполнено(ДатаОбразованияЗадолженности)
			                               ИЛИ ЗначениеЗаполнено(ДатаПогашенияЗадолженности)
			                               ИЛИ ЗначениеЗаполнено(СуммаЗадолженности)
			                               ИЛИ ЗначениеЗаполнено(СуммаЗадолженностиВал);
			Если УказанаПросроченнаяЗадолженность Тогда
				ИмяПоказателя = ПрефиксРаздела + "М100026";
				ИмяПоказателяМакета = ИмяПоказателя + Постфикс1;
				Если НЕ ЗначениеЗаполнено(ДатаОбразованияЗадолженности) Тогда
					ОписаниеОшибки = "В строке " + СтрокаЧГ0(НомерСтроки) + ВидВРасшифровке
					               + " не указана дата образования просроченной задолженности";
					ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, ИмяРаздела, ИмяПоказателяМакета);
				КонецЕсли;
				
				ИмяПоказателя = ПрефиксРаздела + "М100028";
				ИмяПоказателяМакета = ИмяПоказателя + Постфикс1;
				Если НЕ ЗначениеЗаполнено(СуммаЗадолженности) Тогда
					ОписаниеОшибки = "В строке " + СтрокаЧГ0(НомерСтроки) + ВидВРасшифровке
					               + " не указана сумма просроченной задолженности";
					ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, ИмяРаздела, ИмяПоказателяМакета);
				КонецЕсли;
				
			КонецЕсли;
			
			ВидОбеспечения = ДанныеСтроки[ПрефиксРаздела + "М100030"];
			ДатаОбеспечения = ДанныеСтроки[ПрефиксРаздела + "М100031"];
			
			УказаноОбеспечение = ЗначениеЗаполнено(ВидОбеспечения) ИЛИ ЗначениеЗаполнено(ДатаОбеспечения);
			Если УказаноОбеспечение Тогда
				ИмяПоказателя = ПрефиксРаздела + "М100030";
				ИмяПоказателяМакета = ИмяПоказателя + Постфикс1;
				Если НЕ ЗначениеЗаполнено(ВидОбеспечения) Тогда
					ОписаниеОшибки = "В строке " + СтрокаЧГ0(НомерСтроки) + ВидВРасшифровке
					               + " не указан вид обеспечения";
					ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, ИмяРаздела, ИмяПоказателяМакета);
				КонецЕсли;
				
				ИмяПоказателя = ПрефиксРаздела + "М100031";
				ИмяПоказателяМакета = ИмяПоказателя + Постфикс1;
				Если НЕ ЗначениеЗаполнено(ДатаОбеспечения) Тогда
					ОписаниеОшибки = "В строке " + СтрокаЧГ0(НомерСтроки) + ВидВРасшифровке
					               + " не указана дата возникновения обеспечения";
					ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, ИмяРаздела, ИмяПоказателяМакета);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ДействуетСВерсииФормата("5.10.01") Тогда
		Если ПараметрыСтраницы.СтатусЗаполнения = "заполнен" И НЕ ОтчетЗаполнен Тогда
			ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибкиЗаполнения, ИмяРаздела);
		КонецЕсли;
		
	Иначе
		Если СтруктураРеквизитовФормы.НаблюдательЗаполненияРазделов.Свойство(ИмяРаздела)
		   И СтруктураРеквизитовФормы.НаблюдательЗаполненияРазделов[ИмяРаздела] = Ложь Тогда
			ОписаниеОшибки = НазваниеРаздела + " не заполнена";
			ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, ИмяРаздела);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьЗаполнение_ЛизингОбязательства(СтатусПроверки, ПараметрыВыгрузки)
	
	ИмяРаздела = "ЛизингОбязательства";
	ПрефиксРаздела = "П00006";
	
	Если НЕ РазделВключенВОтчет(ИмяРаздела, ПараметрыВыгрузки.ДеревоНастройкиСтраниц) Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеРаздела = ПолучитьИзВременногоХранилища(СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяРаздела]);
	ФорматнаяСтрока = "ЧДЦ=3; ЧС=3; ЧН=; ЧГ=0";
	
	ОписаниеОшибкиЗаполнения = "Отправка незаполненной справки о текущих обязательствах по договорам лизинга не предусмотрена. Исключите отчет из отправляемой отчетности или установите статус ""данные отсутствуют""";
	
	НомерСтраницы = 0;
	Для Каждого СтраницаРаздела Из ДанныеРаздела.Строки Цикл
		ОтчетЗаполнен = Ложь;
		НомерСтраницы = НомерСтраницы + 1;
		
		ПараметрыСтраницы = СтраницаРаздела.Параметры;
		
		Если ДействуетСВерсииФормата("5.10.01") Тогда
			Если ПараметрыСтраницы.СтатусЗаполнения = "пустой" Тогда
				Продолжить;
				
			ИначеЕсли ПараметрыСтраницы.СтатусЗаполнения = "новый" Тогда
				ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибкиЗаполнения, ИмяРаздела);
				Продолжить;
				
			КонецЕсли;
			
		КонецЕсли;
		
		МногострочнаяЧасть = СтраницаРаздела.ДанныеМногострочныхЧастей.П00006М1;
		
		НомерСтроки = 0;
		Для Каждого СтрокаМСЧ Из МногострочнаяЧасть.Строки Цикл
			ДанныеСтроки = СтрокаМСЧ.Данные;
			НомерСтроки = НомерСтроки + 1;
			Постфикс = "_" + СтрокаЧГ0(НомерСтроки);
			
			СтрокаЗаполнена = ЗначениеЗаполнено(ДанныеСтроки.П00006М100101)
			              ИЛИ ЗначениеЗаполнено(ДанныеСтроки.П00006М100102)
			              ИЛИ ЗначениеЗаполнено(ДанныеСтроки.П00006М100102)
			              ИЛИ ЗначениеЗаполнено(ДанныеСтроки.П00006М100103)
			              ИЛИ ЗначениеЗаполнено(ДанныеСтроки.П00006М100104)
			              ИЛИ ЗначениеЗаполнено(ДанныеСтроки.П00006М100105)
			              ИЛИ ЗначениеЗаполнено(ДанныеСтроки.П00006М100106)
			              ИЛИ ЗначениеЗаполнено(ДанныеСтроки.П00006М100107)
			              ИЛИ ЗначениеЗаполнено(ДанныеСтроки.П00006М100108)
			              ИЛИ ЗначениеЗаполнено(ДанныеСтроки.П00006М100109)
			              ИЛИ ЗначениеЗаполнено(ДанныеСтроки.П00006М100109)
			              ИЛИ ЗначениеЗаполнено(ЗначениеПриведенноеКЕдиницеИзмерения(ДанныеСтроки.П00006М100110, ФорматнаяСтрока))
			              ИЛИ ЗначениеЗаполнено(ЗначениеПриведенноеКЕдиницеИзмерения(ДанныеСтроки.П00006М100111, ФорматнаяСтрока))
			              ИЛИ ЗначениеЗаполнено(ЗначениеПриведенноеКЕдиницеИзмерения(ДанныеСтроки.П00006М100112, ФорматнаяСтрока))
			              ИЛИ ЗначениеЗаполнено(ДанныеСтроки.П00006М100113)
			              ИЛИ ЗначениеЗаполнено(ДанныеСтроки.П00006М100114)
			              ИЛИ ЗначениеЗаполнено(ДанныеСтроки.П00006М100115)
			              ИЛИ ЗначениеЗаполнено(ДанныеСтроки.П00006М100116)
			              ИЛИ ЗначениеЗаполнено(ЗначениеПриведенноеКЕдиницеИзмерения(ДанныеСтроки.П00006М100117, ФорматнаяСтрока));
			
			МСЧ2 = СтрокаМСЧ.ДанныеМногострочныхЧастей[ПрефиксРаздела + "М2"];
			ЗаполненГрафикПлатежей = Ложь;
			
			Для Каждого СтрокаМСЧ2 Из МСЧ2.Строки Цикл
				ДатаПлатежа = СтрокаМСЧ2.Данные[ПрефиксРаздела + "М200101"];
				СуммаПлатежа = ЗначениеПриведенноеКЕдиницеИзмерения(СтрокаМСЧ2.Данные[ПрефиксРаздела + "М200102"], ФорматнаяСтрока);
				ОсновнойДолг = ЗначениеПриведенноеКЕдиницеИзмерения(СтрокаМСЧ2.Данные[ПрефиксРаздела + "М200103"], ФорматнаяСтрока);
				СуммаПлатежаВал = СтрокаМСЧ2.Данные[ПрефиксРаздела + "М200104"];
				ОсновнойДолгВал = СтрокаМСЧ2.Данные[ПрефиксРаздела + "М200105"];
				
				ЗаполненГрафикПлатежей = ЗначениеЗаполнено(ДатаПлатежа)
				                     ИЛИ ЗначениеЗаполнено(СуммаПлатежа) ИЛИ ЗначениеЗаполнено(ОсновнойДолг)
				                     ИЛИ ЗначениеЗаполнено(СуммаПлатежаВал) ИЛИ ЗначениеЗаполнено(ОсновнойДолгВал);
				
				Если ЗаполненГрафикПлатежей Тогда
					СтрокаЗаполнена = Истина;
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
			
			Если СтрокаЗаполнена Тогда
				ОтчетЗаполнен = Истина;
				
				ИмяПоказателя = "П00006М100101";
				КомпанияНаименование = ДанныеСтроки[ИмяПоказателя];
				
				Если НЕ ЗначениеЗаполнено(КомпанияНаименование) Тогда
					ОписаниеОшибки = "В строке " + СтрокаЧГ0(НомерСтроки) + " страницы " + СтрокаЧГ0(НомерСтраницы)
					               + " расходов по финансовому лизингу"
					               + " не указано наименование компании";
					ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, ИмяРаздела, ИмяПоказателя + Постфикс, СтрокаЧГ0(НомерСтраницы));
				КонецЕсли;
				
				ИмяПоказателя = "П00006М100102";
				КомпанияИНН = СокрЛП(ДанныеСтроки[ИмяПоказателя]);
				
				Если ЗначениеЗаполнено(КомпанияИНН)
				   И СтрДлина(КомпанияИНН) <> 10 И СтрДлина(КомпанияИНН) <> 12 Тогда
					ОписаниеОшибки = "В строке " + СтрокаЧГ0(НомерСтроки) + " страницы " + СтрокаЧГ0(НомерСтраницы)
					               + " расходов по финансовому лизингу"
					               + " указан ИНН компании, не состоящий из 10 или 12 символов";
					ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, ИмяРаздела, ИмяПоказателя + Постфикс, СтрокаЧГ0(НомерСтраницы));
				КонецЕсли;
				
				ИмяПоказателя = "П00006М100103";
				КомпанияКПП = СокрЛП(ДанныеСтроки[ИмяПоказателя]);
				
				Если СтрДлина(КомпанияИНН) = 10 Тогда
					Если СтрДлина(КомпанияКПП) <> 9 Тогда
						ОписаниеОшибки = "В строке " + СтрокаЧГ0(НомерСтроки) + " страницы " + СтрокаЧГ0(НомерСтраницы)
						               + " расходов по финансовому лизингу"
						               + " не указан КПП компании, состоящий из 9 символов";
						ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, ИмяРаздела, ИмяПоказателя + Постфикс, СтрокаЧГ0(НомерСтраницы));
					КонецЕсли;
					
				ИначеЕсли СтрДлина(КомпанияИНН) = 12 И ЗначениеЗаполнено(КомпанияКПП) Тогда
					ОписаниеОшибки = "В строке " + СтрокаЧГ0(НомерСтроки) + " страницы " + СтрокаЧГ0(НомерСтраницы)
					               + " расходов по финансовому лизингу"
					               + " не должен указываться КПП компании";
					ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, ИмяРаздела, ИмяПоказателя + Постфикс, СтрокаЧГ0(НомерСтраницы));
					
				КонецЕсли;
				
				ИмяПоказателя = "П00006М100104";
				НомерДоговора = СокрЛП(ДанныеСтроки[ИмяПоказателя]);
				
				Если НЕ ЗначениеЗаполнено(НомерДоговора) Тогда
					ОписаниеОшибки = "В строке " + СтрокаЧГ0(НомерСтроки) + " страницы " + СтрокаЧГ0(НомерСтраницы)
					               + " расходов по финансовому лизингу"
					               + " не указан номер договора";
					ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, ИмяРаздела, ИмяПоказателя + Постфикс, СтрокаЧГ0(НомерСтраницы));
				КонецЕсли;
				
				ИмяПоказателя = "П00006М100105";
				ДатаДоговора = ДанныеСтроки[ИмяПоказателя];
				
				Если НЕ ЗначениеЗаполнено(ДатаДоговора) Тогда
					ОписаниеОшибки = "В строке " + СтрокаЧГ0(НомерСтроки) + " страницы " + СтрокаЧГ0(НомерСтраницы)
					               + " расходов по финансовому лизингу"
					               + " не указана дата договора";
					ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, ИмяРаздела, ИмяПоказателя + Постфикс, СтрокаЧГ0(НомерСтраницы));
				КонецЕсли;
				
				ИмяПоказателя = "П00006М100106";
				Продукт = СокрЛП(ДанныеСтроки[ИмяПоказателя]);
				
				Если НЕ ЗначениеЗаполнено(Продукт) Тогда
					ОписаниеОшибки = "В строке " + СтрокаЧГ0(НомерСтроки) + " страницы " + СтрокаЧГ0(НомерСтраницы)
					               + " расходов по финансовому лизингу"
					               + " не указан вид продукта";
					ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, ИмяРаздела, ИмяПоказателя + Постфикс, СтрокаЧГ0(НомерСтраницы));
				КонецЕсли;
				
				ИмяПоказателя = "П00006М100109";
				Валюта = СокрЛП(ДанныеСтроки[ИмяПоказателя]);
				
				Если НЕ ЗначениеЗаполнено(Валюта) Тогда
					ОписаниеОшибки = "В строке " + СтрокаЧГ0(НомерСтроки) + " страницы " + СтрокаЧГ0(НомерСтраницы)
					               + " расходов по финансовому лизингу"
					               + " не указан код валюты договора";
					ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, ИмяРаздела, ИмяПоказателя + Постфикс, СтрокаЧГ0(НомерСтраницы));
				ИначеЕсли СтрДлина(Валюта) <> 3 Тогда
					ОписаниеОшибки = "В строке " + СтрокаЧГ0(НомерСтроки) + " страницы " + СтрокаЧГ0(НомерСтраницы)
					               + " расходов по финансовому лизингу"
					               + " указан код валюты договора, не состоящий из 3 символов";
					ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, ИмяРаздела, ИмяПоказателя + Постфикс, СтрокаЧГ0(НомерСтраницы));
				КонецЕсли;
				
				ИмяПоказателя = "П00006М100107";
				УчетОбязательств = СокрЛП(ДанныеСтроки[ИмяПоказателя]);
				
				Если НЕ ЗначениеЗаполнено(УчетОбязательств) Тогда
					ОписаниеОшибки = "В строке " + СтрокаЧГ0(НомерСтроки) + " страницы " + СтрокаЧГ0(НомерСтраницы)
					               + " расходов по финансовому лизингу"
					               + " не указан вариант учета обязательва";
					ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, ИмяРаздела, ИмяПоказателя + Постфикс, СтрокаЧГ0(НомерСтраницы));
				КонецЕсли;
				
				Для Каждого СтрокаМСЧ2 Из МСЧ2.Строки Цикл
					НомерСтрокиГрафикаПлатежей = СтрокаЧГ0(МСЧ2.Строки.Индекс(СтрокаМСЧ2) + 1);
					
					ДатаПлатежа = СтрокаМСЧ2.Данные[ПрефиксРаздела + "М200101"];
					СуммаПлатежа = ЗначениеПриведенноеКЕдиницеИзмерения(СтрокаМСЧ2.Данные[ПрефиксРаздела + "М200102"], ФорматнаяСтрока);
					ОсновнойДолг = ЗначениеПриведенноеКЕдиницеИзмерения(СтрокаМСЧ2.Данные[ПрефиксРаздела + "М200103"], ФорматнаяСтрока);
					СуммаПлатежаВал = СтрокаМСЧ2.Данные[ПрефиксРаздела + "М200104"];
					ОсновнойДолгВал = СтрокаМСЧ2.Данные[ПрефиксРаздела + "М200105"];
					
					ЗаполненГрафикПлатежей = ЗначениеЗаполнено(ДатаПлатежа)
					                     ИЛИ ЗначениеЗаполнено(СуммаПлатежа) ИЛИ ЗначениеЗаполнено(ОсновнойДолг)
					                     ИЛИ ЗначениеЗаполнено(СуммаПлатежаВал) ИЛИ ЗначениеЗаполнено(ОсновнойДолгВал);
					
					Если ЗаполненГрафикПлатежей И НЕ ЗначениеЗаполнено(ДатаПлатежа) Тогда
						ИмяПоказателяМакета = ПрефиксРаздела + "М200101" + Постфикс + "_" + НомерСтрокиГрафикаПлатежей;
						ОписаниеОшибки = "В строке " + НомерСтрокиГрафикаПлатежей + " графика платежей"
						               + " строки " + СтрокаЧГ0(НомерСтроки) + " расходов по финансовому лизингу"
						               + " не указана дата платежа";
						ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, ИмяРаздела, ИмяПоказателяМакета);
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
			ОтчетЗаполнен = ОтчетЗаполнен
				ИЛИ ЗначениеЗаполнено(ЗначениеПриведенноеКЕдиницеИзмерения(СтраницаРаздела.Данные.П000060000102, ФорматнаяСтрока))
				ИЛИ ЗначениеЗаполнено(ЗначениеПриведенноеКЕдиницеИзмерения(СтраницаРаздела.Данные.П000060000202, ФорматнаяСтрока))
				ИЛИ ЗначениеЗаполнено(ЗначениеПриведенноеКЕдиницеИзмерения(СтраницаРаздела.Данные.П000060000302, ФорматнаяСтрока))
				ИЛИ ЗначениеЗаполнено(ЗначениеПриведенноеКЕдиницеИзмерения(СтраницаРаздела.Данные.П000060000402, ФорматнаяСтрока))
				ИЛИ ЗначениеЗаполнено(ЗначениеПриведенноеКЕдиницеИзмерения(СтраницаРаздела.Данные.П000060000502, ФорматнаяСтрока))
				ИЛИ ЗначениеЗаполнено(ЗначениеПриведенноеКЕдиницеИзмерения(СтраницаРаздела.Данные.П000060000602, ФорматнаяСтрока))
				ИЛИ ЗначениеЗаполнено(ЗначениеПриведенноеКЕдиницеИзмерения(СтраницаРаздела.Данные.П000060000702, ФорматнаяСтрока))
				ИЛИ ЗначениеЗаполнено(ЗначениеПриведенноеКЕдиницеИзмерения(СтраницаРаздела.Данные.П000060000802, ФорматнаяСтрока))
			
		КонецЦикла;
		
		Если ДействуетСВерсииФормата("5.10.01") И ПараметрыСтраницы.СтатусЗаполнения = "заполнен" И НЕ ОтчетЗаполнен Тогда
			ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибкиЗаполнения, ИмяРаздела);
		КонецЕсли;
		
	КонецЦикла;
	
	// Проверка заполнения раздела.
	Если НЕ ДействуетСВерсииФормата("5.10.01") Тогда
		Если СтруктураРеквизитовФормы.НаблюдательЗаполненияРазделов.Свойство(ИмяРаздела)
		   И СтруктураРеквизитовФормы.НаблюдательЗаполненияРазделов[ИмяРаздела] = Ложь Тогда
			ОписаниеОшибки = "Справка о текущих обязательствах по договорам лизинга не заполнена";
			ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, ИмяРаздела);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьЗаполнение_ДенежныеСредства(СтатусПроверки, ПараметрыВыгрузки)
	
	ИмяРаздела = "ДенежныеСредства";
	
	Если НЕ РазделВключенВОтчет(ИмяРаздела, ПараметрыВыгрузки.ДеревоНастройкиСтраниц) Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеМетаРаздела = ПолучитьИзВременногоХранилища(СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяРаздела]);
	ДанныеРаздела50 = ДанныеМетаРаздела.Строки[0].Строки[0].Строки[0];
	ДанныеРаздела51 = ДанныеМетаРаздела.Строки[0].Строки[1].Строки[0];
	ДанныеРаздела52 = ДанныеМетаРаздела.Строки[0].Строки[2].Строки[0];
	ДанныеРаздела55 = ДанныеМетаРаздела.Строки[0].Строки[3].Строки[0];
	
	Если РазделВключенВОтчет("ДенежныеСредства50", ПараметрыВыгрузки.ДеревоНастройкиСтраниц)
	   И ДанныеРаздела50.ДополнительныеДанные = Неопределено Тогда
		ОписаниеОшибки = "Анализ оборотов денежных средств на счете 50 не заполнен";
		ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, "ДенежныеСредства50");
	КонецЕсли;
	
	Если РазделВключенВОтчет("ДенежныеСредства51", ПараметрыВыгрузки.ДеревоНастройкиСтраниц)
	   И ДанныеРаздела51.ДополнительныеДанные = Неопределено Тогда
		ОписаниеОшибки = "Анализ оборотов денежных средств на счете 51 не заполнен";
		ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, "ДенежныеСредства51");
	КонецЕсли;
	
	Если РазделВключенВОтчет("ДенежныеСредства52", ПараметрыВыгрузки.ДеревоНастройкиСтраниц)
	   И ДанныеРаздела52.ДополнительныеДанные = Неопределено Тогда
		ОписаниеОшибки = "Анализ оборотов денежных средств на счете 52 не заполнен";
		ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, "ДенежныеСредства52");
	КонецЕсли;
	
	Если РазделВключенВОтчет("ДенежныеСредства55", ПараметрыВыгрузки.ДеревоНастройкиСтраниц)
	   И ДанныеРаздела55.ДополнительныеДанные = Неопределено Тогда
		ОписаниеОшибки = "Анализ оборотов денежных средств на счете 55 не заполнен";
		ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, "ДенежныеСредства55");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьЗаполнение_ОСВ(СтатусПроверки, ПараметрыВыгрузки)
	
	ИмяРаздела = "ОСВ";
	
	Если НЕ РазделВключенВОтчет(ИмяРаздела, ПараметрыВыгрузки.ДеревоНастройкиСтраниц) Тогда
		Возврат;
	КонецЕсли;
	
	АдресДанныхРаздела = СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяРаздела];
	ДанныеРаздела = ПолучитьИзВременногоХранилища(АдресДанныхРаздела).Строки[0];
	
	Если ДанныеРаздела.ДополнительныеДанные = Неопределено Тогда
		ОписаниеОшибки = "Оборотно-сальдовая ведомость не заполнена";
		ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, ИмяРаздела);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьЗаполнение_ОСВПоСчету(СтатусПроверки, ПараметрыВыгрузки)
	
	ИмяРаздела = "ОСВПоСчету";
	
	Если НЕ РазделВключенВОтчет(ИмяРаздела, ПараметрыВыгрузки.ДеревоНастройкиСтраниц) Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеРаздела = ПолучитьИзВременногоХранилища(СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяРаздела]);
	
	СчетаВыбраны = Ложь;
	
	Для Каждого СтраницаРаздела Из ДанныеРаздела.Строки Цикл
		ПараметрыСтраницы = СтраницаРаздела.Параметры;
		
		Если НЕ СчетОтмеченВСписке(ПараметрыСтраницы.Счет, "СписокСтраниц" + ИмяРаздела) Тогда
			Продолжить;
		КонецЕсли;
		
		СчетаВыбраны = Истина;
		
		СегментыСтраницы = ВыборкаСегментовОтчетаПоСчету(ИмяРаздела, ПараметрыСтраницы.Счет);
		Если СегментыСтраницы.Количество() = 0 Тогда
			ОписаниеОшибки = "ОСВ по счету " + ПараметрыСтраницы.Счет.Код + " не заполнена";
			ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, ИмяРаздела, "", ПараметрыСтраницы.Счет);
		КонецЕсли;
		
	КонецЦикла;
	
	Если НЕ СчетаВыбраны Тогда
		ОписаниеОшибки = "ОСВ по счетам не заполнены";
		ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, ИмяРаздела);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьЗаполнение_АнализСчета(СтатусПроверки, ПараметрыВыгрузки)
	
	ИмяРаздела = "АнализСчета";
	
	Если НЕ РазделВключенВОтчет(ИмяРаздела, ПараметрыВыгрузки.ДеревоНастройкиСтраниц) Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеРаздела = ПолучитьИзВременногоХранилища(СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяРаздела]);
	
	СчетаВыбраны = Ложь;
	
	Для Каждого СтраницаРаздела Из ДанныеРаздела.Строки Цикл
		ПараметрыСтраницы = СтраницаРаздела.Параметры;
		
		Если НЕ СчетОтмеченВСписке(ПараметрыСтраницы.Счет, "СписокСтраниц" + ИмяРаздела) Тогда
			Продолжить;
		КонецЕсли;
		
		СчетаВыбраны = Истина;
		
		СегментыСтраницы = ВыборкаСегментовОтчетаПоСчету(ИмяРаздела, ПараметрыСтраницы.Счет);
		Если СегментыСтраницы.Количество() = 0 Тогда
			ОписаниеОшибки = "Анализ счета " + ПараметрыСтраницы.Счет.Код + " не заполнен";
			ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, ИмяРаздела, "", ПараметрыСтраницы.Счет);
		КонецЕсли;
		
	КонецЦикла;
	
	Если НЕ СчетаВыбраны Тогда
		ОписаниеОшибки = "Анализы счетов не заполнены";
		ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, ИмяРаздела);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьЗаполнение_ОперацииПоБанковскимСчетам(СтатусПроверки, ПараметрыВыгрузки)
	
	ИмяРаздела = "ОперацииПоБанковскимСчетам";
	
	Если НЕ РазделВключенВОтчет(ИмяРаздела, ПараметрыВыгрузки.ДеревоНастройкиСтраниц) Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеМетаРаздела = ПолучитьИзВременногоХранилища(СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяРаздела]);
	ДанныеРаздела51 = ДанныеМетаРаздела.Строки[0].Строки[0].Строки[0];
	ДанныеРаздела52 = ДанныеМетаРаздела.Строки[0].Строки[1].Строки[0];
	ДанныеРаздела55 = ДанныеМетаРаздела.Строки[0].Строки[2].Строки[0];
	
	Если РазделВключенВОтчет("Операции51", ПараметрыВыгрузки.ДеревоНастройкиСтраниц)
	   И ДанныеРаздела51.ДополнительныеДанные = Неопределено Тогда
		ОписаниеОшибки = "Операции по банковским счетам на счете 51 не заполнены";
		ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, "Операции51");
	КонецЕсли;
	
	Если РазделВключенВОтчет("Операции52", ПараметрыВыгрузки.ДеревоНастройкиСтраниц)
	   И ДанныеРаздела52.ДополнительныеДанные = Неопределено Тогда
		ОписаниеОшибки = "Операции по банковским счетам на счете 52 не заполнены";
		ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, "Операции52");
	КонецЕсли;
	
	Если РазделВключенВОтчет("Операции55", ПараметрыВыгрузки.ДеревоНастройкиСтраниц)
	   И ДанныеРаздела55.ДополнительныеДанные = Неопределено Тогда
		ОписаниеОшибки = "Операции по банковским счетам на счете 55 не заполнены";
		ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, "Операции55");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьЗаполнение_ДебКредЗадолженность(СтатусПроверки, ПараметрыВыгрузки)
	
	ИмяРаздела = "ДебКредЗадолженность";
	ИмяРазделаДеб = "Дебиторская";
	ИмяРазделаКред = "Кредиторская";
	
	Если НЕ РазделВключенВОтчет(ИмяРаздела, ПараметрыВыгрузки.ДеревоНастройкиСтраниц) Тогда
		Возврат;
	КонецЕсли;
	
	АдресДанныхМетаРаздела = СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяРаздела];
	ДанныеМетаРаздела = ПолучитьИзВременногоХранилища(АдресДанныхМетаРаздела);
	ДанныеРазделаДеб  = ДанныеМетаРаздела.Строки[0].Строки[0].Строки[0];
	ДанныеРазделаКред = ДанныеМетаРаздела.Строки[0].Строки[1].Строки[0];
	
	Если РазделВключенВОтчет(ИмяРазделаДеб, ПараметрыВыгрузки.ДеревоНастройкиСтраниц) Тогда
		ОписаниеОшибкиЗаполнения = "Отправка незаполненного отчета ""Дебиторская задолженность"" не предусмотрена. Исключите отчет из отправляемой отчетности или установите статус ""данные отсутствуют""";
		Если ДействуетСВерсииФормата("5.10.01") Тогда
			Если ДанныеРазделаДеб.Параметры.СтатусЗаполнения = "новый" Тогда
				ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибкиЗаполнения, ИмяРазделаДеб);
				
			ИначеЕсли ДанныеРазделаДеб.Параметры.СтатусЗаполнения = "заполнен" Тогда
				Если ДанныеРазделаДеб.ДополнительныеДанные = Неопределено
				 ИЛИ СведенияДебКредЗадолженностиОтсутствуют(ДанныеРазделаДеб.ДополнительныеДанные.Данные) Тогда
					ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибкиЗаполнения, ИмяРазделаДеб);
					
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе
			Если ДанныеРазделаДеб.ДополнительныеДанные = Неопределено Тогда
				ОписаниеОшибки = "Дебиторская задолженность не заполнена";
				ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, ИмяРазделаДеб);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если РазделВключенВОтчет(ИмяРазделаКред, ПараметрыВыгрузки.ДеревоНастройкиСтраниц) Тогда
		ОписаниеОшибкиЗаполнения = "Отправка незаполненного отчета ""Кредиторская задолженность"" не предусмотрена. Исключите отчет из отправляемой отчетности или установите статус ""данные отсутствуют""";
		Если ДействуетСВерсииФормата("5.10.01") Тогда
			Если ДанныеРазделаКред.Параметры.СтатусЗаполнения = "новый" Тогда
				ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибкиЗаполнения, ИмяРазделаКред);
				
			ИначеЕсли ДанныеРазделаКред.Параметры.СтатусЗаполнения = "заполнен" Тогда
				Если ДанныеРазделаКред.ДополнительныеДанные = Неопределено
				 ИЛИ СведенияДебКредЗадолженностиОтсутствуют(ДанныеРазделаКред.ДополнительныеДанные.Данные) Тогда
					ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибкиЗаполнения, ИмяРазделаКред);
					
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе
			Если ДанныеРазделаКред.ДополнительныеДанные = Неопределено Тогда
				ОписаниеОшибки = "Кредиторская задолженность не заполнена";
				ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, ИмяРазделаКред);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция СведенияДебКредЗадолженностиОтсутствуют(ДанныеОтчета)
	
	ОтчетЗаполнен = Ложь;
	
	Для Каждого СтрокаПоСрочности Из ДанныеОтчета.Строки Цикл
		Если СтрокаПоСрочности.Строки.Количество() > 0 Тогда
			ОтчетЗаполнен = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат НЕ ОтчетЗаполнен;
	
КонецФункции

&НаСервере
Процедура ПроверитьЗаполнение_ДоходыРасходы(СтатусПроверки, ПараметрыВыгрузки)
	
	ИмяРаздела = "ДоходыРасходы";
	
	Если НЕ РазделВключенВОтчет(ИмяРаздела, ПараметрыВыгрузки.ДеревоНастройкиСтраниц) Тогда
		Возврат;
	КонецЕсли;
	
	АдресДанныхРаздела = СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяРаздела];
	ДанныеРаздела = ПолучитьИзВременногоХранилища(АдресДанныхРаздела).Строки[0];
	
	Если ДанныеРаздела.ДополнительныеДанные = Неопределено Тогда
		ОписаниеОшибки = "Расшифровка прочих доходов и прочих расходов не заполнена";
		ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, ИмяРаздела);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьЗаполнение_ФинансовыеВложения(СтатусПроверки, ПараметрыВыгрузки, ПараметрыПроверки)
	
	ИмяРаздела      = ПараметрыПроверки.ИмяРаздела;
	НазваниеРаздела = ПараметрыПроверки.НазваниеРаздела;
	ПрефиксРаздела  = ПараметрыПроверки.ПрефиксРаздела;
	ИндексВДереве   = ПараметрыПроверки.ИндексВДереве;
	ВидВРасшифровке = ПараметрыПроверки.ВидВРасшифровке;
	
	Если НЕ РазделВключенВОтчет(ИмяРаздела, ПараметрыВыгрузки.ДеревоНастройкиСтраниц) Тогда
		Возврат;
	КонецЕсли;
	
	ИмяКорневогоРаздела = мСтруктураМногоуровневыхРазделов[ИмяРаздела].КорневойРаздел;
	ДанныеРаздела = ПолучитьИзВременногоХранилища(СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяКорневогоРаздела]);
	СтраницаРаздела = ДанныеРаздела.Строки[0].Строки[ИндексВДереве].Строки[0];
	ПараметрыСтраницы = СтраницаРаздела.Параметры;
	
	ОписаниеОшибкиЗаполнения = "Отправка незаполненного отчета ""%1"" не предусмотрена. Исключите отчет из отправляемой отчетности или установите статус ""данные отсутствуют""";
	ОписаниеОшибкиЗаполнения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		ОписаниеОшибкиЗаполнения, НазваниеРаздела);
	
	Если ДействуетСВерсииФормата("5.10.01") Тогда
		Если ПараметрыСтраницы.СтатусЗаполнения = "пустой" Тогда
			Возврат;
			
		ИначеЕсли ПараметрыСтраницы.СтатусЗаполнения = "новый" Тогда
			ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибкиЗаполнения, ИмяРаздела);
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ФорматнаяСтрока = "ЧДЦ=3; ЧС=3; ЧН=; ЧГ=0";
	
	МСЧ = СтраницаРаздела.ДанныеМногострочныхЧастей[ПрефиксРаздела + "М1"];
	
	ОтчетЗаполнен = Ложь;
	
	НомерСтроки = 0;
	Для Каждого СтрокаМСЧ Из МСЧ.Строки Цикл
		ДанныеСтроки = СтрокаМСЧ.Данные;
		НомерСтроки = НомерСтроки + 1;
		Постфикс = "_" + СтрокаЧГ0(НомерСтроки);
		
		СтрокаЗаполнена = ЗначениеЗаполнено(ДанныеСтроки[ПрефиксРаздела + "М100101"])
		              ИЛИ ЗначениеЗаполнено(ДанныеСтроки[ПрефиксРаздела + "М100102"])
		              ИЛИ ЗначениеЗаполнено(ДанныеСтроки[ПрефиксРаздела + "М100103"])
		              ИЛИ ЗначениеЗаполнено(ДанныеСтроки[ПрефиксРаздела + "М100104"])
		              ИЛИ ЗначениеЗаполнено(ДанныеСтроки[ПрефиксРаздела + "М100105"])
		              ИЛИ ЗначениеЗаполнено(ЗначениеПриведенноеКЕдиницеИзмерения(ДанныеСтроки[ПрефиксРаздела + "М100106"], ФорматнаяСтрока))
		              ИЛИ ЗначениеЗаполнено(ДанныеСтроки[ПрефиксРаздела + "М100107"])
		              ИЛИ ЗначениеЗаполнено(ДанныеСтроки[ПрефиксРаздела + "М100108"])
		              ИЛИ ЗначениеЗаполнено(ДанныеСтроки[ПрефиксРаздела + "М100109"])
		              ИЛИ ЗначениеЗаполнено(ЗначениеПриведенноеКЕдиницеИзмерения(ДанныеСтроки[ПрефиксРаздела + "М100110"], ФорматнаяСтрока))
		              ИЛИ ЗначениеЗаполнено(ДанныеСтроки[ПрефиксРаздела + "М100111"])
		              ИЛИ ЗначениеЗаполнено(ДанныеСтроки[ПрефиксРаздела + "М100112"]);
		
		Если СтрокаЗаполнена Тогда
			ОтчетЗаполнен = Истина;
			
			ИмяПоказателя = ПрефиксРаздела + "М100101";
			ИмяПоказателяМакета = ИмяПоказателя + Постфикс;
			КонтрагентНаименование = СтрокаМСЧ.Данные[ИмяПоказателя];
			
			Если НЕ ЗначениеЗаполнено(КонтрагентНаименование) Тогда
				ОписаниеОшибки = "В строке " + СтрокаЧГ0(НомерСтроки) + ВидВРасшифровке
				               + " не указано наименование контрагента";
				ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, ИмяРаздела, ИмяПоказателяМакета);
			КонецЕсли;
			
			ИмяПоказателя = ПрефиксРаздела + "М100102";
			ИмяПоказателяМакета = ИмяПоказателя + Постфикс;
			КонтрагентИНН = СокрЛП(СтрокаМСЧ.Данные[ИмяПоказателя]);
			
			Если ЗначениеЗаполнено(КонтрагентИНН)
			   И СтрДлина(КонтрагентИНН) <> 10 И СтрДлина(КонтрагентИНН) <> 12 Тогда
				ОписаниеОшибки = "В строке " + СтрокаЧГ0(НомерСтроки) + ВидВРасшифровке
				               + " указан ИНН контрагента, не состоящий из 10 или 12 символов";
				ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, ИмяРаздела, ИмяПоказателяМакета);
			КонецЕсли;
			
			ИмяПоказателя = ПрефиксРаздела + "М100103";
			ИмяПоказателяМакета = ИмяПоказателя + Постфикс;
			ВидВложения = СокрЛП(СтрокаМСЧ.Данные[ИмяПоказателя]);
			
			Если НЕ ЗначениеЗаполнено(ВидВложения) Тогда
				ОписаниеОшибки = "В строке " + СтрокаЧГ0(НомерСтроки) + ВидВРасшифровке
				               + " не указан вид финансового вложения";
				ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, ИмяРаздела, ИмяПоказателяМакета);
			КонецЕсли;
			
			ИмяПоказателя = ПрефиксРаздела + "М100104";
			ИмяПоказателяМакета = ИмяПоказателя + Постфикс;
			ДатаПриобретения = СтрокаМСЧ.Данные[ИмяПоказателя];
			
			Если НЕ ЗначениеЗаполнено(ДатаПриобретения) Тогда
				ОписаниеОшибки = "В строке " + СтрокаЧГ0(НомерСтроки) + ВидВРасшифровке
				               + " не указана дата приобретения финансового вложения";
				ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, ИмяРаздела, ИмяПоказателяМакета);
			КонецЕсли;
			
			ИмяПоказателя = ПрефиксРаздела + "М100107";
			ИмяПоказателяМакета = ИмяПоказателя + Постфикс;
			КодВалюты = СокрЛП(СтрокаМСЧ.Данные[ИмяПоказателя]);
			
			Если ЗначениеЗаполнено(КодВалюты) И СтрДлина(КодВалюты) <> 3 Тогда
				ОписаниеОшибки = "В строке " + СтрокаЧГ0(НомерСтроки) + ВидВРасшифровке
				               + " указан код валюты, не состоящий из 3 символов";
				ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, ИмяРаздела, ИмяПоказателяМакета);
			КонецЕсли;
			
			ЕстьПросроченнаяЗадолженность = ЗначениеЗаполнено(СтрокаМСЧ.Данные[ПрефиксРаздела + "М100109"])
				ИЛИ ЗначениеЗаполнено(ЗначениеПриведенноеКЕдиницеИзмерения(СтрокаМСЧ.Данные[ПрефиксРаздела + "М100110"], ФорматнаяСтрока))
				ИЛИ ЗначениеЗаполнено(СтрокаМСЧ.Данные[ПрефиксРаздела + "М100111"]);
			
			Если ЕстьПросроченнаяЗадолженность Тогда
				ИмяПоказателя = ПрефиксРаздела + "М100109";
				ИмяПоказателяМакета = ИмяПоказателя + Постфикс;
				ДатаВозникновения = СтрокаМСЧ.Данные[ИмяПоказателя];
				
				Если НЕ ЗначениеЗаполнено(ДатаВозникновения) Тогда
					ОписаниеОшибки = "В строке " + СтрокаЧГ0(НомерСтроки) + ВидВРасшифровке
					               + " указана дата возникновения просроченной задолженности";
					ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, ИмяРаздела, ИмяПоказателяМакета);
				КонецЕсли;
				
				ИмяПоказателя = ПрефиксРаздела + "М100110";
				ИмяПоказателяМакета = ИмяПоказателя + Постфикс;
				СуммаЗадолженности = ЗначениеПриведенноеКЕдиницеИзмерения(СтрокаМСЧ.Данные[ИмяПоказателя], ФорматнаяСтрока);
				
				Если НЕ  ЗначениеЗаполнено(СуммаЗадолженности) Тогда
					ОписаниеОшибки = "В строке " + СтрокаЧГ0(НомерСтроки) + ВидВРасшифровке
					               + " не указана сумма просроченной задолженности";
					ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, ИмяРаздела, ИмяПоказателяМакета);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ДействуетСВерсииФормата("5.10.01") Тогда
		Если ПараметрыСтраницы.СтатусЗаполнения = "заполнен" И НЕ ОтчетЗаполнен Тогда
			ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибкиЗаполнения, ИмяРаздела);
		КонецЕсли;
		
	Иначе
		Если СтруктураРеквизитовФормы.НаблюдательЗаполненияРазделов.Свойство(ИмяРаздела)
		   И СтруктураРеквизитовФормы.НаблюдательЗаполненияРазделов[ИмяРаздела] = Ложь Тогда
			ОписаниеОшибки = НазваниеРаздела + " не заполнена";
			ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, ИмяРаздела);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьЗаполнение_СтруктураВыручки(СтатусПроверки, ПараметрыВыгрузки)
	
	ИмяРаздела = "СтруктураВыручки";
	
	Если НЕ РазделВключенВОтчет(ИмяРаздела, ПараметрыВыгрузки.ДеревоНастройкиСтраниц) Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеРаздела = ПолучитьИзВременногоХранилища(СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяРаздела]);
	ФорматнаяСтрока = "ЧДЦ=3; ЧС=3; ЧН=; ЧГ=0";
	
	СтраницаРаздела = ДанныеРаздела.Строки[0];
	МногострочнаяЧасть = СтраницаРаздела.ДанныеМногострочныхЧастей.П00010М1;
	
	НомерСтроки = 0;
	Для Каждого СтрокаМСЧ Из МногострочнаяЧасть.Строки Цикл
		ДанныеСтроки = СтрокаМСЧ.Данные;
		НомерСтроки = НомерСтроки + 1;
		Постфикс = "_" + СтрокаЧГ0(НомерСтроки);
		
		СтрокаЗаполнена = ЗначениеЗаполнено(ДанныеСтроки.П00010М100101)
		              ИЛИ ЗначениеЗаполнено(ЗначениеПриведенноеКЕдиницеИзмерения(ДанныеСтроки.П00010М100102, ФорматнаяСтрока))
		              ИЛИ ЗначениеЗаполнено(ЗначениеПриведенноеКЕдиницеИзмерения(ДанныеСтроки.П00010М100103, ФорматнаяСтрока));
		
		Если СтрокаЗаполнена Тогда
			ИмяПоказателя = "П00010М100101";
			КомпанияНаименование = ДанныеСтроки[ИмяПоказателя];
			
			Если НЕ ЗначениеЗаполнено(КомпанияНаименование) Тогда
				ОписаниеОшибки = "В строке " + СтрокаЧГ0(НомерСтроки)
				               + " справки о структуре выручки"
				               + " не указано наименование валюты";
				ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, ИмяРаздела, ИмяПоказателя + Постфикс, "0");
			КонецЕсли;
			
			ИмяПоказателя = "П00010М100102";
			ЗначениеПоказателя = ЗначениеПриведенноеКЕдиницеИзмерения(ДанныеСтроки[ИмяПоказателя], ФорматнаяСтрока);
			
			Если НЕ ЗначениеЗаполнено(ЗначениеПоказателя) Тогда
				ОписаниеОшибки = "В строке " + СтрокаЧГ0(НомерСтроки) + " многострочной части"
				               + " справки о структуре выручки"
				               + " не указана сумма выручки в рублях";
				ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, ИмяРаздела, ИмяПоказателя + Постфикс, "0");
			КонецЕсли;
			
			ИмяПоказателя = "П00010М100103";
			ЗначениеПоказателя = ЗначениеПриведенноеКЕдиницеИзмерения(ДанныеСтроки[ИмяПоказателя], ФорматнаяСтрока);
			
			Если НЕ ЗначениеЗаполнено(ЗначениеПоказателя) Тогда
				ОписаниеОшибки = "В строке " + СтрокаЧГ0(НомерСтроки) + " многострочной части"
				               + " справки о структуре выручки"
				               + " не указана сумма выручки в валюте";
				ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, ИмяРаздела, ИмяПоказателя + Постфикс, "0");
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Проверка заполнения раздела.
	Если СтруктураРеквизитовФормы.НаблюдательЗаполненияРазделов.Свойство(ИмяРаздела)
	   И СтруктураРеквизитовФормы.НаблюдательЗаполненияРазделов[ИмяРаздела] = Ложь Тогда
		ОписаниеОшибки = "Справка о структуре выручки и прочих поступлениях не заполнена";
		ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, ИмяРаздела);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьЗаполнение_ПрочиеПоказатели(СтатусПроверки, ПараметрыВыгрузки)
	
	ИмяРаздела = "ПрочиеПоказатели";
	ПредставлениеОтчета = "В справке о прочих показателях деятельности ";
	
	Если НЕ РазделВключенВОтчет(ИмяРаздела, ПараметрыВыгрузки.ДеревоНастройкиСтраниц) Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеРаздела = ПолучитьИзВременногоХранилища(СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяРаздела]);
	ФорматнаяСтрока = "ЧДЦ=3; ЧС=3; ЧН=; ЧГ=0";
	
	СтраницаРаздела = ДанныеРаздела.Строки[0];
	ДанныеСтраницы  = СтраницаРаздела.Данные;
	
	ИмяПоказателя = "П000090000402";
	Если ПустаяСтрока(ДанныеСтраницы[ИмяПоказателя]) Тогда
		СообщитьВТаблицуСообщений(ЭтаФорма,
			ПредставлениеОтчета + "не указано наличие просроченной задолженности перед работниками по заработной плате",
			ИмяРаздела, ИмяПоказателя);
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	ИмяПоказателя = "П000090000602";
	Если ПустаяСтрока(ДанныеСтраницы[ИмяПоказателя]) Тогда
		СообщитьВТаблицуСообщений(ЭтаФорма,
			ПредставлениеОтчета + "не указано наличие изменений в составе дочерних/зависимых организаций за отчетный период",
			ИмяРаздела, ИмяПоказателя);
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	ИмяПоказателя = "П000090000702";
	Если ЗначениеЗаполнено(ДанныеСтраницы[ИмяПоказателя + "_Числ"]) ИЛИ ЗначениеЗаполнено(ДанныеСтраницы[ИмяПоказателя + "_Знам"]) Тогда
		Если НЕ ЗначениеЗаполнено(ДанныеСтраницы[ИмяПоказателя + "_Числ"]) Тогда
			СообщитьВТаблицуСообщений(ЭтаФорма,
				ПредставлениеОтчета + "не указан числитель государственной доли владения группой Федеральным органом",
				ИмяРаздела, ИмяПоказателя + "_Числ");
			СтатусПроверки = Ложь;
			
		ИначеЕсли НЕ ЗначениеЗаполнено(ДанныеСтраницы[ИмяПоказателя + "_Знам"]) Тогда
			СообщитьВТаблицуСообщений(ЭтаФорма,
				ПредставлениеОтчета + "не указан знаменатель государственной доли владения группой Федеральным органом",
				ИмяРаздела, ИмяПоказателя + "_Знам");
			СтатусПроверки = Ложь;
			
		ИначеЕсли ДанныеСтраницы[ИмяПоказателя + "_Числ"] > ДанныеСтраницы[ИмяПоказателя + "_Знам"] Тогда
			СообщитьВТаблицуСообщений(ЭтаФорма,
				ПредставлениеОтчета + "числитель государственной доли владения группой Федеральным органом превышает значение знаменателя",
				ИмяРаздела, ИмяПоказателя + "_Числ");
			СтатусПроверки = Ложь;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ИмяПоказателя = "П000090000802";
	Если ЗначениеЗаполнено(ДанныеСтраницы[ИмяПоказателя + "_Числ"]) ИЛИ ЗначениеЗаполнено(ДанныеСтраницы[ИмяПоказателя + "_Знам"]) Тогда
		Если НЕ ЗначениеЗаполнено(ДанныеСтраницы[ИмяПоказателя + "_Числ"]) Тогда
			СообщитьВТаблицуСообщений(ЭтаФорма,
				ПредставлениеОтчета + "не указан числитель государственной доли владения группой Субъектом РФ",
				ИмяРаздела, ИмяПоказателя + "_Числ");
			СтатусПроверки = Ложь;
			
		ИначеЕсли НЕ ЗначениеЗаполнено(ДанныеСтраницы[ИмяПоказателя + "_Знам"]) Тогда
			СообщитьВТаблицуСообщений(ЭтаФорма,
				ПредставлениеОтчета + "не указан знаменатель государственной доли владения группой Субъектом РФ",
				ИмяРаздела, ИмяПоказателя + "_Знам");
			СтатусПроверки = Ложь;
			
		ИначеЕсли ДанныеСтраницы[ИмяПоказателя + "_Числ"] > ДанныеСтраницы[ИмяПоказателя + "_Знам"] Тогда
			СообщитьВТаблицуСообщений(ЭтаФорма,
				ПредставлениеОтчета + "числитель государственной доли владения группой Субъектом РФ превышает значение знаменателя",
				ИмяРаздела, ИмяПоказателя + "_Числ");
			СтатусПроверки = Ложь;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ИмяПоказателя = "П000090000902";
	Если ПустаяСтрока(ДанныеСтраницы[ИмяПоказателя]) Тогда
		СообщитьВТаблицуСообщений(ЭтаФорма,
			ПредставлениеОтчета + "не указано наличие изменений в составе собственников и/или руководстве Контрагента Участника кредитной сделки",
			ИмяРаздела, ИмяПоказателя);
		СтатусПроверки = Ложь;
		
	КонецЕсли;
	
	ИмяПоказателя = "П000090000903";
	Если ДанныеСтраницы["П000090000902"] = "да" И ПустаяСтрока(ДанныеСтраницы[ИмяПоказателя]) Тогда
		СообщитьВТаблицуСообщений(ЭтаФорма,
			ПредставлениеОтчета + "не указаны изменения в составе собственников и/или руководстве Контрагента Участника кредитной сделки",
			ИмяРаздела, ИмяПоказателя);
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	ИмяПоказателя = "П000090001102";
	Если ПустаяСтрока(ДанныеСтраницы[ИмяПоказателя]) Тогда
		СообщитьВТаблицуСообщений(ЭтаФорма,
			ПредставлениеОтчета + "не указано наличие вложений и задолженности по контрагентам ведущим деятельность на территории Украины",
			ИмяРаздела, ИмяПоказателя);
		СтатусПроверки = Ложь;
	КонецЕсли;
		
	ИмяПоказателя = "П000090001103";
	Если ДанныеСтраницы["П000090001102"] = "да" И ПустаяСтрока(ДанныеСтраницы[ИмяПоказателя]) Тогда
		СообщитьВТаблицуСообщений(ЭтаФорма,
			ПредставлениеОтчета + "не указаны контрагенты, зарегистрированные или ведущие деятельность на территории Украины",
			ИмяРаздела, ИмяПоказателя);
		СтатусПроверки = Ложь;
		
	КонецЕсли;
	
	ИмяПоказателя = "П000090001202";
	Если ПустаяСтрока(ДанныеСтраницы[ИмяПоказателя]) Тогда
		СообщитьВТаблицуСообщений(ЭтаФорма, 
			ПредставлениеОтчета + "не указан признак заключения корпоративного договора",
			ИмяРаздела, ИмяПоказателя);
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	ИмяПоказателя = "П000090001302";
	Если ПустаяСтрока(ДанныеСтраницы[ИмяПоказателя]) Тогда
		СообщитьВТаблицуСообщений(ЭтаФорма,
		ПредставлениеОтчета + "не указано наличие внесения изменений в Устав за отчетный период",
		ИмяРаздела, ИмяПоказателя);
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	ИмяПоказателя = "П000090001402";
	Если ПустаяСтрока(ДанныеСтраницы[ИмяПоказателя]) Тогда
		СообщитьВТаблицуСообщений(ЭтаФорма,
		ПредставлениеОтчета + "не указано наличие обязательств ПФИ",
		ИмяРаздела, ИмяПоказателя);
		СтатусПроверки = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьЗаполнение_ДополнительныеФайлы(СтатусПроверки, ПараметрыВыгрузки)
	
	ИмяРаздела = "ДополнительныеФайлы";
	
	Если НЕ РазделВключенВОтчет(ИмяРаздела, ПараметрыВыгрузки.ДеревоНастройкиСтраниц) Тогда
		Возврат;
	КонецЕсли;
	
	ОбщийРазмерПакета = 0;
	
	ЕстьДополнительныеФайлы = СтруктураРеквизитовФормы.ДополнительныеФайлы.Количество() > 0;
	
	Для Каждого ОписаниеФайла Из СтруктураРеквизитовФормы.ДополнительныеФайлы Цикл
		ОбщийРазмерПакета = ОбщийРазмерПакета + ОписаниеФайла.РазмерФайла;
	КонецЦикла;
	
	ЕстьТипизированныеДополнительныеФайлы = Ложь;
	Для Каждого ОписаниеФайла Из СтруктураРеквизитовФормы.ДополнительныеТипизированныеФайлы Цикл
		Если ЗначениеЗаполнено(ОписаниеФайла.Значение.Адрес) Тогда
			ЕстьТипизированныеДополнительныеФайлы = Истина;
			ОбщийРазмерПакета = ОбщийРазмерПакета + ОписаниеФайла.Значение.Размер;
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ ЕстьДополнительныеФайлы И НЕ ЕстьТипизированныеДополнительныеФайлы Тогда
		ОписаниеОшибки = "В раздел отчетности с дополнительными файлами не загружены файлы";
		ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, ИмяРаздела);
	КонецЕсли;
	
	Если ОбщийРазмерПакета / Мебибайт() > 50 Тогда
		ОписаниеОшибки = "Общий размер отправляемого пакета дополнительных файлов превышает 50 Мб";
		ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, ИмяРаздела);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьЗаполнение_ОтчетыФНС(СтатусПроверки, ПараметрыВыгрузки)
	
	ИмяРаздела = "ОтчетыФНС";
	
	Если НЕ РазделВключенВОтчет(ИмяРаздела, ПараметрыВыгрузки.ДеревоНастройкиСтраниц) Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СтруктураРеквизитовФормы.ОтчетыФНС_Бухотчетность)
	   И НЕ ЗначениеЗаполнено(СтруктураРеквизитовФормы.ОтчетыФНС_Прибыль)
	   И НЕ ЗначениеЗаполнено(СтруктураРеквизитовФормы.ОтчетыФНС_НДС)
	   И НЕ ЗначениеЗаполнено(СтруктураРеквизитовФормы.ОтчетыФНС_СправкаИспОбУпл) Тогда
		ОписаниеОшибки = "Не заполнен раздел отчетности подписанной ФНС";
		ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, ОписаниеОшибки, ИмяРаздела);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗафиксироватьОшибкуЗаполнения(СтатусПроверки, Описание, Раздел, ИмяЯчейки = "", ФИО = "")
	
	СообщитьВТаблицуСообщений(ЭтаФорма, Описание, Раздел, ИмяЯчейки, ФИО);
	СтатусПроверки = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура СообщитьВТаблицуСообщений(Форма, Описание, Раздел, ИмяЯчейки = "", ФИО = "") Экспорт
	
	НовСтр = ТаблицаСообщений.Добавить();
	НовСтр.Раздел = Раздел;
	НовСтр.ИмяЯчейки = ИмяЯчейки;
	НовСтр.Описание = Описание;
	НовСтр.Страница = ФИО;
	
	НовСтр.ОтчетДок = СтруктураРеквизитовФормы.мСохраненныйДок;
	НовСтр.Отчет    = РегламентированнаяОтчетностьКлиентСервер.ПредставлениеДокументаРеглОтч(СтруктураРеквизитовФормы.мСохраненныйДок);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтобразитьФормуНавигацииПоОшибкам()
	
	Если ТаблицаСообщений.Количество() = 0 Тогда
		НовСтр = ТаблицаСообщений.Добавить();
		НовСтр.Описание = "Выгрузка прервана.";
	Иначе
		ТекстСообщения = "В ходе проверки были найдены ошибки, препятствующие выгрузке."
		               + Символы.ПС
		               + "Для исправления ошибок используйте специальное окно навигации по ошибкам.";
		#Если НЕ ВебКлиент Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = ТекстСообщения;
			Сообщение.Сообщить();
		#КонецЕсли
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("ВладелецТС", Новый Структура("ТаблицаСообщений", ТаблицаСообщений));
	
	ФормаНавигацииПоОшибкам = ПолучитьФорму("Документ.ВыгрузкаРегламентированныхОтчетов.Форма.ФормаНавигацииПоОшибкам", ПараметрыФормы);
	
	Если ФормаНавигацииПоОшибкам.Открыта() Тогда
		ФормаНавигацииПоОшибкам.Закрыть();
		ФормаНавигацииПоОшибкам = ПолучитьФорму("Документ.ВыгрузкаРегламентированныхОтчетов.Форма.ФормаНавигацииПоОшибкам", ПараметрыФормы);
	КонецЕсли;
	
	ФормаНавигацииПоОшибкам.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура АктивизироватьЯчейку(Ячейка) Экспорт
	
	ИмяРаздела = Ячейка.Раздел;
	
	Если ИмяРаздела = "ОСВПоСчету" ИЛИ ИмяРаздела = "АнализСчета" Тогда
		АктивизироватьЯчейкуОтчетаСоСписком(Ячейка);
		
	ИначеЕсли ИмяРаздела = "РасшифровкиОбеспеченийВыданные" ИЛИ ИмяРаздела = "РасшифровкиОбеспеченийПолученные" Тогда
		АктивизироватьЯчейкуОтчетаПоАдресу(Ячейка);
		
	ИначеЕсли ИмяРаздела = "ОтчетыФНС" Тогда
		СтрокаРаздела = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(
			РазделыОтчета.ПолучитьЭлементы(), "КолонкаРазделыОтчетаСокрНаим", ИмяРаздела);
		Элементы.РазделыОтчета.ТекущаяСтрока = СтрокаРаздела.ПолучитьИдентификатор();
		ПереключитьРаздел(ИмяРаздела);
		
	Иначе
		АктивизироватьЯчейкуВТаблице(Ячейка);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура АктивизироватьЯчейкуОтчетаСоСписком(Ячейка)
	
	ИмяРаздела = Ячейка.Раздел;
	КодСчета = Ячейка.Страница;
	
	НайденнаяСтрока = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(
		РазделыОтчета.ПолучитьЭлементы(), "КолонкаРазделыОтчетаСокрНаим", ИмяРаздела);
	
	Если НайденнаяСтрока <> Неопределено Тогда
		СтрокаПоСчету = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(
			НайденнаяСтрока.ПолучитьЭлементы(), "КолонкаРазделыОтчета", КодСчета);
			
		Если СтрокаПоСчету <> Неопределено Тогда
			Элементы.РазделыОтчета.ТекущаяСтрока = СтрокаПоСчету.ПолучитьИдентификатор();
		Иначе
			РегламентированнаяОтчетностьКлиент.АктивизироватьЯчейку(ЭтаФорма, Ячейка);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура АктивизироватьЯчейкуОтчетаПоАдресу(Ячейка)
	
	ИмяРаздела = Ячейка.Раздел;
	СтрокаОтчета = Ячейка.Страница;
	КолонкаОтчета = Ячейка.ИмяЯчейки;
	
	Если ИмяСтраницыВывода(ИмяРаздела) = "СтраницаОтчетаСПризнакомОтсутствияДанных" Тогда
		ЭлементОтображения = Элементы.ТабличныйДокументСПризнакомВеденияУчета;
	Иначе
		ЭлементОтображения = Элементы.ТабличныйДокумент;
	КонецЕсли;
	
	СтрокаРаздела = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(
		РазделыОтчета.ПолучитьЭлементы(), "КолонкаРазделыОтчетаСокрНаим", ИмяРаздела);
	Элементы.РазделыОтчета.ТекущаяСтрока = СтрокаРаздела.ПолучитьИдентификатор();
	
	ОбластьКолонки = ТабличныйДокумент.Области.Найти(КолонкаОтчета);
	ОбластьСтроки = ТабличныйДокумент.Области.Найти("Строка_" + СтрокаОтчета);
	
	Если ОбластьСтроки <> Неопределено И ОбластьКолонки <> Неопределено Тогда
		ЭлементОтображения.ТекущаяОбласть = ТабличныйДокумент.Область(ОбластьСтроки.Верх, ОбластьКолонки.Лево);
		ТекущийЭлемент = ЭлементОтображения;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура АктивизироватьЯчейкуВТаблице(Ячейка)
	
	ИмяРаздела = Ячейка.Раздел;
	
	Если ИмяСтраницыВывода(ИмяРаздела) = "СтраницаОтчетаСПризнакомОтсутствияДанных" Тогда
		ЭлементОтображения = Элементы.ТабличныйДокументСПризнакомВеденияУчета;
	Иначе
		ЭлементОтображения = Элементы.ТабличныйДокумент;
	КонецЕсли;
	
	ТекущаяСтраницаРаздела = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(
		ЭтотОбъект.РазделыОтчета.ПолучитьЭлементы(), "КолонкаРазделыОтчетаСокрНаим", ИмяРаздела);
	
	Если НЕ ТекущаяСтраницаРаздела = Неопределено
	   И ЗначениеЗаполнено(Ячейка.Страница)
	   И ТекущаяСтраницаРаздела.ПолучитьЭлементы().Количество() > 0 Тогда
		ТекущаяСтраницаРаздела = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(
			ТекущаяСтраницаРаздела.ПолучитьЭлементы(), "КолонкаНомерСтраницыРазделаОтчета", Число(Ячейка.Страница));
	КонецЕсли;
	
	Если НЕ ТекущаяСтраницаРаздела = Неопределено Тогда
		ЭтотОбъект.СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Истина;
		ЭтотОбъект.Элементы.РазделыОтчета.ТекущаяСтрока = ТекущаяСтраницаРаздела.ПолучитьИдентификатор();
	КонецЕсли;
	
	ЭтотОбъект.ТекущийЭлемент = ЭлементОтображения;
	
	НайденнаяОбласть = ЭтотОбъект.ТабличныйДокумент.Области.Найти(Ячейка.ИмяЯчейки);
	
	Если НЕ НайденнаяОбласть = Неопределено Тогда
		ЭлементОтображения.ТекущаяОбласть = НайденнаяОбласть;
		
	ИначеЕсли Ячейка.СтрокаПП <> Неопределено И ЗначениеЗаполнено(Ячейка.СтрокаПП) Тогда
		НайденнаяОбласть = ЭтотОбъект.ТабличныйДокумент.Области.Найти(Ячейка.ИмяЯчейки + Ячейка.СтрокаПП);
		
		Если НЕ НайденнаяОбласть = Неопределено Тогда
			ЭлементОтображения.ТекущаяОбласть = НайденнаяОбласть;
			
		Иначе
			НайденнаяОбласть = ЭтотОбъект.ТабличныйДокумент.Области.Найти(Ячейка.ИмяЯчейки + "_" + Ячейка.СтрокаПП);
			
			Если НЕ НайденнаяОбласть = Неопределено Тогда
				ЭлементОтображения.ТекущаяОбласть = НайденнаяОбласть;
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		НайденнаяОбласть = ЭтотОбъект.ТабличныйДокумент.Области.Найти(Ячейка.ИмяЯчейки + "1");
		
		Если НЕ НайденнаяОбласть = Неопределено Тогда
			ЭлементОтображения.ТекущаяОбласть = НайденнаяОбласть;
			
		Иначе
			НайденнаяОбласть = ЭтотОбъект.ТабличныйДокумент.Области.Найти(Ячейка.ИмяЯчейки + "_1");
			
			Если НЕ НайденнаяОбласть = Неопределено Тогда
				ЭлементОтображения.ТекущаяОбласть = НайденнаяОбласть;
			Иначе
				ЭлементОтображения.ТекущаяОбласть = ЭтотОбъект.ТабличныйДокумент.Область(Ячейка.ИмяЯчейки);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

&НаСервере
Функция ИзвлечьСтруктуруXML()
	
	ДеревоСтруктуры = Новый ДеревоЗначений;
	ДеревоСтруктуры.Колонки.Добавить("Код");
	ДеревоСтруктуры.Колонки.Добавить("Тип");
	ДеревоСтруктуры.Колонки.Добавить("Формат");
	ДеревоСтруктуры.Колонки.Добавить("МинРазмерность");
	ДеревоСтруктуры.Колонки.Добавить("МаксРазмерность");
	ДеревоСтруктуры.Колонки.Добавить("Обязательность");
	ДеревоСтруктуры.Колонки.Добавить("Многостраничность");
	ДеревоСтруктуры.Колонки.Добавить("Многострочность");
	ДеревоСтруктуры.Колонки.Добавить("Раздел");
	ДеревоСтруктуры.Колонки.Добавить("Ключ");
	ДеревоСтруктуры.Колонки.Добавить("Условие");
	ДеревоСтруктуры.Колонки.Добавить("ЗначениеПоУмолчанию");
	ДеревоСтруктуры.Колонки.Добавить("Значение");
	ДеревоСтруктуры.Колонки.Добавить("Представление");
	ДеревоСтруктуры.Колонки.Добавить("Показатели");
	
	Макет = Отчеты[Сред(Лев(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, ".Форма.") - 1), 7)].ПолучитьМакет("СхемаВыгрузки506_29");
	
	ВысотаТаблицы = Макет.ВысотаТаблицы;
	
	УчтенныеГруппы = Новый Соответствие;
	
	Для Уровень = 0 По Макет.КоличествоУровнейГруппировокСтрок() - 1 Цикл
		Макет.ПоказатьУровеньГруппировокСтрок(Уровень);
		Для НомерСтроки = 2 По ВысотаТаблицы Цикл
			НомСтр = ВысотаТаблицы - НомерСтроки + 2;
			Если Макет.Область(НомСтр, 0, НомСтр, 0).Видимость И УчтенныеГруппы.Получить(НомСтр) = Неопределено Тогда
				
				РодительскийУзел = ДеревоСтруктуры;
				Если Уровень <> 0 Тогда
					Для Инд = 1 По НомСтр - 2 Цикл
						Узел = УчтенныеГруппы.Получить(НомСтр - Инд);
						Если Узел <> Неопределено Тогда
							РодительскийУзел = Узел;
							Прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				НовСтр = РодительскийУзел.Строки.Вставить(0);
				НовСтр.Код = СокрЛП(Макет.Область(НомСтр, 1, НомСтр, 1).Текст);
				НовСтр.Раздел = СокрЛП(Макет.Область(НомСтр, 2, НомСтр, 2).Текст);
				НовСтр.Ключ = СокрЛП(Макет.Область(НомСтр, 3, НомСтр, 3).Текст);
				НовСтр.Тип = СокрЛП(Макет.Область(НомСтр, 4, НомСтр, 4).Текст);
				НовСтр.Формат = СокрЛП(Макет.Область(НомСтр, 5, НомСтр, 5).Текст);
				МинРазмерность = СокрЛП(Макет.Область(НомСтр, 6, НомСтр, 6).Текст);
				НовСтр.МинРазмерность = ?(ПустаяСтрока(МинРазмерность), ?(НовСтр.Формат = "N", 99999, 0), Число(МинРазмерность));
				МаксРазмерность = СокрЛП(Макет.Область(НомСтр, 7, НомСтр, 7).Текст);
				НовСтр.МаксРазмерность = ?(ПустаяСтрока(МаксРазмерность), 99999, Число(МаксРазмерность));
				НовСтр.Обязательность = СокрЛП(Макет.Область(НомСтр, 8, НомСтр, 8).Текст);
				НовСтр.Многостраничность = НЕ ПустаяСтрока(Макет.Область(НомСтр, 9, НомСтр, 9).Текст);
				НовСтр.Многострочность = НЕ ПустаяСтрока(Макет.Область(НомСтр, 10, НомСтр, 10).Текст);
				НовСтр.Условие = СокрЛП(Макет.Область(НомСтр, 11, НомСтр, 11).Текст);
				НовСтр.ЗначениеПоУмолчанию = СокрЛП(Макет.Область(НомСтр, 12, НомСтр, 12).Текст);
				НовСтр.Представление = СокрЛП(Макет.Область(НомСтр, 13, НомСтр, 13).Текст);
				
				УчтенныеГруппы.Вставить(НомСтр, НовСтр);
				
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат ДеревоСтруктуры;
	
КонецФункции

&НаСервере
Процедура ВывестиСведенияОНалогоплательщике(Компоновщик, ПараметрыВыгрузки)
	
	Компоновщик.ЗаписатьНачалоЭлемента("СвНП");
	
	Если СтруктураРеквизитовФормы.ИП Тогда
		Компоновщик.ЗаписатьНачалоЭлемента("НПФЛ");
		
		ВывестиАтрибут(Компоновщик, "ИННФЛ", ПараметрыВыгрузки.ИННФЛ);
		
		Компоновщик.ЗаписатьНачалоЭлемента("ФИО");
		
		ВывестиАтрибут(Компоновщик, "Фамилия", ПараметрыВыгрузки.ФЛФамилия);
		ВывестиАтрибут(Компоновщик, "Имя", ПараметрыВыгрузки.ФЛИмя);
		ВывестиНеобязательныйАтрибут(Компоновщик, "Отчество", ПараметрыВыгрузки.ФЛОтчество);
		
		Компоновщик.ЗаписатьКонецЭлемента(); // ФИО
		
		Компоновщик.ЗаписатьКонецЭлемента(); // НПФЛ
		
	Иначе
		Компоновщик.ЗаписатьНачалоЭлемента("НПЮЛ");
		
		ВывестиАтрибут(Компоновщик, "НаимОрг", ПараметрыВыгрузки.НаимОрг);
		ВывестиАтрибут(Компоновщик, "НаимОргКраткое", ПараметрыВыгрузки.НаимОргКраткое);
		ВывестиАтрибут(Компоновщик, "ИННЮЛ", ПараметрыВыгрузки.ИННОрг);
		ВывестиАтрибут(Компоновщик, "КПП", ПараметрыВыгрузки.КППОрг);
		
		Компоновщик.ЗаписатьКонецЭлемента(); // НПЮЛ
		
	КонецЕсли;
	
	Компоновщик.ЗаписатьКонецЭлемента(); // СвНП
	
КонецПроцедуры

&НаСервере
Процедура ВывестиСведенияОПодписанте(Компоновщик, ПараметрыВыгрузки)
	
	Компоновщик.ЗаписатьНачалоЭлемента("Подписант");
	
	ВывестиАтрибут(Компоновщик, "ПрПодп", ПараметрыВыгрузки.ПрПодп);
	
	Компоновщик.ЗаписатьНачалоЭлемента("ФИО");
	
	ВывестиАтрибут(Компоновщик, "Фамилия", ПараметрыВыгрузки.ПодпФамилия);
	ВывестиАтрибут(Компоновщик, "Имя", ПараметрыВыгрузки.ПодпИмя);
	ВывестиНеобязательныйАтрибут(Компоновщик, "Отчество", ПараметрыВыгрузки.ПодпОтчество);
	
	Компоновщик.ЗаписатьКонецЭлемента();
	Компоновщик.ЗаписатьКонецЭлемента();
	
КонецПроцедуры

&НаСервере
Процедура ВывестиУзел_Баланс(Компоновщик, ПараметрыВыгрузки, СтруктураВыгрузки)
	
	ИмяРаздела = "Баланс";
	
	Если НЕ РазделВключенВОтчет(ИмяРаздела, ПараметрыВыгрузки.ДеревоНастройкиСтраниц) Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеРаздела = ПолучитьИзВременногоХранилища(СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяРаздела]);
	
	ШаблонВыгрузки = УзелСтруктурыВыгрузки(СтруктураВыгрузки, "Документ/Баланс");
	
	Для Каждого СтраницаРаздела Из ДанныеРаздела.Строки Цикл
		ДанныеСтраницы = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(СтраницаРаздела.Данные);
		ОбработатьПоказателиПередОтправкой_Баланс(ДанныеСтраницы);
		
		НомерКвартала = Месяц(КонецКвартала(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета)) / 3;
		КодКвартала = КодКвартала(НомерКвартала);
		Делитель = ДелительПоЕдиницеИзмерения(СтруктураРеквизитовФормы.ЕдиницаИзмерения);
		ОКЕИ = КодЕдиницыИзмерения(Делитель);
		ФорматнаяСтрока = ФорматнаяСтрокаПоЕдиницеИзмерения(Делитель);
		
		ДанныеСтраницы.Вставить("Период",   КодКвартала);
		ДанныеСтраницы.Вставить("ОтчетГод", ПредставлениеГода(Год(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета)));
		ДанныеСтраницы.Вставить("ОКЕИ",     ОКЕИ);
		
		ВывестиСведенияПоШаблону(Компоновщик, ФорматнаяСтрока, ДанныеСтраницы, ШаблонВыгрузки);
		
	КонецЦикла;
	
	ДанныеРаздела = Неопределено;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиУзел_ПрибУб(Компоновщик, ПараметрыВыгрузки, СтруктураВыгрузки)
	
	ИмяРаздела = "ОФР";
	
	Если НЕ РазделВключенВОтчет(ИмяРаздела, ПараметрыВыгрузки.ДеревоНастройкиСтраниц) Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеРаздела = ПолучитьИзВременногоХранилища(СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяРаздела]);
	
	ШаблонВыгрузки = УзелСтруктурыВыгрузки(СтруктураВыгрузки, "Документ/ПрибУб");
	
	Для Каждого СтраницаРаздела Из ДанныеРаздела.Строки Цикл
		ДанныеСтраницы = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(СтраницаРаздела.Данные);
		ОбработатьПоказателиПередОтправкой_ОФР(ДанныеСтраницы);
		
		НомерКвартала = Месяц(КонецКвартала(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета)) / 3;
		КодКвартала = КодКвартала(НомерКвартала);
		Делитель = ДелительПоЕдиницеИзмерения(СтруктураРеквизитовФормы.ЕдиницаИзмерения);
		ОКЕИ = КодЕдиницыИзмерения(Делитель);
		ФорматнаяСтрока = ФорматнаяСтрокаПоЕдиницеИзмерения(Делитель);
		
		ДанныеСтраницы.Вставить("Период",   КодКвартала);
		ДанныеСтраницы.Вставить("ОтчетГод", ПредставлениеГода(Год(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета)));
		ДанныеСтраницы.Вставить("ОКЕИ",     ОКЕИ);
		
		ВывестиСведенияПоШаблону(Компоновщик, ФорматнаяСтрока, ДанныеСтраницы, ШаблонВыгрузки);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиУзел_ОтчетИзмКап(Компоновщик, ПараметрыВыгрузки, СтруктураВыгрузки)
	
	ИмяРаздела = "ОИК";
	
	Если НЕ РазделВключенВОтчет(ИмяРаздела, ПараметрыВыгрузки.ДеревоНастройкиСтраниц) Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеРаздела = ПолучитьИзВременногоХранилища(СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяРаздела]);
	
	ШаблонВыгрузки = УзелСтруктурыВыгрузки(СтруктураВыгрузки, "Документ/ОтчетИзмКап");
	
	Для Каждого СтраницаРаздела Из ДанныеРаздела.Строки Цикл
		ДанныеСтраницы = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(СтраницаРаздела.Данные);
		ОбработатьПоказателиПередОтправкой_ОИК(ДанныеСтраницы);
		
		Делитель = ДелительПоЕдиницеИзмерения(СтруктураРеквизитовФормы.ЕдиницаИзмерения);
		ОКЕИ = КодЕдиницыИзмерения(Делитель);
		ФорматнаяСтрока = ФорматнаяСтрокаПоЕдиницеИзмерения(Делитель);
		
		ДанныеСтраницы.Вставить("Период",   "34");
		ДанныеСтраницы.Вставить("ОтчетГод", ПредставлениеГода(Год(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета)));
		ДанныеСтраницы.Вставить("ОКЕИ",     ОКЕИ);
		
		ВывестиСведенияПоШаблону(Компоновщик, ФорматнаяСтрока, ДанныеСтраницы, ШаблонВыгрузки);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиУзел_ДвижениеДен(Компоновщик, ПараметрыВыгрузки, СтруктураВыгрузки)
	
	ИмяРаздела = "ОДДС";
	
	Если НЕ РазделВключенВОтчет(ИмяРаздела, ПараметрыВыгрузки.ДеревоНастройкиСтраниц) Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеРаздела = ПолучитьИзВременногоХранилища(СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяРаздела]);
	
	ШаблонВыгрузки = УзелСтруктурыВыгрузки(СтруктураВыгрузки, "Документ/ДвижениеДен");
	
	Для Каждого СтраницаРаздела Из ДанныеРаздела.Строки Цикл
		ДанныеСтраницы = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(СтраницаРаздела.Данные);
		ОбработатьПоказателиПередОтправкой_ОДДС(ДанныеСтраницы);
		
		Делитель = ДелительПоЕдиницеИзмерения(СтруктураРеквизитовФормы.ЕдиницаИзмерения);
		ОКЕИ = КодЕдиницыИзмерения(Делитель);
		ФорматнаяСтрока = ФорматнаяСтрокаПоЕдиницеИзмерения(Делитель);
		
		ДанныеСтраницы.Вставить("Период",   "34");
		ДанныеСтраницы.Вставить("ОтчетГод", ПредставлениеГода(Год(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета)));
		ДанныеСтраницы.Вставить("ОКЕИ",     ОКЕИ);
		
		ВывестиСведенияПоШаблону(Компоновщик, ФорматнаяСтрока, ДанныеСтраницы, ШаблонВыгрузки);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиУзел_ЦелИсп(Компоновщик, ПараметрыВыгрузки, СтруктураВыгрузки)
	
	ИмяРаздела = "ОЦИС";
	
	Если НЕ РазделВключенВОтчет(ИмяРаздела, ПараметрыВыгрузки.ДеревоНастройкиСтраниц) Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеРаздела = ПолучитьИзВременногоХранилища(СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяРаздела]);
	
	ШаблонВыгрузки = УзелСтруктурыВыгрузки(СтруктураВыгрузки, "Документ/ЦелИсп");
	
	Для Каждого СтраницаРаздела Из ДанныеРаздела.Строки Цикл
		ДанныеСтраницы = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(СтраницаРаздела.Данные);
		ОбработатьПоказателиПередОтправкой_ОЦИС(ДанныеСтраницы);
		
		Делитель = ДелительПоЕдиницеИзмерения(СтруктураРеквизитовФормы.ЕдиницаИзмерения);
		ОКЕИ = КодЕдиницыИзмерения(Делитель);
		ФорматнаяСтрока = ФорматнаяСтрокаПоЕдиницеИзмерения(Делитель);
		
		ДанныеСтраницы.Вставить("Период",   "34");
		ДанныеСтраницы.Вставить("ОтчетГод", ПредставлениеГода(Год(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета)));
		ДанныеСтраницы.Вставить("ОКЕИ",     ОКЕИ);
		
		ВывестиСведенияПоШаблону(Компоновщик, ФорматнаяСтрока, ДанныеСтраницы, ШаблонВыгрузки);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиУзел_ДополнительныеСведения(Компоновщик, ПараметрыВыгрузки, СтруктураВыгрузки)
	
	ИмяРаздела = "ДополнительныеПоказатели";
	
	Если НЕ РазделВключенВОтчет(ИмяРаздела, ПараметрыВыгрузки.ДеревоНастройкиСтраниц) Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеРаздела = ПолучитьИзВременногоХранилища(СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяРаздела]);
	
	ШаблонВыгрузки = УзелСтруктурыВыгрузки(СтруктураВыгрузки, "Документ/ДополнительныеСведения");
	
	Для Каждого СтраницаРаздела Из ДанныеРаздела.Строки Цикл
		ДанныеСтраницы = СтраницаРаздела.Данные;
		
		НомерКвартала = Месяц(КонецКвартала(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета)) / 3;
		КодКвартала = КодКвартала(НомерКвартала);
		Делитель = ДелительПоЕдиницеИзмерения(СтруктураРеквизитовФормы.ЕдиницаИзмерения);
		ОКЕИ = КодЕдиницыИзмерения(Делитель);
		ФорматнаяСтрока = ФорматнаяСтрокаПоЕдиницеИзмерения(Делитель);
		
		ДанныеСтраницы.Вставить("Период",   КодКвартала);
		ДанныеСтраницы.Вставить("ОтчетГод", ПредставлениеГода(Год(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета)));
		ДанныеСтраницы.Вставить("ОКЕИ",     ОКЕИ);
		
		ВывестиСведенияПоШаблону(Компоновщик, ФорматнаяСтрока, ДанныеСтраницы, ШаблонВыгрузки);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиУзел_РасшифровкиОбеспечений(Компоновщик, ПараметрыВыгрузки, СтруктураВыгрузки)
	
	ИмяРазделаПолученные = "РасшифровкиОбеспеченийПолученные";
	ИмяРазделаВыданные   = "РасшифровкиОбеспеченийВыданные";
	
	Если НЕ РазделВключенВОтчет(ИмяРазделаПолученные, ПараметрыВыгрузки.ДеревоНастройкиСтраниц)
	   И НЕ РазделВключенВОтчет(ИмяРазделаВыданные, ПараметрыВыгрузки.ДеревоНастройкиСтраниц) Тогда
		Возврат;
	КонецЕсли;
	
	ИмяКорневогоРаздела = мСтруктураМногоуровневыхРазделов[ИмяРазделаПолученные].КорневойРаздел;
	ДанныеРаздела = ПолучитьИзВременногоХранилища(СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяКорневогоРаздела]);
	
	НомерКвартала = Месяц(КонецКвартала(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета)) / 3;
	КодКвартала = КодКвартала(НомерКвартала);
	ОтчетГод = ПредставлениеГода(Год(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета));
	
	ОКЕИ = "384";
	
	Компоновщик.ЗаписатьНачалоЭлемента("РасшифровкиОбеспечений");
	
	ВывестиАтрибут(Компоновщик, "Период", КодКвартала);
	ВывестиАтрибут(Компоновщик, "ОтчетГод", ОтчетГод);
	ВывестиАтрибут(Компоновщик, "ОКЕИ", ОКЕИ);
	
	СтраницаРаздела = ДанныеРаздела.Строки[0].Строки[0].Строки[0];
	
	Если ДействуетСВерсииФормата("5.10.01") И СтраницаРаздела.Параметры.СтатусЗаполнения = "пустой" Тогда
		Компоновщик.ЗаписатьНачалоЭлемента("Полученные");
		ВывестиАтрибут(Компоновщик, "ОтчетПустой", "true");
		Компоновщик.ЗаписатьКонецЭлемента(); //Полученные
		
	ИначеЕсли РазделВключенВОтчет(ИмяРазделаПолученные, ПараметрыВыгрузки.ДеревоНастройкиСтраниц)
	   И СтраницаРаздела.ДополнительныеДанные <> Неопределено Тогда
		ВывестиСтраницуВУзел_РасшифровкиОбеспеченийПолученные(Компоновщик, СтраницаРаздела);
		
	КонецЕсли;
	
	СтраницаРаздела = ДанныеРаздела.Строки[0].Строки[1].Строки[0];
	
	Если ДействуетСВерсииФормата("5.10.01") И СтраницаРаздела.Параметры.СтатусЗаполнения = "пустой" Тогда
		Компоновщик.ЗаписатьНачалоЭлемента("Выданные");
		ВывестиАтрибут(Компоновщик, "ОтчетПустой", "true");
		Компоновщик.ЗаписатьКонецЭлемента(); // Выданные
		
	ИначеЕсли РазделВключенВОтчет(ИмяРазделаВыданные, ПараметрыВыгрузки.ДеревоНастройкиСтраниц)
	   И СтраницаРаздела.ДополнительныеДанные <> Неопределено Тогда
		ВывестиСтраницуВУзел_РасшифровкиОбеспеченийВыданные(Компоновщик, СтраницаРаздела);
		
	КонецЕсли;
	
	Компоновщик.ЗаписатьКонецЭлемента();
	
КонецПроцедуры

&НаСервере
Процедура ВывестиСтраницуВУзел_РасшифровкиОбеспеченийПолученные(Компоновщик, СтраницаРаздела)
	
	ДанныеРаздела = СтраницаРаздела.ДополнительныеДанные.Данные;
	ФорматнаяСтрока = "ЧДЦ=3; ЧС=3; ЧН=; ЧГ=0";
	
	КодыОбеспечений = КодыВидовОбеспечений();
	
	Компоновщик.ЗаписатьНачалоЭлемента("Полученные");
	
	Для Каждого СтрокаОбеспечения Из ДанныеРаздела Цикл
		Компоновщик.ЗаписатьНачалоЭлемента("Обеспечение");
		
		ВывестиАтрибут(Компоновщик, "Вид", КодыОбеспечений[СтрокаОбеспечения.ВидОбеспечения], "Т,1");
		ВывестиАтрибут(Компоновщик, "Сумма",
			ЗначениеПриведенноеКЕдиницеИзмерения(СтрокаОбеспечения.Стоимость, ФорматнаяСтрока), "Ч,15,3");
		
		ВывестиНеобязательныйАтрибут(Компоновщик, "Валюта", СтрокаОбеспечения.Валюта, "Т,3");
		ВывестиНеобязательныйАтрибут(Компоновщик, "СуммаВал", СтрокаОбеспечения.СуммаВал, "Ч,15,2");
		
		Компоновщик.ЗаписатьНачалоЭлемента("Гарант");
		
		ВывестиАтрибут(Компоновщик, "Наименование", СтрокаОбеспечения.КонтрагентНаименование, "Т,100");
		ВывестиНеобязательныйАтрибут(Компоновщик, "ИНН", СтрокаОбеспечения.КонтрагентИНН, "Т,12");
		
		Компоновщик.ЗаписатьНачалоЭлемента("Договор");
		
		ВывестиАтрибут(Компоновщик, "Номер", СтрокаОбеспечения.ДоговорНомер, "Т,20");
		ВывестиАтрибут(Компоновщик, "ДатаНач", СтрокаОбеспечения.ДоговорНач, "Д");
		ВывестиАтрибут(Компоновщик, "ДатаКон", СтрокаОбеспечения.ДоговорНач, "Д");
		
		Компоновщик.ЗаписатьКонецЭлемента(); // Договор
		
		Компоновщик.ЗаписатьКонецЭлемента(); // Гарант
		
		Компоновщик.ЗаписатьНачалоЭлемента("Должник");
		ВывестиАтрибут(Компоновщик, "Наименование", СтрокаОбеспечения.ДолжникНаименование, "Т,100");
		ВывестиНеобязательныйАтрибут(Компоновщик, "ИНН", СтрокаОбеспечения.ДолжникИНН, "Т,12");
		
		Компоновщик.ЗаписатьКонецЭлемента(); // Должник
		
		Компоновщик.ЗаписатьКонецЭлемента(); // Обеспечение
		
	КонецЦикла;
	
	Компоновщик.ЗаписатьКонецЭлемента(); // Полученные
	
КонецПроцедуры

&НаСервере
Процедура ВывестиСтраницуВУзел_РасшифровкиОбеспеченийВыданные(Компоновщик, СтраницаРаздела)
	
	ДанныеРаздела = СтраницаРаздела.ДополнительныеДанные.Данные;
	ФорматнаяСтрока = "ЧДЦ=3; ЧС=3; ЧН=; ЧГ=0";
	
	КодыОбеспечений = КодыВидовОбеспечений();
	
	Компоновщик.ЗаписатьНачалоЭлемента("Выданные");
	
	Для Каждого СтрокаОбеспечения Из ДанныеРаздела Цикл
		Компоновщик.ЗаписатьНачалоЭлемента("Обеспечение");
		
		ВывестиАтрибут(Компоновщик, "Вид", КодыОбеспечений[СтрокаОбеспечения.ВидОбеспечения], "Т,1");
		ВывестиАтрибут(Компоновщик, "Сумма",
			ЗначениеПриведенноеКЕдиницеИзмерения(СтрокаОбеспечения.Стоимость, ФорматнаяСтрока), "Ч,15,3");
		
		ВывестиНеобязательныйАтрибут(Компоновщик, "Валюта", СтрокаОбеспечения.Валюта, "Т,3");
		ВывестиНеобязательныйАтрибут(Компоновщик, "СуммаВал", СтрокаОбеспечения.СуммаВал, "Ч,15,2");
		
		Компоновщик.ЗаписатьНачалоЭлемента("Бенефициар");
		
		ВывестиАтрибут(Компоновщик, "Наименование", СтрокаОбеспечения.КонтрагентНаименование, "Т,100");
		ВывестиНеобязательныйАтрибут(Компоновщик, "ИНН", СтрокаОбеспечения.КонтрагентИНН, "Т,12");
		
		Компоновщик.ЗаписатьНачалоЭлемента("Договор");
		
		ВывестиАтрибут(Компоновщик, "Номер", СтрокаОбеспечения.ДоговорНомер, "Т,20");
		ВывестиАтрибут(Компоновщик, "ДатаНач", СтрокаОбеспечения.ДоговорНач, "Д");
		ВывестиАтрибут(Компоновщик, "ДатаКон", СтрокаОбеспечения.ДоговорНач, "Д");
		
		Компоновщик.ЗаписатьКонецЭлемента(); // Договор
		
		Компоновщик.ЗаписатьКонецЭлемента(); // Бенефициар
		
		Компоновщик.ЗаписатьНачалоЭлемента("Должник");
		ВывестиАтрибут(Компоновщик, "Наименование", СтрокаОбеспечения.ДолжникНаименование, "Т,100");
		ВывестиНеобязательныйАтрибут(Компоновщик, "ИНН", СтрокаОбеспечения.ДолжникИНН, "Т,12");
		
		Компоновщик.ЗаписатьКонецЭлемента(); // Должник
		
		Компоновщик.ЗаписатьКонецЭлемента(); // Обеспечение
		
	КонецЦикла;
	
	Компоновщик.ЗаписатьКонецЭлемента(); // Выданные
	
КонецПроцедуры

&НаСервере
Процедура ВывестиУзел_ЗадолженностьПоКредитамЗаймам(Компоновщик, ПараметрыВыгрузки, СтруктураВыгрузки)
	
	ИмяРазделаКраткосрочная = "ЗадолженностьПоКредитамЗаймамКраткосрочная";
	ИмяРазделаДолгосрочная  = "ЗадолженностьПоКредитамЗаймамДолгосрочная";
	
	Если НЕ РазделВключенВОтчет(ИмяРазделаКраткосрочная, ПараметрыВыгрузки.ДеревоНастройкиСтраниц)
	   И НЕ РазделВключенВОтчет(ИмяРазделаДолгосрочная, ПараметрыВыгрузки.ДеревоНастройкиСтраниц) Тогда
		Возврат;
	КонецЕсли;
	
	ИмяКорневогоРаздела = мСтруктураМногоуровневыхРазделов[ИмяРазделаКраткосрочная].КорневойРаздел;
	ДанныеРаздела = ПолучитьИзВременногоХранилища(СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяКорневогоРаздела]);
	
	Если ДанныеРаздела.Строки[0].Строки[0].Строки[0].Параметры.Свойство("ДатаНачалаОтчета") Тогда
		НомерМесяца = Месяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
		КодПериода = КодМесяца(НомерМесяца);
	Иначе
		// Старая версия отчета с квартальным представлением.
		НомерКвартала = Месяц(КонецКвартала(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета)) / 3;
		КодПериода = КодКвартала(НомерКвартала);
	КонецЕсли;
	
	ОтчетГод = ПредставлениеГода(Год(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета));
	
	ОКЕИ = "384";
	
	Компоновщик.ЗаписатьНачалоЭлемента("ЗадолженностьПоКредитамЗаймам");
	
	ВывестиАтрибут(Компоновщик, "Период", КодПериода);
	ВывестиАтрибут(Компоновщик, "ОтчетГод", ОтчетГод);
	ВывестиАтрибут(Компоновщик, "ОКЕИ", ОКЕИ);
	
	СтраницаРаздела = ДанныеРаздела.Строки[0].Строки[0].Строки[0];
	
	Если ДействуетСВерсииФормата("5.10.01") И СтраницаРаздела.Параметры.СтатусЗаполнения = "пустой" Тогда
		Компоновщик.ЗаписатьНачалоЭлемента("ОСВ_66");
		ВывестиАтрибут(Компоновщик, "ОтчетПустой", "true");
		Компоновщик.ЗаписатьКонецЭлемента(); // ОСВ_66
		
	ИначеЕсли РазделВключенВОтчет(ИмяРазделаКраткосрочная, ПараметрыВыгрузки.ДеревоНастройкиСтраниц) Тогда
		ВывестиСтраницуВУзел_ЗадолженностьПоКредитамЗаймам(Компоновщик, СтраницаРаздела, "П00007", "ОСВ_66");
		
	Иначе
		Компоновщик.ЗаписатьНачалоЭлемента("ОСВ_66");
		Компоновщик.ЗаписатьКонецЭлемента();
		
	КонецЕсли;
	
	СтраницаРаздела = ДанныеРаздела.Строки[0].Строки[1].Строки[0];
	
	Если ДействуетСВерсииФормата("5.10.01") И СтраницаРаздела.Параметры.СтатусЗаполнения = "пустой" Тогда
		Компоновщик.ЗаписатьНачалоЭлемента("ОСВ_67");
		ВывестиАтрибут(Компоновщик, "ОтчетПустой", "true");
		Компоновщик.ЗаписатьКонецЭлемента(); // ОСВ_67
		
	ИначеЕсли РазделВключенВОтчет(ИмяРазделаДолгосрочная, ПараметрыВыгрузки.ДеревоНастройкиСтраниц) Тогда
		ВывестиСтраницуВУзел_ЗадолженностьПоКредитамЗаймам(Компоновщик, СтраницаРаздела, "П00008", "ОСВ_67");
		
	Иначе
		Компоновщик.ЗаписатьНачалоЭлемента("ОСВ_67");
		Компоновщик.ЗаписатьКонецЭлемента();
		
	КонецЕсли;
	
	Компоновщик.ЗаписатьКонецЭлемента();
	
КонецПроцедуры

&НаСервере
Процедура ВывестиСтраницуВУзел_ЗадолженностьПоКредитамЗаймам(Компоновщик, СтраницаРаздела, ПрефиксРаздела, ИмяУзлаСтраницы)
	
	ФорматнаяСтрока = "ЧДЦ=3; ЧС=3; ЧН=; ЧГ=0";
	
	Компоновщик.ЗаписатьНачалоЭлемента(ИмяУзлаСтраницы);
	
	МногострочнаяЧасть1 = СтраницаРаздела.ДанныеМногострочныхЧастей[ПрефиксРаздела + "М1"];
	
	Для Каждого СтрокаМСЧ1 Из МногострочнаяЧасть1.Строки Цикл
		ДанныеСтроки = СтрокаМСЧ1.Данные;
		
		Если НЕ ЗначениеЗаполнено(ДанныеСтроки[ПрефиксРаздела + "М100001"]) Тогда
			Продолжить;
		КонецЕсли;
		
		Компоновщик.ЗаписатьНачалоЭлемента("СтрокаОСВ");
		
		Компоновщик.ЗаписатьНачалоЭлемента("Счет");
		
		СведенияСчетаСтроки = ОтчетностьВБанкиСлужебный.ОписаниеСчетаДляВыгрузки(ДанныеСтроки[ПрефиксРаздела + "М100001"]);
		
		ВывестиАтрибут(Компоновщик, "КодСчета", СведенияСчетаСтроки.КодСчета, "Т,8");
		ВывестиАтрибут(Компоновщик, "НаименованиеСчета", СведенияСчетаСтроки.НаименованиеСчета, "Т,120");
		ВывестиАтрибут(Компоновщик, "ТипСчета", СведенияСчетаСтроки.ТипСчета, "Т,2");
		
		ВывестиНеобязательныйАтрибут(Компоновщик, "КодСчетаР", СведенияСчетаСтроки.КодСчетаР, "Т,8");
		ВывестиНеобязательныйАтрибут(Компоновщик, "ТипСчетаР", СведенияСчетаСтроки.ТипСчетаР, "Т,2");
		ВывестиНеобязательныйАтрибут(Компоновщик, "КодСчетаРР", СведенияСчетаСтроки.КодСчетаРР, "Т,8");
		ВывестиНеобязательныйАтрибут(Компоновщик, "ТипСчетаРР", СведенияСчетаСтроки.ТипСчетаРР, "Т,2");
		
		ВывестиАтрибут(Компоновщик, "СНД", ЗначениеПриведенноеКЕдиницеИзмерения(ДанныеСтроки[ПрефиксРаздела + "М100002"], ФорматнаяСтрока), "Ч,15,3");
		ВывестиАтрибут(Компоновщик, "СНК", ЗначениеПриведенноеКЕдиницеИзмерения(ДанныеСтроки[ПрефиксРаздела + "М100003"], ФорматнаяСтрока), "Ч,15,3");
		ВывестиАтрибут(Компоновщик, "ДО",  ЗначениеПриведенноеКЕдиницеИзмерения(ДанныеСтроки[ПрефиксРаздела + "М100004"], ФорматнаяСтрока), "Ч,15,3");
		ВывестиАтрибут(Компоновщик, "КО",  ЗначениеПриведенноеКЕдиницеИзмерения(ДанныеСтроки[ПрефиксРаздела + "М100005"], ФорматнаяСтрока), "Ч,15,3");
		ВывестиАтрибут(Компоновщик, "СКД", ЗначениеПриведенноеКЕдиницеИзмерения(ДанныеСтроки[ПрефиксРаздела + "М100006"], ФорматнаяСтрока), "Ч,15,3");
		ВывестиАтрибут(Компоновщик, "СКК", ЗначениеПриведенноеКЕдиницеИзмерения(ДанныеСтроки[ПрефиксРаздела + "М100007"], ФорматнаяСтрока), "Ч,15,3");
		
		ВывестиНеобязательныйАтрибут(Компоновщик, "СНДВал", ДанныеСтроки[ПрефиксРаздела + "М100020"], "Ч,15,2");
		ВывестиНеобязательныйАтрибут(Компоновщик, "СНКВал", ДанныеСтроки[ПрефиксРаздела + "М100021"], "Ч,15,2");
		ВывестиНеобязательныйАтрибут(Компоновщик, "ДОВал",  ДанныеСтроки[ПрефиксРаздела + "М100022"], "Ч,15,2");
		ВывестиНеобязательныйАтрибут(Компоновщик, "КОВал",  ДанныеСтроки[ПрефиксРаздела + "М100023"], "Ч,15,2");
		ВывестиНеобязательныйАтрибут(Компоновщик, "СКДВал", ДанныеСтроки[ПрефиксРаздела + "М100024"], "Ч,15,2");
		ВывестиНеобязательныйАтрибут(Компоновщик, "СККВал", ДанныеСтроки[ПрефиксРаздела + "М100025"], "Ч,15,2");
		
		ЕстьСведенияОКонтрагенте = ЗначениеЗаполнено(ДанныеСтроки[ПрефиксРаздела + "М100008"]);
		Если ЕстьСведенияОКонтрагенте Тогда
			Компоновщик.ЗаписатьНачалоЭлемента("Контрагент");
			
			ВывестиАтрибут(Компоновщик, "Наименование", ДанныеСтроки[ПрефиксРаздела + "М100008"], "Т,100");
			ВывестиНеобязательныйАтрибут(Компоновщик, "ИНН", ДанныеСтроки[ПрефиксРаздела + "М100009"], "Т,12");
			ВывестиНеобязательныйАтрибут(Компоновщик, "КПП", ДанныеСтроки[ПрефиксРаздела + "М100010"], "Т,9");
			
			Компоновщик.ЗаписатьКонецЭлемента(); // Контрагент
			
		КонецЕсли;
		
		ЕстьСведенияОДоговоре = ЗначениеЗаполнено(ДанныеСтроки[ПрефиксРаздела + "М100011"]);
		Если ЕстьСведенияОДоговоре Тогда
			Компоновщик.ЗаписатьНачалоЭлемента("Договор");
			
			ВывестиАтрибут(Компоновщик, "Представление", ДанныеСтроки[ПрефиксРаздела + "М100011"], "Т,255");
			ВывестиНеобязательныйАтрибут(Компоновщик, "Номер", ДанныеСтроки[ПрефиксРаздела + "М100012"], "Т,20");
			ВывестиНеобязательныйАтрибут(Компоновщик, "Дата", ДанныеСтроки[ПрефиксРаздела + "М100013"], "Д");
			ВывестиНеобязательныйАтрибут(Компоновщик, "СрокПогашения", ДанныеСтроки[ПрефиксРаздела + "М100014"], "Д");
			ВывестиНеобязательныйАтрибут(Компоновщик, "Продукт", ДанныеСтроки[ПрефиксРаздела + "М100015"], "Т,15");
			ВывестиНеобязательныйАтрибут(Компоновщик, "СуммаПоДоговору", ЗначениеПриведенноеКЕдиницеИзмерения(ДанныеСтроки[ПрефиксРаздела + "М100016"], ФорматнаяСтрока), "Ч,15,3");
			ВывестиНеобязательныйАтрибут(Компоновщик, "КодВалюты", ДанныеСтроки[ПрефиксРаздела + "М100017"], "Т,3");
			ВывестиНеобязательныйАтрибут(Компоновщик, "Ставка", ДанныеСтроки[ПрефиксРаздела + "М100018"], "Ч,8,4");
			ВывестиНеобязательныйАтрибут(Компоновщик, "СумДогВал", ДанныеСтроки[ПрефиксРаздела + "М100019"], "Ч,15,2");
			
			МногострочнаяЧасть2 = СтрокаМСЧ1.ДанныеМногострочныхЧастей[ПрефиксРаздела + "М2"];
			
			Для Каждого СтрокаМСЧ2 Из МногострочнаяЧасть2.Строки Цикл
				ДанныеСтрокиМСЧ2 = СтрокаМСЧ2.Данные;
				
				Если НЕ ЗначениеЗаполнено(ДанныеСтрокиМСЧ2[ПрефиксРаздела + "М200001"]) Тогда
					Продолжить;
				КонецЕсли;
				
				Компоновщик.ЗаписатьНачалоЭлемента("ДатаПлатежа");
				
				ВывестиАтрибут(Компоновщик, "Дата", ДанныеСтрокиМСЧ2[ПрефиксРаздела + "М200001"], "Д");
				ВывестиАтрибут(Компоновщик, "Сумма", ЗначениеПриведенноеКЕдиницеИзмерения(ДанныеСтрокиМСЧ2[ПрефиксРаздела + "М200002"], ФорматнаяСтрока), "Ч,15,3");
				ВывестиНеобязательныйАтрибут(Компоновщик, "ОснДолг", ЗначениеПриведенноеКЕдиницеИзмерения(ДанныеСтрокиМСЧ2[ПрефиксРаздела + "М200003"], ФорматнаяСтрока), "Ч,15,3");
				ВывестиНеобязательныйАтрибут(Компоновщик, "СуммаВал", ДанныеСтрокиМСЧ2[ПрефиксРаздела + "М200004"], "Ч,15,2");
				ВывестиНеобязательныйАтрибут(Компоновщик, "ОснДолгВал", ДанныеСтрокиМСЧ2[ПрефиксРаздела + "М200005"], "Ч,15,2");
				
				Компоновщик.ЗаписатьКонецЭлемента(); // ДатаПлатежа
				
			КонецЦикла;
			
			Компоновщик.ЗаписатьКонецЭлемента(); // Договор
			
		КонецЕсли;
		
		Компоновщик.ЗаписатьКонецЭлемента(); // Счет
		
		ДатаОбраз = ДанныеСтроки[ПрефиксРаздела + "М100026"];
		ДатаПогаш = ДанныеСтроки[ПрефиксРаздела + "М100027"];
		СуммаПросрЗад = ЗначениеПриведенноеКЕдиницеИзмерения(ДанныеСтроки[ПрефиксРаздела + "М100028"], ФорматнаяСтрока);
		СуммаВалПросрЗад = ДанныеСтроки[ПрефиксРаздела + "М100029"];
		
		УзелЗаполнен_ПросрЗад = ЗначениеЗаполнено(ДатаОбраз)
		                      И ЗначениеЗаполнено(ДатаПогаш)
		                      И ЗначениеЗаполнено(СуммаПросрЗад)
		                      И ЗначениеЗаполнено(СуммаВалПросрЗад);
		Если УзелЗаполнен_ПросрЗад Тогда
			Компоновщик.ЗаписатьНачалоЭлемента("ПросрЗад");
			
			ВывестиАтрибут(Компоновщик, "ДатаОбраз", ДатаОбраз, "Д");
			ВывестиАтрибут(Компоновщик, "ДатаПогаш", ДатаПогаш, "Д");
			ВывестиАтрибут(Компоновщик, "Сумма", СуммаПросрЗад, "Ч,15,3");
			ВывестиНеобязательныйАтрибут(Компоновщик, "СуммаВал", СуммаВалПросрЗад, "Ч,15,3");
			
			Компоновщик.ЗаписатьКонецЭлемента(); // ПросрЗад
			
		КонецЕсли;
		
		ВидОбесп = СокрЛП(ДанныеСтроки[ПрефиксРаздела + "М100030"]);
		ДатаОбесп = ДанныеСтроки[ПрефиксРаздела + "М100031"];
		
		УзелЗаполнен_Обесп = ЗначениеЗаполнено(ВидОбесп)
		                   И ЗначениеЗаполнено(ДатаОбесп);
		Если УзелЗаполнен_Обесп Тогда
			Компоновщик.ЗаписатьНачалоЭлемента("Обесп");
			
			ВывестиАтрибут(Компоновщик, "ВидОбесп", ВидОбесп, "Т,50");
			ВывестиАтрибут(Компоновщик, "ДатаОбесп", ДатаОбесп, "Д");
			
			Компоновщик.ЗаписатьКонецЭлемента(); // Обесп
			
		КонецЕсли;
		
		Коммент = СокрЛП(ДанныеСтроки[ПрефиксРаздела + "М100032"]);
		
		Если ЗначениеЗаполнено(Коммент) Тогда
			Компоновщик.ЗаписатьНачалоЭлемента("Коммент");
			Компоновщик.ЗаписатьТекст(Лев(Коммент, 1000));
			Компоновщик.ЗаписатьКонецЭлемента(); // Коммент
			
		КонецЕсли;
		
		Компоновщик.ЗаписатьКонецЭлемента(); // СтрокаОСВ
		
	КонецЦикла;
	
	Компоновщик.ЗаписатьКонецЭлемента(); // ИмяУзлаСтраницы
	
КонецПроцедуры

&НаСервере
Процедура ВывестиУзел_ЛизингОбязательства(Компоновщик, ПараметрыВыгрузки, СтруктураВыгрузки)
	
	ИмяРаздела = "ЛизингОбязательства";
	
	Если НЕ РазделВключенВОтчет(ИмяРаздела, ПараметрыВыгрузки.ДеревоНастройкиСтраниц) Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеРаздела = ПолучитьИзВременногоХранилища(СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяРаздела]);
	
	Для Каждого СтраницаРаздела Из ДанныеРаздела.Строки Цикл
		ПараметрыСтраницы = СтраницаРаздела.Параметры;
		ДанныеСтраницы    = СтраницаРаздела.Данные;
		
		Если ДействуетСВерсииФормата("5.10.01") И ПараметрыСтраницы.СтатусЗаполнения = "пустой" Тогда
			ВывестиСтраницуВУзел_ЛизингОбязательства_ОтчетПустой(Компоновщик, СтраницаРаздела);
		Иначе
			ВывестиСтраницуВУзел_ЛизингОбязательства(Компоновщик, СтраницаРаздела);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиСтраницуВУзел_ЛизингОбязательства(Компоновщик, СтраницаРаздела)
	
	НомерКвартала = Месяц(КонецКвартала(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета)) / 3;
	КодКвартала = КодКвартала(НомерКвартала);
	ОтчетГод = ПредставлениеГода(Год(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета));
	ОКЕИ = "384";
	
	ФорматнаяСтрока = "ЧДЦ=3; ЧС=3; ЧН=; ЧГ=0";
	
	Компоновщик.ЗаписатьНачалоЭлемента("ЛизингОбязательства");
	
	ВывестиАтрибут(Компоновщик, "Период", КодКвартала);
	ВывестиАтрибут(Компоновщик, "ОтчетГод", ОтчетГод);
	ВывестиАтрибут(Компоновщик, "ОКЕИ", ОКЕИ);
	
	МногострочнаяЧасть = СтраницаРаздела.ДанныеМногострочныхЧастей.П00006М1;
	
	Для Каждого СтрокаМСЧ Из МногострочнаяЧасть.Строки Цикл
		ДанныеСтроки = СтрокаМСЧ.Данные;
		
		Если НЕ ЗначениеЗаполнено(ДанныеСтроки.П00006М100101) Тогда
			Продолжить;
		КонецЕсли;
		
		Компоновщик.ЗаписатьНачалоЭлемента("Обязательство");
		
		ВывестиАтрибут(Компоновщик, "Продукт", ДанныеСтроки.П00006М100106, "Т,50");
		ВывестиАтрибут(Компоновщик, "СуммаПоДоговору", ЗначениеПриведенноеКЕдиницеИзмерения(ДанныеСтроки.П00006М100110, ФорматнаяСтрока), "Ч,15,3");
		ВывестиАтрибут(Компоновщик, "ОстатокПлатежей", ЗначениеПриведенноеКЕдиницеИзмерения(ДанныеСтроки.П00006М100111, ФорматнаяСтрока), "Ч,15,3");
		ВывестиАтрибут(Компоновщик, "ВалютаДоговора", ДанныеСтроки.П00006М100109, "Т,3");
		ВывестиНеобязательныйАтрибут(Компоновщик, "ПроцентнаяСтавка", ДанныеСтроки.П00006М100108, "Ч,8,4");
		ВывестиНеобязательныйАтрибут(Компоновщик, "ДатаПоследнегоПлатежа", ДанныеСтроки.П00006М100113, "Д");
		ВывестиАтрибут(Компоновщик, "УчетОбязательств", ДанныеСтроки.П00006М100107, "Т,20");
		ВывестиАтрибут(Компоновщик, "СуммаПлатежейНаСебестоимость", ЗначениеПриведенноеКЕдиницеИзмерения(ДанныеСтроки.П00006М100112, ФорматнаяСтрока), "Ч,15,3");
		
		ВывестиНеобязательныйАтрибут(Компоновщик, "СуммаДогВал", ДанныеСтроки.П00006М100115, "Ч,15,2");
		ВывестиНеобязательныйАтрибут(Компоновщик, "ОстВал", ДанныеСтроки.П00006М100116, "Ч,15,2");
		ВывестиНеобязательныйАтрибут(Компоновщик, "СуммаПроср", ЗначениеПриведенноеКЕдиницеИзмерения(ДанныеСтроки.П00006М100117, ФорматнаяСтрока), "Ч,15,3");
		
		Компоновщик.ЗаписатьНачалоЭлемента("Компания");
		
		ВывестиАтрибут(Компоновщик, "Наименование", ДанныеСтроки.П00006М100101, "Т,100");
		ВывестиНеобязательныйАтрибут(Компоновщик, "ИНН", ДанныеСтроки.П00006М100102, "Т,12");
		ВывестиНеобязательныйАтрибут(Компоновщик, "КПП", ДанныеСтроки.П00006М100103, "Т,9");
		
		Компоновщик.ЗаписатьКонецЭлемента(); // Компания
		
		Компоновщик.ЗаписатьНачалоЭлемента("Договор");
		
		ВывестиАтрибут(Компоновщик, "Номер", ДанныеСтроки.П00006М100104, "Т,20");
		ВывестиАтрибут(Компоновщик, "Дата", ДанныеСтроки.П00006М100105, "Д");
		
		ПрефиксРаздела = "П00006";
		МногострочнаяЧасть2 = СтрокаМСЧ.ДанныеМногострочныхЧастей[ПрефиксРаздела + "М2"];
		
		Для Каждого СтрокаМСЧ2 Из МногострочнаяЧасть2.Строки Цикл
			ДанныеСтрокиМСЧ2 = СтрокаМСЧ2.Данные;
			
			Если НЕ ЗначениеЗаполнено(ДанныеСтрокиМСЧ2[ПрефиксРаздела + "М200101"]) Тогда
				Продолжить;
			КонецЕсли;
			
			Компоновщик.ЗаписатьНачалоЭлемента("ДатаПлатежа");
			
			ВывестиАтрибут(Компоновщик, "Дата", ДанныеСтрокиМСЧ2[ПрефиксРаздела + "М200101"], "Д");
			ВывестиАтрибут(Компоновщик, "Сумма", ЗначениеПриведенноеКЕдиницеИзмерения(ДанныеСтрокиМСЧ2[ПрефиксРаздела + "М200102"], ФорматнаяСтрока), "Ч,15,3");
			ВывестиНеобязательныйАтрибут(Компоновщик, "ОснДолг", ЗначениеПриведенноеКЕдиницеИзмерения(ДанныеСтрокиМСЧ2[ПрефиксРаздела + "М200103"], ФорматнаяСтрока), "Ч,15,3");
			ВывестиНеобязательныйАтрибут(Компоновщик, "СуммаВал", ДанныеСтрокиМСЧ2[ПрефиксРаздела + "М200104"], "Ч,15,2");
			ВывестиНеобязательныйАтрибут(Компоновщик, "ОснДолгВал", ДанныеСтрокиМСЧ2[ПрефиксРаздела + "М200105"], "Ч,15,2");
			
			Компоновщик.ЗаписатьКонецЭлемента(); // ДатаПлатежа
			
		КонецЦикла;
		
		Компоновщик.ЗаписатьКонецЭлемента(); // Договор
		
		КомментарийБлока = СокрЛП(ДанныеСтроки.П00006М100114);
		Если ЗначениеЗаполнено(КомментарийБлока) Тогда
			Компоновщик.ЗаписатьНачалоЭлемента("Комментарий");
			Компоновщик.ЗаписатьТекст(КомментарийБлока);
			Компоновщик.ЗаписатьКонецЭлемента();
		КонецЕсли;
		
		Компоновщик.ЗаписатьКонецЭлемента(); // Обязательство
		
	КонецЦикла;
	
	Компоновщик.ЗаписатьНачалоЭлемента("ПлатСебПредш");
	
	ДатаОтчетная = КонецКвартала(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	ПоказателиОтчета = СтраницаРаздела.Данные;
	
	Для Инд = 1 По 8 Цикл
		Смещение = -3 * (8 - Инд + 1);
		ДатаКвартала = ДобавитьМесяц(ДатаОтчетная, Смещение);
		ГодКвартала = Год(ДатаКвартала);
		НомерКвартала = Месяц(ДатаКвартала) / 3;
		
		ИмяПоказателя = "П000060000" + Инд + "02";
		ЗначениеПоказателя = ПоказателиОтчета[ИмяПоказателя];
		
		Компоновщик.ЗаписатьНачалоЭлемента("Плат");
		
		ВывестиАтрибут(Компоновщик, "Год", ГодКвартала, "Ч,4");
		ВывестиАтрибут(Компоновщик, "Квартал", НомерКвартала, "Ч,1");
		ВывестиАтрибут(Компоновщик, "СуммаПлат", ЗначениеПриведенноеКЕдиницеИзмерения(ЗначениеПоказателя, ФорматнаяСтрока), "Ч,15,3");
		
		Компоновщик.ЗаписатьКонецЭлемента(); // Плат
		
	КонецЦикла;
	
	Компоновщик.ЗаписатьКонецЭлемента(); // ПлатСебПредш
	
	Компоновщик.ЗаписатьКонецЭлемента(); // ЛизингОбязательства
	
КонецПроцедуры

&НаСервере
Процедура ВывестиСтраницуВУзел_ЛизингОбязательства_ОтчетПустой(Компоновщик, СтраницаРаздела)
	
	НомерКвартала = Месяц(КонецКвартала(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета)) / 3;
	КодКвартала = КодКвартала(НомерКвартала);
	ОтчетГод = ПредставлениеГода(Год(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета));
	ОКЕИ = "384";
	
	Компоновщик.ЗаписатьНачалоЭлемента("ЛизингОбязательства");
	
	ВывестиАтрибут(Компоновщик, "Период", КодКвартала);
	ВывестиАтрибут(Компоновщик, "ОтчетГод", ОтчетГод);
	ВывестиАтрибут(Компоновщик, "ОКЕИ", ОКЕИ);
	ВывестиАтрибут(Компоновщик, "ОтчетПустой", "true");
	
	Компоновщик.ЗаписатьКонецЭлемента(); // ЛизингОбязательства
	
КонецПроцедуры

&НаСервере
Процедура ВывестиУзел_ДенежныеСредства(Компоновщик, ПараметрыВыгрузки, СтруктураВыгрузки)
	
	ИмяРаздела50 = "ДенежныеСредства50";
	ИмяРаздела51 = "ДенежныеСредства51";
	ИмяРаздела52 = "ДенежныеСредства52";
	ИмяРаздела55 = "ДенежныеСредства55";
	
	Если НЕ РазделВключенВОтчет(ИмяРаздела50, ПараметрыВыгрузки.ДеревоНастройкиСтраниц)
	   И НЕ РазделВключенВОтчет(ИмяРаздела51, ПараметрыВыгрузки.ДеревоНастройкиСтраниц)
	   И НЕ РазделВключенВОтчет(ИмяРаздела52, ПараметрыВыгрузки.ДеревоНастройкиСтраниц)
	   И НЕ РазделВключенВОтчет(ИмяРаздела55, ПараметрыВыгрузки.ДеревоНастройкиСтраниц) Тогда
		Возврат;
	КонецЕсли;
	
	ИмяКорневогоРаздела = мСтруктураМногоуровневыхРазделов[ИмяРаздела50].КорневойРаздел;
	ДанныеРаздела = ПолучитьИзВременногоХранилища(СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяКорневогоРаздела]);
	
	НомерМесяца = Месяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	КодМесяца = КодМесяца(НомерМесяца);
	ОтчетГод = ПредставлениеГода(Год(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета));
	
	Делитель = ДелительПоЕдиницеИзмерения(СтруктураРеквизитовФормы.ЕдиницаИзмерения);
	ОКЕИ = КодЕдиницыИзмерения(Делитель);
	
	Компоновщик.ЗаписатьНачалоЭлемента("ДенежныеСредства");
	
	ВывестиАтрибут(Компоновщик, "Период", КодМесяца);
	ВывестиАтрибут(Компоновщик, "ОтчетГод", ОтчетГод);
	ВывестиАтрибут(Компоновщик, "ОКЕИ", ОКЕИ);
	
	СтраницаРаздела = ДанныеРаздела.Строки[0].Строки[0].Строки[0];
	Если РазделВключенВОтчет(ИмяРаздела50, ПараметрыВыгрузки.ДеревоНастройкиСтраниц)
	   И СтраницаРаздела.ДополнительныеДанные <> Неопределено Тогда
		ВывестиСтраницуВУзел_ДенежныеСредства_Касса(Компоновщик, СтраницаРаздела, "Анализ_50");
		
	Иначе
		Компоновщик.ЗаписатьНачалоЭлемента("Анализ_50");
		Компоновщик.ЗаписатьКонецЭлемента();
		
	КонецЕсли;
	
	СтраницаРаздела = ДанныеРаздела.Строки[0].Строки[1].Строки[0];
	Если РазделВключенВОтчет(ИмяРаздела51, ПараметрыВыгрузки.ДеревоНастройкиСтраниц)
	   И СтраницаРаздела.ДополнительныеДанные <> Неопределено Тогда
		ВывестиСтраницуВУзел_ДенежныеСредства_Банк(Компоновщик, СтраницаРаздела, "Анализ_51");
		
	Иначе
		Компоновщик.ЗаписатьНачалоЭлемента("Анализ_51");
		Компоновщик.ЗаписатьКонецЭлемента();
		
	КонецЕсли;
	
	СтраницаРаздела = ДанныеРаздела.Строки[0].Строки[2].Строки[0];
	Если РазделВключенВОтчет(ИмяРаздела52, ПараметрыВыгрузки.ДеревоНастройкиСтраниц)
	   И СтраницаРаздела.ДополнительныеДанные <> Неопределено Тогда
		ВывестиСтраницуВУзел_ДенежныеСредства_Банк(Компоновщик, СтраницаРаздела, "Анализ_52");
		
	Иначе
		Компоновщик.ЗаписатьНачалоЭлемента("Анализ_52");
		Компоновщик.ЗаписатьКонецЭлемента();
		
	КонецЕсли;
	
	СтраницаРаздела = ДанныеРаздела.Строки[0].Строки[3].Строки[0];
	Если РазделВключенВОтчет(ИмяРаздела55, ПараметрыВыгрузки.ДеревоНастройкиСтраниц)
	   И СтраницаРаздела.ДополнительныеДанные <> Неопределено Тогда
		ВывестиСтраницуВУзел_ДенежныеСредства_Банк(Компоновщик,СтраницаРаздела, "Анализ_55");
		
	Иначе
		Компоновщик.ЗаписатьНачалоЭлемента("Анализ_55");
		Компоновщик.ЗаписатьКонецЭлемента();
		
	КонецЕсли;
	
	Компоновщик.ЗаписатьКонецЭлемента();
	
КонецПроцедуры

&НаСервере
Процедура ВывестиСтраницуВУзел_ДенежныеСредства_Касса(Компоновщик, СтраницаРаздела, ИмяУзлаСтраницы)
	
	ДанныеРаздела = СтраницаРаздела.ДополнительныеДанные.Данные;
	ФорматнаяСтрока = ФорматнаяСтрокаПоЕдиницеИзмерения(ДелительПоЕдиницеИзмерения(СтруктураРеквизитовФормы.ЕдиницаИзмерения));
	ФорматнаяСтрока = СтрЗаменить(ФорматнаяСтрока, "ЧДЦ=;", "ЧДЦ=3;");
	
	Компоновщик.ЗаписатьНачалоЭлемента(ИмяУзлаСтраницы);
	
	Для Каждого СтрокаСчета Из ДанныеРаздела.Строки Цикл
		Для Каждого СтрокаПериода Из СтрокаСчета.Строки Цикл
			Компоновщик.ЗаписатьНачалоЭлемента("СтрокаАнализа");
			
			Компоновщик.ЗаписатьНачалоЭлемента("Счет");
			
			СведенияСчетаСтроки = ОтчетностьВБанкиСлужебный.ОписаниеСчетаДляВыгрузки(СтрокаПериода.Счет);
			
			ВывестиАтрибут(Компоновщик, "КодСчета", СведенияСчетаСтроки.КодСчета, "Т,8");
			ВывестиАтрибут(Компоновщик, "НаименованиеСчета", СведенияСчетаСтроки.НаименованиеСчета, "Т,120");
			ВывестиАтрибут(Компоновщик, "ТипСчета", СведенияСчетаСтроки.ТипСчета, "Т,2");
			
			ВывестиНеобязательныйАтрибут(Компоновщик, "КодСчетаР", СведенияСчетаСтроки.КодСчетаР, "Т,8");
			ВывестиНеобязательныйАтрибут(Компоновщик, "ТипСчетаР", СведенияСчетаСтроки.ТипСчетаР, "Т,2");
			ВывестиНеобязательныйАтрибут(Компоновщик, "КодСчетаРР", СведенияСчетаСтроки.КодСчетаРР, "Т,8");
			ВывестиНеобязательныйАтрибут(Компоновщик, "ТипСчетаРР", СведенияСчетаСтроки.ТипСчетаРР, "Т,2");
			
			СНД = 0; СНК = 0; ДО = 0; КО = 0; СКД = 0; СКК = 0;
			
			Для Каждого СтрокаКорреспонденции Из СтрокаПериода.Строки Цикл
				Если НЕ ЗначениеЗаполнено(СтрокаКорреспонденции.КорСчет) Тогда
					СНД = СтрокаКорреспонденции.СНД;
					СНК = СтрокаКорреспонденции.СНК;
					ДО  = СтрокаКорреспонденции.ДО;
					КО  = СтрокаКорреспонденции.КО;
					СКД = СтрокаКорреспонденции.СКД;
					СКК = СтрокаКорреспонденции.СКК;
					
					Прервать;
					
				КонецЕсли;
				
			КонецЦикла;
			
			ВывестиАтрибут(Компоновщик, "СНД", ЗначениеПриведенноеКЕдиницеИзмерения(СНД, ФорматнаяСтрока), "Ч,15,3");
			ВывестиАтрибут(Компоновщик, "СНК", ЗначениеПриведенноеКЕдиницеИзмерения(СНК, ФорматнаяСтрока), "Ч,15,3");
			ВывестиАтрибут(Компоновщик, "ДО",  ЗначениеПриведенноеКЕдиницеИзмерения(ДО,  ФорматнаяСтрока), "Ч,15,3");
			ВывестиАтрибут(Компоновщик, "КО",  ЗначениеПриведенноеКЕдиницеИзмерения(КО,  ФорматнаяСтрока), "Ч,15,3");
			ВывестиАтрибут(Компоновщик, "СКД", ЗначениеПриведенноеКЕдиницеИзмерения(СКД, ФорматнаяСтрока), "Ч,15,3");
			ВывестиАтрибут(Компоновщик, "СКК", ЗначениеПриведенноеКЕдиницеИзмерения(СКК, ФорматнаяСтрока), "Ч,15,3");
			
			ВывестиАтрибут(Компоновщик, "ПериодГод",   Год(СтрокаПериода.Период), "Ч,4,0");
			ВывестиАтрибут(Компоновщик, "ПериодМесяц", Месяц(СтрокаПериода.Период), "Ч,2,0");
			
			Компоновщик.ЗаписатьКонецЭлемента();
			
			// Корреспонденция по счетам.
			Для Каждого СтрокаКорреспонденции Из СтрокаПериода.Строки Цикл
				Если ЗначениеЗаполнено(СтрокаКорреспонденции.КорСчет) Тогда
					Компоновщик.ЗаписатьНачалоЭлемента("Корреспонденция");
					
					СведенияКоррСчета = ОтчетностьВБанкиСлужебный.ОписаниеСчетаДляВыгрузки(СтрокаКорреспонденции.КорСчет);
					
					ВывестиАтрибут(Компоновщик, "КодСчета", СведенияКоррСчета.КодСчета, "Т,8");
					ВывестиАтрибут(Компоновщик, "НаименованиеСчета", СведенияКоррСчета.НаименованиеСчета, "Т,120");
					ВывестиАтрибут(Компоновщик, "ТипСчета", СведенияКоррСчета.ТипСчета, "Т,2");
					
					ВывестиНеобязательныйАтрибут(Компоновщик, "КодСчетаР", СведенияКоррСчета.КодСчетаР, "Т,8");
					ВывестиНеобязательныйАтрибут(Компоновщик, "ТипСчетаР", СведенияКоррСчета.ТипСчетаР, "Т,2");
					ВывестиНеобязательныйАтрибут(Компоновщик, "КодСчетаРР", СведенияКоррСчета.КодСчетаРР, "Т,8");
					ВывестиНеобязательныйАтрибут(Компоновщик, "ТипСчетаРР", СведенияКоррСчета.ТипСчетаРР, "Т,2");
					
					ВывестиАтрибут(Компоновщик, "ДО",  ЗначениеПриведенноеКЕдиницеИзмерения(СтрокаКорреспонденции.ДО,  ФорматнаяСтрока), "Ч,15,3");
					ВывестиАтрибут(Компоновщик, "КО",  ЗначениеПриведенноеКЕдиницеИзмерения(СтрокаКорреспонденции.КО,  ФорматнаяСтрока), "Ч,15,3");
					
					Компоновщик.ЗаписатьКонецЭлемента();
					
				КонецЕсли;
				
			КонецЦикла;
			
			Компоновщик.ЗаписатьКонецЭлемента();
			
		КонецЦикла;
		
	КонецЦикла;
	
	Компоновщик.ЗаписатьКонецЭлемента();
	
КонецПроцедуры

&НаСервере
Процедура ВывестиСтраницуВУзел_ДенежныеСредства_Банк(Компоновщик, СтраницаРаздела, ИмяУзлаСтраницы)
	
	ДанныеРаздела = СтраницаРаздела.ДополнительныеДанные.Данные;
	ФорматнаяСтрока = ФорматнаяСтрокаПоЕдиницеИзмерения(ДелительПоЕдиницеИзмерения(СтруктураРеквизитовФормы.ЕдиницаИзмерения));
	ФорматнаяСтрока = СтрЗаменить(ФорматнаяСтрока, "ЧДЦ=;", "ЧДЦ=3;");
	
	Компоновщик.ЗаписатьНачалоЭлемента(ИмяУзлаСтраницы);
	
	Для Каждого СтрокаСчета Из ДанныеРаздела.Строки Цикл
		Для Каждого СтрокаБанковскогоСчета Из СтрокаСчета.Строки Цикл
			Для Каждого СтрокаПериода Из СтрокаБанковскогоСчета.Строки Цикл
				Компоновщик.ЗаписатьНачалоЭлемента("СтрокаАнализа");
				
				Компоновщик.ЗаписатьНачалоЭлемента("Счет");
				
				СведенияСчетаСтроки = ОтчетностьВБанкиСлужебный.ОписаниеСчетаДляВыгрузки(СтрокаПериода.Счет);
				
				ВывестиАтрибут(Компоновщик, "КодСчета", СведенияСчетаСтроки.КодСчета, "Т,8");
				ВывестиАтрибут(Компоновщик, "НаименованиеСчета", СведенияСчетаСтроки.НаименованиеСчета, "Т,120");
				ВывестиАтрибут(Компоновщик, "ТипСчета", СведенияСчетаСтроки.ТипСчета, "Т,2");
				
				ВывестиНеобязательныйАтрибут(Компоновщик, "КодСчетаР", СведенияСчетаСтроки.КодСчетаР, "Т,8");
				ВывестиНеобязательныйАтрибут(Компоновщик, "ТипСчетаР", СведенияСчетаСтроки.ТипСчетаР, "Т,2");
				ВывестиНеобязательныйАтрибут(Компоновщик, "КодСчетаРР", СведенияСчетаСтроки.КодСчетаРР, "Т,8");
				ВывестиНеобязательныйАтрибут(Компоновщик, "ТипСчетаРР", СведенияСчетаСтроки.ТипСчетаРР, "Т,2");
				
				СНД = 0; СНК = 0; ДО = 0; КО = 0; СКД = 0; СКК = 0;
				
				Для Каждого СтрокаКорреспонденции Из СтрокаПериода.Строки Цикл
					Если НЕ ЗначениеЗаполнено(СтрокаКорреспонденции.КорСчет) Тогда
						СНД = СтрокаКорреспонденции.СНД;
						СНК = СтрокаКорреспонденции.СНК;
						ДО  = СтрокаКорреспонденции.ДО;
						КО  = СтрокаКорреспонденции.КО;
						СКД = СтрокаКорреспонденции.СКД;
						СКК = СтрокаКорреспонденции.СКК;
						
						Прервать;
						
					КонецЕсли;
					
				КонецЦикла;
				
				ВывестиАтрибут(Компоновщик, "СНД", ЗначениеПриведенноеКЕдиницеИзмерения(СНД, ФорматнаяСтрока), "Ч,15,3");
				ВывестиАтрибут(Компоновщик, "СНК", ЗначениеПриведенноеКЕдиницеИзмерения(СНК, ФорматнаяСтрока), "Ч,15,3");
				ВывестиАтрибут(Компоновщик, "ДО",  ЗначениеПриведенноеКЕдиницеИзмерения(ДО,  ФорматнаяСтрока), "Ч,15,3");
				ВывестиАтрибут(Компоновщик, "КО",  ЗначениеПриведенноеКЕдиницеИзмерения(КО,  ФорматнаяСтрока), "Ч,15,3");
				ВывестиАтрибут(Компоновщик, "СКД", ЗначениеПриведенноеКЕдиницеИзмерения(СКД, ФорматнаяСтрока), "Ч,15,3");
				ВывестиАтрибут(Компоновщик, "СКК", ЗначениеПриведенноеКЕдиницеИзмерения(СКК, ФорматнаяСтрока), "Ч,15,3");
				
				ВывестиАтрибут(Компоновщик, "ПериодГод",   Год(СтрокаПериода.Период), "Ч,4,0");
				ВывестиАтрибут(Компоновщик, "ПериодМесяц", Месяц(СтрокаПериода.Период), "Ч,2,0");
				
				// Банковский счет.
				Компоновщик.ЗаписатьНачалоЭлемента("Субконто");
				Компоновщик.ЗаписатьНачалоЭлемента("БанковскийСчет");
				
				НаименованиеБанковскогоСчета = СтрокаПериода.БанковскийСчет.Наименование;
				Если НЕ ЗначениеЗаполнено(НаименованиеБанковскогоСчета) Тогда
					НаименованиеБанковскогоСчета = "не указан";
				КонецЕсли;
				
				ВывестиАтрибут(Компоновщик, "Наименование", НаименованиеБанковскогоСчета, "Т,100");
				ВывестиНеобязательныйАтрибут(Компоновщик, "НомерСчета", СтрокаПериода.БанковскийСчет.НомерСчета, "Т,20");
				Если ЗначениеЗаполнено(СтрокаПериода.БанковскийСчет.Банк) Тогда
					ВывестиНеобязательныйАтрибут(Компоновщик, "НаименованиеБанка", СтрокаПериода.БанковскийСчет.Банк.Наименование, "Т,100");
					ВывестиНеобязательныйАтрибут(Компоновщик, "БИК", СтрокаПериода.БанковскийСчет.Банк.Код, "Т,9");
				КонецЕсли;
				
				Компоновщик.ЗаписатьКонецЭлемента();
				Компоновщик.ЗаписатьКонецЭлемента();
				
				Компоновщик.ЗаписатьКонецЭлемента();
				
				// Корреспонденция по счетам.
				Для Каждого СтрокаКорреспонденции Из СтрокаПериода.Строки Цикл
					Если ЗначениеЗаполнено(СтрокаКорреспонденции.КорСчет) Тогда
						Компоновщик.ЗаписатьНачалоЭлемента("Корреспонденция");
						
						СведенияКоррСчета = ОтчетностьВБанкиСлужебный.ОписаниеСчетаДляВыгрузки(СтрокаКорреспонденции.КорСчет);
						
						ВывестиАтрибут(Компоновщик, "КодСчета", СведенияКоррСчета.КодСчета, "Т,8");
						ВывестиАтрибут(Компоновщик, "НаименованиеСчета", СведенияКоррСчета.НаименованиеСчета, "Т,120");
						ВывестиАтрибут(Компоновщик, "ТипСчета", СведенияКоррСчета.ТипСчета, "Т,2");
						
						ВывестиНеобязательныйАтрибут(Компоновщик, "КодСчетаР", СведенияКоррСчета.КодСчетаР, "Т,8");
						ВывестиНеобязательныйАтрибут(Компоновщик, "ТипСчетаР", СведенияКоррСчета.ТипСчетаР, "Т,2");
						ВывестиНеобязательныйАтрибут(Компоновщик, "КодСчетаРР", СведенияКоррСчета.КодСчетаРР, "Т,8");
						ВывестиНеобязательныйАтрибут(Компоновщик, "ТипСчетаРР", СведенияКоррСчета.ТипСчетаРР, "Т,2");
						
						ВывестиАтрибут(Компоновщик, "ДО",  ЗначениеПриведенноеКЕдиницеИзмерения(СтрокаКорреспонденции.ДО,  ФорматнаяСтрока), "Ч,15,3");
						ВывестиАтрибут(Компоновщик, "КО",  ЗначениеПриведенноеКЕдиницеИзмерения(СтрокаКорреспонденции.КО,  ФорматнаяСтрока), "Ч,15,3");
						
						Компоновщик.ЗаписатьКонецЭлемента();
						
					КонецЕсли;
					
				КонецЦикла;
				
				Компоновщик.ЗаписатьКонецЭлемента();
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Компоновщик.ЗаписатьКонецЭлемента();
	
КонецПроцедуры

&НаСервере
Процедура ВывестиУзел_ОСВ(Компоновщик, ПараметрыВыгрузки, СтруктураВыгрузки)
	
	ИмяРаздела = "ОСВ";
	
	Если НЕ РазделВключенВОтчет(ИмяРаздела, ПараметрыВыгрузки.ДеревоНастройкиСтраниц) Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеРаздела = ПолучитьИзВременногоХранилища(СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяРаздела]);
	
	Для Каждого СтраницаРаздела Из ДанныеРаздела.Строки Цикл
		ДанныеСтраницы = СтраницаРаздела.Данные;
		
		СтраницаВыгружается = СтраницаРаздела.ДополнительныеДанные <> Неопределено;
		
		Если СтраницаВыгружается Тогда
			ВывестиСтраницуВУзел_ОСВ(Компоновщик, СтраницаРаздела);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиСтраницуВУзел_ОСВ(Компоновщик, СтраницаРаздела)
	
	НомерМесяца = Месяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	КодМесяца = КодМесяца(НомерМесяца);
	ОтчетГод = ПредставлениеГода(Год(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета));
	ОКЕИ = "383";
	
	Компоновщик.ЗаписатьНачалоЭлемента("ОСВ");
	
	ВывестиАтрибут(Компоновщик, "Период", КодМесяца);
	ВывестиАтрибут(Компоновщик, "ОтчетГод", ОтчетГод);
	ВывестиАтрибут(Компоновщик, "ОКЕИ", ОКЕИ);
	
	СтрокиОСВ = СтраницаРаздела.ДополнительныеДанные.Данные.Строки;
	
	Для Каждого СтрокаОСВ Из СтрокиОСВ Цикл
		Для Каждого СтрокаСчета Из СтрокаОСВ.Строки Цикл
			Компоновщик.ЗаписатьНачалоЭлемента("Счет");
			
			СведенияСчетаСтроки = ОтчетностьВБанкиСлужебный.ОписаниеСчетаДляВыгрузки(СтрокаСчета.Счет);
			
			ВывестиАтрибут(Компоновщик, "КодСчета", СведенияСчетаСтроки.КодСчета, "Т,8");
			ВывестиАтрибут(Компоновщик, "НаименованиеСчета", СведенияСчетаСтроки.НаименованиеСчета, "Т,120");
			ВывестиАтрибут(Компоновщик, "ТипСчета", СведенияСчетаСтроки.ТипСчета, "Т,2");
			
			ВывестиНеобязательныйАтрибут(Компоновщик, "КодСчетаР", СведенияСчетаСтроки.КодСчетаР, "Т,8");
			ВывестиНеобязательныйАтрибут(Компоновщик, "ТипСчетаР", СведенияСчетаСтроки.ТипСчетаР, "Т,2");
			ВывестиНеобязательныйАтрибут(Компоновщик, "КодСчетаРР", СведенияСчетаСтроки.КодСчетаРР, "Т,8");
			ВывестиНеобязательныйАтрибут(Компоновщик, "ТипСчетаРР", СведенияСчетаСтроки.ТипСчетаРР, "Т,2");
			
			ВывестиАтрибут(Компоновщик, "СНД", СтрокаСчета.СНД, "Ч,15,2");
			ВывестиАтрибут(Компоновщик, "СНК", СтрокаСчета.СНК, "Ч,15,2");
			ВывестиАтрибут(Компоновщик, "ДО",  СтрокаСчета.ДО,  "Ч,15,2");
			ВывестиАтрибут(Компоновщик, "КО",  СтрокаСчета.КО,  "Ч,15,2");
			ВывестиАтрибут(Компоновщик, "СКД", СтрокаСчета.СКД, "Ч,15,2");
			ВывестиАтрибут(Компоновщик, "СКК", СтрокаСчета.СКК, "Ч,15,2");
			
			Компоновщик.ЗаписатьКонецЭлемента();
			
		КонецЦикла;
		
	КонецЦикла;
	
	Компоновщик.ЗаписатьКонецЭлемента();
	
КонецПроцедуры

&НаСервере
Процедура ВывестиУзел_ОСВПоСчетам(Компоновщик, ПараметрыВыгрузки, СтруктураВыгрузки)
	
	ИмяРаздела = "ОСВПоСчету";
	
	Если НЕ РазделВключенВОтчет(ИмяРаздела, ПараметрыВыгрузки.ДеревоНастройкиСтраниц) Тогда
		Возврат;
	КонецЕсли;
	
	НомерМесяца = Месяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	ГодОтчета = Год(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	
	ДанныеРаздела = ПолучитьИзВременногоХранилища(СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяРаздела]);
	
	ВыгружаемыеСчета = Новый Массив;
	
	Для Каждого СтраницаРаздела Из ДанныеРаздела.Строки Цикл
		ПараметрыСтраницы = СтраницаРаздела.Параметры;
		
		Если НЕ СчетОтмеченВСписке(ПараметрыСтраницы.Счет, "СписокСтраниц" + ИмяРаздела) Тогда
			Продолжить;
		КонецЕсли;
		
		СегментыСтраницы = ВыборкаСегментовОтчетаПоСчету(ИмяРаздела, ПараметрыСтраницы.Счет);
		Если СегментыСтраницы.Количество() > 0 Тогда
			ВыгружаемыеСчета.Добавить(ПараметрыСтраницы.Счет);
		КонецЕсли;
		
	КонецЦикла;
	
	Если ВыгружаемыеСчета.Количество() > 0 Тогда
		КодМесяца = КодМесяца(НомерМесяца);
		ОтчетГод  = ПредставлениеГода(ГодОтчета);
		ОКЕИ      = "383";
		
		Компоновщик.ЗаписатьНачалоЭлемента("ОСВПоСчетам");
		
		ВывестиАтрибут(Компоновщик, "Период",   КодМесяца);
		ВывестиАтрибут(Компоновщик, "ОтчетГод", ОтчетГод);
		ВывестиАтрибут(Компоновщик, "ОКЕИ",     ОКЕИ);
		
		Для Каждого ВыгружаемыйСчет Из ВыгружаемыеСчета Цикл
			ВывестиСтраницуВУзел_ОСВПоСчетам_ОСВПоСчету(Компоновщик, ВыгружаемыйСчет);
		КонецЦикла;
		
		Компоновщик.ЗаписатьКонецЭлемента();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиСтраницуВУзел_ОСВПоСчетам_ОСВПоСчету(Компоновщик, ВыгружаемыйСчет)
	
	ИмяРаздела = "ОСВПоСчету";
	
	Компоновщик.ЗаписатьНачалоЭлемента("ОСВПоСчету");
	
	ВывестиАтрибут(Компоновщик, "КодСчета", ВыгружаемыйСчет.Код);
	ВывестиАтрибут(Компоновщик, "НаименованиеСчета", ВыгружаемыйСчет.Наименование);
	
	СегментыСтраницы = ВыборкаСегментовОтчетаПоСчету(ИмяРаздела, ВыгружаемыйСчет);
	ВсегоСегментов = СегментыСтраницы.Количество();
	
	Для Инд = 1 По ВсегоСегментов Цикл
		ВидДополнительногоФайла = ИмяРаздела + "." + ВыгружаемыйСчет.УникальныйИдентификатор() + "." + СтрокаЧГ0(Инд);
		ДанныеСегмента = ДанныеРегистраДополнительныхФайлов(ВидДополнительногоФайла);
		
		Для Каждого Выборка Из ДанныеСегмента Цикл
			Компоновщик.ЗаписатьНачалоЭлемента("СтрокаОСВ");
			
			Компоновщик.ЗаписатьНачалоЭлемента("Счет");
			
			СведенияСчетаСтроки = ОтчетностьВБанкиСлужебный.ОписаниеСчетаДляВыгрузки(Выборка.Счет);
			
			ВывестиАтрибут(Компоновщик, "КодСчета", СведенияСчетаСтроки.КодСчета, "Т,8");
			ВывестиАтрибут(Компоновщик, "НаименованиеСчета", СведенияСчетаСтроки.НаименованиеСчета, "Т,120");
			ВывестиАтрибут(Компоновщик, "ТипСчета", СведенияСчетаСтроки.ТипСчета, "Т,2");
			
			ВывестиНеобязательныйАтрибут(Компоновщик, "КодСчетаР", СведенияСчетаСтроки.КодСчетаР, "Т,8");
			ВывестиНеобязательныйАтрибут(Компоновщик, "ТипСчетаР", СведенияСчетаСтроки.ТипСчетаР, "Т,2");
			ВывестиНеобязательныйАтрибут(Компоновщик, "КодСчетаРР", СведенияСчетаСтроки.КодСчетаРР, "Т,8");
			ВывестиНеобязательныйАтрибут(Компоновщик, "ТипСчетаРР", СведенияСчетаСтроки.ТипСчетаРР, "Т,2");
			
			ВывестиАтрибут(Компоновщик, "СНД", Выборка.СНД, "Ч,15,2");
			ВывестиАтрибут(Компоновщик, "СНК", Выборка.СНК, "Ч,15,2");
			ВывестиАтрибут(Компоновщик, "ДО",  Выборка.ДО,  "Ч,15,2");
			ВывестиАтрибут(Компоновщик, "КО",  Выборка.КО,  "Ч,15,2");
			ВывестиАтрибут(Компоновщик, "СКД", Выборка.СКД, "Ч,15,2");
			ВывестиАтрибут(Компоновщик, "СКК", Выборка.СКК, "Ч,15,2");
			
			// Субконто 1.
			Если ЗначениеЗаполнено(Выборка.Субконто1) Тогда
				Компоновщик.ЗаписатьНачалоЭлемента("Субконто1");
				
				ПредставлениеСубконто = ПредставлениеСубконтоИННКПП(Выборка, 1);
				
				ВывестиАтрибут(Компоновщик, "Представление", ПредставлениеСубконто, "Т,1000");
				ВывестиАтрибут(Компоновщик, "ТипСубконто", Строка(ТипЗнч(Выборка.Субконто1)), "Т,100");
				ВывестиНеобязательныйАтрибут(Компоновщик, "ИНН", ИННКонтрагентаПоСубконто(Выборка, 1), "Т,12");
				
				Компоновщик.ЗаписатьКонецЭлемента();
				
			КонецЕсли;
			
			// Субконто 2.
			Если ЗначениеЗаполнено(Выборка.Субконто2) Тогда
				Компоновщик.ЗаписатьНачалоЭлемента("Субконто2");
				
				ПредставлениеСубконто = ПредставлениеСубконтоИННКПП(Выборка, 2);
				
				ВывестиАтрибут(Компоновщик, "Представление", ПредставлениеСубконто, "Т,1000");
				ВывестиАтрибут(Компоновщик, "ТипСубконто", Строка(ТипЗнч(Выборка.Субконто2)), "Т,100");
				ВывестиНеобязательныйАтрибут(Компоновщик, "ИНН", ИННКонтрагентаПоСубконто(Выборка, 2), "Т,12");
				
				Компоновщик.ЗаписатьКонецЭлемента();
				
			КонецЕсли;
			
			Компоновщик.ЗаписатьКонецЭлемента();
			
			Компоновщик.ЗаписатьКонецЭлемента();
			
		КонецЦикла;
		
	КонецЦикла;
	
	Компоновщик.ЗаписатьКонецЭлемента();
	
КонецПроцедуры

&НаСервере
Процедура ВывестиУзел_АнализСчетов(Компоновщик, ПараметрыВыгрузки, СтруктураВыгрузки)
	
	ИмяРаздела = "АнализСчета";
	
	Если НЕ РазделВключенВОтчет(ИмяРаздела, ПараметрыВыгрузки.ДеревоНастройкиСтраниц) Тогда
		Возврат;
	КонецЕсли;
	
	НомерМесяца = Месяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	ГодОтчета = Год(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	
	ДанныеРаздела = ПолучитьИзВременногоХранилища(СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяРаздела]);
	
	ВыгружаемыеСчета = Новый Массив;
	
	Для Каждого СтраницаРаздела Из ДанныеРаздела.Строки Цикл
		ПараметрыСтраницы = СтраницаРаздела.Параметры;
		
		Если НЕ СчетОтмеченВСписке(ПараметрыСтраницы.Счет, "СписокСтраниц" + ИмяРаздела) Тогда
			Продолжить;
		КонецЕсли;
		
		СегментыСтраницы = ВыборкаСегментовОтчетаПоСчету(ИмяРаздела, ПараметрыСтраницы.Счет);
		Если СегментыСтраницы.Количество() > 0 Тогда
			ВыгружаемыеСчета.Добавить(ПараметрыСтраницы.Счет);
		КонецЕсли;
		
	КонецЦикла;
	
	Если ВыгружаемыеСчета.Количество() > 0 Тогда
		КодМесяца = КодМесяца(НомерМесяца);
		ОтчетГод  = ПредставлениеГода(ГодОтчета);
		ОКЕИ      = "383";
		
		Компоновщик.ЗаписатьНачалоЭлемента("АнализСчетов");
		
		ВывестиАтрибут(Компоновщик, "Период",   КодМесяца);
		ВывестиАтрибут(Компоновщик, "ОтчетГод", ОтчетГод);
		ВывестиАтрибут(Компоновщик, "ОКЕИ",     ОКЕИ);
		
		Для Каждого ВыгружаемыйСчет Из ВыгружаемыеСчета Цикл
			ВывестиСтраницуВУзел_АнализСчетов_АнализСчета(Компоновщик, ВыгружаемыйСчет);
		КонецЦикла;
		
		Компоновщик.ЗаписатьКонецЭлемента();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиСтраницуВУзел_АнализСчетов_АнализСчета(Компоновщик, ВыгружаемыйСчет)
	
	ИмяРаздела = "АнализСчета";
	
	Компоновщик.ЗаписатьНачалоЭлемента("АнализСчета");
	
	ВывестиАтрибут(Компоновщик, "КодСчета", ВыгружаемыйСчет.Код);
	ВывестиАтрибут(Компоновщик, "НаименованиеСчета", ВыгружаемыйСчет.Наименование);
	
	КодСчета = СокрЛП(СтрЗаменить(ВыгружаемыйСчет.Код, ".", ""));
	СегментыСтраницы = ВыборкаСегментовОтчетаПоСчету(ИмяРаздела, ВыгружаемыйСчет);
	ВсегоСегментов = СегментыСтраницы.Количество();
	
	Для Инд = 1 По ВсегоСегментов Цикл
		ВидДополнительногоФайла = ИмяРаздела + "." + ВыгружаемыйСчет.УникальныйИдентификатор() + "." + СтрокаЧГ0(Инд);
		ДанныеСегмента = ДанныеРегистраДополнительныхФайлов(ВидДополнительногоФайла);
		
		ЗакрыватьТэгСтрокаАнализа = Ложь;
		ОткрытТэгСтрокаАнализа = Ложь;
		
		Для Каждого Выборка Из ДанныеСегмента Цикл
			Если Выборка.Уровень = 1 Тогда
				Если ЗакрыватьТэгСтрокаАнализа Тогда
					Компоновщик.ЗаписатьКонецЭлемента(); // "СтрокаАнализа"
				КонецЕсли;
				Компоновщик.ЗаписатьНачалоЭлемента("СтрокаАнализа");
				ОткрытТэгСтрокаАнализа = Истина;
				
				Компоновщик.ЗаписатьНачалоЭлемента("Счет");
				
				СведенияСчетаСтроки = ОтчетностьВБанкиСлужебный.ОписаниеСчетаДляВыгрузки(Выборка.Счет);
				
				ВывестиАтрибут(Компоновщик, "КодСчета", СведенияСчетаСтроки.КодСчета, "Т,8");
				ВывестиАтрибут(Компоновщик, "НаименованиеСчета", СведенияСчетаСтроки.НаименованиеСчета, "Т,120");
				ВывестиАтрибут(Компоновщик, "ТипСчета", СведенияСчетаСтроки.ТипСчета, "Т,2");
				
				ВывестиНеобязательныйАтрибут(Компоновщик, "КодСчетаР", СведенияСчетаСтроки.КодСчетаР, "Т,8");
				ВывестиНеобязательныйАтрибут(Компоновщик, "ТипСчетаР", СведенияСчетаСтроки.ТипСчетаР, "Т,2");
				ВывестиНеобязательныйАтрибут(Компоновщик, "КодСчетаРР", СведенияСчетаСтроки.КодСчетаРР, "Т,8");
				ВывестиНеобязательныйАтрибут(Компоновщик, "ТипСчетаРР", СведенияСчетаСтроки.ТипСчетаРР, "Т,2");
				
				ВывестиАтрибут(Компоновщик, "СНД", Выборка.СНД, "Ч,15,2");
				ВывестиАтрибут(Компоновщик, "СНК", Выборка.СНК, "Ч,15,2");
				ВывестиАтрибут(Компоновщик, "ДО",  Выборка.ДО,  "Ч,15,2");
				ВывестиАтрибут(Компоновщик, "КО",  Выборка.КО,  "Ч,15,2");
				ВывестиАтрибут(Компоновщик, "СКД", Выборка.СКД, "Ч,15,2");
				ВывестиАтрибут(Компоновщик, "СКК", Выборка.СКК, "Ч,15,2");
				
				// Субконто 1.
				Если ЗначениеЗаполнено(Выборка.Субконто1) Тогда
					Компоновщик.ЗаписатьНачалоЭлемента("Субконто1");
					
					ВывестиАтрибут(Компоновщик, "Представление", Выборка.ПредставлениеСубконто1, "Т,1000");
					ВывестиАтрибут(Компоновщик, "ТипСубконто", Строка(ТипЗнч(Выборка.Субконто1)), "Т,100");
					ВывестиНеобязательныйАтрибут(Компоновщик, "ИНН", ИННКонтрагентаПоСубконто(Выборка, 1), "Т,12");
					
					Компоновщик.ЗаписатьКонецЭлемента();
					
				КонецЕсли;
				
				// Субконто 2.
				Если ЗначениеЗаполнено(Выборка.Субконто2) Тогда
					Компоновщик.ЗаписатьНачалоЭлемента("Субконто2");
					
					ВывестиАтрибут(Компоновщик, "Представление", Выборка.ПредставлениеСубконто2, "Т,1000");
					ВывестиАтрибут(Компоновщик, "ТипСубконто", Строка(ТипЗнч(Выборка.Субконто2)), "Т,100");
					ВывестиНеобязательныйАтрибут(Компоновщик, "ИНН", ИННКонтрагентаПоСубконто(Выборка, 2), "Т,12");
					
					Компоновщик.ЗаписатьКонецЭлемента();
					
				КонецЕсли;
				
				Компоновщик.ЗаписатьКонецЭлемента(); // "Счет"
				
			КонецЕсли;
			
			Если Выборка.Уровень = 2 Тогда
				Компоновщик.ЗаписатьНачалоЭлемента("Корреспонденция");
				
				СведенияКоррСчета = ОтчетностьВБанкиСлужебный.ОписаниеСчетаДляВыгрузки(Выборка.КорСчет);
				
				ВывестиАтрибут(Компоновщик, "КодСчета", СведенияКоррСчета.КодСчета, "Т,8");
				ВывестиАтрибут(Компоновщик, "НаименованиеСчета", СведенияКоррСчета.НаименованиеСчета, "Т,120");
				ВывестиАтрибут(Компоновщик, "ТипСчета", СведенияКоррСчета.ТипСчета, "Т,2");
				
				ВывестиНеобязательныйАтрибут(Компоновщик, "КодСчетаР", СведенияКоррСчета.КодСчетаР, "Т,8");
				ВывестиНеобязательныйАтрибут(Компоновщик, "ТипСчетаР", СведенияКоррСчета.ТипСчетаР, "Т,2");
				ВывестиНеобязательныйАтрибут(Компоновщик, "КодСчетаРР", СведенияКоррСчета.КодСчетаРР, "Т,8");
				ВывестиНеобязательныйАтрибут(Компоновщик, "ТипСчетаРР", СведенияКоррСчета.ТипСчетаРР, "Т,2");
				
				ВывестиАтрибут(Компоновщик, "ДО", Выборка.ДО, "Ч,15,2");
				ВывестиАтрибут(Компоновщик, "КО", Выборка.КО, "Ч,15,2");
				
				Компоновщик.ЗаписатьКонецЭлемента();
				
			КонецЕсли;
			
			ЗакрыватьТэгСтрокаАнализа = Истина;
			
		КонецЦикла;
		
		Если ОткрытТэгСтрокаАнализа Тогда
			Компоновщик.ЗаписатьКонецЭлемента(); // "СтрокаАнализа"
		КонецЕсли;
		
	КонецЦикла;
	
	Компоновщик.ЗаписатьКонецЭлемента();
	
КонецПроцедуры

&НаСервере
Процедура ВывестиУзел_БухОтчНО(Компоновщик, ПараметрыВыгрузки)
	
	ИмяРаздела = "ОтчетыФНС";
	
	Если НЕ РазделВключенВОтчет(ИмяРаздела, ПараметрыВыгрузки.ДеревоНастройкиСтраниц) Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтруктураРеквизитовФормы.ОтчетыФНС_БухотчетностьПакет) Тогда
		Компоновщик.ЗаписатьНачалоЭлемента("БухОтчНО");
		
		ПредставлениеПакета = Base64Строка(СтруктураРеквизитовФормы.ОтчетыФНС_БухотчетностьПакет);
		Компоновщик.ЗаписатьТекст(ПредставлениеПакета);
		
		Компоновщик.ЗаписатьКонецЭлемента();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиУзел_ДеклПрибыль(Компоновщик, ПараметрыВыгрузки)
	
	ИмяРаздела = "ОтчетыФНС";
	
	Если НЕ РазделВключенВОтчет(ИмяРаздела, ПараметрыВыгрузки.ДеревоНастройкиСтраниц) Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтруктураРеквизитовФормы.ОтчетыФНС_ПрибыльПакет) Тогда
		Компоновщик.ЗаписатьНачалоЭлемента("ДеклПрибыль");
		
		ПредставлениеПакета = Base64Строка(СтруктураРеквизитовФормы.ОтчетыФНС_ПрибыльПакет);
		Компоновщик.ЗаписатьТекст(ПредставлениеПакета);
		
		Компоновщик.ЗаписатьКонецЭлемента();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиУзел_ДеклНДС(Компоновщик, ПараметрыВыгрузки)
	
	ИмяРаздела = "ОтчетыФНС";
	
	Если НЕ РазделВключенВОтчет(ИмяРаздела, ПараметрыВыгрузки.ДеревоНастройкиСтраниц) Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтруктураРеквизитовФормы.ОтчетыФНС_НДСПакет) Тогда
		Компоновщик.ЗаписатьНачалоЭлемента("ДеклНДС");
		
		ПредставлениеПакета = Base64Строка(СтруктураРеквизитовФормы.ОтчетыФНС_НДСПакет);
		Компоновщик.ЗаписатьТекст(ПредставлениеПакета);
		
		Компоновщик.ЗаписатьКонецЭлемента();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиУзел_СпрИспОбУплНал(Компоновщик, ПараметрыВыгрузки)
	
	ИмяРаздела = "ОтчетыФНС";
	
	Если НЕ РазделВключенВОтчет(ИмяРаздела, ПараметрыВыгрузки.ДеревоНастройкиСтраниц) Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтруктураРеквизитовФормы.ОтчетыФНС_СправкаИспОбУпл) Тогда
		Компоновщик.ЗаписатьНачалоЭлемента("СпрИспОбУплНал");
		
		ПредставлениеПакета = Base64Строка(СтруктураРеквизитовФормы.ОтчетыФНС_СправкаИспОбУплПакет);
		Компоновщик.ЗаписатьТекст(ПредставлениеПакета);
		
		Компоновщик.ЗаписатьКонецЭлемента();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиУзел_ОперБанкСч(Компоновщик, ПараметрыВыгрузки)
	
	ИмяРаздела = "ОперацииПоБанковскимСчетам";
	
	Если НЕ РазделВключенВОтчет(ИмяРаздела, ПараметрыВыгрузки.ДеревоНастройкиСтраниц) Тогда
		Возврат;
	КонецЕсли;
	
	НомерМесяца = Месяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	ГодОтчета = Год(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	
	КодМесяца = КодМесяца(НомерМесяца);
	ОтчетГод  = ПредставлениеГода(ГодОтчета);
	ОКЕИ      = "383";
	
	Компоновщик.ЗаписатьНачалоЭлемента("ОперБанкСч");
	
	ВывестиАтрибут(Компоновщик, "Период",   КодМесяца);
	ВывестиАтрибут(Компоновщик, "ОтчетГод", ОтчетГод);
	ВывестиАтрибут(Компоновщик, "ОКЕИ",     ОКЕИ);
	
	ВывестиСтраницуВУзел_ОперБанкСч_БухгалтерскиеСчета(Компоновщик);
	
	ВывестиУзел_ОперБанкСч_СчетУчета(Компоновщик, ПараметрыВыгрузки, "Операции51");
	ВывестиУзел_ОперБанкСч_СчетУчета(Компоновщик, ПараметрыВыгрузки, "Операции52");
	ВывестиУзел_ОперБанкСч_СчетУчета(Компоновщик, ПараметрыВыгрузки, "Операции55");
	
	Компоновщик.ЗаписатьКонецЭлемента();
	
КонецПроцедуры

&НаСервере
Процедура ВывестиУзел_ПрочДохРасх(Компоновщик, ПараметрыВыгрузки)
	
	ИмяРаздела = "ДоходыРасходы";
	
	Если НЕ РазделВключенВОтчет(ИмяРаздела, ПараметрыВыгрузки.ДеревоНастройкиСтраниц) Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеРаздела = ПолучитьИзВременногоХранилища(СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяРаздела]);
	
	Для Каждого СтраницаРаздела Из ДанныеРаздела.Строки Цикл
		ДанныеСтраницы = СтраницаРаздела.Данные;
		
		СтраницаВыгружается = СтраницаРаздела.ДополнительныеДанные <> Неопределено;
		
		Если СтраницаВыгружается Тогда
			ВывестиСтраницуВУзел_ПрочДохРасх(Компоновщик, СтраницаРаздела);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиСтраницуВУзел_ПрочДохРасх(Компоновщик, СтраницаРаздела)
	
	НомерКвартала = Месяц(КонецКвартала(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета)) / 3;
	КодКвартала = КодКвартала(НомерКвартала);
	ОтчетГод = ПредставлениеГода(Год(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета));
	Делитель = ДелительПоЕдиницеИзмерения(СтруктураРеквизитовФормы.ЕдиницаИзмерения);
	ОКЕИ = КодЕдиницыИзмерения(Делитель);
	
	Компоновщик.ЗаписатьНачалоЭлемента("ПрочДохРасх");
	
	ВывестиАтрибут(Компоновщик, "Период",   КодКвартала);
	ВывестиАтрибут(Компоновщик, "ОтчетГод", ОтчетГод);
	ВывестиАтрибут(Компоновщик, "ОКЕИ",     ОКЕИ);
	
	ДанныеУзла = СтраницаРаздела.ДополнительныеДанные.Доходы;
	ВывестиУниверсальныйУзел_ПрочДохРасх_ДоходыРасходы(Компоновщик, ДанныеУзла, "Доходы");
	
	ДанныеУзла = СтраницаРаздела.ДополнительныеДанные.Расходы;
	ВывестиУниверсальныйУзел_ПрочДохРасх_ДоходыРасходы(Компоновщик, ДанныеУзла, "Расходы");
	
	Компоновщик.ЗаписатьКонецЭлемента(); // ПрочДохРасх
	
КонецПроцедуры

&НаСервере
Процедура ВывестиУниверсальныйУзел_ПрочДохРасх_ДоходыРасходы(Компоновщик, ДанныеУзла, ИмяУзла)
	
	Делитель = ДелительПоЕдиницеИзмерения(СтруктураРеквизитовФормы.ЕдиницаИзмерения);
	ФорматнаяСтрока = ФорматнаяСтрокаПоЕдиницеИзмерения(Делитель);
	
	Компоновщик.ЗаписатьНачалоЭлемента(ИмяУзла);
	
	СуммаИтоги = ДанныеУзла.Итог("СуммаПоСтатье");
	СуммаИтоги = Формат(СуммаИтоги, ФорматнаяСтрока);
	
	ВывестиАтрибут(Компоновщик, "Итого", СуммаИтоги);
	
	Для Каждого Статья Из ДанныеУзла Цикл
		НаименованиеСтатьи = Статья.НаименованиеСтатьи;
		СуммаПоСтатье = Статья.СуммаПоСтатье;
		
		Если СуммаПоСтатье = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(НаименованиеСтатьи) Тогда
			НаименованиеСтатьи = "<...>";
		КонецЕсли;
		СуммаПоСтатье = Формат(СуммаПоСтатье, ФорматнаяСтрока);
		
		Компоновщик.ЗаписатьНачалоЭлемента("ПоСтатье");
		
		ВывестиАтрибут(Компоновщик, "Наим", НаименованиеСтатьи, "Т,150");
		ВывестиАтрибут(Компоновщик, "Сумма", СуммаПоСтатье);
		
		Компоновщик.ЗаписатьКонецЭлемента(); // ПоСтатье
		
	КонецЦикла;
	
	Компоновщик.ЗаписатьКонецЭлемента(); // ИмяУзла
	
КонецПроцедуры

&НаСервере
Процедура ВывестиУзел_РасшФинВлож(Компоновщик, ПараметрыВыгрузки, СтруктураВыгрузки)
	
	ИмяРазделаКраткосрочная = "ФинансовыеВложенияКраткосрочные";
	ИмяРазделаДолгосрочная  = "ФинансовыеВложенияДолгосрочные";
	
	Если НЕ РазделВключенВОтчет(ИмяРазделаКраткосрочная, ПараметрыВыгрузки.ДеревоНастройкиСтраниц)
	   И НЕ РазделВключенВОтчет(ИмяРазделаДолгосрочная, ПараметрыВыгрузки.ДеревоНастройкиСтраниц) Тогда
		Возврат;
	КонецЕсли;
	
	ИмяКорневогоРаздела = мСтруктураМногоуровневыхРазделов[ИмяРазделаКраткосрочная].КорневойРаздел;
	ДанныеРаздела = ПолучитьИзВременногоХранилища(СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяКорневогоРаздела]);
	
	НомерКвартала = Месяц(КонецКвартала(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета)) / 3;
	КодКвартала = КодКвартала(НомерКвартала);
	ОтчетГод = ПредставлениеГода(Год(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета));
	
	ОКЕИ = "384";
	
	Компоновщик.ЗаписатьНачалоЭлемента("РасшФинВлож");
	
	ВывестиАтрибут(Компоновщик, "Период", КодКвартала);
	ВывестиАтрибут(Компоновщик, "ОтчетГод", ОтчетГод);
	ВывестиАтрибут(Компоновщик, "ОКЕИ", ОКЕИ);
	
	Если РазделВключенВОтчет(ИмяРазделаКраткосрочная, ПараметрыВыгрузки.ДеревоНастройкиСтраниц) Тогда
		СтраницаРаздела = ДанныеРаздела.Строки[0].Строки[0].Строки[0];
		
		Если ДействуетСВерсииФормата("5.10.01") И СтраницаРаздела.Параметры.СтатусЗаполнения = "пустой" Тогда
			ВывестиСтраницуВУзел_РасшФинВлож_ОтчетПустой(Компоновщик, СтраницаРаздела, "П00012", "ФинВложКср");
		Иначе
			ВывестиСтраницуВУзел_РасшФинВлож(Компоновщик, СтраницаРаздела, "П00012", "ФинВложКср");
		КонецЕсли;
		
	КонецЕсли;
	
	Если РазделВключенВОтчет(ИмяРазделаДолгосрочная, ПараметрыВыгрузки.ДеревоНастройкиСтраниц) Тогда
		СтраницаРаздела = ДанныеРаздела.Строки[0].Строки[1].Строки[0];
		
		Если ДействуетСВерсииФормата("5.10.01") И СтраницаРаздела.Параметры.СтатусЗаполнения = "пустой" Тогда
			ВывестиСтраницуВУзел_РасшФинВлож_ОтчетПустой(Компоновщик, СтраницаРаздела, "П00013", "ФинВложДср");
		Иначе
			ВывестиСтраницуВУзел_РасшФинВлож(Компоновщик, СтраницаРаздела, "П00013", "ФинВложДср");
		КонецЕсли;
		
	КонецЕсли;
	
	Компоновщик.ЗаписатьКонецЭлемента(); // РасшФинВлож
	
КонецПроцедуры

&НаСервере
Процедура ВывестиСтраницуВУзел_РасшФинВлож(Компоновщик, СтраницаРаздела, ПрефиксРаздела, ИмяУзлаСтраницы)
	
	ФорматнаяСтрока = "ЧДЦ=3; ЧС=3; ЧН=; ЧГ=0";
	ФорматнаяСтрокаВал = "ЧДЦ=3; ЧС=3; ЧН=; ЧГ=0";
	
	Компоновщик.ЗаписатьНачалоЭлемента(ИмяУзлаСтраницы);
	
	ИтогоСтоимВл  = ЗначениеПриведенноеКЕдиницеИзмерения(СтраницаРаздела.Данные[ПрефиксРаздела + "0000101"], ФорматнаяСтрока);
	ИтогоПросрЗад = ЗначениеПриведенноеКЕдиницеИзмерения(СтраницаРаздела.Данные[ПрефиксРаздела + "0000102"], ФорматнаяСтрока);
	
	ВывестиАтрибут(Компоновщик, "ИтогоСтоимВл", ИтогоСтоимВл, "Ч,15,3");
	ВывестиНеобязательныйАтрибут(Компоновщик, "ИтогоПросрЗад", ИтогоПросрЗад, "Ч,15,3");
	
	МногострочнаяЧасть = СтраницаРаздела.ДанныеМногострочныхЧастей[ПрефиксРаздела + "М1"];
	
	Для Каждого СтрокаМСЧ Из МногострочнаяЧасть.Строки Цикл
		ДанныеСтроки = СтрокаМСЧ.Данные;
		
		Если НЕ ЗначениеЗаполнено(ДанныеСтроки[ПрефиксРаздела + "М100101"]) Тогда
			Продолжить;
		КонецЕсли;
		
		Компоновщик.ЗаписатьНачалоЭлемента("Вложение");
		
		ВывестиАтрибут(Компоновщик, "Вид", ДанныеСтроки[ПрефиксРаздела + "М100103"], "Т,255");
		ВывестиАтрибут(Компоновщик, "ДатаПриобр", ДанныеСтроки[ПрефиксРаздела + "М100104"], "Д");
		ВывестиНеобязательныйАтрибут(Компоновщик, "ДатаВыб", ДанныеСтроки[ПрефиксРаздела + "М100105"], "Д");
		ВывестиАтрибут(Компоновщик, "СтоимВл", ЗначениеПриведенноеКЕдиницеИзмерения(ДанныеСтроки[ПрефиксРаздела + "М100106"], ФорматнаяСтрока), "Ч,15,3");
		ВывестиНеобязательныйАтрибут(Компоновщик, "КодВал", ДанныеСтроки[ПрефиксРаздела + "М100107"], "Т,3");
		
		СтоимВлВал = ЗначениеПриведенноеКЕдиницеИзмерения(ДанныеСтроки[ПрефиксРаздела + "М100108"], ФорматнаяСтрокаВал);
		ВывестиНеобязательныйАтрибут(Компоновщик, "СтоимВлВал", СтоимВлВал, "Ч,15,3");
		
		Компоновщик.ЗаписатьНачалоЭлемента("Контрагент");
		
		ВывестиАтрибут(Компоновщик, "Наименование", ДанныеСтроки[ПрефиксРаздела + "М100101"], "Т,100");
		ВывестиНеобязательныйАтрибут(Компоновщик, "ИНН", ДанныеСтроки[ПрефиксРаздела + "М100102"], "Т,12");
		
		Компоновщик.ЗаписатьКонецЭлемента(); // Контрагент
		
		ДатаВозникновенияЗадолженности = ДанныеСтроки[ПрефиксРаздела + "М100109"];
		
		Если ЗначениеЗаполнено(ДатаВозникновенияЗадолженности) Тогда
			Компоновщик.ЗаписатьНачалоЭлемента("ПросрЗад");
			
			ВывестиАтрибут(Компоновщик, "ДатаВозн", ДатаВозникновенияЗадолженности, "Д");
			ВывестиАтрибут(Компоновщик, "Сумма", ЗначениеПриведенноеКЕдиницеИзмерения(ДанныеСтроки[ПрефиксРаздела + "М100110"], ФорматнаяСтрока), "Ч,15,3");
			
			СуммаВал = ЗначениеПриведенноеКЕдиницеИзмерения(ДанныеСтроки[ПрефиксРаздела + "М100111"], ФорматнаяСтрокаВал);
			ВывестиНеобязательныйАтрибут(Компоновщик, "СуммаВал", СуммаВал, "Ч,15,3");
			
			Компоновщик.ЗаписатьКонецЭлемента(); // ПросрЗад
			
		КонецЕсли;
		
		Коммент = СокрЛП(ДанныеСтроки[ПрефиксРаздела + "М100112"]);
		
		Если ЗначениеЗаполнено(Коммент) Тогда
			Компоновщик.ЗаписатьНачалоЭлемента("Коммент");
			
			Компоновщик.ЗаписатьТекст(Лев(Коммент, 1000));
			
			Компоновщик.ЗаписатьКонецЭлемента(); // Коммент
			
		КонецЕсли;
		
		Компоновщик.ЗаписатьКонецЭлемента(); // Вложение
		
	КонецЦикла;
	
	Компоновщик.ЗаписатьКонецЭлемента(); // ИмяУзлаСтраницы
	
КонецПроцедуры

&НаСервере
Процедура ВывестиСтраницуВУзел_РасшФинВлож_ОтчетПустой(Компоновщик, СтраницаРаздела, ПрефиксРаздела, ИмяУзлаСтраницы)
	
	Компоновщик.ЗаписатьНачалоЭлемента(ИмяУзлаСтраницы);
	
	ВывестиАтрибут(Компоновщик, "ОтчетПустой", "true");
	
	Компоновщик.ЗаписатьКонецЭлемента(); // ИмяУзлаСтраницы
	
КонецПроцедуры

&НаСервере
Процедура ВывестиУзел_СтруктВыр(Компоновщик, ПараметрыВыгрузки)
	
	ИмяРаздела = "СтруктураВыручки";
	
	Если НЕ РазделВключенВОтчет(ИмяРаздела, ПараметрыВыгрузки.ДеревоНастройкиСтраниц) Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеРаздела = ПолучитьИзВременногоХранилища(СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяРаздела]);
	
	Для Каждого СтраницаРаздела Из ДанныеРаздела.Строки Цикл
		ВывестиСтраницуВУзел_СтруктВыр(Компоновщик, СтраницаРаздела);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиСтраницуВУзел_СтруктВыр(Компоновщик, СтраницаРаздела)
	
	НомерКвартала = Месяц(КонецКвартала(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета)) / 3;
	ГодОтчета = Год(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	
	КодКвартала = КодКвартала(НомерКвартала);
	ОтчетГод  = ПредставлениеГода(ГодОтчета);
	ОКЕИ      = "384";
	
	ФорматнаяСтрока = "ЧДЦ=3; ЧС=3; ЧН=; ЧГ=0";
	ДанныеОтчета = СтраницаРаздела.Данные;
	
	Компоновщик.ЗаписатьНачалоЭлемента("СтруктВыр");
	
	ВывестиАтрибут(Компоновщик, "Период",   КодКвартала);
	ВывестиАтрибут(Компоновщик, "ОтчетГод", ОтчетГод);
	ВывестиАтрибут(Компоновщик, "ОКЕИ",     ОКЕИ);
	
	Компоновщик.ЗаписатьНачалоЭлемента("Выручка");
	
	ВывестиАтрибут(Компоновщик, "ГосЗакФО",   ЗначениеПриведенноеКЕдиницеИзмерения(ДанныеОтчета.П000100001102, ФорматнаяСтрока), "Ч,15,3");
	ВывестиАтрибут(Компоновщик, "ГосЗакСРФ",  ЗначениеПриведенноеКЕдиницеИзмерения(ДанныеОтчета.П000100001202, ФорматнаяСтрока), "Ч,15,3");
	ВывестиАтрибут(Компоновщик, "РегВидДеят", ЗначениеПриведенноеКЕдиницеИзмерения(ДанныеОтчета.П000100003002, ФорматнаяСтрока), "Ч,15,3");
	ВывестиАтрибут(Компоновщик, "ПостТрансф", ЗначениеПриведенноеКЕдиницеИзмерения(ДанныеОтчета.П000100004002, ФорматнаяСтрока), "Ч,15,3");
	ВывестиАтрибут(Компоновщик, "Итого",      ЗначениеПриведенноеКЕдиницеИзмерения(ДанныеОтчета.П000100005002, ФорматнаяСтрока), "Ч,15,3");
	
	Компоновщик.ЗаписатьКонецЭлемента(); // Выручка
	
	МногострочнаяЧасть = СтраницаРаздела.ДанныеМногострочныхЧастей.П00010М1;
	
	Для Каждого СтрокаМСЧ Из МногострочнаяЧасть.Строки Цикл
		ДанныеСтроки = СтрокаМСЧ.Данные;
		
		Если НЕ ЗначениеЗаполнено(ДанныеСтроки.П00010М100101) Тогда
			Продолжить;
		КонецЕсли;
		
		Компоновщик.ЗаписатьНачалоЭлемента("ВыручкаВал");
		
		ВывестиАтрибут(Компоновщик, "Валюта", ДанныеСтроки.П00010М100101, "Т,50");
		ВывестиАтрибут(Компоновщик, "СумРуб", ЗначениеПриведенноеКЕдиницеИзмерения(ДанныеСтроки.П00010М100102, ФорматнаяСтрока), "Ч,15,3");
		ВывестиАтрибут(Компоновщик, "СумВал", ЗначениеПриведенноеКЕдиницеИзмерения(ДанныеСтроки.П00010М100103, ФорматнаяСтрока), "Ч,15,3");
		
		Компоновщик.ЗаписатьКонецЭлемента(); // ВыручкаВал
		
	КонецЦикла;
	
	Компоновщик.ЗаписатьКонецЭлемента(); // СтруктВыр
	
КонецПроцедуры

&НаСервере
Процедура ВывестиУзел_ПрочиеПоказатели(Компоновщик, ПараметрыВыгрузки)
	
	ИмяРаздела = "ПрочиеПоказатели";
	
	Если НЕ РазделВключенВОтчет(ИмяРаздела, ПараметрыВыгрузки.ДеревоНастройкиСтраниц) Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеРаздела = ПолучитьИзВременногоХранилища(СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяРаздела]);
	
	Для Каждого СтраницаРаздела Из ДанныеРаздела.Строки Цикл
		ВывестиСтраницуВУзел_ПрочиеПоказатели(Компоновщик, СтраницаРаздела);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиСтраницуВУзел_ПрочиеПоказатели(Компоновщик, СтраницаРаздела)
	
	НомерКвартала = Месяц(КонецКвартала(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета)) / 3;
	ГодОтчета = Год(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	
	КодКвартала = КодКвартала(НомерКвартала);
	ОтчетГод  = ПредставлениеГода(ГодОтчета);
	ОКЕИ      = "384";
	
	ФорматнаяСтрока = "ЧДЦ=3; ЧС=3; ЧН=; ЧГ=0";
	ДанныеОтчета = СтраницаРаздела.Данные;
	
	Компоновщик.ЗаписатьНачалоЭлемента("ПрочиеПоказатели");
	
	ВывестиАтрибут(Компоновщик, "Период",   КодКвартала);
	ВывестиАтрибут(Компоновщик, "ОтчетГод", ОтчетГод);
	ВывестиАтрибут(Компоновщик, "ОКЕИ",     ОКЕИ);
	
	Компоновщик.ЗаписатьНачалоЭлемента("СреднЧисл");
	ВывестиАтрибут(Компоновщик, "Величина", ДанныеОтчета.П000090000102, "Ч,6");
	ВывестиНеобязательныйАтрибут(Компоновщик, "Коммент", СокрЛП(ДанныеОтчета.П000090000103), "Т,1000");
	Компоновщик.ЗаписатьКонецЭлемента(); // СреднЧисл
	
	Компоновщик.ЗаписатьНачалоЭлемента("ФОТ");
	ВывестиАтрибут(Компоновщик, "Величина", ЗначениеПриведенноеКЕдиницеИзмерения(ДанныеОтчета.П000090000202, ФорматнаяСтрока), "Ч,15,3");
	ВывестиНеобязательныйАтрибут(Компоновщик, "Коммент", СокрЛП(ДанныеОтчета.П000090000203), "Т,1000");
	Компоновщик.ЗаписатьКонецЭлемента(); // ФОТ
	
	Компоновщик.ЗаписатьНачалоЭлемента("ВыплЗарпл");
	ВывестиАтрибут(Компоновщик, "Величина", ЗначениеПриведенноеКЕдиницеИзмерения(ДанныеОтчета.П000090000302, ФорматнаяСтрока), "Ч,15,3");
	ВывестиНеобязательныйАтрибут(Компоновщик, "Коммент", СокрЛП(ДанныеОтчета.П000090000303), "Т,1000");
	Компоновщик.ЗаписатьКонецЭлемента(); // ВыплЗарпл
	
	Компоновщик.ЗаписатьНачалоЭлемента("ПросрЗарпл");
	ВывестиАтрибут(Компоновщик, "Признак", ?(ДанныеОтчета.П000090000402 = "да", "1", "0"), "Т,1");
	ВывестиНеобязательныйАтрибут(Компоновщик, "Коммент", СокрЛП(ДанныеОтчета.П000090000403), "Т,1000");
	Компоновщик.ЗаписатьКонецЭлемента(); // ПросрЗарпл
	
	Компоновщик.ЗаписатьНачалоЭлемента("НезСтр");
	ВывестиАтрибут(Компоновщик, "Величина", ЗначениеПриведенноеКЕдиницеИзмерения(ДанныеОтчета.П000090000502, ФорматнаяСтрока), "Ч,15,3");
	ВывестиНеобязательныйАтрибут(Компоновщик, "ОтрБал", СокрЛП(ДанныеОтчета.П000090000501), "Т,5");
	ВывестиНеобязательныйАтрибут(Компоновщик, "Коммент", СокрЛП(ДанныеОтчета.П000090000503), "Т,1000");
	Компоновщик.ЗаписатьКонецЭлемента(); // НезСтр
	
	Компоновщик.ЗаписатьНачалоЭлемента("ИзмДоч");
	ВывестиАтрибут(Компоновщик, "Признак", ?(ДанныеОтчета.П000090000602 = "да", "1", "0"), "Т,1");
	ВывестиНеобязательныйАтрибут(Компоновщик, "Коммент", СокрЛП(ДанныеОтчета.П000090000603), "Т,1000");
	Компоновщик.ЗаписатьКонецЭлемента(); // ИзмДоч
	
	Компоновщик.ЗаписатьНачалоЭлемента("ДоляФО");
	Числитель = ДанныеОтчета.П000090000702_Числ;
	Знаменатель = ДанныеОтчета.П000090000702_Знам;
	Если Числитель = 0 И Знаменатель = 0 Тогда
		Знаменатель = 1;
	КонецЕсли;
	ВывестиАтрибут(Компоновщик, "Числ", Числитель, "Ч,12");
	ВывестиАтрибут(Компоновщик, "Знам", Знаменатель, "Ч,12");
	ВывестиНеобязательныйАтрибут(Компоновщик, "Коммент", СокрЛП(ДанныеОтчета.П000090000703), "Т,1000");
	Компоновщик.ЗаписатьКонецЭлемента(); // ДоляФО
	
	Компоновщик.ЗаписатьНачалоЭлемента("ДоляСубРФ");
	Числитель = ДанныеОтчета.П000090000802_Числ;
	Знаменатель = ДанныеОтчета.П000090000802_Знам;
	Если Числитель = 0 И Знаменатель = 0 Тогда
		Знаменатель = 1;
	КонецЕсли;
	ВывестиАтрибут(Компоновщик, "Числ", Числитель, "Ч,12");
	ВывестиАтрибут(Компоновщик, "Знам", Знаменатель, "Ч,12");
	ВывестиНеобязательныйАтрибут(Компоновщик, "Коммент", СокрЛП(ДанныеОтчета.П000090000803), "Т,1000");
	Компоновщик.ЗаписатьКонецЭлемента(); // ДоляСубРФ
	
	Компоновщик.ЗаписатьНачалоЭлемента("ИзмСост");
	ВывестиАтрибут(Компоновщик, "Признак", ?(ДанныеОтчета.П000090000902 = "да", "1", "0"), "Т,1");
	ВывестиНеобязательныйАтрибут(Компоновщик, "Коммент", СокрЛП(ДанныеОтчета.П000090000903), "Т,1000");
	Компоновщик.ЗаписатьКонецЭлемента(); // ИзмСост
	
	Компоновщик.ЗаписатьНачалоЭлемента("ПозРынк");
	ВывестиАтрибут(Компоновщик, "Величина", ДанныеОтчета.П000090001002, "Ч,8,4");
	ВывестиНеобязательныйАтрибут(Компоновщик, "Коммент", СокрЛП(ДанныеОтчета.П000090001003), "Т,1000");
	Компоновщик.ЗаписатьКонецЭлемента(); // ПозРынк
	
	Компоновщик.ЗаписатьНачалоЭлемента("ЗадКонтрУкр");
	ВывестиАтрибут(Компоновщик, "Признак", ?(ДанныеОтчета.П000090001102 = "да", "1", "0"), "Т,1");
	ВывестиНеобязательныйАтрибут(Компоновщик, "Коммент", СокрЛП(ДанныеОтчета.П000090001103), "Т,1000");
	Компоновщик.ЗаписатьКонецЭлемента(); // ЗадКонтрУкр
	
	Компоновщик.ЗаписатьНачалоЭлемента("КорпДог");
	ВывестиАтрибут(Компоновщик, "Признак", ?(ДанныеОтчета.П000090001202 = "да", "1", "0"), "Т,1");
	ВывестиНеобязательныйАтрибут(Компоновщик, "Коммент", СокрЛП(ДанныеОтчета.П000090001203), "Т,1000");
	Компоновщик.ЗаписатьКонецЭлемента(); // КорпДог
	
	Компоновщик.ЗаписатьНачалоЭлемента("ИзмУстав");
	ВывестиАтрибут(Компоновщик, "Признак", ?(ДанныеОтчета.П000090001302 = "да", "1", "0"), "Т,1");
	ВывестиНеобязательныйАтрибут(Компоновщик, "Коммент", СокрЛП(ДанныеОтчета.П000090001303), "Т,1000");
	Компоновщик.ЗаписатьКонецЭлемента(); // ИзмУстав
	
	Компоновщик.ЗаписатьНачалоЭлемента("ОбПФИ");
	ВывестиАтрибут(Компоновщик, "Признак", ?(ДанныеОтчета.П000090001402 = "имеются", "1", "0"), "Т,1");
	ВывестиНеобязательныйАтрибут(Компоновщик, "Коммент", СокрЛП(ДанныеОтчета.П000090001403), "Т,1000");
	Компоновщик.ЗаписатьКонецЭлемента(); // ОбПФИ
	
	Компоновщик.ЗаписатьКонецЭлемента(); // ПрочиеПоказатели
	
КонецПроцедуры

&НаСервере
Процедура ВывестиСтраницуВУзел_ОперБанкСч_БухгалтерскиеСчета(Компоновщик)
	
	ДеревоСчетов = ОтчетностьВБанкиСлужебный.ДеревоСчетовБУ();
	
	Если ДеревоСчетов.Строки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Компоновщик.ЗаписатьНачалоЭлемента("БухгалтерскиеСчета");
	
	СтрокиУровня1 = ДеревоСчетов.Строки;
	
	Для Каждого Выборка1Уровня Из СтрокиУровня1 Цикл
		Компоновщик.ЗаписатьНачалоЭлемента("Счет");
		
		ВывестиАтрибут(Компоновщик, "Код", Выборка1Уровня.Код, "Т,8");
		ВывестиАтрибут(Компоновщик, "Наименование", Выборка1Уровня.Наименование, "Т,120");
		ВывестиАтрибут(Компоновщик, "Тип", Выборка1Уровня.Вид, "Т,2");
		
		СтрокиУровня2 = Выборка1Уровня.Строки;
		
		Для Каждого Выборка2Уровня Из СтрокиУровня2 Цикл
			Если Выборка2Уровня.Ссылка = Выборка1Уровня.Ссылка Тогда
				Продолжить;
			КонецЕсли;
			
			Компоновщик.ЗаписатьНачалоЭлемента("СубСчет");
			
			ВывестиАтрибут(Компоновщик, "Код", Выборка2Уровня.Код, "Т,8");
			ВывестиАтрибут(Компоновщик, "Наименование", Выборка2Уровня.Наименование, "Т,120");
			ВывестиАтрибут(Компоновщик, "Тип", Выборка2Уровня.Вид, "Т,2");
			
			СтрокиУровня3 = Выборка2Уровня.Строки;
			
			Для Каждого Выборка3Уровня Из СтрокиУровня3 Цикл
				Если Выборка3Уровня.Ссылка = Выборка2Уровня.Ссылка Тогда
					Продолжить;
				КонецЕсли;
				
				Компоновщик.ЗаписатьНачалоЭлемента("СубСубСчет");
				
				ВывестиАтрибут(Компоновщик, "Код", Выборка3Уровня.Код, "Т,8");
				ВывестиАтрибут(Компоновщик, "Наименование", Выборка3Уровня.Наименование, "Т,120");
				ВывестиАтрибут(Компоновщик, "Тип", Выборка3Уровня.Вид, "Т,2");
				
				Компоновщик.ЗаписатьКонецЭлемента(); // СубСубСчет
				
			КонецЦикла;
			
			Компоновщик.ЗаписатьКонецЭлемента(); // СубСчет
			
		КонецЦикла;
		
		Компоновщик.ЗаписатьКонецЭлемента(); // Счет
		
	КонецЦикла;
	
	Компоновщик.ЗаписатьКонецЭлемента(); // БухгалтерскиеСчета
	
КонецПроцедуры

&НаСервере
Процедура ВывестиУзел_ОперБанкСч_СчетУчета(Компоновщик, ПараметрыВыгрузки, ИмяРаздела)
	
	Если НЕ РазделВключенВОтчет(ИмяРаздела, ПараметрыВыгрузки.ДеревоНастройкиСтраниц) Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеМетаРаздела = ПолучитьИзВременногоХранилища(СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + "ОперацииПоБанковскимСчетам"]);
	
	Если ИмяРаздела = "Операции51" Тогда
		ДанныеРаздела = ДанныеМетаРаздела.Строки[0].Строки[0].Строки[0];
	ИначеЕсли ИмяРаздела = "Операции52" Тогда
		ДанныеРаздела = ДанныеМетаРаздела.Строки[0].Строки[1].Строки[0];
	ИначеЕсли ИмяРаздела = "Операции55" Тогда
		ДанныеРаздела = ДанныеМетаРаздела.Строки[0].Строки[2].Строки[0];
	КонецЕсли;
	
	СтрокаСчетаВерхнегоУровня = ДанныеРаздела.ДополнительныеДанные.Данные.Строки[0];
	
	Компоновщик.ЗаписатьНачалоЭлемента("СчетУчета");
	
	ВывестиАтрибут(Компоновщик, "КодСчета",        СтрокаСчетаВерхнегоУровня.Представление);
	ВывестиАтрибут(Компоновщик, "СальдоНачальное", СтрокаСчетаВерхнегоУровня.СальдоНачальноеДт, "Ч,15,2");
	ВывестиАтрибут(Компоновщик, "ОборотыДт",       СтрокаСчетаВерхнегоУровня.ОборотыДт, "Ч,15,2");
	ВывестиАтрибут(Компоновщик, "ОборотыКт",       СтрокаСчетаВерхнегоУровня.ОборотыКт, "Ч,15,2");
	ВывестиАтрибут(Компоновщик, "СальдоКонечное",  СтрокаСчетаВерхнегоУровня.СальдоКонечноеДт, "Ч,15,2");
	
	ПрефиксИдентификатораДанных = "БанковскиеСчета." + СтрокаСчетаВерхнегоУровня.Счет.УникальныйИдентификатор();
	
	ВывестиУзел_ОперБанкСч_СчетУчета_БанкСч(Компоновщик, СтрокаСчетаВерхнегоУровня.Строки, ПрефиксИдентификатораДанных);
	
	Компоновщик.ЗаписатьКонецЭлемента(); // СчетУчета
	
КонецПроцедуры

&НаСервере
Процедура ВывестиУзел_ОперБанкСч_СчетУчета_БанкСч(Компоновщик, СтрокиСчетов, Знач ПрефиксИдентификатораДанных)
	
	ОписаниеТипаБанковскиеСчета = ОтчетностьВБанкиСлужебный.ТипыСущности("БанковскиеСчета");
	
	Для Каждого СтрокаСчета Из СтрокиСчетов Цикл
		ТребуетсяРазыменование = (СтрокаСчета.Владелец().Колонки.Найти("Валютный") = Неопределено);
		
		Если ОписаниеТипаБанковскиеСчета.СодержитТип(ТипЗнч(СтрокаСчета.Счет)) Тогда
			Компоновщик.ЗаписатьНачалоЭлемента("БанкСч");
			
			Если НЕ ТребуетсяРазыменование Тогда
				ВывестиНеобязательныйАтрибут(Компоновщик, "Наименование", СтрокаСчета.Представление, "Т,100");
				ВывестиАтрибут(Компоновщик, "Номер", СтрокаСчета.НомерСчета, "Т,34");
				ВывестиАтрибут(Компоновщик, "БИК", СтрокаСчета.БИКБанка, "Т,9");
				ВывестиНеобязательныйАтрибут(Компоновщик, "Банк", СтрокаСчета.НаименованиеБанка, "Т,100");
				
				Если СтрокаСчета.Валютный Тогда
					ВывестиАтрибут(Компоновщик, "Валюта", СтрокаСчета.КодВалюты, "Т,3");
				КонецЕсли;
				
				ВывестиАтрибут(Компоновщик, "СальдоНачальное", СтрокаСчета.СальдоНачальноеДт, "Ч,15,2");
				ВывестиАтрибут(Компоновщик, "ОборотыДт"      , СтрокаСчета.ОборотыДт, "Ч,15,2");
				ВывестиАтрибут(Компоновщик, "ОборотыКт"      , СтрокаСчета.ОборотыКт, "Ч,15,2");
				ВывестиАтрибут(Компоновщик, "СальдоКонечное" , СтрокаСчета.СальдоКонечноеДт, "Ч,15,2");
				
				Если СтрокаСчета.Валютный Тогда
					ВывестиАтрибут(Компоновщик, "СальдоНачальноеВал", СтрокаСчета.СальдоНачальноеВалДт, "Ч,15,2");
					ВывестиАтрибут(Компоновщик, "ОборотыДтВал"      , СтрокаСчета.ОборотыВалДт, "Ч,15,2");
					ВывестиАтрибут(Компоновщик, "ОборотыКтВал"      , СтрокаСчета.ОборотыВалКт, "Ч,15,2");
					ВывестиАтрибут(Компоновщик, "СальдоКонечноеВал" , СтрокаСчета.СальдоКонечноеВалДт, "Ч,15,2");
				КонецЕсли;
				
			Иначе
				// Поддержка сокращенного перечня передаваемых сведений, требущего разыменования.
				ВывестиНеобязательныйАтрибут(Компоновщик, "Наименование", СтрокаСчета.Счет.Наименование, "Т,100");
				ВывестиАтрибут(Компоновщик, "Номер", СтрокаСчета.Счет.НомерСчета, "Т,34");
				ВывестиАтрибут(Компоновщик, "БИК", СтрокаСчета.Счет.Банк.Код, "Т,9");
				ВывестиНеобязательныйАтрибут(Компоновщик, "Банк", СтрокаСчета.Счет.Банк.Наименование, "Т,100");
				
				Если СтрокаСчета.Счет.Валютный Тогда
					ВывестиАтрибут(Компоновщик, "Валюта", СтрокаСчета.Счет.ВалютаДенежныхСредств.Код, "Т,3");
				КонецЕсли;
				
				ВывестиАтрибут(Компоновщик, "СальдоНачальное", СтрокаСчета.СальдоНачальноеДт, "Ч,15,2");
				ВывестиАтрибут(Компоновщик, "ОборотыДт"      , СтрокаСчета.ОборотыДт, "Ч,15,2");
				ВывестиАтрибут(Компоновщик, "ОборотыКт"      , СтрокаСчета.ОборотыКт, "Ч,15,2");
				ВывестиАтрибут(Компоновщик, "СальдоКонечное" , СтрокаСчета.СальдоКонечноеДт, "Ч,15,2");
				
				Если СтрокаСчета.Счет.Валютный Тогда
					ВывестиАтрибут(Компоновщик, "СальдоНачальноеВал", СтрокаСчета.СальдоНачальноеВалДт, "Ч,15,2");
					ВывестиАтрибут(Компоновщик, "ОборотыДтВал"      , СтрокаСчета.ОборотыВалДт, "Ч,15,2");
					ВывестиАтрибут(Компоновщик, "ОборотыКтВал"      , СтрокаСчета.ОборотыВалКт, "Ч,15,2");
					ВывестиАтрибут(Компоновщик, "СальдоКонечноеВал" , СтрокаСчета.СальдоКонечноеВалДт, "Ч,15,2");
				КонецЕсли;
				
			КонецЕсли;
			
			ПрефиксИДПоБС = ПрефиксИдентификатораДанных
			              + "." + СтрокаСчета.Счет.УникальныйИдентификатор();
			ВыборкаСегментов = ВыборкаСегментовОтчетаПоШаблону(ПрефиксИДПоБС + ".%");
			
			НомерСекции = 1;
			Если ВыборкаСегментов.Количество() > 0 Тогда
				ВидДополнительногоФайла = ПрефиксИДПоБС + "." + СтрокаЧГ0(НомерСекции);
				СтрокиСекции = ДанныеРегистраДополнительныхФайлов(ВидДополнительногоФайла);
				
				Если СтрокиСекции <> Неопределено Тогда
					Для Каждого СтрокаСекции Из СтрокиСекции Цикл
						Компоновщик.ЗаписатьНачалоЭлемента("Операция");
						
						ВывестиАтрибут(Компоновщик, "Дата", СтрокаСекции.ДатаОперации, "Д");
						Если ЗначениеЗаполнено(СтрокаСекции.НомерДокумента)
						   И ЗначениеЗаполнено(СтрокаСекции.ДатаДокумента) Тогда
							ВывестиНеобязательныйАтрибут(Компоновщик, "ДокНомер", СтрокаСекции.НомерДокумента, "Т,255");
							ВывестиНеобязательныйАтрибут(Компоновщик, "ДокДата", СтрокаСекции.ДатаДокумента, "Д");
						КонецЕсли;
						
						ВывестиНеобязательныйАтрибут(Компоновщик, "ВидОперации", СтрокаСекции.ВидОперации, "Т,255");
						ВывестиНеобязательныйАтрибут(Компоновщик, "Назначение", СтрокаСекции.Назначение, "Т,255");
						
						ВывестиАтрибут(Компоновщик, "СчетДт", СтрокаСекции.СчетДтКод, "Т,8");
						ВывестиАтрибут(Компоновщик, "СчетКт", СтрокаСекции.СчетКтКод, "Т,8");
						ВывестиАтрибут(Компоновщик, "Сумма", СтрокаСекции.Сумма, "Ч,15,2");
						
						Если СтрокаСчета.Счет.Валютный Тогда
							ВывестиАтрибут(Компоновщик, "СуммаВал", СтрокаСекции.СуммаВал, "Ч,15,2");
						КонецЕсли;
						
						Если ЗначениеЗаполнено(СтрокаСекции.Контрагент) Тогда
							Компоновщик.ЗаписатьНачалоЭлемента("Контрагент");
							
							ВывестиАтрибут(Компоновщик, "Наименование", СтрокаСекции.Контрагент, "Т,250");
							
							Если ЗначениеЗаполнено(СтрокаСекции.ИНН) Тогда
								Если СтрДлина(СтрокаСекции.ИНН) = 10 И СтрДлина(СтрокаСекции.КПП) = 9 Тогда
									ВывестиАтрибут(Компоновщик, "ИНН", СтрокаСекции.ИНН, "Т,10");
									ВывестиАтрибут(Компоновщик, "КПП", СтрокаСекции.КПП, "Т,9");
									
								ИначеЕсли СтрДлина(СтрокаСекции.ИНН) = 12 Тогда
									ВывестиАтрибут(Компоновщик, "ИНН", СтрокаСекции.ИНН, "Т,12");
									
								КонецЕсли;
								
							КонецЕсли;
							
							ВывестиНеобязательныйАтрибут(Компоновщик, "Договор", СтрокаСекции.Договор, "Т, 255");
							
							Компоновщик.ЗаписатьКонецЭлемента(); // Контрагент
							
						КонецЕсли;
						
						Компоновщик.ЗаписатьКонецЭлемента(); // Операция
						
					КонецЦикла;
				КонецЕсли;
				
				НомерСекции = НомерСекции + 1;
				
			КонецЕсли;
			
			Компоновщик.ЗаписатьКонецЭлемента(); // БанкСч
			
		Иначе
			ВывестиУзел_ОперБанкСч_СчетУчета_БанкСч(Компоновщик, СтрокаСчета.Строки, ПрефиксИдентификатораДанных);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиУзел_ДебКредЗадолж(Компоновщик, ПараметрыВыгрузки)
	
	ИмяРаздела = "ДебКредЗадолженность";
	
	Если НЕ РазделВключенВОтчет(ИмяРаздела, ПараметрыВыгрузки.ДеревоНастройкиСтраниц) Тогда
		Возврат;
	КонецЕсли;
	
	НомерКвартала = Месяц(КонецКвартала(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета)) / 3;
	КодКвартала = КодКвартала(НомерКвартала);
	
	ГодОтчета = Год(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	ОтчетГод  = ПредставлениеГода(ГодОтчета);
	
	Делитель = ДелительПоЕдиницеИзмерения(СтруктураРеквизитовФормы.ЕдиницаИзмерения);
	ОКЕИ = КодЕдиницыИзмерения(Делитель);
	
	ФорматнаяСтрока = ФорматнаяСтрокаПоЕдиницеИзмерения(Делитель);
	
	Компоновщик.ЗаписатьНачалоЭлемента("ДебКредЗадолж");
	
	ВывестиАтрибут(Компоновщик, "Период",   КодКвартала);
	ВывестиАтрибут(Компоновщик, "ОтчетГод", ОтчетГод);
	ВывестиАтрибут(Компоновщик, "ОКЕИ",     ОКЕИ);
	
	ДанныеМетаРаздела = ПолучитьИзВременногоХранилища(
		СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяРаздела]);
		
	Интервалы = Неопределено;
	Если НЕ РазделВключенВОтчет("Дебиторская", ПараметрыВыгрузки.ДеревоНастройкиСтраниц) Тогда
		ДанныеРаздела = ДанныеМетаРаздела.Строки[0].Строки[0].Строки[0];
		Если НЕ (ДействуетСВерсииФормата("5.10.01") И ДанныеРаздела.Параметры.СтатусЗаполнения = "пустой") Тогда
			Интервалы = ДанныеРаздела.ДополнительныеДанные.Интервалы;
		КонецЕсли;
	ИначеЕсли РазделВключенВОтчет("Кредиторская", ПараметрыВыгрузки.ДеревоНастройкиСтраниц) Тогда
		ДанныеРаздела = ДанныеМетаРаздела.Строки[0].Строки[1].Строки[0];
		Если НЕ (ДействуетСВерсииФормата("5.10.01") И ДанныеРаздела.Параметры.СтатусЗаполнения = "пустой") Тогда
			Интервалы = ДанныеРаздела.ДополнительныеДанные.Интервалы;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ Интервалы = Неопределено Тогда 
		ВывестиУзел_ДебКредЗадолж_Интервалы(Компоновщик, Интервалы);
	КонецЕсли;
	
	ПараметрыВывода = Новый Структура;
	ПараметрыВывода.Вставить("Интервалы", Интервалы);
	ПараметрыВывода.Вставить("ФорматнаяСтрока", ФорматнаяСтрока);
	
	Если РазделВключенВОтчет("Дебиторская", ПараметрыВыгрузки.ДеревоНастройкиСтраниц) Тогда
		ДанныеРаздела = ДанныеМетаРаздела.Строки[0].Строки[0].Строки[0];
		ПараметрыВывода.Вставить("ДанныеРаздела", ДанныеРаздела);
		
		Если ДействуетСВерсииФормата("5.10.01") Тогда
			Компоновщик.ЗаписатьНачалоЭлемента("Дебиторская");
		КонецЕсли;
		
		Если ДействуетСВерсииФормата("5.10.01") И ДанныеРаздела.Параметры.СтатусЗаполнения = "пустой" Тогда
			ВывестиАтрибут(Компоновщик, "ОтчетПустой", "true");
		Иначе
			ВывестиУзел_ДебКредЗадолж_ДебДсрКср(Компоновщик, ПараметрыВывода);
		КонецЕсли;
		
		Если ДействуетСВерсииФормата("5.10.01") Тогда
			Компоновщик.ЗаписатьКонецЭлемента(); // Дебиторская
		КонецЕсли;
		
	КонецЕсли;
	
	Если РазделВключенВОтчет("Кредиторская", ПараметрыВыгрузки.ДеревоНастройкиСтраниц) Тогда
		ДанныеРаздела = ДанныеМетаРаздела.Строки[0].Строки[1].Строки[0];
		ПараметрыВывода.Вставить("ДанныеРаздела", ДанныеРаздела);
		
		Если ДействуетСВерсииФормата("5.10.01") Тогда
			Компоновщик.ЗаписатьНачалоЭлемента("Кредиторская");
		КонецЕсли;
		
		Если ДействуетСВерсииФормата("5.10.01") И ДанныеРаздела.Параметры.СтатусЗаполнения = "пустой" Тогда
			ВывестиАтрибут(Компоновщик, "ОтчетПустой", "true");
		Иначе
			ВывестиУзел_ДебКредЗадолж_КредДсрКср(Компоновщик, ПараметрыВывода);
		КонецЕсли;
		
		Если ДействуетСВерсииФормата("5.10.01") Тогда
			Компоновщик.ЗаписатьКонецЭлемента(); // Кредиторская
		КонецЕсли;
		
	КонецЕсли;
	
	Компоновщик.ЗаписатьКонецЭлемента(); // ДебКредЗадолж
	
КонецПроцедуры

&НаСервере
Процедура ВывестиУзел_ДебКредЗадолж_Интервалы(Компоновщик, Интервалы)
	
	Компоновщик.ЗаписатьНачалоЭлемента("Интервалы");
	
	Для Каждого Интервал Из Интервалы Цикл
		Если ИгнорироватьПервыйИнтервал() И Интервалы.Индекс(Интервал) = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Компоновщик.ЗаписатьНачалоЭлемента("Интервал");
		
		ВывестиАтрибут(Компоновщик, "Код",       Интервал.Код,       "Ч,6,0");
		ВывестиАтрибут(Компоновщик, "Начало",    Интервал.Начало,    "Ч,12,0");
		ВывестиАтрибут(Компоновщик, "Окончание", Интервал.Окончание, "Ч,12,0");
		
		Компоновщик.ЗаписатьКонецЭлемента(); // Интервал
		
	КонецЦикла;
	
	Компоновщик.ЗаписатьКонецЭлемента(); // Интервалы
	
КонецПроцедуры

&НаСервере
Процедура ВывестиУзел_ДебКредЗадолж_ДебДсрКср(Компоновщик, ПараметрыВывода)
	
	ДанныеРаздела = ПараметрыВывода.ДанныеРаздела;
	ДеревоЗадолженности = ДанныеРаздела.ДополнительныеДанные.Данные;
	
	ДолгосрочнаяЗадолженность = ДеревоЗадолженности.Строки.Найти("Долгосрочная", "ВидЗадолженности");
	Если ДолгосрочнаяЗадолженность <> Неопределено Тогда
		ВывестиУзел_ДебКредЗадолж_ДебДср(Компоновщик, ПараметрыВывода, ДолгосрочнаяЗадолженность);
	КонецЕсли;
	
	КраткосрочнаяЗадолженность = ДеревоЗадолженности.Строки.Найти("Краткосрочная", "ВидЗадолженности");
	Если КраткосрочнаяЗадолженность <> Неопределено Тогда
		ВывестиУзел_ДебКредЗадолж_ДебКср(Компоновщик, ПараметрыВывода, КраткосрочнаяЗадолженность);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиУзел_ДебКредЗадолж_ДебДср(Компоновщик, ПараметрыВывода, Задолженность)
	
	Компоновщик.ЗаписатьНачалоЭлемента("ДебДср");
	
	Для Каждого ЗадолженностьПоВиду Из Задолженность.Строки Цикл
		ВидЗадолженности = ЗадолженностьПоВиду.ВидЗадолженности;
		Если ВидЗадолженности = "Расчеты" Тогда
			КодВидаЗадолженности = 1;
		ИначеЕсли ВидЗадолженности = "Авансы" Тогда
			КодВидаЗадолженности = 2;
		ИначеЕсли ВидЗадолженности = "Лизинг" Тогда
			КодВидаЗадолженности = 3;
		ИначеЕсли ВидЗадолженности = "Прочая" Тогда
			КодВидаЗадолженности = 4;
		Иначе
			ВызватьИсключение "Непредусмотренный алгоритмом вид задолженности """ + ВидЗадолженности
				+ """ при формировании электронного электронного представления отчетности в банки";
		КонецЕсли;
		
		ПараметрыВывода.Вставить("КодВидаЗадолженности", КодВидаЗадолженности);
		ПараметрыВывода.Вставить("ЗадолженностьПоВиду", ЗадолженностьПоВиду);
		
		ВывестиУзел_ДебКредЗадолж_ДебКред_ЗадолжВид(Компоновщик, ПараметрыВывода);
		
	КонецЦикла;
	
	Компоновщик.ЗаписатьКонецЭлемента(); // ДебДср
	
КонецПроцедуры

&НаСервере
Процедура ВывестиУзел_ДебКредЗадолж_ДебКср(Компоновщик, ПараметрыВывода, Задолженность)
	
	Компоновщик.ЗаписатьНачалоЭлемента("ДебКср");
	
	Для Каждого ЗадолженностьПоВиду Из Задолженность.Строки Цикл
		ВидЗадолженности = ЗадолженностьПоВиду.ВидЗадолженности;
		Если ВидЗадолженности = "Расчеты" Тогда
			КодВидаЗадолженности = 1;
		ИначеЕсли ВидЗадолженности = "Авансы" Тогда
			КодВидаЗадолженности = 2;
		ИначеЕсли ВидЗадолженности = "Платежи" Тогда
			КодВидаЗадолженности = 3;
		ИначеЕсли ВидЗадолженности = "Учредители" Тогда
			КодВидаЗадолженности = 4;
		ИначеЕсли ВидЗадолженности = "Лизинг" Тогда
			КодВидаЗадолженности = 5;
		ИначеЕсли ВидЗадолженности = "Прочая" Тогда
			КодВидаЗадолженности = 6;
		Иначе
			ВызватьИсключение "Непредусмотренный алгоритмом вид задолженности """ + ВидЗадолженности
				+ """ при формировании электронного электронного представления отчетности в банки";
		КонецЕсли;
		
		ПараметрыВывода.Вставить("КодВидаЗадолженности", КодВидаЗадолженности);
		ПараметрыВывода.Вставить("ЗадолженностьПоВиду", ЗадолженностьПоВиду);
		
		ВывестиУзел_ДебКредЗадолж_ДебКред_ЗадолжВид(Компоновщик, ПараметрыВывода);
		
	КонецЦикла;
	
	Компоновщик.ЗаписатьКонецЭлемента(); // ДебКср
	
КонецПроцедуры

&НаСервере
Процедура ВывестиУзел_ДебКредЗадолж_КредДсрКср(Компоновщик, ПараметрыВывода)
	
	ДанныеРаздела = ПараметрыВывода.ДанныеРаздела;
	ДеревоЗадолженности = ДанныеРаздела.ДополнительныеДанные.Данные;
	
	ДолгосрочнаяЗадолженность = ДеревоЗадолженности.Строки.Найти("Долгосрочная", "ВидЗадолженности");
	Если ДолгосрочнаяЗадолженность <> Неопределено Тогда
		ВывестиУзел_ДебКредЗадолж_КредДср(Компоновщик, ПараметрыВывода, ДолгосрочнаяЗадолженность);
	КонецЕсли;
	
	КраткосрочнаяЗадолженность = ДеревоЗадолженности.Строки.Найти("Краткосрочная", "ВидЗадолженности");
	Если КраткосрочнаяЗадолженность <> Неопределено Тогда
		ВывестиУзел_ДебКредЗадолж_КредКср(Компоновщик, ПараметрыВывода, КраткосрочнаяЗадолженность);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиУзел_ДебКредЗадолж_КредДср(Компоновщик, ПараметрыВывода, Задолженность)
	
	Компоновщик.ЗаписатьНачалоЭлемента("КредДср");
	
	Для Каждого ЗадолженностьПоВиду Из Задолженность.Строки Цикл
		ВидЗадолженности = ЗадолженностьПоВиду.ВидЗадолженности;
		Если ВидЗадолженности = "Расчеты" Тогда
			КодВидаЗадолженности = 1;
		ИначеЕсли ВидЗадолженности = "Авансы" Тогда
			КодВидаЗадолженности = 2;
		ИначеЕсли ВидЗадолженности = "Лизинг" Тогда
			КодВидаЗадолженности = 3;
		ИначеЕсли ВидЗадолженности = "Прочая" Тогда
			КодВидаЗадолженности = 4;
		Иначе
			ВызватьИсключение "Непредусмотренный алгоритмом вид задолженности """ + ВидЗадолженности
				+ """ при формировании электронного электронного представления отчетности в банки";
		КонецЕсли;
		
		ПараметрыВывода.Вставить("КодВидаЗадолженности", КодВидаЗадолженности);
		ПараметрыВывода.Вставить("ЗадолженностьПоВиду", ЗадолженностьПоВиду);
		
		ВывестиУзел_ДебКредЗадолж_ДебКред_ЗадолжВид(Компоновщик, ПараметрыВывода);
		
	КонецЦикла;
	
	Компоновщик.ЗаписатьКонецЭлемента(); // КредДср
	
КонецПроцедуры

&НаСервере
Процедура ВывестиУзел_ДебКредЗадолж_КредКср(Компоновщик, ПараметрыВывода, Задолженность)
	
	Компоновщик.ЗаписатьНачалоЭлемента("КредКср");
	
	Для Каждого ЗадолженностьПоВиду Из Задолженность.Строки Цикл
		ВидЗадолженности = ЗадолженностьПоВиду.ВидЗадолженности;
		Если ВидЗадолженности = "Расчеты" Тогда
			КодВидаЗадолженности = 1;
		ИначеЕсли ВидЗадолженности = "Авансы" Тогда
			КодВидаЗадолженности = 2;
		ИначеЕсли ВидЗадолженности = "Платежи" Тогда
			КодВидаЗадолженности = 3;
		ИначеЕсли ВидЗадолженности = "Учредители" Тогда
			КодВидаЗадолженности = 4;
		ИначеЕсли ВидЗадолженности = "Лизинг" Тогда
			КодВидаЗадолженности = 5;
		ИначеЕсли ВидЗадолженности = "Прочая" Тогда
			КодВидаЗадолженности = 6;
		Иначе
			ВызватьИсключение "Непредусмотренный алгоритмом вид задолженности """ + ВидЗадолженности
				+ """ при формировании электронного электронного представления отчетности в банки";
		КонецЕсли;
		
		ПараметрыВывода.Вставить("КодВидаЗадолженности", КодВидаЗадолженности);
		ПараметрыВывода.Вставить("ЗадолженностьПоВиду", ЗадолженностьПоВиду);
		
		ВывестиУзел_ДебКредЗадолж_ДебКред_ЗадолжВид(Компоновщик, ПараметрыВывода);
		
	КонецЦикла;
	
	Компоновщик.ЗаписатьКонецЭлемента(); // КредКср
	
КонецПроцедуры

&НаСервере
Процедура ВывестиУзел_ДебКредЗадолж_ДебКред_ЗадолжВид(Компоновщик, ПараметрыВывода)
	
	ЗадолженностьПоВиду = ПараметрыВывода.ЗадолженностьПоВиду;
	КодВидаЗадолженности = ПараметрыВывода.КодВидаЗадолженности;
	Интервалы = ПараметрыВывода.Интервалы;
	ФорматнаяСтрока = ПараметрыВывода.ФорматнаяСтрока;
	
	ЕстьГрафаРезерв = (ЗадолженностьПоВиду.Владелец().Колонки.Найти("Резерв") <> Неопределено);
	
	Компоновщик.ЗаписатьНачалоЭлемента("ЗадолжВид");
	
	ВывестиАтрибут(Компоновщик, "Вид", КодВидаЗадолженности);
	
	Показатели = ПараметрыВывода.ДанныеРаздела.Данные;
	
	ИндексСтрокиПоСрочности = 1
		+ ЗадолженностьПоВиду.Родитель.Владелец().Строки.Индекс(ЗадолженностьПоВиду.Родитель);
	
	ИндексСтрокиПоВидуЗадолженности = 1
		+ ЗадолженностьПоВиду.Родитель.Строки.Индекс(ЗадолженностьПоВиду);
		
	ИндексСтрокиПоОбъекту = 0;
	
	Для Каждого ЗадолженностьПоПредметуУчета Из ЗадолженностьПоВиду.Строки Цикл
		Если НЕ СтрокаЗаполненаПоЕдИзм(ЗадолженностьПоПредметуУчета, ФорматнаяСтрока) Тогда
			Продолжить;
		КонецЕсли;
		
		ИндексСтрокиПоОбъекту = ИндексСтрокиПоОбъекту + 1;
		
		ПостфиксИмени = "_" + СтрокаЧГ0(ИндексСтрокиПоСрочности)
		              + "_" + СтрокаЧГ0(ИндексСтрокиПоВидуЗадолженности)
		              + "_" + СтрокаЧГ0(ИндексСтрокиПоОбъекту);
		
		ДатаПогашения = Неопределено;
		КомментарийЗадолженности = Неопределено;
		
		Показатели.Свойство("ДатаПогашения" + ПостфиксИмени, ДатаПогашения);
		Показатели.Свойство("Комментарий" + ПостфиксИмени, КомментарийЗадолженности);
		
		Компоновщик.ЗаписатьНачалоЭлемента("Задолж");
		
		Если ЗначениеЗаполнено(ЗадолженностьПоПредметуУчета.Контрагент) Тогда
			Компоновщик.ЗаписатьНачалоЭлемента("Контрагент");
			
			ВывестиАтрибут(Компоновщик, "Наим", ЗадолженностьПоПредметуУчета.Контрагент, "Т,250");
			
			ИНН = ЗадолженностьПоПредметуУчета.ИНН;
			КПП = ЗадолженностьПоПредметуУчета.КПП;
			
			Если ЗначениеЗаполнено(ИНН) Тогда
				Если СтрДлина(ИНН) = 10 И СтрДлина(КПП) = 9 Тогда
					ВывестиАтрибут(Компоновщик, "ИНН", ИНН, "Т,10");
					ВывестиАтрибут(Компоновщик, "КПП", КПП, "Т,9");
					
				ИначеЕсли СтрДлина(ИНН) = 12 Тогда
					ВывестиАтрибут(Компоновщик, "ИНН", ИНН, "Т,12");
					
				КонецЕсли;
				
			КонецЕсли;
			
			ВывестиНеобязательныйАтрибут(Компоновщик, "ДатаВозн", ЗадолженностьПоПредметуУчета.ДатаВозникновения, "Д");
			
			ЗадолженностьОбщая = Формат(ЗадолженностьПоПредметуУчета.Задолженность, ФорматнаяСтрока);
			ВывестиАтрибут(Компоновщик, "Общая", ЗадолженностьОбщая);
			
			ЗадолженностьПросроченная = Формат(ЗадолженностьПоПредметуУчета.Просроченная, ФорматнаяСтрока);
			ВывестиАтрибут(Компоновщик, "Просроч", ЗадолженностьПросроченная);
			
			Если ЕстьГрафаРезерв Тогда
				Резерв = Формат(ЗадолженностьПоПредметуУчета.Резерв, ФорматнаяСтрока);
				ВывестиАтрибут(Компоновщик, "Резерв", Резерв);
			КонецЕсли;
			
			ВывестиНеобязательныйАтрибут(Компоновщик, "ДатаПогаш", ДатаПогашения, "Д");
			ВывестиНеобязательныйАтрибут(Компоновщик, "Комментарий", КомментарийЗадолженности, "Т,1000");
			
			Для Каждого Интервал Из Интервалы Цикл
				Если ИгнорироватьПервыйИнтервал() И Интервалы.Индекс(Интервал) = 0 Тогда
					Продолжить;
				КонецЕсли;
				
				Компоновщик.ЗаписатьНачалоЭлемента("ПоСроку");
				
				ИмяКолонки = "ПросроченнаяПоСроку" + СтрокаЧГ0(Интервал.Код);
				ПросроченнаяПоСроку =  Формат(ЗадолженностьПоПредметуУчета[ИмяКолонки], ФорматнаяСтрока);
				
				ВывестиАтрибут(Компоновщик, "Код", Интервал.Код, "Ч,6");
				ВывестиАтрибут(Компоновщик, "Задолж", ПросроченнаяПоСроку);
				
				Компоновщик.ЗаписатьКонецЭлемента(); // ПоСроку
				
			КонецЦикла;
			
			Компоновщик.ЗаписатьКонецЭлемента(); // Контрагент
			
		Иначе
			Компоновщик.ЗаписатьНачалоЭлемента("Прочее");
			
			ВывестиАтрибут(Компоновщик, "Наим", ЗадолженностьПоПредметуУчета.ПредметУчета, "Т,250");
			ВывестиНеобязательныйАтрибут(Компоновщик, "ДатаВозн", ЗадолженностьПоПредметуУчета.ДатаВозникновения, "Д");
			
			ЗадолженностьОбщая = Формат(ЗадолженностьПоПредметуУчета.Задолженность, ФорматнаяСтрока);
			ВывестиАтрибут(Компоновщик, "Общая", ЗадолженностьОбщая);
			
			Компоновщик.ЗаписатьКонецЭлемента(); // Прочее
			
		КонецЕсли;
		
		Компоновщик.ЗаписатьКонецЭлемента(); // Задолж
		
	КонецЦикла;
	
	Компоновщик.ЗаписатьНачалоЭлемента("Итого");
	
	ЗадолженностьОбщая = Формат(ЗадолженностьПоВиду.Задолженность, ФорматнаяСтрока);
	ВывестиАтрибут(Компоновщик, "Общая", ЗадолженностьОбщая);
	
	ЗадолженностьПросроченная = Формат(ЗадолженностьПоВиду.Просроченная, ФорматнаяСтрока);
	ВывестиАтрибут(Компоновщик, "Просроч", ЗадолженностьПросроченная);
	
	Если ЕстьГрафаРезерв Тогда
		Резерв = Формат(ЗадолженностьПоВиду.Резерв, ФорматнаяСтрока);
		ВывестиАтрибут(Компоновщик, "Резерв", Резерв);
	КонецЕсли;
	
	Для Каждого Интервал Из Интервалы Цикл
		Если ИгнорироватьПервыйИнтервал() И Интервалы.Индекс(Интервал) = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Компоновщик.ЗаписатьНачалоЭлемента("ПоСроку");
		
		ИмяКолонки = "ПросроченнаяПоСроку" + СтрокаЧГ0(Интервал.Код);
		ПросроченнаяПоСроку =  Формат(ЗадолженностьПоВиду[ИмяКолонки], ФорматнаяСтрока);
		
		ВывестиАтрибут(Компоновщик, "Код", Интервал.Код, "Ч,6");
		ВывестиАтрибут(Компоновщик, "Задолж", ПросроченнаяПоСроку);
		
		Компоновщик.ЗаписатьКонецЭлемента(); // ПоСроку
		
	КонецЦикла;
	
	Компоновщик.ЗаписатьКонецЭлемента(); // Итого
	
	Компоновщик.ЗаписатьКонецЭлемента(); // ЗадолжВид
	
КонецПроцедуры

&НаСервере
Процедура ВывестиУзел_ДопФайлы(Компоновщик, ПараметрыВыгрузки)
	
	ИмяРаздела = "ДополнительныеФайлы";
	
	Если НЕ РазделВключенВОтчет(ИмяРаздела, ПараметрыВыгрузки.ДеревоНастройкиСтраниц) Тогда
		Возврат;
	КонецЕсли;
	
	ЕстьТипизированныеФайлы = Ложь;
	Для Каждого ОписаниеФайла ИЗ СтруктураРеквизитовФормы.ДополнительныеТипизированныеФайлы Цикл
		Если ЗначениеЗаполнено(ОписаниеФайла.Значение.Адрес) Тогда
			ЕстьТипизированныеФайлы = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ ЕстьТипизированныеФайлы И СтруктураРеквизитовФормы.ДополнительныеФайлы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Компоновщик.ЗаписатьНачалоЭлемента("ДопФайлы");
	
	Для Каждого ОписаниеФайла ИЗ СтруктураРеквизитовФормы.ДополнительныеТипизированныеФайлы Цикл
		ТипФайла = ОписаниеФайла.Ключ;
		Описание = ОписаниеФайла.Значение;
		
		Если ЗначениеЗаполнено(Описание.Адрес) Тогда
			ДвоичныеДанныеФайла = ПолучитьИзВременногоХранилища(Описание.Адрес);
			ИмяФайла = Описание.Имя;
			
			ПредставлениеПакета = Base64Строка(ДвоичныеДанныеФайла);
			
			Компоновщик.ЗаписатьНачалоЭлемента("ДопФайл");
			
			ВывестиАтрибут(Компоновщик, "ИмяФайла", ИмяФайла, "Т,255");
			ВывестиАтрибут(Компоновщик, "БизнесТип", ТипФайла, "Т,255");
			Компоновщик.ЗаписатьТекст(ПредставлениеПакета);
			
			Компоновщик.ЗаписатьКонецЭлемента(); // ДопФайл
			
		КонецЕсли;
		
	КонецЦикла;
	
	НомерФайла = 0;
	Для Каждого СтруктураДопФайла Из СтруктураРеквизитовФормы.ДополнительныеФайлы Цикл
			НомерФайла = НомерФайла + 1;
			
			ЗаписьРегистраСведений = РегистрыСведений.ДополнительныеФайлыРегламентированныхОтчетов.СоздатьМенеджерЗаписи();
			ЗаписьРегистраСведений.РегламентированныйОтчет = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
			ЗаписьРегистраСведений.ВидДополнительногоФайла = "ДополнительныйФайл." + СтрокаЧГ0(НомерФайла);
			
			ЗаписьРегистраСведений.Прочитать();
			
			Если ЗаписьРегистраСведений.Выбран() Тогда
				ДвоичныеДанныеФайла = ЗаписьРегистраСведений.СодержимоеФайла.Получить();
				ИмяФайла = ЗаписьРегистраСведений.ИмяФайла;
				
				ПредставлениеПакета = Base64Строка(ДвоичныеДанныеФайла);
				
				Компоновщик.ЗаписатьНачалоЭлемента("ДопФайл");
				
				ВывестиАтрибут(Компоновщик, "ИмяФайла", ИмяФайла, "Т,255");
				ВывестиАтрибут(Компоновщик, "БизнесТип", "Прочее", "Т,255");
				Компоновщик.ЗаписатьТекст(ПредставлениеПакета);
				
				Компоновщик.ЗаписатьКонецЭлемента(); // ДопФайл
				
			КонецЕсли;
			
		КонецЦикла;
		
	Компоновщик.ЗаписатьКонецЭлемента(); // ДопФайлы
	
КонецПроцедуры

&НаСервере
Функция СчетОтмеченВСписке(СчетОтчета, ИмяСпискаСчетов)
	
	СписокСчетов = РеквизитФормыВЗначение(ИмяСпискаСчетов);
	
	СтрокаСчета = СписокСчетов.Найти(СчетОтчета, "Счет");
	
	Возврат СтрокаСчета <> Неопределено И СтрокаСчета.Включен;
	
КонецФункции

&НаСервере
Функция УзелСтруктурыВыгрузки(СтруктураВыгрузки, Путь)
	
	ИменаУзлов = СтрРазделить(Путь, "/", Ложь);
	
	Узел = СтруктураВыгрузки;
	
	Для Каждого ИмяУзла Из ИменаУзлов Цикл
		Узел = Узел.Строки.Найти(ИмяУзла, "Код");
		Если Узел = Неопределено Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Узел;
	
КонецФункции

&НаСервере
Процедура ВывестиСведенияПоШаблону(Компоновщик, ПараметрыВыгрузки, Сведения, ШаблонВыгрузки)
	
	Если ШаблонВыгрузки.Тип = "С" Тогда
		Если ШаблонВыгрузки.Обязательность = "Н"
		   И НЕ ЕстьСведенияВСоставномЭлементеВыгрузки(ПараметрыВыгрузки, Сведения, ШаблонВыгрузки) Тогда
			Возврат
		КонецЕсли;
		
		Компоновщик.ЗаписатьНачалоЭлемента(ШаблонВыгрузки.Код);
		
		Для Каждого СтрокаШаблона Из ШаблонВыгрузки.Строки Цикл
			Если СтрокаШаблона.Тип = "С" Тогда
				Если СтрокаШаблона.Многострочность Тогда
					ВывестиСведенияМСЧ(Компоновщик, ПараметрыВыгрузки, Сведения, СтрокаШаблона);
					
				Иначе
					Если СтрокаШаблона.Обязательность = "Н" Тогда
						Если ЕстьСведенияВСоставномЭлементеВыгрузки(ПараметрыВыгрузки, Сведения, СтрокаШаблона) Тогда
							ВывестиСведенияПоШаблону(Компоновщик, ПараметрыВыгрузки, Сведения, СтрокаШаблона);
						КонецЕсли;
					ИначеЕсли СтрокаШаблона.Обязательность = "О" Тогда
						ВывестиСведенияПоШаблону(Компоновщик, ПараметрыВыгрузки, Сведения, СтрокаШаблона);
					Иначе
						ВызватьИсключение "Непредусмотренный тип обязательности структуры";
					КонецЕсли;
					
				КонецЕсли;
				
			ИначеЕсли СтрокаШаблона.Тип = "А" Тогда
				ЗначениеАтрибута = Неопределено;
				
				Если ЗначениеЗаполнено(СтрокаШаблона.Ключ) Тогда
					ЗначениеАтрибута = Сведения[СтрокаШаблона.Ключ];
					Если ТипЗнч(ЗначениеАтрибута) = Тип("Число") Тогда
						ЗначениеАтрибута = ЗначениеПриведенноеКЕдиницеИзмерения(ЗначениеАтрибута, ПараметрыВыгрузки);
					КонецЕсли;
					
				ИначеЕсли ЗначениеЗаполнено(СтрокаШаблона.ЗначениеПоУмолчанию) Тогда
					ЗначениеАтрибута = СтрокаШаблона.ЗначениеПоУмолчанию;
					
				Иначе
					Продолжить;
					
				КонецЕсли;
				
				ТипАтрибута = ФорматАтрибута(СтрокаШаблона);
				
				Если СтрокаШаблона.Обязательность = "О" Тогда
					ВывестиАтрибут(Компоновщик, СтрокаШаблона.Код, ЗначениеАтрибута, ТипАтрибута);
				ИначеЕсли СтрокаШаблона.Обязательность = "Н" Тогда
					ВывестиНеобязательныйАтрибут(Компоновщик, СтрокаШаблона.Код, ЗначениеАтрибута, ТипАтрибута);
				Иначе
					ВызватьИсключение "Непредусмотренный тип обязательности атрибута";
				КонецЕсли;
				
			Иначе
				ВызватьИсключение "Непредусмотренный тип узла шаблона формирования файла";
				
			КонецЕсли;
			
		КонецЦикла;
		
		Компоновщик.ЗаписатьКонецЭлемента();
		
	Иначе
		ВызватьИсключение "Непредусмотренный тип узла шаблона формирования файла";
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЕстьСведенияВСоставномЭлементеВыгрузки(ПараметрыВыгрузки, Сведения, ШаблонВыгрузки)
	
	Если ШаблонВыгрузки.Тип = "С" Тогда
		Для Каждого СтрокаШаблона Из ШаблонВыгрузки.Строки Цикл
			Если СтрокаШаблона.Тип = "С" Тогда
				Если СтрокаШаблона.Многострочность Тогда
					НомерСтроки = 1;
					Пока ЕстьСтрокаСведенийМСЧ(Сведения, СтрокаШаблона, НомерСтроки) Цикл
						Если ЗаполненаСтрокаМСЧ(ПараметрыВыгрузки, Сведения, СтрокаШаблона, НомерСтроки) Тогда
							Возврат Истина;
						КонецЕсли;
						
						НомерСтроки = НомерСтроки + 1;
					КонецЦикла;
					
				Иначе
					Если ЕстьСведенияВСоставномЭлементеВыгрузки(ПараметрыВыгрузки, Сведения, СтрокаШаблона) Тогда
						Возврат Истина;
					КонецЕсли;
					
				КонецЕсли;
				
			ИначеЕсли СтрокаШаблона.Тип = "А" Тогда
				ЗначениеАтрибута = Неопределено;
				Если ЗначениеЗаполнено(СтрокаШаблона.Ключ) Тогда
					ЗначениеАтрибута = Сведения[СтрокаШаблона.Ключ];
					Если ТипЗнч(ЗначениеАтрибута) = Тип("Число") Тогда
						ЗначениеАтрибута = ЗначениеПриведенноеКЕдиницеИзмерения(ЗначениеАтрибута, ПараметрыВыгрузки);
					КонецЕсли;
				Иначе
					Продолжить;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(ЗначениеАтрибута) Тогда
					Возврат Истина;
				КонецЕсли;
				
			Иначе
				ВызватьИсключение "Непредусмотренный тип узла шаблона формирования файла";
				
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		ВызватьИсключение "Непредусмотренный тип узла шаблона формирования файла";
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаСервере
Процедура ВывестиСведенияМСЧ(Компоновщик, ПараметрыВыгрузки, Сведения, ШаблонВыгрузки)
	
	НомерСтроки = 1;
	Пока ЕстьСтрокаСведенийМСЧ(Сведения, ШаблонВыгрузки, НомерСтроки) Цикл
		Если ШаблонВыгрузки.Обязательность = "О"
		 ИЛИ ЗаполненаСтрокаМСЧ(ПараметрыВыгрузки, Сведения, ШаблонВыгрузки, НомерСтроки) Тогда
			Компоновщик.ЗаписатьНачалоЭлемента(ШаблонВыгрузки.Код);
			
			Для Каждого СтрокаШаблона Из ШаблонВыгрузки.Строки Цикл
				Если СтрокаШаблона.Тип = "А" Тогда
					ЗначениеАтрибута = Неопределено;
					Если ЗначениеЗаполнено(СтрокаШаблона.Ключ) Тогда
						ИмяПоказателя = СтрокаШаблона.Ключ + "_" + СтрокаЧГ0(НомерСтроки);
						ЗначениеАтрибута = Сведения[ИмяПоказателя];
						Если ТипЗнч(ЗначениеАтрибута) = Тип("Число") Тогда
							ЗначениеАтрибута = ЗначениеПриведенноеКЕдиницеИзмерения(ЗначениеАтрибута, ПараметрыВыгрузки);
						КонецЕсли;
					Иначе
						Продолжить;
					КонецЕсли;
					
					ТипАтрибута = ФорматАтрибута(СтрокаШаблона);
					
					Если СтрокаШаблона.Обязательность = "О" Тогда
						ВывестиАтрибут(Компоновщик, СтрокаШаблона.Код, ЗначениеАтрибута, ТипАтрибута);
					ИначеЕсли СтрокаШаблона.Обязательность = "Н" Тогда
						ВывестиНеобязательныйАтрибут(Компоновщик, СтрокаШаблона.Код, ЗначениеАтрибута, ТипАтрибута);
					Иначе
						ВызватьИсключение "Непредусмотренный тип обязательности атрибута";
					КонецЕсли;
					
				Иначе
					ВызватьИсключение "Непредусмотренный тип узла шаблона формирования файла";
					
				КонецЕсли;
					
			КонецЦикла;
			
			Компоновщик.ЗаписатьКонецЭлемента();
			
		КонецЕсли;
		
		НомерСтроки = НомерСтроки + 1;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ЕстьСтрокаСведенийМСЧ(Сведения, ШаблонСтроки, НомерСтроки)
	
	Для Каждого СтрокаШаблона Из ШаблонСтроки.Строки Цикл
		Если ЗначениеЗаполнено(СтрокаШаблона.Ключ) Тогда
			ИмяПоказателя = СтрокаШаблона.Ключ + "_" + СтрокаЧГ0(НомерСтроки);
			Если Сведения.Свойство(ИмяПоказателя) Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

&НаСервере
Функция ЗаполненаСтрокаМСЧ(ПараметрыВыгрузки, Сведения, ШаблонСтроки, НомерСтроки)
	
	Для Каждого СтрокаШаблона Из ШаблонСтроки.Строки Цикл
		Если ЗначениеЗаполнено(СтрокаШаблона.Ключ) Тогда
			ИмяПоказателя = СтрокаШаблона.Ключ + "_" + СтрокаЧГ0(НомерСтроки);
			ЗначениеАтрибута = Сведения[ИмяПоказателя];
			Если ТипЗнч(ЗначениеАтрибута) = Тип("Число") Тогда
				ЗначениеАтрибута = ЗначениеПриведенноеКЕдиницеИзмерения(ЗначениеАтрибута, ПараметрыВыгрузки);
			КонецЕсли;
				
			Если ЗначениеЗаполнено(ЗначениеАтрибута) Тогда
				Возврат Истина;
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

&НаСервере
Функция ФорматАтрибута(СтрокаШаблона)
	
	ФорматАтрибута = Неопределено;
	
	Если СтрокаШаблона.Формат = "T" Тогда
		ФорматАтрибута = "Т";
		Если ЗначениеЗаполнено(СтрокаШаблона.МаксРазмерность) Тогда
			ФорматАтрибута = ФорматАтрибута + "," + СтрокаЧГ0(СтрокаШаблона.МаксРазмерность);
		КонецЕсли;
		
	ИначеЕсли СтрокаШаблона.Формат = "N" Тогда
		ФорматАтрибута = "Ч";
		Если ЗначениеЗаполнено(СтрокаШаблона.МаксРазмерность) И СтрокаШаблона.МаксРазмерность <> 99999 Тогда
			ФорматАтрибута = ФорматАтрибута + "," + СтрокаЧГ0(СтрокаШаблона.МаксРазмерность);
			Если ЗначениеЗаполнено(СтрокаШаблона.МинРазмерность) И СтрокаШаблона.МинРазмерность <> 99999 Тогда
				ФорматАтрибута = ФорматАтрибута + "," + СтрокаЧГ0(СтрокаШаблона.МинРазмерность);
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		ВызватьИсключение "Непредусмотренный тип формата атрибута";
	КонецЕсли;
	
	Возврат ФорматАтрибута;
	
КонецФункции

&НаСервере
Функция ПредставлениеГода(ГодРаздела)
	
	Возврат Формат(ГодРаздела, "ЧЦ=4; ЧВН=; ЧГ=0");
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция КодМесяца(НомерМесяца)
	
	КодМесяца = "";
	
	Если НомерМесяца = 1 Тогда
		КодМесяца = "35";
		
	ИначеЕсли НомерМесяца = 2 Тогда
		КодМесяца = "36";
		
	ИначеЕсли НомерМесяца = 3 Тогда
		КодМесяца = "21";
		
	ИначеЕсли НомерМесяца = 4 Тогда
		КодМесяца = "38";
		
	ИначеЕсли НомерМесяца = 5 Тогда
		КодМесяца = "39";
		
	ИначеЕсли НомерМесяца = 6 Тогда
		КодМесяца = "31";
		
	ИначеЕсли НомерМесяца = 7 Тогда
		КодМесяца = "41";
		
	ИначеЕсли НомерМесяца = 8 Тогда
		КодМесяца = "42";
		
	ИначеЕсли НомерМесяца = 9 Тогда
		КодМесяца = "33";
		
	ИначеЕсли НомерМесяца = 10 Тогда
		КодМесяца = "44";
		
	ИначеЕсли НомерМесяца = 11 Тогда
		КодМесяца = "45";
		
	ИначеЕсли НомерМесяца = 12 Тогда
		КодМесяца = "34";
		
	КонецЕсли;
	
	Возврат КодМесяца;
	
КонецФункции

&НаСервере
Функция КодКвартала(НомерКвартала)
	
	КодКвартала = "";
	
	Если НомерКвартала = 1 Тогда
		КодКвартала = "21";
		
	ИначеЕсли НомерКвартала = 2 Тогда
		КодКвартала = "31";
		
	ИначеЕсли НомерКвартала = 3 Тогда
		КодКвартала = "33";
		
	ИначеЕсли НомерКвартала = 4 Тогда
		КодКвартала = "34";
		
	Иначе
		ВызватьИсключение "Непредусмотренный номер квартала при вызове функции КодКвартала()";
		
	КонецЕсли;
	
	Возврат КодКвартала;
	
КонецФункции

&НаСервере
Функция КодЕдиницыИзмерения(Множитель)
	
	КодЕдиницыИзмерения = "";
	
	Если Множитель = 1 Тогда
		КодЕдиницыИзмерения = "383";
		
	ИначеЕсли Множитель = 1000 Тогда
		КодЕдиницыИзмерения = "384";
		
	ИначеЕсли Множитель = 1000000 Тогда
		КодЕдиницыИзмерения = "385";
		
	Иначе
		ВызватьИсключение "Непредусмотренный множитель при вызове функции КодЕдиницыИзмерения()";
		
	КонецЕсли;
	
	Возврат КодЕдиницыИзмерения;
	
КонецФункции

&НаСервере
Функция ДелительПоЕдиницеИзмерения(ЕдиницаИзмерения)
	
	Делитель = 0;
	
	Если ЕдиницаИзмерения = ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1 Тогда
		Делитель = 1;
	ИначеЕсли ЕдиницаИзмерения = ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1000 Тогда
		Делитель = 1000;
	ИначеЕсли ЕдиницаИзмерения = ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1000000 Тогда
		Делитель = 1000000;
	КонецЕсли;
	
	Возврат Делитель;
	
КонецФункции

&НаСервере
Функция ФорматнаяСтрокаПоЕдиницеИзмерения(Множитель)
	
	ФорматнаяСтрока = "";
	
	Если Множитель = 1 Тогда
		ФорматнаяСтрока = "ЧДЦ=; ЧС=; ЧН=0; ЧГ=0";
		
	ИначеЕсли Множитель = 1000 Тогда
		ФорматнаяСтрока = "ЧДЦ=; ЧС=3; ЧН=0; ЧГ=0";
		
	ИначеЕсли Множитель = 1000000 Тогда
		ФорматнаяСтрока = "ЧДЦ=; ЧС=6; ЧН=0; ЧГ=0";
		
	Иначе
		ВызватьИсключение "Непредусмотренный множитель при вызове функции ФорматнаяСтрокаПоЕдиницеИзмерения()";
		
	КонецЕсли;
	
	Возврат ФорматнаяСтрока;
	
КонецФункции

&НаСервере
Функция РазделВключенВОтчет(ИмяРаздела, Знач СписокРазделов = Неопределено)
	
	Если СписокРазделов = Неопределено Тогда
		СписокРазделов = ДанныеФормыВЗначение(мДеревоВыбранныхСтраниц, Тип("ДеревоЗначений"));
	КонецЕсли;
	
	Результат = Ложь;
	
	НайденнаяСтраницаОтчета = СписокРазделов.Строки.Найти(ИмяРаздела, "ИмяСтраницы", Истина);
	
	Если НайденнаяСтраницаОтчета <> Неопределено Тогда
		Результат = (НайденнаяСтраницаОтчета.ПоказатьСтраницу = 1);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ПредставлениеСубконтоИННКПП(Выборка, НомерСубконто)
	
	ПредставлениеСубконто = Выборка["ПредставлениеСубконто" + НомерСубконто];
	
	ПредставлениеИНН = СокрЛП(Выборка["Субконто" + НомерСубконто + "ИНН"]);
	ПредставлениеКПП = СокрЛП(Выборка["Субконто" + НомерСубконто + "КПП"]);
	
	Если ЗначениеЗаполнено(ПредставлениеИНН) И ЗначениеЗаполнено(ПредставлениеКПП)
	   И СтрДлина(ПредставлениеИНН) = 10 И СтрДлина(ПредставлениеКПП) = 9 Тогда
		// Корректно указанные ИНН и КПП юридического лица.
		ПредставлениеСубконто = ПредставлениеСубконто
		                      + " " + ПредставлениеИНН
		                      + " " + ПредставлениеКПП;
		
	ИначеЕсли ЗначениеЗаполнено(ПредставлениеИНН) И СтрДлина(ПредставлениеИНН) = 12 Тогда
		// Корректно указанный ИНН физического лица.
		ПредставлениеСубконто = ПредставлениеСубконто
		                      + " " + ПредставлениеИНН;
		
	КонецЕсли;
	
	Возврат ПредставлениеСубконто;
	
КонецФункции

&НаСервере
Функция ИННКонтрагентаПоСубконто(Выборка, НомерСубконто)
	
	ИНН = "";
	
	ИмяКолонкиИНН = "Субконто" + НомерСубконто + "ИНН";
	
	Если Выборка.Владелец().Колонки.Найти(ИмяКолонкиИНН) <> Неопределено Тогда
		ПредставлениеИНН = СокрЛП(Выборка[ИмяКолонкиИНН]);
		
		Если ЗначениеЗаполнено(ПредставлениеИНН)
		   И (СтрДлина(ПредставлениеИНН) = 10 ИЛИ СтрДлина(ПредставлениеИНН) = 12) Тогда
			ИНН = ПредставлениеИНН;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ИНН;
	
КонецФункции

&НаСервере
Процедура ОбработатьПоказателиПередОтправкой_Баланс(ПоказателиОтчета)
	
	// Вычитаемые показатели (в показателях отчета хранятся со знаком "-", при выгрузке должны быть положительными).
	ВычитаемыеПоказатели = Новый Массив;
	
	ВычитаемыеПоказатели.Добавить("П000100132004");
	ВычитаемыеПоказатели.Добавить("П000100132005");
	ВычитаемыеПоказатели.Добавить("П000100132006");
	
	Для Каждого ИмяПоказателя Из ВычитаемыеПоказатели Цикл
		Если ПоказателиОтчета.Свойство(ИмяПоказателя) Тогда
			ЗначениеПоказателя = ПоказателиОтчета[ИмяПоказателя];
			Если ЗначениеПоказателя < 0 Тогда
				ПоказателиОтчета.Вставить(ИмяПоказателя, -ЗначениеПоказателя);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьПоказателиПередОтправкой_ОФР(ПоказателиОтчета)
	
	// Вычитаемые показатели (в показателях отчета хранятся со знаком "-", при выгрузке должны быть положительными).
	ВычитаемыеПоказатели = Новый Массив;
	
	ВычитаемыеПоказатели.Добавить("П000100212004");
	ВычитаемыеПоказатели.Добавить("П000100212005");
	ВычитаемыеПоказатели.Добавить("П000100221004");
	ВычитаемыеПоказатели.Добавить("П000100221005");
	ВычитаемыеПоказатели.Добавить("П000100222004");
	ВычитаемыеПоказатели.Добавить("П000100222005");
	ВычитаемыеПоказатели.Добавить("П000100233004");
	ВычитаемыеПоказатели.Добавить("П000100233005");
	ВычитаемыеПоказатели.Добавить("П000100235004");
	ВычитаемыеПоказатели.Добавить("П000100235005");
	ВычитаемыеПоказатели.Добавить("П000100241004");
	ВычитаемыеПоказатели.Добавить("П000100241005");
	
	Для Каждого ИмяПоказателя Из ВычитаемыеПоказатели Цикл
		Если ПоказателиОтчета.Свойство(ИмяПоказателя) Тогда
			ЗначениеПоказателя = ПоказателиОтчета[ИмяПоказателя];
			Если ЗначениеПоказателя < 0 Тогда
				ПоказателиОтчета.Вставить(ИмяПоказателя, -ЗначениеПоказателя);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьПоказателиПередОтправкой_ОИК(ПоказателиОтчета)
	
	// Вычитаемые показатели (в показателях отчета хранятся со знаком "-", при выгрузке должны быть положительными).
	ВычитаемыеПоказатели = Новый Массив;
	
	ВычитаемыеПоказатели.Добавить("П000100310004");
	
	ВычитаемыеПоказатели.Добавить("П000100322003");
	ВычитаемыеПоказатели.Добавить("П000100322005");
	ВычитаемыеПоказатели.Добавить("П000100322006");
	ВычитаемыеПоказатели.Добавить("П000100322007");
	ВычитаемыеПоказатели.Добавить("П000100322008");
	ВычитаемыеПоказатели.Добавить("П000100322107");
	ВычитаемыеПоказатели.Добавить("П000100322108");
	ВычитаемыеПоказатели.Добавить("П000100322205");
	ВычитаемыеПоказатели.Добавить("П000100322207");
	ВычитаемыеПоказатели.Добавить("П000100322208");
	ВычитаемыеПоказатели.Добавить("П000100322305");
	ВычитаемыеПоказатели.Добавить("П000100322307");
	ВычитаемыеПоказатели.Добавить("П000100322308");
	ВычитаемыеПоказатели.Добавить("П000100322403");
	ВычитаемыеПоказатели.Добавить("П000100322408");
	ВычитаемыеПоказатели.Добавить("П000100322503");
	ВычитаемыеПоказатели.Добавить("П000100322508");
	ВычитаемыеПоказатели.Добавить("П000100322608");
	ВычитаемыеПоказатели.Добавить("П000100322707");
	ВычитаемыеПоказатели.Добавить("П000100322708");
	
	ВычитаемыеПоказатели.Добавить("П000100320004");
	
	ВычитаемыеПоказатели.Добавить("П000100332003");
	ВычитаемыеПоказатели.Добавить("П000100332005");
	ВычитаемыеПоказатели.Добавить("П000100332006");
	ВычитаемыеПоказатели.Добавить("П000100332007");
	ВычитаемыеПоказатели.Добавить("П000100332008");
	ВычитаемыеПоказатели.Добавить("П000100332107");
	ВычитаемыеПоказатели.Добавить("П000100332108");
	ВычитаемыеПоказатели.Добавить("П000100332205");
	ВычитаемыеПоказатели.Добавить("П000100332207");
	ВычитаемыеПоказатели.Добавить("П000100332208");
	ВычитаемыеПоказатели.Добавить("П000100332305");
	ВычитаемыеПоказатели.Добавить("П000100332307");
	ВычитаемыеПоказатели.Добавить("П000100332308");
	ВычитаемыеПоказатели.Добавить("П000100332403");
	ВычитаемыеПоказатели.Добавить("П000100332408");
	ВычитаемыеПоказатели.Добавить("П000100332503");
	ВычитаемыеПоказатели.Добавить("П000100332508");
	ВычитаемыеПоказатели.Добавить("П000100332608");
	ВычитаемыеПоказатели.Добавить("П000100332707");
	ВычитаемыеПоказатели.Добавить("П000100332708");
	
	ВычитаемыеПоказатели.Добавить("П000100330004");
	
	Для Каждого ИмяПоказателя Из ВычитаемыеПоказатели Цикл
		Если ПоказателиОтчета.Свойство(ИмяПоказателя) Тогда
			ЗначениеПоказателя = ПоказателиОтчета[ИмяПоказателя];
			Если ЗначениеПоказателя < 0 Тогда
				ПоказателиОтчета.Вставить(ИмяПоказателя, -ЗначениеПоказателя);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьПоказателиПередОтправкой_ОДДС(ПоказателиОтчета)
	
	// Вычитаемые показатели (в показателях отчета хранятся со знаком "-", при выгрузке должны быть положительными).
	ВычитаемыеПоказатели = Новый Массив;
	
	СписокВычитаемыхСтрок = "4120,4121,4122,4123,4124,4129"
	                      + ",4220,4221,4222,4223,4224,4229"
	                      + ",4320,4321,4322,4323,4329";
	МассивВычитаемыхСтрок = СтрРазделить(СписокВычитаемыхСтрок, ",");
	Для Каждого ВычитаемаяСтрока ИЗ МассивВычитаемыхСтрок Цикл
		ВычитаемыеПоказатели.Добавить("П000100" + СокрЛП(ВычитаемаяСтрока) + "03");
		ВычитаемыеПоказатели.Добавить("П000100" + СокрЛП(ВычитаемаяСтрока) + "04");
	КонецЦикла;
	
	Для Каждого ИмяПоказателя Из ВычитаемыеПоказатели Цикл
		Если ПоказателиОтчета.Свойство(ИмяПоказателя) Тогда
			ЗначениеПоказателя = ПоказателиОтчета[ИмяПоказателя];
			Если ЗначениеПоказателя < 0 Тогда
				ПоказателиОтчета.Вставить(ИмяПоказателя, -ЗначениеПоказателя);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьПоказателиПередОтправкой_ОЦИС(ПоказателиОтчета)
	
	// Вычитаемые показатели (в показателях отчета хранятся со знаком "-", при выгрузке должны быть положительными).
	ВычитаемыеПоказатели = Новый Массив;
	
	СписокВычитаемыхСтрок = "6310,6311,6312,6313,6320,6321,6322,6323,6324,6325,6326,6330,6350,6300";
	МассивВычитаемыхСтрок = СтрРазделить(СписокВычитаемыхСтрок, ",");
	Для Каждого ВычитаемаяСтрока ИЗ МассивВычитаемыхСтрок Цикл
		ВычитаемыеПоказатели.Добавить("П000100" + СокрЛП(ВычитаемаяСтрока) + "04");
		ВычитаемыеПоказатели.Добавить("П000100" + СокрЛП(ВычитаемаяСтрока) + "05");
	КонецЦикла;
	
	Для Каждого ИмяПоказателя Из ВычитаемыеПоказатели Цикл
		Если ПоказателиОтчета.Свойство(ИмяПоказателя) Тогда
			ЗначениеПоказателя = ПоказателиОтчета[ИмяПоказателя];
			Если ЗначениеПоказателя < 0 Тогда
				ПоказателиОтчета.Вставить(ИмяПоказателя, -ЗначениеПоказателя);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#Область КомпоновщикXML

&НаСервере
Функция НовыйКомпоновщикXML(ИмяФайла, Кодировка = "windows-1251")
	
	КомпоновщикXML = Новый ЗаписьXML();
	КомпоновщикXML.ОткрытьФайл(ИмяФайла, Кодировка);
	КомпоновщикXML.ЗаписатьОбъявлениеXML();
	
	Возврат КомпоновщикXML;
	
КонецФункции

&НаСервере
Процедура ВывестиАтрибут(КомпоновщикXML, ИмяАтрибута, ЗначениеАтрибута, ТипАтрибута = "Т")
	
	ОписаниеТипаАтрибута = СтрРазделить(ТипАтрибута, ",");
	
	Если ОписаниеТипаАтрибута[0] = "Д" Тогда
		ПредставлениеЗначения = Формат(ЗначениеАтрибута, "ДФ=dd.MM.yyyy");
		
	ИначеЕсли ОписаниеТипаАтрибута[0] = "Т" Тогда
		ПредставлениеЗначения = СокрЛП(ЗначениеАтрибута);
		Если ОписаниеТипаАтрибута.Количество() >= 2 Тогда
			МаксимальнаяДлина = Число(ОписаниеТипаАтрибута[1]);
			ПредставлениеЗначения = Лев(ПредставлениеЗначения, МаксимальнаяДлина);
		КонецЕсли;
		
	ИначеЕсли ОписаниеТипаАтрибута[0] = "Ч" Тогда
		СтрокаФормата = "ЧРД=.;ЧН=0;ЧГ=;";
		
		Если ОписаниеТипаАтрибута.Количество() >= 2 Тогда
			РазмерностьПолная = Число(ОписаниеТипаАтрибута[1]);
			СтрокаФормата = СтрокаФормата + "ЧЦ=" + Формат(РазмерностьПолная, "ЧГ=") + ";";
		КонецЕсли;
		
		Если ОписаниеТипаАтрибута.Количество() >= 3 Тогда
			РазмерностьДробнойЧасти = Число(ОписаниеТипаАтрибута[2]);
			СтрокаФормата = СтрокаФормата + "ЧДЦ=" + Формат(РазмерностьДробнойЧасти, "ЧГ=") + ";";
		КонецЕсли;
		
		ПредставлениеЗначения = Формат(ЗначениеАтрибута, СтрокаФормата);
		
	Иначе
		ПредставлениеЗначения = СокрЛП(ЗначениеАтрибута);
		
	КонецЕсли;
	
	КомпоновщикXML.ЗаписатьАтрибут(ИмяАтрибута, ПредставлениеЗначения);
	
КонецПроцедуры

&НаСервере
Процедура ВывестиНеобязательныйАтрибут(КомпоновщикXML, ИмяАтрибута, ЗначениеАтрибута, ТипАтрибута = "Т")
	
	Если ЗначениеЗаполнено(ЗначениеАтрибута) Тогда
		ВывестиАтрибут(КомпоновщикXML, ИмяАтрибута, ЗначениеАтрибута, ТипАтрибута);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЗначениеПриведенноеКЕдиницеИзмерения(Значение, ФорматнаяСтрока)
	
	Возврат Число(Формат(Значение, ФорматнаяСтрока));
	
КонецФункции

#КонецОбласти

#Область АвторасчетПоказателей

&НаСервере
Процедура ЗаполнитьСтруктуруЗависимыхЯчеекДляАвторасчета()
	
	СтруктураЗависимыхЯчеекДляАвторасчета = Новый Структура;
	
	// Бухгалтерский баланс.
	Зависимость = Новый Структура;
	Зависимость.Вставить("П000100110004", "П000100111004;П000100112004;П000100113004;П000100114004;П000100115004;П000100116004;П000100117004;П000100118004;П000100119004");
	Зависимость.Вставить("П000100110005", "П000100111005;П000100112005;П000100113005;П000100114005;П000100115005;П000100116005;П000100117005;П000100118005;П000100119005");
	Зависимость.Вставить("П000100110006", "П000100111006;П000100112006;П000100113006;П000100114006;П000100115006;П000100116006;П000100117006;П000100118006;П000100119006");
	Зависимость.Вставить("П000100120004", "П000100121004;П000100122004;П000100123004;П000100124004;П000100125004;П000100126004");
	Зависимость.Вставить("П000100120005", "П000100121005;П000100122005;П000100123005;П000100124005;П000100125005;П000100126005");
	Зависимость.Вставить("П000100120006", "П000100121006;П000100122006;П000100123006;П000100124006;П000100125006;П000100126006");
	Зависимость.Вставить("П000100160004", "П000100110004;П000100120004;П000100111004;П000100112004;П000100113004;П000100114004;П000100115004;П000100116004;П000100117004;П000100118004;П000100119004;П000100121004;П000100122004;П000100123004;П000100124004;П000100125004;П000100126004");
	Зависимость.Вставить("П000100160005", "П000100110005;П000100120005;П000100111005;П000100112005;П000100113005;П000100114005;П000100115005;П000100116005;П000100117005;П000100118005;П000100119005;П000100121005;П000100122005;П000100123005;П000100124005;П000100125005;П000100126005");
	Зависимость.Вставить("П000100160006", "П000100110006;П000100120006;П000100111006;П000100112006;П000100113006;П000100114006;П000100115006;П000100116006;П000100117006;П000100118006;П000100119006;П000100121006;П000100122006;П000100123006;П000100124006;П000100125006;П000100126006");
	Зависимость.Вставить("П000100130004", "П000100131004;П000100132004;П000100134004;П000100135004;П000100136004;П000100137004");
	Зависимость.Вставить("П000100130005", "П000100131005;П000100132005;П000100134005;П000100135005;П000100136005;П000100137005");
	Зависимость.Вставить("П000100130006", "П000100131006;П000100132006;П000100134006;П000100135006;П000100136006;П000100137006");
	Зависимость.Вставить("П000100140004", "П000100141004;П000100142004;П000100143004;П000100145004");
	Зависимость.Вставить("П000100140005", "П000100141005;П000100142005;П000100143005;П000100145005");
	Зависимость.Вставить("П000100140006", "П000100141006;П000100142006;П000100143006;П000100145006");
	Зависимость.Вставить("П000100150004", "П000100151004;П000100152004;П000100153004;П000100154004;П000100155004");
	Зависимость.Вставить("П000100150005", "П000100151005;П000100152005;П000100153005;П000100154005;П000100155005");
	Зависимость.Вставить("П000100150006", "П000100151006;П000100152006;П000100153006;П000100154006;П000100155006");
	Зависимость.Вставить("П000100170004", "П000100130004;П000100140004;П000100150004;П000100131004;П000100132004;П000100134004;П000100135004;П000100136004;П000100137004;П000100141004;П000100142004;П000100143004;П000100145004;П000100151004;П000100152004;П000100153004;П000100154004;П000100155004");
	Зависимость.Вставить("П000100170005", "П000100130005;П000100140005;П000100150005;П000100131005;П000100132005;П000100134005;П000100135005;П000100136005;П000100137005;П000100141005;П000100142005;П000100143005;П000100145005;П000100151005;П000100152005;П000100153005;П000100154005;П000100155005");
	Зависимость.Вставить("П000100170006", "П000100130006;П000100140006;П000100150006;П000100131006;П000100132006;П000100134006;П000100135006;П000100136006;П000100137006;П000100141006;П000100142006;П000100143006;П000100145006;П000100151006;П000100152006;П000100153006;П000100154006;П000100155006");
	
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("Баланс", Зависимость);
	
	// Отчет о финансовых результатах.
	Зависимость = Новый Структура;
	Зависимость.Вставить("П000100210004", "П000100211004;П000100212004");
	Зависимость.Вставить("П000100210005", "П000100211005;П000100212005");
	Зависимость.Вставить("П000100220004", "П000100210004;П000100221004;П000100222004;П000100211004;П000100212004");
	Зависимость.Вставить("П000100220005", "П000100210005;П000100221005;П000100222005;П000100211005;П000100212005");
	Зависимость.Вставить("П000100230004", "П000100220004;П000100231004;П000100232004;П000100233004;П000100234004;П000100235004;П000100210004;П000100221004;П000100222004;П000100211004;П000100212004");
	Зависимость.Вставить("П000100230005", "П000100220005;П000100231005;П000100232005;П000100233005;П000100234005;П000100235005;П000100210005;П000100221005;П000100222005;П000100211005;П000100212005");
	Зависимость.Вставить("П000100240004", "П000100230004;П000100241004;П000100243004;П000100245004;П000100246004;П000100220004;П000100231004;П000100232004;П000100233004;П000100234004;П000100235004;П000100210004;П000100221004;П000100222004;П000100211004;П000100212004");
	Зависимость.Вставить("П000100240005", "П000100230005;П000100241005;П000100243005;П000100245005;П000100246005;П000100220005;П000100231005;П000100232005;П000100233005;П000100234005;П000100235005;П000100210005;П000100221005;П000100222005;П000100211005;П000100212005");
	Зависимость.Вставить("П000100250004", "П000100240004;П000100251004;П000100252004;П000100230004;П000100241004;П000100243004;П000100245004;П000100246004;П000100220004;П000100231004;П000100232004;П000100233004;П000100234004;П000100235004;П000100210004;П000100221004;П000100222004;П000100211004;П000100212004");
	Зависимость.Вставить("П000100250005", "П000100240005;П000100251005;П000100252005;П000100230005;П000100241005;П000100243005;П000100245005;П000100246005;П000100220005;П000100231005;П000100232005;П000100233005;П000100234005;П000100235005;П000100210005;П000100221005;П000100222005;П000100211005;П000100212005");
	
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("ОФР", Зависимость);
	
	// Отчет об изменениях капитала.
	Зависимость = Новый Структура;
	Зависимость.Вставить("П000100310008", "П000100310003;П000100310004;П000100310005;П000100310006;П000100310007");
	Зависимость.Вставить("П000100321108", "П000100321107");
	Зависимость.Вставить("П000100321208", "П000100321205;П000100321207");
	Зависимость.Вставить("П000100321308", "П000100321305;П000100321307");
	Зависимость.Вставить("П000100321408", "П000100321403;П000100321404;П000100321405");
	Зависимость.Вставить("П000100321408", "П000100321403;П000100321404;П000100321405");
	Зависимость.Вставить("П000100321608", "П000100321603;П000100321604;П000100321605;П000100321606;П000100321607");
	Зависимость.Вставить("П000100321003", "П000100321403;П000100321503;П000100321603;П100100321003");
	Зависимость.Вставить("П000100321004", "П000100321404;П000100321504;П000100321604;П100100321004");
	Зависимость.Вставить("П000100321005", "П000100321205;П000100321305;П000100321405;П000100321505;П000100321605;П100100321005");
	Зависимость.Вставить("П000100321006", "П000100321606;П100100321006");
	Зависимость.Вставить("П000100321007", "П000100321107;П000100321207;П000100321307;П000100321507;П000100321607;П100100321007");
	Зависимость.Вставить("П000100321008", "П000100321108;П000100321208;П000100321308;П000100321408;П000100321608;П100100321008;П000100321107;П000100321205;П000100321207;П000100321305;П000100321307;П000100321403;П000100321404;П000100321405;П000100321603;П000100321604;П000100321605;П000100321606;П000100321607;П100100321003;П100100321004;П100100321005;П100100321006;П100100321007");
	Зависимость.Вставить("П000100322108", "П000100322107");
	Зависимость.Вставить("П000100322208", "П000100322205;П000100322207");
	Зависимость.Вставить("П000100322308", "П000100322305;П000100322307");
	Зависимость.Вставить("П000100322408", "П000100322403;П000100322404;П000100322405;П000100322407");
	Зависимость.Вставить("П000100322508", "П000100322503;П000100322504;П000100322505;П000100322507");
	Зависимость.Вставить("П000100322608", "П000100322603;П000100322604;П000100322605;П000100322606;П000100322607");
	Зависимость.Вставить("П000100322708", "П000100322707");
	Зависимость.Вставить("П000100324007", "П000100324006");
	Зависимость.Вставить("П000100322003", "П000100322403;П000100322503;П000100322603");
	Зависимость.Вставить("П000100322004", "П000100322404;П000100322504;П000100322604");
	Зависимость.Вставить("П000100322005", "П000100322205;П000100322305;П000100322405;П000100322505;П000100322605");
	Зависимость.Вставить("П000100322006", "П000100322606");
	Зависимость.Вставить("П000100322007", "П000100322107;П000100322207;П000100322307;П000100322407;П000100322507;П000100322607;П000100322707");
	Зависимость.Вставить("П000100322008", "П000100322108;П000100322208;П000100322308;П000100322408;П000100322508;П000100322608;П000100322708;П000100322107;П000100322205;П000100322207;П000100322305;П000100322307;П000100322403;П000100322404;П000100322405;П000100322407;П000100322503;П000100322504;П000100322505;П000100322507;П000100322603;П000100322604;П000100322605;П000100322606;П000100322607;П000100322707;П000100322003;П000100322004;П000100322005;П000100322006;П000100322007;П000100322403;П000100322503;П000100322603;П000100322404;П000100322504;П000100322604;П000100322205;П000100322305;П000100322405;П000100322505;П000100322605;П000100322606;П000100322107;П000100322207;П000100322307;П000100322407;П000100322507;П000100322607;П000100322707");
	Зависимость.Вставить("П000100320008", "П000100320003;П000100320004;П000100320005;П000100320006;П000100320007");
	Зависимость.Вставить("П000100331108", "П000100331107");
	Зависимость.Вставить("П000100331208", "П000100331205;П000100331207");
	Зависимость.Вставить("П000100331308", "П000100331305;П000100331307");
	Зависимость.Вставить("П000100331408", "П000100331403;П000100331404;П000100331405");
	Зависимость.Вставить("П000100331608", "П000100331603;П000100331604;П000100331605;П000100331606;П000100331607");
	Зависимость.Вставить("П000100331003", "П000100331403;П000100331503;П000100331603;П100100331003");
	Зависимость.Вставить("П000100331004", "П000100331404;П000100331504;П000100331604;П100100331004");
	Зависимость.Вставить("П000100331005", "П000100331205;П000100331305;П000100331405;П000100331505;П000100331605;П100100331005");
	Зависимость.Вставить("П000100331006", "П000100331606;П100100331006");
	Зависимость.Вставить("П000100331007", "П000100331107;П000100331207;П000100331307;П000100331507;П000100331607;П100100331007");
	Зависимость.Вставить("П000100331008", "П000100331108;П000100331208;П000100331308;П000100331408;П000100331608;П100100331008;П000100331107;П000100331205;П000100331207;П000100331305;П000100331307;П000100331403;П000100331404;П000100331405;П000100331603;П000100331604;П000100331605;П000100331606;П000100331607;П100100331003;П100100331004;П100100331005;П100100331006;П100100331007");
	Зависимость.Вставить("П000100332108", "П000100332107");
	Зависимость.Вставить("П000100332208", "П000100332205;П000100332207");
	Зависимость.Вставить("П000100332308", "П000100332305;П000100332307");
	Зависимость.Вставить("П000100332408", "П000100332403;П000100332404;П000100332405;П000100332407");
	Зависимость.Вставить("П000100332508", "П000100332503;П000100332504;П000100332505;П000100332507");
	Зависимость.Вставить("П000100332608", "П000100332603;П000100332604;П000100332605;П000100332606;П000100332607");
	Зависимость.Вставить("П000100332708", "П000100332707");
	Зависимость.Вставить("П000100332003", "П000100332403;П000100332503;П000100332603");
	Зависимость.Вставить("П000100332004", "П000100332404;П000100332504;П000100332604");
	Зависимость.Вставить("П000100332005", "П000100332205;П000100332305;П000100332405;П000100332505;П000100332605");
	Зависимость.Вставить("П000100332006", "П000100332606");
	Зависимость.Вставить("П000100332007", "П000100332107;П000100332207;П000100332307;П000100332407;П000100332507;П000100332607;П000100332707");
	Зависимость.Вставить("П000100332008", "П000100332108;П000100332208;П000100332308;П000100332408;П000100332508;П000100332608;П000100332708;П000100332107;П000100332205;П000100332207;П000100332305;П000100332307;П000100332403;П000100332404;П000100332405;П000100332407;П000100332503;П000100332504;П000100332505;П000100332507;П000100332603;П000100332604;П000100332605;П000100332606;П000100332607;П000100332707");
	Зависимость.Вставить("П000100334007", "П000100334006");
	Зависимость.Вставить("П000100330008", "П000100330003;П000100330004;П000100330005;П000100330006;П000100330007");
	Зависимость.Вставить("П000100340105", "П000100340106;П000100340103;П000100340104");
	Зависимость.Вставить("П000100341106", "П000100341103;П000100341104;П000100341105");
	Зависимость.Вставить("П000100342106", "П000100342103;П000100342104;П000100342105");
	Зависимость.Вставить("П000100350103", "П000100340103;П000100341103;П000100342103");
	Зависимость.Вставить("П000100350104", "П000100340104;П000100341104;П000100342104");
	Зависимость.Вставить("П000100350105", "П000100340105;П000100341105;П000100342105;П000100340106;П000100340103;П000100340104");
	Зависимость.Вставить("П000100350106", "П000100350103;П000100350104;П000100350105;П000100340103;П000100341103;П000100342103;П000100340104;П000100341104;П000100342104;П000100340105;П000100341105;П000100342105;П000100340106;П000100340103;П000100340104");
	Зависимость.Вставить("П000100340206", "П100100340203;П100100340204;П100100340205");
	Зависимость.Вставить("П000100341206", "П100100341203;П100100341204;П100100341205");
	Зависимость.Вставить("П000100342206", "П100100342203;П100100342204;П100100342205");
	Зависимость.Вставить("П000100350203", "П100100340003;П100100341003;П100100342003");
	Зависимость.Вставить("П000100350204", "П100100340004;П100100341004;П100100342004");
	Зависимость.Вставить("П000100350205", "П100100340005;П100100341005;П100100342005");
	Зависимость.Вставить("П000100350206", "П100100350203;П100100350204;П100100350205");
	Зависимость.Вставить("П000100341003", "П000100341103;П100100341003_1");
	Зависимость.Вставить("П000100341004", "П000100341104;П100100341004_1");
	Зависимость.Вставить("П000100341005", "П000100341105;П100100341005_1");
	Зависимость.Вставить("П000100342003", "П000100342103;П100100342003_1");
	Зависимость.Вставить("П000100342004", "П000100342104;П100100342004_1");
	Зависимость.Вставить("П000100342005", "П000100342105;П100100342005_1");
	Зависимость.Вставить("П000100340005", "П000100340006;П000100340003;П000100340004");
	Зависимость.Вставить("П000100341006", "П000100341003;П000100341004;П000100341005;П000100341103;П100100341003_1;П000100341104;П100100341004_1;П000100341105;П100100341005_1");
	Зависимость.Вставить("П000100342006", "П000100342003;П000100342004;П000100342005;П000100342103;П100100342003_1;П000100342104;П100100342004_1;П000100342105;П100100342005_1");
	Зависимость.Вставить("П000100350003", "П000100340003;П000100341003;П000100342003;П000100341103;П100100341003_1;П000100342103;П100100342003_1");
	Зависимость.Вставить("П000100350004", "П000100340004;П000100341004;П000100342004;П000100341104;П100100341004_1;П000100342104;П100100342004_1");
	Зависимость.Вставить("П000100350005", "П000100340005;П000100341005;П000100342005;П000100341105;П100100341005_1;П000100342105;П100100342005_1;П000100340006;П000100340003;П000100340004");
	Зависимость.Вставить("П000100350006", "П000100350003;П000100350004;П000100350005;П000100340003;П000100341003;П000100342003;П000100341103;П100100341003_1;П000100342103;П100100342003_1;П000100340004;П000100341004;П000100342004;П000100341104;П100100341004_1;П000100342104;П100100342004_1;П000100340005;П000100341005;П000100342005;П000100341105;П100100341005_1;П000100342105;П100100342005_1;П000100340006;П000100340003;П000100340004");
	
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("ОИК", Зависимость);
	
	// Отчет о движении денежных средств.
	Зависимость = Новый Структура;
	Зависимость.Вставить("П000100411003", "П000100411103;П000100411203;П000100411303;П100100411003;П000100411903");
	Зависимость.Вставить("П000100411004", "П000100411104;П000100411204;П000100411304;П100100411004;П000100411904");
	Зависимость.Вставить("П000100412003", "П000100412103;П000100412203;П000100412303;П000100412403;П100100412003;П000100412903");
	Зависимость.Вставить("П000100412004", "П000100412104;П000100412204;П000100412304;П000100412404;П100100412004;П000100412904");
	Зависимость.Вставить("П000100410003", "П000100411003;П000100412003;П000100411103;П000100411203;П000100411303;П100100411003;П000100411903;П000100412103;П000100412203;П000100412303;П000100412403;П100100412003;П000100412903");
	Зависимость.Вставить("П000100410004", "П000100411004;П000100412004;П000100411104;П000100411204;П000100411304;П100100411004;П000100411904;П000100412104;П000100412204;П000100412304;П000100412404;П100100412004;П000100412904");
	Зависимость.Вставить("П000100421003", "П000100421103;П000100421203;П000100421303;П000100421403;П100100421003;П000100421903");
	Зависимость.Вставить("П000100421004", "П000100421104;П000100421204;П000100421304;П000100421404;П100100421004;П000100421904");
	Зависимость.Вставить("П000100422003", "П000100422103;П000100422203;П000100422303;П000100422403;П100100422003;П000100422903");
	Зависимость.Вставить("П000100422004", "П000100422104;П000100422204;П000100422304;П000100422404;П100100422004;П000100422904");
	Зависимость.Вставить("П000100420003", "П000100421003;П000100422003;П000100421103;П000100421203;П000100421303;П000100421403;П100100421003;П000100421903;П000100422103;П000100422203;П000100422303;П000100422403;П100100422003;П000100422903");
	Зависимость.Вставить("П000100420004", "П000100421004;П000100422004;П000100421104;П000100421204;П000100421304;П000100421404;П100100421004;П000100421904;П000100422104;П000100422204;П000100422304;П000100422404;П100100422004;П000100422904");
	Зависимость.Вставить("П000100431003", "П000100431103;П000100431203;П000100431303;П000100431403;П100100431003;П000100431903");
	Зависимость.Вставить("П000100431004", "П000100431104;П000100431204;П000100431304;П000100431404;П100100431004;П000100431904");
	Зависимость.Вставить("П000100432003", "П000100432103;П000100432203;П000100432303;П100100432003;П000100432903");
	Зависимость.Вставить("П000100432004", "П000100432104;П000100432204;П000100432304;П100100432004;П000100432904");
	Зависимость.Вставить("П000100430003", "П000100431003;П000100432003;П000100431103;П000100431203;П000100431303;П000100431403;П100100431003;П000100431903;П000100432103;П000100432203;П000100432303;П100100432003;П000100432903");
	Зависимость.Вставить("П000100430004", "П000100431004;П000100432004;П000100431104;П000100431204;П000100431304;П000100431404;П100100431004;П000100431904;П000100432104;П000100432204;П000100432304;П100100432004;П000100432904");
	Зависимость.Вставить("П000100440003", "П000100410003;П000100420003;П000100430003;П000100411003;П000100412003;П000100411103;П000100411203;П000100411303;П100100411003;П000100411903;П000100412103;П000100412203;П000100412303;П000100412403;П100100412003;П000100412903;П000100421003;П000100422003;П000100421103;П000100421203;П000100421303;П000100421403;П100100421003;П000100421903;П000100422103;П000100422203;П000100422303;П000100422403;П100100422003;П000100422903;П000100431003;П000100432003;П000100431103;П000100431203;П000100431303;П000100431403;П100100431003;П000100431903;П000100432103;П000100432203;П000100432303;П100100432003;П000100432903");
	Зависимость.Вставить("П000100440004", "П000100410004;П000100420004;П000100430004;П000100411004;П000100412004;П000100411104;П000100411204;П000100411304;П100100411004;П000100411904;П000100412104;П000100412204;П000100412304;П000100412404;П100100412004;П000100412904;П000100421004;П000100422004;П000100421104;П000100421204;П000100421304;П000100421404;П100100421004;П000100421904;П000100422104;П000100422204;П000100422304;П000100422404;П100100422004;П000100422904;П000100431004;П000100432004;П000100431104;П000100431204;П000100431304;П000100431404;П100100431004;П000100431904;П000100432104;П000100432204;П000100432304;П100100432004;П000100432904");
	Зависимость.Вставить("П000100450003", "П000100440003;П000100445003;П000100449003;П000100410003;П000100420003;П000100430003;П000100411003;П000100412003;П000100411103;П000100411203;П000100411303;П100100411003;П000100411903;П000100412103;П000100412203;П000100412303;П000100412403;П100100412003;П000100412903;П000100421003;П000100422003;П000100421103;П000100421203;П000100421303;П000100421403;П100100421003;П000100421903;П000100422103;П000100422203;П000100422303;П000100422403;П100100422003;П000100422903;П000100431003;П000100432003;П000100431103;П000100431203;П000100431303;П000100431403;П100100431003;П000100431903;П000100432103;П000100432203;П000100432303;П100100432003;П000100432903");
	Зависимость.Вставить("П000100450004", "П000100440004;П000100445004;П000100449004;П000100410004;П000100420004;П000100430004;П000100411004;П000100412004;П000100411104;П000100411204;П000100411304;П100100411004;П000100411904;П000100412104;П000100412204;П000100412304;П000100412404;П100100412004;П000100412904;П000100421004;П000100422004;П000100421104;П000100421204;П000100421304;П000100421404;П100100421004;П000100421904;П000100422104;П000100422204;П000100422304;П000100422404;П100100422004;П000100422904;П000100431004;П000100432004;П000100431104;П000100431204;П000100431304;П000100431404;П100100431004;П000100431904;П000100432104;П000100432204;П000100432304;П100100432004;П000100432904");
	
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("ОДДС", Зависимость);
	
	// Отчет о целевом использовании средств.
	Зависимость = Новый Структура;
	Зависимость.Вставить("П000100620004", "П000100621004;П000100621504;П000100622004;П000100623004;П000100624004;П000100625004");
	Зависимость.Вставить("П000100631004", "П000100631104;П000100631204;П000100631304");
	Зависимость.Вставить("П000100632004", "П000100632104;П000100632204;П000100632304;П000100632404;П000100632504;П000100632604");
	Зависимость.Вставить("П000100630004", "П000100631004;П000100632004;П000100633004;П000100635004;П000100631104;П000100631204;П000100631304;П000100632104;П000100632204;П000100632304;П000100632404;П000100632504;П000100632604");
	Зависимость.Вставить("П000100640004", "П000100610004;П000100620004;П000100630004;П000100621004;П000100621504;П000100622004;П000100623004;П000100624004;П000100625004;П000100631004;П000100632004;П000100633004;П000100635004;П000100631104;П000100631204;П000100631304;П000100632104;П000100632204;П000100632304;П000100632404;П000100632504;П000100632604");
	Зависимость.Вставить("П000100620005", "П000100621005;П000100621505;П000100622005;П000100623005;П000100624005;П000100625005");
	Зависимость.Вставить("П000100631005", "П000100631105;П000100631205;П000100631305");
	Зависимость.Вставить("П000100632005", "П000100632105;П000100632205;П000100632305;П000100632405;П000100632505;П000100632605");
	Зависимость.Вставить("П000100630005", "П000100631005;П000100632005;П000100633005;П000100635005;П000100631105;П000100631205;П000100631305;П000100632105;П000100632205;П000100632305;П000100632405;П000100632505;П000100632605");
	Зависимость.Вставить("П000100640005", "П000100610005;П000100620005;П000100630005;П000100621005;П000100621505;П000100622005;П000100623005;П000100624005;П000100625005;П000100631005;П000100632005;П000100633005;П000100635005;П000100631105;П000100631205;П000100631305;П000100632105;П000100632205;П000100632305;П000100632405;П000100632505;П000100632605");
	
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("ОЦИС", Зависимость);
	
	// Расшифровка краткосрочных финансовых вложений.
	Зависимость = Новый Структура;
	Зависимость.Вставить("П000120000101", "П00012М100106");
	Зависимость.Вставить("П000120000102", "П00012М100110");
	
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("ФинансовыеВложенияКраткосрочные", Зависимость);
	
	// Расшифровка долгосрочных финансовых вложений.
	Зависимость = Новый Структура;
	Зависимость.Вставить("П000130000101", "П00013М100106");
	Зависимость.Вставить("П000130000102", "П00013М100110");
	
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("ФинансовыеВложенияДолгосрочные", Зависимость);
	
	// Справка о структуре выручки и прочих поступлениях.
	Зависимость = Новый Структура;
	Зависимость.Вставить("П000100005002", "П000100001102,П000100001202,П00010М100102,П000100003002,П000100004002");
	
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("СтруктураВыручки", Зависимость);
	
КонецПроцедуры

&НаСервере
Процедура РасчетПолный()
	
	ИмяРаздела = "Баланс";
	ДанныеРаздела = ПолучитьИзВременногоХранилища(СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяРаздела]);
	
	Для Каждого СтраницаРаздела Из ДанныеРаздела.Строки Цикл
		ПараметрыРасчета = НовыеПараметрыПолногоРасчетаСтраницы(СтраницаРаздела);
		
		Для Инд = 4 По 6 Цикл
			РасчитатьПоказатели_Баланс_ПоГрафе(ПараметрыРасчета, "0" + Инд);
		КонецЦикла;
		
	КонецЦикла;
	
	СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяРаздела] =
		ПоместитьВоВременноеХранилище(ДанныеРаздела, УникальныйИдентификатор);
	
	ИмяРаздела = "ОФР";
	ДанныеРаздела = ПолучитьИзВременногоХранилища(СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяРаздела]);
	
	Для Каждого СтраницаРаздела Из ДанныеРаздела.Строки Цикл
		ПараметрыРасчета = НовыеПараметрыПолногоРасчетаСтраницы(СтраницаРаздела);
		
		РасчитатьПоказатели_ОФР_ПоГрафе(ПараметрыРасчета, "04");
		РасчитатьПоказатели_ОФР_ПоГрафе(ПараметрыРасчета, "05");
		
	КонецЦикла;
	
	СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяРаздела] =
		ПоместитьВоВременноеХранилище(ДанныеРаздела, УникальныйИдентификатор);
	
	ИмяРаздела = "ОИК";
	ДанныеРаздела = ПолучитьИзВременногоХранилища(СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяРаздела]);
	
	Для Каждого СтраницаРаздела Из ДанныеРаздела.Строки Цикл
		ПараметрыРасчета = НовыеПараметрыПолногоРасчетаСтраницы(СтраницаРаздела);
		
		РасчитатьПоказатели_ОИК(ПараметрыРасчета);
		
	КонецЦикла;
	
	СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяРаздела] =
		ПоместитьВоВременноеХранилище(ДанныеРаздела, УникальныйИдентификатор);
	
	ИмяРаздела = "ОДДС";
	ДанныеРаздела = ПолучитьИзВременногоХранилища(СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяРаздела]);
	
	Для Каждого СтраницаРаздела Из ДанныеРаздела.Строки Цикл
		ПараметрыРасчета = НовыеПараметрыПолногоРасчетаСтраницы(СтраницаРаздела);
		
		РасчитатьПоказатели_ОДДС_ПоГрафе(ПараметрыРасчета, "03");
		РасчитатьПоказатели_ОДДС_ПоГрафе(ПараметрыРасчета, "04");
		
	КонецЦикла;
	
	СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяРаздела] =
		ПоместитьВоВременноеХранилище(ДанныеРаздела, УникальныйИдентификатор);
	
	ИмяРаздела = "ОЦИС";
	ДанныеРаздела = ПолучитьИзВременногоХранилища(СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяРаздела]);
	
	Для Каждого СтраницаРаздела Из ДанныеРаздела.Строки Цикл
		ПараметрыРасчета = НовыеПараметрыПолногоРасчетаСтраницы(СтраницаРаздела);
		
		РасчитатьПоказатели_ОЦИС_ПоГрафе(ПараметрыРасчета, "04");
		РасчитатьПоказатели_ОЦИС_ПоГрафе(ПараметрыРасчета, "05");
		
	КонецЦикла;
	
	СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяРаздела] =
		ПоместитьВоВременноеХранилище(ДанныеРаздела, УникальныйИдентификатор);
	
КонецПроцедуры

&НаСервере
Функция НовыеПараметрыПолногоРасчетаСтраницы(СтраницаОтчета)
	
	ПараметрыРасчета = Новый Структура;
	ПараметрыРасчета.Вставить("ДанныеСтраницы", СтраницаОтчета);
	ПараметрыРасчета.Вставить("ПараметрыРаздела", СтраницаОтчета.Параметры);
	ПараметрыРасчета.Вставить("Делитель", ДелительПоЕдиницеИзмерения(СтруктураРеквизитовФормы.ЕдиницаИзмерения));
	ПараметрыРасчета.Вставить("Точность", СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения);
	
	Возврат ПараметрыРасчета;
	
КонецФункции

&НаКлиенте
Процедура РасчетПриИзмененииПоказателяНаКлиенте(ИмяРаздела, ИмяПоказателя)
	
	Если СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеСтраницы = ДанныеТабличногоДокумента(ИмяРаздела);
	Зависимости    = СтруктураЗависимыхЯчеекДляАвторасчета[ИмяРаздела];
	
	ПараметрыРасчета = Новый Структура;
	ПараметрыРасчета.Вставить("ИмяРаздела",    ИмяРаздела);
	ПараметрыРасчета.Вставить("Зависимости",   Зависимости);
	ПараметрыРасчета.Вставить("ДанныеСтраницы", ДанныеСтраницы);
	ПараметрыРасчета.Вставить("ИмяПоказателя", ИмяПоказателя);
	ПараметрыРасчета.Вставить("ПараметрыРаздела", НеотображаемыеПоказатели);
	ПараметрыРасчета.Вставить("Делитель", ДелительПоЕдиницеИзмерения(СтруктураРеквизитовФормы.ЕдиницаИзмерения));
	ПараметрыРасчета.Вставить("Точность", СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения);
	
	РасчитатьПоказатели(ПараметрыРасчета);
	
	Для Каждого ЭлементАвторасчета Из Зависимости Цикл
		ИмяРассчитанногоПоказателя = ЭлементАвторасчета.Ключ;
		ТабличныйДокумент.Области[ИмяРассчитанногоПоказателя].Значение = ДанныеСтраницы.Данные[ИмяРассчитанногоПоказателя];
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РасчитатьПоказатели(ПараметрыРасчета)
	
	Если ПараметрыРасчета.ИмяРаздела = "Баланс" Тогда
		РасчитатьПоказатели_Баланс(ПараметрыРасчета);
	КонецЕсли;
	
	Если ПараметрыРасчета.ИмяРаздела = "ОФР" Тогда
		РасчитатьПоказатели_ОФР(ПараметрыРасчета);
	КонецЕсли;
	
	Если ПараметрыРасчета.ИмяРаздела = "ОИК" Тогда
		РасчитатьПоказатели_ОИК(ПараметрыРасчета);
	КонецЕсли;
	
	Если ПараметрыРасчета.ИмяРаздела = "ОДДС" Тогда
		РасчитатьПоказатели_ОДДС(ПараметрыРасчета);
	КонецЕсли;
	
	Если ПараметрыРасчета.ИмяРаздела = "ОЦИС" Тогда
		РасчитатьПоказатели_ОЦИС(ПараметрыРасчета);
	КонецЕсли;
	
КонецПроцедуры

#Область АвторасчетПоказателей_Баланс

&НаКлиентеНаСервереБезКонтекста
Процедура РасчитатьПоказатели_Баланс(ПараметрыРасчета)
	
	ИмяПоказателя = ПараметрыРасчета.ИмяПоказателя;
	
	НомерГрафы = Прав(ИмяПоказателя, 2);
	
	Если НомерГрафы <> "04" И НомерГрафы <> "05" И НомерГрафы <> "06" Тогда
		Возврат;
	КонецЕсли;
	
	РасчитатьПоказатели_Баланс_ПоГрафе(ПараметрыРасчета, НомерГрафы);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РасчитатьПоказатели_Баланс_ПоГрафе(ПараметрыРасчета, НомерГрафы)
	
	ДанныеСтраницы = ПараметрыРасчета.ДанныеСтраницы;
	
	РасчитатьПоказатели_Баланс_Строка1100(ДанныеСтраницы.Данные, НомерГрафы);
	РасчитатьПоказатели_Баланс_Строка1200(ДанныеСтраницы.Данные, НомерГрафы);
	
	РасчитатьПоказатели_Баланс_Строка1600(ДанныеСтраницы.Данные, НомерГрафы);
	
	РасчитатьПоказатели_Баланс_Строка1300(ДанныеСтраницы.Данные, НомерГрафы);
	РасчитатьПоказатели_Баланс_Строка1400(ДанныеСтраницы.Данные, НомерГрафы);
	РасчитатьПоказатели_Баланс_Строка1500(ДанныеСтраницы.Данные, НомерГрафы);
	
	РасчитатьПоказатели_Баланс_Строка1700(ДанныеСтраницы.Данные, НомерГрафы);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РасчитатьПоказатели_Баланс_Строка1100(Показатели, Графа)
	
	Строка1110 = Показатели["П0001001110" + Графа];
	Строка1120 = Показатели["П0001001120" + Графа];
	Строка1130 = Показатели["П0001001130" + Графа];
	Строка1140 = Показатели["П0001001140" + Графа];
	Строка1150 = Показатели["П0001001150" + Графа];
	Строка1160 = Показатели["П0001001160" + Графа];
	Строка1170 = Показатели["П0001001170" + Графа];
	Строка1180 = Показатели["П0001001180" + Графа];
	Строка1190 = Показатели["П0001001190" + Графа];
	
	РасчетСтроки1100 = Строка1110 + Строка1120 + Строка1130 + Строка1140 + Строка1150
	                 + Строка1160 + Строка1170 + Строка1180 + Строка1190;
	
	Показатели["П0001001100" + Графа] = РасчетСтроки1100;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РасчитатьПоказатели_Баланс_Строка1200(Показатели, Графа)
	
	Строка1210 = Показатели["П0001001210" + Графа];
	Строка1220 = Показатели["П0001001220" + Графа];
	Строка1230 = Показатели["П0001001230" + Графа];
	Строка1240 = Показатели["П0001001240" + Графа];
	Строка1250 = Показатели["П0001001250" + Графа];
	Строка1260 = Показатели["П0001001260" + Графа];
	
	РасчетСтроки1200 = Строка1210 + Строка1220 + Строка1230 + Строка1240 + Строка1250
	                 + Строка1260;
	
	Показатели["П0001001200" + Графа] = РасчетСтроки1200;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РасчитатьПоказатели_Баланс_Строка1600(Показатели, Графа)
	
	Строка1100 = Показатели["П0001001100" + Графа];
	Строка1200 = Показатели["П0001001200" + Графа];
	
	РасчетСтроки1600 = Строка1100 + Строка1200;
	
	Показатели["П0001001600" + Графа] = РасчетСтроки1600;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РасчитатьПоказатели_Баланс_Строка1300(Показатели, Графа)
	
	Строка1310 = Показатели["П0001001310" + Графа];
	Строка1320 = Показатели["П0001001320" + Графа];
	Строка1340 = Показатели["П0001001340" + Графа];
	Строка1350 = Показатели["П0001001350" + Графа];
	Строка1360 = Показатели["П0001001360" + Графа];
	Строка1370 = Показатели["П0001001370" + Графа];
	
	РасчетСтроки1300 = Строка1310 + Строка1320 + Строка1340 + Строка1350 + Строка1360
	                 + Строка1370;
	
	Показатели["П0001001300" + Графа] = РасчетСтроки1300;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РасчитатьПоказатели_Баланс_Строка1400(Показатели, Графа)
	
	Строка1410 = Показатели["П0001001410" + Графа];
	Строка1420 = Показатели["П0001001420" + Графа];
	Строка1430 = Показатели["П0001001430" + Графа];
	Строка1450 = Показатели["П0001001450" + Графа];
	
	РасчетСтроки1400 = Строка1410 + Строка1420 + Строка1430 + Строка1450;
	
	Показатели["П0001001400" + Графа] = РасчетСтроки1400;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РасчитатьПоказатели_Баланс_Строка1500(Показатели, Графа)
	
	Строка1510 = Показатели["П0001001510" + Графа];
	Строка1520 = Показатели["П0001001520" + Графа];
	Строка1530 = Показатели["П0001001530" + Графа];
	Строка1540 = Показатели["П0001001540" + Графа];
	Строка1550 = Показатели["П0001001550" + Графа];
	
	РасчетСтроки1500 = Строка1510 + Строка1520 + Строка1530 + Строка1540 + Строка1550;
	
	Показатели["П0001001500" + Графа] = РасчетСтроки1500;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РасчитатьПоказатели_Баланс_Строка1700(Показатели, Графа)
	
	Строка1300 = Показатели["П0001001300" + Графа];
	Строка1400 = Показатели["П0001001400" + Графа];
	Строка1500 = Показатели["П0001001500" + Графа];
	
	РасчетСтроки1700 = Строка1300 + Строка1400 + Строка1500;
	
	Показатели["П0001001700" + Графа] = РасчетСтроки1700;
	
КонецПроцедуры

#КонецОбласти

#Область АвторасчетПоказателей_ОФР

&НаКлиентеНаСервереБезКонтекста
Процедура РасчитатьПоказатели_ОФР(ПараметрыРасчета)
	
	ИмяПоказателя = ПараметрыРасчета.ИмяПоказателя;
	
	НомерГрафы = Прав(ИмяПоказателя, 2);
	
	Если НомерГрафы <> "04" И НомерГрафы <> "05" Тогда
		Возврат;
	КонецЕсли;
	
	РасчитатьПоказатели_ОФР_ПоГрафе(ПараметрыРасчета, НомерГрафы);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РасчитатьПоказатели_ОФР_ПоГрафе(ПараметрыРасчета, НомерГрафы)
	
	ДанныеСтраницы = ПараметрыРасчета.ДанныеСтраницы.Данные;
	Делитель = ПараметрыРасчета.Делитель;
	Точность = ПараметрыРасчета.Точность;
	
	Если Делитель <> 1000 И Делитель <> 1000000 Тогда
		Делитель = 1;
	КонецЕсли;
	
	РасчитатьПоказатели_ОФР_Строка2100(ДанныеСтраницы, НомерГрафы, Делитель, Точность);
	РасчитатьПоказатели_ОФР_Строка2200(ДанныеСтраницы, НомерГрафы, Делитель, Точность);
	РасчитатьПоказатели_ОФР_Строка2300(ДанныеСтраницы, НомерГрафы, Делитель, Точность);
	РасчитатьПоказатели_ОФР_Строка2400(ДанныеСтраницы, НомерГрафы, Делитель, Точность);
	РасчитатьПоказатели_ОФР_Строка2500(ДанныеСтраницы, НомерГрафы, Делитель, Точность);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РасчитатьПоказатели_ОФР_Строка2100(Показатели, Графа, Делитель, Точность)
	
	Строка2110 = ОкруглитьЧислоПоФорматуДелителя(Показатели["П0001002110" + Графа], Делитель, Точность);
	Строка2120 = ОкруглитьЧислоПоФорматуДелителя(Показатели["П0001002120" + Графа], Делитель, Точность);
	
	РасчетСтроки2100 = Строка2110 + Строка2120;
	
	Показатели["П0001002100" + Графа] = РасчетСтроки2100;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РасчитатьПоказатели_ОФР_Строка2200(Показатели, Графа, Делитель, Точность)
	
	Строка2100 = ОкруглитьЧислоПоФорматуДелителя(Показатели["П0001002100" + Графа], Делитель, Точность);
	Строка2210 = ОкруглитьЧислоПоФорматуДелителя(Показатели["П0001002210" + Графа], Делитель, Точность);
	Строка2220 = ОкруглитьЧислоПоФорматуДелителя(Показатели["П0001002220" + Графа], Делитель, Точность);
	
	РасчетСтроки2200 = Строка2100 + Строка2210 + Строка2220;
	
	Показатели["П0001002200" + Графа] = РасчетСтроки2200;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РасчитатьПоказатели_ОФР_Строка2300(Показатели, Графа, Делитель, Точность)
	
	Строка2200 = ОкруглитьЧислоПоФорматуДелителя(Показатели["П0001002200" + Графа], Делитель, Точность);
	Строка2310 = ОкруглитьЧислоПоФорматуДелителя(Показатели["П0001002310" + Графа], Делитель, Точность);
	Строка2320 = ОкруглитьЧислоПоФорматуДелителя(Показатели["П0001002320" + Графа], Делитель, Точность);
	Строка2330 = ОкруглитьЧислоПоФорматуДелителя(Показатели["П0001002330" + Графа], Делитель, Точность);
	Строка2340 = ОкруглитьЧислоПоФорматуДелителя(Показатели["П0001002340" + Графа], Делитель, Точность);
	Строка2350 = ОкруглитьЧислоПоФорматуДелителя(Показатели["П0001002350" + Графа], Делитель, Точность);
	
	РасчетСтроки2300 = Строка2200 + Строка2310 + Строка2320 + Строка2330 + Строка2340 + Строка2350;
	
	Показатели["П0001002300" + Графа] = РасчетСтроки2300;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РасчитатьПоказатели_ОФР_Строка2400(Показатели, Графа, Делитель, Точность)
	
	Строка2300 = ОкруглитьЧислоПоФорматуДелителя(Показатели["П0001002300" + Графа], Делитель, Точность);
	Строка2410 = ОкруглитьЧислоПоФорматуДелителя(Показатели["П0001002410" + Графа], Делитель, Точность);
	Строка2430 = ОкруглитьЧислоПоФорматуДелителя(Показатели["П0001002430" + Графа], Делитель, Точность);
	Строка2450 = ОкруглитьЧислоПоФорматуДелителя(Показатели["П0001002450" + Графа], Делитель, Точность);
	Строка2460 = ОкруглитьЧислоПоФорматуДелителя(Показатели["П0001002460" + Графа], Делитель, Точность);
	
	РасчетСтроки2400 = Строка2300 + Строка2410 + Строка2430 + Строка2450 + Строка2460;
	
	Показатели["П0001002400" + Графа] = РасчетСтроки2400;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РасчитатьПоказатели_ОФР_Строка2500(Показатели, Графа, Делитель, Точность)
	
	Строка2400 = ОкруглитьЧислоПоФорматуДелителя(Показатели["П0001002400" + Графа], Делитель, Точность);
	Строка2510 = ОкруглитьЧислоПоФорматуДелителя(Показатели["П0001002510" + Графа], Делитель, Точность);
	Строка2520 = ОкруглитьЧислоПоФорматуДелителя(Показатели["П0001002520" + Графа], Делитель, Точность);
	
	РасчетСтроки2500 = Строка2400 + Строка2510 + Строка2520;
	
	Показатели["П0001002500" + Графа] = РасчетСтроки2500;
	
КонецПроцедуры

#КонецОбласти

#Область АвторасчетПоказателей_ОИК

&НаКлиентеНаСервереБезКонтекста
Процедура РасчитатьПоказатели_ОИК(ПараметрыРасчета)
	
	ДанныеСтраницы = ПараметрыРасчета.ДанныеСтраницы.Данные;
	Делитель = ПараметрыРасчета.Делитель;
	Точность = ПараметрыРасчета.Точность;
	
	Если Делитель <> 1000 И Делитель <> 1000000 Тогда
		Делитель = 1;
	КонецЕсли;
	
	РасчитатьПоказатели_ОИК_Строка3100Графа08(ДанныеСтраницы, Делитель, Точность);
	
	РасчитатьПоказатели_ОИК_Строка3211Графа08(ДанныеСтраницы, Делитель, Точность);
	РасчитатьПоказатели_ОИК_Строка3212Графа08(ДанныеСтраницы, Делитель, Точность);
	РасчитатьПоказатели_ОИК_Строка3213Графа08(ДанныеСтраницы, Делитель, Точность);
	РасчитатьПоказатели_ОИК_Строка3214Графа08(ДанныеСтраницы, Делитель, Точность);
	РасчитатьПоказатели_ОИК_Строка3216Графа08(ДанныеСтраницы, Делитель, Точность);
	
	РасчитатьПоказатели_ОИК_Строка3210Графа03(ДанныеСтраницы, Делитель, Точность);
	РасчитатьПоказатели_ОИК_Строка3210Графа04(ДанныеСтраницы, Делитель, Точность);
	РасчитатьПоказатели_ОИК_Строка3210Графа05(ДанныеСтраницы, Делитель, Точность);
	РасчитатьПоказатели_ОИК_Строка3210Графа06(ДанныеСтраницы, Делитель, Точность);
	РасчитатьПоказатели_ОИК_Строка3210Графа07(ДанныеСтраницы, Делитель, Точность);
	РасчитатьПоказатели_ОИК_Строка3210Графа08(ДанныеСтраницы, Делитель, Точность);
	
	РасчитатьПоказатели_ОИК_Строка3221Графа08(ДанныеСтраницы, Делитель, Точность);
	РасчитатьПоказатели_ОИК_Строка3222Графа08(ДанныеСтраницы, Делитель, Точность);
	РасчитатьПоказатели_ОИК_Строка3223Графа08(ДанныеСтраницы, Делитель, Точность);
	РасчитатьПоказатели_ОИК_Строка3224Графа08(ДанныеСтраницы, Делитель, Точность);
	РасчитатьПоказатели_ОИК_Строка3225Графа08(ДанныеСтраницы, Делитель, Точность);
	РасчитатьПоказатели_ОИК_Строка3226Графа08(ДанныеСтраницы, Делитель, Точность);
	РасчитатьПоказатели_ОИК_Строка3227Графа08(ДанныеСтраницы, Делитель, Точность);
	
	РасчитатьПоказатели_ОИК_Строка3220Графа03(ДанныеСтраницы, Делитель, Точность);
	РасчитатьПоказатели_ОИК_Строка3220Графа04(ДанныеСтраницы, Делитель, Точность);
	РасчитатьПоказатели_ОИК_Строка3220Графа05(ДанныеСтраницы, Делитель, Точность);
	РасчитатьПоказатели_ОИК_Строка3220Графа06(ДанныеСтраницы, Делитель, Точность);
	РасчитатьПоказатели_ОИК_Строка3220Графа07(ДанныеСтраницы, Делитель, Точность);
	РасчитатьПоказатели_ОИК_Строка3220Графа08(ДанныеСтраницы, Делитель, Точность);
	
	РасчитатьПоказатели_ОИК_Строка3240Графа07(ДанныеСтраницы, Делитель, Точность);
	
	РасчитатьПоказатели_ОИК_Строка3200Графа08(ДанныеСтраницы, Делитель, Точность);
	
	РасчитатьПоказатели_ОИК_Строка3311Графа08(ДанныеСтраницы, Делитель, Точность);
	РасчитатьПоказатели_ОИК_Строка3312Графа08(ДанныеСтраницы, Делитель, Точность);
	РасчитатьПоказатели_ОИК_Строка3313Графа08(ДанныеСтраницы, Делитель, Точность);
	РасчитатьПоказатели_ОИК_Строка3314Графа08(ДанныеСтраницы, Делитель, Точность);
	РасчитатьПоказатели_ОИК_Строка3316Графа08(ДанныеСтраницы, Делитель, Точность);
	
	РасчитатьПоказатели_ОИК_Строка3310Графа03(ДанныеСтраницы, Делитель, Точность);
	РасчитатьПоказатели_ОИК_Строка3310Графа04(ДанныеСтраницы, Делитель, Точность);
	РасчитатьПоказатели_ОИК_Строка3310Графа05(ДанныеСтраницы, Делитель, Точность);
	РасчитатьПоказатели_ОИК_Строка3310Графа06(ДанныеСтраницы, Делитель, Точность);
	РасчитатьПоказатели_ОИК_Строка3310Графа07(ДанныеСтраницы, Делитель, Точность);
	РасчитатьПоказатели_ОИК_Строка3310Графа08(ДанныеСтраницы, Делитель, Точность);
	
	РасчитатьПоказатели_ОИК_Строка3321Графа08(ДанныеСтраницы, Делитель, Точность);
	РасчитатьПоказатели_ОИК_Строка3322Графа08(ДанныеСтраницы, Делитель, Точность);
	РасчитатьПоказатели_ОИК_Строка3323Графа08(ДанныеСтраницы, Делитель, Точность);
	РасчитатьПоказатели_ОИК_Строка3324Графа08(ДанныеСтраницы, Делитель, Точность);
	РасчитатьПоказатели_ОИК_Строка3325Графа08(ДанныеСтраницы, Делитель, Точность);
	РасчитатьПоказатели_ОИК_Строка3326Графа08(ДанныеСтраницы, Делитель, Точность);
	РасчитатьПоказатели_ОИК_Строка3327Графа08(ДанныеСтраницы, Делитель, Точность);
	
	РасчитатьПоказатели_ОИК_Строка3320Графа03(ДанныеСтраницы, Делитель, Точность);
	РасчитатьПоказатели_ОИК_Строка3320Графа04(ДанныеСтраницы, Делитель, Точность);
	РасчитатьПоказатели_ОИК_Строка3320Графа05(ДанныеСтраницы, Делитель, Точность);
	РасчитатьПоказатели_ОИК_Строка3320Графа06(ДанныеСтраницы, Делитель, Точность);
	РасчитатьПоказатели_ОИК_Строка3320Графа07(ДанныеСтраницы, Делитель, Точность);
	РасчитатьПоказатели_ОИК_Строка3320Графа08(ДанныеСтраницы, Делитель, Точность);
	
	РасчитатьПоказатели_ОИК_Строка3340Графа07(ДанныеСтраницы, Делитель, Точность);
	
	РасчитатьПоказатели_ОИК_Строка3300Графа08(ДанныеСтраницы, Делитель, Точность);
	
	РасчитатьПоказатели_ОИК_Строка3401Графа05(ДанныеСтраницы, Делитель, Точность);
	РасчитатьПоказатели_ОИК_Строка3411Графа06(ДанныеСтраницы, Делитель, Точность);
	РасчитатьПоказатели_ОИК_Строка3421Графа06(ДанныеСтраницы, Делитель, Точность);
	РасчитатьПоказатели_ОИК_Строка3501Графа03(ДанныеСтраницы, Делитель, Точность);
	РасчитатьПоказатели_ОИК_Строка3501Графа04(ДанныеСтраницы, Делитель, Точность);
	РасчитатьПоказатели_ОИК_Строка3501Графа05(ДанныеСтраницы, Делитель, Точность);
	РасчитатьПоказатели_ОИК_Строка3501Графа06(ДанныеСтраницы, Делитель, Точность);
	
	РасчитатьПоказатели_ОИК_Строка3402Графа06(ДанныеСтраницы, Делитель, Точность);
	РасчитатьПоказатели_ОИК_Строка3412Графа06(ДанныеСтраницы, Делитель, Точность);
	РасчитатьПоказатели_ОИК_Строка3422Графа06(ДанныеСтраницы, Делитель, Точность);
	РасчитатьПоказатели_ОИК_Строка3502Графа03(ДанныеСтраницы, Делитель, Точность);
	РасчитатьПоказатели_ОИК_Строка3502Графа04(ДанныеСтраницы, Делитель, Точность);
	РасчитатьПоказатели_ОИК_Строка3502Графа05(ДанныеСтраницы, Делитель, Точность);
	РасчитатьПоказатели_ОИК_Строка3502Графа06(ДанныеСтраницы, Делитель, Точность);
	
	РасчитатьПоказатели_ОИК_Строка3400Графа05(ДанныеСтраницы, Делитель, Точность);
	
	РасчитатьПоказатели_ОИК_Строка3410Графа03(ДанныеСтраницы, Делитель, Точность);
	РасчитатьПоказатели_ОИК_Строка3410Графа04(ДанныеСтраницы, Делитель, Точность);
	РасчитатьПоказатели_ОИК_Строка3410Графа05(ДанныеСтраницы, Делитель, Точность);
	РасчитатьПоказатели_ОИК_Строка3410Графа06(ДанныеСтраницы, Делитель, Точность);
	
	РасчитатьПоказатели_ОИК_Строка3420Графа03(ДанныеСтраницы, Делитель, Точность);
	РасчитатьПоказатели_ОИК_Строка3420Графа04(ДанныеСтраницы, Делитель, Точность);
	РасчитатьПоказатели_ОИК_Строка3420Графа05(ДанныеСтраницы, Делитель, Точность);
	РасчитатьПоказатели_ОИК_Строка3420Графа06(ДанныеСтраницы, Делитель, Точность);
	
	РасчитатьПоказатели_ОИК_Строка3500Графа03(ДанныеСтраницы, Делитель, Точность);
	РасчитатьПоказатели_ОИК_Строка3500Графа04(ДанныеСтраницы, Делитель, Точность);
	РасчитатьПоказатели_ОИК_Строка3500Графа05(ДанныеСтраницы, Делитель, Точность);
	РасчитатьПоказатели_ОИК_Строка3500Графа06(ДанныеСтраницы, Делитель, Точность);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РасчитатьПоказатели_ОИК_Строка3100Графа08(Показатели, Делитель, Точность)
	
	Строка3100Графа03 = ОкруглитьЧислоПоФорматуДелителя(Показатели.П000100310003, Делитель, Точность);
	Строка3100Графа04 = ОкруглитьЧислоПоФорматуДелителя(Показатели.П000100310004, Делитель, Точность);
	Строка3100Графа05 = ОкруглитьЧислоПоФорматуДелителя(Показатели.П000100310005, Делитель, Точность);
	Строка3100Графа06 = ОкруглитьЧислоПоФорматуДелителя(Показатели.П000100310006, Делитель, Точность);
	Строка3100Графа07 = ОкруглитьЧислоПоФорматуДелителя(Показатели.П000100310007, Делитель, Точность);
	
	РасчетПоказателя = Строка3100Графа03 + Строка3100Графа04 + Строка3100Графа05 + Строка3100Графа06 + Строка3100Графа07;
	
	Показатели.П000100310008 = РасчетПоказателя;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РасчитатьПоказатели_ОИК_Строка3211Графа08(Показатели, Делитель, Точность)
	
	Строка3211Графа07 = ОкруглитьЧислоПоФорматуДелителя(Показатели.П000100321107, Делитель, Точность);
	
	РасчетПоказателя = Строка3211Графа07;
	
	Показатели.П000100321108 = РасчетПоказателя;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РасчитатьПоказатели_ОИК_Строка3212Графа08(Показатели, Делитель, Точность)
	
	Строка3212Графа05 = ОкруглитьЧислоПоФорматуДелителя(Показатели.П000100321205, Делитель, Точность);
	Строка3212Графа07 = ОкруглитьЧислоПоФорматуДелителя(Показатели.П000100321207, Делитель, Точность);
	
	РасчетПоказателя= Строка3212Графа05 + Строка3212Графа07;
	
	Показатели.П000100321208 = РасчетПоказателя;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РасчитатьПоказатели_ОИК_Строка3213Графа08(Показатели, Делитель, Точность)
	
	П000100321305 = ОкруглитьЧислоПоФорматуДелителя(Показатели.П000100321305, Делитель, Точность);
	П000100321307 = ОкруглитьЧислоПоФорматуДелителя(Показатели.П000100321307, Делитель, Точность);
	
	РасчетПоказателя = П000100321305 + П000100321307;
	
	Показатели.П000100321308 = РасчетПоказателя;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РасчитатьПоказатели_ОИК_Строка3214Графа08(Показатели, Делитель, Точность)
	
	П000100321403 = ОкруглитьЧислоПоФорматуДелителя(Показатели.П000100321403, Делитель, Точность);
	П000100321404 = ОкруглитьЧислоПоФорматуДелителя(Показатели.П000100321404, Делитель, Точность);
	П000100321405 = ОкруглитьЧислоПоФорматуДелителя(Показатели.П000100321405, Делитель, Точность);
	
	РасчетПоказателя = П000100321403 + П000100321404 + П000100321405;
	
	Показатели.П000100321408 = РасчетПоказателя;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РасчитатьПоказатели_ОИК_Строка3216Графа08(Показатели, Делитель, Точность)
	
	П000100321603 = ОкруглитьЧислоПоФорматуДелителя(Показатели.П000100321603, Делитель, Точность);
	П000100321604 = ОкруглитьЧислоПоФорматуДелителя(Показатели.П000100321604, Делитель, Точность);
	П000100321605 = ОкруглитьЧислоПоФорматуДелителя(Показатели.П000100321605, Делитель, Точность);
	П000100321606 = ОкруглитьЧислоПоФорматуДелителя(Показатели.П000100321606, Делитель, Точность);
	П000100321607 = ОкруглитьЧислоПоФорматуДелителя(Показатели.П000100321607, Делитель, Точность);
	
	РасчетПоказателя = П000100321603 + П000100321604 + П000100321605 + П000100321606 + П000100321607;
	
	Показатели.П000100321608 = РасчетПоказателя;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РасчитатьПоказатели_ОИК_Строка3210Графа03(Показатели, Делитель, Точность)
	
	П000100321403 = ОкруглитьЧислоПоФорматуДелителя(Показатели.П000100321403, Делитель, Точность);
	П000100321503 = ОкруглитьЧислоПоФорматуДелителя(Показатели.П000100321503, Делитель, Точность);
	П000100321603 = ОкруглитьЧислоПоФорматуДелителя(Показатели.П000100321603, Делитель, Точность);
	
	РасчетПоказателя = П000100321403 + П000100321503 + П000100321603;
	
	Показатели.П000100321003 = РасчетПоказателя;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РасчитатьПоказатели_ОИК_Строка3210Графа04(Показатели, Делитель, Точность)
	
	П000100321404 = ОкруглитьЧислоПоФорматуДелителя(Показатели.П000100321404, Делитель, Точность);
	П000100321504 = ОкруглитьЧислоПоФорматуДелителя(Показатели.П000100321504, Делитель, Точность);
	П000100321604 = ОкруглитьЧислоПоФорматуДелителя(Показатели.П000100321604, Делитель, Точность);
	
	РасчетПоказателя = П000100321404 + П000100321504 + П000100321604;
	
	Показатели.П000100321004 = РасчетПоказателя;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РасчитатьПоказатели_ОИК_Строка3210Графа05(Показатели, Делитель, Точность)
	
	П000100321205 = ОкруглитьЧислоПоФорматуДелителя(Показатели.П000100321205, Делитель, Точность);
	П000100321305 = ОкруглитьЧислоПоФорматуДелителя(Показатели.П000100321305, Делитель, Точность);
	П000100321405 = ОкруглитьЧислоПоФорматуДелителя(Показатели.П000100321405, Делитель, Точность);
	П000100321505 = ОкруглитьЧислоПоФорматуДелителя(Показатели.П000100321505, Делитель, Точность);
	П000100321605 = ОкруглитьЧислоПоФорматуДелителя(Показатели.П000100321605, Делитель, Точность);
	
	РасчетПоказателя = П000100321205 + П000100321305 + П000100321405 + П000100321505 + П000100321605;
	
	Показатели.П000100321005 = РасчетПоказателя;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РасчитатьПоказатели_ОИК_Строка3210Графа06(Показатели, Делитель, Точность)
	
	П000100321606 = ОкруглитьЧислоПоФорматуДелителя(Показатели.П000100321606, Делитель, Точность);
	
	РасчетПоказателя = П000100321606;
	
	Показатели.П000100321006 = РасчетПоказателя;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РасчитатьПоказатели_ОИК_Строка3210Графа07(Показатели, Делитель, Точность)
	
	П000100321107 = ОкруглитьЧислоПоФорматуДелителя(Показатели.П000100321107, Делитель, Точность);
	П000100321207 = ОкруглитьЧислоПоФорматуДелителя(Показатели.П000100321207, Делитель, Точность);
	П000100321307 = ОкруглитьЧислоПоФорматуДелителя(Показатели.П000100321307, Делитель, Точность);
	П000100321507 = ОкруглитьЧислоПоФорматуДелителя(Показатели.П000100321507, Делитель, Точность);
	П000100321607 = ОкруглитьЧислоПоФорматуДелителя(Показатели.П000100321607, Делитель, Точность);
	
	РасчетПоказателя = П000100321107 + П000100321207 + П000100321307 + П000100321507 + П000100321607;
	
	Показатели.П000100321007 = РасчетПоказателя;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РасчитатьПоказатели_ОИК_Строка3210Графа08(Показатели, Делитель, Точность)
	
	П000100321108 = ОкруглитьЧислоПоФорматуДелителя(Показатели.П000100321108, Делитель, Точность);
	П000100321208 = ОкруглитьЧислоПоФорматуДелителя(Показатели.П000100321208, Делитель, Точность);
	П000100321308 = ОкруглитьЧислоПоФорматуДелителя(Показатели.П000100321308, Делитель, Точность);
	П000100321408 = ОкруглитьЧислоПоФорматуДелителя(Показатели.П000100321408, Делитель, Точность);
	П000100321608 = ОкруглитьЧислоПоФорматуДелителя(Показатели.П000100321608, Делитель, Точность);
	
	РасчетПоказателя = П000100321108 + П000100321208 + П000100321308 + П000100321408 + П000100321608;
	
	Показатели.П000100321008 = РасчетПоказателя;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РасчитатьПоказатели_ОИК_Строка3221Графа08(Показатели, Делитель, Точность)
	
	П000100322107 = ОкруглитьЧислоПоФорматуДелителя(Показатели.П000100322107, Делитель, Точность);
	
	РасчетПоказателя = П000100322107;
	
	Показатели.П000100322108 = РасчетПоказателя;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РасчитатьПоказатели_ОИК_Строка3222Графа08(Показатели, Делитель, Точность)
	
	П000100322205 = ОкруглитьЧислоПоФорматуДелителя(Показатели.П000100322205, Делитель, Точность);
	П000100322207 = ОкруглитьЧислоПоФорматуДелителя(Показатели.П000100322207, Делитель, Точность);
	
	РасчетПоказателя = П000100322205 + П000100322207;
	
	Показатели.П000100322208 = РасчетПоказателя;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РасчитатьПоказатели_ОИК_Строка3223Графа08(Показатели, Делитель, Точность)
	
	П000100322305 = ОкруглитьЧислоПоФорматуДелителя(Показатели.П000100322305, Делитель, Точность);
	П000100322307 = ОкруглитьЧислоПоФорматуДелителя(Показатели.П000100322307, Делитель, Точность);
	
	РасчетПоказателя = П000100322305 + П000100322307;
	
	Показатели.П000100322308 = РасчетПоказателя;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РасчитатьПоказатели_ОИК_Строка3224Графа08(Показатели, Делитель, Точность)
	
	П000100322403 = ОкруглитьЧислоПоФорматуДелителя(Показатели.П000100322403, Делитель, Точность);
	П000100322404 = ОкруглитьЧислоПоФорматуДелителя(Показатели.П000100322404, Делитель, Точность);
	П000100322405 = ОкруглитьЧислоПоФорматуДелителя(Показатели.П000100322405, Делитель, Точность);
	П000100322407 = ОкруглитьЧислоПоФорматуДелителя(Показатели.П000100322407, Делитель, Точность);
	
	РасчетПоказателя = П000100322403 + П000100322404 + П000100322405 + П000100322407;
	
	Показатели.П000100322408 = РасчетПоказателя;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РасчитатьПоказатели_ОИК_Строка3225Графа08(Показатели, Делитель, Точность)
	
	П000100322503 = ОкруглитьЧислоПоФорматуДелителя(Показатели.П000100322503, Делитель, Точность);
	П000100322504 = ОкруглитьЧислоПоФорматуДелителя(Показатели.П000100322504, Делитель, Точность);
	П000100322505 = ОкруглитьЧислоПоФорматуДелителя(Показатели.П000100322505, Делитель, Точность);
	П000100322507 = ОкруглитьЧислоПоФорматуДелителя(Показатели.П000100322507, Делитель, Точность);
	
	РасчетПоказателя = П000100322503 + П000100322504 + П000100322505 + П000100322507;
	
	Показатели.П000100322508 = РасчетПоказателя;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РасчитатьПоказатели_ОИК_Строка3226Графа08(Показатели, Делитель, Точность)
	
	П000100322603 = ОкруглитьЧислоПоФорматуДелителя(Показатели.П000100322603, Делитель, Точность);
	П000100322604 = ОкруглитьЧислоПоФорматуДелителя(Показатели.П000100322604, Делитель, Точность);
	П000100322605 = ОкруглитьЧислоПоФорматуДелителя(Показатели.П000100322605, Делитель, Точность);
	П000100322606 = ОкруглитьЧислоПоФорматуДелителя(Показатели.П000100322606, Делитель, Точность);
	П000100322607 = ОкруглитьЧислоПоФорматуДелителя(Показатели.П000100322607, Делитель, Точность);
	
	РасчетПоказателя = П000100322603 + П000100322604 + П000100322605 + П000100322606 + П000100322607;
	
	Показатели.П000100322608 = РасчетПоказателя;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РасчитатьПоказатели_ОИК_Строка3227Графа08(Показатели, Делитель, Точность)
	
	П000100322707 = ОкруглитьЧислоПоФорматуДелителя(Показатели.П000100322707, Делитель, Точность);
	
	РасчетПоказателя = П000100322707;
	
	Показатели.П000100322708 = РасчетПоказателя;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РасчитатьПоказатели_ОИК_Строка3220Графа03(Показатели, Делитель, Точность)
	
	П000100322403 = ОкруглитьЧислоПоФорматуДелителя(Показатели.П000100322403, Делитель, Точность);
	П000100322503 = ОкруглитьЧислоПоФорматуДелителя(Показатели.П000100322503, Делитель, Точность);
	П000100322603 = ОкруглитьЧислоПоФорматуДелителя(Показатели.П000100322603, Делитель, Точность);
	
	РасчетПоказателя = П000100322403 + П000100322503 + П000100322603;
	
	Показатели.П000100322003 = РасчетПоказателя;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РасчитатьПоказатели_ОИК_Строка3220Графа04(Показатели, Делитель, Точность)
	
	П000100322404 = ОкруглитьЧислоПоФорматуДелителя(Показатели.П000100322404, Делитель, Точность);
	П000100322504 = ОкруглитьЧислоПоФорматуДелителя(Показатели.П000100322504, Делитель, Точность);
	П000100322604 = ОкруглитьЧислоПоФорматуДелителя(Показатели.П000100322604, Делитель, Точность);
	
	РасчетПоказателя = П000100322404 + П000100322504 + П000100322604;
	
	Показатели.П000100322004 = РасчетПоказателя;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РасчитатьПоказатели_ОИК_Строка3220Графа05(Показатели, Делитель, Точность)
	
	П000100322205 = ОкруглитьЧислоПоФорматуДелителя(Показатели.П000100322205, Делитель, Точность);
	П000100322305 = ОкруглитьЧислоПоФорматуДелителя(Показатели.П000100322305, Делитель, Точность);
	П000100322405 = ОкруглитьЧислоПоФорматуДелителя(Показатели.П000100322405, Делитель, Точность);
	П000100322505 = ОкруглитьЧислоПоФорматуДелителя(Показатели.П000100322505, Делитель, Точность);
	П000100322605 = ОкруглитьЧислоПоФорматуДелителя(Показатели.П000100322605, Делитель, Точность);
	
	РасчетПоказателя = П000100322205 + П000100322305 + П000100322405 + П000100322505 + П000100322605;
	
	Показатели.П000100322005 = РасчетПоказателя;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РасчитатьПоказатели_ОИК_Строка3220Графа06(Показатели, Делитель, Точность)
	
	П000100322606 = ОкруглитьЧислоПоФорматуДелителя(Показатели.П000100322606, Делитель, Точность);
	
	РасчетПоказателя = П000100322606;
	
	Показатели.П000100322006 = РасчетПоказателя;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РасчитатьПоказатели_ОИК_Строка3220Графа07(Показатели, Делитель, Точность)
	
	П000100322107 = ОкруглитьЧислоПоФорматуДелителя(Показатели.П000100322107, Делитель, Точность);
	П000100322207 = ОкруглитьЧислоПоФорматуДелителя(Показатели.П000100322207, Делитель, Точность);
	П000100322307 = ОкруглитьЧислоПоФорматуДелителя(Показатели.П000100322307, Делитель, Точность);
	П000100322407 = ОкруглитьЧислоПоФорматуДелителя(Показатели.П000100322407, Делитель, Точность);
	П000100322507 = ОкруглитьЧислоПоФорматуДелителя(Показатели.П000100322507, Делитель, Точность);
	П000100322607 = ОкруглитьЧислоПоФорматуДелителя(Показатели.П000100322607, Делитель, Точность);
	П000100322707 = ОкруглитьЧислоПоФорматуДелителя(Показатели.П000100322707, Делитель, Точность);
	
	РасчетПоказателя = П000100322107 + П000100322207 + П000100322307 + П000100322407 + П000100322507 + П000100322607 + П000100322707;
	
	Показатели.П000100322007 = РасчетПоказателя;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РасчитатьПоказатели_ОИК_Строка3220Графа08(Показатели, Делитель, Точность)
	
	П000100322108 = ОкруглитьЧислоПоФорматуДелителя(Показатели.П000100322108, Делитель, Точность);
	П000100322208 = ОкруглитьЧислоПоФорматуДелителя(Показатели.П000100322208, Делитель, Точность);
	П000100322308 = ОкруглитьЧислоПоФорматуДелителя(Показатели.П000100322308, Делитель, Точность);
	П000100322408 = ОкруглитьЧислоПоФорматуДелителя(Показатели.П000100322408, Делитель, Точность);
	П000100322508 = ОкруглитьЧислоПоФорматуДелителя(Показатели.П000100322508, Делитель, Точность);
	П000100322608 = ОкруглитьЧислоПоФорматуДелителя(Показатели.П000100322608, Делитель, Точность);
	П000100322708 = ОкруглитьЧислоПоФорматуДелителя(Показатели.П000100322708, Делитель, Точность);
	
	РасчетПоказателя = П000100322108 + П000100322208 + П000100322308 + П000100322408 + П000100322508 + П000100322608 + П000100322708;
	
	Показатели.П000100322008 = РасчетПоказателя;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РасчитатьПоказатели_ОИК_Строка3240Графа07(Показатели, Делитель, Точность)
	
	П000100324006 = ОкруглитьЧислоПоФорматуДелителя(Показатели.П000100324006, Делитель, Точность);
	
	РасчетПоказателя = -П000100324006;
	
	Показатели.П000100324007 = РасчетПоказателя;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РасчитатьПоказатели_ОИК_Строка3200Графа08(Показатели, Делитель, Точность)
	
	П000100320003 = ОкруглитьЧислоПоФорматуДелителя(Показатели.П000100320003, Делитель, Точность);
	П000100320004 = ОкруглитьЧислоПоФорматуДелителя(Показатели.П000100320004, Делитель, Точность);
	П000100320005 = ОкруглитьЧислоПоФорматуДелителя(Показатели.П000100320005, Делитель, Точность);
	П000100320006 = ОкруглитьЧислоПоФорматуДелителя(Показатели.П000100320006, Делитель, Точность);
	П000100320007 = ОкруглитьЧислоПоФорматуДелителя(Показатели.П000100320007, Делитель, Точность);
	
	РасчетПоказателя = П000100320003 + П000100320004 + П000100320005 + П000100320006 + П000100320007;
	
	Показатели.П000100320008 = РасчетПоказателя;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РасчитатьПоказатели_ОИК_Строка3311Графа08(Показатели, Делитель, Точность)
	
	П000100331107 = ОкруглитьЧислоПоФорматуДелителя(Показатели.П000100331107, Делитель, Точность);
	
	РасчетПоказателя = П000100331107;
	
	Показатели.П000100331108 = РасчетПоказателя;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РасчитатьПоказатели_ОИК_Строка3312Графа08(Показатели, Делитель, Точность)
	
	П000100331205 = ОкруглитьЧислоПоФорматуДелителя(Показатели.П000100331205, Делитель, Точность);
	П000100331207 = ОкруглитьЧислоПоФорматуДелителя(Показатели.П000100331207, Делитель, Точность);
	
	РасчетПоказателя = П000100331205 + П000100331207;
	
	Показатели.П000100331208 = РасчетПоказателя;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РасчитатьПоказатели_ОИК_Строка3313Графа08(Показатели, Делитель, Точность)
	
	П000100331305 = ОкруглитьЧислоПоФорматуДелителя(Показатели.П000100331305, Делитель, Точность);
	П000100331307 = ОкруглитьЧислоПоФорматуДелителя(Показатели.П000100331307, Делитель, Точность);
	
	РасчетПоказателя = П000100331305 + П000100331307;
	
	Показатели.П000100331308 = РасчетПоказателя;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РасчитатьПоказатели_ОИК_Строка3314Графа08(Показатели, Делитель, Точность)
	
	П000100331403 = ОкруглитьЧислоПоФорматуДелителя(Показатели.П000100331403, Делитель, Точность);
	П000100331404 = ОкруглитьЧислоПоФорматуДелителя(Показатели.П000100331404, Делитель, Точность);
	П000100331405 = ОкруглитьЧислоПоФорматуДелителя(Показатели.П000100331405, Делитель, Точность);
	
	РасчетПоказателя = П000100331403 + П000100331404 + П000100331405;
	
	Показатели.П000100331408 = РасчетПоказателя;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РасчитатьПоказатели_ОИК_Строка3316Графа08(Показатели, Делитель, Точность)
	
	П000100331603 = ОкруглитьЧислоПоФорматуДелителя(Показатели.П000100331603, Делитель, Точность);
	П000100331604 = ОкруглитьЧислоПоФорматуДелителя(Показатели.П000100331604, Делитель, Точность);
	П000100331605 = ОкруглитьЧислоПоФорматуДелителя(Показатели.П000100331605, Делитель, Точность);
	П000100331606 = ОкруглитьЧислоПоФорматуДелителя(Показатели.П000100331606, Делитель, Точность);
	П000100331607 = ОкруглитьЧислоПоФорматуДелителя(Показатели.П000100331607, Делитель, Точность);
	
	РасчетПоказателя = П000100331603 + П000100331604 + П000100331605 + П000100331606 + П000100331607;
	
	Показатели.П000100331608 = РасчетПоказателя;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РасчитатьПоказатели_ОИК_Строка3310Графа03(Показатели, Делитель, Точность)
	
	П000100331403 = ОкруглитьЧислоПоФорматуДелителя(Показатели.П000100331403, Делитель, Точность);
	П000100331503 = ОкруглитьЧислоПоФорматуДелителя(Показатели.П000100331503, Делитель, Точность);
	П000100331603 = ОкруглитьЧислоПоФорматуДелителя(Показатели.П000100331603, Делитель, Точность);
	
	РасчетПоказателя = П000100331403 + П000100331503 + П000100331603;
	
	Показатели.П000100331003 = РасчетПоказателя;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РасчитатьПоказатели_ОИК_Строка3310Графа04(Показатели, Делитель, Точность)
	
	П000100331404 = ОкруглитьЧислоПоФорматуДелителя(Показатели.П000100331404, Делитель, Точность);
	П000100331504 = ОкруглитьЧислоПоФорматуДелителя(Показатели.П000100331504, Делитель, Точность);
	П000100331604 = ОкруглитьЧислоПоФорматуДелителя(Показатели.П000100331604, Делитель, Точность);
	
	РасчетПоказателя = П000100331404 + П000100331504 + П000100331604;
	
	Показатели.П000100331004 = РасчетПоказателя;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РасчитатьПоказатели_ОИК_Строка3310Графа05(Показатели, Делитель, Точность)
	
	П000100331205 = ОкруглитьЧислоПоФорматуДелителя(Показатели.П000100331205, Делитель, Точность);
	П000100331305 = ОкруглитьЧислоПоФорматуДелителя(Показатели.П000100331305, Делитель, Точность);
	П000100331405 = ОкруглитьЧислоПоФорматуДелителя(Показатели.П000100331405, Делитель, Точность);
	П000100331505 = ОкруглитьЧислоПоФорматуДелителя(Показатели.П000100331505, Делитель, Точность);
	П000100331605 = ОкруглитьЧислоПоФорматуДелителя(Показатели.П000100331605, Делитель, Точность);
	
	РасчетПоказателя = П000100331205 + П000100331305 + П000100331405 + П000100331505 + П000100331605;
	
	Показатели.П000100331005 = РасчетПоказателя;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РасчитатьПоказатели_ОИК_Строка3310Графа06(Показатели, Делитель, Точность)
	
	П000100331606 = ОкруглитьЧислоПоФорматуДелителя(Показатели.П000100331606, Делитель, Точность);
	
	РасчетПоказателя = П000100331606;
	
	Показатели.П000100331006 = РасчетПоказателя;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РасчитатьПоказатели_ОИК_Строка3310Графа07(Показатели, Делитель, Точность)
	
	П000100331107 = ОкруглитьЧислоПоФорматуДелителя(Показатели.П000100331107, Делитель, Точность);
	П000100331207 = ОкруглитьЧислоПоФорматуДелителя(Показатели.П000100331207, Делитель, Точность);
	П000100331307 = ОкруглитьЧислоПоФорматуДелителя(Показатели.П000100331307, Делитель, Точность);
	П000100331507 = ОкруглитьЧислоПоФорматуДелителя(Показатели.П000100331507, Делитель, Точность);
	П000100331607 = ОкруглитьЧислоПоФорматуДелителя(Показатели.П000100331607, Делитель, Точность);
	
	РасчетПоказателя = П000100331107 + П000100331207 + П000100331307 + П000100331507 + П000100331607;
	
	Показатели.П000100331007 = РасчетПоказателя;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РасчитатьПоказатели_ОИК_Строка3310Графа08(Показатели, Делитель, Точность)
	
	П000100331108 = ОкруглитьЧислоПоФорматуДелителя(Показатели.П000100331108, Делитель, Точность);
	П000100331208 = ОкруглитьЧислоПоФорматуДелителя(Показатели.П000100331208, Делитель, Точность);
	П000100331308 = ОкруглитьЧислоПоФорматуДелителя(Показатели.П000100331308, Делитель, Точность);
	П000100331408 = ОкруглитьЧислоПоФорматуДелителя(Показатели.П000100331408, Делитель, Точность);
	П000100331608 = ОкруглитьЧислоПоФорматуДелителя(Показатели.П000100331608, Делитель, Точность);
	
	РасчетПоказателя = П000100331108 + П000100331208 + П000100331308 + П000100331408 + П000100331608;
	
	Показатели.П000100331008 = РасчетПоказателя;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РасчитатьПоказатели_ОИК_Строка3321Графа08(Показатели, Делитель, Точность)
	
	П000100332107 = ОкруглитьЧислоПоФорматуДелителя(Показатели.П000100332107, Делитель, Точность);
	
	РасчетПоказателя = П000100332107;
	
	Показатели.П000100332108 = РасчетПоказателя;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РасчитатьПоказатели_ОИК_Строка3322Графа08(Показатели, Делитель, Точность)
	
	П000100332205 = ОкруглитьЧислоПоФорматуДелителя(Показатели.П000100332205, Делитель, Точность);
	П000100332207 = ОкруглитьЧислоПоФорматуДелителя(Показатели.П000100332207, Делитель, Точность);
	
	РасчетПоказателя = П000100332205 + П000100332207;
	
	Показатели.П000100332208 = РасчетПоказателя;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РасчитатьПоказатели_ОИК_Строка3323Графа08(Показатели, Делитель, Точность)
	
	П000100332305 = ОкруглитьЧислоПоФорматуДелителя(Показатели.П000100332305, Делитель, Точность);
	П000100332307 = ОкруглитьЧислоПоФорматуДелителя(Показатели.П000100332307, Делитель, Точность);
	
	РасчетПоказателя = П000100332305 + П000100332307;
	
	Показатели.П000100332308 = РасчетПоказателя;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РасчитатьПоказатели_ОИК_Строка3324Графа08(Показатели, Делитель, Точность)
	
	П000100332403 = ОкруглитьЧислоПоФорматуДелителя(Показатели.П000100332403, Делитель, Точность);
	П000100332404 = ОкруглитьЧислоПоФорматуДелителя(Показатели.П000100332404, Делитель, Точность);
	П000100332405 = ОкруглитьЧислоПоФорматуДелителя(Показатели.П000100332405, Делитель, Точность);
	П000100332407 = ОкруглитьЧислоПоФорматуДелителя(Показатели.П000100332407, Делитель, Точность);
	
	РасчетПоказателя = П000100332403 + П000100332404 + П000100332405 + П000100332407;
	
	Показатели.П000100332408 = РасчетПоказателя;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РасчитатьПоказатели_ОИК_Строка3325Графа08(Показатели, Делитель, Точность)
	
	П000100332503 = ОкруглитьЧислоПоФорматуДелителя(Показатели.П000100332503, Делитель, Точность);
	П000100332504 = ОкруглитьЧислоПоФорматуДелителя(Показатели.П000100332504, Делитель, Точность);
	П000100332505 = ОкруглитьЧислоПоФорматуДелителя(Показатели.П000100332505, Делитель, Точность);
	П000100332507 = ОкруглитьЧислоПоФорматуДелителя(Показатели.П000100332507, Делитель, Точность);
	
	РасчетПоказателя = П000100332503 + П000100332504 + П000100332505 + П000100332507;
	
	Показатели.П000100332508 = РасчетПоказателя;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РасчитатьПоказатели_ОИК_Строка3326Графа08(Показатели, Делитель, Точность)
	
	П000100332603 = ОкруглитьЧислоПоФорматуДелителя(Показатели.П000100332603, Делитель, Точность);
	П000100332604 = ОкруглитьЧислоПоФорматуДелителя(Показатели.П000100332604, Делитель, Точность);
	П000100332605 = ОкруглитьЧислоПоФорматуДелителя(Показатели.П000100332605, Делитель, Точность);
	П000100332606 = ОкруглитьЧислоПоФорматуДелителя(Показатели.П000100332606, Делитель, Точность);
	П000100332607 = ОкруглитьЧислоПоФорматуДелителя(Показатели.П000100332607, Делитель, Точность);
	
	РасчетПоказателя = П000100332603 + П000100332604 + П000100332605 + П000100332606 + П000100332607;
	
	Показатели.П000100332608 = РасчетПоказателя;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РасчитатьПоказатели_ОИК_Строка3327Графа08(Показатели, Делитель, Точность)
	
	П000100332707 = ОкруглитьЧислоПоФорматуДелителя(Показатели.П000100332707, Делитель, Точность);
	
	РасчетПоказателя = П000100332707;
	
	Показатели.П000100332708 = РасчетПоказателя;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РасчитатьПоказатели_ОИК_Строка3320Графа03(Показатели, Делитель, Точность)
	
	П000100332403 = ОкруглитьЧислоПоФорматуДелителя(Показатели.П000100332403, Делитель, Точность);
	П000100332503 = ОкруглитьЧислоПоФорматуДелителя(Показатели.П000100332503, Делитель, Точность);
	П000100332603 = ОкруглитьЧислоПоФорматуДелителя(Показатели.П000100332603, Делитель, Точность);
	
	РасчетПоказателя = П000100332403 + П000100332503 + П000100332603;
	
	Показатели.П000100332003 = РасчетПоказателя;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РасчитатьПоказатели_ОИК_Строка3320Графа04(Показатели, Делитель, Точность)
	
	П000100332404 = ОкруглитьЧислоПоФорматуДелителя(Показатели.П000100332404, Делитель, Точность);
	П000100332504 = ОкруглитьЧислоПоФорматуДелителя(Показатели.П000100332504, Делитель, Точность);
	П000100332604 = ОкруглитьЧислоПоФорматуДелителя(Показатели.П000100332604, Делитель, Точность);
	
	РасчетПоказателя = П000100332404 + П000100332504 + П000100332604;
	
	Показатели.П000100332004 = РасчетПоказателя;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РасчитатьПоказатели_ОИК_Строка3320Графа05(Показатели, Делитель, Точность)
	
	П000100332205 = ОкруглитьЧислоПоФорматуДелителя(Показатели.П000100332205, Делитель, Точность);
	П000100332305 = ОкруглитьЧислоПоФорматуДелителя(Показатели.П000100332305, Делитель, Точность);
	П000100332405 = ОкруглитьЧислоПоФорматуДелителя(Показатели.П000100332405, Делитель, Точность);
	П000100332505 = ОкруглитьЧислоПоФорматуДелителя(Показатели.П000100332505, Делитель, Точность);
	П000100332605 = ОкруглитьЧислоПоФорматуДелителя(Показатели.П000100332605, Делитель, Точность);
	
	РасчетПоказателя = П000100332205 + П000100332305 + П000100332405 + П000100332505 + П000100332605;
	
	Показатели.П000100332005 = РасчетПоказателя;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РасчитатьПоказатели_ОИК_Строка3320Графа06(Показатели, Делитель, Точность)
	
	П000100332606 = ОкруглитьЧислоПоФорматуДелителя(Показатели.П000100332606, Делитель, Точность);
	
	РасчетПоказателя = П000100332606;
	
	Показатели.П000100332006 = РасчетПоказателя;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РасчитатьПоказатели_ОИК_Строка3320Графа07(Показатели, Делитель, Точность)
	
	П000100332107 = ОкруглитьЧислоПоФорматуДелителя(Показатели.П000100332107, Делитель, Точность);
	П000100332207 = ОкруглитьЧислоПоФорматуДелителя(Показатели.П000100332207, Делитель, Точность);
	П000100332307 = ОкруглитьЧислоПоФорматуДелителя(Показатели.П000100332307, Делитель, Точность);
	П000100332407 = ОкруглитьЧислоПоФорматуДелителя(Показатели.П000100332407, Делитель, Точность);
	П000100332507 = ОкруглитьЧислоПоФорматуДелителя(Показатели.П000100332507, Делитель, Точность);
	П000100332607 = ОкруглитьЧислоПоФорматуДелителя(Показатели.П000100332607, Делитель, Точность);
	П000100332707 = ОкруглитьЧислоПоФорматуДелителя(Показатели.П000100332707, Делитель, Точность);
	
	РасчетПоказателя = П000100332107 + П000100332207 + П000100332307 + П000100332407 + П000100332507 + П000100332607 + П000100332707;
	
	Показатели.П000100332007 = РасчетПоказателя;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РасчитатьПоказатели_ОИК_Строка3320Графа08(Показатели, Делитель, Точность)
	
	П000100332108 = ОкруглитьЧислоПоФорматуДелителя(Показатели.П000100332108, Делитель, Точность);
	П000100332208 = ОкруглитьЧислоПоФорматуДелителя(Показатели.П000100332208, Делитель, Точность);
	П000100332308 = ОкруглитьЧислоПоФорматуДелителя(Показатели.П000100332308, Делитель, Точность);
	П000100332408 = ОкруглитьЧислоПоФорматуДелителя(Показатели.П000100332408, Делитель, Точность);
	П000100332508 = ОкруглитьЧислоПоФорматуДелителя(Показатели.П000100332508, Делитель, Точность);
	П000100332608 = ОкруглитьЧислоПоФорматуДелителя(Показатели.П000100332608, Делитель, Точность);
	П000100332708 = ОкруглитьЧислоПоФорматуДелителя(Показатели.П000100332708, Делитель, Точность);
	
	РасчетПоказателя = П000100332108 + П000100332208 + П000100332308 + П000100332408 + П000100332508 + П000100332608 + П000100332708;
	
	Показатели.П000100332008 = РасчетПоказателя;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РасчитатьПоказатели_ОИК_Строка3340Графа07(Показатели, Делитель, Точность)
	
	П000100334006 = ОкруглитьЧислоПоФорматуДелителя(Показатели.П000100334006, Делитель, Точность);
	
	РасчетПоказателя = -П000100334006;
	
	Показатели.П000100334007 = РасчетПоказателя;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РасчитатьПоказатели_ОИК_Строка3300Графа08(Показатели, Делитель, Точность)
	
	П000100330003 = ОкруглитьЧислоПоФорматуДелителя(Показатели.П000100330003, Делитель, Точность);
	П000100330004 = ОкруглитьЧислоПоФорматуДелителя(Показатели.П000100330004, Делитель, Точность);
	П000100330005 = ОкруглитьЧислоПоФорматуДелителя(Показатели.П000100330005, Делитель, Точность);
	П000100330006 = ОкруглитьЧислоПоФорматуДелителя(Показатели.П000100330006, Делитель, Точность);
	П000100330007 = ОкруглитьЧислоПоФорматуДелителя(Показатели.П000100330007, Делитель, Точность);
	
	РасчетПоказателя = П000100330003 + П000100330004 + П000100330005 + П000100330006 + П000100330007;
	
	Показатели.П000100330008 = РасчетПоказателя;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РасчитатьПоказатели_ОИК_Строка3401Графа05(Показатели, Делитель, Точность)
	
	П000100340106 = ОкруглитьЧислоПоФорматуДелителя(Показатели.П000100340106, Делитель, Точность);
	П000100340103 = ОкруглитьЧислоПоФорматуДелителя(Показатели.П000100340103, Делитель, Точность);
	П000100340104 = ОкруглитьЧислоПоФорматуДелителя(Показатели.П000100340104, Делитель, Точность);
	
	РасчетПоказателя = П000100340106 - П000100340103 - П000100340104;
	
	Показатели.П000100340105 = РасчетПоказателя;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РасчитатьПоказатели_ОИК_Строка3411Графа06(Показатели, Делитель, Точность)
	
	П000100341103 = ОкруглитьЧислоПоФорматуДелителя(Показатели.П000100341103, Делитель, Точность);
	П000100341104 = ОкруглитьЧислоПоФорматуДелителя(Показатели.П000100341104, Делитель, Точность);
	П000100341105 = ОкруглитьЧислоПоФорматуДелителя(Показатели.П000100341105, Делитель, Точность);
	
	РасчетПоказателя = П000100341103 + П000100341104 + П000100341105;
	
	Показатели.П000100341106 = РасчетПоказателя;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РасчитатьПоказатели_ОИК_Строка3421Графа06(Показатели, Делитель, Точность)
	
	П000100342103 = ОкруглитьЧислоПоФорматуДелителя(Показатели.П000100342103, Делитель, Точность);
	П000100342104 = ОкруглитьЧислоПоФорматуДелителя(Показатели.П000100342104, Делитель, Точность);
	П000100342105 = ОкруглитьЧислоПоФорматуДелителя(Показатели.П000100342105, Делитель, Точность);
	
	РасчетПоказателя = П000100342103 + П000100342104 + П000100342105;
	
	Показатели.П000100342106 = РасчетПоказателя;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РасчитатьПоказатели_ОИК_Строка3501Графа03(Показатели, Делитель, Точность)
	
	П000100340103 = ОкруглитьЧислоПоФорматуДелителя(Показатели.П000100340103, Делитель, Точность);
	П000100341103 = ОкруглитьЧислоПоФорматуДелителя(Показатели.П000100341103, Делитель, Точность);
	П000100342103 = ОкруглитьЧислоПоФорматуДелителя(Показатели.П000100342103, Делитель, Точность);
	
	РасчетПоказателя = П000100340103 + П000100341103 + П000100342103;
	
	Показатели.П000100350103 = РасчетПоказателя;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РасчитатьПоказатели_ОИК_Строка3501Графа04(Показатели, Делитель, Точность)
	
	П000100340104 = ОкруглитьЧислоПоФорматуДелителя(Показатели.П000100340104, Делитель, Точность);
	П000100341104 = ОкруглитьЧислоПоФорматуДелителя(Показатели.П000100341104, Делитель, Точность);
	П000100342104 = ОкруглитьЧислоПоФорматуДелителя(Показатели.П000100342104, Делитель, Точность);
	
	РасчетПоказателя = П000100340104 + П000100341104 + П000100342104;
	
	Показатели.П000100350104 = РасчетПоказателя;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РасчитатьПоказатели_ОИК_Строка3501Графа05(Показатели, Делитель, Точность)
	
	П000100340105 = ОкруглитьЧислоПоФорматуДелителя(Показатели.П000100340105, Делитель, Точность);
	П000100341105 = ОкруглитьЧислоПоФорматуДелителя(Показатели.П000100341105, Делитель, Точность);
	П000100342105 = ОкруглитьЧислоПоФорматуДелителя(Показатели.П000100342105, Делитель, Точность);
	
	РасчетПоказателя = П000100340105 + П000100341105 + П000100342105;
	
	Показатели.П000100350105 = РасчетПоказателя;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РасчитатьПоказатели_ОИК_Строка3501Графа06(Показатели, Делитель, Точность)
	
	П000100350103 = ОкруглитьЧислоПоФорматуДелителя(Показатели.П000100350103, Делитель, Точность);
	П000100350104 = ОкруглитьЧислоПоФорматуДелителя(Показатели.П000100350104, Делитель, Точность);
	П000100350105 = ОкруглитьЧислоПоФорматуДелителя(Показатели.П000100350105, Делитель, Точность);
	
	РасчетПоказателя = П000100350103 + П000100350104 + П000100350105;
	
	Показатели.П000100350106 = РасчетПоказателя;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РасчитатьПоказатели_ОИК_Строка3402Графа06(Показатели, Делитель, Точность)
	
	П000100340203 = ОкруглитьЧислоПоФорматуДелителя(Показатели.П000100340203, Делитель, Точность);
	П000100340204 = ОкруглитьЧислоПоФорматуДелителя(Показатели.П000100340204, Делитель, Точность);
	П000100340205 = ОкруглитьЧислоПоФорматуДелителя(Показатели.П000100340205, Делитель, Точность);
	
	РасчетПоказателя = П000100340203 + П000100340204 + П000100340205;
	
	Показатели.П000100340206 = РасчетПоказателя;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РасчитатьПоказатели_ОИК_Строка3412Графа06(Показатели, Делитель, Точность)
	
	П000100341203 = ОкруглитьЧислоПоФорматуДелителя(Показатели.П000100341203, Делитель, Точность);
	П000100341204 = ОкруглитьЧислоПоФорматуДелителя(Показатели.П000100341204, Делитель, Точность);
	П000100341205 = ОкруглитьЧислоПоФорматуДелителя(Показатели.П000100341205, Делитель, Точность);
	
	РасчетПоказателя = П000100341203 + П000100341204 + П000100341205;
	
	Показатели.П000100341206 = РасчетПоказателя;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РасчитатьПоказатели_ОИК_Строка3422Графа06(Показатели, Делитель, Точность)
	
	П000100342203 = ОкруглитьЧислоПоФорматуДелителя(Показатели.П000100342203, Делитель, Точность);
	П000100342204 = ОкруглитьЧислоПоФорматуДелителя(Показатели.П000100342204, Делитель, Точность);
	П000100342205 = ОкруглитьЧислоПоФорматуДелителя(Показатели.П000100342205, Делитель, Точность);
	
	РасчетПоказателя = П000100342203 + П000100342204 + П000100342205;
	
	Показатели.П000100342206 = РасчетПоказателя;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РасчитатьПоказатели_ОИК_Строка3502Графа03(Показатели, Делитель, Точность)
	
	П000100340203 = ОкруглитьЧислоПоФорматуДелителя(Показатели.П000100340203, Делитель, Точность);
	П000100341203 = ОкруглитьЧислоПоФорматуДелителя(Показатели.П000100341203, Делитель, Точность);
	П000100342203 = ОкруглитьЧислоПоФорматуДелителя(Показатели.П000100342203, Делитель, Точность);
	
	РасчетПоказателя = П000100340203 + П000100341203 + П000100342203;
	
	Показатели.П000100350203 = РасчетПоказателя;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РасчитатьПоказатели_ОИК_Строка3502Графа04(Показатели, Делитель, Точность)
	
	П000100340204 = ОкруглитьЧислоПоФорматуДелителя(Показатели.П000100340204, Делитель, Точность);
	П000100341204 = ОкруглитьЧислоПоФорматуДелителя(Показатели.П000100341204, Делитель, Точность);
	П000100342204 = ОкруглитьЧислоПоФорматуДелителя(Показатели.П000100342204, Делитель, Точность);
	
	РасчетПоказателя = П000100340204 + П000100341204 + П000100342204;
	
	Показатели.П000100350204 = РасчетПоказателя;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РасчитатьПоказатели_ОИК_Строка3502Графа05(Показатели, Делитель, Точность)
	
	П000100340205 = ОкруглитьЧислоПоФорматуДелителя(Показатели.П000100340205, Делитель, Точность);
	П000100341205 = ОкруглитьЧислоПоФорматуДелителя(Показатели.П000100341205, Делитель, Точность);
	П000100342205 = ОкруглитьЧислоПоФорматуДелителя(Показатели.П000100342205, Делитель, Точность);
	
	РасчетПоказателя = П000100340205 + П000100341205 + П000100342205;
	
	Показатели.П000100350205 = РасчетПоказателя;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РасчитатьПоказатели_ОИК_Строка3502Графа06(Показатели, Делитель, Точность)
	
	П000100350203 = ОкруглитьЧислоПоФорматуДелителя(Показатели.П000100350203, Делитель, Точность);
	П000100350204 = ОкруглитьЧислоПоФорматуДелителя(Показатели.П000100350204, Делитель, Точность);
	П000100350205 = ОкруглитьЧислоПоФорматуДелителя(Показатели.П000100350205, Делитель, Точность);
	
	РасчетПоказателя = П000100350203 + П000100350204 + П000100350205;
	
	Показатели.П000100350206 = РасчетПоказателя;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РасчитатьПоказатели_ОИК_Строка3400Графа05(Показатели, Делитель, Точность)
	
	П000100340006 = ОкруглитьЧислоПоФорматуДелителя(Показатели.П000100340006, Делитель, Точность);
	П000100340003 = ОкруглитьЧислоПоФорматуДелителя(Показатели.П000100340003, Делитель, Точность);
	П000100340004 = ОкруглитьЧислоПоФорматуДелителя(Показатели.П000100340004, Делитель, Точность);
	
	РасчетПоказателя = П000100340006 - П000100340003 - П000100340004;
	
	Показатели.П000100340005 = РасчетПоказателя;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РасчитатьПоказатели_ОИК_Строка3410Графа03(Показатели, Делитель, Точность)
	
	П000100341103 = ОкруглитьЧислоПоФорматуДелителя(Показатели.П000100341103, Делитель, Точность);
	П000100341203 = ОкруглитьЧислоПоФорматуДелителя(Показатели.П000100341203, Делитель, Точность);
	
	РасчетПоказателя = П000100341103 + П000100341203;
	
	Показатели.П000100341003 = РасчетПоказателя;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РасчитатьПоказатели_ОИК_Строка3410Графа04(Показатели, Делитель, Точность)
	
	П000100341104 = ОкруглитьЧислоПоФорматуДелителя(Показатели.П000100341104, Делитель, Точность);
	П000100341204 = ОкруглитьЧислоПоФорматуДелителя(Показатели.П000100341204, Делитель, Точность);
	
	РасчетПоказателя = П000100341104 + П000100341204;
	
	Показатели.П000100341004 = РасчетПоказателя;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РасчитатьПоказатели_ОИК_Строка3410Графа05(Показатели, Делитель, Точность)
	
	П000100341105 = ОкруглитьЧислоПоФорматуДелителя(Показатели.П000100341105, Делитель, Точность);
	П000100341205 = ОкруглитьЧислоПоФорматуДелителя(Показатели.П000100341205, Делитель, Точность);
	
	РасчетПоказателя = П000100341105 + П000100341205;
	
	Показатели.П000100341005 = РасчетПоказателя;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РасчитатьПоказатели_ОИК_Строка3410Графа06(Показатели, Делитель, Точность)
	
	П000100341003 = ОкруглитьЧислоПоФорматуДелителя(Показатели.П000100341003, Делитель, Точность);
	П000100341004 = ОкруглитьЧислоПоФорматуДелителя(Показатели.П000100341004, Делитель, Точность);
	П000100341005 = ОкруглитьЧислоПоФорматуДелителя(Показатели.П000100341005, Делитель, Точность);
	
	РасчетПоказателя = П000100341003 + П000100341004 + П000100341005;
	
	Показатели.П000100341006 = РасчетПоказателя;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РасчитатьПоказатели_ОИК_Строка3420Графа03(Показатели, Делитель, Точность)
	
	П000100342103 = ОкруглитьЧислоПоФорматуДелителя(Показатели.П000100342103, Делитель, Точность);
	П000100342203 = ОкруглитьЧислоПоФорматуДелителя(Показатели.П000100342203, Делитель, Точность);
	
	РасчетПоказателя = П000100342103 + П000100342203;
	
	Показатели.П000100342003 = РасчетПоказателя;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РасчитатьПоказатели_ОИК_Строка3420Графа04(Показатели, Делитель, Точность)
	
	П000100342104 = ОкруглитьЧислоПоФорматуДелителя(Показатели.П000100342104, Делитель, Точность);
	П000100342204 = ОкруглитьЧислоПоФорматуДелителя(Показатели.П000100342204, Делитель, Точность);
	
	РасчетПоказателя = П000100342104 + П000100342204;
	
	Показатели.П000100342004 = РасчетПоказателя;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РасчитатьПоказатели_ОИК_Строка3420Графа05(Показатели, Делитель, Точность)
	
	П000100342105 = ОкруглитьЧислоПоФорматуДелителя(Показатели.П000100342105, Делитель, Точность);
	П000100342205 = ОкруглитьЧислоПоФорматуДелителя(Показатели.П000100342205, Делитель, Точность);
	
	РасчетПоказателя = П000100342105 + П000100342205;
	
	Показатели.П000100342005 = РасчетПоказателя;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РасчитатьПоказатели_ОИК_Строка3420Графа06(Показатели, Делитель, Точность)
	
	П000100342003 = ОкруглитьЧислоПоФорматуДелителя(Показатели.П000100342003, Делитель, Точность);
	П000100342004 = ОкруглитьЧислоПоФорматуДелителя(Показатели.П000100342004, Делитель, Точность);
	П000100342005 = ОкруглитьЧислоПоФорматуДелителя(Показатели.П000100342005, Делитель, Точность);
	
	РасчетПоказателя = П000100342003 + П000100342004 + П000100342005;
	
	Показатели.П000100342006 = РасчетПоказателя;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РасчитатьПоказатели_ОИК_Строка3500Графа03(Показатели, Делитель, Точность)
	
	П000100340003 = ОкруглитьЧислоПоФорматуДелителя(Показатели.П000100340003, Делитель, Точность);
	П000100341003 = ОкруглитьЧислоПоФорматуДелителя(Показатели.П000100341003, Делитель, Точность);
	П000100342003 = ОкруглитьЧислоПоФорматуДелителя(Показатели.П000100342003, Делитель, Точность);
	
	РасчетПоказателя = П000100340003 + П000100341003 + П000100342003;
	
	Показатели.П000100350003 = РасчетПоказателя;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РасчитатьПоказатели_ОИК_Строка3500Графа04(Показатели, Делитель, Точность)
	
	П000100340004 = ОкруглитьЧислоПоФорматуДелителя(Показатели.П000100340004, Делитель, Точность);
	П000100341004 = ОкруглитьЧислоПоФорматуДелителя(Показатели.П000100341004, Делитель, Точность);
	П000100342004 = ОкруглитьЧислоПоФорматуДелителя(Показатели.П000100342004, Делитель, Точность);
	
	РасчетПоказателя = П000100340004 + П000100341004 + П000100342004;
	
	Показатели.П000100350004 = РасчетПоказателя;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РасчитатьПоказатели_ОИК_Строка3500Графа05(Показатели, Делитель, Точность)
	
	П000100340005 = ОкруглитьЧислоПоФорматуДелителя(Показатели.П000100340005, Делитель, Точность);
	П000100341005 = ОкруглитьЧислоПоФорматуДелителя(Показатели.П000100341005, Делитель, Точность);
	П000100342005 = ОкруглитьЧислоПоФорматуДелителя(Показатели.П000100342005, Делитель, Точность);
	
	РасчетПоказателя = П000100340005 + П000100341005 + П000100342005;
	
	Показатели.П000100350005 = РасчетПоказателя;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РасчитатьПоказатели_ОИК_Строка3500Графа06(Показатели, Делитель, Точность)
	
	П000100350003 = ОкруглитьЧислоПоФорматуДелителя(Показатели.П000100350003, Делитель, Точность);
	П000100350004 = ОкруглитьЧислоПоФорматуДелителя(Показатели.П000100350004, Делитель, Точность);
	П000100350005 = ОкруглитьЧислоПоФорматуДелителя(Показатели.П000100350005, Делитель, Точность);
	
	РасчетПоказателя = П000100350003 + П000100350004 + П000100350005;
	
	Показатели.П000100350006 = РасчетПоказателя;
	
КонецПроцедуры

#КонецОбласти

#Область АвторасчетПоказателей_ОДДС

&НаКлиентеНаСервереБезКонтекста
Процедура РасчитатьПоказатели_ОДДС(ПараметрыРасчета)
	
	ИмяПоказателя = ПараметрыРасчета.ИмяПоказателя;
	
	НомерГрафы = Прав(ИмяПоказателя, 2);
	
	Если НомерГрафы <> "03" И НомерГрафы <> "04" Тогда
		Возврат;
	КонецЕсли;
	
	РасчитатьПоказатели_ОДДС_ПоГрафе(ПараметрыРасчета, НомерГрафы);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РасчитатьПоказатели_ОДДС_ПоГрафе(ПараметрыРасчета, НомерГрафы)
	
	ДанныеСтраницы = ПараметрыРасчета.ДанныеСтраницы.Данные;
	Делитель = ПараметрыРасчета.Делитель;
	Точность = ПараметрыРасчета.Точность;
	
	Если Делитель <> 1000 И Делитель <> 1000000 Тогда
		Делитель = 1;
	КонецЕсли;
	
	РасчитатьПоказатели_ОДДС_Строка4110(ДанныеСтраницы, НомерГрафы, Делитель, Точность);
	РасчитатьПоказатели_ОДДС_Строка4120(ДанныеСтраницы, НомерГрафы, Делитель, Точность);
	РасчитатьПоказатели_ОДДС_Строка4100(ДанныеСтраницы, НомерГрафы, Делитель, Точность);
	
	РасчитатьПоказатели_ОДДС_Строка4210(ДанныеСтраницы, НомерГрафы, Делитель, Точность);
	РасчитатьПоказатели_ОДДС_Строка4220(ДанныеСтраницы, НомерГрафы, Делитель, Точность);
	РасчитатьПоказатели_ОДДС_Строка4200(ДанныеСтраницы, НомерГрафы, Делитель, Точность);
	
	РасчитатьПоказатели_ОДДС_Строка4310(ДанныеСтраницы, НомерГрафы, Делитель, Точность);
	РасчитатьПоказатели_ОДДС_Строка4320(ДанныеСтраницы, НомерГрафы, Делитель, Точность);
	РасчитатьПоказатели_ОДДС_Строка4300(ДанныеСтраницы, НомерГрафы, Делитель, Точность);
	
	РасчитатьПоказатели_ОДДС_Строка4400(ДанныеСтраницы, НомерГрафы, Делитель, Точность);
	РасчитатьПоказатели_ОДДС_Строка4500(ДанныеСтраницы, НомерГрафы, Делитель, Точность);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РасчитатьПоказатели_ОДДС_Строка4110(Показатели, Графа, Делитель, Точность)
	
	П000100411103 = ОкруглитьЧислоПоФорматуДелителя(Показатели["П0001004111" + Графа], Делитель, Точность);
	П000100411203 = ОкруглитьЧислоПоФорматуДелителя(Показатели["П0001004112" + Графа], Делитель, Точность);
	П000100411303 = ОкруглитьЧислоПоФорматуДелителя(Показатели["П0001004113" + Графа], Делитель, Точность);
	П000100411903 = ОкруглитьЧислоПоФорматуДелителя(Показатели["П0001004119" + Графа], Делитель, Точность);
	
	РасчетПоказателя = П000100411103 + П000100411203 + П000100411303 + П000100411903;
	
	Показатели["П0001004110" + Графа] = РасчетПоказателя;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РасчитатьПоказатели_ОДДС_Строка4120(Показатели, Графа, Делитель, Точность)
	
	П000100412103 = ОкруглитьЧислоПоФорматуДелителя(Показатели["П0001004121" + Графа], Делитель, Точность);
	П000100412203 = ОкруглитьЧислоПоФорматуДелителя(Показатели["П0001004122" + Графа], Делитель, Точность);
	П000100412303 = ОкруглитьЧислоПоФорматуДелителя(Показатели["П0001004123" + Графа], Делитель, Точность);
	П000100412403 = ОкруглитьЧислоПоФорматуДелителя(Показатели["П0001004124" + Графа], Делитель, Точность);
	П000100412903 = ОкруглитьЧислоПоФорматуДелителя(Показатели["П0001004129" + Графа], Делитель, Точность);
	
	РасчетПоказателя = П000100412103 + П000100412203 + П000100412303 + П000100412403 + П000100412903;
	
	Показатели["П0001004120" + Графа] = РасчетПоказателя;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РасчитатьПоказатели_ОДДС_Строка4100(Показатели, Графа, Делитель, Точность)
	
	П000100411003 = ОкруглитьЧислоПоФорматуДелителя(Показатели["П0001004110" + Графа], Делитель, Точность);
	П000100412003 = ОкруглитьЧислоПоФорматуДелителя(Показатели["П0001004120" + Графа], Делитель, Точность);
	
	РасчетПоказателя = П000100411003 + П000100412003;
	
	Показатели["П0001004100" + Графа] = РасчетПоказателя;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РасчитатьПоказатели_ОДДС_Строка4210(Показатели, Графа, Делитель, Точность)
	
	П000100421103 = ОкруглитьЧислоПоФорматуДелителя(Показатели["П0001004211" + Графа], Делитель, Точность);
	П000100421203 = ОкруглитьЧислоПоФорматуДелителя(Показатели["П0001004212" + Графа], Делитель, Точность);
	П000100421303 = ОкруглитьЧислоПоФорматуДелителя(Показатели["П0001004213" + Графа], Делитель, Точность);
	П000100421403 = ОкруглитьЧислоПоФорматуДелителя(Показатели["П0001004214" + Графа], Делитель, Точность);
	П000100421903 = ОкруглитьЧислоПоФорматуДелителя(Показатели["П0001004219" + Графа], Делитель, Точность);
	
	РасчетПоказателя = П000100421103 + П000100421203 + П000100421303 + П000100421403 + П000100421903;
	
	Показатели["П0001004210" + Графа] = РасчетПоказателя;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РасчитатьПоказатели_ОДДС_Строка4220(Показатели, Графа, Делитель, Точность)
	
	П000100422103 = ОкруглитьЧислоПоФорматуДелителя(Показатели["П0001004221" + Графа], Делитель, Точность);
	П000100422203 = ОкруглитьЧислоПоФорматуДелителя(Показатели["П0001004222" + Графа], Делитель, Точность);
	П000100422303 = ОкруглитьЧислоПоФорматуДелителя(Показатели["П0001004223" + Графа], Делитель, Точность);
	П000100422403 = ОкруглитьЧислоПоФорматуДелителя(Показатели["П0001004224" + Графа], Делитель, Точность);
	П000100422903 = ОкруглитьЧислоПоФорматуДелителя(Показатели["П0001004229" + Графа], Делитель, Точность);
	
	РасчетПоказателя = П000100422103 + П000100422203 + П000100422303 + П000100422403 + П000100422903;
	
	Показатели["П0001004220" + Графа] = РасчетПоказателя;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РасчитатьПоказатели_ОДДС_Строка4200(Показатели, Графа, Делитель, Точность)
	
	П000100421003 = ОкруглитьЧислоПоФорматуДелителя(Показатели["П0001004210" + Графа], Делитель, Точность);
	П000100422003 = ОкруглитьЧислоПоФорматуДелителя(Показатели["П0001004220" + Графа], Делитель, Точность);
	
	РасчетПоказателя = П000100421003 + П000100422003;
	
	Показатели["П0001004200" + Графа] = РасчетПоказателя;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РасчитатьПоказатели_ОДДС_Строка4310(Показатели, Графа, Делитель, Точность)
	
	П000100431103 = ОкруглитьЧислоПоФорматуДелителя(Показатели["П0001004311" + Графа], Делитель, Точность);
	П000100431203 = ОкруглитьЧислоПоФорматуДелителя(Показатели["П0001004312" + Графа], Делитель, Точность);
	П000100431303 = ОкруглитьЧислоПоФорматуДелителя(Показатели["П0001004313" + Графа], Делитель, Точность);
	П000100431403 = ОкруглитьЧислоПоФорматуДелителя(Показатели["П0001004314" + Графа], Делитель, Точность);
	П000100431903 = ОкруглитьЧислоПоФорматуДелителя(Показатели["П0001004319" + Графа], Делитель, Точность);
	
	РасчетПоказателя = П000100431103 + П000100431203 + П000100431303 + П000100431403 + П000100431903;
	
	Показатели["П0001004310" + Графа] = РасчетПоказателя;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РасчитатьПоказатели_ОДДС_Строка4320(Показатели, Графа, Делитель, Точность)
	
	П000100432103 = ОкруглитьЧислоПоФорматуДелителя(Показатели["П0001004321" + Графа], Делитель, Точность);
	П000100432203 = ОкруглитьЧислоПоФорматуДелителя(Показатели["П0001004322" + Графа], Делитель, Точность);
	П000100432303 = ОкруглитьЧислоПоФорматуДелителя(Показатели["П0001004323" + Графа], Делитель, Точность);
	П000100432903 = ОкруглитьЧислоПоФорматуДелителя(Показатели["П0001004329" + Графа], Делитель, Точность);
	
	РасчетПоказателя = П000100432103 + П000100432203 + П000100432303 + П000100432903;
	
	Показатели["П0001004320" + Графа] = РасчетПоказателя;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РасчитатьПоказатели_ОДДС_Строка4300(Показатели, Графа, Делитель, Точность)
	
	П000100431003 = ОкруглитьЧислоПоФорматуДелителя(Показатели["П0001004310" + Графа], Делитель, Точность);
	П000100432003 = ОкруглитьЧислоПоФорматуДелителя(Показатели["П0001004320" + Графа], Делитель, Точность);
	
	РасчетПоказателя = П000100431003 + П000100432003;
	
	Показатели["П0001004300" + Графа] = РасчетПоказателя;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РасчитатьПоказатели_ОДДС_Строка4400(Показатели, Графа, Делитель, Точность)
	
	П000100410003 = ОкруглитьЧислоПоФорматуДелителя(Показатели["П0001004100" + Графа], Делитель, Точность);
	П000100420003 = ОкруглитьЧислоПоФорматуДелителя(Показатели["П0001004200" + Графа], Делитель, Точность);
	П000100430003 = ОкруглитьЧислоПоФорматуДелителя(Показатели["П0001004300" + Графа], Делитель, Точность);
	
	РасчетПоказателя = П000100410003 + П000100420003 + П000100430003;
	
	Показатели["П0001004400" + Графа] = РасчетПоказателя;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РасчитатьПоказатели_ОДДС_Строка4500(Показатели, Графа, Делитель, Точность)
	
	П000100440003 = ОкруглитьЧислоПоФорматуДелителя(Показатели["П0001004400" + Графа], Делитель, Точность);
	П000100445003 = ОкруглитьЧислоПоФорматуДелителя(Показатели["П0001004450" + Графа], Делитель, Точность);
	П000100449003 = ОкруглитьЧислоПоФорматуДелителя(Показатели["П0001004490" + Графа], Делитель, Точность);
	
	РасчетПоказателя = П000100440003 + П000100445003 + П000100449003;
	
	Показатели["П0001004500" + Графа] = РасчетПоказателя;
	
КонецПроцедуры

#КонецОбласти

#Область АвторасчетПоказателей_ОЦИС

&НаКлиентеНаСервереБезКонтекста
Процедура РасчитатьПоказатели_ОЦИС(ПараметрыРасчета)
	
	ИмяПоказателя = ПараметрыРасчета.ИмяПоказателя;
	
	НомерГрафы = Прав(ИмяПоказателя, 2);
	
	Если НомерГрафы <> "04" И НомерГрафы <> "05" Тогда
		Возврат;
	КонецЕсли;
	
	РасчитатьПоказатели_ОЦИС_ПоГрафе(ПараметрыРасчета, НомерГрафы);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РасчитатьПоказатели_ОЦИС_ПоГрафе(ПараметрыРасчета, НомерГрафы)
	
	ДанныеСтраницы = ПараметрыРасчета.ДанныеСтраницы.Данные;
	
	РасчитатьПоказатели_ОЦИС_Строка6200(ДанныеСтраницы, НомерГрафы);
	
	РасчитатьПоказатели_ОЦИС_Строка6310(ДанныеСтраницы, НомерГрафы);
	РасчитатьПоказатели_ОЦИС_Строка6320(ДанныеСтраницы, НомерГрафы);
	РасчитатьПоказатели_ОЦИС_Строка6300(ДанныеСтраницы, НомерГрафы);
	
	РасчитатьПоказатели_ОЦИС_Строка6400(ДанныеСтраницы, НомерГрафы);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РасчитатьПоказатели_ОЦИС_Строка6200(Показатели, Графа)
	
	П000100621004 = Показатели["П0001006210" + Графа];
	П000100621504 = Показатели["П0001006215" + Графа];
	П000100622004 = Показатели["П0001006220" + Графа];
	П000100623004 = Показатели["П0001006230" + Графа];
	П000100624004 = Показатели["П0001006240" + Графа];
	П000100625004 = Показатели["П0001006250" + Графа];
	
	РасчетПоказателя = П000100621004 + П000100621504 + П000100622004 + П000100623004 + П000100624004 + П000100625004;
	Показатели["П0001006200" + Графа] = РасчетПоказателя;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РасчитатьПоказатели_ОЦИС_Строка6310(Показатели, Графа)
	
	П000100631104 = Показатели["П0001006311" + Графа];
	П000100631204 = Показатели["П0001006312" + Графа];
	П000100631304 = Показатели["П0001006313" + Графа];
	
	РасчетПоказателя = П000100631104 + П000100631204 + П000100631304;
	
	Показатели["П0001006310" + Графа] = РасчетПоказателя;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РасчитатьПоказатели_ОЦИС_Строка6320(Показатели, Графа)
	
	П000100632104 = Показатели["П0001006321" + Графа];
	П000100632204 = Показатели["П0001006322" + Графа];
	П000100632304 = Показатели["П0001006323" + Графа];
	П000100632404 = Показатели["П0001006324" + Графа];
	П000100632504 = Показатели["П0001006325" + Графа];
	П000100632604 = Показатели["П0001006326" + Графа];
	
	РасчетПоказателя = П000100632104 + П000100632204 + П000100632304 + П000100632404 + П000100632504 + П000100632604;
	
	Показатели["П0001006320" + Графа] = РасчетПоказателя;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РасчитатьПоказатели_ОЦИС_Строка6300(Показатели, Графа)
	
	П000100631004 = Показатели["П0001006310" + Графа];
	П000100632004 = Показатели["П0001006320" + Графа];
	П000100633004 = Показатели["П0001006330" + Графа];
	П000100635004 = Показатели["П0001006350" + Графа];
	
	РасчетПоказателя = П000100631004 + П000100632004 + П000100633004 + П000100635004;
	
	Показатели["П0001006300" + Графа] = РасчетПоказателя;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РасчитатьПоказатели_ОЦИС_Строка6400(Показатели, Графа)
	
	П000100610004 = Показатели["П0001006100" + Графа];
	П000100620004 = Показатели["П0001006200" + Графа];
	П000100630004 = Показатели["П0001006300" + Графа];
	
	РасчетПоказателя = П000100610004 + П000100620004 + П000100630004;
	
	Показатели["П0001006400" + Графа] = РасчетПоказателя;
	
КонецПроцедуры

#КонецОбласти

#Область АвторасчетПоказателей_ФинансовыеВложения

&НаКлиенте
Процедура РасчитатьПоказатели_ФинансовыеВложенияКраткосрочные()
	
	П000120000101 = 0; // Стоимость вложений
	П000120000102 = 0; // Просроченная задолженность
	
	НомерСтроки = 0;
	Пока Истина Цикл
		НомерСтроки = НомерСтроки + 1;
		Постфикс = "_" + СтрокаЧГ0(НомерСтроки);
		
		Если ТабличныйДокумент.Области.Найти("П00012М100106" + Постфикс) = Неопределено Тогда
			Прервать;
		КонецЕсли;
		
		П00012М100106 = ТабличныйДокумент.Области["П00012М100106" + Постфикс].Значение;
		П00012М100110 = ТабличныйДокумент.Области["П00012М100110" + Постфикс].Значение;
		
		П000120000101 = П000120000101 + П00012М100106;
		П000120000102 = П000120000102 + П00012М100110;
		
	КонецЦикла;
	
	ТабличныйДокумент.Области.П000120000101.Значение = П000120000101;
	ТабличныйДокумент.Области.П000120000102.Значение = П000120000102;
	
КонецПроцедуры

&НаКлиенте
Процедура РасчитатьПоказатели_ФинансовыеВложенияДолгосрочные()
	
	П000130000101 = 0; // Стоимость вложений
	П000130000102 = 0; // Просроченная задолженность
	
	НомерСтроки = 0;
	Пока Истина Цикл
		НомерСтроки = НомерСтроки + 1;
		Постфикс = "_" + СтрокаЧГ0(НомерСтроки);
		
		Если ТабличныйДокумент.Области.Найти("П00013М100106" + Постфикс) = Неопределено Тогда
			Прервать;
		КонецЕсли;
		
		П00013М100106 = ТабличныйДокумент.Области["П00013М100106" + Постфикс].Значение;
		П00013М100110 = ТабличныйДокумент.Области["П00013М100110" + Постфикс].Значение;
		
		П000130000101 = П000130000101 + П00013М100106;
		П000130000102 = П000130000102 + П00013М100110;
		
	КонецЦикла;
	
	ТабличныйДокумент.Области.П000130000101.Значение = П000130000101;
	ТабличныйДокумент.Области.П000130000102.Значение = П000130000102;
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура РасчитатьПоказатели_СтруктураВыручки()
	
	Делитель = 1000;
	Точность = 3;
	
	П000100005002 = 0; // Итого
	
	П000100001102 = ТабличныйДокумент.Области.П000100001102.Значение;
	П000100001102 = ОкруглитьЧислоПоФорматуДелителя(П000100001102, Делитель, Точность);
	
	П000100001202 = ТабличныйДокумент.Области.П000100001202.Значение;
	П000100001202 = ОкруглитьЧислоПоФорматуДелителя(П000100001202, Делитель, Точность);
	
	П000100003002 = ТабличныйДокумент.Области.П000100003002.Значение;
	П000100003002 = ОкруглитьЧислоПоФорматуДелителя(П000100003002, Делитель, Точность);
	
	П000100004002 = ТабличныйДокумент.Области.П000100004002.Значение;
	П000100004002 = ОкруглитьЧислоПоФорматуДелителя(П000100004002, Делитель, Точность);
	
	П000100005002 = П000100001102 + П000100001202 + П000100003002 + П000100004002;
	
	НомерСтроки = 0;
	Пока Истина Цикл
		НомерСтроки = НомерСтроки + 1;
		Постфикс = "_" + СтрокаЧГ0(НомерСтроки);
		
		Если ТабличныйДокумент.Области.Найти("П00010М100102" + Постфикс) = Неопределено Тогда
			Прервать;
		КонецЕсли;
		
		П00010М100102 = ТабличныйДокумент.Области["П00010М100102" + Постфикс].Значение;
		П00010М100102 = ОкруглитьЧислоПоФорматуДелителя(П00010М100102, Делитель, Точность);
		
		П000100005002 = П000100005002 + П00010М100102;
		
	КонецЦикла;
	
	ТабличныйДокумент.Области.П000100005002.Значение = П000100005002;
	
КонецПроцедуры

&НаКлиенте
Процедура РасчитатьПоказатели_ДополнительныеФайлы()
	
	П000110002002 = 0;
	
	Для Инд = 1 По 9 Цикл
		ИмяОбласти = "П00011" + Формат(Инд, "ЧЦ=5; ЧН=; ЧВН=; ЧГ=0") + "01";
		ТипФайла = ТипФайлаПоИмениОбласти(ИмяОбласти);
		
		ХранилищеОписания = СтруктураРеквизитовФормы.ДополнительныеТипизированныеФайлы[ТипФайла];
		
		Если ЗначениеЗаполнено(ХранилищеОписания.Адрес) Тогда
			РазмерФайла = ХранилищеОписания.Размер;
			П000110002002 = П000110002002 + РазмерФайла;
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого ОписаниеФайла Из СтруктураРеквизитовФормы.ДополнительныеФайлы Цикл
		П000110002002 = П000110002002 + ОписаниеФайла.РазмерФайла;
	КонецЦикла;
	
	ТабличныйДокумент.Области.П000110002002.Значение = Окр(П000110002002 / 1024);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ОкруглитьЧислоПоФорматуДелителя(ИсходноеЧисло, Делитель, Точность)
	
	ОкругленноеЧисло = Окр(ИсходноеЧисло / Делитель, Точность) * Делитель;
	
	Возврат ОкругленноеЧисло;
	
КонецФункции

#КонецОбласти

#Область ОчисткаВсехРазделов

&НаКлиенте
Процедура Очистить(ВыполняемоеОповещение = Неопределено) Экспорт
	
	РегламентированнаяОтчетностьКлиент.Очистить(ЭтаФорма, ВыполняемоеОповещение);
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьНаСервере() Экспорт
	
	ИмяРаздела = СтруктураРеквизитовФормы.НаимТекущегоРаздела;
	
	ТабличныйДокумент.Очистить();
	
	// Дополнительные файлы.
	СтруктураРеквизитовФормы.ДополнительныеФайлы = Новый Массив;
	
	Для Каждого ОписаниеФайла Из СтруктураРеквизитовФормы.ДополнительныеТипизированныеФайлы Цикл
		ОписаниеФайла.Значение.Имя = "";
		ОписаниеФайла.Значение.Адрес = Неопределено;
		ОписаниеФайла.Значение.Размер = 0;
		ОписаниеФайла.Значение.ДатаДобавления = '0001-01-01';
	КонецЦикла;
	
	// Очистка многосегментных отчетов.
	Для Каждого ЭлементСписка Из СписокСтраницОСВПоСчету Цикл
		ЭлементСписка.Включен = Ложь;
	КонецЦикла;
	
	Для Каждого ЭлементСписка Из СписокСтраницАнализСчета Цикл
		ЭлементСписка.Включен = Ложь;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(СтруктураРеквизитовФормы.мСохраненныйДок) Тогда
		УдаляемыеЗаписи = РегистрыСведений.ДополнительныеФайлыРегламентированныхОтчетов.СоздатьНаборЗаписей();
		УдаляемыеЗаписи.Отбор.РегламентированныйОтчет.Установить(СтруктураРеквизитовФормы.мСохраненныйДок);
		УдаляемыеЗаписи.Записать();
	КонецЕсли;
	
	СтруктураРеквизитовФормы.ОтчетыФНС_Бухотчетность = Неопределено;
	СтруктураРеквизитовФормы.ОтчетыФНС_БухотчетностьПредставление = "";
	СтруктураРеквизитовФормы.ОтчетыФНС_БухотчетностьПакет = Неопределено;
	
	ПредставлениеБухОтчетностиФНС = СтруктураРеквизитовФормы.ОтчетыФНС_БухотчетностьПредставление;
	
	СтруктураРеквизитовФормы.ОтчетыФНС_Прибыль = Неопределено;
	СтруктураРеквизитовФормы.ОтчетыФНС_ПрибыльПредставление = "";
	СтруктураРеквизитовФормы.ОтчетыФНС_ПрибыльПакет = Неопределено;
	
	ПредставлениеДекларацииПрибыльФНС = СтруктураРеквизитовФормы.ОтчетыФНС_ПрибыльПредставление;
	
	СтруктураРеквизитовФормы.ОтчетыФНС_НДС = Неопределено;
	СтруктураРеквизитовФормы.ОтчетыФНС_НДСПредставление = "";
	СтруктураРеквизитовФормы.ОтчетыФНС_НДСПакет = Неопределено;
	
	ПредставлениеДекларацииНДСФНС = СтруктураРеквизитовФормы.ОтчетыФНС_НДСПредставление;
	
	СтруктураРеквизитовФормы.ОтчетыФНС_СправкаИспОбУпл = Неопределено;
	СтруктураРеквизитовФормы.ОтчетыФНС_СправкаИспОбУплПредставление = "";
	СтруктураРеквизитовФормы.ОтчетыФНС_СправкаИспОбУплПакет = Неопределено;
	
	ПредставлениеСправкиОбИсполненииОбязанностейПоУплатеФНС = СтруктураРеквизитовФормы.ОтчетыФНС_СправкаИспОбУплПредставление;
	
	ИнициализироватьМногоуровневыеРазделы();
	
	СформироватьДеревоРазделовОтчетаНаСервере();
	
	ОбновитьДеревоРазделовВФормеОтчета(ИмяРаздела);
	
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Очистить();
	Если ИмяРаздела <> "ОСВПоСчету" И ИмяРаздела <> "АнализСчета" Тогда
		СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Добавить(1);
	КонецЕсли;
	
	ОтметитьРазделыКакНезаполненные();
	
	ВывестиДанныеВТабличныйДокумент(ИмяРаздела, СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДеревоРазделовВФормеОтчета(ИмяРаздела)
	
	Если НЕ ИмяРаздела = Неопределено Тогда
		
		// Пытаемся найти ранее запомненный раздел.
		НайденнаяСтрока = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(
			РазделыОтчета.ПолучитьЭлементы(), "КолонкаРазделыОтчетаСокрНаим", ИмяРаздела);
		
		// В случае успешного поиска, устанавливаем курсор на найденный раздел.
		Если НЕ НайденнаяСтрока = Неопределено Тогда
			Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяСтрока.ПолучитьИдентификатор();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОчисткаТекущегоРаздела

&НаКлиенте
Процедура ВопросОчиститьТекущийРазделЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	ИмяРаздела = ДополнительныеПараметры.ИмяРаздела;
	ВыполняемоеОповещение = ДополнительныеПараметры.ВыполняемоеОповещение;
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		ОчисткаРазделаРеглОтчетаНаСервере(ИмяРаздела);
		
		Если ВыполняемоеОповещение <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ВыполняемоеОповещение);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОчисткаРазделаРеглОтчетаНаСервере(ИмяРаздела)
	
	Если ИмяРаздела = "Титульный" Тогда
		Для каждого Обл Из ТабличныйДокумент.Области Цикл
			Если СтрЧислоВхождений(Тип(Обл), "Рисунок") = 0
				И Обл.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник
				И Обл.СодержитЗначение = Истина
				И НЕ Обл.Защита Тогда
				Обл.Очистить();
			КонецЕсли;
		КонецЦикла;
		
		Обл = ТабличныйДокумент.Области.Найти("ДатаУтвОтчетности");
		Если Обл <> Неопределено И ЗначениеЗаполнено(Обл.Значение) Тогда
			ДатаПодписи = Лев(СтрЗаменить(Формат(Обл.Значение, "ДФ = ""дд.ММ.гггг 'г.'"""), ".", ""), 8);
		Иначе
			ДатаПодписи = "        ";
		КонецЕсли;
		
	ИначеЕсли ИмяРаздела = "ОСВПоСчету" ИЛИ ИмяРаздела = "АнализСчета" Тогда
		ОчиститьРазделСоСпискомСтраниц(ИмяРаздела);
		
		ОтметитьРазделКакНезаполненный(ИмяРаздела);
		
	ИначеЕсли ИмяРаздела = "ДополнительныеФайлы" Тогда
		ОчиститьРазделДополнительныеФайлы(ИмяРаздела);
		
	ИначеЕсли ИмяРаздела = "ОтчетыФНС" Тогда
		СтруктураРеквизитовФормы.ОтчетыФНС_Бухотчетность = Неопределено;
		СтруктураРеквизитовФормы.ОтчетыФНС_БухотчетностьПредставление = "";
		СтруктураРеквизитовФормы.ОтчетыФНС_БухотчетностьПакет = Неопределено;
		
		ПредставлениеБухОтчетностиФНС = СтруктураРеквизитовФормы.ОтчетыФНС_БухотчетностьПредставление;
		
		СтруктураРеквизитовФормы.ОтчетыФНС_Прибыль = Неопределено;
		СтруктураРеквизитовФормы.ОтчетыФНС_ПрибыльПредставление = "";
		СтруктураРеквизитовФормы.ОтчетыФНС_ПрибыльПакет = Неопределено;
		
		ПредставлениеДекларацииПрибыльФНС = СтруктураРеквизитовФормы.ОтчетыФНС_ПрибыльПредставление;
		
		СтруктураРеквизитовФормы.ОтчетыФНС_НДС = Неопределено;
		СтруктураРеквизитовФормы.ОтчетыФНС_НДСПредставление = "";
		СтруктураРеквизитовФормы.ОтчетыФНС_НДСПакет = Неопределено;
		
		ПредставлениеДекларацииНДСФНС = СтруктураРеквизитовФормы.ОтчетыФНС_НДСПредставление;
		
		СтруктураРеквизитовФормы.ОтчетыФНС_СправкаИспОбУпл = Неопределено;
		СтруктураРеквизитовФормы.ОтчетыФНС_СправкаИспОбУплПредставление = "";
		СтруктураРеквизитовФормы.ОтчетыФНС_СправкаИспОбУплПакет = Неопределено;
		
		ПредставлениеСправкиОбИсполненииОбязанностейПоУплатеФНС = СтруктураРеквизитовФормы.ОтчетыФНС_СправкаИспОбУплПредставление;
		
		ОтметитьРазделКакНезаполненный(ИмяРаздела);
		
	Иначе
		ИмяКорневогоРаздела = ИмяКорневогоРаздела(ИмяРаздела);
		
		ТабличныйДокумент.Очистить();
		
		СформироватьДанныеМногоуровневогоРаздела(ИмяКорневогоРаздела);
		
		СформироватьДеревоРазделовОтчетаНаСервере();
		
		ОбновитьДеревоРазделовВФормеОтчета(ИмяКорневогоРаздела);
		
		СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Очистить();
		СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Добавить(1);
		
		ОтметитьРазделКакНезаполненный(ИмяКорневогоРаздела);
		
		ВывестиДанныеВТабличныйДокумент(ИмяКорневогоРаздела, СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела);
		
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьРазделДополнительныеФайлы(ИмяРаздела)
	
	СтруктураРеквизитовФормы.ДополнительныеФайлы = Новый Массив;
	
	Для Каждого ОписаниеФайла Из СтруктураРеквизитовФормы.ДополнительныеТипизированныеФайлы Цикл
		ОписаниеФайла.Значение.Имя = "";
		ОписаниеФайла.Значение.Адрес = Неопределено;
		ОписаниеФайла.Значение.Размер = 0;
		ОписаниеФайла.Значение.ДатаДобавления = '0001-01-01';
	КонецЦикла;
	
	ДеревоДанныхРаздела = ПолучитьИзВременногоХранилища(
		СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяРаздела]);
		
	МногострочнаяЧасть = ДеревоДанныхРаздела.Строки[0].ДанныеМногострочныхЧастей.П00011М1.Строки;
	СформироватьМСЧДополнительныхФайлов(МногострочнаяЧасть);
	
	ИнициализироватьТекстыГиперссылокДополнительныхФайлов();
	
	Показатели = ДеревоДанныхРаздела.Строки[0].Данные;
	Показатели.П000110002002 = 0;
	
	ПоказатьРаздел(ИмяРаздела, СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела);
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьРазделСоСпискомСтраниц(ИмяРаздела)
	
	СписокСтраниц = ЭтотОбъект["СписокСтраниц" + ИмяРаздела];
	Для Каждого ЭлементСписка Из СписокСтраниц Цикл
		ЭлементСписка.Включен = Ложь;
	КонецЦикла;
	
	ВыборкаСегментов = ВыборкаСегментовОтчета(ИмяРаздела);
	
	Если ВыборкаСегментов.Количество() > 0 Тогда
		НачатьТранзакцию();
		
		Пока ВыборкаСегментов.Следующий() Цикл
			ЗаписьСегмента = РегистрыСведений.ДополнительныеФайлыРегламентированныхОтчетов.СоздатьМенеджерЗаписи();
			ЗаписьСегмента.РегламентированныйОтчет = СтруктураРеквизитовФормы.мСохраненныйДок;
			ЗаписьСегмента.ВидДополнительногоФайла = ВыборкаСегментов.ВидДополнительногоФайла;
			
			ЗаписьСегмента.Удалить();
			
		КонецЦикла;
		
		ВыборкаСегментовИтогов = ВыборкаСегментовОтчета(ИмяРаздела + "Итоги");
		
		Пока ВыборкаСегментовИтогов.Следующий() Цикл
			ЗаписьСегмента = РегистрыСведений.ДополнительныеФайлыРегламентированныхОтчетов.СоздатьМенеджерЗаписи();
			ЗаписьСегмента.РегламентированныйОтчет = СтруктураРеквизитовФормы.мСохраненныйДок;
			ЗаписьСегмента.ВидДополнительногоФайла = ВыборкаСегментовИтогов.ВидДополнительногоФайла;
			
			ЗаписьСегмента.Удалить();
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	КонецЕсли;
	
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела = Новый Массив;
	СформироватьДеревоРазделовОтчетаНаСервере();
	ОбновитьДеревоРазделовВФормеОтчета(ИмяРаздела);
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТекущийРазделЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если НЕ СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный"
	   И НЕ СтруктураРеквизитовФормы.НаимТекущегоРаздела = "ОтчетыФНС" Тогда
		СтруктураРаздела = мСтруктураМногоуровневыхРазделов[СтруктураРеквизитовФормы.НаимТекущегоРаздела];
		
		Если СтруктураРаздела.Свойство("Многостраничность") Тогда
			Элементы.ТабличныйДокумент.ТекущаяОбласть = ТабличныйДокумент.Область(1, 1);
			Элементы.ТабличныйДокументСПризнакомВеденияУчета.ТекущаяОбласть = ТабличныйДокумент.Область(1, 1);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОчисткаТекущейСтраницы

&НаКлиенте
Процедура ВопросОчиститьТекущуюСтраницуЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	ИмяРаздела = ДополнительныеПараметры.ИмяРаздела;
	ВыполняемоеОповещение = ДополнительныеПараметры.ВыполняемоеОповещение;
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		Если ИмяРаздела = "ОСВПоСчету" ИЛИ ИмяРаздела = "АнализСчета" Тогда
			ОчиститьСтраницуРазделСоСпискомСтраниц(ИмяРаздела);
			
		Иначе
			ОчисткаСтраницыРазделаРеглОтчетаНаСервере(ИмяРаздела);
			
		КонецЕсли;
		
		ОтметитьРазделКакНезаполненный(ИмяРаздела);
		
		Если ВыполняемоеОповещение <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ВыполняемоеОповещение);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОчисткаСтраницыРазделаРеглОтчетаНаСервере(ИмяРаздела)
	
	Если мСтруктураМногоуровневыхРазделов.Свойство(ИмяРаздела) Тогда
		
		ТабличныйДокумент.Очистить();
		ТабличныйДокумент.Вывести(МакетРаздела(ИмяРаздела));
		
		СтруктураРаздела = мСтруктураМногоуровневыхРазделов[ИмяРаздела];
		
		ИмяГлРаздела = Неопределено;
		СтруктураРаздела.Свойство("КорневойРаздел", ИмяГлРаздела);
		ИмяГлРаздела = ?(ИмяГлРаздела = Неопределено, ИмяРаздела, ИмяГлРаздела);
		
		ДеревоДанныхРаздела = ПолучитьИзВременногоХранилища(
			СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяГлРаздела]);
		
		ТекВетка = ДеревоДанныхРаздела;
		
		Для Каждого НомерСтроки Из СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела Цикл
			ТекВетка = ТекВетка.Строки[НомерСтроки - 1];
		КонецЦикла;
		
		ДанныеТаблДокумента = ДанныеТабличногоДокумента(ИмяРаздела);
		
		Если ИмяРаздела = "Дебиторская" ИЛИ ИмяРаздела = "Кредиторская" Тогда
			ТекВетка.Данные = Новый Структура;
			ТекВетка.ДанныеМногострочныхЧастей = Новый Структура;
		Иначе
			ТекВетка.Данные = ДанныеТаблДокумента.Данные;
			ТекВетка.ДанныеМногострочныхЧастей = ДанныеТаблДокумента.ДанныеМногострочныхЧастей;
		КонецЕсли;
		
		ТекВетка.ДополнительныеДанные = Неопределено;
		ТекВетка.Параметры = ПараметрыСтраницыРазделаНовогоОтчета(ИмяРаздела);
		
		НеотображаемыеПоказатели = ТекВетка.Параметры;
		
		СтруктураРеквизитовФормы.Вставить("АдресВоВрХранилищеДеревоДанных" + ИмяГлРаздела,
		ПоместитьВоВременноеХранилище(ДеревоДанныхРаздела, УникальныйИдентификатор));
		
		ДеревоДанныхРаздела = Неопределено;
		
		ПоказатьРаздел(ИмяРаздела, СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела);
		
		Для каждого ИскомыйРаздел Из РазделыОтчета.ПолучитьЭлементы() Цикл
			Если ИскомыйРаздел.КолонкаРазделыОтчетаСокрНаим = ИмяРаздела Тогда
				Для каждого НайденнаяСтраница Из ИскомыйРаздел.ПолучитьЭлементы() Цикл
					Если НайденнаяСтраница.КолонкаНомерСтраницыРазделаОтчета
						= СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[0] Тогда
						Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяСтраница.ПолучитьИдентификатор();
						Прервать;
					КонецЕсли;
				КонецЦикла;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьСтраницуРазделСоСпискомСтраниц(ИмяРаздела)
	
	ВыборкаСегментов = ВыборкаСегментовОтчетаПоСчету(ИмяРаздела, НеотображаемыеПоказатели.Счет);
	
	Если ВыборкаСегментов.Количество() > 0 Тогда
		НачатьТранзакцию();
		
		Пока ВыборкаСегментов.Следующий() Цикл
			ЗаписьСегмента = РегистрыСведений.ДополнительныеФайлыРегламентированныхОтчетов.СоздатьМенеджерЗаписи();
			ЗаписьСегмента.РегламентированныйОтчет = СтруктураРеквизитовФормы.мСохраненныйДок;
			ЗаписьСегмента.ВидДополнительногоФайла = ВыборкаСегментов.ВидДополнительногоФайла;
			
			ЗаписьСегмента.Удалить();
			
		КонецЦикла;
		
		ВыборкаСегментовИтогов = ВыборкаСегментовОтчетаПоСчету(ИмяРаздела + "Итоги", НеотображаемыеПоказатели.Счет);
		
		Пока ВыборкаСегментовИтогов.Следующий() Цикл
			ЗаписьСегмента = РегистрыСведений.ДополнительныеФайлыРегламентированныхОтчетов.СоздатьМенеджерЗаписи();
			ЗаписьСегмента.РегламентированныйОтчет = СтруктураРеквизитовФормы.мСохраненныйДок;
			ЗаписьСегмента.ВидДополнительногоФайла = ВыборкаСегментовИтогов.ВидДополнительногоФайла;
			
			ЗаписьСегмента.Удалить();
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	КонецЕсли;
	
	ПоказатьРаздел(ИмяРаздела, СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела);
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТекущуюСтраницуЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ИмяРаздела = СтруктураРеквизитовФормы.НаимТекущегоРаздела;
	СтруктураРаздела = мСтруктураМногоуровневыхРазделов[ИмяРаздела];
	
	Если СтруктураРаздела.Свойство("Многостраничность") Тогда
		Элементы.ТабличныйДокумент.ТекущаяОбласть = ТабличныйДокумент.Область(1, 1);
		Элементы.ТабличныйДокументСПризнакомВеденияУчета.ТекущаяОбласть = ТабличныйДокумент.Область(1, 1);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

&НаСервере
Процедура УстановитьФорматВыводаНаСервере(ИмяРаздела)
	
	Если ИмяРаздела = "Баланс"
	 ИЛИ ИмяРаздела = "ОФР"
	 ИЛИ ИмяРаздела = "ОИК"
	 ИЛИ ИмяРаздела = "ОДДС"
	 ИЛИ ИмяРаздела = "ОЦИС"
	 ИЛИ ИмяРаздела = "ДополнительныеПоказатели" Тогда
		Префикс = "П00010";
		СтруктураРеквизитовФормы.мСтрокаФормата = СтрокаФорматаЯчеекБухгалтерскойОтчетности();
		
		Для Каждого Область Из ТабличныйДокумент.Области Цикл
			ИмяОбласти = Область.Имя;
			Если Лев(ИмяОбласти, 6) = Префикс Тогда
				Область.Формат = СтруктураРеквизитовФормы.мСтрокаФормата;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция СтрокаФорматаЯчеекБухгалтерскойОтчетности()
	
	Если СтруктураРеквизитовФормы.ЕдиницаИзмерения = ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1 Тогда
		Возврат "ЧЦ = 15; ЧДЦ = " + СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧО=0; ЧС = 0";
	ИначеЕсли СтруктураРеквизитовФормы.ЕдиницаИзмерения = ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1000 Тогда
		Возврат "ЧЦ = 15; ЧДЦ = " + СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧО=0; ЧС = 3";
	ИначеЕсли СтруктураРеквизитовФормы.ЕдиницаИзмерения = ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1000000 Тогда
		Возврат "ЧЦ = 15; ЧДЦ = " + СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧО=0; ЧС = 6";
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция СтрокаФорматаЯчеекДебКредЗадолженности()
	
	Если СтруктураРеквизитовФормы.ЕдиницаИзмерения = ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1 Тогда
		Возврат "ЧЦ = 15; ЧДЦ = " + СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧС = 0";
	ИначеЕсли СтруктураРеквизитовФормы.ЕдиницаИзмерения = ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1000 Тогда
		Возврат "ЧЦ = 15; ЧДЦ = " + СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧС = 3";
	ИначеЕсли СтруктураРеквизитовФормы.ЕдиницаИзмерения = ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1000000 Тогда
		Возврат "ЧЦ = 15; ЧДЦ = " + СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧС = 6";
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция СтрокаФорматаПроверкиЗаполненияПоЕдИзм()
	
	Если СтруктураРеквизитовФормы.ЕдиницаИзмерения = ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1 Тогда
		Возврат "ЧЦ = 15; ЧДЦ = " + СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=; ЧС = 0";
	ИначеЕсли СтруктураРеквизитовФормы.ЕдиницаИзмерения = ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1000 Тогда
		Возврат "ЧЦ = 15; ЧДЦ = " + СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=; ЧС = 3";
	ИначеЕсли СтруктураРеквизитовФормы.ЕдиницаИзмерения = ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1000000 Тогда
		Возврат "ЧЦ = 15; ЧДЦ = " + СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=; ЧС = 6";
	КонецЕсли;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьОбластей(Форма, ИмяРаздела)
	
	АвтоРасчПоказатели = Новый Массив;
	
	Если ЗначениеЗаполнено(ИмяРаздела)
	   И Форма.СтруктураЗависимыхЯчеекДляАвторасчета.Свойство(ИмяРаздела) Тогда
		Для Каждого ЭлементАвторасчета Из Форма.СтруктураЗависимыхЯчеекДляАвторасчета[ИмяРаздела] Цикл
			АвтоРасчПоказатели.Добавить(ЭлементАвторасчета.Ключ);
		КонецЦикла;
	КонецЕсли;
	
	Для Каждого ИмяПоказателя Из АвтоРасчПоказатели Цикл
		Обл = Форма.ТабличныйДокумент.Области.Найти(ИмяПоказателя);
		Если Обл = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если Форма.СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Тогда
			Обл.Защита = Ложь;
			Обл.ЦветФона = Форма.мСтруктураЦветовРаскраски["_0"];
		Иначе
			Обл.Защита = Истина;
			Обл.ЦветФона = Форма.мСтруктураЦветовРаскраски["_4"];
		КонецЕсли;
		
	КонецЦикла;
	
	УстановитьЦветАвтозаполняемыхПоказателей(Форма, ИмяРаздела);
	
	Если ИмяРаздела = "ЗадолженностьПоКредитамЗаймамКраткосрочная" Тогда
		УстановитьДоступностьОбластей_ЗадолженностьПоКредитамЗаймам(Форма, "П00007");
	КонецЕсли;
		
	Если ИмяРаздела = "ЗадолженностьПоКредитамЗаймамДолгосрочная" Тогда
		УстановитьДоступностьОбластей_ЗадолженностьПоКредитамЗаймам(Форма, "П00008");
	КонецЕсли;
	
	Если ИмяРаздела = "ЛизингОбязательства" Тогда
		УстановитьДоступностьОбластей_ЛизингОбязательства(Форма);
	КонецЕсли;
	
	Если ИмяРаздела = "ФинансовыеВложенияКраткосрочные" Тогда
		УстановитьДоступностьОбластей_ФинансовыеВложения(Форма, "П00012");
	КонецЕсли;
	
	Если ИмяРаздела = "ФинансовыеВложенияДолгосрочные" Тогда
		УстановитьДоступностьОбластей_ФинансовыеВложения(Форма, "П00013");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЦветАвтозаполняемыхПоказателей(Форма, ИмяРаздела)
	
	Для Каждого Обл Из Форма.ТабличныйДокумент.Области Цикл
		
		Если НЕ (СтрЧислоВхождений(Тип(Обл), "Рисунок") = 0
		   И Обл.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник
		   И Обл.СодержитЗначение = Истина) Тогда
			Продолжить;
		КонецЕсли;
		
		ИмяПоиска = Обл.Имя;
		ИмяПоиска = Лев(ИмяПоиска, 13);
		
		Если Форма.СтруктураРеквизитовФормы.АвтозаполняемыеПоказатели.Свойство(ИмяПоиска) Тогда
			Если Форма.СтруктураРеквизитовФормы.АвтозаполняемыеПоказатели[ИмяПоиска][0] Тогда
				Обл.Защита = Ложь;
				Обл.ЦветФона = Форма.мСтруктураЦветовРаскраски["_3"];
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьОбластей_ЗадолженностьПоКредитамЗаймам(Форма, Префикс)
	
	НомерСтроки = 0;
	Пока Истина Цикл
		НомерСтроки = НомерСтроки + 1;
		Постфикс = "_" + СтрокаЧГ0(НомерСтроки);
		
		Если Форма.ТабличныйДокумент.Области.Найти(Префикс + "М100017" + Постфикс) = Неопределено Тогда
			Прервать;
		КонецЕсли;
		
		ОбластьОпределитель = Форма.ТабличныйДокумент.Область(Префикс + "М100017" + Постфикс);
		ОбластьУправления1 = Форма.ТабличныйДокумент.Область(Префикс + "М100019" + Постфикс);
		ОбластьУправления2 = Форма.ТабличныйДокумент.Область(Префикс + "М100029" + Постфикс);
		
		Если НЕ ЗначениеЗаполнено(ОбластьОпределитель.Значение)
		 ИЛИ ОбластьОпределитель.Значение = "RUB" Тогда
			ОбластьУправления1.Защита = Истина;
			ОбластьУправления1.ЦветФона = Форма.мСтруктураЦветовРаскраски["_5"];
			
			ОбластьУправления2.Защита = Истина;
			ОбластьУправления2.ЦветФона = Форма.мСтруктураЦветовРаскраски["_5"];
			
			Для Инд = 20 По 25 Цикл
				ИмяОбласти = Префикс + "М1000" + СтрокаЧГ0(Инд) + Постфикс;
				ОбластьУправления = Форма.ТабличныйДокумент.Область(ИмяОбласти);
				
				ОбластьУправления.Защита = Истина;
				ОбластьУправления.ЦветФона = Форма.мСтруктураЦветовРаскраски["_5"];
				
			КонецЦикла;
			
		Иначе
			// Разблокировка неразблокированных показателей.
			Если ОбластьУправления1.Защита Тогда
				ОбластьУправления1.Защита = Ложь;
				ОбластьУправления1.ЦветФона = Форма.мСтруктураЦветовРаскраски["_0"];
			КонецЕсли;
			
			Если ОбластьУправления2.Защита Тогда
				ОбластьУправления2.Защита = Ложь;
				ОбластьУправления2.ЦветФона = Форма.мСтруктураЦветовРаскраски["_0"];
			КонецЕсли;
			
			Для Инд = 20 По 25 Цикл
				ИмяОбласти = Префикс + "М1000" + СтрокаЧГ0(Инд) + Постфикс;
				ОбластьУправления = Форма.ТабличныйДокумент.Область(ИмяОбласти);
				
				Если ОбластьУправления.Защита Тогда
					ОбластьУправления.Защита = Ложь;
					ОбластьУправления.ЦветФона = Форма.мСтруктураЦветовРаскраски["_0"];
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
		НомерСтроки2 = 0;
		Пока Истина Цикл
			НомерСтроки2 = НомерСтроки2 + 1;
			Постфикс2 = Постфикс + "_" + СтрокаЧГ0(НомерСтроки2);
			
			Если Форма.ТабличныйДокумент.Области.Найти(Префикс + "М200004" + Постфикс2) = Неопределено Тогда
				Прервать;
			КонецЕсли;
			
			ОбластьУправления1 = Форма.ТабличныйДокумент.Область(Префикс + "М200004" + Постфикс2);
			ОбластьУправления2 = Форма.ТабличныйДокумент.Область(Префикс + "М200005" + Постфикс2);
			
			Если НЕ ЗначениеЗаполнено(ОбластьОпределитель.Значение)
			 ИЛИ ОбластьОпределитель.Значение = "RUB" Тогда
				ОбластьУправления1.Защита = Истина;
				ОбластьУправления1.ЦветФона = Форма.мСтруктураЦветовРаскраски["_5"];
				
				ОбластьУправления2.Защита = Истина;
				ОбластьУправления2.ЦветФона = Форма.мСтруктураЦветовРаскраски["_5"];
				
			Иначе
				// Разблокировка неразблокированных показателей.
				Если ОбластьУправления1.Защита Тогда
					ОбластьУправления1.Защита = Ложь;
					ОбластьУправления1.ЦветФона = Форма.мСтруктураЦветовРаскраски["_0"];
				КонецЕсли;
				
				Если ОбластьУправления2.Защита Тогда
					ОбластьУправления2.Защита = Ложь;
					ОбластьУправления2.ЦветФона = Форма.мСтруктураЦветовРаскраски["_0"];
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьОбластей_ЛизингОбязательства(Форма)
	
	НомерСтроки = 0;
	Пока Истина Цикл
		НомерСтроки = НомерСтроки + 1;
		Постфикс = "_" + СтрокаЧГ0(НомерСтроки);
		
		Если Форма.ТабличныйДокумент.Области.Найти("П00006М100109" + Постфикс) = Неопределено Тогда
			Прервать;
		КонецЕсли;
		
		ОбластьОпределитель = Форма.ТабличныйДокумент.Область("П00006М100109" + Постфикс);
		ОбластьУправления1 = Форма.ТабличныйДокумент.Область("П00006М100115" + Постфикс);
		ОбластьУправления2 = Форма.ТабличныйДокумент.Область("П00006М100116" + Постфикс);
		
		Если НЕ ЗначениеЗаполнено(ОбластьОпределитель.Значение)
		 ИЛИ ОбластьОпределитель.Значение = "RUB" Тогда
			ОбластьУправления1.Защита = Истина;
			ОбластьУправления1.ЦветФона = Форма.мСтруктураЦветовРаскраски["_5"];
			
			ОбластьУправления2.Защита = Истина;
			ОбластьУправления2.ЦветФона = Форма.мСтруктураЦветовРаскраски["_5"];
			
		Иначе
			// Разблокировка неразблокированных показателей.
			Если ОбластьУправления1.Защита Тогда
				ОбластьУправления1.Защита = Ложь;
				ОбластьУправления1.ЦветФона = Форма.мСтруктураЦветовРаскраски["_0"];
			КонецЕсли;
			
			Если ОбластьУправления2.Защита Тогда
				ОбластьУправления2.Защита = Ложь;
				ОбластьУправления2.ЦветФона = Форма.мСтруктураЦветовРаскраски["_0"];
			КонецЕсли;
			
		КонецЕсли;
		
		НомерСтроки2 = 0;
		Пока Истина Цикл
			НомерСтроки2 = НомерСтроки2 + 1;
			Постфикс2 = Постфикс + "_" + СтрокаЧГ0(НомерСтроки2);
			
			Если Форма.ТабличныйДокумент.Области.Найти("П00006М200105" + Постфикс2) = Неопределено Тогда
				Прервать;
			КонецЕсли;
			
			ОбластьУправления1 = Форма.ТабличныйДокумент.Область("П00006М200104" + Постфикс2);
			ОбластьУправления2 = Форма.ТабличныйДокумент.Область("П00006М200105" + Постфикс2);
			
			Если НЕ ЗначениеЗаполнено(ОбластьОпределитель.Значение)
			 ИЛИ ОбластьОпределитель.Значение = "RUB" Тогда
				ОбластьУправления1.Защита = Истина;
				ОбластьУправления1.ЦветФона = Форма.мСтруктураЦветовРаскраски["_5"];
				
				ОбластьУправления2.Защита = Истина;
				ОбластьУправления2.ЦветФона = Форма.мСтруктураЦветовРаскраски["_5"];
				
			Иначе
				// Разблокировка неразблокированных показателей.
				Если ОбластьУправления1.Защита Тогда
					ОбластьУправления1.Защита = Ложь;
					ОбластьУправления1.ЦветФона = Форма.мСтруктураЦветовРаскраски["_0"];
				КонецЕсли;
				
				Если ОбластьУправления2.Защита Тогда
					ОбластьУправления2.Защита = Ложь;
					ОбластьУправления2.ЦветФона = Форма.мСтруктураЦветовРаскраски["_0"];
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьОбластей_ФинансовыеВложения(Форма, Префикс)
	
	НомерСтроки = 0;
	Пока Истина Цикл
		НомерСтроки = НомерСтроки + 1;
		Постфикс = "_" + СтрокаЧГ0(НомерСтроки);
		
		Если Форма.ТабличныйДокумент.Области.Найти(Префикс + "М100107" + Постфикс) = Неопределено Тогда
			Прервать;
		КонецЕсли;
		
		ОбластьОпределитель = Форма.ТабличныйДокумент.Область(Префикс + "М100107" + Постфикс);
		ОбластьУправления1  = Форма.ТабличныйДокумент.Область(Префикс + "М100108" + Постфикс);
		ОбластьУправления2  = Форма.ТабличныйДокумент.Область(Префикс + "М100111" + Постфикс);
		
		Если НЕ ЗначениеЗаполнено(ОбластьОпределитель.Значение)
		 ИЛИ ОбластьОпределитель.Значение = "RUB" Тогда
			ОбластьУправления1.Защита = Истина;
			ОбластьУправления1.ЦветФона = Форма.мСтруктураЦветовРаскраски["_5"];
			
			ОбластьУправления2.Защита = Истина;
			ОбластьУправления2.ЦветФона = Форма.мСтруктураЦветовРаскраски["_5"];
			
		Иначе
			// Разблокировка неразблокированных показателей.
			Если ОбластьУправления1.Защита Тогда
				ОбластьУправления1.Защита = Ложь;
				ОбластьУправления1.ЦветФона = Форма.мСтруктураЦветовРаскраски["_0"];
			КонецЕсли;
			
			Если ОбластьУправления2.Защита Тогда
				ОбластьУправления2.Защита = Ложь;
				ОбластьУправления2.ЦветФона = Форма.мСтруктураЦветовРаскраски["_0"];
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораСтраниц(ВариантВыбора)
	
	Перем ТекущийРазделОтчетаСокрНаим;
	Перем НомерСтраницыРазделаОтчета;
	
	// Запоминаем текущий раздел, установленный в дереве разделов отчета.
	Если НЕ Элементы.РазделыОтчета.ТекущиеДанные = Неопределено Тогда
		ТекущийРазделОтчетаСокрНаим = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
		НомерСтраницыРазделаОтчета  = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета;
	КонецЕсли;
	
	мПараметры = Новый Структура;
	мПараметры.Вставить("ПроверкаСоотношений", Ложь);
	мПараметры.Вставить("Автосохранение", Ложь);
	мПараметры.Вставить("СчетчикСтраниц", Ложь);
	мПараметры.Вставить("ЗначенияИзСписка", Ложь);
	мПараметры.Вставить("ИмеетсяРеквизитДеревоВыбранныхСтраниц", Истина);
	мПараметры.Вставить("СохранятьРасшифровкуАвтозаполнения", Ложь);
	мПараметры.Вставить("РазрешитьВстроеннуюПечать", Ложь);
	мПараметры.Вставить("ОтключитьАвтоРасчет", Ложь);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ЕдиницаИзмерения", СтруктураРеквизитовФормы.ЕдиницаИзмерения);
	ПараметрыФормы.Вставить("ТочностьЕдиницыИзмерения", СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения);
	ПараметрыФормы.Вставить("ФлажокОтклАвтоРасчет", СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);
	ПараметрыФормы.Вставить("мПараметры", мПараметры);
	
	ФормаНастройкиОтчета = ПолучитьФорму("Отчет.БухгалтерскаяОтчетностьВБанк.Форма.НастройкиОтчета", ПараметрыФормы, ЭтаФорма);
	
	мДеревоВыбранныхСтраниц.ПолучитьЭлементы().Очистить();
	
	КопироватьДанныеФормы(мДеревоСтраницОтчета, ФормаНастройкиОтчета.Дерево);
	
	ИсходноеЗначениеАвторасчета = СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет;
	ИсходнаяЕдиницаИзмерения = СтруктураРеквизитовФормы.ЕдиницаИзмерения;
	ИсходнаяТочностьЕдИзм = СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИсходноеЗначениеАвторасчета", ИсходноеЗначениеАвторасчета);
	ДополнительныеПараметры.Вставить("ИсходнаяЕдиницаИзмерения", ИсходнаяЕдиницаИзмерения);
	ДополнительныеПараметры.Вставить("ИсходнаяТочностьЕдИзм", ИсходнаяТочностьЕдИзм);
	ДополнительныеПараметры.Вставить("НомерСтраницыРазделаОтчета", НомерСтраницыРазделаОтчета);
	ДополнительныеПараметры.Вставить("ТекущийРазделОтчетаСокрНаим", ТекущийРазделОтчетаСокрНаим);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьФормуВыбораСтраницЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ФормаНастройкиОтчета.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
	ФормаНастройкиОтчета.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	ФормаНастройкиОтчета.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораСтраницЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	ИсходноеЗначениеАвторасчета = ДополнительныеПараметры.ИсходноеЗначениеАвторасчета;
	ИсходнаяЕдиницаИзмерения    = ДополнительныеПараметры.ИсходнаяЕдиницаИзмерения;
	ИсходнаяТочностьЕдИзм       = ДополнительныеПараметры.ИсходнаяТочностьЕдИзм;
	НомерСтраницыРазделаОтчета  = ДополнительныеПараметры.НомерСтраницыРазделаОтчета;
	ТекущийРазделОтчетаСокрНаим = ДополнительныеПараметры.ТекущийРазделОтчетаСокрНаим;
	
	флЗначенияИдентичны = Истина;
	
	ПроверитьИдентичностьДеревьевРазделов(флЗначенияИдентичны, мДеревоСтраницОтчета, мДеревоВыбранныхСтраниц);
	
	Если ИсходнаяЕдиницаИзмерения <> СтруктураРеквизитовФормы.ЕдиницаИзмерения
	 ИЛИ ИсходнаяТочностьЕдИзм <> СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения Тогда
		ПослеСменыЕдИзмеренияИТочности();
	КонецЕсли;
	
	Если ИсходноеЗначениеАвторасчета <> СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Тогда
		Модифицированность = Истина;
		
		Если СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет = Ложь Тогда
			ДополнительныеПараметры = Новый Структура(
				"НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим, флЗначенияИдентичны",
				НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим, флЗначенияИдентичны);
			ОписаниеОповещения = Новый ОписаниеОповещения(
				"ВопросПерерасчетВсехРассчитываемыхПоказателейЗавершение", ЭтотОбъект, ДополнительныеПараметры);
				ТекстВопроса = НСтр("ru='Будет произведен перерасчет всех рассчитываемых показателей. Продолжить?'");
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
			
		Иначе
			УстановитьДоступностьОбластей(ЭтаФорма, ТекущийРазделОтчетаСокрНаим);
			
			ДопПараметры = Новый Структура(
				"НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим, флЗначенияИдентичны",
				НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим, флЗначенияИдентичны);
			ПослеОткрытияФормыВыбораСтраниц(ДопПараметры);
			
		КонецЕсли;
		
	Иначе
		ДопПараметры = Новый Структура(
			"НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим, флЗначенияИдентичны",
			НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим, флЗначенияИдентичны);
		ПослеОткрытияФормыВыбораСтраниц(ДопПараметры);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьИдентичностьДеревьевРазделов(ФлагИдентичности, ИсходноеДерево, НовоеДерево)
	
	Если ФлагИдентичности Тогда
		Для Индекс = 0 По ИсходноеДерево.ПолучитьЭлементы().Количество() - 1 Цикл
			ИсходныйПризнак = ИсходноеДерево.ПолучитьЭлементы()[Индекс].ПоказатьСтраницу;
			НовыйПризнак    = НовоеДерево.ПолучитьЭлементы()[Индекс].ПоказатьСтраницу;
			
			Если ИсходныйПризнак <> НовыйПризнак Тогда
				ФлагИдентичности = Ложь;
				Прервать;
			КонецЕсли;
			
			ИсходныеДочерниеЭлементы = ИсходноеДерево.ПолучитьЭлементы()[Индекс];
			НовыеДочерниеЭлементы    = НовоеДерево.ПолучитьЭлементы()[Индекс];
			
			ПроверитьИдентичностьДеревьевРазделов(ФлагИдентичности, ИсходныеДочерниеЭлементы, НовыеДочерниеЭлементы);
			
			Если НЕ ФлагИдентичности Тогда
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеСменыЕдИзмеренияИТочности()
	
	ПроверитьТочность();
	
	ИмяРаздела = СтруктураРеквизитовФормы.НаимТекущегоРаздела;
	НомерСтраницыРаздела = СтруктураРеквизитовФормы.НомерСтраницыТекущегоРаздела;
	
	СохранитьДанныеРаздела(ИмяРаздела);
	
	РасчетПолный();
	
	ИмяКорневогоРаздела = "ДенежныеСредства";
	ДанныеРаздела = ПолучитьИзВременногоХранилища(СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяКорневогоРаздела]);
	
	СформироватьПредставленияОтчетовПоДенежнымСредствам(ДанныеРаздела, "ДенежныеСредства50", 0);
	СформироватьПредставленияОтчетовПоДенежнымСредствам(ДанныеРаздела, "ДенежныеСредства51", 1);
	СформироватьПредставленияОтчетовПоДенежнымСредствам(ДанныеРаздела, "ДенежныеСредства52", 2);
	СформироватьПредставленияОтчетовПоДенежнымСредствам(ДанныеРаздела, "ДенежныеСредства55", 3);
	
	СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяКорневогоРаздела] =
		ПоместитьВоВременноеХранилище(ДанныеРаздела, УникальныйИдентификатор);
	
	ПоказатьРаздел(ИмяРаздела, НомерСтраницыРаздела);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьТочность()
	
	Если СтруктураРеквизитовФормы.ЕдиницаИзмерения = ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1 Тогда
		Если СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения > 2 Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='Баланс: при выводе сумм в рублях точность не может превышать 2 знака.'");
			Сообщение.Сообщить();
			
			СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = 2;
			
		КонецЕсли;
		
	ИначеЕсли СтруктураРеквизитовФормы.ЕдиницаИзмерения = ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1000 Тогда
		Если СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения > 3 Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='Баланс: при выводе сумм в тысячах рублей точность не может превышать 3 знака.'");
			Сообщение.Сообщить();
			
			СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = 3;
			
		КонецЕсли;
		
	ИначеЕсли СтруктураРеквизитовФормы.ЕдиницаИзмерения = ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1000000 Тогда
		Если СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения > 6 Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='Баланс: при выводе сумм в миллионах рублей точность не может превышать 6 знаков.'");
			Сообщение.Сообщить();
			
			СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = 6;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьПредставленияОтчетовПоДенежнымСредствам(ДанныеРаздела, ИмяРаздела, ИндексРаздела)
	
	СтраницаРаздела = ДанныеРаздела.Строки[0].Строки[ИндексРаздела].Строки[0];
	Если СтраницаРаздела.ДополнительныеДанные <> Неопределено Тогда
		ШаблонПредставления = МакетРаздела(ИмяРаздела);
		ШаблонПредставления.Области.ЕдиницаИзмерения.Текст =
			ПредставлениеЕдиницыИзмерения(СтруктураРеквизитовФормы.ЕдиницаИзмерения);
		ШаблонПредставления.Области.ЕдиницаИзмеренияКасса.Текст =
			ПредставлениеЕдиницыИзмерения(СтруктураРеквизитовФормы.ЕдиницаИзмерения);
		
		ДанныеОтчета = СтраницаРаздела.ДополнительныеДанные.Данные;
		ПостфиксЕдИзм = ПостфиксОбластейОтчетаДенежныеСредства(СтруктураРеквизитовФормы.ЕдиницаИзмерения);
		
		Если ИмяРаздела = "ДенежныеСредства50" Тогда
			НовоеПредставление = ОтчетностьВБанкиСлужебный.ПредставлениеАнализаДенежныхСредствКасса(
				ШаблонПредставления, ДанныеОтчета, ПостфиксЕдИзм);
		Иначе
			НовоеПредставление = ОтчетностьВБанкиСлужебный.ПредставлениеАнализаДенежныхСредств(
				ШаблонПредставления, ДанныеОтчета, ПостфиксЕдИзм);
		КонецЕсли;
			
		СтраницаРаздела.ДополнительныеДанные.Представление = НовоеПредставление;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПерерасчетВсехРассчитываемыхПоказателейЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	НомерСтраницыРазделаОтчета = ДополнительныеПараметры.НомерСтраницыРазделаОтчета;
	ТекущийРазделОтчетаСокрНаим = ДополнительныеПараметры.ТекущийРазделОтчетаСокрНаим;
	флЗначенияИдентичны = ДополнительныеПараметры.флЗначенияИдентичны;
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет = Истина;
		Возврат;
	КонецЕсли;
	
	УстановитьДоступностьОбластей(ЭтаФорма, ТекущийРазделОтчетаСокрНаим);
	
	ДопПараметры = Новый Структура(
		"НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим, флЗначенияИдентичны",
		НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим, флЗначенияИдентичны);
	ПослеОткрытияФормыВыбораСтраниц(ДопПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеОткрытияФормыВыбораСтраниц(ДополнительныеПараметры)
	
	НомерСтраницыРазделаОтчета = ДополнительныеПараметры.НомерСтраницыРазделаОтчета;
	ТекущийРазделОтчетаСокрНаим = ДополнительныеПараметры.ТекущийРазделОтчетаСокрНаим;
	флЗначенияИдентичны = ДополнительныеПараметры.флЗначенияИдентичны;
	
	РегламентированнаяОтчетностьКлиент.ПоказатьСтраницыОтчетаНаКлиенте(ЭтаФорма);
	
	Если НЕ флЗначенияИдентичны Тогда
		Модифицированность = Истина;
		
		СформироватьДеревоРазделовОтчетаНаСервере();
		
		Если НЕ ТекущийРазделОтчетаСокрНаим = Неопределено Тогда
			
			НайденнаяСтрока = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(
				РазделыОтчета.ПолучитьЭлементы(), "КолонкаРазделыОтчетаСокрНаим", ТекущийРазделОтчетаСокрНаим);
			
			Если НЕ НайденнаяСтрока = Неопределено И НЕ НомерСтраницыРазделаОтчета = Неопределено
				И НайденнаяСтрока.ПолучитьЭлементы().Количество() > 0 Тогда
				
				НайденнаяСтрока = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(
				НайденнаяСтрока.ПолучитьЭлементы(), "КолонкаНомерСтраницыРазделаОтчета", НомерСтраницыРазделаОтчета);
				
			КонецЕсли;
			
			Если НЕ НайденнаяСтрока = Неопределено Тогда
				
				Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяСтрока.ПолучитьИдентификатор();
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборИзСпискаЗавершение(ВыбЭлемент, ДополнительныйПараметр) Экспорт
	
	Если ВыбЭлемент <> Неопределено Тогда
		Если ВыбЭлемент.Значение <> ДополнительныйПараметр.Значение Тогда
			ДополнительныйПараметр.Значение = ВыбЭлемент.Значение;
			Модифицированность = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораВалютыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Область = ДополнительныеПараметры.Область;
	ИмяРаздела = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
	
	ПрежнийКодВалюты = "";
	
	Если ЗначениеЗаполнено(Область.Значение) Тогда
		ПрежнийКодВалюты = Область.Значение;
	КонецЕсли;
	
	Если Результат <> Неопределено Тогда
		РеквизитыВалюты = РеквизитыЭлементаСправочникаВалют(Результат);
		
		Если ПрежнийКодВалюты = РеквизитыВалюты.СимвольныйКод Тогда
			Область.Очистить();
		Иначе
			Область.Значение = РеквизитыВалюты.СимвольныйКод;
		КонецЕсли;
		
		ОбнулитьВалютныеСуммы_ЛизингОбязательства(Область);
		ОбнулитьВалютныеСуммы_ЗадолженностьПоКредитамЗаймам(Область);
		ОбнулитьВалютныеСуммы_ФинансовыеВложения(Область);
		
		Модифицированность = Истина;
		
		УстановитьДоступностьОбластей(ЭтаФорма, ИмяРаздела);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораВалютыПоНаименованиюЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Область = ДополнительныеПараметры.Область;
	ИмяРаздела = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
	
	ИсходноеЗначение = "";
	Если ЗначениеЗаполнено(Область.Значение) Тогда
		ИсходноеЗначение = Область.Значение;
	КонецЕсли;
	
	Если Результат <> Неопределено Тогда
		РеквизитыВалюты = РеквизитыЭлементаСправочникаВалют(Результат);
		
		Если ИсходноеЗначение = РеквизитыВалюты.Наименование Тогда
			Область.Очистить();
		Иначе
			Область.Значение = РеквизитыВалюты.Наименование;
		КонецЕсли;
		
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбнулитьВалютныеСуммы_ЛизингОбязательства(Область)
	
	КодВалютыВОбласти = Область.Значение;
	
	ОсновнаяЧастИмени = Лев(Область.Имя, 13);
	Постфикс = Сред(Область.Имя, 14);
	
	Если СтрНайти("П00006М100109", ОсновнаяЧастИмени) <> 0 Тогда
		Если НЕ ЗначениеЗаполнено(КодВалютыВОбласти) ИЛИ КодВалютыВОбласти = "RUB" Тогда
			ПрефиксРаздела = Лев(ОсновнаяЧастИмени, 6);
			
			ТабличныйДокумент.Области["П00006М100115" + Постфикс].Значение = 0;
			ТабличныйДокумент.Области["П00006М100116" + Постфикс].Значение = 0;
			
			НомерСтроки = 0;
			Пока Истина Цикл
				НомерСтроки = НомерСтроки + 1;
				Постфикс2 = Постфикс + "_" + СтрокаЧГ0(НомерСтроки);
				
				Если ТабличныйДокумент.Области.Найти("П00006М200105" + Постфикс2) = Неопределено Тогда
					Прервать;
				КонецЕсли;
				
				ТабличныйДокумент.Области["П00006М200104" + Постфикс2].Значение = 0;
				ТабличныйДокумент.Области["П00006М200105" + Постфикс2].Значение = 0;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбнулитьВалютныеСуммы_ЗадолженностьПоКредитамЗаймам(Область)
	
	КодВалютыВОбласти = Область.Значение;
	
	ОсновнаяЧастИмени = Лев(Область.Имя, 13);
	Префикс = Лев(Область.Имя, 6);
	Постфикс = Сред(Область.Имя, 14);
	
	Если СтрНайти("П00007М100017,П00008М100017", ОсновнаяЧастИмени) <> 0 Тогда
		Если НЕ ЗначениеЗаполнено(КодВалютыВОбласти) ИЛИ КодВалютыВОбласти = "RUB" Тогда
			ПрефиксРаздела = Лев(ОсновнаяЧастИмени, 6);
			
			ТабличныйДокумент.Области[Префикс + "М100019" + Постфикс].Значение = 0;
			ТабличныйДокумент.Области[Префикс + "М100029" + Постфикс].Значение = 0;
			
			ТабличныйДокумент.Области[Префикс + "М100020" + Постфикс].Значение = 0;
			ТабличныйДокумент.Области[Префикс + "М100021" + Постфикс].Значение = 0;
			ТабличныйДокумент.Области[Префикс + "М100022" + Постфикс].Значение = 0;
			ТабличныйДокумент.Области[Префикс + "М100023" + Постфикс].Значение = 0;
			ТабличныйДокумент.Области[Префикс + "М100024" + Постфикс].Значение = 0;
			ТабличныйДокумент.Области[Префикс + "М100025" + Постфикс].Значение = 0;
			
			НомерСтроки = 0;
			Пока Истина Цикл
				НомерСтроки = НомерСтроки + 1;
				Постфикс2 = Постфикс + "_" + СтрокаЧГ0(НомерСтроки);
				
				Если ТабличныйДокумент.Области.Найти(Префикс + "М200004" + Постфикс2) = Неопределено Тогда
					Прервать;
				КонецЕсли;
				
				ТабличныйДокумент.Области[Префикс + "М200004" + Постфикс2].Значение = 0;
				ТабличныйДокумент.Области[Префикс + "М200005" + Постфикс2].Значение = 0;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбнулитьВалютныеСуммы_ФинансовыеВложения(Область)
	
	КодВалютыВОбласти = Область.Значение;
	
	ОсновнаяЧастИмени = Лев(Область.Имя, 13);
	Постфикс = Сред(Область.Имя, 14);
	
	Если СтрНайти("П00012М100107,П00013М100107", ОсновнаяЧастИмени) <> 0 Тогда
		Если НЕ ЗначениеЗаполнено(КодВалютыВОбласти) ИЛИ КодВалютыВОбласти = "RUB" Тогда
			ПрефиксРаздела = Лев(ОсновнаяЧастИмени, 6);
			
			ТабличныйДокумент.Области[ПрефиксРаздела + "М100108" + Постфикс].Значение = 0;
			ТабличныйДокумент.Области[ПрефиксРаздела + "М100111" + Постфикс].Значение = 0;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция РеквизитыЭлементаСправочникаВалют(РезультатВыбора)
	
	ЦифровойКод   = РезультатВыбора.Код;
	СимвольныйКод = РезультатВыбора.Наименование;
	
	// Коды рубля по ISO 4217.
	Если ЦифровойКод = "643" Тогда
		СимвольныйКод = "RUB";
	ИначеЕсли ЦифровойКод = "810" Тогда
		СимвольныйКод = "RUR";
	КонецЕсли;
	
	Результат = Новый Структура("Наименование, ЦифровойКод, СимвольныйКод",
		РезультатВыбора.НаименованиеПолное, ЦифровойКод, СимвольныйКод);
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура СформироватьСпискиВыбора()
	
	МакетСписковВыбора = Отчеты[Сред(Лев(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, ".Форма.") - 1), 7)].ПолучитьМакет("СпискиВыбора2017Кв3");
	
	КоллекцияСписковВыбора = Новый Соответствие;
	
	Для Каждого Область Из МакетСписковВыбора.Области Цикл
		Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Строки Тогда
			ВерхОбласти = Область.Верх;
			НизОбласти = Область.Низ;
			
			ТаблСписка = Новый ТаблицаЗначений;
			ТаблСписка.Колонки.Добавить("Код", , , 4);
			ТаблСписка.Колонки.Добавить("Название",);
			
			Для НомСтр = ВерхОбласти По НизОбласти Цикл
				НовСтрока = ТаблСписка.Добавить();
				НовСтрока.Код = СокрЛП(МакетСписковВыбора.Область(НомСтр, 1).Текст);
				НовСтрока.Название = СокрЛП(МакетСписковВыбора.Область(НомСтр, 2).Текст);
			КонецЦикла;
			
			КоллекцияСписковВыбора.Вставить(Область.Имя, ТаблСписка);
		КонецЕсли;
	КонецЦикла;
	
	СвойстваПоказателей.Очистить();
	
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000010000102", 4, , "Выбор кода строки", КоллекцияСписковВыбора["П000010000102"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000010000202", 4, , "Выбор кода строки", КоллекцияСписковВыбора["П000010000202"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000010000502", 4, , "Выбор кода строки", КоллекцияСписковВыбора["П000010000502"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000010000702", 4, , "Выбор кода строки", КоллекцияСписковВыбора["П000010000702"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000010007102", 4, , "Выбор кода строки", КоллекцияСписковВыбора["П000010007102"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000010007202", 4, , "Выбор кода строки", КоллекцияСписковВыбора["П000010007202"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000010000902", 4, , "Выбор кода строки", КоллекцияСписковВыбора["П000010000902"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000010001202", 4, , "Выбор кода строки", КоллекцияСписковВыбора["П000010001202"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000020000202", 4, , "Выбор кода строки", КоллекцияСписковВыбора["П000020000202"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000020000402", 4, , "Выбор кода строки", КоллекцияСписковВыбора["П000020000402"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000020000602", 4, , "Выбор кода строки", КоллекцияСписковВыбора["П000020000602"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000100620102", 4, , "Выбор кода строки", КоллекцияСписковВыбора["П000100620102"]);
	
КонецПроцедуры

&НаКлиенте
Процедура ВвестиПоказатель(Элемент, Область, КодПоказателя, Знач ЭтоСумма, Знач ТекстВыбора, ТаблицаВыбора, СтандартнаяОбработка, КолонкаПоиска = "Код") Экспорт
	
	Если ТаблицаВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	Если Область.Имя = КодПоказателя ИЛИ РегламентированнаяОтчетностьКлиентСервер.ПоказательВходитВМногострочнуюЧасть(ЭтаФорма, КодПоказателя) > 0 Тогда
		ИсходноеЗначение = ?(ТипЗнч(Область.Значение) = Тип("Строка"), СокрЛП(Область.Значение), Область.Значение);
		
	Иначе
		Разделитель = ?(Лев(Область.Имя, СтрДлина(КодПоказателя) + 1) = КодПоказателя + "_", "_", "");
		ИндексОбласти = 1;
		ИсходноеЗначение = "";
		Пока ЭтаФорма[ТекущийЭлемент.Имя].Области.Найти(КодПоказателя + Разделитель + Формат(ИндексОбласти, "ЧГ=")) <> Неопределено Цикл
			ИсходноеЗначение = ИсходноеЗначение + Строка(ЭтаФорма[ТекущийЭлемент.Имя].Области[КодПоказателя + Разделитель + Формат(ИндексОбласти, "ЧГ=")].Значение);
			ИндексОбласти = ИндексОбласти + 1;
		КонецЦикла;
		ИсходноеЗначение = СокрЛП(ИсходноеЗначение);
	КонецЕсли;
		
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Заголовок",          ТекстВыбора);
	ПараметрыФормы.Вставить("ТаблицаЗначений",    ТаблицаВыбора);
	ПараметрыФормы.Вставить("СтруктураДляПоиска", Новый Структура(КолонкаПоиска, ИсходноеЗначение));
	
	ДополнительныеПараметры = Новый Структура("ИндексОбласти, КодПоказателя, КолонкаПоиска, Область, Разделитель", ИндексОбласти, КодПоказателя, КолонкаПоиска, Область, Разделитель);
	ОписаниеОповещения = Новый ОписаниеОповещения("ВвестиПоказательЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ОткрытьФорму("Обработка.ОбщиеОбъектыРеглОтчетности.Форма.ФормаВыбораЗначенияИзТаблицы", ПараметрыФормы, ЭтаФорма,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ВвестиПоказательЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	ИндексОбласти = ДополнительныеПараметры.ИндексОбласти;
	КодПоказателя = ДополнительныеПараметры.КодПоказателя;
	КолонкаПоиска = ДополнительныеПараметры.КолонкаПоиска;
	Область = ДополнительныеПараметры.Область;
	Разделитель = ДополнительныеПараметры.Разделитель;
	
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	//если показатель входит в состав многострочной части, тогда имя области не будет совпадать с переданным кодом показателя
	//необходимо это учесть
	//считаем, что в многострочной части не может быть показателя, состоящего из нескольких ячеек
	Если Область.Имя = КодПоказателя ИЛИ РегламентированнаяОтчетностьКлиентСервер.ПоказательВходитВМногострочнуюЧасть(ЭтаФорма, КодПоказателя) > 0 Тогда
		Область.Значение = РезультатВыбора[КолонкаПоиска];
	Иначе
		СтрокаРезультатВыбора = Строка(РезультатВыбора[КолонкаПоиска]);
		Для Инд = СтрДлина(СтрокаРезультатВыбора) + 1 По ИндексОбласти - 1 Цикл
			СтрокаРезультатВыбора = " " + РезультатВыбора[КолонкаПоиска];
		КонецЦикла;
		Для Инд = 1 По ИндексОбласти - 1 Цикл
			ЭтаФорма[ТекущийЭлемент.Имя].Области[КодПоказателя + Разделитель + Формат(Инд, "ЧГ=")].Значение = СокрЛП(Сред(РезультатВыбора[КолонкаПоиска], Инд, 1));
		КонецЦикла;
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗаголовокОтчетности()
	
	СтруктураРеквизитовФормы.СтрПериодОтчета = Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ='ММММ гггг'") + " г." ;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПериодыЕдиницыИзмеренияОтчета(ИмяРаздела)
	
	Если ИмяРаздела = "Баланс" Тогда
		ЗаполнитьПериодыЕдиницыИзмеренияОтчета_Баланс();
	ИначеЕсли ИмяРаздела = "ОФР" Тогда
		ЗаполнитьПериодыЕдиницыИзмеренияОтчета_ОФР();
	ИначеЕсли ИмяРаздела = "ОИК" Тогда
		ЗаполнитьПериодыЕдиницыИзмеренияОтчета_ОИК();
	ИначеЕсли ИмяРаздела = "ОДДС" Тогда
		ЗаполнитьПериодыЕдиницыИзмеренияОтчета_ОДДС();
	ИначеЕсли ИмяРаздела = "ОЦИС" Тогда
		ЗаполнитьПериодыЕдиницыИзмеренияОтчета_ОЦИС();
	ИначеЕсли ИмяРаздела = "ДополнительныеПоказатели" Тогда
		ЗаполнитьПериодыЕдиницыИзмеренияОтчета_ДополнительныеПоказатели();
	ИначеЕсли ИмяРаздела = "ЛизингОбязательства" Тогда
		ЗаполнитьПериодыЕдиницыИзмеренияОтчета_ЛизингОбязательства();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПериодыЕдиницыИзмеренияОтчета_Баланс()
	
	ТабличныйДокумент.Области.ЕдиницаИзмерения.Текст = ПредставлениеЕдиницыИзмерения(СтруктураРеквизитовФормы.ЕдиницаИзмерения);
	
	ДатаОтчетная = КонецМесяца(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	ДатаКонцаПрошлогоГода     = НачалоГода(ДатаОтчетная) - 1;
	ДатаКонцаПозапрошлогоГода = НачалоГода(ДатаКонцаПрошлогоГода) - 1;
	
	ЗаголовокДатаОтчетная              = "На " + Формат(ДатаОтчетная, "ДФ = 'дд ММММ гггг'")+ " г.";
	ЗаголовокДатаКонцаПрошлогоГода     = "На " + Формат(ДатаКонцаПрошлогоГода, "ДФ = 'дд ММММ гггг'")+ " г.";
	ЗаголовокДатаКонцаПозапрошлогоГода = "На " + Формат(ДатаКонцаПозапрошлогоГода, "ДФ = 'дд ММММ гггг'")+ " г.";
	
	ТабличныйДокумент.Области.ДатаОтчетная.Значение               = ЗаголовокДатаОтчетная;
	ТабличныйДокумент.Области.ДатаОтчетная2.Значение              = ЗаголовокДатаОтчетная;
	ТабличныйДокумент.Области.ДатаКонцаПрошлогоГода.Значение      = ЗаголовокДатаКонцаПрошлогоГода;
	ТабличныйДокумент.Области.ДатаКонцаПрошлогоГода2.Значение     = ЗаголовокДатаКонцаПрошлогоГода;
	ТабличныйДокумент.Области.ДатаКонцаПозапрошлогоГода.Значение  = ЗаголовокДатаКонцаПозапрошлогоГода;
	ТабличныйДокумент.Области.ДатаКонцаПозапрошлогоГода2.Значение = ЗаголовокДатаКонцаПозапрошлогоГода;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПериодыЕдиницыИзмеренияОтчета_ОФР()
	
	ТабличныйДокумент.Области.ЕдиницаИзмерения.Текст = ПредставлениеЕдиницыИзмерения(СтруктураРеквизитовФормы.ЕдиницаИзмерения);
	
	ДатаКонцаПериода = КонецМесяца(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	ДатаНачалаПериода = НачалоГода(ДатаКонцаПериода);
	
	ДатаКонцаПрошлогоПериода = КонецМесяца(ДобавитьМесяц(ДатаКонцаПериода, -12));
	
	Если НачалоМесяца(ДатаКонцаПериода) = ДатаНачалаПериода Тогда
		СтрПериод = Формат(ДатаКонцаПериода, "ДФ = 'ММММ гггг'") + " г.";
	Иначе
		СтрПериод = "Январь - " + Формат(ДатаКонцаПериода, "ДФ = 'ММММ гггг'") + " г.";
	КонецЕсли;
	
	Если Месяц(ДатаКонцаПрошлогоПериода) = 1 Тогда
		СтрПериодПрошлыйГод = Формат(ДатаКонцаПрошлогоПериода, "ДФ = 'ММММ гггг'") + " г.";
	Иначе
		СтрПериодПрошлыйГод = "Январь - " + Формат(ДатаКонцаПрошлогоПериода, "ДФ = 'ММММ гггг'") + " г.";
	КонецЕсли;
	
	ПериодОтчета = " за " + СтрПериод;
	
	ЗаголовокДатаОтчетногоПериода = "За " + СтрПериод;
	ЗаголовокДатаОтчетногоПериодаПрошлогоГода = "За " + СтрПериодПрошлыйГод;
	
	ТабличныйДокумент.Области.ДатаОтчетногоПериода.Значение = ЗаголовокДатаОтчетногоПериода;
	ТабличныйДокумент.Области.ДатаОтчетногоПериода2.Значение = ЗаголовокДатаОтчетногоПериода;
	
	ТабличныйДокумент.Области.ДатаОтчетногоПериодаПрошлогоГода.Значение = ЗаголовокДатаОтчетногоПериодаПрошлогоГода;
	ТабличныйДокумент.Области.ДатаОтчетногоПериодаПрошлогоГода2.Значение = ЗаголовокДатаОтчетногоПериодаПрошлогоГода;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПериодыЕдиницыИзмеренияОтчета_ОИК()
	
	ТабличныйДокумент.Области.ЕдиницаИзмерения.Текст = ПредставлениеЕдиницыИзмерения(СтруктураРеквизитовФормы.ЕдиницаИзмерения);
	
	ДатаКонцаПериодаОтчета    = КонецГода(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	ДатаКонцаПрошлогоГода     = Дата(Год(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) - 1, 12, 31);
	ДатаКонцаПозапрошлогоГода = Дата(Год(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) - 2, 12, 31);
	
	СтрПериод = "Январь - " + Формат(ДатаКонцаПериодаОтчета, "ДФ = 'ММММ гггг'") + " г.";
	
	ПериодОтчета = " за " + СтрПериод;
	
	ДатаВеличиныКапиталаПозапрошлогоГода = "Величина капитала на " + Формат(ДатаКонцаПозапрошлогоГода, "ДФ = 'дд ММММ гггг'")+ " г.";
	ДатаВеличиныКапиталаПрошлогоГода     = "Величина капитала на " + Формат(ДатаКонцаПрошлогоГода, "ДФ = 'дд ММММ гггг'")+ " г.";
	ДатаВеличиныКапиталаПериодаОтчета    = "Величина капитала на " + Формат(ДатаКонцаПериодаОтчета, "ДФ = 'дд ММММ гггг'")+ " г.";
	
	ПериодИзмененияКапиталаПрошлогоГода  = "За " + Формат(ДатаКонцаПрошлогоГода, "ДФ = 'гггг'")+ " г.";
	ПериодИзмененияКапиталаПериодаОтчета = "За " + Формат(ДатаКонцаПериодаОтчета, "ДФ = 'гггг'")+ " г.";
	
	ЗаголовокДатаОтчетная              = "На " + Формат(ДатаКонцаПериодаОтчета, "ДФ = 'дд ММММ гггг'")+ " г.";
	ЗаголовокДатаКонцаПрошлогоГода     = "На " + Формат(ДатаКонцаПрошлогоГода, "ДФ = 'дд ММММ гггг'")+ " г.";
	ЗаголовокДатаКонцаПозапрошлогоГода = "На " + Формат(ДатаКонцаПозапрошлогоГода, "ДФ = 'дд ММММ гггг'")+ " г.";
	
	ПериодКорректировокПрошлогоГода = "Изменения капитала за " + Формат(ДатаКонцаПрошлогоГода, "ДФ = 'гггг'")+ " г.";
	
	ТабличныйДокумент.Области.ДатаВеличиныКапиталаПозапрошлогоГода.Значение = ДатаВеличиныКапиталаПозапрошлогоГода;
	ТабличныйДокумент.Области.ДатаВеличиныКапиталаПрошлогоГода.Значение     = ДатаВеличиныКапиталаПрошлогоГода;
	ТабличныйДокумент.Области.ДатаВеличиныКапиталаПериодаОтчета.Значение    = ДатаВеличиныКапиталаПериодаОтчета;
	
	ТабличныйДокумент.Области.ПериодИзмененияКапиталаПрошлогоГода.Значение  = ПериодИзмененияКапиталаПрошлогоГода;
	ТабличныйДокумент.Области.ПериодИзмененияКапиталаПериодаОтчета.Значение = ПериодИзмененияКапиталаПериодаОтчета;
	
	ТабличныйДокумент.Области.ДатаКорректировокПозапрошлогоГода.Значение = ЗаголовокДатаКонцаПозапрошлогоГода;
	ТабличныйДокумент.Области.ДатаКорректировокПрошлогоГода.Значение     = ЗаголовокДатаКонцаПрошлогоГода;
	ТабличныйДокумент.Области.ПериодКорректировокПрошлогоГода.Значение   = ПериодКорректировокПрошлогоГода;
	
	ТабличныйДокумент.Области.ДатаАктивовПозапрошлогоГода.Значение = ЗаголовокДатаКонцаПозапрошлогоГода;
	ТабличныйДокумент.Области.ДатаАктивовПрошлогоГода.Значение     = ЗаголовокДатаКонцаПрошлогоГода;
	ТабличныйДокумент.Области.ДатаАктивовПериодаОтчета.Значение    = ЗаголовокДатаОтчетная;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПериодыЕдиницыИзмеренияОтчета_ОДДС()
	
	ТабличныйДокумент.Области.ЕдиницаИзмерения.Текст = ПредставлениеЕдиницыИзмерения(СтруктураРеквизитовФормы.ЕдиницаИзмерения);
	
	ДатаКонцаПериода = КонецГода(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	ДатаКонцаПрошлогоПериода = ДобавитьМесяц(ДатаКонцаПериода, -12);
	
	СтрПериод = "Январь - " + Формат(ДатаКонцаПериода, "ДФ = 'ММММ гггг'") + " г.";
	СтрПериодПрошлыйГод = "Январь - " + Формат(ДатаКонцаПрошлогоПериода, "ДФ = 'ММММ гггг'") + " г.";
	
	ЗаголовокДатаОтчетногоПериода = "За " + СтрПериод;
	ЗаголовокДатаОтчетногоПериодаПрошлогоГода = "За " + СтрПериодПрошлыйГод;
	
	ТабличныйДокумент.Области.ДатаОтчетногоПериода.Значение  = ЗаголовокДатаОтчетногоПериода;
	ТабличныйДокумент.Области.ДатаОтчетногоПериода2.Значение = ЗаголовокДатаОтчетногоПериода;

	ТабличныйДокумент.Области.ДатаОтчетногоПериодаПрошлогоГода.Значение  = ЗаголовокДатаОтчетногоПериодаПрошлогоГода;
	ТабличныйДокумент.Области.ДатаОтчетногоПериодаПрошлогоГода2.Значение = ЗаголовокДатаОтчетногоПериодаПрошлогоГода;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПериодыЕдиницыИзмеренияОтчета_ОЦИС()
	
	ТабличныйДокумент.Области.ЕдиницаИзмерения.Текст = ПредставлениеЕдиницыИзмерения(СтруктураРеквизитовФормы.ЕдиницаИзмерения);
	
	ДатаКонцаПериода = КонецГода(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	ДатаКонцаПрошлогоПериода = ДобавитьМесяц(ДатаКонцаПериода, -12);
	
	СтрПериод = "Январь - " + Формат(ДатаКонцаПериода, "ДФ = 'ММММ гггг'") + " г.";
	СтрПериодПрошлыйГод = "Январь - " + Формат(ДатаКонцаПрошлогоПериода, "ДФ = 'ММММ гггг'") + " г.";
	
	ЗаголовокДатаОтчетногоПериода = "За " + СтрПериод;
	ЗаголовокДатаОтчетногоПериодаПрошлогоГода = "За " + СтрПериодПрошлыйГод;
	
	ТабличныйДокумент.Области.ДатаОтчетногоПериода.Значение = ЗаголовокДатаОтчетногоПериода;
	ТабличныйДокумент.Области.ДатаОтчетногоПериодаПрошлогоГода.Значение = ЗаголовокДатаОтчетногоПериодаПрошлогоГода;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПериодыЕдиницыИзмеренияОтчета_ДополнительныеПоказатели()
	
	ТабличныйДокумент.Области.ЕдиницаИзмерения.Текст = ПредставлениеЕдиницыИзмерения(СтруктураРеквизитовФормы.ЕдиницаИзмерения);
	
	ДатаОтчетная = КонецКвартала(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	ДатаКонцаПрошлогоГода     = Дата(Год(ДатаОтчетная) - 1, 12, 31);
	ДатаКонцаПозапрошлогоГода = Дата(Год(ДатаОтчетная) - 2, 12, 31);
	
	ЗаголовокДатаОтчетная              = "На " + Формат(ДатаОтчетная, "ДФ = 'дд ММММ гггг'")+ " г.";
	ЗаголовокДатаКонцаПрошлогоГода     = "На " + Формат(ДатаКонцаПрошлогоГода, "ДФ = 'дд ММММ гггг'")+ " г.";
	ЗаголовокДатаКонцаПозапрошлогоГода = "На " + Формат(ДатаКонцаПозапрошлогоГода, "ДФ = 'дд ММММ гггг'")+ " г.";
	
	ТабличныйДокумент.Области.ДатаОтчетная.Значение              = ЗаголовокДатаОтчетная;
	ТабличныйДокумент.Области.ДатаКонцаПрошлогоГода.Значение     = ЗаголовокДатаКонцаПрошлогоГода;
	ТабличныйДокумент.Области.ДатаКонцаПозапрошлогоГода.Значение = ЗаголовокДатаКонцаПозапрошлогоГода;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПериодыЕдиницыИзмеренияОтчета_ЛизингОбязательства()
	
	Если ДействуетСВерсииФормата("5.10.01") И НеотображаемыеПоказатели.СтатусЗаполнения = "пустой" Тогда
		// Отображается справка об отсутствии обязательств по лизингу.
		Возврат;
	КонецЕсли;
	
	ДатаОтчетная = КонецКвартала(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	
	Для Инд = 1 По 8 Цикл
		Смещение = -3 * (8 - Инд + 1);
		ДатаКвартала = ДобавитьМесяц(ДатаОтчетная, Смещение);
		НомерКвартала = Месяц(ДатаКвартала) / 3;
		
		ЗаголовокСтроки = "за " + НомерКвартала + " кв. " + Формат(ДатаКвартала, "ДФ='гггг ''г.'''");
		
		ИмяОбласти = "П000060000" + Инд + "01";
		ТабличныйДокумент.Области[ИмяОбласти].Значение = ЗаголовокСтроки;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПредставлениеЕдиницыИзмерения(ЕдиницаИзмерения)
	
	ПредставлениеЕдиницыИзмерения = "(не указана)";
	
	Если ЕдиницаИзмерения = ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1 Тогда
		ПредставлениеЕдиницыИзмерения = "(руб.)";
	ИначеЕсли ЕдиницаИзмерения = ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1000 Тогда
		ПредставлениеЕдиницыИзмерения = "(тыс. руб.)";
	ИначеЕсли ЕдиницаИзмерения = ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1000000 Тогда
		ПредставлениеЕдиницыИзмерения = "(млн. руб.)";
	КонецЕсли;
	
	Возврат ПредставлениеЕдиницыИзмерения;
	
КонецФункции

&НаСервере
Функция ПостфиксОбластейОтчетаДенежныеСредства(ЕдиницаИзмерения)
	
	ПостфиксОбластейОтчета = "";
	
	Если ЕдиницаИзмерения = ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1000 Тогда
		ПостфиксОбластейОтчета = "10Е3";
	ИначеЕсли ЕдиницаИзмерения = ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1000000 Тогда
		ПостфиксОбластейОтчета = "10Е6";
	КонецЕсли;
	
	Возврат ПостфиксОбластейОтчета;
	
КонецФункции

&НаСервере
Процедура ПолучитьСведенияОПоказателяхОтчета()
	
	СтруктураРеквизитовФормы.Вставить("АвтозаполняемыеПоказатели", Новый Структура);
	
	ПараметрыОтчета = Новый Структура;
	ПараметрыОтчета.Вставить("ПрименениеУСН0", СтруктураРеквизитовФормы.ПрименениеУСН0);
	ПараметрыОтчета.Вставить("ПрименениеУСН1", СтруктураРеквизитовФормы.ПрименениеУСН1);
	
	АвтозаполняемыеПоказатели =
		РегламентированнаяОтчетностьПереопределяемый.ПолучитьСведенияОПоказателяхОтчета(
		Сред(Лев(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, ".Форма.") - 1), 7),
		Сред(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, ".Форма.") + 7), ПараметрыОтчета);
	
	Если АвтозаполняемыеПоказатели.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Показатель Из АвтозаполняемыеПоказатели Цикл
		Если Показатель.Значение[0] Тогда
			СтруктураРеквизитовФормы.ОтображатьКнопкуЗаполнить = Истина;
			Если СтруктураРеквизитовФормы.ОтображатьКнопкуРасшифровать Тогда
				Прервать;
			КонецЕсли;
		КонецЕсли;
		
		Если Показатель.Значение[1] Тогда
			СтруктураРеквизитовФормы.ОтображатьКнопкуРасшифровать = Истина;
			Если СтруктураРеквизитовФормы.ОтображатьКнопкуЗаполнить Тогда
				Прервать;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	СтруктураРеквизитовФормы.Вставить("АвтозаполняемыеПоказатели", АвтозаполняемыеПоказатели);
	
КонецПроцедуры

&НаСервере
Процедура СкрытьЭлементыУдаленияСтраницы()
	
	ОблУдалитьСтраницу = ТабличныйДокумент.Области.Найти("УдалитьСтраницуЗначок");
	Если ОблУдалитьСтраницу <> Неопределено Тогда
		ОблУдалитьСтраницу.Текст = "";
		ОблУдалитьСтраницу.Гиперссылка = Ложь;
	КонецЕсли;
	
	ОблУдалитьСтраницу = ТабличныйДокумент.Области.Найти("УдалитьСтраницу");
	Если ОблУдалитьСтраницу <> Неопределено Тогда
		ОблУдалитьСтраницу.Текст = "";
		ОблУдалитьСтраницу.Гиперссылка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьРасшифровкиНаКлиенте(ИмяРаздела)
	
	КнопкаДоступна = Ложь;
	
	Если ИмяРаздела <> "Титульный" Тогда
		Если ТипЗнч(НеотображаемыеПоказатели) = Тип("Структура")
		   И НеотображаемыеПоказатели.Свойство("Расшифровка")
		   И НеотображаемыеПоказатели.Расшифровка <> Неопределено Тогда
			КнопкаДоступна = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Элементы.Расшифровать.Доступность = КнопкаДоступна;
	Элементы.ТабличныйДокументКонтекстноеМенюРасшифровать.Доступность = КнопкаДоступна;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьРасшифровкиНаСервере(ИмяРаздела)
	
	КнопкаДоступна = Ложь;
	
	Если ИмяРаздела <> "Титульный" Тогда
		Если ТипЗнч(НеотображаемыеПоказатели) = Тип("Структура")
		   И НеотображаемыеПоказатели.Свойство("Расшифровка")
		   И НеотображаемыеПоказатели.Расшифровка <> Неопределено Тогда
			КнопкаДоступна = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Элементы.Расшифровать.Доступность = КнопкаДоступна;
	Элементы.ТабличныйДокументКонтекстноеМенюРасшифровать.Доступность = КнопкаДоступна;
	
КонецПроцедуры

&НаСервере
Функция АдресТаблицыРасшифровок(АдресХранилищаВсехРасшифровок, ИдентификаторТаблицы)
	
	ВсеРасшифровки = ПолучитьИзВременногоХранилища(АдресХранилищаВсехРасшифровок);
	
	РасшифровкаСтраницы = Неопределено;
	ВсеРасшифровки.Свойство(ИдентификаторТаблицы, РасшифровкаСтраницы);
	
	АдресТаблицыРасшифровок = ПоместитьВоВременноеХранилище(РасшифровкаСтраницы, УникальныйИдентификатор);
	
	Возврат АдресТаблицыРасшифровок;
	
КонецФункции

&НаКлиенте
Процедура НастроитьОтчетПоСчетам(ИмяРаздела)
	
	ПараметрыФормы = Новый Структура;
	
	ФормаНастройкиСпискаСчетов = ПолучитьФорму("Отчет.БухгалтерскаяОтчетностьВБанк.Форма.НастройкаСпискаСчетов", ПараметрыФормы, ЭтаФорма);
	
	КопироватьДанныеФормы(ЭтаФорма["СписокСтраниц" + ИмяРаздела], ФормаНастройкиСпискаСчетов.СоставОтчетаПоСчетам);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяРаздела", ИмяРаздела);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("НастроитьОтчетПоСчетамЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ФормаНастройкиСпискаСчетов.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
	ФормаНастройкиСпискаСчетов.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	ФормаНастройкиСпискаСчетов.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьОтчетПоСчетамЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИмяРаздела = ДополнительныеПараметры.ИмяРаздела;
	
	Для Инд = 0 По РезультатВыбора.ВГраница() Цикл
		СтрокаПоСчету = ЭтаФорма["СписокСтраниц" + ИмяРаздела][Инд];
		СтрокаПоСчету.Включен = РезультатВыбора[Инд].Включен;
	КонецЦикла;
	
	Модифицированность = Истина;
	
	СформироватьДеревоРазделовОтчетаНаСервере();
	ОбновитьДеревоРазделовВФормеОтчета(ИмяРаздела);
	
КонецПроцедуры

&НаСервере
Процедура ПерейтиНаСегментОтчета(ИмяРаздела, ИмяКомандыПерехода)
	
	ВыборкаСегментов = ВыборкаСегментовОтчетаПоСчету(ИмяРаздела, НеотображаемыеПоказатели.Счет);
	ВсегоСегментов = ВыборкаСегментов.Количество();
	
	АктивныйСегмент = СтруктураРеквизитовФормы.АктивныйСегмент;
	
	Если ИмяКомандыПерехода = "НавигацияПервый"
	   И АктивныйСегмент <> 1 Тогда
		СформироватьВывестиСекциюОтчета(ИмяРаздела, 1);
	КонецЕсли;
	
	Если ИмяКомандыПерехода = "НавигацияПредыдущий"
	   И АктивныйСегмент > 1 Тогда
		СформироватьВывестиСекциюОтчета(ИмяРаздела, АктивныйСегмент - 1);
	КонецЕсли;
	
	Если ИмяКомандыПерехода = "НавигацияСледующий"
	   И АктивныйСегмент < ВсегоСегментов Тогда
		СформироватьВывестиСекциюОтчета(ИмяРаздела, АктивныйСегмент + 1);
	КонецЕсли;
	
	Если ИмяКомандыПерехода = "НавигацияПоследний"
	   И АктивныйСегмент <> ВсегоСегментов Тогда
		СформироватьВывестиСекциюОтчета(ИмяРаздела, ВсегоСегментов);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьВывестиСекциюОтчета(ИмяРаздела, НомерСекции)
	
	ДеревоДанныхРаздела = ПолучитьИзВременногоХранилища(
		СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяРаздела]);
	
	ТекВетка = ДеревоДанныхРаздела;
	Для Каждого НомерСтроки Из СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела Цикл
		ТекВетка = ТекВетка.Строки[НомерСтроки - 1];
	КонецЦикла;
	
	Шаблон = МакетРаздела(ИмяРаздела);
	МакетРаздела = Новый ТабличныйДокумент;
	
	Если ИмяРаздела = "ОСВПоСчету" Тогда
		СформироватьСекциюОСВПоСчету(МакетРаздела, Шаблон, ТекВетка, НомерСекции);
	ИначеЕсли ИмяРаздела = "АнализСчета" Тогда
		СформироватьСекциюАнализаСчета(МакетРаздела, Шаблон, ТекВетка, НомерСекции);
	КонецЕсли;
	
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(МакетРаздела);
	СтруктураРеквизитовФормы.АктивныйСегмент = НомерСекции;
	
КонецПроцедуры

&НаСервере
Функция ИмяКорневогоРаздела(ИмяРаздела)
	
	ИмяКорневогоРаздела = ИмяРаздела;
	
	Если мСтруктураМногоуровневыхРазделов.Свойство(ИмяРаздела)
	   И мСтруктураМногоуровневыхРазделов[ИмяРаздела].Свойство("КорневойРаздел") Тогда
		ИмяКорневогоРаздела = мСтруктураМногоуровневыхРазделов[ИмяРаздела].КорневойРаздел;
	КонецЕсли;
	
	Возврат ИмяКорневогоРаздела;
	
КонецФункции

&НаКлиенте
Процедура ПредставлениеБухОтчетностиФНСОбработкаВыбора(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	Если РезультатВыбора <> Неопределено Тогда
		ПакетОтчетаФНС = ПакетОтчетаФНС(РезультатВыбора.РегламентированныйОтчет);
		
		Если ПакетОтчетаФНС <> Неопределено Тогда
			СтруктураРеквизитовФормы.ОтчетыФНС_Бухотчетность = РезультатВыбора.РегламентированныйОтчет;
			СтруктураРеквизитовФормы.ОтчетыФНС_БухотчетностьПредставление = РезультатВыбора.ПредставлениеОтчета;
			СтруктураРеквизитовФормы.ОтчетыФНС_БухотчетностьПакет = ПакетОтчетаФНС;
			
			ОтметитьРазделКакЗаполненный("ОтчетыФНС");
			
		Иначе
			// Произошла ошибка при получении пакета файлов.
			СтруктураРеквизитовФормы.ОтчетыФНС_Бухотчетность = Неопределено;
			СтруктураРеквизитовФормы.ОтчетыФНС_БухотчетностьПредставление = "";
			СтруктураРеквизитовФормы.ОтчетыФНС_БухотчетностьПакет = Неопределено;
			
		КонецЕсли;
		
		ПредставлениеБухОтчетностиФНС = СтруктураРеквизитовФормы.ОтчетыФНС_БухотчетностьПредставление;
		
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеДекларацииПрибыльФНСОбработкаВыбора(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	Если РезультатВыбора <> Неопределено Тогда
		ПакетОтчетаФНС = ПакетОтчетаФНС(РезультатВыбора.РегламентированныйОтчет);
		
		Если ПакетОтчетаФНС <> Неопределено Тогда
			СтруктураРеквизитовФормы.ОтчетыФНС_Прибыль = РезультатВыбора.РегламентированныйОтчет;
			СтруктураРеквизитовФормы.ОтчетыФНС_ПрибыльПредставление = РезультатВыбора.ПредставлениеОтчета;
			СтруктураРеквизитовФормы.ОтчетыФНС_ПрибыльПакет = ПакетОтчетаФНС;
			
			ОтметитьРазделКакЗаполненный("ОтчетыФНС");
			
		Иначе
			// Произошла ошибка при получении пакета файлов.
			СтруктураРеквизитовФормы.ОтчетыФНС_Прибыль = Неопределено;
			СтруктураРеквизитовФормы.ОтчетыФНС_ПрибыльПредставление = "";
			СтруктураРеквизитовФормы.ОтчетыФНС_ПрибыльПакет = Неопределено;
			
		КонецЕсли;
		
		ПредставлениеДекларацииПрибыльФНС = СтруктураРеквизитовФормы.ОтчетыФНС_ПрибыльПредставление;
		
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеДекларацииНДСФНСОбработкаВыбора(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	Если РезультатВыбора <> Неопределено Тогда
		ПакетОтчетаФНС = ПакетОтчетаФНС(РезультатВыбора.РегламентированныйОтчет);
		
		Если ПакетОтчетаФНС <> Неопределено Тогда
			СтруктураРеквизитовФормы.ОтчетыФНС_НДС = РезультатВыбора.РегламентированныйОтчет;
			СтруктураРеквизитовФормы.ОтчетыФНС_НДСПредставление = РезультатВыбора.ПредставлениеОтчета;
			СтруктураРеквизитовФормы.ОтчетыФНС_НДСПакет = ПакетОтчетаФНС;
			
			ОтметитьРазделКакЗаполненный("ОтчетыФНС");
			
		Иначе
			// Произошла ошибка при получении пакета файлов.
			СтруктураРеквизитовФормы.ОтчетыФНС_НДС = Неопределено;
			СтруктураРеквизитовФормы.ОтчетыФНС_НДСПредставление = "";
			СтруктураРеквизитовФормы.ОтчетыФНС_НДСПакет = Неопределено;
			
		КонецЕсли;
		
		ПредставлениеДекларацииНДСФНС = СтруктураРеквизитовФормы.ОтчетыФНС_НДСПредставление;
		
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеСправкиОбИсполненииОбязанностейПоУплатеФНСОбработкаВыбора(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	Если РезультатВыбора <> Неопределено Тогда
		ПакетОтчетаФНС = ПакетОтчетаФНС(РезультатВыбора.РегламентированныйОтчет);
		
		Если ПакетОтчетаФНС <> Неопределено Тогда
			СтруктураРеквизитовФормы.ОтчетыФНС_СправкаИспОбУпл = РезультатВыбора.РегламентированныйОтчет;
			СтруктураРеквизитовФормы.ОтчетыФНС_СправкаИспОбУплПредставление = РезультатВыбора.ПредставлениеОтчета;
			СтруктураРеквизитовФормы.ОтчетыФНС_СправкаИспОбУплПакет = ПакетОтчетаФНС;
			
			ОтметитьРазделКакЗаполненный("ОтчетыФНС");
			
		Иначе
			// Произошла ошибка при получении пакета файлов.
			СтруктураРеквизитовФормы.ОтчетыФНС_СправкаИспОбУпл = Неопределено;
			СтруктураРеквизитовФормы.ОтчетыФНС_СправкаИспОбУплПредставление = "";
			СтруктураРеквизитовФормы.ОтчетыФНС_СправкаИспОбУплПакет = Неопределено;
			
		КонецЕсли;
		
		ПредставлениеСправкиОбИсполненииОбязанностейПоУплатеФНС = СтруктураРеквизитовФормы.ОтчетыФНС_СправкаИспОбУплПредставление;
		
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПакетОтчетаФНС(СсылкаНаОтчет)
	
	ДвоичныеДанныеПакета =
		ЭлектронныйДокументооборотСКонтролирующимиОрганами.ДвДанныеПакетаДляПредоставленияПоМестуТребования(СсылкаНаОтчет);
		
	Если ТипЗнч(ДвоичныеДанныеПакета) = Тип("ДвоичныеДанные") Тогда
		Возврат ДвоичныеДанныеПакета;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция РазделАвтозаполняется(ИмяРаздела)
	
	РазделАвтозаполняется = Ложь;
	
	ДеревоСтраниц = РеквизитФормыВЗначение("мДеревоСтраницОтчета");
	СтрокаРаздела = ДеревоСтраниц.Строки.Найти(ИмяРаздела, "ИмяСтраницы", Истина);
	Если СтрокаРаздела <> Неопределено Тогда
		РазделАвтозаполняется = СтрокаРаздела.ЗаполняетсяПоИБ;
	КонецЕсли;
	
	Возврат РазделАвтозаполняется;
	
КонецФункции

#Область НаблюдательЗаполненияРазделов

&НаСервере
Процедура ИнициализироватьНаблюдательЗаполненияРазделов()
	
	СостоянияРазделов = СтруктураРеквизитовФормы.НаблюдательЗаполненияРазделов;
	СостоянияРазделов.Очистить();
	
	ВсеРазделы = мДеревоСтраницОтчета.ПолучитьЭлементы();
	
	Для Каждого РазделУровня1 Из ВсеРазделы Цикл
		РазделыУровня2 = РазделУровня1.ПолучитьЭлементы();
		
		Если РазделыУровня2.Количество() = 0 Тогда
			ИмяРаздела = РазделУровня1.ИмяСтраницы;
			СостоянияРазделов.Вставить(ИмяРаздела, Неопределено);
			
		Иначе
			Для Каждого РазделУровня2 Из РазделыУровня2 Цикл
				ИмяРаздела = РазделУровня2.ИмяСтраницы;
				СостоянияРазделов.Вставить(ИмяРаздела, Неопределено);
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОтметитьРазделыКакНезаполненные()
	
	СостоянияРазделов = СтруктураРеквизитовФормы.НаблюдательЗаполненияРазделов;
	
	Для Каждого ЭлементРаздела Из СостоянияРазделов Цикл
		СостоянияРазделов[ЭлементРаздела.Ключ] = Ложь;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОтметитьРазделКакЗаполненный(ИмяРаздела)
	
	СостоянияРазделов = СтруктураРеквизитовФормы.НаблюдательЗаполненияРазделов;
	
	Если СостоянияРазделов.Свойство(ИмяРаздела) Тогда
		СостоянияРазделов.Вставить(ИмяРаздела, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОтметитьРазделКакНезаполненный(ИмяРаздела)
	
	СостоянияРазделов = СтруктураРеквизитовФормы.НаблюдательЗаполненияРазделов;
	
	Если СостоянияРазделов.Свойство(ИмяРаздела) Тогда
		СостоянияРазделов.Вставить(ИмяРаздела, Ложь);
		
	Иначе
		// Отметка разделов второго уровня по корневому разделу.
		ВсеРазделы = мДеревоСтраницОтчета.ПолучитьЭлементы();
		
		Для Каждого РазделУровня1 Из ВсеРазделы Цикл
			Если РазделУровня1.ИмяСтраницы <> ИмяРаздела Тогда
				Продолжить;
			КонецЕсли;
			
			РазделыУровня2 = РазделУровня1.ПолучитьЭлементы();
			
			Для Каждого РазделУровня2 Из РазделыУровня2 Цикл
				ИмяРазделаУровня2 = РазделУровня2.ИмяСтраницы;
				ОтметитьРазделКакНезаполненный(ИмяРазделаУровня2);
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОтметитьАвтозаполненныеРазделы(ПараметрыАвтозаполнения)
	
	СостоянияРазделов = СтруктураРеквизитовФормы.НаблюдательЗаполненияРазделов;
	
	Для Каждого ЭлементРаздела Из СостоянияРазделов Цикл
		ИмяРаздела = ЭлементРаздела.Ключ;
		Если ПараметрыАвтозаполнения.Свойство("Заполнять" + ИмяРаздела)
		   И ПараметрыАвтозаполнения["Заполнять" + ИмяРаздела] = Истина Тогда
			ОтметитьРазделКакЗаполненный(ИмяРаздела);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

&НаСервере
Процедура УстановитьПризнакиПримененияУСН()
	
	ОтчетныйПериодКонец  = СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета;
	ОтчетныйПериодНачало = СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета;
	
	ПредшествующийПериодКонец  = ОтчетныйПериодНачало - 1;
	ПредшествующийПериодНачало = НачалоГода(ПредшествующийПериодКонец);
	
	ОбъектНалогообложения = РегламентированнаяОтчетность.ОбъектНалогообложенияУСНЗаПериод(
		СтруктураРеквизитовФормы.Организация, ОтчетныйПериодНачало, ОтчетныйПериодКонец);
	СтруктураРеквизитовФормы.ПрименениеУСН0 = ЗначениеЗаполнено(ОбъектНалогообложения);
	
	ОбъектНалогообложения = РегламентированнаяОтчетность.ОбъектНалогообложенияУСНЗаПериод(
		СтруктураРеквизитовФормы.Организация, ПредшествующийПериодНачало, ПредшествующийПериодКонец);
	СтруктураРеквизитовФормы.ПрименениеУСН1 = ЗначениеЗаполнено(ОбъектНалогообложения);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция Мебибайт()
	
	Возврат 1048576;
	
КонецФункции

&НаСервере
Функция КодыВидовОбеспечений()
	
	Коды = Новый Структура;
	Коды.Вставить("Аваль", 1);
	Коды.Вставить("Залог", 2);
	Коды.Вставить("Поручительство", 3);
	Коды.Вставить("Гарантия", 4);
	Коды.Вставить("Прочее", 5);
	
	Возврат Коды;
	
КонецФункции

&НаКлиенте
Процедура ВыгрузитьЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ДвоичныеДанныеФайла = Неопределено;
	ИмяПакетаДляБанка = ПодготовитьОкружениеДляОтправкиИВыгрузки(ДвоичныеДанныеФайла);
	
	Если ЗначениеЗаполнено(ИмяПакетаДляБанка) Тогда
		АдресДанныхДляСохранения = ПоместитьВоВременноеХранилище(ДвоичныеДанныеФайла, УникальныйИдентификатор);
		ПолучитьФайл(АдресДанныхДляСохранения, ИмяПакетаДляБанка, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПодготовитьОкружениеДляОтправкиИВыгрузки(ДвоичныеДанныеФайла)
	
	ТаблицаСообщений.Очистить();
	
	ДатаВыгрузки = ТекущаяДата();
	
	ИНН = СтруктураДанныхТитульный.ИНН;
	КПП = СокрЛП(КППОрганизации(СтруктураРеквизитовФормы.Организация));
	
	ГодОтчета = Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ=гггг");
	КварталОтчета = Строка(Месяц(КонецКвартала(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета)) / 3) + "Q";
	
	КодыМесяцев = "01,02,Q1,04,05,Q2,07,08,Q3,10,11,Q4";
	МесяцОтчета = Сред(КодыМесяцев, (Месяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) - 1) * 3 + 1, 2);
	
	МоментВыгрузки = Формат(ДатаВыгрузки, "ДФ=yyyyMMddHHmmss");
	НомерВыгрузки = НомерВыгрузкиВБанк(ДатаВыгрузки, СтруктураРеквизитовФормы.Организация);
	
	ИмяФайлаПредставления = ИНН
	                 + "_" + ?(ЗначениеЗаполнено(КПП), КПП, "000000000")
	                 + "_" + ГодОтчета + "_" + КварталОтчета
	                 + "_" + МоментВыгрузки + "_" + НомерВыгрузки;
	
	ПостфиксПредставлений = ИНН
	                 + "_" + ?(ЗначениеЗаполнено(КПП), КПП, "000000000")
	                 + "_" + ГодОтчета + "_" + МесяцОтчета
	                 + "_1C_" + МоментВыгрузки + "_" + НомерВыгрузки;
	
	СформированТекстЭлектронногоПредставления = УниверсальнаяВыгрузкаXML(ДвоичныеДанныеФайла, ИмяФайлаПредставления, ПостфиксПредставлений);
	
	Если СформированТекстЭлектронногоПредставления <> Истина Тогда
		ОтобразитьФормуНавигацииПоОшибкам();
		Возврат Неопределено;
	КонецЕсли;
	
	ИмяПакетаДляБанка = ИмяФайлаПредставления + ".zip";
	
	Возврат ИмяПакетаДляБанка;
	
КонецФункции

&НаСервере
Процедура СформироватьФайлЭлектронногоПредставления(ПараметрыВыгрузки, ИмяВременногоФайла)
	
	СтруктураВыгрузки = ИзвлечьСтруктуруXML();
	
	Компоновщик = НовыйКомпоновщикXML(ИмяВременногоФайла);
	
	УстановитьПривилегированныйРежим(Истина);
	
	Компоновщик.ЗаписатьНачалоЭлемента("Файл");
	
	ВывестиАтрибут(Компоновщик, "xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");
	ВывестиАтрибут(Компоновщик, "ИдФайл", ПараметрыВыгрузки.ИдФайл);
	ВывестиАтрибут(Компоновщик, "ВерсПрог", ПараметрыВыгрузки.ВерсПрог);
	ВывестиАтрибут(Компоновщик, "ВерсФорм", ПараметрыВыгрузки.ВерсФорм);
	
	Компоновщик.ЗаписатьНачалоЭлемента("Документ");
	
	ВывестиАтрибут(Компоновщик, "КНД", "0710099");
	ВывестиАтрибут(Компоновщик, "ДатаДок", ПараметрыВыгрузки.ДатаДок);
	ВывестиНеобязательныйАтрибут(Компоновщик, "ДатаУтвОтч", ПараметрыВыгрузки.ДатаУтвОтч);
	ВывестиАтрибут(Компоновщик, "НомКорр", ПараметрыВыгрузки.ВидДок);
	
	ВывестиСведенияОНалогоплательщике(Компоновщик, ПараметрыВыгрузки);
	ВывестиСведенияОПодписанте(Компоновщик, ПараметрыВыгрузки);
	
	ВывестиУзел_Баланс(Компоновщик, ПараметрыВыгрузки, СтруктураВыгрузки);
	ВывестиУзел_ПрибУб(Компоновщик, ПараметрыВыгрузки, СтруктураВыгрузки);
	ВывестиУзел_ОтчетИзмКап(Компоновщик, ПараметрыВыгрузки, СтруктураВыгрузки);
	ВывестиУзел_ДвижениеДен(Компоновщик, ПараметрыВыгрузки, СтруктураВыгрузки);
	ВывестиУзел_ЦелИсп(Компоновщик, ПараметрыВыгрузки, СтруктураВыгрузки);
	ВывестиУзел_ДополнительныеСведения(Компоновщик, ПараметрыВыгрузки, СтруктураВыгрузки);
	
	ВывестиУзел_РасшифровкиОбеспечений(Компоновщик, ПараметрыВыгрузки, СтруктураВыгрузки);
	ВывестиУзел_ЗадолженностьПоКредитамЗаймам(Компоновщик, ПараметрыВыгрузки, СтруктураВыгрузки);
	ВывестиУзел_ЛизингОбязательства(Компоновщик, ПараметрыВыгрузки, СтруктураВыгрузки);
	ВывестиУзел_ДенежныеСредства(Компоновщик, ПараметрыВыгрузки, СтруктураВыгрузки);
	
	ВывестиУзел_ОСВ(Компоновщик, ПараметрыВыгрузки, СтруктураВыгрузки);
	ВывестиУзел_ОСВПоСчетам(Компоновщик, ПараметрыВыгрузки, СтруктураВыгрузки);
	ВывестиУзел_АнализСчетов(Компоновщик, ПараметрыВыгрузки, СтруктураВыгрузки);
	
	ВывестиУзел_БухОтчНО(Компоновщик, ПараметрыВыгрузки);
	
	ВывестиУзел_ОперБанкСч(Компоновщик, ПараметрыВыгрузки);
	
	ВывестиУзел_ПрочДохРасх(Компоновщик, ПараметрыВыгрузки);
	
	ВывестиУзел_РасшФинВлож(Компоновщик, ПараметрыВыгрузки, СтруктураВыгрузки);
	
	ВывестиУзел_СтруктВыр(Компоновщик, ПараметрыВыгрузки);
	
	ВывестиУзел_ПрочиеПоказатели(Компоновщик, ПараметрыВыгрузки);
	
	ВывестиУзел_ДебКредЗадолж(Компоновщик, ПараметрыВыгрузки);
	
	ВывестиУзел_ДеклПрибыль(Компоновщик, ПараметрыВыгрузки);
	
	ВывестиУзел_ДеклНДС(Компоновщик, ПараметрыВыгрузки);
	
	ВывестиУзел_СпрИспОбУплНал(Компоновщик, ПараметрыВыгрузки);
	
	ВывестиУзел_ДопФайлы(Компоновщик, ПараметрыВыгрузки);
	
	Компоновщик.ЗаписатьКонецЭлемента();
	Компоновщик.ЗаписатьКонецЭлемента();
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Компоновщик.Закрыть();
	Компоновщик = Неопределено;
	
КонецПроцедуры

&НаСервере
Функция ИгнорироватьПервыйИнтервал()
	
	Возврат Истина;
	
КонецФункции

#Область ПредставленияОтчетовXLSX

&НаСервере
Функция СформироватьФайлыПредставленийРазделов(ВременныйКаталогПакета, ПостфиксПредставлений)
	
	ПараметрыСохраненияПредставлений = Новый Структура;
	ПараметрыСохраненияПредставлений.Вставить("ИменаФайловРазделов", Новый Массив);
	ПараметрыСохраненияПредставлений.Вставить("ВременныйКаталогПакета", ВременныйКаталогПакета);
	ПараметрыСохраненияПредставлений.Вставить("ПостфиксПредставлений", ПостфиксПредставлений);
	
	ПараметрыСохранения = Новый Структура;
	ПараметрыСохранения.Вставить("Префикс", "BALANS_");
	ПараметрыСохранения.Вставить("АдресСтраницы", АдресСтраницы("1"));
	ПараметрыСохраненияПредставлений.Вставить("Баланс", ПараметрыСохранения);
	
	ПараметрыСохранения = Новый Структура;
	ПараметрыСохранения.Вставить("Префикс", "OFR_");
	ПараметрыСохранения.Вставить("АдресСтраницы", АдресСтраницы("1"));
	ПараметрыСохраненияПредставлений.Вставить("ОФР", ПараметрыСохранения);
	
	ПараметрыСохранения = Новый Структура;
	ПараметрыСохранения.Вставить("Префикс", "OIK_");
	ПараметрыСохранения.Вставить("АдресСтраницы", АдресСтраницы("1"));
	ПараметрыСохраненияПредставлений.Вставить("ОИК", ПараметрыСохранения);
	
	ПараметрыСохранения = Новый Структура;
	ПараметрыСохранения.Вставить("Префикс", "ODDS_");
	ПараметрыСохранения.Вставить("АдресСтраницы", АдресСтраницы("1"));
	ПараметрыСохраненияПредставлений.Вставить("ОДДС", ПараметрыСохранения);
	
	ПараметрыСохранения = Новый Структура;
	ПараметрыСохранения.Вставить("Префикс", "OCIS_");
	ПараметрыСохранения.Вставить("АдресСтраницы", АдресСтраницы("1"));
	ПараметрыСохраненияПредставлений.Вставить("ОЦИС", ПараметрыСохранения);
	
	ПараметрыСохранения = Новый Структура;
	ПараметрыСохранения.Вставить("Префикс", "DP_");
	ПараметрыСохранения.Вставить("АдресСтраницы", АдресСтраницы("1"));
	ПараметрыСохраненияПредставлений.Вставить("ДополнительныеПоказатели", ПараметрыСохранения);
	
	ПараметрыСохранения = Новый Структура;
	ПараметрыСохранения.Вставить("Префикс", "ROP_");
	ПараметрыСохранения.Вставить("АдресСтраницы", АдресСтраницы("1,1,1"));
	ПараметрыСохраненияПредставлений.Вставить("РасшифровкиОбеспеченийПолученные", ПараметрыСохранения);
	
	ПараметрыСохранения = Новый Структура;
	ПараметрыСохранения.Вставить("Префикс", "ROV_");
	ПараметрыСохранения.Вставить("АдресСтраницы", АдресСтраницы("1,2,1"));
	ПараметрыСохраненияПредставлений.Вставить("РасшифровкиОбеспеченийВыданные", ПараметрыСохранения);
	
	ПараметрыСохранения = Новый Структура;
	ПараметрыСохранения.Вставить("Префикс", "ZKZK_");
	ПараметрыСохранения.Вставить("АдресСтраницы", АдресСтраницы("1,1,1"));
	ПараметрыСохраненияПредставлений.Вставить("ЗадолженностьПоКредитамЗаймамКраткосрочная", ПараметрыСохранения);
	
	ПараметрыСохранения = Новый Структура;
	ПараметрыСохранения.Вставить("Префикс", "ZKZD_");
	ПараметрыСохранения.Вставить("АдресСтраницы", АдресСтраницы("1,2,1"));
	ПараметрыСохраненияПредставлений.Вставить("ЗадолженностьПоКредитамЗаймамДолгосрочная", ПараметрыСохранения);
	
	ПараметрыСохранения = Новый Структура;
	ПараметрыСохранения.Вставить("Префикс", "LIZ_");
	ПараметрыСохранения.Вставить("АдресСтраницы", АдресСтраницы("1"));
	ПараметрыСохраненияПредставлений.Вставить("ЛизингОбязательства", ПараметрыСохранения);
	
	ПараметрыСохранения = Новый Структура;
	ПараметрыСохранения.Вставить("Префикс", "ANS_50_");
	ПараметрыСохранения.Вставить("АдресСтраницы", АдресСтраницы("1,1,1"));
	ПараметрыСохраненияПредставлений.Вставить("ДенежныеСредства50", ПараметрыСохранения);
	
	ПараметрыСохранения = Новый Структура;
	ПараметрыСохранения.Вставить("Префикс", "ANS_51_");
	ПараметрыСохранения.Вставить("АдресСтраницы", АдресСтраницы("1,2,1"));
	ПараметрыСохраненияПредставлений.Вставить("ДенежныеСредства51", ПараметрыСохранения);
	
	ПараметрыСохранения = Новый Структура;
	ПараметрыСохранения.Вставить("Префикс", "ANS_52_");
	ПараметрыСохранения.Вставить("АдресСтраницы", АдресСтраницы("1,3,1"));
	ПараметрыСохраненияПредставлений.Вставить("ДенежныеСредства52", ПараметрыСохранения);
	
	ПараметрыСохранения = Новый Структура;
	ПараметрыСохранения.Вставить("Префикс", "ANS_55_");
	ПараметрыСохранения.Вставить("АдресСтраницы", АдресСтраницы("1,4,1"));
	ПараметрыСохраненияПредставлений.Вставить("ДенежныеСредства55", ПараметрыСохранения);
	
	ПараметрыСохранения = Новый Структура;
	ПараметрыСохранения.Вставить("Префикс", "OSV_");
	ПараметрыСохранения.Вставить("АдресСтраницы", АдресСтраницы("1"));
	ПараметрыСохраненияПредставлений.Вставить("ОСВ", ПараметрыСохранения);
	
	ПараметрыСохранения = Новый Структура;
	ПараметрыСохранения.Вставить("Префикс", "OSV_%1_");
	ПараметрыСохранения.Вставить("АдресСтраницы", Неопределено);
	ПараметрыСохраненияПредставлений.Вставить("ОСВПоСчету", ПараметрыСохранения);
	
	ПараметрыСохранения = Новый Структура;
	ПараметрыСохранения.Вставить("Префикс", "ANS_%1_");
	ПараметрыСохранения.Вставить("АдресСтраницы", Неопределено);
	ПараметрыСохраненияПредставлений.Вставить("АнализСчета", ПараметрыСохранения);
	
	ПараметрыСохранения = Новый Структура;
	ПараметрыСохранения.Вставить("Префикс", "DEB_");
	ПараметрыСохранения.Вставить("АдресСтраницы", АдресСтраницы("1,1,1"));
	ПараметрыСохраненияПредставлений.Вставить("Дебиторская", ПараметрыСохранения);
	
	ПараметрыСохранения = Новый Структура;
	ПараметрыСохранения.Вставить("Префикс", "KRED_");
	ПараметрыСохранения.Вставить("АдресСтраницы", АдресСтраницы("1,2,1"));
	ПараметрыСохраненияПредставлений.Вставить("Кредиторская", ПараметрыСохранения);
	
	ПараметрыСохранения = Новый Структура;
	ПараметрыСохранения.Вставить("Префикс", "DOHRAS_");
	ПараметрыСохранения.Вставить("АдресСтраницы", АдресСтраницы("1"));
	ПараметрыСохраненияПредставлений.Вставить("ДоходыРасходы", ПараметрыСохранения);
	
	ПараметрыСохранения = Новый Структура;
	ПараметрыСохранения.Вставить("Префикс", "FINК_");
	ПараметрыСохранения.Вставить("АдресСтраницы", АдресСтраницы("1,1,1"));
	ПараметрыСохраненияПредставлений.Вставить("ФинансовыеВложенияКраткосрочные", ПараметрыСохранения);
	
	ПараметрыСохранения = Новый Структура;
	ПараметрыСохранения.Вставить("Префикс", "FIND_");
	ПараметрыСохранения.Вставить("АдресСтраницы", АдресСтраницы("1,2,1"));
	ПараметрыСохраненияПредставлений.Вставить("ФинансовыеВложенияДолгосрочные", ПараметрыСохранения);
	
	ПараметрыСохранения = Новый Структура;
	ПараметрыСохранения.Вставить("Префикс", "VYRUCH_");
	ПараметрыСохранения.Вставить("АдресСтраницы", АдресСтраницы("1"));
	ПараметрыСохраненияПредставлений.Вставить("СтруктураВыручки", ПараметрыСохранения);
	
	ПараметрыСохранения = Новый Структура;
	ПараметрыСохранения.Вставить("Префикс", "PRPOK_");
	ПараметрыСохранения.Вставить("АдресСтраницы", АдресСтраницы("1"));
	ПараметрыСохраненияПредставлений.Вставить("ПрочиеПоказатели", ПараметрыСохранения);
	
	// Последовательный вывод разделов и сохранение файлов.
	
	ИсходныйРаздел = СтруктураРеквизитовФормы.НаимТекущегоРаздела;
	ИсходныеНомераСтрокМногоуровнегоРаздела = СтруктураРеквизитовФормы.НомерСтраницыТекущегоРаздела;
	
	СписокРазделов = ДанныеФормыВЗначение(мДеревоВыбранныхСтраниц, Тип("ДеревоЗначений"));
	ОбойтиРазделыОтчетности(СписокРазделов, ПараметрыСохраненияПредставлений);
	
	ПоказатьРаздел(ИсходныйРаздел, ИсходныеНомераСтрокМногоуровнегоРаздела);
	
	Возврат ПараметрыСохраненияПредставлений.ИменаФайловРазделов;
	
КонецФункции

Функция АдресСтраницы(СтрокаАдреса)
	
	НомераПоУровню = СтрРазделить(СтрокаАдреса, ",", Ложь);
	Для Инд = 0 ПО НомераПоУровню.ВГраница() Цикл
		НомераПоУровню[Инд] = Число(НомераПоУровню[Инд]);
	КонецЦикла;
	
	Возврат НомераПоУровню;
	
КонецФункции

Процедура ОбойтиРазделыОтчетности(СписокРазделов, ПараметрыСохраненияПредставлений)
	
	Для Каждого СтрокаРаздела Из СписокРазделов.Строки Цикл
		Если СтрокаРаздела.Строки.Количество() <> 0 Тогда
			ОбойтиРазделыОтчетности(СтрокаРаздела, ПараметрыСохраненияПредставлений);
			
		Иначе
			СохранитьПредставлениеОтчетаВXLSX(СтрокаРаздела, ПараметрыСохраненияПредставлений);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура СохранитьПредставлениеОтчетаВXLSX(СтрокаРаздела, ПараметрыСохраненияПредставлений)
	
	Если СтрокаРаздела.ПоказатьСтраницу <> 1 Тогда
		Возврат;
	КонецЕсли;
	
	ФорматСохранения = ТипФайлаТабличногоДокумента.XLSX;
	РасширениеФайла = ".xlsx";
	
	ИмяРаздела = СтрокаРаздела.ИмяСтраницы;
	
	Если ИмяРаздела = "ОСВПоСчету" ИЛИ ИмяРаздела = "АнализСчета" Тогда
		СписокСтраниц = РеквизитФормыВЗначение("СписокСтраниц" + ИмяРаздела);
		Для Каждого СтраницаРаздела Из СписокСтраниц Цикл
			Если НЕ СтраницаРаздела.Включен Тогда
				Продолжить;
			КонецЕсли;
			
			ИндексСтраницы = СписокСтраниц.Индекс(СтраницаРаздела) + 1;
			АдресСтраницы = Новый Массив;
			АдресСтраницы.Добавить(ИндексСтраницы);
			
			ПоказатьРаздел(ИмяРаздела, АдресСтраницы);
			
			ПолныйПрефикс = ПараметрыСохраненияПредставлений[ИмяРаздела].Префикс;
			ПолныйПрефикс = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПолныйПрефикс, СтраницаРаздела.Счет.Код);
			
			ИмяФайлаРаздела = ПараметрыСохраненияПредставлений.ВременныйКаталогПакета
				+ ПолныйПрефикс
				+ ПараметрыСохраненияПредставлений.ПостфиксПредставлений + РасширениеФайла;
			
			ТабличныйДокумент.Записать(ИмяФайлаРаздела, ФорматСохранения);
			ПараметрыСохраненияПредставлений.ИменаФайловРазделов.Добавить(ИмяФайлаРаздела);
			
		КонецЦикла;
		
	ИначеЕсли ПараметрыСохраненияПредставлений.Свойство(ИмяРаздела) Тогда
		АдресСтраницы = ПараметрыСохраненияПредставлений[ИмяРаздела].АдресСтраницы;
		ПоказатьРаздел(ИмяРаздела, АдресСтраницы);
		
		ИмяФайлаРаздела = ПараметрыСохраненияПредставлений.ВременныйКаталогПакета
			+ ПараметрыСохраненияПредставлений[ИмяРаздела].Префикс
			+ ПараметрыСохраненияПредставлений.ПостфиксПредставлений + РасширениеФайла;
		
		ТабличныйДокумент.Записать(ИмяФайлаРаздела, ФорматСохранения);
		ПараметрыСохраненияПредставлений.ИменаФайловРазделов.Добавить(ИмяФайлаРаздела);
		
	ИначеЕсли ИмяРаздела = "ФНС" ИЛИ ИмяРаздела = "ДополнительныеФайлы" ИЛИ ИмяРаздела = "Титульный"
	      ИЛИ ИмяРаздела = "Операции51" ИЛИ ИмяРаздела = "Операции52" ИЛИ ИмяРаздела = "Операции55" Тогда
		// Выгрузка представления раздела не требуется.
		
	Иначе
		ВызватьИсключение "Попытка вывести раздел с идентификатором " + ИмяРаздела;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

&НаСервере
Функция ДействуетСВерсииФормата(Знач НомерВерсии)
	
	ВерсияОтчета = СтруктураРеквизитовФормы.ВерсияФормата;
	
	НомерВерсии  = Число(СтрЗаменить(НомерВерсии, ".", ""));
	ВерсияОтчета = Число(СтрЗаменить(ВерсияОтчета, ".", ""));
	
	Возврат (ВерсияОтчета >= НомерВерсии);
	
КонецФункции

&НаСервере
Функция НаименованиеОрганизации()
	
	СтрокаСведений = "ИННЮЛ, КППЮЛ, НаимЮЛПол, НаимЮЛСокр, ФИОРук, ФИО";
	СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(
		СтруктураРеквизитовФормы.Организация, ДатаПодписи, СтрокаСведений);
		
	Если СтруктураРеквизитовФормы.ИП Тогда
		НаименованиеОрганизации = СокрЛП(СведенияОбОрганизации.ФИО);
	Иначе
		НаименованиеОрганизации = СокрЛП(СведенияОбОрганизации.НаимЮлПол);
	КонецЕсли;
	
	Возврат НаименованиеОрганизации;
	
КонецФункции

&НаСервере
Процедура УстановитьСтатусЗаполненияВПараметрахОтчета()
	
	ИмяРаздела = СтруктураРеквизитовФормы.НаимТекущегоРаздела;
	АдресСтраницыОтчета = СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела;
	
	СтруктураРаздела = мСтруктураМногоуровневыхРазделов[ИмяРаздела];
	ИмяКорневогоРаздела = Неопределено;
	СтруктураРаздела.Свойство("КорневойРаздел", ИмяКорневогоРаздела);
	ИмяКорневогоРаздела = ?(ИмяКорневогоРаздела = Неопределено, ИмяРаздела, ИмяКорневогоРаздела);
	
	ДеревоДанныхРаздела = ПолучитьИзВременногоХранилища(
		СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяКорневогоРаздела]);
	
	ДанныеОтчета = ДеревоДанныхРаздела;
	Для Каждого НомерСтроки Из АдресСтраницыОтчета Цикл
		ДанныеОтчета = ДанныеОтчета.Строки[НомерСтроки - 1];
	КонецЦикла;
	
	СохранитьДанныеРаздела(ИмяРаздела, ДанныеОтчета);
	
	ДанныеОтчета.Параметры.СтатусЗаполнения = СтатусЗаполненияОтчета;
	
	СтруктураРеквизитовФормы.Вставить("АдресВоВрХранилищеДеревоДанных" + ИмяКорневогоРаздела,
		ПоместитьВоВременноеХранилище(ДеревоДанныхРаздела, УникальныйИдентификатор));
	
КонецПроцедуры

#КонецОбласти
