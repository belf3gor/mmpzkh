
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	Организация              = Параметры.Организация;
	мДатаНачалаПериодаОтчета = Параметры.мДатаНачалаПериодаОтчета;
	мДатаКонцаПериодаОтчета  = Параметры.мДатаКонцаПериодаОтчета;
	мСкопированаФорма        = Параметры.мСкопированаФорма;
	мСохраненныйДок          = Параметры.мСохраненныйДок;
	
	ИсточникОтчета = СтрЗаменить(СтрЗаменить(Строка(ЭтаФорма.ИмяФормы), "Отчет.", ""), ".Форма.ОсновнаяФорма", "");
	
	ЗначениеВДанныеФормы(Отчеты[ИсточникОтчета].ТаблицаФормОтчета(), мТаблицаФормОтчета);
	
	УчетПоВсемОрганизациям = РегламентированнаяОтчетность.ПолучитьПризнакУчетаПоВсемОрганизациям();
	Элементы.Организация.ТолькоПросмотр = НЕ УчетПоВсемОрганизациям;
	
	ОргПоУмолчанию = РегламентированнаяОтчетность.ПолучитьОрганизациюПоУмолчанию();
	
	Если НЕ ЗначениеЗаполнено(Организация) И ЗначениеЗаполнено(ОргПоУмолчанию) Тогда
		Организация = ОргПоУмолчанию;
	КонецЕсли;
	
	Если РегламентированнаяОтчетностьВызовСервера.ИспользуетсяОднаОрганизация() Тогда
		ОргПоУмолчанию = ОбщегоНазначения.ОбщийМодуль("Справочники.Организации").ОрганизацияПоУмолчанию();
		Организация = ОргПоУмолчанию;
		Элементы.НадписьОрганизация.Видимость = Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(мДатаКонцаПериодаОтчета) Тогда
		мДатаКонцаПериодаОтчета = КонецМесяца(ДобавитьМесяц(КонецМесяца(ТекущаяДатаСеанса()), -1));
	КонецЕсли;
	
	ИзменитьПериод(ЭтаФорма, 0);
	
	ОписаниеДокумента = НСтр("ru = 'Форма предоставления финансовой отчетности в ПАО СБЕРБАНК'");
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ПодключитьОбработчикОжидания("ЗаполнитьБанкПоУмолчанию", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ВыбратьПериод(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("ОтображатьВыборГода", Истина);
	ДопПараметры.Вставить("ОтображатьМесяцы", Истина);
	
	ПараметрыВыбора = Новый Структура;
	ПараметрыВыбора.Вставить("НачалоПериода", НачалоМесяца(мДатаКонцаПериодаОтчета));
	ПараметрыВыбора.Вставить("КонецПериода", КонецМесяца(мДатаКонцаПериодаОтчета));
	ПараметрыВыбора.Вставить("ДополнительныеПараметры", ДопПараметры);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыбратьПериодЗавершение", ЭтотОбъект);
	
	ОткрытьФорму("Обработка.ОбщиеОбъектыРеглОтчетности.Форма.ВыборОтчетногоПериода", ПараметрыВыбора,
	Элементы.ПолеВыбораПериодичностиПоказаПериода.КнопкаВыбора, , , , ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПредыдущийПериод(Команда)
	
	ИзменитьПериод(ЭтаФорма, -1);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСледующийПериод(Команда)
	
	ИзменитьПериод(ЭтаФорма, 1);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуОтчета(Команда)
	
	Если мСкопированаФорма <> Неопределено Тогда
		// Документ был скопирован.
		// Проверяем соответствие форм.
		Если мВыбраннаяФорма <> мСкопированаФорма Тогда
			
			ПоказатьПредупреждение(,НСтр("ru='Форма отчета изменилась, копирование невозможно!'"));
			Возврат;
			
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		
		Сообщение = Новый СообщениеПользователю;
		
		Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='%1'"), РегламентированнаяОтчетностьКлиент.ОсновнаяФормаОрганизацияНеЗаполненаВывестиТекст());
		
		Сообщение.Сообщить();
		
		Возврат;
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Банк) Тогда
		
		Сообщение = Новый СообщениеПользователю;
		
		Сообщение.Текст = НСтр("ru='Не выбран банк'");
		
		Сообщение.Сообщить();
		
		Возврат;
		
	КонецЕсли;
	
	СистемнаяИнформация = Новый СистемнаяИнформация;
	ПараметрыКлиента = Новый Структура;
	ПараметрыКлиента.Вставить("ТипПлатформы", Строка(СистемнаяИнформация.ТипПлатформы));
	ПараметрыКлиента.Вставить("ВерсияОС", СистемнаяИнформация.ВерсияОС);

	ВозможнаОтправка = ОтчетностьВБанкиСлужебныйВызовСервера.ВозможнаОтправкаОтчета(Организация, Банк, ПараметрыКлиента);
	
	Если НЕ ВозможнаОтправка Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("мДатаНачалаПериодаОтчета", мДатаНачалаПериодаОтчета);
	ПараметрыФормы.Вставить("мСохраненныйДок",          мСохраненныйДок);
	ПараметрыФормы.Вставить("мСкопированаФорма",        мСкопированаФорма);
	ПараметрыФормы.Вставить("мДатаКонцаПериодаОтчета",  мДатаКонцаПериодаОтчета);
	ПараметрыФормы.Вставить("Организация",              Организация);
	ПараметрыФормы.Вставить("мВыбраннаяФорма",          мВыбраннаяФорма);
	ПараметрыФормы.Вставить("ДоступенМеханизмПечатиРеглОтчетностиСДвухмернымШтрихкодомPDF417",
		РегламентированнаяОтчетностьКлиент.ДоступенМеханизмПечатиРеглОтчетностиСДвухмернымШтрихкодомPDF417());
	
	ПараметрыФормы.Вставить("Банк", Банк);
	
	Форма = ОткрытьФорму(СтрЗаменить(ЭтаФорма.ИмяФормы, "ОсновнаяФорма", "") + мВыбраннаяФорма, ПараметрыФормы, , Истина);
	
	Если мВыбраннаяФорма = "ФормаОтчета2011Кв4" Тогда
		Форма.ОткрытьУведомление();
	КонецЕсли;
	
	Закрыть();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ПодключитьОбработчикОжидания("ЗаполнитьБанкПоУмолчанию", 0.1, Истина);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ЗаполнитьБанкПоУмолчанию()

	Если ЗначениеЗаполнено(Организация) Тогда
		СистемнаяИнформация = Новый СистемнаяИнформация;
		ПараметрыКлиента = Новый Структура;
		ПараметрыКлиента.Вставить("ТипПлатформы", Строка(СистемнаяИнформация.ТипПлатформы));
		ПараметрыКлиента.Вставить("ВерсияОС", СистемнаяИнформация.ВерсияОС);
		БанкПоУмолчанию = БанкПоУмолчанию(Организация, ПараметрыКлиента);
		Если ЗначениеЗаполнено(БанкПоУмолчанию) Тогда
			Банк = БанкПоУмолчанию;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ИзменитьПериод(Форма, Шаг)
	
	Форма.мДатаКонцаПериодаОтчета = КонецМесяца(ДобавитьМесяц(Форма.мДатаКонцаПериодаОтчета, Шаг));
	Форма.мДатаНачалаПериодаОтчета = НачалоГода(Форма.мДатаКонцаПериодаОтчета);
	
	Форма.ПолеВыбораПериодичностиПоказаПериода = Формат(Форма.мДатаКонцаПериодаОтчета, "ДФ='ММММ гггг'") + " г.";
	
	РегламентированнаяОтчетностьКлиентСервер.ВыборФормыРегламентированногоОтчетаПоУмолчанию(Форма);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьПериодЗавершение(РезультатВыбора, ДопПараметры) Экспорт
	
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	мДатаНачалаПериодаОтчета = РезультатВыбора.НачалоПериода;
	мДатаКонцаПериодаОтчета  = РезультатВыбора.КонецПериода;
	
	ИзменитьПериод(ЭтаФорма, 0);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция БанкПоУмолчанию(Знач Организация, Знач ПараметрыКлиента)
	
	ТаблицаБанков = ОтчетностьВБанкиСлужебный.БанкиРасчетныхСчетовОрганизации(Организация);
	
	МассивБИКов = ТаблицаБанков.ВыгрузитьКолонку("БИК");
	
	Если МассивБИКов.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ВремФайл = ПолучитьИмяВременногоФайла();
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.ОткрытьФайл(ВремФайл);
	ЗаписьJSON.ЗаписатьНачалоОбъекта();
	ЗаписьJSON.ЗаписатьИмяСвойства("bics");
	ЗаписьJSON.ЗаписатьНачалоМассива();
	Для Каждого БИК ИЗ МассивБИКов Цикл
		ЗаписьJSON.ЗаписатьЗначение(БИК);
	КонецЦикла;
	ЗаписьJSON.ЗаписатьКонецМассива();
	
	ОтчетностьВБанкиСлужебный.ДобавитьДополнительныеПараметры(ЗаписьJSON, ПараметрыКлиента);
	
	ЗаписьJSON.ЗаписатьКонецОбъекта();
	ЗаписьJSON.Закрыть();
	
	Данные = Новый ДвоичныеДанные(ВремФайл);
	
	Попытка
		УдалитьФайлы(ВремФайл);
	Исключение
		ВидОперации = НСтр("ru = 'Удаление временного файла.'");
		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ОтчетностьВБанкиСлужебныйВызовСервера.ОбработатьОшибку(ВидОперации, ПодробноеПредставлениеОшибки);
	КонецПопытки;
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Content-Type", "application/json");
	
	Результат = ОтчетностьВБанкиСлужебный.ОтправитьЗапросНаСервер(
		"https://reportbank.1c.ru", "/api/rest/bank/getAvailable/", Заголовки, Данные, Истина, 15);
	
	Успех = Ложь;
	ТекстСообщения = ""; ТекстОшибки = "";
	
	Если Результат.Статус Тогда
		ДанныеОтвета = ОтчетностьВБанкиСлужебный.ДанныеИзСтрокиJSON(Результат.Тело);
		Если НЕ ДанныеОтвета = Неопределено Тогда
			МассивДоступныхБИКов = ДанныеОтвета.available;
			Если МассивДоступныхБИКов.Количество() = 1 Тогда
				БИКПоУмолчанию = МассивДоступныхБИКов.Получить(0);
				ТекСтрока = ТаблицаБанков.Найти(БИКПоУмолчанию, "БИК");
				Если ТекСтрока = Неопределено Тогда
					Возврат Неопределено;
				Иначе
					Возврат ТекСтрока.Банк;
				КонецЕсли;
			Иначе
				Возврат Неопределено;
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		Если Результат.КодСостояния = 404 Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Результат.Тело) Тогда
			ДанныеОтвета = ОтчетностьВБанкиСлужебный.ДанныеИзСтрокиJSON(Результат.Тело);
			Если НЕ ДанныеОтвета = Неопределено Тогда
				Если ДанныеОтвета.Свойство("errorText") Тогда
					ТекстСообщения = ДанныеОтвета.errorText;
				Иначе
					ТекстСообщения = НСтр("ru = 'Получена неизвестная ошибка с сервиса Бизнес-сеть.'");
				КонецЕсли;
			КонецЕсли;
			ТекстОшибки = НСтр("ru = 'Ошибка получения данных с сервиса Бизнес-сеть.
								|Код состояния: %1
								|%2'");
			ТекстОшибки = СтрШаблон(ТекстОшибки, Результат.КодСостояния, Результат.Тело);
		Иначе
			ТекстСообщения = Результат.СообщениеОбОшибке;
			ТекстОшибки = НСтр("ru = 'Ошибка получения данных с сервиса Бизнес-сеть.
								|Код состояния: %1'");
		КонецЕсли;
		ВидОперации = НСтр("ru = 'Получение списка банков с сервиса Бизнес-сеть.'");
		ОтчетностьВБанкиСлужебныйВызовСервера.ОбработатьОшибку(ВидОперации, ТекстОшибки, ТекстСообщения);
		
	КонецЕсли;
	
КонецФункции

#КонецОбласти
