#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОписаниеПеременных


Перем мПолноеИмяФайлаВнешнейОбработки Экспорт; // для варианта внешнего отчета
Перем мВерсияОтчета Экспорт; // для варианта внешнего отчета


// Структура реквизитов формы отчета.
Перем СтруктураРеквизитовФормы;

// Массивы кодов из макета Списки.
Перем СписокКодовДеятельности, СписокКодовПродукции;
// Структура адреса из схемы xsd, если отличается от стандартной.
Перем ОписаниеСтруктурыАдресаИзОтчета;
// Признак режима отладки.
Перем РежимОтладки;
// Предельное количество ошибок, по достижении которого дальнейшая проверка прекращается.
Перем МаксимальноеКоличествоОшибок, ТекущееКоличествоОшибок;
Перем МаксимальноеКоличествоПредупреждений, ТекущееКоличествоПредупреждений;
// Дата начала и конца отчета.
Перем ДатаНачалаОтчета, ДатаКонцаОтчета;
// Границы дат по xsd.
Перем НижняяГраницаДатыПоXSD, ВерхняяГраницаДатыПоXSD;

// Данные обособленных подразделений разделов.
Перем ДанныеОП;
// Данные обособленных подразделений разделов при печати.
Перем ДанныеОП_Декларация;

// Справочники.
Перем СправочникиОтчета;

// Документ.РегламентированныйОтчет к которому привязан отчет.
Перем ДокументСсылкаАлкоОтчет;

// Структура получаемая функцией ПолучитьСтруктуруСервисРегистров()
// модуля формы отчета.
Перем СтруктураСервисРегистров;

// Объект метаданных отчета.
Перем ОбъектЭтогоОтчета;

// Переменные, полученные из реквизитов формы отчета.
Перем СтруктураДанныхТитульный, мДеревоВыбранныхСтраниц, ДополнительныеДанные, 
	  НомерКорректировки, ДатаПодписи;

// Переменные, используемые при проверке и выгрузке отчета.
Перем ДеревоВыгрузки, ПараметрыВыгрузки, СтатусПроверки, ИмяФормыОбъекта;

// Переменные, полученные из реквизитов формы отчета.
Перем ТаблицаСтраницыЛицензии, ТаблицаСтраницыДекларация;

// Вспомогательные таблицы значений, отражающие состав ресурсов регистров сведений
// по группам.
Перем ТабП0000000002, ТабП0000100003;

// Таблица значений, в которую записываются найденные при проверке выгрузки ошибки.
Перем ТаблицаСообщений; 

// Таблица значений, в который записываются информационные сообщения при проверке выгрузки ошибки.
Перем ТаблицаСообщенийДляСведения;

// Данные производителей-импортеров и счетчик, который присваивается как ИД производителя-импортера.
Перем СчетчикИДКонтрагентов, СчетчикИДЛицензий;

// Данные движений продукции с привязкой к производителю-импортеру.
Перем ДанныеДвижений;

// Вспомогательные переменные.
Перем ВсегоСтрокПоДекларации, НужноОбработатьСтрок, ОбработаноСтрок, КолСтрокПриПроверкеЗаполнения;

// Содержит процент выполнения процесса проверки или выгрузки, который соответсвует проверке заполнения разделов.
// Для процесса проверки с ошибками - 100%, проверка без ошибок - 90%, при выгрузке без ошибок - 84%.
Перем ПроцентБезЗавершающейПроверкиДанных, ПроцентБезКонвертацииАрхивации;

// Адрес временного хранилища для обмена вспомогательной информацией (процент выполнения, этап).
Перем ВспомогательныйАдрес;
// Содержит шаг информирования о проценте выполнения процесса.
Перем ШагИнформирования;

// Признак отсутствия ошибок при проверке.
Перем НетОшибокПроверки;

// Версия БСП.
Перем ВерсияБСПЧислом;


#КонецОбласти


#Область ПрограммныйИнтерфейс


#Область ОбработкаПриЗаписиИзФормЗаписиРегистров

// В зависимости от имени регистра обрабатывает поля ресурсов записи и 
// вычисляет значения реквизитов при необходимости.
//
// Параметры:
//
//	 	ИмяРегистра 				- Строка - Имя регистра, запись которого обрабатывается.
// 		Запись 						- Запись регистра сведений	- Запись, которая обрабатывается.
//
Процедура ОбработкаЗаписи(ИмяРегистра, Запись, ВышеБРО_1_1_11_0 = Неопределено) Экспорт
	
	Если ВышеБРО_1_1_11_0 = Неопределено Тогда
	    ВышеБРО_1_1_11_0 = РегламентированнаяОтчетностьАЛКОВызовСервера.СравнениеВерсииПодсистемы(
													"РегламентированнаяОтчетность", "1.1.11.0");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Запись.Документ) И ВышеБРО_1_1_11_0 Тогда	
		Запись.Организация = Запись.Документ.Организация;	
	КонецЕсли; 
	
	Если ИмяРегистра = "СведенияРеглОтчетАлкоПрил18Декларация" Тогда
		
		Запись.П000010000301 = ?(ЗначениеЗаполнено(Запись.П000010000301), 
								СокрЛП(Запись.П000010000301), "Фармацевтическая субстанция спирта этилового (этанол)");		
		Запись.П000010000302 = ?(ЗначениеЗаполнено(Запись.П000010000302), 
								СокрЛП(Запись.П000010000302), "101");
		
		КодПродукции = Запись.П000010000302;
		
		// Гарантируем отсутствие значения Неопределено для числовых ресурсов.
		Запись.П000010000303 = ?(ЗначениеЗаполнено(Запись.П000010000303), Запись.П000010000303, 0);
		Запись.П000010000312 = ?(ЗначениеЗаполнено(Запись.П000010000312), Запись.П000010000312, 0);
		Запись.П000010000316 = ?(ЗначениеЗаполнено(Запись.П000010000316), Запись.П000010000316, 0);
		
		ПроцентСпирта = Запись.П000010000303;
		
		ХешИдКодПродПроцСпирта = РегламентированнаяОтчетностьАЛКО.ХешИдКодПродПроцСпирта(КодПродукции, ПроцентСпирта);				
		Запись.ХешИдКодПродПроцСпирта = ХешИдКодПродПроцСпирта;
		
		// Обработка получателя.
		
		// Получатель
		Запись.П000010000304 = СокрЛП(Запись.П000010000304);
		Наименование = Запись.П000010000304;
		
		Запись.П000010000306 = СтрЗаменить(Запись.П000010000306, " ", "");
		ИНН = Запись.П000010000306;
		
		Запись.П000010000307 = СтрЗаменить(Запись.П000010000307, " ", "");
		КПП = Запись.П000010000307;
		
		Если НЕ ЗначениеЗаполнено(Запись.Получатель) Тогда		
			Запись.Получатель = ОпределитьПолучателя(ИНН, КПП, Наименование);
			Запись.П000010000304 = Наименование;
			Запись.П000010000307 = КПП;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Запись.Получатель) Тогда
			
			// Заполним адрес если нет представления адреса.
			// Если есть - адресные данные XML либо введены в форме записи регистра,
			// либо при импорте данных старого формата формы будут импортированы
			// из Дополнительных данных страниц отчета.
			Если НЕ (ЗначениеЗаполнено(Запись.П000010000305) И ЗначениеЗаполнено(Запись.П000010000305XML)
				     И УправлениеКонтактнойИнформациейКлиентСервер.ЭтоКонтактнаяИнформацияВXML(Запись.П000010000305XML)) Тогда
			
				// Нужно определить адрес.
				ПредставлениеАдреса = Неопределено;
				Если НЕ (ЗначениеЗаполнено(Запись.П000010000305XML) 
						И УправлениеКонтактнойИнформациейКлиентСервер.ЭтоКонтактнаяИнформацияВXML(Запись.П000010000305XML)) Тогда
						
					СписокВидовКонтактнойИнформации = Новый СписокЗначений;
					СписокВидовКонтактнойИнформации.Добавить("ЮрАдресКонтрагента");
					СписокВидовКонтактнойИнформации.Добавить("ФактАдресКонтрагента");
					СписокВидовКонтактнойИнформации.Добавить("ПочтовыйАдресКонтрагента");
					СписокВидовКонтактнойИнформации.Добавить("ЮрАдресОрганизации");
					СписокВидовКонтактнойИнформации.Добавить("АдресПоПропискеФизическиеЛица");
					СписокВидовКонтактнойИнформации.Добавить("АдресМестаПроживанияФизическиеЛица");
					
					АдресXML = РегламентированнаяОтчетностьАЛКО.ПолучитьАдресXMLОбъекта(Запись.Получатель, ПредставлениеАдреса, 
										СписокВидовКонтактнойИнформации, Истина);
											
				    Запись.П000010000305XML = АдресXML;
					
				Иначе
					ПредставлениеАдреса = УправлениеКонтактнойИнформацией.ПредставлениеКонтактнойИнформации(Запись.П000010000305XML);
				КонецЕсли; 
													
				Запись.П000010000305 = ПредставлениеАдреса;
				
			КонецЕсли; 
						
		КонецЕсли;
		
		// Лицензия
		Запись.П000010000308 = СокрЛП(Запись.П000010000308);
		ВидДеятельностиОКВЭД = Запись.П000010000308;
		
		ПредставлениеАдреса =  СокрЛП(Запись.П000010000305);
		
		СтруктураСведений = Новый Структура;
		
		СтруктураСведений.Вставить("Наименование", 			Наименование);
		СтруктураСведений.Вставить("ИНН", 					ИНН);
		СтруктураСведений.Вставить("КПП", 					КПП);
		СтруктураСведений.Вставить("ПредставлениеАдреса", 	ПредставлениеАдреса);
		СтруктураСведений.Вставить("Номер", 				ВидДеятельностиОКВЭД);
		СтруктураСведений.Вставить("Серия", 				Неопределено);
		СтруктураСведений.Вставить("ДатаВыдачи", 			Неопределено);
		СтруктураСведений.Вставить("ДатаОкончания", 		Неопределено);
		СтруктураСведений.Вставить("КемВыдана", 			Неопределено);
		
		СтруктураХешИдПолучателя = РегламентированнаяОтчетностьАЛКО.ПолучитьВсеИдПоставщика(СтруктураСведений);
		
		ЗаполнитьЗначенияСвойств(Запись, СтруктураХешИдПолучателя);
				
	КонецЕсли;
		
	Если ИмяРегистра = "СведенияРеглОтчетАлкоЛицензии" Тогда
		
	    Запись.П000000000201 = СокрЛП(Запись.П000000000201);
		Запись.П000000000202 = СокрЛП(Запись.П000000000202);
	    Запись.П000000000203 = СокрЛП(Запись.П000000000203);
		Запись.П000000000204 = СокрЛП(Запись.П000000000204);
		Запись.П000000000205 = СокрЛП(Запись.П000000000205);
		Запись.П000000000206 = СокрЛП(Запись.П000000000206);
		Запись.П000000000207 = СокрЛП(Запись.П000000000207);
		
	КонецЕсли; 
	
КонецПроцедуры

Функция ОпределитьПолучателя(ИНН, КПП, ПолноеНаименование) Экспорт
		
	Возврат  РегламентированнаяОтчетностьАЛКО.ОпределитьКонтрагентаИзЛицензийПоставщиковАЛКО(
														ИНН, КПП, ПолноеНаименование, Неопределено);	
КонецФункции

#КонецОбласти


#Область Расчет

// Производит расчет "по строке" полей ресурсов Записи. 
//
// Параметры:
//
//	 	ИдГруппы 				- Строка - Имя табличной группы, к которой относится регистр сведений.
// 		Запись 					- Запись регистра сведений	- Запись, которая обрабатывается.
//
Процедура Расчет(ИдГруппы, Запись) Экспорт
	
	// Для 18-й декларации нечего расчитывать.
	// Но процедура нужна, поскольку используется в стандартном механизме.
	Возврат;
	
КонецПроцедуры
	
#КонецОбласти 


#КонецОбласти


#Область СлужебныеПроцедурыИФункции


#Область Служебные

Процедура СообщитьОбОшибкеЗаполнения(ДокументСсылка,
		ТаблицаСообщенийОбОшибках, СтатусПроверкиОтчета = Ложь, СтруктураОшибки,
		МаксимальноеКоличествоОшибок = Неопределено, ТекущееКоличествоОшибок = Неопределено)
		
	РегламентированнаяОтчетностьАЛКО.СообщитьОбОшибкеЗаполнения(
		ДокументСсылка, ТаблицаСообщенийОбОшибках, СтатусПроверкиОтчета, СтруктураОшибки, РежимОтладки,
		МаксимальноеКоличествоОшибок, ТекущееКоличествоОшибок);

КонецПроцедуры

Функция ПолучитьИмяРегистраСведений(ИдГруппы)
	
	Возврат РегламентированнаяОтчетностьАЛКОКлиентСервер.ПолучитьИмяРегистраСведенийАЛКО(ИдГруппы, СтруктураРеквизитовФормы);
	
КонецФункции

Функция ПолучитьКоличествоСтрокПоСтраницеГруппы(ИдГруппы, ИндексСтраницы, БезПомеченныхНаУдаление = Истина)
	
	ИмяРегистраСведений = ПолучитьИмяРегистраСведений(ИдГруппы);
	СервисРегистровГруппы = СтруктураСервисРегистров[ИмяРегистраСведений];
		 
	Возврат РегламентированнаяОтчетностьАЛКОКлиентСервер.ПолучитьКоличествоСтрокПоСтраницеИзСервисРегистровГруппы(
						СервисРегистровГруппы, ИндексСтраницы, БезПомеченныхНаУдаление);
	
КонецФункции

Функция ПолучитьКоличествоСтрокПоГруппе(ИдГруппы, БезПомеченныхНаУдаление = Истина)
	
	ИмяРегистраСведений = ПолучитьИмяРегистраСведений(ИдГруппы);
	СервисРегистровГруппы = СтруктураСервисРегистров[ИмяРегистраСведений];			
	
	Возврат РегламентированнаяОтчетностьАЛКОКлиентСервер.ПолучитьКоличествоСтрокПоГруппеИзСервисРегистровГруппы(
						СервисРегистровГруппы, БезПомеченныхНаУдаление);
	
КонецФункции

Функция ИзвлечьСтруктуруXML()

	Возврат РегламентированнаяОтчетностьАЛКО.ИзвлечьСтруктуруXMLАЛКО(ДатаКонцаОтчета, ИмяФормыОбъекта, ОбъектЭтогоОтчета);
		
КонецФункции
#КонецОбласти 


#Область ОбработкаПриЗаполнении

Процедура ОбработкаСтрокиТаблицыСтарогоФормата(ИмяРегистра, СтрокаТЗ, ВышеБРО_1_1_11_0 = Неопределено) Экспорт
	
	ОбработкаЗаписи(ИмяРегистра, СтрокаТЗ, ВышеБРО_1_1_11_0);

КонецПроцедуры

#КонецОбласти


#Область ПроверитьВыгрузку 

Функция ПроверитьЗаполнениеТитульный(СтатусПроверки)
	
	СтруктураПараметров = Новый Структура;
	
	СтруктураПараметров.Вставить("ОписаниеСтруктурыАдресаИзОтчета", ОписаниеСтруктурыАдресаИзОтчета);
	
	СтруктураПараметров.Вставить("МаксимальноеКоличествоОшибок", МаксимальноеКоличествоОшибок);
	СтруктураПараметров.Вставить("ТекущееКоличествоОшибок", ТекущееКоличествоОшибок);
	СтруктураПараметров.Вставить("МаксимальноеКоличествоПредупреждений", МаксимальноеКоличествоПредупреждений);
	СтруктураПараметров.Вставить("ТекущееКоличествоПредупреждений", ТекущееКоличествоПредупреждений);
	
	Результат = РегламентированнаяОтчетностьАЛКО.ВерноеЗаполнениеТитульный(
								ДокументСсылкаАлкоОтчет, ТаблицаСообщений, ТаблицаСообщенийДляСведения, 
								СтатусПроверки, ПараметрыВыгрузки, СтруктураПараметров, РежимОтладки);
								
	СтруктураПараметров.Свойство("МаксимальноеКоличествоОшибок", МаксимальноеКоличествоОшибок);
	СтруктураПараметров.Свойство("ТекущееКоличествоОшибок", ТекущееКоличествоОшибок);
	СтруктураПараметров.Свойство("МаксимальноеКоличествоПредупреждений", МаксимальноеКоличествоПредупреждений);
	СтруктураПараметров.Свойство("ТекущееКоличествоПредупреждений", ТекущееКоличествоПредупреждений);
			
	Возврат Результат;
		
КонецФункции

Процедура ПроверитьЗаполнениеДекларация(СтатусПроверки)
	
	ИмяРаздела = "Декларация";
	СтрВКакомРазделе = "В разделе Декларация";
	ПоказательОП = "ОбособленноеПодразделение";
	
	// Раздел Декларация может не заполняться.
	// Необходимость проверки определяется переменной ЕстьАктивныеСтрокиВТаблице.
	ИдГруппы = СтруктураРеквизитовФормы.мИдГруппы12;
		
	ДанныеРаздела = ТаблицаСтраницыДекларация;
	
	ИмяРегистраСведений = ПолучитьИмяРегистраСведений(ИдГруппы);
	СервисРегистров = СтруктураСервисРегистров[ИмяРегистраСведений];
	
	ДанныеОП_Декларация = ДанныеОП["Декларация"];
		
	// Инициация структуры Контрагентов.	
	СчетчикИДКонтрагентов = 0;
	СчетчикИДЛицензий = 0;
	
	НомерЛиста = 0;
	Для Каждого ЛистРаздела Из ДанныеРаздела Цикл
		
		НомерЛиста = НомерЛиста + 1;

		СтруктураСведенийПроверки = Новый Структура;
		СтруктураСведенийПроверки.Вставить("ПараметрыВыгрузки", ПараметрыВыгрузки);
		СтруктураСведенийПроверки.Вставить("ИмяРаздела", ИмяРаздела);
		СтруктураСведенийПроверки.Вставить("СтрВКакомРазделе", СтрВКакомРазделе);
		СтруктураСведенийПроверки.Вставить("НомерЛиста", НомерЛиста);
		СтруктураСведенийПроверки.Вставить("ЛистРаздела", ЛистРаздела);

		// Раздел 1 не обязателен к заполнению, но если есть заполненные строки при незаполненном ОП - нужно выдать ошибку.
		КолАктивныхСтрокНаСтранице = ПолучитьКоличествоСтрокПоСтраницеГруппы(ИдГруппы, НомерЛиста
			- 1, Истина);
		ЕстьАктивныеСтрокиВТаблице = (КолАктивныхСтрокНаСтранице > 0);

		СтруктураСведенийПроверки.Вставить("ПроверятьНаПустоту", ЕстьАктивныеСтрокиВТаблице);

		СтруктураСведенийПроверки.Вставить("ОписаниеСтруктурыАдресаИзОтчета", ОписаниеСтруктурыАдресаИзОтчета);
		
		СтруктураСведенийПроверки.Вставить("МаксимальноеКоличествоОшибок", МаксимальноеКоличествоОшибок);
		СтруктураСведенийПроверки.Вставить("ТекущееКоличествоОшибок", ТекущееКоличествоОшибок);
		СтруктураСведенийПроверки.Вставить("МаксимальноеКоличествоПредупреждений", МаксимальноеКоличествоПредупреждений);
		СтруктураСведенийПроверки.Вставить("ТекущееКоличествоПредупреждений", ТекущееКоличествоПредупреждений);
	
		СведенияОбОП = Неопределено;

		РегламентированнаяОтчетностьАЛКО.ВерноеЗаполнениеОП(
					ДокументСсылкаАлкоОтчет, ТаблицаСообщений, ТаблицаСообщенийДляСведения, СтатусПроверки, 
					СтруктураСведенийПроверки, СведенияОбОП, РежимОтладки);

		СтруктураСведенийПроверки.Свойство("МаксимальноеКоличествоОшибок", МаксимальноеКоличествоОшибок);
		СтруктураСведенийПроверки.Свойство("ТекущееКоличествоОшибок", ТекущееКоличествоОшибок);
		СтруктураСведенийПроверки.Свойство("МаксимальноеКоличествоПредупреждений", МаксимальноеКоличествоПредупреждений);
		СтруктураСведенийПроверки.Свойство("ТекущееКоличествоПредупреждений", ТекущееКоличествоПредупреждений);
		
		СтрокаГде = РегламентированнаяОтчетностьАЛКО.СтрокаГдеСообщенийОбОшибках(СтрВКакомРазделе, НомерЛиста, Неопределено, Неопределено, РежимОтладки);

		ИндексСтраницыРегистраДекларация = СервисРегистров[НомерЛиста - 1].ИндексСтраницыРегистра;

		ИдОП = "";
		Если ТипЗнч(ЛистРаздела.ДополнительныеДанные[0].Значение) = Тип("Структура")
				И ЛистРаздела.ДополнительныеДанные[0].Значение.Свойство("СведенияОбОП", СведенияОбОП) Тогда

			Если ЗначениеЗаполнено(СведенияОбОП.КПП)
					или ЗначениеЗаполнено(СведенияОбОП.Наименование) Тогда

				Наименование_ОП = СведенияОбОП.Наименование;
				КПП_ОП = СведенияОбОП.КПП;
				ИдОП = ИдентификаторОП(СведенияОбОП);

				// Контроль записей на уникальность в Разделе("КПП ОП" + "Наименование ОП").
				Если НЕ ДанныеОП_Декларация.Получить(ИдОП) = Неопределено Тогда

				// Такое ОП уже есть.
					ЛистПовтора = ДанныеОП_Декларация[ИдОП]["НомерЛистаДекларация"];
					ЛистПовтораСтроковый = РегламентированнаяОтчетностьАЛКОКлиентСервер.СтрокаЧГ0(ЛистПовтора);
					ТекстОписанияОшибки = СтрокаГде
						+ " обособленное подразделение повторяет заполненное на листе "
						+ ЛистПовтораСтроковый + "!
						|ОП: " + Наименование_ОП + ?(ПустаяСтрока(КПП_ОП), "", ", (КПП "
						+ КПП_ОП + ")")
						+ ?(НЕ ЗначениеЗаполнено(СведенияОбОП.ПредставлениеАдреса), "", "
						|Адрес: " + СведенияОбОП.ПредставлениеАдреса);

					СтруктураОшибки = Новый Структура;
					СтруктураОшибки.Вставить("ТекстОписанияОшибки", ТекстОписанияОшибки);
					СтруктураОшибки.Вставить("Раздел", ИмяРаздела);
					СтруктураОшибки.Вставить("Показатель", ПоказательОП);
					СтруктураОшибки.Вставить("ЛистРаздела", НомерЛиста);
					СтруктураОшибки.Вставить("ТипОшибки", "ПовторОП");

					СообщитьОбОшибкеЗаполнения(ДокументСсылкаАлкоОтчет, ТаблицаСообщений, СтатусПроверки, СтруктураОшибки, 
												МаксимальноеКоличествоОшибок, ТекущееКоличествоОшибок);

				Иначе

					ДанныеОП_Декларация.Вставить(ИдОП, Новый Соответствие);

					КопияСведенияОбОП = ОбщегоНазначенияКлиентСервер.СкопироватьРекурсивно(СведенияОбОП);

					ДанныеОП_Декларация[ИдОП].Вставить("ОП", КопияСведенияОбОП);

					ДанныеОП_Декларация[ИдОП].Вставить("НомерЛистаДекларация", НомерЛиста);

					ДанныеОП_Декларация[ИдОП].Вставить("ИндексСтраницыРегистраДекларация", ИндексСтраницыРегистраДекларация);

					ДанныеОП_Декларация[ИдОП].Вставить("КолСтрокПоДекларации", 0);
					
					ДанныеДвижений.Вставить(ИдОП, Новый Соответствие);

				КонецЕсли;
			КонецЕсли;

		КонецЕсли;
						
		Если ЕстьАктивныеСтрокиВТаблице Тогда

		// Проверка заполнения таблиц декларации.
			ПроверитьЗаполнениеТаблицыДекларация(СтатусПроверки, ИдГруппы, НомерЛиста, ИдОП);

		КонецЕсли;

		Если НетОшибокПроверки и (ТекущееКоличествоОшибок > 0) Тогда

			НетОшибокПроверки = Ложь;
			ПроцентБезЗавершающейПроверкиДанных = 100;
			НужноОбработатьСтрок = НужноОбработатьСтрок / 2;

		КонецЕсли;

		Если ТекущееКоличествоОшибок > МаксимальноеКоличествоОшибок Тогда
			ОбработаноСтрок = НужноОбработатьСтрок;			
			Возврат;
		КонецЕсли;

	КонецЦикла;
		
КонецПроцедуры

Процедура ПроверитьЗаполнениеТаблицыДекларация(СтатусПроверки, ИдГруппы, НомерЛиста, ИдОП = "")
											
	НомерЛистаСтроковый = РегламентированнаяОтчетностьАЛКОКлиентСервер.СтрокаЧГ0(НомерЛиста);
	
	ИндексСтраницы = НомерЛиста - 1;
	
	ИмяТаблицы = Неопределено;
		
	ЕстьИдОП = НЕ ПустаяСтрока(СтрЗаменить(ИдОП, "\", ""));
			
	// Опеределим регистр сведений
	ИмяРегистраСведений = ПолучитьИмяРегистраСведений(ИдГруппы);
	
	СервисРегистров = СтруктураСервисРегистров[ИмяРегистраСведений];
	ИндексСтраницыРегистра = СервисРегистров[ИндексСтраницы].ИндексСтраницыРегистра;
	ИДДокИндСтраницы = РегламентированнаяОтчетностьАЛКО.ПолучитьИдДокИндСтраницы(ДокументСсылкаАлкоОтчет, ИндексСтраницыРегистра);
	
	ДанныеДвиженийПоОП = Неопределено;
	
	Если ЕстьИдОП Тогда	
		
		ДанныеОП_Декларация = ДанныеОП["Декларация"]; 
		ДанныеДвиженийПоОП = ДанныеДвижений[ИдОП];
		ДанныеОП_Декларация[ИдОП].Вставить("ИДДокИндСтраницыДекларация", ИДДокИндСтраницы);	
		
		ДанныеКонтрагентов = СправочникиОтчета["Контрагенты"];
		
	КонецЕсли;
	
	ТекущийИндексСтроки = 0;
	КолСтрокДекларация = 0;
	
	// Зафиксируем имена ключевых полей.
	ИмяКодПродукции 	= ИдГруппы + "02";
	ИмяПроцентСпирта 	= ИдГруппы + "03";
	
	ИмяНаименованиеКонтрагента  = ИдГруппы + "04";
	ИмяИННКонтрагента 			= ИдГруппы + "06";
	ИмяКППКонтрагента 			= ИдГруппы + "07";
	ИмяАдресКонтрагента			= ИдГруппы + "05";
	ИмяАдресКонтрагентаXML		= ИдГруппы + "05XML";
	ИмяДеятельностьПоЛицензии	= ИдГруппы + "08";
	
	ИмяДатаПоставки		= ИдГруппы + "09";
	ИмяНомерПоставки	= ИдГруппы + "10";
	ИмяНомерГТДПоставки	= ИдГруппы + "11";
	ИмяОбъемПоставки	= ИдГруппы + "12";
	
	ИмяДатаВозврата		= ИдГруппы + "13";
	ИмяНомерВозврата	= ИдГруппы + "14";
	ИмяНомерГТДВозврата	= ИдГруппы + "15";
	ИмяОбъемВозврата	= ИдГруппы + "16";
	
	ИмяРаздела = "Декларация";
	СтрВКакомРазделе = "В разделе Декларация";
	
	КоличествоКолонокВРазделе = 16;
		
	КоличествоПервых = 1000;
		
	Пока Истина Цикл
	 
		СтруктураНастроек = Новый Структура;
		СтруктураНастроек.Вставить("КоличествоПервых", КоличествоПервых);
		СтруктураНастроек.Вставить("ТекущийИндексСтроки", ТекущийИндексСтроки);
		
		РезЗапросаДанных = РегламентированнаяОтчетностьАЛКО.ЗаполнитьПоСтраницеРазделаАЛКО(
									ИдГруппы, ИндексСтраницы, 
								   	СтруктураРеквизитовФормы, , ИДДокИндСтраницы,
								   	Ложь, СтруктураНастроек);
		
		Если РезЗапросаДанных.Количество() = 0 Тогда		
			Прервать;				
		КонецЕсли; 
		
		Для каждого СтрокаДекларации Из РезЗапросаДанных Цикл
					
			НомерСтроки = СтрокаДекларации.ИндексСтроки;
			ТекущийИндексСтроки = СтрокаДекларации.ИндексСтроки;
			
			НомерСтрокиСтроковый = РегламентированнаяОтчетностьАЛКОКлиентСервер.СтрокаЧГ0(НомерСтроки);

			СтрокаЗаполнена = РегламентированнаяОтчетностьАЛКО.СтрокаДекларацииЗаполнена(СтрокаДекларации, ИдГруппы, КоличествоКолонокВРазделе);

			СтрокаГде = РегламентированнаяОтчетностьАЛКО.СтрокаГдеСообщенийОбОшибках(СтрВКакомРазделе, НомерЛиста, НомерСтрокиСтроковый, ИмяТаблицы, РежимОтладки);

			Если НЕ СтрокаЗаполнена Тогда

				ТекстОписанияОшибки = СтрокаГде + " не заполнено ни одно поле!";

				ИмяПоказателя = ИмяНаименованиеКонтрагента + "_" + НомерСтрокиСтроковый;

				СтруктураОшибки = Новый Структура;
				СтруктураОшибки.Вставить("ТекстОписанияОшибки", ТекстОписанияОшибки);
				СтруктураОшибки.Вставить("Раздел", ИмяРаздела);
				СтруктураОшибки.Вставить("Показатель", ИмяПоказателя);
				СтруктураОшибки.Вставить("ЛистРаздела", НомерЛиста);
				СтруктураОшибки.Вставить("ТипОшибки", "ПустаяСтрока");

				СообщитьОбОшибкеЗаполнения(ДокументСсылкаАлкоОтчет, ТаблицаСообщений, СтатусПроверки, СтруктураОшибки, 
											МаксимальноеКоличествоОшибок, ТекущееКоличествоОшибок);

				Продолжить;
				
			КонецЕсли;

			ОбработаноСтрок = ОбработаноСтрок + 1;
			КолСтрокДекларация = КолСтрокДекларация + 1;
			
			// Проверка кода продукции.
			
			ИмяПоказателя = ИмяКодПродукции + "_" + НомерСтрокиСтроковый;
			КодВидаПродукции = СокрЛП(СтрокаДекларации[ИмяКодПродукции]);
			
			СтруктураИнформацииВидаПродукции = Новый Структура;

			СтруктураИнформацииВидаПродукции.Вставить("ИмяПоказателя", ИмяПоказателя);
			СтруктураИнформацииВидаПродукции.Вставить("ИмяРаздела", ИмяРаздела);
			СтруктураИнформацииВидаПродукции.Вставить("НомерЛиста", НомерЛиста);
			СтруктураИнформацииВидаПродукции.Вставить("СписокКодов", СписокКодовПродукции);
			СтруктураИнформацииВидаПродукции.Вставить("СтрокаГде", СтрокаГде);
			СтруктураИнформацииВидаПродукции.Вставить("СтрВКакомРазделе", СтрВКакомРазделе);
			СтруктураИнформацииВидаПродукции.Вставить("НомерСтрокиСтроковый", НомерСтрокиСтроковый);
			СтруктураИнформацииВидаПродукции.Вставить("ИмяТаблицы", ИмяТаблицы);
			
			СтруктураИнформацииВидаПродукции.Вставить("МаксимальноеКоличествоОшибок", МаксимальноеКоличествоОшибок);
			СтруктураИнформацииВидаПродукции.Вставить("ТекущееКоличествоОшибок", ТекущееКоличествоОшибок);
			СтруктураИнформацииВидаПродукции.Вставить("МаксимальноеКоличествоПредупреждений", МаксимальноеКоличествоПредупреждений);
			СтруктураИнформацииВидаПродукции.Вставить("ТекущееКоличествоПредупреждений", ТекущееКоличествоПредупреждений);

			РегламентированнаяОтчетностьАЛКО.ВерныйКодВидаПродукции(ДокументСсылкаАлкоОтчет, ТаблицаСообщений, ТаблицаСообщенийДляСведения, СтатусПроверки, КодВидаПродукции, СтруктураИнформацииВидаПродукции, РежимОтладки);

			СтруктураИнформацииВидаПродукции.Свойство("МаксимальноеКоличествоОшибок", МаксимальноеКоличествоОшибок);
			СтруктураИнформацииВидаПродукции.Свойство("ТекущееКоличествоОшибок", ТекущееКоличествоОшибок);
			СтруктураИнформацииВидаПродукции.Свойство("МаксимальноеКоличествоПредупреждений", МаксимальноеКоличествоПредупреждений);
			СтруктураИнформацииВидаПродукции.Свойство("ТекущееКоличествоПредупреждений", ТекущееКоличествоПредупреждений);
						
			// Проверка процента спирта.
			
			ИмяПоказателя = ИмяПроцентСпирта + "_" + НомерСтрокиСтроковый;
			ПроцентСпирта = СтрокаДекларации[ИмяПроцентСпирта];
			
			Если НЕ ЗначениеЗаполнено(ПроцентСпирта) Тогда
				
				ТекстОписанияОшибки = СтрокаГде  + " не задано содержание этилового спирта в объеме готовой продукции!";
						
				СтруктураОшибки = Новый Структура;
				СтруктураОшибки.Вставить("ТекстОписанияОшибки", ТекстОписанияОшибки);
				СтруктураОшибки.Вставить("Раздел", ИмяРаздела);
				СтруктураОшибки.Вставить("Показатель", ИмяПоказателя);
				СтруктураОшибки.Вставить("ЛистРаздела", НомерЛиста);
				СтруктураОшибки.Вставить("ТипОшибки", "НетПроцентаСпирта");
				
				СообщитьОбОшибкеЗаполнения(ДокументСсылкаАлкоОтчет, ТаблицаСообщений, СтатусПроверки, СтруктураОшибки, 
											МаксимальноеКоличествоОшибок, ТекущееКоличествоОшибок);
				
			ИначеЕсли ПроцентСпирта > 100 Тогда
				
				ТекстОписанияОшибки = СтрокаГде  + " задано содержание этилового спирта в объеме готовой продукции более 100%!";
						
				СтруктураОшибки = Новый Структура;
				СтруктураОшибки.Вставить("ТекстОписанияОшибки", ТекстОписанияОшибки);
				СтруктураОшибки.Вставить("Раздел", ИмяРаздела);
				СтруктураОшибки.Вставить("Показатель", ИмяПоказателя);
				СтруктураОшибки.Вставить("ЛистРаздела", НомерЛиста);
				СтруктураОшибки.Вставить("ТипОшибки", "БольшойПроцентаСпирта");
				
				СообщитьОбОшибкеЗаполнения(ДокументСсылкаАлкоОтчет, ТаблицаСообщений, СтатусПроверки, СтруктураОшибки, 
											МаксимальноеКоличествоОшибок, ТекущееКоличествоОшибок);
         			
			КонецЕсли;		
			
						
			// Определяем принадлежность по ИНН-КПП-Наименованию-Адресу.
			ИмяПоказателяНаименования = ИмяНаименованиеКонтрагента + "_" + НомерСтрокиСтроковый;
			НаименованиеКонтрагента = СокрЛП(СтрокаДекларации[ИмяНаименованиеКонтрагента]);
			
			ИмяПоказателяИНН = ИмяИННКонтрагента + "_" + НомерСтрокиСтроковый;
			ИНН = СокрЛП(СтрокаДекларации[ИмяИННКонтрагента]);
			
			ИмяПоказателяКПП = ИмяКППКонтрагента + "_" + НомерСтрокиСтроковый;
			КПП = СокрЛП(СтрокаДекларации[ИмяКППКонтрагента]);
			
			
			// Данные адреса для определения принадлежности.
			ИмяПоказателяАдреса = ИмяАдресКонтрагента + "_" + НомерСтрокиСтроковый;
			
			АдресКонтрагента = СокрЛП(СтрокаДекларации[ИмяАдресКонтрагента]);
			АдресКонтрагентаXML = СокрЛП(СтрокаДекларации[ИмяАдресКонтрагентаXML]);
			СтруктураАдресКонтрагента = РегламентированнаяОтчетностьАЛКО.ПолучитьСтруктуруАдресаИзСтандартногоПредставленияИлиXML(
																					АдресКонтрагентаXML);
																					
			КодСтраны = СтруктураАдресКонтрагента.КодСтраны;
											
			РоссийскийРезидент = Ложь;
			РезидентЕАЭС = Ложь;
				
			РегламентированнаяОтчетностьАЛКО.ОпределитьПринадлежностьЕАЭСиРФ(ИНН, КПП, НаименованиеКонтрагента, 
											КодСтраны, РоссийскийРезидент, РезидентЕАЭС, РежимОтладки);
											
			////////////////////////////////////////////////////////////////////////////////								
			// Контроль Адреса.
			
			РодПадежАдресЧего = "получателя";
			Обязательный = Истина;
			ТолькоРоссия = РоссийскийРезидент;
			ТолькоЕАЭС = (НЕ ТолькоРоссия) И РезидентЕАЭС;
			ТолькоИностранныйКромеЕАЭС = Ложь;
			ЛюбойИностранный = Ложь;
			
			ВспомогательнаяСтруктураДанных = Новый Структура;

			ВспомогательнаяСтруктураДанных.Вставить("ИмяРаздела", ИмяРаздела);
			ВспомогательнаяСтруктураДанных.Вставить("СтрокаГде", СтрокаГде);
			ВспомогательнаяСтруктураДанных.Вставить("СтрВКакомРазделе", СтрВКакомРазделе);
			ВспомогательнаяСтруктураДанных.Вставить("Показатель", ИмяПоказателяАдреса);

			// Поля, заполненны только при проверке строчных и многостраничных разделов.
			ВспомогательнаяСтруктураДанных.Вставить("НомерЛиста", НомерЛиста);
			ВспомогательнаяСтруктураДанных.Вставить("НомерСтрокиСтроковый", НомерСтрокиСтроковый);
			ВспомогательнаяСтруктураДанных.Вставить("ИмяТаблицы", ИмяТаблицы);
			ВспомогательнаяСтруктураДанных.Вставить("РодПадежАдресЧего", РодПадежАдресЧего);

			ВспомогательнаяСтруктураДанных.Вставить("ОписаниеСтруктурыАдресаИзОтчета", ОписаниеСтруктурыАдресаИзОтчета);

			ВспомогательнаяСтруктураДанных.Вставить("Обязательный", Обязательный);
			ВспомогательнаяСтруктураДанных.Вставить("ТолькоРоссия", ТолькоРоссия);
			ВспомогательнаяСтруктураДанных.Вставить("ТолькоЕАЭС", ТолькоЕАЭС);
			ВспомогательнаяСтруктураДанных.Вставить("ТолькоИностранныйКромеЕАЭС", ТолькоИностранныйКромеЕАЭС);
			ВспомогательнаяСтруктураДанных.Вставить("ЛюбойИностранный", ЛюбойИностранный);
			
			ВспомогательнаяСтруктураДанных.Вставить("МаксимальноеКоличествоОшибок", МаксимальноеКоличествоОшибок);
			ВспомогательнаяСтруктураДанных.Вставить("ТекущееКоличествоОшибок", ТекущееКоличествоОшибок);
			ВспомогательнаяСтруктураДанных.Вставить("МаксимальноеКоличествоПредупреждений", МаксимальноеКоличествоПредупреждений);
			ВспомогательнаяСтруктураДанных.Вставить("ТекущееКоличествоПредупреждений", ТекущееКоличествоПредупреждений);

			ПроверкаАдресаПройдена = РегламентированнаяОтчетностьАЛКО.ВерныйАдрес(ДокументСсылкаАлкоОтчет, 
					ТаблицаСообщений, СтатусПроверки, СтруктураАдресКонтрагента, ВспомогательнаяСтруктураДанных, РежимОтладки);

			ВспомогательнаяСтруктураДанных.Свойство("МаксимальноеКоличествоОшибок", МаксимальноеКоличествоОшибок);
			ВспомогательнаяСтруктураДанных.Свойство("ТекущееКоличествоОшибок", ТекущееКоличествоОшибок);
			ВспомогательнаяСтруктураДанных.Свойство("МаксимальноеКоличествоПредупреждений", МаксимальноеКоличествоПредупреждений);
			ВспомогательнаяСтруктураДанных.Свойство("ТекущееКоличествоПредупреждений", ТекущееКоличествоПредупреждений);

			//
			////////////////////////////////////////////////////////////////////////////////
			
			Если НЕ ПроверкаАдресаПройдена Тогда
			// Нет смысла проверять ИНН-КПП до исправления адреса.
				Продолжить;			
			КонецЕсли; 	
			
			////////////////////////////////////////////////////////////////////////////////
			// Контроль ИНН-КПП-Наименование.
			
			МожетБытьПустойИНН = НЕ (((НЕ РоссийскийРезидент = Неопределено) И РоссийскийРезидент)
									ИЛИ ((НЕ РезидентЕАЭС = Неопределено) И РезидентЕАЭС));
			МожетБытьПустойКПП = Истина;
			КонтрольОП = Ложь;
			РоссийскийТолькоЮЛ = Неопределено;
			РоссийскийТолькоФЛ = Неопределено;
			
			ТолькоЕАЭС = Ложь;
			ТолькоРФ = Ложь;
			МинДлинаИННпоXSD = 1;
			МаксДлинаИННпоXSD = 100;
			
			КПП56СимволыМогутБытьБуквами = Ложь;
			ИННLiteТип = Ложь;
			КППLiteТип = Истина;
			
			РодПадежЧейИННКПП = РодПадежАдресЧего;

			СтруктураСведенийИННКПП = Новый Структура;

			СтруктураСведенийИННКПП.Вставить("ИмяРаздела", ИмяРаздела);

			СтруктураСведенийИННКПП.Вставить("СтрокаГде", СтрокаГде);
			СтруктураСведенийИННКПП.Вставить("СтрВКакомРазделе", СтрВКакомРазделе);
			СтруктураСведенийИННКПП.Вставить("НомерСтрокиСтроковый", НомерСтрокиСтроковый);
			СтруктураСведенийИННКПП.Вставить("ИмяТаблицы", ИмяТаблицы);

			СтруктураСведенийИННКПП.Вставить("НомерЛиста", НомерЛиста);
			СтруктураСведенийИННКПП.Вставить("КонтрольОП", КонтрольОП);

			СтруктураСведенийИННКПП.Вставить("ИмяПоказателяНаименования", ИмяПоказателяНаименования);
			СтруктураСведенийИННКПП.Вставить("Наименование", НаименованиеКонтрагента);

			СтруктураСведенийИННКПП.Вставить("ИмяПоказателяИНН", ИмяПоказателяИНН);
			СтруктураСведенийИННКПП.Вставить("ИНН", ИНН);
			СтруктураСведенийИННКПП.Вставить("ИмяПоказателяКПП", ИмяПоказателяКПП);
			СтруктураСведенийИННКПП.Вставить("КПП", КПП);
			СтруктураСведенийИННКПП.Вставить("РодПадежЧейИННКПП", РодПадежЧейИННКПП);

			СтруктураСведенийИННКПП.Вставить("МожетБытьПустойИНН", МожетБытьПустойИНН);
			СтруктураСведенийИННКПП.Вставить("МожетБытьПустойКПП", МожетБытьПустойКПП);

			СтруктураСведенийИННКПП.Вставить("РоссийскийТолькоЮЛ", РоссийскийТолькоЮЛ);
			СтруктураСведенийИННКПП.Вставить("РоссийскийТолькоФЛ", РоссийскийТолькоФЛ);
			СтруктураСведенийИННКПП.Вставить("КПП56СимволыМогутБытьБуквами", КПП56СимволыМогутБытьБуквами);
			СтруктураСведенийИННКПП.Вставить("ИННLiteТип", ИННLiteТип);
			СтруктураСведенийИННКПП.Вставить("КППLiteТип", КППLiteТип);
			
			СтруктураСведенийИННКПП.Вставить("МаксимальноеКоличествоОшибок", МаксимальноеКоличествоОшибок);
			СтруктураСведенийИННКПП.Вставить("ТекущееКоличествоОшибок", ТекущееКоличествоОшибок);
			СтруктураСведенийИННКПП.Вставить("МаксимальноеКоличествоПредупреждений", МаксимальноеКоличествоПредупреждений);
			СтруктураСведенийИННКПП.Вставить("ТекущееКоличествоПредупреждений", ТекущееКоличествоПредупреждений);
			
			СтруктураСведенийИННКПП.Вставить("КодСтраны", КодСтраны);
			СтруктураСведенийИННКПП.Вставить("ТолькоЕАЭС", ТолькоЕАЭС);
			СтруктураСведенийИННКПП.Вставить("ТолькоРФ", ТолькоРФ); 
			СтруктураСведенийИННКПП.Вставить("МаксДлинаИННпоXSD", МаксДлинаИННпоXSD); 	// По умолчанию 20.
			СтруктураСведенийИННКПП.Вставить("МинДлинаИННпоXSD", МинДлинаИННпоXSD);		// По умолчанию 1.
			
			РегламентированнаяОтчетностьАЛКО.ВерныеНаименованиеИННКПП(ДокументСсылкаАлкоОтчет, 
				ТаблицаСообщений, ТаблицаСообщенийДляСведения, СтатусПроверки, СтруктураСведенийИННКПП, 
				РоссийскийРезидент, РежимОтладки);

			СтруктураСведенийИННКПП.Свойство("МаксимальноеКоличествоОшибок", МаксимальноеКоличествоОшибок);
			СтруктураСведенийИННКПП.Свойство("ТекущееКоличествоОшибок", ТекущееКоличествоОшибок);
			СтруктураСведенийИННКПП.Свойство("МаксимальноеКоличествоПредупреждений", МаксимальноеКоличествоПредупреждений);
			СтруктураСведенийИННКПП.Свойство("ТекущееКоличествоПредупреждений", ТекущееКоличествоПредупреждений);
			
			//
			//////////////////////////////////////////////////////////////////////////////// 
				
			
			// Отсутствие лицензии для иностранцев.
			Если (НЕ РоссийскийРезидент) И ЗначениеЗаполнено(СтрокаДекларации[ИмяДеятельностьПоЛицензии]) Тогда
			
				ТекстОписанияОшибки = СтрокаГде + " заполнены сведения о лицензии для получателя, который не является резидентом РФ!";
				
					
				ИмяПоказателя = ИмяДеятельностьПоЛицензии + "_" + НомерСтрокиСтроковый;
				
				СтруктураОшибки = Новый Структура;
				СтруктураОшибки.Вставить("ТекстОписанияОшибки", ТекстОписанияОшибки);
				СтруктураОшибки.Вставить("Раздел", 		ИмяРаздела);
				СтруктураОшибки.Вставить("Показатель", 	ИмяПоказателя);
				СтруктураОшибки.Вставить("ЛистРаздела", НомерЛиста);
				СтруктураОшибки.Вставить("ТипОшибки", 	"НеНужнаЛицензия");
				
				СообщитьОбОшибкеЗаполнения(ДокументСсылкаАлкоОтчет, ТаблицаСообщений, СтатусПроверки, СтруктураОшибки, 
											МаксимальноеКоличествоОшибок, ТекущееКоличествоОшибок);
			
			КонецЕсли; 
			
			// Проверяем заполнение поставок и возвратов.
			ЕстьПоставка = Ложь;
			Для Счетчик = 9 По 12 Цикл
			
				Колонка = Формат(Счетчик, "ЧЦ=2; ЧН=; ЧГ=0; ЧВН="); // 09, 10..12.
			   	ЗначениеПоКолонке = СтрокаДекларации[ИдГруппы + Колонка];
				
				Если ЗначениеЗаполнено(ЗначениеПоКолонке) Тогда
				    ЕстьПоставка = Истина;
					Прервать;				
				КонецЕсли; 
							
			КонецЦикла;
			
			ЕстьВозврат = Ложь;
			Для Счетчик = 13 По 16 Цикл
			
				Колонка = Формат(Счетчик, "ЧЦ=2; ЧН=; ЧГ=0; ЧВН=");// 13, 14,..16
			   	ЗначениеПоКолонке = СтрокаДекларации[ИдГруппы + Колонка];
				
				Если ЗначениеЗаполнено(ЗначениеПоКолонке) Тогда
				    ЕстьВозврат = Истина;
					Прервать;				
				КонецЕсли; 
							
			КонецЦикла;
			
			Если ЕстьПоставка Тогда
				
				ДатаПоставки = СтрокаДекларации[ИмяДатаПоставки];
				ОбъемПоставки = СтрокаДекларации[ИмяОбъемПоставки];
				
				////////////////////////////////////////////////////////////////////////////////
				// Контроль ТТН.
				ЗаполненаТТН = Ложь;

				ТипНакладной = "ТТН"; // ТипНакладной для Уведомления "Уведомление".
				ОбязателенКЗаполнению = Ложь;

				СтруктураСведенийНакладной = Новый Структура;

				СтруктураСведенийНакладной.Вставить("ИмяРаздела", ИмяРаздела);
				СтруктураСведенийНакладной.Вставить("СтрВКакомРазделе", СтрВКакомРазделе);
				СтруктураСведенийНакладной.Вставить("НомерЛиста", НомерЛиста);
				СтруктураСведенийНакладной.Вставить("СтрокаГде", СтрокаГде);
				СтруктураСведенийНакладной.Вставить("НомерСтрокиСтроковый", НомерСтрокиСтроковый);
				СтруктураСведенийНакладной.Вставить("ИмяТаблицы", ИмяТаблицы);

				СтруктураСведенийНакладной.Вставить("ИмяДатыТТН", ИмяДатаПоставки + "_"
					+ НомерСтрокиСтроковый);
				СтруктураСведенийНакладной.Вставить("ДатаТТН", ДатаПоставки);
				СтруктураСведенийНакладной.Вставить("ИмяНомерТТН", ИмяНомерПоставки + "_"
					+ НомерСтрокиСтроковый);
				СтруктураСведенийНакладной.Вставить("НомерТТН", СтрокаДекларации[ИмяНомерПоставки]);
				СтруктураСведенийНакладной.Вставить("ИмяНомерГТД", ИмяНомерГТДПоставки + "_"
					+ НомерСтрокиСтроковый);
				СтруктураСведенийНакладной.Вставить("НомерГТД", СтрокаДекларации[ИмяНомерГТДПоставки]);
				СтруктураСведенийНакладной.Вставить("ИмяОбъемПоТТН", ИмяОбъемПоставки + "_"
					+ НомерСтрокиСтроковый);
				СтруктураСведенийНакладной.Вставить("ОбъемПоТТН", ОбъемПоставки);

				СтруктураСведенийНакладной.Вставить("ДатаНачалаОтчета", ДатаНачалаОтчета);
				СтруктураСведенийНакладной.Вставить("ДатаКонцаОтчета", ДатаКонцаОтчета);
				СтруктураСведенийНакладной.Вставить("НижняяГраницаДатыПоXSD", НижняяГраницаДатыПоXSD);
				СтруктураСведенийНакладной.Вставить("ВерхняяГраницаДатыПоXSD", ВерхняяГраницаДатыПоXSD);

				СтруктураСведенийНакладной.Вставить("Обязательный", ОбязателенКЗаполнению);

				СтруктураСведенийНакладной.Вставить("МаксимальноеКоличествоОшибок", МаксимальноеКоличествоОшибок);
				СтруктураСведенийНакладной.Вставить("ТекущееКоличествоОшибок", ТекущееКоличествоОшибок);
				СтруктураСведенийНакладной.Вставить("МаксимальноеКоличествоПредупреждений", МаксимальноеКоличествоПредупреждений);
				СтруктураСведенийНакладной.Вставить("ТекущееКоличествоПредупреждений", ТекущееКоличествоПредупреждений);

				РегламентированнаяОтчетностьАЛКО.ВернаяНакладная(ДокументСсылкаАлкоОтчет, ТаблицаСообщений, ТаблицаСообщенийДляСведения, СтатусПроверки, СтруктураСведенийНакладной, ТипНакладной, ЗаполненаТТН, РежимОтладки);

				СтруктураСведенийНакладной.Свойство("МаксимальноеКоличествоОшибок", МаксимальноеКоличествоОшибок);
				СтруктураСведенийНакладной.Свойство("ТекущееКоличествоОшибок", ТекущееКоличествоОшибок);
				СтруктураСведенийНакладной.Свойство("МаксимальноеКоличествоПредупреждений", МаксимальноеКоличествоПредупреждений);
				СтруктураСведенийНакладной.Свойство("ТекущееКоличествоПредупреждений", ТекущееКоличествоПредупреждений);
				
				//
				////////////////////////////////////////////////////////////////////////////////
							    			
			КонецЕсли; 
			
			Если ЕстьВозврат Тогда
			
				ДатаВозврата = СтрокаДекларации[ИмяДатаВозврата];
				ОбъемВозврата = СтрокаДекларации[ИмяОбъемВозврата];
				
				////////////////////////////////////////////////////////////////////////////////
				// Контроль ТТН.
				ЗаполненаТТН = Ложь;

				ТипНакладной = "ТТН"; // ТипНакладной для Уведомления "Уведомление".
				ОбязателенКЗаполнению = Ложь;

				СтруктураСведенийНакладной = Новый Структура;

				СтруктураСведенийНакладной.Вставить("ИмяРаздела", ИмяРаздела);
				СтруктураСведенийНакладной.Вставить("СтрВКакомРазделе", СтрВКакомРазделе);
				СтруктураСведенийНакладной.Вставить("НомерЛиста", НомерЛиста);
				СтруктураСведенийНакладной.Вставить("СтрокаГде", СтрокаГде);
				СтруктураСведенийНакладной.Вставить("НомерСтрокиСтроковый", НомерСтрокиСтроковый);
				СтруктураСведенийНакладной.Вставить("ИмяТаблицы", ИмяТаблицы);

				СтруктураСведенийНакладной.Вставить("ИмяДатыТТН", ИмяДатаВозврата + "_"
					+ НомерСтрокиСтроковый);
				СтруктураСведенийНакладной.Вставить("ДатаТТН", ДатаВозврата);
				СтруктураСведенийНакладной.Вставить("ИмяНомерТТН", ИмяНомерВозврата + "_"
					+ НомерСтрокиСтроковый);
				СтруктураСведенийНакладной.Вставить("НомерТТН", СтрокаДекларации[ИмяНомерВозврата]);
				СтруктураСведенийНакладной.Вставить("ИмяНомерГТД", ИмяНомерГТДВозврата + "_"
					+ НомерСтрокиСтроковый);
				СтруктураСведенийНакладной.Вставить("НомерГТД", СтрокаДекларации[ИмяНомерГТДВозврата]);
				СтруктураСведенийНакладной.Вставить("ИмяОбъемПоТТН", ИмяОбъемВозврата + "_"
					+ НомерСтрокиСтроковый);
				СтруктураСведенийНакладной.Вставить("ОбъемПоТТН", ОбъемВозврата);

				СтруктураСведенийНакладной.Вставить("ДатаНачалаОтчета", ДатаНачалаОтчета);
				СтруктураСведенийНакладной.Вставить("ДатаКонцаОтчета", ДатаКонцаОтчета);
				СтруктураСведенийНакладной.Вставить("НижняяГраницаДатыПоXSD", НижняяГраницаДатыПоXSD);
				СтруктураСведенийНакладной.Вставить("ВерхняяГраницаДатыПоXSD", ВерхняяГраницаДатыПоXSD);

				СтруктураСведенийНакладной.Вставить("Обязательный", ОбязателенКЗаполнению);

				СтруктураСведенийНакладной.Вставить("МаксимальноеКоличествоОшибок", МаксимальноеКоличествоОшибок);
				СтруктураСведенийНакладной.Вставить("ТекущееКоличествоОшибок", ТекущееКоличествоОшибок);
				СтруктураСведенийНакладной.Вставить("МаксимальноеКоличествоПредупреждений", МаксимальноеКоличествоПредупреждений);
				СтруктураСведенийНакладной.Вставить("ТекущееКоличествоПредупреждений", ТекущееКоличествоПредупреждений);

				РегламентированнаяОтчетностьАЛКО.ВернаяНакладная(ДокументСсылкаАлкоОтчет, ТаблицаСообщений, ТаблицаСообщенийДляСведения, СтатусПроверки, СтруктураСведенийНакладной, ТипНакладной, ЗаполненаТТН, РежимОтладки);

				СтруктураСведенийНакладной.Свойство("МаксимальноеКоличествоОшибок", МаксимальноеКоличествоОшибок);
				СтруктураСведенийНакладной.Свойство("ТекущееКоличествоОшибок", ТекущееКоличествоОшибок);
				СтруктураСведенийНакладной.Свойство("МаксимальноеКоличествоПредупреждений", МаксимальноеКоличествоПредупреждений);
				СтруктураСведенийНакладной.Свойство("ТекущееКоличествоПредупреждений", ТекущееКоличествоПредупреждений);
				
				//
				////////////////////////////////////////////////////////////////////////////////
							    			
			КонецЕсли;
			
			Если НЕ (ЕстьПоставка ИЛИ ЕстьВозврат) Тогда
				
			// Должно быть заполнено либо Поставка, либо Возврат, либо и то и другое.
				ТекстОписанияОшибки = СтрокаГде + " не заполнены графы Поставки и Возврата!";

				ИмяПоказателя = ИмяНаименованиеКонтрагента + "_" + НомерСтрокиСтроковый;

				СтруктураОшибки = Новый Структура;
				СтруктураОшибки.Вставить("ТекстОписанияОшибки", ТекстОписанияОшибки);
				СтруктураОшибки.Вставить("Раздел", ИмяРаздела);
				СтруктураОшибки.Вставить("Показатель", ИмяПоказателя);
				СтруктураОшибки.Вставить("ЛистРаздела", НомерЛиста);
				СтруктураОшибки.Вставить("ТипОшибки", "ПустаяСтрока");

				СообщитьОбОшибкеЗаполнения(ДокументСсылкаАлкоОтчет, ТаблицаСообщений, СтатусПроверки, СтруктураОшибки, 
											МаксимальноеКоличествоОшибок, ТекущееКоличествоОшибок);
			
			КонецЕсли; 
			
			// Проверку на дублирование - код продукции-процентСпирта-контрагент-лицензия-(поставка или возврат).
			// НЕ ДЕЛАЕМ. Поскольку ТТН не обязательна, возможен ввод нескольких строк возврата-поставок за одно число.
			// Ограничений по схеме выгрузки также нет.
			
			// Заполняем движения.
			// Нет смысла собирать данные по Движениям, если есть ошибки заполнения.
			Если ЕстьИдОП И ТекущееКоличествоОшибок = 0 Тогда
							    
				ИдКонтрагента		= "Х" + СтрокаДекларации.ХешИдПолучателя;
				
				// Вначале заполняем справочник Производителей.
				Если ДанныеКонтрагентов.Получить(ИдКонтрагента) = Неопределено Тогда
					
					СчетчикИДКонтрагентов = СчетчикИДКонтрагентов + 1;
					ДанныеКонтрагентов.Вставить(ИдКонтрагента, Новый Соответствие);
					ДанныеКонтрагентов[ИдКонтрагента].Вставить("ИдКонтр", 			СчетчикИДКонтрагентов);
					ДанныеКонтрагентов[ИдКонтрагента].Вставить("П000000000005", 	НаименованиеКонтрагента);
					
										
					Если РоссийскийРезидент Тогда
						
					    ДанныеКонтрагентов[ИдКонтрагента].Вставить("Резидент", 	Новый Соответствие);
						ДанныеКонтрагента = ДанныеКонтрагентов[ИдКонтрагента]["Резидент"];
						
						ДанныеКонтрагента.Вставить("П000000000006", 		Новый Соответствие);
						
						ДанныеКонтрагентаАдрес = ДанныеКонтрагента["П000000000006"];
						
						ДанныеКонтрагентаАдрес.Вставить("КодСтраны", СтруктураАдресКонтрагента.КодСтраны);
						ДанныеКонтрагентаАдрес.Вставить("КодРегион", СтруктураАдресКонтрагента.КодРегиона);
						
						Если ЗначениеЗаполнено(СтруктураАдресКонтрагента.Индекс) Тогда
						    ДанныеКонтрагентаАдрес.Вставить("Индекс", СтруктураАдресКонтрагента.Индекс);
						КонецЕсли; 
						Если ЗначениеЗаполнено(СтруктураАдресКонтрагента.Район) Тогда
						    ДанныеКонтрагентаАдрес.Вставить("Район", СтруктураАдресКонтрагента.Район);
						КонецЕсли; 
						Если ЗначениеЗаполнено(СтруктураАдресКонтрагента.Город) Тогда
						    ДанныеКонтрагентаАдрес.Вставить("Город", СтруктураАдресКонтрагента.Город);
						КонецЕсли; 
						Если ЗначениеЗаполнено(СтруктураАдресКонтрагента.НаселенныйПункт) Тогда
						    ДанныеКонтрагентаАдрес.Вставить("НаселПункт", СтруктураАдресКонтрагента.НаселенныйПункт);
						КонецЕсли; 
						Если ЗначениеЗаполнено(СтруктураАдресКонтрагента.Улица) Тогда
						    ДанныеКонтрагентаАдрес.Вставить("Улица", СтруктураАдресКонтрагента.Улица);
						КонецЕсли; 
						Если ЗначениеЗаполнено(СтруктураАдресКонтрагента.Дом) Тогда
						    ДанныеКонтрагентаАдрес.Вставить("Дом", СтруктураАдресКонтрагента.Дом);
						КонецЕсли;
						Если ЗначениеЗаполнено(СтруктураАдресКонтрагента.Корпус) Тогда
						    ДанныеКонтрагентаАдрес.Вставить("Корпус", СтруктураАдресКонтрагента.Корпус);
						КонецЕсли;
						Если ЗначениеЗаполнено(СтруктураАдресКонтрагента.Литера) Тогда
						    ДанныеКонтрагентаАдрес.Вставить("Литера", СтруктураАдресКонтрагента.Литера);
						КонецЕсли;
						Если ЗначениеЗаполнено(СтруктураАдресКонтрагента.Квартира) Тогда
						    ДанныеКонтрагентаАдрес.Вставить("Кварт", СтруктураАдресКонтрагента.Квартира);
						КонецЕсли;
						
						ЭтоЮЛ = (СтрДлина(ИНН) = 10);
						
						Если ЭтоЮЛ Тогда
						
							ДанныеКонтрагента.Вставить("ЮЛ", 		Новый Соответствие);
							ДанныеКонтрагента["ЮЛ"].Вставить("П000000000007", 	ИНН);
							ДанныеКонтрагента["ЮЛ"].Вставить("П000000000008", 	КПП);

						Иначе
							
							ДанныеКонтрагента.Вставить("ФЛ", 		Новый Соответствие);
							ДанныеКонтрагента["ФЛ"].Вставить("П000000000007", 	ИНН);
							
						КонецЕсли;
						
						ДанныеКонтрагента.Вставить("Лицензии", 		Новый Соответствие);
												
					Иначе
						
					    ДанныеКонтрагентов[ИдКонтрагента].Вставить("Иностр", 	Новый Соответствие);
						ДанныеКонтрагента = ДанныеКонтрагентов[ИдКонтрагента]["Иностр"];
												
						ДанныеКонтрагента.Вставить("П000000000081", СтруктураАдресКонтрагента.КодСтраны);
						ДанныеКонтрагента.Вставить("П000000000082", АдресКонтрагента);
						
						Если ЗначениеЗаполнено(ИНН) Тогда
						     ДанныеКонтрагента.Вставить("Номер", 		ИНН);
						КонецЕсли; 
					    						
					КонецЕсли; 
										
				КонецЕсли;
				
				ДанныеПоКонтрагенту = ДанныеКонтрагентов[ИдКонтрагента];
				ИдЛицензииВДвижении = Неопределено;
				
				// Лицензия.
				Если РоссийскийРезидент И ЗначениеЗаполнено(СтрокаДекларации[ИмяДеятельностьПоЛицензии]) Тогда
				
					ИдЛицензии		= "Х" + СтрокаДекларации.ХешИдЛицензии;
					
					ДанныеКонтрагента = ДанныеПоКонтрагенту.Резидент;
					
					Если ДанныеКонтрагента["Лицензии"].Получить(ИдЛицензии) = Неопределено Тогда
						
						СчетчикИДЛицензий = СчетчикИДЛицензий + 1;
						
					    ДанныеКонтрагента["Лицензии"].Вставить(ИдЛицензии, Новый Соответствие);
						ДанныеЛицензииКонтрагента = ДанныеКонтрагента["Лицензии"][ИдЛицензии];
						
						ДанныеЛицензииКонтрагента.Вставить("ИдЛицензии", СчетчикИДЛицензий);
						ДанныеЛицензииКонтрагента.Вставить("П000000000009", СокрЛП(СтрокаДекларации[ИмяДеятельностьПоЛицензии]));
					
					КонецЕсли;
					
					ДанныеЛицензииКонтрагента = ДанныеКонтрагента["Лицензии"][ИдЛицензии];
					
					ИдЛицензииВДвижении = ДанныеЛицензииКонтрагента["ИдЛицензии"];
				
				КонецЕсли; 
				
				// Заполняем Движения.
				ИдКодПродПроцСпирта	= "Х" + СтрокаДекларации.ХешИдКодПродПроцСпирта;
				
				// Код продукции - процент спирта.
				Если ДанныеДвиженийПоОП.Получить(ИдКодПродПроцСпирта) = Неопределено Тогда
					
					ДанныеДвиженийПоОП.Вставить(ИдКодПродПроцСпирта, Новый Соответствие);
					
					ДанныеДвиженийПоОП[ИдКодПродПроцСпирта].Вставить("П000000000003", КодВидаПродукции);
					ДанныеДвиженийПоОП[ИдКодПродПроцСпирта].Вставить("П000000000004", ПроцентСпирта);
					
					ДанныеДвиженийПоОП[ИдКодПродПроцСпирта].Вставить("Получатель", Новый Соответствие);
					
				КонецЕсли;
				
				ДанныеДвиженийКодПродПроцСпиртаПолучатели = ДанныеДвиженийПоОП[ИдКодПродПроцСпирта]["Получатель"];
				
				// Получатель - лицензия.
				ИдЛицензии	= "Х" + СтрокаДекларации.ХешИдЛицензии;
				
				// ИдЛицензии однозначно идентифицирует и получателя и лицензию.
				Если ДанныеДвиженийКодПродПроцСпиртаПолучатели.Получить(ИдЛицензии) = Неопределено Тогда
					
					ДанныеДвиженийКодПродПроцСпиртаПолучатели.Вставить(ИдЛицензии, Новый Соответствие);
					
					ДанныеДвиженийКодПродПроцСпиртаПолучатели[ИдЛицензии].Вставить("ИдПолучателя", ДанныеПоКонтрагенту["ИдКонтр"]);
					
					Если ЗначениеЗаполнено(ИдЛицензииВДвижении) Тогда
					    ДанныеДвиженийКодПродПроцСпиртаПолучатели[ИдЛицензии].Вставить("ИдЛицензии", ИдЛицензииВДвижении);				
					КонецЕсли;
					
					ДанныеДвиженийКодПродПроцСпиртаПолучатели[ИдЛицензии].Вставить("Поставка", Новый Соответствие);
					ДанныеДвиженийКодПродПроцСпиртаПолучатели[ИдЛицензии].Вставить("Возврат", Новый Соответствие);
					
				КонецЕсли;
				
				ДанныеДвиженийКодПродПроцСпиртаПолучатель = ДанныеДвиженийКодПродПроцСпиртаПолучатели[ИдЛицензии];
				
				// Поставка и возврат.
				КлючНомерСтроки = "Х" + НомерСтрокиСтроковый;
				
				Если ЕстьПоставка Тогда
					
					ДанныеДвиженийКодПродПроцСпиртаПолучатель["Поставка"].Вставить(КлючНомерСтроки, Новый Соответствие);
					
					Для Счетчик = 9 По 12 Цикл
			
						Колонка = Формат(Счетчик, "ЧЦ=2; ЧН=; ЧГ=0; ЧВН="); // 09, 10..12.
					   	ЗначениеПоКолонке = СтрокаДекларации[ИдГруппы + Колонка];
						
						КолонкаДвижения = "П0000000000" + Формат(Счетчик + 1, "ЧЦ=2; ЧН=; ЧГ=0; ЧВН=");
						
						Если ЗначениеЗаполнено(ЗначениеПоКолонке) Тогда
						    ДанныеДвиженийКодПродПроцСпиртаПолучатель["Поставка"][КлючНомерСтроки].Вставить(КолонкаДвижения, ЗначениеПоКолонке);	
						КонецЕсли; 
									
					КонецЦикла;
			        				     
				КонецЕсли;
				
				Если ЕстьВозврат Тогда				
					
					ДанныеДвиженийКодПродПроцСпиртаПолучатель["Возврат"].Вставить(КлючНомерСтроки, Новый Соответствие);
					
					Для Счетчик = 13 По 16 Цикл
			
						Колонка = Формат(Счетчик, "ЧЦ=2; ЧН=; ЧГ=0; ЧВН="); // 09, 10..12.
					   	ЗначениеПоКолонке = СтрокаДекларации[ИдГруппы + Колонка];
						
						КолонкаДвижения = "П0000000000" + Формат(Счетчик + 1, "ЧЦ=2; ЧН=; ЧГ=0; ЧВН=");
						
						Если ЗначениеЗаполнено(ЗначениеПоКолонке) Тогда
						    ДанныеДвиженийКодПродПроцСпиртаПолучатель["Возврат"][КлючНомерСтроки].Вставить(КолонкаДвижения, ЗначениеПоКолонке);	
						КонецЕсли; 
									
					КонецЦикла;
			        				
				КонецЕсли;
				
			КонецЕсли;
			
			Если НетОшибокПроверки и (ТекущееКоличествоОшибок > 0)  Тогда
				НетОшибокПроверки = Ложь;
			    ПроцентБезЗавершающейПроверкиДанных = 100;
				НужноОбработатьСтрок = НужноОбработатьСтрок / 2;
			КонецЕсли; 
			
			Если ТекущееКоличествоОшибок >  МаксимальноеКоличествоОшибок Тогда
				ОбработаноСтрок = НужноОбработатьСтрок;
			    Возврат;
			КонецЕсли;
			
			// Информируем о ходе выполнения.
			Если (НужноОбработатьСтрок > 0) И (ОбработаноСтрок % ШагИнформирования = 0) Тогда

				РегламентированнаяОтчетностьАлко.СообщитьПроцентВыполнения("Проверка заполнения раздела Декларация.", 
						ОбработаноСтрок, НужноОбработатьСтрок, ПроцентБезЗавершающейПроверкиДанных, РежимОтладки);

			КонецЕсли;
					
		КонецЦикла;
		
		// Информируем о ходе выполнения.
		Если НужноОбработатьСтрок > 0 Тогда
			
			РегламентированнаяОтчетностьАлко.СообщитьПроцентВыполнения("Проверка заполнения раздела Декларация.", 
						ОбработаноСтрок, НужноОбработатьСтрок, ПроцентБезЗавершающейПроверкиДанных, РежимОтладки);
			
		КонецЕсли;
					
	КонецЦикла; 
	
	Если ЕстьИдОП Тогда			
		ДанныеОП_Декларация[ИдОП].Вставить("КолСтрокПоДекларации", КолСтрокДекларация);
	КонецЕсли;
		
КонецПроцедуры

Функция ОтчетЗаполненКорректно()
	
	СтатусПроверки = Истина;
	
	ПроверитьЗаполнениеТитульный(СтатусПроверки);

	Если ТекущееКоличествоОшибок < МаксимальноеКоличествоОшибок Тогда

	// информируем о ходе выполнения				
		Если НужноОбработатьСтрок > 0 Тогда

			РегламентированнаяОтчетностьАлко.СообщитьПроцентВыполнения("Проверка заполнения раздела Декларация.", 
					ОбработаноСтрок, НужноОбработатьСтрок, ПроцентБезЗавершающейПроверкиДанных, РежимОтладки);

		КонецЕсли;

		ПроверитьЗаполнениеДекларация(СтатусПроверки);

	КонецЕсли;
			
	КолСтрокПриПроверкеЗаполнения = ОбработаноСтрок;
		
	Возврат СтатусПроверки;
	
КонецФункции

Процедура ОтсечьНезаполненныеНеобязательныеУзлы(Узел)
	
	РегламентированнаяОтчетностьАЛКО.ОтсечьНезаполненныеНеобязательныеУзлыАЛКО(Узел);
	
КонецПроцедуры

Процедура ОбработатьУсловныеЭлементы(Знач ПараметрыВыгрузки, Узел)
	
	РегламентированнаяОтчетностьАЛКО.ОбработатьУсловныеЭлементыАЛКО(ПараметрыВыгрузки, Узел, 
						ДокументСсылкаАлкоОтчет, ТаблицаСообщений, СтатусПроверки, ВерсияБСПЧислом);
	
КонецПроцедуры

Функция ПолучитьПодчиненныйЭлемент(Узел, КодЭлемента)
	
	Возврат РегламентированнаяОтчетностьАЛКО.ПолучитьПодчиненныйЭлементАЛКО(Узел, КодЭлемента);
	
КонецФункции 

Функция НовыйУзелИзПрототипа(ПрототипУзла)
	
	Возврат РегламентированнаяОтчетностьАЛКО.НовыйУзелИзПрототипаАЛКО(ПрототипУзла);
	
КонецФункции

Процедура УстановитьЗначениеЭлемента(УзелРодитель, ИмяЭлемента, ЗначениеЭлемента)
	
	РегламентированнаяОтчетностьАЛКО.УстановитьЗначениеЭлементаАЛКО(УзелРодитель, ИмяЭлемента, ЗначениеЭлемента);
	
КонецПроцедуры

Функция ИдентификаторОП(СведенияОП)
	
	Возврат РегламентированнаяОтчетностьАЛКО.ИдентификаторОП_АЛКО(СведенияОП);
	
КонецФункции

Процедура ВывестиПоказательВXML(Узел, ЗначениеПоказателя)
	
	РегламентированнаяОтчетностьАЛКО.ВывестиПоказательВXML_АЛКО(Узел, ЗначениеПоказателя);
	
КонецПроцедуры

Функция ПроверитьДанные(Узел)
	
	Возврат РегламентированнаяОтчетностьАЛКО.ПроверитьДанныеАЛКО(Узел, 
							ДокументСсылкаАлкоОтчет, ТаблицаСообщений, СтатусПроверки);
		
КонецФункции

Процедура ЗаполнитьСправочникиДекларации(УзелСправочники)
	
	ДанныеКонтрагентов = СправочникиОтчета["Контрагенты"];
	
	ПрототипУзла_Контрагенты = ПолучитьПодчиненныйЭлемент(УзелСправочники, "Контрагенты");
	
	Для Каждого ЭлементДанныеКонтрагентов Из ДанныеКонтрагентов Цикл
		
		СтрокаКонтрагента = ЭлементДанныеКонтрагентов.Значение;
		
		Узел_Контрагенты = НовыйУзелИзПрототипа(ПрототипУзла_Контрагенты);
		
		УстановитьЗначениеЭлемента(Узел_Контрагенты, "ИдКонтр", СтрокаКонтрагента["ИдКонтр"]);
		УстановитьЗначениеЭлемента(Узел_Контрагенты, "П000000000005", СтрокаКонтрагента["П000000000005"]);
		
		Узел_Иностр 	= ПолучитьПодчиненныйЭлемент(Узел_Контрагенты, "Иностр");
		Узел_Резидент 	= ПолучитьПодчиненныйЭлемент(Узел_Контрагенты, "Резидент");
		
		Если НЕ СтрокаКонтрагента.Получить("Иностр") = Неопределено Тогда
			
			РегламентированнаяОтчетность.УдалитьУзел(Узел_Резидент);
			
			ДанныеКонтрагента = СтрокаКонтрагента["Иностр"];
			 
			Для каждого ЭлементСтруктуры Из ДанныеКонтрагента Цикл
			
				ИмяЭлементаУзла 		= ЭлементСтруктуры.Ключ;
				ЗначениеЭлементаУзла 	= ЭлементСтруктуры.Значение;
				
				УстановитьЗначениеЭлемента(Узел_Иностр, ИмяЭлементаУзла, ЗначениеЭлементаУзла);
			
			КонецЦикла;
						
		Иначе
			
			РегламентированнаяОтчетность.УдалитьУзел(Узел_Иностр);
			
			// Адрес.
			Узел_АдресКонтрагента = ПолучитьПодчиненныйЭлемент(Узел_Резидент, "П000000000006");
			
			ДанныеКонтрагента = СтрокаКонтрагента["Резидент"];
			
			СтруктураАдресКонтрагента = ДанныеКонтрагента["П000000000006"];
			
			Для каждого ЭлементСтруктуры Из СтруктураАдресКонтрагента Цикл
			
				ИмяЭлементаУзла 		= ЭлементСтруктуры.Ключ;
				ЗначениеЭлементаУзла 	= ЭлементСтруктуры.Значение;
				
				УстановитьЗначениеЭлемента(Узел_АдресКонтрагента, ИмяЭлементаУзла, ЗначениеЭлементаУзла);
			
			КонецЦикла;
			
			// ЮЛ - ФЛ.
			Узел_ЮЛ = ПолучитьПодчиненныйЭлемент(Узел_Резидент, "ЮЛ");
			Узел_ФЛ = ПолучитьПодчиненныйЭлемент(Узел_Резидент, "ФЛ");
			
			Если НЕ ДанныеКонтрагента.Получить("ЮЛ") = Неопределено Тогда
			
				РегламентированнаяОтчетность.УдалитьУзел(Узел_ФЛ);
				
				ДанныеКонтрагентаЮЛ = ДанныеКонтрагента["ЮЛ"];
				
				Для каждого ЭлементСтруктуры Из ДанныеКонтрагентаЮЛ Цикл
			
					ИмяЭлементаУзла 		= ЭлементСтруктуры.Ключ;
					ЗначениеЭлементаУзла 	= ЭлементСтруктуры.Значение;
					
					УстановитьЗначениеЭлемента(Узел_ЮЛ, ИмяЭлементаУзла, ЗначениеЭлементаУзла);
				
				КонецЦикла;
			
			Иначе
				
				РегламентированнаяОтчетность.УдалитьУзел(Узел_ЮЛ);
				
				ДанныеКонтрагентаФЛ = ДанныеКонтрагента["ФЛ"];
				
				Для каждого ЭлементСтруктуры Из ДанныеКонтрагентаФЛ Цикл
			
					ИмяЭлементаУзла 		= ЭлементСтруктуры.Ключ;
					ЗначениеЭлементаУзла 	= ЭлементСтруктуры.Значение;
					
					УстановитьЗначениеЭлемента(Узел_ФЛ, ИмяЭлементаУзла, ЗначениеЭлементаУзла);
				
				КонецЦикла;
			
			КонецЕсли; 
			
			// Лицензии.
			ПрототипУзла_Лицензии = ПолучитьПодчиненныйЭлемент(Узел_Резидент, "Лицензии");
			Лицензии = ДанныеКонтрагента["Лицензии"];
			
			Для каждого СтрокаЛицензии Из Лицензии Цикл
				
				ДанныеЛицензии = СтрокаЛицензии.Значение;
				
				Узел_Лицензии = НовыйУзелИзПрототипа(ПрототипУзла_Лицензии);
				
				Узел_Лицензия = ПолучитьПодчиненныйЭлемент(Узел_Лицензии, "Лицензия");
				
				Для каждого ЭлементСтруктуры Из ДанныеЛицензии Цикл
					
					ИмяЭлементаУзла 		= ЭлементСтруктуры.Ключ;
					ЗначениеЭлементаУзла 	= ЭлементСтруктуры.Значение;
					
					УстановитьЗначениеЭлемента(Узел_Лицензия, ИмяЭлементаУзла, ЗначениеЭлементаУзла);
					
				КонецЦикла;
			
			КонецЦикла;
			
			РегламентированнаяОтчетность.УдалитьУзел(ПрототипУзла_Лицензии);
			
		КонецЕсли; 
				
	КонецЦикла;
	
	ДанныеКонтрагентов.Очистить();
	
	РегламентированнаяОтчетность.УдалитьУзел(ПрототипУзла_Контрагенты);
	
КонецПроцедуры

Процедура ЗаполнитьСведенияДекларации(НовыйУзелОбъемОборота, ИдОП, НаличиеПоставки, НаличиеВозврата)
		
	ОбразецУзлаОборот = ПолучитьПодчиненныйЭлемент(НовыйУзелОбъемОборота, "Оборот");
	
	ДанныеДвиженийПоОП = ДанныеДвижений[ИдОП];
	
	НомерПП = 0;
	
	Для Каждого ЭлементДвиженияПоОП Из ДанныеДвиженийПоОП Цикл
		
		НаличиеОборота = Истина;
		Движение = ЭлементДвиженияПоОП.Значение;
		
	    НовыйУзелОборот = НовыйУзелИзПрототипа(ОбразецУзлаОборот);
		
		НомерПП = НомерПП + 1;
		
		УстановитьЗначениеЭлемента(НовыйУзелОборот, "ПN", НомерПП);
		
		УстановитьЗначениеЭлемента(НовыйУзелОборот, "П000000000003", Движение["П000000000003"]);
		УстановитьЗначениеЭлемента(НовыйУзелОборот, "П000000000004", Движение["П000000000004"]);
		
		ДвижениеПолучатели = Движение["Получатель"];
					
		ОбразецУзлаПолучатель = ПолучитьПодчиненныйЭлемент(НовыйУзелОборот, "Получатель");			
					
		Для каждого ЭлементПолучателя Из ДвижениеПолучатели Цикл
			
			СтрокаПолучателя = ЭлементПолучателя.Значение;
			
			НовыйУзелПолучатель = НовыйУзелИзПрототипа(ОбразецУзлаПолучатель);
			
			УстановитьЗначениеЭлемента(НовыйУзелПолучатель, "ИдПолучателя", СтрокаПолучателя["ИдПолучателя"]);
			Если НЕ СтрокаПолучателя.Получить("ИдЛицензии") = Неопределено Тогда
			    УстановитьЗначениеЭлемента(НовыйУзелПолучатель, "ИдЛицензии", СтрокаПолучателя["ИдЛицензии"]);
			КонецЕсли;
			
			СписокСтрок = Новый Структура;
			
			// Поставка.
			ОбразецУзлаПоставка = ПолучитьПодчиненныйЭлемент(НовыйУзелПолучатель, "Поставка");
			
			ПоставкиПолучателю = СтрокаПолучателя["Поставка"];
			
			Для каждого ЭлементПоставки Из ПоставкиПолучателю Цикл
			
				КлючНомерСтроки = ЭлементПоставки.Ключ;								
				СписокСтрок.Вставить(КлючНомерСтроки, "");
				
				НаличиеПоставки = Истина;
				
				СтрокаПоставки =  ЭлементПоставки.Значение;
				
				НовыйУзелПоставка = НовыйУзелИзПрототипа(ОбразецУзлаПоставка);
				
				Для каждого ЭлементСтрокиПоставки Из СтрокаПоставки Цикл
				    УстановитьЗначениеЭлемента(НовыйУзелПоставка, ЭлементСтрокиПоставки.Ключ, ЭлементСтрокиПоставки.Значение);
				КонецЦикла; 
			
			КонецЦикла; 
			
			РегламентированнаяОтчетность.УдалитьУзел(ОбразецУзлаПоставка);
			
			// Возврат.
			ОбразецУзлаВозврат = ПолучитьПодчиненныйЭлемент(НовыйУзелПолучатель, "Возврат");
			
			ВозвратыПолучателю = СтрокаПолучателя["Возврат"];
			
			Для каждого ЭлементВозврата Из ВозвратыПолучателю Цикл
			
				КлючНомерСтроки = ЭлементВозврата.Ключ;								
				СписокСтрок.Вставить(КлючНомерСтроки, "");
				
				НаличиеВозврата = Истина;
				
				СтрокаПоставки =  ЭлементВозврата.Значение;
				
				НовыйУзелВозврата = НовыйУзелИзПрототипа(ОбразецУзлаВозврат);
				
				Для каждого ЭлементСтрокиПоставки Из СтрокаПоставки Цикл
				    УстановитьЗначениеЭлемента(НовыйУзелВозврата, ЭлементСтрокиПоставки.Ключ, ЭлементСтрокиПоставки.Значение);
				КонецЦикла; 
			
			КонецЦикла; 
			
		    РегламентированнаяОтчетность.УдалитьУзел(ОбразецУзлаВозврат);
			
			// Поскольку исходная строка данных была разделена на отдельные подстроки
			// "Поставка" и "Возврат" - количество отработанных строк соответствует количеству элементов СписокСтрок.
			
			ОбработаноСтрок = ОбработаноСтрок + СписокСтрок.Количество();
			
		КонецЦикла; 
		
		РегламентированнаяОтчетность.УдалитьУзел(ОбразецУзлаПолучатель);
		
		
		// информируем о ходе выполнения				
		Если НужноОбработатьСтрок > 0 Тогда
			
			РегламентированнаяОтчетностьАлко.СообщитьПроцентВыполнения("Заполнение данными дерева выгрузки.", ОбработаноСтрок, 
										НужноОбработатьСтрок, ПроцентБезЗавершающейПроверкиДанных, РежимОтладки);
			
		КонецЕсли;
	
	КонецЦикла; 
			
	РегламентированнаяОтчетность.УдалитьУзел(ОбразецУзлаОборот);
				
КонецПроцедуры

Процедура ЗаполнитьСодержательнуюЧасть(УзелРодитель, КорневойУзел, ПараметрыВыгрузки)
		
	УзелСправочники = ПолучитьПодчиненныйЭлемент(КорневойУзел, "Справочники");
	ЗаполнитьСправочникиДекларации(УзелСправочники);
	
	Узел_Документ = УзелРодитель;

	ДанныеОП_Декларация = ДанныеОП["Декларация"];
	
	Узел_Организация = ПолучитьПодчиненныйЭлемент(Узел_Документ, "Организация");
				
	ПрототипУзла_ОбъемОборота = ПолучитьПодчиненныйЭлемент(Узел_Документ, "ОбъемОборота");
			
	Для Каждого ЭлементОП Из ДанныеОП_Декларация Цикл
	
		ИдОП		= ЭлементОП.Ключ;
		СтруктураОП = ЭлементОП.Значение;
		
		СведенияОбОП = СтруктураОП["ОП"];
				
		// заполняем сведения по ОП
		НазваниеОрганизации = СведенияОбОП.Наименование;
		КПП = СведенияОбОП.КПП;
		
		Если ПустаяСтрока(НазваниеОрганизации) И ПустаяСтрока(КПП) Тогда
			Продолжить;
		КонецЕсли;
		
		Узел_ОбъемОборота = НовыйУзелИзПрототипа(ПрототипУзла_ОбъемОборота);
		
		УстановитьЗначениеЭлемента(Узел_ОбъемОборота, "Наим", НазваниеОрганизации);			
		
		Если НЕ ПустаяСтрока(КПП) Тогда
		    УстановитьЗначениеЭлемента(Узел_ОбъемОборота, "КППЮЛ", КПП);		
		КонецЕсли;		
				
		Узел_АдрОрг = ПолучитьПодчиненныйЭлемент(Узел_ОбъемОборота, "АдрОрг");
		УстановитьЗначениеЭлемента(Узел_АдрОрг, "КодСтраны",  СведенияОбОП.КодСтраны);
		УстановитьЗначениеЭлемента(Узел_АдрОрг, "Индекс",     СведенияОбОП.Индекс);
		УстановитьЗначениеЭлемента(Узел_АдрОрг, "КодРегион",  СведенияОбОП.КодРегиона);
		УстановитьЗначениеЭлемента(Узел_АдрОрг, "Район",      СведенияОбОП.Район);
		УстановитьЗначениеЭлемента(Узел_АдрОрг, "Город",      СведенияОбОП.Город);
		УстановитьЗначениеЭлемента(Узел_АдрОрг, "НаселПункт", СведенияОбОП.НаселенныйПункт);
		УстановитьЗначениеЭлемента(Узел_АдрОрг, "Улица",      СведенияОбОП.Улица);
		УстановитьЗначениеЭлемента(Узел_АдрОрг, "Дом",        СведенияОбОП.Дом);
		УстановитьЗначениеЭлемента(Узел_АдрОрг, "Корпус",     СведенияОбОП.Корпус);
		УстановитьЗначениеЭлемента(Узел_АдрОрг, "Литера",     СведенияОбОП.Литера);
		УстановитьЗначениеЭлемента(Узел_АдрОрг, "Кварт",      СведенияОбОП.Квартира);
		
		НаличиеПоставки = Ложь;
		НаличиеВозврата = Ложь;
		
		ЗаполнитьСведенияДекларации(Узел_ОбъемОборота, ИдОП, НаличиеПоставки, НаличиеВозврата);
				
		УстановитьЗначениеЭлемента(Узел_ОбъемОборота, "НаличиеПоставки", ?(НаличиеПоставки, "true", "false"));
		УстановитьЗначениеЭлемента(Узел_ОбъемОборота, "НаличиеВозврата", ?(НаличиеВозврата, "true", "false"));
				
	КонецЦикла;
	
	// Для пустой декларации надо выгрузить хотя бы один узел ОбъемОборота.
	// В качестве ОП - сама организация.
	Если ДанныеОП_Декларация.Количество() = 0 Тогда
		
		Узел_ОбъемОборота = НовыйУзелИзПрототипа(ПрототипУзла_ОбъемОборота);
		
		// заполняем сведения по ОП
		НазваниеОрганизации = ПараметрыВыгрузки.НаимЮЛ;
		КПП = "";
		ПараметрыВыгрузки.Свойство("КППЮЛ", КПП);
				
		УстановитьЗначениеЭлемента(Узел_ОбъемОборота, "Наим", НазваниеОрганизации);
		Если НЕ ПустаяСтрока(КПП) Тогда
		    УстановитьЗначениеЭлемента(Узел_ОбъемОборота, "КППЮЛ", КПП);		
		КонецЕсли;
				
		УстановитьЗначениеЭлемента(Узел_ОбъемОборота, "НаличиеПоставки", "false");
		УстановитьЗначениеЭлемента(Узел_ОбъемОборота, "НаличиеВозврата", "false");
		
		Узел_АдрОрг = ПолучитьПодчиненныйЭлемент(Узел_ОбъемОборота, "АдрОрг");
		
		АдресОрганизации = ПараметрыВыгрузки.АдресОрганизации;
		
		УстановитьЗначениеЭлемента(Узел_АдрОрг, "КодСтраны",  АдресОрганизации.КодСтраны);
				
		УстановитьЗначениеЭлемента(Узел_АдрОрг, "Индекс",     АдресОрганизации.Индекс);
		УстановитьЗначениеЭлемента(Узел_АдрОрг, "КодРегион",  АдресОрганизации.КодРегиона);
		УстановитьЗначениеЭлемента(Узел_АдрОрг, "Район",      АдресОрганизации.Район);
		УстановитьЗначениеЭлемента(Узел_АдрОрг, "Город",      АдресОрганизации.Город);
		УстановитьЗначениеЭлемента(Узел_АдрОрг, "НаселПункт", АдресОрганизации.НаселенныйПункт);
		УстановитьЗначениеЭлемента(Узел_АдрОрг, "Улица",      АдресОрганизации.Улица);
		УстановитьЗначениеЭлемента(Узел_АдрОрг, "Дом",        АдресОрганизации.Дом);
		УстановитьЗначениеЭлемента(Узел_АдрОрг, "Корпус",     АдресОрганизации.Корпус);
		УстановитьЗначениеЭлемента(Узел_АдрОрг, "Литера",     АдресОрганизации.Литера);
		УстановитьЗначениеЭлемента(Узел_АдрОрг, "Кварт",      АдресОрганизации.Квартира);
		
	КонецЕсли;
	
	РегламентированнаяОтчетность.УдалитьУзел(ПрототипУзла_ОбъемОборота);
	
	КолСтрокЗаполнено = ОбработаноСтрок - КолСтрокПриПроверкеЗаполнения;
	
	Если КолСтрокЗаполнено <> КолСтрокПриПроверкеЗаполнения Тогда
		
	    // выгружено не то количество, что есть по данным заполнения отчета
		ТекстОписанияОшибки = "В выгрузку попало меньшее количество строк, чем заполнено по разделу Декларация!
							|Немедленно свяжитесь с техподдержкой, желательно выслать выгрузку 
							|Вашей информационной базы в виде файла .dt";
				
		СтруктураОшибки = Новый Структура;
		СтруктураОшибки.Вставить("ТекстОписанияОшибки", ТекстОписанияОшибки);
		СтруктураОшибки.Вставить("Раздел", "Титульный");
		СтруктураОшибки.Вставить("Показатель", Неопределено);
		СтруктураОшибки.Вставить("ЛистРаздела", Неопределено);
		СтруктураОшибки.Вставить("ТипОшибки", "НеВсяИнформацияПопалаВВыгрузку");
		
		СообщитьОбОшибкеЗаполнения(ДокументСсылкаАлкоОтчет, ТаблицаСообщений, СтатусПроверки, СтруктураОшибки,
									МаксимальноеКоличествоОшибок, ТекущееКоличествоОшибок);
								
	КонецЕсли; 
		
КонецПроцедуры

Процедура ЗаполнитьДаннымиУзел(ПараметрыВыгрузки, Узел,
		НомерСтроки = Неопределено)

	Для Каждого Стр из Узел.Строки Цикл
		Если Стр.Тип = "С" ИЛИ Стр.Тип = "C" Тогда // учтем оба варианта: кириллицу и латиницу
			Если ПараметрыВыгрузки.Свойство("ИмяКлючевогоУзлаСодержательнойЧасти")
					И Стр.Код = ПараметрыВыгрузки.ИмяКлючевогоУзлаСодержательнойЧасти Тогда
				ЗаполнитьДаннымиУзел(ПараметрыВыгрузки, Стр);
				ЗаполнитьСодержательнуюЧасть(Стр, Узел, ПараметрыВыгрузки);
			Иначе
				ЗаполнитьДаннымиУзел(ПараметрыВыгрузки, Стр);
			КонецЕсли;
		Иначе
			Если ПустаяСтрока(Стр.ЗначениеПоУмолчанию) Тогда

				Если НЕ ПустаяСтрока(Стр.Ключ) Тогда

					НайденКлюч = Истина;
					КлючВыгрузки = Строка(Стр.Ключ);
					ПозицияТочки = СтрНайти(КлючВыгрузки, ".");
					СтруктураПараметровВыгрузки = ПараметрыВыгрузки;

					Пока ПозицияТочки > 0 Цикл

						ПромежуточныйКлюч = Лев(КлючВыгрузки, ПозицияТочки - 1);
						КлючВыгрузки = Сред(КлючВыгрузки, ПозицияТочки + 1);

						Если СтруктураПараметровВыгрузки.Свойство(ПромежуточныйКлюч) Тогда
							СтруктураПараметровВыгрузки = СтруктураПараметровВыгрузки[ПромежуточныйКлюч];
						Иначе
							НайденКлюч = Ложь;
							Прервать;
						КонецЕсли;

						ПозицияТочки = СтрНайти(КлючВыгрузки, ".");

					КонецЦикла;

					Если НайденКлюч Тогда
						
						ЗначениеПараметра = Неопределено;
                    	СтруктураПараметровВыгрузки.Свойство(КлючВыгрузки, ЗначениеПараметра);
						
						Если ЗначениеЗаполнено(ЗначениеПараметра) Тогда
							ВывестиПоказательВXML(Стр, ЗначениеПараметра);
						Иначе	
							Стр.Значение = "";
						КонецЕсли; 
                    	
					Иначе
						Стр.Значение = "";
					КонецЕсли;

				Иначе
					Стр.Значение = "";
				КонецЕсли;

			ИначеЕсли Лев(Стр.ЗначениеПоУмолчанию, 1) = "&" Тогда

				Ключ = Сред(Стр.ЗначениеПоУмолчанию, 2);

				НайденКлюч = Истина;
				КлючВыгрузки = Строка(Ключ);
				ПозицияТочки = СтрНайти(КлючВыгрузки, ".");
				СтруктураПараметровВыгрузки = ПараметрыВыгрузки;

				Пока ПозицияТочки > 0 Цикл

					ПромежуточныйКлюч = Лев(КлючВыгрузки, ПозицияТочки - 1);
					КлючВыгрузки = Сред(КлючВыгрузки, ПозицияТочки + 1);

					Если СтруктураПараметровВыгрузки.Свойство(ПромежуточныйКлюч) Тогда
						СтруктураПараметровВыгрузки = СтруктураПараметровВыгрузки[ПромежуточныйКлюч];
					Иначе
						НайденКлюч = Ложь;
						Прервать;
					КонецЕсли;

					ПозицияТочки = СтрНайти(КлючВыгрузки, ".");

				КонецЦикла;

				Если НайденКлюч Тогда
						
					ЗначениеПараметра = Неопределено;
                	СтруктураПараметровВыгрузки.Свойство(КлючВыгрузки, ЗначениеПараметра);
					
					Если ЗначениеЗаполнено(ЗначениеПараметра) Тогда
						ВывестиПоказательВXML(Стр, ЗначениеПараметра);
					Иначе	
						Стр.Значение = "";
					КонецЕсли; 
                	
				Иначе
					Стр.Значение = "";
				КонецЕсли;

			Иначе
				ВывестиПоказательВXML(Стр, Стр.ЗначениеПоУмолчанию);				
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

Процедура ЗаполнитьДанными()
	
	Если НужноОбработатьСтрок > 0 Тогда

		РегламентированнаяОтчетностьАлко.СообщитьПроцентВыполнения("Заполнение данными дерева выгрузки.", 
				ОбработаноСтрок, НужноОбработатьСтрок, ПроцентБезЗавершающейПроверкиДанных, РежимОтладки);

	КонецЕсли;


	ОбработатьУсловныеЭлементы(ПараметрыВыгрузки, ДеревоВыгрузки); // формируем точную структуру XML-макета
	ЗаполнитьДаннымиУзел(ПараметрыВыгрузки, ДеревоВыгрузки); // заполняем дерево данными

	Если НужноОбработатьСтрок > 0 Тогда

		РегламентированнаяОтчетностьАлко.СообщитьПроцентВыполнения("Заполнение данными дерева выгрузки.", 
				ОбработаноСтрок, НужноОбработатьСтрок, ПроцентБезЗавершающейПроверкиДанных, РежимОтладки);

	КонецЕсли;

	ОтсечьНезаполненныеНеобязательныеУзлы(ДеревоВыгрузки);

	Если НужноОбработатьСтрок > 0 Тогда

		РегламентированнаяОтчетностьАлко.СообщитьПроцентВыполнения("Заполнение данными дерева выгрузки.", 
				ПроцентБезЗавершающейПроверкиДанных, 100, , РежимОтладки);

	КонецЕсли;
	
КонецПроцедуры

Функция ПроверитьВыгрузку(ПараметрыДокумента, ЭтоВыгрузка = Ложь) Экспорт
	
	ОбъектЭтогоОтчета = ЭтотОбъект;
	
	ВерсияБСПЧислом = РегламентированнаяОтчетностьАлко.ПолучитьВерсиюБСПЧислом();

	РежимОтладки = ОбщегоНазначенияКлиентСервер.РежимОтладки();

	ДокументСсылкаАлкоОтчет		= ПараметрыДокумента.ДокументСсылка;

	ИмяФормыОбъекта				= ПараметрыДокумента.ИмяФормыОбъекта;
	ВспомогательныйАдрес		= ПараметрыДокумента.ВспомогательныйАдрес;
	ПараметрыФормы				= ПараметрыДокумента.ПараметрыФормы;
	ПараметрыВыгрузки			= ПараметрыДокумента.ПараметрыВыгрузки;	
		
	
	// Таблица результата
	ТаблицаСообщений = РегламентированнаяОтчетностьАлко.СоздатьТаблицуСообщенийОбОшибках();
	ТаблицаСообщенийДляСведения = РегламентированнаяОтчетностьАлко.СоздатьТаблицуСообщенийОбОшибках();
	
	ТаблицаСтраницыЛицензии = ПараметрыФормы.ТаблицаСтраницыЛицензии;
	ТаблицаСтраницыДекларация  = ПараметрыФормы.ТаблицаСтраницыДекларация;
		
	ТабП0000000002 = ПараметрыФормы.ТабП0000000002;
	ТабП0000100003 = ПараметрыФормы.ТабП0000100003;
	
	СтруктураРеквизитовФормы = ПараметрыФормы.СтруктураРеквизитовФормы;
	СтруктураСервисРегистров = ПараметрыФормы.СтруктураСервисРегистров;
	
	ОбработаноСтрок = 0;
	ШагИнформирования = 200;
	НетОшибокПроверки = Истина;

	ДатаНачалаОтчета = СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета;
	ДатаКонцаОтчета = СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета;
	НижняяГраницаДатыПоXSD = Неопределено;
	ВерхняяГраницаДатыПоXSD = Неопределено;
	
	МаксимальноеКоличествоОшибок = 1000;
	ТекущееКоличествоОшибок = 0;
	МаксимальноеКоличествоПредупреждений = 1000; 
	ТекущееКоличествоПредупреждений = 0;
	
	ДеревоВыгрузки = ИзвлечьСтруктуруXML();
	
	ВсегоСтрокПоДекларации = ПолучитьКоличествоСтрокПоГруппе(СтруктураРеквизитовФормы.мИдГруппы12, Истина);
	
	ДанныеДвижений = Новый Соответствие;
	
	ДанныеОП = Новый Соответствие;
	ДанныеОП.Вставить("Декларация", Новый Соответствие);
		
	СправочникиОтчета = Новый Соответствие;
	СправочникиОтчета.Вставить("Контрагенты", Новый Соответствие);
				
	СчетчикИдПоставщиков = 0;
	
	// один проход при проверке заполнения,
	// второй - при заполнении выгрузки - все вместе 90%
	// на завершающую проверку данных отводим 10%
	НужноОбработатьСтрок = 2 * ВсегоСтрокПоДекларации;
	// при выгрузке проверка заполнения строк и заполнение дерева выгрузки составляет примерно 84%
	// при проверке выгрузки - примерно 90% от общего времени выполнения.
	ПроцентБезЗавершающейПроверкиДанных = ?(ЭтоВыгрузка, 84, 90);
	
	// ОписаниеСтруктурыАдресаИзОтчета	- Структура.
	//		Поля структуры соответствуют структуре, получаемой при вызове
	//		функции ПолучитьПустуюСтруктуруАдреса(). 
	//		Может не содержать поля УникальныйНомерФИАС, ДополнительныеКоды, АдресXML, КодСтраны
	//		Страна, КодРегиона, Регион, ТипДома, ТипКорпуса, ТипКвартиры, ПредставлениеАдреса.
	//		При наличии перечисленных полей - они будут удалены!
	//		
	//		Значениями всех полей структуры является структура вида:
	//			* ПредставлениеПоля - осмысленное название поля адреса.
	//			* МинДлина - минимальная длина строки поля адреса, к которому относится структура.
	//			* МаксДлина- максимальная длина строки поля адреса, к которому относится структура.
	//			* ТолькоЦифры - Булево. Признак что в поле адреса должны быть только цифры.
	//
	// Эта структура используется в РегламентированнаяОтчетностьАЛКО.ПроверитьАдрес() для контроля типа и длины полей.
	// Если не указана - в РегламентированнаяОтчетностьАЛКО.ПроверитьАдрес() используется структура по умолчанию,
	// на момент написания кода структура по умолчанию соответствует описанию адреса во всех схемах XSD ФСРАР.
	//
	// Если в будущем описание адреса для конкретных отчетов изменится - нужно заполнять структуру ОписаниеСтруктурыАдресаИзОтчета
	// для этого отчета. Если описание изменится для всех отчетов - нужно менять описание структуры в
	// РегламентированнаяОтчетностьАЛКО.ПроверитьАдрес().
	ОписаниеСтруктурыАдресаИзОтчета = Неопределено;

	ИмяОбластиКодовМакета = "ВидыПродукции";
	СписокКодовПродукции = РегламентированнаяОтчетностьАЛКО.МассивКодовИзМакетаСписки(ИмяОбластиКодовМакета, 
														ДатаКонцаОтчета, ИмяФормыОбъекта, ОбъектЭтогоОтчета);
	
	Если НЕ ОтчетЗаполненКорректно() Тогда

		Результат = Новый Структура;
		Результат.Вставить("ТаблицаСообщений", ТаблицаСообщений);
		Результат.Вставить("ТаблицаСообщенийДляСведения", ТаблицаСообщенийДляСведения);
		Возврат Результат;

	КонецЕсли;

	// Информируем о ходе выполнения.
	Если НужноОбработатьСтрок > 0 Тогда

		РегламентированнаяОтчетностьАлко.СообщитьПроцентВыполнения("Заполнение данными дерева выгрузки.", 
				ОбработаноСтрок, НужноОбработатьСтрок, ПроцентБезЗавершающейПроверкиДанных, РежимОтладки);

	КонецЕсли;

	ЗаполнитьДанными();

	Если ТекущееКоличествоОшибок > 0 Тогда

		Результат = Новый Структура;
		Результат.Вставить("ТаблицаСообщений", ТаблицаСообщений);
		Результат.Вставить("ТаблицаСообщенийДляСведения", ТаблицаСообщенийДляСведения);
		Возврат Результат;

	КонецЕсли;

	// Информируем о ходе выполнения.				
	Если НужноОбработатьСтрок > 0 Тогда

		РегламентированнаяОтчетностьАлко.СообщитьПроцентВыполнения("Проверка данных по схеме выгрузки.", 
				ПроцентБезЗавершающейПроверкиДанных, 100, , РежимОтладки);

	КонецЕсли;


	Если НЕ ПроверитьДанные(ДеревоВыгрузки) Тогда
	// Информируем о ходе выполнения.
		Если НужноОбработатьСтрок > 0 Тогда

			РегламентированнаяОтчетностьАлко.СообщитьПроцентВыполнения("", 100, 100, , РежимОтладки);

		КонецЕсли;

		Результат = Новый Структура;
		Результат.Вставить("ТаблицаСообщений", ТаблицаСообщений);
		Результат.Вставить("ТаблицаСообщенийДляСведения", ТаблицаСообщенийДляСведения);
		Возврат Результат;

	КонецЕсли;

	// Информируем о ходе выполнения.				
	Если НужноОбработатьСтрок > 0 Тогда

		РегламентированнаяОтчетностьАлко.СообщитьПроцентВыполнения(?(ЭтоВыгрузка, "Запись выгрузки в XML.", ""), 
				?(ЭтоВыгрузка, 93, 100), 100, , РежимОтладки);

	КонецЕсли;

	Результат = Новый Структура;
	Результат.Вставить("ТаблицаСообщений", ТаблицаСообщений);
	Результат.Вставить("ТаблицаСообщенийДляСведения", ТаблицаСообщенийДляСведения);

	Возврат Результат;
	
КонецФункции

Функция СписокРазделовОшибок() Экспорт

	СписокРазделов = Новый Массив;
	СписокРазделов.Добавить("Титульный");
	// Раздела "Лицензии" нет.
	СписокРазделов.Добавить("Декларация");
	
	Возврат СписокРазделов;

КонецФункции
#КонецОбласти


#Область Выгрузка

Функция ВыгрузитьОтчет(ПараметрыДокумента) Экспорт

	ЭтоВыгрузка = Истина;

	Результат = ПроверитьВыгрузку(ПараметрыДокумента, ЭтоВыгрузка);

	Если ТекущееКоличествоОшибок > 0 Тогда

	// Есть сообщения о ошибках
		Возврат Результат;

	КонецЕсли;

	// Проверка прошла успешно.
	// Пишем XML в файл.
	ИмяФайлаXML = Неопределено;


	// расширение по умолчанию - .tmp
	ИмяФайлаXML = ПолучитьИмяВременногоФайла();

	РегламентированнаяОтчетностьАЛКО.ВыгрузитьДеревоВXML(ДеревоВыгрузки, ПараметрыВыгрузки, ИмяФайлаXML);

	// информируем о ходе выполнения				
	Если НужноОбработатьСтрок > 0 Тогда

		РегламентированнаяОтчетностьАлко.СообщитьПроцентВыполнения("", 100, 100, , РежимОтладки);

	КонецЕсли;

	Результат.Вставить("ИмяФайлаXML", ИмяФайлаXML);

	Возврат Результат;

КонецФункции 
#КонецОбласти 


#Область Печать

Функция ПечататьРаздел(СтрокаРаздела, ЧтоИскать = Неопределено)
	
	// Если в настройках взведен флаг печати, то добавляем раздел в список печатаемых и выходим.
	Если СтрокаРаздела.ВыводНаПечать <> 0 Тогда
		СтруктураРеквизитовФормы.мПечатаемыеРазделы.Добавить(СтрокаРаздела.ИмяСтраницы);
		Возврат 1;
	КонецЕсли;
	
	Возврат 0;
	
КонецФункции

Функция ПечатьОтчета(ПараметрыДокумента)  Экспорт
	
	ОбъектЭтогоОтчета = ЭтотОбъект;
	
	ДокументСсылкаАлкоОтчет		= ПараметрыДокумента.ДокументСсылка;

	ИмяФормыОбъекта				= ПараметрыДокумента.ИмяФормыОбъекта;
	ВспомогательныйАдрес		= ПараметрыДокумента.ВспомогательныйАдрес;
	ПараметрыФормы				= ПараметрыДокумента.ПараметрыФормы;
	
	ВидПечати					= ПараметрыДокумента.ВидПечати;
	
	ТаблицаСтраницыЛицензии = ПараметрыФормы.ТаблицаСтраницыЛицензии;
	ТаблицаСтраницыДекларация  = ПараметрыФормы.ТаблицаСтраницыДекларация;
		
	ТабП0000000002 				= ПараметрыФормы.ТабП0000000002;
	ТабП0000100003 				= ПараметрыФормы.ТабП0000100003;
	
	СтруктураСервисРегистров 	= ПараметрыФормы.СтруктураСервисРегистров;
	
	СтруктураРеквизитовФормы = ПараметрыФормы.СтруктураРеквизитовФормы;
	
	ВсегоСтрокПоЛицензиям = ПолучитьКоличествоСтрокПоГруппе(СтруктураРеквизитовФормы.мИдГруппы01, Истина);
	ВсегоСтрокПоДекларации = ПолучитьКоличествоСтрокПоГруппе(СтруктураРеквизитовФормы.мИдГруппы12, Истина);
	
	
	// Один проход при выводе в целом по организации,
	// второй - при выводе по ОП
	// Лицензии выводятся один раз.
	// Все это в 2 кратном размере, поскольку сначала вся информация отбирается в запросе.
	НужноОбработатьСтрок = (2*ВсегоСтрокПоДекларации + ВсегоСтрокПоЛицензиям)*2;
	
	ОбработаноСтрок = 0;
	
	Если ВидПечати = "ПечатьФайлZIP" Тогда
		
	    ТипЭкспорта = СтруктураРеквизитовФормы.ТипЭкспорта;
		
		Если ТипЭкспорта = ТипФайлаТабличногоДокумента.PDF Тогда
		    ПроцентБезКонвертацииАрхивации = 14;
		ИначеЕсли ТипЭкспорта = ТипФайлаТабличногоДокумента.XLSX Тогда
			ПроцентБезКонвертацииАрхивации = 55;
		ИначеЕсли ТипЭкспорта = ТипФайлаТабличногоДокумента.MXL Тогда
			// Только сжать.
			ПроцентБезКонвертацииАрхивации = 95;
		ИначеЕсли ТипЭкспорта = ТипФайлаТабличногоДокумента.HTML Тогда
			ПроцентБезКонвертацииАрхивации = 20;
		КонецЕсли; 
		
	Иначе
		ПроцентБезКонвертацииАрхивации = 100;
	КонецЕсли; 
	
	СтруктураДанныхТитульный = ПараметрыФормы.СтруктураДанныхТитульный;
	мДеревоВыбранныхСтраниц  = ПараметрыФормы.мДеревоВыбранныхСтраниц;
	НомерКорректировки		 = ПараметрыФормы.НомерКорректировки;
	ДополнительныеДанные	 = ПараметрыФормы.ДополнительныеДанные;
	ДатаПодписи				 = ПараметрыФормы.ДатаПодписи;
	
	СтруктураПараметров = Новый Структура;
	
	Для Каждого СтрокаУровня1 Из мДеревоВыбранныхСтраниц.Строки Цикл
		
		Пометка = ПечататьРаздел(СтрокаУровня1);

		ИмяСтраницыПанели  = СтрокаУровня1.ИмяСтраницы;
		НаименованиеЛиста  = СтрокаУровня1.Представление;
		ОриентацияЛиста    = СтрокаУровня1.ОриентацияСтраницы;
		ИмяОбластиТаблПоля = СтрокаУровня1.ИмяОбластиТабличногоПоля;

		Если Пометка = 0 Тогда
			Продолжить;
		КонецЕсли;

		СтруктураПараметров.Очистить();
		СтруктураПараметров.Вставить("НаименованиеЛиста",  НаименованиеЛиста);
		СтруктураПараметров.Вставить("ОриентацияЛиста",    ОриентацияЛиста);
		СтруктураПараметров.Вставить("ИмяСтраницы",        ИмяСтраницыПанели);
		СтруктураПараметров.Вставить("ИмяРаздела",        ИмяСтраницыПанели);
		Структурапараметров.Вставить("ИмяОбластиТаблПоля", ИмяОбластиТаблПоля);
		СтруктураПараметров.Вставить("ВидПечати",          ВидПечати);
		СтруктураПараметров.Вставить("ИмяФормыОбъекта",    ИмяФормыОбъекта);

		
		Если ИмяСтраницыПанели = "Титульный" Тогда
			
			ВывестиНаПечатьТитульный(СтруктураПараметров);	
			
		ИначеЕсли ИмяСтраницыПанели = "Декларация" Тогда
			
			ВывестиНаПечатьДекларация(СтруктураПараметров);
							
		ИначеЕсли ИмяСтраницыПанели = "Лицензии" Тогда
			
			ВывестиНаПечатьРазделЛицензии(СтруктураПараметров);
		
		КонецЕсли;
		
	КонецЦикла;
	
	// Информируем о ходе выполнения.				
	Если НужноОбработатьСтрок > 0 Тогда
				
		РегламентированнаяОтчетностьАлко.СообщитьПроцентВыполнения(
		?(ВидПечати = "ПечатьФайлZIP" , "Конвертация в выбранный формат и архивация.", ""), 
		НужноОбработатьСтрок, НужноОбработатьСтрок, ПроцентБезКонвертацииАрхивации, РежимОтладки);
		
	КонецЕсли;
	
	Возврат СтруктураРеквизитовФормы;
	
КонецФункции

Процедура ВывестиНаПечатьТитульный(СтруктураПараметровСтраницы)
	
	НастройкиСтраницы = Новый Структура;
		
	НастройкиСтраницы.Вставить("ОтображатьЗаголовки", 	Ложь);
	НастройкиСтраницы.Вставить("ОтображатьСетку", 		Ложь);
	НастройкиСтраницы.Вставить("ЧерноБелыйПросмотр", 	Истина);
	НастройкиСтраницы.Вставить("ЧерноБелаяПечать", 		Истина);
	НастройкиСтраницы.Вставить("Автомасштаб", 			Истина);
	НастройкиСтраницы.Вставить("ОриентацияСтраницы", 	ОриентацияСтраницы.Портрет);
	НастройкиСтраницы.Вставить("ПолеСверху", 			5);
	НастройкиСтраницы.Вставить("ПолеСнизу", 			5);
	НастройкиСтраницы.Вставить("ПолеСлева", 			5);
	НастройкиСтраницы.Вставить("ПолеСправа", 			5);
	
	СтруктураПараметровСтраницы.Вставить("НастройкиСтраницы", 			НастройкиСтраницы);
	СтруктураПараметровСтраницы.Вставить("СтруктураДанныхТитульный", 	СтруктураДанныхТитульный);
	СтруктураПараметровСтраницы.Вставить("ДокументСсылкаАлкоОтчет", 	ДокументСсылкаАлкоОтчет);
	
	РегламентированнаяОтчетностьАЛКО.ВывестиНаПечатьТитульный(	
		СтруктураПараметровСтраницы, СтруктураРеквизитовФормы, ОбъектЭтогоОтчета);
								
КонецПроцедуры

Процедура ВывестиНаПечатьРазделЛицензии(СтруктураПараметровСтраницы)
	
	НастройкиСтраницы = Новый Структура;
		
	НастройкиСтраницы.Вставить("ОтображатьЗаголовки", 	Ложь);
	НастройкиСтраницы.Вставить("ОтображатьСетку", 		Ложь);
	НастройкиСтраницы.Вставить("ЧерноБелыйПросмотр", 	Истина);
	НастройкиСтраницы.Вставить("ЧерноБелаяПечать", 		Истина);
	НастройкиСтраницы.Вставить("Автомасштаб", 			Истина);
	НастройкиСтраницы.Вставить("ОриентацияСтраницы", 	ОриентацияСтраницы.Портрет);
	НастройкиСтраницы.Вставить("ПолеСверху", 			10);
	НастройкиСтраницы.Вставить("ПолеСнизу", 			5);
	НастройкиСтраницы.Вставить("ПолеСлева", 			5);
	НастройкиСтраницы.Вставить("ПолеСправа", 			5);
	
	СтруктураПараметровСтраницы.Вставить("НастройкиСтраницы", 				НастройкиСтраницы);
	СтруктураПараметровСтраницы.Вставить("СтруктураДанныхТитульный", 		СтруктураДанныхТитульный);
	СтруктураПараметровСтраницы.Вставить("СтруктураСервисРегистров", 		СтруктураСервисРегистров);
	СтруктураПараметровСтраницы.Вставить("ТаблицаСтраницыЛицензии", 		ТаблицаСтраницыЛицензии);
	СтруктураПараметровСтраницы.Вставить("НужноОбработатьСтрок", 			НужноОбработатьСтрок);
	СтруктураПараметровСтраницы.Вставить("ПроцентБезКонвертацииАрхивации", 	ПроцентБезКонвертацииАрхивации);	
	СтруктураПараметровСтраницы.Вставить("ДокументСсылкаАлкоОтчет", 		ДокументСсылкаАлкоОтчет);
		
	РегламентированнаяОтчетностьАЛКО.ВывестиНаПечатьРазделЛицензии(
					СтруктураПараметровСтраницы, СтруктураРеквизитовФормы,
					ОбработаноСтрок, ОбъектЭтогоОтчета, РежимОтладки);
				
КонецПроцедуры

Процедура ВывестиНаПечатьДекларация(СтруктураПараметровСтраницы)
	
	// В структуре СтруктураПараметровСтраницы уже установлены свойства 
	// ИмяФормыОбъекта, ИмяРаздела, НаименованиеЛиста - в процедуре ПечатьОтчета().
	
	СтруктураПараметровСтраницы.Вставить("ДокументСсылкаАлкоОтчет", 	ДокументСсылкаАлкоОтчет);
	
	СтруктураПараметровСтраницы.Вставить("СтруктураДанныхТитульный", 	СтруктураДанныхТитульный);
	СтруктураПараметровСтраницы.Вставить("СтруктураСервисРегистров", 	СтруктураСервисРегистров);
	СтруктураПараметровСтраницы.Вставить("ДополнительныеДанные", 		ДополнительныеДанные);
	СтруктураПараметровСтраницы.Вставить("ТаблицаСтраницыРаздела", 		ТаблицаСтраницыДекларация);
	
	// Настройки листа.
	НастройкиСтраницы = Новый Структура;		
	НастройкиСтраницы.Вставить("ОтображатьЗаголовки", 	Ложь);
	НастройкиСтраницы.Вставить("ОтображатьСетку", 		Ложь);
	НастройкиСтраницы.Вставить("ЧерноБелыйПросмотр", 	Истина);
	НастройкиСтраницы.Вставить("ЧерноБелаяПечать", 		Истина);
	НастройкиСтраницы.Вставить("Автомасштаб", 			Истина);
	НастройкиСтраницы.Вставить("ОриентацияСтраницы", 	ОриентацияСтраницы.Ландшафт);
	НастройкиСтраницы.Вставить("ПолеСверху", 			5);
	НастройкиСтраницы.Вставить("ПолеСнизу", 			5);
	НастройкиСтраницы.Вставить("ПолеСлева", 			5);
	НастройкиСтраницы.Вставить("ПолеСправа", 			5);
		
	СтруктураПараметровСтраницы.Вставить("НастройкиСтраницы", НастройкиСтраницы);
	
	// Высоты в стандартных строках с установленным свойством "Автовысота" (11,25).
	// Вычисляются методом пробной печати заведомо большого количества строк.
	// Например ВысотаСтраницыВСтроках = 120 и строк в отчете 200, значения короткие чтобы в одну строку 
	// помещались в поле.
	// После печати считается сколько поместилось на странице, с учетом что некоторые строки высотой в 2-3
	// "стандартных" - это и есть правильная ВысотаСтраницыВСтроках. 
	// Лучше ставить с небольшим запасом, в меньшую сторону. Если строк на листе вышло 100, лучше поставить 95.
	// Остальные высоты считаются по макету - сколько стандартных строк по высоте занимают.
	СтруктураВысот = Новый Структура;
	СтруктураВысот.Вставить("ВысотаСтраницыВСтроках", 			100);
	СтруктураВысот.Вставить("Высота_НомерСтраницыВСтроках", 	1);
	СтруктураВысот.Вставить("Высота_ЗаголовокЛистаВСтроках", 	3);
	СтруктураВысот.Вставить("Высота_ПустаяСтрокаВСтроках", 		1);
	СтруктураВысот.Вставить("Высота_ЗаголовокТаблицыВСтроках", 	10);
	СтруктураВысот.Вставить("Высота_СтрокаОПВСтроках", 			2);
	СтруктураВысот.Вставить("Высота_ПодвалВСтроках", 			0);
	
	СтруктураПараметровСтраницы.Вставить("СтруктураВысот", СтруктураВысот);
	
	
		
	НастройкиАлгоритмаПечати = Новый Структура;
	
	/////////////////////////////////////////////////////////////
	// Общие настройки печати по разделу.
	/////////////////////////////////////////////////////////////
	
	НастройкиАлгоритмаПечати.Вставить("ИмяОбластиПустаяСтрока", 			"ПустаяСтрока");
	НастройкиАлгоритмаПечати.Вставить("ИмяОбластиПодвал", 					"");
	
    Если СтруктураДанныхТитульный.ЭтоПБОЮЛ Тогда
		
	    НастройкиАлгоритмаПечати.Вставить("ИмяОбластиОргДиректор", 				"ИндивидуальныйПредприниматель");
		НастройкиАлгоритмаПечати.Вставить("ИмяОбластиОргБухгалтер", 			"");
		
	Иначе
				
	    НастройкиАлгоритмаПечати.Вставить("ИмяОбластиОргДиректор", 				"ОргДиректор");	
	    НастройкиАлгоритмаПечати.Вставить("ИмяОбластиОргБухгалтер", 			"ОргБухгалтер");
		
	КонецЕсли;
	
	НастройкиАлгоритмаПечати.Вставить("ВыводитьСводнуюТаблицуПоОрганизацииВЦелом", 	Истина);
	НастройкиАлгоритмаПечати.Вставить("ВыводитьВозвратыЗаДекларацией", 				Ложь);
	// Описание заголовка и шапки таблицы.
	НастройкиАлгоритмаПечати.Вставить("ИмяОбластиНомерСтраницы", 			"НомерСтраницы");	
	НастройкиАлгоритмаПечати.Вставить("ИмяОбластиЗаголовокЛиста", 			"ЗаголовокЛиста");	
	НастройкиАлгоритмаПечати.Вставить("ИмяОбластиЗаголовокТаблицы", 		"ЗаголовокТаблицы");
	
	// СписокПереносимыхПолей - список, значения которого - количество стандартных символов, помещающихся в 
	// в одну строчку по длине поля ,при шрифте и величине шрифта, установленных для поля в макете в области
	// "СтрокаТаблицы" или аналогичном.	
	// В представлении элементов списка хранится имена ИмяПоляПереносимойСтроки, т.е поля,
	// в котором слова могут переносится на следующую строку, если не хватает длины.
	// Строка "СтрокаТаблицы" или аналогичная должна иметь настройку АвтовысотаСтроки = Истина.
	//
	// В списке указываются поля с привязкой к ИДгруппы таблицы раздела (ресурсов в регистре).
	// Действуют и на общую часть по организации и на часть по ОП.
	СписокПереносимыхПолей = Новый СписокЗначений;
	СписокПереносимыхПолей.Добавить(28, "П000010000301");
	СписокПереносимыхПолей.Добавить(28, "П000010000304");
	СписокПереносимыхПолей.Добавить(28, "П000010000305");
	СписокПереносимыхПолей.Добавить(28, "П000010000308");
	СписокПереносимыхПолей.Добавить(20, "П000010000310");
	СписокПереносимыхПолей.Добавить(20, "П000010000311");
	СписокПереносимыхПолей.Добавить(20, "П000010000314");
	СписокПереносимыхПолей.Добавить(20, "П000010000315");
	
	НастройкиАлгоритмаПечати.Вставить("СписокПереносимыхПолей", 			СписокПереносимыхПолей);
		
	// Описание областей макета, выводящих строки общей информации по ОП и организации.
	НастройкиАлгоритмаПечати.Вставить("ИмяОбластиСтрокаОП", 				"СтрокаОП");
	НастройкиАлгоритмаПечати.Вставить("ИмяОбластиСтрокаОрг",				"СтрокаОП");
	
	// Описание областей макета, выводящих строки общей информации по ОП и организации. 
	НастройкиАлгоритмаПечати.Вставить("ИмяОбластиЗаголовокРеквизитовОП", 	"ЗаголовокРеквизитов");
	НастройкиАлгоритмаПечати.Вставить("ИмяОбластиЗаголовокРеквизитовОрг", 	"ЗаголовокРеквизитов");
	
	// Текст пояснения к общим сведениям по ОП и организации.
	НастройкиАлгоритмаПечати.Вставить("ЗаголовокРеквизитовОП", 
										"Сведения по организации/обособленному подразделению
										|(с указанием ИНН, КПП и адреса)");
	НастройкиАлгоритмаПечати.Вставить("ЗаголовокРеквизитовОрг", 
										"Сведения по организации/обособленному подразделению
										|(с указанием ИНН, КПП и адреса)");
	
	// Имя области в которой выводится общая информация по ОП и Организации.
	НастройкиАлгоритмаПечати.Вставить("ИмяОбластиРеквизитовОП", 			"ОП");
	НастройкиАлгоритмаПечати.Вставить("ИмяОбластиРеквизитовОрг", 			"ОП");
		
	// Информация по колонкам группировки, суммирования и запрету вывода.
	// Используется при выводе строк по организации - выводить "как есть" или сворачивать
	// по определенным полям.
	//
	// Пустая строка колонок группировки и суммирования означает автоопределение 
	// - все что не числа - колонки группировки.
	// - все что числа - колонки суммирования.
	//
	// Значение "Не сворачивать" или "НеСворачивать" в колонках группировки вместо списка колонок
	// предотвращает сворачивание, независимо от значения колонок суммирования.
	
	НастройкиАлгоритмаПечати.Вставить("КолонкиГруппировокОрг", "НеСворачивать");	 
	НастройкиАлгоритмаПечати.Вставить("КолонкиСуммированияОрг", "");	
	НастройкиАлгоритмаПечати.Вставить("КолонкиНеВыводитьОрг", "");
	
	/////////////////////////////////////////////////////////////
	// Алгоритм печати строк ОП.
	/////////////////////////////////////////////////////////////
	
	НастройкиАлгоритмаПечатиСтрокОП = Новый Структура;
	НастройкиАлгоритмаПечатиСтрокОП.Вставить("ИдГруппыОбластиСтрокаМакета", "П0000100003");
	НастройкиАлгоритмаПечатиСтрокОП.Вставить("ИмяОбластиНомера", "П000010000300");				
	НастройкиАлгоритмаПечатиСтрокОП.Вставить("ИмяОбластиСтрокаТаблицы", "СтрокаТаблицы");
	
	СписокСтруктурИнформацииИтогов = Новый СписокЗначений;
		
	СтруктураИнформацииИтога2 = Новый Структура;
	СтруктураИнформацииИтога2.Вставить("ИдГруппыОбластейМакетаИтоги", "П0000100004");
	СтруктураИнформацииИтога2.Вставить("ИмяОбластиСтрокаИтогов", "СтрокаИтого");
	СтруктураИнформацииИтога2.Вставить("ИмяОбластиРазмещенияПояснения", "ОписаниеИтого");
	СтруктураИнформацииИтога2.Вставить("ТекстПояснения", "ИТОГО");
	СтруктураИнформацииИтога2.Вставить("КолонкиГруппировок", "");
	СтруктураИнформацииИтога2.Вставить("КолонкиСуммирования", "12,16");
	
	СписокСтруктурИнформацииИтогов.Добавить(СтруктураИнформацииИтога2, "1");
	
	НастройкиАлгоритмаПечатиСтрокОП.Вставить("СписокСтруктурИнформацииИтогов", СписокСтруктурИнформацииИтогов);
	
	НастройкиАлгоритмаПечати.Вставить("НастройкиАлгоритмаПечатиСтрокОП", НастройкиАлгоритмаПечатиСтрокОП);
	
	/////////////////////////////////////////////////////////////
	// Алгоритм печати строк Организации.
	/////////////////////////////////////////////////////////////
	
	НастройкиАлгоритмаПечатиСтрокОрг = Новый Структура;
	НастройкиАлгоритмаПечатиСтрокОрг.Вставить("ИдГруппыОбластиСтрокаМакета", "П0000100003");
	НастройкиАлгоритмаПечатиСтрокОрг.Вставить("ИмяОбластиНомера", "П000010000300");				
	НастройкиАлгоритмаПечатиСтрокОрг.Вставить("ИмяОбластиСтрокаТаблицы", "СтрокаТаблицы");
	
	СписокСтруктурИнформацииИтоговОрг = Новый СписокЗначений;
	
	СтруктураИнформацииИтога2 = Новый Структура;
	СтруктураИнформацииИтога2.Вставить("ИдГруппыОбластейМакетаИтоги", "П0000100004");
	СтруктураИнформацииИтога2.Вставить("ИмяОбластиСтрокаИтогов", "СтрокаИтого");
	СтруктураИнформацииИтога2.Вставить("ИмяОбластиРазмещенияПояснения", "ОписаниеИтого");
	СтруктураИнформацииИтога2.Вставить("ТекстПояснения", "ИТОГО");
	СтруктураИнформацииИтога2.Вставить("КолонкиГруппировок", "");
	СтруктураИнформацииИтога2.Вставить("КолонкиСуммирования", "12,16");
	
	СписокСтруктурИнформацииИтоговОрг.Добавить(СтруктураИнформацииИтога2, "1");
	
	НастройкиАлгоритмаПечатиСтрокОрг.Вставить("СписокСтруктурИнформацииИтогов", СписокСтруктурИнформацииИтоговОрг);
	
	НастройкиАлгоритмаПечати.Вставить("НастройкиАлгоритмаПечатиСтрокОрг", НастройкиАлгоритмаПечатиСтрокОрг);
	
	/////////////////////////////////////////////////////////////
	// Конец настроек алгоритма печати
	/////////////////////////////////////////////////////////////
	
	СтруктураПараметровСтраницы.Вставить("НастройкиАлгоритмаПечати", НастройкиАлгоритмаПечати);
	
	// Заполнение данных для показа шкалы прогресса.
	СтруктураПараметровСтраницы.Вставить("НужноОбработатьСтрок", НужноОбработатьСтрок);
	СтруктураПараметровСтраницы.Вставить("ПроцентБезКонвертацииАрхивации", ПроцентБезКонвертацииАрхивации);
	
	
	РегламентированнаяОтчетностьАЛКО.ВывестиНаПечатьРазделДекларации(СтруктураПараметровСтраницы, СтруктураРеквизитовФормы,
																	ОбработаноСтрок, ОбъектЭтогоОтчета, РежимОтладки);
	
КонецПроцедуры

#КонецОбласти 


#Область ВнешнийОтчет

// Процедуры и функции этой области используются только в случае
// публикации в виде внешнего отчета.

#Область ПрограммныйИнтерфейсВнешнийОтчет

Функция ВерсияФорматаВыгрузки(Знач НаДату = Неопределено, ВыбраннаяФорма = Неопределено) Экспорт
	
	Если НаДату = Неопределено Тогда
		НаДату = ТекущаяДатаСеанса();
	КонецЕсли;
	
	Возврат Перечисления.ВерсииФорматовВыгрузки.Версия401алко;
		
КонецФункции

Функция ТаблицаФормОтчета() Экспорт
	
	ОписаниеТиповСтрока = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(0));
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("Дата"));
	ОписаниеТиповДата = Новый ОписаниеТипов(МассивТипов, , Новый КвалификаторыДаты(ЧастиДаты.Дата));
	
	ТаблицаФормОтчета = Новый ТаблицаЗначений;
	ТаблицаФормОтчета.Колонки.Добавить("ФормаОтчета",        ОписаниеТиповСтрока);
	ТаблицаФормОтчета.Колонки.Добавить("ОписаниеОтчета",     ОписаниеТиповСтрока, "Утверждена",  20);
	ТаблицаФормОтчета.Колонки.Добавить("ДатаНачалоДействия", ОписаниеТиповДата,   "Действует с", 5);
	ТаблицаФормОтчета.Колонки.Добавить("ДатаКонецДействия",  ОписаниеТиповДата,   "         по", 5);
	ТаблицаФормОтчета.Колонки.Добавить("РедакцияФормы",      ОписаниеТиповСтрока, "Редакция формы", 20);
	
	НоваяФорма = ТаблицаФормОтчета.Добавить();
	НоваяФорма.ФормаОтчета        = "ФормаОтчета2018Кв1";
	НоваяФорма.ОписаниеОтчета     = "Приложение № 3 к Правилам представления деклараций об объеме производства, поставки и (или)" 
									+ " использования для собственных нужд фармацевтической субстанции спирта этилового (этанола)"
 									+ " (Утверждено ПП РФ от 29.12.2017 № 1694).";
	НоваяФорма.РедакцияФормы	  = "от 29.12.2017 № 1694.";
	НоваяФорма.ДатаНачалоДействия = '20171229';
	НоваяФорма.ДатаКонецДействия  = РегламентированнаяОтчетностьКлиентСервер.ПустоеЗначениеТипа(Тип("Дата"));
	
	Возврат ТаблицаФормОтчета;
	
КонецФункции

Функция ДанныеРеглОтчета(ЭкземплярРеглОтчета) Экспорт
	
	Возврат Неопределено;
	
КонецФункции

Функция ДеревоФормИФорматов() Экспорт
	
	ФормыИФорматы = Новый ДеревоЗначений;
	ФормыИФорматы.Колонки.Добавить("Код");
	ФормыИФорматы.Колонки.Добавить("ДатаПриказа");
	ФормыИФорматы.Колонки.Добавить("НомерПриказа");
	ФормыИФорматы.Колонки.Добавить("ДатаНачалаДействия");
	ФормыИФорматы.Колонки.Добавить("ДатаОкончанияДействия");
	ФормыИФорматы.Колонки.Добавить("ИмяОбъекта");
	ФормыИФорматы.Колонки.Добавить("Описание");
	
	Форма20180101 = ОпределитьФормуВДеревеФормИФорматов(ФормыИФорматы, "1152036", '2017-12-29', "1694", "ФормаОтчета2018Кв1");	
	ОпределитьФорматВДеревеФормИФорматов(Форма20180101, "4.33", , , '2017-12-29');
	
	Возврат ФормыИФорматы;
	
КонецФункции
	
#КонецОбласти

#Область СлужебныеПроцедурыИФункцииВнешнийОтчет

Функция ОпределитьФормуВДеревеФормИФорматов(ДеревоФормИФорматов, Код, ДатаПриказа = '00010101', НомерПриказа = "", ИмяОбъекта = "",
			ДатаНачалаДействия = '00010101', ДатаОкончанияДействия = '00010101', Описание = "")
	
	НовСтр = ДеревоФормИФорматов.Строки.Добавить();
	НовСтр.Код = СокрЛП(Код);
	НовСтр.ДатаПриказа = ДатаПриказа;
	НовСтр.НомерПриказа = СокрЛП(НомерПриказа);
	НовСтр.ДатаНачалаДействия = ДатаНачалаДействия;
	НовСтр.ДатаОкончанияДействия = ДатаОкончанияДействия;
	НовСтр.ИмяОбъекта = СокрЛП(ИмяОбъекта);
	НовСтр.Описание = СокрЛП(Описание);
	Возврат НовСтр;
	
КонецФункции

Функция ОпределитьФорматВДеревеФормИФорматов(Форма, Версия, ДатаПриказа = '00010101', НомерПриказа = "",
			ДатаНачалаДействия = Неопределено, ДатаОкончанияДействия = Неопределено, ИмяОбъекта = "", Описание = "")
	
	НовСтр = Форма.Строки.Добавить();
	НовСтр.Код = СокрЛП(Версия);
	НовСтр.ДатаПриказа = ДатаПриказа;
	НовСтр.НомерПриказа = СокрЛП(НомерПриказа);
	НовСтр.ДатаНачалаДействия = ?(ДатаНачалаДействия = Неопределено, Форма.ДатаНачалаДействия, ДатаНачалаДействия);
	НовСтр.ДатаОкончанияДействия = ?(ДатаОкончанияДействия = Неопределено, Форма.ДатаОкончанияДействия, ДатаОкончанияДействия);
	НовСтр.ИмяОбъекта = СокрЛП(ИмяОбъекта);
	НовСтр.Описание = СокрЛП(Описание);
	Возврат НовСтр;
	
КонецФункции

#КонецОбласти

 мВерсияОтчета = "БПКОРП 3.0.42.54.4";
 
#КонецОбласти 


#КонецОбласти

#КонецЕсли






 