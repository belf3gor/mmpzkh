#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда


Функция ПолучитьПараметрыИсполненияОтчета() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ИспользоватьПередКомпоновкойМакета", Истина);
	Результат.Вставить("ИспользоватьПослеКомпоновкиМакета",  Истина);
	Результат.Вставить("ИспользоватьПослеВыводаРезультата",  Истина);
	Результат.Вставить("ИспользоватьДанныеРасшифровки",      Ложь);
	Результат.Вставить("ИспользоватьПриВыводеЗаголовка",     Истина);
	
	Возврат Результат;
	
КонецФункции

Процедура ПриВыводеЗаголовка(ПараметрыОтчета,КомпоновщикНастроек, Результат) Экспорт
	
	Макет = ПолучитьОбщийМакет("ОбщиеОбластиСтандартногоОтчета");
	ОбластьЗаголовок        = Макет.ПолучитьОбласть("ОбластьЗаголовок");
	ОбластьОписаниеНастроек = Макет.ПолучитьОбласть("ОписаниеНастроек");
	ОбластьОрганизация      = Макет.ПолучитьОбласть("Организация");
	
	//Организация
	ТекстОрганизация = БухгалтерскиеОтчетыВызовСервера.ПолучитьТекстОрганизация(ПараметрыОтчета.Организация, Ложь);
	ОбластьОрганизация.Параметры.НазваниеОрганизации = ТекстОрганизация;
	Результат.Вывести(ОбластьОрганизация);
	
	//Заголовок
	ОбластьЗаголовок.Параметры.ЗаголовокОтчета = "" + ПолучитьТекстЗаголовка(ПараметрыОтчета) + " (" + ПараметрыОтчета.НазваниеНабораПоказателейОтчета + ")";
	Результат.Вывести(ОбластьЗаголовок);
	
	Результат.Область("R1:R" + Результат.ВысотаТаблицы).Имя = "Заголовок";
	
	// Единица измерения
	Если ПараметрыОтчета.Свойство("ВыводитьЕдиницуИзмерения")
		И ПараметрыОтчета.ВыводитьЕдиницуИзмерения Тогда
		ОбластьОписаниеЕдиницыИзмерения = Макет.ПолучитьОбласть("ОписаниеЕдиницыИзмерения");
		Результат.Вывести(ОбластьОписаниеЕдиницыИзмерения);
	КонецЕсли;
	
	ПараметрыОтчета.Вставить("ВысотаШапки",Результат.ВысотаТаблицы);	
	
КонецПроцедуры

Функция НайтиПоИмени(Структура, Имя)
	Группировка = Неопределено;
	Для каждого Элемент Из Структура Цикл
		Если ТипЗнч(Элемент) = Тип("ТаблицаКомпоновкиДанных") Тогда
			Если Элемент.Имя = Имя Тогда
				Возврат Элемент;
			КонецЕсли;	
		Иначе
			Если Элемент.Имя = Имя Тогда
				Возврат Элемент;
			КонецЕсли;	
			Для каждого Поле Из Элемент.ПоляГруппировки.Элементы Цикл
				Если Не ТипЗнч(Поле) = Тип("АвтоПолеГруппировкиКомпоновкиДанных") Тогда
					Если Поле.Поле = Новый ПолеКомпоновкиДанных(Имя) Тогда
						Возврат Элемент;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			Если Элемент.Структура.Количество() = 0 Тогда
				Продолжить;
			Иначе
				Группировка = НайтиПоИмени(Элемент.Структура, Имя);
				Если Не Группировка = Неопределено Тогда
					Возврат	Группировка;
				КонецЕсли;	
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Возврат Группировка;
	
КонецФункции

Функция ПолучитьТекстЗаголовка(ПараметрыОтчета) Экспорт 
	
	Возврат "Справка-расчет резервов отпусков" + БухгалтерскиеОтчетыКлиентСервер.ПолучитьПредставлениеПериода(ПараметрыОтчета.НачалоПериода,
																										ПараметрыОтчета.КонецПериода);
	
КонецФункции

// В процедуре можно доработать компоновщик перед выводом в отчет
// Изменения сохранены не будут
Процедура ПередКомпоновкойМакета(ПараметрыОтчета, Схема, КомпоновщикНастроек) Экспорт
	
	Если ЗначениеЗаполнено(ПараметрыОтчета.НачалоПериода) Тогда
		БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "НачалоПериода", НачалоДня(ПараметрыОтчета.НачалоПериода));
	КонецЕсли;
	Если ЗначениеЗаполнено(ПараметрыОтчета.КонецПериода) Тогда
		БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "КонецПериода", КонецДня(ПараметрыОтчета.КонецПериода));
	КонецЕсли;
	
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "НачалоПериодаОстатков", НачалоГода(ПараметрыОтчета.НачалоПериода));
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "КонецПериодаОстатков",  Макс(КонецДня(ПараметрыОтчета.НачалоПериода-1), НачалоГода(ПараметрыОтчета.НачалоПериода)));
	
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "ИгнорироватьОборот", НачалоГода(ПараметрыОтчета.НачалоПериода) = НачалоДня(Макс(КонецДня(ПараметрыОтчета.НачалоПериода-1), НачалоГода(ПараметрыОтчета.НачалоПериода))));
	
	КоличествоПоказателей = БухгалтерскиеОтчетыВызовСервера.КоличествоПоказателей(ПараметрыОтчета);
	
	Инвентаризация = Ложь;
	Если КонецДня(ПараметрыОтчета.КонецПериода) = КонецГода(ПараметрыОтчета.КонецПериода) Тогда
		Инвентаризация = Истина;
	КонецЕсли;
	
	
	Таблица = НайтиПоИмени(КомпоновщикНастроек.Настройки.Структура,"РезервыОтпусков");
	
	МассивНазванийГруппировок = Новый Массив;
	МассивНазванийГруппировок.Добавить("ГруппировкаФизическоеЛицо");
	
	МассивГруппировок = Новый Массив;
	
	МассивПоказателей = Новый Массив;
	Если ПараметрыОтчета.ПоказательНУ Тогда
		
		Если Инвентаризация Тогда
			СуффиксГруппировки = "МО";
		Иначе
			СуффиксГруппировки = "";
		КонецЕсли;
		
		МассивПоказателей.Добавить("НУ");
		Для Каждого ИмяГруппировки Из МассивНазванийГруппировок Цикл
			МассивГруппировок.Добавить(НайтиПоИмени(Таблица.Строки,ИмяГруппировки + "НУ" + СуффиксГруппировки));
		КонецЦикла;
		
	ИначеЕсли ПараметрыОтчета.ПоказательВР Тогда
		МассивПоказателей.Добавить("БУ");
		МассивПоказателей.Добавить("ВР");
					
		Если Инвентаризация Тогда
			СуффиксГруппировки = "МО";
		Иначе
			СуффиксГруппировки = "НМ";
		КонецЕсли;
		
		Для Каждого ИмяГруппировки Из МассивНазванийГруппировок Цикл
			МассивГруппировок.Добавить(НайтиПоИмени(Таблица.Строки,ИмяГруппировки + "СРазницами" + СуффиксГруппировки));
		КонецЦикла;
	Иначе
		Если Инвентаризация Тогда
			СуффиксГруппировки = "МО";
		Иначе
			СуффиксГруппировки = "";
		КонецЕсли;
		МассивПоказателей.Добавить("БУ");
		Для Каждого ИмяГруппировки Из МассивНазванийГруппировок Цикл
			МассивГруппировок.Добавить(НайтиПоИмени(Таблица.Строки,ИмяГруппировки + "БУ" + СуффиксГруппировки));
		КонецЦикла;
	КонецЕсли;
	
	Показатель = МассивПоказателей[0];
	
	Для Каждого Группировка Из МассивГруппировок Цикл
		Группировка.Использование = Истина;
	КонецЦикла;
	
	МассивСумм = Новый Массив;
	МассивСумм.Добавить("СуммаРезерва");
	МассивСумм.Добавить("СуммаРезерваСтраховыхВзносов");
	МассивСумм.Добавить("СуммаРезерваФССНесчастныеСлучаи");
	
	МассивПоказателейРасчета = Новый Массив;
	Если Инвентаризация Тогда
		МассивПоказателейРасчета.Добавить("ОстатокОтпуска");
		МассивПоказателейРасчета.Добавить("СреднийЗаработок");
		МассивПоказателейРасчета.Добавить("ТекущаяСтавкаСтраховыхВзносов");
		МассивПоказателейРасчета.Добавить("ТекущаяСтавкаФССНесчастныеСлучаи");
	Иначе
		МассивПоказателейРасчета.Добавить("ФОТ");
		МассивПоказателейРасчета.Добавить("СтраховыеВзносы");
		МассивПоказателейРасчета.Добавить("ФССНесчастныеСлучаи");
		МассивПоказателейРасчета.Добавить("НормативОтчисленийВРезервОтпусков");
	КонецЕсли;

	
	Если ПараметрыОтчета.ПоказательНУ Тогда 
		МассивПоказателейРасчета.Добавить("СуммаРезерваИсчисленоНУ");
		МассивПоказателейРасчета.Добавить("СуммаРезерваСтраховыхВзносовИсчисленоНУ");
		МассивПоказателейРасчета.Добавить("СуммаРезерваФССНесчастныеСлучаиИсчисленоНУ");
		Если Инвентаризация Тогда
			МассивПоказателейРасчета.Добавить("СуммаРезерваНакопленоНУ");
			МассивПоказателейРасчета.Добавить("СуммаРезерваСтраховыхВзносовНакопленоНУ");
			МассивПоказателейРасчета.Добавить("СуммаРезерваФССНесчастныеСлучаиНакопленоНУ");
		КонецЕсли;
	Иначе
		МассивПоказателейРасчета.Добавить("СуммаРезерваИсчисленоБУ");
		МассивПоказателейРасчета.Добавить("СуммаРезерваСтраховыхВзносовИсчисленоБУ");
		МассивПоказателейРасчета.Добавить("СуммаРезерваФССНесчастныеСлучаиИсчисленоБУ");
		Если Инвентаризация Тогда
			МассивПоказателейРасчета.Добавить("СуммаРезерваНакопленоБУ");
			МассивПоказателейРасчета.Добавить("СуммаРезерваСтраховыхВзносовНакопленоБУ");
			МассивПоказателейРасчета.Добавить("СуммаРезерваФССНесчастныеСлучаиНакопленоБУ");
		КонецЕсли;
	КонецЕсли;
	
	Номер = 0;
	
	Для Каждого Группировка Из МассивГруппировок Цикл
		Группа = Группировка.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
		Группа.Расположение = РасположениеПоляКомпоновкиДанных.ОтдельнаяКолонка;
		БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(Группа, СтрЗаменить(МассивНазванийГруппировок[Номер], "Группировка", ""));
		
		Для Каждого ИмяПоказателя Из МассивПоказателейРасчета Цикл
			Группа = Группировка.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
			Группа.Расположение = РасположениеПоляКомпоновкиДанных.ОтдельнаяКолонка;
			Если ПараметрыОтчета.ПоказательПР Тогда
				ПодГруппа	= Группа.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
				ПодГруппа.Расположение 		= РасположениеПоляКомпоновкиДанных.Вертикально;
				БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ПодГруппа, ИмяПоказателя);
				БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ПодГруппа, ИмяПоказателя);
			Иначе 
				БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(Группа, ИмяПоказателя);
			КонецЕсли;
		КонецЦикла;
		
		Если ПараметрыОтчета.ПоказательВР Тогда 
			Группа = Группировка.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
			Группа.Расположение = РасположениеПоляКомпоновкиДанных.ОтдельнаяКолонка;
			ПодГруппа	= Группа.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
			ПодГруппа.Расположение 		= РасположениеПоляКомпоновкиДанных.Вертикально;
			
			Для Каждого ИмяПоказателя Из МассивПоказателей Цикл
				БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ПодГруппа, "Показатели." + ИмяПоказателя);
			КонецЦикла;
			
		КонецЕсли;
		
		Для Каждого ИмяСуммы Из МассивСумм Цикл
			Группа = Группировка.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
			Группа.Расположение = РасположениеПоляКомпоновкиДанных.ОтдельнаяКолонка;
			Если ПараметрыОтчета.ПоказательПР Тогда
				ПодГруппа	= Группа.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
				ПодГруппа.Расположение 		= РасположениеПоляКомпоновкиДанных.Вертикально;
				БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ПодГруппа, ИмяСуммы + "БУ");
				БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ПодГруппа, ИмяСуммы + "ВР");
			Иначе 
				БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(Группа, ИмяСуммы + Показатель);
			КонецЕсли;
		КонецЦикла;
		
		Номер = Номер + 1;
		
	КонецЦикла;
	
	
	БухгалтерскиеОтчетыВызовСервера.ДобавитьОтборПоОрганизации(ПараметрыОтчета, КомпоновщикНастроек);
	
КонецПроцедуры

Процедура ПослеКомпоновкиМакета(ПараметрыОтчета, МакетКомпоновки) Экспорт
		
	// Удаление итоговых строк в группировке по подразделениям	
	ИтогиГруппировкиТаблица = МакетКомпоновки.Тело[0].Строки[0].Тело[0];
	МакетКомпоновки.Тело[0].Строки[0].Тело.Удалить(ИтогиГруппировкиТаблица);
	
	Если ПараметрыОтчета.Свойство("ВысотаШапки") Тогда
		ВысотаШапки = ПараметрыОтчета.ВысотаШапки;
	Иначе
		ВысотаШапки = 0;
	КонецЕсли;
	
	Для Каждого ЭлементТелаМакета Из МакетКомпоновки.Тело Цикл 
		Если ТипЗнч(ЭлементТелаМакета) = Тип("ТаблицаМакетаКомпоновкиДанных") Тогда
			ПараметрыОтчета.Вставить("ВысотаШапки", МакетКомпоновки.Макеты[ЭлементТелаМакета.МакетШапки].Макет.Количество() + ВысотаШапки); 
			Прервать;	
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПослеВыводаРезультата(ПараметрыОтчета, Результат) Экспорт
	
	БухгалтерскиеОтчетыВызовСервера.ОбработкаРезультатаОтчета(ПараметрыОтчета.ИдентификаторОтчета, Результат);
	
	Если ПараметрыОтчета.Свойство("ВысотаШапки") Тогда
		Результат.ФиксацияСверху = ПараметрыОтчета.ВысотаШапки;
	КонецЕсли;
	
	Результат.ФиксацияСлева = 1;
	
КонецПроцедуры

Функция ПолучитьНаборПоказателей() Экспорт
	
	НаборПоказателей = Новый Массив;
	НаборПоказателей.Добавить("БУ");
	НаборПоказателей.Добавить("НУ");
	НаборПоказателей.Добавить("ПР");
	НаборПоказателей.Добавить("ВР");
	
	Возврат НаборПоказателей;
	
КонецФункции

Процедура НастроитьВариантыОтчета(Настройки, ОписаниеОтчета) Экспорт
	
	Схема = ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");
	Для Каждого Вариант из Схема.ВариантыНастроек Цикл
		ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, Вариант.Имя).Размещение.Вставить(
			Метаданные.Подсистемы.Отчеты.Подсистемы.СправкиРасчеты.Подсистемы.БухгалтерскийУчет, "");
		ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, Вариант.Имя).Размещение.Вставить(
			Метаданные.Подсистемы.Отчеты.Подсистемы.СправкиРасчеты.Подсистемы.БухгалтерскийИНалоговыйУчет, "");
		ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, Вариант.Имя).Размещение.Вставить(
			Метаданные.Подсистемы.БухгалтерияПредприятияПодсистемы.Подсистемы.ПростойИнтерфейс.Подсистемы.Отчеты.Подсистемы.СправкиРасчеты, "");
	КонецЦикла;	
	
КонецПроцедуры

//Процедура используется подсистемой варианты отчетов
//
Процедура НастройкиОтчета(Настройки) Экспорт
	
	Схема = ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");
	Для Каждого Вариант из Схема.ВариантыНастроек Цикл
		 Настройки.ОписаниеВариантов.Вставить(Вариант.Имя,Вариант.Представление);
	КонецЦикла;	
	
КонецПроцедуры

#КонецЕсли