&НаСервере
Перем мОбъектОтчета;

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	// Обход ошибки платформы Параметр сеанса отсутствует или удален
	ТабличныйДокумент.Очистить();
	
	СформироватьСтруктуруРеквизитовФормы();
	
	СтруктураРеквизитовФормы.СписокПечатаемыхЛистов = Новый СписокЗначений;
	
	СтруктураРеквизитовФормы.мСоставПоказателей = "СоставПоказателей2016Кв1";
	
	СтруктураРеквизитовФормы.мОписаниеТиповЧислоЕ = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(17, 2));
	СтруктураРеквизитовФормы.Тип20_10             = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(20, 10));
	
	// ОПИСАНИЕ ПАРАМЕТРОВ МНОГОСТРОЧНЫХ ГРУПП
	// Идентификаторы многострочных групп
	СтруктураРеквизитовФормы.мИдГруппыТовары = "П11000";
	СтруктураРеквизитовФормы.мИдГруппыУпаковка = "П21000";
	
	// количество строк многострочных разделов по "бумажной" форме отчета
	// (минимальное количество строк, которое должно присутствовать всегда)
	КолИсхСтрокИдГруппыТовары     = 1;
	КолИсхСтрокИдГруппыУпаковка   = 1;
	
	КолКолонокИдГруппыТовары     = 12;
	КолКолонокИдГруппыУпаковка   = 12;
	
	СтруктураДанныхТитульный = Новый Структура;
	СтруктураДанныхИтоги = Новый Структура;
	
	ИнициализацияМногостраничныхРазделов();
				
	// структура многострочных разделов формы
	мСтруктураМногострочныхРазделов = Новый Структура;
	мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппыТовары,     СтруктураРеквизитовФормы.мИдГруппыТовары);
	мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппыУпаковка,   СтруктураРеквизитовФормы.мИдГруппыУпаковка);
	
	мСтруктураИменаКолонокРазделов = Новый Структура;
	мСтруктураИменаКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппыТовары,     Новый СписокЗначений);
	мСтруктураИменаКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппыУпаковка,     Новый СписокЗначений);
	
	// Структура содержит данные дополнительных страниц
	мСтруктураМногостраничныхРазделов = Новый Структура;
	мСтруктураМногостраничныхРазделов.Вставить("Товары",      "ТаблицаСтраницыТовары");
	мСтруктураМногостраничныхРазделов.Вставить("Упаковка",    "ТаблицаСтраницыУпаковка");

	// структура исходных строк (минимального кол-ва) многострочных разделов формы
	мСтруктураИсхКолвоСтрокРазделов = Новый Структура;
	мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппыТовары,    КолИсхСтрокИдГруппыТовары);
	мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппыУпаковка,  КолИсхСтрокИдГруппыУпаковка);
	
	мСтруктураКолвоКолонокРазделов = Новый Структура;
	мСтруктураКолвоКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппыТовары,     КолКолонокИдГруппыТовары);
	мСтруктураКолвоКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппыУпаковка,   КолКолонокИдГруппыУпаковка);
		
	ЦветЗаполняетсяТолькоВручную                           = Новый Цвет(255, 255, 225);
	ЦветЗаполняетсяАвтоКорректир                           = Новый Цвет(255, 240, 200);
	ЦветЗаполняетсяАвтоБезКорректир                        = Новый Цвет(230, 240, 220);
	СтруктураРеквизитовФормы.ЦветЗаполняетсяАвтоАрифметика = Новый Цвет(192, 220, 192);     // ЗЕЛЕНЫЙ
	ЦветЗаполняетсяОднозначноВручную                       = Новый Цвет(255, 255, 192);     // ЖЕЛТЫЙ
	ЦветЗаполняетсяАвтоматически                           = Новый Цвет(255, 255, 255);     // Белый, Ввод запрещен

	// структура цветов раскраски автозаполняемых ячеек
	мСтруктураЦветовРаскраски = Новый Структура;
	мСтруктураЦветовРаскраски.Вставить("_1", ЦветЗаполняетсяТолькоВручную);
	мСтруктураЦветовРаскраски.Вставить("_2", ЦветЗаполняетсяАвтоКорректир);
	мСтруктураЦветовРаскраски.Вставить("_3", ЦветЗаполняетсяАвтоБезКорректир);
	мСтруктураЦветовРаскраски.Вставить("_4", СтруктураРеквизитовФормы.ЦветЗаполняетсяАвтоАрифметика);
	мСтруктураЦветовРаскраски.Вставить("_0", ЦветЗаполняетсяОднозначноВручную);
	мСтруктураЦветовРаскраски.Вставить("_5", ЦветЗаполняетсяАвтоматически);
	
	мСтруктураВариантыЗаполнения       = Новый Структура;
	мСтруктураВариантыЗаполненияЭталон = Новый Структура;
		
	// ОПИСАНИЕ ПАРАМЕТРОВ ФОРМЫ ОТЧЕТА
	//
	// Версия формы
	СтруктураРеквизитовФормы.мВерсияФормы = "14/10/2016";
		
	// Код отчета, равен КНД
	СтруктураРеквизитовФормы.мКодОтчета = 1110012;
	
	СтруктураРеквизитовФормы.мПечатныеформы = Новый СписокЗначений;
	СтруктураРеквизитовФормы.мПечатаемыеРазделы = Новый СписокЗначений;
	
	ИмяРаздела = "Титульный";
	
	ЭтаФормаИмя = ИмяФормы;
	ИмяМакета = Сред(ЭтаФормаИмя, СтрНайти(ЭтаФормаИмя, "ФормаОтчета")) + "_" + ИмяРаздела;
	Попытка
		ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФормаИмя).ПолучитьМакет(ИмяМакета));
	Исключение
	КонецПопытки;
	
	СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяРаздела;
	
	СтруктураРеквизитовФормы.мВыбраннаяФорма          = Параметры.мВыбраннаяФорма;
	СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета  = Параметры.мДатаКонцаПериодаОтчета;
	СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета = Параметры.мДатаНачалаПериодаОтчета;
	СтруктураРеквизитовФормы.мПериодичность           = Параметры.мПериодичность;
	СтруктураРеквизитовФормы.мСкопированаФорма        = Параметры.мСкопированаФорма;
	СтруктураРеквизитовФормы.мСохраненныйДок          = Параметры.мСохраненныйДок;
	СтруктураРеквизитовФормы.Организация              = Параметры.Организация;
	
	ДатаПодписи = ТекущаяДатаСеанса();
	
	ПорядкиОкругленияОтчетности = Новый Структура;
	ПорядкиОкругленияОтчетности.Вставить("ПеречислениеПорядкиОкругленияОтчетностиОкр1",       Перечисления.ПорядкиОкругленияОтчетности.Окр1);
	ПорядкиОкругленияОтчетности.Вставить("ПеречислениеПорядкиОкругленияОтчетностиОкр1000",    Перечисления.ПорядкиОкругленияОтчетности.Окр1000);
	ПорядкиОкругленияОтчетности.Вставить("ПеречислениеПорядкиОкругленияОтчетностиОкр1000000", Перечисления.ПорядкиОкругленияОтчетности.Окр1000000);
	
	Инициализация(Параметры.БезОткрытияФормы);
	
КонецПроцедуры 

&НаСервере
Процедура СформироватьСтруктуруРеквизитовФормы()
	
	СтруктураРеквизитовФормы = Новый Структура;
	СтруктураРеквизитовФормы.Вставить("ВыводитьСтраницуВТаблДокНаСервере");
	СтруктураРеквизитовФормы.Вставить("НаимТекущегоРаздела");
	СтруктураРеквизитовФормы.Вставить("мВПрограммеИзмененаОрганизация");
	СтруктураРеквизитовФормы.Вставить("мАвтоВыборКодов");
	СтруктураРеквизитовФормы.Вставить("мБезОткрытияФормы");
	СтруктураРеквизитовФормы.Вставить("мВерсияФормы");
	СтруктураРеквизитовФормы.Вставить("мДелитель");
	СтруктураРеквизитовФормы.Вставить("мЗаписываетсяНовыйДокумент");
	СтруктураРеквизитовФормы.Вставить("мЗаписьЗапрещена");
	СтруктураРеквизитовФормы.Вставить("мКодОтчета");
	СтруктураРеквизитовФормы.Вставить("мРежимПечати");
	СтруктураРеквизитовФормы.Вставить("мСоставПоказателей");
	СтруктураРеквизитовФормы.Вставить("мСтрокаФормата");
	СтруктураРеквизитовФормы.Вставить("мСчетчикСтраниц");
	СтруктураРеквизитовФормы.Вставить("ОтключитьВыполнениеРасчета", Ложь);
	СтруктураРеквизитовФормы.Вставить("ТочностьЕдиницыИзмерения");
	СтруктураРеквизитовФормы.Вставить("ФлажокОтклАвтоРасчет", Ложь);
	СтруктураРеквизитовФормы.Вставить("мБезОткрытияФормы");
	СтруктураРеквизитовФормы.Вставить("ВидДокумента");
	СтруктураРеквизитовФормы.Вставить("ЕдиницаИзмерения");
	СтруктураРеквизитовФормы.Вставить("мВариант");
	СтруктураРеквизитовФормы.Вставить("мВыбраннаяФорма");
	СтруктураРеквизитовФормы.Вставить("мДатаКонцаПериодаОтчета");
	СтруктураРеквизитовФормы.Вставить("мДатаНачалаПериодаОтчета");
	СтруктураРеквизитовФормы.Вставить("мОписаниеТиповЧислоЕ");
	СтруктураРеквизитовФормы.Вставить("Тип20_10");
	СтруктураРеквизитовФормы.Вставить("мПериодичность");
	СтруктураРеквизитовФормы.Вставить("мПечатаемыеРазделы");
	СтруктураРеквизитовФормы.Вставить("мПечатныеФормы");
	СтруктураРеквизитовФормы.Вставить("мСкопированаФорма");
	СтруктураРеквизитовФормы.Вставить("мСохраненныйДок");
	СтруктураРеквизитовФормы.Вставить("мДокументВосстановлен");
	СтруктураРеквизитовФормы.Вставить("мТекстыСтрок");
	СтруктураРеквизитовФормы.Вставить("Организация");
	СтруктураРеквизитовФормы.Вставить("ЦветЗаполняетсяАвтоАрифметика");
	СтруктураРеквизитовФормы.Вставить("СписокПечатаемыхЛистов");
	СтруктураРеквизитовФормы.Вставить("НаимОрганизации");
	СтруктураРеквизитовФормы.Вставить("СтрПериодОтчета");
	СтруктураРеквизитовФормы.Вставить("ТекущаяСтрокаРазделовОтчета");
	СтруктураРеквизитовФормы.Вставить("ЗначениеКоэффициентаКНормативуПоУмолчанию", 5);
	СтруктураРеквизитовФормы.Вставить("ОКВЭД",  "");
	СтруктураРеквизитовФормы.Вставить("ОКВЭД2", "");
	
	СтруктураРеквизитовФормы.Вставить("мИдГруппыТовары");
	СтруктураРеквизитовФормы.Вставить("мИдГруппыУпаковка");
	 
КонецПроцедуры

&НаСервере
Процедура ИнициализацияМногостраничныхРазделов()
	
	СтрПерваяСтраница = ТаблицаСтраницыТовары.Добавить();
	СтрПерваяСтраница.Представление               = "Новая страница";
	СтрПерваяСтраница.АктивнаяСтраница            = Истина;
	СтрПерваяСтраница.АвтоматическоеПредставление = Истина;
	
	СтрПерваяСтраница = ТаблицаСтраницыУпаковка.Добавить();
	СтрПерваяСтраница.Представление               = "Новая страница";
	СтрПерваяСтраница.АктивнаяСтраница            = Истина;
	СтрПерваяСтраница.АвтоматическоеПредставление = Истина;

КонецПроцедуры

&НаСервере
Процедура ВставитьДополнительнуюСтраницуНаСервере(ИмяТекущейСтраницыПанели = Неопределено )
	
	ИзменитьТаблицуПараметровАвтозаполнения(1, ИмяТекущейСтраницыПанели);
	
	СтруктураРеквизитовФормы.ОтключитьВыполнениеРасчета = Истина;
	
	РегламентированнаяОтчетность.ВставитьДополнительнуюСтраницуНаСервере(ЭтотОбъект, ИмяТекущейСтраницыПанели);
	РегламентированнаяОтчетность.ПослеВставкиДополнительнойСтраницыНаСервере(ЭтотОбъект, ИмяТекущейСтраницыПанели);
	
	СтруктураРеквизитовФормы.ОтключитьВыполнениеРасчета = Ложь;
	
	СохранитьДанныеРаздела(ИмяТекущейСтраницыПанели, Ложь, Ложь);
	
	РасчетНаСервере(ИмяТекущейСтраницыПанели);
	
	СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура Очистить(ВыполняемоеОповещение = Неопределено) Экспорт
	
	РегламентированнаяОтчетностьКлиент.Очистить(ЭтотОбъект, ВыполняемоеОповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура СпециальныеОперацииПослеОчисткиЛистаНаКлиенте(ИмяСтраницы, УдалениДопЭкз = Истина) Экспорт

	СпециальныеОперацииПослеОчисткиЛиста(ЭтотОбъект, ИмяСтраницы, УдалениДопЭкз);
	
КонецПроцедуры

&НаСервере
Процедура СпециальныеОперацииПослеОчисткиЛистаНаСервере(ИмяСтраницы, УдалениДопЭкз = Истина) Экспорт
	
	СпециальныеОперацииПослеОчисткиЛиста(ЭтотОбъект, ИмяСтраницы, УдалениДопЭкз);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СпециальныеОперацииПослеОчисткиЛиста(Форма, ИмяСтраницы, УдалениДопЭкз) Экспорт
	
	Расчет(Форма, ИмяСтраницы);
	
КонецПроцедуры

&НаСервере
Процедура ФормироватьСтруктуруСвойствСтраниц() Экспорт

	мСвойстваРазделовДекларации.ПолучитьЭлементы().Очистить();
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	
	// Добавим св-ва Титульного листа
	СтрокаУровня1.ИмяСтраницы                          = "Титульный";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.МаксКолвоЭкз                         = 0;
	СтрокаУровня1.ОчищатьРаздел                        = Ложь;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателенДляВыгрузки         = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();

	// Добавим св-ва Раздела5
	СтрокаУровня1.ИмяСтраницы                          = "Товары";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Ложь;
	СтрокаУровня1.МногостраничностьВРазделе            = Истина;
	СтрокаУровня1.МаксКолвоЭкз                         = 0;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателенДляВыгрузки         = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	
	НовСтр = СтрокаУровня1.МногострочностьВРазделе.Добавить();
	НовСтр.ИдГруппы = СтруктураРеквизитовФормы.мИдГруппыТовары;
	НовСтр.Область = "МногострочнаяЧасть1";
	НовСтр.ВысотаСтроки = 1;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	
	СтрокаУровня1.ИмяСтраницы                          = "Упаковка";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Ложь;
	СтрокаУровня1.МногостраничностьВРазделе            = Истина;
	СтрокаУровня1.МаксКолвоЭкз                         = 0;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателенДляВыгрузки         = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	
	НовСтр = СтрокаУровня1.МногострочностьВРазделе.Добавить();
	НовСтр.ИдГруппы = СтруктураРеквизитовФормы.мИдГруппыУпаковка;
	НовСтр.Область = "МногострочнаяЧасть2";
	НовСтр.ВысотаСтроки = 1;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	
	// Добавим св-ва Титульного листа
	СтрокаУровня1.ИмяСтраницы                          = "Итоги";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.МаксКолвоЭкз                         = 0;
	СтрокаУровня1.ОчищатьРаздел                        = Ложь;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателенДляВыгрузки         = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;

КонецПроцедуры

&НаСервере
Функция ОпределитьТабличноеПолеПоИдМногострочногоРазделаНаСервере(ИдГруппы) Экспорт
	
	ИдГрупп = Новый Структура;
	ИдГрупп.Вставить("мИдГруппыТовары",    СтруктураРеквизитовФормы.мИдГруппыТовары);
	ИдГрупп.Вставить("мИдГруппыУпаковка",  СтруктураРеквизитовФормы.мИдГруппыУпаковка);
	
	Возврат ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИдГруппы, ИдГрупп);
	
КонецФункции

&НаКлиенте
Функция ОпределитьТабличноеПолеПоИдМногострочногоРазделаНаКлиенте(ИдГруппы) Экспорт
	
	ИдГрупп = Новый Структура;
	ИдГрупп.Вставить("мИдГруппыТовары",    СтруктураРеквизитовФормы.мИдГруппыТовары);
	ИдГрупп.Вставить("мИдГруппыУпаковка",  СтруктураРеквизитовФормы.мИдГруппыУпаковка);
	
	Возврат ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИдГруппы, ИдГрупп);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИдГруппы, ИдГрупп)
	
	Перем ТекТабличноеПоле;
	
	Если ИдГруппы = ИдГрупп.мИдГруппыТовары Тогда 
		ТекТабличноеПоле = "Товары";
	ИначеЕсли ИдГруппы = ИдГрупп.мИдГруппыУпаковка Тогда 
		ТекТабличноеПоле = "Упаковка";
	КонецЕсли;
	
	Возврат ТекТабличноеПоле;
	
КонецФункции

&НаСервере
Функция ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ИмяЛиста = Неопределено) Экспорт
	
	ИдГрупп = Новый Структура;
	ИдГрупп.Вставить("мИдГруппыТовары",    СтруктураРеквизитовФормы.мИдГруппыТовары);
	ИдГрупп.Вставить("мИдГруппыУпаковка",  СтруктураРеквизитовФормы.мИдГруппыУпаковка);
	
	Возврат ОпределитьИдМногострочногоРазделаПоАктивнойСтранице(ИмяЛиста, , ИдГрупп);
	
КонецФункции

&НаКлиенте
Функция ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаКлиенте(ИмяЛиста = Неопределено) Экспорт
	
	ИдГрупп = Новый Структура;
	ИдГрупп.Вставить("мИдГруппыТовары",    СтруктураРеквизитовФормы.мИдГруппыТовары);
	ИдГрупп.Вставить("мИдГруппыУпаковка",  СтруктураРеквизитовФормы.мИдГруппыУпаковка);
	
	Возврат ОпределитьИдМногострочногоРазделаПоАктивнойСтранице(ИмяЛиста, , ИдГрупп);

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ОпределитьИдМногострочногоРазделаПоАктивнойСтранице(ИмяЛиста = Неопределено, ТекущаяСтраница = Неопределено, ИдГрупп)
	
	Перем ИмяГруппы;

	Если ИмяЛиста = Неопределено Тогда
		ИмяТекущейСтраницыПанели = ТекущаяСтраница.Имя;
	Иначе
		ИмяТекущейСтраницыПанели = ИмяЛиста;
	КонецЕсли;

	Если ИмяТекущейСтраницыПанели = "Товары" Тогда
		ИмяГруппы = ИдГрупп.мИдГруппыТовары;
	ИначеЕсли ИмяТекущейСтраницыПанели = "Упаковка" Тогда
		ИмяГруппы = ИдГрупп.мИдГруппыУпаковка;
	КонецЕсли;
	
	Возврат ИмяГруппы;

КонецФункции

&НаСервере
Функция СобратьДанныеТекущегоТаблПоляНаСервере(ИмяТабличногоПоля) Экспорт
	
	Возврат СобратьДанныеТекущегоТаблПоля(ЭтотОбъект, ИмяТабличногоПоля);

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СобратьДанныеТекущегоТаблПоля(Форма, ИмяТабличногоПоля)
	
	// Собираем в список значений имена вычисляемых показателей,
	// которые участвуют в расчете других показателей отчета по
	// внутренним связям между страницами декларации.
	// При создании коллекции значений редактируемых полей табличного
	// документа они не будут игнорированы, а их значения будут собраны
	// в структуру. Такой алгоритм имеет назначение ускорить вычислительные
	// процессы.
	//
	// В противном случае нам пришлось для получения итогового значения
	// вычисляемого показателя по всем страницам многостраничного раздела
	// вызвать процедуру расчета по каждой странице.
	//
	
	ТабличноеПоле = Форма[ИмяТабличногоПоля];

	СтруктураДанныхПоля = Новый Структура;

	Для Инд = 0 По ТабличноеПоле.Области.Количество() - 1 Цикл
		ТекущаяОбласть = ТабличноеПоле.Области[Инд];

		Если НЕ Тип(ТекущаяОбласть) = Тип("РисунокТабличногоДокумента") И Не ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			Продолжить;
		КонецЕсли;

		Если ТекущаяОбласть.СодержитЗначение <> Истина Тогда
			Продолжить;
		КонецЕсли;

		ИмяПоказателя      = ТекущаяОбласть.Имя;
		ЗначениеПоказателя = ТекущаяОбласть.Значение;
		
		СтруктураДанныхПоля.Вставить(ИмяПоказателя, ЗначениеПоказателя);

	КонецЦикла;
	
	Возврат СтруктураДанныхПоля;
	
КонецФункции

&НаСервере
Процедура ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставленияПоРазделуНаСервере(Знач ИмяРаздела) Экспорт
	
	ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставленияПоРазделу(ИмяРаздела, мСтруктураПеременных);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставленияПоРазделуНаКлиенте(Знач ИмяРаздела) Экспорт
	
	ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставленияПоРазделу(ИмяРаздела, мСтруктураПеременных);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставленияПоРазделу(Знач ИмяРаздела, ПеременныеМодуля)
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнениеЗначенийВКвадратикахНаСервере(Знач ИмяСтраницы) Экспорт

	ЗаполнениеЗначенийВКвадратиках(ЭтотОбъект, ИмяСтраницы);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнениеЗначенийВКвадратиках(Форма, Знач ИмяСтраницы)
	
КонецПроцедуры

&НаСервере
Функция ОбновитьПеременныеМодуляНаСервере(ИмяПоказателя, ЗначениеПоказателя) Экспорт

	ИзмененияПроизошли = Ложь;

	Возврат ИзмененияПроизошли;

КонецФункции

&НаСервере
Процедура ПоказатьПериод()

	ПолеТабличногоДокументаТитульный = ТабличныйДокумент;
	НомерГода     = Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ=гггг");
	ПолеТабличногоДокументаТитульный.Области.Период.Значение   = НомерГода;
	СтруктураРеквизитовФормы.СтрПериодОтчета = ПредставлениеПериода(НачалоДня(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета), КонецДня(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета), "ФП = Истина");

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДатуВЯчейкахНаСервере() Экспорт
	
	ЗаполнитьДатуВЯчейках(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьДатуВЯчейках(Форма)
	
	
КонецПроцедуры

&НаСервере
Процедура УправлениеЛистамиНаСервере(ТипНП = Неопределено) Экспорт

	УправлениеЛистами(ЭтотОбъект, ТипНП);

КонецПроцедуры

&НаКлиенте
Процедура УправлениеЛистамиНаКлиенте(ТипНП = Неопределено) Экспорт

	УправлениеЛистами(ЭтотОбъект, ТипНП);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеЛистами(Форма, ТипНП = Неопределено)
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСведенияОбОрганизации(ВПрограммеИзмененаДатаПодписи = Ложь)
	
	Если РегламентированнаяОтчетностьПереопределяемый.ЭтоЮридическоеЛицо(СтруктураРеквизитовФормы.Организация) Тогда 
		СтрокаСведений = "ИННЮЛ, КППЮЛ, АдрЮР, ОКАТО, ОКТМО, НаимЮЛПол, ОКОПФ, ОГРН, ТелОрганизации, НаимЮЛСокр,ОргИндекс,ОснВидДеят,ОргИндекс";
		Сведения = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(СтруктураРеквизитовФормы.Организация, ДатаПодписи, СтрокаСведений);
		
		ТабличныйДокумент.Области.П0201.Значение = Сведения.НаимЮЛПол;
		ТабличныйДокумент.Области.П0202.Значение = Сведения.ИННЮЛ;
		ТабличныйДокумент.Области.П0203.Значение = Сведения.КППЮЛ;
		ТабличныйДокумент.Области.П0204.Значение = Сведения.АдрЮР;
		ТабличныйДокумент.Области.П0205.Значение = Сведения.ОГРН;
		ТабличныйДокумент.Области.П0500.Значение = Сведения.ОКАТО;
		ТабличныйДокумент.Области.П0600.Значение = Сведения.ОКТМО;
		ТабличныйДокумент.Области.П0700.Значение = Сведения.ТелОрганизации;
		
		ТабличныйДокумент.Области.INN_ORG.Значение = Сведения.ИННЮЛ;
		ТабличныйДокумент.Области.KPP.Значение = Сведения.КППЮЛ;
		ТабличныйДокумент.Области.OGRN.Значение = Сведения.ОГРН;
		ТабличныйДокумент.Области.FNAME_ORG.Значение = Сведения.НаимЮЛПол;
		ТабличныйДокумент.Области.SNAME_ORG.Значение = Сведения.НаимЮЛСокр;
		ТабличныйДокумент.Области.ADDJ_OKATO.Значение = Сведения.ОКТМО;
		ТабличныйДокумент.Области.ADDJ_INDEX.Значение = Сведения.ОргИндекс;
		ТабличныйДокумент.Области.ОргКодОКВЭД.Значение = Сведения.ОснВидДеят;
		ТабличныйДокумент.Области.ADDR_JUR.Значение = Сведения.АдрЮР;
		ТабличныйДокумент.Области.ADDJ_INDEX.Значение = Сведения.ОргИндекс;
	Иначе
		СтрокаСведений = "ИННФЛ, ОГРНИП, АдрМЖ, ОКАТО, ОКТМО, ФИО, ТелДом, ОГРНИП, ИндексМЖ,ОснВидДеят";
		Сведения = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(СтруктураРеквизитовФормы.Организация, ДатаПодписи, СтрокаСведений);
		
		ТабличныйДокумент.Области.П0301.Значение = Сведения.ФИО;
		ТабличныйДокумент.Области.П0302.Значение = Сведения.ИННФЛ;
		ТабличныйДокумент.Области.П0303.Значение = Сведения.АдрМЖ;
		ТабличныйДокумент.Области.П0304.Значение = Сведения.ОГРНИП;
		ТабличныйДокумент.Области.П0500.Значение = Сведения.ОКАТО;
		ТабличныйДокумент.Области.П0600.Значение = Сведения.ОКТМО;
		ТабличныйДокумент.Области.П0700.Значение = Сведения.ТелДом;
		
		ТабличныйДокумент.Области.INN_ORG.Значение = Сведения.ИННФЛ;
		ТабличныйДокумент.Области.KPP.Значение = "";
		ТабличныйДокумент.Области.OGRN.Значение = Сведения.ОГРНИП;
		ТабличныйДокумент.Области.ADDJ_OKATO.Значение = Сведения.ОКТМО;
		ТабличныйДокумент.Области.FNAME_ORG.Значение = Сведения.ФИО;
		ТабличныйДокумент.Области.SNAME_ORG.Значение = Сведения.ФИО;
		ТабличныйДокумент.Области.ADDJ_OKATO.Значение = Сведения.ОКТМО;
		ТабличныйДокумент.Области.ADDJ_INDEX.Значение = Сведения.ИндексМЖ;
		ТабличныйДокумент.Области.ОргКодОКВЭД.Значение = Сведения.ОснВидДеят;
		ТабличныйДокумент.Области.ADDR_JUR.Значение = Сведения.АдрМЖ;
	КонецЕсли;
	
	РегламентированнаяОтчетность.ПолучитьЗначениеОКВЭД(ДатаПодписи, СтруктураРеквизитовФормы);
	РегламентированнаяОтчетностьКлиентСервер.УстановитьЗначениеОКВЭД(ДатаПодписи,
																	 СтруктураРеквизитовФормы,
																	 ТабличныйДокумент.Области.П0400.Значение);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораСтраниц(ВариантВыбора)
	Перем ТекущийРазделОтчетаСокрНаим;
	Перем НомерСтраницыРазделаОтчета;
	
	// Запоминаем текущий раздел, установленный в дереве разделов отчета.
	Если НЕ Элементы.РазделыОтчета.ТекущиеДанные = Неопределено Тогда
		ТекущийРазделОтчетаСокрНаим = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
		НомерСтраницыРазделаОтчета  = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета;
	КонецЕсли;
	
	мПараметры = Новый Структура;
	мПараметры.Вставить("РазрешитьВстроеннуюПечать", Ложь);
	мПараметры.Вставить("Автосохранение", Ложь);
	мПараметры.Вставить("ПараметрыОтображенияСумм", Ложь);
	мПараметры.Вставить("ИмеетсяРеквизитДеревоВыбранныхСтраниц", Ложь);
	мПараметры.Вставить("ЗначенияИзСписка", Истина);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ФлажокОтклАвтоРасчет", СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);
	ПараметрыФормы.Вставить("мСчетчикСтраниц", СтруктураРеквизитовФормы.мСчетчикСтраниц);
	ПараметрыФормы.Вставить("мАвтоВыборКодов", СтруктураРеквизитовФормы.мАвтоВыборКодов);
	ПараметрыФормы.Вставить("ЕдиницаИзмерения", СтруктураРеквизитовФормы.ЕдиницаИзмерения);
	ПараметрыФормы.Вставить("ТочностьЕдиницыИзмерения", СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения);
	ПараметрыФормы.Вставить("мПараметры", мПараметры);
	
	ФормаНастройкиОтчета = РегламентированнаяОтчетностьКлиент.ПолучитьОбщуюФормуПоИмени("НастройкиОтчета", ПараметрыФормы, ЭтотОбъект);

	мДеревоВыбранныхСтраниц.ПолучитьЭлементы().Очистить();

	КопироватьДанныеФормы(мДеревоСтраницОтчета, ФормаНастройкиОтчета.Дерево);
	
	ЗначениеАвторасчета = СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет;
	ЗначениеЕдИзм       = СтруктураРеквизитовФормы.ЕдиницаИзмерения;
	ЗначениеЗпт         = СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения;
	
	ДополнительныеПараметры = Новый Структура("ЗначениеАвторасчета, ЗначениеЕдИзм, ЗначениеЗпт, НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим", ЗначениеАвторасчета, ЗначениеЕдИзм, ЗначениеЗпт, НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим);
	ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьФормуВыбораСтраницЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ФормаНастройкиОтчета.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
	ФормаНастройкиОтчета.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	ФормаНастройкиОтчета.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораСтраницЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	ЗначениеАвторасчета = ДополнительныеПараметры.ЗначениеАвторасчета;
	ЗначениеЕдИзм = ДополнительныеПараметры.ЗначениеЕдИзм;
	ЗначениеЗпт = ДополнительныеПараметры.ЗначениеЗпт;
	НомерСтраницыРазделаОтчета = ДополнительныеПараметры.НомерСтраницыРазделаОтчета;
	ТекущийРазделОтчетаСокрНаим = ДополнительныеПараметры.ТекущийРазделОтчетаСокрНаим;
	
	Модифицированность = Истина;
	
	флЗначенияИдентичны = Истина;
	
	Если ЗначениеАвторасчета <> СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Тогда
		ПолныйПерерасчет(ЭтотОбъект);
		#Если ВебКлиент Тогда
			ИзменитьТаблицуВариантовЗаполненияНаСервере();
		#Иначе
			РегламентированнаяОтчетностьКлиентСервер.ИзменитьТаблицуВариантовЗаполнения(ЭтотОбъект, НЕ СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);
		#КонецЕсли
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьТаблицуВариантовЗаполненияНаСервере()
	
	РегламентированнаяОтчетностьКлиентСервер.ИзменитьТаблицуВариантовЗаполнения(ЭтотОбъект, НЕ СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);
	
КонецПроцедуры

&НаСервере
Процедура ВывестиРазделВТабличныйДокументНаСервере(ИмяГруппы, СтруктураГруппы) Экспорт
	
	ВывестиРазделВТабличныйДокумент(ЭтотОбъект, ИмяГруппы, СтруктураГруппы);
	
КонецПроцедуры

&НаКлиенте
Процедура ВывестиРазделВТабличныйДокументНаКлиенте(ИмяГруппы, СтруктураГруппы) Экспорт
	
	ВывестиРазделВТабличныйДокумент(ЭтотОбъект, ИмяГруппы, СтруктураГруппы);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ВывестиРазделВТабличныйДокумент(Форма, ИмяГруппы, СтруктураГруппы)
	
	Перем ИсходноеКоличествоСтрокГруппы;

	#Если НаКлиенте Тогда
		ТекущаяСтраница = Форма.ОпределитьТабличноеПолеПоИдМногострочногоРазделаНаКлиенте(ИмяГруппы);
	#Иначе
		ТекущаяСтраница = Форма.ОпределитьТабличноеПолеПоИдМногострочногоРазделаНаСервере(ИмяГруппы);
	#КонецЕсли

	// определим исходное колво строк многострочного раздела,
	// соответствующее бумажной форме отчета
	Форма.мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);

	// реальное кол-во строк (колво заполненных строк)
	ТекущееКоличествоСтрокГруппы = СтруктураГруппы.Количество();

	ТекТабличноеПолеИмя = "ТабличныйДокумент";
	
	ТекТабличноеПоле = Форма[ТекТабличноеПолеИмя];
	
	НастройкиМнгЧ = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСвойствоРаздела(Форма, ТекущаяСтраница, "МногострочностьВРазделе").НайтиСтроки(Новый Структура("ИдГруппы", ИмяГруппы))[0];
	ВысотаСтроки = НастройкиМнгЧ.ВысотаСтроки;
	ИмяМногострочнойЧасти = НастройкиМнгЧ.Область;

	// При восстановлении сохраненных данных отчета сравниваем исходное кол-во
	// отображаемых в форме строк многострочного раздела с реальным количеством
	// созданных строк в сохраненном отчете.
	Если ТекущееКоличествоСтрокГруппы > ИсходноеКоличествоСтрокГруппы Тогда
		
		// При превышении реального кол-ва строк над исходным кол-вом (по шаблону),
		// автоматически добавляем необходимое колво строк.
		Форма.ДобавитьНеобходимоеКоличествоДопСтрокНаСервере(ТекТабличноеПоле, ТекТабличноеПолеИмя, ИсходноеКоличествоСтрокГруппы, ТекущееКоличествоСтрокГруппы, ИмяГруппы, СтруктураГруппы, ВысотаСтроки, ИмяМногострочнойЧасти);

		Форма[ТекТабличноеПолеИмя] = ТекТабличноеПоле;
		
	КонецЕсли;
	
	// выводим значения строк
	Для Каждого СтрокаТаблицы Из СтруктураГруппы Цикл
		
		НомерСтрокиВТаблице      = СтруктураГруппы.Индекс(СтрокаТаблицы);
		НомерСтрокиВФормеТаблицы = НомерСтрокиВТаблице + 1;
		
		СписокИменКолонокРаздела = Форма.мСтруктураИменаКолонокРазделов[ИмяГруппы];
		
		Для НомерГрафы = 1 По Форма.мСтруктураКолвоКолонокРазделов[ИмяГруппы] Цикл
			
			КолонкаТаблицыИмя = СписокИменКолонокРаздела.Получить(НомерГрафы - 1).Значение;
			
			Если СтруктураГруппы[0].Свойство(КолонкаТаблицыИмя) Тогда
				
				ИмяЯчейки                = КолонкаТаблицыИмя + "_" + НомерСтрокиВФормеТаблицы;
				ОбластьЯчейкиТаблицы     = ТекТабличноеПоле.Области[ИмяЯчейки];
				ЗначениеЯчейки           = СтрокаТаблицы[КолонкаТаблицыИмя];
				
				Если ОбластьЯчейкиТаблицы.СодержитЗначение = Истина Тогда
					ОбластьЯчейкиТаблицы.Значение = ЗначениеЯчейки;
				Иначе
					// устанавливаем порядковый номер строки
					ОбластьЯчейкиТаблицы.Текст = ЗначениеЯчейки;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьНеобходимоеКоличествоДопСтрокНаСервере(ТекТабличноеПоле, ТекТабличноеПолеИмя, ИсходноеКоличествоСтрокГруппы, ТекущееКоличествоСтрокГруппы, мяГруппы, СтруктураГруппы, ВысотаСтроки, ИмяМногострочнойЧасти) Экспорт
		
	ОбластьДопСтроки = ТекТабличноеПоле.ПолучитьОбласть(ИмяМногострочнойЧасти);
	
	МногострочнаяЧастьВерх = ТекТабличноеПоле.Области[ИмяМногострочнойЧасти].Верх;
	МногострочнаяЧастьНиз = ТекТабличноеПоле.Области[ИмяМногострочнойЧасти].Низ;
	
	КоординатыОбластей = Новый Структура();
	Для Каждого Область Из ТекТабличноеПоле.Области Цикл
		Если СтрНайти(Область.Имя, "_") Тогда
			КоординатыОбластей.Вставить(Область.Имя, Область.Верх);
		КонецЕсли;
	КонецЦикла;
	
	ТекТабличноеПоле.ВставитьОбласть(ОбластьДопСтроки.Область(), ТекТабличноеПоле.Область(МногострочнаяЧастьНиз + 1, , МногострочнаяЧастьНиз + (ТекущееКоличествоСтрокГруппы - ИсходноеКоличествоСтрокГруппы) * ВысотаСтроки), ТипСмещенияТабличногоДокумента.ПоВертикали);
	
	Для НомНовойСтроки = ИсходноеКоличествоСтрокГруппы По ТекущееКоличествоСтрокГруппы Цикл
		
		Для Каждого Область Из ОбластьДопСтроки.Области Цикл
			
			Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
				
				ОбластьТаблДок = ТекТабличноеПоле.Область(КоординатыОбластей[Область.Имя] + (ТекущееКоличествоСтрокГруппы - НомНовойСтроки) * ВысотаСтроки, Область.Лево, КоординатыОбластей[Область.Имя] + (ТекущееКоличествоСтрокГруппы - НомНовойСтроки) * ВысотаСтроки, Область.Право);
				
				Если ОбластьТаблДок.СодержитЗначение Тогда
					ОбластьТаблДок.Очистить();
				КонецЕсли;
				
				ОбластьТаблДок.Имя = Лев(Область.Имя, СтрНайти(Область.Имя, "_")) + Строка(ТекущееКоличествоСтрокГруппы - НомНовойСтроки + 1);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	ТекТабличноеПоле.Область(ТекТабличноеПоле.Области[ИмяМногострочнойЧасти].Верх, , ТекТабличноеПоле.Области[ИмяМногострочнойЧасти].Верх).Имя = "";
	
	ТекТабличноеПоле.Область(МногострочнаяЧастьВерх, , МногострочнаяЧастьВерх).Имя = ИмяМногострочнойЧасти;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиРазделВТабличныйДокументСпецНаСервере(Знач НастройкиМнгЧ, ИмяГруппы, Раздел, СтруктураГруппы, мСтруктураКолвоКолонокРазделов) Экспорт
	
	// реальное кол-во строк (колво заполненных строк)
	ТекущееКоличествоСтрокГруппы = СтруктураГруппы.Количество();
	
	// Режим восстановления многострочных блоков. Из процедуры ВосстановитьСохраненныеДанные.
	НастройкиМнгЧ = ДанныеФормыВЗначение(НастройкиМнгЧ, Тип("ТаблицаЗначений")).Скопировать();
	
	НазвОбласти = НастройкиМнгЧ.Найти(ИмяГруппы, "ИдГруппы").Область;
	
	НастройкиМнгЧ.Колонки.Добавить("НизМногострочнойЧасти");
	НастройкиМнгЧ.Колонки.Добавить("ВерхМногострочнойЧасти");
	
	// Определим координаты всех многострочных блоков, для последующего восстановления.
	Для каждого Зап Из НастройкиМнгЧ Цикл
		КоординатаНиз  = Раздел.Области[Зап.Область].Низ;
		КоординатаВерх = Раздел.Области[Зап.Область].Верх;
		Зап.НизМногострочнойЧасти    = КоординатаНиз;
		Зап.ВерхМногострочнойЧасти   = КоординатаВерх;
		// Координаты текущей области
		Если Зап.Область = НазвОбласти Тогда
			Низ           = КоординатаНиз;
			Верх          = КоординатаВерх;
		КонецЕсли;
	КонецЦикла;
	
	ВысотаСтроки = НастройкиМнгЧ.Найти(ИмяГруппы, "ИдГруппы").ВысотаСтроки;
		
	// Скопируем верхнюю часть документа, не включая многострочную часть.
	ТаблДок = Раздел.ПолучитьОбласть(1, , Верх - 1);
	// Скопируем подвал, все, что ниже области многострочного блока.
	Подвал = Раздел.ПолучитьОбласть(Низ + 1, , Раздел.ВысотаТаблицы);
			
	Строка = Раздел.ПолучитьОбласть(Верх, , Верх + ВысотаСтроки - 1);
	
	Если ВысотаСтроки > 1 Тогда
		ОбластьОпределениеВысотыСтрокиМногострочнойЧасти=Строка.Области.Найти("ОпределениеВысотыСтрокиМногострочнойЧасти");
		Если ОбластьОпределениеВысотыСтрокиМногострочнойЧасти<>Неопределено Тогда
			ОбластьОпределениеВысотыСтрокиМногострочнойЧасти.Имя = "";
		КонецЕсли;
	КонецЕсли;
	
	Если Строка.Области.Найти(НазвОбласти) <> Неопределено Тогда
		Строка.Области[НазвОбласти].Имя = "";
	КонецЕсли;
	
	// При превышении реального кол-ва строк над исходным кол-вом (по шаблону),
	// автоматически добавляем необходимое колво строк.
	
	Для НомНовойСтроки = 1 По ТекущееКоличествоСтрокГруппы Цикл
		// Переопределим именнованность.
		Строка1 = Строка.ПолучитьОбласть(1, , Строка.ВысотаТаблицы);
		НомСтр = Формат(НомНовойСтроки, "ЧГ=0");
		
		СписокИменКолонокРаздела = мСтруктураИменаКолонокРазделов[ИмяГруппы];
		
		Для НомерГрафы = 1 По мСтруктураКолвоКолонокРазделов[ИмяГруппы] Цикл
			
			КолИмя = СписокИменКолонокРаздела.Получить(НомерГрафы - 1).Значение;
			
			Если СтруктураГруппы[0].Свойство(КолИмя) Тогда
				
				Строка1.Области[КолИмя + "_1"].Имя = КолИмя + "_" + НомСтр;
				
			КонецЕсли;
			
		КонецЦикла;
		
		ЗаполнитьСтрокуДаннымиИзТаблицы(ДанныеФормыВЗначение(СтруктураГруппы, Тип("ТаблицаЗначений")), Строка1, СтруктураГруппы[НомНовойСтроки - 1], НомСтр);
		ТаблДок.Вывести(Строка1);
		
	КонецЦикла;
		
	ТаблДок.Вывести(Подвал);
	
	Раздел.Очистить();
	Раздел.Вывести(ТаблДок);
		
	// Восстановим области.
	Для каждого Зап Из НастройкиМнгЧ Цикл
		Раздел.Область("R" + Формат(Зап.НизМногострочнойЧасти, "ЧГ=0") + ":R" + Формат(Зап.ВерхМногострочнойЧасти, "ЧГ=0")).Имя = Зап.Область;
	КонецЦикла;
		
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтрокуДаннымиИзТаблицы(ТаблицаРаздела, Строка1, СтрокаТаблицы, НомерНаФорме)
	
	// Заполняем строку.
	Для каждого Колонка Из ТаблицаРаздела.Колонки Цикл
		КолонкаИмя = Колонка.Имя;
		НазвЯчейки = КолонкаИмя + "_" + НомерНаФорме;
		
		ЗначениеПоказателя = СтрокаТаблицы[КолонкаИмя];
		
		Если Строка1.Области[НазвЯчейки].СодержитЗначение = Истина Тогда
			Строка1.Области[НазвЯчейки].Значение = ЗначениеПоказателя;
		Иначе
			Строка1.Области[НазвЯчейки].Текст = ЗначениеПоказателя;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ИзменитьТаблицуПараметровАвтозаполнения(Парам, Лист)
	Перем МассивВариантовЗаполненияСтраниц;
	Перем ТаблицаВариантыЗаполнения;
	Перем ТаблицаСтраницРаздела;
	
	ИмяТекущейСтраницыПанели = Лист;

	Если Не мСтруктураВариантыЗаполнения.Свойство(ИмяТекущейСтраницыПанели, МассивВариантовЗаполненияСтраниц) Тогда
		Возврат;
	КонецЕсли;
	
	МассивВариантовЗаполненияСтраниц = ЭтотОбъект["ТаблицаВариантыЗаполнения" + ИмяТекущейСтраницыПанели];

	НомерТекущейСтраницы = 1;

	Если мСтруктураМногостраничныхРазделов.Свойство(ИмяТекущейСтраницыПанели, ТаблицаСтраницРаздела) Тогда
		
		ТаблицаСтраницРаздела = ЭтотОбъект[ТаблицаСтраницРаздела];
		
		// Раздел является многостраничным, определим активную страницу раздела:
		СтрТаблицаСтраницы = ТаблицаСтраницРаздела.НайтиСтроки(Новый Структура("АктивнаяСтраница", Истина));
		Если СтрТаблицаСтраницы.Количество() > 0 Тогда
			НомерТекущейСтраницы = ТаблицаСтраницРаздела.Индекс(СтрТаблицаСтраницы[0]) + 1;
		КонецЕсли;
	КонецЕсли;

	Если Парам = 1 Тогда // создаем таблицу параметров автозаполнения ячеек добавленного листа

		// При добавлении новой страницы параметры автозаполнения ее ячеек определяем
		// по эталонной модели
		НоваяТаблицаВариантыЗаполнения = РегламентированнаяОтчетностьВызовСервера.ПолучитьТаблицуВариантовЗаполненияНаСервере(ЭтотОбъект, ИмяТекущейСтраницыПанели, НЕ СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет, СтруктураРеквизитовФормы.мОписаниеТиповЧислоЕ);

		Если НоваяТаблицаВариантыЗаполнения <> Неопределено Тогда
			
			ТаблВариантов = МассивВариантовЗаполненияСтраниц.Добавить();	
			
			Если ТипЗнч(НоваяТаблицаВариантыЗаполнения) = Тип("ДанныеФормыКоллекция") Тогда
				
				КопироватьДанныеФормы(НоваяТаблицаВариантыЗаполнения, ТаблВариантов.ТаблицаВариантовЗаполнения);
				
			Иначе
				
				ЗначениеВДанныеФормы(НоваяТаблицаВариантыЗаполнения, ТаблВариантов.ТаблицаВариантовЗаполнения);
				
			КонецЕсли;
			
		КонецЕсли;

	Иначе // Парам = -1. Удаляем таблицу параметров автозаполнения ячеек удаленного листа

		Если МассивВариантовЗаполненияСтраниц.Количество() > 1 Тогда 
			МассивВариантовЗаполненияСтраниц.Удалить(НомерТекущейСтраницы - 1);
		КонецЕсли;

	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура ОчиститьТабличноеПолеНаСервере(ВыбТабличноеПолеИмя) Экспорт

	ОчиститьТабличноеПоле(ЭтотОбъект, ВыбТабличноеПолеИмя);

КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТабличноеПолеНаКлиенте(ВыбТабличноеПолеИмя) Экспорт

	ОчиститьТабличноеПоле(ЭтотОбъект, ВыбТабличноеПолеИмя);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОчиститьТабличноеПоле(Форма, ВыбТабличноеПолеИмя)
	
	РегламентированнаяОтчетностьКлиентСервер.ОчиститьТабличноеПоле(Форма, ВыбТабличноеПолеИмя);
	
КонецПроцедуры

&НаКлиенте
Процедура Печать(ВидПечати, НеИзФормыОтчета = Ложь) Экспорт
	
	Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1. Формируется печатная форма...'"), Заголовок), , , БиблиотекаКартинок.Печать);
	
	Если НЕ ПечатьНаСервере(ВидПечати) Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ОткрытьФормуПредварительногоПросмотра(ЭтотОбъект, ВидПечати, , СтруктураРеквизитовФормы.СписокПечатаемыхЛистов);
	
	СтруктураРеквизитовФормы.мРежимПечати = Ложь;
	
КонецПроцедуры

&НаСервере
Функция ПечатьНаСервере(ВидПечати)
	
	Если НЕ РегламентированнаяОтчетность.ПринтерДоступен() Тогда
		
		Сообщение = Новый СообщениеПользователю;

		Сообщение.Текст = НСтр("ru='Перед формированием печатных форм необходимо определить в системе принтер и задать его в качестве используемого по умолчанию!'");

		Сообщение.Сообщить();
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Если ТипЗнч(мДеревоВыбранныхСтраниц) <> Тип("ДанныеФормыДерево") Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	СтруктураРеквизитовФормы.мПечатныеФормы.Очистить();
	СтруктураРеквизитовФормы.мРежимПечати = Истина;
	
	СохранитьДанныеРаздела(СтруктураРеквизитовФормы.НаимТекущегоРаздела, Ложь, Ложь);
	
	// Если текущий раздел многостраничный, имеющий многострочные части,
	// предварительно сохраним данные многострочных групп.
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Товары" Тогда
		СохрТЗМногострочнойГруппыТовары  = ЭтотОбъект[СтруктураРеквизитовФормы.мИдГруппыТовары].Выгрузить();
	ИначеЕсли СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Упаковка" Тогда
		СохрТЗМногострочнойГруппыУпаковка  = ЭтотОбъект[СтруктураРеквизитовФормы.мИдГруппыУпаковка].Выгрузить();
	КонецЕсли;
	
	ТабДок = Отчеты[Сред(Лев(ИмяФормы, СтрНайти(ИмяФормы, ".Форма.") - 1), 7)].ПолучитьМакет("ФормаОтчета2016Кв1_ПФ");
	
	ПечатнаяФорма = РегламентированнаяОтчетность.НоваяСтраница();
	Обл1 = ТабДок.ПолучитьОбласть("ОсновнаяЧасть1а");
	Для Каждого Обл Из Обл1.Области Цикл 
		Если Обл.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда 
			СтруктураДанныхТитульный.Свойство(Обл.Имя, Обл.Значение);
		КонецЕсли;
	КонецЦикла;
	ПечатнаяФорма.Вывести(Обл1);
	Обл1 = ТабДок.ПолучитьОбласть("ОсновнаяЧасть1б");
	Для Каждого Обл Из Обл1.Области Цикл 
		Если Обл.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда 
			СтруктураДанныхТитульный.Свойство(Обл.Имя, Обл.Значение);
		КонецЕсли;
	КонецЦикла;
	ПечатнаяФорма.Вывести(Обл1);
	СтруктураРеквизитовФормы.мПечатныеФормы.Добавить(ПечатнаяФорма, "Расчет экологического сбора");
	
	ПечатнаяФорма = РегламентированнаяОтчетность.НоваяСтраница();
	Обл1 = ТабДок.ПолучитьОбласть("ЗаголовокРаздел2");
	ПечатнаяФорма.Вывести(Обл1);
	Обл1 = ТабДок.ПолучитьОбласть("ЗаголовокТЧ");
	ПечатнаяФорма.Вывести(Обл1);
	Обл1 = ТабДок.ПолучитьОбласть("ОблИтого");
	Обл1.Области.Итого.Значение = СтруктураДанныхИтоги.П01;
	ПечатнаяФорма.Вывести(Обл1);
	Обл1 = ТабДок.ПолучитьОбласть("ОблИтогоТовары");
	Обл1.Области.ИтогоТовары.Значение = СтруктураДанныхИтоги.П02;
	ПечатнаяФорма.Вывести(Обл1);
	
	НомГр = 0;
	Для Каждого Стр Из ТаблицаСтраницыТовары Цикл 
		НомГр = НомГр + 1;
		НомГрСтр = Формат(НомГр, "ЧГ=");
		ОблЗаголовокГруппы = ТабДок.ПолучитьОбласть("ОблЗаголовокГруппы");
		ОблЗаголовокГруппы.Области.ГруппаОписание.Значение = Стр.Данные[0].Значение.П100;
		ОблЗаголовокГруппы.Области.ИтогоГруппа.Значение = Стр.Данные[0].Значение.П112;
		Если Не ПечатнаяФорма.ПроверитьВывод(ОблЗаголовокГруппы) Тогда 
			СтруктураРеквизитовФормы.мПечатныеФормы.Добавить(ПечатнаяФорма, "Расчет экологического сбора");
			ПечатнаяФорма = РегламентированнаяОтчетность.НоваяСтраница();
			Обл1 = ТабДок.ПолучитьОбласть("ЗаголовокТЧ");
			ПечатнаяФорма.Вывести(Обл1)
		КонецЕсли;
		ПечатнаяФорма.Вывести(ОблЗаголовокГруппы);
		
		НомТов = 0;
		Для Каждого Подробно Из Стр.ДанныеДопСтрок[0].Значение.П11000 Цикл 
			НомТов = НомТов + 1;
			ОблПодробно = ТабДок.ПолучитьОбласть("ОблТовар");
			Для Каждого Обл Из ОблПодробно.Области Цикл 
				Если Обл.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
					Обл.Значение = Подробно[Обл.Имя];
				КонецЕсли;
			КонецЦикла;
			ОблПодробно.Области.П1100001.Значение = "1." + НомГрСтр + "." + Формат(НомТов, "ЧГ=");
			
			Если Не ПечатнаяФорма.ПроверитьВывод(ОблПодробно) Тогда 
				СтруктураРеквизитовФормы.мПечатныеФормы.Добавить(ПечатнаяФорма, "Расчет экологического сбора");
				ПечатнаяФорма = РегламентированнаяОтчетность.НоваяСтраница();
				Обл1 = ТабДок.ПолучитьОбласть("ЗаголовокТЧ");
				ПечатнаяФорма.Вывести(Обл1)
			КонецЕсли;
			ПечатнаяФорма.Вывести(ОблПодробно)
		КонецЦикла;
	КонецЦикла;
	
	Обл1 = ТабДок.ПолучитьОбласть("ОблИтогоУпаковка");
	Обл1.Области.ИтогоУпаковка.Значение = СтруктураДанныхИтоги.П03;
	ПечатнаяФорма.Вывести(Обл1);
	
	НомГр = 0;
	Для Каждого Стр Из ТаблицаСтраницыУпаковка Цикл 
		НомГр = НомГр + 1;
		НомГрСтр = Формат(НомГр, "ЧГ=");
		ОблЗаголовокГруппы = ТабДок.ПолучитьОбласть("ОблЗаголовокГруппы");
		ОблЗаголовокГруппы.Области.ГруппаОписание.Значение = Стр.Данные[0].Значение.П200;
		ОблЗаголовокГруппы.Области.ИтогоГруппа.Значение = Стр.Данные[0].Значение.П212;
		Если Не ПечатнаяФорма.ПроверитьВывод(ОблЗаголовокГруппы) Тогда 
			СтруктураРеквизитовФормы.мПечатныеФормы.Добавить(ПечатнаяФорма, "Расчет экологического сбора");
			ПечатнаяФорма = РегламентированнаяОтчетность.НоваяСтраница();
			Обл1 = ТабДок.ПолучитьОбласть("ЗаголовокТЧ");
			ПечатнаяФорма.Вывести(Обл1)
		КонецЕсли;
		ПечатнаяФорма.Вывести(ОблЗаголовокГруппы);
		
		НомТов = 0;
		Для Каждого Подробно Из Стр.ДанныеДопСтрок[0].Значение.П21000 Цикл 
			НомТов = НомТов + 1;
			ОблПодробно = ТабДок.ПолучитьОбласть("ОблУпаковка");
			Для Каждого Обл Из ОблПодробно.Области Цикл 
				Если Обл.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
					Обл.Значение = Подробно[Обл.Имя];
				КонецЕсли;
			КонецЦикла;
			ОблПодробно.Области.П2100001.Значение = "2." + НомГрСтр + "." + Формат(НомТов, "ЧГ=");
			
			Если Не ПечатнаяФорма.ПроверитьВывод(ОблПодробно) Тогда 
				СтруктураРеквизитовФормы.мПечатныеФормы.Добавить(ПечатнаяФорма, "Расчет экологического сбора");
				ПечатнаяФорма = РегламентированнаяОтчетность.НоваяСтраница();
				Обл1 = ТабДок.ПолучитьОбласть("ЗаголовокТЧ");
				ПечатнаяФорма.Вывести(Обл1);
			КонецЕсли;
			ПечатнаяФорма.Вывести(ОблПодробно)
		КонецЦикла;
	КонецЦикла;
	
	Обл1 = ТабДок.ПолучитьОбласть("ОбластьПодвал");
	Обл1.Области.ДокументыКоличество.Значение = СтруктураДанныхИтоги.П04;
	Обл1.Области.Должность.Значение = СтруктураДанныхИтоги.Должность;
	Обл1.Области.ФИО.Значение = СтруктураДанныхИтоги.ФИО;
	Обл1.Области.ДатаПодписи.Значение = Формат(СтруктураДанныхИтоги.ДатаПодписи, "ДФ='dd MMMM yyyy'") + " г.";
	Если Не ПечатнаяФорма.ПроверитьВывод(Обл1) Тогда 
		СтруктураРеквизитовФормы.мПечатныеФормы.Добавить(ПечатнаяФорма, "Расчет экологического сбора");
		ПечатнаяФорма = РегламентированнаяОтчетность.НоваяСтраница();
	КонецЕсли;
	
	Обл1.Области.ЛистыКоличество.Значение = СтруктураРеквизитовФормы.мПечатныеФормы.Количество() + 1;
	ПечатнаяФорма.Вывести(Обл1);
	СтруктураРеквизитовФормы.мПечатныеФормы.Добавить(ПечатнаяФорма, "Расчет экологического сбора");
	
	РегламентированнаяОтчетностьКлиентСервер.ПроставлениеНомеровЛистов(ЭтотОбъект, , СтруктураРеквизитовФормы.СписокПечатаемыхЛистов);
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура СохранитьНаКлиенте(Автосохранение = Ложь, ВыполняемоеОповещение=Неопределено) Экспорт
	
	Если СтруктураДанныхТитульный.Количество() = 0
		ИЛИ СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
		СтруктураДанныхТитульный.Вставить("НомерКорректировки", ТабличныйДокумент.Области.НомерКорректировки.Значение);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СтруктураДанныхТитульный.НомерКорректировки) Тогда
		ЗначениеКорректировки = 0;
	Иначе
		ЗначениеКорректировки = Число(СтруктураДанныхТитульный.НомерКорректировки);
	КонецЕсли;
	Вариант = СтруктураРеквизитовФормы.ВидДокумента * ЗначениеКорректировки;
	
	Если НЕ РегламентированнаяОтчетностьКлиент.ПриЗаписиРегламентированногоОтчетаНаКлиенте(ЭтотОбъект, , Автосохранение, Вариант) Тогда
		Возврат;
	КонецЕсли;
	
	ПодобныйОтчетСуществует = Ложь;
	ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки = Ложь;
	
	Если Элементы.РазделыОтчета.ТекущиеДанные = Неопределено Тогда
		НаименованиеТекущегоРаздела = СтруктураРеквизитовФормы.НаимТекущегоРаздела;
	Иначе
		НаименованиеТекущегоРаздела = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
	КонецЕсли;
	
	РезультатСохранения = ПередСохранением(, ПодобныйОтчетСуществует, Вариант, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, Автосохранение, НаименованиеТекущегоРаздела);
	ВидДокументаНомерКорректировкиИзменен = Неопределено;
	
	Если ПодобныйОтчетСуществует И Автосохранение Тогда
		Возврат;
	КонецЕсли;
	
	НуженВопросПередСохранением = (ПодобныйОтчетСуществует ИЛИ ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки);
	
	Если НуженВопросПередСохранением Тогда
		
		СохранитьНаКлиентеСВопросом(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, ПодобныйОтчетСуществует);
		
	Иначе
		
		ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНаКлиентеСВопросом(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, ПодобныйОтчетСуществует)
	
	Если ПодобныйОтчетСуществует Тогда
		
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(КодВозвратаДиалога.Да, "Сохранить");
		Кнопки.Добавить(КодВозвратаДиалога.Нет, "Отмена");
		
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Отчет с видом %1 уже существует.
			|Сохранить отчет с таким же видом?'"), ?(Вариант = 0, """Первичный""", """Корректирующий/" + Вариант + """"));
		ДополнительныеПараметры = Новый Структура("Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки", Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки);
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросСохранитьОтчетСТакимЖеВидомЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, Кнопки, , Кнопки.Получить(1).Значение);
		
	Иначе
		
		СохранитьНаКлиентеСВопросомПродолжение(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросСохранитьОтчетСТакимЖеВидомЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Автосохранение = ДополнительныеПараметры.Автосохранение;
	Вариант = ДополнительныеПараметры.Вариант;
	ВыполняемоеОповещение = ДополнительныеПараметры.ВыполняемоеОповещение;
	ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки = ДополнительныеПараметры.ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки;
	
	Ответ = РезультатВопроса;
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	СохранитьНаКлиентеСВопросомПродолжение(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНаКлиентеСВопросомПродолжение(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки)
	
	Если ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки Тогда
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("ВидОтчета", Вариант);
		
		ФормаВопроса = РегламентированнаяОтчетностьКлиент.ПолучитьОбщуюФормуПоИмени("ВопросПриИзмененииВидаДокументаНомераКорректировки", ПараметрыФормы);
		ФормаВопроса.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		ДополнительныеПараметры = Новый Структура("Автосохранение, Вариант, ВыполняемоеОповещение", Автосохранение, Вариант, ВыполняемоеОповещение);
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросПриИзмененииВидаДокументаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ФормаВопроса.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
		ФормаВопроса.Открыть();
	Иначе
		Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Сохраняется %1...'"), Заголовок), , , БиблиотекаКартинок.Записать);
		РезультатСохранения = Сохранить(Автосохранение, , Вариант, Ложь, Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
		ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПриИзмененииВидаДокументаЗавершение(КодВозврата, ДополнительныеПараметры) Экспорт
	
	Автосохранение = ДополнительныеПараметры.Автосохранение;
	Вариант = ДополнительныеПараметры.Вариант;
	ВыполняемоеОповещение = ДополнительныеПараметры.ВыполняемоеОповещение;
	
	Если КодВозврата = КодВозвратаДиалога.Да
		ИЛИ КодВозврата = КодВозвратаДиалога.Нет Тогда
		ВидДокументаНомерКорректировкиИзменен = ?(КодВозврата = КодВозвратаДиалога.Да, Истина, Ложь);
	Иначе
		Возврат;
	КонецЕсли;
	
	Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Сохраняется %1...'"), Заголовок), , , БиблиотекаКартинок.Записать);
	РезультатСохранения = Сохранить(Автосохранение, , Вариант, ВидДокументаНомерКорректировкиИзменен, Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
	ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения)
	
	КлючУникальности = СтруктураРеквизитовФормы.мСохраненныйДок;
	
	Если РезультатСохранения Тогда
		
		РегламентированнаяОтчетностьКлиент.ПослеЗаписиРегламентированногоОтчета(ЭтотОбъект);
		
		Если ВыполняемоеОповещение <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ВыполняемоеОповещение);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПередСохранением(КодИФНС = "не применимо", ПодобныйОтчетСуществует, Вариант, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, Автосохранение, НаимТекРаздела)
	
	Если РегламентированнаяОтчетность.БылиИзмененыКлючевыеРеквизитыОтчета(ЭтотОбъект, КодИФНС)
	   И РегламентированнаяОтчетность.СуществуетДокументСАналогичнымиРеквизитами(ЭтотОбъект, КодИФНС) Тогда
		
		ПодобныйОтчетСуществует = Истина;
		
	КонецЕсли;
	
	СтруктураРеквизитовФормы.мЗаписываетсяНовыйДокумент = (СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено ИЛИ СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено);
	
	Если Вариант <> Неопределено И ((СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено) ИЛИ (СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено) ИЛИ (Вариант <> СтруктураРеквизитовФормы.мВариант)) Тогда
		
		Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено ИЛИ СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено Тогда
			
		ИначеЕсли Вариант <> СтруктураРеквизитовФормы.мВариант Тогда
			
			ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки = Истина;
			
		КонецЕсли;

	КонецЕсли;
	
	Если ПодобныйОтчетСуществует
	 ИЛИ ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки Тогда
	 
	 	Возврат Ложь;
		
 	КонецЕсли;
		
	Возврат Сохранить(Автосохранение, КодИФНС, Вариант, , НаимТекРаздела);
		
КонецФункции

&НаСервере
Функция Сохранить(Автосохранение = Ложь, КодИФНС = "не применимо", Вариант, ВидДокументаНомерКорректировкиИзменен = Неопределено, НаимТекРаздела) Экспорт
	
	ДанныеДляРазблокирования = Неопределено;
	
	Если НЕ СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
		Если НЕ СтруктураРеквизитовФормы.мБезОткрытияФормы Тогда
			ДанныеДляРазблокирования = Новый Структура("Ключ,ИдФормы",
			СтруктураРеквизитовФормы.мСохраненныйДок, УникальныйИдентификатор);
		КонецЕсли;
		СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.ПолучитьОбъект();
	КонецЕсли;
	
	Если НЕ РегламентированнаяОтчетность.ПриЗаписиРегламентированногоОтчетаНаСервере(ЭтотОбъект, КодИФНС, Автосохранение, Вариант, ВидДокументаНомерКорректировкиИзменен, СтруктураРеквизитовФормы.мСохраненныйДок) Тогда
		СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
		Возврат Ложь;
	КонецЕсли;

	// установим текущие значения реквизитов документа
	СтруктураРеквизитовФормы.мСохраненныйДок.ИсточникОтчета = Метаданные.Отчеты[Сред(Лев(СтрЗаменить(ИмяФормы, "Внешний", ""), СтрНайти(СтрЗаменить(ИмяФормы, "Внешний", ""), ".Форма.") - 1), 7)].Имя;
	СтруктураРеквизитовФормы.мСохраненныйДок.НаименованиеОтчета = Метаданные.Отчеты[Сред(Лев(СтрЗаменить(ИмяФормы, "Внешний", ""), СтрНайти(СтрЗаменить(ИмяФормы, "Внешний", ""), ".Форма.") - 1), 7)].ОсновнаяФорма.Синоним;
	СтруктураРеквизитовФормы.мСохраненныйДок.ДатаНачала               = СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета;
	СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания            = СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета;
	СтруктураРеквизитовФормы.мСохраненныйДок.Периодичность            = СтруктураРеквизитовФормы.мПериодичность;
	СтруктураРеквизитовФормы.мСохраненныйДок.ВыбраннаяФорма           = СтруктураРеквизитовФормы.мВыбраннаяФорма;
	СтруктураРеквизитовФормы.мСохраненныйДок.Организация              = СтруктураРеквизитовФормы.Организация;
	СтруктураРеквизитовФормы.мСохраненныйДок.ДатаПодписи              = ДатаПодписи;
	СтруктураРеквизитовФормы.мСохраненныйДок.ЕдиницаИзмерения         = СтруктураРеквизитовФормы.ЕдиницаИзмерения;
	СтруктураРеквизитовФормы.мСохраненныйДок.ТочностьЕдиницыИзмерения = СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения;
	СтруктураРеквизитовФормы.мСохраненныйДок.ВидОтчетности            = Перечисления.ВидыОтчетности.РегламентированнаяОтчетность;
	СтруктураРеквизитовФормы.мСохраненныйДок.Комментарий              = Комментарий;
	СтруктураРеквизитовФормы.мСохраненныйДок.Вид                      = Вариант;
	СтруктураРеквизитовФормы.мСохраненныйДок.ПредставлениеВида        = РегламентированнаяОтчетность.ПредставлениеВидаДокумента(СтруктураРеквизитовФормы.мСохраненныйДок.Вид);
	СтруктураРеквизитовФормы.мВариант                                 = Вариант;
	
	СтруктураРеквизитовФормы.мСохраненныйДок.ФорматВыгрузки = "Автоматически";
	
	СохранитьДанныеРаздела(НаимТекРаздела, Ложь, Ложь);
	
	ЗаполнитьПустыеСтруктурыДанных();
		
	// формируем данные редактируемых ячеек таблицы
	ПоказателиОтчета = Новый Структура();
	
	ЗаполнитьПоказателиОтчетаНаСервере(ПоказателиОтчета);
	
	// формируем список сохранения
	СписокСохранения = Новый Структура();
	
	// вставляем данные редактируемых ячеек таблицы	
	СписокСохранения.Вставить("ПоказателиОтчета", ПоказателиОтчета);
	
	СписокСохранения.Вставить("КодОрганаРПН", КодОрганаРПН);
	
	ДанныеМногострочныхРазделов = Новый Структура;
	
	Для Каждого ЭлементСтруктуры Из мСтруктураМногострочныхРазделов Цикл
		
		ДанныеМногострочныхРазделов.Вставить(ЭлементСтруктуры.Ключ, ДанныеФормыВЗначение(ЭтотОбъект[ЭлементСтруктуры.Значение], Тип("ТаблицаЗначений")));
		
	КонецЦикла;
	
	// вставляем данные многострочных разделов
	СписокСохранения.Вставить("ДанныеМногострочныхРазделов", ДанныеМногострочныхРазделов);
	
	ДанныеМногостраничныхРазделов = Новый Структура;
	
	МассивТиповНеопределено = Новый Массив; 
	МассивТиповНеопределено.Добавить(Тип("Неопределено"));
	ОписаниеТиповНеопределено = Новый ОписаниеТипов(МассивТиповНеопределено);
	
	Для Каждого ЭлементСтруктуры Из мСтруктураМногостраничныхРазделов Цикл
		
		ДанныеМногостраничныхРазделов.Вставить(ЭлементСтруктуры.Ключ, ДанныеФормыВЗначение(ЭтотОбъект[ЭлементСтруктуры.Значение], Тип("ТаблицаЗначений")));
		
		ТаблЗнач = Неопределено;
		
		Если ДанныеМногостраничныхРазделов.Свойство(ЭлементСтруктуры.Ключ, ТаблЗнач) Тогда
						
			Если НЕ ТаблЗнач.Колонки.Найти("Данные") = Неопределено Тогда
												
				ТаблЗнач.Колонки.Удалить("Данные");
				ТаблЗнач.Колонки.Добавить("Данные", ОписаниеТиповНеопределено);
				
				Ном = 0;
				
				Для Каждого СтрокаТаблЗнач Из ТаблЗнач Цикл
					
					СтрокаТаблЗнач.Данные = ЭтотОбъект[ЭлементСтруктуры.Значение][Ном].Данные[0].Значение;
					
					Ном = Ном + 1;
					
				КонецЦикла;
				
			КонецЕсли;
						
			Если НЕ ТаблЗнач.Колонки.Найти("ДанныеДопСтрок") = Неопределено Тогда
															
				ТаблЗнач.Колонки.Удалить("ДанныеДопСтрок");
				ТаблЗнач.Колонки.Добавить("ДанныеДопСтрок", ОписаниеТиповНеопределено);
				
				Ном = 0;
				
				Для Каждого СтрокаТаблЗнач Из ТаблЗнач Цикл
						
					Если (ЭтотОбъект[ЭлементСтруктуры.Значение][Ном].ДанныеДопСтрок.Количество() > 0)
						И (ЭтотОбъект[ЭлементСтруктуры.Значение][Ном].ДанныеДопСтрок[0].Представление = "ДанныеФормыКоллекцияТаблицаДопСтрокРаздела") Тогда
						
						Если ТипЗнч(ЭтотОбъект[ЭлементСтруктуры.Значение][Ном].ДанныеДопСтрок[0].Значение) = Тип("Структура") Тогда 
							СтрокаТаблЗнач.ДанныеДопСтрок = Новый Структура;
							Для Каждого КЗ Из ЭтотОбъект[ЭлементСтруктуры.Значение][Ном].ДанныеДопСтрок[0].Значение Цикл 
								СтрокаТаблЗнач.ДанныеДопСтрок.Вставить(КЗ.Ключ, ДанныеФормыВЗначение(КЗ.Значение, Тип("ТаблицаЗначений")));
							КонецЦикла;
						Иначе 
							СтрокаТаблЗнач.ДанныеДопСтрок = ДанныеФормыВЗначение(ЭтотОбъект[ЭлементСтруктуры.Значение][Ном].ДанныеДопСтрок[0].Значение, Тип("ТаблицаЗначений"));
						КонецЕсли;
						
						Ном = Ном + 1;
						
						Продолжить;
							
					КонецЕсли;
					
					СтруктураДанныхДопСтрок = Новый Структура;
					
					Для Каждого ЭлСтруктуры Из ЭтотОбъект[ЭлементСтруктуры.Значение][Ном].ДанныеДопСтрок Цикл
							
						СтруктураДанныхДопСтрок.Вставить(ДанныеФормыВЗначение(ЭлСтруктуры.Значение, Тип("ТаблицаЗначений")));	
							
					КонецЦикла;
					
					СтрокаТаблЗнач.ДанныеДопСтрок = СтруктураДанныхДопСтрок;
			
					Ном = Ном + 1;
								
				КонецЦикла;
				
			КонецЕсли;
						
		КонецЕсли;
				
	КонецЦикла;
		
	// вставляем данные многостраничных разделов
	СписокСохранения.Вставить("ДанныеМногостраничныхРазделов", ДанныеМногостраничныхРазделов);
	
	ДанныеВариантовАвтоЗаполнения = Новый Структура;
	
	Для Каждого ЭлементСтруктуры Из мСтруктураВариантыЗаполнения Цикл
		
		МассивТаблЗнач = Новый Массив;
		
		ДанныеВариантовАвтоЗаполнения.Вставить(ЭлементСтруктуры.Ключ, МассивТаблЗнач);
			
		Для Каждого ЭлементМассива Из ЭтотОбъект["ТаблицаВариантыЗаполнения" + ЭлементСтруктуры.Ключ] Цикл
			
			МассивТаблЗнач.Добавить(ДанныеФормыВЗначение(ЭлементМассива.ТаблицаВариантовЗаполнения, Тип("ТаблицаЗначений")));
			
		КонецЦикла;
			
	КонецЦикла;
	
	// вставляем данные вариантов автозаполнения ячеек
	СписокСохранения.Вставить("ДанныеВариантовАвтоЗаполнения", ДанныеВариантовАвтоЗаполнения);

	// вствляем версию формы
	СписокСохранения.Вставить("ВерсияФормы", СтруктураРеквизитовФормы.мВерсияФормы);
	
	// вствляем флажок пересчета страниц
	СписокСохранения.Вставить("ФлПодсчетСтраниц", СтруктураРеквизитовФормы.мСчетчикСтраниц);

	// вствляем флажок отключения
	СписокСохранения.Вставить("ФлОтклВыборЗначений", СтруктураРеквизитовФормы.мАвтоВыборКодов);

	// вствляем флажок ручной ввод ВРЕМЕННАЯ ОТМЕНА
	СписокСохранения.Вставить("Автозаполнение", СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);
	
	ХранилищеДанных = Новый ХранилищеЗначения(СписокСохранения);
	СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета = ХранилищеДанных;

	// записываем документ, хранящий данные отчета
	Попытка
		СтруктураРеквизитовФормы.мСохраненныйДок.Записать();
		РегламентированнаяОтчетность.СохранитьСтатусОтправкиРеглОтчета(ЭтаФорма);
	Исключение
		Если НЕ Автосохранение Тогда
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), РегламентированнаяОтчетностьКлиентСервер.СформироватьТекстСообщения(ОписаниеОшибки()));
			Сообщение.Сообщить();
			
		КонецЕсли;
		СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
		Возврат Ложь;
	КонецПопытки;
		
	СохранитьДеревоСтраницОтчета(СтруктураРеквизитовФормы.мСохраненныйДок);

	Модифицированность   = Ложь;
	
	СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
	
	Если НЕ СтруктураРеквизитовФормы.мБезОткрытияФормы
       И НЕ СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
				   
    	ЗаблокироватьДанныеДляРедактирования(СтруктураРеквизитовФормы.мСохраненныйДок, , УникальныйИдентификатор);

    КонецЕсли;
	
	Если ДанныеДляРазблокирования <> Неопределено Тогда
		РазблокироватьДанныеДляРедактирования(ДанныеДляРазблокирования.Ключ, ДанныеДляРазблокирования.ИдФормы);
	КонецЕсли;
	
	Возврат Истина;

КонецФункции

&НаСервере
Процедура ЗаполнитьПоказателиОтчетаНаСервере(ПоказателиОтчета)
	
	Префикс = "ПолеТабличногоДокумента";
	
	Для Каждого Раздел Из мСвойстваРазделовДекларации.ПолучитьЭлементы() Цикл
			
		Если НЕ Раздел.МногостраничностьВРазделе Тогда
			ПоказателиОтчета.Вставить(Префикс + Раздел.ИмяСтраницы, ЭтотОбъект["СтруктураДанных" + Раздел.ИмяСтраницы]);
		КонецЕсли;
	
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПустыеСтруктурыДанных()
	
	СохрТабличныйДокумент = Новый ТабличныйДокумент;
	
	СохрТабличныйДокумент.Вывести(ТабличныйДокумент);
	
	Для Каждого Раздел Из мСвойстваРазделовДекларации.ПолучитьЭлементы() Цикл
		
		Если НЕ Раздел.МногостраничностьВРазделе
		  И (ЭтотОбъект["СтруктураДанных" + Раздел.ИмяСтраницы].Количество() = 0) Тогда
		  
			ТабличныйДокумент.Очистить();
			ТабличныйДокумент.Вывести(ОбъектОтчета(ИмяФормы).ПолучитьМакет(Сред(ИмяФормы, СтрНайти(ИмяФормы, "ФормаОтчета")) + "_" + Раздел.ИмяСтраницы));
			
			СохранитьДанныеРаздела(Раздел.ИмяСтраницы, Ложь);
			
		ИначеЕсли Раздел.МногостраничностьВРазделе
			    И (ЭтотОбъект[мСтруктураМногостраничныхРазделов[Раздел.ИмяСтраницы]][0].Данные.Количество() = 0) Тогда
				
			ТабличныйДокумент.Очистить();
			ТабличныйДокумент.Вывести(ОбъектОтчета(ИмяФормы).ПолучитьМакет(Сред(ИмяФормы, СтрНайти(ИмяФормы, "ФормаОтчета")) + "_" + Раздел.ИмяСтраницы));
			
			СохранитьДанныеРаздела(Раздел.ИмяСтраницы, Ложь);	
			
		КонецЕсли;
	
	КонецЦикла;
	
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(СохрТабличныйДокумент);
	
КонецПроцедуры

&НаСервере
Процедура СохранитьДеревоСтраницОтчета(Знач мСохраненныйДок)
	
	Если мСохраненныйДок <> Неопределено Тогда
				
		Если ТипЗнч(мСохраненныйДок) = Тип("ДокументСсылка.РегламентированныйОтчет") Тогда
			мСохраненныйДок = мСохраненныйДок.ПолучитьОбъект();
		КонецЕсли;
		
		Если Не мСохраненныйДок.ЭтоНовый() Тогда
			// Сохраняем выбранные листы для печати в хранилище
			ХранилищеДанных = Новый ХранилищеЗначения(РеквизитФормыВЗначение("мДеревоСтраницОтчета"));
			мСохраненныйДок.ДеревоНастройкиСтраниц = ХранилищеДанных;
			Попытка
				мСохраненныйДок.Записать();
			Исключение
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьСохраненныеДанные()
	Перем ДанныеМногострочныхРазделов;
	Перем ДанныеМногостраничныхРазделов;
	Перем ДанныеВариановАвтоЗаполнения;
	Перем ПоказателиОтчета;
	Перем ВерсияФормы;
	Перем Автозаполнение;
	Перем ТаблицаМногостраничногоДокумента;
	
	// В случае, если формы была скопирована по F9, то проверим, не изменилась ли организация.
	Если НЕ ЗначениеЗаполнено(СтруктураРеквизитовФормы.Организация) Тогда
		СтруктураРеквизитовФормы.Организация = СтруктураРеквизитовФормы.мСохраненныйДок.Организация;
	КонецЕсли;
	
	СтруктураРеквизитовФормы.ЕдиницаИзмерения         = СтруктураРеквизитовФормы.мСохраненныйДок.ЕдиницаИзмерения;
	СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = СтруктураРеквизитовФормы.мСохраненныйДок.ТочностьЕдиницыИзмерения;
	ДатаПодписи = СтруктураРеквизитовФормы.мСохраненныйДок.ДатаПодписи;
	Комментарий	= СтруктураРеквизитовФормы.мСохраненныйДок.Комментарий;
	
	// восстанавливаем сохраненные данные отчета
	СписокСохранения = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить();
	
	// список листов, выводимых на печать
	ДеревоНастройкиСтраниц = СтруктураРеквизитовФормы.мСохраненныйДок.ДеревоНастройкиСтраниц.Получить();
	ЗначениеВРеквизитФормы(ДеревоНастройкиСтраниц.Скопировать(), "мДеревоСтраницОтчета");
	
		// восстанавливаем версию формы
	Если СписокСохранения.Свойство("ВерсияФормы", ВерсияФормы) Тогда
		Если ВерсияФормы <> СтруктураРеквизитовФормы.мВерсияФормы Тогда
			// Версия формы изменилась.
			// Обновляем пользовательские настройки.
			ОбновитьПользовательскиеНастройки();
		КонецЕсли;
	КонецЕсли;

	// восстанавливаем сохраненные данные многострочных разделов
	Если СписокСохранения.Свойство( "ДанныеМногострочныхРазделов", ДанныеМногострочныхРазделов) Тогда
		
		Для Каждого ЭлементСтруктуры Из ДанныеМногострочныхРазделов Цикл
			
			НайденноеЗначение = Неопределено;
			
			мСтруктураМногострочныхРазделов.Свойство(ЭлементСтруктуры.Ключ, НайденноеЗначение);
			
			Если НЕ НайденноеЗначение = Неопределено Тогда
				
				ЗначениеВДанныеФормы(ЭлементСтруктуры.Значение, ЭтотОбъект[НайденноеЗначение])
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	// восстанавливаем сохраненные данные вариантов автозаполнения ячеек
	Если СписокСохранения.Свойство("ДанныеВариантовАвтоЗаполнения", ДанныеВариановАвтоЗаполнения) Тогда
		
		Если НЕ ДанныеВариановАвтоЗаполнения = Неопределено Тогда
			
			мСтруктураВариантыЗаполнения.Очистить();
			
			Для Каждого ЭлементСтруктуры Из ДанныеВариановАвтоЗаполнения Цикл
				
				мСтруктураВариантыЗаполнения.Вставить(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Ключ);
				
				ЭтотОбъект["ТаблицаВариантыЗаполнения" + ЭлементСтруктуры.Ключ].Очистить();
				
				Для Каждого ЭлементМассива Из ЭлементСтруктуры.Значение Цикл
										
					ТаблВарЗаполнения = ЭтотОбъект["ТаблицаВариантыЗаполнения" + ЭлементСтруктуры.Ключ].Добавить().ТаблицаВариантовЗаполнения;
										
					ЗначениеВДанныеФормы(ЭлементМассива, ТаблВарЗаполнения);
					
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// восстановим сохраненные данные редактируемых ячеек
	СписокСохранения.Свойство("ПоказателиОтчета", ПоказателиОтчета);
	
	ДЛ = Неопределено;
	СписокСохранения.Свойство("ДанныеЛицензий", ДЛ);
	Если ТипЗнч(ДЛ) = Тип("ТаблицаЗначений") Тогда 
		ЗначениеВДанныеФормы(ДЛ, ДанныеЛицензий);
	КонецЕсли;
	
	СписокСохранения.Свойство("КодОрганаРПН", КодОрганаРПН);
	
	// восстанавливаем сохраненные данные многостраничных разделов
	Если СписокСохранения.Свойство("ДанныеМногостраничныхРазделов", ДанныеМногостраничныхРазделов) Тогда
		
		Для Каждого ЭлементСтруктуры Из ДанныеМногостраничныхРазделов Цикл
			
			НайденноеЗначение = Неопределено;
			
			мСтруктураМногостраничныхРазделов.Свойство(ЭлементСтруктуры.Ключ, НайденноеЗначение);
			
			Если НЕ НайденноеЗначение = Неопределено Тогда
				
				НайденноеЗначение = ЭтотОбъект[НайденноеЗначение];
				
				ЗначениеВДанныеФормы(ЭлементСтруктуры.Значение, НайденноеЗначение);
				
				Если НайденноеЗначение[0].Свойство("Данные") Тогда
					
					Для Каждого СтрокаТаблЗнач Из НайденноеЗначение Цикл
						
						Если ТипЗнч(СтрокаТаблЗнач.Данные) = Тип("СписокЗначений") Тогда
							
							СтрокаТаблЗнач.Данные.Очистить();
							СтрокаТаблЗнач.Данные.Добавить(ЭлементСтруктуры.Значение[НайденноеЗначение.Индекс(СтрокаТаблЗнач)].Данные);
							
						КонецЕсли;
						
					КонецЦикла;
					
				КонецЕсли;
				
				Если НайденноеЗначение[0].Свойство("ДанныеДопСтрок") Тогда
					
					Ном = 0;
					
					Для Каждого СтрокаТаблЗнач Из ЭлементСтруктуры.Значение Цикл
						
						Если ТипЗнч(СтрокаТаблЗнач.ДанныеДопСтрок) = Тип("Структура") Тогда
							
							СохранятьМногострКакТЗ = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСвойствоРаздела(ЭтотОбъект, ЭлементСтруктуры.Ключ, "СохранятьМногострКакТЗ");
							Если Не СохранятьМногострКакТЗ Тогда 
								НЗ = НайденноеЗначение[Ном].ДанныеДопСтрок.Добавить(Новый Структура, "ДанныеФормыКоллекцияТаблицаДопСтрокРаздела");
							КонецЕсли;
							
							Для Каждого ЭлСтруктуры Из СтрокаТаблЗнач.ДанныеДопСтрок Цикл
								
								Если СохранятьМногострКакТЗ Тогда 
									ТаблЗнач = ЭлСтруктуры.Значение;
									ЭлСтруктуры.Значение = ЭтотОбъект["Хранилище" + ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ЭлементСтруктуры.Ключ)].Добавить().Таблица;
									ЗначениеВДанныеФормы(ТаблЗнач, ЭлСтруктуры.Значение);
									НайденноеЗначение[Ном].ДанныеДопСтрок.Добавить(ЭлСтруктуры.Значение);
								Иначе
									СтрокаТаблЗначДанныеДопСтрок = ЭтотОбъект["Хранилище" + ЭлСтруктуры.Ключ].Добавить().Таблица;
									ЗначениеВДанныеФормы(ЭлСтруктуры.Значение, СтрокаТаблЗначДанныеДопСтрок);
									НЗ.Значение.Вставить(ЭлСтруктуры.Ключ, СтрокаТаблЗначДанныеДопСтрок);
								КонецЕсли;
								
							КонецЦикла;
							
						ИначеЕсли ТипЗнч(СтрокаТаблЗнач.ДанныеДопСтрок) = Тип("ТаблицаЗначений") Тогда
							
							СтрокаТаблЗначДанныеДопСтрок = ЭтотОбъект["Хранилище" + ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ЭлементСтруктуры.Ключ)].Добавить().Таблица;
							
							ЗначениеВДанныеФормы(СтрокаТаблЗнач.ДанныеДопСтрок, СтрокаТаблЗначДанныеДопСтрок);
							
							НайденноеЗначение[Ном].ДанныеДопСтрок.Добавить(СтрокаТаблЗначДанныеДопСтрок, "ДанныеФормыКоллекцияТаблицаДопСтрокРаздела");
							
						КонецЕсли;
						
						Ном = Ном + 1;
						
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	// восстанавливаем флажок ПодсчетаСтраниц
	СписокСохранения.Свойство("ФлПодсчетСтраниц", СтруктураРеквизитовФормы.мСчетчикСтраниц);
	
	СписокСохранения.Свойство("ФлОтклВыборЗначений", СтруктураРеквизитовФормы.мАвтоВыборКодов);
	Если СтруктураРеквизитовФормы.мАвтоВыборКодов = Неопределено Тогда
		СтруктураРеквизитовФормы.мАвтоВыборКодов = Ложь;
	КонецЕсли;
	
	СписокСохранения.Свойство("Автозаполнение", Автозаполнение);
	СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет = Автозаполнение;
	
	СформироватьДеревоРазделовОтчетаНаСервере();
	
	Префикс = "ПолеТабличногоДокумента";
	
	Для Каждого Раздел Из мСвойстваРазделовДекларации.ПолучитьЭлементы() Цикл	
		
		Если НЕ Раздел.МногостраничностьВРазделе Тогда
			ЭтотОбъект["СтруктураДанных" + Раздел.ИмяСтраницы] = ПоказателиОтчета[Префикс + Раздел.ИмяСтраницы];
		КонецЕсли;
		
	КонецЦикла;
	
	ВосстановитьСведенияОбОрганизацииИзТитульногоЛистаСтарогоОбразца(ПоказателиОтчета);
	
	ВосстановитьСведенияРазделовИзЛистовСтарогоОбразца();
	
	ИмяТекРаздела = "Титульный";
	
	Для Каждого ЭлСтруктуры Из ЭтотОбъект["СтруктураДанных" + ИмяТекРаздела] Цикл
		Попытка
			ТабличныйДокумент.Области[ЭлСтруктуры.Ключ].Значение = ЭлСтруктуры.Значение;
		Исключение
		КонецПопытки;
	КонецЦикла;
	
	РегламентированнаяОтчетность.ОперацииПриВосстановленииРегламентированногоОтчета(ЭтотОбъект);
	
	КопироватьДанныеФормы(мДеревоСтраницОтчета, мДеревоВыбранныхСтраниц);
	
	Модифицированность = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьСведенияОбОрганизацииИзТитульногоЛистаСтарогоОбразца(ПоказателиОтчета)
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьСведенияРазделовИзЛистовСтарогоОбразца()
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьПользовательскиеНастройки()
	
	Сообщение = Новый СообщениеПользователю;

	Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Изменилась версия формы отчета.%1Выполняется обновление пользовательских настроек.'"), Символы.ПС);

	Сообщение.Сообщить();
				
	// Обновляем варианты заполнения показателей отчета
	ЕстьИзмененияВариантыЗаполнения = ОбновитьВариантыЗаполнения();

	// Обновляем настройки страниц отчета (содержание отчета)
	ЕстьИзмененияНастройкаСтраниц   = ОбновитьНастройкиСтраниц();

	Если ЕстьИзмененияВариантыЗаполнения ИЛИ ЕстьИзмененияНастройкаСтраниц Тогда
		// Если были изменения в пользовательских настройках,
		// то устанавливаем флаг модифицированности формы.
		Модифицированность = Истина;
		
		Сообщение = Новый СообщениеПользователю;

		Сообщение.Текст = НСтр("ru='Обновление пользовательских настроек успешно завершено!'");

		Сообщение.Сообщить();

	Иначе

		Сообщение = Новый СообщениеПользователю;

		Сообщение.Текст = НСтр("ru='Изменения в структуре пользовательских настроек не обнаружены!'");

		Сообщение.Сообщить();

	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ОбновитьВариантыЗаполнения()
	
	Перем МассивВариантовЗаполненияСтраниц;
	
	ЕстьИзменения = Ложь;
	
	// Подлежат обновлению следующие структуры:
	// 1.Пользовательские настройки вариантов заполнения таблиц
	
	// Сначала создадим эталонные модели вариантов автозаполнения таблиц.
	// Их определяем по макету СоставПоказателей
	МакетСоставаПоказателей = Отчеты[Сред(Лев(ИмяФормы, СтрНайти(ИмяФормы, ".Форма.") - 1), 7)].ПолучитьМакет(СтруктураРеквизитовФормы.мСоставПоказателей);
	
	ОписаниеТиповСтрока15  = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(15));
	ОписаниеТиповСтрока50  = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(50));
	ОписаниеТиповСтрока100 = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100));
	ОписаниеТиповЧисло1    = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(1));
	ОписаниеТиповЧисло15   = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2));
	
	ЕстьИзменения = Ложь;
	
	Для Инд = 0 По МакетСоставаПоказателей.Области.Количество() - 1 Цикл
		// организован цикл по именованным областям макета,
		// содержащим состав показателей и варианты автозаполнения
		// таблиц на каждой странице основной панели формы.
		
		ТекОбласть  = МакетСоставаПоказателей.Области[Инд];
		ИмяСтраницы = ТекОбласть.Имя;
		
		// Таблица значений содержит информацию о вариантах заполнения показателя отчета.
		// В колонках таблицы значений отображается следующая информация:
		//   - имя ячейки (код показателя);
		//   - вариант заполнения ячейки;
		//   - вычисленное по данным ИБ значение ячейки;
		//   - величина автокорректировки значения ячейки;
		//   - примечание к ячейке.
		//
		ТаблицаВариантыЗаполнения = Новый ТаблицаЗначений;
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "КодПоказателя",     ОписаниеТиповСтрока50  );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "ВариантЗаполнения", ОписаниеТиповЧисло1    );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "ЗначениеАвто",      ОписаниеТиповЧисло15   );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "Дельта",            ОписаниеТиповЧисло15   );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "Комментарий",       ОписаниеТиповСтрока100 );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "КодПоказателяПоСтруктуре",       ОписаниеТиповСтрока50 );
		
		Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
			// перебираем строки макета
			
			// Код показателя (по составу показателей) определяется по первой колонке макета
			КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
			ИмяПоказателя = КодПоказателя;
			
			Если КодПоказателя = "===" Тогда         // признак конечной строки
				Прервать;
			КонецЕсли;
			
			Если Лев(КодПоказателя, 2) = "//" Тогда  // пропускаем комментарии
				Продолжить;
			КонецЕсли;
			
			// код показателя по форме отчете (имя ячейки в полях табличного документа формы)
			КодПоказателяПоФорме = СокрЛП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
			// код показателя по форме отчете (имя ячейки в полях табличного документа формы)
			КодПоказателяПоСтруктуре = СокрЛП(МакетСоставаПоказателей.Область(Ном, 9).Текст);
			
			// вариант заполнения ячейки определяется по колонке 6 макета
			стрВариантЗаполнения = РегламентированнаяОтчетность.ПолучитьВариантЗаполненияПоказателяРегОтчета(МакетСоставаПоказателей, Ном);
			
			чВариантЗаполнения   = ? (ПустаяСтрока(стрВариантЗаполнения), 0, Число(стрВариантЗаполнения));
			Если чВариантЗаполнения <> 0 Тогда
				// Если в колонке 6 задан варианет заполнения показателя, 
				// то его значение может определяться по данным ИБ.
				// Дополняем таблицу значений вариантов заполнения
				НоваяСтрока = ТаблицаВариантыЗаполнения.Добавить();
				НоваяСтрока.КодПоказателя      = ? (Не ПустаяСтрока(КодПоказателяПоФорме), КодПоказателяПоФорме, КодПоказателя);
				НоваяСтрока.ВариантЗаполнения  = чВариантЗаполнения;
				НоваяСтрока.КодПоказателяПоСтруктуре  = КодПоказателяПоСтруктуре;
			КонецЕсли;
			
		КонецЦикла;
		
		Если Не мСтруктураВариантыЗаполнения.Свойство(ИмяСтраницы, МассивВариантовЗаполненияСтраниц) Тогда
			
			МассивВариантовЗаполненияСтраниц = ЭтотОбъект["ТаблицаВариантыЗаполнения" + ИмяСтраницы];
			
			Если ТаблицаВариантыЗаполнения.Количество() > 0 Тогда
				// Рассмотрим вариант, когда в предыдущей версии формы по данной странице
				// не было предусмотрено автозаполнение по данным ИБ.
				// Добавим такую возможность в пользовательскую настройку
				
				МассивВариантовЗаполненияСтраниц.Очистить();
				// Первым элементом массива является "эталонная" таблица значений вариантов заполнения
				МассивВариантовЗаполненияСтраниц.Добавить(ТаблицаВариантыЗаполнения);
				
				// сохраняем варианты заполнения таблиц на данной странице
				мСтруктураВариантыЗаполнения.Вставить(ИмяСтраницы, ИмяСтраницы);
				
				ЕстьИзменения = Истина;
			КонецЕсли;
		Иначе
			
			МассивВариантовЗаполненияСтраниц = ЭтотОбъект["ТаблицаВариантыЗаполнения" + ИмяСтраницы];
			
			Если ТаблицаВариантыЗаполнения.Количество() = 0 Тогда
				// Рассмотрим вариант, когда в предыдущей версии формы по данной странице
				// было предусмотрено автозаполнение таблицы, а в текущей версии - отключено.
				// В этом случае из структуры вариантов автозаполнения удаляем элемент,
				// хранящий настройки вариантов автозаполнения текущей станицы.
				мСтруктураВариантыЗаполнения.Удалить(ИмяСтраницы);
				
				ЕстьИзменения = Истина;
			Иначе
				// Рассмотрим вариант, когда и в предыдущей, и в текущей версии формы было предусмотрено
				// автозаполнение текущей страницы. В этом случае обновляем таблицу значений, содержащей
				// пользовательские настройки вариантов автозаполнения текущей страницы.
				
				Для каждого ЭлементМассива Из МассивВариантовЗаполненияСтраниц Цикл
					
					ЭлементМассива = ЭлементМассива.ТаблицаВариантовЗаполнения;
					
					Для каждого СтрокаТаблицы Из ТаблицаВариантыЗаполнения Цикл
						КодПоказателя     = СтрокаТаблицы.КодПоказателя;
						ВариантЗаполнения = СтрокаТаблицы.ВариантЗаполнения;
						КодПоказателяПоСтруктуре = СтрокаТаблицы.КодПоказателяПоСтруктуре;
						
						Если ЭлементМассива.НайтиСтроки(Новый Структура("КодПоказателя", КодПоказателя)).Количество() = 0 Тогда	
							// Рассмотри вариант, когда в новой версии формы список реквизитов,
							// заполняемых автоматически по данным ИБ, дополнен новым реквизитом.
							НоваяСтрока = ЭлементМассива.Добавить();
							НоваяСтрока.КодПоказателя     = КодПоказателя;
							НоваяСтрока.ВариантЗаполнения = ВариантЗаполнения;
							НоваяСтрока.КодПоказателяПоСтруктуре = КодПоказателяПоСтруктуре;
							
							ЕстьИзменения = Истина;
						КонецЕсли;
					КонецЦикла;
					// КопироватьДанныеФормы(ЭлементМассива,ТаблДляЦикла);
					
					МассивДляУдаления = Новый Массив;
					Для каждого СтрокаТаблицы Из ЭлементМассива Цикл
						КодПоказателя = СтрокаТаблицы.КодПоказателя;
						
						Если ТаблицаВариантыЗаполнения.Найти(КодПоказателя, "КодПоказателя") = Неопределено Тогда
							// Рассмотрим вариант, когда в предыдущей версии отчета для данной страницы
							// было предусмотрено автозаполнение ячейки по коду КодПоказателя,
							// а в текущей версии - отключено. В этом случае удаляем эту ячейку
							// из таблицы пользовательских настроек вариантов автозаполнения.
							СтрокаВЭлементеМассива = ЭлементМассива.НайтиСтроки(Новый Структура("КодПоказателя", КодПоказателя));
							Если  СтрокаВЭлементеМассива.Количество() > 0 Тогда
								СтрокаВЭлементеМассива = СтрокаВЭлементеМассива[0];
								МассивДляУдаления.Добавить(СтрокаВЭлементеМассива);
								ЕстьИзменения = Истина;
							КонецЕсли;
							ЕстьИзменения = Истина;
						КонецЕсли;
					КонецЦикла;
					
					Для каждого СтрокаВЭлементе Из МассивДляУдаления Цикл
						ЭлементМассива.Удалить(СтрокаВЭлементе);
					КонецЦикла; 
					
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ЕстьИзменения;
	
КонецФункции

&НаСервере
Функция ОбновитьНастройкиСтраниц()

	ЕстьИзменения = Ложь;

	// формируем дерево значений - пользовательских настройки страниц отчета
	мПользовательскиеНастройкиСтраниц = РеквизитФормыВЗначение("мДеревоСтраницОтчета").Скопировать();

	// формируем дерево значений - настройки страниц отчета обновленной формы
	ФормироватьСтруктуруСтраницОтчета();

	// Сначала проверяем, не изменилась ли структура настроек страниц (колонки дерева)
	Для каждого ИсхКолонка Из РеквизитФормыВЗначение("мДеревоСтраницОтчета").Колонки Цикл

		Если мПользовательскиеНастройкиСтраниц.Колонки.Найти(ИсхКолонка.Имя) = Неопределено Тогда
			// добавиляем новую колонку
			мПользовательскиеНастройкиСтраниц.Колонки.Добавить(ИсхКолонка.Имя, ИсхКолонка.ТипЗначения, ИсхКолонка.Заголовок, ИсхКолонка.Ширина);
			мПользовательскиеНастройкиСтраниц.ЗагрузитьКолонку(РеквизитФормыВЗначение("мДеревоСтраницОтчета").ВыгрузитьКолонку(ИсхКолонка.Имя), ИсхКолонка.Имя);

			ЕстьИзменения = Истина;
		КонецЕсли;

	КонецЦикла;

	// Выполняем обратную задачу:
	// удаляем отсутствующие колонки
	Для каждого ТекКолонка Из мПользовательскиеНастройкиСтраниц.Колонки Цикл

		Если РеквизитФормыВЗначение("мДеревоСтраницОтчета").Колонки.Найти(ТекКолонка.Имя) = Неопределено Тогда
			// удаляем отсутствующую колонку
			мПользовательскиеНастройкиСтраниц.Колонки.Удалить(мПользовательскиеНастройкиСтраниц.Колонки.Индекс(ТекКолонка));

			ЕстьИзменения = Истина;
		КонецЕсли;

	КонецЦикла;

	// Обновляем строки дерева значений - пользовательских настроек:
	//
	// добавляем новые строки и удаляем лишние:
	Если мДеревоСтраницОтчета.ПолучитьЭлементы().Количество() <> мПользовательскиеНастройкиСтраниц.Строки.Количество() Тогда

		КолвоКолонок     = РеквизитФормыВЗначение("мДеревоСтраницОтчета").Колонки.Количество();

		// добавляем новые строки
		Для каждого Строка Из мДеревоСтраницОтчета.ПолучитьЭлементы() Цикл

			Если мПользовательскиеНастройкиСтраниц.Найти(Строка.ИмяСтраницы, "ИмяСтраницы") = Неопределено Тогда

				НоваяСтрока = мПользовательскиеНастройкиСтраниц.Строки.Добавить();
				Для НомКолонки = 0 По (КолвоКолонок - 1) Цикл
				
					НоваяСтрока[НомКолонки] = Строка[НомКолонки];
				
				КонецЦикла;

			КонецЕсли;

			// обновляем строки второго уровня
			Если Строка.Строки.Количество() > 0 Тогда

				Для каждого Строка2 Из Строка.Строки Цикл

					Если мПользовательскиеНастройкиСтраниц.Найти(Строка2.ИмяСтраницы, "ИмяСтраницы") = Неопределено Тогда

						НоваяСтрока2 = НоваяСтрока.Строки.Добавить();
						Для НомКолонки = 0 По (КолвоКолонок - 1) Цикл

							НоваяСтрока2[НомКолонки] = Строка2[НомКолонки];

						КонецЦикла;

					КонецЕсли;

				КонецЦикла; 

			КонецЕсли; 

		КонецЦикла;

		// удаляем лишние строки
		Для каждого Строка Из мПользовательскиеНастройкиСтраниц Цикл

			Если РеквизитФормыВЗначение("мДеревоСтраницОтчета").Найти(Строка.ИмяСтраницы, "ИмяСтраницы") = Неопределено Тогда

				мПользовательскиеНастройкиСтраниц.Строки.Удалить(мПользовательскиеНастройкиСтраниц.Строки.Индекс(Строка));

			КонецЕсли;

		КонецЦикла;

		ЕстьИзменения = Истина;
	КонецЕсли;

	Для каждого ТекСтрока Из мДеревоСтраницОтчета.ПолучитьЭлементы() Цикл

		НомСтр = мДеревоСтраницОтчета.ПолучитьЭлементы().Индекс(ТекСтрока);

		// устанавливаем признаки предопределенных установок выгружаемых страниц (значение флажка = 2);
		Если ТекСтрока.ВыгрузитьСтраницу = 2 Тогда
			
			Если мПользовательскиеНастройкиСтраниц.Строки[НомСтр].ВыгрузитьСтраницу <> 2 Тогда
				мПользовательскиеНастройкиСтраниц.Строки[НомСтр].ВыгрузитьСтраницу = 2;
				ЕстьИзменения = Истина;
			КонецЕсли;

		КонецЕсли;

		// обновляем представление
		Если ТекСтрока.Представление <> мПользовательскиеНастройкиСтраниц.Строки[НомСтр].Представление Тогда
			мПользовательскиеНастройкиСтраниц.Строки[НомСтр].Представление = ТекСтрока.Представление;
			ЕстьИзменения = Истина;
		КонецЕсли;

		// обновляем имя поля табличного документа
		Если ТекСтрока.ИмяПоляТабличногоДокум <> мПользовательскиеНастройкиСтраниц.Строки[НомСтр].ИмяПоляТабличногоДокум Тогда
			мПользовательскиеНастройкиСтраниц.Строки[НомСтр].ИмяПоляТабличногоДокум = ТекСтрока.ИмяПоляТабличногоДокум;
			ЕстьИзменения = Истина;
		КонецЕсли;

	КонецЦикла; 

	ЗначениеВРеквизитФормы(мПользовательскиеНастройкиСтраниц.Скопировать(), "мДеревоСтраницОтчета");

	Возврат ЕстьИзменения;

КонецФункции

&НаСервере
Процедура НачальныеОперацииСМногострочнымиБлоками()
	Перем ИсходноеКоличествоСтрокГруппы;

	// создаем исходную структуру многострочных разделов
	Для Каждого ЭлементСтруктуры Из мСтруктураМногострочныхРазделов Цикл
		ИмяГруппы = ЭлементСтруктуры.Ключ;
		СтруктураГруппы = ЭтотОбъект[ЭлементСтруктуры.Значение];
		
		мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);

		Для НСтр = 1 По ИсходноеКоличествоСтрокГруппы Цикл

			СтруктураГруппы.Добавить();
			
		КонецЦикла;
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтруктуруЗависимыхЯчеекДляАвторасчета()
	
	СтруктураЗависимыхЯчеекДляАвторасчета = Новый Структура;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтруктуруИменКолонокМногострочныхРазделов()
	
	Для каждого ЭлементСтруктуры Из мСтруктураМногострочныхРазделов Цикл
		
		СписокИменРаздела = мСтруктураИменаКолонокРазделов[ЭлементСтруктуры.Ключ];
		ТаблицаРаздела = ДанныеФормыВЗначение(ЭтотОбъект[ЭлементСтруктуры.Значение], Тип("ТаблицаЗначений"));
		
		СписокИменРаздела.Очистить();
		Для каждого КолонкаТаблицы Из ТаблицаРаздела.Колонки Цикл
			СписокИменРаздела.Добавить(КолонкаТаблицы.Имя);
		КонецЦикла; 
		
	КонецЦикла; 
	
КонецПроцедуры

&НаСервере
Процедура Инициализация(БезОткрытияФормы = Ложь) Экспорт
	
	Перем ИсходноеКоличествоСтрокГруппы;
	
	СтруктураРеквизитовФормы.мБезОткрытияФормы = БезОткрытияФормы;
	
	мСтруктураПеременных = Новый Структура;

	ЗаполнитьНачальныеНастройки();
	
	ЗаполнитьСтруктуруЗависимыхЯчеекДляАвторасчета();
	
	ЗаполнитьСтруктуруИменКолонокМногострочныхРазделов();

	ФормироватьСтруктуруСтраницОтчета();

	ФормироватьСтруктуруСвойствСтраниц();

	СформироватьДеревоРазделовОтчетаНаСервере();

	СтруктураРеквизитовФормы.мАвтоВыборКодов = Ложь;
	СтруктураРеквизитовФормы.мРежимПечати = Ложь;
	
	СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация = Ложь;
	СтруктураРеквизитовФормы.мДокументВосстановлен = Ложь;
	
	СтруктураРеквизитовФормы.ВидДокумента = 0;
	НомерКорректировки = 0;
	
	Если НЕ БезОткрытияФормы Тогда
		ЗагрузитьПоказателиИзМакета("ОрганыРПН");
		ЗагрузитьПоказателиИзМакета("ГруппыПоКлассификатору");
		ЗагрузитьПоказателиИзМакета("СоставГруппОКПД");
		ЗагрузитьПоказателиИзМакета("СоставГруппТНВЭД");
		ЗагрузитьПоказателиИзМакета("ORG_SCALE");
	КонецЕсли;
	
	РегламентированнаяОтчетность.ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставления(ЭтотОбъект);
	
	Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда

		НачальныеОперацииСМногострочнымиБлоками();

		Если СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено Тогда
			// документ скопирован
			ВосстановитьСохраненныеДанные();
		Иначе
			// Это новый документ.
			// Установим реквизиты формы по умолчанию
			СтруктураРеквизитовФормы.ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1;
			СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = 2;
			
			КопироватьДанныеФормы(мДеревоСтраницОтчета, мДеревоВыбранныхСтраниц);
			
		КонецЕсли;
		
		Модифицированность = Истина;

	Иначе
		
		// При открытии или при копировании сохраненного
		// отчета восстанавливаем сохраненные данные.
		ВосстановитьСохраненныеДанные();
		
		Если ЗначениеЗаполнено(СтруктураРеквизитовФормы.мСкопированаФорма) Тогда
			СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено;
		КонецЕсли;
		
		Если НЕ БезОткрытияФормы
           И НЕ СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
				   
        	ЗаблокироватьДанныеДляРедактирования(СтруктураРеквизитовФормы.мСохраненныйДок, , УникальныйИдентификатор);

        КонецЕсли;
	
	КонецЕсли;

	ЗаполнитьПустыеСтруктурыДанных();

	ПоказатьПериод();
	
	Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено ИЛИ СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация Тогда
		
		ЗаполнитьСведенияОбОрганизации();
		
	Иначе
		
		РегламентированнаяОтчетность.ПолучитьЗначениеОКВЭД(ДатаПодписи, СтруктураРеквизитовФормы);
		
	КонецЕсли;
	
	СтруктураРеквизитовФормы.НаимОрганизации = СтруктураРеквизитовФормы.Организация.Наименование;
	
	РегламентированнаяОтчетность.ДобавитьКнопкуПрисоединенныеФайлы(ЭтотОбъект);
	
	РегламентированнаяОтчетностьКлиентСервер.ПриИнициализацииФормыРегламентированногоОтчета(ЭтотОбъект, "РПН");
	
	СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
	мСкопированаФорма = Неопределено;
	Параметры.Свойство("мСкопированаФорма", мСкопированаФорма);
	Если ЗначениеЗаполнено(мСкопированаФорма) Тогда 
		Модифицированность = Истина;
	КонецЕсли;
	Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
		Если мСкопированаФорма = Ложь Тогда 
			НомерКорректировки = 0;
		КонецЕсли;
	Иначе
		НомерКорректировки = СтруктураРеквизитовФормы.мСохраненныйДок.Вид;
	КонецЕсли;
	
	ТабличныйДокумент.Области.НомерКорректировки.Значение = НомерКорректировки;
	СтруктураДанныхИтоги.ДатаПодписи = ДатаПодписи;

КонецПроцедуры

&НаСервере
Процедура ЗагрузитьПоказателиИзМакета(Знач РазделВМакете)	
	
	МакетСоставаПоказателей = Отчеты[Сред(Лев(ИмяФормы, СтрНайти(ИмяФормы, ".Форма.") - 1), 7)].ПолучитьМакет("Списки2016Кв1");
	ТекОбласть = МакетСоставаПоказателей.Области.Найти(РазделВМакете);
	ОТЧ = Новый ОписаниеТипов("Число");
	
	Если ТекОбласть <> Неопределено Тогда	
	
		Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
			// Перебираем строки макета.
			КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
			Название = СокрП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
			Если КодПоказателя = "###" Тогда
				Прервать;
			Иначе
					
				Если РазделВМакете = "ОрганыРПН" Тогда
					НовСтрока = мОрганыРПН.Добавить();
					ДиапазонОКАТО = СокрП(МакетСоставаПоказателей.Область(Ном, 3).Текст);
					НовСтрока.ДиапазонОКАТО = ДиапазонОКАТО;
				КонецЕсли;
				
				Если РазделВМакете = "ГруппыПоКлассификатору" Тогда
					НовСтрока = мГруппыПоКлассификатору.Добавить();
					НовСтрока.Ставка = ОТЧ.ПривестиЗначение(СокрП(МакетСоставаПоказателей.Область(Ном, 3).Текст));
				КонецЕсли;
				
				Если РазделВМакете = "СоставГруппОКПД" Тогда
					НовСтрока = мСоставГруппОКПД.Добавить();
					НовСтрока.Отбор = СокрЛП(МакетСоставаПоказателей.Область(Ном, 3).Текст);
				КонецЕсли;
				
				Если РазделВМакете = "СоставГруппТНВЭД" Тогда
					НовСтрока = мСоставГруппТНВЭД.Добавить();
					НовСтрока.Отбор = СокрЛП(МакетСоставаПоказателей.Область(Ном, 3).Текст);
				КонецЕсли;
				
				Если РазделВМакете = "ORG_SCALE" Тогда
					НовСтрока = мРазмерОрганизации.Добавить();
				КонецЕсли;
				
				НовСтрока.Код      = КодПоказателя;
				НовСтрока.Название = Название;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ФормироватьСтруктуруСтраницОтчета() Экспорт

	// Дерево содержит коллекцию страниц отчета.
	// В колонках дерева хранятся следующие данные:
	//    - представление листа;
	//    - имя страницы основной панели формы, содержащей выводимый на печать лист;
	//    - имя поля табличного документа;
	//    - имя области ячеек табличного документа (используется в случае вывода
	//      на печать отдельных страниц титульного листа);
	//    - ориентация страницы при печати;
	//    - число, метка вывода страницы на печать;
	//    - число, метка показа страницы на основной панели формы;
	//    - число, метка выгрузки данных страницы в ИМНС.
	//
	мДеревоСтраницОтчета.ПолучитьЭлементы().Очистить();

	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Титульный";
	СтрокаУровня1.Представление            = "Титульный лист";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Товары";
	СтрокаУровня1.Представление            = "Готовые товары";
	СтрокаУровня1.ОриентацияСтраницы       = "Ландшафт";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Упаковка";
	СтрокаУровня1.Представление            = "Упаковка";
	СтрокаУровня1.ОриентацияСтраницы       = "Ландшафт";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Итоги";
	СтрокаУровня1.Представление            = "Итоги и подписи";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНачальныеНастройки() Экспорт
	
	ЭтаФормаИмя = ИмяФормы;
	МакетСоставаПоказателей = ОбъектОтчета(ЭтаФормаИмя).ПолучитьМакет(СтруктураРеквизитовФормы.мСоставПоказателей);
	
	Для Инд = 0 По МакетСоставаПоказателей.Области.Количество() - 1 Цикл
			
		ТекОбласть    = МакетСоставаПоказателей.Области[Инд];
		ИмяСтраницы   = ТекОбласть.Имя;
			
		ЭтотОбъект["ТаблицаВариантыЗаполнения" + ИмяСтраницы].Добавить();
		
		// Таблица значений содержит информацию о вариантах заполнения показателя отчета.
		// В колонках таблицы значений отображается следующая информация:
		//   - имя ячейки (код показателя);
		//   - вариант заполнения ячейки;
		//   - вычисленное по данным ИБ значение ячейки;
		//   - величина автокорректировки значения ячейки;
		//   - примечание к ячейке.
		//
		Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
			// перебираем строки макета
			
			// Код показателя (по составу показателей) определяется по первой колонке макета
			КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
			ИмяПоказателя = КодПоказателя;

			Если КодПоказателя = "===" Тогда         // признак конечной строки
				Прервать;
			КонецЕсли;

			Если Лев(КодПоказателя, 2) = "//" Тогда  // пропускаем комментарии
				Продолжить;
			КонецЕсли;

			// код показателя по форме отчете (имя ячейки в полях табличного документа формы)
			КодПоказателяПоФорме = СокрЛП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
			// признак многострочности определяется по третьей колонке макета
			ПризнМногострочность = СокрЛП(МакетСоставаПоказателей.Область(Ном, 3).Текст);
			// по четвертой колонке определяется тип данных реквизита
			ТипДанныхРеквизита   = СокрЛП(МакетСоставаПоказателей.Область(Ном, 4).Текст);
			// по колонке 5 определяется исходное количество строк многострочного раздела
			стрКолСтрокИсходный  = СокрЛП(МакетСоставаПоказателей.Область(Ном, 5).Текст);
			// вариант заполнения ячейки определяется по колонке 6 макета
			стрВариантЗаполнения = РегламентированнаяОтчетность.ПолучитьВариантЗаполненияПоказателяРегОтчета(МакетСоставаПоказателей, Ном);
			// код показателя из структуры, берется из колонки 9
			КодПоказателяПоСтруктуре = СокрЛП(МакетСоставаПоказателей.Область(Ном, 9).Текст);

			чКолСтрокИсходный    = ? (ПустаяСтрока(стрКолСтрокИсходный),  0, Число(стрКолСтрокИсходный));
			чВариантЗаполнения   = ? (ПустаяСтрока(стрВариантЗаполнения), 0, Число(стрВариантЗаполнения));

			// формируем таблицу значений, содержащей состав показателей отчета
			НоваяСтрока = мТаблицаСоставПоказателей.Добавить();
			НоваяСтрока.ИмяПоляТаблДокумента   = ИмяСтраницы;
			НоваяСтрока.КодПоказателяПоСоставу = КодПоказателя;
			НоваяСтрока.КодПоказателяПоФорме   = КодПоказателяПоФорме;
			НоваяСтрока.ПризнМногострочности   = ПризнМногострочность;
			НоваяСтрока.ТипДанныхПоказателя    = ТипДанныхРеквизита;
			НоваяСтрока.КодПоказателяПоСтруктуре = КодПоказателяпоСтруктуре;

			Если чВариантЗаполнения <> 0 Тогда
				// Если в колонке 6 задан вариант заполнения показателя, 
				// то его значение может определяться по данным ИБ.
				// Дополняем таблицу значений вариантов заполнения
				НоваяСтрока = ЭтотОбъект["ТаблицаВариантыЗаполнения" + ИмяСтраницы][0].ТаблицаВариантовЗаполнения.Добавить();
				НоваяСтрока.КодПоказателя      = ? (Не ПустаяСтрока(КодПоказателяПоФорме), КодПоказателяПоФорме, КодПоказателя);
				НоваяСтрока.ВариантЗаполнения  = чВариантЗаполнения;
				НоваяСтрока.КодПоказателяПоСтруктуре  = КодПоказателяПоСтруктуре;
			КонецЕсли;

		КонецЦикла;

		Если ЭтотОбъект["ТаблицаВариантыЗаполнения" + ИмяСтраницы][0].ТаблицаВариантовЗаполнения.Количество() > 0 Тогда	
			// имеются автоматически заполняемые ячейки
			// Создаем структуру, содержащей варианты заполнения показателей отчета.
			//
			// В качестве ключа используется имя страницы основной панели формы, содержащей
			//   табличный документ с автоматически заполняемыми показателями.
			// В качестве значения принимаем Массив из таблицы значений - вариантов заполнения
			//   показателей по каждой странице многостраничного раздела.
			//
			мСтруктураВариантыЗаполнения.Вставить(ИмяСтраницы, ИмяСтраницы);
			мСтруктураВариантыЗаполненияЭталон.Вставить(ИмяСтраницы, ИмяСтраницы);
				
		Конецесли;

	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура АктивизироватьЯчейку(Ячейка) Экспорт
	
	РегламентированнаяОтчетностьКлиент.АктивизироватьЯчейку(ЭтотОбъект, Ячейка);
	
КонецПроцедуры

&НаСервере
Процедура СформироватьДеревоРазделовОтчетаНаСервере() Экспорт
	
	СформироватьДеревоРазделовОтчета(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СформироватьДеревоРазделовОтчета(Форма)
	
	Форма["РазделыОтчета"].ПолучитьЭлементы().Очистить();
	
	Для Каждого ЭлементДереваСтраницОтчета Из Форма["мДеревоСтраницОтчета"].ПолучитьЭлементы() Цикл
		
		Если ЭлементДереваСтраницОтчета.ПоказатьСтраницу = 1 Тогда
			
			ЭлементРазделовОтчета = Форма["РазделыОтчета"].ПолучитьЭлементы().Добавить();
			ЭлементРазделовОтчета.КолонкаРазделыОтчета         = ЭлементДереваСтраницОтчета.Представление;
			ЭлементРазделовОтчета.КолонкаРазделыОтчетаСокрНаим = ЭлементДереваСтраницОтчета.ИмяСтраницы;
			ЭлементРазделовОтчета.ИндексКартинки               = 1;
			ЭлементРазделовОтчета.РазделМногостраничный        = Ложь;
			ЭлементРазделовОтчета.РазделМногострочный          = Ложь;
			
			НайденноеЗначение = Неопределено;
			
			Если Форма["мСтруктураМногостраничныхРазделов"].Свойство(ЭлементРазделовОтчета.КолонкаРазделыОтчетаСокрНаим, НайденноеЗначение) Тогда
				
				Если НЕ НайденноеЗначение = Неопределено Тогда
					
					НайденноеЗначение = Форма[НайденноеЗначение];
					
					ЭлементРазделовОтчета.ИндексКартинки        = 0;
					ЭлементРазделовОтчета.РазделМногостраничный = Истина;
					
					Для НомерСтраницы = 1 По НайденноеЗначение.Количество() Цикл
						
						СтраницаРазделаОтчета = ЭлементРазделовОтчета.ПолучитьЭлементы().Добавить();
						
						СтраницаРазделаОтчета.КолонкаРазделыОтчета              = "Стр. " + НомерСтраницы;
						СтраницаРазделаОтчета.КолонкаРазделыОтчетаСокрНаим      = ЭлементРазделовОтчета.КолонкаРазделыОтчетаСокрНаим;
						СтраницаРазделаОтчета.КолонкаНомерСтраницыРазделаОтчета = НомерСтраницы;
						СтраницаРазделаОтчета.ИндексКартинки                    = 1;
						СтраницаРазделаОтчета.РазделМногостраничный             = ЭлементРазделовОтчета.РазделМногостраничный;
						СтраницаРазделаОтчета.РазделМногострочный               = ЭлементРазделовОтчета.РазделМногострочный;
						
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЕсли;
				
		КонецЕсли;
				
	КонецЦикла;
			
КонецПроцедуры

&НаКлиенте
Процедура РазделыОтчетаПриАктивизацииСтроки(Элемент)
	
	Если Элемент.ТекущиеДанные = Неопределено
	 ИЛИ Элемент.ТекущаяСтрока = СтруктураРеквизитовФормы.ТекущаяСтрокаРазделовОтчета Тогда
		Возврат;
	КонецЕсли;
	
	ЗаголовокРаздела = Элемент.ТекущиеДанные.ПолучитьРодителя() = Неопределено;
	
	СтруктураРеквизитовФормы.ТекущаяСтрокаРазделовОтчета = Элемент.ТекущаяСтрока;
	КМенюРО = Элементы.РазделыОтчета.КонтекстноеМеню;
	Элементы.ОчиститьТекущуюСтраницу.Доступность = Истина;
	
	Если СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере Тогда
		
		Если Элемент.ТекущиеДанные.РазделМногостраничный Тогда
			
			Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета = ?(Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета = Неопределено
															        ИЛИ Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета = 0, 1, Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета);
			
		КонецЕсли;
				
		ВывестиМакетСтраницыВТабличныйДокументНаСервере(Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим, Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета, ЗаголовокРаздела);
		
	Иначе
		
		СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Истина;
		
	КонецЕсли;
		
	Если Элемент.ТекущиеДанные.РазделМногостраничный Тогда
		Элемент.Развернуть(Элемент.ТекущаяСтрока);
		Если Элемент.ТекущиеДанные.ПолучитьРодителя() = Неопределено Тогда
			Элементы.ОчиститьТекущуюСтраницу.Доступность = Ложь;
		КонецЕсли;
		
		КМенюРО.Видимость = Истина;
		Если Элемент.ТекущиеДанные.ПолучитьРодителя() = Неопределено Тогда
			Элементы.ОчиститьТекущуюСтраницу.Доступность = Ложь;
			КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюУдалитьСтраницу.Видимость = Ложь;
			КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюДобавитьСтраницу.Видимость = Истина;
		ИначеЕсли Элемент.ТекущиеДанные.ПолучитьРодителя().ПолучитьЭлементы().Количество() = 1 Тогда
			КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюУдалитьСтраницу.Видимость = Ложь;
			КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюДобавитьСтраницу.Видимость = Истина;
		Иначе
			КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюУдалитьСтраницу.Видимость = Истина;
			КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюДобавитьСтраницу.Видимость = Истина;
		КонецЕсли;
	Иначе
		КМенюРО.Видимость = Ложь;
		КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюУдалитьСтраницу.Видимость = Ложь;
		КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюДобавитьСтраницу.Видимость = Ложь;
	КонецЕсли;
	
	КолонкаРазделыОтчетаСокрНаим = Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
	Если КолонкаРазделыОтчетаСокрНаим = "Титульный" Тогда
		Элементы.Обновить.Доступность                  = Истина;
	Иначе
		Элементы.Обновить.Доступность                  = Ложь;
	КонецЕсли;
	
	Если КолонкаРазделыОтчетаСокрНаим = "Титульный" Тогда
		Элементы.ТабличныйДокументКонтекстноеМенюГруппаСтроки.Видимость = Ложь;
	Иначе
		Элементы.ТабличныйДокументКонтекстноеМенюГруппаСтроки.Видимость = Истина;
	КонецЕсли;

	Элементы.ТабличныйДокумент.ТекущаяОбласть = ТабличныйДокумент.Область(1, 1);
	
КонецПроцедуры

&НаСервере
Процедура СохранитьДанныеРаздела(НаимРаздела, ОчищатьРазделЕслиЕстьМногострочность, ИзменятьАктивнуюСтраницу = Истина)
	
	// Многостраничные и многострочные разделы.
	//
	Если  НаимРаздела <> "Титульный" И НаимРаздела <> "Итоги" Тогда
		
		ТаблицаСтраницРаздела = Неопределено;
		
		мСтруктураМногостраничныхРазделов.Свойство(НаимРаздела, ТаблицаСтраницРаздела);
		
		ТаблицаСтраницРаздела = ЭтотОбъект[ТаблицаСтраницРаздела];
		
		СтрТаблицыСтраниц = ТаблицаСтраницРаздела.НайтиСтроки(Новый Структура("АктивнаяСтраница", Истина));
		
		Если СтрТаблицыСтраниц.Количество() > 0 Тогда
				
			СтрТаблицаСтраницы = СтрТаблицыСтраниц[0];
				
			// Сохраним данные активной страницы, с присвоением Представления страницы и с очистной многострочных частей (Истина)
			РегламентированнаяОтчетностьКлиентСервер.СохранитьДанныеМногостраничногоРазделаВактивнойСтранице(ЭтотОбъект, НаимРаздела, ОчищатьРазделЕслиЕстьМногострочность);
				
			Для каждого СтрТаблица Из СтрТаблицыСтраниц Цикл
				СтрТаблица.АктивнаяСтраница = Ложь;
			КонецЦикла;
			
			СтрТаблицаСтраницы.АктивнаяСтраница = НЕ ИзменятьАктивнуюСтраницу;
			
		КонецЕсли;
		
	// Многострочные разделы.
	//
	ИначеЕсли НаимРаздела = "Товары" Тогда
		ЭтотОбъект["СтруктураДанных" + НаимРаздела] = СобратьДанныеТекущегоТаблПоля(ЭтотОбъект, "ТабличныйДокумент");
		ИмяГруппы = ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(НаимРаздела);
		ОбновитьСтруктуруМногострочногоРаздела(ЭтотОбъект, ИмяГруппы);
	ИначеЕсли НаимРаздела = "Упаковка" Тогда
		ЭтотОбъект["СтруктураДанных" + НаимРаздела] = СобратьДанныеТекущегоТаблПоля(ЭтотОбъект, "ТабличныйДокумент");
		ИмяГруппы = ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(НаимРаздела);
		ОбновитьСтруктуруМногострочногоРаздела(ЭтотОбъект, ИмяГруппы);
	ИначеЕсли НаимРаздела = "-" Тогда
		
		ЭтотОбъект["СтруктураДанных" + НаимРаздела] = СобратьДанныеТекущегоТаблПоля(ЭтотОбъект, "ТабличныйДокумент");
		
		ИмяГруппы = ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(НаимРаздела);
		
		ОбновитьСтруктуруМногострочногоРаздела(ЭтотОбъект, ИмяГруппы);
				
	// Обычные разделы.
	//
	Иначе
		
		ЭтотОбъект["СтруктураДанных" + НаимРаздела] = СобратьДанныеТекущегоТаблПоля(ЭтотОбъект, "ТабличныйДокумент");
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиМакетСтраницыВТабличныйДокументНаСервере(ИмяТекРаздела, НомерСтраницыРазделаОтчета, ЗаголовокРаздела = Ложь)
	
	СохранитьДанныеРаздела(СтруктураРеквизитовФормы.НаимТекущегоРаздела, Истина);
	
	ВывестиМакетВТаблДокНаСервере(ИмяТекРаздела, НомерСтраницыРазделаОтчета, ЗаголовокРаздела);
	
	СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяТекРаздела;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиМакетВТаблДокНаСервере(ИмяТекРаздела, НомерСтраницыРазделаОтчета, ЗаголовокРаздела = Ложь)
	
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(ОбъектОтчета(ИмяФормы).ПолучитьМакет(Сред(ИмяФормы, СтрНайти(ИмяФормы, "ФормаОтчета")) + "_" + ИмяТекРаздела));
	
	// Многостраничные и многострочные разделы.
	//
	Если ИмяТекРаздела = "Товары"
		Или ИмяТекРаздела = "Упаковка" Тогда
		  
		СтруктураДанных = Новый Структура;
		
		НаимТаблицыСтраницы = мСтруктураМногостраничныхРазделов[ИмяТекРаздела];
		
		СписокДанных = ЭтотОбъект[НаимТаблицыСтраницы][НомерСтраницыРазделаОтчета - 1].Данные;
		
		Для каждого ТаблицаСтраницы Из ЭтотОбъект[НаимТаблицыСтраницы] Цикл
			ТаблицаСтраницы.АктивнаяСтраница = Ложь;
		КонецЦикла;
		
		ЭтотОбъект[НаимТаблицыСтраницы][НомерСтраницыРазделаОтчета - 1].АктивнаяСтраница = Истина;
		
		Если СписокДанных.Количество() > 0 Тогда
			СтруктураДанных = СписокДанных[0].Значение;
		КонецЕсли;
		
		Для Каждого ЭлСтруктуры Из СтруктураДанных Цикл
			Обл = ТабличныйДокумент.Области.Найти(ЭлСтруктуры.Ключ);
			Если Обл <> Неопределено Тогда 
				Обл.Значение = ЭлСтруктуры.Значение;
			КонецЕсли;
		КонецЦикла;
		
		ТаблицаСтраницРаздела = ЭтотОбъект[НаимТаблицыСтраницы];
		
		СтрСледующаяСтраница = ТаблицаСтраницРаздела[НомерСтраницыРазделаОтчета - 1];
		
		СтрСледующаяСтраница.АктивнаяСтраница = Истина;
		
		ТаблицаВариантыЗаполнения = РегламентированнаяОтчетностьВызовСервера.ПолучитьТаблицуВариантовЗаполненияНаСервере(ЭтотОбъект, ИмяТекРаздела);
		
		КолМногострочныхЧастей = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСвойствоРаздела(ЭтотОбъект, ИмяТекРаздела, "МногострочностьВРазделе").Количество();
		
		Если КолМногострочныхЧастей > 0 Тогда
			
			НовДанныеДопСтрокРаздела = СтрСледующаяСтраница.ДанныеДопСтрок;
			
			Если (ТипЗнч(НовДанныеДопСтрокРаздела) = Тип("СписокЗначений"))
				И (НовДанныеДопСтрокРаздела.Количество() > 0)
				И (НовДанныеДопСтрокРаздела[0].Представление = "ДанныеФормыКоллекцияТаблицаДопСтрокРаздела") Тогда
				
				НовДанныеДопСтрокРаздела = НовДанныеДопСтрокРаздела[0].Значение;
				
			Иначе
				
				НовДанныеДопСтрокРаздела = Неопределено;
				
			КонецЕсли;
			
			// Способ хранения многострочных частей
			СохранятьМногострКакТЗ = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСвойствоРаздела(ЭтотОбъект, ИмяТекРаздела, "СохранятьМногострКакТЗ");
			
		Иначе
			
			НовТаблицаДопСтрокРаздела = Неопределено; // Многострочности нет
			ИмяГруппыДопСтрок = Неопределено; // Имя группы строк неопределено
			
		КонецЕсли;
		
		Если НовДанныеДопСтрокРаздела <> Неопределено Тогда
			
			// В случае, если многострочных частей больше 1, то хранится структура, иначе, таблица значений с данными
			Если (КолМногострочныхЧастей > 0) И (НЕ СохранятьМногострКакТЗ) Тогда
				Для Каждого ГруппаСтрок Из НовДанныеДопСтрокРаздела Цикл
					ИмяГруппыДопСтрок = ГруппаСтрок.Ключ;
					ДанныеГруппыСтрок = ГруппаСтрок.Значение;
					
					ПромТаблицаГруппыСтрок = ЭтотОбъект["Хранилище" + ИмяГруппыДопСтрок].Добавить().Таблица;
					
					КопироватьДанныеФормы(ДанныеГруппыСтрок, ПромТаблицаГруппыСтрок);
					
					// Заменяем таблицу значений с данными текущей страницы.
					КопироватьДанныеФормы(ПромТаблицаГруппыСтрок, ЭтотОбъект[ИмяГруппыДопСтрок]);
					
					ВывестиРазделВТабличныйДокументНаСервере(ИмяГруппыДопСтрок, ПромТаблицаГруппыСтрок);
					ОбновитьСтруктуруМногострочногоРазделаНаСервере(ИмяГруппыДопСтрок);
					
				КонецЦикла;
				
			ИначеЕсли (КолМногострочныхЧастей > 0) И (СохранятьМногострКакТЗ) Тогда
				
				ИмяГруппыДопСтрок = ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ИмяТекРаздела);
				
				ПромТаблицаДопСтрокРаздела = ЭтотОбъект["Хранилище" + ИмяГруппыДопСтрок].Добавить().Таблица;
				
				КопироватьДанныеФормы(НовДанныеДопСтрокРаздела, ПромТаблицаДопСтрокРаздела);
				
				// Заменяем таблицу значений с данными текущей страницы.
				КопироватьДанныеФормы(ПромТаблицаДопСтрокРаздела, ЭтотОбъект[ИмяГруппыДопСтрок]);
				
				// Выводим в табличный документ данные группы дополнительных строк и обновляем структуру многострочного раздела
				ВывестиРазделВТабличныйДокументНаСервере(ИмяГруппыДопСтрок, ПромТаблицаДопСтрокРаздела);
				ОбновитьСтруктуруМногострочногоРазделаНаСервере(ИмяГруппыДопСтрок);
				
			КонецЕсли;
			
		КонецЕсли;
		
		РегламентированнаяОтчетностьКлиентСервер.ОтрисоватьЗначкиУдаленияСтрок(ЭтотОбъект, 21);
		Обл = ТабличныйДокумент.Области.Найти("УдалитьСтраницуЗначок");
		Если ИмяТекРаздела = "Товары" Тогда 
			Таблица = ТаблицаСтраницыТовары;
		ИначеЕсли ИмяТекРаздела = "Упаковка" Тогда 
			Таблица = ТаблицаСтраницыУпаковка;
		КонецЕсли;
		
		Если Обл <> Неопределено Тогда 
			Если Таблица.Количество() = 1 ИЛИ ЗаголовокРаздела Тогда 
				Обл.Гиперссылка = Ложь;
				Обл.Текст = "";
				Обл = ТабличныйДокумент.Области["УдалитьСтраницу"];
				Обл.Гиперссылка = Ложь;
				Обл.Текст = "";
			Иначе
				Обл.Гиперссылка = Истина;
				Обл.Текст = "х";
				Обл = ТабличныйДокумент.Области["УдалитьСтраницу"];
				Обл.Гиперссылка = Истина;
				Обл.Текст = "Удалить страницу";
			КонецЕсли;
		КонецЕсли;
		
		Если Не СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет И Не СтруктураРеквизитовФормы.мРежимПечати Тогда
			ПолныйПерерасчет(ЭтотОбъект);
		КонецЕсли;
	Иначе
		
		Для Каждого ЭлСтруктуры Из ЭтотОбъект["СтруктураДанных" + ИмяТекРаздела] Цикл
			Обл = ТабличныйДокумент.Области.Найти(ЭлСтруктуры.Ключ);
			Если Обл <> Неопределено Тогда 
				Обл.Значение = ЭлСтруктуры.Значение;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;	
	
	УстановитьЦветФонаЯчейкиНаСервере(,, ИмяТекРаздела);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СохранитьЗначениеПоказателяВСтруктуре(Форма, ИмяРаздела, ИмяПоказателя, ЗначениеПоказателя)
	
	МногостраничностьВРазделе = Истина;
	КолМногострочныхЧастей = 0;
	СохранятьМногострКакТЗ = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСвойствоРаздела(Форма, ИмяРаздела, "СохранятьМногострКакТЗ");
	ИмяГруппы = "";
	Если ИмяРаздела = "Титульный"  Или ИмяРаздела = "Итоги" Тогда
		МногостраничностьВРазделе = Ложь;
	Иначе
		МногостраничностьВРазделе = Истина;
		КолМногострочныхЧастей = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСвойствоРаздела(Форма, ИмяРаздела, "МногострочностьВРазделе").Количество();
		ИмяГруппы = ОпределитьИдМногострочногоРазделаПоТабличномуПолю(Форма, ИмяРаздела);
		Если ИмяГруппы = Неопределено Тогда
			ИмяГруппы = РазделТекущейОбласти(Форма, Форма.Элементы.ТабличныйДокумент.ТекущаяОбласть);
		КонецЕсли;
	КонецЕсли; 
	
	ДанныеРаздела = Неопределено;
	ДанныеМногострочногоРаздела = Неопределено;
	СтруктураГруппы = Неопределено;

	Если ИмяРаздела <> "" Тогда
		
		Если МногостраничностьВРазделе Тогда  //Для многостраничных разделов
			
			ИмяТаблицыСтраницы = Неопределено;
			Если Форма.мСтруктураМногостраничныхРазделов.Свойство(ИмяРаздела, ИмяТаблицыСтраницы) Тогда
				
				ТаблицаСтраницы = Форма[ИмяТаблицыСтраницы];
				АктивныеСтраницы = ТаблицаСтраницы.НайтиСтроки(Новый Структура("АктивнаяСтраница", Истина));
				
				Если АктивныеСтраницы.Количество() > 0 Тогда
					
					ДанныеРазделаСписок = АктивныеСтраницы[0].Данные;
					Если ДанныеРазделаСписок.Количество() > 0 Тогда
						
						ДанныеРаздела = ДанныеРазделаСписок[0].Значение;
						ДанныеРазделаСписок[0].Пометка = Ложь; //Регистрируем для передачи на сервер (при редактировании таблицы значения не передаются)
						
					КонецЕсли;
					
					Если КолМногострочныхЧастей > 0 И ИмяГруппы <> Неопределено Тогда  // И многострочных разделов
						
						ДанныеДопСтрокРазделаСписок = АктивныеСтраницы[0].ДанныеДопСтрок;
						Если ДанныеДопСтрокРазделаСписок.Количество() > 0 Тогда
							
							ДанныеДопСтрокРаздела = ДанныеДопСтрокРазделаСписок[0].Значение;
							ДанныеРазделаСписок[0].Пометка = Ложь;
							
							СтруктураГруппы = Неопределено;
							Форма.мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);
							СтруктураГруппы = Форма[СтруктураГруппы];
							
							Если СохранятьМногострКакТЗ Тогда
								ДанныеМногострочногоРаздела = ДанныеДопСтрокРаздела;
							Иначе
								ДанныеМногострочногоРаздела = ДанныеДопСтрокРаздела[ИмяГруппы];
							КонецЕсли;
							
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЕсли; 
				
			КонецЕсли;
			
		Иначе  //Для обычных разделов
			
			ДанныеРаздела = Форма["СтруктураДанных" + ИмяРаздела];
			
			Если КолМногострочныхЧастей > 0 Тогда  // И многострочных разделов
				
				СтруктураГруппы = Неопределено;
				Форма.мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);
				
				ДанныеМногострочногоРаздела = Форма[СтруктураГруппы];
				
			КонецЕсли;
			
		КонецЕсли; 
		
		Если ДанныеМногострочногоРаздела = Неопределено Тогда
			Если ДанныеРаздела <> Неопределено Тогда
				Если ДанныеРаздела.Свойство(ИмяПоказателя) Тогда
					ДанныеРаздела[ИмяПоказателя] = ЗначениеПоказателя;
				Иначе
					ДанныеРаздела.Вставить(ИмяПоказателя, ЗначениеПоказателя);
				КонецЕсли
			КонецЕсли; 
		Иначе
			ЗначПоказателя = ЗначениеПоказателя;
			Если ИмяГруппы = Лев(ИмяПоказателя, 6) Тогда //Показатель входит в многострочную часть
				ИмяПок = Лев(ИмяПоказателя, 8);
				СтрИнд = Сред(ИмяПоказателя, 9);
				Если Лев(СтрИнд, 1)="_" Тогда
					СтрИнд = Сред(СтрИнд, 2);
				КонецЕсли;
				Инд = Число(СтрИнд);
				Если (Инд > 0) И ДанныеМногострочногоРаздела.Количество() >= Инд Тогда
					ДанныеМногострочногоРаздела[Инд-1][ИмяПок] = ЗначПоказателя;
				КонецЕсли; 
				Если (Инд > 0) И СтруктураГруппы.Количество() >= Инд Тогда
					СтруктураГруппы[Инд-1][ИмяПок] = ЗначПоказателя;
				КонецЕсли; 
			КонецЕсли;
			Если ДанныеРаздела <> Неопределено Тогда
				Если ДанныеРаздела.Свойство(ИмяПоказателя) Тогда
					ДанныеРаздела[ИмяПоказателя] = ЗначПоказателя;
				Иначе
					ДанныеРаздела.Вставить(ИмяПоказателя, ЗначПоказателя);
				КонецЕсли
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьОтчет(Команда)
	
	РегламентированнаяОтчетностьКлиент.МеханизмыОчисткиРегламентированныхОтчетов(ЭтотОбъект, "ОчиститьВесьОтчет");
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТекущуюСтраницу(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОчиститьТекущуюСтраницуЗавершение", ЭтотОбъект);
	РегламентированнаяОтчетностьКлиент.МеханизмыОчисткиРегламентированныхОтчетов(
		ЭтотОбъект, "ОчиститьТекущийЭкземплярМногостраничногоРаздела" + Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим,
		ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТекущуюСтраницуЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
		НомерКорректировки = 0;
		СтруктураРеквизитовФормы.ВидДокумента = 0;
		ДатаПодписи = Неопределено;
		ТабличныйДокумент.Области.НомерКорректировки.Значение = НомерКорректировки;
	ИначеЕсли СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Итоги" Тогда
		ТабличныйДокумент.Области.ДатаПодписи.Значение = ДатаПодписи;
	Иначе 
		РегламентированнаяОтчетностьКлиентСервер.ОтрисоватьЗначкиУдаленияСтрок(ЭтотОбъект, 21);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьОтчет(Команда)
	
	Если Элементы.РазделыОтчета.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СохранитьНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСтраницу(Команда)
	
	ВставитьДополнительнуюСтраницуНаСервере(Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
	Обл = ТабличныйДокумент.Области["УдалитьСтраницуЗначок"];
	Обл.Гиперссылка = Истина;
	Обл.Текст = "х";
	Обл = ТабличныйДокумент.Области["УдалитьСтраницу"];
	Обл.Гиперссылка = Истина;
	Обл.Текст = "Удалить страницу";
	РегламентированнаяОтчетностьКлиентСервер.ОтрисоватьЗначкиУдаленияСтрок(ЭтотОбъект, 21);
	
КонецПроцедуры

&НаКлиенте
Функция СобратьДанныеТекущегоТаблПоляНаКлиенте(ИмяТабличногоПоля) Экспорт
	
	Возврат СобратьДанныеТекущегоТаблПоля(ЭтотОбъект, ИмяТабличногоПоля);
	
КонецФункции

&НаСервере
Процедура ОбновитьСтруктуруМногострочногоРазделаНаСервере(ИмяГруппы) Экспорт
	
	ОбновитьСтруктуруМногострочногоРаздела(ЭтотОбъект, ИмяГруппы);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСтруктуруМногострочногоРазделаНаКлиенте(ИмяГруппы) Экспорт
	
	ОбновитьСтруктуруМногострочногоРаздела(ЭтотОбъект, ИмяГруппы);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьСтруктуруМногострочногоРаздела(Форма, ИмяГруппы)
	
	Перем СтруктураГруппы;
	
	Форма.мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);
	
	СтруктураГруппы = Форма[СтруктураГруппы];
		
	ТекТабличноеПолеИмя = "ТабличныйДокумент";
	
	ТекТабличноеПоле = Форма[ТекТабличноеПолеИмя];
	
	Для НСтр = 1 По СтруктураГруппы.Количество() Цикл
		
		ТекСтрокаТаблицы = СтруктураГруппы[НСтр - 1];
		
		СписокИменКолонокРаздела = Форма.мСтруктураИменаКолонокРазделов[ИмяГруппы];
		
		Для НомерГрафы = 1 По Форма.мСтруктураКолвоКолонокРазделов[ИмяГруппы] Цикл
			
			ИмяКолонки = СписокИменКолонокРаздела.Получить(НомерГрафы - 1).Значение;
			
			Если СтруктураГруппы[0].Свойство(ИмяКолонки) Тогда	
				
				ИмяЯчейки     = ИмяКолонки + "_" + НСтр;
				ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяЯчейки];
				
				Если ОбластьЯчейки.СодержитЗначение = Истина Тогда
					ЗначениеЯчейки = ОбластьЯчейки.Значение;
				Иначе
					ЗначениеЯчейки = ОбластьЯчейки.Текст;
				КонецЕсли;
				
				ТекСтрокаТаблицы[ИмяКолонки] = ЗначениеЯчейки;
				
			КонецЕсли;
			
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнениеЗначенийВКвадратикахНаКлиенте(Знач ИмяСтраницы) Экспорт

	ЗаполнениеЗначенийВКвадратиках(ЭтотОбъект, ИмяСтраницы);
	
КонецПроцедуры

&НаКлиенте
Процедура РасчетНаКлиенте(ИмяТекущейСтраницыПанели = "", ОбластьИмя = "") Экспорт

	Расчет(ЭтотОбъект, ИмяТекущейСтраницыПанели, ОбластьИмя);

КонецПроцедуры

&НаСервере
Процедура РасчетНаСервере(ИмяТекущейСтраницыПанели = "", ОбластьИмя = "") Экспорт

	Расчет(ЭтотОбъект, ИмяТекущейСтраницыПанели, ОбластьИмя);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура Расчет(Форма, ИмяТекущейСтраницы = "", ОбластьИмя = "") Экспорт
	
	Если Форма.СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет ИЛИ Форма.СтруктураРеквизитовФормы.мРежимПечати Тогда
		Возврат;
	КонецЕсли;
	
	Если Форма.СтруктураРеквизитовФормы.ОтключитьВыполнениеРасчета Тогда
		Возврат;
	КонецЕсли;
	
	Если СтрНачинаетсяС(ОбластьИмя, "П1100010_") Или СтрНачинаетсяС(ОбластьИмя, "П1100011_") Тогда 
		СредОбластьИмя = Сред(ОбластьИмя, 10);
		О1 = Форма.ТабличныйДокумент.Области.Найти("П1100010_" + СредОбластьИмя);
		О2 = Форма.ТабличныйДокумент.Области.Найти("П1100011_" + СредОбластьИмя);
		О3 = Форма.ТабличныйДокумент.Области.Найти("П1100012_" + СредОбластьИмя);
		Дельта = О1.Значение * О2.Значение - О3.Значение;
		О3.Значение = О1.Значение * О2.Значение;
		Форма.ТабличныйДокумент.Области.П112.Значение = Форма.ТабличныйДокумент.Области.П112.Значение + Дельта;
		Форма.СтруктураДанныхИтоги.П02 = Форма.СтруктураДанныхИтоги.П02 + Дельта;
		Форма.СтруктураДанныхИтоги.П01 = Форма.СтруктураДанныхИтоги.П01 + Дельта;
	ИначеЕсли СтрНачинаетсяС(ОбластьИмя, "П2100010_") Или СтрНачинаетсяС(ОбластьИмя, "П2100011_") Тогда 
		СредОбластьИмя = Сред(ОбластьИмя, 10);
		О1 = Форма.ТабличныйДокумент.Области.Найти("П2100010_" + СредОбластьИмя);
		О2 = Форма.ТабличныйДокумент.Области.Найти("П2100011_" + СредОбластьИмя);
		О3 = Форма.ТабличныйДокумент.Области.Найти("П2100012_" + СредОбластьИмя);
		Дельта = О1.Значение * О2.Значение - О3.Значение;
		О3.Значение = О1.Значение * О2.Значение;
		Форма.ТабличныйДокумент.Области.П212.Значение = Форма.ТабличныйДокумент.Области.П212.Значение + Дельта;
		Форма.СтруктураДанныхИтоги.П03 = Форма.СтруктураДанныхИтоги.П03 + Дельта;
		Форма.СтруктураДанныхИтоги.П01 = Форма.СтруктураДанныхИтоги.П01 + Дельта;
	ИначеЕсли ИмяТекущейСтраницы = "Товары" И Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Товары" Тогда
		Инд = 0;
		Тот = 0;
		Пока Истина Цикл 
			Инд = Инд + 1;
			ИндСтр = Формат(Инд, "ЧГ=");
			О1 = Форма.ТабличныйДокумент.Области.Найти("П1100010_" + ИндСтр);
			Если О1 = Неопределено Тогда 
				Прервать;
			КонецЕсли;
			
			О2 = Форма.ТабличныйДокумент.Области.Найти("П1100011_" + ИндСтр);
			О3 = Форма.ТабличныйДокумент.Области.Найти("П1100012_" + ИндСтр);
			О3.Значение = О1.Значение * О2.Значение;
			Тот = Тот + О1.Значение * О2.Значение;
		КонецЦикла;
		
		Форма.ТабличныйДокумент.Области.П112.Значение = Тот;
		РасчетИтогов(Форма);
	ИначеЕсли ИмяТекущейСтраницы = "Упаковка" И Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Упаковка" Тогда
		Инд = 0;
		Тот = 0;
		Пока Истина Цикл 
			Инд = Инд + 1;
			ИндСтр = Формат(Инд, "ЧГ=");
			О1 = Форма.ТабличныйДокумент.Области.Найти("П2100010_" + ИндСтр);
			Если О1 = Неопределено Тогда 
				Прервать;
			КонецЕсли;
			
			О2 = Форма.ТабличныйДокумент.Области.Найти("П2100011_" + ИндСтр);
			О3 = Форма.ТабличныйДокумент.Области.Найти("П2100012_" + ИндСтр);
			О3.Значение = О1.Значение * О2.Значение;
			Тот = Тот + О1.Значение * О2.Значение;
		КонецЦикла;
		
		Форма.ТабличныйДокумент.Области.П212.Значение = Тот;
		РасчетИтогов(Форма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РасчетИтогов(Форма)
	Если Форма.СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет ИЛИ Форма.СтруктураРеквизитовФормы.мРежимПечати Тогда
		Возврат;
	КонецЕсли;
	
	П01 = 0;
	П02 = 0;
	П03 = 0;
	Для Каждого Стр Из Форма.ТаблицаСтраницыТовары Цикл 
		П02 = П02 + Стр.Данные[0].Значение.П112;
	КонецЦикла;
	Для Каждого Стр Из Форма.ТаблицаСтраницыУпаковка Цикл 
		П03 = П03 + Стр.Данные[0].Значение.П212;
	КонецЦикла;
	Форма.СтруктураДанныхИтоги.П01 = П02 + П03;
	Форма.СтруктураДанныхИтоги.П02 = П02;
	Форма.СтруктураДанныхИтоги.П03 = П03;
	
	Если Форма.ТабличныйДокумент.Области.Найти("П01") <> Неопределено Тогда 
		Форма.ТабличныйДокумент.Области.Найти("П01").Значение = П02 + П03;
		Форма.ТабличныйДокумент.Области.Найти("П02").Значение = П02;
		Форма.ТабличныйДокумент.Области.Найти("П03").Значение = П03;
	КонецЕсли;
	
	Форма.Модифицированность = Истина;
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПолныйПерерасчет(Форма)
	Если Форма.СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет ИЛИ Форма.СтруктураРеквизитовФормы.мРежимПечати Тогда
		Возврат;
	КонецЕсли;
	
	П02 = 0;
	П03 = 0;
	
	Для Каждого Стр Из Форма.ТаблицаСтраницыТовары Цикл
		Мнг = Стр.ДанныеДопСтрок[0].Значение.П11000;
		Тот = 0;
		Для Каждого СтрМнг Из Мнг Цикл
			СтрМнг.П1100012 = СтрМнг.П1100010 * СтрМнг.П1100011;
			Тот = Тот + СтрМнг.П1100012;
		КонецЦикла;
		
		Стр.Данные[0].Значение.П112 = Тот;
		П02 = П02 + Тот;
	КонецЦикла;
	
	Для Каждого Стр Из Форма.ТаблицаСтраницыУпаковка Цикл
		Мнг = Стр.ДанныеДопСтрок[0].Значение.П21000;
		Тот = 0;
		Для Каждого СтрМнг Из Мнг Цикл
			СтрМнг.П2100012 = СтрМнг.П2100010 * СтрМнг.П2100011;
			Тот = Тот + СтрМнг.П2100012;
		КонецЦикла;
		
		Стр.Данные[0].Значение.П212 = Тот;
		П03 = П03 + Тот;
	КонецЦикла;
	
	Форма.СтруктураДанныхИтоги.П01 = П02 + П03;
	Форма.СтруктураДанныхИтоги.П02 = П02;
	Форма.СтруктураДанныхИтоги.П03 = П03;
	
	Области = Форма.ТабличныйДокумент.Области;
	Если Области.Найти("П01") <> Неопределено Тогда 
		Области.П01.Значение = Форма.СтруктураДанныхИтоги.П01;
		Области.П02.Значение = Форма.СтруктураДанныхИтоги.П02;
		Области.П03.Значение = Форма.СтруктураДанныхИтоги.П03;
	ИначеЕсли Области.Найти("П112") <> Неопределено Тогда
		Инд = 0;
		Тот = 0;
		Пока Истина Цикл 
			Инд = Инд + 1;
			ИндСтр = Формат(Инд, "ЧГ=");
			Если Области.Найти("П1100012_"+ИндСтр) = Неопределено Тогда 
				Прервать;
			КонецЕсли;
			
			Области.Найти("П1100012_"+ИндСтр).Значение = Области.Найти("П1100010_"+ИндСтр).Значение * Области.Найти("П1100011_"+ИндСтр).Значение;
			Тот = Тот + Области.Найти("П1100012_"+ИндСтр).Значение;
		КонецЦикла;
		
		Области.П112.Значение = Тот;
	ИначеЕсли Области.Найти("П212") <> Неопределено Тогда
		Инд = 0;
		Тот = 0;
		Пока Истина Цикл 
			Инд = Инд + 1;
			ИндСтр = Формат(Инд, "ЧГ=");
			Если Области.Найти("П2100012_"+ИндСтр) = Неопределено Тогда 
				Прервать;
			КонецЕсли;
			
			Области.Найти("П2100012_"+ИндСтр).Значение = Области.Найти("П2100010_"+ИндСтр).Значение * Области.Найти("П2100011_"+ИндСтр).Значение;
			Тот = Тот + Области.Найти("П2100012_"+ИндСтр).Значение;
		КонецЦикла;
		
		Области.П212.Значение = Тот;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура УдалитьДополнительнуюСтраницуНаСервере(ИмяТекущейСтраницыПанели = Неопределено)

	Перем ТаблицаСтраниц;
	
	//сначала определим индекс страницы раздела 4 или 5
	мСтруктураМногостраничныхРазделов.Свойство(ИмяТекущейСтраницыПанели, ТаблицаСтраниц);
	СтрТаблицаСтраницы = ЭтотОбъект[ТаблицаСтраниц].НайтиСтроки(Новый Структура("АктивнаяСтраница", Истина));
	
	ИндексТекСтраницыРаздела = ЭтотОбъект[ТаблицаСтраниц].Индекс(СтрТаблицаСтраницы[0]);

	ИзменитьТаблицуПараметровАвтозаполнения(-1, ИмяТекущейСтраницыПанели);
	
	СтруктураРеквизитовФормы.ОтключитьВыполнениеРасчета = Истина;
	
	РегламентированнаяОтчетность.УдалитьДополнительнуюСтраницуНаСервере(ЭтотОбъект, ИмяТекущейСтраницыПанели);
	
	СтруктураРеквизитовФормы.ОтключитьВыполнениеРасчета = Ложь;

	РасчетНаСервере(ИмяТекущейСтраницыПанели);
	
	СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
		
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтраницу(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("УдалитьСтраницуЗавершение", ЭтотОбъект);
	ТекстВопроса = НСтр("ru='Удалить текущую страницу?'");
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 60, КодВозвратаДиалога.Да);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтраницуЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.РазделыОтчета.ТекущиеДанные;
	
	КопияТекущиеДанные = ТекущиеДанные;
	
	ТекущиеДанные = ТекущиеДанные.ПолучитьРодителя();
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.ПолучитьЭлементы().Количество() = 1 Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяСтраницаРазделаПослеУдаления = Неопределено;
	Если КопияТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета = ТекущиеДанные.ПолучитьЭлементы().Количество() Тогда
		ТекущаяСтраницаРазделаПослеУдаления = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(ТекущиеДанные.ПолучитьЭлементы(), "КолонкаНомерСтраницыРазделаОтчета", КопияТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета - 1);
	КонецЕсли;
	
	УдалитьДополнительнуюСтраницуНаСервере(Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
	
	ТекущиеДанные.ПолучитьЭлементы().Удалить(ТекущиеДанные.ПолучитьЭлементы().Индекс(КопияТекущиеДанные));
	
	НомерСтраницы = 1;
	
	Для Каждого СтраницаРаздела Из ТекущиеДанные.ПолучитьЭлементы() Цикл
		
		СтраницаРаздела.КолонкаРазделыОтчета              = "Стр. " + НомерСтраницы;
		СтраницаРаздела.КолонкаНомерСтраницыРазделаОтчета = НомерСтраницы;
		
		НомерСтраницы = НомерСтраницы + 1;
		
	КонецЦикла;
	
	Если НЕ ТекущаяСтраницаРазделаПослеУдаления = Неопределено Тогда
		Элементы.РазделыОтчета.ТекущаяСтрока = ТекущаяСтраницаРазделаПослеУдаления.ПолучитьИдентификатор();
	КонецЕсли;
	
	Если ТекущиеДанные.ПолучитьЭлементы().Количество() = 1 Тогда 
		Обл = ТабличныйДокумент.Области["УдалитьСтраницуЗначок"];
		Обл.Гиперссылка = Ложь;
		Обл.Текст = "";
		Обл = ТабличныйДокумент.Области["УдалитьСтраницу"];
		Обл.Гиперссылка = Ложь;
		Обл.Текст = "";
	Иначе
		Обл = ТабличныйДокумент.Области["УдалитьСтраницуЗначок"];
		Обл.Гиперссылка = Истина;
		Обл.Текст = "х";
		Обл = ТабличныйДокумент.Области["УдалитьСтраницу"];
		Обл.Гиперссылка = Истина;
		Обл.Текст = "Удалить страницу";
	КонецЕсли;
	РегламентированнаяОтчетностьКлиентСервер.ОтрисоватьЗначкиУдаленияСтрок(ЭтотОбъект, 21);
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьПоказателиОтчетаЗаполняемыеИзИБНаСервере(ИмяСтраницы)
	
	РегламентированнаяОтчетностьКлиентСервер.ОчиститьПоказателиОтчетаЗаполняемыеИзИБ(ЭтотОбъект, ИмяСтраницы);
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьДеревоРазделовОтчетаНаКлиенте() Экспорт
	
	СформироватьДеревоРазделовОтчета(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСтроку(Команда)
	
	ДобавитьСтрокуНаСервере(Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьСтрокуНаСервере(КолонкаРазделыОтчетаСокрНаим)
	
	ВставитьДополнительнуюСтроку(ЭтотОбъект, КолонкаРазделыОтчетаСокрНаим);
	СохранитьДанныеРаздела(КолонкаРазделыОтчетаСокрНаим, Ложь, Ложь);
	
	Если Не СтруктураРеквизитовФормы.мАвтоВыборКодов Тогда 
		Если КолонкаРазделыОтчетаСокрНаим = "Товары" Тогда 
			ПолеКод = "П100";
			ПолеСтавка = "П1100011_";
		ИначеЕсли КолонкаРазделыОтчетаСокрНаим = "Упаковка" Тогда 
			ПолеКод = "П200";
			ПолеСтавка = "П2100011_";
		Иначе
			Модифицированность = Истина;
			Возврат;
		КонецЕсли;
		
		Ставки = мГруппыПоКлассификатору.НайтиСтроки(Новый Структура("Код", ТабличныйДокумент.Области[ПолеКод].Значение));
		Если Ставки.Количество() = 1 Тогда 
			ТабличныйДокумент.Области[ПолеСтавка + Формат(ЭтотОбъект[Лев(ПолеСтавка, 6)].Количество(), "ЧГ=")].Значение = Ставки[0].Ставка;
		КонецЕсли;
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтроку(Команда)
	
	ТекТабличноеПоле = ЭтотОбъект["ТабличныйДокумент"];
	
	ТекущаяОбласть = ТекТабличноеПоле.ТекущаяОбласть;
	ИмяГруппы      = РазделТекущейОбласти(ЭтотОбъект, ТекущаяОбласть);
	
	Если ИмяГруппы = Неопределено Тогда
		
		Сообщение = Новый СообщениеПользователю;
		
		Сообщение.Текст = НСтр("ru='Не выбрана удаляемая строка многострочного раздела.'");
		
		Сообщение.Сообщить();
		
		Возврат;
		
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("УдалитьСтрокуЗавершение", ЭтотОбъект);
	ТекстВопроса = НСтр("ru='Удалить выбранную строку?'");
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтрокуЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	УдалитьДополнительнуюСтрокуНаСервере(Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);

КонецПроцедуры

&НаСервере
Процедура УдалитьДополнительнуюСтрокуНаСервере(ТекущаяСтраница)
	
	УдалитьДополнительнуюСтроку(ЭтотОбъект, , , ТекущаяСтраница);
	
	СтруктураРеквизитовФормы.ОтключитьВыполнениеРасчета = Истина;
	СохранитьДанныеРаздела(ТекущаяСтраница, Ложь, Ложь);
	СтруктураРеквизитовФормы.ОтключитьВыполнениеРасчета = Ложь;
	
	Расчет(ЭтотОбъект, ТекущаяСтраница);
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура Обновить(Команда)
	
	СтруктураРеквизитовФормы.мВпрограммеИзмененаОрганизация = Истина;
	
	ЗаполнитьСведенияОбОрганизации();
	
	СтруктураРеквизитовФормы.мВпрограммеИзмененаОрганизация = Ложь;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДатуВЯчейкахНаКлиенте() Экспорт
	
	ЗаполнитьДатуВЯчейках(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЦветФонаЯчейкиНаСервере(ИмяЯчейки = Неопределено, ВариантЗаполнения = Неопределено, ИмяТекущейСтраницыПанели = "") Экспорт
	
	УстановитьЦветФонаЯчейки(ЭтотОбъект, ИмяЯчейки, ВариантЗаполнения, ИмяТекущейСтраницыПанели);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЦветФонаЯчейкиНаКлиенте(ИмяЯчейки = Неопределено, ВариантЗаполнения = Неопределено, ИмяТекущейСтраницыПанели = "") Экспорт
	
	УстановитьЦветФонаЯчейки(ЭтотОбъект, ИмяЯчейки, ВариантЗаполнения, ИмяТекущейСтраницыПанели);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЦветФонаЯчейки(Форма, ИмяЯчейки = Неопределено, ВариантЗаполнения = Неопределено, ИмяТекущейСтраницыПанели = "")
	
	Перем ЦветФона;
	Перем Комментарий;

	// Не нужно разукрашивать табличные поля, если открывается без открытия формы (например печать или просмотр)
	Если Форма.СтруктураРеквизитовФормы.мБезОткрытияФормы Или Форма.СтруктураРеквизитовФормы.мРежимПечати Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ИмяЯчейки = Неопределено Тогда

		ИмяПоляТаблДокумента = "ТабличныйДокумент";

		Ключ = "_" + ВариантЗаполнения;
		Форма.мСтруктураЦветовРаскраски.Свойство(Ключ, ЦветФона);

		Если ВариантЗаполнения = 4 Тогда
			Форма[ИмяПоляТаблДокумента].Области[ИмяЯчейки].Защита = Истина;
		Иначе
			Форма[ИмяПоляТаблДокумента].Области[ИмяЯчейки].Защита = Ложь;
		КонецЕсли;

		// установим цвет ячейки
		Форма[ИмяПоляТаблДокумента].Области[ИмяЯчейки].ЦветФона = ЦветФона;

	Иначе
		// устанавливаем цвет фона всех автозаполняемых ячеек активной страницы

		ТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения(Форма, ИмяТекущейСтраницыПанели);
		Если ТаблицаВариантыЗаполнения = Неопределено Тогда
			Возврат;
		КонецЕсли;

		Для Каждого Строка Из ТаблицаВариантыЗаполнения Цикл
			ИмяПоказателя     = Строка.КодПоказателя;
			ВариантЗаполнения = Строка.ВариантЗаполнения;
			Комментарий       = Строка.Комментарий;
			КодПоказателяПоСтруктуре = Строка.КодПоказателяПоСтруктуре;
			
			КолвоСтрокВМногострочнойЧасти = ПоказательВходитВМногострочнуюЧасть(Форма, ИмяПоказателя);
			
			Если КолвоСтрокВМногострочнойЧасти > 0 Тогда
				Многострочность = Истина;
				БазоваяЧасть = ИмяПоказателя;
			Иначе
				Многострочность = Ложь;
				КолвоСтрокВМногострочнойЧасти = 1;
			КонецЕсли;
			
			Для Инд = 1 по КолвоСтрокВМногострочнойЧасти Цикл
				
				Если Многострочность Тогда
					ИмяПоказателя = БазоваяЧасть + "_" + Строка(Инд);
				КонецЕсли;
				
				ТекОбластьЯчеек = Форма.ТабличныйДокумент.Области[ИмяПоказателя];
				Если (Не ПустаяСтрока(Комментарий)) ИЛИ (Не ПустаяСтрока(ТекОбластьЯчеек.Примечание.Текст)) Тогда
					ТекОбластьЯчеек.Примечание.Текст = Комментарий;
				КонецЕсли;
				
				Ключ = "_" + ВариантЗаполнения;
				Форма.мСтруктураЦветовРаскраски.Свойство(Ключ, ЦветФона);
				
				Если ВариантЗаполнения = 4 Тогда
					Форма.ТабличныйДокумент.Области[ИмяПоказателя].Защита = Истина;
				Иначе
					Форма.ТабличныйДокумент.Области[ИмяПоказателя].Защита = Ложь;
				КонецЕсли;
				
				Форма.ТабличныйДокумент.Области[ИмяПоказателя].ЦветФона = ЦветФона;
				
			КонецЦикла;

		КонецЦикла;

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуНастроек(Команда)
	
	ОткрытьФормуВыбораСтраниц("ВыбратьДляНастройки");
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	РегламентированнаяОтчетностьКлиент.ПередЗакрытиемРегламентированногоОтчета(ЭтотОбъект, Отказ, СтандартнаяОбработка, ЗавершениеРаботы, ТекстПредупреждения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьБланк(Команда)
	
	Отказ = Ложь;
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("Команда", Команда);
	ОписаниеОповещения = Новый ОписаниеОповещения("ПоказатьБланкЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередПечатьюРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьБланкЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;

	Команда = ДополнительныеПараметры.Команда;
		
	Печать(Команда.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ЗавершениеРаботы Тогда
				
		Возврат;
		
	КонецЕсли;
	
	ПриЗакрытииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПриЗакрытииНаСервере()
	
	РегламентированнаяОтчетность.ПриЗакрытииРегламентированногоОтчета(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Заголовок = СтрЗаменить(Заголовок, " (сводная форма)", "");
	
	Если СтрНайти(Заголовок, СтруктураРеквизитовФормы.СтрПериодОтчета) = 0 Тогда
		Заголовок = Заголовок + " за " + СтруктураРеквизитовФормы.СтрПериодОтчета;
	КонецЕсли;
	
	ОргСтр = " (" + СтруктураРеквизитовФормы.НаимОрганизации + ")";
	
	Если СтрНайти(Заголовок, ОргСтр) = 0 Тогда
		Заголовок = Заголовок + ОргСтр;
	КонецЕсли;
	
	Заголовок = Заголовок + ?(СтрНайти(ИмяФормы, "Внешний") > 0, " - внешний отчет", "");
	
	Заголовок = Заголовок + ?(СтрНайти(ЭтаФорма.ИмяФормы, "Внешний") > 0, " - внешний отчет", "");
	
	ПодключитьОбработчикОжидания("ВыполнитьПроверкуПередОткрытием", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПроверкуПередОткрытием()
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПриОткрытииЗавершение", ЭтотОбъект);
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередОткрытиемФормыРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытииЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Модифицированность = Ложь;
		Закрыть();
		Возврат;
	КонецЕсли;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ВставитьДополнительнуюСтроку(Форма, ТекущаяСтраница)
	
	Перем СтруктураГруппы;
	Перем МаксимальноеКоличествоСтрокГруппы;
	
	// Сначала выполним проверку на активную страницу панели формы,
	// которая содержит многострочный раздел
	
	#Если НаКлиенте Тогда
		ИмяГруппы = Форма.ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаКлиенте(ТекущаяСтраница);
	#Иначе
		ИмяГруппы = Форма.ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ТекущаяСтраница);
	#КонецЕсли
	
	Если ИмяГруппы = Неопределено Тогда
		ИмяГруппы = РазделТекущейОбласти(Форма, Форма.Элементы.ТабличныйДокумент.ТекущаяОбласть);
	КонецЕсли;
	
	Если ИмяГруппы = Неопределено Тогда
		
		Сообщение = Новый СообщениеПользователю;
		
		Сообщение.Текст = НСтр("ru='Не выбран многострочный раздел, в который необходимо добавить строку.'");
		
		Сообщение.Сообщить();
		
		Возврат;
		
	КонецЕсли;
	
	// Исходное количество строк группы
	Форма.мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, МаксимальноеКоличествоСтрокГруппы);
	
	ТекТабличноеПолеИмя = "ТабличныйДокумент";
	
	ТекТабличноеПоле = Форма[ТекТабличноеПолеИмя];
	
	Форма.мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);
	
	СтруктураГруппы = Форма[СтруктураГруппы];
	
	СписокИменКолонокРаздела = Форма.мСтруктураИменаКолонокРазделов[ИмяГруппы];
	
	// определяем последнюю строку многострочной группы
	КолСтрок = СтруктураГруппы.Количество();
	КолСтрокСтр = Формат(КолСтрок, "ЧГ=0");
	КолСтрокСтр1 = Формат(КолСтрок + 1, "ЧГ=0");
	
	ИмяПервойЯчейки = Форма.мСтруктураИменаКолонокРазделов[ИмяГруппы][0].Значение;
	
	ИмяПервойЯчейкиПоследнейСтроки = ИмяПервойЯчейки + "_" + КолСтрокСтр;
	ИмяТекущейОбласти = ИмяПервойЯчейки + "_" + КолСтрокСтр1;
	
	// область первой ячейки последней строки многострочного раздела
	ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяПервойЯчейкиПоследнейСтроки];
	
	НастройкиМнгЧ = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСвойствоРаздела(Форма, Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела, "МногострочностьВРазделе").НайтиСтроки(Новый Структура("ИдГруппы", ИмяГруппы))[0];
	ВысотаСтроки = НастройкиМнгЧ.ВысотаСтроки;
	
	// номера строк исходной области
	НомерВерхЯчейкиОбласти = ОбластьЯчейки.Верх;
	НомерНижнЯчейкиОбласти = ОбластьЯчейки.Верх + ВысотаСтроки - 1;
	СдвигСтрок = НомерНижнЯчейкиОбласти - НомерВерхЯчейкиОбласти + 1;
	
	// номера строк вставляемой области
	НомерВерхЯчейкиНовойОбласти = НомерВерхЯчейкиОбласти + СдвигСтрок;
	НомерНижнЯчейкиНовойОбласти = НомерНижнЯчейкиОбласти + СдвигСтрок;
	
	РегламентированнаяОтчетностьВызовСервера.СпециальногоДобавленияСтроки(ТекТабличноеПоле, ТекТабличноеПолеИмя, ИмяГруппы, НомерВерхЯчейкиОбласти, НомерНижнЯчейкиОбласти);
	
	Форма[ТекТабличноеПолеИмя] = ТекТабличноеПоле;
	
	СписокИменКолонокРаздела = Форма.мСтруктураИменаКолонокРазделов[ИмяГруппы];
	
	Для НомерГрафы = 1 По Форма.мСтруктураКолвоКолонокРазделов[ИмяГруппы] Цикл
		
		ИмяКолонки = СписокИменКолонокРаздела.Получить(НомерГрафы - 1).Значение;
		
		// переопределяем имена вставленной области
		Если СтруктураГруппы[0].Свойство(ИмяКолонки) Тогда
			
			ИмяОбластиЯчейки    = ИмяКолонки + "_" + КолСтрокСтр;
			ИмяНовОбластиЯчейки = ИмяКолонки + "_" + КолСтрокСтр1;
			
			ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяОбластиЯчейки];
			ОбластьЯчейки.Имя = ИмяНовОбластиЯчейки;
			
			// определяем границы ячейки исходной области
			НомерВерхСтрокиЯчейки  = ОбластьЯчейки.Верх - СдвигСтрок;
			НомерНижнСтрокиЯчейки  = ОбластьЯчейки.Низ  - СдвигСтрок;
			
			НомерЛевоКолонкиЯчейки = ОбластьЯчейки.Лево;
			НомерПравКолонкиЯчейки = ОбластьЯчейки.Право;
			
			// Назначаем имя ячейки исходной области,
			// (т.к. в результате вставки новой области оно было очищено)
			ОбластьЯчейкиИсходнойОбласти = ТекТабличноеПоле.Область(НомерВерхСтрокиЯчейки, НомерЛевоКолонкиЯчейки, НомерНижнСтрокиЯчейки, НомерПравКолонкиЯчейки);
			ОбластьЯчейкиИсходнойОбласти.Имя = ИмяОбластиЯчейки;
			
			// Назначаем имена областей для удаления строк
			Если НомерГрафы = 1 Тогда
				НовОбластьЯчейкиУдалитьСтроку = ТекТабличноеПоле.Область(ОбластьЯчейки.Верх, 2, ОбластьЯчейки.Верх, 2);
				НовОбластьЯчейкиУдалитьСтроку.Имя = "УдалитьСтроку" + ИмяНовОбластиЯчейки;
				ИсхОбластьЯчейкиУдалитьСтроку = ТекТабличноеПоле.Область(ОбластьЯчейкиИсходнойОбласти.Верх, 2, ОбластьЯчейкиИсходнойОбласти.Верх, 2);
				ИсхОбластьЯчейкиУдалитьСтроку.Имя = "УдалитьСтроку" + ИмяОбластиЯчейки;
			КонецЕсли;
			
			// очищаем значения ячеек вставленной области
			Если ОбластьЯчейки.СодержитЗначение = Истина Тогда
				ОбластьЯчейки.Очистить();
			Иначе
				// порядековый номер последней строки перед вставкой
				ИсходныйНомер        = Число("0" + ОбластьЯчейки.Текст);
				НовыйПорядковыйНомер = ИсходныйНомер + 1;
				
				ОбластьЯчейки.Текст  = ? (НЕ НовыйПорядковыйНомер > МаксимальноеКоличествоСтрокГруппы, Строка(НовыйПорядковыйНомер), "");
				
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	// Назначим текущей областью таблицы первую редактируемую ячейку добавленной строки.
	Инд = 0;
	Пока Истина Цикл 
		Инд = Инд + 1;
		Обл = ТекТабличноеПоле.Области.Найти("УдалитьСтроку" + ИмяГруппы + "01_" + Инд);
		Если Обл = Неопределено Тогда 
			Прервать;
		КонецЕсли;
		Обл.Гиперссылка = Истина;
		Обл.Текст = "х";
	КонецЦикла;
	Форма.Элементы[ТекТабличноеПолеИмя].ТекущаяОбласть = ТекТабличноеПоле.Области[ИмяТекущейОбласти];
	
	// установим фокус на поле табличн. документа
	Форма.ТекущийЭлемент = Форма.Элементы[ТекТабличноеПолеИмя];
	
	// добавляем в структуру многострочной группы новую строку
	СтруктураГруппы.Добавить();
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ОпределитьИдМногострочногоРазделаПоТабличномуПолю(Форма, ИмяТекущейСтраницы) Экспорт
	
	Перем ИдГруппы;

	Если ИмяТекущейСтраницы = "Товары" Тогда
		ИмяГруппы = Форма.СтруктураРеквизитовФормы.мИдГруппыТовары;
	ИначеЕсли ИмяТекущейСтраницы = "Упаковка" Тогда
		ИмяГруппы = Форма.СтруктураРеквизитовФормы.мИдГруппыУпаковка;
	КонецЕсли;

	Возврат ИмяГруппы;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПоказательВходитВМногострочнуюЧасть(Форма, ИмяПоказателя)

	ИмяГруппы = Лев(ИмяПоказателя, 6);

	СтруктураГруппы = Неопределено;

	Если НЕ Форма.мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы) Тогда
		Возврат 0;
	Иначе
		СтруктураГруппы = Форма[СтруктураГруппы];
		Возврат СтруктураГруппы.Количество();
	КонецЕсли;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьТаблицуВариантовЗаполнения(Форма, ИмяСтраницыПанели, ПолучитьЭталонную = Ложь)

	#Если НаКлиенте Тогда
		Возврат РегламентированнаяОтчетностьКлиент.ПолучитьТаблицуВариантовЗаполненияНаКлиенте(Форма, ИмяСтраницыПанели, ПолучитьЭталонную);
	#Иначе
		Возврат РегламентированнаяОтчетностьВызовСервера.ПолучитьТаблицуВариантовЗаполненияНаСервере(Форма, ИмяСтраницыПанели, ПолучитьЭталонную);
	#КонецЕсли
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УдалитьДополнительнуюСтроку(Форма, СпециальноеДобавление = Ложь, ИмяКолонкиНомера = Неопределено, ТекущаяСтраница) Экспорт
	Перем ИсходноеКоличествоСтрокГруппы;
	Перем СтруктураГруппы;
	
	// Сначала выполним проверку на активную страницу панели формы,
	// которая содержит многострочный раздел
	#Если НаКлиенте Тогда
		ИмяГруппы = Форма.ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаКлиенте(ТекущаяСтраница);
	#Иначе
		ИмяГруппы = Форма.ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ТекущаяСтраница);
	#КонецЕсли
	
	Если ИмяГруппы = Неопределено Тогда
		ИмяГруппы = РазделТекущейОбласти(Форма, Форма.Элементы.ТабличныйДокумент.ТекущаяОбласть);
	КонецЕсли;
	
	// исходное количество строк группы
	Форма.мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);
	
	Форма.мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);
	
	ТекТабличноеПолеИмя = "ТабличныйДокумент";
	
	ТекТабличноеПоле = Форма[ТекТабличноеПолеИмя];
	ТекущаяОбласть = Форма.Элементы[ТекТабличноеПолеИмя].ТекущаяОбласть;
	ИмяЯчейки      = ТекущаяОбласть.Имя;
	ИмяГруппы = РазделТекущейОбласти(Форма, ТекущаяОбласть);
	
	// предварительно обновим структуру многострочных разделов
	РегламентированнаяОтчетностьКлиентСервер.ОбновитьСтруктуруМногострочногоРаздела(Форма, ИмяГруппы);
	
	// номер строки многострочного раздела определим
	// по имени выделенной ячейки
	НомУдаляемойСтроки = Число( Сред( ИмяЯчейки, СтрНайти( ИмяЯчейки, "_") + 1));
	НомерСтрокиТаблицы = НомУдаляемойСтроки - 1; // нумерация строк в таблице значений начинается с нуля
	СтруктураГруппы = Форма[СтруктураГруппы];
	
	ИмяПервойЯчейки = Форма.мСтруктураИменаКолонокРазделов[ИмяГруппы][0].Значение;
	
	Если СтруктураГруппы.Количество() > ИсходноеКоличествоСтрокГруппы Тогда
		// удаляется добавленная строка
		ИмяПервойЯчейкиУдаляемойСтроки= ИмяПервойЯчейки + "_" + НомУдаляемойСтроки;
		// область первой ячейки удаляемой строки многострочного раздела
		ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяПервойЯчейкиУдаляемойСтроки];
		
		НастройкиМнгЧ = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСвойствоРаздела(Форма, ТекущаяСтраница, "МногострочностьВРазделе").НайтиСтроки(Новый Структура("ИдГруппы", ИмяГруппы))[0];
		ВысотаСтроки = НастройкиМнгЧ.ВысотаСтроки;
		
		// номера строк удаляемой области
		НомерВерхЯчейкиОбласти = ОбластьЯчейки.Верх;
		НомерНижнЯчейкиОбласти = ОбластьЯчейки.Верх + ВысотаСтроки - 1;
		
		РегламентированнаяОтчетностьВызовСервера.СпециальногоУдаленияСтроки(ТекТабличноеПоле, ТекТабличноеПолеИмя, ИмяГруппы, НомерВерхЯчейкиОбласти, НомерНижнЯчейкиОбласти);
		
		Форма[ТекТабличноеПолеИмя] = ТекТабличноеПоле;
				
		КолвоСдвигаемыхСтрок = СтруктураГруппы.Количество() - НомУдаляемойСтроки;
		
		// обновим имена ячеек сдвинутых строк
		Если КолвоСдвигаемыхСтрок > 0 Тогда
			
			Для НСтр = НомУдаляемойСтроки + 1 По СтруктураГруппы.Количество() Цикл
				
				ТекСтрока = СтруктураГруппы[НСтр-1];
				
				СписокИменКолонокРаздела = Форма.мСтруктураИменаКолонокРазделов[ИмяГруппы];
				
				Для НомерГрафы = 1 По Форма.мСтруктураКолвоКолонокРазделов[ИмяГруппы] Цикл
					
					КолонкаИмя = СписокИменКолонокРаздела.Получить(НомерГрафы - 1).Значение;
					
					Если СтруктураГруппы[0].Свойство(КолонкаИмя) Тогда
						
						ИмяСдвинутойЯчейки = КолонкаИмя + "_" + НСтр;
						НовоеИмяСдвинутойЯчейки = КолонкаИмя + "_" + (НСтр - 1);
						
						ОбластьСдвинутойЯчейки     = ТекТабличноеПоле.Области[ИмяСдвинутойЯчейки];
						ОбластьСдвинутойЯчейки.Имя = НовоеИмяСдвинутойЯчейки;
						
						Если НомерГрафы = 1 Тогда
							ОбластьЯчейкиУдалитьСтроку = ТекТабличноеПоле.Область(ОбластьСдвинутойЯчейки.Верх, 2, ОбластьСдвинутойЯчейки.Верх, 2);
							ОбластьЯчейкиУдалитьСтроку.Имя = "УдалитьСтроку" + НовоеИмяСдвинутойЯчейки;
						КонецЕсли;
						
						Если ОбластьСдвинутойЯчейки.СодержитЗначение <> Истина Тогда
							// обновляем порядковый номер строки
							
							СтарыйНомер = Число(ТекСтрока[КолонкаИмя]);
							НовыйПорядковыйНомер = Строка(Макс(СтарыйНомер - 1, 0));
							ОбластьСдвинутойЯчейки.Текст = НовыйПорядковыйНомер + ".";
							
							// обновляем значение элемента таблицы значений
							ТекСтрока[КолонкаИмя] = НовыйПорядковыйНомер;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
				
			КонецЦикла;
		КонецЕсли;
		
		// обновляем структуру многострочного раздела
		СтруктураГруппы.Удалить(НомерСтрокиТаблицы);
		
	Иначе
		// строка не удаляется в форме табличного документа,
		// а должна осуществляться сдвиг строк
		
		// обновляем структуру многострочного раздела
		// методом удаления выбранной строки и добавления пустой строки
		СтруктураГруппы.Удалить(НомерСтрокиТаблицы);
		
		ДобавляемаяСтрока = СтруктураГруппы.Добавить();
		
		// Особенность.
		// Если в многострочном блоке есть колонки, защищенные и содержащие нужное значение,
		// тогда при удалении доп. строк не вставленных, данное значение обнуляется.
		// Поэтому добавим искусственно.
		Если ИмяГруппы = "П0000100010" Тогда
			ДобавляемаяСтрока.П000010001012 = Форма.СтруктураРеквизитовФормы.ЗначениеКоэффициентаКНормативуПоУмолчанию;
		ИначеЕсли ИмяГруппы = "П0000300010" Тогда
			ДобавляемаяСтрока.П000030001011 = Форма.СтруктураРеквизитовФормы.ЗначениеКоэффициентаКНормативуПоУмолчанию;
		ИначеЕсли ИмяГруппы = "П0000500010" Тогда
			ДобавляемаяСтрока.П000050001020 = Форма.СтруктураРеквизитовФормы.ЗначениеКоэффициентаКНормативуПоУмолчанию;
		КонецЕсли;

		СписокИменКолонокРаздела = Форма.мСтруктураИменаКолонокРазделов[ИмяГруппы];
		
		// обновляем порядковые номера строк, выводимых в табличный документ
		Для Каждого СтрокаТаблицы Из СтруктураГруппы Цикл
			
			НомерСтрокиВТаблице = СтруктураГруппы.Индекс(СтрокаТаблицы);
			НомерСтрокиВФормеТаблицы = Формат(НомерСтрокиВТаблице + 1, "ЧГ=0");
			
			Для НомерГрафы = 1 По Форма.мСтруктураКолвоКолонокРазделов[ИмяГруппы] Цикл
				
				КолонкаТаблицыИмя = СписокИменКолонокРаздела.Получить(НомерГрафы - 1).Значение;
				
				Если СтруктураГруппы[0].Свойство(КолонкаТаблицыИмя) Тогда
					
					ИмяЯчейки                = КолонкаТаблицыИмя + "_" + НомерСтрокиВФормеТаблицы;
					ОбластьЯчейкиТаблицы     = ТекТабличноеПоле.Области[ИмяЯчейки];
					
					Если ОбластьЯчейкиТаблицы.СодержитЗначение <> Истина Тогда
						
						ПервыйНомерВГруппе = 1;
						
						// обновляем порядковый номер строки
						НовыйПорядковыйНомер = Строка(ПервыйНомерВГруппе + НомерСтрокиВТаблице);
						
						СтрокаТаблицы[КолонкаТаблицыИмя] = НовыйПорядковыйНомер;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		// Данные в многострочном блоке обновляются в декларациях!
		// Обновляем экранную форму табличного документа
		#Если НаКлиенте Тогда
			Форма.ВывестиРазделВТабличныйДокументНаКлиенте(ИмяГруппы, СтруктураГруппы);
		#Иначе
			Форма.ВывестиРазделВТабличныйДокументНаСервере(ИмяГруппы, СтруктураГруппы);
		#КонецЕсли
		
	КонецЕсли;
	
	Расчет(Форма, ТекущаяСтраница);
	Если СтруктураГруппы.Количество() = 1 Тогда
		Обл = ТекТабличноеПоле.Области["УдалитьСтроку" + ИмяГруппы + "01_1"];
		Обл.Гиперссылка = Ложь;
		Обл.Текст = "";
	КонецЕсли;
	
	// назначим текущей областью таблицы первую редактируемую ячейку
	// удаленной строки, если ее порядковый номер меньше кол-ва строк
	// многострочного раздела, или последней строки раздела в противном случае
	
	// определяем текущую область таблицы
	НомТекущейСтроки  = Мин(НомУдаляемойСтроки, СтруктураГруппы.Количество());
	
	ИмяТекущейОбласти = ИмяПервойЯчейки + "_" + НомТекущейСтроки;
	
	Форма.Элементы[ТекТабличноеПолеИмя].ТекущаяОбласть = ТекТабличноеПоле.Области[ИмяТекущейОбласти];
	
	// установим фокус на поле табличн. документа
	ТекущийЭлемент = Форма.Элементы[ТекТабличноеПолеИмя];
	
	Форма.Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Функция СформироватьСтруктуруДанныхДопСтрокСтраницы(ИмяСтраницы) Экспорт
	
	Перем СтруктураДанныхДопСтрокРаздела;
	
	Если ИмяСтраницы = "Товары" Тогда
		ОбновитьСтруктуруМногострочногоРаздела(ЭтотОбъект, СтруктураРеквизитовФормы.мИдГруппыТовары);
		
		СтруктураДанныхДопСтрокРаздела = Новый Структура;
		
		ПромежуточнаяТаблица = Неопределено;
		мСтруктураМногострочныхРазделов.Свойство(СтруктураРеквизитовФормы.мИдГруппыТовары, ПромежуточнаяТаблица);
		ПромежуточнаяТаблица = ЭтотОбъект[ПромежуточнаяТаблица];
		ТаблицаДопСтрокРазделТовары = ЭтотОбъект["Хранилище" + СтруктураРеквизитовФормы.мИдГруппыТовары].Добавить().Таблица;
		КопироватьДанныеФормы(ПромежуточнаяТаблица, ТаблицаДопСтрокРазделТовары);
		СтруктураДанныхДопСтрокРаздела.Вставить(СтруктураРеквизитовФормы.мИдГруппыТовары, ТаблицаДопСтрокРазделТовары);
	ИначеЕсли ИмяСтраницы = "Упаковка" Тогда
		ОбновитьСтруктуруМногострочногоРаздела(ЭтотОбъект, СтруктураРеквизитовФормы.мИдГруппыУпаковка);
		
		СтруктураДанныхДопСтрокРаздела = Новый Структура;
		
		ПромежуточнаяТаблица = Неопределено;
		мСтруктураМногострочныхРазделов.Свойство(СтруктураРеквизитовФормы.мИдГруппыУпаковка, ПромежуточнаяТаблица);
		ПромежуточнаяТаблица = ЭтотОбъект[ПромежуточнаяТаблица];
		ТаблицаДопСтрокРазделУпаковка = ЭтотОбъект["Хранилище" + СтруктураРеквизитовФормы.мИдГруппыУпаковка].Добавить().Таблица;
		КопироватьДанныеФормы(ПромежуточнаяТаблица, ТаблицаДопСтрокРазделУпаковка);
		СтруктураДанныхДопСтрокРаздела.Вставить(СтруктураРеквизитовФормы.мИдГруппыУпаковка, ТаблицаДопСтрокРазделУпаковка);
	КонецЕсли;
	
	Возврат СтруктураДанныхДопСтрокРаздела;
	
КонецФункции

&НаСервере
Процедура ОчисткаРегламентированногоОтчетаНаСервере(ИмяСтраницы, ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста, РежимОчистки, Многостраничность, КолВоСтраницВРазделе) Экспорт
	
	УдалятьсяВсеДопЭкземпляры = Ложь;
	
	Если СтрНайти(РежимОчистки, "ОчиститьТекущийРаздел") > 0 Тогда
		
		Если (Многостраничность) И (КолВоСтраницВРазделе > 1) Тогда
			
			СтруктураРеквизитовФормы.ОтключитьВыполнениеРасчета = Истина;
			
			ОчиститьПоказателиОтчетаЗаполняемыеИзИБНаСервере(ИмяСтраницы);
			СохранитьДанныеРаздела(СтруктураРеквизитовФормы.НаимТекущегоРаздела, Истина, Ложь);
			
			СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяСтраницы;
			СтруктураРеквизитовФормы.ОтключитьВыполнениеРасчета = Ложь;
			
			УдалятьсяВсеДопЭкземпляры = Истина;
			
		Иначе
			
			ОчиститьТабличноеПолеНаСервере(ИмяСтраницы);
			
		КонецЕсли;
		
		СформироватьДеревоРазделовОтчетаНаСервере();
		
		СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
		
	ИначеЕсли СтрНайти(РежимОчистки, "ОчиститьТекущийЭкземплярМногостраничногоРаздела") > 0 Тогда
		
		СтруктураРеквизитовФормы.ОтключитьВыполнениеРасчета = Истина;
		
		ОчиститьТабличноеПолеНаСервере(ИмяСтраницы);
		
		СохранитьДанныеРаздела(СтруктураРеквизитовФормы.НаимТекущегоРаздела, Истина, Ложь);
		
		СтруктураРеквизитовФормы.ОтключитьВыполнениеРасчета = Ложь;
		
	КонецЕсли;
	
	Если ИмяСтраницы = "Титульный" Тогда
		ТабличныйДокумент.Область("НомерКорректировки").Значение = 0;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиентСервер.ПослеОчисткиРегламентированногоОтчета(ЭтотОбъект, ИмяСтраницы, ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста);
	
КонецПроцедуры

&НаКлиенте
Процедура ОчисткаРегламентированногоОтчетаНаКлиенте(ИмяСтраницы, ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста, РежимОчистки, Многостраничность, КолВоСтраницВРазделе) Экспорт
	
	УдалятьсяВсеДопЭкземпляры = Ложь;
	
	Если СтрНайти(РежимОчистки, "ОчиститьТекущийРаздел") > 0 Тогда
		
		Если (Многостраничность) И (КолВоСтраницВРазделе > 1) Тогда

			РегламентированнаяОтчетностьКлиентСервер.ОчиститьПоказателиОтчетаЗаполняемыеИзИБ(ЭтотОбъект, ИмяСтраницы);

			УдалятьсяВсеДопЭкземпляры = Истина;
			
		Иначе

			ОчиститьТабличноеПолеНаКлиенте(ИмяСтраницы);

		КонецЕсли;
		
		СформироватьДеревоРазделовОтчетаНаКлиенте();
		
	ИначеЕсли СтрНайти(РежимОчистки, "ОчиститьТекущийЭкземплярМногостраничногоРаздела") > 0 Тогда
		
		ОчиститьТабличноеПолеНаКлиенте(ИмяСтраницы);
		
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиентСервер.ПослеОчисткиРегламентированногоОтчета(ЭтотОбъект, ИмяСтраницы, ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста);
	
	СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ТабличныйДокументВыбор(Элемент, Область, СтандартнаяОбработка)
	
	Если СтрЧислоВхождений(Область.Имя, "ДобавитьСтраницу") > 0 И Область.Текст <> "" Тогда
		ДобавитьСтраницу("");
		Возврат;
	ИначеЕсли СтрЧислоВхождений(Область.Имя, "УдалитьСтраницу") > 0 И Область.Текст <> "" Тогда
		УдалитьСтраницу("");
		Возврат;
	ИначеЕсли СтрЧислоВхождений(Область.Имя, "ДобавитьСтроку") > 0 И Область.Текст <> "" Тогда
		ДобавитьСтроку("");
		Возврат;
	ИначеЕсли СтрЧислоВхождений(Область.Имя, "УдалитьСтроку") > 0 И Область.Текст <> "" Тогда
		УдалитьСтроку("");
		Возврат;
	ИначеЕсли Область.Имя = "СобратьДанные" Тогда 
		РасчетИтогов(ЭтотОбъект);
		Возврат;
	КонецЕсли;
		
	ИмяРаздела = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
	Если Область.Имя = "ОрганРПН" Тогда 
		СтандартнаяОбработка = Ложь;
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Заголовок", "Выбор органа Росприроднадзора");
		
		ПараметрыФормы.Вставить("ТаблицаЗначений", мОрганыРПН);
		ПараметрыФормы.Вставить("СтруктураДляПоиска", Новый Структура("Название", Область.Значение));
		ПараметрыФормы.Вставить("ОтключитьВидимостьКолонкиКод", Истина);
		
		ДополнительныеПараметры = Новый Структура("Область, Элемент", Область, Элемент);
		ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьФормумОрганыРПНЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ОткрытьФорму("Обработка.ОбщиеОбъектыРеглОтчетности.Форма.ФормаВыбораЗначенияИзТаблицы", ПараметрыФормы, ЭтотОбъект,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	ИначеЕсли Область.Имя = "ОргРПН" Или Область.Имя = "КодОргРПН" Тогда 
		СтандартнаяОбработка = Ложь;
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Заголовок", "Выбор органа Росприроднадзора");
		ОблОргРПН = ТабличныйДокумент.Области.Найти("ОргРПН");
		ПараметрыФормы.Вставить("ТаблицаЗначений", мОрганыРПН);
		ПараметрыФормы.Вставить("СтруктураДляПоиска", Новый Структура("Название", ОблОргРПН.Значение));
		ПараметрыФормы.Вставить("ОтключитьВидимостьКолонкиКод", Истина);
		
		ДополнительныеПараметры = Новый Структура("Область, Элемент", ОблОргРПН, Элемент);
		ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьФормумОрганыРПНЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ОткрытьФорму("Обработка.ОбщиеОбъектыРеглОтчетности.Форма.ФормаВыбораЗначенияИзТаблицы", ПараметрыФормы, ЭтотОбъект,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	ИначеЕсли Область.Имя = "ORG_SCALE" Тогда
		СтандартнаяОбработка = Ложь;
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("СтруктураДляПоиска", Новый Структура("Название", Область.Значение));
		ПараметрыФормы.Вставить("Заголовок", "Выбор размера предприятия");
		
		ПараметрыФормы.Вставить("ТаблицаЗначений", мРазмерОрганизации);
		ДополнительныеПараметры = Новый Структура("Область, Элемент", Область, Элемент);
		ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьФормуРазмерПредприятия", ЭтотОбъект, ДополнительныеПараметры);
		ОткрытьФорму("Обработка.ОбщиеОбъектыРеглОтчетности.Форма.ФормаВыбораЗначенияИзТаблицы", ПараметрыФормы, ЭтотОбъект,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	ИначеЕсли Область.Имя = "SEP_DIV" Или Область.Имя = "FINDIVID" Тогда
		Область.Значение = Не Область.Значение;
		СтандартнаяОбработка = Ложь;
	ИначеЕсли (Не СтруктураРеквизитовФормы.мАвтоВыборКодов) Тогда 
		Если (Область.Имя = "П100" Или  Область.Имя = "П200") Тогда
			СтандартнаяОбработка = Ложь;
			
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("Заголовок", "Выбор группы");
			
			ПараметрыФормы.Вставить("ТаблицаЗначений", мГруппыПоКлассификатору);
			ПараметрыФормы.Вставить("СтруктураДляПоиска", Новый Структура("Название", Область.Значение));
			ПараметрыФормы.Вставить("ОтключитьВидимостьКолонкиКод", Истина);
			
			ДополнительныеПараметры = Новый Структура("Область, Элемент", Область, Элемент);
			ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьФормумГруппыПоКлассификаторуЗавершение", ЭтотОбъект, ДополнительныеПараметры);
			ОткрытьФорму("Обработка.ОбщиеОбъектыРеглОтчетности.Форма.ФормаВыбораЗначенияИзТаблицы", ПараметрыФормы, ЭтотОбъект,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		ИначеЕсли СтрНачинаетсяС(Область.Имя, "П1100002_") Или СтрНачинаетсяС(Область.Имя, "П1100003_")
				Или СтрНачинаетсяС(Область.Имя, "П2100002_") Или СтрНачинаетсяС(Область.Имя, "П2100003_") Тогда 
			
			СформироватьСписокКодовТоваров(ТабличныйДокумент.Области[Лев(Область.Имя, 2) + "00"].Значение, "мСоставГруппОКПД");
			Если мСоставГруппДляВыбора.Количество() = 0 Тогда 
				Возврат;
			КонецЕсли;
			
			СтандартнаяОбработка = Ложь;
			
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("Заголовок", "Выбор кода");
			ОблКод = ТабличныйДокумент.Области[СтрЗаменить(Область.Имя, "100002_", "100003_")];
			
			ПараметрыФормы.Вставить("ТаблицаЗначений", мСоставГруппДляВыбора);
			ПараметрыФормы.Вставить("СтруктураДляПоиска", Новый Структура("Код", ОблКод.Значение));
			
			ДополнительныеПараметры = Новый Структура("Область, Элемент", ОблКод, Элемент);
			ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьФормумСоставГруппОКПДДляВыбораЗавершение", ЭтотОбъект, ДополнительныеПараметры);
			ОткрытьФорму("Обработка.ОбщиеОбъектыРеглОтчетности.Форма.ФормаВыбораЗначенияИзТаблицы", ПараметрыФормы, ЭтотОбъект,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		ИначеЕсли СтрНачинаетсяС(Область.Имя, "П1100004_") Или СтрНачинаетсяС(Область.Имя, "П1100005_")
				Или СтрНачинаетсяС(Область.Имя, "П2100004_") Или СтрНачинаетсяС(Область.Имя, "П2100005_") Тогда 
			
			СформироватьСписокКодовТоваров(ТабличныйДокумент.Области[Лев(Область.Имя, 2) + "00"].Значение, "мСоставГруппТНВЭД");
			Если мСоставГруппДляВыбора.Количество() = 0 Тогда 
				Возврат;
			КонецЕсли;
			
			СтандартнаяОбработка = Ложь;
			
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("Заголовок", "Выбор кода");
			ОблКод = ТабличныйДокумент.Области[СтрЗаменить(Область.Имя, "100004_", "100005_")];
			
			ПараметрыФормы.Вставить("ТаблицаЗначений", мСоставГруппДляВыбора);
			ПараметрыФормы.Вставить("СтруктураДляПоиска", Новый Структура("Код", ОблКод.Значение));
			
			ДополнительныеПараметры = Новый Структура("Область, Элемент", ОблКод, Элемент);
			ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьФормумСоставГруппТНВЭДДляВыбораЗавершение", ЭтотОбъект, ДополнительныеПараметры);
			ОткрытьФорму("Обработка.ОбщиеОбъектыРеглОтчетности.Форма.ФормаВыбораЗначенияИзТаблицы", ПараметрыФормы, ЭтотОбъект,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормумСоставГруппОКПДДляВыбораЗавершение(Результат, ДополнительныеПараметры) Экспорт
	Область = ДополнительныеПараметры.Область;
	Элемент = ДополнительныеПараметры.Элемент;
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Результат.Код) Тогда 
		Результат.Код = "";
		Результат.Название = "";
	КонецЕсли;
	
	Область.Значение = Результат.Код;
	ТабличныйДокумент.Области[СтрЗаменить(Область.Имя, "100003_", "100002_")].Значение = Результат.Название;
	
	Модифицированность = Истина;
	ТабличныйДокументПриИзмененииСодержимогоОбласти(Элемент, Область);
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормумСоставГруппТНВЭДДляВыбораЗавершение(Результат, ДополнительныеПараметры) Экспорт
	Область = ДополнительныеПараметры.Область;
	Элемент = ДополнительныеПараметры.Элемент;
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Результат.Код) Тогда 
		Результат.Код = "";
		Результат.Название = "";
	КонецЕсли;
	
	Область.Значение = Результат.Код;
	ТабличныйДокумент.Области[СтрЗаменить(Область.Имя, "100005_", "100004_")].Значение = Результат.Название;
	
	Модифицированность = Истина;
	ТабличныйДокументПриИзмененииСодержимогоОбласти(Элемент, Область);
КонецПроцедуры

&НаКлиенте
Процедура СформироватьСписокКодовТоваров(Отбор, ИмяТаблицы)
	мСоставГруппДляВыбора.Очистить();
	Строки = ЭтаФорма[ИмяТаблицы].НайтиСтроки(Новый Структура("Отбор", Отбор));
	Если Строки.Количество() = 0 Тогда 
		Возврат;
	КонецЕсли;
	
	НовСтр = мСоставГруппДляВыбора.Добавить();
	НовСтр.Название = "Пустая строка";
	
	Для Каждого Стр Из Строки Цикл
		НовСтр = мСоставГруппДляВыбора.Добавить();
		НовСтр.Название = Стр.Название;
		НовСтр.Код = Стр.Код;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормумГруппыПоКлассификаторуЗавершение(Результат, ДополнительныеПараметры) Экспорт
	Область = ДополнительныеПараметры.Область;
	Элемент = ДополнительныеПараметры.Элемент;
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Область.Значение = Результат.Код;
	Ставки = мГруппыПоКлассификатору.НайтиСтроки(Новый Структура("Код", Результат.Код));
	Если Ставки.Количество() = 1 Тогда 
		Ставка = Ставки[0].Ставка;
		
		Инд = 0;
		Пока Истина Цикл 
			Инд = Инд + 1;
			Обл = ТабличныйДокумент.Области.Найти("П1100011_" + Формат(Инд, "ЧГ="));
			Если Обл = Неопределено Тогда 
				Прервать;
			КонецЕсли;
			Обл.Значение = Ставка;
		КонецЦикла;
		
		Инд = 0;
		Пока Истина Цикл 
			Инд = Инд + 1;
			Обл = ТабличныйДокумент.Области.Найти("П2100011_" + Формат(Инд, "ЧГ="));
			Если Обл = Неопределено Тогда 
				Прервать;
			КонецЕсли;
			Обл.Значение = Ставка;
		КонецЦикла;
	КонецЕсли;
	
	Модифицированность = Истина;
	ТабличныйДокументПриИзмененииСодержимогоОбласти(Элемент, Область);
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуРазмерПредприятия(Результат, ДополнительныеПараметры) Экспорт
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Область = ДополнительныеПараметры.Область;
	Элемент = ДополнительныеПараметры.Элемент;
	Область.Значение = Результат.Код;
	Модифицированность = Истина;
	ТабличныйДокументПриИзмененииСодержимогоОбласти(Элемент, Область);
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормумОрганыРПНЗавершение(Результат, ДополнительныеПараметры) Экспорт
	Область = ДополнительныеПараметры.Область;
	Элемент = ДополнительныеПараметры.Элемент;
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Область.Значение = ?(ПустаяСтрока(Результат.Код), "", Результат.Название);
	КодОрганаРПН = Результат.Код;
	Если Область.Имя = "ОргРПН" Тогда 
		ТабличныйДокумент.Области.Найти("КодОргРПН").Значение = КодОрганаРПН;
	КонецЕсли;
	
	Модифицированность = Истина;
	ТабличныйДокументПриИзмененииСодержимогоОбласти(Элемент, Область);
КонецПроцедуры

&НаКлиенте
Процедура ТабличныйДокументПриИзмененииСодержимогоОбласти(Элемент, Область)
	
	ИмяПоказателя = Область.Имя;
	ЗначПоказателя = Область.Значение;
	
	Если Область.Имя = "НомерКорректировки" Тогда 
		Если Область.Значение = 0 Тогда 
			СтруктураРеквизитовФормы.ВидДокумента = 0;
			НомерКорректировки = 0;
		Иначе 
			СтруктураРеквизитовФормы.ВидДокумента = 1;
			НомерКорректировки = Область.Значение;
		КонецЕсли;
		РегламентированнаяОтчетностьКлиентСервер.УстановитьЗначениеОКВЭД(ДатаПодписи,
																		 СтруктураРеквизитовФормы,
																		 ТабличныйДокумент.Области.П0400.Значение);
		Модифицированность = Истина;
		Возврат;
	ИначеЕсли Область.Имя = "ДатаПодписи" Тогда 
		ДатаПодписи = Область.Значение;
		СтруктураДанныхТитульный.Вставить("П0400", "");
		РегламентированнаяОтчетностьКлиентСервер.УстановитьЗначениеОКВЭД(ДатаПодписи,
																		 СтруктураРеквизитовФормы,
																		 СтруктураДанныхТитульный.П0400);
	КонецЕсли;
	
	Модифицированность = Истина;
	
	ИмяРаздела = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
	
	СохранитьЗначениеПоказателяВСтруктуре(ЭтотОбъект, ИмяРаздела, ИмяПоказателя, Область.Значение);
	
	РасчетНаКлиенте(ИмяРаздела, Область.Имя);
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьНаСервере() Экспорт
	
	ТаблицаСтраницыТовары.Очистить();
	ТаблицаСтраницыУпаковка.Очистить();
	
	ИнициализацияМногостраничныхРазделов();
	
	Для Каждого мнгРаздел Из мСтруктураМногострочныхРазделов Цикл
		ЭтотОбъект[мнгРаздел.Ключ].Очистить();
	КонецЦикла;
	
	НачальныеОперацииСМногострочнымиБлоками();
	
	ЗаполнитьПустыеСтруктурыДанных();
	
	Если НЕ СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
		ОчиститьТабличноеПолеНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	КонецЕсли;
		
	ВывестиМакетСтраницыВТабличныйДокументНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела, 1);
		
	СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
	
	РегламентированнаяОтчетностьКлиентСервер.ОчиститьВариантыЗаполнения(ЭтотОбъект);
	
	РасчетИтогов(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Заполнить(Команда)
	ЗаполнитьАвто();
	РегламентированнаяОтчетностьКлиент.ОбновитьДеревоРазделовВФормеОтчета(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьАвто()
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайлаЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ЗагрузитьИзФайлаОтчет();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайла(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузитьИзФайлаЗавершение", ЭтотОбъект);

	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередЗагрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайлаОтчет() Экспорт
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузитьИзФайлаОтчетЗавершение", ЭтотОбъект);
	
	Если Модифицированность Тогда
		СохранитьНаКлиенте(,ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайлаОтчетЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	РегламентированнаяОтчетностьЗагрузкаКлиент.ЗагрузитьИзФайлаОтчет(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Функция ЗагрузкаОтчетаИзФайла(ДанныеДляЗагрузки) Экспорт
	
	Если Модифицированность Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = СтрШаблон(НСтр("ru='Отчет ""%1"" не сохранен.'"), ЭтотОбъект.Заголовок);
		Сообщение.Сообщить();
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ ЗагрузкаОтчетаИзФайлаНаСервере(ДанныеДляЗагрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
		
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция ЗагрузкаОтчетаИзФайлаНаСервере(ДанныеДляЗагрузки)
	
	СформироватьСтруктуруПоказателей();
	
	ДеревоДляЗагрузки = РегламентированнаяОтчетность.ИзвлечьСтруктуруXML(ИмяФормы, "СхемаВыгрузкиXML2016Кв1");
	
	ПараметрыОтчета = СформироватьСтруктуруПараметров();
	
	Если НЕ РегламентированнаяОтчетностьЗагрузка.ЗагрузкаОтчетаИзФайла(
		ЭтотОбъект, ПараметрыОтчета, ДанныеДляЗагрузки, ДеревоДляЗагрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура Выгрузить(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьЗавершение", ЭтотОбъект);

	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьИзФормыПослеСохраненияЗавершение", ЭтотОбъект);
	Если Модифицированность Тогда
		СохранитьНаКлиенте(, ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьИзФормыПослеСохраненияЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ПараметрыВыгрузки = Неопределено;
	ТекстВыгрузки = Неопределено;
	Если НЕ УниверсальнаяВыгрузкаXMLПроверкаВозможностиВыгрузкиНаСервере(ТекстВыгрузки, ПараметрыВыгрузки) Тогда
		ТекстВопроса = НСтр("ru='В ходе выгрузки были найдены ошибки.'");
		КнопкиВопроса = Новый СписокЗначений;
		КнопкиВопроса.Добавить(КодВозвратаДиалога.Да, "Продолжить выгрузку");
		КнопкиВопроса.Добавить(КодВозвратаДиалога.Нет, "Показать ошибки");
		ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьИзФормыЗавершение", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, КнопкиВопроса, , КодВозвратаДиалога.Нет);
	Иначе
		ВыгрузитьОтчет();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьИзФормыЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ВыгрузитьОтчет(Истина);
	Иначе
		СпДокОсн = Новый СписокЗначений;
		СпДокОсн.Добавить(СтруктураРеквизитовФормы.мСохраненныйДок);
		ОшибкиОтчета = Новый Массив;
		РегламентированнаяОтчетностьКлиент.ПроверитьРегламентированныеОтчеты(СпДокОсн, ОшибкиОтчета);
		РегламентированнаяОтчетностьКлиент.ОткрытьФормуНавигацииПоОшибкамВыгрузки(ОшибкиОтчета);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузку(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьВыгрузкуЗавершение", ЭтотОбъект);

	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
		
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузкуЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПроверитьВыгрузкуОтчета();
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузкуОтчета()
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьВыгрузкуОтчетаЗавершение", ЭтотОбъект);
	
	Если НЕ ЗначениеЗаполнено(СтруктураРеквизитовФормы.Организация) Тогда
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Организация не выбрана! Выгрузка невозможна.'");
		Сообщение.Сообщить();
		Возврат;
		
	КонецЕсли;
	
	Если Модифицированность Тогда
		СохранитьНаКлиенте(,ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура ПроверитьВыгрузкуОтчетаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ФормаВыгрузкиРеглОтчета = ПолучитьФорму("Документ.ВыгрузкаРегламентированныхОтчетов.Форма.ФормаДокумента", , ЭтотОбъект);
	
	СпДокОсн = Новый СписокЗначений;
	СпДокОсн.Добавить(СтруктураРеквизитовФормы.мСохраненныйДок);
	
	ФормаВыгрузкиРеглОтчета.Проверить(СпДокОсн);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьОтчет(ВыгружатьСОшибками = Ложь) Экспорт
	
	ДополнительныеПараметры = Новый Структура("ВыгружатьСОшибками", ВыгружатьСОшибками);
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьОтчетЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	Если НЕ ЗначениеЗаполнено(СтруктураРеквизитовФормы.Организация) Тогда
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Организация не выбрана! Выгрузка невозможна.'");
		Сообщение.Сообщить();
		Возврат;
		
	КонецЕсли;
	
	Если Модифицированность Тогда
		СохранитьНаКлиенте(, ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура ВыгрузитьОтчетЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ФормаВыгрузкиРеглОтчета = ПолучитьФорму("Документ.ВыгрузкаРегламентированныхОтчетов.Форма.ФормаДокумента", , ЭтотОбъект);
	
	СпДокОсн = Новый СписокЗначений;
	СпДокОсн.Добавить(СтруктураРеквизитовФормы.мСохраненныйДок);
	
	ФормаВыгрузкиРеглОтчета.СформироватьИЗаписать(СпДокОсн,,,,,,,,,ДополнительныеПараметры.ВыгружатьСОшибками);
	
КонецПроцедуры

&НаСервере
Функция ПроверитьПоказатели() Экспорт
	
	СформироватьСтруктуруПоказателей();
	ДеревоВыгрузки = РегламентированнаяОтчетность.ИзвлечьСтруктуруXML(ИмяФормы, "СхемаВыгрузкиXML2016Кв1");
	ПараметрыВыгрузки = СформироватьСтруктуруПараметров();
	Если НЕ ПроверитьВозможностьВыгрузки(ПараметрыВыгрузки, ДеревоВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	ЗаполнитьДанными(ДеревоВыгрузки, ПараметрыВыгрузки);
	Если НЕ РегламентированнаяОтчетность.ПроверитьДанные(ЭтотОбъект, ДеревоВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция УниверсальнаяВыгрузкаXMLПроверкаВозможностиВыгрузкиНаСервере(ТекстВыгрузки, ПараметрыВыгрузки) Экспорт
	
	СформироватьСтруктуруПоказателей();
	ПараметрыВыгрузки = СформироватьСтруктуруПараметров();
	ДеревоВыгрузки = РегламентированнаяОтчетность.ИзвлечьСтруктуруXML(ИмяФормы, "СхемаВыгрузкиXML2016Кв1");
	Если НЕ ПроверитьВозможностьВыгрузки(ПараметрыВыгрузки, ДеревоВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция УниверсальнаяВыгрузкаXMLПроверкаДанныхНаСервере(ТекстВыгрузки, ПараметрыВыгрузки) Экспорт
	
	СформироватьСтруктуруПоказателей();
	ПараметрыВыгрузки = СформироватьСтруктуруПараметров();
	ДеревоВыгрузки = РегламентированнаяОтчетность.ИзвлечьСтруктуруXML(ИмяФормы, "СхемаВыгрузкиXML2016Кв1");
	ЗаполнитьДанными(ДеревоВыгрузки, ПараметрыВыгрузки);
	Если НЕ РегламентированнаяОтчетность.ПроверитьДанные(ЭтотОбъект, ДеревоВыгрузки) Тогда
		КоллекцияСписковВыбора = "";
		Возврат Ложь;
	КонецЕсли;
	
	ТекстВыгрузки = ВыгрузитьДеревоВXML(ДеревоВыгрузки, ПараметрыВыгрузки);
	
	КоллекцияСписковВыбора = "";
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Функция УниверсальнаяВыгрузка(ТекстВыгрузки = Неопределено, ПроверятьБлокировки = Истина, ИмяФайлаВыгрузки = "", ВыгружатьСОшибками = Ложь) Экспорт
	
	Перем ПараметрыВыгрузки;
	
	Если Модифицированность Тогда
		
		Если СтрНайти(Заголовок, СтруктураРеквизитовФормы.СтрПериодОтчета) = 0 Тогда
			ТекстЗаголовка = Заголовок + " за " + СтруктураРеквизитовФормы.СтрПериодОтчета;
		Иначе
			ТекстЗаголовка = Заголовок;
		КонецЕсли;
		
		ОргСтр = " (" + СтруктураРеквизитовФормы.НаимОрганизации + ")";
		Если СтрНайти(Заголовок, ОргСтр) = 0 Тогда
			ТекстЗаголовка = ТекстЗаголовка + ОргСтр;
		КонецЕсли;
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Отчет """ + ТекстЗаголовка + """ не сохранен.";
		Сообщение.Сообщить();
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Если НЕ ВыгружатьСОшибками И НЕ УниверсальнаяВыгрузкаXMLПроверкаВозможностиВыгрузкиНаСервере(ТекстВыгрузки, ПараметрыВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ УниверсальнаяВыгрузкаXMLПроверкаДанныхНаСервере(ТекстВыгрузки, ПараметрыВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ИмяФайлаВыгрузки = ПараметрыВыгрузки.ИмяФайла;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция ПроверитьВозможностьВыгрузки(ПараметрыВыгрузки, ДеревоВыгрузки)
	СтатусПроверки = Истина;
	СпПарам = "ОргРПН,КодОргРПН,ID_ORG,FNAME_ORG,SNAME_ORG,INN_ORG,ADDJ_OKATO,";
	СпПарам = СпПарам + "ADDJ_STREET,ОргКодОКВЭД,ADDR_JUR,ADDJ_INDEX,RPT_OKATO";
	
	Для Каждого Элт Из СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СпПарам, ",", Истина) Цикл 
		Если Не ЗначениеЗаполнено(ПараметрыВыгрузки[Элт]) Тогда 
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "Не заполнен обязательный показатель!", "ПолеТабличногоДокументаТитульный", Элт);
			СтатусПроверки = Ложь;
		КонецЕсли;
	КонецЦикла;
	Возврат СтатусПроверки;
КонецФункции

&НаСервере
Функция СкопироватьУзел(Родитель, Узел)
	
	НовыйУзел = Родитель.Строки.Добавить();
	ЗаполнитьЗначенияСвойств(НовыйУзел, Узел, , "Родитель, Строки");
	Для Каждого Стр из Узел.Строки Цикл
		СкопироватьУзел(НовыйУзел, Стр);
	КонецЦикла;
	Возврат НовыйУзел;
	
КонецФункции

&НаСервере
Функция ПолучитьПодчиненныйЭлемент(Узел, КодЭлемента)
	
	Для Каждого Стр Из Узел.Строки Цикл
		Если Стр.Код = КодЭлемента Тогда
			Возврат Стр;
		КонецЕсли;
	КонецЦикла;
	
КонецФункции

&НаСервере
Функция НовыйУзелИзПрототипа(ПрототипУзла);
	
	РодительУзла = ПрототипУзла.Родитель;
	
	ПозицияИсходногоУзла = РодительУзла.Строки.Индекс(ПрототипУзла);
	НовыйУзел = РодительУзла.Строки.Вставить(ПозицияИсходногоУзла);
	ЗаполнитьЗначенияСвойств(НовыйУзел, ПрототипУзла, , "Родитель, Строки");
	Для Каждого Стр из ПрототипУзла.Строки Цикл
		РегламентированнаяОтчетность.СкопироватьУзел(НовыйУзел, Стр);
	КонецЦикла;
	
	Возврат НовыйУзел;
	
КонецФункции

&НаСервере
Процедура УстановитьЗначениеЭлемента(УзелРодитель, ИмяЭлемента, ЗначениеЭлемента)
	
	ПодчиненныйЭлемент = ПолучитьПодчиненныйЭлемент(УзелРодитель, ИмяЭлемента);
	ВывестиПоказательВXML(ПодчиненныйЭлемент, ЗначениеЭлемента);
	
КонецПроцедуры

&НаСервере
Функция ВывестиПоказательВXML(Узел, ЗначениеПоказателя)
	
	МинШирина = Узел.МинРазмерность;
	МаксШирина = Узел.МаксРазмерность;
	
	Если Узел.Формат = "T" ИЛИ Узел.Формат = "Т" Тогда // учтем оба варианта: кириллицу и латиницу
		Узел.Значение = ?(МаксШирина < СтрДлина(СокрЛП(ЗначениеПоказателя)), СокрЛП(Лев(СокрЛП(ЗначениеПоказателя), МаксШирина)), СокрЛП(ЗначениеПоказателя));
	ИначеЕсли Узел.Формат = "N" Тогда
		СтрокаФормата = "ЧРД=.;ЧН=0;ЧГ=;";
		Если Узел.МаксРазмерность <> 0 И Узел.МаксРазмерность <> 99999 Тогда
			СтрокаФормата = СтрокаФормата + "ЧЦ=" + Формат(Узел.МаксРазмерность, "ЧГ=") + ";";
		КонецЕсли;
		Если Узел.МинРазмерность <> 99999 Тогда
			СтрокаФормата = СтрокаФормата + "ЧДЦ=" + Формат(Узел.МинРазмерность, "ЧГ=") + ";";
		КонецЕсли;
		Узел.Значение = СокрЛП(Формат(ЗначениеПоказателя, СтрокаФормата));
	ИначеЕсли Узел.Формат = "gYear" Тогда
		Если ТипЗнч(ЗначениеПоказателя) = Тип("Дата") Тогда
			Узел.Значение = СокрЛП(Формат(ЗначениеПоказателя, "ДФ=гггг"));
		Иначе
			Узел.Значение = Прав(СокрЛП(ЗначениеПоказателя), 4);
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ДополнитьПараметрыВыгрузки(ПараметрыВыгрузки)
	ПараметрыВыгрузки.Вставить("SEP_DIV_BOOL", ?(ПараметрыВыгрузки.SEP_DIV = Истина, 1, 0));
	ПараметрыВыгрузки.Вставить("FINDIVID_BOOL", ?(ПараметрыВыгрузки.FINDIVID = Истина, 1, 0));
	ПараметрыВыгрузки.Вставить("CREATE_DATE_STR", Формат(ПараметрыВыгрузки.ДатаСоставленияОтчета, "ДФ=yyyy-MM-dd"));
	ПараметрыВыгрузки.Вставить("REG_DATE_STR", Формат(ПараметрыВыгрузки.REG_DATE, "ДФ=yyyy-MM-dd"));
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанными(ДеревоВыгрузки, ПараметрыВыгрузки)
	ДополнитьПараметрыВыгрузки(ПараметрыВыгрузки);
	ОбработатьУсловныеЭлементы(ПараметрыВыгрузки, ДеревоВыгрузки);
	ЗаполнитьДаннымиУзел(ПараметрыВыгрузки, ДеревоВыгрузки);
	
	Узел_Док = ПолучитьПодчиненныйЭлемент(ДеревоВыгрузки, "DATA_PACKET_NI");
	Узел_Док = ПолучитьПодчиненныйЭлемент(Узел_Док, "ORG_INFO");
	Узел_Док = ПолучитьПодчиненныйЭлемент(Узел_Док, "RPT_CALC_UTIL");
	Узел_Вещество = ПолучитьПодчиненныйЭлемент(Узел_Док, "RPT_CALC_UTIL_FACT");
	ДанныеОтчета = ПараметрыВыгрузки.мСохраненныйДок.ДанныеОтчета.Получить();
	
	Для Каждого Стр Из ДанныеОтчета.ДанныеМногостраничныхРазделов.Товары Цикл
		Для Каждого СтрМнг Из Стр.ДанныеДопСтрок.П11000 Цикл
			Если Не ЗначениеЗаполнено(СтрМнг.П1100003) И Не ЗначениеЗаполнено(СтрМнг.П1100005) Тогда 
				Продолжить;
			КонецЕсли;
			НовыйУзел_Вещество = НовыйУзелИзПрототипа(Узел_Вещество);
			
			УстановитьЗначениеЭлемента(НовыйУзел_Вещество, "PRODUCT_TYPE", "0");
			УстановитьЗначениеЭлемента(НовыйУзел_Вещество, "EI", "кг");
			УстановитьЗначениеЭлемента(НовыйУзел_Вещество, "OKPD_NAME", СтрМнг.П1100002);
			УстановитьЗначениеЭлемента(НовыйУзел_Вещество, "OKPD_CODE", СтрМнг.П1100003);
			УстановитьЗначениеЭлемента(НовыйУзел_Вещество, "TNVD_NAME", СтрМнг.П1100004);
			УстановитьЗначениеЭлемента(НовыйУзел_Вещество, "TNVD_CODE", СтрМнг.П1100005);
			УстановитьЗначениеЭлемента(НовыйУзел_Вещество, "GOODS_VALUE", СтрМнг.П1100006);
			УстановитьЗначениеЭлемента(НовыйУзел_Вещество, "UTIL_RATIO", СтрМнг.П1100007);
			УстановитьЗначениеЭлемента(НовыйУзел_Вещество, "CHARGE_RATE", СтрМнг.П1100011);
			УстановитьЗначениеЭлемента(НовыйУзел_Вещество, "GOODS_UTIL_VALUE", СтрМнг.П1100008);
			УстановитьЗначениеЭлемента(НовыйУзел_Вещество, "WASTE_UTIL_VALUE", СтрМнг.П1100009);
			УстановитьЗначениеЭлемента(НовыйУзел_Вещество, "WASTE_NN_UTIL_VALUE", СтрМнг.П1100010);
			УстановитьЗначениеЭлемента(НовыйУзел_Вещество, "SUM_ECO", СтрМнг.П1100012);
		КонецЦикла;
	КонецЦикла;
	
	Для Каждого Стр Из ДанныеОтчета.ДанныеМногостраничныхРазделов.Упаковка Цикл
		Для Каждого СтрМнг Из Стр.ДанныеДопСтрок.П21000 Цикл
			Если Не ЗначениеЗаполнено(СтрМнг.П2100003) И Не ЗначениеЗаполнено(СтрМнг.П2100005) Тогда 
				Продолжить;
			КонецЕсли;
			НовыйУзел_Вещество = НовыйУзелИзПрототипа(Узел_Вещество);
			
			УстановитьЗначениеЭлемента(НовыйУзел_Вещество, "PRODUCT_TYPE", "1");
			УстановитьЗначениеЭлемента(НовыйУзел_Вещество, "EI", "кг");
			УстановитьЗначениеЭлемента(НовыйУзел_Вещество, "OKPD_NAME", СтрМнг.П2100002);
			УстановитьЗначениеЭлемента(НовыйУзел_Вещество, "OKPD_CODE", СтрМнг.П2100003);
			УстановитьЗначениеЭлемента(НовыйУзел_Вещество, "TNVD_NAME", СтрМнг.П2100004);
			УстановитьЗначениеЭлемента(НовыйУзел_Вещество, "TNVD_CODE", СтрМнг.П2100005);
			УстановитьЗначениеЭлемента(НовыйУзел_Вещество, "GOODS_VALUE", СтрМнг.П2100006);
			УстановитьЗначениеЭлемента(НовыйУзел_Вещество, "UTIL_RATIO", СтрМнг.П2100007);
			УстановитьЗначениеЭлемента(НовыйУзел_Вещество, "CHARGE_RATE", СтрМнг.П2100011);
			УстановитьЗначениеЭлемента(НовыйУзел_Вещество, "GOODS_UTIL_VALUE", СтрМнг.П2100008);
			УстановитьЗначениеЭлемента(НовыйУзел_Вещество, "WASTE_UTIL_VALUE", СтрМнг.П2100009);
			УстановитьЗначениеЭлемента(НовыйУзел_Вещество, "WASTE_NN_UTIL_VALUE", СтрМнг.П2100010);
			УстановитьЗначениеЭлемента(НовыйУзел_Вещество, "SUM_ECO", СтрМнг.П2100012);
		КонецЦикла;
	КонецЦикла;
	
	РегламентированнаяОтчетность.УдалитьУзел(Узел_Вещество);
	
	ОтсечьНезаполненныеНеобязательныеУзлы(ДеревоВыгрузки);
КонецПроцедуры

&НаСервере
Функция ИмеютсяАналогичныеСоседниеУзлы(Стр)
	
	Возврат (Стр.Родитель.Строки.НайтиСтроки(Новый Структура("Ключ, Раздел", Стр.Ключ, Стр.Раздел), Ложь).Количество() > 1);
	
КонецФункции

&НаСервере
Процедура ОтсечьНезаполненныеНеобязательныеУзлы(Узел)
	
	КоличествоСтрок = Узел.Строки.Количество();
	Для Инд = 1 По КоличествоСтрок Цикл
		Стр = Узел.Строки.Получить(КоличествоСтрок - Инд);
		ОтсечьНезаполненныеНеобязательныеУзлы(Стр);
	КонецЦикла;
	
	Если ТипЗнч(Узел) <> Тип("ДеревоЗначений") Тогда
		Если (СтрНайти(Узел.Тип, "A") <> 0 ИЛИ СтрНайти(Узел.Тип, "А") <> 0) // Необязательные атрибуты пропускаем (они удаляются только вместе с узлом)
			И (СтрНайти(Узел.Обязательность, "Н") <> 0 ИЛИ СтрНайти(Узел.Обязательность, "H") <> 0) Тогда // учтем оба варианта: кириллицу и латиницу
			Возврат;
		КонецЕсли;
		
		Если (СтрНайти(Узел.Обязательность, "Н") <> 0 ИЛИ СтрНайти(Узел.Обязательность, "H") <> 0) И РегламентированнаяОтчетность.УзелПуст(Узел) Тогда // учтем оба варианта: кириллицу и латиницу
			РегламентированнаяОтчетность.УдалитьУзел(Узел);
		ИначеЕсли (СтрНайти(Узел.Обязательность, "М") <> 0 ИЛИ СтрНайти(Узел.Обязательность, "M") <> 0) // учтем оба варианта: кириллицу и латиницу
			И РегламентированнаяОтчетность.УзелПуст(Узел)
			И ?(СтрНайти(Узел.Обязательность, "О") <> 0 ИЛИ СтрНайти(Узел.Обязательность, "O") <> 0, ИмеютсяАналогичныеСоседниеУзлы(Узел), Истина) Тогда
			РегламентированнаяОтчетность.УдалитьУзел(Узел);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьУсловныеЭлементы(Знач ПараметрыВыгрузки, Узел)
	
	Если ТипЗнч(Узел) <> Тип("ДеревоЗначений") Тогда
		Если Узел.Код = ПараметрыВыгрузки.ИмяКлючевогоУзлаСодержательнойЧасти Тогда
			Возврат;
		КонецЕсли;
		РегламентированнаяОтчетность.ДополнитьСтруктуруПараметров(мДанныеОтчета, ПараметрыВыгрузки, Узел);
	КонецЕсли;
	КоличествоСтрок = Узел.Строки.Количество();
	Для Инд = 1 По КоличествоСтрок Цикл
		ТекСтр = Узел.Строки.Получить(КоличествоСтрок - Инд);
		Если НЕ ПустаяСтрока(ТекСтр.Условие) Тогда
			Если НЕ РегламентированнаяОтчетность.УсловиеВыполнено(ЭтотОбъект, ПараметрыВыгрузки, ТекСтр.Условие) Тогда
				Узел.Строки.Удалить(ТекСтр);
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		ОбработатьУсловныеЭлементы(ПараметрыВыгрузки, ТекСтр);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДаннымиУзел(ПараметрыВыгрузки, Узел, НомерСтроки = Неопределено)
	
	СтрокиУзла = Новый Массив;
	Для Каждого Стр Из Узел.Строки Цикл
		СтрокиУзла.Добавить(Стр);
	КонецЦикла;
	
	Для Каждого Стр из СтрокиУзла Цикл
		
		Если ПустаяСтрока(Стр.ЗначениеПоУмолчанию) Тогда
			Если НЕ ПустаяСтрока(Стр.Ключ) Тогда
				ПолныйКодПоказателя = Стр.Ключ + ?(ЗначениеЗаполнено(НомерСтроки), "_" + Формат(НомерСтроки, "ЧГ="), "");
				ЗначениеПоказателя = Неопределено;
				Если ПараметрыВыгрузки.Свойство(ПолныйКодПоказателя, ЗначениеПоказателя) Тогда
					ФорматПредставленияНуля = Неопределено;
					Если ПараметрыВыгрузки.Свойство("ЧН" + ПолныйКодПоказателя, ФорматПредставленияНуля) Тогда
						РегламентированнаяОтчетность.ВывестиПоказательСтатистикиВXML(Стр, ЗначениеПоказателя, ФорматПредставленияНуля);
					Иначе
						РегламентированнаяОтчетность.ВывестиПоказательСтатистикиВXML(Стр, ЗначениеПоказателя);
					КонецЕсли;
				Иначе
					РегламентированнаяОтчетность.ВывестиПоказательСтатистикиВXML(Стр, "");
				КонецЕсли;
			Иначе
				Стр.Значение = "";
			КонецЕсли;
		ИначеЕсли Лев(Стр.ЗначениеПоУмолчанию, 1) = "&" Тогда
			РегламентированнаяОтчетность.ВывестиПоказательСтатистикиВXML(Стр, ПараметрыВыгрузки[Сред(Стр.ЗначениеПоУмолчанию, 2)]);
		Иначе
			Стр.Значение = Стр.ЗначениеПоУмолчанию;
			Если НЕ ПустаяСтрока(Стр.Ключ) Тогда
				ПолныйКодПоказателя = Стр.Ключ + ?(ЗначениеЗаполнено(НомерСтроки), "_" + Формат(НомерСтроки, "ЧГ="), "");
				ЗначениеПоказателя = Неопределено;
				Если ПараметрыВыгрузки.Свойство(ПолныйКодПоказателя, ЗначениеПоказателя) Тогда
					ФорматПредставленияНуля = Неопределено;
					Если ПараметрыВыгрузки.Свойство("ЧН" + ПолныйКодПоказателя, ФорматПредставленияНуля) Тогда
						РегламентированнаяОтчетность.ВывестиПоказательСтатистикиВXML(Стр, ЗначениеПоказателя, ФорматПредставленияНуля);
					Иначе
						РегламентированнаяОтчетность.ВывестиПоказательСтатистикиВXML(Стр, ЗначениеПоказателя);
					КонецЕсли;
				Иначе
					РегламентированнаяОтчетность.ВывестиПоказательСтатистикиВXML(Стр, "");
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если Стр.Тип = "С" ИЛИ Стр.Тип = "C" Тогда // учтем оба варианта: кириллицу и латиницу
			Если Стр.Многостраничность Тогда
				ЛистыМногостраничногоРаздела = Неопределено;
				Если Не ПустаяСтрока(Стр.Раздел) И мДанныеОтчета.Свойство(Стр.Раздел, ЛистыМногостраничногоРаздела) Тогда
					Для Каждого Лист Из ЛистыМногостраничногоРаздела Цикл
						ДанныеЛиста = Лист.Данные[0].Значение;
						ДанныеЛиста.Вставить("ИмяКлючевогоУзлаСодержательнойЧасти","");
						
						ИндексЛиста = ЛистыМногостраничногоРаздела.Индекс(Лист);
						
						Если Стр.Многострочность Тогда
							НомСтр = 1;
							ПодчиненныйЭлемент = РегламентированнаяОтчетность.ПолучитьПервыйПодчиненныйУзелСЗаполненнымКлючом(Стр);
							КлючПодчиненногоЭлемента = ПодчиненныйЭлемент.Ключ;
							Пока РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(ДанныеЛиста, КлючПодчиненногоЭлемента + "_" + Формат(НомСтр, "ЧГ=")) Цикл
								УзелСоответствующийСтроке = РегламентированнаяОтчетность.СкопироватьУзел(Узел, Стр);
								ЗаполнитьДаннымиУзел(ДанныеЛиста, УзелСоответствующийСтроке, НомСтр);
								НомСтр = НомСтр + 1;
							КонецЦикла;
						Иначе
							УзелМногостраничногоРаздела = РегламентированнаяОтчетность.СкопироватьУзел(Узел, Стр);
							ЗаполнитьДаннымиУзел(ДанныеЛиста, УзелМногостраничногоРаздела);
						КонецЕсли;
					КонецЦикла;
				Иначе
					ЗаполнитьДаннымиУзел(ПараметрыВыгрузки, Стр);
				КонецЕсли;
			ИначеЕсли Стр.Многострочность Тогда
				НомСтр = 1;
				ПодчиненныйЭлемент = РегламентированнаяОтчетность.ПолучитьПервыйПодчиненныйУзелСЗаполненнымКлючом(Стр);
				КлючПодчиненногоЭлемента = ПодчиненныйЭлемент.Ключ;
				Пока РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(ПараметрыВыгрузки, КлючПодчиненногоЭлемента + "_" + Формат(НомСтр, "ЧГ=")) Цикл
					УзелСоответствующийСтроке = РегламентированнаяОтчетность.СкопироватьУзел(Узел, Стр);
					ЗаполнитьДаннымиУзел(ПараметрыВыгрузки, УзелСоответствующийСтроке, НомСтр);
					НомСтр = НомСтр + 1;
				КонецЦикла;
			Иначе
				ЗаполнитьДаннымиУзел(ПараметрыВыгрузки, Стр, НомерСтроки);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ВыгрузитьДеревоВXML(ДеревоВыгрузки, ПараметрыВыгрузки)
	
	ПотокXML = СоздатьНовыйПотокXML(); // создаем новый поток для записи
	РегламентированнаяОтчетность.ЗаписатьУзелДереваВXML(ДеревоВыгрузки, ПотокXML, ПараметрыВыгрузки); // пишем дерево в поток
	ТекстДляЗаписи = ПотокXML.Закрыть(); // получаем текст XML
	
	Возврат ТекстДляЗаписи;
	
КонецФункции

&НаСервере
Функция СоздатьНовыйПотокXML() Экспорт
	
	ПотокXML = Новый ЗаписьXML();
	ПотокXML.Отступ = Истина;
	ПотокXML.УстановитьСтроку("utf-8");
	ПотокXML.ЗаписатьОбъявлениеXML();
	Возврат ПотокXML;
	
КонецФункции

&НаСервере
Функция СформироватьИмяФайла(ПараметрыВыгрузки)
	
	Перем ПолученноеЗначение;
	
	ИмяФайлаXML = ПараметрыВыгрузки.ОргКодСубъект + "_рэс_"
				+ Лев(ПараметрыВыгрузки.НаименованиеОрг, 25) + "_"
				+ ПараметрыВыгрузки.ОтчетныйГод + "_год_"
				+ Формат(ТекущаяДатаСеанса(), "ДФ=yyyy-MM-dd_HH-mm-ss")
				+ ".xml";
	
	Возврат ИмяФайлаXML;
	
КонецФункции

&НаСервере
Функция СформироватьСтруктуруПоказателей()
	
	мДанныеОтчета = Новый Структура;
	
	СохрСтруктура = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить();
	ПоказателиОтчета = СохрСтруктура.ПоказателиОтчета;
	Для Каждого Раздел Из ПоказателиОтчета Цикл
		мДанныеОтчета.Вставить(Раздел.Ключ, РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(Раздел.Значение));
	КонецЦикла;
	
	Для Каждого ЭлементСтруктуры Из СохрСтруктура.ДанныеМногостраничныхРазделов Цикл	
		
		НайденноеЗначение = Неопределено;
		
		мСтруктураМногостраничныхРазделов.Свойство(ЭлементСтруктуры.Ключ, НайденноеЗначение);
		
		Если НЕ НайденноеЗначение = Неопределено Тогда
			
			НайденноеЗначение = ЭтотОбъект[НайденноеЗначение];
			
			ЗначениеВДанныеФормы(ЭлементСтруктуры.Значение, НайденноеЗначение);
			
			Если НайденноеЗначение[0].Свойство("Данные") Тогда
				
				Для Каждого СтрокаТаблЗнач Из НайденноеЗначение Цикл
					
					Если ТипЗнч(СтрокаТаблЗнач.Данные) = Тип("СписокЗначений") Тогда
						
						СтрокаТаблЗнач.Данные.Очистить();
						СтрокаТаблЗнач.Данные.Добавить(ЭлементСтруктуры.Значение[НайденноеЗначение.Индекс(СтрокаТаблЗнач)].Данные);
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
			Если НайденноеЗначение[0].Свойство("ДанныеДопСтрок") Тогда
				
				Ном = 0;
				
				Для Каждого СтрокаТаблЗнач Из ЭлементСтруктуры.Значение Цикл
					
					Если ТипЗнч(СтрокаТаблЗнач.ДанныеДопСтрок) = Тип("Структура") Тогда
						СохранятьМногострКакТЗ = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСвойствоРаздела(ЭтотОбъект, ЭлементСтруктуры.Ключ, "СохранятьМногострКакТЗ");
						Если Не СохранятьМногострКакТЗ Тогда 
							НЗ = НайденноеЗначение[Ном].ДанныеДопСтрок.Добавить(Новый Структура, "ДанныеФормыКоллекцияТаблицаДопСтрокРаздела");
						КонецЕсли;
						
						Для Каждого ЭлСтруктуры Из СтрокаТаблЗнач.ДанныеДопСтрок Цикл
							
							Если СохранятьМногострКакТЗ Тогда 
								ТаблЗнач = ЭлСтруктуры.Значение;
								ЭлСтруктуры.Значение = ЭтотОбъект["Хранилище" + ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ЭлементСтруктуры.Ключ)].Добавить().Таблица;
								ЗначениеВДанныеФормы(ТаблЗнач, ЭлСтруктуры.Значение);
								НайденноеЗначение[Ном].ДанныеДопСтрок.Добавить(ЭлСтруктуры.Значение);
							Иначе
								СтрокаТаблЗначДанныеДопСтрок = ЭтотОбъект["Хранилище" + ЭлСтруктуры.Ключ].Добавить().Таблица;
								ЗначениеВДанныеФормы(ЭлСтруктуры.Значение, СтрокаТаблЗначДанныеДопСтрок);
								НЗ.Значение.Вставить(ЭлСтруктуры.Ключ, СтрокаТаблЗначДанныеДопСтрок);
							КонецЕсли;
							
						КонецЦикла;
						
					ИначеЕсли ТипЗнч(СтрокаТаблЗнач.ДанныеДопСтрок) = Тип("ТаблицаЗначений") Тогда
						
						СтрокаТаблЗначДанныеДопСтрок = ЭтотОбъект["Хранилище" + ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ЭлементСтруктуры.Ключ)].Добавить().Таблица;
						
						ЗначениеВДанныеФормы(СтрокаТаблЗнач.ДанныеДопСтрок, СтрокаТаблЗначДанныеДопСтрок);
						
						НайденноеЗначение[Ном].ДанныеДопСтрок.Добавить(СтрокаТаблЗначДанныеДопСтрок, "ДанныеФормыКоллекцияТаблицаДопСтрокРаздела");
						
					КонецЕсли;
					
					Ном = Ном + 1;
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого Раздел Из мСтруктураМногостраничныхРазделов Цикл
		ТаблицаЛистовРаздела = ЭтотОбъект[Раздел.Значение];
		Для Каждого Лист Из ТаблицаЛистовРаздела Цикл
			Лист.Данные[0].Значение = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(Лист.Данные[0].Значение);
		КонецЦикла;
		мДанныеОтчета.Вставить("ПолеТабличногоДокумента" + Раздел.Ключ, ЭтотОбъект[Раздел.Значение]);
	КонецЦикла;
	
КонецФункции

&НаСервере
Функция СформироватьСтруктуруПараметров()
	
	Перем ПолученноеЗначение;
	
	ТабДокументТитульный = мДанныеОтчета.ПолеТабличногоДокументаТитульный;
	
	СтрокаСведений = "ОКАТО, ОКПО, ОГРН, ТипНП, ДатаРегистрации, ИННЮЛ, КППЮЛ, НаимЮЛПол, АдрЮР, АдрФакт, АдрПочт, ИННФЛ,";
	СтрокаСведений = СтрокаСведений + "ОргИндекс, ОргСубъект, ОргРайон, ОргГород, ОргУлица, ОргДом, ОргКорпус, ОргКвартира,";
	СтрокаСведений = СтрокаСведений + "БанкСчетНомер, БанкСчетНаимБанка, БанкСчетКоррСчетБанка, БанкСчетБИКБанка,ОргКодСубъект,";
	СтрокаСведений = СтрокаСведений + "ТелОрганизации, ФаксОрганизации, ЭлектроннаяПочта, ФИОРук, ТелРук, ФИОБух, ТелБух";
	
	СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(СтруктураРеквизитовФормы.Организация, СтруктураРеквизитовФормы.мСохраненныйДок.ДатаПодписи, СтрокаСведений);
	
	ПараметрыВыгрузки = Новый Структура("мСохраненныйДок", СтруктураРеквизитовФормы.мСохраненныйДок);
	
	ЭтоКорректирующийРасчет = ЗначениеЗаполнено(ТабДокументТитульный.НомерКорректировки);
	
	Если ЭтоКорректирующийРасчет Тогда
		ПараметрыВыгрузки.Вставить("ВидРасчета",       2);
		ПараметрыВыгрузки.Вставить("НомерКорректировки", ТабДокументТитульный.НомерКорректировки);
	Иначе
		ПараметрыВыгрузки.Вставить("ВидРасчета",       1);
		ПараметрыВыгрузки.Вставить("НомерКорректировки", 0);
	КонецЕсли;
	
	ПараметрыВыгрузки.Вставить("ПредставляетсяВ", ТабДокументТитульный.ОрганРПН);
	
	ПараметрыВыгрузки.Вставить("ДатаФормирования", Формат(ТекущаяДатаСеанса(), "ДФ=yyyy-MM-ddTHH:mm:ssZ"));
	ПараметрыВыгрузки.Вставить("ОтчетныйГод",      СокрЛП(ТабДокументТитульный.Период));
	ПараметрыВыгрузки.Вставить("КодОрганаРПН",     КодОрганаРПН);
	
	ПараметрыВыгрузки.Вставить("ИдентификаторДок", СтрЗаменить(СтруктураРеквизитовФормы.мСохраненныйДок.УникальныйИдентификатор(), "-", "0"));
	ПараметрыВыгрузки.Вставить("ИдентификаторОрг", СтрЗаменить(СтруктураРеквизитовФормы.Организация.УникальныйИдентификатор(), "-", "0"));
	НаименованиеОрг = "";
	Для Ном = 1 По СтрДлина(СтруктураРеквизитовФормы.Организация.Наименование) Цикл
		Сим = Сред(СтруктураРеквизитовФормы.Организация.Наименование, Ном, 1);
		Если СтрНайти("[/?\:*""><|]';", Сим) = 0 Тогда
			НаименованиеОрг = НаименованиеОрг + Сим;
		КонецЕсли;
	КонецЦикла;
	ПараметрыВыгрузки.Вставить("НаименованиеОрг", СокрЛП(НаименованиеОрг));
	ПараметрыВыгрузки.Вставить("ПолнНаименованиеОрг", СокрЛП(СведенияОбОрганизации.НаимЮЛПол));
	
	ПараметрыВыгрузки.Вставить("ПризнакИЛ", ?(СведенияОбОрганизации.ТипНП = 5, "true", "false"));
	ПараметрыВыгрузки.Вставить("ПризнакОП", ?(СведенияОбОрганизации.ТипНП = 2, 1, 0));
	ПараметрыВыгрузки.Вставить("ДатаРегистрации", Формат(СведенияОбОрганизации.ДатаРегистрации, "ДФ=yyyy-MM-dd"));
	ПараметрыВыгрузки.Вставить("ДатаПодписиДок",  СтруктураРеквизитовФормы.мСохраненныйДок.ДатаПодписи);
	
	Если РегламентированнаяОтчетностьПереопределяемый.ЭтоЮридическоеЛицо(СтруктураРеквизитовФормы.Организация) Тогда 
		ПараметрыВыгрузки.Вставить("ОГРН",  СокрЛП(ТабДокументТитульный.П0205));
		ПараметрыВыгрузки.Вставить("ИННЮЛ", СокрЛП(ТабДокументТитульный.П0202));
		ПараметрыВыгрузки.Вставить("КППЮЛ", СокрЛП(ТабДокументТитульный.П0203));
		ПараметрыВыгрузки.Вставить("АдрПочт", СокрЛП(ТабДокументТитульный.П0204));
	Иначе
		ПараметрыВыгрузки.Вставить("НаименованиеОрг", СокрЛП(ТабДокументТитульный.П0301));
		ПараметрыВыгрузки.Вставить("ПолнНаименованиеОрг", СокрЛП(ТабДокументТитульный.П0301));
		ПараметрыВыгрузки.Вставить("ОГРН",  СокрЛП(ТабДокументТитульный.П0304));
		ПараметрыВыгрузки.Вставить("ИННЮЛ", СокрЛП(ТабДокументТитульный.П0302));
		ПараметрыВыгрузки.Вставить("АдрПочт", СокрЛП(ТабДокументТитульный.П0303));
	КонецЕсли;
	
	ПараметрыВыгрузки.Вставить("ОКАТО", СокрЛП(ТабДокументТитульный.П0600));
	ПараметрыВыгрузки.Вставить("ОКВЭД", СокрЛП(ТабДокументТитульный.П0400));
	ПараметрыВыгрузки.Вставить("ОКПО",  СокрЛП(СведенияОбОрганизации.ОКПО));
	
	ПараметрыВыгрузки.Вставить("ФИОРук", СокрЛП(СведенияОбОрганизации.ФИОРук));
	ПараметрыВыгрузки.Вставить("ТелРук", СокрЛП(СведенияОбОрганизации.ТелРук));
	ПараметрыВыгрузки.Вставить("ФИОБух", СокрЛП(СведенияОбОрганизации.ФИОБух));
	ПараметрыВыгрузки.Вставить("ТелБух", СокрЛП(СведенияОбОрганизации.ТелБух));
	
	ПараметрыВыгрузки.Вставить("АдрЮРИндекс", СокрЛП(СведенияОбОрганизации.ОргИндекс));
	ПараметрыВыгрузки.Вставить("ИДОрг", СокрЛП(СведенияОбОрганизации.ИННЮЛ + СведенияОбОрганизации.ОГРН + СведенияОбОрганизации.КППЮЛ));
	
	АдрЮРНасПункт = СокрЛП(СведенияОбОрганизации.ОргСубъект);
	АдрЮРНасПункт = АдрЮРНасПункт + ?(ПустаяСтрока(АдрЮРНасПункт) ИЛИ ПустаяСтрока(СведенияОбОрганизации.ОргРайон), "", ", ") + СокрЛП(СведенияОбОрганизации.ОргРайон);
	АдрЮРНасПункт = АдрЮРНасПункт + ?(ПустаяСтрока(АдрЮРНасПункт) ИЛИ ПустаяСтрока(СведенияОбОрганизации.ОргГород), "", ", ") + СокрЛП(СведенияОбОрганизации.ОргГород);
	ПараметрыВыгрузки.Вставить("АдрЮРНасПункт", АдрЮРНасПункт);
	
	АдрЮРУлицаДом = СокрЛП(СведенияОбОрганизации.ОргУлица);
	АдрЮРУлицаДом = АдрЮРУлицаДом + ?(ПустаяСтрока(АдрЮРУлицаДом) ИЛИ ПустаяСтрока(СведенияОбОрганизации.ОргДом), "", ", ") + СокрЛП(СведенияОбОрганизации.ОргДом);
	АдрЮРУлицаДом = АдрЮРУлицаДом + ?(ПустаяСтрока(АдрЮРУлицаДом) ИЛИ ПустаяСтрока(СведенияОбОрганизации.ОргКорпус), "", ", ") + СокрЛП(СведенияОбОрганизации.ОргКорпус);
	АдрЮРУлицаДом = АдрЮРУлицаДом + ?(ПустаяСтрока(АдрЮРУлицаДом) ИЛИ ПустаяСтрока(СведенияОбОрганизации.ОргКвартира), "", ", ") + СокрЛП(СведенияОбОрганизации.ОргКвартира);
	ПараметрыВыгрузки.Вставить("АдрЮРУлицаДом", АдрЮРУлицаДом);
	
	ПараметрыВыгрузки.Вставить("АдрЮР2",  ?(ЗначениеЗаполнено(СтрЗаменить(СведенияОбОрганизации.АдрЮР, ",","")),
		РегламентированнаяОтчетностьКлиентСервер.ПредставлениеАдресаВФормате9Запятых(СведенияОбОрганизации.АдрЮР),   ""));
	ПараметрыВыгрузки.Вставить("АдрФакт", ?(ЗначениеЗаполнено(СтрЗаменить(СведенияОбОрганизации.АдрФакт, ",","")),
		РегламентированнаяОтчетностьКлиентСервер.ПредставлениеАдресаВФормате9Запятых(СведенияОбОрганизации.АдрФакт), ""));
		
	ПараметрыВыгрузки.Вставить("ФаксОрганизации",       СокрЛП(СведенияОбОрганизации.ФаксОрганизации));
	ПараметрыВыгрузки.Вставить("ЭлектроннаяПочта",      СокрЛП(СведенияОбОрганизации.ЭлектроннаяПочта));
	ПараметрыВыгрузки.Вставить("БанкСчетНомер",         СокрЛП(СведенияОбОрганизации.БанкСчетНомер));
	ПараметрыВыгрузки.Вставить("БанкСчетНаимБанка",     СокрЛП(СведенияОбОрганизации.БанкСчетНаимБанка));
	ПараметрыВыгрузки.Вставить("БанкСчетКоррСчетБанка", СокрЛП(СведенияОбОрганизации.БанкСчетКоррСчетБанка));
	ПараметрыВыгрузки.Вставить("БанкСчетБИКБанка",      СокрЛП(СведенияОбОрганизации.БанкСчетБИКБанка));
	ПараметрыВыгрузки.Вставить("ОргКодСубъект", СокрЛП(СведенияОбОрганизации.ОргКодСубъект));
	ПараметрыВыгрузки.Вставить("ИмяФайла", СформироватьИмяФайла(ПараметрыВыгрузки));
	ПараметрыВыгрузки.Вставить("ИмяКлючевогоУзлаСодержательнойЧасти", "ID_ORG");
	ПараметрыВыгрузки.Вставить("Аттач", СформироватьАттач(СтруктураРеквизитовФормы.мСохраненныйДок));
	
	РегламентированнаяОтчетность.ПолучитьЗначениеОКВЭД(ДатаПодписи, СтруктураРеквизитовФормы);
	РегламентированнаяОтчетностьКлиентСервер.УстановитьЗначениеОКВЭД(ДатаПодписи,
																	 СтруктураРеквизитовФормы,
																	 ПараметрыВыгрузки.ОКВЭД);
																	 
																	 
	Для Каждого КЗ Из ТабДокументТитульный Цикл 
		Если Не ПараметрыВыгрузки.Свойство(КЗ.Ключ) Тогда 
			ПараметрыВыгрузки.Вставить(КЗ.Ключ, КЗ.Значение);
		КонецЕсли;
	КонецЦикла;
	
	ПараметрыВыгрузки.Вставить("ДатаСоставленияОтчета", мДанныеОтчета.ПолеТабличногоДокументаИтоги.ДатаПодписи);
	ПараметрыВыгрузки.Вставить("OFFICIAL", мДанныеОтчета.ПолеТабличногоДокументаИтоги.Должность);
	ПараметрыВыгрузки.Вставить("FIO_OFFICIAL", мДанныеОтчета.ПолеТабличногоДокументаИтоги.ФИО);
	
	Возврат ПараметрыВыгрузки;
КонецФункции

&НаСервере
Функция СформироватьАттач(Ссылка)
	Попытка
		Если Не ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаСФайлами") Тогда 
			Возврат "";
		КонецЕсли;
		МодульРаботаСФайлами = ОбщегоНазначения.ОбщийМодуль("РаботаСФайлами");
		
		НовыйАрхивИмя = ПолучитьИмяВременногоФайла();
		НовыйАрхив = Новый ЗаписьZIPФайла(НовыйАрхивИмя,,,МетодСжатияZIP.Сжатие);
		ЕстьФайлы = Ложь;
		Для Каждого ПФ Из ОбщегоНазначенияЭДКО.ПрикрепленныеФайлыКОбъектуИзСправочника(Ссылка, "РегламентированныйОтчетПрисоединенныеФайлы") Цикл 
			РПФ = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПФ, "Наименование, Расширение, ПометкаУдаления");
			Если РПФ.ПометкаУдаления Тогда 
				Продолжить;
			КонецЕсли;
			КаталогВремФайлов = "";
			ИмяФайла = РПФ.Наименование + "." + РПФ.Расширение;
			ИмяПрисоединенногоФайла = РегламентированнаяОтчетностьКлиентСервер.ПолучитьПолноеИмяВременногоФайла(КаталогВремФайлов, ИмяФайла, Истина);
			МодульРаботаСФайлами.ДвоичныеДанныеФайла(ПФ).Записать(ИмяПрисоединенногоФайла);
			НовыйАрхив.Добавить(ИмяПрисоединенногоФайла, РежимСохраненияПутейZIP.НеСохранятьПути);
			ЕстьФайлы = Истина;
		КонецЦикла;
		
		Если ЕстьФайлы Тогда 
			НовыйАрхив.Записать();
			ДанныеАрхива = Новый ДвоичныеДанные(НовыйАрхивИмя);
			Base64СтрокаДанныеАрхива = СтрЗаменить(Base64Строка(ДанныеАрхива), Символы.ПС, "");
			Base64СтрокаДанныеАрхива = СтрЗаменить(Base64СтрокаДанныеАрхива, Символы.ВК, "");
			Возврат Base64СтрокаДанныеАрхива;
		Иначе
			Возврат "";
		КонецЕсли;
	Исключение
		
		Возврат "";
	КонецПопытки;
КонецФункции

&НаКлиенте
Процедура ВыгрузитьПакет(Команда)
	
	Если НЕ ЗначениеЗаполнено(СтруктураРеквизитовФормы.Организация) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Организация не выбрана! Выгрузка невозможна.'");
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьПакетПослеСохранения", ЭтотОбъект);
	
	Если Модифицированность Тогда
		СохранитьНаКлиенте(, ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры	

&НаКлиенте
Процедура ВыгрузитьПакетПослеСохранения(Результат, ДополнительныеПараметры) Экспорт
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьПакетПослеПолученияКонтекстаЭДО", ЭтотОбъект);
	ДокументооборотСКОКлиент.ПолучитьКонтекстЭДО(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьПакетПослеПолученияКонтекстаЭДО(Результат, ДополнительныеПараметры) Экспорт
	
	КонтекстЭДОКлиент = Результат.КонтекстЭДО;
	
	ДополнительныеПараметры = Новый Структура("КонтекстЭДОКлиент", КонтекстЭДОКлиент);
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьПакетПослеВыгрузкиПакета", ЭтотОбъект, ДополнительныеПараметры);
	КонтекстЭДОКлиент.ВыгрузитьПакетДляОтправкиВРПН(ЭтотОбъект, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьПакетПослеВыгрузкиПакета(РезультатВыгрузки, ДополнительныеПараметры) Экспорт
	
	КонтекстЭДОКлиент = ДополнительныеПараметры.КонтекстЭДОКлиент;
	
	Если РезультатВыгрузки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИмяВременногоФайлаПакета = РезультатВыгрузки.ИмяФайлаЗашифрованногоПакета;
	
	Если ЗначениеЗаполнено(ИмяВременногоФайлаПакета) Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьПакетПослеСохраненияФайлаНаКлиентеЗавершение", ЭтотОбъект);
		КонтекстЭДОКлиент.СохранитьФайлНаКлиенте(ИмяВременногоФайлаПакета, ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьПакетПослеСохраненияФайлаНаКлиентеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не Результат Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Ошибка при выгрузке пакета'"));
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОТПРАВКА ОТЧЕТА В РПН

&НаКлиенте
Процедура ПроверитьВИнтернете(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьВИнтернетеЗавершение", ЭтотОбъект);

	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
		
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВИнтернетеЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ПроверитьВИнтернете(ЭтотОбъект, "РПН");
	
КонецПроцедуры

//
////////////////////////////////////////////////////////////////////////////////

#Область ПанельОтправкиВКонтролирующиеОрганы

&НаКлиенте
Процедура ОбновитьОтправку(Команда)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОбновитьОтправкуИзПанелиОтправки(ЭтотОбъект, "РПН");
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаПротоколНажатие(Элемент)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьПротоколИзПанелиОтправки(ЭтотОбъект, "РПН");
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьНеотправленноеИзвещение(Команда)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОтправитьНеотправленноеИзвещениеИзПанелиОтправки(ЭтотОбъект, "РПН");
КонецПроцедуры

&НаКлиенте
Процедура ЭтапыОтправкиНажатие(Элемент)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьСостояниеОтправкиИзПанелиОтправки(ЭтотОбъект, "РПН");
КонецПроцедуры

&НаКлиенте
Процедура КритическиеОшибкиОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьКритическиеОшибкиИзПанелиОтправки(ЭтотОбъект, "РПН");
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаНаименованиеЭтапаНажатие(Элемент)
	
	ПараметрыИзменения = Новый Структура;
	ПараметрыИзменения.Вставить("Форма", ЭтаФорма);
	ПараметрыИзменения.Вставить("Организация", СтруктураРеквизитовФормы.Организация);
	ПараметрыИзменения.Вставить("КонтролирующийОрган",
		ПредопределенноеЗначение("Перечисление.ТипыКонтролирующихОрганов.РПН"));
	
	РегламентированнаяОтчетностьКлиент.ИзменитьСтатусОтправки(ПараметрыИзменения);
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ОтправитьВКонтролирующийОрган(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверкаВозможностиВыгрузкиРегламентированногоОтчетаПередОтправкой", ЭтотОбъект);
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередОтправкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаВозможностиВыгрузкиРегламентированногоОтчетаПередОтправкой(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОтправитьВКонтролирующийОрганЗавершение", ЭтотОбъект);
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьВКонтролирующийОрганЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ПриНажатииНаКнопкуОтправкиВКонтролирующийОрган(ЭтотОбъект, "РПН");
	
КонецПроцедуры

&НаСервере
Функция ОбъектОтчета(ЭтаФормаИмя) Экспорт
	
	Если мОбъектОтчета = Неопределено Тогда 
		мОбъектОтчета = РегламентированнаяОтчетностьВызовСервера.ОбъектОтчета(ЭтаФормаИмя);
	КонецЕсли;
	
	Возврат мОбъектОтчета;
	
КонецФункции

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Форма", ЭтотОбъект);
	Оповещение = Новый ОписаниеОповещения("ПослеСохраненияФормыЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	СохранитьНаКлиенте(, Оповещение);
КонецПроцедуры

&НаКлиенте
Процедура ПослеСохраненияФормыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	ДополнительныеПараметры.Форма.Закрыть();
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция РазделТекущейОбласти(Форма, ТекущаяОбласть)

	Если ТекущаяОбласть = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ИмяТекущейОбласти = СтрЗаменить(ТекущаяОбласть.Имя, "ДобавитьСтрокуЗначок", "ДобавитьСтроку");
	Если ИмяТекущейОбласти = "ДобавитьСтроку1" Тогда
		Возврат Форма.СтруктураРеквизитовФормы.мИдГруппыТовары;
	ИначеЕсли ИмяТекущейОбласти = "ДобавитьСтроку2" Тогда
		Возврат Форма.СтруктураРеквизитовФормы.мИдГруппыУпаковка;
	ИначеЕсли СтрНайти(ИмяТекущейОбласти, "УдалитьСтроку") > 0 Тогда
		ИмяТекущейОбласти = СтрЗаменить(ИмяТекущейОбласти, "УдалитьСтроку", "");
	КонецЕсли;
	ИмяАктивногоРаздела = Лев(ИмяТекущейОбласти, 8);
	
	Для Каждого ЭлементСтруктуры Из Форма.мСтруктураМногострочныхРазделов Цикл
		ИмяГруппы = ЭлементСтруктуры.Ключ;
		СтруктураГруппы = Форма[ЭлементСтруктуры.Значение];
		
		Если СтруктураГруппы[0].Свойство(ИмяАктивногоРаздела) Тогда
			Возврат ИмяГруппы;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

&НаКлиенте
Процедура ТабличныйДокументПриАктивизацииОбласти(Элемент)
	Элементы.ТабличныйДокументКонтекстноеМенюУдалитьСтроку.Доступность = Ложь;
	Элементы.ТабличныйДокументКонтекстноеМенюДобавитьСтроку.Доступность = Ложь;
	
	ИмяГруппы = РазделТекущейОбласти(ЭтотОбъект, Элемент.ТекущаяОбласть);
	
	Если ЗначениеЗаполнено(ИмяГруппы) Тогда 
		ТестовоеИмя = ИмяГруппы + "01_" + Строка(мСтруктураИсхКолвоСтрокРазделов[ИмяГруппы] + 1);
		Элементы.ТабличныйДокументКонтекстноеМенюДобавитьСтроку.Доступность = Истина;
		Если СтрЧислоВхождений(Элемент.ТекущаяОбласть.Имя, "ДобавитьСтроку") = 0 И
			ТабличныйДокумент.Области.Найти(ТестовоеИмя) <> Неопределено Тогда
			Элементы.ТабличныйДокументКонтекстноеМенюУдалитьСтроку.Доступность = Истина;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОткрытьПрисоединенныеФайлы(Команда)
	
	РегламентированнаяОтчетностьКлиент.СохранитьОтчетИОткрытьФормуПрисоединенныеФайлы(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийПриИзменении(Элемент)
	Модифицированность = Истина;
КонецПроцедуры
