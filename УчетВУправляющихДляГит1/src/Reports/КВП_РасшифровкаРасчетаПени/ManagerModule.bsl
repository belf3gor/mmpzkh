#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

#Область ПрограммныйИнтерфейс

// Функция возвращает параметры исполнения отчета.
Функция ПолучитьПараметрыИсполненияОтчета() Экспорт
	
	Возврат Новый Структура("ИспользоватьПередКомпоновкойМакета,
							|ИспользоватьПослеКомпоновкиМакета,
							|ИспользоватьПослеВыводаРезультата,
							|ИспользоватьДанныеРасшифровки",
							Ложь, Ложь, Ложь, Ложь);
	
КонецФункции

#КонецОбласти

//////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ФОРМИРОВАНИЯ ОТЧЕТА

#Область ПроцедурыИФункцииФормированияОтчета

// Возвращает структуру параметров для получения таблицы задолженности.
//
Функция СформироватьСписокЛицевыхСчетов(ПараметрыОтчета)
	
	СписокЛицевыхСчетов = Новый СписокЗначений;
	
	ЕстьФильтрПоОбъекту = ЗначениеЗаполнено(ПараметрыОтчета.Объект);
	Если ЕстьФильтрПоОбъекту Тогда
		Если ТипЗнч(ПараметрыОтчета.Объект) = Тип("ДокументСсылка.КВП_НачислениеПени") Тогда
			ЛицевыеСчета = ПараметрыОтчета.Объект.Начисления.ВыгрузитьКолонку("ЛицевойСчет");
			СписокЛицевыхСчетов.ЗагрузитьЗначения(ЛицевыеСчета);
		Иначе
			ОбъектыНачисления = КВП_СформироватьТаблицуОбъектовНачисления(ПараметрыОтчета.НачалоПериода, ПараметрыОтчета.Объект, , Ложь);
			Для Каждого ТекОбъект Из ОбъектыНачисления Цикл
				Если ТекОбъект.ТипОбъекта = "ЛицевыеСчета" Тогда
					СписокЛицевыхСчетов = ТекОбъект.СписокОбъектов.Скопировать();
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Возврат СписокЛицевыхСчетов;
	
КонецФункции // СформироватьСписокПараметров()

// Функция возвращает представление объекта.
//
Функция ПолучитьПредставлениеОбъекта(ПараметрыОтчета)
	
	ПредставлениеОбъекта = "";
	Если Не ЗначениеЗаполнено(ПараметрыОтчета.Объект) Тогда
		ПредставлениеОбъекта = "По всем объектам";
	ИначеЕсли ТипЗнч(ПараметрыОтчета.Объект) = Тип("ДокументСсылка.КВП_НачислениеПени") Тогда
		ПредставлениеОбъекта = Строка(ПараметрыОтчета.Объект);
	ИначеЕсли ПараметрыОтчета.Объект.ЭтоГруппа Тогда
		ПредставлениеОбъекта = ПолноеНаименованиеСправочника(ПараметрыОтчета.Объект);
	Иначе
		// В наименовании дома представления типов элементов адреса могут начинаться с заглавно буквы,
		// например, "Дом", а не "дом", поэтому поиск ключевых слов выполняем в нижнем регистре.
		Если      ТипЗнч(ПараметрыОтчета.Объект) = Тип("СправочникСсылка.КВП_Здания") Тогда
			ИмяОбъекта = ПараметрыОтчета.Объект.Наименование;
			ПолноеИмя = ПолноеНаименованиеСправочника(ПараметрыОтчета.Объект);
			ПолноеИмя = Лев(ПолноеИмя, Найти(НРег(ПолноеИмя), "дом №") - 3);
			ПредставлениеОбъекта = СтрЗаменить(ПолноеИмя, "/", ", ") + ", дом №" + ПараметрыОтчета.Объект.НомерДома;
		ИначеЕсли ТипЗнч(ПараметрыОтчета.Объект) = Тип("СправочникСсылка.КВП_Подъезды") Тогда
			ИмяОбъекта = ПараметрыОтчета.Объект.Владелец.Наименование;
			ПолноеИмя = ПолноеНаименованиеСправочника(ПараметрыОтчета.Объект.Владелец);
			ПолноеИмя = Лев(ПолноеИмя, Найти(НРег(ПолноеИмя), "дом №") - 3);
			ПредставлениеОбъекта = СтрЗаменить(ПолноеИмя, "/", ", ") + ", дом №" + ПараметрыОтчета.Объект.Владелец.НомерДома + ", " + ПараметрыОтчета.Объект.Наименование;
		ИначеЕсли ТипЗнч(ПараметрыОтчета.Объект) = Тип("СправочникСсылка.КВП_ЛицевыеСчета") Тогда
			ИмяОбъекта = ПараметрыОтчета.Объект.Наименование;
			ПолноеИмя = ПолноеНаименованиеСправочника(ПараметрыОтчета.Объект.Адрес.Владелец);
			ПолноеИмя = Лев(ПолноеИмя, Найти(НРег(ПолноеИмя), "дом №") - 3);
			ПредставлениеОбъекта = СтрЗаменить(ПолноеИмя, "/", ", ") + ", дом №"
			                       + ПараметрыОтчета.Объект.Адрес.Владелец.НомерДома + ", "+ НРег(ПараметрыОтчета.Объект.Адрес.Наименование);
			ПредставлениеОбъекта = ПредставлениеОбъекта + "; " + ИмяОбъекта + "; "
			                       + УПЖКХ_ОбщегоНазначенияСервер.ПолучитьОтветственногоСобственникаЛицевогоСчета(ПараметрыОтчета.Объект, ПараметрыОтчета.НачалоПериода);
		КонецЕсли;
	КонецЕсли;
	
	Возврат ПредставлениеОбъекта;
	
КонецФункции

// Процедура формирует отчет.
Процедура СформироватьОтчет(ПараметрыОтчета, АдресХранилища) Экспорт
	
	мНастройкиУчетнойПолитикиТСЖПрошлыйПериод = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьПараметрыУчетнойПолитикиЖКХ(КонецМесяца(ДобавитьМесяц(ПараметрыОтчета.НачалоПериода, -1)), ПараметрыОтчета.Организация);
	
	КоличествоДней    = 0;
	КоличествоМесяцев = 0;
	Пока КоличествоДней < мНастройкиУчетнойПолитикиТСЖПрошлыйПериод.ЧислоВнесенияПлатежа Цикл
		КоличествоМесяцев = КоличествоМесяцев + 1;
		КоличествоДней    = КоличествоДней + День(КонецМесяца(ДобавитьМесяц(ПараметрыОтчета.НачалоПериода, -КоличествоМесяцев)));
	КонецЦикла;
	
	ПредыдущийПериод = КонецМесяца(ДобавитьМесяц(ПараметрыОтчета.НачалоПериода, -КоличествоМесяцев));
	НачалоПериодаСУчетомЧислаВнесенияПлатежа = ПредыдущийПериод + 1;
	
	// Получим таблицу задолженностей в разрезе лицевых счетов.
	СписокЛицевыхСчетов = СформироватьСписокЛицевыхСчетов(ПараметрыОтчета);
	
	// Необходимо собирать сводную таблицу данных за все периоды.
	ТаблицаЗадолженностей = Неопределено;
	ТекущийМесяц = КонецМесяца(ПараметрыОтчета.НачалоПериода);
	
	Пока ТекущийМесяц <= КонецМесяца(ПараметрыОтчета.КонецПериода) Цикл
		
		// Настройки учетной политики нужно получать для каждого месяца формирования отчета.
		// Если в каком-то периоде учетная политика не получена, то отчет не формируем.
		ОтказУчетнаяПолитика = Ложь;
		мНастройкиУчетнойПолитикиТСЖ = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьПараметрыУчетнойПолитикиЖКХ(НачалоМесяца(ТекущийМесяц), ПараметрыОтчета.Организация, ОтказУчетнаяПолитика);
		Если ОтказУчетнаяПолитика Тогда
			Возврат;
		КонецЕсли;
		
		врТаблицаЗадолженностей = КВП_ПолучитьТаблицуНачисленияПени(КонецМесяца(ТекущийМесяц), 
															  ПараметрыОтчета.Организация, 
															  мНастройкиУчетнойПолитикиТСЖ,
															  СписокЛицевыхСчетов,
															  ,
															  ПараметрыОтчета.ВыводитьСтрокиСНулевойБазой);
		
		// Таблица либо определяется, либо дополняется текущими данными.
		Если ТаблицаЗадолженностей = Неопределено Тогда
			ТаблицаЗадолженностей = врТаблицаЗадолженностей.Скопировать();
		Иначе
			Для Каждого ТекСтрокаЗадолженностей Из врТаблицаЗадолженностей Цикл
				ЗаполнитьЗначенияСвойств(ТаблицаЗадолженностей.Добавить(), ТекСтрокаЗадолженностей);
			КонецЦикла;
		КонецЕсли;
		
		// Переход к следующему месяцу.
		ТекущийМесяц = КонецМесяца(ДобавитьМесяц(ТекущийМесяц, 1));
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаЗадолженностей.ДатаНачала,
	|	ТаблицаЗадолженностей.ДатаОкончания,
	|	ТаблицаЗадолженностей.ЛицевойСчет,
	|	ТаблицаЗадолженностей.СтавкаПени,
	|	ТаблицаЗадолженностей.ДатаОплаты,
	|	ТаблицаЗадолженностей.МесяцНачисления,
	|	ТаблицаЗадолженностей.НастройкаРасчетаПени,
	|	ВЫБОР
	|		КОГДА &ВыводитьУслуги
	|			ТОГДА ТаблицаЗадолженностей.Услуга
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.КВП_Услуги.ПустаяСсылка)
	|	КОНЕЦ КАК Услуга,
	|	ТаблицаЗадолженностей.СуммаОплаты КАК СуммаОплаты,
	|	ТаблицаЗадолженностей.СуммаБазы КАК СуммаБазы,
	|	ТаблицаЗадолженностей.Сумма КАК Сумма
	|ПОМЕСТИТЬ врТаблицаЗадолженностей
	|ИЗ
	|	&ТаблицаЗадолженностей КАК ТаблицаЗадолженностей
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	врТаблицаЗадолженностей.ДатаНачала КАК ДатаНачала,
	|	врТаблицаЗадолженностей.ДатаОкончания,
	|	врТаблицаЗадолженностей.ЛицевойСчет КАК ЛицевойСчет,
	|	врТаблицаЗадолженностей.СтавкаПени,
	|	врТаблицаЗадолженностей.ДатаОплаты,
	|	врТаблицаЗадолженностей.МесяцНачисления КАК МесяцНачисления,
	|	врТаблицаЗадолженностей.НастройкаРасчетаПени КАК НастройкаРасчетаПени,
	|	врТаблицаЗадолженностей.Услуга КАК Услуга,
	|	СУММА(врТаблицаЗадолженностей.СуммаОплаты) КАК СуммаОплаты,
	|	СУММА(врТаблицаЗадолженностей.СуммаБазы) КАК СуммаБазы,
	|	СУММА(врТаблицаЗадолженностей.Сумма) КАК Сумма
	|ИЗ
	|	врТаблицаЗадолженностей КАК врТаблицаЗадолженностей
	|
	|СГРУППИРОВАТЬ ПО
	|	врТаблицаЗадолженностей.ДатаНачала,
	|	врТаблицаЗадолженностей.ДатаОкончания,
	|	врТаблицаЗадолженностей.ЛицевойСчет,
	|	врТаблицаЗадолженностей.СтавкаПени,
	|	врТаблицаЗадолженностей.ДатаОплаты,
	|	врТаблицаЗадолженностей.МесяцНачисления,
	|	врТаблицаЗадолженностей.НастройкаРасчетаПени,
	|	врТаблицаЗадолженностей.Услуга
	|
	|УПОРЯДОЧИТЬ ПО
	|	&СтрокаСортировки
	|ИТОГИ
	|	СУММА(Сумма)
	|ПО
	|	&СтрокаИтогов";
	
	// Основные параметры.
	Запрос.УстановитьПараметр("ТаблицаЗадолженностей", ТаблицаЗадолженностей);
	Запрос.УстановитьПараметр("ВыводитьУслуги",        ПараметрыОтчета.ВыводитьУслуги);
	
	// Определим строку сортировки по настройкам отчета.
	СтрокаСортировки = "МесяцНачисления";
	Если ПараметрыОтчета.ВыводитьУслуги Тогда
		Если ПараметрыОтчета.ВариантГруппировки = 0 Тогда
			СтрокаСортировки = СтрокаСортировки + ", Услуга.Наименование";
		ИначеЕсли ПараметрыОтчета.ВариантГруппировки = 1 Тогда
			СтрокаСортировки = "Услуга.Наименование, " + СтрокаСортировки;
		КонецЕсли;
	КонецЕсли;
	СтрокаСортировки = СтрокаСортировки + ", ДатаНачала, ДатаОкончания";
	
	СтрокаИтогов = "МесяцНачисления";
	Если ПараметрыОтчета.ВыводитьУслуги Тогда
		Если ПараметрыОтчета.ВариантГруппировки = 0 Тогда
			СтрокаИтогов = СтрокаИтогов + ", Услуга";
		ИначеЕсли ПараметрыОтчета.ВариантГруппировки = 1 Тогда
			СтрокаИтогов = "Услуга, " + СтрокаИтогов;
		КонецЕсли;
	КонецЕсли;
	СтрокаИтогов = "ЛицевойСчет, НастройкаРасчетаПени, " + СтрокаИтогов;
	
	// Установка параметров сортировки и итогов.
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&СтрокаСортировки", СтрокаСортировки);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&СтрокаИтогов",     СтрокаИтогов);
	
	ВыборкаЛС = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	// Определим структуру вывода данных.
	ДанныеУровень1 = "";
	ДанныеУровень2 = "";
	Если ПараметрыОтчета.ВыводитьУслуги Тогда
		Если ПараметрыОтчета.ВариантГруппировки = 0 Тогда // Вариант группировки - сначала месяц, потом услуга
			ДанныеУровень1 = "месяц";
			ДанныеУровень2 = "услуга";
		ИначеЕсли ПараметрыОтчета.ВариантГруппировки = 1 Тогда // Вариант группировки - сначала услуга, потом месяц
			ДанныеУровень1 = "услуга";
			ДанныеУровень2 = "месяц";
		КонецЕсли;
	Иначе // Вариант группировки - только месяц
		ДанныеУровень1 = "месяц";
		ДанныеУровень2 = "детали";
	КонецЕсли;
	
	// Вывод данных в табличный документ.
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	Макет = ПолучитьМакет("Макет");
	
	// Выыод заголовка отчета.
	ЗаголовокОтчета = Макет.ПолучитьОбласть("Заголовок");
	ЗаголовокОтчета.Параметры.Организация     = ПараметрыОтчета.Организация;
	ЗаголовокОтчета.Параметры.ЗаголовокОтчета = "Расшифровка расчета пени" + УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьПредставлениеПериода(ПараметрыОтчета.НачалоПериода, ПараметрыОтчета.КонецПериода);
	ПредставлениеОбъекта = ПолучитьПредставлениеОбъекта(ПараметрыОтчета);
	ЗаголовокОтчета.Параметры.Объект = ПредставлениеОбъекта;
	
	ТабличныйДокумент.Вывести(ЗаголовокОтчета);
	
	// Обход лицевых счетов.
	Пока ВыборкаЛС.Следующий() Цикл
		
		// Автогрупировка строк.
		ТабличныйДокумент.НачатьАвтогруппировкуСтрок();
		
		// Вывод шапки таблицы.
		ОбластьШапкаТЧ = Макет.ПолучитьОбласть("ШапкаТЧ");
		
		ОбластьШапкаТЧ.Параметры.ОписаниеЛС = "Лицевой счет: " + ВыборкаЛС.ЛицевойСчет
											+ Символы.ПС + "Владелец: " + УПЖКХ_ОбщегоНазначенияСервер.ПолучитьОтветственногоСобственникаЛицевогоСчета(ВыборкаЛС.ЛицевойСчет, ПараметрыОтчета.НачалоПериода)
											+ Символы.ПС + "Адрес: "    + ПолучитьАдрес(ВыборкаЛС.ЛицевойСчет, Перечисления.КВП_ВидыАдресов.ЛС).Представление;
		
		ОбластьШапкаТЧ.Параметры.РасшифровкаЛицевогоСчета = ВыборкаЛС.ЛицевойСчет;
		
		ТабличныйДокумент.Вывести(ОбластьШапкаТЧ);
		
		СуммаПоЛС = 0;
		
		// Обход настроек пени.
		ВыборкаНастроекПени = ВыборкаЛС.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаНастроекПени.Следующий() Цикл
			
			// Итоговая сумма пени по лицевому счету.
			СуммаПоЛС = СуммаПоЛС + Окр(ВыборкаНастроекПени.Сумма, 2);
			
			ОбластьМакета = Макет.ПолучитьОбласть("СтрокаТЧ");
			ОбластьМакета.Область(1, 2, 1, 2).Отступ = 0;
			ОбластьМакета.Область(1, 2, 1, 8).Шрифт = Новый Шрифт(ОбластьМакета.Область(1, 2, 1, 2).Шрифт, , ,Истина);
			ОбластьМакета.Параметры.Сумма = Окр(ВыборкаНастроекПени.Сумма, 2);
			ОбластьМакета.Параметры.ОписаниеСобытия    = ВыборкаНастроекПени.НастройкаРасчетаПени;
			ОбластьМакета.Параметры.РасшифровкаСобытия = ВыборкаНастроекПени.НастройкаРасчетаПени;
			ТабличныйДокумент.Вывести(ОбластьМакета, 0);
			
			// Обход месяца начисления или услуги.
			ВыборкаУровень1 = ВыборкаНастроекПени.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаУровень1.Следующий() Цикл
				
				ОписаниеСобытияУровень1    = "";
				РасшифровкаСобытияУровень1 = Неопределено;
				Если ДанныеУровень1 = "месяц" Тогда
					ОписаниеСобытияУровень1 = Формат(ВыборкаУровень1.МесяцНачисления, "ДФ=ММММ''-''гггг");
				ИначеЕсли ДанныеУровень1 = "услуга" Тогда
					ОписаниеСобытияУровень1    = Строка(ВыборкаУровень1.Услуга);
					РасшифровкаСобытияУровень1 = ВыборкаУровень1.Услуга;
				КонецЕсли;
				
				ОбластьМакета = Макет.ПолучитьОбласть("СтрокаТЧ");
				ОбластьМакета.Область(1, 2, 1, 2).Отступ = 1;
				ОбластьМакета.Область(1, 2, 1, 8).Шрифт = Новый Шрифт(ОбластьМакета.Область(1, 2, 1, 2).Шрифт, , , ,Истина);
				ОбластьМакета.Параметры.Сумма = Окр(ВыборкаУровень1.Сумма, 2);
				ОбластьМакета.Параметры.ОписаниеСобытия    = ОписаниеСобытияУровень1;
				ОбластьМакета.Параметры.РасшифровкаСобытия = РасшифровкаСобытияУровень1;
				ТабличныйДокумент.Вывести(ОбластьМакета, 1);
				
				// Обход месяца начисления, услуги или деталей.
				ВыборкаУровень2 = ВыборкаУровень1.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				Пока ВыборкаУровень2.Следующий() Цикл
					
					ОписаниеСобытияУровень2    = "";
					РасшифровкаСобытияУровень2 = Неопределено;
					Если ДанныеУровень2 = "месяц" Тогда
						ОписаниеСобытияУровень2 = Формат(ВыборкаУровень2.МесяцНачисления, "ДФ=ММММ''-''гггг");
					ИначеЕсли ДанныеУровень2 = "услуга" Тогда
						ОписаниеСобытияУровень2    = Строка(ВыборкаУровень2.Услуга);
						РасшифровкаСобытияУровень2 = ВыборкаУровень2.Услуга;
					ИначеЕсли ДанныеУровень2 = "детали" Тогда
						// Вывод деталей на втором уровне.
						ВыборкаУровень2.Сбросить();
						ВывестиОбластьСтрокДеталей(ВыборкаУровень2, ТабличныйДокумент, Макет, ПараметрыОтчета, НачалоПериодаСУчетомЧислаВнесенияПлатежа);
						Прервать;
					КонецЕсли;
					
					ОбластьМакета = Макет.ПолучитьОбласть("СтрокаТЧ");
					ОбластьМакета.Область(1, 2, 1, 2).Отступ = 2;
					ОбластьМакета.Область(1, 2, 1, 8).Шрифт = Новый Шрифт(ОбластьМакета.Область(1, 2, 1, 2).Шрифт, , , ,Истина);
					ОбластьМакета.Параметры.Сумма = Окр(ВыборкаУровень2.Сумма, 2);
					ОбластьМакета.Параметры.ОписаниеСобытия    = ОписаниеСобытияУровень2;
					ОбластьМакета.Параметры.РасшифровкаСобытия = РасшифровкаСобытияУровень2;
					ТабличныйДокумент.Вывести(ОбластьМакета, 2);
					
					// Вывод деталей на третьем уровне.
					ВывестиОбластьСтрокДеталей(ВыборкаУровень2.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам), ТабличныйДокумент, Макет, ПараметрыОтчета, НачалоПериодаСУчетомЧислаВнесенияПлатежа);
					
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЦикла;
		
		// Автогрупировка строк.
		ТабличныйДокумент.ЗакончитьАвтогруппировкуСтрок();
		
		// Вывод итогов по лицевому счету.
		ОбластьПодвалТЧ = Макет.ПолучитьОбласть("ПодвалТЧ");
		ОбластьПодвалТЧ.Параметры.Сумма = СуммаПоЛС;
		ТабличныйДокумент.Вывести(ОбластьПодвалТЧ);
		
	КонецЦикла;
	
	// Присвоим имя для сохранения параметров печати табличного документа
	ТабличныйДокумент.ИмяПараметровПечати = "НастройкиПечати_КВП_РасшифровкаРасчетаПени";
	
	ТабличныйДокумент.ФиксацияСверху = 6;
	
	ПоместитьВоВременноеХранилище(ТабличныйДокумент, АдресХранилища);
	
КонецПроцедуры

// Процедура производить вывод строк деталей отчета.
Процедура ВывестиОбластьСтрокДеталей(ВыборкаДеталей, ДокументРезультат, Макет, ПараметрыОтчета, НачалоПериодаСУчетомЧислаВнесенияПлатежа)
	
	// Определим временную таблицу, которая нужна для сбора деталей начисления пени.
	// Данные в таблице могут сворачиваться по периодам, если свертка необходима.
	врТаблицаДеталей = Новый ТаблицаЗначений;
	врТаблицаДеталей.Колонки.Добавить("ДатаНачалаПериода",    Новый ОписаниеТипов("Дата"));
	врТаблицаДеталей.Колонки.Добавить("ДатаОкончанияПериода", Новый ОписаниеТипов("Дата"));
	врТаблицаДеталей.Колонки.Добавить("ДлинаПериода",         Новый ОписаниеТипов("Число"));
	врТаблицаДеталей.Колонки.Добавить("СуммаБаза",            Новый ОписаниеТипов("Число"));
	врТаблицаДеталей.Колонки.Добавить("СтавкаПени",           Новый ОписаниеТипов("Число"));
	врТаблицаДеталей.Колонки.Добавить("Сумма",                Новый ОписаниеТипов("Число"));
	врТаблицаДеталей.Колонки.Добавить("ОписаниеСобытия",      Новый ОписаниеТипов("Строка"));
	
	// Служебные параметры.
	ОписаниеСобытия      = "";
	ПервыйОбход          = Истина;
	ТекущаяСтрокаДанных  = Неопределено;
	ТекущаяСуммаБазы     = 0;
	ТекущаяСтавкаПени    = 0;
	ПредыдущаяСуммаБазы  = 0;
	ПредыдущаяСтавкаПени = 0;
	
	// Обход деталей.
	Пока ВыборкаДеталей.Следующий() Цикл
		
		ТекущаяСуммаБазы  = ВыборкаДеталей.СуммаБазы;
		ТекущаяСтавкаПени = ВыборкаДеталей.СтавкаПени;
		
		// Признак необходимости объединения текущей и предыдущей строк данных.
		ОбъединитьСтроки = Ложь;
		
		// Объединение строк нужно производить при выполнении следующих условий:
		// 1. Свертка строк разрешена согласно настройке отчета.
		// 2. Предыдущая строка определена.
		// 3. Суммы баз в строках совпадают.
		// 4. Ставки пени в строках совпадают.
		// 5. Начало периода текущей строки является днем, следующим за концом периода предыдущей строки.
		Если ПараметрыОтчета.СворачиватьСтрокиПоБазеИСтавкеПени
		   И Не ТекущаяСтрокаДанных = Неопределено
		   И ПредыдущаяСуммаБазы = ТекущаяСуммаБазы
		   И ПредыдущаяСтавкаПени = ТекущаяСтавкаПени
		   И КонецДня(ТекущаяСтрокаДанных.ДатаОкончанияПериода) = КонецДня(ВыборкаДеталей.ДатаНачала - 60 * 60 * 24) Тогда
			
			ОбъединитьСтроки = Истина;
			
		КонецЕсли;
		
		// Если строки объединять не нужно, то добавляем новую строку.
		Если Не ОбъединитьСтроки Тогда
			ТекущаяСтрокаДанных = врТаблицаДеталей.Добавить();
		КонецЕсли;
		
		Если ПустаяСтрока(ОписаниеСобытия) Тогда
			// По умолчанию укажем просто задолженность за текущий месяц.
			ОписаниеСобытия = "Непогашенное начисление за " + НРег(Формат(ВыборкаДеталей.МесяцНачисления, "ДФ='MММM yyyy'"));
		КонецЕсли;
		
		Если ПервыйОбход Тогда
			ПервыйОбход = Ложь;
			Если ВыборкаДеталей.ДатаНачала = НачалоМесяца(НачалоПериодаСУчетомЧислаВнесенияПлатежа) Тогда
				// При первом обходе в случае попадания на начало месяца укажем "Задолженность".
				ОписаниеСобытия = "Задолженность на " + Формат(НачалоМесяца(ВыборкаДеталей.ДатаНачала), "ДЛФ=Д");
			КонецЕсли;
		ИначеЕсли ПредыдущаяСтавкаПени <> ТекущаяСтавкаПени Тогда
			Если ПредыдущаяСтавкаПени = 0 Тогда
				// Если ставка пени была нулевой, а теперь ненулевая, указываем,
				// что это начало периода ненулевой ставки.
				ОписаниеСобытия = "Начало действия ненулевой ставки пени";
			Иначе
				// Если изменилась ставка пени, указываем соответствующее описание.
				ОписаниеСобытия = "Изменение ставки пени";
			КонецЕсли;
		КонецЕсли;
	
		// Заполнение начала периода и параметров расчета пени производим только если добавлена новая строка.
		// Если строки объединяются, то данные параметры уже заполнены в предыдущей строке.
		Если Не ОбъединитьСтроки Тогда
			ТекущаяСтрокаДанных.ДатаНачалаПериода    = ВыборкаДеталей.ДатаНачала;
			ТекущаяСтрокаДанных.СуммаБаза            = ТекущаяСуммаБазы;
			ТекущаяСтрокаДанных.СтавкаПени           = 100 * ТекущаяСтавкаПени;
			ТекущаяСтрокаДанных.ОписаниеСобытия      = ОписаниеСобытия;
		КонецЕсли;
		
		// Заполнение (обновление) даты окончания периода и длины периода выполняется всегда.
		ТекущаяСтрокаДанных.ДатаОкончанияПериода = ВыборкаДеталей.ДатаОкончания;
		ТекущаяСтрокаДанных.ДлинаПериода         = (НачалоДня(ТекущаяСтрокаДанных.ДатаОкончанияПериода) - НачалоДня(ТекущаяСтрокаДанных.ДатаНачалаПериода) + 86400) / 86400;
		
		// Сумма пени заполняется путем сложения с предыдущим значением,
		// так как это подходит как при добавлении новой строки, так и при объединении строк.
		ТекущаяСтрокаДанных.Сумма = ТекущаяСтрокаДанных.Сумма + ВыборкаДеталей.Сумма;
		
		// Данные об оплате хранятся для следующей строки, поэтому анализируем после вывода данных о текущей.
		Если ВыборкаДеталей.СуммаОплаты > 0 Тогда
			ОписаниеСобытия = "Оплата " + Формат(ВыборкаДеталей.ДатаОплаты, "ДФ=dd.MM") + " - " + Формат(ВыборкаДеталей.СуммаОплаты, "ЧДЦ=2");
		Иначе
			ОписаниеСобытия = "";
		КонецЕсли;
		
		ПредыдущаяСтавкаПени = ВыборкаДеталей.СтавкаПени;
		ПредыдущаяСуммаБазы  = ВыборкаДеталей.СуммаБазы;
		
	КонецЦикла;
	
	// Вывод данных из временной таблицы в табличный документ.
	Для Каждого ТекСтрокаДеталей Из врТаблицаДеталей Цикл
		
		ОбластьМакета = Макет.ПолучитьОбласть("СтрокаТЧ");
		ОбластьМакета.Область(1, 2, 1, 2).Отступ = 3;
		ОбластьМакета.Параметры.Заполнить(ТекСтрокаДеталей);
		
		ДокументРезультат.Вывести(ОбластьМакета, 3);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли