&НаСервере
Перем мОбъектОтчета;

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	// Обход ошибки платформы Параметр сеанса отсутствует или удален.
	ТабличныйДокумент.Очистить();
	
	СформироватьСтруктуруРеквизитовФормы();
	
	СтруктураРеквизитовФормы.СписокПечатаемыхЛистов = Новый СписокЗначений;
	
	СтруктураРеквизитовФормы.мЧтоОчищать               = "Расчетную ведомость";
	СтруктураРеквизитовФормы.мСоставПоказателей        = "СоставПоказателей2015Кв3";
	СтруктураРеквизитовФормы.мПоляПоискаПоказателяВТСП = "КодПоказателяПоСоставу, КодПоказателяПоФорме";

	СтруктураРеквизитовФормы.мОписаниеТиповЧислоЕ = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2));
	
	СтруктураРеквизитовФормы.мИдГруппы3 = "П0003000001";
	
	КолИсхСтрокИдГруппы3 = 1;
	
	КолКолонокИдГруппы3  = 5;
	
	СтруктураДанныхТитульный = Новый Структура;
	СтруктураДанныхРаздел12  = Новый Структура;
	СтруктураДанныхРаздел3   = Новый Структура;
	
	// Структура многострочных разделов формы.
	мСтруктураМногострочныхРазделов = Новый Структура;
	мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы3,  СтруктураРеквизитовФормы.мИдГруппы3);
	
	// Структура исходных строк (минимального кол-ва) многострочных разделов формы.
	мСтруктураИсхКолвоСтрокРазделов = Новый Структура;
	мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы3, КолИсхСтрокИдГруппы3);
	
	мСтруктураКолвоКолонокРазделов = Новый Структура;
	мСтруктураКолвоКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы3, КолКолонокИдГруппы3);
	
	мСтруктураИменаКолонокРазделов = Новый Структура;
	мСтруктураИменаКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы3, Новый СписокЗначений);
	
	ЦветЗаполняетсяТолькоВручную        = Новый Цвет(255, 255, 225);
	ЦветЗаполняетсяАвтоКорректир        = Новый Цвет(255, 240, 200);
	ЦветЗаполняетсяАвтоБезКорректир     = Новый Цвет(230, 240, 220);
	ЦветЗаполняетсяАвтоАрифметика       = Новый Цвет(192, 220, 192);
	ЦветЗаполняетсяОднозначноВручную    = Новый Цвет(255, 255, 192);
	ЦветЗаполняетсяАвтоматически        = Новый Цвет(255, 255, 255);
	СтруктураРеквизитовФормы.ЦветБелый  = Новый Цвет(255, 255, 255);
	СтруктураРеквизитовФормы.ЦветЖелтый = Новый Цвет(255, 255, 192);
	
	// структура цветов раскраски автозаполняемых ячеек
	мСтруктураЦветовРаскраски = Новый Структура;
	мСтруктураЦветовРаскраски.Вставить("_1", ЦветЗаполняетсяТолькоВручную);
	мСтруктураЦветовРаскраски.Вставить("_2", ЦветЗаполняетсяАвтоКорректир);
	мСтруктураЦветовРаскраски.Вставить("_3", ЦветЗаполняетсяАвтоБезКорректир);
	мСтруктураЦветовРаскраски.Вставить("_4", ЦветЗаполняетсяАвтоАрифметика);
	мСтруктураЦветовРаскраски.Вставить("_0", ЦветЗаполняетсяОднозначноВручную);
	мСтруктураЦветовРаскраски.Вставить("_5", ЦветЗаполняетсяАвтоматически);
	
	мСтруктураВариантыЗаполнения       = Новый Структура;
	мСтруктураВариантыЗаполненияЭталон = Новый Структура;
	
	мСтруктураМногостраничныхРазделов = Новый Структура;
	
	// Версия формы
	СтруктураРеквизитовФормы.мВерсияФормы = "12/10/2015";
	
	// Код отчета условный
	СтруктураРеквизитовФормы.мКодОтчета = "1189999";
	
	СтруктураРеквизитовФормы.мПечатныеФормы = Новый СписокЗначений;
	
	ИмяРаздела = "Титульный";
	
	ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + ИмяРаздела));
	
	СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяРаздела;
	
	СтруктураРеквизитовФормы.мВыбраннаяФорма          = Параметры.мВыбраннаяФорма;
	СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета  = Параметры.мДатаКонцаПериодаОтчета;
	СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета = Параметры.мДатаНачалаПериодаОтчета;
	СтруктураРеквизитовФормы.мСкопированаФорма        = Параметры.мСкопированаФорма;
	СтруктураРеквизитовФормы.мСохраненныйДок          = Параметры.мСохраненныйДок;
	СтруктураРеквизитовФормы.Организация              = Параметры.Организация;
	СтруктураРеквизитовФормы.СформироватьФормуОтчетаАвтоматически = Параметры.СформироватьФормуОтчетаАвтоматически;
	
	ДатаПодписи = ТекущаяДатаСеанса();
	
	ПорядкиОкругленияОтчетности = Новый Структура;
	ПорядкиОкругленияОтчетности.Вставить("ПеречислениеПорядкиОкругленияОтчетностиОкр1",       Перечисления.ПорядкиОкругленияОтчетности.Окр1);
	ПорядкиОкругленияОтчетности.Вставить("ПеречислениеПорядкиОкругленияОтчетностиОкр1000",    Перечисления.ПорядкиОкругленияОтчетности.Окр1000);
	ПорядкиОкругленияОтчетности.Вставить("ПеречислениеПорядкиОкругленияОтчетностиОкр1000000", Перечисления.ПорядкиОкругленияОтчетности.Окр1000000);
	
	Инициализация(Параметры.БезОткрытияФормы);

КонецПроцедуры

&НаСервере
Процедура СформироватьСтруктуруРеквизитовФормы()
	
	СтруктураРеквизитовФормы = Новый Структура;
	СтруктураРеквизитовФормы.Вставить("мВыбраннаяФорма");
	СтруктураРеквизитовФормы.Вставить("мСкопированаФорма");
	СтруктураРеквизитовФормы.Вставить("мСохраненныйДок");
	СтруктураРеквизитовФормы.Вставить("мДатаНачалаПериодаОтчета");
	СтруктураРеквизитовФормы.Вставить("мДатаКонцаПериодаОтчета");
	СтруктураРеквизитовФормы.Вставить("мСчетчикСтраниц");
	СтруктураРеквизитовФормы.Вставить("мАвтоВыборКодов");
	СтруктураРеквизитовФормы.Вставить("мЗаписьЗапрещена");
	СтруктураРеквизитовФормы.Вставить("мИдГруппы3");
	СтруктураРеквизитовФормы.Вставить("мЗаписываетсяНовыйДокумент");
	СтруктураРеквизитовФормы.Вставить("мВариант");
	СтруктураРеквизитовФормы.Вставить("мЧтоОчищать");
	СтруктураРеквизитовФормы.Вставить("ЦветБелый");
	СтруктураРеквизитовФормы.Вставить("ЦветЖелтый");
	СтруктураРеквизитовФормы.Вставить("мСоставПоказателей");
	СтруктураРеквизитовФормы.Вставить("мВПрограммеИзмененаОрганизация");
	СтруктураРеквизитовФормы.Вставить("мСтрокаФормата");
	СтруктураРеквизитовФормы.Вставить("мДелитель");
	СтруктураРеквизитовФормы.Вставить("мКодОтчета");
	СтруктураРеквизитовФормы.Вставить("мВерсияФормы");
	СтруктураРеквизитовФормы.Вставить("мПечатныеФормы");
	СтруктураРеквизитовФормы.Вставить("мОписаниеТиповЧислоЕ");
	СтруктураРеквизитовФормы.Вставить("мДокументВосстановлен");
	СтруктураРеквизитовФормы.Вставить("мПоляПоискаПоказателяВТСП");
	СтруктураРеквизитовФормы.Вставить("ФлагСохранения");
	СтруктураРеквизитовФормы.Вставить("НомерГода");
	СтруктураРеквизитовФормы.Вставить("НаимТекущегоРаздела");
	СтруктураРеквизитовФормы.Вставить("Организация");
	СтруктураРеквизитовФормы.Вставить("ВидДокумента");
	СтруктураРеквизитовФормы.Вставить("ЕдиницаИзмерения");
	СтруктураРеквизитовФормы.Вставить("ТочностьЕдиницыИзмерения");
	СтруктураРеквизитовФормы.Вставить("СтрПериодОтчета");
	СтруктураРеквизитовФормы.Вставить("мРежимПечати");
	СтруктураРеквизитовФормы.Вставить("ИП");
	СтруктураРеквизитовФормы.Вставить("НаимОрганизации");
	СтруктураРеквизитовФормы.Вставить("ВыводитьСтраницуВТаблДокНаСервере");
	СтруктураРеквизитовФормы.Вставить("НаимТекущегоРаздела");
	СтруктураРеквизитовФормы.Вставить("ФлажокОтклАвтоРасчет", Ложь);
	СтруктураРеквизитовФормы.Вставить("СписокПечатаемыхЛистов");
	СтруктураРеквизитовФормы.Вставить("ОтображатьКнопкуЗаполнить", Ложь);
	СтруктураРеквизитовФормы.Вставить("ОтображатьКнопкуРасшифровать", Ложь);
	СтруктураРеквизитовФормы.Вставить("ТекущаяСтрокаРазделовОтчета");
	СтруктураРеквизитовФормы.Вставить("СформироватьФормуОтчетаАвтоматически");
	СтруктураРеквизитовФормы.Вставить("мБезОткрытияФормы");
	СтруктураРеквизитовФормы.Вставить("ОКВЭД",  "");
	СтруктураРеквизитовФормы.Вставить("ОКВЭД2", "");
	
КонецПроцедуры

&НаКлиенте
Процедура АктивизироватьЯчейку(Ячейка) Экспорт
	
	РегламентированнаяОтчетностьКлиент.АктивизироватьЯчейку(ЭтаФорма, Ячейка);
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьСохраненныеДанные()
	Перем ДанныеМногострочныхРазделов;
	Перем ДанныеВариановАвтоЗаполнения;
	Перем ПоказателиОтчета;
	Перем ВерсияФормы;
	Перем Автозаполнение;
	Перем ТаблицаМногостраничногоДокумента;

	СтруктураРеквизитовФормы.ФлагСохранения = Ложь;
	
	// В случае, если формы была скопирована по F9, то проверим, не изменилась ли организация.
	Если СтруктураРеквизитовФормы.Организация <> СтруктураРеквизитовФормы.мСохраненныйДок.Организация
	   И СтруктураРеквизитовФормы.Организация <> РегламентированнаяОтчетностьКлиентСервер.ПустоеЗначениеТипа("СправочникСсылка.Организации")
	   И СтруктураРеквизитовФормы.Организация <> Неопределено Тогда
		СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация = Истина;
	Иначе
		// восстанавливаем реквизиты отчета
		СтруктураРеквизитовФормы.Организация = СтруктураРеквизитовФормы.мСохраненныйДок.Организация;
	КонецЕсли;
	
	СтруктураРеквизитовФормы.ЕдиницаИзмерения         = СтруктураРеквизитовФормы.мСохраненныйДок.ЕдиницаИзмерения;
	СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = СтруктураРеквизитовФормы.мСохраненныйДок.ТочностьЕдиницыИзмерения;
	ДатаПодписи                                       = СтруктураРеквизитовФормы.мСохраненныйДок.ДатаПодписи;
	Комментарий                                       = СтруктураРеквизитовФормы.мСохраненныйДок.Комментарий;
	НомерПачки                                        = СтруктураРеквизитовФормы.мСохраненныйДок.НомерПачки;

	// восстанавливаем сохраненные данные отчета
	СписокСохранения = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить();

	// список листов, выводимых на печать
	ДеревоНастройкиСтраниц = СтруктураРеквизитовФормы.мСохраненныйДок.ДеревоНастройкиСтраниц.Получить();
	
	// Установим актуальные представления разделов.
	Если НЕ ДеревоНастройкиСтраниц = Неопределено Тогда
		Для Каждого СтрокаДерева Из ДеревоНастройкиСтраниц.Строки Цикл
			Счетчик = ?(Счетчик = Неопределено, 0, Счетчик);
			ЭлементмДеревоСтраницОтчета = мДеревоСтраницОтчета.ПолучитьЭлементы().Получить(Счетчик);
			Если СтрокаДерева.ИмяСтраницы = ЭлементмДеревоСтраницОтчета.ИмяСтраницы Тогда
				Если НЕ СтрокаДерева.Представление = ЭлементмДеревоСтраницОтчета.Представление Тогда
					СтрокаДерева.Представление = ЭлементмДеревоСтраницОтчета.Представление;
				КонецЕсли;
			Иначе
				Продолжить;
			КонецЕсли;
			Счетчик = Счетчик + 1;
		КонецЦикла;
		ЗначениеВРеквизитФормы(ДеревоНастройкиСтраниц.Скопировать(), "мДеревоСтраницОтчета");
	КонецЕсли;
	
	// Восстанавливаем сохраненные данные многострочных разделов.
	Если СписокСохранения.Свойство( "ДанныеМногострочныхРазделов", ДанныеМногострочныхРазделов) Тогда
		
		Для Каждого ЭлементСтруктуры Из ДанныеМногострочныхРазделов Цикл
			
			НайденноеЗначение = Неопределено;
			
			мСтруктураМногострочныхРазделов.Свойство(ЭлементСтруктуры.Ключ, НайденноеЗначение);
			
			Если НЕ НайденноеЗначение = Неопределено Тогда
				
				ЗначениеВДанныеФормы(ЭлементСтруктуры.Значение, ЭтаФорма[НайденноеЗначение])
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	// восстанавливаем сохраненные данные вариантов автозаполнения ячеек
	Если СписокСохранения.Свойство("ДанныеВариантовАвтоЗаполнения", ДанныеВариановАвтоЗаполнения) Тогда
						
		Если НЕ ДанныеВариановАвтоЗаполнения = Неопределено Тогда
			
			ДанныеВариановАвтоЗаполнения.Удалить("Раздел23");
			
			мСтруктураВариантыЗаполнения.Очистить();
			
			Для Каждого ЭлементСтруктуры Из ДанныеВариановАвтоЗаполнения Цикл
				
				мСтруктураВариантыЗаполнения.Вставить(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Ключ);
				
				ЭтаФорма["ТаблицаВариантыЗаполнения" + ЭлементСтруктуры.Ключ].Очистить();
				
				Для Каждого ЭлементМассива Из ЭлементСтруктуры.Значение Цикл
										
					ТаблВарЗаполнения = ЭтаФорма["ТаблицаВариантыЗаполнения" + ЭлементСтруктуры.Ключ].Добавить().ТаблицаВариантовЗаполнения;
										
					ЗначениеВДанныеФормы(ЭлементМассива, ТаблВарЗаполнения);
					
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
				
	// восстановим сохраненные данные редактируемых ячеек
	СписокСохранения.Свойство( "ПоказателиОтчета", ПоказателиОтчета );
	
	// восстанавливаем версию формы
	Если СписокСохранения.Свойство("ВерсияФормы", ВерсияФормы) Тогда
		Если ВерсияФормы <> СтруктураРеквизитовФормы.мВерсияФормы Тогда
			// Версия формы изменилась.
			// Обновляем пользовательские настройки.
			ОбновитьПользовательскиеНастройки();
			СтруктураРеквизитовФормы.ФлагСохранения = Истина;
		КонецЕсли;
	КонецЕсли;
    	
	// восстанавливаем флажок ПодсчетаСтраниц
	СписокСохранения.Свойство("ФлПодсчетСтраниц", СтруктураРеквизитовФормы.мСчетчикСтраниц);

	СписокСохранения.Свойство("ФлОтклВыборЗначений", СтруктураРеквизитовФормы.мАвтоВыборКодов);
	Если СтруктураРеквизитовФормы.мАвтоВыборКодов = Неопределено Тогда
		СтруктураРеквизитовФормы.мАвтоВыборКодов = Ложь;
	КонецЕсли;

	СписокСохранения.Свойство("Автозаполнение", Автозаполнение);
	СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет = Автозаполнение;
	
	СтруктДокУпПред = Неопределено;
	СписокСохранения.Свойство("ДокументУпПред", СтруктДокУпПред);
	Если ТипЗнч(СтруктДокУпПред) = Тип("Структура") Тогда
		
		ЭтоДокументУпПредСтарогоОбразца
			= НЕ (СтруктДокУпПред.Свойство("Серия") И СтруктДокУпПред.Свойство("Номер")
			И СтруктДокУпПред.Свойство("ДатаВыдачи") И СтруктДокУпПред.Свойство("КемВыдан")
			И СтруктДокУпПред.Свойство("ДействуетС") И СтруктДокУпПред.Свойство("ДействуетПо"));
		
		Если ЭтоДокументУпПредСтарогоОбразца Тогда
			мСтруктураДокУпПред.Вставить("Номер", СокрЛП(Формат(СтруктДокУпПред["НомерУдостоверяющего"], "ЧГ=")));
			мСтруктураДокУпПред.Вставить("ДатаВыдачи", СтруктДокУпПред["ДатаВыдачи"]);
			мСтруктураДокУпПред.Вставить("КемВыдан", СокрЛП(СтруктДокУпПред["КемВыдан"]));
		Иначе
			мСтруктураДокУпПред = СтруктДокУпПред;
		КонецЕсли;
		
	КонецЕсли;
	
	СформироватьДеревоРазделовОтчетаНаСервере();
	
	Префикс = "ПолеТабличногоДокумента";
	
	Для Каждого Раздел Из мСвойстваРазделовДекларации.ПолучитьЭлементы() Цикл	
		
		Если НЕ Раздел.МногостраничностьВРазделе Тогда
			ЭтаФорма["СтруктураДанных" + Раздел.ИмяСтраницы] = ПоказателиОтчета[Префикс + Раздел.ИмяСтраницы];
		КонецЕсли;
	
	КонецЦикла;
	
	ВосстановитьСведенияОбОрганизацииИзТитульногоЛистаСтарогоОбразца(ПоказателиОтчета);
	
	ИмяТекРаздела = "Титульный";
	
	Для Каждого ЭлСтруктуры Из ЭтаФорма["СтруктураДанных" + ИмяТекРаздела] Цикл
		Попытка
			ТабличныйДокумент.Области[ЭлСтруктуры.Ключ].Значение = ЭлСтруктуры.Значение;
		Исключение
		КонецПопытки;
	КонецЦикла;
	
	РегламентированнаяОтчетность.ОперацииПриВосстановленииРегламентированногоОтчета(ЭтаФорма);
    	
	КопироватьДанныеФормы(мДеревоСтраницОтчета, мДеревоВыбранныхСтраниц);
    	
	Модифицированность   = Ложь;

КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайла(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузитьИзФайлаЗавершение", ЭтотОбъект);
	
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередЗагрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура Выгрузить(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьЗавершение", ЭтотОбъект);

	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайлаЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ЗагрузитьИзФайлаОтчет();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайлаОтчет() Экспорт
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузитьИзФайлаОтчетЗавершение", ЭтотОбъект);
	
	Если Модифицированность Тогда
		СохранитьНаКлиенте(,ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайлаОтчетЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	РегламентированнаяОтчетностьЗагрузкаКлиент.ЗагрузитьИзФайлаОтчет(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Функция ЗагрузкаОтчетаИзФайла(ДанныеДляЗагрузки) Экспорт
	
	Если Модифицированность Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = СтрШаблон(НСтр("ru='Отчет ""%1"" не сохранен.'"), ЭтотОбъект.Заголовок);
		Сообщение.Сообщить();
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ ЗагрузкаОтчетаИзФайлаНаСервере(ДанныеДляЗагрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
		
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция ЗагрузкаОтчетаИзФайлаНаСервере(ДанныеДляЗагрузки)
	
	СформироватьСтруктуруПоказателей();
	
	ПараметрыОтчета = СформироватьСтруктуруПараметров();
	
	ДеревоДляЗагрузки = ИзвлечьСтруктуруXML();
	
	Если НЕ РегламентированнаяОтчетностьЗагрузка.ЗагрузкаОтчетаИзФайла(
		ЭтотОбъект, ПараметрыОтчета, ДанныеДляЗагрузки, ДеревоДляЗагрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура ВыгрузитьЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ВыгрузитьОтчет();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьОтчет() Экспорт
		
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьОтчетЗавершение", ЭтотОбъект);
	
	Если Модифицированность Тогда
		СохранитьНаКлиенте(,ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьОтчетЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ФормаВыгрузкиРеглОтчета = ПолучитьФорму("Документ.ВыгрузкаРегламентированныхОтчетов.Форма.ФормаДокумента", , ЭтаФорма);
	
	СпДокОсн = Новый СписокЗначений;
	СпДокОсн.Добавить(СтруктураРеквизитовФормы.мСохраненныйДок);
	
	ФормаВыгрузкиРеглОтчета.СформироватьИЗаписать(СпДокОсн);
	
КонецПроцедуры

&НаКлиенте
Функция ДобавитьРеквизит(Текст, ДобСтрока, Префикс)
	
	Если ЗначениеЗаполнено(ДобСтрока) Тогда
		Текст = Текст + Префикс + ДобСтрока;
	КонецЕсли;
	
	Возврат Текст;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьДанными(ДеревоВыгрузки, ПараметрыВыгрузки)
	
	ОбработатьУсловныеЭлементы(ПараметрыВыгрузки, ДеревоВыгрузки); // формируем точную структуру XML-макета
	ЗаполнитьДаннымиУзел(ПараметрыВыгрузки, ДеревоВыгрузки);
	ОтсечьНезаполненныеНеобязательныеУзлы(ДеревоВыгрузки);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДаннымиУзел(ПараметрыВыгрузки, Узел, НомерСтроки = Неопределено)
	
	Для Каждого Стр из Узел.Строки Цикл
		Если Стр.Тип = "С" ИЛИ Стр.Тип = "C" Тогда // учтем оба варианта: кириллицу и латиницу
			Если РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(ПараметрыВыгрузки, "ИмяКлючевогоУзлаСодержательнойЧасти") И ПараметрыВыгрузки.ИмяКлючевогоУзлаСодержательнойЧасти = Стр.Код Тогда
				ЗаполнитьДаннымиУзел(ПараметрыВыгрузки, Стр);
				ЗаполнитьСодержательнуюЧасть(Стр);
			Иначе
				ЗаполнитьДаннымиУзел(ПараметрыВыгрузки, Стр);
			КонецЕсли;
		Иначе
			Если ПустаяСтрока(Стр.ЗначениеПоУмолчанию) Тогда
				Если НЕ ПустаяСтрока(Стр.Ключ) Тогда
					ПолныйКодПоказателя = Стр.Ключ + ?(ЗначениеЗаполнено(НомерСтроки), "_" + Формат(НомерСтроки, "ЧГ="), "");
					ЗначениеПоказателя = Неопределено;
					Если ПараметрыВыгрузки.Свойство(ПолныйКодПоказателя, ЗначениеПоказателя) Тогда
						ВывестиПоказательВXML(Стр, ЗначениеПоказателя);
					Иначе
						ВывестиПоказательВXML(Стр, "");
					КонецЕсли;
				Иначе
					Стр.Значение = "";
				КонецЕсли;
			ИначеЕсли Лев(Стр.ЗначениеПоУмолчанию, 1) = "&" Тогда
				Ключ = Сред(Стр.ЗначениеПоУмолчанию, 2);
				Если РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(ПараметрыВыгрузки, Ключ) Тогда
					ВывестиПоказательВXML(Стр, ПараметрыВыгрузки[Ключ]);
				КонецЕсли;
			Иначе
				Стр.Значение = Стр.ЗначениеПоУмолчанию;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСведенияОбОрганизации(ВПрограммеИзмененаДатаПодписи = Ложь, СменилсяПризнакПодписанта = Ложь)
	
	Если (СтруктураРеквизитовФормы.Организация  = Неопределено) Или (СтруктураРеквизитовФормы.Организация = РегламентированнаяОтчетностьКлиентСервер.ПустоеЗначениеТипа("СправочникСсылка.Организации")) Тогда
		Возврат
	КонецЕсли;
	
	ПБОЮЛ = НЕ РегламентированнаяОтчетностьВызовСервера.ЭтоЮридическоеЛицо(СтруктураРеквизитовФормы.Организация);
	
	Сведения = Новый СписокЗначений;
	
	Если НЕ ВПрограммеИзмененаДатаПодписи Тогда
		Сведения.Добавить("", "ИННЮЛ");
		Сведения.Добавить("", "КППЮЛ");
		Сведения.Добавить("", "НаимЮЛПол");
		Сведения.Добавить("", "РегистрационныйНомерФСС");
	КонецЕсли;
	
	Сведения.Добавить("", "ФИОРук");
	Сведения.Добавить("", "ФИОБух");
	Сведения.Добавить("", "ФИО");
	Сведения.Добавить("", "ФИОИсп");
	Сведения.Добавить("", "ТелИсп");
	Сведения.Добавить("", "ТелОрганизации");
	Сведения.Добавить("", "ТелСлуж");
	
	ОргСведения = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(СтруктураРеквизитовФормы.Организация, ДатаПодписи, Сведения);
	
	Если НЕ ВПрограммеИзмененаДатаПодписи Тогда
		ИННЮЛ = "";
		КППЮЛ = "";
		НаимЮЛПол = "";
		РегистрационныйНомерФСС = "";
		РегНомПФР = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(
			СтруктураРеквизитовФормы.Организация, СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "РегНомПФР").РегНомПФР;
	КонецЕсли;
	
	ФИОРук = "";
	ФИОБух = "";
	ФИО = "";
	ФИОИсп = "";
	ТелИсп = "";
	ТелОрганизации = "";
	ТелСлуж = "";
	
	Если НЕ ВПрограммеИзмененаДатаПодписи Тогда
		ОргСведения.Свойство("ИННЮЛ", ИННЮЛ);
		ОргСведения.Свойство("КППЮЛ", КППЮЛ);
		ОргСведения.Свойство("НаимЮЛПол", НаимЮЛПол);
		ОргСведения.Свойство("РегистрационныйНомерФСС", РегистрационныйНомерФСС);
	КонецЕсли;
	
	ОргСведения.Свойство("ФИОРук", ФИОРук);
	ОргСведения.Свойство("ФИОБух", ФИОБух);
	ОргСведения.Свойство("ФИО", ФИО);
	ОргСведения.Свойство("ФИОИсп", ФИОИсп);
	ОргСведения.Свойство("ТелИсп", ТелИсп);
	ОргСведения.Свойство("ТелОрганизации", ТелОрганизации);
	ОргСведения.Свойство("ТелСлуж", ТелСлуж);
	
	Если ПБОЮЛ Тогда
		НаимЮлПол = ФИО;
		ТелОрганизации = ТелСлуж;
		ФИОРук = ФИО;
		ФИОБух = "";
		ФИОИсп = "";
		ТелИсп = "";
	КонецЕсли;
	
	ТелОрганизации = ПолучитьЦифрыТелефона(ТелОрганизации);
	
	РегламентированнаяОтчетность.ПолучитьЗначениеОКВЭД(ДатаПодписи, СтруктураРеквизитовФормы);
	
	ОКВЭД = "";
	РегламентированнаяОтчетностьКлиентСервер.УстановитьЗначениеОКВЭД(ДатаПодписи,
																	 СтруктураРеквизитовФормы,
																	 ОКВЭД);
																		 
	Если Сред(ОКВЭД, 2, 1) = "." Тогда
		ОКВЭД = Лев(ОКВЭД, 1) + " " + Сред(ОКВЭД, 2);
	КонецЕсли;
		
	Если Сред(ОКВЭД, 5, 1) = "." Тогда
		ОКВЭД = Лев(ОКВЭД, 4) + " " + Сред(ОКВЭД, 5);
	КонецЕсли;																 
		
	ТабличныйДокумент.Области.ОКВЭД.Значение = ОКВЭД;
	
	Если ВПрограммеИзмененаДатаПодписи Тогда
		ТабличныйДокумент.Области.ПрПодп.Значение = "1";
		ТабличныйДокумент.Области.ОргПодписантФамилия.Значение = ФИОРук;
		ЗапретитьВводДокументаПредставителя(ЭтаФорма);
		Возврат;
	КонецЕсли;
	
	Если (СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация)
		ИЛИ (НЕ ЗначениеЗаполнено(ТабличныйДокумент.Области.ОргНазв.Значение)) Тогда
		ТабличныйДокумент.Области.ОргНазв.Значение = НаимЮЛПол;
	КонецЕсли;
	
	Если (СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация)
		ИЛИ (НЕ ЗначениеЗаполнено(ТабличныйДокумент.Области.ПрПодп.Значение)) ИЛИ (СменилсяПризнакПодписанта) Тогда
		ТабличныйДокумент.Области.ПрПодп.Значение = "1";
	КонецЕсли;
	
	Если (СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация)
		ИЛИ (НЕ ЗначениеЗаполнено(ТабличныйДокумент.Области.ОргПодписантФамилия.Значение)) ИЛИ (СменилсяПризнакПодписанта) Тогда
		ТабличныйДокумент.Области.ОргПодписантФамилия.Значение = ФИОРук;
	КонецЕсли;
	
	Если (СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация)
		ИЛИ (НЕ ЗначениеЗаполнено(ТабличныйДокумент.Области.ДокУпПред.Значение)) ИЛИ (СменилсяПризнакПодписанта) Тогда
		ЗапретитьВводДокументаПредставителя(ЭтаФорма);
	КонецЕсли;
	
	Если (СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация)
		ИЛИ (НЕ ЗначениеЗаполнено(РегламентированнаяОтчетностьКлиентСервер.ВернутьЗначениеПараметраСЛиста(ЭтаФорма, "Титульный", "ИНН"))) Тогда
		ТабличныйДокумент.Области.ИНН.Значение = ИННЮЛ;
	КонецЕсли;
	
	Если (СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация)
		ИЛИ (НЕ ЗначениеЗаполнено(РегламентированнаяОтчетностьКлиентСервер.ВернутьЗначениеПараметраСЛиста(ЭтаФорма, "Титульный", "КПП"))) Тогда
		ТабличныйДокумент.Области.КПП.Значение = КППЮЛ;
	КонецЕсли;
	
	Если (СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация)
		ИЛИ (НЕ ЗначениеЗаполнено(РегламентированнаяОтчетностьКлиентСервер.ВернутьЗначениеПараметраСЛиста(ЭтаФорма, "Титульный", "ТелОрганизации"))) Тогда
		ТабличныйДокумент.Области.ТелОрганизации.Значение = ТелОрганизации;
	КонецЕсли;
			
	Если (СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация)
		ИЛИ (НЕ ЗначениеЗаполнено(РегламентированнаяОтчетностьКлиентСервер.ВернутьЗначениеПараметраСЛиста(ЭтаФорма, "Титульный", "НомРег"))) Тогда
		Если СтрДлина(РегНомПФР) < 14 И СтрДлина(РегНомПФР)<> 0 Тогда
			Если Сред(РегНомПФР, 4, 1) <> "-" Тогда
				РегНомПФР = Лев(РегНомПФР,3) + "-" + Сред(РегНомПФР, 4);
			КонецЕсли;
			Если Сред(РегНомПФР, 8, 1) <> "-" Тогда
				РегНомПФР = Лев(РегНомПФР,7) + "-" + Сред(РегНомПФР, 8);
			КонецЕсли;
		КонецЕсли;
		ТабличныйДокумент.Области.НомРег.Значение = РегНомПФР;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСодержательнуюЧасть(УзелРодитель)
	
	Титульный = мДанныеОтчета.ПолеТабличногоДокументаТитульный;
	Раздел12  = мДанныеОтчета.ПолеТабличногоДокументаРаздел12;
	Раздел3   = мДанныеОтчета.ПолеТабличногоДокументаРаздел3;
	
	УзелРаздел1 = ПолучитьПодчиненныйЭлемент(УзелРодитель, "Раздел1");
	ЗаполнитьДаннымиУзел(Раздел12, УзелРаздел1);
	
	УзелРаздел2 = ПолучитьПодчиненныйЭлемент(УзелРодитель, "Раздел2");
	ЗаполнитьДаннымиУзел(Раздел12, УзелРаздел2);
	
	Если НЕ СтраницаПуста(Раздел3, "Раздел3", УзелРодитель.Владелец()) Тогда
		УзелРаздел3 = ПолучитьПодчиненныйЭлемент(УзелРодитель, "Раздел3");
		УзелПерерасчет = ПолучитьПодчиненныйЭлемент(УзелРаздел3, "Перерасчет");
		НомерСтроки = 1;
		Пока Раздел3.Свойство("П000300000101_" + Формат(НомерСтроки, "ЧГ=")) Цикл
			ЭкзУзелПерерасчет = СкопироватьУзел(УзелРаздел3, УзелПерерасчет);
			ЗаполнитьДаннымиУзел(Раздел3, ЭкзУзелПерерасчет, НомерСтроки);
			НомерСтроки = НомерСтроки + 1;
		КонецЦикла;
		УзелИтого = ПолучитьПодчиненныйЭлемент(УзелРаздел3, "Итого");
		ВывестиПоказательВXML(УзелИтого, Раздел3[УзелИтого.Ключ]);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗапретитьВводДокументаПредставителя(Форма)
	
	Форма.ТабличныйДокумент.Области.ДокУпПред.Значение = "";
	Форма.мСтруктураДокУпПред.Вставить("Серия", "");
	Форма.мСтруктураДокУпПред.Вставить("Номер", "");
	Форма.мСтруктураДокУпПред.Вставить("ДатаВыдачи", "");
	Форма.мСтруктураДокУпПред.Вставить("КемВыдан", "");
	Форма.мСтруктураДокУпПред.Вставить("ДействуетС", "");
	Форма.мСтруктураДокУпПред.Вставить("ДействуетПо", "");
	Форма.ТабличныйДокумент.Области.ДокУпПред.Защита = Истина;
	Форма.ТабличныйДокумент.Области.ДокУпПред.ЦветФона = Форма.СтруктураРеквизитовФормы.ЦветБелый;
	
	Форма.ТабличныйДокумент.Области.ОргПредНаим.Значение = "";
	Форма.ТабличныйДокумент.Области.ОргПредНаим.Защита = Истина;
	Форма.ТабличныйДокумент.Области.ОргПредНаим.ЦветФона = Форма.СтруктураРеквизитовФормы.ЦветБелый;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтруктуруЗависимыхЯчеекДляАвторасчета()
	
	СтруктураЗависимыхЯчеекДляАвторасчета = Новый Структура;
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100011403", "П000100011103;П000100011203;П000100011303");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100012003", "П000300000105");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100013003", "П000100010003;П000100011003;П000100012003");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100014403", "П000100014103;П000100014203;П000100014303");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100015003", "П000100010003;П000100011003;П000100012003;П000100014003");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000200022003", "П000200020003;П000200021003");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000200022004", "П000200020004;П000200021004");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000200022005", "П000200020005;П000200021005");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000200022006", "П000200020006;П000200021006");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000300000205", "П000300000105");
	
КонецПроцедуры

&НаСервере
Процедура Инициализация(БезОткрытияФормы = Ложь) Экспорт
	
	Перем ИсходноеКоличествоСтрокГруппы;
	
	СтруктураРеквизитовФормы.мБезОткрытияФормы = БезОткрытияФормы;
	
	ЗаполнитьНачальныеНастройки();
	
	ЗаполнитьСтруктуруЗависимыхЯчеекДляАвторасчета();
	
	ЗаполнитьСтруктуруИменКолонокМногострочныхРазделов();
	
	ФормироватьСтруктуруСтраницОтчета();
	
	ФормироватьСтруктуруСвойствСтраниц();
	
	Если НЕ БезОткрытияФормы Тогда
		СформироватьСпискиВыбора();
	КонецЕсли;
	
	НачальнаяПодготовкаФормы();
	
	СформироватьДеревоРазделовОтчетаНаСервере();
	
	СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
	
	ЗаполнитьПустыеСтруктурыДанных();
	
	РегламентированнаяОтчетность.ДобавитьКнопкуПрисоединенныеФайлы(ЭтаФорма);
	
	РегламентированнаяОтчетностьКлиентСервер.ПриИнициализацииФормыРегламентированногоОтчета(ЭтаФорма, "ПФР");
	
	Если СтруктураРеквизитовФормы.СформироватьФормуОтчетаАвтоматически Тогда
		ЗаполнитьАвтоНаСервере();
		Если Элементы.Расшифровать.Видимость Тогда
			Элементы.Расшифровать.Доступность = Истина;
			Элементы.ТабличныйДокументКонтекстноеМенюРасшифровать.Доступность = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НачальныеОперацииСМногострочнымиБлоками()
	Перем ИсходноеКоличествоСтрокГруппы;
	
	Для Каждого ЭлементСтруктуры Из мСтруктураМногострочныхРазделов Цикл
		ИмяГруппы = ЭлементСтруктуры.Ключ;
		СтруктураГруппы = ЭтаФорма[ЭлементСтруктуры.Значение];
		
		мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);
		
		Для НСтр = 1 По ИсходноеКоличествоСтрокГруппы Цикл
			
			СтруктураГруппы.Добавить();
			
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаЗакраскиТитульного()
	
	Если СтруктураДанныхТитульный.ПрПодп = "1" Тогда
		
		ТабличныйДокумент.Области.ОргПредНаим.Защита = Истина;
		ТабличныйДокумент.Области.ОргПредНаим.ЦветФона = СтруктураРеквизитовФормы.ЦветБелый;
		
		ТабличныйДокумент.Области.ДокУпПред.Защита = Истина;
		ТабличныйДокумент.Области.ДокУпПред.ЦветФона = СтруктураРеквизитовФормы.ЦветБелый;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьОтчет(Команда)
	
	РегламентированнаяОтчетностьКлиент.МеханизмыОчисткиРегламентированныхОтчетов(ЭтаФорма, "ОчиститьВесьОтчет");
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТекущуюСтраницу(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОчиститьТекущуюСтраницуЗавершение", ЭтотОбъект);
	РегламентированнаяОтчетностьКлиент.МеханизмыОчисткиРегламентированныхОтчетов(ЭтаФорма,
		"ОчиститьТекущийЭкземплярМногостраничногоРаздела"
		+ Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим,
		ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТекущуюСтраницуЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	СохранитьДанныеРаздела(СтруктураРеквизитовФормы.НаимТекущегоРаздела, Ложь);
	
	ВывестиМакетВТаблДокНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела,
		Элементы.РазделыОтчета.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета);
	
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
		
		НомерКорректировки = ТабличныйДокумент.Области.НомерКорректировки.Значение;
		
		СтруктураРеквизитовФормы.ВидДокумента = ?(НомерКорректировки = 0, 0, 1);
		
		ДатаПодписи = ТабличныйДокумент.Области.ДатаПодписи.Значение;
		
	КонецЕсли;
	
	РасчетНаКлиенте(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
КонецПроцедуры

&НаСервере
Процедура НачальнаяПодготовкаФормы()

	Перем ИсходноеКоличествоСтрокГруппы;
    
 	Если СтруктураРеквизитовФормы.СформироватьФормуОтчетаАвтоматически Тогда
		СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация = Истина;
	Иначе
		СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация = Ложь;
	КонецЕсли;
	
	СтруктураРеквизитовФормы.мДокументВосстановлен = Ложь;

	СтруктураРеквизитовФормы.мАвтоВыборКодов = Ложь;
	
	СтруктураРеквизитовФормы.ФлагСохранения = Ложь;
	СтруктураРеквизитовФормы.мРежимПечати = Ложь;
    
	СтруктураРеквизитовФормы.ВидДокумента = 0;
	НомерКорректировки = 0;
	ТабличныйДокумент.Области.НомерКорректировки.Значение = 0;
	
	// создаем структуру документа, подтверждающего полномочия представителя    		
	мСтруктураДокУпПред = Новый Структура;
	мСтруктураДокУпПред.Вставить("Серия", "");
	мСтруктураДокУпПред.Вставить("Номер", "");
	мСтруктураДокУпПред.Вставить("ДатаВыдачи", "");
	мСтруктураДокУпПред.Вставить("КемВыдан", "");
	мСтруктураДокУпПред.Вставить("ДействуетС", "");
	мСтруктураДокУпПред.Вставить("ДействуетПо", "");
	
	СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация = Ложь;
	
	Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
		
		НачальныеОперацииСМногострочнымиБлоками();
		
		Если СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено Тогда
			// документ скопирован
			ВосстановитьСохраненныеДанные();
			ПроверкаЗакраскиТитульного();
		Иначе
			
			// Это новый документ.
			// Установим реквизиты формы по умолчанию
			СтруктураРеквизитовФормы.ЕдиницаИзмерения         = Перечисления.ПорядкиОкругленияОтчетности.Окр1;
			СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = 2;
			ОтобразитьНомерКорректировки(ЭтаФорма);
			КопироватьДанныеФормы(мДеревоСтраницОтчета, мДеревоВыбранныхСтраниц);
			
		КонецЕсли;
		
		Модифицированность = Истина;
		
	Иначе
		// При открытии или при копировании сохраненного
		// отчета восстанавливаем сохраненные данные.
		
		ВосстановитьСохраненныеДанные();
		ПроверкаЗакраскиТитульного();
		
		Если ЗначениеЗаполнено(СтруктураРеквизитовФормы.мСкопированаФорма) Тогда
			
			СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено;
			
			Модифицированность = Истина;
			
		КонецЕсли;
		
		Если НЕ СтруктураРеквизитовФормы.мБезОткрытияФормы
           И НЕ СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
				   
        	ЗаблокироватьДанныеДляРедактирования(СтруктураРеквизитовФормы.мСохраненныйДок, , ЭтаФорма.УникальныйИдентификатор);

		КонецЕсли;
		
	КонецЕсли;
	
	РегламентированнаяОтчетность.ПолучитьСведенияОПоказателяхОтчета(ЭтаФорма);
	
	Если НЕ СтруктураРеквизитовФормы.ОтображатьКнопкуЗаполнить Тогда
		Элементы.Заполнить.Видимость = Ложь;
	КонецЕсли;
	
	Если НЕ СтруктураРеквизитовФормы.ОтображатьКнопкуРасшифровать Тогда
		Элементы.Расшифровать.Видимость = Ложь;
		Элементы.ТабличныйДокументКонтекстноеМенюРасшифровать.Видимость = Ложь;
	КонецЕсли;
	
	ПоказатьПериод();

	Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено
	 Или СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация
	 ИЛИ СтруктураРеквизитовФормы.СформироватьФормуОтчетаАвтоматически Тогда

		ЗаполнитьДатуВЯчейкахНаСервере();
		ЗаполнитьСведенияОбОрганизации();
		
	Иначе
		
		РегламентированнаяОтчетность.ПолучитьЗначениеОКВЭД(ДатаПодписи, СтруктураРеквизитовФормы);

	КонецЕсли;
	
    СтруктураРеквизитовФормы.НаимОрганизации = СтруктураРеквизитовФормы.Организация.Наименование;
	
	СтруктураРеквизитовФормы.ИП = НЕ РегламентированнаяОтчетностьВызовСервера.ЭтоЮридическоеЛицо(СтруктураРеквизитовФормы.Организация);
	
	УстановитьФорматВыводаВПоляхВводаНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела);

	ТабличныйДокумент.Области.НомерПачки.Значение = НомерПачки;
	
КонецПроцедуры

&НаСервере
Функция ОбновитьВариантыЗаполнения()
	Перем МассивВариантовЗаполненияСтраниц;

	ЕстьИзменения = Ложь;

	// Подлежат обновлению следующие структуры:
	// 1.Пользовательские настройки вариантов заполнения таблиц

	// Сначала создадим эталонные модели вариантов автозаполнения таблиц.
	// Их определяем по макету СоставПоказателей
	МакетСоставаПоказателей = РеквизитФормыВЗначение("Отчет").ПолучитьМакет(СтруктураРеквизитовФормы.мСоставПоказателей);

	ОписаниеТиповСтрока15  = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(15));

	ОписаниеТиповСтрока100 = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100));
	
	ОписаниеТиповЧисло1    = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(1));

	ОписаниеТиповЧисло15   = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2));

	ЕстьИзменения = Ложь;

	Для Инд = 0 По МакетСоставаПоказателей.Области.Количество() - 1 Цикл
		// организован цикл по именованным областям макета,
		// содержащим состав показателей и варианты автозаполнения
		// таблиц на каждой странице основной панели формы.

		ТекОбласть  = МакетСоставаПоказателей.Области[Инд];
		ИмяСтраницы = ТекОбласть.Имя;

		// Таблица значений содержит информацию о вариантах заполнения показателя отчета.
		// В колонках таблицы значений отображается следующая информация:
		//   - имя ячейки (код показателя);
		//   - вариант заполнения ячейки;
		//   - вычисленное по данным ИБ значение ячейки;
		//   - величина автокорректировки значения ячейки;
		//   - примечание к ячейке.
		//
		ТаблицаВариантыЗаполнения = Новый ТаблицаЗначений;
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "КодПоказателя",     ОписаниеТиповСтрока15  );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "ВариантЗаполнения", ОписаниеТиповЧисло1    );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "ЗначениеАвто",      ОписаниеТиповЧисло15   );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "Дельта",            ОписаниеТиповЧисло15   );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "Комментарий",       ОписаниеТиповСтрока100 );
		
		Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
			// перебираем строки макета

			// Код показателя (по составу показателей) определяется по первой колонке макета
			КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
			ИмяПоказателя = КодПоказателя;

			Если КодПоказателя = "===" Тогда         // признак конечной строки
				Прервать;
			КонецЕсли;

			Если Лев(КодПоказателя, 2) = "//" Тогда  // пропускаем комментарии
				Продолжить;
			КонецЕсли;

			// код показателя по форме отчете (имя ячейки в полях табличного документа формы)
			КодПоказателяПоФорме = СокрЛП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
			// вариант заполнения ячейки определяется по колонке 6 макета
			стрВариантЗаполнения = РегламентированнаяОтчетность.ПолучитьВариантЗаполненияПоказателяРегОтчета(МакетСоставаПоказателей, Ном);

			чВариантЗаполнения   = ? (ПустаяСтрока(стрВариантЗаполнения), 0, Число(стрВариантЗаполнения));
			Если чВариантЗаполнения <> 0 Тогда
				// Если в колонке 6 задан варианет заполнения показателя, 
				// то его значение может определяться по данным ИБ.
				// Дополняем таблицу значений вариантов заполнения
				НоваяСтрока = ТаблицаВариантыЗаполнения.Добавить();
				НоваяСтрока.КодПоказателя      = ? (Не ПустаяСтрока(КодПоказателяПоФорме), КодПоказателяПоФорме, КодПоказателя);
				НоваяСтрока.ВариантЗаполнения  = чВариантЗаполнения;
			КонецЕсли;

		КонецЦикла;

		Если Не мСтруктураВариантыЗаполнения.Свойство(ИмяСтраницы, МассивВариантовЗаполненияСтраниц) Тогда
			
			МассивВариантовЗаполненияСтраниц = ЭтаФорма["ТаблицаВариантыЗаполнения" + ИмяСтраницы];
			
			Если ТаблицаВариантыЗаполнения.Количество() > 0 Тогда
								
				// Рассмотрим вариант, когда в предыдущей версии формы по данной странице
				// не было предусмотрено автозаполнение по данным ИБ.
				// Добавим такую возможность в пользовательскую настройку
                				
				МассивВариантовЗаполненияСтраниц.Очистить();
				// Первым элементом массива является "эталонная" таблица значений вариантов заполнения
				МассивВариантовЗаполненияСтраниц.Добавить(ТаблицаВариантыЗаполнения);

				// сохраняем варианты заполнения таблиц на данной странице
				мСтруктураВариантыЗаполнения.Вставить(ИмяСтраницы, ИмяСтраницы);

				ЕстьИзменения = Истина;				
				
			КонецЕсли;
		Иначе
			
			МассивВариантовЗаполненияСтраниц = ЭтаФорма["ТаблицаВариантыЗаполнения" + ИмяСтраницы];
			
			Если ТаблицаВариантыЗаполнения.Количество() = 0 Тогда
				// Рассмотрим вариант, когда в предыдущей версии формы по данной странице
				// было предусмотрено автозаполнение таблицы, а в текущей версии - отключено.
				// В этом случае из структуры вариантов автозаполнения удаляем элемент,
				// хранящий настройки вариантов автозаполнения текущей станицы.
				мСтруктураВариантыЗаполнения.Удалить(ИмяСтраницы);

				ЕстьИзменения = Истина;
			Иначе
				// Рассмотрим вариант, когда и в предыдущей, и в текущей версии формы было предусмотрено
				// автозаполнение текущей страницы. В этом случае обновляем таблицу значений, содержащей
				// пользовательские настройки вариантов автозаполнения текущей страницы.

				Для каждого ЭлементМассива Из МассивВариантовЗаполненияСтраниц Цикл
					
					ЭлементМассива = ЭлементМассива.ТаблицаВариантовЗаполнения;
					
					Для каждого СтрокаТаблицы Из ТаблицаВариантыЗаполнения Цикл
						КодПоказателя     = СтрокаТаблицы.КодПоказателя;
						ВариантЗаполнения = СтрокаТаблицы.ВариантЗаполнения;

						Если ЭлементМассива.НайтиСтроки(Новый Структура("КодПоказателя", КодПоказателя)).Количество() = 0 Тогда	
							// Рассмотри вариант, когда в новой версии формы список реквизитов,
							// заполняемых автоматически по данным ИБ, дополнен новым реквизитом.
							НоваяСтрока = ЭлементМассива.Добавить();
							НоваяСтрока.КодПоказателя     = КодПоказателя;
							НоваяСтрока.ВариантЗаполнения = ВариантЗаполнения;

							ЕстьИзменения = Истина;
						КонецЕсли;
					КонецЦикла;

					ТаблДляЦикла = ЭлементМассива.Выгрузить();

					Для каждого СтрокаТаблицы Из ТаблДляЦикла Цикл
						КодПоказателя = СтрокаТаблицы.КодПоказателя;

						Если ТаблицаВариантыЗаполнения.Найти(КодПоказателя, "КодПоказателя") = Неопределено Тогда
							// Рассмотрим вариант, когда в предыдущей версии отчета для данной страницы
							// было предусмотрено автозаполнение ячейки по коду КодПоказателя,
							// а в текущей версии - отключено. В этом случае удаляем эту ячейку
							// из таблицы пользовательских настроек вариантов автозаполнения.
							СтрокиВЭлементеМассива = ЭлементМассива.НайтиСтроки(Новый Структура("КодПоказателя", КодПоказателя));
							Если  СтрокиВЭлементеМассива.Количество() > 0 Тогда
								ЭлементМассива.Удалить(СтрокиВЭлементеМассива[0]);
								ЕстьИзменения = Истина;
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
					
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;

	КонецЦикла;

	Возврат ЕстьИзменения;

КонецФункции

&НаСервере
Функция ОбновитьНастройкиСтраниц()

	ЕстьИзменения = Ложь;

	// формируем дерево значений - пользовательских настройки страниц отчета
	мПользовательскиеНастройкиСтраниц = РеквизитФормыВЗначение("мДеревоСтраницОтчета").Скопировать();

	// формируем дерево значений - настройки страниц отчета обновленной формы
	ФормироватьСтруктуруСтраницОтчета();

	// Сначала проверяем, не изменилась ли структура настроек страниц (колонки дерева)
	Для каждого ИсхКолонка Из РеквизитФормыВЗначение("мДеревоСтраницОтчета").Колонки Цикл

		Если мПользовательскиеНастройкиСтраниц.Колонки.Найти(ИсхКолонка.Имя) = Неопределено Тогда
			// добавиляем новую колонку
			мПользовательскиеНастройкиСтраниц.Колонки.Добавить(ИсхКолонка.Имя, ИсхКолонка.ТипЗначения, ИсхКолонка.Заголовок, ИсхКолонка.Ширина);
			мПользовательскиеНастройкиСтраниц.ЗагрузитьКолонку(РеквизитФормыВЗначение("мДеревоСтраницОтчета").ВыгрузитьКолонку(ИсхКолонка.Имя), ИсхКолонка.Имя);

			ЕстьИзменения = Истина;
		КонецЕсли;

	КонецЦикла;

	// Выполняем обратную задачу:
	// удаляем отсутствующие колонки
	Для каждого ТекКолонка Из мПользовательскиеНастройкиСтраниц.Колонки Цикл

		Если РеквизитФормыВЗначение("мДеревоСтраницОтчета").Колонки.Найти(ТекКолонка.Имя) = Неопределено Тогда
			// удаляем отсутствующую колонку
			мПользовательскиеНастройкиСтраниц.Колонки.Удалить(мПользовательскиеНастройкиСтраниц.Колонки.Индекс(ТекКолонка));

			ЕстьИзменения = Истина;
		КонецЕсли;

	КонецЦикла;

	// Обновляем строки дерева значений - пользовательских настроек:
	//
	// добавляем новые строки и удаляем лишние:
	Если мДеревоСтраницОтчета.ПолучитьЭлементы().Количество() <> мПользовательскиеНастройкиСтраниц.Строки.Количество() Тогда

		КолвоКолонок     = РеквизитФормыВЗначение("мДеревоСтраницОтчета").Колонки.Количество();

		// добавляем новые строки
		Для каждого Строка Из мДеревоСтраницОтчета.ПолучитьЭлементы() Цикл

			Если мПользовательскиеНастройкиСтраниц.Найти(Строка.ИмяСтраницы, "ИмяСтраницы") = Неопределено Тогда

				НоваяСтрока = мПользовательскиеНастройкиСтраниц.Строки.Добавить();
				Для НомКолонки = 0 По (КолвоКолонок - 1) Цикл
				
					НоваяСтрока[НомКолонки] = Строка[НомКолонки];
				
				КонецЦикла;

			КонецЕсли;

			// обновляем строки второго уровня
			Если Строка.Строки.Количество() > 0 Тогда

				Для каждого Строка2 Из Строка.Строки Цикл

					Если мПользовательскиеНастройкиСтраниц.Найти(Строка2.ИмяСтраницы, "ИмяСтраницы") = Неопределено Тогда

						НоваяСтрока2 = НоваяСтрока.Строки.Добавить();
						Для НомКолонки = 0 По (КолвоКолонок - 1) Цикл

							НоваяСтрока2[НомКолонки] = Строка2[НомКолонки];

						КонецЦикла;

					КонецЕсли;

				КонецЦикла; 

			КонецЕсли; 

		КонецЦикла;

		// удаляем лишние строки
		Для каждого Строка Из мПользовательскиеНастройкиСтраниц Цикл

			Если РеквизитФормыВЗначение("мДеревоСтраницОтчета").Найти(Строка.ИмяСтраницы, "ИмяСтраницы") = Неопределено Тогда

				мПользовательскиеНастройкиСтраниц.Строки.Удалить(мПользовательскиеНастройкиСтраниц.Строки.Индекс(Строка));

			КонецЕсли;

		КонецЦикла;

		ЕстьИзменения = Истина;
	КонецЕсли;

	Для каждого ТекСтрока Из мДеревоСтраницОтчета.ПолучитьЭлементы() Цикл

		НомСтр = мДеревоСтраницОтчета.ПолучитьЭлементы().Индекс(ТекСтрока);

		// устанавливаем признаки предопределенных установок выгружаемых страниц (значение флажка = 2);
		Если ТекСтрока.ВыгрузитьСтраницу = 2 Тогда
			
			Если мПользовательскиеНастройкиСтраниц.Строки[НомСтр].ВыгрузитьСтраницу <> 2 Тогда
				мПользовательскиеНастройкиСтраниц.Строки[НомСтр].ВыгрузитьСтраницу = 2;
				ЕстьИзменения = Истина;
			КонецЕсли;

		КонецЕсли;
		
		// обновляем представление
		Если ТекСтрока.Представление <> мПользовательскиеНастройкиСтраниц.Строки[НомСтр].Представление Тогда
			мПользовательскиеНастройкиСтраниц.Строки[НомСтр].Представление = ТекСтрока.Представление;
			ЕстьИзменения = Истина;
		КонецЕсли;

		// обновляем имя поля табличного документа
		Если ТекСтрока.ИмяПоляТабличногоДокум <> мПользовательскиеНастройкиСтраниц.Строки[НомСтр].ИмяПоляТабличногоДокум Тогда
			мПользовательскиеНастройкиСтраниц.Строки[НомСтр].ИмяПоляТабличногоДокум = ТекСтрока.ИмяПоляТабличногоДокум;
			ЕстьИзменения = Истина;
		КонецЕсли;

	КонецЦикла; 

	ЗначениеВРеквизитФормы(мПользовательскиеНастройкиСтраниц.Скопировать(), "мДеревоСтраницОтчета");

	Возврат ЕстьИзменения;

КонецФункции

&НаКлиенте
Процедура ОбработкаВыбораВПолеТабличногоДокумента(Элемент, Область, СтандартнаяОбработка)
	
	ОбластьИмя = Область.Имя;
	
	Если СтрЧислоВхождений(ОбластьИмя, "ДобавитьСтроку") > 0 Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ДобавитьСтроку("");
		
	ИначеЕсли СтрЧислоВхождений(ОбластьИмя, "УдалитьСтроку") > 0 И Область.Гиперссылка Тогда
		
		СтандартнаяОбработка = Ложь;
		
		УдалитьСтроку("");
		
	КонецЕсли;
	
	Если РегламентированнаяОтчетностьКлиент.ВыбраннаяОбластьРегламентированногоОтчетаНеВерна(ЭтаФорма, Область, СтандартнаяОбработка) Тогда
		Возврат;
	КонецЕсли;

	Если ОбластьИмя = "НомерКорректировки" Тогда
		
		НомерКорректировки = ТабличныйДокумент.Области.НомерКорректировки.Значение;
		
		СтруктураРеквизитовФормы.ВидДокумента = ?(Область.Значение = 0, 0, 1);
		
		Модифицированность = Истина;
	
	ИначеЕсли СтрНайти(ОбластьИмя, "ТелОрганизации") > 0 Тогда
		
		ТелОрганизации = СокрЛП(РегламентированнаяОтчетностьКлиентСервер.ВернутьЗначениеПараметраСЛиста(ЭтаФорма, "Титульный", "ТелОрганизации"));
		ТабличныйДокумент.Области.ТелОрганизации.Значение = ТелОрганизации;	   
		
	ИначеЕсли СтрНайти(ОбластьИмя, "ДокУпПред") > 0 Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("СтруктураДокумента", мСтруктураДокУпПред);
		
		ФормаВводаДокументПредставителя = ПолучитьФорму("Отчет.РегламентированныйОтчетРВ3.Форма.ФормаВводаДоверенность", ПараметрыФормы);
		
		ДополнительныеПараметры = Новый Структура("Область, ОбластьИмя, СтандартнаяОбработка, Элемент", Область, ОбластьИмя, СтандартнаяОбработка, Элемент);
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаВыбораВПолеТабличногоДокументаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ФормаВводаДокументПредставителя.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
		ФормаВводаДокументПредставителя.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		ФормаВводаДокументПредставителя.Открыть();
		Возврат;
	КонецЕсли;
	
	ПараметрВводаПоля = СвойстваПоказателей.НайтиСтроки(Новый Структура("Показатель", ОбластьИмя));
	Если ПараметрВводаПоля.Количество() = 0 Тогда
		
		ПараметрВводаПоля = Неопределено;
		
		Для Каждого Стр из СвойстваПоказателей Цикл
			Если Лев(Область.Имя, СтрДлина(Стр.Показатель)) = Стр.Показатель Тогда
				ПараметрВводаПоля = Стр;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	Иначе
		ПараметрВводаПоля = ПараметрВводаПоля[0];
	КонецЕсли;
	
	Если ПараметрВводаПоля <> Неопределено И ПараметрВводаПоля.ТаблицаЗначений.Количество() > 0 Тогда
		
		ВвестиПоказатель(Элемент, Область, ПараметрВводаПоля.Показатель, Ложь, ПараметрВводаПоля.ТекстПриВыборе, ПараметрВводаПоля.ТаблицаЗначений, СтандартнаяОбработка);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТабличныйДокументПриАктивизацииОбласти(Элемент)
	
	Элементы.ТабличныйДокументКонтекстноеМенюДобавитьСтроку.Доступность = Ложь;
	Элементы.ТабличныйДокументКонтекстноеМенюУдалитьСтроку.Доступность  = Ложь;
	
	Если СтрЧислоВхождений(Элемент.ТекущаяОбласть.Имя, "П0003000001") > 0
		И СтрЧислоВхождений(Элемент.ТекущаяОбласть.Имя, "УдалитьСтроку") = 0 Тогда
		
		Элементы.ТабличныйДокументКонтекстноеМенюДобавитьСтроку.Доступность = Истина;
		
		ПозицияЗнакаПодчеркивания = СтрНайти(Элемент.ТекущаяОбласть.Имя, "_");
		
		Если НЕ ПозицияЗнакаПодчеркивания = Неопределено Тогда
			
			КодОбласти = Лев(Элемент.ТекущаяОбласть.Имя, ПозицияЗнакаПодчеркивания);
			
			Если НЕ ТабличныйДокумент.Области.Найти(КодОбласти + "2") = Неопределено Тогда
				Элементы.ТабличныйДокументКонтекстноеМенюУдалитьСтроку.Доступность = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораВПолеТабличногоДокументаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Область = ДополнительныеПараметры.Область;
	ОбластьИмя = ДополнительныеПараметры.ОбластьИмя;
	СтандартнаяОбработка = ДополнительныеПараметры.СтандартнаяОбработка;
	Элемент = ДополнительныеПараметры.Элемент;
	
	Если Результат <> Неопределено Тогда
		
		мСтруктураДокУпПред = Результат;
		Текст = "";
		
		Текст = ДобавитьРеквизит(Текст, мСтруктураДокУпПред.Серия, "серия ");
		Текст = ДобавитьРеквизит(Текст, мСтруктураДокУпПред.Номер, " № ");
		Текст = ДобавитьРеквизит(Текст, Формат(мСтруктураДокУпПред.ДатаВыдачи,"ДФ=дд.ММ.гггг"), " от ");
		Текст = ДобавитьРеквизит(Текст, мСтруктураДокУпПред.КемВыдан, " выдан: ");
		Текст = ДобавитьРеквизит(Текст, Формат(мСтруктураДокУпПред.ДействуетС,"ДФ=дд.ММ.гггг"), ", действует с ");
		Текст = ДобавитьРеквизит(Текст, Формат(мСтруктураДокУпПред.ДействуетПо,"ДФ=дд.ММ.гггг"), " по ");
		
		ТабличныйДокумент.Области.ДокУпПред.Значение = Текст;
		Модифицированность = Истина;
		
	КонецЕсли;
	
	ПараметрВводаПоля = СвойстваПоказателей.НайтиСтроки(Новый Структура("Показатель", ОбластьИмя));
	Если ПараметрВводаПоля.Количество() = 0 Тогда
		
		ПараметрВводаПоля = Неопределено;
		
		Для Каждого Стр из СвойстваПоказателей Цикл
			Если Лев(Область.Имя, СтрДлина(Стр.Показатель)) = Стр.Показатель Тогда
				ПараметрВводаПоля = Стр;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	Иначе
		ПараметрВводаПоля = ПараметрВводаПоля[0];
	КонецЕсли;
	
	Если ПараметрВводаПоля <> Неопределено И ПараметрВводаПоля.ТаблицаЗначений.Количество() > 0 Тогда
		
		ВвестиПоказатель(Элемент, Область, ПараметрВводаПоля.Показатель, Ложь, ПараметрВводаПоля.ТекстПриВыборе, ПараметрВводаПоля.ТаблицаЗначений, СтандартнаяОбработка);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Очистить(ВыполняемоеОповещение = Неопределено) Экспорт
	
	РегламентированнаяОтчетностьКлиент.Очистить(ЭтаФорма, ВыполняемоеОповещение);
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьТабличноеПолеНаСервере(ВыбТабличноеПолеИмя) Экспорт

	ОчиститьТабличноеПоле(ЭтаФорма, ВыбТабличноеПолеИмя);

КонецПроцедуры

&НаСервере
Процедура ОчиститьНаСервере() Экспорт
	
	СтруктураДанныхРаздел12.Очистить();
	СтруктураДанныхРаздел3.Очистить();
	
	Для Каждого мнгРаздел Из мСтруктураМногострочныхРазделов Цикл
		ЭтаФорма[мнгРаздел.Ключ].Очистить();
	КонецЦикла;
	
	НачальныеОперацииСМногострочнымиБлоками();
	
	ЗаполнитьПустыеСтруктурыДанных();
	
	Если НЕ СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
		ОчиститьТабличноеПолеНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	КонецЕсли;
	
	ВывестиМакетСтраницыВТабличныйДокументНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела, 1);
	
	СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
	
	РегламентированнаяОтчетностьКлиентСервер.ОчиститьВариантыЗаполнения(ЭтаФорма);
	
	РегламентированнаяОтчетность.ПолучитьСведенияОПоказателяхОтчета(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьБланк(Команда)
	
	Отказ = Ложь;
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("Команда", Команда);
	ОписаниеОповещения = Новый ОписаниеОповещения("ПоказатьБланкЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередПечатьюРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьБланкЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;

	Команда = ДополнительныеПараметры.Команда;
		
	Печать(Команда.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура Печать(ВидПечати, НеИзФормыОтчета = Ложь) Экспорт
	
	Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1. Формируется печатная форма...'"), ЭтаФорма.Заголовок), , , БиблиотекаКартинок.Печать);
	
	Если НЕ ПечатьНаСервере(ВидПечати) Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ОткрытьФормуПредварительногоПросмотра(ЭтаФорма, ВидПечати, , СтруктураРеквизитовФормы.СписокПечатаемыхЛистов);
	
	СтруктураРеквизитовФормы.мРежимПечати = Ложь;
		
КонецПроцедуры

&НаСервере
Функция ПечатьНаСервере(ВидПечати)
	
	Если НЕ РегламентированнаяОтчетность.ПринтерДоступен() Тогда
		
		Сообщение = Новый СообщениеПользователю;

		Сообщение.Текст = НСтр("ru='Перед формированием печатных форм необходимо определить в системе принтер и задать его в качестве используемого по умолчанию!'");

		Сообщение.Сообщить();
		
		Возврат Ложь;
		
	КонецЕсли;
			
	Если ТипЗнч(мДеревоВыбранныхСтраниц) <> Тип("ДанныеФормыДерево") Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	СтруктураРеквизитовФормы.мПечатныеФормы.Очистить();
	СтруктураРеквизитовФормы.мРежимПечати = Истина;
	
	СохранитьДанныеРаздела(СтруктураРеквизитовФормы.НаимТекущегоРаздела, Ложь);
				
	сохрТаблДок = ТабличныйДокумент.ПолучитьОбласть();
	
	СтрПоля = "ПолеСверху, ПолеСправа, ПолеСнизу, ПолеСлева";
	ВремПоля = Новый Структура(СтрПоля);
	
	ЗаполнитьЗначенияСвойств(ВремПоля, ТабличныйДокумент, СтрПоля);
	
	ВывестиМакетВТаблДокНаСервере("Титульный", 0);
	
	КодТарифа = РегламентированнаяОтчетностьКлиентСервер.ВернутьЗначениеПараметраСЛиста(ЭтаФорма, "Титульный", "Тариф");
	Если КодТарифа <> "21" И КодТарифа <> "22" Тогда
		
		Сообщение = Новый СообщениеПользователю;

		Сообщение.Текст = НСтр("ru='Не задан код тарифа. Печать отчета невозможна!'");

		Сообщение.Сообщить();
		
		ТабличныйДокумент.Очистить();
		ТабличныйДокумент.Вывести(сохрТаблДок);
		ЗаполнитьЗначенияСвойств(ТабличныйДокумент, ВремПоля, СтрПоля);
		
		Возврат Ложь;
		
	КонецЕсли;
	
	ОбщиеРеквизитыРазделов = ПолучитьОбщиеРеквизитыСТитульногоЛиста();
	
	Для Каждого СтрокаУровня1 Из мДеревоВыбранныхСтраниц.ПолучитьЭлементы() Цикл
		
		Если СтрокаУровня1.ВыводНаПечать = 0 Тогда
			Продолжить;
		КонецЕсли;
						
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("НаименованиеЛиста",  СтрокаУровня1.Представление);
		СтруктураПараметров.Вставить("ОриентацияЛиста",    СтрокаУровня1.ОриентацияСтраницы);
		СтруктураПараметров.Вставить("ИмяСтраницы",        СтрокаУровня1.ИмяСтраницы);
		Структурапараметров.Вставить("ИмяОбластиТаблПоля", СтрокаУровня1.ИмяОбластиТабличногоПоля);
		СтруктураПараметров.Вставить("ВидПечати",          ВидПечати);
		
		ВывестиМакетВТаблДокНаСервере(СтрокаУровня1.ИмяСтраницы, 0);
		ВывестиНаПечатьЛист(СтруктураПараметров, ОбщиеРеквизитыРазделов, СтрПоля);
		
	КонецЦикла;
	
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(сохрТаблДок);
	ЗаполнитьЗначенияСвойств(ТабличныйДокумент, ВремПоля, СтрПоля);
	
	РегламентированнаяОтчетностьКлиентСервер.ПроставлениеНомеровЛистов(ЭтаФорма, , СтруктураРеквизитовФормы.СписокПечатаемыхЛистов);
    	
	КопироватьДанныеФормы(мДеревоВыбранныхСтраниц, мДеревоСтраницОтчета);
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Процедура ВывестиНаПечатьЛист(Парам1, ОбщиеРеквизитыРазделов, СтрПоля = Неопределено)
	
	СоответствиеРазделовМакетам = Новый Соответствие;
	
	СоответствиеРазделовМакетам.Вставить("Титульный", "ПечатнаяФормаОтчета2015Кв3_Титульный");
	СоответствиеРазделовМакетам.Вставить("Раздел12",  "ПечатнаяФормаОтчета2015Кв3_Раздел12");
	СоответствиеРазделовМакетам.Вставить("Раздел3",   "ПечатнаяФормаОтчета2015Кв3_Раздел3");
	
	ПечатнаяФормаРаздела = СоответствиеРазделовМакетам[Парам1.ИмяСтраницы];
	
	МакетПечатнойФормы = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(ПечатнаяФормаРаздела);
	МакетПечатнойФормы.ПолеСверху = 5;
	МакетПечатнойФормы.ПолеСправа = 5;
	МакетПечатнойФормы.ПолеСнизу = 5;
	МакетПечатнойФормы.ПолеСлева = 5;
	
	ИдГруппы = ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(Парам1.ИмяСтраницы);
	
	Если ИдГруппы <> Неопределено Тогда
		
		КолвоСтрокВТаблДок = ЭтаФорма[ИдГруппы].Количество();
		
		ОбластьМнгЧасти              = МакетПечатнойФормы.ПолучитьОбласть("МногострочнаяЧасть");
		ВысотаОбластиМнгЧасти        = МакетПечатнойФормы.ПолучитьОбласть("МногострочнаяЧасть").ВысотаТаблицы;
		ИмяОбластиПоследнейДопСтроки = ОбластьМнгЧасти.ПолучитьОбласть(ВысотаОбластиМнгЧасти, ,
		 ВысотаОбластиМнгЧасти).Области[0].Имя;
		
		КолвоСтрокВПечатнойФорме = Число(
			Сред(ИмяОбластиПоследнейДопСтроки, СтрНайти(ИмяОбластиПоследнейДопСтроки, "_") + 1));
		
		СписокИменКолонокРаздела = мСтруктураИменаКолонокРазделов[ИдГруппы];
		
		Если КолвоСтрокВТаблДок > КолвоСтрокВПечатнойФорме Тогда
			
			ПерваяКолонкаТаблицыИмя = СписокИменКолонокРаздела.Получить(0).Значение;
			
			ПоследняяКолонкаТаблицыИмя = СписокИменКолонокРаздела.Получить(
				мСтруктураКолвоКолонокРазделов[ИдГруппы] - 1).Значение;
			
			НомерВерхЯчейкиОбласти = МакетПечатнойФормы.Область(
				ПерваяКолонкаТаблицыИмя + "_" + КолвоСтрокВПечатнойФорме).Верх;
			
			НомерНижнЯчейкиОбласти = МакетПечатнойФормы.Область(
				ПоследняяКолонкаТаблицыИмя + "_" + КолвоСтрокВПечатнойФорме).Низ;
			
			ВставляемаяОбласть = МакетПечатнойФормы.Область(
				НомерВерхЯчейкиОбласти, , НомерНижнЯчейкиОбласти);
			
			КолвоДопСтрок = КолвоСтрокВТаблДок - КолвоСтрокВПечатнойФорме;
			
			Для Ном = 1 По КолвоДопСтрок Цикл
				
				МакетПечатнойФормы.ВставитьОбласть(
					ВставляемаяОбласть, , ТипСмещенияТабличногоДокумента.ПоВертикали);
				
			КонецЦикла;
			
			Для Ном = 0 По КолвоДопСтрок Цикл
				
				Ном_ = КолвоДопСтрок - Ном;
					
				Для Каждого Область Из МакетПечатнойФормы.ПолучитьОбласть(
					НомерВерхЯчейкиОбласти + КолвоДопСтрок, , НомерНижнЯчейкиОбласти + КолвоДопСтрок).Области Цикл
					
					НайденнаяОбласть = МакетПечатнойФормы.Область(
						НомерВерхЯчейкиОбласти + Ном_, Область.Лево, НомерВерхЯчейкиОбласти + Ном_, Область.Право);
					
					Если НЕ НайденнаяОбласть = Неопределено Тогда 
						НайденнаяОбласть.Имя = Лев(Область.Имя, СтрНайти(Область.Имя, "_") - 1) + "_"
							+ Формат(КолвоСтрокВПечатнойФорме + Ном_, "ЧЦ=3");
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ЗаполнитьПечатнуюФорму(Парам1, МакетПечатнойФормы, ОбщиеРеквизитыРазделов);
	
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(МакетПечатнойФормы);
	ЗаполнитьЗначенияСвойств(ТабличныйДокумент, МакетПечатнойФормы, СтрПоля, "Макет");
	
	Если ИдГруппы <> Неопределено Тогда
		
		// Используется нестандартный алгоритм вывода
		// на печать листов с многострочной частью.
		ВывестиНаПечатьЛистСМногострочнойЧастью(
			ЭтаФорма.Заголовок, Парам1, ТабличныйДокумент, СтруктураРеквизитовФормы.мПечатныеФормы);
		
	Иначе
		
		РегламентированнаяОтчетность.ВывестиНаПечатьЛистОбщая(
			ЭтаФорма.Заголовок, Парам1, ТабличныйДокумент, СтруктураРеквизитовФормы.мПечатныеФормы);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиНаПечатьЛистСМногострочнойЧастью(ЗаголовокФормы, СтруктураПараметровЛиста, ТабличноеПоле, мПечатныеФормы)
	
	Перем ИмяЛиста;
	Перем Ориентация;
	Перем ВидПечати;
	Перем ИмяОбластиМногострочнойЧасти;
	
	СтруктураПараметровЛиста.Свойство("НаименованиеЛиста",  ИмяЛиста);
	СтруктураПараметровЛиста.Свойство("ОриентацияЛиста",    Ориентация);
	СтруктураПараметровЛиста.Свойство("ВидПечати",          ВидПечати);
	
	СтруктураПараметровЛиста.Вставить("ВидПечати", ВидПечати);
	СтруктураПараметровЛиста.Вставить("ИмяРаздела", ИмяЛиста);
	
	Области = ТабличноеПоле.Области;
	
	ПечатнаяФорма = НоваяСтраница();
	ПечатнаяФорма.Вывести(ТабличноеПоле.ПолучитьОбласть("НомерСтраницы"));
	ПечатнаяФорма.Вывести(ТабличноеПоле.ПолучитьОбласть("ОсновнаяЧасть"));
	ПечатнаяФорма.Вывести(ТабличноеПоле.ПолучитьОбласть("Шапка"));
	
	ВерхМногострочнойЧасти = Области["Шапка"].Низ  + 1;
	НизМногострочнойЧасти  = Области["Итого"].Верх - 1;
	
	ТекущийВерх = ВерхМногострочнойЧасти;
	
	Пока ТекущийВерх <= НизМногострочнойЧасти Цикл
		
		ТекущаяОбластьМногострочнойЧасти = ТабличноеПоле.ПолучитьОбласть(ТекущийВерх,,ТекущийВерх,);
		
		Если ТекущийВерх < НизМногострочнойЧасти Тогда
			
			МассивПроверкиВывода = Новый Массив;
			
			МассивПроверкиВывода.Добавить(ТекущаяОбластьМногострочнойЧасти);
			МассивПроверкиВывода.Добавить(ТабличноеПоле.ПолучитьОбласть("Итого"));
			МассивПроверкиВывода.Добавить(ТабличноеПоле.ПолучитьОбласть("ПустаяСтрока"));
			МассивПроверкиВывода.Добавить(ТабличноеПоле.ПолучитьОбласть("ПодписьДата"));
			
			Если ПечатнаяФорма.ПроверитьВывод(МассивПроверкиВывода) Тогда
				
				ПечатнаяФорма.Вывести(ТекущаяОбластьМногострочнойЧасти);
				
			Иначе
				
				МассивПроверкиВывода = Новый Массив;
				
				МассивПроверкиВывода.Добавить(ТабличноеПоле.ПолучитьОбласть("ПустаяСтрока"));
				МассивПроверкиВывода.Добавить(ТабличноеПоле.ПолучитьОбласть("ПустаяСтрока"));
				МассивПроверкиВывода.Добавить(ТабличноеПоле.ПолучитьОбласть("ПодписьДата"));
				
				Пока ПечатнаяФорма.ПроверитьВывод(МассивПроверкиВывода) Цикл
					
					ПечатнаяФорма.Вывести(ТабличноеПоле.ПолучитьОбласть("ПустаяСтрока"));
					
				КонецЦикла;
				
				ПечатнаяФорма.Вывести(ТабличноеПоле.ПолучитьОбласть("ПодписьДата"));
				
				мПечатныеФормы.Добавить(ПечатнаяФорма, ИмяЛиста);
				
				ПечатнаяФорма = НоваяСтраница();
				
				ПечатнаяФорма.Вывести(ТабличноеПоле.ПолучитьОбласть("НомерСтраницы"));
				ПечатнаяФорма.Вывести(ТабличноеПоле.ПолучитьОбласть("Шапка"));
				ПечатнаяФорма.Вывести(ТекущаяОбластьМногострочнойЧасти);
				
			КонецЕсли;
			
		Иначе // ТекущийВерх = НизМногострочнойЧасти
			
			МассивПроверкиВывода = Новый Массив;
			
			МассивПроверкиВывода.Добавить(ТекущаяОбластьМногострочнойЧасти);
			МассивПроверкиВывода.Добавить(ТабличноеПоле.ПолучитьОбласть("Итого"));
			Если Области.Найти("ДополнительнаяЧасть") <> Неопределено Тогда
				МассивПроверкиВывода.Добавить(ТабличноеПоле.ПолучитьОбласть("ДополнительнаяЧасть"));
			КонецЕсли;
			МассивПроверкиВывода.Добавить(ТабличноеПоле.ПолучитьОбласть("ПустаяСтрока"));
			МассивПроверкиВывода.Добавить(ТабличноеПоле.ПолучитьОбласть("ПодписьДата"));
			МассивПроверкиВывода.Добавить(ТабличноеПоле.ПолучитьОбласть("Сноска"));
			
			МассивПроверкиВывода_ = Новый Массив;
			
			МассивПроверкиВывода_.Добавить(ТекущаяОбластьМногострочнойЧасти);
			МассивПроверкиВывода_.Добавить(ТабличноеПоле.ПолучитьОбласть("Итого"));
			МассивПроверкиВывода_.Добавить(ТабличноеПоле.ПолучитьОбласть("ПустаяСтрока"));
			МассивПроверкиВывода_.Добавить(ТабличноеПоле.ПолучитьОбласть("ПодписьДата"));
			Если Области.Найти("ДополнительнаяЧасть") = Неопределено Тогда
				МассивПроверкиВывода_.Добавить(ТабличноеПоле.ПолучитьОбласть("Сноска"));
			КонецЕсли;
			
			Если ПечатнаяФорма.ПроверитьВывод(МассивПроверкиВывода) Тогда
				
				ПечатнаяФорма.Вывести(ТекущаяОбластьМногострочнойЧасти);
				ПечатнаяФорма.Вывести(ТабличноеПоле.ПолучитьОбласть("Итого"));
				Если Области.Найти("ДополнительнаяЧасть") <> Неопределено Тогда
					ПечатнаяФорма.Вывести(ТабличноеПоле.ПолучитьОбласть("ДополнительнаяЧасть"));
				КонецЕсли;
				МассивПроверкиВывода = Новый Массив;
				
				МассивПроверкиВывода.Добавить(ТабличноеПоле.ПолучитьОбласть("ПустаяСтрока"));
				МассивПроверкиВывода.Добавить(ТабличноеПоле.ПолучитьОбласть("ПустаяСтрока"));
				МассивПроверкиВывода.Добавить(ТабличноеПоле.ПолучитьОбласть("ПодписьДата"));
				МассивПроверкиВывода.Добавить(ТабличноеПоле.ПолучитьОбласть("Сноска"));
				
				Пока ПечатнаяФорма.ПроверитьВывод(МассивПроверкиВывода) Цикл
					
					ПечатнаяФорма.Вывести(ТабличноеПоле.ПолучитьОбласть("ПустаяСтрока"));
					
				КонецЦикла;
				
				ПечатнаяФорма.Вывести(ТабличноеПоле.ПолучитьОбласть("ПодписьДата"));
				ПечатнаяФорма.Вывести(ТабличноеПоле.ПолучитьОбласть("Сноска"));
				
			ИначеЕсли ПечатнаяФорма.ПроверитьВывод(МассивПроверкиВывода_) Тогда
				
				Если Области.Найти("ДополнительнаяЧасть") <> Неопределено Тогда
				
					ПечатнаяФорма.Вывести(ТекущаяОбластьМногострочнойЧасти);
					ПечатнаяФорма.Вывести(ТабличноеПоле.ПолучитьОбласть("Итого"));
					
					МассивПроверкиВывода = Новый Массив;
					
					МассивПроверкиВывода.Добавить(ТабличноеПоле.ПолучитьОбласть("ПустаяСтрока"));
					МассивПроверкиВывода.Добавить(ТабличноеПоле.ПолучитьОбласть("ПустаяСтрока"));
					МассивПроверкиВывода.Добавить(ТабличноеПоле.ПолучитьОбласть("ПодписьДата"));
					
					Пока ПечатнаяФорма.ПроверитьВывод(МассивПроверкиВывода) Цикл
						
						ПечатнаяФорма.Вывести(ТабличноеПоле.ПолучитьОбласть("ПустаяСтрока"));
						
					КонецЦикла;
					
					ПечатнаяФорма.Вывести(ТабличноеПоле.ПолучитьОбласть("ПодписьДата"));
					
					мПечатныеФормы.Добавить(ПечатнаяФорма, ИмяЛиста);
					
					ПечатнаяФорма = НоваяСтраница();
					
					ПечатнаяФорма.Вывести(ТабличноеПоле.ПолучитьОбласть("НомерСтраницы"));
					ПечатнаяФорма.Вывести(ТабличноеПоле.ПолучитьОбласть("ПустаяСтрока"));
					ПечатнаяФорма.Вывести(ТабличноеПоле.ПолучитьОбласть("ДополнительнаяЧасть"));
					
					МассивПроверкиВывода = Новый Массив;
					
					МассивПроверкиВывода.Добавить(ТабличноеПоле.ПолучитьОбласть("ПустаяСтрока"));
					МассивПроверкиВывода.Добавить(ТабличноеПоле.ПолучитьОбласть("ПустаяСтрока"));
					МассивПроверкиВывода.Добавить(ТабличноеПоле.ПолучитьОбласть("ПодписьДата"));
					МассивПроверкиВывода.Добавить(ТабличноеПоле.ПолучитьОбласть("Сноска"));
					
					Пока ПечатнаяФорма.ПроверитьВывод(МассивПроверкиВывода) Цикл
						
						ПечатнаяФорма.Вывести(ТабличноеПоле.ПолучитьОбласть("ПустаяСтрока"));
						
					КонецЦикла;
					
					ПечатнаяФорма.Вывести(ТабличноеПоле.ПолучитьОбласть("ПодписьДата"));
					ПечатнаяФорма.Вывести(ТабличноеПоле.ПолучитьОбласть("Сноска"));
					
				Иначе
					
					ПечатнаяФорма.Вывести(ТекущаяОбластьМногострочнойЧасти);
					ПечатнаяФорма.Вывести(ТабличноеПоле.ПолучитьОбласть("Итого"));
					ПечатнаяФорма.Вывести(ТабличноеПоле.ПолучитьОбласть("ПодписьДата"));
					ПечатнаяФорма.Вывести(ТабличноеПоле.ПолучитьОбласть("Сноска"));
					
				КонецЕсли;
				
			Иначе
				
				МассивПроверкиВывода = Новый Массив;
				
				МассивПроверкиВывода.Добавить(ТабличноеПоле.ПолучитьОбласть("ПустаяСтрока"));
				МассивПроверкиВывода.Добавить(ТабличноеПоле.ПолучитьОбласть("ПустаяСтрока"));
				МассивПроверкиВывода.Добавить(ТабличноеПоле.ПолучитьОбласть("ПодписьДата"));
				
				Пока ПечатнаяФорма.ПроверитьВывод(МассивПроверкиВывода) Цикл
					
					ПечатнаяФорма.Вывести(ТабличноеПоле.ПолучитьОбласть("ПустаяСтрока"));
					
				КонецЦикла;
				
				ПечатнаяФорма.Вывести(ТабличноеПоле.ПолучитьОбласть("ПодписьДата"));
				
				мПечатныеФормы.Добавить(ПечатнаяФорма, ИмяЛиста);
				
				ПечатнаяФорма = НоваяСтраница();
				
				ПечатнаяФорма.Вывести(ТабличноеПоле.ПолучитьОбласть("НомерСтраницы"));
				ПечатнаяФорма.Вывести(ТабличноеПоле.ПолучитьОбласть("Шапка"));
				ПечатнаяФорма.Вывести(ТекущаяОбластьМногострочнойЧасти);
				ПечатнаяФорма.Вывести(ТабличноеПоле.ПолучитьОбласть("Итого"));
				Если Области.Найти("ДополнительнаяЧасть") <> Неопределено Тогда
					ПечатнаяФорма.Вывести(ТабличноеПоле.ПолучитьОбласть("ДополнительнаяЧасть"));
				КонецЕсли;
				
				МассивПроверкиВывода = Новый Массив;
				
				МассивПроверкиВывода.Добавить(ТабличноеПоле.ПолучитьОбласть("ПустаяСтрока"));
				МассивПроверкиВывода.Добавить(ТабличноеПоле.ПолучитьОбласть("ПустаяСтрока"));
				МассивПроверкиВывода.Добавить(ТабличноеПоле.ПолучитьОбласть("ПодписьДата"));
				МассивПроверкиВывода.Добавить(ТабличноеПоле.ПолучитьОбласть("Сноска"));
				
				Пока ПечатнаяФорма.ПроверитьВывод(МассивПроверкиВывода) Цикл
					
					ПечатнаяФорма.Вывести(ТабличноеПоле.ПолучитьОбласть("ПустаяСтрока"));
					
				КонецЦикла;
				
				ПечатнаяФорма.Вывести(ТабличноеПоле.ПолучитьОбласть("ПодписьДата"));
				ПечатнаяФорма.Вывести(ТабличноеПоле.ПолучитьОбласть("Сноска"));
				
			КонецЕсли;
			
		КонецЕсли;
		
		ТекущийВерх = ТекущийВерх + 1;
		
	КонецЦикла;
	
	мПечатныеФормы.Добавить(ПечатнаяФорма, ИмяЛиста);
	
КонецПроцедуры

&НаСервере
Функция НоваяСтраница()
	
	ПечатнаяФорма = Новый ТабличныйДокумент();
	ПечатнаяФорма.ОтображатьЗаголовки = Ложь;
	ПечатнаяФорма.ОтображатьСетку     = Ложь;
	ПечатнаяФорма.ЧерноБелыйПросмотр  = Истина;
	ПечатнаяФорма.ЧерноБелаяПечать    = Истина;
	ПечатнаяФорма.Автомасштаб         = Истина;
	ПечатнаяФорма.ОриентацияСтраницы  = ОриентацияСтраницы.Портрет;
	
	Возврат ПечатнаяФорма;
	
КонецФункции

&НаСервере
Процедура ПоказатьПериод()
	
	ПолеТабличногоДокументаТитульный = ТабличныйДокумент;
	
	НомерМесяца = Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ=М");
	НомерГода   = Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ=гггг");
	
	Если НомерМесяца = "12" Тогда
		НомерМесяца = "0";
	КонецЕсли;
	
	ПолеТабличногоДокументаТитульный.Области.Период.Значение   = НомерМесяца;
	ПолеТабличногоДокументаТитульный.Области.ОтчетГод.Значение = НомерГода;
	
	СтруктураРеквизитовФормы.СтрПериодОтчета = ПредставлениеПериода( НачалоДня(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета), КонецДня(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета), "ФП = Истина" );
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеСменыЕдИзмеренияИТочности()
	
	ПроверитьТочность();
	
	УстановитьФорматВыводаВПоляхВводаНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
	РасчетНаКлиенте(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ТабличныйДокументВыбор(Элемент, Область, СтандартнаяОбработка)
	
	ОбработкаВыбораВПолеТабличногоДокумента(Элемент, Область, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ТабличныйДокументПриИзмененииСодержимогоОбласти(Элемент, Область)
	
	ИмяРаздела = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
	
	ИмяОбласти = Область.Имя;;
	
	Если ИмяОбласти = "НомерКорректировки" Тогда
		
		НомерКорректировки = ТабличныйДокумент.Области.НомерКорректировки.Значение;
		
		СтруктураРеквизитовФормы.ВидДокумента = ?(Область.Значение = 0, 0, 1);
		
		ОКВЭД = "";
		РегламентированнаяОтчетностьКлиентСервер.УстановитьЗначениеОКВЭД(ДатаПодписи,
		СтруктураРеквизитовФормы,
		ОКВЭД);
		
		Если Сред(ОКВЭД, 2, 1) = "." Тогда
			ОКВЭД = Лев(ОКВЭД, 1) + " " + Сред(ОКВЭД, 2);
		КонецЕсли;
		
		Если Сред(ОКВЭД, 5, 1) = "." Тогда
			ОКВЭД = Лев(ОКВЭД, 4) + " " + Сред(ОКВЭД, 5);
		КонецЕсли;																 
		
		ТабличныйДокумент.Области.ОКВЭД.Значение = ОКВЭД;
		
		Модифицированность = Истина;
	
	ИначеЕсли ИмяОбласти = "НомерПачки" Тогда
		
		НомерПачки = ТабличныйДокумент.Области.НомерПачки.Значение;
		
	ИначеЕсли ИмяОбласти = "ДатаПодписи" Тогда
		
		ДатаПодписи = ТабличныйДокумент.Области.ДатаПодписи.Значение;
		
		ДатаПодписиПриИзмененииНаСервере();
		
	ИначеЕсли ИмяРаздела = "Раздел12"
		ИЛИ ИмяРаздела = "Раздел3" Тогда
		
		Если Лев(ИмяОбласти, 13) = "П000300000103" Тогда
			Если Область.Значение < 1000 Тогда
				Область.Значение = 0;
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = НСтр("ru='Неверно задан год периода, за который производится перерасчет взносов на дополнительное социальное обеспечение.'");
				Сообщение.Сообщить();
			КонецЕсли;
		ИначеЕсли Лев(ИмяОбласти, 13) = "П000300000104" Тогда
			Если Область.Значение > 12 Тогда
				Область.Значение = 0;
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = НСтр("ru='Неверно задан месяц периода, за который производится перерасчет взносов на дополнительное социальное обеспечение. Возможные значения: 1 - 12.'");
				Сообщение.Сообщить();
			КонецЕсли;
		КонецЕсли;
		
		ПозицияПодстроки = СтрНайти(ИмяОбласти, "_");
		
		Если ПозицияПодстроки > 0 Тогда
			ИмяОбласти = Лев(ИмяОбласти, ПозицияПодстроки - 1);
		КонецЕсли;
		
		РасчетНаКлиенте(СтруктураРеквизитовФормы.НаимТекущегоРаздела, ИмяОбласти);
		
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Функция ПредставлениеЧисла(Знач ЗначЧисло)
	
	Если ТипЗнч(ЗначЧисло) = Тип("Строка") Тогда
		
		ЗначЧисло = СтрЗаменить(ЗначЧисло, "-", ""); // Удаление дополняющих прочерков
		ЗначЧисло = СокрЛП(ЗначЧисло);
		ЗначЧисло = ?(ЗначениеЗаполнено(ЗначЧисло) И СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(ЗначЧисло), Число(ЗначЧисло), 0);
		
	КонецЕсли;
	
	СтрЧисло = Формат(ЗначЧисло, "ЧН=; ЧГ=");
	
	Возврат СтрЧисло;
	
КонецФункции

&НаСервере
Функция ПолучитьПоказателиРаздела(ДеревоВыгрузки, Раздел)
	
	ПоказателиРаздела = ДеревоВыгрузки.Строки.НайтиСтроки(Новый Структура("Раздел", Раздел), Истина);
	КоличествоСтрокРаздела = ПоказателиРаздела.Количество();
	Для ОбрИнд = 1 По КоличествоСтрокРаздела Цикл
		Инд = КоличествоСтрокРаздела - ОбрИнд;
		ТекСтр = ПоказателиРаздела[Инд];
		Если НЕ ЗначениеЗаполнено(ТекСтр.Ключ) Тогда
			ПоказателиРаздела.Удалить(Инд);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ПоказателиРаздела;
	
КонецФункции

&НаСервере
Функция ПоказательЗаполнен(Показатель, Значение)
	
	Возврат ЗначениеЗаполнено(Значение);
	
КонецФункции

&НаСервере
Функция СтраницаПуста(ДанныеСтраницы, Показатели, ДеревоВыгрузки = Неопределено)
	
	Если ТипЗнч(Показатели) = Тип("Строка") Тогда
		ПоказателиРаздела = ПолучитьПоказателиРаздела(ДеревоВыгрузки, Показатели);
	Иначе
		ПоказателиРаздела = Показатели;
	КонецЕсли;
	
	ПоказателиНеанализируемыеНаЗаполненность = Новый Массив;
	
	Для Каждого Пок Из ПоказателиРаздела Цикл
		Если ПоказателиНеанализируемыеНаЗаполненность.Найти(Пок.Ключ) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Если Пок.Многострочность Тогда
			ИндексСтроки = 1;
			ЗначениеПоказателя = Неопределено;
			Пока ДанныеСтраницы.Свойство(Пок.Ключ + "_" + Формат(ИндексСтроки, "ЧГ="), ЗначениеПоказателя) Цикл
				Если ПоказательЗаполнен(Пок, ЗначениеПоказателя) Тогда
					Возврат Ложь;
				КонецЕсли;
				ИндексСтроки = ИндексСтроки + 1;
			КонецЦикла;
		Иначе
			Если ПоказательЗаполнен(Пок, ДанныеСтраницы[Пок.Ключ]) Тогда
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция ПроверитьВозможностьВыгрузки(ПараметрыВыгрузки, ДеревоВыгрузки)
	
	СтатусПроверки = Истина;
	
	ВозмКодыТарифов = Новый Массив;
	ВозмКодыТарифов.Добавить("21");
	ВозмКодыТарифов.Добавить("22");
	
	ВозмКодыТиповПодписантов = Новый Массив;
	ВозмКодыТиповПодписантов.Добавить("1");
	ВозмКодыТиповПодписантов.Добавить("2");
	ВозмКодыТиповПодписантов.Добавить("3");
	
	Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.КодОрганаПФР) Тогда
		СообщитьВТС("Не задан код территориального органа ПФР в справочнике организаций.", "Титульный", "");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если НЕ РегНомерПФРСоответствуетТребованиям(ПараметрыВыгрузки.РегистрационныйНомерПФР) Тогда
		СообщитьВТС("Заданный регистрационный номер в ПФР организации/обособленного подразделения не соответствует шаблону:""XXX-XXX-XXXXXX"" (X - любая цифра).", "Титульный", "НомРег");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.ИНН) Тогда
		СообщитьВТС("Не задан ИНН организации/обособленного подразделения.", "Титульный", "ИНН");
		СтатусПроверки = Ложь;
	ИначеЕсли СтрДлина(ПараметрыВыгрузки.ИНН) <> 10 Тогда
		СообщитьВТС("Задан ИНН организации/обособленного подразделения, не состоящий из 10 цифр.", "Титульный", "ИНН");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.КПП) Тогда
		СообщитьВТС("Не задан КПП организации/обособленного подразделения.", "Титульный", "КПП");
		СтатусПроверки = Ложь;
	ИначеЕсли СтрДлина(ПараметрыВыгрузки.КПП) <> 9 Тогда
		СообщитьВТС("Задан КПП организации/обособленного подразделения, не состоящий из 9 символов.", "Титульный", "КПП");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.НаименованиеОрганизации) Тогда
		СообщитьВТС("Не задано наименование организации/обособленного подразделения.", "Титульный", "ОргНазв");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СокрЛП(СтрЗаменить(ПараметрыВыгрузки.КодПоОКВЭД, ".", ""))) Тогда
		СообщитьВТС("Не задан код вида деятельности по ОКВЭД.", "Титульный", "ОКВЭД");
		СтатусПроверки = Ложь;
	ИначеЕсли НЕ РегламентированнаяОтчетностьКлиентСервер.ОКВЭДСоответствуетТребованиям(ПараметрыВыгрузки.КодПоОКВЭД) Тогда
		СообщитьВТС("Задан некорректный код вида деятельности по ОКВЭД.", "Титульный", "ОКВЭД");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.КодУстановленногоТарифа) Тогда
		СообщитьВТС("Не задан код тарифа.", "Титульный", "Тариф");
		СтатусПроверки = Ложь;
	ИначеЕсли ВозмКодыТарифов.Найти(ПараметрыВыгрузки.КодУстановленногоТарифа) = Неопределено Тогда
		СообщитьВТС("Неверно задан код тарифа.", "Титульный", "Тариф");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.Телефон) Тогда
		СообщитьВТС("Не задан номер контактного телефона.", "Титульный", "ТелОрганизации");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыВыгрузки.ПрекращениеДеятельности)
		И ПараметрыВыгрузки.ПрекращениеДеятельности <> "Л" Тогда
		СообщитьВТС("Неверно задан признак прекращения деятельности.", "Титульный", "ПрекращениеДеятельности");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ПараметрыВыгрузки.ПрПодп = "0" Тогда
		СообщитьВТС("Не задан тип подписанта.", "Титульный", "ПрПодп");
		СтатусПроверки = Ложь;
	ИначеЕсли ВозмКодыТиповПодписантов.Найти(ПараметрыВыгрузки.ПрПодп) = Неопределено Тогда
		СообщитьВТС("Неверно задан тип подписанта. Возможны значения: 1, 2, 3.", "Титульный", "ПрПодп");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.ФамилияПодписанта) Тогда
		СообщитьВТС("Не задан подписант.", "Титульный", "ОргПодписантФамилия");
		СтатусПроверки = Ложь;
	ИначеЕсли НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.ИмяПодписанта) Тогда
		СообщитьВТС("Не задано имя подписанта.", "Титульный", "ОргПодписантФамилия");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ПараметрыВыгрузки.ПрПодп = "2" ИЛИ ПараметрыВыгрузки.ПрПодп = "3" Тогда
		
		Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.ДокУпПредНомер) Тогда
			СообщитьВТС("Не задан номер документа, подтверждающего полномочия представителя.",
			"Титульный", "ДокУпПред");
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.ДокУпПредКемВыдан) Тогда
			СообщитьВТС("Не задано кем выдан документ, подтверждающего полномочия представителя.",
			"Титульный", "ДокУпПред");
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.ДокУпПредДатаВыдачи) Тогда
			СообщитьВТС("Не задана дата выдачи документа, подтверждающего полномочия представителя.",
			"Титульный", "ДокУпПред");
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.ДокУпПредДействуетС) Тогда
			СообщитьВТС("Не задана дата, с которой (включительно) действует документ, подтверждающий полномочия представителя.",
			"Титульный", "ДокУпПред");
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.ДокУпПредДействуетПо) Тогда
			СообщитьВТС("Не задана дата, по которую (включительно) действует документ, подтверждающий полномочия представителя.",
			"Титульный", "ДокУпПред");
			СтатусПроверки = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	// Раздел 1.
	Раздел12 = мДанныеОтчета.ПолеТабличногоДокументаРаздел12;
	Если НЕ (Раздел12["П000100011003"]
		>= Раздел12["П000100011103"] + Раздел12["П000100011203"] + Раздел12["П000100011303"]) Тогда
		СообщитьВТС("Раздел 1: значение в строке 110 должно быть больше или равно сумме значений в строках 111, 112 и 113.",
		"Раздел12", "П000100011003");
		СтатусПроверки = Ложь;
	КонецЕсли;
	Если НЕ (Раздел12["П000100014003"]
		>= Раздел12["П000100014103"] + Раздел12["П000100014203"] + Раздел12["П000100014303"]) Тогда
		СообщитьВТС("Раздел 1: значение в строке 140 должно быть больше или равно сумме значений в строках 141, 142 и 143.",
		"Раздел12", "П000100014003");
		СтатусПроверки = Ложь;
	КонецЕсли;
	// Раздел 2.
	Если НЕ (Раздел12["П000200020003"]
		>= Раздел12["П000200020004"] + Раздел12["П000200020005"] + Раздел12["П000200020006"]) Тогда
		СообщитьВТС("Раздел 2: в строке 200 значение в графе 3 должно быть больше или равно сумме значений в графах 4-6.",
		"Раздел12", "П000200020003");
		СтатусПроверки = Ложь;
	КонецЕсли;
	Если НЕ (Раздел12["П000200021003"]
		>= Раздел12["П000200021004"] + Раздел12["П000200021005"] + Раздел12["П000200021006"]) Тогда
		СообщитьВТС("Раздел 2: в строке 210 значение в графе 3 должно быть больше или равно сумме значений в графах 4-6.",
		"Раздел12", "П000200021003");
		СтатусПроверки = Ложь;
	КонецЕсли;
	Если НЕ (Раздел12["П000200022003"]
		>= Раздел12["П000200022004"] + Раздел12["П000200022005"] + Раздел12["П000200022006"]) Тогда
		СообщитьВТС("Раздел 2: в строке 220 значение в графе 3 должно быть больше или равно сумме значений в графах 4-6.",
		"Раздел12", "П000200022003");
		СтатусПроверки = Ложь;
	КонецЕсли;
	МаксимумСтр230Графы4_6 = Макс(Раздел12["П000200023004"], Раздел12["П000200023005"], Раздел12["П000200023006"]);
	Если НЕ (Раздел12["П000200023003"] >= МаксимумСтр230Графы4_6) Тогда
		СообщитьВТС("Раздел 2: в строке 230 значение в графе 3 должно быть не меньше значений в графах 4-6.",
		"Раздел12", "П000200023003");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	// Раздел 3.
	ВозмКодыОснованияДоначисления = Новый Массив;
	ВозмКодыОснованияДоначисления.Добавить("1");
	ВозмКодыОснованияДоначисления.Добавить("2");
	ВозмКодыОснованияДоначисления.Добавить("3");
	ВозмКодыОснованияДоначисления.Добавить("4");
	НомерСтроки = 1;
	УникальныеНомераПП = Новый Массив;
	Раздел3 = мДанныеОтчета.ПолеТабличногоДокументаРаздел3;
	Если НЕ СтраницаПуста(Раздел3, "Раздел3", ДеревоВыгрузки) Тогда
		
		Пока Раздел3.Свойство("П000300000101_" + Формат(НомерСтроки, "ЧГ=")) Цикл
			
			ИмяЯчейкиНомерПП   = "П000300000101_" + Формат(НомерСтроки, "ЧГ=");
			ИмяЯчейкиОснование = "П000300000102_" + Формат(НомерСтроки, "ЧГ=");
			ИмяЯчейкиГод       = "П000300000103_" + Формат(НомерСтроки, "ЧГ=");
			ИмяЯчейкиМесяц     = "П000300000104_" + Формат(НомерСтроки, "ЧГ=");
			ИмяЯчейкиСумма     = "П000300000105_" + Формат(НомерСтроки, "ЧГ=");
			
			Если НЕ ЗначениеЗаполнено(Раздел3[ИмяЯчейкиНомерПП])
				И НЕ ЗначениеЗаполнено(Раздел3[ИмяЯчейкиОснование])
				И НЕ ЗначениеЗаполнено(Раздел3[ИмяЯчейкиГод])
				И НЕ ЗначениеЗаполнено(Раздел3[ИмяЯчейкиМесяц])
				И НЕ ЗначениеЗаполнено(Раздел3[ИмяЯчейкиСумма]) Тогда
				СообщитьВТС("Раздел 3: строка " + Формат(НомерСтроки, "ЧГ=") + " не заполнена.",
				"Раздел3", ИмяЯчейкиНомерПП);
				СтатусПроверки = Ложь;
				НомерСтроки = НомерСтроки + 1;
				Продолжить;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(Раздел3[ИмяЯчейкиНомерПП]) Тогда
				СообщитьВТС("Раздел 3: в строке " + Формат(НомерСтроки, "ЧГ=")
				+ " не задан № п/п.", "Раздел3", ИмяЯчейкиНомерПП);
				СтатусПроверки = Ложь;
			ИначеЕсли УникальныеНомераПП.Найти(Раздел3[ИмяЯчейкиНомерПП]) <> Неопределено Тогда
				СообщитьВТС("Раздел 3: в строке " + Формат(НомерСтроки, "ЧГ=")
				+ " задано неуникальное значение № п/п.", "Раздел3", ИмяЯчейкиНомерПП);
				СтатусПроверки = Ложь;
			Иначе
				УникальныеНомераПП.Добавить(Раздел3[ИмяЯчейкиНомерПП]);
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(Раздел3[ИмяЯчейкиОснование]) Тогда
				СообщитьВТС("Раздел 3: в строке " + Формат(НомерСтроки, "ЧГ=")
				+ " не задано основание для перерасчета взносов на дополнительное социальное обеспечение.",
				"Раздел3", ИмяЯчейкиОснование);
				СтатусПроверки = Ложь;
			ИначеЕсли ВозмКодыОснованияДоначисления.Найти(Раздел3[ИмяЯчейкиОснование]) = Неопределено Тогда
				СообщитьВТС("Раздел 3: в строке " + Формат(НомерСтроки, "ЧГ=")
				+ " неверно задано основание для перерасчета взносов на дополнительное социальное обеспечение. Возможные значения: 1, 2, 3, 4.",
				"Раздел3", ИмяЯчейкиОснование);
				СтатусПроверки = Ложь;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(Раздел3[ИмяЯчейкиГод]) Тогда
				СообщитьВТС("Раздел 3: в строке " + Формат(НомерСтроки, "ЧГ=")
				+ " не задан год периода, за который производится перерасчет взносов на дополнительное социальное обеспечение.",
				"Раздел3", ИмяЯчейкиГод);
				СтатусПроверки = Ложь;
			ИначеЕсли Раздел3[ИмяЯчейкиГод] < 1000 Тогда
				СообщитьВТС("Раздел 3: в строке " + Формат(НомерСтроки, "ЧГ=")
				+ " неверно задан год периода, за который производится перерасчет взносов на дополнительное социальное обеспечение.",
				"Раздел3", ИмяЯчейкиГод);
				СтатусПроверки = Ложь;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(Раздел3[ИмяЯчейкиМесяц]) Тогда
				СообщитьВТС("Раздел 3: в строке " + Формат(НомерСтроки, "ЧГ=")
				+ " не задан месяц периода, за который производится перерасчет взносов на дополнительное социальное обеспечение.",
				"Раздел3", ИмяЯчейкиМесяц);
				СтатусПроверки = Ложь;
			ИначеЕсли Раздел3[ИмяЯчейкиМесяц] > 12 Тогда
				СообщитьВТС("Раздел 3: в строке " + Формат(НомерСтроки, "ЧГ=")
				+ " неверно задан месяц периода, за который производится перерасчет взносов на дополнительное социальное обеспечение. Возможные значения: 1 - 12.",
				"Раздел3", ИмяЯчейкиМесяц);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			НомерСтроки = НомерСтроки + 1;
			
		КонецЦикла;
		
	Иначе
		
		Если ЗначениеЗаполнено(Раздел12["П000100012003"]) Тогда
			СообщитьВТС("Раздел 3 должен быть заполнен, если заполнено значение в графе 3 строки 120 раздела 1.",
			"Раздел3", "П000300000101_1");
			СтатусПроверки = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СтатусПроверки;
	
КонецФункции

&НаСервере
Процедура СообщитьВТС(Описание, Раздел, ИмяЯчейки, ФИО = "")
	
	РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, Описание, Раздел, ИмяЯчейки, ФИО);
	
КонецПроцедуры

&НаСервере
Функция РегНомерПФРСоответствуетТребованиям(Знач РегНомерПФР) Экспорт
	
	Для Инд = 0 По 8 Цикл
		РегНомерПФР = СтрЗаменить(РегНомерПФР, Строка(Инд), "9");
	КонецЦикла;
	
	Возврат РегНомерПФР = "999-999-999999";
	
КонецФункции

&НаКлиенте
Процедура ПроверитьТочность()
	
	Если СтруктураРеквизитовФормы.ЕдиницаИзмерения = ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1 Тогда

		Если СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения > 2 Тогда
									
			Сообщение = Новый СообщениеПользователю;

			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1: при выводе сумм в рублях точность не может превышать 2 знака'"), ЭтаФорма.Заголовок);

			Сообщение.Сообщить();
			
			СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = 2;
			
		КонецЕсли;

	ИначеЕсли СтруктураРеквизитовФормы.ЕдиницаИзмерения = ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1000 Тогда

		Если СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения > 3 Тогда
			
			Сообщение = Новый СообщениеПользователю;

			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1: при выводе сумм в тысячах рублей точность не может превышать 3 знака'"), ЭтаФорма.Заголовок);

			Сообщение.Сообщить();
			
			СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = 3;
			
		КонецЕсли;

	ИначеЕсли СтруктураРеквизитовФормы.ЕдиницаИзмерения = ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1000000 Тогда

		Если СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения > 6 Тогда
						
			Сообщение = Новый СообщениеПользователю;

			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1: при выводе сумм в миллионах рублей точность не может превышать 6 знаков'"), ЭтаФорма.Заголовок);

			Сообщение.Сообщить();
			
			СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = 6;
			
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура РасчетНаКлиенте(ИмяСтраницыПанели = "", ОбластьИмя = "") Экспорт

	Расчет(ЭтаФорма, ИмяСтраницыПанели, ОбластьИмя);

КонецПроцедуры

&НаСервере
Процедура РасчетНаСервере(ИмяСтраницыПанели = "", ОбластьИмя = "") Экспорт

	Расчет(ЭтаФорма, ИмяСтраницыПанели, ОбластьИмя);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура Расчет(Форма, ИмяТекущейСтраницыПанели = "", Знач ОбластьИмя = "")
	
	Перем ТаблицаБлока;
	
	Если Форма.СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Тогда
		Возврат;
	КонецЕсли;
	
	Если ИмяТекущейСтраницыПанели = "Раздел12" Тогда
		
		Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел12" Тогда
			
			Раздел12 = Форма.ТабличныйДокумент.Области;
			
			// Расчет по гр. 3 в стр. 120 раздела 1.
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) Тогда
				Форма.ТабличныйДокумент.Области.П000100012003.Значение = Форма.СтруктураДанныхРаздел12.П000100012003;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100011403, ОбластьИмя) > 0 Тогда
				
				П000100011103 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, Раздел12.П000100011103.Значение);
				П000100011203 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, Раздел12.П000100011203.Значение);
				П000100011303 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, Раздел12.П000100011303.Значение);
				
				П000100011403 = П000100011103 + П000100011203 + П000100011303;
				
				Раздел12.П000100011403.Значение = П000100011403;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100013003, ОбластьИмя) > 0 Тогда
				
				П000100010003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, Раздел12.П000100010003.Значение);
				П000100011003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, Раздел12.П000100011003.Значение);
				П000100012003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, Раздел12.П000100012003.Значение);
				
				П000100013003 = П000100010003 + П000100011003 + П000100012003;
				
				Раздел12.П000100013003.Значение = П000100013003;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100014403, ОбластьИмя) > 0 Тогда
				
				П000100014103 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, Раздел12.П000100014103.Значение);
				П000100014203 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, Раздел12.П000100014203.Значение);
				П000100014303 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, Раздел12.П000100014303.Значение);
				
				П000100014403 = П000100014103 + П000100014203 + П000100014303;
				
				Раздел12.П000100014403.Значение = П000100014403;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100015003, ОбластьИмя) > 0 Тогда
				
				П000100013003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, Раздел12.П000100013003.Значение);
				П000100014003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, Раздел12.П000100014003.Значение);
				
				П000100015003 = П000100013003 - П000100014003;
				
				Раздел12.П000100015003.Значение = П000100015003;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000200022003, ОбластьИмя) > 0 Тогда
				
				П000200020003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, Раздел12.П000200020003.Значение);
				П000200021003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, Раздел12.П000200021003.Значение);
				
				Раздел12.П000200022003.Значение = П000200020003 - П000200021003;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000200022004, ОбластьИмя) > 0 Тогда
				
				П000200020004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, Раздел12.П000200020004.Значение);
				П000200021004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, Раздел12.П000200021004.Значение);
				
				Раздел12.П000200022004.Значение = П000200020004 - П000200021004;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000200022005, ОбластьИмя) > 0 Тогда
				
				П000200020005 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, Раздел12.П000200020005.Значение);
				П000200021005 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, Раздел12.П000200021005.Значение);
				
				Раздел12.П000200022005.Значение = П000200020005 - П000200021005;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000200022006, ОбластьИмя) > 0 Тогда
				
				П000200020006 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, Раздел12.П000200020006.Значение);
				П000200021006 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, Раздел12.П000200021006.Значение);
				
				Раздел12.П000200022006.Значение = П000200020006 - П000200021006;
				
			КонецЕсли;
			
		Иначе
			
			Раздел12 = Форма.СтруктураДанныхРаздел12;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100011403, ОбластьИмя) > 0 Тогда
				
				П000100011103 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, ?(Раздел12.Свойство("П000100011103"), Раздел12.П000100011103, 0));
				П000100011203 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, ?(Раздел12.Свойство("П000100011203"), Раздел12.П000100011203, 0));
				П000100011303 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, ?(Раздел12.Свойство("П000100011303"), Раздел12.П000100011303, 0));
				
				П000100011403 = П000100011103 + П000100011203 + П000100011303;
				
				Раздел12.Вставить("П000100011403", П000100011403);
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100013003, ОбластьИмя) > 0 Тогда
				
				П000100010003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, ?(Раздел12.Свойство("П000100010003"), Раздел12.П000100010003, 0));
				П000100011003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, ?(Раздел12.Свойство("П000100011003"), Раздел12.П000100011003, 0));
				П000100012003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, ?(Раздел12.Свойство("П000100012003"), Раздел12.П000100012003, 0));
				
				П000100013003 = П000100010003 + П000100011003 + П000100012003;
				
				Раздел12.Вставить("П000100013003", П000100013003);
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100014403, ОбластьИмя) > 0 Тогда
				
				П000100014103 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, ?(Раздел12.Свойство("П000100014103"), Раздел12.П000100014103, 0));
				П000100014203 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, ?(Раздел12.Свойство("П000100014203"), Раздел12.П000100014203, 0));
				П000100014303 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, ?(Раздел12.Свойство("П000100014303"), Раздел12.П000100014303, 0));
				
				П000100014403 = П000100014103 + П000100014203 + П000100014303;
				
				Раздел12.Вставить("П000100014403", П000100014403);
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100015003, ОбластьИмя) > 0 Тогда
				
				П000100013003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, ?(Раздел12.Свойство("П000100013003"), Раздел12.П000100013003, 0));
				П000100014003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, ?(Раздел12.Свойство("П000100014003"), Раздел12.П000100014003, 0));
				
				П000100015003 = П000100013003 - П000100014003;
				
				Раздел12.Вставить("П000100015003", П000100015003);
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000200022003, ОбластьИмя) > 0 Тогда
				
				П000200020003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, ?(Раздел12.Свойство("П000200020003"), Раздел12.П000200020003, 0));
				П000200021003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, ?(Раздел12.Свойство("П000200021003"), Раздел12.П000200021003, 0));
				
				Раздел12.Вставить("П000200022003", П000200020003 - П000200021003);
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000200022004, ОбластьИмя) > 0 Тогда
				
				П000200020004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, ?(Раздел12.Свойство("П000200020004"), Раздел12.П000200020004, 0));
				П000200021004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, ?(Раздел12.Свойство("П000200021004"), Раздел12.П000200021004, 0));
				
				Раздел12.Вставить("П000200022004", П000200020004 - П000200021004);
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000200022005, ОбластьИмя) > 0 Тогда
				
				П000200020005 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, ?(Раздел12.Свойство("П000200020005"), Раздел12.П000200020005, 0));
				П000200021005 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, ?(Раздел12.Свойство("П000200021005"), Раздел12.П000200021005, 0));
				
				Раздел12.Вставить("П000200022005", П000200020005 - П000200021005);
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000200022006, ОбластьИмя) > 0 Тогда
				
				П000200020006 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, ?(Раздел12.Свойство("П000200020006"), Раздел12.П000200020006, 0));
				П000200021006 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, ?(Раздел12.Свойство("П000200021006"), Раздел12.П000200021006, 0));
				
				Раздел12.Вставить("П000200022006", П000200020006 - П000200021006);
				
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел3" Тогда
		
		// Расчет в стр. "Итого ..." (после многострочной части) раздела 3.
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
		 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000300000205, ОбластьИмя) > 0 Тогда
			Форма.мСтруктураМногострочныхРазделов.Свойство(Форма.СтруктураРеквизитовФормы.мИдГруппы3, ТаблицаБлока);
			ТаблицаБлока = Форма[ТаблицаБлока];
			Колонка5 = 0;
			Для Ном = 1 По ТаблицаБлока.Количество() Цикл
				Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел3" Тогда
					Колонка5 = Колонка5 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
										  Форма, Форма.ТабличныйДокумент.Области["П000300000105_" + Ном].Значение);
				Иначе
					Колонка5 = Колонка5 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
										  Форма, ТаблицаБлока[Ном - 1].П000300000105);
				КонецЕсли;
			КонецЦикла;
			Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел3" Тогда
				Форма.ТабличныйДокумент.Области.П000300000205.Значение = Колонка5;
			Иначе
				Форма.СтруктураДанныхРаздел3.Вставить("П000300000205", Колонка5);
			КонецЕсли;
		КонецЕсли;
		
		// Расчет по гр. 3 в стр. 120 раздела 1.
		
		Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел3" Тогда
			Форма.СтруктураДанныхРаздел12.П000100012003 = Форма.ТабличныйДокумент.Области.П000300000205.Значение;
		Иначе
			Форма.СтруктураДанныхРаздел12.П000100012003 = Форма.СтруктураДанныхРаздел3.П000300000205;
		КонецЕсли;
		
		Расчет(Форма, "Раздел12");
		
	ИначеЕсли ИмяТекущейСтраницыПанели = "" Тогда
		
		Расчет(Форма, "Раздел3");
		Расчет(Форма, "Раздел12");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьОтчет(Команда)
	
	Если Элементы.РазделыОтчета.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СохранитьНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНаКлиенте(Автосохранение = Ложь, ВыполняемоеОповещение=Неопределено) Экспорт
		
	Если СтруктураДанныхТитульный.Количество() = 0
		ИЛИ СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
		СтруктураДанныхТитульный.Вставить("НомерКорректировки", ТабличныйДокумент.Области.НомерКорректировки.Значение);
	КонецЕсли;
	
	Вариант = СтруктураРеквизитовФормы.ВидДокумента * СтруктураДанныхТитульный.НомерКорректировки;
			
	Если НЕ РегламентированнаяОтчетностьКлиент.ПриЗаписиРегламентированногоОтчетаНаКлиенте(ЭтаФорма, , Автосохранение, Вариант) Тогда
		Возврат;
	КонецЕсли;
	
	ПодобныйОтчетСуществует = Ложь;
	ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки = Ложь;
	
	Если Элементы.РазделыОтчета.ТекущиеДанные = Неопределено Тогда
		НаименованиеТекущегоРаздела = СтруктураРеквизитовФормы.НаимТекущегоРаздела;
	Иначе
		НаименованиеТекущегоРаздела = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
	КонецЕсли;
	
	РезультатСохранения = ПередСохранением(, ПодобныйОтчетСуществует, Вариант, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, Автосохранение, НаименованиеТекущегоРаздела);
	ВидДокументаНомерКорректировкиИзменен = Неопределено;
	
	Если ПодобныйОтчетСуществует И Автосохранение Тогда
		Возврат;
	КонецЕсли;
	
	НуженВопросПередСохранением = (ПодобныйОтчетСуществует ИЛИ ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки);
	
	Если НуженВопросПередСохранением Тогда
		
		СохранитьНаКлиентеСВопросом(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, ПодобныйОтчетСуществует);
		
	Иначе
		
		ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНаКлиентеСВопросом(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, ПодобныйОтчетСуществует)
	
	Если ПодобныйОтчетСуществует Тогда
		
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(КодВозвратаДиалога.Да, "Сохранить");
		Кнопки.Добавить(КодВозвратаДиалога.Нет, "Отмена");
		
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Отчет с видом %1 уже существует.
			|Сохранить отчет с таким же видом?'"), ?(Вариант = 0, """Первичный""", """Корректирующий/" + Вариант + """"));
		ДополнительныеПараметры = Новый Структура("Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки", Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки);
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросСохранитьОтчетСТакимЖеВидомЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, Кнопки, , Кнопки.Получить(1).Значение);
		
	Иначе
		
		СохранитьНаКлиентеСВопросомПродолжение(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросСохранитьОтчетСТакимЖеВидомЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Автосохранение = ДополнительныеПараметры.Автосохранение;
	Вариант = ДополнительныеПараметры.Вариант;
	ВыполняемоеОповещение = ДополнительныеПараметры.ВыполняемоеОповещение;
	ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки = ДополнительныеПараметры.ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки;
	
	Ответ = РезультатВопроса;
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	СохранитьНаКлиентеСВопросомПродолжение(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНаКлиентеСВопросомПродолжение(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки)
	
	Если ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки Тогда
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("ВидОтчета", Вариант);
		
		ФормаВопроса = РегламентированнаяОтчетностьКлиент.ПолучитьОбщуюФормуПоИмени("ВопросПриИзмененииВидаДокументаНомераКорректировки", ПараметрыФормы);
		ФормаВопроса.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		ДополнительныеПараметры = Новый Структура("Автосохранение, Вариант, ВыполняемоеОповещение", Автосохранение, Вариант, ВыполняемоеОповещение);
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросПриИзмененииВидаДокументаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ФормаВопроса.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
		ФормаВопроса.Открыть();
	Иначе
		Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Сохраняется %1...'"), ЭтаФорма.Заголовок), , , БиблиотекаКартинок.Записать);
		РезультатСохранения = Сохранить(Автосохранение, , Вариант, Ложь, Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
		ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПриИзмененииВидаДокументаЗавершение(КодВозврата, ДополнительныеПараметры) Экспорт
	
	Автосохранение = ДополнительныеПараметры.Автосохранение;
	Вариант = ДополнительныеПараметры.Вариант;
	ВыполняемоеОповещение = ДополнительныеПараметры.ВыполняемоеОповещение;
	
	Если КодВозврата = КодВозвратаДиалога.Да
		ИЛИ КодВозврата = КодВозвратаДиалога.Нет Тогда
		ВидДокументаНомерКорректировкиИзменен = ?(КодВозврата = КодВозвратаДиалога.Да, Истина, Ложь);
	Иначе
		Возврат;
	КонецЕсли;
	
	Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Сохраняется %1...'"), ЭтаФорма.Заголовок), , , БиблиотекаКартинок.Записать);
	РезультатСохранения = Сохранить(Автосохранение, , Вариант, ВидДокументаНомерКорректировкиИзменен, Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
	ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения)
	
	КлючУникальности = СтруктураРеквизитовФормы.мСохраненныйДок;
	
	Если РезультатСохранения Тогда
		
		РегламентированнаяОтчетностьКлиент.ПослеЗаписиРегламентированногоОтчета(ЭтаФорма);
		
		Если ВыполняемоеОповещение <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ВыполняемоеОповещение);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПередСохранением(КодИФНС, ПодобныйОтчетСуществует, Вариант, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, Автосохранение, ПоказателиОтчета)
	
	Если РегламентированнаяОтчетность.БылиИзмененыКлючевыеРеквизитыОтчета(ЭтаФорма, КодИФНС)
	   И РегламентированнаяОтчетность.СуществуетДокументСАналогичнымиРеквизитами(ЭтаФорма, КодИФНС) Тогда
		
		ПодобныйОтчетСуществует = Истина;
		
	КонецЕсли;
	
	СтруктураРеквизитовФормы.мЗаписываетсяНовыйДокумент = (СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено ИЛИ СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено);
	
	Если Вариант <> Неопределено И ((СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено) ИЛИ (СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено) ИЛИ (Вариант <> СтруктураРеквизитовФормы.мВариант)) Тогда
		
		Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено ИЛИ СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено Тогда
						
		ИначеЕсли Вариант <> СтруктураРеквизитовФормы.мВариант Тогда
			
			ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки = Истина;
								
		КонецЕсли;

	КонецЕсли;
	
	Если ПодобныйОтчетСуществует
	 ИЛИ ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки Тогда
	 
	 	Возврат Ложь;
		
 	КонецЕсли;
		
	Возврат Сохранить(Автосохранение, КодИФНС, Вариант, , ПоказателиОтчета);
		
КонецФункции

&НаСервере
Функция Сохранить(Автосохранение = Ложь, КодИФНС = "не применимо", Вариант, ВидДокументаНомерКорректировкиИзменен = Неопределено, НаимТекРаздела) Экспорт
	
	ДанныеДляРазблокирования = Неопределено;
	
	Если НЕ СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
		Если НЕ СтруктураРеквизитовФормы.мБезОткрытияФормы Тогда
			ДанныеДляРазблокирования = Новый Структура("Ключ,ИдФормы",
			СтруктураРеквизитовФормы.мСохраненныйДок, ЭтаФорма.УникальныйИдентификатор);
		КонецЕсли;
		СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.ПолучитьОбъект();
	КонецЕсли;
	
	Если НЕ РегламентированнаяОтчетность.ПриЗаписиРегламентированногоОтчетаНаСервере(ЭтаФорма, КодИФНС, Автосохранение, Вариант, ВидДокументаНомерКорректировкиИзменен, СтруктураРеквизитовФормы.мСохраненныйДок) Тогда
		СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
		Возврат Ложь;
	КонецЕсли;
	
	// установим текущие значения реквизитов документа
	
	СтруктураРеквизитовФормы.мСохраненныйДок.ИсточникОтчета           = Метаданные.Отчеты[Сред(Лев(СтрЗаменить(ЭтаФорма.ИмяФормы, "Внешний", ""), СтрНайти(СтрЗаменить(ЭтаФорма.ИмяФормы, "Внешний", ""), ".Форма.") - 1), 7)].Имя;
	СтруктураРеквизитовФормы.мСохраненныйДок.НаименованиеОтчета       = Метаданные.Отчеты[Сред(Лев(СтрЗаменить(ЭтаФорма.ИмяФормы, "Внешний", ""), СтрНайти(СтрЗаменить(ЭтаФорма.ИмяФормы, "Внешний", ""), ".Форма.") - 1), 7)].ОсновнаяФорма.Синоним;
	СтруктураРеквизитовФормы.мСохраненныйДок.ДатаНачала               = СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета;
	СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания            = СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета;
	СтруктураРеквизитовФормы.мСохраненныйДок.Комментарий              = Комментарий;
	СтруктураРеквизитовФормы.мСохраненныйДок.ВыбраннаяФорма           = СтруктураРеквизитовФормы.мВыбраннаяФорма;
	СтруктураРеквизитовФормы.мСохраненныйДок.Организация              = СтруктураРеквизитовФормы.Организация;
	СтруктураРеквизитовФормы.мСохраненныйДок.ДатаПодписи              = ДатаПодписи;
	СтруктураРеквизитовФормы.мСохраненныйДок.ЕдиницаИзмерения         = СтруктураРеквизитовФормы.ЕдиницаИзмерения;
	СтруктураРеквизитовФормы.мСохраненныйДок.ТочностьЕдиницыИзмерения = СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения;
	СтруктураРеквизитовФормы.мСохраненныйДок.ВидОтчетности            = Перечисления.ВидыОтчетности.РегламентированнаяОтчетность;
	СтруктураРеквизитовФормы.мСохраненныйДок.Вид                      = Вариант;
	СтруктураРеквизитовФормы.мСохраненныйДок.ПредставлениеВида        = РегламентированнаяОтчетность.ПредставлениеВидаДокумента(СтруктураРеквизитовФормы.мСохраненныйДок.Вид);
	
	СтруктураРеквизитовФормы.мВариант = Вариант;

	СтруктураРеквизитовФормы.мСохраненныйДок.ФорматВыгрузки = "Автоматически";
		
	СохранитьДанныеРаздела(НаимТекРаздела, Ложь);

	ЗаполнитьПустыеСтруктурыДанных();
	
	// сохраняем номер пачки
	НомерПачкиИзРегистра = РегламентированнаяОтчетность.ПолучитьНомерПачкиВыгруженныхФайловПФР(СтруктураРеквизитовФормы.Организация, Число(СтруктураДанныхТитульный.ОтчетГод));
	
	Если НЕ ЗначениеЗаполнено(НомерПачки) Тогда
		НомерПачки = НомерПачкиИзРегистра + 1;
	КонецЕсли;
			
	СтруктураРеквизитовФормы.мСохраненныйДок.НомерПачки = НомерПачки;
				
	// формируем данные редактируемых ячеек таблицы
	ПоказателиОтчета = Новый Структура();
	
	ЗаполнитьПоказателиОтчетаНаСервере(ПоказателиОтчета);
	
	// формируем список сохранения
	СписокСохранения = Новый Структура();
	
	// вставляем данные редактируемых ячеек таблицы	
	СписокСохранения.Вставить("ПоказателиОтчета", ПоказателиОтчета);
	
	ДанныеМногострочныхРазделов = Новый Структура;
	
	Для Каждого ЭлементСтруктуры Из мСтруктураМногострочныхРазделов Цикл
		
		ДанныеМногострочныхРазделов.Вставить(ЭлементСтруктуры.Ключ, ДанныеФормыВЗначение(ЭтаФорма[ЭлементСтруктуры.Значение],
		 Тип("ТаблицаЗначений")));
		
	КонецЦикла;
	
	// Вставляем данные многострочных разделов.
	СписокСохранения.Вставить("ДанныеМногострочныхРазделов", ДанныеМногострочныхРазделов);
	
	ДанныеВариантовАвтоЗаполнения = Новый Структура;
	
	Для Каждого ЭлементСтруктуры Из мСтруктураВариантыЗаполнения Цикл
		
		МассивТаблЗнач = Новый Массив;
		
		ДанныеВариантовАвтоЗаполнения.Вставить(ЭлементСтруктуры.Ключ, МассивТаблЗнач);
			
		Для Каждого ЭлементМассива Из ЭтаФорма["ТаблицаВариантыЗаполнения" + ЭлементСтруктуры.Ключ] Цикл
			
			МассивТаблЗнач.Добавить(ДанныеФормыВЗначение(ЭлементМассива.ТаблицаВариантовЗаполнения, Тип("ТаблицаЗначений")));
			
		КонецЦикла;
			
	КонецЦикла;
	
	СписокСохранения.Вставить("ДанныеВариантовАвтоЗаполнения", ДанныеВариантовАвтоЗаполнения);
	СписокСохранения.Вставить("ВерсияФормы", СтруктураРеквизитовФормы.мВерсияФормы);
	СписокСохранения.Вставить("ФлПодсчетСтраниц", СтруктураРеквизитовФормы.мСчетчикСтраниц);
	СписокСохранения.Вставить("ФлОтклВыборЗначений", СтруктураРеквизитовФормы.мАвтоВыборКодов);
	СписокСохранения.Вставить("Автозаполнение", СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);
	СписокСохранения.Вставить("ДокументУпПред", мСтруктураДокУпПред);
	
	ХранилищеДанных = Новый ХранилищеЗначения(СписокСохранения);
	СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета = ХранилищеДанных;

	// записываем документ, хранящий данные отчета
	Попытка
		
		СтруктураРеквизитовФормы.мСохраненныйДок.Записать();
		
		Если НомерПачки > НомерПачкиИзРегистра Тогда
			
			РегламентированнаяОтчетность.УстановитьНомерПачкиВыгруженныхФайловПФР(СтруктураРеквизитовФормы.Организация, 
			 Число(СтруктураДанныхТитульный.ОтчетГод), НомерПачки);
			 
			Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
				ТабличныйДокумент.Области.НомерПачки.Значение = НомерПачки;
			КонецЕсли;
			 
		КонецЕсли;
		
		РегламентированнаяОтчетность.СохранитьСтатусОтправкиРеглОтчета(ЭтаФорма);
		
	Исключение
		Если НЕ Автосохранение Тогда
						
			Сообщение = Новый СообщениеПользователю;

			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), РегламентированнаяОтчетностьКлиентСервер.СформироватьТекстСообщения(ОписаниеОшибки()));

			Сообщение.Сообщить();
			
		КонецЕсли;
		СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
		Возврат Ложь;
	КонецПопытки;
		
	СохранитьДеревоСтраницОтчета(СтруктураРеквизитовФормы.мСохраненныйДок);
    
	Модифицированность = Ложь;
	
	СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
	
	Если НЕ СтруктураРеквизитовФормы.мБезОткрытияФормы
       И НЕ СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
				   
    	ЗаблокироватьДанныеДляРедактирования(СтруктураРеквизитовФормы.мСохраненныйДок, , ЭтаФорма.УникальныйИдентификатор);

    КонецЕсли;
	
	Если ДанныеДляРазблокирования <> Неопределено Тогда
		РазблокироватьДанныеДляРедактирования(ДанныеДляРазблокирования.Ключ, ДанныеДляРазблокирования.ИдФормы);
	КонецЕсли;
	
	Возврат Истина;

КонецФункции

&НаСервере
Функция СформироватьИмяФайла(ПараметрыВыгрузки)
	
	ИмяФайла = "ПФР_" + ПараметрыВыгрузки.КодОрганаПФР + "_РВ-3_"
		+ Формат(ТекущаяДатаСеанса(), "ДФ=ггггММдд") + "_" + ПараметрыВыгрузки.УИД + ".xml";
	
	Возврат ИмяФайла;
	
КонецФункции

&НаСервере
Процедура СформироватьСпискиВыбора()
	
	МакетСоставаПоказателей = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет("СпискиВыбора2015Кв3");
	
	КоллекцияСписковВыбора = Новый Соответствие;
	Для Каждого Область Из МакетСоставаПоказателей.Области Цикл
		Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Строки Тогда
			ВерхОбласти = Область.Верх;
			НизОбласти = Область.Низ;
			ТаблСписка = Новый ТаблицаЗначений;
			ТаблСписка.Колонки.Добавить("Код",,, МакетСоставаПоказателей.Область(ВерхОбласти, 1, ВерхОбласти, 1).ШиринаКолонки);
			ТаблСписка.Колонки.Добавить("Название",,, МакетСоставаПоказателей.Область(ВерхОбласти, 2, ВерхОбласти, 2).ШиринаКолонки);
			Для НомСтр = ВерхОбласти По НизОбласти Цикл
				КодПоказателя = СокрП(МакетСоставаПоказателей.Область(НомСтр, 1).Текст);
				Если КодПоказателя <> "###" Тогда
					НовСтрока = ТаблСписка.Добавить();
					НовСтрока.Код = КодПоказателя;
					НовСтрока.Название = СокрП(МакетСоставаПоказателей.Область(НомСтр, 2).Текст);
				КонецЕсли;
			КонецЦикла;
			КоллекцияСписковВыбора.Вставить(Область.Имя, ТаблСписка);
		КонецЕсли;
	КонецЦикла;
	
	СвойстваПоказателей.Очистить();
	
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей,
		"ПрекращениеДеятельности", 1, , "Прекращение деятельности", КоллекцияСписковВыбора["КодПрекращенияДеятельности"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей,
		"Тариф",                   2, , "Выбор тарифа",     КоллекцияСписковВыбора["КодыТарифов"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей,
		"ПрПодп",                  1, , "Выбор подписанта", КоллекцияСписковВыбора["КодыТиповПодписантов"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей,
		"П000300000102",           1, , "Выбор основания для доначисления взносов", КоллекцияСписковВыбора["КодыОснованийДоначисленияВзносов"]);
	
КонецПроцедуры

&НаСервере
Функция СформироватьСтруктуруПараметров()
	
	Титульный = мДанныеОтчета.ПолеТабличногоДокументаТитульный;
	
	ПараметрыВыгрузки = Новый Структура;
	
	КодОрганаПФР = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(
		СтруктураРеквизитовФормы.Организация, , "КодОрганаПФР")["КодОрганаПФР"];
	ПараметрыВыгрузки.Вставить("КодОрганаПФР", СтрЗаменить(СокрЛП(КодОрганаПФР), "-", ""));
	
	ПараметрыВыгрузки.Вставить("РегистрационныйНомерПФР", СокрЛП(Титульный.НомРег));
	ПараметрыВыгрузки.Вставить("НомерКорректировки",
		РегламентированнаяОтчетностьКлиентСервер.ДополнитьСтроку(СокрЛП(Титульный.НомерКорректировки), 3, "0"));
	ПараметрыВыгрузки.Вставить("КодОтчетногоПериода", СокрЛП(Титульный.Период));
	ПараметрыВыгрузки.Вставить("КалендарныйГод", СокрЛП(Титульный.ОтчетГод));
	ПараметрыВыгрузки.Вставить("ПрекращениеДеятельности", ВРЕГ(СокрЛП(Титульный.ПрекращениеДеятельности)));
	
	НаимОрг = ВРЕГ(СокрЛП(Титульный.ОргНазв));
	ЗаменитьБуквуЁ(НаимОрг, "Наименование организации");
	ПараметрыВыгрузки.Вставить("НаименованиеОрганизации", НаимОрг);
	
	ПараметрыВыгрузки.Вставить("ИНН",  СокрЛП(Титульный.ИНН));
	ПараметрыВыгрузки.Вставить("КПП",  СокрЛП(Титульный.КПП));
	
	ПараметрыВыгрузки.Вставить("КодПоОКВЭД", СтрЗаменить(СокрЛП(СтрЗаменить(СтрЗаменить(Титульный.ОКВЭД, " ", ""), ".", " ")), " ", "."));
	
	ПараметрыВыгрузки.Вставить("Телефон", СокрЛП(Титульный.ТелОрганизации));
	
	ПараметрыВыгрузки.Вставить("ПрПодп", ПредставлениеЧисла(Титульный.ПрПодп));
	
	ФИОПодписанта = РегламентированнаяОтчетность.РазложитьФИО(Титульный.ОргПодписантФамилия);
	ЗаменитьБуквуЁ(ФИОПодписанта.Фамилия,  "Фамилия подписанта");
	ЗаменитьБуквуЁ(ФИОПодписанта.Имя,      "Имя подписанта");
	ЗаменитьБуквуЁ(ФИОПодписанта.Отчество, "Отчество подписанта");
	ПараметрыВыгрузки.Вставить("ФамилияПодписанта",  ВРЕГ(ФИОПодписанта.Фамилия));
	ПараметрыВыгрузки.Вставить("ИмяПодписанта",      ВРЕГ(ФИОПодписанта.Имя));
	ПараметрыВыгрузки.Вставить("ОтчествоПодписанта", ВРЕГ(ФИОПодписанта.Отчество));
	
	Если Титульный.ПрПодп = "2" ИЛИ Титульный.ПрПодп = "3" Тогда
		НаименованиеОрганизацииПредставителя = ВРЕГ(СокрЛП(Титульный.ОргПредНаим));
		ЗаменитьБуквуЁ(НаименованиеОрганизацииПредставителя, "Наименование организации представителя плательщика взносов");
		ПараметрыВыгрузки.Вставить("НаименованиеОрганизацииПредставителя", НаименованиеОрганизацииПредставителя);
	Иначе
		ПараметрыВыгрузки.Вставить("НаименованиеОрганизацииПредставителя", "");
	КонецЕсли;
	
	ПараметрыВыгрузки.Вставить("КодУстановленногоТарифа", СокрЛП(Титульный.Тариф));
	
	СтраницФормы = ПредставлениеЧисла(Титульный.СоставленаНа);
	ПараметрыВыгрузки.Вставить("СтраницФормы", ?(СтраницФормы = "0", "1", СтраницФормы));
	ЛистовПриложения = ПредставлениеЧисла(Титульный.Прил);
	ПараметрыВыгрузки.Вставить("ЛистовПриложения", ?(ЛистовПриложения = "0", "", ЛистовПриложения));
	
	КемВыдан = ВРЕГ(СокрЛП(мСтруктураДокУпПред.КемВыдан));
	ЗаменитьБуквуЁ(КемВыдан, "Кем выдан");
	
	ПараметрыВыгрузки.Вставить("ДокУпПредСерия",       ВРЕГ(СокрЛП(мСтруктураДокУпПред.Серия)));
	ПараметрыВыгрузки.Вставить("ДокУпПредНомер",       ВРЕГ(СокрЛП(мСтруктураДокУпПред.Номер)));
	ПараметрыВыгрузки.Вставить("ДокУпПредКемВыдан",    КемВыдан);
	ПараметрыВыгрузки.Вставить("ДокУпПредДатаВыдачи",  мСтруктураДокУпПред.ДатаВыдачи);
	ПараметрыВыгрузки.Вставить("ДокУпПредДействуетС",  мСтруктураДокУпПред.ДействуетС);
	ПараметрыВыгрузки.Вставить("ДокУпПредДействуетПо", мСтруктураДокУпПред.ДействуетПо);
	
	ПараметрыВыгрузки.Вставить("ДатаЗаполнения", Титульный.ДатаПодписи);
	
	ПараметрыВыгрузки.Вставить("ИмяКлючевогоУзлаСодержательнойЧасти", "РВ-3");
	
	ПараметрыВыгрузки.Вставить("УИД", Строка(Новый УникальныйИдентификатор));
	ТекДата   = ТекущаяДатаСеанса();
	СлужДата  = Формат(ТекДата, "ДФ=гггг-ММ-дд");
	СлужВремя = Формат(ТекДата, "ДФ=ЧЧ:мм:сс");
	ПараметрыВыгрузки.Вставить("ДатаВремя", СлужДата + "T" + СлужВремя);
	
	ПараметрыВыгрузки.Вставить("ИмяФайла", СформироватьИмяФайла(ПараметрыВыгрузки));
	
	Возврат ПараметрыВыгрузки;
	
КонецФункции

&НаСервере
Процедура ЗаменитьБуквуЁ(РедактируемаяСтрока, НазваниеРеквизита)
	
	Если СтрНайти(ВРег(РедактируемаяСтрока), "Ё") > 0 Тогда
		
		РегламентированнаяОтчетностьКлиентСервер.СообщитьОбОшибке("В реквизите """ + НазваниеРеквизита + """ (" + РедактируемаяСтрока +") буква Ё заменена на Е.", Ложь);
		РедактируемаяСтрока = СтрЗаменить(РедактируемаяСтрока, "Ё", "Е");
		РедактируемаяСтрока = СтрЗаменить(РедактируемаяСтрока, "ё", "е");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция УниверсальнаяВыгрузка(ТекстВыгрузки = Неопределено, ПроверятьБлокировки = Истина, ВыгружатьСОшибками = Ложь) Экспорт
	
	Перем ПараметрыВыгрузки;
	
	Если Модифицированность Тогда
		ТекстЗаголовка = ЗаголовокРегламентированногоОтчета(
			СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета, СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
		
		ОргСтр = " (" + СтруктураРеквизитовФормы.Организация + ")";
		Если СтрНайти(ТекстЗаголовка, ОргСтр) = 0 Тогда
			ТекстЗаголовка = ТекстЗаголовка + ОргСтр;
		КонецЕсли;
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Отчет """ + ТекстЗаголовка + """ не сохранен.";
		Сообщение.Сообщить();
		
		Возврат Ложь;
	КонецЕсли;
	
	Если Открыта() Тогда
		
		Если СтруктураРеквизитовФормы.ЕдиницаИзмерения
			<> ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1 Тогда
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='Перед выгрузкой необходимо установить единицу измерения ""в рублях"".'");
			Сообщение.Сообщить();
			
			Возврат Ложь;
			
		КонецЕсли;
		
		Если СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения <> 2 Тогда
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='Перед выгрузкой необходимо установить точность ""2"".'");
			Сообщение.Сообщить();
			
			Возврат Ложь;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ УниверсальнаяВыгрузкаНаСервере(ТекстВыгрузки, ПараметрыВыгрузки, ВыгружатьСОшибками) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Функция ЗаголовокРегламентированногоОтчета(ДатаНач, ДатаКон, Периодичность = Неопределено) Экспорт
		
	СтрПериодОтчета = ПредставлениеПериода( НачалоДня(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета), КонецДня(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета), "ФП = Истина" );
		
	Если СтрНайти(ЭтаФорма.Заголовок, СтрПериодОтчета) = 0 Тогда
		Возврат ЭтаФорма.Заголовок + " за " + СтрПериодОтчета;
	Иначе
		Возврат ЭтаФорма.Заголовок;
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура УстановитьФорматВыводаВПоляхВводаНаСервере(НаимРаздела)
	
	УстановитьФорматВыводаВПоляхВвода(ЭтаФорма, НаимРаздела);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьФорматВыводаВПоляхВвода(Форма, НаимРаздела) Экспорт
	Перем СтруктураГруппы;
    Перем РазмерностьПрописьюТекст;

	Если Форма.СтруктураРеквизитовФормы.ЕдиницаИзмерения = Форма.ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1 Тогда
		Форма.СтруктураРеквизитовФормы.мДелитель = 1;
		РазмерностьПрописьюТекст = "в рублях";
		Форма.СтруктураРеквизитовФормы.мСтрокаФормата = "ЧЦ = 14; ЧДЦ = " + Форма.СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧС = 0";
		
	ИначеЕсли Форма.СтруктураРеквизитовФормы.ЕдиницаИзмерения = Форма.ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1000 Тогда
		Форма.СтруктураРеквизитовФормы.мДелитель = 1000;
		РазмерностьПрописьюТекст = "в тыс. рублей";
		Форма.СтруктураРеквизитовФормы.мСтрокаФормата = "ЧЦ = 14; ЧДЦ = " + Форма.СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧС = 3";
		
	ИначеЕсли Форма.СтруктураРеквизитовФормы.ЕдиницаИзмерения = Форма.ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1000000 Тогда
		Форма.СтруктураРеквизитовФормы.мДелитель = 1000000;
		РазмерностьПрописьюТекст = "в млн. рублей";
		Форма.СтруктураРеквизитовФормы.мСтрокаФормата = "ЧЦ = 14; ЧДЦ = " + Форма.СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧС = 6";
		
	КонецЕсли;

	Для Каждого СтрПоказатели Из Форма.мТаблицаСоставПоказателей Цикл

		Если НЕ НаимРаздела = СтрПоказатели.ИмяПоляТаблДокумента Тогда
			Продолжить;
		КонецЕсли;
				
		КодПоказателя        = СокрП(СтрПоказатели.КодПоказателяПоСоставу);
		ПризнМногострочность = СокрП(СтрПоказатели.ПризнМногострочности);
		КодПоказателяПоСтруктуре = СокрП(СтрПоказатели.КодПоказателяПоСтруктуре);

		Если КодПоказателя = "===" Тогда
			Прервать;
		КонецЕсли;

		Если (Лев(КодПоказателя, 2) = "//") ИЛИ (КодПоказателя = "###") Тогда
			Продолжить;
		КонецЕсли;

		КодПоказателяВФорме = СокрП(СтрПоказатели.КодПоказателяПоФорме);

		ИмяПоказателя = КодПоказателя;
		Если Не ПустаяСтрока(КодПоказателяВФорме) Тогда
			ИмяПоказателя = КодПоказателяВФорме;
		КонецЕсли;

		ТипДанныхПоказателя = СокрП(СтрПоказатели.ТипДанныхПоказателя);		
		
		Если (ТипДанныхПоказателя = "Е") И (НЕ ПустаяСтрока(КодПоказателяПоСтруктуре)) Тогда
			
			ТекТабличноеПоле = Форма.ТабличныйДокумент;
						
		КонецЕсли;
				
		Если (ТипДанныхПоказателя = "Е") И (ПустаяСтрока(КодПоказателяПоСтруктуре)) Тогда

		    ТекТабличноеПоле = Форма.ТабличныйДокумент;
			
			Если ПризнМногострочность <> "/" Тогда
				ФорматируемаяОбласть = ТекТабличноеПоле.Области[ИмяПоказателя];
				ФорматируемаяОбласть.ТипЗначения = Форма.СтруктураРеквизитовФормы.мОписаниеТиповЧислоЕ;
				ФорматируемаяОбласть.Формат = Форма.СтруктураРеквизитовФормы.мСтрокаФормата;
			Иначе
				// определяем кол-во строк многострочного раздела
				// и применяем процедуру форматирования к данной графе
				// по всем строкам
				ИмяГруппы = Лев(ИмяПоказателя, 11);
				Форма.мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);
				
				СтруктураГруппы = Форма[СтруктураГруппы];

				Для НСтр = 1 По СтруктураГруппы.Количество() Цикл
					ФорматируемаяОбласть = ТекТабличноеПоле.Области[ИмяПоказателя + "_" + НСтр];
					ФорматируемаяОбласть.ТипЗначения = Форма.СтруктураРеквизитовФормы.мОписаниеТиповЧислоЕ;
					ФорматируемаяОбласть.Формат = Форма.СтруктураРеквизитовФормы.мСтрокаФормата;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура УстановитьЦветФонаЯчейкиНаКлиенте(ИмяЯчейки = Неопределено, ВариантЗаполнения = Неопределено, ИмяТекущейСтраницыПанели = "") Экспорт
	
	УстановитьЦветФонаЯчейки(ЭтаФорма, ИмяЯчейки, ВариантЗаполнения, ИмяТекущейСтраницыПанели);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЦветФонаЯчейкиНаСервере(ИмяЯчейки = Неопределено, ВариантЗаполнения = Неопределено, ИмяТекущейСтраницыПанели = "") Экспорт
	
	УстановитьЦветФонаЯчейки(ЭтаФорма, ИмяЯчейки, ВариантЗаполнения, ИмяТекущейСтраницыПанели);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЦветФонаЯчейки(Форма, ИмяЯчейки = Неопределено, ВариантЗаполнения = Неопределено, ИмяТекущейСтраницыПанели = "") Экспорт
	Перем ЦветФона;
	Перем Комментарий;

	Если Не ИмяЯчейки = Неопределено Тогда
		// устанавливаем цвет фона конкретной ячейки
		#Если НаКлиенте Тогда
			ИмяСтраницыПанели = РегламентированнаяОтчетностьКлиент.ОпределитьСтраницуПанелиПоКодуПоказателяНаКлиенте(Форма, ИмяЯчейки);
		#Иначе
			ИмяСтраницыПанели = РегламентированнаяОтчетностьВызовСервера.ОпределитьСтраницуПанелиПоКодуПоказателяНаСервере(Форма, ИмяЯчейки);
		#КонецЕсли
		Если ИмяСтраницыПанели = Неопределено Тогда
			Возврат;
		КонецЕсли;

		ИмяПоляТаблДокумента = "ТабличныйДокумент";

		Ключ = "_" + ВариантЗаполнения;
		Форма.мСтруктураЦветовРаскраски.Свойство(Ключ, ЦветФона);

		// КодПоказателяПоСтруктуре
		ЗначениеВКвадратах = РегламентированнаяОтчетностьКлиентСервер.ОбластьЯвляетсяЯчейкойСоставногоПоля(Форма, ИмяЯчейки);
		
		Если ВариантЗаполнения = 4 Тогда

			Если ЗначениеВКвадратах Тогда
				// если ЗНАЧЕНИЕ КВАДРАТИЧНОЕ
				РегламентированнаяОтчетностьКлиентСервер.СвойстваГрупповыхЗначений(Форма, ИмяЯчейки,"УстановитьЗащиту");
			Иначе
				Форма[ИмяПоляТаблДокумента].Области[ИмяЯчейки].Защита = Истина;
			КонецЕсли;

		Иначе

			Если ЗначениеВКвадратах Тогда
				// если ЗНАЧЕНИЕ КВАДРАТИЧНОЕ
				РегламентированнаяОтчетностьКлиентСервер.СвойстваГрупповыхЗначений(Форма, ИмяЯчейки,"СнятьЗащиту");
			Иначе
				Форма[ИмяПоляТаблДокумента].Области[ИмяЯчейки].Защита = Ложь;
			КонецЕсли;
			
		КонецЕсли;

		// установим цвет ячейки
		Если ЗначениеВКвадратах Тогда
			РегламентированнаяОтчетностьКлиентСервер.СвойстваГрупповыхЗначений(Форма, ИмяЯчейки,"ПроставитьЦветРаскраски", ЦветФона);
		Иначе
			Форма[ИмяПоляТаблДокумента].Области[ИмяЯчейки].ЦветФона = ЦветФона;
		КонецЕсли;

	Иначе
		// устанавливаем цвет фона всех автозаполняемых ячеек активной страницы

		#Если НаКлиенте Тогда
			ТаблицаВариантыЗаполнения = РегламентированнаяОтчетностьКлиент.ПолучитьТаблицуВариантовЗаполненияНаКлиенте(Форма, ИмяТекущейСтраницыПанели);
		#Иначе
			ТаблицаВариантыЗаполнения = РегламентированнаяОтчетностьВызовСервера.ПолучитьТаблицуВариантовЗаполненияНаСервере(Форма, ИмяТекущейСтраницыПанели);
		#КонецЕсли
		
		Если ТаблицаВариантыЗаполнения = Неопределено Тогда
			Возврат;
		КонецЕсли;

		Для Каждого Строка Из ТаблицаВариантыЗаполнения Цикл
			ИмяПоказателя            =  Строка.КодПоказателя;
			ВариантЗаполнения        =  Строка.ВариантЗаполнения;
			Комментарий              =  Строка.Комментарий;
			КодПоказателяПоСтруктуре =  Строка.КодПоказателяПоСтруктуре;

			КолвоСтрокВМногострочнойЧасти = РегламентированнаяОтчетностьКлиентСервер.ПоказательВходитВМногострочнуюЧасть(Форма, ИмяПоказателя);

			Если КолвоСтрокВМногострочнойЧасти > 0 Тогда
				Многострочность = Истина;
				БазоваяЧасть = ИмяПоказателя;
			Иначе
				Многострочность = Ложь;
				КолвоСтрокВМногострочнойЧасти = 1;
			КонецЕсли;

			Для Инд = 1 по КолвоСтрокВМногострочнойЧасти Цикл

				ЗначениеВКвадратах = ?(ПустаяСтрока(КодПоказателяПоСтруктуре), Ложь, Истина);

				Если Многострочность Тогда
					ИмяПоказателя = БазоваяЧасть + "_" + Формат(Инд, "ЧГ=0");
				КонецЕсли;

				// Если значение не отображается в квадратах, то и ставить формат ячейки не нужно
				Если НЕ ЗначениеВКвадратах Тогда
					ТекОбластьЯчеек = Форма["ТабличныйДокумент"].Области[ИмяПоказателя];
					Если (Не ПустаяСтрока(Комментарий)) ИЛИ (Не ПустаяСтрока(ТекОбластьЯчеек.Примечание.Текст)) Тогда
						ТекОбластьЯчеек.Примечание.Текст = Комментарий;
					КонецЕсли;
				КонецЕсли;

				Ключ = "_" + ВариантЗаполнения;
				Форма.мСтруктураЦветовРаскраски.Свойство(Ключ, ЦветФона);

				Если ВариантЗаполнения = 4 Тогда
					Если ЗначениеВКвадратах Тогда
						// если ЗНАЧЕНИЕ КВАДРАТИЧНОЕ
						РегламентированнаяОтчетностьКлиентСервер.СвойстваГрупповыхЗначений(Форма, ИмяПоказателя, "УстановитьЗащиту");
					Иначе
						Форма["ТабличныйДокумент"].Области[ИмяПоказателя].Защита = Истина;
					КонецЕсли;

				Иначе

					Если ЗначениеВКвадратах Тогда
						// если ЗНАЧЕНИЕ КВАДРАТИЧНОЕ
						РегламентированнаяОтчетностьКлиентСервер.СвойстваГрупповыхЗначений(Форма, ИмяПоказателя,"СнятьЗащиту");
					Иначе
						Форма["ТабличныйДокумент"].Области[ИмяПоказателя].Защита = Ложь;
					КонецЕсли;
				КонецЕсли;

				Если ЗначениеВКвадратах Тогда
					РегламентированнаяОтчетностьКлиентСервер.СвойстваГрупповыхЗначений(Форма, ИмяПоказателя,"ПроставитьЦветРаскраски", ЦветФона);
				Иначе
					Форма["ТабличныйДокумент"].Области[ИмяПоказателя].ЦветФона = ЦветФона;
				КонецЕсли;

			КонецЦикла;

		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ФормироватьСтруктуруСвойствСтраниц() Экспорт
	
	мСвойстваРазделовДекларации.ПолучитьЭлементы().Очистить();

	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();

	// Добавим св-ва Титульного листа
	СтрокаУровня1.ИмяСтраницы                          = "Титульный";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Ложь;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;

	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();

	СтрокаУровня1.ИмяСтраницы                          = "Раздел12";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Истина;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	
	СтрокаУровня1.ИмяСтраницы                          = "Раздел3";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Истина;
	
	НовСтр = СтрокаУровня1.МногострочностьВРазделе.Добавить();
	НовСтр.ИдГруппы = СтруктураРеквизитовФормы.мИдГруппы3;
	НовСтр.Область = "МногострочнаяЧасть";
	НовСтр.ВысотаСтроки = 1;
	
КонецПроцедуры

&НаСервере
Процедура ФормироватьСтруктуруСтраницОтчета() Экспорт
	
	мДеревоСтраницОтчета.ПолучитьЭлементы().Очистить();
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Титульный";
	СтрокаУровня1.Представление            = "Титульный лист";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел12";
	СтрокаУровня1.Представление            = "Разделы 1, 2";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел3";
	СтрокаУровня1.Представление            = "Раздел 3";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	
КонецПроцедуры

&НаКлиенте
Процедура ВвестиПоказатель(Элемент, Область, КодПоказателя, Знач ЭтоСумма, Знач ТекстВыбора, ТаблицаВыбора, СтандартнаяОбработка, КолонкаПоиска = "Код") Экспорт
	
	Если ТаблицаВыбора = Неопределено ИЛИ СтруктураРеквизитовФормы.мАвтоВыборКодов Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	Если Область.Имя = КодПоказателя Тогда
		ИсходноеЗначение = ?(ТипЗнч(Область.Значение) = Тип("Строка"), СокрЛП(Область.Значение), Область.Значение);
	Иначе
		Разделитель = ?(Лев(Область.Имя, СтрДлина(КодПоказателя) + 1) = КодПоказателя + "_", "_", "");
		ИндексОбласти = 1;
		ИсходноеЗначение = "";
		Пока ЭтаФорма[ТекущийЭлемент.Имя].Области.Найти(КодПоказателя + Разделитель + Формат(ИндексОбласти, "ЧГ=")) <> Неопределено Цикл
			ИсходноеЗначение = ИсходноеЗначение + Строка(ЭтаФорма[ТекущийЭлемент.Имя].Области[КодПоказателя + Разделитель + Формат(ИндексОбласти, "ЧГ=")].Значение);
			ИндексОбласти = ИндексОбласти + 1;
		КонецЦикла;
		ИсходноеЗначение = СокрЛП(ИсходноеЗначение);
	КонецЕсли;
	
	ОблПрПодписанта = ТабличныйДокумент.Области.Найти("ПрПодп");
	ПрПодписанта = ?(ОблПрПодписанта = Неопределено, "", ОблПрПодписанта.Значение);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Заголовок",          ТекстВыбора);
	ПараметрыФормы.Вставить("ТаблицаЗначений",    ТаблицаВыбора);
	ПараметрыФормы.Вставить("СтруктураДляПоиска", Новый Структура(КолонкаПоиска, ИсходноеЗначение));
	
	ДополнительныеПараметры = Новый Структура("ИндексОбласти, КодПоказателя, КолонкаПоиска, Область, ПрПодписанта, Разделитель", ИндексОбласти, КодПоказателя, КолонкаПоиска, Область, ПрПодписанта, Разделитель);
	ОписаниеОповещения = Новый ОписаниеОповещения("ВвестиПоказательЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ОткрытьФорму("Обработка.ОбщиеОбъектыРеглОтчетности.Форма.ФормаВыбораЗначенияИзТаблицы",
		ПараметрыФормы, ЭтаФорма,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ВвестиПоказательЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	ИндексОбласти = ДополнительныеПараметры.ИндексОбласти;
	КодПоказателя = ДополнительныеПараметры.КодПоказателя;
	КолонкаПоиска = ДополнительныеПараметры.КолонкаПоиска;
	Область = ДополнительныеПараметры.Область;
	ПрПодписанта = ДополнительныеПараметры.ПрПодписанта;
	Разделитель = ДополнительныеПараметры.Разделитель;
	
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Область.Имя = КодПоказателя ИЛИ РегламентированнаяОтчетностьКлиентСервер.ПоказательВходитВМногострочнуюЧасть(
		ЭтаФорма, КодПоказателя) > 0 Тогда
		Область.Значение = РезультатВыбора[КолонкаПоиска];
	Иначе
		СтрокаРезультатВыбора = Строка(РезультатВыбора[КолонкаПоиска]);
		Для Инд = СтрДлина(СтрокаРезультатВыбора) + 1 По ИндексОбласти - 1 Цикл
			СтрокаРезультатВыбора = " " + РезультатВыбора[КолонкаПоиска];
		КонецЦикла;
		Для Инд = 1 По ИндексОбласти - 1 Цикл
			ЭтаФорма[ТекущийЭлемент.Имя].Области[КодПоказателя + Разделитель + Формат(Инд, "ЧГ=")].Значение
			= СокрЛП(Сред(РезультатВыбора[КолонкаПоиска], Инд, 1));
		КонецЦикла;
	КонецЕсли;
	
	Модифицированность = Истина;
	
	РасчетНаКлиенте(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	Если Область.Имя = "ПрПодп" Тогда
		ПрПодписантаНов = ТабличныйДокумент.Области.ПрПодп.Значение;
		СменилсяПрПодписанта = ?(ПрПодписанта = ПрПодписантаНов, Ложь, Истина);
		
		Если СменилсяПрПодписанта Тогда
			Если ПрПодписантаНов = "1" Тогда
				ЗаполнитьСведенияОбОрганизации(Истина);
			Иначе
				РазрешитьВводСведенийОПредставителе();
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РазрешитьВводСведенийОПредставителе()
	
	ТабличныйДокумент.Области.ОргПредНаим.Защита = Ложь;
	ТабличныйДокумент.Области.ОргПредНаим.ЦветФона = СтруктураРеквизитовФормы.ЦветЖелтый;
	
	ТабличныйДокумент.Области.ДокУпПред.Защита = Ложь;
	ТабличныйДокумент.Области.ДокУпПред.ЦветФона = СтруктураРеквизитовФормы.ЦветЖелтый;
	
	ТабличныйДокумент.Области.ОргПодписантФамилия.Значение = "";
	
КонецПроцедуры

&НаСервере
Функция ВывестиПоказательВXML(Узел, ЗначениеПоказателя)
	
	МинШирина = Узел.МинРазмерность;
	МаксШирина = Узел.МаксРазмерность;
	
	Если Узел.Формат = "T" ИЛИ Узел.Формат = "Т" Тогда // учтем оба варианта: кириллицу и латиницу
		ЗначениеПоказателяСтр = СокрЛП(ЗначениеПоказателя);
		Пока СтрНайти(ЗначениеПоказателяСтр, "  ") > 0 Цикл
			ЗначениеПоказателяСтр = СтрЗаменить(ЗначениеПоказателяСтр, "  ", " ");
		КонецЦикла;
		Пока СтрНайти(ЗначениеПоказателяСтр, " -") > 0 Цикл
			ЗначениеПоказателяСтр = СтрЗаменить(ЗначениеПоказателяСтр, " -", "-");
		КонецЦикла;
		Пока СтрНайти(ЗначениеПоказателяСтр, "- ") > 0 Цикл
			ЗначениеПоказателяСтр = СтрЗаменить(ЗначениеПоказателяСтр, "- ", "-");
		КонецЦикла;
		Узел.Значение = ?(МаксШирина < СтрДлина(ЗначениеПоказателяСтр), СокрЛП(Лев(ЗначениеПоказателяСтр, МаксШирина)), ЗначениеПоказателяСтр);
	ИначеЕсли Узел.Формат = "N" Тогда
		СтрокаФормата = "ЧРД=.; ЧН=; ЧГ=;";
		Если Узел.МаксРазмерность <> 0 И Узел.МаксРазмерность <> 99999 Тогда
			СтрокаФормата = СтрокаФормата + "ЧЦ=" + Формат(Узел.МаксРазмерность, "ЧГ=") + ";";
		КонецЕсли;
		Если Узел.МинРазмерность <> 99999 Тогда
			СтрокаФормата = СтрокаФормата + "ЧДЦ=" + Формат(Узел.МинРазмерность, "ЧГ=") + ";";
		КонецЕсли;
		Узел.Значение = СокрЛП(Формат(ЗначениеПоказателя, СтрокаФормата));
	ИначеЕсли Узел.Формат = "Д" Тогда
		Если ЗначениеЗаполнено(ЗначениеПоказателя) Тогда
			Узел.Значение = СокрЛП(Формат(ЗначениеПоказателя, "ДФ=""гггг-ММ-дд"""));
		Иначе
			Узел.Значение = "";
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ВыгрузитьДеревоВXML(ДеревоВыгрузки, ПараметрыВыгрузки)
	
	ПотокXML = РегламентированнаяОтчетность.СоздатьНовыйПотокXML(); // создаем новый поток для записи
	ЗаписатьУзелДереваВXML(ДеревоВыгрузки, ПотокXML, ПараметрыВыгрузки); // пишем дерево в поток
	ТекстДляЗаписи = ПотокXML.Закрыть(); // получаем текст XML
	Возврат ТекстДляЗаписи;
	
КонецФункции

&НаСервере
Функция ЗаписатьУзелДереваВXML(СтрокаДерева, ПотокXML, ПараметрыВыгрузки) Экспорт
	
	Если ТипЗнч(СтрокаДерева) = Тип("ДеревоЗначений") Тогда
		ПотокXML.ЗаписатьНачалоЭлемента("ЭДПФР");
		ПотокXML.ЗаписатьАтрибут("xmlns",     "http://пф.рф/ВС/РВ-3/2015-01-01");
		ПотокXML.ЗаписатьАтрибут("xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");
		ПотокXML.ЗаписатьАтрибут("xmlns:АФ",  "http://пф.рф/АФ");
		ПотокXML.ЗаписатьАтрибут("xmlns:ВС",  "http://пф.рф/ВС/типы/2014-01-01");
		ПотокXML.ЗаписатьАтрибут("xmlns:РВ",  "http://пф.рф/ВС/типыРВ/2014-01-01");
		ПотокXML.ЗаписатьАтрибут("xmlns:УТ",  "http://пф.рф/унифицированныеТипы/2014-01-01");
		Для каждого Стр Из СтрокаДерева.Строки Цикл
			ЗаписатьУзелДереваВXML(Стр, ПотокXML, ПараметрыВыгрузки);
		КонецЦикла;
		ПотокXML.ЗаписатьКонецЭлемента();
	Иначе
		Если СтрокаДерева.Тип = "А" ИЛИ СтрокаДерева.Тип = "A" Тогда
			ПотокXML.ЗаписатьАтрибут(СтрокаДерева.Код, Строка(СтрокаДерева.Значение));
		Иначе
			ПотокXML.ЗаписатьНачалоЭлемента(СтрокаДерева.Код);
			Для каждого Лист из СтрокаДерева.Строки Цикл
				ЗаписатьУзелДереваВXML(Лист, ПотокXML, ПараметрыВыгрузки);
			КонецЦикла;
			ПотокXML.ЗаписатьТекст(Строка(СтрокаДерева.Значение));
			ПотокXML.ЗаписатьКонецЭлемента();
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьДатуВЯчейкахНаСервере() Экспорт
    	
	ЗаполнитьДатуВЯчейках(ЭтаФорма);
		
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДатуВЯчейкахНаКлиенте() Экспорт
    	
	ЗаполнитьДатуВЯчейках(ЭтаФорма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьДатуВЯчейках(Форма)

	Форма.ТабличныйДокумент.Области.ДатаПодписи.Значение = Форма.ДатаПодписи;
    	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНачальныеНастройки() Экспорт
	
	МакетСоставаПоказателей = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(СтруктураРеквизитовФормы.мСоставПоказателей);

	ОписаниеТиповСтрока15  = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(15));
	ОписаниеТиповСтрока50  = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(50));
	ОписаниеТиповСтрока100 = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100));
	ОписаниеТиповЧисло1    = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(1));
	ОписаниеТиповЧисло15   = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2));
	
	МассивТиповТаблицаЗначений = Новый Массив; 
	МассивТиповТаблицаЗначений.Добавить(Тип("ТаблицаЗначений"));
	ОписаниеТиповТаблицаЗначений = Новый ОписаниеТипов(МассивТиповТаблицаЗначений);
	
	ДобавляемыеРеквизиты = Новый Массив;
	
	Для Инд = 0 По МакетСоставаПоказателей.Области.Количество() - 1 Цикл
				
		ТекОбласть    = МакетСоставаПоказателей.Области[Инд];
		ИмяСтраницы   = ТекОбласть.Имя;
		
		ЭтаФорма["ТаблицаВариантыЗаполнения" + ИмяСтраницы].Добавить();
		// Таблица значений содержит информацию о вариантах заполнения показателя отчета.
		// В колонках таблицы значений отображается следующая информация:
		//   - имя ячейки (код показателя);
		//   - вариант заполнения ячейки;
		//   - вычисленное по данным ИБ значение ячейки;
		//   - величина автокорректировки значения ячейки;
		//   - примечание к ячейке.
		
		ТаблицаВариантыЗаполнения = Новый ТаблицаЗначений;
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "КодПоказателя",     ОписаниеТиповСтрока50  );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "ВариантЗаполнения", ОписаниеТиповЧисло1    );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "ЗначениеАвто",      СтруктураРеквизитовФормы.мОписаниеТиповЧислоЕ   );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "Дельта",            СтруктураРеквизитовФормы.мОписаниеТиповЧислоЕ   );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "Комментарий",       ОписаниеТиповСтрока100 );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "КодПоказателяПоСтруктуре",       ОписаниеТиповСтрока50 );
				
		Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
			// перебираем строки макета
            					
			// Код показателя (по составу показателей) определяется по первой колонке макета
			КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
			ИмяПоказателя = КодПоказателя;

			Если КодПоказателя = "===" Тогда         // признак конечной строки
				Прервать;
			КонецЕсли;

			Если Лев(КодПоказателя, 2) = "//" Тогда  // пропускаем комментарии
				Продолжить;
			КонецЕсли;

			// код показателя по форме отчете (имя ячейки в полях табличного документа формы)
			КодПоказателяПоФорме = СокрЛП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
			// признак многострочности определяется по третьей колонке макета
			ПризнМногострочность = СокрЛП(МакетСоставаПоказателей.Область(Ном, 3).Текст);
			// по четвертой колонке определяется тип данных реквизита
			ТипДанныхРеквизита   = СокрЛП(МакетСоставаПоказателей.Область(Ном, 4).Текст);
			// по колонке 5 определяется исходное количество строк многострочного раздела
			стрКолСтрокИсходный  = СокрЛП(МакетСоставаПоказателей.Область(Ном, 5).Текст);
			// вариант заполнения ячейки определяется по колонке 6 макета
			стрВариантЗаполнения = РегламентированнаяОтчетность.ПолучитьВариантЗаполненияПоказателяРегОтчета(МакетСоставаПоказателей, Ном);
			// код показателя из структуры, берется из колонки 9
			КодПоказателяПоСтруктуре = СокрЛП(МакетСоставаПоказателей.Область(Ном, 9).Текст);

			чКолСтрокИсходный    = ? (ПустаяСтрока(стрКолСтрокИсходный),  0, Число(стрКолСтрокИсходный));
			чВариантЗаполнения   = ? (ПустаяСтрока(стрВариантЗаполнения), 0, Число(стрВариантЗаполнения));

			// формируем таблицу значений, содержащей состав показателей отчета
			НоваяСтрока = мТаблицаСоставПоказателей.Добавить();
			НоваяСтрока.ИмяПоляТаблДокумента   = ИмяСтраницы;
			НоваяСтрока.КодПоказателяПоСоставу = КодПоказателя;
			НоваяСтрока.КодПоказателяПоФорме   = КодПоказателяПоФорме;
			НоваяСтрока.ПризнМногострочности   = ПризнМногострочность;
			НоваяСтрока.ТипДанныхПоказателя    = ТипДанныхРеквизита;
			НоваяСтрока.КодПоказателяПоСтруктуре = КодПоказателяпоСтруктуре;

			Если чВариантЗаполнения <> 0 Тогда
				// Если в колонке 6 задан вариант заполнения показателя, 
				// то его значение может определяться по данным ИБ.
				// Дополняем таблицу значений вариантов заполнения
				НоваяСтрока = ЭтаФорма["ТаблицаВариантыЗаполнения" + ИмяСтраницы][0].ТаблицаВариантовЗаполнения.Добавить();
				НоваяСтрока.КодПоказателя      = ? (Не ПустаяСтрока(КодПоказателяПоФорме), КодПоказателяПоФорме, КодПоказателя);
				НоваяСтрока.ВариантЗаполнения  = чВариантЗаполнения;
			КонецЕсли;

		КонецЦикла;

		Если ЭтаФорма["ТаблицаВариантыЗаполнения" + ИмяСтраницы][0].ТаблицаВариантовЗаполнения.Количество() > 0 Тогда	
			// имеются автоматически заполняемые ячейки
            
			// Создаем структуру, содержащей варианты заполнения показателей отчета.
			//
			// В качестве ключа используется имя страницы основной панели формы, содержащей
			//   табличный документ с автоматически заполняемыми показателями.
			// В качестве значения принимаем Массив из таблицы значений - вариантов заполнения
			//   показателей по каждой странице многостраничного раздела.
			//
			мСтруктураВариантыЗаполнения.Вставить(ИмяСтраницы, ИмяСтраницы);
			мСтруктураВариантыЗаполненияЭталон.Вставить(ИмяСтраницы, ИмяСтраницы);
						
		Конецесли;

	КонецЦикла;

	ФормироватьСтруктуруСтраницОтчета();
	
КонецПроцедуры

&НаСервере
Функция ИзвлечьСтруктуруXML()
	
	ДеревоСтруктуры = Новый ДеревоЗначений;
	ДеревоСтруктуры.Колонки.Добавить("Код");
	ДеревоСтруктуры.Колонки.Добавить("Тип");
	ДеревоСтруктуры.Колонки.Добавить("Формат");
	ДеревоСтруктуры.Колонки.Добавить("МинРазмерность");
	ДеревоСтруктуры.Колонки.Добавить("МаксРазмерность");
	ДеревоСтруктуры.Колонки.Добавить("Обязательность");
	ДеревоСтруктуры.Колонки.Добавить("Многостраничность");
	ДеревоСтруктуры.Колонки.Добавить("Многострочность");
	ДеревоСтруктуры.Колонки.Добавить("Раздел");
	ДеревоСтруктуры.Колонки.Добавить("Ключ");
	ДеревоСтруктуры.Колонки.Добавить("Условие");
	ДеревоСтруктуры.Колонки.Добавить("ЗначениеПоУмолчанию");
	ДеревоСтруктуры.Колонки.Добавить("Значение");
	ДеревоСтруктуры.Колонки.Добавить("Представление");
	ДеревоСтруктуры.Колонки.Добавить("Показатели");
	
	Макет = Отчеты[Сред(Лев(ЭтаФорма.ИмяФормы, СтрНайти(
		ЭтаФорма.ИмяФормы, ".Форма.") - 1), 7)].ПолучитьМакет("СхемаВыгрузкиПФР_2015Кв3");
	
	ВысотаТаблицы = Макет.ВысотаТаблицы;
	
	УчтенныеГруппы = Новый Соответствие;
	
	Для Уровень = 0 По Макет.КоличествоУровнейГруппировокСтрок() - 1 Цикл
		Макет.ПоказатьУровеньГруппировокСтрок(Уровень);
		Для НомерСтроки = 2 По ВысотаТаблицы Цикл
			НомСтр = ВысотаТаблицы - НомерСтроки + 2;
			Если Макет.Область(НомСтр, 0, НомСтр, 0).Видимость И УчтенныеГруппы.Получить(НомСтр) = Неопределено Тогда
				
				РодительскийУзел = ДеревоСтруктуры;
				Если Уровень <> 0 Тогда
					Для Инд = 1 По НомСтр - 2 Цикл
						Узел = УчтенныеГруппы.Получить(НомСтр - Инд);
						Если Узел <> Неопределено Тогда
							РодительскийУзел = Узел;
							Прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				НовСтр = РодительскийУзел.Строки.Вставить(0);
				НовСтр.Код = СокрЛП(Макет.Область(НомСтр, 1, НомСтр, 1).Текст);
				НовСтр.Раздел = СокрЛП(Макет.Область(НомСтр, 2, НомСтр, 2).Текст);
				НовСтр.Ключ = СокрЛП(Макет.Область(НомСтр, 3, НомСтр, 3).Текст);
				НовСтр.Тип = СокрЛП(Макет.Область(НомСтр, 4, НомСтр, 4).Текст);
				НовСтр.Формат = СокрЛП(Макет.Область(НомСтр, 5, НомСтр, 5).Текст);
				МинРазмерность = СокрЛП(Макет.Область(НомСтр, 6, НомСтр, 6).Текст);
				НовСтр.МинРазмерность = ?(ПустаяСтрока(МинРазмерность), ?(НовСтр.Формат = "N", 99999, 0), Число(МинРазмерность));
				МаксРазмерность = СокрЛП(Макет.Область(НомСтр, 7, НомСтр, 7).Текст);
				НовСтр.МаксРазмерность = ?(ПустаяСтрока(МаксРазмерность), 99999, Число(МаксРазмерность));
				НовСтр.Обязательность = СокрЛП(Макет.Область(НомСтр, 8, НомСтр, 8).Текст);
				НовСтр.Многостраничность = НЕ ПустаяСтрока(Макет.Область(НомСтр, 9, НомСтр, 9).Текст);
				НовСтр.Многострочность = НЕ ПустаяСтрока(Макет.Область(НомСтр, 10, НомСтр, 10).Текст);
				НовСтр.Условие = СокрЛП(Макет.Область(НомСтр, 11, НомСтр, 11).Текст);
				НовСтр.ЗначениеПоУмолчанию = СокрЛП(Макет.Область(НомСтр, 12, НомСтр, 12).Текст);
				НовСтр.Представление = СокрЛП(Макет.Область(НомСтр, 13, НомСтр, 13).Текст);
				
				УчтенныеГруппы.Вставить(НомСтр, НовСтр);
				
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат ДеревоСтруктуры;
	
КонецФункции

&НаКлиенте
Процедура Обновить(Команда)
	
	СтруктураРеквизитовФормы.мВпрограммеИзмененаОрганизация = Истина;
	
	ЗаполнитьСведенияОбОрганизации();
		
	СтруктураРеквизитовФормы.мВпрограммеИзмененаОрганизация = Ложь;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуНастроек(Команда)
	
	ОткрытьФормуВыбораСтраниц("ВыбратьДляНастройки");
	    
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораСтраниц(ВариантВыбора)
	Перем ТекущийРазделОтчетаСокрНаим;
	Перем НомерСтраницыРазделаОтчета;
	
	Если НЕ Элементы.РазделыОтчета.ТекущиеДанные = Неопределено Тогда
		ТекущийРазделОтчетаСокрНаим = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
		НомерСтраницыРазделаОтчета  = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета;
	КонецЕсли;
	
	мПараметры = Новый Структура;
	мПараметры.Вставить("ПроверкаСоотношений", Ложь);
	мПараметры.Вставить("РазрешитьВстроеннуюПечать", Ложь);
	мПараметры.Вставить("Автосохранение", Ложь);
	мПараметры.Вставить("СчетчикСтраниц", Истина);
	мПараметры.Вставить("Выгрузка", Ложь);
	мПараметры.Вставить("ИмеетсяРеквизитДеревоВыбранныхСтраниц", Истина);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ФлажокОтклАвтоРасчет", СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);
	ПараметрыФормы.Вставить("мСчетчикСтраниц", СтруктураРеквизитовФормы.мСчетчикСтраниц);
	ПараметрыФормы.Вставить("мАвтоВыборКодов", СтруктураРеквизитовФормы.мАвтоВыборКодов);
	ПараметрыФормы.Вставить("ЕдиницаИзмерения", СтруктураРеквизитовФормы.ЕдиницаИзмерения);
	ПараметрыФормы.Вставить("ТочностьЕдиницыИзмерения", СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения);
	ПараметрыФормы.Вставить("мПараметры", мПараметры);
	
	ФормаНастройкиОтчета = РегламентированнаяОтчетностьКлиент.ПолучитьОбщуюФормуПоИмени("НастройкиОтчета", ПараметрыФормы, ЭтаФорма);
	
	мДеревоВыбранныхСтраниц.ПолучитьЭлементы().Очистить();
	
	КопироватьДанныеФормы(мДеревоСтраницОтчета, ФормаНастройкиОтчета.Дерево);
	
	ЗначениеАвторасчета = СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет;
	ЗначениеЕдИзм       = СтруктураРеквизитовФормы.ЕдиницаИзмерения;
	ЗначениеЗпт         = СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения;
	
	ДополнительныеПараметры = Новый Структура("ЗначениеАвторасчета, ЗначениеЕдИзм, ЗначениеЗпт, НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим", ЗначениеАвторасчета, ЗначениеЕдИзм, ЗначениеЗпт, НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим);
	ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьФормуВыбораСтраницЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ФормаНастройкиОтчета.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
	ФормаНастройкиОтчета.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	ФормаНастройкиОтчета.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораСтраницЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	ЗначениеАвторасчета = ДополнительныеПараметры.ЗначениеАвторасчета;
	ЗначениеЕдИзм = ДополнительныеПараметры.ЗначениеЕдИзм;
	ЗначениеЗпт = ДополнительныеПараметры.ЗначениеЗпт;
	НомерСтраницыРазделаОтчета = ДополнительныеПараметры.НомерСтраницыРазделаОтчета;
	ТекущийРазделОтчетаСокрНаим = ДополнительныеПараметры.ТекущийРазделОтчетаСокрНаим;
	
	Модифицированность = Истина;
	
	флЗначенияИдентичны = Истина;
	
	Для Индекс = 0 По мДеревоСтраницОтчета.ПолучитьЭлементы().Количество() - 1 Цикл
		
		Если НЕ мДеревоСтраницОтчета.ПолучитьЭлементы()[Индекс].ПоказатьСтраницу = мДеревоВыбранныхСтраниц.ПолучитьЭлементы()[Индекс].ПоказатьСтраницу Тогда
			флЗначенияИдентичны = Ложь;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЗначениеАвторасчета <> СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Тогда
		Если СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет = Ложь Тогда
			ДополнительныеПараметры = Новый Структура("ЗначениеЕдИзм, ЗначениеЗпт, НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим, флЗначенияИдентичны", ЗначениеЕдИзм, ЗначениеЗпт, НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим, флЗначенияИдентичны);
			ОписаниеОповещения = Новый ОписаниеОповещения("ВопросПерерасчетВсехПоказателейЗавершение", ЭтотОбъект, ДополнительныеПараметры);
			ТекстВопроса = НСтр("ru='Будет произведен перерасчет всех рассчитываемых показателей. Продолжить?'");
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
		Иначе
			ИзменитьТаблицуВариантовЗаполненияНаСервере();
			ПоказатьСтраницыОтчета(ЗначениеЕдИзм, ЗначениеЗпт, НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим, флЗначенияИдентичны);
		КонецЕсли;
	Иначе
		ПоказатьСтраницыОтчета(ЗначениеЕдИзм, ЗначениеЗпт, НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим, флЗначенияИдентичны);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПерерасчетВсехПоказателейЗавершение(РезультатВопроса, ДополнительныеПараметры1) Экспорт
	
	ЗначениеЕдИзм = ДополнительныеПараметры1.ЗначениеЕдИзм;
	ЗначениеЗпт = ДополнительныеПараметры1.ЗначениеЗпт;
	НомерСтраницыРазделаОтчета = ДополнительныеПараметры1.НомерСтраницыРазделаОтчета;
	ТекущийРазделОтчетаСокрНаим = ДополнительныеПараметры1.ТекущийРазделОтчетаСокрНаим;
	флЗначенияИдентичны = ДополнительныеПараметры1.флЗначенияИдентичны;
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ПолныйРасчетНаСервере();
		ПоказатьСтраницыОтчета(ЗначениеЕдИзм, ЗначениеЗпт, НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим, флЗначенияИдентичны);
	Иначе
		СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПолныйРасчетНаСервере()
	
	ИзменитьТаблицуВариантовЗаполненияНаСервере();
	РасчетНаСервере("", "");
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСтраницыОтчета(ЗначениеЕдИзм, ЗначениеЗпт, НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим, флЗначенияИдентичны)
	
	Если ЗначениеЕдИзм <> СтруктураРеквизитовФормы.ЕдиницаИзмерения
		ИЛИ ЗначениеЗпт <> СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения Тогда
		ПослеСменыЕдИзмеренияИТочности();
	КонецЕсли;
	
	// Управляем видимостью страниц основной панели формы.
	РегламентированнаяОтчетностьКлиент.ПоказатьСтраницыОтчетаНаКлиенте(ЭтаФорма);
	
	Если НЕ флЗначенияИдентичны Тогда
		
		СформироватьДеревоРазделовОтчетаНаКлиенте();
		
		Если НЕ ТекущийРазделОтчетаСокрНаим = Неопределено Тогда
			
			// Пытаемся найти ранее запомненный раздел.
			НайденнаяСтрока = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(РазделыОтчета.ПолучитьЭлементы(), "КолонкаРазделыОтчетаСокрНаим", ТекущийРазделОтчетаСокрНаим);
			
			Если НЕ НайденнаяСтрока = Неопределено 
				И НЕ НомерСтраницыРазделаОтчета = Неопределено 
				И НайденнаяСтрока.ПолучитьЭлементы().Количество() > 0 Тогда
				
				НайденнаяСтрока = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(НайденнаяСтрока.ПолучитьЭлементы(), "КолонкаНомерСтраницыРазделаОтчета", НомерСтраницыРазделаОтчета);
				
			КонецЕсли;
			
			// В случае успешного поиска, устанавливаем курсор на найденный раздел.
			Если НЕ НайденнаяСтрока = Неопределено Тогда
				Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяСтрока.ПолучитьИдентификатор();
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузку(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьВыгрузкуЗавершение", ЭтотОбъект);

	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
		
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузкуЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПроверитьВыгрузкуОтчета();
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузкуОтчета()
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьВыгрузкуОтчетаЗавершение", ЭтотОбъект);
	
	Если Модифицированность Тогда
		СохранитьНаКлиенте(,ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузкуОтчетаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ФормаВыгрузкиРеглОтчета = ПолучитьФорму("Документ.ВыгрузкаРегламентированныхОтчетов.Форма.ФормаДокумента", , ЭтаФорма);
	
	СпДокОсн = Новый СписокЗначений;
	СпДокОсн.Добавить(СтруктураРеквизитовФормы.мСохраненныйДок);
	
	ФормаВыгрузкиРеглОтчета.Проверить(СпДокОсн);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьПользовательскиеНастройки()
	
	Сообщение = Новый СообщениеПользователю;

	Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Изменилась версия формы отчета.%1Выполняется обновление пользовательских настроек.'"), Символы.ПС);

	Сообщение.Сообщить();

	// Обновляем варианты заполнения показателей отчета
	ЕстьИзмененияВариантыЗаполнения = ОбновитьВариантыЗаполнения();
	
	// Обновляем настройки страниц отчета (содержание отчета)
	ЕстьИзмененияНастройкаСтраниц = ОбновитьНастройкиСтраниц();

	Если ЕстьИзмененияВариантыЗаполнения ИЛИ ЕстьИзмененияНастройкаСтраниц Тогда
		// Если были изменения в пользовательских настройках,
		// то устанавливаем флаг модифицированности формы.
		Модифицированность = Истина;

		Сообщение = Новый СообщениеПользователю;

		Сообщение.Текст = НСтр("ru='Обновление пользовательских настроек успешно завершено!'");

		Сообщение.Сообщить();

	Иначе
		
		Сообщение = Новый СообщениеПользователю;

		Сообщение.Текст = НСтр("ru='Изменения в структуре пользовательских настроек не обнаружены!'");

		Сообщение.Сообщить();

	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОбработатьУсловныеЭлементы(Знач ПараметрыВыгрузки, Узел)
	
	Если ТипЗнч(Узел) <> Тип("ДеревоЗначений") Тогда
		Если Узел.Код = ПараметрыВыгрузки.ИмяКлючевогоУзлаСодержательнойЧасти Тогда
			Возврат;
		КонецЕсли;
		РегламентированнаяОтчетность.ДополнитьСтруктуруПараметровПрочиеОтчеты(мДанныеОтчета, ПараметрыВыгрузки, Узел);
	КонецЕсли;
	КоличествоСтрок = Узел.Строки.Количество();
	Для Инд = 1 По КоличествоСтрок Цикл
		ТекСтр = Узел.Строки.Получить(КоличествоСтрок - Инд);
		Если НЕ ПустаяСтрока(ТекСтр.Условие) Тогда
			Если НЕ РегламентированнаяОтчетность.УсловиеВыполнено(ЭтаФорма, ПараметрыВыгрузки, ТекСтр.Условие) Тогда
				Узел.Строки.Удалить(ТекСтр);
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		ОбработатьУсловныеЭлементы(ПараметрыВыгрузки, ТекСтр);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОтобразитьНомерКорректировки(Форма)
	
	НомерКорр = Форма.СтруктураРеквизитовФормы.ВидДокумента * Форма.НомерКорректировки;
	НомерКорректировкиСтрока = Формат(НомерКорр, "ЧН=0; ЧГ=");
	СтрДлинаНомерКорректировкиСтрока = СтрДлина(НомерКорректировкиСтрока);
	НомерКорректировкиСтрока = РегламентированнаяОтчетностьКлиентСервер.ДополнитьСтроку(НомерКорректировкиСтрока,3,"0",0);	
	Форма.ТабличныйДокумент.Области["НомерКорректировки"].Значение = НомерКорректировкиСтрока;

Конецпроцедуры

&НаСервере
Процедура ОтсечьНезаполненныеНеобязательныеУзлы(Узел)
	
	КоличествоСтрок = Узел.Строки.Количество();
	Для Инд = 1 По КоличествоСтрок Цикл
		Стр = Узел.Строки.Получить(КоличествоСтрок - Инд);
		ОтсечьНезаполненныеНеобязательныеУзлы(Стр);
	КонецЦикла;
	
	Если ТипЗнч(Узел) <> Тип("ДеревоЗначений") Тогда
		Если (СтрНайти(Узел.Обязательность, "Н") <> 0 ИЛИ СтрНайти(Узел.Обязательность, "H") <> 0) И УзелПуст(Узел) Тогда // учтем оба варианта: кириллицу и латиницу
			РегламентированнаяОтчетность.УдалитьУзел(Узел);
		ИначеЕсли (СтрНайти(Узел.Обязательность, "М") <> 0 ИЛИ СтрНайти(Узел.Обязательность, "M") <> 0) // учтем оба варианта: кириллицу и латиницу
		И УзелПуст(Узел)
		И ?(СтрНайти(Узел.Обязательность, "О") <> 0 ИЛИ СтрНайти(Узел.Обязательность, "O") <> 0, РегламентированнаяОтчетность.ИмеютсяАналогичныеСоседниеУзлыКлюч(Узел), Истина) Тогда
			РегламентированнаяОтчетность.УдалитьУзел(Узел);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОчиститьТабличноеПоле(Форма, ВыбТабличноеПолеИмя)
    	
	// Предварительно проверим наличие дополнительных строк,
	// в заданном поле табличного документа.
	// При наличии таких строк удаляем их.
	ВыбТабличноеПоле = Форма["ТабличныйДокумент"];
    	
	// Непосредственно очищаем ячейки табличного документа.
	Для Инд = 0 По ВыбТабличноеПоле.Области.Количество() - 1 Цикл
		ТекущаяОбласть = ВыбТабличноеПоле.Области[Инд];

		Если НЕ Тип(ТекущаяОбласть) = Тип("РисунокТабличногоДокумента") И Не ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			Продолжить;
		КонецЕсли;

		Если ТекущаяОбласть.СодержитЗначение <> Истина Тогда
			Продолжить;
		КонецЕсли;

		Если (ВыбТабличноеПолеИмя <> "ФизЛица") Тогда
			Если ТекущаяОбласть.Защита Тогда
				Продолжить;
			КонецЕсли;
		Иначе
			Если (СтрНайти(ТекущаяОбласть.Имя, "ИНН1_") > 0 ) Или (СтрНайти(ТекущаяОбласть.Имя, "КПП1_") > 0 ) Тогда
				Если ТекущаяОбласть.Защита Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;

		Если Тип(ТекущаяОбласть) = Тип("РисунокТабличногоДокумента") Тогда
			ТекущаяОбласть.Значение = "";
		Иначе
			ТекущаяОбласть.Очистить();
		КонецЕсли;
		
	КонецЦикла;

	ИмяСтраницыПанели = ВыбТабличноеПолеИмя;
		
	Расчет(Форма, ИмяСтраницыПанели);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	РегламентированнаяОтчетностьКлиент.ПередЗакрытиемРегламентированногоОтчета(ЭтаФорма, Отказ, СтандартнаяОбработка, ЗавершениеРаботы, ТекстПредупреждения);
	
КонецПроцедуры

&НаСервере
Процедура ДатаПодписиПриИзмененииНаСервере()
	
	// Проставим Новые ИНН и ФИО на титульный лист
	ЗаполнитьСведенияОбОрганизации(Истина);

	// Переменная изменяется, для простановки дат на всех листах многостраничных разделов
	СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация = Истина;

	// Заполним дату на листах
	ЗаполнитьДатуВЯчейкахНаСервере();

	// Переменна изменяется, для простановки дат на всех листах многостраничных разделов
	СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация = Ложь;
		
КонецПроцедуры

&НаКлиенте
Процедура РазделыОтчетаПриАктивизацииСтроки(Элемент)
	
	Если Элемент.ТекущиеДанные = Неопределено
	 ИЛИ Элемент.ТекущаяСтрока = СтруктураРеквизитовФормы.ТекущаяСтрокаРазделовОтчета Тогда
		Возврат;
	КонецЕсли;
	
	КМенюТД = Элементы.ТабличныйДокументКонтекстноеМеню;
	КМенюТД.Видимость = Ложь;
	КМенюТД.ПодчиненныеЭлементы.ТабличныйДокументКонтекстноеМенюГруппаСтроки.Видимость = Ложь;
	
	СтруктураРеквизитовФормы.ТекущаяСтрокаРазделовОтчета = Элемент.ТекущаяСтрока;
	
	Элементы.ОчиститьТекущуюСтраницу.Доступность = Истина;
	
	Если СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере Тогда
		
		ВывестиМакетСтраницыВТабличныйДокументНаСервере(Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим,
														Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета);
		
	Иначе
		
		СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Истина;
		
	КонецЕсли;
	
	Если Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Раздел3" Тогда
		
		КМенюТД.Видимость = Истина;
		КМенюТД.ПодчиненныеЭлементы.ТабличныйДокументКонтекстноеМенюГруппаСтроки.Видимость = Истина;
		
	КонецЕсли;
	
	Если Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Титульный" Тогда
		
		ТабличныйДокумент.Области.НомерПачки.Значение = НомерПачки;
		
		Элементы.Обновить.Доступность = Истина;
		
	Иначе
		
		Элементы.Обновить.Доступность = Ложь;
		
	КонецЕсли;
	
	Элементы.ТабличныйДокумент.ТекущаяОбласть = ТабличныйДокумент.Область(1, 1);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьПодчиненныйЭлемент(Узел, КодЭлемента)
	
	Для Каждого Стр Из Узел.Строки Цикл
		Если Стр.Код = КодЭлемента Тогда
			Возврат Стр;
		КонецЕсли;
	КонецЦикла;
	
КонецФункции

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ЗавершениеРаботы Тогда
				
		Возврат;
		
	КонецЕсли;
	
	ПриЗакрытииНаСервере();
		
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если СтрНайти(Заголовок, СтруктураРеквизитовФормы.СтрПериодОтчета) = 0 Тогда
		Заголовок = Заголовок + " за " + СтруктураРеквизитовФормы.СтрПериодОтчета;
	КонецЕсли;

	ОргСтр = " (" + СтруктураРеквизитовФормы.НаимОрганизации + ")";
	Если СтрНайти(Заголовок, ОргСтр) = 0 Тогда
		Заголовок = Заголовок + ОргСтр;
	КонецЕсли;
	
	Заголовок = Заголовок + ?(СтрНайти(ИмяФормы, "Внешний") > 0, " - внешний отчет", "");
	
	Заголовок = Заголовок + ?(СтрНайти(ЭтаФорма.ИмяФормы, "Внешний") > 0, " - внешний отчет", "");
	
	ПодключитьОбработчикОжидания("ВыполнитьПроверкуПередОткрытием", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПроверкуПередОткрытием()
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПриОткрытииЗавершение", ЭтотОбъект);
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередОткрытиемФормыРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытииЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Модифицированность = Ложь;
		Закрыть();
		Возврат;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ПроверитьПоказатели() Экспорт
	
	СформироватьСтруктуруПоказателей();
	ПараметрыВыгрузки = СформироватьСтруктуруПараметров();
	ДеревоВыгрузки = ИзвлечьСтруктуруXML();
	Если НЕ ПроверитьВозможностьВыгрузки(ПараметрыВыгрузки, ДеревоВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	ЗаполнитьДанными(ДеревоВыгрузки, ПараметрыВыгрузки);
	Если НЕ РегламентированнаяОтчетность.ПроверитьДанные(ЭтаФорма, ДеревоВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция СкопироватьУзел(Родитель, Узел, Знач МаксИндекс = Неопределено)
	
	// Нахождение узла с максимальным индексом и с тем же кодом,
	// что и у копируемого, и добавление нового сразу после найденного.
	Если МаксИндекс = Неопределено Тогда
		СтрокиСТемЖеКодом = Родитель.Строки.НайтиСтроки(Новый Структура("Код", Узел.Код), Ложь);
		МаксИндекс = - 1;
		КолСтрокСТемЖеКодом = СтрокиСТемЖеКодом.Количество();
		Если КолСтрокСТемЖеКодом > 0 Тогда
			МаксИндекс = Родитель.Строки.Индекс(СтрокиСТемЖеКодом[КолСтрокСТемЖеКодом - 1]);
		КонецЕсли;
	КонецЕсли;
	
	ИндексСоздаваемогоУзла = МаксИндекс + 1;
	Если ИндексСоздаваемогоУзла >= Родитель.Строки.Количество() ИЛИ ИндексСоздаваемогоУзла = 0 Тогда
		// Аналогичный узел не найден или найденный узел - последний.
		НовыйУзел = Родитель.Строки.Добавить();
	Иначе
		НовыйУзел = Родитель.Строки.Вставить(ИндексСоздаваемогоУзла);
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(НовыйУзел, Узел, , "Родитель, Строки");
	
	Для Каждого Стр из Узел.Строки Цикл
		СкопироватьУзел(НовыйУзел, Стр, Узел.Строки.Количество() - 1);
	КонецЦикла;
	
	Возврат НовыйУзел;
	
КонецФункции

&НаСервере
Функция СобратьДанныеТекущегоТаблПоляНаСервере(ИмяТабличногоПоля) Экспорт
	
	Возврат СобратьДанныеТекущегоТаблПоля(ЭтаФорма, ИмяТабличногоПоля);

КонецФункции

&НаКлиенте
Функция СобратьДанныеТекущегоТаблПоляНаКлиенте(ИмяТабличногоПоля) Экспорт
	
	Возврат СобратьДанныеТекущегоТаблПоля(ЭтаФорма, ИмяТабличногоПоля);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СобратьДанныеТекущегоТаблПоля(Форма, ТабличноеПоле) Экспорт

	СтруктураДанныхПоля = Новый Структура;
	
	Для Инд = 0 По Форма[ТабличноеПоле].Области.Количество() - 1 Цикл
		ТекущаяОбласть = Форма[ТабличноеПоле].Области[Инд];

		Если Не ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			Продолжить;
		КонецЕсли;

		Если ТекущаяОбласть.СодержитЗначение <> Истина Тогда
			Продолжить;
		КонецЕсли;

		ИмяПоказателя      = ТекущаяОбласть.Имя;
		ЗначениеПоказателя = ТекущаяОбласть.Значение;
		СтруктураДанныхПоля.Вставить(ИмяПоказателя, ЗначениеПоказателя);

	КонецЦикла;

	Возврат СтруктураДанныхПоля;
	
КонецФункции

&НаСервере
Функция СформироватьСтруктуруПоказателей()
	
	мДанныеОтчета = Новый Структура;
	
	СохрСтруктура = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить();
	ПоказателиОтчета = СохрСтруктура.ПоказателиОтчета;
	Для Каждого Раздел Из ПоказателиОтчета Цикл
		мДанныеОтчета.Вставить(Раздел.Ключ, РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(Раздел.Значение));
	КонецЦикла;
	СохрСтруктура.Свойство("ДокументУпПред", мСтруктураДокУпПред);
	
КонецФункции

&НаСервере
Функция УзелПуст(Узел)
		
	Для Каждого Стр из Узел.Строки Цикл
		Если НЕ УзелПуст(Стр) Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Если Узел.Формат = "С" Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат ?(Узел.Формат = "N", СокрЛП(Узел.Значение) = "" ИЛИ Число(Узел.Значение) = 0 ИЛИ (НЕ ЗначениеЗаполнено(Узел.Значение)), НЕ ЗначениеЗаполнено(Узел.Значение));
	
КонецФункции

&НаСервере
Процедура ВывестиМакетСтраницыВТабличныйДокументНаСервере(ИмяТекРаздела, НомерСтраницыРазделаОтчета)
		
	СохранитьДанныеРаздела(СтруктураРеквизитовФормы.НаимТекущегоРаздела, Истина);
			
	ВывестиМакетВТаблДокНаСервере(ИмяТекРаздела, НомерСтраницыРазделаОтчета);
	
	СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяТекРаздела;
						
КонецПроцедуры

&НаСервере
Процедура ВывестиМакетВТаблДокНаСервере(ИмяТекРаздела, НомерСтраницыРазделаОтчета)
	
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + ИмяТекРаздела));
	
	// Многострочные разделы.
	Если ИмяТекРаздела = "Раздел3" Тогда
		
		Для Каждого ЭлСтруктуры Из ЭтаФорма["СтруктураДанных" + ИмяТекРаздела] Цикл
			Попытка
				ТабличныйДокумент.Области[ЭлСтруктуры.Ключ].Значение = ЭлСтруктуры.Значение;
			Исключение
			КонецПопытки;
		КонецЦикла;
		
		ИмяГруппы = ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ИмяТекРаздела);
		
		СтруктураГруппы = Неопределено;
		
		мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);
		
		СтруктураГруппы = ЭтаФорма[СтруктураГруппы];
		
		ВывестиРазделВТабличныйДокумент(ЭтаФорма, ИмяГруппы, СтруктураГруппы);
		
		ЕстьДопСтроки = Ложь;
		
		Для Каждого ОбластьТД Из ТабличныйДокумент.Области Цикл
			Если СтрЧислоВхождений(ОбластьТД.Имя, "_2") > 0 Тогда
				ЕстьДопСтроки = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если ЕстьДопСтроки Тогда
			Для Каждого ОбластьТД Из ТабличныйДокумент.Области Цикл
				Если СтрЧислоВхождений(ОбластьТД.Имя, "УдалитьСтроку") > 0 Тогда
					ОбластьТД.Гиперссылка = Истина;
					ОбластьТД.Текст = "х";
				КонецЕсли;
			КонецЦикла;
		Иначе
			Для Каждого ОбластьТД Из ТабличныйДокумент.Области Цикл
				Если СтрЧислоВхождений(ОбластьТД.Имя, "УдалитьСтроку") > 0 Тогда
					ОбластьТД.Гиперссылка = Ложь;
					ОбластьТД.Текст = "";
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	// Обычные разделы.
	Иначе
		Для Каждого ЭлСтруктуры Из ЭтаФорма["СтруктураДанных" + ИмяТекРаздела] Цикл
			Попытка
				ТабличныйДокумент.Области[ЭлСтруктуры.Ключ].Значение = ЭлСтруктуры.Значение;
			Исключение
			КонецПопытки;
		КонецЦикла;
	КонецЕсли;
	
	Если ИмяТекРаздела <> "Титульный" Тогда
		
		УстановитьФорматВыводаВПоляхВводаНаСервере(ИмяТекРаздела);
		УстановитьЦветФонаЯчейкиНаСервере(,, ИмяТекРаздела);
		
	Иначе
		
		ПроверкаЗакраскиТитульного();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СохранитьДанныеРаздела(НаимРаздела, ОчищатьРазделЕслиЕстьМногострочность)
	
	// Многострочные разделы.
	Если НаимРаздела = "Раздел3" Тогда
		
		ЭтаФорма["СтруктураДанных" + НаимРаздела] = СобратьДанныеТекущегоТаблПоля(ЭтаФорма, "ТабличныйДокумент");
		ИмяГруппы = ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(НаимРаздела);
		ОбновитьСтруктуруМногострочногоРаздела(ЭтаФорма, ИмяГруппы);
		
	// Обычные разделы.
	Иначе
		
		ЭтаФорма["СтруктураДанных" + НаимРаздела] = СобратьДанныеТекущегоТаблПоля(ЭтаФорма, "ТабличныйДокумент");
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьДеревоРазделовОтчетаНаСервере() Экспорт
	
	СформироватьДеревоРазделовОтчета(ЭтаФорма);
			
КонецПроцедуры

&НаКлиенте
Процедура СформироватьДеревоРазделовОтчетаНаКлиенте() Экспорт
	
	СформироватьДеревоРазделовОтчета(ЭтаФорма);
			
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СформироватьДеревоРазделовОтчета(Форма)
	
	Форма["РазделыОтчета"].ПолучитьЭлементы().Очистить();
	
	Для Каждого ЭлементДереваСтраницОтчета Из Форма["мДеревоСтраницОтчета"].ПолучитьЭлементы() Цикл
		
		Если ЭлементДереваСтраницОтчета.ПоказатьСтраницу = 1 Тогда
			
			ЭлементРазделовОтчета = Форма["РазделыОтчета"].ПолучитьЭлементы().Добавить();
			ЭлементРазделовОтчета.КолонкаРазделыОтчета         = ЭлементДереваСтраницОтчета.Представление;
			ЭлементРазделовОтчета.КолонкаРазделыОтчетаСокрНаим = ЭлементДереваСтраницОтчета.ИмяСтраницы;
			ЭлементРазделовОтчета.ИндексКартинки               = 1;
			ЭлементРазделовОтчета.РазделМногостраничный        = Ложь;
			ЭлементРазделовОтчета.РазделМногострочный          = РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(Форма, "мТаблицаМногострочныхРазделов");
													
		КонецЕсли;
				
	КонецЦикла;
			
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПустыеСтруктурыДанных()
	
	СохрТабличныйДокумент = Новый ТабличныйДокумент;
	
	СохрТабличныйДокумент.Вывести(ТабличныйДокумент);
	
	Для Каждого Раздел Из мСвойстваРазделовДекларации.ПолучитьЭлементы() Цикл
		
		Если НЕ Раздел.МногостраничностьВРазделе
		  И (ЭтаФорма["СтруктураДанных" + Раздел.ИмяСтраницы].Количество() = 0) Тогда
		  
			ТабличныйДокумент.Очистить();
			ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + Раздел.ИмяСтраницы));
			
			СохранитьДанныеРаздела(Раздел.ИмяСтраницы, Ложь);
			
		КонецЕсли;
	
	КонецЦикла;
	
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(СохрТабличныйДокумент);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьОбщиеРеквизитыСТитульногоЛиста()
	
	МассивНомРег      = Новый Массив(14);
	МассивДатаПодписи = Новый Массив(8);
			
	ИсходныйМакет = ТабличныйДокумент;
		
	Область = ИсходныйМакет.Области.Найти("НомРег");
	
	Если НЕ Область = Неопределено Тогда
		
		СтрНомРег = Область.Значение;
				
		Для Ном = 1 По СтрДлина(СтрНомРег) Цикл
			
			МассивНомРег[Ном - 1] = Сред(СтрНомРег, Ном, 1);
			
		КонецЦикла;
		
	КонецЕсли;
					
	Область = ИсходныйМакет.Области.Найти("ДатаПодписи");
	
	Если НЕ Область = Неопределено Тогда
		
		СтрДатаПодписи = Лев(СтрЗаменить(Область.Значение, ".", ""), 8);
		
		Для Ном = 1 По СтрДлина(СтрДатаПодписи) Цикл
				
			Если ЗначениеЗаполнено(ИсходныйМакет.Области.ДатаПодписи.Значение) Тогда
				МассивДатаПодписи[Ном - 1] = Сред(СтрДатаПодписи, Ном, 1);
			КонецЕсли;	
			
		КонецЦикла;
		
	КонецЕсли;
	
	ОбщиеРеквизитыРазделов = Новый Структура;
		
	ОбщиеРеквизитыРазделов.Вставить("НомРег", МассивНомРег);
	ОбщиеРеквизитыРазделов.Вставить("ДатаПодписи", МассивДатаПодписи);
	                	
	Возврат ОбщиеРеквизитыРазделов;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьПечатнуюФорму(ПараметрыПечати, МакетПечатнойФормы, ОбщиеРеквизитыРазделов)
	
	ИсходныйМакет = ТабличныйДокумент;
	
	Для Каждого Область Из ИсходныйМакет.Области Цикл
		Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник И Область.СодержитЗначение Тогда
			
			Если ПараметрыПечати.ИмяСтраницы = "Титульный" Тогда
				
				Если СтрЧислоВхождений(Область.Имя, "НомРег") > 0
					ИЛИ СтрЧислоВхождений(Область.Имя, "ДатаПодписи") > 0 Тогда
					
					Продолжить;
					
				ИначеЕсли СтрЧислоВхождений(Область.Имя, "ИНН") > 0
					ИЛИ СтрЧислоВхождений(Область.Имя, "КПП") > 0
					ИЛИ СтрЧислоВхождений(Область.Имя, "ОКВЭД") > 0
					ИЛИ СтрЧислоВхождений(Область.Имя, "Тариф") > 0
					ИЛИ СтрЧислоВхождений(Область.Имя, "ТелОрганизации") > 0
					ИЛИ СтрЧислоВхождений(Область.Имя, "ОтчетГод") > 0
					ИЛИ СтрЧислоВхождений(Область.Имя, "НомерКорректировки") > 0
					ИЛИ СтрЧислоВхождений(Область.Имя, "Прил") > 0
					ИЛИ СтрЧислоВхождений(Область.Имя, "СоставленаНа") > 0 Тогда
					
					Если Область.Имя = "Прил" ИЛИ Область.Имя = "НомерКорректировки" ИЛИ Область.Имя = "СоставленаНа" Тогда
						
						СтрПрил = СокрЛП(Область.Значение);
						Если СтрДлина(СтрПрил) = 1 Тогда
							СтрПрил = "00" + СтрПрил;
						ИначеЕсли СтрДлина(СтрПрил) = 2 Тогда
							СтрПрил = "0" + СтрПрил;
						ИначеЕсли СтрДлина(СтрПрил) = 0 Тогда
							СтрПрил = "000"
						КонецЕсли;
						
						Для Ном = 1 По 3 Цикл
							МакетПечатнойФормы.Области[Область.Имя + Ном].Значение = Сред(СтрПрил, Ном, 1);
						КонецЦикла;
						
					Иначе
						
						Для Ном = 1 По СтрДлина(Область.Значение) Цикл
							МакетПечатнойФормы.Области[Область.Имя + Ном].Значение = Сред(Область.Значение, Ном, 1);
						КонецЦикла;
						
					КонецЕсли;
					
					Продолжить;
					
				КонецЕсли;
			КонецЕсли;
			
			Если НЕ Область.Имя = "НомерПачки" Тогда
				МакетПечатнойФормы.Области[Область.Имя].Значение = Область.Значение;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ИсходныйМакет.Области.Найти("ОКВЭД") <> Неопределено Тогда
		Обл = МакетПечатнойФормы.Области["ОКВЭД3"];
		Если Обл <> Неопределено Тогда
			Обл.Значение = ".";
		КонецЕсли;
		Обл = МакетПечатнойФормы.Области["ОКВЭД6"];
		Если Обл <> Неопределено Тогда
			Обл.Значение = ".";
		КонецЕсли;
	КонецЕсли;
	
	Для Каждого Реквизит Из ОбщиеРеквизитыРазделов Цикл
		
		Индекс = 1;
		НаименованиеОбласти = Реквизит.Ключ + Индекс;
		
		Пока НЕ МакетПечатнойФормы.Области.Найти(НаименованиеОбласти) = Неопределено Цикл
			МакетПечатнойФормы.Области[НаименованиеОбласти].Значение = Реквизит.Значение[Индекс - 1];
			Индекс = Индекс + 1;
			
			НаименованиеОбласти = Реквизит.Ключ + Индекс;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Если НЕ ПараметрыПечати.ИмяСтраницы = "Титульный" Тогда
		
		МакетПечатнойФормы.Области["ДатаПодписиПолная"].Значение = Формат(ДатаПодписи, "ДФ = ""дд.ММ.гггг 'г.'""");
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоказателиОтчетаНаСервере(ПоказателиОтчета)
	
	Префикс = "ПолеТабличногоДокумента";
	
	Для Каждого Раздел Из мСвойстваРазделовДекларации.ПолучитьЭлементы() Цикл
			
		Если НЕ Раздел.МногостраничностьВРазделе Тогда
			ПоказателиОтчета.Вставить(Префикс + Раздел.ИмяСтраницы, ЭтаФорма["СтруктураДанных" + Раздел.ИмяСтраницы]);
		КонецЕсли;
	
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СохранитьДеревоСтраницОтчета(Знач мСохраненныйДок)
	
	Если мСохраненныйДок <> Неопределено Тогда
				
		Если ТипЗнч(мСохраненныйДок) = Тип("ДокументСсылка.РегламентированныйОтчет") Тогда
			мСохраненныйДок = мСохраненныйДок.ПолучитьОбъект();
		КонецЕсли;
		
		Если Не мСохраненныйДок.ЭтоНовый() Тогда
			// Сохраняем выбранные листы для печати в хранилище
			ХранилищеДанных = Новый ХранилищеЗначения(РеквизитФормыВЗначение("мДеревоСтраницОтчета"));
			мСохраненныйДок.ДеревоНастройкиСтраниц = ХранилищеДанных;
			Попытка
				мСохраненныйДок.Записать();
			Исключение
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция УниверсальнаяВыгрузкаНаСервере(ТекстВыгрузки, ПараметрыВыгрузки, ВыгружатьСОшибками = Ложь)
	
	СформироватьСтруктуруПоказателей();
	ПараметрыВыгрузки = СформироватьСтруктуруПараметров();
	ДеревоВыгрузки = ИзвлечьСтруктуруXML();
	
	ВыгрузкаВозможна = ПроверитьВозможностьВыгрузки(ПараметрыВыгрузки, ДеревоВыгрузки);
	
	Если НЕ ВыгружатьСОшибками И НЕ ВыгрузкаВозможна Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ЗаполнитьДанными(ДеревоВыгрузки, ПараметрыВыгрузки);
	
	ВыгрузкаВозможна = РегламентированнаяОтчетность.ПроверитьДанные(ЭтаФорма, ДеревоВыгрузки);
	
	Если НЕ ВыгружатьСОшибками И НЕ ВыгрузкаВозможна Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ТекстВыгрузки = Новый Массив;
	
	ТекстВыгрузкиРВ3 = ВыгрузитьДеревоВXML(ДеревоВыгрузки, ПараметрыВыгрузки);
	ТекстВыгрузки.Добавить(ВыгрузкаРВ3(ТекстВыгрузкиРВ3, ПараметрыВыгрузки));
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция ВыгрузкаРВ3(ТекстВыгрузки, ПараметрыВыгрузки)
	
	КодировкаФайлаВыгрузки = "utf-8";
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("xml");
	ЗаписьТекста = Новый ЗаписьТекста(ИмяВременногоФайла, КодировкаФайлаВыгрузки);
	ЗаписьТекста.Записать(ТекстВыгрузки);
	ЗаписьТекста.Закрыть();
	ЗаписьТекста = Неопределено;
	
	ФайлВыгрузки = Новый ДвоичныеДанные(ИмяВременногоФайла);
	
	РегламентированнаяОтчетность.УдалитьСигнатуруBOM(ФайлВыгрузки);
	
	АдресВоВремХранилище = ПоместитьВоВременноеХранилище(ФайлВыгрузки, Новый УникальныйИдентификатор);
	
	УдалитьФайлы(ИмяВременногоФайла);
	
	РезультатВыгрузки = Новый Структура;
	РезультатВыгрузки.Вставить("ИмяФайлаВыгрузки", ПараметрыВыгрузки.ИмяФайла);
	РезультатВыгрузки.Вставить("АдресФайлаВыгрузки", АдресВоВремХранилище);
	РезультатВыгрузки.Вставить("ТипФайлаВыгрузки", "РВ-3");
	РезультатВыгрузки.Вставить("КодировкаФайлаВыгрузки", КодировкаФайлаВыгрузки);
	
	Возврат РезультатВыгрузки;
	
КонецФункции

&НаСервере
Процедура ИзменитьТаблицуВариантовЗаполненияНаСервере()
	
	РегламентированнаяОтчетностьКлиентСервер.ИзменитьТаблицуВариантовЗаполнения(ЭтаФорма, НЕ СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);
	
	РегламентированнаяОтчетность.ПолучитьСведенияОПоказателяхОтчета(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ПриЗакрытииНаСервере()
			
	РегламентированнаяОтчетность.ПриЗакрытииРегламентированногоОтчета(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ОчисткаРегламентированногоОтчетаНаСервере(ИмяСтраницы, ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста, РежимОчистки, Многостраничность, КолВоСтраницВРазделе) Экспорт
	
	УдалятьсяВсеДопЭкземпляры = Ложь;
	
	Если СтрНайти(РежимОчистки, "ОчиститьТекущийРаздел") > 0 Тогда
		
		Если (Многостраничность) И (КолВоСтраницВРазделе > 1) Тогда
			
			ОчиститьПоказателиОтчетаЗаполняемыеИзИБНаСервере(ИмяСтраницы);
			
			РегламентированнаяОтчетность.ПолучитьСведенияОПоказателяхОтчета(ЭтаФорма);
			
			УдалятьсяВсеДопЭкземпляры = Истина;
			
		Иначе
			
			ОчиститьТабличноеПолеНаСервере(ИмяСтраницы);
			
		КонецЕсли;
		
		СформироватьДеревоРазделовОтчетаНаСервере();
		
		СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
		
	ИначеЕсли СтрНайти(РежимОчистки, "ОчиститьТекущийЭкземплярМногостраничногоРаздела") > 0 Тогда
		
		ОчиститьТабличноеПолеНаСервере(ИмяСтраницы);
		
	КонецЕсли;
	
	Если ИмяСтраницы = "Титульный" Тогда
		Если Элементы.Найти("ДатаПодписи") = Неопределено Тогда
			Область = ТабличныйДокумент.Области.Найти("ДатаПодписи");
			Если НЕ Область = Неопределено Тогда
				Если ТипЗнч(Область.Значение) = Тип("Строка") Тогда
					ДатаПодписи = Лев(СтрЗаменить(Область.Значение, ".", ""), 8);
				ИначеЕсли ТипЗнч(Область.Значение) = Тип("Дата") Тогда
					Если ЗначениеЗаполнено(Область.Значение) Тогда
						ДатаПодписи = Лев(СтрЗаменить(Формат(Область.Значение, "ДФ = ""дд.ММ.гггг 'г.'"""), ".", ""), 8);
					Иначе
						ДатаПодписи = "        ";
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ИмяСтраницы = "Раздел3" Тогда
		
		П0003000001.Очистить();
		П0003000001.Добавить();
		ВывестиМакетСтраницыВТабличныйДокументНаСервере(ИмяСтраницы, 1);
		
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиентСервер.ПослеОчисткиРегламентированногоОтчета(ЭтаФорма, ИмяСтраницы, ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста);
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьПоказателиОтчетаЗаполняемыеИзИБНаСервере(ИмяСтраницы)
	
	РегламентированнаяОтчетностьКлиентСервер.ОчиститьПоказателиОтчетаЗаполняемыеИзИБ(ЭтаФорма, ИмяСтраницы);
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьСведенияОбОрганизацииИзТитульногоЛистаСтарогоОбразца(ПоказателиОтчета)
	
	ПоказателиТаблПоле = ПоказателиОтчета["ПолеТабличногоДокументаТитульный"];
	
	Для Каждого Показатель Из ПоказателиТаблПоле Цикл
		
		ИмяПоказателя = Показатель.Ключ;
		
		Если ИмяПоказателя = "НомРег1" Тогда
			СтруктураДанныхТитульный.Вставить("НомРег");
			Для Ном = 1 По 14 Цикл
				СтруктураДанныхТитульный.НомРег = СокрЛП(СтруктураДанныхТитульный.НомРег) + ПоказателиТаблПоле["НомРег" + Ном];
				СтруктураДанныхТитульный.Удалить("НомРег" + Ном);
			КонецЦикла;
		ИначеЕсли ИмяПоказателя = "ИНН1" Тогда
			СтруктураДанныхТитульный.Вставить("ИНН");
			Для Ном = 1 По 10 Цикл
				СтруктураДанныхТитульный.ИНН = СокрЛП(СтруктураДанныхТитульный.ИНН) + ПоказателиТаблПоле["ИНН" + Ном];
				СтруктураДанныхТитульный.Удалить("ИНН" + Ном);
			КонецЦикла;
			Если Лев(СтруктураДанныхТитульный.ИНН, 2) = "00" Тогда
				СтруктураДанныхТитульный.ИНН = Сред(СтруктураДанныхТитульный.ИНН, 3);
			КонецЕсли;
		ИначеЕсли ИмяПоказателя = "КПП1" Тогда
			СтруктураДанныхТитульный.Вставить("КПП");
			Для Ном = 1 По 9 Цикл
				СтруктураДанныхТитульный.КПП = СокрЛП(СтруктураДанныхТитульный.КПП) + ПоказателиТаблПоле["КПП" + Ном];
				СтруктураДанныхТитульный.Удалить("КПП" + Ном);
			КонецЦикла;
		ИначеЕсли ИмяПоказателя = "ТелОрганизации1" Тогда
			СтруктураДанныхТитульный.Вставить("ТелОрганизации");
			Для Ном = 1 По 15 Цикл
				СтруктураДанныхТитульный.ТелОрганизации = СокрЛП(СтруктураДанныхТитульный.ТелОрганизации) + ПоказателиТаблПоле["ТелОрганизации" + Ном];
				СтруктураДанныхТитульный.Удалить("ТелОрганизации" + Ном);
			КонецЦикла;
		ИначеЕсли ИмяПоказателя = "ОКВЭД1" Тогда
			СтруктураДанныхТитульный.Вставить("ОКВЭД");
			Для Ном = 1 По 8 Цикл
				СтруктураДанныхТитульный.ОКВЭД = СокрЛП(СтруктураДанныхТитульный.ОКВЭД) + ПоказателиТаблПоле["ОКВЭД" + Ном];
				СтруктураДанныхТитульный.Удалить("ОКВЭД" + Ном);
			КонецЦикла;
		ИначеЕсли ИмяПоказателя = "НомерКорректировки1" Тогда
			СтруктураДанныхТитульный.Вставить("НомерКорректировки");
			Для Ном = 1 По 3 Цикл
				СтруктураДанныхТитульный.НомерКорректировки = СокрЛП(СтруктураДанныхТитульный.НомерКорректировки) + ПоказателиТаблПоле["НомерКорректировки" + Ном];
				СтруктураДанныхТитульный.Удалить("НомерКорректировки" + Ном);
			КонецЦикла;
		ИначеЕсли ИмяПоказателя = "ОтчетГод1" Тогда
			СтруктураДанныхТитульный.Вставить("ОтчетГод");
			Для Ном = 1 По 4 Цикл
				СтруктураДанныхТитульный.ОтчетГод = СокрЛП(СтруктураДанныхТитульный.ОтчетГод) + ПоказателиТаблПоле["ОтчетГод" + Ном];
				СтруктураДанныхТитульный.Удалить("ОтчетГод" + Ном);
			КонецЦикла;
		ИначеЕсли ИмяПоказателя = "Тариф1" Тогда
			СтруктураДанныхТитульный.Вставить("Тариф");
			Для Ном = 1 По 2 Цикл
				СтруктураДанныхТитульный.Тариф = СокрЛП(СтруктураДанныхТитульный.Тариф) + ПоказателиТаблПоле["Тариф" + Ном];
				СтруктураДанныхТитульный.Удалить("Тариф" + Ном);
			КонецЦикла;
		ИначеЕсли ИмяПоказателя = "Прил1" Тогда
			СтруктураДанныхТитульный.Вставить("Прил");
			Для Ном = 1 По 3 Цикл
				СтруктураДанныхТитульный.Прил = СокрЛП(СтруктураДанныхТитульный.Прил) + ПоказателиТаблПоле["Прил" + Ном];
				СтруктураДанныхТитульный.Удалить("Прил" + Ном);
			КонецЦикла;
		ИначеЕсли ИмяПоказателя = "СоставленаНа1" Тогда
			СтруктураДанныхТитульный.Вставить("СоставленаНа");
			Для Ном = 1 По 3 Цикл
				СтруктураДанныхТитульный.СоставленаНа = СокрЛП(СтруктураДанныхТитульный.СоставленаНа) + ПоказателиТаблПоле["СоставленаНа" + Ном];
				СтруктураДанныхТитульный.Удалить("СоставленаНа" + Ном);
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
	
	ЗаполнитьДатуВЯчейкахНаСервере();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ СТЫКОВКИ С СЕРВИСОМ СДАЧИ ОТЧЕТНОСТИ ЧЕРЕЗ ПРЕДСТАВИТЕЛЯ

&НаКлиенте
Процедура ОтправитьЧерезПредставителя(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОтправитьЧерезПредставителяЗавершение", ЭтотОбъект);

	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьЧерезПредставителяЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ПриНажатииНаКнопкуОтправкиЧерезПредставителяВРегламентированномОтчете(ЭтаФорма, "ПФР");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьАвто(Команда)
	
	Отказ = Ложь;
	
	РегламентированнаяОтчетностьКлиентПереопределяемый.ПроверитьВозможностьАвтоЗаполненияРеглОтчета(ИмяФормы, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("Команда", Команда);
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьАвтоЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередЗаполнениемРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьАвтоЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Команда = ДополнительныеПараметры.Команда;
	
	ЗаполнитьАвтоНаСервере();
	
	РегламентированнаяОтчетностьКлиент.ОбновитьДеревоРазделовВФормеОтчета(ЭтаФорма);
	
	Если НЕ Элементы.РазделыОтчета.ТекущиеДанные.ПолучитьРодителя() = Неопределено Тогда
		Элементы.РазделыОтчета.ТекущаяСтрока = Элементы.РазделыОтчета.ТекущиеДанные.ПолучитьРодителя().ПолучитьЭлементы()[0].ПолучитьИдентификатор();
	КонецЕсли;
	
	Если Элементы.Расшифровать.Видимость Тогда
		Элементы.Расшифровать.Доступность = Истина;
		Элементы.ТабличныйДокументКонтекстноеМенюРасшифровать.Доступность = Истина;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьАвтоНаСервере()
	
	СохранитьДанныеРаздела(СтруктураРеквизитовФормы.НаимТекущегоРаздела, Ложь);
	
	ЗаполнитьПустыеСтруктурыДанных();
	
	ПараметрыОтчета = Новый Структура();
	ПараметрыОтчета.Вставить("Организация",             СтруктураРеквизитовФормы.Организация);
	ПараметрыОтчета.Вставить("ДатаНачалаПериодаОтчета", СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
	ПараметрыОтчета.Вставить("ДатаКонцаПериодаОтчета",  СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	
	Контейнер = Новый Структура();
	Контейнер.Вставить("Титульный", СтруктураДанныхТитульный);
	Контейнер.Вставить("Раздел12",  СтруктураДанныхРаздел12);
	Контейнер.Вставить("Раздел3",   СтруктураДанныхРаздел3);
	Контейнер.Вставить("Раздел3_ДанныеДопСтрок",  ДанныеФормыВЗначение(П0003000001, Тип("ТаблицаЗначений")));
	
	РегламентированнаяОтчетностьПереопределяемый.ЗаполнитьОтчет(
		Сред(Лев(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, ".Форма.") - 1), 7),
		Сред(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, ".Форма.") + 7), ПараметрыОтчета, Контейнер);
	
	ЗначениеВДанныеФормы(Контейнер.Раздел3_ДанныеДопСтрок, ЭтаФорма.П0003000001);
	
	ЗаполнитьПустыеСтруктурыДанных();
	
	Если П0003000001.Количество() = 0 Тогда
		П0003000001.Добавить();
	КонецЕсли;
	
	ОбновитьСтруктуруДанныхМногострочныхРазделов();
	
	ВывестиМакетВТаблДокНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела, 1);
	
	РасчетНаСервере();
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура Расшифровать(Команда)
	
	ПараметрыОтчета = Новый Структура();
	ПараметрыОтчета.Вставить("Организация",             СтруктураРеквизитовФормы.Организация);
	ПараметрыОтчета.Вставить("ДатаНачалаПериодаОтчета", СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
	ПараметрыОтчета.Вставить("ДатаКонцаПериодаОтчета",  СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	
	ИДИменПоказателей = Новый Массив();
	ИДИменПоказателей.Добавить(Элементы.ТабличныйДокумент.ТекущаяОбласть.Имя);
	
	РегламентированнаяОтчетностьКлиент.ОткрытьРасшифровкуОтчета(Сред(Лев(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, ".Форма.") - 1), 7), Сред(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, ".Форма.") + 7), ИДИменПоказателей, ПараметрыОтчета)
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВИнтернете(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьВИнтернетеЗавершение", ЭтотОбъект);
	
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВИнтернетеЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ПроверитьВИнтернете(ЭтаФорма, "ПФР");
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьЦифрыТелефона(СтрокаТелефона)

	Если ТипЗнч(СтрокаТелефона) <> Тип("Строка") Тогда
		Возврат "";
	КонецЕсли;
	
	ЦифрыТелефона = "";
	
	Для ПозицияСимвола = 1 По СтрДлина(СтрокаТелефона) Цикл
		КодСимвола = КодСимвола(Сред(СтрокаТелефона, ПозицияСимвола, 1));
		Если КодСимвола >= 48 И КодСимвола <= 57 Тогда
			ЦифрыТелефона = ЦифрыТелефона + Символ(КодСимвола);
		КонецЕсли; 
	КонецЦикла;

	Возврат ЦифрыТелефона;
	
КонецФункции

#Область МеханизмРаботыСМногострочнойЧастью

&НаКлиенте
Процедура ДобавитьСтроку(Команда)
	
	#Если ВебКлиент Тогда
		
		ДобавитьСтрокуНаСервере(Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
		
	#Иначе
		
		ДобавитьСтрокуНаКлиенте(Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
		
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтроку(Команда)
	
	ТекТабличноеПоле = ЭтаФорма["ТабличныйДокумент"];
	
	ТекущаяОбласть = ТекТабличноеПоле.ТекущаяОбласть;
	ИмяГруппы      = РегламентированнаяОтчетностьКлиент.РазделТекущейОбласти(ЭтаФорма, ТекущаяОбласть);
	
	Если ИмяГруппы = Неопределено Тогда
		
		Сообщение = Новый СообщениеПользователю;
		
		Сообщение.Текст = НСтр("ru='Не выбрана удаляемая строка многострочного раздела.'");
	
		Сообщение.Сообщить();
		
		Возврат;
		
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("УдалитьСтрокуЗавершение", ЭтотОбъект);
	ТекстВопроса = НСтр("ru='Удалить выбранную строку?'");
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтрокуЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	#Если ВебКлиент Тогда
		
		УдалитьДополнительнуюСтрокуНаСервере();
		
	#Иначе
		
		УдалитьДополнительнуюСтрокуНаКлиенте();
		
	#КонецЕсли
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСтруктуруМногострочногоРазделаНаСервере(ИмяГруппы) Экспорт
	
	ОбновитьСтруктуруМногострочногоРаздела(ЭтаФорма, ИмяГруппы);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСтруктуруМногострочногоРазделаНаКлиенте(ИмяГруппы) Экспорт
	
	ОбновитьСтруктуруМногострочногоРаздела(ЭтаФорма, ИмяГруппы);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьСтруктуруМногострочногоРаздела(Форма, ИмяГруппы)
	
	Перем СтруктураГруппы;
	
	Форма.мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);
	
	СтруктураГруппы = Форма[СтруктураГруппы];
	
	ТекТабличноеПолеИмя = "ТабличныйДокумент";
	
	ТекТабличноеПоле = Форма[ТекТабличноеПолеИмя];
	
	Для НСтр = 1 По СтруктураГруппы.Количество() Цикл
		
		ТекСтрокаТаблицы = СтруктураГруппы[НСтр - 1];
		
		СписокИменКолонокРаздела = Форма.мСтруктураИменаКолонокРазделов[ИмяГруппы];
		
		Для НомерГрафы = 1 По СписокИменКолонокРаздела.Количество() Цикл
			
			ИмяКолонки = СписокИменКолонокРаздела.Получить(НомерГрафы - 1).Значение;
			
			Если СтруктураГруппы[0].Свойство(ИмяКолонки) Тогда	
				
				ИмяЯчейки     = ИмяКолонки + "_" + НСтр;
				ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяЯчейки];
				
				Если ОбластьЯчейки.СодержитЗначение = Истина Тогда
					ЗначениеЯчейки = ОбластьЯчейки.Значение;
				Иначе
					ЗначениеЯчейки = ОбластьЯчейки.Текст;
				КонецЕсли;
				
				ТекСтрокаТаблицы[ИмяКолонки] = ЗначениеЯчейки;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ВывестиРазделВТабличныйДокументНаКлиенте(ИмяГруппы, СтруктураГруппы) Экспорт
	ВывестиРазделВТабличныйДокумент(ЭтаФорма, ИмяГруппы, СтруктураГруппы);
КонецПроцедуры

&НаСервере
Процедура ВывестиРазделВТабличныйДокументНаСервере(ИмяГруппы, СтруктураГруппы) Экспорт
	ВывестиРазделВТабличныйДокумент(ЭтаФорма, ИмяГруппы, СтруктураГруппы);
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ВывестиРазделВТабличныйДокумент(Форма, ИмяГруппы, СтруктураГруппы)
	
	Перем ИсходноеКоличествоСтрокГруппы;

	Форма.мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);

	ТекущееКоличествоСтрокГруппы = СтруктураГруппы.Количество();

	ТекТабличноеПолеИмя = "ТабличныйДокумент";
	
	ТекТабличноеПоле = Форма[ТекТабличноеПолеИмя];
	
	Если ТекущееКоличествоСтрокГруппы > ИсходноеКоличествоСтрокГруппы Тогда
		
		Форма.ДобавитьНеобходимоеКоличествоДопСтрокНаСервере(ТекТабличноеПоле, ТекТабличноеПолеИмя,
		                                                     ИсходноеКоличествоСтрокГруппы,
															 ТекущееКоличествоСтрокГруппы,
															 ИмяГруппы, СтруктураГруппы);

		Форма[ТекТабличноеПолеИмя] = ТекТабличноеПоле;
		
	КонецЕсли;

	Для Каждого СтрокаТаблицы Из СтруктураГруппы Цикл
		
		НомерСтрокиВТаблице      = СтруктураГруппы.Индекс(СтрокаТаблицы);
		НомерСтрокиВФормеТаблицы = НомерСтрокиВТаблице + 1;
		
		СписокИменКолонокРаздела = Форма.мСтруктураИменаКолонокРазделов[ИмяГруппы];

		Для НомерГрафы = 1 По СписокИменКолонокРаздела.Количество() Цикл
			
			КолонкаТаблицыИмя = СписокИменКолонокРаздела.Получить(НомерГрафы - 1).Значение;
			
			Если СтруктураГруппы[0].Свойство(КолонкаТаблицыИмя) Тогда
				
				ИмяЯчейки                = КолонкаТаблицыИмя + "_" + НомерСтрокиВФормеТаблицы;
				ОбластьЯчейкиТаблицы     = ТекТабличноеПоле.Области.Найти(ИмяЯчейки);
				ЗначениеЯчейки           = СтрокаТаблицы[КолонкаТаблицыИмя];
				
				Если ОбластьЯчейкиТаблицы <> Неопределено Тогда
					
					Если ОбластьЯчейкиТаблицы.СодержитЗначение Тогда
						
						ОбластьЯчейкиТаблицы.Значение = ЗначениеЯчейки;
						
					Иначе
						
						ОбластьЯчейкиТаблицы.Текст = ЗначениеЯчейки;
						
					КонецЕсли;

				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ДобавитьНеобходимоеКоличествоДопСтрокНаСервере(ТекТабличноеПоле, ТекТабличноеПолеИмя,
														 ИсходноеКоличествоСтрокГруппы,
														 ТекущееКоличествоСтрокГруппы,
														 ИмяГруппы, СтруктураГруппы) Экспорт
			
	ОбластьДопСтроки = ТекТабличноеПоле.ПолучитьОбласть("МногострочнаяЧасть");
	
	МногострочнаяЧастьВерх = ТекТабличноеПоле.Области.МногострочнаяЧасть.Верх;
	
	ТекТабличноеПоле.ВставитьОбласть(ОбластьДопСтроки.Область(), ТекТабличноеПоле.Область(МногострочнаяЧастьВерх + 1, ,
	                                 МногострочнаяЧастьВерх + ТекущееКоличествоСтрокГруппы - 1),
									 ТипСмещенияТабличногоДокумента.ПоВертикали);
	
	Для НомНовойСтроки = ИсходноеКоличествоСтрокГруппы По ТекущееКоличествоСтрокГруппы Цикл
		
		Для Каждого Область Из ОбластьДопСтроки.Области Цикл
			
			ОбластьТаблДок = ТекТабличноеПоле.Область(МногострочнаяЧастьВерх + ТекущееКоличествоСтрокГруппы - НомНовойСтроки,
			                                          Область.Лево, МногострочнаяЧастьВерх + ТекущееКоличествоСтрокГруппы
													  - НомНовойСтроки, Область.Право);
			
			Если ОбластьТаблДок.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
				
				Если ОбластьТаблДок.СодержитЗначение Тогда
					ОбластьТаблДок.Очистить();
				КонецЕсли;
				
				ОбластьТаблДок.Имя = Лев(Область.Имя, СтрНайти(Область.Имя, "_")) + Строка(ТекущееКоличествоСтрокГруппы
				                                                                        - НомНовойСтроки + 1);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	ТекТабличноеПоле.Область(ТекТабличноеПоле.Области.МногострочнаяЧасть.Верх, ,
	                         ТекТабличноеПоле.Области.МногострочнаяЧасть.Верх).Имя = "";
	
	ТекТабличноеПоле.Область(МногострочнаяЧастьВерх, , МногострочнаяЧастьВерх).Имя = "МногострочнаяЧасть";
	
КонецПроцедуры

&НаСервере
Функция ОпределитьТабличноеПолеПоИдМногострочногоРазделаНаСервере(ИдГруппы) Экспорт
	
	ИдГрупп = Новый Структура;
	ИдГрупп.Вставить("мИдГруппы3", СтруктураРеквизитовФормы.мИдГруппы3);
	
	Возврат ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИдГруппы, ИдГрупп);
	
КонецФункции

&НаКлиенте
Функция ОпределитьТабличноеПолеПоИдМногострочногоРазделаНаКлиенте(ИдГруппы) Экспорт
	
	ИдГрупп = Новый Структура;
	ИдГрупп.Вставить("мИдГруппы3", СтруктураРеквизитовФормы.мИдГруппы3);
	
	Возврат ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИдГруппы, ИдГрупп);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИдГруппы, ИдГрупп)
	
	Перем ТекТабличноеПоле;
	
	Если ИдГруппы = ИдГрупп.мИдГруппы3 Тогда
		ТекТабличноеПоле = "Раздел3";
	КонецЕсли;
	
	Возврат ТекТабличноеПоле;
	
КонецФункции

&НаСервере
Функция ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ИмяЛиста = Неопределено) Экспорт
	
	ИдГрупп = Новый Структура;
	ИдГрупп.Вставить("мИдГруппы3", СтруктураРеквизитовФормы.мИдГруппы3);
	
	Возврат ОпределитьИдМногострочногоРазделаПоАктивнойСтранице(ИмяЛиста, , ИдГрупп);
	
КонецФункции

&НаКлиенте
Функция ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаКлиенте(ИмяЛиста = Неопределено) Экспорт
	
	ИдГрупп = Новый Структура;
	ИдГрупп.Вставить("мИдГруппы3", СтруктураРеквизитовФормы.мИдГруппы3);
	
	Возврат ОпределитьИдМногострочногоРазделаПоАктивнойСтранице(ИмяЛиста, , ИдГрупп);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ОпределитьИдМногострочногоРазделаПоАктивнойСтранице(ИмяЛиста = Неопределено, ТекущаяСтраница = Неопределено, ИдГрупп)
	Перем ИмяГруппы;
	
	Если ИмяЛиста = Неопределено Тогда
		ИмяТекущейСтраницыПанели = ТекущаяСтраница.Имя;
	Иначе
		ИмяТекущейСтраницыПанели = ИмяЛиста;
	КонецЕсли;
	
	Если ИмяТекущейСтраницыПанели = "Раздел3" Тогда
		ИмяГруппы = ИдГрупп.мИдГруппы3;
	КонецЕсли;
	
	Возврат ИмяГруппы;
	
КонецФункции

&НаСервере
Процедура ДобавитьСтрокуНаСервере(КолонкаРазделыОтчетаСокрНаим)
	
	ВставитьДополнительнуюСтроку(ЭтаФорма, КолонкаРазделыОтчетаСокрНаим);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСтрокуНаКлиенте(КолонкаРазделыОтчетаСокрНаим)
	
	ВставитьДополнительнуюСтроку(ЭтаФорма, КолонкаРазделыОтчетаСокрНаим);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ВставитьДополнительнуюСтроку(Форма, ТекущаяСтраница)
	Перем СтруктураГруппы;
	
	#Если НаКлиенте Тогда
		ИмяГруппы = Форма.ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаКлиенте(ТекущаяСтраница);
	#Иначе
		ИмяГруппы = Форма.ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ТекущаяСтраница);
	#КонецЕсли
		
	Если ИмяГруппы = Неопределено Тогда
		
		Сообщение = Новый СообщениеПользователю;
			
		Сообщение.Текст = НСтр("ru='Не выбран многострочный раздел, в который необходимо добавить строку.'");
			
		Сообщение.Сообщить();
		
		Возврат;
		
	КонецЕсли;
	
	ТекТабличноеПолеИмя = "ТабличныйДокумент";
	
	ТекТабличноеПоле = Форма[ТекТабличноеПолеИмя];
	
	Форма.мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);
	
	СтруктураГруппы = Форма[СтруктураГруппы];
	
	КолСтрок = СтруктураГруппы.Количество();
	КолСтрокСтр = Формат(КолСтрок, "ЧГ=0");
	КолСтрокСтр1 = Формат(КолСтрок + 1, "ЧГ=0");
	
	ИмяПервойЯчейкиПоследнейСтроки = ИмяГруппы + "01_" + КолСтрокСтр;
	
	ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяПервойЯчейкиПоследнейСтроки];
	
	НомерВерхЯчейкиОбласти = ОбластьЯчейки.Верх;
	НомерНижнЯчейкиОбласти = ОбластьЯчейки.Низ;
	
	СдвигСтрок = НомерНижнЯчейкиОбласти - НомерВерхЯчейкиОбласти + 1;
	
	НомерВерхЯчейкиНовойОбласти = НомерВерхЯчейкиОбласти + СдвигСтрок;
	НомерНижнЯчейкиНовойОбласти = НомерНижнЯчейкиОбласти + СдвигСтрок;
	
	РегламентированнаяОтчетностьВызовСервера.СпециальногоДобавленияСтроки(
		ТекТабличноеПоле, ТекТабличноеПолеИмя, ИмяГруппы, НомерВерхЯчейкиОбласти, НомерНижнЯчейкиОбласти);
	
	Форма[ТекТабличноеПолеИмя] = ТекТабличноеПоле;
	
	СписокИменКолонокРаздела = Форма.мСтруктураИменаКолонокРазделов[ИмяГруппы];
	
	Для НомерГрафы = 1 По СписокИменКолонокРаздела.Количество() Цикл
		
		ИмяКолонки = СписокИменКолонокРаздела.Получить(НомерГрафы - 1).Значение;
		
		Если СтруктураГруппы[0].Свойство(ИмяКолонки) Тогда
			
			ИмяОбластиЯчейки    = ИмяКолонки + "_" + КолСтрокСтр;
			ИмяНовОбластиЯчейки = ИмяКолонки + "_" + КолСтрокСтр1;
			
			ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяОбластиЯчейки];
			ОбластьЯчейки.Имя = ИмяНовОбластиЯчейки;
			
			Если Прав(ИмяКолонки, 2) = "01" Тогда
				ТекТабличноеПоле.Области["УдалитьСтроку" + ИмяОбластиЯчейки].Имя = "УдалитьСтроку" + ИмяНовОбластиЯчейки;
			КонецЕсли;
			
			НомерВерхСтрокиЯчейки = ОбластьЯчейки.Верх - СдвигСтрок;
			НомерНижнСтрокиЯчейки = ОбластьЯчейки.Низ  - СдвигСтрок;
			
			НомерЛевоКолонкиЯчейки = ОбластьЯчейки.Лево;
			НомерПравКолонкиЯчейки = ОбластьЯчейки.Право;
			
			ОбластьЯчейкиИсходнойОбласти = ТекТабличноеПоле.Область(
				НомерВерхСтрокиЯчейки, НомерЛевоКолонкиЯчейки, НомерНижнСтрокиЯчейки, НомерПравКолонкиЯчейки);
			
			ОбластьЯчейкиИсходнойОбласти.Имя = ИмяОбластиЯчейки;
			
			Если Прав(ИмяКолонки, 2) = "01" Тогда
				ТекТабличноеПоле.Область(НомерВерхСтрокиЯчейки, НомерЛевоКолонкиЯчейки - 1,
					НомерНижнСтрокиЯчейки, НомерПравКолонкиЯчейки - 1).Имя = "УдалитьСтроку" + ИмяОбластиЯчейки;
			КонецЕсли;
			
			Если ОбластьЯчейки.СодержитЗначение = Истина Тогда
				ОбластьЯчейки.Очистить();
			Иначе
				ИсходныйНомер        = Число("0" + ОбластьЯчейки.Текст);
				НовыйПорядковыйНомер = ИсходныйНомер + 1;
				
				ОбластьЯчейки.Текст = НовыйПорядковыйНомер;
				
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ИмяТекущейОбласти = ИмяГруппы + "01_" + КолСтрокСтр1;
	
	Форма.Элементы[ТекТабличноеПолеИмя].ТекущаяОбласть = ТекТабличноеПоле.Области[ИмяТекущейОбласти];
	
	Форма.ТекущийЭлемент = Форма.Элементы[ТекТабличноеПолеИмя];
	
	СтруктураГруппы.Добавить();
	
	Для Каждого ОбластьТД Из ТекТабличноеПоле.Области Цикл
		Если СтрЧислоВхождений(ОбластьТД.Имя, "УдалитьСтроку") > 0 Тогда
			ОбластьТД.Гиперссылка = Истина;
			ОбластьТД.Текст = "х";
		КонецЕсли;
	КонецЦикла;
	
	Форма.Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьДополнительнуюСтрокуНаСервере()
	
	УдалитьДополнительнуюСтроку(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьДополнительнуюСтрокуНаКлиенте()
	
	УдалитьДополнительнуюСтроку(ЭтаФорма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УдалитьДополнительнуюСтроку(Форма, СпециальноеДобавление = Ложь, ИмяКолонкиНомера = Неопределено)
	Перем ИсходноеКоличествоСтрокГруппы;
	Перем СтруктураГруппы;
	
	ТекущаяСтраница = Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела;
	ТекТабличноеПоле = Форма.ТабличныйДокумент;

	ТекущаяОбласть = Форма.Элементы["ТабличныйДокумент"].ТекущаяОбласть;
	
	#Если НаКлиенте ИЛИ ТолстыйКлиентУправляемоеПриложение Тогда
		ИмяГруппы = РегламентированнаяОтчетностьКлиент.РазделТекущейОбласти(Форма, ТекущаяОбласть);
	#Иначе
		ИмяГруппы = РегламентированнаяОтчетностьВызовСервера.РазделТекущейОбластиНаСервере(Форма, ТекущаяОбласть);
	#КонецЕсли

	Форма.мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);

	ТекТабличноеПолеИмя = "ТабличныйДокумент";
	
	ТекТабличноеПоле = Форма[ТекТабличноеПолеИмя];
	
	Форма.мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);
	
	СтруктураГруппы = Форма[СтруктураГруппы];

	ТекущаяОбласть = Форма.Элементы["ТабличныйДокумент"].ТекущаяОбласть;
	ИмяЯчейки = ТекущаяОбласть.Имя;

	НомУдаляемойСтроки = Число(Сред(ИмяЯчейки, СтрНайти(ИмяЯчейки, "_") + 1));
	НомерСтрокиТаблицы = НомУдаляемойСтроки - 1;

	Если СтруктураГруппы.Количество() > ИсходноеКоличествоСтрокГруппы Тогда
		
		ИмяПервойЯчейкиУдаляемойСтроки = "УдалитьСтроку" + ИмяГруппы + "01_" + Формат(НомУдаляемойСтроки, "ЧГ=0");
		
		ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяПервойЯчейкиУдаляемойСтроки];
		
		НастройкиМнгЧ = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСвойствоРаздела(
			Форма, ТекущаяСтраница, "МногострочностьВРазделе").НайтиСтроки(Новый Структура("ИдГруппы", ИмяГруппы))[0];
		ВысотаСтроки = НастройкиМнгЧ.ВысотаСтроки;
		
		НомерВерхЯчейкиОбласти = ОбластьЯчейки.Верх;
		НомерНижнЯчейкиОбласти = ОбластьЯчейки.Верх + ВысотаСтроки - 1;
		
		МногострочностьВРазделе = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСвойствоРаздела(
			Форма, ТекущаяСтраница, "МногострочностьВРазделе");
		МногострочностьВРазделеТип = ТипЗнч(МногострочностьВРазделе);
		Если МногострочностьВРазделеТип = Тип("Число") Тогда
			ИмяОбластиМнгЧ = "МногострочнаяЧасть";
		ИначеЕсли МногострочностьВРазделеТип = Тип("ДанныеФормыКоллекция") Тогда
			ИмяОбластиМнгЧ = МногострочностьВРазделе.НайтиСтроки(Новый Структура("ИдГруппы", ИмяГруппы))[0].Область;
		КонецЕсли;

		Если ТекТабличноеПоле.Области.Найти(ИмяОбластиМнгЧ) <> Неопределено Тогда
			ОбластьВерх = ТекТабличноеПоле.Области[ИмяОбластиМнгЧ].Верх;
			ОбластьНиз = ТекТабличноеПоле.Области[ИмяОбластиМнгЧ].Низ;
		КонецЕсли;

		Если СпециальноеДобавление Тогда
			
		Иначе
			
			РегламентированнаяОтчетностьВызовСервера.УдалитьОбластьИзТабличногоДокумента(
				ТекТабличноеПоле, НомерВерхЯчейкиОбласти, НомерНижнЯчейкиОбласти);
			
			Форма[ТекТабличноеПолеИмя] = ТекТабличноеПоле;
			
		КонецЕсли;
		
		ТекТабличноеПоле.Область(ОбластьВерх, 0, ОбластьНиз, 0).Имя = ИмяОбластиМнгЧ;
		
		КолвоСдвигаемыхСтрок = СтруктураГруппы.Количество() - НомУдаляемойСтроки;
		
		Если КолвоСдвигаемыхСтрок > 0 Тогда
			
			Для НСтр = НомУдаляемойСтроки + 1 По СтруктураГруппы.Количество() Цикл
				
				ТекСтрока = СтруктураГруппы[НСтр - 1];
				
				СписокИменКолонокРаздела = Форма.мСтруктураИменаКолонокРазделов[ИмяГруппы];
				
				НСтрСтр = Формат(НСтр, "ЧГ=0");
				НСтрСтр1 = Формат(НСтр - 1, "ЧГ=0");
				
				Для НомерГрафы = 1 По СписокИменКолонокРаздела.Количество() Цикл
					
					Если НомерГрафы = 1 Тогда
						
						КолонкаИмя = "УдалитьСтроку" + ИмяГруппы + Формат(1, "ЧЦ=2; ЧВН=");
						
						ИмяСдвинутойЯчейки = КолонкаИмя + "_" + НСтрСтр;
						НовоеИмяСдвинутойЯчейки = КолонкаИмя + "_" + НСтрСтр1;
						
						ОбластьСдвинутойЯчейки = ТекТабличноеПоле.Области[ИмяСдвинутойЯчейки];
						ОбластьСдвинутойЯчейки.Имя = НовоеИмяСдвинутойЯчейки;
						
						Если ИмяКолонкиНомера <> Неопределено Тогда
							Если ИмяКолонкиНомера = КолонкаИмя Тогда
								
								// обновляем порядковый номер строки
								СтарыйНомер = Число(ТекСтрока[КолонкаИмя]);
								НовыйПорядковыйНомер = Строка(Макс(СтарыйНомер - 1, 0));
								ОбластьСдвинутойЯчейки.Текст = НовыйПорядковыйНомер;
								
								// обновляем значение элемента таблицы значений
								ТекСтрока[КолонкаИмя] = НовыйПорядковыйНомер;
								
							КонецЕсли;
						КонецЕсли;
						
					КонецЕсли;
					
					КолонкаИмя = СписокИменКолонокРаздела.Получить(НомерГрафы - 1).Значение;
					
					Если СтруктураГруппы[0].Свойство(КолонкаИмя) Тогда
						
						ИмяСдвинутойЯчейки = КолонкаИмя + "_" + НСтрСтр;
						НовоеИмяСдвинутойЯчейки = КолонкаИмя + "_" + НСтрСтр1;
						
						ОбластьСдвинутойЯчейки = ТекТабличноеПоле.Области[ИмяСдвинутойЯчейки];
						ОбластьСдвинутойЯчейки.Имя = НовоеИмяСдвинутойЯчейки;
						
						Если ИмяКолонкиНомера <> Неопределено Тогда
							Если ИмяКолонкиНомера = КолонкаИмя Тогда
								
								СтарыйНомер = Число(ТекСтрока[КолонкаИмя]);
								НовыйПорядковыйНомер = Строка(Макс(СтарыйНомер - 1, 0));
								ОбластьСдвинутойЯчейки.Текст = НовыйПорядковыйНомер;
								
								ТекСтрока[КолонкаИмя] = НовыйПорядковыйНомер;
							КонецЕсли;
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЦикла;
		КонецЕсли;
		
		СтруктураГруппы.Удалить(НомерСтрокиТаблицы);
		
	Иначе
		
		СтруктураГруппы.Удалить(НомерСтрокиТаблицы);
		
		ДобавляемаяСтрока = СтруктураГруппы.Добавить();
		
		СписокИменКолонокРаздела = Форма.мСтруктураИменаКолонокРазделов[ИмяГруппы];
		
		Для Каждого СтрокаТаблицы Из СтруктураГруппы Цикл
			
			НомерСтрокиВТаблице = СтруктураГруппы.Индекс(СтрокаТаблицы);
			НомерСтрокиВФормеТаблицы = Формат(НомерСтрокиВТаблице + 1, "ЧГ=0");
			
			Для НомерГрафы = 1 По СписокИменКолонокРаздела.Количество() Цикл
				
				КолонкаТаблицыИмя = СписокИменКолонокРаздела.Получить(НомерГрафы - 1).Значение;
				
				Если СтруктураГруппы[0].Свойство(КолонкаТаблицыИмя) Тогда
					
					Если ИмяКолонкиНомера <> Неопределено Тогда
						Если ИмяКолонкиНомера = КолонкаТаблицыИмя Тогда
							СтрокаТаблицы[КолонкаТаблицыИмя] = НомерСтрокиВФормеТаблицы;
						КонецЕсли;
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
		#Если НаКлиенте Тогда
			Форма.ВывестиРазделВТабличныйДокументНаКлиенте(ИмяГруппы, СтруктураГруппы);
		#Иначе
			Форма.ВывестиРазделВТабличныйДокументНаСервере(ИмяГруппы, СтруктураГруппы);
		#КонецЕсли
		
	КонецЕсли;
	
	НомТекущейСтроки = Мин(НомУдаляемойСтроки, СтруктураГруппы.Количество());
	
	ИмяТекущейОбласти = ИмяГруппы + "01_" + Формат(НомТекущейСтроки, "ЧГ=0");
	
	Форма.Элементы[ТекТабличноеПолеИмя].ТекущаяОбласть = ТекТабличноеПоле.Области[ИмяТекущейОбласти];
	
	ТекущийЭлемент = Форма.Элементы[ТекТабличноеПолеИмя];
	
	ЕстьДопСтроки = Ложь;
	
	Для Каждого ОбластьТД Из ТекТабличноеПоле.Области Цикл
		Если СтрЧислоВхождений(ОбластьТД.Имя, "_2") > 0 Тогда
			ЕстьДопСтроки = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ ЕстьДопСтроки Тогда
		Для Каждого ОбластьТД Из ТекТабличноеПоле.Области Цикл
			Если СтрЧислоВхождений(ОбластьТД.Имя, "УдалитьСтроку") > 0 Тогда
				ОбластьТД.Гиперссылка = Ложь;
				ОбластьТД.Текст = "";
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Форма.Модифицированность = Истина;
	
	#Если НаКлиенте Тогда
		Форма.РасчетНаКлиенте(ТекущаяСтраница);
	#Иначе
		Форма.РасчетНаСервере(ТекущаяСтраница);
	#КонецЕсли
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСтруктуруДанныхМногострочныхРазделов()
	
	СохрТабличныйДокумент = Новый ТабличныйДокумент;
	
	СохрТабличныйДокумент.Вывести(ТабличныйДокумент);
	
	Для Каждого Раздел Из мСвойстваРазделовДекларации.ПолучитьЭлементы() Цикл
		
		Если Раздел.МногострочностьВРазделе.Количество() > 0 Тогда
			
			ВывестиМакетВТаблДокНаСервере(Раздел.ИмяСтраницы, 0);
			
			СохранитьДанныеРаздела(Раздел.ИмяСтраницы, Ложь);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(СохрТабличныйДокумент);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтруктуруИменКолонокМногострочныхРазделов()
	
	Для каждого ЭлементСтруктуры Из мСтруктураМногострочныхРазделов Цикл
		
		СписокИменРаздела = мСтруктураИменаКолонокРазделов[ЭлементСтруктуры.Ключ];
		ТаблицаРаздела = ДанныеФормыВЗначение(ЭтаФорма[ЭлементСтруктуры.Значение], Тип("ТаблицаЗначений"));
		
		СписокИменРаздела.Очистить();
		Для каждого КолонкаТаблицы Из ТаблицаРаздела.Колонки Цикл
			СписокИменРаздела.Добавить(КолонкаТаблицы.Имя);
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ПанельОтправкиВКонтролирующиеОрганы

&НаКлиенте
Процедура ОбновитьОтправку(Команда)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОбновитьОтправкуИзПанелиОтправки(ЭтаФорма, "ПФР");
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаПротоколНажатие(Элемент)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьПротоколИзПанелиОтправки(ЭтаФорма, "ПФР");
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьНеотправленноеИзвещение(Команда)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОтправитьНеотправленноеИзвещениеИзПанелиОтправки(ЭтаФорма, "ПФР");
КонецПроцедуры

&НаКлиенте
Процедура ЭтапыОтправкиНажатие(Элемент)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьСостояниеОтправкиИзПанелиОтправки(ЭтаФорма, "ПФР");
КонецПроцедуры

&НаКлиенте
Процедура КритическиеОшибкиОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьКритическиеОшибкиИзПанелиОтправки(ЭтаФорма, "ПФР");
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаНаименованиеЭтапаНажатие(Элемент)
	
	ПараметрыИзменения = Новый Структура;
	ПараметрыИзменения.Вставить("Форма", ЭтаФорма);
	ПараметрыИзменения.Вставить("Организация", СтруктураРеквизитовФормы.Организация);
	ПараметрыИзменения.Вставить("КонтролирующийОрган",
		ПредопределенноеЗначение("Перечисление.ТипыКонтролирующихОрганов.ПФР"));
	
	РегламентированнаяОтчетностьКлиент.ИзменитьСтатусОтправки(ПараметрыИзменения);
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ОтправитьВКонтролирующийОрган(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверкаВозможностиВыгрузкиРегламентированногоОтчетаПередОтправкой", ЭтотОбъект);
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередОтправкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаВозможностиВыгрузкиРегламентированногоОтчетаПередОтправкой(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОтправитьВКонтролирующийОрганЗавершение", ЭтотОбъект);
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьВКонтролирующийОрганЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ПриНажатииНаКнопкуОтправкиВКонтролирующийОрган(ЭтаФорма, "ПФР");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Форма", ЭтаФорма);
	Оповещение = Новый ОписаниеОповещения("ПослеСохраненияФормыЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	СохранитьНаКлиенте(, Оповещение);
КонецПроцедуры

&НаКлиенте
Процедура ПослеСохраненияФормыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	ДополнительныеПараметры.Форма.Закрыть();
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОткрытьПрисоединенныеФайлы(Команда)
	
	РегламентированнаяОтчетностьКлиент.СохранитьОтчетИОткрытьФормуПрисоединенныеФайлы(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийПриИзменении(Элемент)
	Модифицированность = Истина;
КонецПроцедуры

&НаСервере
Функция ОбъектОтчета(ЭтаФормаИмя) Экспорт
	
	Если мОбъектОтчета = Неопределено Тогда 
		мОбъектОтчета = РегламентированнаяОтчетностьВызовСервера.ОбъектОтчета(ЭтаФормаИмя);
	КонецЕсли;
	
	Возврат мОбъектОтчета;
	
КонецФункции
