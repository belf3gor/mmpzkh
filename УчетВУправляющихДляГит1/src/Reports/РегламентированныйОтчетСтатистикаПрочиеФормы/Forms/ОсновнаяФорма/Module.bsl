
#Область СлужебныеПроцедурыИФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ПоказатьПериод(Форма)
		
	СтрПериодОтчета = ПредставлениеПериода(
		НачалоДня(Форма.мДатаНачалаПериодаОтчета), КонецДня(Форма.мДатаКонцаПериодаОтчета), "ФП = Истина");
	
	Форма.ПолеВыбораПериодичностиПоказаПериода = СтрПериодОтчета;

	Если Форма.мВыбраннаяФорма <> Неопределено Тогда
		
		Форма.Элементы.ОткрытьФормуОтчета.Доступность = Истина;
		
		Форма.Элементы.УстановитьПредыдущийПериод.Доступность = Истина;
		Форма.Элементы.УстановитьСледующийПериод.Доступность = Истина;
		
	Иначе
		
		Форма.ОписаниеНормативДок = "<< Выберите форму отчета >>";
		Форма.Элементы.ОткрытьФормуОтчета.Доступность = Ложь;
		
		Форма.Элементы.УстановитьПредыдущийПериод.Доступность = Ложь;
		Форма.Элементы.УстановитьСледующийПериод.Доступность = Ложь;
		
	КонецЕсли;
	
	// Для периодов ранее 2013 года ссылку Изменения законадательства скрываем.
	ГодПериода = Год(Форма.мДатаКонцаПериодаОтчета);
	Форма.Элементы.ПолеСсылкаИзмененияЗаконодательства.Видимость = Форма.ВидимостьСсылкиИзмененияЗаконодательства И (ГодПериода > 2012);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ИзменитьПериод(Форма, Шаг)
	
	Если Форма.мПериодичность = ПредопределенноеЗначение("Перечисление.Периодичность.День") Тогда
		
		Форма.мДатаКонцаПериодаОтчета  = КонецДня(Форма.мДатаКонцаПериодаОтчета + Шаг * 86400);
		Форма.мДатаНачалаПериодаОтчета = НачалоДня(Форма.мДатаКонцаПериодаОтчета);
		
	ИначеЕсли Форма.мПериодичность = ПредопределенноеЗначение("Перечисление.Периодичность.Неделя") Тогда
		
		Форма.мДатаКонцаПериодаОтчета  = КонецНедели(Форма.мДатаКонцаПериодаОтчета + Шаг * 86400 * 7);
		Форма.мДатаНачалаПериодаОтчета = НачалоНедели(Форма.мДатаКонцаПериодаОтчета);
		
	ИначеЕсли Форма.мПериодичность = ПредопределенноеЗначение("Перечисление.Периодичность.Декада") Тогда
		
		ДатаКонцаПериодаОтчета = Форма.мДатаКонцаПериодаОтчета + (Шаг * 10 - 5) * 86400;
		Если День(ДатаКонцаПериодаОтчета) <= 10 Тогда
			Форма.мДатаНачалаПериодаОтчета = НачалоМесяца(ДатаКонцаПериодаОтчета);
			Форма.мДатаКонцаПериодаОтчета = Форма.мДатаНачалаПериодаОтчета + 10 * 86400 - 1
		ИначеЕсли День(ДатаКонцаПериодаОтчета) <= 20 Тогда
			Форма.мДатаНачалаПериодаОтчета = НачалоМесяца(ДатаКонцаПериодаОтчета) + 10 * 86400;
			Форма.мДатаКонцаПериодаОтчета = Форма.мДатаНачалаПериодаОтчета + 10 * 86400 - 1
		Иначе
			Форма.мДатаНачалаПериодаОтчета = НачалоМесяца(ДатаКонцаПериодаОтчета) + 20 * 86400;
			Форма.мДатаКонцаПериодаОтчета = КонецМесяца(ДатаКонцаПериодаОтчета);
		КонецЕсли;
		
	ИначеЕсли Форма.мПериодичность = ПредопределенноеЗначение("Перечисление.Периодичность.Месяц") Тогда
		
		Форма.мДатаКонцаПериодаОтчета  = КонецМесяца(ДобавитьМесяц(Форма.мДатаКонцаПериодаОтчета, Шаг));
		Форма.мДатаНачалаПериодаОтчета = НачалоМесяца(Форма.мДатаКонцаПериодаОтчета);
		
	ИначеЕсли Форма.мПериодичность = ПредопределенноеЗначение("Перечисление.Периодичность.Квартал") Тогда
		
		Форма.мДатаКонцаПериодаОтчета  = КонецКвартала(ДобавитьМесяц(Форма.мДатаКонцаПериодаОтчета, Шаг * 3));
		Форма.мДатаНачалаПериодаОтчета = НачалоКвартала(Форма.мДатаКонцаПериодаОтчета);
		
	ИначеЕсли Форма.мПериодичность = ПредопределенноеЗначение("Перечисление.Периодичность.Полугодие") Тогда
		
		ДатаКонцаПериодаОтчета = ДобавитьМесяц(Форма.мДатаКонцаПериодаОтчета, Шаг * 6);
		Если Месяц(ДатаКонцаПериодаОтчета) < 7 Тогда
			Форма.мДатаНачалаПериодаОтчета = НачалоГода(ДатаКонцаПериодаОтчета);
			Форма.мДатаКонцаПериодаОтчета = КонецМесяца(ДобавитьМесяц(НачалоГода(ДатаКонцаПериодаОтчета), 5));
		Иначе
			Форма.мДатаНачалаПериодаОтчета = ДобавитьМесяц(НачалоГода(ДатаКонцаПериодаОтчета), 6);
			Форма.мДатаКонцаПериодаОтчета = КонецГода(ДатаКонцаПериодаОтчета)
		КонецЕсли;
		
	ИначеЕсли Форма.мПериодичность = ПредопределенноеЗначение("Перечисление.Периодичность.Год") Тогда
		
		Форма.мДатаКонцаПериодаОтчета  = КонецГода(ДобавитьМесяц(Форма.мДатаКонцаПериодаОтчета, Шаг * 12));
		Форма.мДатаНачалаПериодаОтчета = НачалоГода(Форма.мДатаКонцаПериодаОтчета);
		
	Иначе
		
		Форма.мДатаКонцаПериодаОтчета  = КонецМесяца(ДобавитьМесяц(Форма.мДатаКонцаПериодаОтчета, Шаг));
		Форма.мДатаНачалаПериодаОтчета = НачалоМесяца(Форма.мДатаКонцаПериодаОтчета);
		
	КонецЕсли;
	
	Если Форма.мНарастающимИтогом = Истина Тогда
		Форма.мДатаНачалаПериодаОтчета = НачалоГода(Форма.мДатаКонцаПериодаОтчета);
	КонецЕсли;
	
	ПоказатьПериод(Форма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПериодичностьПоКоду(КодПериодичности)
	
	Если КодПериодичности = 1 Тогда
		Возврат ПредопределенноеЗначение("Перечисление.Периодичность.Год");
	ИначеЕсли КодПериодичности = 2 Тогда
		Возврат ПредопределенноеЗначение("Перечисление.Периодичность.Полугодие");
	ИначеЕсли КодПериодичности = 4 Тогда
		Возврат ПредопределенноеЗначение("Перечисление.Периодичность.Квартал");
	ИначеЕсли КодПериодичности = 12 Тогда
		Возврат ПредопределенноеЗначение("Перечисление.Периодичность.Месяц");
	ИначеЕсли КодПериодичности = 36 Тогда
		Возврат ПредопределенноеЗначение("Перечисление.Периодичность.Декада");
	ИначеЕсли КодПериодичности = 56 Тогда
		Возврат ПредопределенноеЗначение("Перечисление.Периодичность.Неделя");
	КонецЕсли; 
	
	Возврат ПредопределенноеЗначение("Перечисление.Периодичность.Месяц");
	
КонецФункции////////////////////////////////////////////////////////////////////////////////

&НаСервере
Процедура ОбновитьТаблицуФормОтчета()
	
	ИсточникОтчета = СтрЗаменить(СтрЗаменить(Строка(ИмяФормы), "Отчет.", ""), ".Форма.ОсновнаяФорма", "");
	ЗначениеВДанныеФормы(Отчеты[ИсточникОтчета].ТаблицаФормОтчета(), мТаблицаФормОтчета);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	Организация              = Параметры.Организация;
	мДатаНачалаПериодаОтчета = Параметры.мДатаНачалаПериодаОтчета;
	мДатаКонцаПериодаОтчета  = Параметры.мДатаКонцаПериодаОтчета;
	мПериодичность           = Параметры.мПериодичность;
	мСкопированаФорма        = Параметры.мСкопированаФорма;
	мСохраненныйДок          = Параметры.мСохраненныйДок;
	
	ИсточникОтчетаПрочиеФормы = СтрЗаменить(СтрЗаменить(Строка(ЭтаФорма.ИмяФормы), "Отчет.", ""), ".Форма.ОсновнаяФорма", "");
	
	ОбновитьТаблицуФормОтчета();
	
	УчетПоВсемОрганизациям = РегламентированнаяОтчетность.ПолучитьПризнакУчетаПоВсемОрганизациям();
	Элементы.Организация.ТолькоПросмотр = НЕ УчетПоВсемОрганизациям;
	
	ОргПоУмолчанию = РегламентированнаяОтчетность.ПолучитьОрганизациюПоУмолчанию();
	
	// Устнавливаем границы периода построения отчета как месяц
	Если НЕ ЗначениеЗаполнено(мДатаНачалаПериодаОтчета) И НЕ ЗначениеЗаполнено(мДатаКонцаПериодаОтчета) Тогда
		мДатаКонцаПериодаОтчета  = КонецМесяца(ДобавитьМесяц(КонецМесяца(ТекущаяДатаСеанса()), -1));
		мДатаНачалаПериодаОтчета = НачалоМесяца(мДатаКонцаПериодаОтчета);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(мПериодичность) Тогда
		мПериодичность = Перечисления.Периодичность.Месяц;
	КонецЕсли;
	
	мНарастающимИтогом = Ложь;
	
	Если НЕ ЗначениеЗаполнено(Организация) 
	   И ЗначениеЗаполнено(ОргПоУмолчанию) Тогда
		Организация = ОргПоУмолчанию;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(мСкопированаФорма) Тогда
		ПрименитьСвойстваФормы(ЭтаФорма, Новый Структура("ФормаОтчета", мСкопированаФорма));
	КонецЕсли;
	
	Если РегламентированнаяОтчетностьВызовСервера.ИспользуетсяОднаОрганизация() Тогда
		ОргПоУмолчанию = ОбщегоНазначения.ОбщийМодуль("Справочники.Организации").ОрганизацияПоУмолчанию();
		Организация = ОргПоУмолчанию;
		
		Элементы.НадписьОрганизация.Видимость  =  Ложь;

	КонецЕсли;
	
	// Вычислим общую часть ссылки на ИзмененияЗаконодательства.
	ОбщаяЧастьСсылкиНаИзмененияЗаконодательства = "http://v8.1c.ru/lawmonitor/lawchanges.jsp?";
	СпрРеглОтчетов = Справочники.РегламентированныеОтчеты;
	НайденнаяСсылка = СпрРеглОтчетов.НайтиПоРеквизиту("ИсточникОтчета", ИсточникОтчетаПрочиеФормы);
	
	ВидимостьСсылкиИзмененияЗаконодательства = Истина;
	
	Если НайденнаяСсылка = СпрРеглОтчетов.ПустаяСсылка() Тогда
		
	    ОбщаяЧастьСсылкиНаИзмененияЗаконодательства = "";
		ВидимостьСсылкиИзмененияЗаконодательства = Ложь;
		
	Иначе
		
	    УИДОтчета = НайденнаяСсылка.УИДОтчета;
		
		Если Не ПустаяСтрока(УИДОтчета) Тогда
		
			Фильтр1 = "regReportForm=" + УИДОтчета;
			Фильтр2 = "regReportOnly=true";
			УИДКонфигурации = "";
			РегламентированнаяОтчетностьПереопределяемый.ПолучитьУИДКонфигурации(УИДКонфигурации);
			Фильтр3 = "userConfiguration=" + УИДКонфигурации;
			
			ОбщаяЧастьСсылкиНаИзмененияЗаконодательства = ОбщаяЧастьСсылкиНаИзмененияЗаконодательства +
			                                                Фильтр1 + "&" + Фильтр2 + "&" + Фильтр3;	
		Иначе
			
			ОбщаяЧастьСсылкиНаИзмененияЗаконодательства = "";
			ВидимостьСсылкиИзмененияЗаконодательства = Ложь;
			
		КонецЕсли; 
																
	КонецЕсли;
													
	ПолеСсылкаИзмененияЗаконодательства = "Изменения законодательства";
	
	ИзменитьПериод(ЭтаФорма, 0);
	
	Если Параметры.Свойство("ИмяФайлаШаблона") И ЗначениеЗаполнено(Параметры.ИмяФайлаШаблона) Тогда 
		ИмяФайлаШаблона = Параметры.ИмяФайлаШаблона;
		СтрОтбора = Новый Структура("ИмяФайлаШаблона", Параметры.ИмяФайлаШаблона);
		ПрименитьСвойстваФормы(ЭтаФорма, СтрОтбора);
		Элементы.ВыбратьФорму.Видимость = Ложь;
		Элементы.Шаблоны.Видимость = Ложь;
		Элементы.ВыбратьФорму.КнопкаПоУмолчанию = Ложь;
		Элементы.ОткрытьФормуОтчета.КнопкаПоУмолчанию = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	Если ЗначениеЗаполнено(ИмяФайлаШаблона) Тогда
		СтрОтбора = Новый Структура("ИмяФайлаШаблона", ИмяФайлаШаблона);
		
		Если мТаблицаФормОтчета.НайтиСтроки(СтрОтбора).Количество() > 0 Тогда
			РезультатДлительнойОперации = ПроверитьАктуальностьШаблона(СтрОтбора);
			ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
			ПараметрыОжидания.ТекстСообщения = НСтр("ru = 'Выполняется проверка актуальности формата..'");
			ПараметрыОжидания.ВыводитьПрогрессВыполнения = Истина;
			ПараметрыОжидания.ВыводитьСообщения = Истина;
			
			ОповещениеОЗавершении = Новый ОписаниеОповещения("ПроверитьАктуальностьШаблонаЗавершение", ЭтотОбъект);
			ДлительныеОперацииКлиент.ОжидатьЗавершение(РезультатДлительнойОперации, ОповещениеОЗавершении, ПараметрыОжидания);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)

	Если ИмяСобытия = "ИзменениеДанныхРегистраШаблоныЭВФОтчетовСтатистики" Тогда
		
		ОбновитьТаблицуФормОтчета();
		
	КонецЕсли;
	
	Если Параметр = "Активизировать" Тогда
	
		Если ИмяСобытия = ЭтаФорма.Заголовок Тогда
		
			ЭтаФорма.Активизировать();
		
		КонецЕсли;
	
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура УстановитьПредыдущийПериод(Команда)
	
	ИзменитьПериод(ЭтаФорма, -1);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСледующийПериод(Команда)
	
	ИзменитьПериод(ЭтаФорма, 1);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуОтчета(Команда)
	
	Если мСкопированаФорма <> Неопределено Тогда
		// Документ был скопирован. 
		// Проверяем соответствие форм.
		Если мВыбраннаяФорма <> мСкопированаФорма Тогда
			
			ПоказатьПредупреждение(, НСтр("ru='Форма отчета изменилась, копирование невозможно!'"));
			Возврат;
			
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), РегламентированнаяОтчетностьКлиент.ОсновнаяФормаОрганизацияНеЗаполненаВывестиТекст());
		Сообщение.Сообщить();
		
		Возврат;
		
	КонецЕсли;
		
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Организация",              Организация);
	ПараметрыФормы.Вставить("мДатаНачалаПериодаОтчета", мДатаНачалаПериодаОтчета);
	ПараметрыФормы.Вставить("мДатаКонцаПериодаОтчета",  мДатаКонцаПериодаОтчета);
	ПараметрыФормы.Вставить("мСохраненныйДок",          мСохраненныйДок);
	ПараметрыФормы.Вставить("мСкопированаФорма",        мСкопированаФорма);
	ПараметрыФормы.Вставить("мПериодичность",           мПериодичность);
	ПараметрыФормы.Вставить("мНарастающимИтогом",       мНарастающимИтогом);
	ПараметрыФормы.Вставить("мВыбраннаяФорма",          мВыбраннаяФорма);
	ПараметрыФормы.Вставить("мИндексФормыОтчета",       мИндексФормыОтчета);
	ПараметрыФормы.Вставить("мИмяФайлаШаблона",         мИмяФайлаШаблона);
	
	СтрВыбраннаяФорма = ?(СтрНайти(мВыбраннаяФорма, "_") = 0, мВыбраннаяФорма, Лев(мВыбраннаяФорма, СтрНайти(мВыбраннаяФорма, "_") - 1));
	ВыбФормаОтчета = ПолучитьФорму(СтрЗаменить(ЭтаФорма.ИмяФормы, "ОсновнаяФорма", "") + СтрВыбраннаяФорма, ПараметрыФормы, , Истина);
	
	Если ВыбФормаОтчета = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВыбФормаОтчета.Модифицированность = Истина;
	
	Закрыть();
	
	ВыбФормаОтчета.Открыть();

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуШаблонов(Команда)
	
	ОткрытьФорму("РегистрСведений.ШаблоныЭВФОтчетовСтатистики.ФормаСписка");
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьФорму(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ИмяФайлаШаблона", мИмяФайлаШаблона);
	ПараметрыФормы.Вставить("ТаблицаВыбораФормы", мТаблицаФормОтчета);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыбратьФормуЗавершение", ЭтотОбъект);
	
	ОткрытьФорму(СтрЗаменить(ЭтаФорма.ИмяФормы, "ОсновнаяФорма", "ВыборФормыОтчета"), ПараметрыФормы, ЭтаФорма, Истина,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьФормуЗавершение(ВыбСтрока, ДополнительныеПараметры) Экспорт
	Если ВыбСтрока <> Неопределено Тогда
		СтрОтбора = Новый Структура;
		СтрОтбора.Вставить("ИмяФайлаШаблона", ВыбСтрока.ИмяФайлаШаблона);
		ПрименитьСвойстваФормы(ЭтаФорма, СтрОтбора);
		
		Если мТаблицаФормОтчета.НайтиСтроки(СтрОтбора).Количество() > 0 Тогда
			РезультатДлительнойОперации = ПроверитьАктуальностьШаблона(СтрОтбора);
			ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
			ПараметрыОжидания.ТекстСообщения = НСтр("ru = 'Выполняется проверка актуальности формата..'");
			ПараметрыОжидания.ВыводитьПрогрессВыполнения = Истина;
			ПараметрыОжидания.ВыводитьСообщения = Истина;
			
			ОповещениеОЗавершении = Новый ОписаниеОповещения("ПроверитьАктуальностьШаблонаЗавершение", ЭтотОбъект);
			ДлительныеОперацииКлиент.ОжидатьЗавершение(РезультатДлительнойОперации, ОповещениеОЗавершении, ПараметрыОжидания);
		КонецЕсли;
	Иначе
		ИзменитьПериод(ЭтаФорма, 0);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ПроверитьАктуальностьШаблона(СтрОтбора)
	ВыбСтрока = мТаблицаФормОтчета.НайтиСтроки(СтрОтбора)[0];
	ПараметрыЗапуска = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыЗапуска.НаименованиеФоновогоЗадания = НСтр("ru = 'Провека актуальности шаблона через веб-сервис Росстата'");
	ПараметрыЗапуска.ДополнительныйРезультат = Истина;
	ПараметрыЗапуска.ОжидатьЗавершение = 0;
	
	ПараметрыВыполнения = Новый Структура;
	ПараметрыВыполнения.Вставить("СвойстваШаблонов", ВыбСтрока.Версия);
	ПараметрыВыполнения.Вставить("ОКУД", ВыбСтрока.ОКУД);
	ПараметрыВыполнения.Вставить("ИмяФайлаШаблона", ВыбСтрока.ИмяФайлаШаблона);
	
	ИмяПроцедуры = "РегистрыСведений.ШаблоныЭВФОтчетовСтатистики.ПолучитьАктуальныйШаблонИзСервисаРосстата";
	Возврат ДлительныеОперации.ВыполнитьВФоне(ИмяПроцедуры, ПараметрыВыполнения, ПараметрыЗапуска);
КонецФункции

&НаКлиенте
Процедура ПроверитьАктуальностьШаблонаЗавершение(РезультатОбновления, ДополнительныеПараметры) Экспорт
	Если РезультатОбновления = Неопределено
		ИЛИ РезультатОбновления.Статус <> "Выполнено" Тогда
		Возврат;
	КонецЕсли;
	
	ВерсияСервиса = ПолучитьИзВременногоХранилища(РезультатОбновления.АдресРезультата);
	Если ЗначениеЗаполнено(ВерсияСервиса) Тогда 
		ОО = Новый ОписаниеОповещения("ЗагрузитьЩаблонИзСервисаЗавершение", ЭтотОбъект, Новый Структура("АдресДополнительногоРезультата, ВерсияСервиса", РезультатОбновления.АдресДополнительногоРезультата, ВерсияСервиса));
		ТекстВопроса = Нстр("ru='Версия шаблона на сервисе отличается от загруженной в базу. Версия сервиса: '");
		ТекстВопроса = ТекстВопроса + ВерсияСервиса.Версия + Символы.ПС + Нстр("ru='Произвести обновление шаблона?'");
		ПоказатьВопрос(ОО, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
		РезультатЗагрузки = ПолучитьИзВременногоХранилища(РезультатОбновления.АдресДополнительногоРезультата);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьЩаблонИзСервисаЗавершение(Знач Результат, Знач ПараметрКоманды) Экспорт
	Если Результат = КодВозвратаДиалога.Да Тогда
		ЗагрузитьПолученныеШаблоны(ПараметрКоманды.АдресДополнительногоРезультата, ПараметрКоманды.ВерсияСервиса);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьПолученныеШаблоны(АдресВременногоХранилища, ВерсияСервиса)
	Попытка
		ОбщегоНазначения.ОбщийМодуль("РегистрыСведений.ШаблоныЭВФОтчетовСтатистики").ЗагрузитьШаблоны(АдресВременногоХранилища, 0, Истина);
		ОбновитьТаблицуФормОтчета();
		ЗагруженныеШаблоны = мТаблицаФормОтчета.НайтиСтроки(Новый Структура("ОКУД, Версия", ВерсияСервиса.ОКУД, ВерсияСервиса.Версия));
		Если ЗагруженныеШаблоны.Количество() > 0 Тогда 
			ЗагруженныйШаблон = ЗагруженныеШаблоны[0];
			СтрОтбора = Новый Структура("ИмяФайлаШаблона", ЗагруженныеШаблоны[0].ИмяФайлаШаблона);
			ПрименитьСвойстваФормы(ЭтаФорма, СтрОтбора);
		КонецЕсли;
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Не удалось обновить шаблон, отчет будет сформирован по шаблону из ИБ'"));
	КонецПопытки;
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПрименитьСвойстваФормы(Форма, СтруктураОтбора)
	
	ВыбСтрока = Форма.мТаблицаФормОтчета.НайтиСтроки(СтруктураОтбора);
	
	Если ВыбСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Форма.ОписаниеНормативДок = ВыбСтрока[0].ОписаниеОтчета;
	Форма.ОписаниеНормативДок = ВыбСтрока[0].ИндексФормыОтчета + Символы.ПС + ВыбСтрока[0].НаименованиеФормыОтчета + Символы.ПС + "версия шаблона: " + ВыбСтрока[0].Версия;
	
	Форма.Заголовок = "Статистика (прочие): " + ВыбСтрока[0].ИндексФормыОтчета;
	
	Форма.мВыбраннаяФорма    = ВыбСтрока[0].ФормаОтчета;
	Форма.мИмяФайлаШаблона   = ВыбСтрока[0].ИмяФайлаШаблона;
	Форма.мИндексФормыОтчета = ВыбСтрока[0].ИндексФормыОтчета;
	
	Форма.мНарастающимИтогом = ВыбСтрока[0].НарастающимИтогом;
	
	Форма.мПериодичность     = ПериодичностьПоКоду(ВыбСтрока[0].Периодичность);
	
	Форма.мДатаКонцаПериодаОтчета = ТекущаяДатаНаСервере();
	
	ИзменитьПериод(Форма, -1);

КонецПроцедуры

&НаКлиенте
Процедура ПолеСсылкаИзмененияЗаконодательстваНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ОбщаяЧастьСсылкиНаИзмененияЗаконодательства = "" Тогда
		// Нет общей части - ничего не делаем.
		Возврат;
	КонецЕсли; 
	
	// Фильтр4 - год.
	Фильтр4 = "currentYear=" + Формат(Год(мДатаКонцаПериодаОтчета),"ЧГ=0");
	
	// Фильтр5 - квартал.
	МесяцКонцаКварталаОтчета = Месяц(КонецКвартала(мДатаКонцаПериодаОтчета));
	КварталОтчета = МесяцКонцаКварталаОтчета/3;
	Фильтр5 = "currentQuartal=" + Строка(КварталОтчета);
	
	СсылкаИзмененияЗаконодательства = ОбщаяЧастьСсылкиНаИзмененияЗаконодательства + 
	"&" + Фильтр4 + "&" + Фильтр5;
	
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПопытатьсяПерейтиПоНавигационнойСсылке(СсылкаИзмененияЗаконодательства);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ТекущаяДатаНаСервере()

	Возврат ТекущаяДатаСеанса(); 

КонецФункции

#КонецОбласти
