&НаКлиенте
Перем ПараметрыОбработчикаОжидания;

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;

	// Обход ошибки платформы Параметр сеанса отсутствует или удален
	ПолеТабличногоДокументаФормаОтчета.Очистить();
	
	СформироватьСтруктуруРеквизитовФормы();
	
	Если Параметры.Свойство("СформироватьФормуОтчетаАвтоматически") Тогда 
		СтруктураРеквизитовФормы.СформироватьФормуОтчетаАвтоматически = Параметры.СформироватьФормуОтчетаАвтоматически;
	Иначе
		СтруктураРеквизитовФормы.СформироватьФормуОтчетаАвтоматически = Ложь;
	КонецЕсли;
	
	СтруктураРеквизитовФормы.СписокПечатаемыхЛистов = Новый СписокЗначений;
	
	// ОПИСАНИЕ ПАРМЕТРОВ ФОРМЫ
	//
	// Версия формы.
	СтруктураРеквизитовФормы.мВерсияФормы = "31/03/2015";
	// Код отчета, равен коду по ОКУД.
	СтруктураРеквизитовФормы.мКодОтчета   = "0602003";
	
	// ОПИСАНИЕ ПАРАМЕТРОВ МНОГОСТРОЧНЫХ ГРУПП
	// Идентификаторы многострочных групп.
	СтруктураРеквизитовФормы.мИдГруппы1  = "П0000010001";
	СтруктураРеквизитовФормы.мИдГруппы2  = "П0000020001";
	СтруктураРеквизитовФормы.мИдГруппы2С = "П0001020001";
	СтруктураРеквизитовФормы.мИдГруппы3  = "П0000030001";
	СтруктураРеквизитовФормы.мИдГруппы4  = "П0000040001";
	
	// Количество строк многострочных разделов по "бумажной" форме отчета
	// (минимальное количество строк, которое должно присутствовать всегда).
	КолИсхСтрокИдГруппы1  = 35;
	КолИсхСтрокИдГруппы2  = 10;
	КолИсхСтрокИдГруппы2С = 10;
	КолИсхСтрокИдГруппы3  = 24;
	КолИсхСтрокИдГруппы4  = 10;
	
	КолКолонокИдГруппы1  = 12;
	КолКолонокИдГруппы2  = 13;
	КолКолонокИдГруппы2С = 5;
	КолКолонокИдГруппы3  = 10;
	КолКолонокИдГруппы4  = 12;
	
	// Структура многострочных разделов формы.
	мСтруктураМногострочныхРазделов = Новый Структура;
	мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы1,  СтруктураРеквизитовФормы.мИдГруппы1);
	мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы2,  СтруктураРеквизитовФормы.мИдГруппы2);
	мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы2С, СтруктураРеквизитовФормы.мИдГруппы2С);
	мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы3,  СтруктураРеквизитовФормы.мИдГруппы3);
	мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы4,  СтруктураРеквизитовФормы.мИдГруппы4);
	
	// Структура исходных строк (минимального кол-ва) многострочных разделов формы.
	мСтруктураИсхКолвоСтрокРазделов = Новый Структура;
	мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы1,  КолИсхСтрокИдГруппы1);
	мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы2,  КолИсхСтрокИдГруппы2);
	мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы2С, КолИсхСтрокИдГруппы2С);
	мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы3,  КолИсхСтрокИдГруппы3);
	мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы4,  КолИсхСтрокИдГруппы4);
	
	// Структура колонок многострочных разделов формы.
	мСтруктураКолвоКолонокРазделов = Новый Структура;
	мСтруктураКолвоКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы1,  КолКолонокИдГруппы1);
	мСтруктураКолвоКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы2,  КолКолонокИдГруппы2);
	мСтруктураКолвоКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы2С, КолКолонокИдГруппы2С);
	мСтруктураКолвоКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы3,  КолКолонокИдГруппы3);
	мСтруктураКолвоКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы4,  КолКолонокИдГруппы4);
	
	СтруктураРеквизитовФормы.мСоответствияМнгЧ = Новый Соответствие;
	СтруктураРеквизитовФормы.мСоответствияМнгЧ.Вставить(СтруктураРеквизитовФормы.мИдГруппы1,  "МногострочнаяЧасть1");
	СтруктураРеквизитовФормы.мСоответствияМнгЧ.Вставить(СтруктураРеквизитовФормы.мИдГруппы2,  "МногострочнаяЧасть2");
	СтруктураРеквизитовФормы.мСоответствияМнгЧ.Вставить(СтруктураРеквизитовФормы.мИдГруппы2С, "МногострочнаяЧасть3");
	СтруктураРеквизитовФормы.мСоответствияМнгЧ.Вставить(СтруктураРеквизитовФормы.мИдГруппы3,  "МногострочнаяЧасть4");
	СтруктураРеквизитовФормы.мСоответствияМнгЧ.Вставить(СтруктураРеквизитовФормы.мИдГруппы4,  "МногострочнаяЧасть5");
	
	СтруктураРеквизитовФормы.мПечатныеФормы = Новый СписокЗначений;
	
	ПолеТабличногоДокументаФормаОтчета.Вывести(Отчеты[Сред(Лев(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, ".Форма.") - 1), 7)].ПолучитьМакет("ФормаОтчета2015Кв1_ФормаОтчета"));
	
	СтруктураРеквизитовФормы.мВыбраннаяФорма          = Параметры.мВыбраннаяФорма;
	СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета  = Параметры.мДатаКонцаПериодаОтчета;
	СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета = Параметры.мДатаНачалаПериодаОтчета;
	СтруктураРеквизитовФормы.мПериодичность           = Параметры.мПериодичность;
	СтруктураРеквизитовФормы.мСкопированаФорма        = Параметры.мСкопированаФорма;
	СтруктураРеквизитовФормы.мСохраненныйДок          = Параметры.мСохраненныйДок;
	СтруктураРеквизитовФормы.Организация              = Параметры.Организация;
	
	РегламентированнаяОтчетность.СформироватьСтруктуруЦветовРаскраски(ЭтаФорма);
	
	мСтруктураВариантыЗаполнения = Новый Структура;
	
	СоответствиеЕдиницыИзмеренияДелителю = Новый Структура;
	СоответствиеЕдиницыИзмеренияДелителю.Вставить("Окр1", 1);
	СоответствиеЕдиницыИзмеренияДелителю.Вставить("Окр1000", 1000);
	СоответствиеЕдиницыИзмеренияДелителю.Вставить("Окр1000000", 1000000);
	
	ПорядкиОкругленияОтчетности = Новый Структура;
	ПорядкиОкругленияОтчетности.Вставить("ПеречислениеПорядкиОкругленияОтчетностиОкр1",       Перечисления.ПорядкиОкругленияОтчетности.Окр1);
	ПорядкиОкругленияОтчетности.Вставить("ПеречислениеПорядкиОкругленияОтчетностиОкр1000",    Перечисления.ПорядкиОкругленияОтчетности.Окр1000);
	ПорядкиОкругленияОтчетности.Вставить("ПеречислениеПорядкиОкругленияОтчетностиОкр1000000", Перечисления.ПорядкиОкругленияОтчетности.Окр1000000);
	
	ДатаПодписи = ТекущаяДатаСеанса();
	
	СтруктураРеквизитовФормы.СправочникиВидыКонтактнойИнформацииПочтовыйАдресОрганизации = Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресОрганизации;
	
	Инициализация(Параметры.БезОткрытияФормы);
	
КонецПроцедуры

&НаСервере
Процедура СформироватьСтруктуруРеквизитовФормы()
	
	СтруктураРеквизитовФормы = РегламентированнаяОтчетность.СформироватьСтруктуруОбязательныхРеквизитовСтатистическогоОтчета();
	СтруктураРеквизитовФормы.Вставить("мИдГруппы1");
	СтруктураРеквизитовФормы.Вставить("мИдГруппы2");
	СтруктураРеквизитовФормы.Вставить("мИдГруппы2С");
	СтруктураРеквизитовФормы.Вставить("мИдГруппы3");
	СтруктураРеквизитовФормы.Вставить("мИдГруппы4");
	
КонецПроцедуры

&НаСервере
Процедура Инициализация(БезОткрытияФормы = Ложь) Экспорт
	
	СформироватьСпискиВыбора();
	РегламентированнаяОтчетность.ЗаполнитьНачальныеНастройки(ЭтаФорма);
	СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация = Ложь;
	СтруктураРеквизитовФормы.мСоставПоказателей = "СоставПоказателей2015Кв1";
	СтруктураРеквизитовФормы.мБезОткрытияФормы = БезОткрытияФормы;
	СтруктураРеквизитовФормы.мРежимПечати = Ложь;
	
	ТекТабличноеПоле = ПолеТабличногоДокументаФормаОтчета;
	
	СтруктураРеквизитовФормы.ВидДокумента = 0;
	НомерКорректировки = 1;
	СтруктураРеквизитовФормы.мАдресвФорматеДляВыгрузки = "";
	
	РегламентированнаяОтчетность.НачальныеОперацииСМногострочнымиБлоками(ЭтаФорма);
	
	Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
		
		Если СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено Тогда
			// Документ скопирован
			ВосстановитьСохраненныеДанные();
		Иначе
			// Дополнительно, для Формы 11 (сделка).
			ДопИнициализацияВидовОсновныхФондов();
		КонецЕсли;
		
		Модифицированность = Истина;
		
	Иначе
		
		// При открытии или при копировании сохраненного
		// отчета восстанавливаем сохраненные данные.
		ВосстановитьСохраненныеДанные();
		
		Если ЗначениеЗаполнено(СтруктураРеквизитовФормы.мСкопированаФорма) Тогда
			СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено;
		КонецЕсли;
		
		Если НЕ БезОткрытияФормы
           И НЕ СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
				   
        	ЗаблокироватьДанныеДляРедактирования(СтруктураРеквизитовФормы.мСохраненныйДок, , ЭтаФорма.УникальныйИдентификатор);

        КонецЕсли;
		
	КонецЕсли;
	
	Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
		НомерКорректировки = 0;
	Иначе
		НомерКорректировки = СтруктураРеквизитовФормы.мСохраненныйДок.Вид;
	КонецЕсли;
	
	ТекТабличноеПоле.Области.НомерКорректировки.Значение = НомерКорректировки;
	ПолеТабличногоДокументаФормаОтчета.Области.ДатаСоставленияОтчета.Значение = ДатаПодписи;
	
	ПоказатьПериод();
	
	Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Или СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация Тогда
		ЗаполнитьСведенияОбОрганизацииНаСервере();
	КонецЕсли;
	
	СтруктураРеквизитовФормы.НаимОрганизации = СтруктураРеквизитовФормы.Организация.Наименование;
	
	РегламентированнаяОтчетность.ДобавитьКнопкуПрисоединенныеФайлы(ЭтаФорма);
	
	РегламентированнаяОтчетностьКлиентСервер.ПриИнициализацииФормыРегламентированногоОтчета(ЭтаФорма, "ФСГС");
	РегламентированнаяОтчетность.ПолучитьСведенияОПоказателяхОтчета(ЭтаФорма, Новый Структура("Период", СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета));
	
	Если СтруктураРеквизитовФормы.ОтображатьКнопкуЗаполнить Тогда
		
		ЭтаФормаИмя = ЭтаФорма.ИмяФормы;
		Если СтрЧислоВхождений(ЭтаФормаИмя, "ВнешнийОтчет.") > 0 Тогда
			ЭтаФормаИмя = СтрЗаменить(ЭтаФормаИмя, "ВнешнийОтчет.", "");
		ИначеЕсли СтрЧислоВхождений(ЭтаФормаИмя, "Отчет.") > 0 Тогда
			ЭтаФормаИмя = СтрЗаменить(ЭтаФормаИмя, "Отчет.", "");
		КонецЕсли;
		ИДОтчета = Лев(ЭтаФормаИмя, СтрНайти(ЭтаФормаИмя, ".Форма.") - 1);
		ИДРедакцииОтчета = Сред(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, ".Форма.") + 7);
		
		Если НЕ РегламентированнаяОтчетностьПереопределяемый.РеализованаНастройкаАвтозаполняемыхПоказателейРеглОтчета(ИДОтчета, ИДРедакцииОтчета) Тогда
			
			Элементы.Заполнить.Видимость = Ложь;
			Элементы.Настроить.Видимость = Ложь;
			Элементы.НастроитьЗаполнение.Видимость = Ложь;
			
			КнопкаФормыЗаполнить = Элементы.Вставить("КнопкаЗаполнить", Тип("КнопкаФормы"), ЭтаФорма.КоманднаяПанель.ПодчиненныеЭлементы.ГруппаКнопок3, Элементы.Расшифровать);
			
			КнопкаФормыЗаполнить.Заголовок   = "Заполнить";
			КнопкаФормыЗаполнить.ИмяКоманды  = "Заполнить"; 
			
		КонецЕсли;
		
	Иначе
		
		Элементы.Заполнить.Видимость = Ложь;
		Элементы.Настроить.Видимость = Ложь;
		Элементы.НастроитьЗаполнение.Видимость = Ложь;
		
		СтруктураРеквизитовФормы.мСохранятьРасшифровку = Ложь;
		
	КонецЕсли;
	
	Если НЕ (СтруктураРеквизитовФормы.ОтображатьКнопкуЗаполнить ИЛИ СтруктураРеквизитовФормы.ОтображатьКнопкуРасшифровать) Тогда
		Элементы.Расшифровать.Видимость = Ложь;
	КонецЕсли;
	
	РегламентированнаяОтчетность.УстановитьЦветФорматДоступностьЯчеек(ЭтаФорма);
	ТекущийЭлемент = Элементы["ПолеТабличногоДокументаФормаОтчета"];
	
	Если СтруктураРеквизитовФормы.СформироватьФормуОтчетаАвтоматически Тогда
		ЗаполнитьАвтоНаСервере();
		Если Элементы.Расшифровать.Видимость Тогда
			Элементы.Расшифровать.Доступность = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДопИнициализацияВидовОсновныхФондов()
	
	// Раздел I.
	ПолеТабличногоДокументаФормаОтчета.Области["П000001000101_1"].Значение  = "Нежилые здания" + Символы.НПП;
	ПолеТабличногоДокументаФормаОтчета.Области["П000001000101_5"].Значение  = "Жилые здания" + Символы.НПП;
	ПолеТабличногоДокументаФормаОтчета.Области["П000001000101_9"].Значение  = "Сооружения" + Символы.НПП;
	ПолеТабличногоДокументаФормаОтчета.Области["П000001000101_14"].Значение = "Машины и оборудование" + Символы.НПП;
	ПолеТабличногоДокументаФормаОтчета.Области["П000001000101_21"].Значение = "Транспортные средства" + Символы.НПП;
	ПолеТабличногоДокументаФормаОтчета.Области["П000001000101_25"].Значение = "Производственный и хозяйственный инвентарь" + Символы.НПП;
	ПолеТабличногоДокументаФормаОтчета.Области["П000001000101_28"].Значение = "Скот рабочий, продуктивный и племенной" + Символы.НПП;
	ПолеТабличногоДокументаФормаОтчета.Области["П000001000101_32"].Значение = "Многолетние насаждения" + Символы.НПП;
	// Раздел III.
	ПолеТабличногоДокументаФормаОтчета.Области["П000003000101_1"].Значение  = "Исследования и разработки" + Символы.НПП;
	ПолеТабличногоДокументаФормаОтчета.Области["П000003000101_5"].Значение  = "Геологоразведочные работы" + Символы.НПП;
	ПолеТабличногоДокументаФормаОтчета.Области["П000003000101_9"].Значение  = "Компьютерное программное обеспечение" + Символы.НПП;
	ПолеТабличногоДокументаФормаОтчета.Области["П000003000101_13"].Значение = "Оригинальные произведения развлекательного жанра, литературы или искусства" + Символы.НПП;
	ПолеТабличногоДокументаФормаОтчета.Области["П000003000101_17"].Значение = "Наукоемкие промышленные технологии" + Символы.НПП;
	ПолеТабличногоДокументаФормаОтчета.Области["П000003000101_21"].Значение = "Прочие нематериальные основные фонды" + Символы.НПП;
	
КонецПроцедуры

// Процедура управляет показом в форме периода построения отчета.
//
&НаСервере
Процедура ПоказатьПериод()
	
	// Период в шапке и заголовке отчета.
	ПолеТабличногоДокументаФормаОтчета.Области.ПериодОтчета.Значение = "за " + НРег(Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ = 'гггг'")) + " г.";
	СтруктураРеквизитовФормы.СтрПериодОтчета = НРег(Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ = 'гггг'")) + " г.";
	
КонецПроцедуры

// Восстанавливает сохраненные данные отчета.
//
&НаСервере
Процедура ВосстановитьСохраненныеДанные()
	Перем ДанныеМногострочныхРазделов;
	Перем ДанныеВариановАвтоЗаполнения;
	Перем ПоказателиОтчета;
	Перем ВерсияФормы;
	
	// В случае, если формы была скопирована по F9, то проверим, не изменилась ли организация.
	Если СтруктураРеквизитовФормы.Организация <> СтруктураРеквизитовФормы.мСохраненныйДок.Организация
		И СтруктураРеквизитовФормы.Организация <> РегламентированнаяОтчетностьКлиентСервер.ПустоеЗначениеТипа("СправочникСсылка.Организации")
		И СтруктураРеквизитовФормы.Организация <> Неопределено Тогда
		// Меняем переменную, для того, чтобы запустилась процедура ЗаполнитьСведенияОбОрганизации.
		СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация = Истина;
	Иначе
		// Восстанавливаем реквизиты отчета.
		СтруктураРеквизитовФормы.Организация = СтруктураРеквизитовФормы.мСохраненныйДок.Организация;
	КонецЕсли;
	
	ДатаПодписи = СтруктураРеквизитовФормы.мСохраненныйДок.ДатаПодписи;
	СтруктураРеквизитовФормы.ЕдиницаИзмерения = СтруктураРеквизитовФормы.мСохраненныйДок.ЕдиницаИзмерения;
	СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = СтруктураРеквизитовФормы.мСохраненныйДок.ТочностьЕдиницыИзмерения;
	Комментарий = СтруктураРеквизитовФормы.мСохраненныйДок.Комментарий;
	
	// Восстанавливаем сохраненные данные отчета.
	СписокСохранения = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить();
	
	// Восстанавливаем сохраненные данные вариантов автозаполнения ячеек.
	Если СписокСохранения.Свойство("ДанныеВариантовАвтоЗаполнения", ДанныеВариановАвтоЗаполнения) Тогда
		
		Если НЕ ДанныеВариановАвтоЗаполнения = Неопределено Тогда
			
			мСтруктураВариантыЗаполнения.Очистить();
			
			Для Каждого ЭлементСтруктуры Из ДанныеВариановАвтоЗаполнения Цикл
				
				мСтруктураВариантыЗаполнения.Вставить(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Ключ);
				
				ЭтаФорма["ТаблицаВариантыЗаполнения" + ЭлементСтруктуры.Ключ].Очистить();
				
				Для Каждого ЭлементМассива Из ЭлементСтруктуры.Значение Цикл
					
					ТаблВарЗаполнения = ЭтаФорма["ТаблицаВариантыЗаполнения" + ЭлементСтруктуры.Ключ].Добавить().ТаблицаВариантовЗаполнения;
					
					ЗначениеВДанныеФормы(ЭлементМассива, ТаблВарЗаполнения);
					
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Восстанавливаем версию формы.
	СписокСохранения.Свойство("ВерсияФормы", ВерсияФормы);
	
	// Восстанавливаем сохраненные данные многострочных разделов.
	Если СписокСохранения.Свойство("ДанныеМногострочныхРазделов", ДанныеМногострочныхРазделов) И ДанныеМногострочныхРазделов <> Неопределено Тогда
		
		Для Каждого ЭлементСтруктуры Из ДанныеМногострочныхРазделов Цикл
			
			НайденноеЗначение = Неопределено;
			
			мСтруктураМногострочныхРазделов.Свойство(ЭлементСтруктуры.Ключ, НайденноеЗначение);
			
			Если НЕ НайденноеЗначение = Неопределено Тогда
				
				ЗначениеВДанныеФормы(ЭлементСтруктуры.Значение, ЭтаФорма[НайденноеЗначение]);
				
				ВывестиРазделВТабличныйДокументНаСервере(НайденноеЗначение, ЭтаФорма[НайденноеЗначение]);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	// Восстановим сохраненные данные редактируемых ячеек.
	СписокСохранения.Свойство( "ПоказателиОтчета", ПоказателиОтчета );
	РегламентированнаяОтчетность.ВосстановитьДанныеРасшифровкиСтатистическогоОтчета(ЭтаФорма, СписокСохранения);
	
	ВосстановитьДанныеОтчетаСтарогоОбразца(ПоказателиОтчета);
	
	Для Каждого ПоказателиСтраницы Из ПоказателиОтчета Цикл
		ИмяТекТабличноеПоле = ПоказателиСтраницы.Ключ;
		ТекТабличноеПоле    = ЭтаФорма[ИмяТекТабличноеПоле];
		ПоказателиТаблПоле  = ПоказателиСтраницы.Значение;
		
		Для Каждого Показатель Из ПоказателиТаблПоле Цикл
			ИмяПоказателя       = Показатель.Ключ;
			ЗначениеПоказателя  = Показатель.Значение;
			
			// Установим значение в таблице.
			Попытка
				Если Лев(ИмяПоказателя, 2) = "ЧН" Тогда
					// Значение показателя с префиксом "ЧН" содержит формат представления нуля.
					ОбластьПоказателя = ТекТабличноеПоле.Области[Сред(ИмяПоказателя, 3)];
					ОбластьПоказателя.Формат = РегламентированнаяОтчетностьКлиентСервер.ЗаменитьПредставлениеНуляВСтрокеФормата(ОбластьПоказателя.Формат, ЗначениеПоказателя);
					Продолжить;
				КонецЕсли;
				ТекТабличноеПоле.Области[ИмяПоказателя].Значение = ЗначениеПоказателя;
			Исключение
			КонецПопытки;
		КонецЦикла;
	КонецЦикла;
	
	СтруктураРеквизитовФормы.мАдресвФорматеДляВыгрузки = ПолеТабличногоДокументаФормаОтчета.Области.ОргАдрес.Значение;
	ПолеТабличногоДокументаФормаОтчета.Области.ОргАдрес.Значение = РегламентированнаяОтчетностьКлиентСервер.ПредставлениеАдресаВФормате9Запятых(СтруктураРеквизитовФормы.мАдресвФорматеДляВыгрузки);
	
	РегламентированнаяОтчетность.ОперацииПриВосстановленииРегламентированногоОтчета(ЭтаФорма);
	
	Модифицированность = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьДанныеОтчетаСтарогоОбразца(ПоказателиОтчета)
	
	ПоказателиТаблПоле = ПоказателиОтчета["ПолеТабличногоДокументаФормаОтчета"];
	
	// Если это показатели отчета нового образца, тогда выход из процедуры.
	Если ПоказателиТаблПоле.Свойство("П000202101_1") Тогда
		Возврат;
	КонецЕсли;
	
	СоответствиеПоказателей = Новый Соответствие;
	
	Для Каждого Показатель Из ПоказателиТаблПоле Цикл
		
		ИмяПоказателя = Показатель.Ключ;
		
		ПрефиксИмениПоказателя = "";
		ИмяПоказателяБезПрефикса = ИмяПоказателя;
		Если ВРег(Лев(ИмяПоказателя,2)) = "ЧН" Тогда
			ПрефиксИмениПоказателя = "ЧН";
			ИмяПоказателяБезПрефикса = Сред(ИмяПоказателя, 3);
		КонецЕсли;
		ЧастьПоказателя1 = Лев(ИмяПоказателяБезПрефикса, 6);
		ЧастьПоказателя2 = Сред(ИмяПоказателяБезПрефикса, 7, 2);
		ЧастьПоказателя3 = Сред(ИмяПоказателяБезПрефикса, 9);
		
		ИмяНовогоПоказателя = ИмяПоказателя;
		Если (ЧастьПоказателя1 = "П00020") И (ЧастьПоказателя2 >= "01" И ЧастьПоказателя2 <= "12") И (ЧастьПоказателя3 >= "01" И ЧастьПоказателя3 <= "06") Тогда
			ИмяНовогоПоказателя = ПрефиксИмениПоказателя + "П0002021" + ЧастьПоказателя3 + "_" + Формат(Число(ЧастьПоказателя2), "ЧГ=");
		ИначеЕсли (ЧастьПоказателя1 = "П00050") И (ЧастьПоказателя2 >= "01" И ЧастьПоказателя2 <= "11") Тогда
			Если ЧастьПоказателя3 >= "01" И ЧастьПоказателя3 <= "05" Тогда
				ИмяНовогоПоказателя = ПрефиксИмениПоказателя + "П0005001" + ЧастьПоказателя3 + "_" + Формат(Число(ЧастьПоказателя2), "ЧГ=");
			ИначеЕсли ЧастьПоказателя3 >= "06_1" И ЧастьПоказателя3 <= "06_3" Тогда
				ИмяНовогоПоказателя = ПрефиксИмениПоказателя + "П0005001" + Формат(Число(Прав(ЧастьПоказателя3, 1)) + 5, "ЧЦ=2; ЧВН=; ЧГ=") + "_" + Формат(Число(ЧастьПоказателя2), "ЧГ=");
			ИначеЕсли ЧастьПоказателя3 >= "07" И ЧастьПоказателя3 <= "10" Тогда
				ИмяНовогоПоказателя = ПрефиксИмениПоказателя + "П0005001" + Формат(Число(ЧастьПоказателя3) + 2, "ЧЦ=2; ЧВН=; ЧГ=") + "_" + Формат(Число(ЧастьПоказателя2), "ЧГ=");
			КонецЕсли
		КонецЕсли;
		
		Если ИмяНовогоПоказателя = ИмяПоказателя Тогда
			Продолжить;
		КонецЕсли;
		
		СоответствиеПоказателей.Вставить(ИмяПоказателя, ИмяНовогоПоказателя);
		
	КонецЦикла;
	
	Для Каждого ЭлементСоответствия Из СоответствиеПоказателей Цикл
		
		ПоказателиТаблПоле.Вставить(ЭлементСоответствия.Значение, ПоказателиТаблПоле[ЭлементСоответствия.Ключ]);
		ПоказателиТаблПоле.Удалить(ЭлементСоответствия.Ключ);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСведенияОбОрганизацииНаСервере(ВПрограммеИзмененаДатаПодписи = Ложь)
	
	РегламентированнаяОтчетностьКлиентСервер.ЗаполнитьСведенияОбОрганизацииДляОтчетаСтатистики(ЭтаФорма, ВПрограммеИзмененаДатаПодписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСведенияОбОрганизацииНаКлиенте(ВПрограммеИзмененаДатаПодписи = Ложь)
	
	РегламентированнаяОтчетностьКлиентСервер.ЗаполнитьСведенияОбОрганизацииДляОтчетаСтатистики(ЭтаФорма, ВПрограммеИзмененаДатаПодписи);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьОтчет(Команда)
	
	СохранитьНаКлиенте();
	
КонецПроцедуры

// СохранитьНаКлиенте
&НаКлиенте
Процедура СохранитьНаКлиенте(Автосохранение = Ложь, ВыполняемоеОповещение = Неопределено) Экспорт
	
	Вариант = СтруктураРеквизитовФормы.ВидДокумента * НомерКорректировки;
	
	Если НЕ РегламентированнаяОтчетностьКлиент.ПриЗаписиРегламентированногоОтчетаНаКлиенте(ЭтаФорма, , Автосохранение, Вариант) Тогда
		Возврат;
	КонецЕсли;
	
	ПодобныйОтчетСуществует = Ложь;
	ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки = Ложь;
	
	// формируем данные редактируемых ячеек таблицы
	ПоказателиОтчета = Новый Структура();
	
	#Если ВебКлиент Тогда
		ЗаполнитьПоказателиОтчетаНаСервере(ПоказателиОтчета);
	#Иначе
		ЗаполнитьПоказателиОтчетаНаКлиенте(ПоказателиОтчета);
	#КонецЕсли
	
	РезультатСохранения = ПередСохранением(, ПодобныйОтчетСуществует, Вариант, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, Автосохранение, ПоказателиОтчета);
	
	ВидДокументаНомерКорректировкиИзменен = Неопределено;
	
	Если ПодобныйОтчетСуществует И Автосохранение Тогда
		Возврат;
	КонецЕсли;
	
	НуженВопросПередСохранением = (ПодобныйОтчетСуществует ИЛИ ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки);
	
	Если НуженВопросПередСохранением Тогда
		СохранитьНаКлиентеСВопросом(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, ПодобныйОтчетСуществует, ПоказателиОтчета);
	Иначе		
		ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения);		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНаКлиентеСВопросом(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, ПодобныйОтчетСуществует, ПоказателиОтчета)
	
	Если ПодобныйОтчетСуществует Тогда
		
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(КодВозвратаДиалога.Да, "Сохранить");
		Кнопки.Добавить(КодВозвратаДиалога.Нет, "Отмена");
		
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Отчет с видом %1 уже существует.
		|Сохранить отчет с таким же видом?'"), ?(Вариант = 0, """Первичный""", """Корректирующий/" + Вариант + """"));
		ДополнительныеПараметры = Новый Структура("Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, ПоказателиОтчета", Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, ПоказателиОтчета);
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросСохранитьОтчетСТакимЖеВидомЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, Кнопки, , Кнопки.Получить(1).Значение);
		
	Иначе
		
		СохранитьНаКлиентеСВопросомПродолжение(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, ПоказателиОтчета);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросСохранитьОтчетСТакимЖеВидомЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	Автосохранение = ДополнительныеПараметры.Автосохранение;
	Вариант = ДополнительныеПараметры.Вариант;
	ВыполняемоеОповещение = ДополнительныеПараметры.ВыполняемоеОповещение;
	ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки = ДополнительныеПараметры.ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки;
	ПоказателиОтчета = ДополнительныеПараметры.ПоказателиОтчета;
	
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		
		Возврат;
		
	КонецЕсли;
	
	СохранитьНаКлиентеСВопросомПродолжение(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, ПоказателиОтчета);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНаКлиентеСВопросомПродолжение(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, ПоказателиОтчета)
	
	Если ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки Тогда
		
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("ВидОтчета", Вариант);
		
		ФормаВопроса = РегламентированнаяОтчетностьКлиент.ПолучитьОбщуюФормуПоИмени("ВопросПриИзмененииВидаДокументаНомераКорректировки", ПараметрыФормы);
		
		ДополнительныеПараметры = Новый Структура("Автосохранение, Вариант, ВыполняемоеОповещение, ПоказателиОтчета", Автосохранение, Вариант, ВыполняемоеОповещение, ПоказателиОтчета);
		ОписаниеОповещения = Новый ОписаниеОповещения("СохранитьНаКлиентеСВопросомПродолжениеЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		
		ФормаВопроса.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
		ФормаВопроса.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		ФормаВопроса.Открыть();
		
	Иначе
		Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Сохраняется %1...'"), ЭтаФорма.Заголовок), , , БиблиотекаКартинок.Записать);
		РезультатСохранения = Сохранить(Автосохранение, , Вариант, Ложь, ПоказателиОтчета);
		ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНаКлиентеСВопросомПродолжениеЗавершение(КодВозврата, ДополнительныеПараметры) Экспорт
	
	Автосохранение = ДополнительныеПараметры.Автосохранение;
	Вариант = ДополнительныеПараметры.Вариант;
	ВыполняемоеОповещение = ДополнительныеПараметры.ВыполняемоеОповещение;
	ПоказателиОтчета = ДополнительныеПараметры.ПоказателиОтчета;
	
	Если КодВозврата = КодВозвратаДиалога.Да
		ИЛИ КодВозврата = КодВозвратаДиалога.Нет Тогда
		
		ВидДокументаНомерКорректировкиИзменен = ?(КодВозврата = КодВозвратаДиалога.Да, Истина, Ложь);
		
	Иначе
		
		Возврат;
		
	КонецЕсли;
	
	Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Сохраняется %1...'"), ЭтаФорма.Заголовок), , , БиблиотекаКартинок.Записать);
	РезультатСохранения = Сохранить(Автосохранение, , Вариант, Ложь, ПоказателиОтчета);
	ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения)
	
	КлючУникальности = СтруктураРеквизитовФормы.мСохраненныйДок;
	
	Если РезультатСохранения Тогда
		
		РегламентированнаяОтчетностьКлиент.ПослеЗаписиРегламентированногоОтчета(ЭтаФорма);
		
		Если ВыполняемоеОповещение <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ВыполняемоеОповещение);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры
// СохранитьНаКлиенте

// ПередСохранением()
//
&НаСервере
Функция ПередСохранением(КодИФНС = "не применимо", ПодобныйОтчетСуществует="", Вариант="", ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки="", Автосохранение="", ПоказателиОтчета="")
	
	Если РегламентированнаяОтчетность.БылиИзмененыКлючевыеРеквизитыОтчета(ЭтаФорма, КодИФНС)
		И РегламентированнаяОтчетность.СуществуетДокументСАналогичнымиРеквизитами(ЭтаФорма, КодИФНС) Тогда
		
		ПодобныйОтчетСуществует = Истина;
		
	КонецЕсли;
	
	СтруктураРеквизитовФормы.мЗаписываетсяНовыйДокумент = (СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено ИЛИ СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено);
	
	Если Вариант <> Неопределено И ((СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено) ИЛИ (СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено) ИЛИ (Вариант <> СтруктураРеквизитовФормы.мВариант)) Тогда
		
		Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено ИЛИ СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено Тогда
			
		ИначеЕсли Вариант <> СтруктураРеквизитовФормы.мВариант Тогда
			
			ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПодобныйОтчетСуществует
		ИЛИ ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Возврат Сохранить(Автосохранение, КодИФНС, Вариант, , ПоказателиОтчета);
	
КонецФункции

// Формирует структуру данных отчета и помещает в реквизит типа ХранилищеЗначения
// документа РегламентированныйОтчет.
// 
// При первом сохранении данных отчета создает новый документ этого вида.
// Структура данных отчета состоит из элементов:
//   - значения редактируемых реквизитов отчета;
//   - данные по многострочным разделам отчета;
//   - данные по  многостраничным разделам отчета;
//   - данные по вариантам заполнения реквизитов,
//     участвующих в автозаполнении.
//
&НаСервере
Функция Сохранить(Автосохранение = Ложь, КодИФНС = "не применимо", Вариант = Неопределено, ВидДокументаНомерКорректировкиИзменен = Неопределено, ПоказателиОтчета = Неопределено) Экспорт
	
	ДанныеДляРазблокирования = Неопределено;
	
	Если НЕ СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
		Если НЕ СтруктураРеквизитовФормы.мБезОткрытияФормы Тогда
			ДанныеДляРазблокирования = Новый Структура("Ключ,ИдФормы",
			СтруктураРеквизитовФормы.мСохраненныйДок, ЭтаФорма.УникальныйИдентификатор);
		КонецЕсли;
		СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.ПолучитьОбъект();
	КонецЕсли;
	
	Если НЕ РегламентированнаяОтчетность.ПриЗаписиРегламентированногоОтчетаНаСервере(ЭтаФорма, КодИФНС, Автосохранение, Вариант, ВидДокументаНомерКорректировкиИзменен, СтруктураРеквизитовФормы.мСохраненныйДок) Тогда
		СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
		Возврат Ложь;
	КонецЕсли;
	
	// Установим текущие значения реквизитов документа.
	СтруктураРеквизитовФормы.мСохраненныйДок.ИсточникОтчета           = Метаданные.Отчеты[Сред(Лев(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, ".Форма.") - 1), 7)].Имя;
	СтруктураРеквизитовФормы.мСохраненныйДок.НаименованиеОтчета       = Метаданные.Отчеты[Сред(Лев(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, ".Форма.") - 1), 7)].ОсновнаяФорма.Синоним;
	СтруктураРеквизитовФормы.мСохраненныйДок.ДатаНачала               = СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета;
	СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания            = СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета;
	СтруктураРеквизитовФормы.мСохраненныйДок.Периодичность            = СтруктураРеквизитовФормы.мПериодичность;
	СтруктураРеквизитовФормы.мСохраненныйДок.ВыбраннаяФорма           = СтруктураРеквизитовФормы.мВыбраннаяФорма;
	СтруктураРеквизитовФормы.мСохраненныйДок.Организация              = СтруктураРеквизитовФормы.Организация;
	СтруктураРеквизитовФормы.мСохраненныйДок.ДатаПодписи              = ДатаПодписи;
	СтруктураРеквизитовФормы.мСохраненныйДок.ЕдиницаИзмерения         = Неопределено;
	СтруктураРеквизитовФормы.мСохраненныйДок.ТочностьЕдиницыИзмерения = СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения;
	СтруктураРеквизитовФормы.мСохраненныйДок.ВидОтчетности            = Перечисления.ВидыОтчетности.РегламентированнаяОтчетность;
	СтруктураРеквизитовФормы.мСохраненныйДок.Вид                      = Вариант;
	СтруктураРеквизитовФормы.мСохраненныйДок.ПредставлениеВида        = РегламентированнаяОтчетность.ПредставлениеВидаДокумента(СтруктураРеквизитовФормы.мСохраненныйДок.Вид);
	СтруктураРеквизитовФормы.мСохраненныйДок.Комментарий              = Комментарий;
	
	СтруктураРеквизитовФормы.мВариант = Вариант;
	
	// Формируем список сохранения.
	СписокСохранения = Новый Структура();
	
	// Вставляем данные редактируемых ячеек таблицы.
	СписокСохранения.Вставить("ПоказателиОтчета", ПоказателиОтчета);
	РегламентированнаяОтчетность.СохранитьДанныеРасшифровкиСтатистическогоОтчета(ЭтаФорма, СписокСохранения);
	
	// Вставляем данные многострочных разделов.
	ДанныеМногострочныхРазделов = Новый Структура;
	
	Для Каждого ЭлементСтруктуры Из мСтруктураМногострочныхРазделов Цикл
		
		ДанныеМногострочныхРазделов.Вставить(ЭлементСтруктуры.Ключ, ДанныеФормыВЗначение(ЭтаФорма[ЭлементСтруктуры.Значение], Тип("ТаблицаЗначений")));
		
	КонецЦикла;
	
	СписокСохранения.Вставить("ДанныеМногострочныхРазделов", ДанныеМногострочныхРазделов);
	
	// Вставляем данные вариантов автозаполнения ячеек.
	СписокСохранения.Вставить("ДанныеВариантовАвтоЗаполнения", Неопределено);
	
	// Вствляем версию формы.
	СписокСохранения.Вставить("ВерсияФормы", СтруктураРеквизитовФормы.мВерсияФормы);
	
	ХранилищеДанных = Новый ХранилищеЗначения(СписокСохранения);
	СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета = ХранилищеДанных;
	
	// Записываем документ, хранящий данные отчета.
	Попытка
		СтруктураРеквизитовФормы.мСохраненныйДок.Записать();
		РегламентированнаяОтчетность.СохранитьСтатусОтправкиРеглОтчета(ЭтаФорма);
	Исключение
		
		Если НЕ Автосохранение Тогда
			
			Сообщение = Новый СообщениеПользователю;
			
			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), РегламентированнаяОтчетностьКлиентСервер.СформироватьТекстСообщения(ОписаниеОшибки()));
			
			Сообщение.Сообщить();
			
		КонецЕсли;
		
		СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
		
		Возврат Ложь;
		
	КонецПопытки;
	
	Модифицированность   = Ложь;
	
	СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
	
	Если НЕ СтруктураРеквизитовФормы.мБезОткрытияФормы
       И НЕ СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
				   
    	ЗаблокироватьДанныеДляРедактирования(СтруктураРеквизитовФормы.мСохраненныйДок, , ЭтаФорма.УникальныйИдентификатор);

    КонецЕсли;
	
	Если ДанныеДляРазблокирования <> Неопределено Тогда
		РазблокироватьДанныеДляРедактирования(ДанныеДляРазблокирования.Ключ, ДанныеДляРазблокирования.ИдФормы);
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Функция СобратьДанныеТекущегоТаблПоляНаКлиенте(ИмяТабличногоПоля) Экспорт
	
	Возврат РегламентированнаяОтчетностьКлиентСервер.СобратьДанныеТекущегоТаблПоля(ЭтаФорма, ИмяТабличногоПоля);
	
КонецФункции

&НаСервере
Функция СобратьДанныеТекущегоТаблПоляНаСервере(ИмяТабличногоПоля) Экспорт
	
	Возврат РегламентированнаяОтчетностьКлиентСервер.СобратьДанныеТекущегоТаблПоля(ЭтаФорма, ИмяТабличногоПоля);
	
КонецФункции

&НаСервере
Процедура ЗаполнитьПоказателиОтчетаНаСервере(ПоказателиОтчета)
	
	Префикс = "ПолеТабличногоДокумента";
	
	Для Каждого Группа из Элементы.Страницы.ПодчиненныеЭлементы Цикл
		
		Для Каждого ЭлементГруппы Из Группа.ПодчиненныеЭлементы Цикл 
			
			Если СтрЧислоВхождений(ЭлементГруппы.Имя, Префикс) = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			ПоказателиОтчета.Вставить(ЭлементГруппы.Имя, СобратьДанныеТекущегоТаблПоляНаСервере(ЭлементГруппы.Имя));
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоказателиОтчетаНаКлиенте(ПоказателиОтчета)
	
	Префикс = "ПолеТабличногоДокумента";
	
	Для Каждого Группа из Элементы.Страницы.ПодчиненныеЭлементы Цикл
		
		Для Каждого ЭлементГруппы Из Группа.ПодчиненныеЭлементы Цикл 
			
			Если СтрЧислоВхождений(ЭлементГруппы.Имя, Префикс) = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			ПоказателиОтчета.Вставить(ЭлементГруппы.Имя, СобратьДанныеТекущегоТаблПоляНаКлиенте(ЭлементГруппы.Имя));
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УдалитьДополнительнуюСтроку(Форма, СпециальноеДобавление = Ложь, ИмяКолонкиНомера = Неопределено, ТекущаяСтраница = Неопределено) Экспорт
	
	Перем ИсходноеКоличествоСтрокГруппы;
	Перем СтруктураГруппы;
	
	// Сначала выполним проверку на активную страницу панели формы,
	// которая содержит многострочный раздел.
	#Если НаКлиенте Тогда
		ИмяГруппы = Форма.ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаКлиенте(ТекущаяСтраница);
	#Иначе
		ИмяГруппы = Форма.ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ТекущаяСтраница);
	#КонецЕсли
	
	// Исходное количество строк группы.
	Форма.мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);
	
	Форма.мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);
	
	ТекТабличноеПолеИмя = "ПолеТабличногоДокументаФормаОтчета";
	
	ТекТабличноеПоле = Форма[ТекТабличноеПолеИмя];
	ТекущаяОбласть = Форма.Элементы[ТекТабличноеПолеИмя].ТекущаяОбласть;
	ИмяЯчейки      = ТекущаяОбласть.Имя;
	
	ИмяГруппы = РегламентированнаяОтчетностьКлиентСервер.РазделТекущейОбласти(Форма, ТекущаяОбласть);
	
	// Предварительно обновим структуру многострочных разделов.
	ОбновитьСтруктуруМногострочногоРаздела(Форма, ИмяГруппы);
	
	// Номер строки многострочного раздела определим
	// по имени выделенной ячейки.
	НомУдаляемойСтроки = Число( Сред( ИмяЯчейки, СтрНайти( ИмяЯчейки, "_") + 1));
	НомерСтрокиТаблицы = НомУдаляемойСтроки - 1; // нумерация строк в таблице значений начинается с нуля
	СтруктураГруппы = Форма[СтруктураГруппы];
	Если СтруктураГруппы.Количество() > ИсходноеКоличествоСтрокГруппы Тогда
		// Удаляется добавленная строка.
		ИмяПервойЯчейкиУдаляемойСтроки = ИмяГруппы + "01_" + НомУдаляемойСтроки;
		
		// Область первой ячейки удаляемой строки многострочного раздела.
		ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяПервойЯчейкиУдаляемойСтроки];
		
		// Номера строк удаляемой области.
		НомерВерхЯчейкиОбласти = ОбластьЯчейки.Верх;
		НомерНижнЯчейкиОбласти = ОбластьЯчейки.Верх;
		
		РегламентированнаяОтчетностьВызовСервера.СпециальногоУдаленияСтроки(ТекТабличноеПоле, ТекТабличноеПолеИмя, ИмяГруппы, НомерВерхЯчейкиОбласти, НомерНижнЯчейкиОбласти);
		
		Форма[ТекТабличноеПолеИмя] = ТекТабличноеПоле;
		
		КолвоСдвигаемыхСтрок = СтруктураГруппы.Количество() - НомУдаляемойСтроки;
		
		// Обновим имена ячеек сдвинутых строк.
		Если КолвоСдвигаемыхСтрок > 0 Тогда
			
			Для НСтр = НомУдаляемойСтроки + 1 По СтруктураГруппы.Количество() Цикл
				
				ТекСтрока = СтруктураГруппы[НСтр-1];
				
				Для НомерГрафы = 1 По Форма.мСтруктураКолвоКолонокРазделов[ИмяГруппы] Цикл
					
					КолонкаИмя = ИмяГруппы + Формат(НомерГрафы, "ЧЦ=2; ЧВН=");
					
					Если СтруктураГруппы[0].Свойство(КолонкаИмя) Тогда
						
						ИмяСдвинутойЯчейки = КолонкаИмя + "_" + НСтр;
						НовоеИмяСдвинутойЯчейки = КолонкаИмя + "_" + (НСтр - 1);
						
						ОбластьСдвинутойЯчейки     = ТекТабличноеПоле.Области[ИмяСдвинутойЯчейки];
						ОбластьСдвинутойЯчейки.Имя = НовоеИмяСдвинутойЯчейки;
						
						Если ОбластьСдвинутойЯчейки.СодержитЗначение <> Истина Тогда
							Если НЕ ПустаяСтрока(ТекСтрока[КолонкаИмя]) И ОбластьСдвинутойЯчейки.Имя <> "П000202102_1" Тогда
								// Обновляем порядковый номер строки.
								СтарыйНомер = Число(ТекСтрока[КолонкаИмя]);
								НовыйПорядковыйНомер = Строка(Макс(СтарыйНомер - 1, 0));
								ОбластьСдвинутойЯчейки.Текст = НовыйПорядковыйНомер;
								// Обновляем значение элемента таблицы значений.
								ТекСтрока[КолонкаИмя] = НовыйПорядковыйНомер;
							КонецЕсли; 
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
				
			КонецЦикла;
		КонецЕсли;
		
		// Обновляем структуру многострочного раздела.
		СтруктураГруппы.Удалить(НомерСтрокиТаблицы);
		
	Иначе
		// Строка не удаляется в форме табличного документа,
		// должен осуществляться сдвиг строк.
		// Обновляем структуру многострочного раздела
		// методом удаления выбранной строки и добавления пустой строки.
		СтруктураГруппы.Удалить(НомерСтрокиТаблицы);
		
		ДобавляемаяСтрока = СтруктураГруппы.Добавить();
		
		// Обновляем порядковые номера строк, выводимых в табличный документ.
		Для Каждого СтрокаТаблицы Из СтруктураГруппы Цикл
			
			НомерСтрокиВТаблице = СтруктураГруппы.Индекс(СтрокаТаблицы);
			НомерСтрокиВФормеТаблицы = Формат(НомерСтрокиВТаблице + 1, "ЧГ=0");
			
			Для НомерГрафы = 1 По Форма.мСтруктураКолвоКолонокРазделов[ИмяГруппы] Цикл
				КолонкаТаблицыИмя = ИмяГруппы + Формат(НомерГрафы, "ЧЦ=2; ЧВН=");
				
				Если СтруктураГруппы[0].Свойство(КолонкаТаблицыИмя) Тогда
					
					ИмяЯчейки                = КолонкаТаблицыИмя + "_" + НомерСтрокиВФормеТаблицы;
					ОбластьЯчейкиТаблицы     = ТекТабличноеПоле.Области[ИмяЯчейки];
					
					Если ОбластьЯчейкиТаблицы.СодержитЗначение <> Истина Тогда
						
						ПервыйНомерВГруппе = 21;
						
						// Обновляем порядковый номер строки.
						НовыйПорядковыйНомер = Строка(ПервыйНомерВГруппе + НомерСтрокиВТаблице);
						
						СтрокаТаблицы[КолонкаТаблицыИмя] = НовыйПорядковыйНомер;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		// Обновляем экранную форму табличного документа.
		#Если НаКлиенте Тогда
			Форма.ВывестиРазделВТабличныйДокументНаКлиенте(ИмяГруппы, СтруктураГруппы);
		#Иначе
			Форма.ВывестиРазделВТабличныйДокументНаСервере(ИмяГруппы, СтруктураГруппы);
		#КонецЕсли
		
	КонецЕсли;
	
	// Назначим текущей областью таблицы первую редактируемую ячейку
	// удаленной строки, если ее порядковый номер меньше кол-ва строк
	// многострочного раздела, или последней строки раздела в противном случае.
	
	// Определяем текущую область таблицы.
	НомТекущейСтроки  = Мин( НомУдаляемойСтроки, СтруктураГруппы.Количество() );
	ИмяТекущейОбласти = ИмяГруппы + "01_" + НомТекущейСтроки;
	
	Форма.Элементы[ТекТабличноеПолеИмя].ТекущаяОбласть = ТекТабличноеПоле.Области[ИмяТекущейОбласти];
	
	// Установим фокус на поле табличн. документа.
	ТекущийЭлемент = Форма.Элементы[ТекТабличноеПолеИмя];
	
	Форма.Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Функция ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаКлиенте(ИмяЛиста = Неопределено) Экспорт
	
	ИдГрупп = Новый Структура;
	
	Возврат ОпределитьИдМногострочногоРазделаПоАктивнойСтранице(ЭтаФорма, ИмяЛиста, ИмяЛиста, ИдГрупп);
	
КонецФункции

&НаСервере
Функция ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ИмяЛиста = Неопределено) Экспорт
	
	ИдГрупп = Новый Структура;
	
	Возврат ОпределитьИдМногострочногоРазделаПоАктивнойСтранице(ЭтаФорма, ИмяЛиста, ИмяЛиста, ИдГрупп);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ОпределитьИдМногострочногоРазделаПоАктивнойСтранице(Форма, ИмяЛиста = Неопределено, ТекущаяСтраница = Неопределено, ИдГрупп = Неопределено)
	
	Перем ИмяГруппы;
	
	Если ИмяЛиста = Неопределено Тогда
		ИмяТекущейСтраницыПанели = ТекущаяСтраница.Имя;
	Иначе
		ИмяТекущейСтраницыПанели = ИмяЛиста;
	КонецЕсли;
	
	Если ИмяТекущейСтраницыПанели = "ФормаОтчета" Тогда
		
		ИмяГруппы = РегламентированнаяОтчетностьКлиентСервер.РазделТекущейОбласти(Форма, Форма.Элементы.ПолеТабличногоДокументаФормаОтчета.ТекущаяОбласть);
		
	КонецЕсли;
	
	Возврат ИмяГруппы;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьСтруктуруМногострочногоРаздела(Форма, ИмяГруппы) Экспорт
	
	Перем СтруктураГруппы;
	
	Форма.мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);
	
	СтруктураГруппы = Форма[СтруктураГруппы];
	
	ТекТабличноеПолеИмя = "ПолеТабличногоДокументаФормаОтчета";
	
	ТекТабличноеПоле = Форма[ТекТабличноеПолеИмя];
	
	Для НСтр = 1 По СтруктураГруппы.Количество() Цикл
		ТекСтрокаТаблицы = СтруктураГруппы[НСтр - 1];
		НСтрСтр = Формат(НСтр, "ЧГ=0");
		
		Для НомерГрафы = 1 По Форма.мСтруктураКолвоКолонокРазделов[ИмяГруппы] Цикл
			
			ИмяКолонки = ИмяГруппы + Формат(НомерГрафы, "ЧЦ=2; ЧВН=");
			
			Если СтруктураГруппы[0].Свойство(ИмяКолонки) Тогда
				
				ИмяЯчейки     = ИмяКолонки + "_" + НСтрСтр;
				ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяЯчейки];
				
				Если ОбластьЯчейки.СодержитЗначение = Истина Тогда
					ЗначениеЯчейки = ОбластьЯчейки.Значение;
				Иначе
					ЗначениеЯчейки = ОбластьЯчейки.Текст;
				КонецЕсли;
				
				ТекСтрокаТаблицы[ИмяКолонки] = ЗначениеЯчейки;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиРазделВТабличныйДокументНаСервере(ИмяГруппы, СтруктураГруппы) Экспорт
	
	ВывестиРазделВТабличныйДокумент(ЭтаФорма, ИмяГруппы, СтруктураГруппы);
	
КонецПроцедуры

&НаКлиенте
Процедура ВывестиРазделВТабличныйДокументНаКлиенте(ИмяГруппы, СтруктураГруппы) Экспорт
	
	ВывестиРазделВТабличныйДокумент(ЭтаФорма, ИмяГруппы, СтруктураГруппы);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ВывестиРазделВТабличныйДокумент(Форма, ИмяГруппы, СтруктураГруппы)
	
	Перем ИсходноеКоличествоСтрокГруппы;
	
	// Определим исходное колво строк многострочного раздела,
	// соответствующее бумажной форме отчета.
	Форма.мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);
	
	// реальное кол-во строк (колво заполненных строк)
	ТекущееКоличествоСтрокГруппы = СтруктураГруппы.Количество();
	
	ТекТабличноеПолеИмя = "ПолеТабличногоДокументаФормаОтчета";
	
	ТекТабличноеПоле = Форма[ТекТабличноеПолеИмя];
	
	// При восстановлении сохраненных данных отчета сравниваем исходное кол-во
	// отображаемых в форме строк многострочного раздела с реальным количеством
	// созданных строк в сохраненном отчете.
	Если ТекущееКоличествоСтрокГруппы > ИсходноеКоличествоСтрокГруппы Тогда
		
		РегламентированнаяОтчетностьКлиентСервер.ДобавитьНеобходимоеКоличествоДопСтрок(Форма, ТекТабличноеПоле, ТекТабличноеПолеИмя, ИсходноеКоличествоСтрокГруппы, ТекущееКоличествоСтрокГруппы, ИмяГруппы, СтруктураГруппы);
		
		Форма[ТекТабличноеПолеИмя] = ТекТабличноеПоле;
		
	КонецЕсли;
	
	ТекТабличноеПоле = Форма[ТекТабличноеПолеИмя];
	
	// Выводим значения строк.
	Для Каждого СтрокаТаблицы Из СтруктураГруппы Цикл
		
		Для НомерГрафы = 1 По Форма.мСтруктураКолвоКолонокРазделов[ИмяГруппы] Цикл
			
			КолонкаТаблицыИмя = ИмяГруппы + Формат(НомерГрафы, "ЧЦ=2; ЧВН=");
			
			Если СтруктураГруппы[0].Свойство(КолонкаТаблицыИмя) Тогда
				
				НомерСтрокиВТаблице      = СтруктураГруппы.Индекс(СтрокаТаблицы);
				НомерСтрокиВФормеТаблицы = НомерСтрокиВТаблице + 1;
				ИмяЯчейки                = КолонкаТаблицыИмя + "_" + НомерСтрокиВФормеТаблицы;
				ОбластьЯчейкиТаблицы     = ТекТабличноеПоле.Области[ИмяЯчейки];
				ЗначениеЯчейки           = СтрокаТаблицы[КолонкаТаблицыИмя];
				
				Если ОбластьЯчейкиТаблицы.СодержитЗначение Тогда
					// Задаем значение ячейки.
					ОбластьЯчейкиТаблицы.Значение = ЗначениеЯчейки;
				Иначе
					ОбластьЯчейкиТаблицы.Текст    = ЗначениеЯчейки;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если СтрНайти(Заголовок, СтруктураРеквизитовФормы.СтрПериодОтчета) = 0 Тогда
		Заголовок = Заголовок + " за " + СтруктураРеквизитовФормы.СтрПериодОтчета;
	КонецЕсли;
	
	ОргСтр = " (" + СтруктураРеквизитовФормы.НаимОрганизации + ")";
	Если СтрНайти(Заголовок, ОргСтр) = 0 Тогда
		Заголовок = Заголовок + ОргСтр;
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("ВыполнитьПроверкуПередОткрытием", 0.1, Истина);

КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПроверкуПередОткрытием()
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПриОткрытииЗавершение", ЭтотОбъект);
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередОткрытиемФормыРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытииЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Модифицированность = Ложь;
		Закрыть();
		Возврат;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	РегламентированнаяОтчетностьКлиент.ПередЗакрытиемРегламентированногоОтчета(ЭтаФорма, Отказ, СтандартнаяОбработка, ЗавершениеРаботы, ТекстПредупреждения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ЗавершениеРаботы Тогда
				
		Возврат;
		
	КонецЕсли;
	
	ПриЗакрытииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПриЗакрытииНаСервере()
	
	РегламентированнаяОтчетность.ПриЗакрытииРегламентированногоОтчета(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолеТабличногоДокументаФормаОтчетаВыбор(Элемент, Область, СтандартнаяОбработка)
	
	Если Область.Защита = Истина Тогда
		Возврат;
	Конецесли;
	
	Если Область.Имя = "ОргАдрес" Тогда
		РегламентированнаяОтчетностьКлиент.ОбработкаАдресаВСтатистическомОтчете(ЭтаФорма, Область, СтандартнаяОбработка);
	Иначе
		
		Если Лев(Область.Имя, 13) = "П000001000103" Или Лев(Область.Имя, 13) = "П000003000103" Тогда
			ПараметрВводаПоля = РегламентированнаяОтчетностьКлиентСервер.НайтиСвойстваПоказателя(ЭтаФорма, Область.Имя);
		Иначе
			ПараметрВводаПоля = РегламентированнаяОтчетностьКлиентСервер.НайтиСвойстваПоказателя(ЭтаФорма, Лев(Область.Имя, 13));
		КонецЕсли;
		
		Если ПараметрВводаПоля <> Неопределено И ПараметрВводаПоля.ТаблицаЗначений <> Неопределено Тогда
			
			СтандартнаяОбработка = Ложь;
			
			КолонкаПоиска = "Код";
			КодПоказателя = ПараметрВводаПоля.Показатель;
			
			КопироватьДанныеФормы(ПараметрВводаПоля.ТаблицаЗначений, ТЗВыбора);
			
			НовСтрТЗ = ТЗВыбора.Вставить(0);
			НовСтрТЗ.Код = "";
			НовСтрТЗ.Название = "Пустое значение";
			
			ВвестиПоказатель(Элемент, Область, КодПоказателя, Ложь, ПараметрВводаПоля.ТекстПриВыборе, ТЗВыбора, СтандартнаяОбработка, КолонкаПоиска);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуКонтактнойИнформацииЗавершение(Результат, Параметры) Экспорт
	
	РегламентированнаяОтчетностьКлиент.ОбновитьАдресВТабличномДокументеСтатистическойОтчетности(Результат, Параметры.Область, СтруктураРеквизитовФормы);
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолеТабличногоДокументаФормаОтчетаПриИзмененииСодержимогоОбласти(Элемент, Область)
	
	Если Область.Имя = "ДатаСоставленияОтчета" Тогда 
		ДатаПодписи = Область.Значение;
		ЗаполнитьСведенияОбОрганизацииНаКлиенте(Истина);
		Модифицированность = Истина;
		Возврат;
	ИначеЕсли Область.Имя = "НомерКорректировки" Тогда 
		Если Область.Значение = 0 Тогда 
			СтруктураРеквизитовФормы.ВидДокумента = 0;
			НомерКорректировки = 0;
		Иначе 
			СтруктураРеквизитовФормы.ВидДокумента = 1;
			НомерКорректировки = Область.Значение;
		КонецЕсли;
		Модифицированность = Истина;
		Возврат;
	КонецЕсли;
	
	Если Область.СодержитЗначение И Область.ТипЗначения.СодержитТип(Тип("Число")) Тогда
		Если Область.Значение = 0 И Область.ТипЗначения.КвалификаторыЧисла.РазрядностьДробнойЧасти = 0 Тогда
			
			ФорматПредставленияНуля = РегламентированнаяОтчетностьКлиентСервер.ПолучитьПредставлениеНуляИзСтрокиФормата(Область.Формат);
			
			ОтображениеНуля = СокрЛП(Формат(0, РегламентированнаяОтчетностьКлиентСервер.ЗаменитьПредставлениеНуляВСтрокеФормата(Область.Формат, "ЧН=")));
			Если ПустаяСтрока(ОтображениеНуля) Тогда
				ОтображениеНуля = "0";
			КонецЕсли;
			ТипСтрокиЗаполнения = Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(СтрДлина(ОтображениеНуля), ДопустимаяДлина.Фиксированная));
			СтрокаЗаполнения = ТипСтрокиЗаполнения.ПривестиЗначение();
			
			Список = Новый СписокЗначений;
			Список.Добавить("ЧН=' '", "  <Пустое значение>    " + СтрокаЗаполнения);
			Список.Добавить("ЧН=" + ОтображениеНуля, "  Отображать как """ + ОтображениеНуля + """  ");
			
			НайденнаяСтрока = Список.НайтиПоЗначению(ФорматПредставленияНуля);
			
			ДополнительныеПараметры = Новый Структура("Область", Область);
			ОписаниеОповещения = Новый ОписаниеОповещения("ПолеТабличногоДокументаФормаОтчетаПриИзмененииСодержимогоОбластиЗавершение", ЭтотОбъект, ДополнительныеПараметры);
						
			// обход ошибок платформы: в тонком клиенте не работает ПоказатьВыборИзСписка (ПоказатьВыборИзМеню не работает в веб-клиенте 
			// и в событии ПриИзмененииСодержимогоОбласти табличного документа - где мы его и хотим использовать прежде всего)
			# Если ВебКлиент Тогда
			
				Если НайденнаяСтрока = Неопределено Тогда
					ПоказатьВыборИзСписка(ОписаниеОповещения, Список, Элемент);
				Иначе
					ПоказатьВыборИзСписка(ОписаниеОповещения, Список, Элемент, НайденнаяСтрока);
				КонецЕсли;
				
			#Иначе
				
				Список.ПоказатьВыборЭлемента(ОписаниеОповещения, "Выберите значение", Элемент);
					
			#КонецЕсли
			
			Возврат;
			
		КонецЕсли;
	КонецЕсли;
	
	ПолеТабличногоДокументаФормаОтчетаПриИзмененииСодержимогоОбластиПродолжение(Область);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолеТабличногоДокументаФормаОтчетаПриИзмененииСодержимогоОбластиЗавершение(СписокЭлемент, ДополнительныеПараметры) Экспорт
	
	Область = ДополнительныеПараметры.Область;
	
	Если СписокЭлемент <> Неопределено  Тогда
		
		Область.Формат = РегламентированнаяОтчетностьКлиентСервер.ЗаменитьПредставлениеНуляВСтрокеФормата(Область.Формат, СписокЭлемент.Значение);
		
	КонецЕсли;
	
	ПолеТабличногоДокументаФормаОтчетаПриИзмененииСодержимогоОбластиПродолжение(Область);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолеТабличногоДокументаФормаОтчетаПриИзмененииСодержимогоОбластиПродолжение(Область)
	
	// Раздел I.
	Если Область.Имя = "П000001000101_1" Тогда
		ТекЗначБезПрефикса = СокрЛП(СтрЗаменить(СтрЗаменить(Область.Значение, "¶", ""), "Нежилые здания" + Символы.НПП, ""));
		Область.Значение = "Нежилые здания" + Символы.НПП + ?(ТекЗначБезПрефикса = "", "", Символы.ПС + ТекЗначБезПрефикса);
	ИначеЕсли Область.Имя = "П000001000101_5" Тогда
		ТекЗначБезПрефикса = СокрЛП(СтрЗаменить(СтрЗаменить(Область.Значение, "¶", ""), "Жилые здания" + Символы.НПП, ""));
		Область.Значение = "Жилые здания" + Символы.НПП + ?(ТекЗначБезПрефикса = "", "", Символы.ПС + ТекЗначБезПрефикса);
	ИначеЕсли Область.Имя = "П000001000101_9" Тогда
		ТекЗначБезПрефикса = СокрЛП(СтрЗаменить(СтрЗаменить(Область.Значение, "¶", ""), "Сооружения" + Символы.НПП, ""));
		Область.Значение = "Сооружения" + Символы.НПП + ?(ТекЗначБезПрефикса = "", "", Символы.ПС + ТекЗначБезПрефикса);
	ИначеЕсли Область.Имя = "П000001000101_14" Тогда
		ТекЗначБезПрефикса = СокрЛП(СтрЗаменить(СтрЗаменить(Область.Значение, "¶", ""), "Машины и оборудование" + Символы.НПП, ""));
		Область.Значение = "Машины и оборудование" + Символы.НПП + ?(ТекЗначБезПрефикса = "", "", Символы.ПС + ТекЗначБезПрефикса);
	ИначеЕсли Область.Имя = "П000001000101_21" Тогда
		ТекЗначБезПрефикса = СокрЛП(СтрЗаменить(СтрЗаменить(Область.Значение, "¶", ""), "Транспортные средства" + Символы.НПП, ""));
		Область.Значение = "Транспортные средства" + Символы.НПП + ?(ТекЗначБезПрефикса = "", "", Символы.ПС + ТекЗначБезПрефикса);
	ИначеЕсли Область.Имя = "П000001000101_25" Тогда
		ТекЗначБезПрефикса = СокрЛП(СтрЗаменить(СтрЗаменить(Область.Значение, "¶", ""), "Производственный и хозяйственный инвентарь" + Символы.НПП, ""));
		Область.Значение = "Производственный и хозяйственный инвентарь" + Символы.НПП + ?(ТекЗначБезПрефикса = "", "", Символы.ПС + ТекЗначБезПрефикса);
	ИначеЕсли Область.Имя = "П000001000101_28" Тогда
		ТекЗначБезПрефикса = СокрЛП(СтрЗаменить(СтрЗаменить(Область.Значение, "¶", ""), "Скот рабочий, продуктивный и племенной" + Символы.НПП, ""));
		Область.Значение = "Скот рабочий, продуктивный и племенной" + Символы.НПП + ?(ТекЗначБезПрефикса = "", "", Символы.ПС + ТекЗначБезПрефикса);
	ИначеЕсли Область.Имя = "П000001000101_32" Тогда
		ТекЗначБезПрефикса = СокрЛП(СтрЗаменить(СтрЗаменить(Область.Значение, "¶", ""), "Скот рабочий, продуктивный и племенной" + Символы.НПП, ""));
		Область.Значение = "Скот рабочий, продуктивный и племенной" + Символы.НПП + ?(ТекЗначБезПрефикса = "", "", Символы.ПС + ТекЗначБезПрефикса);
		// Раздел III.
	ИначеЕсли Область.Имя = "П000003000101_1" Тогда
		ТекЗначБезПрефикса = СокрЛП(СтрЗаменить(СтрЗаменить(Область.Значение, "¶", ""), "Исследования и разработки" + Символы.НПП, ""));
		Область.Значение = "Исследования и разработки" + Символы.НПП + ?(ТекЗначБезПрефикса = "", "", Символы.ПС + ТекЗначБезПрефикса);
	ИначеЕсли Область.Имя = "П000003000101_5" Тогда
		ТекЗначБезПрефикса = СокрЛП(СтрЗаменить(СтрЗаменить(Область.Значение, "¶", ""), "Геологоразведочные работы" + Символы.НПП, ""));
		Область.Значение = "Геологоразведочные работы" + Символы.НПП + ?(ТекЗначБезПрефикса = "", "", Символы.ПС + ТекЗначБезПрефикса);
	ИначеЕсли Область.Имя = "П000003000101_9" Тогда
		ТекЗначБезПрефикса = СокрЛП(СтрЗаменить(СтрЗаменить(Область.Значение, "¶", ""), "Компьютерное программное обеспечение" + Символы.НПП, ""));
		Область.Значение = "Компьютерное программное обеспечение" + Символы.НПП + ?(ТекЗначБезПрефикса = "", "", Символы.ПС + ТекЗначБезПрефикса);
	ИначеЕсли Область.Имя = "П000003000101_13" Тогда
		ТекЗначБезПрефикса = СокрЛП(СтрЗаменить(СтрЗаменить(Область.Значение, "¶", ""), "Оригинальные произведения развлекательного жанра, литературы или искусства" + Символы.НПП, ""));
		Область.Значение = "Оригинальные произведения развлекательного жанра, литературы или искусства" + Символы.НПП + ?(ТекЗначБезПрефикса = "", "", Символы.ПС + ТекЗначБезПрефикса);
	ИначеЕсли Область.Имя = "П000003000101_17" Тогда
		ТекЗначБезПрефикса = СокрЛП(СтрЗаменить(СтрЗаменить(Область.Значение, "¶", ""), "Наукоемкие промышленные технологии" + Символы.НПП, ""));
		Область.Значение = "Наукоемкие промышленные технологии" + Символы.НПП + ?(ТекЗначБезПрефикса = "", "", Символы.ПС + ТекЗначБезПрефикса);
	ИначеЕсли Область.Имя = "П000003000101_21" Тогда
		ТекЗначБезПрефикса = СокрЛП(СтрЗаменить(СтрЗаменить(Область.Значение, "¶", ""), "Прочие нематериальные основные фонды" + Символы.НПП, ""));
		Область.Значение = "Прочие нематериальные основные фонды" + Символы.НПП + ?(ТекЗначБезПрефикса = "", "", Символы.ПС + ТекЗначБезПрефикса);
	КонецЕсли;
	// Раздел III (изменение формата в "белых" ячейках по графе 3).
	Если Область.Имя = "П000003000101_1" Тогда
		Если Область.Значение = "Исследования и разработки" + Символы.НПП Тогда
			ПолеТабличногоДокументаФормаОтчета.Области["П000003000103_1"].Формат = РегламентированнаяОтчетностьКлиентСервер.ЗаменитьПредставлениеНуляВСтрокеФормата(Область.Формат, "ЧН=' '");
		Иначе
			ПолеТабличногоДокументаФормаОтчета.Области["П000003000103_1"].Формат = РегламентированнаяОтчетностьКлиентСервер.ЗаменитьПредставлениеНуляВСтрокеФормата(Область.Формат, "ЧН=0");
		КонецЕсли;
	ИначеЕсли Область.Имя = "П000003000101_2" Тогда
		Если СокрЛП(Область.Значение) = "" Тогда
			ПолеТабличногоДокументаФормаОтчета.Области["П000003000103_2"].Формат = РегламентированнаяОтчетностьКлиентСервер.ЗаменитьПредставлениеНуляВСтрокеФормата(Область.Формат, "ЧН=' '");
		Иначе
			ПолеТабличногоДокументаФормаОтчета.Области["П000003000103_2"].Формат = РегламентированнаяОтчетностьКлиентСервер.ЗаменитьПредставлениеНуляВСтрокеФормата(Область.Формат, "ЧН=0");
		КонецЕсли;
	ИначеЕсли Область.Имя = "П000003000101_3" Тогда
		Если СокрЛП(Область.Значение) = "" Тогда
			ПолеТабличногоДокументаФормаОтчета.Области["П000003000103_3"].Формат = РегламентированнаяОтчетностьКлиентСервер.ЗаменитьПредставлениеНуляВСтрокеФормата(Область.Формат, "ЧН=' '");
		Иначе
			ПолеТабличногоДокументаФормаОтчета.Области["П000003000103_3"].Формат = РегламентированнаяОтчетностьКлиентСервер.ЗаменитьПредставлениеНуляВСтрокеФормата(Область.Формат, "ЧН=0");
		КонецЕсли;
	ИначеЕсли Область.Имя = "П000003000101_4" Тогда
		Если СокрЛП(Область.Значение) = "" Тогда
			ПолеТабличногоДокументаФормаОтчета.Области["П000003000103_4"].Формат = РегламентированнаяОтчетностьКлиентСервер.ЗаменитьПредставлениеНуляВСтрокеФормата(Область.Формат, "ЧН=' '");
		Иначе
			ПолеТабличногоДокументаФормаОтчета.Области["П000003000103_4"].Формат = РегламентированнаяОтчетностьКлиентСервер.ЗаменитьПредставлениеНуляВСтрокеФормата(Область.Формат, "ЧН=0");
		КонецЕсли;
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура Обновить(Команда)
	
	СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация = Истина;
	ЗаполнитьСведенияОбОрганизацииНаКлиенте();
	СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьОтчет(Команда)
	
	ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Внимание! Отчет будет очищен.%1Продолжить операцию?'"), Символы.ПС);
	ОписаниеОповещения = Новый ОписаниеОповещения("ОчиститьОтчетЗавершение", ЭтотОбъект);
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьОтчетЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Нет Тогда       
		Возврат;       
	Иначе       
		Очистить();        
	КонецЕсли;
	
КонецПроцедуры

// Процедура очищает содержимое редактируемых и вычисляемых
// ячеек табличного документа.
//
&НаКлиенте
Процедура Очистить() Экспорт
	
	ОчиститьТабличноеПолеНаСервере();
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьТабличноеПолеНаСервере()
	
	// Список ячеек, которые очищать не нужно.
	Перем СписокПоказателейНеПодлежащихОчистке;
	
	ВыбТабличноеПоле = ПолеТабличногоДокументаФормаОтчета;
	
	СписокПоказателейНеПодлежащихОчистке = Новый СписокЗначений;
	СписокПоказателейНеПодлежащихОчистке.Добавить(ВыбТабличноеПоле.Области["ПериодОтчета"].Значение,             "ПериодОтчета");
	СписокПоказателейНеПодлежащихОчистке.Добавить(ВыбТабличноеПоле.Области["ДатаСоставленияОтчета"].Значение,    "ДатаСоставленияОтчета");
	СписокПоказателейНеПодлежащихОчистке.Добавить(ВыбТабличноеПоле.Области["ОргНазв"].Значение,                  "ОргНазв");
	СписокПоказателейНеПодлежащихОчистке.Добавить(ВыбТабличноеПоле.Области["ОргАдрес"].Значение,                 "ОргАдрес");
	СписокПоказателейНеПодлежащихОчистке.Добавить(ВыбТабличноеПоле.Области["ОргКодОКПО"].Значение,               "ОргКодОКПО");
	СписокПоказателейНеПодлежащихОчистке.Добавить(ВыбТабличноеПоле.Области["ОргКодНазв"].Значение,               "ОргКодНазв");
	СписокПоказателейНеПодлежащихОчистке.Добавить(ВыбТабличноеПоле.Области["ОргКодНазв1"].Значение,              "ОргКодНазв1");
	СписокПоказателейНеПодлежащихОчистке.Добавить(ВыбТабличноеПоле.Области["ОргКодЗнач"].Значение,               "ОргКодЗнач");
	СписокПоказателейНеПодлежащихОчистке.Добавить(ВыбТабличноеПоле.Области["ОргКодЗнач1"].Значение,              "ОргКодЗнач1");
	СписокПоказателейНеПодлежащихОчистке.Добавить(ВыбТабличноеПоле.Области["ОргДолжностьИсп"].Значение,          "ОргДолжностьИсп");
	СписокПоказателейНеПодлежащихОчистке.Добавить(ВыбТабличноеПоле.Области["ОргТелефонИсп"].Значение,            "ОргТелефонИсп");
	СписокПоказателейНеПодлежащихОчистке.Добавить(ВыбТабличноеПоле.Области["ОргИсполнитель"].Значение,           "ОргИсполнитель");
	СписокПоказателейНеПодлежащихОчистке.Добавить(ВыбТабличноеПоле.Области["ОргАдресЭлектроннойПочты"].Значение, "ОргАдресЭлектроннойПочты");
	СписокПоказателейНеПодлежащихОчистке.Добавить(ВыбТабличноеПоле.Области["НомерКорректировки"].Значение,       "НомерКорректировки");
	
	ВыбТабличноеПоле.Очистить();
	ВыбТабличноеПоле.Вывести(Отчеты[Сред(Лев(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, ".Форма.") - 1), 7)].ПолучитьМакет("ФормаОтчета2015Кв1_ФормаОтчета"));
	
	ПолеТабличногоДокументаФормаОтчета = ВыбТабличноеПоле;
	
	РегламентированнаяОтчетность.НачальныеОперацииСМногострочнымиБлоками(ЭтаФорма);
	
	Для каждого ЭлементСписка Из СписокПоказателейНеПодлежащихОчистке Цикл
		
		ВыбТабличноеПоле.Области[ЭлементСписка.Представление].Значение = ЭлементСписка.Значение;
		
	КонецЦикла;
	
	// Дополнительно, для Формы 11 (сделка).
	ДопИнициализацияВидовОсновныхФондов();
	
КонецПроцедуры

&НаКлиенте
Процедура АктивизироватьЯчейку(Ячейка) Экспорт
	
	ИмяПоляТабличногоДокумента = "ПолеТабличногоДокументаФормаОтчета";
	
	НайденнаяОбласть = ЭтаФорма[ИмяПоляТабличногоДокумента].Области.Найти(Ячейка.ИмяЯчейки);
	
	Если НЕ НайденнаяОбласть = Неопределено Тогда
		
		Элементы[ИмяПоляТабличногоДокумента].ТекущаяОбласть = НайденнаяОбласть;
		
	ИначеЕсли Ячейка.СтрокаПП <> Неопределено И ЗначениеЗаполнено(Ячейка.СтрокаПП) Тогда
		
		НайденнаяОбласть = ЭтаФорма[ИмяПоляТабличногоДокумента].Области.Найти(Ячейка.ИмяЯчейки + Ячейка.СтрокаПП);
		
		Если НЕ НайденнаяОбласть = Неопределено Тогда
			
			Элементы[ИмяПоляТабличногоДокумента].ТекущаяОбласть = НайденнаяОбласть;
			
		Иначе
			
			НайденнаяОбласть = ЭтаФорма[ИмяПоляТабличногоДокумента].Области.Найти(Ячейка.ИмяЯчейки + "_" + Ячейка.СтрокаПП);
			
			Если НЕ НайденнаяОбласть = Неопределено Тогда
				
				Элементы[ИмяПоляТабличногоДокумента].ТекущаяОбласть = НайденнаяОбласть;
				
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		НайденнаяОбласть = ЭтаФорма[ИмяПоляТабличногоДокумента].Области.Найти(Ячейка.ИмяЯчейки + "1");
		
		Если НЕ НайденнаяОбласть = Неопределено Тогда
			
			Элементы[ИмяПоляТабличногоДокумента].ТекущаяОбласть = НайденнаяОбласть;
			
		Иначе
			
			НайденнаяОбласть = ЭтаФорма[ИмяПоляТабличногоДокумента].Области.Найти(Ячейка.ИмяЯчейки + "_1");
			
			Если НЕ НайденнаяОбласть = Неопределено Тогда
				
				Элементы[ИмяПоляТабличногоДокумента].ТекущаяОбласть = НайденнаяОбласть;
				
			Иначе
				
				Элементы[ИмяПоляТабличногоДокумента].ТекущаяОбласть = ЭтаФорма[ИмяПоляТабличногоДокумента].Область(Ячейка.ИмяЯчейки);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьБланк(Команда)
	
	Отказ = Ложь;
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("Команда", Команда);
	ОписаниеОповещения = Новый ОписаниеОповещения("ПоказатьБланкЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередПечатьюРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьБланкЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;

	Команда = ДополнительныеПараметры.Команда;
		
	Если Команда <> Неопределено Тогда
		Печать(Команда.Имя);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Печать(ВидПечати, НеИзФормыОтчета = Ложь) Экспорт
	
	Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1. Формируется печатная форма...'"), ЭтаФорма.Заголовок), , , БиблиотекаКартинок.Печать);
	
	Если НЕ ПечатьНаСервере(ВидПечати) Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ОткрытьФормуПредварительногоПросмотра(ЭтаФорма, ВидПечати, Неопределено, СтруктураРеквизитовФормы.СписокПечатаемыхЛистов);
	
КонецПроцедуры

// Формирует структуру, используемую при выводе на печать
// "Заголовков" и "Подвалов" разделов отчета.
//
// Возвращаемое значение:
//  Структура - коллекция Структур разделов отчета.
//
&НаСервере
функция СтруктураРазделовДляОбработкиЗаголовковИПодвалов()
	
	СтруктураРазделов = Новый Структура;
	
	// Раздел IV.
	СтруктураРаздела = Новый Структура;
	СтруктураРаздела.Вставить("НомерСтрокиПоказателя",     8);                 // номер строки первого сверху показателя табл. части раздела
	СтруктураРаздела.Вставить("НомерКолонкиПоказателя",    2);                 // номер колонки первого слева показателя табл. части раздела
	СтруктураРаздела.Вставить("ПодстрокаПоискаПоказателя", "П000004000101");   // подстрока, идентифицирующая показатели конкретного раздела
	СтруктураРаздела.Вставить("Ограничители",              "Ограничители5");   // имя соотв. разделу секции макета
	СтруктураРаздела.Вставить("ПустаяСтрока",              "ПустаяСтрока5");   // имя соотв. разделу секции макета
	СтруктураРаздела.Вставить("УдаляемыйЗаголовок",        "ОсновнаяЧасть9а"); // имя соотв. разделу секции макета
	СтруктураРаздела.Вставить("ПереносимыйЗаголовок",      "ОсновнаяЧасть9б"); // имя соотв. разделу секции макета
	СтруктураРаздела.Вставить("ОриентацияСтраницы",        ОриентацияСтраницы.Ландшафт);
	
	СтруктураРазделов.Вставить("СтруктураРаздела4", СтруктураРаздела);
	
	// Раздел III.
	СтруктураРаздела = Новый Структура;
	СтруктураРаздела.Вставить("НомерСтрокиПоказателя",     7);
	СтруктураРаздела.Вставить("НомерКолонкиПоказателя",    2);
	СтруктураРаздела.Вставить("ПодстрокаПоискаПоказателя", "П000003000101");
	СтруктураРаздела.Вставить("Ограничители",              "Ограничители4");
	СтруктураРаздела.Вставить("ПустаяСтрока",              "ПустаяСтрока4");
	СтруктураРаздела.Вставить("УдаляемыйЗаголовок",        "ОсновнаяЧасть7а");
	СтруктураРаздела.Вставить("ПереносимыйЗаголовок",      "ОсновнаяЧасть7б");
	СтруктураРаздела.Вставить("ОриентацияСтраницы",        ОриентацияСтраницы.Ландшафт);
	
	СтруктураРазделов.Вставить("СтруктураРаздела3", СтруктураРаздела);
	
	// Раздел "Справочно".
	СтруктураРаздела = Новый Структура;
	СтруктураРаздела.Вставить("НомерСтрокиПоказателя",     0);
	СтруктураРаздела.Вставить("НомерКолонкиПоказателя",    0);
	СтруктураРаздела.Вставить("ПодстрокаПоискаПоказателя", "П000102000101");
	СтруктураРаздела.Вставить("Ограничители",              "");
	СтруктураРаздела.Вставить("ПустаяСтрока",              "");
	СтруктураРаздела.Вставить("УдаляемыйЗаголовок",        "ОсновнаяЧасть6а");
	СтруктураРаздела.Вставить("ПереносимыйЗаголовок",      "");
	СтруктураРаздела.Вставить("ОриентацияСтраницы",        "");
	
	СтруктураРазделов.Вставить("СтруктураРазделаСправочно", СтруктураРаздела);
	
	// Раздел II.
	СтруктураРаздела = Новый Структура;
	СтруктураРаздела.Вставить("НомерСтрокиПоказателя",     7);
	СтруктураРаздела.Вставить("НомерКолонкиПоказателя",    2);
	СтруктураРаздела.Вставить("ПодстрокаПоискаПоказателя", "П000002000101");
	СтруктураРаздела.Вставить("Ограничители",              "Ограничители2");
	СтруктураРаздела.Вставить("ПустаяСтрока",              "ПустаяСтрока2");
	СтруктураРаздела.Вставить("УдаляемыйЗаголовок",        "ОсновнаяЧасть4а");
	СтруктураРаздела.Вставить("ПереносимыйЗаголовок",      "ОсновнаяЧасть4б");
	СтруктураРаздела.Вставить("ОриентацияСтраницы",        ОриентацияСтраницы.Ландшафт);
	
	СтруктураРазделов.Вставить("СтруктураРаздела2", СтруктураРаздела);
	
	// Раздел I.
	СтруктураРаздела = Новый Структура;
	СтруктураРаздела.Вставить("НомерСтрокиПоказателя",     7);
	СтруктураРаздела.Вставить("НомерКолонкиПоказателя",    2);
	СтруктураРаздела.Вставить("ПодстрокаПоискаПоказателя", "П000001000101");
	СтруктураРаздела.Вставить("Ограничители",              "Ограничители1");
	СтруктураРаздела.Вставить("ПустаяСтрока",              "ПустаяСтрока1");
	СтруктураРаздела.Вставить("УдаляемыйЗаголовок",        "ОсновнаяЧасть2а");
	СтруктураРаздела.Вставить("ПереносимыйЗаголовок",      "ОсновнаяЧасть2б");
	СтруктураРаздела.Вставить("ОриентацияСтраницы",        ОриентацияСтраницы.Ландшафт);
	
	СтруктураРазделов.Вставить("СтруктураРаздела1", СтруктураРаздела);
	
	Возврат СтруктураРазделов;
	
КонецФункции

// Процедура позволяет для каждого раздела:
//  1) перенести "Подвал" на последнюю страницу (если "Подвал" не умещается - последняя строка
//     табличной части раздела вместе с "Подвалом" переносится на следующую страницу);
//  2) удалить повторяющиеся на страницах заголовки.
//
// Параметры:
//  СтруктураДляОбработки - структура, возвращаемая функцией СтруктураРазделовДляОбработки().
//
&НаСервере
Процедура ОбработатьВыводимыеЗаголовкиИПодвалыРазделов(СтруктураДляОбработки)
	
	Для Каждого СтруктураРаздела Из СтруктураДляОбработки Цикл
		
		ЗначСтруктуры = СтруктураРаздела.Значение;
		
		Если ЗначениеЗаполнено(ЗначСтруктуры.НомерСтрокиПоказателя) И ЗначениеЗаполнено(ЗначСтруктуры.НомерКолонкиПоказателя)
			И ЗначениеЗаполнено(ЗначСтруктуры.Ограничители) И ЗначениеЗаполнено(ЗначСтруктуры.ПустаяСтрока)
			И ЗначениеЗаполнено(ЗначСтруктуры.ПодстрокаПоискаПоказателя) И ЗначениеЗаполнено(ЗначСтруктуры.ПереносимыйЗаголовок)
			И ЗначениеЗаполнено(ЗначСтруктуры.ОриентацияСтраницы) Тогда
			// Вывод "Подвала" вместе с табличной частью раздела на одну страницу. Если "Подвал" не умещается,
			// последняя строка табличной части раздела вместе с "Подвалом" переносится на следующую страницу.
			ТекИндекс = СтруктураРеквизитовФормы.мПечатныеФормы.Количество() - 1;
			Пока ТекИндекс > 0 Цикл // перебор в обратном порядке элементов списка СтруктураРеквизитовФормы.мПечатныеФормы
				Попытка // попытка удалить область "Ограничители"
					СтруктураРеквизитовФормы.мПечатныеФормы[ТекИндекс].Значение.УдалитьОбласть(СтруктураРеквизитовФормы.мПечатныеФормы[ТекИндекс].Значение.Области[ЗначСтруктуры.Ограничители], ТипСмещенияТабличногоДокумента.ПоВертикали);
					НомСтр = ЗначСтруктуры.НомерСтрокиПоказателя; // номер строки "верхнего левого" показателя многострочной части раздела.
					Пока СтрНайти(СтруктураРеквизитовФормы.мПечатныеФормы[ТекИндекс].Значение.Область(НомСтр, ЗначСтруктуры.НомерКолонкиПоказателя, НомСтр, ЗначСтруктуры.НомерКолонкиПоказателя).Имя, ЗначСтруктуры.ПодстрокаПоискаПоказателя) > 0 Цикл
						НомСтр = НомСтр + 1;
					КонецЦикла;
					НомВерхСтрДляУдаления = НомСтр; // первая из пустых строк, добавленных процедурой ВывестиНаПечатьЛистОбщая
					Пока СтруктураРеквизитовФормы.мПечатныеФормы[ТекИндекс].Значение.Область(НомСтр, , НомСтр, ).Имя <> ЗначСтруктуры.ПустаяСтрока Цикл
						НомСтр = НомСтр + 1;
					КонецЦикла;
					НомНижнСтрДляУдаления = НомСтр - 1; // последняя из пустых строк, добавленных процедурой ВывестиНаПечатьЛистОбщая
					// Необходимо учесть, что процедура ВывестиНаПечатьЛистОбщая могла не добавить ни одной пустой строки.
					Если НомВерхСтрДляУдаления <= НомНижнСтрДляУдаления Тогда
						СтруктураРеквизитовФормы.мПечатныеФормы[ТекИндекс].Значение.УдалитьОбласть(СтруктураРеквизитовФормы.мПечатныеФормы[ТекИндекс].Значение.Область(НомВерхСтрДляУдаления, , НомНижнСтрДляУдаления, ), ТипСмещенияТабличногоДокумента.ПоВертикали);
						СтруктураРеквизитовФормы.мПечатныеФормы[ТекИндекс].Значение.УдалитьОбласть(СтруктураРеквизитовФормы.мПечатныеФормы[ТекИндекс].Значение.Области[ЗначСтруктуры.ПустаяСтрока], ТипСмещенияТабличногоДокумента.ПоВертикали);
					КонецЕсли;
					// В случае успешной проверки, "Подвал" выведем на одну страницу с табличной частью раздела
					// и удалим последний элемент списка СтруктураРеквизитовФормы.мПечатныеФормы (где до этого "Подвал" находился).
					Если ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(СтруктураРеквизитовФормы.мПечатныеФормы[ТекИндекс].Значение, СтруктураРеквизитовФормы.мПечатныеФормы[ТекИндекс + 1].Значение, Ложь) Тогда
						СтруктураРеквизитовФормы.мПечатныеФормы[ТекИндекс].Значение.Вывести(СтруктураРеквизитовФормы.мПечатныеФормы[ТекИндекс + 1].Значение);
						СтруктураРеквизитовФормы.мПечатныеФормы.Удалить(ТекИндекс + 1);
					Иначе
						// Проверка не выполнена, "отрываем" последнюю строку табличной части раздела
						// (из предпоследнего элемента списка СтруктураРеквизитовФормы.мПечатныеФормы) и выводим
						// вместе с "Подвалом" (в последний элемент списка СтруктураРеквизитовФормы.мПечатныеФормы).
						ВремТабДок = СтруктураРеквизитовФормы.мПечатныеФормы[ТекИндекс].Значение.ПолучитьОбласть(ЗначСтруктуры.ПереносимыйЗаголовок);
						ВремТабДок.Вывести(СтруктураРеквизитовФормы.мПечатныеФормы[ТекИндекс].Значение.ПолучитьОбласть(НомВерхСтрДляУдаления - 1, , НомВерхСтрДляУдаления - 1, ));
						ВремТабДок.Вывести(СтруктураРеквизитовФормы.мПечатныеФормы[ТекИндекс + 1].Значение);
						СтруктураРеквизитовФормы.мПечатныеФормы[ТекИндекс + 1].Значение = ВремТабДок;
						СтруктураРеквизитовФормы.мПечатныеФормы[ТекИндекс].Значение.УдалитьОбласть(СтруктураРеквизитовФормы.мПечатныеФормы[ТекИндекс].Значение.Область(НомВерхСтрДляУдаления - 1, , НомВерхСтрДляУдаления - 1, ), ТипСмещенияТабличногоДокумента.ПоВертикали);
						// Дополним горизонтальным разделителем страниц предпоследний элемент списка СтруктураРеквизитовФормы.мПечатныеФормы.
						СтруктураРеквизитовФормы.мПечатныеФормы[ТекИндекс].Значение.ВывестиГоризонтальныйРазделительСтраниц();
						// Параметры печати для последнего элемента списка СтруктураРеквизитовФормы.мПечатныеФормы.
						СтруктураРеквизитовФормы.мПечатныеФормы[ТекИндекс + 1].Значение.АвтоМасштаб         = Истина;
						СтруктураРеквизитовФормы.мПечатныеФормы[ТекИндекс + 1].Значение.ОриентацияСтраницы  = ЗначСтруктуры.ОриентацияСтраницы;
						СтруктураРеквизитовФормы.мПечатныеФормы[ТекИндекс + 1].Значение.ОтображатьЗаголовки = Ложь;
						СтруктураРеквизитовФормы.мПечатныеФормы[ТекИндекс + 1].Значение.ОтображатьСетку     = Ложь;
						СтруктураРеквизитовФормы.мПечатныеФормы[ТекИндекс + 1].Значение.ЧерноБелыйПросмотр  = Истина;
						СтруктураРеквизитовФормы.мПечатныеФормы[ТекИндекс + 1].Значение.ЧерноБелаяПечать    = Истина;
					КонецЕсли;
					Прервать;
				Исключение
					ТекИндекс = ТекИндекс - 1;
					Продолжить;
				КонецПопытки;
			КонецЦикла;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ЗначСтруктуры.ПодстрокаПоискаПоказателя) И ЗначениеЗаполнено(ЗначСтруктуры.УдаляемыйЗаголовок) Тогда
			// Удаление повторяющихся заголовков раздела.
			ТекИндекс2 = СтруктураРеквизитовФормы.мПечатныеФормы.Количество() - 1;
			ЦиклДляВнутреннийПрерван = Ложь;
			Пока ТекИндекс2 > 0 Цикл
				ТекИндекс1 = ТекИндекс2 - 1;
				Для Каждого ТекОбласть2 Из СтруктураРеквизитовФормы.мПечатныеФормы[ТекИндекс2].Значение.Области Цикл
					Если СтрНайти(ТекОбласть2.Имя, ЗначСтруктуры.ПодстрокаПоискаПоказателя) > 0 Тогда
						Для Каждого ТекОбласть1 Из СтруктураРеквизитовФормы.мПечатныеФормы[ТекИндекс1].Значение.Области Цикл
							Если СтрНайти(ТекОбласть1.Имя, ЗначСтруктуры.ПодстрокаПоискаПоказателя) > 0 Тогда
								Попытка
									СтруктураРеквизитовФормы.мПечатныеФормы[ТекИндекс2].Значение.УдалитьОбласть(СтруктураРеквизитовФормы.мПечатныеФормы[ТекИндекс2].Значение.Область(ЗначСтруктуры.УдаляемыйЗаголовок), ТипСмещенияТабличногоДокумента.ПоВертикали);
									ЦиклДляВнутреннийПрерван = Истина;
									Прервать;
								Исключение
								Конецпопытки;
							КонецЕсли;
						КонецЦикла;
						Если ЦиклДляВнутреннийПрерван = Истина Тогда
							Прервать;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
				ТекИндекс2 = ТекИндекс2 - 1;
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПечатьНаСервере(ВидПечати)
	
	Если НЕ РегламентированнаяОтчетность.ПринтерДоступен() Тогда
		
		Сообщение = Новый СообщениеПользователю;
		
		Сообщение.Текст = НСтр("ru='Перед формированием печатных форм необходимо определить в системе принтер и задать его в качестве используемого по умолчанию!'");
		
		Сообщение.Сообщить();
		
		Возврат Ложь;
		
	КонецЕсли;
	
	ТабличныйДокумент = ЭтаФорма["ПолеТабличногоДокументаФормаОтчета"];
	
	СтруктураРеквизитовФормы.мПечатныеФормы.Очистить();
	
	ОбщиеРеквизитыРазделов = Новый Структура;
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("НаименованиеЛиста",  "Форма 11 (сделка)");
	СтруктураПараметров.Вставить("ОриентацияЛиста",    "Ландшафт");
	СтруктураПараметров.Вставить("ИмяСтраницы",        "11Сделка");
	Структурапараметров.Вставить("ИмяОбластиТаблПоля", "ПолеТабличногоДокументаФормаОтчета");
	СтруктураПараметров.Вставить("ВидПечати",          ВидПечати);
	
	РегламентированнаяОтчетность.ВывестиНаПечатьЛистОбщая(ЭтаФорма.Заголовок, СтруктураПараметров, ТабличныйДокумент, СтруктураРеквизитовФормы.мПечатныеФормы);
	РегламентированнаяОтчетность.УдалитьНомерКорректировки(СтруктураРеквизитовФормы.мПечатныеФормы[0].Значение);
	ОбработатьВыводимыеЗаголовкиИПодвалыРазделов(СтруктураРазделовДляОбработкиЗаголовковИПодвалов());
	РегламентированнаяОтчетностьКлиентСервер.ПроставлениеНомеровЛистов(ЭтаФорма, , СтруктураРеквизитовФормы.СписокПечатаемыхЛистов);
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Процедура СформироватьСпискиВыбора()
	
	МакетСоставаПоказателей = Отчеты[Сред(Лев(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, ".Форма.") - 1), 7)].ПолучитьМакет("Списки2015Кв1");
	
	КоллекцияСписковВыбора = Новый Соответствие;
	Для Каждого Область Из МакетСоставаПоказателей.Области Цикл
		Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Строки Тогда
			ВерхОбласти = Область.Верх;
			НизОбласти = Область.Низ;
			ТаблСписка = Новый ТаблицаЗначений;
			ТаблСписка.Колонки.Добавить("Код",,, МакетСоставаПоказателей.Область(ВерхОбласти, 1, ВерхОбласти, 1).ШиринаКолонки);
			ТаблСписка.Колонки.Добавить("Название",,, МакетСоставаПоказателей.Область(ВерхОбласти, 2, ВерхОбласти, 2).ШиринаКолонки);
			Для НомСтр = ВерхОбласти По НизОбласти Цикл
				КодПоказателя = СокрП(МакетСоставаПоказателей.Область(НомСтр, 1).Текст);
				Если КодПоказателя <> "###" Тогда
					НовСтрока = ТаблСписка.Добавить();
					НовСтрока.Код = КодПоказателя;
					НовСтрока.Название = СокрП(МакетСоставаПоказателей.Область(НомСтр, 2).Текст);
				КонецЕсли;
			КонецЦикла;
			КоллекцияСписковВыбора.Вставить(Область.Имя, ТаблСписка);
		КонецЕсли;
	КонецЦикла;
	
	СвойстваПоказателей.Очистить();
	
	// Раздел I.
	Для НомСтр = 1 По 4 Цикл
		РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000001000103_" + Формат(НомСтр, "ЧГ="), 250, , "Выбор кода ОКОФ", КоллекцияСписковВыбора["СправочникКодовОКОФ_11"]);
	КонецЦикла;
	Для НомСтр = 5 По 8 Цикл
		РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000001000103_" + Формат(НомСтр, "ЧГ="), 250, , "Выбор кода ОКОФ", КоллекцияСписковВыбора["СправочникКодовОКОФ_13"]);
	КонецЦикла;
	Для НомСтр = 9 По 13 Цикл
		РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000001000103_" + Формат(НомСтр, "ЧГ="), 250, , "Выбор кода ОКОФ", КоллекцияСписковВыбора["СправочникКодовОКОФ_12"]);
	КонецЦикла;
	Для НомСтр = 14 По 20 Цикл
		РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000001000103_" + Формат(НомСтр, "ЧГ="), 250, , "Выбор кода ОКОФ", КоллекцияСписковВыбора["СправочникКодовОКОФ_14"]);
	КонецЦикла;
	Для НомСтр = 21 По 24 Цикл
		РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000001000103_" + Формат(НомСтр, "ЧГ="), 250, , "Выбор кода ОКОФ", КоллекцияСписковВыбора["СправочникКодовОКОФ_15"]);
	КонецЦикла;
	Для НомСтр = 25 По 27 Цикл
		РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000001000103_" + Формат(НомСтр, "ЧГ="), 250, , "Выбор кода ОКОФ", КоллекцияСписковВыбора["СправочникКодовОКОФ_16"]);
	КонецЦикла;
	Для НомСтр = 28 По 31 Цикл
		РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000001000103_" + Формат(НомСтр, "ЧГ="), 250, , "Выбор кода ОКОФ", КоллекцияСписковВыбора["СправочникКодовОКОФ_17"]);
	КонецЦикла;
	Для НомСтр = 32 По 35 Цикл
		РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000001000103_" + Формат(НомСтр, "ЧГ="), 250, , "Выбор кода ОКОФ", КоллекцияСписковВыбора["СправочникКодовОКОФ_18"]);
	КонецЦикла;
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000001000104", 250, , "Выбор номера амортизационной группы", КоллекцияСписковВыбора["СправочникНомеровАмортизационныхГрупп"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000001000105", 250, , "Выбор года первоначального ввода в эксплуатацию", КоллекцияСписковВыбора["СправочникГодовПервоначальногоВвода"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000001000108", 250, , "Выбор года, в ценах которого учтен объект", КоллекцияСписковВыбора["СправочникГодовУчета"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000001000110", 250, , "Выбор кода использования", КоллекцияСписковВыбора["СправочникКодовИспользованияДоРеализации"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000001000111", 250, , "Выбор кода причины реализации", КоллекцияСписковВыбора["СправочникКодовПричинРеализации"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000001000112", 250, , "Выбор кода состояния приобретенного объекта", КоллекцияСписковВыбора["СправочникКодовСостояния"]);
	
	// Раздел II.
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000002000103", 250, , "Выбор кода ОКОФ", КоллекцияСписковВыбора["СправочникКодовОКОФ"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000002000104", 250, , "Выбор кода статуса объекта", КоллекцияСписковВыбора["СправочникКодовСтатусаОбъекта"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000002000105", 250, , "Выбор номера амортизационной группы", КоллекцияСписковВыбора["СправочникНомеровАмортизационныхГрупп"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000002000106", 250, , "Выбор года первоначального ввода в эксплуатацию", КоллекцияСписковВыбора["СправочникГодовПервоначальногоВвода"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000002000109", 250, , "Выбор года, в ценах которого учтен объект", КоллекцияСписковВыбора["СправочникГодовУчета"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000002000111", 250, , "Выбор кода состояния объекта", КоллекцияСписковВыбора["СправочникКодовСостояния"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000002000114", 250, , "Выбор кода, определяющего сторону...", КоллекцияСписковВыбора["СправочникКодовСторон"]);
	
	// Справочно.
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000102000103", 250, , "Выбор кода ОКОФ", КоллекцияСписковВыбора["СправочникКодовОКОФ"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000102000104", 250, , "Выбор номера строки", КоллекцияСписковВыбора["СправочникНомеровСтроки"]);
	
	// Раздел III.
	Для НомСтр = 1 По 4 Цикл
		РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000003000103_" + Формат(НомСтр, "ЧГ="), 250, , "Выбор кода ОКОФ", КоллекцияСписковВыбора["СправочникКодовОКОФ"]);
	КонецЦикла;
	Для НомСтр = 5 По 8 Цикл
		РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000003000103_" + Формат(НомСтр, "ЧГ="), 250, , "Выбор кода ОКОФ", КоллекцияСписковВыбора["СправочникКодовОКОФ_21"]);
	КонецЦикла;
	Для НомСтр = 9 По 12 Цикл
		РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000003000103_" + Формат(НомСтр, "ЧГ="), 250, , "Выбор кода ОКОФ", КоллекцияСписковВыбора["СправочникКодовОКОФ_22"]);
	КонецЦикла;
	Для НомСтр = 13 По 16 Цикл
		РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000003000103_" + Формат(НомСтр, "ЧГ="), 250, , "Выбор кода ОКОФ", КоллекцияСписковВыбора["СправочникКодовОКОФ_23"]);
	КонецЦикла;
	Для НомСтр = 17 По 20 Цикл
		РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000003000103_" + Формат(НомСтр, "ЧГ="), 250, , "Выбор кода ОКОФ", КоллекцияСписковВыбора["СправочникКодовОКОФ_24"]);
	КонецЦикла;
	Для НомСтр = 21 По 24 Цикл
		РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000003000103_" + Формат(НомСтр, "ЧГ="), 250, , "Выбор кода ОКОФ", КоллекцияСписковВыбора["СправочникКодовОКОФ_25"]);
	КонецЦикла;
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000003000105", 250, , "Выбор года первоначального ввода в эксплуатацию", КоллекцияСписковВыбора["СправочникГодовПервоначальногоВвода"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000003000108", 250, , "Выбор года, в ценах которого учтен объект", КоллекцияСписковВыбора["СправочникГодовУчета"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000003000109", 250, , "Выбор кода вида сделки", КоллекцияСписковВыбора["СправочникКодовВидаСделки"]);
	
	// Раздел IV.
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000004000103", 250, , "Выбор кода ОКОФ", КоллекцияСписковВыбора["СправочникКодовОКОФ_НематериальныеОФ"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000004000105", 250, , "Выбор года первоначального ввода в эксплуатацию", КоллекцияСписковВыбора["СправочникГодовПервоначальногоВвода"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000004000108", 250, , "Выбор года, в ценах которого учтен объект", КоллекцияСписковВыбора["СправочникГодовУчета"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000004000109", 250, , "Выбор кода лицензионного договора", КоллекцияСписковВыбора["СправочникКодовЛицензионногоДоговора"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000004000112", 250, , "Выбор кода преобладающего вида платежей", КоллекцияСписковВыбора["СправочникКодовПлатежей"]);
	
КонецПроцедуры

&НаКлиенте
Процедура ВвестиПоказатель(Элемент, Область, КодПоказателя, Знач ЭтоСумма, Знач ТекстВыбора, ТаблицаВыбора, СтандартнаяОбработка, КолонкаПоиска = "Код") Экспорт
	
	Если ТаблицаВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	Если (Область.Имя = КодПоказателя) ИЛИ (СтрНайти(Область.Имя, СтруктураРеквизитовФормы.мИдГруппы1) > 0) Тогда
		ИсходноеЗначение = ?(ТипЗнч(Область.Значение) = Тип("Строка"), СокрЛП(Область.Значение), Область.Значение);
	Иначе
		Разделитель = ?(Лев(Область.Имя, СтрДлина(КодПоказателя) + 1) = КодПоказателя + "_", "_", "");
		ИндексОбласти = 1;
		ИсходноеЗначение = "";
		Пока ЭтаФорма[ТекущийЭлемент.Имя].Области.Найти(КодПоказателя + Разделитель + Формат(ИндексОбласти, "ЧГ=")) <> Неопределено Цикл
			ИсходноеЗначение = ИсходноеЗначение + Строка(ЭтаФорма[ТекущийЭлемент.Имя].Области[КодПоказателя + Разделитель + Формат(ИндексОбласти, "ЧГ=")].Значение);
			ИндексОбласти = ИндексОбласти + 1;
		КонецЦикла;
		ИсходноеЗначение = СокрЛП(ИсходноеЗначение);
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Заголовок",          ТекстВыбора);
	ПараметрыФормы.Вставить("ТаблицаЗначений",    ТаблицаВыбора);
	ПараметрыФормы.Вставить("СтруктураДляПоиска", Новый Структура(КолонкаПоиска, Формат(ИсходноеЗначение, "ЧГ=")));
	Если НЕ ЗначениеЗаполнено(ТаблицаВыбора[1].Название) Тогда
		ПараметрыФормы.Вставить("ОтключитьВидимостьКолонкиНазвание", Истина);
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура("Область", Область);
	ОписаниеОповещения = Новый ОписаниеОповещения("ВвестиПоказательЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ОткрытьФорму("Обработка.ОбщиеОбъектыРеглОтчетности.Форма.ФормаВыбораЗначенияИзТаблицы", ПараметрыФормы, ЭтаФорма,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ВвестиПоказательЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	Область = ДополнительныеПараметры.Область;
	
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Область.Значение = ?(СокрЛП(РезультатВыбора["Код"]) = "", 0, Число(РезультатВыбора["Код"]));
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайла(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузитьИзФайлаЗавершение", ЭтотОбъект);
	
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередЗагрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура Выгрузить(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьЗавершение", ЭтотОбъект);

	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайлаЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ЗагрузитьИзФайлаОтчет();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайлаОтчет() Экспорт
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузитьИзФайлаОтчетЗавершение", ЭтотОбъект);
	
	Если Модифицированность Тогда
		СохранитьНаКлиенте(,ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайлаОтчетЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	РегламентированнаяОтчетностьЗагрузкаКлиент.ЗагрузитьИзФайлаОтчет(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Функция ЗагрузкаОтчетаИзФайла(ДанныеДляЗагрузки) Экспорт
	
	Если Модифицированность Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = СтрШаблон(НСтр("ru='Отчет ""%1"" не сохранен.'"), ЭтотОбъект.Заголовок);
		Сообщение.Сообщить();
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ ЗагрузкаОтчетаИзФайлаНаСервере(ДанныеДляЗагрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
		
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция ЗагрузкаОтчетаИзФайлаНаСервере(ДанныеДляЗагрузки)
	
	РегламентированнаяОтчетность.СформироватьСтруктуруПоказателей(ЭтаФорма);
	
	ПараметрыОтчета = СформироватьСтруктуруПараметров();
	
	ДеревоДляЗагрузки = РегламентированнаяОтчетность.ПолучитьДеревоВыгрузки(ЭтаФорма, "СхемаВыгрузкиXML2015Кв1");
	
	Если НЕ РегламентированнаяОтчетностьЗагрузка.ЗагрузкаОтчетаИзФайла(
		ЭтотОбъект, ПараметрыОтчета, ДанныеДляЗагрузки, ДеревоДляЗагрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура ВыгрузитьЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьИзФормыПослеСохраненияЗавершение", ЭтотОбъект);
	Если Модифицированность Тогда
		СохранитьНаКлиенте(, ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьИзФормыПослеСохраненияЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ПараметрыВыгрузки = Неопределено;
	ТекстВыгрузки = Неопределено;
	Если НЕ УниверсальнаяВыгрузкаXMLПроверкаВозможностиВыгрузкиНаСервере(ТекстВыгрузки, ПараметрыВыгрузки) Тогда
		ТекстВопроса = НСтр("ru='В ходе выгрузки были найдены ошибки.'");
		КнопкиВопроса = Новый СписокЗначений;
		КнопкиВопроса.Добавить(КодВозвратаДиалога.Да, "Продолжить выгрузку");
		КнопкиВопроса.Добавить(КодВозвратаДиалога.Нет, "Показать ошибки");
		ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьИзФормыЗавершение", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, КнопкиВопроса, , КодВозвратаДиалога.Нет);
	Иначе
		ВыгрузитьОтчет();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьИзФормыЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ВыгрузитьОтчет(Истина);
	Иначе
		СпДокОсн = Новый СписокЗначений;
		СпДокОсн.Добавить(СтруктураРеквизитовФормы.мСохраненныйДок);
		ОшибкиОтчета = Новый Массив;
		РегламентированнаяОтчетностьКлиент.ПроверитьРегламентированныеОтчеты(СпДокОсн, ОшибкиОтчета);
		РегламентированнаяОтчетностьКлиент.ОткрытьФормуНавигацииПоОшибкамВыгрузки(ОшибкиОтчета);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузку(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьВыгрузкуЗавершение", ЭтотОбъект);

	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
		
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузкуЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПроверитьВыгрузкуОтчета();
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузкуОтчета()
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьВыгрузкуОтчетаЗавершение", ЭтотОбъект);
	
	Если НЕ ЗначениеЗаполнено(СтруктураРеквизитовФормы.Организация) Тогда
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Организация не выбрана! Выгрузка невозможна.'");
		Сообщение.Сообщить();
		Возврат;
		
	КонецЕсли;
	
	Если Модифицированность Тогда
		СохранитьНаКлиенте(,ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура ПроверитьВыгрузкуОтчетаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ФормаВыгрузкиРеглОтчета = ПолучитьФорму("Документ.ВыгрузкаРегламентированныхОтчетов.Форма.ФормаДокумента", , ЭтаФорма);
	
	СпДокОсн = Новый СписокЗначений;
	СпДокОсн.Добавить(СтруктураРеквизитовФормы.мСохраненныйДок);
	
	ФормаВыгрузкиРеглОтчета.Проверить(СпДокОсн);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьОтчет(ВыгружатьСОшибками = Ложь) Экспорт
	
	ДополнительныеПараметры = Новый Структура("ВыгружатьСОшибками", ВыгружатьСОшибками);
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьОтчетЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	Если Модифицированность Тогда
		СохранитьНаКлиенте(, ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура ВыгрузитьОтчетЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ФормаВыгрузкиРеглОтчета = ПолучитьФорму("Документ.ВыгрузкаРегламентированныхОтчетов.Форма.ФормаДокумента", , ЭтаФорма);
	
	СпДокОсн = Новый СписокЗначений;
	СпДокОсн.Добавить(СтруктураРеквизитовФормы.мСохраненныйДок);
	
	ФормаВыгрузкиРеглОтчета.СформироватьИЗаписать(СпДокОсн,,,,,,,,,ДополнительныеПараметры.ВыгружатьСОшибками);
	
КонецПроцедуры

&НаСервере
Функция ПроверитьПоказатели() Экспорт
	
	РегламентированнаяОтчетность.СформироватьСтруктуруПоказателей(ЭтаФорма);
	ДеревоВыгрузки = РегламентированнаяОтчетность.ПолучитьДеревоВыгрузки(ЭтаФорма, "СхемаВыгрузкиXML2015Кв1");
	ПараметрыВыгрузки = СформироватьСтруктуруПараметров();
	КоллекцияСписковВыбора = "";
	Если НЕ ПроверитьВозможностьВыгрузки(ПараметрыВыгрузки, ДеревоВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	ЗаполнитьДанными(ДеревоВыгрузки, ПараметрыВыгрузки);
	Если НЕ РегламентированнаяОтчетность.ПроверитьДанные(ЭтаФорма, ДеревоВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция ТекущийФорматВыгрузки(Организация)
	
	Возврат РегламентированнаяОтчетность.ФорматВыгрузкиСтатистическойОтчетностиВЭлектронномВиде(Организация);
	
КонецФункции

&НаКлиенте
Функция УниверсальнаяВыгрузка(ТекстВыгрузки = Неопределено, ПроверятьБлокировки = Истина, ИмяФайлаВыгрузки = "", ВыгружатьСОшибками = Ложь) Экспорт
	
	Перем ПараметрыВыгрузки;
	
	Если ТекущийФорматВыгрузки(СтруктураРеквизитовФормы.Организация) = Неопределено Тогда
		РегламентированнаяОтчетностьКлиент.ПоказатьФормуНастроекФорматаВыгрузкиСтатистическойОтчетностиВЭлектронномВиде(
			СтруктураРеквизитовФормы.Организация, Ложь, Истина);
			
		Возврат "НеВыбранФормат";
	КонецЕсли;
	
	Если Модифицированность Тогда
		
		Если СтрНайти(Заголовок, СтруктураРеквизитовФормы.СтрПериодОтчета) = 0 Тогда
			ТекстЗаголовка = Заголовок + " за " + СтруктураРеквизитовФормы.СтрПериодОтчета;
		Иначе
			ТекстЗаголовка = Заголовок;
		КонецЕсли;
		
		ОргСтр = " (" + СтруктураРеквизитовФормы.НаимОрганизации + ")";
		Если СтрНайти(Заголовок, ОргСтр) = 0 Тогда
			ТекстЗаголовка = ТекстЗаголовка + ОргСтр;
		КонецЕсли;
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Отчет """ + ТекстЗаголовка + """ не сохранен.";
		Сообщение.Сообщить();
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Если НЕ ВыгружатьСОшибками И НЕ УниверсальнаяВыгрузкаXMLПроверкаВозможностиВыгрузкиНаСервере(ТекстВыгрузки, ПараметрыВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ УниверсальнаяВыгрузкаXMLПроверкаДанныхНаСервере(ТекстВыгрузки, ПараметрыВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ИмяФайлаВыгрузки = ПараметрыВыгрузки.ИмяФайла;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция УниверсальнаяВыгрузкаXMLПроверкаВозможностиВыгрузкиНаСервере(ТекстВыгрузки, ПараметрыВыгрузки) Экспорт
	
	РегламентированнаяОтчетность.СформироватьСтруктуруПоказателей(ЭтаФорма);
	ПараметрыВыгрузки = СформироватьСтруктуруПараметров();
	ДеревоВыгрузки = РегламентированнаяОтчетность.ПолучитьДеревоВыгрузки(ЭтаФорма, "СхемаВыгрузкиXML2015Кв1");
	Если НЕ ПроверитьВозможностьВыгрузки(ПараметрыВыгрузки, ДеревоВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция УниверсальнаяВыгрузкаXMLПроверкаДанныхНаСервере(ТекстВыгрузки, ПараметрыВыгрузки) Экспорт
	
	РегламентированнаяОтчетность.СформироватьСтруктуруПоказателей(ЭтаФорма);
	ПараметрыВыгрузки = СформироватьСтруктуруПараметров();
	ДеревоВыгрузки = РегламентированнаяОтчетность.ПолучитьДеревоВыгрузки(ЭтаФорма, "СхемаВыгрузкиXML2015Кв1");
	ЗаполнитьДанными(ДеревоВыгрузки, ПараметрыВыгрузки);
	Если НЕ РегламентированнаяОтчетность.ПроверитьДанные(ЭтаФорма, ДеревоВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ТекстВыгрузки = РегламентированнаяОтчетность.ВыгрузитьДеревоВXML(ДеревоВыгрузки, ПараметрыВыгрузки);
	КоллекцияСписковВыбора = "";
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция ПроверитьВозможностьВыгрузки(ПараметрыВыгрузки, ДеревоВыгрузки)
	
	СтатусПроверки = Истина;
	
	ИмяПоляТаблДокумента = "ПолеТабличногоДокументаФормаОтчета";
	
	Если ПустаяСтрока(ПараметрыВыгрузки.ОКПО) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма,
		"Не задан код ОКПО организации!",
		ИмяПоляТаблДокумента, "ОргКодОКПО");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ПустаяСтрока(ПараметрыВыгрузки.ОргНазв) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма,
		"Не задано наименование организации!",
		ИмяПоляТаблДокумента, "ОргНазв");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ПустаяСтрока(ПараметрыВыгрузки.ОргИсполнитель) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма,
		"Не указаны Ф.И.О. должностного лица, ответственного за предоставление статистической информации!",
		ИмяПоляТаблДокумента, "ОргИсполнитель");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ПустаяСтрока(ПараметрыВыгрузки.ОргДолжностьИсп) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма,
		"Не указана должность лица, ответственного за предоставление статистической информации!",
		ИмяПоляТаблДокумента, "ОргДолжностьИсп");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ПустаяСтрока(ПараметрыВыгрузки.ОргТелефонИсп) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма,
		"Не указан телефон должностного лица, ответственного за предоставление статистической информации!",
		ИмяПоляТаблДокумента, "ОргТелефонИсп");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	// Проверка на незаполненный отчет.
	ОтчетЗаполнен = Ложь;
	Для Каждого ТекПараметр Из ПараметрыВыгрузки Цикл
		Если Лев(ТекПараметр.Ключ, 2) = "П0" И ЗначениеЗаполнено(ТекПараметр.Значение) Тогда
			ОтчетЗаполнен = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Если Не ОтчетЗаполнен Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма,
		"Отчет не заполнен!",
		ИмяПоляТаблДокумента, "");
		СтатусПроверки = Ложь;
		Возврат СтатусПроверки;
	КонецЕсли;
	
	// КОНТРОЛЬ показателей формы (Указания ФСН).
	// Контрольные соотношения установлены для всех строк, по которым заполнена графа 1:
	
	// Раздел I.
	НомСтр = 1;
	Пока РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(ПараметрыВыгрузки, "П000001000101_" + Формат(НомСтр, "ЧГ=")) Цикл
		Если ЗначениеЗаполнено(ПараметрыВыгрузки["П000001000101_" + Формат(НомСтр, "ЧГ=")]) Тогда
			
			Если "П000001000101_" + Формат(НомСтр, "ЧГ=") = "П000001000101_1" Тогда
				Если ПараметрыВыгрузки["П000001000101_1"] = "Нежилые здания" + Символы.НПП Тогда
					НомСтр = НомСтр + 1;
					Продолжить;
				КонецЕсли;
			ИначеЕсли "П000001000101_" + Формат(НомСтр, "ЧГ=") = "П000001000101_5" Тогда
				Если ПараметрыВыгрузки["П000001000101_5"] = "Жилые здания" + Символы.НПП Тогда
					НомСтр = НомСтр + 1;
					Продолжить;
				КонецЕсли;
			ИначеЕсли "П000001000101_" + Формат(НомСтр, "ЧГ=") = "П000001000101_9" Тогда
				Если ПараметрыВыгрузки["П000001000101_9"] = "Сооружения" + Символы.НПП Тогда
					НомСтр = НомСтр + 1;
					Продолжить;
				КонецЕсли;
			ИначеЕсли "П000001000101_" + Формат(НомСтр, "ЧГ=") = "П000001000101_14" Тогда
				Если ПараметрыВыгрузки["П000001000101_14"] = "Машины и оборудование" + Символы.НПП Тогда
					НомСтр = НомСтр + 1;
					Продолжить;
				КонецЕсли;
			ИначеЕсли "П000001000101_" + Формат(НомСтр, "ЧГ=") = "П000001000101_21" Тогда
				Если ПараметрыВыгрузки["П000001000101_21"] = "Транспортные средства" + Символы.НПП Тогда
					НомСтр = НомСтр + 1;
					Продолжить;
				КонецЕсли;
			ИначеЕсли "П000001000101_" + Формат(НомСтр, "ЧГ=") = "П000001000101_25" Тогда
				Если ПараметрыВыгрузки["П000001000101_25"] = "Производственный и хозяйственный инвентарь" + Символы.НПП Тогда
					НомСтр = НомСтр + 1;
					Продолжить;
				КонецЕсли;
			ИначеЕсли "П000001000101_" + Формат(НомСтр, "ЧГ=") = "П000001000101_28" Тогда
				Если ПараметрыВыгрузки["П000001000101_28"] = "Скот рабочий, продуктивный и племенной" + Символы.НПП Тогда
					НомСтр = НомСтр + 1;
					Продолжить;
				КонецЕсли;
			ИначеЕсли "П000001000101_" + Формат(НомСтр, "ЧГ=") = "П000001000101_32" Тогда
				Если ПараметрыВыгрузки["П000001000101_32"] = "Многолетние насаждения" + Символы.НПП Тогда
					НомСтр = НомСтр + 1;
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			// Графы 4-6, 8-9, 13 > 0 (В части Гр. 13 - игнорируем "по всем строкам": противоречие соотношению из шаблона для выгрузки.)
			Если Не (ЗначениеЗаполнено(ПараметрыВыгрузки["П000001000104_" + Формат(НомСтр, "ЧГ=")])
				И ЗначениеЗаполнено(ПараметрыВыгрузки["П000001000105_" + Формат(НомСтр, "ЧГ=")])
				И ЗначениеЗаполнено(ПараметрыВыгрузки["П000001000106_" + Формат(НомСтр, "ЧГ=")])
				И ЗначениеЗаполнено(ПараметрыВыгрузки["П000001000108_" + Формат(НомСтр, "ЧГ=")])
				И ЗначениеЗаполнено(ПараметрыВыгрузки["П000001000109_" + Формат(НомСтр, "ЧГ=")]))Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма,
				"Не выполнено условие контроля: в разделе 1, по всем строкам, значения в графах 4-6, 8-9 больше нуля!",
				ИмяПоляТаблДокумента, "П000001000101_" + Формат(НомСтр, "ЧГ="));
				СтатусПроверки = Ложь;
			КонецЕсли;
			// (Из шаблона для выгрузки.) Гр. 10-11 или гр. 12-13 д.б. заполнены:
			// если гр. 10 заполнена, то гр. 12-13 д.б. пустыми; если гр. 12 заполнена, то гр. 10-11 д.б. пустыми.
			Если (ЗначениеЗаполнено(ПараметрыВыгрузки["П000001000110_" + Формат(НомСтр, "ЧГ=")])
				И ЗначениеЗаполнено(ПараметрыВыгрузки["П000001000111_" + Формат(НомСтр, "ЧГ=")]))
				И (ЗначениеЗаполнено(ПараметрыВыгрузки["П000001000112_" + Формат(НомСтр, "ЧГ=")])
				Или ЗначениеЗаполнено(ПараметрыВыгрузки["П000001000113_" + Формат(НомСтр, "ЧГ=")])) Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма,
				"Не выполнено условие контроля: в разделе 1, по всем строкам с заполненным значением в графе 1, если значения в графах 10-11 заполнены, то значения в графах 12-13 должны быть не заполненными!",
				ИмяПоляТаблДокумента, "П000001000101_" + Формат(НомСтр, "ЧГ="));
				СтатусПроверки = Ложь;
			КонецЕсли;
			Если (ЗначениеЗаполнено(ПараметрыВыгрузки["П000001000112_" + Формат(НомСтр, "ЧГ=")])
				И ЗначениеЗаполнено(ПараметрыВыгрузки["П000001000113_" + Формат(НомСтр, "ЧГ=")]))
				И (ЗначениеЗаполнено(ПараметрыВыгрузки["П000001000110_" + Формат(НомСтр, "ЧГ=")])
				Или ЗначениеЗаполнено(ПараметрыВыгрузки["П000001000111_" + Формат(НомСтр, "ЧГ=")])) Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма,
				"Не выполнено условие контроля: в разделе 1, по всем строкам с заполненным значением в графе 1, если значения в графах 12-13 заполнены, то значения в графах 10-11 должны быть не заполненными!",
				ИмяПоляТаблДокумента, "П000001000101_" + Формат(НомСтр, "ЧГ="));
				СтатусПроверки = Ложь;
			КонецЕсли;
			// Гр. 8 ≥ гр. 5.
			Если ПараметрыВыгрузки["П000001000108_" + Формат(НомСтр, "ЧГ=")] < ПараметрыВыгрузки["П000001000105_" + Формат(НомСтр, "ЧГ=")] Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма,
				"Не выполнено условие контроля: в разделе 1, по всем строкам с заполненным значением в графе 1, значение в графе 8 больше либо равно значению в графе 5!",
				ИмяПоляТаблДокумента, "П000001000108_" + Формат(НомСтр, "ЧГ="));
				СтатусПроверки = Ложь;
			КонецЕсли;
			// Гр. 6 ≥ гр. 7.
			Если ПараметрыВыгрузки["П000001000106_" + Формат(НомСтр, "ЧГ=")] < ПараметрыВыгрузки["П000001000107_" + Формат(НомСтр, "ЧГ=")] Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма,
				"Не выполнено условие контроля: в разделе 1, по всем строкам с заполненным значением в графе 1, значение в графе 6 больше либо равно значению в графе 7!",
				ИмяПоляТаблДокумента, "П000001000106_" + Формат(НомСтр, "ЧГ="));
				СтатусПроверки = Ложь;
			КонецЕсли;
			// Гр. 7 ≥ 0.
			Если ПараметрыВыгрузки["П000001000107_" + Формат(НомСтр, "ЧГ=")] < 0 Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма,
				"Не выполнено условие контроля: в разделе 1, по всем строкам с заполненным значением в графе 1, значение в графе 7 больше либо равно нулю!",
				ИмяПоляТаблДокумента, "П000001000107_" + Формат(НомСтр, "ЧГ="));
				СтатусПроверки = Ложь;
			КонецЕсли;
			// Гр.4 = 1, или 2, или 3, или 4, или 5, или 6, или 7, или 8, или 9, или 10.
			Если Не ЗначениеЗаполнено(ПараметрыВыгрузки["П000001000104_" + Формат(НомСтр, "ЧГ=")]) Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма,
				"Не выполнено условие контроля: в разделе 1, по всем строкам с заполненным значением в графе 1, значение в графе 4 должно быть равно числу от 1 до 10!",
				ИмяПоляТаблДокумента, "П000001000104_" + Формат(НомСтр, "ЧГ="));
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			Если (ЗначениеЗаполнено(ПараметрыВыгрузки["П000001000110_" + Формат(НомСтр, "ЧГ=")])
				Или ЗначениеЗаполнено(ПараметрыВыгрузки["П000001000111_" + Формат(НомСтр, "ЧГ=")]))
				И Не (ЗначениеЗаполнено(ПараметрыВыгрузки["П000001000112_" + Формат(НомСтр, "ЧГ=")])
				И ЗначениеЗаполнено(ПараметрыВыгрузки["П000001000113_" + Формат(НомСтр, "ЧГ=")])) Тогда
				// Гр.10 = 1, или 2, или 3.
				Если Не ЗначениеЗаполнено(ПараметрыВыгрузки["П000001000110_" + Формат(НомСтр, "ЧГ=")]) Тогда
					РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма,
					"Не выполнено условие контроля: в разделе 1, по строке " + Формат(НомСтр, "ЧГ=") + ", значение в графе 10 должно быть равно числу от 1 до 3!",
					ИмяПоляТаблДокумента, "П000001000110_" + Формат(НомСтр, "ЧГ="));
					СтатусПроверки = Ложь;
				КонецЕсли;
				// Гр.11 = 1, или 2, или 3, или 4.
				Если Не ЗначениеЗаполнено(ПараметрыВыгрузки["П000001000111_" + Формат(НомСтр, "ЧГ=")]) Тогда
					РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма,
					"Не выполнено условие контроля: в разделе 1, по строке " + Формат(НомСтр, "ЧГ=") + ", значение в графе 11 должно быть равно числу от 1 до 4!",
					ИмяПоляТаблДокумента, "П000001000111_" + Формат(НомСтр, "ЧГ="));
					СтатусПроверки = Ложь;
				КонецЕсли;
			КонецЕсли;
			
			Если (ЗначениеЗаполнено(ПараметрыВыгрузки["П000001000112_" + Формат(НомСтр, "ЧГ=")])
				Или ЗначениеЗаполнено(ПараметрыВыгрузки["П000001000113_" + Формат(НомСтр, "ЧГ=")]))
				И Не (ЗначениеЗаполнено(ПараметрыВыгрузки["П000001000110_" + Формат(НомСтр, "ЧГ=")])
				И ЗначениеЗаполнено(ПараметрыВыгрузки["П000001000111_" + Формат(НомСтр, "ЧГ=")])) Тогда
				// Гр.12 = 1, или 2, или 3, или 4, или 5, или 6.
				Если Не ЗначениеЗаполнено(ПараметрыВыгрузки["П000001000112_" + Формат(НомСтр, "ЧГ=")]) Тогда
					РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма,
					"Не выполнено условие контроля: в разделе 1, по строке " + Формат(НомСтр, "ЧГ=") + ", значение в графе 12 должно быть равно числу от 1 до 6!",
					ИмяПоляТаблДокумента, "П000001000112_" + Формат(НомСтр, "ЧГ="));
					СтатусПроверки = Ложь;
				КонецЕсли;
				// Графа 13 > 0.
				Если Не ЗначениеЗаполнено(ПараметрыВыгрузки["П000001000113_" + Формат(НомСтр, "ЧГ=")]) Тогда
					РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма,
					"Не выполнено условие контроля: в разделе 1, по строке " + Формат(НомСтр, "ЧГ=") + ", значение в графе 13 должно быть больше нуля!",
					ИмяПоляТаблДокумента, "П000001000113_" + Формат(НомСтр, "ЧГ="));
					СтатусПроверки = Ложь;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		НомСтр = НомСтр + 1;
	КонецЦикла;
	
	// Раздел II.
	НомСтр = 1;
	Пока РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(ПараметрыВыгрузки, "П000002000101_" + Формат(НомСтр, "ЧГ=")) Цикл
		Если ЗначениеЗаполнено(ПараметрыВыгрузки["П000002000101_" + Формат(НомСтр, "ЧГ=")]) Тогда
			
			// Графы 4-7, 9-10, 12-13 > 0.
			Если Не (ЗначениеЗаполнено(ПараметрыВыгрузки["П000002000104_" + Формат(НомСтр, "ЧГ=")])
				И ЗначениеЗаполнено(ПараметрыВыгрузки["П000002000105_" + Формат(НомСтр, "ЧГ=")])
				И ЗначениеЗаполнено(ПараметрыВыгрузки["П000002000106_" + Формат(НомСтр, "ЧГ=")])
				И ЗначениеЗаполнено(ПараметрыВыгрузки["П000002000107_" + Формат(НомСтр, "ЧГ=")])
				И ЗначениеЗаполнено(ПараметрыВыгрузки["П000002000109_" + Формат(НомСтр, "ЧГ=")])
				И ЗначениеЗаполнено(ПараметрыВыгрузки["П000002000110_" + Формат(НомСтр, "ЧГ=")])
				И ЗначениеЗаполнено(ПараметрыВыгрузки["П000002000112_" + Формат(НомСтр, "ЧГ=")])
				И ЗначениеЗаполнено(ПараметрыВыгрузки["П000002000113_" + Формат(НомСтр, "ЧГ=")]))Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма,
				"Не выполнено условие контроля: в разделе 2, по всем строкам, значения в графах 4-7, 9-10, 12-13 больше нуля!",
				ИмяПоляТаблДокумента, "П000002000101_" + Формат(НомСтр, "ЧГ="));
				СтатусПроверки = Ложь;
			КонецЕсли;
			// Гр. 9 ≥ гр. 6.
			Если ПараметрыВыгрузки["П000002000109_" + Формат(НомСтр, "ЧГ=")] < ПараметрыВыгрузки["П000002000106_" + Формат(НомСтр, "ЧГ=")] Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма,
				"Не выполнено условие контроля: в разделе 2, по всем строкам с заполненным значением в графе 1, значение в графе 9 больше либо равно значению в графе 6!",
				ИмяПоляТаблДокумента, "П000002000109_" + Формат(НомСтр, "ЧГ="));
				СтатусПроверки = Ложь;
			КонецЕсли;
			// Гр. 7 ≥ гр. 8.
			Если ПараметрыВыгрузки["П000002000107_" + Формат(НомСтр, "ЧГ=")] < ПараметрыВыгрузки["П000002000108_" + Формат(НомСтр, "ЧГ=")] Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма,
				"Не выполнено условие контроля: в разделе 2, по всем строкам с заполненным значением в графе 1, значение в графе 7 больше либо равно значению в графе 8!",
				ИмяПоляТаблДокумента, "П000002000107_" + Формат(НомСтр, "ЧГ="));
				СтатусПроверки = Ложь;
			КонецЕсли;
			// Гр. 8 ≥ 0.
			Если ПараметрыВыгрузки["П000002000108_" + Формат(НомСтр, "ЧГ=")] < 0 Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма,
				"Не выполнено условие контроля: в разделе 2, по всем строкам с заполненным значением в графе 1, значение в графе 8 больше либо равно нулю!",
				ИмяПоляТаблДокумента, "П000002000108_" + Формат(НомСтр, "ЧГ="));
				СтатусПроверки = Ложь;
			КонецЕсли;
			// Гр. 4 = 1, или 2.
			Если Не ЗначениеЗаполнено(ПараметрыВыгрузки["П000002000104_" + Формат(НомСтр, "ЧГ=")]) Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма,
				"Не выполнено условие контроля: в разделе 2, по всем строкам с заполненным значением в графе 1, значение в графе 4 должно быть равно числу 1 или 2!",
				ИмяПоляТаблДокумента, "П000002000104_" + Формат(НомСтр, "ЧГ="));
				СтатусПроверки = Ложь;
			КонецЕсли;
			// Гр. 5 = 1, или 2, или 3, или 4, или 5, или 6, или 7, или 8, или 9, или 10.
			Если Не ЗначениеЗаполнено(ПараметрыВыгрузки["П000002000105_" + Формат(НомСтр, "ЧГ=")]) Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма,
				"Не выполнено условие контроля: в разделе 2, по всем строкам с заполненным значением в графе 1, значение в графе 5 должно быть равно числу от 1 до 10!",
				ИмяПоляТаблДокумента, "П000002000105_" + Формат(НомСтр, "ЧГ="));
				СтатусПроверки = Ложь;
			КонецЕсли;
			// Гр. 11 = 1, или 2, или 3, или 4, или 5, или 6.
			Если Не ЗначениеЗаполнено(ПараметрыВыгрузки["П000002000111_" + Формат(НомСтр, "ЧГ=")]) Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма,
				"Не выполнено условие контроля: в разделе 2, по всем строкам с заполненным значением в графе 1, значение в графе 11 должно быть равно числу от 1 до 6!",
				ИмяПоляТаблДокумента, "П000002000111_" + Формат(НомСтр, "ЧГ="));
				СтатусПроверки = Ложь;
			КонецЕсли;
			// Гр. 14 = 1, или 2, или 3.
			Если Не ЗначениеЗаполнено(ПараметрыВыгрузки["П000002000114_" + Формат(НомСтр, "ЧГ=")]) Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма,
				"Не выполнено условие контроля: в разделе 2, по всем строкам с заполненным значением в графе 1, значение в графе 14 должно быть равно числу от 1 до 3!",
				ИмяПоляТаблДокумента, "П000002000114_" + Формат(НомСтр, "ЧГ="));
				СтатусПроверки = Ложь;
			КонецЕсли;
			
		КонецЕсли;
		НомСтр = НомСтр + 1;
	КонецЦикла;
	
	// Раздел "Справочно".
	НомСтр = 1;
	Пока РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(ПараметрыВыгрузки, "П000102000101_" + Формат(НомСтр, "ЧГ=")) Цикл
		Если ЗначениеЗаполнено(ПараметрыВыгрузки["П000102000101_" + Формат(НомСтр, "ЧГ=")]) Тогда
			
			// Гр. 5 > 0 при наличии данных по строкам 01-08, 32-35.
			Если ((ПараметрыВыгрузки["П000102000104_" + Формат(НомСтр, "ЧГ=")] >= 1 И ПараметрыВыгрузки["П000102000104_" + Формат(НомСтр, "ЧГ=")] <= 8)
				Или (ПараметрыВыгрузки["П000102000104_" + Формат(НомСтр, "ЧГ=")] >= 32 И ПараметрыВыгрузки["П000102000104_" + Формат(НомСтр, "ЧГ=")] <= 35))
				И ПараметрыВыгрузки["П000102000105_" + Формат(НомСтр, "ЧГ=")] <= 0 Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма,
				"Не выполнено условие контроля: в разделе ""Справочно"", по строке " + Формат(НомСтр, "ЧГ=") + ", значение в графе 5 должно быть больше 0 при наличии данных по строкам 01-08, 32-35!",
				ИмяПоляТаблДокумента, "П000102000105_" + Формат(НомСтр, "ЧГ="));
				СтатусПроверки = Ложь;
			КонецЕсли;
			// Гр. 6 > 0 при наличии данных по строкам 28-35.
			Если (ПараметрыВыгрузки["П000102000104_" + Формат(НомСтр, "ЧГ=")] >= 28 И ПараметрыВыгрузки["П000102000104_" + Формат(НомСтр, "ЧГ=")] <= 35)
				И ПараметрыВыгрузки["П000102000106_" + Формат(НомСтр, "ЧГ=")] <= 0 Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма,
				"Не выполнено условие контроля: в разделе ""Справочно"", по строке " + Формат(НомСтр, "ЧГ=") + ", значение в графе 6 должно быть больше 0 при наличии данных по строкам 28-35!",
				ИмяПоляТаблДокумента, "П000102000106_" + Формат(НомСтр, "ЧГ="));
				СтатусПроверки = Ложь;
			КонецЕсли;
			
		КонецЕсли;
		НомСтр = НомСтр + 1;
	КонецЦикла;
	
	// Раздел III.
	НомСтр = 1;
	Пока РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(ПараметрыВыгрузки, "П000003000101_" + Формат(НомСтр, "ЧГ=")) Цикл
		Если ЗначениеЗаполнено(ПараметрыВыгрузки["П000003000101_" + Формат(НомСтр, "ЧГ=")]) Тогда
			
			Если "П000003000101_" + Формат(НомСтр, "ЧГ=") = "П000003000101_1" Тогда
				Если ПараметрыВыгрузки["П000003000101_1"] = "Исследования и разработки" + Символы.НПП Тогда
					НомСтр = НомСтр + 1;
					Продолжить;
				КонецЕсли;
			ИначеЕсли "П000003000101_" + Формат(НомСтр, "ЧГ=") = "П000003000101_5" Тогда
				Если ПараметрыВыгрузки["П000003000101_5"] = "Геологоразведочные работы" + Символы.НПП Тогда
					НомСтр = НомСтр + 1;
					Продолжить;
				КонецЕсли;
			ИначеЕсли "П000003000101_" + Формат(НомСтр, "ЧГ=") = "П000003000101_9" Тогда
				Если ПараметрыВыгрузки["П000003000101_9"] = "Компьютерное программное обеспечение" + Символы.НПП Тогда
					НомСтр = НомСтр + 1;
					Продолжить;
				КонецЕсли;
			ИначеЕсли "П000003000101_" + Формат(НомСтр, "ЧГ=") = "П000003000101_13" Тогда
				Если ПараметрыВыгрузки["П000003000101_13"] = "Оригинальные произведения развлекательного жанра, литературы или искусства" + Символы.НПП Тогда
					НомСтр = НомСтр + 1;
					Продолжить;
				КонецЕсли;
			ИначеЕсли "П000003000101_" + Формат(НомСтр, "ЧГ=") = "П000003000101_17" Тогда
				Если ПараметрыВыгрузки["П000003000101_17"] = "Наукоемкие промышленные технологии" + Символы.НПП Тогда
					НомСтр = НомСтр + 1;
					Продолжить;
				КонецЕсли;
			ИначеЕсли "П000003000101_" + Формат(НомСтр, "ЧГ=") = "П000003000101_21" Тогда
				Если ПараметрыВыгрузки["П000003000101_21"] = "Прочие нематериальные основные фонды" + Символы.НПП Тогда
					НомСтр = НомСтр + 1;
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			// Графы 4-6, 8, 10, 11 > 0.
			Если Не (ЗначениеЗаполнено(ПараметрыВыгрузки["П000003000104_" + Формат(НомСтр, "ЧГ=")])
				И ЗначениеЗаполнено(ПараметрыВыгрузки["П000003000105_" + Формат(НомСтр, "ЧГ=")])
				И ЗначениеЗаполнено(ПараметрыВыгрузки["П000003000106_" + Формат(НомСтр, "ЧГ=")])
				И ЗначениеЗаполнено(ПараметрыВыгрузки["П000003000108_" + Формат(НомСтр, "ЧГ=")])
				И ЗначениеЗаполнено(ПараметрыВыгрузки["П000003000110_" + Формат(НомСтр, "ЧГ=")])
				И ЗначениеЗаполнено(ПараметрыВыгрузки["П000003000111_" + Формат(НомСтр, "ЧГ=")]))Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма,
				"Не выполнено условие контроля: в разделе 3, по всем строкам, значения в графах 4-6, 8, 10, 11 больше нуля!",
				ИмяПоляТаблДокумента, "П000003000101_" + Формат(НомСтр, "ЧГ="));
				СтатусПроверки = Ложь;
			КонецЕсли;
			// Гр. 8 ≥ гр. 5.
			Если ПараметрыВыгрузки["П000003000108_" + Формат(НомСтр, "ЧГ=")] < ПараметрыВыгрузки["П000003000105_" + Формат(НомСтр, "ЧГ=")] Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма,
				"Не выполнено условие контроля: в разделе 3, по всем строкам с заполненным значением в графе 1, значение в графе 8 больше либо равно значению в графе 5!",
				ИмяПоляТаблДокумента, "П000003000108_" + Формат(НомСтр, "ЧГ="));
				СтатусПроверки = Ложь;
			КонецЕсли;
			// Гр. 6 ≥ гр. 7.
			Если ПараметрыВыгрузки["П000003000106_" + Формат(НомСтр, "ЧГ=")] < ПараметрыВыгрузки["П000003000107_" + Формат(НомСтр, "ЧГ=")] Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма,
				"Не выполнено условие контроля: в разделе 3, по всем строкам с заполненным значением в графе 1, значение в графе 6 больше либо равно значению в графе 7!",
				ИмяПоляТаблДокумента, "П000003000106_" + Формат(НомСтр, "ЧГ="));
				СтатусПроверки = Ложь;
			КонецЕсли;
			// Гр. 7 ≥ 0.
			Если ПараметрыВыгрузки["П000003000107_" + Формат(НомСтр, "ЧГ=")] < 0 Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма,
				"Не выполнено условие контроля: в разделе 3, по всем строкам с заполненным значением в графе 1, значение в графе 7 больше либо равно нулю!",
				ИмяПоляТаблДокумента, "П000003000107_" + Формат(НомСтр, "ЧГ="));
				СтатусПроверки = Ложь;
			КонецЕсли;
			// Гр. 9 = 1, или 2, или 3, или 4, или 5.
			Если Не ЗначениеЗаполнено(ПараметрыВыгрузки["П000003000109_" + Формат(НомСтр, "ЧГ=")]) Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма,
				"Не выполнено условие контроля: в разделе 3, по всем строкам с заполненным значением в графе 1, значение в графе 9 должно быть равно числу от 1 до 5!",
				ИмяПоляТаблДокумента, "П000003000109_" + Формат(НомСтр, "ЧГ="));
				СтатусПроверки = Ложь;
			КонецЕсли;
			// Стр. 56-59 гр. 3 = 0. (Обеспечивается защитой соотв. ячеек.)
			// Стр. 60-79 гр. 3 ≠ 0.
			Если НомСтр >= 5 Тогда // показатель с суффиксом "5" соответствует строке № 60
				Если Не ЗначениеЗаполнено(ПараметрыВыгрузки["П000003000103_" + Формат(НомСтр, "ЧГ=")]) Тогда
					РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма,
					"Не выполнено условие контроля: в разделе 3, по строке " + Формат(НомСтр, "ЧГ=") + ", значение в графе 3 должно быть заполнено!",
					ИмяПоляТаблДокумента, "П000003000103_" + Формат(НомСтр, "ЧГ="));
					СтатусПроверки = Ложь;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		НомСтр = НомСтр + 1;
	КонецЦикла;
	
	// Раздел IV.
	НомСтр = 1;
	Пока РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(ПараметрыВыгрузки, "П000004000101_" + Формат(НомСтр, "ЧГ=")) Цикл
		Если ЗначениеЗаполнено(ПараметрыВыгрузки["П000004000101_" + Формат(НомСтр, "ЧГ=")]) Тогда
			
			// Графы 4-6, 8, 10, 11, 13 > 0.
			Если Не (ЗначениеЗаполнено(ПараметрыВыгрузки["П000004000104_" + Формат(НомСтр, "ЧГ=")])
				И ЗначениеЗаполнено(ПараметрыВыгрузки["П000004000105_" + Формат(НомСтр, "ЧГ=")])
				И ЗначениеЗаполнено(ПараметрыВыгрузки["П000004000106_" + Формат(НомСтр, "ЧГ=")])
				И ЗначениеЗаполнено(ПараметрыВыгрузки["П000004000108_" + Формат(НомСтр, "ЧГ=")])
				И ЗначениеЗаполнено(ПараметрыВыгрузки["П000004000110_" + Формат(НомСтр, "ЧГ=")])
				И ЗначениеЗаполнено(ПараметрыВыгрузки["П000004000111_" + Формат(НомСтр, "ЧГ=")])
				И ЗначениеЗаполнено(ПараметрыВыгрузки["П000004000113_" + Формат(НомСтр, "ЧГ=")]))Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма,
				"Не выполнено условие контроля: в разделе 4, по всем строкам, значения в графах 4-6, 8, 10, 11, 13 больше нуля!",
				ИмяПоляТаблДокумента, "П000004000101_" + Формат(НомСтр, "ЧГ="));
				СтатусПроверки = Ложь;
			КонецЕсли;
			// Гр. 8 ≥ гр. 5.
			Если ПараметрыВыгрузки["П000004000108_" + Формат(НомСтр, "ЧГ=")] < ПараметрыВыгрузки["П000004000105_" + Формат(НомСтр, "ЧГ=")] Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма,
				"Не выполнено условие контроля: в разделе 4, по всем строкам с заполненным значением в графе 1, значение в графе 8 больше либо равно значению в графе 5!",
				ИмяПоляТаблДокумента, "П000004000108_" + Формат(НомСтр, "ЧГ="));
				СтатусПроверки = Ложь;
			КонецЕсли;
			// Гр. 6 ≥ гр. 7.
			Если ПараметрыВыгрузки["П000004000106_" + Формат(НомСтр, "ЧГ=")] < ПараметрыВыгрузки["П000004000107_" + Формат(НомСтр, "ЧГ=")] Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма,
				"Не выполнено условие контроля: в разделе 4, по всем строкам с заполненным значением в графе 1, значение в графе 6 больше либо равно значению в графе 7!",
				ИмяПоляТаблДокумента, "П000004000106_" + Формат(НомСтр, "ЧГ="));
				СтатусПроверки = Ложь;
			КонецЕсли;
			// Гр. 7 ≥ 0.
			Если ПараметрыВыгрузки["П000004000107_" + Формат(НомСтр, "ЧГ=")] < 0 Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма,
				"Не выполнено условие контроля: в разделе 4, по всем строкам с заполненным значением в графе 1, значение в графе 7 больше либо равно нулю!",
				ИмяПоляТаблДокумента, "П000004000107_" + Формат(НомСтр, "ЧГ="));
				СтатусПроверки = Ложь;
			КонецЕсли;
			// Гр. 9 = 1, или 2.
			Если Не ЗначениеЗаполнено(ПараметрыВыгрузки["П000004000109_" + Формат(НомСтр, "ЧГ=")]) Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма,
				"Не выполнено условие контроля: в разделе 4, по всем строкам с заполненным значением в графе 1, значение в графе 9 должно быть равно числу 1 или 2!",
				ИмяПоляТаблДокумента, "П000004000109_" + Формат(НомСтр, "ЧГ="));
				СтатусПроверки = Ложь;
			КонецЕсли;
			// Гр. 12 = 1, или 2, или 3, или 4.
			Если Не ЗначениеЗаполнено(ПараметрыВыгрузки["П000004000112_" + Формат(НомСтр, "ЧГ=")]) Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма,
				"Не выполнено условие контроля: в разделе 4, по всем строкам с заполненным значением в графе 1, значение в графе 12 должно быть равно числу от 1 до 4!",
				ИмяПоляТаблДокумента, "П000004000112_" + Формат(НомСтр, "ЧГ="));
				СтатусПроверки = Ложь;
			КонецЕсли;
			
		КонецЕсли;
		НомСтр = НомСтр + 1;
	КонецЦикла;
	
	Возврат СтатусПроверки;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьДанными(ДеревоВыгрузки, ПараметрыВыгрузки)
	
	РегламентированнаяОтчетность.ОбработатьУсловныеЭлементы(ЭтаФорма, ПараметрыВыгрузки, ДеревоВыгрузки); // формируем точную структуру XML-макета
	ЗаполнитьДаннымиУзел(ПараметрыВыгрузки, ДеревоВыгрузки); // заполняем дерево данными
	РегламентированнаяОтчетность.ОтсечьНезаполненныеНеобязательныеУзлыСтатистики(ДеревоВыгрузки);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДаннымиУзел(ПараметрыВыгрузки, Узел, НомерСтроки = Неопределено)
	
	СтрокиУзла = Новый Массив;
	Для Каждого Стр Из Узел.Строки Цикл
		СтрокиУзла.Добавить(Стр);
	КонецЦикла;
	
	Для Каждого Стр из СтрокиУзла Цикл
		
		Если ПустаяСтрока(Стр.ЗначениеПоУмолчанию) Тогда
			Если НЕ ПустаяСтрока(Стр.Ключ) Тогда
				ПолныйКодПоказателя = Стр.Ключ + ?(ЗначениеЗаполнено(НомерСтроки), "_" + Формат(НомерСтроки, "ЧГ="), "");
				ЗначениеПоказателя = Неопределено;
				Если ПараметрыВыгрузки.Свойство(ПолныйКодПоказателя, ЗначениеПоказателя) Тогда
					ФорматПредставленияНуля = Неопределено;
					Если ПараметрыВыгрузки.Свойство("ЧН" + ПолныйКодПоказателя, ФорматПредставленияНуля) Тогда
						РегламентированнаяОтчетность.ВывестиПоказательСтатистикиВXML(Стр, ЗначениеПоказателя, ФорматПредставленияНуля);
					Иначе
						РегламентированнаяОтчетность.ВывестиПоказательСтатистикиВXML(Стр, ЗначениеПоказателя);
					КонецЕсли;
				Иначе
					РегламентированнаяОтчетность.ВывестиПоказательСтатистикиВXML(Стр, "");
				КонецЕсли;
			Иначе
				Стр.Значение = "";
			КонецЕсли;
		ИначеЕсли Лев(Стр.ЗначениеПоУмолчанию, 1) = "&" Тогда
			РегламентированнаяОтчетность.ВывестиПоказательСтатистикиВXML(Стр, ПараметрыВыгрузки[Сред(Стр.ЗначениеПоУмолчанию, 2)]);
		Иначе
			Стр.Значение = Стр.ЗначениеПоУмолчанию;
			Если НЕ ПустаяСтрока(Стр.Ключ) Тогда
				ПолныйКодПоказателя = Стр.Ключ + ?(ЗначениеЗаполнено(НомерСтроки), "_" + Формат(НомерСтроки, "ЧГ="), "");
				ЗначениеПоказателя = Неопределено;
				Если ПараметрыВыгрузки.Свойство(ПолныйКодПоказателя, ЗначениеПоказателя) Тогда
					ФорматПредставленияНуля = Неопределено;
					Если ПараметрыВыгрузки.Свойство("ЧН" + ПолныйКодПоказателя, ФорматПредставленияНуля) Тогда
						РегламентированнаяОтчетность.ВывестиПоказательСтатистикиВXML(Стр, ЗначениеПоказателя, ФорматПредставленияНуля);
					Иначе
						РегламентированнаяОтчетность.ВывестиПоказательСтатистикиВXML(Стр, ЗначениеПоказателя);
					КонецЕсли;
				Иначе
					РегламентированнаяОтчетность.ВывестиПоказательСтатистикиВXML(Стр, "");
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если Стр.Тип = "С" ИЛИ Стр.Тип = "C" Тогда // учтем оба варианта: кириллицу и латиницу
			Если Стр.Многострочность Тогда
				НомСтр = 1;
				ПодчиненныйЭлемент = РегламентированнаяОтчетность.ПолучитьПервыйПодчиненныйУзелСЗаполненнымКлючом(Стр);
				КлючПодчиненногоЭлемента = ПодчиненныйЭлемент.Ключ;
				Пока РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(ПараметрыВыгрузки, КлючПодчиненногоЭлемента + "_" + Формат(НомСтр, "ЧГ=")) Цикл
					УзелСоответствующийСтроке = РегламентированнаяОтчетность.СкопироватьУзел(Узел, Стр);
					ЗаполнитьДаннымиУзел(ПараметрыВыгрузки, УзелСоответствующийСтроке, НомСтр);
					НомСтр = НомСтр + 1;
				КонецЦикла;
			Иначе
				ЗаполнитьДаннымиУзел(ПараметрыВыгрузки, Стр, НомерСтроки);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция СформироватьИмяФайла(ПараметрыВыгрузки, ДопАтрибуты)
	
	Перем ПолученноеЗначение;
	
	КодОКУД        = ДопАтрибуты.OKUD;
	КодФормы       = ДопАтрибуты.idf;
	Периодичность  = ДопАтрибуты.idp;
	КодОКПО        = ПараметрыВыгрузки.ОКПО;
	РасчетныйГод   = ПараметрыВыгрузки.РасчПериод;
	ОтчетныйПериод = ПараметрыВыгрузки.ОтчПериод;
	
	ПараметрыВыгрузки.Свойство("ОКФС", ПолученноеЗначение);
	КодОКФС = ПолученноеЗначение;
	ПараметрыВыгрузки.Свойство("ОКВЭД", ПолученноеЗначение);
	КодОКВЭД = СтрЗаменить(ПолученноеЗначение, ".", "-");
	
	// Преобразование кодов - составляющих имени файла.
	КодыИФ = Новый Структура;
	КодыИФ.Вставить("Документ",       СтруктураРеквизитовФормы.мСохраненныйДок);
	КодыИФ.Вставить("КодФормы",       КодФормы);
	КодыИФ.Вставить("Периодичность",  Периодичность);
	КодыИФ.Вставить("ОтчетныйПериод", ОтчетныйПериод);
	КодыИФ.Вставить("ДатаВыгрузки",   "");
	
	РегламентированнаяОтчетность.КодыДляИмениФайлаВФорматеВыгрузки(КодыИФ);
	
	// Формирование имени файла, в зависимости
	// от формата выгрузки статотчетности.
	Если ПустаяСтрока(КодыИФ.ДатаВыгрузки) Тогда // "старый" формат
		ИмяФайлаXML = КодОКУД + "_"
		+ КодФормы + "_"
		+ Периодичность + "_"
		+ КодОКПО + "_"
		+ РасчетныйГод + "_"
		+ ОтчетныйПериод
		+ ?(ПустаяСтрока(КодОКФС), "", "_" + КодОКФС)
		+ ?(ПустаяСтрока(КодОКВЭД), "", "_" + КодОКВЭД) + ".xml";
	Иначе										 // "новый" формат
		ИмяФайлаXML = КодОКУД + "_"
		+ КодыИФ.КодФормы + "_"
		+ КодыИФ.Периодичность + "_"
		+ КодОКПО + "_"
		+ РасчетныйГод + "_"
		+ КодыИФ.ОтчетныйПериод + "__"
		+ КодыИФ.ДатаВыгрузки + ".xml";
	КонецЕсли;
	
	Возврат ИмяФайлаXML;
	
КонецФункции

&НаСервере
Функция СформироватьСтруктуруПараметров()
	
	Перем ПолученноеЗначение;
	
	ТабДокумент = мДанныеОтчета.ПолеТабличногоДокументаФормаОтчета;
	
	ДопАтрибуты = РегламентированнаяОтчетность.СформироватьСтруктуруДопАтрибутов(ЭтаФорма.ИмяФормы, "АтрибВыгрузкиXML2015Кв1");
	
	СтрокаСведений = "ФИОРук";
	СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(СтруктураРеквизитовФормы.Организация, СтруктураРеквизитовФормы.мСохраненныйДок.ДатаПодписи, СтрокаСведений);
	
	ПараметрыВыгрузки = Новый Структура;
	
	ДопАтрибуты.Свойство("code", ПолученноеЗначение);
	ПараметрыВыгрузки.Вставить("КодШаблона", ПолученноеЗначение);
	ДопАтрибуты.Свойство("idf", ПолученноеЗначение);
	ПараметрыВыгрузки.Вставить("КодФормы", ПолученноеЗначение);
	ДопАтрибуты.Свойство("shifr", ПолученноеЗначение);
	ПараметрыВыгрузки.Вставить("ШифрФормы", ПолученноеЗначение);
	ДопАтрибуты.Свойство("version", ПолученноеЗначение);
	ПараметрыВыгрузки.Вставить("ВерсияШаблона", ПолученноеЗначение);
	ДопАтрибуты.Свойство("format_version", ПолученноеЗначение);
	ПараметрыВыгрузки.Вставить("ВерсияФормата", ПолученноеЗначение);
	
	ОтчПериод  = Месяц(СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания);
	РасчПериод = Формат(Год(СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания),"ЧГ=0");
	
	ПараметрыВыгрузки.Вставить("ОКПО", СокрЛП(ТабДокумент.ОргКодОКПО));
	ПараметрыВыгрузки.Вставить("ОтчПериод", СокрЛП(ОтчПериод));
	ПараметрыВыгрузки.Вставить("РасчПериод", СокрЛП(РасчПериод));
	ПараметрыВыгрузки.Вставить("ОргНазв", СокрЛП(ТабДокумент.ОргНазв));
	ПараметрыВыгрузки.Вставить("ОргДиректор", СокрЛП(СведенияОбОрганизации.ФИОРук));
	ПараметрыВыгрузки.Вставить("ОргДолжностьИсп", СокрЛП(ТабДокумент.ОргДолжностьИсп));
	ПараметрыВыгрузки.Вставить("ОргИсполнитель", СокрЛП(ТабДокумент.ОргИсполнитель));
	ПараметрыВыгрузки.Вставить("ОргТелефонИсп", СокрЛП(ТабДокумент.ОргТелефонИсп));
	
	// Преобразование выгружаемых атрибутов, в соответствии
	// с форматом выгрузки статотчетности.
	ДопАтрибуты.Свойство("idp", ПолученноеЗначение);
	ПараметрыВыгрузки.Вставить("КодПериодичности", Число(СокрЛП(ПолученноеЗначение)));
	ПараметрыВыгрузки.Вставить("Документ", СтруктураРеквизитовФормы.мСохраненныйДок);
	
	РегламентированнаяОтчетность.АтрибутыВФорматеВыгрузки(ПараметрыВыгрузки);
	
	ПараметрыВыгрузки.Вставить("ИмяФайла", СформироватьИмяФайла(ПараметрыВыгрузки, ДопАтрибуты));
	
	ПараметрыВыгрузки.Вставить("ИмяКлючевогоУзлаСодержательнойЧасти", "row");
	
	// Для ПОСЛЕДУЮЩЕГО (ПЕРЕД ВЫГРУЗКОЙ) контроля показателей формы (Указания ФСН).
	// Раздел I.
	НомСтр = 1;
	Пока РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(ТабДокумент, "П000001000101_" + Формат(НомСтр, "ЧГ=")) Цикл
		ПараметрыВыгрузки.Вставить("П000001000101_" + Формат(НомСтр, "ЧГ="), ТабДокумент["П000001000101_" + Формат(НомСтр, "ЧГ=")]);
		ПараметрыВыгрузки.Вставить("П000001000103_" + Формат(НомСтр, "ЧГ="), ТабДокумент["П000001000103_" + Формат(НомСтр, "ЧГ=")]);
		ПараметрыВыгрузки.Вставить("П000001000104_" + Формат(НомСтр, "ЧГ="), ТабДокумент["П000001000104_" + Формат(НомСтр, "ЧГ=")]);
		ПараметрыВыгрузки.Вставить("П000001000105_" + Формат(НомСтр, "ЧГ="), ТабДокумент["П000001000105_" + Формат(НомСтр, "ЧГ=")]);
		ПараметрыВыгрузки.Вставить("П000001000106_" + Формат(НомСтр, "ЧГ="), ТабДокумент["П000001000106_" + Формат(НомСтр, "ЧГ=")]);
		ПараметрыВыгрузки.Вставить("П000001000107_" + Формат(НомСтр, "ЧГ="), ТабДокумент["П000001000107_" + Формат(НомСтр, "ЧГ=")]);
		ПараметрыВыгрузки.Вставить("П000001000108_" + Формат(НомСтр, "ЧГ="), ТабДокумент["П000001000108_" + Формат(НомСтр, "ЧГ=")]);
		ПараметрыВыгрузки.Вставить("П000001000109_" + Формат(НомСтр, "ЧГ="), ТабДокумент["П000001000109_" + Формат(НомСтр, "ЧГ=")]);
		ПараметрыВыгрузки.Вставить("П000001000110_" + Формат(НомСтр, "ЧГ="), ТабДокумент["П000001000110_" + Формат(НомСтр, "ЧГ=")]);
		ПараметрыВыгрузки.Вставить("П000001000111_" + Формат(НомСтр, "ЧГ="), ТабДокумент["П000001000111_" + Формат(НомСтр, "ЧГ=")]);
		ПараметрыВыгрузки.Вставить("П000001000112_" + Формат(НомСтр, "ЧГ="), ТабДокумент["П000001000112_" + Формат(НомСтр, "ЧГ=")]);
		ПараметрыВыгрузки.Вставить("П000001000113_" + Формат(НомСтр, "ЧГ="), ТабДокумент["П000001000113_" + Формат(НомСтр, "ЧГ=")]);
		НомСтр = НомСтр + 1;
	КонецЦикла;
	// Раздел II.
	НомСтр = 1;
	Пока РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(ТабДокумент, "П000002000101_" + Формат(НомСтр, "ЧГ=")) Цикл
		ПараметрыВыгрузки.Вставить("П000002000101_" + Формат(НомСтр, "ЧГ="), ТабДокумент["П000002000101_" + Формат(НомСтр, "ЧГ=")]);
		ПараметрыВыгрузки.Вставить("П000002000103_" + Формат(НомСтр, "ЧГ="), ТабДокумент["П000002000103_" + Формат(НомСтр, "ЧГ=")]);
		ПараметрыВыгрузки.Вставить("П000002000104_" + Формат(НомСтр, "ЧГ="), ТабДокумент["П000002000104_" + Формат(НомСтр, "ЧГ=")]);
		ПараметрыВыгрузки.Вставить("П000002000105_" + Формат(НомСтр, "ЧГ="), ТабДокумент["П000002000105_" + Формат(НомСтр, "ЧГ=")]);
		ПараметрыВыгрузки.Вставить("П000002000106_" + Формат(НомСтр, "ЧГ="), ТабДокумент["П000002000106_" + Формат(НомСтр, "ЧГ=")]);
		ПараметрыВыгрузки.Вставить("П000002000107_" + Формат(НомСтр, "ЧГ="), ТабДокумент["П000002000107_" + Формат(НомСтр, "ЧГ=")]);
		ПараметрыВыгрузки.Вставить("П000002000108_" + Формат(НомСтр, "ЧГ="), ТабДокумент["П000002000108_" + Формат(НомСтр, "ЧГ=")]);
		ПараметрыВыгрузки.Вставить("П000002000109_" + Формат(НомСтр, "ЧГ="), ТабДокумент["П000002000109_" + Формат(НомСтр, "ЧГ=")]);
		ПараметрыВыгрузки.Вставить("П000002000110_" + Формат(НомСтр, "ЧГ="), ТабДокумент["П000002000110_" + Формат(НомСтр, "ЧГ=")]);
		ПараметрыВыгрузки.Вставить("П000002000111_" + Формат(НомСтр, "ЧГ="), ТабДокумент["П000002000111_" + Формат(НомСтр, "ЧГ=")]);
		ПараметрыВыгрузки.Вставить("П000002000112_" + Формат(НомСтр, "ЧГ="), ТабДокумент["П000002000112_" + Формат(НомСтр, "ЧГ=")]);
		ПараметрыВыгрузки.Вставить("П000002000113_" + Формат(НомСтр, "ЧГ="), ТабДокумент["П000002000113_" + Формат(НомСтр, "ЧГ=")]);
		ПараметрыВыгрузки.Вставить("П000002000114_" + Формат(НомСтр, "ЧГ="), ТабДокумент["П000002000114_" + Формат(НомСтр, "ЧГ=")]);
		НомСтр = НомСтр + 1;
	КонецЦикла;
	// Раздел "Справочно".
	НомСтр = 1;
	Пока РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(ТабДокумент, "П000102000101_" + Формат(НомСтр, "ЧГ=")) Цикл
		ПараметрыВыгрузки.Вставить("П000102000101_" + Формат(НомСтр, "ЧГ="), ТабДокумент["П000102000101_" + Формат(НомСтр, "ЧГ=")]);
		ПараметрыВыгрузки.Вставить("П000102000103_" + Формат(НомСтр, "ЧГ="), ТабДокумент["П000102000103_" + Формат(НомСтр, "ЧГ=")]);
		ПараметрыВыгрузки.Вставить("П000102000104_" + Формат(НомСтр, "ЧГ="), ТабДокумент["П000102000104_" + Формат(НомСтр, "ЧГ=")]);
		ПараметрыВыгрузки.Вставить("П000102000105_" + Формат(НомСтр, "ЧГ="), ТабДокумент["П000102000105_" + Формат(НомСтр, "ЧГ=")]);
		ПараметрыВыгрузки.Вставить("П000102000106_" + Формат(НомСтр, "ЧГ="), ТабДокумент["П000102000106_" + Формат(НомСтр, "ЧГ=")]);
		НомСтр = НомСтр + 1;
	КонецЦикла;
	// Раздел III.
	НомСтр = 1;
	Пока РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(ТабДокумент, "П000003000101_" + Формат(НомСтр, "ЧГ=")) Цикл
		ПараметрыВыгрузки.Вставить("П000003000101_" + Формат(НомСтр, "ЧГ="), ТабДокумент["П000003000101_" + Формат(НомСтр, "ЧГ=")]);
		ПараметрыВыгрузки.Вставить("П000003000103_" + Формат(НомСтр, "ЧГ="), ТабДокумент["П000003000103_" + Формат(НомСтр, "ЧГ=")]);
		ПараметрыВыгрузки.Вставить("П000003000104_" + Формат(НомСтр, "ЧГ="), ТабДокумент["П000003000104_" + Формат(НомСтр, "ЧГ=")]);
		ПараметрыВыгрузки.Вставить("П000003000105_" + Формат(НомСтр, "ЧГ="), ТабДокумент["П000003000105_" + Формат(НомСтр, "ЧГ=")]);
		ПараметрыВыгрузки.Вставить("П000003000106_" + Формат(НомСтр, "ЧГ="), ТабДокумент["П000003000106_" + Формат(НомСтр, "ЧГ=")]);
		ПараметрыВыгрузки.Вставить("П000003000107_" + Формат(НомСтр, "ЧГ="), ТабДокумент["П000003000107_" + Формат(НомСтр, "ЧГ=")]);
		ПараметрыВыгрузки.Вставить("П000003000108_" + Формат(НомСтр, "ЧГ="), ТабДокумент["П000003000108_" + Формат(НомСтр, "ЧГ=")]);
		ПараметрыВыгрузки.Вставить("П000003000109_" + Формат(НомСтр, "ЧГ="), ТабДокумент["П000003000109_" + Формат(НомСтр, "ЧГ=")]);
		ПараметрыВыгрузки.Вставить("П000003000110_" + Формат(НомСтр, "ЧГ="), ТабДокумент["П000003000110_" + Формат(НомСтр, "ЧГ=")]);
		ПараметрыВыгрузки.Вставить("П000003000111_" + Формат(НомСтр, "ЧГ="), ТабДокумент["П000003000111_" + Формат(НомСтр, "ЧГ=")]);
		НомСтр = НомСтр + 1;
	КонецЦикла;
	// Раздел IV.
	НомСтр = 1;
	Пока РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(ТабДокумент, "П000004000101_" + Формат(НомСтр, "ЧГ=")) Цикл
		ПараметрыВыгрузки.Вставить("П000004000101_" + Формат(НомСтр, "ЧГ="), ТабДокумент["П000004000101_" + Формат(НомСтр, "ЧГ=")]);
		ПараметрыВыгрузки.Вставить("П000004000103_" + Формат(НомСтр, "ЧГ="), ТабДокумент["П000004000103_" + Формат(НомСтр, "ЧГ=")]);
		ПараметрыВыгрузки.Вставить("П000004000104_" + Формат(НомСтр, "ЧГ="), ТабДокумент["П000004000104_" + Формат(НомСтр, "ЧГ=")]);
		ПараметрыВыгрузки.Вставить("П000004000105_" + Формат(НомСтр, "ЧГ="), ТабДокумент["П000004000105_" + Формат(НомСтр, "ЧГ=")]);
		ПараметрыВыгрузки.Вставить("П000004000106_" + Формат(НомСтр, "ЧГ="), ТабДокумент["П000004000106_" + Формат(НомСтр, "ЧГ=")]);
		ПараметрыВыгрузки.Вставить("П000004000107_" + Формат(НомСтр, "ЧГ="), ТабДокумент["П000004000107_" + Формат(НомСтр, "ЧГ=")]);
		ПараметрыВыгрузки.Вставить("П000004000108_" + Формат(НомСтр, "ЧГ="), ТабДокумент["П000004000108_" + Формат(НомСтр, "ЧГ=")]);
		ПараметрыВыгрузки.Вставить("П000004000109_" + Формат(НомСтр, "ЧГ="), ТабДокумент["П000004000109_" + Формат(НомСтр, "ЧГ=")]);
		ПараметрыВыгрузки.Вставить("П000004000110_" + Формат(НомСтр, "ЧГ="), ТабДокумент["П000004000110_" + Формат(НомСтр, "ЧГ=")]);
		ПараметрыВыгрузки.Вставить("П000004000111_" + Формат(НомСтр, "ЧГ="), ТабДокумент["П000004000111_" + Формат(НомСтр, "ЧГ=")]);
		ПараметрыВыгрузки.Вставить("П000004000112_" + Формат(НомСтр, "ЧГ="), ТабДокумент["П000004000112_" + Формат(НомСтр, "ЧГ=")]);
		ПараметрыВыгрузки.Вставить("П000004000113_" + Формат(НомСтр, "ЧГ="), ТабДокумент["П000004000113_" + Формат(НомСтр, "ЧГ=")]);
		НомСтр = НомСтр + 1;
	КонецЦикла;
	
	Возврат ПараметрыВыгрузки;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ СТЫКОВКИ С СЕРВИСОМ СДАЧИ ОТЧЕТНОСТИ ЧЕРЕЗ ПРЕДСТАВИТЕЛЯ

&НаКлиенте
Процедура ОтправитьЧерезПредставителя(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОтправитьЧерезПредставителяЗавершение", ЭтотОбъект);

	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьЧерезПредставителяЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ПриНажатииНаКнопкуОтправкиЧерезПредставителяВРегламентированномОтчете(ЭтаФорма, "ФСГС");
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВИнтернете(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьВИнтернетеЗавершение", ЭтотОбъект);

	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
		
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВИнтернетеЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ПроверитьВИнтернете(ЭтаФорма, "ФСГС");
	
КонецПроцедуры

&НаКлиенте
Процедура Расшифровать(Команда)
	ПараметрыОтчета = Новый Структура();
	ПараметрыОтчета.Вставить("Организация",                         СтруктураРеквизитовФормы.Организация);
	ПараметрыОтчета.Вставить("мДатаНачалаПериодаОтчета",            СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
	ПараметрыОтчета.Вставить("мДатаКонцаПериодаОтчета",             СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	ПараметрыОтчета.Вставить("АдресВременногоХранилищаРасшифровки", СтруктураРеквизитовФормы.АдресВременногоХранилищаРасшифровки);
	
	ИДИменПоказателей = Новый Массив();
	ИДИменПоказателей.Добавить(Элементы.ПолеТабличногоДокументаФормаОтчета.ТекущаяОбласть.Имя);
	
	ЭтаФормаИмя = ЭтаФорма.ИмяФормы;
	Если СтрЧислоВхождений(ЭтаФормаИмя, "ВнешнийОтчет.") > 0 Тогда
		ЭтаФормаИмя = СтрЗаменить(ЭтаФормаИмя, "ВнешнийОтчет.", "");
	ИначеЕсли СтрЧислоВхождений(ЭтаФормаИмя, "Отчет.") > 0 Тогда
		ЭтаФормаИмя = СтрЗаменить(ЭтаФормаИмя, "Отчет.", "");
	КонецЕсли;
	ИДОтчета = Лев(ЭтаФормаИмя, СтрНайти(ЭтаФормаИмя, ".Форма.") - 1);
	ИДРедакцииОтчета = Сред(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, ".Форма.") + 7);
	
	РегламентированнаяОтчетностьКлиент.ОткрытьРасшифровкуОтчета(ИДОтчета, ИДРедакцииОтчета, ИДИменПоказателей, ПараметрыОтчета);
КонецПроцедуры

&НаКлиенте
Процедура НастроитьЗаполнение(Команда)
	РегламентированнаяОтчетностьКлиент.НастроитьЗаполнение(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура НастроитьЗаполнениеТекущегоПоказателя(Команда)
	РегламентированнаяОтчетностьКлиент.НастроитьЗаполнениеТекущегоПоказателя(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЦветФонаЯчейкиНаКлиенте(ИмяЯчейки = Неопределено, ВариантЗаполнения = Неопределено, ИмяТекущейСтраницыПанели = Неопределено) Экспорт
	
	УстановитьЦветФонаЯчейки(ЭтаФорма, ИмяЯчейки, ВариантЗаполнения, ИмяТекущейСтраницыПанели);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЦветФонаЯчейкиНаСервере(ИмяЯчейки = Неопределено, ВариантЗаполнения = Неопределено, ИмяТекущейСтраницыПанели = Неопределено) Экспорт
	
	УстановитьЦветФонаЯчейки(ЭтаФорма, ИмяЯчейки, ВариантЗаполнения, ИмяТекущейСтраницыПанели);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УстановитьЦветФонаЯчейки(Форма, ИмяЯчейки = Неопределено, ВариантЗаполнения = Неопределено, ИмяТекущейСтраницыПанели = Неопределено) Экспорт
	
	Перем ЦветФона;
	Перем Комментарий;
	
	// Не нужно разукрашивать табличные поля, если открывается без открытия формы (например печать или просмотр)
	Если Форма.СтруктураРеквизитовФормы.мБезОткрытияФормы ИЛИ Форма.СтруктураРеквизитовФормы.мРежимПечати Тогда
		Возврат;
	КонецЕсли;
	
	Если ИмяЯчейки <> Неопределено Тогда
		// устанавливаем цвет фона конкретной ячейки
		
		ИмяПоляТаблДокумента = "ПолеТабличногоДокументаФормаОтчета";
		
		Ключ = "_" + ВариантЗаполнения;
		Форма.мСтруктураЦветовРаскраски.Свойство(Ключ, ЦветФона);
		
		// КодПоказателяПоСтруктуре
		ЗначениеВКвадратах = РегламентированнаяОтчетностьКлиентСервер.ОбластьЯвляетсяЯчейкойСоставногоПоля(Форма, ИмяЯчейки);
		
		Если ВариантЗаполнения = 4 ИЛИ ВариантЗаполнения = 5 Тогда
			
			Если ЗначениеВКвадратах Тогда
				// если ЗНАЧЕНИЕ КВАДРАТИЧНОЕ
				РегламентированнаяОтчетностьКлиентСервер.СвойстваГрупповыхЗначений(Форма, ИмяЯчейки, "УстановитьЗащиту");
			Иначе
				Форма[ИмяПоляТаблДокумента].Области[ИмяЯчейки].Защита = Истина;
			КонецЕсли;
			
		Иначе
			
			Если ЗначениеВКвадратах Тогда
				// если ЗНАЧЕНИЕ КВАДРАТИЧНОЕ
				РегламентированнаяОтчетностьКлиентСервер.СвойстваГрупповыхЗначений(Форма, ИмяЯчейки, "СнятьЗащиту");
			Иначе
				Форма[ИмяПоляТаблДокумента].Области[ИмяЯчейки].Защита = Ложь;
			КонецЕсли;
			
		КонецЕсли;
		
		// установим цвет ячейки
		Если ЗначениеВКвадратах Тогда
			РегламентированнаяОтчетностьКлиентСервер.СвойстваГрупповыхЗначений(Форма, ИмяЯчейки, "ПроставитьЦветРаскраски", ЦветФона);
		Иначе
			Форма[ИмяПоляТаблДокумента].Области[ИмяЯчейки].ЦветФона = ЦветФона;
		КонецЕсли;
		
	Иначе
		// устанавливаем цвет фона всех автозаполняемых ячеек активной страницы
		
		ТаблицаВариантыЗаполнения = РегламентированнаяОтчетностьВызовСервера.ПолучитьТаблицуВариантовЗаполненияНаСервере(Форма, ИмяТекущейСтраницыПанели);
		
		Если ТаблицаВариантыЗаполнения = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Для Каждого Строка Из ТаблицаВариантыЗаполнения Цикл
			ИмяПоказателя            = Строка.КодПоказателя;
			ВариантЗаполнения        = Строка.ВариантЗаполнения;
			Комментарий              = Строка.Комментарий;
			КодПоказателяПоСтруктуре = Строка.КодПоказателяПоСтруктуре;
			
			КолвоСтрокВМногострочнойЧасти = РегламентированнаяОтчетностьКлиентСервер.ПоказательВходитВМногострочнуюЧасть(Форма, ИмяПоказателя);
			
			Если КолвоСтрокВМногострочнойЧасти > 0 Тогда
				Многострочность = Истина;
				БазоваяЧасть = ИмяПоказателя;
				ОписанияБлоков = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСвойствоРаздела(Форма, ИмяТекущейСтраницыПанели, "МногострочностьВРазделе");
				
				Если ТипЗнч(ОписанияБлоков) = Тип("Число") Тогда
					ВБлокеВсеПоказателиЗаполняются = Истина;
				ИначеЕсли ТипЗнч(ОписанияБлоков) = Тип("ДанныеФормыКоллекция") Тогда
					ИмяГруппы = Сред(ИмяПоказателя, 1, 11);
					ВБлокеВсеПоказателиЗаполняются = НЕ ОписанияБлоков.НайтиСтроки(Новый Структура("ИдГруппы", ИмяГруппы))[0].НезаполняемыеПоказателиЕсть;
				КонецЕсли;
				
			Иначе
				Многострочность = Ложь;
				ВБлокеВсеПоказателиЗаполняются = Истина;
				КолвоСтрокВМногострочнойЧасти = 1;
			КонецЕсли;
			
			Для Инд = 1 по КолвоСтрокВМногострочнойЧасти Цикл
				
				Если Многострочность Тогда
					ИмяПоказателя = БазоваяЧасть + "_" + Формат(Инд, "ЧГ=0");
				КонецЕсли;
				
				ТекОбластьЯчеек = Форма.ПолеТабличногоДокументаФормаОтчета.Области[ИмяПоказателя];
				Если (Не ПустаяСтрока(Комментарий)) ИЛИ (Не ПустаяСтрока(ТекОбластьЯчеек.Примечание.Текст)) Тогда
					ТекОбластьЯчеек.Примечание.Текст = Комментарий;
				КонецЕсли;
				
				Ключ = "_" + ВариантЗаполнения;
				Форма.мСтруктураЦветовРаскраски.Свойство(Ключ, ЦветФона);
				
				ЗначениеВКвадратах = ?(ПустаяСтрока(КодПоказателяПоСтруктуре), Ложь, Истина);
				
				Если ВариантЗаполнения = 4 ИЛИ ВариантЗаполнения = 5 Тогда
					
					Если ЗначениеВКвадратах Тогда
						// если ЗНАЧЕНИЕ КВАДРАТИЧНОЕ
						РегламентированнаяОтчетностьКлиентСервер.СвойстваГрупповыхЗначений(Форма, ИмяПоказателя, "УстановитьЗащиту");
					Иначе
						Форма.ПолеТабличногоДокументаФормаОтчета.Области[ИмяПоказателя].Защита = Истина;
					КонецЕсли;
					
				Иначе
					
					Если ЗначениеВКвадратах Тогда
						// если ЗНАЧЕНИЕ КВАДРАТИЧНОЕ
						РегламентированнаяОтчетностьКлиентСервер.СвойстваГрупповыхЗначений(Форма, ИмяПоказателя, "СнятьЗащиту");
					Иначе
						Форма.ПолеТабличногоДокументаФормаОтчета.Области[ИмяПоказателя].Защита = Ложь;
					КонецЕсли;
				КонецЕсли;
				
				Если ЗначениеВКвадратах Тогда
					РегламентированнаяОтчетностьКлиентСервер.СвойстваГрупповыхЗначений(Форма, ИмяПоказателя, "ПроставитьЦветРаскраски", ЦветФона);
				Иначе
					Форма.ПолеТабличногоДокументаФормаОтчета.Области[ИмяПоказателя].ЦветФона = ЦветФона;
				КонецЕсли;
			КонецЦикла;
			
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьФорматВыводаВПоляхВвода(Форма, НаимРаздела = "") Экспорт
	
	Перем СтруктураГруппы;
	
	Если Форма.СтруктураРеквизитовФормы.ЕдиницаИзмерения = Форма.ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1 Тогда
		Форма.СтруктураРеквизитовФормы.мСтрокаФормата = "; ЧДЦ = " + Форма.СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧС = 0";
	ИначеЕсли Форма.СтруктураРеквизитовФормы.ЕдиницаИзмерения = Форма.ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1000 Тогда
		Форма.СтруктураРеквизитовФормы.мСтрокаФормата = "; ЧДЦ = " + Форма.СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧС = 3";
	ИначеЕсли Форма.СтруктураРеквизитовФормы.ЕдиницаИзмерения = Форма.ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1000000 Тогда
		Форма.СтруктураРеквизитовФормы.мСтрокаФормата = "; ЧДЦ = " + Форма.СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧС = 6";
	КонецЕсли;
	
	Для Каждого СтрПоказатели Из Форма.мТаблицаСоставПоказателей Цикл
		
		Если НЕ ПустаяСтрока(НаимРаздела) И НаимРаздела <> СтрПоказатели.ИмяПоляТаблДокумента Тогда
			Продолжить;
		КонецЕсли;
		
		КодПоказателя				= СокрП(СтрПоказатели.КодПоказателяПоСоставу);
		ПризнМногострочность		= СокрП(СтрПоказатели.ПризнМногострочности);
		КодПоказателяПоСтруктуре	= СокрП(СтрПоказатели.КодПоказателяПоСтруктуре);
		КодПоказателяПоФорме		= СокрП(СтрПоказатели.КодПоказателяПоФорме);
		ТипДанныхПоказателя			= СокрП(СтрПоказатели.ТипДанныхПоказателя);
		ИмяПоказателя				= ?(ПустаяСтрока(СтрПоказатели.КодПоказателяПоФорме), КодПоказателя, КодПоказателяПоФорме);
		
		Если ПустаяСтрока(КодПоказателя) ИЛИ КодПоказателя = "===" ИЛИ КодПоказателя = "###" ИЛИ Лев(КодПоказателя, 2) = "//" Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТипДанныхПоказателя = "Е" И ПустаяСтрока(КодПоказателяПоСтруктуре) Тогда
			ТекТабличноеПоле = Форма.ПолеТабличногоДокументаФормаОтчета;
			Если ПризнМногострочность <> "/" Тогда
				ФорматируемаяОбласть = ТекТабличноеПоле.Области[ИмяПоказателя];
				ДопустимыйЗнакПоказателя = ФорматируемаяОбласть.ТипЗначения.КвалификаторыЧисла.ДопустимыйЗнак;
				ЧислоЕЗнак = Форма.СтруктураРеквизитовФормы.мОписаниеТиповЧислоЕ;
				
				Если ДопустимыйЗнакПоказателя = ДопустимыйЗнак.Неотрицательный Тогда
					ЧислоЕЗнак = Новый ОписаниеТипов("Число",
					Новый КвалификаторыЧисла(ЧислоЕЗнак.КвалификаторыЧисла.Разрядность, ЧислоЕЗнак.КвалификаторыЧисла.РазрядностьДробнойЧасти, ДопустимыйЗнакПоказателя));
				КонецЕсли;
				ФорматируемаяОбласть.ТипЗначения = ЧислоЕЗнак;
				ФорматируемаяОбласть.Формат = "ЧЦ = " + ЧислоЕЗнак.КвалификаторыЧисла.Разрядность + Форма.СтруктураРеквизитовФормы.мСтрокаФормата;
			Иначе
				// определяем кол-во строк многострочного раздела и применяем процедуру форматирования к данной графе по всем строкам
				НСтр = 1;
				Пока ТекТабличноеПоле.Области.Найти(ИмяПоказателя + "_" + Формат(НСтр, "ЧГ=0")) <> Неопределено Цикл
					ФорматируемаяОбласть = ТекТабличноеПоле.Области[ИмяПоказателя + "_" + Формат(НСтр, "ЧГ=0")];
					ДопустимыйЗнакПоказателя = ФорматируемаяОбласть.ТипЗначения.КвалификаторыЧисла.ДопустимыйЗнак;
					ЧислоЕЗнак = Форма.СтруктураРеквизитовФормы.мОписаниеТиповЧислоЕ;
					Если ДопустимыйЗнакПоказателя = ДопустимыйЗнак.Неотрицательный Тогда
						ЧислоЕЗнак = Новый ОписаниеТипов("Число",
						Новый КвалификаторыЧисла(ЧислоЕЗнак.КвалификаторыЧисла.Разрядность, ЧислоЕЗнак.КвалификаторыЧисла.РазрядностьДробнойЧасти, ДопустимыйЗнакПоказателя));
					КонецЕсли;
					ФорматируемаяОбласть.ТипЗначения = ЧислоЕЗнак;
					ФорматируемаяОбласть.Формат = "ЧЦ = " + ЧислоЕЗнак.КвалификаторыЧисла.Разрядность + Форма.СтруктураРеквизитовФормы.мСтрокаФормата;
					НСтр = НСтр + 1;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьПодготовленныеДанные()
	
	Перем ТаблицаГруппы;
	Контейнер = РегламентированнаяОтчетность.ПолучитьДанныеАвтозаполненияСтатистическогоОтчета(ЭтаФорма);
	Если Контейнер = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ИдентификаторЗадания = Неопределено;
	ТекТабличноеПоле     = ЭтаФорма["ПолеТабличногоДокументаФормаОтчета"];
	ТекТабличноеПоле.Очистить();
	ТекТабличноеПоле.Вывести(
	Отчеты[Сред(Лев(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, ".Форма.") - 1), 7)].ПолучитьМакет("ФормаОтчета2015Кв1_ФормаОтчета"));
	
	ИмяГруппы1 = СтруктураРеквизитовФормы.мИдГруппы1;
	Если Контейнер.Свойство("ПолеТабличногоДокументаФормаОтчета_ДанныеДопСтрок1", ТаблицаГруппы) И ТаблицаГруппы <> Неопределено Тогда
		КонвертированнаяТаблицаГруппы = РегламентированнаяОтчетность.КонвертированныеЗначенияПоказателейСтатистическойОтчетности(ЭтаФорма, ТаблицаГруппы);
		ЗначениеВДанныеФормы(КонвертированнаяТаблицаГруппы, ЭтаФорма[ИмяГруппы1]);
		ВывестиРазделВТабличныйДокументНаСервере(ИмяГруппы1, ЭтаФорма[ИмяГруппы1]);
	КонецЕсли;
	ИмяГруппы2 = СтруктураРеквизитовФормы.мИдГруппы2;
	Если Контейнер.Свойство("ПолеТабличногоДокументаФормаОтчета_ДанныеДопСтрок2", ТаблицаГруппы) И ТаблицаГруппы <> Неопределено Тогда
		КонвертированнаяТаблицаГруппы = РегламентированнаяОтчетность.КонвертированныеЗначенияПоказателейСтатистическойОтчетности(ЭтаФорма, ТаблицаГруппы);
		ЗначениеВДанныеФормы(КонвертированнаяТаблицаГруппы, ЭтаФорма[ИмяГруппы2]);
		ВывестиРазделВТабличныйДокументНаСервере(ИмяГруппы2, ЭтаФорма[ИмяГруппы2]);
	КонецЕсли;
	ИмяГруппы3 = СтруктураРеквизитовФормы.мИдГруппы3;
	Если Контейнер.Свойство("ПолеТабличногоДокументаФормаОтчета_ДанныеДопСтрок3", ТаблицаГруппы) И ТаблицаГруппы <> Неопределено Тогда
		КонвертированнаяТаблицаГруппы = РегламентированнаяОтчетность.КонвертированныеЗначенияПоказателейСтатистическойОтчетности(ЭтаФорма, ТаблицаГруппы);
		ЗначениеВДанныеФормы(КонвертированнаяТаблицаГруппы, ЭтаФорма[ИмяГруппы3]);
		ВывестиРазделВТабличныйДокументНаСервере(ИмяГруппы3, ЭтаФорма[ИмяГруппы3]);
	КонецЕсли;
	ИмяГруппы4 = СтруктураРеквизитовФормы.мИдГруппы4;
	Если Контейнер.Свойство("ПолеТабличногоДокументаФормаОтчета_ДанныеДопСтрок4", ТаблицаГруппы) И ТаблицаГруппы <> Неопределено Тогда
		КонвертированнаяТаблицаГруппы = РегламентированнаяОтчетность.КонвертированныеЗначенияПоказателейСтатистическойОтчетности(ЭтаФорма, ТаблицаГруппы);
		ЗначениеВДанныеФормы(КонвертированнаяТаблицаГруппы, ЭтаФорма[ИмяГруппы4]);
		ВывестиРазделВТабличныйДокументНаСервере(ИмяГруппы4, ЭтаФорма[ИмяГруппы4]);
	КонецЕсли;
	ИмяГруппы5 = СтруктураРеквизитовФормы.мИдГруппы5;
	Если Контейнер.Свойство("ПолеТабличногоДокументаФормаОтчета_ДанныеДопСтрок5", ТаблицаГруппы) И ТаблицаГруппы <> Неопределено Тогда
		КонвертированнаяТаблицаГруппы = РегламентированнаяОтчетность.КонвертированныеЗначенияПоказателейСтатистическойОтчетности(ЭтаФорма, ТаблицаГруппы);
		ЗначениеВДанныеФормы(КонвертированнаяТаблицаГруппы, ЭтаФорма[ИмяГруппы5]);
		ВывестиРазделВТабличныйДокументНаСервере(ИмяГруппы5, ЭтаФорма[ИмяГруппы5]);
	КонецЕсли;
	
	
	Для Каждого ПоказателиСтраницы Из Контейнер Цикл
		Если ТипЗнч(ПоказателиСтраницы.Значение) <> Тип("Структура") Тогда
			Продолжить;
		КонецЕсли;
		ПоказателиТаблПоле = РегламентированнаяОтчетность.КонвертированныеЗначенияПоказателейСтатистическойОтчетности(ЭтаФорма, ПоказателиСтраницы.Значение);
		Для Каждого Показатель Из ПоказателиТаблПоле Цикл
			ИмяПоказателя       = Показатель.Ключ;
			ЗначениеПоказателя  = Показатель.Значение;
			// установим значение в таблице
			Попытка
				Если Лев(ИмяПоказателя, 2) = "ЧН" Тогда
					// значение показателя с префиксом "ЧН" содержит формат представления нуля
					ОбластьПоказателя = ТекТабличноеПоле.Области[Сред(ИмяПоказателя, 3)];
					ОбластьПоказателя.Формат = РегламентированнаяОтчетностьКлиентСервер.ЗаменитьПредставлениеНуляВСтрокеФормата(ОбластьПоказателя.Формат, ЗначениеПоказателя);
					Продолжить;
				КонецЕсли;
				ТекТабличноеПоле.Области[ИмяПоказателя].Значение = ЗначениеПоказателя;
			Исключение
			КонецПопытки;
		КонецЦикла;
	КонецЦикла;
	
	СтруктураРеквизитовФормы.мАдресвФорматеДляВыгрузки = ПолеТабличногоДокументаФормаОтчета.Области.ОргАдрес.Значение;
	ПолеТабличногоДокументаФормаОтчета.Области.ОргАдрес.Значение =
	РегламентированнаяОтчетностьКлиентСервер.ПредставлениеАдресаВФормате9Запятых(СтруктураРеквизитовФормы.мАдресвФорматеДляВыгрузки);
	
	РегламентированнаяОтчетность.УстановитьЦветФорматДоступностьЯчеек(ЭтаФорма);
	Модифицированность = Истина;
	
	ЭтаФорма.Доступность = Истина;
	ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.ПолеТабличногоДокументаФормаОтчета, "НеИспользовать");
	
КонецПроцедуры

&НаСервере
Функция ЗаполнитьАвтоНаСервере()
	
	ПоказателиОтчета = Новый Структура();
	ЗаполнитьПоказателиОтчетаНаСервере(ПоказателиОтчета);
	
	ПараметрыОтчета = Новый Структура();
	ПараметрыОтчета.Вставить("Организации", Неопределено);
	ПараметрыОтчета.Вставить("ЗаполняетсяВЦеломПоОрганизации", Ложь);
	ПараметрыОтчета.Вставить("ЗаполняетсяПоКаждомуОП", Истина);
	ПараметрыОтчета.Вставить("Организация",                  СтруктураРеквизитовФормы.Организация);
	ПараметрыОтчета.Вставить("мДатаНачалаПериодаОтчета",     НачалоКвартала(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета));
	ПараметрыОтчета.Вставить("мДатаКонцаПериодаОтчета",      СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	ПараметрыОтчета.Вставить("Периодичность",                СтруктураРеквизитовФормы.мПериодичность);
	ПараметрыОтчета.Вставить("УникальныйИдентификаторФормы", ЭтаФорма.УникальныйИдентификатор);
	ПараметрыОтчета.Вставить("АдресВременногоХранилищаРасшифровки"); // Адрес временного хранилища, где размещена расшифровка результата автозаполнения.
	
	Контейнер = Новый Структура();
	Для каждого ЭлементСтруктуры Из ПоказателиОтчета Цикл
		Контейнер.Вставить(ЭлементСтруктуры.Ключ, РегламентированнаяОтчетность.КонвертированныеЗначенияПоказателейСтатистическойОтчетности(ЭтаФорма, ЭлементСтруктуры.Значение, Ложь));
	КонецЦикла;
	
	ЭтаФормаИмя = ЭтаФорма.ИмяФормы;
	Если СтрЧислоВхождений(ЭтаФормаИмя, "ВнешнийОтчет.") > 0 Тогда
		ЭтаФормаИмя = СтрЗаменить(ЭтаФормаИмя, "ВнешнийОтчет.", "");
	ИначеЕсли СтрЧислоВхождений(ЭтаФормаИмя, "Отчет.") > 0 Тогда
		ЭтаФормаИмя = СтрЗаменить(ЭтаФормаИмя, "Отчет.", "");
	КонецЕсли;
	ИДОтчета = Лев(ЭтаФормаИмя, СтрНайти(ЭтаФормаИмя, ".Форма.") - 1);
	ИДРедакцииОтчета = Сред(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, ".Форма.") + 7);
	
	Если СтруктураРеквизитовФормы.ИнформационнаяБазаФайловая Тогда
		АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
		РегламентированнаяОтчетностьПереопределяемый.ЗаполнитьОтчетВФоне(
		Новый Структура("ИДОтчета, ИДРедакцииОтчета, ПараметрыОтчета, Контейнер", ИДОтчета, ИДРедакцииОтчета, ПараметрыОтчета, Контейнер),
		АдресХранилища);
		РезультатВыполнения = Новый Структура("ЗаданиеВыполнено", Истина);
	Иначе
		РезультатВыполнения = ДлительныеОперации.ЗапуститьВыполнениеВФоне(
		УникальныйИдентификатор, 
		"РегламентированнаяОтчетностьПереопределяемый.ЗаполнитьОтчетВФоне",
		Новый Структура("ИДОтчета, ИДРедакцииОтчета, ПараметрыОтчета, Контейнер", ИДОтчета, ИДРедакцииОтчета, ПараметрыОтчета, Контейнер),
		НСтр("ru = 'Выполняется автоматическое заполнение отчета. Пожалуйста, подождите...'"));
		
		АдресХранилища       = РезультатВыполнения.АдресХранилища;
		ИдентификаторЗадания = РезультатВыполнения.ИдентификаторЗадания;
	КонецЕсли;
	
	Если РезультатВыполнения.ЗаданиеВыполнено Тогда
		ЗагрузитьПодготовленныеДанные();
	КонецЕсли;
	
	Возврат РезультатВыполнения;
	
КонецФункции

&НаКлиенте
Процедура Заполнить(Команда)
	ОтключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания");
	
	ЭтаФормаИмя = ЭтаФорма.ИмяФормы;
	Если СтрЧислоВхождений(ЭтаФормаИмя, "ВнешнийОтчет.") > 0 Тогда
		ЭтаФормаИмя = СтрЗаменить(ЭтаФормаИмя, "ВнешнийОтчет.", "");
	ИначеЕсли СтрЧислоВхождений(ЭтаФормаИмя, "Отчет.") > 0 Тогда
		ЭтаФормаИмя = СтрЗаменить(ЭтаФормаИмя, "Отчет.", "");
	КонецЕсли;
	ИДОтчета = Лев(ЭтаФормаИмя, СтрНайти(ЭтаФормаИмя, ".Форма.") - 1);
	ИДРедакцииОтчета = Сред(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, ".Форма.") + 7);
	
	ПараметрыОтчета = Новый Структура();
	ПараметрыОтчета.Вставить("Организация",      СтруктураРеквизитовФормы.Организация);
	ПараметрыОтчета.Вставить("Периодичность",    СтруктураРеквизитовФормы.мПериодичность);
	ПараметрыОтчета.Вставить("ИДРедакцииОтчета", ИДРедакцииОтчета);
	ПараметрыОтчета.Вставить("ИДОтчета", 		 ИДОтчета);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьЗавершение", ЭтотОбъект);
	СтандартнаяОбработкаПроверки = Истина;
	РегламентированнаяОтчетностьКлиентПереопределяемый.ПроверитьНастройкиАвтозаполненияОтчета(ПараметрыОтчета, ОписаниеОповещения, СтандартнаяОбработкаПроверки);
	Если СтандартнаяОбработкаПроверки Тогда 
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Ложь Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураРеквизитовФормы.ИнформационнаяБазаФайловая Тогда
		Состояние(НСтр("ru = 'Выполняется автоматическое заполнение отчета. Пожалуйста, подождите...'"));
	КонецЕсли;
	
	ЭтаФорма.Доступность = Ложь;
	ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.ПолеТабличногоДокументаФормаОтчета, "ФормированиеОтчета");
	РезультатВыполнения = ЗаполнитьАвтоНаСервере();
	Если НЕ РезультатВыполнения.ЗаданиеВыполнено Тогда
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
	КонецЕсли;
	
	Если Элементы.Расшифровать.Видимость Тогда
		Элементы.Расшифровать.Доступность = Истина;
	КонецЕсли;
	
	Если СтруктураРеквизитовФормы.ИнформационнаяБазаФайловая Тогда
		Состояние(НСтр("ru = 'Автоматическое заполнение выполнено.'"));
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеЗадания()
	
	Попытка
		Если НЕ ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
			ЭтаФорма.Доступность = Истина;
			ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.ПолеТабличногоДокументаФормаОтчета, "НеИспользовать");
		ИначеЕсли ЗаданиеВыполнено(ИдентификаторЗадания) Тогда
			ЗагрузитьПодготовленныеДанные();
		Иначе
			ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
			ПодключитьОбработчикОжидания(
			"Подключаемый_ПроверитьВыполнениеЗадания", 
			ПараметрыОбработчикаОжидания.ТекущийИнтервал, 
			Истина);
		КонецЕсли;
	Исключение
		ЭтаФорма.Доступность = Истина;
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.ПолеТабличногоДокументаФормаОтчета, "НеИспользовать");
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаданиеВыполнено(ИдентификаторЗадания)
	
	Возврат ДлительныеОперации.ЗаданиеВыполнено(ИдентификаторЗадания);
	
КонецФункции

#Область ПанельОтправкиВКонтролирующиеОрганы

&НаКлиенте
Процедура ОбновитьОтправку(Команда)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОбновитьОтправкуИзПанелиОтправки(ЭтаФорма, "ФСГС");
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаПротоколНажатие(Элемент)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьПротоколИзПанелиОтправки(ЭтаФорма, "ФСГС");
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьНеотправленноеИзвещение(Команда)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОтправитьНеотправленноеИзвещениеИзПанелиОтправки(ЭтаФорма, "ФСГС");
КонецПроцедуры

&НаКлиенте
Процедура ЭтапыОтправкиНажатие(Элемент)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьСостояниеОтправкиИзПанелиОтправки(ЭтаФорма, "ФСГС");
КонецПроцедуры

&НаКлиенте
Процедура КритическиеОшибкиОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьКритическиеОшибкиИзПанелиОтправки(ЭтаФорма, "ФСГС");
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаНаименованиеЭтапаНажатие(Элемент)
	
	ПараметрыИзменения = Новый Структура;
	ПараметрыИзменения.Вставить("Форма", ЭтаФорма);
	ПараметрыИзменения.Вставить("Организация", СтруктураРеквизитовФормы.Организация);
	ПараметрыИзменения.Вставить("КонтролирующийОрган",
		ПредопределенноеЗначение("Перечисление.ТипыКонтролирующихОрганов.ФСГС"));
	
	РегламентированнаяОтчетностьКлиент.ИзменитьСтатусОтправки(ПараметрыИзменения);
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ОтправитьВКонтролирующийОрган(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверкаВозможностиВыгрузкиРегламентированногоОтчетаПередОтправкой", ЭтотОбъект);
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередОтправкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаВозможностиВыгрузкиРегламентированногоОтчетаПередОтправкой(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОтправитьВКонтролирующийОрганЗавершение", ЭтотОбъект);
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьВКонтролирующийОрганЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ПриНажатииНаКнопкуОтправкиВКонтролирующийОрган(ЭтаФорма, "ФСГС");
	
КонецПроцедуры

&НаКлиенте
Процедура  ЗаписатьИЗакрыть(Команда)
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Форма", ЭтаФорма);
	Оповещение = Новый ОписаниеОповещения("ПослеСохраненияФормыЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	СохранитьНаКлиенте(, Оповещение);
КонецПроцедуры

&НаКлиенте
Процедура ПослеСохраненияФормыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	ДополнительныеПараметры.Форма.Закрыть();
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОткрытьПрисоединенныеФайлы(Команда)
	
	РегламентированнаяОтчетностьКлиент.СохранитьОтчетИОткрытьФормуПрисоединенныеФайлы(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийПриИзменении(Элемент)
	Модифицированность = Истина;
КонецПроцедуры