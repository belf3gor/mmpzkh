&НаКлиенте
Перем ПараметрыОбработчикаОжидания;

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	БухгалтерскиеОтчетыВызовСервера.УстановитьНастройкиПоУмолчанию(ЭтотОбъект);
	
	ДанныеРасшифровки   = ПоместитьВоВременноеХранилище(ДанныеРасшифровки, УникальныйИдентификатор);
	КэшПараметровОтчета = ПоместитьВоВременноеХранилище(Новый Структура,   УникальныйИдентификатор);
	
	ОбщегоНазначенияБПВызовСервера.ЗаполнитьСписокОрганизаций(Элементы.ПолеОрганизация, СоответствиеОрганизаций);
	
	НастроитьПоОрганизацииНаСервере();
		
	ЗавершитьРаботуСОтчетом = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	БухгалтерскиеОтчетыКлиент.ПриОткрытии(ЭтаФорма, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если Не ЗавершениеРаботы
	   И НомерТекущейСхемы <> -1
	   И НЕ ЗавершитьРаботуСОтчетом Тогда	
		
		Отказ = Истина;
		Оповещение = Новый ОписаниеОповещения("ВопросПередЗакрытиемЗавершение", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, НСтр("ru = 'Завершить работу с отчетом?'"), РежимДиалогаВопрос.ДаНет);
	
	КонецЕсли;
	
	БухгалтерскиеОтчетыКлиент.ПередЗакрытием(ЭтаФорма, Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	БухгалтерскиеОтчетыКлиент.ПриЗакрытии(ЭтаФорма, ЗавершениеРаботы);
	
КонецПроцедуры

&НаСервере
Процедура ПриСохраненииПользовательскихНастроекНаСервере(Настройки)
	
	БухгалтерскиеОтчетыВызовСервера.ПриСохраненииПользовательскихНастроекНаСервере(ЭтаФорма, Настройки, Истина);
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеПользовательскихНастроекНаСервере(Настройки)
	
	БухгалтерскиеОтчетыВызовСервера.ПриЗагрузкеПользовательскихНастроекНаСервере(ЭтотОбъект, Настройки);
	
	НастроитьПоОрганизацииНаСервере();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура НачалоПериодаПриИзменении(Элемент)
	
	НастроитьПериодНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура КонецПериодаПриИзменении(Элемент)
	
	НастроитьПериодНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ПолеОрганизацияПриИзменении(Элемент)
	
	ОбщегоНазначенияБПКлиент.ПолеОрганизацияПриИзменении(
		Элемент,
		ПолеОрганизация,
		Отчет.Организация,
		Отчет.ВключатьОбособленныеПодразделения);
		
	НастроитьПоОрганизацииНаКлиенте();
		
КонецПроцедуры

&НаКлиенте
Процедура ПолеОрганизацияОткрытие(Элемент, СтандартнаяОбработка)
	
	ОбщегоНазначенияБПКлиент.ПолеОрганизацияОткрытие(Элемент, СтандартнаяОбработка,
		ПолеОрганизация, СоответствиеОрганизаций);
		
КонецПроцедуры
	
&НаКлиенте
Процедура ПолеОрганизацияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ОбщегоНазначенияБПКлиент.ПолеОрганизацияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка, 
		СоответствиеОрганизаций, Отчет.Организация, Отчет.ВключатьОбособленныеПодразделения);
	
КонецПроцедуры

/////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ПОЛЯ ТАБЛИЧНОГО ДОКУМЕНТА

&НаКлиенте
Процедура РезультатПриАктивизацииОбласти(Элемент)
	
	Если ТипЗнч(Результат.ВыделенныеОбласти) = Тип("ВыделенныеОбластиТабличногоДокумента") Тогда
		
		НеобходимоВычислятьНаСервере = Ложь;
		БухгалтерскиеОтчетыКлиент.ВычислитьСуммуВыделенныхЯчеекТабличногоДокумента(
			ПолеСумма, Результат, КэшВыделеннойОбласти, НеобходимоВычислятьНаСервере);
		
		Если НеобходимоВычислятьНаСервере Тогда
			ВычислитьСуммуВыделенныхЯчеекТабличногоДокументаВКонтекстеНаСервере();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РезультатСхемыВыбор(Элемент)
	
	Если Элемент.ТекущийЭлемент = Неопределено Тогда 		
		Возврат;		
	КонецЕсли;
	
	ОтключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания");
	
	// собираем одинаковые элементы расшифровки
	Отчет.ИмяРасшифровки = СтрЗаменить(Элемент.ТекущийЭлемент.Имя, "_1", "");
	УправляющаяСтруктура = НоваяУправляющаяСтруктура();

	Отказ = Ложь;
	РезультатВыполнения = СформироватьСхемуНаСервере(Отчет.ИмяРасшифровки, УправляющаяСтруктура, Отказ);
	Если РезультатВыполнения = Неопределено Тогда
		Возврат;
	ИначеЕсли РезультатВыполнения.ЗаданиеВыполнено Тогда
		Если НЕ Отказ Тогда
			ОбновитьСтраницы(ЭтаФорма, УправляющаяСтруктура);
		КонецЕсли;
	Иначе
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
		
		Если УправляющаяСтруктура.Главная ИЛИ УправляющаяСтруктура.ЭтоСхема Тогда
			Элементы.РезультатСхемы.Видимость      = Ложь;
			Элементы.ИндикаторВыполнения.Видимость = Истина;
			ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.ИндикаторВыполнения, "ФормированиеОтчета");
		Иначе
			ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "ФормированиеОтчета");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РезультатОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	
	ОтключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания");
	
	СтандартнаяОбработка = Ложь;
	УправляющаяСтруктура = НоваяУправляющаяСтруктура();
	РезультатВыполнения  = ОбработатьРасшифровкунаСервере(Расшифровка, УправляющаяСтруктура);
	
	Если РезультатВыполнения.ЗаданиеВыполнено Тогда
		Если РезультатВыполнения.СпособВыполнения = "Схема" Тогда 		
			ОбновитьСтраницы(ЭтаФорма, УправляющаяСтруктура);		
		ИначеЕсли РезультатВыполнения.СпособВыполнения = "ОткрытьОбъект" Тогда		
			ПоказатьЗначение( , УправляющаяСтруктура.ОткрытьОбъект);		
		ИначеЕсли ТипЗнч(Расшифровка) = Тип("ИдентификаторРасшифровкиКомпоновкиДанных") Тогда
			БухгалтерскиеОтчетыКлиент.ОбработкаРасшифровкиСтандартногоОтчета(ЭтаФорма, Элемент, Расшифровка, СтандартнаяОбработка);
		КонецЕсли;
	Иначе
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
		
		Если УправляющаяСтруктура.Главная
		 Или РезультатВыполнения.СпособВыполнения = "Схема" Тогда
			Элементы.РезультатСхемы.Видимость      = Ложь;
			Элементы.ИндикаторВыполнения.Видимость = Истина;
			ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.ИндикаторВыполнения, "ФормированиеОтчета");
		Иначе
			ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "ФормированиеОтчета");
		КонецЕсли;
	КонецЕсли;
		
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура ВыбратьПериод(Команда)
	
	СправкиРасчетыКлиент.НачатьВыборИнтервала(
		ЭтотОбъект,
		Новый ОписаниеОповещения("ВыборПериода", ЭтотОбъект));
	
	// См. далее ВыборПериода()
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборПериода(РезультатВыбора, НеиспользуемыйОбязательныйПараметр) Экспорт // обработчик оповещения
	
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Отчет.НачалоПериода = РезультатВыбора.НачалоПериода;
	Отчет.КонецПериода  = РезультатВыбора.КонецПериода;
	
	НастроитьПериодНаКлиенте(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура Назад(Команда)
	
	УправляющаяСтруктура = НоваяУправляющаяСтруктура();
	УправляющаяСтруктура.Главная = Истина;
	
	ОбработатьНазадНаСервере(УправляющаяСтруктура);
	ОбновитьСтраницы(ЭтаФорма, УправляющаяСтруктура);
	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьГрафическойСхемы(Команда)
	
	РезультатСхемы.Напечатать();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаСтруктураНалоговойБазы(Команда)
	
	ПоказатьСтруктуруНалоговойБазы();
	УправляющаяСтруктура = НоваяУправляющаяСтруктура();
	УправляющаяСтруктура.Главная = Истина;
	ОбновитьСтраницы(ЭтаФорма, УправляющаяСтруктура);
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьРасшифровку(УправляющаяСтруктура)
	
	ОчиститьСообщения();
	
	ОтключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания");
	
	Отказ = Ложь;
	
	РезультатВыполнения = ОбновитьТаблицуНаСервере(УправляющаяСтруктура, Отказ);
	Если РезультатВыполнения = Неопределено Тогда
		Возврат;
	ИначеЕсли РезультатВыполнения.ЗаданиеВыполнено Тогда
		Если НЕ Отказ Тогда
			ОбновитьСтраницы(ЭтаФорма, УправляющаяСтруктура);	
		КонецЕсли;
	Иначе
		ОбновитьСтраницы(ЭтаФорма, УправляющаяСтруктура);
		
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
		
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "ФормированиеОтчета");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьВсюРасшифровку(Команда)
	
	УправляющаяСтруктура = НоваяУправляющаяСтруктура();
	СформироватьРасшифровку(УправляющаяСтруктура);
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьТолькоОшибки(Команда)
	
	УправляющаяСтруктура = НоваяУправляющаяСтруктура();
	УправляющаяСтруктура.ТолькоОшибки = Истина;
	СформироватьРасшифровку(УправляющаяСтруктура);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеЗадания()
	
	Попытка
		Если ЗаданиеВыполнено(ИдентификаторЗадания) Тогда
			ЗагрузитьПодготовленныеДанныеНаСервере();
		Иначе
			ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
			ПодключитьОбработчикОжидания(
				"Подключаемый_ПроверитьВыполнениеЗадания", 
				ПараметрыОбработчикаОжидания.ТекущийИнтервал, 
				Истина);
		КонецЕсли;
	Исключение
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.ИндикаторВыполнения, "НеИспользовать");
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеИспользовать");
		
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаданиеВыполнено(ИдентификаторЗадания)
	
	Возврат ДлительныеОперации.ЗаданиеВыполнено(ИдентификаторЗадания);
	
КонецФункции

&НаСервере
Функция СформироватьОтчетНаСервере(ПараметрыОтчета, Расшифровка = Ложь)
	
	ДлительныеОперации.ОтменитьВыполнениеЗадания(ИдентификаторЗадания);
	ИдентификаторЗадания = Неопределено;
	
	Если ОбщегоНазначения.ИнформационнаяБазаФайловая() Тогда
		АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
		Если Расшифровка Тогда 
			Отчеты.АнализСостоянияНалоговогоУчетаПоНалогуНаПрибыль.СформироватьРасшифровку(ПараметрыОтчета, АдресХранилища);
		Иначе
			Отчеты.АнализСостоянияНалоговогоУчетаПоНалогуНаПрибыль.СформироватьОтчет(ПараметрыОтчета, АдресХранилища);
		КонецЕсли;
		РезультатВыполнения = Новый Структура("ЗаданиеВыполнено", Истина);
	Иначе
		Если Расшифровка Тогда 
			ИмяМетода = "СформироватьРасшифровку";
		Иначе
			ИмяМетода = "СформироватьОтчет";
		КонецЕсли;
		
		РезультатВыполнения = ДлительныеОперации.ЗапуститьВыполнениеВФоне(
			УникальныйИдентификатор, 
			"Отчеты.АнализСостоянияНалоговогоУчетаПоНалогуНаПрибыль." + ИмяМетода, 
			ПараметрыОтчета, 
			БухгалтерскиеОтчетыКлиентСервер.ПолучитьНаименованиеЗаданияВыполненияОтчета(ЭтаФорма));
			
		АдресХранилища       = РезультатВыполнения.АдресХранилища;
		ИдентификаторЗадания = РезультатВыполнения.ИдентификаторЗадания;		
	КонецЕсли;
	
	Если РезультатВыполнения.ЗаданиеВыполнено Тогда
		ЗагрузитьПодготовленныеДанныеНаСервере();
	КонецЕсли;
	
	Возврат РезультатВыполнения;
	
КонецФункции

&НаСервере
Процедура ЗагрузитьПодготовленныеДанныеНаСервере()

	РезультатВыполнения = ПолучитьИзВременногоХранилища(АдресХранилища);
	
	Если ТипЗнч(РезультатВыполнения) = Тип("Структура") Тогда
		Если РезультатВыполнения.Свойство("РезультатСхемы") Тогда
			РезультатСхемы      = РезультатВыполнения.РезультатСхемы;
			КэшПараметровОтчета = ПоместитьВоВременноеХранилище(РезультатВыполнения.КэшПараметровОтчета, КэшПараметровОтчета);
			Результат           = РезультатВыполнения.Результат;			
		Иначе
			Результат = РезультатВыполнения.Результат;	
			
			Если РезультатВыполнения.Свойство("ДанныеРасшифровки") Тогда
				ДанныеРасшифровки = РезультатВыполнения.ДанныеРасшифровки;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ИдентификаторЗадания = Неопределено;
	
	Если Элементы.ИндикаторВыполнения.Видимость Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.ИндикаторВыполнения, "НеИспользовать");
		Элементы.РезультатСхемы.Видимость      = Истина;
		Элементы.ИндикаторВыполнения.Видимость = Ложь;
	Иначе
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеИспользовать");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПодготовитьПараметрыОтчета(ТолькоОшибки)
	
	НачалоНалоговогоПериода = НалоговыйУчет.НачалоНалоговогоПериода(Отчет.КонецПериода, Отчет.Организация);
	Если НачалоНалоговогоПериода = Неопределено Тогда
		НачалоНалоговогоПериода = Отчет.НачалоПериода;
	КонецЕсли;
	
	ПараметрыОтчета = Новый Структура;
	ПараметрыОтчета.Вставить("Организация",                       Отчет.Организация);
	ПараметрыОтчета.Вставить("НачалоПериода",                     Отчет.НачалоПериода);
	ПараметрыОтчета.Вставить("КонецПериода",                      КонецДня(Отчет.КонецПериода));
	ПараметрыОтчета.Вставить("НачалоГода",                        НачалоНалоговогоПериода);
	ПараметрыОтчета.Вставить("ВключатьОбособленныеПодразделения", Отчет.ВключатьОбособленныеПодразделения);
    ПараметрыОтчета.Вставить("ОрганизацияРасшифровки",            Отчет.ОрганизацияРасшифровки);
	ПараметрыОтчета.Вставить("РазбитьПоЛистам",                   Отчет.ИмяРасшифровки);
	ПараметрыОтчета.Вставить("ИдентификаторОтчета",               БухгалтерскиеОтчетыКлиентСервер.ПолучитьИдентификаторОбъекта(ЭтаФорма));
	ПараметрыОтчета.Вставить("ДанныеРасшифровки",                 ДанныеРасшифровки);
	ПараметрыОтчета.Вставить("ИмяСхемы",                          ИмяСхемы);
	ПараметрыОтчета.Вставить("ТолькоОшибки",                      ТолькоОшибки);
	ПараметрыОтчета.Вставить("СуффиксСхемы",                      ДополнениеИмениСхемыВариантомИнтерфейса());
	
	ПараметрыОтчета.Вставить("ПредставлениеОрганизации",          ПредставлениеОрганизации);
	ПараметрыОтчета.Вставить("ПредставлениеПериода",              ПредставлениеПериодаОтчета);
	ПараметрыОтчета.Вставить("ИнформацияНалоговыйПериод",         "");
	
	ИнформацияНалоговыйПериод = НалоговыйУчет.ИнформацияНалоговыйПериод(Отчет.КонецПериода, Отчет.Организация);
	Если ИнформацияНалоговыйПериод <> Неопределено Тогда
		ПараметрыОтчета.ИнформацияНалоговыйПериод = ИнформацияНалоговыйПериод.Заголовок;
	КонецЕсли;
		
	Возврат ПараметрыОтчета;
	
КонецФункции

&НаСервере
Процедура ПоказатьСтруктуруНалоговойБазы()
	
	НомерТекущейСхемы = - 1;
	
	Если ПустаяСтрока(ИмяСхемы) Тогда
		ИмяСхемы = ИмяКарты(Отчет.НачалоПериода, Отчет.КонецПериода, Отчет.Организация);
	КонецЕсли;
    РезультатСхемы = Отчеты.АнализСостоянияНалоговогоУчетаПоНалогуНаПрибыль.ПолучитьМакет(ИмяСхемы);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.ИндикаторВыполнения, "НеИспользовать");
	ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеИспользовать");
	
	// Очистим историю
	КэшПараметровОтчета = ПоместитьВоВременноеХранилище(Новый Структура, КэшПараметровОтчета);
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьНазадНаСервере(УправляющаяСтруктура)
	
	ЭтоРасшифровка = НомерТекущейСхемы = 100; 
	
	КэшПараметровОтчетаСтруктура = ПолучитьИзВременногоХранилища(КэшПараметровОтчета);
	
	ЧислоСтраниц = КэшПараметровОтчетаСтруктура.ИсторияОткрытий.Количество() - ?(ЭтоРасшифровка,1,2);
	НомерСхемы   = ?(ЧислоСтраниц < 0, 100, КэшПараметровОтчетаСтруктура.ИсторияОткрытий.Получить(ЧислоСтраниц).Значение);
	
	Если КэшПараметровОтчетаСтруктура.КэшМакетов.Свойство("Макет_" + НомерСхемы) Тогда		
		ПараметрыМакета = КэшПараметровОтчетаСтруктура.КэшМакетов["Макет_" + НомерСхемы];
		
		УправляющаяСтруктура.ЭтоСхема                = ПараметрыМакета.ЭтоСхема;
		УправляющаяСтруктура.ЭтоОтчетПоДокументам    = Ложь;
		УправляющаяСтруктура.ДоступностьПоДокументам = Ложь;
		
		Если ПараметрыМакета.ЭтоСхема Тогда			
			РезультатСхемы = Отчеты.АнализСостоянияНалоговогоУчетаПоНалогуНаПрибыль.ПолучитьМакет(ПараметрыМакета.Макет);
			ЗаполнитьСхемуИзКэшаНаСервере(РезультатСхемы.ЭлементыГрафическойСхемы, ПараметрыМакета);
			Результат.Очистить();
		Иначе			
			Результат.Очистить();
			Результат.Вывести(ПараметрыМакета.Макет);			
		КонецЕсли;
		
		НомерТекущейСхемы  = НомерСхемы;
		УправляющаяСтруктура.Главная = Ложь;
		
		Если НЕ ЭтоРасшифровка Тогда			
			КэшПараметровОтчетаСтруктура.ИсторияОткрытий.Удалить(ЧислоСтраниц + 1);			
		КонецЕсли;		
	Иначе		
		ПоказатьСтруктуруНалоговойБазы();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСхемуИзКэшаНаСервере(ЭлементыСхемы, ПараметрыМакета)
	
	Для Каждого Параметр из ПараметрыМакета.ОписаниеЗначений Цикл	
		ЭлементыСхемы[Параметр.Ключ].Наименование = Параметр.Значение;		
	КонецЦикла;
	
	Для Каждого Параметр из ПараметрыМакета.НастройкаРамок Цикл		
		ЭлементыСхемы[Параметр.Ключ].Фигура    = ФигурыГрафическойСхемы.Блок;
		ЭлементыСхемы[Параметр.Ключ].ЦветРамки = ?(Параметр.Значение = 1, WebЦвета.Красный,
			WebЦвета.Зеленый);		
	КонецЦикла;
	
	Если ПараметрыМакета.НастройкаРамок.Количество() > 0 Тогда
		Отчеты.АнализСостоянияНалоговогоУчетаПоНалогуНаПрибыль.ВывестиЛегенду(ЭлементыСхемы);		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция СформироватьСхемуНаСервере(Ссылка, УправляющаяСтруктура, Отказ)
	
	Если НЕ ПроверитьЗаполнение() Тогда 
		Возврат Неопределено;
	КонецЕсли;
	
	РезультатВыполнения = Новый Структура("ЗаданиеВыполнено", Истина);
 
	УправляющаяСтруктура.ЭтоСхема = Истина;
	
	ВременныйНомерТекущейСхемы = НомерТекущейСхемы;
	
	КэшПараметровОтчетаСтруктура = ПолучитьИзВременногоХранилища(КэшПараметровОтчета);
	
	ПараметрыОтчета = ПодготовитьПараметрыОтчета(УправляющаяСтруктура.ТолькоОшибки);
	
	Если ВременныйНомерТекущейСхемы = -1 Тогда		
		Если СтрНайти(Ссылка, "Схема") = 0 Тогда
			Возврат РезультатВыполнения;			
		КонецЕсли;
		
		ВременныйНомерТекущейСхемы = Число(СтрЗаменить(Ссылка, "Схема", "")) + 
			?(Отчет.ВключатьОбособленныеПодразделения И НЕ ВременныйНомерТекущейСхемы > 20, 20, 0);
			
		УправляющаяСтруктура.ЭтоСхема = НЕ ВременныйНомерТекущейСхемы > 20;
		НомерТекущейСхемы = ВременныйНомерТекущейСхемы;
		
		ПараметрыОтчета.Вставить("НомерТекущейСхемы",   НомерТекущейСхемы);
		ПараметрыОтчета.Вставить("КэшПараметровОтчета", КэшПараметровОтчетаСтруктура);
		ПараметрыОтчета.Вставить("Расшифровка",         ДанныеРасшифровки);
		
		РезультатВыполнения = СформироватьОтчетНаСервере(ПараметрыОтчета);
		
		ОбновитьСтраницы(ЭтаФорма, УправляющаяСтруктура);
				
		Возврат РезультатВыполнения;
		
	ИначеЕсли НЕ КэшПараметровОтчетаСтруктура.Свойство("КэшМакетов") Тогда
		
		УправляющаяСтруктура.Главная = Истина;
		ТекстСообщения = НСтр("ru = 'Отчет обновлен!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,,, Отказ);
		ПоказатьСтруктуруНалоговойБазы();
		
		ОбновитьСтраницы(ЭтаФорма, УправляющаяСтруктура);
				
		Возврат РезультатВыполнения;
		
	ИначеЕсли КэшПараметровОтчетаСтруктура.КэшМакетов.Свойство("Макет_" + НомерТекущейСхемы) Тогда
			
		ПараметрыМакета = КэшПараметровОтчетаСтруктура.КэшМакетов["Макет_" + НомерТекущейСхемы];
		
		Если ПараметрыМакета.РасшифровкаМакета.Свойство(Ссылка) Тогда

			СоответствиеРасшифровки = ПараметрыМакета.РасшифровкаМакета[Ссылка];
			Если СоответствиеРасшифровки["ВидРасшифровки"] = "Схема" Тогда
				
				ВременныйНомерТекущейСхемы    = СоответствиеРасшифровки["НомерТекущейСхемы"];
				УправляющаяСтруктура.ЭтоСхема = НЕ ВременныйНомерТекущейСхемы > 20;
				НомерТекущейСхемы             = ВременныйНомерТекущейСхемы;
				
				ПараметрыОтчета.Вставить("НомерТекущейСхемы",   НомерТекущейСхемы);
				ПараметрыОтчета.Вставить("КэшПараметровОтчета", КэшПараметровОтчетаСтруктура);
		        ПараметрыОтчета.Вставить("Расшифровка",         СоответствиеРасшифровки);
				
				РезультатВыполнения = СформироватьОтчетНаСервере(ПараметрыОтчета);
				
				ОбновитьСтраницы(ЭтаФорма, УправляющаяСтруктура);
				
				Возврат РезультатВыполнения;
			Иначе
				ПоДокументам      = Ложь;
				НомерТекущейСхемы = 100;
				
				УправляющаяСтруктура.ЭтоСхема             = Ложь;
				УправляющаяСтруктура.ЭтоОтчетПоДокументам = Истина;
				
				СхемаКомпоновкиДанных = Отчеты.АнализСостоянияНалоговогоУчетаПоНалогуНаПрибыль.ПолучитьМакет(
					СоответствиеРасшифровки["НомерТекущейСхемы"]);
				УправляющаяСтруктура.ДоступностьПоДокументам =
					СхемаКомпоновкиДанных.ВариантыНастроек.Найти("БезРегистратора") <> Неопределено;
				
				СоответствиеРасшифровки.Вставить("НеРазворачиватьПоРегистраторам", НЕ ПоДокументам);
				
				// закэшируем расшифровку для возможности переформирования
				КэшПараметровОтчетаСтруктура.Вставить("ТекущаяРасшифровка", СоответствиеРасшифровки);
				
				ПараметрыОтчета.Вставить("НомерТекущейСхемы",   НомерТекущейСхемы);
				ПараметрыОтчета.Вставить("КэшПараметровОтчета", КэшПараметровОтчетаСтруктура);
		
				РезультатВыполнения = СформироватьОтчетНаСервере(ПараметрыОтчета, Истина);
				
				ОбновитьСтраницы(ЭтаФорма, УправляющаяСтруктура);
				
				Возврат РезультатВыполнения;
			КонецЕсли;			
		КонецЕсли;				
	КонецЕсли;
	
	КэшПараметровОтчета = ПоместитьВоВременноеХранилище(КэшПараметровОтчетаСтруктура, КэшПараметровОтчета);
	
	ОбновитьСтраницы(ЭтаФорма, УправляющаяСтруктура);
	
	Возврат РезультатВыполнения;
	
КонецФункции

&НаСервере
Функция ОбновитьТаблицуНаСервере(УправляющаяСтруктура, Отказ)
	
	УправляющаяСтруктура.ЭтоСхема                = Ложь;
	УправляющаяСтруктура.ЭтоОтчетПоДокументам    = Истина;
	УправляющаяСтруктура.ДоступностьПоДокументам = Истина;
	
	РезультатВыполнения = Новый Структура("ЗаданиеВыполнено", Ложь);
	
	КэшПараметровОтчетаСтруктура = ПолучитьИзВременногоХранилища(КэшПараметровОтчета);
	
	Если КэшПараметровОтчетаСтруктура.Свойство("ИсторияОткрытий")
		И КэшПараметровОтчетаСтруктура.ИсторияОткрытий.Количество() > 0 Тогда
		//Получим последний номер схемы из истории - это там Схема, которую мы расшифровали
		НомерТекущейСхемыРасшифровки = КэшПараметровОтчетаСтруктура.ИсторияОткрытий.Получить(
			КэшПараметровОтчетаСтруктура.ИсторияОткрытий.Количество() - 1);
	Иначе
		Отказ = Ложь;
		Возврат РезультатВыполнения;	
	КонецЕсли;
	
	ПараметрыОтчета = ПодготовитьПараметрыОтчета(УправляющаяСтруктура.ТолькоОшибки);
	
	Если КэшПараметровОтчетаСтруктура.КэшМакетов.Свойство("Макет_" + НомерТекущейСхемыРасшифровки) Тогда
		
		НомерТекущейСхемы = 100;
		ПараметрыМакета   = КэшПараметровОтчетаСтруктура.КэшМакетов["Макет_" + НомерТекущейСхемыРасшифровки];
		
		СоответствиеРасшифровки = КэшПараметровОтчетаСтруктура.ТекущаяРасшифровка;
		
		СхемаКомпоновкиДанных = Отчеты.АнализСостоянияНалоговогоУчетаПоНалогуНаПрибыль.ПолучитьМакет(
			СоответствиеРасшифровки["НомерТекущейСхемы"]);
		УправляющаяСтруктура.ДоступностьПоДокументам =
			СхемаКомпоновкиДанных.ВариантыНастроек.Найти("БезРегистратора") <> Неопределено;
		СоответствиеРасшифровки.Вставить("НеРазворачиватьПоРегистраторам", НЕ ПоДокументам);
		
		// закэшируем расшифровку для возможности переформирования
		КэшПараметровОтчетаСтруктура.Вставить("ТекущаяРасшифровка", СоответствиеРасшифровки);
		
		ПараметрыОтчета.Вставить("НомерТекущейСхемы",   НомерТекущейСхемы);
		ПараметрыОтчета.Вставить("КэшПараметровОтчета", КэшПараметровОтчетаСтруктура);
		ПараметрыОтчета.Вставить("Расшифровка",         СоответствиеРасшифровки);
		
		// сформируем расшифровку
		РезультатВыполнения = СформироватьОтчетНаСервере(ПараметрыОтчета, Истина);
		
		КэшПараметровОтчета = ПоместитьВоВременноеХранилище(КэшПараметровОтчетаСтруктура, КэшПараметровОтчета);
		
		ОбновитьСтраницы(ЭтаФорма, УправляющаяСтруктура);
		
	Иначе
		
		Отказ = Ложь;
		
	КонецЕсли;
	
	Возврат РезультатВыполнения;
		
КонецФункции

&НаСервере
Функция ОбработатьРасшифровкуНаСервере(Расшифровка, УправляющаяСтруктура, ОткрытоИзИстории = Ложь)
	
	КэшПараметровОтчетаСтруктура = ПолучитьИзВременногоХранилища(КэшПараметровОтчета);
	
	РезультатВыполнения = Новый Структура("ЗаданиеВыполнено, СпособВыполнения", Истина, "");
	Если ТипЗнч(Расшифровка) = Тип("Соответствие") Тогда
		НомерТекущейСхемы = Расшифровка["НомерТекущейСхемы"];
		
		ПараметрыОтчета = ПодготовитьПараметрыОтчета(УправляющаяСтруктура.ТолькоОшибки);
		ПараметрыОтчета.Вставить("НомерТекущейСхемы", НомерТекущейСхемы);
		ПараметрыОтчета.Вставить("КэшПараметровОтчета", КэшПараметровОтчетаСтруктура);
		ПараметрыОтчета.Вставить("Расшифровка", Расшифровка);
		
		РезультатВыполнения = СформироватьОтчетНаСервере(ПараметрыОтчета);
		
		УправляющаяСтруктура.ЭтоСхема = (Расшифровка["ВидРасшифровки"] = "Схема");
		РезультатВыполнения.Вставить("СпособВыполнения", "Схема");
		
		ОбновитьСтраницы(ЭтаФорма, УправляющаяСтруктура);
	ИначеЕсли ОбщегоНазначения.ЭтоСсылка(ТипЗнч(Расшифровка)) Тогда 
		
		УправляющаяСтруктура.ОткрытьОбъект = Расшифровка;
		РезультатВыполнения.СпособВыполнения = "ОткрытьОбъект";
		
	КонецЕсли;
	
	Возврат РезультатВыполнения;
		
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция НоваяУправляющаяСтруктура()
	
	УправляющаяСтруктура = Новый Структура;
	УправляющаяСтруктура.Вставить("Главная",                 Ложь);
	УправляющаяСтруктура.Вставить("ТолькоОшибки",            Ложь);
	УправляющаяСтруктура.Вставить("ЭтоСхема",                Ложь);
	УправляющаяСтруктура.Вставить("ЭтоОтчетПоДокументам",    Ложь);
	УправляющаяСтруктура.Вставить("ДоступностьПоДокументам", Ложь);
	УправляющаяСтруктура.Вставить("ОткрытьОбъект");
	Возврат УправляющаяСтруктура;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьСтраницы(УправляемаяФорма, УправляющаяСтруктура)
	
	Элементы = УправляемаяФорма.Элементы;
	
	// Установим режим видимости объектов для карты и расшифровок
	Элементы.ГруппаБыстрыеОтборы.Видимость 			 = УправляющаяСтруктура.Главная;
	Элементы.ГруппаОсновнаяКоманднаяПанель.Видимость = НЕ УправляющаяСтруктура.Главная;
	
	Элементы.Сформировать.Видимость                  = Не УправляющаяСтруктура.Главная И УправляющаяСтруктура.ЭтоОтчетПоДокументам;
	Элементы.СформироватьВсеДействия.Видимость       = Не УправляющаяСтруктура.Главная И УправляющаяСтруктура.ЭтоОтчетПоДокументам;
	Элементы.СформироватьТолькоОшибки.Видимость      = Не УправляющаяСтруктура.Главная И УправляющаяСтруктура.ЭтоОтчетПоДокументам;
	Элементы.ГруппаДополнительныеНастройки.Видимость = Не УправляющаяСтруктура.Главная И УправляющаяСтруктура.ЭтоОтчетПоДокументам;
	Элементы.ГруппаСохранитьЗагрузить.Видимость      = УправляющаяСтруктура.Главная;
	Элементы.РезультатСхемы.Видимость                = УправляющаяСтруктура.Главная Или УправляющаяСтруктура.ЭтоСхема;
	Элементы.ИндикаторВыполнения.Видимость           = Ложь;
	Элементы.Результат.Видимость                     = Не УправляющаяСтруктура.Главная И Не УправляющаяСтруктура.ЭтоСхема;
	
	Элементы.ПечатьСразу.Видимость            = НЕ УправляющаяСтруктура.ЭтоСхема; 
	Элементы.ПечатьГрафическойСхемы.Видимость = УправляющаяСтруктура.ЭтоСхема;
	
	Если УправляющаяСтруктура.Главная Тогда
			
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.ИндикаторВыполнения, "НеИспользовать");
		
	Иначе
		
		Если УправляющаяСтруктура.Главная ИЛИ УправляющаяСтруктура.ЭтоСхема Тогда
			ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.ИндикаторВыполнения, "НеИспользовать");
		Иначе
			ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеИспользовать");
		КонецЕсли;
		
	КонецЕсли;
	
	Элементы.ПоДокументам.Доступность = Не УправляющаяСтруктура.Главная И УправляющаяСтруктура.ДоступностьПоДокументам;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПередЗакрытиемЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ЗавершитьРаботуСОтчетом = Истина;
		Закрыть();
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПоДокументамПриИзменении(Элемент)
	
	ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	
КонецПроцедуры

&НаСервере
Процедура ВычислитьСуммуВыделенныхЯчеекТабличногоДокументаВКонтекстеНаСервере()
	
	ПолеСумма = БухгалтерскиеОтчетыВызовСервера.ВычислитьСуммуВыделенныхЯчеекТабличногоДокумента(
		Результат, КэшВыделеннойОбласти);
	
КонецПроцедуры

#Область ЗаголовокФормы

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЗаголовокФормы(Заголовок, ПредставлениеПериода, ПредставлениеОрганизации)
	
	Заголовок = СправкиРасчетыКлиентСервер.ТекстЗаголовка(
		НСтр("ru = 'Анализ учета по налогу на прибыль'"),
		ПредставлениеПериода,
		ПредставлениеОрганизации);
	
КонецПроцедуры

#КонецОбласти

#Область НастройкаПоПериоду

// Изменение периода иногда требует дорогого контекстного вызова сервера, но часто - не требует. 

&НаКлиенте
Процедура НастроитьПериодНаКлиенте(ЦелыйИнтервал = Ложь)
	
	Последствия = ОпределитьИнтервалОтчета(
		Отчет.НачалоПериода,
		Отчет.КонецПериода,
		ЦелыйИнтервал,
		Отчет.Организация,
		ИмяСхемы);
			
	НастроитьПериодНаКлиентеНаСервере(ЭтотОбъект, Последствия);
	
	Если Не ЗначениеЗаполнено(Последствия.ТребуетсяВызовСервера) Тогда
		
		// Отобразим информацию о налоговом периоде
		УдалосьНастроитьНаКлиенте = ИнформированиеНалоговыйПериодКлиент.НастроитьЭлементИнформацияНалоговыйПериод(
			Элементы,
			Последствия.ИнформацияНалоговыйПериод);
		
		Если Не УдалосьНастроитьНаКлиенте Тогда
			Последствия.ТребуетсяВызовСервера.Вставить("НастроитьЭлементИнформирования", Последствия.ИнформацияНалоговыйПериод);
		КонецЕсли;
		
	КонецЕсли;
				
	Если ЗначениеЗаполнено(Последствия.ТребуетсяВызовСервера) Тогда
		НастроитьПериодНаСервере(Последствия.ТребуетсяВызовСервера);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура НастроитьПериодНаКлиентеНаСервере(Форма, ПоследствияИзменения)
	
	Форма.Отчет.НачалоПериода        = ПоследствияИзменения.НачалоПериода;
	Форма.ПредставлениеПериодаОтчета = ПоследствияИзменения.ПредставлениеПериода;
	
	УстановитьЗаголовокФормы(
		Форма.Заголовок,
		Форма.ПредставлениеПериодаОтчета,
		Форма.ПредставлениеОрганизации);

КонецПроцедуры
		
&НаСервере
Процедура НастроитьПериодНаСервере(ТребуетсяВызовСервера)
	
	Если ТребуетсяВызовСервера.Свойство("НастроитьЭлементИнформирования") Тогда
		ИнформированиеНалоговыйПериод.НастроитьЭлементИнформирования(
			Элементы,
			ТребуетсяВызовСервера.НастроитьЭлементИнформирования,
			Элементы.РезультатСхемы);
	КонецЕсли;
	
	Если ТребуетсяВызовСервера.Свойство("ИмяСхемы") Тогда
		ИмяСхемы = ТребуетсяВызовСервера.ИмяСхемы;
		ПоказатьСтруктуруНалоговойБазы();
	КонецЕсли;
	
КонецПроцедуры		

&НаСервереБезКонтекста
Функция ОпределитьИнтервалОтчета(Знач НачалоПериода, Знач КонецПериода, Знач ЦелыйИнтервал, Знач Организация, Знач ИмяСхемы)
	
	Последствия = Новый Структура;
	Последствия.Вставить("НачалоПериода",              НачалоПериода);
	Последствия.Вставить("ПредставлениеПериода",       "");
	Последствия.Вставить("ИнформацияНалоговыйПериод",  Неопределено);
	Последствия.Вставить("ТребуетсяВызовСервера",      Новый Структура);
	
	СправкиРасчетыКлиентСервер.ОпределитьИнтервалОтчета(
		Последствия.ПредставлениеПериода,
		Последствия.ИнформацияНалоговыйПериод,
		Последствия.НачалоПериода,
		КонецПериода,
		ЦелыйИнтервал,
		Организация,
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "ДатаРегистрации"));
		
	НовоеИмяСхемы = ИмяКарты(
		НачалоПериода,
		КонецПериода,
		Организация);
		
	Если НовоеИмяСхемы <> ИмяСхемы Тогда
		Последствия.ТребуетсяВызовСервера.Вставить("ИмяСхемы", НовоеИмяСхемы);
		// Раз все равно вызывать сервер, то все сделаем на сервере
		Последствия.ТребуетсяВызовСервера.Вставить("НастроитьЭлементИнформирования", Последствия.ИнформацияНалоговыйПериод);
		Последствия.ИнформацияНалоговыйПериод = Неопределено;
	КонецЕсли;
	
	Возврат Последствия;
	
КонецФункции

#КонецОбласти

#Область НастройкаПоОрганизации

// Изменение организации иногда требует дорогого контекстного вызова сервера, но часто - не требует. 

&НаКлиенте
Процедура НастроитьПоОрганизацииНаКлиенте()
	
	Последствия = ПоследствияИзмененияОрганизации(
		Отчет.НачалоПериода,
		Отчет.КонецПериода,
		Ложь,
		Отчет.Организация,
		Отчет.ВключатьОбособленныеПодразделения,
		ИмяСхемы);
		
	НастроитьПоОрганизацииНаКлиентеНаСервере(ЭтотОбъект, Последствия);
	
	Если ЗначениеЗаполнено(Последствия.ТребуетсяВызовСервера) Тогда
		НастроитьПоОрганизацииНаСервере(Последствия.ТребуетсяВызовСервера);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура НастроитьПоОрганизацииНаКлиентеНаСервере(Форма, ПоследствияИзменения)
	
	Форма.ПредставлениеОрганизации   = ПоследствияИзменения.ПредставлениеОрганизации;
	Форма.ДатаРегистрацииОрганизации = ПоследствияИзменения.ДатаРегистрацииОрганизации;
	
	НастроитьПериодНаКлиентеНаСервере(Форма, ПоследствияИзменения);
	
КонецПроцедуры

&НаСервере
Процедура НастроитьПоОрганизацииНаСервере(ТребуетсяВызовСервера = Неопределено)
	
	Если ТребуетсяВызовСервера = Неопределено Тогда
		
		// Первоначальная настройка, выполняемая на сервере
		
		Последствия = ПоследствияИзмененияОрганизации(
			Отчет.НачалоПериода,
			Отчет.КонецПериода,
			Истина,
			Отчет.Организация,
			Отчет.ВключатьОбособленныеПодразделения,
			ИмяСхемы);
			
		НастроитьПоОрганизацииНаКлиентеНаСервере(ЭтотОбъект, Последствия);
		
		// заодно настроим, раз уже на сервере
		Последствия.ТребуетсяВызовСервера.Вставить("НастроитьЭлементИнформирования", Последствия.ИнформацияНалоговыйПериод);
		
		ТребуетсяВызовСервера = Последствия.ТребуетсяВызовСервера;
		
	КонецЕсли;
	
	НастроитьПериодНаСервере(ТребуетсяВызовСервера);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПоследствияИзмененияОрганизации(Знач НачалоПериода, Знач КонецПериода, Знач ЦелыйИнтервал,
	Знач Организация, Знач ВключатьОбособленныеПодразделения, Знач ИмяСхемы)
	
	Последствия = ОпределитьИнтервалОтчета(НачалоПериода, КонецПериода, ЦелыйИнтервал, Организация, ИмяСхемы);
	
	Последствия.Вставить(
		"ПредставлениеОрганизации",
		БухгалтерскиеОтчетыВызовСервера.ПолучитьТекстОрганизация(Организация, ВключатьОбособленныеПодразделения));
		
	Последствия.Вставить(
		"ДатаРегистрацииОрганизации",
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "ДатаРегистрации"));
		
	Возврат Последствия;
	
КонецФункции

#КонецОбласти

#Область ГрафическиеСхемы

&НаСервереБезКонтекста
Функция ИмяКарты(НачалоПериода, КонецПериода, Организация)
	
	Имя = "Карта";
	Если ЗначениеЗаполнено(Организация) 
		И ЗначениеЗаполнено(НачалоПериода)
		И ЗначениеЗаполнено(КонецПериода)
		И УчетнаяПолитика.ПлательщикЕНВДЗаПериод(Организация, НачалоПериода, КонецПериода) Тогда
		Имя = Имя + "ЕНВД";
	КонецЕсли;
	
	Возврат Имя + ДополнениеИмениСхемыВариантомИнтерфейса();
	
КонецФункции

&НаСервереБезКонтекста
Функция ДополнениеИмениСхемыВариантомИнтерфейса()

	НастройкиКлиента = ХранилищеСистемныхНастроек.Загрузить("Общее/НастройкиКлиентскогоПриложения");
	Если ТипЗнч(НастройкиКлиента) = Тип("НастройкиКлиентскогоПриложения") 
		И НастройкиКлиента.ВариантИнтерфейсаКлиентскогоПриложения = ВариантИнтерфейсаКлиентскогоПриложения.Версия8_2 Тогда
		Возврат "82";
	Иначе
		Возврат "";
	КонецЕсли;
	
КонецФункции

#КонецОбласти
