////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
// Обработчик события "ПриСозданииНаСервере" формы.
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	СформироватьСтруктуруРеквизитовФормы();
	
	СтруктураРеквизитовФормы.СписокПечатаемыхЛистов = Новый СписокЗначений;
	
	// ОПИСАНИЕ ПАРМЕТРОВ ФОРМЫ
	//
	// Версия формы
	СтруктураРеквизитовФормы.мВерсияФормы = "03/08/2011";
	СтруктураРеквизитовФормы.мКодОтчета   = "0609203";
	// Код отчета, равен коду по ОКУД
	СтруктураРеквизитовФормы.мПечатныеФормы = Новый СписокЗначений;
	
	ПолеТабличногоДокументаФормаОтчета.Вывести(Отчеты[Сред(Лев(ЭтаФорма.ИмяФормы,
																Найти(ЭтаФорма.ИмяФормы, ".Форма.") - 1), 7)].ПолучитьМакет("ФормаОтчета2011Кв1_ФормаОтчета"));
	
	СтруктураРеквизитовФормы.мВыбраннаяФорма          = Параметры.мВыбраннаяФорма;
	СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета  = Параметры.мДатаКонцаПериодаОтчета;
	СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета = Параметры.мДатаНачалаПериодаОтчета;
	СтруктураРеквизитовФормы.мПериодичность           = Параметры.мПериодичность;
	СтруктураРеквизитовФормы.мСкопированаФорма        = Параметры.мСкопированаФорма;
	СтруктураРеквизитовФормы.мСохраненныйДок          = Параметры.мСохраненныйДок;
	СтруктураРеквизитовФормы.Организация      		  = Параметры.Организация;
	
	ДатаПодписи = ТекущаяДатаСеанса();
	
	СтруктураРеквизитовФормы.СправочникиВидыКонтактнойИнформацииПочтовыйАдресОрганизации = 
		Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресОрганизации;
	Инициализация(Параметры.БезОткрытияФормы);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриОткрытии" формы.
Процедура ПриОткрытии(Отказ)
		
	Если Найти(Заголовок, СтруктураРеквизитовФормы.СтрПериодОтчета) = 0 Тогда
		Заголовок = Заголовок + " за " + СтруктураРеквизитовФормы.СтрПериодОтчета;
	КонецЕсли;
	
	ОргСтр = " (" + СтруктураРеквизитовФормы.НаимОрганизации + ")";
	Если Найти(Заголовок, ОргСтр) = 0 Тогда
		Заголовок = Заголовок + ОргСтр;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПередЗакрытием" формы.
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	УПЖКХ_ТиповыеМетодыКлиент.ПередЗакрытием(ЭтаФорма, Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриЗакрытии" формы.
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	УПЖКХ_ТиповыеМетодыКлиент.ПриЗакрытии(ЭтаФорма, ЗавершениеРаботы);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

&НаКлиенте
// Обработчик события "ПриИзменении" поля "ДатаПодписи".
Процедура ДатаПодписиПриИзменении(Элемент)
	
	ПолеТабличногоДокументаФормаОтчета.Области.ДатаСоставленияОтчета.Значение = 
		Формат(ДатаПодписи, "ДФ=""дд ММММ гггг 'г.'""");
	
	ЗаполнитьСведенияОбОрганизацииНаКлиенте(Истина);
	
	Модифицированность = Истина;	
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля "ВидДокументаПредставление".
Процедура ВидДокументаПредставлениеПриИзменении(Элемент)
	
	УПЖКХ_ТиповыеМетодыКлиент.ПриИзмененииВидаДокументаИКорректировки(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "Очистка" поля "ВидДокументаПредставление".
Процедура ВидДокументаПредставлениеОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "Выбор" поля "ПолеТабличногоДокументаФормаОтчета".
Процедура ПолеТабличногоДокументаФормаОтчетаВыбор(Элемент, Область, СтандартнаяОбработка)
	
	Если Область.Имя = "ОргАдрес" Тогда
		РегламентированнаяОтчетностьКлиент.ОбработкаАдресаВСтатистическомОтчете(ЭтаФорма, Область, СтандартнаяОбработка);
	КонецЕсли;
	
КонецПроцедуры // ПолеТабличногоДокументаФормаОтчетаВыбор()

&НаКлиенте
// Обработчик события "ПриИзмененииСодержимогоОбласти" поля "ПолеТабличногоДокументаФормаОтчета".
Процедура ПолеТабличногоДокументаФормаОтчетаПриИзмененииСодержимогоОбласти(Элемент, Область)
	
	Если Область.СодержитЗначение И Область.ТипЗначения.СодержитТип(Тип("Число")) Тогда
		Если Область.Значение = 0 И Область.ТипЗначения.КвалификаторыЧисла.РазрядностьДробнойЧасти = 0
		  И Область.ТипЗначения.КвалификаторыЧисла.Разрядность > 4 Тогда
			
			ФорматПредставленияНуля = ПолучитьПредставлениеНуляИзСтрокиФормата(Область.Формат);
			
			ОтображениеНуля = СокрЛП(Формат(0, ЗаменитьПредставлениеНуляВСтрокеФормата(Область.Формат, "ЧН=")));
			Если ПустаяСтрока(ОтображениеНуля) Тогда
				ОтображениеНуля = "0";
			КонецЕсли;
			ТипСтрокиЗаполнения = Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(СтрДлина(ОтображениеНуля),
														ДопустимаяДлина.Фиксированная));
			СтрокаЗаполнения = ТипСтрокиЗаполнения.ПривестиЗначение();
			
			Список = Новый СписокЗначений;
			Список.Добавить("ЧН=' '", "  <Пустое значение>    " + СтрокаЗаполнения);
			Список.Добавить("ЧН=" + ОтображениеНуля, "  Отображать как """ + ОтображениеНуля + """  ");
			
			НайденнаяСтрока = Список.НайтиПоЗначению(ФорматПредставленияНуля);
			
			ДопПараметры = Новый Структура("Область", Область);
			ПоказатьВыборИзСписка(	Новый ОписаниеОповещения("ОбработатьРезультатВыбораИзСписка", ЭтаФорма, ДопПараметры),
									Список, Элемент, ?(НайденнаяСтрока = Неопределено, Список[0], НайденнаяСтрока));
			Возврат;
			
		КонецЕсли;
	КонецЕсли;
	
	ПолеТабличногоДокументаФормаОтчетаПриИзмененииСодержимогоОбластиПродожение();
	
КонецПроцедуры // ПолеТабличногоДокументаФормаОтчетаПриИзмененииСодержимогоОбласти()

&НаКлиенте
// Обработчик результата выбора из списка, вызванного в процедуре "ПолеТабличногоДокументаФормаОтчетаПриИзмененииСодержимогоОбласти()".
Процедура ОбработатьРезультатВыбораИзСписка(ВыбранныйЭлемент, ДопПараметры) Экспорт
	
	Если НЕ ВыбранныйЭлемент = Неопределено Тогда
		Область = ДопПараметры.Область;
		Область.Формат = ЗаменитьПредставлениеНуляВСтрокеФормата(Область.Формат, ВыбранныйЭлемент.Значение);
		
		Модифицированность = Истина;
		
	КонецЕсли;
	
	ПолеТабличногоДокументаФормаОтчетаПриИзмененииСодержимогоОбластиПродожение();
	
КонецПроцедуры // ОбработатьРезультатВыбораИзСписка()

&НаКлиенте
Процедура ПолеТабличногоДокументаФормаОтчетаПриИзмененииСодержимогоОбластиПродожение()
	
	РасчетНаКлиенте();
	
	Модифицированность = Истина;
	
КонецПроцедуры // ПолеТабличногоДокументаФормаОтчетаПриИзмененииСодержимогоОбласти()

&НаКлиенте
// Обработчик события "ПриИзменении" поля "НомерКорректировки".
Процедура НомерКорректировкиПриИзменении(Элемент)
	
	Модифицированность = Истина;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
// Процедура вызывается при нажатии кнопки "Заполнить".
//
Процедура ЗаполнитьОтчет(Команда)
	
	ПоказатьВопрос(	Новый ОписаниеОповещения("ОбработатьРезультатВопросаЗаполнитьОтчет", ЭтаФорма),
					"Перед автозаполнением произойдет очистка отчета. Продолжить?",
					РежимДиалогаВопрос.ДаНет,,
					КодВозвратаДиалога.Нет);
	
КонецПроцедуры // ЗаполнитьОтчет()

&НаКлиенте
Процедура ОбработатьРезультатВопросаЗаполнитьОтчет(Ответ, ДопПараметры) Экспорт 
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ОчиститьОтчет(Ложь, Новый ОписаниеОповещения("ВыполнитьПроцедуруОповещенияЗаполнитьОтчет", ЭтаФорма));
	КонецЕсли;
	
КонецПроцедуры // ОбработатьРезультатВопросаЗаполнитьОтчет()

&НаКлиенте
Процедура ВыполнитьПроцедуруОповещенияЗаполнитьОтчет(Результат, ДопПараметры) Экспорт
	
	ЗаполнитьАвто();
	
КонецПроцедуры // ВыполнитьПроцедуруОповещенияЗаполнитьОтчет()

&НаКлиенте
// Процедура вызывается при нажатии кнопки "Очистить".
Процедура КомандаОчиститьОтчет(Команда)
	
	ОчиститьОтчет();
	
КонецПроцедуры

&НаКлиенте
// Процедура вызывается при нажатии кнопки "Обновить".
Процедура Обновить(Команда)
	
	СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация = Истина;
	ЗаполнитьСведенияОбОрганизацииНаКлиенте();
	СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация = Ложь;
	Модифицированность = Истина;	
	
КонецПроцедуры

&НаКлиенте
// Процедура вызывается при нажатии кнопки "СохранитьОтчет".
Процедура СохранитьОтчет(Команда)
	
	СохранитьНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
// Процедура вызывается при нажатии кнопки "ПечататьСразу".
Процедура ПечататьСразу(Команда)
	
	Если Команда <> Неопределено Тогда
		Печать(Команда.Имя);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура вызывается при нажатии кнопки "ПоказатьБланк".
Процедура ПоказатьБланк(Команда)
	
	Если Команда <> Неопределено Тогда
		Печать(Команда.Имя);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура вызывается при нажатии кнопки "ОткрытьФормуНастроек".
Процедура ОткрытьФормуНастроек(Команда)
	
	ОткрытьФорму("Отчет.Удалить_УПЖКХ_РегламентированныйОтчетСтатистикаФорма26ЖКХ.Форма.НастройкиОтчета");
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

&НаСервере
// Процедура формирует структуру рквизитов формы.
Процедура СформироватьСтруктуруРеквизитовФормы()
	
	СтруктураРеквизитовФормы = РегламентированнаяОтчетность.СформироватьСтруктуруОбязательныхРеквизитовСтатистическогоОтчета();
	СтруктураРеквизитовФормы.Вставить("ВидДокумента");
	СтруктураРеквизитовФормы.Вставить("ЕдиницаИзмерения");
	СтруктураРеквизитовФормы.Вставить("мАдресвФорматеДляВыгрузки");
	СтруктураРеквизитовФормы.Вставить("мВариант");
	СтруктураРеквизитовФормы.Вставить("мВерсияФормы");
	СтруктураРеквизитовФормы.Вставить("мВПрограммеИзмененаОрганизация");
	СтруктураРеквизитовФормы.Вставить("мВыбраннаяФорма");
	СтруктураРеквизитовФормы.Вставить("мДатаКонцаПериодаОтчета");
	СтруктураРеквизитовФормы.Вставить("мДатаНачалаПериодаОтчета");
	СтруктураРеквизитовФормы.Вставить("мЗаписываетсяНовыйДокумент");	
	СтруктураРеквизитовФормы.Вставить("мЗаписьЗапрещена");	
	СтруктураРеквизитовФормы.Вставить("мКодОтчета");
	СтруктураРеквизитовФормы.Вставить("мПериодичность");
	СтруктураРеквизитовФормы.Вставить("мПечатныеФормы");	
	СтруктураРеквизитовФормы.Вставить("мСкопированаФорма");	
	СтруктураРеквизитовФормы.Вставить("мСохраненныйДок");	
	СтруктураРеквизитовФормы.Вставить("Организация");	
	СтруктураРеквизитовФормы.Вставить("СправочникиВидыКонтактнойИнформацииПочтовыйАдресОрганизации");	
	СтруктураРеквизитовФормы.Вставить("ТочностьЕдиницыИзмерения");
	СтруктураРеквизитовФормы.Вставить("СтрПериодОтчета");
	СтруктураРеквизитовФормы.Вставить("НаимОрганизации");
	СтруктураРеквизитовФормы.Вставить("СписокПечатаемыхЛистов");	
	СтруктураРеквизитовФормы.Вставить("мСтрокаФормата");	
	СтруктураРеквизитовФормы.Вставить("мСчетчикСтраниц");
	СтруктураРеквизитовФормы.Вставить("мТаблицаСоответствияЛьготныхКатегорий");
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуКонтактнойИнформацииЗавершение(Результат, Параметры) Экспорт
	
	РегламентированнаяОтчетностьКлиент.ОбновитьАдресВТабличномДокументеСтатистическойОтчетности(Результат, Параметры.Область, СтруктураРеквизитовФормы);
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
// Производит начальное заполнение реквизитов отчета.
Процедура Инициализация(БезОткрытияФормы = Ложь)
	
	СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация = Ложь;

	ТекТабличноеПоле = ПолеТабличногоДокументаФормаОтчета;

	СтруктураРеквизитовФормы.ВидДокумента = 0;
	НомерКорректировки = 1;
	СтруктураРеквизитовФормы.мАдресвФорматеДляВыгрузки = "";
	ФормироватьСтруктуруСвойствСтраниц();

	Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда

		Если СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено Тогда
			// документ скопирован
			ВосстановитьСохраненныеДанные();
		КонецЕсли;

	Иначе

		// При открытии или при копировании сохраненного
		// отчета восстанавливаем сохраненные данные.
		ВосстановитьСохраненныеДанные();
		
		Если ЗначениеЗаполнено(СтруктураРеквизитовФормы.мСкопированаФорма) Тогда
			СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено;
		КонецЕсли;

	КонецЕсли;

	ТекТабличноеПоле.Области.ДатаСоставленияОтчета.Значение = Формат(ДатаПодписи, "ДФ=""дд ММММ гггг 'г.'""");
	ПоказатьПериод();

	Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено
	  Или СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация Тогда
		ЗаполнитьСведенияОбОрганизацииНаСервере();
	КонецЕсли;
		
	СтруктураРеквизитовФормы.НаимОрганизации = СтруктураРеквизитовФормы.Организация.Наименование;
	
	ТекущийЭлемент = Элементы["ПолеТабличногоДокументаФормаОтчета"];
	ВидДокументаПредставление = ?(СтруктураРеквизитовФормы.ВидДокумента = 0, "Первичный", "Корректирующий");
	Элементы.НомерКорректировки.Доступность = (СтруктураРеквизитовФормы.ВидДокумента = 1);
	
КонецПроцедуры

// Формирует дерево значений - структуру страниц отчета,
// содержащей настройки показа страниц, вывода на печать и выгрузки в ИФНС.
//
&НаСервере
 Процедура ФормироватьСтруктуруСвойствСтраниц()

	мСвойстваРазделовДекларации.ПолучитьЭлементы().Очистить();
   	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();

	// Добавим св-ва Титульного листа
	СтрокаУровня1.ИмяСтраницы                          = "ФормаОтчета";
	СтрокаУровня1.МногострочностьВРазделе              = 0;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Ложь;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;

КонецПроцедуры

&НаСервере
Процедура ПоказатьПериод()

	// задаем заголовок формы
	СтруктураРеквизитовФормы.СтрПериодОтчета = 
		ПредставлениеПериода(НачалоДня(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета),
							 КонецДня(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета), "ФП = Истина");
	ПериодОтчета = " " + СтруктураРеквизитовФормы.СтрПериодОтчета;
	ПолеТабличногоДокументаФормаОтчета.Области.ПериодОтчета.Значение = ПериодОтчета;

КонецПроцедуры

// Восстанавливает сохраненные данные отчета.
//
&НаСервере
Процедура ВосстановитьСохраненныеДанные()
	Перем ДанныеВариановАвтоЗаполнения;
	Перем ПоказателиОтчета;
	Перем ВерсияФормы;

	/// В случае, если формы была скопирована по F9, то проверим, не изменилась ли организация.
	Если СтруктураРеквизитовФормы.Организация <> СтруктураРеквизитовФормы.мСохраненныйДок.Организация
	   И СтруктураРеквизитовФормы.Организация <> УПЖКХ_ТиповыеМетодыКлиентСервер.ПустоеЗначениеТипа(
	   												"СправочникСсылка.Организации")
	   И СтруктураРеквизитовФормы.Организация <> Неопределено Тогда
		// Меняем переменную, для того, чтобы запустилась процедура ЗаполнитьСведенияОбОрганизации
		СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация = Истина;
		//СтруктураРеквизитовФормы.мСохраненныйДок.Организация = СтруктураРеквизитовФормы.Организация;
	Иначе
		// восстанавливаем реквизиты отчета
		СтруктураРеквизитовФормы.Организация = СтруктураРеквизитовФормы.мСохраненныйДок.Организация;
	КонецЕсли;


	ДатаПодписи              = СтруктураРеквизитовФормы.мСохраненныйДок.ДатаПодписи;
	СтруктураРеквизитовФормы.ЕдиницаИзмерения         = СтруктураРеквизитовФормы.мСохраненныйДок.ЕдиницаИзмерения;
	СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = СтруктураРеквизитовФормы.мСохраненныйДок.ТочностьЕдиницыИзмерения;
	Комментарий              = СтруктураРеквизитовФормы.мСохраненныйДок.Комментарий;

	// восстанавливаем сохраненные данные отчета
	СписокСохранения = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить();
	
	// восстанавливаем сохраненные данные вариантов автозаполнения ячеек
	Если СписокСохранения.Свойство("ДанныеВариантовАвтоЗаполнения", ДанныеВариановАвтоЗаполнения) Тогда
		
		Если НЕ ДанныеВариановАвтоЗаполнения = Неопределено Тогда
			
			мСтруктураВариантыЗаполнения.Очистить();
			
			Для Каждого ЭлементСтруктуры Из ДанныеВариановАвтоЗаполнения Цикл
				
				мСтруктураВариантыЗаполнения.Вставить(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Ключ);
				
				ЭтаФорма["ТаблицаВариантыЗаполнения" + ЭлементСтруктуры.Ключ].Очистить();
				
				Для Каждого ЭлементМассива Из ЭлементСтруктуры.Значение Цикл
										
					ТаблВарЗаполнения = 
						ЭтаФорма["ТаблицаВариантыЗаполнения" + ЭлементСтруктуры.Ключ].Добавить().ТаблицаВариантовЗаполнения;
										
					ЗначениеВДанныеФормы(ЭлементМассива, ТаблВарЗаполнения);
					
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЕсли;
				 		
	КонецЕсли;

	// восстанавливаем версию формы
	СписокСохранения.Свойство("ВерсияФормы", ВерсияФормы);

	// восстановим сохраненные данные редактируемых ячеек
	СписокСохранения.Свойство( "ПоказателиОтчета", ПоказателиОтчета );
   
	Для Каждого ПоказателиСтраницы Из ПоказателиОтчета Цикл
		ИмяТекТабличноеПоле = ПоказателиСтраницы.Ключ;
		ТекТабличноеПоле    = ЭтаФорма[ИмяТекТабличноеПоле];
		ПоказателиТаблПоле  = ПоказателиСтраницы.Значение;

		Для Каждого Показатель Из ПоказателиТаблПоле Цикл
			ИмяПоказателя       = Показатель.Ключ;
			ЗначениеПоказателя  = Показатель.Значение;

			// установим значение в таблице
			Попытка
				Если Лев(ИмяПоказателя, 2) = "ЧН" Тогда
					// значение показателя с префиксом "ЧН" содержит формат представления нуля
					ОбластьПоказателя = ТекТабличноеПоле.Области[Сред(ИмяПоказателя, 3)];
					ОбластьПоказателя.Формат = ЗаменитьПредставлениеНуляВСтрокеФормата(ОбластьПоказателя.Формат, ЗначениеПоказателя);
					Продолжить;
				КонецЕсли;
				ТекТабличноеПоле.Области[ИмяПоказателя].Значение = ЗначениеПоказателя;
			Исключение
			КонецПопытки;
		КонецЦикла;
	КонецЦикла;
	
	СтруктураРеквизитовФормы.мАдресвФорматеДляВыгрузки = ПолеТабличногоДокументаФормаОтчета.Области.ОргАдрес.Значение;
	ПолеТабличногоДокументаФормаОтчета.Области.ОргАдрес.Значение = 
		УПЖКХ_ТиповыеМетодыКлиентСервер.ПредставлениеАдресаВФормате9Запятых(
			СтруктураРеквизитовФормы.мАдресвФорматеДляВыгрузки);

	УПЖКХ_ТиповыеМетодыСервер.ОперацииПриВосстановленииРегламентированногоОтчета(ЭтаФорма);

	Модифицированность = Ложь;
	
КонецПроцедуры

&НаСервере
// Процедура заполняет сведения об организации.
Процедура ЗаполнитьСведенияОбОрганизацииНаСервере(ВПрограммеИзмененаДатаПодписи = Ложь)
	
	ЗаполнитьСведенияОбОрганизации(ЭтаФорма, ВПрограммеИзмененаДатаПодписи);
		
КонецПроцедуры

// Процедура управляет выводом сведений о выбранной организации
// в соответствующие ячейки табличного документа.
//
// Параметры:
// ВПрограммеИзмененаДатаПодписи - Истина, если процедура запускается для обновления параметров завясящих
// от даты подписания документа, например ФИО должностных лиц
//
&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьСведенияОбОрганизации(Форма, ВПрограммеИзмененаДатаПодписи = Ложь)

	Если (Форма.СтруктураРеквизитовФормы.Организация  = Неопределено)
	  Или (Форма.СтруктураРеквизитовФормы.Организация = 
	  		УПЖКХ_ТиповыеМетодыКлиентСервер.ПустоеЗначениеТипа("СправочникСсылка.Организации")) Тогда
		Возврат;
	КонецЕсли;

	Сведения = Новый СписокЗначений;

	Если НЕ ВПрограммеИзмененаДатаПодписи Тогда
		Сведения.Добавить("", "ИННЮЛ"); // ИНН
		Сведения.Добавить("", "ОКПО");  // ОКПО
		Сведения.Добавить("", "АдрПочт");
		Сведения.Добавить("", "НаимЮЛПол");
		Сведения.Добавить("", "ОснВидДеят");
		Сведения.Добавить("", "ОКПО");
	КонецЕсли;

	Сведения.Добавить("", "ТелИсп");
	Сведения.Добавить("", "ДолжнИсп");
	Сведения.Добавить("", "ФИОИсп");

	ОргСведения = УПЖКХ_ТиповыеМетодыВызовСервера.ПолучитьСведенияОбОрганизации(Форма.СтруктураРеквизитовФормы.Организация,
																				Форма.ДатаПодписи, Сведения);

	Если НЕ ВПрограммеИзмененаДатаПодписи Тогда

		ИННЮЛ = "";
		ОКПО = "";
		АдрПочт     = "";
		НаимЮЛПол = "";
		ОснВидДеят = "";
		ОКПО = "";

	КонецЕсли;

	ТелИсп   = "";
	ДолжнИсп = "";
	ФИОИсп = "";

	Если НЕ ВПрограммеИзмененаДатаПодписи Тогда

		ОргСведения.Свойство("ИННЮЛ",          ИННЮЛ);
		ОргСведения.Свойство("ОКПО",           ОКПО);
		ОргСведения.Свойство("АдрПочт",        АдрПочт);
		ОргСведения.Свойство("НаимЮЛПол",      НаимЮЛПол);
		ОргСведения.Свойство("ОКПО",           ОКПО);

	КонецЕсли;

	ОргСведения.Свойство("ТелИсп", 		   ТелИсп);
	ОргСведения.Свойство("ФИОИсп",         ФИОИсп);
	ОргСведения.Свойство("ДолжнИсп",       ДолжнИсп);

	Если ВПрограммеИзмененаДатаПодписи Тогда

		Форма.ПолеТабличногоДокументаФормаОтчета.Области.ОргИсполнитель.Значение = ФИОИсп;
		Форма.ПолеТабличногоДокументаФормаОтчета.Области.ОргДолжностьИсп.Значение = ДолжнИсп;
		Форма.ПолеТабличногоДокументаФормаОтчета.Области.ОргТелефонИсп.Значение = ТелИсп;
		Возврат;
		
	КонецЕсли;

	Если (НЕ ЗначениеЗаполнено(Форма.ПолеТабличногоДокументаФормаОтчета.Области.ОргКодОКПО.Значение))
	  ИЛИ (Форма.СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация) Тогда

		Если НЕ УПЖКХ_ТиповыеМетодыВызовСервера.ЭтоЮридическоеЛицо(Форма.СтруктураРеквизитовФормы.Организация) Тогда
			Форма.ПолеТабличногоДокументаФормаОтчета.Области.ОргКодОКПО.Значение = "";
		Иначе
			Форма.ПолеТабличногоДокументаФормаОтчета.Области.ОргКодОКПО.Значение = ОКПО;
		КонецЕсли;

	КонецЕсли;

	Если (НЕ ЗначениеЗаполнено(Форма.ПолеТабличногоДокументаФормаОтчета.Области.ОргНазв.Значение))
	  ИЛИ (Форма.СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация) Тогда
		Форма.ПолеТабличногоДокументаФормаОтчета.Области.ОргНазв.Значение = НаимЮЛПол;
	КонецЕсли;

	Если (Форма.СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация)
	  Или (ПустаяСтрока(Форма.ПолеТабличногоДокументаФормаОтчета.Области.ОргАдрес.Значение)) Тогда

		Если (ЗначениеЗаполнено(СтрЗаменить(АдрПочт, ",", ""))) Тогда
			
			Форма.ПолеТабличногоДокументаФормаОтчета.Области.ОргАдрес.Значение = 
				УПЖКХ_ТиповыеМетодыКлиентСервер.ПредставлениеАдресаВФормате9Запятых(АдрПочт);
			Форма.СтруктураРеквизитовФормы.мАдресвФорматеДляВыгрузки = АдрПочт;
		Иначе
			Форма.ПолеТабличногоДокументаФормаОтчета.Области.ОргАдрес.Значение = "";
			Форма.СтруктураРеквизитовФормы.мАдресвФорматеДляВыгрузки = "";
		КонецЕсли;

	КонецЕсли;

	Если (НЕ ЗначениеЗаполнено(Форма.ПолеТабличногоДокументаФормаОтчета.Области.ОргИсполнитель.Значение))
	  ИЛИ (Форма.СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация) Тогда
		Форма.ПолеТабличногоДокументаФормаОтчета.Области.ОргИсполнитель.Значение = ФИОИсп;
	КонецЕсли;

	Если (НЕ ЗначениеЗаполнено(Форма.ПолеТабличногоДокументаФормаОтчета.Области.ОргДолжностьИсп.Значение))
	  ИЛИ (Форма.СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация) Тогда
		Форма.ПолеТабличногоДокументаФормаОтчета.Области.ОргДолжностьИсп.Значение = ДолжнИсп;
	КонецЕсли;

	Если (НЕ ЗначениеЗаполнено(Форма.ПолеТабличногоДокументаФормаОтчета.Области.ОргТелефонИсп.Значение))
	  ИЛИ (Форма.СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация) Тогда
		Форма.ПолеТабличногоДокументаФормаОтчета.Области.ОргТелефонИсп.Значение = ТелИсп;
	КонецЕсли;

КонецПроцедуры

// Процедура очищает содержимое редактируемых и вычисляемых
// ячеек табличного документа.
//
&НаКлиенте
Процедура ОчиститьОтчет(ЗапрашиватьПодтверждение = Истина, ОписаниеОповещения = Неопределено)
	
	Если ЗапрашиватьПодтверждение Тогда
		ДопПараметры = Новый Структура("ОписаниеОповещения", ОписаниеОповещения);
		ПоказатьВопрос(	Новый ОписаниеОповещения("ОбработатьРезультатВопросаОчиститьОтчет", ЭтаФорма, ДопПараметры),
						"Внимание! Будут очищены все показатели отчета. Продолжить операцию?",
						РежимДиалогаВопрос.ДаНет,,
						КодВозвратаДиалога.Нет);
		Возврат;
	КонецЕсли;
	
	Очистить();
	
КонецПроцедуры // Очистить()

&НаКлиенте
Процедура ОбработатьРезультатВопросаОчиститьОтчет(Ответ, ДопПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	Очистить();
	
	Если НЕ ДопПараметры.ОписаниеОповещения = Неопределено Тогда
		ВыполнитьОбработкуОповещения(ДопПараметры.ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры // ОбработатьРезультатВопросаОчиститьОтчет()

// Процедура очищает содержимое редактируемых и вычисляемых
// ячеек табличного документа.
//
&НаКлиенте
Процедура Очистить()
		
	ОчиститьТабличноеПолеНаСервере();

	// устанавливаем флаг модифицированности формы
	Модифицированность = Истина;	
	
КонецПроцедуры

&НаСервере
// Процедура очищает содержимое редактируемых и вычисляемых
// ячеек табличного документа на сервере.
Процедура ОчиститьТабличноеПолеНаСервере()
	
	ОчиститьТабличноеПоле(ЭтаФорма);
	РасчетНаСервере();
	
КонецПроцедуры

// Процедура очищает содержимое редактируемыхи и вычисляемых ячеек
// поля табличного документа, переданного параметром ВыбТабличноеПоле.
//
// Параметры:
//  ВыбТабличноеПоле - поле табличного документа.
//
&НаКлиентеНаСервереБезКонтекста
Процедура ОчиститьТабличноеПоле(Форма)
	
	// Список ячеек, очищать которые не нужно
	Перем СписокПоказателейНеПодлежащихОчистке;

	ВыбТабличноеПоле = Форма.ПолеТабличногоДокументаФормаОтчета;
	
	СписокПоказателейНеПодлежащихОчистке = Новый СписокЗначений;
	СписокПоказателейНеПодлежащихОчистке.Добавить("ОргНазв");
	СписокПоказателейНеПодлежащихОчистке.Добавить("ОргАдрес");
	СписокПоказателейНеПодлежащихОчистке.Добавить("ОргКодОКПО");
	СписокПоказателейНеПодлежащихОчистке.Добавить("ОргКод");
	СписокПоказателейНеПодлежащихОчистке.Добавить("ОргКодНазв");
	СписокПоказателейНеПодлежащихОчистке.Добавить("ОргКодНазв1");
	СписокПоказателейНеПодлежащихОчистке.Добавить("ОргКодЗнач");
	СписокПоказателейНеПодлежащихОчистке.Добавить("ОргКодЗнач1");
	СписокПоказателейНеПодлежащихОчистке.Добавить("ОргДолжностьИсп");
	СписокПоказателейНеПодлежащихОчистке.Добавить("ОргИсполнитель");
	СписокПоказателейНеПодлежащихОчистке.Добавить("ОргТелефонИсп");
	
	Для Инд = 0 По ВыбТабличноеПоле.Области.Количество() - 1 Цикл
		ТекущаяОбласть = ВыбТабличноеПоле.Области[Инд];
		
		// Ячейки не подлежащие очистки
		Если СписокПоказателейНеПодлежащихОчистке.НайтиПоЗначению(ТекущаяОбласть.Имя) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;

		Если Не ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			Продолжить;
		КонецЕсли;

		Если Не ТекущаяОбласть.СодержитЗначение Тогда
			Продолжить;
		КонецЕсли;

		Если ТекущаяОбласть.Защита Тогда
			Продолжить;
		КонецЕсли;

		ТекущаяОбласть.Очистить();
		ТекущаяОбласть.Формат = ЗаменитьПредставлениеНуляВСтрокеФормата(ТекущаяОбласть.Формат, "ЧН=' '");
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
// Процедура заполняет сведения об организации.
Процедура ЗаполнитьСведенияОбОрганизацииНаКлиенте(ВПрограммеИзмененаДатаПодписи = Ложь)
	
	ЗаполнитьСведенияОбОрганизации(ЭтаФорма, ВПрограммеИзмененаДатаПодписи);
		
КонецПроцедуры

// РасчетНаКлиенте()
//
&НаКлиенте
Процедура РасчетНаКлиенте()

	Расчет(ЭтаФорма);

КонецПроцедуры

// РасчетНаСервере()
//
&НаСервере
Процедура РасчетНаСервере()

	Расчет(ЭтаФорма);

КонецПроцедуры

// Выполняет расчет вычисляемых показателей отчета
// (ячеек, выделенных зеленым цветом).
//
&НаКлиентеНаСервереБезКонтекста
Процедура Расчет(Форма)
	
	мФормаОтчета = Форма.ПолеТабличногоДокументаФормаОтчета;
	
	мФормаОтчета.Области.П01000103.Значение = мФормаОтчета.Области.П01000203.Значение
											+ мФормаОтчета.Области.П01000303.Значение + мФормаОтчета.Области.П01000403.Значение;
	мФормаОтчета.Области.П01000104.Значение = мФормаОтчета.Области.П01000204.Значение
											+ мФормаОтчета.Области.П01000304.Значение + мФормаОтчета.Области.П01000404.Значение;
	мФормаОтчета.Области.П01000105.Значение = мФормаОтчета.Области.П01000205.Значение
											+ мФормаОтчета.Области.П01000305.Значение + мФормаОтчета.Области.П01000405.Значение;
	мФормаОтчета.Области.П01000106.Значение = мФормаОтчета.Области.П01000206.Значение
											+ мФормаОтчета.Области.П01000306.Значение + мФормаОтчета.Области.П01000406.Значение;
	мФормаОтчета.Области.П01000107.Значение = мФормаОтчета.Области.П01000207.Значение
											+ мФормаОтчета.Области.П01000307.Значение + мФормаОтчета.Области.П01000407.Значение;
	мФормаОтчета.Области.П01000108.Значение = мФормаОтчета.Области.П01000208.Значение
											+ мФормаОтчета.Области.П01000308.Значение + мФормаОтчета.Области.П01000408.Значение;

	
КонецПроцедуры

 // Функция собирает значения редактирукемых ячеек +табличного документа
// в коллекцию значений типа "структура".
//
// Параметры:
//  ТабличноеПоле - поле табличного документа текущей формы.
//
// Возвращаемое значение:
//  Структура.
//
&НаКлиентеНаСервереБезКонтекста
Функция СобратьДанныеТекущегоТаблПоля(Форма, ИмяТабличногоПоля)

	ТабличноеПоле = Форма[ИмяТабличногоПоля];

	СтруктураДанныхПоля = Новый Структура;

	Для Инд = 0 По ТабличноеПоле.Области.Количество() - 1 Цикл
		ТекущаяОбласть = ТабличноеПоле.Области[Инд];

		Если Не ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			Продолжить;
		КонецЕсли;

		Если НЕ(ТекущаяОбласть.СодержитЗначение) Тогда
			Продолжить;
		КонецЕсли;

		ИмяПоказателя      = ТекущаяОбласть.Имя;
		ЗначениеПоказателя = ТекущаяОбласть.Значение;

		СтруктураДанныхПоля.Вставить(ИмяПоказателя, ЗначениеПоказателя);
		
		// Сохраним формат отображения нуля для восстановления представления
		// в поле табличного документа и контроля выгрузки показателя в формате XML
		Если ТипЗнч(ЗначениеПоказателя) = Тип("Число") И ЗначениеПоказателя = 0 Тогда
			ФорматПредставленияНуля = ПолучитьПредставлениеНуляИзСтрокиФормата(ТекущаяОбласть.Формат);
			Если ЗначениеЗаполнено(ФорматПредставленияНуля) Тогда
				СтруктураДанныхПоля.Вставить("ЧН" + ИмяПоказателя, ФорматПредставленияНуля);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	СтруктураДанныхПоля.Вставить("ОргАдрес", Форма.СтруктураРеквизитовФормы.мАдресвФорматеДляВыгрузки);
	
	Возврат СтруктураДанныхПоля;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
// Получает представление нуля.
Функция ПолучитьПредставлениеНуляИзСтрокиФормата(СтрокаФормата)
	
	Если ПустаяСтрока(СтрокаФормата) Тогда
		Возврат "";
	КонецЕсли;
	
	СтрокаФорматаТекст = СтрЗаменить(СтрокаФормата, ";", Символы.ПС);
	Для НомерСтроки = 1 По СтрЧислоСтрок(СтрокаФорматаТекст) Цикл
		ПодстрокаФормата = СтрПолучитьСтроку(СтрокаФорматаТекст, НомерСтроки);
		Если Найти(ПодстрокаФормата, "ЧН=") > 0 Тогда
			Возврат СокрЛП(ПодстрокаФормата);
		КонецЕсли;
	КонецЦикла;
	
	Возврат "";
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
// Заменяеь представление нуля.
Функция ЗаменитьПредставлениеНуляВСтрокеФормата(СтрокаФормата, ПредставлениеНуля)
	
	НоваяСтрокаФормата = "";
	
	РазделительПодстрок = ";";
	СтрокаФорматаТекст = СтрЗаменить(СтрокаФормата, РазделительПодстрок, Символы.ПС);
	Для НомерСтроки = 1 По СтрЧислоСтрок(СтрокаФорматаТекст) Цикл
		ПодстрокаФормата = СокрЛП(СтрПолучитьСтроку(СтрокаФорматаТекст, НомерСтроки));
		Если ПустаяСтрока(ПодстрокаФормата) Тогда
			Продолжить;
		КонецЕсли;
		Если Найти(ПодстрокаФормата, "ЧН=") > 0 Тогда
			ПодстрокаФормата = ПредставлениеНуля;
		КонецЕсли;
		НоваяСтрокаФормата = 
			НоваяСтрокаФормата + ?(ПустаяСтрока(НоваяСтрокаФормата), "", РазделительПодстрок) + ПодстрокаФормата;
	КонецЦикла;
	
	Если ПустаяСтрока(НоваяСтрокаФормата) Тогда
		Возврат ПредставлениеНуля;
	КонецЕсли;

	Возврат НоваяСтрокаФормата;
	
КонецФункции

&НаКлиенте
// Сохраняет отчет.
Процедура СохранитьНаКлиенте(Автосохранение = Ложь, ВыполняемоеОповещение = Неопределено) Экспорт
	
	Вариант = СтруктураРеквизитовФормы.ВидДокумента * НомерКорректировки;
	
	Если НЕ УПЖКХ_ТиповыеМетодыКлиент.ПриЗаписиРегламентированногоОтчетаНаКлиенте(ЭтаФорма, ,Автосохранение,Вариант) Тогда
		Возврат;
	КонецЕсли;
	
	ПодобныйОтчетСуществует = Ложь;
	ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки = Ложь;
	
	// формируем данные редактируемых ячеек таблицы
	ПоказателиОтчета = Новый Структура();
	
	#Если ВебКлиент Тогда
		ЗаполнитьПоказателиОтчетаНаСервере(ПоказателиОтчета);
	#Иначе
		ЗаполнитьПоказателиОтчетаНаКлиенте(ПоказателиОтчета);
	#КонецЕсли
	
	РезультатСохранения = ПередСохранением(,ПодобныйОтчетСуществует, Вариант,
											ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, Автосохранение, ПоказателиОтчета);
	
	ВидДокументаНомерКорректировкиИзменен = Неопределено;
	
	Если ПодобныйОтчетСуществует И Автосохранение Тогда
		Возврат;
	КонецЕсли;
	
	НуженВопросПередСохранением = (ПодобныйОтчетСуществует ИЛИ ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки);
	
	Если НуженВопросПередСохранением Тогда
		СохранитьНаКлиентеСВопросом(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, ПодобныйОтчетСуществует, ПоказателиОтчета);
	Иначе		
		ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения);		
	КонецЕсли;
	
КонецПроцедуры // СохранитьНаКлиенте()

&НаКлиенте
// Процедура проверяет параметры перед сохранением.
Процедура СохранитьНаКлиентеСВопросом(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, ПодобныйОтчетСуществует, ПоказателиОтчета)
	
	Если ПодобныйОтчетСуществует Тогда
		
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(КодВозвратаДиалога.Да, "Сохранить");
		Кнопки.Добавить(КодВозвратаДиалога.Нет, "Отмена");
		
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Отчет с видом %1 уже существует.
		|Сохранить отчет с таким же видом?'"), ?(Вариант = 0, """Первичный""", """Корректирующий/" + Вариант + """"));
		ДополнительныеПараметры = Новый Структура("Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, ПоказателиОтчета", Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, ПоказателиОтчета);
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросСохранитьОтчетСТакимЖеВидомЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, Кнопки, , Кнопки.Получить(1).Значение);
		
	Иначе
		
		СохранитьНаКлиентеСВопросомПродолжение(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, ПоказателиОтчета);
		
	КонецЕсли;
	
КонецПроцедуры // СохранитьНаКлиентеСВопросом()

&НаКлиенте
Процедура ВопросСохранитьОтчетСТакимЖеВидомЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	Автосохранение = ДополнительныеПараметры.Автосохранение;
	Вариант = ДополнительныеПараметры.Вариант;
	ВыполняемоеОповещение = ДополнительныеПараметры.ВыполняемоеОповещение;
	ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки = ДополнительныеПараметры.ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки;
	ПоказателиОтчета = ДополнительныеПараметры.ПоказателиОтчета;
	
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		
		Возврат;
		
	КонецЕсли;
	
	СохранитьНаКлиентеСВопросомПродолжение(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, ПоказателиОтчета);
	
КонецПроцедуры

&НаКлиенте
// Процедура вызывает механизм сохранения с вопросом пользователю.
Процедура СохранитьНаКлиентеСВопросомПродолжение(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, ПоказателиОтчета)
	
	Если ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки Тогда
		
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("ВидОтчета", Вариант);
		
		ФормаВопроса = РегламентированнаяОтчетностьКлиент.ПолучитьОбщуюФормуПоИмени("ВопросПриИзмененииВидаДокументаНомераКорректировки", ПараметрыФормы);
		
		ДополнительныеПараметры = Новый Структура("Автосохранение, Вариант, ВыполняемоеОповещение, ПоказателиОтчета", Автосохранение, Вариант, ВыполняемоеОповещение, ПоказателиОтчета);
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросПриИзмененииВидаДокументаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		
		ФормаВопроса.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
		ФормаВопроса.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		ФормаВопроса.Открыть();
		
	Иначе
		Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Сохраняется %1...'"), ЭтаФорма.Заголовок), , , БиблиотекаКартинок.Записать);
		РезультатСохранения = Сохранить(Автосохранение, , Вариант, Ложь, ПоказателиОтчета);
		ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения);
	КонецЕсли;
	
КонецПроцедуры // СохранитьНаКлиентеСВопросомПродолжение()

&НаКлиенте
// Обработчик результата вопроса, вызванного в процедуре "СохранитьНаКлиентеСВопросомПродолжение()".
Процедура ВопросПриИзмененииВидаДокументаЗавершение(КодВозврата, ДополнительныеПараметры) Экспорт
	
	Автосохранение = ДополнительныеПараметры.Автосохранение;
	Вариант = ДополнительныеПараметры.Вариант;
	ВыполняемоеОповещение = ДополнительныеПараметры.ВыполняемоеОповещение;
	ПоказателиОтчета = ДополнительныеПараметры.ПоказателиОтчета;
	
	Если КодВозврата = КодВозвратаДиалога.Да
		ИЛИ КодВозврата = КодВозвратаДиалога.Нет Тогда
		
		ВидДокументаНомерКорректировкиИзменен = ?(КодВозврата = КодВозвратаДиалога.Да, Истина, Ложь);
		
	Иначе
		
		Возврат;
		
	КонецЕсли;
	
	Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Сохраняется %1...'"), ЭтаФорма.Заголовок), , , БиблиотекаКартинок.Записать);
	РезультатСохранения = Сохранить(Автосохранение, , Вариант, ВидДокументаНомерКорректировкиИзменен, ПоказателиОтчета);
	ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения);
	
КонецПроцедуры // ВопросПриИзмененииВидаДокументаЗавершение() 

&НаКлиенте
// Выполняет обработку оповещения после сохранения.
Процедура ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения)
	
	КлючУникальности = СтруктураРеквизитовФормы.мСохраненныйДок;
	
	Если РезультатСохранения Тогда
		
		РегламентированнаяОтчетностьКлиент.ПослеЗаписиРегламентированногоОтчета(ЭтаФорма);
		
		Если ВыполняемоеОповещение <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ВыполняемоеОповещение);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ПослеСохраненияНаКлиенте()

&НаСервере
// Заполняет показатели отчета НаСервере.
Процедура ЗаполнитьПоказателиОтчетаНаСервере(ПоказателиОтчета)
	
	Префикс = "ПолеТабличногоДокумента";
	
	Для Каждого Группа из Элементы.Страницы.ПодчиненныеЭлементы Цикл
		
		Для Каждого ЭлементГруппы Из Группа.ПодчиненныеЭлементы Цикл 
			
			Если СтрЧислоВхождений(ЭлементГруппы.Имя, Префикс) = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			ПоказателиОтчета.Вставить(ЭлементГруппы.Имя, СобратьДанныеТекущегоТаблПоляНаСервере(ЭлементГруппы.Имя));
			
		КонецЦикла;
				
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
// Заполняет показатели отчета НаКлиенте.
Процедура ЗаполнитьПоказателиОтчетаНаКлиенте(ПоказателиОтчета)
	
	Префикс = "ПолеТабличногоДокумента";
	
	Для Каждого Группа из Элементы.Страницы.ПодчиненныеЭлементы Цикл
		
		Для Каждого ЭлементГруппы Из Группа.ПодчиненныеЭлементы Цикл 
			
			Если СтрЧислоВхождений(ЭлементГруппы.Имя, Префикс) = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			ПоказателиОтчета.Вставить(ЭлементГруппы.Имя, СобратьДанныеТекущегоТаблПоляНаКлиенте(ЭлементГруппы.Имя));
			
		КонецЦикла;
				
	КонецЦикла;
	
КонецПроцедуры

// ПередСохранением()
//
&НаСервере
Функция ПередСохранением(КодИФНС = "не применимо", ПодобныйОтчетСуществует, Вариант,
							ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, Автосохранение, ПоказателиОтчета)
	
	Если УПЖКХ_ТиповыеМетодыСервер.БылиИзмененыКлючевыеРеквизитыОтчета(ЭтаФорма, КодИФНС)
	   И УПЖКХ_ТиповыеМетодыСервер.СуществуетДокументСАналогичнымиРеквизитами(ЭтаФорма, КодИФНС) Тогда
		
		ПодобныйОтчетСуществует = Истина;
		
	КонецЕсли;
	
	СтруктураРеквизитовФормы.мЗаписываетсяНовыйДокумент = 
		(СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено
		 ИЛИ СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено);
	
	Если Вариант <> Неопределено
	   И ((СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено)
	   	  ИЛИ (СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено)
		  ИЛИ (Вариант <> СтруктураРеквизитовФормы.мВариант)) Тогда
		
		Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено
		  ИЛИ СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено Тогда
						
		ИначеЕсли Вариант <> СтруктураРеквизитовФормы.мВариант Тогда
			
			ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки = Истина;
								
		КонецЕсли;

	КонецЕсли;
	
	Если ПодобныйОтчетСуществует
	 ИЛИ ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки Тогда
	 
	 	Возврат Ложь;
		
 	КонецЕсли;
		
	Возврат Сохранить(Автосохранение, КодИФНС, Вариант, , ПоказателиОтчета);
		
КонецФункции

&НаКлиенте
// Собрирает данные текущего ТаблПоля НаКлиенте
Функция СобратьДанныеТекущегоТаблПоляНаКлиенте(ИмяТабличногоПоля)
	
	Возврат СобратьДанныеТекущегоТаблПоля(ЭтаФорма, ИмяТабличногоПоля);
	
КонецФункции

&НаСервере
// Собрирает данные текущего ТаблПоля НаСервере
Функция СобратьДанныеТекущегоТаблПоляНаСервере(ИмяТабличногоПоля)
	
	Возврат СобратьДанныеТекущегоТаблПоля(ЭтаФорма, ИмяТабличногоПоля);

КонецФункции

&НаСервере
// Сохраняет отчет на сервере.
Функция Сохранить(Автосохранение = Ложь, КодИФНС = "не применимо", Вариант,
					ВидДокументаНомерКорректировкиИзменен = Неопределено, ПоказателиОтчета)
	
	Если НЕ СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
		СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.ПолучитьОбъект();
	КонецЕсли;
			
	Если НЕ УПЖКХ_ТиповыеМетодыСервер.ПриЗаписиРегламентированногоОтчетаНаСервере(ЭтаФорма, КодИФНС, Автосохранение,
																						Вариант, ВидДокументаНомерКорректировкиИзменен, СтруктураРеквизитовФормы.мСохраненныйДок) Тогда
		СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
		Возврат Ложь;
	КонецЕсли;

	// установим текущие значения реквизитов документа
	СтруктураРеквизитовФормы.мСохраненныйДок.ИсточникОтчета           = Метаданные.Отчеты[Сред(Лев(ЭтаФорма.ИмяФормы,
																									Найти(ЭтаФорма.ИмяФормы, ".Форма.") - 1), 7)].Имя;
	СтруктураРеквизитовФормы.мСохраненныйДок.НаименованиеОтчета       = Метаданные.Отчеты[Сред(Лев(ЭтаФорма.ИмяФормы,
																									Найти(ЭтаФорма.ИмяФормы, ".Форма.") - 1), 7)].ОсновнаяФорма.Синоним;
	СтруктураРеквизитовФормы.мСохраненныйДок.ДатаНачала               = СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета;
	СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания            = СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета;
	СтруктураРеквизитовФормы.мСохраненныйДок.ВыбраннаяФорма           = СтруктураРеквизитовФормы.мВыбраннаяФорма;
	СтруктураРеквизитовФормы.мСохраненныйДок.Организация              = СтруктураРеквизитовФормы.Организация;
	СтруктураРеквизитовФормы.мСохраненныйДок.ДатаПодписи              = ДатаПодписи;
	СтруктураРеквизитовФормы.мСохраненныйДок.ЕдиницаИзмерения         = Неопределено;
	СтруктураРеквизитовФормы.мСохраненныйДок.Периодичность            = СтруктураРеквизитовФормы.мПериодичность;
	СтруктураРеквизитовФормы.мСохраненныйДок.ТочностьЕдиницыИзмерения = СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения;
	СтруктураРеквизитовФормы.мСохраненныйДок.ВидОтчетности			  = Перечисления.ВидыОтчетности.РегламентированнаяОтчетность;
	СтруктураРеквизитовФормы.мСохраненныйДок.Вид                      = Вариант;
	СтруктураРеквизитовФормы.мСохраненныйДок.ПредставлениеВида        = 
																		УПЖКХ_ТиповыеМетодыСервер.ПредставлениеВидаДокумента(
																			СтруктураРеквизитовФормы.мСохраненныйДок.Вид);
	СтруктураРеквизитовФормы.мВариант = Вариант;

	СтруктураРеквизитовФормы.мСохраненныйДок.Комментарий              = Комментарий;

	// формируем список сохранения
	СписокСохранения = Новый Структура();
	
	// вставляем данные редактируемых ячеек таблицы	
	СписокСохранения.Вставить("ПоказателиОтчета", ПоказателиОтчета);

	// вставляем данные многострочных разделов
	СписокСохранения.Вставить("ДанныеМногострочныхРазделов", Неопределено);

	// вставляем данные вариантов автозаполнения ячеек
	СписокСохранения.Вставить("ДанныеВариантовАвтоЗаполнения", Неопределено);

	// вствляем версию формы
	СписокСохранения.Вставить("ВерсияФормы", СтруктураРеквизитовФормы.мВерсияФормы);

	ХранилищеДанных = Новый ХранилищеЗначения(СписокСохранения);
	СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета = ХранилищеДанных;

	// записываем документ, хранящий данные отчета
	Попытка
		СтруктураРеквизитовФормы.мСохраненныйДок.Записать();
	Исключение
		
		Если НЕ Автосохранение Тогда
			
			Сообщение = Новый СообщениеПользователю;

			Сообщение.Текст = 
				УПЖКХ_ТиповыеМетодыКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"),
																			КВП_ПрочиеПроцедурыИФункции.СформироватьТекстСообщения(ОписаниеОшибки()));

			Сообщение.Сообщить();
				
		КонецЕсли;
		
		Возврат Ложь;
		
	КонецПопытки;
		
	Модифицированность   = Ложь;
	
	СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;

	Возврат Истина;

КонецФункции

// Процедура управляет выводом отчета на печать.
//
// Параметры:
//  ВидПечати - строка, задающая способ печати:
//              "ПоказатьБланк" - непосредственный вывод на печать;
//              "ПечататьСразу" - с предварительным просмотром.
//
&НаКлиенте
Процедура Печать(ВидПечати, НеИзФормыОтчета = Ложь)
	
	Состояние(УПЖКХ_ТиповыеМетодыКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1. Формируется печатная форма...'"),
																		 ЭтаФорма.Заголовок), , , БиблиотекаКартинок.Печать);
	
	Если НЕ ПечатьНаСервере(ВидПечати) Тогда
		Возврат;
	КонецЕсли;
	
	УПЖКХ_ТиповыеМетодыКлиент.ОткрытьФормуПредварительногоПросмотра(ЭтаФорма, ВидПечати, ,
																	СтруктураРеквизитовФормы.СписокПечатаемыхЛистов);
	
КонецПроцедуры

&НаСервере
// Процедура управляет выводом отчета на печать на сервере.
Функция ПечатьНаСервере(ВидПечати)
	
	Если НЕ УПЖКХ_ТиповыеМетодыСервер.ПринтерДоступен() Тогда
		
		Сообщение = Новый СообщениеПользователю;

		Сообщение.Текст = 
			НСтр("ru='Перед формированием печатных форм необходимо определить в системе принтер
				 | и задать его в качестве используемого по умолчанию!'");

		Сообщение.Сообщить();
		
		Возврат Ложь;
		
	КонецЕсли;
	
	СтруктураРеквизитовФормы.мПечатныеФормы.Очистить();
	
	ОбластиСтроки = Новый Структура;
	
	Для Каждого Обл Из ПолеТабличногоДокументаФормаОтчета.Области Цикл
		Если Обл.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Строки Тогда
			ОбластиСтроки.Вставить(Обл.Имя, ПолеТабличногоДокументаФормаОтчета.ПолучитьОбласть(Обл.Имя));
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Обл Из ОбластиСтроки Цикл
		ПечатнаяФорма = Новый ТабличныйДокумент();
		ПечатнаяФорма.ОтображатьЗаголовки = Ложь;
		ПечатнаяФорма.ОтображатьСетку     = Ложь;
		ПечатнаяФорма.ЧерноБелыйПросмотр  = Истина;
		ПечатнаяФорма.ЧерноБелаяПечать    = Истина;
		ПечатнаяФорма.Автомасштаб         = Истина;
		ПечатнаяФорма.ОриентацияСтраницы  = ОриентацияСтраницы.Ландшафт;
		ПечатнаяФорма.Вывести(Обл.Значение);
		СтруктураРеквизитовФормы.мПечатныеФормы.Добавить(ПечатнаяФорма, "Форма 11");
	КонецЦикла;
	
	УПЖКХ_ТиповыеМетодыКлиентСервер.ПроставлениеНомеровЛистов(ЭтаФорма, ,СтруктураРеквизитовФормы.СписокПечатаемыхЛистов);
	
	Возврат Истина;
	
КонецФункции

// Процедура проверяет заполнение настройки соответствия льгот.
//
&НаСервере
Процедура ПроверитьНастройкиСоответствия(НастройкиУказаны)
	
	КоличествоСтрок = СтруктураРеквизитовФормы.мТаблицаСоответствияЛьготныхКатегорий.Количество();
	
	Если КоличествоСтрок = 0 Тогда
		
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Не указаны настройки соответствия льготных категорий!");
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке(
			"Для перехода к настройкам нажмите на кнопку ""Настройка"" командной панели.");
		
	Иначе
		
		Для Каждого СтрокаСоответствия ИЗ СтруктураРеквизитовФормы.мТаблицаСоответствияЛьготныхКатегорий Цикл
			
			Если НЕ СтрокаСоответствия.СписокЛьготныхКатегорий.Количество() = 0 Тогда
				
				НастройкиУказаны = Истина;
				Прервать;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если НЕ НастройкиУказаны Тогда
			
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке(
				"В настройках соответствия для групп льготных категорий не указан состав льготных категорий,
				| входящих в эти группы!");
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ПроверитьНастройкиСоответствия()

////////////////////////////////////////////////////////////////////////////////
// ФУНКЦИИ АВТОЗАПОЛНЕНИЯ

// Процеудура производит автозаполнение формы регламентированного отчета.
//
&НаСервере
Процедура ЗаполнитьАвто()
	
	СтруктураПараметров = 
		УПЖКХ_ТиповыеМетодыВызовСервера.ХранилищеОбщихНастроекЗагрузить("СтатистикаФорма26_НастройкиОтчета");
	
	Если ТипЗнч(СтруктураПараметров) = Тип("Структура") Тогда
		СтруктураРеквизитовФормы.мТаблицаСоответствияЛьготныхКатегорий = 
			УПЖКХ_ТиповыеМетодыСервер.ТаблицаЗначенийВМассив(СтруктураПараметров.ТаблицаСоответствияЛьготныхКатегорий);
	Иначе
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Не указаны настройки соответствия льготных категорий!");
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке(
			"Для перехода к настройкам нажмите на кнопку ""Настройка"" командной панели.");
		Возврат;
	КонецЕсли;
	
	НастройкиУказаны = Ложь;
	ПроверитьНастройкиСоответствия(НастройкиУказаны);
	
	Если НЕ НастройкиУказаны Тогда
		Возврат;
	КонецЕсли;
	
	НастройкиУчетнойПолитикиТСЖОтказ = Ложь;
	
	НастройкиУчетнойПолитикиТСЖ = 
		УПЖКХ_ОбщегоНазначенияСервер.ПолучитьПараметрыУчетнойПолитикиЖКХ(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,
																		 СтруктураРеквизитовФормы.Организация, НастройкиУчетнойПолитикиТСЖОтказ);
	
	Если НастройкиУчетнойПолитикиТСЖОтказ Тогда
		Возврат;
	КонецЕсли;
	
	// общий список всех льготных категорий, указанных в настройках соответствия
	ОбщийСписокКатегорий = Новый СписокЗначений;
	
	// текст распределения льготных категорий по группам, указанным в настройках соответствия
	ТекстГруппыКатегорий = "ВЫБОР";
	
	Запрос = Новый Запрос;
	
	Для Каждого СтрокаГруппы ИЗ СтруктураРеквизитовФормы.мТаблицаСоответствияЛьготныхКатегорий Цикл
		
		Если СтрокаГруппы.СписокЛьготныхКатегорий.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ТекстГруппыКатегорий = ТекстГруппыКатегорий + "
		|	КОГДА КоличествоПолучателейЛьготПоКатегориям.ЛьготнаяКатегория В (&" + СтрокаГруппы.ГруппаЛьготныхКатегорий + ")
		|		ТОГДА """ + СтрокаГруппы.ГруппаЛьготныхКатегорий + """";
		
		Для Каждого СтрокаЛьготнойКатегориии ИЗ  СтрокаГруппы.СписокЛьготныхКатегорий Цикл
			ОбщийСписокКатегорий.Добавить(СтрокаЛьготнойКатегориии.Значение);
		КонецЦикла;
		
		Запрос.УстановитьПараметр(СтрокаГруппы.ГруппаЛьготныхКатегорий, СтрокаГруппы.СписокЛьготныхКатегорий);
		
	КонецЦикла;
	
	ТекстГруппыКатегорий = ТекстГруппыКатегорий + "
	|	КОНЕЦ";
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_НазначенныеЛьготыСрезПоследних.Проживающий КАК Льготник,
	|	КВП_НазначенныеЛьготыСрезПоследних.Проживающий.Владелец КАК ЛицевойСчет,
	|	КВП_НазначенныеЛьготыСрезПоследних.ЛьготнаяКатегория КАК ЛьготнаяКатегория,
	|	УПЖКХ_СведенияОПроживающихСрезПоследних.Проживает
	|ПОМЕСТИТЬ ДействующиеЛьготы
	|ИЗ
	|	РегистрСведений.КВП_НазначенныеЛьготы.СрезПоследних(
	|			&Дата,
	|			ЛьготнаяКатегория В (&ОбщийСписокКатегорий)
	|				И ДатаИзменения <= &Дата) КАК КВП_НазначенныеЛьготыСрезПоследних
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.УПЖКХ_СведенияОПроживающих.СрезПоследних(, ДатаИзменения <= &Дата) КАК УПЖКХ_СведенияОПроживающихСрезПоследних
	|		ПО КВП_НазначенныеЛьготыСрезПоследних.Проживающий = УПЖКХ_СведенияОПроживающихСрезПоследних.Жилец
	|ГДЕ
	|	КВП_НазначенныеЛьготыСрезПоследних.Действие
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ТаблицаЛьготников.Льготник КАК Льготник,
	|	ТаблицаЛьготников.Льготник.Владелец КАК ЛицевойСчет,
	|	ТаблицаЛьготников.ЛьготнаяКатегория КАК ЛьготнаяКатегория,
	|	КВП_СкидкиСрезПоследних.ЛицаПользующиесяЛьготами
	|ПОМЕСТИТЬ СведенияОЛьготниках
	|ИЗ
	|	(ВЫБРАТЬ
	|		ДействующиеЛьготы.Льготник КАК Льготник,
	|		ДействующиеЛьготы.Льготник.Владелец КАК ЛицевойСчет,
	|		ДействующиеЛьготы.ЛьготнаяКатегория КАК ЛьготнаяКатегория
	|	ИЗ
	|		ДействующиеЛьготы КАК ДействующиеЛьготы
	|	ГДЕ
	|		ДействующиеЛьготы.Проживает
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ДействующиеЛьготы.Льготник,
	|		ДействующиеЛьготы.Льготник.Владелец,
	|		ДействующиеЛьготы.ЛьготнаяКатегория
	|	ИЗ
	|		ДействующиеЛьготы КАК ДействующиеЛьготы
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.УПЖКХ_СведенияОЗарегистрированных.СрезПоследних(
	|					,
	|					ЛицевойСчет В
	|							(ВЫБРАТЬ
	|								ДействующиеЛьготы.ЛицевойСчет
	|							ИЗ
	|								ДействующиеЛьготы)
	|						И ДатаИзменения <= &Дата) КАК УПЖКХ_СведенияОЗарегистрированныхСрезПоследних
	|			ПО ДействующиеЛьготы.Льготник = УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.Жилец
	|	ГДЕ
	|		&УчитыватьОтсутствующихЛьготников
	|		И НЕ ДействующиеЛьготы.Проживает
	|		И УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.Зарегистрирован) КАК ТаблицаЛьготников
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КВП_Скидки.СрезПоследних(&Дата, ) КАК КВП_СкидкиСрезПоследних
	|		ПО ТаблицаЛьготников.ЛьготнаяКатегория = КВП_СкидкиСрезПоследних.ЛьготнаяКатегория
	|ГДЕ
	|	(КВП_СкидкиСрезПоследних.ЛицаПользующиесяЛьготами = ЗНАЧЕНИЕ(Перечисление.КВП_ЛицаПользующиесяЛьготами.ОдинЧеловек)
	|			ИЛИ КВП_СкидкиСрезПоследних.ЛицаПользующиесяЛьготами = ЗНАЧЕНИЕ(Перечисление.КВП_ЛицаПользующиесяЛьготами.БлизкиеРодственники)
	|			ИЛИ КВП_СкидкиСрезПоследних.ЛицаПользующиесяЛьготами = ЗНАЧЕНИЕ(Перечисление.КВП_ЛицаПользующиесяЛьготами.Семья))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ДействующиеЛьготы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СведенияОЛьготниках.ЛицевойСчет,
	|	СведенияОЛьготниках.Льготник,
	|	СведенияОЛьготниках.ЛьготнаяКатегория
	|ПОМЕСТИТЬ ЛьготыНаБлизкихРодственников
	|ИЗ
	|	СведенияОЛьготниках КАК СведенияОЛьготниках
	|ГДЕ
	|	СведенияОЛьготниках.ЛицаПользующиесяЛьготами = ЗНАЧЕНИЕ(Перечисление.КВП_ЛицаПользующиесяЛьготами.БлизкиеРодственники)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СведенияОЛьготниках.ЛицевойСчет,
	|	СведенияОЛьготниках.Льготник,
	|	СведенияОЛьготниках.ЛьготнаяКатегория
	|ПОМЕСТИТЬ ЛьготыНаСемью
	|ИЗ
	|	СведенияОЛьготниках КАК СведенияОЛьготниках
	|ГДЕ
	|	СведенияОЛьготниках.ЛицаПользующиесяЛьготами = ЗНАЧЕНИЕ(Перечисление.КВП_ЛицаПользующиесяЛьготами.Семья)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	УПЖКХ_СведенияОПроживающихСрезПоследних.ЛицевойСчет КАК ЛицевойСчет,
	|	УПЖКХ_СведенияОПроживающихСрезПоследних.Жилец КАК Проживающий
	|ПОМЕСТИТЬ Проживающие
	|ИЗ
	|	РегистрСведений.УПЖКХ_СведенияОПроживающих.СрезПоследних(
	|			&Дата,
	|			ЛицевойСчет В
	|					(ВЫБРАТЬ
	|						СведенияОЛьготниках.ЛицевойСчет
	|					ИЗ
	|						СведенияОЛьготниках)
	|				И ДатаИзменения <= &Дата) КАК УПЖКХ_СведенияОПроживающихСрезПоследних
	|ГДЕ
	|	УПЖКХ_СведенияОПроживающихСрезПоследних.Проживает
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СведенияОЛьготниках.ЛьготнаяКатегория,
	|	СведенияОЛьготниках.Льготник,
	|	СведенияОЛьготниках.Льготник КАК ПолучательЛьготы
	|ПОМЕСТИТЬ ПолучателиЛьгот
	|ИЗ
	|	СведенияОЛьготниках КАК СведенияОЛьготниках
	|ГДЕ
	|	СведенияОЛьготниках.ЛицаПользующиесяЛьготами = ЗНАЧЕНИЕ(Перечисление.КВП_ЛицаПользующиесяЛьготами.ОдинЧеловек)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЛьготыНаБлизкихРодственников.ЛьготнаяКатегория,
	|	ЛьготыНаБлизкихРодственников.Льготник,
	|	ЛьготыНаБлизкихРодственников.Льготник
	|ИЗ
	|	ЛьготыНаБлизкихРодственников КАК ЛьготыНаБлизкихРодственников
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЛьготникиИПроживающие.ЛьготнаяКатегория,
	|	ЛьготникиИПроживающие.Льготник,
	|	ЛьготникиИПроживающие.Проживающий
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЛьготыНаБлизкихРодственников.ЛьготнаяКатегория КАК ЛьготнаяКатегория,
	|		ЛьготыНаБлизкихРодственников.Льготник КАК Льготник,
	|		ЛьготыНаБлизкихРодственников.Льготник.ФизЛицо КАК ЛьготникФизЛицо,
	|		Проживающие.Проживающий КАК Проживающий,
	|		Проживающие.Проживающий.ФизЛицо КАК ПроживающийФизЛицо
	|	ИЗ
	|		ЛьготыНаБлизкихРодственников КАК ЛьготыНаБлизкихРодственников
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Проживающие КАК Проживающие
	|			ПО ЛьготыНаБлизкихРодственников.ЛицевойСчет = Проживающие.ЛицевойСчет) КАК ЛьготникиИПроживающие
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.УПЖКХ_СтепеньРодстваФизЛиц.СрезПоследних(
	|				&Дата,
	|				СтепеньРодства.БлизкоеРодство
	|					И ФизическоеЛицоОсновное В
	|						(ВЫБРАТЬ
	|							ЛьготыНаБлизкихРодственников.Льготник.ФизЛицо
	|						ИЗ
	|							ЛьготыНаБлизкихРодственников)) КАК УПЖКХ_СтепеньРодстваФизЛицСрезПоследних
	|		ПО ЛьготникиИПроживающие.ЛьготникФизЛицо = УПЖКХ_СтепеньРодстваФизЛицСрезПоследних.ФизическоеЛицоОсновное
	|			И ЛьготникиИПроживающие.ПроживающийФизЛицо = УПЖКХ_СтепеньРодстваФизЛицСрезПоследних.ФизическоеЛицоСвязанное
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЛьготыНаСемью.ЛьготнаяКатегория,
	|	ЛьготыНаСемью.Льготник,
	|	ЛьготыНаСемью.Льготник
	|ИЗ
	|	ЛьготыНаСемью КАК ЛьготыНаСемью
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЛьготыНаСемью.ЛьготнаяКатегория,
	|	ЛьготыНаСемью.Льготник,
	|	Проживающие.Проживающий
	|ИЗ
	|	ЛьготыНаСемью КАК ЛьготыНаСемью
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Проживающие КАК Проживающие
	|		ПО ЛьготыНаСемью.ЛицевойСчет = Проживающие.ЛицевойСчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПолучателиЛьгот.ЛьготнаяКатегория КАК ЛьготнаяКатегория,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ПолучателиЛьгот.Льготник) КАК КоличествоЛьготников,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ПолучателиЛьгот.ПолучательЛьготы) КАК КоличествоПолучателейЛьгот
	|ПОМЕСТИТЬ КоличествоПолучателейЛьготПоКатегориям
	|ИЗ
	|	ПолучателиЛьгот КАК ПолучателиЛьгот
	|
	|СГРУППИРОВАТЬ ПО
	|	ПолучателиЛьгот.ЛьготнаяКатегория
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КоличествоПолучателейЛьготПоКатегориям.КоличествоЛьготников,
	|	КоличествоПолучателейЛьготПоКатегориям.КоличествоПолучателейЛьгот,
	|	&ТекстГруппыКатегорий КАК ГруппаЛьготныхКатегорий
	|ПОМЕСТИТЬ КоличествоПолучателейЛьготПоГруппамКатегорий
	|ИЗ
	|	КоличествоПолучателейЛьготПоКатегориям КАК КоличествоПолучателейЛьготПоКатегориям
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(КоличествоПолучателейЛьготПоГруппамКатегорий.КоличествоЛьготников) КАК КоличествоЛьготников,
	|	СУММА(КоличествоПолучателейЛьготПоГруппамКатегорий.КоличествоПолучателейЛьгот) КАК КоличествоПолучателейЛьгот,
	|	КоличествоПолучателейЛьготПоГруппамКатегорий.ГруппаЛьготныхКатегорий
	|ИЗ
	|	КоличествоПолучателейЛьготПоГруппамКатегорий КАК КоличествоПолучателейЛьготПоГруппамКатегорий
	|
	|СГРУППИРОВАТЬ ПО
	|	КоличествоПолучателейЛьготПоГруппамКатегорий.ГруппаЛьготныхКатегорий";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТекстГруппыКатегорий", ТекстГруппыКатегорий);
	
	Запрос.УстановитьПараметр("Организация",                      СтруктураРеквизитовФормы.Организация);
	Запрос.УстановитьПараметр("Дата",                             СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	Запрос.УстановитьПараметр("УчитыватьОтсутствующихЛьготников", 
																  НастройкиУчетнойПолитикиТСЖ.РассчитыватьЛьготуПоВременноОтсутствующим);
	Запрос.УстановитьПараметр("ОбщийСписокКатегорий",             ОбщийСписокКатегорий);
	
	ТаблицаПолучателейЛьгот = Запрос.Выполнить().Выгрузить();
	
	мФормаОтчета = ЭтаФорма.ПолеТабличногоДокументаФормаОтчета;
	
	Для Каждого СтрокаПолучателейЛьгот ИЗ ТаблицаПолучателейЛьгот Цикл
		
		Если СтрокаПолучателейЛьгот.ГруппаЛьготныхКатегорий = "ОбязательстваРФ" Тогда
			
			// раздел 1, строка 2, графы 3, 4
			мФормаОтчета.Области.П01000203.Значение = СтрокаПолучателейЛьгот.КоличествоПолучателейЛьгот;
			мФормаОтчета.Области.П01000204.Значение = СтрокаПолучателейЛьгот.КоличествоЛьготников;
			
		ИначеЕсли СтрокаПолучателейЛьгот.ГруппаЛьготныхКатегорий = "ОбязательстваСубъектовРФ" Тогда
			
			// раздел 1, строка 3, графы 3, 4
			мФормаОтчета.Области.П01000303.Значение = СтрокаПолучателейЛьгот.КоличествоПолучателейЛьгот;
			мФормаОтчета.Области.П01000304.Значение = СтрокаПолучателейЛьгот.КоличествоЛьготников;
			
		ИначеЕсли СтрокаПолучателейЛьгот.ГруппаЛьготныхКатегорий = "НПАМестныхОргановСамоуправления" Тогда
			
			// раздел 1, строка 4, графы 3, 4
			мФормаОтчета.Области.П01000403.Значение = СтрокаПолучателейЛьгот.КоличествоПолучателейЛьгот;
			мФормаОтчета.Области.П01000404.Значение = СтрокаПолучателейЛьгот.КоличествоЛьготников;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Расчет(ЭтаФорма);
	
КонецПроцедуры // ЗаполнитьАвто()