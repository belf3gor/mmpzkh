////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

&НаСервере
// Процедура заполняет неизменяемые значения в табличных частях настройки соответствия льгот.
Процедура ЗаполнитьНастройкиСоответствияЛьгот()
	
	СтруктураПараметров = УПЖКХ_ТиповыеМетодыВызовСервера.ХранилищеОбщихНастроекЗагрузить("СтатистикаФорма26_НастройкиОтчета");
	
	Если ТипЗнч(СтруктураПараметров) = Тип("Структура") Тогда
		мГруппыЛьготныхКатегорий = Новый ТаблицаЗначений;
		СтруктураПараметров.Свойство("ТаблицаСоответствияЛьготныхКатегорий", мГруппыЛьготныхКатегорий);
	Иначе
		мГруппыЛьготныхКатегорий = Новый СписокЗначений;
		мГруппыЛьготныхКатегорий.Добавить("ОбязательстваРФ", "обязательствам Российской Федерации");
		мГруппыЛьготныхКатегорий.Добавить("ОбязательстваСубъектовРФ", "обязательствам субъектов Российской Федерации");
		мГруппыЛьготныхКатегорий.Добавить("НПАМестныхОргановСамоуправления",
											"нормативным правовым актам местных органов самоуправления субъекта Российской Федерации");
	КонецЕсли;
		
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("СправочникСсылка.КВП_ЛьготныеКатегории"));
	
	ТаблицаСоответствияЛьготныхКатегорий.Очистить();
	Для Каждого ГруппаЛьготныхКатегорий Из  мГруппыЛьготныхКатегорий Цикл
		НоваяСтрока = ТаблицаСоответствияЛьготныхКатегорий.Добавить();
		Попытка
			НоваяСтрока.ГруппаЛьготныхКатегорий = ГруппаЛьготныхКатегорий.Значение;
			НоваяСтрока.ГруппаЛьготныхКатегорийПредставление = ГруппаЛьготныхКатегорий.Представление;
		Исключение
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ГруппаЛьготныхКатегорий);
		КонецПопытки;
		НоваяСтрока.СписокЛьготныхКатегорий.ТипЗначения = Новый ОписаниеТипов(МассивТипов);
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьНачальныеНастройкиСоответствияЛьгот()

&НаСервере
// Процедура сохраняет настройки отчета в хранилище.
Процедура СохранитьНастройки()
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ТаблицаСоответствияЛьготныхКатегорий", ТаблицаСоответствияЛьготныхКатегорий.Выгрузить());
	
	УПЖКХ_ТиповыеМетодыВызовСервера.ХранилищеОбщихНастроекСохранить("СтатистикаФорма26_НастройкиОтчета",,
																	СтруктураПараметров);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
// Обработчик события "ПриСозданииНаСервере" формы.
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЗаполнитьНастройкиСоответствияЛьгот();
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПередЗакрытием" формы.
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Модифицированность
	   И НЕ НеВыводитьВопросПередЗакрытием Тогда
		Отказ = Истина;
		ПоказатьВопрос(	Новый ОписаниеОповещения("ОбработатьРезультатВопросаПередЗакрытием", ЭтаФорма),
						"Настройки были изменены. Сохранить изменения?",
						РежимДиалогаВопрос.ДаНетОтмена);
	ИначеЕсли НЕ Модифицированность Тогда
		
		Возврат;
		
	КонецЕсли;
	
КонецПроцедуры // ПередЗакрытием()

&НаКлиенте
// Обработчик результата вопроса, вызванного в процедуре "ПередЗакрытием()".
Процедура ОбработатьРезультатВопросаПередЗакрытием(Ответ, ДопПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		СохранитьНастройки();
		НеВыводитьВопросПередЗакрытием = Истина;
		Закрыть();
	ИначеЕсли Ответ = КодВозвратаДиалога.Нет Тогда
		НеВыводитьВопросПередЗакрытием = Истина;
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры // ОбработатьРезультатВопросаПередЗакрытием()


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
// Обработчик команды "Сохранить".
Процедура Сохранить(Команда)
	
	СохранитьНастройки();
	
	Модифицированность = Ложь;
	
КонецПроцедуры
