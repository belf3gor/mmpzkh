&НаКлиенте
Перем ПараметрыОбработчикаОжидания; // Хранит параметры обработчика ожидания.

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

#Область ПроцедурыИФункцииОбщегоНазначения

&НаСервере
// Формирует список услуг по настройкам отбора отчета.
//
Функция СформироватьСписокУслугДляЗапроса()
	
	СписокУслуг = Новый СписокЗначений;
	
	Если Отчет.ВариантОтбораУслуг = "формировать отчет по всем услугам" Тогда
		// Оставляем пустой список.
	ИначеЕсли Отчет.ВариантОтбораУслуг = "формировать отчет по указанным услугам" Тогда
		
		Для Каждого ТекСтрока Из Отчет.ВыбранныеУслуги Цикл
			Если НЕ ТекСтрока.Услуга = ПредопределенноеЗначение("Справочник.КВП_Услуги.ПустаяСсылка") Тогда
				СписокУслуг.Добавить(ТекСтрока.Услуга);
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли Отчет.ВариантОтбораУслуг = "формировать отчет по услугам, отличным от кап. ремонта"
		ИЛИ Отчет.ВариантОтбораУслуг = "формировать отчет по услугам кап. ремонта" Тогда
		
		СписокУслуг = мСтруктураНастроекКапРемонта.СписокУслуг;
		
	КонецЕсли;
	
	Возврат СписокУслуг;
	
КонецФункции

&НаСервере
// Промежуточная функция на сервере, предназначенная для обращения к функции модуля менеждера 
// справочника "Настройки учета по услугам капитального ремонта".
//
Функция ПолучитьЭлементСправочникаПоОрганизацииНаСервере(Организация)
	
	Возврат Справочники.УПЖКХ_НастройкиУчетаКапремонта.ПолучитьЭлементСправочникаПоОрганизации(Организация);
	
КонецФункции // ПолучитьЭлементСправочникаПоОрганизацииНаСервере()

&НаСервере
// Возвращает значение реквизита объекта.
//
Функция ПолучитьЗначениеРеквизитаОбъектаНаСервере(СсылкаНаЭлемент, НаименованиеРеквизита)
	
	Возврат СсылкаНаЭлемент[НаименованиеРеквизита];
	
КонецФункции // ПолучитьЗначениеРеквизитаОбъектаНаСервере()

&НаСервере
// Промежуточная функция на сервере, предназначенная для обращения к функции модуля менеждера 
// справочника "Настройки учета по услугам капитального ремонта".
Процедура РедактироватьПометкуНаУдалениеПоСсылкеНаСервере(СсылкаНаЭлемент)
	
	Справочники.УПЖКХ_НастройкиУчетаКапремонта.РедактироватьПометкуНаУдалениеПоСсылке(СсылкаНаЭлемент);
	
КонецПроцедуры // РедактироватьПометкуНаУдалениеПоСсылкеНаСервере()

&НаСервере
// Процедура получает сведения о настройках кап. ремонта по текущей организации
// и управляет текстом гиперссылки открытия настроек кап. ремонта.
Функция ОбновитьРеквизитыКапРемонта()
	
	ЗаполнитьРеквизитыОтчетаПоКапремонту();
	
	мМассивВариантовОтбораУслуг = Новый Массив;
	мМассивВариантовОтбораУслуг.Добавить("формировать отчет по всем услугам");
	мМассивВариантовОтбораУслуг.Добавить("формировать отчет по указанным услугам");
	
	Если ТипЗнч(мСтруктураНастроекКапРемонта) = Тип("Структура")
	   И мСтруктураНастроекКапРемонта.НастройкиОпределены
	   И мСтруктураНастроекКапРемонта.ВедетсяРаздельныйУчет Тогда
		
		СписокУслугКР = мСтруктураНастроекКапРемонта.СписокУслуг;
		СтрокаУслугКР = "";
		Для Каждого ТекЭлемент Из СписокУслугКР Цикл
			СтрокаУслугКР = СтрокаУслугКР + ?(Не ПустаяСтрока(СтрокаУслугКР), ",", "") + """" + ТекЭлемент.Значение + """";
		КонецЦикла;
		
		Если Не ПустаяСтрока(СтрокаУслугКР) Тогда
			СтрокаУслугКР = " (" +?(СписокУслугКР.Количество() > 1, "услуги: ", "услуга: ") + СтрокаУслугКР + ")";
		КонецЕсли;
		
		Элементы.КнопкаНастройкаВеденияКР.Заголовок = "Ведется раздельный учет по услугам капитального ремонта" + СтрокаУслугКР;
		
		мМассивВариантовОтбораУслуг.Добавить("формировать отчет по услугам, отличным от кап. ремонта");
		мМассивВариантовОтбораУслуг.Добавить("формировать отчет по услугам кап. ремонта");
		
	Иначе
		
		Элементы.КнопкаНастройкаВеденияКР.Заголовок = "Не ведется раздельный учет по услугам капитального ремонта";
		
		Если Отчет.ВариантОтбораУслуг = "формировать отчет по услугам, отличным от кап. ремонта"
			ИЛИ Отчет.ВариантОтбораУслуг = "формировать отчет по услугам кап. ремонта" Тогда
			Отчет.ВариантОтбораУслуг = "формировать отчет по всем услугам";
		КонецЕсли;
		
	КонецЕсли;
	
	Элементы.ВариантОтбораУслуг.СписокВыбора.ЗагрузитьЗначения(мМассивВариантовОтбораУслуг);
	
КонецФункции // ОбновитьРеквизитыКапРемонта()

&НаСервере
// Процедура предназначена для заполнения сведения о ведение раздельного учета по капремонту в организации.
//
Процедура ЗаполнитьРеквизитыОтчетаПоКапремонту()
	
	Попытка
		
		мСтруктураНастроекКапРемонта = УПЖКХ_ПараметрыУчетаСервер.ПолучитьНастройкиУчетаУслугКапремонта(Отчет.Организация, Истина);
		
	Исключение
		ВызватьИсключение УПЖКХ_ОбщегоНазначенияКлиентСервер.ПолучитьОписаниеОшибки(УПЖКХ_ОбщегоНазначенияКлиентСервер.ПодготовитьТекстОбОшибкеДляПользователя("<error>Не удалось получить настройки учета капитального ремонта. Пожалуйста, проверьте, корректно ли заданы настройки учета капитального ремонта.", ОписаниеОшибки()));
		Возврат;
	КонецПопытки;
	
КонецПроцедуры // ЗаполнитьРеквизитыОтчетаПоКапремонту()

&НаСервере
// Процедура подготовки параметров учета.
Функция ПодготовитьПараметрыОтчета()
	
	ПараметрыОтчета = Новый Структура;
	ПараметрыОтчета.Вставить("ДатаНач",            НачалоДня(Отчет.ДатаНач));
	ПараметрыОтчета.Вставить("ДатаКон",            КонецДня(Отчет.ДатаКон));
	ПараметрыОтчета.Вставить("Организация",        Отчет.Организация);
	ПараметрыОтчета.Вставить("Должник",            Отчет.Должник);
	ПараметрыОтчета.Вставить("ВариантОтбораУслуг", Отчет.ВариантОтбораУслуг);
	ПараметрыОтчета.Вставить("СписокУслуг"       , СформироватьСписокУслугДляЗапроса());
	
	Возврат ПараметрыОтчета;
	
КонецФункции

&НаСервере
// Процедура формирует отчет на сервере.
Функция СформироватьОтчетНаСервере() Экспорт
	
	Если Не ПроверитьЗаполнение() Тогда 
		Возврат Новый Структура("ЗаданиеВыполнено", Истина);
	КонецЕсли;
	
	ИБФайловая = УПЖКХ_ТиповыеМетодыСервер.ИнформационнаяБазаФайловая();
	
	УПЖКХ_ТиповыеМетодыСервер.ОтменитьВыполнениеЗадания(ИдентификаторЗадания);
	
	ИдентификаторЗадания = Неопределено;
	
	УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеИспользовать");
	
	ПараметрыОтчета = ПодготовитьПараметрыОтчета();
	
	Если ИБФайловая Тогда
		АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
		Отчеты.УПЖКХ_КарточкаДолжника.СформироватьОтчет(ПараметрыОтчета, АдресХранилища);
		РезультатВыполнения = Новый Структура("ЗаданиеВыполнено", Истина);
	Иначе
		РезультатВыполнения = УПЖКХ_ТиповыеМетодыСервер.ЗапуститьВыполнениеВФоне(
			УникальныйИдентификатор, 
			"Отчеты.УПЖКХ_КарточкаДолжника.СформироватьОтчет", 
			ПараметрыОтчета, 
			УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьНаименованиеЗаданияВыполненияОтчета(ЭтаФорма));
		
		ИдентификаторЗадания = РезультатВыполнения.ИдентификаторЗадания;
		АдресХранилища       = РезультатВыполнения.АдресХранилища;
	КонецЕсли;
	
	Если РезультатВыполнения.ЗаданиеВыполнено Тогда
		ЗагрузитьПодготовленныеДанные();
	КонецЕсли;
	
	Возврат РезультатВыполнения;
	
КонецФункции

&НаСервере
// Процедура загрузки подготовленных данных.
Процедура ЗагрузитьПодготовленныеДанные()
	
	Результат = ПолучитьИзВременногоХранилища(АдресХранилища);
	
	УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеИспользовать");
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
// Процедуры проверяет выполнение задания.
Процедура Подключаемый_ПроверитьВыполнениеЗадания()
	
	Попытка
		Если ЗаданиеВыполнено(ИдентификаторЗадания) Тогда 
			ЗагрузитьПодготовленныеДанные();
			УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеИспользовать");
		Иначе
			УПЖКХ_ТиповыеМетодыКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
			ПодключитьОбработчикОжидания(
				"Подключаемый_ПроверитьВыполнениеЗадания", 
				ПараметрыОбработчикаОжидания.ТекущийИнтервал, 
				Истина);
		КонецЕсли;
	Исключение
		УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеИспользовать");
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

&НаСервереБезКонтекста
// Процедура проверяет, выполнено ли задание.
Функция ЗаданиеВыполнено(ИдентификаторЗадания)
	
	Возврат УПЖКХ_ТиповыеМетодыСервер.ЗаданиеВыполнено(ИдентификаторЗадания);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
// Управляет видимостью элементов формы.
Процедура УправлениеФормой(Форма)
	
	Отчет    = Форма.Отчет;
	Элементы = Форма.Элементы;
	
	// Если вариант отбора услуг не заполнен, то по умолчанию устанавливаем "формировать отчет по всем услугам".
	Если ПустаяСтрока(Отчет.ВариантОтбораУслуг) Тогда
		Отчет.ВариантОтбораУслуг = "формировать отчет по всем услугам";
	КонецЕсли;
	
	Элементы.ГруппаПанельНастроек.Видимость = Отчет.ВариантОтбораУслуг = "формировать отчет по указанным услугам";
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
// Процедура обновляет текст заголовка.
Процедура ОбновитьТекстЗаголовка(Форма)
	
	Отчет = Форма.Отчет;
	ЗаголовокОтчета = "КАРТОЧКА ДОЛЖНИКА " + "за период с " + Формат(Отчет.ДатаНач, "ДФ='dd.MM.yyyy'")
	      + " по " + Формат(Отчет.ДатаКон, "ДФ='dd.MM.yyyy'")
	      + ?(Отчет.Организация.Пустая(), "", Символы.ПС + " по организации: " + Строка(Отчет.Организация));
	
	Форма.Заголовок = ЗаголовокОтчета;
	
КонецПроцедуры

&НаСервере
// Устанавливает начальные настройки.
Процедура УстановитьНачальныеНастройки()
	
	Отчет.ДатаНач     = НачалоМесяца(ТекущаяДатаСеанса());
	Отчет.ДатаКон     = ТекущаяДатаСеанса();
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеИспользовать");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

#Область ОбработчикиСобытийФормы

&НаСервере
// Обработчик события "ПриСозданииНаСервере" формы.
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Прочитаем переданные параметры.
	Если Параметры.Свойство("ДатаНач") Тогда
		Параметры.Свойство("ДатаНач", Отчет.ДатаНач);
		ИспользоватьРучныеНастройки = Истина;
	КонецЕсли;
	
	Если Параметры.Свойство("ДатаКон") Тогда
		Параметры.Свойство("ДатаКон", Отчет.ДатаКон);
		ИспользоватьРучныеНастройки = Истина;
	КонецЕсли;
	
	Если Параметры.Свойство("Организация") Тогда
		Параметры.Свойство("Организация", Отчет.Организация);
		ИспользоватьРучныеНастройки = Истина;
	КонецЕсли;
	
	Если Параметры.Свойство("Должник") Тогда
		Параметры.Свойство("Должник", Отчет.Должник);
		ИспользоватьРучныеНастройки = Истина;
	КонецЕсли;
	
	// Установка настроек печати по умолчанию. Если настройки были изменены, они будут загружены при формировании отчета.
	Результат.АвтоМасштаб = Истина;
	
	УстановитьНачальныеНастройки();
	
	// Реклама
	ОТР_РекламаКлиентСервер.ПриСозданииНаСервере(ЭтаФорма);
	// Конец Реклама
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ОбновитьТекстЗаголовка(ЭтаФорма);
	
	ОбновитьРеквизитыКапРемонта();
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриЗакрытии" формы.
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	УПЖКХ_ТиповыеМетодыКлиент.ПриЗакрытии(ЭтаФорма, ЗавершениеРаботы);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ОбработкаОповещения" формы.
//
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ЗаписаныНастройкиУчетаКапремонта"
		И Параметр = Отчет.Организация Тогда
		ОбновитьРеквизитыКапРемонта();
		УправлениеФормой(ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
// Процедура возникает при сохранении настроек на сервере.
Процедура ПриСохраненииПользовательскихНастроекНаСервере(Настройки)
	
	УПЖКХ_ТиповыеМетодыВызовСервера.ПриСохраненииПользовательскихНастроекНаСервере(ЭтаФорма, Настройки, Истина);
	
КонецПроцедуры

&НаСервере
// Процедура возникает при загрузке настроек на сервере.
Процедура ПриЗагрузкеПользовательскихНастроекНаСервере(Настройки)
	
	Если Не ИспользоватьРучныеНастройки Тогда
		
		УПЖКХ_ТиповыеМетодыВызовСервера.ПриЗагрузкеПользовательскихНастроекНаСервере(ЭтаФорма, Настройки, Истина);
		
		ОбновитьТекстЗаголовка(ЭтаФорма);
		
		ОбновитьРеквизитыКапРемонта();
		
		УправлениеФормой(ЭтаФорма);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
// Обработчик события "ПриИзменении" поля "ДатаНач";
Процедура ДатаНачПриИзменении(Элемент)
	
	ОбновитьТекстЗаголовка(ЭтаФорма);
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля "ДатаКон";
Процедура ДатаКонПриИзменении(Элемент)
	
	ОбновитьТекстЗаголовка(ЭтаФорма);
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля "Организация";
Процедура ОрганизацияПриИзменении(Элемент)
	
	ОбновитьРеквизитыКапРемонта();
	
	УправлениеФормой(ЭтаФорма);
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля "Должник";
Процедура ДолжникПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля "Вариант отбора услуг".
Процедура ВариантОтбораУслугПриИзменении(Элемент)
	
	УправлениеФормой(ЭтаФорма);
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
КонецПроцедуры // ВариантОтбораУслугПриИзменении()

&НаКлиенте
// Обработчик события команды "Команда показать настройки ведения КР".
Процедура КомандаПоказатьНастройкиВеденияКР(Команда)
	
	СсылкаНаЭлемент = ПолучитьЭлементСправочникаПоОрганизацииНаСервере(Отчет.Организация);
	Если Не мСтруктураНастроекКапРемонта.НастройкиОпределены
		И СсылкаНаЭлемент = Неопределено Тогда
		ОткрытьФорму("Справочник.УПЖКХ_НастройкиУчетаКапремонта.ФормаОбъекта", Новый Структура("Владелец", Отчет.Организация), ЭтаФорма);
	Иначе
		Если ПолучитьЗначениеРеквизитаОбъектаНаСервере(СсылкаНаЭлемент, "ПометкаУдаления") Тогда
			Оповещение = Новый ОписаниеОповещения("КнопкаНастройкаВеденияКРНажатиеЗавершение", ЭтотОбъект, СсылкаНаЭлемент);
			
			ТекстВопроса = "Для текущей организации действие настройки учета по капитальному ремонту отменено."
						 + Символы.ПС + "Перед открытием формы элемента настройки необходимо включить. Продолжить?";
			
			ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
		Иначе
			ОткрытьФорму("Справочник.УПЖКХ_НастройкиУчетаКапремонта.Форма.ФормаЭлемента", Новый Структура("Ключ", СсылкаНаЭлемент), ЭтаФорма);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // КомандаПоказатьНастройкиВеденияКР()

&НаКлиенте
// Процедура - обработчик результата опроса команды "Команда показать настройки ведения КР".
//
Процедура КнопкаНастройкаВеденияКРНажатиеЗавершение(Ответ, ДополнительныйПараметр) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		РедактироватьПометкуНаУдалениеПоСсылкеНаСервере(ДополнительныйПараметр);
		ОткрытьФорму("Справочник.УПЖКХ_НастройкиУчетаКапремонта.Форма.ФормаЭлемента", Новый Структура("Ключ", ДополнительныйПараметр), ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры // КнопкаНастройкаВеденияКРНажатиеЗавершение()

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

#Область ДействияКомендныхПанелейФормы

&НаКлиенте
// Обработчик команды "СформироватьОтчет".
Процедура СформироватьОтчет(Команда)
	
	ОчиститьСообщения();
	
	ОтключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания");
	
	РезультатВыполнения = СформироватьОтчетНаСервере();
	Если Не РезультатВыполнения.ЗаданиеВыполнено Тогда
		УПЖКХ_ТиповыеМетодыКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
		УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "ФормированиеОтчета");
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область Реклама

&НаКлиенте
// Процедура - обработчик нажатия на картинку баннера.
Процедура Подключаемый_РекламаОткрытьСтраницуСайта(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОТР_РекламаКлиент.Подключаемый_РекламаОткрытьСтраницуСайта(ЭтаФорма);
	
КонецПроцедуры // Подключаемый_РекламаОткрытьСтраницуСайта()

&НаКлиенте
// Процедура - обработчик нажатия на картинку закрытия баннера.
Процедура Подключаемый_РекламаКартникаЗакрытияБаннераНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;

	ОТР_РекламаКлиент.Подключаемый_РекламаКартникаЗакрытияБаннераНажатие(ЭтаФорма);
	
КонецПроцедуры // Подключаемый_РекламаОткрытьСтраницуСайта()

#КонецОбласти // Реклама