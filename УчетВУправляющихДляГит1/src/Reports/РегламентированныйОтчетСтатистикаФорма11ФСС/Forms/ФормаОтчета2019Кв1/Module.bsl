&НаСервере
Перем мОбъектОтчета;

&НаКлиенте
Перем ОбработкаКС Экспорт;

&НаКлиенте
Перем ПараметрыОбработчикаОжидания;

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;

	// Обход ошибки платформы Параметр сеанса отсутствует или удален
	ПолеТабличногоДокументаФормаОтчета.Очистить();
	
	СформироватьСтруктуруРеквизитовФормы();
	
	Если Параметры.Свойство("СформироватьФормуОтчетаАвтоматически") Тогда 
		СтруктураРеквизитовФормы.СформироватьФормуОтчетаАвтоматически = Параметры.СформироватьФормуОтчетаАвтоматически;
	Иначе
		СтруктураРеквизитовФормы.СформироватьФормуОтчетаАвтоматически = Ложь;
	КонецЕсли;
	
	СтруктураРеквизитовФормы.СписокПечатаемыхЛистов = Новый СписокЗначений;
	
	// ОПИСАНИЕ ПАРМЕТРОВ ФОРМЫ
	//
	// Версия формы.
	СтруктураРеквизитовФормы.мВерсияФормы = "28/05/2019";
	СтруктураРеквизитовФормы.мКодОтчета   = "0602010";
	
	СтруктураРеквизитовФормы.мПечатныеФормы = Новый СписокЗначений;
	
	ПолеТабличногоДокументаФормаОтчета.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет("ФормаОтчета2019Кв1_ФормаОтчета"));
	
	СтруктураРеквизитовФормы.мВыбраннаяФорма          = Параметры.мВыбраннаяФорма;
	СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета  = Параметры.мДатаКонцаПериодаОтчета;
	СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета = Параметры.мДатаНачалаПериодаОтчета;
	СтруктураРеквизитовФормы.мПериодичность           = Параметры.мПериодичность;
	СтруктураРеквизитовФормы.мСкопированаФорма        = Параметры.мСкопированаФорма;
	СтруктураРеквизитовФормы.мСохраненныйДок          = Параметры.мСохраненныйДок;
	СтруктураРеквизитовФормы.Организация              = Параметры.Организация;
	
	РегламентированнаяОтчетность.СформироватьСтруктуруЦветовРаскраски(ЭтаФорма);
	
	мСтруктураВариантыЗаполнения = Новый Структура;
	
	СоответствиеЕдиницыИзмеренияДелителю = Новый Структура;
	СоответствиеЕдиницыИзмеренияДелителю.Вставить("Окр1", 1);
	СоответствиеЕдиницыИзмеренияДелителю.Вставить("Окр1000", 1000);
	СоответствиеЕдиницыИзмеренияДелителю.Вставить("Окр1000000", 1000000);
	
	ПорядкиОкругленияОтчетности = Новый Структура;
	ПорядкиОкругленияОтчетности.Вставить("ПеречислениеПорядкиОкругленияОтчетностиОкр1",       Перечисления.ПорядкиОкругленияОтчетности.Окр1);
	ПорядкиОкругленияОтчетности.Вставить("ПеречислениеПорядкиОкругленияОтчетностиОкр1000",    Перечисления.ПорядкиОкругленияОтчетности.Окр1000);
	ПорядкиОкругленияОтчетности.Вставить("ПеречислениеПорядкиОкругленияОтчетностиОкр1000000", Перечисления.ПорядкиОкругленияОтчетности.Окр1000000);
	
	ДатаПодписи = ТекущаяДатаСеанса();
	
	СтруктураРеквизитовФормы.СправочникиВидыКонтактнойИнформацииПочтовыйАдресОрганизации = Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресОрганизации;
	
	Инициализация(Параметры.БезОткрытияФормы);
	
КонецПроцедуры

&НаСервере
Процедура СформироватьСтруктуруРеквизитовФормы()
	СтруктураРеквизитовФормы = РегламентированнаяОтчетность.СформироватьСтруктуруОбязательныхРеквизитовСтатистическогоОтчета();
	ДополнитьРеквизитыФормы();
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьМассивКатегорий()
	Возврат СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок("210;100;220;320;330;310;710;720;731;732", ";", Истина);
КонецФункции

&НаСервере
Процедура ДополнитьРеквизитыФормы()
	КатегорииКлассификатора = ПолучитьМассивКатегорий();
	
	мСтруктураМногострочныхРазделов = Новый Структура;
	мСтруктураМногостраничныхРазделов = Новый Структура;
	мСтруктураИсхКолвоСтрокРазделов = Новый Структура;
	мСтруктураКолвоКолонокРазделов = Новый Структура;
	СтруктураРеквизитовФормы.мСоответствияМнгЧ = Новый Соответствие;
	
	ДобавляемыеРеквизиты = Новый Массив;
	Для Каждого Стр Из КатегорииКлассификатора Цикл
		ДобавляемыеРеквизиты.Очистить();
		ИмяДобавляемогоРеквизита = "П0" + Стр + "000000";
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы(ИмяДобавляемогоРеквизита, Новый ОписаниеТипов("ТаблицаЗначений"))); 
		ИзменитьРеквизиты(ДобавляемыеРеквизиты);
		ДобавляемыеРеквизиты.Очистить();
		
		Для Инд = 1 По 12 Цикл 
			Если Инд <= 2 Тогда
				ТипКолонки = Новый ОписаниеТипов("Строка");
			Иначе
				ТипКолонки = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 0));
			КонецЕсли;
			ДобавляемыйРеквизит = Новый РеквизитФормы(ИмяДобавляемогоРеквизита + Формат(Инд, "ЧЦ=2; ЧВН="), ТипКолонки, ИмяДобавляемогоРеквизита);
			ДобавляемыеРеквизиты.Добавить(ДобавляемыйРеквизит); 
		КонецЦикла;
		
		ИзменитьРеквизиты(ДобавляемыеРеквизиты);
		СтруктураРеквизитовФормы.Вставить("мИдГруппы" + Стр, ИмяДобавляемогоРеквизита);
		мСтруктураМногострочныхРазделов.Вставить(ИмяДобавляемогоРеквизита, ИмяДобавляемогоРеквизита);
		мСтруктураИсхКолвоСтрокРазделов.Вставить(ИмяДобавляемогоРеквизита, 5);
		мСтруктураКолвоКолонокРазделов.Вставить(ИмяДобавляемогоРеквизита, 11);
		СтруктураРеквизитовФормы.мСоответствияМнгЧ.Вставить(ИмяДобавляемогоРеквизита, "МногострочнаяЧасть" + Стр);
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура Инициализация(БезОткрытияФормы = Ложь) Экспорт
	
	СформироватьСпискиВыбора();
	РегламентированнаяОтчетность.ЗаполнитьНачальныеНастройки(ЭтаФорма);
	СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация = Ложь;
	СтруктураРеквизитовФормы.мСоставПоказателей = "СоставПоказателей2019Кв1";
	СтруктураРеквизитовФормы.мБезОткрытияФормы = БезОткрытияФормы;
	СтруктураРеквизитовФормы.мРежимПечати = Ложь;
	СтруктураРеквизитовФормы.мАвтоВыборКодов = Ложь;
	РегламентированнаяОтчетность.ЗапомнитьИменаСправочниковОбособленныхПодразделений(ЭтаФорма);
	
	ТекТабличноеПоле = ПолеТабличногоДокументаФормаОтчета;
	
	СтруктураРеквизитовФормы.ВидДокумента = 0;
	НомерКорректировки = 1;
	СтруктураРеквизитовФормы.мАдресвФорматеДляВыгрузки = "";
	
	РегламентированнаяОтчетность.НачальныеОперацииСМногострочнымиБлоками(ЭтаФорма);
	
	Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
		
		Если СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено Тогда
			ВосстановитьСохраненныеДанные();
		КонецЕсли;
		
		Модифицированность = Истина;
		
	Иначе
		
		// При открытии или при копировании сохраненного
		// отчета восстанавливаем сохраненные данные.
		ВосстановитьСохраненныеДанные();
		
		Если ЗначениеЗаполнено(СтруктураРеквизитовФормы.мСкопированаФорма) Тогда
			СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено;
		КонецЕсли;
		
		Если НЕ БезОткрытияФормы
           И НЕ СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
				   
        	ЗаблокироватьДанныеДляРедактирования(СтруктураРеквизитовФормы.мСохраненныйДок, , ЭтаФорма.УникальныйИдентификатор);

        КонецЕсли;
		
	КонецЕсли;
	
	Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
		НомерКорректировки = 0;
	Иначе
		НомерКорректировки = СтруктураРеквизитовФормы.мСохраненныйДок.Вид;
	КонецЕсли;
	
	ТекТабличноеПоле.Области.НомерКорректировки.Значение = НомерКорректировки;
	ПолеТабличногоДокументаФормаОтчета.Области.ДатаСоставленияОтчета.Значение = ДатаПодписи;
	
	ПоказатьПериод();
	
	Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Или СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация Тогда
		ЗаполнитьСведенияОбОрганизацииНаСервере();
	КонецЕсли;
	
	СтруктураРеквизитовФормы.НаимОрганизации = СтруктураРеквизитовФормы.Организация.Наименование;
	
	РегламентированнаяОтчетность.ДобавитьКнопкуПрисоединенныеФайлы(ЭтаФорма);
	
	РегламентированнаяОтчетностьКлиентСервер.ПриИнициализацииФормыРегламентированногоОтчета(ЭтаФорма, "ФСГС");
	РегламентированнаяОтчетность.ПолучитьСведенияОПоказателяхОтчета(ЭтаФорма, Новый Структура("Период", СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета));
	
	Если СтруктураРеквизитовФормы.ОтображатьКнопкуЗаполнить Тогда
		
		ЭтаФормаИмя = ЭтаФорма.ИмяФормы;
		Если СтрЧислоВхождений(ЭтаФормаИмя, "ВнешнийОтчет.") > 0 Тогда
			ЭтаФормаИмя = СтрЗаменить(ЭтаФормаИмя, "ВнешнийОтчет.", "");
		ИначеЕсли СтрЧислоВхождений(ЭтаФормаИмя, "Отчет.") > 0 Тогда
			ЭтаФормаИмя = СтрЗаменить(ЭтаФормаИмя, "Отчет.", "");
		КонецЕсли;
		ИДОтчета = Лев(ЭтаФормаИмя, СтрНайти(ЭтаФормаИмя, ".Форма.") - 1);
		ИДРедакцииОтчета = Сред(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, ".Форма.") + 7);
		
		Если НЕ РегламентированнаяОтчетностьПереопределяемый.РеализованаНастройкаАвтозаполняемыхПоказателейРеглОтчета(ИДОтчета, ИДРедакцииОтчета) Тогда
			
			Элементы.Заполнить.Видимость = Ложь;
			Элементы.Настроить.Видимость = Ложь;
			Элементы.НастроитьЗаполнение.Видимость = Ложь;
			
			КнопкаФормыЗаполнить = Элементы.Вставить("КнопкаЗаполнить", Тип("КнопкаФормы"), ЭтаФорма.КоманднаяПанель.ПодчиненныеЭлементы.ГруппаКнопок3, Элементы.Расшифровать);
			
			КнопкаФормыЗаполнить.Заголовок   = "Заполнить";
			КнопкаФормыЗаполнить.ИмяКоманды  = "Заполнить"; 
			
		КонецЕсли;
		
	Иначе
		
		Элементы.Заполнить.Видимость = Ложь;
		Элементы.Настроить.Видимость = Ложь;
		Элементы.НастроитьЗаполнение.Видимость = Ложь;
		
		СтруктураРеквизитовФормы.мСохранятьРасшифровку = Ложь;
		
	КонецЕсли;
	
	Если НЕ (СтруктураРеквизитовФормы.ОтображатьКнопкуЗаполнить ИЛИ СтруктураРеквизитовФормы.ОтображатьКнопкуРасшифровать) Тогда
		Элементы.Расшифровать.Видимость = Ложь;
	КонецЕсли;
	
	РегламентированнаяОтчетность.УстановитьЦветФорматДоступностьЯчеек(ЭтаФорма);
	ТекущийЭлемент = Элементы["ПолеТабличногоДокументаФормаОтчета"];
	
	Если СтруктураРеквизитовФормы.СформироватьФормуОтчетаАвтоматически Тогда
		ЗаполнитьАвтоНаСервере();
		Если Элементы.Расшифровать.Видимость Тогда
			Элементы.Расшифровать.Доступность = Истина;
		КонецЕсли;
	КонецЕсли;
	
	РегламентированнаяОтчетность.ОбновитьШаблоныЧерезВебСервисНаСервере(ЭтотОбъект, "АтрибВыгрузкиXML2019Кв1");
КонецПроцедуры

// Процедура управляет показом в форме периода построения отчета.
//
&НаСервере
Процедура ПоказатьПериод()
	
	// Период в шапке и заголовке отчета.
	ПолеТабличногоДокументаФормаОтчета.Области.ПериодОтчета.Значение = "за " + НРег(Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ = 'гггг'")) + " г.";
	СтруктураРеквизитовФормы.СтрПериодОтчета = НРег(Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ = 'гггг'")) + " г.";
	
КонецПроцедуры

// Восстанавливает сохраненные данные отчета.
//
&НаСервере
Процедура ВосстановитьСохраненныеДанные()
	Перем ДанныеМногострочныхРазделов;
	Перем ДанныеВариановАвтоЗаполнения;
	Перем ПоказателиОтчета;
	Перем ВерсияФормы;
	Перем ОбособПодразделение;
	
	// В случае, если формы была скопирована по F9, то проверим, не изменилась ли организация.
	Если СтруктураРеквизитовФормы.Организация <> СтруктураРеквизитовФормы.мСохраненныйДок.Организация
		И СтруктураРеквизитовФормы.Организация <> РегламентированнаяОтчетностьКлиентСервер.ПустоеЗначениеТипа("СправочникСсылка.Организации")
		И СтруктураРеквизитовФормы.Организация <> Неопределено Тогда
		// Меняем переменную, для того, чтобы запустилась процедура ЗаполнитьСведенияОбОрганизации.
		СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация = Истина;
	Иначе
		// Восстанавливаем реквизиты отчета.
		СтруктураРеквизитовФормы.Организация = СтруктураРеквизитовФормы.мСохраненныйДок.Организация;
	КонецЕсли;
	
	ДатаПодписи = СтруктураРеквизитовФормы.мСохраненныйДок.ДатаПодписи;
	СтруктураРеквизитовФормы.ЕдиницаИзмерения = СтруктураРеквизитовФормы.мСохраненныйДок.ЕдиницаИзмерения;
	СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = СтруктураРеквизитовФормы.мСохраненныйДок.ТочностьЕдиницыИзмерения;
	Комментарий = СтруктураРеквизитовФормы.мСохраненныйДок.Комментарий;
	
	// Восстанавливаем сохраненные данные отчета.
	СписокСохранения = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить();
	
	// Восстанавливаем сохраненные данные вариантов автозаполнения ячеек.
	Если СписокСохранения.Свойство("ДанныеВариантовАвтоЗаполнения", ДанныеВариановАвтоЗаполнения) Тогда
		
		Если НЕ ДанныеВариановАвтоЗаполнения = Неопределено Тогда
			
			мСтруктураВариантыЗаполнения.Очистить();
			
			Для Каждого ЭлементСтруктуры Из ДанныеВариановАвтоЗаполнения Цикл
				
				мСтруктураВариантыЗаполнения.Вставить(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Ключ);
				
				ЭтаФорма["ТаблицаВариантыЗаполнения" + ЭлементСтруктуры.Ключ].Очистить();
				
				Для Каждого ЭлементМассива Из ЭлементСтруктуры.Значение Цикл
					
					ТаблВарЗаполнения = ЭтаФорма["ТаблицаВариантыЗаполнения" + ЭлементСтруктуры.Ключ].Добавить().ТаблицаВариантовЗаполнения;
					
					ЗначениеВДанныеФормы(ЭлементМассива, ТаблВарЗаполнения);
					
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Восстанавливаем версию формы.
	СписокСохранения.Свойство("ВерсияФормы", ВерсияФормы);
	
	// восстанавливаем флаг исключения данных обособленных подразделений
	СписокСохранения.Свойство("ИсключитьДанныеОбособленныхПодразделений", ИсключитьДанныеОбособленныхПодразделений);
	
	СписокСохранения.Свойство("ФлОтклВыборЗначений", СтруктураРеквизитовФормы.мАвтоВыборКодов);
	СтруктураРеквизитовФормы.мАвтоВыборКодов = ?(СтруктураРеквизитовФормы.мАвтоВыборКодов = Неопределено, Ложь, СтруктураРеквизитовФормы.мАвтоВыборКодов);
	
	// восстанавливаем выбранное значение обособленного подразделения
	Если Не СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация Тогда
		Если СписокСохранения.Свойство("ОбособленноеПодразделение", ОбособПодразделение) Тогда
			ОбособленноеПодразделение = ОбособПодразделение;
		КонецЕсли;
	КонецЕсли;
	
	// Восстанавливаем сохраненные данные многострочных разделов.
	Если СписокСохранения.Свойство("ДанныеМногострочныхРазделов", ДанныеМногострочныхРазделов) И ДанныеМногострочныхРазделов <> Неопределено Тогда
		
		Для Каждого ЭлементСтруктуры Из ДанныеМногострочныхРазделов Цикл
			
			НайденноеЗначение = Неопределено;
			
			мСтруктураМногострочныхРазделов.Свойство(ЭлементСтруктуры.Ключ, НайденноеЗначение);
			
			Если НЕ НайденноеЗначение = Неопределено Тогда
				
				ЗначениеВДанныеФормы(ЭлементСтруктуры.Значение, ЭтаФорма[НайденноеЗначение]);
				
				ВывестиРазделВТабличныйДокументНаСервере(НайденноеЗначение, ЭтаФорма[НайденноеЗначение]);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	// Восстановим сохраненные данные редактируемых ячеек.
	СписокСохранения.Свойство( "ПоказателиОтчета", ПоказателиОтчета );
	РегламентированнаяОтчетность.ВосстановитьДанныеРасшифровкиСтатистическогоОтчета(ЭтаФорма, СписокСохранения);
	
	ВосстановитьДанныеОтчетаСтарогоОбразца(ПоказателиОтчета);
	
	Для Каждого ПоказателиСтраницы Из ПоказателиОтчета Цикл
		ИмяТекТабличноеПоле = ПоказателиСтраницы.Ключ;
		ТекТабличноеПоле    = ЭтаФорма[ИмяТекТабличноеПоле];
		ПоказателиТаблПоле  = ПоказателиСтраницы.Значение;
		
		Для Каждого Показатель Из ПоказателиТаблПоле Цикл
			ИмяПоказателя       = Показатель.Ключ;
			ЗначениеПоказателя  = Показатель.Значение;
			РегламентированнаяОтчетность.УстановитьЗначениеИФорматВПоле(ТекТабличноеПоле, ИмяПоказателя, ЗначениеПоказателя);
		КонецЦикла;
	КонецЦикла;
	
	СтруктураРеквизитовФормы.мАдресвФорматеДляВыгрузки = ПолеТабличногоДокументаФормаОтчета.Области.ОргАдрес.Значение;
	ПолеТабличногоДокументаФормаОтчета.Области.ОргАдрес.Значение = РегламентированнаяОтчетностьКлиентСервер.ПредставлениеАдресаВФормате9Запятых(СтруктураРеквизитовФормы.мАдресвФорматеДляВыгрузки);
	
	РегламентированнаяОтчетность.ОперацииПриВосстановленииРегламентированногоОтчета(ЭтаФорма);
	
	Модифицированность = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьДанныеОтчетаСтарогоОбразца(ПоказателиОтчета)
	
	ПоказателиТаблПоле = ПоказателиОтчета["ПолеТабличногоДокументаФормаОтчета"];
	
	// Если это показатели отчета нового образца, тогда выход из процедуры.
	Если ПоказателиТаблПоле.Свойство("П000202101_1") Тогда
		Возврат;
	КонецЕсли;
	
	СоответствиеПоказателей = Новый Соответствие;
	
	Для Каждого Показатель Из ПоказателиТаблПоле Цикл
		
		ИмяПоказателя = Показатель.Ключ;
		
		ПрефиксИмениПоказателя = "";
		ИмяПоказателяБезПрефикса = ИмяПоказателя;
		Если ВРег(Лев(ИмяПоказателя,2)) = "ЧН" Тогда
			ПрефиксИмениПоказателя = "ЧН";
			ИмяПоказателяБезПрефикса = Сред(ИмяПоказателя, 3);
		КонецЕсли;
		ЧастьПоказателя1 = Лев(ИмяПоказателяБезПрефикса, 6);
		ЧастьПоказателя2 = Сред(ИмяПоказателяБезПрефикса, 7, 2);
		ЧастьПоказателя3 = Сред(ИмяПоказателяБезПрефикса, 9);
		
		ИмяНовогоПоказателя = ИмяПоказателя;
		Если (ЧастьПоказателя1 = "П00020") И (ЧастьПоказателя2 >= "01" И ЧастьПоказателя2 <= "12") И (ЧастьПоказателя3 >= "01" И ЧастьПоказателя3 <= "06") Тогда
			ИмяНовогоПоказателя = ПрефиксИмениПоказателя + "П0002021" + ЧастьПоказателя3 + "_" + Формат(Число(ЧастьПоказателя2), "ЧГ=");
		ИначеЕсли (ЧастьПоказателя1 = "П00050") И (ЧастьПоказателя2 >= "01" И ЧастьПоказателя2 <= "11") Тогда
			Если ЧастьПоказателя3 >= "01" И ЧастьПоказателя3 <= "05" Тогда
				ИмяНовогоПоказателя = ПрефиксИмениПоказателя + "П0005001" + ЧастьПоказателя3 + "_" + Формат(Число(ЧастьПоказателя2), "ЧГ=");
			ИначеЕсли ЧастьПоказателя3 >= "06_1" И ЧастьПоказателя3 <= "06_3" Тогда
				ИмяНовогоПоказателя = ПрефиксИмениПоказателя + "П0005001" + Формат(Число(Прав(ЧастьПоказателя3, 1)) + 5, "ЧЦ=2; ЧВН=; ЧГ=") + "_" + Формат(Число(ЧастьПоказателя2), "ЧГ=");
			ИначеЕсли ЧастьПоказателя3 >= "07" И ЧастьПоказателя3 <= "10" Тогда
				ИмяНовогоПоказателя = ПрефиксИмениПоказателя + "П0005001" + Формат(Число(ЧастьПоказателя3) + 2, "ЧЦ=2; ЧВН=; ЧГ=") + "_" + Формат(Число(ЧастьПоказателя2), "ЧГ=");
			КонецЕсли
		КонецЕсли;
		
		Если ИмяНовогоПоказателя = ИмяПоказателя Тогда
			Продолжить;
		КонецЕсли;
		
		СоответствиеПоказателей.Вставить(ИмяПоказателя, ИмяНовогоПоказателя);
		
	КонецЦикла;
	
	Для Каждого ЭлементСоответствия Из СоответствиеПоказателей Цикл
		
		ПоказателиТаблПоле.Вставить(ЭлементСоответствия.Значение, ПоказателиТаблПоле[ЭлементСоответствия.Ключ]);
		ПоказателиТаблПоле.Удалить(ЭлементСоответствия.Ключ);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСведенияОбОрганизацииНаСервере(ВПрограммеИзмененаДатаПодписи = Ложь)
	
	РегламентированнаяОтчетностьКлиентСервер.ЗаполнитьСведенияОбОрганизацииДляОтчетаСтатистики(ЭтаФорма, ВПрограммеИзмененаДатаПодписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСведенияОбОрганизацииНаКлиенте(ВПрограммеИзмененаДатаПодписи = Ложь)
	
	РегламентированнаяОтчетностьКлиентСервер.ЗаполнитьСведенияОбОрганизацииДляОтчетаСтатистики(ЭтаФорма, ВПрограммеИзмененаДатаПодписи);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьОтчет(Команда)
	
	СохранитьНаКлиенте();
	
КонецПроцедуры

// СохранитьНаКлиенте
&НаКлиенте
Процедура СохранитьНаКлиенте(Автосохранение = Ложь, ВыполняемоеОповещение = Неопределено) Экспорт
	
	Вариант = СтруктураРеквизитовФормы.ВидДокумента * НомерКорректировки;
	
	Если НЕ РегламентированнаяОтчетностьКлиент.ПриЗаписиРегламентированногоОтчетаНаКлиенте(ЭтаФорма, , Автосохранение, Вариант) Тогда
		Возврат;
	КонецЕсли;
	
	ПодобныйОтчетСуществует = Ложь;
	ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки = Ложь;
	
	// формируем данные редактируемых ячеек таблицы
	ПоказателиОтчета = Новый Структура();
	
	#Если ВебКлиент Тогда
		ЗаполнитьПоказателиОтчетаНаСервере(ПоказателиОтчета);
	#Иначе
		ЗаполнитьПоказателиОтчетаНаКлиенте(ПоказателиОтчета);
	#КонецЕсли
	
	РезультатСохранения = ПередСохранением(, ПодобныйОтчетСуществует, Вариант, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, Автосохранение, ПоказателиОтчета);
	
	ВидДокументаНомерКорректировкиИзменен = Неопределено;
	
	Если ПодобныйОтчетСуществует И Автосохранение Тогда
		Возврат;
	КонецЕсли;
	
	НуженВопросПередСохранением = (ПодобныйОтчетСуществует ИЛИ ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки);
	
	Если НуженВопросПередСохранением Тогда
		СохранитьНаКлиентеСВопросом(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, ПодобныйОтчетСуществует, ПоказателиОтчета);
	Иначе		
		ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения);		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНаКлиентеСВопросом(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, ПодобныйОтчетСуществует, ПоказателиОтчета)
	
	Если ПодобныйОтчетСуществует Тогда
		
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(КодВозвратаДиалога.Да, "Сохранить");
		Кнопки.Добавить(КодВозвратаДиалога.Нет, "Отмена");
		
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Отчет с видом %1 уже существует.
		|Сохранить отчет с таким же видом?'"), ?(Вариант = 0, """Первичный""", """Корректирующий/" + Вариант + """"));
		ДополнительныеПараметры = Новый Структура("Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, ПоказателиОтчета", Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, ПоказателиОтчета);
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросСохранитьОтчетСТакимЖеВидомЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, Кнопки, , Кнопки.Получить(1).Значение);
		
	Иначе
		
		СохранитьНаКлиентеСВопросомПродолжение(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, ПоказателиОтчета);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросСохранитьОтчетСТакимЖеВидомЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	Автосохранение = ДополнительныеПараметры.Автосохранение;
	Вариант = ДополнительныеПараметры.Вариант;
	ВыполняемоеОповещение = ДополнительныеПараметры.ВыполняемоеОповещение;
	ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки = ДополнительныеПараметры.ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки;
	ПоказателиОтчета = ДополнительныеПараметры.ПоказателиОтчета;
	
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		
		Возврат;
		
	КонецЕсли;
	
	СохранитьНаКлиентеСВопросомПродолжение(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, ПоказателиОтчета);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНаКлиентеСВопросомПродолжение(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, ПоказателиОтчета)
	
	Если ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки Тогда
		
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("ВидОтчета", Вариант);
		
		ФормаВопроса = РегламентированнаяОтчетностьКлиент.ПолучитьОбщуюФормуПоИмени("ВопросПриИзмененииВидаДокументаНомераКорректировки", ПараметрыФормы);
		
		ДополнительныеПараметры = Новый Структура("Автосохранение, Вариант, ВыполняемоеОповещение, ПоказателиОтчета", Автосохранение, Вариант, ВыполняемоеОповещение, ПоказателиОтчета);
		ОписаниеОповещения = Новый ОписаниеОповещения("СохранитьНаКлиентеСВопросомПродолжениеЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		
		ФормаВопроса.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
		ФормаВопроса.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		ФормаВопроса.Открыть();
		
	Иначе
		Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Сохраняется %1...'"), ЭтаФорма.Заголовок), , , БиблиотекаКартинок.Записать);
		РезультатСохранения = Сохранить(Автосохранение, , Вариант, Ложь, ПоказателиОтчета);
		ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНаКлиентеСВопросомПродолжениеЗавершение(КодВозврата, ДополнительныеПараметры) Экспорт
	
	Автосохранение = ДополнительныеПараметры.Автосохранение;
	Вариант = ДополнительныеПараметры.Вариант;
	ВыполняемоеОповещение = ДополнительныеПараметры.ВыполняемоеОповещение;
	ПоказателиОтчета = ДополнительныеПараметры.ПоказателиОтчета;
	
	Если КодВозврата = КодВозвратаДиалога.Да
		ИЛИ КодВозврата = КодВозвратаДиалога.Нет Тогда
		
		ВидДокументаНомерКорректировкиИзменен = ?(КодВозврата = КодВозвратаДиалога.Да, Истина, Ложь);
		
	Иначе
		
		Возврат;
		
	КонецЕсли;
	
	Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Сохраняется %1...'"), ЭтаФорма.Заголовок), , , БиблиотекаКартинок.Записать);
	РезультатСохранения = Сохранить(Автосохранение, , Вариант, Ложь, ПоказателиОтчета);
	ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения)
	
	КлючУникальности = СтруктураРеквизитовФормы.мСохраненныйДок;
	
	Если РезультатСохранения Тогда
		
		РегламентированнаяОтчетностьКлиент.ПослеЗаписиРегламентированногоОтчета(ЭтаФорма);
		
		Если ВыполняемоеОповещение <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ВыполняемоеОповещение);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры
// СохранитьНаКлиенте

// ПередСохранением()
//
&НаСервере
Функция ПередСохранением(КодИФНС = "не применимо", ПодобныйОтчетСуществует="", Вариант="", ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки="", Автосохранение="", ПоказателиОтчета="")
	
	Если РегламентированнаяОтчетность.БылиИзмененыКлючевыеРеквизитыОтчета(ЭтаФорма, КодИФНС)
		И РегламентированнаяОтчетность.СуществуетДокументСАналогичнымиРеквизитами(ЭтаФорма, КодИФНС) Тогда
		
		ПодобныйОтчетСуществует = Истина;
		
	КонецЕсли;
	
	СтруктураРеквизитовФормы.мЗаписываетсяНовыйДокумент = (СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено ИЛИ СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено);
	
	Если Вариант <> Неопределено И ((СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено) ИЛИ (СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено) ИЛИ (Вариант <> СтруктураРеквизитовФормы.мВариант)) Тогда
		
		Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено ИЛИ СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено Тогда
			
		ИначеЕсли Вариант <> СтруктураРеквизитовФормы.мВариант Тогда
			
			ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПодобныйОтчетСуществует
		ИЛИ ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Возврат Сохранить(Автосохранение, КодИФНС, Вариант, , ПоказателиОтчета);
	
КонецФункции

// Формирует структуру данных отчета и помещает в реквизит типа ХранилищеЗначения
// документа РегламентированныйОтчет.
// 
// При первом сохранении данных отчета создает новый документ этого вида.
// Структура данных отчета состоит из элементов:
//   - значения редактируемых реквизитов отчета;
//   - данные по многострочным разделам отчета;
//   - данные по  многостраничным разделам отчета;
//   - данные по вариантам заполнения реквизитов,
//     участвующих в автозаполнении.
//
&НаСервере
Функция Сохранить(Автосохранение = Ложь, КодИФНС = "не применимо", Вариант = Неопределено, ВидДокументаНомерКорректировкиИзменен = Неопределено, ПоказателиОтчета = Неопределено) Экспорт
	
	ДанныеДляРазблокирования = Неопределено;
	
	Если НЕ СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
		Если НЕ СтруктураРеквизитовФормы.мБезОткрытияФормы Тогда
			ДанныеДляРазблокирования = Новый Структура("Ключ,ИдФормы",
			СтруктураРеквизитовФормы.мСохраненныйДок, ЭтаФорма.УникальныйИдентификатор);
		КонецЕсли;
		СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.ПолучитьОбъект();
	КонецЕсли;
	
	Если НЕ РегламентированнаяОтчетность.ПриЗаписиРегламентированногоОтчетаНаСервере(ЭтаФорма, КодИФНС, Автосохранение, Вариант, ВидДокументаНомерКорректировкиИзменен, СтруктураРеквизитовФормы.мСохраненныйДок) Тогда
		СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
		Возврат Ложь;
	КонецЕсли;
	
	// Установим текущие значения реквизитов документа.
	СтруктураРеквизитовФормы.мСохраненныйДок.ИсточникОтчета = Метаданные.Отчеты[Сред(Лев(СтрЗаменить(ЭтаФорма.ИмяФормы, "Внешний", ""), СтрНайти(СтрЗаменить(ЭтаФорма.ИмяФормы, "Внешний", ""), ".Форма.") - 1), 7)].Имя;
	СтруктураРеквизитовФормы.мСохраненныйДок.НаименованиеОтчета = Метаданные.Отчеты[Сред(Лев(СтрЗаменить(ЭтаФорма.ИмяФормы, "Внешний", ""), СтрНайти(СтрЗаменить(ЭтаФорма.ИмяФормы, "Внешний", ""), ".Форма.") - 1), 7)].ОсновнаяФорма.Синоним;
	СтруктураРеквизитовФормы.мСохраненныйДок.ДатаНачала               = СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета;
	СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания            = СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета;
	СтруктураРеквизитовФормы.мСохраненныйДок.Периодичность            = СтруктураРеквизитовФормы.мПериодичность;
	СтруктураРеквизитовФормы.мСохраненныйДок.ВыбраннаяФорма           = СтруктураРеквизитовФормы.мВыбраннаяФорма;
	СтруктураРеквизитовФормы.мСохраненныйДок.Организация              = СтруктураРеквизитовФормы.Организация;
	СтруктураРеквизитовФормы.мСохраненныйДок.ДатаПодписи              = ДатаПодписи;
	СтруктураРеквизитовФормы.мСохраненныйДок.ЕдиницаИзмерения         = Неопределено;
	СтруктураРеквизитовФормы.мСохраненныйДок.ТочностьЕдиницыИзмерения = СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения;
	СтруктураРеквизитовФормы.мСохраненныйДок.ВидОтчетности            = Перечисления.ВидыОтчетности.РегламентированнаяОтчетность;
	СтруктураРеквизитовФормы.мСохраненныйДок.Вид                      = Вариант;
	СтруктураРеквизитовФормы.мСохраненныйДок.ПредставлениеВида        = РегламентированнаяОтчетность.ПредставлениеВидаДокумента(СтруктураРеквизитовФормы.мСохраненныйДок.Вид);
	СтруктураРеквизитовФормы.мСохраненныйДок.Комментарий              = Комментарий;
	
	СтруктураРеквизитовФормы.мВариант = Вариант;
	
	// Формируем список сохранения.
	СписокСохранения = Новый Структура();
	
	// Вставляем данные редактируемых ячеек таблицы.
	СписокСохранения.Вставить("ПоказателиОтчета", ПоказателиОтчета);
	РегламентированнаяОтчетность.СохранитьДанныеРасшифровкиСтатистическогоОтчета(ЭтаФорма, СписокСохранения);
	
	// Вставляем данные многострочных разделов.
	ДанныеМногострочныхРазделов = Новый Структура;
	
	Для Каждого ЭлементСтруктуры Из мСтруктураМногострочныхРазделов Цикл
		ДанныеМногострочныхРазделов.Вставить(ЭлементСтруктуры.Ключ, ДанныеФормыВЗначение(ЭтаФорма[ЭлементСтруктуры.Значение], Тип("ТаблицаЗначений")));
	КонецЦикла;
	
	СписокСохранения.Вставить("ДанныеМногострочныхРазделов", ДанныеМногострочныхРазделов);
	
	// Вставляем данные вариантов автозаполнения ячеек.
	СписокСохранения.Вставить("ДанныеВариантовАвтоЗаполнения", Неопределено);
	
	// Вствляем версию формы.
	СписокСохранения.Вставить("ВерсияФормы", СтруктураРеквизитовФормы.мВерсияФормы);
	
	СписокСохранения.Вставить("ФлОтклВыборЗначений", СтруктураРеквизитовФормы.мАвтоВыборКодов);
	
	// вставляем флаг исключения данных обособленных подразделений
	СписокСохранения.Вставить("ИсключитьДанныеОбособленныхПодразделений", ИсключитьДанныеОбособленныхПодразделений);
	
	// вставляем выбранное значение обособленного подразделения
	СписокСохранения.Вставить("ОбособленноеПодразделение", ОбособленноеПодразделение);
	
	СписокСохранения.Вставить("КодПодразделенияФСГС_8_14", ПоказателиОтчета.ПолеТабличногоДокументаФормаОтчета.ОргКодОКПО);
	
	ХранилищеДанных = Новый ХранилищеЗначения(СписокСохранения);
	СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета = ХранилищеДанных;
	
	// Записываем документ, хранящий данные отчета.
	Попытка
		СтруктураРеквизитовФормы.мСохраненныйДок.Записать();
		РегламентированнаяОтчетность.СохранитьСтатусОтправкиРеглОтчета(ЭтаФорма);
	Исключение
		
		Если НЕ Автосохранение Тогда
			
			Сообщение = Новый СообщениеПользователю;
			
			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), РегламентированнаяОтчетностьКлиентСервер.СформироватьТекстСообщения(ОписаниеОшибки()));
			
			Сообщение.Сообщить();
			
		КонецЕсли;
		
		СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
		
		Возврат Ложь;
		
	КонецПопытки;
	
	Модифицированность   = Ложь;
	
	СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
	
	Если НЕ СтруктураРеквизитовФормы.мБезОткрытияФормы
       И НЕ СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
				   
    	ЗаблокироватьДанныеДляРедактирования(СтруктураРеквизитовФормы.мСохраненныйДок, , ЭтаФорма.УникальныйИдентификатор);

    КонецЕсли;
	
	Если ДанныеДляРазблокирования <> Неопределено Тогда
		РазблокироватьДанныеДляРедактирования(ДанныеДляРазблокирования.Ключ, ДанныеДляРазблокирования.ИдФормы);
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Функция СобратьДанныеТекущегоТаблПоляНаКлиенте(ИмяТабличногоПоля) Экспорт
	
	Возврат РегламентированнаяОтчетностьКлиентСервер.СобратьДанныеТекущегоТаблПоля(ЭтаФорма, ИмяТабличногоПоля);
	
КонецФункции

&НаСервере
Функция СобратьДанныеТекущегоТаблПоляНаСервере(ИмяТабличногоПоля) Экспорт
	
	Возврат РегламентированнаяОтчетностьКлиентСервер.СобратьДанныеТекущегоТаблПоля(ЭтаФорма, ИмяТабличногоПоля);
	
КонецФункции

&НаСервере
Процедура ЗаполнитьПоказателиОтчетаНаСервере(ПоказателиОтчета)
	
	Префикс = "ПолеТабличногоДокумента";
	
	Для Каждого Группа из Элементы.Страницы.ПодчиненныеЭлементы Цикл
		
		Для Каждого ЭлементГруппы Из Группа.ПодчиненныеЭлементы Цикл 
			
			Если СтрЧислоВхождений(ЭлементГруппы.Имя, Префикс) = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			ПоказателиОтчета.Вставить(ЭлементГруппы.Имя, СобратьДанныеТекущегоТаблПоляНаСервере(ЭлементГруппы.Имя));
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоказателиОтчетаНаКлиенте(ПоказателиОтчета)
	
	Префикс = "ПолеТабличногоДокумента";
	
	Для Каждого Группа из Элементы.Страницы.ПодчиненныеЭлементы Цикл
		
		Для Каждого ЭлементГруппы Из Группа.ПодчиненныеЭлементы Цикл 
			
			Если СтрЧислоВхождений(ЭлементГруппы.Имя, Префикс) = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			ПоказателиОтчета.Вставить(ЭлементГруппы.Имя, СобратьДанныеТекущегоТаблПоляНаКлиенте(ЭлементГруппы.Имя));
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УдалитьДополнительнуюСтроку(Форма, СпециальноеДобавление = Ложь, ИмяКолонкиНомера = Неопределено, ТекущаяСтраница = Неопределено) Экспорт
	
	Перем ИсходноеКоличествоСтрокГруппы;
	Перем СтруктураГруппы;
	
	// Сначала выполним проверку на активную страницу панели формы,
	// которая содержит многострочный раздел.
	#Если НаКлиенте Тогда
		ИмяГруппы = Форма.ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаКлиенте(ТекущаяСтраница);
	#Иначе
		ИмяГруппы = Форма.ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ТекущаяСтраница);
	#КонецЕсли
	
	// Исходное количество строк группы.
	Форма.мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);
	
	Форма.мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);
	
	ТекТабличноеПолеИмя = "ПолеТабличногоДокументаФормаОтчета";
	
	ТекТабличноеПоле = Форма[ТекТабличноеПолеИмя];
	ТекущаяОбласть = Форма.Элементы[ТекТабличноеПолеИмя].ТекущаяОбласть;
	ИмяЯчейки      = ТекущаяОбласть.Имя;
	
	ИмяГруппы = РазделТекущейОбласти(Форма, ТекущаяОбласть);
	
	// Предварительно обновим структуру многострочных разделов.
	ОбновитьСтруктуруМногострочногоРаздела(Форма, ИмяГруппы);
	
	// Номер строки многострочного раздела определим
	// по имени выделенной ячейки.
	НомУдаляемойСтроки = Число( Сред( ИмяЯчейки, СтрНайти( ИмяЯчейки, "_") + 1));
	НомерСтрокиТаблицы = НомУдаляемойСтроки - 1; // нумерация строк в таблице значений начинается с нуля
	СтруктураГруппы = Форма[СтруктураГруппы];
	Если СтруктураГруппы.Количество() > ИсходноеКоличествоСтрокГруппы Тогда
		// Удаляется добавленная строка.
		ИмяПервойЯчейкиУдаляемойСтроки = ИмяГруппы + "01_" + НомУдаляемойСтроки;
		
		// Область первой ячейки удаляемой строки многострочного раздела.
		ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяПервойЯчейкиУдаляемойСтроки];
		
		// Номера строк удаляемой области.
		НомерВерхЯчейкиОбласти = ОбластьЯчейки.Верх;
		НомерНижнЯчейкиОбласти = ОбластьЯчейки.Верх;
		
		РегламентированнаяОтчетностьВызовСервера.СпециальногоУдаленияСтроки(ТекТабличноеПоле, ТекТабличноеПолеИмя, ИмяГруппы, НомерВерхЯчейкиОбласти, НомерНижнЯчейкиОбласти);
		
		Форма[ТекТабличноеПолеИмя] = ТекТабличноеПоле;
		
		КолвоСдвигаемыхСтрок = СтруктураГруппы.Количество() - НомУдаляемойСтроки;
		
		// Обновим имена ячеек сдвинутых строк.
		Если КолвоСдвигаемыхСтрок > 0 Тогда
			
			Для НСтр = НомУдаляемойСтроки + 1 По СтруктураГруппы.Количество() Цикл
				
				ТекСтрока = СтруктураГруппы[НСтр-1];
				
				Для НомерГрафы = 1 По Форма.мСтруктураКолвоКолонокРазделов[ИмяГруппы] Цикл
					
					КолонкаИмя = ИмяГруппы + Формат(НомерГрафы, "ЧЦ=2; ЧВН=");
					
					Если СтруктураГруппы[0].Свойство(КолонкаИмя) Тогда
						
						ИмяСдвинутойЯчейки = КолонкаИмя + "_" + НСтр;
						НовоеИмяСдвинутойЯчейки = КолонкаИмя + "_" + (НСтр - 1);
						
						ОбластьСдвинутойЯчейки     = ТекТабличноеПоле.Области[ИмяСдвинутойЯчейки];
						ОбластьСдвинутойЯчейки.Имя = НовоеИмяСдвинутойЯчейки;
						
						Если НомерГрафы = 1 Тогда
							ОбластьЯчейкиУдалитьСтроку = ТекТабличноеПоле.Область(ОбластьСдвинутойЯчейки.Верх, 2, ОбластьСдвинутойЯчейки.Верх, 2);
							ОбластьЯчейкиУдалитьСтроку.Имя = "УдалитьСтроку" + НовоеИмяСдвинутойЯчейки;
						КонецЕсли;
						
						Если ОбластьСдвинутойЯчейки.СодержитЗначение <> Истина Тогда
							Если НЕ ПустаяСтрока(ТекСтрока[КолонкаИмя]) Тогда
								СтарыйНомер = Число(ТекСтрока[КолонкаИмя]);
								НовыйПорядковыйНомер = Строка(Макс(СтарыйНомер - 1, 0));
								ОбластьСдвинутойЯчейки.Текст = НовыйПорядковыйНомер;
								ТекСтрока[КолонкаИмя] = НовыйПорядковыйНомер;
							КонецЕсли; 
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
				
			КонецЦикла;
		КонецЕсли;
		
		// Обновляем структуру многострочного раздела.
		СтруктураГруппы.Удалить(НомерСтрокиТаблицы);
		
	Иначе
		// Строка не удаляется в форме табличного документа,
		// должен осуществляться сдвиг строк.
		// Обновляем структуру многострочного раздела
		// методом удаления выбранной строки и добавления пустой строки.
		СтруктураГруппы.Удалить(НомерСтрокиТаблицы);
		
		ДобавляемаяСтрока = СтруктураГруппы.Добавить();
		
		// Обновляем порядковые номера строк, выводимых в табличный документ.
		Для Каждого СтрокаТаблицы Из СтруктураГруппы Цикл
			
			НомерСтрокиВТаблице = СтруктураГруппы.Индекс(СтрокаТаблицы);
			НомерСтрокиВФормеТаблицы = Формат(НомерСтрокиВТаблице + 1, "ЧГ=0");
			
			Для НомерГрафы = 1 По Форма.мСтруктураКолвоКолонокРазделов[ИмяГруппы] Цикл
				КолонкаТаблицыИмя = ИмяГруппы + Формат(НомерГрафы, "ЧЦ=2; ЧВН=");
				
				Если СтруктураГруппы[0].Свойство(КолонкаТаблицыИмя) Тогда
					
					ИмяЯчейки                = КолонкаТаблицыИмя + "_" + НомерСтрокиВФормеТаблицы;
					ОбластьЯчейкиТаблицы     = ТекТабличноеПоле.Области[ИмяЯчейки];
					
					Если ОбластьЯчейкиТаблицы.СодержитЗначение <> Истина Тогда
						
						ПервыйНомерВГруппе = 21;
						
						// Обновляем порядковый номер строки.
						НовыйПорядковыйНомер = Строка(ПервыйНомерВГруппе + НомерСтрокиВТаблице);
						
						СтрокаТаблицы[КолонкаТаблицыИмя] = НовыйПорядковыйНомер;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		// Обновляем экранную форму табличного документа.
		#Если НаКлиенте Тогда
			Форма.ВывестиРазделВТабличныйДокументНаКлиенте(ИмяГруппы, СтруктураГруппы);
		#Иначе
			Форма.ВывестиРазделВТабличныйДокументНаСервере(ИмяГруппы, СтруктураГруппы);
		#КонецЕсли
		
	КонецЕсли;
	
	// Назначим текущей областью таблицы первую редактируемую ячейку
	// удаленной строки, если ее порядковый номер меньше кол-ва строк
	// многострочного раздела, или последней строки раздела в противном случае.
	
	// Определяем текущую область таблицы.
	НомТекущейСтроки  = Мин( НомУдаляемойСтроки, СтруктураГруппы.Количество() );
	ИмяТекущейОбласти = ИмяГруппы + "01_" + НомТекущейСтроки;
	
	Форма.Элементы[ТекТабличноеПолеИмя].ТекущаяОбласть = ТекТабличноеПоле.Области[ИмяТекущейОбласти];
	
	// Установим фокус на поле табличн. документа.
	ТекущийЭлемент = Форма.Элементы[ТекТабличноеПолеИмя];
	
	Форма.Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Функция ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаКлиенте(ИмяЛиста = Неопределено) Экспорт
	Возврат ОпределитьИдМногострочногоРазделаПоАктивнойСтранице(ЭтаФорма, ИмяЛиста, ИмяЛиста);
КонецФункции

&НаСервере
Функция ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ИмяЛиста = Неопределено) Экспорт
	Возврат ОпределитьИдМногострочногоРазделаПоАктивнойСтранице(ЭтаФорма, ИмяЛиста, ИмяЛиста);
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ОпределитьИдМногострочногоРазделаПоАктивнойСтранице(Форма, ИмяЛиста = Неопределено, ТекущаяСтраница = Неопределено)
	Перем ИмяГруппы;
	
	Если ИмяЛиста = Неопределено Тогда
		ИмяТекущейСтраницыПанели = ТекущаяСтраница.Имя;
	Иначе
		ИмяТекущейСтраницыПанели = ИмяЛиста;
	КонецЕсли;
	
	Если ИмяТекущейСтраницыПанели = "ФормаОтчета" Тогда
		ИмяГруппы = РазделТекущейОбласти(Форма, Форма.Элементы.ПолеТабличногоДокументаФормаОтчета.ТекущаяОбласть);
	КонецЕсли;
	
	Возврат ИмяГруппы;
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьСтруктуруМногострочногоРаздела(Форма, ИмяГруппы) Экспорт
	
	Перем СтруктураГруппы;
	
	Форма.мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);
	
	СтруктураГруппы = Форма[СтруктураГруппы];
	
	ТекТабличноеПолеИмя = "ПолеТабличногоДокументаФормаОтчета";
	
	ТекТабличноеПоле = Форма[ТекТабличноеПолеИмя];
	
	Для НСтр = 1 По СтруктураГруппы.Количество() Цикл
		ТекСтрокаТаблицы = СтруктураГруппы[НСтр - 1];
		НСтрСтр = Формат(НСтр, "ЧГ=0");
		
		Для НомерГрафы = 1 По Форма.мСтруктураКолвоКолонокРазделов[ИмяГруппы] Цикл
			
			ИмяКолонки = ИмяГруппы + Формат(НомерГрафы, "ЧЦ=2; ЧВН=");
			
			Если СтруктураГруппы[0].Свойство(ИмяКолонки) Тогда
				
				ИмяЯчейки     = ИмяКолонки + "_" + НСтрСтр;
				ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяЯчейки];
				
				Если ОбластьЯчейки.СодержитЗначение = Истина Тогда
					ЗначениеЯчейки = ОбластьЯчейки.Значение;
				Иначе
					ЗначениеЯчейки = ОбластьЯчейки.Текст;
				КонецЕсли;
				
				ТекСтрокаТаблицы[ИмяКолонки] = ЗначениеЯчейки;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиРазделВТабличныйДокументНаСервере(ИмяГруппы, СтруктураГруппы) Экспорт
	
	ВывестиРазделВТабличныйДокумент(ЭтаФорма, ИмяГруппы, СтруктураГруппы);
	
КонецПроцедуры

&НаКлиенте
Процедура ВывестиРазделВТабличныйДокументНаКлиенте(ИмяГруппы, СтруктураГруппы) Экспорт
	
	ВывестиРазделВТабличныйДокумент(ЭтаФорма, ИмяГруппы, СтруктураГруппы);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ВывестиРазделВТабличныйДокумент(Форма, ИмяГруппы, СтруктураГруппы)
	
	Перем ИсходноеКоличествоСтрокГруппы;
	
	// Определим исходное колво строк многострочного раздела,
	// соответствующее бумажной форме отчета.
	Форма.мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);
	
	// реальное кол-во строк (колво заполненных строк)
	ТекущееКоличествоСтрокГруппы = СтруктураГруппы.Количество();
	
	ТекТабличноеПолеИмя = "ПолеТабличногоДокументаФормаОтчета";
	
	ТекТабличноеПоле = Форма[ТекТабличноеПолеИмя];
	
	// При восстановлении сохраненных данных отчета сравниваем исходное кол-во
	// отображаемых в форме строк многострочного раздела с реальным количеством
	// созданных строк в сохраненном отчете.
	Если ТекущееКоличествоСтрокГруппы > ИсходноеКоличествоСтрокГруппы Тогда
		
		РегламентированнаяОтчетностьКлиентСервер.ДобавитьНеобходимоеКоличествоДопСтрок(Форма, ТекТабличноеПоле, ТекТабличноеПолеИмя, ИсходноеКоличествоСтрокГруппы, ТекущееКоличествоСтрокГруппы, ИмяГруппы, СтруктураГруппы);
		
		Форма[ТекТабличноеПолеИмя] = ТекТабличноеПоле;
		
	КонецЕсли;
	
	ТекТабличноеПоле = Форма[ТекТабличноеПолеИмя];
	
	// Выводим значения строк.
	Для Каждого СтрокаТаблицы Из СтруктураГруппы Цикл
		
		Для НомерГрафы = 1 По Форма.мСтруктураКолвоКолонокРазделов[ИмяГруппы] Цикл
			
			КолонкаТаблицыИмя = ИмяГруппы + Формат(НомерГрафы, "ЧЦ=2; ЧВН=");
			
			Если СтруктураГруппы[0].Свойство(КолонкаТаблицыИмя) Тогда
				
				НомерСтрокиВТаблице      = СтруктураГруппы.Индекс(СтрокаТаблицы);
				НомерСтрокиВФормеТаблицы = НомерСтрокиВТаблице + 1;
				ИмяЯчейки                = КолонкаТаблицыИмя + "_" + НомерСтрокиВФормеТаблицы;
				ОбластьЯчейкиТаблицы     = ТекТабличноеПоле.Области[ИмяЯчейки];
				ЗначениеЯчейки           = СтрокаТаблицы[КолонкаТаблицыИмя];
				
				Если ОбластьЯчейкиТаблицы.СодержитЗначение Тогда
					// Задаем значение ячейки.
					ОбластьЯчейкиТаблицы.Значение = ЗначениеЯчейки;
				Иначе
					ОбластьЯчейкиТаблицы.Текст    = ЗначениеЯчейки;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если СтрНайти(Заголовок, СтруктураРеквизитовФормы.СтрПериодОтчета) = 0 Тогда
		Заголовок = Заголовок + " за " + СтруктураРеквизитовФормы.СтрПериодОтчета;
	КонецЕсли;
	
	ОргСтр = " (" + СтруктураРеквизитовФормы.НаимОрганизации + ")";
	Если СтрНайти(Заголовок, ОргСтр) = 0 Тогда
		Заголовок = Заголовок + ОргСтр;
	КонецЕсли;
	
	Заголовок = Заголовок + ?(СтрНайти(ЭтаФорма.ИмяФормы, "Внешний") > 0, " - внешний отчет", "");
	
	ПодключитьОбработчикОжидания("ВыполнитьПроверкуПередОткрытием", 0.1, Истина);

КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПроверкуПередОткрытием()
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПриОткрытииЗавершение", ЭтотОбъект);
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередОткрытиемФормыРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытииЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Модифицированность = Ложь;
		Закрыть();
		Возврат;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	РегламентированнаяОтчетностьКлиент.ПередЗакрытиемРегламентированногоОтчета(ЭтаФорма, Отказ, СтандартнаяОбработка, ЗавершениеРаботы, ТекстПредупреждения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ЗавершениеРаботы Тогда
				
		Возврат;
		
	КонецЕсли;
	
	ПриЗакрытииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПриЗакрытииНаСервере()
	
	РегламентированнаяОтчетность.ПриЗакрытииРегламентированногоОтчета(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолеТабличногоДокументаФормаОтчетаВыбор(Элемент, Область, СтандартнаяОбработка)
	РегламентированнаяОтчетностьКлиент.ОбработкаВыбораПоляОбособленныхПодразделений(ЭтаФорма, Область, СтандартнаяОбработка);
	Если СтрЧислоВхождений(Область.Имя, "ДобавитьСтроку") > 0 Тогда
		СтандартнаяОбработка = Ложь;
		ДобавитьСтроку("");
	ИначеЕсли СтрЧислоВхождений(Область.Имя, "УдалитьСтроку") > 0 Тогда
		УдалитьСтроку("");
	КонецЕсли;
	
	Если Область.Защита = Истина Тогда
		Возврат;
	Конецесли;
	
	Если Область.Имя = "ОргАдрес" Тогда
		РегламентированнаяОтчетностьКлиент.ОбработкаАдресаВСтатистическомОтчете(ЭтаФорма, Область, СтандартнаяОбработка);
	ИначеЕсли Не СтруктураРеквизитовФормы.мАвтоВыборКодов Тогда 
		
		Если СтрНайти(Область.Имя, "00000002_") > 0 Или СтрНайти(Область.Имя, "00000011_") > 0 Тогда 
			ПараметрВводаПоля = РегламентированнаяОтчетностьКлиентСервер.НайтиСвойстваПоказателя(ЭтаФорма, Лев(Область.Имя, 13));
		КонецЕсли;
		
		Если ПараметрВводаПоля <> Неопределено И ПараметрВводаПоля.ТаблицаЗначений <> Неопределено Тогда
			
			СтандартнаяОбработка = Ложь;
			
			КолонкаПоиска = "Код";
			КодПоказателя = ПараметрВводаПоля.Показатель;
			
			КопироватьДанныеФормы(ПараметрВводаПоля.ТаблицаЗначений, ТЗВыбора);
			
			НовСтрТЗ = ТЗВыбора.Вставить(0);
			НовСтрТЗ.Код = "";
			НовСтрТЗ.Название = "Пустое значение";
			
			ВвестиПоказатель(Элемент, Область, КодПоказателя, Ложь, ПараметрВводаПоля.ТекстПриВыборе, ТЗВыбора, СтандартнаяОбработка, КолонкаПоиска);
			
		КонецЕсли;
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСтроку(Команда)
	#Если ВебКлиент Тогда
		ДобавитьСтрокуНаСервере("ФормаОтчета");
	#Иначе
		ДобавитьСтрокуНаКлиенте("ФормаОтчета");
	#КонецЕсли
КонецПроцедуры

&НаСервере
Процедура ДобавитьСтрокуНаСервере(КолонкаРазделыОтчетаСокрНаим)
	ВставитьДополнительнуюСтроку(ЭтаФорма,КолонкаРазделыОтчетаСокрНаим);
КонецПроцедуры


&НаКлиенте
Процедура ДобавитьСтрокуНаКлиенте(КолонкаРазделыОтчетаСокрНаим)
	ВставитьДополнительнуюСтроку(ЭтаФорма, КолонкаРазделыОтчетаСокрНаим);
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтрокуЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
		
	#Если ВебКлиент Тогда
		УдалитьДополнительнуюСтрокуНаСервере("ФормаОтчета");
	#Иначе
		УдалитьДополнительнуюСтрокуНаКлиенте("ФормаОтчета");
	#КонецЕсли
КонецПроцедуры

&НаКлиенте
Процедура УдалитьДополнительнуюСтрокуНаКлиенте(ТекущаяСтраница)
	УдалитьДополнительнуюСтроку(ЭтаФорма, , , ТекущаяСтраница);
КонецПроцедуры

&НаСервере
Процедура УдалитьДополнительнуюСтрокуНаСервере(ТекущаяСтраница)
	УдалитьДополнительнуюСтроку(ЭтаФорма, , , ТекущаяСтраница);
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОтрисоватьЗначкиУдаленияСтрок(Форма, ДлинаИмениОбластейСДопСтроками = 26) Экспорт 
	
	ТабДок = Форма.ПолеТабличногоДокументаФормаОтчета;
	
	МассивОбластейСДопСтроками = Новый Массив;
	
	Для Каждого ОбластьТД Из ТабДок.Области Цикл
		Если СтрЧислоВхождений(ОбластьТД.Имя, "УдалитьСтроку") > 0 Тогда
			Если СтрЧислоВхождений(ОбластьТД.Имя, "_2") > 0 Тогда
				МассивОбластейСДопСтроками.Добавить(Лев(ОбластьТД.Имя, ДлинаИмениОбластейСДопСтроками));
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ОбластьТД Из ТабДок.Области Цикл
		Если СтрЧислоВхождений(ОбластьТД.Имя, "УдалитьСтроку") > 0 Тогда
			Если МассивОбластейСДопСтроками.Найти(Лев(ОбластьТД.Имя, ДлинаИмениОбластейСДопСтроками)) = Неопределено Тогда
				ОбластьТД.Гиперссылка = Ложь;
				ОбластьТД.Текст = "";
			Иначе
				ОбластьТД.Гиперссылка = Истина;
				ОбластьТД.Текст = "х";
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ВставитьДополнительнуюСтроку(Форма, ТекущаяСтраница)
	
	Перем СтруктураГруппы;
	Перем МаксимальноеКоличествоСтрокГруппы;
	
	// Сначала выполним проверку на активную страницу панели формы,
	// которая содержит многострочный раздел.
	
	#Если НаКлиенте Тогда
		ИмяГруппы = Форма.ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаКлиенте(ТекущаяСтраница);
	#Иначе
		ИмяГруппы = Форма.ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ТекущаяСтраница);
	#КонецЕсли
	
	ТекущаяОбласть = Форма.Элементы.ПолеТабличногоДокументаФормаОтчета.ТекущаяОбласть;
		
	Если ИмяГруппы = Неопределено Тогда
		
		Сообщение = Новый СообщениеПользователю;
		
		Сообщение.Текст = НСтр("ru='Не выбран многострочный раздел, в который необходимо добавить строку.'");
		
		Сообщение.Сообщить();
		
		Возврат;
		
	КонецЕсли;
	
	// Исходное количество строк группы.
	Форма.мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, МаксимальноеКоличествоСтрокГруппы);
	
	ТекТабличноеПолеИмя = "ПолеТабличногоДокументаФормаОтчета";
	ТекТабличноеПоле = Форма[ТекТабличноеПолеИмя];
	
	Форма.мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);
	СтруктураГруппы = Форма[СтруктураГруппы];
	
	// Определяем последнюю строку многострочной группы.
	КолСтрок = СтруктураГруппы.Количество();
	КолСтрокСтр = Формат(КолСтрок, "ЧГ=0");
	КолСтрокСтр1 = Формат(КолСтрок + 1, "ЧГ=0");
	ИмяПервойЯчейкиПоследнейСтроки = ИмяГруппы + "01_" + КолСтрокСтр;
	
	// Область первой ячейки последней строки многострочного раздела.
	ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяПервойЯчейкиПоследнейСтроки];
	
	// Номера строк исходной области.
	НомерВерхЯчейкиОбласти = ОбластьЯчейки.Верх;
	НомерНижнЯчейкиОбласти = ОбластьЯчейки.Низ;
	СдвигСтрок = НомерНижнЯчейкиОбласти - НомерВерхЯчейкиОбласти + 1;
	
	// Номера строк вставляемой области.
	НомерВерхЯчейкиНовойОбласти = НомерВерхЯчейкиОбласти + СдвигСтрок;
	НомерНижнЯчейкиНовойОбласти = НомерНижнЯчейкиОбласти + СдвигСтрок;
	
	РегламентированнаяОтчетностьВызовСервера.СпециальногоДобавленияСтроки(
		ТекТабличноеПоле, ТекТабличноеПолеИмя, ИмяГруппы, НомерВерхЯчейкиОбласти, НомерНижнЯчейкиОбласти);
	
	Форма[ТекТабличноеПолеИмя] = ТекТабличноеПоле;
	
	Для НомерГрафы = 1 По Форма.мСтруктураКолвоКолонокРазделов[ИмяГруппы] Цикл
		
		ИмяКолонки = ИмяГруппы + Формат(НомерГрафы, "ЧЦ=2; ЧВН=");
		
		// Переопределяем имена вставленной области.
		Если СтруктураГруппы[0].Свойство(ИмяКолонки) Тогда
			
			ИмяОбластиЯчейки    = ИмяКолонки + "_" + КолСтрокСтр;
			ИмяНовОбластиЯчейки = ИмяКолонки + "_" + КолСтрокСтр1;
			
			ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяОбластиЯчейки];
			ОбластьЯчейки.Имя = ИмяНовОбластиЯчейки;
			
			// Определяем границы ячейки исходной области.
			НомерВерхСтрокиЯчейки  = ОбластьЯчейки.Верх - СдвигСтрок;
			НомерНижнСтрокиЯчейки  = ОбластьЯчейки.Низ  - СдвигСтрок;
			
			НомерЛевоКолонкиЯчейки = ОбластьЯчейки.Лево;
			НомерПравКолонкиЯчейки = ОбластьЯчейки.Право;
			
			// Назначаем имя ячейки исходной области,
			// (т.к. в результате вставки новой области оно было очищено).
			ОбластьЯчейкиИсходнойОбласти = ТекТабличноеПоле.Область(
				НомерВерхСтрокиЯчейки, НомерЛевоКолонкиЯчейки, НомерНижнСтрокиЯчейки, НомерПравКолонкиЯчейки);
			ОбластьЯчейкиИсходнойОбласти.Имя = ИмяОбластиЯчейки;
			
			// Назначаем имена областей для удаления строк
			Если НомерГрафы = 1 Тогда
				НовОбластьЯчейкиУдалитьСтроку = ТекТабличноеПоле.Область(ОбластьЯчейки.Верх, 2, ОбластьЯчейки.Верх, 2);
				НовОбластьЯчейкиУдалитьСтроку.Имя = "УдалитьСтроку" + ИмяНовОбластиЯчейки;
				ИсхОбластьЯчейкиУдалитьСтроку = ТекТабличноеПоле.Область(ОбластьЯчейкиИсходнойОбласти.Верх, 2, ОбластьЯчейкиИсходнойОбласти.Верх, 2);
				ИсхОбластьЯчейкиУдалитьСтроку.Имя = "УдалитьСтроку" + ИмяОбластиЯчейки;
			КонецЕсли;
			
			// Очищаем значения ячеек вставленной области.
			Если ОбластьЯчейки.СодержитЗначение = Истина Тогда
				ОбластьЯчейки.Очистить();
			Иначе
				// Порядековый номер последней строки перед вставкой.
				ИсходныйНомер        = Число("0" + ОбластьЯчейки.Текст);
				НовыйПорядковыйНомер = ИсходныйНомер + 1;
				
				ОбластьЯчейки.Текст  = ? (НЕ НовыйПорядковыйНомер > МаксимальноеКоличествоСтрокГруппы, Строка(НовыйПорядковыйНомер), "");
				
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	// Назначим текущей областью таблицы первую редактируемую ячейку добавленной строки.
	// Определяем текущую область таблицы.
	ИмяТекущейОбласти = ИмяГруппы + "01_" + КолСтрокСтр1;
	
	Форма.Элементы[ТекТабличноеПолеИмя].ТекущаяОбласть = ТекТабличноеПоле.Области[ИмяТекущейОбласти];
	
	// Установим фокус на поле табличного документа.
	Форма.ТекущийЭлемент = Форма.Элементы[ТекТабличноеПолеИмя];
	
	// Добавляем в структуру многострочной группы новую строку.
	СтруктураГруппы.Добавить();
	ОтрисоватьЗначкиУдаленияСтрок(Форма);
	Форма.Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция РазделТекущейОбласти(Форма, ТекущаяОбласть)

	Если ТекущаяОбласть = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ИмяТекущейОбласти = СтрЗаменить(ТекущаяОбласть.Имя, "ДобавитьСтрокуЗначок", "ДобавитьСтроку");
	
	Если СтрНайти(ИмяТекущейОбласти, "УдалитьСтроку") > 0 Тогда
		ИмяТекущейОбласти = СтрЗаменить(ИмяТекущейОбласти, "УдалитьСтроку", "");
	ИначеЕсли СтрНайти(ИмяТекущейОбласти, "ДобавитьСтроку") > 0 Тогда
		ИмяТекущейОбласти = Форма.ПолеТабличногоДокументаФормаОтчета.Область(ТекущаяОбласть.Верх - 1, 3, ТекущаяОбласть.Верх - 1, 3).Имя;
	КонецЕсли;
	
	ИмяАктивногоРаздела = Лев(ИмяТекущейОбласти, 13);
	
	Для Каждого ЭлементСтруктуры Из Форма.мСтруктураМногострочныхРазделов Цикл
		ИмяГруппы = ЭлементСтруктуры.Ключ;
		СтруктураГруппы = Форма[ЭлементСтруктуры.Значение];
		
		Если СтруктураГруппы[0].Свойство(ИмяАктивногоРаздела) Тогда
			Возврат ИмяГруппы;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

&НаКлиенте
Процедура УдалитьСтроку(Команда)
	
	ТекТабличноеПоле = ЭтаФорма["ПолеТабличногоДокументаФормаОтчета"];
	
	ТекущаяОбласть = ТекТабличноеПоле.ТекущаяОбласть;
	ИмяГруппы      = РазделТекущейОбласти(ЭтаФорма, ТекущаяОбласть);
	
	Если ИмяГруппы = Неопределено
		// Дополнительно, для формы 1-цены приобретения.
		Или СтрНайти(ТекущаяОбласть.Имя, "_") = 0 Тогда
		
		Сообщение = Новый СообщениеПользователю;
		
		Сообщение.Текст = НСтр("ru='Не выбрана удаляемая строка многострочного раздела.'");
		
		Сообщение.Сообщить();
		
		Возврат;
		
	КонецЕсли;
	
	ТекстВопроса = НСтр("ru='Удалить выбранную строку?'");
	ОписаниеОповещения = Новый ОписаниеОповещения("УдалитьСтрокуЗавершение", ЭтотОбъект);	
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсключитьДанныеОбособленныхПодразделенийПриИзменении(Элемент) Экспорт 
	
	НачЗначениеОбособленногоПодразделения = ОбособленноеПодразделение;
	
	УстановитьДоступностьЭУВыбораОбособленныхПодразделений(ЭтаФорма);
	
	Если ИсключитьДанныеОбособленныхПодразделений Тогда
		Если НачЗначениеОбособленногоПодразделения <> ОбособленноеПодразделение Тогда
			СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация = Истина;
			ЗаполнитьСведенияОбОрганизацииНаСервере();
			СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация = Ложь;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьЭУВыбораОбособленныхПодразделений(Форма)
	Форма.ОбособленноеПодразделение = ?(НЕ Форма.ИсключитьДанныеОбособленныхПодразделений, Форма.ОбособленноеПодразделение, Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура ОбособленноеПодразделениеПриИзменении(Элемент) Экспорт 
	
	СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация = Истина;
	ЗаполнитьСведенияОбОрганизацииНаСервере();
	СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуКонтактнойИнформацииЗавершение(Результат, Параметры) Экспорт
	
	РегламентированнаяОтчетностьКлиент.ОбновитьАдресВТабличномДокументеСтатистическойОтчетности(Результат, Параметры.Область, СтруктураРеквизитовФормы);
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолеТабличногоДокументаФормаОтчетаПриИзмененииСодержимогоОбласти(Элемент, Область)
	Модифицированность = Истина;
	Если Область.Имя = "ДатаСоставленияОтчета" Тогда 
		ДатаПодписи = Область.Значение;
		ЗаполнитьСведенияОбОрганизацииНаКлиенте(Истина);
		Возврат;
	ИначеЕсли Область.Имя = "НомерКорректировки" Тогда 
		Если Область.Значение = 0 Тогда 
			СтруктураРеквизитовФормы.ВидДокумента = 0;
			НомерКорректировки = 0;
		Иначе 
			СтруктураРеквизитовФормы.ВидДокумента = 1;
			НомерКорректировки = Область.Значение;
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Если Область.СодержитЗначение И Область.ТипЗначения.СодержитТип(Тип("Число")) Тогда
		Если Область.Значение = 0 И Область.ТипЗначения.КвалификаторыЧисла.РазрядностьДробнойЧасти = 0 Тогда
			
			ФорматПредставленияНуля = РегламентированнаяОтчетностьКлиентСервер.ПолучитьПредставлениеНуляИзСтрокиФормата(Область.Формат);
			
			ОтображениеНуля = СокрЛП(Формат(0, РегламентированнаяОтчетностьКлиентСервер.ЗаменитьПредставлениеНуляВСтрокеФормата(Область.Формат, "ЧН=")));
			Если ПустаяСтрока(ОтображениеНуля) Тогда
				ОтображениеНуля = "0";
			КонецЕсли;
			ТипСтрокиЗаполнения = Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(СтрДлина(ОтображениеНуля), ДопустимаяДлина.Фиксированная));
			СтрокаЗаполнения = ТипСтрокиЗаполнения.ПривестиЗначение();
			
			Список = Новый СписокЗначений;
			Список.Добавить("ЧН=' '", "  <Пустое значение>    " + СтрокаЗаполнения);
			Список.Добавить("ЧН=" + ОтображениеНуля, "  Отображать как """ + ОтображениеНуля + """  ");
			
			НайденнаяСтрока = Список.НайтиПоЗначению(ФорматПредставленияНуля);
			
			ДополнительныеПараметры = Новый Структура("Область", Область);
			ОписаниеОповещения = Новый ОписаниеОповещения("ПолеТабличногоДокументаФормаОтчетаПриИзмененииСодержимогоОбластиЗавершение", ЭтотОбъект, ДополнительныеПараметры);
						
			// обход ошибок платформы: в тонком клиенте не работает ПоказатьВыборИзСписка (ПоказатьВыборИзМеню не работает в веб-клиенте 
			// и в событии ПриИзмененииСодержимогоОбласти табличного документа - где мы его и хотим использовать прежде всего)
			# Если ВебКлиент Тогда
			
				Если НайденнаяСтрока = Неопределено Тогда
					ПоказатьВыборИзСписка(ОписаниеОповещения, Список, Элемент);
				Иначе
					ПоказатьВыборИзСписка(ОписаниеОповещения, Список, Элемент, НайденнаяСтрока);
				КонецЕсли;
				
			#Иначе
				
				Список.ПоказатьВыборЭлемента(ОписаниеОповещения, "Выберите значение", Элемент);
					
			#КонецЕсли
			
			Возврат;
			
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПолеТабличногоДокументаФормаОтчетаПриИзмененииСодержимогоОбластиЗавершение(СписокЭлемент, ДополнительныеПараметры) Экспорт
	Область = ДополнительныеПараметры.Область;
	
	Если СписокЭлемент <> Неопределено  Тогда
		
		Область.Формат = РегламентированнаяОтчетностьКлиентСервер.ЗаменитьПредставлениеНуляВСтрокеФормата(Область.Формат, СписокЭлемент.Значение);
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Обновить(Команда)
	
	СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация = Истина;
	ЗаполнитьСведенияОбОрганизацииНаКлиенте();
	СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьОтчет(Команда)
	
	ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Внимание! Отчет будет очищен.%1Продолжить операцию?'"), Символы.ПС);
	ОписаниеОповещения = Новый ОписаниеОповещения("ОчиститьОтчетЗавершение", ЭтотОбъект);
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьОтчетЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Нет Тогда       
		Возврат;       
	Иначе       
		Очистить();        
	КонецЕсли;
	
КонецПроцедуры

// Процедура очищает содержимое редактируемых и вычисляемых
// ячеек табличного документа.
//
&НаКлиенте
Процедура Очистить() Экспорт
	
	ОчиститьТабличноеПолеНаСервере();
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьТабличноеПолеНаСервере()
	
	// Список ячеек, которые очищать не нужно.
	Перем СписокПоказателейНеПодлежащихОчистке;
	
	ВыбТабличноеПоле = ПолеТабличногоДокументаФормаОтчета;
	
	СписокПоказателейНеПодлежащихОчистке = Новый СписокЗначений;
	СписокПоказателейНеПодлежащихОчистке.Добавить(ВыбТабличноеПоле.Области["ПериодОтчета"].Значение,             "ПериодОтчета");
	СписокПоказателейНеПодлежащихОчистке.Добавить(ВыбТабличноеПоле.Области["ДатаСоставленияОтчета"].Значение,    "ДатаСоставленияОтчета");
	СписокПоказателейНеПодлежащихОчистке.Добавить(ВыбТабличноеПоле.Области["ОргНазв"].Значение,                  "ОргНазв");
	СписокПоказателейНеПодлежащихОчистке.Добавить(ВыбТабличноеПоле.Области["ОргАдрес"].Значение,                 "ОргАдрес");
	СписокПоказателейНеПодлежащихОчистке.Добавить(ВыбТабличноеПоле.Области["ОргКодОКПО"].Значение,               "ОргКодОКПО");
	СписокПоказателейНеПодлежащихОчистке.Добавить(ВыбТабличноеПоле.Области["ОргКодНазв"].Значение,               "ОргКодНазв");
	СписокПоказателейНеПодлежащихОчистке.Добавить(ВыбТабличноеПоле.Области["ОргКодНазв1"].Значение,              "ОргКодНазв1");
	СписокПоказателейНеПодлежащихОчистке.Добавить(ВыбТабличноеПоле.Области["ОргКодЗнач"].Значение,               "ОргКодЗнач");
	СписокПоказателейНеПодлежащихОчистке.Добавить(ВыбТабличноеПоле.Области["ОргКодЗнач1"].Значение,              "ОргКодЗнач1");
	СписокПоказателейНеПодлежащихОчистке.Добавить(ВыбТабличноеПоле.Области["ОргДолжностьИсп"].Значение,          "ОргДолжностьИсп");
	СписокПоказателейНеПодлежащихОчистке.Добавить(ВыбТабличноеПоле.Области["ОргТелефонИсп"].Значение,            "ОргТелефонИсп");
	СписокПоказателейНеПодлежащихОчистке.Добавить(ВыбТабличноеПоле.Области["ОргИсполнитель"].Значение,           "ОргИсполнитель");
	СписокПоказателейНеПодлежащихОчистке.Добавить(ВыбТабличноеПоле.Области["ОргАдресЭлектроннойПочты"].Значение, "ОргАдресЭлектроннойПочты");
	СписокПоказателейНеПодлежащихОчистке.Добавить(ВыбТабличноеПоле.Области["НомерКорректировки"].Значение,       "НомерКорректировки");
	
	ВыбТабличноеПоле.Очистить();
	ВыбТабличноеПоле.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет("ФормаОтчета2019Кв1_ФормаОтчета"));
	
	ПолеТабличногоДокументаФормаОтчета = ВыбТабличноеПоле;
	
	РегламентированнаяОтчетность.НачальныеОперацииСМногострочнымиБлоками(ЭтаФорма);
	
	Для каждого ЭлементСписка Из СписокПоказателейНеПодлежащихОчистке Цикл
		
		ВыбТабличноеПоле.Области[ЭлементСписка.Представление].Значение = ЭлементСписка.Значение;
		
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура АктивизироватьЯчейку(Ячейка) Экспорт
	
	ИмяПоляТабличногоДокумента = "ПолеТабличногоДокументаФормаОтчета";
	
	НайденнаяОбласть = ЭтаФорма[ИмяПоляТабличногоДокумента].Области.Найти(Ячейка.ИмяЯчейки);
	
	Если НЕ НайденнаяОбласть = Неопределено Тогда
		
		Элементы[ИмяПоляТабличногоДокумента].ТекущаяОбласть = НайденнаяОбласть;
		
	ИначеЕсли Ячейка.СтрокаПП <> Неопределено И ЗначениеЗаполнено(Ячейка.СтрокаПП) Тогда
		
		НайденнаяОбласть = ЭтаФорма[ИмяПоляТабличногоДокумента].Области.Найти(Ячейка.ИмяЯчейки + Ячейка.СтрокаПП);
		
		Если НЕ НайденнаяОбласть = Неопределено Тогда
			
			Элементы[ИмяПоляТабличногоДокумента].ТекущаяОбласть = НайденнаяОбласть;
			
		Иначе
			
			НайденнаяОбласть = ЭтаФорма[ИмяПоляТабличногоДокумента].Области.Найти(Ячейка.ИмяЯчейки + "_" + Ячейка.СтрокаПП);
			
			Если НЕ НайденнаяОбласть = Неопределено Тогда
				
				Элементы[ИмяПоляТабличногоДокумента].ТекущаяОбласть = НайденнаяОбласть;
				
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		НайденнаяОбласть = ЭтаФорма[ИмяПоляТабличногоДокумента].Области.Найти(Ячейка.ИмяЯчейки + "1");
		
		Если НЕ НайденнаяОбласть = Неопределено Тогда
			
			Элементы[ИмяПоляТабличногоДокумента].ТекущаяОбласть = НайденнаяОбласть;
			
		Иначе
			
			НайденнаяОбласть = ЭтаФорма[ИмяПоляТабличногоДокумента].Области.Найти(Ячейка.ИмяЯчейки + "_1");
			
			Если НЕ НайденнаяОбласть = Неопределено Тогда
				
				Элементы[ИмяПоляТабличногоДокумента].ТекущаяОбласть = НайденнаяОбласть;
				
			Иначе
				
				Элементы[ИмяПоляТабличногоДокумента].ТекущаяОбласть = ЭтаФорма[ИмяПоляТабличногоДокумента].Область(Ячейка.ИмяЯчейки);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьБланк(Команда)
	
	Отказ = Ложь;
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("Команда", Команда);
	ОписаниеОповещения = Новый ОписаниеОповещения("ПоказатьБланкЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередПечатьюРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьБланкЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;

	Команда = ДополнительныеПараметры.Команда;
		
	Если Команда <> Неопределено Тогда
		Печать(Команда.Имя);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Печать(ВидПечати, НеИзФормыОтчета = Ложь) Экспорт
	
	Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1. Формируется печатная форма...'"), ЭтаФорма.Заголовок), , , БиблиотекаКартинок.Печать);
	
	Если НЕ ПечатьНаСервере(ВидПечати) Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ОткрытьФормуПредварительногоПросмотра(ЭтаФорма, ВидПечати, Неопределено, СтруктураРеквизитовФормы.СписокПечатаемыхЛистов);
	
КонецПроцедуры

&НаСервере
Функция ПечатьНаСервере(ВидПечати)
	
	Если НЕ РегламентированнаяОтчетность.ПринтерДоступен() Тогда
		
		Сообщение = Новый СообщениеПользователю;
		
		Сообщение.Текст = НСтр("ru='Перед формированием печатных форм необходимо определить в системе принтер и задать его в качестве используемого по умолчанию!'");
		
		Сообщение.Сообщить();
		
		Возврат Ложь;
		
	КонецЕсли;
	
	ТабличныйДокумент = ЭтаФорма["ПолеТабличногоДокументаФормаОтчета"];
	
	СтруктураРеквизитовФормы.мПечатныеФормы.Очистить();
	
	ОбщиеРеквизитыРазделов = Новый Структура;
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("НаименованиеЛиста",  "Форма 11-ФСС");
	СтруктураПараметров.Вставить("ОриентацияЛиста",    "Ландшафт");
	СтруктураПараметров.Вставить("ИмяСтраницы",        "11ФСС");
	Структурапараметров.Вставить("ИмяОбластиТаблПоля", "ПолеТабличногоДокументаФормаОтчета");
	СтруктураПараметров.Вставить("ВидПечати",          ВидПечати);
	
	ПечатнаяФорма = РегламентированнаяОтчетность.НоваяСтраница();
	ПечатнаяФорма.Вывести(ПолеТабличногоДокументаФормаОтчета.ПолучитьОбласть("ОсновнаяЧасть1а"));
	ПечатнаяФорма.Вывести(ПолеТабличногоДокументаФормаОтчета.ПолучитьОбласть("ОсновнаяЧасть1б"));
	СтруктураРеквизитовФормы.мПечатныеФормы.Добавить(ПечатнаяФорма, "Форма 11-ФСС");
	
	ПечатнаяФорма = РегламентированнаяОтчетность.НоваяСтраница();
	ПечатнаяФорма.Вывести(ПолеТабличногоДокументаФормаОтчета.ПолучитьОбласть("ЗаголовокТаблицы"));
	ПечатнаяФорма.Вывести(ПолеТабличногоДокументаФормаОтчета.ПолучитьОбласть("ШапкаТаблицы"));
	Для Каждого Категория Из ПолучитьМассивКатегорий() Цикл 
		Секция = ПолеТабличногоДокументаФормаОтчета.ПолучитьОбласть("Секция" + Категория);
		Если ПечатнаяФорма.ПроверитьВывод(Секция) Тогда
			ПечатнаяФорма.Вывести(Секция);
		Иначе
			СтруктураРеквизитовФормы.мПечатныеФормы.Добавить(ПечатнаяФорма, "Форма 11-ФСС");
			ПечатнаяФорма = РегламентированнаяОтчетность.НоваяСтраница();
			ПечатнаяФорма.Вывести(ПолеТабличногоДокументаФормаОтчета.ПолучитьОбласть("ШапкаТаблицы"));
			ПечатнаяФорма.Вывести(Секция);
		КонецЕсли;
		
		ВерхМногострочнойЧасти = ПолеТабличногоДокументаФормаОтчета.Области["Секция" + Категория].Верх + 1;
		НизМногострочнойЧасти  = ПолеТабличногоДокументаФормаОтчета.Области["ДобавлениеСтроки" + Категория].Низ - 1;
		ТекущийВерх = ВерхМногострочнойЧасти;
		
		Пока ТекущийВерх <= НизМногострочнойЧасти Цикл
			ТекущаяОбластьМногострочнойЧасти = ПолеТабличногоДокументаФормаОтчета.ПолучитьОбласть(ТекущийВерх,,ТекущийВерх,);
			Если ПечатнаяФорма.ПроверитьВывод(ТекущаяОбластьМногострочнойЧасти) Тогда
				ПечатнаяФорма.Вывести(ТекущаяОбластьМногострочнойЧасти);
			Иначе
				СтруктураРеквизитовФормы.мПечатныеФормы.Добавить(ПечатнаяФорма, "Форма 11-ФСС");
				ПечатнаяФорма = РегламентированнаяОтчетность.НоваяСтраница();
				ПечатнаяФорма.Вывести(ПолеТабличногоДокументаФормаОтчета.ПолучитьОбласть("ШапкаТаблицы"));
				ПечатнаяФорма.Вывести(ТекущаяОбластьМногострочнойЧасти);
			КонецЕсли;
			ТекущийВерх = ТекущийВерх + 1;
		КонецЦикла;
	КонецЦикла;
	
	Подписи = ПолеТабличногоДокументаФормаОтчета.ПолучитьОбласть("Подписи");
	Если Не ПечатнаяФорма.ПроверитьВывод(Подписи) Тогда
		СтруктураРеквизитовФормы.мПечатныеФормы.Добавить(ПечатнаяФорма, "Форма 11-ФСС");
		ПечатнаяФорма = РегламентированнаяОтчетность.НоваяСтраница();
	КонецЕсли;
	ПечатнаяФорма.Вывести(Подписи);
	СтруктураРеквизитовФормы.мПечатныеФормы.Добавить(ПечатнаяФорма, "Форма 11-ФСС");
	
	РегламентированнаяОтчетностьКлиентСервер.ПроставлениеНомеровЛистов(ЭтаФорма, , СтруктураРеквизитовФормы.СписокПечатаемыхЛистов);
	Возврат Истина;
КонецФункции

&НаСервере
Процедура СформироватьСпискиВыбора()
	КатегорииКлассификатора = ПолучитьМассивКатегорий();
	МакетСоставаПоказателей = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет("Списки2019Кв1");
	СпискиВыбораПоКатегориям = Новый Соответствие;
	
	Массив = Новый Массив;
	Массив.Добавить(Тип("Строка"));
	Строка32 = Новый ОписаниеТипов(Массив, , Новый КвалификаторыСтроки(32, ДопустимаяДлина.Переменная));
	Строка512 = Новый ОписаниеТипов(Массив, , Новый КвалификаторыСтроки(512, ДопустимаяДлина.Переменная));
	
	Область = МакетСоставаПоказателей.Области["ОКОФ"];
	Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Строки Тогда
		ВерхОбласти = Область.Верх;
		НизОбласти = Область.Низ;
		Для НомСтр = ВерхОбласти По НизОбласти Цикл
			Категория = Лев(СокрЛП(МакетСоставаПоказателей.Область(НомСтр, 1).Текст), 3);
			Если КатегорииКлассификатора.Найти(Категория) = Неопределено Тогда 
				Продолжить;
			КонецЕсли;
			Если СпискиВыбораПоКатегориям[Категория] = Неопределено Тогда
				ТаблСписка = Новый ТаблицаЗначений;
				ТаблСписка.Колонки.Добавить("Код",Строка32,, МакетСоставаПоказателей.Область(ВерхОбласти, 1, ВерхОбласти, 1).ШиринаКолонки);
				ТаблСписка.Колонки.Добавить("Название",Строка512,, МакетСоставаПоказателей.Область(ВерхОбласти, 2, ВерхОбласти, 2).ШиринаКолонки);
				СпискиВыбораПоКатегориям.Вставить(Категория, ТаблСписка);
			КонецЕсли;
			ТаблСписка = СпискиВыбораПоКатегориям[Категория];
			
			НовСтрока = ТаблСписка.Добавить();
			НовСтрока.Код = СокрЛП(МакетСоставаПоказателей.Область(НомСтр, 1).Текст);
			НовСтрока.Название = СокрЛП(МакетСоставаПоказателей.Область(НомСтр, 2).Текст);
		КонецЦикла;
	КонецЕсли;
	
	СвойстваПоказателей.Очистить();
	Для Каждого КЗ Из СпискиВыбораПоКатегориям Цикл 
		РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П0" + КЗ.Ключ + "00000002", , , , СпискиВыбораПоКатегориям[КЗ.Ключ]);
	КонецЦикла;
	
	Область = МакетСоставаПоказателей.Области["ПричиныЛиквидации"];
	Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Строки Тогда
		ВерхОбласти = Область.Верх;
		НизОбласти = Область.Низ;
		ТаблСписка = Новый ТаблицаЗначений;
		ТаблСписка.Колонки.Добавить("Код",Строка32,, МакетСоставаПоказателей.Область(ВерхОбласти, 1, ВерхОбласти, 1).ШиринаКолонки);
		ТаблСписка.Колонки.Добавить("Название",Строка512,, МакетСоставаПоказателей.Область(ВерхОбласти, 2, ВерхОбласти, 2).ШиринаКолонки);
		Для НомСтр = ВерхОбласти По НизОбласти Цикл
			НовСтрока = ТаблСписка.Добавить();
			НовСтрока.Код = СокрЛП(МакетСоставаПоказателей.Область(НомСтр, 1).Текст);
			НовСтрока.Название = СокрЛП(МакетСоставаПоказателей.Область(НомСтр, 2).Текст);
		КонецЦикла;
		Для Каждого КЗ Из СпискиВыбораПоКатегориям Цикл 
			РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П0" + КЗ.Ключ + "00000011", , , , ТаблСписка);
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВвестиПоказатель(Элемент, Область, КодПоказателя, Знач ЭтоСумма, Знач ТекстВыбора, ТаблицаВыбора, СтандартнаяОбработка, КолонкаПоиска = "Код") Экспорт
	
	Если ТаблицаВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	ИсходноеЗначение = ?(ТипЗнч(Область.Значение) = Тип("Строка"), СокрЛП(Область.Значение), Область.Значение);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Заголовок",          ТекстВыбора);
	ПараметрыФормы.Вставить("ТаблицаЗначений",    ТаблицаВыбора);
	ПараметрыФормы.Вставить("СтруктураДляПоиска", Новый Структура(КолонкаПоиска, Формат(ИсходноеЗначение, "ЧГ=")));
	Если НЕ ЗначениеЗаполнено(ТаблицаВыбора[1].Название) Тогда
		ПараметрыФормы.Вставить("ОтключитьВидимостьКолонкиНазвание", Истина);
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура("Область", Область);
	ОписаниеОповещения = Новый ОписаниеОповещения("ВвестиПоказательЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ОткрытьФорму("Обработка.ОбщиеОбъектыРеглОтчетности.Форма.ФормаВыбораЗначенияИзТаблицы", ПараметрыФормы, ЭтаФорма,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ВвестиПоказательЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Область = ДополнительныеПараметры.Область;
	Область.Значение = РезультатВыбора["Код"];
	ОСм = ПолеТабличногоДокументаФормаОтчета.Области.Найти(СтрЗаменить(Область.Имя, "0002_", "0001_"));
	Если ОСм.Имя <> Область.Имя Тогда 
		Если ЗначениеЗаполнено(Область.Значение) Тогда 
			ОСм.Значение = РезультатВыбора["Название"];
		Иначе
			ОСм.Значение = "";
		КонецЕсли;
	КонецЕсли;
	
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайла(Команда)
	
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Загрузка из xml будет реализована в следующих версиях'"));
	Возврат;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузитьИзФайлаЗавершение", ЭтотОбъект);
	
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередЗагрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура Выгрузить(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьЗавершение", ЭтотОбъект);

	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайлаЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ЗагрузитьИзФайлаОтчет();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайлаОтчет() Экспорт
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузитьИзФайлаОтчетЗавершение", ЭтотОбъект);
	
	Если Модифицированность Тогда
		СохранитьНаКлиенте(,ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайлаОтчетЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	РегламентированнаяОтчетностьЗагрузкаКлиент.ЗагрузитьИзФайлаОтчет(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Функция ЗагрузкаОтчетаИзФайла(ДанныеДляЗагрузки) Экспорт
	
	Если Модифицированность Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = СтрШаблон(НСтр("ru='Отчет ""%1"" не сохранен.'"), ЭтотОбъект.Заголовок);
		Сообщение.Сообщить();
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ ЗагрузкаОтчетаИзФайлаНаСервере(ДанныеДляЗагрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
		
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция ЗагрузкаОтчетаИзФайлаНаСервере(ДанныеДляЗагрузки)
	
	ПараметрыОтчета = СформироватьСтруктуруПараметров();
	
	ДеревоДляЗагрузки = РегламентированнаяОтчетность.ПолучитьДеревоВыгрузки(ЭтаФорма, "СхемаВыгрузкиXML2019Кв1");
	
	Если НЕ РегламентированнаяОтчетностьЗагрузка.ЗагрузкаОтчетаИзФайла(
		ЭтотОбъект, ПараметрыОтчета, ДанныеДляЗагрузки, ДеревоДляЗагрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура ВыгрузитьЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьИзФормыПослеСохраненияЗавершение", ЭтотОбъект);
	Если Модифицированность Тогда
		СохранитьНаКлиенте(, ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьИзФормыПослеСохраненияЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ПараметрыВыгрузки = Неопределено;
	ТекстВыгрузки = Неопределено;
	Если НЕ УниверсальнаяВыгрузкаXMLПроверкаВозможностиВыгрузкиНаСервере(ТекстВыгрузки, ПараметрыВыгрузки) Тогда
		ТекстВопроса = НСтр("ru='В ходе выгрузки были найдены ошибки.'");
		КнопкиВопроса = Новый СписокЗначений;
		КнопкиВопроса.Добавить(КодВозвратаДиалога.Да, "Продолжить выгрузку");
		КнопкиВопроса.Добавить(КодВозвратаДиалога.Нет, "Показать ошибки");
		ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьИзФормыЗавершение", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, КнопкиВопроса, , КодВозвратаДиалога.Нет);
	Иначе
		ВыгрузитьОтчет();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьИзФормыЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ВыгрузитьОтчет(Истина);
	Иначе
		СпДокОсн = Новый СписокЗначений;
		СпДокОсн.Добавить(СтруктураРеквизитовФормы.мСохраненныйДок);
		ОшибкиОтчета = Новый Массив;
		РегламентированнаяОтчетностьКлиент.ПроверитьРегламентированныеОтчеты(СпДокОсн, ОшибкиОтчета);
		РегламентированнаяОтчетностьКлиент.ОткрытьФормуНавигацииПоОшибкамВыгрузки(ОшибкиОтчета);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузку(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьВыгрузкуЗавершение", ЭтотОбъект);

	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
		
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузкуЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПроверитьВыгрузкуОтчета();
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузкуОтчета()
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьВыгрузкуОтчетаЗавершение", ЭтотОбъект);
	
	Если НЕ ЗначениеЗаполнено(СтруктураРеквизитовФормы.Организация) Тогда
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Организация не выбрана! Выгрузка невозможна.'");
		Сообщение.Сообщить();
		Возврат;
		
	КонецЕсли;
	
	Если Модифицированность Тогда
		СохранитьНаКлиенте(,ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура ПроверитьВыгрузкуОтчетаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ФормаВыгрузкиРеглОтчета = ПолучитьФорму("Документ.ВыгрузкаРегламентированныхОтчетов.Форма.ФормаДокумента", , ЭтаФорма);
	
	СпДокОсн = Новый СписокЗначений;
	СпДокОсн.Добавить(СтруктураРеквизитовФормы.мСохраненныйДок);
	
	ФормаВыгрузкиРеглОтчета.Проверить(СпДокОсн);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьОтчет(ВыгружатьСОшибками = Ложь) Экспорт
	
	ДополнительныеПараметры = Новый Структура("ВыгружатьСОшибками", ВыгружатьСОшибками);
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьОтчетЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	Если Модифицированность Тогда
		СохранитьНаКлиенте(, ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура ВыгрузитьОтчетЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ФормаВыгрузкиРеглОтчета = ПолучитьФорму("Документ.ВыгрузкаРегламентированныхОтчетов.Форма.ФормаДокумента", , ЭтаФорма);
	
	СпДокОсн = Новый СписокЗначений;
	СпДокОсн.Добавить(СтруктураРеквизитовФормы.мСохраненныйДок);
	
	ФормаВыгрузкиРеглОтчета.СформироватьИЗаписать(СпДокОсн,,,,,,,,,ДополнительныеПараметры.ВыгружатьСОшибками);
	
КонецПроцедуры

&НаСервере
Функция ПроверитьПоказатели() Экспорт
	
	ДеревоВыгрузки = РегламентированнаяОтчетность.ПолучитьДеревоВыгрузки(ЭтаФорма, "СхемаВыгрузкиXML2019Кв1");
	ПараметрыВыгрузки = СформироватьСтруктуруПараметров();
	КоллекцияСписковВыбора = "";
	Если НЕ ПроверитьВозможностьВыгрузки(ПараметрыВыгрузки, ДеревоВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	ЗаполнитьДанными(ДеревоВыгрузки, ПараметрыВыгрузки);
	Если НЕ РегламентированнаяОтчетность.ПроверитьДанные(ЭтаФорма, ДеревоВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция ТекущийФорматВыгрузки(Организация)
	
	Возврат РегламентированнаяОтчетность.ФорматВыгрузкиСтатистическойОтчетностиВЭлектронномВиде(Организация);
	
КонецФункции

&НаКлиенте
Функция УниверсальнаяВыгрузка(ТекстВыгрузки = Неопределено, ПроверятьБлокировки = Истина, ИмяФайлаВыгрузки = "", ВыгружатьСОшибками = Ложь) Экспорт
	
	Перем ПараметрыВыгрузки;
	
	Если ТекущийФорматВыгрузки(СтруктураРеквизитовФормы.Организация) = Неопределено Тогда
		РегламентированнаяОтчетностьКлиент.ПоказатьФормуНастроекФорматаВыгрузкиСтатистическойОтчетностиВЭлектронномВиде(
			СтруктураРеквизитовФормы.Организация, Ложь, Истина);
			
		Возврат "НеВыбранФормат";
	КонецЕсли;
	
	Если Модифицированность Тогда
		
		Если СтрНайти(Заголовок, СтруктураРеквизитовФормы.СтрПериодОтчета) = 0 Тогда
			ТекстЗаголовка = Заголовок + " за " + СтруктураРеквизитовФормы.СтрПериодОтчета;
		Иначе
			ТекстЗаголовка = Заголовок;
		КонецЕсли;
		
		ОргСтр = " (" + СтруктураРеквизитовФормы.НаимОрганизации + ")";
		Если СтрНайти(Заголовок, ОргСтр) = 0 Тогда
			ТекстЗаголовка = ТекстЗаголовка + ОргСтр;
		КонецЕсли;
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Отчет """ + ТекстЗаголовка + """ не сохранен.";
		Сообщение.Сообщить();
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Возврат УниверсальнаяВыгрузкаНаСервере(ВыгружатьСОшибками, ТекстВыгрузки, ПараметрыВыгрузки, ИмяФайлаВыгрузки);
	
КонецФункции

&НаСервере
Функция УниверсальнаяВыгрузкаНаСервере(ВыгружатьСОшибками, ТекстВыгрузки, ПараметрыВыгрузки, ИмяФайлаВыгрузки)
	Если НЕ ВыгружатьСОшибками И НЕ УниверсальнаяВыгрузкаXMLПроверкаВозможностиВыгрузкиНаСервере(ТекстВыгрузки, ПараметрыВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ УниверсальнаяВыгрузкаXMLПроверкаДанныхНаСервере(ТекстВыгрузки, ПараметрыВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ИмяФайлаВыгрузки = ПараметрыВыгрузки.ИмяФайла;
	
	Возврат Истина;
КонецФункции

&НаСервере
Функция УниверсальнаяВыгрузкаXMLПроверкаВозможностиВыгрузкиНаСервере(ТекстВыгрузки, ПараметрыВыгрузки) Экспорт
	
	ПараметрыВыгрузки = СформироватьСтруктуруПараметров();
	ДеревоВыгрузки = РегламентированнаяОтчетность.ПолучитьДеревоВыгрузки(ЭтаФорма, "СхемаВыгрузкиXML2019Кв1");
	Если НЕ ПроверитьВозможностьВыгрузки(ПараметрыВыгрузки, ДеревоВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция УниверсальнаяВыгрузкаXMLПроверкаДанныхНаСервере(ТекстВыгрузки, ПараметрыВыгрузки) Экспорт
	
	Если ПараметрыВыгрузки = Неопределено Тогда 
		ПараметрыВыгрузки = СформироватьСтруктуруПараметров();
	КонецЕсли;
	ДеревоВыгрузки = РегламентированнаяОтчетность.ПолучитьДеревоВыгрузки(ЭтаФорма, "СхемаВыгрузкиXML2019Кв1");
	РегламентированнаяОтчетность.ИзменитьВерсиюФорматаСПроверкойСовместимостиШаблонов(ЭтотОбъект, "АтрибВыгрузкиXML2019Кв1", "ШаблонРосстата2019Кв1", ПараметрыВыгрузки);
	ЗаполнитьДанными(ДеревоВыгрузки, ПараметрыВыгрузки);
	Если НЕ РегламентированнаяОтчетность.ПроверитьДанные(ЭтаФорма, ДеревоВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ТекстВыгрузки = РегламентированнаяОтчетность.ВыгрузитьДеревоВXML(ДеревоВыгрузки, ПараметрыВыгрузки);
	КоллекцияСписковВыбора = "";
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция ПроверитьВозможностьВыгрузки(ПараметрыВыгрузки, ДеревоВыгрузки)
	
	СтатусПроверки = Истина;
	
	ИмяПоляТаблДокумента = "ПолеТабличногоДокументаФормаОтчета";
	
	Если ПустаяСтрока(ПараметрыВыгрузки.ОКПО) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма,
		"Не задан код ОКПО организации!",
		ИмяПоляТаблДокумента, "ОргКодОКПО");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ПустаяСтрока(ПараметрыВыгрузки.ОргНазв) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма,
		"Не задано наименование организации!",
		ИмяПоляТаблДокумента, "ОргНазв");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ПустаяСтрока(ПараметрыВыгрузки.ОргИсполнитель) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма,
		"Не указаны Ф.И.О. должностного лица, ответственного за предоставление статистической информации!",
		ИмяПоляТаблДокумента, "ОргИсполнитель");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ПустаяСтрока(ПараметрыВыгрузки.ОргДолжностьИсп) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма,
		"Не указана должность лица, ответственного за предоставление статистической информации!",
		ИмяПоляТаблДокумента, "ОргДолжностьИсп");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ПустаяСтрока(ПараметрыВыгрузки.ОргТелефонИсп) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма,
		"Не указан телефон должностного лица, ответственного за предоставление статистической информации!",
		ИмяПоляТаблДокумента, "ОргТелефонИсп");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ПустаяСтрока(ПараметрыВыгрузки.ОргЭлектроннаяПочта) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "Не указан адрес электронной почты!", ИмяПоляТаблДокумента, "ОргАдресЭлектроннойПочты");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Возврат СтатусПроверки;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьДанными(ДеревоВыгрузки, ПараметрыВыгрузки) Экспорт 
	
	РегламентированнаяОтчетность.ОбработатьУсловныеЭлементы(ЭтаФорма, ПараметрыВыгрузки, ДеревоВыгрузки); // формируем точную структуру XML-макета
	ЗаполнитьДаннымиУзел(ПараметрыВыгрузки, ДеревоВыгрузки); // заполняем дерево данными
	РегламентированнаяОтчетность.ОтсечьНезаполненныеНеобязательныеУзлыСтатистики(ДеревоВыгрузки);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДаннымиУзел(ПараметрыВыгрузки, Узел, НомерСтроки = Неопределено)
	
	СтрокиУзла = Новый Массив;
	Для Каждого Стр Из Узел.Строки Цикл
		СтрокиУзла.Добавить(Стр);
	КонецЦикла;
	
	Для Каждого Стр из СтрокиУзла Цикл
		
		Если ПустаяСтрока(Стр.ЗначениеПоУмолчанию) Тогда
			Если НЕ ПустаяСтрока(Стр.Ключ) Тогда
				ПолныйКодПоказателя = Стр.Ключ + ?(ЗначениеЗаполнено(НомерСтроки), "_" + Формат(НомерСтроки, "ЧГ="), "");
				ЗначениеПоказателя = Неопределено;
				Если ПараметрыВыгрузки.Свойство(ПолныйКодПоказателя, ЗначениеПоказателя) Тогда
					ФорматПредставленияНуля = Неопределено;
					Если ПараметрыВыгрузки.Свойство("ЧН" + ПолныйКодПоказателя, ФорматПредставленияНуля) Тогда
						РегламентированнаяОтчетность.ВывестиПоказательСтатистикиВXML(Стр, ЗначениеПоказателя, ФорматПредставленияНуля);
					Иначе
						РегламентированнаяОтчетность.ВывестиПоказательСтатистикиВXML(Стр, ЗначениеПоказателя);
					КонецЕсли;
				Иначе
					РегламентированнаяОтчетность.ВывестиПоказательСтатистикиВXML(Стр, "");
				КонецЕсли;
			Иначе
				Стр.Значение = "";
			КонецЕсли;
		ИначеЕсли Лев(Стр.ЗначениеПоУмолчанию, 1) = "&" Тогда
			РегламентированнаяОтчетность.ВывестиПоказательСтатистикиВXML(Стр, ПараметрыВыгрузки[Сред(Стр.ЗначениеПоУмолчанию, 2)]);
		Иначе
			Стр.Значение = Стр.ЗначениеПоУмолчанию;
			Если НЕ ПустаяСтрока(Стр.Ключ) Тогда
				ПолныйКодПоказателя = Стр.Ключ + ?(ЗначениеЗаполнено(НомерСтроки), "_" + Формат(НомерСтроки, "ЧГ="), "");
				ЗначениеПоказателя = Неопределено;
				Если ПараметрыВыгрузки.Свойство(ПолныйКодПоказателя, ЗначениеПоказателя) Тогда
					ФорматПредставленияНуля = Неопределено;
					Если ПараметрыВыгрузки.Свойство("ЧН" + ПолныйКодПоказателя, ФорматПредставленияНуля) Тогда
						РегламентированнаяОтчетность.ВывестиПоказательСтатистикиВXML(Стр, ЗначениеПоказателя, ФорматПредставленияНуля);
					Иначе
						РегламентированнаяОтчетность.ВывестиПоказательСтатистикиВXML(Стр, ЗначениеПоказателя);
					КонецЕсли;
				Иначе
					РегламентированнаяОтчетность.ВывестиПоказательСтатистикиВXML(Стр, "");
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если Стр.Тип = "С" ИЛИ Стр.Тип = "C" Тогда // учтем оба варианта: кириллицу и латиницу
			Если Стр.Многострочность Тогда
				НомСтр = 1;
				ПодчиненныйЭлемент = РегламентированнаяОтчетность.ПолучитьПервыйПодчиненныйУзелСЗаполненнымКлючом(Стр);
				КлючПодчиненногоЭлемента = ПодчиненныйЭлемент.Ключ;
				Пока РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(ПараметрыВыгрузки, КлючПодчиненногоЭлемента + "_" + Формат(НомСтр, "ЧГ=")) Цикл
					УзелСоответствующийСтроке = РегламентированнаяОтчетность.СкопироватьУзел(Узел, Стр);
					ЗаполнитьДаннымиУзел(ПараметрыВыгрузки, УзелСоответствующийСтроке, НомСтр);
					НомСтр = НомСтр + 1;
				КонецЦикла;
			Иначе
				ЗаполнитьДаннымиУзел(ПараметрыВыгрузки, Стр, НомерСтроки);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция СформироватьИмяФайла(ПараметрыВыгрузки, ДопАтрибуты)
	
	Перем ПолученноеЗначение;
	
	КодОКУД        = ДопАтрибуты.OKUD;
	КодФормы       = ДопАтрибуты.idf;
	Периодичность  = ДопАтрибуты.idp;
	КодОКПО        = ПараметрыВыгрузки.ОКПО;
	РасчетныйГод   = ПараметрыВыгрузки.РасчПериод;
	ОтчетныйПериод = ПараметрыВыгрузки.ОтчПериод;
	
	ПараметрыВыгрузки.Свойство("ОКФС", ПолученноеЗначение);
	КодОКФС = ПолученноеЗначение;
	ПараметрыВыгрузки.Свойство("ОКВЭД", ПолученноеЗначение);
	КодОКВЭД = СтрЗаменить(ПолученноеЗначение, ".", "-");
	
	// Преобразование кодов - составляющих имени файла.
	КодыИФ = Новый Структура;
	КодыИФ.Вставить("Документ",       СтруктураРеквизитовФормы.мСохраненныйДок);
	КодыИФ.Вставить("КодФормы",       КодФормы);
	КодыИФ.Вставить("Периодичность",  Периодичность);
	КодыИФ.Вставить("ОтчетныйПериод", ОтчетныйПериод);
	КодыИФ.Вставить("ДатаВыгрузки",   "");
	
	РегламентированнаяОтчетность.КодыДляИмениФайлаВФорматеВыгрузки(КодыИФ);
	
	// Формирование имени файла, в зависимости
	// от формата выгрузки статотчетности.
	Если ПустаяСтрока(КодыИФ.ДатаВыгрузки) Тогда // "старый" формат
		ИмяФайлаXML = КодОКУД + "_"
		+ КодФормы + "_"
		+ Периодичность + "_"
		+ КодОКПО + "_"
		+ РасчетныйГод + "_"
		+ ОтчетныйПериод
		+ ?(ПустаяСтрока(КодОКФС), "", "_" + КодОКФС)
		+ ?(ПустаяСтрока(КодОКВЭД), "", "_" + КодОКВЭД) + ".xml";
	Иначе										 // "новый" формат
		ИмяФайлаXML = КодОКУД + "_"
		+ КодыИФ.КодФормы + "_"
		+ КодыИФ.Периодичность + "_"
		+ КодОКПО + "_"
		+ РасчетныйГод + "_"
		+ КодыИФ.ОтчетныйПериод + "__"
		+ КодыИФ.ДатаВыгрузки + ".xml";
	КонецЕсли;
	
	Возврат ИмяФайлаXML;
	
КонецФункции

&НаСервере
Функция СформироватьСтруктуруПараметров() Экспорт 
	
	Перем ПолученноеЗначение;
	
	РегламентированнаяОтчетность.СформироватьСтруктуруПоказателей(ЭтаФорма);
	ТабДокумент = мДанныеОтчета.ПолеТабличногоДокументаФормаОтчета;
	ДопАтрибуты = РегламентированнаяОтчетность.СформироватьСтруктуруДопАтрибутов(ЭтаФорма.ИмяФормы, "АтрибВыгрузкиXML2019Кв1");
	
	СтрокаСведений = "ФИОРук";
	СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(СтруктураРеквизитовФормы.Организация, СтруктураРеквизитовФормы.мСохраненныйДок.ДатаПодписи, СтрокаСведений);
	
	ПараметрыВыгрузки = Новый Структура;
	
	ДопАтрибуты.Свойство("code", ПолученноеЗначение);
	ПараметрыВыгрузки.Вставить("КодШаблона", ПолученноеЗначение);
	ДопАтрибуты.Свойство("idf", ПолученноеЗначение);
	ПараметрыВыгрузки.Вставить("КодФормы", ПолученноеЗначение);
	ДопАтрибуты.Свойство("shifr", ПолученноеЗначение);
	ПараметрыВыгрузки.Вставить("ШифрФормы", ПолученноеЗначение);
	ДопАтрибуты.Свойство("version", ПолученноеЗначение);
	ПараметрыВыгрузки.Вставить("ВерсияШаблона", ПолученноеЗначение);
	ДопАтрибуты.Свойство("format_version", ПолученноеЗначение);
	ПараметрыВыгрузки.Вставить("ВерсияФормата", ПолученноеЗначение);
	
	ОтчПериод  = "17";
	РасчПериод = Формат(Год(СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания),"ЧГ=0");
	
	ПараметрыВыгрузки.Вставить("ОКПО", СокрЛП(ТабДокумент.ОргКодОКПО));
	ПараметрыВыгрузки.Вставить("ОтчПериод", СокрЛП(ОтчПериод));
	ПараметрыВыгрузки.Вставить("РасчПериод", СокрЛП(РасчПериод));
	ПараметрыВыгрузки.Вставить("ОргНазв", СокрЛП(ТабДокумент.ОргНазв));
	ПараметрыВыгрузки.Вставить("ОргДиректор", СокрЛП(СведенияОбОрганизации.ФИОРук));
	ПараметрыВыгрузки.Вставить("ОргДолжностьИсп", СокрЛП(ТабДокумент.ОргДолжностьИсп));
	ПараметрыВыгрузки.Вставить("ОргИсполнитель", СокрЛП(ТабДокумент.ОргИсполнитель));
	ПараметрыВыгрузки.Вставить("ОргТелефонИсп", СокрЛП(ТабДокумент.ОргТелефонИсп));
	ПараметрыВыгрузки.Вставить("ОргЭлектроннаяПочта", СокрЛП(ТабДокумент.ОргАдресЭлектроннойПочты));
	
	Индексы = Новый Соответствие;
	Для Каждого КЗ Из ТабДокумент Цикл 
		Если СтрНайти(КЗ.Ключ, "00000002_") > 0 Тогда 
			ДОИ = СтрЗаменить(КЗ.Ключ, "00000002_", "00000012_");
			
			Если ЗначениеЗаполнено(КЗ.Значение) Тогда 
				НомСтр = Сред(КЗ.Ключ, 3, 3);
				Если Индексы[НомСтр] = Неопределено Тогда 
					Индексы.Вставить(НомСтр, 0);
				КонецЕсли;
				Индексы[НомСтр] = Индексы[НомСтр] + 1;
				ТабДокумент.Вставить(ДОИ, Индексы[НомСтр]);
			Иначе
				ТабДокумент.Вставить(ДОИ, 0);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	// Преобразование выгружаемых атрибутов, в соответствии
	// с форматом выгрузки статотчетности.
	ДопАтрибуты.Свойство("idp", ПолученноеЗначение);
	ПараметрыВыгрузки.Вставить("КодПериодичности", Число(СокрЛП(ПолученноеЗначение)));
	ПараметрыВыгрузки.Вставить("Документ", СтруктураРеквизитовФормы.мСохраненныйДок);
	
	РегламентированнаяОтчетность.АтрибутыВФорматеВыгрузки(ПараметрыВыгрузки);
	
	ПараметрыВыгрузки.Вставить("ИмяФайла", СформироватьИмяФайла(ПараметрыВыгрузки, ДопАтрибуты));
	
	ПараметрыВыгрузки.Вставить("ИмяКлючевогоУзлаСодержательнойЧасти", "row");
	
	Возврат ПараметрыВыгрузки;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ СТЫКОВКИ С СЕРВИСОМ СДАЧИ ОТЧЕТНОСТИ ЧЕРЕЗ ПРЕДСТАВИТЕЛЯ

&НаКлиенте
Процедура ОтправитьЧерезПредставителя(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОтправитьЧерезПредставителяЗавершение", ЭтотОбъект);

	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьЧерезПредставителяЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ПриНажатииНаКнопкуОтправкиЧерезПредставителяВРегламентированномОтчете(ЭтаФорма, "ФСГС");
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВИнтернете(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьВИнтернетеЗавершение", ЭтотОбъект);

	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
		
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВИнтернетеЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ПроверитьВИнтернете(ЭтаФорма, "ФСГС");
	
КонецПроцедуры

&НаКлиенте
Процедура Расшифровать(Команда)
	ПараметрыОтчета = Новый Структура();
	ПараметрыОтчета.Вставить("Организация",                         СтруктураРеквизитовФормы.Организация);
	ПараметрыОтчета.Вставить("мДатаНачалаПериодаОтчета",            СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
	ПараметрыОтчета.Вставить("мДатаКонцаПериодаОтчета",             СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	ПараметрыОтчета.Вставить("АдресВременногоХранилищаРасшифровки", СтруктураРеквизитовФормы.АдресВременногоХранилищаРасшифровки);
	
	ИДИменПоказателей = Новый Массив();
	ИДИменПоказателей.Добавить(Элементы.ПолеТабличногоДокументаФормаОтчета.ТекущаяОбласть.Имя);
	
	ЭтаФормаИмя = ЭтаФорма.ИмяФормы;
	Если СтрЧислоВхождений(ЭтаФормаИмя, "ВнешнийОтчет.") > 0 Тогда
		ЭтаФормаИмя = СтрЗаменить(ЭтаФормаИмя, "ВнешнийОтчет.", "");
	ИначеЕсли СтрЧислоВхождений(ЭтаФормаИмя, "Отчет.") > 0 Тогда
		ЭтаФормаИмя = СтрЗаменить(ЭтаФормаИмя, "Отчет.", "");
	КонецЕсли;
	ИДОтчета = Лев(ЭтаФормаИмя, СтрНайти(ЭтаФормаИмя, ".Форма.") - 1);
	ИДРедакцииОтчета = Сред(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, ".Форма.") + 7);
	
	РегламентированнаяОтчетностьКлиент.ОткрытьРасшифровкуОтчета(ИДОтчета, ИДРедакцииОтчета, ИДИменПоказателей, ПараметрыОтчета);
КонецПроцедуры

&НаКлиенте
Процедура НастроитьЗаполнение(Команда)
	РегламентированнаяОтчетностьКлиент.НастроитьЗаполнение(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура НастроитьЗаполнениеТекущегоПоказателя(Команда)
	РегламентированнаяОтчетностьКлиент.НастроитьЗаполнениеТекущегоПоказателя(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЦветФонаЯчейкиНаКлиенте(ИмяЯчейки = Неопределено, ВариантЗаполнения = Неопределено, ИмяТекущейСтраницыПанели = Неопределено) Экспорт
	
	УстановитьЦветФонаЯчейки(ЭтаФорма, ИмяЯчейки, ВариантЗаполнения, ИмяТекущейСтраницыПанели);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЦветФонаЯчейкиНаСервере(ИмяЯчейки = Неопределено, ВариантЗаполнения = Неопределено, ИмяТекущейСтраницыПанели = Неопределено) Экспорт
	
	УстановитьЦветФонаЯчейки(ЭтаФорма, ИмяЯчейки, ВариантЗаполнения, ИмяТекущейСтраницыПанели);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УстановитьЦветФонаЯчейки(Форма, ИмяЯчейки = Неопределено, ВариантЗаполнения = Неопределено, ИмяТекущейСтраницыПанели = Неопределено) Экспорт
	
	Перем ЦветФона;
	Перем Комментарий;
	
	// Не нужно разукрашивать табличные поля, если открывается без открытия формы (например печать или просмотр)
	Если Форма.СтруктураРеквизитовФормы.мБезОткрытияФормы ИЛИ Форма.СтруктураРеквизитовФормы.мРежимПечати Тогда
		Возврат;
	КонецЕсли;
	
	Если ИмяЯчейки <> Неопределено Тогда
		// устанавливаем цвет фона конкретной ячейки
		
		ИмяПоляТаблДокумента = "ПолеТабличногоДокументаФормаОтчета";
		
		Ключ = "_" + ВариантЗаполнения;
		Форма.мСтруктураЦветовРаскраски.Свойство(Ключ, ЦветФона);
		
		// КодПоказателяПоСтруктуре
		ЗначениеВКвадратах = РегламентированнаяОтчетностьКлиентСервер.ОбластьЯвляетсяЯчейкойСоставногоПоля(Форма, ИмяЯчейки);
		
		Если ВариантЗаполнения = 4 ИЛИ ВариантЗаполнения = 5 Тогда
			
			Если ЗначениеВКвадратах Тогда
				// если ЗНАЧЕНИЕ КВАДРАТИЧНОЕ
				РегламентированнаяОтчетностьКлиентСервер.СвойстваГрупповыхЗначений(Форма, ИмяЯчейки, "УстановитьЗащиту");
			Иначе
				Форма[ИмяПоляТаблДокумента].Области[ИмяЯчейки].Защита = Истина;
			КонецЕсли;
			
		Иначе
			
			Если ЗначениеВКвадратах Тогда
				// если ЗНАЧЕНИЕ КВАДРАТИЧНОЕ
				РегламентированнаяОтчетностьКлиентСервер.СвойстваГрупповыхЗначений(Форма, ИмяЯчейки, "СнятьЗащиту");
			Иначе
				Форма[ИмяПоляТаблДокумента].Области[ИмяЯчейки].Защита = Ложь;
			КонецЕсли;
			
		КонецЕсли;
		
		// установим цвет ячейки
		Если ЗначениеВКвадратах Тогда
			РегламентированнаяОтчетностьКлиентСервер.СвойстваГрупповыхЗначений(Форма, ИмяЯчейки, "ПроставитьЦветРаскраски", ЦветФона);
		Иначе
			Форма[ИмяПоляТаблДокумента].Области[ИмяЯчейки].ЦветФона = ЦветФона;
		КонецЕсли;
		
	Иначе
		// устанавливаем цвет фона всех автозаполняемых ячеек активной страницы
		
		ТаблицаВариантыЗаполнения = РегламентированнаяОтчетностьВызовСервера.ПолучитьТаблицуВариантовЗаполненияНаСервере(Форма, ИмяТекущейСтраницыПанели);
		
		Если ТаблицаВариантыЗаполнения = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Для Каждого Строка Из ТаблицаВариантыЗаполнения Цикл
			ИмяПоказателя            = Строка.КодПоказателя;
			ВариантЗаполнения        = Строка.ВариантЗаполнения;
			Комментарий              = Строка.Комментарий;
			КодПоказателяПоСтруктуре = Строка.КодПоказателяПоСтруктуре;
			
			КолвоСтрокВМногострочнойЧасти = РегламентированнаяОтчетностьКлиентСервер.ПоказательВходитВМногострочнуюЧасть(Форма, ИмяПоказателя);
			
			Если КолвоСтрокВМногострочнойЧасти > 0 Тогда
				Многострочность = Истина;
				БазоваяЧасть = ИмяПоказателя;
				ОписанияБлоков = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСвойствоРаздела(Форма, ИмяТекущейСтраницыПанели, "МногострочностьВРазделе");
				
				Если ТипЗнч(ОписанияБлоков) = Тип("Число") Тогда
					ВБлокеВсеПоказателиЗаполняются = Истина;
				ИначеЕсли ТипЗнч(ОписанияБлоков) = Тип("ДанныеФормыКоллекция") Тогда
					ИмяГруппы = Сред(ИмяПоказателя, 1, 11);
					ВБлокеВсеПоказателиЗаполняются = НЕ ОписанияБлоков.НайтиСтроки(Новый Структура("ИдГруппы", ИмяГруппы))[0].НезаполняемыеПоказателиЕсть;
				КонецЕсли;
				
			Иначе
				Многострочность = Ложь;
				ВБлокеВсеПоказателиЗаполняются = Истина;
				КолвоСтрокВМногострочнойЧасти = 1;
			КонецЕсли;
			
			Для Инд = 1 по КолвоСтрокВМногострочнойЧасти Цикл
				
				Если Многострочность Тогда
					ИмяПоказателя = БазоваяЧасть + "_" + Формат(Инд, "ЧГ=0");
				КонецЕсли;
				
				ТекОбластьЯчеек = Форма.ПолеТабличногоДокументаФормаОтчета.Области[ИмяПоказателя];
				Если (Не ПустаяСтрока(Комментарий)) ИЛИ (Не ПустаяСтрока(ТекОбластьЯчеек.Примечание.Текст)) Тогда
					ТекОбластьЯчеек.Примечание.Текст = Комментарий;
				КонецЕсли;
				
				Ключ = "_" + ВариантЗаполнения;
				Форма.мСтруктураЦветовРаскраски.Свойство(Ключ, ЦветФона);
				
				ЗначениеВКвадратах = ?(ПустаяСтрока(КодПоказателяПоСтруктуре), Ложь, Истина);
				
				Если ВариантЗаполнения = 4 ИЛИ ВариантЗаполнения = 5 Тогда
					
					Если ЗначениеВКвадратах Тогда
						// если ЗНАЧЕНИЕ КВАДРАТИЧНОЕ
						РегламентированнаяОтчетностьКлиентСервер.СвойстваГрупповыхЗначений(Форма, ИмяПоказателя, "УстановитьЗащиту");
					Иначе
						Форма.ПолеТабличногоДокументаФормаОтчета.Области[ИмяПоказателя].Защита = Истина;
					КонецЕсли;
					
				Иначе
					
					Если ЗначениеВКвадратах Тогда
						// если ЗНАЧЕНИЕ КВАДРАТИЧНОЕ
						РегламентированнаяОтчетностьКлиентСервер.СвойстваГрупповыхЗначений(Форма, ИмяПоказателя, "СнятьЗащиту");
					Иначе
						Форма.ПолеТабличногоДокументаФормаОтчета.Области[ИмяПоказателя].Защита = Ложь;
					КонецЕсли;
				КонецЕсли;
				
				Если ЗначениеВКвадратах Тогда
					РегламентированнаяОтчетностьКлиентСервер.СвойстваГрупповыхЗначений(Форма, ИмяПоказателя, "ПроставитьЦветРаскраски", ЦветФона);
				Иначе
					Форма.ПолеТабличногоДокументаФормаОтчета.Области[ИмяПоказателя].ЦветФона = ЦветФона;
				КонецЕсли;
			КонецЦикла;
			
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьФорматВыводаВПоляхВвода(Форма, НаимРаздела = "") Экспорт
	
	Перем СтруктураГруппы;
	
	Если Форма.СтруктураРеквизитовФормы.ЕдиницаИзмерения = Форма.ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1 Тогда
		Форма.СтруктураРеквизитовФормы.мСтрокаФормата = "; ЧДЦ = " + Форма.СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧС = 0";
	ИначеЕсли Форма.СтруктураРеквизитовФормы.ЕдиницаИзмерения = Форма.ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1000 Тогда
		Форма.СтруктураРеквизитовФормы.мСтрокаФормата = "; ЧДЦ = " + Форма.СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧС = 3";
	ИначеЕсли Форма.СтруктураРеквизитовФормы.ЕдиницаИзмерения = Форма.ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1000000 Тогда
		Форма.СтруктураРеквизитовФормы.мСтрокаФормата = "; ЧДЦ = " + Форма.СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧС = 6";
	КонецЕсли;
	
	Для Каждого СтрПоказатели Из Форма.мТаблицаСоставПоказателей Цикл
		
		Если НЕ ПустаяСтрока(НаимРаздела) И НаимРаздела <> СтрПоказатели.ИмяПоляТаблДокумента Тогда
			Продолжить;
		КонецЕсли;
		
		КодПоказателя				= СокрП(СтрПоказатели.КодПоказателяПоСоставу);
		ПризнМногострочность		= СокрП(СтрПоказатели.ПризнМногострочности);
		КодПоказателяПоСтруктуре	= СокрП(СтрПоказатели.КодПоказателяПоСтруктуре);
		КодПоказателяПоФорме		= СокрП(СтрПоказатели.КодПоказателяПоФорме);
		ТипДанныхПоказателя			= СокрП(СтрПоказатели.ТипДанныхПоказателя);
		ИмяПоказателя				= ?(ПустаяСтрока(СтрПоказатели.КодПоказателяПоФорме), КодПоказателя, КодПоказателяПоФорме);
		
		Если ПустаяСтрока(КодПоказателя) ИЛИ КодПоказателя = "===" ИЛИ КодПоказателя = "###" ИЛИ Лев(КодПоказателя, 2) = "//" Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТипДанныхПоказателя = "Е" И ПустаяСтрока(КодПоказателяПоСтруктуре) Тогда
			ТекТабличноеПоле = Форма.ПолеТабличногоДокументаФормаОтчета;
			Если ПризнМногострочность <> "/" Тогда
				ФорматируемаяОбласть = ТекТабличноеПоле.Области[ИмяПоказателя];
				ДопустимыйЗнакПоказателя = ФорматируемаяОбласть.ТипЗначения.КвалификаторыЧисла.ДопустимыйЗнак;
				ЧислоЕЗнак = Форма.СтруктураРеквизитовФормы.мОписаниеТиповЧислоЕ;
				
				Если ДопустимыйЗнакПоказателя = ДопустимыйЗнак.Неотрицательный Тогда
					ЧислоЕЗнак = Новый ОписаниеТипов("Число",
					Новый КвалификаторыЧисла(ЧислоЕЗнак.КвалификаторыЧисла.Разрядность, ЧислоЕЗнак.КвалификаторыЧисла.РазрядностьДробнойЧасти, ДопустимыйЗнакПоказателя));
				КонецЕсли;
				ФорматируемаяОбласть.ТипЗначения = ЧислоЕЗнак;
				ФорматируемаяОбласть.Формат = "ЧЦ = " + ЧислоЕЗнак.КвалификаторыЧисла.Разрядность + Форма.СтруктураРеквизитовФормы.мСтрокаФормата;
			Иначе
				// определяем кол-во строк многострочного раздела и применяем процедуру форматирования к данной графе по всем строкам
				НСтр = 1;
				Пока ТекТабличноеПоле.Области.Найти(ИмяПоказателя + "_" + Формат(НСтр, "ЧГ=0")) <> Неопределено Цикл
					ФорматируемаяОбласть = ТекТабличноеПоле.Области[ИмяПоказателя + "_" + Формат(НСтр, "ЧГ=0")];
					ДопустимыйЗнакПоказателя = ФорматируемаяОбласть.ТипЗначения.КвалификаторыЧисла.ДопустимыйЗнак;
					ЧислоЕЗнак = Форма.СтруктураРеквизитовФормы.мОписаниеТиповЧислоЕ;
					Если ДопустимыйЗнакПоказателя = ДопустимыйЗнак.Неотрицательный Тогда
						ЧислоЕЗнак = Новый ОписаниеТипов("Число",
						Новый КвалификаторыЧисла(ЧислоЕЗнак.КвалификаторыЧисла.Разрядность, ЧислоЕЗнак.КвалификаторыЧисла.РазрядностьДробнойЧасти, ДопустимыйЗнакПоказателя));
					КонецЕсли;
					ФорматируемаяОбласть.ТипЗначения = ЧислоЕЗнак;
					ФорматируемаяОбласть.Формат = "ЧЦ = " + ЧислоЕЗнак.КвалификаторыЧисла.Разрядность + Форма.СтруктураРеквизитовФормы.мСтрокаФормата;
					НСтр = НСтр + 1;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьПодготовленныеДанные()
	
	Перем ТаблицаГруппы;
	Контейнер = РегламентированнаяОтчетность.ПолучитьДанныеАвтозаполненияСтатистическогоОтчета(ЭтаФорма);
	Если Контейнер = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ИдентификаторЗадания = Неопределено;
	ТекТабличноеПоле     = ЭтаФорма["ПолеТабличногоДокументаФормаОтчета"];
	ТекТабличноеПоле.Очистить();
	ТекТабличноеПоле.Вывести(
	ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет("ФормаОтчета2019Кв1_ФормаОтчета"));
	
	Для Каждого ПоказателиСтраницы Из Контейнер Цикл
		Если ТипЗнч(ПоказателиСтраницы.Значение) <> Тип("Структура") Тогда
			Продолжить;
		КонецЕсли;
		ПоказателиТаблПоле = РегламентированнаяОтчетность.КонвертированныеЗначенияПоказателейСтатистическойОтчетности(ЭтаФорма, ПоказателиСтраницы.Значение);
		Для Каждого Показатель Из ПоказателиТаблПоле Цикл
			ИмяПоказателя       = Показатель.Ключ;
			ЗначениеПоказателя  = Показатель.Значение;
			РегламентированнаяОтчетность.УстановитьЗначениеИФорматВПоле(ТекТабличноеПоле, ИмяПоказателя, ЗначениеПоказателя);
		КонецЦикла;
	КонецЦикла;
	
	СтруктураРеквизитовФормы.мАдресвФорматеДляВыгрузки = ПолеТабличногоДокументаФормаОтчета.Области.ОргАдрес.Значение;
	ПолеТабличногоДокументаФормаОтчета.Области.ОргАдрес.Значение =
	РегламентированнаяОтчетностьКлиентСервер.ПредставлениеАдресаВФормате9Запятых(СтруктураРеквизитовФормы.мАдресвФорматеДляВыгрузки);
	
	РегламентированнаяОтчетность.УстановитьЦветФорматДоступностьЯчеек(ЭтаФорма);
	Модифицированность = Истина;
	
	ЭтаФорма.Доступность = Истина;
	ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.ПолеТабличногоДокументаФормаОтчета, "НеИспользовать");
	
КонецПроцедуры

&НаСервере
Функция ЗаполнитьАвтоНаСервере()
	
	ПоказателиОтчета = Новый Структура();
	ЗаполнитьПоказателиОтчетаНаСервере(ПоказателиОтчета);
	
	ПараметрыОтчета = Новый Структура();
	ПараметрыОтчета.Вставить("Организации", Неопределено);
	ПараметрыОтчета.Вставить("ЗаполняетсяВЦеломПоОрганизации", Ложь);
	ПараметрыОтчета.Вставить("ЗаполняетсяПоКаждомуОП", Истина);
	ПараметрыОтчета.Вставить("Организация",                  СтруктураРеквизитовФормы.Организация);
	ПараметрыОтчета.Вставить("мДатаНачалаПериодаОтчета",     НачалоКвартала(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета));
	ПараметрыОтчета.Вставить("мДатаКонцаПериодаОтчета",      СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	ПараметрыОтчета.Вставить("Периодичность",                СтруктураРеквизитовФормы.мПериодичность);
	ПараметрыОтчета.Вставить("УникальныйИдентификаторФормы", ЭтаФорма.УникальныйИдентификатор);
	ПараметрыОтчета.Вставить("АдресВременногоХранилищаРасшифровки"); // Адрес временного хранилища, где размещена расшифровка результата автозаполнения.
	
	Контейнер = Новый Структура();
	Для каждого ЭлементСтруктуры Из ПоказателиОтчета Цикл
		Контейнер.Вставить(ЭлементСтруктуры.Ключ, РегламентированнаяОтчетность.КонвертированныеЗначенияПоказателейСтатистическойОтчетности(ЭтаФорма, ЭлементСтруктуры.Значение, Ложь));
	КонецЦикла;
	
	ЭтаФормаИмя = ЭтаФорма.ИмяФормы;
	Если СтрЧислоВхождений(ЭтаФормаИмя, "ВнешнийОтчет.") > 0 Тогда
		ЭтаФормаИмя = СтрЗаменить(ЭтаФормаИмя, "ВнешнийОтчет.", "");
	ИначеЕсли СтрЧислоВхождений(ЭтаФормаИмя, "Отчет.") > 0 Тогда
		ЭтаФормаИмя = СтрЗаменить(ЭтаФормаИмя, "Отчет.", "");
	КонецЕсли;
	ИДОтчета = Лев(ЭтаФормаИмя, СтрНайти(ЭтаФормаИмя, ".Форма.") - 1);
	ИДРедакцииОтчета = Сред(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, ".Форма.") + 7);
	
	Если СтруктураРеквизитовФормы.ИнформационнаяБазаФайловая Тогда
		АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
		РегламентированнаяОтчетностьПереопределяемый.ЗаполнитьОтчетВФоне(
		Новый Структура("ИДОтчета, ИДРедакцииОтчета, ПараметрыОтчета, Контейнер", ИДОтчета, ИДРедакцииОтчета, ПараметрыОтчета, Контейнер),
		АдресХранилища);
		РезультатВыполнения = Новый Структура("ЗаданиеВыполнено", Истина);
	Иначе
		РезультатВыполнения = ДлительныеОперации.ЗапуститьВыполнениеВФоне(
		УникальныйИдентификатор, 
		"РегламентированнаяОтчетностьПереопределяемый.ЗаполнитьОтчетВФоне",
		Новый Структура("ИДОтчета, ИДРедакцииОтчета, ПараметрыОтчета, Контейнер", ИДОтчета, ИДРедакцииОтчета, ПараметрыОтчета, Контейнер),
		НСтр("ru = 'Выполняется автоматическое заполнение отчета. Пожалуйста, подождите...'"));
		
		АдресХранилища       = РезультатВыполнения.АдресХранилища;
		ИдентификаторЗадания = РезультатВыполнения.ИдентификаторЗадания;
	КонецЕсли;
	
	Если РезультатВыполнения.ЗаданиеВыполнено Тогда
		ЗагрузитьПодготовленныеДанные();
	КонецЕсли;
	
	Возврат РезультатВыполнения;
	
КонецФункции

&НаКлиенте
Процедура Заполнить(Команда)
	ОтключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания");
	
	ЭтаФормаИмя = ЭтаФорма.ИмяФормы;
	Если СтрЧислоВхождений(ЭтаФормаИмя, "ВнешнийОтчет.") > 0 Тогда
		ЭтаФормаИмя = СтрЗаменить(ЭтаФормаИмя, "ВнешнийОтчет.", "");
	ИначеЕсли СтрЧислоВхождений(ЭтаФормаИмя, "Отчет.") > 0 Тогда
		ЭтаФормаИмя = СтрЗаменить(ЭтаФормаИмя, "Отчет.", "");
	КонецЕсли;
	ИДОтчета = Лев(ЭтаФормаИмя, СтрНайти(ЭтаФормаИмя, ".Форма.") - 1);
	ИДРедакцииОтчета = Сред(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, ".Форма.") + 7);
	
	ПараметрыОтчета = Новый Структура();
	ПараметрыОтчета.Вставить("Организация",      СтруктураРеквизитовФормы.Организация);
	ПараметрыОтчета.Вставить("Периодичность",    СтруктураРеквизитовФормы.мПериодичность);
	ПараметрыОтчета.Вставить("ИДРедакцииОтчета", ИДРедакцииОтчета);
	ПараметрыОтчета.Вставить("ИДОтчета", 		 ИДОтчета);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьЗавершение", ЭтотОбъект);
	СтандартнаяОбработкаПроверки = Истина;
	РегламентированнаяОтчетностьКлиентПереопределяемый.ПроверитьНастройкиАвтозаполненияОтчета(ПараметрыОтчета, ОписаниеОповещения, СтандартнаяОбработкаПроверки);
	Если СтандартнаяОбработкаПроверки Тогда 
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Ложь Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураРеквизитовФормы.ИнформационнаяБазаФайловая Тогда
		Состояние(НСтр("ru = 'Выполняется автоматическое заполнение отчета. Пожалуйста, подождите...'"));
	КонецЕсли;
	
	ЭтаФорма.Доступность = Ложь;
	ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.ПолеТабличногоДокументаФормаОтчета, "ФормированиеОтчета");
	РезультатВыполнения = ЗаполнитьАвтоНаСервере();
	Если НЕ РезультатВыполнения.ЗаданиеВыполнено Тогда
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
	КонецЕсли;
	
	Если Элементы.Расшифровать.Видимость Тогда
		Элементы.Расшифровать.Доступность = Истина;
	КонецЕсли;
	
	Если СтруктураРеквизитовФормы.ИнформационнаяБазаФайловая Тогда
		Состояние(НСтр("ru = 'Автоматическое заполнение выполнено.'"));
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеЗадания()
	
	Попытка
		Если НЕ ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
			ЭтаФорма.Доступность = Истина;
			ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.ПолеТабличногоДокументаФормаОтчета, "НеИспользовать");
		ИначеЕсли ЗаданиеВыполнено(ИдентификаторЗадания) Тогда
			ЗагрузитьПодготовленныеДанные();
		Иначе
			ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
			ПодключитьОбработчикОжидания(
			"Подключаемый_ПроверитьВыполнениеЗадания", 
			ПараметрыОбработчикаОжидания.ТекущийИнтервал, 
			Истина);
		КонецЕсли;
	Исключение
		ЭтаФорма.Доступность = Истина;
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.ПолеТабличногоДокументаФормаОтчета, "НеИспользовать");
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаданиеВыполнено(ИдентификаторЗадания)
	
	Возврат ДлительныеОперации.ЗаданиеВыполнено(ИдентификаторЗадания);
	
КонецФункции

#Область ПанельОтправкиВКонтролирующиеОрганы

&НаКлиенте
Процедура ОбновитьОтправку(Команда)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОбновитьОтправкуИзПанелиОтправки(ЭтаФорма, "ФСГС");
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаПротоколНажатие(Элемент)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьПротоколИзПанелиОтправки(ЭтаФорма, "ФСГС");
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьНеотправленноеИзвещение(Команда)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОтправитьНеотправленноеИзвещениеИзПанелиОтправки(ЭтаФорма, "ФСГС");
КонецПроцедуры

&НаКлиенте
Процедура ЭтапыОтправкиНажатие(Элемент)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьСостояниеОтправкиИзПанелиОтправки(ЭтаФорма, "ФСГС");
КонецПроцедуры

&НаКлиенте
Процедура КритическиеОшибкиОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьКритическиеОшибкиИзПанелиОтправки(ЭтаФорма, "ФСГС");
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаНаименованиеЭтапаНажатие(Элемент)
	
	ПараметрыИзменения = Новый Структура;
	ПараметрыИзменения.Вставить("Форма", ЭтаФорма);
	ПараметрыИзменения.Вставить("Организация", СтруктураРеквизитовФормы.Организация);
	ПараметрыИзменения.Вставить("КонтролирующийОрган",
		ПредопределенноеЗначение("Перечисление.ТипыКонтролирующихОрганов.ФСГС"));
	
	РегламентированнаяОтчетностьКлиент.ИзменитьСтатусОтправки(ПараметрыИзменения);
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ОтправитьВКонтролирующийОрган(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверкаВозможностиВыгрузкиРегламентированногоОтчетаПередОтправкой", ЭтотОбъект);
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередОтправкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаВозможностиВыгрузкиРегламентированногоОтчетаПередОтправкой(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОтправитьВКонтролирующийОрганЗавершение", ЭтотОбъект);
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьВКонтролирующийОрганЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ПриНажатииНаКнопкуОтправкиВКонтролирующийОрган(ЭтаФорма, "ФСГС");
	
КонецПроцедуры

&НаКлиенте
Процедура  ЗаписатьИЗакрыть(Команда)
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Форма", ЭтаФорма);
	Оповещение = Новый ОписаниеОповещения("ПослеСохраненияФормыЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	СохранитьНаКлиенте(, Оповещение);
КонецПроцедуры

&НаКлиенте
Процедура ПослеСохраненияФормыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	ДополнительныеПараметры.Форма.Закрыть();
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОткрытьПрисоединенныеФайлы(Команда)
	
	РегламентированнаяОтчетностьКлиент.СохранитьОтчетИОткрытьФормуПрисоединенныеФайлы(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийПриИзменении(Элемент)
	Модифицированность = Истина;
КонецПроцедуры

#Область ПроверкаКонтрольныеСоотношенияИзШаблона

&НаКлиенте
Процедура ПроверитьКонтрольныеСоотношенияИзШаблона(Команда)
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьКонтрольныеСоотношенияИзШаблонаЗавершение", ЭтотОбъект);
	Если Модифицированность Тогда
		СохранитьНаКлиенте(, ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьКонтрольныеСоотношенияИзШаблонаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	Если ТипЗнч(ОбработкаКС) = Тип("УправляемаяФорма") Тогда 
		Если ОбработкаКС.Окно <> Неопределено Тогда 
			ОбработкаКС.Закрыть();
		КонецЕсли;
		ОбработкаКС = Неопределено;
	КонецЕсли;
	
	РезультатВыполнения = ПроверитьКонтрольныеСоотношенияИзШаблонаВФоне();
	Если РезультатВыполнения.ЗаданиеВыполнено Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.ПолеТабличногоДокументаФормаОтчета, "НеИспользовать");
		РегламентированнаяОтчетностьКлиент.ВывестиКонтрольныеСоотношенияПоШаблону(ПолучитьИзВременногоХранилища(АдресХранилища), ОбработкаКС, ЭтаФорма);
	Иначе
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.ПолеТабличногоДокументаФормаОтчета, "ФормированиеОтчета");
		Элементы.ПолеТабличногоДокументаФормаОтчета.ОтображениеСостояния.Текст = НСтр("ru = 'Выполняется проверка контрольных соотношений из шаблона Росстата...'");
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеПроверкиКонтрольныхСоотношений", 1, Истина);
		ИдентификаторЗадания = РезультатВыполнения.ИдентификаторЗадания;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ПроверитьКонтрольныеСоотношенияИзШаблонаВФоне()
	МодульПроверки = ОбщегоНазначения.ОбщийМодуль("ИнтерпретаторКонтрольныхСоотношенийРосстата");
	Если МодульПроверки = Неопределено Тогда 
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Механизм проверки контрольных соотношений недоступен, обратитесь к администратору'"));
		Возврат Новый Структура("ЗаданиеВыполнено", Истина);
	КонецЕсли;
	АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
	
	ПараметрыПроверкиКонтрольныхСоотношений = Новый Структура;
	ПараметрыПроверкиКонтрольныхСоотношений.Вставить("ШаблонРосстата", "ШаблонРосстата2019Кв1");
	ПараметрыПроверкиКонтрольныхСоотношений.Вставить("Атрибуты", "АтрибВыгрузкиXML2019Кв1");
	ПараметрыПроверкиКонтрольныхСоотношений.Вставить("СхемаВыгрузки", "СхемаВыгрузкиXML2019Кв1");
	ПараметрыПроверкиКонтрольныхСоотношений.Вставить("ИмяФормы", ИмяФормы);
	ПараметрыПроверкиКонтрольныхСоотношений.Вставить("ПрошлыйПериод", Ложь);
	ПараметрыПроверкиКонтрольныхСоотношений.Вставить("ТекстВыгрузки", "");
	ПараметрыПроверкиКонтрольныхСоотношений.Вставить("Ссылка", СтруктураРеквизитовФормы.мСохраненныйДок);
	ПараметрыПроверкиКонтрольныхСоотношений.Вставить("ДоступноФормированиеТекстаВыгрузкиБезКонтекстаФормы", Ложь);
	ПараметрыПроверкиКонтрольныхСоотношений.Вставить("ТиповойСпособФормированияТекстаВыгрузки", Истина);
	ПараметрыПроверкиКонтрольныхСоотношений.Вставить("АдресХранилища", АдресХранилища);
	ПараметрыПроверкиКонтрольныхСоотношений.Вставить("ИдентификаторЗадания", Неопределено);
	
	Возврат МодульПроверки.ПроверитьКонтрольныеСоотношенияИзШаблона(ЭтотОбъект, ПараметрыПроверкиКонтрольныхСоотношений);
КонецФункции

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеПроверкиКонтрольныхСоотношений()
	Попытка
		Если НЕ ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
			ЭтаФорма.Доступность = Истина;
			ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.ПолеТабличногоДокументаФормаОтчета, "НеИспользовать");
		ИначеЕсли ЗаданиеВыполнено(ИдентификаторЗадания) Тогда
			ЭтаФорма.Доступность = Истина;
			ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.ПолеТабличногоДокументаФормаОтчета, "НеИспользовать");
			РегламентированнаяОтчетностьКлиент.ВывестиКонтрольныеСоотношенияПоШаблону(ПолучитьИзВременногоХранилища(АдресХранилища), ОбработкаКС, ЭтаФорма);
		Иначе
			ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.ПолеТабличногоДокументаФормаОтчета, "ФормированиеОтчета");
			Элементы.ПолеТабличногоДокументаФормаОтчета.ОтображениеСостояния.Текст = НСтр("ru = 'Выполняется проверка контрольных соотношений из шаблона Росстата...'");
			ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
			ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеПроверкиКонтрольныхСоотношений", ПараметрыОбработчикаОжидания.ТекущийИнтервал, Истина);
		КонецЕсли;
	Исключение
		ЭтаФорма.Доступность = Истина;
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.ПолеТабличногоДокументаФормаОтчета, "НеИспользовать");
		ВызватьИсключение;
	КонецПопытки;
КонецПроцедуры

#КонецОбласти


&НаКлиенте
Процедура ОткрытьФормуНастроек(Команда)
	
	ОткрытьФормуВыбораСтраниц("ВыбратьДляНастройки");
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораСтраниц(ВариантВыбора)
	
	мПараметры = Новый Структура;
	
	мПараметры.Вставить("ОтключитьАвтоРасчет", Ложь);
	мПараметры.Вставить("Автосохранение", Ложь);
	мПараметры.Вставить("СчетчикСтраниц", Ложь);
	мПараметры.Вставить("ПараметрыОтображенияСумм", Ложь);
	мПараметры.Вставить("ПроверкаСоотношений", Ложь);
	мПараметры.Вставить("ИмеетсяРеквизитДеревоВыбранныхСтраниц", Ложь);
	мПараметры.Вставить("ЗначенияИзСписка", Истина);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("мАвтоВыборКодов", СтруктураРеквизитовФормы.мАвтоВыборКодов);
	ПараметрыФормы.Вставить("мПараметры", мПараметры);
	
	ФормаНастройкиОтчета = РегламентированнаяОтчетностьКлиент.ПолучитьОбщуюФормуПоИмени("НастройкиОтчета", ПараметрыФормы, ЭтаФорма);
	ФормаНастройкиОтчета.Элементы.Страницы.ПодчиненныеЭлементы.СвойстваРазделов.Видимость = Ложь;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьФормуВыбораСтраницЗавершение", ЭтотОбъект);
	
	ФормаНастройкиОтчета.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
	ФормаНастройкиОтчета.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	ФормаНастройкиОтчета.Открыть();  
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораСтраницЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Функция ОбъектОтчета(ЭтаФормаИмя) Экспорт
	
	Если мОбъектОтчета = Неопределено Тогда 
		мОбъектОтчета = РегламентированнаяОтчетностьВызовСервера.ОбъектОтчета(ЭтаФормаИмя);
	КонецЕсли;
	
	Возврат мОбъектОтчета;
	
КонецФункции