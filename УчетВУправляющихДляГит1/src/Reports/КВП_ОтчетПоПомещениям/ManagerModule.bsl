#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

#Область ПрограммныйИнтерфейс

// Функция возвращает параметры исполнения отчета.
Функция ПолучитьПараметрыИсполненияОтчета() Экспорт
	
	Возврат Новый Структура("ИспользоватьПередКомпоновкойМакета,
							|ИспользоватьПослеКомпоновкиМакета,
							|ИспользоватьПослеВыводаРезультата,
							|ИспользоватьДанныеРасшифровки,
							|ИспользоватьВнешниеНаборыДанных,
							|ИспользоватьРасширенныеПараметрыРасшифровки",
							Истина, Истина, Истина, Истина, Истина, Ложь);
	
КонецФункции

// Функция возвращает текст заголовка.
//
// Параметры:
//  ПараметрыОтчета		 - Структура - Структура параметров отчета.
//  ОрганизацияВНачале	 - Булево - Признак организации в начале заголовка.
//
Функция ПолучитьТекстЗаголовка(ПараметрыОтчета, ОрганизацияВНачале = Истина) Экспорт 
	
	Возврат "Отчет по помещениям на " + Формат(ПараметрыОтчета.Период, "ДФ=dd.MM.yyyy") + " г.";
	
КонецФункции

// Функция определяет внешние наборы данных для СКД.
//
// Параметры:
//  ПараметрыОтчета	 - Структура - Структура параметров отчета.
//  МакетКомпоновки	 - Макет - Макет компоновки данных отчета.
//
Функция ПолучитьВнешниеНаборыДанных(ПараметрыОтчета, МакетКомпоновки) Экспорт
	
	МассивВыбрПлощадей = Новый Массив;
	МассивВыбрБлагоустройств = Новый Массив;
	
	Для Каждого ТекПоле Из ПараметрыОтчета.ДополнительныеПоля Цикл 
		Если ТекПоле.Использование = Истина Тогда
			ПолеСтр = Строка(ТекПоле.Поле);
			
			Если НЕ ПараметрыОтчета.СоответствиеПлощадей.Получить(ПолеСтр) = Неопределено Тогда
				МассивВыбрПлощадей.Добавить(Сред(ПолеСтр, 2));
			КонецЕсли;
			
			Если НЕ ПараметрыОтчета.СоответствиеБлагоустройств.Получить(ПолеСтр) = Неопределено Тогда
				МассивВыбрБлагоустройств.Добавить(Сред(ПолеСтр, 2));
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	ТипыПомещений = Перечисления.КВП_ТипыПомещений;
	СпТиповПомещений = Новый СписокЗначений;
	СпТиповПомещений.Добавить(ТипыПомещений.Кабинет);
	СпТиповПомещений.Добавить(ТипыПомещений.Комната);
	СпТиповПомещений.Добавить(ТипыПомещений.Коридор);
	СпТиповПомещений.Добавить(ТипыПомещений.Кухня);
	СпТиповПомещений.Добавить(ТипыПомещений.Санузел);
	
	// Данные для компоновщика получаем запросом и передаем в СКД результат запроса
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Период", ПараметрыОтчета.Период);
	Запрос.УстановитьПараметр("СпТиповПомещений", СпТиповПомещений);
	
	ПоляВыборкиПлощадей      = "";
	ПоляГруппировкиПлощадей  = "";
	ПоляТаблицПлощадей       = "";
	ПоляВыборкиПлощадейК     = "";
	ПоляГруппировкиПлощадейК = "";
	ПоляТаблицПлощадейК      = "";
	ПоляВыборкиПлощадейС     = "";
	ПоляГруппировкиПлощадейС = "";
	ПоляТаблицПлощадейС      = "";
	Для Индекс = 0 По МассивВыбрПлощадей.Количество() - 1 Цикл
		
		Если ПараметрыОтчета.ВыводитьДанныеПоКомнатам Или ПараметрыОтчета.ВыводитьДанныеПоСобственникам Тогда
			
			// Код площади из Справочник.УПЖКХ_ВидыПлощадей
			ТекПлощадь = МассивВыбрПлощадей[Индекс];
			
			// Имя таблицы в запросе.
			ИмяТаблицыПлощади = "ПлощадьПомещенияСрезПоследних" + ТекПлощадь;
			
			// Площадь комнаты
			ПоляВыборкиПлощадейК     = ПоляВыборкиПлощадейК     + "ЕСТЬNULL(" + ИмяТаблицыПлощади + ".Площадь, 0) КАК П" + ТекПлощадь + ",";
			ПоляГруппировкиПлощадейК = ПоляГруппировкиПлощадейК + "ЕСТЬNULL(" + ИмяТаблицыПлощади + ".Площадь, 0),";
			ПоляТаблицПлощадейК      = ПоляТаблицПлощадейК
									 + "ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КВП_ПлощадьПомещения.СрезПоследних(&Период, ВидПлощади = &ВидПлощади" + ТекПлощадь + ") КАК " + ИмяТаблицыПлощади
									 + " ПО УПЖКХ_Комнаты.Ссылка = " + ИмяТаблицыПлощади + ".Объект ";
			
			// Площадь помещения с учетом долей в собственности лицевого счета.
			ПоляВыборкиПлощадейС = ПоляВыборкиПлощадейС + "ЕСТЬNULL(" + ИмяТаблицыПлощади + ".Площадь * ЕСТЬNULL(ДоляСобственника, 1), 0) КАК П" + ТекПлощадь + ",";
			ПоляТаблицПлощадейС  = ПоляТаблицПлощадейС
								 + "ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КВП_ПлощадьПомещения.СрезПоследних(&Период, ВидПлощади = &ВидПлощади"+ ТекПлощадь + ") КАК " + ИмяТаблицыПлощади
								 + " ПО врТаблСобственников.Помещение = " + ИмяТаблицыПлощади + ".Объект ";
			
			Запрос.УстановитьПараметр("ВидПлощади" + ТекПлощадь, ПараметрыОтчета.СоответствиеПлощадей.Получить("П" + ТекПлощадь));
	
			ТекПлощадь = МассивВыбрПлощадей[Индекс] + "Вл";
			
		Иначе
			ТекПлощадь = МассивВыбрПлощадей[Индекс];
		КонецЕсли;
		
		ИмяТаблицыПлощади = "ПлощадьПомещенияСрезПоследних" + ТекПлощадь;
		
		Если ПараметрыОтчета.ВыводитьДанныеПоСобственникам Тогда
			ПоляВыборкиПлощадей     = ПоляВыборкиПлощадей     + "ЕСТЬNULL(" + ИмяТаблицыПлощади + ".Площадь * ЕСТЬNULL(ДоляСобственника, 1), 0) КАК П" + ТекПлощадь + ",";
			ПоляГруппировкиПлощадей = ПоляГруппировкиПлощадей + "ЕСТЬNULL(" + ИмяТаблицыПлощади + ".Площадь, 0),";
		Иначе
			ПоляВыборкиПлощадей     = ПоляВыборкиПлощадей     + "ЕСТЬNULL(" + ИмяТаблицыПлощади + ".Площадь, 0) КАК П" + ТекПлощадь + ",";
			ПоляГруппировкиПлощадей = ПоляГруппировкиПлощадей + "ЕСТЬNULL(" + ИмяТаблицыПлощади + ".Площадь, 0),";
		КонецЕсли;
		
		ПоляТаблицПлощадей = ПоляТаблицПлощадей 
						   + "ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КВП_ПлощадьПомещения.СрезПоследних(&Период, ВидПлощади = &ВидПлощади" + ТекПлощадь + ") КАК " + ИмяТаблицыПлощади
						   + " ПО УПЖКХ_Помещения.Ссылка = " + ИмяТаблицыПлощади + ".Объект ";
		
		Запрос.УстановитьПараметр("ВидПлощади" + ТекПлощадь, ПараметрыОтчета.СоответствиеПлощадей.Получить("П" + ТекПлощадь));

	КонецЦикла;
	
	ПоляВыборкиБлагоустройств      = "";
	ПоляГруппировкиБлагоустройств  = "";
	ПоляТаблицБлагоустройств       = "";
	ПоляВыборкиБлагоустройствК     = "";
	ПоляГруппировкиБлагоустройствК = "";
	ПоляТаблицБлагоустройствК      = "";
	Для Индекс = 0 По МассивВыбрБлагоустройств.Количество() - 1 Цикл
		Если ПараметрыОтчета.ВыводитьДанныеПоКомнатам ИЛИ ПараметрыОтчета.ВыводитьДанныеПоСобственникам Тогда
			ТекБлагоустройство = МассивВыбрБлагоустройств[Индекс];
			ИмяТаблицыБлагоустройства = "БлагоустройстваОбъектов" + ТекБлагоустройство;
			ПоляВыборкиБлагоустройствК     = ПоляВыборкиБлагоустройствК + "ЕСТЬNULL(" + ИмяТаблицыБлагоустройства + ".Значение, 0) КАК Б" + ТекБлагоустройство + ",";
			ПоляГруппировкиБлагоустройствК = ПоляГруппировкиБлагоустройствК + "ЕСТЬNULL(" + ИмяТаблицыБлагоустройства + ".Значение, 0),";
			ПоляТаблицБлагоустройствК = ПоляТаблицБлагоустройствК 
			+ "ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
			|		КВП_БлагоустройствоОбъектов.Объект КАК Объект,
			|		КВП_БлагоустройствоОбъектов.Значение КАК Значение
			|	ИЗ
			|		РегистрСведений.КВП_БлагоустройствоОбъектов КАК КВП_БлагоустройствоОбъектов
			|	ГДЕ
			|		КВП_БлагоустройствоОбъектов.ВидБлагоустройства = &ВидБлагоустройства" + ТекБлагоустройство + ") КАК " + ИмяТаблицыБлагоустройства
			+ ?(ПараметрыОтчета.ВыводитьДанныеПоКомнатам, "	ПО УПЖКХ_Комнаты.Ссылка = ", "	ПО УПЖКХ_Помещения.Ссылка = ") + ИмяТаблицыБлагоустройства + ".Объект ";
			Запрос.УстановитьПараметр("ВидБлагоустройства" + ТекБлагоустройство, ПараметрыОтчета.СоответствиеБлагоустройств.Получить("Б" + ТекБлагоустройство));
			ТекБлагоустройство = МассивВыбрБлагоустройств[Индекс] + "Вл";
		Иначе
			ТекБлагоустройство = МассивВыбрБлагоустройств[Индекс];
		КонецЕсли;
		ИмяТаблицыБлагоустройства = "БлагоустройстваОбъектов" + ТекБлагоустройство;
		ПоляВыборкиБлагоустройств     = ПоляВыборкиБлагоустройств + "ЕСТЬNULL(" + ИмяТаблицыБлагоустройства + ".Значение, 0) КАК Б" + ТекБлагоустройство + ",";
		ПоляГруппировкиБлагоустройств = ПоляГруппировкиБлагоустройств + "ЕСТЬNULL(" + ИмяТаблицыБлагоустройства + ".Значение, 0),";
		ПоляТаблицБлагоустройств = ПоляТаблицБлагоустройств 
		                   + "ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
			|		КВП_БлагоустройствоОбъектов.Объект КАК Объект,
			|		КВП_БлагоустройствоОбъектов.Значение КАК Значение
			|	ИЗ
			|		РегистрСведений.КВП_БлагоустройствоОбъектов КАК КВП_БлагоустройствоОбъектов
			|	ГДЕ
			|		КВП_БлагоустройствоОбъектов.ВидБлагоустройства = &ВидБлагоустройства" + ТекБлагоустройство + ") КАК " + ИмяТаблицыБлагоустройства + "
			|	ПО УПЖКХ_Помещения.Ссылка = " + ИмяТаблицыБлагоустройства + ".Объект ";
		Запрос.УстановитьПараметр("ВидБлагоустройства" + ТекБлагоустройство, ПараметрыОтчета.СоответствиеБлагоустройств.Получить("Б" + ТекБлагоустройство));
	КонецЦикла;
	
	// Получим настройки отбора пользователя по зданиям, подъездам и помещениям,
	// и определим список помещений, по которым нужно получить данные.
	ЗданиеСсылка    = Неопределено;
	ПодъездСсылка   = Неопределено;
	ПомещениеСсылка = Неопределено;
	УсловиеОтбора   = "ИСТИНА";
	
	Для Каждого ЭлементОтбора Из ПараметрыОтчета.НастройкиКомпоновкиДанных.Отбор.Элементы Цикл
		Если ЭлементОтбора.Использование И ЗначениеЗаполнено(ЭлементОтбора.ПравоеЗначение) Тогда
			
			Если ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Здание") Тогда
				ЗданиеСсылка = ЭлементОтбора.ПравоеЗначение;
				
				Если ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно Тогда
					УсловиеОтбора = УсловиеОтбора + " И Владелец = &ЗданиеСсылка";
				ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВИерархии Тогда
					УсловиеОтбора = УсловиеОтбора + " И Владелец В ИЕРАРХИИ(&ЗданиеСсылка)";
				КонецЕсли;
				
			КонецЕсли;
			
			Если ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Подъезд") Тогда
				ПодъездСсылка = ЭлементОтбора.ПравоеЗначение;
				
				Если ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно Тогда
					УсловиеОтбора = УсловиеОтбора + " И Подъезд = &ПодъездСсылка";
				КонецЕсли;
			
			КонецЕсли;
			
			Если ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Помещение") Тогда
				ПомещениеСсылка = ЭлементОтбора.ПравоеЗначение;
				
				Если ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно Тогда
					УсловиеОтбора = УсловиеОтбора + " И Ссылка = &ПомещениеСсылка";
				КонецЕсли;
			
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	СписокПомещений = Неопределено;
	СписокЗданий    = Неопределено;
	Если ЗданиеСсылка <> Неопределено ИЛИ ПодъездСсылка <> Неопределено ИЛИ ПомещениеСсылка <> Неопределено Тогда
		
		ЗапросВыборкиПомещений = Новый Запрос;
		ЗапросВыборкиПомещений.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	УПЖКХ_Помещения.Ссылка КАК ПомещениеСсылка,
		|	УПЖКХ_Помещения.Подъезд КАК ПодъездСсылка,
		|	УПЖКХ_Помещения.Владелец КАК ЗданиеСсылка
		|ИЗ
		|	Справочник.УПЖКХ_Помещения КАК УПЖКХ_Помещения
		|ГДЕ
		|	ИСТИНА
		|	И &УсловиеОтбора";
		
		ЗапросВыборкиПомещений.Текст = СтрЗаменить(ЗапросВыборкиПомещений.Текст, "&УсловиеОтбора", УсловиеОтбора);
		
		ЗапросВыборкиПомещений.УстановитьПараметр("ЗданиеСсылка",    ЗданиеСсылка);
		ЗапросВыборкиПомещений.УстановитьПараметр("ПомещениеСсылка", ПомещениеСсылка);
		ЗапросВыборкиПомещений.УстановитьПараметр("ПодъездСсылка",   ПодъездСсылка);
		
		ТаблицаПомещений = ЗапросВыборкиПомещений.Выполнить().Выгрузить();
		
		СписокПомещений = ТаблицаПомещений.ВыгрузитьКолонку("ПомещениеСсылка");
		врТаблица = ТаблицаПомещений.Скопировать();
		врТаблица.Свернуть("ЗданиеСсылка");
		СписокЗданий    = врТаблица.ВыгрузитьКолонку("ЗданиеСсылка");
		
	КонецЕсли;
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УПЖКХ_СобственникиПомещенийСрезПоследних.Помещение,
	|	УПЖКХ_СобственникиПомещенийСрезПоследних.Собственник,
	|	УПЖКХ_СобственникиПомещенийСрезПоследних.ДоляСобственникаЧислитель,
	|	УПЖКХ_СобственникиПомещенийСрезПоследних.ДоляСобственникаЗнаменатель,
	|	УПЖКХ_СобственникиПомещенийСрезПоследних.ОснованиеПолученияВСобственность,
	|	УПЖКХ_СобственникиПомещенийСрезПоследних.ВидДокумента,
	|	УПЖКХ_СобственникиПомещенийСрезПоследних.НомерДокумента,
	|	УПЖКХ_СобственникиПомещенийСрезПоследних.ДатаДокумента,
	|	УПЖКХ_СобственникиПомещенийСрезПоследних.Регистратор,
	|	ВЫБОР
	|		КОГДА НЕ(ЕСТЬNULL(УПЖКХ_СобственникиПомещенийСрезПоследних.ДоляСобственникаЧислитель, 0) = 0
	|					И ЕСТЬNULL(УПЖКХ_СобственникиПомещенийСрезПоследних.ДоляСобственникаЗнаменатель, 0) = 0)
	|			ТОГДА УПЖКХ_СобственникиПомещенийСрезПоследних.ДоляСобственникаЧислитель / УПЖКХ_СобственникиПомещенийСрезПоследних.ДоляСобственникаЗнаменатель
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК ДоляСобственника
	|ПОМЕСТИТЬ втСобственники
	|ИЗ
	|	РегистрСведений.УПЖКХ_СобственникиПомещений.СрезПоследних(&Период, ) КАК УПЖКХ_СобственникиПомещенийСрезПоследних
	|ГДЕ
	|	УПЖКХ_СобственникиПомещенийСрезПоследних.Действует
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втСобственники.Помещение,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ втСобственники.Собственник) КАК ЧислоСобственников
	|ПОМЕСТИТЬ втЧислоСобственников
	|ИЗ
	|	втСобственники КАК втСобственники
	|
	|СГРУППИРОВАТЬ ПО
	|	втСобственники.Помещение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	втСобственники.Помещение.Владелец КАК Здание,
	|	втСобственники.Помещение.Ссылка КАК Помещение,
	|	втСобственники.Помещение.Код КАК НомерПомещения,
	|	втСобственники.Помещение.ВидПомещения.ТипПомещения КАК ВидПомещенияТипПомещения,
	|	втСобственники.Собственник,
	|	УПЖКХ_СобственностьНаПомещенияСрезПоследних.ВидСобственности КАК ВидСобственности,
	|	УПЖКХ_СобственностьНаПомещенияСрезПоследних.ПодвидЧастнойСобственности КАК ПодвидЧастнойСобственности,
	|	втСобственники.ОснованиеПолученияВСобственность,
	|	втСобственники.ВидДокумента,
	|	втСобственники.НомерДокумента,
	|	втСобственники.ДатаДокумента,
	|	втСобственники.ДоляСобственникаЧислитель,
	|	втСобственники.ДоляСобственникаЗнаменатель,
	|	втСобственники.ДоляСобственника / ВЫБОР
	|		КОГДА УПЖКХ_СобственностьНаПомещенияСрезПоследних.ПодвидЧастнойСобственности = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыЧастнойСобственности.Совместная)
	|			ТОГДА втЧислоСобственников.ЧислоСобственников
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК ДоляСобственника
	|ПОМЕСТИТЬ врТаблСобственников
	|ИЗ
	|	втСобственники КАК втСобственники
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.УПЖКХ_СобственностьНаПомещения.СрезПоследних(
	|				&Период,
	|				Помещение В
	|					(ВЫБРАТЬ
	|						втСобственники.Помещение
	|					ИЗ
	|						втСобственники КАК втСобственники)) КАК УПЖКХ_СобственностьНаПомещенияСрезПоследних
	|		ПО втСобственники.Помещение = УПЖКХ_СобственностьНаПомещенияСрезПоследних.Помещение
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втЧислоСобственников КАК втЧислоСобственников
	|		ПО втСобственники.Помещение = втЧислоСобственников.Помещение";
	
	УсловиеНаПомещение = "ИСТИНА";
	Если НЕ СписокПомещений = Неопределено Тогда
		УсловиеНаПомещение = УсловиеНаПомещение + " И Помещение В (&СписокПомещений)";
	КонецЕсли;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеНаПомещение", УсловиеНаПомещение);
	
	Запрос.УстановитьПараметр("СписокПомещений", СписокПомещений);
	Запрос.УстановитьПараметр("Период", ПараметрыОтчета.Период);
	
	Запрос.Выполнить();
	
	Если ПараметрыОтчета.ВыводитьДанныеПоКомнатам Тогда
		
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КВП_Здания.Ссылка КАК Здание,
		|	УПЖКХ_Помещения.Ссылка КАК Помещение,
		|	УПЖКХ_Помещения.Ссылка.ВидПомещения КАК ВидПомещения,
		|	УПЖКХ_Помещения.Код КАК НомерПомещения,
		//|	КВП_СостояниеПомещения.ТипСобственности,
		|	КВП_СостояниеПомещения.Состояние,
		|	КВП_СостояниеПомещения.КатегорияКвартиры КАК КатегорияПомещения,
		//|	КВП_СостояниеПомещенияВл.ТипСобственности КАК ТипСобственностиВл,
		|	КВП_СостояниеПомещенияВл.Состояние КАК СостояниеВл,
		|	КВП_СостояниеПомещенияВл.КатегорияКвартиры КАК КатегорияПомещенияВл,
		|	МАКСИМУМ(врТаблСобственников.ВидСобственности) КАК ВидСобственности,
		|	МАКСИМУМ(врТаблСобственников.ПодвидЧастнойСобственности) КАК ПодвидЧастнойСобственности,
		|	МАКСИМУМ(врТаблСобственников.Собственник) КАК Собственник,
		|	МАКСИМУМ(врТаблСобственников.ОснованиеПолученияВСобственность) КАК ОснованиеПолученияВСобственность,
		|	МАКСИМУМ(врТаблСобственников.ВидДокумента) КАК ВидДокумента,
		|	МАКСИМУМ(врТаблСобственников.НомерДокумента) КАК НомерДокумента,
		|	МАКСИМУМ(врТаблСобственников.ДатаДокумента) КАК ДатаДокумента,
		|	МАКСИМУМ(врТаблСобственников.ДоляСобственникаЧислитель) КАК ДоляСобственникаЧислитель,
		|	МАКСИМУМ(врТаблСобственников.ДоляСобственникаЗнаменатель) КАК ДоляСобственникаЗнаменатель,
		|	" + ПоляВыборкиПлощадей + "
		|	" + ПоляВыборкиПлощадейК + "
		|	" + ПоляВыборкиБлагоустройств + "
		|	" + ПоляВыборкиБлагоустройствК + "
		|	УПЖКХ_Комнаты.Ссылка КАК Комната,
		|	УПЖКХ_Помещения.Подъезд
		|ИЗ
		|	Справочник.КВП_Здания КАК КВП_Здания
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УПЖКХ_Помещения КАК УПЖКХ_Помещения
		|			" + ПоляТаблицПлощадей + "
		|			" + ПоляТаблицБлагоустройств + "
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КВП_СостояниеПомещения КАК КВП_СостояниеПомещенияВл
		|			ПО УПЖКХ_Помещения.Ссылка = КВП_СостояниеПомещенияВл.Объект
		|			ЛЕВОЕ СОЕДИНЕНИЕ врТаблСобственников КАК врТаблСобственников
		|			ПО УПЖКХ_Помещения.Ссылка = врТаблСобственников.Помещение
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УПЖКХ_Помещения КАК УПЖКХ_Комнаты
		|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КВП_СостояниеПомещения КАК КВП_СостояниеПомещения
		|				ПО УПЖКХ_Комнаты.Ссылка = КВП_СостояниеПомещения.Объект
		|			" + ПоляТаблицПлощадейК + "
		|			" + ПоляТаблицБлагоустройствК + "
		|			ПО УПЖКХ_Помещения.Ссылка = УПЖКХ_Комнаты.Родитель
		|		ПО (УПЖКХ_Помещения.Владелец = КВП_Здания.Ссылка)
		|ГДЕ
		|	(НЕ КВП_Здания.ПометкаУдаления)
		|	И (НЕ УПЖКХ_Помещения.ПометкаУдаления)
		|	И (НЕ УПЖКХ_Помещения.ВидПомещения.ТипПомещения В (&СпТиповПомещений))
		|	И ((НЕ УПЖКХ_Комнаты.ПометкаУдаления)
		|			ИЛИ УПЖКХ_Комнаты.Ссылка ЕСТЬ NULL)
		|	И &УсловиеОтбора
		|
		|СГРУППИРОВАТЬ ПО
		|	КВП_Здания.Ссылка,
		|	УПЖКХ_Помещения.Ссылка,
		|	УПЖКХ_Помещения.Ссылка.ВидПомещения,
		|	УПЖКХ_Помещения.Код,
		//|	КВП_СостояниеПомещения.ТипСобственности,
		|	КВП_СостояниеПомещения.Состояние,
		|	КВП_СостояниеПомещения.КатегорияКвартиры,
		//|	КВП_СостояниеПомещенияВл.ТипСобственности,
		|	КВП_СостояниеПомещенияВл.Состояние,
		|	КВП_СостояниеПомещенияВл.КатегорияКвартиры,
		|	" + ПоляГруппировкиПлощадей + "
		|	" + ПоляГруппировкиПлощадейК + "
		|	" + ПоляГруппировкиБлагоустройств + "
		|	" + ПоляГруппировкиБлагоустройствК + "
		|	УПЖКХ_Комнаты.Ссылка,
		|	УПЖКХ_Помещения.Подъезд";
		
	ИначеЕсли ПараметрыОтчета.ВыводитьДанныеПоСобственникам Тогда
		
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КВП_Здания.Ссылка КАК Здание,
		|	УПЖКХ_Помещения.Ссылка КАК Помещение,
		|	УПЖКХ_Помещения.Ссылка.ВидПомещения КАК ВидПомещения,
		|	УПЖКХ_Помещения.Код КАК НомерПомещения,
		//|	КВП_СостояниеПомещения.ТипСобственности,
		|	КВП_СостояниеПомещения.Состояние,
		|	КВП_СостояниеПомещения.КатегорияКвартиры КАК КатегорияПомещения,
		|	УПЖКХ_Помещения.Ссылка КАК Комната,
		|	УПЖКХ_Помещения.Подъезд,
		|	врТаблСобственников.ВидСобственности,
		|	врТаблСобственников.ПодвидЧастнойСобственности,
		|	врТаблСобственников.Собственник,
		|	" + ПоляВыборкиПлощадей + "
		|	" + ПоляВыборкиБлагоустройств + "
		|	" + ПоляВыборкиПлощадейС + "
		|	" + ПоляВыборкиБлагоустройствК + "
		|	врТаблСобственников.ОснованиеПолученияВСобственность,
		|	врТаблСобственников.ВидДокумента,
		|	врТаблСобственников.НомерДокумента,
		|	врТаблСобственников.ДатаДокумента,
		|	врТаблСобственников.ДоляСобственникаЧислитель КАК ДоляСобственникаЧислитель,
		|	врТаблСобственников.ДоляСобственникаЗнаменатель
		|ИЗ
		|	Справочник.КВП_Здания КАК КВП_Здания
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УПЖКХ_Помещения КАК УПЖКХ_Помещения
		|			" + ПоляТаблицПлощадей + "
		|			" + ПоляТаблицБлагоустройств + "
		|			" + ПоляТаблицБлагоустройствК + "
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КВП_СостояниеПомещения КАК КВП_СостояниеПомещения
		|			ПО УПЖКХ_Помещения.Ссылка = КВП_СостояниеПомещения.Объект
		|			ЛЕВОЕ СОЕДИНЕНИЕ врТаблСобственников КАК врТаблСобственников
		|			ПО УПЖКХ_Помещения.Ссылка = врТаблСобственников.Помещение
		|			" + ПоляТаблицПлощадейС + "
		|		ПО (УПЖКХ_Помещения.Владелец = КВП_Здания.Ссылка)
		|ГДЕ
		|	(НЕ КВП_Здания.ПометкаУдаления)
		|	И (НЕ УПЖКХ_Помещения.ПометкаУдаления)
		|	И &УсловиеОтбора
		|	И (НЕ УПЖКХ_Помещения.ВидПомещения.ТипПомещения В (&СпТиповПомещений))";
		
	Иначе
		
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КВП_Здания.Ссылка КАК Здание,
		|	УПЖКХ_Помещения.Ссылка КАК Помещение,
		|	УПЖКХ_Помещения.Ссылка.ВидПомещения КАК ВидПомещения,
		|	УПЖКХ_Помещения.Код КАК НомерПомещения,
		//|	КВП_СостояниеПомещения.ТипСобственности,
		|	КВП_СостояниеПомещения.Состояние,
		|	КВП_СостояниеПомещения.КатегорияКвартиры КАК КатегорияПомещения,
		|	УПЖКХ_Помещения.Ссылка КАК Комната,
		|	УПЖКХ_Помещения.Подъезд,
		|	" + ПоляВыборкиПлощадей + "
		|	" + ПоляВыборкиБлагоустройств + "
		|	МАКСИМУМ(врТаблСобственников.ВидСобственности) КАК ВидСобственности,
		|	МАКСИМУМ(врТаблСобственников.ПодвидЧастнойСобственности) КАК ПодвидЧастнойСобственности,
		|	МАКСИМУМ(врТаблСобственников.Собственник) КАК Собственник,
		|	МАКСИМУМ(врТаблСобственников.ОснованиеПолученияВСобственность) КАК ОснованиеПолученияВСобственность,
		|	МАКСИМУМ(врТаблСобственников.ВидДокумента) КАК ВидДокумента,
		|	МАКСИМУМ(врТаблСобственников.НомерДокумента) КАК НомерДокумента,
		|	МАКСИМУМ(врТаблСобственников.ДатаДокумента) КАК ДатаДокумента,
		|	МАКСИМУМ(врТаблСобственников.ДоляСобственникаЧислитель) КАК ДоляСобственникаЧислитель,
		|	МАКСИМУМ(врТаблСобственников.ДоляСобственникаЗнаменатель) КАК ДоляСобственникаЗнаменатель
		|ИЗ
		|	Справочник.КВП_Здания КАК КВП_Здания
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УПЖКХ_Помещения КАК УПЖКХ_Помещения
		|			" + ПоляТаблицПлощадей + "
		|			" + ПоляТаблицБлагоустройств + "
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КВП_СостояниеПомещения КАК КВП_СостояниеПомещения
		|			ПО УПЖКХ_Помещения.Ссылка = КВП_СостояниеПомещения.Объект
		|			ЛЕВОЕ СОЕДИНЕНИЕ врТаблСобственников КАК врТаблСобственников
		|			ПО УПЖКХ_Помещения.Ссылка = врТаблСобственников.Помещение
		|		ПО (УПЖКХ_Помещения.Владелец = КВП_Здания.Ссылка)
		|ГДЕ
		|	(НЕ КВП_Здания.ПометкаУдаления)
		|	И (НЕ УПЖКХ_Помещения.ПометкаУдаления)
		|	И (НЕ УПЖКХ_Помещения.ВидПомещения.ТипПомещения В (&СпТиповПомещений))
		|	И &УсловиеОтбора
		|
		|СГРУППИРОВАТЬ ПО
		|	КВП_Здания.Ссылка,
		|	УПЖКХ_Помещения.Ссылка,
		|	УПЖКХ_Помещения.Ссылка.ВидПомещения,
		|	УПЖКХ_Помещения.Код,
		//|	КВП_СостояниеПомещения.ТипСобственности,
		|	КВП_СостояниеПомещения.Состояние,
		|	КВП_СостояниеПомещения.КатегорияКвартиры,
		|	" + ПоляГруппировкиПлощадей + "
		|	" + ПоляГруппировкиБлагоустройств + "
		|	УПЖКХ_Помещения.Ссылка,
		|	УПЖКХ_Помещения.Подъезд";
		
	КонецЕсли;
	
	УсловиеОтбора = "ИСТИНА";
	Если НЕ СписокПомещений = Неопределено Тогда
		УсловиеОтбора = УсловиеОтбора + " И УПЖКХ_Помещения.Ссылка В (&СписокПомещений) И КВП_Здания.Ссылка В (&СписокЗданий)";
	КонецЕсли;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеОтбора", УсловиеОтбора);
	
	Запрос.УстановитьПараметр("СписокПомещений", СписокПомещений);
	Запрос.УстановитьПараметр("СписокЗданий",    СписокЗданий);
	
	ДанныеПоПомещениям = Запрос.Выполнить();
	
	ВнешниеНаборыДанных = Новый Структура("ДанныеПоПомещениям", ДанныеПоПомещениям);
	
	Возврат ВнешниеНаборыДанных;
	
КонецФункции

// В процедуре можно доработать компоновщик перед выводом в отчет.
// Изменения сохранены не будут.
//
// Параметры:
//  ПараметрыОтчета		 - Структура - Структура параметров отчета.
//  Схема				 - СхемаКомпоновкиДанных - Схема компоновки данных отчета.
//  КомпоновщикНастроек	 - КомпоновщикНастроекКомпоновкиДанных - Компоновщик настроек компоновки данных отчета.
//
Процедура ПередКомпоновкойМакета(ПараметрыОтчета, Схема, КомпоновщикНастроек) Экспорт
	
	Если ЗначениеЗаполнено(ПараметрыОтчета.Период) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "Период", ПараметрыОтчета.Период);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыОтчета.Здание) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.ДобавитьОтбор(КомпоновщикНастроек, "Здание", ПараметрыОтчета.Здание,,, Истина);
	КонецЕсли;
	
	УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "ПС", Символы.ПС);
	
	КомпоновщикНастроек.Настройки.Структура.Очистить();
	КомпоновщикНастроек.Настройки.Выбор.Элементы.Очистить();
	
	ГрЗданий = КомпоновщикНастроек.Настройки.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
	ГрЗданий.Использование = Истина;
	ПолеК = ГрЗданий.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
	ПолеК.Использование = Истина;
	ПолеК.Поле = Новый ПолеКомпоновкиДанных("Здание");
	АвтоПоле = ГрЗданий.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
	АвтоПоле.Использование = Истина;
	
	ТекГр = ГрЗданий;
	
	Если ПараметрыОтчета.ГруппироватьПоПодъездам Тогда
		ГрПодъездов = ТекГр.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
		ГрПодъездов.Использование = Истина;
		ПолеК = ГрПодъездов.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
		ПолеК.Использование = Истина;
		ПолеК.Поле = Новый ПолеКомпоновкиДанных("Подъезд");
		АвтоПоле = ГрПодъездов.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
		АвтоПоле.Использование = Истина;
		ТекГр = ГрПодъездов;
	КонецЕсли;
	
	Если ПараметрыОтчета.ГруппироватьПоВидамПомещений Тогда
		ГрВидыПомещений = ТекГр.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
		ГрВидыПомещений.Использование = Истина;
		ПолеК = ГрВидыПомещений.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
		ПолеК.Использование = Истина;
		ПолеК.Поле = Новый ПолеКомпоновкиДанных("ВидПомещения");
		АвтоПоле = ГрВидыПомещений.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
		АвтоПоле.Использование = Истина;
		ТекГр = ГрВидыПомещений;
	КонецЕсли;
	
	ПолеПомещение = "Помещение";
	
	Если ПараметрыОтчета.ВыводитьДанныеПоКомнатам Тогда
		ГрПомещенийВл = ТекГр.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
		ГрПомещенийВл.Использование = Истина;
		ПолеК = ГрПомещенийВл.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
		ПолеК.Использование = Истина;
		ПолеК.Поле = Новый ПолеКомпоновкиДанных("Помещение");
		АвтоПоле = ГрПомещенийВл.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
		АвтоПоле.Использование = Истина;
		ПолеПомещение = "Комната";
		ТекГр = ГрПомещенийВл;
	ИначеЕсли ПараметрыОтчета.ВыводитьДанныеПоСобственникам Тогда
		ГрПомещенийВл = ТекГр.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
		ГрПомещенийВл.Использование = Истина;
		ПолеК = ГрПомещенийВл.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
		ПолеК.Использование = Истина;
		ПолеК.Поле = Новый ПолеКомпоновкиДанных("Помещение");
		АвтоПоле = ГрПомещенийВл.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
		АвтоПоле.Использование = Истина;
		ПолеПомещение = "Собственник";
		ТекГр = ГрПомещенийВл;
	КонецЕсли;
	
	ГрПомещений = ТекГр.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
	ГрПомещений.Использование = Истина;
	АвтоПоле = ГрПомещений.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
	АвтоПоле.Использование = Истина;
	
	Для Каждого Сортировка Из КомпоновщикНастроек.Настройки.Порядок.Элементы Цикл
		НоваяЗапись = ГрПомещений.Порядок.Элементы.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
		НоваяЗапись.Использование     = Сортировка.Использование;
		НоваяЗапись.Поле              = Сортировка.Поле;
		НоваяЗапись.ТипУпорядочивания = Сортировка.ТипУпорядочивания;
	КонецЦикла;
	
	ПолеВыбора = КомпоновщикНастроек.Настройки.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
	ПолеВыбора.Использование = Истина;
	ПолеВыбора.Поле = Новый ПолеКомпоновкиДанных(ПолеПомещение);
	
	ДобавитьПоляВНаборКомпоновки(ПараметрыОтчета, Схема);
	
	УПЖКХ_ТиповыеМетодыВызовСервера.ДобавитьДополнительныеПоля(ПараметрыОтчета, КомпоновщикНастроек);
	
КонецПроцедуры

// Возникает после компоновки макета.
//
// Параметры:
//  ПараметрыОтчета	 - Структура - Структура параметров отчета.
//  МакетКомпоновки	 - Макет - Макет компоновки данных отчета.
//
Процедура ПослеКомпоновкиМакета(ПараметрыОтчета, МакетКомпоновки) Экспорт
	
КонецПроцедуры

// Возникает после вывода результата.
//
// Параметры:
//  ПараметрыОтчета	 - Структура - Структура параметров отчета.
//  Результат		 - ТабличныйДокумент - Табличный документ для вывода в отчете.
//
Процедура ПослеВыводаРезультата(ПараметрыОтчета, Результат) Экспорт
	
	УПЖКХ_ТиповыеМетодыВызовСервера.ОбработкаРезультатаОтчета(ПараметрыОтчета.ИдентификаторОтчета, Результат);
	
КонецПроцедуры

// Вызывает настройку вариантов отчета.
//
// Параметры:
//  Настройки	   - Структура - Структура настроек отчета.
//  ОписаниеОтчета - Строка - Строка описания отчета.
//
Процедура НастроитьВариантыОтчета(Настройки, ОписаниеОтчета) Экспорт
	
КонецПроцедуры

// Процедура используется подсистемой варианты отчетов
//
// Параметры:
//  Настройки - Структура - Структура настроек отчета.
//
Процедура НастройкиОтчета(Настройки) Экспорт
	
	Схема = ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");
	Для Каждого Вариант из Схема.ВариантыНастроек Цикл
		Настройки.ОписаниеВариантов.Вставить(Вариант.Имя,Вариант.Представление);
	КонецЦикла;
	
КонецПроцедуры

// Заполняет параметры расшифровки отчета.
//
// Параметры:
//  Адрес	   			 - Строка - Строка адреса отчета во временном хранилище.
//  Расшифровка 		 - Строка - Строка расшифровки.
//  ПараметрыРасшифровки - Структура - Структура параметров расшифровки отчета.
//
Процедура ЗаполнитьПараметрыРасшифровкиОтчета(Адрес, Расшифровка, ПараметрыРасшифровки) Экспорт
	
	
КонецПроцедуры

#КонецОбласти 

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

#Область СлужебныеПроцедурыИФункции

// Процедура добавляет поле итога.
Процедура ДобавитьПолеИтога(Схема, ИмяПоля)
	
	ПолеИтога = Схема.ПоляИтога.Добавить();
	ПолеИтога.ПутьКДанным = ИмяПоля;
	ПолеИтога.Выражение   = "Сумма(" + ИмяПоля + ")";
	
КонецПроцедуры

// Процедура добавляет поля для возможности их отображения.
//
// Параметры:
//  ПараметрыОтчета		 - Структура - Структура параметров отчета.
//  Схема				 - СхемаКомпоновкиДанных - Схема компоновки данных отчета.
//
Процедура ДобавитьПоляВНаборКомпоновки(ПараметрыОтчета, Схема) Экспорт

	Набор = Схема.НаборыДанных.Найти("ДанныеПоПомещениям");
	
	Если Набор = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Схема.ПоляИтога.Очистить();
	
	ДобавитьПолеИтога(Схема, "Состояние");
	ДобавитьПолеИтога(Схема, "КатегорияПомещения");
	Если ПараметрыОтчета.ВыводитьДанныеПоКомнатам Тогда
		
		ПолеНабораДанных = Набор.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
		ПолеНабораДанных.Поле        = "СостояниеВл";
		ПолеНабораДанных.Заголовок   = "СостояниеВл";
		ПолеНабораДанных.ПутьКДанным = "СостояниеВл";
		ПолеНабораДанных.ОграничениеИспользования.Условие = Истина;
		ПолеНабораДанных.ОграничениеИспользования.Порядок = Истина;
		ПолеНабораДанных = Набор.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
		ПолеНабораДанных.Поле        = "КатегорияПомещенияВл";
		ПолеНабораДанных.Заголовок   = "КатегорияПомещенияВл";
		ПолеНабораДанных.ПутьКДанным = "КатегорияПомещенияВл";
		ПолеНабораДанных.ОграничениеИспользования.Условие = Истина;
		ПолеНабораДанных.ОграничениеИспользования.Порядок = Истина;
		ПолеИтога = Схема.ПоляИтога.Добавить();
		ПолеИтога.ПутьКДанным = "Состояние";
		ПолеИтога.Выражение = "МАКСИМУМ(СостояниеВл )";
		ПолеИтога.Группировки.Добавить("Помещение");
		ПолеИтога = Схема.ПоляИтога.Добавить();
		ПолеИтога.ПутьКДанным = "КатегорияПомещения";
		ПолеИтога.Выражение = "МАКСИМУМ(КатегорияПомещенияВл)";
		ПолеИтога.Группировки.Добавить("Помещение");
		
	ИначеЕсли ПараметрыОтчета.ВыводитьДанныеПоСобственникам Тогда
		
		ПолеНабораДанных = Набор.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
		ПолеНабораДанных.Поле        = "ВидСобственности";
		ПолеНабораДанных.Заголовок   = "ВидСобственности";
		ПолеНабораДанных.ПутьКДанным = "ВидСобственности";
		ПолеНабораДанных.ОграничениеИспользования.Условие = Истина;
		ПолеНабораДанных.ОграничениеИспользования.Порядок = Истина;
		ПолеНабораДанных = Набор.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
		ПолеНабораДанных.Поле        = "ПодвидЧастнойСобственности";
		ПолеНабораДанных.Заголовок   = "ПодвидЧастнойСобственности";
		ПолеНабораДанных.ПутьКДанным = "ПодвидЧастнойСобственности";
		ПолеНабораДанных.ОграничениеИспользования.Условие = Истина;
		ПолеНабораДанных.ОграничениеИспользования.Порядок = Истина;
		ПолеНабораДанных = Набор.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
		ПолеНабораДанных.Поле        = "Собственник";
		ПолеНабораДанных.Заголовок   = "Собственник";
		ПолеНабораДанных.ПутьКДанным = "Собственник";
		ПолеНабораДанных.ОграничениеИспользования.Условие = Истина;
		ПолеНабораДанных.ОграничениеИспользования.Порядок = Истина;
		ПолеНабораДанных = Набор.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
		ПолеНабораДанных.Поле        = "ОснованиеПолученияВСобственность";
		ПолеНабораДанных.Заголовок   = "ОснованиеПолученияВСобственность";
		ПолеНабораДанных.ПутьКДанным = "ОснованиеПолученияВСобственность";
		ПолеНабораДанных.ОграничениеИспользования.Условие = Истина;
		ПолеНабораДанных.ОграничениеИспользования.Порядок = Истина;
		ПолеНабораДанных = Набор.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
		ПолеНабораДанных.Поле        = "ВидДокумента";
		ПолеНабораДанных.Заголовок   = "ВидДокумента";
		ПолеНабораДанных.ПутьКДанным = "ВидДокумента";
		ПолеНабораДанных.ОграничениеИспользования.Условие = Истина;
		ПолеНабораДанных.ОграничениеИспользования.Порядок = Истина;
		ПолеНабораДанных = Набор.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
		ПолеНабораДанных.Поле        = "НомерДокумента";
		ПолеНабораДанных.Заголовок   = "НомерДокумента";
		ПолеНабораДанных.ПутьКДанным = "НомерДокумента";
		ПолеНабораДанных.ОграничениеИспользования.Условие = Истина;
		ПолеНабораДанных.ОграничениеИспользования.Порядок = Истина;
		ПолеНабораДанных = Набор.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
		ПолеНабораДанных.Поле        = "ДатаДокумента";
		ПолеНабораДанных.Заголовок   = "ДатаДокумента";
		ПолеНабораДанных.ПутьКДанным = "ДатаДокумента";
		ПолеНабораДанных.ОграничениеИспользования.Условие = Истина;
		ПолеНабораДанных.ОграничениеИспользования.Порядок = Истина;
		ПолеНабораДанных = Набор.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
		ПолеНабораДанных.Поле        = "ДоляСобственникаЧислитель";
		ПолеНабораДанных.Заголовок   = "ДоляСобственникаЧислитель";
		ПолеНабораДанных.ПутьКДанным = "ДоляСобственникаЧислитель";
		ПолеНабораДанных.ОграничениеИспользования.Условие = Истина;
		ПолеНабораДанных.ОграничениеИспользования.Порядок = Истина;
		ПолеНабораДанных = Набор.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
		ПолеНабораДанных.Поле        = "ДоляСобственникаЗнаменатель";
		ПолеНабораДанных.Заголовок   = "ДоляСобственникаЗнаменатель";
		ПолеНабораДанных.ПутьКДанным = "ДоляСобственникаЗнаменатель";
		ПолеНабораДанных.ОграничениеИспользования.Условие = Истина;
		ПолеНабораДанных.ОграничениеИспользования.Порядок = Истина;
		
	КонецЕсли;
	
	СоответствиеПлощадей = Новый Соответствие;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УПЖКХ_ВидыПлощадей.Код КАК Код,
	|	УПЖКХ_ВидыПлощадей.Наименование КАК Наименование,
	|	УПЖКХ_ВидыПлощадей.Ссылка КАК ВидПлощади
	|ИЗ
	|	Справочник.УПЖКХ_ВидыПлощадей КАК УПЖКХ_ВидыПлощадей
	|ГДЕ
	|	НЕ УПЖКХ_ВидыПлощадей.ПометкаУдаления";
	
	ОписаниеТиповПлощади = Метаданные.РегистрыСведений.КВП_ПлощадьПомещения.Ресурсы.Площадь.Тип;
	
	ВыборкаПлощадей = Запрос.Выполнить().Выбрать();
	Пока ВыборкаПлощадей.Следующий() Цикл
		ПолеИдентификатор = "П" + УПЖКХ_ТиповыеМетодыСервер.ПреобразоватьСтрокуВДопустимоеНаименованиеКолонки(ВыборкаПлощадей.Код);
		Заголовок = ВыборкаПлощадей.Наименование;
		Если Набор.Поля.Найти(ПолеИдентификатор) = Неопределено Тогда
			ПолеНабораДанных = Набор.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
			ПолеНабораДанных.Поле        = ПолеИдентификатор;
			ПолеНабораДанных.Заголовок   = Заголовок;
			ПолеНабораДанных.ПутьКДанным = ПолеИдентификатор;
			ПолеНабораДанных.ТипЗначения = ОписаниеТиповПлощади;
		КонецЕсли;
		
		ДобавитьПолеИтога(Схема, ПолеИдентификатор);
		СоответствиеПлощадей.Вставить(ПолеИдентификатор, ВыборкаПлощадей.ВидПлощади);
		
		Если ПараметрыОтчета.ВыводитьДанныеПоКомнатам Или ПараметрыОтчета.ВыводитьДанныеПоСобственникам Тогда
			
			ПолеВл = ПолеИдентификатор + "Вл";
			Если Набор.Поля.Найти(ПолеВл) = Неопределено Тогда
				
				ПолеНабораДанных = Набор.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
				ПолеНабораДанных.Поле        = ПолеВл;
				ПолеНабораДанных.Заголовок   = Заголовок;
				ПолеНабораДанных.ПутьКДанным = ПолеВл;
				ПолеНабораДанных.ТипЗначения = ОписаниеТиповПлощади;
				ПолеНабораДанных.ОграничениеИспользования.Условие = Истина;
				ПолеНабораДанных.ОграничениеИспользования.Порядок = Истина;
				
			КонецЕсли;
			
			ПолеИтога = Схема.ПоляИтога.Добавить();
			ПолеИтога.ПутьКДанным = ПолеИдентификатор;
			ПолеИтога.Выражение = ?(ПараметрыОтчета.ВыводитьДанныеПоКомнатам, "МАКСИМУМ(" + ПолеВл + ")", "Сумма(" + ПолеВл + ")");
			ПолеИтога.Группировки.Добавить("Помещение");
			
			ПолеИтога = Схема.ПоляИтога.Добавить();
			ПолеИтога.ПутьКДанным = ПолеИдентификатор;
			ПолеИтога.Выражение = ?(ПараметрыОтчета.ВыводитьДанныеПоКомнатам, "Сумма(ВычислитьВыражениеСГруппировкойМассив(""Максимум(" + ПолеВл + ")"",""Помещение""))", "Сумма(" + ПолеВл + ")");
			ПолеИтога.Группировки.Добавить("Здание");
			
			ПолеИтога = Схема.ПоляИтога.Добавить();
			ПолеИтога.ПутьКДанным = ПолеИдентификатор;
			ПолеИтога.Выражение = ?(ПараметрыОтчета.ВыводитьДанныеПоКомнатам, "Сумма(ВычислитьВыражениеСГруппировкойМассив(""Максимум(" + ПолеВл + ")"",""Помещение""))", "Сумма(" + ПолеВл + ")");
			ПолеИтога.Группировки.Добавить("ОбщийИтог");
			
		КонецЕсли;
		
	КонецЦикла;
	
	ПараметрыОтчета.Вставить("СоответствиеПлощадей", СоответствиеПлощадей);
	
	СоответствиеБлагоустройств = Новый Соответствие;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КВП_ВидыБлагоустройстваОбъектов.Код КАК Код,
	|	КВП_ВидыБлагоустройстваОбъектов.Наименование КАК Наименование,
	|	КВП_ВидыБлагоустройстваОбъектов.Ссылка КАК ВидБлагоустройства
	|ИЗ
	|	Справочник.КВП_ВидыБлагоустройстваОбъектов КАК КВП_ВидыБлагоустройстваОбъектов
	|ГДЕ
	|	НЕ КВП_ВидыБлагоустройстваОбъектов.ПометкаУдаления";
	
	ОписаниеТиповБлагоустройства = Метаданные.РегистрыСведений.КВП_БлагоустройствоОбъектов.Ресурсы.Значение.Тип;
	
	ВыборкаБлагоустройств = Запрос.Выполнить().Выбрать();
	Пока ВыборкаБлагоустройств.Следующий() Цикл
		ПолеИдентификатор = "Б"+УПЖКХ_ТиповыеМетодыСервер.ПреобразоватьСтрокуВДопустимоеНаименованиеКолонки(ВыборкаБлагоустройств.Код);
		Заголовок = ВыборкаБлагоустройств.Наименование;
		Если Набор.Поля.Найти(ПолеИдентификатор) = Неопределено Тогда
			ПолеНабораДанных = Набор.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
			ПолеНабораДанных.Поле        = ПолеИдентификатор;
			ПолеНабораДанных.Заголовок   = Заголовок;
			ПолеНабораДанных.ПутьКДанным = ПолеИдентификатор;
			ПолеНабораДанных.ТипЗначения = ОписаниеТиповБлагоустройства;
		КонецЕсли;
		//ТиповыеОтчеты.ДобавитьПолеИтога(мСхемаКомпоновки, Поле);
		СоответствиеБлагоустройств.Вставить(ПолеИдентификатор, ВыборкаБлагоустройств.ВидБлагоустройства);
		Если ПараметрыОтчета.ВыводитьДанныеПоКомнатам ИЛИ ПараметрыОтчета.ВыводитьДанныеПоСобственникам Тогда
			ПолеВл = ПолеИдентификатор + "Вл";
			Если Набор.Поля.Найти(ПолеВл) = Неопределено Тогда
				ПолеНабораДанных = Набор.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
				ПолеНабораДанных.Поле        = ПолеВл;
				ПолеНабораДанных.Заголовок   = Заголовок;
				ПолеНабораДанных.ПутьКДанным = ПолеВл;
				ПолеНабораДанных.ТипЗначения = ОписаниеТиповБлагоустройства;
				Если ПараметрыОтчета.ВыводитьДанныеПоКомнатам Тогда
					ПолеНабораДанных.ОграничениеИспользования.Условие = Истина;
					ПолеНабораДанных.ОграничениеИспользования.Порядок = Истина;
					ПолеНабораДанных.ОграничениеИспользованияРеквизитов.Условие = Истина;
					ПолеНабораДанных.ОграничениеИспользованияРеквизитов.Порядок = Истина;
				КонецЕсли;
				
			КонецЕсли;
			ПолеИтога = Схема.ПоляИтога.Добавить();
			ПолеИтога.ПутьКДанным = ПолеИдентификатор;
			ПолеИтога.Выражение = "МАКСИМУМ(" + ПолеВл + ")";
			ПолеИтога.Группировки.Добавить("Помещение");
		КонецЕсли;
	КонецЦикла;
	
	ПараметрыОтчета.Вставить("СоответствиеБлагоустройств", СоответствиеБлагоустройств);
КонецПроцедуры // ДобавитьПоляВНаборКомпоновки()

#КонецОбласти 

#КонецЕсли