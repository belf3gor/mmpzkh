&НаКлиенте
Перем ПараметрыОбработчикаОжидания;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	Отчет.Контрагент = Параметры.Контрагент;
	Если ЗначениеЗаполнено(Параметры.Организация) Тогда
		Отчет.Организация = Параметры.Организация;
	Иначе
		Отчет.Организация = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация");
	КонецЕсли;
	Если ЗначениеЗаполнено(Параметры.НалоговыйПериод) Тогда
		Отчет.ПериодРегистрации = Параметры.НалоговыйПериод;
	Иначе
//{{MRG[ <-> ]
		Отчет.ПериодРегистрации = НачалоКвартала(НачалоДня(ТекущаяДатаСеанса()) - 25 * 24 * 60 * 60);
//}}MRG[ <-> ]
//{{MRG[ <-> ]
//		Отчет.ПериодРегистрации = НачалоКвартала(ТекущаяДатаСеанса());
//}}MRG[ <-> ]
	КонецЕсли;
	
	ПредставлениеПериодаРегистрации = ВыборПериодаКлиентСервер.ПолучитьПредставлениеПериодаОтчета(
		Перечисления.ДоступныеПериодыОтчета.Квартал, 
		НачалоКвартала(Отчет.ПериодРегистрации), 
		КонецКвартала(Отчет.ПериодРегистрации));
		
	ОбновитьТекстЗаголовка(ЭтотОбъект);
	СкрытьПанель = ЗначениеЗаполнено(Параметры.Контрагент)
		И ЗначениеЗаполнено(Параметры.Организация)
		И ЗначениеЗаполнено(Параметры.НалоговыйПериод);
	ВывестиНужнуюПанельРезультатовСверки(СкрытьПанель);
	
	ЕстьПравоВывод = ПравоДоступа("Вывод", Метаданные);
//{{MRG[ <-> ]
	Элементы.ПечатьСразу.Видимость                      = ЕстьПравоВывод;
	Элементы.ПечатьСразуВсеДействия.Видимость           = ЕстьПравоВывод;
	Элементы.ГруппаЗагрузитьРеестр.Видимость            = ЕстьПравоВывод;
	Элементы.ГруппаЗагрузитьРеестрВсеДействия.Видимость = ЕстьПравоВывод;
	Элементы.СохранитьКакВсеДействия.Видимость          = ЕстьПравоВывод;
//}}MRG[ <-> ]
//{{MRG[ <-> ]
//	Элементы.ПечатьСразу.Видимость                = ЕстьПравоВывод;
//	Элементы.ПечатьСразуВсеДействия.Видимость     = ЕстьПравоВывод;
//	Элементы.ЗагрузитьРеестр.Видимость            = ЕстьПравоВывод;
//	Элементы.ЗагрузитьРеестрВсеДействия.Видимость = ЕстьПравоВывод;
//	Элементы.СохранитьКакВсеДействия.Видимость    = ЕстьПравоВывод;
//}}MRG[ <-> ]
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если ЗначениеЗаполнено(Отчет.Контрагент)
		И ЗначениеЗаполнено(Отчет.Организация)
		И ЗначениеЗаполнено(Отчет.ПериодРегистрации) Тогда
		ПодключитьОбработчикОжидания("Подключаемый_СформироватьОтчет", 0.1, Истина);
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "ФормированиеОтчета");
	Иначе
		УстановитьСостояниеПоляТабличногоДокументаНеАктуальность(Элементы.Результат);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_РеестрСчетовФактурПоставщика" 
//{{MRG[ <-> ]
		И Параметр.РежимСверки
		И Параметр.ИдентификаторВладельца = Строка(УникальныйИдентификатор)
//}}MRG[ <-> ]
//{{MRG[ <-> ]
//		И Источник = ЭтотОбъект
//		И Параметр.Свойство("Контрагент")
//}}MRG[ <-> ]
		И Параметр.Контрагент = Отчет.Контрагент
		И Параметр.Организация = Отчет.Организация
		И Параметр.НалоговыйПериод = Отчет.ПериодРегистрации Тогда
		ПодключитьОбработчикОжидания("Подключаемый_СформироватьОтчет", 0.1, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	
	Если ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОтменитьВыполнениеЗадания();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
 
#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПредставлениеПериодаРегистрацииНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПараметрыВыбора = Новый Структура("НачалоПериода,КонецПериода", 
		НачалоКвартала(Отчет.ПериодРегистрации), 
		КонецКвартала(Отчет.ПериодРегистрации));
	ОткрытьФорму("ОбщаяФорма.ВыборСтандартногоПериодаКвартал", ПараметрыВыбора, Элементы.ПредставлениеПериодаРегистрации);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеПериодаРегистрацииОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если ВыбранноеЗначение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ИзменитьПериод(ВыбранноеЗначение.НачалоПериода);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеПериодаРегистрацииОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолеОрганизацияПриИзменении(Элемент)
	
	ОбновитьТекстЗаголовка(ЭтотОбъект);
	
	Если НЕ ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		УстановитьСостояниеПоляТабличногоДокументаНеАктуальность(Элементы.Результат);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		УстановитьСостояниеПоляТабличногоДокументаНеАктуальность(Элементы.Результат);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьВсеРезультатыПриИзменении(Элемент)
	
	ПоказатьРезультатСверки();

КонецПроцедуры

&НаКлиенте
Процедура РезультатПриАктивизацииОбласти(Элемент)
	
	Если ТипЗнч(Результат.ВыделенныеОбласти) = Тип("ВыделенныеОбластиТабличногоДокумента") Тогда
		ИнтервалОжидания = ?(ПолучитьСкоростьКлиентскогоСоединения() = СкоростьКлиентскогоСоединения.Низкая, 1, 0.2);
		ПодключитьОбработчикОжидания("Подключаемый_РезультатПриАктивизацииОбластиПодключаемый", ИнтервалОжидания, Истина);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
 
#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура УменьшитьПериод(Команда)
	
	ИзменитьПериод(НачалоКвартала(Отчет.ПериодРегистрации - 1));
	
КонецПроцедуры

&НаКлиенте
Процедура УвеличитьПериод(Команда)
	
	ИзменитьПериод(КонецКвартала(Отчет.ПериодРегистрации) + 1);
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьОтчет(Команда)
	
	СформироватьОтчетНаКлиенте();
	
КонецПроцедуры

//{{MRG[ <-> ]
//#КонецОбласти
//#Область СлужебныеПроцедурыИФункции
//}}MRG[ <-> ]
&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьТекстЗаголовка(Форма)
	
	Отчет = Форма.Отчет;
	
	Форма.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='Сверка счетов-фактур с поставщиком%1'"),
		БухгалтерскиеОтчетыКлиентСервер.ПолучитьПредставлениеПериода(
			НачалоКвартала(Отчет.ПериодРегистрации), 
			КонецКвартала(Отчет.ПериодРегистрации)));
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьОтчетНаКлиенте()

	ОчиститьСообщения();
	
	ОтключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания");
	
	ОписаниеОшибки = "";
	РезультатВыполнения = СформироватьОтчетНаСервере(ОписаниеОшибки);
	Если НЕ РезультатВыполнения.ЗаданиеВыполнено Тогда
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "ФормированиеОтчета");
	ИначеЕсли ЗначениеЗаполнено(ОписаниеОшибки) Тогда
		Если ОписаниеОшибки = "РеестрНеЗагружен" Тогда
			Если ЕстьПравоВывод Тогда
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='За %1 г. реестр от ""%2"" еще не загружен.
					|
					|Загрузить реестр?'"),
					ПредставлениеПериодаРегистрации,
					Отчет.Контрагент);
				ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузитьРеестрЗавершение", ЭтотОбъект);
//{{MRG[ <-> ]
				ВариантыОтветов = Новый СписокЗначений;
//}}MRG[ <-> ]
//{{MRG[ <-> ]
//				ПоказатьВопрос(ОписаниеОповещения, ТекстСообщения, РежимДиалогаВопрос.ДаНет);
//}}MRG[ <-> ]
				ВариантыОтветов.Добавить("Почта" , НСтр("ru='Из почты'"));
				ВариантыОтветов.Добавить("Файл"  , НСтр("ru='Из файла'"));
				ВариантыОтветов.Добавить("Отмена", НСтр("ru='Отмена'"));
				ПоказатьВопрос(ОписаниеОповещения, ТекстСообщения, ВариантыОтветов);
				ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
				Возврат;
			Иначе
				ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='За %1 г. реестр от ""%2"" еще не загружен.'"),
					ПредставлениеПериодаРегистрации,
					Отчет.Контрагент);
			КонецЕсли;
		КонецЕсли;
		ПоказатьПредупреждение(, ОписаниеОшибки);
	КонецЕсли;
	Если СверкаВыполнена Тогда
		ТекущийЭлемент = Элементы.Результат;
	КонецЕсли;

КонецПроцедуры 

&НаСервере
Функция ПодготовитьПараметрыОтчета()
	
	ПараметрыОтчета = Новый Структура;
	ПараметрыОтчета.Вставить("НалоговыйПериод", Отчет.ПериодРегистрации);
	ПараметрыОтчета.Вставить("Организация",     Отчет.Организация);
	ПараметрыОтчета.Вставить("Контрагент",      Отчет.Контрагент);
	
	Возврат ПараметрыОтчета;
	
КонецФункции

&НаСервере
Функция СформироватьОтчетНаСервере(ОписаниеОшибки)
	
	Если Не ПроверитьЗаполнение() Тогда 
		Возврат Новый Структура("ЗаданиеВыполнено", Истина);
	КонецЕсли;
	
	ПоказатьВсеРезультаты = 1;
	
	ДлительныеОперации.ОтменитьВыполнениеЗадания(ИдентификаторЗадания);
	
	ИдентификаторЗадания = Неопределено;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеИспользовать");
	
	ПараметрыОтчета = ПодготовитьПараметрыОтчета();
	
	РезультатВыполнения = ДлительныеОперации.ЗапуститьВыполнениеВФоне(
		УникальныйИдентификатор, 
		"СверкаДанныхУчетаНДС.СформироватьСверкуСчетовФактур", 
		ПараметрыОтчета,
		БухгалтерскиеОтчетыКлиентСервер.ПолучитьНаименованиеЗаданияВыполненияОтчета(ЭтотОбъект));
	
	ИдентификаторЗадания = РезультатВыполнения.ИдентификаторЗадания;
	АдресХранилища       = РезультатВыполнения.АдресХранилища;
	
	Если РезультатВыполнения.ЗаданиеВыполнено Тогда
		ЗагрузитьПодготовленныеДанные(ОписаниеОшибки);
	КонецЕсли;
	
	Возврат РезультатВыполнения;
	
КонецФункции

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеЗадания()
	
	Попытка
		Если ЗаданиеВыполнено(ИдентификаторЗадания) Тогда
			ОписаниеОшибки = "";
			ЗагрузитьПодготовленныеДанные(ОписаниеОшибки);
			ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеИспользовать");
			Если ЗначениеЗаполнено(ОписаниеОшибки) Тогда
				Если ОписаниеОшибки = "РеестрНеЗагружен" Тогда
					Если ЕстьПравоВывод Тогда
						ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru='За %1 г. реестр от ""%2"" еще не загружен.
							|
							|Загрузить реестр?'"),
							ПредставлениеПериодаРегистрации,
							Отчет.Контрагент);
						ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузитьРеестрЗавершение", ЭтотОбъект);
//{{MRG[ <-> ]
						ВариантыОтветов = Новый СписокЗначений;
//}}MRG[ <-> ]
//{{MRG[ <-> ]
//						ПоказатьВопрос(ОписаниеОповещения, ТекстСообщения, РежимДиалогаВопрос.ДаНет);
//}}MRG[ <-> ]
						ВариантыОтветов.Добавить("Почта" , НСтр("ru='Из почты'"));
						ВариантыОтветов.Добавить("Файл"  , НСтр("ru='Из файла'"));
						ВариантыОтветов.Добавить("Отмена", НСтр("ru='Отмена'"));
						ПоказатьВопрос(ОписаниеОповещения, ТекстСообщения, ВариантыОтветов);
						ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
						Возврат;
					Иначе
						ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru='За %1 г. реестр от ""%2"" еще не загружен.'"),
							ПредставлениеПериодаРегистрации,
							Отчет.Контрагент);
					КонецЕсли;
				КонецЕсли;
				ПоказатьПредупреждение(, ОписаниеОшибки);
			КонецЕсли;
		Иначе
			ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
			ПодключитьОбработчикОжидания(
				"Подключаемый_ПроверитьВыполнениеЗадания",
				ПараметрыОбработчикаОжидания.ТекущийИнтервал,
				Истина);
		КонецЕсли;
	Исключение
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеИспользовать");
		ВызватьИсключение;
	КонецПопытки;

КонецПроцедуры

&НаСервере
Процедура ЗагрузитьПодготовленныеДанные(ОписаниеОшибки)

	РезультатВыполнения = ПолучитьИзВременногоХранилища(АдресХранилища);
	СверкаВыполнена     = НЕ РезультатВыполнения.Свойство("ОписаниеОшибки");
	
	ИдентификаторЗадания = Неопределено;
	
	Если СверкаВыполнена Тогда
		ЕстьРасхождения       = РезультатВыполнения.ЕстьРасхождения;
		ПоказатьВсеРезультаты = 1;
//{{MRG[ <-> ]
		ТабличныйДокументСверка      = РезультатВыполнения.Сверка;
		ТабличныйДокументРасхождения = РезультатВыполнения.Расхождения;
//}}MRG[ <-> ]
//{{MRG[ <-> ]
//		ТабличныйДокументВсе         = РезультатВыполнения.ТабличныйДокументВсе;
//		ТабличныйДокументРасхождения = РезультатВыполнения.ТабличныйДокументРасхождения;
//}}MRG[ <-> ]
		// Задаем имена файлов по умолчанию
		ПериодОтчета = БухгалтерскиеОтчетыКлиентСервер.ПолучитьПредставлениеПериода(
			НачалоКвартала(Отчет.ПериодРегистрации), 
			КонецКвартала(Отчет.ПериодРегистрации));
		Если ЗначениеЗаполнено(Отчет.Контрагент) Тогда
			ИмяФайлаСверка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Сверка%1 между %2 и %3'"),
				ПериодОтчета,
				Отчет.Контрагент,
				Отчет.Организация);
			ИмяФайлаРасхождения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Расхождения по сверке%1 между %2 и %3'"),
				ПериодОтчета,
				Отчет.Контрагент,
				Отчет.Организация);
		Иначе
			ИмяФайлаСверка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Сверка%1 по %2'"),
				ПериодОтчета,
				Отчет.Организация);
			ИмяФайлаРасхождения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Расхождения по сверке%1 по %2'"),
				ПериодОтчета,
				Отчет.Организация);
		КонецЕсли;
		ТабличныйДокументСверка.ИспользуемоеИмяФайла = ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла(
			СтрЗаменить(ИмяФайлаСверка, ".", " "));
		ТабличныйДокументРасхождения.ИспользуемоеИмяФайла = ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла(
			СтрЗаменить(ИмяФайлаРасхождения, ".", " "));
	Иначе
		ОписаниеОшибки = РезультатВыполнения.ОписаниеОшибки;
	КонецЕсли;
	
	ПоказатьРезультатСверки();

КонецПроцедуры

&НаСервере
Процедура ПоказатьРезультатСверки()

	Результат.Очистить();
	
	Если СверкаВыполнена Тогда
		Если НЕ ЕстьРасхождения
			ИЛИ ПоказатьВсеРезультаты = 1 Тогда
//{{MRG[ <-> ]
			Результат.Вывести(ТабличныйДокументСверка);
			Элементы.Результат.ИспользуемоеИмяФайла = ТабличныйДокументСверка.ИспользуемоеИмяФайла;
//}}MRG[ <-> ]
//{{MRG[ <-> ]
//			Результат.Вывести(ТабличныйДокументВсе);
//			Элементы.Результат.ИспользуемоеИмяФайла = ТабличныйДокументВсе.ИспользуемоеИмяФайла;
//}}MRG[ <-> ]
		Иначе
			Результат.Вывести(ТабличныйДокументРасхождения);
			Элементы.Результат.ИспользуемоеИмяФайла = ТабличныйДокументРасхождения.ИспользуемоеИмяФайла;
		КонецЕсли;
		Результат.АвтоМасштаб = Истина;
		Результат.ОриентацияСтраницы   = ОриентацияСтраницы.Ландшафт;
		Результат.ЧерноБелаяПечать     = Истина;
		Результат.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_СверкаСчетовФактур";
	
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеИспользовать");
		
	КонецЕсли;
	
	ВывестиНужнуюПанельРезультатовСверки();

КонецПроцедуры

&НаСервере
Процедура ОтменитьВыполнениеЗадания()
	
	ДлительныеОперации.ОтменитьВыполнениеЗадания(ИдентификаторЗадания);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаданиеВыполнено(ИдентификаторЗадания)
	
	Возврат ДлительныеОперации.ЗаданиеВыполнено(ИдентификаторЗадания);
	
КонецФункции

&НаСервере
Процедура ВычислитьСуммуВыделенныхЯчеекТабличногоДокументаВКонтекстеНаСервере()
	
	ПолеСумма = БухгалтерскиеОтчетыВызовСервера.ВычислитьСуммуВыделенныхЯчеекТабличногоДокумента(
		Результат, КэшВыделеннойОбласти);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_РезультатПриАктивизацииОбластиПодключаемый()
	
	НеобходимоВычислятьНаСервере = Ложь;
	БухгалтерскиеОтчетыКлиент.ВычислитьСуммуВыделенныхЯчеекТабличногоДокумента(
		ПолеСумма, Результат, КэшВыделеннойОбласти, НеобходимоВычислятьНаСервере);
	
	Если НеобходимоВычислятьНаСервере Тогда
		ВычислитьСуммуВыделенныхЯчеекТабличногоДокументаВКонтекстеНаСервере();
	КонецЕсли;
	
	ОтключитьОбработчикОжидания("Подключаемый_РезультатПриАктивизацииОбластиПодключаемый");
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СформироватьОтчет()

	СформироватьОтчетНаКлиенте();

КонецПроцедуры

&НаКлиенте
Процедура ИзменитьПериод(НовыйПериод)

	Отчет.ПериодРегистрации = НовыйПериод;
	ПредставлениеПериодаРегистрации = ВыборПериодаКлиентСервер.ПолучитьПредставлениеПериодаОтчета(
		ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.Квартал"), 
		НачалоКвартала(Отчет.ПериодРегистрации),
		КонецКвартала(Отчет.ПериодРегистрации));
	
	ОбновитьТекстЗаголовка(ЭтотОбъект);
	
	Если НЕ ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		УстановитьСостояниеПоляТабличногоДокументаНеАктуальность(Элементы.Результат);
	КонецЕсли;
	
КонецПроцедуры 

&НаСервере
Процедура ВывестиНужнуюПанельРезультатовСверки(СкрытьПанель = Ложь)
	
	Элементы.РезультатыСверки.Видимость = НЕ СкрытьПанель;
	Если НЕ СкрытьПанель Тогда
		Если СверкаВыполнена Тогда
			Если ЕстьРасхождения Тогда
				Элементы.РезультатыСверки.ТекущаяСтраница = Элементы.РезультатЕстьРасхождения;
				Если ЗначениеЗаполнено(Отчет.Контрагент) Тогда
					Элементы.ТекстЕстьРасхождения.Заголовок = 
						НСтр("ru='Обнаружены расхождения данных поставщика с нашими данными.'");
				Иначе
					Элементы.ТекстЕстьРасхождения.Заголовок = 
						НСтр("ru='Обнаружены расхождения данных поставщиков с нашими данными.'");
				КонецЕсли;
			Иначе
				Элементы.РезультатыСверки.ТекущаяСтраница = Элементы.РезультатДанныеСовпадают;
				Если ЗначениеЗаполнено(Отчет.Контрагент) Тогда
					Элементы.ТекстДанныеСовпадают.Заголовок = 
						НСтр("ru='Расхождений данных поставщика с нашими данными не обнаружено.'");
				Иначе
					Элементы.ТекстДанныеСовпадают.Заголовок = 
						НСтр("ru='Расхождений данных поставщиков с нашими данными не обнаружено.'");
				КонецЕсли;
			КонецЕсли;
		Иначе
			Элементы.РезультатыСверки.ТекущаяСтраница = Элементы.ГруппаУсловияПолученияСервиса;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьРеестрЗавершение(Ответ, ДопПараметры) Экспорт
	Если Ответ = "Файл" Тогда
//{{MRG[ <-> ]
		ОткрытьФормуЗагрузкиРеестраИзФайла();
//}}MRG[ <-> ]
//{{MRG[ <-> ]
//	Если Ответ = КодВозвратаДиалога.Да Тогда
//		ОткрытьФормуЗагрузкиРеестра();
//}}MRG[ <-> ]
		
	ИначеЕсли Ответ = "Почта" Тогда
		ОткрытьФормуЗагрузкиРеестраИзПочты();
		
	КонецЕсли;
КонецПроцедуры
//{{MRG[ <-> ]
//КонецПроцедуры 
//}}MRG[ <-> ]

//{{MRG[ <-> ]
//// <Описание процедуры>
////
//// Параметры:
////  <Параметр1>  - <Тип.Вид> - <описание параметра>
////                 <продолжение описания параметра>
////  <Параметр2>  - <Тип.Вид> - <описание параметра>
////                 <продолжение описания параметра>
////
//}}MRG[ <-> ]
&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьСостояниеПоляТабличногоДокументаНеАктуальность(ПолеТабличногоДокумента)

	ОтображениеСостояния = ПолеТабличногоДокумента.ОтображениеСостояния;
	ОтображениеСостояния.Видимость = Истина;
	ОтображениеСостояния.Картинка  = Новый Картинка;
	ОтображениеСостояния.Текст     = НСтр("ru = 'Отчет не сформирован. Нажмите ""Сверить"" для получения отчета.'");
	ОтображениеСостояния.ДополнительныйРежимОтображения = ДополнительныйРежимОтображения.Неактуальность;

КонецПроцедуры 

&НаКлиенте
Процедура ОтправитьПоЭлектроннойПочте(Команда)
	
	Если НЕ ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ОтчетСформирован() Тогда
		СформироватьОтчетПередОтправкойПоПочте();
	Иначе
		ОтправитьПоЭлектроннойПочтеСформированныйОтчет();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьРеестрИзПочты(Команда)
	
	ОткрытьФормуЗагрузкиРеестраИзПочты();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьРеестрИзФайла(Команда)
	
	ОткрытьФормуЗагрузкиРеестраИзФайла();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Функция ОтчетСформирован()
	
	ОтчетСформирован = Истина;
	
	ОтображениеСостояния = Элементы.Результат.ОтображениеСостояния;
	Если ОтображениеСостояния.ДополнительныйРежимОтображения = ДополнительныйРежимОтображения.Неактуальность Тогда
		ОтчетСформирован = Ложь;
	КонецЕсли;
	
	Возврат ОтчетСформирован;
	
КонецФункции

&НаКлиенте
Процедура ОткрытьФормуЗагрузкиРеестраИзПочты()
	
	Если НЕ ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ЗагрузитьРеестрИзПочтыЗавершение", ЭтотОбъект);
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("ВариантЗагрузкиЭД", ПредопределенноеЗначение("Перечисление.ВариантыЗагрузкиЭД.РеестрСчетовФактур"));
	ДопПараметры.Вставить("ГлубинаПоиска"    , 30);
	ДопПараметры.Вставить("Контрагент"       , Отчет.Контрагент);
	ДопПараметры.Вставить("Организация"      , Отчет.Организация);
	ДопПараметры.Вставить("НалоговыйПериод"  , Отчет.ПериодРегистрации);
	
	ОткрытьФорму("Обработка.ПрямойОбменЭД.Форма.Форма", ДопПараметры, ЭтотОбъект, , , , Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьРеестрИзПочтыЗавершение(РезультатЗагрузки, ДопПараметры = Неопределено) Экспорт
	
	Если ТипЗнч(РезультатЗагрузки) = Тип("Структура") И РезультатЗагрузки.Свойство("РеестрыЗагружены")
		И РезультатЗагрузки.РеестрыЗагружены Тогда
		СформироватьОтчетНаКлиенте();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуЗагрузкиРеестраИзФайла()
	
	ПараметрыФормы = Новый Структура("РежимСверки,ИдентификаторВладельца", Истина, Строка(УникальныйИдентификатор));
	ОткрытьФорму("Документ.РеестрСчетовФактурПоставщика.Форма.ЗагрузкаИзФайла", ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

#Область ЭлектроннаяПочта

&НаКлиенте
Процедура СформироватьОтчетПередОтправкойПоПочте()
	
	ОтключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗаданияПередОтправкойПоПочте");
	
	СформироватьОтчетНаКлиенте();
	Если НЕ ОтчетСформирован() Тогда
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗаданияПередОтправкойПоПочте", 1, Истина);
	Иначе
		ОтправитьПоЭлектроннойПочтеСформированныйОтчет();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьПоЭлектроннойПочтеСформированныйОтчет()
	
	ОтправкаПочтовыхСообщенийКлиент.ОтправитьОтчет(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеЗаданияПередОтправкойПоПочте()
	
	Если ОтчетСформирован() Тогда
		ОтключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗаданияПередОтправкойПоПочте");
		ОтправитьПоЭлектроннойПочтеСформированныйОтчет();
	ИначеЕсли ЗначениеЗаполнено(ПараметрыОбработчикаОжидания) Тогда
		ПодключитьОбработчикОжидания(
			"Подключаемый_ПроверитьВыполнениеЗаданияПередОтправкойПоПочте",
			ПараметрыОбработчикаОжидания.ТекущийИнтервал,
			Истина);
	Иначе
		ПодключитьОбработчикОжидания(
			"Подключаемый_ПроверитьВыполнениеЗаданияПередОтправкойПоПочте",
			2,
			Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьРеестр(Команда)
	
	ОткрытьФормуЗагрузкиРеестра();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуЗагрузкиРеестра()

	ПараметрыФормы = Новый Структура("РежимСверки", Истина);
	ОткрытьФорму("Документ.РеестрСчетовФактурПоставщика.Форма.ЗагрузкаИзФайла", ПараметрыФормы, ЭтотОбъект);
		
КонецПроцедуры

#КонецОбласти

#КонецОбласти
