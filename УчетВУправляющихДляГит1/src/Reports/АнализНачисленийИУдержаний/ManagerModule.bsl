#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ВариантыОтчетов

// См. ВариантыОтчетовПереопределяемый.НастроитьВариантыОтчетов.
//
Процедура НастроитьВариантыОтчета(Настройки, НастройкиОтчета) Экспорт
	
	НастройкиОтчета.ОпределитьНастройкиФормы = Истина;
	
	НастройкиВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, НастройкиОтчета, "АнализЗарплатыПоПодразделениямИСотрудникамЗаПериод");
	НастройкиВарианта.Описание =
		НСтр("ru = 'Начисления, удержания и выплаты по сотрудникам, выведенные сводно за весь 
		|период отчета. Сальдо выводится на начало и на конец заданного периода.'");
	
	НастройкиВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, НастройкиОтчета, "АнализЗарплатыПоПодразделениямИСотрудникам");
	НастройкиВарианта.Описание =
		НСтр("ru = 'Начисления, удержания и выплаты по сотрудникам, сгруппированные помесячно. 
		|Сальдо выводится на начало и на конец каждого месяца, включенного в период формирования отчета.'");
	
	НастройкиВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, НастройкиОтчета, "АнализЗарплатыПоИсточникамФинансирования");
	НастройкиВарианта.Описание =
		НСтр("ru = 'Начисления, удержания и выплаты по сотрудникам, сгруппированные помесячно и
		|выведенные в разрезе источников финансирования. Аналог отчета ""Анализ
		|зарплаты по сотрудникам (помесячно)"", но с точностью до источников финансирования.'");
	
	НастройкиВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, НастройкиОтчета, "ВедомостиСРазбивкойПоИсточникамФинансирования");
	НастройкиВарианта.Описание = НСтр("ru = 'По каждой статье финансирования выводится отдельная ведомость.'");
	
	НастройкиВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, НастройкиОтчета, "КраткийСводНачисленийИУдержаний");
	НастройкиВарианта.Описание =
		НСтр("ru = 'Свод начислений и удержаний, попавших в расчетные ведомости
		|и расчетные листки.'");
	
	НастройкиВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, НастройкиОтчета, "КраткийСводПоИсточникамФинансирования");
	НастройкиВарианта.Описание =
		НСтр("ru = 'Свод начислений и удержаний, попавших в расчетные ведомости
		|и расчетные листки с разбиением по источникам финансирования.'");
	
	НастройкиВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, НастройкиОтчета, "ПолныйСводНачисленийУдержанийИВыплат");
	НастройкиВарианта.Описание =
		НСтр("ru = 'Свод начислений (с количеством оплаченных дней и часов), удержаний, выплат, 
		|а также начальное и конечное сальдо взаиморасчетов с сотрудниками.'");
	
	НастройкиВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, НастройкиОтчета, "СводПоИсточникамФинансирования");
	НастройкиВарианта.Описание =
		НСтр("ru = 'Свод начислений (с количеством оплаченных дней и часов), удержаний, выплат, 
		|а также начальное и конечное сальдо взаиморасчетов с сотрудниками с разбивкой по источникам финансирования.'");
	
	НастройкиВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, НастройкиОтчета, "Т49");
	НастройкиВарианта.Описание = НСтр("ru = 'Расчетно-платежная ведомость (Т-49).'");
	
	НастройкиВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, НастройкиОтчета, "Т51");
	НастройкиВарианта.Описание = НСтр("ru = 'Расчетная ведомость (Унифицированная форма Т-51).'");
	
	НастройкиВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, НастройкиОтчета, "РасчетныйЛисток");
	НастройкиВарианта.Описание = НСтр("ru = 'Расчетные листки могут выводиться с разбивкой по подразделениям.'");
	
	НастройкиВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, НастройкиОтчета, "РасчетныйЛистокСРазбивкойПоИсточникамФинансирования");
	НастройкиВарианта.Описание = НСтр("ru = 'Расчетные листки, разбитые по источникам финансирования.'");
	
	НастройкиВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, НастройкиОтчета, "УдержанияИзЗарплаты");
	НастройкиВарианта.Описание =
		НСтр("ru = 'Удержания по видам и общий процент удержаний по отношению к начислениям.
		|Цветом выделены сотрудники с размером удержаний более 20%.'");
	
	НастройкиВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, НастройкиОтчета, "УдержанияВРазрезеИсточниковФинансирования");
	НастройкиВарианта.Описание =
		НСтр("ru = 'Удержания по видам и общий процент удержаний по отношению к начислениям в разрезе источников финансирования.
		|Цветом выделены сотрудники с размером удержаний более 20%.'");
	
	НастройкиВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, НастройкиОтчета, "РегламентированнаяФормаСправкаПоДСВ");
	НастройкиВарианта.Описание = 
		НСтр("ru = 'Справка об уплаченных налогоплательщиком суммах дополнительных страховых взносов
		|на накопительную часть трудовой пенсии.'");
	
	НастройкиВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, НастройкиОтчета, "РасчетныйЛистокПоРабочимМестам");
	НастройкиВарианта.Описание = НСтр("ru = 'Расчетные листки с разбивкой по рабочим местам могут выводиться по подразделениям.'");
	
	НастройкиВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, НастройкиОтчета, "РасчетныйЛистокПоРабочимМестамИСРазбивкойПоИсточникамФинансирования");
	НастройкиВарианта.Описание = НСтр("ru = 'Расчетные листки с разбивкой по рабочим местам и по источникам финансирования.'");
	
	НастройкиВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, НастройкиОтчета, "13ФО");
	НастройкиВарианта.Включен = Ложь;
	
	НастройкиВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, НастройкиОтчета, "Форма0504401");
	НастройкиВарианта.Описание = НСтр("ru = 'Расчетно-платежная ведомость для передачи в кассу (форма 0504401).'");
	
	НастройкиВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, НастройкиОтчета, "Форма0504401с2015");
	НастройкиВарианта.Описание = НСтр("ru = 'Расчетно-платежная ведомость для передачи в кассу, действующая с 2015 года (форма 0504401).'");
	
	НастройкиВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, НастройкиОтчета, "Форма0504402");
	НастройкиВарианта.Описание = НСтр("ru = 'Расчетная ведомость (форма 0504402).'");
		
	НастройкиВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, НастройкиОтчета, "РасчетныйЛистокУправленческий");
	НастройкиВарианта.Описание = НСтр("ru = 'Расчетные листки по управленческой заработной плате.'");
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ВариантыОтчетов

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "РасчетныйЛистокПодробнее") Тогда
		
		ПечатаемыйДокумент = Неопределено;
		Если МассивОбъектов.Количество() > 1 Тогда
			ПечатаемыйДокумент = МассивОбъектов[1];
			МассивОбъектов.Удалить(1);
		КонецЕсли;
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"РасчетныйЛистокПодробнее",
			НСтр("ru = 'Расчетный листок'"),
			ПечатаемыйДокумент);
						
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "АнализЗарплатыПоПодразделениямИСотрудникамЗаПериод") Тогда
		
		ПечатаемыйДокумент = Неопределено;
		Если МассивОбъектов.Количество() > 1 Тогда
			ПечатаемыйДокумент = МассивОбъектов[1];
			МассивОбъектов.Удалить(1);
		КонецЕсли;
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"АнализЗарплатыПоПодразделениямИСотрудникамЗаПериод",
			НСтр("ru = 'Анализ зарплаты'"),
			ПечатаемыйДокумент);
	
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПолныйСводНачисленийУдержанийИВыплат") Тогда
		
		ПечатаемыйДокумент = Неопределено;
		Если МассивОбъектов.Количество() > 1 Тогда
			ПечатаемыйДокумент = МассивОбъектов[1];
			МассивОбъектов.Удалить(1);
		КонецЕсли;
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"ПолныйСводНачисленийУдержанийИВыплат",
			НСтр("ru = 'Свод начислений и удержаний'"),
			ПечатаемыйДокумент);
	
	КонецЕсли;
	
КонецПроцедуры

Функция ПечатьТ49(Документ) Экспорт
	
	ОтчетОбъект = Отчеты.АнализНачисленийИУдержаний.Создать();
	ОтчетОбъект.ИнициализироватьОтчет();
	
	ВариантОтчета = ОтчетОбъект.СхемаКомпоновкиДанных.ВариантыНастроек.Найти("Т49");
	Если ВариантОтчета= Неопределено Тогда
		Возврат Новый ТабличныйДокумент;
	КонецЕсли;
	
	НастройкиОтчета = ВариантОтчета.Настройки;
	
	РеквизитыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Документ, "ПериодРегистрации,Организация,Подразделение");
	
	Период = РеквизитыДокумента.ПериодРегистрации;
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Период", Новый СтандартныйПериод(НачалоМесяца(Период), КонецМесяца(Период)));
	СтруктураПараметров.Вставить("НачалоПериода",				НачалоМесяца(Период));
	СтруктураПараметров.Вставить("КонецПериода",				КонецМесяца(Период));
	
	Для каждого ПараметрЗаполнения Из СтруктураПараметров Цикл
		
		ПараметрКомпоновкиДанных = Новый ПараметрКомпоновкиДанных(ПараметрЗаполнения.Ключ);
		ЗначениеПараметра = НастройкиОтчета.ПараметрыДанных.НайтиЗначениеПараметра(ПараметрКомпоновкиДанных);
		Если ЗначениеПараметра <> Неопределено Тогда
			ЗначениеПараметра.Значение = ПараметрЗаполнения.Значение;
			ЗначениеПараметра.Использование = Истина;
		Иначе
			НовыйПараметр = НастройкиОтчета.ПараметрыДанных.Элементы.Добавить();
			НовыйПараметр.Параметр = ПараметрКомпоновкиДанных;
			НовыйПараметр.Значение = ПараметрЗаполнения.Значение;
			НовыйПараметр.Использование = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	ДанныеВедомости = Документы[Документ.Метаданные().Имя].ДанныеВедомостиДляПечати(Документ);
	СписокСотрудников = ДанныеВедомости.ВыгрузитьКолонку("Сотрудник");
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
		НастройкиОтчета.Отбор, "Регистратор", Документ, ВидСравненияКомпоновкиДанных.НеРавно, , Истина);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
		НастройкиОтчета.Отбор, "Сотрудник.ГоловнойСотрудник", СписокСотрудников, ВидСравненияКомпоновкиДанных.ВСписке, , Истина);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
		НастройкиОтчета.Отбор, "Организация", РеквизитыДокумента.Организация, ВидСравненияКомпоновкиДанных.Равно, , Истина);
	
	Если ЗначениеЗаполнено(РеквизитыДокумента.Подразделение) Тогда
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
			НастройкиОтчета.Отбор, "Подразделение", РеквизитыДокумента.Подразделение, ВидСравненияКомпоновкиДанных.ВИерархии, , Истина);
		
	КонецЕсли;
	
	ОтчетОбъект.КомпоновщикНастроек.ЗагрузитьНастройки(НастройкиОтчета);
	
	ОтчетОбъект.КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("Документ", Документ);
	ОтчетОбъект.КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ДанныеВедомости", ДанныеВедомости);
	Если ЗначениеЗаполнено(РеквизитыДокумента.Подразделение) Тогда
		ОтчетОбъект.КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ПодразделениеВШапке", РеквизитыДокумента.Подразделение);
	КонецЕсли;
	
	ДокументРезультат = Новый ТабличныйДокумент;
	
	ОтчетОбъект.СкомпоноватьРезультат(ДокументРезультат);
	
	Возврат ДокументРезультат;
	
КонецФункции

Функция РасчетныйЛисток(ФизическиеЛица, Организация, МесяцФормированияОтчета, ОтчетРасчетныйЛисток = Неопределено) Экспорт
	
	Если ТипЗнч(ФизическиеЛица) = Тип("Массив")
		Или ТипЗнч(ФизическиеЛица) = Тип("ФиксированныйМассив") Тогда
		
		ФизическиеЛицаОтчета = ФизическиеЛица;
		
	Иначе
		ФизическиеЛицаОтчета = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ФизическиеЛица);
	КонецЕсли;
	
	ДокументРезультат = Новый ТабличныйДокумент;
	ДокументРезультат.АвтоМасштаб = Истина;
	ДокументРезультат.ОтображатьЗаголовки = Ложь;
	ДокументРезультат.ОтображатьСетку = Ложь;
	
	Если ОтчетРасчетныйЛисток = Неопределено Тогда
		ОтчетРасчетныйЛисток = ЗарплатаКадрыОтчеты.ОтчетРасчетныйЛисток();
	КонецЕсли;
	
	// Заполнение параметров скомпонованного макета
	ПериодОтчета = Новый СтандартныйПериод;
	ПериодОтчета.ДатаНачала    = НачалоМесяца(МесяцФормированияОтчета);
	ПериодОтчета.ДатаОкончания = КонецМесяца(МесяцФормированияОтчета);
	
	ОтчетРасчетныйЛисток.КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("Период", ПериодОтчета);
	
	МакетКомпоновкиДанных = ОтчетРасчетныйЛисток.КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства.МакетКомпоновкиДанных;
	
	Для каждого Параметр Из МакетКомпоновкиДанных.ЗначенияПараметров Цикл
		
		ПараметрКомпоновщика = Лев(Параметр.Имя, 1) = "П" И СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(Сред(Параметр.Имя, 2));
		
		Если ТипЗнч(Параметр.Значение) = Тип("Дата") Тогда
			
			Если Параметр.Значение = НачалоДня(Параметр.Значение) Тогда
				Параметр.Значение = ПериодОтчета.ДатаНачала;
			Иначе
				Параметр.Значение = ПериодОтчета.ДатаОкончания;
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(Параметр.Значение) = Тип("СтандартныйПериод") Тогда
			
			Параметр.Значение = ПериодОтчета;
			
		ИначеЕсли ПараметрКомпоновщика И
			(ТипЗнч(Параметр.Значение) = Тип("Массив")
				Или ТипЗнч(Параметр.Значение) = Тип("СправочникСсылка.ФизическиеЛица")) Тогда
			
			Параметр.Значение = ФизическиеЛицаОтчета;
			
		ИначеЕсли ТипЗнч(Параметр.Значение) = Тип("СправочникСсылка.Организации") Тогда
			
			// Могут быть уже установленные отборы по предопределенным объектам справочника
			Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Параметр.Значение, "Предопределенный") <> Истина Тогда
				Параметр.Значение = Организация;
			КонецЕсли;
			
		ИначеЕсли Параметр.Имя = "ИсключаемыеСсылки" Тогда
			
			ПараметрНастроек = ОтчетРасчетныйЛисток.КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("ИсключаемыеСсылки");
			Если ПараметрНастроек <> Неопределено
				И ЗначениеЗаполнено(ПараметрНастроек.Значение) Тогда
				
				Параметр.Значение = ПараметрНастроек.Значение;
				
			Иначе
				Параметр.Значение = Неопределено;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Формирование расчетного листка
	ОтчетРасчетныйЛисток.СкомпоноватьРезультат(ДокументРезультат);
	
	Возврат ДокументРезультат;
	
КонецФункции

#КонецОбласти

#КонецЕсли