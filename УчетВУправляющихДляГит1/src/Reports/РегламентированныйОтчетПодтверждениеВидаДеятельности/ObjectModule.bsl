#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныеПроцедурыИФункции

#Область ФормированиеРегламентированногоОтчета

Функция СформироватьАвтоматическиРеглОтчет(ПараметрыАвтоформирования, КорректирующийОтчет) Экспорт
	
	ИмяФормы = ПараметрыАвтоформирования.ИмяФормыОтчета;
	
	РазделыОтчета = РазделыРеглОтчета(ИмяФормы);
			
	ДанныеРеглОтчета = Новый Структура;
	ДанныеРеглОтчета.Вставить("ДатаПодписи", ТекущаядатаСеанса());
	
	ПараметрыАвтоФормирования.Вставить("ДатаПодписи", ДанныеРеглОтчета.ДатаПодписи);
					
	ДеревоСтраницОтчета = СтруктураСтраницОтчета(ИмяФормы);
	
	ДанныеРеглОтчета.Вставить("ДеревоСтраницОтчета", ДеревоСтраницОтчета);
	
	ЗаполнитьРеглОтчет(ИмяФормы,
					   ПараметрыАвтоформирования,
					   КорректирующийОтчет,
					   РазделыОтчета,
					   ДанныеРеглОтчета);
		
	РазделыОтчета.Приложение1.Данные.ДатаПодписи = ДанныеРеглОтчета.ДатаПодписи;
			
	ДанныеРеглОтчета.Вставить("СтруктураВариантыЗаполнения", Новый Структура);
	СформироватьВариантыЗаполнения(ИмяФормы,
								   ДанныеРеглОтчета.СтруктураРеквизитовФормы,
								   ДанныеРеглОтчета.СтруктураВариантыЗаполнения);	
								   
	Для Индекс = 1 По 3 Цикл
								   
		ЗаполнитьСведенияОбОрганизации(ИмяФормы,
								   	   РазделыОтчета["Приложение" + Индекс].Данные,
								   	   ДанныеРеглОтчета.СтруктураРеквизитовФормы,
								   	   ДанныеРеглОтчета.ДатаПодписи);
									   
		ЗаполнитьДатуВЯчейках(ИмяФормы,
							  РазделыОтчета["Приложение" + Индекс].Данные,
							  ДанныеРеглОтчета.ДатаПодписи);
								   
	КонецЦикла;
													  
	ПараметрыЗаписи = Новый Структура;
	ПараметрыЗаписи.Вставить("ИсточникОтчета", ПараметрыАвтоформирования.ИсточникОтчета);
	ПараметрыЗаписи.Вставить("ИмяФормыОтчета", ПараметрыАвтоформирования.ИмяФормыОтчета);
	ПараметрыЗаписи.Вставить("Организация", ПараметрыАвтоформирования.Организация);
	ПараметрыЗаписи.Вставить("ДатаНачала", ПараметрыАвтоформирования.ДатаНачала);
	ПараметрыЗаписи.Вставить("ДатаОкончания", ПараметрыАвтоформирования.ДатаОкончания);
	ПараметрыЗаписи.Вставить("СохраняемыйРеглОтчет", ПараметрыАвтоформирования.СсылкаНаСохрРеглОтчет);
	ПараметрыЗаписи.Вставить("Ошибки", ПараметрыАвтоформирования.Ошибки);
	ПараметрыЗаписи.Вставить("ДатаПодписи", ДанныеРеглОтчета.ДатаПодписи);
	ПараметрыЗаписи.Вставить("ЕдиницаИзмерения", Перечисления.ПорядкиОкругленияОтчетности.Окр1000);
	ПараметрыЗаписи.Вставить("ТочностьЕдиницыИзмерения", 0);
	ПараметрыЗаписи.Вставить("Комментарий", "");
	ПараметрыЗаписи.Вставить("СтруктураРеквизитовФормы", ДанныеРеглОтчета.СтруктураРеквизитовФормы);
	ПараметрыЗаписи.Вставить("СтруктураВариантыЗаполнения", ДанныеРеглОтчета.СтруктураВариантыЗаполнения);
	ПараметрыЗаписи.Вставить("ВерсияФормы", ДанныеРеглОтчета.СтруктураРеквизитовФормы.мВерсияФормы);
	ПараметрыЗаписи.Вставить("ФлОтклВыборЗначений", Ложь);
	ПараметрыЗаписи.Вставить("Автозаполнение", Ложь);
	ПараметрыЗаписи.Вставить("ФлПодсчетСтраниц", Неопределено);
	ПараметрыЗаписи.Вставить("ДеревоСтраницОтчета", ДеревоСтраницОтчета);
	ПараметрыЗаписи.Вставить("Вариант", ?(КорректирующийОтчет, 1, 0));
	ПараметрыЗаписи.Вставить("РазделыОтчета", РазделыОтчета);
	ПараметрыЗаписи.Вставить("Редакция75н", ДанныеРеглОтчета.СтруктураРеквизитовФормы.Редакция75н);
	ПараметрыЗаписи.Вставить("НаименованиеОтчета", ДанныеРеглОтчета.СтруктураРеквизитовФормы.НаименованиеОтчета);
	 				
	Возврат ЗаписатьРеглОтчет(ИмяФормы, ПараметрыЗаписи);
	
КонецФункции

Процедура СформироватьСтруктуруРеквизитовФормы(ИмяФормы, СтруктураРеквизитовФормы) Экспорт
	
	СтруктураРеквизитовФормы = Новый Структура;
	
	Если ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2013Кв1") Тогда
		СтруктураРеквизитовФормы.Вставить("мВерсияФормы", "25/01/2017");
	КонецЕсли;
	СтруктураРеквизитовФормы.Вставить("мСоставПоказателей", "СоставПоказателей" + Прав(СокрЛП(ИмяФормы), 7));
	СтруктураРеквизитовФормы.Вставить("НаименованиеОтчета", "Подтверждение вида деятельности");
	СтруктураРеквизитовФормы.Вставить("мЧтоОчищать", "Документы");
	СтруктураРеквизитовФормы.Вставить("мКодОтчета", "1159980");
	СтруктураРеквизитовФормы.Вставить("ИдМСЧ_Приложение2", "П0000200001");
	СтруктураРеквизитовФормы.Вставить("ИдМСЧ_Приложение3", "П0000300001");
	СтруктураРеквизитовФормы.Вставить("мПечатныеФормы", Новый СписокЗначений);
	СтруктураРеквизитовФормы.Вставить("СписокПечатаемыхЛистов", Новый СписокЗначений);
	СтруктураРеквизитовФормы.Вставить("ФлажокОтклАвтоРасчет", Ложь);
	СтруктураРеквизитовФормы.Вставить("Редакция75н", Истина);
	СтруктураРеквизитовФормы.Вставить("ОтображатьКнопкуЗаполнить", Ложь);
	СтруктураРеквизитовФормы.Вставить("ОтображатьКнопкуРасшифровать", Ложь);
	СтруктураРеквизитовФормы.Вставить("ИзмененаОрганизация", Ложь);
	СтруктураРеквизитовФормы.Вставить("мВыбраннаяФорма");
	СтруктураРеквизитовФормы.Вставить("мСкопированаФорма");
	СтруктураРеквизитовФормы.Вставить("мСохраненныйДок");
	СтруктураРеквизитовФормы.Вставить("мДатаНачалаПериодаОтчета");
	СтруктураРеквизитовФормы.Вставить("мДатаКонцаПериодаОтчета");
	СтруктураРеквизитовФормы.Вставить("мСчетчикСтраниц");
	СтруктураРеквизитовФормы.Вставить("мАвтоВыборКодов");
	СтруктураРеквизитовФормы.Вставить("мВариант");
	СтруктураРеквизитовФормы.Вставить("мБезОткрытияФормы");
	СтруктураРеквизитовФормы.Вставить("мРежимПечати");
	СтруктураРеквизитовФормы.Вставить("СтрПериодОтчета");
	СтруктураРеквизитовФормы.Вставить("НаимТекущегоРаздела");
	СтруктураРеквизитовФормы.Вставить("Организация");
	СтруктураРеквизитовФормы.Вставить("ЕдиницаИзмерения");
	СтруктураРеквизитовФормы.Вставить("ТочностьЕдиницыИзмерения");
	СтруктураРеквизитовФормы.Вставить("НаимОрганизации");
	СтруктураРеквизитовФормы.Вставить("ВыводитьСтраницуВТаблДокНаСервере");
	СтруктураРеквизитовФормы.Вставить("ТекущаяСтрокаРазделовОтчета");
	СтруктураРеквизитовФормы.Вставить("мЗаписываетсяНовыйДокумент");
	СтруктураРеквизитовФормы.Вставить("СформироватьФормуОтчетаАвтоматически");
	
КонецПроцедуры

Функция РазделыРеглОтчета(ИмяФормы) Экспорт
	
	ДанныеДопСтрок = Новый Структура;
	ДанныеДопСтрок.Вставить("Приложение2", Новый ТаблицаЗначений);
	ДанныеДопСтрок.Вставить("Приложение3", Новый ТаблицаЗначений);
	
	ДанныеДопСтрок.Приложение2.Колонки.Добавить("П000020000101",
		Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(8)));
	ДанныеДопСтрок.Приложение2.Колонки.Добавить("П000020000102",
		Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(0)));
	ДанныеДопСтрок.Приложение2.Колонки.Добавить("П000020000103",
		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(17, 0, ДопустимыйЗнак.Любой)));
	ДанныеДопСтрок.Приложение2.Колонки.Добавить("П000020000104",
		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(17, 0, ДопустимыйЗнак.Любой)));	
	ДанныеДопСтрок.Приложение2.Колонки.Добавить("П000020000105",
		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(6, 3, ДопустимыйЗнак.Любой)));
	ДанныеДопСтрок.Приложение2.Колонки.Добавить("П000020000106",
		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(6, 0, ДопустимыйЗнак.Любой)));
	
	ДанныеДопСтрок.Приложение3.Колонки.Добавить("П000030000101",
		Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(0)));
	ДанныеДопСтрок.Приложение3.Колонки.Добавить("П000030000102",
		Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(8)));
		
	РазделыОтчета = Новый Структура;
	РазделыОтчета.Вставить("Приложение1", Новый Структура("МногостраничностьВРазделе, Данные", Ложь, Новый Структура));
	РазделыОтчета.Вставить("Приложение2",
		Новый Структура("МногостраничностьВРазделе, Данные,	ДанныеДопСтрок, ИдентификаторДопСтрок",
						Ложь, Новый Структура, ДанныеДопСтрок.Приложение2, "П0000200001"));
	РазделыОтчета.Вставить("Приложение3",
		Новый Структура("МногостраничностьВРазделе, Данные,	ДанныеДопСтрок, ИдентификаторДопСтрок",
						Ложь, Новый Структура, ДанныеДопСтрок.Приложение3, "П0000300001"));
		
	Возврат РазделыОтчета;
	
КонецФункции

Функция СтруктураСтраницОтчета(ИмяФормы) Экспорт
	
	ДеревоСтраницОтчета = Новый ДеревоЗначений;
	
	ДеревоСтраницОтчета.Колонки.Добавить("Представление",
		Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100)));
	ДеревоСтраницОтчета.Колонки.Добавить("ИмяСтраницы",
		Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100)));
	ДеревоСтраницОтчета.Колонки.Добавить("ИмяПоляТабличногоДокум",
		Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100)));	
	ДеревоСтраницОтчета.Колонки.Добавить("ИмяОбластиТабличногоПоля",
		Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100)));
	ДеревоСтраницОтчета.Колонки.Добавить("ОриентацияСтраницы");
	ДеревоСтраницОтчета.Колонки.Добавить("ВыводНаПечать",
		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(1, 0)));
	ДеревоСтраницОтчета.Колонки.Добавить("ПоказатьСтраницу",
		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(1, 0)));
	ДеревоСтраницОтчета.Колонки.Добавить("ВыгрузитьСтраницу",
		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(1, 0)));
			
	ДеревоСтраницОтчета.Строки.Очистить();
	
	СтрокаУровня1 = ДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы        = "Приложение1";
	СтрокаУровня1.Представление      = "Прил. 1";
	СтрокаУровня1.ОриентацияСтраницы = "Портрет";
	СтрокаУровня1.ВыводНаПечать      = 1;
	СтрокаУровня1.ПоказатьСтраницу   = 1;
	СтрокаУровня1.ВыгрузитьСтраницу  = 2;
	
	СтрокаУровня1 = ДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы        = "Приложение2";
	СтрокаУровня1.Представление      = "Прил. 2";
	СтрокаУровня1.ОриентацияСтраницы = "Портрет";
	СтрокаУровня1.ВыводНаПечать      = 1;
	СтрокаУровня1.ПоказатьСтраницу   = 1;
	СтрокаУровня1.ВыгрузитьСтраницу  = 2;
	
	СтрокаУровня1 = ДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы        = "Приложение3";
	СтрокаУровня1.Представление      = "Прил. 3";
	СтрокаУровня1.ОриентацияСтраницы = "Портрет";
	СтрокаУровня1.ВыводНаПечать      = 0;
	СтрокаУровня1.ПоказатьСтраницу   = 1;
	СтрокаУровня1.ВыгрузитьСтраницу  = 2;
		
	Возврат ДеревоСтраницОтчета;
	
КонецФункции

Процедура ЗаполнитьРеглОтчет(ИмяФормы,
							 ПараметрыАвтоформирования,
							 КорректирующийОтчет,
							 РазделыОтчета,
							 ДанныеРеглОтчета)
		
	ИсточникОтчета = ПараметрыАвтоформирования.ИсточникОтчета;
	ИмяФормыОтчета = ПараметрыАвтоформирования.ИмяФормыОтчета;
	
	Организация = ПараметрыАвтоформирования.Организация;
			
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("ДатаНачала", ПараметрыАвтоформирования.ДатаНачала);
	ДопПараметры.Вставить("ДатаОкончания", ПараметрыАвтоформирования.ДатаОкончания);
		
	ДанныеРеглОтчета.Вставить("СтруктураРеквизитовФормы");
	
	СформироватьСтруктуруРеквизитовФормы(ИмяФормы, ДанныеРеглОтчета.СтруктураРеквизитовФормы);
	
	ДанныеРеглОтчета.СтруктураРеквизитовФормы.Организация = ПараметрыАвтоформирования.Организация;
	
	ДанныеРеглОтчета.СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета = ПараметрыАвтоформирования.ДатаОкончания;
					
	ЗаполнитьПустыеСтруктурыДанных(ИмяФормы, РазделыОтчета, ДанныеРеглОтчета.СтруктураРеквизитовФормы);
	
	ЗаполнитьДатуВЯчейках(ИмяФормы, РазделыОтчета.Приложение1.Данные, ПараметрыАвтоформирования.ДатаПодписи);
	
	ЗаполнитьГодПодтверждения(ИмяФормы, РазделыОтчета.Приложение1.Данные, ПараметрыАвтоформирования.ДатаОкончания);
	
	ЗаполнитьЗначенияПоУмолчанию(ИмяФормы, ДанныеРеглОтчета.СтруктураРеквизитовФормы,
		РазделыОтчета, ПараметрыАвтоформирования.ДатаПодписи);
		
	УстановитьВидДеятельностиВПриложениях(ИмяФормы, РазделыОтчета);	
		
	ПараметрыОтчета = Новый Структура;
	ПараметрыОтчета.Вставить("Организация",             ПараметрыАвтоформирования.Организация);
	ПараметрыОтчета.Вставить("ДатаНачалаПериодаОтчета", ПараметрыАвтоформирования.ДатаНачала);
	ПараметрыОтчета.Вставить("ДатаКонцаПериодаОтчета",  ПараметрыАвтоформирования.ДатаОкончания);
	ПараметрыОтчета.Вставить("ДатаПодписи",             ПараметрыАвтоформирования.ДатаПодписи);
	
	Контейнер = Новый Структура;
	Контейнер.Вставить("Приложение1", РазделыОтчета.Приложение1.Данные);
	Контейнер.Вставить("Приложение2", РазделыОтчета.Приложение2.Данные);
	Контейнер.Вставить("Приложение2_ДанныеДопСтрок", РазделыОтчета.Приложение2.ДанныеДопСтрок);
	Контейнер.Вставить("Приложение3", РазделыОтчета.Приложение3.Данные);
	Контейнер.Вставить("Приложение3_ДанныеДопСтрок", РазделыОтчета.Приложение3.ДанныеДопСтрок);
	
	Если ПараметрыАвтоформирования.Свойство("ЗаполнятьВнешнимиДанными")
	   И ПараметрыАвтоформирования.ЗаполнятьВнешнимиДанными Тогда

		ЗаполнитьРеглОтчетВнешнимиДанными(ИмяФормы, Контейнер, ПараметрыАвтоформирования.ВнешниеДанные);
		
	Иначе
		
		РегламентированнаяОтчетностьПереопределяемый.ЗаполнитьОтчет(ИсточникОтчета, ИмяФормыОтчета, ПараметрыОтчета,
																	Контейнер);
																	
		ЗаполнитьПустыеСтруктурыДанных(ИмяФормы, РазделыОтчета, ДанныеРеглОтчета.СтруктураРеквизитовФормы);
		
		Если РазделыОтчета.Приложение2.ДанныеДопСтрок.Количество() = 0 Тогда
			
			РазделыОтчета.Приложение2.ДанныеДопСтрок.Добавить();
			
		КонецЕсли;
		
		Для Каждого СтрокаТЗ Из РазделыОтчета.Приложение2.ДанныеДопСтрок Цикл
			
			СтрокаТЗ.П000020000103 = Окр(СтрокаТЗ.П000020000103 / 1000);
			СтрокаТЗ.П000020000104 = Окр(СтрокаТЗ.П000020000104 / 1000);
			
		КонецЦикла;
		
		Если РазделыОтчета.Приложение3.ДанныеДопСтрок.Количество() = 0 Тогда
			
			РазделыОтчета.Приложение3.ДанныеДопСтрок.Добавить();
			
		КонецЕсли;
		
		ЗаполнитьСтруктурыДанныхРазделовЗначениямиИзДопСтрок(ИмяФормы, Контейнер);
						
		Расчет(ИмяФормы, РазделыОтчета);
		
		УстановитьВидДеятельностиВПриложениях(ИмяФормы, РазделыОтчета);
																							
	КонецЕсли;
	          			
КонецПроцедуры

Процедура ЗаполнитьДатуВЯчейках(ИмяФормы, СтруктураДанныхПриложение, ДатаПодписи) Экспорт
	
	МесяцПодписи = Месяц(ДатаПодписи);
	
	Если МесяцПодписи = 1 И ЗначениеЗаполнено(ДатаПодписи) Тогда
		МесяцСтрокой = "января";
	ИначеЕсли МесяцПодписи = 2 Тогда
		МесяцСтрокой = "февраля";
	ИначеЕсли МесяцПодписи = 3 Тогда
		МесяцСтрокой = "марта";
	ИначеЕсли МесяцПодписи = 4 Тогда
		МесяцСтрокой = "апреля";
	ИначеЕсли МесяцПодписи = 5 Тогда
		МесяцСтрокой = "мая";
	ИначеЕсли МесяцПодписи = 6 Тогда
		МесяцСтрокой = "июня";
	ИначеЕсли МесяцПодписи = 7 Тогда
		МесяцСтрокой = "июля";
	ИначеЕсли МесяцПодписи = 8 Тогда
		МесяцСтрокой = "августа";
	ИначеЕсли МесяцПодписи = 9 Тогда
		МесяцСтрокой = "сентября";
	ИначеЕсли МесяцПодписи = 10 Тогда
		МесяцСтрокой = "октября";
	ИначеЕсли МесяцПодписи = 11 Тогда
		МесяцСтрокой = "ноября";
	ИначеЕсли МесяцПодписи = 12 Тогда
		МесяцСтрокой = "декабря";
	Иначе 
		МесяцСтрокой = "";
	КонецЕсли;
	
	ДеньСтрокой = Формат(ДатаПодписи, "ДФ=dd");
	ГодСтрокой = Формат(ДатаПодписи, "ДФ=yyyy");
	
	Если ТипЗнч(СтруктураДанныхПриложение) = Тип("ТабличныйДокумент") Тогда
		
		СтруктураДанныхПриложение.Области.ДатаПодписиДень.Значение  = ДеньСтрокой;
		СтруктураДанныхПриложение.Области.ДатаПодписиМесяц.Значение = МесяцСтрокой;
		СтруктураДанныхПриложение.Области.ДатаПодписиГод.Значение   = ГодСтрокой;
		
		Если НЕ СтруктураДанныхПриложение.Области.Найти("ДатаПодписи") = Неопределено Тогда
		
			СтруктураДанныхПриложение.Области.ДатаПодписи.Значение = ДатаПодписи;
			
		КонецЕсли;	
		
	ИначеЕсли ТипЗнч(СтруктураДанныхПриложение) = Тип("Структура") Тогда
		
		СтруктураДанныхПриложение.Вставить("ДатаПодписиДень", ДеньСтрокой);
		СтруктураДанныхПриложение.Вставить("ДатаПодписиМесяц", МесяцСтрокой);
		СтруктураДанныхПриложение.Вставить("ДатаПодписиГод", ГодСтрокой);
		
		Если СтруктураДанныхПриложение.Свойство("ДатаПодписи") Тогда
		
			СтруктураДанныхПриложение.ДатаПодписи = ДатаПодписи;
			
		КонецЕсли;	
		
	КонецЕсли;
		
КонецПроцедуры

Процедура ЗаполнитьГодПодтверждения(ИмяФормы, СтруктураДанныхПриложение, ДатаКонцаПериодаОтчета) Экспорт
	
	Если ТипЗнч(СтруктураДанныхПриложение) = Тип("ТабличныйДокумент") Тогда
		
		СтруктураДанныхПриложение.Области.ГодПодтверждения.Значение	= Формат(ДатаКонцаПериодаОтчета, "ДФ=гггг");
	
	ИначеЕсли ТипЗнч(СтруктураДанныхПриложение) = Тип("Структура") Тогда
	
		СтруктураДанныхПриложение.ГодПодтверждения = Формат(ДатаКонцаПериодаОтчета, "ДФ=гггг");
	
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьЗначенияПоУмолчанию(ИмяФормы, СтруктураРеквизитовФормы, РазделыОтчета, ДатаПодписи) Экспорт
	
	РазделыОтчета.Приложение1.Данные.Вставить("ПечататьСтроку2", "V");
		
	ОргСведения = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(
		СтруктураРеквизитовФормы.Организация, ДатаПодписи, "ОснВидДеят2,ОКВЭД2,ДатаРегистрации,ОГРН");
	
	ДатаМестоНомерРегистрации = "";
	ДатаНачалаХозДеятельности = "";
	
	ОГРН = "";
	ДатаРегистрации = '00010101';
	
	Если ОргСведения.Свойство("ДатаРегистрации") Тогда
		
		Если ЗначениеЗаполнено(ОргСведения.ДатаРегистрации) Тогда
			
			ДатаРегистрации = ОргСведения.ДатаРегистрации;
			
			ДатаМестоНомерРегистрации = Формат(ОргСведения.ДатаРегистрации, "ДФ=дд.ММ.гггг");
			ДатаНачалаХозДеятельности = ДатаМестоНомерРегистрации;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ОргСведения.Свойство("ОГРН") Тогда
		
		Если ЗначениеЗаполнено(ОргСведения.ОГРН) Тогда
			
			ОГРН = СокрЛП(ОргСведения.ОГРН);
			
			ДатаМестоНомерРегистрации = ?(ЗначениеЗаполнено(ДатаМестоНомерРегистрации),
			ДатаМестоНомерРегистрации + ", ОГРН " + ОГРН, "ОГРН " + ОГРН);
			
		КонецЕсли;
		
	КонецЕсли;
	
	РазделыОтчета.Приложение2.Данные.Вставить("ОГРН", ОГРН);
	РазделыОтчета.Приложение2.Данные.Вставить("ДатаРегистрации", ДатаРегистрации);
	
	РазделыОтчета.Приложение2.Данные.Вставить("ДатаМестоНомерРегистрации", ДатаМестоНомерРегистрации);
	РазделыОтчета.Приложение2.Данные.Вставить("ДатаНачалаХозДеятельности", ДатаНачалаХозДеятельности);
	
	СтрокаТЗ = РазделыОтчета.Приложение2.ДанныеДопСтрок[0];
	
	Если ОргСведения.Свойство("ОКВЭД2") Тогда
		
		СтрокаТЗ.П000020000101 = СокрЛП(ОргСведения.ОКВЭД2);
		
		РазделыОтчета.Приложение2.Данные.Вставить("ОКВЭД", СтрокаТЗ.П000020000101);
		
	КонецЕсли;
	
	Если ОргСведения.Свойство("ОснВидДеят2") Тогда
		
		СтрокаТЗ.П000020000102 = СокрЛП(ОргСведения.ОснВидДеят2);
		
		РазделыОтчета.Приложение2.Данные.Вставить("НаименованиеВЭД", СтрокаТЗ.П000020000102);
		
	КонецЕсли;
	
	РазделыОтчета.Приложение2.Данные.Вставить("П000020000101_1", СтрокаТЗ.П000020000101);
	РазделыОтчета.Приложение2.Данные.Вставить("П000020000102_1", СтрокаТЗ.П000020000102);
	РазделыОтчета.Приложение2.Данные.Вставить("П000020000103_1", СтрокаТЗ.П000020000103);
	РазделыОтчета.Приложение2.Данные.Вставить("П000020000104_1", СтрокаТЗ.П000020000104);
	РазделыОтчета.Приложение2.Данные.Вставить("П000020000105_1", СтрокаТЗ.П000020000105);
	РазделыОтчета.Приложение2.Данные.Вставить("П000020000106_1", СтрокаТЗ.П000020000106);
	
КонецПроцедуры

Процедура Расчет(ИмяФормы, РазделыОтчета)
	
	СуммаПоГрафе3 = 0;
	СуммаПоГрафе4 = 0;
	СуммаПоГрафе5 = 0;
	СуммаПоГрафе6 = 0;
	
	ВсегоСтрок = РазделыОтчета.Приложение2.ДанныеДопСтрок.Количество();
	
	Для Каждого СтрокаТаблицы Из РазделыОтчета.Приложение2.ДанныеДопСтрок Цикл
		
		Графа3 = СтрокаТаблицы["П000020000103"];
		Графа4 = СтрокаТаблицы["П000020000104"];
		
		СуммаПоГрафе3 = СуммаПоГрафе3 + Графа3;
		СуммаПоГрафе4 = СуммаПоГрафе4 + Графа4;
		
	КонецЦикла;
	
	РазделыОтчета.Приложение2.Данные.Вставить("П000020000203", СуммаПоГрафе3);
	РазделыОтчета.Приложение2.Данные.Вставить("П000020000204", СуммаПоГрафе4);
	
	ИндексМаксимума = Неопределено;
	ЗначениеМаксимума = 0;
	Остаток = 100;
	
	ИтогГрафа3 = РазделыОтчета.Приложение2.Данные["П000020000203"];
	ИтогГрафа4 = РазделыОтчета.Приложение2.Данные["П000020000204"];
	
	Для Каждого СтрокаТаблицы Из РазделыОтчета.Приложение2.ДанныеДопСтрок Цикл
		
		Графа3 = СтрокаТаблицы["П000020000103"];
		Графа4 = СтрокаТаблицы["П000020000104"];
		
		Если ИтогГрафа3 + ИтогГрафа4 = 0 Тогда
			ЗначениеГрафы5 = 0;
		Иначе
			ЗначениеГрафы5 = (Графа3 + Графа4) / (ИтогГрафа3 + ИтогГрафа4) * 100;
		КонецЕсли;
		
		СтрокаТаблицы["П000020000105"] = ЗначениеГрафы5;
		
		Графа5 = СтрокаТаблицы["П000020000105"];
		
		Если Графа5 > ЗначениеМаксимума Тогда
			ИндексМаксимума = РазделыОтчета.Приложение2.ДанныеДопСтрок.Индекс(СтрокаТаблицы);
			ЗначениеМаксимума = Графа5;
		КонецЕсли;
		
		Остаток = Остаток - Графа5;
		
	КонецЦикла;
	
	Если ИндексМаксимума <> Неопределено Тогда
		РазделыОтчета.Приложение2.ДанныеДопСтрок[ИндексМаксимума]["П000020000105"]
			= РазделыОтчета.Приложение2.ДанныеДопСтрок[ИндексМаксимума]["П000020000105"] + Остаток;
	КонецЕсли;
	
	Для Каждого СтрокаТаблицы Из РазделыОтчета.Приложение2.ДанныеДопСтрок Цикл
	
		Графа5 = СтрокаТаблицы["П000020000105"];
		Графа6 = СтрокаТаблицы["П000020000106"];
		
		СуммаПоГрафе5 = СуммаПоГрафе5 + Графа5;
		СуммаПоГрафе6 = СуммаПоГрафе6 + Графа6;
		
	КонецЦикла;
	
	РазделыОтчета.Приложение2.Данные.Вставить("П000020000205", СуммаПоГрафе5);
	РазделыОтчета.Приложение2.Данные.Вставить("П000020000206", СуммаПоГрафе6);
	
КонецПроцедуры

Процедура УстановитьВидДеятельностиВПриложениях(ИмяФормы, РазделыОтчета)
	
	Если РазделыОтчета.Приложение2.Данные.Количество() > 0 Тогда
		
		НаименованиеВЭД = РазделыОтчета.Приложение2.Данные["НаименованиеВЭД"];
		ОКВЭД = РазделыОтчета.Приложение2.Данные["ОКВЭД"];
		
		РазделыОтчета.Приложение1.Данные.Вставить("ВидЭкономическойДеятельности", НаименованиеВЭД);
		РазделыОтчета.Приложение1.Данные.Вставить("ОКВЭД", ОКВЭД);
		
		РазделыОтчета.Приложение3.Данные.Вставить("ВидЭкономическойДеятельности", НаименованиеВЭД);
		РазделыОтчета.Приложение3.Данные.Вставить("ОКВЭД", ОКВЭД);
						
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьСтруктурыДанныхРазделовЗначениямиИзДопСтрок(ИмяФормы, Контейнер) Экспорт
	
	РегламентированнаяОтчетность.ЗаполнитьСтруктуруДанныхРазделаЗначениямиИзДопСтрок(
		Контейнер.Приложение2, Контейнер.Приложение2_ДанныеДопСтрок);
	
	РегламентированнаяОтчетность.ЗаполнитьСтруктуруДанныхРазделаЗначениямиИзДопСтрок(
		Контейнер.Приложение3, Контейнер.Приложение3_ДанныеДопСтрок);
	
КонецПроцедуры

Процедура ЗаполнитьПустыеСтруктурыДанных(ИмяФормы, РазделыОтчета, СтруктураРеквизитовФормы)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
			
	Для Каждого Раздел Из РазделыОтчета Цикл
		
		Если Раздел.Значение.Данные.Количество() = 0 Тогда
			
			ТабличныйДокумент.Очистить();
			                         			
			Если Раздел.Ключ = "Приложение3"
			   И СтруктураРеквизитовФормы.Редакция75н Тогда
			    								
				ТабличныйДокумент.Вывести(ЭтотОбъект.ПолучитьМакет(ИмяФормы + "_" + Раздел.Ключ + "_ВРедакцииПриказа75н"));
				
			Иначе 	
				
				ТабличныйДокумент.Вывести(ЭтотОбъект.ПолучитьМакет(ИмяФормы + "_" + Раздел.Ключ));
				
			КонецЕсли;	
		
			Раздел.Значение.Данные = СобратьДанные(ИмяФормы, ТабличныйДокумент);
			
			Если Раздел.Значение.Свойство("ДанныеДопСтрок") Тогда
				
				Если ТипЗнч(Раздел.Значение.ДанныеДопСтрок) = Тип("Структура") Тогда
					
					Для Каждого ДопСтрока Из Раздел.Значение.ДанныеДопСтрок Цикл
						
						ДопСтрока.Значение.Добавить();
						
					КонецЦикла;
										
				Иначе
					
					Раздел.Значение.ДанныеДопСтрок.Добавить();
					
				КонецЕсли;	
				
			КонецЕсли;	
							
		КонецЕсли;
	
	КонецЦикла;
				
КонецПроцедуры

Функция СобратьДанные(ИмяФормы, ТабличныйДокумент)

	СтруктураДанныхПоля = Новый Структура;
	
	Для Инд = 0 По ТабличныйДокумент.Области.Количество() - 1 Цикл
		
		ТекущаяОбласть = ТабличныйДокумент.Области[Инд];

		Если НЕ ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			Продолжить;
		КонецЕсли;

		Если ТекущаяОбласть.СодержитЗначение <> Истина Тогда
			Продолжить;
		КонецЕсли;

		ИмяПоказателя      = ТекущаяОбласть.Имя;
		ЗначениеПоказателя = ТекущаяОбласть.Значение;
		
		СтруктураДанныхПоля.Вставить(ИмяПоказателя, ЗначениеПоказателя);

	КонецЦикла;

	Возврат СтруктураДанныхПоля;
	
КонецФункции

Процедура ЗаполнитьРеглОтчетВнешнимиДанными(ИмяФормы, Приемник, Источник)
	 	 	
КонецПроцедуры

Процедура СформироватьВариантыЗаполнения(ИмяФормы,
										 СтруктураРеквизитовФормы,
										 СтруктураВариантыЗаполнения,
										 ТаблицаСоставПоказателей = Неопределено) Экспорт
	
	МакетСоставаПоказателей = ЭтотОбъект.ПолучитьМакет("СоставПоказателей2013Кв1");
	
	Для Инд = 0 По МакетСоставаПоказателей.Области.Количество() - 1 Цикл
		
		ТекОбласть  = МакетСоставаПоказателей.Области[Инд];
		ИмяСтраницы = ТекОбласть.Имя;
		
		ТаблицаВариантыЗаполнения = Новый ТаблицаЗначений;
		ТаблицаВариантыЗаполнения.Колонки.Добавить("КодПоказателя",
			Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(15)));
		ТаблицаВариантыЗаполнения.Колонки.Добавить("ВариантЗаполнения",
			Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(1, 0)));
		ТаблицаВариантыЗаполнения.Колонки.Добавить("ЗначениеАвто",
			Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(17, 2)));
		ТаблицаВариантыЗаполнения.Колонки.Добавить("Дельта",
			Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(17, 2)));
		ТаблицаВариантыЗаполнения.Колонки.Добавить("Комментарий",
			Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100)));
		ТаблицаВариантыЗаполнения.Колонки.Добавить("КодПоказателяПоСтруктуре",
			Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(50)));
		
		Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
			
			КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
			ИмяПоказателя = КодПоказателя;
									
			Если Лев(КодПоказателя, 2) = "//" Тогда
				Продолжить;
			КонецЕсли;
			
			КодПоказателяПоФорме 	 = СокрЛП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
			ПризнМногострочность 	 = СокрЛП(МакетСоставаПоказателей.Область(Ном, 3).Текст);
			ТипДанныхРеквизита	     = СокрЛП(МакетСоставаПоказателей.Область(Ном, 4).Текст);
			КодПоказателяПоСтруктуре = СокрЛП(МакетСоставаПоказателей.Область(Ном, 9).Текст);						
			
			стрВариантЗаполнения = РегламентированнаяОтчетность.ПолучитьВариантЗаполненияПоказателяРегОтчета(
								   	МакетСоставаПоказателей, Ном);

			чВариантЗаполнения = ?(ПустаяСтрока(стрВариантЗаполнения), 0, Число(стрВариантЗаполнения));
			
			Если ТипЗнч(ТаблицаСоставПоказателей) = Тип("ТаблицаЗначений") Тогда
				
				НоваяСтрока = ТаблицаСоставПоказателей.Добавить();
				НоваяСтрока.ИмяПоляТаблДокумента   	 = ИмяСтраницы;
				НоваяСтрока.КодПоказателяПоСоставу 	 = КодПоказателя;
				НоваяСтрока.КодПоказателяПоФорме   	 = КодПоказателяПоФорме;
				НоваяСтрока.ПризнМногострочности   	 = ПризнМногострочность;
				НоваяСтрока.ТипДанныхПоказателя 	 = ТипДанныхРеквизита;
				НоваяСтрока.КодПоказателяПоСтруктуре = КодПоказателяпоСтруктуре;
				
			КонецЕсли;	
						
			Если чВариантЗаполнения <> 0 Тогда
				
				НоваяСтрока = ТаблицаВариантыЗаполнения.Добавить();
				НоваяСтрока.КодПоказателя = ?(НЕ ПустаяСтрока(КодПоказателяПоФорме), КодПоказателяПоФорме, КодПоказателя);
				НоваяСтрока.ВариантЗаполнения = чВариантЗаполнения;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если ТаблицаВариантыЗаполнения.Количество() > 0 Тогда
			
			МассивВариантовЗаполненияСтраниц = Новый Массив;
			МассивВариантовЗаполненияСтраниц.Добавить(ТаблицаВариантыЗаполнения);
			
			СтруктураВариантыЗаполнения.Вставить(ИмяСтраницы, МассивВариантовЗаполненияСтраниц);
			
		КонецЕсли;
		
	КонецЦикла;
	    				
КонецПроцедуры

Процедура ЗаполнитьСведенияОбОрганизации(ИмяФормы,
										 СтруктураДанныхПриложение,
										 СтруктураРеквизитовФормы,
										 ДатаПодписи,
										 ВПрограммеИзмененаДатаПодписи = Ложь,
										 СменилсяПризнакПодписанта = Ложь) Экспорт
	
	Если НЕ ЗначениеЗаполнено(СтруктураРеквизитовФормы.Организация) Тогда
		Возврат
	КонецЕсли;
	
	ПБОЮЛ = НЕ РегламентированнаяОтчетностьВызовСервера.ЭтоЮридическоеЛицо(СтруктураРеквизитовФормы.Организация);
	
	Сведения = Новый СписокЗначений;
	
	Если НЕ ВПрограммеИзмененаДатаПодписи Тогда
		
		Сведения.Добавить("", "ИННЮЛ");
		Сведения.Добавить("", "КППЮЛ");
		Сведения.Добавить("", "НаимЮЛПол");
		Сведения.Добавить("", "РегистрационныйНомерФСС");
		Сведения.Добавить("", "КодПодчиненностиФСС");
		Сведения.Добавить("", "НаименованиеТерриториальногоОрганаФСС");
		Сведения.Добавить("", "АдрЮР");
		Сведения.Добавить("", "АдрМЖ");
		
	КонецЕсли;
	
	Сведения.Добавить("", "ФИОРук");
	Сведения.Добавить("", "ФИОБух");
	Сведения.Добавить("", "ФИО");
	
	ОргСведения = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(
		СтруктураРеквизитовФормы.Организация, ДатаПодписи, Сведения);
	
	Если НЕ ВПрограммеИзмененаДатаПодписи Тогда
		
		ИННЮЛ = "";
		КППЮЛ = "";
		НаимЮЛПол = "";
		РегистрационныйНомерФСС = "";
		КодПодчиненностиФСС = "";
		НаименованиеТерриториальногоОрганаФСС = "";
		АдрЮР = "";
		АдрМЖ = "";
		
	КонецЕсли;
	
	ФИОРук = "";
	ФИОБух = "";
	ФИО = "";
	
	Если НЕ ВПрограммеИзмененаДатаПодписи Тогда
		
		ОргСведения.Свойство("ИННЮЛ", ИННЮЛ);
		ОргСведения.Свойство("КППЮЛ", КППЮЛ);
		ОргСведения.Свойство("НаимЮЛПол", НаимЮЛПол);
		ОргСведения.Свойство("РегистрационныйНомерФСС", РегистрационныйНомерФСС);
		ОргСведения.Свойство("КодПодчиненностиФСС", КодПодчиненностиФСС);
		ОргСведения.Свойство("НаименованиеТерриториальногоОрганаФСС", НаименованиеТерриториальногоОрганаФСС);
		ОргСведения.Свойство("АдрЮР", АдрЮР);
		ОргСведения.Свойство("АдрМЖ", АдрМЖ);
		
	КонецЕсли;
	
	ОргСведения.Свойство("ФИОРук", ФИОРук);
	ОргСведения.Свойство("ФИОБух", ФИОБух);
	ОргСведения.Свойство("ФИО", ФИО);
	
	Если ПБОЮЛ Тогда
		НаимЮлПол = ФИО;
		АдрЮР = АдрМЖ;
		ФИОРук = ФИО;
	КонецЕсли;
	
	Если ТипЗнч(СтруктураДанныхПриложение) = Тип("ТабличныйДокумент") Тогда
		
		Если НЕ СтруктураДанныхПриложение.Области.Найти("РуководительФИО") = Неопределено Тогда 
			СтруктураДанныхПриложение.Области.РуководительФИО.Значение = ФИОРук;
		КонецЕсли;	
		
		Если НЕ СтруктураДанныхПриложение.Области.Найти("ШапкаРуководительФИО") = Неопределено Тогда 
			СтруктураДанныхПриложение.Области.ШапкаРуководительФИО.Значение = ФИОРук;
		КонецЕсли;
		
		Если НЕ СтруктураДанныхПриложение.Области.Найти("ШапкаГлавбухФИО") = Неопределено Тогда 
			СтруктураДанныхПриложение.Области.ШапкаГлавбухФИО.Значение = ФИОБух;
		КонецЕсли;
		
		Если НЕ СтруктураДанныхПриложение.Области.Найти("РуководительФИО") = Неопределено Тогда 
			СтруктураДанныхПриложение.Области.РуководительФИО.Значение = ФИОРук;
		КонецЕсли;
		
		Если НЕ СтруктураДанныхПриложение.Области.Найти("ГлавбухФИО") = Неопределено Тогда 
			СтруктураДанныхПриложение.Области.ГлавбухФИО.Значение = ФИОБух;
		КонецЕсли;
		
		Если НЕ СтруктураДанныхПриложение.Области.Найти("РуководительФИО") = Неопределено Тогда 
			СтруктураДанныхПриложение.Области.РуководительФИО.Значение = ФИОРук;
		КонецЕсли;
		
		Если НЕ СтруктураДанныхПриложение.Области.Найти("ГлавбухФИО") = Неопределено Тогда 
			СтруктураДанныхПриложение.Области.ГлавбухФИО.Значение = ФИОБух;
		КонецЕсли;
		
		Если ВПрограммеИзмененаДатаПодписи Тогда
			Возврат;
		КонецЕсли;
		
		Если НЕ СтруктураДанныхПриложение.Области.Найти("НаименованиеСтрахователя") = Неопределено Тогда 
			СтруктураДанныхПриложение.Области.НаименованиеСтрахователя.Значение = НаимЮлПол;
		КонецЕсли;
		
		Если НЕ СтруктураДанныхПриложение.Области.Найти("НаименованиеОрганизации") = Неопределено Тогда 
			СтруктураДанныхПриложение.Области.НаименованиеОрганизации.Значение = НаимЮлПол;
		КонецЕсли;
		
		Если НЕ СтруктураДанныхПриложение.Области.Найти("ИННОрганизации") = Неопределено Тогда 
			СтруктураДанныхПриложение.Области.ИННОрганизации.Значение = ИННЮЛ;
		КонецЕсли;
		
		Если НЕ СтруктураДанныхПриложение.Области.Найти("КППОрганизации") = Неопределено Тогда 
			СтруктураДанныхПриложение.Области.КППОрганизации.Значение = КППЮЛ;
		КонецЕсли;
		
		Если НЕ СтруктураДанныхПриложение.Области.Найти("РегистрационныйНомерФСС") = Неопределено Тогда 
			СтруктураДанныхПриложение.Области.РегистрационныйНомерФСС.Значение = РегистрационныйНомерФСС;
		КонецЕсли;
		
		Если НЕ СтруктураДанныхПриложение.Области.Найти("ЮрАдресОрганизации") = Неопределено Тогда 
			СтруктураДанныхПриложение.Области.ЮрАдресОрганизации.Значение =
				РегламентированнаяОтчетностьКлиентСервер.ПредставлениеАдресаВФормате9Запятых(АдрЮР);
		КонецЕсли;
		
		Если НЕ СтруктураДанныхПриложение.Области.Найти("НаименованиеСтрахователя") = Неопределено Тогда 
			СтруктураДанныхПриложение.Области.НаименованиеСтрахователя.Значение = НаимЮлПол;
		КонецЕсли;
		
		Если НЕ СтруктураДанныхПриложение.Области.Найти("РегистрационныйНомерФСС") = Неопределено Тогда 
			СтруктураДанныхПриложение.Области.РегистрационныйНомерФСС.Значение = РегистрационныйНомерФСС;
		КонецЕсли;
		
		Если НЕ СтруктураДанныхПриложение.Области.Найти("НаименованиеОрганаФСС") = Неопределено Тогда 
			СтруктураДанныхПриложение.Области.НаименованиеОрганаФСС.Значение = НаименованиеТерриториальногоОрганаФСС;
		КонецЕсли;	
		
		Если НЕ СтруктураДанныхПриложение.Области.Найти("КодПодчиненности") = Неопределено Тогда 
			СтруктураДанныхПриложение.Области.КодПодчиненности.Значение = КодПодчиненностиФСС;
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(СтруктураДанныхПриложение) = Тип("Структура") Тогда
		
		Если СтруктураДанныхПриложение.Свойство("РуководительФИО") Тогда
			СтруктураДанныхПриложение.РуководительФИО = ФИОРук;
		КонецЕсли;	
		
		Если СтруктураДанныхПриложение.Свойство("ШапкаРуководительФИО") Тогда
			СтруктураДанныхПриложение.ШапкаРуководительФИО = ФИОРук;
		КонецЕсли;
		
		Если СтруктураДанныхПриложение.Свойство("ШапкаГлавбухФИО") Тогда
			СтруктураДанныхПриложение.ШапкаГлавбухФИО = ФИОБух;
		КонецЕсли;
		
		Если СтруктураДанныхПриложение.Свойство("РуководительФИО") Тогда
			СтруктураДанныхПриложение.РуководительФИО = ФИОРук;
		КонецЕсли;
		
		Если СтруктураДанныхПриложение.Свойство("ГлавбухФИО") Тогда 
			СтруктураДанныхПриложение.ГлавбухФИО = ФИОБух;
		КонецЕсли;
		
		Если СтруктураДанныхПриложение.Свойство("РуководительФИО") Тогда
			СтруктураДанныхПриложение.РуководительФИО = ФИОРук;
		КонецЕсли;
		
		Если СтруктураДанныхПриложение.Свойство("ГлавбухФИО") Тогда
			СтруктураДанныхПриложение.ГлавбухФИО = ФИОБух;
		КонецЕсли;
		
		Если ВПрограммеИзмененаДатаПодписи Тогда
			Возврат;
		КонецЕсли;
		
		Если СтруктураДанныхПриложение.Свойство("НаименованиеСтрахователя") Тогда
			СтруктураДанныхПриложение.НаименованиеСтрахователя = НаимЮлПол;
		КонецЕсли;
		
		Если СтруктураДанныхПриложение.Свойство("НаименованиеОрганизации") Тогда
			СтруктураДанныхПриложение.НаименованиеОрганизации = НаимЮлПол;
		КонецЕсли;
		
		Если СтруктураДанныхПриложение.Свойство("ИННОрганизации") Тогда
			СтруктураДанныхПриложение.ИННОрганизации = ИННЮЛ;
		КонецЕсли;
		
		Если СтруктураДанныхПриложение.Свойство("КППОрганизации") Тогда
			СтруктураДанныхПриложение.КППОрганизации = КППЮЛ;
		КонецЕсли;
		
		Если СтруктураДанныхПриложение.Свойство("РегистрационныйНомерФСС") Тогда
			СтруктураДанныхПриложение.РегистрационныйНомерФСС = РегистрационныйНомерФСС;
		КонецЕсли;
		
		Если СтруктураДанныхПриложение.Свойство("ЮрАдресОрганизации") Тогда
			СтруктураДанныхПриложение.ЮрАдресОрганизации =
				РегламентированнаяОтчетностьКлиентСервер.ПредставлениеАдресаВФормате9Запятых(АдрЮР);
		КонецЕсли;
		
		Если СтруктураДанныхПриложение.Свойство("НаименованиеСтрахователя") Тогда
			СтруктураДанныхПриложение.НаименованиеСтрахователя = НаимЮлПол;
		КонецЕсли;
		
		Если СтруктураДанныхПриложение.Свойство("РегистрационныйНомерФСС") Тогда
			СтруктураДанныхПриложение.РегистрационныйНомерФСС = РегистрационныйНомерФСС;
		КонецЕсли;
		
		Если СтруктураДанныхПриложение.Свойство("НаименованиеОрганаФСС") Тогда
			СтруктураДанныхПриложение.НаименованиеОрганаФСС = НаименованиеТерриториальногоОрганаФСС;
		КонецЕсли;	
		
		Если СтруктураДанныхПриложение.Свойство("КодПодчиненности") Тогда
			СтруктураДанныхПриложение.КодПодчиненности = КодПодчиненностиФСС;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ЗаписатьРеглОтчет(ИмяФормы, ПараметрыЗаписи)
			
	Если НЕ ПараметрыЗаписи.СохраняемыйРеглОтчет = Неопределено Тогда
	
		Если ТипЗнч(ПараметрыЗаписи.СохраняемыйРеглОтчет) = Тип("ДокументСсылка.РегламентированныйОтчет")
		   И НЕ ПараметрыЗаписи.СохраняемыйРеглОтчет.Пустая() Тогда
			
			ДокументРегламентированныйОтчет = ПараметрыЗаписи.СохраняемыйРеглОтчет.ПолучитьОбъект();
			
			РегламентированнаяОтчетность.ЗаблокироватьДокумент(ДокументРегламентированныйОтчет);
						
		ИначеЕсли ТипЗнч(ПараметрыЗаписи.СохраняемыйРеглОтчет) = Тип("ДокументОбъект.РегламентированныйОтчет") Тогда
			
			ДокументРегламентированныйОтчет = ПараметрыЗаписи.СохраняемыйРеглОтчет;
			
			РегламентированнаяОтчетность.ЗаблокироватьДокумент(ДокументРегламентированныйОтчет);
						
		Иначе
			
			РегламентированнаяОтчетность.ДобавитьОшибкуФормированияРеглОтчета(ПараметрыЗаписи,
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Неверный тип входящего параметра (%1) при автоматическом формировании формы %2'"),
						ТипЗнч(ПараметрыЗаписи.СохраняемыйРеглОтчет),  ПараметрыЗаписи.НаименованиеОтчета));
						
			Возврат Неопределено;
			
		КонецЕсли
		
	Иначе
		
		ДокументРегламентированныйОтчет = Документы.РегламентированныйОтчет.СоздатьДокумент();
		
		РегламентированнаяОтчетность.ЗаблокироватьДокумент(ДокументРегламентированныйОтчет);
		
		ДокументРегламентированныйОтчет.Дата = ПараметрыЗаписи.ДатаОкончания;
		ДокументРегламентированныйОтчет.УстановитьВремя();
		ДокументРегламентированныйОтчет.УстановитьНовыйНомер();
		
	КонецЕсли;
		
	ПараметрыЗаписи.СохраняемыйРеглОтчет = ДокументРегламентированныйОтчет;
		
	Если ЗаписатьДокумент(ИмяФормы, ПараметрыЗаписи) = Ложь Тогда
		Возврат Неопределено;
	КонецЕсли;
			
	Возврат ДокументРегламентированныйОтчет.Ссылка;
	
КонецФункции

Функция ЗаписатьДокумент(ИмяФормы, ПараметрыЗаписи) Экспорт
	
	ДокументРегламентированныйОтчет = ПараметрыЗаписи.СохраняемыйРеглОтчет;
				
	ДокументРегламентированныйОтчет.ИсточникОтчета           = ПараметрыЗаписи.ИсточникОтчета;
	ДокументРегламентированныйОтчет.НаименованиеОтчета       = ПараметрыЗаписи.НаименованиеОтчета;
	ДокументРегламентированныйОтчет.ДатаНачала               = ПараметрыЗаписи.ДатаНачала;
	ДокументРегламентированныйОтчет.ДатаОкончания            = ПараметрыЗаписи.ДатаОкончания;
	ДокументРегламентированныйОтчет.ВыбраннаяФорма           = ПараметрыЗаписи.ИмяФормыОтчета;
	ДокументРегламентированныйОтчет.Организация              = ПараметрыЗаписи.Организация;
	ДокументРегламентированныйОтчет.ДатаПодписи              = ПараметрыЗаписи.ДатаПодписи;
	ДокументРегламентированныйОтчет.ЕдиницаИзмерения         = ПараметрыЗаписи.ЕдиницаИзмерения;
	ДокументРегламентированныйОтчет.ТочностьЕдиницыИзмерения = ПараметрыЗаписи.ТочностьЕдиницыИзмерения;
	ДокументРегламентированныйОтчет.ВидОтчетности            = Перечисления.ВидыОтчетности.РегламентированнаяОтчетность;
	ДокументРегламентированныйОтчет.Комментарий              = ПараметрыЗаписи.Комментарий;
	ДокументРегламентированныйОтчет.Вид                      = ПараметрыЗаписи.Вариант;
	ДокументРегламентированныйОтчет.ФорматВыгрузки           = "Автоматически";
	
	ПоказателиОтчета = Новый Структура;
	Префикс = "ПолеТабличногоДокумента";
	Для Каждого Раздел Из ПараметрыЗаписи.РазделыОтчета Цикл
		Если НЕ Раздел.Значение.МногостраничностьВРазделе Тогда
			ПоказателиОтчета.Вставить(Префикс + Раздел.Ключ, Раздел.Значение.Данные);
		КонецЕсли;
	КонецЦикла;
	
	СписокСохранения = Новый Структура;
	СписокСохранения.Вставить("ПоказателиОтчета", ПоказателиОтчета);
	
	ДанныеМногострочныхРазделов = Новый Структура;
	Для Каждого ЭлементСтруктуры Из ПараметрыЗаписи.РазделыОтчета Цикл
		ДанныеДопСтрок = Неопределено;
		Если ЭлементСтруктуры.Значение.Свойство("ДанныеДопСтрок", ДанныеДопСтрок) Тогда
			Если ТипЗнч(ДанныеДопСтрок) = Тип("ТаблицаЗначений") Тогда
				ДанныеМногострочныхРазделов.Вставить(ЭлементСтруктуры.Значение.ИдентификаторДопСтрок,
					ЭлементСтруктуры.Значение.ДанныеДопСтрок);
			ИначеЕсли ТипЗнч(ДанныеДопСтрок) = Тип("Структура") Тогда		
				Для Каждого ДопСтрока Из ДанныеДопСтрок Цикл
					ДанныеМногострочныхРазделов.Вставить(ДопСтрока.Ключ, ДопСтрока.Значение);
				КонецЦикла;
			КонецЕсли;		
		КонецЕсли;
	КонецЦикла;
	СписокСохранения.Вставить("ДанныеМногострочныхРазделов", ДанныеМногострочныхРазделов);
			
	СписокСохранения.Вставить("ДанныеВариантовАвтоЗаполнения", ПараметрыЗаписи.СтруктураВариантыЗаполнения);
	
	СписокСохранения.Вставить("ВерсияФормы", ПараметрыЗаписи.ВерсияФормы);
	
	СписокСохранения.Вставить("ФлПодсчетСтраниц", ПараметрыЗаписи.ФлПодсчетСтраниц);
	
	СписокСохранения.Вставить("ФлОтклВыборЗначений", ПараметрыЗаписи.ФлОтклВыборЗначений);
	
	СписокСохранения.Вставить("Автозаполнение", ПараметрыЗаписи.Автозаполнение);
	
	СписокСохранения.Вставить("Редакция75н", ПараметрыЗаписи.Редакция75н);
	                                 	
	ДокументРегламентированныйОтчет.ДанныеОтчета = Новый ХранилищеЗначения(СписокСохранения);
	
	ДокументРегламентированныйОтчет.ДеревоНастройкиСтраниц = Новый ХранилищеЗначения(
												 ПараметрыЗаписи.ДеревоСтраницОтчета);
	
	Попытка
		
		ДокументРегламентированныйОтчет.Записать();
		
		ДокументРегламентированныйОтчет.Разблокировать();
						
	Исключение
		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"),
			РегламентированнаяОтчетностьКлиентСервер.СформироватьТекстСообщения(ОписаниеОшибки()));
		
		РегламентированнаяОтчетность.ДобавитьОшибкуФормированияРеглОтчета(ПараметрыЗаписи, ТекстСообщения);
		
		ДокументРегламентированныйОтчет.Разблокировать();
		
		Возврат Ложь;
		
	КонецПопытки;
			
	Возврат Истина;
	
КонецФункции

Процедура КонвертироватьПоказательДатаМестоНомерРегистрации(СтруктураДанных) Экспорт
	
	Если СтруктураДанных.Свойство("ДатаМестоНомерРегистрации") Тогда
		
		ДатаМестоНомерРегистрации = СокрЛП(СтрЗаменить(СтруктураДанных["ДатаМестоНомерРегистрации"], "ОГРН", ""));
		ДатаМестоНомерРегистрацииДлина = СтрДлина(ДатаМестоНомерРегистрации);
		
		//Определение даты регистрации.
		//
		ДатаРег_Дата = '00010101';
		Для НомПоз = 1 По ДатаМестоНомерРегистрацииДлина - 9 Цикл
			
			ДатаРег_Строка = Сред(ДатаМестоНомерРегистрации, НомПоз, 10);
			ДатаРег_Дата = СтроковыеФункцииКлиентСервер.СтрокаВДату(ДатаРег_Строка);
			
			Если ЗначениеЗаполнено(ДатаРег_Дата) Тогда
				ДатаМестоНомерРегистрации = СокрЛП(СтрЗаменить(ДатаМестоНомерРегистрации, ДатаРег_Строка, ""));
				ДатаМестоНомерРегистрацииДлина = СтрДлина(ДатаМестоНомерРегистрации);
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		СтруктураДанных.Вставить("ДатаРегистрации", ДатаРег_Дата);
		
		//Определение ОГРН.
		//
		ОГРН = "";
		Для НомПоз = 1 По ДатаМестоНомерРегистрацииДлина - 12 Цикл
			
			ОГРН = Сред(ДатаМестоНомерРегистрации, НомПоз, 13);
			
			Если СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(ОГРН, , Истина) Тогда
				ДатаМестоНомерРегистрации = СокрЛП(СтрЗаменить(ДатаМестоНомерРегистрации, ОГРН, ""));
				ДатаМестоНомерРегистрацииДлина = СтрДлина(ДатаМестоНомерРегистрации);
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		СтруктураДанных.Вставить("ОГРН", ОГРН);
		
		//Определение места регистрации.
		//
		ОтсекаемыеСимволы = СтрРазделить(" |,|;|.", "|", Ложь);
		
		Для НомПоз = 1 По ДатаМестоНомерРегистрацииДлина Цикл
			Если ОтсекаемыеСимволы.Найти(Сред(ДатаМестоНомерРегистрации, НомПоз, 1)) = Неопределено Тогда
				Если НомПоз > 1 Тогда
					ДатаМестоНомерРегистрации = Сред(ДатаМестоНомерРегистрации, НомПоз);
					ДатаМестоНомерРегистрацииДлина = СтрДлина(ДатаМестоНомерРегистрации);
					КонецЕсли;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Для НомПоз = 1 По ДатаМестоНомерРегистрацииДлина Цикл
			НомПоз_Обр = ДатаМестоНомерРегистрацииДлина - НомПоз + 1;
			Если ОтсекаемыеСимволы.Найти(Сред(ДатаМестоНомерРегистрации, НомПоз_Обр, 1)) = Неопределено Тогда
				Если НомПоз_Обр < ДатаМестоНомерРегистрацииДлина Тогда
					ДатаМестоНомерРегистрации = Лев(ДатаМестоНомерРегистрации, НомПоз_Обр);
				КонецЕсли;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если СтрДлина(ДатаМестоНомерРегистрации) = 1
			И ОтсекаемыеСимволы.Найти(ДатаМестоНомерРегистрации) <> Неопределено Тогда
			ДатаМестоНомерРегистрации = "";
		КонецЕсли;
		
		СтруктураДанных.Вставить("МестоРегистрации", ДатаМестоНомерРегистрации);
		
		СтруктураДанных.Удалить("ДатаМестоНомерРегистрации");
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ВыгрузкаРегламентированногоОтчета

Функция УниверсальнаяВыгрузка(Параметры) Экспорт
	
	Перем ДанныеОтчета;
	Перем СтруктураРеквизитовФормы;
	
	СохраненныйОтчет  = Параметры.СохраненныйОтчет;
	ИсточникОтчета    = Параметры.ИсточникОтчета;
	ИмяФормы	      = Параметры.ВыбраннаяФорма;
	РезультатВыгрузки = Параметры.РезультатВыгрузки;
	
	СформироватьСтруктуруРеквизитовФормы(ИмяФормы, СтруктураРеквизитовФормы);
																  
	СтруктураРеквизитовФормы.мСохраненныйДок = СохраненныйОтчет;
															  
	СформироватьСтруктуруПоказателей(ИмяФормы,
									 ДанныеОтчета,
									 СтруктураРеквизитовФормы);
	
	ПараметрыВыгрузки = СформироватьСтруктуруПараметров(ИмяФормы,
														ДанныеОтчета,
														СтруктураРеквизитовФормы);
	
	ДеревоВыгрузки = ИзвлечьСтруктуруXML(ИмяФормы);
	
	Если НЕ ВыгрузкаВозможна(ИмяФормы,
							 ДанныеОтчета,
							 ПараметрыВыгрузки,
							 ДеревоВыгрузки,
							 РезультатВыгрузки,
							 СтруктураРеквизитовФормы) Тогда
		
		РезультатВыгрузки.Вставить("РеглОтчетВыгружен", Ложь);
		
		Возврат РезультатВыгрузки;
		
	КонецЕсли;
	
	ЗаполнитьДанными(ИмяФормы,
					 ДанныеОтчета,
					 ПараметрыВыгрузки,
					 ДеревоВыгрузки);
										
	Если НЕ ПроверитьДанные(ИмяФормы, ДеревоВыгрузки, РезультатВыгрузки) Тогда
											
		РезультатВыгрузки.Вставить("РеглОтчетВыгружен", Ложь);
		
		Возврат РезультатВыгрузки;
		
	КонецЕсли;
												
	КодировкаФайлаВыгрузки = "utf-8";									
										
	ТекстФайлаВыгрузки = ВыгрузитьДеревоВXML(ИмяФормы,
											 ДеревоВыгрузки,
											 ПараметрыВыгрузки,
											 КодировкаФайлаВыгрузки);
																
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("xml");
	ЗаписьТекста = Новый ЗаписьТекста(ИмяВременногоФайла, КодировкаФайлаВыгрузки);
	ЗаписьТекста.Записать(ТекстФайлаВыгрузки);
	ЗаписьТекста.Закрыть();
	ЗаписьТекста = Неопределено;
	
	ФайлВыгрузки = Новый ДвоичныеДанные(ИмяВременногоФайла);
	
	РегламентированнаяОтчетность.УдалитьСигнатуруBOM(ФайлВыгрузки);
	
	АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(ФайлВыгрузки, Новый УникальныйИдентификатор);
	
	УдалитьФайлы(ИмяВременногоФайла);
	
	РезультатВыгрузки.Вставить("ИмяФайлаВыгрузки", ПараметрыВыгрузки.ИмяФайла);
	РезультатВыгрузки.Вставить("АдресФайлаВыгрузки", АдресВоВременномХранилище);
	РезультатВыгрузки.Вставить("КодировкаФайлаВыгрузки", КодировкаФайлаВыгрузки);
	РезультатВыгрузки.Вставить("ТипФайлаВыгрузки", "ПодтверждениеВидаДеятельности");
	РезультатВыгрузки.Вставить("РеглОтчетВыгружен", Истина);
		
	Возврат РезультатВыгрузки;
	
КонецФункции

Функция ВыгрузитьДеревоВXML(ИмяФормы, ДеревоВыгрузки, ПараметрыВыгрузки, КодировкаФайлаВыгрузки)
	
	ПотокXML = СоздатьНовыйПотокXML(ИмяФормы, КодировкаФайлаВыгрузки);
	ЗаписатьУзелДереваВXML(ИмяФормы, ДеревоВыгрузки, ПотокXML, ПараметрыВыгрузки);
	ТекстДляЗаписи = ПотокXML.Закрыть();
	
	Возврат ТекстДляЗаписи;
	
КонецФункции

Функция СоздатьНовыйПотокXML(ИмяФормы, КодировкаФайлаВыгрузки)
	
	ПотокXML = Новый ЗаписьXML();
	ПотокXML.УстановитьСтроку(КодировкаФайлаВыгрузки);
	ПотокXML.ЗаписатьОбъявлениеXML();
	ПотокXML.Отступ = Истина;
	
	Возврат ПотокXML;
	
КонецФункции

Функция ЗаписатьУзелДереваВXML(ИмяФормы, СтрокаДерева, ПотокXML, ПараметрыВыгрузки)
	
	Если ТипЗнч(СтрокаДерева) = Тип("ДеревоЗначений") Тогда
		
		ПотокXML.ЗаписатьНачалоЭлемента("s:Envelope");
		ПотокXML.ЗаписатьАтрибут("xmlns:s", "http://schemas.xmlsoap.org/soap/envelope/");
		
		ПотокXML.ЗаписатьНачалоЭлемента("s:Header");
		ПотокXML.ЗаписатьКонецЭлемента();
		
		ПотокXML.ЗаписатьНачалоЭлемента("s:Body");
		
		ПотокXML.ЗаписатьНачалоЭлемента("OKVEDConfirmationRequest");
		ПотокXML.ЗаписатьАтрибут("xmlns", "http://ws.fss.ru/services/okvedconfirm");
		
		Для Каждого Стр Из СтрокаДерева.Строки Цикл
			ЗаписатьУзелДереваВXML(ИмяФормы, Стр, ПотокXML, ПараметрыВыгрузки);
		КонецЦикла;
		
		ПотокXML.ЗаписатьКонецЭлемента();
		
		ПотокXML.ЗаписатьКонецЭлемента();
		
		ПотокXML.ЗаписатьКонецЭлемента();
		
	Иначе
		
		Если СтрокаДерева.Тип = "А" ИЛИ СтрокаДерева.Тип = "A" Тогда
			
			ПотокXML.ЗаписатьАтрибут(СтрокаДерева.Код, Строка(СтрокаДерева.Значение));
			
		Иначе
			
			ПотокXML.ЗаписатьНачалоЭлемента(СтрокаДерева.Код);
			
			Если СтрокаДерева.Строки.Количество() > 0 Тогда
				ПотокXML.ЗаписатьАтрибут("xmlns", "");
			КонецЕсли;
			
			Для Каждого Лист Из СтрокаДерева.Строки Цикл
				ЗаписатьУзелДереваВXML(ИмяФормы, Лист, ПотокXML, ПараметрыВыгрузки);
			КонецЦикла;
			
			ПотокXML.ЗаписатьТекст(Строка(СтрокаДерева.Значение));
			ПотокXML.ЗаписатьКонецЭлемента();
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции

Функция ПроверитьДанные(ИмяФормы, ДеревоВыгрузки, РезультатВыгрузки) Экспорт
	
	СтатусПроверки = Истина;
	
	Если ТипЗнч(ДеревоВыгрузки) <> Тип("ДеревоЗначений") Тогда
		Если НЕ ЗначениеСоответствуетФормату(ИмяФормы, ДеревоВыгрузки, РезультатВыгрузки) Тогда
			СтатусПроверки = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Для Каждого Стр из ДеревоВыгрузки.Строки Цикл
		СтатусПроверки = (ПроверитьДанные(ИмяФормы, Стр, РезультатВыгрузки) И СтатусПроверки);
	КонецЦикла;
	
	Возврат СтатусПроверки;
	
КонецФункции

Функция ЗначениеСоответствуетФормату(ИмяФормы, Стр, РезультатВыгрузки)
	
	СтатусПроверки = Истина;
	
	Если Стр.Формат = "Т" ИЛИ Стр.Формат = "T" Тогда // Учтем оба варианта: кириллицу и латиницу.
		ДлинаЗначения = СтрДлина(Стр.Значение);
		Если ДлинаЗначения < Стр.МинРазмерность Тогда
			СтатусПроверки = Ложь;
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
				НСтр("ru='Формирование XML: Длина значения показателя """
				+ РегламентированнаяОтчетность.ПредставлениеПоказателя(Стр)
				+ """ (" + АдресПоказателя(ИмяФормы, Стр)+ ") меньше минимально возможной ("
				+ ДлинаЗначения + " < " + Стр.МинРазмерность + ")'"),
				"Титульный", "");
		КонецЕсли;
		Если ДлинаЗначения > Стр.МаксРазмерность Тогда
			СтатусПроверки = Ложь;
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
				НСтр("ru='Формирование XML: Длина значения показателя """
				+ РегламентированнаяОтчетность.ПредставлениеПоказателя(Стр)
				+ """ (" + АдресПоказателя(ИмяФормы, Стр)+ ") больше максимально возможной ("
				+ ДлинаЗначения + " > " + Стр.МаксРазмерность + ")'"),
				"Титульный", "");
		КонецЕсли;
	КонецЕсли;
	
	Возврат СтатусПроверки;
	
КонецФункции

Функция АдресПоказателя(ИмяФормы, СтрокаПоказателя)
	
	Результат = СтрокаПоказателя.Код;
	
	СтрокаВерхнегоУровня = СтрокаПоказателя.Родитель;
	
	Пока ЗначениеЗаполнено(СтрокаВерхнегоУровня) Цикл
		Результат = СтрокаВерхнегоУровня.Код + "\" + Результат;
		СтрокаВерхнегоУровня = СтрокаВерхнегоУровня.Родитель;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Процедура ЗаполнитьДанными(ИмяФормы,
						   ДанныеОтчета,
						   ПараметрыВыгрузки,
						   ДеревоВыгрузки) Экспорт
	
	ЗаполнитьСодержательнуюЧасть(ИмяФормы, ДанныеОтчета, ПараметрыВыгрузки, ДеревоВыгрузки);
	
	ОтсечьНезаполненныеНеобязательныеУзлы(ИмяФормы, ДеревоВыгрузки);
	
КонецПроцедуры

Процедура ОтсечьНезаполненныеНеобязательныеУзлы(ИмяФормы, Узел)
	
	КоличествоСтрок = Узел.Строки.Количество();
	Для Инд = 1 По КоличествоСтрок Цикл
		Стр = Узел.Строки.Получить(КоличествоСтрок - Инд);
		ОтсечьНезаполненныеНеобязательныеУзлы(ИмяФормы, Стр);
	КонецЦикла;
	
	Если ТипЗнч(Узел) <> Тип("ДеревоЗначений") Тогда
		Если (СтрНайти(Узел.Обязательность, "Н") <> 0 ИЛИ СтрНайти(Узел.Обязательность, "H") <> 0)
			И УзелПуст(ИмяФормы, Узел) Тогда
			РегламентированнаяОтчетность.УдалитьУзел(Узел);
		// Учтем оба варианта: кириллицу и латиницу.	
		ИначеЕсли (СтрНайти(Узел.Обязательность, "М") <> 0 ИЛИ СтрНайти(Узел.Обязательность, "M") <> 0)
				И УзелПуст(ИмяФормы, Узел)
				И ?(СтрНайти(Узел.Обязательность, "О") <> 0 ИЛИ СтрНайти(Узел.Обязательность, "O") <> 0,
								 ИмеютсяАналогичныеСоседниеУзлы(ИмяФормы, Узел), Истина) Тогда
			РегламентированнаяОтчетность.УдалитьУзел(Узел);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция ИмеютсяАналогичныеСоседниеУзлы(ИмяФормы, Стр)
	
	РодительСтроки = ?(Стр.Родитель = Неопределено, Стр.Владелец(), Стр.Родитель);
	Возврат (РодительСтроки.Строки.НайтиСтроки(Новый Структура("Ключ", Стр.Ключ), Ложь).Количество() > 1);
	
КонецФункции

Функция УзелПуст(ИмяФормы, Узел)
	
	Для Каждого Стр из Узел.Строки Цикл
		Если НЕ УзелПуст(ИмяФормы, Стр) Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ ЗначениеЗаполнено(Узел.Значение) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если Узел.Формат = "N" Тогда
		Возврат Узел.Значение = "0";
	ИначеЕсли Узел.Формат = "D" Тогда
		Возврат Узел.Значение = "0001-01-01";
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Процедура ЗаполнитьСодержательнуюЧасть(ИмяФормы, ДанныеОтчета, ПараметрыВыгрузки, УзелРодитель)
	
	ЗаполнитьДаннымиУзел(ИмяФормы, ПараметрыВыгрузки, УзелРодитель);
	
	Приложение2 = ДанныеОтчета.ПолеТабличногоДокументаПриложение2;
	
	Узел_incomeDistribution_шаблон = ПолучитьПодчиненныйЭлемент(ИмяФормы, УзелРодитель, "incomeDistribution");
	
	НомСтр = 1;
	_НомСтр = "_1";
	
	Пока РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(Приложение2, "П000020000101" + _НомСтр)
		И РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(Приложение2, "П000020000103" + _НомСтр)
		И РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(Приложение2, "П000020000104" + _НомСтр)
		И РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(Приложение2, "П000020000106" + _НомСтр) Цикл
		
		Узел_incomeDistribution = СкопироватьУзел(ИмяФормы, УзелРодитель, Узел_incomeDistribution_шаблон);
		ВыгрузитьСтрокуМногострочнойЧасти(ИмяФормы, Приложение2, Узел_incomeDistribution, НомСтр);
		
		НомСтр = НомСтр + 1;
		_НомСтр = "_" + Формат(НомСтр, "ЧГ=");
		
	КонецЦикла;
	
КонецПроцедуры

Функция СкопироватьУзел(ИмяФормы, Родитель, Узел)
	
	РодительСтрока = ?(Родитель = Неопределено, Узел.Владелец(), Родитель);
	
	СтрокиСТемЖеКодом = РодительСтрока.Строки.НайтиСтроки(Новый Структура("Код", Узел.Код), Ложь);
	МаксИндекс = -1;
	Для Каждого СтрокаСТемЖеКодом Из СтрокиСТемЖеКодом Цикл
		ТекИндекс = РодительСтрока.Строки.Индекс(СтрокаСТемЖеКодом);
		Если ТекИндекс > МаксИндекс Тогда
			МаксИндекс = ТекИндекс;
		КонецЕсли;
	КонецЦикла;
	
	ИндексСоздаваемогоУзла = МаксИндекс + 1;
	Если ИндексСоздаваемогоУзла >= РодительСтрока.Строки.Количество() ИЛИ ИндексСоздаваемогоУзла = 0 Тогда
		НовыйУзел = РодительСтрока.Строки.Добавить();
	Иначе
		НовыйУзел = РодительСтрока.Строки.Вставить(ИндексСоздаваемогоУзла);
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(НовыйУзел, Узел, , "Родитель, Строки");
	Для Каждого Стр из Узел.Строки Цикл
		СкопироватьУзел(ИмяФормы, НовыйУзел, Стр);
	КонецЦикла;
	Возврат НовыйУзел;
	
КонецФункции

Процедура ВыгрузитьСтрокуМногострочнойЧасти(ИмяФормы, Данные, Узел, НомерСтроки,
											ПоказателиИсключения = Неопределено,
											ВыгружатьПустую = Ложь)
	
	Если ПоказателиИсключения = Неопределено Тогда
		СтрИсключения = Новый Структура;
	Иначе
		СтрИсключения = Новый Структура(ПоказателиИсключения);
	КонецЕсли;
	
	СуффиксТекущейСтроки = "_" + Формат(НомерСтроки, "ЧГ=");
	
	СтрокаПустая = Истина;
	Для Каждого Стр Из Узел.Строки Цикл
		Если НЕ ЗначениеЗаполнено(Стр.Ключ) Тогда
			Продолжить;
		КонецЕсли;
		Если НЕ СтрИсключения.Свойство(Стр.Ключ)
			  И ЗначениеПоказателяЗаполнено(ИмяФормы, Данные[Стр.Ключ + СуффиксТекущейСтроки], Стр) Тогда
			СтрокаПустая = Ложь;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ СтрокаПустая ИЛИ ВыгружатьПустую Тогда
		Для Каждого Стр Из Узел.Строки Цикл
			Если ЗначениеЗаполнено(Стр.Ключ) Тогда
				ВывестиПоказательВXML(ИмяФормы, Стр, Данные[Стр.Ключ + СуффиксТекущейСтроки]);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Функция ЗначениеПоказателяЗаполнено(ИмяФормы, ЗначениеПоказателя, ЯвляетсяСуммой)
	
	Если ТипЗнч(ЯвляетсяСуммой) = Тип("Булево") Тогда
		ПоказательЯвляетсяСуммой = ЯвляетсяСуммой;
	Иначе
		ПоказательЯвляетсяСуммой = (
			ЯвляетсяСуммой.Формат = "N" И ЯвляетсяСуммой.МаксРазмерность >= 10 И ЯвляетсяСуммой.МинРазмерность = 99999);
	КонецЕсли;
	
	Возврат ?(ПоказательЯвляетсяСуммой, ЗначениеСуммыЗаполнено(ИмяФормы, ЗначениеПоказателя),
										ЗначениеЗаполнено(ЗначениеПоказателя));
	
КонецФункции

Функция ЗначениеСуммыЗаполнено(ИмяФормы, ЗначениеСуммы)
	
	Возврат (Окр(ЗначениеСуммы) <> 0);
	
КонецФункции

Функция ВывестиПоказательВXML(ИмяФормы, Узел, ЗначениеПоказателя)
	
	МинШирина = Узел.МинРазмерность;
	МаксШирина = Узел.МаксРазмерность;
	
	Если Узел.Формат = "T" ИЛИ Узел.Формат = "Т" Тогда // Учтем оба варианта: кириллицу и латиницу.
		Если ТипЗнч(ЗначениеПоказателя) = Тип("Дата") Тогда
			ЗначениеПоказателяСтр = Формат(ЗначениеПоказателя, "ДФ=yyyy-MM-dd");
		Иначе
			ЗначениеПоказателяСтр = СокрЛП(ЗначениеПоказателя);
		КонецЕсли;
		Узел.Значение = ?(МаксШирина < СтрДлина(ЗначениеПоказателяСтр),
			СокрЛП(Лев(ЗначениеПоказателяСтр, МаксШирина)), ЗначениеПоказателяСтр);
	ИначеЕсли Узел.Формат = "N" Тогда
		СтрокаФормата = "ЧРД=.;ЧН=0;ЧГ=;";
		Если Узел.МаксРазмерность <> 0 И Узел.МаксРазмерность <> 99999 Тогда
			СтрокаФормата = СтрокаФормата + "ЧЦ=" + Формат(Узел.МаксРазмерность, "ЧГ=") + ";";
		КонецЕсли;
		Если Узел.МинРазмерность <> 99999 Тогда
			СтрокаФормата = СтрокаФормата + "ЧДЦ=" + Формат(Узел.МинРазмерность, "ЧГ=") + ";";
		КонецЕсли;
		Узел.Значение = СокрЛП(Формат(ЗначениеПоказателя, СтрокаФормата));
	ИначеЕсли Узел.Формат = "D" Тогда
		Если ЗначениеЗаполнено(ЗначениеПоказателя) Тогда
			Узел.Значение = СокрЛП(Формат(ЗначениеПоказателя, "ДФ=yyyy-MM-dd"));
		Иначе
			Узел.Значение = "0001-01-01";
		КонецЕсли;
	ИначеЕсли Узел.Формат = "gYear" Тогда
		Если ТипЗнч(ЗначениеПоказателя) = Тип("Дата") Тогда
			Узел.Значение = СокрЛП(Формат(ЗначениеПоказателя, "ДФ=гггг"));
		Иначе
			Узел.Значение = Прав(СокрЛП(ЗначениеПоказателя), 4);
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

Процедура ЗаполнитьДаннымиУзел(ИмяФормы, ПараметрыВыгрузки, Узел)
	
	Для Каждого Стр из Узел.Строки Цикл
		Если Стр.Тип = "С" ИЛИ Стр.Тип = "C" Тогда // Учтем оба варианта: кириллицу и латиницу.
			ЗаполнитьДаннымиУзел(ИмяФормы, ПараметрыВыгрузки, Стр);
		Иначе
			Если ПустаяСтрока(Стр.ЗначениеПоУмолчанию) Тогда
				Если НЕ ПустаяСтрока(Стр.Ключ)
					И РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(ПараметрыВыгрузки, Стр.Ключ) Тогда
					ВывестиПоказательВXML(ИмяФормы, Стр, ПараметрыВыгрузки[Стр.Ключ]);
				КонецЕсли;
			ИначеЕсли Лев(Стр.ЗначениеПоУмолчанию, 1) = "&" Тогда
				Ключ = Сред(Стр.ЗначениеПоУмолчанию, 2);
				Если РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(ПараметрыВыгрузки, Ключ) Тогда
					ВывестиПоказательВXML(ИмяФормы, Стр, ПараметрыВыгрузки[Ключ]);
				КонецЕсли;
			Иначе
				Стр.Значение = Стр.ЗначениеПоУмолчанию;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьПодчиненныйЭлемент(ИмяФормы, Узел, КодЭлемента)
	
	Для Каждого Стр Из Узел.Строки Цикл
		Если Стр.Код = КодЭлемента Тогда
			Возврат Стр;
		КонецЕсли;
	КонецЦикла;
	
КонецФункции

Процедура СформироватьСтруктуруПоказателей(ИмяФормы,
										   ДанныеОтчета,
										   СтруктураРеквизитовФормы) Экспорт
	
	ДанныеОтчета = Новый Структура;
	
	СохрСтруктура = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить();
	
	ПоказателиОтчета = СохрСтруктура.ПоказателиОтчета;
	
	Для Каждого Раздел Из ПоказателиОтчета Цикл
		ДанныеОтчета.Вставить(Раздел.Ключ, РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(Раздел.Значение));
	КонецЦикла;
	
КонецПроцедуры

Функция ВыгрузкаВозможна(ИмяФормы,
						 ДанныеОтчета,
						 ПараметрыВыгрузки,
						 ДеревоВыгрузки,
						 РезультатВыгрузки,
						 СтруктураРеквизитовФормы) Экспорт
	
	СтатусПроверки = Истина;
	
	Приложение2 = ДанныеОтчета.ПолеТабличногоДокументаПриложение2;
	
	// Приложение 1.
	//
	Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.РегНомер) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки, НСтр(
		"ru='Не задан регистрационный номер страхователя'"), "Приложение1", "РегистрационныйНомерФСС");
		СтатусПроверки = Ложь;
	ИначеЕсли СтрДлина(СокрЛП(ПараметрыВыгрузки.РегНомер)) < 10 Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки, НСтр(
		"ru='Задан регистрационный номер страхователя, не состоящий из 10 цифр'"), "Приложение1", "РегистрационныйНомерФСС");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.КодПодчиненности) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки, НСтр(
		"ru='Не задан код подчиненности'"), "Приложение1", "КодПодчиненности");
		СтатусПроверки = Ложь;
	ИначеЕсли СтрДлина(СокрЛП(ПараметрыВыгрузки.КодПодчиненности)) < 5 Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки, НСтр(
		"ru='Задан код подчиненности, не состоящий из 5 цифр'"), "Приложение1", "КодПодчиненности");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если СтрДлина(ПараметрыВыгрузки.ТекстПояснЗап) > 4000 Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки, НСтр(
		"ru='Задан текст пояснительной записки, состоящий из более чем 4000 символов'"),
		"Приложение1", "ТекстПояснительнойЗаписки");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	// Приложение 2.
	//
	Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.ИНН) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки, НСтр(
		"ru='Не задан ИНН организации'"), "Приложение2", "ИННОрганизации");
		СтатусПроверки = Ложь;
	Иначе
		ИНН = СокрЛП(ПараметрыВыгрузки.ИНН);
		Если СтрДлина(ИНН) <> 10 ИЛИ НЕ СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(ИНН) Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки, НСтр(
			"ru='Задан ИНН организации, не состоящий из 10 цифр'"), "Приложение2", "ИННОрганизации");
			СтатусПроверки = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.КПП) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки, НСтр(
		"ru='Не задан КПП организации'"), "Приложение2", "КППОрганизации");
		СтатусПроверки = Ложь;
	ИначеЕсли СтрДлина(СокрЛП(ПараметрыВыгрузки.КПП)) <> 9 Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки, НСтр(
		"ru='Задан КПП организации, не состоящий из 9 символов'"), "Приложение2", "КППОрганизации");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.ОГРН) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки, НСтр(
		"ru='Не задан ОГРН'"), "Приложение2", "ОГРН");
		СтатусПроверки = Ложь;
	Иначе
		ОГРН = СокрЛП(ПараметрыВыгрузки.ОГРН);
		Если СтрДлина(ОГРН) <> 13 ИЛИ НЕ СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(ОГРН) Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки, НСтр(
			"ru='Задан ОГРН, не состоящий из 13 цифр'"), "Приложение2", "ОГРН");
			СтатусПроверки = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.ДатаРег) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки, НСтр(
		"ru='Не задана дата регистрации организации'"), "Приложение2", "ДатаРегистрации");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.МестоРег) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки, НСтр(
		"ru='Не задано место регистрации организации'"), "Приложение2", "МестоРегистрации");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.ЮрАдрес) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки, НСтр(
		"ru='Не задан юридический адрес организации'"), "Приложение2", "ЮрАдресОрганизации");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ПараметрыВыгрузки.ДатаНачХозДеят = "" Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки, НСтр(
		"ru='Не задана дата начала хозяйственной деятельности'"),
		"Приложение2", "ДатаНачалаХозДеятельности");
		СтатусПроверки = Ложь;
	ИначеЕсли ПараметрыВыгрузки.ДатаНачХозДеят = Неопределено Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки, НСтр(
		"ru='Задана дата начала хозяйственной деятельности, не соответствующая шаблону ""ДД.ММ.ГГГГ""'"),
		"Приложение2", "ДатаНачалаХозДеятельности");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.ФИОРук) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки, НСтр(
		"ru='Не заданы фамилия, имя, отчество руководителя организации'"),
		"Приложение2", "ШапкаРуководительФИО");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.ФИОГлавБух) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки, НСтр(
		"ru='Не заданы фамилия, имя, отчество главного бухгалтера организации'"),
		"Приложение2", "ШапкаГлавбухФИО");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если НЕ СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(ПараметрыВыгрузки.СреднЧислПредГод, , Истина) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки, НСтр(
		"ru='Задана среднесписочная численность работающих за предыдущий год, не состоящая только из цифр'"),
		"Приложение2", "СреднесписочнаяЧисленность");
		СтатусПроверки = Ложь;
	ИначеЕсли СтрДлина(СокрЛП(ПараметрыВыгрузки.СреднЧислПредГод)) > 6 Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки, НСтр(
		"ru='Задана среднесписочная численность работающих за предыдущий год, превышающая число 999999'"),
		"Приложение2", "СреднесписочнаяЧисленность");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	ТаблЗадействованныхКодовПоОКВЭД = Новый ТаблицаЗначений;
	ТаблЗадействованныхКодовПоОКВЭД.Колонки.Добавить("КодПоОКВЭД");
	ТаблЗадействованныхКодовПоОКВЭД.Колонки.Добавить("НомерСтроки");
	ТаблЗадействованныхКодовПоОКВЭД.Колонки.Добавить("СчетчикСтрок");
	
	ЗаполненаХотяБыОднастрока = Ложь;
	НомСтр = 1;
	_НомСтр = "_1";
	Пока РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(Приложение2, "П000020000101" + _НомСтр)
		И РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(Приложение2, "П000020000103" + _НомСтр)
		И РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(Приложение2, "П000020000104" + _НомСтр)
		И РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(Приложение2, "П000020000106" + _НомСтр) Цикл
		
		ЗначГр1 = СокрЛП(Приложение2["П000020000101" + _НомСтр]);
		ЗначГр2 = СокрЛП(Приложение2["П000020000102" + _НомСтр]);
		ЗначГр3 = Приложение2["П000020000103" + _НомСтр];
		ЗначГр4 = Приложение2["П000020000104" + _НомСтр];
		ЗначГр5 = Приложение2["П000020000105" + _НомСтр];
		ЗначГр6 = Приложение2["П000020000106" + _НомСтр];
		
		СтрокаЗаполнена = ЗначениеЗаполнено(ЗначГр1) ИЛИ ЗначениеЗаполнено(ЗначГр2) ИЛИ ЗначениеЗаполнено(ЗначГр3)
		ИЛИ ЗначениеЗаполнено(ЗначГр4) ИЛИ ЗначениеЗаполнено(ЗначГр5) ИЛИ ЗначениеЗаполнено(ЗначГр6);
		
		Если СтрокаЗаполнена Тогда
			
			ЗаполненаХотяБыОднастрока = Истина;
			
			Если НЕ ЗначениеЗаполнено(ЗначГр1) Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(
				РезультатВыгрузки, НСтр("ru='В строке " + Формат(НомСтр, "ЧГ=")
				+ " распределения доходов и поступлений за предыдущий финансовый год не задан код основного вида экономической деятельности'"),
				"Приложение2", "П000020000101" + _НомСтр);
				СтатусПроверки = Ложь;
			ИначеЕсли СтрДлина(ЗначГр1) < 4
				ИЛИ НЕ РегламентированнаяОтчетностьКлиентСервер.ОКВЭДСоответствуетТребованиям(ЗначГр1) Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(
				РезультатВыгрузки, НСтр("ru='В строке " + Формат(НомСтр, "ЧГ=")
				+ " распределения доходов и поступлений за предыдущий финансовый год задан код основного вида экономической деятельности, не соответствующий одному из возможных шаблонов: ""XX.X"", ""XX.XX"", ""XX.XX.X"", ""XX.XX.XX"" (X - любая цифра)'"),
				"Приложение2", "П000020000101" + _НомСтр);
				СтатусПроверки = Ложь;
			Иначе
				НоваяСтрокаТаблЗадействованныхКодовПоОКВЭД = ТаблЗадействованныхКодовПоОКВЭД.Добавить();
				НоваяСтрокаТаблЗадействованныхКодовПоОКВЭД.КодПоОКВЭД = ЗначГр1;
				НоваяСтрокаТаблЗадействованныхКодовПоОКВЭД.НомерСтроки = НомСтр;
				НоваяСтрокаТаблЗадействованныхКодовПоОКВЭД.СчетчикСтрок = 1;
			КонецЕсли;
			
		КонецЕсли;
		
		НомСтр = НомСтр + 1;
		_НомСтр = "_" + Формат(НомСтр, "ЧГ=");
		
	КонецЦикла;
	
	Если НЕ ЗаполненаХотяБыОднастрока Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки, НСтр(
		"ru='В распределении доходов и поступлений за предыдущий финансовый год не заполнена ни одна строка'"),
		"Приложение2", "П000020000101_1");
		СтатусПроверки = Ложь;
	Иначе
		ТЗ_КодовПоОКВЭД = ТаблЗадействованныхКодовПоОКВЭД.Скопировать();
		ТЗ_КодовПоОКВЭД.Свернуть("КодПоОКВЭД", "СчетчикСтрок");
		НомераСтрокПриложения2СНеуникальнымиКодамиПоОКВЭД = Новый ТаблицаЗначений;
		НомераСтрокПриложения2СНеуникальнымиКодамиПоОКВЭД.Колонки.Добавить("НомерСтроки");
		НомерПервойСтрокиПриложения2СНеуникальнымКодомПоОКВЭД = Неопределено;
		Если ТаблЗадействованныхКодовПоОКВЭД.Количество() <> ТЗ_КодовПоОКВЭД.Количество() Тогда
			Для каждого СтрокаТЗ_КодовПоОКВЭД Из ТЗ_КодовПоОКВЭД Цикл
				Если СтрокаТЗ_КодовПоОКВЭД.СчетчикСтрок > 1 Тогда
					СтрокиТаблЗадействованныхКодовПоОКВЭД = ТаблЗадействованныхКодовПоОКВЭД.НайтиСтроки(
					Новый Структура("КодПоОКВЭД", СтрокаТЗ_КодовПоОКВЭД.КодПоОКВЭД));
					Для каждого СтрокаТаблЗадействованныхКодовПоОКВЭД Из СтрокиТаблЗадействованныхКодовПоОКВЭД Цикл
						НовСтрНомераСтрокПриложения2СНеуникальнымиКодамиПоОКВЭД
						= НомераСтрокПриложения2СНеуникальнымиКодамиПоОКВЭД.Добавить();
						НовСтрНомераСтрокПриложения2СНеуникальнымиКодамиПоОКВЭД.НомерСтроки
						= СтрокаТаблЗадействованныхКодовПоОКВЭД.НомерСтроки;
						Если НомерПервойСтрокиПриложения2СНеуникальнымКодомПоОКВЭД = Неопределено Тогда
							НомерПервойСтрокиПриложения2СНеуникальнымКодомПоОКВЭД = СтрокаТаблЗадействованныхКодовПоОКВЭД.НомерСтроки;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		Если НомераСтрокПриложения2СНеуникальнымиКодамиПоОКВЭД.Количество() > 0 Тогда
			НомераСтрокПриложения2СНеуникальнымиКодамиПоОКВЭД.Сортировать("НомерСтроки");
			НомераСтрокПриложения2СНеуникальнымиКодамиПоОКВЭД
			= НомераСтрокПриложения2СНеуникальнымиКодамиПоОКВЭД.ВыгрузитьКолонку("НомерСтроки");
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки, НСтр(
			"ru='В распределении доходов и поступлений за предыдущий финансовый год заданы неуникальные коды по ОКВЭД в строках: "
			+ СтрСоединить(НомераСтрокПриложения2СНеуникальнымиКодамиПоОКВЭД, ", ") + "'"),
			"Приложение2", "П000020000101_" + Формат(НомерПервойСтрокиПриложения2СНеуникальнымКодомПоОКВЭД, "ЧГ="));
			СтатусПроверки = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Возврат СтатусПроверки;
	
КонецФункции

Функция СформироватьСтруктуруПараметров(ИмяФормы,
										ДанныеОтчета,
										СтруктураРеквизитовФормы) Экспорт
	
	Приложение1 = ДанныеОтчета.ПолеТабличногоДокументаПриложение1;
	Приложение2 = ДанныеОтчета.ПолеТабличногоДокументаПриложение2;
	
	КонвертироватьПоказательДатаМестоНомерРегистрации(Приложение2);
	
	СтрокаСведений = "ИННЮЛ, КППЮЛ, ДатаРегистрации, ФИОРук, ФИОБух, АдрЮР, РегистрационныйНомерФСС, КодПодчиненностиФСС";
	СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(
	СтруктураРеквизитовФормы.мСохраненныйДок.Организация,
	СтруктураРеквизитовФормы.мСохраненныйДок.ДатаПодписи, СтрокаСведений);
	
	ПараметрыВыгрузки = Новый Структура;
	
	ПараметрыВыгрузки.Вставить("НаимПрог", Лев(РегламентированнаяОтчетность.НазваниеПрограммы(), 50));
	ПараметрыВыгрузки.Вставить("ВерсПрог", Лев(РегламентированнаяОтчетность.ВерсияПрограммы(),   20));
	
	ПараметрыВыгрузки.Вставить("РегНомер",         СокрЛП(СведенияОбОрганизации.РегистрационныйНомерФСС));
	ПараметрыВыгрузки.Вставить("КодПодчиненности", СокрЛП(СведенияОбОрганизации.КодПодчиненностиФСС));
	ПараметрыВыгрузки.Вставить("ИНН",              СокрЛП(СведенияОбОрганизации.ИННЮЛ));
	ПараметрыВыгрузки.Вставить("ИНН_выгр",         СтроковыеФункцииКлиентСервер.ДополнитьСтроку(ПараметрыВыгрузки.ИНН, 12));
	ПараметрыВыгрузки.Вставить("КПП",              СокрЛП(СведенияОбОрганизации.КППЮЛ));
	
	ДатаНачХозДеят = "";
	Если ЗначениеЗаполнено(Приложение2.ДатаНачалаХозДеятельности) Тогда
		Если ТипЗнЧ(Приложение2.ДатаНачалаХозДеятельности) = Тип("Строка") Тогда
			ДатаНачХозДеят = СокрЛП(Приложение2.ДатаНачалаХозДеятельности);
			ДатаНачХозДеят = СтроковыеФункцииКлиентСервер.СтрокаВДату(ДатаНачХозДеят);
			ДатаНачХозДеят = ?(ЗначениеЗаполнено(ДатаНачХозДеят), Формат(ДатаНачХозДеят, "ДФ=""гггг-ММ-дд"""), Неопределено);
		ИначеЕсли ТипЗнЧ(Приложение2.ДатаНачалаХозДеятельности) = Тип("Дата") Тогда
			ДатаНачХозДеят = ?(ЗначениеЗаполнено(Приложение2.ДатаНачалаХозДеятельности),
			Формат(Приложение2.ДатаНачалаХозДеятельности, "ДФ=""гггг-ММ-дд"""), Неопределено);
		КонецЕсли;
	КонецЕсли;
	ПараметрыВыгрузки.Вставить("ДатаНачХозДеят", ДатаНачХозДеят);
	
	ОГРН = "";
	Если Приложение2.Свойство("ОГРН") И ЗначениеЗаполнено(Приложение2.ОГРН) Тогда
		ОГРН = СокрЛП(Приложение2.ОГРН);
	КонецЕсли;
	ПараметрыВыгрузки.Вставить("ОГРН", ОГРН);
	
	ДатаРег = "";
	Если Приложение2.Свойство("ДатаРегистрации") И ЗначениеЗаполнено(Приложение2.ДатаРегистрации) Тогда
		ДатаРег = Формат(Приложение2.ДатаРегистрации, "ДФ=""гггг-ММ-дд""");
	КонецЕсли;
	ПараметрыВыгрузки.Вставить("ДатаРег", ДатаРег);
	
	ПараметрыВыгрузки.Вставить("МестоРег", ?(Приложение2.Свойство("МестоРегистрации"),
	Лев(СокрЛП(Приложение2.МестоРегистрации), 300), ""));
	
	ПараметрыВыгрузки.Вставить("ПризнакГМУ", ?(Приложение1.Свойство("ГосУчреждение")
	И ЗначениеЗаполнено(Приложение1["ГосУчреждение"]), "true", "false"));
	
	ПараметрыВыгрузки.Вставить("ПризнакНКО", ?(Приложение1.Свойство("НекоммерческаяОрганизация")
	И ЗначениеЗаполнено(Приложение1["НекоммерческаяОрганизация"]), "true", "false"));
	
	ЮрАдрес = "";
	Если НЕ Приложение2.Свойство("ЮрАдресОрганизации") Тогда
		ЮрАдрес = Лев(СокрЛП(РегламентированнаяОтчетностьКлиентСервер.ПредставлениеАдресаВФормате9Запятых(
		СведенияОбОрганизации.АдрЮР)), 300);
	Иначе
		ЮрАдрес = Лев(СокрЛП(Приложение2.ЮрАдресОрганизации), 300);
	КонецЕсли;
	ЮрАдрес = СтрЗаменить(ЮрАдрес, ",,,,,,,,,", "");
	ПараметрыВыгрузки.Вставить("ЮрАдрес", ЮрАдрес);
	
	ПараметрыВыгрузки.Вставить("ФИОРук",     Лев(СокрЛП(СведенияОбОрганизации.ФИОРук), 300));
	ПараметрыВыгрузки.Вставить("ФИОГлавБух", Лев(СокрЛП(СведенияОбОрганизации.ФИОБух), 300));
	
	Если Приложение2.Свойство("СреднесписочнаяЧисленность") Тогда
		СреднЧислПредГод = "0";
		Если ТипЗнЧ(Приложение2.СреднесписочнаяЧисленность) = Тип("Строка") Тогда
			СреднЧислПредГод = СтрЗаменить(Приложение2.СреднесписочнаяЧисленность, " ", "");
			Если НЕ ЗначениеЗаполнено(СреднЧислПредГод) Тогда
				СреднЧислПредГод = "0";
			ИначеЕсли СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(СреднЧислПредГод, , Истина)
				И СтрНачинаетсяС(СреднЧислПредГод, "0") И СтрДлина(СреднЧислПредГод) > 1 Тогда
				// Удаление лидирующих нулей.
				СреднЧислПредГод = Число(СреднЧислПредГод);
				СреднЧислПредГод = Формат(СреднЧислПредГод, "ЧГ=;ЧН=");
			КонецЕсли;
		ИначеЕсли ТипЗнЧ(Приложение2.СреднесписочнаяЧисленность) = Тип("Число") Тогда
			СреднЧислПредГод = Формат(Приложение2.СреднесписочнаяЧисленность, "ЧГ=");
		КонецЕсли;
		ПараметрыВыгрузки.Вставить("СреднЧислПредГод", СреднЧислПредГод);
	Иначе
		ПараметрыВыгрузки.Вставить("СреднЧислПредГод", "0");
	КонецЕсли;
	
	ПараметрыВыгрузки.Вставить("ГодПодтверждения", СокрЛП(Приложение1.ГодПодтверждения));
	
	ПараметрыВыгрузки.Вставить("КодПоОКВЭД2", СокрЛП(Приложение1.ОКВЭД));
	
	Если НЕ Приложение1.Свойство("ТекстПояснительнойЗаписки") Тогда
		ПараметрыВыгрузки.Вставить("ТекстПояснЗап", "");
	Иначе
		ПараметрыВыгрузки.Вставить("ТекстПояснЗап", СокрЛП(Приложение1.ТекстПояснительнойЗаписки));
	КонецЕсли;
	
	ПараметрыВыгрузки.Вставить("ИмяФайла",
	"POVD_" + Формат(ТекущаяДатаСеанса(), "ДФ=""ггггММдд""") + "_" + Новый УникальныйИдентификатор + ".xml");
	
	Возврат ПараметрыВыгрузки;
	
КонецФункции

Функция СтрокаЧГ0(ИмяФормы, ИсходноеЧисло) Экспорт
	
	Возврат Формат(ИсходноеЧисло, "ЧН=; ЧГ=");
	
КонецФункции

Функция ИзвлечьСтруктуруXML(ИмяФормы) Экспорт
	
	ДеревоСтруктуры = Новый ДеревоЗначений;
	ДеревоСтруктуры.Колонки.Добавить("Код");
	ДеревоСтруктуры.Колонки.Добавить("Тип");
	ДеревоСтруктуры.Колонки.Добавить("Формат");
	ДеревоСтруктуры.Колонки.Добавить("МинРазмерность");
	ДеревоСтруктуры.Колонки.Добавить("МаксРазмерность");
	ДеревоСтруктуры.Колонки.Добавить("Обязательность");
	ДеревоСтруктуры.Колонки.Добавить("Многостраничность");
	ДеревоСтруктуры.Колонки.Добавить("Многострочность");
	ДеревоСтруктуры.Колонки.Добавить("Раздел");
	ДеревоСтруктуры.Колонки.Добавить("Ключ");
	ДеревоСтруктуры.Колонки.Добавить("Условие");
	ДеревоСтруктуры.Колонки.Добавить("ЗначениеПоУмолчанию");
	ДеревоСтруктуры.Колонки.Добавить("Значение");
	ДеревоСтруктуры.Колонки.Добавить("Представление");
	ДеревоСтруктуры.Колонки.Добавить("Показатели");
	
	Макет = ЭтотОбъект.ПолучитьМакет("СхемаВыгрузки");
	
	ВысотаТаблицы = Макет.ВысотаТаблицы;
	
	УчтенныеГруппы = Новый Соответствие;
	
	Для НомерСтроки = 2 По ВысотаТаблицы Цикл
		НомСтр = ВысотаТаблицы - НомерСтроки + 2;
		Если Макет.Область(НомерСтроки, 0, НомерСтроки, 0).Видимость = Неопределено Тогда
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), НомерСтроки);
			Сообщение.Сообщить();
			
		КонецЕсли;
	КонецЦикла;
	
	Для Уровень = 0 По Макет.КоличествоУровнейГруппировокСтрок() - 1 Цикл
		Макет.ПоказатьУровеньГруппировокСтрок(Уровень);
		Для НомерСтроки = 2 По ВысотаТаблицы Цикл
			НомСтр = ВысотаТаблицы - НомерСтроки + 2;
			Если Макет.Область(НомСтр, 0, НомСтр, 0).Видимость И УчтенныеГруппы.Получить(НомСтр) = Неопределено Тогда
				
				РодительскийУзел = ДеревоСтруктуры;
				Если Уровень <> 0 Тогда
					Для Инд = 1 По НомСтр - 2 Цикл
						Узел = УчтенныеГруппы.Получить(НомСтр - Инд);
						Если Узел <> Неопределено Тогда
							РодительскийУзел = Узел;
							Прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				НовСтр = РодительскийУзел.Строки.Вставить(0);
				НовСтр.Код = СокрЛП(Макет.Область(НомСтр, 1, НомСтр, 1).Текст);
				НовСтр.Раздел = СокрЛП(Макет.Область(НомСтр, 2, НомСтр, 2).Текст);
				НовСтр.Ключ = СокрЛП(Макет.Область(НомСтр, 3, НомСтр, 3).Текст);
				НовСтр.Тип = СокрЛП(Макет.Область(НомСтр, 4, НомСтр, 4).Текст);
				НовСтр.Формат = СокрЛП(Макет.Область(НомСтр, 5, НомСтр, 5).Текст);
				МинРазмерность = СокрЛП(Макет.Область(НомСтр, 6, НомСтр, 6).Текст);
				НовСтр.МинРазмерность = ?(ПустаяСтрока(МинРазмерность), ?(НовСтр.Формат = "N", 99999, 0), Число(МинРазмерность));
				МаксРазмерность = СокрЛП(Макет.Область(НомСтр, 7, НомСтр, 7).Текст);
				НовСтр.МаксРазмерность = ?(ПустаяСтрока(МаксРазмерность), 99999, Число(МаксРазмерность));
				НовСтр.Обязательность = СокрЛП(Макет.Область(НомСтр, 8, НомСтр, 8).Текст);
				НовСтр.Многостраничность = НЕ ПустаяСтрока(Макет.Область(НомСтр, 9, НомСтр, 9).Текст);
				НовСтр.Многострочность = НЕ ПустаяСтрока(Макет.Область(НомСтр, 10, НомСтр, 10).Текст);
				НовСтр.Условие = СокрЛП(Макет.Область(НомСтр, 11, НомСтр, 11).Текст);
				НовСтр.ЗначениеПоУмолчанию = СокрЛП(Макет.Область(НомСтр, 12, НомСтр, 12).Текст);
				НовСтр.Представление = СокрЛП(Макет.Область(НомСтр, 13, НомСтр, 13).Текст);
				
				УчтенныеГруппы.Вставить(НомСтр, НовСтр);
				
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат ДеревоСтруктуры;
	
КонецФункции

#КонецОбласти

#Область ФормированиеПечатногоБланка

Функция ПечатныйБланк(ПараметрыПечати) Экспорт
	
	Перем СтруктураРеквизитовФормы;
	Перем ДанныеРазделов;
	Перем ВидПечати;
	Перем ДеревоВыбранныхСтраниц;
	
	ИмяФормы = ПараметрыПечати.ВыбраннаяФорма;
					
	ПечатныйБланкФормируетсяВФорматеPDF = Ложь;
	
	Если НЕ ПараметрыПечати.Свойство("СтруктураРеквизитовФормы", СтруктураРеквизитовФормы) Тогда
		СформироватьСтруктуруРеквизитовФормы(ИмяФормы, СтруктураРеквизитовФормы);
		ПараметрыПечати.Свойство("СохраненныйОтчет", СтруктураРеквизитовФормы.мСохраненныйДок);
		Если ЗначениеЗаполнено(СтруктураРеквизитовФормы.мСохраненныйДок) Тогда
			СтруктураРеквизитовФормы.Организация = СтруктураРеквизитовФормы.мСохраненныйДок.Организация;
		КонецЕсли;	
	КонецЕсли;
	
	Если НЕ ПараметрыПечати.Свойство("ДеревоВыбранныхСтраниц", ДеревоВыбранныхСтраниц) Тогда
		ДеревоВыбранныхСтраниц = ПараметрыПечати.СохраненныйОтчет.ДеревоНастройкиСтраниц.Получить();
		ПечатныйБланкФормируетсяВФорматеPDF = Истина;
	КонецЕсли;
	
	Если НЕ ПараметрыПечати.Свойство("ВидПечати", ВидПечати) Тогда
		ВидПечати = "";
	КонецЕсли;
				
	Если НЕ ПараметрыПечати.Свойство("ДанныеРазделов", ДанныеРазделов) Тогда
		
		ПоказателиОтчета = ПараметрыПечати.СохраненныйОтчет.ДанныеОтчета.Получить().ПоказателиОтчета;
		
		ДанныеМногострочныхРазделов = ПараметрыПечати.СохраненныйОтчет.ДанныеОтчета.Получить().ДанныеМногострочныхРазделов;
		
		ДанныеРазделов = Новый Структура;
		ДанныеРазделов.Вставить("Приложение1", ПоказателиОтчета.ПолеТабличногоДокументаПриложение1);
		ДанныеРазделов.Вставить("Приложение2", ПоказателиОтчета.ПолеТабличногоДокументаПриложение2);
		ДанныеРазделов.Вставить("Приложение3", ПоказателиОтчета.ПолеТабличногоДокументаПриложение3);
		ДанныеРазделов.Вставить(СтруктураРеквизитовФормы.ИдМСЧ_Приложение2, 
			ДанныеМногострочныхРазделов[СтруктураРеквизитовФормы.ИдМСЧ_Приложение2]);
		ДанныеРазделов.Вставить(СтруктураРеквизитовФормы.ИдМСЧ_Приложение3, 
			ДанныеМногострочныхРазделов[СтруктураРеквизитовФормы.ИдМСЧ_Приложение3]);
			
	КонецЕсли;	
	
	Если ДанныеРазделов.Приложение2.Количество() = 4
	   И ДанныеРазделов.Приложение3.Количество() = 2 Тогда
	   
	   	РегламентированнаяОтчетность.ЗаполнитьСтруктуруДанныхРазделаЗначениямиИзДопСтрок(
			ДанныеРазделов.Приложение2, ДанныеРазделов[СтруктураРеквизитовФормы.ИдМСЧ_Приложение2]);
	
		РегламентированнаяОтчетность.ЗаполнитьСтруктуруДанныхРазделаЗначениямиИзДопСтрок(
			ДанныеРазделов.Приложение3, ДанныеРазделов[СтруктураРеквизитовФормы.ИдМСЧ_Приложение3]);
		
		РазделыОтчета = РазделыРеглОтчета(ИмяФормы);
		
		ЗаполнитьПустыеСтруктурыДанных(ИмяФормы, РазделыОтчета, СтруктураРеквизитовФормы);
		
		Для Индекс = 2 По 3 Цикл
			
			КопияДанных = Новый Структура;
			
			Для Каждого Показатель Из ДанныеРазделов["Приложение" + Индекс] Цикл
				
				КопияДанных.Вставить(Показатель.Ключ, Показатель.Значение);
				
			КонецЦикла;
						
			ДанныеРазделов["Приложение" + Индекс] = РазделыОтчета["Приложение" + Индекс].Данные;
			
			ЗаполнитьСведенияОбОрганизации(ИмяФормы,
				ДанныеРазделов["Приложение" + Индекс],
				СтруктураРеквизитовФормы,
				ДанныеРазделов.Приложение1.ДатаПодписи);
			
			ЗаполнитьДатуВЯчейках(ИмяФормы, ДанныеРазделов["Приложение" + Индекс],
				ДанныеРазделов.Приложение1.ДатаПодписи);
				
			ЗаполнитьЗначенияСвойств(ДанныеРазделов["Приложение" + Индекс], КопияДанных);
			
		КонецЦикла;	
				
	КонецЕсли;							 
		
	Для Каждого СтраницаОтчета Из ДеревоВыбранныхСтраниц.Строки Цикл
		
		Если СтраницаОтчета.ВыводНаПечать = 0 Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("НаименованиеЛиста",  СтраницаОтчета.Представление);
		СтруктураПараметров.Вставить("ОриентацияЛиста",    СтраницаОтчета.ОриентацияСтраницы);
		СтруктураПараметров.Вставить("ИмяСтраницы",        СтраницаОтчета.ИмяСтраницы);
		Структурапараметров.Вставить("ИмяОбластиТаблПоля", СтраницаОтчета.ИмяОбластиТабличногоПоля);
		Структурапараметров.Вставить("ВидПечати",		   ВидПечати);
											
		ВывестиНаПечатьЛист(ИмяФормы,
							СтруктураПараметров,
							СтруктураРеквизитовФормы,
							ДанныеРазделов);
			
	КонецЦикла;
	
	РегламентированнаяОтчетностьКлиентСервер.ПроставлениеНомеровЛистов(СтруктураРеквизитовФормы, ,
												СтруктураРеквизитовФормы.СписокПечатаемыхЛистов);
												
	Если НЕ ПечатныйБланкФормируетсяВФорматеPDF Тогда
		Возврат "";
	КонецЕсли;
												
	ПакетОтображаемыхДокументов = Новый ПакетОтображаемыхДокументов;
						
	Для Каждого Лист Из СтруктураРеквизитовФормы.СписокПечатаемыхЛистов Цикл
		    		
		ПакетОтображаемыхДокументов.Состав.Добавить(Лист.Значение[0]);
		
	КонецЦикла;
		
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("pdf");
	
	ПакетОтображаемыхДокументов.ЗаписатьФайлДляПечати(ИмяВременногоФайла);
	
	ФайлПечатногоБланка = Новый ДвоичныеДанные(ИмяВременногоФайла);
	
	АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(ФайлПечатногоБланка, Новый УникальныйИдентификатор);
	
	УдалитьФайлы(ИмяВременногоФайла);
	
	ИмяФайлаПечатногоБланка = СтруктураРеквизитовФормы.НаименованиеОтчета
							+ НСтр("ru=' за '")
							+ ПредставлениеПериода(
								НачалоДня(СтруктураРеквизитовФормы.мСохраненныйДок.ДатаНачала),
							 	КонецДня(СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания),
							 	"ФП = Истина")
							+ " (" + СтруктураРеквизитовФормы.мСохраненныйДок.Организация + ").pdf";
	
	ПечатныйБланк = Новый Структура;
	ПечатныйБланк.Вставить("АдресПечатногоБланка",    АдресВоВременномХранилище);
	ПечатныйБланк.Вставить("ИмяФайлаПечатногоБланка", ИмяФайлаПечатногоБланка);
	
	Возврат ПечатныйБланк;
	
КонецФункции

Процедура ВывестиНаПечатьЛист(ИмяФормы,
							  СтруктураПараметров,
							  СтруктураРеквизитовФормы,
							  ДанныеРазделов)
	
	ИмяРаздела = СтруктураПараметров.ИмяСтраницы;
	
	Если ИмяРаздела = "Приложение1" Тогда
		
		ВывестиНаПечатьПриложение1(ИмяФормы, СтруктураПараметров, СтруктураРеквизитовФормы, ДанныеРазделов);
		
	ИначеЕсли ИмяРаздела = "Приложение2" Тогда
		
		ВывестиНаПечатьПриложение2(ИмяФормы, СтруктураПараметров, СтруктураРеквизитовФормы, ДанныеРазделов);
	
	ИначеЕсли ИмяРаздела = "Приложение3" Тогда
		
		ВывестиНаПечатьПриложение3(ИмяФормы, СтруктураПараметров, СтруктураРеквизитовФормы, ДанныеРазделов);
			
	КонецЕсли;
		
КонецПроцедуры

Процедура ВывестиНаПечатьПриложение1(ИмяФормы, СтруктураПараметров, СтруктураРеквизитовФормы, ДанныеРазделов)
	
	СписокПечатныхФорм = Новый СписокЗначений;
	
	ЗаполняемыйМакет = ЭтотОбъект.ПолучитьМакет("ПечатнаяФормаОтчета2013Кв1_Приложение1");
	
	ЗаполнитьПечатнуюФорму(ИмяФормы,
						   СтруктураПараметров,
						   ЗаполняемыйМакет,
						   ДанныеРазделов,
						   СтруктураРеквизитовФормы);
	
	Если ДанныеРазделов.Приложение1.Свойство("ПечататьСтроку2")
	   И НЕ ЗначениеЗаполнено(ДанныеРазделов.Приложение1.ПечататьСтроку2) Тогда
		ЗаполняемыйМакет.УдалитьОбласть(ЗаполняемыйМакет.Область("СекцияПечататьСтроку2"),
			ТипСмещенияТабличногоДокумента.ПоВертикали);
	КонецЕсли;
	
	СписокПечатныхФорм.Добавить(ЗаполняемыйМакет);
	
	Для Каждого СформированныйЛист Из СписокПечатныхФорм Цикл
		СтруктураРеквизитовФормы.мПечатныеФормы.Добавить(СформированныйЛист.Значение,
														 СтруктураПараметров.НаименованиеЛиста);
	КонецЦикла;
	
КонецПроцедуры

Процедура ВывестиНаПечатьПриложение2(ИмяФормы, СтруктураПараметров, СтруктураРеквизитовФормы, ДанныеРазделов)
	
	СписокПечатныхФорм = Новый СписокЗначений;
	
	ЗаполняемыйМакет = ЭтотОбъект.ПолучитьМакет("ПечатнаяФормаОтчета2013Кв1_Приложение2");
	
	ИсходноеКоличествоСтрокГруппы = 6;
	
	СтруктураГруппы = ДанныеРазделов[СтруктураРеквизитовФормы.ИдМСЧ_Приложение2];
	
	ТекущееКоличествоСтрокГруппы = СтруктураГруппы.Количество();
	
	Если ИсходноеКоличествоСтрокГруппы > ТекущееКоличествоСтрокГруппы Тогда
		Для Инд = 1 По (ИсходноеКоличествоСтрокГруппы - ТекущееКоличествоСтрокГруппы) Цикл
			СтруктураГруппы.Добавить();
		КонецЦикла;
	КонецЕсли;
	
	Если ТекущееКоличествоСтрокГруппы > ИсходноеКоличествоСтрокГруппы Тогда
		
		ВысотаСтроки = 1;
		
		ИмяПервойЯчейкиПоследнейСтроки = СтруктураГруппы.Колонки[0].Имя + "_"
			+ Формат(ИсходноеКоличествоСтрокГруппы, "ЧГ=0");
		ОбластьЯчейкиПоследнейСтроки = ЗаполняемыйМакет.Области[ИмяПервойЯчейкиПоследнейСтроки];
		
		ПрототипДобавляемойОбласти = ЗаполняемыйМакет.ПолучитьОбласть(ОбластьЯчейкиПоследнейСтроки.Верх,
			, ОбластьЯчейкиПоследнейСтроки.Верх + ВысотаСтроки - 1, );
		ПомежуточныйТабличныйДокумент = Новый ТабличныйДокумент;
		
		Для НомерНовойСтроки = ИсходноеКоличествоСтрокГруппы + 1 По ТекущееКоличествоСтрокГруппы Цикл
			ПомежуточныйТабличныйДокумент.Вывести(ПрототипДобавляемойОбласти);
			
			Для Каждого Колонка Из СтруктураГруппы.Колонки Цикл
				
				ИмяКолонки = Колонка.Имя;
				ИмяОбластиПрототипа = ИмяКолонки + "_" + Формат(ИсходноеКоличествоСтрокГруппы, "ЧГ=0");
				НазначаемоеИмяОбластиДобавленнойСтроки = ИмяКолонки + "_" + Формат(НомерНовойСтроки, "ЧГ=0");
				
				ОбластьДобавленнойСтроки = ПомежуточныйТабличныйДокумент.Области[ИмяОбластиПрототипа];
				ОбластьДобавленнойСтроки.Имя = НазначаемоеИмяОбластиДобавленнойСтроки;
				
				Если ОбластьДобавленнойСтроки.СодержитЗначение = Истина Тогда
					ОбластьДобавленнойСтроки.Очистить();
				КонецЕсли;
				
			КонецЦикла;
		КонецЦикла;
		
		ВставляемаяОбласть = ПомежуточныйТабличныйДокумент.Область(1, , ПомежуточныйТабличныйДокумент.ВысотаТаблицы, );
		ПозицияВставки = ЗаполняемыйМакет.Область(ОбластьЯчейкиПоследнейСтроки.Верх + ВысотаСтроки,
			, ОбластьЯчейкиПоследнейСтроки.Верх + ВысотаСтроки, );
		ЗаполняемыйМакет.ВставитьОбласть(ВставляемаяОбласть, ПозицияВставки, ТипСмещенияТабличногоДокумента.ПоВертикали);
		
	КонецЕсли;
			
	ЗаполнитьПечатнуюФорму(ИмяФормы,
						   СтруктураПараметров,
						   ЗаполняемыйМакет,
						   ДанныеРазделов,
						   СтруктураРеквизитовФормы);
	
	СписокПечатныхФорм.Добавить(ЗаполняемыйМакет);
	
	Для Каждого СформированныйЛист Из СписокПечатныхФорм Цикл
		СтруктураРеквизитовФормы.мПечатныеФормы.Добавить(СформированныйЛист.Значение,
			СтруктураПараметров.НаименованиеЛиста);
	КонецЦикла;
	
КонецПроцедуры

Процедура ВывестиНаПечатьПриложение3(ИмяФормы, СтруктураПараметров, СтруктураРеквизитовФормы, ДанныеРазделов)
	
	СписокПечатныхФорм = Новый СписокЗначений;
	
	Если СтруктураРеквизитовФормы.Редакция75н Тогда
		ЗаполняемыйМакет = ЭтотОбъект.ПолучитьМакет("ПечатнаяФормаОтчета2013Кв1_Приложение3_1_ВРедакцииПриказа75н");
	Иначе
		ЗаполняемыйМакет = ЭтотОбъект.ПолучитьМакет("ПечатнаяФормаОтчета2013Кв1_Приложение3_1");
	КонецЕсли;	
	
	ЗаполнитьПечатнуюФорму(ИмяФормы,
						   СтруктураПараметров,
						   ЗаполняемыйМакет,
						   ДанныеРазделов,
						   СтруктураРеквизитовФормы);
	
	ИтоговыйМакет = Новый ТабличныйДокумент;
	ЗаполнитьЗначенияСвойств(ИтоговыйМакет, ЗаполняемыйМакет,
		"ОриентацияСтраницы, ПолеСверху, ПолеСлева, ПолеСнизу, ПолеСправа, АвтоМасштаб", "Макет");
	ВыводимаяОбласть = ЗаполняемыйМакет.ПолучитьОбласть("ОсновнаяЧасть");
	ИтоговыйМакет.Вывести(ВыводимаяОбласть);
	
	ОбластьПустойСтроки = ЗаполняемыйМакет.ПолучитьОбласть("ПустаяСтрока");
	ОбластьОграничителя = ЗаполняемыйМакет.ПолучитьОбласть("Ограничители");
	
	Подвал = Новый Массив;
	Подвал.Добавить(ОбластьПустойСтроки);
	Подвал.Добавить(ОбластьОграничителя);
	
	ПодвалВыводится = ИтоговыйМакет.ПроверитьВывод(Подвал);
	
	Если ПодвалВыводится Тогда
		Пока Истина Цикл
			Подвал.Вставить(0, ОбластьПустойСтроки);
			ПодвалВыводится = ИтоговыйМакет.ПроверитьВывод(Подвал);
			Если НЕ ПодвалВыводится Тогда
				Подвал.Удалить(0);
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Для Каждого ОбластьПодвала Из Подвал Цикл
		ИтоговыйМакет.Вывести(ОбластьПодвала);
	КонецЦикла;
	
	СписокПечатныхФорм.Добавить(ИтоговыйМакет);
	
	Если СтруктураРеквизитовФормы.Редакция75н Тогда
		МакетОбразец = ЭтотОбъект.ПолучитьМакет("ПечатнаяФормаОтчета2013Кв1_Приложение3_2_ВРедакцииПриказа75н");
	Иначе
		МакетОбразец = ЭтотОбъект.ПолучитьМакет("ПечатнаяФормаОтчета2013Кв1_Приложение3_2");
	КонецЕсли;	
	
	ЗаполнитьПечатнуюФорму(ИмяФормы,
						   СтруктураПараметров,
						   МакетОбразец,
						   ДанныеРазделов,
						   СтруктураРеквизитовФормы);
	
	ОбластьОсновнаяЧасть = МакетОбразец.ПолучитьОбласть("ОсновнаяЧасть");
	ОбластьОграничители1 = МакетОбразец.ПолучитьОбласть("Ограничители1");
	ОбластьПустаяСтрока  = МакетОбразец.ПолучитьОбласть("ПустаяСтрока");
	ОбластьОграничители2 = МакетОбразец.ПолучитьОбласть("Ограничители2");
	
	ЛентаМногострочнойЧасти = Новый Массив;
			
	МногострочнаяЧасть = ДанныеРазделов[СтруктураРеквизитовФормы.ИдМСЧ_Приложение3];
	
	КоличествоСтрок = Макс(15, МногострочнаяЧасть.Количество());
	
	Для Инд = 10 По КоличествоСтрок Цикл
		ОбластьМногострочнаяЧасть = МакетОбразец.ПолучитьОбласть("МногострочнаяЧасть");
		НомерСтрокиПрототипа = "10";
		НомерНовойСтроки = Формат(Инд, "ЧГ=0");
		Для Каждого Колонка Из МногострочнаяЧасть.Колонки Цикл
			ИмяКолонки = Колонка.Имя;
			ИмяОбластиПрототипа = ИмяКолонки + "_" + НомерСтрокиПрототипа;
			Если ОбластьМногострочнаяЧасть.Области.Найти(ИмяОбластиПрототипа) <> Неопределено Тогда
				НазначаемоеИмяОбластиДобавленнойСтроки = ИмяКолонки + "_" + НомерНовойСтроки;
				ОбластьДобавленнойСтроки = ОбластьМногострочнаяЧасть.Области[ИмяОбластиПрототипа];
				ОбластьДобавленнойСтроки.Имя = НазначаемоеИмяОбластиДобавленнойСтроки;
				ОбластьДобавленнойСтроки.Текст = "";
			Иначе
				НомерКвадрата = 1;
				ДопНомер = "_" + Формат(НомерКвадрата, "ЧГ=0");
				Пока ОбластьМногострочнаяЧасть.Области.Найти(ИмяОбластиПрототипа + ДопНомер) <> Неопределено Цикл
					НазначаемоеИмяОбластиДобавленнойСтроки = ИмяКолонки + "_" + Формат(Инд, "ЧГ=0") + ДопНомер;
					ОбластьДобавленнойСтроки = ОбластьМногострочнаяЧасть.Области[ИмяОбластиПрототипа + ДопНомер];
					ОбластьДобавленнойСтроки.Имя = НазначаемоеИмяОбластиДобавленнойСтроки;
					ОбластьДобавленнойСтроки.Текст = "";
					
					НомерКвадрата = НомерКвадрата + 1;
					ДопНомер = "_" + Формат(НомерКвадрата, "ЧГ=0");
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
		ЗаполнитьПечатнуюФорму(ИмяФормы,
						   	   СтруктураПараметров,
						   	   ОбластьМногострочнаяЧасть,
						   	   ДанныеРазделов,
							   СтруктураРеквизитовФормы);
		ЛентаМногострочнойЧасти.Добавить(ОбластьМногострочнаяЧасть);
	КонецЦикла;
	
	ИндексЛенты = -1; // Ничего не выводилось.
	РазмерЛенты = ЛентаМногострочнойЧасти.Количество();
	
	Пока ИндексЛенты + 1 < РазмерЛенты Цикл
		ИтоговыйМакет = Новый ТабличныйДокумент;
		ЗаполнитьЗначенияСвойств(ИтоговыйМакет, ЗаполняемыйМакет,
			"ОриентацияСтраницы, ПолеСверху, ПолеСлева, ПолеСнизу, ПолеСправа, АвтоМасштаб", "Макет");
		
		ИтоговыйМакет.Вывести(ОбластьОсновнаяЧасть);
		
		СтрокиМСЧ = Новый Массив;
		
		Пока ИндексЛенты + 1 < РазмерЛенты Цикл
			СтрокиМСЧ.Добавить(ЛентаМногострочнойЧасти[ИндексЛенты + 1]);
			ВыводВозможен = ИтоговыйМакет.ПроверитьВывод(СтрокиМСЧ);
			Если ВыводВозможен Тогда
				ИндексЛенты = ИндексЛенты + 1;
			Иначе
				СтрокиМСЧ.Удалить(СтрокиМСЧ.Количество() - 1);
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого СтрокаМСЧ Из СтрокиМСЧ Цикл
			ИтоговыйМакет.Вывести(СтрокаМСЧ);
		КонецЦикла;
		
		Если ИндексЛенты + 1 = РазмерЛенты Тогда
			Подвал = Новый Массив;
			Подвал.Добавить(ОбластьОграничители1);
			Подвал.Добавить(ОбластьПустаяСтрока);
			Подвал.Добавить(ОбластьОграничители2);
			
			Если НЕ ИтоговыйМакет.ПроверитьВывод(Подвал) Тогда
				СписокПечатныхФорм.Добавить(ИтоговыйМакет);
				
				ИтоговыйМакет = Новый ТабличныйДокумент;
				ЗаполнитьЗначенияСвойств(ИтоговыйМакет, ЗаполняемыйМакет,
					"ОриентацияСтраницы, ПолеСверху, ПолеСлева, ПолеСнизу, ПолеСправа, АвтоМасштаб", "Макет");
				
				ИтоговыйМакет.Вывести(ОбластьОсновнаяЧасть);
			КонецЕсли;
			
			ПодвалВыводится = ИтоговыйМакет.ПроверитьВывод(Подвал);
			
			Если ПодвалВыводится Тогда
				Пока Истина Цикл
					Подвал.Вставить(1, ОбластьПустаяСтрока);
					ПодвалВыводится = ИтоговыйМакет.ПроверитьВывод(Подвал);
					Если НЕ ПодвалВыводится Тогда
						Подвал.Удалить(1);
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			Для Каждого ОбластьПодвала Из Подвал Цикл
				ИтоговыйМакет.Вывести(ОбластьПодвала);
			КонецЦикла;
			
		КонецЕсли;
		
		СписокПечатныхФорм.Добавить(ИтоговыйМакет);
	КонецЦикла;
			
	Для Каждого СформированныйЛист Из СписокПечатныхФорм Цикл
		СтруктураРеквизитовФормы.мПечатныеФормы.Добавить(СформированныйЛист.Значение,
														 СтруктураПараметров.НаименованиеЛиста);
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьПечатнуюФорму(ИмяФормы,
								 ПараметрыПечати,
								 МакетПечатнойФормы,
								 ДанныеРазделов,
								 СтруктураРеквизитовФормы)	
								 
	Показатели = ПоказателиТабличногоДокумента(ИмяФормы, ПараметрыПечати, ДанныеРазделов, СтруктураРеквизитовФормы);
		
	ИндексТочкиПоКорню = Новый Структура;
	Для Каждого Область Из МакетПечатнойФормы.Области Цикл
		Если Область.Текст = "." Тогда
			ТекАдресЗначенияОбласти = АдресЗначенияОбласти(ИмяФормы, Область);
			Корень = ТекАдресЗначенияОбласти.Корень;
			ИндексТочкиЧислаНаМЧБ = ТекАдресЗначенияОбласти.ИндексЗнакоместа;
			ИндексТочкиПоКорню.Вставить(Корень,ИндексТочкиЧислаНаМЧБ);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Область Из МакетПечатнойФормы.Области Цикл
		Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			ИмяОбласти = Область.Имя;
			РезультатПоиска = Показатели.Найти(ИмяОбласти, "Имя");
			Если РезультатПоиска = Неопределено Тогда
				ТекАдресЗначенияОбласти = АдресЗначенияОбласти(ИмяФормы, Область);
				ЗначениеВыведено = Ложь;
				Если ТекАдресЗначенияОбласти.ИндексЗнакоместа <> 0 Тогда
					РезультатПоиска = Показатели.Найти(ТекАдресЗначенияОбласти.Корень, "Имя");
					Если РезультатПоиска <> Неопределено Тогда
						Если ТипЗнч(РезультатПоиска.Значение) = Тип("Число") Тогда
							ЦелаяЧасть = Цел(РезультатПоиска.Значение);
							СтрЦелаяЧасть = Строка(Цел(РезультатПоиска.Значение));
							СтрДообнаяЧасть = Сред(Строка(РезультатПоиска.Значение - ЦелаяЧасть),3);
							
							ИндексТочкиЧислаНаМЧБ = Неопределено;
							Если ИндексТочкиПоКорню.Свойство(ТекАдресЗначенияОбласти.Корень,ИндексТочкиЧислаНаМЧБ) = Ложь Тогда
								ПрисвоитьЗначениеОбласти(ИмяФормы, Область, РезультатПоиска.ЗначениеМЧБ,
									ТекАдресЗначенияОбласти.ИндексЗнакоместа);
								ЗначениеВыведено = Истина;
							Иначе
								Если ТекАдресЗначенияОбласти.ИндексЗнакоместа<ИндексТочкиЧислаНаМЧБ Тогда
									ПрисвоитьЗначениеОбласти(ИмяФормы, Область, ?(РезультатПоиска.ЗначениеМЧБ = "-","-",СтрЦелаяЧасть),
										ТекАдресЗначенияОбласти.ИндексЗнакоместа);
									ЗначениеВыведено = Истина;
								ИначеЕсли ТекАдресЗначенияОбласти.ИндексЗнакоместа > ИндексТочкиЧислаНаМЧБ Тогда
									ПрисвоитьЗначениеОбласти(ИмяФормы, Область, СтрДообнаяЧасть,
										ТекАдресЗначенияОбласти.ИндексЗнакоместа - ИндексТочкиЧислаНаМЧБ);
									ЗначениеВыведено = Истина;
								Иначе
									ЗначениеВыведено = Истина;
								КонецЕсли;
							КонецЕсли;
						Иначе
							ПрисвоитьЗначениеОбласти(ИмяФормы, Область, РезультатПоиска.ЗначениеМЧБ,
								ТекАдресЗначенияОбласти.ИндексЗнакоместа, Ложь);
							ЗначениеВыведено = Истина;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			Иначе
				ПрисвоитьЗначениеОбласти(ИмяФормы, Область, РезультатПоиска.ЗначениеМЧБ);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Область = МакетПечатнойФормы.Области.Найти("ДатаМестоНомерРегистрации");
	Если Область <> Неопределено
		И НЕ ДанныеРазделов.Приложение2.Свойство("ДатаМестоНомерРегистрации")
		И ДанныеРазделов.Приложение2.Свойство("ДатаРегистрации")
		И ДанныеРазделов.Приложение2.Свойство("МестоРегистрации")
		И ДанныеРазделов.Приложение2.Свойство("ОГРН") Тогда
		
		ДатаРегистрации  = ДанныеРазделов.Приложение2.ДатаРегистрации;
		МестоРегистрации = СокрЛП(ДанныеРазделов.Приложение2.МестоРегистрации);
		ОГРН             = СокрЛП(ДанныеРазделов.Приложение2.ОГРН);
		
		ЗначениеМЧБ = "";
		ЗначениеМЧБ = ?(ЗначениеЗаполнено(ДатаРегистрации), Формат(ДатаРегистрации, "ДФ=дд.ММ.гггг"), "");
		ЗначениеМЧБ = ?(ЗначениеЗаполнено(МестоРегистрации), ЗначениеМЧБ + ", " + МестоРегистрации, ЗначениеМЧБ);
		ЗначениеМЧБ = ?(ЗначениеЗаполнено(ОГРН), ЗначениеМЧБ + ", ОГРН " + ОГРН, ЗначениеМЧБ);
		ЗначениеМЧБ = ?(Лев(ЗначениеМЧБ, 2) = ", ", Сред(ЗначениеМЧБ, 3), ЗначениеМЧБ);
		
		ПрисвоитьЗначениеОбласти(ИмяФормы, Область, ЗначениеМЧБ);
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПоказателиТабличногоДокумента(ИмяФормы, ПараметрыПечати, ДанныеРазделов, СтруктураРеквизитовФормы)
	
	Показатели = Новый ТаблицаЗначений;
	Показатели.Колонки.Добавить("Имя");
	Показатели.Колонки.Добавить("Значение");
	Показатели.Колонки.Добавить("ЗначениеМЧБ");
	
	Показатели.Индексы.Добавить("Имя");
	
	Для Каждого Показатель Из ДанныеРазделов[ПараметрыПечати.ИмяСтраницы] Цикл
		   
		НовСтр = Показатели.Добавить();
		НовСтр.Имя = Показатель.Ключ;
		НовСтр.Значение = Показатель.Значение;
		НовСтр.ЗначениеМЧБ = ПолучитьЗначениеМЧБ(ИмяФормы, Показатель, ПараметрыПечати, СтруктураРеквизитовФормы);
		
	КонецЦикла;
	
	Возврат Показатели;
	
КонецФункции

Функция ПолучитьЗначениеМЧБ(ИмяФормы, Показатель, ПараметрыПечати, СтруктураРеквизитовФормы)
		
	ФорматОбласти = "";
	
	Если ПараметрыПечати.ИмяСтраницы = "Приложение3"
	   И СтруктураРеквизитовФормы.Редакция75н Тогда
	   
		МакетФормыОтчета = ЭтотОбъект.ПолучитьМакет(ИмяФормы + "_" + ПараметрыПечати.ИмяСтраницы + "_ВРедакцииПриказа75н");
		
	Иначе
		
		МакетФормыОтчета = ЭтотОбъект.ПолучитьМакет(ИмяФормы + "_" + ПараметрыПечати.ИмяСтраницы);
		
	КонецЕсли;	
			
	Область = МакетФормыОтчета.Области.Найти(?(ТипЗнч(Показатель) = Тип("КлючИЗначение"), 
		Показатель.Ключ, Показатель.Имя));
	
	Если НЕ Область = Неопределено Тогда
		
		ФорматОбласти = Область.Формат;
		
	КонецЕсли;
			
	ТипЗначения = ТипЗнч(Показатель.Значение);
	
	Если ТипЗначения = Тип("Число") Тогда
					
		СоотвСтрокаФормата = РазобратьСтрокуФормата(ИмяФормы, ФорматОбласти);
		
		СоотвСтрокаФормата.Вставить("ЧРД", ".");
		СоотвСтрокаФормата.Вставить("ЧГ", "");
		
		Результат = Формат(Показатель.Значение, СобратьСтрокуФормата(ИмяФормы, СоотвСтрокаФормата));
		
	ИначеЕсли ТипЗначения = Тип("Строка") Тогда
		
		Результат = СокрЛП(Показатель.Значение);
		
	ИначеЕсли ТипЗначения = Тип("Дата") Тогда
						
		Результат = Формат(Показатель.Значение, ?(ПустаяСтрока(ФорматОбласти), "ДФ=ddMMyyyy", ФорматОбласти));
		
	ИначеЕсли ТипЗначения = Тип("Булево") Тогда
		
		Результат = Формат(Показатель.Значение, ФорматОбласти);
		
	КонецЕсли;
	
	Возврат СокрЛП(Результат);
	
КонецФункции

Функция АдресЗначенияОбласти(ИмяФормы, Область)
	
	Имя = Область.Имя;
	КореньИмениОбласти = Неопределено;
	СтрИндексЗнакоместа = "";
	ИндексЗнакоместа = 0;
	ДлинаИмени = СтрДлина(Имя);
	
	Для ИндексВхождения = 1 По ДлинаИмени Цикл
		СтрИндексЗнакоместа = Сред(Имя, ДлинаИмени - ИндексВхождения + 1);
		
		Если СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(СтрИндексЗнакоместа) Тогда
			КореньИмениОбласти = Лев(Имя, ДлинаИмени - ИндексВхождения);
			ИндексЗнакоместа = Число(СтрИндексЗнакоместа);
		Иначе
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Если Прав(КореньИмениОбласти, 1) = "_" Тогда
		КореньИмениОбласти = Лев(КореньИмениОбласти, СтрДлина(КореньИмениОбласти) - 1);
	КонецЕсли;
		
	Возврат Новый Структура("Корень, ИндексЗнакоместа", КореньИмениОбласти, ИндексЗнакоместа);
	
КонецФункции

Процедура ПрисвоитьЗначениеОбласти(ИмяФормы, Область, Знач Значение, ИндексЗнакоместа = 0, ДополнятьСправа_ = Истина)
	
	Если ИндексЗнакоместа <> 0 Тогда
		Если СтрДлина(Значение) >= ИндексЗнакоместа Тогда
			Значение = Сред(Значение, ИндексЗнакоместа, 1);
		Иначе
			Значение = ?(ДополнятьСправа_, "-", "");
		КонецЕсли;
	ИначеЕсли НЕ ЗначениеЗаполнено(Значение) Тогда
		Значение = "-";
	КонецЕсли;
	
	Если Область.СодержитЗначение = Истина Тогда
		Область.Значение = Значение;
	Иначе
		Область.Текст = Значение;
	КонецЕсли;
	
КонецПроцедуры

Функция РазобратьСтрокуФормата(ИмяФормы, Знач СтрокаФормата)
	
	ЗначенияПараметров = Новый Соответствие;
	
	Пока СтрНайти(СтрокаФормата, ";") <> 0 Цикл
		
		ВхождениеРазделителя = СтрНайти(СтрокаФормата, ";");
		
		ДоРазделителя = Лев(СтрокаФормата, ВхождениеРазделителя - 1);
		
		ВхождениеРавно = СтрНайти(ДоРазделителя, "=");
		
		Если ВхождениеРавно <> 0 И ВхождениеРавно <> 1 Тогда
			
			ЗначенияПараметров.Вставить(Лев(ДоРазделителя, ВхождениеРавно - 1), Сред(ДоРазделителя, ВхождениеРавно + 1));
			
		КонецЕсли;
		
		СтрокаФормата = Сред(СтрокаФормата, ВхождениеРазделителя + 1);
		
	КонецЦикла;
	
	ВхождениеРавно = СтрНайти(СтрокаФормата, "=");
	
	Если ВхождениеРавно <> 0 И ВхождениеРавно <> 1 Тогда
		
		ЗначенияПараметров.Вставить(Лев(СтрокаФормата, ВхождениеРавно - 1), Сред(СтрокаФормата, ВхождениеРавно + 1));
		
	КонецЕсли;
	
	Возврат ЗначенияПараметров;
	
КонецФункции

Функция СобратьСтрокуФормата(ИмяФормы, ПараметрыФормата)
	
	СтрокаФормата = "";
	
	Для Каждого Параметр Из ПараметрыФормата Цикл
		
		СтрокаФормата = СтрокаФормата + "; " + Параметр.Ключ + "=" + Параметр.Значение;
		
	КонецЦикла;
	
	Если НЕ ПустаяСтрока(СтрокаФормата) Тогда
		
		СтрокаФормата = Сред(СтрокаФормата, 3);
		
	КонецЕсли;
	
	Возврат СтрокаФормата;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли
