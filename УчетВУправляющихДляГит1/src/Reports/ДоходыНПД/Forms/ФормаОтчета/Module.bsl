#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	БухгалтерскиеОтчетыВызовСервера.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	
	СформироватьПриОткрытии = Параметры.СформироватьПриОткрытии;
	
	ПриИзмененииПериода();
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	БухгалтерскиеОтчетыКлиент.ПриОткрытии(ЭтотОбъект, Отказ);

	ПодключитьОбработчикОжидания = ЗначениеЗаполнено(ИдентификаторЗаданияМетода);
	Если ЗапросНаПолучениеДанныхВыполнен
		ИЛИ ПодключитьОбработчикОжидания Тогда
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗаданияМетода", 1, Истина);
		УстановитьСостояниеПоляТабличногоДокументаПолучениеДанных(Элементы.Результат);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)

	БухгалтерскиеОтчетыКлиент.ПередЗакрытием(ЭтотОбъект, Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	БухгалтерскиеОтчетыКлиент.ПриЗакрытии(ЭтотОбъект, ЗавершениеРаботы);

КонецПроцедуры

&НаСервере
Процедура ПриСохраненииПользовательскихНастроекНаСервере(Настройки)

	БухгалтерскиеОтчетыВызовСервера.ПриСохраненииПользовательскихНастроекНаСервере(ЭтотОбъект, Настройки);

КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеПользовательскихНастроекНаСервере(Настройки)

	Если Не КомпоновщикИнициализирован Тогда
		ПользовательскиеНастройки = ПоместитьВоВременноеХранилище(Настройки, УникальныйИдентификатор);
	КонецЕсли;
	
	БухгалтерскиеОтчетыВызовСервера.ПриЗагрузкеПользовательскихНастроекНаСервере(ЭтотОбъект, Настройки);
	
	Если Не КомпоновщикИнициализирован И ОбщегоНазначенияКлиентСервер.ЭтоВебКлиент() Тогда
		ИнициализацияКомпоновщикаНастроек();
	КонецЕсли;
	
	ПриИзмененииПериода();
	
	УправлениеФормой(ЭтотОбъект);
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПредставлениеПериодаПриИзменении(Элемент)

	ПредставлениеПериода = ВыборПериодаКлиентСервер.ПолучитьПредставлениеПериодаОтчета(
		ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.Месяц"), 
		НачалоМесяца(Отчет.Период), 
		КонецМесяца(Отчет.Период));

КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеПериодаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыВыбора =
		Новый Структура("НачалоПериода, КонецПериода", НачалоМесяца(Отчет.Период), КонецМесяца(Отчет.Период));
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыбратьПериодЗавершение", ЭтотОбъект);
	ОткрытьФорму("ОбщаяФорма.ВыборСтандартногоПериодаМесяц",
		ПараметрыВыбора, Элементы.ПредставлениеПериода, , , , ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьПериодЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Отчет.Период = РезультатВыбора.НачалоПериода;
	
	ПриИзмененииПериода();
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеПериодаОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;

КонецПроцедуры

&НаКлиенте
Процедура СформироватьОтчет(Команда)
	
	СообщениеОбОшибке = "";
	ДанныеПолученыСписокДоходов = Ложь;
	
	УправлениеФормой(ЭтотОбъект);
	ВыполнитьЗапросыОНачислениях();

	СкрытьНастройки();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьНастройки(Команда)
	
	Элементы.Сформировать.КнопкаПоУмолчанию = Истина;
	
	СкрытьНастройки();
	
КонецПроцедуры

&НаКлиенте
Процедура МакетОформленияПриИзменении(Элемент)
	
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметрВывода(Отчет.КомпоновщикНастроек.Настройки, "МакетОформления", МакетОформления);
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыводитьЗаголовокПриИзменении(Элемент)

	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВыводитьПодвалПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОтборыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	БухгалтерскиеОтчетыКлиент.ОтборыПередНачаломДобавления(ЭтаФорма, Элемент, Отказ, Копирование, Родитель, Группа);

КонецПроцедуры

&НаКлиенте
Процедура ОтборыПередНачаломИзменения(Элемент, Отказ)
	
	БухгалтерскиеОтчетыКлиент.ОтборыПередНачаломИзменения(ЭтаФорма, Элемент, Отказ);	
	
КонецПроцедуры

&НаКлиенте
Процедура ТекстОшибкиОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "ОткрытьЖурналРегистрации" Тогда

		СтандартнаяОбработка = Ложь;
		ОтборЖурналаРегистрации = Новый Структура;
		ОтборЖурналаРегистрации.Вставить("СобытиеЖурналаРегистрации",
			ИнтеграцияСПлатформойСамозанятыеКлиентСервер.ИмяСобытияЖурналаРегистрации());
		ОтборЖурналаРегистрации.Вставить("ДатаНачала", ДатаНачалаОтбораЖурналаРегистрации());
		ЖурналРегистрацииКлиент.ОткрытьЖурналРегистрации(ОтборЖурналаРегистрации, ЭтотОбъект);
	
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПоказатьНастройки(Команда)
	
	Элементы.ПрименитьНастройки.КнопкаПоУмолчанию = Истина;
	
	ОткрытьНастройки();

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьНастройки()
	
	Элементы.РазделыОтчета.ТекущаяСтраница = Элементы.НастройкиОтчета;
	
КонецПроцедуры

&НаКлиенте
Процедура УменьшитьПериод(Команда)

	Отчет.Период = ДобавитьМесяц(Отчет.Период,-1);
	ПриИзмененииПериода();

КонецПроцедуры

&НаКлиенте
Процедура УвеличитьПериод(Команда)

	Отчет.Период = ДобавитьМесяц(Отчет.Период, 1);
	ПриИзмененииПериода();

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьТекстОшибки(Текст);
	
	ТекстОшибки = НСтр("ru = '%1.
		|Детальную информацию об ошибке можно найти в <a href = ""ОткрытьЖурналРегистрации"">Журнале регистрации</a>'");
	
	ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, Текст);
	Элементы.ТекстОшибки.Заголовок = СтроковыеФункцииКлиентСервер.ФорматированнаяСтрока(ТекстОшибки);
	
КонецПроцедуры

&НаКлиенте
Процедура СкрытьНастройки()
	
	Элементы.РазделыОтчета.ТекущаяСтраница = Элементы.Отчет;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)

	Элементы = Форма.Элементы;

	Если ЗначениеЗаполнено(Форма.СообщениеОбОшибке) Тогда
		Элементы.Ошибка.Видимость = Истина;
	Иначе
		Элементы.Ошибка.Видимость = Ложь;
	КонецЕсли;
	
	Элементы.ГруппаБыстрыеОтборы.Видимость = НЕ Форма.СформироватьПриОткрытии;
	
КонецПроцедуры 

&НаКлиенте
Функция ПолучитьЗапрещенныеПоля(Режим = "") Экспорт
	
	СписокПолей = Новый Массив;
	
	СписокПолей.Добавить("UserFields");
	СписокПолей.Добавить("DataParameters");
	СписокПолей.Добавить("SystemFields");
	
	Если Режим = "Группировка" Тогда
		БухгалтерскиеОтчетыКлиент.ДобавитьПоляРесурсовВЗапрещенныеПоля(ЭтаФорма, СписокПолей);
	КонецЕсли;
	
	Возврат Новый ФиксированныйМассив(СписокПолей);
	
КонецФункции

&НаКлиенте
Процедура ВыполнитьЗапросыОНачислениях()

	Запросы = МетодыВСистемуВзаимодействия();

	Если Не ПроверитьСостояниеПодключенияКСервисуМойНалог(Отчет.Организация) Тогда
		
		УстановитьСостояниеПоляТабличногоДокументаПолучениеДанных(Элементы.Результат, "СервисНеПодключен");
		
		Возврат;
		
	КонецЕсли;

	УстановитьСостояниеПоляТабличногоДокументаПолучениеДанных(Элементы.Результат);
	
	ДлительнаяОперацияИнформацияОНачислениях = СформироватьОтчетНаСервере();
		
	Если ДлительнаяОперацияИнформацияОНачислениях = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ДлительнаяОперацияИнформацияОНачислениях.Статус <> "Ошибка" Тогда
		НастройкиОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		НастройкиОжидания.ВыводитьОкноОжидания = Ложь;
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("Запрос", Запросы.СписокДоходов);
		
		Обработчик = Новый ОписаниеОповещения("ПослеВыполненияМетодаВзаимодействия", ЭтотОбъект, ДополнительныеПараметры);
		ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперацияИнформацияОНачислениях, Обработчик, НастройкиОжидания);
	Иначе
		ПоказатьОшибкуВыполненияМетодаВзаимодействия(ДлительнаяОперацияИнформацияОНачислениях);
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПроверитьСостояниеПодключенияКСервисуМойНалог(Знач Организация)

	СостояниеПодключения = РегистрыСведений.СостоянияИнтеграцииСПлатформойСамозанятые.ПолучитьСостояниеПодключения(Организация);
	
	Если СостояниеПодключения = Перечисления.СостоянияИнтеграцииСПлатформойСамозанятые.Подключено Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;

КонецФункции

&НаКлиенте
Процедура УстановитьСостояниеПоляТабличногоДокументаПолучениеДанных(ПолеТабличногоДокумента, Состояние = "ПолучениеДанных") Экспорт
	
	Если ТипЗнч(ПолеТабличногоДокумента) = Тип("ПолеФормы") 
		И ПолеТабличногоДокумента.Вид = ВидПоляФормы.ПолеТабличногоДокумента Тогда
		ОтображениеСостояния = ПолеТабличногоДокумента.ОтображениеСостояния;
	
			Если ВРег(Состояние) = "ПОЛУЧЕНИЕДАННЫХ" Тогда
	
				ОтображениеСостояния.Видимость                      = Истина;
				ОтображениеСостояния.ДополнительныйРежимОтображения = ДополнительныйРежимОтображения.Неактуальность;
				ОтображениеСостояния.Картинка                       = БиблиотекаКартинок.ДлительнаяОперация48;
				ОтображениеСостояния.Текст                          = НСтр("ru = 'Получение данных из налоговой инспекции...'");
			
			ИначеЕсли  ВРег(Состояние) = "СЕРВИСНЕПОДКЛЮЧЕН" Тогда
			
				ОтображениеСостояния.Видимость                      = Истина;
				ОтображениеСостояния.ДополнительныйРежимОтображения = ДополнительныйРежимОтображения.Неактуальность;
				ОтображениеСостояния.Картинка                       = БиблиотекаКартинок.Ошибка32;
				ОтображениеСостояния.Текст                          = НСтр("ru = 'Приложение не подключено к сервису Мой налог'");
				
			КонецЕсли;
			
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция СформироватьОтчетНаСервере() Экспорт

	Если Не КомпоновщикИнициализирован Тогда
		ИнициализацияКомпоновщикаНастроек();
	КонецЕсли;
	
	Отчет.КомпоновщикНастроек.Настройки.Отбор.ИдентификаторПользовательскойНастройки              = "";
	Отчет.КомпоновщикНастроек.Настройки.Порядок.ИдентификаторПользовательскойНастройки            = "";
	Отчет.КомпоновщикНастроек.Настройки.УсловноеОформление.ИдентификаторПользовательскойНастройки = "";

	Запросы = МетодыВСистемуВзаимодействия();

	ПараметрыМетода = 
		ИнтеграцияСПлатформойСамозанятыеКлиентСервер.НовыеПараметрыМетодаВзаимодействия(Запросы.СписокДоходов);
	
	ЗаполнитьЗначенияСвойств(ПараметрыМетода, ЭтотОбъект.Отчет);
	
	Если ПараметрыМетода.Свойство("НачалоПериода") Тогда
		ПараметрыМетода.НачалоПериода = НачалоМесяца(Отчет.Период);
	КонецЕсли;
	
	Если ПараметрыМетода.Свойство("КонецПериода") Тогда
		ПараметрыМетода.КонецПериода = КонецМесяца(Отчет.Период);
	КонецЕсли;

	Результат.Очистить();
	ИдентификаторЗаданияМетода = Неопределено;

	НастройкиЗапуска = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	НастройкиЗапуска.ОжидатьЗавершение = 0;
	
	РезультатВыполнения = ДлительныеОперации.ВыполнитьВФоне(
		"ИнтеграцияСПлатформойСамозанятые.ВыполнитьМетодВзаимодействияВФоне",
		ПараметрыМетода,
		НастройкиЗапуска);
		
	АдресРезультатаМетода = РезультатВыполнения.АдресРезультата;
	ИдентификаторЗаданияМетода = РезультатВыполнения.ИдентификаторЗадания;
	
	ЗапросНаПолучениеДанныхВыполнен = Ложь;
	Если Не ЗначениеЗаполнено(ИдентификаторЗаданияМетода) И РезультатВыполнения.Статус = "Выполнено" Тогда
		ЗапросНаПолучениеДанныхВыполнен = Истина;
	КонецЕсли;
	
	Элементы.Сформировать.КнопкаПоУмолчанию = Истина;
	
	Возврат РезультатВыполнения;

КонецФункции

&НаКлиенте
Процедура ПоказатьОшибкуВыполненияМетодаВзаимодействия(ДлительнаяОперация)
	
	СообщениеОбОшибке = ДлительнаяОперация.КраткоеПредставлениеОшибки;

	ЗаписатьОшибкуВЖурналРегистрации(СообщениеОбОшибке);

	УстановитьТекстОшибки(СообщениеОбОшибке);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыполненияМетодаВзаимодействия(ДлительнаяОперация, ДополнительныеПараметры) Экспорт
	
	Если ДлительнаяОперация = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ДлительнаяОперация.Статус <> "Ошибка" Тогда
	
		ЭтотОбъект["Запрос" + ДополнительныеПараметры.Запрос] =
			ПолучитьРезультатИзВременногоХранилища(ДлительнаяОперация.АдресРезультата);
		ВремяОжидания = ЭтотОбъект["Запрос" + ДополнительныеПараметры.Запрос].ВремяОжидания;

		Запросы = МетодыВСистемуВзаимодействия();
	
		Если Запросы.СписокДоходов = "СписокДоходов" Тогда
			ПодключитьОбработчикОжидания("ПолучитьРезультатВыполненияВФонеСписокДоходов",
				ВремяОжидания, Истина);
		КонецЕсли;

	Иначе
		
		ПоказатьОшибкуВыполненияМетодаВзаимодействия(ДлительнаяОперация);
		
		ОбновитьСтатусФоновогоЗадания();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьРезультатВыполненияВФонеНаСервере(Знач Запрос, Знач ИдентификаторФормы)
	
	НастройкиЗапуска = ДлительныеОперации.ПараметрыВыполненияВФоне(ИдентификаторФормы);
	НастройкиЗапуска.ОжидатьЗавершение = 0;
	НастройкиЗапуска.ДополнительныйРезультат = Запрос.ДополнительныйРезультат;
	
	Результат = ДлительныеОперации.ВыполнитьВФоне(
		"ИнтеграцияСПлатформойСамозанятые.ПолучитьРезультатВыполненияВФоне",
		Запрос,
		НастройкиЗапуска);
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ПолучитьРезультатВыполненияВФонеСписокДоходов()
	
	ДлительнаяОперация = ПолучитьРезультатВыполненияВФонеНаСервере(
		ЗапросСписокДоходов,
		УникальныйИдентификатор);

	Если ДлительнаяОперация = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗапросыОНачислениях = МетодыВСистемуВзаимодействия();
	
	Если ДлительнаяОперация.Статус <> "Ошибка" Тогда
		НастройкиОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		НастройкиОжидания.ТекстСообщения = СтатусФоновогоЗадания;
		НастройкиОжидания.ВыводитьОкноОжидания = Ложь;
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("Запрос", ЗапросыОНачислениях.СписокДоходов);

		Обработчик = Новый ОписаниеОповещения("ПослеПолученияРезультатаВыполненияМетода",
			ЭтотОбъект, ДополнительныеПараметры);
		ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, Обработчик, НастройкиОжидания);
	Иначе
		ПоказатьОшибкуВыполненияМетодаВзаимодействия(ДлительнаяОперация);
	КонецЕсли;

	ОбновитьСтатусФоновогоЗадания();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеПолученияРезультатаВыполненияМетода(ДлительнаяОперация, ДополнительныеПараметры) Экспорт
	
	Если ДлительнаяОперация = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ДлительнаяОперация.Статус = "Ошибка" Тогда
		ПоказатьОшибкуВыполненияМетодаВзаимодействия(ДлительнаяОперация);
	КонецЕсли;
	
	Ответ = ПолучитьРезультатИзВременногоХранилища(ДлительнаяОперация.АдресРезультата);
	
	Если Ответ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтатусыЗапросов = ИнтеграцияСПлатформойСамозанятыеКлиентСервер.СтатусыЗапросов();
	
	Если Ответ.Статус = СтатусыЗапросов.Выполнено Тогда
	
		ЭтотОбъект["ДанныеПолучены" + ДополнительныеПараметры.Запрос] = Истина;
		ЗагрузитьПолученныеРезультаты(Ответ.Результат, ДополнительныеПараметры.Запрос);
		
	ИначеЕсли Ответ.Статус = СтатусыЗапросов.Выполняется Тогда
		ПодключитьОбработчикОжидания("ПолучитьРезультатВыполненияВФоне" + ДополнительныеПараметры.Запрос, Ответ.ВремяОжидания, Истина);
	ИначеЕсли Ответ.Статус = СтатусыЗапросов.Ошибка Тогда
		
		СообщениеОбОшибке = Ответ.Сообщение;
		
		ЗаписатьОшибкуВЖурналРегистрации(СообщениеОбОшибке);

		УстановитьТекстОшибки(СообщениеОбОшибке);
		
	КонецЕсли;

	ЭтотОбъект.СтатусЗапроса = Ответ.Статус;
	ОбновитьСтатусФоновогоЗадания();
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьОтчетВФоне()
	
	ОтключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания");
	
	РезультатВыполнения= СформироватьНаСервере();
	Если Не РезультатВыполнения Тогда
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "ФормированиеОтчета");
	Иначе
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеИспользовать");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеЗадания()
	
	Попытка
		Если ЗаданиеВыполнено(ИдентификаторЗадания) Тогда
			ЗагрузитьПодготовленныеДанные();
			ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеИспользовать");
		Иначе
			ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
			ПодключитьОбработчикОжидания(
				"Подключаемый_ПроверитьВыполнениеЗадания",
				ПараметрыОбработчикаОжидания.ТекущийИнтервал,
				Истина);
		КонецЕсли;
	Исключение
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеИспользовать");
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаданиеВыполнено(ИдентификаторЗадания)
	
	Возврат ДлительныеОперации.ЗаданиеВыполнено(ИдентификаторЗадания);
	
КонецФункции

&НаСервере
Функция СформироватьНаСервере()
	
	ИдентификаторЗадания = Неопределено;
	
	ПараметрыОтчета = ПодготовитьПараметрыОтчета();
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(ЭтотОбъект.УникальныйИдентификатор);
	ПараметрыВыполнения.ОжидатьЗавершение = 0;

	РезультатВыполнения = ДлительныеОперации.ВыполнитьВФоне("БухгалтерскиеОтчетыВызовСервера.СформироватьОтчет",
		ПараметрыОтчета,
		ПараметрыВыполнения);

	АдресХранилища       = РезультатВыполнения.АдресРезультата;
	ИдентификаторЗадания = РезультатВыполнения.ИдентификаторЗадания;

	Если РезультатВыполнения.Статус = "Выполнено" Тогда
		ЗагрузитьПодготовленныеДанные();
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаСервере
Функция ПодготовитьПараметрыОтчета()
	
	ПараметрыОтчета = Новый Структура;

	ПараметрыОтчета.Вставить("Период"                           , Отчет.Период);
	ПараметрыОтчета.Вставить("НачалоПериода"                    , НачалоМесяца(Отчет.Период));
	ПараметрыОтчета.Вставить("КонецПериода"                     , КонецМесяца(Отчет.Период));
	ПараметрыОтчета.Вставить("Организация"                      , Отчет.Организация);
	ПараметрыОтчета.Вставить("ВключатьОбособленныеПодразделения", Ложь);
	ПараметрыОтчета.Вставить("РежимРасшифровки"                 , Отчет.РежимРасшифровки);
	ПараметрыОтчета.Вставить("ДанныеРасшифровки"                , ДанныеРасшифровки);
	ПараметрыОтчета.Вставить("МакетОформления"                  , МакетОформления);
	ПараметрыОтчета.Вставить("СхемаКомпоновкиДанных"            , ПолучитьИзВременногоХранилища(СхемаКомпоновкиДанных));
	ПараметрыОтчета.Вставить("НастройкиКомпоновкиДанных"        , Отчет.КомпоновщикНастроек.ПолучитьНастройки());
	ПараметрыОтчета.Вставить("ВыводитьПодвал"                   , Ложь);
	ПараметрыОтчета.Вставить("СписокЧеков"                      , ПолучитьИзВременногоХранилища(АдресСписокЧеков));
	ПараметрыОтчета.Вставить("ИдентификаторОтчета",
		БухгалтерскиеОтчетыКлиентСервер.ПолучитьИдентификаторОбъекта(ЭтотОбъект));

	Возврат ПараметрыОтчета;
	
КонецФункции

&НаСервере
Процедура ЗагрузитьПодготовленныеДанные()
	
	РезультатВыполнения = ПолучитьИзВременногоХранилища(АдресХранилища);
	ЭтотОбъект.Результат         = РезультатВыполнения.Результат;
	ЭтотОбъект.ДанныеРасшифровки = РезультатВыполнения.ДанныеРасшифровки;
	
	ЭтотОбъект.ИдентификаторЗадания = Неопределено;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеИспользовать");
	
КонецПроцедуры

&НаКлиенте
Функция ОбновитьСтатусФоновогоЗадания()

	УправлениеФормой(ЭтотОбъект);

	Если ЗначениеЗаполнено(СообщениеОбОшибке) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	ИначеЕсли ДанныеПолученыСписокДоходов Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "ФормированиеОтчета");
		СформироватьОтчетВФоне();
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ЗаписатьОшибкуВЖурналРегистрации(ТекстОшибки) Экспорт
	
	ЗаписьЖурналаРегистрации(
		ИнтеграцияСПлатформойСамозанятыеКлиентСервер.ИмяСобытияЖурналаРегистрации(),
		УровеньЖурналаРегистрации.Ошибка,
		,
		,
		ТекстОшибки);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьПолученныеРезультаты(РезультатВыполнения, ВидРезультата)
	
	Если ТипЗнч(РезультатВыполнения) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьТаблицуПолученнымРезультатом(РезультатВыполнения);

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуПолученнымРезультатом(РезультатВыполнения)
	
	Если РезультатВыполнения.Свойство("АдресВременногоХранилища") Тогда
		Значение = ПолучитьИзВременногоХранилища(РезультатВыполнения.АдресВременногоХранилища);
	КонецЕсли;

	Для Каждого КлючИЗначение Из Значение Цикл 
		Если ТипЗнч(КлючИЗначение.Значение) = Тип("ТаблицаЗначений") Тогда
			
			СписокЧеков = НоваяТаблицаЗарегистрированногоДохода();
		
			ЗаполнитьТаблицуДоходов(СписокЧеков, КлючИЗначение.Значение);
		
			АдресСписокЧеков = ПоместитьВоВременноеХранилище(СписокЧеков, УникальныйИдентификатор);
		
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьТаблицуДоходов(СписокЧеков, ТаблицаПолученныхДанных)

	Для каждого ТекСтрокаЗначение Из ТаблицаПолученныхДанных Цикл
	
		НоваяСтрока = СписокЧеков.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрокаЗначение);
		НоваяСтрока.ПредставлениеЧека = НоваяСтрока.ИдентификаторЧека;
		НоваяСтрока.СуммаПоДаннымФНС = ТекСтрокаЗначение.СуммаДокумента;
		НоваяСтрока.Состояние = Перечисления.СостоянияЧековНПД.Зарегистрирован;
		
		Если ТекСтрокаЗначение.ЧекОтменен Тогда
		
			НоваяСтрока = СписокЧеков.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрокаЗначение);
			ШаблонПредставленияЧека = НСтр("ru='%1, аннулирован %2'");
			НоваяСтрока.ПредставлениеЧека = СтрШаблон(ШаблонПредставленияЧека,НоваяСтрока.ИдентификаторЧека,Формат(НоваяСтрока.ДатаОтмены, "ДЛФ=D"));
			НоваяСтрока.СуммаПоДаннымФНС = - ТекСтрокаЗначение.СуммаДокумента;
			НоваяСтрока.Состояние = Перечисления.СостоянияЧековНПД.Аннулирован;
			
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

&НаСервереБезКонтекста
Функция НоваяТаблицаЗарегистрированногоДохода()
	
	СписокЧеков = Новый ТаблицаЗначений();
	СписокЧеков.Колонки.Добавить("ИдентификаторЧека", Новый ОписаниеТипов("Строка"));
	СписокЧеков.Колонки.Добавить("СуммаПоДаннымФНС" , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	СписокЧеков.Колонки.Добавить("ДатаФормирования" , Новый ОписаниеТипов("Дата"));
	СписокЧеков.Колонки.Добавить("ДатаРасчета"      , Новый ОписаниеТипов("Дата"));
	СписокЧеков.Колонки.Добавить("ЧекОтменен"       , Новый ОписаниеТипов("Булево"));
	СписокЧеков.Колонки.Добавить("ДатаОтмены"       , Новый ОписаниеТипов("Дата"));
	СписокЧеков.Колонки.Добавить("ПредставлениеЧека", Новый ОписаниеТипов("Строка"));
	СписокЧеков.Колонки.Добавить("Ссылка"           , Новый ОписаниеТипов("Строка"));
	СписокЧеков.Колонки.Добавить("Состояние"        , Новый ОписаниеТипов("ПеречислениеСсылка.СостоянияЧековНПД"));

	Возврат СписокЧеков;
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьРезультатИзВременногоХранилища(Знач АдресРезультата)
	
	Если ЭтоАдресВременногоХранилища(АдресРезультата) Тогда
		Возврат ПолучитьИзВременногоХранилища(АдресРезультата);
	КонецЕсли;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция МетодыВСистемуВзаимодействия()

	МетодыОНачислениях = Новый Структура();
	МетодыОНачислениях.Вставить("СписокДоходов" ,"СписокДоходов");
		
	Возврат МетодыОНачислениях;

КонецФункции

&НаКлиенте
Процедура РезультатПриАктивизацииОбласти(Элемент)
	
	Если ТипЗнч(Результат.ВыделенныеОбласти) = Тип("ВыделенныеОбластиТабличногоДокумента") Тогда
		ИнтервалОжидания = ?(ПолучитьСкоростьКлиентскогоСоединения() = СкоростьКлиентскогоСоединения.Низкая, 1, 0.2);
		ПодключитьОбработчикОжидания("Подключаемый_РезультатПриАктивизацииОбластиПодключаемый", ИнтервалОжидания, Истина);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_РезультатПриАктивизацииОбластиПодключаемый()
	
	НеобходимоВычислятьНаСервере = Ложь;
	БухгалтерскиеОтчетыКлиент.ВычислитьСуммуВыделенныхЯчеекТабличногоДокумента(
		ПолеСумма, Результат, КэшВыделеннойОбласти, НеобходимоВычислятьНаСервере);
	
	Если НеобходимоВычислятьНаСервере Тогда
		ВычислитьСуммуВыделенныхЯчеекТабличногоДокументаВКонтекстеНаСервере();
	КонецЕсли;
	
	ОтключитьОбработчикОжидания("Подключаемый_РезультатПриАктивизацииОбластиПодключаемый");
	
КонецПроцедуры

&НаСервере
Процедура ВычислитьСуммуВыделенныхЯчеекТабличногоДокументаВКонтекстеНаСервере()
	
	ПолеСумма = БухгалтерскиеОтчетыВызовСервера.ВычислитьСуммуВыделенныхЯчеекТабличногоДокумента(
		Результат, КэшВыделеннойОбласти);
	
КонецПроцедуры

&НаСервере
Процедура ИнициализацияКомпоновщикаНастроек()
	
	БухгалтерскиеОтчетыВызовСервера.ИнициализацияКомпоновщикаНастроек(ЭтотОбъект, ОрганизацияИзменилась);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьТекстЗаголовка(Форма)
	
	Отчет = Форма.Отчет;

	Если Форма.СформироватьПриОткрытии Тогда
		
		ШаблонЗаголовка = НСтр("ru = 'Доходы НПД%1'");
		ПредставлениеПериода = БухгалтерскиеОтчетыКлиентСервер.ПолучитьПредставлениеПериода(
			НачалоМесяца(Отчет.Период),
			КонецМесяца(Отчет.Период));
		
		Форма.Заголовок = СтрШаблон(ШаблонЗаголовка, ПредставлениеПериода);
	Иначе
	
		Форма.Заголовок = НСтр("ru = 'Доходы НПД'");
	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РезультатОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка, ДополнительныеПараметры)

	БухгалтерскиеОтчетыКлиент.ОбработкаРасшифровкиСтандартногоОтчета(ЭтотОбъект, Элемент, Расшифровка, СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура РезультатОбработкаДополнительнойРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка, ДополнительныеПараметры)
	
	// Не будем обрабатывать нажатие на правую кнопку мыши.
	// Покажем стандартное контекстное меню ячейки табличного документа.
	Расшифровка = Неопределено;

КонецПроцедуры

&НаСервере
Процедура ПриИзмененииПериода()

	// Обновляем представление периода на форме.
	ПредставлениеПериода = ВыборПериодаКлиентСервер.ПолучитьПредставлениеПериодаОтчета(
		ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.Месяц"),
		НачалоМесяца(Отчет.Период),
		КонецМесяца(Отчет.Период));
	
	ОбновитьТекстЗаголовка(ЭтотОбъект);
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеЗаданияМетода()
	
	Попытка
		Если ЗапросНаПолучениеДанныхВыполнен 
			ИЛИ ЗаданиеВыполнено(ИдентификаторЗаданияМетода) Тогда
			ДанныеДлительнойОперации = Новый Структура("АдресРезультата, Статус", АдресРезультатаМетода, "");
			Запрос = МетодыВСистемуВзаимодействия();
			ПослеВыполненияМетодаВзаимодействия(ДанныеДлительнойОперации, Новый Структура("Запрос", Запрос.СписокДоходов));
		Иначе
			ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
			ПодключитьОбработчикОжидания(
				"Подключаемый_ПроверитьВыполнениеЗаданияМетода",
				ПараметрыОбработчикаОжидания.ТекущийИнтервал,
				Истина);
		КонецЕсли;
	Исключение
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеИспользовать");
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ДатаНачалаОтбораЖурналаРегистрации()
	
	Возврат НачалоДня(ТекущаяДатаСеанса());
	
КонецФункции

#КонецОбласти
