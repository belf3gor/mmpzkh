#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Инициализирует набор параметров, задающих флаги выполнения дополнительных действий над сущностями, обрабатываемыми
// в процессе формирования отчета.
//
// Возвращаемое значение:
//   Структура   - флаги, задающие необходимость дополнительных действий.
//
Функция ПолучитьПараметрыИсполненияОтчета() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ИспользоватьПослеВыводаРезультата",  Истина);
	Результат.Вставить("ИспользоватьДанныеРасшифровки",      Истина);
	Результат.Вставить("ИспользоватьПередКомпоновкойМакета", Истина);
	Результат.Вставить("ИспользоватьПриВыводеЗаголовка",     Истина);
	Результат.Вставить("ИспользоватьВнешниеНаборыДанных",    Истина);
	Результат.Вставить("ИспользоватьПривилегированныйРежим", Истина);
	Результат.Вставить("ИспользоватьРасширенныеПараметрыРасшифровки", Истина);
	
	Возврат Результат;
	
КонецФункции

// Обработчик события подсистемы БухгалтерскиеОтчеты.
// Вызов определяется параметром ИспользоватьПриВыводеЗаголовка.
//
// Параметры:
//  Контекст		 - Структура - контекст, в котором формируется отчет.
//                     См. СправкиРасчеты.КонтекстФормированияОтчета.
//  КомпоновщикНастроек	 - КомпоновщикНастроекКомпоновкиДанных - описание связи настроек и схемы отчета.
//  Результат - ТабличныйДокумент - табличный документ с сформированным отчетом.
//
Процедура ПриВыводеЗаголовка(ПараметрыОтчета, КомпоновщикНастроек, Результат) Экспорт
	
	Макет = ПолучитьОбщийМакет("ОбщиеОбластиСтандартногоОтчета");
	ОбластьЗаголовок        = Макет.ПолучитьОбласть("ОбластьЗаголовок");
	ОбластьОписаниеНастроек = Макет.ПолучитьОбласть("ОписаниеНастроек");
	ОбластьОрганизация      = Макет.ПолучитьОбласть("Организация");
	
	// Получение организации для печати
	ТекстОрганизация = БухгалтерскиеОтчетыВызовСервера.ПолучитьТекстОрганизация(
		ПараметрыОтчета.Организация,
		ПараметрыОтчета.ВключатьОбособленныеПодразделения);
		
	ОбластьОрганизация.Параметры.НазваниеОрганизации = ТекстОрганизация;
	Результат.Вывести(ОбластьОрганизация);
	
	// Заполнение заголовка
	ОбластьЗаголовок.Параметры.ЗаголовокОтчета = Строка(ПолучитьТекстЗаголовка(ПараметрыОтчета));
	Результат.Вывести(ОбластьЗаголовок);
	
	Результат.Область("R1:R" + Результат.ВысотаТаблицы).Имя = "Заголовок";
	
КонецПроцедуры

// Формирует текст, выводимый в заголовке отчета.
//
// Параметры:
//  ПараметрыОтчета - Структура - см. ПодготовитьПараметрыОтчета() в ФормаОтчета.
//
// Возвращаемое значение:
//   Строка      - текст заголовка с учетом периода.
//
Функция ПолучитьТекстЗаголовка(ПараметрыОтчета) Экспорт 
	
	ШаблонЗаголовка = НСтр("ru = 'Доходы НПД%1'");
	ПредставлениеПериода = БухгалтерскиеОтчетыКлиентСервер.ПолучитьПредставлениеПериода(
		НачалоМесяца(ПараметрыОтчета.НачалоПериода),
		КонецМесяца(ПараметрыОтчета.КонецПериода));
		
	Возврат СтрШаблон(ШаблонЗаголовка, ПредставлениеПериода);
	
КонецФункции

// Обработчик события подсистемы БухгалтерскиеОтчеты.
// Вызов определяется параметром ИспользоватьВнешниеНаборыДанных.
//
// Параметры:
//  Контекст		 - Структура - контекст, в котором формируется отчет.
//                     См. СправкиРасчеты.КонтекстФормированияОтчета.
//  МакетКомпоновки	 - МакетКомпоновкиДанных - сформированный макет компоновки данных.
//
Функция ПолучитьВнешниеНаборыДанных(ПараметрыОтчета, МакетКомпоновки) Экспорт
	
	Возврат Новый Структура("СписокЧеков", ПараметрыОтчета.СписокЧеков);
	
КонецФункции

// В процедуре можно доработать компоновщик перед выводом в отчет
// Изменения сохранены не будут
Процедура ПередКомпоновкойМакета(ПараметрыОтчета, Схема, КомпоновщикНастроек) Экспорт
	
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "НачалоПериода", ПараметрыОтчета.НачалоПериода);
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "КонецПериода", КонецДня(ПараметрыОтчета.КонецПериода));
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "Организация", ПараметрыОтчета.Организация);
	
КонецПроцедуры

// Обработчик события подсистемы БухгалтерскиеОтчеты.
// Вызов определяется параметром ИспользоватьПослеВыводаРезультата.
//
// Параметры:
//  Контекст		 - Структура - контекст, в котором формируется отчет.
//                     См. СправкиРасчеты.КонтекстФормированияОтчета.
//  Результат - ТабличныйДокумент - табличный документ с сформированным отчетом.
//
Процедура ПослеВыводаРезультата(ПараметрыОтчета, Результат) Экспорт
	
	БухгалтерскиеОтчетыВызовСервера.ОбработкаРезультатаОтчета(ПараметрыОтчета.ИдентификаторОтчета, Результат);
	
	Результат.ФиксацияСлева = 0;
	Результат.ФиксацияСверху = 0;
	
КонецПроцедуры

// В процедуре можно уточнить особенности вывода данных в отчет.
//
// Параметры:
//  Настройки    - Структура - см. ОтчетыКлиентСервер.ПолучитьНастройкиОтчетаПоУмолчанию().
//  ОписаниеОтчета - СтрокаДерева, ОбъектМетаданных - описание настроек, метаданные или ссылка отчета.
//
Процедура НастроитьВариантыОтчета(Настройки, ОписаниеОтчета) Экспорт
	
	ВариантыНастроек = ВариантыНастроек();
	Для Каждого Вариант Из ВариантыНастроек Цикл
		ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, Вариант.Имя).Размещение.Вставить(
			Метаданные.Подсистемы.Отчеты.Подсистемы.СправкиРасчеты.Подсистемы.БухгалтерскийУчет, "");
		ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, Вариант.Имя).Размещение.Вставить(
			Метаданные.Подсистемы.Отчеты.Подсистемы.СправкиРасчеты.Подсистемы.БухгалтерскийИНалоговыйУчет, "");
		ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, Вариант.Имя).Размещение.Вставить(
			Метаданные.Подсистемы.БухгалтерияПредприятияПодсистемы.Подсистемы.ПростойИнтерфейс.Подсистемы.Отчеты.Подсистемы.СправкиРасчеты, "");
	КонецЦикла;
	
КонецПроцедуры

// Процедура используется подсистемой варианты отчетов.
//
// Параметры:
//  Настройки    - Структура - см. ОтчетыКлиентСервер.ПолучитьНастройкиОтчетаПоУмолчанию().
//
Процедура НастройкиОтчета(Настройки) Экспорт
	
	ВариантыНастроек = ВариантыНастроек();
	Для Каждого Вариант Из ВариантыНастроек Цикл
		Настройки.ОписаниеВариантов.Вставить(Вариант.Имя,Вариант.Представление);
	КонецЦикла;
	
КонецПроцедуры

// Задает набор вариантов настроек.
//
// Возвращаемое значение:
//   Массив      - основные варианты настроек.
//
Функция ВариантыНастроек() Экспорт
	
	Возврат ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Новый Структура(
		"Имя, Представление",
		"ДоходыНПД", "Доходы"));
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Заполняет параметры расшифровки ячейки отчета.
//
// Параметры:
//	Адрес - Строка - Адрес временного хранилища с данными расшифровки отчета.
//	Расшифровка - Произвольный - Значения полей расшифровки.
//	ПараметрыРасшифровки - Структура - Коллеккция параметров расшифроки, которую требуется заполнить. 
//		Подробнее см. БухгалтерскиеОтчетыВызовСервера.ПолучитьМассивПолейРасшифровки()
//
Процедура ЗаполнитьПараметрыРасшифровкиОтчета(Адрес, Расшифровка, ПараметрыРасшифровки) Экспорт
	
	ДанныеОтчета = ПолучитьИзВременногоХранилища(Адрес);

	ЗначениеРасшифровки = ДанныеОтчета.ДанныеРасшифровки.Элементы[Расшифровка];
	Если ТипЗнч(ЗначениеРасшифровки) = Тип("ЭлементРасшифровкиКомпоновкиДанныхПоля") Тогда
		Если ЗначениеРасшифровки.ОсновноеДействие = ДействиеОбработкиРасшифровкиКомпоновкиДанных.ОткрытьЗначение Тогда
			Если ЗначениеРасшифровки.ПолучитьПоля().Количество() > 0 Тогда
				Если ЗначениеРасшифровки.ПолучитьПоля()[0].Поле = "Ссылка" 
					И ЗначениеЗаполнено(ЗначениеРасшифровки.ПолучитьПоля()[0].Значение) Тогда
					
					// Укажем что открывать объект сразу не нужно
					ПараметрыРасшифровки.Вставить("ОткрытьОбъект", Ложь);
						
					ПараметрыРасшифровки.Вставить("ПерейтиПоСсылке", Истина);
					ПараметрыРасшифровки.Вставить("Значение", ЗначениеРасшифровки.ПолучитьПоля()[0].Значение);
				
				ИначеЕсли ЗначениеЗаполнено(ЗначениеРасшифровки.ПолучитьПоля()[0].Значение) Тогда
		
					ПараметрыРасшифровки.Вставить("ОткрытьОбъект", Истина);
					ПараметрыРасшифровки.Вставить("Значение",  ЗначениеРасшифровки.ПолучитьПоля()[0].Значение);
			
				Конецесли;
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли