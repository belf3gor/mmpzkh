
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	Организация              = Параметры.Организация;
	мДатаНачалаПериодаОтчета = Параметры.мДатаНачалаПериодаОтчета;
	мДатаКонцаПериодаОтчета  = Параметры.мДатаКонцаПериодаОтчета;
	мПериодичность           = Параметры.мПериодичность;
	мСкопированаФорма        = Параметры.мСкопированаФорма;
	мСохраненныйДок          = Параметры.мСохраненныйДок;
	
	ЭтаФормаИмя = Строка(ЭтаФорма.ИмяФормы);
	ИсточникОтчета = РегламентированнаяОтчетностьВызовСервера.ИсточникОтчета(ЭтаФормаИмя);
	ЗначениеВДанныеФормы(РегламентированнаяОтчетностьВызовСервера.ОтчетОбъект(ИсточникОтчета).ТаблицаФормОтчета(),
		мТаблицаФормОтчета);
	
	Элементы.ПолеВыбораПериодичность.СписокВыбора.Добавить(Перечисления.Периодичность.Месяц);
	Элементы.ПолеВыбораПериодичность.СписокВыбора.Добавить(Перечисления.Периодичность.Квартал);
	
	УчетПоВсемОрганизациям = РегламентированнаяОтчетность.ПолучитьПризнакУчетаПоВсемОрганизациям();
	Элементы.Организация.ТолькоПросмотр = НЕ УчетПоВсемОрганизациям;
	
	ОргПоУмолчанию = РегламентированнаяОтчетность.ПолучитьОрганизациюПоУмолчанию();
	
	ПеречислениеПериодичностьМесяц   = Перечисления.Периодичность.Месяц;
	ПеречислениеПериодичностьКвартал = Перечисления.Периодичность.Квартал;
	
	Если НЕ ЗначениеЗаполнено(мДатаНачалаПериодаОтчета) И НЕ ЗначениеЗаполнено(мДатаКонцаПериодаОтчета) Тогда
		мДатаКонцаПериодаОтчета  = КонецМесяца(ДобавитьМесяц(КонецКвартала(ТекущаяДатаСеанса()), -3));
		мДатаНачалаПериодаОтчета = НачалоМесяца(ДобавитьМесяц(КонецКвартала(ТекущаяДатаСеанса()), -3));
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(мПериодичность)
	 ИЛИ НЕ (мПериодичность = ПеречислениеПериодичностьМесяц ИЛИ мПериодичность = ПеречислениеПериодичностьКвартал) Тогда
		мПериодичность = ПеречислениеПериодичностьМесяц;
	КонецЕсли;
	
	ПолеВыбораПериодичность = мПериодичность;
	
	Элементы.ПолеРедакцияФормы.Видимость = НЕ (мТаблицаФормОтчета.Количество() > 1);
	
	ИзменитьПериод(ЭтаФорма, 0);
		
	Если НЕ ЗначениеЗаполнено(Организация) И ЗначениеЗаполнено(ОргПоУмолчанию) Тогда
		Организация = ОргПоУмолчанию;
	КонецЕсли;
	
	Если РегламентированнаяОтчетностьВызовСервера.ИспользуетсяОднаОрганизация() Тогда
		
		ОргПоУмолчанию = ОбщегоНазначения.ОбщийМодуль("Справочники.Организации").ОрганизацияПоУмолчанию();
		Организация = ОргПоУмолчанию;
		
		Элементы.НадписьОрганизация.Видимость = Ложь;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Организация) Тогда
		ОбработатьОрганизацию(Организация);
	КонецЕсли;
	
	// Вычислим общую часть ссылки на ИзмененияЗаконодательства.
	ОбщаяЧастьСсылкиНаИзмененияЗаконодательства = "http://v8.1c.ru/lawmonitor/lawchanges.jsp?";
	СпрРеглОтчетов = Справочники.РегламентированныеОтчеты;
	НайденнаяСсылка = СпрРеглОтчетов.НайтиПоРеквизиту("ИсточникОтчета", ИсточникОтчета);
	
	Если НайденнаяСсылка = СпрРеглОтчетов.ПустаяСсылка() Тогда
		
		ОбщаяЧастьСсылкиНаИзмененияЗаконодательства = "";
		
	Иначе
		
		УИДОтчета = НайденнаяСсылка.УИДОтчета;
		
		Фильтр1 = "regReportForm=" + УИДОтчета;
		Фильтр2 = "regReportOnly=true";
		УИДКонфигурации = "";
		РегламентированнаяОтчетностьПереопределяемый.ПолучитьУИДКонфигурации(УИДКонфигурации);
		Фильтр3 = "userConfiguration=" + УИДКонфигурации;
		
		ОбщаяЧастьСсылкиНаИзмененияЗаконодательства = ОбщаяЧастьСсылкиНаИзмененияЗаконодательства +
		Фильтр1 + "&" + Фильтр2 + "&" + Фильтр3;
		
	КонецЕсли; 
	
	ПолеСсылкаИзмененияЗаконодательства = "Изменения законодательства";
	
	// ИнтернетПоддержкаПользователей.Новости.КонтекстныеНовости_ПриСозданииНаСервере
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.Новости") Тогда
		
		ИдентификаторыСобытийПриОткрытии = "ПриОткрытии";
		
		МодульОбработкаНовостей = ОбщегоНазначения.ОбщийМодуль("ОбработкаНовостей");
		
		МодульОбработкаНовостей.КонтекстныеНовости_ПриСозданииНаСервере(
			ЭтаФорма,
			"БП.Отчет.РегламентированныйОтчетНДС",
			"ОсновнаяФорма",
			,
			НСтр("ru='Новости: Декларация по налогу на добавленную стоимость'"),
			Ложь,
			Новый Структура("ПолучатьНовостиНаСервере, ХранитьМассивНовостейТолькоНаСервере", Истина, Ложь),
			ИдентификаторыСобытийПриОткрытии);
		
	КонецЕсли;
	// Конец ИнтернетПоддержкаПользователей.Новости.КонтекстныеНовости_ПриСозданииНаСервере
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// ИнтернетПоддержкаПользователей.Новости.ПриОткрытии
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.Новости") Тогда
		
		МодульОбработкаНовостейКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ОбработкаНовостейКлиент");
		
		МодульОбработкаНовостейКлиент.КонтекстныеНовости_ПриОткрытии(ЭтаФорма);
		
	КонецЕсли;
	// Конец ИнтернетПоддержкаПользователей.Новости.ПриОткрытии
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если Параметр = "Активизировать" Тогда
	
		Если ИмяСобытия = ЭтаФорма.Заголовок Тогда
		
			ЭтаФорма.Активизировать();
		
		КонецЕсли;
	
	КонецЕсли;
	
	// ИнтернетПоддержкаПользователей.Новости.ОбработкаОповещения
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.Новости") Тогда
		
		МодульОбработкаНовостейКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ОбработкаНовостейКлиент");
		
		МодульОбработкаНовостейКлиент.КонтекстныеНовости_ОбработкаОповещения(ЭтаФорма, ИмяСобытия, Параметр, Источник);
		
	КонецЕсли;
	// Конец ИнтернетПоддержкаПользователей.Новости.ОбработкаОповещения
	
КонецПроцедуры


#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Организация = ВыбранноеЗначение;
	
	ОбработатьОрганизацию(Организация);
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	ОбработатьОрганизацию(ДанныеВыбора);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолеВыбораПериодичностиПоказаПериодаПриИзменении(Элемент)
	
	СтрВыбораПериодичностиПоказаПериода = ПолеВыбораПериодичностиПоказаПериода;
	
	Если СтрНайти(ВРег(СтрВыбораПериодичностиПоказаПериода),"КВАРТАЛ") > 1 Тогда
		
		ПолеВыбораПериодичность = ПеречислениеПериодичностьКвартал;
		
	Иначе
		
		ПолеВыбораПериодичность = ПеречислениеПериодичностьМесяц;
		
	КонецЕсли;
	
	ДатаНачала = "";
	ДатаКонца  = "";
	РегламентированнаяОтчетностьКлиент.ПолучитьНачалоКонецПериода(СтрВыбораПериодичностиПоказаПериода, ДатаНачала, ДатаКонца);
	
	Если ПолеВыбораПериодичность = ПеречислениеПериодичностьКвартал Тогда
		
		мДатаКонцаПериодаОтчета  = КонецКвартала(ДатаКонца);
		мДатаНачалаПериодаОтчета = НачалоКвартала(ДатаНачала);
		
	Иначе
		
		мДатаКонцаПериодаОтчета  = КонецМесяца(ДатаКонца);
		мДатаНачалаПериодаОтчета = НачалоМесяца(ДатаНачала);
		
	КонецЕсли;
	
	мПериодичность = ПолеВыбораПериодичность;

	ПоказатьПериод(ЭтаФорма);
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолеРедакцияФормыПриИзменении(Элемент)
	
	СтрРедакцияФормы = ПолеРедакцияФормы;
	// Ищем в таблице мТаблицаФормОтчета для определения выбранной формы отчета.
	ЗаписьПоиска = Новый Структура;
	ЗаписьПоиска.Вставить("РедакцияФормы",СтрРедакцияФормы);
	МассивСтрок = мТаблицаФормОтчета.НайтиСтроки(ЗаписьПоиска);	
	
	Если МассивСтрок.Количество() > 0 Тогда
		
		ВыбраннаяФорма = МассивСтрок[0];
		// Присваиваем.
		мВыбраннаяФорма		= ВыбраннаяФорма.ФормаОтчета;
		ОписаниеНормативДок	= ВыбраннаяФорма.ОписаниеОтчета;
		
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ПолеСсылкаИзмененияЗаконодательстваНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ОбщаяЧастьСсылкиНаИзмененияЗаконодательства = "" Тогда
		// Нет общей части - ничего не делаем.
		Возврат;
	КонецЕсли; 
	
	// Фильтр4 - год.
	Фильтр4 = "currentYear=" + Формат(Год(мДатаКонцаПериодаОтчета),"ЧГ=0");
	
	// Фильтр5 - квартал.
	МесяцКонцаКварталаОтчета = Месяц(КонецКвартала(мДатаКонцаПериодаОтчета));
	КварталОтчета = МесяцКонцаКварталаОтчета/3;
	Фильтр5 = "currentQuartal=" + Строка(КварталОтчета);
	
	СсылкаИзмененияЗаконодательства = ОбщаяЧастьСсылкиНаИзмененияЗаконодательства + 
	"&" + Фильтр4 + "&" + Фильтр5;
	
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПопытатьсяПерейтиПоНавигационнойСсылке(СсылкаИзмененияЗаконодательства);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ВыбратьФорму(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыбратьФормуЗавершение", ЭтотОбъект);
	РегламентированнаяОтчетностьКлиент.ВыбратьФормуОтчетаИзДействующегоСписка(ЭтаФорма, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуКонтекстныхНовостей(Команда)
		
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.Новости") Тогда
		
		МодульОбработкаНовостейКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ОбработкаНовостейКлиент");
		
		МодульОбработкаНовостейКлиент.КонтекстныеНовости_ОбработкаКомандыНовости(ЭтаФорма, Команда);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуОтчета(Команда)
	
	Заполнить();
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьБезПомощника(Команда)
	
	Заполнить(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПредыдущийПериод(Команда)
	
	ИзменитьПериод(ЭтаФорма, -1);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСледующийПериод(Команда)
	
	ИзменитьПериод(ЭтаФорма, 1);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Форма.Элементы.ФормаСоздатьБезПомощника.Видимость = ОтчетМожноЗаполнитьВПомощнике(
		Форма.мДатаНачалаПериодаОтчета, Форма.Организация);
	
КонецПроцедуры

&НаКлиенте
Процедура Заполнить(БезПомощника = Ложь)
	
	Если мСкопированаФорма <> Неопределено Тогда
		// Документ был скопирован.
		// Проверяем соответствие форм.
		Если мВыбраннаяФорма <> мСкопированаФорма Тогда
			ПоказатьПредупреждение(,НСтр("ru='Форма отчета изменилась, копирование невозможно!'"));
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		
		Сообщение = Новый СообщениеПользователю;
		
		Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"),
			РегламентированнаяОтчетностьКлиент.ОсновнаяФормаОрганизацияНеЗаполненаВывестиТекст());
		
		Сообщение.Сообщить();
		
		Возврат;
		
	КонецЕсли;
	
	Если Не БезПомощника
		И ОтчетМожноЗаполнитьВПомощнике(мДатаКонцаПериодаОтчета, Организация) Тогда
		
		ПараметрыПомощника = Новый Структура;
		ПараметрыПомощника.Вставить("Организация",      Организация);
		ПараметрыПомощника.Вставить("ПериодСобытия",    мДатаНачалаПериодаОтчета);
		ПараметрыПомощника.Вставить("КонтекстныйВызов", Истина);
		ПараметрыПомощника.Вставить("ИсточникВызова",   "ОткрытиеПомощникаНДСРегламентныеОтчеты");
		
		ИмяФормыПомощника = "Обработка.ПомощникРасчетаНДС.Форма";
		
		ОткрытьФорму(ИмяФормыПомощника, ПараметрыПомощника);

	Иначе
	
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("мДатаНачалаПериодаОтчета", мДатаНачалаПериодаОтчета);
		ПараметрыФормы.Вставить("мСохраненныйДок",          мСохраненныйДок);
		ПараметрыФормы.Вставить("мСкопированаФорма",        мСкопированаФорма);
		ПараметрыФормы.Вставить("мДатаКонцаПериодаОтчета",  мДатаКонцаПериодаОтчета);
		ПараметрыФормы.Вставить("мПериодичность",           мПериодичность);
		ПараметрыФормы.Вставить("Организация",              Организация);
		ПараметрыФормы.Вставить("мВыбраннаяФорма",          мВыбраннаяФорма);
		ПараметрыФормы.Вставить("ДоступенМеханизмПечатиРеглОтчетностиСДвухмернымШтрихкодомPDF417",
			РегламентированнаяОтчетностьКлиент.ДоступенМеханизмПечатиРеглОтчетностиСДвухмернымШтрихкодомPDF417());
		
		ОткрытьФорму(СтрЗаменить(ЭтаФорма.ИмяФормы, "ОсновнаяФорма", "") + мВыбраннаяФорма, ПараметрыФормы, , Истина);
	
	КонецЕсли;
	
	Закрыть();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ОтчетМожноЗаполнитьВПомощнике(Знач НалоговыйПериод, Знач Организация)
	
	ФормироватьДекларациюВПомощнике = Ложь;
	
	Если Метаданные.Обработки.Найти("ПомощникРасчетаНДС") <> Неопределено Тогда
		МенеджерПомощника = ОбщегоНазначения.ОбщийМодуль("Обработки.ПомощникРасчетаНДС");
		ФормироватьДекларациюВПомощнике = МенеджерПомощника.ФормироватьДекларациюВПомощнике(
			Организация, НалоговыйПериод);
	КонецЕсли;
	
	Если ФормироватьДекларациюВПомощнике
	   И ЭтоПервыйОтчет(НалоговыйПериод, Организация) Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

&НаСервереБезКонтекста
Функция ЭтоПервыйОтчет(Знач НалоговыйПериод, Знач Организация)
	
	ЭкземплярРеглОтчета = ИнтерфейсыВзаимодействияБРО.АктуальныйОтчет(
		"РегламентированныйОтчетНДС",
		Организация,
		НалоговыйПериод);
	
	Возврат Не ЗначениеЗаполнено(ЭкземплярРеглОтчета);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ПоказатьПериод(Форма)
	
	ОбработкаПериодичностьОтчета(Форма);
	
	КоличествоФорм = РегламентированнаяОтчетностьКлиентСервер.КоличествоФормСоответствующихВыбранномуПериоду(Форма);
	
	Если КоличествоФорм >= 1 Тогда
		
		Форма.Элементы.ПолеРедакцияФормы.Видимость = КоличествоФорм > 1;
		
		УстановитьДоступностьЭлементаПриРасширенномПервомНалоговомПериоде(Форма, "ОткрытьФормуОтчета");
		
	Иначе
		
		Форма.Элементы.ПолеРедакцияФормы.Видимость	 = Ложь;
		Форма.Элементы.ОткрытьФормуОтчета.Доступность = Ложь;
		
		Форма.ОписаниеНормативДок = "Отсутствует в программе.";
		
	КонецЕсли;
	
	УстановитьДоступностьЭлементаПриРасширенномПервомНалоговомПериоде(Форма, "УстановитьПредыдущийПериод");
	
	ОтобразитьПоясненияКПериодуОтчета(Форма);
	
	РегламентированнаяОтчетностьКлиентСервер.ВыборФормыРегламентированногоОтчетаПоУмолчанию(Форма);
	
	// РезультирующаяТаблица - действующие на выбранный период формы.
	// Заполним список выбора форм отчетности.
	Форма.Элементы.ПолеРедакцияФормы.СписокВыбора.Очистить();
	
	Для Каждого ЭлФорма Из Форма.РезультирующаяТаблица Цикл
		Форма.Элементы.ПолеРедакцияФормы.СписокВыбора.Добавить(ЭлФорма.РедакцияФормы);
	КонецЦикла;
	
	// Для периодов ранее 2013 года ссылку Изменения законадательства скрываем
	ГодПериода = Год(Форма.мДатаКонцаПериодаОтчета);
	Форма.Элементы.ПолеСсылкаИзмененияЗаконодательства.Видимость = ГодПериода > 2012;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ИзменитьПериод(Форма, Шаг)
	
	Если Форма.ПолеВыбораПериодичность = Форма.ПеречислениеПериодичностьКвартал Тогда
		Форма.мДатаКонцаПериодаОтчета  = КонецКвартала(ДобавитьМесяц(Форма.мДатаКонцаПериодаОтчета, Шаг * 3));
		Форма.мДатаНачалаПериодаОтчета = НачалоКвартала(Форма.мДатаКонцаПериодаОтчета);
	Иначе
		Форма.мДатаКонцаПериодаОтчета  = КонецМесяца(ДобавитьМесяц(Форма.мДатаКонцаПериодаОтчета, Шаг));
		Форма.мДатаНачалаПериодаОтчета = НачалоМесяца(Форма.мДатаКонцаПериодаОтчета);
	КонецЕсли;
	
	ПоказатьПериод(Форма);
	
	УправлениеФормой(Форма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбработкаПериодичностьОтчета(Форма)
	
	Если Год(Форма.мДатаКонцаПериодаОтчета) >= 2008 Тогда
		
		Если Форма.ПолеВыбораПериодичность <> Форма.ПеречислениеПериодичностьКвартал Тогда
			
			Форма.ПолеВыбораПериодичность = Форма.ПеречислениеПериодичностьКвартал;
			
			Форма.мПериодичность = Форма.ПолеВыбораПериодичность;
			
			Форма.мДатаКонцаПериодаОтчета  = КонецКвартала(Форма.мДатаКонцаПериодаОтчета);
			Форма.мДатаНачалаПериодаОтчета = НачалоКвартала(Форма.мДатаКонцаПериодаОтчета);
			
		КонецЕсли;
		
		Форма.Элементы.ПолеВыбораПериодичностиПоказаПериода.СписокВыбора.Очистить();
		
		СтрПериодОтчета = ПредставлениеПериода(НачалоДня(Форма.мДатаНачалаПериодаОтчета),
		КонецДня(Форма.мДатаКонцаПериодаОтчета), "ФП = Истина");
		
		Форма.Элементы.ПолеВыбораПериодичностиПоказаПериода.СписокВыбора.Добавить(СтрПериодОтчета);
		
		Форма.ПолеВыбораПериодичностиПоказаПериода = СтрПериодОтчета;
		
		Форма.Элементы.ПолеВыбораПериодичностиПоказаПериода.КнопкаВыпадающегоСписка = Ложь;
		Форма.Элементы.ПолеВыбораПериодичностиПоказаПериода.ТолькоПросмотр = Истина;
		
	Иначе
		
		Форма.Элементы.ПолеВыбораПериодичностиПоказаПериода.СписокВыбора.Очистить();
		
		ДатаКонца		= КонецКвартала(Форма.мДатаКонцаПериодаОтчета);
		ДатаНачала		= НачалоКвартала(Форма.мДатаНачалаПериодаОтчета);
		ВремДатаКонца	= КонецМесяца(ДатаНачала);
		
		СтрПериодОтчета = ПредставлениеПериода(НачалоДня(ДатаНачала), КонецДня(ВремДатаКонца), "ФП = Истина");
		
		Форма.Элементы.ПолеВыбораПериодичностиПоказаПериода.СписокВыбора.Добавить(СтрПериодОтчета);
		
		Пока ВремДатаКонца <> ДатаКонца Цикл
			ДатаНачала	  = НачалоМесяца(ДобавитьМесяц(ДатаНачала,1));
			ВремДатаКонца = КонецМесяца(ДобавитьМесяц(ВремДатаКонца,1));
			СтрПериодОтчета = ПредставлениеПериода(НачалоДня(ДатаНачала), КонецДня(ВремДатаКонца), "ФП = Истина");
			
			Форма.Элементы.ПолеВыбораПериодичностиПоказаПериода.СписокВыбора.Добавить(СтрПериодОтчета);
		КонецЦикла;
		
		СтрПериодОтчетаКвартал = ПредставлениеПериода(НачалоКвартала(ДатаНачала), КонецКвартала(ДатаКонца), "ФП = Истина");
		
		Если СтрПериодОтчетаКвартал <> СтрПериодОтчета Тогда
			Форма.Элементы.ПолеВыбораПериодичностиПоказаПериода.СписокВыбора.Добавить(СтрПериодОтчетаКвартал);
		КонецЕсли;
		
		СтрПериодОтчета = ПредставлениеПериода(НачалоДня(Форма.мДатаНачалаПериодаОтчета),
		КонецДня(Форма.мДатаКонцаПериодаОтчета), "ФП = Истина");
		
		Форма.ПолеВыбораПериодичностиПоказаПериода = СтрПериодОтчета;
		
		Форма.Элементы.ПолеВыбораПериодичностиПоказаПериода.КнопкаВыпадающегоСписка = Истина;
		Форма.Элементы.ПолеВыбораПериодичностиПоказаПериода.ТолькоПросмотр = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьФормуЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		мВыбраннаяФорма = Результат;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОткорректироватьНачальныйПериод()
	
	Если ГраницыПервогоНалоговогоПериода <> Неопределено Тогда
		
		Если мДатаКонцаПериодаОтчета <= ГраницыПервогоНалоговогоПериода.Конец Тогда
			
			мДатаКонцаПериодаОтчета  = ГраницыПервогоНалоговогоПериода.Конец;
			мДатаНачалаПериодаОтчета = НачалоКвартала(мДатаКонцаПериодаОтчета);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьЭлементаПриРасширенномПервомНалоговомПериоде(Форма, ИмяЭлемента)
	
	ЭлементФормы = Форма.Элементы.Найти(ИмяЭлемента);
	
	Если ЭлементФормы <> Неопределено Тогда
		
		ЭлементФормы.Доступность = НЕ (Форма.ГраницыПервогоНалоговогоПериода <> Неопределено
		И Форма.мДатаКонцаПериодаОтчета < Форма.ГраницыПервогоНалоговогоПериода.Конец);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьОрганизацию(ВыбОрганизация)
	
	ГраницыПервогоНалоговогоПериода = Неопределено;
	
	Если ЗначениеЗаполнено(ВыбОрганизация) Тогда
		
		ДатаРегистрацииОрганизации = РегламентированнаяОтчетность.ДатаРегистрацииОрганизации(ВыбОрганизация);
		
		ПервыйНалоговыйПериод
		= ИнтерфейсыВзаимодействияБРО.БлижайшийНалоговыйПериод(ВыбОрганизация, ДатаРегистрацииОрганизации,
		Перечисления.ВариантыРасширенногоПервогоНалоговогоПериода.РегистрацияВПоследние10ДнейКвартала);
		
		КонецПервогоНалоговогоПериода = КонецДня(ПервыйНалоговыйПериод.Конец);
		НачалоПервогоНалоговогоПериода = НачалоДня(Мин(ПервыйНалоговыйПериод.Начало, ПервыйНалоговыйПериод.Период));
		
		Если КонецПервогоНалоговогоПериода >= КонецГода('20171231')
			И КонецКвартала(НачалоПервогоНалоговогоПериода) < КонецПервогоНалоговогоПериода Тогда
			
			ГраницыПервогоНалоговогоПериода
			= Новый Структура("Начало, Конец", НачалоПервогоНалоговогоПериода, КонецПервогоНалоговогоПериода);
			
		КонецЕсли;
		
	КонецЕсли;
	
	ОткорректироватьНачальныйПериод();
	
	ПоказатьПериод(ЭтаФорма);
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОтобразитьПоясненияКПериодуОтчета(Форма)
	
	Элементы = Форма.Элементы;
	
	ПризнакВидимости = Ложь;
	
	Если Форма.ГраницыПервогоНалоговогоПериода <> Неопределено Тогда
		
		// Случай расширенного первого налогового периода.
		//
		Если Форма.мДатаКонцаПериодаОтчета < Форма.ГраницыПервогоНалоговогоПериода.Конец
			И КонецКвартала(ДобавитьМесяц(Форма.мДатаКонцаПериодаОтчета, 1)) = Форма.ГраницыПервогоНалоговогоПериода.Конец Тогда
			
			// Выбран период, предшествующий первому налоговому периоду.
			//
			ПризнакВидимости = Истина;
			
			ШаблонСообщения = НСтр(
			"ru='Отчетность по НДС за %1 сдавать не нужно. Период с даты регистрации %2 по %3 включается в отчетность за %4.'");
			
			ТекстПояснения
			= СтрШаблон(ШаблонСообщения, Формат(Форма.мДатаКонцаПериодаОтчета, "ДФ='к ''квартал'' гггг ''года'''"),
			Формат(Форма.ГраницыПервогоНалоговогоПериода.Начало, "ДЛФ=D"), Формат(Форма.мДатаКонцаПериодаОтчета, "ДЛФ=D"),
			Формат(Форма.ГраницыПервогоНалоговогоПериода.Конец, "ДФ='к ''квартал'' гггг ''года'''"));
			
			Элементы.ПояснениеРасширенныйНалоговыйПериод.Заголовок = ТекстПояснения;
			
		ИначеЕсли Форма.мДатаКонцаПериодаОтчета = Форма.ГраницыПервогоНалоговогоПериода.Конец Тогда
			
			// Выбран период, соответствующий первому налоговому периоду.
			//
			ПризнакВидимости = Истина;
			
			ШаблонСообщения = НСтр("ru='Период с даты регистрации %1 по %2 включается в отчетность по НДС за %3.'");
			
			ТекстПояснения = СтрШаблон(ШаблонСообщения, Формат(Форма.ГраницыПервогоНалоговогоПериода.Начало, "ДЛФ=D"),
			Формат(КонецКвартала(Форма.ГраницыПервогоНалоговогоПериода.Начало), "ДЛФ=D"),
			Формат(Форма.ГраницыПервогоНалоговогоПериода.Конец, "ДФ='к ''квартал'' гггг ''года'''"));
			
			Элементы.ПояснениеРасширенныйНалоговыйПериод.Заголовок = ТекстПояснения;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Элементы.БлокРасширенныйНалоговыйПериод.Видимость = ПризнакВидимости;
	
КонецПроцедуры

#Область Новости

// Процедура показывает новости, требующие прочтения (важные и очень важные)
//
// Параметры:
//  Нет
//
&НаКлиенте
Процедура Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии()

	// ИнтернетПоддержкаПользователей.Новости.Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии
	ИдентификаторыСобытийПриОткрытии = "ПриОткрытии";
	// Конец ИнтернетПоддержкаПользователей.Новости.Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии

	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.Новости") Тогда
		
		МодульОбработкаНовостейКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ОбработкаНовостейКлиент");
		
		МодульОбработкаНовостейКлиент.КонтекстныеНовости_ПоказатьНовостиТребующиеПрочтенияПриОткрытии(ЭтаФорма, ИдентификаторыСобытийПриОткрытии);
		
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#КонецОбласти