//ПроверкаКонтрагентовБРО
&НаКлиенте
Перем ПроверкаКонтрагентовПараметрыОбработчикаОжидания Экспорт;
//Конец ПроверкаКонтрагентовБРО

&НаКлиенте
Перем ФормаВыгрузкиРеглОтчета;

&НаКлиенте
Перем ПараметрыОбработчикаОжидания;

&НаКлиенте
Перем ФормаДлительнойОперации;

&НаКлиенте
Перем ОбработкаКС Экспорт;

&НаСервере
Перем СписокРасшифровкиПоказателей;

&НаСервере
Перем СписокРасшифровкиформулы;

&НаСервере
Перем Документирование;

&НаСервере
Перем ТаблицаОписаний;

&НаСервере
Перем мОбъектОтчета;

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	// Обход ошибки платформы "Параметр сеанса отсутствует или удален".
	ТабличныйДокумент.Очистить();
	
	ОбъектОтчета(ЭтаФорма.ИмяФормы).СформироватьСтруктуруРеквизитовФормы(
	Параметры.мВыбраннаяФорма, СтруктураРеквизитовФормы);
	
	СоответствиеЕдиницыИзмеренияДелителю = Новый Структура;
	СоответствиеЕдиницыИзмеренияДелителю.Вставить("Окр1", 1);
	СоответствиеЕдиницыИзмеренияДелителю.Вставить("Окр1000", 1000);
	СоответствиеЕдиницыИзмеренияДелителю.Вставить("Окр1000000", 1000000);
	
	СтруктураРеквизитовФормы.мОписаниеТиповЧислоЕ = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(16, 2));
	
	КолИсхСтрокИдГруппы31  = 10;
	КолИсхСтрокИдГруппы32  = 1;
	КолИсхСтрокИдГруппы4М1 = 1;
	КолИсхСтрокИдГруппы4М2 = 1;
	КолИсхСтрокИдГруппы4М3 = 1;
	КолИсхСтрокИдГруппы5   = 1;
	КолИсхСтрокИдГруппы6М1 = 1;
	КолИсхСтрокИдГруппы6М2 = 1;
	КолИсхСтрокИдГруппы6М3 = 1;
	КолИсхСтрокИдГруппы7   = 1;
	
	КолКолонокИдГруппы31  = 4;
	КолКолонокИдГруппы32  = 3;
	КолКолонокИдГруппы4М1 = 5;
	КолКолонокИдГруппы4М2 = 3;
	КолКолонокИдГруппы4М3 = 3;
	КолКолонокИдГруппы5   = 7;
	КолКолонокИдГруппы6М1 = 4;
	КолКолонокИдГруппы6М2 = 4;
	КолКолонокИдГруппы6М3 = 5;
	КолКолонокИдГруппы7   = 4;
	
	СтруктураДанныхТитульный     = Новый Структура;
	СтруктураДанныхРаздел1       = Новый Структура;
	СтруктураДанныхРаздел3       = Новый Структура;
	СтруктураДанныхРаздел3_Прил2 = Новый Структура;
	СтруктураДанныхРаздел4       = Новый Структура;
	СтруктураДанныхРаздел6       = Новый Структура;
	СтруктураДанныхРаздел7       = Новый Структура;
	
	ИнициализацияМногостраничныхРазделов();
	
	// структура многострочных разделов формы
	мСтруктураМногострочныхРазделов = Новый Структура;
	мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы31,  СтруктураРеквизитовФормы.мИдГруппы31);
	мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы32,  СтруктураРеквизитовФормы.мИдГруппы32);
	мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы4М1, СтруктураРеквизитовФормы.мИдГруппы4М1);
	мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы4М2, СтруктураРеквизитовФормы.мИдГруппы4М2);
	мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы4М3, СтруктураРеквизитовФормы.мИдГруппы4М3);
	мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы5,   СтруктураРеквизитовФормы.мИдГруппы5);
	мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы6М1, СтруктураРеквизитовФормы.мИдГруппы6М1);
	мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы6М2, СтруктураРеквизитовФормы.мИдГруппы6М2);
	мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы6М3, СтруктураРеквизитовФормы.мИдГруппы6М3);
	мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы7,   СтруктураРеквизитовФормы.мИдГруппы7);
	
	// Структура содержит данные дополнительных страниц
	мСтруктураМногостраничныхРазделов = Новый Структура;
	мСтруктураМногостраничныхРазделов.Вставить("Раздел2",       "ТаблицаСтраницыРаздела2");
	мСтруктураМногостраничныхРазделов.Вставить("Раздел3_Прил1", "ТаблицаСтраницыРаздела3_Прил1");
	мСтруктураМногостраничныхРазделов.Вставить("Раздел5",       "ТаблицаСтраницыРаздела5");
	
	// структура исходных строк (минимального кол-ва) многострочных разделов формы
	мСтруктураИсхКолвоСтрокРазделов = Новый Структура;
	мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы31,  КолИсхСтрокИдГруппы31);
	мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы32,  КолИсхСтрокИдГруппы32);
	мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы4М1, КолИсхСтрокИдГруппы4М1);
	мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы4М2, КолИсхСтрокИдГруппы4М2);
	мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы4М3, КолИсхСтрокИдГруппы4М3);
	мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы5,   КолИсхСтрокИдГруппы5);
	мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы6М1, КолИсхСтрокИдГруппы6М1);
	мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы6М2, КолИсхСтрокИдГруппы6М2);
	мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы6М3, КолИсхСтрокИдГруппы6М3);
	мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы7,   КолИсхСтрокИдГруппы7);
	
	мСтруктураКолвоКолонокРазделов = Новый Структура;
	мСтруктураКолвоКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы31,  КолКолонокИдГруппы31);
	мСтруктураКолвоКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы32,  КолКолонокИдГруппы32);
	мСтруктураКолвоКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы4М1, КолКолонокИдГруппы4М1);
	мСтруктураКолвоКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы4М2, КолКолонокИдГруппы4М2);
	мСтруктураКолвоКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы4М3, КолКолонокИдГруппы4М3);
	мСтруктураКолвоКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы5,   КолКолонокИдГруппы5);
	мСтруктураКолвоКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы6М1, КолКолонокИдГруппы6М1);
	мСтруктураКолвоКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы6М2, КолКолонокИдГруппы6М2);
	мСтруктураКолвоКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы6М3, КолКолонокИдГруппы6М3);
	мСтруктураКолвоКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы7,   КолКолонокИдГруппы7);
	
	ЦветЗаполняетсяТолькоВручную     = Новый Цвет(255, 255, 225);
	ЦветЗаполняетсяАвтоКорректир     = Новый Цвет(255, 240, 200);
	ЦветЗаполняетсяАвтоБезКорректир  = Новый Цвет(230, 240, 220);
	СтруктураРеквизитовФормы.ЦветЗаполняетсяАвтоАрифметика = Новый Цвет(192, 220, 192);
	ЦветЗаполняетсяОднозначноВручную = Новый Цвет(255, 255, 192);
	ЦветЗаполняетсяАвтоматически     = Новый Цвет(255, 255, 255);
	
	// Структура цветов раскраски автозаполняемых ячеек.
	мСтруктураЦветовРаскраски = Новый Структура;
	мСтруктураЦветовРаскраски.Вставить("_1", ЦветЗаполняетсяТолькоВручную);
	мСтруктураЦветовРаскраски.Вставить("_2", ЦветЗаполняетсяАвтоКорректир);
	мСтруктураЦветовРаскраски.Вставить("_3", ЦветЗаполняетсяАвтоБезКорректир);
	мСтруктураЦветовРаскраски.Вставить("_4", СтруктураРеквизитовФормы.ЦветЗаполняетсяАвтоАрифметика);
	мСтруктураЦветовРаскраски.Вставить("_0", ЦветЗаполняетсяОднозначноВручную);
	мСтруктураЦветовРаскраски.Вставить("_5", ЦветЗаполняетсяАвтоматически);
	мСтруктураЦветовРаскраски.Вставить("_7", ЦветЗаполняетсяАвтоБезКорректир);
	
	мСтруктураВариантыЗаполнения       = Новый Структура;
	мСтруктураВариантыЗаполненияЭталон = Новый Структура;
	
	СтруктураРеквизитовФормы.мПечатныеформы = Новый СписокЗначений;
	СтруктураРеквизитовФормы.мПечатаемыеРазделы = Новый СписокЗначений;
	
	ИмяРаздела = "Титульный";
	
	ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(
	Сред(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + ИмяРаздела));
	
	СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяРаздела;
	
	СтруктураРеквизитовФормы.мВыбраннаяФорма          = Параметры.мВыбраннаяФорма;
	СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета  = Параметры.мДатаКонцаПериодаОтчета;
	СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета = Параметры.мДатаНачалаПериодаОтчета;
	СтруктураРеквизитовФормы.мПериодичность           = Параметры.мПериодичность;
	СтруктураРеквизитовФормы.мСкопированаФорма        = Параметры.мСкопированаФорма;
	СтруктураРеквизитовФормы.мСохраненныйДок          = Параметры.мСохраненныйДок;
	СтруктураРеквизитовФормы.Организация              = Параметры.Организация;
	СтруктураРеквизитовФормы.ДоступенМеханизмПечатиРеглОтчетностиСДвухмернымШтрихкодомPDF417 = Параметры.ДоступенМеханизмПечатиРеглОтчетностиСДвухмернымШтрихкодомPDF417;
	СтруктураРеквизитовФормы.СформироватьФормуОтчетаАвтоматически = Параметры.СформироватьФормуОтчетаАвтоматически;
	
	ДатаПодписи = ТекущаяДатаСеанса();
	
	ПорядкиОкругленияОтчетности = Новый Структура;
	ПорядкиОкругленияОтчетности.Вставить("ПеречислениеПорядкиОкругленияОтчетностиОкр1",       Перечисления.ПорядкиОкругленияОтчетности.Окр1);
	ПорядкиОкругленияОтчетности.Вставить("ПеречислениеПорядкиОкругленияОтчетностиОкр1000",    Перечисления.ПорядкиОкругленияОтчетности.Окр1000);
	ПорядкиОкругленияОтчетности.Вставить("ПеречислениеПорядкиОкругленияОтчетностиОкр1000000", Перечисления.ПорядкиОкругленияОтчетности.Окр1000000);
	
	СтруктураРеквизитовФормы.СправочникиВидыКонтактнойИнформацииФактАдресОрганизации = Справочники.ВидыКонтактнойИнформации.ФактАдресОрганизации;
	
	//ПроверкаКонтрагентовБРО
	ПроверкаКонтрагентовБРО.ПриСозданииНаСервере(ЭтотОбъект);
	//Конец ПроверкаКонтрагентовБРО
	
	Инициализация(Параметры.БезОткрытияФормы);
	
КонецПроцедуры

&НаСервере
Процедура ИнициализацияМногостраничныхРазделов()
	
	СтрПерваяСтраница = ЭтаФорма.ТаблицаСтраницыРаздела2.Добавить();
	СтрПерваяСтраница.Представление               = "Новая страница";
	СтрПерваяСтраница.АктивнаяСтраница            = Истина;
	СтрПерваяСтраница.АвтоматическоеПредставление = Истина;
	
	СтрПерваяСтраница = ЭтаФорма.ТаблицаСтраницыРаздела3_Прил1.Добавить();
	СтрПерваяСтраница.Представление               = "Новая страница";
	СтрПерваяСтраница.АктивнаяСтраница            = Истина;
	СтрПерваяСтраница.АвтоматическоеПредставление = Истина;
	
	СтрПерваяСтраница = ЭтаФорма.ТаблицаСтраницыРаздела5.Добавить();
	СтрПерваяСтраница.Представление               = "Новая страница";
	СтрПерваяСтраница.АктивнаяСтраница            = Истина;
	СтрПерваяСтраница.АвтоматическоеПредставление = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтруктуруЗависимыхЯчеекДляАвторасчета()
	
	СтруктураЗависимыхЯчеекДляАвторасчета = Новый Структура;
	
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100004003", "ПоМесту;П000100001003;П000300001003;П000300002003;П000300003003;П000300004003;П000300004103;П000300004203;П000300004503;П000300004603;П000300005005;П000300006003;П000300007005;П000300008005;П000300010505;П000300010905;П000300011005;П000300011505;П000300012003;П000300013003;П000300013503;П000300014003;П000300015003;П000300016003;П000300017003;П000300018003;П000300018503;П000400012003;П000400013003;П0004М1003003;П0004М1004003;П0004М1005003;П0004М2008003;П000500008003;П000500009003;П000500005003;П000500007003;П000600016003;П000600017003;П000600005003;П0006М2010003;П0006М3013003;П000600006003;П0006М2009003;П0006М3015003;П0006М1003003;П0006М1004003");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100005003", "ПоМесту;П000100001003;П000300001003;П000300002003;П000300003003;П000300004003;П000300004103;П000300004203;П000300004503;П000300004603;П000300005005;П000300006003;П000300007005;П000300008005;П000300010505;П000300010905;П000300011005;П000300011505;П000300012003;П000300013003;П000300013503;П000300014003;П000300015003;П000300016003;П000300017003;П000300018003;П000300018503;П000400012003;П000400013003;П0004М1003003;П0004М1004003;П0004М1005003;П0004М2008003;П000500008003;П000500009003;П000500005003;П000500007003;П000600016003;П000600017003;П000600005003;П0006М2010003;П0006М3013003;П000600006003;П0006М2009003;П0006М3015003;П0006М1003003;П0006М1004003");
	
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000200006003", "П000200008003;П000200009003;П000200010003");
	
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000300001005", "П000300001003");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000300002005", "П000300002003");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000300003005", "П000300003003");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000300004005", "П000300004003");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000300004105", "П000300004103");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000300004205", "П000300004203");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000300004505", "П000300004503");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000300004605", "П000300004603");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000300006005", "П000300006003");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000300011805", "П000300001003;П000300002003;П000300003003;П000300004003;П000300004103;П000300004203;П000300004503;П000300004603;П000300005005;П000300006003;П000300007005;П000300008005;П000300010505;П000300010905;П000300011005;П000300011505");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000300019003", "П000300012003;П000300013003;П000300013503;П000300014003;П000300015003;П000300016003;П000300017003;П000300018003;П000300018503");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000300020003", "П000300001003;П000300002003;П000300003003;П000300004003;П000300004103;П000300004203;П000300004503;П000300004603;П000300005005;П000300006003;П000300007005;П000300008005;П000300010505;П000300010905;П000300011005;П000300011505;П000300012003;П000300013003;П000300013503;П000300014003;П000300015003;П000300016003;П000300017003;П000300018003;П000300018503");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000300021003", "П000300001003;П000300002003;П000300003003;П000300004003;П000300004103;П000300004203;П000300004503;П000300004603;П000300005005;П000300006003;П000300007005;П000300008005;П000300010505;П000300010905;П000300011005;П000300011505;П000300012003;П000300013003;П000300013503;П000300014003;П000300015003;П000300016003;П000300017003;П000300018003;П000300018503");
	
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000310007004", "П000310006001;П000310007003");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000310008004", "П000310007004;П000310006001;П000310007003");
	
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000320000202", "П000320000102");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000320000203", "П000320000103");
	
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000400012003", "П0004М1003003;П0004М1004003;П0004М1005003;П0004М2008003");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000400013003", "П0004М1003003;П0004М1004003;П0004М1005003;П0004М2008003");
	
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000500008003", "П000500005003");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000500009003", "П000500007003");
	
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000600005003", "П0006М1003003");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000600006003", "П0006М1004003");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000600016003", "П000600005003;П0006М2010003;П0006М3013003;П000600006003;П0006М2009003;П0006М3015003;П0006М1003003;П0006М1004003");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000600017003", "П000600005003;П0006М2010003;П0006М3013003;П000600006003;П0006М2009003;П0006М3015003;П0006М1003003;П0006М1004003");
	
КонецПроцедуры

&НаСервере
Процедура Инициализация(БезОткрытияФормы = Ложь) Экспорт
	
	Перем ИсходноеКоличествоСтрокГруппы;
	
	СтруктураРеквизитовФормы.мБезОткрытияФормы = БезОткрытияФормы;
	
	ОбъектОтчета = ОбъектОтчета(ЭтаФорма.ИмяФормы);
	
	ТаблицаСоставПоказателей = ДанныеФормыВЗначение(мТаблицаСоставПоказателей, Тип("ТаблицаЗначений"));
	
	ОбъектОтчета.СформироватьВариантыЗаполнения(СтруктураРеквизитовФормы.мВыбраннаяФорма,
												СтруктураРеквизитовФормы,
												мСтруктураВариантыЗаполнения,
												ТаблицаСоставПоказателей);
	
	ЗначениеВДанныеФормы(ТаблицаСоставПоказателей, мТаблицаСоставПоказателей);
	
	Для Каждого ВариантЗаполнения Из мСтруктураВариантыЗаполнения Цикл

		ЭтаФорма["ТаблицаВариантыЗаполнения" + ВариантЗаполнения.Ключ].Добавить();
		
		ЗначениеВДанныеФормы(ВариантЗаполнения.Значение[0],
		ЭтаФорма["ТаблицаВариантыЗаполнения" + ВариантЗаполнения.Ключ][0].ТаблицаВариантовЗаполнения);
		
		мСтруктураВариантыЗаполнения.Вставить(ВариантЗаполнения.Ключ, ВариантЗаполнения.Ключ);
		
		мСтруктураВариантыЗаполненияЭталон.Вставить(ВариантЗаполнения.Ключ, ВариантЗаполнения.Ключ);
		
	КонецЦикла;
	
	ЗаполнитьСтруктуруЗависимыхЯчеекДляАвторасчета();
	
	ЗначениеВДанныеФормы(ОбъектОтчета.СтруктураСтраницОтчета(
	СтруктураРеквизитовФормы.мВыбраннаяФорма), ЭтаФорма["мДеревоСтраницОтчета"]);
	
	ФормироватьСтруктуруСвойствСтраниц();
	
	СформироватьДеревоРазделовОтчетаНаСервере();
	
	ТабличныйДокумент.Области.НомерКорректировки.Значение = 0;
	СтруктураРеквизитовФормы.ВидДокумента = 0;
	
	СтруктураРеквизитовФормы.мАвтоВыборКодов = Ложь;
	СтруктураРеквизитовФормы.мРежимПечати = Ложь;
	
	СтруктураРеквизитовФормы.ДатаНачалаАвтозаполнения = СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета;
	
	Элементы.ФормаНастроитьПериодЗаполнения.Видимость = Ложь;
	
	СтруктураРеквизитовФормы.ОтчетСформированОбработкойКонсолидацияОтчетностиПоНДС
	= РегламентированнаяОтчетностьВызовСервера.ОтчетСформированОбработкойКонсолидацияОтчетностиПоНДС(
	СтруктураРеквизитовФормы.мСохраненныйДок);
	
	Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
		
		НачальныеОперацииСМногострочнымиБлоками();
		
		Если СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено Тогда
			
			ВосстановитьСохраненныеДанные();
			
			СтруктураРеквизитовФормы.ДатаНачалаАвтозаполнения = СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета;
			
		Иначе
			
			Если НЕ СтруктураРеквизитовФормы.мБезОткрытияФормы Тогда
				// Для нового док-та установим возведенный флаг проверки соотношений.
				СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки = Ложь;
			КонецЕсли;
			
			СтруктураРеквизитовФормы.ЕдиницаИзмерения         = Перечисления.ПорядкиОкругленияОтчетности.Окр1;
			СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = 0;
			КопироватьДанныеФормы(мДеревоСтраницОтчета, мДеревоВыбранныхСтраниц);
			ЗаполнитьЗначенияПолейПоУмолчанию();
			
		КонецЕсли;
		
		ЗаполнитьДатуПодписи(ЭтаФорма);
		
		Модифицированность = Истина;
		
	Иначе
		
		ВосстановитьСохраненныеДанные();
		
		Если ЗначениеЗаполнено(СтруктураРеквизитовФормы.мСкопированаФорма) Тогда
			
			СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено;
			Модифицированность = Истина;
			СтруктураРеквизитовФормы.ДатаНачалаАвтозаполнения = СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета;
			
		КонецЕсли;
		
		Если НЕ БезОткрытияФормы
		   И НЕ СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
			
			ЗаблокироватьДанныеДляРедактирования(СтруктураРеквизитовФормы.мСохраненныйДок, , ЭтаФорма.УникальныйИдентификатор);
			
		КонецЕсли;
		
	КонецЕсли;
	
	ПолучитьСведенияОПоказателяхОтчета();
	
	Если СтруктураРеквизитовФормы.ОтчетСформированОбработкойКонсолидацияОтчетностиПоНДС Тогда
		
		СтруктураРеквизитовФормы.ОтображатьКнопкуЗаполнить    = Ложь;
		СтруктураРеквизитовФормы.ОтображатьКнопкуРасшифровать = Ложь;
		
	КонецЕсли;
	
	Если НЕ СтруктураРеквизитовФормы.ОтображатьКнопкуЗаполнить Тогда
		Элементы.Заполнить.Видимость = Ложь;
	КонецЕсли;
	
	Если НЕ СтруктураРеквизитовФормы.ОтображатьКнопкуРасшифровать Тогда
		Элементы.Расшифровать.Видимость = Ложь;
		СтруктураРеквизитовФормы.мСохранятьРасшифровку = Ложь;
		Элементы.ТабличныйДокументКонтекстноеМенюРасшифровать.Видимость = Ложь;
	КонецЕсли;
	
	ОбъектОтчета.ПоказатьПериод(
	СтруктураРеквизитовФормы.мВыбраннаяФорма, ТабличныйДокумент, СтруктураРеквизитовФормы);
	
	СтруктураРеквизитовФормы.ИП
	= НЕ РегламентированнаяОтчетностьВызовСервера.ЭтоЮридическоеЛицо(СтруктураРеквизитовФормы.Организация);
	
	ЗаполнитьПустыеСтруктурыДанных();
	
	Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено
	 ИЛИ ЗначениеЗаполнено(СтруктураРеквизитовФормы.мСкопированаФорма)
	 ИЛИ СтруктураРеквизитовФормы.СформироватьФормуОтчетаАвтоматически Тогда
	 
		ЗаполнитьСведенияОбОрганизацииНаСервере();
		
	Иначе
		
		РегламентированнаяОтчетность.ПолучитьЗначениеОКВЭД(ДатаПодписи, СтруктураРеквизитовФормы);
		
	КонецЕсли;
	
	Если НЕ БезОткрытияФормы Тогда
		СформироватьСпискиВыбора();
		РегламентированнаяОтчетностьКлиентСервер.ПоказатьКнопкиПечати(ЭтаФорма);
		УстановитьДоступностьОбластей(ЭтаФорма, "Титульный");
	КонецЕсли;
	
	СтруктураРеквизитовФормы.НаимОрганизации = СтруктураРеквизитовФормы.Организация.Наименование;
	СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
	
	РегламентированнаяОтчетность.ДобавитьКнопкуПрисоединенныеФайлы(ЭтаФорма);
	
	РегламентированнаяОтчетностьКлиентСервер.ПриИнициализацииФормыРегламентированногоОтчета(ЭтаФорма);
	
	СтруктураРеквизитовФормы.ПодключенДокументооборотСКонтролирующимОрганом
	= ИнтерфейсыВзаимодействияБРО.ПодключенДокументооборотСКонтролирующимОрганом(СтруктураРеквизитовФормы.Организация);
	
	Если СтруктураРеквизитовФормы.СформироватьФормуОтчетаАвтоматически Тогда
		
		ЗначениеТаймера = ЗначениеТаймера();
		
		СтруктураРеквизитовФормы.Вставить("УспешноеАвтозаполнение", Ложь);
		
		Если НЕ ЗначениеЗаполнено(СтруктураДанныхТитульный.НомерКорректировки) Тогда
			ЗначениеКорректировки = 0;
		Иначе
			ТипЧисло = Новый ОписаниеТипов("Число");
			ЗначениеКорректировки = ТипЧисло.ПривестиЗначение(СтруктураДанныхТитульный.НомерКорректировки);
		КонецЕсли;
		
		КодИФНС = СтруктураДанныхТитульный.КодИМНС;
		КПП = СтруктураДанныхТитульный.КПП1;
		Вариант = СтруктураРеквизитовФормы.ВидДокумента * ЗначениеКорректировки;
		НаименованиеТекущегоРаздела = СтруктураРеквизитовФормы.НаимТекущегоРаздела;
		
		Сохранить( , КодИФНС, КПП, Вариант, , НаименованиеТекущегоРаздела);
		
		ЗаполнитьАвтоНаСервере();
		
		ЗаписатьЗамер(ЗначениеТаймера);
		
		Если Элементы.Расшифровать.Видимость Тогда
			Элементы.Расшифровать.Доступность = Истина;
			Элементы.ТабличныйДокументКонтекстноеМенюРасшифровать.Доступность = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	СтруктураРеквизитовФормы.АвтоЗаполнениеРеглОтчетаДоступно = АвтоЗаполнениеРеглОтчетаДоступно();
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьСведенияОПоказателяхОтчета()
	
	СтруктураРеквизитовФормы.Вставить("АвтозаполняемыеПоказатели", Новый Структура);
	
	Форма_ИмяФормы = СтрЗаменить(ЭтаФорма.ИмяФормы, "Внешний", "");
	
	АвтозаполняемыеПоказатели
		= РегламентированнаяОтчетностьПереопределяемый.ПолучитьСведенияОПоказателяхОтчета(
		Сред(Лев(Форма_ИмяФормы, СтрНайти(Форма_ИмяФормы, ".Форма.") - 1), 7),
		Сред(Форма_ИмяФормы, СтрНайти(Форма_ИмяФормы, ".Форма.") + 7));
	
	Если АвтозаполняемыеПоказатели.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого Показатель Из АвтозаполняемыеПоказатели Цикл
		
		Если Показатель.Значение[0] Тогда
			СтруктураРеквизитовФормы.ОтображатьКнопкуЗаполнить = Истина;
			Если СтруктураРеквизитовФормы.ОтображатьКнопкуРасшифровать Тогда
				Прервать;
			КонецЕсли;
		КонецЕсли;
		
		Если Показатель.Значение[1] Тогда
			СтруктураРеквизитовФормы.ОтображатьКнопкуРасшифровать = Истина;
			Если СтруктураРеквизитовФормы.ОтображатьКнопкуЗаполнить Тогда
				Прервать;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	СтруктураРеквизитовФормы.Вставить("АвтозаполняемыеПоказатели", АвтозаполняемыеПоказатели);
	
	РегламентированнаяОтчетность.ОбновитьТаблицыВариантовЗаполнения(ЭтаФорма, АвтозаполняемыеПоказатели);
	
КонецПроцедуры

&НаСервере
Процедура НачальныеОперацииСМногострочнымиБлоками()
	Перем ИсходноеКоличествоСтрокГруппы;
	
	Для Каждого ЭлементСтруктуры Из мСтруктураМногострочныхРазделов Цикл
		ИмяГруппы = ЭлементСтруктуры.Ключ;
		СтруктураГруппы = ЭтаФорма[ЭлементСтруктуры.Значение];
		
		мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);
		
		Для НСтр = 1 По ИсходноеКоличествоСтрокГруппы Цикл
			
			СтруктураГруппы.Добавить();
			
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьСпискиВыбора()
	
	МакетСоставаПоказателей = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет("Списки2019Кв1");
	
	КПП = СокрЛП(ТабличныйДокумент.Области["КПП1"].Значение);
	Если ЗначениеЗаполнено(КПП) Тогда
		Символы56КПП = Сред(КПП, 5, 2);
	Иначе
		Символы56КПП = "";
	КонецЕсли;
	
	КоллекцияСписковВыбора = Новый Соответствие;
	Для Каждого Область Из МакетСоставаПоказателей.Области Цикл
		Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Строки Тогда
			ВерхОбласти = Область.Верх;
			НизОбласти = Область.Низ;
			ТаблСписка = Новый ТаблицаЗначений;
			ТаблСписка.Колонки.Добавить("Код",,, МакетСоставаПоказателей.Область(ВерхОбласти, 1, ВерхОбласти, 1).ШиринаКолонки);
			ТаблСписка.Колонки.Добавить("Название",,, МакетСоставаПоказателей.Область(ВерхОбласти, 2, ВерхОбласти, 2).ШиринаКолонки);
			ТаблСписка.Колонки.Добавить("РезультатПроверки",,, 0);
			Для НомСтр = ВерхОбласти По НизОбласти Цикл
				КодПоказателя = СокрП(МакетСоставаПоказателей.Область(НомСтр, 1).Текст);
				Если КодПоказателя <> "###" Тогда
					
					Если Область.Имя = "КодыПоМестуНахождения" Тогда
						
						Если СтруктураРеквизитовФормы.ИП Тогда
							
							Если НЕ (КодПоказателя = "" ИЛИ КодПоказателя = "116" ИЛИ КодПоказателя = "231") Тогда
								Продолжить;
							КонецЕсли;
							
						Иначе
							
							Если КодПоказателя = "116" Тогда
								Продолжить;
							ИначеЕсли ЗначениеЗаполнено(Символы56КПП) Тогда
								Если КодПоказателя = "213" Тогда
									Если НЕ (Символы56КПП = "50") Тогда
										Продолжить;
									КонецЕсли;
								ИначеЕсли КодПоказателя = "227" Тогда
									Если НЕ (Символы56КПП = "4T" ИЛИ Символы56КПП = "5G") Тогда
										Продолжить;
									КонецЕсли;
								ИначеЕсли КодПоказателя = "250" Тогда
									Если НЕ (Символы56КПП = "36" ИЛИ Символы56КПП = "76" ИЛИ Символы56КПП = "51") Тогда
										Продолжить;
									КонецЕсли;
								ИначеЕсли КодПоказателя = "214" ИЛИ КодПоказателя = "215" ИЛИ КодПоказателя = "216"
									ИЛИ КодПоказателя = "231" ИЛИ КодПоказателя = "331" Тогда
									Если Символы56КПП = "36" ИЛИ Символы56КПП = "76"
										ИЛИ Символы56КПП = "4T" ИЛИ Символы56КПП = "5G" Тогда
										Продолжить;
									КонецЕсли;
								КонецЕсли;
							КонецЕсли;
							
						КонецЕсли;
						
					КонецЕсли;
					
					НовСтрока = ТаблСписка.Добавить();
					НовСтрока.Код = КодПоказателя;
					НовСтрока.Название = СокрП(МакетСоставаПоказателей.Область(НомСтр, 2).Текст);
					НовСтрока.РезультатПроверки = СокрП(МакетСоставаПоказателей.Область(НомСтр, 3).Текст);
					
				КонецЕсли;
			КонецЦикла;
			КоллекцияСписковВыбора.Вставить(Область.Имя, ТаблСписка);
		КонецЕсли;
	КонецЦикла;
	
	СвойстваПоказателей.Очистить();
	
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "Период", 2, , "Выбор кода периода", КоллекцияСписковВыбора["КодыНалоговыхПериодов"]);
	
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "ПоМесту", 3, , "Выбор места представления", КоллекцияСписковВыбора["КодыПоМестуНахождения"]);
	
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "КодФормыРеорганизации", 1, , "Выбор кода формы реорганизации, ликвидации", КоллекцияСписковВыбора["КодыФормыРеорганизации"]);
	
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000500002003", 2, , "Выбор кода периода", КоллекцияСписковВыбора["КодыНалоговыхПериодов_Раздел5"]);
	
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000100001003", 11, "ОКТМО");
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000200005003", 11, "ОКТМО");
	
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000100002003", 20, , "Выбор КБК", КоллекцияСписковВыбора["КодыБюджетнойКлассификации_Раздел1"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000200004003", 20, , "Выбор КБК", КоллекцияСписковВыбора["КодыБюджетнойКлассификации_Раздел2"]);
	
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000200007003", 7, , "Выбор кода операции", КоллекцияСписковВыбора["КодыОпераций_Раздел2"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000310002001", 7, , "Выбор кода операции", КоллекцияСписковВыбора["КодыОпераций_Раздел3_Прил1"]);
	
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П0004М1001003", 7, , "Выбор кода операции", КоллекцияСписковВыбора["КодыОпераций_Раздел4"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П0004М2006003", 7, , "Выбор кода операции", КоллекцияСписковВыбора["КодыОпераций_Раздел4"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П0004М3009003", 7, , "Выбор кода операции", КоллекцияСписковВыбора["КодыОпераций_Раздел4"]);
	
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000500003003", 7, , "Выбор кода операции", КоллекцияСписковВыбора["КодыОпераций_Раздел5"]);
	
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П0006М1001003", 7, , "Выбор кода операции", КоллекцияСписковВыбора["КодыОпераций_Раздел6"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П0006М2007003", 7, , "Выбор кода операции", КоллекцияСписковВыбора["КодыОпераций_Раздел6"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П0006М3011003", 7, , "Выбор кода операции", КоллекцияСписковВыбора["КодыОпераций_Раздел6"]);
	
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000700000101", 7, , "Выбор кода операции", КоллекцияСписковВыбора["КодыОпераций_Раздел7"]);
	
КонецПроцедуры

&НаСервере
Процедура ФормироватьСтруктуруСвойствСтраниц() Экспорт
	
	мСвойстваРазделовДекларации.ПолучитьЭлементы().Очистить();
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	
	СтрокаУровня1.ИмяСтраницы                          = "Титульный";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.МаксКолвоЭкз                         = 0;
	СтрокаУровня1.ОчищатьРаздел                        = Ложь;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "Раздел1";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.МаксКолвоЭкз                         = 0;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "Раздел2";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Истина;
	СтрокаУровня1.МаксКолвоЭкз                         = 0;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "Раздел3";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.МаксКолвоЭкз                         = 0;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Истина;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "Раздел3_Прил1";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Истина;
	СтрокаУровня1.МногостраничностьВРазделе            = Истина;
	СтрокаУровня1.МаксКолвоЭкз                         = 0;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	
	НовСтр = СтрокаУровня1.МногострочностьВРазделе.Добавить();
	НовСтр.ИдГруппы = СтруктураРеквизитовФормы.мИдГруппы31;
	НовСтр.Область = "МногострочнаяЧасть";
	НовСтр.ВысотаСтроки = 2;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "Раздел3_Прил2";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Истина;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.МаксКолвоЭкз                         = 0;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	
	НовСтр = СтрокаУровня1.МногострочностьВРазделе.Добавить();
	НовСтр.ИдГруппы = СтруктураРеквизитовФормы.мИдГруппы32;
	НовСтр.Область = "МногострочнаяЧасть";
	НовСтр.ВысотаСтроки = 2;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "Раздел4";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Истина;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.МаксКолвоЭкз                         = 0;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	
	НовСтр = СтрокаУровня1.МногострочностьВРазделе.Добавить();
	НовСтр.ИдГруппы = СтруктураРеквизитовФормы.мИдГруппы4М1;
	НовСтр.Область = "МногострочнаяЧасть4М1";
	НовСтр.ВысотаСтроки = 10;
	
	НовСтр = СтрокаУровня1.МногострочностьВРазделе.Добавить();
	НовСтр.ИдГруппы = СтруктураРеквизитовФормы.мИдГруппы4М2;
	НовСтр.Область = "МногострочнаяЧасть4М2";
	НовСтр.ВысотаСтроки = 6;
	
	НовСтр = СтрокаУровня1.МногострочностьВРазделе.Добавить();
	НовСтр.ИдГруппы = СтруктураРеквизитовФормы.мИдГруппы4М3;
	НовСтр.Область = "МногострочнаяЧасть4М3";
	НовСтр.ВысотаСтроки = 6;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "Раздел5";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Истина;
	СтрокаУровня1.МногостраничностьВРазделе            = Истина;
	СтрокаУровня1.МаксКолвоЭкз                         = 0;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	
	НовСтр = СтрокаУровня1.МногострочностьВРазделе.Добавить();
	НовСтр.ИдГруппы = СтруктураРеквизитовФормы.мИдГруппы5;
	НовСтр.Область = "МногострочнаяЧасть";
	НовСтр.ВысотаСтроки = 10;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "Раздел6";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Истина;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.МаксКолвоЭкз                         = 0;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;

	НовСтр = СтрокаУровня1.МногострочностьВРазделе.Добавить();
	НовСтр.ИдГруппы = СтруктураРеквизитовФормы.мИдГруппы6М1;
	НовСтр.Область = "МногострочнаяЧасть6М1";
	НовСтр.ВысотаСтроки = 8;
	
	НовСтр = СтрокаУровня1.МногострочностьВРазделе.Добавить();
	НовСтр.ИдГруппы = СтруктураРеквизитовФормы.мИдГруппы6М2;
	НовСтр.Область = "МногострочнаяЧасть6М2";
	НовСтр.ВысотаСтроки = 8;
	
	НовСтр = СтрокаУровня1.МногострочностьВРазделе.Добавить();
	НовСтр.ИдГруппы = СтруктураРеквизитовФормы.мИдГруппы6М3;
	НовСтр.Область = "МногострочнаяЧасть6М3";
	НовСтр.ВысотаСтроки = 10;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "Раздел7";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Истина;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.МаксКолвоЭкз                         = 0;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	
	НовСтр = СтрокаУровня1.МногострочностьВРазделе.Добавить();
	НовСтр.ИдГруппы = СтруктураРеквизитовФормы.мИдГруппы7;
	НовСтр.Область = "МногострочнаяЧасть";
	НовСтр.ВысотаСтроки = 2;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "Раздел8";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.МаксКолвоЭкз                         = 0;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "Раздел8_Прил1";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.МаксКолвоЭкз                         = 0;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "Раздел9";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.МаксКолвоЭкз                         = 0;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "Раздел9_Прил1";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.МаксКолвоЭкз                         = 0;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "Раздел10";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.МаксКолвоЭкз                         = 0;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "Раздел11";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.МаксКолвоЭкз                         = 0;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "Раздел12";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.МаксКолвоЭкз                         = 0;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьДеревоРазделовОтчетаНаСервере() Экспорт
	
	СформироватьДеревоРазделовОтчета(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьДеревоРазделовОтчетаНаКлиенте() Экспорт
	
	СформироватьДеревоРазделовОтчета(ЭтаФорма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СформироватьДеревоРазделовОтчета(Форма)
	
	Форма["РазделыОтчета"].ПолучитьЭлементы().Очистить();
	
	Для Каждого ЭлементДереваСтраницОтчета Из Форма["мДеревоСтраницОтчета"].ПолучитьЭлементы() Цикл
		
		Если ЭлементДереваСтраницОтчета.ПоказатьСтраницу = 1 Тогда
			
			ЭлементРазделовОтчета = Форма["РазделыОтчета"].ПолучитьЭлементы().Добавить();
			ЭлементРазделовОтчета.КолонкаРазделыОтчета = ЭлементДереваСтраницОтчета.Представление;
			ЭлементРазделовОтчета.КолонкаРазделыОтчетаСокрНаим = ЭлементДереваСтраницОтчета.ИмяСтраницы;
			ЭлементРазделовОтчета.ИндексКартинки               = 1;
			ЭлементРазделовОтчета.РазделМногостраничный        = Ложь;
			ЭлементРазделовОтчета.РазделМногострочный          = Ложь;
			
			НайденноеЗначение = Неопределено;
			
			Если Форма["мСтруктураМногостраничныхРазделов"].Свойство(ЭлементРазделовОтчета.КолонкаРазделыОтчетаСокрНаим, НайденноеЗначение) Тогда
				
				Если НЕ НайденноеЗначение = Неопределено Тогда
					
					НайденноеЗначение = Форма[НайденноеЗначение];
					
					ЭлементРазделовОтчета.ИндексКартинки        = 0;
					ЭлементРазделовОтчета.РазделМногостраничный = Истина;
					
					Для НомерСтраницы = 1 По НайденноеЗначение.Количество() Цикл
						СтраницаРазделаОтчета = ЭлементРазделовОтчета.ПолучитьЭлементы().Добавить();
						СтраницаРазделаОтчета.КолонкаРазделыОтчета              = "Стр. " + НомерСтраницы;
						СтраницаРазделаОтчета.КолонкаРазделыОтчетаСокрНаим      = ЭлементРазделовОтчета.КолонкаРазделыОтчетаСокрНаим;
						СтраницаРазделаОтчета.КолонкаНомерСтраницыРазделаОтчета = НомерСтраницы;
						СтраницаРазделаОтчета.ИндексКартинки                    = 1;
						СтраницаРазделаОтчета.РазделМногостраничный             = ЭлементРазделовОтчета.РазделМногостраничный;
						СтраницаРазделаОтчета.РазделМногострочный               = ЭлементРазделовОтчета.РазделМногострочный;
					КонецЦикла;
					
				КонецЕсли;
				
			ИначеЕсли ЭтоРазделРегистраУчетаНДС(ЭлементРазделовОтчета.КолонкаРазделыОтчетаСокрНаим) Тогда
				СтраницыРаздела = Форма["Страницы" + ЭлементРазделовОтчета.КолонкаРазделыОтчетаСокрНаим];
				
				Если СтраницыРаздела.Количество() > 0 Тогда
					ЭлементРазделовОтчета.ИндексКартинки        = 0;
					ЭлементРазделовОтчета.РазделМногостраничный = Истина;
					
					НомерСтраницы = 1;
					Для Каждого СтраницаРаздела Из СтраницыРаздела Цикл
						СтраницаРазделаОтчета = ЭлементРазделовОтчета.ПолучитьЭлементы().Добавить();
						СтраницаРазделаОтчета.КолонкаРазделыОтчета              = СтраницаРаздела.Представление;
						СтраницаРазделаОтчета.КолонкаРазделыОтчетаСокрНаим      = ЭлементРазделовОтчета.КолонкаРазделыОтчетаСокрНаим;
						СтраницаРазделаОтчета.КолонкаНомерСтраницыРазделаОтчета = НомерСтраницы;
						СтраницаРазделаОтчета.ИндексКартинки                    = 1;
						СтраницаРазделаОтчета.РазделМногостраничный             = ЭлементРазделовОтчета.РазделМногостраничный;
						СтраницаРазделаОтчета.РазделМногострочный               = ЭлементРазделовОтчета.РазделМногострочный;
						НомерСтраницы = НомерСтраницы + 1;
					КонецЦикла;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура РазделыОтчетаПриАктивизацииСтроки(Элемент) Экспорт
	
	Если Элемент.ТекущиеДанные = Неопределено
	 ИЛИ Элемент.ТекущаяСтрока = СтруктураРеквизитовФормы.ТекущаяСтрокаРазделовОтчета Тогда
		Возврат;
	КонецЕсли;
	
	ЭтоЗаголовокРаздела = (Элемент.ТекущиеДанные.ПолучитьРодителя() = Неопределено);
	
	КМенюРО = Элементы.РазделыОтчета.КонтекстноеМеню;
	КМенюТД = Элементы.ТабличныйДокументКонтекстноеМеню;
	
	СтруктураРеквизитовФормы.ТекущаяСтрокаРазделовОтчета = Элемент.ТекущаяСтрока;
	
	ЭтоРазделРегистраУчетаНДС = ЭтоРазделРегистраУчетаНДС(Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
	
	Элементы.ОчиститьТекущийРаздел.Видимость   = ЭтоРазделРегистраУчетаНДС;
	Элементы.ОчиститьТекущуюСтраницу.Видимость = НЕ ЭтоРазделРегистраУчетаНДС;
	
	ЭтоЦентральныйУзелМногостраничногоРаздела = ЭтоЗаголовокРаздела И Элемент.ТекущиеДанные.РазделМногостраничный;
	Элементы.ОчиститьТекущуюСтраницу.Доступность = НЕ ЭтоЦентральныйУзелМногостраничногоРаздела;
	
	Если СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере Тогда
		Если Элемент.ТекущиеДанные.РазделМногостраничный Тогда
			Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета
			= ?(Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета = Неопределено
			ИЛИ Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета = 0, 1, Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета);
		КонецЕсли;
		ВывестиМакетСтраницыВТабличныйДокументНаСервере(Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим,
		Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета, ЭтоЗаголовокРаздела);
	Иначе
		СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Истина;
	КонецЕсли;
	
	ТабличныйДокумент.ФиксацияСверху = 0;
	
	Если Элемент.ТекущиеДанные.РазделМногостраничный И НЕ ЭтоРазделРегистраУчетаНДС Тогда
		Элемент.Развернуть(Элемент.ТекущаяСтрока);
		КМенюРО.Видимость = Истина;
		КМенюТД.Видимость = Ложь;
		Если НЕ Элемент.ТекущиеДанные.ПолучитьРодителя() = Неопределено
		   И Элемент.ТекущиеДанные.ПолучитьРодителя().ПолучитьЭлементы().Количество() > 1 Тогда
			Элементы.РазделыОтчета.КонтекстноеМеню.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюКнопкаУдалитьСтраницу.Видимость = Истина;
			Элементы.РазделыОтчета.КонтекстноеМеню.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюКнопкаДобавитьСтраницу.Видимость = Истина;
		Иначе
			Элементы.РазделыОтчета.КонтекстноеМеню.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюКнопкаУдалитьСтраницу.Видимость = Ложь;
			Элементы.РазделыОтчета.КонтекстноеМеню.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюКнопкаДобавитьСтраницу.Видимость = Истина;
		КонецЕсли;
	Иначе
		КМенюРО.Видимость = Ложь;
		КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюКнопкаУдалитьСтраницу.Видимость = Ложь;
		КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюКнопкаДобавитьСтраницу.Видимость = Ложь;
	КонецЕсли;
	
	Если Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Раздел7"
		ИЛИ Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Раздел3_Прил2"
		ИЛИ Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Раздел4"
		ИЛИ Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Раздел5"
		ИЛИ Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Раздел6" Тогда
		КМенюРО.Видимость = Ложь;
		КМенюТД.Видимость = Истина;
		КМенюТД.ПодчиненныеЭлементы.ТабличныйДокументКонтекстноеМенюГруппаСтроки.Видимость = Истина;
	Иначе
		КМенюРО.Видимость = Ложь;
		КМенюТД.Видимость = Ложь;
		КМенюТД.ПодчиненныеЭлементы.ТабличныйДокументКонтекстноеМенюГруппаСтроки.Видимость = Ложь;
	КонецЕсли;
	
	Элементы.Обновить.Доступность = ?(Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Титульный", Истина, Ложь);
	Элементы.ТабличныйДокумент.ТекущаяОбласть = ТабличныйДокумент.Область(1, 1);
	
КонецПроцедуры

&НаСервере
Процедура ВывестиМакетСтраницыВТабличныйДокументНаСервере(ИмяТекРаздела, НомерСтраницыРазделаОтчета, ЗаголовокРаздела = Ложь)
	
	СохранитьДанныеРаздела(СтруктураРеквизитовФормы.НаимТекущегоРаздела, Истина);
	
	ВывестиМакетВТаблДокНаСервере(ИмяТекРаздела, НомерСтраницыРазделаОтчета, ЗаголовокРаздела);
	
	СтруктураРеквизитовФормы.НаимТекущегоРаздела  = ИмяТекРаздела;
	СтруктураРеквизитовФормы.НомерТекущейСтраницы = НомерСтраницыРазделаОтчета;
	
	Если ИмяТекРаздела = "Раздел2"
		ИЛИ ИмяТекРаздела = "Раздел7" Тогда
		ИзменитьЦветЯчеекНаСервере(ИмяТекРаздела);
	КонецЕсли;
	
	УстановитьДоступностьОбластей(ЭтаФорма, СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
КонецПроцедуры

&НаСервере
Процедура СохранитьДанныеРаздела(НаимРаздела, ОчищатьРазделЕслиЕстьМногострочность, ИзменятьАктивнуюСтраницу = Истина) Экспорт
	
	Если НаимРаздела = "Раздел8"
		ИЛИ НаимРаздела = "Раздел8_Прил1"
		ИЛИ НаимРаздела = "Раздел9"
		ИЛИ НаимРаздела = "Раздел9_Прил1"
		ИЛИ НаимРаздела = "Раздел10"
		ИЛИ НаимРаздела = "Раздел11"
		ИЛИ НаимРаздела = "Раздел12" Тогда
		
		// Сбор данных по разделу не требуется.
		
	// Многостраничные разделы.
	//
	ИначеЕсли НаимРаздела = "Раздел2"
		ИЛИ НаимРаздела = "Раздел3_Прил1" Тогда
		
		СтруктураДанных = Новый Структура;
		
		Для Каждого Область Из ТабличныйДокумент.Области Цикл
			
			Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник
			   И Область.СодержитЗначение Тогда
				СтруктураДанных.Вставить(Область.Имя, Область.Значение);
			КонецЕсли;
			
		КонецЦикла;
		
		Если НаимРаздела = "Раздел2" Тогда
			НаимТаблицыСтраницы = "ТаблицаСтраницыРаздела2";
		ИначеЕсли НаимРаздела = "Раздел3_Прил1" Тогда
			НаимТаблицыСтраницы = "ТаблицаСтраницыРаздела3_Прил1";
		КонецЕсли;
		
		АктивнаяСтраница = ЭтаФорма[НаимТаблицыСтраницы].НайтиСтроки(Новый Структура("АктивнаяСтраница", Истина));
		
		Если АктивнаяСтраница.Количество() > 0 Тогда
			
			АктивнаяСтраница = АктивнаяСтраница[0];
			
			АктивнаяСтраница.Данные.Очистить();
			АктивнаяСтраница.Данные.Добавить(СтруктураДанных);
			
			АктивнаяСтраница.АктивнаяСтраница = НЕ ИзменятьАктивнуюСтраницу;
			
		КонецЕсли;
		
	// Многостраничные и многострочные разделы.
	//
	ИначеЕсли НаимРаздела = "Раздел5" Тогда
		
		ТаблицаСтраницРаздела = Неопределено;
		мСтруктураМногостраничныхРазделов.Свойство(НаимРаздела, ТаблицаСтраницРаздела);
		ТаблицаСтраницРаздела = ЭтаФорма[ТаблицаСтраницРаздела];
		СтрТаблицыСтраниц = ТаблицаСтраницРаздела.НайтиСтроки(Новый Структура("АктивнаяСтраница", Истина));
		
		Если СтрТаблицыСтраниц.Количество() > 0 Тогда
			СтрТаблицаСтраницы = СтрТаблицыСтраниц[0];
			
			РегламентированнаяОтчетностьКлиентСервер.СохранитьДанныеМногостраничногоРазделаВактивнойСтранице(
			ЭтаФорма, НаимРаздела, ОчищатьРазделЕслиЕстьМногострочность);
			
			Для каждого СтрТаблица Из СтрТаблицыСтраниц Цикл
				СтрТаблица.АктивнаяСтраница = Ложь;
			КонецЦикла;
			
			СтрТаблицаСтраницы.АктивнаяСтраница = НЕ ИзменятьАктивнуюСтраницу;
		КонецЕсли;
		
	// Многострочные разделы.
	//
	ИначеЕсли НаимРаздела = "Раздел3_Прил2"
		ИЛИ НаимРаздела = "Раздел4"
		ИЛИ НаимРаздела = "Раздел6"
		ИЛИ НаимРаздела = "Раздел7" Тогда
		
		ЭтаФорма["СтруктураДанных" + НаимРаздела] = СобратьДанныеТекущегоТаблПоля(ЭтаФорма, "ТабличныйДокумент");
		
		Если НаимРаздела = "Раздел4" Тогда
			
			ОбновитьСтруктуруМногострочногоРазделаНаСервере(СтруктураРеквизитовФормы.мИдГруппы4М1);
			ОбновитьСтруктуруМногострочногоРазделаНаСервере(СтруктураРеквизитовФормы.мИдГруппы4М2);
			ОбновитьСтруктуруМногострочногоРазделаНаСервере(СтруктураРеквизитовФормы.мИдГруппы4М3);
			
		ИначеЕсли НаимРаздела = "Раздел6" Тогда
			
			ОбновитьСтруктуруМногострочногоРазделаНаСервере(СтруктураРеквизитовФормы.мИдГруппы6М1);
			ОбновитьСтруктуруМногострочногоРазделаНаСервере(СтруктураРеквизитовФормы.мИдГруппы6М2);
			ОбновитьСтруктуруМногострочногоРазделаНаСервере(СтруктураРеквизитовФормы.мИдГруппы6М3);
			
		Иначе
			
			ИмяГруппы = ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(НаимРаздела);
			ОбновитьСтруктуруМногострочногоРазделаНаСервере(ИмяГруппы);
			
		КонецЕсли;
		
	// Обычные разделы.
	//
	Иначе
		
		ЭтаФорма["СтруктураДанных" + НаимРаздела] = СобратьДанныеТекущегоТаблПоля(ЭтаФорма, "ТабличныйДокумент");
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиМакетВТаблДокНаСервере(ИмяТекРаздела, НомерСтраницыРазделаОтчета, ЗаголовокРаздела = Ложь) Экспорт
	
	Если ИмяТекРаздела = "Раздел8"
	 ИЛИ ИмяТекРаздела = "Раздел8_Прил1"
	 ИЛИ ИмяТекРаздела = "Раздел9"
	 ИЛИ ИмяТекРаздела = "Раздел9_Прил1"
	 ИЛИ ИмяТекРаздела = "Раздел10"
	 ИЛИ ИмяТекРаздела = "Раздел11"
	 ИЛИ ИмяТекРаздела = "Раздел12" Тогда
		Элементы.СтраницыОтчета.ТекущаяСтраница = Элементы.СтраницаРегистраУчетаНДС;
		ВывестиРазделРегистраУчетаНДС(ИмяТекРаздела, НомерСтраницыРазделаОтчета);
		Возврат;
	КонецЕсли;
	
	Элементы.СтраницыОтчета.ТекущаяСтраница = Элементы.СтраницаОтчета;
	
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(МакетПомощникаПоУчетуНДС);
	ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(
	Сред(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + ИмяТекРаздела));
	
	// Многостраничные разделы.
	//
	Если ИмяТекРаздела = "Раздел2"
	 ИЛИ ИмяТекРаздела = "Раздел3_Прил1" Тогда
		
		Если ИмяТекРаздела = "Раздел2" Тогда
			НаимТаблицыСтраницы = "ТаблицаСтраницыРаздела2";
		ИначеЕсли ИмяТекРаздела = "Раздел3_Прил1" Тогда
			НаимТаблицыСтраницы = "ТаблицаСтраницыРаздела3_Прил1";
		ИначеЕсли ИмяТекРаздела = "Раздел5" Тогда
			НаимТаблицыСтраницы = "ТаблицаСтраницыРаздела5";
		КонецЕсли;
		
		Для каждого ТаблицаСтраницы Из ЭтаФорма[НаимТаблицыСтраницы] Цикл
			Если ЭтаФорма[НаимТаблицыСтраницы].Количество() = 1 Или ЗаголовокРаздела Тогда
				Для Каждого Область Из ТабличныйДокумент.Области Цикл
					Если СтрЧислоВхождений(Область.Имя, "УдалитьСтраницу") > 0 Тогда
						Область.Текст = "";
						Область.Гиперссылка = Ложь;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			ТаблицаСтраницы.АктивнаяСтраница = Ложь;
		КонецЦикла;
		
		ЭтаФорма[НаимТаблицыСтраницы][НомерСтраницыРазделаОтчета - 1].АктивнаяСтраница = Истина;
		
		СписокДанных = ЭтаФорма[НаимТаблицыСтраницы][НомерСтраницыРазделаОтчета - 1].Данные;
		СтруктураДанных = Новый Структура;
		
		Если СписокДанных.Количество() > 0 Тогда
			СтруктураДанных = СписокДанных[0].Значение;
		КонецЕсли;
		
		Для Каждого ЭлСтруктуры Из СтруктураДанных Цикл
			Попытка
				ТабличныйДокумент.Области[ЭлСтруктуры.Ключ].Значение = ЭлСтруктуры.Значение;
			Исключение
			КонецПопытки;
		КонецЦикла;
		
	// Многостраничные и многострочные разделы.
	//
	ИначеЕсли ИмяТекРаздела = "Раздел5" Тогда
		
		НаимТаблицыСтраницы = мСтруктураМногостраничныхРазделов[ИмяТекРаздела];
		
		СтруктураДанных = Новый Структура;
		
		СписокДанных = ЭтаФорма[НаимТаблицыСтраницы][НомерСтраницыРазделаОтчета - 1].Данные;
		
		Для Каждого ТаблицаСтраницы Из ЭтаФорма[НаимТаблицыСтраницы] Цикл
			
			Если ЭтаФорма[НаимТаблицыСтраницы].Количество() = 1 Или ЗаголовокРаздела Тогда
				Для Каждого Область Из ТабличныйДокумент.Области Цикл
					Если СтрЧислоВхождений(Область.Имя, "УдалитьСтраницу") > 0 Тогда
						Область.Текст = "";
						Область.Гиперссылка = Ложь;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			ТаблицаСтраницы.АктивнаяСтраница = Ложь;
			
		КонецЦикла;
		
		ЭтаФорма[НаимТаблицыСтраницы][НомерСтраницыРазделаОтчета - 1].АктивнаяСтраница = Истина;
		
		Если СписокДанных.Количество() > 0 Тогда
			СтруктураДанных = СписокДанных[0].Значение;
		КонецЕсли;
		
		Для Каждого ЭлСтруктуры Из СтруктураДанных Цикл
			Попытка
				ТабличныйДокумент.Области[ЭлСтруктуры.Ключ].Значение = ЭлСтруктуры.Значение;
			Исключение
			КонецПопытки;
		КонецЦикла;
		
		ТаблицаСтраницРаздела = Неопределено;
		мСтруктураМногостраничныхРазделов.Свойство(ИмяТекРаздела, ТаблицаСтраницРаздела);
		ТаблицаСтраницРаздела = ЭтаФорма[ТаблицаСтраницРаздела];
		СтрСледующаяСтраница = ТаблицаСтраницРаздела[НомерСтраницыРазделаОтчета - 1];
		СтрСледующаяСтраница.АктивнаяСтраница = Истина;
		ТаблицаВариантыЗаполнения = РегламентированнаяОтчетностьВызовСервера.ПолучитьТаблицуВариантовЗаполненияНаСервере(
		ЭтаФорма, ИмяТекРаздела);
		КолМногострочныхЧастей = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСвойствоРаздела(
		ЭтаФорма, ИмяТекРаздела, "МногострочностьВРазделе").Количество();
		
		Если КолМногострочныхЧастей > 0 Тогда
			НовДанныеДопСтрокРаздела = СтрСледующаяСтраница.ДанныеДопСтрок;
			Если (ТипЗнч(НовДанныеДопСтрокРаздела) = Тип("СписокЗначений"))
			   И (НовДанныеДопСтрокРаздела.Количество() > 0)
			   И (НовДанныеДопСтрокРаздела[0].Представление = "ДанныеФормыКоллекцияТаблицаДопСтрокРаздела") Тогда
				НовДанныеДопСтрокРаздела = НовДанныеДопСтрокРаздела[0].Значение;
			Иначе
				НовДанныеДопСтрокРаздела = Неопределено;
			КонецЕсли;
			// Способ хранения многострочных частей
			СохранятьМногострКакТЗ = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСвойствоРаздела(
			ЭтаФорма, ИмяТекРаздела, "СохранятьМногострКакТЗ");
		Иначе
			НовТаблицаДопСтрокРаздела = Неопределено; // Многострочности нет
			ИмяГруппыДопСтрок = Неопределено; // Имя группы строк неопределено
		КонецЕсли;
		
		Если НовДанныеДопСтрокРаздела <> Неопределено Тогда
			
			// В случае, если многострочных частей больше 1, то хранится структура, иначе, таблица значений с данными
			Если (КолМногострочныхЧастей > 0) И (НЕ СохранятьМногострКакТЗ) Тогда
				
				Для Каждого ГруппаСтрок Из НовДанныеДопСтрокРаздела Цикл
					ИмяГруппыДопСтрок = ГруппаСтрок.Ключ;
					ДанныеГруппыСтрок = ГруппаСтрок.Значение;
					
					ПромТаблицаГруппыСтрок = ЭтаФорма["Хранилище" + ИмяГруппыДопСтрок].Добавить().Таблица;
					
					КопироватьДанныеФормы(ДанныеГруппыСтрок, ПромТаблицаГруппыСтрок);
					
					// Заменяем таблицу значений с данными текущей страницы.
					КопироватьДанныеФормы(ПромТаблицаГруппыСтрок, ЭтаФорма[ИмяГруппыДопСтрок]);
					
					ВывестиРазделВТабличныйДокументНаСервере(ИмяГруппыДопСтрок, ПромТаблицаГруппыСтрок);
					ОбновитьСтруктуруМногострочногоРазделаНаСервере(ИмяГруппыДопСтрок);
					
				КонецЦикла;
				
			ИначеЕсли (КолМногострочныхЧастей > 0) И (СохранятьМногострКакТЗ) Тогда
				
				ИмяГруппыДопСтрок = ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ИмяТекРаздела);
				
				ПромТаблицаДопСтрокРаздела = ЭтаФорма["Хранилище" + ИмяГруппыДопСтрок].Добавить().Таблица;
				
				КопироватьДанныеФормы(НовДанныеДопСтрокРаздела, ПромТаблицаДопСтрокРаздела);
				
				// Заменяем таблицу значений с данными текущей страницы.
				КопироватьДанныеФормы(ПромТаблицаДопСтрокРаздела, ЭтаФорма[ИмяГруппыДопСтрок]);
				
				// Выводим в табличный документ данные группы дополнительных строк и обновляем структуру многострочного раздела
				ВывестиРазделВТабличныйДокументНаСервере(ИмяГруппыДопСтрок, ПромТаблицаДопСтрокРаздела);
				ОбновитьСтруктуруМногострочногоРазделаНаСервере(ИмяГруппыДопСтрок);
				
			КонецЕсли;
			
		КонецЕсли;
		
		ИмяГруппыДопСтрок = ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ИмяТекРаздела);
		
		Если ТабличныйДокумент.Области.Найти("УдалитьСтроку" + ИмяГруппыДопСтрок + "3003_2") = Неопределено Тогда
			Обл = ТабличныйДокумент.Области.Найти("УдалитьСтроку" + ИмяГруппыДопСтрок + "3003_1");
			Если Обл <> Неопределено Тогда 
				Обл.Гиперссылка = Ложь;
				Обл.Текст = "";
			КонецЕсли;
		КонецЕсли;
		
	// Многострочные разделы.
	//
	ИначеЕсли ИмяТекРаздела = "Раздел3_Прил2"
		  ИЛИ ИмяТекРаздела = "Раздел4"
		  ИЛИ ИмяТекРаздела = "Раздел6"
		  ИЛИ ИмяТекРаздела = "Раздел7" Тогда
		
		СтруктураДанныхРаздела = ЭтаФорма["СтруктураДанных" + ИмяТекРаздела];
		
		Для Каждого ЭлСтруктуры Из СтруктураДанныхРаздела Цикл
			Попытка
				ТабличныйДокумент.Области[ЭлСтруктуры.Ключ].Значение = ЭлСтруктуры.Значение;
			Исключение
			КонецПопытки;
		КонецЦикла;
		
		ТекТабличноеПоле = ЭтаФорма.ТабличныйДокумент;
		
		Если ИмяТекРаздела = "Раздел4" Тогда
			
			СтруктураГруппы = ЭтаФорма[СтруктураРеквизитовФормы.мИдГруппы4М1];
			ВывестиРазделВТабличныйДокумент(ЭтаФорма, СтруктураРеквизитовФормы.мИдГруппы4М1, СтруктураГруппы);
			
			СтруктураГруппы = ЭтаФорма[СтруктураРеквизитовФормы.мИдГруппы4М2];
			ВывестиРазделВТабличныйДокумент(ЭтаФорма, СтруктураРеквизитовФормы.мИдГруппы4М2, СтруктураГруппы);
			
			СтруктураГруппы = ЭтаФорма[СтруктураРеквизитовФормы.мИдГруппы4М3];
			ВывестиРазделВТабличныйДокумент(ЭтаФорма, СтруктураРеквизитовФормы.мИдГруппы4М3, СтруктураГруппы);
			
		ИначеЕсли ИмяТекРаздела = "Раздел6" Тогда
			
			СтруктураГруппы = ЭтаФорма[СтруктураРеквизитовФормы.мИдГруппы6М1];
			ВывестиРазделВТабличныйДокумент(ЭтаФорма, СтруктураРеквизитовФормы.мИдГруппы6М1, СтруктураГруппы);
			
			СтруктураГруппы = ЭтаФорма[СтруктураРеквизитовФормы.мИдГруппы6М2];
			ВывестиРазделВТабличныйДокумент(ЭтаФорма, СтруктураРеквизитовФормы.мИдГруппы6М2, СтруктураГруппы);
			
			СтруктураГруппы = ЭтаФорма[СтруктураРеквизитовФормы.мИдГруппы6М3];
			ВывестиРазделВТабличныйДокумент(ЭтаФорма, СтруктураРеквизитовФормы.мИдГруппы6М3, СтруктураГруппы);
			
		Иначе
			
			ИмяГруппы = ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ИмяТекРаздела);
			
			СтруктураГруппы = Неопределено;
			
			мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);
			
			СтруктураГруппы = ЭтаФорма[СтруктураГруппы];
			
			ВывестиРазделВТабличныйДокумент(ЭтаФорма, ИмяГруппы, СтруктураГруппы);
			
		КонецЕсли;
		
		Если ИмяТекРаздела = "Раздел4" ИЛИ ИмяТекРаздела = "Раздел6" Тогда
			
			ИменаГруппРаздела = Новый Массив;
			
			Если ИмяТекРаздела = "Раздел4" Тогда
				
				ИменаГруппРаздела.Добавить(СтруктураРеквизитовФормы.мИдГруппы4М1);
				ИменаГруппРаздела.Добавить(СтруктураРеквизитовФормы.мИдГруппы4М2);
				ИменаГруппРаздела.Добавить(СтруктураРеквизитовФормы.мИдГруппы4М3);
				
			Иначе
				
				ИменаГруппРаздела.Добавить(СтруктураРеквизитовФормы.мИдГруппы6М1);
				ИменаГруппРаздела.Добавить(СтруктураРеквизитовФормы.мИдГруппы6М2);
				ИменаГруппРаздела.Добавить(СтруктураРеквизитовФормы.мИдГруппы6М3);
				
			КонецЕсли;
			
			Для каждого ИмяГруппы Из ИменаГруппРаздела Цикл
				
				ЕстьДопСтроки = Ложь;
				
				НачалоИмениПоказателя = Лев(ИмяГруппы, 8);
				
				Для Каждого ОбластьТД Из ТекТабличноеПоле.Области Цикл
					Если СтрНачинаетсяС(ОбластьТД.Имя, НачалоИмениПоказателя) Тогда
						Если СтрНайти(ОбластьТД.Имя, "_2", , 14) > 0 Тогда
							ЕстьДопСтроки = Истина;
							Прервать;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
				
				Если ЕстьДопСтроки Тогда
					Для Каждого ОбластьТД Из ТекТабличноеПоле.Области Цикл
						Если СтрНачинаетсяС(ОбластьТД.Имя, "УдалитьСтроку" + НачалоИмениПоказателя) Тогда
							ОбластьТД.Гиперссылка = Истина;
							ОбластьТД.Текст = "х";
						КонецЕсли;
					КонецЦикла;
				Иначе
					Для Каждого ОбластьТД Из ТекТабличноеПоле.Области Цикл
						Если СтрНачинаетсяС(ОбластьТД.Имя, "УдалитьСтроку" + НачалоИмениПоказателя) Тогда
							ОбластьТД.Гиперссылка = Ложь;
							ОбластьТД.Текст = "";
							Прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
			КонецЦикла;
			
		Иначе
			
			ЕстьДопСтроки = Ложь;
			
			Для Каждого ОбластьТД Из ТекТабличноеПоле.Области Цикл
				Если СтрЧислоВхождений(ОбластьТД.Имя, "_2") > 0 Тогда
					ЕстьДопСтроки = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если ЕстьДопСтроки Тогда
				Для Каждого ОбластьТД Из ТекТабличноеПоле.Области Цикл
					Если СтрЧислоВхождений(ОбластьТД.Имя, "УдалитьСтроку") > 0 Тогда
						ОбластьТД.Гиперссылка = Истина;
						ОбластьТД.Текст = "х";
					КонецЕсли;
				КонецЦикла;
			Иначе
				Для Каждого ОбластьТД Из ТекТабличноеПоле.Области Цикл
					Если СтрЧислоВхождений(ОбластьТД.Имя, "УдалитьСтроку") > 0 Тогда
						ОбластьТД.Гиперссылка = Ложь;
						ОбластьТД.Текст = "";
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
		КонецЕсли;
		
	// Обычные разделы.
	Иначе
		
		Для Каждого ЭлСтруктуры Из ЭтаФорма["СтруктураДанных" + ИмяТекРаздела] Цикл
			Попытка
				ТабличныйДокумент.Области[ЭлСтруктуры.Ключ].Значение = ЭлСтруктуры.Значение;
			Исключение
			КонецПопытки;
		КонецЦикла;
		
	КонецЕсли;
	
	Если ИмяТекРаздела <> "Титульный" Тогда
		
		УстановитьФорматВыводаВПоляхВводаНаСервере(ИмяТекРаздела);
		
		УстановитьЦветФонаЯчейкиНаСервере(,, ИмяТекРаздела);
		
	КонецЕсли;
	
	УстановитьДоступностьОбластей(ЭтаФорма, ИмяТекРаздела);
	
КонецПроцедуры

&НаКлиенте
Функция ОпределитьТабличноеПолеПоИдМногострочногоРазделаНаКлиенте(ИдГруппы) Экспорт
	
	ИдГрупп = Новый Структура;
	ИдГрупп.Вставить("мИдГруппы31",  СтруктураРеквизитовФормы.мИдГруппы31);
	ИдГрупп.Вставить("мИдГруппы32",  СтруктураРеквизитовФормы.мИдГруппы32);
	ИдГрупп.Вставить("мИдГруппы4М1", СтруктураРеквизитовФормы.мИдГруппы4М1);
	ИдГрупп.Вставить("мИдГруппы4М2", СтруктураРеквизитовФормы.мИдГруппы4М2);
	ИдГрупп.Вставить("мИдГруппы4М3", СтруктураРеквизитовФормы.мИдГруппы4М3);
	ИдГрупп.Вставить("мИдГруппы5",   СтруктураРеквизитовФормы.мИдГруппы5);
	ИдГрупп.Вставить("мИдГруппы6М1", СтруктураРеквизитовФормы.мИдГруппы6М1);
	ИдГрупп.Вставить("мИдГруппы6М2", СтруктураРеквизитовФормы.мИдГруппы6М2);
	ИдГрупп.Вставить("мИдГруппы6М3", СтруктураРеквизитовФормы.мИдГруппы6М3);
	ИдГрупп.Вставить("мИдГруппы7",   СтруктураРеквизитовФормы.мИдГруппы7);
	
	Возврат ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИдГруппы, ИдГрупп);
	
КонецФункции

&НаСервере
Функция ОпределитьТабличноеПолеПоИдМногострочногоРазделаНаСервере(ИдГруппы) Экспорт
	
	ИдГрупп = Новый Структура;
	ИдГрупп.Вставить("мИдГруппы31",  СтруктураРеквизитовФормы.мИдГруппы31);
	ИдГрупп.Вставить("мИдГруппы32",  СтруктураРеквизитовФормы.мИдГруппы32);
	ИдГрупп.Вставить("мИдГруппы4М1", СтруктураРеквизитовФормы.мИдГруппы4М1);
	ИдГрупп.Вставить("мИдГруппы4М2", СтруктураРеквизитовФормы.мИдГруппы4М2);
	ИдГрупп.Вставить("мИдГруппы4М3", СтруктураРеквизитовФормы.мИдГруппы4М3);
	ИдГрупп.Вставить("мИдГруппы5",   СтруктураРеквизитовФормы.мИдГруппы5);
	ИдГрупп.Вставить("мИдГруппы6М1", СтруктураРеквизитовФормы.мИдГруппы6М1);
	ИдГрупп.Вставить("мИдГруппы6М2", СтруктураРеквизитовФормы.мИдГруппы6М2);
	ИдГрупп.Вставить("мИдГруппы6М3", СтруктураРеквизитовФормы.мИдГруппы6М3);
	ИдГрупп.Вставить("мИдГруппы7",   СтруктураРеквизитовФормы.мИдГруппы7);
	
	Возврат ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИдГруппы, ИдГрупп);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИдГруппы, ИдГрупп) Экспорт
	
	Перем ТекТабличноеПоле;
	
	Если ИдГруппы = ИдГрупп.мИдГруппы31 Тогда
		
		ТекТабличноеПоле = "Раздел3_Прил1";
		
	ИначеЕсли ИдГруппы = ИдГрупп.мИдГруппы32 Тогда
		
		ТекТабличноеПоле = "Раздел3_Прил2";
		
	ИначеЕсли ИдГруппы = ИдГрупп.мИдГруппы4М1
		ИЛИ ИдГруппы = ИдГрупп.мИдГруппы4М2
		ИЛИ ИдГруппы = ИдГрупп.мИдГруппы4М3 Тогда
		
		ТекТабличноеПоле = "Раздел4";
		
	ИначеЕсли ИдГруппы = ИдГрупп.мИдГруппы5 Тогда
		
		ТекТабличноеПоле = "Раздел5";
		
	ИначеЕсли ИдГруппы = ИдГрупп.мИдГруппы6М1
		ИЛИ ИдГруппы = ИдГрупп.мИдГруппы6М2
		ИЛИ ИдГруппы = ИдГрупп.мИдГруппы6М3 Тогда
		
		ТекТабличноеПоле = "Раздел6";
		
	ИначеЕсли ИдГруппы = ИдГрупп.мИдГруппы7 Тогда
		
		ТекТабличноеПоле = "Раздел7";
		
	КонецЕсли;
	
	Возврат ТекТабличноеПоле;
	
КонецФункции

&НаСервере
Процедура УстановитьФорматВыводаВПоляхВводаНаСервере(НаимРаздела)
	
	УстановитьФорматВыводаВПоляхВвода(ЭтаФорма, НаимРаздела);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьФорматВыводаВПоляхВвода(Форма, НаимРаздела) Экспорт
	Перем СтруктураГруппы;
	
	Если Форма.СтруктураРеквизитовФормы.ЕдиницаИзмерения = Форма.ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1 Тогда
		Форма.СтруктураРеквизитовФормы.мСтрокаФормата = "; ЧДЦ = " + Форма.СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧС = 0";
	ИначеЕсли Форма.СтруктураРеквизитовФормы.ЕдиницаИзмерения = Форма.ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1000 Тогда
		Форма.СтруктураРеквизитовФормы.мСтрокаФормата = "; ЧДЦ = " + Форма.СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧС = 3";
	ИначеЕсли Форма.СтруктураРеквизитовФормы.ЕдиницаИзмерения = Форма.ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1000000 Тогда
		Форма.СтруктураРеквизитовФормы.мСтрокаФормата = "; ЧДЦ = " + Форма.СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧС = 6";
	КонецЕсли;
	
	Для Каждого СтрПоказатели Из Форма.мТаблицаСоставПоказателей Цикл
		
		Если НЕ НаимРаздела = СтрПоказатели.ИмяПоляТаблДокумента Тогда
			Продолжить;
		КонецЕсли;
		
		КодПоказателя            = СокрП(СтрПоказатели.КодПоказателяПоСоставу);
		ПризнМногострочность     = СокрП(СтрПоказатели.ПризнМногострочности);
		КодПоказателяПоСтруктуре = СокрП(СтрПоказатели.КодПоказателяПоСтруктуре);
		КодПоказателяПоФорме     = СокрП(СтрПоказатели.КодПоказателяПоФорме);
		ТипДанныхПоказателя      = СокрП(СтрПоказатели.ТипДанныхПоказателя);
		ИмяПоказателя            = ?(ПустаяСтрока(СтрПоказатели.КодПоказателяПоФорме), КодПоказателя, КодПоказателяПоФорме);
		
		Если ПустаяСтрока(КодПоказателя) ИЛИ КодПоказателя = "===" ИЛИ КодПоказателя = "###" ИЛИ Лев(КодПоказателя, 2) = "//" Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТипДанныхПоказателя = "Е" И ПустаяСтрока(КодПоказателяПоСтруктуре) Тогда
			ТекТабличноеПоле = Форма.ТабличныйДокумент;
			Если ПризнМногострочность <> "/" Тогда
				ФорматируемаяОбласть = ТекТабличноеПоле.Области[ИмяПоказателя];
				ДопустимыйЗнакПоказателя = ФорматируемаяОбласть.ТипЗначения.КвалификаторыЧисла.ДопустимыйЗнак;
				ЧислоЕЗнак = Форма.СтруктураРеквизитовФормы.мОписаниеТиповЧислоЕ;
				Если ДопустимыйЗнакПоказателя = ДопустимыйЗнак.Неотрицательный Тогда
					ЧислоЕЗнак = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(ЧислоЕЗнак.КвалификаторыЧисла.Разрядность,ЧислоЕЗнак.КвалификаторыЧисла.РазрядностьДробнойЧасти, ДопустимыйЗнакПоказателя));
				КонецЕсли;
				ФорматируемаяОбласть.ТипЗначения = ЧислоЕЗнак;
				ФорматируемаяОбласть.Формат = "ЧЦ = " + ЧислоЕЗнак.КвалификаторыЧисла.Разрядность + Форма.СтруктураРеквизитовФормы.мСтрокаФормата;
			Иначе
				// определяем кол-во строк многострочного раздела и применяем процедуру форматирования к данной графе по всем строкам
				НСтр = 1;
				НСтрСтр = "1";
				Пока ТекТабличноеПоле.Области.Найти(ИмяПоказателя + "_" + НСтрСтр) <> Неопределено Цикл
					ФорматируемаяОбласть = ТекТабличноеПоле.Области[ИмяПоказателя + "_" + НСтрСтр];
					ДопустимыйЗнакПоказателя = ФорматируемаяОбласть.ТипЗначения.КвалификаторыЧисла.ДопустимыйЗнак;
					ЧислоЕЗнак = Форма.СтруктураРеквизитовФормы.мОписаниеТиповЧислоЕ;
					Если ДопустимыйЗнакПоказателя = ДопустимыйЗнак.Неотрицательный Тогда
						ЧислоЕЗнак = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(ЧислоЕЗнак.КвалификаторыЧисла.Разрядность,ЧислоЕЗнак.КвалификаторыЧисла.РазрядностьДробнойЧасти, ДопустимыйЗнакПоказателя));
					КонецЕсли;
					ФорматируемаяОбласть.ТипЗначения = ЧислоЕЗнак;
					ФорматируемаяОбласть.Формат = "ЧЦ = " + ЧислоЕЗнак.КвалификаторыЧисла.Разрядность + Форма.СтруктураРеквизитовФормы.мСтрокаФормата;
					НСтр = НСтр + 1;
					НСтрСтр = Формат(НСтр, "ЧГ=");
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		Если НаимРаздела = "Раздел3_Прил1" Тогда
			
			ТекТабличноеПоле = Форма.ТабличныйДокумент;
			НСтр = 1;
			НСтрСтр = "1";
			Пока ТекТабличноеПоле.Области.Найти("П000310007001_" + НСтрСтр) <> Неопределено Цикл
				ФорматируемаяОбласть1 = ТекТабличноеПоле.Область("П000310007002_" + НСтрСтр);
				ФорматируемаяОбласть2 = ТекТабличноеПоле.Область("П000310007004_" + НСтрСтр);
				ФорматОбласти1 = "";
				ФорматОбласти2 = ФорматируемаяОбласть2.Формат;
				Если ЗначениеЗаполнено(ТекТабличноеПоле.Область("П000310007001_" + НСтрСтр).Значение) Тогда
					Если НЕ ЗначениеЗаполнено(ФорматируемаяОбласть1.Значение) Тогда
						ФорматОбласти1 = "ДП=-";
					КонецЕсли;
					ФорматОбласти2 = СтрЗаменить(ФорматОбласти2, "ЧН=-", "ЧН=0");
				Иначе
					ФорматОбласти2 = СтрЗаменить(ФорматОбласти2, "ЧН=0", "ЧН=-");
				КонецЕсли;
				ФорматируемаяОбласть1.Формат = ФорматОбласти1;
				ФорматируемаяОбласть2.Формат = ФорматОбласти2;
				НСтр = НСтр + 1;
				НСтрСтр = Формат(НСтр, "ЧГ=");
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьДатуПодписи(Форма)
	
	Форма.ТабличныйДокумент.Области.ДатаПодписи.Значение = Форма.ДатаПодписи;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЦветФонаЯчейкиНаКлиенте(ИмяЯчейки = Неопределено, ВариантЗаполнения = Неопределено, ИмяТекущейСтраницыПанели = "") Экспорт
	
	УстановитьЦветФонаЯчейки(ЭтаФорма, ИмяЯчейки, ВариантЗаполнения, ИмяТекущейСтраницыПанели);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЦветФонаЯчейкиНаСервере(ИмяЯчейки = Неопределено, ВариантЗаполнения = Неопределено, ИмяТекущейСтраницыПанели = "") Экспорт
	
	УстановитьЦветФонаЯчейки(ЭтаФорма, ИмяЯчейки, ВариантЗаполнения, ИмяТекущейСтраницыПанели);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЦветФонаЯчейки(Форма, ИмяЯчейки = Неопределено, ВариантЗаполнения = Неопределено, ИмяТекущейСтраницыПанели = "") Экспорт
	
	Перем ЦветФона;
	Перем Комментарий;
	
	Если Форма.СтруктураРеквизитовФормы.мБезОткрытияФормы ИЛИ Форма.СтруктураРеквизитовФормы.мРежимПечати Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ИмяЯчейки = Неопределено Тогда
		
		#Если НаКлиенте Тогда
			ИмяСтраницыПанели = РегламентированнаяОтчетностьКлиент.ОпределитьСтраницуПанелиПоКодуПоказателяНаКлиенте(Форма, ИмяЯчейки);
		#Иначе
			ИмяСтраницыПанели = РегламентированнаяОтчетностьВызовСервера.ОпределитьСтраницуПанелиПоКодуПоказателяНаСервере(Форма, ИмяЯчейки);
		#КонецЕсли
		Если ИмяСтраницыПанели = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ИмяПоляТаблДокумента = "ТабличныйДокумент";
		
		Ключ = "_" + ВариантЗаполнения;
		Форма.мСтруктураЦветовРаскраски.Свойство(Ключ, ЦветФона);
		
		ЗначениеВКвадратах = РегламентированнаяОтчетностьКлиентСервер.ОбластьЯвляетсяЯчейкойСоставногоПоля(Форма, ИмяЯчейки);
		
		Если ВариантЗаполнения = 4
		 ИЛИ ВариантЗаполнения = 5
		 ИЛИ ВариантЗаполнения = 7 Тогда
			
			Если ЗначениеВКвадратах Тогда
				РегламентированнаяОтчетностьКлиентСервер.СвойстваГрупповыхЗначений(Форма, ИмяЯчейки, "УстановитьЗащиту");
			Иначе
				Форма[ИмяПоляТаблДокумента].Области[ИмяЯчейки].Защита = Истина;
			КонецЕсли;
			
		Иначе
			
			Если ЗначениеВКвадратах Тогда
				РегламентированнаяОтчетностьКлиентСервер.СвойстваГрупповыхЗначений(Форма, ИмяЯчейки, "СнятьЗащиту");
			Иначе
				Форма[ИмяПоляТаблДокумента].Области[ИмяЯчейки].Защита = Ложь;
			КонецЕсли;
			
		КонецЕсли;
		
		Если ЗначениеВКвадратах Тогда
			РегламентированнаяОтчетностьКлиентСервер.СвойстваГрупповыхЗначений(Форма, ИмяЯчейки, "ПроставитьЦветРаскраски", ЦветФона);
		Иначе
			Форма[ИмяПоляТаблДокумента].Области[ИмяЯчейки].ЦветФона = ЦветФона;
		КонецЕсли;
		
	Иначе
		
		#Если НаКлиенте Тогда
			ТаблицаВариантыЗаполнения = РегламентированнаяОтчетностьКлиент.ПолучитьТаблицуВариантовЗаполненияНаКлиенте(Форма, ИмяТекущейСтраницыПанели);
		#Иначе
			ТаблицаВариантыЗаполнения = РегламентированнаяОтчетностьВызовСервера.ПолучитьТаблицуВариантовЗаполненияНаСервере(Форма, ИмяТекущейСтраницыПанели);
		#КонецЕсли
		
		Если ТаблицаВариантыЗаполнения = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Для Каждого Строка Из ТаблицаВариантыЗаполнения Цикл
			ИмяПоказателя            =  Строка.КодПоказателя;
			ВариантЗаполнения        =  Строка.ВариантЗаполнения;
			Комментарий              =  Строка.Комментарий;
			КодПоказателяПоСтруктуре =  Строка.КодПоказателяПоСтруктуре;
			
			КолвоСтрокВМногострочнойЧасти = РегламентированнаяОтчетностьКлиентСервер.ПоказательВходитВМногострочнуюЧасть(
			Форма, ИмяПоказателя);
			
			// Конвертация данных после перехода с 2.0 на 3.0.
			Если ИмяТекущейСтраницыПанели = "Раздел4" Тогда
				Если СтрНачинаетсяС(ИмяПоказателя, "П0004М1") Тогда
					КолвоСтрокВМногострочнойЧасти = Форма["П0004М100"].Количество();
				ИначеЕсли СтрНачинаетсяС(ИмяПоказателя, "П0004М2") Тогда
					КолвоСтрокВМногострочнойЧасти = Форма["П0004М200"].Количество();
				ИначеЕсли СтрНачинаетсяС(ИмяПоказателя, "П0004М3") Тогда
					КолвоСтрокВМногострочнойЧасти = Форма["П0004М300"].Количество();
				КонецЕсли;
			ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел6" Тогда
				Если СтрНачинаетсяС(ИмяПоказателя, "П0006М1") Тогда
					КолвоСтрокВМногострочнойЧасти = Форма["П0006М100"].Количество();
				ИначеЕсли СтрНачинаетсяС(ИмяПоказателя, "П0006М2") Тогда
					КолвоСтрокВМногострочнойЧасти = Форма["П0006М200"].Количество();
				ИначеЕсли СтрНачинаетсяС(ИмяПоказателя, "П0006М3") Тогда
					КолвоСтрокВМногострочнойЧасти = Форма["П0006М300"].Количество();
				КонецЕсли;
			КонецЕсли;
			
			Если КолвоСтрокВМногострочнойЧасти > 0 Тогда
				Многострочность = Истина;
				БазоваяЧасть = ИмяПоказателя;
				ОписанияБлоков = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСвойствоРаздела(
				Форма, ИмяТекущейСтраницыПанели, "МногострочностьВРазделе");
				
				Если ТипЗнч(ОписанияБлоков) = Тип("Число") Тогда
					ВБлокеВсеПоказателиЗаполняются = Истина;
				ИначеЕсли ТипЗнч(ОписанияБлоков) = Тип("ДанныеФормыКоллекция") Тогда
					ИмяГруппы = Сред(ИмяПоказателя, 1, 11);
					
					// Конвертация данных после перехода с 2.0 на 3.0.
					Если ИмяТекущейСтраницыПанели = "Раздел4" Тогда
						Если СтрНачинаетсяС(ИмяПоказателя, "П0004М1") Тогда
							ИмяГруппы = "П0004М100";
						ИначеЕсли СтрНачинаетсяС(ИмяПоказателя, "П0004М2") Тогда
							ИмяГруппы = "П0004М200";
						ИначеЕсли СтрНачинаетсяС(ИмяПоказателя, "П0004М3") Тогда
							ИмяГруппы = "П0004М300";
						КонецЕсли;
					ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел6" Тогда
						Если СтрНачинаетсяС(ИмяПоказателя, "П0006М1") Тогда
							ИмяГруппы = "П0006М100";
						ИначеЕсли СтрНачинаетсяС(ИмяПоказателя, "П0006М2") Тогда
							ИмяГруппы = "П0006М200";
						ИначеЕсли СтрНачинаетсяС(ИмяПоказателя, "П0006М3") Тогда
							ИмяГруппы = "П0006М300";
						КонецЕсли;
					КонецЕсли;
					
					ВБлокеВсеПоказателиЗаполняются = НЕ ОписанияБлоков.НайтиСтроки(
					Новый Структура("ИдГруппы", ИмяГруппы))[0].НезаполняемыеПоказателиЕсть;
				КонецЕсли;
				
			Иначе
				Многострочность = Ложь;
				ВБлокеВсеПоказателиЗаполняются = Истина;
				КолвоСтрокВМногострочнойЧасти = 1;
			КонецЕсли;
			
			Для Инд = 1 по КолвоСтрокВМногострочнойЧасти Цикл
				
				Если Многострочность Тогда
					ИмяПоказателя = БазоваяЧасть + "_" + Формат(Инд, "ЧГ=");
				КонецЕсли;
				
				ТекОбластьЯчеек = Форма.ТабличныйДокумент.Области[ИмяПоказателя];
				Если (Не ПустаяСтрока(Комментарий)) ИЛИ (Не ПустаяСтрока(ТекОбластьЯчеек.Примечание.Текст)) Тогда
					ТекОбластьЯчеек.Примечание.Текст = Комментарий;
				КонецЕсли;
				
				Ключ = "_" + ВариантЗаполнения;
				Форма.мСтруктураЦветовРаскраски.Свойство(Ключ, ЦветФона);
				
				ЗначениеВКвадратах = ?(ПустаяСтрока(КодПоказателяПоСтруктуре), Ложь, Истина);
				
				Если ВариантЗаполнения = 4
		 		 ИЛИ ВариантЗаполнения = 5
		 		 ИЛИ ВариантЗаполнения = 7 Тогда
					
					Если ЗначениеВКвадратах Тогда
						РегламентированнаяОтчетностьКлиентСервер.СвойстваГрупповыхЗначений(
						Форма, ИмяПоказателя, "УстановитьЗащиту");
					Иначе
						Форма.ТабличныйДокумент.Области[ИмяПоказателя].Защита = Истина;
					КонецЕсли;
					
				Иначе
					
					Если ЗначениеВКвадратах Тогда
						РегламентированнаяОтчетностьКлиентСервер.СвойстваГрупповыхЗначений(
						Форма, ИмяПоказателя, "СнятьЗащиту");
					Иначе
						Форма.ТабличныйДокумент.Области[ИмяПоказателя].Защита = Ложь;
					КонецЕсли;
				КонецЕсли;
				
				Если ЗначениеВКвадратах Тогда
					РегламентированнаяОтчетностьКлиентСервер.СвойстваГрупповыхЗначений(
					Форма, ИмяПоказателя, "ПроставитьЦветРаскраски", ЦветФона);
				Иначе
					Форма.ТабличныйДокумент.Области[ИмяПоказателя].ЦветФона = ЦветФона;
				КонецЕсли;
			КонецЦикла;
			
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСведенияОбОрганизации(Форма, ИзмененаДатаПодписи = Ложь)
	
	ПрежнийКодПоМесту = СокрЛП(ТабличныйДокумент.Области["ПоМесту"].Значение);
	
	ОбъектОтчета(ЭтаФорма.ИмяФормы).ЗаполнитьСведенияОбОрганизации(СтруктураРеквизитовФормы.мВыбраннаяФорма,
																   ТабличныйДокумент,
																   СтруктураРеквизитовФормы,
																   ДатаПодписи,
																   ИзмененаДатаПодписи);
																   
	Если НЕ ИзмененаДатаПодписи Тогда
		ЗаполнитьОКТМО(Форма, СтруктураРеквизитовФормы.КодТерриториальногоОбразования);
	КонецЕсли;	
	
	ЗаполнитьЗначенияПолейПоУмолчанию();
	
	СформироватьСпискиВыбора();
	
	ПоМесту = ТабличныйДокумент.Области["ПоМесту"].Значение;
	
	Если (ПрежнийКодПоМесту = "231" И ПоМесту <> "231")
	 ИЛИ (ПрежнийКодПоМесту <> "231" И ПоМесту = "231") Тогда
	 
		РасчетНаСервере("Раздел1");
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСведенияОбОрганизацииНаСервере(ВПрограммеИзмененаДатаПодписи = Ложь)
	
	ЗаполнитьСведенияОбОрганизации(ЭтаФорма, ВПрограммеИзмененаДатаПодписи);
	ЗаполнитьЗначенияПолейПоУмолчанию();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСведенияОПодписантахИКодПоОКТМО(Ссылка)
	
	КодТерриториальногоОбразования = Ссылка.КодПоОКТМО;
	ЗаполнитьОКТМО(ЭтаФорма, КодТерриториальногоОбразования);
	СтруктураРеквизитовФормы.Вставить("КодТерриториальногоОбразования", СокрЛП(КодТерриториальногоОбразования));
	
	ЗаполнитьСведенияОПодписантах();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСведенияОПодписантах() Экспорт
	
	ОбъектОтчета(ЭтаФорма.ИмяФормы).ЗаполнитьСведенияОПодписантах(СтруктураРеквизитовФормы.мВыбраннаяФорма,
																  СтруктураРеквизитовФормы,
																  ТабличныйДокумент,
																  ДатаПодписи);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Функция СобратьДанныеТекущегоТаблПоляНаСервере(ИмяТабличногоПоля) Экспорт
	
	Возврат СобратьДанныеТекущегоТаблПоля(ЭтаФорма, ИмяТабличногоПоля);
	
КонецФункции

&НаКлиенте
Функция СобратьДанныеТекущегоТаблПоляНаКлиенте(ИмяТабличногоПоля) Экспорт
	
	Возврат СобратьДанныеТекущегоТаблПоля(ЭтаФорма, ИмяТабличногоПоля);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СобратьДанныеТекущегоТаблПоля(Форма, ТабличноеПоле) Экспорт
	
	СтруктураДанныхПоля = Новый Структура;
	Для Каждого ТекущаяОбласть Из Форма[ТабличноеПоле].Области Цикл
		Если СтрЧислоВхождений(Тип(ТекущаяОбласть), "Рисунок") = 0
			И ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник
			И ТекущаяОбласть.СодержитЗначение = Истина Тогда
			СтруктураДанныхПоля.Вставить(ТекущаяОбласть.Имя, ТекущаяОбласть.Значение);
		КонецЕсли;
	КонецЦикла;
	
	Возврат СтруктураДанныхПоля;
	
КонецФункции

&НаСервере
Функция ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ИмяЛиста = Неопределено) Экспорт
	
	ИдГрупп = Новый Структура;
	ИдГрупп.Вставить("мИдГруппы31",  СтруктураРеквизитовФормы.мИдГруппы31);
	ИдГрупп.Вставить("мИдГруппы32",  СтруктураРеквизитовФормы.мИдГруппы32);
	ИдГрупп.Вставить("мИдГруппы4М1", СтруктураРеквизитовФормы.мИдГруппы4М1);
	ИдГрупп.Вставить("мИдГруппы4М2", СтруктураРеквизитовФормы.мИдГруппы4М2);
	ИдГрупп.Вставить("мИдГруппы4М3", СтруктураРеквизитовФормы.мИдГруппы4М3);
	ИдГрупп.Вставить("мИдГруппы5",   СтруктураРеквизитовФормы.мИдГруппы5);
	ИдГрупп.Вставить("мИдГруппы6М1", СтруктураРеквизитовФормы.мИдГруппы6М1);
	ИдГрупп.Вставить("мИдГруппы6М2", СтруктураРеквизитовФормы.мИдГруппы6М2);
	ИдГрупп.Вставить("мИдГруппы6М3", СтруктураРеквизитовФормы.мИдГруппы6М3);
	ИдГрупп.Вставить("мИдГруппы7",   СтруктураРеквизитовФормы.мИдГруппы7);
	
	Возврат ОпределитьИдМногострочногоРазделаПоАктивнойСтранице(ЭтаФорма, ИмяЛиста, , ИдГрупп);
	
КонецФункции

&НаКлиенте
Функция ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаКлиенте(ИмяЛиста = Неопределено) Экспорт
	
	ИдГрупп = Новый Структура;
	ИдГрупп.Вставить("мИдГруппы31",  СтруктураРеквизитовФормы.мИдГруппы31);
	ИдГрупп.Вставить("мИдГруппы32",  СтруктураРеквизитовФормы.мИдГруппы32);
	ИдГрупп.Вставить("мИдГруппы4М1", СтруктураРеквизитовФормы.мИдГруппы4М1);
	ИдГрупп.Вставить("мИдГруппы4М2", СтруктураРеквизитовФормы.мИдГруппы4М2);
	ИдГрупп.Вставить("мИдГруппы4М3", СтруктураРеквизитовФормы.мИдГруппы4М3);
	ИдГрупп.Вставить("мИдГруппы5",   СтруктураРеквизитовФормы.мИдГруппы5);
	ИдГрупп.Вставить("мИдГруппы6М1", СтруктураРеквизитовФормы.мИдГруппы6М1);
	ИдГрупп.Вставить("мИдГруппы6М2", СтруктураРеквизитовФормы.мИдГруппы6М2);
	ИдГрупп.Вставить("мИдГруппы6М3", СтруктураРеквизитовФормы.мИдГруппы6М3);
	ИдГрупп.Вставить("мИдГруппы7",   СтруктураРеквизитовФормы.мИдГруппы7);
	
	Возврат ОпределитьИдМногострочногоРазделаПоАктивнойСтранице(ЭтаФорма, ИмяЛиста, , ИдГрупп);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ОпределитьИдМногострочногоРазделаПоАктивнойСтранице(Форма, ИмяЛиста = Неопределено, ТекущаяСтраница, ИдГрупп)
	Перем ИмяГруппы;
	
	Если ИмяЛиста = Неопределено Тогда
		ИмяТекущейСтраницыПанели = ТекущаяСтраница.Имя;
	Иначе
		ИмяТекущейСтраницыПанели = ИмяЛиста;
	КонецЕсли;
	
	Если ИмяТекущейСтраницыПанели = "Раздел3_Прил1" Тогда
		ИмяГруппы = ИдГрупп.мИдГруппы31;
	ИначеЕсли ИмятекущейСтраницыПанели = "Раздел3_Прил2" Тогда
		ИмяГруппы = ИдГрупп.мИдГруппы32;
	ИначеЕсли ИмятекущейСтраницыПанели = "Раздел4" Тогда
		ИмяГруппы = РазделТекущейОбласти(Форма, Форма.Элементы.ТабличныйДокумент.ТекущаяОбласть);
	ИначеЕсли ИмятекущейСтраницыПанели = "Раздел5" Тогда
		ИмяГруппы = ИдГрупп.мИдГруппы5;
	ИначеЕсли ИмятекущейСтраницыПанели = "Раздел6" Тогда
		ИмяГруппы = РазделТекущейОбласти(Форма, Форма.Элементы.ТабличныйДокумент.ТекущаяОбласть);
	ИначеЕсли ИмятекущейСтраницыПанели = "Раздел7" Тогда
		ИмяГруппы = ИдГрупп.мИдГруппы7;
	КонецЕсли;
	
	Возврат ИмяГруппы;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция РазделТекущейОбласти(Форма, ТекущаяОбласть, ДлИмениОбласти = 13) Экспорт
	
	Если ТекущаяОбласть = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ИмяТекущейОбласти = СтрЗаменить(ТекущаяОбласть.Имя, "ДобавитьСтрокуЗначок", "ДобавитьСтроку");
	Если ИмяТекущейОбласти = "ДобавитьСтроку32" Тогда
		Возврат Форма.СтруктураРеквизитовФормы.мИдГруппы32;
	ИначеЕсли ИмяТекущейОбласти = "ДобавитьСтроку4М1" Тогда
		Возврат Форма.СтруктураРеквизитовФормы.мИдГруппы4М1;
	ИначеЕсли ИмяТекущейОбласти = "ДобавитьСтроку4М2" Тогда
		Возврат Форма.СтруктураРеквизитовФормы.мИдГруппы4М2;
	ИначеЕсли ИмяТекущейОбласти = "ДобавитьСтроку4М3" Тогда
		Возврат Форма.СтруктураРеквизитовФормы.мИдГруппы4М3;
	ИначеЕсли ИмяТекущейОбласти = "ДобавитьСтроку5" Тогда
		Возврат Форма.СтруктураРеквизитовФормы.мИдГруппы5;
	ИначеЕсли ИмяТекущейОбласти = "ДобавитьСтроку6М1" Тогда
		Возврат Форма.СтруктураРеквизитовФормы.мИдГруппы6М1;
	ИначеЕсли ИмяТекущейОбласти = "ДобавитьСтроку6М2" Тогда
		Возврат Форма.СтруктураРеквизитовФормы.мИдГруппы6М2;
	ИначеЕсли ИмяТекущейОбласти = "ДобавитьСтроку6М3" Тогда
		Возврат Форма.СтруктураРеквизитовФормы.мИдГруппы6М3;
	ИначеЕсли ИмяТекущейОбласти = "ДобавитьСтроку7" Тогда
		Возврат Форма.СтруктураРеквизитовФормы.мИдГруппы7;
	ИначеЕсли СтрНайти(ИмяТекущейОбласти, "УдалитьСтроку") > 0 Тогда
		ИмяТекущейОбласти = СтрЗаменить(ИмяТекущейОбласти, "УдалитьСтроку", "");
	КонецЕсли;
	
	ИмяАктивногоРаздела = Лев(ИмяТекущейОбласти, ДлИмениОбласти);
	
	Для Каждого ЭлементСтруктуры Из Форма.мСтруктураМногострочныхРазделов Цикл
		ИмяГруппы = ЭлементСтруктуры.Ключ;
		СтруктураГруппы = Форма[ЭлементСтруктуры.Значение];
		Если СтруктураГруппы[0].Свойство(ИмяАктивногоРаздела) Тогда
			Возврат ИмяГруппы;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

&НаСервере
Процедура ОбновитьСтруктуруМногострочногоРазделаНаСервере(ИмяГруппы) Экспорт
	
	Перем СтруктураГруппы;
	
	Если СтрДлина(ИмяГруппы) = 9 Тогда
		
		мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);
		
		СтруктураГруппы = ЭтаФорма[СтруктураГруппы];
		
		ТекТабличноеПолеИмя = "ТабличныйДокумент";
		
		ТекТабличноеПоле = ЭтаФорма[ТекТабличноеПолеИмя];
		
		Для НСтр = 1 По СтруктураГруппы.Количество() Цикл
			
			ТекСтрокаТаблицы = СтруктураГруппы[НСтр - 1];
			
			НСтрСтр = Формат(НСтр, "ЧГ=");
			
			Для НомерГрафы = 1 По мСтруктураКолвоКолонокРазделов[ИмяГруппы] Цикл
				
				Если ИмяГруппы = СтруктураРеквизитовФормы.мИдГруппы4М1 Тогда
					
					ИмяКолонки = ИмяГруппы + Формат((НомерГрафы) * 10, "ЧЦ=2; ЧВН=") + "03";
					
				ИначеЕсли ИмяГруппы = СтруктураРеквизитовФормы.мИдГруппы4М2 Тогда
					
					ИмяКолонки = ИмяГруппы + Формат((НомерГрафы + 5) * 10, "ЧЦ=2; ЧВН=") + "03";
					
				ИначеЕсли ИмяГруппы = СтруктураРеквизитовФормы.мИдГруппы4М3 Тогда
					
					ИмяКолонки = Лев(ИмяГруппы, 8) + Формат((НомерГрафы + 8) * 10, "ЧЦ=3; ЧВН=") + "03";
					
				ИначеЕсли ИмяГруппы = СтруктураРеквизитовФормы.мИдГруппы6М1 Тогда
					
					ИмяКолонки = ИмяГруппы + Формат((НомерГрафы) * 10, "ЧЦ=2; ЧВН=") + "03";
					
				ИначеЕсли ИмяГруппы = СтруктураРеквизитовФормы.мИдГруппы6М2 Тогда
					
					ИмяКолонки = Лев(ИмяГруппы, 8) + Формат((НомерГрафы + 6) * 10, "ЧЦ=3; ЧВН=") + "03";
					
				ИначеЕсли ИмяГруппы = СтруктураРеквизитовФормы.мИдГруппы6М3 Тогда
					
					ИмяКолонки = Лев(ИмяГруппы, 8) + Формат((НомерГрафы + 10) * 10, "ЧЦ=3; ЧВН=") + "03";
					
				Иначе
					
					ИмяКолонки = ИмяГруппы + Формат((НомерГрафы) * 10, "ЧЦ=2; ЧВН=") + "03";
					
				КонецЕсли;
				
				Если СтруктураГруппы[0].Свойство(ИмяКолонки) Тогда
					
					ИмяЯчейки     = ИмяКолонки + "_" + НСтрСтр;
					ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяЯчейки];
					
					Если ОбластьЯчейки.СодержитЗначение = Истина Тогда
						ЗначениеЯчейки = ОбластьЯчейки.Значение;
					Иначе
						ЗначениеЯчейки = ОбластьЯчейки.Текст;
					КонецЕсли;
					
					ТекСтрокаТаблицы[ИмяКолонки] = ЗначениеЯчейки;
					
				КонецЕсли;
				
			КонецЦикла;
		КонецЦикла;
		
	Иначе
		
		РегламентированнаяОтчетностьКлиентСервер.ОбновитьСтруктуруМногострочногоРаздела(ЭтаФорма, ИмяГруппы);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСтруктуруМногострочногоРазделаНаКлиенте(ИмяГруппы) Экспорт
	
	Перем СтруктураГруппы;
	
	Если СтрДлина(ИмяГруппы) = 9 Тогда
		
		мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);
		
		СтруктураГруппы = ЭтаФорма[СтруктураГруппы];
		
		ТекТабличноеПолеИмя = "ТабличныйДокумент";
		
		ТекТабличноеПоле = ЭтаФорма[ТекТабличноеПолеИмя];
		
		Для НСтр = 1 По СтруктураГруппы.Количество() Цикл
			
			ТекСтрокаТаблицы = СтруктураГруппы[НСтр - 1];
			
			НСтрСтр = Формат(НСтр, "ЧГ=");
			
			Для НомерГрафы = 1 По мСтруктураКолвоКолонокРазделов[ИмяГруппы] Цикл
				
				Если ИмяГруппы = СтруктураРеквизитовФормы.мИдГруппы4М1 Тогда
					
					ИмяКолонки = ИмяГруппы + Формат((НомерГрафы) * 10, "ЧЦ=2; ЧВН=") + "03";
					
				ИначеЕсли ИмяГруппы = СтруктураРеквизитовФормы.мИдГруппы4М2 Тогда
					
					ИмяКолонки = ИмяГруппы + Формат((НомерГрафы + 5) * 10, "ЧЦ=2; ЧВН=") + "03";
					
				ИначеЕсли ИмяГруппы = СтруктураРеквизитовФормы.мИдГруппы4М3 Тогда
					
					ИмяКолонки = Лев(ИмяГруппы, 8) + Формат((НомерГрафы + 8) * 10, "ЧЦ=3; ЧВН=") + "03";
					
				ИначеЕсли ИмяГруппы = СтруктураРеквизитовФормы.мИдГруппы6М1 Тогда
					
					ИмяКолонки = ИмяГруппы + Формат((НомерГрафы) * 10, "ЧЦ=2; ЧВН=") + "03";
					
				ИначеЕсли ИмяГруппы = СтруктураРеквизитовФормы.мИдГруппы6М2 Тогда
					
					ИмяКолонки = Лев(ИмяГруппы, 8) + Формат((НомерГрафы + 6) * 10, "ЧЦ=3; ЧВН=") + "03";
					
				ИначеЕсли ИмяГруппы = СтруктураРеквизитовФормы.мИдГруппы6М3 Тогда
					
					ИмяКолонки = Лев(ИмяГруппы, 8) + Формат((НомерГрафы + 10) * 10, "ЧЦ=3; ЧВН=") + "03";
					
				Иначе
					
					ИмяКолонки = ИмяГруппы + Формат((НомерГрафы) * 10, "ЧЦ=2; ЧВН=") + "03";
					
				КонецЕсли;
				
				Если СтруктураГруппы[0].Свойство(ИмяКолонки) Тогда
					
					ИмяЯчейки     = ИмяКолонки + "_" + НСтрСтр;
					ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяЯчейки];
					
					Если ОбластьЯчейки.СодержитЗначение = Истина Тогда
						ЗначениеЯчейки = ОбластьЯчейки.Значение;
					Иначе
						ЗначениеЯчейки = ОбластьЯчейки.Текст;
					КонецЕсли;
					
					ТекСтрокаТаблицы[ИмяКолонки] = ЗначениеЯчейки;
					
				КонецЕсли;
				
			КонецЦикла;
		КонецЦикла;
		
	Иначе
		
		РегламентированнаяОтчетностьКлиентСервер.ОбновитьСтруктуруМногострочногоРаздела(ЭтаФорма, ИмяГруппы);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьСохраненныеДанные()
	
	Перем ДанныеМногострочныхРазделов;
	Перем ДанныеМногостраничныхРазделов;
	Перем ДанныеВариановАвтоЗаполнения;
	Перем ПоказателиОтчета;
	Перем Автозаполнение;
	Перем ТаблицаМногостраничногоДокумента;
	Перем ТаблицаРасшифровки;
	Перем ВерсияФормы;
	Перем ВыполненоЗаполнениеРазделов;
	Перем УспешноеАвтозаполнение;
	
	Если НЕ ЗначениеЗаполнено(СтруктураРеквизитовФормы.Организация) Тогда
		СтруктураРеквизитовФормы.Организация = СтруктураРеквизитовФормы.мСохраненныйДок.Организация;
	КонецЕсли;
	
	ДатаПодписи                                       = СтруктураРеквизитовФормы.мСохраненныйДок.ДатаПодписи;
	СтруктураРеквизитовФормы.ЕдиницаИзмерения         = СтруктураРеквизитовФормы.мСохраненныйДок.ЕдиницаИзмерения;
	СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = СтруктураРеквизитовФормы.мСохраненныйДок.ТочностьЕдиницыИзмерения;
	Комментарий                                       = СтруктураРеквизитовФормы.мСохраненныйДок.Комментарий;
	
	// восстанавливаем сохраненные данные отчета
	СписокСохранения = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить();
	
	СтруктураРеквизитовФормы.ОтчетСтарогоОбразца = СписокСохранения.Свойство("ОкружениеСохранения");
	
	ВерсияФормыИзменилась = Ложь;
	Если СписокСохранения.Свойство("ВерсияФормы", ВерсияФормы) И (ВерсияФормы <> СтруктураРеквизитовФормы.мВерсияФормы) Тогда
		ВерсияФормыИзменилась = Истина;
	КонецЕсли;
	
	// список листов, выводимых на печать
	ДеревоНастройкиСтраниц = СтруктураРеквизитовФормы.мСохраненныйДок.ДеревоНастройкиСтраниц.Получить();
	
	// Установим актуальные представления разделов.
	Если НЕ ДеревоНастройкиСтраниц = Неопределено Тогда
		
		Для Каждого СтрокаДерева Из ДеревоНастройкиСтраниц.Строки Цикл
			Счетчик = ?(Счетчик = Неопределено, 0, Счетчик);
			ЭлементмДеревоСтраницОтчета = мДеревоСтраницОтчета.ПолучитьЭлементы().Получить(Счетчик);
			Если СтрокаДерева.ИмяСтраницы = ЭлементмДеревоСтраницОтчета.ИмяСтраницы Тогда
				Если НЕ СтрокаДерева.Представление = ЭлементмДеревоСтраницОтчета.Представление Тогда
					СтрокаДерева.Представление = ЭлементмДеревоСтраницОтчета.Представление;
				КонецЕсли;
			Иначе
				Продолжить;
			КонецЕсли;
			Счетчик = Счетчик + 1;
		КонецЦикла;
		
		ЗначениеВРеквизитФормы(ДеревоНастройкиСтраниц.Скопировать(), "мДеревоСтраницОтчета");
		
	КонецЕсли;
	
	// восстановим сохраненные данные редактируемых ячеек
	СписокСохранения.Свойство("ПоказателиОтчета", ПоказателиОтчета);
	
	// восстанавливаем сохраненные данные многострочных разделов
	Если СписокСохранения.Свойство( "ДанныеМногострочныхРазделов", ДанныеМногострочныхРазделов) Тогда
		
		Для Каждого ЭлементСтруктуры Из ДанныеМногострочныхРазделов Цикл
			
			НайденноеЗначение = Неопределено;
			мСтруктураМногострочныхРазделов.Свойство(ЭлементСтруктуры.Ключ, НайденноеЗначение);
			
			Если НЕ НайденноеЗначение = Неопределено Тогда
				ЗначениеВДанныеФормы(ЭлементСтруктуры.Значение, ЭтаФорма[НайденноеЗначение]);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	// восстанавливаем сохраненные данные вариантов автозаполнения ячеек
	Если СписокСохранения.Свойство("ДанныеВариантовАвтоЗаполнения", ДанныеВариановАвтоЗаполнения) Тогда
		
		Если НЕ ДанныеВариановАвтоЗаполнения = Неопределено Тогда
			
			мСтруктураВариантыЗаполнения.Очистить();
			
			Для Каждого ЭлементСтруктуры Из ДанныеВариановАвтоЗаполнения Цикл
				
				мСтруктураВариантыЗаполнения.Вставить(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Ключ);
				ЭтаФорма["ТаблицаВариантыЗаполнения" + ЭлементСтруктуры.Ключ].Очистить();
				
				Для Каждого ЭлементМассива Из ЭлементСтруктуры.Значение Цикл
					ТаблВарЗаполнения = ЭтаФорма["ТаблицаВариантыЗаполнения" + ЭлементСтруктуры.Ключ].Добавить().ТаблицаВариантовЗаполнения;
					ЗначениеВДанныеФормы(ЭлементМассива, ТаблВарЗаполнения);
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Данные многостраничных разделов.
	Если СписокСохранения.Свойство("ДанныеМногостраничныхРазделов", ДанныеМногостраничныхРазделов) Тогда
		Для Каждого ЭлементСтруктуры Из ДанныеМногостраничныхРазделов Цикл
			ИмяРаздела = ЭлементСтруктуры.Ключ;
			ТаблицаСДанными = ЭлементСтруктуры.Значение;
			ВосстановитьМногостраничныйРазделИзТаблицы(ИмяРаздела, ТаблицаСДанными);
		КонецЦикла;
	КонецЕсли;
	
	// Восстанавливаем дату начала и окончания автозаполнения.
	СписокСохранения.Свойство("ДатаНачалаАвтозаполнения", СтруктураРеквизитовФормы.ДатаНачалаАвтозаполнения);
	
	Если НЕ ЗначениеЗаполнено(СтруктураРеквизитовФормы.ДатаНачалаАвтозаполнения) Тогда
		СтруктураРеквизитовФормы.ДатаНачалаАвтозаполнения = СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета;
	КонецЕсли;
	
	СписокСохранения.Свойство("ФлПодсчетСтраниц", СтруктураРеквизитовФормы.мСчетчикСтраниц);
	СписокСохранения.Свойство("ФлПроверятьСоотношенияПриПечатиИВыгрузки", СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки);
	СписокСохранения.Свойство("ФлОтклВыборЗначений", СтруктураРеквизитовФормы.мАвтоВыборКодов);
	СтруктураРеквизитовФормы.мАвтоВыборКодов = ?(СтруктураРеквизитовФормы.мАвтоВыборКодов = Неопределено, Ложь, СтруктураРеквизитовФормы.мАвтоВыборКодов);
	
	СписокСохранения.Свойство("ГруппаОрганизаций", СтруктураРеквизитовФормы.ГруппаОрганизаций);
	Если СтруктураРеквизитовФормы.ГруппаОрганизаций = Неопределено Тогда
		СтруктураРеквизитовФормы.ГруппаОрганизаций = Новый СписокЗначений;
	КонецЕсли;
	
	СписокСохранения.Свойство("Автозаполнение", Автозаполнение);
	СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет = Автозаполнение;
	
	СписокСохранения.Свойство("СохранятьРасшифровку", СтруктураРеквизитовФормы.мСохранятьРасшифровку);
	Если СтруктураРеквизитовФормы.мСохранятьРасшифровку = Неопределено Тогда
		СтруктураРеквизитовФормы.мСохранятьРасшифровку = Истина;
	КонецЕсли;
	
	СписокСохранения.Свойство("Расшифровка", ТаблицаРасшифровки);
	
	Если ТипЗнч(ТаблицаРасшифровки) = Тип("ТаблицаЗначений") Тогда
		
		Если ТаблицаРасшифровки.Колонки.Найти("НомСтроки") <> Неопределено Тогда
			
			ИмяПоказателя     = ТаблицаРасшифровки.Колонки.Найти("ИмяПоказателя");
			ИмяПоказателя.Имя = "НаименованиеПоказателя";
			
			ИмяЯчейки     = ТаблицаРасшифровки.Колонки.Найти("ИмяЯчейки");
			ИмяЯчейки.Имя = "ИмяПоказателя";
			
			Раздел     = ТаблицаРасшифровки.Колонки.Найти("Раздел");
			Раздел.Имя = "ИмяРаздела";
			
			ИмяСлагаемого     = ТаблицаРасшифровки.Колонки.Найти("ИмяСлагаемого");
			ИмяСлагаемого.Имя = "НаименованиеСлагаемого";
			
			ТаблицаРасшифровки.Колонки.Добавить("ДополнительныеПараметры");
			
			Для Каждого Элемент Из ТаблицаРасшифровки Цикл
				
				Если ЗначениеЗаполнено(Элемент.КодСчета) Тогда
					Элемент.НаименованиеСлагаемого = Элемент.НаименованиеСлагаемого + Элемент.КодСчета.Код;
				КонецЕсли;
				
				ДопПараметры = Новый Структура;
				
				Если ЗначениеЗаполнено(Элемент.Субконто1) Тогда
					ДопПараметры.Вставить("Субконто1", Новый Структура("ВидСубконто,ЗначениеСубконто", Элемент.КодСчета.ВидыСубконто[0].ВидСубконто, Элемент.Субконто1));
				КонецЕсли;
				
				Если ЗначениеЗаполнено(Элемент.Субконто2) Тогда
					ДопПараметры.Вставить("Субконто2", Новый Структура("ВидСубконто,ЗначениеСубконто", Элемент.КодСчета.ВидыСубконто[1].ВидСубконто, Элемент.Субконто2));
				КонецЕсли;
				
				Если ЗначениеЗаполнено(Элемент.Субконто3) Тогда
					ДопПараметры.Вставить("Субконто3", Новый Структура("ВидСубконто,ЗначениеСубконто", Элемент.КодСчета.ВидыСубконто[2].ВидСубконто, Элемент.Субконто3));
				КонецЕсли;
				
				Элемент.ДополнительныеПараметры = ДопПараметры;
				
			КонецЦикла;
			
			ТаблицаРасшифровки = ТаблицаРасшифровки.Скопировать(, "ИмяПоказателя, НаименованиеПоказателя, ЗнакОперации, НаименованиеСлагаемого, Сумма, ИмяРаздела, ДополнительныеПараметры");
			
		КонецЕсли;
		
		СтруктураРеквизитовФормы.АдресВременногоХранилищаРасшифровки = ПоместитьВоВременноеХранилище(ТаблицаРасшифровки, УникальныйИдентификатор);
		Элементы.Расшифровать.Доступность = Истина;
		Элементы.ТабличныйДокументКонтекстноеМенюРасшифровать.Доступность = Истина;
		
	КонецЕсли;
	
	Если НЕ СписокСохранения.Свойство("ПечатьБезШтрихкодаРазрешена", СтруктураРеквизитовФормы.мПечатьБезШтрихкодаРазрешена) Тогда
		СтруктураРеквизитовФормы.мПечатьБезШтрихкодаРазрешена = Ложь;
	КонецЕсли;
	
	ВосстановитьПризнакАктуальностиСведенийРаздела(СписокСохранения, "Раздел8");
	ВосстановитьПризнакАктуальностиСведенийРаздела(СписокСохранения, "Раздел8_Прил1");
	ВосстановитьПризнакАктуальностиСведенийРаздела(СписокСохранения, "Раздел9");
	ВосстановитьПризнакАктуальностиСведенийРаздела(СписокСохранения, "Раздел9_Прил1");
	ВосстановитьПризнакАктуальностиСведенийРаздела(СписокСохранения, "Раздел10");
	ВосстановитьПризнакАктуальностиСведенийРаздела(СписокСохранения, "Раздел11");
	ВосстановитьПризнакАктуальностиСведенийРаздела(СписокСохранения, "Раздел12");
	
	Если НЕ СписокСохранения.Свойство("ВыполненоЗаполнениеРазделов", ВыполненоЗаполнениеРазделов) Тогда
		УстановитьПризнакиЗаполненияПоДаннымРегистра();
	Иначе
		СтруктураРеквизитовФормы.ВыполненоЗаполнениеРазделов = ВыполненоЗаполнениеРазделов;
	КонецЕсли;
	
	СписокСохранения.Свойство("УспешноеАвтозаполнение", УспешноеАвтозаполнение);
	СтруктураРеквизитовФормы.УспешноеАвтозаполнение = УспешноеАвтозаполнение;
	
	Если СтруктураРеквизитовФормы.ОтчетСтарогоОбразца
		И СтруктураРеквизитовФормы.УспешноеАвтозаполнение = Неопределено
		И РегламентированнаяотчетностьПроверкаНДС.ОтчетЗаполнялсяСДелениемНаСекции(
		СтруктураРеквизитовФормы.мСохраненныйДок) Тогда
		СтруктураРеквизитовФормы.УспешноеАвтозаполнение = Истина;
	КонецЕсли;
	
	ОтчетЗаполнялсяБезДеленияНаСекции = (СтруктураРеквизитовФормы.УспешноеАвтозаполнение = Неопределено);
	
	Если ОтчетЗаполнялсяБезДеленияНаСекции Тогда
		ВосстановитьСведенияНДС("Раздел8");
		ВосстановитьСведенияНДС("Раздел8_Прил1");
		ВосстановитьСведенияНДС("Раздел9");
		ВосстановитьСведенияНДС("Раздел9_Прил1");
		ВосстановитьСведенияНДС("Раздел10");
		ВосстановитьСведенияНДС("Раздел11");
		ВосстановитьСведенияНДС("Раздел12");
	Иначе
		Если СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено Тогда
			СтруктураРеквизитовФормы.УспешноеАвтозаполнение = Неопределено;
		Иначе
			СформироватьСпискиСекций();
		КонецЕсли;
	КонецЕсли;
	
	СформироватьДеревоРазделовОтчетаНаСервере();
	
	Префикс = "ПолеТабличногоДокумента";
	
	Для Каждого Раздел Из мСвойстваРазделовДекларации.ПолучитьЭлементы() Цикл
		Если НЕ Раздел.МногостраничностьВРазделе
		   И Раздел.ИмяСтраницы <> "Раздел8"
		   И Раздел.ИмяСтраницы <> "Раздел8_Прил1"
		   И Раздел.ИмяСтраницы <> "Раздел9"
		   И Раздел.ИмяСтраницы <> "Раздел9_Прил1"
		   И Раздел.ИмяСтраницы <> "Раздел10"
		   И Раздел.ИмяСтраницы <> "Раздел11"
		   И Раздел.ИмяСтраницы <> "Раздел12" Тогда
			Если СтруктураРеквизитовФормы.ОтчетСтарогоОбразца Тогда
				// Конвертация данных после перехода с 2.0 на 3.0.
				ОбъектОтчета(ЭтаФорма.ИмяФормы).ВосстановитьСтруктуруДанныхРазделаСтарогоОбразца(
					СтруктураРеквизитовФормы.мВыбраннаяФорма,
					СписокСохранения,
					Префикс + Раздел.ИмяСтраницы,
					Раздел.ИмяСтраницы);
				Если СписокСохранения.Свойство("ДанныеМногострочныхРазделов", ДанныеМногострочныхРазделов) Тогда
					Если Раздел.ИмяСтраницы = "Раздел3_Прил2" Тогда
						ЗначениеВДанныеФормы(ДанныеМногострочныхРазделов["П0003200001"], ЭтаФорма["П0003200001"]);
					ИначеЕсли Раздел.ИмяСтраницы = "Раздел4" Тогда
						ЗначениеВДанныеФормы(ДанныеМногострочныхРазделов["П0004М100"], ЭтаФорма["П0004М100"]);
						ЗначениеВДанныеФормы(ДанныеМногострочныхРазделов["П0004М200"], ЭтаФорма["П0004М200"]);
						ЗначениеВДанныеФормы(ДанныеМногострочныхРазделов["П0004М300"], ЭтаФорма["П0004М300"]);
					ИначеЕсли Раздел.ИмяСтраницы = "Раздел6" Тогда
						ЗначениеВДанныеФормы(ДанныеМногострочныхРазделов["П0006М100"], ЭтаФорма["П0006М100"]);
						ЗначениеВДанныеФормы(ДанныеМногострочныхРазделов["П0006М200"], ЭтаФорма["П0006М200"]);
						ЗначениеВДанныеФормы(ДанныеМногострочныхРазделов["П0006М300"], ЭтаФорма["П0006М300"]);
					ИначеЕсли Раздел.ИмяСтраницы = "Раздел7" Тогда
						ЗначениеВДанныеФормы(ДанныеМногострочныхРазделов["П0007000001"], ЭтаФорма["П0007000001"]);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			ЭтаФорма["СтруктураДанных" + Раздел.ИмяСтраницы] = ПоказателиОтчета[Префикс + Раздел.ИмяСтраницы];
		КонецЕсли;
	КонецЦикла;
	
	ЗаполнитьДатуПодписи(ЭтаФорма);
	
	ИмяТекРаздела = "Титульный";
	
	Для Каждого ЭлСтруктуры Из ЭтаФорма["СтруктураДанных" + ИмяТекРаздела] Цикл
		Если ТабличныйДокумент.Области.Найти(ЭлСтруктуры.Ключ) <> Неопределено Тогда
			Если ТабличныйДокумент.Области.Найти(ЭлСтруктуры.Ключ).Имя = "ДатаПодписи" Тогда
				ТабличныйДокумент.Области[ЭлСтруктуры.Ключ].Значение = ДатаПодписи;
			Иначе
				ТабличныйДокумент.Области[ЭлСтруктуры.Ключ].Значение = ЭлСтруктуры.Значение;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(СтруктураДанныхРаздел1.П000100001003) Тогда
		СтруктураРеквизитовФормы.Вставить(
		"КодТерриториальногоОбразования", СокрЛП(СтруктураДанныхРаздел1.П000100001003));
	ИначеЕсли ЗначениеЗаполнено(ТаблицаСтраницыРаздела2[0].Данные[0].Значение.П000200005003) Тогда
		СтруктураРеквизитовФормы.Вставить(
		"КодТерриториальногоОбразования", СокрЛП(ТаблицаСтраницыРаздела2[0].Данные[0].Значение.П000200005003));
	КонецЕсли;
	
	Если ВерсияФормыИзменилась Тогда
		ОбновитьПользовательскиеНастройки();
	КонецЕсли;
	
	РегламентированнаяОтчетность.ОперацииПриВосстановленииРегламентированногоОтчета(ЭтаФорма);
	
	КопироватьДанныеФормы(мДеревоСтраницОтчета, мДеревоВыбранныхСтраниц);
	
	Если НЕ ЗначениеЗаполнено(СтруктураРеквизитовФормы.мСкопированаФорма) Тогда
		
		ВосстановитьРезультатПроверкиВыгрузки();
		
	КонецЕсли;
	
	//ПроверкаКонтрагентовБРО
	ПроверкаКонтрагентовБРО.ВосстановитьРезультатыПроверкиПриСозданииНаСервере(ЭтотОбъект);
	//Конец ПроверкаКонтрагентовБРО
	
	Модифицированность = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьСпискиСекций()
	
	СформироватьСписокСекцийРаздела("Раздел8");
	СформироватьСписокСекцийРаздела("Раздел8_Прил1");
	СформироватьСписокСекцийРаздела("Раздел9");
	СформироватьСписокСекцийРаздела("Раздел9_Прил1");
	СформироватьСписокСекцийРаздела("Раздел10");
	СформироватьСписокСекцийРаздела("Раздел11");
	СформироватьСписокСекцийРаздела("Раздел12");
	
КонецПроцедуры

&НаСервере
Процедура СформироватьСписокСекцийРаздела(ИмяРаздела)
	
	ОбъектОтчета = ОбъектОтчета(ЭтаФорма.ИмяФормы);
	
	СписокСтраницРаздела = ОбъектОтчета.СписокСекцийРазделаИзРегистра(
		СтруктураРеквизитовФормы.мВыбраннаяФорма, ИмяРаздела,
		РеквизитФормыВЗначение("Страницы" + ИмяРаздела), СтруктураРеквизитовФормы);
	
	ЗначениеВРеквизитФормы(СписокСтраницРаздела, "Страницы" + ИмяРаздела);
	
КонецПроцедуры

&НаСервере
Функция СписокСекцийРазделаИзРегистра(ИмяРаздела)
	
	ОбъектОтчета = ОбъектОтчета(ЭтаФорма.ИмяФормы);
	
	Возврат ОбъектОтчета.СписокСекцийРазделаИзРегистра(СтруктураРеквизитовФормы.мВыбраннаяФорма,
													   ИмяРаздела,
													   РеквизитФормыВЗначение("Страницы" + ИмяРаздела),
													   СтруктураРеквизитовФормы);
	
КонецФункции

&НаСервере
Процедура УстановитьПризнакиЗаполненияПоДаннымРегистра()
	
	СтруктураРеквизитовФормы.ВыполненоЗаполнениеРазделов
	= ОбъектОтчета(ЭтаФорма.ИмяФормы).НовыйНаборПризнаковЗаполнения(СтруктураРеквизитовФормы.мВыбраннаяФорма);
	
	УстановитьПризнакиЗаполненияРазделаПоДаннымРегистра("Раздел8");
	УстановитьПризнакиЗаполненияРазделаПоДаннымРегистра("Раздел8_Прил1");
	УстановитьПризнакиЗаполненияРазделаПоДаннымРегистра("Раздел9");
	УстановитьПризнакиЗаполненияРазделаПоДаннымРегистра("Раздел9_Прил1");
	УстановитьПризнакиЗаполненияРазделаПоДаннымРегистра("Раздел10");
	УстановитьПризнакиЗаполненияРазделаПоДаннымРегистра("Раздел11");
	УстановитьПризнакиЗаполненияРазделаПоДаннымРегистра("Раздел12");
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПризнакиЗаполненияРазделаПоДаннымРегистра(ИмяРаздела)
	
	ЗаписьРегистраСведений = РегистрыСведений.ДополнительныеФайлыРегламентированныхОтчетов.СоздатьМенеджерЗаписи();
	ЗаписьРегистраСведений.РегламентированныйОтчет = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
	ЗаписьРегистраСведений.ВидДополнительногоФайла = "Данные" + ИмяРаздела;
	
	ЗаписьРегистраСведений.Прочитать();
	
	Если ЗначениеЗаполнено(ЗаписьРегистраСведений.ВидДополнительногоФайла) Тогда
		СтруктураРеквизитовФормы.ВыполненоЗаполнениеРазделов.Вставить(ИмяРаздела, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьМногостраничныйРазделИзТаблицы(ИмяРаздела, ТаблицаСДанными)
	
	ИмяРеквизитаФормы = Неопределено;
	Если НЕ мСтруктураМногостраничныхРазделов.Свойство(ИмяРаздела, ИмяРеквизитаФормы) Тогда
		Возврат;
	КонецЕсли;
	
	РеквизитФормы = ЭтаФорма[ИмяРеквизитаФормы];
	ЗначениеВДанныеФормы(ТаблицаСДанными, РеквизитФормы);
	
	Если РеквизитФормы[0].Свойство("Данные") Тогда
		Для Каждого СтрокаТаблицы Из РеквизитФормы Цикл
			Если ТипЗнч(СтрокаТаблицы.Данные) = Тип("СписокЗначений") Тогда
				СтрокаТаблицы.Данные.Очистить();
				СтрокаТаблицы.Данные.Добавить(ТаблицаСДанными[РеквизитФормы.Индекс(СтрокаТаблицы)].Данные);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если РеквизитФормы[0].Свойство("ДанныеДопСтрок") Тогда
		Ном = 0;
		Для Каждого СтрокаТаблицы Из ТаблицаСДанными Цикл
			Если ТипЗнч(СтрокаТаблицы.ДанныеДопСтрок) = Тип("Структура") Тогда
				Для Каждого ЭлСтруктуры Из СтрокаТаблицы.ДанныеДопСтрок Цикл
					ТаблЗнач = ЭлСтруктуры.Значение;
					СтрокаТаблЗначДанныеДопСтрок = ЭтаФорма["Хранилище"
					+ ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ИмяРаздела)].Добавить().Таблица;
					ЗначениеВДанныеФормы(ТаблЗнач, СтрокаТаблЗначДанныеДопСтрок);
					РеквизитФормы[Ном].ДанныеДопСтрок.Добавить(
					СтрокаТаблЗначДанныеДопСтрок, "ДанныеФормыКоллекцияТаблицаДопСтрокРаздела");
				КонецЦикла;
			ИначеЕсли ТипЗнч(СтрокаТаблицы.ДанныеДопСтрок) = Тип("ТаблицаЗначений") Тогда
				СтрокаТаблЗначДанныеДопСтрок = ЭтаФорма["Хранилище"
				+ ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ИмяРаздела)].Добавить().Таблица;
				ЗначениеВДанныеФормы(СтрокаТаблицы.ДанныеДопСтрок, СтрокаТаблЗначДанныеДопСтрок);
				РеквизитФормы[Ном].ДанныеДопСтрок.Добавить(
				СтрокаТаблЗначДанныеДопСтрок, "ДанныеФормыКоллекцияТаблицаДопСтрокРаздела");
			КонецЕсли;
			Ном = Ном + 1;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВывестиРазделВТабличныйДокументНаКлиенте(ИмяГруппы, СтруктураГруппы) Экспорт
	ВывестиРазделВТабличныйДокумент(ЭтаФорма, ИмяГруппы, СтруктураГруппы);
КонецПроцедуры

&НаСервере
Процедура ВывестиРазделВТабличныйДокументНаСервере(ИмяГруппы, СтруктураГруппы) Экспорт
	ВывестиРазделВТабличныйДокумент(ЭтаФорма, ИмяГруппы, СтруктураГруппы);
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ВывестиРазделВТабличныйДокумент(Форма, ИмяГруппы, СтруктураГруппы)
	Перем ИсходноеКоличествоСтрокГруппы;
	
	#Если НаКлиенте Тогда
		ТекущаяСтраница = Форма.ОпределитьТабличноеПолеПоИдМногострочногоРазделаНаКлиенте(ИмяГруппы);
	#Иначе
		ТекущаяСтраница = Форма.ОпределитьТабличноеПолеПоИдМногострочногоРазделаНаСервере(ИмяГруппы);
	#КонецЕсли
	
	// определим исходное колво строк многострочного раздела,
	// соответствующее бумажной форме отчета
	Форма.мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);
	
	// реальное кол-во строк (колво заполненных строк)
	ТекущееКоличествоСтрокГруппы = СтруктураГруппы.Количество();
	
	ТекТабличноеПолеИмя = "ТабличныйДокумент";
	
	ТекТабличноеПоле = Форма[ТекТабличноеПолеИмя];
	
	ПерерисоватьСтроки = (НЕ ТекущееКоличествоСтрокГруппы > ИсходноеКоличествоСтрокГруппы);
	
	Раздел = Форма[ТекТабличноеПолеИмя];
	
	НастройкиМнгЧ = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСвойствоРаздела(
	Форма, ТекущаяСтраница, "МногострочностьВРазделе").НайтиСтроки(Новый Структура("ИдГруппы", ИмяГруппы))[0];
	ВысотаСтроки = НастройкиМнгЧ.ВысотаСтроки;
	
	// При восстановлении сохраненных данных отчета сравниваем исходное кол-во
	// отображаемых в форме строк многострочного раздела с реальным количеством
	// созданных строк в сохраненном отчете.
	Если ТекущееКоличествоСтрокГруппы > ИсходноеКоличествоСтрокГруппы Тогда
		
		// При превышении реального кол-ва строк над исходным кол-вом (по шаблону),
		// автоматически добавляем необходимое колво строк.
		Форма.ДобавитьНеобходимоеКоличествоДопСтрокНаСервере(ТекТабличноеПоле, ТекТабличноеПолеИмя,
		ИсходноеКоличествоСтрокГруппы, ТекущееКоличествоСтрокГруппы, ИмяГруппы, СтруктураГруппы, ВысотаСтроки);

		Форма[ТекТабличноеПолеИмя] = ТекТабличноеПоле;
		
	КонецЕсли;
	
	// выводим значения строк
	Для Каждого СтрокаТаблицы Из СтруктураГруппы Цикл
		НомерСтрокиВТаблице      = СтруктураГруппы.Индекс(СтрокаТаблицы);
		НомерСтрокиВФормеТаблицыСтр = Формат(НомерСтрокиВТаблице + 1, "ЧГ=");
		
		Для НомерГрафы = 1 По Форма.мСтруктураКолвоКолонокРазделов[ИмяГруппы] Цикл
			
			Если СтрДлина(ИмяГруппы) = 9 Тогда
				
				Если ИмяГруппы = Форма.СтруктураРеквизитовФормы.мИдГруппы4М1 Тогда
					
					КолонкаТаблицыИмя = ИмяГруппы + Формат((НомерГрафы) * 10, "ЧЦ=2; ЧВН=") + "03";
					
				ИначеЕсли ИмяГруппы = Форма.СтруктураРеквизитовФормы.мИдГруппы4М2 Тогда
					
					КолонкаТаблицыИмя = ИмяГруппы + Формат((НомерГрафы + 5) * 10, "ЧЦ=2; ЧВН=") + "03";
					
				ИначеЕсли ИмяГруппы = Форма.СтруктураРеквизитовФормы.мИдГруппы4М3 Тогда
					
					КолонкаТаблицыИмя = Лев(ИмяГруппы, 8) + Формат((НомерГрафы + 8) * 10, "ЧЦ=3; ЧВН=") + "03";
					
				ИначеЕсли ИмяГруппы = Форма.СтруктураРеквизитовФормы.мИдГруппы6М1 Тогда
					
					КолонкаТаблицыИмя = ИмяГруппы + Формат((НомерГрафы) * 10, "ЧЦ=2; ЧВН=") + "03";
					
				ИначеЕсли ИмяГруппы = Форма.СтруктураРеквизитовФормы.мИдГруппы6М2 Тогда
					
					КолонкаТаблицыИмя = Лев(ИмяГруппы, 8) + Формат((НомерГрафы + 6) * 10, "ЧЦ=3; ЧВН=") + "03";
					
				ИначеЕсли ИмяГруппы = Форма.СтруктураРеквизитовФормы.мИдГруппы6М3 Тогда
					
					КолонкаТаблицыИмя = Лев(ИмяГруппы, 8) + Формат((НомерГрафы + 10) * 10, "ЧЦ=3; ЧВН=") + "03";
					
				Иначе
					
					КолонкаТаблицыИмя = ИмяГруппы + Формат((НомерГрафы) * 10, "ЧЦ=2; ЧВН=") + "03";
					
				КонецЕсли;
				
			Иначе
				
				КолонкаТаблицыИмя = ИмяГруппы + Формат(НомерГрафы, "ЧЦ=2; ЧВН=");
				
			КонецЕсли;
				
			Если СтруктураГруппы[0].Свойство(КолонкаТаблицыИмя) Тогда
				
				ЗначениеЯчейки = СтрокаТаблицы[КолонкаТаблицыИмя];
				ИмяЯчейки      = КолонкаТаблицыИмя + "_" + НомерСтрокиВФормеТаблицыСтр;
				
				ОбластьЯчейкиТаблицы = ТекТабличноеПоле.Области[ИмяЯчейки];
				
				Если ОбластьЯчейкиТаблицы.СодержитЗначение = Истина Тогда
					ОбластьЯчейкиТаблицы.Значение = ЗначениеЯчейки;
				Иначе
					ОбластьЯчейкиТаблицы.Текст = ЗначениеЯчейки;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;

	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ДобавитьНеобходимоеКоличествоДопСтрокНаСервере(ТекТабличноеПоле, ТекТабличноеПолеИмя, ИсходноеКоличествоСтрокГруппы, ТекущееКоличествоСтрокГруппы, ИмяГруппы, СтруктураГруппы, ВысотаСтроки) Экспорт
	
	ПостфиксВИмениОбластиМногострочнаяЧасть = "";
	Если ИмяГруппы = СтруктураРеквизитовФормы.мИдГруппы4М1 Тогда
		ПостфиксВИмениОбластиМногострочнаяЧасть = "4М1";
	ИначеЕсли ИмяГруппы = СтруктураРеквизитовФормы.мИдГруппы4М2 Тогда
		ПостфиксВИмениОбластиМногострочнаяЧасть = "4М2";
	ИначеЕсли ИмяГруппы = СтруктураРеквизитовФормы.мИдГруппы4М3 Тогда
		ПостфиксВИмениОбластиМногострочнаяЧасть = "4М3";
	ИначеЕсли ИмяГруппы = СтруктураРеквизитовФормы.мИдГруппы6М1 Тогда
		ПостфиксВИмениОбластиМногострочнаяЧасть = "6М1";
	ИначеЕсли ИмяГруппы = СтруктураРеквизитовФормы.мИдГруппы6М2 Тогда
		ПостфиксВИмениОбластиМногострочнаяЧасть = "6М2";
	ИначеЕсли ИмяГруппы = СтруктураРеквизитовФормы.мИдГруппы6М3 Тогда
		ПостфиксВИмениОбластиМногострочнаяЧасть = "6М3";
	КонецЕсли;
	
	ОбластьДопСтроки = ТекТабличноеПоле.ПолучитьОбласть("МногострочнаяЧасть" + ПостфиксВИмениОбластиМногострочнаяЧасть);
	
	КоординатыОбластей = Новый Структура();
	
	Для Каждого Область Из ТекТабличноеПоле.Области Цикл
		
		Если СтрНайти(Область.Имя, "_") Тогда
			
			КоординатыОбластей.Вставить(Область.Имя, Область.Верх);
			
		КонецЕсли;
		
	КонецЦикла;
	
	МногострочнаяЧастьВерх = ТекТабличноеПоле.Области["МногострочнаяЧасть" + ПостфиксВИмениОбластиМногострочнаяЧасть].Верх;
	
	МногострочнаяЧастьНиз = ТекТабличноеПоле.Области["МногострочнаяЧасть" + ПостфиксВИмениОбластиМногострочнаяЧасть].Низ;
	
	ТекТабличноеПоле.ВставитьОбласть(ОбластьДопСтроки.Область(), ТекТабличноеПоле.Область(
	МногострочнаяЧастьНиз + 1, , МногострочнаяЧастьНиз + (ТекущееКоличествоСтрокГруппы - 1) * ВысотаСтроки),
	ТипСмещенияТабличногоДокумента.ПоВертикали);
	
	Для НомНовойСтроки = ИсходноеКоличествоСтрокГруппы По ТекущееКоличествоСтрокГруппы Цикл
		
		Постфикс = Формат(ТекущееКоличествоСтрокГруппы - НомНовойСтроки + 1, "ЧГ=");
		
		Для Каждого Область Из ОбластьДопСтроки.Области Цикл
			
			Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
				
				ОбластьТаблДок = ТекТабличноеПоле.Область(КоординатыОбластей[Область.Имя]
				+ (ТекущееКоличествоСтрокГруппы - НомНовойСтроки) * ВысотаСтроки, Область.Лево, КоординатыОбластей[Область.Имя]
				+ (ТекущееКоличествоСтрокГруппы - НомНовойСтроки) * ВысотаСтроки, Область.Право);
				
				Если ОбластьТаблДок.СодержитЗначение Тогда
					ОбластьТаблДок.Очистить();
				КонецЕсли;
				
				ОбластьТаблДок.Имя = Лев(Область.Имя, СтрНайти(Область.Имя, "_")) + Постфикс;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;	
	
	ТекТабличноеПоле.Область(ТекТабличноеПоле.Области["МногострочнаяЧасть" + ПостфиксВИмениОбластиМногострочнаяЧасть].Верх, ,
	ТекТабличноеПоле.Области["МногострочнаяЧасть" + ПостфиксВИмениОбластиМногострочнаяЧасть].Низ).Имя = "";
	
	ТекТабличноеПоле.Область(МногострочнаяЧастьВерх, , МногострочнаяЧастьНиз).Имя = "МногострочнаяЧасть" + ПостфиксВИмениОбластиМногострочнаяЧасть;
	
КонецПроцедуры

&НаСервере
Функция ОбновитьПеременныеМодуляНаСервере(ИмяПоказателя, ЗначениеПоказателя) Экспорт
	
	ПеременныеМодуля = Новый Структура;
	ПеременныеМодуля.Вставить("мПредставительФизЛицо",  СтруктураРеквизитовФормы.мПредставительФизЛицо);
	ПеременныеМодуля.Вставить("мНазваниеПредставителя", СтруктураРеквизитовФормы.мНазваниеПредставителя);
	ПеременныеМодуля.Вставить("мДокументПредставителя", СтруктураРеквизитовФормы.мДокументПредставителя);
	ПеременныеМодуля.Вставить("мФамилияПредставителя",  СтруктураРеквизитовФормы.мФамилияПредставителя);
	ПеременныеМодуля.Вставить("мИмяПредставителя",      СтруктураРеквизитовФормы.мИмяПредставителя);
	ПеременныеМодуля.Вставить("мОтчествоПредставителя", СтруктураРеквизитовФормы.мОтчествоПредставителя);
	
	флОбновитьПеременныеМодуля = ОбновитьПеременныеМодуля(ИмяПоказателя, ЗначениеПоказателя, ПеременныеМодуля);
	
	СтруктураРеквизитовФормы.мПредставительФизЛицо  = ПеременныеМодуля.мПредставительФизЛицо;
	СтруктураРеквизитовФормы.мНазваниеПредставителя = ПеременныеМодуля.мНазваниеПредставителя;
	СтруктураРеквизитовФормы.мДокументПредставителя = ПеременныеМодуля.мДокументПредставителя;
	СтруктураРеквизитовФормы.мФамилияПредставителя  = ПеременныеМодуля.мФамилияПредставителя;
	СтруктураРеквизитовФормы.мИмяПредставителя      = ПеременныеМодуля.мИмяПредставителя;
	СтруктураРеквизитовФормы.мОтчествоПредставителя = ПеременныеМодуля.мОтчествоПредставителя;
	
	Возврат флОбновитьПеременныеМодуля;
	
КонецФункции

&НаКлиенте
Функция ОбновитьПеременныеМодуляНаКлиенте(ИмяПоказателя, ЗначениеПоказателя) Экспорт

	ПеременныеМодуля = Новый Структура;
	ПеременныеМодуля.Вставить("мПредставительФизЛицо",  СтруктураРеквизитовФормы.мПредставительФизЛицо);
	ПеременныеМодуля.Вставить("мНазваниеПредставителя", СтруктураРеквизитовФормы.мНазваниеПредставителя);
	ПеременныеМодуля.Вставить("мДокументПредставителя", СтруктураРеквизитовФормы.мДокументПредставителя);
	ПеременныеМодуля.Вставить("мФамилияПредставителя",  СтруктураРеквизитовФормы.мФамилияПредставителя);
	ПеременныеМодуля.Вставить("мИмяПредставителя",      СтруктураРеквизитовФормы.мИмяПредставителя);
	ПеременныеМодуля.Вставить("мОтчествоПредставителя", СтруктураРеквизитовФормы.мОтчествоПредставителя);
	
	флОбновитьПеременныеМодуля = ОбновитьПеременныеМодуля(ИмяПоказателя, ЗначениеПоказателя, ПеременныеМодуля);
	
	СтруктураРеквизитовФормы.мПредставительФизЛицо  = ПеременныеМодуля.мПредставительФизЛицо;
	СтруктураРеквизитовФормы.мНазваниеПредставителя = ПеременныеМодуля.мНазваниеПредставителя;
	СтруктураРеквизитовФормы.мДокументПредставителя = ПеременныеМодуля.мДокументПредставителя;
	СтруктураРеквизитовФормы.мФамилияПредставителя  = ПеременныеМодуля.мФамилияПредставителя;
	СтруктураРеквизитовФормы.мИмяПредставителя      = ПеременныеМодуля.мИмяПредставителя;
	СтруктураРеквизитовФормы.мОтчествоПредставителя = ПеременныеМодуля.мОтчествоПредставителя;
	
	Возврат флОбновитьПеременныеМодуля;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ОбновитьПеременныеМодуля(ИмяПоказателя, ЗначениеПоказателя, ПеременныеМодуля)
	
	ИзмененияПроизошли = Ложь;
	
	Если Лев(ИмяПоказателя, 1) = "_" Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ИмяПоказателя = "ПредставительФизЛицо" Тогда
		ПеременныеМодуля.мПредставительФизЛицо = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "НазваниеПредставителя" Тогда
		ПеременныеМодуля.мНазваниеПредставителя = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "ДокументПредставителя" Тогда
		ПеременныеМодуля.мДокументПредставителя = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "ФамилияПредставителя" Тогда
		ПеременныеМодуля.мФамилияПредставителя = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "ИмяПредставителя" Тогда
		ПеременныеМодуля.мИмяПредставителя = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "ОтчествоПредставителя" Тогда
		ПеременныеМодуля.мОтчествоПредставителя = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	КонецЕсли;
	
	Возврат ИзмененияПроизошли;
	
КонецФункции

&НаКлиенте
Процедура СохранитьОтчет(Команда)
	
	Если Элементы.РазделыОтчета.ТекущиеДанные = Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если (НЕ АвтоЗаполнениеРеглОтчетаДоступно()
		ИЛИ Элементы.НаименованиеЭтапа.Заголовок = "Сдано") Тогда
		
		ПоказатьПредупреждение(, НСтр("ru='Декларация по НДС сдана. Запись запрещена.
		|Для подготовки уточненной декларации создайте новый отчет.'"));
		Возврат;
		
	КонецЕсли;
	
	СохранитьНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНаКлиенте(Автосохранение = Ложь, ВыполняемоеОповещение = Неопределено, ИзмененСтатусОтчета = Ложь) Экспорт
	
	Если (НЕ АвтоЗаполнениеРеглОтчетаДоступно()
		ИЛИ Элементы.НаименованиеЭтапа.Заголовок = "Сдано")
		И Модифицированность И НЕ ИзмененСтатусОтчета Тогда
		
		ПоказатьПредупреждение(, НСтр("ru='Декларация по НДС сдана. Запись запрещена.
		|Для подготовки уточненной декларации создайте новый отчет.'"));
		Возврат;
		
	КонецЕсли;
	
	Если СтруктураДанныхТитульный.Количество() = 0
		ИЛИ СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
		СтруктураДанныхТитульный.Вставить("КодИМНС", ТабличныйДокумент.Области.КодИМНС.Значение);
		СтруктураДанныхТитульный.Вставить("КПП1", ТабличныйДокумент.Области.КПП1.Значение);
		СтруктураДанныхТитульный.Вставить("НомерКорректировки", ТабличныйДокумент.Области.НомерКорректировки.Значение);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СтруктураДанныхТитульный.НомерКорректировки) Тогда
		ЗначениеКорректировки = 0;
	Иначе
		ЗначениеКорректировки = Число(СтруктураДанныхТитульный.НомерКорректировки);
	КонецЕсли;
	Вариант = СтруктураРеквизитовФормы.ВидДокумента * ЗначениеКорректировки;
	
	КодИФНС = СтруктураДанныхТитульный.КодИМНС;
	КПП = СтруктураДанныхТитульный.КПП1;
	
	Если НЕ РегламентированнаяОтчетностьКлиент.ПриЗаписиРегламентированногоОтчетаНаКлиенте(ЭтаФорма, КодИФНС, Автосохранение, Вариант) Тогда
		Возврат;
	КонецЕсли;
	
	ПодобныйОтчетСуществует = Ложь;
	ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки = Ложь;
	
	Если Элементы.РазделыОтчета.ТекущиеДанные = Неопределено Тогда
		НаименованиеТекущегоРаздела = СтруктураРеквизитовФормы.НаимТекущегоРаздела;
	Иначе
		НаименованиеТекущегоРаздела = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
	КонецЕсли;
	
	РезультатСохранения = ПередСохранением(КодИФНС, КПП, ПодобныйОтчетСуществует, Вариант, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, Автосохранение, НаименованиеТекущегоРаздела);
	
	ВидДокументаНомерКорректировкиИзменен = Неопределено;
	
	Если ПодобныйОтчетСуществует И Автосохранение Тогда
		Возврат;
	КонецЕсли;
	
	НуженВопросПередСохранением = (ПодобныйОтчетСуществует ИЛИ ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки);
	
	Если НуженВопросПередСохранением Тогда
		
		СохранитьНаКлиентеСВопросом(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, ПодобныйОтчетСуществует, КодИФНС, КПП);
		
	Иначе
		
		ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНаКлиентеСВопросом(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, ПодобныйОтчетСуществует, КодИФНС, КПП)
	
	Если ПодобныйОтчетСуществует Тогда
		
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(КодВозвратаДиалога.Да, "Сохранить");
		Кнопки.Добавить(КодВозвратаДиалога.Нет, "Отмена");
		
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Отчет с видом %1 уже существует.
			|Сохранить отчет с таким же видом?'"), ?(Вариант = 0, """Первичный""", """Корректирующий/" + Вариант + """"));
		ДополнительныеПараметры = Новый Структура("Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, КодИФНС, КПП", Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, КодИФНС, КПП);
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросСохранитьОтчетСТакимЖеВидомЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, Кнопки, , Кнопки.Получить(1).Значение);
		
	Иначе
		
		СохранитьНаКлиентеСВопросомПродолжение(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки,КодИФНС, КПП);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросСохранитьОтчетСТакимЖеВидомЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Автосохранение = ДополнительныеПараметры.Автосохранение;
	Вариант = ДополнительныеПараметры.Вариант;
	ВыполняемоеОповещение = ДополнительныеПараметры.ВыполняемоеОповещение;
	КодИФНС = ДополнительныеПараметры.КодИФНС;
	КПП = ДополнительныеПараметры.КПП;
	ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки = ДополнительныеПараметры.ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки;
	
	Ответ = РезультатВопроса;
	
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		
		Элементы.НаименованиеЭтапа.Заголовок = "В работе";
		
		Возврат;
		
	КонецЕсли;
	
	СохранитьНаКлиентеСВопросомПродолжение(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки,КодИФНС, КПП);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНаКлиентеСВопросомПродолжение(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, КодИФНС, КПП)
	
	Если ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки Тогда
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("ВидОтчета", Вариант);
		
		ФормаВопроса = РегламентированнаяОтчетностьКлиент.ПолучитьОбщуюФормуПоИмени("ВопросПриИзмененииВидаДокументаНомераКорректировки", ПараметрыФормы);
		ФормаВопроса.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		ДополнительныеПараметры = Новый Структура("Автосохранение, Вариант, ВыполняемоеОповещение, КодИФНС, КПП", Автосохранение, Вариант, ВыполняемоеОповещение,КодИФНС, КПП );
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросПриИзмененииВидаДокументаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ФормаВопроса.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
		ФормаВопроса.Открыть();
	Иначе
		Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Сохраняется %1...'"), ЭтаФорма.Заголовок), , , БиблиотекаКартинок.Записать);
		РезультатСохранения = Сохранить(Автосохранение, КодИФНС, КПП, Вариант, Неопределено, Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
		ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПриИзмененииВидаДокументаЗавершение(КодВозврата, ДополнительныеПараметры) Экспорт
	
	Автосохранение = ДополнительныеПараметры.Автосохранение;
	Вариант = ДополнительныеПараметры.Вариант;
	ВыполняемоеОповещение = ДополнительныеПараметры.ВыполняемоеОповещение;
	КодИФНС = ДополнительныеПараметры.КодИФНС;
	КПП = ДополнительныеПараметры.КПП;
	Если КодВозврата = КодВозвратаДиалога.Да
		ИЛИ КодВозврата = КодВозвратаДиалога.Нет Тогда
		ВидДокументаНомерКорректировкиИзменен = ?(КодВозврата = КодВозвратаДиалога.Да, Истина, Ложь);
	Иначе
		Возврат;
	КонецЕсли;
	
	Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Сохраняется %1...'"), ЭтаФорма.Заголовок), , , БиблиотекаКартинок.Записать);
	РезультатСохранения = Сохранить(Автосохранение, КодИФНС, КПП, Вариант, ВидДокументаНомерКорректировкиИзменен, Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
	ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения)
	
	КлючУникальности = СтруктураРеквизитовФормы.мСохраненныйДок;
	
	Если РезультатСохранения Тогда
		
		РегламентированнаяОтчетностьКлиент.ПослеЗаписиРегламентированногоОтчета(ЭтаФорма);
		
		Если ВыполняемоеОповещение <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ВыполняемоеОповещение);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПередСохранением(КодИФНС, КПП, ПодобныйОтчетСуществует, Вариант, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, Автосохранение, НаимТекРаздела)
	
	Если РегламентированнаяОтчетность.БылиИзмененыКлючевыеРеквизитыОтчета(ЭтаФорма, КодИФНС, КПП)
		И РегламентированнаяОтчетность.СуществуетДокументСАналогичнымиРеквизитами(ЭтаФорма, КодИФНС, КПП) Тогда
		
		ПодобныйОтчетСуществует = Истина;
		
	КонецЕсли;
	
	СтруктураРеквизитовФормы.мЗаписываетсяНовыйДокумент = (СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено ИЛИ СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено);
	
	Если Вариант <> Неопределено И ((СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено) ИЛИ (СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено) ИЛИ (Вариант <> СтруктураРеквизитовФормы.мВариант)) Тогда
		
		Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено ИЛИ СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено Тогда
			
		ИначеЕсли Вариант <> СтруктураРеквизитовФормы.мВариант Тогда
			
			ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПодобныйОтчетСуществует
		ИЛИ ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Возврат Сохранить(Автосохранение, КодИФНС, КПП, Вариант, , НаимТекРаздела);
	
КонецФункции

&НаСервере
Функция Сохранить(Автосохранение = Ложь, КодИФНС, КПП, Вариант,
				  ВидДокументаНомерКорректировкиИзменен = Неопределено, НаимТекРаздела) Экспорт	
	
	ДанныеДляРазблокирования = Неопределено;
	
	Если НЕ СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
		Если НЕ СтруктураРеквизитовФормы.мБезОткрытияФормы Тогда
			ДанныеДляРазблокирования = Новый Структура("Ключ,ИдФормы",
			СтруктураРеквизитовФормы.мСохраненныйДок, ЭтаФорма.УникальныйИдентификатор);
		КонецЕсли;
		СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.ПолучитьОбъект();
	КонецЕсли;
	
	Если НЕ РегламентированнаяОтчетность.ПриЗаписиРегламентированногоОтчетаНаСервере(
		ЭтаФорма, КодИФНС, Автосохранение, Вариант, ВидДокументаНомерКорректировкиИзменен,
		СтруктураРеквизитовФормы.мСохраненныйДок) Тогда
		СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
		Возврат Ложь;
	КонецЕсли;
	
	СтруктураРеквизитовФормы.мВариант = Вариант;
	
	СохранитьДанныеРаздела(НаимТекРаздела, Ложь, Ложь);
	
	ЗаполнитьПустыеСтруктурыДанных();
	
	ОбъектОтчета = ОбъектОтчета(ЭтаФорма.ИмяФормы);
	
	РазделыРеглОтчета = ОбъектОтчета.РазделыРеглОтчета(СтруктураРеквизитовФормы.мВыбраннаяФорма);
	РазделыРеглОтчета.Титульный.Данные     = СтруктураДанныхТитульный;
	РазделыРеглОтчета.Раздел1.Данные       = СтруктураДанныхРаздел1;
	РазделыРеглОтчета.Раздел2.Данные       = СведенияМногостраничногоРазделаВТаблице("ТаблицаСтраницыРаздела2");
	РазделыРеглОтчета.Раздел3.Данные       = СтруктураДанныхРаздел3;
	РазделыРеглОтчета.Раздел3_Прил1.Данные = СведенияМногостраничногоРазделаВТаблице("ТаблицаСтраницыРаздела3_Прил1");
	РазделыРеглОтчета.Раздел3_Прил2.Данные = СтруктураДанныхРаздел3_Прил2;
	РазделыРеглОтчета.Раздел4.Данные       = СтруктураДанныхРаздел4;
	РазделыРеглОтчета.Раздел5.Данные       = СведенияМногостраничногоРазделаВТаблице("ТаблицаСтраницыРаздела5");
	РазделыРеглОтчета.Раздел6.Данные       = СтруктураДанныхРаздел6;
	РазделыРеглОтчета.Раздел7.Данные       = СтруктураДанныхРаздел7;
	
	РазделыРеглОтчета.Раздел3_Прил1.ДанныеДопСтрок =
	ДанныеФормыВЗначение(ЭтаФорма[РазделыРеглОтчета.Раздел3_Прил1.ИдентификаторДопСтрок], Тип("ТаблицаЗначений"));
	
	РазделыРеглОтчета.Раздел3_Прил2.ДанныеДопСтрок =
	ДанныеФормыВЗначение(ЭтаФорма[РазделыРеглОтчета.Раздел3_Прил2.ИдентификаторДопСтрок], Тип("ТаблицаЗначений"));
	
	РазделыРеглОтчета.Раздел5.ДанныеДопСтрок =
	ДанныеФормыВЗначение(ЭтаФорма[РазделыРеглОтчета.Раздел5.ИдентификаторДопСтрок], Тип("ТаблицаЗначений"));
	
	РазделыРеглОтчета.Раздел7.ДанныеДопСтрок =
	ДанныеФормыВЗначение(ЭтаФорма[РазделыРеглОтчета.Раздел7.ИдентификаторДопСтрок], Тип("ТаблицаЗначений"));
	
	Для Каждого ДанныеДопСтрок Из РазделыРеглОтчета.Раздел4.ДанныеДопСтрок Цикл
		
		РазделыРеглОтчета.Раздел4.ДанныеДопСтрок.Вставить(ДанныеДопСтрок.Ключ,
		ДанныеФормыВЗначение(ЭтаФорма[ДанныеДопСтрок.Ключ], Тип("ТаблицаЗначений")));
		
	КонецЦикла;
		
	Для Каждого ДанныеДопСтрок Из РазделыРеглОтчета.Раздел6.ДанныеДопСтрок Цикл
		
		РазделыРеглОтчета.Раздел6.ДанныеДопСтрок.Вставить(ДанныеДопСтрок.Ключ,
		ДанныеФормыВЗначение(ЭтаФорма[ДанныеДопСтрок.Ключ], Тип("ТаблицаЗначений")));
		
	КонецЦикла;
	
	СтруктураВариантыЗаполнения = Новый Структура;
	Для Каждого ВариантЗаполнения Из мСтруктураВариантыЗаполнения Цикл
		МассивВариантовЗаполненияСтраниц = Новый Массив;
		Для Каждого СтрокаТаблицыВариантовЗаполнения Из ЭтаФорма["ТаблицаВариантыЗаполнения" + ВариантЗаполнения.Ключ] Цикл
			МассивВариантовЗаполненияСтраниц.Добавить(ДанныеФормыВЗначение(
			СтрокаТаблицыВариантовЗаполнения.ТаблицаВариантовЗаполнения, Тип("ТаблицаЗначений")));
		КонецЦикла;
		СтруктураВариантыЗаполнения.Вставить(ВариантЗаполнения.Ключ, МассивВариантовЗаполненияСтраниц);	
	КонецЦикла;
	
	ПараметрыЗаписи = Новый Структура;
	ПараметрыЗаписи.Вставить("ИсточникОтчета", Метаданные.Отчеты[Сред(Лев(СтрЗаменить(ЭтаФорма.ИмяФормы, "Внешний", ""),
											   СтрНайти(СтрЗаменить(ЭтаФорма.ИмяФормы, "Внешний", ""), ".Форма.")
											   - 1), 7)].Имя);
	ПараметрыЗаписи.Вставить("ИмяФормыОтчета", СтруктураРеквизитовФормы.мВыбраннаяФорма);
	ПараметрыЗаписи.Вставить("Организация", СтруктураРеквизитовФормы.Организация);
	ПараметрыЗаписи.Вставить("ДатаНачала", СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
	ПараметрыЗаписи.Вставить("ДатаОкончания", СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	ПараметрыЗаписи.Вставить("СохраняемыйРеглОтчет", СтруктураРеквизитовФормы.мСохраненныйДок);
	ПараметрыЗаписи.Вставить("ДатаПодписи", ДатаПодписи);
	ПараметрыЗаписи.Вставить("ЕдиницаИзмерения", СтруктураРеквизитовФормы.ЕдиницаИзмерения);
	ПараметрыЗаписи.Вставить("ТочностьЕдиницыИзмерения", СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения);
	ПараметрыЗаписи.Вставить("Периодичность", СтруктураРеквизитовФормы.мПериодичность);
	ПараметрыЗаписи.Вставить("Комментарий", Комментарий);
	ПараметрыЗаписи.Вставить("КодИФНС", КодИФНС);
	ПараметрыЗаписи.Вставить("КПП", КПП);
	ПараметрыЗаписи.Вставить("СтруктураРеквизитовФормы", СтруктураРеквизитовФормы);
	ПараметрыЗаписи.Вставить("СтруктураВариантыЗаполнения", СтруктураВариантыЗаполнения);
	ПараметрыЗаписи.Вставить("ВерсияФормы", СтруктураРеквизитовФормы.мВерсияФормы);
	ПараметрыЗаписи.Вставить("ФлОтклВыборЗначений", СтруктураРеквизитовФормы.мАвтоВыборКодов);
	ПараметрыЗаписи.Вставить("ФлПодсчетСтраниц", СтруктураРеквизитовФормы.мСчетчикСтраниц);
	ПараметрыЗаписи.Вставить("ПечатьБезШтрихкодаРазрешена", СтруктураРеквизитовФормы.мПечатьБезШтрихкодаРазрешена);
	ПараметрыЗаписи.Вставить("ФлПроверятьСоотношенияПриПечатиИВыгрузки",
		СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки);
	ПараметрыЗаписи.Вставить("ФлажокОтклАвтоРасчет", СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);
	ПараметрыЗаписи.Вставить("СохранятьРасшифровку", СтруктураРеквизитовФормы.мСохранятьРасшифровку);
	ПараметрыЗаписи.Вставить("АдресВременногоХранилищаРасшифровки",
		СтруктураРеквизитовФормы.АдресВременногоХранилищаРасшифровки);
	ПараметрыЗаписи.Вставить("ГруппаОрганизаций", СтруктураРеквизитовФормы.ГруппаОрганизаций);
	ПараметрыЗаписи.Вставить("ДатаНачалаАвтозаполнения", СтруктураРеквизитовФормы.ДатаНачалаАвтозаполнения);
	ПараметрыЗаписи.Вставить("ВыполненоЗаполнениеРазделов",	СтруктураРеквизитовФормы.ВыполненоЗаполнениеРазделов);
	ПараметрыЗаписи.Вставить("УспешноеАвтозаполнение", СтруктураРеквизитовФормы.УспешноеАвтозаполнение);
	ПараметрыЗаписи.Вставить("ДеревоСтраницОтчета", РеквизитФормыВЗначение("мДеревоСтраницОтчета"));
	ПараметрыЗаписи.Вставить("Вариант", СтруктураРеквизитовФормы.мВариант);
	ПараметрыЗаписи.Вставить("РазделыОтчета", РазделыРеглОтчета);
	ПараметрыЗаписи.Вставить("СтраницыРазделов8_12", СтраницыРазделов8_12());
	ПараметрыЗаписи.Вставить("НаименованиеОтчета", СтруктураРеквизитовФормы.НаименованиеОтчета);
	ПараметрыЗаписи.Вставить("Модифицированность", Модифицированность);
	
	Если СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета <> Неопределено Тогда
		// Сохраняем данные Помощника заполнения.
		СохраненныеДанныеОтчета = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить();
		Если ТипЗнч(СохраненныеДанныеОтчета) = Тип("Структура") 
			И СохраненныеДанныеОтчета.Свойство("ДанныеПомощникаЗаполнения") Тогда
			ПараметрыЗаписи.Вставить("ДанныеПомощникаЗаполнения", СохраненныеДанныеОтчета.ДанныеПомощникаЗаполнения);
		КонецЕсли;
	КонецЕсли;
		
	Если ОбъектОтчета.ЗаписатьДокумент(СтруктураРеквизитовФормы.мВыбраннаяФорма, ПараметрыЗаписи) = Ложь Тогда

		Если НЕ Автосохранение Тогда

			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = ПараметрыЗаписи.Ошибки[0];

			Сообщение.Сообщить();

		КонецЕсли;
		
		СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
		
		Возврат Ложь;
		
	КонецЕсли;
	
	РегламентированнаяОтчетность.СохранитьСтатусОтправкиРеглОтчета(ЭтаФорма);
	
	Модифицированность = Ложь;
	
	СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
	
	Если НЕ СтруктураРеквизитовФормы.мБезОткрытияФормы
	   И НЕ СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
		
		ЗаблокироватьДанныеДляРедактирования(СтруктураРеквизитовФормы.мСохраненныйДок, , ЭтаФорма.УникальныйИдентификатор);
		
	КонецЕсли;
	
	СтруктураРеквизитовФормы.ОтчетСтарогоОбразца = Ложь;
	
	ЗаписатьРезультатПроверкиВыгрузки();
	
	//ПроверкаКонтрагентовБРО
	ПроверкаКонтрагентовБРО.СохранитьРезультатыПроверкиПриСохраненииДекларации(ЭтотОбъект);
	//Конец ПроверкаКонтрагентовБРО
	
	Если ДанныеДляРазблокирования <> Неопределено Тогда
		РазблокироватьДанныеДляРедактирования(ДанныеДляРазблокирования.Ключ, ДанныеДляРазблокирования.ИдФормы);
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция СведенияМногостраничногоРазделаВТаблице(ИмяСтруктурыДанных)
	
	ОписаниеТиповНеопределено = Новый ОписаниеТипов("Неопределено");
	
	ТаблицаЗначенийСДанными = ДанныеФормыВЗначение(ЭтаФорма[ИмяСтруктурыДанных], Тип("ТаблицаЗначений"));
	
	Если ТаблицаЗначенийСДанными <> Неопределено Тогда
		
		Если ТаблицаЗначенийСДанными.Колонки.Найти("Данные") <> Неопределено Тогда
			ТаблицаЗначенийСДанными.Колонки.Удалить("Данные");
			ТаблицаЗначенийСДанными.Колонки.Добавить("Данные", ОписаниеТиповНеопределено);
			
			Ном = 0;
			Для Каждого СтрокаТаблицыЗначений Из ТаблицаЗначенийСДанными Цикл
				СтрокаТаблицыЗначений.Данные = ЭтаФорма[ИмяСтруктурыДанных][Ном].Данные[0].Значение;
				Ном = Ном + 1;
			КонецЦикла;
		КонецЕсли;
		
		Если ТаблицаЗначенийСДанными.Колонки.Найти("ДанныеДопСтрок") <> Неопределено Тогда
			ТаблицаЗначенийСДанными.Колонки.Удалить("ДанныеДопСтрок");
			ТаблицаЗначенийСДанными.Колонки.Добавить("ДанныеДопСтрок", ОписаниеТиповНеопределено);
			
			Ном = 0;
			Для Каждого СтрокаТаблицыЗначений Из ТаблицаЗначенийСДанными Цикл
				
				Если ЭтаФорма[ИмяСтруктурыДанных][Ном].ДанныеДопСтрок.Количество() > 0
				   И ЭтаФорма[ИмяСтруктурыДанных][Ном].ДанныеДопСтрок[0].Представление
				   = "ДанныеФормыКоллекцияТаблицаДопСтрокРаздела" Тогда
					
					СтрокаТаблицыЗначений.ДанныеДопСтрок = ДанныеФормыВЗначение(
					ЭтаФорма[ИмяСтруктурыДанных][Ном].ДанныеДопСтрок[0].Значение, Тип("ТаблицаЗначений"));
					
					Ном = Ном + 1;
					Продолжить;
				КонецЕсли;
				
				СтруктураДанныхДопСтрок = Новый Структура;
				
				Для Каждого ЭлСтруктуры Из ЭтаФорма[ИмяСтруктурыДанных][Ном].ДанныеДопСтрок Цикл
					СтруктураДанныхДопСтрок.Вставить(ДанныеФормыВЗначение(ЭлСтруктуры.Значение, Тип("ТаблицаЗначений")));
				КонецЦикла;
				
				СтрокаТаблицыЗначений.ДанныеДопСтрок = СтруктураДанныхДопСтрок;
				
				Ном = Ном + 1;
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ТаблицаЗначенийСДанными;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьПустыеСтруктурыДанных()
	
	СохрТабличныйДокумент = Новый ТабличныйДокумент;
	
	СохрТабличныйДокумент.Вывести(ТабличныйДокумент);
	
	Для Каждого Раздел Из мСвойстваРазделовДекларации.ПолучитьЭлементы() Цикл
		
		Если НЕ Раздел.МногостраничностьВРазделе
			И НЕ Раздел.ИмяСтраницы = "Раздел8"
			И НЕ Раздел.ИмяСтраницы = "Раздел8_Прил1"
			И НЕ Раздел.ИмяСтраницы = "Раздел9"
			И НЕ Раздел.ИмяСтраницы = "Раздел9_Прил1"
			И НЕ Раздел.ИмяСтраницы = "Раздел10"
			И НЕ Раздел.ИмяСтраницы = "Раздел11"
			И НЕ Раздел.ИмяСтраницы = "Раздел12"
			И (ЭтаФорма["СтруктураДанных" + Раздел.ИмяСтраницы].Количество() = 0) Тогда
			ТабличныйДокумент.Очистить();
			ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(
			Сред(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + Раздел.ИмяСтраницы));
			
			СохранитьДанныеРаздела(Раздел.ИмяСтраницы, Ложь);
			
		ИначеЕсли Раздел.МногостраничностьВРазделе
			И (ЭтаФорма[мСтруктураМногостраничныхРазделов[Раздел.ИмяСтраницы]][0].Данные.Количество() = 0) Тогда
			
			ТабличныйДокумент.Очистить();
			ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(
			Сред(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + Раздел.ИмяСтраницы));
			
			СохранитьДанныеРаздела(Раздел.ИмяСтраницы, Ложь);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(СохрТабличныйДокумент);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если (НЕ СтруктураРеквизитовФормы.АвтоЗаполнениеРеглОтчетаДоступно
		ИЛИ Элементы.НаименованиеЭтапа.Заголовок = "Сдано")
		И Модифицированность Тогда
		
		Модифицированность = Ложь;
		
		Если ЗавершениеРаботы Тогда
			
			Отказ = Истина;
			
			ТекстПредупреждения = НСтр("ru='Декларация по НДС сдана. Изменения не сохранены.
			|Для подготовки уточненной декларации создайте новый отчет.'");
			
			Возврат;
			
		КонецЕсли;
		
		ПоказатьПредупреждение(, НСтр("ru='Декларация по НДС сдана. Изменения не сохранены.
		|Для подготовки уточненной декларации создайте новый отчет.'"));
		
	Иначе
		
		РегламентированнаяОтчетностьКлиент.ПередЗакрытиемРегламентированногоОтчета(
		ЭтаФорма, Отказ, СтандартнаяОбработка, ЗавершениеРаботы, ТекстПредупреждения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ЗавершениеРаботы Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ПриЗакрытииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПриЗакрытииНаСервере()
	
	РегламентированнаяОтчетность.ПриЗакрытииРегламентированногоОтчета(ЭтаФорма);
	
	//ПроверкаКонтрагентовБРО
	ПроверкаКонтрагентовБРО.ПриЗакрытииОтчета(ЭтотОбъект);
	//Конец ПроверкаКонтрагентовБРО
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьЦветЯчеекНаКлиенте(ИмяРаздела, ТекущаяОбластьИмя = "") Экспорт
	
	ИзменитьЦветЯчеек(ЭтаФорма, ИмяРаздела, ТекущаяОбластьИмя);
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьЦветЯчеекНаСервере(ИмяРаздела, ТекущаяОбластьИмя = "") Экспорт
	
	ИзменитьЦветЯчеек(ЭтаФорма, ИмяРаздела, ТекущаяОбластьИмя);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ИзменитьЦветЯчеек(Форма, ИмяРаздела, ТекущаяОбластьИмя = "")
	
	Если ИмяРаздела = "Раздел2" Тогда
		
		Если НЕ ЗначениеЗаполнено(ТекущаяОбластьИмя) Тогда
			ТекущаяОбластьИмя = Форма.ТабличныйДокумент.ТекущаяОбласть.Имя;
		КонецЕсли;
		
		КодОперации = СокрЛП(Форма.ТабличныйДокумент.Области.П000200007003.Значение);
		
		Строка060БылаАвторасчитываемая = Форма.ТабличныйДокумент.Области.П000200006003.Защита
		И (КодОперации = "1011705" ИЛИ КодОперации = "1011707");
		
		Если КодОперации = "1011705" ИЛИ КодОперации = "1011707" Тогда
			
			Если Форма.СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Тогда
				ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П000200006003");
			Иначе	
				ИзменитьВариантЗаполненияЯчейки(Форма, 4, "П000200006003");
			КонецЕсли;
			
			Если Форма.СтруктураРеквизитовФормы.ОтображатьКнопкуЗаполнить Тогда
				ИзменитьВариантЗаполненияЯчейки(Форма, 3, "П000200008003");
				ИзменитьВариантЗаполненияЯчейки(Форма, 3, "П000200009003");
			Иначе
				ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П000200008003");
				ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П000200009003");
			КонецЕсли;
			ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П000200010003");
			
			Если ТекущаяОбластьИмя = "П000200007003"
				И Форма.ТабличныйДокумент.Области.П000200006003.Значение > 0 Тогда
				
				Форма.ТабличныйДокумент.Области.П000200006003.Значение = 0;
				Форма.ТабличныйДокумент.Области.П000200008003.Значение = 0;
				Форма.ТабличныйДокумент.Области.П000200009003.Значение = 0;
				Форма.ТабличныйДокумент.Области.П000200010003.Значение = 0;
				
				Сообщение = Новый СообщениеПользователю;
				
				Сообщение.Текст = НСтр("ru='Значения по строкам 60, 80, 90, 100 раздела 2 очищены вследствие изменения кода операции по строке 070.'");
				
				Сообщение.Сообщить();
				
			КонецЕсли;
			
		Иначе
			
			ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П000200006003");
			ИзменитьВариантЗаполненияЯчейки(Форма, 5, "П000200008003");
			ИзменитьВариантЗаполненияЯчейки(Форма, 5, "П000200009003");
			ИзменитьВариантЗаполненияЯчейки(Форма, 5, "П000200010003");
			
			Если Строка060БылаАвторасчитываемая
				И Форма.ТабличныйДокумент.Области.П000200006003.Значение > 0 Тогда
				
				Форма.ТабличныйДокумент.Области.П000200006003.Значение = 0;
				
				Сообщение = Новый СообщениеПользователю;
				
				Сообщение.Текст = НСтр("ru='Значение по строке 060 раздела 2 очищено вследствие изменения кода операции по строке 070.'");
				
				Сообщение.Сообщить();
				
			КонецЕсли;
			
			Форма.ТабличныйДокумент.Области.П000200008003.Значение = "";
			Форма.ТабличныйДокумент.Области.П000200009003.Значение = "";
			Форма.ТабличныйДокумент.Области.П000200010003.Значение = "";
			
		КонецЕсли;
		
		Если Форма.СтруктураРеквизитовФормы.АвтозаполняемыеПоказатели.Свойство("П000200001003") Тогда
			ИзменитьВариантЗаполненияЯчейки(Форма, 3, "П000200001003");
		Иначе
			ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П000200001003");
		КонецЕсли;
		Если Форма.СтруктураРеквизитовФормы.АвтозаполняемыеПоказатели.Свойство("П000200002003") Тогда
			ИзменитьВариантЗаполненияЯчейки(Форма, 3, "П000200002003");
		Иначе
			ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П000200002003");
		КонецЕсли;
		Если Форма.СтруктураРеквизитовФормы.АвтозаполняемыеПоказатели.Свойство("П000200003003") Тогда
			ИзменитьВариантЗаполненияЯчейки(Форма, 3, "П000200003003");
		Иначе
			ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П000200003003");
		КонецЕсли;
		
		ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П000200004003");
		ИзменитьВариантЗаполненияЯчейки(Форма, 5, "П000200005003");
		
		Если Форма.СтруктураРеквизитовФормы.АвтозаполняемыеПоказатели.Свойство("П000200007003") Тогда
			ИзменитьВариантЗаполненияЯчейки(Форма, 3, "П000200007003");
		Иначе
			ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П000200007003");
		КонецЕсли;
		
	ИначеЕсли ИмяРаздела = "Раздел7" Тогда
		
		Для каждого Обл Из Форма.ТабличныйДокумент.Области Цикл
			
			Если НЕ (СтрЧислоВхождений(Тип(Обл), "Рисунок") = 0
				И Обл.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник
				И Обл.СодержитЗначение = Истина) Тогда
				Продолжить;
			КонецЕсли;
			
			ИмяПоиска = Лев(Обл.Имя, 13);
			
			Если Форма.СтруктураРеквизитовФормы.АвтозаполняемыеПоказатели.Свойство(ИмяПоиска) Тогда
				Обл.ЦветФона = Форма.мСтруктураЦветовРаскраски["_3"];
			Иначе
				Обл.ЦветФона = Форма.мСтруктураЦветовРаскраски["_0"];
			КонецЕсли;
			Обл.Защита = Ложь;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ИзменитьВариантЗаполненияЯчейки(Форма, НовыйВариант, Показатель = Неопределено)
	
	ИмяТекущейСтраницыПанели = Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела;
	
	#Если НаКлиенте Тогда
		ТаблицаВариантыЗаполнения
		= РегламентированнаяОтчетностьКлиент.ПолучитьТаблицуВариантовЗаполненияНаКлиенте(Форма, ИмяТекущейСтраницыПанели);
	#Иначе
		ТаблицаВариантыЗаполнения
		= РегламентированнаяОтчетностьВызовСервера.ПолучитьТаблицуВариантовЗаполненияНаСервере(Форма, ИмяТекущейСтраницыПанели);
	#КонецЕсли
	
	Если ТаблицаВариантыЗаполнения = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяОбласть = Форма.Элементы.ТабличныйДокумент.ТекущаяОбласть;
	Если Показатель = Неопределено Тогда
		ИмяПоказателя = ТекущаяОбласть.Имя;
	Иначе
		ИмяПоказателя = Показатель;
	КонецЕсли;
	
	НайденнаяСтрока = ТаблицаВариантыЗаполнения.НайтиСтроки(Новый Структура("КодПоказателя", ИмяПоказателя));
	Если НайденнаяСтрока.Количество() > 0 Тогда
		НайденнаяСтрока = НайденнаяСтрока[0];
		НайденнаяСтрока.ВариантЗаполнения = НовыйВариант;
	КонецЕсли;
	
	УстановитьЦветФонаЯчейки(Форма, ИмяПоказателя, НовыйВариант);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнениеЗначенийВКвадратикахНаКлиенте(Знач ИмяСтраницы) Экспорт
	
	Возврат;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнениеЗначенийВКвадратикахНаСервере(Знач ИмяСтраницы) Экспорт
	
	Возврат;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТабличноеПолеНаКлиенте(ВыбТабличноеПолеИмя) Экспорт
	
	ОчиститьТабличноеПоле(ЭтаФорма, ВыбТабличноеПолеИмя);
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьТабличноеПолеНаСервере(ВыбТабличноеПолеИмя) Экспорт
	
	Если ВыбТабличноеПолеИмя = "Раздел8"
		ИЛИ ВыбТабличноеПолеИмя = "Раздел8_Прил1"
		ИЛИ ВыбТабличноеПолеИмя = "Раздел9"
		ИЛИ ВыбТабличноеПолеИмя = "Раздел9_Прил1"
		ИЛИ ВыбТабличноеПолеИмя = "Раздел10"
		ИЛИ ВыбТабличноеПолеИмя = "Раздел11"
		ИЛИ ВыбТабличноеПолеИмя = "Раздел12" Тогда
		ОчиститьТабличноеПолеНДС(ВыбТабличноеПолеИмя)
	Иначе
		ОчиститьТабличноеПоле(ЭтаФорма, ВыбТабличноеПолеИмя);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОчиститьТабличноеПоле(Форма, ВыбТабличноеПолеИмя)
	
	ВыбТабличноеПоле = Форма.ТабличныйДокумент;
	
	//для очистки защищенных областей итоговых ячеек
	//получим список итоговых ячеек, снимая с них защиту), а после очищения вернем защиту
	СписокИтоговыхЯчеек = Новый СписокЗначений;
	
	Если НЕ ВыбТабличноеПолеИмя = "Раздел5" Тогда
		
		Для каждого Область Из ВыбТабличноеПоле.Области Цикл
			Если Область.ЦветФона = Форма.СтруктураРеквизитовФормы.ЦветЗаполняетсяАвтоАрифметика И Область.Защита Тогда
				Область.Защита = Ложь;
				СписокИтоговыхЯчеек.Добавить(Область.Имя);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиентСервер.ОчиститьТабличноеПоле(Форма, ВыбТабличноеПолеИмя);
	
	ВыбТабличноеПоле = Форма.ТабличныйДокумент;
	
	// Непосредственно очищаем ячейки табличного документа.
	// Повторно, так как в результате расчета многостраничного многострочного блока заполняются итоговые ячейки, 
	// в арифметике которых есть показатели не из многострочного блока
	Для Инд = 0 По ВыбТабличноеПоле.Области.Количество() - 1 Цикл
		ТекущаяОбласть = ВыбТабличноеПоле.Области[Инд];
		Если Не ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			Продолжить;
		КонецЕсли;
		Если ТекущаяОбласть.СодержитЗначение <> Истина Тогда
			Продолжить;
		КонецЕсли;
		Если ТекущаяОбласть.Защита Тогда
			Продолжить;
		КонецЕсли;
		ТекущаяОбласть.Очистить();
	КонецЦикла;
	
	Для каждого КодИтоговогоПоказателя Из СписокИтоговыхЯчеек Цикл
		ОбластьПоказателя=ВыбТабличноеПоле.Области.Найти(КодИтоговогоПоказателя.Значение);
		Если ОбластьПоказателя <> Неопределено Тогда
			ОбластьПоказателя.Защита = Истина;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставленияПоРазделуНаКлиенте(Знач ИмяРаздела) Экспорт
	
	ПеременныеМодуля = Новый Структура;
	ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставленияПоРазделу(ИмяРаздела, ПеременныеМодуля);
	
КонецПроцедуры

&НаСервере
Процедура ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставленияПоРазделуНаСервере(Знач ИмяРаздела) Экспорт
	
	ПеременныеМодуля = Новый Структура;
	ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставленияПоРазделу(ИмяРаздела, ПеременныеМодуля);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставленияПоРазделу(Знач ИмяРаздела, ПеременныеМодуля)
	
	Возврат;
	
КонецПроцедуры

&НаКлиенте
Процедура РасчетНаКлиенте(ИмяСтраницыПанели = "", ОбластьИмя = "") Экспорт
	
	Расчет(ЭтаФорма, ИмяСтраницыПанели, ОбластьИмя);
	
КонецПроцедуры

&НаСервере
Процедура РасчетНаСервере(ИмяСтраницыПанели = "", ОбластьИмя = "") Экспорт
	
	Расчет(ЭтаФорма, ИмяСтраницыПанели, ОбластьИмя);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура Расчет(Форма, ИмяСтраницыПанели = "", ОбластьИмя = "")
	
	Перем ТаблицаБлока;
	
	Если Форма.СтруктураРеквизитовФормы.мРежимПечати Тогда
		Возврат;
	КонецЕсли;
	
	Если ИмяСтраницыПанели = "Раздел1" Тогда
		
		Если Форма.СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Тогда
			Возврат;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
			ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100004003, ОбластьИмя) > 0
			ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100005003, ОбластьИмя) > 0 Тогда
			
			Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел1" Тогда
				КодОКТМО = СокрЛП(Форма.ТабличныйДокумент.Области.П000100001003.Значение);
			Иначе
				КодОКТМО = СокрЛП(Форма.СтруктураДанныхРаздел1.П000100001003);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(КодОКТМО) Тогда
				
				ОкрП000300020003 = 0;
				ОкрП000300021003 = 0;
				ОкрП000400012003 = 0;
				ОкрП000400013003 = 0;
				ОкрП000500008003 = 0;
				ОкрП000500009003 = 0;
				ОкрП000600016003 = 0;
				ОкрП000600017003 = 0;
				
				Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел3" Тогда
					ОкрП000300020003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
					Форма, Форма.ТабличныйДокумент.Области.П000300020003.Значение);
				ИначеЕсли Форма.СтруктураДанныхРаздел3.Свойство("П000300020003") Тогда
					ОкрП000300020003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
					Форма, Форма.СтруктураДанныхРаздел3.П000300020003);
				КонецЕсли;
				
				Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел3" Тогда
					ОкрП000300021003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
					Форма, Форма.ТабличныйДокумент.Области.П000300021003.Значение);
				ИначеЕсли Форма.СтруктураДанныхРаздел3.Свойство("П000300021003") Тогда
					ОкрП000300021003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
					Форма, Форма.СтруктураДанныхРаздел3.П000300021003);
				КонецЕсли;
				
				Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел4" Тогда
					ОкрП000400012003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
					Форма, Форма.ТабличныйДокумент.Области.П000400012003.Значение);
				ИначеЕсли Форма.СтруктураДанныхРаздел4.Свойство("П000400012003") Тогда
					ОкрП000400012003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
					Форма, Форма.СтруктураДанныхРаздел4.П000400012003);
				КонецЕсли;
				
				Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел4" Тогда
					ОкрП000400013003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
					Форма, Форма.ТабличныйДокумент.Области.П000400013003.Значение);
				ИначеЕсли Форма.СтруктураДанныхРаздел4.Свойство("П000400013003") Тогда
					ОкрП000400013003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
					Форма, Форма.СтруктураДанныхРаздел4.П000400013003);
				КонецЕсли;
				
				СумПоказатели = Новый Структура;
				СумПоказатели.Вставить("П000500008003", 0);
				СумПоказатели.Вставить("П000500009003", 0);
				
				РассчитатьСуммуПоказателейНаВсехСтраницах(Форма, "Раздел5", СумПоказатели, Истина);
				
				ОкрП000500008003 = СумПоказатели.П000500008003;
				ОкрП000500009003 = СумПоказатели.П000500009003;
				
				Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел6" Тогда
					ОкрП000600016003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
					Форма, Форма.ТабличныйДокумент.Области.П000600016003.Значение);
				ИначеЕсли Форма.СтруктураДанныхРаздел6.Свойство("П000600016003") Тогда
					ОкрП000600016003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
					Форма, Форма.СтруктураДанныхРаздел6.П000600016003);
				КонецЕсли;
				
				Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел6" Тогда
					ОкрП000600017003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
					Форма, Форма.ТабличныйДокумент.Области.П000600017003.Значение);
				ИначеЕсли Форма.СтруктураДанныхРаздел6.Свойство("П000600017003") Тогда
					ОкрП000600017003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
					Форма, Форма.СтруктураДанныхРаздел6.П000600017003);
				КонецЕсли;
				
				СуммаНалога
				= (ОкрП000300020003 + ОкрП000400013003 + ОкрП000600016003)
				- (ОкрП000300021003 + ОкрП000400012003 + ОкрП000500008003 + ОкрП000500009003 + ОкрП000600017003);
				
			Иначе
				
				СуммаНалога = 0;
				
			КонецЕсли;
			
			Форма.СтруктураДанныхРаздел1.Вставить("П000100004003", Макс(СуммаНалога, 0));
			Форма.СтруктураДанныхРаздел1.Вставить("П000100005003", Макс(-СуммаНалога, 0));
			
			Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел1" Тогда
				Форма.ТабличныйДокумент.Области.П000100004003.Значение = Макс(СуммаНалога, 0);
				Форма.ТабличныйДокумент.Области.П000100005003.Значение = Макс(-СуммаНалога, 0);
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ИмяСтраницыПанели = "Раздел2" Тогда
	
		Если Форма.СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Тогда
			Возврат;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
			ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000200006003, ОбластьИмя) > 0 Тогда
			
			Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяСтраницыПанели Тогда
				
				КодОперации = СокрЛП(Форма.ТабличныйДокумент.Области.П000200007003.Значение);
				
				Если КодОперации = "1011705" ИЛИ КодОперации = "1011707" Тогда
					
					ОкрП000200008003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
					Форма, Форма.ТабличныйДокумент.Области.П000200008003.Значение);
					ОкрП000200009003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
					Форма, Форма.ТабличныйДокумент.Области.П000200009003.Значение);
					ОкрП000200010003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
					Форма, Форма.ТабличныйДокумент.Области.П000200010003.Значение);
					
					Если ОкрП000200008003 = 0 Тогда
						Форма.ТабличныйДокумент.Области.П000200006003.Значение
						= ОкрП000200009003;
					Иначе
						Форма.ТабличныйДокумент.Области.П000200006003.Значение
						= ОкрП000200008003 + ОкрП000200009003 - ОкрП000200010003;
					КонецЕсли;
					
				КонецЕсли;
				
			Иначе
				
				Для Каждого ЭлементТабл Из Форма.ТаблицаСтраницыРаздела2 Цикл
					
					ЭлементТабл = ЭлементТабл.Данные[0].Значение;
					
					КодОперации = СокрЛП(ЭлементТабл.П000200007003);
					
					Если КодОперации = "1011705" ИЛИ КодОперации = "1011707" Тогда
						
						ОкрП000200008003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
						Форма, ЭлементТабл.П000200008003);
						ОкрП000200009003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
						Форма, ЭлементТабл.П000200009003);
						ОкрП000200010003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
						Форма, ЭлементТабл.П000200010003);
						
						Если ОкрП000200008003 = 0 Тогда
							ЭлементТабл.П000200006003 = ОкрП000200009003;
						Иначе
							ЭлементТабл.П000200006003 = ОкрП000200008003 + ОкрП000200009003 - ОкрП000200010003;
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
		Конецесли;
		
	ИначеЕсли ИмяСтраницыПанели = "Раздел3" Тогда
		
		Если Форма.СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Тогда
			Возврат;
		КонецЕсли;
	
		Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяСтраницыПанели Тогда
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
				Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000300001005, ОбластьИмя) > 0 Тогда
				ОкрП000300001003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
				Форма, Форма.ТабличныйДокумент.Области.П000300001003.Значение);
				Форма.ТабличныйДокумент.Области.П000300001005.Значение = ОкрП000300001003 * 20 / 100;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
				Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000300002005, ОбластьИмя) > 0 Тогда
				ОкрП000300002003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
				Форма, Форма.ТабличныйДокумент.Области.П000300002003.Значение);
				Форма.ТабличныйДокумент.Области.П000300002005.Значение = ОкрП000300002003 * 10 / 100;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
				Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000300003005, ОбластьИмя) > 0 Тогда
				ОкрП000300003003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
				Форма, Форма.ТабличныйДокумент.Области.П000300003003.Значение);
				Форма.ТабличныйДокумент.Области.П000300003005.Значение = ОкрП000300003003 * 20 / 120;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
				Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000300004005, ОбластьИмя) > 0 Тогда
				ОкрП000300004003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
				Форма, Форма.ТабличныйДокумент.Области.П000300004003.Значение);
				Форма.ТабличныйДокумент.Области.П000300004005.Значение = ОкрП000300004003 * 10 / 110;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
				Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000300004105, ОбластьИмя) > 0 Тогда
				ОкрП000300004103 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
				Форма, Форма.ТабличныйДокумент.Области.П000300004103.Значение);
				Форма.ТабличныйДокумент.Области.П000300004105.Значение = ОкрП000300004103 * 18 / 100;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
				Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000300004205, ОбластьИмя) > 0 Тогда
				ОкрП000300004203 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
				Форма, Форма.ТабличныйДокумент.Области.П000300004203.Значение);
				Форма.ТабличныйДокумент.Области.П000300004205.Значение = ОкрП000300004203 * 18 / 118;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
				Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000300004505, ОбластьИмя) > 0 Тогда
				ОкрП000300004503 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
				Форма, Форма.ТабличныйДокумент.Области.П000300004503.Значение);
				Форма.ТабличныйДокумент.Области.П000300004505.Значение = ОкрП000300004503 * 20 / 100;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
				Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000300004605, ОбластьИмя) > 0 Тогда
				ОкрП000300004603 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
				Форма, Форма.ТабличныйДокумент.Области.П000300004603.Значение);
				Форма.ТабличныйДокумент.Области.П000300004605.Значение = ОкрП000300004603 * 10 / 100;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
				Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000300006005, ОбластьИмя) > 0 Тогда
				ОкрП000300006003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
				Форма, Форма.ТабличныйДокумент.Области.П000300006003.Значение);
				Форма.ТабличныйДокумент.Области.П000300006005.Значение = ОкрП000300006003 * 20 / 100;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
				Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000300011805, ОбластьИмя) > 0 Тогда
				
				ОкрП000300001005 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
				Форма, Форма.ТабличныйДокумент.Области.П000300001005.Значение);
				ОкрП000300002005 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
				Форма, Форма.ТабличныйДокумент.Области.П000300002005.Значение);
				ОкрП000300003005 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
				Форма, Форма.ТабличныйДокумент.Области.П000300003005.Значение);
				ОкрП000300004005 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
				Форма, Форма.ТабличныйДокумент.Области.П000300004005.Значение);
				ОкрП000300004105 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
				Форма, Форма.ТабличныйДокумент.Области.П000300004105.Значение);
				ОкрП000300004205 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
				Форма, Форма.ТабличныйДокумент.Области.П000300004205.Значение);
				ОкрП000300004505 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
				Форма, Форма.ТабличныйДокумент.Области.П000300004505.Значение);
				ОкрП000300004605 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
				Форма, Форма.ТабличныйДокумент.Области.П000300004605.Значение);
				ОкрП000300005005 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
				Форма, Форма.ТабличныйДокумент.Области.П000300005005.Значение);
				ОкрП000300006005 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
				Форма, Форма.ТабличныйДокумент.Области.П000300006005.Значение);
				ОкрП000300007005 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
				Форма, Форма.ТабличныйДокумент.Области.П000300007005.Значение);
				ОкрП000300008005 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
				Форма, Форма.ТабличныйДокумент.Области.П000300008005.Значение);
				ОкрП000300010505 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
				Форма, Форма.ТабличныйДокумент.Области.П000300010505.Значение);
				ОкрП000300010905 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
				Форма, Форма.ТабличныйДокумент.Области.П000300010905.Значение);
				ОкрП000300011005 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
				Форма, Форма.ТабличныйДокумент.Области.П000300011005.Значение);
				ОкрП000300011505 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
				Форма, Форма.ТабличныйДокумент.Области.П000300011505.Значение);
				
				Форма.ТабличныйДокумент.Области.П000300011805.Значение
				= ОкрП000300001005 + ОкрП000300002005 + ОкрП000300003005 + ОкрП000300004005
				+ ОкрП000300004105 + ОкрП000300004205 + ОкрП000300004505 + ОкрП000300004605
				+ ОкрП000300005005 + ОкрП000300006005 + ОкрП000300007005 + ОкрП000300008005
				+ ОкрП000300010505 + ОкрП000300010905 + ОкрП000300011005 + ОкрП000300011505;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
				Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000300019003, ОбластьИмя) > 0 Тогда
				
				ОкрП000300012003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
				Форма, Форма.ТабличныйДокумент.Области.П000300012003.Значение);
				ОкрП000300013003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
				Форма, Форма.ТабличныйДокумент.Области.П000300013003.Значение);
				ОкрП000300013503 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
				Форма, Форма.ТабличныйДокумент.Области.П000300013503.Значение);
				ОкрП000300014003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
				Форма, Форма.ТабличныйДокумент.Области.П000300014003.Значение);
				ОкрП000300015003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
				Форма, Форма.ТабличныйДокумент.Области.П000300015003.Значение);
				ОкрП000300016003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
				Форма, Форма.ТабличныйДокумент.Области.П000300016003.Значение);
				ОкрП000300017003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
				Форма, Форма.ТабличныйДокумент.Области.П000300017003.Значение);
				ОкрП000300018003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
				Форма, Форма.ТабличныйДокумент.Области.П000300018003.Значение);
				ОкрП000300018503 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
				Форма, Форма.ТабличныйДокумент.Области.П000300018503.Значение);
				
				Форма.ТабличныйДокумент.Области.П000300019003.Значение = ОкрП000300012003
				+ ОкрП000300013003 + ОкрП000300013503 + ОкрП000300014003 + ОкрП000300015003
				+ ОкрП000300016003 + ОкрП000300017003 + ОкрП000300018003 + ОкрП000300018503;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
				Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000300020003, ОбластьИмя) > 0 Тогда
				Форма.ТабличныйДокумент.Области.П000300020003.Значение
				= Макс(Форма.ТабличныйДокумент.Области.П000300011805.Значение
				- Форма.ТабличныйДокумент.Области.П000300019003.Значение, 0);
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
				Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000300021003, ОбластьИмя) > 0 Тогда
				Форма.ТабличныйДокумент.Области.П000300021003.Значение
				= Макс(Форма.ТабличныйДокумент.Области.П000300019003.Значение
				- Форма.ТабличныйДокумент.Области.П000300011805.Значение, 0);
			КонецЕсли;
			
		Иначе
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
				Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000300001005, ОбластьИмя) > 0 Тогда
				ОкрП000300001003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
				Форма, Форма.СтруктураДанныхРаздел3.П000300001003);
				Форма.СтруктураДанныхРаздел3.П000300001005 = ОкрП000300001003 * 20 / 100;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
				Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000300002005, ОбластьИмя) > 0 Тогда
				ОкрП000300002003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
				Форма, Форма.СтруктураДанныхРаздел3.П000300002003);
				Форма.СтруктураДанныхРаздел3.П000300002005 = ОкрП000300002003 * 10 / 100;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
				Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000300003005, ОбластьИмя) > 0 Тогда
				ОкрП000300003003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
				Форма, Форма.СтруктураДанныхРаздел3.П000300003003);
				Форма.СтруктураДанныхРаздел3.П000300003005 = ОкрП000300003003 * 20 / 120;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
				Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000300004005, ОбластьИмя) > 0 Тогда
				ОкрП000300004003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
				Форма, Форма.СтруктураДанныхРаздел3.П000300004003);
				Форма.СтруктураДанныхРаздел3.П000300004005 = ОкрП000300004003 * 10 / 110;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
				Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000300004105, ОбластьИмя) > 0 Тогда
				ОкрП000300004103 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
				Форма, Форма.СтруктураДанныхРаздел3.П000300004103);
				Форма.СтруктураДанныхРаздел3.П000300004105 = ОкрП000300004103 * 18 / 100;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
				Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000300004205, ОбластьИмя) > 0 Тогда
				ОкрП000300004203 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
				Форма, Форма.СтруктураДанныхРаздел3.П000300004203);
				Форма.СтруктураДанныхРаздел3.П000300004205 = ОкрП000300004203 * 18 / 118;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
				Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000300004505, ОбластьИмя) > 0 Тогда
				ОкрП000300004503 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
				Форма, Форма.СтруктураДанныхРаздел3.П000300004503);
				Форма.СтруктураДанныхРаздел3.П000300004505 = ОкрП000300004503 * 20 / 100;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
				Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000300004605, ОбластьИмя) > 0 Тогда
				ОкрП000300004603 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
				Форма, Форма.СтруктураДанныхРаздел3.П000300004603);
				Форма.СтруктураДанныхРаздел3.П000300004605 = ОкрП000300004603 * 10 / 100;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
				Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000300006005, ОбластьИмя) > 0 Тогда
				ОкрП000300006003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
				Форма, Форма.СтруктураДанныхРаздел3.П000300006003);
				Форма.СтруктураДанныхРаздел3.П000300006005 = ОкрП000300006003 * 20 / 100;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
				Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000300011805, ОбластьИмя) > 0 Тогда
				
				ОкрП000300001005 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
				Форма, Форма.СтруктураДанныхРаздел3.П000300001005);
				ОкрП000300002005 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
				Форма, Форма.СтруктураДанныхРаздел3.П000300002005);
				ОкрП000300003005 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
				Форма, Форма.СтруктураДанныхРаздел3.П000300003005);
				ОкрП000300004005 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
				Форма, Форма.СтруктураДанныхРаздел3.П000300004005);
				ОкрП000300004105 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
				Форма, Форма.СтруктураДанныхРаздел3.П000300004105);
				ОкрП000300004205 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
				Форма, Форма.СтруктураДанныхРаздел3.П000300004205);
				ОкрП000300004505 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
				Форма, Форма.СтруктураДанныхРаздел3.П000300004505);
				ОкрП000300004605 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
				Форма, Форма.СтруктураДанныхРаздел3.П000300004605);
				ОкрП000300005005 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
				Форма, Форма.СтруктураДанныхРаздел3.П000300005005);
				ОкрП000300006005 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
				Форма, Форма.СтруктураДанныхРаздел3.П000300006005);
				ОкрП000300007005 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
				Форма, Форма.СтруктураДанныхРаздел3.П000300007005);
				ОкрП000300008005 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
				Форма, Форма.СтруктураДанныхРаздел3.П000300008005);
				ОкрП000300010505 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
				Форма, Форма.СтруктураДанныхРаздел3.П000300010505);
				ОкрП000300010905 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
				Форма, Форма.СтруктураДанныхРаздел3.П000300010905);
				ОкрП000300011005 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
				Форма, Форма.СтруктураДанныхРаздел3.П000300011005);
				ОкрП000300011505 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
				Форма, Форма.СтруктураДанныхРаздел3.П000300011505);
				
				Форма.СтруктураДанныхРаздел3.П000300011805
				= ОкрП000300001005 + ОкрП000300002005 + ОкрП000300003005 + ОкрП000300004005
				+ ОкрП000300004105 + ОкрП000300004205 + ОкрП000300004505 + ОкрП000300004605
				+ ОкрП000300005005 + ОкрП000300006005 + ОкрП000300007005 + ОкрП000300008005
				+ ОкрП000300010505 + ОкрП000300010905 + ОкрП000300011005 + ОкрП000300011505;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
				Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000300019003, ОбластьИмя) > 0 Тогда
				
				ОкрП000300012003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
				Форма, Форма.СтруктураДанныхРаздел3.П000300012003);
				ОкрП000300013003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
				Форма, Форма.СтруктураДанныхРаздел3.П000300013003);
				ОкрП000300013503 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
				Форма, Форма.СтруктураДанныхРаздел3.П000300013503);
				ОкрП000300014003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
				Форма, Форма.СтруктураДанныхРаздел3.П000300014003);
				ОкрП000300015003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
				Форма, Форма.СтруктураДанныхРаздел3.П000300015003);
				ОкрП000300016003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
				Форма, Форма.СтруктураДанныхРаздел3.П000300016003);
				ОкрП000300017003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
				Форма, Форма.СтруктураДанныхРаздел3.П000300017003);
				ОкрП000300018003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
				Форма, Форма.СтруктураДанныхРаздел3.П000300018003);
				ОкрП000300018503 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
				Форма, Форма.СтруктураДанныхРаздел3.П000300018503);
				
				Форма.СтруктураДанныхРаздел3.П000300019003 = ОкрП000300012003
				+ ОкрП000300013003 + ОкрП000300013503 + ОкрП000300014003 + ОкрП000300015003
				+ ОкрП000300016003 + ОкрП000300017003 + ОкрП000300018003 + ОкрП000300018503;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
				Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000300020003, ОбластьИмя) > 0 Тогда
				Форма.СтруктураДанныхРаздел3.П000300020003
				= Макс(Форма.СтруктураДанныхРаздел3.П000300011805 - Форма.СтруктураДанныхРаздел3.П000300019003, 0);
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
				Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000300021003, ОбластьИмя) > 0 Тогда
				Форма.СтруктураДанныхРаздел3.П000300021003
				= Макс(Форма.СтруктураДанныхРаздел3.П000300019003 - Форма.СтруктураДанныхРаздел3.П000300011805, 0);
			КонецЕсли;
			
		КонецЕсли;
		
		Расчет(Форма, "Раздел1", ОбластьИмя);
		
	ИначеЕсли ИмяСтраницыПанели = "Раздел3_Прил1" Тогда
			
		Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяСтраницыПанели Тогда
			
			Если НЕ Форма.СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет И (НЕ ЗначениеЗаполнено(ОбластьИмя)
				ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000310007004, ОбластьИмя) > 0) Тогда
				
				Для Ном = 1 По 10 Цикл
					
					Форма.ТабличныйДокумент.Области["П000310007004_" + Ном].Значение
					= РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма,
					Форма.ТабличныйДокумент.Области["П000310006001"].Значение) / 10
					* Форма.ТабличныйДокумент.Области["П000310007003_" + Ном].Значение / 100;
					
				КонецЦикла;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
				Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000310008004, ОбластьИмя) > 0 Тогда
				
				Колонка4 = 0;
				Для Ном = 1 По 10 Цикл
					Колонка4 = Колонка4 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
					Форма, Форма.ТабличныйДокумент.Области["П000310007004_" + Ном].Значение);
				КонецЦикла;
				
				Форма.ТабличныйДокумент.Области.П000310008004.Значение = Колонка4;
				
			КонецЕсли;
			
		Иначе
			
			Если НЕ Форма.СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет И (НЕ ЗначениеЗаполнено(ОбластьИмя)
				ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000310007004, ОбластьИмя) > 0) Тогда
				
				Для Каждого ЭлементТабл Из Форма.ТаблицаСтраницыРаздела3_Прил1 Цикл
					
					ЭлементТабл = ЭлементТабл.Данные[0].Значение;
					
					Для Ном = 1 По 10 Цикл
						
						ЭлементТабл["П000310007004_" + Ном]
						= РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма,
						ЭлементТабл["П000310006001"]) / 10 * ЭлементТабл["П000310007003_" + Ном] / 100;
						
					КонецЦикла;
					
				КонецЦикла;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
				Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000310008004, ОбластьИмя) > 0 Тогда
				
				Для Каждого ЭлементТабл Из Форма.ТаблицаСтраницыРаздела3_Прил1 Цикл
					
					ЭлементТабл = ЭлементТабл.Данные[0].Значение;
					
					Колонка4 = 0;
					Для Ном = 1 По 10 Цикл
						Колонка4 = Колонка4 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
						Форма, ЭлементТабл["П000310007004_" + Ном]);
					КонецЦикла;
					
					ЭлементТабл.П000310008004 = Колонка4;
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ИмяСтраницыПанели = "Раздел3_Прил2" Тогда
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
			Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000320000202, ОбластьИмя) > 0 Тогда
			
			Форма.мСтруктураМногострочныхРазделов.Свойство(Форма.СтруктураРеквизитовФормы.мИдГруппы32, ТаблицаБлока);
			
			ТаблицаБлока = Форма[ТаблицаБлока];
			Колонка2 = 0;
			Ном = 1;
			
			Для Каждого ЭлементТабл Из ТаблицаБлока Цикл
				
				Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяСтраницыПанели Тогда
					Колонка2 = Колонка2 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
					Форма, Форма.ТабличныйДокумент.Области["П000320000102_" + Формат(Ном, "ЧГ=")].Значение);
				Иначе
					Колонка2 = Колонка2 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
					Форма, ЭлементТабл.П000320000102);
				КонецЕсли;
				
				Ном = Ном + 1;
				
			КонецЦикла;
			
			Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяСтраницыПанели Тогда
				Форма.ТабличныйДокумент.Области.П000320000202.Значение = Колонка2;
			Иначе
				Форма.СтруктураДанныхРаздел3_Прил2.П000320000202 = Колонка2;
			КонецЕсли;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
			Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000320000203, ОбластьИмя) > 0 Тогда
			
			Форма.мСтруктураМногострочныхРазделов.Свойство(Форма.СтруктураРеквизитовФормы.мИдГруппы32, ТаблицаБлока);
			
			ТаблицаБлока = Форма[ТаблицаБлока];
			Колонка3 = 0;
			Ном = 1;
			
			Для Каждого ЭлементТабл Из ТаблицаБлока Цикл
				
				Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяСтраницыПанели Тогда
					Колонка3 = Колонка3 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
					Форма, Форма.ТабличныйДокумент.Области["П000320000103_" + Формат(Ном, "ЧГ=")].Значение);
				Иначе
					Колонка3 = Колонка3 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
					Форма, ЭлементТабл.П000320000103);
				КонецЕсли;
				
				Ном = Ном + 1;
				
			КонецЦикла;
			
			Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяСтраницыПанели Тогда
				Форма.ТабличныйДокумент.Области.П000320000203.Значение = Колонка3;
			Иначе
				Форма.СтруктураДанныхРаздел3_Прил2.П000320000203 = Колонка3;
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ИмяСтраницыПанели = "Раздел4" Тогда
		
		Если Форма.СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Тогда
			Возврат;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
			ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000400012003, ОбластьИмя) > 0
			ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000400013003, ОбластьИмя) > 0 Тогда
			
			СуммаП0004М1003003 = 0;
			СуммаП0004М1004003 = 0;
			СуммаП0004М1005003 = 0;
			СуммаП0004М2008003 = 0;
			
			Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяСтраницыПанели Тогда
				
				Для Ном = 1 По Форма[Форма.мСтруктураМногострочныхРазделов[Форма.СтруктураРеквизитовФормы.мИдГруппы4М1]].Количество() Цикл
					СуммаП0004М1003003 = СуммаП0004М1003003 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
					Форма, Форма.ТабличныйДокумент.Области["П0004М1003003_" + Формат(Ном, "ЧГ=")].Значение);
					СуммаП0004М1004003 = СуммаП0004М1004003 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
					Форма, Форма.ТабличныйДокумент.Области["П0004М1004003_" + Формат(Ном, "ЧГ=")].Значение);
					СуммаП0004М1005003 = СуммаП0004М1005003 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
					Форма, Форма.ТабличныйДокумент.Области["П0004М1005003_" + Формат(Ном, "ЧГ=")].Значение);
				КонецЦикла;
				
				Для Ном = 1 По Форма[Форма.мСтруктураМногострочныхРазделов[Форма.СтруктураРеквизитовФормы.мИдГруппы4М2]].Количество() Цикл
					СуммаП0004М2008003 = СуммаП0004М2008003 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
					Форма, Форма.ТабличныйДокумент.Области["П0004М2008003_" + Формат(Ном, "ЧГ=")].Значение);
				КонецЦикла;
				
				Форма.ТабличныйДокумент.Области.П000400012003.Значение
				= Макс((СуммаП0004М1003003 + СуммаП0004М1004003) - (СуммаП0004М1005003 + СуммаП0004М2008003), 0);
				
				Форма.ТабличныйДокумент.Области.П000400013003.Значение
				= Макс((СуммаП0004М1005003 + СуммаП0004М2008003) - (СуммаП0004М1003003 + СуммаП0004М1004003), 0);
				
			Иначе
				
				Для Ном = 1 По Форма[Форма.мСтруктураМногострочныхРазделов[Форма.СтруктураРеквизитовФормы.мИдГруппы4М1]].Количество() Цикл
					СуммаП0004М1003003 = СуммаП0004М1003003 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
					Форма, Форма[Форма.мСтруктураМногострочныхРазделов[Форма.СтруктураРеквизитовФормы.мИдГруппы4М1]][Ном - 1].П0004М1003003);
					СуммаП0004М1004003 = СуммаП0004М1004003 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
					Форма, Форма[Форма.мСтруктураМногострочныхРазделов[Форма.СтруктураРеквизитовФормы.мИдГруппы4М1]][Ном - 1].П0004М1004003);
					СуммаП0004М1005003 = СуммаП0004М1005003 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
					Форма, Форма[Форма.мСтруктураМногострочныхРазделов[Форма.СтруктураРеквизитовФормы.мИдГруппы4М1]][Ном - 1].П0004М1005003);
				КонецЦикла;
				
				Для Ном = 1 По Форма[Форма.мСтруктураМногострочныхРазделов[Форма.СтруктураРеквизитовФормы.мИдГруппы4М2]].Количество() Цикл
					СуммаП0004М2008003 = СуммаП0004М2008003 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
					Форма, Форма[Форма.мСтруктураМногострочныхРазделов[Форма.СтруктураРеквизитовФормы.мИдГруппы4М2]][Ном - 1].П0004М2008003);
				КонецЦикла;
				
				Форма.СтруктураДанныхРаздел4.П000400012003
				= Макс((СуммаП0004М1003003 + СуммаП0004М1004003) - (СуммаП0004М1005003 + СуммаП0004М2008003), 0);
				
				Форма.СтруктураДанныхРаздел4.П000400013003
				= Макс((СуммаП0004М1005003 + СуммаП0004М2008003) - (СуммаП0004М1003003 + СуммаП0004М1004003), 0);
				
			КонецЕсли;
			
		КонецЕсли;
		
		Расчет(Форма, "Раздел1", ОбластьИмя);
		
	ИначеЕсли ИмяСтраницыПанели = "Раздел5" Тогда
		
		Если Форма.СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Тогда
			Возврат;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
			Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000500008003, ОбластьИмя) > 0 Тогда
			
			СуммаП000500005003 = 0;
			
			Для Каждого ЭлементТабл Из Форма.ТаблицаСтраницыРаздела5 Цикл
				
				Если ЭлементТабл.ДанныеДопСтрок.Количество() = 0 Тогда
					Продолжить;
				КонецЕсли;
				
				ЭлементТаблДанныеДопСтрок = ЭлементТабл.ДанныеДопСтрок[0].Значение;
				
				Для Ном = 0 По ЭлементТаблДанныеДопСтрок.Количество() - 1 Цикл
					СуммаП000500005003 = СуммаП000500005003 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
					Форма, ЭлементТаблДанныеДопСтрок[Ном].П000500005003);
				КонецЦикла;
				
			КонецЦикла;
			
			Для Каждого ЭлементТабл Из Форма.ТаблицаСтраницыРаздела5 Цикл
				
				Если НЕ ЭлементТабл.Данные.Количество() = 0 Тогда
					ЭлементТабл.Данные[0].Пометка = Ложь; //для инициализации обмена с сервером
					ЭлементТабл.Данные[0].Значение.П000500008003 = СуммаП000500005003;
				КонецЕсли;
				
			КонецЦикла;
			
			Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяСтраницыПанели Тогда
				Форма.ТабличныйДокумент.Области.П000500008003.Значение = СуммаП000500005003;
			КонецЕсли;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
			Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000500009003, ОбластьИмя) > 0 Тогда
			
			СуммаП000500007003 = 0;
			
			Для Каждого ЭлементТабл Из Форма.ТаблицаСтраницыРаздела5 Цикл
				
				Если ЭлементТабл.ДанныеДопСтрок.Количество() = 0 Тогда
					Продолжить;
				КонецЕсли;
				
				ЭлементТаблДанныеДопСтрок = ЭлементТабл.ДанныеДопСтрок[0].Значение;
				
				Для Ном = 0 По ЭлементТаблДанныеДопСтрок.Количество() - 1 Цикл
					СуммаП000500007003 = СуммаП000500007003 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
					Форма, ЭлементТаблДанныеДопСтрок[Ном].П000500007003);
				КонецЦикла;
				
			КонецЦикла;
			
			Для Каждого ЭлементТабл Из Форма.ТаблицаСтраницыРаздела5 Цикл
				
				Если НЕ ЭлементТабл.Данные.Количество() = 0 Тогда
					ЭлементТабл.Данные[0].Пометка = Ложь; //для инициализации обмена с сервером
					ЭлементТабл.Данные[0].Значение.П000500009003 = СуммаП000500007003;
				КонецЕсли;
				
			КонецЦикла;
			
			Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяСтраницыПанели Тогда
				Форма.ТабличныйДокумент.Области.П000500009003.Значение = СуммаП000500007003;
			КонецЕсли;
			
		КонецЕсли;
		
		Расчет(Форма, "Раздел1", ОбластьИмя);
		
	ИначеЕсли ИмяСтраницыПанели = "Раздел6" Тогда
		
		Если Форма.СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Тогда
			Возврат;
		КонецЕсли;
		
		СуммаП0006М1003003 = 0;
		СуммаП0006М1004003 = 0;
		СуммаП0006М2009003 = 0;
		СуммаП0006М2010003 = 0;
		СуммаП0006М3013003 = 0;
		СуммаП0006М3015003 = 0;
		
		Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяСтраницыПанели Тогда
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
				Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000600005003, ОбластьИмя) > 0 Тогда
				
				Для Ном = 1 По Форма[Форма.мСтруктураМногострочныхРазделов[
					Форма.СтруктураРеквизитовФормы.мИдГруппы6М1]].Количество() Цикл
					СуммаП0006М1003003 = СуммаП0006М1003003 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
					Форма, Форма.ТабличныйДокумент.Области["П0006М1003003_" + Формат(Ном, "ЧГ=")].Значение);
				КонецЦикла;
				
				Форма.ТабличныйДокумент.Области.П000600005003.Значение = СуммаП0006М1003003;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
				Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000600006003, ОбластьИмя) > 0 Тогда
				
				Для Ном = 1 По Форма[Форма.мСтруктураМногострочныхРазделов[Форма.СтруктураРеквизитовФормы.мИдГруппы6М1]].Количество() Цикл
					СуммаП0006М1004003 = СуммаП0006М1004003 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
					Форма, Форма.ТабличныйДокумент.Области["П0006М1004003_" + Формат(Ном, "ЧГ=")].Значение);
				КонецЦикла;
				
				Форма.ТабличныйДокумент.Области.П000600006003.Значение = СуммаП0006М1004003;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя)
				ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000600016003, ОбластьИмя) > 0
				ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000600017003, ОбластьИмя) > 0 Тогда
				
				П000600005003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
				Форма, Форма.ТабличныйДокумент.Области.П000600005003.Значение);
				П000600006003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
				Форма, Форма.ТабличныйДокумент.Области.П000600006003.Значение);
				
				Для Ном = 1 По Форма[Форма.мСтруктураМногострочныхРазделов[Форма.СтруктураРеквизитовФормы.мИдГруппы6М2]].Количество() Цикл
					СуммаП0006М2009003 = СуммаП0006М2009003 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
					Форма, Форма.ТабличныйДокумент.Области["П0006М2009003_" + Формат(Ном, "ЧГ=")].Значение);
					СуммаП0006М2010003 = СуммаП0006М2010003 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
					Форма, Форма.ТабличныйДокумент.Области["П0006М2010003_" + Формат(Ном, "ЧГ=")].Значение);
				КонецЦикла;
				
				Для Ном = 1 По Форма[Форма.мСтруктураМногострочныхРазделов[Форма.СтруктураРеквизитовФормы.мИдГруппы6М3]].Количество() Цикл
					СуммаП0006М3013003 = СуммаП0006М3013003 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
					Форма, Форма.ТабличныйДокумент.Области["П0006М3013003_" + Формат(Ном, "ЧГ=")].Значение);
					СуммаП0006М3015003 = СуммаП0006М3015003 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
					Форма, Форма.ТабличныйДокумент.Области["П0006М3015003_" + Формат(Ном, "ЧГ=")].Значение);
				КонецЦикла;
				
				Форма.ТабличныйДокумент.Области.П000600016003.Значение
				= Макс((П000600005003 + СуммаП0006М2010003 + СуммаП0006М3013003)
				- (П000600006003 + СуммаП0006М2009003 + СуммаП0006М3015003), 0);
				
				Форма.ТабличныйДокумент.Области.П000600017003.Значение
				= Макс((П000600006003 + СуммаП0006М2009003 + СуммаП0006М3015003)
				- (П000600005003 + СуммаП0006М2010003 + СуммаП0006М3013003), 0);
				
			КонецЕсли;
			
		Иначе
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
				Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000600005003, ОбластьИмя) > 0 Тогда
				
				Для Ном = 1 По Форма[Форма.мСтруктураМногострочныхРазделов[Форма.СтруктураРеквизитовФормы.мИдГруппы6М1]].Количество() Цикл
					СуммаП0006М1003003 = СуммаП0006М1003003 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
					Форма, Форма[Форма.мСтруктураМногострочныхРазделов[Форма.СтруктураРеквизитовФормы.мИдГруппы6М1]][Ном - 1].П0006М1003003);
				КонецЦикла;
				
				Форма.СтруктураДанныхРаздел6.П000600005003 = СуммаП0006М1003003;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
				Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000600006003, ОбластьИмя) > 0 Тогда
				
				Для Ном = 1 По Форма[Форма.мСтруктураМногострочныхРазделов[Форма.СтруктураРеквизитовФормы.мИдГруппы6М1]].Количество() Цикл
					СуммаП0006М1004003 = СуммаП0006М1004003 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
					Форма, Форма[Форма.мСтруктураМногострочныхРазделов[Форма.СтруктураРеквизитовФормы.мИдГруппы6М1]][Ном - 1].П0006М1004003);
				КонецЦикла;
				
				Форма.СтруктураДанныхРаздел6.П000600006003 = СуммаП0006М1004003;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя)
				ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000600016003, ОбластьИмя) > 0
				ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000600017003, ОбластьИмя) > 0 Тогда
				
				П000600005003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
				Форма, Форма.СтруктураДанныхРаздел6.П000600005003);
				П000600006003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
				Форма, Форма.СтруктураДанныхРаздел6.П000600006003);
				
				Для Ном = 1 По Форма[Форма.мСтруктураМногострочныхРазделов[Форма.СтруктураРеквизитовФормы.мИдГруппы6М2]].Количество() Цикл
					СуммаП0006М2009003 = СуммаП0006М2009003 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
					Форма, Форма[Форма.мСтруктураМногострочныхРазделов[Форма.СтруктураРеквизитовФормы.мИдГруппы6М2]][Ном - 1].П0006М2009003);
					СуммаП0006М2010003 = СуммаП0006М2010003 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
					Форма, Форма[Форма.мСтруктураМногострочныхРазделов[Форма.СтруктураРеквизитовФормы.мИдГруппы6М2]][Ном - 1].П0006М2010003);
				КонецЦикла;
				
				Для Ном = 1 По Форма[Форма.мСтруктураМногострочныхРазделов[Форма.СтруктураРеквизитовФормы.мИдГруппы6М3]].Количество() Цикл
					СуммаП0006М3013003 = СуммаП0006М3013003 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
					Форма, Форма[Форма.мСтруктураМногострочныхРазделов[Форма.СтруктураРеквизитовФормы.мИдГруппы6М3]][Ном - 1].П0006М3013003);
					СуммаП0006М3015003 = СуммаП0006М3015003 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
					Форма, Форма[Форма.мСтруктураМногострочныхРазделов[Форма.СтруктураРеквизитовФормы.мИдГруппы6М3]][Ном - 1].П0006М3015003);
				КонецЦикла;
				
				Форма.СтруктураДанныхРаздел6.П000600016003
				= Макс((П000600005003 + СуммаП0006М2010003 + СуммаП0006М3013003)
				- (П000600006003 + СуммаП0006М2009003 + СуммаП0006М3015003), 0);
				
				Форма.СтруктураДанныхРаздел6.П000600017003
				= Макс((П000600006003 + СуммаП0006М2009003 + СуммаП0006М3015003)
				- (П000600005003 + СуммаП0006М2010003 + СуммаП0006М3013003), 0);
				
			КонецЕсли;
			
		КонецЕсли;
		
		Расчет(Форма, "Раздел1", ОбластьИмя);
		
	ИначеЕсли ИмяСтраницыПанели = "" Тогда
		
		Расчет(Форма, "Раздел2",       ОбластьИмя);
		Расчет(Форма, "Раздел3_Прил1", ОбластьИмя);
		Расчет(Форма, "Раздел3_Прил2", ОбластьИмя);
		Расчет(Форма, "Раздел3",       ОбластьИмя);
		Расчет(Форма, "Раздел4",       ОбластьИмя);
		Расчет(Форма, "Раздел5",       ОбластьИмя);
		Расчет(Форма, "Раздел6",       ОбластьИмя);
		Расчет(Форма, "Раздел1",       ОбластьИмя);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РассчитатьСуммуПоказателейНаВсехСтраницах(Форма, ИмяСтраницы, СумПоказатели, Округлять)
	
	ТаблицаРаздела = Неопределено;
	
	Форма.мСтруктураМногостраничныхРазделов.Свойство(ИмяСтраницы, ТаблицаРаздела);
	
	Если ТаблицаРаздела <> Неопределено Тогда
		
		ТаблицаРаздела = Форма[ТаблицаРаздела];
		
		Для Инд = 0 По ТаблицаРаздела.Количество() - 1 Цикл
			
			ДанныеТаблПоле = ТаблицаРаздела[Инд].Данные;
			
			Если ДанныеТаблПоле.Количество() = 0 Тогда
				
				Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел5" Тогда
					
					Для Каждого СумПоказатель Из СумПоказатели Цикл
						
						СумПоказатели.Вставить(
						СумПоказатель.Ключ, РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
						Форма, Форма.ТабличныйДокумент.Области[СумПоказатель.Ключ].Значение));
						
					КонецЦикла;
					
				КонецЕсли;
				
				Прервать;
				
			Иначе
				
				Для Каждого СумПоказатель Из СумПоказатели Цикл
					
					СумПоказатели.Вставить(СумПоказатель.Ключ, СумПоказатель.Значение
					+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
					Форма, ДанныеТаблПоле[0].Значение[СумПоказатель.Ключ]));
					
				КонецЦикла;
				
				Если ИмяСтраницы = "Раздел5" Тогда
					
					Прервать;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСтраницу(Команда)
	
	Если Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Раздел2" Тогда
		ОКТМО = ТабличныйДокумент.Области.П000200005003.Значение;
	КонецЕсли;
	
	ВставитьДополнительнуюСтраницуНаСервере(Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
	
	Если Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Раздел2" Тогда
		ТабличныйДокумент.Области.П000200005003.Значение = ОКТМО;
	КонецЕсли;
	
	СтруктураРеквизитовФормы.НомерТекущейСтраницы = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтраницу(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("УдалитьСтраницуЗавершение", ЭтотОбъект);
	ТекстВопроса = НСтр("ru='Удалить текущую страницу?'");
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 60, КодВозвратаДиалога.Да);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтраницуЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	ТекущиеДанные = Элементы.РазделыОтчета.ТекущиеДанные;
	
	КопияТекущиеДанные = ТекущиеДанные;
	
	ТекущиеДанные = ТекущиеДанные.ПолучитьРодителя();
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.ПолучитьЭлементы().Количество() = 1 Тогда
		Возврат;
	КонецЕсли;
	
	Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяСтраницаРазделаПослеУдаления = Неопределено;
	Если КопияТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета = ТекущиеДанные.ПолучитьЭлементы().Количество() Тогда
		ТекущаяСтраницаРазделаПослеУдаления = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(
		ТекущиеДанные.ПолучитьЭлементы(), "КолонкаНомерСтраницыРазделаОтчета",
		КопияТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета - 1);
		СтруктураРеквизитовФормы.НомерТекущейСтраницы
		= ТекущаяСтраницаРазделаПослеУдаления.КолонкаНомерСтраницыРазделаОтчета;
	КонецЕсли;
	
	ИндексУдаляемойСтраницы = ТекущиеДанные.ПолучитьЭлементы().Индекс(КопияТекущиеДанные);
	
	УдалитьДополнительнуюСтраницуНаСервере(
	Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим, ИндексУдаляемойСтраницы);
	
	ТекущиеДанные.ПолучитьЭлементы().Удалить(ИндексУдаляемойСтраницы);
	
	НомерСтраницы = 1;
	
	Для Каждого СтраницаРаздела Из ТекущиеДанные.ПолучитьЭлементы() Цикл
		
		СтраницаРаздела.КолонкаРазделыОтчета = "Стр. " + НомерСтраницы;
		СтраницаРаздела.КолонкаНомерСтраницыРазделаОтчета = НомерСтраницы;
		
		НомерСтраницы = НомерСтраницы + 1;
		
	КонецЦикла;
	
	Если НЕ ТекущаяСтраницаРазделаПослеУдаления = Неопределено Тогда
		Элементы.РазделыОтчета.ТекущаяСтрока = ТекущаяСтраницаРазделаПослеУдаления.ПолучитьИдентификатор();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВставитьДополнительнуюСтраницуНаСервере(ИмяТекущейСтраницыПанели = Неопределено)
	
	Перем ТаблицаСтраницРаздела;
	Перем СтруктураДанныхДопСтрокРаздела;
	
	Если ИмяТекущейСтраницыПанели = Неопределено Тогда
		ИмяТекущейСтраницыПанели = СтруктураРеквизитовФормы.НаимТекущегоРаздела;
	КонецЕсли;
	
	Если Не мСтруктураМногостраничныхРазделов.Свойство(ИмяТекущейСтраницыПанели, ТаблицаСтраницРаздела) Тогда
		Возврат;
	Иначе
		МаксКолвоЭкз = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСвойствоРаздела(ЭтаФорма, ИмяТекущейСтраницыПанели, "МаксКолвоЭкз", 0);
		Если МаксКолвоЭкз <> 0 И ЭтаФорма[мСтруктураМногостраничныхРазделов[ИмяТекущейСтраницыПанели]].Количество() >= МаксКолвоЭкз Тогда
			ЗаголовокСтраницы = ИмяТекущейСтраницыПанели;
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр(
			"ru='В разделе ""%1"" максимальное количество экземпляров страниц равно %2.'"),
			ЗаголовокСтраницы, МаксКолвоЭкз);
			Сообщение.Сообщить();
			Возврат;
			
		КонецЕсли;
	КонецЕсли;
	
	СохранитьДанныеМногостраничногоРазделаВактивнойСтраницеНаСервере(ИмяТекущейСтраницыПанели);
	
	ТаблицаСтраницРаздела = ЭтаФорма[ТаблицаСтраницРаздела];
	
	// Найдем активную страницу
	СтрТаблицаСтраницы = ТаблицаСтраницРаздела.НайтиСтроки(Новый Структура("АктивнаяСтраница", Истина));
	
	Если СтрТаблицаСтраницы.Количество() > 0 Тогда
		
		СтрТаблицаСтраницы = СтрТаблицаСтраницы[0];
		
		// Убираем активность у текущей страницы
		СтрТаблицаСтраницы.АктивнаяСтраница = Ложь;
		
	КонецЕсли;
	
	// Добавляем новую страницу
	СтрНоваяСтраница = ТаблицаСтраницРаздела.Добавить();
	
	// Присваиваем представление по умолчанию
	СтрНоваяСтраница.Представление = "Новая страница";
	СтрНоваяСтраница.АвтоматическоеПредставление = Истина;
	
	// Ставим признак активной страницы
	СтрНоваяСтраница.АктивнаяСтраница = Истина;
	
	ПослеДобавленияДопСтрНаСервере(ИмяТекущейСтраницыПанели);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ПослеДобавленияДопСтрНаСервере(ИмяТекущейСтраницыПанели)
	
	ОчиститьТабличноеПолеНаСервере(ИмяТекущейСтраницыПанели);
	
	СохранитьДанныеМногостраничногоРазделаВактивнойСтраницеНаСервере(ИмяТекущейСтраницыПанели);
	
	ПослеВставкиДополнительнойСтраницыНаСервере(ИмяТекущейСтраницыПанели);
	
КонецПроцедуры

&НаСервере
Процедура ПослеВставкиДополнительнойСтраницыНаСервере(ИмяТекущейСтраницыПанели)
	
	Если ИмяТекущейСтраницыПанели = "Раздел2"
		ИЛИ ИмяТекущейСтраницыПанели = "Раздел7" Тогда
		ИзменитьЦветЯчеекНаСервере(ИмяТекущейСтраницыПанели);
	КонецЕсли;
	
	РегламентированнаяОтчетность.ПослеВставкиДополнительнойСтраницыНаСервере(ЭтаФорма, ИмяТекущейСтраницыПанели);
	
КонецПроцедуры

&НаСервере
Процедура СохранитьДанныеМногостраничногоРазделаВактивнойСтраницеНаСервере(ИмяТекущейСтраницыПанели)
	
	РегламентированнаяОтчетностьКлиентСервер.СохранитьДанныеМногостраничногоРазделаВактивнойСтранице(
	ЭтаФорма, ИмяТекущейСтраницыПанели, Истина);
	
КонецПроцедуры

&НаСервере
Процедура УдалитьДополнительнуюСтраницуНаСервере(ИмяТекущейСтраницыПанели = Неопределено, НомерУдаляемойСтраницы = Неопределено)
	
	Перем ТаблицаСтраницРаздела;
	Перем МассивВариантовЗаполненияСтраниц;
	
	РегламентированнаяОтчетность.УдалитьДополнительнуюСтраницуНаСервере(ЭтаФорма, ИмяТекущейСтраницыПанели);
	
	Если НомерУдаляемойСтраницы <> Неопределено
		И мСтруктураМногостраничныхРазделов.Свойство(ИмяТекущейСтраницыПанели, ТаблицаСтраницРаздела)
		И мСтруктураВариантыЗаполнения.Свойство(ИмяТекущейСтраницыПанели, МассивВариантовЗаполненияСтраниц) Тогда
		
		ТаблицаСтраницРаздела = ЭтаФорма[ТаблицаСтраницРаздела];
		МассивВариантовЗаполненияСтраниц = ЭтаФорма["ТаблицаВариантыЗаполнения" + ИмяТекущейСтраницыПанели];
		
		МассивВариантовЗаполненияСтраниц.Удалить(НомерУдаляемойСтраницы);
		
		КолСтраниц = ТаблицаСтраницРаздела.Количество();
		КолВариантов = МассивВариантовЗаполненияСтраниц.Количество();
		
		Для Инд = КолСтраниц + 1 По КолВариантов Цикл
			
			МассивВариантовЗаполненияСтраниц.Удалить(МассивВариантовЗаполненияСтраниц.Количество() - 1);
			
		КонецЦикла;
		
	КонецЕсли;
	
	РасчетНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСтроку(Команда)
	
	#Если ВебКлиент Тогда
		ВставитьДополнительнуюСтрокуНаСервере();
	#Иначе
		ВставитьДополнительнуюСтрокуНаКлиенте();
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтроку(Команда)
	
	ТекТабличноеПоле = ЭтаФорма["ТабличныйДокумент"];
	
	ТекущаяОбласть = ТекТабличноеПоле.ТекущаяОбласть;
	
	ИмяГруппы = РегламентированнаяОтчетностьКлиент.РазделТекущейОбласти(ЭтаФорма, ТекущаяОбласть);
	
	Если ИмяГруппы = Неопределено Тогда
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Не выбрана удаляемая строка многострочного раздела.'");
		Сообщение.Сообщить();
		
		Возврат;
		
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("УдалитьСтрокуЗавершение", ЭтотОбъект);
	ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
	НСтр("ru='Удалить выбранную строку?'"), Символы.ПС);
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтрокуЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	#Если ВебКлиент Тогда
		УдалитьДополнительнуюСтрокуНаСервере();
	#Иначе
		УдалитьДополнительнуюСтрокуНаКлиенте();
	#КонецЕсли
	
КонецПроцедуры

&НаСервере
Процедура ВставитьДополнительнуюСтрокуНаСервере()
	
	ВставитьДополнительнуюСтроку(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьДополнительнуюСтрокуНаКлиенте()
	
	ВставитьДополнительнуюСтроку(ЭтаФорма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ВставитьДополнительнуюСтроку(Форма, ИмяГруппыБлока = Неопределено, СпециальноеДобавление = Ложь, ИмяКолонкиНомера = Неопределено) Экспорт
	
	Перем СтруктураГруппы;
	Перем МаксимальноеКоличествоСтрокГруппы;
	
	Если ИмяГруппыБлока = Неопределено Тогда
		#Если НаКлиенте Тогда
			ИмяГруппы = Форма.ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаКлиенте(
			Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела);
		#Иначе
			ИмяГруппы = Форма.ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(
			Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела);
		#КонецЕсли
		
		Если ИмяГруппы = Неопределено Тогда
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='Не выбран многострочный раздел, в который необходимо добавить строку.'");
			Сообщение.Сообщить();
			Возврат;
			
		КонецЕсли;
	Иначе
		ИмяГруппы = ИмяГруппыБлока;
	КонецЕсли;
	
	Форма.мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, МаксимальноеКоличествоСтрокГруппы);

	ТекТабличноеПолеИмя = "ТабличныйДокумент";
	
	ТекТабличноеПоле = Форма[ТекТабличноеПолеИмя];
	
	Форма.мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);
	
	СтруктураГруппы = Форма[СтруктураГруппы];

	// определяем последнюю строку многострочной группы
	КолСтрок = СтруктураГруппы.Количество();
	КолСтрокСтр = Формат(КолСтрок, "ЧГ=");
	
	Если ИмяГруппы = "П00050000" Тогда
		
		ИмяПервойЯчейкиПоследнейСтроки = ИмяГруппы + "3003_" + КолСтрокСтр;
		
	ИначеЕсли СтрДлина(ИмяГруппы) = 9 Тогда
		
		Если ИмяГруппы = Форма.СтруктураРеквизитовФормы.мИдГруппы4М1 Тогда
			
			ИмяПервойЯчейкиПоследнейСтроки = ИмяГруппы + "1003_" + КолСтрокСтр;
			
		ИначеЕсли ИмяГруппы = Форма.СтруктураРеквизитовФормы.мИдГруппы4М2 Тогда
			
			ИмяПервойЯчейкиПоследнейСтроки = ИмяГруппы + "6003_" + КолСтрокСтр;
			
		ИначеЕсли ИмяГруппы = Форма.СтруктураРеквизитовФормы.мИдГруппы4М3 Тогда
			
			ИмяПервойЯчейкиПоследнейСтроки = ИмяГруппы + "9003_" + КолСтрокСтр;
			
		ИначеЕсли ИмяГруппы = Форма.СтруктураРеквизитовФормы.мИдГруппы6М1 Тогда
			
			ИмяПервойЯчейкиПоследнейСтроки = ИмяГруппы + "1003_" + КолСтрокСтр;
			
		ИначеЕсли ИмяГруппы = Форма.СтруктураРеквизитовФормы.мИдГруппы6М2 Тогда
			
			ИмяПервойЯчейкиПоследнейСтроки = ИмяГруппы + "7003_" + КолСтрокСтр;
			
		ИначеЕсли ИмяГруппы = Форма.СтруктураРеквизитовФормы.мИдГруппы6М3 Тогда
			
			ИмяПервойЯчейкиПоследнейСтроки = Лев(ИмяГруппы, 8) + "11003_" + КолСтрокСтр;
			
		Иначе
			
			ИмяПервойЯчейкиПоследнейСтроки = ИмяГруппы + "1003_" + КолСтрокСтр;
			
		КонецЕсли;
		
	Иначе
		
		ИмяПервойЯчейкиПоследнейСтроки = ИмяГруппы + "01_" + КолСтрокСтр;
		
	КонецЕсли;
	
	// область первой ячейки последней строки многострочного раздела
	ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяПервойЯчейкиПоследнейСтроки];
	
	НастройкиМнгЧ = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСвойствоРаздела(Форма,
	Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела, "МногострочностьВРазделе").НайтиСтроки(
	Новый Структура("ИдГруппы", ИмяГруппы))[0];
	ВысотаСтроки = НастройкиМнгЧ.ВысотаСтроки;
	
	// номера строк исходной области
	НомерВерхЯчейкиОбласти = ОбластьЯчейки.Верх;
	НомерНижнЯчейкиОбласти = ОбластьЯчейки.Верх + ВысотаСтроки - 1;
	
	СдвигСтрок = НомерНижнЯчейкиОбласти - НомерВерхЯчейкиОбласти + 1;
	
	// номера строк вставляемой области
	НомерВерхЯчейкиНовойОбласти = НомерВерхЯчейкиОбласти + СдвигСтрок;
	НомерНижнЯчейкиНовойОбласти = НомерНижнЯчейкиОбласти + СдвигСтрок;
	
	НазначитьИмяОбластиМЧ = Ложь;
	ВставляемаяОбласть = ТекТабличноеПоле.Область(НомерВерхЯчейкиОбласти, , НомерНижнЯчейкиОбласти, );
	Если СтрНайти(ВставляемаяОбласть.Имя, "МногострочнаяЧасть") Тогда
		НазначитьИмяОбластиМЧ = Истина;
		ИмяМногострочнойЧасти = ВставляемаяОбласть.Имя;
	КонецЕсли;
	
	Если НЕ СпециальноеДобавление Тогда
		
		РегламентированнаяОтчетностьВызовСервера.ВставитьОбластьВТабличныйДокумент(
		ТекТабличноеПоле, НомерВерхЯчейкиОбласти, НомерНижнЯчейкиОбласти);
		
		Форма[ТекТабличноеПолеИмя] = ТекТабличноеПоле;
		
	КонецЕсли;
	
	Если НазначитьИмяОбластиМЧ Тогда
		ТекТабличноеПоле.Область(НомерНижнЯчейкиОбласти + 1, ,
		НомерНижнЯчейкиОбласти + (НомерНижнЯчейкиОбласти - НомерВерхЯчейкиОбласти) + 1, ).Имя = "";
		ТекТабличноеПоле.Область(НомерВерхЯчейкиОбласти, , НомерНижнЯчейкиОбласти, ).Имя = ИмяМногострочнойЧасти;
	КонецЕсли;
	
	КолСтрокСтр1 = Формат(КолСтрок + 1, "ЧГ=");
	
	Для НомерГрафы = 1 По Форма.мСтруктураКолвоКолонокРазделов[ИмяГруппы] Цикл
		
		Если СтрДлина(ИмяГруппы) = 9 Тогда
			
			Если ИмяГруппы = Форма.СтруктураРеквизитовФормы.мИдГруппы4М1 Тогда
				
				ИмяКолонки = ИмяГруппы + Формат((НомерГрафы) * 10, "ЧЦ=2; ЧВН=") + "03";
				
			ИначеЕсли ИмяГруппы = Форма.СтруктураРеквизитовФормы.мИдГруппы4М2 Тогда
				
				ИмяКолонки = ИмяГруппы + Формат((НомерГрафы + 5) * 10, "ЧЦ=2; ЧВН=") + "03";
				
			ИначеЕсли ИмяГруппы = Форма.СтруктураРеквизитовФормы.мИдГруппы4М3 Тогда
				
				ИмяКолонки = Лев(ИмяГруппы, 8) + Формат((НомерГрафы + 8) * 10, "ЧЦ=3; ЧВН=") + "03";
				
			ИначеЕсли ИмяГруппы = Форма.СтруктураРеквизитовФормы.мИдГруппы6М1 Тогда
				
				ИмяКолонки = ИмяГруппы + Формат((НомерГрафы) * 10, "ЧЦ=2; ЧВН=") + "03";
				
			ИначеЕсли ИмяГруппы = Форма.СтруктураРеквизитовФормы.мИдГруппы6М2 Тогда
				
				ИмяКолонки = Лев(ИмяГруппы, 8) + Формат((НомерГрафы + 6) * 10, "ЧЦ=3; ЧВН=") + "03";
				
			ИначеЕсли ИмяГруппы = Форма.СтруктураРеквизитовФормы.мИдГруппы6М3 Тогда
				
				ИмяКолонки = Лев(ИмяГруппы, 8) + Формат((НомерГрафы + 10) * 10, "ЧЦ=3; ЧВН=") + "03";
				
			Иначе
				
				ИмяКолонки = ИмяГруппы + Формат((НомерГрафы) * 10, "ЧЦ=2; ЧВН=") + "03";
				
			КонецЕсли;
			
		Иначе
			
			ИмяКолонки = ИмяГруппы + Формат(НомерГрафы, "ЧЦ=2; ЧВН=");
			
		КонецЕсли;
		
		// переопределяем имена вставленной области
		Если СтруктураГруппы[0].Свойство(ИмяКолонки) Тогда
			
			ИмяОбластиЯчейки    = ИмяКолонки + "_" + КолСтрокСтр;
			ИмяНовОбластиЯчейки = ИмяКолонки + "_" + КолСтрокСтр1;
			
			ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяОбластиЯчейки];
			ОбластьЯчейки.Имя = ИмяНовОбластиЯчейки;
			
			Если (ИмяГруппы = "П00050000" И НомерГрафы = 3)
			 ИЛИ (НомерГрафы = 1) Тогда
				ТекТабличноеПоле.Области["УдалитьСтроку" + ИмяОбластиЯчейки].Имя = "УдалитьСтроку" + ИмяНовОбластиЯчейки;
			КонецЕсли;
			
			// определяем границы ячейки исходной области
			НомерВерхСтрокиЯчейки  = ОбластьЯчейки.Верх - СдвигСтрок;
			НомерНижнСтрокиЯчейки  = ОбластьЯчейки.Низ  - СдвигСтрок;
			НомерЛевоКолонкиЯчейки = ОбластьЯчейки.Лево;
			НомерПравКолонкиЯчейки = ОбластьЯчейки.Право;
			
			// Назначаем имя ячейки исходной области,
			// (т.к. в результате вставки новой области оно было очищено)
			ОбластьЯчейкиИсходнойОбласти = ТекТабличноеПоле.Область(НомерВерхСтрокиЯчейки, НомерЛевоКолонкиЯчейки, НомерНижнСтрокиЯчейки, НомерПравКолонкиЯчейки);
			ОбластьЯчейкиИсходнойОбласти.Имя = ИмяОбластиЯчейки;
			
			Если (ИмяГруппы = "П00050000" И НомерГрафы = 3)
			 ИЛИ (НомерГрафы = 1) Тогда
				
				Если СтрДлина(ИмяГруппы) = 9 Тогда
					ТекТабличноеПоле.Область(НомерВерхСтрокиЯчейки, НомерЛевоКолонкиЯчейки - 3,
					НомерНижнСтрокиЯчейки, НомерПравКолонкиЯчейки - 3).Имя  = "УдалитьСтроку" + ИмяОбластиЯчейки;
				Иначе
					ТекТабличноеПоле.Область(НомерВерхСтрокиЯчейки, НомерЛевоКолонкиЯчейки - 1,
					НомерНижнСтрокиЯчейки, НомерПравКолонкиЯчейки - 1).Имя  = "УдалитьСтроку" + ИмяОбластиЯчейки;
				КонецЕсли;
				
			КонецЕсли;
			
			// очищаем значения ячеек вставленной области
			Если ОбластьЯчейки.СодержитЗначение = Истина Тогда
				ОбластьЯчейки.Очистить();
			КонецЕсли;
			
			Если ИмяКолонкиНомера <> Неопределено Тогда
				Если ИмяКолонкиНомера = ИмяКолонки Тогда
					Если ОбластьЯчейки.СодержитЗначение = Истина Тогда
						ОбластьЯчейки.Значение = КолСтрокСтр1;
					Иначе
						ОбластьЯчейки.Текст = КолСтрокСтр1;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ИмяГруппыБлока = Неопределено Тогда
		
		Если ИмяГруппы = "П00050000" Тогда
		
			ИмяТекущейОбласти = ИмяГруппы + "3003_" + КолСтрокСтр;
		
		ИначеЕсли СтрДлина(ИмяГруппы) = 9 Тогда
			
			Если ИмяГруппы = Форма.СтруктураРеквизитовФормы.мИдГруппы4М1 Тогда
				
				ИмяТекущейОбласти = ИмяГруппы + "1003_" + КолСтрокСтр;
				
			ИначеЕсли ИмяГруппы = Форма.СтруктураРеквизитовФормы.мИдГруппы4М2 Тогда
				
				ИмяТекущейОбласти = ИмяГруппы + "6003_" + КолСтрокСтр;
				
			ИначеЕсли ИмяГруппы = Форма.СтруктураРеквизитовФормы.мИдГруппы4М3 Тогда
				
				ИмяТекущейОбласти = ИмяГруппы + "9003_" + КолСтрокСтр;
				
			ИначеЕсли ИмяГруппы = Форма.СтруктураРеквизитовФормы.мИдГруппы6М1 Тогда
				
				ИмяТекущейОбласти = ИмяГруппы + "1003_" + КолСтрокСтр;
				
			ИначеЕсли ИмяГруппы = Форма.СтруктураРеквизитовФормы.мИдГруппы6М2 Тогда
				
				ИмяТекущейОбласти = ИмяГруппы + "7003_" + КолСтрокСтр;
				
			ИначеЕсли ИмяГруппы = Форма.СтруктураРеквизитовФормы.мИдГруппы6М3 Тогда
				
				ИмяТекущейОбласти = Лев(ИмяГруппы, 8) + "11003_" + КолСтрокСтр;
				
			Иначе
				
				ИмяТекущейОбласти = ИмяГруппы + "1003_" + КолСтрокСтр;
				
			КонецЕсли;
			
		Иначе
			
			ИмяТекущейОбласти = ИмяГруппы + "01_" + КолСтрокСтр1;
			
		КонецЕсли;
		
		Форма.Элементы[ТекТабличноеПолеИмя].ТекущаяОбласть = ТекТабличноеПоле.Области[ИмяТекущейОбласти];
		
		// установим фокус на поле табличн. документа
		ТекущийЭлемент = Форма.Элементы[ТекТабличноеПолеИмя];
		
	КонецЕсли;
	
	// добавляем в структуру многострочной группы новую строку
	СтруктураГруппы.Добавить();
	
	Если ИмяГруппы = Форма.СтруктураРеквизитовФормы.мИдГруппы4М1
		ИЛИ ИмяГруппы = Форма.СтруктураРеквизитовФормы.мИдГруппы4М2
		ИЛИ ИмяГруппы = Форма.СтруктураРеквизитовФормы.мИдГруппы4М3
		ИЛИ ИмяГруппы = Форма.СтруктураРеквизитовФормы.мИдГруппы6М1
		ИЛИ ИмяГруппы = Форма.СтруктураРеквизитовФормы.мИдГруппы6М2
		ИЛИ ИмяГруппы = Форма.СтруктураРеквизитовФормы.мИдГруппы6М3 Тогда
		
		НачалоИмениПоказателя = Лев(ИмяГруппы, 8);
		
		Для Каждого ОбластьТД Из ТекТабличноеПоле.Области Цикл
			Если СтрНачинаетсяС(ОбластьТД.Имя, "УдалитьСтроку" + НачалоИмениПоказателя) Тогда
				ОбластьТД.Гиперссылка = Истина;
				ОбластьТД.Текст = "х";
			КонецЕсли;
		КонецЦикла;
		
	Иначе
		
		Для Каждого ОбластьТД Из ТекТабличноеПоле.Области Цикл
			Если СтрЧислоВхождений(ОбластьТД.Имя, "УдалитьСтроку") > 0 Тогда
				ОбластьТД.Гиперссылка = Истина;
				ОбластьТД.Текст = "х";
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Форма.Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьДополнительнуюСтрокуНаСервере()
	
	УдалитьДополнительнуюСтроку(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьДополнительнуюСтрокуНаКлиенте()
	
	УдалитьДополнительнуюСтроку(ЭтаФорма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УдалитьДополнительнуюСтроку(Форма, СпециальноеДобавление = Ложь, ИмяКолонкиНомера = Неопределено) Экспорт
	
	Перем ИсходноеКоличествоСтрокГруппы;
	Перем СтруктураГруппы;
	
	ТекущаяСтраница = Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела;
	ТекТабличноеПоле = Форма.ТабличныйДокумент;
	
	ТекущаяОбласть = Форма.Элементы["ТабличныйДокумент"].ТекущаяОбласть;
	
	#Если НаКлиенте ИЛИ ТолстыйКлиентУправляемоеПриложение Тогда
		ИмяГруппы = РегламентированнаяОтчетностьКлиент.РазделТекущейОбласти(Форма, ТекущаяОбласть);
	#Иначе
		ИмяГруппы = РегламентированнаяОтчетностьВызовСервера.РазделТекущейОбластиНаСервере(Форма, ТекущаяОбласть);
	#КонецЕсли
	
	// исходное количество строк группы
	Форма.мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);
	
	ТекТабличноеПолеИмя = "ТабличныйДокумент";
	
	ТекТабличноеПоле = Форма[ТекТабличноеПолеИмя];
	
	Форма.мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);
	
	СтруктураГруппы = Форма[СтруктураГруппы];
	
	// Выполним также проверку вхождения текущей (выделенной) ячейки в многострочный раздел
	ТекущаяОбласть = Форма.Элементы["ТабличныйДокумент"].ТекущаяОбласть;
	
	ИмяЯчейки = ТекущаяОбласть.Имя;
	
	// номер строки многострочного раздела определим
	// по имени выделенной ячейки
	НомУдаляемойСтроки = Число(Сред(ИмяЯчейки, СтрНайти(ИмяЯчейки, "_") + 1));
	НомерСтрокиТаблицы = НомУдаляемойСтроки - 1; // нумерация строк в таблице значений начинается с нуля
	
	Если СтруктураГруппы.Количество() > ИсходноеКоличествоСтрокГруппы Тогда
		
		Если ИмяГруппы = "П00050000" Тогда
			
			ИмяПервойЯчейкиУдаляемойСтроки = "УдалитьСтроку" + ИмяГруппы + "3003_" + Формат(НомУдаляемойСтроки, "ЧГ=");
			
		ИначеЕсли СтрДлина(ИмяГруппы) = 9 Тогда
			
			Если ИмяГруппы = Форма.СтруктураРеквизитовФормы.мИдГруппы4М1 Тогда
				
				ИмяПервойЯчейкиУдаляемойСтроки = "УдалитьСтроку" + ИмяГруппы + "1003_" + Формат(НомУдаляемойСтроки, "ЧГ=");
				
			ИначеЕсли ИмяГруппы = Форма.СтруктураРеквизитовФормы.мИдГруппы4М2 Тогда
				
				ИмяПервойЯчейкиУдаляемойСтроки = "УдалитьСтроку" + ИмяГруппы + "6003_" + Формат(НомУдаляемойСтроки, "ЧГ=");
				
			ИначеЕсли ИмяГруппы = Форма.СтруктураРеквизитовФормы.мИдГруппы4М3 Тогда
				
				ИмяПервойЯчейкиУдаляемойСтроки = "УдалитьСтроку" + ИмяГруппы + "9003_" + Формат(НомУдаляемойСтроки, "ЧГ=");
				
			ИначеЕсли ИмяГруппы = Форма.СтруктураРеквизитовФормы.мИдГруппы6М1 Тогда
				
				ИмяПервойЯчейкиУдаляемойСтроки = "УдалитьСтроку" + ИмяГруппы + "1003_" + Формат(НомУдаляемойСтроки, "ЧГ=");
				
			ИначеЕсли ИмяГруппы = Форма.СтруктураРеквизитовФормы.мИдГруппы6М2 Тогда
				
				ИмяПервойЯчейкиУдаляемойСтроки = "УдалитьСтроку" + ИмяГруппы + "7003_" + Формат(НомУдаляемойСтроки, "ЧГ=");
				
			ИначеЕсли ИмяГруппы = Форма.СтруктураРеквизитовФормы.мИдГруппы6М3 Тогда
				
				ИмяПервойЯчейкиУдаляемойСтроки = "УдалитьСтроку" + Лев(ИмяГруппы, 8) + "11003_" + Формат(НомУдаляемойСтроки, "ЧГ=");
				
			Иначе
				
				ИмяПервойЯчейкиУдаляемойСтроки = "УдалитьСтроку" + ИмяГруппы + "1003_" + Формат(НомУдаляемойСтроки, "ЧГ=");
				
			КонецЕсли;
			
		Иначе
			
			ИмяПервойЯчейкиУдаляемойСтроки = "УдалитьСтроку" + ИмяГруппы + "01_" + Формат(НомУдаляемойСтроки, "ЧГ=");
			
		КонецЕсли;
		
		// область первой ячейки удаляемой строки многострочного раздела
		ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяПервойЯчейкиУдаляемойСтроки];
		
		НастройкиМнгЧ = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСвойствоРаздела(
		Форма, ТекущаяСтраница, "МногострочностьВРазделе").НайтиСтроки(Новый Структура("ИдГруппы", ИмяГруппы))[0];
		ВысотаСтроки = НастройкиМнгЧ.ВысотаСтроки;
		
		НомерВерхЯчейкиОбласти = ОбластьЯчейки.Верх;
		НомерНижнЯчейкиОбласти = ОбластьЯчейки.Верх + ВысотаСтроки - 1;
		
		МногострочностьВРазделе = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСвойствоРаздела(
		Форма, ТекущаяСтраница, "МногострочностьВРазделе");
		МногострочностьВРазделеТип = ТипЗнч(МногострочностьВРазделе);
		Если МногострочностьВРазделеТип = Тип("Число") Тогда
			ИмяОбластиМнгЧ = "МногострочнаяЧасть";
		ИначеЕсли МногострочностьВРазделеТип = Тип("ДанныеФормыКоллекция") Тогда
			ИмяОбластиМнгЧ = МногострочностьВРазделе.НайтиСтроки(Новый Структура("ИдГруппы", ИмяГруппы))[0].Область;
		КонецЕсли;
		// Найдем координаты области, для последующего восстановления.
		
		Если ТекТабличноеПоле.Области.Найти(ИмяОбластиМнгЧ) <> Неопределено Тогда
			ОбластьВерх = ТекТабличноеПоле.Области[ИмяОбластиМнгЧ].Верх;
			ОбластьНиз = ТекТабличноеПоле.Области[ИмяОбластиМнгЧ].Низ;
		КонецЕсли;
		
		Если СпециальноеДобавление Тогда
			
		Иначе
			
			РегламентированнаяОтчетностьВызовСервера.УдалитьОбластьИзТабличногоДокумента(
			ТекТабличноеПоле, НомерВерхЯчейкиОбласти, НомерНижнЯчейкиОбласти);
			
			Форма[ТекТабличноеПолеИмя] = ТекТабличноеПоле;
			
		КонецЕсли;
		// Восстановим область.
		ТекТабличноеПоле.Область(ОбластьВерх, 0, ОбластьНиз, 0).Имя = ИмяОбластиМнгЧ;
		
		КолвоСдвигаемыхСтрок = СтруктураГруппы.Количество() - НомУдаляемойСтроки;
		
		// обновим имена ячеек сдвинутых строк
		Если КолвоСдвигаемыхСтрок > 0 Тогда
			
			Для НСтр = НомУдаляемойСтроки + 1 По СтруктураГруппы.Количество() Цикл
				
				ТекСтрока = СтруктураГруппы[НСтр - 1];
				
				НСтрСтр = Формат(НСтр, "ЧГ=");
				НСтрСтр1 = Формат(НСтр - 1, "ЧГ=");
				
				Для НомерГрафы = 0 По Форма.мСтруктураКолвоКолонокРазделов[ИмяГруппы] Цикл
					
					Если НомерГрафы = 0 Тогда
						
						Если ИмяГруппы = "П00050000" Тогда
							
							КолонкаИмя = "УдалитьСтроку" + ИмяГруппы + "3003";
							
						ИначеЕсли СтрДлина(ИмяГруппы) = 9 Тогда
							
							Если ИмяГруппы = Форма.СтруктураРеквизитовФормы.мИдГруппы4М1 Тогда
								
								КолонкаИмя = "УдалитьСтроку" + ИмяГруппы + "1003";
								
							ИначеЕсли ИмяГруппы = Форма.СтруктураРеквизитовФормы.мИдГруппы4М2 Тогда
								
								КолонкаИмя = "УдалитьСтроку" + ИмяГруппы + "6003";
								
							ИначеЕсли ИмяГруппы = Форма.СтруктураРеквизитовФормы.мИдГруппы4М3 Тогда
								
								КолонкаИмя = "УдалитьСтроку" + ИмяГруппы + "9003";
								
							ИначеЕсли ИмяГруппы = Форма.СтруктураРеквизитовФормы.мИдГруппы6М1 Тогда
								
								КолонкаИмя = "УдалитьСтроку" + ИмяГруппы + "1003";
								
							ИначеЕсли ИмяГруппы = Форма.СтруктураРеквизитовФормы.мИдГруппы6М2 Тогда
								
								КолонкаИмя = "УдалитьСтроку" + ИмяГруппы + "7003";
								
							ИначеЕсли ИмяГруппы = Форма.СтруктураРеквизитовФормы.мИдГруппы6М3 Тогда
								
								КолонкаИмя = "УдалитьСтроку" + Лев(ИмяГруппы, 8) + "11003";
								
							Иначе
								
								КолонкаИмя = "УдалитьСтроку" + ИмяГруппы + "1003";
								
							КонецЕсли;
							
						Иначе
							
							КолонкаИмя = "УдалитьСтроку" + ИмяГруппы + Формат( 1, "ЧЦ=2; ЧВН=");
							
						КонецЕсли;
						
						ИмяСдвинутойЯчейки = КолонкаИмя + "_" + НСтрСтр;
						НовоеИмяСдвинутойЯчейки = КолонкаИмя + "_" + НСтрСтр1;
						
						ОбластьСдвинутойЯчейки = ТекТабличноеПоле.Области[ИмяСдвинутойЯчейки];
						ОбластьСдвинутойЯчейки.Имя = НовоеИмяСдвинутойЯчейки;
						
						Если ИмяКолонкиНомера <> Неопределено Тогда
							Если ИмяКолонкиНомера = КолонкаИмя Тогда
								// обновляем порядковый номер строки
								
								СтарыйНомер = Число(ТекСтрока[КолонкаИмя]);
								НовыйПорядковыйНомер = Формат(Макс(СтарыйНомер - 1, 0), "ЧГ=");
								ОбластьСдвинутойЯчейки.Текст = НовыйПорядковыйНомер;
								
								// обновляем значение элемента таблицы значений
								ТекСтрока[КолонкаИмя] = НовыйПорядковыйНомер;
							КонецЕсли;
						КонецЕсли;
						
					КонецЕсли;
					
					Если СтрДлина(ИмяГруппы) = 9 Тогда
						
						Если ИмяГруппы = Форма.СтруктураРеквизитовФормы.мИдГруппы4М1 Тогда
							
							КолонкаИмя = ИмяГруппы + Формат((НомерГрафы) * 10, "ЧЦ=2; ЧВН=") + "03";
							
						ИначеЕсли ИмяГруппы = Форма.СтруктураРеквизитовФормы.мИдГруппы4М2 Тогда
							
							КолонкаИмя = ИмяГруппы + Формат((НомерГрафы + 5) * 10, "ЧЦ=2; ЧВН=") + "03";
							
						ИначеЕсли ИмяГруппы = Форма.СтруктураРеквизитовФормы.мИдГруппы4М3 Тогда
							
							КолонкаИмя = Лев(ИмяГруппы, 8) + Формат((НомерГрафы + 8) * 10, "ЧЦ=3; ЧВН=") + "03";
							
						ИначеЕсли ИмяГруппы = Форма.СтруктураРеквизитовФормы.мИдГруппы6М1 Тогда
							
							КолонкаИмя = ИмяГруппы + Формат((НомерГрафы) * 10, "ЧЦ=2; ЧВН=") + "03";
							
						ИначеЕсли ИмяГруппы = Форма.СтруктураРеквизитовФормы.мИдГруппы6М2 Тогда
							
							КолонкаИмя = Лев(ИмяГруппы, 8) + Формат((НомерГрафы + 6) * 10, "ЧЦ=3; ЧВН=") + "03";
							
						ИначеЕсли ИмяГруппы = Форма.СтруктураРеквизитовФормы.мИдГруппы6М3 Тогда
							
							КолонкаИмя = Лев(ИмяГруппы, 8) + Формат((НомерГрафы + 10) * 10, "ЧЦ=3; ЧВН=") + "03";
							
						Иначе
							
							КолонкаИмя = ИмяГруппы + Формат((НомерГрафы) * 10, "ЧЦ=2; ЧВН=") + "03";
							
						КонецЕсли;
						
					Иначе
						
						КолонкаИмя = ИмяГруппы + Формат(НомерГрафы, "ЧЦ=2; ЧВН=");
						
					КонецЕсли;
					
					Если СтруктураГруппы[0].Свойство(КолонкаИмя) Тогда
						
						ИмяСдвинутойЯчейки = КолонкаИмя + "_" + НСтрСтр;
						НовоеИмяСдвинутойЯчейки = КолонкаИмя + "_" + НСтрСтр1;
						
						ОбластьСдвинутойЯчейки = ТекТабличноеПоле.Области[ИмяСдвинутойЯчейки];
						ОбластьСдвинутойЯчейки.Имя = НовоеИмяСдвинутойЯчейки;
						
						Если ИмяКолонкиНомера <> Неопределено Тогда
							Если ИмяКолонкиНомера = КолонкаИмя Тогда
								// обновляем порядковый номер строки
								
								СтарыйНомер = Число(ТекСтрока[КолонкаИмя]);
								НовыйПорядковыйНомер = Строка(Макс(СтарыйНомер - 1, 0));
								ОбластьСдвинутойЯчейки.Текст = НовыйПорядковыйНомер;
								
								// обновляем значение элемента таблицы значений
								ТекСтрока[КолонкаИмя] = НовыйПорядковыйНомер;
							КонецЕсли;
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЦикла;
		КонецЕсли;
		
		// обновляем структуру многострочного раздела
		СтруктураГруппы.Удалить(НомерСтрокиТаблицы);
		
	Иначе
		// строка не удаляется в форме табличного документа,
		// а должна осуществляться сдвиг строк
		
		// обновляем структуру многострочного раздела
		// методом удаления выбранной строки и добавления пустой строки
		СтруктураГруппы.Удалить(НомерСтрокиТаблицы);
		
		ДобавляемаяСтрока = СтруктураГруппы.Добавить();
		
		// обновляем порядковые номера строк, выводимых в табличный документ
		Для Каждого СтрокаТаблицы Из СтруктураГруппы Цикл
			
			НомерСтрокиВТаблице = СтруктураГруппы.Индекс(СтрокаТаблицы);
			НомерСтрокиВФормеТаблицы = Формат(НомерСтрокиВТаблице + 1, "ЧГ=");
			
			Для НомерГрафы = 1 По Форма.мСтруктураКолвоКолонокРазделов[ИмяГруппы] Цикл
				
				Если ИмяГруппы = "П00050000" Тогда
					
					КолонкаТаблицыИмя = ИмяГруппы + "3003";
					
				ИначеЕсли СтрДлина(ИмяГруппы) = 9 Тогда
					
					Если ИмяГруппы = Форма.СтруктураРеквизитовФормы.мИдГруппы4М1 Тогда
						
						КолонкаТаблицыИмя = ИмяГруппы + "1003";
						
					ИначеЕсли ИмяГруппы = Форма.СтруктураРеквизитовФормы.мИдГруппы4М2 Тогда
						
						КолонкаТаблицыИмя = ИмяГруппы + "6003";
						
					ИначеЕсли ИмяГруппы = Форма.СтруктураРеквизитовФормы.мИдГруппы4М3 Тогда
						
						КолонкаТаблицыИмя = ИмяГруппы + "9003";
						
					ИначеЕсли ИмяГруппы = Форма.СтруктураРеквизитовФормы.мИдГруппы6М1 Тогда
						
						КолонкаТаблицыИмя = ИмяГруппы + "1003";
						
					ИначеЕсли ИмяГруппы = Форма.СтруктураРеквизитовФормы.мИдГруппы6М2 Тогда
						
						КолонкаТаблицыИмя = ИмяГруппы + "7003";
						
					ИначеЕсли ИмяГруппы = Форма.СтруктураРеквизитовФормы.мИдГруппы6М3 Тогда
						
						КолонкаТаблицыИмя = Лев(ИмяГруппы, 8) + "11003";
						
					Иначе
						
						КолонкаТаблицыИмя = ИмяГруппы + "1003";
						
					КонецЕсли;
					
				Иначе
					
					КолонкаТаблицыИмя = ИмяГруппы + Формат(НомерГрафы, "ЧЦ=2; ЧВН=");
					
				КонецЕсли;
				
				Если СтруктураГруппы[0].Свойство(КолонкаТаблицыИмя) Тогда
					
					Если ИмяКолонкиНомера <> Неопределено Тогда
						Если ИмяКолонкиНомера = КолонкаТаблицыИмя Тогда
							// обновляем порядковый номер строки
							СтрокаТаблицы[КолонкаТаблицыИмя] = НомерСтрокиВФормеТаблицы;
						КонецЕсли;
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
		#Если НаКлиенте Тогда
			Форма.ВывестиРазделВТабличныйДокументНаКлиенте(ИмяГруппы, СтруктураГруппы);
		#Иначе
			Форма.ВывестиРазделВТабличныйДокументНаСервере(ИмяГруппы, СтруктураГруппы);
		#КонецЕсли
		
	КонецЕсли;
	
	НомТекущейСтроки = Мин(НомУдаляемойСтроки, СтруктураГруппы.Количество());
	
	Если ИмяГруппы = "П00050000" Тогда
		
		ИмяТекущейОбласти = "УдалитьСтроку" + ИмяГруппы + "3003_" + Формат(НомТекущейСтроки, "ЧГ=");
		
	ИначеЕсли СтрДлина(ИмяГруппы) = 9 Тогда
		
		Если ИмяГруппы = Форма.СтруктураРеквизитовФормы.мИдГруппы4М1 Тогда
			
			ИмяТекущейОбласти = "УдалитьСтроку" + ИмяГруппы + "1003_" + Формат(НомТекущейСтроки, "ЧГ=");
			
		ИначеЕсли ИмяГруппы = Форма.СтруктураРеквизитовФормы.мИдГруппы4М2 Тогда
			
			ИмяТекущейОбласти = "УдалитьСтроку" + ИмяГруппы + "6003_" + Формат(НомТекущейСтроки, "ЧГ=");
			
		ИначеЕсли ИмяГруппы = Форма.СтруктураРеквизитовФормы.мИдГруппы4М3 Тогда
			
			ИмяТекущейОбласти = "УдалитьСтроку" + ИмяГруппы + "9003_" + Формат(НомТекущейСтроки, "ЧГ=");
			
		ИначеЕсли ИмяГруппы = Форма.СтруктураРеквизитовФормы.мИдГруппы6М1 Тогда
			
			ИмяТекущейОбласти = "УдалитьСтроку" + ИмяГруппы + "1003_" + Формат(НомТекущейСтроки, "ЧГ=");
			
		ИначеЕсли ИмяГруппы = Форма.СтруктураРеквизитовФормы.мИдГруппы6М2 Тогда
			
			ИмяТекущейОбласти = "УдалитьСтроку" + ИмяГруппы + "7003_" + Формат(НомТекущейСтроки, "ЧГ=");
			
		ИначеЕсли ИмяГруппы = Форма.СтруктураРеквизитовФормы.мИдГруппы6М3 Тогда
			
			ИмяТекущейОбласти = "УдалитьСтроку" + Лев(ИмяГруппы, 8) + "11003_" + Формат(НомТекущейСтроки, "ЧГ=");
			
		Иначе
			
			ИмяТекущейОбласти = "УдалитьСтроку" + ИмяГруппы + "1003_" + Формат(НомТекущейСтроки, "ЧГ=");
			
		КонецЕсли;
		
	Иначе
		
		ИмяТекущейОбласти = "УдалитьСтроку" + ИмяГруппы + "01_" + Формат(НомТекущейСтроки, "ЧГ=");
		
	КонецЕсли;
	
	Форма.Элементы[ТекТабличноеПолеИмя].ТекущаяОбласть = ТекТабличноеПоле.Области[ИмяТекущейОбласти];
	
	ТекущийЭлемент = Форма.Элементы[ТекТабличноеПолеИмя];
	
	ЕстьДопСтроки = Ложь;
	
	Если ИмяГруппы = Форма.СтруктураРеквизитовФормы.мИдГруппы4М1
		ИЛИ ИмяГруппы = Форма.СтруктураРеквизитовФормы.мИдГруппы4М2
		ИЛИ ИмяГруппы = Форма.СтруктураРеквизитовФормы.мИдГруппы4М3
		ИЛИ ИмяГруппы = Форма.СтруктураРеквизитовФормы.мИдГруппы6М1
		ИЛИ ИмяГруппы = Форма.СтруктураРеквизитовФормы.мИдГруппы6М2
		ИЛИ ИмяГруппы = Форма.СтруктураРеквизитовФормы.мИдГруппы6М3 Тогда
		
		НачалоИмениПоказателя = Лев(ИмяГруппы, 8);
		
		Для Каждого ОбластьТД Из ТекТабличноеПоле.Области Цикл
			Если СтрНачинаетсяС(ОбластьТД.Имя, НачалоИмениПоказателя) Тогда
				Если СтрНайти(ОбластьТД.Имя, "_2", , 14) > 0 Тогда
					ЕстьДопСтроки = Истина;
					Прервать;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Если НЕ ЕстьДопСтроки Тогда
			Для Каждого ОбластьТД Из ТекТабличноеПоле.Области Цикл
				Если СтрНачинаетсяС(ОбластьТД.Имя, "УдалитьСтроку" + НачалоИмениПоказателя) Тогда
					ОбластьТД.Гиперссылка = Ложь;
					ОбластьТД.Текст = "";
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	Иначе
		
		Для Каждого ОбластьТД Из ТекТабличноеПоле.Области Цикл
			Если СтрЧислоВхождений(ОбластьТД.Имя, "_2") > 0 Тогда
				ЕстьДопСтроки = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если НЕ ЕстьДопСтроки Тогда
			Для Каждого ОбластьТД Из ТекТабличноеПоле.Области Цикл
				Если СтрЧислоВхождений(ОбластьТД.Имя, "УдалитьСтроку") > 0 Тогда
					ОбластьТД.Гиперссылка = Ложь;
					ОбластьТД.Текст = "";
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	Форма.Модифицированность = Истина;
	
	Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел5" Тогда
		РегламентированнаяОтчетностьКлиентСервер.СохранитьДанныеМногостраничногоРазделаВактивнойСтранице(
		Форма, Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела, Ложь);
	КонецЕсли;
	
	#Если НаКлиенте Тогда
		Форма.РасчетНаКлиенте(Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	#Иначе
		Форма.РасчетНаСервере(Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораВПолеТабличногоДокумента(Элемент, Область, СтандартнаяОбработка)
	
	Если РегламентированнаяОтчетностьКлиент.ВыбраннаяОбластьРегламентированногоОтчетаНеВерна(
		ЭтаФорма, Область, СтандартнаяОбработка) Тогда
		Возврат;
	КонецЕсли;
	
	ИмяЯчейки = Область.Имя;
	
	Если Лев(ИмяЯчейки, 7) = "КодИМНС" Тогда
		СтандартнаяОбработка = Ложь;
		ОбработкаВыбораИФНС();
		Возврат;
	КонецЕсли;
	
	Если СтрНачинаетсяС(Область.Имя, "П000310007001")
		ИЛИ Область.Имя = "П000500001003" Тогда
		
		СтандартнаяОбработка = Ложь;
		
		СписокГодов = Новый СписокЗначений;
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("ПервоеЧисло", Год(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета));
		Если СтрНачинаетсяС(Область.Имя, "П000310007001") Тогда
			СтруктураПараметров.Вставить("ПоследнееЧисло", 2006);
		Иначе
			СтруктураПараметров.Вставить("ПоследнееЧисло", 1900);
		КонецЕсли;
		СтруктураПараметров.Вставить("ТипСтрока", Истина);
		
		СписокГодов.ЗагрузитьЗначения(МассивЧиселЗаданныйИнтервалом(СтруктураПараметров));
		
		СписокГодов.Вставить(0, "", "Пустое значение");
		
		Оп = Новый ОписаниеОповещения("ВыбратьЧислоИзСпискаЗавершение", ЭтотОбъект, Область);
		
		ПоказатьВыборИзСписка(Оп, СписокГодов, Элементы.ТабличныйДокумент.ТекущаяОбласть,
		СписокГодов.НайтиПоЗначению(СокрЛП(Область.Значение)));
		
	КонецЕсли;
	
	ПараметрВводаПоля = РегламентированнаяОтчетностьКлиентСервер.НайтиСвойстваПоказателя(ЭтаФорма, ИмяЯчейки);
	
	Если ПараметрВводаПоля <> Неопределено И ПараметрВводаПоля.ТаблицаЗначений.Количество() > 0 Тогда
		
		КодПоказателя = ПараметрВводаПоля.Показатель;
		
		КопироватьДанныеФормы(ПараметрВводаПоля.ТаблицаЗначений, ТЗВыбора);
		
		ТребРезультат = 0;
		
		Если КодПоказателя = "Период" Тогда
			
			НомерКвартала = Число(Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ=к"));
			
			ТребРезультат = НомерКвартала;
			
		КонецЕсли;
		
		Если ТребРезультат <> 0 Тогда
			РазмерТЗ = ТЗВыбора.Количество();
			Для Сч = 1 По РазмерТЗ Цикл
				ЭлементТЗ = ТЗВыбора[РазмерТЗ - Сч];
				Рез = ?(ЭлементТЗ.РезультатПроверки = "", 0, Число(ЭлементТЗ.РезультатПроверки));
				Если Рез <> 0 И Рез <> ТребРезультат Тогда
					ТЗВыбора.Удалить(ЭлементТЗ);
				КонецЕсли;
			КонецЦикла; 
		КонецЕсли;
		
		ВвестиПоказатель(Элемент, Область, КодПоказателя, Ложь, ПараметрВводаПоля.ТекстПриВыборе, ТЗВыбора, СтандартнаяОбработка);
		
	Иначе
		УстановитьДоступностьОбластей(ЭтаФорма, СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТабличныйДокументВыбор(Элемент, Область, СтандартнаяОбработка)
	
	Если ТабличныйДокумент.Области.Найти("ПерейтиКПомощнику") <> Неопределено Тогда
		Если Область.Верх = ТабличныйДокумент.Области.ПерейтиКПомощнику.Верх Тогда
			СтандартнаяОбработка = Ложь;
			РегламентированнаяОтчетностьКлиентПереопределяемый.ОткрытьФормуПомощникаПоУчетуНДС(Область.Расшифровка);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ОбработкаВыбораВПолеТабличногоДокумента(Элемент, Область, СтандартнаяОбработка);
	
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
		Если Область.Имя = "ОрганизацииДляЗаполненияОтчета" И Область.Гиперссылка Тогда
			
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("НачальноеЗначениеВыбора",
			Новый Структура("Организация", СтруктураРеквизитовФормы.Организация));
			ПараметрыФормы.Вставить("Организация", СтруктураРеквизитовФормы.ГруппаОрганизаций);
			
			ФормаВыбораОрганизаций = РегламентированнаяОтчетностьКлиент.ПолучитьОбщуюФормуПоИмени(
			"ФормаВыбораОрганизаций", ПараметрыФормы, ЭтаФорма);
			ФормаВыбораОрганизаций.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
			ФормаВыбораОрганизаций.Открыть();
			
		КонецЕсли;
		УстановитьДоступностьОбластей(ЭтаФорма, "Титульный");
	КонецЕсли;
	
	Если СтрЧислоВхождений(Область.Имя, "ДобавитьСтраницу") > 0 Тогда
		ДобавитьСтраницу("");
	ИначеЕсли СтрЧислоВхождений(Область.Имя, "УдалитьСтраницу") > 0 И Область.Гиперссылка Тогда
		УдалитьСтраницу("");
	ИначеЕсли СтрЧислоВхождений(Область.Имя, "ДобавитьСтроку") > 0 Тогда
		ДобавитьСтроку("");
	ИначеЕсли СтрЧислоВхождений(Область.Имя, "УдалитьСтроку") > 0 И Область.Гиперссылка Тогда
		УдалитьСтроку("");
	КонецЕсли;
	
	Если РегламентированнаяОтчетностьКлиент.ВыбраннаяОбластьРегламентированногоОтчетаНеВерна(
		ЭтаФорма, Область, СтандартнаяОбработка) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьЧислоИзСпискаЗавершение(ВыбЭлемент, ДополнительныйПараметр) Экспорт
	
	Если ВыбЭлемент <> Неопределено Тогда
		Если ВыбЭлемент.Значение <> ДополнительныйПараметр.Значение Тогда
			ДополнительныйПараметр.Значение = ВыбЭлемент.Значение;
			Если СтрНачинаетсяС(ДополнительныйПараметр.Имя, "П000310007") Тогда
				УстановитьФорматВыводаВПоляхВвода(ЭтаФорма, "Раздел3_Прил1");
			КонецЕсли;
			Модифицированность = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция МассивЧиселЗаданныйИнтервалом(СтруктураПараметров)
	
	МассивЧисел = Новый Массив;
	
	Если ТипЗнч(СтруктураПараметров) = Тип("Структура") Тогда
		
		ПервоеЧисло    = Неопределено;
		ПоследнееЧисло = Неопределено;
		
		Если СтруктураПараметров.Свойство("ПервоеЧисло", ПервоеЧисло)
			И СтруктураПараметров.Свойство("ПоследнееЧисло", ПоследнееЧисло) Тогда
			
			Если ПервоеЧисло <= ПоследнееЧисло Тогда
				ПоУбыванию = Ложь;
			Иначе
				ПоУбыванию = Истина;
				ПромежуточноеЗначение = ПервоеЧисло;
				ПервоеЧисло = ПоследнееЧисло;
				ПоследнееЧисло = ПромежуточноеЗначение;
			КонецЕсли;
			
			ТипСтрока = Ложь;
			СтруктураПараметров.Свойство("ТипСтрока", ТипСтрока);
			ТипСтрока = ТипСтрока = Истина;
			
			ДлинаСЛидирующимиНулями = Неопределено;
			СтруктураПараметров.Свойство("ДлинаСЛидирующимиНулями", ДлинаСЛидирующимиНулями);
			Если ТипЗнч(ДлинаСЛидирующимиНулями) <> Тип("Число")
				ИЛИ ДлинаСЛидирующимиНулями = 0 Тогда
				ДлинаСЛидирующимиНулями = Неопределено;
			КонецЕсли;
			
			Для ТекущееЧисло = ПервоеЧисло По ПоследнееЧисло Цикл
				
				Если ДлинаСЛидирующимиНулями <> Неопределено Тогда
					СтрокаФормата = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						"ЧЦ=%1;ЧГ=;ЧВН=", ДлинаСЛидирующимиНулями);
					ТекущееЗначение = Формат(ТекущееЧисло, СтрокаФормата);
				ИначеЕсли ТипСтрока Тогда
					ТекущееЗначение = Формат(ТекущееЧисло, "ЧГ=");
				Иначе
					ТекущееЗначение = ТекущееЧисло;
				КонецЕсли;
				
				Если ПоУбыванию Тогда
					МассивЧисел.Вставить(0, ТекущееЗначение);
				Иначе
					МассивЧисел.Добавить(ТекущееЗначение);
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат МассивЧисел;
	
КонецФункции

&НаКлиенте
Процедура ОбработкаИзмененияСодержимогоВПолеТабличногоДокумента(Элемент, Область)
	
	Модифицированность = Истина;
	
	ПараметрВводаПоля = СвойстваПоказателей.НайтиСтроки(Новый Структура("Показатель", Область.Имя));
	
	Если ПараметрВводаПоля.Количество() > 0 Тогда
		
		ПараметрВводаПоля = ПараметрВводаПоля[0];
		
		Если ПараметрВводаПоля.Тип = "ОКТМО" И ЗначениеЗаполнено(Область.Значение) Тогда
			ДлинаЗначения = СтрДлина(СокрЛП(Область.Значение));
			Для Инд = ДлинаЗначения+1 По 11 Цикл
				Область.Значение = СокрЛП(Область.Значение) + "0";
			КонецЦикла;
		КонецЕсли;
		
		Если СтрДлина(СокрЛП(Область.Значение)) <> 0 И ПараметрВводаПоля.Длина <> 0
			И СтрДлина(СокрЛП(Область.Значение)) <> ПараметрВводаПоля.Длина Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр(
			"ru='Длина значения показателя должна быть равна %1!'"), ПараметрВводаПоля.Длина);
			Сообщение.Сообщить();
		КонецЕсли;
	
	КонецЕсли;
	
	Если Область.Имя = "ОКВЭД" Тогда
		
		Если НЕ РегламентированнаяОтчетностьКлиентСервер.ОКВЭДСоответствуетТребованиям(Область.Значение) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр(
			"ru='На титульном листе задано некорректное значение кода вида деятельности по ОКВЭД!%1Допустимы значения, соответствующие следующим шаблонам:%2""XX"", ""XX.X"", ""XX.XX"", ""XX.XX.X"", ""XX.XX.XX"" (X - любая цифра).'"), Символы.ПС, Символы.ПС);
			Сообщение.Сообщить();
		КонецЕсли;
		
	ИначеЕсли Область.Имя = "ПоМесту" Тогда
		
		ЗаполнитьОКТМО(ЭтаФорма, СтруктураРеквизитовФормы.КодТерриториальногоОбразования);
		
	ИначеЕсли Область.Имя = "НомерКорректировки" Тогда
		
		НомерКорректировки = ТабличныйДокумент.Области.НомерКорректировки.Значение;
		
		СтруктураРеквизитовФормы.ВидДокумента = ?(Область.Значение = 0, 0, 1);
		
		УстановитьДоступностьПризнакаАктуальностиРанееОтправленныхСведений();
		
		РегламентированнаяОтчетностьКлиентСервер.УстановитьЗначениеОКВЭД(
		ДатаПодписи, СтруктураРеквизитовФормы, ТабличныйДокумент.Области.ОКВЭД.Значение);
		
		Модифицированность = Истина;
		
	ИначеЕсли Область.Имя = "ДатаПодписи" Тогда
		
		ДатаПодписи = ТабличныйДокумент.Области.ДатаПодписи.Значение;
		ЗаполнитьСведенияОбОрганизацииНаСервере(Истина);
		Модифицированность = Истина;
		
	КонецЕсли;
	
	ИмяРаздела = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
	
	Если ИмяРаздела = "Раздел1"
		ИЛИ ИмяРаздела = "Раздел2"
		ИЛИ ИмяРаздела = "Раздел3"
		ИЛИ ИмяРаздела = "Раздел3_Прил1"
		ИЛИ ИмяРаздела = "Раздел3_Прил2"
		ИЛИ ИмяРаздела = "Раздел4"
		ИЛИ ИмяРаздела = "Раздел5"
		ИЛИ ИмяРаздела = "Раздел6"
		ИЛИ ИмяРаздела = "Раздел7" Тогда
		
		ИмяОбласти = Область.Имя;
		
		ПозицияПодстроки = СтрНайти(ИмяОбласти, "_");
		
		Если ПозицияПодстроки > 0 Тогда
			ИмяОбласти = Лев(ИмяОбласти, ПозицияПодстроки - 1);
		КонецЕсли;
		
		Если ИмяРаздела = "Раздел5" Тогда
			РегламентированнаяОтчетностьКлиентСервер.СохранитьДанныеМногостраничногоРазделаВактивнойСтранице(
			ЭтаФорма, ИмяРаздела, Ложь);
		КонецЕсли;
		
		Если СтрНачинаетсяС(Область.Имя, "П000310007") Тогда
			УстановитьФорматВыводаВПоляхВвода(ЭтаФорма, "Раздел3_Прил1");
		КонецЕсли;
		
		УстановитьДоступностьОбластей(ЭтаФорма, ИмяРаздела);
		
		РасчетНаКлиенте(ИмяРаздела, ИмяОбласти);
		
	ИначеЕсли ИмяРаздела = "Титульный" Тогда
		
		УстановитьДоступностьОбластей(ЭтаФорма, "Титульный");
		
		Если Область.Имя = "ПоМесту" Тогда
			
			РасчетНаКлиенте("Раздел1", Область.Имя);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеСменыЕдИзмеренияИТочности()
	
	ЗаполнитьПустыеСтруктурыДанных();
	
	ПроверитьТочность();
	
	УстановитьФорматВыводаВПоляхВводаНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
	РасчетНаСервере();
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьТочность()
	
	Если СтруктураРеквизитовФормы.ЕдиницаИзмерения = ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1 Тогда
		
		Если СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения > 2 Тогда
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр(
			"ru='%1: при выводе сумм в рублях точность не может превышать 2 знака'"), ЭтаФорма.Заголовок);
			Сообщение.Сообщить();
			
			СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = 2;
			
		КонецЕсли;
		
	ИначеЕсли СтруктураРеквизитовФормы.ЕдиницаИзмерения = ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1000 Тогда
		
		Если СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения > 3 Тогда
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр(
			"ru='%1: при выводе сумм в тысячах рублей точность не может превышать 3 знака'"), ЭтаФорма.Заголовок);
			Сообщение.Сообщить();
			
			СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = 3;
			
		КонецЕсли;
		
	ИначеЕсли СтруктураРеквизитовФормы.ЕдиницаИзмерения = ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1000000 Тогда
		
		Если СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения > 6 Тогда
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр(
			"ru='%1: при выводе сумм в миллионах рублей точность не может превышать 6 знаков'"), ЭтаФорма.Заголовок);
			Сообщение.Сообщить();
			
			СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = 6;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Обновить(Команда)
	
	ЗаполнитьСведенияОбОрганизацииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуНастроек(Команда)
	
	ОткрытьФормуВыбораСтраниц("ВыбратьДляНастройки");
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораСтраниц(ВариантВыбора)
	Перем ТекущийРазделОтчетаСокрНаим;
	Перем НомерСтраницыРазделаОтчета;
	
	Если НЕ Элементы.РазделыОтчета.ТекущиеДанные = Неопределено Тогда
		ТекущийРазделОтчетаСокрНаим = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
		НомерСтраницыРазделаОтчета  = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета;
	КонецЕсли;
	
	мПараметры = Новый Структура;
	мПараметры.Вставить("ПроверкаСоотношений", Истина);
	мПараметры.Вставить("Автосохранение", Ложь);
	мПараметры.Вставить("ИмеетсяРеквизитДеревоВыбранныхСтраниц", Истина);
	мПараметры.Вставить("СчетчикСтраниц", Ложь);
	
	Если СтруктураРеквизитовФормы.ОтображатьКнопкуРасшифровать Тогда
		мПараметры.Вставить("СохранятьРасшифровкуАвтозаполнения", Истина);
	КонецЕсли;
	
	Если СтруктураРеквизитовФормы.ДоступенМеханизмПечатиРеглОтчетностиСДвухмернымШтрихкодомPDF417 Тогда
		мПараметры.Вставить("РазрешитьВстроеннуюПечать", Истина);
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ФлажокОтклАвтоРасчет",                    СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);
	ПараметрыФормы.Вставить("мПечатьБезШтрихкодаРазрешена",            СтруктураРеквизитовФормы.мПечатьБезШтрихкодаРазрешена);
	ПараметрыФормы.Вставить("мСчетчикСтраниц",                         СтруктураРеквизитовФормы.мСчетчикСтраниц);
	ПараметрыФормы.Вставить("мАвтоВыборКодов",                         СтруктураРеквизитовФормы.мАвтоВыборКодов);
	ПараметрыФормы.Вставить("мПроверятьСоотношенияПриПечатиИВыгрузки", СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки);
	ПараметрыФормы.Вставить("ЕдиницаИзмерения",                        СтруктураРеквизитовФормы.ЕдиницаИзмерения);
	ПараметрыФормы.Вставить("ТочностьЕдиницыИзмерения",                СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения);
	ПараметрыФормы.Вставить("СохранятьРасшифровкуАвтозаполнения",      СтруктураРеквизитовФормы.мСохранятьРасшифровку);
	ПараметрыФормы.Вставить("мПараметры",                              мПараметры);
	
	ФормаНастройкиОтчета = РегламентированнаяОтчетностьКлиент.ПолучитьОбщуюФормуПоИмени("НастройкиОтчета", ПараметрыФормы, ЭтаФорма);
	
	мДеревоВыбранныхСтраниц.ПолучитьЭлементы().Очистить();
	
	КопироватьДанныеФормы(мДеревоСтраницОтчета, ФормаНастройкиОтчета.Дерево);
	
	ЗначениеАвторасчета = СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет;
	ЗначениеЕдИзм       = СтруктураРеквизитовФормы.ЕдиницаИзмерения;
	ЗначениеЗпт         = СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения;
	
	ДополнительныеПараметры = Новый Структура(
	"ЗначениеАвторасчета, ЗначениеЕдИзм, ЗначениеЗпт, НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим",
	ЗначениеАвторасчета, ЗначениеЕдИзм, ЗначениеЗпт, НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим);
	ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьФормуВыбораСтраницЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ФормаНастройкиОтчета.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
	ФормаНастройкиОтчета.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	ФормаНастройкиОтчета.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораСтраницЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	ЗначениеАвторасчета = ДополнительныеПараметры.ЗначениеАвторасчета;
	ЗначениеЕдИзм = ДополнительныеПараметры.ЗначениеЕдИзм;
	ЗначениеЗпт = ДополнительныеПараметры.ЗначениеЗпт;
	НомерСтраницыРазделаОтчета = ДополнительныеПараметры.НомерСтраницыРазделаОтчета;
	ТекущийРазделОтчетаСокрНаим = ДополнительныеПараметры.ТекущийРазделОтчетаСокрНаим;
	
	РегламентированнаяОтчетностьКлиентСервер.ПоказатьКнопкиПечати(ЭтаФорма);
	Модифицированность = Истина;
	
	флЗначенияИдентичны = Истина;
	
	Для Индекс = 0 По мДеревоСтраницОтчета.ПолучитьЭлементы().Количество() - 1 Цикл
		
		Если НЕ мДеревоСтраницОтчета.ПолучитьЭлементы()[Индекс].ПоказатьСтраницу
			= мДеревоВыбранныхСтраниц.ПолучитьЭлементы()[Индекс].ПоказатьСтраницу Тогда
			флЗначенияИдентичны = Ложь;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЗначениеАвторасчета <> СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Тогда
		
		#Если ВебКлиент Тогда
			ИзменитьТаблицуВариантовЗаполненияНаСервере();
		#Иначе
			РегламентированнаяОтчетностьКлиентСервер.ИзменитьТаблицуВариантовЗаполнения(
			ЭтаФорма, НЕ СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);
		#КонецЕсли
		
		ИзменитьЦветЯчеек(ЭтаФорма, СтруктураРеквизитовФормы.НаимТекущегоРаздела);
		
		УстановитьДоступностьОбластей(ЭтаФорма, СтруктураРеквизитовФормы.НаимТекущегоРаздела);
		
	КонецЕсли;
	
	Если ЗначениеЕдИзм <> СтруктураРеквизитовФормы.ЕдиницаИзмерения
		ИЛИ ЗначениеЗпт <> СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения Тогда
		ПослеСменыЕдИзмеренияИТочности();
	КонецЕсли;
	
	// Управляем видимостью страниц основной панели формы
	РегламентированнаяОтчетностьКлиент.ПоказатьСтраницыОтчетаНаКлиенте(ЭтаФорма);
	
	Если НЕ флЗначенияИдентичны Тогда
		
		СформироватьДеревоРазделовОтчетаНаКлиенте();
		
		Если НЕ ТекущийРазделОтчетаСокрНаим = Неопределено Тогда
			
			// Пытаемся найти ранее запомненный раздел.
			НайденнаяСтрока = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(
			РазделыОтчета.ПолучитьЭлементы(), "КолонкаРазделыОтчетаСокрНаим", ТекущийРазделОтчетаСокрНаим);
			
			Если НЕ НайденнаяСтрока = Неопределено 
				И НЕ НомерСтраницыРазделаОтчета = Неопределено 
				И НайденнаяСтрока.ПолучитьЭлементы().Количество() > 0 Тогда
				
				НайденнаяСтрока = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(
				НайденнаяСтрока.ПолучитьЭлементы(), "КолонкаНомерСтраницыРазделаОтчета", НомерСтраницыРазделаОтчета);
				
			КонецЕсли;
			
			// В случае успешного поиска, устанавливаем курсор на найденный раздел.
			Если НЕ НайденнаяСтрока = Неопределено Тогда
				Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяСтрока.ПолучитьИдентификатор();
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьТаблицуВариантовЗаполненияНаСервере()
	
	РегламентированнаяОтчетностьКлиентСервер.ИзменитьТаблицуВариантовЗаполнения(
	ЭтаФорма, НЕ СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);
	
	РегламентированнаяОтчетность.ПолучитьСведенияОПоказателяхОтчета(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьОтчет(Команда)
	
	РегламентированнаяОтчетностьКлиент.МеханизмыОчисткиРегламентированныхОтчетов(ЭтаФорма, "ОчиститьВесьОтчет");
	
	СтруктураРеквизитовФормы.НомерТекущейСтраницы
	= Элементы.РазделыОтчета.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТекущуюСтраницу(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОчиститьТекущуюСтраницуЗавершение", ЭтотОбъект);
	РегламентированнаяОтчетностьКлиент.МеханизмыОчисткиРегламентированныхОтчетов(
	ЭтаФорма, "ОчиститьТекущийЭкземплярМногостраничногоРаздела"
	+ Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим,
	ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТекущуюСтраницуЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел3_Прил1" Тогда
		УстановитьФорматВыводаВПоляхВвода(ЭтаФорма, СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	КонецЕсли;
	
	УстановитьДоступностьОбластей(ЭтаФорма, СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура Очистить(ВыполняемоеОповещение = Неопределено) Экспорт
	
	РегламентированнаяОтчетностьКлиент.Очистить(ЭтаФорма, ВыполняемоеОповещение);
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьПоказателиОтчетаЗаполняемыеИзИБНаСервере(ИмяСтраницы)
	
	РегламентированнаяОтчетностьКлиентСервер.ОчиститьПоказателиОтчетаЗаполняемыеИзИБ(ЭтаФорма, ИмяСтраницы);
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьНаСервере() Экспорт
	
	СохрП000100001003 = СтруктураДанныхРаздел1.П000100001003;
	
	СтруктураДанныхРаздел1.Очистить();
	СтруктураДанныхРаздел3.Очистить();
	СтруктураДанныхРаздел3_Прил2.Очистить();
	СтруктураДанныхРаздел4.Очистить();
	СтруктураДанныхРаздел6.Очистить();
	СтруктураДанныхРаздел7.Очистить();
	
	ТаблицаСтраницыРаздела2.Очистить();
	ТаблицаСтраницыРаздела3_Прил1.Очистить();
	ТаблицаСтраницыРаздела5.Очистить();
	
	ОчиститьСведенияРазделаНДС("Раздел8");
	ОчиститьСведенияРазделаНДС("Раздел8_Прил1");
	ОчиститьСведенияРазделаНДС("Раздел9");
	ОчиститьСведенияРазделаНДС("Раздел9_Прил1");
	ОчиститьСведенияРазделаНДС("Раздел10");
	ОчиститьСведенияРазделаНДС("Раздел11");
	ОчиститьСведенияРазделаНДС("Раздел12");
	
	ИнициализацияМногостраничныхРазделов();
	
	Для Каждого мнгРаздел Из мСтруктураМногострочныхРазделов Цикл
		ЭтаФорма[мнгРаздел.Ключ].Очистить();
	КонецЦикла;
	
	НачальныеОперацииСМногострочнымиБлоками();
	
	ЗаполнитьПустыеСтруктурыДанных();
	
	Если НЕ СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный"
	   И НЕ СтруктураРеквизитовФормы.НаимТекущегоРаздела = "ФизЛица" Тогда
		ОчиститьТабличноеПолеНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	КонецЕсли;
	
	ЗаполнитьОКТМО(ЭтаФорма, СокрЛП(СохрП000100001003));
	
	ВывестиМакетСтраницыВТабличныйДокументНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела, 1);
	
	СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
	
	РегламентированнаяОтчетностьКлиентСервер.ОчиститьВариантыЗаполнения(ЭтаФорма);
	
	РегламентированнаяОтчетность.ПолучитьСведенияОПоказателяхОтчета(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораИФНС()
	
	КодИМНС = СокрЛП(ТабличныйДокумент.Области.КодИМНС.Значение);
	КПП     = СокрЛП(ТабличныйДокумент.Области.КПП1.Значение); 
	ЗначенияДляОтбора = Новый Массив;
	ЗначенияДляОтбора.Добавить(Новый Структура("КодНО, КПП", КодИМНС, КПП));
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Организация", СтруктураРеквизитовФормы.Организация);
	ПараметрыФормы.Вставить("ЗначенияДляОтбора", ЗначенияДляОтбора);
	
	ФормаВыбораНалоговогоОргана = РегламентированнаяОтчетностьКлиент.ПолучитьОбщуюФормуПоИмени(
	"ФормаВыбораНалоговогоОргана", ПараметрыФормы, ЭтаФорма);
	
	Если ФормаВыбораНалоговогоОргана.ТаблицаНО.Количество() <> 0 Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаВыбораИФНСЗавершение", ЭтотОбъект);
		ФормаВыбораНалоговогоОргана.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
		ФормаВыбораНалоговогоОргана.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		ФормаВыбораНалоговогоОргана.Открыть();
		
	ИначеЕсли НЕ ЗначениеЗаполнено(КодИМНС) Тогда
		
		Сообщение = Новый СообщениеПользователю;
		
		Сообщение.Текст = НСтр("ru='Код налогового органа необходимо задать в справочнике ""Организации"".'");
		
		Сообщение.Сообщить();
		Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
			УстановитьДоступностьОбластей(ЭтаФорма, "Титульный");
		КонецЕсли;
		
	Иначе
		
		Сообщение = Новый СообщениеПользователю;
		
		Сообщение.Текст = НСтр("ru='Для выбора инспекции, необходимо завести соответствующую запись в справочнике ""Регистрации в налоговом органе"".'");
		
		Сообщение.Сообщить();
		Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
			УстановитьДоступностьОбластей(ЭтаФорма, "Титульный");
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораИФНСЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	Если РезультатВыбора <> Неопределено Тогда
		ВыбранныйКодНО = РезультатВыбора.КодНО;
		ДлинаКодаНО = СтрДлина(ВыбранныйКодНО);
		
		Для Инд = ДлинаКодаНО + 1 По 4 Цикл
			ВыбранныйКодНО = "0" + ВыбранныйКодНО;
		КонецЦикла;
		
		ТабличныйДокумент.Области["КодИМНС"].Значение = ВыбранныйКодНО;
		
		ТабличныйДокумент.Области["КПП1"].Значение = РезультатВыбора.КПП;
		
		ЗаполнитьСведенияОПодписантахИКодПоОКТМО(РезультатВыбора.Ссылка);
		
		СформироватьСпискиВыбора();
		
		Модифицированность = Истина;
	КонецЕсли;
	
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
		УстановитьДоступностьОбластей(ЭтаФорма, "Титульный");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВвестиПоказатель(Элемент, Область, КодПоказателя, Знач ЭтоСумма, Знач ТекстВыбора, ТаблицаВыбора, СтандартнаяОбработка, КолонкаПоиска = "Код") Экспорт
	
	Если ТаблицаВыбора = Неопределено ИЛИ СтруктураРеквизитовФормы.мАвтоВыборКодов Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	Если Область.Имя = КодПоказателя
		ИЛИ Лев(Область.Имя, СтрНайти(Область.Имя, "_") - 1) = КодПоказателя
		ИЛИ РегламентированнаяОтчетностьКлиентСервер.ПоказательВходитВМногострочнуюЧасть(ЭтаФорма, КодПоказателя) > 0 Тогда
		
		ИсходноеЗначение = ?(ТипЗнч(Область.Значение) = Тип("Строка"), СокрЛП(Область.Значение), Область.Значение);
		
	Иначе
		
		Разделитель = ?(Лев(Область.Имя, СтрДлина(КодПоказателя) + 1) = КодПоказателя + "_", "_", "");
		ИндексОбласти = 1;
		ИсходноеЗначение = "";
		
		Пока ЭтаФорма[ТекущийЭлемент.Имя].Области.Найти(КодПоказателя
			+ Разделитель + Формат(ИндексОбласти, "ЧГ=")) <> Неопределено Цикл
			ИсходноеЗначение = ИсходноеЗначение + Строка(ЭтаФорма[ТекущийЭлемент.Имя].Области[
			КодПоказателя + Разделитель + Формат(ИндексОбласти, "ЧГ=")].Значение);
			ИндексОбласти = ИндексОбласти + 1;
		КонецЦикла;
		
		ИсходноеЗначение = СокрЛП(ИсходноеЗначение);
		
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Заголовок",          ТекстВыбора);
	ПараметрыФормы.Вставить("ТаблицаЗначений",    ТаблицаВыбора);
	ПараметрыФормы.Вставить("СтруктураДляПоиска", Новый Структура(КолонкаПоиска, ИсходноеЗначение));
	
	ДополнительныеПараметры = Новый Структура(
	"ИндексОбласти, КодПоказателя, КолонкаПоиска, Область, Разделитель",
	ИндексОбласти, КодПоказателя, КолонкаПоиска, Область, Разделитель);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВвестиПоказательЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ОткрытьФорму("Обработка.ОбщиеОбъектыРеглОтчетности.Форма.ФормаВыбораЗначенияИзТаблицы",
	ПараметрыФормы, ЭтаФорма,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ВвестиПоказательЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	ИндексОбласти = ДополнительныеПараметры.ИндексОбласти;
	КодПоказателя = ДополнительныеПараметры.КодПоказателя;
	КолонкаПоиска = ДополнительныеПараметры.КолонкаПоиска;
	Область = ДополнительныеПараметры.Область;
	Разделитель = ДополнительныеПараметры.Разделитель;
	
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Область.Имя = КодПоказателя ИЛИ Лев(Область.Имя, СтрНайти(Область.Имя, "_") - 1) = КодПоказателя
	 ИЛИ РегламентированнаяОтчетностьКлиентСервер.ПоказательВходитВМногострочнуюЧасть(ЭтаФорма, КодПоказателя) > 0 Тогда
		
		Область.Значение = РезультатВыбора[КолонкаПоиска];
		
	Иначе
		
		СтрокаРезультатВыбора = Строка(РезультатВыбора[КолонкаПоиска]);
		
		Для Инд = СтрДлина(СтрокаРезультатВыбора) + 1 По ИндексОбласти - 1 Цикл
			СтрокаРезультатВыбора = " " + РезультатВыбора[КолонкаПоиска];
		КонецЦикла;
		
		Для Инд = 1 По ИндексОбласти - 1 Цикл
			ЭтаФорма[ТекущийЭлемент.Имя].Области[КодПоказателя + Разделитель + Формат(Инд, "ЧГ=")].Значение
			= СокрЛП(Сред(РезультатВыбора[КолонкаПоиска], Инд, 1));
		КонецЦикла;
		
	КонецЕсли;
	
	Модифицированность = Истина;
	
	РасчетНаКлиенте(СтруктураРеквизитовФормы.НаимТекущегоРаздела, Область.Имя);
	
	Если Область.Имя = "П000200007003" Тогда
		#Если ВебКлиент Тогда
			ИзменитьЦветЯчеекНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела, Область.Имя);
		#Иначе
			ИзменитьЦветЯчеекНаКлиенте(СтруктураРеквизитовФормы.НаимТекущегоРаздела, Область.Имя);
		#КонецЕсли
	КонецЕсли;
	
	УстановитьДоступностьОбластей(ЭтаФорма, СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
	Если Область.Имя = "ПоМесту" Тогда
		ОбработкаИзмененияСодержимогоВПолеТабличногоДокумента(ЭтаФорма.Элементы.ТабличныйДокумент, Область);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайла(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузитьИзФайлаЗавершение", ЭтотОбъект);
	
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередЗагрузкойРегламентированногоОтчета(
	ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура Выгрузить(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьЗавершение", ЭтотОбъект);
	
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(
	ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайлаЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ЗагрузитьИзФайлаОтчет();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайлаОтчет() Экспорт
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузитьИзФайлаОтчетЗавершение", ЭтотОбъект);
	
	Если Модифицированность Тогда
		СохранитьНаКлиенте(,ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайлаОтчетЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	РегламентированнаяОтчетностьЗагрузкаКлиент.ЗагрузитьИзФайлаОтчет(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Функция ЗагрузкаОтчетаИзФайла(ДанныеДляЗагрузки) Экспорт
	
	Если Модифицированность Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = СтрШаблон(НСтр("ru='Отчет ""%1"" не сохранен.'"), ЭтотОбъект.Заголовок);
		Сообщение.Сообщить();
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ ЗагрузкаОтчетаИзФайлаНаСервере(ДанныеДляЗагрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция ЗагрузкаОтчетаИзФайлаНаСервере(ДанныеДляЗагрузки)
	
	СформироватьСтруктуруПоказателей();
	
	ПараметрыОтчета = СформироватьСтруктуруПараметров();
	
	ДеревоДляЗагрузки = ИзвлечьСтруктуруXML();
	
	Если НЕ РегламентированнаяОтчетностьЗагрузка.ЗагрузкаОтчетаИзФайла(
		ЭтотОбъект, ПараметрыОтчета, ДанныеДляЗагрузки, ДеревоДляЗагрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура ВыгрузитьЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ВыгрузитьОтчет();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьОтчет() Экспорт
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьОтчетЗавершение", ЭтотОбъект);
	
	Если Модифицированность Тогда
		СохранитьНаКлиенте(,ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьОтчетЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ФормаВыгрузкиРеглОтчета = Неопределено;
	
	ФормаВыгрузкиРеглОтчета = ПолучитьФорму("Документ.ВыгрузкаРегламентированныхОтчетов.Форма.ФормаДокумента", , ЭтаФорма);
	
	СпДокОсн = Новый СписокЗначений;
	СпДокОсн.Добавить(СтруктураРеквизитовФормы.мСохраненныйДок);
	
	ФормаВыгрузкиРеглОтчета.СформироватьИЗаписать(СпДокОсн);
	
	ВывестиРезультатПроверки();
	
КонецПроцедуры

&НаКлиенте
Функция УниверсальнаяВыгрузка(ТекстВыгрузки = Неопределено, ПроверятьБлокировки = Истина) Экспорт
	
	Перем ПараметрыВыгрузки;
	
	Если Модифицированность Тогда
		ТекстЗаголовка = ЗаголовокРегламентированногоОтчета(
		СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета, СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
		
		ОргСтр = " (" + СтруктураРеквизитовФормы.Организация + ")";
		Если СтрНайти(ТекстЗаголовка, ОргСтр) = 0 Тогда
			ТекстЗаголовка = ТекстЗаголовка + ОргСтр;
		КонецЕсли;
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Отчет """ + ТекстЗаголовка + """ не сохранен.";
		Сообщение.Сообщить();
		
		Возврат Ложь;
	КонецЕсли;
	
	Если Открыта() Тогда
		Если СтруктураРеквизитовФормы.ЕдиницаИзмерения
			<> ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1 Тогда
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='Перед выгрузкой необходимо установить единицу измерения ""в рублях"".'");
			Сообщение.Сообщить();
			Возврат Ложь;
			
		КонецЕсли;
		
		Если СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения <> 0 Тогда
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='Перед выгрузкой необходимо установить точность ""0"".'");
			Сообщение.Сообщить();
			Возврат Ложь;
			
		КонецЕсли;
	КонецЕсли;
	
	Если СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки = Истина Тогда // возможны 3 состояния
		РегламентированнаяОтчетностьКлиент.ПроверитьКонтрольныеСоотношения(ЭтаФорма, ОбработкаКС, Истина);
	КонецЕсли;
	
	РезультатВыгрузки = УниверсальнаяВыгрузкаXMLНаСервере(ТекстВыгрузки, ПараметрыВыгрузки);
	
	Возврат РезультатВыгрузки;
	
КонецФункции

&НаКлиенте
Функция ЗаголовокРегламентированногоОтчета(ДатаНач, ДатаКон, Периодичность = Неопределено) Экспорт
	
	СтрПериодОтчета = ПредставлениеПериода(НачалоДня(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета),
	КонецДня(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета), "ФП = Истина");
	
	Если СтрНайти(ЭтаФорма.Заголовок, СтрПериодОтчета) = 0 Тогда
		Возврат ЭтаФорма.Заголовок + " за " + СтрПериодОтчета;
	Иначе
		Возврат ЭтаФорма.Заголовок;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция УниверсальнаяВыгрузкаXMLНаСервере(ТекстВыгрузки, ПараметрыВыгрузки)
	
	ПараметрыРеглОтчета = Новый Структура;
	ПараметрыРеглОтчета.Вставить("СохраненныйОтчет",     СтруктураРеквизитовФормы.мСохраненныйДок);
	ПараметрыРеглОтчета.Вставить("ИсточникОтчета",       СтруктураРеквизитовФормы.мСохраненныйДок.ИсточникОтчета);
	ПараметрыРеглОтчета.Вставить("ВыбраннаяФорма",    	 СтруктураРеквизитовФормы.мСохраненныйДок.ВыбраннаяФорма);
	ПараметрыРеглОтчета.Вставить("РезультатВыгрузки", 	 РегламентированнаяОтчетность.НовыйРезультатВыгрузкиРеглОтчета());
	ПараметрыРеглОтчета.Вставить("СтраницыРазделов8_12", СтраницыРазделов8_12());
	
	ПараметрыРеглОтчета.РезультатВыгрузки.ТаблицаСообщений = ЭтаФорма.ТаблицаСообщений;
	
	РезультатВыгрузки = ОбъектОтчета(ЭтаФорма.ИмяФормы).УниверсальнаяВыгрузка(ПараметрыРеглОтчета);
	
	Если РезультатВыгрузки.РеглОтчетВыгружен Тогда
		
		ТекстВыгрузки = РезультатВыгрузки.ТекстВыгрузки;
		
		Возврат РезультатВыгрузки.РеглОтчетВыгружен;
		
	Иначе
		
		Возврат РезультатВыгрузки.РезультатПроверкиВыгрузки;
		
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция СформироватьСтруктуруПоказателей()
	
	СохрСтруктура = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить();
	
	Для Каждого ЭлементСтруктуры Из СохрСтруктура.ДанныеМногостраничныхРазделов Цикл
		
		НайденноеЗначение = Неопределено;
		
		мСтруктураМногостраничныхРазделов.Свойство(ЭлементСтруктуры.Ключ, НайденноеЗначение);
		
		Если НЕ НайденноеЗначение = Неопределено Тогда
			
			НайденноеЗначение = ЭтаФорма[НайденноеЗначение];
			
			ЗначениеВДанныеФормы(ЭлементСтруктуры.Значение, НайденноеЗначение);
			
			Если НайденноеЗначение[0].Свойство("Данные") Тогда
				
				Для Каждого СтрокаТаблЗнач Из НайденноеЗначение Цикл
					
					Если ТипЗнч(СтрокаТаблЗнач.Данные) = Тип("СписокЗначений") Тогда
						
						СтрокаТаблЗнач.Данные.Очистить();
						СтрокаТаблЗнач.Данные.Добавить(ЭлементСтруктуры.Значение[НайденноеЗначение.Индекс(СтрокаТаблЗнач)].Данные);
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
			Если НайденноеЗначение[0].Свойство("ДанныеДопСтрок") Тогда
				
				Ном = 0;
				
				Для Каждого СтрокаТаблЗнач Из ЭлементСтруктуры.Значение Цикл
					
					Если ТипЗнч(СтрокаТаблЗнач.ДанныеДопСтрок) = Тип("Структура") Тогда
						
						Для Каждого ЭлСтруктуры Из СтрокаТаблЗнач.ДанныеДопСтрок Цикл
							
							ТаблЗнач = ЭлСтруктуры.Значение;
							
							СтрокаТаблЗначДанныеДопСтрок = ЭтаФорма["Хранилище"
							+ ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ЭлементСтруктуры.Ключ)].Добавить().Таблица;
							ЗначениеВДанныеФормы(ТаблЗнач, СтрокаТаблЗначДанныеДопСтрок);
							НайденноеЗначение[Ном].ДанныеДопСтрок.Добавить(
							СтрокаТаблЗначДанныеДопСтрок, "ДанныеФормыКоллекцияТаблицаДопСтрокРаздела");
							
						КонецЦикла;
						
					ИначеЕсли ТипЗнч(СтрокаТаблЗнач.ДанныеДопСтрок) = Тип("ТаблицаЗначений") Тогда
						
						СтрокаТаблЗначДанныеДопСтрок = ЭтаФорма["Хранилище"
						+ ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ЭлементСтруктуры.Ключ)].Добавить().Таблица;
						ЗначениеВДанныеФормы(СтрокаТаблЗнач.ДанныеДопСтрок, СтрокаТаблЗначДанныеДопСтрок);
						НайденноеЗначение[Ном].ДанныеДопСтрок.Добавить(
						СтрокаТаблЗначДанныеДопСтрок, "ДанныеФормыКоллекцияТаблицаДопСтрокРаздела");
						
					КонецЕсли;
					
					Ном = Ном + 1;
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ОбъектОтчета = ОбъектОтчета(ЭтаФорма.ИмяФормы);
	
	ОбъектОтчета.СформироватьСтруктуруПоказателей(СтруктураРеквизитовФормы.мВыбраннаяФорма,
												  мДанныеОтчета,
												  СтруктураРеквизитовФормы);
	
	Для Каждого Раздел Из мСтруктураМногостраничныхРазделов Цикл
		Для Каждого Лист Из ЭтаФорма[Раздел.Значение] Цикл
			Лист.Данные[0].Значение = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(Лист.Данные[0].Значение);
		КонецЦикла;
		мДанныеОтчета.Вставить(Раздел.Ключ, ЭтаФорма[Раздел.Значение]);
	КонецЦикла;
	
	ОбъектОтчета.ДобавитьПоказателиВРаздел2(СтруктураРеквизитовФормы.мВыбраннаяФорма, мДанныеОтчета.Раздел2);
	
КонецФункции

&НаСервере
Функция СформироватьСтруктуруПараметров()
	
	ОбъектОтчета = ОбъектОтчета(ЭтаФорма.ИмяФормы);
	
	Возврат ОбъектОтчета.СформироватьСтруктуруПараметров(СтруктураРеквизитовФормы.мВыбраннаяФорма,
														 мДанныеОтчета,
														 СтруктураРеквизитовФормы,
														 СтраницыРазделов8_12());
	
КонецФункции

&НаСервере
Функция СтраницыРазделов8_12()
	
	СтраницыРазделов8_12 = Новый Структура;
	
	СтраницыРазделов8_12.Вставить("СтраницыРаздел8", РеквизитФормыВЗначение("СтраницыРаздел8"));
	СтраницыРазделов8_12.Вставить("СтраницыРаздел8_Прил1", РеквизитФормыВЗначение("СтраницыРаздел8_Прил1"));
	СтраницыРазделов8_12.Вставить("СтраницыРаздел9", РеквизитФормыВЗначение("СтраницыРаздел9"));
	СтраницыРазделов8_12.Вставить("СтраницыРаздел9_Прил1", РеквизитФормыВЗначение("СтраницыРаздел9_Прил1"));
	СтраницыРазделов8_12.Вставить("СтраницыРаздел10", РеквизитФормыВЗначение("СтраницыРаздел10"));
	СтраницыРазделов8_12.Вставить("СтраницыРаздел11", РеквизитФормыВЗначение("СтраницыРаздел11"));
	СтраницыРазделов8_12.Вставить("СтраницыРаздел12", РеквизитФормыВЗначение("СтраницыРаздел12"));
	
	Возврат СтраницыРазделов8_12;
	
КонецФункции

&НаСервере
Функция ИзвлечьСтруктуруXML()
	
	ОбъектОтчета = ОбъектОтчета(ЭтаФорма.ИмяФормы);
	
	Возврат ОбъектОтчета.ИзвлечьСтруктуруXML(СтруктураРеквизитовФормы.мВыбраннаяФорма);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЭтоРазделРегистраУчетаНДС(ИмяРаздела)
	
	Результат = (ИмяРаздела = "Раздел8")
	        ИЛИ (ИмяРаздела = "Раздел8_Прил1")
	        ИЛИ (ИмяРаздела = "Раздел9")
	        ИЛИ (ИмяРаздела = "Раздел9_Прил1")
	        ИЛИ (ИмяРаздела = "Раздел10")
	        ИЛИ (ИмяРаздела = "Раздел11")
	        ИЛИ (ИмяРаздела = "Раздел12");
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура АктивизироватьЯчейку(Ячейка) Экспорт
	
	Если Ячейка.Свойство("Раздел") И ЭтоРазделРегистраУчетаНДС(Ячейка.Раздел)
		И Элементы.РазделыОтчета.ТекущиеДанные <> Неопределено Тогда
		УзелСтраницРаздела = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(
		РазделыОтчета.ПолучитьЭлементы(), "КолонкаРазделыОтчетаСокрНаим", Ячейка.Раздел);
		Если УзелСтраницРаздела <> Неопределено Тогда
			
			СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Истина;
			
			СписокСтраниц = ЭтаФорма["Страницы" + Ячейка.Раздел];
			
			Если СписокСтраниц.Количество() > 0 Тогда
				ТипЧисло = Новый ОписаниеТипов("Число");
				НомерСтрокиСОшибкой = ТипЧисло.ПривестиЗначение(Ячейка.Страница);
				РазмерСегмента = СписокСтраниц[0].НомерПоследнейСтроки - СписокСтраниц[0].НомерПервойСтроки + 1;
				
				НомерСегмента = Цел((НомерСтрокиСОшибкой - 1) / РазмерСегмента) + 1;
				ОтображемаяСтрока = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(
				УзелСтраницРаздела.ПолучитьЭлементы(), "КолонкаНомерСтраницыРазделаОтчета", НомерСегмента);
			Иначе
				ОтображемаяСтрока = УзелСтраницРаздела;
			КонецЕсли;
			Элементы.РазделыОтчета.ТекущаяСтрока = ОтображемаяСтрока.ПолучитьИдентификатор();
			
			Если Лев(Ячейка.Страница, 6) = "e1cib/" Тогда
				ПерейтиПоНавигационнойСсылке(Ячейка.Страница);
				
			Иначе
				ОбластьСтроки = ТабличныйДокументУчетаНДС.Области.Найти("Строка_" + Ячейка.Страница);
				Если ОбластьСтроки <> Неопределено Тогда
					ТипЧисло = Новый ОписаниеТипов("Число");
					НомерГрафы = ТипЧисло.ПривестиЗначение(Ячейка.ИмяЯчейки);
					ОбластьСОшибкой
					= ТабличныйДокументУчетаНДС.Область(ОбластьСтроки.Верх, НомерГрафы, ОбластьСтроки.Низ, НомерГрафы);
					Элементы.ТабличныйДокументУчетаНДС.ТекущаяОбласть = ОбластьСОшибкой;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		РегламентированнаяОтчетностьКлиент.АктивизироватьЯчейку(ЭтаФорма, Ячейка);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузку(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьВыгрузкуЗавершение", ЭтотОбъект);
	
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузкуЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПроверитьВыгрузкуОтчета();
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузкуОтчета()
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьВыгрузкуОтчетаЗавершение", ЭтотОбъект);
	
	Если Модифицированность Тогда
		СохранитьНаКлиенте(, ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузкуОтчетаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ФормаВыгрузкиРеглОтчета = ПолучитьФорму("Документ.ВыгрузкаРегламентированныхОтчетов.Форма.ФормаДокумента", , ЭтаФорма);
	
	СпДокОсн = Новый СписокЗначений;
	СпДокОсн.Добавить(СтруктураРеквизитовФормы.мСохраненныйДок);
	
	ФормаВыгрузкиРеглОтчета.Проверить(СпДокОсн);
	
	ВывестиРезультатПроверки();
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьВыгрузкуПоНовомуАлгоритмуНаСервере()
	
	ОбъектОтчета = ОбъектОтчета(ЭтаФорма.ИмяФормы);
	
	ОбъектОтчета.ПроверитьВыгрузкуПоНовомуАлгоритмуНаСервере(СтруктураРеквизитовФормы.мВыбраннаяФорма,
															 СтруктураРеквизитовФормы);
	
КонецПроцедуры

&НаСервере
Функция ПроверитьПоказатели() Экспорт
	
	ПроверитьВыгрузкуПоНовомуАлгоритмуНаСервере();
	
	Результат = ПолучитьИзВременногоХранилища(СтруктураРеквизитовФормы.АдресХранилищаПроверкиВыгрузки);
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ПоказатьСДвухмернымШтрихкодомPDF417(Команда)
	
	РегламентированнаяОтчетностьКлиент.ВывестиМашиночитаемуюФорму(ЭтаФорма, Команда.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьБланк(Команда)
	
	Отказ = Ложь;
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("Команда", Команда);
	ОписаниеОповещения = Новый ОписаниеОповещения("ПоказатьБланкЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередПечатьюРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьБланкЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;

	Команда = ДополнительныеПараметры.Команда;
	
	ДополнительныеПараметрыПечати = Новый Структура;
	ДополнительныеПараметрыПечати.Вставить("ВидПечати", Команда.Имя);
	ОписаниеОповещения = Новый ОписаниеОповещения("ПечатьЗавершение", ЭтотОбъект, ДополнительныеПараметрыПечати);
	
	Если ЗначениеЗаполнено(СтруктураРеквизитовФормы.мСохраненныйДок) Тогда
		
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
		
	Иначе
		
		СохранитьНаКлиенте(, ОписаниеОповещения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Печать(ДополнительныеПараметры.ВидПечати);
	
КонецПроцедуры
	
&НаКлиенте
Процедура Печать(ВидПечати, НеИзФормыОтчета = Ложь) Экспорт	
	
	Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='%1. Формируется печатная форма...'"), ЭтаФорма.Заголовок), , , БиблиотекаКартинок.Печать);
	
	Если СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки = Истина Тогда // возможны 3 состояния флага
		РегламентированнаяОтчетностьКлиент.ПроверитьКонтрольныеСоотношения(ЭтаФорма, ОбработкаКС, Истина);
	КонецЕсли;
	
	Если НЕ ПечатьНаСервере(ВидПечати) Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ОткрытьФормуПредварительногоПросмотра(ЭтаФорма,
																			 ВидПечати,
																			 ,
																			 СтруктураРеквизитовФормы.мПечатныеФормы);
	
	СтруктураРеквизитовФормы.мРежимПечати = Ложь;
	
КонецПроцедуры

&НаСервере
Функция ПечатьНаСервере(ВидПечати)
	
	Если НЕ РегламентированнаяОтчетность.ПринтерДоступен() Тогда
		
		Сообщение = Новый СообщениеПользователю;
		
		Сообщение.Текст = НСтр("ru='Перед формированием печатных форм необходимо определить в системе принтер и задать его в качестве используемого по умолчанию!'");
		
		Сообщение.Сообщить();
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Если СтруктураРеквизитовФормы.ЕдиницаИзмерения
		<> ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1
		ИЛИ СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения <> 0 Тогда
		
		Сообщение = Новый СообщениеПользователю;
		
		Сообщение.Текст = НСтр("ru='Печать возможна только при установленной единице измерения ""в рублях"" и точности ""0"".'");
		
		Сообщение.Сообщить();
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Если ТипЗнч(мДеревоВыбранныхСтраниц) <> Тип("ДанныеФормыДерево") Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	РегламентированнаяОтчетность.УдалитьСтарыеПечатныеБланкиРегламентированныхОтчетов();
	
	СтруктураРеквизитовФормы.мПечатныеФормы.Очистить();
	СтруктураРеквизитовФормы.мПечатныеФормы.Добавить(СтруктураРеквизитовФормы.мСохраненныйДок,
													 ВРег(СокрЛП("СсылкаНаРегламентированныйОтчет")));
	
	СтруктураРеквизитовФормы.мРежимПечати = Истина;
	
	СохранитьДанныеРаздела(СтруктураРеквизитовФормы.НаимТекущегоРаздела, Ложь, Ложь);
	
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел8"
	 ИЛИ СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел8_Прил1"
	 ИЛИ СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел9"
	 ИЛИ СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел9_Прил1"
	 ИЛИ СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел10"
	 ИЛИ СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел11"
	 ИЛИ СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел12" Тогда
		сохрТаблДок = ТабличныйДокументУчетаНДС.ПолучитьОбласть();
	Иначе
		сохрТаблДок = ТабличныйДокумент.ПолучитьОбласть();
	КонецЕсли;
	
	СтрПоля = "ПолеСверху, ПолеСправа, ПолеСнизу, ПолеСлева";
	ВремПоля = Новый Структура(СтрПоля);
	
	ЗаполнитьЗначенияСвойств(ВремПоля, ТабличныйДокумент, СтрПоля);
	
	ВывестиМакетВТаблДокНаСервере("Титульный", 0);
	
	ОбщиеРеквизитыРазделов = ПолучитьОбщиеРеквизитыСТитульногоЛиста();
	
	Секции = Новый Структура;
	Секции.Вставить("Титульный", "ОсновнаяЧасть");
	Секции.Вставить("Раздел1", "ОсновнаяЧасть");
	Секции.Вставить("Раздел2", "ОсновнаяЧасть");
	Секции.Вставить("Раздел3", "ОсновнаяЧасть1;ОсновнаяЧасть2");
	Секции.Вставить("Раздел3_Прил1", "ОсновнаяЧасть");
	Секции.Вставить("Раздел3_Прил2", "ОсновнаяЧасть");
	Секции.Вставить("Раздел4", "ОсновнаяЧасть1;ИтоговыеПоказатели;ОсновнаяЧасть2");
	Секции.Вставить("Раздел5", "ОсновнаяЧасть1;ИтоговыеПоказатели;ОсновнаяЧасть2");
	Секции.Вставить("Раздел6", "ОсновнаяЧасть1;ИтоговыеПоказатели1;ОсновнаяЧасть2;ИтоговыеПоказатели2;ОсновнаяЧасть3");
	Секции.Вставить("Раздел7", "ОсновнаяЧасть1;ИтоговыеПоказатели;ОсновнаяЧасть2");
	Секции.Вставить("Раздел8", "ОсновнаяЧасть1");
	Секции.Вставить("Раздел8_Прил1", "ОсновнаяЧасть");
	Секции.Вставить("Раздел8_Прил1_Прод", "ОсновнаяЧасть");
	Секции.Вставить("Раздел8_Прод", "ОсновнаяЧасть1");
	Секции.Вставить("Раздел9", "ОсновнаяЧасть");
	Секции.Вставить("Раздел9_Прил1", "ОсновнаяЧасть");
	Секции.Вставить("Раздел9_Прил1_Прод1", "ОсновнаяЧасть");
	Секции.Вставить("Раздел9_Прил1_Прод2", "ОсновнаяЧасть");
	Секции.Вставить("Раздел9_Прил1_Прод3", "ОсновнаяЧасть");
	Секции.Вставить("Раздел9_Прод1", "ОсновнаяЧасть");
	Секции.Вставить("Раздел9_Прод2", "ОсновнаяЧасть");
	Секции.Вставить("Раздел10", "ОсновнаяЧасть");
	Секции.Вставить("Раздел10_Прод", "ОсновнаяЧасть");
	Секции.Вставить("Раздел11", "ОсновнаяЧасть");
	Секции.Вставить("Раздел11_Прод", "ОсновнаяЧасть");
	Секции.Вставить("Раздел12", "ОсновнаяЧасть");
	
	НомерСтраницы = 2;
	
	КоличествоВыбранныхСтраниц = мДеревоВыбранныхСтраниц.ПолучитьЭлементы().Количество();
	
	Если КоличествоВыбранныхСтраниц > 0 Тогда
		
		мДеревоВыбранныхСтраниц.ПолучитьЭлементы().Сдвинуть(0, КоличествоВыбранныхСтраниц - 1);
		
	КонецЕсли;
	
	НачатьТранзакцию();
	
	Попытка
		
		Для Каждого СтрокаУровня1 Из мДеревоВыбранныхСтраниц.ПолучитьЭлементы() Цикл
			
			Если СтрокаУровня1.ВыводНаПечать = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			СтруктураПараметров = Новый Структура;
			СтруктураПараметров.Вставить("НаименованиеЛиста",  СтрокаУровня1.Представление);
			СтруктураПараметров.Вставить("ОриентацияЛиста",    СтрокаУровня1.ОриентацияСтраницы);
			СтруктураПараметров.Вставить("ИмяСтраницы",        СтрокаУровня1.ИмяСтраницы);
			Структурапараметров.Вставить("ИмяОбластиТаблПоля", СтрокаУровня1.ИмяОбластиТабличногоПоля);
			СтруктураПараметров.Вставить("ВидПечати",          ВидПечати);
			
			ИменаСекций = Неопределено;
			
			Если Секции.Свойство(СтрокаУровня1.ИмяСтраницы, ИменаСекций) Тогда
				
				СтруктураПараметров.Вставить("Секции", СтрРазделить(ИменаСекций, ";", Ложь));
				
			КонецЕсли;
			
			СтруктураПараметров.Вставить("НомерСтраницы", НомерСтраницы);
			
			Если СтрокаУровня1.ИмяСтраницы = "Раздел8"
				ИЛИ СтрокаУровня1.ИмяСтраницы = "Раздел8_Прил1"
				ИЛИ СтрокаУровня1.ИмяСтраницы = "Раздел9"
				ИЛИ СтрокаУровня1.ИмяСтраницы = "Раздел9_Прил1"
				ИЛИ СтрокаУровня1.ИмяСтраницы = "Раздел10"
				ИЛИ СтрокаУровня1.ИмяСтраницы = "Раздел11"
				ИЛИ СтрокаУровня1.ИмяСтраницы = "Раздел12" Тогда
				
				Если СтруктураРеквизитовФормы.УспешноеАвтозаполнение = Неопределено Тогда
					ВывестиНаПечатьЛистыРазделов8_12_ЗаполненныхБезДеленияНаСекции(
					СтруктураПараметров, ОбщиеРеквизитыРазделов, СтрПоля);
				Иначе
					ВывестиНаПечатьЛистыРазделов8_12_ЗаполненныхСДелениемНаСекции(
					СтруктураПараметров, ОбщиеРеквизитыРазделов, СтрПоля);
				КонецЕсли;
				
			Иначе
				
				Если НЕ мСтруктураМногостраничныхРазделов.Свойство(СтрокаУровня1.ИмяСтраницы) Тогда
					
					ВывестиМакетВТаблДокНаСервере(СтрокаУровня1.ИмяСтраницы, 0);
					ВывестиНаПечатьЛист(СтруктураПараметров, ОбщиеРеквизитыРазделов, СтрПоля);
					
				Иначе
					
					СтруктураПараметров.Вставить("ИмяСтраницыПанели", СтрокаУровня1.ИмяСтраницы);
					ВывестиНаПечатьДополнительныеСтраницы(СтруктураПараметров, ОбщиеРеквизитыРазделов);
					
				КонецЕсли;
				
			КонецЕсли;
			
			СтруктураПараметров.Свойство("НомерСтраницы", НомерСтраницы); 
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Выполнение операции'"),
		УровеньЖурналаРегистрации.Ошибка,
		,
		,
		ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
	КонецПопытки;
	
	Если КоличествоВыбранныхСтраниц > 0 Тогда
		
		мДеревоВыбранныхСтраниц.ПолучитьЭлементы().Сдвинуть(КоличествоВыбранныхСтраниц - 1, 1 - КоличествоВыбранныхСтраниц);
		
	КонецЕсли;
	
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел8"
	 ИЛИ СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел8_Прил1"
	 ИЛИ СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел9"
	 ИЛИ СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел9_Прил1"
	 ИЛИ СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел10"
	 ИЛИ СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел11"
	 ИЛИ СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел12" Тогда
		Элементы.СтраницыОтчета.ТекущаяСтраница = Элементы.СтраницаРегистраУчетаНДС;
		ТабличныйДокументУчетаНДС.Очистить();
		ТабличныйДокументУчетаНДС.Вывести(сохрТаблДок);
	Иначе
		ТабличныйДокумент.Очистить();
		ТабличныйДокумент.Вывести(сохрТаблДок);
		ЗаполнитьЗначенияСвойств(ТабличныйДокумент, ВремПоля, СтрПоля);
	КонецЕсли;
	
	КопироватьДанныеФормы(мДеревоВыбранныхСтраниц, мДеревоСтраницОтчета);
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Процедура ВывестиНаПечатьЛист(Парам1, ОбщиеРеквизитыРазделов, СтрПоля = Неопределено, НомерДопСтраницы = 1)
	
	СоответствиеРазделовМакетам = Новый Соответствие;
	
	СоответствиеРазделовМакетам.Вставить("Титульный",     "ПечатныйБланк2019Кв1_Титульный");
	СоответствиеРазделовМакетам.Вставить("Раздел1",       "ПечатныйБланк2019Кв1_Раздел1");
	СоответствиеРазделовМакетам.Вставить("Раздел2",       "ПечатныйБланк2019Кв1_Раздел2");
	СоответствиеРазделовМакетам.Вставить("Раздел3",       "ПечатныйБланк2019Кв1_Раздел3");
	СоответствиеРазделовМакетам.Вставить("Раздел3_Прил1", "ПечатныйБланк2019Кв1_Раздел3_Прил1");
	СоответствиеРазделовМакетам.Вставить("Раздел3_Прил2", "ПечатныйБланк2019Кв1_Раздел3_Прил2");
	СоответствиеРазделовМакетам.Вставить("Раздел4",       "ПечатныйБланк2019Кв1_Раздел4");
	СоответствиеРазделовМакетам.Вставить("Раздел5",       "ПечатныйБланк2019Кв1_Раздел5");
	СоответствиеРазделовМакетам.Вставить("Раздел6",       "ПечатныйБланк2019Кв1_Раздел6");
	СоответствиеРазделовМакетам.Вставить("Раздел7",       "ПечатныйБланк2019Кв1_Раздел7");
	
	МЧБРаздела = СоответствиеРазделовМакетам[Парам1.ИмяСтраницы];
	
	МакетМЧБ = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(МЧБРаздела);
	МакетМЧБ.ПолеСверху = 5;
	МакетМЧБ.ПолеСправа = 5;
	МакетМЧБ.ПолеСнизу  = 5;
	МакетМЧБ.ПолеСлева  = 5;
	
	Если Парам1.ИмяСтраницы = "Раздел4" Тогда
		ИдГруппы = СтруктураРеквизитовФормы.мИдГруппы4М1;
	ИначеЕсли Парам1.ИмяСтраницы = "Раздел6" Тогда
		ИдГруппы = СтруктураРеквизитовФормы.мИдГруппы6М1;
	Иначе
		ИдГруппы = ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(Парам1.ИмяСтраницы);
	КонецЕсли;
	
	Если ИдГруппы <> Неопределено Тогда
		
		ИсхКолвоСтрокБлока = 0;
		
		//определение исходного количества строк на листе МЧБ
		Если Парам1.ИмяСтраницы = "Раздел3_Прил2" Тогда
			ИсхКолвоСтрокБлока = 23;
		ИначеЕсли Парам1.ИмяСтраницы = "Раздел4" Тогда
			ИмяГруппы1 = СтруктураРеквизитовФормы.мИдГруппы4М1;
			ИмяГруппы2 = СтруктураРеквизитовФормы.мИдГруппы4М2;
			ИмяГруппы3 = СтруктураРеквизитовФормы.мИдГруппы4М3;
			ТекКолвоСтрокБлокаМ1 = ЭтаФорма[ИмяГруппы1].Количество();
			ТекКолвоСтрокБлокаМ2 = ЭтаФорма[ИмяГруппы2].Количество();
			ТекКолвоСтрокБлокаМ3 = ЭтаФорма[ИмяГруппы3].Количество();
			ИсхКолвоСтрокБлокаМ1 = 4;
			ИсхКолвоСтрокБлокаМ2 = 1;
			ИсхКолвоСтрокБлокаМ3 = 1;
		ИначеЕсли Парам1.ИмяСтраницы = "Раздел5" Тогда
			ИсхКолвоСтрокБлока = 3;
		ИначеЕсли Парам1.ИмяСтраницы = "Раздел6" Тогда
			ИмяГруппы1 = СтруктураРеквизитовФормы.мИдГруппы6М1;
			ИмяГруппы2 = СтруктураРеквизитовФормы.мИдГруппы6М2;
			ИмяГруппы3 = СтруктураРеквизитовФормы.мИдГруппы6М3;
			ТекКолвоСтрокБлокаМ1 = ЭтаФорма[ИмяГруппы1].Количество();
			ТекКолвоСтрокБлокаМ2 = ЭтаФорма[ИмяГруппы2].Количество();
			ТекКолвоСтрокБлокаМ3 = ЭтаФорма[ИмяГруппы3].Количество();
			ИсхКолвоСтрокБлокаМ1 = 2;
			ИсхКолвоСтрокБлокаМ2 = 1;
			ИсхКолвоСтрокБлокаМ3 = 1;
		ИначеЕсли Парам1.ИмяСтраницы = "Раздел7" Тогда
			ИсхКолвоСтрокБлока = 21;
		КонецЕсли;
						
		Если Парам1.ИмяСтраницы = "Раздел4"
			ИЛИ Парам1.ИмяСтраницы = "Раздел6" Тогда
			
			Если (ТекКолвоСтрокБлокаМ1 > 0 И ИсхКолвоСтрокБлокаМ1 > 0)
			 ИЛИ (ТекКолвоСтрокБлокаМ2 > 0 И ИсхКолвоСтрокБлокаМ2 > 0)
			 ИЛИ (ТекКолвоСтрокБлокаМ3 > 0 И ИсхКолвоСтрокБлокаМ3 > 0) Тогда
				
				ДробноеКолвоЛистовМЧБ = Макс(
				?(ТекКолвоСтрокБлокаМ1 > ИсхКолвоСтрокБлокаМ1, ТекКолвоСтрокБлокаМ1 / ИсхКолвоСтрокБлокаМ1, 1),
				?(ТекКолвоСтрокБлокаМ2 > ИсхКолвоСтрокБлокаМ2, ТекКолвоСтрокБлокаМ2 / ИсхКолвоСтрокБлокаМ2, 1),
				?(ТекКолвоСтрокБлокаМ3 > ИсхКолвоСтрокБлокаМ3, ТекКолвоСтрокБлокаМ3 / ИсхКолвоСтрокБлокаМ3, 1));
				
				ЦелоеКолвоЛистовМЧБ = Цел(ДробноеКолвоЛистовМЧБ);
				
				КолвоЛистовМЧБ = ?(ДробноеКолвоЛистовМЧБ = ЦелоеКолвоЛистовМЧБ, ЦелоеКолвоЛистовМЧБ, ЦелоеКолвоЛистовМЧБ + 1);
				
				СтрокиБлокаМ1 = Новый Массив(2);
				СтрокиБлокаМ1.Вставить(0, ИсхКолвоСтрокБлокаМ1);
				СтрокиБлокаМ1.Вставить(1, ТекКолвоСтрокБлокаМ1);
				
				СтрокиБлокаМ2 = Новый Массив(2);
				СтрокиБлокаМ2.Вставить(0, ИсхКолвоСтрокБлокаМ2);
				СтрокиБлокаМ2.Вставить(1, ТекКолвоСтрокБлокаМ2);
				
				СтрокиБлокаМ3 = Новый Массив(2);
				СтрокиБлокаМ3.Вставить(0, ИсхКолвоСтрокБлокаМ3);
				СтрокиБлокаМ3.Вставить(1, ТекКолвоСтрокБлокаМ3);
				
				ИменаПоказателей = Новый Структура;
				
				Колонки = ДанныеФормыВЗначение(ЭтаФорма[ИмяГруппы1], Тип("ТаблицаЗначений")).Колонки;
				
				Для Каждого КолонкаСтруктуры Из Колонки Цикл
					
					ИменаПоказателей.Вставить(КолонкаСтруктуры.Имя, СтрокиБлокаМ1);
					
				КонецЦикла;
				
				Колонки = ДанныеФормыВЗначение(ЭтаФорма[ИмяГруппы2], Тип("ТаблицаЗначений")).Колонки;
												
				Для Каждого КолонкаСтруктуры Из Колонки Цикл
					
					ИменаПоказателей.Вставить(КолонкаСтруктуры.Имя, СтрокиБлокаМ2);
					
				КонецЦикла;
								
				Колонки = ДанныеФормыВЗначение(ЭтаФорма[ИмяГруппы3], Тип("ТаблицаЗначений")).Колонки;
												
				Для Каждого КолонкаСтруктуры Из Колонки Цикл
					
					ИменаПоказателей.Вставить(КолонкаСтруктуры.Имя, СтрокиБлокаМ3);
					
				КонецЦикла;
				    								
				СписокЛистовМЧБ = ПечатныеБланки(ИменаПоказателей, КолвоЛистовМЧБ, МакетМЧБ);
				
				Для каждого элЛистМЧБ Из СписокЛистовМЧБ Цикл
					
					ЛистМЧБ = элЛистМЧБ.Значение;
					
					ЛистМЧБ.ПолеСверху = 5;
					ЛистМЧБ.ПолеСправа = 5;
					ЛистМЧБ.ПолеСнизу  = 5;
					ЛистМЧБ.ПолеСлева  = 5;
					
					ПоказателиПечатногоБланка = ПоказателиПечатногоБланка(Парам1,
					ЛистМЧБ,
					ОбщиеРеквизитыРазделов);
					
					ИндексТочкиПоКорню = ИндексыТочекПоКорню(МакетМЧБ);
					
					ЗаполнитьМакетМЧБ(ЛистМЧБ, ПоказателиПечатногоБланка, ИндексТочкиПоКорню, Парам1);
					
					Если СписокЛистовМЧБ.Индекс(элЛистМЧБ) > 0 Тогда
						ОбнулитьИтоговыеПоказателиНаЛистеМЧБ(ЛистМЧБ);
					КонецЕсли;
					
					РегламентированнаяОтчетность.ВывестиНаПечатьЛистОбщая(ЭтаФорма.Заголовок,
					Парам1,
					ЛистМЧБ,
					СтруктураРеквизитовФормы.мПечатныеФормы);
					
				КонецЦикла;
				
				Возврат;
				
			КонецЕсли;
			
		Иначе
			
			ТекКолвоСтрокБлока = ЭтаФорма[мСтруктураМногострочныхРазделов[ИдГруппы]].Количество();
			Если ТекКолвоСтрокБлока > 0 И ИсхКолвоСтрокБлока > 0 Тогда
				//Определение общего количества листов МЧБ
				КолвоЛистовМЧБ = Цел(ТекКолвоСтрокБлока / ИсхКолвоСтрокБлока);
				КолвоСтрокНаПоследнемЛисте = ТекКолвоСтрокБлока % ИсхКолвоСтрокБлока;
				Если КолвоСтрокНаПоследнемЛисте <> 0 Тогда
					КолвоЛистовМЧБ = КолвоЛистовМЧБ + 1;	
				КонецЕсли;
				
				//заполнение строки имен показателей (для проверки перед переименованием)
				СтрИменаПоказателей = "";
				
				Колонки = ДанныеФормыВЗначение(ЭтаФорма[мСтруктураМногострочныхРазделов[ИдГруппы]], Тип("ТаблицаЗначений")).Колонки;
				
				СтрокиБлока = Новый Массив(2);
				СтрокиБлока.Вставить(0, ИсхКолвоСтрокБлока);
				СтрокиБлока.Вставить(1, ТекКолвоСтрокБлока);
			
				ИменаПоказателей = Новый Структура;
				
				Для Каждого КолонкаСтруктуры Из Колонки Цикл
					
					ИменаПоказателей.Вставить(КолонкаСтруктуры.Имя, СтрокиБлока);
					
				КонецЦикла;
				
				СписокЛистовМЧБ = ПечатныеБланки(ИменаПоказателей, КолвоЛистовМЧБ, МакетМЧБ);
				
				Для каждого элЛистМЧБ Из СписокЛистовМЧБ Цикл
					
					ЛистМЧБ = элЛистМЧБ.Значение;
					
					ЛистМЧБ.ПолеСверху = 5;
					ЛистМЧБ.ПолеСправа = 5;
					ЛистМЧБ.ПолеСнизу  = 5;
					ЛистМЧБ.ПолеСлева  = 5;
					
					ПоказателиПечатногоБланка = ПоказателиПечатногоБланка(Парам1,
					ЛистМЧБ,
					ОбщиеРеквизитыРазделов);
					
					ИндексТочкиПоКорню = ИндексыТочекПоКорню(МакетМЧБ);
					
					ЗаполнитьМакетМЧБ(ЛистМЧБ, ПоказателиПечатногоБланка, ИндексТочкиПоКорню, Парам1);
					
					Если Парам1.ИмяСтраницы = "Раздел7" Тогда
						
						Если СписокЛистовМЧБ.Индекс(элЛистМЧБ) + 1 < СписокЛистовМЧБ.Количество() Тогда
							// Выводится не последний лист многострочной серии листов МЧБ.
							// Необходимо обнулить итоговые показатели.
							ОбнулитьИтоговыеПоказателиНаЛистеМЧБ(ЛистМЧБ);
						КонецЕсли;
						
					Иначе
						
						Если СписокЛистовМЧБ.Индекс(элЛистМЧБ) > 0 Тогда
							
							// Выводится не первый лист многострочной серии листов МЧБ.
							// Необходимо обнулить итоговые показатели.
							ОбнулитьИтоговыеПоказателиНаЛистеМЧБ(ЛистМЧБ);
							
						ИначеЕсли Парам1.ИмяСтраницы = "Раздел5"
							И НомерДопСтраницы > 1 Тогда
							
							// Выводится не первый лист многостранично-многострочной серии листов МЧБ Раздела 5.
							// Необходимо обнулить итоговые показатели.
							ОбнулитьИтоговыеПоказателиНаЛистеМЧБ(ЛистМЧБ);
							
						КонецЕсли;
						
					КонецЕсли;
					
					РегламентированнаяОтчетность.ВывестиНаПечатьЛистОбщая(ЭтаФорма.Заголовок,
					Парам1,
					ЛистМЧБ,
					СтруктураРеквизитовФормы.мПечатныеФормы);
					
				КонецЦикла;
				
				Возврат;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ПоказателиПечатногоБланка = ПоказателиПечатногоБланка(Парам1,
		МакетМЧБ,
		ОбщиеРеквизитыРазделов);
	
	ИндексТочкиПоКорню = ИндексыТочекПоКорню(МакетМЧБ);
	
	ЗаполнитьМакетМЧБ(МакетМЧБ, ПоказателиПечатногоБланка, ИндексТочкиПоКорню, Парам1);
	
	РегламентированнаяОтчетность.ВывестиНаПечатьЛистОбщая(ЭтаФорма.Заголовок,
														  Парам1,
														  МакетМЧБ,
														  СтруктураРеквизитовФормы.мПечатныеФормы);
	
КонецПроцедуры

&НаСервере
Процедура ВывестиНаПечатьЛистыРазделов8_12_ЗаполненныхБезДеленияНаСекции(Парам1, ОбщиеРеквизитыРазделов, СтрПоля = Неопределено)
	
	Если НЕ СтруктураРеквизитовФормы.Свойство("АдресДанных" + Парам1.ИмяСтраницы) Тогда
		Данные = Неопределено;
	ИначеЕсли СтруктураРеквизитовФормы["АдресДанных" + Парам1.ИмяСтраницы] = Неопределено Тогда
		Данные = Неопределено;
	Иначе
		Данные = ПолучитьИзВременногоХранилища(СтруктураРеквизитовФормы["АдресДанных" + Парам1.ИмяСтраницы]);
		Если Данные.Записи.Количество() = 0 Тогда
			Данные = Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	Если Данные = Неопределено Тогда
		
		Данные = ДанныеДляПечатиПустыхМЧБРазделов8_12();
		
	КонецЕсли;
	
	Данные.Вставить("ЭтоПерваяСтраницаРаздела",    Неопределено);
	Данные.Вставить("ЭтоПоследняяСтраницаРаздела", Неопределено);
	
	ВывестиНаПечатьЛистыРазделов8_12_ОбщаяЧасть(Парам1, ОбщиеРеквизитыРазделов, СтрПоля, Данные);
	
КонецПроцедуры

&НаСервере
Процедура ВывестиНаПечатьЛистыРазделов8_12_ЗаполненныхСДелениемНаСекции(Парам1, ОбщиеРеквизитыРазделов, СтрПоля = Неопределено)
	
	РазделЗаполнен = ЭтаФорма["Страницы" + Парам1.ИмяСтраницы].Количество() > 0;
	
	Если РазделЗаполнен Тогда;
		
		ДанныеРаздела = ДанныеРазделаНДСДляПечати(Парам1.ИмяСтраницы);
		
	Иначе
		
		// Раздел либо а) не заполнялся совсем, либо б) был
		// заполнен, но затем был очищен, а отчет не сохранен.
		ДанныеРаздела = Неопределено;
		
	КонецЕсли;
	
	Если ДанныеРаздела = Неопределено Тогда
		
		Данные = ДанныеДляПечатиПустыхМЧБРазделов8_12();
		
		ВывестиНаПечатьЛистыРазделов8_12_ОбщаяЧасть(Парам1, ОбщиеРеквизитыРазделов, СтрПоля, Данные);
		
	Иначе
		
		СтрокиРаздела = ДанныеРаздела.СтрокиРаздела;
		
		ПечататьОдинКомплектЛистовРаздела
			= (СтруктураРеквизитовФормы["АктуальностьСведений" + Парам1.ИмяСтраницы] = 1
			И СтруктураРеквизитовФормы.ВидДокумента <> 0);
		
		Для Каждого НомерПервойСтрокиСекции Из СтрокиРаздела Цикл
			
			СтрокиСегментаРаздела = РегламентированнаяОтчетность.СегментДанныхРазделаДекларацииНДС(
				СтруктураРеквизитовФормы.мСохраненныйДок, Парам1.ИмяСтраницы, НомерПервойСтрокиСекции);
			
			Для Каждого СтрокаДанных ИЗ СтрокиСегментаРаздела Цикл
				
				// Преобразование структуры данных, передаваемой в общий механизм вывода листов
				// МЧБ разделов 8 - 12 при новом ("сегментированном") варианте хранения данных.
				Данные = Новый Структура;
				
				МассивКопируемыхСтрок = Новый Массив;
				МассивКопируемыхСтрок.Добавить(СтрокаДанных);
				
				// Данные, полученные из ИБ потребителя.
				Данные.Вставить("Записи", СтрокиСегментаРаздела.Скопировать(МассивКопируемыхСтрок));
				Данные.Вставить("Итоги",  ДанныеРаздела.Итоги);
				
				// Служебные данные, определяющие необходимость вывода на печать
				// значений отдельных показателей и/или формат вывода этих значений.
				Данные.Вставить("ЭтоПерваяСтраницаРаздела",
					НомерПервойСтрокиСекции = СтрокиРаздела[0] И СтрокиСегментаРаздела.Индекс(СтрокаДанных) = 0);
				Данные.Вставить("ЭтоПоследняяСтраницаРаздела",
					НомерПервойСтрокиСекции = СтрокиРаздела[СтрокиРаздела.Количество() - 1]
					И СтрокиСегментаРаздела.Индекс(СтрокаДанных) = СтрокиСегментаРаздела.Количество() - 1);
				
				ВывестиНаПечатьЛистыРазделов8_12_ОбщаяЧасть(Парам1, ОбщиеРеквизитыРазделов, СтрПоля, Данные);
				
				Если ПечататьОдинКомплектЛистовРаздела Тогда
					Возврат;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиНаПечатьЛистыРазделов8_12_ОбщаяЧасть(Парам1, ОбщиеРеквизитыРазделов, СтрПоля = Неопределено, Данные)
	
	Для Каждого Запись Из Данные.Записи Цикл
		
		Если Парам1.ИмяСтраницы = "Раздел8" Тогда
			
			Если Запись <> "" И НЕ (СтруктураРеквизитовФормы.АктуальностьСведенийРаздел8 = 1
				И СтруктураРеквизитовФормы.ВидДокумента <> 0) Тогда
				
				МЧБРаздела = "ПечатныйБланк2019Кв1_Раздел8";
				
				МакетМЧБ = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(МЧБРаздела);
				МакетМЧБ.ПолеСверху = 5;
				МакетМЧБ.ПолеСправа = 5;
				МакетМЧБ.ПолеСнизу  = 5;
				МакетМЧБ.ПолеСлева  = 5;
				
				ТекКолвоСтрокБлокаРаздел8_1 = Запись.КодВидОпер.Количество();
				ТекКолвоСтрокБлокаРаздел8_2 = Запись.ДокПдтвУпл.Количество();
				ТекКолвоСтрокБлокаРаздел8_3 = Запись.ДатаУчТов.Количество();
				
				ИсхКолвоСтрокБлокаРаздел8_1 = 7;
				ИсхКолвоСтрокБлокаРаздел8_2 = 1;
				ИсхКолвоСтрокБлокаРаздел8_3 = 1;
				
				Если (ТекКолвоСтрокБлокаРаздел8_1 > 0 И ИсхКолвоСтрокБлокаРаздел8_1 > 0)
				 ИЛИ (ТекКолвоСтрокБлокаРаздел8_2 > 0 И ИсхКолвоСтрокБлокаРаздел8_2 > 0)
				 ИЛИ (ТекКолвоСтрокБлокаРаздел8_3 > 0 И ИсхКолвоСтрокБлокаРаздел8_3 > 0) Тогда
					
					ДробноеКолвоЛистовМЧБ = Макс(
						?(ТекКолвоСтрокБлокаРаздел8_1 > ИсхКолвоСтрокБлокаРаздел8_1, ТекКолвоСтрокБлокаРаздел8_1 / ИсхКолвоСтрокБлокаРаздел8_1, 1),
						?(ТекКолвоСтрокБлокаРаздел8_2 > ИсхКолвоСтрокБлокаРаздел8_2, ТекКолвоСтрокБлокаРаздел8_2 / ИсхКолвоСтрокБлокаРаздел8_2, 1),
						?(ТекКолвоСтрокБлокаРаздел8_3 > ИсхКолвоСтрокБлокаРаздел8_3, ТекКолвоСтрокБлокаРаздел8_3 / ИсхКолвоСтрокБлокаРаздел8_3, 1));
					
					ЦелоеКолвоЛистовМЧБ = Цел(ДробноеКолвоЛистовМЧБ);
					
					КолвоЛистовМЧБ = ?(ДробноеКолвоЛистовМЧБ = ЦелоеКолвоЛистовМЧБ, ЦелоеКолвоЛистовМЧБ, ЦелоеКолвоЛистовМЧБ + 1);
					
					СтрокиБлокаРаздел8_1 = Новый Массив(2);
					СтрокиБлокаРаздел8_1.Вставить(0, ИсхКолвоСтрокБлокаРаздел8_1);
					СтрокиБлокаРаздел8_1.Вставить(1, ТекКолвоСтрокБлокаРаздел8_1);
					
					СтрокиБлокаРаздел8_2 = Новый Массив(2);
					СтрокиБлокаРаздел8_2.Вставить(0, ИсхКолвоСтрокБлокаРаздел8_2);
					СтрокиБлокаРаздел8_2.Вставить(1, ТекКолвоСтрокБлокаРаздел8_2);
					
					СтрокиБлокаРаздел8_3 = Новый Массив(2);
					СтрокиБлокаРаздел8_3.Вставить(0, ИсхКолвоСтрокБлокаРаздел8_3);
					СтрокиБлокаРаздел8_3.Вставить(1, ТекКолвоСтрокБлокаРаздел8_3);
										
					ИменаПоказателей = Новый Структура;
					ИменаПоказателей.Вставить("П000800001003", СтрокиБлокаРаздел8_1);
					ИменаПоказателей.Вставить("П000800010003", СтрокиБлокаРаздел8_2);
					ИменаПоказателей.Вставить("П000800011003", СтрокиБлокаРаздел8_2);
					ИменаПоказателей.Вставить("П000800012003", СтрокиБлокаРаздел8_3);
					
					СписокЛистовМЧБ = ПечатныеБланки(ИменаПоказателей, КолвоЛистовМЧБ, МакетМЧБ);
					
					Для Каждого элЛистМЧБ Из СписокЛистовМЧБ Цикл
						
						ЛистМЧБ = элЛистМЧБ.Значение;
						
						ЛистМЧБ.ПолеСверху = 5;
						ЛистМЧБ.ПолеСправа = 5;
						ЛистМЧБ.ПолеСнизу  = 5;
						ЛистМЧБ.ПолеСлева  = 5;
						
						ДопПараметры = Новый Структура();
						
						Если Данные.ЭтоПерваяСтраницаРаздела <> Неопределено Тогда
							ДопПараметры.Вставить("ЭтоПерваяСтраницаРаздела", Данные.ЭтоПерваяСтраницаРаздела);
						Иначе
							ДопПараметры.Вставить("ЭтоПерваяСтраницаРаздела",
								Данные.Записи.Индекс(Запись) = 0 И СписокЛистовМЧБ.Индекс(элЛистМЧБ) = 0);
						КонецЕсли;
							
						ДопПараметры.Вставить("ПостфиксВИмениРаздела", "");
						ДопПараметры.Вставить("ПечатьПустыхБланков", Ложь);
						ДопПараметры.Вставить("ИндексЛистаМЧБ", СписокЛистовМЧБ.Индекс(элЛистМЧБ));
						
						ПоказателиПечатногоБланка = ПоказателиПечатногоБланка(Парам1,
							ЛистМЧБ,
							ОбщиеРеквизитыРазделов,
							Запись, ДопПараметры);
								
						ИндексТочкиПоКорню = ИндексыТочекПоКорню(МакетМЧБ);		
							
						ЗаполнитьМакетМЧБ(ЛистМЧБ, ПоказателиПечатногоБланка, ИндексТочкиПоКорню, Парам1);
																		
						РегламентированнаяОтчетность.ВывестиНаПечатьЛистОбщая(ЭтаФорма.Заголовок,
																			  Парам1,
																			  ЛистМЧБ,
																			  СтруктураРеквизитовФормы.мПечатныеФормы);
												
					КонецЦикла;
					
				Иначе
					
					ДопПараметры = Новый Структура();
					ДопПараметры.Вставить("ЭтоПерваяСтраницаРаздела", Истина);
					ДопПараметры.Вставить("ПостфиксВИмениРаздела", "");
					ДопПараметры.Вставить("ПечатьПустыхБланков", Ложь);
					ДопПараметры.Вставить("ИндексЛистаМЧБ", 0);
					
					ПоказателиПечатногоБланка = ПоказателиПечатногоБланка(Парам1,
						МакетМЧБ,
						ОбщиеРеквизитыРазделов,
						Запись, ДопПараметры);
						
					ИндексТочкиПоКорню = ИндексыТочекПоКорню(МакетМЧБ);		
					
					ЗаполнитьМакетМЧБ(МакетМЧБ, ПоказателиПечатногоБланка, ИндексТочкиПоКорню, Парам1);
															
					РегламентированнаяОтчетность.ВывестиНаПечатьЛистОбщая(ЭтаФорма.Заголовок,
																		  Парам1,
																		  МакетМЧБ,
																		  СтруктураРеквизитовФормы.мПечатныеФормы);
										
				КонецЕсли;
				
				МЧБРаздела = "ПечатныйБланк2019Кв1_Раздел8_Прод";
				
				МакетМЧБ = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(МЧБРаздела);
				МакетМЧБ.ПолеСверху = 5;
				МакетМЧБ.ПолеСправа = 5;
				МакетМЧБ.ПолеСнизу  = 5;
				МакетМЧБ.ПолеСлева  = 5;
								
				ТекКолвоСтрокБлокаРаздел8_Прод_1 = Запись.СвПрод.Количество();
				ТекКолвоСтрокБлокаРаздел8_Прод_2 = Запись.РегНомТД.Количество();
				
				ИсхКолвоСтрокБлокаРаздел8_Прод_1 = 1;
				ИсхКолвоСтрокБлокаРаздел8_Прод_2 = 9;
						
				Если (ТекКолвоСтрокБлокаРаздел8_Прод_1 > 0 И ИсхКолвоСтрокБлокаРаздел8_Прод_1 > 0)
				 ИЛИ (ТекКолвоСтрокБлокаРаздел8_Прод_2 > 0 И ИсхКолвоСтрокБлокаРаздел8_Прод_2 > 0) Тогда
					
					ДробноеКолвоЛистовМЧБ = Макс(
						?(ТекКолвоСтрокБлокаРаздел8_Прод_1 > ИсхКолвоСтрокБлокаРаздел8_Прод_1,
							ТекКолвоСтрокБлокаРаздел8_Прод_1 / ИсхКолвоСтрокБлокаРаздел8_Прод_1, 1),
						?(ТекКолвоСтрокБлокаРаздел8_Прод_2 > ИсхКолвоСтрокБлокаРаздел8_Прод_2,
							ТекКолвоСтрокБлокаРаздел8_Прод_2 / ИсхКолвоСтрокБлокаРаздел8_Прод_2, 1));		
					
					ЦелоеКолвоЛистовМЧБ = Цел(ДробноеКолвоЛистовМЧБ);
					
					КолвоЛистовМЧБ = ?(ДробноеКолвоЛистовМЧБ = ЦелоеКолвоЛистовМЧБ, ЦелоеКолвоЛистовМЧБ, ЦелоеКолвоЛистовМЧБ + 1);
					
					СтрокиБлокаРаздел8_Прод_1 = Новый Массив(2);
					СтрокиБлокаРаздел8_Прод_1.Вставить(0, ИсхКолвоСтрокБлокаРаздел8_Прод_1);
					СтрокиБлокаРаздел8_Прод_1.Вставить(1, ТекКолвоСтрокБлокаРаздел8_Прод_1);
					
					СтрокиБлокаРаздел8_Прод_2 = Новый Массив(2);
					СтрокиБлокаРаздел8_Прод_2.Вставить(0, ИсхКолвоСтрокБлокаРаздел8_Прод_2);
					СтрокиБлокаРаздел8_Прод_2.Вставить(1, ТекКолвоСтрокБлокаРаздел8_Прод_2);
																				
					ИменаПоказателей = Новый Структура;
					ИменаПоказателей.Вставить("П000800013003", СтрокиБлокаРаздел8_Прод_1);
					ИменаПоказателей.Вставить("П000800013004", СтрокиБлокаРаздел8_Прод_1);
					ИменаПоказателей.Вставить("П000800015003", СтрокиБлокаРаздел8_Прод_2);
																				
					СписокЛистовМЧБ = ПечатныеБланки(ИменаПоказателей, КолвоЛистовМЧБ, МакетМЧБ);
					
					Для каждого элЛистМЧБ Из СписокЛистовМЧБ Цикл
						
						ЛистМЧБ = элЛистМЧБ.Значение;
						
						ЛистМЧБ.ПолеСверху = 5;
						ЛистМЧБ.ПолеСправа = 5;
						ЛистМЧБ.ПолеСнизу  = 5;
						ЛистМЧБ.ПолеСлева  = 5;
						
						ДопПараметры = Новый Структура();
						Если Данные.ЭтоПоследняяСтраницаРаздела <> Неопределено Тогда
							ДопПараметры.Вставить("ЭтоПоследняяСтраницаРаздела", Данные.ЭтоПоследняяСтраницаРаздела);
						Иначе
							ДопПараметры.Вставить("ЭтоПоследняяСтраницаРаздела",
								Данные.Записи.Индекс(Запись) = (Данные.Записи.Количество() - 1)
								И СписокЛистовМЧБ.Индекс(элЛистМЧБ) = СписокЛистовМЧБ.Количество() - 1);
						КонецЕсли;
							
						ДопПараметры.Вставить("ПостфиксВИмениРаздела", "_Прод");
						ДопПараметры.Вставить("ПечатьПустыхБланков", Ложь);
						ДопПараметры.Вставить("ИндексЛистаМЧБ", СписокЛистовМЧБ.Индекс(элЛистМЧБ));
						ДопПараметры.Вставить("Итоги", Данные.Итоги);
						
						ПоказателиПечатногоБланка = ПоказателиПечатногоБланка(Парам1,
							ЛистМЧБ,
							ОбщиеРеквизитыРазделов,
							Запись, ДопПараметры);
							
						ИндексТочкиПоКорню = ИндексыТочекПоКорню(МакетМЧБ);	
							
						ЗаполнитьМакетМЧБ(ЛистМЧБ, ПоказателиПечатногоБланка, ИндексТочкиПоКорню, Парам1);
						
						РегламентированнаяОтчетность.ВывестиНаПечатьЛистОбщая(ЭтаФорма.Заголовок,
																			  Парам1,
																			  ЛистМЧБ,
																			  СтруктураРеквизитовФормы.мПечатныеФормы);
												
					КонецЦикла;
					
				Иначе
					
					ДопПараметры = Новый Структура();
					Если Данные.ЭтоПоследняяСтраницаРаздела <> Неопределено Тогда
						ДопПараметры.Вставить("ЭтоПоследняяСтраницаРаздела", Данные.ЭтоПоследняяСтраницаРаздела);
					Иначе
						ДопПараметры.Вставить("ЭтоПоследняяСтраницаРаздела", Данные.Записи.Индекс(Запись) = (Данные.Записи.Количество() - 1));
					КонецЕсли;
					ДопПараметры.Вставить("ПостфиксВИмениРаздела", "_Прод");
					ДопПараметры.Вставить("ПечатьПустыхБланков", Ложь);
					ДопПараметры.Вставить("ИндексЛистаМЧБ", 0);
					ДопПараметры.Вставить("Итоги", Данные.Итоги);
					
					ПоказателиПечатногоБланка = ПоказателиПечатногоБланка(Парам1,
						МакетМЧБ,
						ОбщиеРеквизитыРазделов,
						Запись, ДопПараметры);
						
					ИндексТочкиПоКорню = ИндексыТочекПоКорню(МакетМЧБ);	
					
					ЗаполнитьМакетМЧБ(МакетМЧБ, ПоказателиПечатногоБланка, ИндексТочкиПоКорню, Парам1);
										
					РегламентированнаяОтчетность.ВывестиНаПечатьЛистОбщая(ЭтаФорма.Заголовок,
																		  Парам1,
																		  МакетМЧБ,
																		  СтруктураРеквизитовФормы.мПечатныеФормы);
										
				КонецЕсли;
				
			Иначе
				
				МЧБРаздела = "ПечатныйБланк2019Кв1_Раздел8";
				
				МакетМЧБ = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(МЧБРаздела);
				МакетМЧБ.ПолеСверху = 5;
				МакетМЧБ.ПолеСправа = 5;
				МакетМЧБ.ПолеСнизу  = 5;
				МакетМЧБ.ПолеСлева  = 5;
				
				ДопПараметры = Новый Структура();
				ДопПараметры.Вставить("ПостфиксВИмениРаздела", "");
				ДопПараметры.Вставить("ПечатьПустыхБланков", Истина);
				
				ПоказателиПечатногоБланка = ПоказателиПечатногоБланка(Парам1,
					МакетМЧБ,
					ОбщиеРеквизитыРазделов,
					, ДопПараметры);
					
				ИндексТочкиПоКорню = ИндексыТочекПоКорню(МакетМЧБ);	
					
				ЗаполнитьМакетМЧБ(МакетМЧБ, ПоказателиПечатногоБланка, ИндексТочкиПоКорню, Парам1);
												
				РегламентированнаяОтчетность.ВывестиНаПечатьЛистОбщая(ЭтаФорма.Заголовок,
																	  Парам1,
																	  МакетМЧБ,
																	  СтруктураРеквизитовФормы.мПечатныеФормы);
								
				МЧБРаздела = "ПечатныйБланк2019Кв1_Раздел8_Прод";
				
				МакетМЧБ = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(МЧБРаздела);
				МакетМЧБ.ПолеСверху = 5;
				МакетМЧБ.ПолеСправа = 5;
				МакетМЧБ.ПолеСнизу  = 5;
				МакетМЧБ.ПолеСлева  = 5;
				
				ДопПараметры = Новый Структура();
				ДопПараметры.Вставить("ПостфиксВИмениРаздела", "_Прод");
				ДопПараметры.Вставить("ПечатьПустыхБланков", Истина);
				
				ПоказателиПечатногоБланка = ПоказателиПечатногоБланка(Парам1,
					МакетМЧБ,
					ОбщиеРеквизитыРазделов,
					, ДопПараметры);
					
				ИндексТочкиПоКорню = ИндексыТочекПоКорню(МакетМЧБ);	
					
				ЗаполнитьМакетМЧБ(МакетМЧБ, ПоказателиПечатногоБланка, ИндексТочкиПоКорню, Парам1);
												
				РегламентированнаяОтчетность.ВывестиНаПечатьЛистОбщая(ЭтаФорма.Заголовок,
																	  Парам1,
																	  МакетМЧБ,
																	  СтруктураРеквизитовФормы.мПечатныеФормы);
																	  																					  
				Возврат;
				
			КонецЕсли;
			
		ИначеЕсли Парам1.ИмяСтраницы = "Раздел8_Прил1" Тогда
			
			Если Запись <> "" И НЕ (СтруктураРеквизитовФормы.АктуальностьСведенийРаздел8_Прил1 = 1
				И СтруктураРеквизитовФормы.ВидДокумента <> 0) Тогда
				
				МЧБРаздела = "ПечатныйБланк2019Кв1_Раздел8_Прил1";
				
				МакетМЧБ = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(МЧБРаздела);
				МакетМЧБ.ПолеСверху = 5;
				МакетМЧБ.ПолеСправа = 5;
				МакетМЧБ.ПолеСнизу  = 5;
				МакетМЧБ.ПолеСлева  = 5;
				
				ТекКолвоСтрокБлокаРаздел8_1 = Запись.КодВидОпер.Количество();
				ТекКолвоСтрокБлокаРаздел8_2 = Запись.ДокПдтвУпл.Количество();
				ТекКолвоСтрокБлокаРаздел8_3 = Запись.ДатаУчТов.Количество();
				
				ИсхКолвоСтрокБлокаРаздел8_1 = 7;
				ИсхКолвоСтрокБлокаРаздел8_2 = 1;
				ИсхКолвоСтрокБлокаРаздел8_3 = 1;
				
				Если (ТекКолвоСтрокБлокаРаздел8_1 > 0 И ИсхКолвоСтрокБлокаРаздел8_1 > 0)
				 ИЛИ (ТекКолвоСтрокБлокаРаздел8_2 > 0 И ИсхКолвоСтрокБлокаРаздел8_2 > 0)
				 ИЛИ (ТекКолвоСтрокБлокаРаздел8_3 > 0 И ИсхКолвоСтрокБлокаРаздел8_3 > 0) Тогда
					
					ДробноеКолвоЛистовМЧБ = Макс(
						?(ТекКолвоСтрокБлокаРаздел8_1 > ИсхКолвоСтрокБлокаРаздел8_1, ТекКолвоСтрокБлокаРаздел8_1 / ИсхКолвоСтрокБлокаРаздел8_1, 1),
						?(ТекКолвоСтрокБлокаРаздел8_2 > ИсхКолвоСтрокБлокаРаздел8_2, ТекКолвоСтрокБлокаРаздел8_2 / ИсхКолвоСтрокБлокаРаздел8_2, 1),
						?(ТекКолвоСтрокБлокаРаздел8_3 > ИсхКолвоСтрокБлокаРаздел8_3, ТекКолвоСтрокБлокаРаздел8_3 / ИсхКолвоСтрокБлокаРаздел8_3, 1));
					
					ЦелоеКолвоЛистовМЧБ = Цел(ДробноеКолвоЛистовМЧБ);
					
					КолвоЛистовМЧБ = ?(ДробноеКолвоЛистовМЧБ = ЦелоеКолвоЛистовМЧБ, ЦелоеКолвоЛистовМЧБ, ЦелоеКолвоЛистовМЧБ + 1);
					
					СтрокиБлокаРаздел8_1 = Новый Массив(2);
					СтрокиБлокаРаздел8_1.Вставить(0, ИсхКолвоСтрокБлокаРаздел8_1);
					СтрокиБлокаРаздел8_1.Вставить(1, ТекКолвоСтрокБлокаРаздел8_1);
					
					СтрокиБлокаРаздел8_2 = Новый Массив(2);
					СтрокиБлокаРаздел8_2.Вставить(0, ИсхКолвоСтрокБлокаРаздел8_2);
					СтрокиБлокаРаздел8_2.Вставить(1, ТекКолвоСтрокБлокаРаздел8_2);
					
					СтрокиБлокаРаздел8_3 = Новый Массив(2);
					СтрокиБлокаРаздел8_3.Вставить(0, ИсхКолвоСтрокБлокаРаздел8_3);
					СтрокиБлокаРаздел8_3.Вставить(1, ТекКолвоСтрокБлокаРаздел8_3);
																				
					ИменаПоказателей = Новый Структура;
					ИменаПоказателей.Вставить("П000810001003", СтрокиБлокаРаздел8_1);
					ИменаПоказателей.Вставить("П000810010003", СтрокиБлокаРаздел8_2);
					ИменаПоказателей.Вставить("П000810011003", СтрокиБлокаРаздел8_2);
					ИменаПоказателей.Вставить("П000810012003", СтрокиБлокаРаздел8_3);
										
					СписокЛистовМЧБ = ПечатныеБланки(ИменаПоказателей, КолвоЛистовМЧБ, МакетМЧБ);
					
					Для каждого элЛистМЧБ Из СписокЛистовМЧБ Цикл
						
						ЛистМЧБ = элЛистМЧБ.Значение;
						
						ЛистМЧБ.ПолеСверху = 5;
						ЛистМЧБ.ПолеСправа = 5;
						ЛистМЧБ.ПолеСнизу  = 5;
						ЛистМЧБ.ПолеСлева  = 5;
						
						ДопПараметры = Новый Структура();
						Если Данные.ЭтоПерваяСтраницаРаздела <> Неопределено Тогда
							ДопПараметры.Вставить("ЭтоПерваяСтраницаРаздела", Данные.ЭтоПерваяСтраницаРаздела);
						Иначе
							ДопПараметры.Вставить("ЭтоПерваяСтраницаРаздела",
								Данные.Записи.Индекс(Запись) = 0 И СписокЛистовМЧБ.Индекс(элЛистМЧБ) = 0);
						КонецЕсли;
						ДопПараметры.Вставить("ПостфиксВИмениРаздела", "");
						ДопПараметры.Вставить("ПечатьПустыхБланков", Ложь);
						ДопПараметры.Вставить("ИндексЛистаМЧБ", СписокЛистовМЧБ.Индекс(элЛистМЧБ));
						ДопПараметры.Вставить("Итоги", Данные.Итоги);
						
						ПоказателиПечатногоБланка = ПоказателиПечатногоБланка(Парам1,
							ЛистМЧБ,
							ОбщиеРеквизитыРазделов,
							Запись, ДопПараметры);
							
						ИндексТочкиПоКорню = ИндексыТочекПоКорню(МакетМЧБ);	
						
						ЗаполнитьМакетМЧБ(ЛистМЧБ, ПоказателиПечатногоБланка, ИндексТочкиПоКорню, Парам1);
																		
						РегламентированнаяОтчетность.ВывестиНаПечатьЛистОбщая(ЭтаФорма.Заголовок,
																			  Парам1,
																			  ЛистМЧБ,
																			  СтруктураРеквизитовФормы.мПечатныеФормы);
												
					КонецЦикла;
					
				Иначе
					
					ДопПараметры = Новый Структура();
					ДопПараметры.Вставить("ЭтоПерваяСтраницаРаздела", Истина);
					ДопПараметры.Вставить("ПостфиксВИмениРаздела", "");
					ДопПараметры.Вставить("ПечатьПустыхБланков", Ложь);
					ДопПараметры.Вставить("ИндексЛистаМЧБ", 0);
					ДопПараметры.Вставить("Итоги", Данные.Итоги);
					
					ПоказателиПечатногоБланка = ПоказателиПечатногоБланка(Парам1,
						МакетМЧБ,
						ОбщиеРеквизитыРазделов,
						Запись, ДопПараметры);
						
					ИндексТочкиПоКорню = ИндексыТочекПоКорню(МакетМЧБ);	
					
					ЗаполнитьМакетМЧБ(МакетМЧБ, ПоказателиПечатногоБланка, ИндексТочкиПоКорню, Парам1);
															
					РегламентированнаяОтчетность.ВывестиНаПечатьЛистОбщая(ЭтаФорма.Заголовок,
																		  Парам1,
																		  МакетМЧБ,
																		  СтруктураРеквизитовФормы.мПечатныеФормы);
										
				КонецЕсли;
				
				МЧБРаздела = "ПечатныйБланк2019Кв1_Раздел8_Прил1_Прод";
				
				МакетМЧБ = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(МЧБРаздела);
				МакетМЧБ.ПолеСверху = 5;
				МакетМЧБ.ПолеСправа = 5;
				МакетМЧБ.ПолеСнизу  = 5;
				МакетМЧБ.ПолеСлева  = 5;
												
				ТекКолвоСтрокБлокаРаздел8_Прод_1 = Запись.СвПрод.Количество();
				ТекКолвоСтрокБлокаРаздел8_Прод_2 = Запись.РегНомТД.Количество();
				
				ИсхКолвоСтрокБлокаРаздел8_Прод_1 = 1;
				ИсхКолвоСтрокБлокаРаздел8_Прод_2 = 9;
						
				Если (ТекКолвоСтрокБлокаРаздел8_Прод_1 > 0 И ИсхКолвоСтрокБлокаРаздел8_Прод_1 > 0)
				 ИЛИ (ТекКолвоСтрокБлокаРаздел8_Прод_2 > 0 И ИсхКолвоСтрокБлокаРаздел8_Прод_2 > 0) Тогда
					
					ДробноеКолвоЛистовМЧБ = Макс(
						?(ТекКолвоСтрокБлокаРаздел8_Прод_1 > ИсхКолвоСтрокБлокаРаздел8_Прод_1,
							ТекКолвоСтрокБлокаРаздел8_Прод_1 / ИсхКолвоСтрокБлокаРаздел8_Прод_1, 1),
						?(ТекКолвоСтрокБлокаРаздел8_Прод_2 > ИсхКолвоСтрокБлокаРаздел8_Прод_2,
							ТекКолвоСтрокБлокаРаздел8_Прод_2 / ИсхКолвоСтрокБлокаРаздел8_Прод_2, 1));		
						    					
					ЦелоеКолвоЛистовМЧБ = Цел(ДробноеКолвоЛистовМЧБ);
					
					КолвоЛистовМЧБ = ?(ДробноеКолвоЛистовМЧБ = ЦелоеКолвоЛистовМЧБ, ЦелоеКолвоЛистовМЧБ, ЦелоеКолвоЛистовМЧБ + 1);
					
					СтрокиБлокаРаздел8_Прод_1 = Новый Массив(2);
					СтрокиБлокаРаздел8_Прод_1.Вставить(0, ИсхКолвоСтрокБлокаРаздел8_Прод_1);
					СтрокиБлокаРаздел8_Прод_1.Вставить(1, ТекКолвоСтрокБлокаРаздел8_Прод_1);
					
					СтрокиБлокаРаздел8_Прод_2 = Новый Массив(2);
					СтрокиБлокаРаздел8_Прод_2.Вставить(0, ИсхКолвоСтрокБлокаРаздел8_Прод_2);
					СтрокиБлокаРаздел8_Прод_2.Вставить(1, ТекКолвоСтрокБлокаРаздел8_Прод_2);
																				
					ИменаПоказателей = Новый Структура;
					ИменаПоказателей.Вставить("П000810013003", СтрокиБлокаРаздел8_Прод_1);
					ИменаПоказателей.Вставить("П000810013004", СтрокиБлокаРаздел8_Прод_1);
					ИменаПоказателей.Вставить("П000810015003", СтрокиБлокаРаздел8_Прод_2);
					
					СписокЛистовМЧБ = ПечатныеБланки(ИменаПоказателей, КолвоЛистовМЧБ, МакетМЧБ);
					
					Для каждого элЛистМЧБ Из СписокЛистовМЧБ Цикл
						
						ЛистМЧБ = элЛистМЧБ.Значение;
						
						ЛистМЧБ.ПолеСверху = 5;
						ЛистМЧБ.ПолеСправа = 5;
						ЛистМЧБ.ПолеСнизу  = 5;
						ЛистМЧБ.ПолеСлева  = 5;
						
						ДопПараметры = Новый Структура();
						Если Данные.ЭтоПоследняяСтраницаРаздела <> Неопределено Тогда
							ДопПараметры.Вставить("ЭтоПоследняяСтраницаРаздела", Данные.ЭтоПоследняяСтраницаРаздела);
						Иначе
							ДопПараметры.Вставить("ЭтоПоследняяСтраницаРаздела",
								Данные.Записи.Индекс(Запись) = (Данные.Записи.Количество() - 1)
								И СписокЛистовМЧБ.Индекс(элЛистМЧБ) = СписокЛистовМЧБ.Количество() - 1);
						КонецЕсли;
						ДопПараметры.Вставить("ПостфиксВИмениРаздела", "_Прод");
						ДопПараметры.Вставить("ПечатьПустыхБланков", Ложь);
						ДопПараметры.Вставить("ИндексЛистаМЧБ", СписокЛистовМЧБ.Индекс(элЛистМЧБ));
						ДопПараметры.Вставить("Итоги", Данные.Итоги);
						
						ПоказателиПечатногоБланка = ПоказателиПечатногоБланка(Парам1,
							ЛистМЧБ,
							ОбщиеРеквизитыРазделов,
							Запись, ДопПараметры);
							
						ИндексТочкиПоКорню = ИндексыТочекПоКорню(МакетМЧБ);	
						
						ЗаполнитьМакетМЧБ(ЛистМЧБ, ПоказателиПечатногоБланка, ИндексТочкиПоКорню, Парам1);
																		
						РегламентированнаяОтчетность.ВывестиНаПечатьЛистОбщая(ЭтаФорма.Заголовок,
																			  Парам1,
																			  ЛистМЧБ,
																			  СтруктураРеквизитовФормы.мПечатныеФормы);
												
					КонецЦикла;
					
				Иначе
					
					ДопПараметры = Новый Структура();
					Если Данные.ЭтоПоследняяСтраницаРаздела <> Неопределено Тогда
						ДопПараметры.Вставить("ЭтоПоследняяСтраницаРаздела", Данные.ЭтоПоследняяСтраницаРаздела);
					Иначе
						ДопПараметры.Вставить("ЭтоПоследняяСтраницаРаздела", Данные.Записи.Индекс(Запись) = (Данные.Записи.Количество() - 1));
					КонецЕсли;
					ДопПараметры.Вставить("ПостфиксВИмениРаздела", "_Прод");
					ДопПараметры.Вставить("ПечатьПустыхБланков", Ложь);
					ДопПараметры.Вставить("ИндексЛистаМЧБ", 0);
					ДопПараметры.Вставить("Итоги", Данные.Итоги);
					
					ПоказателиПечатногоБланка = ПоказателиПечатногоБланка(Парам1,
						МакетМЧБ,
						ОбщиеРеквизитыРазделов,
						Запись, ДопПараметры);
						
					ИндексТочкиПоКорню = ИндексыТочекПоКорню(МакетМЧБ);	
					
					ЗаполнитьМакетМЧБ(МакетМЧБ, ПоказателиПечатногоБланка, ИндексТочкиПоКорню, Парам1);
															
					РегламентированнаяОтчетность.ВывестиНаПечатьЛистОбщая(ЭтаФорма.Заголовок,
																		  Парам1,
																		  МакетМЧБ,
																		  СтруктураРеквизитовФормы.мПечатныеФормы);
										
				КонецЕсли;
				
			Иначе
				
				МЧБРаздела = "ПечатныйБланк2019Кв1_Раздел8_Прил1";
				
				МакетМЧБ = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(МЧБРаздела);
				МакетМЧБ.ПолеСверху = 5;
				МакетМЧБ.ПолеСправа = 5;
				МакетМЧБ.ПолеСнизу  = 5;
				МакетМЧБ.ПолеСлева  = 5;
				
				ДопПараметры = Новый Структура();
				ДопПараметры.Вставить("ПостфиксВИмениРаздела", "");
				ДопПараметры.Вставить("ПечатьПустыхБланков", Истина);
				
				ПоказателиПечатногоБланка = ПоказателиПечатногоБланка(Парам1,
					МакетМЧБ,
					ОбщиеРеквизитыРазделов,
					, ДопПараметры);
					
				ИндексТочкиПоКорню = ИндексыТочекПоКорню(МакетМЧБ);	
					
				ЗаполнитьМакетМЧБ(МакетМЧБ, ПоказателиПечатногоБланка, ИндексТочкиПоКорню, Парам1);
												
				РегламентированнаяОтчетность.ВывестиНаПечатьЛистОбщая(ЭтаФорма.Заголовок,
																	  Парам1,
																	  МакетМЧБ,
																	  СтруктураРеквизитовФормы.мПечатныеФормы);
								
				МЧБРаздела = "ПечатныйБланк2019Кв1_Раздел8_Прил1_Прод";
				
				МакетМЧБ = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(МЧБРаздела);
				МакетМЧБ.ПолеСверху = 5;
				МакетМЧБ.ПолеСправа = 5;
				МакетМЧБ.ПолеСнизу  = 5;
				МакетМЧБ.ПолеСлева  = 5;
				
				ДопПараметры = Новый Структура();
				ДопПараметры.Вставить("ПостфиксВИмениРаздела", "_Прод");
				ДопПараметры.Вставить("ПечатьПустыхБланков", Истина);
				
				ПоказателиПечатногоБланка = ПоказателиПечатногоБланка(Парам1,
					МакетМЧБ,
					ОбщиеРеквизитыРазделов,
					, ДопПараметры);
					
				ИндексТочкиПоКорню = ИндексыТочекПоКорню(МакетМЧБ);	
					
				ЗаполнитьМакетМЧБ(МакетМЧБ, ПоказателиПечатногоБланка, ИндексТочкиПоКорню, Парам1);
												
				РегламентированнаяОтчетность.ВывестиНаПечатьЛистОбщая(ЭтаФорма.Заголовок,
																	  Парам1,
																	  МакетМЧБ,
																	  СтруктураРеквизитовФормы.мПечатныеФормы);
																  
				Возврат;
				
			КонецЕсли;
			
		ИначеЕсли Парам1.ИмяСтраницы = "Раздел9" Тогда
			
			Если Запись <> "" И НЕ (СтруктураРеквизитовФормы.АктуальностьСведенийРаздел9 = 1
				И СтруктураРеквизитовФормы.ВидДокумента <> 0) Тогда
				
				МЧБРаздела = "ПечатныйБланк2019Кв1_Раздел9";
				
				МакетМЧБ = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(МЧБРаздела);
				МакетМЧБ.ПолеСверху = 5;
				МакетМЧБ.ПолеСправа = 5;
				МакетМЧБ.ПолеСнизу  = 5;
				МакетМЧБ.ПолеСлева  = 5;
				
				ТекКолвоСтрокБлокаРаздел9_1 = Запись.КодВидОпер.Количество();
				ТекКолвоСтрокБлокаРаздел9_2 = Запись.СвПокуп.Количество();
				ТекКолвоСтрокБлокаРаздел9_3 = Запись.РегНомТД.Количество();
				ТекКолвоСтрокБлокаРаздел9_4 = Запись.КодВидТовар.Количество();
				
				ИсхКолвоСтрокБлокаРаздел9_1 = 7;
				ИсхКолвоСтрокБлокаРаздел9_2 = 1;
				ИсхКолвоСтрокБлокаРаздел9_3 = 2;
				ИсхКолвоСтрокБлокаРаздел9_4 = 2;
						
				Если (ТекКолвоСтрокБлокаРаздел9_1 > 0 И ИсхКолвоСтрокБлокаРаздел9_1 > 0)
				 ИЛИ (ТекКолвоСтрокБлокаРаздел9_2 > 0 И ИсхКолвоСтрокБлокаРаздел9_2 > 0)
				 ИЛИ (ТекКолвоСтрокБлокаРаздел9_3 > 0 И ИсхКолвоСтрокБлокаРаздел9_3 > 0)
				 ИЛИ (ТекКолвоСтрокБлокаРаздел9_4 > 0 И ИсхКолвоСтрокБлокаРаздел9_4 > 0) Тогда
					
					ДробноеКолвоЛистовМЧБ = Макс(
					?(ТекКолвоСтрокБлокаРаздел9_1 > ИсхКолвоСтрокБлокаРаздел9_1,
					ТекКолвоСтрокБлокаРаздел9_1 / ИсхКолвоСтрокБлокаРаздел9_1, 1),
					?(ТекКолвоСтрокБлокаРаздел9_2 > ИсхКолвоСтрокБлокаРаздел9_2,
					ТекКолвоСтрокБлокаРаздел9_2 / ИсхКолвоСтрокБлокаРаздел9_2, 1),
					?(ТекКолвоСтрокБлокаРаздел9_3 > ИсхКолвоСтрокБлокаРаздел9_3,
					ТекКолвоСтрокБлокаРаздел9_3 / ИсхКолвоСтрокБлокаРаздел9_3, 1),
					?(ТекКолвоСтрокБлокаРаздел9_4 > ИсхКолвоСтрокБлокаРаздел9_4,
					ТекКолвоСтрокБлокаРаздел9_4 / ИсхКолвоСтрокБлокаРаздел9_4, 1));
					
					ЦелоеКолвоЛистовМЧБ = Цел(ДробноеКолвоЛистовМЧБ);
					
					КолвоЛистовМЧБ = ?(ДробноеКолвоЛистовМЧБ = ЦелоеКолвоЛистовМЧБ, ЦелоеКолвоЛистовМЧБ, ЦелоеКолвоЛистовМЧБ + 1);
					
					СтрокиБлокаРаздел9_1 = Новый Массив(2);
					СтрокиБлокаРаздел9_1.Вставить(0, ИсхКолвоСтрокБлокаРаздел9_1);
					СтрокиБлокаРаздел9_1.Вставить(1, ТекКолвоСтрокБлокаРаздел9_1);
					
					СтрокиБлокаРаздел9_2 = Новый Массив(2);
					СтрокиБлокаРаздел9_2.Вставить(0, ИсхКолвоСтрокБлокаРаздел9_2);
					СтрокиБлокаРаздел9_2.Вставить(1, ТекКолвоСтрокБлокаРаздел9_2);
					
					СтрокиБлокаРаздел9_3 = Новый Массив(2);
					СтрокиБлокаРаздел9_3.Вставить(0, ИсхКолвоСтрокБлокаРаздел9_3);
					СтрокиБлокаРаздел9_3.Вставить(1, ТекКолвоСтрокБлокаРаздел9_3);
					
					СтрокиБлокаРаздел9_4 = Новый Массив(2);
					СтрокиБлокаРаздел9_4.Вставить(0, ИсхКолвоСтрокБлокаРаздел9_4);
					СтрокиБлокаРаздел9_4.Вставить(1, ТекКолвоСтрокБлокаРаздел9_4);
					
					ИменаПоказателей = Новый Структура;
					ИменаПоказателей.Вставить("П000900001003", СтрокиБлокаРаздел9_1);
					ИменаПоказателей.Вставить("П000900010003", СтрокиБлокаРаздел9_2);
					ИменаПоказателей.Вставить("П000900010004", СтрокиБлокаРаздел9_2);
					ИменаПоказателей.Вставить("П000900003503", СтрокиБлокаРаздел9_3);
					ИменаПоказателей.Вставить("П000900003603", СтрокиБлокаРаздел9_4);
					
					СписокЛистовМЧБ = ПечатныеБланки(ИменаПоказателей, КолвоЛистовМЧБ, МакетМЧБ);
					
					Для каждого элЛистМЧБ Из СписокЛистовМЧБ Цикл
						
						ЛистМЧБ = элЛистМЧБ.Значение;
						
						ЛистМЧБ.ПолеСверху = 5;
						ЛистМЧБ.ПолеСправа = 5;
						ЛистМЧБ.ПолеСнизу  = 5;
						ЛистМЧБ.ПолеСлева  = 5;
						
						ДопПараметры = Новый Структура();
						Если Данные.ЭтоПерваяСтраницаРаздела <> Неопределено Тогда
							ДопПараметры.Вставить("ЭтоПерваяСтраницаРаздела", Данные.ЭтоПерваяСтраницаРаздела);
						Иначе
							ДопПараметры.Вставить("ЭтоПерваяСтраницаРаздела",
								Данные.Записи.Индекс(Запись) = 0 И СписокЛистовМЧБ.Индекс(элЛистМЧБ) = 0);
						КонецЕсли;
						ДопПараметры.Вставить("ПостфиксВИмениРаздела", "");
						ДопПараметры.Вставить("ПечатьПустыхБланков", Ложь);
						ДопПараметры.Вставить("ИндексЛистаМЧБ", СписокЛистовМЧБ.Индекс(элЛистМЧБ));
						
						ПоказателиПечатногоБланка = ПоказателиПечатногоБланка(Парам1,
							ЛистМЧБ,
							ОбщиеРеквизитыРазделов,
							Запись, ДопПараметры);
							
						ИндексТочкиПоКорню = ИндексыТочекПоКорню(МакетМЧБ);	
						
						ЗаполнитьМакетМЧБ(ЛистМЧБ, ПоказателиПечатногоБланка, ИндексТочкиПоКорню, Парам1);
																		
						РегламентированнаяОтчетность.ВывестиНаПечатьЛистОбщая(ЭтаФорма.Заголовок,
																			  Парам1,
																			  ЛистМЧБ,
																			  СтруктураРеквизитовФормы.мПечатныеФормы);
												
					КонецЦикла;
					
				Иначе
					
					ДопПараметры = Новый Структура();
					ДопПараметры.Вставить("ЭтоПерваяСтраницаРаздела", Истина);
					ДопПараметры.Вставить("ПостфиксВИмениРаздела", "");
					ДопПараметры.Вставить("ПечатьПустыхБланков", Ложь);
					ДопПараметры.Вставить("ИндексЛистаМЧБ", 0);
					
					ПоказателиПечатногоБланка = ПоказателиПечатногоБланка(Парам1,
						МакетМЧБ,
						ОбщиеРеквизитыРазделов,
						Запись, ДопПараметры);
						
					ИндексТочкиПоКорню = ИндексыТочекПоКорню(МакетМЧБ);	
					
					ЗаполнитьМакетМЧБ(МакетМЧБ, ПоказателиПечатногоБланка, ИндексТочкиПоКорню, Парам1);
															
					РегламентированнаяОтчетность.ВывестиНаПечатьЛистОбщая(ЭтаФорма.Заголовок,
																		  Парам1,
																		  МакетМЧБ,
																		  СтруктураРеквизитовФормы.мПечатныеФормы);
										
				КонецЕсли;
				
				МЧБРаздела = "ПечатныйБланк2019Кв1_Раздел9_Прод1";
				
				МакетМЧБ = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(МЧБРаздела);
				МакетМЧБ.ПолеСверху = 5;
				МакетМЧБ.ПолеСправа = 5;
				МакетМЧБ.ПолеСнизу  = 5;
				МакетМЧБ.ПолеСлева  = 5;
				
				ТекКолвоСтрокБлокаРаздел9_Прод1 = Запись.ДокПдтвОпл.Количество();
				
				ИсхКолвоСтрокБлокаРаздел9_Прод1 = 1;
				
				Если ТекКолвоСтрокБлокаРаздел9_Прод1 > 0 И ИсхКолвоСтрокБлокаРаздел9_Прод1 > 0 Тогда
					
					ДробноеКолвоЛистовМЧБ = ?(ТекКолвоСтрокБлокаРаздел9_Прод1 > ИсхКолвоСтрокБлокаРаздел9_Прод1,
						ТекКолвоСтрокБлокаРаздел9_Прод1 / ИсхКолвоСтрокБлокаРаздел9_Прод1, 1);
					
					ЦелоеКолвоЛистовМЧБ = Цел(ДробноеКолвоЛистовМЧБ);
					
					КолвоЛистовМЧБ = ?(ДробноеКолвоЛистовМЧБ = ЦелоеКолвоЛистовМЧБ, ЦелоеКолвоЛистовМЧБ, ЦелоеКолвоЛистовМЧБ + 1);
					
					СтрокиБлокаРаздел9_Прод1 = Новый Массив(2);
					СтрокиБлокаРаздел9_Прод1.Вставить(0, ИсхКолвоСтрокБлокаРаздел9_Прод1);
					СтрокиБлокаРаздел9_Прод1.Вставить(1, ТекКолвоСтрокБлокаРаздел9_Прод1);
																														
					ИменаПоказателей = Новый Структура;
					ИменаПоказателей.Вставить("П000900012003", СтрокиБлокаРаздел9_Прод1);
					ИменаПоказателей.Вставить("П000900013003", СтрокиБлокаРаздел9_Прод1);
															
					СписокЛистовМЧБ = ПечатныеБланки(ИменаПоказателей, КолвоЛистовМЧБ, МакетМЧБ);
					
					Для каждого элЛистМЧБ Из СписокЛистовМЧБ Цикл
						
						ЛистМЧБ = элЛистМЧБ.Значение;
						
						ЛистМЧБ.ПолеСверху = 5;
						ЛистМЧБ.ПолеСправа = 5;
						ЛистМЧБ.ПолеСнизу  = 5;
						ЛистМЧБ.ПолеСлева  = 5;
						
						ДопПараметры = Новый Структура();
						ДопПараметры.Вставить("ПостфиксВИмениРаздела", "_Прод1");
						ДопПараметры.Вставить("ПечатьПустыхБланков", Ложь);
						ДопПараметры.Вставить("ИндексЛистаМЧБ", СписокЛистовМЧБ.Индекс(элЛистМЧБ));
																		
						ПоказателиПечатногоБланка = ПоказателиПечатногоБланка(Парам1,
							ЛистМЧБ,
							ОбщиеРеквизитыРазделов,
							Запись, ДопПараметры);
							
						ИндексТочкиПоКорню = ИндексыТочекПоКорню(МакетМЧБ);	
						
						ЗаполнитьМакетМЧБ(ЛистМЧБ, ПоказателиПечатногоБланка, ИндексТочкиПоКорню, Парам1);
						
						РегламентированнаяОтчетность.ВывестиНаПечатьЛистОбщая(ЭтаФорма.Заголовок,
																			  Парам1,
																			  ЛистМЧБ,
																			  СтруктураРеквизитовФормы.мПечатныеФормы);
												
					КонецЦикла;
					
				Иначе
					
					ДопПараметры = Новый Структура();
					ДопПараметры.Вставить("ПостфиксВИмениРаздела", "_Прод1");
					ДопПараметры.Вставить("ПечатьПустыхБланков", Ложь);
					ДопПараметры.Вставить("ИндексЛистаМЧБ", 0);
					
					ПоказателиПечатногоБланка = ПоказателиПечатногоБланка(Парам1,
						МакетМЧБ,
						ОбщиеРеквизитыРазделов,
						Запись, ДопПараметры);
						
					ИндексТочкиПоКорню = ИндексыТочекПоКорню(МакетМЧБ);	
					
					ЗаполнитьМакетМЧБ(МакетМЧБ, ПоказателиПечатногоБланка, ИндексТочкиПоКорню, Парам1);
															
					РегламентированнаяОтчетность.ВывестиНаПечатьЛистОбщая(ЭтаФорма.Заголовок,
																		  Парам1,
																		  МакетМЧБ,
																		  СтруктураРеквизитовФормы.мПечатныеФормы);
										
				КонецЕсли;
				
				Если Данные.ЭтоПоследняяСтраницаРаздела <> Неопределено Тогда
					ВыводитьНаПечать_Раздел9_Прод2 = Данные.ЭтоПоследняяСтраницаРаздела;
				Иначе
					ВыводитьНаПечать_Раздел9_Прод2 = (Данные.Записи.Индекс(Запись) = Данные.Записи.Количество() - 1);
				КонецЕсли;
				
				Если ВыводитьНаПечать_Раздел9_Прод2 Тогда
					
					МЧБРаздела = "ПечатныйБланк2019Кв1_Раздел9_Прод2";
					
					МакетМЧБ = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(МЧБРаздела);
					МакетМЧБ.ПолеСверху = 5;
					МакетМЧБ.ПолеСправа = 5;
					МакетМЧБ.ПолеСнизу  = 5;
					МакетМЧБ.ПолеСлева  = 5;
					
					ДопПараметры = Новый Структура();
					ДопПараметры.Вставить("ПостфиксВИмениРаздела", "_Прод2");
					ДопПараметры.Вставить("ПечатьПустыхБланков", Ложь);
					ДопПараметры.Вставить("Итоги", Данные.Итоги);
					
					ПоказателиПечатногоБланка = ПоказателиПечатногоБланка(Парам1,
						МакетМЧБ,
						ОбщиеРеквизитыРазделов,
						Запись, ДопПараметры);
						
					ИндексТочкиПоКорню = ИндексыТочекПоКорню(МакетМЧБ);	
					
					ЗаполнитьМакетМЧБ(МакетМЧБ, ПоказателиПечатногоБланка, ИндексТочкиПоКорню, Парам1);
															
					РегламентированнаяОтчетность.ВывестиНаПечатьЛистОбщая(ЭтаФорма.Заголовок,
																		  Парам1,
																		  МакетМЧБ,
																		  СтруктураРеквизитовФормы.мПечатныеФормы);
										
				КонецЕсли;
				
			Иначе
				
				МЧБРаздела = "ПечатныйБланк2019Кв1_Раздел9";
				
				МакетМЧБ = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(МЧБРаздела);
				МакетМЧБ.ПолеСверху = 5;
				МакетМЧБ.ПолеСправа = 5;
				МакетМЧБ.ПолеСнизу  = 5;
				МакетМЧБ.ПолеСлева  = 5;
				
				ДопПараметры = Новый Структура();
				ДопПараметры.Вставить("ПостфиксВИмениРаздела", "");
				ДопПараметры.Вставить("ПечатьПустыхБланков", Истина);
				
				ПоказателиПечатногоБланка = ПоказателиПечатногоБланка(Парам1,
					МакетМЧБ,
					ОбщиеРеквизитыРазделов,
					, ДопПараметры);
					
				ИндексТочкиПоКорню = ИндексыТочекПоКорню(МакетМЧБ);	
					
				ЗаполнитьМакетМЧБ(МакетМЧБ, ПоказателиПечатногоБланка, ИндексТочкиПоКорню, Парам1);
												
				РегламентированнаяОтчетность.ВывестиНаПечатьЛистОбщая(ЭтаФорма.Заголовок,
																	  Парам1,
																	  МакетМЧБ,
																	  СтруктураРеквизитовФормы.мПечатныеФормы);
								
				МЧБРаздела = "ПечатныйБланк2019Кв1_Раздел9_Прод1";
				
				МакетМЧБ = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(МЧБРаздела);
				МакетМЧБ.ПолеСверху = 5;
				МакетМЧБ.ПолеСправа = 5;
				МакетМЧБ.ПолеСнизу  = 5;
				МакетМЧБ.ПолеСлева  = 5;
				
				ДопПараметры = Новый Структура();
				ДопПараметры.Вставить("ПостфиксВИмениРаздела", "_Прод1");
				ДопПараметры.Вставить("ПечатьПустыхБланков", Истина);
				
				ПоказателиПечатногоБланка = ПоказателиПечатногоБланка(Парам1,
					МакетМЧБ,
					ОбщиеРеквизитыРазделов,
					, ДопПараметры);
					
				ИндексТочкиПоКорню = ИндексыТочекПоКорню(МакетМЧБ);	
					
				ЗаполнитьМакетМЧБ(МакетМЧБ, ПоказателиПечатногоБланка, ИндексТочкиПоКорню, Парам1);
												
				РегламентированнаяОтчетность.ВывестиНаПечатьЛистОбщая(ЭтаФорма.Заголовок,
																	  Парам1,
																	  МакетМЧБ,
																	  СтруктураРеквизитовФормы.мПечатныеФормы);
								
				МЧБРаздела = "ПечатныйБланк2019Кв1_Раздел9_Прод2";
				
				МакетМЧБ = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(МЧБРаздела);
				МакетМЧБ.ПолеСверху = 5;
				МакетМЧБ.ПолеСправа = 5;
				МакетМЧБ.ПолеСнизу  = 5;
				МакетМЧБ.ПолеСлева  = 5;
				
				ДопПараметры = Новый Структура();
				ДопПараметры.Вставить("ПостфиксВИмениРаздела", "_Прод2");
				ДопПараметры.Вставить("ПечатьПустыхБланков", Истина);
				
				ПоказателиПечатногоБланка = ПоказателиПечатногоБланка(Парам1,
					МакетМЧБ,
					ОбщиеРеквизитыРазделов,
					, ДопПараметры);
					
				ИндексТочкиПоКорню = ИндексыТочекПоКорню(МакетМЧБ);	
						
				ЗаполнитьМакетМЧБ(МакетМЧБ, ПоказателиПечатногоБланка, ИндексТочкиПоКорню, Парам1);
												
				РегламентированнаяОтчетность.ВывестиНаПечатьЛистОбщая(ЭтаФорма.Заголовок,
																	  Парам1, 
																	  МакетМЧБ,
																	  СтруктураРеквизитовФормы.мПечатныеФормы);
																	  
				Возврат;
				
			КонецЕсли;
			
		ИначеЕсли Парам1.ИмяСтраницы = "Раздел9_Прил1" Тогда
			
			Если Запись <> "" И НЕ (СтруктураРеквизитовФормы.АктуальностьСведенийРаздел9_Прил1 = 1
				И СтруктураРеквизитовФормы.ВидДокумента <> 0) Тогда
			
				МЧБРаздела = "ПечатныйБланк2019Кв1_Раздел9_Прил1";
				
				МакетМЧБ = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(МЧБРаздела);
				МакетМЧБ.ПолеСверху = 5;
				МакетМЧБ.ПолеСправа = 5;
				МакетМЧБ.ПолеСнизу  = 5;
				МакетМЧБ.ПолеСлева  = 5;
				
				ДопПараметры = Новый Структура();
				Если Данные.ЭтоПерваяСтраницаРаздела <> Неопределено Тогда
					ДопПараметры.Вставить("ЭтоПерваяСтраницаРаздела", Данные.ЭтоПерваяСтраницаРаздела);
				Иначе
					ДопПараметры.Вставить("ЭтоПерваяСтраницаРаздела", Данные.Записи.Индекс(Запись) = 0);
				КонецЕсли;
				ДопПараметры.Вставить("ПостфиксВИмениРаздела", "");
				ДопПараметры.Вставить("ПечатьПустыхБланков", Ложь);
				ДопПараметры.Вставить("Итоги", Данные.Итоги);
				
				ПоказателиПечатногоБланка = ПоказателиПечатногоБланка(Парам1,
					МакетМЧБ,
					ОбщиеРеквизитыРазделов,
					Запись, ДопПараметры);
					
				ИндексТочкиПоКорню = ИндексыТочекПоКорню(МакетМЧБ);	
				
				ЗаполнитьМакетМЧБ(МакетМЧБ, ПоказателиПечатногоБланка, ИндексТочкиПоКорню, Парам1);
												
				РегламентированнаяОтчетность.ВывестиНаПечатьЛистОбщая(ЭтаФорма.Заголовок,
																	  Парам1,
																	  МакетМЧБ,
																	  СтруктураРеквизитовФормы.мПечатныеФормы);
								
				МЧБРаздела = "ПечатныйБланк2019Кв1_Раздел9_Прил1_Прод1";
				
				МакетМЧБ = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(МЧБРаздела);
				МакетМЧБ.ПолеСверху = 5;
				МакетМЧБ.ПолеСправа = 5;
				МакетМЧБ.ПолеСнизу  = 5;
				МакетМЧБ.ПолеСлева  = 5;
				
				ТекКолвоСтрокБлокаРаздел9_Прил1_1 = Запись.КодВидОпер.Количество();
				ТекКолвоСтрокБлокаРаздел9_Прил1_2 = Запись.СвПокуп.Количество();
				ТекКолвоСтрокБлокаРаздел9_Прил1_3 = Запись.РегНомТД.Количество();
				ТекКолвоСтрокБлокаРаздел9_Прил1_4 = Запись.КодВидТовар.Количество();
				
				ИсхКолвоСтрокБлокаРаздел9_Прил1_1 = 7;
				ИсхКолвоСтрокБлокаРаздел9_Прил1_2 = 1;
				ИсхКолвоСтрокБлокаРаздел9_Прил1_3 = 2;
				ИсхКолвоСтрокБлокаРаздел9_Прил1_4 = 2;
				
				Если (ТекКолвоСтрокБлокаРаздел9_Прил1_1 > 0 И ИсхКолвоСтрокБлокаРаздел9_Прил1_1 > 0)
				 ИЛИ (ТекКолвоСтрокБлокаРаздел9_Прил1_2 > 0 И ИсхКолвоСтрокБлокаРаздел9_Прил1_2 > 0)
				 ИЛИ (ТекКолвоСтрокБлокаРаздел9_Прил1_3 > 0 И ИсхКолвоСтрокБлокаРаздел9_Прил1_3 > 0)
				 ИЛИ (ТекКолвоСтрокБлокаРаздел9_Прил1_4 > 0 И ИсхКолвоСтрокБлокаРаздел9_Прил1_4 > 0) Тогда
					
					ДробноеКолвоЛистовМЧБ = Макс(
					?(ТекКолвоСтрокБлокаРаздел9_Прил1_1 > ИсхКолвоСтрокБлокаРаздел9_Прил1_1,
					ТекКолвоСтрокБлокаРаздел9_Прил1_1 / ИсхКолвоСтрокБлокаРаздел9_Прил1_1, 1),
					?(ТекКолвоСтрокБлокаРаздел9_Прил1_2 > ИсхКолвоСтрокБлокаРаздел9_Прил1_2,
					ТекКолвоСтрокБлокаРаздел9_Прил1_2 / ИсхКолвоСтрокБлокаРаздел9_Прил1_2, 1),
					?(ТекКолвоСтрокБлокаРаздел9_Прил1_3 > ИсхКолвоСтрокБлокаРаздел9_Прил1_3,
					ТекКолвоСтрокБлокаРаздел9_Прил1_3 / ИсхКолвоСтрокБлокаРаздел9_Прил1_3, 1),
					?(ТекКолвоСтрокБлокаРаздел9_Прил1_4 > ИсхКолвоСтрокБлокаРаздел9_Прил1_4,
					ТекКолвоСтрокБлокаРаздел9_Прил1_4 / ИсхКолвоСтрокБлокаРаздел9_Прил1_4, 1));
					
					ЦелоеКолвоЛистовМЧБ = Цел(ДробноеКолвоЛистовМЧБ);
					
					КолвоЛистовМЧБ = ?(ДробноеКолвоЛистовМЧБ = ЦелоеКолвоЛистовМЧБ, ЦелоеКолвоЛистовМЧБ, ЦелоеКолвоЛистовМЧБ + 1);
					
					СтрокиБлокаРаздел9_Прил1_1 = Новый Массив(2);
					СтрокиБлокаРаздел9_Прил1_1.Вставить(0, ИсхКолвоСтрокБлокаРаздел9_Прил1_1);
					СтрокиБлокаРаздел9_Прил1_1.Вставить(1, ТекКолвоСтрокБлокаРаздел9_Прил1_1);
					
					СтрокиБлокаРаздел9_Прил1_2 = Новый Массив(2);
					СтрокиБлокаРаздел9_Прил1_2.Вставить(0, ИсхКолвоСтрокБлокаРаздел9_Прил1_2);
					СтрокиБлокаРаздел9_Прил1_2.Вставить(1, ТекКолвоСтрокБлокаРаздел9_Прил1_2);
					
					СтрокиБлокаРаздел9_Прил1_3 = Новый Массив(2);
					СтрокиБлокаРаздел9_Прил1_3.Вставить(0, ИсхКолвоСтрокБлокаРаздел9_Прил1_3);
					СтрокиБлокаРаздел9_Прил1_3.Вставить(1, ТекКолвоСтрокБлокаРаздел9_Прил1_3);
					
					СтрокиБлокаРаздел9_Прил1_4 = Новый Массив(2);
					СтрокиБлокаРаздел9_Прил1_4.Вставить(0, ИсхКолвоСтрокБлокаРаздел9_Прил1_4);
					СтрокиБлокаРаздел9_Прил1_4.Вставить(1, ТекКолвоСтрокБлокаРаздел9_Прил1_4);
					
					ИменаПоказателей = Новый Структура;
					ИменаПоказателей.Вставить("П000910009003", СтрокиБлокаРаздел9_Прил1_1);
					ИменаПоказателей.Вставить("П000910018003", СтрокиБлокаРаздел9_Прил1_2);
					ИменаПоказателей.Вставить("П000910018004", СтрокиБлокаРаздел9_Прил1_2);
					ИменаПоказателей.Вставить("П000910011503", СтрокиБлокаРаздел9_Прил1_3);
					ИменаПоказателей.Вставить("П000910011603", СтрокиБлокаРаздел9_Прил1_4);
					
					СписокЛистовМЧБ = ПечатныеБланки(ИменаПоказателей, КолвоЛистовМЧБ, МакетМЧБ);
					
					Для каждого элЛистМЧБ Из СписокЛистовМЧБ Цикл
						
						ЛистМЧБ = элЛистМЧБ.Значение;
						
						ЛистМЧБ.ПолеСверху = 5;
						ЛистМЧБ.ПолеСправа = 5;
						ЛистМЧБ.ПолеСнизу  = 5;
						ЛистМЧБ.ПолеСлева  = 5;
						
						ДопПараметры = Новый Структура();
						ДопПараметры.Вставить("ПостфиксВИмениРаздела", "_Прод1");
						ДопПараметры.Вставить("ПечатьПустыхБланков", Ложь);
						ДопПараметры.Вставить("ИндексЛистаМЧБ", СписокЛистовМЧБ.Индекс(элЛистМЧБ));
						
						ПоказателиПечатногоБланка = ПоказателиПечатногоБланка(Парам1,
							ЛистМЧБ,
							ОбщиеРеквизитыРазделов,
							Запись, ДопПараметры);
							
						ИндексТочкиПоКорню = ИндексыТочекПоКорню(МакетМЧБ);	
						
						ЗаполнитьМакетМЧБ(ЛистМЧБ, ПоказателиПечатногоБланка, ИндексТочкиПоКорню, Парам1);
																		
						РегламентированнаяОтчетность.ВывестиНаПечатьЛистОбщая(ЭтаФорма.Заголовок,
																			  Парам1,
																			  ЛистМЧБ,
																			  СтруктураРеквизитовФормы.мПечатныеФормы);
												
					КонецЦикла;
					
				Иначе
					
					ДопПараметры = Новый Структура();
					ДопПараметры.Вставить("ПостфиксВИмениРаздела", "_Прод1");
					ДопПараметры.Вставить("ПечатьПустыхБланков", Ложь);
					ДопПараметры.Вставить("ИндексЛистаМЧБ", 0);
					
					ПоказателиПечатногоБланка = ПоказателиПечатногоБланка(Парам1,
						МакетМЧБ,
						ОбщиеРеквизитыРазделов,
						Запись, ДопПараметры);
						
					ИндексТочкиПоКорню = ИндексыТочекПоКорню(МакетМЧБ);	
					
					ЗаполнитьМакетМЧБ(МакетМЧБ, ПоказателиПечатногоБланка, ИндексТочкиПоКорню, Парам1);
															
					РегламентированнаяОтчетность.ВывестиНаПечатьЛистОбщая(ЭтаФорма.Заголовок,
																		  Парам1,
																		  МакетМЧБ,
																		  СтруктураРеквизитовФормы.мПечатныеФормы);
										
				КонецЕсли;
				
				МЧБРаздела = "ПечатныйБланк2019Кв1_Раздел9_Прил1_Прод2";
				
				МакетМЧБ = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(МЧБРаздела);
				МакетМЧБ.ПолеСверху = 5;
				МакетМЧБ.ПолеСправа = 5;
				МакетМЧБ.ПолеСнизу  = 5;
				МакетМЧБ.ПолеСлева  = 5;
				
				ТекКолвоСтрокБлокаРаздел9_Прил1_3 = Запись.ДокПдтвОпл.Количество();
				
				ИсхКолвоСтрокБлокаРаздел9_Прил1_3 = 1;
				
				Если ТекКолвоСтрокБлокаРаздел9_Прил1_3 > 0 И ИсхКолвоСтрокБлокаРаздел9_Прил1_3 > 0 Тогда
					
					ДробноеКолвоЛистовМЧБ = ?(ТекКолвоСтрокБлокаРаздел9_Прил1_3 > ИсхКолвоСтрокБлокаРаздел9_Прил1_3,
						ТекКолвоСтрокБлокаРаздел9_Прил1_3 / ИсхКолвоСтрокБлокаРаздел9_Прил1_3, 1);
					
					ЦелоеКолвоЛистовМЧБ = Цел(ДробноеКолвоЛистовМЧБ);
					
					КолвоЛистовМЧБ = ?(ДробноеКолвоЛистовМЧБ = ЦелоеКолвоЛистовМЧБ, ЦелоеКолвоЛистовМЧБ, ЦелоеКолвоЛистовМЧБ + 1);
					
					СтрокиБлокаРаздел9_Прил1_3 = Новый Массив(2);
					СтрокиБлокаРаздел9_Прил1_3.Вставить(0, ИсхКолвоСтрокБлокаРаздел9_Прил1_3);
					СтрокиБлокаРаздел9_Прил1_3.Вставить(1, ТекКолвоСтрокБлокаРаздел9_Прил1_3);
					
					ИменаПоказателей = Новый Структура;
					ИменаПоказателей.Вставить("П000910020003", СтрокиБлокаРаздел9_Прил1_3);
					ИменаПоказателей.Вставить("П000910021003", СтрокиБлокаРаздел9_Прил1_3);
																				
					СписокЛистовМЧБ = ПечатныеБланки(ИменаПоказателей, КолвоЛистовМЧБ, МакетМЧБ);
										
					Для каждого элЛистМЧБ Из СписокЛистовМЧБ Цикл
						
						ЛистМЧБ = элЛистМЧБ.Значение;
						
						ЛистМЧБ.ПолеСверху = 5;
						ЛистМЧБ.ПолеСправа = 5;
						ЛистМЧБ.ПолеСнизу  = 5;
						ЛистМЧБ.ПолеСлева  = 5;
						
						ДопПараметры = Новый Структура();
						ДопПараметры.Вставить("ПостфиксВИмениРаздела", "_Прод2");
						ДопПараметры.Вставить("ПечатьПустыхБланков", Ложь);
						ДопПараметры.Вставить("ИндексЛистаМЧБ", СписокЛистовМЧБ.Индекс(элЛистМЧБ));
						
						ПоказателиПечатногоБланка = ПоказателиПечатногоБланка(Парам1,
							ЛистМЧБ,
							ОбщиеРеквизитыРазделов,
							Запись, ДопПараметры);
							
						ИндексТочкиПоКорню = ИндексыТочекПоКорню(МакетМЧБ);	
						
						ЗаполнитьМакетМЧБ(ЛистМЧБ, ПоказателиПечатногоБланка, ИндексТочкиПоКорню, Парам1);
																		
						РегламентированнаяОтчетность.ВывестиНаПечатьЛистОбщая(ЭтаФорма.Заголовок,
																			  Парам1,
																			  ЛистМЧБ,
																			  СтруктураРеквизитовФормы.мПечатныеФормы);
												
					КонецЦикла;
					
				Иначе
					
					ДопПараметры = Новый Структура();
					ДопПараметры.Вставить("ПостфиксВИмениРаздела", "_Прод2");
					ДопПараметры.Вставить("ПечатьПустыхБланков", Ложь);
					ДопПараметры.Вставить("ИндексЛистаМЧБ", 0);
					
					ПоказателиПечатногоБланка = ПоказателиПечатногоБланка(Парам1,
						МакетМЧБ,
						ОбщиеРеквизитыРазделов,
						Запись, ДопПараметры);
						
					ИндексТочкиПоКорню = ИндексыТочекПоКорню(МакетМЧБ);	
					
					ЗаполнитьМакетМЧБ(МакетМЧБ, ПоказателиПечатногоБланка, ИндексТочкиПоКорню, Парам1);
															
					РегламентированнаяОтчетность.ВывестиНаПечатьЛистОбщая(ЭтаФорма.Заголовок,
																		  Парам1,
																		  МакетМЧБ,
																		  СтруктураРеквизитовФормы.мПечатныеФормы);
										
				КонецЕсли;
				
				Если Данные.ЭтоПоследняяСтраницаРаздела <> Неопределено Тогда
					ВыводитьНаПечать_Раздел9_Прил1_Прод3 = Данные.ЭтоПоследняяСтраницаРаздела;
				Иначе
					ВыводитьНаПечать_Раздел9_Прил1_Прод3 = (Данные.Записи.Индекс(Запись) = Данные.Записи.Количество() - 1);
				КонецЕсли;
				
				Если ВыводитьНаПечать_Раздел9_Прил1_Прод3 Тогда
					
					МЧБРаздела = "ПечатныйБланк2019Кв1_Раздел9_Прил1_Прод3";
					
					МакетМЧБ = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(МЧБРаздела);
					МакетМЧБ.ПолеСверху = 5;
					МакетМЧБ.ПолеСправа = 5;
					МакетМЧБ.ПолеСнизу  = 5;
					МакетМЧБ.ПолеСлева  = 5;
					
					ДопПараметры = Новый Структура();
					ДопПараметры.Вставить("ПостфиксВИмениРаздела", "_Прод3");
					ДопПараметры.Вставить("ПечатьПустыхБланков", Ложь);
					ДопПараметры.Вставить("Итоги", Данные.Итоги);
					
					ПоказателиПечатногоБланка = ПоказателиПечатногоБланка(Парам1,
						МакетМЧБ,
						ОбщиеРеквизитыРазделов,
						Запись, ДопПараметры);
						
					ИндексТочкиПоКорню = ИндексыТочекПоКорню(МакетМЧБ);	
					
					ЗаполнитьМакетМЧБ(МакетМЧБ, ПоказателиПечатногоБланка, ИндексТочкиПоКорню, Парам1);
															
					РегламентированнаяОтчетность.ВывестиНаПечатьЛистОбщая(ЭтаФорма.Заголовок,
																		  Парам1,
																		  МакетМЧБ, 
																		  СтруктураРеквизитовФормы.мПечатныеФормы);
										
				КонецЕсли;
				
			Иначе
				
				МЧБРаздела = "ПечатныйБланк2019Кв1_Раздел9_Прил1";
				
				МакетМЧБ = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(МЧБРаздела);
				МакетМЧБ.ПолеСверху = 5;
				МакетМЧБ.ПолеСправа = 5;
				МакетМЧБ.ПолеСнизу  = 5;
				МакетМЧБ.ПолеСлева  = 5;
				
				ДопПараметры = Новый Структура();
				ДопПараметры.Вставить("ПостфиксВИмениРаздела", "");
				ДопПараметры.Вставить("ПечатьПустыхБланков", Истина);
				
				ПоказателиПечатногоБланка = ПоказателиПечатногоБланка(Парам1,
					МакетМЧБ,
					ОбщиеРеквизитыРазделов,
					, ДопПараметры);
					
				ИндексТочкиПоКорню = ИндексыТочекПоКорню(МакетМЧБ);	
					
				ЗаполнитьМакетМЧБ(МакетМЧБ, ПоказателиПечатногоБланка, ИндексТочкиПоКорню, Парам1);
												
				РегламентированнаяОтчетность.ВывестиНаПечатьЛистОбщая(ЭтаФорма.Заголовок,
																	  Парам1,
																	  МакетМЧБ,
																	  СтруктураРеквизитовФормы.мПечатныеФормы);
								
				МЧБРаздела = "ПечатныйБланк2019Кв1_Раздел9_Прил1_Прод1";
				
				МакетМЧБ = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(МЧБРаздела);
				МакетМЧБ.ПолеСверху = 5;
				МакетМЧБ.ПолеСправа = 5;
				МакетМЧБ.ПолеСнизу  = 5;
				МакетМЧБ.ПолеСлева  = 5;
				
				ДопПараметры = Новый Структура();
				ДопПараметры.Вставить("ПостфиксВИмениРаздела", "_Прод1");
				ДопПараметры.Вставить("ПечатьПустыхБланков", Истина);
				
				ПоказателиПечатногоБланка = ПоказателиПечатногоБланка(Парам1,
					МакетМЧБ,
					ОбщиеРеквизитыРазделов,
					, ДопПараметры);
					
				ИндексТочкиПоКорню = ИндексыТочекПоКорню(МакетМЧБ);	
					
				ЗаполнитьМакетМЧБ(МакетМЧБ, ПоказателиПечатногоБланка, ИндексТочкиПоКорню, Парам1);
												
				РегламентированнаяОтчетность.ВывестиНаПечатьЛистОбщая(ЭтаФорма.Заголовок,
																	  Парам1,
																	  МакетМЧБ,
																	  СтруктураРеквизитовФормы.мПечатныеФормы);
								
				МЧБРаздела = "ПечатныйБланк2019Кв1_Раздел9_Прил1_Прод2";
				
				МакетМЧБ = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(МЧБРаздела);
				МакетМЧБ.ПолеСверху = 5;
				МакетМЧБ.ПолеСправа = 5;
				МакетМЧБ.ПолеСнизу  = 5;
				МакетМЧБ.ПолеСлева  = 5;
				
				ДопПараметры = Новый Структура();
				ДопПараметры.Вставить("ПостфиксВИмениРаздела", "_Прод2");
				ДопПараметры.Вставить("ПечатьПустыхБланков", Истина);
				
				ПоказателиПечатногоБланка = ПоказателиПечатногоБланка(Парам1,
					МакетМЧБ,
					ОбщиеРеквизитыРазделов,
					, ДопПараметры);
					
				ИндексТочкиПоКорню = ИндексыТочекПоКорню(МакетМЧБ);	
					
				ЗаполнитьМакетМЧБ(МакетМЧБ, ПоказателиПечатногоБланка, ИндексТочкиПоКорню, Парам1);
												
				РегламентированнаяОтчетность.ВывестиНаПечатьЛистОбщая(ЭтаФорма.Заголовок,
																	  Парам1,
																	  МакетМЧБ,
																	  СтруктураРеквизитовФормы.мПечатныеФормы);
								
				МЧБРаздела = "ПечатныйБланк2019Кв1_Раздел9_Прил1_Прод3";
				
				МакетМЧБ = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(МЧБРаздела);
				МакетМЧБ.ПолеСверху = 5;
				МакетМЧБ.ПолеСправа = 5;
				МакетМЧБ.ПолеСнизу  = 5;
				МакетМЧБ.ПолеСлева  = 5;
				
				ДопПараметры = Новый Структура();
				ДопПараметры.Вставить("ПостфиксВИмениРаздела", "_Прод3");
				ДопПараметры.Вставить("ПечатьПустыхБланков", Истина);
				
				ПоказателиПечатногоБланка = ПоказателиПечатногоБланка(Парам1,
					МакетМЧБ,
					ОбщиеРеквизитыРазделов,
					, ДопПараметры);
					
				ИндексТочкиПоКорню = ИндексыТочекПоКорню(МакетМЧБ);	
					
				ЗаполнитьМакетМЧБ(МакетМЧБ, ПоказателиПечатногоБланка, ИндексТочкиПоКорню, Парам1);
												
				РегламентированнаяОтчетность.ВывестиНаПечатьЛистОбщая(ЭтаФорма.Заголовок,
																	  Парам1,
																	  МакетМЧБ,
																	  СтруктураРеквизитовФормы.мПечатныеФормы);
																	  
				Возврат;
				
			КонецЕсли;
			
		ИначеЕсли Парам1.ИмяСтраницы = "Раздел10" Тогда
			
			Если Запись <> "" И НЕ (СтруктураРеквизитовФормы.АктуальностьСведенийРаздел10 = 1
				И СтруктураРеквизитовФормы.ВидДокумента <> 0) Тогда
			
				МЧБРаздела = "ПечатныйБланк2019Кв1_Раздел10";
				
				МакетМЧБ = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(МЧБРаздела);
				МакетМЧБ.ПолеСверху = 5;
				МакетМЧБ.ПолеСправа = 5;
				МакетМЧБ.ПолеСнизу  = 5;
				МакетМЧБ.ПолеСлева  = 5;
				
				ТекКолвоСтрокБлокаРаздел10 = Запись.КодВидОпер.Количество();
				
				ИсхКолвоСтрокБлокаРаздел10 = 7;
				
				Если ТекКолвоСтрокБлокаРаздел10 > 0 И ИсхКолвоСтрокБлокаРаздел10 > 0 Тогда
					
					ДробноеКолвоЛистовМЧБ = ?(ТекКолвоСтрокБлокаРаздел10 > ИсхКолвоСтрокБлокаРаздел10, ТекКолвоСтрокБлокаРаздел10 / ИсхКолвоСтрокБлокаРаздел10, 1);
					
					ЦелоеКолвоЛистовМЧБ = Цел(ДробноеКолвоЛистовМЧБ);
					
					КолвоЛистовМЧБ = ?(ДробноеКолвоЛистовМЧБ = ЦелоеКолвоЛистовМЧБ, ЦелоеКолвоЛистовМЧБ, ЦелоеКолвоЛистовМЧБ + 1);
					
					СтрокиБлокаРаздел10 = Новый Массив(2);
					СтрокиБлокаРаздел10.Вставить(0, ИсхКолвоСтрокБлокаРаздел10);
					СтрокиБлокаРаздел10.Вставить(1, ТекКолвоСтрокБлокаРаздел10);
					
					ИменаПоказателей = Новый Структура;
					ИменаПоказателей.Вставить("П001000002003", СтрокиБлокаРаздел10);
					
					СписокЛистовМЧБ = ПечатныеБланки(ИменаПоказателей, КолвоЛистовМЧБ, МакетМЧБ);
					
					Для каждого элЛистМЧБ Из СписокЛистовМЧБ Цикл
						
						ЛистМЧБ = элЛистМЧБ.Значение;
						
						ЛистМЧБ.ПолеСверху = 5;
						ЛистМЧБ.ПолеСправа = 5;
						ЛистМЧБ.ПолеСнизу  = 5;
						ЛистМЧБ.ПолеСлева  = 5;
						
						ДопПараметры = Новый Структура();
						Если Данные.ЭтоПерваяСтраницаРаздела <> Неопределено Тогда
							ДопПараметры.Вставить("ЭтоПерваяСтраницаРаздела", Данные.ЭтоПерваяСтраницаРаздела);
						Иначе
							ДопПараметры.Вставить("ЭтоПерваяСтраницаРаздела",
								Данные.Записи.Индекс(Запись) = 0 И СписокЛистовМЧБ.Индекс(элЛистМЧБ) = 0);
						КонецЕсли;
						ДопПараметры.Вставить("ПостфиксВИмениРаздела", "");
						ДопПараметры.Вставить("ПечатьПустыхБланков", Ложь);
						ДопПараметры.Вставить("ИндексЛистаМЧБ", СписокЛистовМЧБ.Индекс(элЛистМЧБ));
						
						ПоказателиПечатногоБланка = ПоказателиПечатногоБланка(Парам1,
							ЛистМЧБ,
							ОбщиеРеквизитыРазделов,
							Запись, ДопПараметры);
							
						ИндексТочкиПоКорню = ИндексыТочекПоКорню(МакетМЧБ);	
						
						ЗаполнитьМакетМЧБ(ЛистМЧБ, ПоказателиПечатногоБланка, ИндексТочкиПоКорню, Парам1);
						
						РегламентированнаяОтчетность.ВывестиНаПечатьЛистОбщая(ЭтаФорма.Заголовок,
																			  Парам1,
																			  ЛистМЧБ,
																			  СтруктураРеквизитовФормы.мПечатныеФормы);
						
					КонецЦикла;
					
				Иначе
					
					ДопПараметры = Новый Структура();
					ДопПараметры.Вставить("ЭтоПерваяСтраницаРаздела", Истина);
					ДопПараметры.Вставить("ПостфиксВИмениРаздела", "");
					ДопПараметры.Вставить("ПечатьПустыхБланков", Ложь);
					ДопПараметры.Вставить("ИндексЛистаМЧБ", 0);
					
					ПоказателиПечатногоБланка = ПоказателиПечатногоБланка(Парам1,
						МакетМЧБ,
						ОбщиеРеквизитыРазделов,
						Запись, ДопПараметры);
					
					ИндексТочкиПоКорню = ИндексыТочекПоКорню(МакетМЧБ);
					
					ЗаполнитьМакетМЧБ(МакетМЧБ, ПоказателиПечатногоБланка, ИндексТочкиПоКорню, Парам1);
					
					РегламентированнаяОтчетность.ВывестиНаПечатьЛистОбщая(ЭтаФорма.Заголовок,
																		  Парам1,
																		  МакетМЧБ,
																		  СтруктураРеквизитовФормы.мПечатныеФормы);
					
				КонецЕсли;
				
				Для Каждого Сведения Из Запись.СвСчФОтПрод Цикл
					
					МЧБРаздела = "ПечатныйБланк2019Кв1_Раздел10_Прод";
					
					МакетМЧБ = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(МЧБРаздела);
					МакетМЧБ.ПолеСверху = 5;
					МакетМЧБ.ПолеСправа = 5;
					МакетМЧБ.ПолеСнизу  = 5;
					МакетМЧБ.ПолеСлева  = 5;
					
					ДопПараметры = Новый Структура();
					ДопПараметры.Вставить("ПостфиксВИмениРаздела", "_Прод");
					ДопПараметры.Вставить("ПечатьПустыхБланков", Ложь);
					ДопПараметры.Вставить("Сведения", Сведения);
					
					ПоказателиПечатногоБланка = ПоказателиПечатногоБланка(Парам1,
						МакетМЧБ,
						ОбщиеРеквизитыРазделов,
						Запись, ДопПараметры);
						
					ИндексТочкиПоКорню = ИндексыТочекПоКорню(МакетМЧБ);	
					
					ЗаполнитьМакетМЧБ(МакетМЧБ, ПоказателиПечатногоБланка, ИндексТочкиПоКорню, Парам1);
					
					РегламентированнаяОтчетность.ВывестиНаПечатьЛистОбщая(ЭтаФорма.Заголовок,
																		  Парам1,
																		  МакетМЧБ,
																		  СтруктураРеквизитовФормы.мПечатныеФормы);
					
				КонецЦикла;
				
			Иначе
				
				МЧБРаздела = "ПечатныйБланк2019Кв1_Раздел10";
				
				МакетМЧБ = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(МЧБРаздела);
				МакетМЧБ.ПолеСверху = 5;
				МакетМЧБ.ПолеСправа = 5;
				МакетМЧБ.ПолеСнизу  = 5;
				МакетМЧБ.ПолеСлева  = 5;
				
				ДопПараметры = Новый Структура();
				ДопПараметры.Вставить("ПостфиксВИмениРаздела", "");
				ДопПараметры.Вставить("ПечатьПустыхБланков", Истина);
				
				ПоказателиПечатногоБланка = ПоказателиПечатногоБланка(Парам1,
					МакетМЧБ,
					ОбщиеРеквизитыРазделов,
					, ДопПараметры);
				
				ИндексТочкиПоКорню = ИндексыТочекПоКорню(МакетМЧБ);
				
				ЗаполнитьМакетМЧБ(МакетМЧБ, ПоказателиПечатногоБланка, ИндексТочкиПоКорню, Парам1);
				
				РегламентированнаяОтчетность.ВывестиНаПечатьЛистОбщая(ЭтаФорма.Заголовок,
																	  Парам1,
																	  МакетМЧБ,
																	  СтруктураРеквизитовФормы.мПечатныеФормы);
				
				МЧБРаздела = "ПечатныйБланк2019Кв1_Раздел10_Прод";
				
				МакетМЧБ = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(МЧБРаздела);
				МакетМЧБ.ПолеСверху = 5;
				МакетМЧБ.ПолеСправа = 5;
				МакетМЧБ.ПолеСнизу  = 5;
				МакетМЧБ.ПолеСлева  = 5;
				
				ДопПараметры = Новый Структура();
				ДопПараметры.Вставить("ПостфиксВИмениРаздела", "_Прод");
				ДопПараметры.Вставить("ПечатьПустыхБланков", Истина);
				
				ПоказателиПечатногоБланка = ПоказателиПечатногоБланка(Парам1,
					МакетМЧБ,
					ОбщиеРеквизитыРазделов,
					, ДопПараметры);
				
				ИндексТочкиПоКорню = ИндексыТочекПоКорню(МакетМЧБ);	
				
				ЗаполнитьМакетМЧБ(МакетМЧБ, ПоказателиПечатногоБланка, ИндексТочкиПоКорню, Парам1);
				
				РегламентированнаяОтчетность.ВывестиНаПечатьЛистОбщая(ЭтаФорма.Заголовок,
																	  Парам1,
																	  МакетМЧБ,
																	  СтруктураРеквизитовФормы.мПечатныеФормы);
				
				Возврат;
				
			КонецЕсли;
			
		ИначеЕсли Парам1.ИмяСтраницы = "Раздел11" Тогда
			
			Если Запись <> "" И НЕ (СтруктураРеквизитовФормы.АктуальностьСведенийРаздел11 = 1
				И СтруктураРеквизитовФормы.ВидДокумента <> 0) Тогда
			
				МЧБРаздела = "ПечатныйБланк2019Кв1_Раздел11";
				
				МакетМЧБ = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(МЧБРаздела);
				МакетМЧБ.ПолеСверху = 5;
				МакетМЧБ.ПолеСправа = 5;
				МакетМЧБ.ПолеСнизу  = 5;
				МакетМЧБ.ПолеСлева  = 5;
				
				ТекКолвоСтрокБлокаРаздел11 = Запись.КодВидОпер.Количество();
				
				ИсхКолвоСтрокБлокаРаздел11 = 7;
				
				Если ТекКолвоСтрокБлокаРаздел11 > 0 И ИсхКолвоСтрокБлокаРаздел11 > 0 Тогда
					
					ДробноеКолвоЛистовМЧБ = ?(ТекКолвоСтрокБлокаРаздел11 > ИсхКолвоСтрокБлокаРаздел11, ТекКолвоСтрокБлокаРаздел11 / ИсхКолвоСтрокБлокаРаздел11, 1);
					
					ЦелоеКолвоЛистовМЧБ = Цел(ДробноеКолвоЛистовМЧБ);
					
					КолвоЛистовМЧБ = ?(ДробноеКолвоЛистовМЧБ = ЦелоеКолвоЛистовМЧБ, ЦелоеКолвоЛистовМЧБ, ЦелоеКолвоЛистовМЧБ + 1);
					
					СтрокиБлокаРаздел11 = Новый Массив(2);
					СтрокиБлокаРаздел11.Вставить(0, ИсхКолвоСтрокБлокаРаздел11);
					СтрокиБлокаРаздел11.Вставить(1, ТекКолвоСтрокБлокаРаздел11);
					
					ИменаПоказателей = Новый Структура;
					ИменаПоказателей.Вставить("П001100002003", СтрокиБлокаРаздел11);
					
					СписокЛистовМЧБ = ПечатныеБланки(ИменаПоказателей, КолвоЛистовМЧБ, МакетМЧБ);
					
					Для каждого элЛистМЧБ Из СписокЛистовМЧБ Цикл
						
						ЛистМЧБ = элЛистМЧБ.Значение;
						
						ЛистМЧБ.ПолеСверху = 5;
						ЛистМЧБ.ПолеСправа = 5;
						ЛистМЧБ.ПолеСнизу  = 5;
						ЛистМЧБ.ПолеСлева  = 5;
						
						ДопПараметры = Новый Структура();
						Если Данные.ЭтоПерваяСтраницаРаздела <> Неопределено Тогда
							ДопПараметры.Вставить("ЭтоПерваяСтраницаРаздела", Данные.ЭтоПерваяСтраницаРаздела);
						Иначе
							ДопПараметры.Вставить("ЭтоПерваяСтраницаРаздела",
								Данные.Записи.Индекс(Запись) = 0 И СписокЛистовМЧБ.Индекс(элЛистМЧБ) = 0);
						КонецЕсли;
						ДопПараметры.Вставить("ПостфиксВИмениРаздела", "");
						ДопПараметры.Вставить("ПечатьПустыхБланков", Ложь);
						ДопПараметры.Вставить("ИндексЛистаМЧБ", СписокЛистовМЧБ.Индекс(элЛистМЧБ));
						
						ПоказателиПечатногоБланка = ПоказателиПечатногоБланка(Парам1,
							ЛистМЧБ,
							ОбщиеРеквизитыРазделов,
							Запись, ДопПараметры);
						
						ИндексТочкиПоКорню = ИндексыТочекПоКорню(МакетМЧБ);
						
						ЗаполнитьМакетМЧБ(ЛистМЧБ, ПоказателиПечатногоБланка, ИндексТочкиПоКорню, Парам1);
						
						РегламентированнаяОтчетность.ВывестиНаПечатьЛистОбщая(ЭтаФорма.Заголовок,
																			  Парам1,
																			  ЛистМЧБ,
																			  СтруктураРеквизитовФормы.мПечатныеФормы);
						
					КонецЦикла;
					
				Иначе
					
					ДопПараметры = Новый Структура();
					ДопПараметры.Вставить("ЭтоПерваяСтраницаРаздела", Истина);
					ДопПараметры.Вставить("ПостфиксВИмениРаздела", "");
					ДопПараметры.Вставить("ПечатьПустыхБланков", Ложь);
					ДопПараметры.Вставить("ИндексЛистаМЧБ", 0);
					
					ПоказателиПечатногоБланка = ПоказателиПечатногоБланка(Парам1,
						МакетМЧБ,
						ОбщиеРеквизитыРазделов,
						Запись, ДопПараметры);
						
					ИндексТочкиПоКорню = ИндексыТочекПоКорню(МакетМЧБ);
					
					ЗаполнитьМакетМЧБ(МакетМЧБ, ПоказателиПечатногоБланка, ИндексТочкиПоКорню, Парам1);
					
					РегламентированнаяОтчетность.ВывестиНаПечатьЛистОбщая(ЭтаФорма.Заголовок,
																		  Парам1,
																		  МакетМЧБ,
																		  СтруктураРеквизитовФормы.мПечатныеФормы);
					
				КонецЕсли;
				
				МЧБРаздела = "ПечатныйБланк2019Кв1_Раздел11_Прод";
				
				МакетМЧБ = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(МЧБРаздела);
				МакетМЧБ.ПолеСверху = 5;
				МакетМЧБ.ПолеСправа = 5;
				МакетМЧБ.ПолеСнизу  = 5;
				МакетМЧБ.ПолеСлева  = 5;
				
				ДопПараметры = Новый Структура();
				ДопПараметры.Вставить("ПостфиксВИмениРаздела", "_Прод");
				ДопПараметры.Вставить("ПечатьПустыхБланков", Ложь);
				
				ПоказателиПечатногоБланка = ПоказателиПечатногоБланка(Парам1,
					МакетМЧБ,
					ОбщиеРеквизитыРазделов,
					Запись, ДопПараметры);
				
				ИндексТочкиПоКорню = ИндексыТочекПоКорню(МакетМЧБ);
				
				ЗаполнитьМакетМЧБ(МакетМЧБ, ПоказателиПечатногоБланка, ИндексТочкиПоКорню, Парам1);
				
				РегламентированнаяОтчетность.ВывестиНаПечатьЛистОбщая(ЭтаФорма.Заголовок,
																	  Парам1,
																	  МакетМЧБ,
																	  СтруктураРеквизитовФормы.мПечатныеФормы);
				
			Иначе
				
				МЧБРаздела = "ПечатныйБланк2019Кв1_Раздел11";
				
				МакетМЧБ = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(МЧБРаздела);
				МакетМЧБ.ПолеСверху = 5;
				МакетМЧБ.ПолеСправа = 5;
				МакетМЧБ.ПолеСнизу  = 5;
				МакетМЧБ.ПолеСлева  = 5;
				
				ДопПараметры = Новый Структура();
				ДопПараметры.Вставить("ПостфиксВИмениРаздела", "");
				ДопПараметры.Вставить("ПечатьПустыхБланков", Истина);
				
				ПоказателиПечатногоБланка = ПоказателиПечатногоБланка(Парам1,
					МакетМЧБ,
					ОбщиеРеквизитыРазделов,
					, ДопПараметры);
				
				ИндексТочкиПоКорню = ИндексыТочекПоКорню(МакетМЧБ);
				
				ЗаполнитьМакетМЧБ(МакетМЧБ, ПоказателиПечатногоБланка, ИндексТочкиПоКорню, Парам1);
				
				РегламентированнаяОтчетность.ВывестиНаПечатьЛистОбщая(ЭтаФорма.Заголовок,
																	  Парам1,
																	  МакетМЧБ,
																	  СтруктураРеквизитовФормы.мПечатныеФормы);
				
				МЧБРаздела = "ПечатныйБланк2019Кв1_Раздел11_Прод";
				
				МакетМЧБ = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(МЧБРаздела);
				МакетМЧБ.ПолеСверху = 5;
				МакетМЧБ.ПолеСправа = 5;
				МакетМЧБ.ПолеСнизу  = 5;
				МакетМЧБ.ПолеСлева  = 5;
				
				ДопПараметры = Новый Структура();
				ДопПараметры.Вставить("ПостфиксВИмениРаздела", "_Прод");
				ДопПараметры.Вставить("ПечатьПустыхБланков", Истина);
				
				ПоказателиПечатногоБланка = ПоказателиПечатногоБланка(Парам1,
					МакетМЧБ,
					ОбщиеРеквизитыРазделов,
					, ДопПараметры);
					
				ИндексТочкиПоКорню = ИндексыТочекПоКорню(МакетМЧБ);
				
				ЗаполнитьМакетМЧБ(МакетМЧБ, ПоказателиПечатногоБланка, ИндексТочкиПоКорню, Парам1);
				
				РегламентированнаяОтчетность.ВывестиНаПечатьЛистОбщая(ЭтаФорма.Заголовок,
																	  Парам1,
																	  МакетМЧБ,
																	  СтруктураРеквизитовФормы.мПечатныеФормы);
				
				Возврат;
				
			КонецЕсли;
			
		ИначеЕсли Парам1.ИмяСтраницы = "Раздел12" Тогда
			
			Если Запись <> "" И НЕ (СтруктураРеквизитовФормы.АктуальностьСведенийРаздел12 = 1
				И СтруктураРеквизитовФормы.ВидДокумента <> 0) Тогда
			
				МЧБРаздела = "ПечатныйБланк2019Кв1_Раздел12";
				
				МакетМЧБ = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(МЧБРаздела);
				МакетМЧБ.ПолеСверху = 5;
				МакетМЧБ.ПолеСправа = 5;
				МакетМЧБ.ПолеСнизу  = 5;
				МакетМЧБ.ПолеСлева  = 5;
				
				ДопПараметры = Новый Структура();
				Если Данные.ЭтоПерваяСтраницаРаздела <> Неопределено Тогда
					ДопПараметры.Вставить("ЭтоПерваяСтраницаРаздела", Данные.ЭтоПерваяСтраницаРаздела);
				Иначе
					ДопПараметры.Вставить("ЭтоПерваяСтраницаРаздела", Данные.Записи.Индекс(Запись) = 0);
				КонецЕсли;
				ДопПараметры.Вставить("ПостфиксВИмениРаздела", "");
				ДопПараметры.Вставить("ПечатьПустыхБланков", Ложь);
				
				ПоказателиПечатногоБланка = ПоказателиПечатногоБланка(Парам1,
					МакетМЧБ,
					ОбщиеРеквизитыРазделов,
					Запись, ДопПараметры);
				
				ИндексТочкиПоКорню = ИндексыТочекПоКорню(МакетМЧБ);
				
				ЗаполнитьМакетМЧБ(МакетМЧБ, ПоказателиПечатногоБланка, ИндексТочкиПоКорню, Парам1);
				
				РегламентированнаяОтчетность.ВывестиНаПечатьЛистОбщая(ЭтаФорма.Заголовок,
																	  Парам1,
																	  МакетМЧБ,
																	  СтруктураРеквизитовФормы.мПечатныеФормы);
				
			Иначе
				
				МЧБРаздела = "ПечатныйБланк2019Кв1_Раздел12";
				
				МакетМЧБ = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(МЧБРаздела);
				МакетМЧБ.ПолеСверху = 5;
				МакетМЧБ.ПолеСправа = 5;
				МакетМЧБ.ПолеСнизу  = 5;
				МакетМЧБ.ПолеСлева  = 5;
				
				ДопПараметры = Новый Структура();
				ДопПараметры.Вставить("ПостфиксВИмениРаздела", "");
				ДопПараметры.Вставить("ПечатьПустыхБланков", Истина);
				
				ПоказателиПечатногоБланка = ПоказателиПечатногоБланка(Парам1,
					МакетМЧБ,
					ОбщиеРеквизитыРазделов,
					, ДопПараметры);
				
				ИндексТочкиПоКорню = ИндексыТочекПоКорню(МакетМЧБ);	
				
				ЗаполнитьМакетМЧБ(МакетМЧБ, ПоказателиПечатногоБланка, ИндексТочкиПоКорню, Парам1);
				
				РегламентированнаяОтчетность.ВывестиНаПечатьЛистОбщая(ЭтаФорма.Заголовок,
																	  Парам1,
																	  МакетМЧБ,
																	  СтруктураРеквизитовФормы.мПечатныеФормы);
				
				Возврат;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПечатныеБланки(ИменаПоказателей, КолвоЛистовМЧБ, МакетМЧБ)
	
	ИсходныйМакетМЧБ = МакетМЧБ.ПолучитьОбласть();
	
	СписокЛистовМЧБ = Новый СписокЗначений;
	
	Для Сч = 1 По КолвоЛистовМЧБ Цикл
		
		СписокОчищаемыхОбластей = Новый Массив;
		СписокОбластейПереименования = Новый СписокЗначений;
		
		МакетМЧБ = ИсходныйМакетМЧБ.ПолучитьОбласть();
		
		Для Каждого ИмяПоказателя Из ИменаПоказателей Цикл
			
			ИндексСтрокиПоказателя = 1;
			ИндексЯчейкиПоказателя = 1;
			
			ТекущаяОбласть = МакетМЧБ.Области.Найти(ИмяПоказателя.Ключ + "_"
			+ ИндексСтрокиПоказателя + "_"
			+ ИндексЯчейкиПоказателя);
			
			Пока НЕ ТекущаяОбласть = Неопределено Цикл
				
				ТекКолвоСтрокБлока = ИмяПоказателя.Значение[1];
				
				Если (ИмяПоказателя.Значение[0] * (Сч - 1) + ИндексСтрокиПоказателя)
				   > ТекКолвоСтрокБлока Тогда
					
					СписокОчищаемыхОбластей.Добавить(ТекущаяОбласть);
					
				Иначе
					
					СписокОбластейПереименования.Добавить(ТекущаяОбласть, ИмяПоказателя.Ключ + "_" +
						(ИмяПоказателя.Значение[0] * (Сч - 1) + ИндексСтрокиПоказателя)
							+ "_" + ИндексЯчейкиПоказателя);
					
				КонецЕсли;
				
				ИндексЯчейкиПоказателя = ИндексЯчейкиПоказателя + 1;
				
				ТекущаяОбласть = МакетМЧБ.Области.Найти(ИмяПоказателя.Ключ + "_"
				+ ИндексСтрокиПоказателя + "_"
				+ ИндексЯчейкиПоказателя);
				
				Если ТекущаяОбласть = Неопределено Тогда
					
					ИндексСтрокиПоказателя = ИндексСтрокиПоказателя + 1;
					ИндексЯчейкиПоказателя = 1;
					
					ТекущаяОбласть = МакетМЧБ.Области.Найти(ИмяПоказателя.Ключ + "_"
					+ ИндексСтрокиПоказателя + "_"
					+ ИндексЯчейкиПоказателя);
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
		Для Каждого ОбластьСписка Из СписокОчищаемыхОбластей Цикл
			
			ОбластьСписка.Имя = "";
			ОбластьСписка.Текст = ?(СокрЛП(ОбластьСписка.Текст) = ".", ".", "-");
			
		КонецЦикла;
		
		Для Каждого ЭлСпискаОбластей Из СписокОбластейПереименования Цикл
			
			ЭлСпискаОбластей.Значение.Имя = ЭлСпискаОбластей.Представление;
			
		КонецЦикла;
		
		СписокЛистовМЧБ.Добавить(МакетМЧБ.ПолучитьОбласть());
		
	КонецЦикла;
	
	Возврат СписокЛистовМЧБ;
	
КонецФункции

&НаСервере
Функция ДанныеРазделаНДСДляПечати(ИмяРаздела)
	
	ДанныеРаздела = Неопределено;
	
	Секции = СписокСекцийРазделаИзРегистра(ИмяРаздела);
	
	Если Секции.Количество() > 0 Тогда
		ДанныеРаздела = Новый Структура();
		ДанныеРаздела.Вставить("СтрокиРаздела", Секции.ВыгрузитьКолонку("НомерПервойСтроки"));
		ДанныеРаздела.Вставить("Итоги", РегламентированнаяОтчетность.ИтогиРазделаДекларацииНДС(
		СтруктураРеквизитовФормы.мСохраненныйДок, ИмяРаздела));
	КонецЕсли;
	
	Возврат ДанныеРаздела;
	
КонецФункции

&НаСервере
Функция ДанныеДляПечатиПустыхМЧБРазделов8_12()
	
	Записи = Новый Массив;
	Записи.Вставить(0, "");
	
	Данные = Новый Структура;
	Данные.Вставить("Записи", Записи);
	
	Возврат Данные;
	
КонецФункции

&НаСервере
Процедура ВывестиНаПечатьДополнительныеСтраницы(СтруктураПараметровСтраницы, ОбщиеРеквизитыРазделов)
	
	Перем ИмяСтраницы;
	Перем ТаблицаСтраницРаздела;
	
	СтруктураПараметровСтраницы.Свойство("ИмяСтраницыПанели", ИмяСтраницы);
	
	Если Не мСтруктураМногостраничныхРазделов.Свойство(ИмяСтраницы, ТаблицаСтраницРаздела) Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаСтраницРаздела = ЭтаФорма[ТаблицаСтраницРаздела];
	
	МассивПризнаковАктивности = Новый Массив;
	Для Каждого Страница Из ТаблицаСтраницРаздела Цикл
		ТекущийИндекс = ТаблицаСтраницРаздела.Индекс(Страница);
		МассивПризнаковАктивности.Добавить(ТаблицаСтраницРаздела[ТекущийИндекс].АктивнаяСтраница);
	КонецЦикла;
	
	Для Каждого Страница Из ТаблицаСтраницРаздела Цикл
		ТекущийИндекс = ТаблицаСтраницРаздела.Индекс(Страница);
		ВывестиМакетВТаблДокНаСервере(ИмяСтраницы, ТекущийИндекс + 1);
		ВывестиНаПечатьЛист(СтруктураПараметровСтраницы, ОбщиеРеквизитыРазделов, , ТекущийИндекс + 1);
	КонецЦикла;
	
	Для Каждого Страница Из ТаблицаСтраницРаздела Цикл
		ТекущийИндекс = ТаблицаСтраницРаздела.Индекс(Страница);
		ТаблицаСтраницРаздела[ТекущийИндекс].АктивнаяСтраница = МассивПризнаковАктивности[ТекущийИндекс];
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоказателиРазделов8_12(Показатели, ИмяРаздела, ДанныеРазделов8_12, ДопПараметры)
	
	Если ИмяРаздела + ДопПараметры.ПостфиксВИмениРаздела = "Раздел8" Тогда
		
		Если НЕ ДопПараметры.ПечатьПустыхБланков Тогда
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000800000103";
			Если ДопПараметры.ЭтоПерваяСтраницаРаздела Тогда
				Если СтруктураРеквизитовФормы.ВидДокумента = 1 Тогда
					Если СтруктураРеквизитовФормы.АктуальностьСведенийРаздел8 = 1 Тогда
						НовСтр.Значение = "1";
					Иначе
						НовСтр.Значение = "0";
					КонецЕсли;
				Иначе
					НовСтр.Значение = "-";
				КонецЕсли;
			Иначе
				НовСтр.Значение = "-";
			КонецЕсли;
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000800000503";
			НовСтр.Значение = ?(ДопПараметры.ИндексЛистаМЧБ = 0, ДанныеРазделов8_12.НомерПор, 0);
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=12;ЧДЦ=0;ЧН=-;ЧГ=");
			
			НачНомСтрКодВидОпер = ДопПараметры.ИндексЛистаМЧБ * 7 + 1;
			Для НомСтрКодВидОпер = НачНомСтрКодВидОпер По НачНомСтрКодВидОпер + 6 Цикл
				НовСтр = Показатели.Добавить();
				НовСтр.Имя = "П000800001003_" + Формат(НомСтрКодВидОпер, "ЧГ=");
				ИндексВМассиве = НомСтрКодВидОпер - 1;
				Если ИндексВМассиве + 1 <= ДанныеРазделов8_12.КодВидОпер.Количество() Тогда
					НовСтр.Значение = СокрЛП(ДанныеРазделов8_12.КодВидОпер[ИндексВМассиве]);
				Иначе
					НовСтр.Значение = "";
				КонецЕсли;
				НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			КонецЦикла;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000800002003";
			НовСтр.Значение = ?(ДопПараметры.ИндексЛистаМЧБ = 0, СокрЛП(ДанныеРазделов8_12.НомСчФПрод), "");
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000800003003";
			НовСтр.Значение = ?(ДопПараметры.ИндексЛистаМЧБ = 0, СтрЗаменить(СокрЛП(ДанныеРазделов8_12.ДатаСчФПрод), ".", ""), "");
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000800004003";
			НовСтр.Значение = ?(ДопПараметры.ИндексЛистаМЧБ = 0, ДанныеРазделов8_12.НомИспрСчФ, 0);
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=3;ЧДЦ=0;ЧН=-;ЧГ=");
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000800005003";
			НовСтр.Значение = ?(ДопПараметры.ИндексЛистаМЧБ = 0, СтрЗаменить(СокрЛП(ДанныеРазделов8_12.ДатаИспрСчФ), ".", ""), "");
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000800006003";
			НовСтр.Значение = ?(ДопПараметры.ИндексЛистаМЧБ = 0, СокрЛП(ДанныеРазделов8_12.НомКСчФПрод), "");
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000800007003";
			НовСтр.Значение = ?(ДопПараметры.ИндексЛистаМЧБ = 0, СтрЗаменить(СокрЛП(ДанныеРазделов8_12.ДатаКСчФПрод), ".", ""), "");
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000800008003";
			НовСтр.Значение = ?(ДопПараметры.ИндексЛистаМЧБ = 0, ДанныеРазделов8_12.НомИспрКСчФ, 0);
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=3;ЧДЦ=0;ЧН=-;ЧГ=");
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000800009003";
			НовСтр.Значение = ?(ДопПараметры.ИндексЛистаМЧБ = 0, СтрЗаменить(СокрЛП(ДанныеРазделов8_12.ДатаИспрКСчФ), ".", ""), "");
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000800010003_" + Формат(ДопПараметры.ИндексЛистаМЧБ + 1, "ЧГ=");
			ИндексВМассиве = ДопПараметры.ИндексЛистаМЧБ;
			Если ИндексВМассиве + 1 <= ДанныеРазделов8_12.ДокПдтвУпл.Количество() Тогда
				НовСтр.Значение = СокрЛП(ДанныеРазделов8_12.ДокПдтвУпл[ИндексВМассиве].НомДокПдтвУпл);
			Иначе
				НовСтр.Значение = "";
			КонецЕсли;
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000800011003_" + Формат(ДопПараметры.ИндексЛистаМЧБ + 1, "ЧГ=");
			ИндексВМассиве = ДопПараметры.ИндексЛистаМЧБ;
			Если ИндексВМассиве + 1 <= ДанныеРазделов8_12.ДокПдтвУпл.Количество() Тогда
				НовСтр.Значение = СтрЗаменить(СокрЛП(ДанныеРазделов8_12.ДокПдтвУпл[ИндексВМассиве].ДатаДокПдтвУпл), ".", "");
			Иначе
				НовСтр.Значение = "";
			КонецЕсли;
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000800012003_" + Формат(ДопПараметры.ИндексЛистаМЧБ + 1, "ЧГ=");
			ИндексВМассиве = ДопПараметры.ИндексЛистаМЧБ;
			Если ИндексВМассиве + 1 <= ДанныеРазделов8_12.ДатаУчТов.Количество() Тогда
				НовСтр.Значение = СтрЗаменить(СокрЛП(ДанныеРазделов8_12.ДатаУчТов[ИндексВМассиве]), ".", "");
			Иначе
				НовСтр.Значение = "";
			КонецЕсли;
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
		Иначе
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000800000103";
			Если СтруктураРеквизитовФормы.ВидДокумента = 1 Тогда
				Если СтруктураРеквизитовФормы.АктуальностьСведенийРаздел8 = 1 Тогда
					НовСтр.Значение = "1";
				Иначе
					НовСтр.Значение = "0";
				КонецЕсли;
			Иначе
				НовСтр.Значение = "-";
			КонецЕсли;
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000800000503";
			НовСтр.Значение = 0;
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=12;ЧДЦ=0;ЧН=-;ЧГ=");
			
			Для НомСтрКод = 1 По 7 Цикл
				НовСтр = Показатели.Добавить();
				НовСтр.Имя = "П000800001003_" + НомСтрКод;
				НовСтр.Значение = "";
				НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			КонецЦикла;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000800002003";
			НовСтр.Значение = "";
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000800003003";
			НовСтр.Значение = "";
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000800004003";
			НовСтр.Значение = 0;
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=3;ЧДЦ=0;ЧН=-;ЧГ=");
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000800005003";
			НовСтр.Значение = "";
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000800006003";
			НовСтр.Значение = "";
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000800007003";
			НовСтр.Значение = "";
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000800008003";
			НовСтр.Значение = 0;
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=3;ЧДЦ=0;ЧН=-;ЧГ=");
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000800009003";
			НовСтр.Значение = "";
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000800010003_1";
			НовСтр.Значение = "";
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000800011003_1";
			НовСтр.Значение = "";
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000800012003_1";
			НовСтр.Значение = "";
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
		КонецЕсли;
		
	ИначеЕсли ИмяРаздела + ДопПараметры.ПостфиксВИмениРаздела = "Раздел8_Прод" Тогда
		
		Если НЕ ДопПараметры.ПечатьПустыхБланков Тогда
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000800013003_" + Формат(ДопПараметры.ИндексЛистаМЧБ + 1, "ЧГ=");
			ИндексВМассиве = ДопПараметры.ИндексЛистаМЧБ;
			Если ИндексВМассиве + 1 <= ДанныеРазделов8_12.СвПрод.Количество() Тогда
				Если ТипЗнЧ(ДанныеРазделов8_12.СвПрод[ИндексВМассиве]) = Тип("Структура") Тогда
					Если ДанныеРазделов8_12.СвПрод[ИндексВМассиве].Свойство("ИННЮЛ") Тогда
						НовСтр.Значение = СокрЛП(ДанныеРазделов8_12.СвПрод[ИндексВМассиве].ИННЮЛ) + "--";
					ИначеЕсли ДанныеРазделов8_12.СвПрод[ИндексВМассиве].Свойство("ИННФЛ") Тогда
						НовСтр.Значение = СокрЛП(ДанныеРазделов8_12.СвПрод[ИндексВМассиве].ИННФЛ);
					Иначе
						НовСтр.Значение = "";
					КонецЕсли;
				Иначе
					НовСтр.Значение = "";
				КонецЕсли;
			Иначе
				НовСтр.Значение = "";
			КонецЕсли;
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000800013004_" + Формат(ДопПараметры.ИндексЛистаМЧБ + 1, "ЧГ=");
			ИндексВМассиве = ДопПараметры.ИндексЛистаМЧБ;
			Если ИндексВМассиве + 1 <= ДанныеРазделов8_12.СвПрод.Количество() Тогда
				Если ТипЗнЧ(ДанныеРазделов8_12.СвПрод[ИндексВМассиве]) = Тип("Структура") Тогда
					Если ДанныеРазделов8_12.СвПрод[ИндексВМассиве].Свойство("КПП") Тогда
						НовСтр.Значение = СокрЛП(ДанныеРазделов8_12.СвПрод[ИндексВМассиве].КПП);
					Иначе
						НовСтр.Значение = "";
					КонецЕсли;
				Иначе
					НовСтр.Значение = "";
				КонецЕсли;
			Иначе
				НовСтр.Значение = "";
			КонецЕсли;
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000800014003";
			Если ТипЗнЧ(ДанныеРазделов8_12.СвПос) = Тип("Структура") Тогда
				Если ДанныеРазделов8_12.СвПос.Свойство("ИННЮЛ") Тогда
					НовСтр.Значение = ?(ДопПараметры.ИндексЛистаМЧБ = 0, СокрЛП(ДанныеРазделов8_12.СвПос.ИННЮЛ) + "--", "");
				ИначеЕсли ДанныеРазделов8_12.СвПос.Свойство("ИННФЛ") Тогда
					НовСтр.Значение = ?(ДопПараметры.ИндексЛистаМЧБ = 0, СокрЛП(ДанныеРазделов8_12.СвПос.ИННФЛ), "");
				Иначе
					НовСтр.Значение = "";
				КонецЕсли;
			Иначе
				НовСтр.Значение = "";
			КонецЕсли;
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000800014004";
			Если ТипЗнЧ(ДанныеРазделов8_12.СвПос) = Тип("Структура") Тогда
				Если ДанныеРазделов8_12.СвПос.Свойство("КПП") Тогда
					НовСтр.Значение = ?(ДопПараметры.ИндексЛистаМЧБ = 0, СокрЛП(ДанныеРазделов8_12.СвПос.КПП), "");
				Иначе
					НовСтр.Значение = "";
				КонецЕсли;
			Иначе
				НовСтр.Значение = "";
			КонецЕсли;
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НачНомСтрРегНомТД = ДопПараметры.ИндексЛистаМЧБ * 9 + 1;
			Для НомСтрРегНомТД = НачНомСтрРегНомТД По НачНомСтрРегНомТД + 8 Цикл
				НовСтр = Показатели.Добавить();
				НовСтр.Имя = "П000800015003_" + Формат(НомСтрРегНомТД, "ЧГ=");
				ИндексВМассиве = НомСтрРегНомТД - 1;
				Если ИндексВМассиве + 1 <= ДанныеРазделов8_12.РегНомТД.Количество() Тогда
					НовСтр.Значение = СокрЛП(ДанныеРазделов8_12.РегНомТД[ИндексВМассиве]);
				Иначе
					НовСтр.Значение = "";
				КонецЕсли;
				НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			КонецЦикла;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000800016003";
			НовСтр.Значение = ?(ДопПараметры.ИндексЛистаМЧБ = 0, СокрЛП(ДанныеРазделов8_12.ОКВ), "");
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000800017003";
			НовСтр.Значение = ?(ТипЗнч(ДанныеРазделов8_12.СтоимПокупВ) = Тип("Число"), ДанныеРазделов8_12.СтоимПокупВ, 0);
			НовСтр.Значение = ?(ДопПараметры.ИндексЛистаМЧБ = 0, НовСтр.Значение, 0);
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=19;ЧДЦ=2;ЧН=-;ЧРД=.;ЧГ=");
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000800018003";
			НовСтр.Значение = ?(ТипЗнч(ДанныеРазделов8_12.СумНДСВыч) = Тип("Число"), ДанныеРазделов8_12.СумНДСВыч, 0);
			НовСтр.Значение = ?(ДопПараметры.ИндексЛистаМЧБ = 0, НовСтр.Значение, 0);
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=19;ЧДЦ=2;ЧН=-;ЧРД=.;ЧГ=");
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000800019003";
			Если ДопПараметры.ЭтоПоследняяСтраницаРаздела Тогда
				НовСтр.Значение = ?(ТипЗнч(ДопПараметры.Итоги.СумНДСВсКПк) = Тип("Число"), ДопПараметры.Итоги.СумНДСВсКПк, 0);
			Иначе
				НовСтр.Значение = 0;
			КонецЕсли;
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=19;ЧДЦ=2;ЧН=-;ЧРД=.;ЧГ=");
			
		Иначе
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000800013003_1";
			НовСтр.Значение = "";
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000800013004_1";
			НовСтр.Значение = "";
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000800014003";
			НовСтр.Значение = "";
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000800014004";
			НовСтр.Значение = "";
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			Для НомСтрРегНомТД = 1 По 9 Цикл
				НовСтр = Показатели.Добавить();
				НовСтр.Имя = "П000800015003_" + НомСтрРегНомТД;
				НовСтр.Значение = "";
				НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			КонецЦикла;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000800016003";
			НовСтр.Значение = "";
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000800017003";
			НовСтр.Значение = 0;
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=19;ЧДЦ=2;ЧН=-;ЧРД=.;ЧГ=");
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000800018003";
			НовСтр.Значение = 0;
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=19;ЧДЦ=2;ЧН=-;ЧРД=.;ЧГ=");
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000800019003";
			НовСтр.Значение = 0;
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=19;ЧДЦ=2;ЧН=-;ЧРД=.;ЧГ=");
			
		КонецЕсли;
		
	ИначеЕсли ИмяРаздела + ДопПараметры.ПостфиксВИмениРаздела = "Раздел8_Прил1" Тогда
		
		Если НЕ ДопПараметры.ПечатьПустыхБланков Тогда
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000810000103";
			Если ДопПараметры.ЭтоПерваяСтраницаРаздела Тогда
				Если СтруктураРеквизитовФормы.ВидДокумента = 1 Тогда
					Если СтруктураРеквизитовФормы.АктуальностьСведенийРаздел8_Прил1 = 1 Тогда
						НовСтр.Значение = "1";
					Иначе
						НовСтр.Значение = "0";
					КонецЕсли;
				Иначе
					НовСтр.Значение = "-";
				КонецЕсли;
			Иначе
				НовСтр.Значение = "-";
			КонецЕсли;
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000810000503";
			Если ДопПараметры.ЭтоПерваяСтраницаРаздела Тогда
				НовСтр.Значение = ?(ТипЗнч(ДопПараметры.Итоги.СумНДСИтКПк) = Тип("Число"), ДопПараметры.Итоги.СумНДСИтКПк, 0);
			Иначе
				НовСтр.Значение = 0;
			КонецЕсли;
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=19;ЧДЦ=2;ЧН=-;ЧРД=.;ЧГ=");
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000810000803";
			НовСтр.Значение = ?(ДопПараметры.ИндексЛистаМЧБ = 0, ДанныеРазделов8_12.НомерПор, 0);
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=12;ЧДЦ=0;ЧН=-;ЧГ=");
			
			НачНомСтрКодВидОпер = ДопПараметры.ИндексЛистаМЧБ * 7 + 1;
			Для НомСтрКодВидОпер = НачНомСтрКодВидОпер По НачНомСтрКодВидОпер + 6 Цикл
				НовСтр = Показатели.Добавить();
				НовСтр.Имя = "П000810001003_" + Формат(НомСтрКодВидОпер, "ЧГ=");
				ИндексВМассиве = НомСтрКодВидОпер - 1;
				Если ИндексВМассиве + 1 <= ДанныеРазделов8_12.КодВидОпер.Количество() Тогда
					НовСтр.Значение = СокрЛП(ДанныеРазделов8_12.КодВидОпер[ИндексВМассиве]);
				Иначе
					НовСтр.Значение = "";
				КонецЕсли;
				НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			КонецЦикла;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000810002003";
			НовСтр.Значение = ?(ДопПараметры.ИндексЛистаМЧБ = 0, СокрЛП(ДанныеРазделов8_12.НомСчФПрод), "");
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000810003003";
			НовСтр.Значение = ?(ДопПараметры.ИндексЛистаМЧБ = 0, СтрЗаменить(СокрЛП(ДанныеРазделов8_12.ДатаСчФПрод), ".", ""), "");
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000810004003";
			НовСтр.Значение = ?(ДопПараметры.ИндексЛистаМЧБ = 0, ДанныеРазделов8_12.НомИспрСчФ, 0);
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=3;ЧДЦ=0;ЧН=-;ЧГ=");
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000810005003";
			НовСтр.Значение = ?(ДопПараметры.ИндексЛистаМЧБ = 0, СтрЗаменить(СокрЛП(ДанныеРазделов8_12.ДатаИспрСчФ), ".", ""), "");
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000810006003";
			НовСтр.Значение = ?(ДопПараметры.ИндексЛистаМЧБ = 0, СокрЛП(ДанныеРазделов8_12.НомКСчФПрод), "");
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000810007003";
			НовСтр.Значение = ?(ДопПараметры.ИндексЛистаМЧБ = 0, СтрЗаменить(СокрЛП(ДанныеРазделов8_12.ДатаКСчФПрод), ".", ""), "");
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000810008003";
			НовСтр.Значение = ?(ДопПараметры.ИндексЛистаМЧБ = 0, ДанныеРазделов8_12.НомИспрКСчФ, 0);
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=3;ЧДЦ=0;ЧН=-;ЧГ=");
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000810009003";
			НовСтр.Значение = ?(ДопПараметры.ИндексЛистаМЧБ = 0, СтрЗаменить(СокрЛП(ДанныеРазделов8_12.ДатаИспрКСчФ), ".", ""), "");
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000810010003_" + Формат(ДопПараметры.ИндексЛистаМЧБ + 1, "ЧГ=");
			ИндексВМассиве = ДопПараметры.ИндексЛистаМЧБ;
			Если ИндексВМассиве + 1 <= ДанныеРазделов8_12.ДокПдтвУпл.Количество() Тогда
				НовСтр.Значение = СокрЛП(ДанныеРазделов8_12.ДокПдтвУпл[ИндексВМассиве].НомДокПдтвУпл);
			Иначе
				НовСтр.Значение = "";
			КонецЕсли;
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000810011003_" + Формат(ДопПараметры.ИндексЛистаМЧБ + 1, "ЧГ=");
			ИндексВМассиве = ДопПараметры.ИндексЛистаМЧБ;
			Если ИндексВМассиве + 1 <= ДанныеРазделов8_12.ДокПдтвУпл.Количество() Тогда
				НовСтр.Значение = СтрЗаменить(СокрЛП(ДанныеРазделов8_12.ДокПдтвУпл[ИндексВМассиве].ДатаДокПдтвУпл), ".", "");
			Иначе
				НовСтр.Значение = "";
			КонецЕсли;
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000810012003_" + Формат(ДопПараметры.ИндексЛистаМЧБ + 1, "ЧГ=");
			ИндексВМассиве = ДопПараметры.ИндексЛистаМЧБ;
			Если ИндексВМассиве + 1 <= ДанныеРазделов8_12.ДатаУчТов.Количество() Тогда
				НовСтр.Значение = СтрЗаменить(СокрЛП(ДанныеРазделов8_12.ДатаУчТов[ИндексВМассиве]), ".", "");
			Иначе
				НовСтр.Значение = "";
			КонецЕсли;
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
		Иначе
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000810000103";
			Если СтруктураРеквизитовФормы.ВидДокумента = 1 Тогда
				Если СтруктураРеквизитовФормы.АктуальностьСведенийРаздел8_Прил1 = 1 Тогда
					НовСтр.Значение = "1";
				Иначе
					НовСтр.Значение = "0";
				КонецЕсли;
			Иначе
				НовСтр.Значение = "-";
			КонецЕсли;
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000810000503";
			НовСтр.Значение = 0;
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=19;ЧДЦ=2;ЧН=-;ЧРД=.;ЧГ=");
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000810000803";
			НовСтр.Значение = 0;
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=12;ЧДЦ=0;ЧН=-;ЧГ=");
			
			Для НомСтрКод = 1 По 7 Цикл
				НовСтр = Показатели.Добавить();
				НовСтр.Имя = "П000810001003_" + НомСтрКод;
				НовСтр.Значение = "";
				НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			КонецЦикла;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000810002003";
			НовСтр.Значение = "";
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000810003003";
			НовСтр.Значение = "";
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000810004003";
			НовСтр.Значение = 0;
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=3;ЧДЦ=0;ЧН=-;ЧГ=");
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000810005003";
			НовСтр.Значение = "";
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000810006003";
			НовСтр.Значение = "";
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000810007003";
			НовСтр.Значение = "";
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000810008003";
			НовСтр.Значение = 0;
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=3;ЧДЦ=0;ЧН=-;ЧГ=");
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000810009003";
			НовСтр.Значение = "";
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000810010003_1";
			НовСтр.Значение = "";
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000810011003_1";
			НовСтр.Значение = "";
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000810012003_1";
			НовСтр.Значение = "";
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
		Конецесли;
		
	ИначеЕсли ИмяРаздела + ДопПараметры.ПостфиксВИмениРаздела = "Раздел8_Прил1_Прод" Тогда
		
		Если НЕ ДопПараметры.ПечатьПустыхБланков Тогда
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000810013003_" + Формат(ДопПараметры.ИндексЛистаМЧБ + 1, "ЧГ=");
			ИндексВМассиве = ДопПараметры.ИндексЛистаМЧБ;
			Если ИндексВМассиве + 1 <= ДанныеРазделов8_12.СвПрод.Количество() Тогда
				Если ТипЗнЧ(ДанныеРазделов8_12.СвПрод[ИндексВМассиве]) = Тип("Структура") Тогда
					Если ДанныеРазделов8_12.СвПрод[ИндексВМассиве].Свойство("ИННЮЛ") Тогда
						НовСтр.Значение = СокрЛП(ДанныеРазделов8_12.СвПрод[ИндексВМассиве].ИННЮЛ) + "--";
					ИначеЕсли ДанныеРазделов8_12.СвПрод[ИндексВМассиве].Свойство("ИННФЛ") Тогда
						НовСтр.Значение = СокрЛП(ДанныеРазделов8_12.СвПрод[ИндексВМассиве].ИННФЛ);
					Иначе
						НовСтр.Значение = "";
					КонецЕсли;
				Иначе
					НовСтр.Значение = "";
				КонецЕсли;
			Иначе
				НовСтр.Значение = "";
			КонецЕсли;
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000810013004_" + Формат(ДопПараметры.ИндексЛистаМЧБ + 1, "ЧГ=");
			ИндексВМассиве = ДопПараметры.ИндексЛистаМЧБ;
			Если ИндексВМассиве + 1 <= ДанныеРазделов8_12.СвПрод.Количество() Тогда
				Если ТипЗнЧ(ДанныеРазделов8_12.СвПрод[ИндексВМассиве]) = Тип("Структура") Тогда
					Если ДанныеРазделов8_12.СвПрод[ИндексВМассиве].Свойство("КПП") Тогда
						НовСтр.Значение = СокрЛП(ДанныеРазделов8_12.СвПрод[ИндексВМассиве].КПП);
					Иначе
						НовСтр.Значение = "";
					КонецЕсли;
				Иначе
					НовСтр.Значение = "";
				КонецЕсли;
			Иначе
				НовСтр.Значение = "";
			КонецЕсли;
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000810014003";
			Если ТипЗнЧ(ДанныеРазделов8_12.СвПос) = Тип("Структура") Тогда
				Если ДанныеРазделов8_12.СвПос.Свойство("ИННЮЛ") Тогда
					НовСтр.Значение = ?(ДопПараметры.ИндексЛистаМЧБ = 0, СокрЛП(ДанныеРазделов8_12.СвПос.ИННЮЛ) + "--", "");
				ИначеЕсли ДанныеРазделов8_12.СвПос.Свойство("ИННФЛ") Тогда
					НовСтр.Значение = ?(ДопПараметры.ИндексЛистаМЧБ = 0, СокрЛП(ДанныеРазделов8_12.СвПос.ИННФЛ), "");
				Иначе
					НовСтр.Значение = "";
				КонецЕсли;
			Иначе
				НовСтр.Значение = "";
			КонецЕсли;
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000810014004";
			Если ТипЗнЧ(ДанныеРазделов8_12.СвПос) = Тип("Структура") Тогда
				Если ДанныеРазделов8_12.СвПос.Свойство("КПП") Тогда
					НовСтр.Значение = ?(ДопПараметры.ИндексЛистаМЧБ = 0, СокрЛП(ДанныеРазделов8_12.СвПос.КПП), "");
				Иначе
					НовСтр.Значение = "";
				КонецЕсли;
			Иначе
				НовСтр.Значение = "";
			КонецЕсли;
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НачНомСтрРегНомТД = ДопПараметры.ИндексЛистаМЧБ * 9 + 1;
			Для НомСтрРегНомТД = НачНомСтрРегНомТД По НачНомСтрРегНомТД + 8 Цикл
				НовСтр = Показатели.Добавить();
				НовСтр.Имя = "П000810015003_" + Формат(НомСтрРегНомТД, "ЧГ=");
				ИндексВМассиве = НомСтрРегНомТД - 1;
				Если ИндексВМассиве + 1 <= ДанныеРазделов8_12.РегНомТД.Количество() Тогда
					НовСтр.Значение = СокрЛП(ДанныеРазделов8_12.РегНомТД[ИндексВМассиве]);
				Иначе
					НовСтр.Значение = "";
				КонецЕсли;
				НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			КонецЦикла;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000810016003";
			НовСтр.Значение = ?(ДопПараметры.ИндексЛистаМЧБ = 0, СокрЛП(ДанныеРазделов8_12.ОКВ), "");
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000810017003";
			НовСтр.Значение = ?(ТипЗнч(ДанныеРазделов8_12.СтоимПокупВ) = Тип("Число"), ДанныеРазделов8_12.СтоимПокупВ, 0);
			НовСтр.Значение = ?(ДопПараметры.ИндексЛистаМЧБ = 0, НовСтр.Значение, 0);
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=19;ЧДЦ=2;ЧН=-;ЧРД=.;ЧГ=");
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000810018003";
			НовСтр.Значение = ?(ТипЗнч(ДанныеРазделов8_12.СумНДС) = Тип("Число"), ДанныеРазделов8_12.СумНДС, 0);
			НовСтр.Значение = ?(ДопПараметры.ИндексЛистаМЧБ = 0, НовСтр.Значение, 0);
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=19;ЧДЦ=2;ЧН=-;ЧРД=.;ЧГ=");
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000810019003";
			Если ДопПараметры.ЭтоПоследняяСтраницаРаздела Тогда
				НовСтр.Значение = ?(ТипЗнч(ДопПараметры.Итоги.СумНДСИтП1Р8) = Тип("Число"), ДопПараметры.Итоги.СумНДСИтП1Р8, 0);
			Иначе
				НовСтр.Значение = 0;
			КонецЕсли;
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=19;ЧДЦ=2;ЧН=-;ЧРД=.;ЧГ=");
			
		Иначе
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000810013003_1";
			НовСтр.Значение = "";
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000810013004_1";
			НовСтр.Значение = "";
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000810014003";
			НовСтр.Значение = "";
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000810014004";
			НовСтр.Значение = "";
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			Для НомСтрРегНомТД = 1 По 9 Цикл
				НовСтр = Показатели.Добавить();
				НовСтр.Имя = "П000810015003_" + НомСтрРегНомТД;
				НовСтр.Значение = "";
				НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			КонецЦикла;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000810016003";
			НовСтр.Значение = "";
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000810017003";
			НовСтр.Значение = 0;
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=19;ЧДЦ=2;ЧН=-;ЧРД=.;ЧГ=");
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000810018003";
			НовСтр.Значение = 0;
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=19;ЧДЦ=2;ЧН=-;ЧРД=.;ЧГ=");
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000810019003";
			НовСтр.Значение = 0;
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=19;ЧДЦ=2;ЧН=-;ЧРД=.;ЧГ=");
			
		КонецЕсли;
		
	ИначеЕсли ИмяРаздела + ДопПараметры.ПостфиксВИмениРаздела = "Раздел9" Тогда
		
		Если НЕ ДопПараметры.ПечатьПустыхБланков Тогда
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000900000103";
			Если ДопПараметры.ЭтоПерваяСтраницаРаздела Тогда
				Если СтруктураРеквизитовФормы.ВидДокумента = 1 Тогда
					Если СтруктураРеквизитовФормы.АктуальностьСведенийРаздел9 = 1 Тогда
						НовСтр.Значение = "1";
					Иначе
						НовСтр.Значение = "0";
					КонецЕсли;
				Иначе
					НовСтр.Значение = "-";
				КонецЕсли;
			Иначе
				НовСтр.Значение = "-";
			КонецЕсли;
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000900000503";
			НовСтр.Значение = ?(ДопПараметры.ИндексЛистаМЧБ = 0, ДанныеРазделов8_12.НомерПор, 0);
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=12;ЧДЦ=0;ЧН=-;ЧГ=");
			
			НачНомСтрКодВидОпер = ДопПараметры.ИндексЛистаМЧБ * 7 + 1;
			Для НомСтрКодВидОпер = НачНомСтрКодВидОпер По НачНомСтрКодВидОпер + 6 Цикл
				НовСтр = Показатели.Добавить();
				НовСтр.Имя = "П000900001003_" + Формат(НомСтрКодВидОпер, "ЧГ=");
				ИндексВМассиве = НомСтрКодВидОпер - 1;
				Если ИндексВМассиве + 1 <= ДанныеРазделов8_12.КодВидОпер.Количество() Тогда
					НовСтр.Значение = СокрЛП(ДанныеРазделов8_12.КодВидОпер[ИндексВМассиве]);
				Иначе
					НовСтр.Значение = "";
				КонецЕсли;
				НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			КонецЦикла;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000900002003";
			НовСтр.Значение = ?(ДопПараметры.ИндексЛистаМЧБ = 0, СокрЛП(ДанныеРазделов8_12.НомСчФПрод), "");
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000900003003";
			НовСтр.Значение = ?(ДопПараметры.ИндексЛистаМЧБ = 0, СтрЗаменить(СокрЛП(ДанныеРазделов8_12.ДатаСчФПрод), ".", ""), "");
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НачНомСтрРегНомТД = ДопПараметры.ИндексЛистаМЧБ * 2 + 1;
			Для НомСтрРегНомТД = НачНомСтрРегНомТД По НачНомСтрРегНомТД + 1 Цикл
				НовСтр = Показатели.Добавить();
				НовСтр.Имя = "П000900003503_" + Формат(НомСтрРегНомТД, "ЧГ=");
				ИндексВМассиве = НомСтрРегНомТД - 1;
				Если ИндексВМассиве + 1 <= ДанныеРазделов8_12.РегНомТД.Количество() Тогда
					НовСтр.Значение = СокрЛП(ДанныеРазделов8_12.РегНомТД[ИндексВМассиве]);
				Иначе
					НовСтр.Значение = "";
				КонецЕсли;
				НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			КонецЦикла;
			
			НачНомСтрКодВидТовар = ДопПараметры.ИндексЛистаМЧБ * 2 + 1;
			Для НомСтрКодВидТовар = НачНомСтрКодВидТовар По НачНомСтрКодВидТовар + 1 Цикл
				НовСтр = Показатели.Добавить();
				НовСтр.Имя = "П000900003603_" + Формат(НомСтрКодВидТовар, "ЧГ=");
				ИндексВМассиве = НомСтрКодВидТовар - 1;
				Если ИндексВМассиве + 1 <= ДанныеРазделов8_12.КодВидТовар.Количество() Тогда
					НовСтр.Значение = СокрЛП(ДанныеРазделов8_12.КодВидТовар[ИндексВМассиве]);
				Иначе
					НовСтр.Значение = "";
				КонецЕсли;
				НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			КонецЦикла;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000900004003";
			НовСтр.Значение = ?(ДопПараметры.ИндексЛистаМЧБ = 0, ДанныеРазделов8_12.НомИспрСчФ, 0);
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=3;ЧДЦ=0;ЧН=-;ЧГ=");
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000900005003";
			НовСтр.Значение = ?(ДопПараметры.ИндексЛистаМЧБ = 0, СтрЗаменить(СокрЛП(ДанныеРазделов8_12.ДатаИспрСчФ), ".", ""), "");
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000900006003";
			НовСтр.Значение = ?(ДопПараметры.ИндексЛистаМЧБ = 0, СокрЛП(ДанныеРазделов8_12.НомКСчФПрод), "");
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000900007003";
			НовСтр.Значение = ?(ДопПараметры.ИндексЛистаМЧБ = 0, СтрЗаменить(СокрЛП(ДанныеРазделов8_12.ДатаКСчФПрод), ".", ""), "");
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000900008003";
			НовСтр.Значение = ?(ДопПараметры.ИндексЛистаМЧБ = 0, ДанныеРазделов8_12.НомИспрКСчФ, 0);
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=3;ЧДЦ=0;ЧН=-;ЧГ=");
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000900009003";
			НовСтр.Значение = ?(ДопПараметры.ИндексЛистаМЧБ = 0, СтрЗаменить(СокрЛП(ДанныеРазделов8_12.ДатаИспрКСчФ), ".", ""), "");
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000900010003_" + Формат(ДопПараметры.ИндексЛистаМЧБ + 1, "ЧГ=");
			ИндексВМассиве = ДопПараметры.ИндексЛистаМЧБ;
			Если ИндексВМассиве + 1 <= ДанныеРазделов8_12.СвПокуп.Количество() Тогда
				Если ТипЗнЧ(ДанныеРазделов8_12.СвПокуп[ИндексВМассиве]) = Тип("Структура") Тогда
					Если ДанныеРазделов8_12.СвПокуп[ИндексВМассиве].Свойство("ИННЮЛ") Тогда
						НовСтр.Значение = СокрЛП(ДанныеРазделов8_12.СвПокуп[ИндексВМассиве].ИННЮЛ) + "--";
					ИначеЕсли ДанныеРазделов8_12.СвПокуп[ИндексВМассиве].Свойство("ИННФЛ") Тогда
						НовСтр.Значение = СокрЛП(ДанныеРазделов8_12.СвПокуп[ИндексВМассиве].ИННФЛ);
					Иначе
						НовСтр.Значение = "";
					КонецЕсли;
				Иначе
					НовСтр.Значение = "";
				КонецЕсли;
			Иначе
				НовСтр.Значение = "";
			КонецЕсли;
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000900010004_" + Формат(ДопПараметры.ИндексЛистаМЧБ + 1, "ЧГ=");
			ИндексВМассиве = ДопПараметры.ИндексЛистаМЧБ;
			Если ИндексВМассиве + 1 <= ДанныеРазделов8_12.СвПокуп.Количество() Тогда
				Если ТипЗнЧ(ДанныеРазделов8_12.СвПокуп[ИндексВМассиве]) = Тип("Структура") Тогда
					Если ДанныеРазделов8_12.СвПокуп[ИндексВМассиве].Свойство("КПП") Тогда
						НовСтр.Значение = СокрЛП(ДанныеРазделов8_12.СвПокуп[ИндексВМассиве].КПП);
					Иначе
						НовСтр.Значение = "";
					КонецЕсли;
				Иначе
					НовСтр.Значение = "";
				КонецЕсли;
			Иначе
				НовСтр.Значение = "";
			КонецЕсли;
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
		Иначе
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000900000103";
				Если СтруктураРеквизитовФормы.ВидДокумента = 1 Тогда
					Если СтруктураРеквизитовФормы.АктуальностьСведенийРаздел9 = 1 Тогда
						НовСтр.Значение = "1";
					Иначе
						НовСтр.Значение = "0";
					КонецЕсли;
				Иначе
					НовСтр.Значение = "-";
				КонецЕсли;
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000900000503";
			НовСтр.Значение = 0;
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=12;ЧДЦ=0;ЧН=-;ЧГ=");
			
			Для НомСтрКод = 1 По 7 Цикл
				НовСтр = Показатели.Добавить();
				НовСтр.Имя = "П000900001003_" + НомСтрКод;
				НовСтр.Значение = "";
				НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			КонецЦикла;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000900002003";
			НовСтр.Значение = "";
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000900003003";
			НовСтр.Значение = "";
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			Для НомСтрКод = 1 По 2 Цикл
				НовСтр = Показатели.Добавить();
				НовСтр.Имя = "П000900003503_" + НомСтрКод;
				НовСтр.Значение = "";
				НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			КонецЦикла;
			
			Для НомСтрКод = 1 По 2 Цикл
				НовСтр = Показатели.Добавить();
				НовСтр.Имя = "П000900003603_" + НомСтрКод;
				НовСтр.Значение = "";
				НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			КонецЦикла;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000900004003";
			НовСтр.Значение = 0;
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=3;ЧДЦ=0;ЧН=-;ЧГ=");
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000900005003";
			НовСтр.Значение = "";
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000900006003";
			НовСтр.Значение = "";
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000900007003";
			НовСтр.Значение = "";
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000900008003";
			НовСтр.Значение = 0;
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=3;ЧДЦ=0;ЧН=-;ЧГ=");
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000900009003";
			НовСтр.Значение = "";
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000900010003_1";
			НовСтр.Значение = "";
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000900010004_1";
			НовСтр.Значение = "";
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
		КонецЕсли;
		
	ИначеЕсли ИмяРаздела + ДопПараметры.ПостфиксВИмениРаздела = "Раздел9_Прод1" Тогда
		
		Если НЕ ДопПараметры.ПечатьПустыхБланков Тогда
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000900011003";
			Если ТипЗнЧ(ДанныеРазделов8_12.СвПос) = Тип("Структура") Тогда
				Если ДанныеРазделов8_12.СвПос.Свойство("ИННЮЛ") Тогда
					НовСтр.Значение = ?(ДопПараметры.ИндексЛистаМЧБ = 0, СокрЛП(ДанныеРазделов8_12.СвПос.ИННЮЛ) + "--", "");
				ИначеЕсли ДанныеРазделов8_12.СвПос.Свойство("ИННФЛ") Тогда
					НовСтр.Значение = ?(ДопПараметры.ИндексЛистаМЧБ = 0, СокрЛП(ДанныеРазделов8_12.СвПос.ИННФЛ), "");
				Иначе
					НовСтр.Значение = "";
				КонецЕсли;
			Иначе
				НовСтр.Значение = "";
			КонецЕсли;
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000900011004";
			Если ТипЗнЧ(ДанныеРазделов8_12.СвПос) = Тип("Структура") Тогда
				Если ДанныеРазделов8_12.СвПос.Свойство("КПП") Тогда
					НовСтр.Значение = ?(ДопПараметры.ИндексЛистаМЧБ = 0, СокрЛП(ДанныеРазделов8_12.СвПос.КПП), "");
				Иначе
					НовСтр.Значение = "";
				КонецЕсли;
			Иначе
				НовСтр.Значение = "";
			КонецЕсли;
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000900012003_" + Формат(ДопПараметры.ИндексЛистаМЧБ + 1, "ЧГ=");
			ИндексВМассиве = ДопПараметры.ИндексЛистаМЧБ;
			Если ИндексВМассиве + 1 <= ДанныеРазделов8_12.ДокПдтвОпл.Количество() Тогда
				НовСтр.Значение = СокрЛП(ДанныеРазделов8_12.ДокПдтвОпл[ИндексВМассиве].НомДокПдтвОпл);
			Иначе
				НовСтр.Значение = "";
			КонецЕсли;
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000900013003_" + Формат(ДопПараметры.ИндексЛистаМЧБ + 1, "ЧГ=");
			ИндексВМассиве = ДопПараметры.ИндексЛистаМЧБ;
			Если ИндексВМассиве + 1 <= ДанныеРазделов8_12.ДокПдтвОпл.Количество() Тогда
				НовСтр.Значение = СтрЗаменить(СокрЛП(ДанныеРазделов8_12.ДокПдтвОпл[ИндексВМассиве].ДатаДокПдтвОпл), ".", "");
			Иначе
				НовСтр.Значение = "";
			КонецЕсли;
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000900014003";
			НовСтр.Значение = ?(ДопПараметры.ИндексЛистаМЧБ = 0, СокрЛП(ДанныеРазделов8_12.ОКВ), "");
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000900015003";
			НовСтр.Значение = ?(ТипЗнч(ДанныеРазделов8_12.СтоимПродСФВ) = Тип("Число"), ДанныеРазделов8_12.СтоимПродСФВ, 0);
			НовСтр.Значение = ?(ДопПараметры.ИндексЛистаМЧБ = 0, НовСтр.Значение, 0);
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=19;ЧДЦ=2;ЧН=-;ЧРД=.;ЧГ=");
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000900016003";
			НовСтр.Значение = ?(ТипЗнч(ДанныеРазделов8_12.СтоимПродСФ) = Тип("Число"), ДанныеРазделов8_12.СтоимПродСФ, 0);
			НовСтр.Значение = ?(ДопПараметры.ИндексЛистаМЧБ = 0, НовСтр.Значение, 0);
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=19;ЧДЦ=2;ЧН=-;ЧРД=.;ЧГ=");
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000900017003";
			НовСтр.Значение = ?(ТипЗнч(ДанныеРазделов8_12.СтоимПродСФ20) = Тип("Число"), ДанныеРазделов8_12.СтоимПродСФ20, 0);
			НовСтр.Значение = ?(ДопПараметры.ИндексЛистаМЧБ = 0, НовСтр.Значение, 0);
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=19;ЧДЦ=2;ЧН=-;ЧРД=.;ЧГ=");
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000900017503";
			НовСтр.Значение = ?(ТипЗнч(ДанныеРазделов8_12.СтоимПродСФ18) = Тип("Число"), ДанныеРазделов8_12.СтоимПродСФ18, 0);
			НовСтр.Значение = ?(ДопПараметры.ИндексЛистаМЧБ = 0, НовСтр.Значение, 0);
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=19;ЧДЦ=2;ЧН=-;ЧРД=.;ЧГ=");
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000900018003";
			НовСтр.Значение = ?(ТипЗнч(ДанныеРазделов8_12.СтоимПродСФ10) = Тип("Число"), ДанныеРазделов8_12.СтоимПродСФ10, 0);
			НовСтр.Значение = ?(ДопПараметры.ИндексЛистаМЧБ = 0, НовСтр.Значение, 0);
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=19;ЧДЦ=2;ЧН=-;ЧРД=.;ЧГ=");
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000900019003";
			НовСтр.Значение = ?(ТипЗнч(ДанныеРазделов8_12.СтоимПродСФ0) = Тип("Число"), ДанныеРазделов8_12.СтоимПродСФ0, 0);
			НовСтр.Значение = ?(ДопПараметры.ИндексЛистаМЧБ = 0, НовСтр.Значение, 0);
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=19;ЧДЦ=2;ЧН=-;ЧРД=.;ЧГ=");
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000900020003";
			НовСтр.Значение = ?(ТипЗнч(ДанныеРазделов8_12.СумНДССФ20) = Тип("Число"), ДанныеРазделов8_12.СумНДССФ20, 0);
			НовСтр.Значение = ?(ДопПараметры.ИндексЛистаМЧБ = 0, НовСтр.Значение, 0);
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=19;ЧДЦ=2;ЧН=-;ЧРД=.;ЧГ=");
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000900020503";
			НовСтр.Значение = ?(ТипЗнч(ДанныеРазделов8_12.СумНДССФ18) = Тип("Число"), ДанныеРазделов8_12.СумНДССФ18, 0);
			НовСтр.Значение = ?(ДопПараметры.ИндексЛистаМЧБ = 0, НовСтр.Значение, 0);
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=19;ЧДЦ=2;ЧН=-;ЧРД=.;ЧГ=");
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000900021003";
			НовСтр.Значение = ?(ТипЗнч(ДанныеРазделов8_12.СумНДССФ10) = Тип("Число"), ДанныеРазделов8_12.СумНДССФ10, 0);
			НовСтр.Значение = ?(ДопПараметры.ИндексЛистаМЧБ = 0, НовСтр.Значение, 0);
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=19;ЧДЦ=2;ЧН=-;ЧРД=.;ЧГ=");
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000900022003";
			НовСтр.Значение = ?(ТипЗнч(ДанныеРазделов8_12.СтоимПродОсв) = Тип("Число"), ДанныеРазделов8_12.СтоимПродОсв, 0);
			НовСтр.Значение = ?(ДопПараметры.ИндексЛистаМЧБ = 0, НовСтр.Значение, 0);
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=19;ЧДЦ=2;ЧН=-;ЧРД=.;ЧГ=");
			
		Иначе
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000900011003";
			НовСтр.Значение = "";
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000900011004";
			НовСтр.Значение = "";
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000900012003_1";
			НовСтр.Значение = "";
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000900013003_1";
			НовСтр.Значение = "";
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000900014003";
			НовСтр.Значение = "";
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000900015003";
			НовСтр.Значение = 0;
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=19;ЧДЦ=2;ЧН=-;ЧРД=.;ЧГ=");
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000900016003";
			НовСтр.Значение = 0;
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=19;ЧДЦ=2;ЧН=-;ЧРД=.;ЧГ=");
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000900017003";
			НовСтр.Значение = 0;
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=19;ЧДЦ=2;ЧН=-;ЧРД=.;ЧГ=");
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000900017503";
			НовСтр.Значение = 0;
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=19;ЧДЦ=2;ЧН=-;ЧРД=.;ЧГ=");
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000900018003";
			НовСтр.Значение = 0;
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=19;ЧДЦ=2;ЧН=-;ЧРД=.;ЧГ=");
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000900019003";
			НовСтр.Значение = 0;
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=19;ЧДЦ=2;ЧН=-;ЧРД=.;ЧГ=");
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000900020003";
			НовСтр.Значение = 0;
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=19;ЧДЦ=2;ЧН=-;ЧРД=.;ЧГ=");
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000900020503";
			НовСтр.Значение = 0;
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=19;ЧДЦ=2;ЧН=-;ЧРД=.;ЧГ=");
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000900021003";
			НовСтр.Значение = 0;
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=19;ЧДЦ=2;ЧН=-;ЧРД=.;ЧГ=");
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000900022003";
			НовСтр.Значение = 0;
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=19;ЧДЦ=2;ЧН=-;ЧРД=.;ЧГ=");
			
		КонецЕсли;
		
	ИначеЕсли ИмяРаздела + ДопПараметры.ПостфиксВИмениРаздела = "Раздел9_Прод2" Тогда
		
		Если НЕ ДопПараметры.ПечатьПустыхБланков Тогда
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000900023003";
			НовСтр.Значение = ?(ТипЗнч(ДопПараметры.Итоги.СтПродБезНДС20) = Тип("Число"), ДопПараметры.Итоги.СтПродБезНДС20, 0);
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=19;ЧДЦ=2;ЧН=-;ЧРД=.;ЧГ=");
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000900023503";
			НовСтр.Значение = ?(ТипЗнч(ДопПараметры.Итоги.СтПродБезНДС18) = Тип("Число"), ДопПараметры.Итоги.СтПродБезНДС18, 0);
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=19;ЧДЦ=2;ЧН=-;ЧРД=.;ЧГ=");
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000900024003";
			НовСтр.Значение = ?(ТипЗнч(ДопПараметры.Итоги.СтПродБезНДС10) = Тип("Число"), ДопПараметры.Итоги.СтПродБезНДС10, 0);
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=19;ЧДЦ=2;ЧН=-;ЧРД=.;ЧГ=");
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000900025003";
			НовСтр.Значение = ?(ТипЗнч(ДопПараметры.Итоги.СтПродБезНДС0) = Тип("Число"), ДопПараметры.Итоги.СтПродБезНДС0, 0);
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=19;ЧДЦ=2;ЧН=-;ЧРД=.;ЧГ=");
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000900026003";
			НовСтр.Значение = ?(ТипЗнч(ДопПараметры.Итоги.СумНДСВсКПр20) = Тип("Число"), ДопПараметры.Итоги.СумНДСВсКПр20, 0);
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=19;ЧДЦ=2;ЧН=-;ЧРД=.;ЧГ=");
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000900026503";
			НовСтр.Значение = ?(ТипЗнч(ДопПараметры.Итоги.СумНДСВсКПр18) = Тип("Число"), ДопПараметры.Итоги.СумНДСВсКПр18, 0);
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=19;ЧДЦ=2;ЧН=-;ЧРД=.;ЧГ=");
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000900027003";
			НовСтр.Значение = ?(ТипЗнч(ДопПараметры.Итоги.СумНДСВсКПр10) = Тип("Число"), ДопПараметры.Итоги.СумНДСВсКПр10, 0);
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=19;ЧДЦ=2;ЧН=-;ЧРД=.;ЧГ=");
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000900028003";
			НовСтр.Значение = ?(ТипЗнч(ДопПараметры.Итоги.СтПродОсвВсКПр) = Тип("Число"), ДопПараметры.Итоги.СтПродОсвВсКПр, 0);
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=19;ЧДЦ=2;ЧН=-;ЧРД=.;ЧГ=");
			
		Иначе
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000900023003";
			НовСтр.Значение = 0;
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=19;ЧДЦ=2;ЧН=-;ЧРД=.;ЧГ=");
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000900023503";
			НовСтр.Значение = 0;
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=19;ЧДЦ=2;ЧН=-;ЧРД=.;ЧГ=");
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000900024003";
			НовСтр.Значение = 0;
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=19;ЧДЦ=2;ЧН=-;ЧРД=.;ЧГ=");
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000900025003";
			НовСтр.Значение = 0;
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=19;ЧДЦ=2;ЧН=-;ЧРД=.;ЧГ=");
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000900026003";
			НовСтр.Значение = 0;
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=19;ЧДЦ=2;ЧН=-;ЧРД=.;ЧГ=");
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000900026503";
			НовСтр.Значение = 0;
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=19;ЧДЦ=2;ЧН=-;ЧРД=.;ЧГ=");
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000900027003";
			НовСтр.Значение = 0;
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=19;ЧДЦ=2;ЧН=-;ЧРД=.;ЧГ=");
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000900028003";
			НовСтр.Значение = 0;
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=19;ЧДЦ=2;ЧН=-;ЧРД=.;ЧГ=");
			
		КонецЕсли;
		
	ИначеЕсли ИмяРаздела + ДопПараметры.ПостфиксВИмениРаздела = "Раздел9_Прил1" Тогда
		
		Если НЕ ДопПараметры.ПечатьПустыхБланков Тогда
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000910000103";
			Если ДопПараметры.ЭтоПерваяСтраницаРаздела Тогда
				Если СтруктураРеквизитовФормы.ВидДокумента = 1 Тогда
					Если СтруктураРеквизитовФормы.АктуальностьСведенийРаздел9_Прил1 = 1 Тогда
						НовСтр.Значение = "1";
					Иначе
						НовСтр.Значение = "0";
					КонецЕсли;
				Иначе
					НовСтр.Значение = "-";
				КонецЕсли;
			Иначе
				НовСтр.Значение = "-";
			КонецЕсли;
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000910002003";
			НовСтр.Значение = ?(ТипЗнч(ДопПараметры.Итоги.ИтСтПродКПр20) = Тип("Число"), ДопПараметры.Итоги.ИтСтПродКПр20, 0);
			НовСтр.Значение = ?(ДопПараметры.ЭтоПерваяСтраницаРаздела, НовСтр.Значение, 0);
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=19;ЧДЦ=2;ЧН=-;ЧРД=.;ЧГ=");
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000910002503";
			НовСтр.Значение = ?(ТипЗнч(ДопПараметры.Итоги.ИтСтПродКПр18) = Тип("Число"), ДопПараметры.Итоги.ИтСтПродКПр18, 0);
			НовСтр.Значение = ?(ДопПараметры.ЭтоПерваяСтраницаРаздела, НовСтр.Значение, 0);
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=19;ЧДЦ=2;ЧН=-;ЧРД=.;ЧГ=");
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000910003003";
			НовСтр.Значение = ?(ТипЗнч(ДопПараметры.Итоги.ИтСтПродКПр10) = Тип("Число"), ДопПараметры.Итоги.ИтСтПродКПр10, 0);
			НовСтр.Значение = ?(ДопПараметры.ЭтоПерваяСтраницаРаздела, НовСтр.Значение, 0);
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=19;ЧДЦ=2;ЧН=-;ЧРД=.;ЧГ=");
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000910004003";
			НовСтр.Значение = ?(ТипЗнч(ДопПараметры.Итоги.ИтСтПродКПр0) = Тип("Число"), ДопПараметры.Итоги.ИтСтПродКПр0, 0);
			НовСтр.Значение = ?(ДопПараметры.ЭтоПерваяСтраницаРаздела, НовСтр.Значение, 0);
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=19;ЧДЦ=2;ЧН=-;ЧРД=.;ЧГ=");
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000910005003";
			НовСтр.Значение = ?(ТипЗнч(ДопПараметры.Итоги.СумНДСИтКПр20) = Тип("Число"), ДопПараметры.Итоги.СумНДСИтКПр20, 0);
			НовСтр.Значение = ?(ДопПараметры.ЭтоПерваяСтраницаРаздела, НовСтр.Значение, 0);
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=19;ЧДЦ=2;ЧН=-;ЧРД=.;ЧГ=");
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000910005503";
			НовСтр.Значение = ?(ТипЗнч(ДопПараметры.Итоги.СумНДСИтКПр18) = Тип("Число"), ДопПараметры.Итоги.СумНДСИтКПр18, 0);
			НовСтр.Значение = ?(ДопПараметры.ЭтоПерваяСтраницаРаздела, НовСтр.Значение, 0);
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=19;ЧДЦ=2;ЧН=-;ЧРД=.;ЧГ=");
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000910006003";
			НовСтр.Значение = ?(ТипЗнч(ДопПараметры.Итоги.СумНДСИтКПр10) = Тип("Число"), ДопПараметры.Итоги.СумНДСИтКПр10, 0);
			НовСтр.Значение = ?(ДопПараметры.ЭтоПерваяСтраницаРаздела, НовСтр.Значение, 0);
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=19;ЧДЦ=2;ЧН=-;ЧРД=.;ЧГ=");
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000910007003";
			НовСтр.Значение = ?(ТипЗнч(ДопПараметры.Итоги.ИтСтПродОсвКПр) = Тип("Число"), ДопПараметры.Итоги.ИтСтПродОсвКПр, 0);
			НовСтр.Значение = ?(ДопПараметры.ЭтоПерваяСтраницаРаздела, НовСтр.Значение, 0);
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=19;ЧДЦ=2;ЧН=-;ЧРД=.;ЧГ=");
			
		Иначе
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000910000103";
			Если СтруктураРеквизитовФормы.ВидДокумента = 1 Тогда
				Если СтруктураРеквизитовФормы.АктуальностьСведенийРаздел9_Прил1 = 1 Тогда
					НовСтр.Значение = "1";
				Иначе
					НовСтр.Значение = "0";
				КонецЕсли;
			Иначе
				НовСтр.Значение = "-";
			КонецЕсли;
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000910002003";
			НовСтр.Значение = 0;
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=19;ЧДЦ=2;ЧН=-;ЧРД=.;ЧГ=");
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000910002503";
			НовСтр.Значение = 0;
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=19;ЧДЦ=2;ЧН=-;ЧРД=.;ЧГ=");
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000910003003";
			НовСтр.Значение = 0;
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=19;ЧДЦ=2;ЧН=-;ЧРД=.;ЧГ=");
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000910004003";
			НовСтр.Значение = 0;
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=19;ЧДЦ=2;ЧН=-;ЧРД=.;ЧГ=");
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000910005003";
			НовСтр.Значение = 0;
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=19;ЧДЦ=2;ЧН=-;ЧРД=.;ЧГ=");
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000910005503";
			НовСтр.Значение = 0;
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=19;ЧДЦ=2;ЧН=-;ЧРД=.;ЧГ=");
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000910006003";
			НовСтр.Значение = 0;
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=19;ЧДЦ=2;ЧН=-;ЧРД=.;ЧГ=");
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000910007003";
			НовСтр.Значение = 0;
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=19;ЧДЦ=2;ЧН=-;ЧРД=.;ЧГ=");
			
		КонецЕсли;
		
	ИначеЕсли ИмяРаздела + ДопПараметры.ПостфиксВИмениРаздела = "Раздел9_Прил1_Прод1" Тогда
		
		Если НЕ ДопПараметры.ПечатьПустыхБланков Тогда
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000910008003";
			НовСтр.Значение = ?(ДопПараметры.ИндексЛистаМЧБ = 0, ДанныеРазделов8_12.НомерПор, 0);
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=12;ЧДЦ=0;ЧН=-;ЧГ=");
			
			НачНомСтрКодВидОпер = ДопПараметры.ИндексЛистаМЧБ * 7 + 1;
			Для НомСтрКодВидОпер = НачНомСтрКодВидОпер По НачНомСтрКодВидОпер + 6 Цикл
				НовСтр = Показатели.Добавить();
				НовСтр.Имя = "П000910009003_" + Формат(НомСтрКодВидОпер, "ЧГ=");
				ИндексВМассиве = НомСтрКодВидОпер - 1;
				Если ИндексВМассиве + 1 <= ДанныеРазделов8_12.КодВидОпер.Количество() Тогда
					НовСтр.Значение = СокрЛП(ДанныеРазделов8_12.КодВидОпер[ИндексВМассиве]);
				Иначе
					НовСтр.Значение = "";
				КонецЕсли;
				НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			КонецЦикла;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000910010003";
			НовСтр.Значение = ?(ДопПараметры.ИндексЛистаМЧБ = 0, СокрЛП(ДанныеРазделов8_12.НомСчФПрод), "");
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000910011003";
			НовСтр.Значение = ?(ДопПараметры.ИндексЛистаМЧБ = 0, СтрЗаменить(СокрЛП(ДанныеРазделов8_12.ДатаСчФПрод), ".", ""), "");
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НачНомСтрРегНомТД = ДопПараметры.ИндексЛистаМЧБ * 2 + 1;
			Для НомСтрРегНомТД = НачНомСтрРегНомТД По НачНомСтрРегНомТД + 1 Цикл
				НовСтр = Показатели.Добавить();
				НовСтр.Имя = "П000910011503_" + Формат(НомСтрРегНомТД, "ЧГ=");
				ИндексВМассиве = НомСтрРегНомТД - 1;
				Если ИндексВМассиве + 1 <= ДанныеРазделов8_12.РегНомТД.Количество() Тогда
					НовСтр.Значение = СокрЛП(ДанныеРазделов8_12.РегНомТД[ИндексВМассиве]);
				Иначе
					НовСтр.Значение = "";
				КонецЕсли;
				НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			КонецЦикла;
			
			НачНомСтрКодВидТовар = ДопПараметры.ИндексЛистаМЧБ * 2 + 1;
			Для НомСтрКодВидТовар = НачНомСтрКодВидТовар По НачНомСтрКодВидТовар + 1 Цикл
				НовСтр = Показатели.Добавить();
				НовСтр.Имя = "П000910011603_" + Формат(НомСтрКодВидТовар, "ЧГ=");
				ИндексВМассиве = НомСтрКодВидТовар - 1;
				Если ИндексВМассиве + 1 <= ДанныеРазделов8_12.КодВидТовар.Количество() Тогда
					НовСтр.Значение = СокрЛП(ДанныеРазделов8_12.КодВидТовар[ИндексВМассиве]);
				Иначе
					НовСтр.Значение = "";
				КонецЕсли;
				НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			КонецЦикла;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000910012003";
			НовСтр.Значение = ?(ДопПараметры.ИндексЛистаМЧБ = 0, ДанныеРазделов8_12.НомИспрСчФ, 0);
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=3;ЧДЦ=0;ЧН=-;ЧГ=");
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000910013003";
			НовСтр.Значение = ?(ДопПараметры.ИндексЛистаМЧБ = 0, СтрЗаменить(СокрЛП(ДанныеРазделов8_12.ДатаИспрСчФ), ".", ""), "");
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000910014003";
			НовСтр.Значение = ?(ДопПараметры.ИндексЛистаМЧБ = 0, СокрЛП(ДанныеРазделов8_12.НомКСчФПрод), "");
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000910015003";
			НовСтр.Значение = ?(ДопПараметры.ИндексЛистаМЧБ = 0, СтрЗаменить(СокрЛП(ДанныеРазделов8_12.ДатаКСчФПрод), ".", ""), "");
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000910016003";
			НовСтр.Значение = ?(ДопПараметры.ИндексЛистаМЧБ = 0, ДанныеРазделов8_12.НомИспрКСчФ, 0);
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=3;ЧДЦ=0;ЧН=-;ЧГ=");
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000910017003";
			НовСтр.Значение = ?(ДопПараметры.ИндексЛистаМЧБ = 0, СтрЗаменить(СокрЛП(ДанныеРазделов8_12.ДатаИспрКСчФ), ".", ""), "");
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000910018003_" + Формат(ДопПараметры.ИндексЛистаМЧБ + 1, "ЧГ=");
			ИндексВМассиве = ДопПараметры.ИндексЛистаМЧБ;
			Если ИндексВМассиве + 1 <= ДанныеРазделов8_12.СвПокуп.Количество() Тогда
				Если ТипЗнЧ(ДанныеРазделов8_12.СвПокуп[ИндексВМассиве]) = Тип("Структура") Тогда
					Если ДанныеРазделов8_12.СвПокуп[ИндексВМассиве].Свойство("ИННЮЛ") Тогда
						НовСтр.Значение = СокрЛП(ДанныеРазделов8_12.СвПокуп[ИндексВМассиве].ИННЮЛ) + "--";
					ИначеЕсли ДанныеРазделов8_12.СвПокуп[ИндексВМассиве].Свойство("ИННФЛ") Тогда
						НовСтр.Значение = СокрЛП(ДанныеРазделов8_12.СвПокуп[ИндексВМассиве].ИННФЛ);
					Иначе
						НовСтр.Значение = "";
					КонецЕсли;
				Иначе
					НовСтр.Значение = "";
				КонецЕсли;
			Иначе
				НовСтр.Значение = "";
			КонецЕсли;
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000910018004_" + Формат(ДопПараметры.ИндексЛистаМЧБ + 1, "ЧГ=");
			ИндексВМассиве = ДопПараметры.ИндексЛистаМЧБ;
			Если ИндексВМассиве + 1 <= ДанныеРазделов8_12.СвПокуп.Количество() Тогда
				Если ТипЗнЧ(ДанныеРазделов8_12.СвПокуп[ИндексВМассиве]) = Тип("Структура") Тогда
					Если ДанныеРазделов8_12.СвПокуп[ИндексВМассиве].Свойство("КПП") Тогда
						НовСтр.Значение = СокрЛП(ДанныеРазделов8_12.СвПокуп[ИндексВМассиве].КПП);
					Иначе
						НовСтр.Значение = "";
					КонецЕсли;
				Иначе
					НовСтр.Значение = "";
				КонецЕсли;
			Иначе
				НовСтр.Значение = "";
			КонецЕсли;
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
		Иначе
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000910008003";
			НовСтр.Значение = 0;
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=12;ЧДЦ=0;ЧН=-;ЧГ=");
			
			Для НомСтрКод = 1 По 7 Цикл
				НовСтр = Показатели.Добавить();
				НовСтр.Имя = "П000910009003_" + НомСтрКод;
				НовСтр.Значение = "";
				НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			КонецЦикла;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000910010003";
			НовСтр.Значение = "";
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000910011003";
			НовСтр.Значение = "";
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			Для НомСтрКод = 1 По 2 Цикл
				НовСтр = Показатели.Добавить();
				НовСтр.Имя = "П000910011503_" + НомСтрКод;
				НовСтр.Значение = "";
				НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			КонецЦикла;
			
			Для НомСтрКод = 1 По 2 Цикл
				НовСтр = Показатели.Добавить();
				НовСтр.Имя = "П000910011603_" + НомСтрКод;
				НовСтр.Значение = "";
				НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			КонецЦикла;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000910012003";
			НовСтр.Значение = 0;
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=3;ЧДЦ=0;ЧН=-;ЧГ=");
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000910013003";
			НовСтр.Значение = "";
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000910014003";
			НовСтр.Значение = "";
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000910015003";
			НовСтр.Значение = "";
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000910016003";
			НовСтр.Значение = 0;
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=3;ЧДЦ=0;ЧН=-;ЧГ=");
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000910017003";
			НовСтр.Значение = "";
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000910018003_1";
			НовСтр.Значение = "";
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000910018004_1";
			НовСтр.Значение = "";
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
		КонецЕсли;
		
	ИначеЕсли ИмяРаздела + ДопПараметры.ПостфиксВИмениРаздела = "Раздел9_Прил1_Прод2" Тогда
		
		Если НЕ ДопПараметры.ПечатьПустыхБланков Тогда
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000910019003";
			Если ТипЗнЧ(ДанныеРазделов8_12.СвПос) = Тип("Структура") Тогда
				Если ДанныеРазделов8_12.СвПос.Свойство("ИННЮЛ") Тогда
					НовСтр.Значение = ?(ДопПараметры.ИндексЛистаМЧБ = 0, СокрЛП(ДанныеРазделов8_12.СвПос.ИННЮЛ) + "--", "");
				ИначеЕсли ДанныеРазделов8_12.СвПос.Свойство("ИННФЛ") Тогда
					НовСтр.Значение = ?(ДопПараметры.ИндексЛистаМЧБ = 0, СокрЛП(ДанныеРазделов8_12.СвПос.ИННФЛ), "");
				Иначе
					НовСтр.Значение = "";
				КонецЕсли;
			Иначе
				НовСтр.Значение = "";
			КонецЕсли;
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000910019004";
			Если ТипЗнЧ(ДанныеРазделов8_12.СвПос) = Тип("Структура") Тогда
				Если ДанныеРазделов8_12.СвПос.Свойство("КПП") Тогда
					НовСтр.Значение = ?(ДопПараметры.ИндексЛистаМЧБ = 0, СокрЛП(ДанныеРазделов8_12.СвПос.КПП), "");
				Иначе
					НовСтр.Значение = "";
				КонецЕсли;
			Иначе
				НовСтр.Значение = "";
			КонецЕсли;
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000910020003_" + Формат(ДопПараметры.ИндексЛистаМЧБ + 1, "ЧГ=");
			ИндексВМассиве = ДопПараметры.ИндексЛистаМЧБ;
			Если ИндексВМассиве + 1 <= ДанныеРазделов8_12.ДокПдтвОпл.Количество() Тогда
				НовСтр.Значение = СокрЛП(ДанныеРазделов8_12.ДокПдтвОпл[ИндексВМассиве].НомДокПдтвОпл);
			Иначе
				НовСтр.Значение = "";
			КонецЕсли;
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000910021003_" + Формат(ДопПараметры.ИндексЛистаМЧБ + 1, "ЧГ=");
			ИндексВМассиве = ДопПараметры.ИндексЛистаМЧБ;
			Если ИндексВМассиве + 1 <= ДанныеРазделов8_12.ДокПдтвОпл.Количество() Тогда
				НовСтр.Значение = СтрЗаменить(СокрЛП(ДанныеРазделов8_12.ДокПдтвОпл[ИндексВМассиве].ДатаДокПдтвОпл), ".", "");
			Иначе
				НовСтр.Значение = "";
			КонецЕсли;
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000910022003";
			НовСтр.Значение = ?(ДопПараметры.ИндексЛистаМЧБ = 0, СокрЛП(ДанныеРазделов8_12.ОКВ), "");
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000910023003";
			НовСтр.Значение = ?(ТипЗнч(ДанныеРазделов8_12.СтоимПродСФВ) = Тип("Число"), ДанныеРазделов8_12.СтоимПродСФВ, 0);
			НовСтр.Значение = ?(ДопПараметры.ИндексЛистаМЧБ = 0, НовСтр.Значение, 0);
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=19;ЧДЦ=2;ЧН=-;ЧРД=.;ЧГ=");
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000910024003";
			НовСтр.Значение = ?(ТипЗнч(ДанныеРазделов8_12.СтоимПродСФ) = Тип("Число"), ДанныеРазделов8_12.СтоимПродСФ, 0);
			НовСтр.Значение = ?(ДопПараметры.ИндексЛистаМЧБ = 0, НовСтр.Значение, 0);
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=19;ЧДЦ=2;ЧН=-;ЧРД=.;ЧГ=");
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000910025003";
			НовСтр.Значение = ?(ТипЗнч(ДанныеРазделов8_12.СтоимПродСФ20) = Тип("Число"), ДанныеРазделов8_12.СтоимПродСФ20, 0);
			НовСтр.Значение = ?(ДопПараметры.ИндексЛистаМЧБ = 0, НовСтр.Значение, 0);
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=19;ЧДЦ=2;ЧН=-;ЧРД=.;ЧГ=");
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000910025503";
			НовСтр.Значение = ?(ТипЗнч(ДанныеРазделов8_12.СтоимПродСФ18) = Тип("Число"), ДанныеРазделов8_12.СтоимПродСФ18, 0);
			НовСтр.Значение = ?(ДопПараметры.ИндексЛистаМЧБ = 0, НовСтр.Значение, 0);
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=19;ЧДЦ=2;ЧН=-;ЧРД=.;ЧГ=");
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000910026003";
			НовСтр.Значение = ?(ТипЗнч(ДанныеРазделов8_12.СтоимПродСФ10) = Тип("Число"), ДанныеРазделов8_12.СтоимПродСФ10, 0);
			НовСтр.Значение = ?(ДопПараметры.ИндексЛистаМЧБ = 0, НовСтр.Значение, 0);
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=19;ЧДЦ=2;ЧН=-;ЧРД=.;ЧГ=");
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000910027003";
			НовСтр.Значение = ?(ТипЗнч(ДанныеРазделов8_12.СтоимПродСФ0) = Тип("Число"), ДанныеРазделов8_12.СтоимПродСФ0, 0);
			НовСтр.Значение = ?(ДопПараметры.ИндексЛистаМЧБ = 0, НовСтр.Значение, 0);
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=19;ЧДЦ=2;ЧН=-;ЧРД=.;ЧГ=");
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000910028003";
			НовСтр.Значение = ?(ТипЗнч(ДанныеРазделов8_12.СумНДССФ20) = Тип("Число"), ДанныеРазделов8_12.СумНДССФ20, 0);
			НовСтр.Значение = ?(ДопПараметры.ИндексЛистаМЧБ = 0, НовСтр.Значение, 0);
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=19;ЧДЦ=2;ЧН=-;ЧРД=.;ЧГ=");
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000910028503";
			НовСтр.Значение = ?(ТипЗнч(ДанныеРазделов8_12.СумНДССФ18) = Тип("Число"), ДанныеРазделов8_12.СумНДССФ18, 0);
			НовСтр.Значение = ?(ДопПараметры.ИндексЛистаМЧБ = 0, НовСтр.Значение, 0);
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=19;ЧДЦ=2;ЧН=-;ЧРД=.;ЧГ=");
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000910029003";
			НовСтр.Значение = ?(ТипЗнч(ДанныеРазделов8_12.СумНДССФ10) = Тип("Число"), ДанныеРазделов8_12.СумНДССФ10, 0);
			НовСтр.Значение = ?(ДопПараметры.ИндексЛистаМЧБ = 0, НовСтр.Значение, 0);
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=19;ЧДЦ=2;ЧН=-;ЧРД=.;ЧГ=");
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000910030003";
			НовСтр.Значение = ?(ТипЗнч(ДанныеРазделов8_12.СтоимПродОсв) = Тип("Число"), ДанныеРазделов8_12.СтоимПродОсв, 0);
			НовСтр.Значение = ?(ДопПараметры.ИндексЛистаМЧБ = 0, НовСтр.Значение, 0);
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=19;ЧДЦ=2;ЧН=-;ЧРД=.;ЧГ=");
			
		Иначе
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000910019003";
			НовСтр.Значение = "";
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000910019004";
			НовСтр.Значение = "";
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000910020003_1";
			НовСтр.Значение = "";
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000910021003_1";
			НовСтр.Значение = "";
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000910022003";
			НовСтр.Значение = "";
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000910023003";
			НовСтр.Значение = 0;
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=19;ЧДЦ=2;ЧН=-;ЧРД=.;ЧГ=");
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000910024003";
			НовСтр.Значение = 0;
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=19;ЧДЦ=2;ЧН=-;ЧРД=.;ЧГ=");
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000910025003";
			НовСтр.Значение = 0;
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=19;ЧДЦ=2;ЧН=-;ЧРД=.;ЧГ=");
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000910025503";
			НовСтр.Значение = 0;
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=19;ЧДЦ=2;ЧН=-;ЧРД=.;ЧГ=");
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000910026003";
			НовСтр.Значение = 0;
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=19;ЧДЦ=2;ЧН=-;ЧРД=.;ЧГ=");
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000910027003";
			НовСтр.Значение = 0;
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=19;ЧДЦ=2;ЧН=-;ЧРД=.;ЧГ=");
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000910028003";
			НовСтр.Значение = 0;
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=19;ЧДЦ=2;ЧН=-;ЧРД=.;ЧГ=");
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000910028503";
			НовСтр.Значение = 0;
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=19;ЧДЦ=2;ЧН=-;ЧРД=.;ЧГ=");
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000910029003";
			НовСтр.Значение = 0;
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=19;ЧДЦ=2;ЧН=-;ЧРД=.;ЧГ=");
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000910030003";
			НовСтр.Значение = 0;
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=19;ЧДЦ=2;ЧН=-;ЧРД=.;ЧГ=");
			
		КонецЕсли;
		
	ИначеЕсли ИмяРаздела + ДопПараметры.ПостфиксВИмениРаздела = "Раздел9_Прил1_Прод3" Тогда
		
		Если НЕ ДопПараметры.ПечатьПустыхБланков Тогда
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000910031003";
			НовСтр.Значение = ?(ТипЗнч(ДопПараметры.Итоги.СтПродВсП1Р9_20) = Тип("Число"), ДопПараметры.Итоги.СтПродВсП1Р9_20, 0);
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=19;ЧДЦ=2;ЧН=-;ЧРД=.;ЧГ=");
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000910031503";
			НовСтр.Значение = ?(ТипЗнч(ДопПараметры.Итоги.СтПродВсП1Р9_18) = Тип("Число"), ДопПараметры.Итоги.СтПродВсП1Р9_18, 0);
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=19;ЧДЦ=2;ЧН=-;ЧРД=.;ЧГ=");
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000910032003";
			НовСтр.Значение = ?(ТипЗнч(ДопПараметры.Итоги.СтПродВсП1Р9_10) = Тип("Число"), ДопПараметры.Итоги.СтПродВсП1Р9_10, 0);
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=19;ЧДЦ=2;ЧН=-;ЧРД=.;ЧГ=");
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000910033003";
			НовСтр.Значение = ?(ТипЗнч(ДопПараметры.Итоги.СтПродВсП1Р9_0) = Тип("Число"), ДопПараметры.Итоги.СтПродВсП1Р9_0, 0);
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=19;ЧДЦ=2;ЧН=-;ЧРД=.;ЧГ=");
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000910034003";
			НовСтр.Значение = ?(ТипЗнч(ДопПараметры.Итоги.СумНДСВсП1Р9_20) = Тип("Число"), ДопПараметры.Итоги.СумНДСВсП1Р9_20, 0);
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=19;ЧДЦ=2;ЧН=-;ЧРД=.;ЧГ=");
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000910034503";
			НовСтр.Значение = ?(ТипЗнч(ДопПараметры.Итоги.СумНДСВсП1Р9_18) = Тип("Число"), ДопПараметры.Итоги.СумНДСВсП1Р9_18, 0);
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=19;ЧДЦ=2;ЧН=-;ЧРД=.;ЧГ=");
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000910035003";
			НовСтр.Значение = ?(ТипЗнч(ДопПараметры.Итоги.СумНДСВсП1Р9_10) = Тип("Число"), ДопПараметры.Итоги.СумНДСВсП1Р9_10, 0);
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=19;ЧДЦ=2;ЧН=-;ЧРД=.;ЧГ=");
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000910036003";
			НовСтр.Значение = ?(ТипЗнч(ДопПараметры.Итоги.СтПродОсвП1Р9Вс) = Тип("Число"), ДопПараметры.Итоги.СтПродОсвП1Р9Вс, 0);
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=19;ЧДЦ=2;ЧН=-;ЧРД=.;ЧГ=");
			
		Иначе
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000910031003";
			НовСтр.Значение = 0;
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=19;ЧДЦ=2;ЧН=-;ЧРД=.;ЧГ=");
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000910031503";
			НовСтр.Значение = 0;
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=19;ЧДЦ=2;ЧН=-;ЧРД=.;ЧГ=");
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000910032003";
			НовСтр.Значение = 0;
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=19;ЧДЦ=2;ЧН=-;ЧРД=.;ЧГ=");
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000910033003";
			НовСтр.Значение = 0;
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=19;ЧДЦ=2;ЧН=-;ЧРД=.;ЧГ=");
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000910034003";
			НовСтр.Значение = 0;
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=19;ЧДЦ=2;ЧН=-;ЧРД=.;ЧГ=");
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000910034503";
			НовСтр.Значение = 0;
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=19;ЧДЦ=2;ЧН=-;ЧРД=.;ЧГ=");
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000910035003";
			НовСтр.Значение = 0;
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=19;ЧДЦ=2;ЧН=-;ЧРД=.;ЧГ=");
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000910036003";
			НовСтр.Значение = 0;
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=19;ЧДЦ=2;ЧН=-;ЧРД=.;ЧГ=");
			
		КонецЕсли;
		
	ИначеЕсли ИмяРаздела + ДопПараметры.ПостфиксВИмениРаздела = "Раздел10" Тогда
		
		Если НЕ ДопПараметры.ПечатьПустыхБланков Тогда
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П001000000103";
			Если ДопПараметры.ЭтоПерваяСтраницаРаздела Тогда
				Если СтруктураРеквизитовФормы.ВидДокумента = 1 Тогда
					Если СтруктураРеквизитовФормы.АктуальностьСведенийРаздел10 = 1 Тогда
						НовСтр.Значение = "1";
					Иначе
						НовСтр.Значение = "0";
					КонецЕсли;
				Иначе
					НовСтр.Значение = "-";
				КонецЕсли;
			Иначе
				НовСтр.Значение = "-";
			КонецЕсли;
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П001000000503";
			НовСтр.Значение = ?(ДопПараметры.ИндексЛистаМЧБ = 0, ДанныеРазделов8_12.НомерПор, 0);
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=12;ЧДЦ=0;ЧН=-;ЧГ=");
			
			НачНомСтрКодВидОпер = ДопПараметры.ИндексЛистаМЧБ * 7 + 1;
			Для НомСтрКодВидОпер = НачНомСтрКодВидОпер По НачНомСтрКодВидОпер + 6 Цикл
				НовСтр = Показатели.Добавить();
				НовСтр.Имя = "П001000002003_" + Формат(НомСтрКодВидОпер, "ЧГ=");
				ИндексВМассиве = НомСтрКодВидОпер - 1;
				Если ИндексВМассиве + 1 <= ДанныеРазделов8_12.КодВидОпер.Количество() Тогда
					НовСтр.Значение = СокрЛП(ДанныеРазделов8_12.КодВидОпер[ИндексВМассиве]);
				Иначе
					НовСтр.Значение = "";
				КонецЕсли;
				НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			КонецЦикла;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П001000003003";
			НовСтр.Значение = ?(ДопПараметры.ИндексЛистаМЧБ = 0, СокрЛП(ДанныеРазделов8_12.НомСчФПрод), "");
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П001000004003";
			НовСтр.Значение = ?(ДопПараметры.ИндексЛистаМЧБ = 0, СтрЗаменить(СокрЛП(ДанныеРазделов8_12.ДатаСчФПрод), ".", ""), "");
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П001000005003";
			НовСтр.Значение = ?(ДопПараметры.ИндексЛистаМЧБ = 0, ДанныеРазделов8_12.НомИспрСчФ, 0);
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=3;ЧДЦ=0;ЧН=-;ЧГ=");
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П001000006003";
			НовСтр.Значение = ?(ДопПараметры.ИндексЛистаМЧБ = 0, СтрЗаменить(СокрЛП(ДанныеРазделов8_12.ДатаИспрСчФ), ".", ""), "");
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П001000007003";
			НовСтр.Значение = ?(ДопПараметры.ИндексЛистаМЧБ = 0, СокрЛП(ДанныеРазделов8_12.НомКСчФПрод), "");
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П001000008003";
			НовСтр.Значение = ?(ДопПараметры.ИндексЛистаМЧБ = 0, СтрЗаменить(СокрЛП(ДанныеРазделов8_12.ДатаКСчФПрод), ".", ""), "");
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П001000009003";
			НовСтр.Значение = ?(ДопПараметры.ИндексЛистаМЧБ = 0, ДанныеРазделов8_12.НомИспрКСчФ, 0);
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=3;ЧДЦ=0;ЧН=-;ЧГ=");
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П001000010003";
			НовСтр.Значение = ?(ДопПараметры.ИндексЛистаМЧБ = 0, СтрЗаменить(СокрЛП(ДанныеРазделов8_12.ДатаИспрКСчФ), ".", ""), "");
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П001000011003";
			Если ТипЗнЧ(ДанныеРазделов8_12.СвПокуп) = Тип("Структура") Тогда
				Если ДанныеРазделов8_12.СвПокуп.Свойство("ИННЮЛ") Тогда
					НовСтр.Значение = ?(ДопПараметры.ИндексЛистаМЧБ = 0, СокрЛП(ДанныеРазделов8_12.СвПокуп.ИННЮЛ) + "--", "");
				ИначеЕсли ДанныеРазделов8_12.СвПокуп.Свойство("ИННФЛ") Тогда
					НовСтр.Значение = ?(ДопПараметры.ИндексЛистаМЧБ = 0, СокрЛП(ДанныеРазделов8_12.СвПокуп.ИННФЛ), "");
				Иначе
					НовСтр.Значение = "";
				КонецЕсли;
			Иначе
				НовСтр.Значение = "";
			КонецЕсли;
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П001000011004";
			Если ТипЗнЧ(ДанныеРазделов8_12.СвПокуп) = Тип("Структура") Тогда
				Если ДанныеРазделов8_12.СвПокуп.Свойство("КПП") Тогда
					НовСтр.Значение = ?(ДопПараметры.ИндексЛистаМЧБ = 0, СокрЛП(ДанныеРазделов8_12.СвПокуп.КПП), "");
				Иначе
					НовСтр.Значение = "";
				КонецЕсли;
			Иначе
				НовСтр.Значение = "";
			КонецЕсли;
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
		Иначе
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П001000000103";
			Если СтруктураРеквизитовФормы.ВидДокумента = 1 Тогда
				Если СтруктураРеквизитовФормы.АктуальностьСведенийРаздел10 = 1 Тогда
					НовСтр.Значение = "1";
				Иначе
					НовСтр.Значение = "0";
				КонецЕсли;
			Иначе
				НовСтр.Значение = "-";
			КонецЕсли;
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П001000000503";
			НовСтр.Значение = 0;
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=12;ЧДЦ=0;ЧН=-;ЧГ=");
			
			Для НомСтрКод = 1 По 7 Цикл
				НовСтр = Показатели.Добавить();
				НовСтр.Имя = "П001000002003_" + НомСтрКод;
				НовСтр.Значение = "";
				НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			КонецЦикла;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П001000003003";
			НовСтр.Значение = "";
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П001000004003";
			НовСтр.Значение = "";
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П001000005003";
			НовСтр.Значение = 0;
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=3;ЧДЦ=0;ЧН=-;ЧГ=");
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П001000006003";
			НовСтр.Значение = "";
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П001000007003";
			НовСтр.Значение = "";
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П001000008003";
			НовСтр.Значение = "";
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П001000009003";
			НовСтр.Значение = 0;
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=3;ЧДЦ=0;ЧН=-;ЧГ=");
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П001000010003";
			НовСтр.Значение = "";
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П001000011003";
			НовСтр.Значение = "";
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П001000011004";
			НовСтр.Значение = "";
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
		КонецЕсли;
		
	ИначеЕсли ИмяРаздела + ДопПараметры.ПостфиксВИмениРаздела = "Раздел10_Прод" Тогда
		
		Если НЕ ДопПараметры.ПечатьПустыхБланков Тогда
			
			Сведения = ДопПараметры.Сведения;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П001000012003";
			Если ТипЗнЧ(Сведения.СвПрод) = Тип("Структура") Тогда
				Если Сведения.СвПрод.Свойство("ИННЮЛ") Тогда
					НовСтр.Значение = СокрЛП(Сведения.СвПрод.ИННЮЛ) + "--";
				ИначеЕсли Сведения.СвПрод.Свойство("ИННФЛ") Тогда
					НовСтр.Значение = СокрЛП(Сведения.СвПрод.ИННФЛ);
				Иначе
					НовСтр.Значение = "";
				КонецЕсли;
			Иначе
				НовСтр.Значение = "";
			КонецЕсли;
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П001000012004";
			Если ТипЗнЧ(Сведения.СвПрод) = Тип("Структура") Тогда
				Если Сведения.СвПрод.Свойство("КПП") Тогда
					НовСтр.Значение = СокрЛП(Сведения.СвПрод.КПП);
				Иначе
					НовСтр.Значение = "";
				КонецЕсли;
			Иначе
				НовСтр.Значение = "";
			КонецЕсли;
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П001000013003";
			НовСтр.Значение = СокрЛП(Сведения.НомСчФОтПрод);
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П001000014003";
			НовСтр.Значение = СтрЗаменить(СокрЛП(Сведения.ДатаСчФОтПрод), ".", "");
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П001000015003";
			НовСтр.Значение = СокрЛП(Сведения.ОКВ);
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П001000016003";
			НовСтр.Значение = ?(ТипЗнч(Сведения.СтоимТовСчФВс) = Тип("Число"), Сведения.СтоимТовСчФВс, 0);
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=19;ЧДЦ=2;ЧН=-;ЧРД=.;ЧГ=");
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П001000017003";
			НовСтр.Значение = ?(ТипЗнч(Сведения.СумНДССчФ) = Тип("Число"), Сведения.СумНДССчФ, 0);
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=19;ЧДЦ=2;ЧН=-;ЧРД=.;ЧГ=");
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П001000018003";
			НовСтр.Значение = ?(ТипЗнч(Сведения.РазСтКСчФУм) = Тип("Число"), Сведения.РазСтКСчФУм, 0);
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=19;ЧДЦ=2;ЧН=-;ЧРД=.;ЧГ=");
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П001000019003";
			НовСтр.Значение = ?(ТипЗнч(Сведения.РазСтКСчФУв) = Тип("Число"), Сведения.РазСтКСчФУв, 0);
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=19;ЧДЦ=2;ЧН=-;ЧРД=.;ЧГ=");
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П001000020003";
			НовСтр.Значение = ?(ТипЗнч(Сведения.РазНДСКСчФУм) = Тип("Число"), Сведения.РазНДСКСчФУм, 0);
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=19;ЧДЦ=2;ЧН=-;ЧРД=.;ЧГ=");
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П001000021003";
			НовСтр.Значение = ?(ТипЗнч(Сведения.РазНДСКСчФУв) = Тип("Число"), Сведения.РазНДСКСчФУв, 0);
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=19;ЧДЦ=2;ЧН=-;ЧРД=.;ЧГ=");
			
		Иначе
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П001000012003";
			НовСтр.Значение = "";
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П001000012004";
			НовСтр.Значение = "";
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П001000013003";
			НовСтр.Значение = "";
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П001000014003";
			НовСтр.Значение = "";
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П001000015003";
			НовСтр.Значение = "";
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П001000016003";
			НовСтр.Значение = 0;
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=19;ЧДЦ=2;ЧН=-;ЧРД=.;ЧГ=");
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П001000017003";
			НовСтр.Значение = 0;
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=19;ЧДЦ=2;ЧН=-;ЧРД=.;ЧГ=");
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П001000018003";
			НовСтр.Значение = 0;
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=19;ЧДЦ=2;ЧН=-;ЧРД=.;ЧГ=");
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П001000019003";
			НовСтр.Значение = 0;
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=19;ЧДЦ=2;ЧН=-;ЧРД=.;ЧГ=");
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П001000020003";
			НовСтр.Значение = 0;
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=19;ЧДЦ=2;ЧН=-;ЧРД=.;ЧГ=");
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П001000021003";
			НовСтр.Значение = 0;
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=19;ЧДЦ=2;ЧН=-;ЧРД=.;ЧГ=");
			
		КонецЕсли;
		
	ИначеЕсли ИмяРаздела + ДопПараметры.ПостфиксВИмениРаздела = "Раздел11" Тогда
		
		Если НЕ ДопПараметры.ПечатьПустыхБланков Тогда
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П001100000103";
			Если ДопПараметры.ЭтоПерваяСтраницаРаздела Тогда
				Если СтруктураРеквизитовФормы.ВидДокумента = 1 Тогда
					Если СтруктураРеквизитовФормы.АктуальностьСведенийРаздел11 = 1 Тогда
						НовСтр.Значение = "1";
					Иначе
						НовСтр.Значение = "0";
					КонецЕсли;
				Иначе
					НовСтр.Значение = "-";
				КонецЕсли;
			Иначе
				НовСтр.Значение = "-";
			КонецЕсли;
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П001100000503";
			НовСтр.Значение = ?(ДопПараметры.ИндексЛистаМЧБ = 0, ДанныеРазделов8_12.НомерПор, 0);
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=12;ЧДЦ=0;ЧН=-;ЧГ=");
			
			НачНомСтрКодВидОпер = ДопПараметры.ИндексЛистаМЧБ * 7 + 1;
			Для НомСтрКодВидОпер = НачНомСтрКодВидОпер По НачНомСтрКодВидОпер + 6 Цикл
				НовСтр = Показатели.Добавить();
				НовСтр.Имя = "П001100002003_" + Формат(НомСтрКодВидОпер, "ЧГ=");
				ИндексВМассиве = НомСтрКодВидОпер - 1;
				Если ИндексВМассиве + 1 <= ДанныеРазделов8_12.КодВидОпер.Количество() Тогда
					НовСтр.Значение = СокрЛП(ДанныеРазделов8_12.КодВидОпер[ИндексВМассиве]);
				Иначе
					НовСтр.Значение = "";
				КонецЕсли;
				НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			КонецЦикла;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П001100003003";
			НовСтр.Значение = ?(ДопПараметры.ИндексЛистаМЧБ = 0, СокрЛП(ДанныеРазделов8_12.НомСчФПрод), "");
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П001100004003";
			НовСтр.Значение = ?(ДопПараметры.ИндексЛистаМЧБ = 0, СтрЗаменить(СокрЛП(ДанныеРазделов8_12.ДатаСчФПрод), ".", ""), "");
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П001100005003";
			НовСтр.Значение = ?(ДопПараметры.ИндексЛистаМЧБ = 0, ДанныеРазделов8_12.НомИспрСчФ, 0);
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=3;ЧДЦ=0;ЧН=-;ЧГ=");
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П001100006003";
			НовСтр.Значение = ?(ДопПараметры.ИндексЛистаМЧБ = 0, СтрЗаменить(СокрЛП(ДанныеРазделов8_12.ДатаИспрСчФ), ".", ""), "");
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П001100007003";
			НовСтр.Значение = ?(ДопПараметры.ИндексЛистаМЧБ = 0, СокрЛП(ДанныеРазделов8_12.НомКСчФПрод), "");
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П001100008003";
			НовСтр.Значение = ?(ДопПараметры.ИндексЛистаМЧБ = 0, СтрЗаменить(СокрЛП(ДанныеРазделов8_12.ДатаКСчФПрод), ".", ""), "");
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П001100009003";
			НовСтр.Значение = ?(ДопПараметры.ИндексЛистаМЧБ = 0, ДанныеРазделов8_12.НомИспрКСчФ, 0);
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=3;ЧДЦ=0;ЧН=-;ЧГ=");
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П001100010003";
			НовСтр.Значение = ?(ДопПараметры.ИндексЛистаМЧБ = 0, СтрЗаменить(СокрЛП(ДанныеРазделов8_12.ДатаИспрКСчФ), ".", ""), "");
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П001100011003";
			Если ТипЗнЧ(ДанныеРазделов8_12.СвПрод) = Тип("Структура") Тогда
				Если ДанныеРазделов8_12.СвПрод.Свойство("ИННЮЛ") Тогда
					НовСтр.Значение = ?(ДопПараметры.ИндексЛистаМЧБ = 0, СокрЛП(ДанныеРазделов8_12.СвПрод.ИННЮЛ) + "--", "");
				ИначеЕсли ДанныеРазделов8_12.СвПрод.Свойство("ИННФЛ") Тогда
					НовСтр.Значение = ?(ДопПараметры.ИндексЛистаМЧБ = 0, СокрЛП(ДанныеРазделов8_12.СвПрод.ИННФЛ), "");
				Иначе
					НовСтр.Значение = "";
				КонецЕсли;
			Иначе
				НовСтр.Значение = "";
			КонецЕсли;
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П001100011004";
			Если ТипЗнЧ(ДанныеРазделов8_12.СвПрод) = Тип("Структура") Тогда
				Если ДанныеРазделов8_12.СвПрод.Свойство("КПП") Тогда
					НовСтр.Значение = ?(ДопПараметры.ИндексЛистаМЧБ = 0, СокрЛП(ДанныеРазделов8_12.СвПрод.КПП), "");
				Иначе
					НовСтр.Значение = "";
				КонецЕсли;
			Иначе
				НовСтр.Значение = "";
			КонецЕсли;
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
		Иначе
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П001100000103";
			Если СтруктураРеквизитовФормы.ВидДокумента = 1 Тогда
				Если СтруктураРеквизитовФормы.АктуальностьСведенийРаздел11 = 1 Тогда
					НовСтр.Значение = "1";
				Иначе
					НовСтр.Значение = "0";
				КонецЕсли;
			Иначе
				НовСтр.Значение = "-";
			КонецЕсли;
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П001100000503";
			НовСтр.Значение = 0;
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=12;ЧДЦ=0;ЧН=-;ЧГ=");
			
			Для НомСтрКод = 1 По 7 Цикл
				НовСтр = Показатели.Добавить();
				НовСтр.Имя = "П001100002003_" + НомСтрКод;
				НовСтр.Значение = "";
				НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			КонецЦикла;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П001100003003";
			НовСтр.Значение = "";
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П001100004003";
			НовСтр.Значение = "";
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П001100005003";
			НовСтр.Значение = 0;
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=3;ЧДЦ=0;ЧН=-;ЧГ=");
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П001100006003";
			НовСтр.Значение = "";
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П001100007003";
			НовСтр.Значение = "";
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П001100008003";
			НовСтр.Значение = "";
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П001100009003";
			НовСтр.Значение = 0;
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=3;ЧДЦ=0;ЧН=-;ЧГ=");
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П001100010003";
			НовСтр.Значение = "";
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П001100011003";
			НовСтр.Значение = "";
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П001100011004";
			НовСтр.Значение = "";
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
		КонецЕсли;
		
	ИначеЕсли ИмяРаздела + ДопПараметры.ПостфиксВИмениРаздела = "Раздел11_Прод" Тогда
		
		Если НЕ ДопПараметры.ПечатьПустыхБланков Тогда
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П001100012003";
			Если ТипЗнЧ(ДанныеРазделов8_12.СвКомис) = Тип("Структура") Тогда
				Если ДанныеРазделов8_12.СвКомис.Свойство("ИННЮЛ") Тогда
					НовСтр.Значение = СокрЛП(ДанныеРазделов8_12.СвКомис.ИННЮЛ) + "--";
				ИначеЕсли ДанныеРазделов8_12.СвКомис.Свойство("ИННФЛ") Тогда
					НовСтр.Значение = СокрЛП(ДанныеРазделов8_12.СвКомис.ИННФЛ);
				Иначе
					НовСтр.Значение = "";
				КонецЕсли;
			Иначе
				НовСтр.Значение = "";
			КонецЕсли;
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П001100012004";
			Если ТипЗнЧ(ДанныеРазделов8_12.СвКомис) = Тип("Структура") Тогда
				Если ДанныеРазделов8_12.СвКомис.Свойство("КПП") Тогда
					НовСтр.Значение = СокрЛП(ДанныеРазделов8_12.СвКомис.КПП);
				Иначе
					НовСтр.Значение = "";
				КонецЕсли;
			Иначе
				НовСтр.Значение = "";
			КонецЕсли;
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П001100013003";
			НовСтр.Значение = СокрЛП(ДанныеРазделов8_12.КодВидСд);
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П001100014003";
			НовСтр.Значение = СокрЛП(ДанныеРазделов8_12.ОКВ);
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П001100015003";
			НовСтр.Значение = ?(ТипЗнч(ДанныеРазделов8_12.СтоимТовСчФВс) = Тип("Число"), ДанныеРазделов8_12.СтоимТовСчФВс, 0);
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=19;ЧДЦ=2;ЧН=-;ЧРД=.;ЧГ=");
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П001100016003";
			НовСтр.Значение = ?(ТипЗнч(ДанныеРазделов8_12.СумНДССчФ) = Тип("Число"), ДанныеРазделов8_12.СумНДССчФ, 0);
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=19;ЧДЦ=2;ЧН=-;ЧРД=.;ЧГ=");
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П001100017003";
			НовСтр.Значение = ?(ТипЗнч(ДанныеРазделов8_12.РазСтКСчФУм) = Тип("Число"), ДанныеРазделов8_12.РазСтКСчФУм, 0);
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=19;ЧДЦ=2;ЧН=-;ЧРД=.;ЧГ=");
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П001100018003";
			НовСтр.Значение = ?(ТипЗнч(ДанныеРазделов8_12.РазСтКСчФУв) = Тип("Число"), ДанныеРазделов8_12.РазСтКСчФУв, 0);
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=19;ЧДЦ=2;ЧН=-;ЧРД=.;ЧГ=");
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П001100019003";
			НовСтр.Значение = ?(ТипЗнч(ДанныеРазделов8_12.РазНДСКСчФУм) = Тип("Число"), ДанныеРазделов8_12.РазНДСКСчФУм, 0);
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=19;ЧДЦ=2;ЧН=-;ЧРД=.;ЧГ=");
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П001100020003";
			НовСтр.Значение = ?(ТипЗнч(ДанныеРазделов8_12.РазНДСКСчФУв) = Тип("Число"), ДанныеРазделов8_12.РазНДСКСчФУв, 0);
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=19;ЧДЦ=2;ЧН=-;ЧРД=.;ЧГ=");
			
		Иначе
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П001100012003";
			НовСтр.Значение = "";
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П001100012004";
			НовСтр.Значение = "";
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П001100013003";
			НовСтр.Значение = "";
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П001100014003";
			НовСтр.Значение = "";
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П001100015003";
			НовСтр.Значение = 0;
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=19;ЧДЦ=2;ЧН=-;ЧРД=.;ЧГ=");
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П001100016003";
			НовСтр.Значение = 0;
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=19;ЧДЦ=2;ЧН=-;ЧРД=.;ЧГ=");
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П001100017003";
			НовСтр.Значение = 0;
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=19;ЧДЦ=2;ЧН=-;ЧРД=.;ЧГ=");
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П001100018003";
			НовСтр.Значение = 0;
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=19;ЧДЦ=2;ЧН=-;ЧРД=.;ЧГ=");
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П001100019003";
			НовСтр.Значение = 0;
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=19;ЧДЦ=2;ЧН=-;ЧРД=.;ЧГ=");
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П001100020003";
			НовСтр.Значение = 0;
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=19;ЧДЦ=2;ЧН=-;ЧРД=.;ЧГ=");
			
		КонецЕсли;
		
	ИначеЕсли ИмяРаздела + ДопПараметры.ПостфиксВИмениРаздела = "Раздел12" Тогда
		
		Если НЕ ДопПараметры.ПечатьПустыхБланков Тогда
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П001200000103";
			Если ДопПараметры.ЭтоПерваяСтраницаРаздела Тогда
				Если СтруктураРеквизитовФормы.ВидДокумента = 1 Тогда
					Если СтруктураРеквизитовФормы.АктуальностьСведенийРаздел12 = 1 Тогда
						НовСтр.Значение = "1";
					Иначе
						НовСтр.Значение = "0";
					КонецЕсли;
				Иначе
					НовСтр.Значение = "-";
				КонецЕсли;
			Иначе
				НовСтр.Значение = "-";
			КонецЕсли;
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П001200002003";
			НовСтр.Значение = СокрЛП(ДанныеРазделов8_12.НомСчФ);
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П001200003003";
			НовСтр.Значение = СтрЗаменить(СокрЛП(ДанныеРазделов8_12.ДатаСчФ), ".", "");
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П001200004003";
			Если ТипЗнЧ(ДанныеРазделов8_12.СвПокуп) = Тип("Структура") Тогда
				Если ДанныеРазделов8_12.СвПокуп.Свойство("ИННЮЛ") Тогда
					НовСтр.Значение = СокрЛП(ДанныеРазделов8_12.СвПокуп.ИННЮЛ) + "--";
				ИначеЕсли ДанныеРазделов8_12.СвПокуп.Свойство("ИННФЛ") Тогда
					НовСтр.Значение = СокрЛП(ДанныеРазделов8_12.СвПокуп.ИННФЛ);
				Иначе
					НовСтр.Значение = "";
				КонецЕсли;
			Иначе
				НовСтр.Значение = "";
			КонецЕсли;
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П001200004004";
			Если ТипЗнЧ(ДанныеРазделов8_12.СвПокуп) = Тип("Структура") Тогда
				Если ДанныеРазделов8_12.СвПокуп.Свойство("КПП") Тогда
					НовСтр.Значение = СокрЛП(ДанныеРазделов8_12.СвПокуп.КПП);
				Иначе
					НовСтр.Значение = "";
				КонецЕсли;
			Иначе
				НовСтр.Значение = "";
			КонецЕсли;
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П001200005003";
			НовСтр.Значение = СокрЛП(ДанныеРазделов8_12.ОКВ);
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П001200006003";
			НовСтр.Значение = ?(ТипЗнч(ДанныеРазделов8_12.СтоимТовБНалВс) = Тип("Число"), ДанныеРазделов8_12.СтоимТовБНалВс, 0);
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=19;ЧДЦ=2;ЧН=-;ЧРД=.;ЧГ=");
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П001200007003";
			НовСтр.Значение = ?(ТипЗнч(ДанныеРазделов8_12.СумНалПокуп) = Тип("Число"), ДанныеРазделов8_12.СумНалПокуп, 0);
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=19;ЧДЦ=2;ЧН=-;ЧРД=.;ЧГ=");
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П001200008003";
			НовСтр.Значение = ?(ТипЗнч(ДанныеРазделов8_12.СтоимТовСНалВс) = Тип("Число"), ДанныеРазделов8_12.СтоимТовСНалВс, 0);
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=19;ЧДЦ=2;ЧН=-;ЧРД=.;ЧГ=");
			
		Иначе
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П001200000103";
			Если СтруктураРеквизитовФормы.ВидДокумента = 1 Тогда
				Если СтруктураРеквизитовФормы.АктуальностьСведенийРаздел12 = 1 Тогда
					НовСтр.Значение = "1";
				Иначе
					НовСтр.Значение = "0";
				КонецЕсли;
			Иначе
				НовСтр.Значение = "-";
			КонецЕсли;
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П001200002003";
			НовСтр.Значение = "";
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П001200003003";
			НовСтр.Значение = "";
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П001200004003";
			НовСтр.Значение = "";
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П001200004004";
			НовСтр.Значение = "";
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П001200005003";
			НовСтр.Значение = "";
			НовСтр.ЗначениеМЧБ = НовСтр.Значение;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П001200006003";
			НовСтр.Значение = 0;
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=19;ЧДЦ=2;ЧН=-;ЧРД=.;ЧГ=");
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П001200007003";
			НовСтр.Значение = 0;
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=19;ЧДЦ=2;ЧН=-;ЧРД=.;ЧГ=");
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П001200008003";
			НовСтр.Значение = 0;
			НовСтр.ЗначениеМЧБ = Формат(НовСтр.Значение, "ЧЦ=19;ЧДЦ=2;ЧН=-;ЧРД=.;ЧГ=");
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПоказателиПечатногоБланка(ПараметрыПечати,
								  МакетМЧБ,
								  ОбщиеРеквизитыРазделов,
								  ДанныеРазделов8_12 = Неопределено,
								  ДопПараметры = Неопределено)
	
	Показатели = Новый ТаблицаЗначений;
	Показатели.Колонки.Добавить("Имя");
	Показатели.Колонки.Добавить("Значение");
	Показатели.Колонки.Добавить("ЗначениеМЧБ");
	
	Показатели.Индексы.Добавить("Имя");
	
	Если ПараметрыПечати.ИмяСтраницы = "Раздел8"
	 ИЛИ ПараметрыПечати.ИмяСтраницы = "Раздел8_Прил1"
	 ИЛИ ПараметрыПечати.ИмяСтраницы = "Раздел9"
	 ИЛИ ПараметрыПечати.ИмяСтраницы = "Раздел9_Прил1"
	 ИЛИ ПараметрыПечати.ИмяСтраницы = "Раздел10"
	 ИЛИ ПараметрыПечати.ИмяСтраницы = "Раздел11"
	 ИЛИ ПараметрыПечати.ИмяСтраницы = "Раздел12" Тогда
		
		ЗаполнитьПоказателиРазделов8_12(Показатели, ПараметрыПечати.ИмяСтраницы, ДанныеРазделов8_12, ДопПараметры);
		
	Иначе
		
		ИсходныйМакет = ТабличныйДокумент;
		
		Для Каждого Область Из ИсходныйМакет.Области Цикл
			
			Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник
			   И Область.СодержитЗначение = Истина Тогда
			   
				НовСтр = Показатели.Добавить();
				НовСтр.Имя = Область.Имя;
				НовСтр.Значение = Область.Значение;
				НовСтр.ЗначениеМЧБ = ПолучитьЗначениеМЧБ(Область);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	НайденноеЗначение = Показатели.Найти("ИНН1", "Имя");
	
	Если НЕ НайденноеЗначение = Неопределено Тогда
		Показатели.Удалить(НайденноеЗначение);
	КонецЕсли;
		
	ИНН = "";
	Для Ном = 0 По 11 Цикл
		ИНН = ИНН + ОбщиеРеквизитыРазделов.ИНН[Ном];
	КонецЦикла;
	
	НовСтр = Показатели.Добавить();
	НовСтр.Имя = "ИНН1";
	НовСтр.Значение = ИНН;
	НовСтр.ЗначениеМЧБ = СокрЛП(ИНН);
	
	НовСтр = Показатели.Добавить();
	НовСтр.Имя = "ИНН2";
	НовСтр.Значение = ИНН;
	НовСтр.ЗначениеМЧБ = СокрЛП(ИНН);
	
	НайденноеЗначение = Показатели.Найти("КПП1", "Имя");
	
	Если НЕ НайденноеЗначение = Неопределено Тогда
		Показатели.Удалить(НайденноеЗначение);
	КонецЕсли;
		
	КПП = "";
	Для Ном = 0 По 8 Цикл
		КПП = КПП + ОбщиеРеквизитыРазделов.КПП[Ном];
	КонецЦикла;
	
	НовСтр = Показатели.Добавить();
	НовСтр.Имя = "КПП1";
	НовСтр.Значение = КПП;
	НовСтр.ЗначениеМЧБ = СокрЛП(КПП);
	
	НовСтр = Показатели.Добавить();
	НовСтр.Имя = "КПП2";
	НовСтр.Значение = КПП;
	НовСтр.ЗначениеМЧБ = СокрЛП(КПП);
	
	НайденноеЗначение = Показатели.Найти("ДатаПодписи", "Имя");
	
	Если НЕ НайденноеЗначение = Неопределено Тогда
		Показатели.Удалить(НайденноеЗначение);
	КонецЕсли;
		
	ДатаПодписиСтр = "";
	Для Ном = 0 По 7 Цикл
		ДатаПодписиСтр = ДатаПодписиСтр + ОбщиеРеквизитыРазделов.ДатаПодписи[Ном];
	КонецЦикла;
	
	НовСтр = Показатели.Добавить();
	НовСтр.Имя = "ДатаПодписи";
	НовСтр.Значение = ДатаПодписиСтр;
	НовСтр.ЗначениеМЧБ = СокрЛП(ДатаПодписиСтр);
	
	НовСтр = Показатели.Добавить();
	НовСтр.Имя = "ДатаПодписиПолная";
	Если СокрЛП(ДатаПодписиСтр) <> "" Тогда
		НовСтр.Значение = Формат(Дата(Прав(ДатаПодписиСтр, 4)
									+ Сред(ДатаПодписиСтр, 3, 2)
									+ Лев(ДатаПодписиСтр, 2) + "000000"),
								"ДФ = ""дд.ММ.гггг""");
		НовСтр.ЗначениеМЧБ = СокрЛП(Формат(Дата(Прав(ДатаПодписиСтр, 4)
										 	  + Сред(ДатаПодписиСтр, 3, 2)
											  + Лев(ДатаПодписиСтр, 2) + "000000"),
									"ДФ = ""дд.ММ.гггг"""));
	КонецЕсли;
	
	// Особая обработка ФИО на титульном листе.
	Если ПараметрыПечати.ИмяСтраницы = "Титульный" Тогда
		
		ПокПодписант = Показатели.Найти("ОргПодписант", "Имя");
		Если ПокПодписант <> Неопределено Тогда
			
			ФИО = РегламентированнаяОтчетность.РазложитьФИО(ПокПодписант.Значение);
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "ОргПодписантФамилия";
			НовСтр.Значение = ФИО.Фамилия;
			НовСтр.ЗначениеМЧБ = ФИО.Фамилия;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "ОргПодписантИмя";
			НовСтр.Значение = ФИО.Имя;
			НовСтр.ЗначениеМЧБ = ФИО.Имя;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "ОргПодписантОтчество";
			НовСтр.Значение = ФИО.Отчество;
			НовСтр.ЗначениеМЧБ = ФИО.Отчество;
			
		КонецЕсли;
		
		// Особая обработка ОКВЭД.
		ПокОКВЭД = Показатели.Найти("ОКВЭД", "Имя");
		Если ПокОКВЭД <> Неопределено Тогда
			ОКВЭД = ПокОКВЭД.ЗначениеМЧБ;
			Если Сред(ОКВЭД, 2, 1) = "." Тогда
				ОКВЭД = Лев(ОКВЭД, 1) + " " + Сред(ОКВЭД, 2);
			КонецЕсли;
			Если Сред(ОКВЭД, 5, 1) = "." Тогда
				ОКВЭД = Лев(ОКВЭД, 4) + " " + Сред(ОКВЭД, 5);
			КонецЕсли;
			
			ОКВЭД = СтрЗаменить(ОКВЭД, ".", "");
			
			ПокОКВЭД.Значение = ОКВЭД;
			ПокОКВЭД.ЗначениеМЧБ = ОКВЭД;
		КонецЕсли;
		
	ИначеЕсли ПараметрыПечати.ИмяСтраницы = "Раздел2" Тогда
		
		ОблПок = ИсходныйМакет.Области.Найти("П000200007003");
		
		Если ОблПок <> Неопределено И СокрЛП(ОблПок.Значение) = "1011715" Тогда
			
			МасПок = Показатели.НайтиСтроки(Новый Структура("Имя", "П000200001003"));
			Если МасПок.Количество() = 1 Тогда
				МасПок[0].Значение = "";
				МасПок[0].ЗначениеМЧБ = "";
			КонецЕсли;
			
			МасПок = Показатели.НайтиСтроки(Новый Структура("Имя", "П000200002003"));
			Если МасПок.Количество() = 1 Тогда
				МасПок[0].Значение = "";
				МасПок[0].ЗначениеМЧБ = "";
			КонецЕсли;
			
			МасПок = Показатели.НайтиСтроки(Новый Структура("Имя", "П000200003003"));
			Если МасПок.Количество() = 1 Тогда
				МасПок[0].Значение = "";
				МасПок[0].ЗначениеМЧБ = "";
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Показатели;
	
КонецФункции

&НаСервере
Функция ИндексыТочекПоКорню(МакетМЧБ)
	
	ИндексТочкиПоКорню = Новый Структура;
	
	НайденнаяОбласть = МакетМЧБ.НайтиТекст(".", , , , Истина);
	
	Пока НЕ НайденнаяОбласть = Неопределено Цикл
		
		ТекАдресЗначенияОбласти = АдресЗначенияОбласти(НайденнаяОбласть);
		
		ИндексТочкиПоКорню.Вставить(ТекАдресЗначенияОбласти.Корень, ТекАдресЗначенияОбласти.ИндексЗнакоместа);
		
		НайденнаяОбласть = МакетМЧБ.НайтиТекст(".", НайденнаяОбласть, , , Истина);
		
	КонецЦикла;
	
	Возврат ИндексТочкиПоКорню;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьМакетМЧБ(МакетМЧБ, Показатели, ИндексТочкиПоКорню, Парам1)
	
	Для Каждого Показатель Из Показатели Цикл
		
		ИмяОбластиСИндексом = Истина;
		
		ОбластьПечатногоБланка = МакетМЧБ.Области.Найти(Показатель.Имя + "_1");
		
		Если ОбластьПечатногоБланка = Неопределено Тогда
			
			ОбластьПечатногоБланка = МакетМЧБ.Области.Найти(Показатель.Имя + "1");
			
		КонецЕсли;
		
		Если ОбластьПечатногоБланка = Неопределено Тогда
			
			ИмяОбластиСИндексом = Ложь;
			
			ОбластьПечатногоБланка = МакетМЧБ.Области.Найти(Показатель.Имя);
			
		КонецЕсли;
		
		Если НЕ ОбластьПечатногоБланка = Неопределено Тогда
			
			Если НЕ ОбластьПечатногоБланка.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник
				ИЛИ СтрЧислоВхождений(ОбластьПечатногоБланка.Имя, "НомСтр") > 0
				ИЛИ СтрЧислоВхождений(ОбластьПечатногоБланка.Имя, "СоставленаНа") > 0 Тогда
				
				Продолжить;
				
			ИначеЕсли НЕ ИмяОбластиСИндексом Тогда
				
				ПрисвоитьЗначениеОбласти(ОбластьПечатногоБланка, Показатель.ЗначениеМЧБ);
				
				Продолжить;
				
			КонецЕсли;
			
			ТипЗначенияПоказателя = ТипЗнч(Показатель.Значение);
			
			ДополнятьСправа = ТипЗначенияПоказателя <> Тип("Строка") ИЛИ НЕ ЗначениеЗаполнено(Показатель.Значение);
			
			Если ТипЗначенияПоказателя = Тип("Число") Тогда
				
				// Разделение числа на 2 части.
				ЦелаяЧасть = Цел(Показатель.Значение);
				СтрЦелаяЧасть = СтрЗаменить(Строка(Формат(Цел(Показатель.Значение), "ЧРГ=';'")), ";", "");
				
				Если Показатель.Значение < 0 И СтрНайти(Показатель.ЗначениеМЧБ, ".") > 0 Тогда
					СтрДробнаяЧасть = Сред(Строка(Показатель.Значение - ЦелаяЧасть), 4);
				Иначе
					СтрДробнаяЧасть = Сред(Строка(Показатель.Значение - ЦелаяЧасть), 3);
				КонецЕсли;
				
				ИндексТочкиЧислаНаМЧБ = Неопределено;
				
				ИндексТочкиПоКорню.Свойство(Показатель.Имя, ИндексТочкиЧислаНаМЧБ);
				
			КонецЕсли;
			
			ИндексЗнакоместа = 1;
			
			ОбластьПечатногоБланка = МакетМЧБ.Области.Найти(Показатель.Имя + "_" + ИндексЗнакоместа);
			
			Если ОбластьПечатногоБланка = Неопределено Тогда
				
				ОбластьПечатногоБланка = МакетМЧБ.Области.Найти(Показатель.Имя + ИндексЗнакоместа);
				
			КонецЕсли;
			
			Пока НЕ ОбластьПечатногоБланка = Неопределено Цикл
				
				Если ТипЗначенияПоказателя = Тип("Число") Тогда
					
					Если ИндексТочкиЧислаНаМЧБ = Неопределено Тогда
						
						ПрисвоитьЗначениеОбласти(ОбластьПечатногоБланка, Показатель.ЗначениеМЧБ, ИндексЗнакоместа);
						
					ИначеЕсли ИндексЗнакоместа < ИндексТочкиЧислаНаМЧБ Тогда
						
						ПрисвоитьЗначениеОбласти(ОбластьПечатногоБланка,
						?(Показатель.ЗначениеМЧБ = "-", "-", СтрЦелаяЧасть), ИндексЗнакоместа);
						
					ИначеЕсли ИндексЗнакоместа > ИндексТочкиЧислаНаМЧБ Тогда
						
						ПрисвоитьЗначениеОбласти(ОбластьПечатногоБланка, СтрДробнаяЧасть, ИндексЗнакоместа - ИндексТочкиЧислаНаМЧБ);
						
					КонецЕсли;
					
				Иначе
					
					ПрисвоитьЗначениеОбласти(ОбластьПечатногоБланка, Показатель.ЗначениеМЧБ, ИндексЗнакоместа, ДополнятьСправа);
					
				КонецЕсли;
				
				ИндексЗнакоместа = ИндексЗнакоместа + 1;
				
				ОбластьПечатногоБланка = МакетМЧБ.Области.Найти(Показатель.Имя + "_" + ИндексЗнакоместа);
				
				Если ОбластьПечатногоБланка = Неопределено Тогда
					
					ОбластьПечатногоБланка = МакетМЧБ.Области.Найти(Показатель.Имя + ИндексЗнакоместа);
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	КоличествоСтраниц = 1;
	
	Если Парам1.ИмяСтраницы = "Раздел3" Тогда
		
		КоличествоСтраниц = 2;
		
	КонецЕсли;
	
	Для НомерСтраницы = 1 По КоличествоСтраниц Цикл
		
		СтроковоеПредставлениеНомераСтраницы = Формат(Парам1.НомерСтраницы, "ЧЦ=3; ЧВН=");
		
		Для ИндексЗнакоместа = 1 По 3 Цикл
			
			ОбластьПечатногоБланка = МакетМЧБ.Области.Найти("НомСтр" + ИндексЗнакоместа);
			
			Если НомерСтраницы > 1 Тогда
				
				ОбластьПечатногоБланка = МакетМЧБ.Области.Найти("НомСтр_" + ИндексЗнакоместа);
				
			КонецЕсли;	
			
			Если НЕ ОбластьПечатногоБланка = Неопределено Тогда
				
				ПрисвоитьЗначениеОбласти(ОбластьПечатногоБланка, СтроковоеПредставлениеНомераСтраницы, ИндексЗнакоместа);
				
				Продолжить;
				
			КонецЕсли;
			
			ОбластьПечатногоБланка = МакетМЧБ.Области.Найти("СоставленаНа" + ИндексЗнакоместа);
			
			Если НЕ ОбластьПечатногоБланка = Неопределено Тогда
				
				СтроковоеПредставлениеНомераСтраницы = Формат(Парам1.НомерСтраницы - 1, "ЧЦ=3; ЧВН=");
				
				ПрисвоитьЗначениеОбласти(ОбластьПечатногоБланка, СтроковоеПредставлениеНомераСтраницы, ИндексЗнакоместа);
				
			КонецЕсли
			
		КонецЦикла;
		
		Если Парам1.ИмяСтраницы = "Титульный" Тогда
			
			Парам1.НомерСтраницы = 2;
			
		Иначе
			
			Парам1.НомерСтраницы = Парам1.НомерСтраницы + 1;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьОбщиеРеквизитыСТитульногоЛиста()
	
	МассивИНН         = Новый Массив(12);
	МассивКПП         = Новый Массив(9);
	МассивДатаПодписи = Новый Массив(8);
	
	ИсходныйМакет = ТабличныйДокумент;
	
	Область = ИсходныйМакет.Области.Найти("ИНН1");
	
	Если НЕ Область = Неопределено Тогда
		
		СтрИНН = Область.Значение;
		
		Если СтрДлина(СтрИНН) = 10 Тогда
			СтрИНН = СтрИНН + "--";
		КонецЕсли;
		
		Для Ном = 1 По СтрДлина(СтрИНН) Цикл
			
			МассивИНН[Ном - 1] = Сред(СтрИНН, Ном, 1);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Область = ИсходныйМакет.Области.Найти("КПП1");
	
	Если НЕ Область = Неопределено Тогда
		
		Для Ном = 1 По СтрДлина(Область.Значение) Цикл
			
			МассивКПП[Ном - 1] = Сред(Область.Значение, Ном, 1);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Область = ИсходныйМакет.Области.Найти("ДатаПодписи");
	
	Если НЕ Область = Неопределено Тогда
		
		Если ЗначениеЗаполнено(Область.Значение) Тогда
			Если ТипЗнч(Область.Значение) = Тип("Строка") Тогда
				СтрДатаПодписи = Лев(СтрЗаменить(Область.Значение, ".", ""), 8);
			ИначеЕсли ТипЗнч(Область.Значение) = Тип("Дата") Тогда
				СтрДатаПодписи = Лев(СтрЗаменить(Формат(Область.Значение, "ДФ = ""дд.ММ.гггг 'г.'"""), ".", ""), 8);
			КонецЕсли;
		Иначе
			СтрДатаПодписи = "        ";
		КонецЕсли;
		
		Для Ном = 1 По СтрДлина(СтрДатаПодписи) Цикл
			МассивДатаПодписи[Ном - 1] = Сред(СтрДатаПодписи, Ном, 1);
		КонецЦикла;
		
	КонецЕсли;
	
	ОбщиеРеквизитыРазделов = Новый Структура;
	
	ОбщиеРеквизитыРазделов.Вставить("ИНН", МассивИНН);
	ОбщиеРеквизитыРазделов.Вставить("КПП", МассивКПП);
	ОбщиеРеквизитыРазделов.Вставить("ДатаПодписи", МассивДатаПодписи);
	
	Возврат ОбщиеРеквизитыРазделов;
	
КонецФункции

&НаСервере
Процедура ОбнулитьИтоговыеПоказателиНаЛистеМЧБ(ТаблДок)
	
	ИменаОбластейИтоговыхПоказателей = Новый Массив;
	
	ИменаОбластейИтоговыхПоказателей.Добавить("ИтоговыеПоказатели");
	ИменаОбластейИтоговыхПоказателей.Добавить("ИтоговыеПоказатели1");
	ИменаОбластейИтоговыхПоказателей.Добавить("ИтоговыеПоказатели2");
	
	Для каждого ИмяОбластиИтоговыхПоказателей Из ИменаОбластейИтоговыхПоказателей Цикл
		
		ОбластьИтоговыеПоказатели = ТаблДок.Области.Найти(ИмяОбластиИтоговыхПоказателей);
		
		Если ОбластьИтоговыеПоказатели <> Неопределено Тогда
			
			ОбластьИтоговыеПоказателиВерх = ОбластьИтоговыеПоказатели.Верх;
			ОбластьИтоговыеПоказателиНиз = ОбластьИтоговыеПоказатели.Низ;
			
			Для Каждого Обл Из ТаблДок.Области Цикл
				
				Если Обл.ГраницаСлева = Неопределено
					ИЛИ СтрНайти(Обл.Имя, "П0") = 0 Тогда
					Продолжить;
				КонецЕсли;
				
				Если Обл.Верх >= ОбластьИтоговыеПоказателиВерх
					И Обл.Низ <= ОбластьИтоговыеПоказателиНиз
					И Обл.ГраницаСлева.ТипЛинии = ТипЛинииЯчейкиТабличногоДокумента.Точечная Тогда
					
					Если Обл.СодержитЗначение = Истина Тогда // возможны 3 состояния
						Обл.Значение = "-";
					Иначе
						Обл.Текст = "-";
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьЗначениеМЧБ(Область)
	
	ТипЗначения = ТипЗнч(Область.Значение);
	Если ТипЗначения = Тип("Число") Тогда
		ФорматОбласти = Область.Формат;
		СоотвСтрокаФормата = РазобратьСтрокуФормата(ФорматОбласти);
		СоотвСтрокаФормата.Вставить("ЧРД", ".");
		СоотвСтрокаФормата.Вставить("ЧГ", "");
		Результат = Формат(Область.Значение, СобратьСтрокуФормата(СоотвСтрокаФормата));
	ИначеЕсли ТипЗначения = Тип("Строка") Тогда
		Результат = СокрЛП(Область.Значение);
	ИначеЕсли ТипЗначения = Тип("Дата") Тогда
		Результат = Формат(Область.Значение, ?(ПустаяСтрока(Область.Формат), "ДФ=ddMMyyyy", Область.Формат));
	ИначеЕсли ТипЗначения = Тип("Булево") Тогда
		Результат = Формат(Область.Значение, Область.Формат);
	КонецЕсли;
	Возврат СокрЛП(Результат);
	
КонецФункции

&НаСервере
Функция АдресЗначенияОбласти(Область)
	
	Имя = Область.Имя;
	КореньИмениОбласти = Неопределено;
	СтрИндексЗнакоместа = "";
	ИндексЗнакоместа = 0;
	ДлинаИмени = СтрДлина(Имя);
	Для ИндексВхождения = 1 По ДлинаИмени Цикл
		СтрИндексЗнакоместа = Сред(Имя, ДлинаИмени - ИндексВхождения + 1);
		Если СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(СтрИндексЗнакоместа) Тогда
			КореньИмениОбласти = Лев(Имя, ДлинаИмени - ИндексВхождения);
			ИндексЗнакоместа = Число(СтрИндексЗнакоместа);
		Иначе
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если Прав(КореньИмениОбласти, 1) = "_" Тогда
		КореньИмениОбласти = Лев(КореньИмениОбласти, СтрДлина(КореньИмениОбласти) - 1);
	КонецЕсли;
	
	Возврат Новый Структура("Корень, ИндексЗнакоместа", КореньИмениОбласти, ИндексЗнакоместа);
	
КонецФункции

&НаСервере
Процедура ПрисвоитьЗначениеОбласти(Область, Знач Значение, ИндексЗнакоместа = 0, ДополнятьСправа_ = Истина)
	
	Если ИндексЗнакоместа <> 0 Тогда
		Если СтрДлина(Значение) >= ИндексЗнакоместа Тогда
			Значение = Сред(Значение, ИндексЗнакоместа, 1);
		Иначе
			Значение = ?(ДополнятьСправа_, "-", "");
		КонецЕсли;
	ИначеЕсли НЕ ЗначениеЗаполнено(Значение) Тогда
		Значение = "-";
	КонецЕсли;
	
	Если Область.СодержитЗначение = Истина Тогда
		Область.Значение = ВРЕГ(Значение);
	Иначе
		Область.Текст = ВРЕГ(Значение);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция РазобратьСтрокуФормата(Знач СтрокаФормата)
	
	ЗначенияПараметров = Новый Соответствие;
	Пока СтрНайти(СтрокаФормата, ";") <> 0 Цикл
		ВхождениеРазделителя = СтрНайти(СтрокаФормата, ";");
		ДоРазделителя = Лев(СтрокаФормата, ВхождениеРазделителя - 1);
		ВхождениеРавно = СтрНайти(ДоРазделителя, "=");
		Если ВхождениеРавно <> 0 И ВхождениеРавно <> 1 Тогда
			ЗначенияПараметров.Вставить(Лев(ДоРазделителя, ВхождениеРавно - 1), Сред(ДоРазделителя, ВхождениеРавно + 1));
		КонецЕсли;
		СтрокаФормата = Сред(СтрокаФормата, ВхождениеРазделителя + 1);
	КонецЦикла;
	ВхождениеРавно = СтрНайти(СтрокаФормата, "=");
	Если ВхождениеРавно <> 0 И ВхождениеРавно <> 1 Тогда
		ЗначенияПараметров.Вставить(Лев(СтрокаФормата, ВхождениеРавно - 1), Сред(СтрокаФормата, ВхождениеРавно + 1));
	КонецЕсли;
	Возврат ЗначенияПараметров;
	
КонецФункции

&НаСервере
Функция СобратьСтрокуФормата(ПараметрыФормата)
	
	СтрокаФормата = "";
	Для Каждого Параметр Из ПараметрыФормата Цикл
		СтрокаФормата = СтрокаФормата + "; " + Параметр.Ключ + "=" + Параметр.Значение;
	КонецЦикла;
	Если НЕ ПустаяСтрока(СтрокаФормата) Тогда
		СтрокаФормата = Сред(СтрокаФормата, 3);
	КонецЕсли;
	Возврат СтрокаФормата;
	
КонецФункции

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если СтрНайти(Заголовок, СтруктураРеквизитовФормы.СтрПериодОтчета) = 0 Тогда
		Заголовок = Заголовок + " за " + СтруктураРеквизитовФормы.СтрПериодОтчета;
	КонецЕсли;
	
	ОргСтр = " (" + СтруктураРеквизитовФормы.НаимОрганизации + ")";
	Если СтрНайти(Заголовок, ОргСтр) = 0 Тогда
		Заголовок = Заголовок + ОргСтр;
	КонецЕсли;
	
	УстановитьДоступностьПризнакаАктуальностиРанееОтправленныхСведений();
	
	Заголовок = Заголовок + ?(СтрНайти(ЭтаФорма.ИмяФормы, "Внешний") > 0, " - внешний отчет", "");
	
	ПодключитьОбработчикОжидания("ВыполнитьПроверкуПередОткрытием", 0.1, Истина);
	
	ВывестиРезультатПроверки();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПроверкуПередОткрытием()
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПриОткрытииЗавершение", ЭтотОбъект);
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередОткрытиемФормыРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытииЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Модифицированность = Ложь;
		Закрыть();
		Возврат;
	КонецЕсли;
	
	Если СтруктураРеквизитовФормы.СформироватьФормуОтчетаАвтоматически Тогда
		
		ПараметрыОбработчикаОжидания = Новый Структура;
		ПараметрыОбработчикаОжидания.Вставить("МинимальныйИнтервал", 1);
		ПараметрыОбработчикаОжидания.Вставить("МаксимальныйИнтервал", 15);
		ПараметрыОбработчикаОжидания.Вставить("ТекущийИнтервал", 1);
		ПараметрыОбработчикаОжидания.Вставить("КоэффициентУвеличенияИнтервала", 1.4);
		
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
		
		ФормаДлительнойОперации = ОткрытьФорму("ОбщаяФорма.ДлительнаяОперация", Новый Структура(
		"ИдентификаторЗадания", СтруктураРеквизитовФормы.ИдентификаторЗадания), ЭтаФорма);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЗначенияПолейПоУмолчанию()
	
	ОбъектОтчета = ОбъектОтчета(ЭтаФорма.ИмяФормы);
	
	ОбъектОтчета.ЗаполнитьЗначенияПолейПоУмолчанию(СтруктураРеквизитовФормы.мВыбраннаяФорма,
												   СтруктураДанныхРаздел1,
												   ТаблицаСтраницыРаздела2,
												   СтруктураРеквизитовФормы);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗапретитьВводДанныхВОбласть(мСтруктураЦветовРаскраски, ОбрабатываемаяОбласть, ОчищатьЗначение = Истина)
	
	ЦветНедоступнойОбласти = мСтруктураЦветовРаскраски["_5"];
	
	ОбрабатываемаяОбласть.Защита   = Истина;
	ОбрабатываемаяОбласть.ЦветФона = ЦветНедоступнойОбласти;
	
	Если ОчищатьЗначение Тогда
		ТипЗначенияОбласти = ТипЗнч(ОбрабатываемаяОбласть.Значение);
		Если ТипЗначенияОбласти = Тип("Число") Тогда
			ОбрабатываемаяОбласть.Значение = 0;
		ИначеЕсли ТипЗначенияОбласти = Тип("Строка") Тогда
			ОбрабатываемаяОбласть.Значение = "";
		Иначе
			ОбрабатываемаяОбласть.Значение = Неопределено;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РазрешитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть, УчитыватьЦветАвтозапПоказателя = Ложь)
	
	ОбрабатываемаяОбласть.Защита = Ложь;
	
	Если УчитыватьЦветАвтозапПоказателя
		И Форма.СтруктураРеквизитовФормы.АвтозаполняемыеПоказатели.Свойство(ОбрабатываемаяОбласть.Имя) Тогда
		ЦветОбл = Форма.мСтруктураЦветовРаскраски["_3"];
	Иначе
		ЦветОбл = Форма.мСтруктураЦветовРаскраски["_0"];
	КонецЕсли;
	
	ОбрабатываемаяОбласть.ЦветФона = ЦветОбл;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьОбластей(Форма, ИмяТекРаздела)
	
	АвтоРасчПоказатели = Новый Массив;
	
	Если ИмяТекРаздела = "Титульный" Тогда
		
		Если РегламентированнаяОтчетностьВызовСервера.ИспользуетсяОднаОрганизация()
		 ИЛИ Форма.СтруктураРеквизитовФормы.ОтчетСформированОбработкойКонсолидацияОтчетностиПоНДС Тогда	
			
			ОрганизацияДляЗаполнения = Форма.ТабличныйДокумент.Области.ОрганизацииДляЗаполненияОтчета;
			ОрганизацияДляЗаполнения.Гиперссылка = Ложь;
			ОрганизацияДляЗаполнения.Текст = "";
			
		КонецЕсли;
		
		ОпределяющаяОбласть = Форма.ТабличныйДокумент.Области.КодФормыРеорганизации;
		
		ОбрабатываемаяОбласть1 = Форма.ТабличныйДокумент.Области.ИННРеорганизованнойОрганизации;
		ОбрабатываемаяОбласть2 = Форма.ТабличныйДокумент.Области.КППРеорганизованнойОрганизации;
		
		Если ПустаяСтрока(ОпределяющаяОбласть.Значение)
			ИЛИ ОпределяющаяОбласть.Значение = "0" Тогда
			
			ЗапретитьВводДанныхВОбласть(Форма.мСтруктураЦветовРаскраски, ОбрабатываемаяОбласть1);
			ЗапретитьВводДанныхВОбласть(Форма.мСтруктураЦветовРаскраски, ОбрабатываемаяОбласть2);
			
		Иначе
			
			РазрешитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть1);
			РазрешитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть2);
			
		КонецЕсли;
		
	ИначеЕсли ИмяТекРаздела = "Раздел1" Тогда
		
		Если Форма.СтруктураДанныхТитульный.ПоМесту = "231" Тогда
			
			РазрешитьВводДанныхВОбласть(Форма, Форма.ТабличныйДокумент.Области.П000100001003);
			
		Иначе
			
			ЗапретитьВводДанныхВОбласть(Форма.мСтруктураЦветовРаскраски, Форма.ТабличныйДокумент.Области.П000100001003, Ложь);
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Форма.ТабличныйДокумент.Области.П000100001003.Значение) Тогда
			
			РазрешитьВводДанныхВОбласть(Форма, Форма.ТабличныйДокумент.Области.П000100003003);
			АвтоРасчПоказатели.Добавить("П000100004003");
			АвтоРасчПоказатели.Добавить("П000100005003");
			
		Иначе
			
			ЗапретитьВводДанныхВОбласть(Форма.мСтруктураЦветовРаскраски, Форма.ТабличныйДокумент.Области.П000100003003);
			ЗапретитьВводДанныхВОбласть(Форма.мСтруктураЦветовРаскраски, Форма.ТабличныйДокумент.Области.П000100004003);
			ЗапретитьВводДанныхВОбласть(Форма.мСтруктураЦветовРаскраски, Форма.ТабличныйДокумент.Области.П000100005003);
			
		КонецЕсли;
		
		Если Форма.СтруктураДанныхТитульный.ПоМесту = "227" Тогда
			
			РазрешитьВводДанныхВОбласть(Форма, Форма.ТабличныйДокумент.Области.П000100006003);
			РазрешитьВводДанныхВОбласть(Форма, Форма.ТабличныйДокумент.Области.П000100007003);
			РазрешитьВводДанныхВОбласть(Форма, Форма.ТабличныйДокумент.Области.П000100008003);
			
		Иначе
			
			ЗапретитьВводДанныхВОбласть(Форма.мСтруктураЦветовРаскраски, Форма.ТабличныйДокумент.Области.П000100006003);
			ЗапретитьВводДанныхВОбласть(Форма.мСтруктураЦветовРаскраски, Форма.ТабличныйДокумент.Области.П000100007003);
			ЗапретитьВводДанныхВОбласть(Форма.мСтруктураЦветовРаскраски, Форма.ТабличныйДокумент.Области.П000100008003);
			
		КонецЕсли;
		
	ИначеЕсли ИмяТекРаздела = "Раздел2" Тогда
		
		Если СокрЛП(Форма.ТабличныйДокумент.Области.П000200007003.Значение) = "1011715" Тогда
			
			ЗапретитьВводДанныхВОбласть(Форма.мСтруктураЦветовРаскраски, Форма.ТабличныйДокумент.Области.П000200001003);
			ЗапретитьВводДанныхВОбласть(Форма.мСтруктураЦветовРаскраски, Форма.ТабличныйДокумент.Области.П000200002003);
			ЗапретитьВводДанныхВОбласть(Форма.мСтруктураЦветовРаскраски, Форма.ТабличныйДокумент.Области.П000200003003);
			
			Форма.ТабличныйДокумент.Области.П000200001003.Значение = "-";
			Форма.ТабличныйДокумент.Области.П000200002003.Значение = "-";
			Форма.ТабличныйДокумент.Области.П000200003003.Значение = "-";
			
		Иначе
			
			РазрешитьВводДанныхВОбласть(Форма, Форма.ТабличныйДокумент.Области.П000200001003, Истина);
			РазрешитьВводДанныхВОбласть(Форма, Форма.ТабличныйДокумент.Области.П000200002003, Истина);
			РазрешитьВводДанныхВОбласть(Форма, Форма.ТабличныйДокумент.Области.П000200003003, Истина);
			
			Если СокрЛП(Форма.ТабличныйДокумент.Области.П000200001003.Значение) = "-" Тогда
				Форма.ТабличныйДокумент.Области.П000200001003.Очистить();
			КонецЕсли;
			Если СокрЛП(Форма.ТабличныйДокумент.Области.П000200002003.Значение) = "-" Тогда
				Форма.ТабличныйДокумент.Области.П000200002003.Очистить();
			КонецЕсли;
			Если СокрЛП(Форма.ТабличныйДокумент.Области.П000200003003.Значение) = "-" Тогда
				Форма.ТабличныйДокумент.Области.П000200003003.Очистить();
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Для каждого ИмяПок Из АвтоРасчПоказатели Цикл
		Обл = Форма.ТабличныйДокумент.Область(ИмяПок);
		Если Форма.СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Тогда
			Обл.Защита = Ложь;
			Обл.ЦветФона = Форма.мСтруктураЦветовРаскраски["_0"];
		Иначе
			Обл.Защита = Истина;
			Обл.ЦветФона = Форма.мСтруктураЦветовРаскраски["_4"];
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОчисткаРегламентированногоОтчетаНаСервере(ИмяСтраницы, ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста, РежимОчистки, Многостраничность, КолВоСтраницВРазделе) Экспорт
	
	УдалятьсяВсеДопЭкземпляры = Ложь;
	
	Если СтрНайти(РежимОчистки, "ОчиститьТекущийРаздел") > 0 Тогда
		
		Если (Многостраничность) И (КолВоСтраницВРазделе > 1) Тогда
			ОчиститьПоказателиОтчетаЗаполняемыеИзИБНаСервере(ИмяСтраницы);
			РегламентированнаяОтчетность.ПолучитьСведенияОПоказателяхОтчета(ЭтаФорма);
			УдалятьсяВсеДопЭкземпляры = Истина;
		Иначе
			ОчиститьТабличноеПолеНаСервере(ИмяСтраницы);
		КонецЕсли;
		
		РегламентированнаяОтчетностьКлиентСервер.ПослеОчисткиРегламентированногоОтчета(
		ЭтаФорма, ИмяСтраницы, ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста);
		
		СформироватьДеревоРазделовОтчетаНаСервере();
		
	ИначеЕсли СтрНайти(РежимОчистки, "ОчиститьТекущийЭкземплярМногостраничногоРаздела") > 0 Тогда
		
		ОчиститьТабличноеПолеНаСервере(ИмяСтраницы);
		
		Если ИмяСтраницы = "Раздел5" Тогда
			РегламентированнаяОтчетностьКлиентСервер.СохранитьДанныеМногостраничногоРазделаВактивнойСтранице(
			ЭтаФорма, ИмяСтраницы, Ложь);
		КонецЕсли;
		
		РегламентированнаяОтчетностьКлиентСервер.ПослеОчисткиРегламентированногоОтчета(
		ЭтаФорма, ИмяСтраницы, ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста);
		
	КонецЕсли;
	
	Если ИмяСтраницы = "Титульный" Тогда
		Если Элементы.Найти("ДатаПодписи") = Неопределено Тогда
			Область = ТабличныйДокумент.Области.Найти("ДатаПодписи");
			Если НЕ Область = Неопределено Тогда
				Если ТипЗнч(Область.Значение) = Тип("Строка") Тогда
					ДатаПодписи = Лев(СтрЗаменить(Область.Значение, ".", ""), 8);
				ИначеЕсли ТипЗнч(Область.Значение) = Тип("Дата") Тогда
					Если ЗначениеЗаполнено(Область.Значение) Тогда
						ДатаПодписи = Лев(СтрЗаменить(Формат(Область.Значение, "ДФ = ""дд.ММ.гггг 'г.'"""), ".", ""), 8);
					Иначе
						ДатаПодписи = "        ";
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчисткаРегламентированногоОтчетаНаКлиенте(ИмяСтраницы, ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста, РежимОчистки, Многостраничность, КолВоСтраницВРазделе) Экспорт
	
	УдалятьсяВсеДопЭкземпляры = Ложь;
	
	Если СтрНайти(РежимОчистки, "ОчиститьТекущийРаздел") > 0 Тогда
		
		Если (Многостраничность) И (КолВоСтраницВРазделе > 1) Тогда
			РегламентированнаяОтчетностьКлиентСервер.ОчиститьПоказателиОтчетаЗаполняемыеИзИБ(ЭтаФорма, ИмяСтраницы);
			УдалятьсяВсеДопЭкземпляры = Истина;
		Иначе
			ОчиститьТабличноеПолеНаКлиенте(ИмяСтраницы);
		КонецЕсли;
		
		РегламентированнаяОтчетностьКлиентСервер.ПослеОчисткиРегламентированногоОтчета(
		ЭтаФорма, ИмяСтраницы, ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста);
		
		СформироватьДеревоРазделовОтчетаНаКлиенте();
		
	ИначеЕсли СтрНайти(РежимОчистки, "ОчиститьТекущийЭкземплярМногостраничногоРаздела") > 0 Тогда
		
		ОчиститьТабличноеПолеНаКлиенте(ИмяСтраницы);
		
		РегламентированнаяОтчетностьКлиентСервер.ПослеОчисткиРегламентированногоОтчета(
		ЭтаФорма, ИмяСтраницы, ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьАвто(Команда) Экспорт
	
	Отказ = Ложь;
	
	РегламентированнаяОтчетностьКлиентПереопределяемый.ПроверитьВозможностьАвтоЗаполненияРеглОтчета(ИмяФормы, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ АвтоЗаполнениеРеглОтчетаДоступно()
		ИЛИ Элементы.НаименованиеЭтапа.Заголовок = "Сдано" Тогда
		
		ПоказатьПредупреждение(, НСтр("ru='Декларация по НДС сдана. Автоматическое заполнение запрещено.
		|Для подготовки уточненной декларации создайте новый отчет.'"));
		Возврат;
		
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("Команда", Команда);
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьАвтоПредупредитьОСохранении", ЭтотОбъект, ДополнительныеПараметры);
	
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередЗаполнениемРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаСервере
Функция АвтоЗаполнениеРеглОтчетаДоступно()
	
	СтруктураРеквизитовФормы.АвтоЗаполнениеРеглОтчетаДоступно = (НЕ СведенияПоОтправкам.СтатусОтправкиРеглОтчета(
	СтруктураРеквизитовФормы.мСохраненныйДок) = Перечисления.СтатусыОтправки.Сдан);
	
	Возврат СтруктураРеквизитовФормы.АвтоЗаполнениеРеглОтчетаДоступно;
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьАвтоПредупредитьОСохранении(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьАвтоСохранениеОтчета", ЭтотОбъект, ДополнительныеПараметры);
	
	ТекстВопроса = НСтр("ru = 'Автоматическое заполнение приведет к сохранению отчета с новыми данными. Заполнить отчет?'");
	
	Кнопки = Новый СписокЗначений;
	Кнопки.Добавить("Заполнить", "Заполнить и сохранить");
	Кнопки.Добавить("НеЗаполнять", "Не заполнять");
	
	КнопкаПоУмолчанию = "НеЗаполнять";
	
	ЗаголовокВопроса = НСтр("ru = 'Автоматическое заполнение отчета'");
	
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, Кнопки, , КнопкаПоУмолчанию, ЗаголовокВопроса);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьАвтоСохранениеОтчета(ОтветПользователя, ДополнительныеПараметры) Экспорт
	
	Если ОтветПользователя <> "Заполнить" Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураРеквизитовФормы.УспешноеАвтозаполнение = Ложь;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
	"ЗаполнитьАвтоПослеСохранениеОтчета", ЭтотОбъект, ДополнительныеПараметры);
	
	СохранитьНаКлиенте(,ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьАвтоПослеСохранениеОтчета(Результат, ДополнительныеПараметры) Экспорт
	
	Если НЕ ЗначениеЗаполнено(СтруктураРеквизитовФормы.мСохраненныйДок) Тогда
		Возврат;
	КонецЕсли;
	
	ЗаданиеВыполнено = ЗаполнитьАвтоНаСервере();
	
	Если ЗаданиеВыполнено Тогда
		СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
		
		РегламентированнаяОтчетностьКлиент.ОбновитьДеревоРазделовВФормеОтчета(ЭтаФорма);
		
		Если НЕ Элементы.РазделыОтчета.ТекущиеДанные.ПолучитьРодителя() = Неопределено Тогда
			Элементы.РазделыОтчета.ТекущаяСтрока
			= Элементы.РазделыОтчета.ТекущиеДанные.ПолучитьРодителя().ПолучитьЭлементы()[0].ПолучитьИдентификатор();
		КонецЕсли;
		
		Если Элементы.Расшифровать.Видимость Тогда
			Элементы.Расшифровать.Доступность = Истина;
			Элементы.ТабличныйДокументКонтекстноеМенюРасшифровать.Доступность = Истина;
		КонецЕсли;
		
		ЗапуститьПроверки();
		
	Иначе
		
		ПараметрыОбработчикаОжидания = Новый Структура;
		ПараметрыОбработчикаОжидания.Вставить("МинимальныйИнтервал", 1);
		ПараметрыОбработчикаОжидания.Вставить("МаксимальныйИнтервал", 15);
		ПараметрыОбработчикаОжидания.Вставить("ТекущийИнтервал", 1);
		ПараметрыОбработчикаОжидания.Вставить("КоэффициентУвеличенияИнтервала", 1.4);
		
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
		
		ФормаДлительнойОперации = ОткрытьФорму("ОбщаяФорма.ДлительнаяОперация",
		Новый Структура("ИдентификаторЗадания", СтруктураРеквизитовФормы.ИдентификаторЗадания), ЭтаФорма);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЗаполнитьАвтоНаСервере()
	
	СохранитьДанныеРаздела(СтруктураРеквизитовФормы.НаимТекущегоРаздела, Ложь);
	
	ЗаполнитьПустыеСтруктурыДанных();
	
	СтруктураРеквизитовФормы.АдресВоВременномХранилище
	= ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
	СтруктураРеквизитовФормы.АдресВременногоХранилищаРасшифровки
	= ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
	
	НомерКорректировки = СтруктураДанныхТитульный.НомерКорректировки;
	
	ПараметрыОтчета = Новый Структура();
	ПараметрыОтчета.Вставить("Организация",  СтруктураРеквизитовФормы.Организация);
	ПараметрыОтчета.Вставить("ГруппаОрганизаций", СтруктураРеквизитовФормы.ГруппаОрганизаций);
	ПараметрыОтчета.Вставить("мДатаНачалаПериодаОтчета", НачалоКвартала(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета));
	ПараметрыОтчета.Вставить("мДатаКонцаПериодаОтчета", СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	ПараметрыОтчета.Вставить("ДатаНачалаРасширенногоПериодаОтчета", ДатаНачалаРасширенногоПериодаОтчета());
	ПараметрыОтчета.Вставить("ВидДокумента", ?(НомерКорректировки = 0, 0, 1));
	ПараметрыОтчета.Вставить("НомерКорректировки", НомерКорректировки);
	ПараметрыОтчета.Вставить("ДатаПодписи", ДатаПодписи);
	ПараметрыОтчета.Вставить("УникальныйИдентификаторФормы", ЭтаФорма.УникальныйИдентификатор);
	ПараметрыОтчета.Вставить("АдресВоВременномХранилище", СтруктураРеквизитовФормы.АдресВоВременномХранилище);
	ПараметрыОтчета.Вставить("АдресВременногоХранилищаРасшифровки", СтруктураРеквизитовФормы.АдресВременногоХранилищаРасшифровки);
	ПараметрыОтчета.Вставить("Декларация", СтруктураРеквизитовФормы.мСохраненныйДок);
	
	Контейнер = Новый Структура();
	Контейнер.Вставить("Раздел1", СтруктураДанныхРаздел1);
	Контейнер.Вставить("Раздел2", СведенияМногостраничногоРазделаВТаблице("ТаблицаСтраницыРаздела2"));
	Контейнер.Вставить("Раздел3", СтруктураДанныхРаздел3);
	Контейнер.Вставить("Раздел3_Прил1", СведенияМногостраничногоРазделаВТаблице("ТаблицаСтраницыРаздела3_Прил1"));
	Контейнер.Вставить("Раздел3_Прил2", СтруктураДанныхРаздел3_Прил2);
	Контейнер.Вставить("Раздел3_Прил2_ДанныеДопСтрок", ДанныеФормыВЗначение(П0003200001, Тип("ТаблицаЗначений")));
	Контейнер.Вставить("Раздел4", СтруктураДанныхРаздел4);
	Контейнер.Вставить("Раздел4_ДанныеДопСтрок010_050", ДанныеФормыВЗначение(П0004М100, Тип("ТаблицаЗначений")));
	Контейнер.Вставить("Раздел4_ДанныеДопСтрок060_080", ДанныеФормыВЗначение(П0004М200, Тип("ТаблицаЗначений")));
	Контейнер.Вставить("Раздел4_ДанныеДопСтрок090_110", ДанныеФормыВЗначение(П0004М300, Тип("ТаблицаЗначений")));
	Контейнер.Вставить("Раздел5", СведенияМногостраничногоРазделаВТаблице("ТаблицаСтраницыРаздела5"));
	Контейнер.Вставить("Раздел5_ДанныеДопСтрок", ДанныеФормыВЗначение(П00050000, Тип("ТаблицаЗначений")));
	Контейнер.Вставить("Раздел6", СтруктураДанныхРаздел6);
	Контейнер.Вставить("Раздел6_ДанныеДопСтрок010_040", ДанныеФормыВЗначение(П0006М100, Тип("ТаблицаЗначений")));
	Контейнер.Вставить("Раздел6_ДанныеДопСтрок070_100", ДанныеФормыВЗначение(П0006М200, Тип("ТаблицаЗначений")));
	Контейнер.Вставить("Раздел6_ДанныеДопСтрок110_150", ДанныеФормыВЗначение(П0006М300, Тип("ТаблицаЗначений")));
	Контейнер.Вставить("Раздел7", СтруктураДанныхРаздел7);
	Контейнер.Вставить("Раздел7_ДанныеДопСтрок", ДанныеФормыВЗначение(П0007000001, Тип("ТаблицаЗначений")));
	Контейнер.Вставить("Раздел8", Новый Структура);
	Контейнер.Вставить("Раздел8_Прил1", Новый Структура);
	Контейнер.Вставить("Раздел9", Новый Структура);
	Контейнер.Вставить("Раздел9_Прил1", Новый Структура);
	Контейнер.Вставить("Раздел10", Новый Структура);
	Контейнер.Вставить("Раздел11", Новый Структура);
	Контейнер.Вставить("Раздел12", Новый Структура);
	
	Контейнер.Вставить("ДополнительныеСведения", Новый Структура("П000100001003", СтруктураДанныхРаздел1.П000100001003));
	
	ЗаданиеВыполнено = Ложь;
	
	НаименованиеЗадания = НСтр("ru = 'Автоматическое заполнение по данным информационной базы'");
	
	ЭтаФормаИмя = ЭтаФорма.ИмяФормы;
	ЭтаФормаИмя = "ВнешнийОтчет.РегламентированныйОтчетНДС.Форма.ФормаОтчета2019Кв1";
	Если СтрЧислоВхождений(ЭтаФормаИмя, "ВнешнийОтчет.") > 0 Тогда
		ЭтаФормаИмя = СтрЗаменить(ЭтаФормаИмя, "ВнешнийОтчет.", "");
	ИначеЕсли СтрЧислоВхождений(ЭтаФормаИмя, "Отчет.") > 0 Тогда
		ЭтаФормаИмя = СтрЗаменить(ЭтаФормаИмя, "Отчет.", "");
	КонецЕсли;
	ЭтаФормаИмя = Лев(ЭтаФормаИмя, СтрНайти(ЭтаФормаИмя, ".Форма.") - 1);
	
	ПараметрыЗаполнения = Новый Массив;
	ПараметрыЗаполнения.Добавить(ЭтаФормаИмя);
	ПараметрыЗаполнения.Добавить(ИмяФормыОтчета(ЭтаФорма.ИмяФормы));
	ПараметрыЗаполнения.Добавить(ПараметрыОтчета);
	ПараметрыЗаполнения.Добавить(Контейнер);
	
	Если ПолучитьСкоростьКлиентскогоСоединения() = СкоростьКлиентскогоСоединения.Низкая Тогда
		ВремяОжидания = 4;
	Иначе
		ВремяОжидания = 2;
	КонецЕсли;
	
	Задание = ФоновыеЗадания.Выполнить(
	"РегламентированнаяОтчетностьПереопределяемый.ЗаполнитьОтчет", ПараметрыЗаполнения, , НаименованиеЗадания);
	
	Попытка
		Задание.ОжидатьЗавершения(ВремяОжидания);
	Исключение
		// Специальная обработка не требуется. Предположительно, исключение вызвано истечением времени ожидания.
	КонецПопытки;
	
	СтруктураРеквизитовФормы.ИдентификаторЗадания = Задание.УникальныйИдентификатор;
	
	// Если операция уже завершилась, то сразу обрабатываем результат.
	Если ДлительныеОперации.ЗаданиеВыполнено(Задание.УникальныйИдентификатор) Тогда
		
		ЗаданиеВыполнено = Истина;
		
		ЗагрузитьПодготовленныеДанные();
		
	КонецЕсли;
	
	Возврат ЗаданиеВыполнено;
	
КонецФункции

&НаСервере
Функция ДатаНачалаРасширенногоПериодаОтчета()
	
	Возврат ОбъектОтчета(ЭтаФорма.ИмяФормы).ДатаНачалаРасширенногоПериодаОтчета(
		СтруктураРеквизитовФормы.мВыбраннаяФорма, СтруктураРеквизитовФормы);
	
КонецФункции

&НаСервере
Процедура ЗагрузитьПодготовленныеДанные()
	
	СтруктураРеквизитовФормы.УспешноеАвтозаполнение = Истина;
	СтруктураРеквизитовФормы.АвтозаполнениеРазделовВТекущейСессии
		= ОбъектОтчета(ЭтаФорма.ИмяФормы).НовыйНаборПризнаковАвтозаполнения(
			СтруктураРеквизитовФормы.мВыбраннаяФорма, Истина);
	
	Контейнер = ПолучитьИзВременногоХранилища(СтруктураРеквизитовФормы.АдресВоВременномХранилище);
	
	Если ТипЗнч(Контейнер) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ЭлементСтруктуры Из Контейнер Цикл
		ИмяЭлемента = ЭлементСтруктуры.Ключ;
		
		Если ИмяЭлемента = "Раздел8"
		 ИЛИ ИмяЭлемента = "Раздел8_Прил1"
		 ИЛИ ИмяЭлемента = "Раздел9"
		 ИЛИ ИмяЭлемента = "Раздел9_Прил1"
		 ИЛИ ИмяЭлемента = "Раздел10"
		 ИЛИ ИмяЭлемента = "Раздел11"
		 ИЛИ ИмяЭлемента = "Раздел12" Тогда
		 
			СписокСтраницРаздела = ОбъектОтчета(ЭтаФорма.ИмяФормы).ЗаполнитьСведенияНДС(
			СтруктураРеквизитовФормы.мВыбраннаяФорма, Контейнер, ИмяЭлемента,
			РеквизитФормыВЗначение("Страницы" + ИмяЭлемента), СтруктураРеквизитовФормы);
			
			ЗначениеВРеквизитФормы(СписокСтраницРаздела, "Страницы" + ИмяЭлемента);
			
		ИначеЕсли мСтруктураМногостраничныхРазделов.Свойство(ИмяЭлемента) Тогда
			ВосстановитьМногостраничныйРазделИзТаблицы(ИмяЭлемента, ЭлементСтруктуры.Значение);
			
			Если ИмяЭлемента = "Раздел2" Тогда
				Для каждого СтраницаРаздела2 Из ЭтаФорма.ТаблицаСтраницыРаздела2 Цикл
					ДанныеСтраницыРаздела2 = СтраницаРаздела2.Данные[0].Значение;
					Если СокрЛП(ДанныеСтраницыРаздела2["П000200007003"]) = "1011715" Тогда
						ДанныеСтраницыРаздела2.Вставить("П000200001003", "-");
						ДанныеСтраницыРаздела2.Вставить("П000200002003", "-");
						ДанныеСтраницыРаздела2.Вставить("П000200003003", "-");
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
		ИначеЕсли ИмяЭлемента = "Раздел3_Прил2_ДанныеДопСтрок" Тогда
			ЗначениеВДанныеФормы(ЭлементСтруктуры.Значение, П0003200001);
			
		ИначеЕсли ИмяЭлемента = "Раздел4_ДанныеДопСтрок010_050" Тогда
			ЗначениеВДанныеФормы(ЭлементСтруктуры.Значение, П0004М100);
			
		ИначеЕсли ИмяЭлемента = "Раздел4_ДанныеДопСтрок060_080" Тогда
			ЗначениеВДанныеФормы(ЭлементСтруктуры.Значение, П0004М200);
			
		ИначеЕсли ИмяЭлемента = "Раздел4_ДанныеДопСтрок090_110" Тогда
			ЗначениеВДанныеФормы(ЭлементСтруктуры.Значение, П0004М300);
			
		ИначеЕсли ИмяЭлемента = "Раздел5_ДанныеДопСтрок" Тогда
			ЗначениеВДанныеФормы(ЭлементСтруктуры.Значение, П00050000);
			
		ИначеЕсли ИмяЭлемента = "Раздел6_ДанныеДопСтрок010_040" Тогда
			ЗначениеВДанныеФормы(ЭлементСтруктуры.Значение, П0006М100);
			
		ИначеЕсли ИмяЭлемента = "Раздел6_ДанныеДопСтрок070_100" Тогда
			ЗначениеВДанныеФормы(ЭлементСтруктуры.Значение, П0006М200);
			
		ИначеЕсли ИмяЭлемента = "Раздел6_ДанныеДопСтрок110_150" Тогда
			ЗначениеВДанныеФормы(ЭлементСтруктуры.Значение, П0006М300);
			
		ИначеЕсли ИмяЭлемента = "Раздел7_ДанныеДопСтрок" Тогда
			ЗначениеВДанныеФормы(ЭлементСтруктуры.Значение, П0007000001);
			
		ИначеЕсли ТипЗнч(ЭлементСтруктуры.Значение) = Тип("ТаблицаЗначений") Тогда
			ЗначениеВДанныеФормы(ЭлементСтруктуры.Значение, ЭтаФорма["СтруктураДанных" + ИмяЭлемента]);
			
		ИначеЕсли ИмяЭлемента = "ДополнительныеСведения" Тогда
			ОКТМО = СокрЛП(ЭлементСтруктуры.Значение.П000100001003);
			ЗаполнитьОКТМО(ЭтаФорма, ОКТМО);
			СтруктураРеквизитовФормы.Вставить("КодТерриториальногоОбразования", ОКТМО);
			
		Иначе
			ЭтаФорма["СтруктураДанных" + ИмяЭлемента] = ЭлементСтруктуры.Значение;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ЗаполнитьЗначенияПолейПоУмолчанию();
	
	ВывестиМакетВТаблДокНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела, 1);
	
	РасчетНаСервере();
	
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел2" Тогда
		
		ТабличныйДокумент.Области.П000200006003.Защита = Ложь;
		
	КонецЕсли;
	
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел2"
		ИЛИ СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел7" Тогда
		
		ИзменитьЦветЯчеекНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
		
	КонецЕсли;
	
	Модифицированность = Ложь;
	
	Если НЕ ЗначениеЗаполнено(СтруктураДанныхТитульный.НомерКорректировки) Тогда
		ЗначениеКорректировки = 0;
	Иначе
		ТипЧисло = Новый ОписаниеТипов("Число");
		ЗначениеКорректировки = ТипЧисло.ПривестиЗначение(СтруктураДанныхТитульный.НомерКорректировки);
	КонецЕсли;
	
	КодИФНС = СтруктураДанныхТитульный.КодИМНС;
	КПП = СтруктураДанныхТитульный.КПП1;
	Вариант = СтруктураРеквизитовФормы.ВидДокумента * ЗначениеКорректировки;
	НаименованиеТекущегоРаздела = СтруктураРеквизитовФормы.НаимТекущегоРаздела;
	
	Сохранить( , КодИФНС, КПП, Вариант, , НаименованиеТекущегоРаздела);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеЗадания()
	
	Попытка
		
		Если ПроверитьВыполнениеЗадания() Тогда 
			
			ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
			
			СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
			
			РегламентированнаяОтчетностьКлиент.ОбновитьДеревоРазделовВФормеОтчета(ЭтаФорма);
			
			Если НЕ Элементы.РазделыОтчета.ТекущиеДанные.ПолучитьРодителя() = Неопределено Тогда
				Элементы.РазделыОтчета.ТекущаяСтрока
				= Элементы.РазделыОтчета.ТекущиеДанные.ПолучитьРодителя().ПолучитьЭлементы()[0].ПолучитьИдентификатор();
			КонецЕсли;
			
			Если Элементы.Расшифровать.Видимость Тогда
				Элементы.Расшифровать.Доступность = Истина;
				Элементы.ТабличныйДокументКонтекстноеМенюРасшифровать.Доступность = Истина;
			КонецЕсли;
			
			ЗапуститьПроверки();
			
			Возврат;
			
		КонецЕсли;
		
	Исключение
		
		ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
		ВызватьИсключение;
		
	КонецПопытки;
	
	ПараметрыОбработчикаОжидания.ТекущийИнтервал
	= ПараметрыОбработчикаОжидания.ТекущийИнтервал * ПараметрыОбработчикаОжидания.КоэффициентУвеличенияИнтервала;
	
	Если ПараметрыОбработчикаОжидания.ТекущийИнтервал > ПараметрыОбработчикаОжидания.МаксимальныйИнтервал Тогда
		ПараметрыОбработчикаОжидания.ТекущийИнтервал = ПараметрыОбработчикаОжидания.МаксимальныйИнтервал;
	КонецЕсли;
	
	ПодключитьОбработчикОжидания(
	"Подключаемый_ПроверитьВыполнениеЗадания", ПараметрыОбработчикаОжидания.ТекущийИнтервал, Истина);
	
КонецПроцедуры

&НаСервере
Функция ПроверитьВыполнениеЗадания()
	
	Если ДлительныеОперации.ЗаданиеВыполнено(СтруктураРеквизитовФормы.ИдентификаторЗадания) Тогда
		ЗагрузитьПодготовленныеДанные();
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура Расшифровать(Команда)
	
	ПараметрыОтчета = Новый Структура();
	ПараметрыОтчета.Вставить("Организация", СтруктураРеквизитовФормы.Организация);
	ПараметрыОтчета.Вставить("ДатаНачалаПериодаОтчета", НачалоКвартала(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета));
	ПараметрыОтчета.Вставить("ДатаКонцаПериодаОтчета", СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	ПараметрыОтчета.Вставить("ДатаНачалаРасширенногоПериодаОтчета", ДатаНачалаРасширенногоПериодаОтчета());
	ПараметрыОтчета.Вставить("НомерТекущейСтраницы", СтруктураРеквизитовФормы.НомерТекущейСтраницы);
	ПараметрыОтчета.Вставить("АдресВременногоХранилищаРасшифровки", СтруктураРеквизитовФормы.АдресВременногоХранилищаРасшифровки);
	ПараметрыОтчета.Вставить("ГруппаОрганизаций", СтруктураРеквизитовФормы.ГруппаОрганизаций);
	
	ИДИменПоказателей = Новый Массив();
	ИДИменПоказателей.Добавить(Элементы.ТабличныйДокумент.ТекущаяОбласть.Имя);
	
	ЭтаФормаИмя = ЭтаФорма.ИмяФормы;
	Если СтрЧислоВхождений(ЭтаФормаИмя, "ВнешнийОтчет.") > 0 Тогда
		ЭтаФормаИмя = СтрЗаменить(ЭтаФормаИмя, "ВнешнийОтчет.", "");
	ИначеЕсли СтрЧислоВхождений(ЭтаФормаИмя, "Отчет.") > 0 Тогда
		ЭтаФормаИмя = СтрЗаменить(ЭтаФормаИмя, "Отчет.", "");
	КонецЕсли;
	ЭтаФормаИмя = Лев(ЭтаФормаИмя, СтрНайти(ЭтаФормаИмя, ".Форма.") - 1);
	РегламентированнаяОтчетностьКлиент.ОткрытьРасшифровкуОтчета(ЭтаФормаИмя,
		ИмяФормыОтчета(ЭтаФорма.ИмяФормы), ИДИменПоказателей, ПараметрыОтчета);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьОКТМО(Форма, Знач ОКТМО)
	
	ПроставитьНаВсехЛистах(Форма, ОКТМО);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПроставитьНаВсехЛистах(Форма, Знач ЗначениеПоказателя)
	
	ТипЗначенияПоказателя = ТипЗнч(ЗначениеПоказателя);
	
	Если ТипЗначенияПоказателя = Тип("Число") Тогда
		ЗначениеПоказателя = Формат(ЗначениеПоказателя, "ЧГ=");
	КонецЕсли;
	
	Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
		КодПоМесту = СокрЛП(Форма.ТабличныйДокумент.Область("ПоМесту").Значение);
	Иначе
		КодПоМесту = СокрЛП(Форма.СтруктураДанныхТитульный.ПоМесту);
	конецЕсли;
	
	Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел1" Тогда
		ЗаполненаХотяБыОднаИзСтрок030_040_050Раздела1
		= ЗначениеЗаполнено(Форма.ТабличныйДокумент.Область("П000100003003").Значение)
		ИЛИ ЗначениеЗаполнено(Форма.ТабличныйДокумент.Область("П000100004003").Значение)
		ИЛИ ЗначениеЗаполнено(Форма.ТабличныйДокумент.Область("П000100005003").Значение);
	Иначе
		ЗаполненаХотяБыОднаИзСтрок030_040_050Раздела1 = Ложь;
		Если Форма.СтруктураДанныхРаздел1.Свойство("П000100003003") Тогда
			ЗаполненаХотяБыОднаИзСтрок030_040_050Раздела1 = ЗаполненаХотяБыОднаИзСтрок030_040_050Раздела1
			ИЛИ ЗначениеЗаполнено(Форма.СтруктураДанныхРаздел1.П000100003003);
		КонецЕсли;
		Если Форма.СтруктураДанныхРаздел1.Свойство("П000100004003") Тогда
			ЗаполненаХотяБыОднаИзСтрок030_040_050Раздела1 = ЗаполненаХотяБыОднаИзСтрок030_040_050Раздела1
			ИЛИ ЗначениеЗаполнено(Форма.СтруктураДанныхРаздел1.П000100004003);
		КонецЕсли;
		Если Форма.СтруктураДанныхРаздел1.Свойство("П000100005003") Тогда
			ЗаполненаХотяБыОднаИзСтрок030_040_050Раздела1 = ЗаполненаХотяБыОднаИзСтрок030_040_050Раздела1
			ИЛИ ЗначениеЗаполнено(Форма.СтруктураДанныхРаздел1.П000100005003);
		КонецЕсли;
	конецЕсли;
	
	Если КодПоМесту = "231" И НЕ ЗаполненаХотяБыОднаИзСтрок030_040_050Раздела1 Тогда
		Форма.СтруктураДанныхРаздел1.Вставить("П000100001003", "");
		Форма.СтруктураДанныхРаздел1.Вставить("П000100002003", "");
	Иначе
		ЗаполнитьНачальноеЗначениеКБКРаздела1
		= НЕ ЗначениеЗаполнено(Форма.СтруктураДанныхРаздел1.П000100001003)
		И НЕ ЗначениеЗаполнено(Форма.СтруктураДанныхРаздел1.П000100002003)
		И ЗначениеЗаполнено(ЗначениеПоказателя);
		Форма.СтруктураДанныхРаздел1.Вставить("П000100001003", ЗначениеПоказателя);
		Если ЗаполнитьНачальноеЗначениеКБКРаздела1 Тогда
			Форма.СтруктураДанныхРаздел1.Вставить("П000100002003", Форма.СтруктураРеквизитовФормы.КБКПоУмолчанию);
		КонецЕсли;
	КонецЕсли;
	
	Для Каждого СтраницаРаздела Из Форма.ТаблицаСтраницыРаздела2 Цикл
		
		ДанныеСтраницы = СтраницаРаздела.Данные;
		
		Если ДанныеСтраницы = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ДанныеСтраницы[0].Значение.Вставить("П000200005003", ЗначениеПоказателя);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьПользовательскиеНастройки()
	
	Сообщение = Новый СообщениеПользователю;
	
	Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр(
	"ru='Изменилась версия формы отчета.%1Выполняется обновление пользовательских настроек.'"), Символы.ПС);
	
	Сообщение.Сообщить();
	
	ЕстьИзмененияВариантыЗаполнения = ОбновитьВариантыЗаполнения();
	
	Если ЕстьИзмененияВариантыЗаполнения Тогда
		
		// Если были изменения в пользовательских настройках,
		// то устанавливаем флаг модифицированности формы.
		Модифицированность = Истина;
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Обновление пользовательских настроек успешно завершено!'");
		Сообщение.Сообщить();
		
	Иначе
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Изменения в структуре пользовательских настроек не обнаружены!'");
		Сообщение.Сообщить();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ОбновитьВариантыЗаполнения()
	
	Перем МассивВариантовЗаполненияСтраниц;
	
	ЕстьИзменения = Ложь;
	
	МакетСоставаПоказателей = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(СтруктураРеквизитовФормы.мСоставПоказателей);
	
	ОписаниеТиповЧисло1 = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(1));
	
	ОписаниеТиповСтрока15  = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(15));
	ОписаниеТиповСтрока50  = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(50));
	ОписаниеТиповСтрока100 = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100));
	
	Для Каждого ОбластьОтчета Из МакетСоставаПоказателей.Области Цикл
		
		ИмяСтраницы = ОбластьОтчета.Имя;
		
		ТаблицаВариантыЗаполнения = Новый ТаблицаЗначений;
		ТаблицаВариантыЗаполнения.Колонки.Добавить("КодПоказателя", ОписаниеТиповСтрока50);
		ТаблицаВариантыЗаполнения.Колонки.Добавить("ВариантЗаполнения", ОписаниеТиповЧисло1);
		ТаблицаВариантыЗаполнения.Колонки.Добавить("ЗначениеАвто", СтруктураРеквизитовФормы.мОписаниеТиповЧислоЕ);
		ТаблицаВариантыЗаполнения.Колонки.Добавить("Дельта", СтруктураРеквизитовФормы.мОписаниеТиповЧислоЕ);
		ТаблицаВариантыЗаполнения.Колонки.Добавить("Комментарий", ОписаниеТиповСтрока100);
		ТаблицаВариантыЗаполнения.Колонки.Добавить("КодПоказателяПоСтруктуре", ОписаниеТиповСтрока50);
		
		Для Ном = ОбластьОтчета.Верх По ОбластьОтчета.Низ Цикл
			// Код показателя (по составу показателей) определяется по первой колонке макета.
			КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
			ИмяПоказателя = КодПоказателя;
			
			Если КодПоказателя = "===" Тогда
				Прервать; // конечная строка
			КонецЕсли;
			
			Если Лев(КодПоказателя, 2) = "//" Тогда
				Продолжить; // комментарий
			КонецЕсли;
			
			// Код показателя по форме отчете (имя ячейки в полях табличного документа формы).
			КодПоказателяПоФорме = СокрЛП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
			// Вариант заполнения ячейки определяется по колонке 6 макета.
			стрВариантЗаполнения
			= РегламентированнаяОтчетность.ПолучитьВариантЗаполненияПоказателяРегОтчета(МакетСоставаПоказателей, Ном);
			
			чВариантЗаполнения = ? (ПустаяСтрока(стрВариантЗаполнения), 0, Число(стрВариантЗаполнения));
			Если чВариантЗаполнения <> 0 Тогда
				НоваяСтрока = ТаблицаВариантыЗаполнения.Добавить();
				НоваяСтрока.КодПоказателя = ? (Не ПустаяСтрока(КодПоказателяПоФорме), КодПоказателяПоФорме, КодПоказателя);
				НоваяСтрока.ВариантЗаполнения = чВариантЗаполнения;
			КонецЕсли;
			
		КонецЦикла;
		
		Если НЕ мСтруктураВариантыЗаполнения.Свойство(ИмяСтраницы, МассивВариантовЗаполненияСтраниц) Тогда
			
			МассивВариантовЗаполненияСтраниц = ЭтаФорма["ТаблицаВариантыЗаполнения" + ИмяСтраницы];
			
			Если ТаблицаВариантыЗаполнения.Количество() > 0 Тогда
				
				МассивВариантовЗаполненияСтраниц.Очистить();
				МассивВариантовЗаполненияСтраниц.Добавить(ТаблицаВариантыЗаполнения);
				
				мСтруктураВариантыЗаполнения.Вставить(ИмяСтраницы, ИмяСтраницы);
				
				ЕстьИзменения = Истина;
				
			КонецЕсли;
		Иначе
			
			МассивВариантовЗаполненияСтраниц = ЭтаФорма["ТаблицаВариантыЗаполнения" + ИмяСтраницы];
			
			Если ТаблицаВариантыЗаполнения.Количество() = 0 Тогда
				
				мСтруктураВариантыЗаполнения.Удалить(ИмяСтраницы);
				
				ЕстьИзменения = Истина;
				
			Иначе
				// Актуализация вариантов автозаполнения текущей страницы.
				Для Каждого ЭлементМассива Из МассивВариантовЗаполненияСтраниц Цикл
					
					ЭлементМассива = ЭлементМассива.ТаблицаВариантовЗаполнения;
					
					Для каждого СтрокаТаблицы Из ТаблицаВариантыЗаполнения Цикл
						КодПоказателя     = СтрокаТаблицы.КодПоказателя;
						ВариантЗаполнения = СтрокаТаблицы.ВариантЗаполнения;
						
						ДействующийВариантАвтозаполнения = Неопределено;
						
						НайденныеСтроки = ЭлементМассива.НайтиСтроки(Новый Структура("КодПоказателя", КодПоказателя));
						
						Если НайденныеСтроки.Количество() > 0 Тогда
							ДействующийВариантАвтозаполнения = НайденныеСтроки[0];
						КонецЕсли;
						
						Если ДействующийВариантАвтозаполнения = Неопределено Тогда
							// Новый автозаполняемый показатель.
							НоваяСтрока = ЭлементМассива.Добавить();
							НоваяСтрока.КодПоказателя     = КодПоказателя;
							НоваяСтрока.ВариантЗаполнения = ВариантЗаполнения;
							
							ЕстьИзменения = Истина;
							
						Иначе
							// Показатель должен соответствовать эталону, кроме удовлетворяющих следующим критериям:
							// - вариант эталона не 4 (авторасчет)и не 5 (запрет ввода значения);
							// - действующий вариант допускает корректировку (варианты 1-3).
							ИспользоватьДействующийВариант = ((ДействующийВариантАвтозаполнения.ВариантЗаполнения = 1
							ИЛИ ДействующийВариантАвтозаполнения.ВариантЗаполнения = 2
							ИЛИ ДействующийВариантАвтозаполнения.ВариантЗаполнения = 3)
							И (ВариантЗаполнения <> 4) И (ВариантЗаполнения <> 4));
							Если Не ИспользоватьДействующийВариант Тогда
								ДействующийВариантАвтозаполнения.КодПоказателя     = КодПоказателя;
								ДействующийВариантАвтозаполнения.ВариантЗаполнения = ВариантЗаполнения;
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
					
					ТаблДляЦикла = ЭлементМассива.Выгрузить();
					
					Для Каждого СтрокаТаблицы Из ТаблДляЦикла Цикл
						КодПоказателя = СтрокаТаблицы.КодПоказателя;
						
						Если ТаблицаВариантыЗаполнения.Найти(КодПоказателя, "КодПоказателя") = Неопределено Тогда
							// В новой версии отчета автозаполнение показателя не предусмотрено.
							СтрокиВЭлементеМассива = ЭлементМассива.НайтиСтроки(Новый Структура("КодПоказателя", КодПоказателя));
							Если СтрокиВЭлементеМассива.Количество() > 0 Тогда
								ЭлементМассива.Удалить(СтрокиВЭлементеМассива[0]);
								
								ЕстьИзменения = Истина;
							КонецЕсли;
							
						КонецЕсли;
						
					КонецЦикла;
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ЕстьИзменения;
	
КонецФункции

&НаКлиенте
Процедура НастроитьПериодЗаполнения(Команда)
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("НачалоПериода", СтруктураРеквизитовФормы.ДатаНачалаАвтозаполнения);
	ПараметрыФормы.Вставить("КонецПериода",  СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	ПараметрыФормы.Вставить("ИмяЭлемента",   "НастроитьПериодАвтозаполнения");
	
	ОписаниеОповещения = Новый ОписаниеОповещения("НастроитьПериодЗаполненияЗавершение", ЭтотОбъект);
	
	ПараметрыФормы.Вставить("ИмяЭлемента", "НастроитьПериодАвтозаполнения");
	ОткрытьФорму("Отчет.РегламентированныйОтчетНДС.Форма.ВыборПериодаАвтозаполнения",
	ПараметрыФормы, ЭтотОбъект, , , , ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьПериодЗаполненияЗавершение(Результат, ДопПараметры) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Результат) 
		ИЛИ ТипЗнч(Результат) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ Результат.Свойство("НачалоПериода")
		ИЛИ НЕ Результат.Свойство("КонецПериода")
		ИЛИ НЕ Результат.Свойство("ИмяЭлемента") Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.ИмяЭлемента = "НастроитьПериодАвтозаполнения" Тогда
		СтруктураРеквизитовФормы.ДатаНачалаАвтозаполнения = Результат.НачалоПериода;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ СТЫКОВКИ С СЕРВИСОМ СДАЧИ ОТЧЕТНОСТИ ЧЕРЕЗ ПРЕДСТАВИТЕЛЯ

&НаКлиенте
Процедура ОтправитьЧерезПредставителя(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОтправитьЧерезПредставителяЗавершение", ЭтотОбъект);
	
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьЧерезПредставителяЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ПриНажатииНаКнопкуОтправкиЧерезПредставителяВРегламентированномОтчете(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВИнтернете(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьВИнтернетеЗавершение", ЭтотОбъект);
	
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВИнтернетеЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ПроверитьВИнтернете(ЭтаФорма);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗначениеТаймера()
	
	// СтандартныеПодсистемы.ОценкаПроизводительности
	ВыполнятьЗамерыПроизводительности = ОбщегоНазначения.ОбщийМодуль(
	"ОценкаПроизводительностиВызовСервераПовтИсп").ВыполнятьЗамерыПроизводительности();
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ОценкаПроизводительности")
		И ВыполнятьЗамерыПроизводительности Тогда
		
		Возврат ОценкаПроизводительности.НачатьЗамерВремени();
		
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ОценкаПроизводительности
	
	Возврат Неопределено;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ЗаписатьЗамер(ВремяНачала)
	
	// СтандартныеПодсистемы.ОценкаПроизводительности
	Если ВремяНачала <> Неопределено
		И ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ОценкаПроизводительности") Тогда
		
		КлючеваяОперация = "ЗаполнениеФормыРеглОтчетаНДС";
		ОбщегоНазначения.ОбщийМодуль("ОценкаПроизводительности").ЗакончитьЗамерВремени(КлючеваяОперация, ВремяНачала);
		
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ОценкаПроизводительности
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ПРОРИСОВКА И КОМАНДЫ ПАНЕЛИ ОТПРАВКИ

#Область ПанельОтправкиВКонтролирующиеОрганы

&НаКлиенте
Процедура ОбновитьОтправку(Команда)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОбновитьОтправкуИзПанелиОтправки(ЭтаФорма, "ФНС");
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаПротоколНажатие(Элемент)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьПротоколИзПанелиОтправки(ЭтаФорма, "ФНС");
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьНеотправленноеИзвещение(Команда)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОтправитьНеотправленноеИзвещениеИзПанелиОтправки(ЭтаФорма, "ФНС");
КонецПроцедуры

&НаКлиенте
Процедура КритическиеОшибкиОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьКритическиеОшибкиИзПанелиОтправки(ЭтаФорма, "ФНС");
КонецПроцедуры

&НаКлиенте
Процедура ЭтапыОтправкиНажатие(Элемент)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьСостояниеОтправкиИзПанелиОтправки(ЭтаФорма, "ФНС");
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ОтправитьВКонтролирующийОрган(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверкаВозможностиВыгрузкиРегламентированногоОтчетаПередОтправкой", ЭтотОбъект);
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередОтправкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаВозможностиВыгрузкиРегламентированногоОтчетаПередОтправкой(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОтправитьВКонтролирующийОрганЗавершение", ЭтотОбъект);
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьВКонтролирующийОрганЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОтправитьВКонтролирующийОрганПослеКонтроляНомеровКорректировок", ЭтотОбъект);
	
	Если Модифицированность Тогда
		СохранитьНаКлиенте(, ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьВКонтролирующийОрганПослеКонтроляНомеровКорректировок(Результат, ДополнительныеПараметры) Экспорт
	
	ТекстСообщенияОНепройденномКонтролеНомеровКорректировок = ТекстСообщенияОНепройденномКонтролеНомеровКорректировок();
	
	Если ЗначениеЗаполнено(ТекстСообщенияОНепройденномКонтролеНомеровКорректировок) Тогда
		ПоказатьПредупреждение(, ТекстСообщенияОНепройденномКонтролеНомеровКорректировок);
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ПриНажатииНаКнопкуОтправкиВКонтролирующийОрган(ЭтаФорма, "ФНС");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Форма", ЭтаФорма);
	Оповещение = Новый ОписаниеОповещения("ПослеСохраненияФормыЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	СохранитьНаКлиенте(, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеСохраненияФормыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ДополнительныеПараметры.Форма.Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ТабличныйДокументПриАктивизацииОбласти(Элемент)
	
	Элементы.ТабличныйДокументКонтекстноеМенюУдалитьСтроку.Доступность = Ложь;
	Элементы.ТабличныйДокументКонтекстноеМенюДобавитьСтроку.Доступность = Ложь;
	
	Если СтрЧислоВхождений(Элемент.ТекущаяОбласть.Имя, "УдалитьСтроку") = 0
		И (СтрЧислоВхождений(Элемент.ТекущаяОбласть.Имя, "П0003200001") > 0
		ИЛИ СтрНачинаетсяС(Элемент.ТекущаяОбласть.Имя, "П0004М1")
		ИЛИ СтрНачинаетсяС(Элемент.ТекущаяОбласть.Имя, "П0004М2")
		ИЛИ СтрНачинаетсяС(Элемент.ТекущаяОбласть.Имя, "П0004М3")
		ИЛИ СтрНачинаетсяС(Элемент.ТекущаяОбласть.Имя, "П0006М1")
		ИЛИ СтрНачинаетсяС(Элемент.ТекущаяОбласть.Имя, "П0006М2")
		ИЛИ СтрНачинаетсяС(Элемент.ТекущаяОбласть.Имя, "П0006М3")
		ИЛИ СтрЧислоВхождений(Элемент.ТекущаяОбласть.Имя, "П0007000001") > 0
		ИЛИ ((СтрЧислоВхождений(Элемент.ТекущаяОбласть.Имя, "П00050000") > 0)
		И СтрЧислоВхождений(Элемент.ТекущаяОбласть.Имя, "_") > 0)) Тогда
		
		Элементы.ТабличныйДокументКонтекстноеМенюДобавитьСтроку.Доступность = Истина;
		
		ПозицияЗнакаПодчеркивания = СтрНайти(Элемент.ТекущаяОбласть.Имя, "_");
		
		Если НЕ ПозицияЗнакаПодчеркивания = Неопределено Тогда
			
			КодОбласти = Лев(Элемент.ТекущаяОбласть.Имя, ПозицияЗнакаПодчеркивания);
			
			Если НЕ ТабличныйДокумент.Области.Найти(КодОбласти + "2") = Неопределено Тогда
				Элементы.ТабличныйДокументКонтекстноеМенюУдалитьСтроку.Доступность = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьСведенияНДС(ИмяРаздела)
	
	ЗаписьРегистраСведений = РегистрыСведений.ДополнительныеФайлыРегламентированныхОтчетов.СоздатьМенеджерЗаписи();
	ЗаписьРегистраСведений.РегламентированныйОтчет = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
	ЗаписьРегистраСведений.ВидДополнительногоФайла = "ТабличныйДокумент" + ИмяРаздела;
	
	ЗаписьРегистраСведений.Прочитать();
	
	Если ЗначениеЗаполнено(ЗаписьРегистраСведений.ВидДополнительногоФайла) Тогда
		АдресТабличногоДокумента = ПоместитьВоВременноеХранилище(
		ЗаписьРегистраСведений.СодержимоеФайла.Получить(), УникальныйИдентификатор);
		СтруктураРеквизитовФормы.Вставить("АдресТабличногоДокумента" + ИмяРаздела, АдресТабличногоДокумента);
	КонецЕсли;
	
	ЗаписьРегистраСведений = РегистрыСведений.ДополнительныеФайлыРегламентированныхОтчетов.СоздатьМенеджерЗаписи();
	ЗаписьРегистраСведений.РегламентированныйОтчет = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
	ЗаписьРегистраСведений.ВидДополнительногоФайла = "Данные" + ИмяРаздела;
	
	ЗаписьРегистраСведений.Прочитать();
	
	Если ЗначениеЗаполнено(ЗаписьРегистраСведений.ВидДополнительногоФайла) Тогда
		АдресДанных = ПоместитьВоВременноеХранилище(
		ЗаписьРегистраСведений.СодержимоеФайла.Получить(), УникальныйИдентификатор);
		СтруктураРеквизитовФормы.Вставить("АдресДанных" + ИмяРаздела, АдресДанных);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьПризнакАктуальностиСведенийРаздела(СписокСохранения, ИмяРаздела)
	
	Если СписокСохранения.Свойство("АктуальностьСведений" + ИмяРаздела) Тогда
		ВосстанавливаемоеСостояние = СписокСохранения["АктуальностьСведений" + ИмяРаздела];
	Иначе
		ВосстанавливаемоеСостояние = 0;
	КонецЕсли;
	
	СтруктураРеквизитовФормы.Вставить("АктуальностьСведений" + ИмяРаздела, ВосстанавливаемоеСостояние);
	
КонецПроцедуры

&НаСервере
Процедура ВывестиРазделРегистраУчетаНДС(ИмяРаздела, НомерСтраницы = 1) Экспорт
	
	СтруктураРеквизитовФормы.НаимТекущегоРаздела  = ИмяРаздела;
	СтруктураРеквизитовФормы.НомерТекущейСтраницы = НомерСтраницы;
	
	ТабличныйДокументУчетаНДС.Очистить();
	
	ИмяРеквизитаАдресаМакетаОтчета = "АдресТабличногоДокумента" + ИмяРаздела;
	
	ИмяФормыОтчета = ИмяОтчета(ЭтаФорма.ИмяФормы);
	ИмяМакетаРаздела = Сред(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + ИмяРаздела;
	МакетРаздела = Отчеты[ИмяФормыОтчета].ПолучитьМакет(ИмяМакетаРаздела);
	
	СписокСтраниц = РеквизитФормыВЗначение("Страницы" + ИмяРаздела);
	
	ТабличныйДокументРаздела = Новый ТабличныйДокумент;
	Если СписокСтраниц.Количество() > 0 Тогда
		НомерПервойСтрокиСегмента = СписокСтраниц[НомерСтраницы - 1].НомерПервойСтроки;
		ТабличныйДокументРаздела = РегламентированнаяОтчетность.СегментТабличногоДокументаРазделаДекларацииНДС(
		СтруктураРеквизитовФормы.мСохраненныйДок, ИмяРаздела, НомерПервойСтрокиСегмента);
		
	ИначеЕсли СтруктураРеквизитовФормы.УспешноеАвтозаполнение <> Неопределено
		И СтруктураРеквизитовФормы.АвтозаполнениеРазделовВТекущейСессии[ИмяРаздела] Тогда
		ТабличныйДокументРаздела = МакетРаздела.ПолучитьОбласть("Пустой");
		
	ИначеЕсли СтруктураРеквизитовФормы.Свойство(ИмяРеквизитаАдресаМакетаОтчета) Тогда
		Если СтруктураРеквизитовФормы[ИмяРеквизитаАдресаМакетаОтчета] <> Неопределено Тогда
			ТабличныйДокументРаздела = ПолучитьИзВременногоХранилища(СтруктураРеквизитовФормы[ИмяРеквизитаАдресаМакетаОтчета]);
			
		Иначе
			ТабличныйДокументРаздела = МакетРаздела.ПолучитьОбласть("Пустой");
			
		КонецЕсли;
		
	Иначе
		ТабличныйДокументРаздела = МакетРаздела.ПолучитьОбласть("Незаполнено");
		
	КонецЕсли;
	
	ТабличныйДокументУчетаНДС.Вывести(ТабличныйДокументРаздела);
	
	АктуальностьРанееПредставленныхСведений = СтруктураРеквизитовФормы["АктуальностьСведений" + ИмяРаздела];
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьСведенияРазделаНДС(ИмяРаздела)
	
	СтруктураРеквизитовФормы.АвтозаполнениеРазделовВТекущейСессии[ИмяРаздела] = Ложь;
	
	СписокСтраниц = РеквизитФормыВЗначение("Страницы" + ИмяРаздела);
	
	Если СписокСтраниц.Количество() > 0 Тогда
		СписокСтраниц.Очистить();
		ЗначениеВРеквизитФормы(СписокСтраниц, "Страницы" + ИмяРаздела);
		
	Иначе
		Если СтруктураРеквизитовФормы.Свойство("АдресТабличногоДокумента" + ИмяРаздела)
			И СтруктураРеквизитовФормы["АдресТабличногоДокумента" + ИмяРаздела] <> Неопределено Тогда
			УдалитьИзВременногоХранилища(СтруктураРеквизитовФормы["АдресТабличногоДокумента" + ИмяРаздела]);
			СтруктураРеквизитовФормы.Удалить("АдресТабличногоДокумента" + ИмяРаздела);
		КонецЕсли;
		
		Если СтруктураРеквизитовФормы.Свойство("АдресДанных" + ИмяРаздела)
			И СтруктураРеквизитовФормы["АдресДанных" + ИмяРаздела] <> Неопределено Тогда
			УдалитьИзВременногоХранилища(СтруктураРеквизитовФормы["АдресДанных" + ИмяРаздела]);
			СтруктураРеквизитовФормы.Удалить("АдресДанных" + ИмяРаздела);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьТабличноеПолеНДС(ИмяРаздела)
	
	ОчиститьСведенияРазделаНДС(ИмяРаздела);
	ВывестиРазделРегистраУчетаНДС(ИмяРаздела);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьПризнакаАктуальностиРанееОтправленныхСведений()
	
	ПризнакДоступен = (НомерКорректировки <> 0);
	Элементы.АктуальностьРанееПредставленныхСведений.Доступность = ПризнакДоступен;
	
КонецПроцедуры

&НаКлиенте
Процедура АктуальностьРанееПредставленныхСведенийПриИзменении(Элемент)
	
	ИмяРаздела = СтруктураРеквизитовФормы.НаимТекущегоРаздела;
	СтруктураРеквизитовФормы.Вставить("АктуальностьСведений" + ИмяРаздела, АктуальностьРанееПредставленныхСведений);
	
	Модифицированность = Истина;
	
КонецПроцедуры

#Область Проверки

&НаКлиенте
Процедура ЗапуститьПроверки() Экспорт
	
	ВывестиПанельВыполненияПроверки();
	
	Если НЕ СтруктураРеквизитовФормы.ОтчетСформированОбработкойКонсолидацияОтчетностиПоНДС Тогда
		
		ПроверитьВозможностьВыгрузкиВФоне();
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗаданияПроверкиВозможностиВыгрузки", 1, Истина);
		
	КонецЕсли;
	
	//ПроверкаКонтрагентовБРО
	ПроверкаКонтрагентовБРОКлиент.ЗапуститьПроверкуКонтрагентовПослеЗаполнения(ЭтотОбъект);
	//Конец ПроверкаКонтрагентовБРО
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура Подключаемый_ОткрытьПрисоединенныеФайлы(Команда)
	
	РегламентированнаяОтчетностьКлиент.СохранитьОтчетИОткрытьФормуПрисоединенныеФайлы(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийПриИзменении(Элемент)
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТекущийРаздел(Команда)
	
	РегламентированнаяОтчетностьКлиент.МеханизмыОчисткиРегламентированныхОтчетов(
	ЭтаФорма, "ОчиститьТекущийРаздел" + Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
	
КонецПроцедуры

#Область ПроцедурыИФункцииМеханизмаПроверкиКонтрольныхСоотношений

#Область КС_Управление

&НаКлиенте
Процедура Проверить(Команда)
	
	РегламентированнаяОтчетностьКлиент.ПроверитьКонтрольныеСоотношения(ЭтаФорма, ОбработкаКС);
	
КонецПроцедуры

&НаСервере
Функция ПроверитьКонтрольныеСоотношенияВОтчете() Экспорт
	
	Документирование = Ложь;
	СформироватьСтруктуруПоказателей();
	
	СтруктураРеквизитовФормы.ТекстДляЗаголовочнойЧасти =
		РегламентированнаяОтчетностьКлиентСервер.ПредставлениеДокументаРеглОтч(СтруктураРеквизитовФормы.мСохраненныйДок);
	
	СтруктураРезультата = Новый Структура;
	СтруктураРезультата.Вставить("КоличествоНайденныхОшибок"	, 0);
	СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок"	, 0);
	СтруктураРезультата.Вставить("СтруктураОшибок"				, Новый Структура);
	СтруктураРезультата.Вставить("ДопСведенияВОписаниеКС"		, Истина);
	
	СписокРасшифровкиПоказателей	= РегламентированнаяОтчетность.СоздатьСписокРасшифровкиПоказателей();
	СписокРасшифровкиформулы		= РегламентированнаяОтчетность.СоздатьСписокРасшифровкиформулы();
	СчетчикФормулДляРасшифровок		= 0;
	
	мДанныеОтчета.Вставить("ДанныеКС", Новый Структура);
	СформироватьДанныеКонтрольныхСоотношений();
	
	ПроверкаКС_1_2(СтруктураРезультата);
	ПроверкаКС_1_3(СтруктураРезультата);
	ПроверкаКС_1_4(СтруктураРезультата);
	ПроверкаКС_1_5(СтруктураРезультата);
	ПроверкаКС_1_6(СтруктураРезультата);
	ПроверкаКС_1_7(СтруктураРезультата);
	ПроверкаКС_1_8(СтруктураРезультата);
	ПроверкаКС_1_9(СтруктураРезультата);
	ПроверкаКС_1_10(СтруктураРезультата);
	ПроверкаКС_1_11(СтруктураРезультата);
	ПроверкаКС_1_12(СтруктураРезультата);
	ПроверкаКС_1_13(СтруктураРезультата);
	ПроверкаКС_1_14(СтруктураРезультата);
	ПроверкаКС_1_15(СтруктураРезультата);
	ПроверкаКС_1_16(СтруктураРезультата);
	ПроверкаКС_1_17(СтруктураРезультата);
	ПроверкаКС_1_18(СтруктураРезультата);
	ПроверкаКС_1_19(СтруктураРезультата);
	ПроверкаКС_1_20(СтруктураРезультата);
	ПроверкаКС_1_21(СтруктураРезультата);
	ПроверкаКС_1_22(СтруктураРезультата);
	ПроверкаКС_1_23а(СтруктураРезультата);
	ПроверкаКС_1_23б(СтруктураРезультата);
	ПроверкаКС_1_23в(СтруктураРезультата);
	ПроверкаКС_1_23г(СтруктураРезультата);
	ПроверкаКС_1_23д(СтруктураРезультата);
	ПроверкаКС_1_23е(СтруктураРезультата);
	ПроверкаКС_1_23ж(СтруктураРезультата);
	ПроверкаКС_1_23з(СтруктураРезультата);
	ПроверкаКС_1_24(СтруктураРезультата);
	ПроверкаКС_1_25(СтруктураРезультата);
	ПроверкаКС_1_26а(СтруктураРезультата);
	ПроверкаКС_1_26б(СтруктураРезультата);
	ПроверкаКС_1_27(СтруктураРезультата);
	ПроверкаКС_1_28(СтруктураРезультата);
	ПроверкаКС_1_29(СтруктураРезультата);
	ПроверкаКС_1_30(СтруктураРезультата);
	ПроверкаКС_1_31(СтруктураРезультата);
	ПроверкаКС_1_32(СтруктураРезультата);
	ПроверкаКС_1_33(СтруктураРезультата);
	ПроверкаКС_1_34(СтруктураРезультата);
	ПроверкаКС_1_35(СтруктураРезультата);
	ПроверкаКС_1_36(СтруктураРезультата);
	ПроверкаКС_1_37(СтруктураРезультата);
	ПроверкаКС_1_38(СтруктураРезультата);
	ПроверкаКС_1_39(СтруктураРезультата);
	ПроверкаКС_1_40(СтруктураРезультата);
	ПроверкаКС_1_41(СтруктураРезультата);
	ПроверкаКС_1_42(СтруктураРезультата);
	ПроверкаКС_1_43(СтруктураРезультата);
	ПроверкаКС_1_44(СтруктураРезультата);
	ПроверкаКС_1_45(СтруктураРезультата);
	ПроверкаКС_1_46(СтруктураРезультата);
	ПроверкаКС_1_47(СтруктураРезультата);
	ПроверкаКС_1_48(СтруктураРезультата);
	ПроверкаКС_1_49(СтруктураРезультата);
	ПроверкаКС_1_50(СтруктураРезультата);
	ПроверкаКС_1_51(СтруктураРезультата);
	ПроверкаКС_1_52(СтруктураРезультата);
	ПроверкаКС_1_53а(СтруктураРезультата);
	ПроверкаКС_1_53б(СтруктураРезультата);
	ПроверкаКС_1_55_доп(СтруктураРезультата);
	ПроверкаКС_1_56_доп(СтруктураРезультата);
	ПроверкаКС_1_57_доп(СтруктураРезультата);
	
	мДанныеОтчета = Неопределено;
	Если СписокРасшифровкиформулы.Количество() = 0 Тогда
		Возврат СтруктураРезультата;
	КонецЕсли;
	
	АдресФормул			= ПоместитьВоВременноеХранилище(СписокРасшифровкиформулы	, Новый УникальныйИдентификатор);
	АдресПоказателей	= ПоместитьВоВременноеХранилище(СписокРасшифровкиПоказателей, Новый УникальныйИдентификатор);
	СтруктураРезультата.Вставить("СписокРасшифровкиформулы"		, АдресФормул);
	СтруктураРезультата.Вставить("СписокРасшифровкиПоказателей"	, АдресПоказателей);
	
	Возврат СтруктураРезультата;
	
КонецФункции

#КонецОбласти

#Область КС_Документирование

&НаКлиенте
Функция ВыполнитьДокументирование() Экспорт
	
	Возврат ВыполнитьДокументированиеНаСервере();
	
КонецФункции

&НаСервере
Функция ВыполнитьДокументированиеНаСервере()
	
	Документирование	= Истина;	
	СтруктураРезультата	= Новый Структура;
	СтруктураРезультата.Вставить("НаименованиеОтчета"	, "Декларация по НДС");
	СтруктураРезультата.Вставить("НаименованиеФормы"	, "2019Кв1");
	
	ТаблицаОписаний		= СформироватьТаблицуОписаний();
	
	ПроверкаКС_1_1(СтруктураРезультата);
	ПроверкаКС_1_2(СтруктураРезультата);
	ПроверкаКС_1_3(СтруктураРезультата);
	ПроверкаКС_1_4(СтруктураРезультата);
	ПроверкаКС_1_5(СтруктураРезультата);
	ПроверкаКС_1_6(СтруктураРезультата);
	ПроверкаКС_1_7(СтруктураРезультата);
	ПроверкаКС_1_8(СтруктураРезультата);
	ПроверкаКС_1_9(СтруктураРезультата);
	ПроверкаКС_1_10(СтруктураРезультата);
	ПроверкаКС_1_11(СтруктураРезультата);
	ПроверкаКС_1_12(СтруктураРезультата);
	ПроверкаКС_1_13(СтруктураРезультата);
	ПроверкаКС_1_14(СтруктураРезультата);
	ПроверкаКС_1_15(СтруктураРезультата);
	ПроверкаКС_1_16(СтруктураРезультата);
	ПроверкаКС_1_17(СтруктураРезультата);
	ПроверкаКС_1_18(СтруктураРезультата);
	ПроверкаКС_1_19(СтруктураРезультата);
	ПроверкаКС_1_20(СтруктураРезультата);
	ПроверкаКС_1_21(СтруктураРезультата);
	ПроверкаКС_1_22(СтруктураРезультата);
	ПроверкаКС_1_23а(СтруктураРезультата);
	ПроверкаКС_1_23б(СтруктураРезультата);
	ПроверкаКС_1_23в(СтруктураРезультата);
	ПроверкаКС_1_23г(СтруктураРезультата);
	ПроверкаКС_1_23д(СтруктураРезультата);
	ПроверкаКС_1_23е(СтруктураРезультата);
	ПроверкаКС_1_23ж(СтруктураРезультата);
	ПроверкаКС_1_23з(СтруктураРезультата);
	ПроверкаКС_1_24(СтруктураРезультата);
	ПроверкаКС_1_25(СтруктураРезультата);
	ПроверкаКС_1_26а(СтруктураРезультата);
	ПроверкаКС_1_26б(СтруктураРезультата);
	ПроверкаКС_1_27(СтруктураРезультата);
	ПроверкаКС_1_28(СтруктураРезультата);
	ПроверкаКС_1_29(СтруктураРезультата);
	ПроверкаКС_1_30(СтруктураРезультата);
	ПроверкаКС_1_31(СтруктураРезультата);
	ПроверкаКС_1_32(СтруктураРезультата);
	ПроверкаКС_1_33(СтруктураРезультата);
	ПроверкаКС_1_34(СтруктураРезультата);
	ПроверкаКС_1_35(СтруктураРезультата);
	ПроверкаКС_1_36(СтруктураРезультата);
	ПроверкаКС_1_37(СтруктураРезультата);
	ПроверкаКС_1_38(СтруктураРезультата);
	ПроверкаКС_1_39(СтруктураРезультата);
	ПроверкаКС_1_40(СтруктураРезультата);
	ПроверкаКС_1_41(СтруктураРезультата);
	ПроверкаКС_1_42(СтруктураРезультата);
	ПроверкаКС_1_43(СтруктураРезультата);
	ПроверкаКС_1_44(СтруктураРезультата);
	ПроверкаКС_1_45(СтруктураРезультата);
	ПроверкаКС_1_46(СтруктураРезультата);
	ПроверкаКС_1_47(СтруктураРезультата);
	ПроверкаКС_1_48(СтруктураРезультата);
	ПроверкаКС_1_49(СтруктураРезультата);
	ПроверкаКС_1_50(СтруктураРезультата);
	ПроверкаКС_1_51(СтруктураРезультата);
	ПроверкаКС_1_52(СтруктураРезультата);
	ПроверкаКС_1_53а(СтруктураРезультата);
	ПроверкаКС_1_53б(СтруктураРезультата);
	ПроверкаКС_1_54а(СтруктураРезультата);
	ПроверкаКС_1_54б(СтруктураРезультата);
	ПроверкаКС_1_55_доп(СтруктураРезультата);
	ПроверкаКС_1_56_доп(СтруктураРезультата);
	ПроверкаКС_1_57_доп(СтруктураРезультата);
	
	АдресТаблицыОписаний = ПоместитьВоВременноеХранилище(ТаблицаОписаний, Новый УникальныйИдентификатор);
	СтруктураРезультата.Вставить("АдресТаблицыОписаний", АдресТаблицыОписаний);
	
	Возврат СтруктураРезультата;
	
КонецФункции

&НаСервере
Функция СформироватьТаблицуОписаний()
	
	ТипСтрока20		= Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(20));
	ТипСтрока100	= Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(100));
	ТипСтрока900	= Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(900));
	ТипБулево		= Новый ОписаниеТипов("Булево");
	
	ТаблицаОписаний = Новый ТаблицаЗначений;
	ТаблицаОписаний.Колонки.Добавить("НомерКС"			, ТипСтрока20);
	ТаблицаОписаний.Колонки.Добавить("Раздел"			, ТипСтрока100);
	ТаблицаОписаний.Колонки.Добавить("ОписаниеКС"		, ТипСтрока900);
	ТаблицаОписаний.Колонки.Добавить("Нарушение"		, ТипСтрока100);
	ТаблицаОписаний.Колонки.Добавить("ОписаниеОшибки"	, ТипСтрока900);
	ТаблицаОписаний.Колонки.Добавить("Условие"			, ТипСтрока900);
	ТаблицаОписаний.Колонки.Добавить("Комментарий"		, ТипСтрока900);
	
	Возврат ТаблицаОписаний;
	
КонецФункции // СформироватьТаблицуОписаний;()

#КонецОбласти

#Область КС_Проверки

&НаСервере
Процедура ПроверкаКС_1_1(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='1.1'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Раздел 2'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru='Реализация отложена'"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Раздела 2 (КС 1.1)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст. 161, 171, 172, 174 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='При отражении в стр.070 Раздела 2 кодов 1011711, 1011703, необходимо соблюдение условия: стр.180 '") +
		НСтр("ru='гр.3 Раздела 3 <= стр.060 Раздела 2 декларации прошлого (прошлых) налоговых периодов, в случае '") +
		НСтр("ru='если покупка принята к вычету'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru=''"));
	Заголовки.Вставить("ОписаниеОшибки"		, 
		НСтр("ru='Необоснованное применение вычетов налоговым агентом'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_2(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='1.2'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Раздел 3'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Раздела 3 (КС 1.2)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст. 161, 171, 172 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Если в стр.070 Раздела 2 отражены только коды 1011705, 1011707, 1011714, то сумма налога по '") +
		НСтр("ru='стр.180 гр.3 Раздела 3 должна быть равна 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибка исчисления суммы НДС, подлежащей вычету'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р02С070"		, "П000200007003");
	ИменаПоказателей.Вставить("Р03С180"		, "П000300018003");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	ЗарегистрироватьФормулу(Настройки);
	
	ЗаполнитьИРасшифроватьПоказатели(Показатели, мДанныеОтчета.ДанныеКС.ДанныеР02);
	ЗаполнитьИРасшифроватьПоказатели(Показатели, мДанныеОтчета.ДанныеКС.ДанныеР03);
	
	КонтрольнаяСумма	= 0;
	КоличествоЛистов	= мДанныеОтчета.ДанныеКС.ДанныеР02.Количество();
	КодыОпераций		= "1011705,1011707,1011714";
	
	Для каждого Элемент Из Показатели.Р02С070.МассивЗначений Цикл
		Если НЕ ЗначениеЗаполнено(Элемент) Тогда
			КонтрольнаяСумма = КонтрольнаяСумма + 1;
		ИначеЕсли СтрНайти(КодыОпераций, Элемент) = 0 Тогда
			КонтрольнаяСумма = 0;
			Прервать;
		Иначе
			КонтрольнаяСумма = КонтрольнаяСумма + 2;
		КонецЕсли;
	КонецЦикла;
	
	РасчетнаяСумма = КонтрольнаяСумма / КоличествоЛистов;
	Настройки.ЭтоОшибка = РасчетнаяСумма > 1 И НЕ Показатели.Р03С180.Значение = 0;
	Настройки.Расшифровка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки,
		Показатели.Р03С180.Значение);
		
	ДополнитьСтруктуруОшибок(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_3(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='1.3'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Раздел 2'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Раздела 2 (КС 1.3)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст. 161, 173, 174 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Если в стр.070 Раздела 2 отражены коды 1011705, 1011707, то сумма налога по '") +
		НСтр("ru='стр.060 Раздела 2 = стр.080 Раздела 2 + стр.090 Раздела 2 - стр.100 Раздела 2'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = %2 + %3 - %4 Итог [%5]'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибка исчисления суммы НДС, подлежащей уплате в бюджет'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р02С070"		, "П000200007003");
	ИменаПоказателей.Вставить("Р02С060"		, "П000200006003");
	ИменаПоказателей.Вставить("Р02С080"		, "П000200008003");
	ИменаПоказателей.Вставить("Р02С090"		, "П000200009003");
	ИменаПоказателей.Вставить("Р02С100"		, "П000200010003");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	КодыОпераций = "1011705,1011707";
	
	Для каждого Лист02 Из мДанныеОтчета.ДанныеКС.ДанныеР02 Цикл
		
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьИРасшифроватьПоказатели(Показатели, Лист02);
		
		КонтрольнаяСумма = ?(ЗначениеЗаполнено(Показатели.Р02С070.Значение) 
			И НЕ СтрНайти(КодыОпераций, Показатели.Р02С070.Значение) = 0, 1, 0);
		РасчетнаяСумма = Показатели.Р02С080.Значение + Показатели.Р02С090.Значение - Показатели.Р02С100.Значение;
		Настройки.ЭтоОшибка = КонтрольнаяСумма = 1 И НЕ Показатели.Р02С060.Значение = РасчетнаяСумма;
		Настройки.Расшифровка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки,
			Показатели.Р02С060.Значение, Показатели.Р02С080.Значение, Показатели.Р02С090.Значение, 
			Показатели.Р02С100.Значение, РасчетнаяСумма);
			
		ДополнитьСтруктуруОшибок(Настройки);
	КонецЦикла;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_4(СтруктураРезультата)
	
	Перем ПоказателиЛевЧисл;
	Перем ПоказателиЛевЗнам;
	Перем ПоказателиПрвЧисл;
	Перем ПоказателиПрвЗнам;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='1.4'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Раздел 3'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, 
		НСтр("ru='Возможно влияние погрешности в результате округления показателей'"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Раздела 3 (КС 1.4)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст. 149, п.4 ст. 170 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Требуется соблюдение равенства: (стр.010 + стр.020 + стр.030 + стр.040 + стр.041 + стр.042 гр.3 '") +
		НСтр("ru='Раздела 3) / ((стр.010 + стр.020 + стр.030 + стр.040 + стр.041 + стр.042 гр.3 Раздела 3) + '") +
		НСтр("ru='(сумма гр.2 Раздела 7 по кодам 1010800 - 1010830)) = (стр.120 + стр.150 + стр.160 гр.3 Раздела 3) '") +
		НСтр("ru='/ ((стр.120 + стр.150 + стр.160 гр.3 Раздела 3) + (сумма гр.4 Раздела 7 по кодам 1010800 - 1010830))'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 / (%1 + %2) Итог [%3] = %4 / (%4 + %5) Итог [%6]'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Возможна ошибка исчисления суммы НДС, подлежащей вычету'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	КодыОпераций =	"1010800,1010801,1010802,1010803,1010804,1010805,1010806,1010807,1010808,1010809,1010810,
					|1010811,1010812,1010813,1010814,1010815,1010816,1010817,1010818,1010819,1010820,1010821,
					|1010822,1010823,1010824,1010825,1010826,1010827,1010828,1010829,1010830";
	
	ИменаПоказателейЛевЧисл = Новый Структура;
	ИменаПоказателейЛевЧисл.Вставить("Р03С010"	, "П000300001003");
	ИменаПоказателейЛевЧисл.Вставить("Р03С020"	, "П000300002003");
	ИменаПоказателейЛевЧисл.Вставить("Р03С030"	, "П000300003003");
	ИменаПоказателейЛевЧисл.Вставить("Р03С040"	, "П000300004003");
	ИменаПоказателейЛевЧисл.Вставить("Р03С041"	, "П000300004103");
	ИменаПоказателейЛевЧисл.Вставить("Р03С042"	, "П000300004203");
	
	ИменаПоказателейЛевЗнам = Новый Структура;
	ИменаПоказателейЛевЗнам.Вставить("Р07С001Г1", "П000700000101_");
	ИменаПоказателейЛевЗнам.Вставить("Р07С001Г2", "П000700000102_");
	
	ИменаПоказателейПрвЧисл = Новый Структура;
	ИменаПоказателейПрвЧисл.Вставить("Р03С120"	, "П000300012003");
	ИменаПоказателейПрвЧисл.Вставить("Р03С150"	, "П000300015003");
	ИменаПоказателейПрвЧисл.Вставить("Р03С160"	, "П000300016003");
	
	ИменаПоказателейПрвЗнам = Новый Структура;
	ИменаПоказателейПрвЗнам.Вставить("Р07С001Г1", "П000700000101_");
	ИменаПоказателейПрвЗнам.Вставить("Р07С001Г4", "П000700000104_");
	
	СформироватьПоказатели(ПоказателиЛевЧисл, ИменаПоказателейЛевЧисл);
	СформироватьПоказатели(ПоказателиЛевЗнам, ИменаПоказателейЛевЗнам);
	СформироватьПоказатели(ПоказателиПрвЧисл, ИменаПоказателейПрвЧисл);
	СформироватьПоказатели(ПоказателиПрвЗнам, ИменаПоказателейПрвЗнам);
	
	ПоказателиЛевЗнам.Р07С001Г1.Расшифровывать = Ложь;
	ПоказателиПрвЗнам.Р07С001Г1.Расшифровывать = Ложь;
		
	ЗарегистрироватьФормулу(Настройки);
	ЗаполнитьИРасшифроватьПоказатели(ПоказателиЛевЧисл, мДанныеОтчета.ДанныеКС.ДанныеР03);
	РасчетнаяСуммаЛевЧисл = СуммаПоказателей(ПоказателиЛевЧисл);
	
	КолвоСтрок = КоличествоСтрок(мДанныеОтчета.ДанныеКС.ДанныеР07, ПоказателиЛевЗнам.Р07С001Г1.ИмяПоказателя);
	Для Инд = 1 По КолвоСтрок Цикл
		ПоказателиЛевЗнам.Р07С001Г1.ИмяПоказателя = Лев(ПоказателиЛевЗнам.Р07С001Г1.ИмяПоказателя, 14) + XMLСтрока(Инд);
		ПоказателиЛевЗнам.Р07С001Г2.ИмяПоказателя = Лев(ПоказателиЛевЗнам.Р07С001Г2.ИмяПоказателя, 14) + XMLСтрока(Инд);
		ЗаполнитьИРасшифроватьПоказатель(ПоказателиЛевЗнам.Р07С001Г1, мДанныеОтчета.ДанныеКС.ДанныеР07);
		Если ЗначениеЗаполнено(ПоказателиЛевЗнам.Р07С001Г1.Значение) 
			И НЕ СтрНайти(КодыОпераций, ПоказателиЛевЗнам.Р07С001Г1.Значение) = 0 Тогда
			ЗаполнитьИРасшифроватьПоказатель(ПоказателиЛевЗнам.Р07С001Г2, мДанныеОтчета.ДанныеКС.ДанныеР07);
		КонецЕсли;
	КонецЦикла;
	
	ЗаполнитьИРасшифроватьПоказатели(ПоказателиПрвЧисл, мДанныеОтчета.ДанныеКС.ДанныеР03);
	РасчетнаяСуммаПрвЧисл = СуммаПоказателей(ПоказателиПрвЧисл);
	
	Для Инд = 1 По КолвоСтрок Цикл
		ПоказателиПрвЗнам.Р07С001Г1.ИмяПоказателя = Лев(ПоказателиПрвЗнам.Р07С001Г1.ИмяПоказателя, 14) + XMLСтрока(Инд);
		ПоказателиПрвЗнам.Р07С001Г4.ИмяПоказателя = Лев(ПоказателиПрвЗнам.Р07С001Г4.ИмяПоказателя, 14) + XMLСтрока(Инд);
		ЗаполнитьИРасшифроватьПоказатель(ПоказателиПрвЗнам.Р07С001Г1, мДанныеОтчета.ДанныеКС.ДанныеР07);
		Если ЗначениеЗаполнено(ПоказателиПрвЗнам.Р07С001Г1.Значение) 
			И НЕ СтрНайти(КодыОпераций, ПоказателиПрвЗнам.Р07С001Г1.Значение) = 0 Тогда
			ЗаполнитьИРасшифроватьПоказатель(ПоказателиПрвЗнам.Р07С001Г4, мДанныеОтчета.ДанныеКС.ДанныеР07);
		КонецЕсли;
	КонецЦикла;
	
	РасчетнаяСуммаЛевЗнам = РасчетнаяСуммаЛевЧисл + ПоказателиЛевЗнам.Р07С001Г2.Итог;
	РасчетнаяСуммаПрвЗнам = РасчетнаяСуммаПрвЧисл + ПоказателиПрвЗнам.Р07С001Г4.Итог;
	РасчетнаяСуммаЛев = Окр(?(РасчетнаяСуммаЛевЧисл = 0 ИЛИ РасчетнаяСуммаЛевЗнам = 0, 0, 
		РасчетнаяСуммаЛевЧисл/РасчетнаяСуммаЛевЗнам), 2);
	РасчетнаяСуммаПрв = Окр(?(РасчетнаяСуммаПрвЧисл = 0 ИЛИ РасчетнаяСуммаПрвЗнам = 0, 0, 
		РасчетнаяСуммаПрвЧисл/РасчетнаяСуммаПрвЗнам), 2);
	
	Настройки.ЭтоОшибка = НЕ РасчетнаяСуммаЛев = РасчетнаяСуммаПрв;
	Настройки.Расшифровка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки,
		РасчетнаяСуммаЛевЧисл, ПоказателиЛевЗнам.Р07С001Г2.Итог, РасчетнаяСуммаЛев, 
		РасчетнаяСуммаПрвЧисл, ПоказателиПрвЗнам.Р07С001Г4.Итог, РасчетнаяСуммаПрв);
		
	ДополнитьСтруктуруОшибок(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_5(СтруктураРезультата)
	
	Перем ПоказателиР03;
	Перем ПоказателиР31;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='1.5'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Раздел 3'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Раздела 3 (КС 1.5)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст. 170, 171 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Требуется соблюдение равенства: стр.080 гр.5 Раздела 3 >= суммы стр.090 и 100 гр.5 Раздела 3 и '") +
		НСтр("ru='стр.070 гр.4 Приложения 1 к Разделу 3 по кодам 1011801, 1011802, 1011803, 1011805, 1011806, '") +
		НСтр("ru='1011807, 1011808 за отчетный год, указанный в стр.070 гр.1 Приложения 1 к Разделу 3 и '") +
		НСтр("ru='соответствующий отчетному году на титульном листе'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 >= %2 + %3 + %4 Итог [%5]'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Возможна ошибка исчисления суммы НДС, подлежащей восстановлению'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателейР03 = Новый Структура;
	ИменаПоказателейР03.Вставить("Р03С080"	, "П000300008005");
	ИменаПоказателейР03.Вставить("Р03С090"	, "П000300009005");
	ИменаПоказателейР03.Вставить("Р03С100"	, "П000300010005");
	
	ИменаПоказателейР31 = Новый Структура;
	ИменаПоказателейР31.Вставить("Р31С020"	, "П000310002001");
	ИменаПоказателейР31.Вставить("Р31С001Г1", "П000310007001_");
	ИменаПоказателейР31.Вставить("Р31С001Г4", "П000310007004_");
	
	СформироватьПоказатели(ПоказателиР03, ИменаПоказателейР03);
	СформироватьПоказатели(ПоказателиР31, ИменаПоказателейР31);
	
	КодыОпераций = "1011801,1011802,1011803,1011805,1011806,1011807,1011808";
	ПоказателиР31.Р31С020.Расшифровывать	= Ложь;
	ПоказателиР31.Р31С001Г1.Расшифровывать	= Ложь;
		
	ЗарегистрироватьФормулу(Настройки);
	ЗаполнитьИРасшифроватьПоказатели(ПоказателиР03, мДанныеОтчета.ДанныеКС.ДанныеР03);
	
	Для каждого Лист31 Из мДанныеОтчета.ДанныеКС.ДанныеР31 Цикл
		ЗаполнитьИРасшифроватьПоказатель(ПоказателиР31.Р31С020	, Лист31);
		
		Если ЗначениеЗаполнено(ПоказателиР31.Р31С020.Значение) 
			И НЕ СтрНайти(КодыОпераций, ПоказателиР31.Р31С020.Значение) = 0 Тогда
			КолвоСтрок = КоличествоСтрок(Лист31, Лев(ПоказателиР31.Р31С001Г1.ИмяПоказателя, 14));
			
			Для Счетчик = 1 По КолвоСтрок Цикл
				ПоказателиР31.Р31С001Г1.ИмяПоказателя = Лев(ПоказателиР31.Р31С001Г1.ИмяПоказателя, 14) + XMLСтрока(Счетчик);
				ПоказателиР31.Р31С001Г4.ИмяПоказателя = Лев(ПоказателиР31.Р31С001Г4.ИмяПоказателя, 14) + XMLСтрока(Счетчик);
				ЗаполнитьИРасшифроватьПоказатель(ПоказателиР31.Р31С001Г1, Лист31);
				Если мДанныеОтчета.ДанныеКС.ДанныеР00.ОтчетГод = ПоказателиР31.Р31С001Г1.Значение Тогда
					ЗаполнитьИРасшифроватьПоказатель(ПоказателиР31.Р31С001Г4, Лист31);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	РасчетнаяСумма = ПоказателиР03.Р03С090.Значение + ПоказателиР03.Р03С100.Значение + ПоказателиР31.Р31С001Г4.Итог;
	Настройки.ЭтоОшибка = НЕ ПоказателиР03.Р03С080.Значение >= РасчетнаяСумма;
	Настройки.Расшифровка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки,
		ПоказателиР03.Р03С080.Значение, ПоказателиР03.Р03С090.Значение, ПоказателиР03.Р03С100.Значение, 
		ПоказателиР31.Р31С001Г4.Итог, РасчетнаяСумма);
		
	ДополнитьСтруктуруОшибок(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_6(СтруктураРезультата)
	
	Перем ПоказателиР03;
	Перем ПоказателиР31;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='1.6'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Раздел 3'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Раздела 3 (КС 1.6)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст. 170, 171 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Требуется соблюдение равенства: (стр.080 - стр.090 - стр.100 гр.5 Раздела 3) >= суммы стр.070 '") +
		НСтр("ru='гр.4 Приложения 1 к Разделу 3 по кодам 1011801, 1011802, 1011803, 1011805, 1011806, 1011807, '") +
		НСтр("ru='1011808 за отчетный год, указанный в стр.070 гр.1 Приложения 1 к Разделу 3 и соответствующий '") +
		НСтр("ru='отчетному году на титульном листе'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='(%1 - %2 - %3) Итог [%4] >= %5'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Возможна ошибка исчисления суммы НДС, подлежащей восстановлению'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателейР03 = Новый Структура;
	ИменаПоказателейР03.Вставить("Р03С080"	, "П000300008005");
	ИменаПоказателейР03.Вставить("Р03С090"	, "П000300009005");
	ИменаПоказателейР03.Вставить("Р03С100"	, "П000300010005");
	
	ИменаПоказателейР31 = Новый Структура;
	ИменаПоказателейР31.Вставить("Р31С020"	, "П000310002001");
	ИменаПоказателейР31.Вставить("Р31С001Г1", "П000310007001_");
	ИменаПоказателейР31.Вставить("Р31С001Г4", "П000310007004_");
	
	СформироватьПоказатели(ПоказателиР03, ИменаПоказателейР03);
	СформироватьПоказатели(ПоказателиР31, ИменаПоказателейР31);
	
	КодыОпераций = "1011801,1011802,1011803,1011805,1011806,1011807,1011808";
	ПоказателиР31.Р31С020.Расшифровывать	= Ложь;
	ПоказателиР31.Р31С001Г1.Расшифровывать	= Ложь;
		
	ЗарегистрироватьФормулу(Настройки);
	ЗаполнитьИРасшифроватьПоказатели(ПоказателиР03, мДанныеОтчета.ДанныеКС.ДанныеР03);
	
	Для каждого Лист31 Из мДанныеОтчета.ДанныеКС.ДанныеР31 Цикл
		ЗаполнитьИРасшифроватьПоказатель(ПоказателиР31.Р31С020	, Лист31);
		
		Если ЗначениеЗаполнено(ПоказателиР31.Р31С020.Значение) 
			И НЕ СтрНайти(КодыОпераций, ПоказателиР31.Р31С020.Значение) = 0 Тогда
			КолвоСтрок = КоличествоСтрок(Лист31, Лев(ПоказателиР31.Р31С001Г1.ИмяПоказателя, 14));
			
			Для Счетчик = 1 По КолвоСтрок Цикл
				ПоказателиР31.Р31С001Г1.ИмяПоказателя = Лев(ПоказателиР31.Р31С001Г1.ИмяПоказателя, 14) + XMLСтрока(Счетчик);
				ПоказателиР31.Р31С001Г4.ИмяПоказателя = Лев(ПоказателиР31.Р31С001Г4.ИмяПоказателя, 14) + XMLСтрока(Счетчик);
				ЗаполнитьИРасшифроватьПоказатель(ПоказателиР31.Р31С001Г1, Лист31);
				Если мДанныеОтчета.ДанныеКС.ДанныеР00.ОтчетГод = ПоказателиР31.Р31С001Г1.Значение Тогда
					ЗаполнитьИРасшифроватьПоказатель(ПоказателиР31.Р31С001Г4, Лист31);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	РасчетнаяСумма = ПоказателиР03.Р03С080.Значение - ПоказателиР03.Р03С090.Значение - ПоказателиР03.Р03С100.Значение;
	Настройки.ЭтоОшибка = НЕ РасчетнаяСумма >= ПоказателиР31.Р31С001Г4.Итог;
	Настройки.Расшифровка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки,
		ПоказателиР03.Р03С080.Значение, ПоказателиР03.Р03С090.Значение, ПоказателиР03.Р03С100.Значение, 
		РасчетнаяСумма, ПоказателиР31.Р31С001Г4.Итог);
		
	ДополнитьСтруктуруОшибок(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_7(СтруктураРезультата)
	
	Перем ПоказателиИтога;
	Перем ПоказателиСуммы;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='1.7'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Раздел 3'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Раздела 3 (КС 1.7)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст. 146, 154, 155, 156, 158, 159, 162 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Общая сумма налога в стр.118 гр.5 Раздела 3 должна быть равна сумме стр.010, 020, 030, 040, '") +
		НСтр("ru='041, 042, 045, 046, 050, 060, 070, 080, 105, 109, 110, 115 по гр.5 Раздела 3'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, 
		НСтр("ru='Ошибка исчисления суммы НДС, подлежащей уплате в бюджет'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателейИтога = Новый Структура;
	ИменаПоказателейИтога.Вставить("Р03С118Г5", "П000300011805");
	
	ИменаПоказателейСуммы = Новый Структура;
	ИменаПоказателейСуммы.Вставить("Р03С010Г5", "П000300001005");
	ИменаПоказателейСуммы.Вставить("Р03С020Г5", "П000300002005");
	ИменаПоказателейСуммы.Вставить("Р03С030Г5", "П000300003005");
	ИменаПоказателейСуммы.Вставить("Р03С040Г5", "П000300004005");
	ИменаПоказателейСуммы.Вставить("Р03С041Г5", "П000300004105");
	ИменаПоказателейСуммы.Вставить("Р03С042Г5", "П000300004205");
	ИменаПоказателейСуммы.Вставить("Р03С045Г5", "П000300004505");
	ИменаПоказателейСуммы.Вставить("Р03С046Г5", "П000300004605");
	ИменаПоказателейСуммы.Вставить("Р03С050Г5", "П000300005005");
	ИменаПоказателейСуммы.Вставить("Р03С060Г5", "П000300006005");
	ИменаПоказателейСуммы.Вставить("Р03С070Г5", "П000300007005");
	ИменаПоказателейСуммы.Вставить("Р03С080Г5", "П000300008005");
	ИменаПоказателейСуммы.Вставить("Р03С105Г5", "П000300010505");
	ИменаПоказателейСуммы.Вставить("Р03С109Г5", "П000300010905");
	ИменаПоказателейСуммы.Вставить("Р03С110Г5", "П000300011005");
	ИменаПоказателейСуммы.Вставить("Р03С115Г5", "П000300011505");
	
	СформироватьПоказатели(ПоказателиИтога, ИменаПоказателейИтога);
	СформироватьПоказатели(ПоказателиСуммы, ИменаПоказателейСуммы);
	
	ЗарегистрироватьФормулу(Настройки);
	ЗаполнитьИРасшифроватьПоказатели(ПоказателиИтога, мДанныеОтчета.ДанныеКС.ДанныеР03);
	ЗаполнитьИРасшифроватьПоказатели(ПоказателиСуммы, мДанныеОтчета.ДанныеКС.ДанныеР03);
	
	РасчетнаяСумма = СуммаПоказателей(ПоказателиСуммы);
	Настройки.ЭтоОшибка = НЕ ПоказателиИтога.Р03С118Г5.Значение = РасчетнаяСумма;
	Настройки.Расшифровка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки,
		ПоказателиИтога.Р03С118Г5.Значение, РасчетнаяСумма);
		
	ДополнитьСтруктуруОшибок(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_8(СтруктураРезультата)
	
	Перем ПоказателиИтога;
	Перем ПоказателиСуммы;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='1.8'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Раздел 3'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Раздела 3 (КС 1.8)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст. 171, 172 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Общая сумма НДС, подлежащая вычету по стр.190 гр.3 Раздела 3 должна быть равна сумме стр.'") +
		НСтр("ru='120, 130, 135, 140, 150, 160, 170, 180, 185 по гр.3 Раздела 3'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибка исчисления суммы НДС, подлежащей возмещению'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателейИтога = Новый Структура;
	ИменаПоказателейИтога.Вставить("Р03С190Г3", "П000300019003");
	
	ИменаПоказателейСуммы = Новый Структура;
	ИменаПоказателейСуммы.Вставить("Р03С120Г3", "П000300012003");
	ИменаПоказателейСуммы.Вставить("Р03С130Г3", "П000300013003");
	ИменаПоказателейСуммы.Вставить("Р03С135Г3", "П000300013503");
	ИменаПоказателейСуммы.Вставить("Р03С140Г3", "П000300014003");
	ИменаПоказателейСуммы.Вставить("Р03С150Г3", "П000300015003");
	ИменаПоказателейСуммы.Вставить("Р03С160Г3", "П000300016003");
	ИменаПоказателейСуммы.Вставить("Р03С170Г3", "П000300017003");
	ИменаПоказателейСуммы.Вставить("Р03С180Г3", "П000300018003");
	ИменаПоказателейСуммы.Вставить("Р03С185Г3", "П000300018503");
	
	СформироватьПоказатели(ПоказателиИтога, ИменаПоказателейИтога);
	СформироватьПоказатели(ПоказателиСуммы, ИменаПоказателейСуммы);
	
	ЗарегистрироватьФормулу(Настройки);
	ЗаполнитьИРасшифроватьПоказатели(ПоказателиИтога, мДанныеОтчета.ДанныеКС.ДанныеР03);
	ЗаполнитьИРасшифроватьПоказатели(ПоказателиСуммы, мДанныеОтчета.ДанныеКС.ДанныеР03);
	
	РасчетнаяСумма = СуммаПоказателей(ПоказателиСуммы);
	Настройки.ЭтоОшибка = НЕ ПоказателиИтога.Р03С190Г3.Значение = РасчетнаяСумма;
	Настройки.Расшифровка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки,
		ПоказателиИтога.Р03С190Г3.Значение, РасчетнаяСумма);
		
	ДополнитьСтруктуруОшибок(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_9(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='1.9'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Раздел 3'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Раздела 3 (КС 1.9)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст. 173 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Сумма налога, подлежащая уплате в бюджет по стр.200 гр.3 Раздела 3 должна быть равна разнице '") +
		НСтр("ru='значений стр.118 гр.5 и стр.190 гр.3 Раздела 3, если такая разница > 0, иначе 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = %2 - %3 Итог [%4]'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибка исчисления суммы НДС, подлежащей уплате в бюджет'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р03С200Г3"	, "П000300020003");
	ИменаПоказателей.Вставить("Р03С118Г5"	, "П000300011805");
	ИменаПоказателей.Вставить("Р03С190Г3"	, "П000300019003");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	ЗарегистрироватьФормулу(Настройки);
	
	ЗаполнитьИРасшифроватьПоказатели(Показатели, мДанныеОтчета.ДанныеКС.ДанныеР03);
	
	РасчетнаяСумма = Макс(Показатели.Р03С118Г5.Значение - Показатели.Р03С190Г3.Значение, 0);
	Настройки.ЭтоОшибка = НЕ Показатели.Р03С200Г3.Значение = РасчетнаяСумма;
	Настройки.Расшифровка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки,
		Показатели.Р03С200Г3.Значение, Показатели.Р03С118Г5.Значение, Показатели.Р03С190Г3.Значение, РасчетнаяСумма);
		
	ДополнитьСтруктуруОшибок(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_10(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='1.10'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Раздел 3'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Раздела 3 (КС 1.10)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст. 173 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Сумма налога, подлежащая уплате в бюджет по стр.210 гр.3 Раздела 3 должна быть равна разнице '") +
		НСтр("ru='значений стр.190 гр.3 и стр.118 гр.5 Раздела 3, если такая разница > 0, иначе 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = %2 - %3 Итог [%4]'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибка исчисления суммы НДС, подлежащей возмещению'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р03С210Г3"	, "П000300021003");
	ИменаПоказателей.Вставить("Р03С190Г3"	, "П000300019003");
	ИменаПоказателей.Вставить("Р03С118Г5"	, "П000300011805");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	ЗарегистрироватьФормулу(Настройки);
	
	ЗаполнитьИРасшифроватьПоказатели(Показатели, мДанныеОтчета.ДанныеКС.ДанныеР03);
	
	РасчетнаяСумма = Макс(Показатели.Р03С190Г3.Значение - Показатели.Р03С118Г5.Значение, 0);
	Настройки.ЭтоОшибка = НЕ Показатели.Р03С210Г3.Значение = РасчетнаяСумма;
	Настройки.Расшифровка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки,
		Показатели.Р03С210Г3.Значение, Показатели.Р03С190Г3.Значение, Показатели.Р03С118Г5.Значение, РасчетнаяСумма);
		
	ДополнитьСтруктуруОшибок(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_11(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='1.11'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Раздел 3'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Раздела 3 (КС 1.11)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст. п.8 ст.171, п.6 ст.172, п.1 ст.146 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Сумма стр.010, 020, 030, 040, 041, 042 гр.5 Раздела 3 должна быть больше или равна сумме '") +
		НСтр("ru='налога, подлежащей вычету по стр.170 гр.3 Раздела 3'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 + %2 + %3 + %4 + %5 + %6 Итог [%7] >= %8'"));
	Заголовки.Вставить("ОписаниеОшибки"		, 
		НСтр("ru='Ошибка исчисления суммы НДС к уплате в бюджет либо подлежащей вычету'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р03С010Г5", "П000300001005");
	ИменаПоказателей.Вставить("Р03С020Г5", "П000300002005");
	ИменаПоказателей.Вставить("Р03С030Г5", "П000300003005");
	ИменаПоказателей.Вставить("Р03С040Г5", "П000300004005");
	ИменаПоказателей.Вставить("Р03С041Г5", "П000300004105");
	ИменаПоказателей.Вставить("Р03С042Г5", "П000300004205");
	ИменаПоказателей.Вставить("Р03С170Г3", "П000300017003");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	ЗарегистрироватьФормулу(Настройки);
	
	ЗаполнитьИРасшифроватьПоказатели(Показатели, мДанныеОтчета.ДанныеКС.ДанныеР03);
	
	РасчетнаяСумма = Показатели.Р03С010Г5.Значение + Показатели.Р03С020Г5.Значение + Показатели.Р03С030Г5.Значение + 
		Показатели.Р03С040Г5.Значение + Показатели.Р03С041Г5.Значение + Показатели.Р03С042Г5.Значение;
	Настройки.ЭтоОшибка = НЕ РасчетнаяСумма >= Показатели.Р03С170Г3.Значение;
	Настройки.Расшифровка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки,
		Показатели.Р03С010Г5.Значение, Показатели.Р03С020Г5.Значение, Показатели.Р03С030Г5.Значение, 
		Показатели.Р03С040Г5.Значение, Показатели.Р03С041Г5.Значение, Показатели.Р03С042Г5.Значение, РасчетнаяСумма, 
		Показатели.Р03С170Г3.Значение);
		
	ДополнитьСтруктуруОшибок(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_12(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='1.12'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Раздел 3'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Раздела 3 (КС 1.12)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст. п.6 ст.171, п.5 ст.172 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Сумма НДС по выполненным СМР для собственного потребления по стр.060 гр.5 Раздела 3 '") +
		НСтр("ru='должна быть больше либо равна сумме налога, подлежащей вычету по стр.140 гр.3 Раздела 3'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 >= %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, 
		НСтр("ru='Ошибка исчисления суммы НДС, подлежащей вычету'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р03С060Г5", "П000300006005");
	ИменаПоказателей.Вставить("Р03С140Г3", "П000300014003");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	ЗарегистрироватьФормулу(Настройки);
	
	ЗаполнитьИРасшифроватьПоказатели(Показатели, мДанныеОтчета.ДанныеКС.ДанныеР03);
	
	Настройки.ЭтоОшибка = НЕ Показатели.Р03С060Г5.Значение >= Показатели.Р03С140Г3.Значение;
	Настройки.Расшифровка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки,
		Показатели.Р03С060Г5.Значение, Показатели.Р03С140Г3.Значение);
		
	ДополнитьСтруктуруОшибок(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_13(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='1.13'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Приложение 2 к Разделу 3'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Приложения 2 к Разделу 3 (КС 1.13)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст. 146, 153, 154 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Сумма исчисленного налога по гр.2 Приложения 2 к Разделу 3 должна быть меньше или равна общей '") +
		НСтр("ru='суммы НДС в стр.118 гр.5 Раздела 3'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 <= %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, 
		НСтр("ru='Ошибка исчисления суммы НДС, подлежащей уплате в бюджет'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р32С001Г2"	, "П000320000102_");
	ИменаПоказателей.Вставить("Р03С118Г5"	, "П000300011805");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	ЗарегистрироватьФормулу(Настройки);
	
	ЗаполнитьИРасшифроватьПоказатели(Показатели, мДанныеОтчета.ДанныеКС.ДанныеР32);
	ЗаполнитьИРасшифроватьПоказатели(Показатели, мДанныеОтчета.ДанныеКС.ДанныеР03);
	
	Настройки.ЭтоОшибка = НЕ Показатели.Р32С001Г2.Итог <= Показатели.Р03С118Г5.Значение;
	Настройки.Расшифровка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки,
		Показатели.Р32С001Г2.Итог, Показатели.Р03С118Г5.Значение);
		
	ДополнитьСтруктуруОшибок(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_14(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='1.14'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Приложение 2 к Разделу 3'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Приложения 2 к Разделу 3 (КС 1.14)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст. 170, 171, 172 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Сумма налоговых вычетов по гр.3 Приложения 2 к Разделу 3 должна быть меньше или равна общей '") +
		НСтр("ru='суммы НДС, подлежащей вычету в стр. 190 Раздела 3'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 <= %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, 
		НСтр("ru='Ошибка исчисления суммы НДС, подлежащей вычету'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р32С001Г3"	, "П000320000103_");
	ИменаПоказателей.Вставить("Р03С190Г3"	, "П000300019003");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	ЗарегистрироватьФормулу(Настройки);
	
	ЗаполнитьИРасшифроватьПоказатели(Показатели, мДанныеОтчета.ДанныеКС.ДанныеР32);
	ЗаполнитьИРасшифроватьПоказатели(Показатели, мДанныеОтчета.ДанныеКС.ДанныеР03);
	
	Настройки.ЭтоОшибка = НЕ Показатели.Р32С001Г3.Итог <= Показатели.Р03С190Г3.Значение;
	Настройки.Расшифровка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки,
		Показатели.Р32С001Г3.Итог, Показатели.Р03С190Г3.Значение);
		
	ДополнитьСтруктуруОшибок(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_15(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='1.15'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Раздел 4'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Раздела 4 (КС 1.15)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст. 171, 172 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Сумма налога по стр.120 Раздела 4 должна быть равна сумме значений стр.030 и 040 за минусом '") +
		НСтр("ru='суммы значений стр.050 и 080 Раздела 4, если полученная разница > 0, иначе 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = (%2 + %3) - (%4 + %5) Итог [%6]'"));
	Заголовки.Вставить("ОписаниеОшибки"		, 
		НСтр("ru='Ошибка исчисления суммы НДС, подлежащей вычету'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р04С120"	, "П000400012003");
	ИменаПоказателей.Вставить("Р04С030"	, "П0004М1003003_");
	ИменаПоказателей.Вставить("Р04С040"	, "П0004М1004003_");
	ИменаПоказателей.Вставить("Р04С050"	, "П0004М1005003_");
	ИменаПоказателей.Вставить("Р04С080"	, "П0004М2008003_");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	ЗарегистрироватьФормулу(Настройки);
	
	ЗаполнитьИРасшифроватьПоказатели(Показатели, мДанныеОтчета.ДанныеКС.ДанныеР04);
	
	РасчетнаяСумма = Макс(Показатели.Р04С030.Итог + Показатели.Р04С040.Итог - Показатели.Р04С050.Итог - 
		Показатели.Р04С080.Итог, 0);
	Настройки.ЭтоОшибка = НЕ Показатели.Р04С120.Значение = РасчетнаяСумма;
	Настройки.Расшифровка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки,
		Показатели.Р04С120.Значение, Показатели.Р04С030.Итог, Показатели.Р04С040.Итог, Показатели.Р04С050.Итог, 
		Показатели.Р04С080.Итог, РасчетнаяСумма);
		
	ДополнитьСтруктуруОшибок(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_16(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='1.16'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Раздел 5'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Раздела 5 (КС 1.16)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст. 171, 172 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Сумма налога по стр.080 Раздела 5 должна быть равна сумме стр.050 Раздела 5'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, 
		НСтр("ru='Ошибка исчисления суммы НДС, подлежащей вычету'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р05С080"	, "П000500008003");
	ИменаПоказателей.Вставить("Р05С050"	, "П000500005003_");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	ЗарегистрироватьФормулу(Настройки);
	
	ЗаполнитьИРасшифроватьПоказатели(Показатели, мДанныеОтчета.ДанныеКС.ДанныеР05);
	
	Настройки.ЭтоОшибка = НЕ Показатели.Р05С080.Значение = Показатели.Р05С050.Итог;
	Настройки.Расшифровка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки,
		Показатели.Р05С080.Значение, Показатели.Р05С050.Итог);
		
	ДополнитьСтруктуруОшибок(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_17(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='1.17'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Раздел 5'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Раздела 5 (КС 1.17)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст. 171, 172 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Сумма налога по стр.090 Раздела 5 должна быть равна сумме стр.070 Раздела 5'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, 
		НСтр("ru='Ошибка исчисления суммы НДС, подлежащей вычету'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р05С090"	, "П000500009003");
	ИменаПоказателей.Вставить("Р05С070"	, "П000500007003_");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	ЗарегистрироватьФормулу(Настройки);
	
	ЗаполнитьИРасшифроватьПоказатели(Показатели, мДанныеОтчета.ДанныеКС.ДанныеР05);
	
	Настройки.ЭтоОшибка = НЕ Показатели.Р05С090.Значение = Показатели.Р05С070.Итог;
	Настройки.Расшифровка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки,
		Показатели.Р05С090.Значение, Показатели.Р05С070.Итог);
		
	ДополнитьСтруктуруОшибок(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_18(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='1.18'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Раздел 6'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Раздела 6 (КС 1.18)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст. 153, 164, 165, 167 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Сумма налога по стр.050 Раздела 6 должна быть равна сумме стр.030 Раздела 6'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, 
		НСтр("ru='Ошибка исчисления суммы НДС, подлежащей уплате в бюджет'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р06С050"	, "П000600005003");
	ИменаПоказателей.Вставить("Р06С030"	, "П0006М1003003_");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	ЗарегистрироватьФормулу(Настройки);
	
	ЗаполнитьИРасшифроватьПоказатели(Показатели, мДанныеОтчета.ДанныеКС.ДанныеР06);
	
	Настройки.ЭтоОшибка = НЕ Показатели.Р06С050.Значение = Показатели.Р06С030.Итог;
	Настройки.Расшифровка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки,
		Показатели.Р06С050.Значение, Показатели.Р06С030.Итог);
		
	ДополнитьСтруктуруОшибок(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_19(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='1.19'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Раздел 6'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Раздела 6 (КС 1.19)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст. 153, 164, 165, 167 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Сумма налога по стр.060 Раздела 6 должна быть равна сумме стр.040 Раздела 6'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, 
		НСтр("ru='Ошибка исчисления суммы НДС, подлежащей вычету'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р06С060"	, "П000600006003");
	ИменаПоказателей.Вставить("Р06С040"	, "П0006М1004003_");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	ЗарегистрироватьФормулу(Настройки);
	
	ЗаполнитьИРасшифроватьПоказатели(Показатели, мДанныеОтчета.ДанныеКС.ДанныеР06);
	
	Настройки.ЭтоОшибка = НЕ Показатели.Р06С060.Значение = Показатели.Р06С040.Итог;
	Настройки.Расшифровка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки,
		Показатели.Р06С060.Значение, Показатели.Р06С040.Итог);
		
	ДополнитьСтруктуруОшибок(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_20(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='1.20'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Раздел 1'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Раздела 1 (КС 1.20)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст. 173 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Сумма налога, подлежащая к уплате в бюджет в стр.040 Раздела 1 должна быть равна (стр.200 '") +
		НСтр("ru='Раздела 3 + стр.130 Раздела 4 + стр.160 Раздела 6) - (стр.210 Раздела 3 + стр.120 Раздела 4 + '") +
		НСтр("ru='стр.080 Раздела 5 + стр.090 Раздела 5 + стр.170 Раздела 6), когда полученная разница > 0, иначе 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = (%2 Итог[%3]) - (%4 Итог[%5]) Итог[%6]'"));
	Заголовки.Вставить("ОписаниеОшибки"		, 
		НСтр("ru='Ошибка исчисления суммы НДС, подлежащей уплате в бюджет'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючИтога"		, "Р01С040");
	Настройки.Вставить("КлючУдаления"	, "Р01С050");
	ПроверкаКС_1_21_код(Настройки);
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_21(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='1.21'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Раздел 1'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Раздела 1 (КС 1.21)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст. 173 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Сумма налога, исчисленная к возмещению из бюджета в стр.050 Раздела 1 должна быть равна (стр.210 '") +
		НСтр("ru='Раздела 3 + стр.120 Раздела 4 + стр.080 Раздела 5 + стр.090 Раздела 5 + стр.170 Раздела 6) - '") +
		НСтр("ru='(стр.200 Раздела 3 + стр.130 Раздела 4 + стр.160 Раздела 6), когда полученная разница > 0, иначе 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = (%4 Итог[%5]) - (%2 Итог[%3]) Итог[%6]'"));
	Заголовки.Вставить("ОписаниеОшибки"		, 
		НСтр("ru='Ошибка исчисления суммы НДС, подлежащей возмещению'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючИтога"		, "Р01С050");
	Настройки.Вставить("КлючУдаления"	, "Р01С040");
	ПроверкаКС_1_21_код(Настройки);
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_21_код(Настройки)
	
	Перем ПоказателиИтога;
	Перем ПоказателиКУплате;
	Перем ПоказателиКВычету;
	
	ШаблонРасшифровкиКУплате = НСтр("ru='%1 + %2 + %3'");
	ШаблонРасшифровкиКВычету = НСтр("ru='%1 + %2 + %3 + %4 +%5'");
	СуммаКУплате = 0;
	СуммаКВычету = 0;
	
	ИменаПоказателейИтога = Новый Структура;
	ИменаПоказателейИтога.Вставить("Р01С040"	, "П000100004003");
	ИменаПоказателейИтога.Вставить("Р01С050"	, "П000100005003");
	ИменаПоказателейИтога.Удалить(Настройки.КлючУдаления);
	
	ИменаПоказателейКУплате = Новый Структура;
	ИменаПоказателейКУплате.Вставить("Р03С200"	, "П000300020003");
	ИменаПоказателейКУплате.Вставить("Р04С130"	, "П000400013003");
	ИменаПоказателейКУплате.Вставить("Р06С160"	, "П000600016003");
	
	ИменаПоказателейКВычету = Новый Структура;
	ИменаПоказателейКВычету.Вставить("Р03С210"	, "П000300021003");
	ИменаПоказателейКВычету.Вставить("Р04С120"	, "П000400012003");
	ИменаПоказателейКВычету.Вставить("Р05С080"	, "П000500008003");
	ИменаПоказателейКВычету.Вставить("Р05С090"	, "П000500009003");
	ИменаПоказателейКВычету.Вставить("Р06С170"	, "П000600017003");
	
	СформироватьПоказатели(ПоказателиИтога	, ИменаПоказателейИтога);
	СформироватьПоказатели(ПоказателиКУплате, ИменаПоказателейКУплате);
	СформироватьПоказатели(ПоказателиКВычету, ИменаПоказателейКВычету);
	ЗарегистрироватьФормулу(Настройки);
	
	ЗаполнитьИРасшифроватьПоказатели(ПоказателиИтога	, мДанныеОтчета.ДанныеКС.ДанныеР01);
	ЗаполнитьИРасшифроватьПоказатели(ПоказателиКУплате	, мДанныеОтчета.ДанныеКС.ДанныеР03);
	ЗаполнитьИРасшифроватьПоказатели(ПоказателиКУплате	, мДанныеОтчета.ДанныеКС.ДанныеР04);
	ЗаполнитьИРасшифроватьПоказатели(ПоказателиКУплате	, мДанныеОтчета.ДанныеКС.ДанныеР06);
	ЗаполнитьИРасшифроватьПоказатели(ПоказателиКВычету	, мДанныеОтчета.ДанныеКС.ДанныеР03);
	ЗаполнитьИРасшифроватьПоказатели(ПоказателиКВычету	, мДанныеОтчета.ДанныеКС.ДанныеР04);
	ЗаполнитьИРасшифроватьПоказатели(ПоказателиКВычету	, мДанныеОтчета.ДанныеКС.ДанныеР05);
	ЗаполнитьИРасшифроватьПоказатели(ПоказателиКВычету	, мДанныеОтчета.ДанныеКС.ДанныеР06);
	
	Для каждого Показатель Из ПоказателиКУплате Цикл
		СуммаКУплате = СуммаКУплате + Показатель.Значение.Итог;
	КонецЦикла;
	
	Для каждого Показатель Из ПоказателиКВычету Цикл
		ИмяПоля = ?(Лев(Показатель.Ключ, 3) = "Р05", "Значение", "Итог");
		СуммаКВычету = СуммаКВычету + Показатель.Значение[ИмяПоля];
	КонецЦикла;
	
	РасчетнаяСумма = Макс(?(Настройки.КлючИтога = "Р01С040", СуммаКУплате - СуммаКВычету, СуммаКВычету - СуммаКУплате), 0);
	РасшифровкаКУплате = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонРасшифровкиКУплате,
		ПоказателиКУплате.Р03С200.Итог, ПоказателиКУплате.Р04С130.Итог, ПоказателиКУплате.Р06С160.Итог);
	РасшифровкаКВычету = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонРасшифровкиКВычету,
		ПоказателиКВычету.Р03С210.Итог, ПоказателиКВычету.Р04С120.Итог, ПоказателиКВычету.Р05С080.Значение, 
		ПоказателиКВычету.Р05С090.Значение, ПоказателиКВычету.Р06С170.Итог);
	Настройки.Расшифровка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки,
		ПоказателиИтога[Настройки.КлючИтога].Итог, РасшифровкаКУплате, СуммаКУплате, РасшифровкаКВычету, СуммаКВычету,
		РасчетнаяСумма);
	Настройки.ЭтоОшибка = НЕ ПоказателиИтога[Настройки.КлючИтога].Итог = РасчетнаяСумма;
	ДополнитьСтруктуруОшибок(Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_22(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='1.22'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Приложение 1 к Разделу 8'"));
	Заголовки.Вставить("Условие"			, НСтр("ru='Приложение 1 к Разделу 8 заполнено (корректирующий отчет)'"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Приложения 1 к Разделу 8 (КС 1.22)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст. 171, 172 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Сумма налога по книге покупок в стр.005 Приложения 1 к Разделу 8 должна быть равна '") +
		НСтр("ru='сумме налога в стр.190 Раздела 8'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, 
		НСтр("ru='Ошибка исчисления суммы НДС, подлежащей вычету'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ РазделЗаполнен(мДанныеОтчета.ДанныеКС.ДанныеР81) Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р81С005"	, Неопределено);
	ИменаПоказателей.Вставить("Р08С190"	, Неопределено);
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	ЗарегистрироватьФормулу(Настройки);
	
	ЗаполнитьИРасшифроватьПоказатели(Показатели, мДанныеОтчета.ДанныеКС.ДанныеР81);
	ЗаполнитьИРасшифроватьПоказатели(Показатели, мДанныеОтчета.ДанныеКС.ДанныеР08);
	
	Настройки.ЭтоОшибка = НЕ Показатели.Р81С005.Значение = Показатели.Р08С190.Значение;
	Настройки.Расшифровка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки,
		Показатели.Р81С005.Значение, Показатели.Р08С190.Значение);
		
	ДополнитьСтруктуруОшибок(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_23а(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='1.23а'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Приложение 1 к Разделу 9'"));
	Заголовки.Вставить("Условие"			, НСтр("ru='Приложение 1 к Разделу 9 заполнено (корректирующий отчет)'"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Приложения 1 к Разделу 9 (КС 1.23а)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст. 173 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Стоимость продаж по ставке 20% в стр.020 Приложения 1 к Разделу 9 должна быть равна '") +
		НСтр("ru='значению стр.230 Раздела 9'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, 
		НСтр("ru='Возможно ошибка исчисления суммы НДС, подлежащей уплате в бюджет'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ РазделЗаполнен(мДанныеОтчета.ДанныеКС.ДанныеР91) Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р91С020"	, Неопределено);
	ИменаПоказателей.Вставить("Р09С230"	, Неопределено);
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	ЗарегистрироватьФормулу(Настройки);
	
	ЗаполнитьИРасшифроватьПоказатели(Показатели, мДанныеОтчета.ДанныеКС.ДанныеР91);
	ЗаполнитьИРасшифроватьПоказатели(Показатели, мДанныеОтчета.ДанныеКС.ДанныеР09);
	
	Настройки.ЭтоОшибка = НЕ Показатели.Р91С020.Значение = Показатели.Р09С230.Значение;
	Настройки.Расшифровка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки,
		Показатели.Р91С020.Значение, Показатели.Р09С230.Значение);
		
	ДополнитьСтруктуруОшибок(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_23б(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='1.23б'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Приложение 1 к Разделу 9'"));
	Заголовки.Вставить("Условие"			, НСтр("ru='Приложение 1 к Разделу 9 заполнено (корректирующий отчет)'"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Приложения 1 к Разделу 9 (КС 1.23б)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст. 173 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Стоимость продаж по ставке 18% в стр.025 Приложения 1 к Разделу 9 должна быть равна '") +
		НСтр("ru='значению стр.235 Раздела 9'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, 
		НСтр("ru='Возможно ошибка исчисления суммы НДС, подлежащей уплате в бюджет'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ РазделЗаполнен(мДанныеОтчета.ДанныеКС.ДанныеР91) Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р91С025"	, Неопределено);
	ИменаПоказателей.Вставить("Р09С235"	, Неопределено);
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	ЗарегистрироватьФормулу(Настройки);
	
	ЗаполнитьИРасшифроватьПоказатели(Показатели, мДанныеОтчета.ДанныеКС.ДанныеР91);
	ЗаполнитьИРасшифроватьПоказатели(Показатели, мДанныеОтчета.ДанныеКС.ДанныеР09);
	
	Настройки.ЭтоОшибка = НЕ Показатели.Р91С025.Значение = Показатели.Р09С235.Значение;
	Настройки.Расшифровка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки,
		Показатели.Р91С025.Значение, Показатели.Р09С235.Значение);
		
	ДополнитьСтруктуруОшибок(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_23в(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='1.23в'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Приложение 1 к Разделу 9'"));
	Заголовки.Вставить("Условие"			, НСтр("ru='Приложение 1 к Разделу 9 заполнено (корректирующий отчет)'"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Приложения 1 к Разделу 9 (КС 1.23в)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст. 173 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Стоимость продаж по ставке 10% в стр.030 Приложения 1 к Разделу 9 должна быть равна '") +
		НСтр("ru='значению стр.240 Раздела 9'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, 
		НСтр("ru='Возможно ошибка исчисления суммы НДС, подлежащей уплате в бюджет'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ РазделЗаполнен(мДанныеОтчета.ДанныеКС.ДанныеР91) Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р91С030"	, Неопределено);
	ИменаПоказателей.Вставить("Р09С240"	, Неопределено);
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	ЗарегистрироватьФормулу(Настройки);
	
	ЗаполнитьИРасшифроватьПоказатели(Показатели, мДанныеОтчета.ДанныеКС.ДанныеР91);
	ЗаполнитьИРасшифроватьПоказатели(Показатели, мДанныеОтчета.ДанныеКС.ДанныеР09);
	
	Настройки.ЭтоОшибка = НЕ Показатели.Р91С030.Значение = Показатели.Р09С240.Значение;
	Настройки.Расшифровка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки,
		Показатели.Р91С030.Значение, Показатели.Р09С240.Значение);
		
	ДополнитьСтруктуруОшибок(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_23г(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='1.23г'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Приложение 1 к Разделу 9'"));
	Заголовки.Вставить("Условие"			, НСтр("ru='Приложение 1 к Разделу 9 заполнено (корректирующий отчет)'"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Приложения 1 к Разделу 9 (КС 1.23г)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст. 173 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Стоимость продаж по ставке 0% в стр.040 Приложения 1 к Разделу 9 должна быть равна '") +
		НСтр("ru='значению стр.250 Раздела 9'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, 
		НСтр("ru='Возможно ошибка исчисления суммы НДС, подлежащей уплате в бюджет'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ РазделЗаполнен(мДанныеОтчета.ДанныеКС.ДанныеР91) Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р91С040"	, Неопределено);
	ИменаПоказателей.Вставить("Р09С250"	, Неопределено);
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	ЗарегистрироватьФормулу(Настройки);
	
	ЗаполнитьИРасшифроватьПоказатели(Показатели, мДанныеОтчета.ДанныеКС.ДанныеР91);
	ЗаполнитьИРасшифроватьПоказатели(Показатели, мДанныеОтчета.ДанныеКС.ДанныеР09);
	
	Настройки.ЭтоОшибка = НЕ Показатели.Р91С040.Значение = Показатели.Р09С250.Значение;
	Настройки.Расшифровка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки,
		Показатели.Р91С040.Значение, Показатели.Р09С250.Значение);
		
	ДополнитьСтруктуруОшибок(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_23д(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='1.23д'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Приложение 1 к Разделу 9'"));
	Заголовки.Вставить("Условие"			, НСтр("ru='Приложение 1 к Разделу 9 заполнено (корректирующий отчет)'"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Приложения 1 к Разделу 9 (КС 1.23д)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст. 173 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Сумма налога по ставке 20% в стр.050 Приложения 1 к Разделу 9 должна быть равна '") +
		НСтр("ru='значению стр.260 Раздела 9'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, 
		НСтр("ru='Ошибка исчисления суммы НДС, подлежащей уплате в бюджет'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ РазделЗаполнен(мДанныеОтчета.ДанныеКС.ДанныеР91) Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р91С050"	, Неопределено);
	ИменаПоказателей.Вставить("Р09С260"	, Неопределено);
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	ЗарегистрироватьФормулу(Настройки);
	
	ЗаполнитьИРасшифроватьПоказатели(Показатели, мДанныеОтчета.ДанныеКС.ДанныеР91);
	ЗаполнитьИРасшифроватьПоказатели(Показатели, мДанныеОтчета.ДанныеКС.ДанныеР09);
	
	Настройки.ЭтоОшибка = НЕ Показатели.Р91С050.Значение = Показатели.Р09С260.Значение;
	Настройки.Расшифровка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки,
		Показатели.Р91С050.Значение, Показатели.Р09С260.Значение);
		
	ДополнитьСтруктуруОшибок(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_23е(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='1.23е'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Приложение 1 к Разделу 9'"));
	Заголовки.Вставить("Условие"			, НСтр("ru='Приложение 1 к Разделу 9 заполнено (корректирующий отчет)'"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Приложения 1 к Разделу 9 (КС 1.23е)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст. 173 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Сумма налога по ставке 18% в стр.055 Приложения 1 к Разделу 9 должна быть равна '") +
		НСтр("ru='значению стр.265 Раздела 9'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, 
		НСтр("ru='Ошибка исчисления суммы НДС, подлежащей уплате в бюджет'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ РазделЗаполнен(мДанныеОтчета.ДанныеКС.ДанныеР91) Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р91С055"	, Неопределено);
	ИменаПоказателей.Вставить("Р09С265"	, Неопределено);
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	ЗарегистрироватьФормулу(Настройки);
	
	ЗаполнитьИРасшифроватьПоказатели(Показатели, мДанныеОтчета.ДанныеКС.ДанныеР91);
	ЗаполнитьИРасшифроватьПоказатели(Показатели, мДанныеОтчета.ДанныеКС.ДанныеР09);
	
	Настройки.ЭтоОшибка = НЕ Показатели.Р91С055.Значение = Показатели.Р09С265.Значение;
	Настройки.Расшифровка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки,
		Показатели.Р91С055.Значение, Показатели.Р09С265.Значение);
		
	ДополнитьСтруктуруОшибок(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_23ж(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='1.23ж'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Приложение 1 к Разделу 9'"));
	Заголовки.Вставить("Условие"			, НСтр("ru='Приложение 1 к Разделу 9 заполнено (корректирующий отчет)'"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Приложения 1 к Разделу 9 (КС 1.23ж)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст. 173 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Сумма налога по ставке 10% в стр.060 Приложения 1 к Разделу 9 должна быть равна '") +
		НСтр("ru='значению стр.270 Раздела 9'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, 
		НСтр("ru='Ошибка исчисления суммы НДС, подлежащей уплате в бюджет'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ РазделЗаполнен(мДанныеОтчета.ДанныеКС.ДанныеР91) Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р91С060"	, Неопределено);
	ИменаПоказателей.Вставить("Р09С270"	, Неопределено);
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	ЗарегистрироватьФормулу(Настройки);
	
	ЗаполнитьИРасшифроватьПоказатели(Показатели, мДанныеОтчета.ДанныеКС.ДанныеР91);
	ЗаполнитьИРасшифроватьПоказатели(Показатели, мДанныеОтчета.ДанныеКС.ДанныеР09);
	
	Настройки.ЭтоОшибка = НЕ Показатели.Р91С060.Значение = Показатели.Р09С270.Значение;
	Настройки.Расшифровка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки,
		Показатели.Р91С060.Значение, Показатели.Р09С270.Значение);
		
	ДополнитьСтруктуруОшибок(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_23з(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='1.23з'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Приложение 1 к Разделу 9'"));
	Заголовки.Вставить("Условие"			, НСтр("ru='Приложение 1 к Разделу 9 заполнено (корректирующий отчет)'"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Приложения 1 к Разделу 9 (КС 1.23з)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст. 173 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Стоимость продаж, освобождаемых от налога в стр.070 Приложения 1 к Разделу 9 должна быть равна '") +
		НСтр("ru='значению стр.280 Раздела 9'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, 
		НСтр("ru='Возможно ошибка исчисления суммы НДС, подлежащей уплате в бюджет'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ РазделЗаполнен(мДанныеОтчета.ДанныеКС.ДанныеР91) Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р91С070"	, Неопределено);
	ИменаПоказателей.Вставить("Р09С280"	, Неопределено);
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	ЗарегистрироватьФормулу(Настройки);
	
	ЗаполнитьИРасшифроватьПоказатели(Показатели, мДанныеОтчета.ДанныеКС.ДанныеР91);
	ЗаполнитьИРасшифроватьПоказатели(Показатели, мДанныеОтчета.ДанныеКС.ДанныеР09);
	
	Настройки.ЭтоОшибка = НЕ Показатели.Р91С070.Значение = Показатели.Р09С280.Значение;
	Настройки.Расшифровка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки,
		Показатели.Р91С070.Значение, Показатели.Р09С280.Значение);
		
	ДополнитьСтруктуруОшибок(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_24(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='1.24'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Раздел 1'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, 
		НСтр("ru='Возможно влияние погрешности в результате округления показателей'"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Раздела 1 (КС 1.24)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='п.5 ст.173 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Сумма налога по стр.030 Раздела 1, подлежащая уплате в бюджет в соответствии с п.5 ст.173 НК РФ, '") +
		НСтр("ru='должна быть равна сумме стр.070 Раздела 12, с учетом погрешности округления (при наличии)'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 ± 0,49 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, 
		НСтр("ru='Ошибка исчисления суммы НДС, подлежащей уплате в бюджет'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р01С030"	, "П000100003003");
	ИменаПоказателей.Вставить("Р12С070"	, Неопределено);
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	ЗарегистрироватьФормулу(Настройки);
	
	ЗаполнитьИРасшифроватьПоказатели(Показатели, мДанныеОтчета.ДанныеКС.ДанныеР01);
	ЗаполнитьИРасшифроватьПоказатели(Показатели, мДанныеОтчета.ДанныеКС.ДанныеР12);
	
	Настройки.ЭтоОшибка = НЕ Показатели.Р01С030.Значение = 
		РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, Показатели.Р12С070.Значение);
	Настройки.Расшифровка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки,
		Показатели.Р01С030.Значение, Показатели.Р12С070.Значение);
		
	ДополнитьСтруктуруОшибок(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_25(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='1.25'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Раздел 1'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, 
		НСтр("ru='Возможно влияние погрешности в результате округления показателей'"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Раздела 1 (КС 1.25)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст. 173 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Если сумма налога в стр.050 Раздела 1 > 0, требуется соблюдение условия: стр.190 Раздела 8 + '") +
		НСтр("ru='(стр.190 - стр.005 Приложения 1 к Разделу 8) - (стр.260 + стр.265 + стр.270 Раздела 9) - '") +
		НСтр("ru='(стр.200 + стр.205 + стр.210 Раздела 9 в которых стр.010 = 06) + (стр.340 + стр.345 + стр.350 - '") +
		НСтр("ru='стр.050 - стр.055 - стр.060 Приложения 1 к Разделу 9) - (стр.280 + стр.285 + стр.290 Приложения '") +
		НСтр("ru='1 к Разделу 9 в которых стр.090 = 06) > 0, с учетом погрешности округления (при наличии)'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 + (%2 - %3) - %4 + %5 Итог [%6] > 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, 
		НСтр("ru='Ошибка исчисления суммы НДС, подлежащей возмещению'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ШаблонРасшифровкиР09	= НСтр("ru='(%1 + %2 + %3) - (%4 + %5 + %6)'");
	ШаблонРасшифровкиР91	= НСтр("ru='(%1 + %2 + %3 - %4 - %5 - %6) - (%7 + %8 + %9)'");
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р01С050"	, "П000100005003");
	ИменаПоказателей.Вставить("Р08С190");
	ИменаПоказателей.Вставить("Р81С190");
	ИменаПоказателей.Вставить("Р81С005");
	ИменаПоказателей.Вставить("Р09С260");
	ИменаПоказателей.Вставить("Р09С265");
	ИменаПоказателей.Вставить("Р09С270");
	ИменаПоказателей.Вставить("Р09С200К06");
	ИменаПоказателей.Вставить("Р09С205К06");
	ИменаПоказателей.Вставить("Р09С210К06");
	ИменаПоказателей.Вставить("Р91С340");
	ИменаПоказателей.Вставить("Р91С345");
	ИменаПоказателей.Вставить("Р91С350");
	ИменаПоказателей.Вставить("Р91С050");
	ИменаПоказателей.Вставить("Р91С055");
	ИменаПоказателей.Вставить("Р91С060");
	ИменаПоказателей.Вставить("Р91С280К06");
	ИменаПоказателей.Вставить("Р91С285К06");
	ИменаПоказателей.Вставить("Р91С290К06");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	ЗарегистрироватьФормулу(Настройки);
	
	ЗаполнитьИРасшифроватьПоказатели(Показатели	, мДанныеОтчета.ДанныеКС.ДанныеР01);
	ЗаполнитьИРасшифроватьПоказатели(Показатели	, мДанныеОтчета.ДанныеКС.ДанныеР08);
	ЗаполнитьИРасшифроватьПоказатели(Показатели	, мДанныеОтчета.ДанныеКС.ДанныеР81);
	ЗаполнитьИРасшифроватьПоказатели(Показатели	, мДанныеОтчета.ДанныеКС.ДанныеР09);
	ЗаполнитьИРасшифроватьПоказатели(Показатели	, мДанныеОтчета.ДанныеКС.ДанныеР91);
	
	РасчетнаяСумма = Показатели.Р08С190.Итог + Показатели.Р81С190.Итог - Показатели.Р81С005.Итог -(Показатели.Р09С260.Итог
		+ Показатели.Р09С265.Итог + Показатели.Р09С270.Итог) - (Показатели.Р09С200К06.Итог + Показатели.Р09С205К06.Итог 
		+ Показатели.Р09С200К06.Итог) + Показатели.Р91С340.Итог + Показатели.Р91С345.Итог + Показатели.Р91С350.Итог 
		- Показатели.Р91С050.Итог - Показатели.Р91С055.Итог - Показатели.Р91С060.Итог - (Показатели.Р91С280К06.Итог 
		+ Показатели.Р91С285К06.Итог + Показатели.Р91С290К06.Итог);
		
	Настройки.ЭтоОшибка = Показатели.Р01С050.Итог > 0 И 
		НЕ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, РасчетнаяСумма) > 0;
	РасшифровкаР09 = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонРасшифровкиР09,
		Показатели.Р09С260.Итог, Показатели.Р09С265.Итог, Показатели.Р09С270.Итог, 
		Показатели.Р09С200К06.Итог, Показатели.Р09С205К06.Итог, Показатели.Р09С210К06.Итог);
	РасшифровкаР91 = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонРасшифровкиР91,
		Показатели.Р91С340.Итог, Показатели.Р91С345.Итог, Показатели.Р91С350.Итог, Показатели.Р91С050.Итог,
		Показатели.Р91С055.Итог, Показатели.Р91С060.Итог, Показатели.Р91С280К06.Итог, Показатели.Р91С285К06.Итог,
		Показатели.Р91С290К06.Итог);
	Настройки.Расшифровка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки,
		Показатели.Р08С190.Итог, Показатели.Р81С190.Итог, Показатели.Р81С005.Итог, РасшифровкаР09, РасшифровкаР91,
		РасчетнаяСумма);
		
	ДополнитьСтруктуруОшибок(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_26а(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='1.26а'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Раздел 2'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, 
		НСтр("ru='Возможно влияние погрешности в результате округления показателей'"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Раздела 2 (КС 1.26а)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст. 161, п.4, 4.1 ст. 173 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='При условии отсутствия в стр.070 Раздела 2 кода 1011715, требуется соблюдение равенства: '") +
		НСтр("ru='стр.060 Раздела 2 = (стр.200 + стр.205 + стр.210 Раздела 9 в которых стр.010 = 06) + '") +
		НСтр("ru='(стр.280 + стр.285 + стр.290 Приложения 1 к Разделу 9 в которых стр.090 = 06), с учетом '") +
		НСтр("ru='погрешности округления (при наличии)'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = (%2 + %3 + %4) + (%5 + %6 + %7) Итог [%8]'"));
	Заголовки.Вставить("ОписаниеОшибки"		, 
		НСтр("ru='Ошибка исчисления суммы НДС, подлежащей уплате в бюджет'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р02С060"	, "П000200006003");
	ИменаПоказателей.Вставить("Р02С070"	, "П000200007003");
	ИменаПоказателей.Вставить("Р09С200К06");
	ИменаПоказателей.Вставить("Р09С205К06");
	ИменаПоказателей.Вставить("Р09С210К06");
	ИменаПоказателей.Вставить("Р91С280К06");
	ИменаПоказателей.Вставить("Р91С285К06");
	ИменаПоказателей.Вставить("Р91С290К06");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	Показатели.Р02С070.Расшифровывать = Ложь;
	Код1011715Отсутствует = Истина;
	ЗарегистрироватьФормулу(Настройки);
	
	Для каждого Лист02 Из мДанныеОтчета.ДанныеКС.ДанныеР02 Цикл
		ЗаполнитьИРасшифроватьПоказатель(Показатели.Р02С070, Лист02);
		Код1011715Отсутствует = Код1011715Отсутствует 
			И (НЕ ЗначениеЗаполнено(Показатели.Р02С070.Значение) ИЛИ СтрНайти("1011715", Показатели.Р02С070.Значение) = 0);
	КонецЦикла;
	
	ЗаполнитьИРасшифроватьПоказатели(Показатели	, мДанныеОтчета.ДанныеКС.ДанныеР02);
	ЗаполнитьИРасшифроватьПоказатели(Показатели	, мДанныеОтчета.ДанныеКС.ДанныеР09);
	ЗаполнитьИРасшифроватьПоказатели(Показатели	, мДанныеОтчета.ДанныеКС.ДанныеР91);
	
	РасчетнаяСумма = Показатели.Р09С200К06.Итог + Показатели.Р09С205К06.Итог + Показатели.Р09С210К06.Итог 
		+ Показатели.Р91С280К06.Итог + Показатели.Р91С285К06.Итог + Показатели.Р91С290К06.Итог;
	Настройки.ЭтоОшибка = Код1011715Отсутствует И НЕ Показатели.Р02С060.Итог = 
		РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, РасчетнаяСумма);
	Настройки.Расшифровка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки,
		Показатели.Р02С060.Итог, Показатели.Р09С200К06.Итог, Показатели.Р09С205К06.Итог, Показатели.Р09С210К06.Итог,
		Показатели.Р91С280К06.Итог, Показатели.Р91С285К06.Итог, Показатели.Р91С290К06.Итог, РасчетнаяСумма);
		
	ДополнитьСтруктуруОшибок(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_26б(СтруктураРезультата)
	
	Перем ПоказателиР02;
	Перем ПоказателиР89;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='1.26б'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Раздел 2'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, 
		НСтр("ru='Возможно влияние погрешности в результате округления показателей'"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Раздела 2 (КС 1.26б)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст. 161, п.4, 4.1 ст. 173 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='При условии наличия в стр.070 Раздела 2 кода 1011715, требуется соблюдение равенства: '") +
		НСтр("ru='стр.060 Раздела 2 = (стр.200 + стр.205 + стр.210 Раздела 9 в которых стр.010 = 41, 43, 44) + '") +
		НСтр("ru='(стр.280 + стр.285 + стр.290 Приложения 1 к Разделу 9 в которых стр.090 = 41, 43, 44) - '") +
		НСтр("ru='(стр.180 Раздела 8 в которых стр.010 = 41, 43, 44) + (стр.180 Приложения 1 к Разделу 8 в '") +
		НСтр("ru='которых стр.010 = 41, 43, 44), с учетом погрешности округления (при наличии)'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = %2 - %3 + %4 Итог [%5]'"));
	Заголовки.Вставить("ОписаниеОшибки"		, 
		НСтр("ru='Ошибка исчисления суммы НДС, подлежащей уплате в бюджет'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ШаблонРасшифровкиР9 = НСтр("ru='(%1 + %2 + %3) + (%4 + %5 + %6)'");
	
	ИменаПоказателейР02 = Новый Структура;
	ИменаПоказателейР02.Вставить("Р02С060"	, "П000200006003");
	ИменаПоказателейР02.Вставить("Р02С070"	, "П000200007003");
	
	ИменаПоказателейР89 = Новый Структура;
	ИменаПоказателейР89.Вставить("Р09С200К41");
	ИменаПоказателейР89.Вставить("Р09С200К43");
	ИменаПоказателейР89.Вставить("Р09С200К44");
	ИменаПоказателейР89.Вставить("Р09С205К41");
	ИменаПоказателейР89.Вставить("Р09С205К43");
	ИменаПоказателейР89.Вставить("Р09С205К44");
	ИменаПоказателейР89.Вставить("Р09С210К41");
	ИменаПоказателейР89.Вставить("Р09С210К43");
	ИменаПоказателейР89.Вставить("Р09С210К44");
	ИменаПоказателейР89.Вставить("Р91С280К41");
	ИменаПоказателейР89.Вставить("Р91С280К43");
	ИменаПоказателейР89.Вставить("Р91С280К44");
	ИменаПоказателейР89.Вставить("Р91С285К41");
	ИменаПоказателейР89.Вставить("Р91С285К43");
	ИменаПоказателейР89.Вставить("Р91С285К44");
	ИменаПоказателейР89.Вставить("Р91С290К41");
	ИменаПоказателейР89.Вставить("Р91С290К43");
	ИменаПоказателейР89.Вставить("Р91С290К44");
	ИменаПоказателейР89.Вставить("Р08С180К41");
	ИменаПоказателейР89.Вставить("Р08С180К43");
	ИменаПоказателейР89.Вставить("Р08С180К44");
	ИменаПоказателейР89.Вставить("Р81С180К41");
	ИменаПоказателейР89.Вставить("Р81С180К43");
	ИменаПоказателейР89.Вставить("Р81С180К44");
	
	СформироватьПоказатели(ПоказателиР02, ИменаПоказателейР02);
	СформироватьПоказатели(ПоказателиР89, ИменаПоказателейР89);
	ПоказателиР02.Р02С070.Расшифровывать = Ложь;
	ЗарегистрироватьФормулу(Настройки);
	
	Код1011715Присутствует = Ложь;	
	Для каждого Лист02 Из мДанныеОтчета.ДанныеКС.ДанныеР02 Цикл
		ЗаполнитьИРасшифроватьПоказатель(ПоказателиР02.Р02С070, Лист02);
		Код1011715НаЛисте = ЗначениеЗаполнено(ПоказателиР02.Р02С070.Значение) 
			И НЕ СтрНайти("1011715", ПоказателиР02.Р02С070.Значение) = 0;
		Если Код1011715НаЛисте Тогда
			ЗаполнитьИРасшифроватьПоказатель(ПоказателиР02.Р02С060, Лист02);
		КонецЕсли;
		Код1011715Присутствует = Код1011715Присутствует ИЛИ Код1011715НаЛисте;
	КонецЦикла;
	
	ЗаполнитьИРасшифроватьПоказатели(ПоказателиР89	, мДанныеОтчета.ДанныеКС.ДанныеР09);
	ЗаполнитьИРасшифроватьПоказатели(ПоказателиР89	, мДанныеОтчета.ДанныеКС.ДанныеР91);
	ЗаполнитьИРасшифроватьПоказатели(ПоказателиР89	, мДанныеОтчета.ДанныеКС.ДанныеР08);
	ЗаполнитьИРасшифроватьПоказатели(ПоказателиР89	, мДанныеОтчета.ДанныеКС.ДанныеР81);
	
	РасчетнаяСумма = СуммаПоказателей(ПоказателиР89) 
		- (ПоказателиР89.Р08С180К41.Значение + ПоказателиР89.Р08С180К43.Значение + ПоказателиР89.Р08С180К44.Значение) * 2;
	Настройки.ЭтоОшибка = Код1011715Присутствует И НЕ ПоказателиР02.Р02С060.Итог = 
		РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, РасчетнаяСумма);
	РасшифровкаР9 = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонРасшифровкиР9,
		СуммаПоказателей(ПоказателиР89, "Р09С200"), СуммаПоказателей(ПоказателиР89, "Р09С205"), 
		СуммаПоказателей(ПоказателиР89, "Р09С210"), СуммаПоказателей(ПоказателиР89, "Р91С280"),
		СуммаПоказателей(ПоказателиР89, "Р91С285"), СуммаПоказателей(ПоказателиР89, "Р91С290"));
	Настройки.Расшифровка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки,
		ПоказателиР02.Р02С060.Итог, РасшифровкаР9, СуммаПоказателей(ПоказателиР89, "Р08С180"), 
		СуммаПоказателей(ПоказателиР89, "Р81С180"), РасчетнаяСумма);
		
	ДополнитьСтруктуруОшибок(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_27(СтруктураРезультата)
	
	Перем ПоказателиРазделов;
	Перем ПоказателиКнигПрод;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='1.27'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Раздел 3'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, 
		НСтр("ru='Возможно влияние погрешности в результате округления показателей'"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка НДС к уплате (КС 1.27)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст. 153, 161, 164, 165, 166, 167, 173 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Сумма показателей стр.118 гр.5 Раздела 3, стр.060 Раздела 2, стр.050, 080 Раздела 4, '") +
		НСтр("ru='стр.050, 130 Раздела 6 должна быть равна сумме показателей стр.260, 265, 270 Раздела 9, '") +
		НСтр("ru='стр.340, 345, 350 Приложения 1 к Разделу 9 за минусом значений в стр.050, 055, 060 '") +
		НСтр("ru='Приложения 1 к Разделу 9, с учетом погрешности округления (при наличии)'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 Итог [%2...%3] = %4 Итог [%5]'"));
	Заголовки.Вставить("ОписаниеОшибки"		, 
		НСтр("ru='Ошибка исчисления суммы НДС, подлежащей вычету'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ШаблонРасшифровкиРазделов	= НСтр("ru='%1 + %2 + %3 + %4 + %5 + %6 ± 0,49 х 6'");
	ШаблонРасшифровкиКнигПрод	= НСтр("ru='%1 + %2 + %3 + %4 + %5 + %6 - %7 - %8 - %9'");
	
	ИменаПоказателейРазделов = Новый Структура;
	ИменаПоказателейРазделов.Вставить("Р03С118Г5"	, "П000300011805");
	ИменаПоказателейРазделов.Вставить("Р02С060"	, "П000200006003");
	ИменаПоказателейРазделов.Вставить("Р04С050"	, "П0004М1005003_");
	ИменаПоказателейРазделов.Вставить("Р04С080"	, "П0004М2008003_");
	ИменаПоказателейРазделов.Вставить("Р06С050"	, "П000600005003");
	ИменаПоказателейРазделов.Вставить("Р06С130"	, "П0006М3013003_");
	
	ИменаПоказателейКнигПрод = Новый Структура;
	ИменаПоказателейКнигПрод.Вставить("Р09С260");
	ИменаПоказателейКнигПрод.Вставить("Р09С265");
	ИменаПоказателейКнигПрод.Вставить("Р09С270");
	ИменаПоказателейКнигПрод.Вставить("Р91С340");
	ИменаПоказателейКнигПрод.Вставить("Р91С345");
	ИменаПоказателейКнигПрод.Вставить("Р91С350");
	ИменаПоказателейКнигПрод.Вставить("Р91С050");
	ИменаПоказателейКнигПрод.Вставить("Р91С055");
	ИменаПоказателейКнигПрод.Вставить("Р91С060");
	
	СформироватьПоказатели(ПоказателиРазделов, ИменаПоказателейРазделов);
	СформироватьПоказатели(ПоказателиКнигПрод, ИменаПоказателейКнигПрод);
	ЗарегистрироватьФормулу(Настройки);
	
	ЗаполнитьИРасшифроватьПоказатели(ПоказателиРазделов	, мДанныеОтчета.ДанныеКС.ДанныеР03);
	ЗаполнитьИРасшифроватьПоказатели(ПоказателиРазделов	, мДанныеОтчета.ДанныеКС.ДанныеР02);
	ЗаполнитьИРасшифроватьПоказатели(ПоказателиРазделов	, мДанныеОтчета.ДанныеКС.ДанныеР04);
	ЗаполнитьИРасшифроватьПоказатели(ПоказателиРазделов	, мДанныеОтчета.ДанныеКС.ДанныеР06);
	ЗаполнитьИРасшифроватьПоказатели(ПоказателиКнигПрод	, мДанныеОтчета.ДанныеКС.ДанныеР09);
	ЗаполнитьИРасшифроватьПоказатели(ПоказателиКнигПрод	, мДанныеОтчета.ДанныеКС.ДанныеР91);
	
	РасчетнаяСуммаРазделов = ПоказателиРазделов.Р03С118Г5.Итог + ПоказателиРазделов.Р02С060.Итог + 
		ПоказателиРазделов.Р04С050.Итог + ПоказателиРазделов.Р04С080.Итог + ПоказателиРазделов.Р06С050.Итог + 
		ПоказателиРазделов.Р06С130.Итог;
	РасчетнаяСуммаРаздОкр1 = РасчетнаяСуммаРазделов - 0.49 * 6;
	РасчетнаяСуммаРаздОкр2 = РасчетнаяСуммаРазделов + 0.49 * 6;
	РасчетнаяСуммаКнигПрод = ПоказателиКнигПрод.Р09С260.Итог + ПоказателиКнигПрод.Р09С265.Итог + 
		ПоказателиКнигПрод.Р09С270.Итог + ПоказателиКнигПрод.Р91С340.Итог + ПоказателиКнигПрод.Р91С345.Итог + 
		ПоказателиКнигПрод.Р91С350.Итог - ПоказателиКнигПрод.Р91С050.Итог - ПоказателиКнигПрод.Р91С055.Итог - 
		ПоказателиКнигПрод.Р91С060.Итог;
		
	РасшифровкаРазделов = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонРасшифровкиРазделов,
		ПоказателиРазделов.Р03С118Г5.Итог, ПоказателиРазделов.Р02С060.Итог, ПоказателиРазделов.Р04С050.Итог, 
		ПоказателиРазделов.Р04С080.Итог, ПоказателиРазделов.Р06С050.Итог, ПоказателиРазделов.Р06С130.Итог);
	РасшифровкаКнигПрод = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонРасшифровкиКнигПрод,
		ПоказателиКнигПрод.Р09С260.Итог, ПоказателиКнигПрод.Р09С265.Итог, ПоказателиКнигПрод.Р09С270.Итог, 
		ПоказателиКнигПрод.Р91С340.Итог, ПоказателиКнигПрод.Р91С345.Итог, ПоказателиКнигПрод.Р91С350.Итог, 
		ПоказателиКнигПрод.Р91С050.Итог, ПоказателиКнигПрод.Р91С055.Итог, ПоказателиКнигПрод.Р91С060.Итог);
	Настройки.Расшифровка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки,
		РасшифровкаРазделов, РасчетнаяСуммаРаздОкр1, РасчетнаяСуммаРаздОкр2, РасшифровкаКнигПрод, 
		РасчетнаяСуммаКнигПрод);
	Настройки.ЭтоОшибка = НЕ (РасчетнаяСуммаРаздОкр1 <= РасчетнаяСуммаКнигПрод 
	И РасчетнаяСуммаКнигПрод <= РасчетнаяСуммаРаздОкр2);
		
	ДополнитьСтруктуруОшибок(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_28(СтруктураРезультата)
	
	Перем ПоказателиРазделов;
	Перем ПоказателиКнигПрод;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='1.28'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Раздел 3'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, 
		НСтр("ru='Возможно влияние погрешности в результате округления показателей'"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка НДС к вычету (КС 1.28)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст. 171, 172 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Сумма показателей стр.190 Раздела 3, стр.030, 040 Раздела 4, стр.080, 090 Раздела 5, стр.060, '") +
		НСтр("ru='090, 150 Раздела 6 должна быть равна сумме стр.190 Раздела 8 и разницы стр.190 Приложения 1 к '") +
		НСтр("ru='Разделу 8 и стр.005 Приложения 1 к Разделу 8, с учетом погрешности округления (при наличии)'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 Итог [%2...%3] = %4 Итог [%5]'"));
	Заголовки.Вставить("ОписаниеОшибки"		, 
		НСтр("ru='Ошибка исчисления суммы НДС, подлежащей вычету'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ШаблонРасшифровкиРазделов	= НСтр("ru='%1 + %2 + %3 + %4 + %5 + %6 +%7 + %8 ± 0,49 х 8'");
	ШаблонРасшифровкиКнигПрод		= НСтр("ru='%1 + %2 - %3'");
	
	ИменаПоказателейРазделов = Новый Структура;
	ИменаПоказателейРазделов.Вставить("Р03С190"	, "П000300019003");
	ИменаПоказателейРазделов.Вставить("Р04С030"	, "П0004М1003003_");
	ИменаПоказателейРазделов.Вставить("Р04С040"	, "П0004М1004003_");
	ИменаПоказателейРазделов.Вставить("Р05С080"	, "П000500008003");
	ИменаПоказателейРазделов.Вставить("Р05С090"	, "П000500009003");
	ИменаПоказателейРазделов.Вставить("Р06С060"	, "П000600006003");
	ИменаПоказателейРазделов.Вставить("Р06С090"	, "П0006М2009003_");
	ИменаПоказателейРазделов.Вставить("Р06С150"	, "П0006М3015003_");
	
	ИменаПоказателейКнигПрод = Новый Структура;
	ИменаПоказателейКнигПрод.Вставить("Р08С190");
	ИменаПоказателейКнигПрод.Вставить("Р81С190");
	ИменаПоказателейКнигПрод.Вставить("Р81С005");
	
	СформироватьПоказатели(ПоказателиРазделов, ИменаПоказателейРазделов);
	СформироватьПоказатели(ПоказателиКнигПрод, ИменаПоказателейКнигПрод);
	ЗарегистрироватьФормулу(Настройки);
	
	ЗаполнитьИРасшифроватьПоказатели(ПоказателиРазделов	, мДанныеОтчета.ДанныеКС.ДанныеР03);
	ЗаполнитьИРасшифроватьПоказатели(ПоказателиРазделов	, мДанныеОтчета.ДанныеКС.ДанныеР04);
	ЗаполнитьИРасшифроватьПоказатели(ПоказателиРазделов	, мДанныеОтчета.ДанныеКС.ДанныеР05);
	ЗаполнитьИРасшифроватьПоказатели(ПоказателиРазделов	, мДанныеОтчета.ДанныеКС.ДанныеР06);
	ЗаполнитьИРасшифроватьПоказатели(ПоказателиКнигПрод	, мДанныеОтчета.ДанныеКС.ДанныеР08);
	ЗаполнитьИРасшифроватьПоказатели(ПоказателиКнигПрод	, мДанныеОтчета.ДанныеКС.ДанныеР81);
	
	РасчетнаяСуммаРазделов = ПоказателиРазделов.Р03С190.Итог + ПоказателиРазделов.Р04С030.Итог + 
		ПоказателиРазделов.Р04С040.Итог + ПоказателиРазделов.Р05С080.Значение + ПоказателиРазделов.Р05С090.Значение + 
		ПоказателиРазделов.Р06С060.Итог + ПоказателиРазделов.Р06С090.Итог + ПоказателиРазделов.Р06С150.Итог;
	РасчетнаяСуммаРаздОкр1 = РасчетнаяСуммаРазделов - 0.49 * 8;
	РасчетнаяСуммаРаздОкр2 = РасчетнаяСуммаРазделов + 0.49 * 8;
	РасчетнаяСуммаКнигПрод = ПоказателиКнигПрод.Р08С190.Итог + ПоказателиКнигПрод.Р81С190.Итог - 
		ПоказателиКнигПрод.Р81С005.Итог;
		
	РасшифровкаРазделов = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонРасшифровкиРазделов,
		ПоказателиРазделов.Р03С190.Итог, ПоказателиРазделов.Р04С030.Итог, ПоказателиРазделов.Р04С040.Итог, 
		ПоказателиРазделов.Р05С080.Значение, ПоказателиРазделов.Р05С090.Значение, ПоказателиРазделов.Р06С060.Итог,
		ПоказателиРазделов.Р06С090.Итог, ПоказателиРазделов.Р06С150.Итог);
	РасшифровкаКнигПрод = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонРасшифровкиКнигПрод,
		ПоказателиКнигПрод.Р08С190.Итог, ПоказателиКнигПрод.Р81С190.Итог, ПоказателиКнигПрод.Р81С005.Итог);
	Настройки.Расшифровка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки,
		РасшифровкаРазделов, РасчетнаяСуммаРаздОкр1, РасчетнаяСуммаРаздОкр2, РасшифровкаКнигПрод, 
		РасчетнаяСуммаКнигПрод);
	Настройки.ЭтоОшибка = НЕ (РасчетнаяСуммаРаздОкр1 <= РасчетнаяСуммаКнигПрод 
	И РасчетнаяСуммаКнигПрод <= РасчетнаяСуммаРаздОкр2);
		
	ДополнитьСтруктуруОшибок(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_29(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='1.29'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Раздел 3'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, 
		НСтр("ru='Возможно влияние погрешности в результате округления показателей'"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Раздела 3 (КС 1.29)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст. 171, 172 НК РФ'"));
	// Стр.150 Раздела 3 может быть меньше данных из книги покупок в случаях, когда импортные товары используются как
	// для деятельности, облагаемой НДС, так и для деятельности, необлагаемой НДС (облагаемой по ставке 0%)
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Сумма налога, уплаченная налогоплательщиком таможенным органам при ввозе товаров на территорию РФ '") +
		НСтр("ru='в стр.150 Раздела 3, должна быть мешьше или равна сумме стр.180 Раздела 8, в которых стр.010 '") +
		НСтр("ru='Раздела 8 = 20 и сумме стр.180 Приложения 1 к Разделу 8, в которых стр.010 = 20, с учетом '") +
		НСтр("ru='погрешности округления (при наличии)'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 ± 0,49 <= %2 + %3 Итог [%4]'"));
	Заголовки.Вставить("ОписаниеОшибки"		, 
		НСтр("ru='Ошибка исчисления суммы НДС, подлежащей вычету'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р03С150"		, "П000300015003");
	ИменаПоказателей.Вставить("Р08С180К20"	, Неопределено);
	ИменаПоказателей.Вставить("Р81С180К20"	, Неопределено);
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	ЗарегистрироватьФормулу(Настройки);
	
	ЗаполнитьИРасшифроватьПоказатели(Показатели, мДанныеОтчета.ДанныеКС.ДанныеР03);
	ЗаполнитьИРасшифроватьПоказатели(Показатели, мДанныеОтчета.ДанныеКС.ДанныеР08);
	ЗаполнитьИРасшифроватьПоказатели(Показатели, мДанныеОтчета.ДанныеКС.ДанныеР81);
	
	РасчетнаяСумма = Показатели.Р08С180К20.Значение + Показатели.Р81С180К20.Значение;
	Настройки.ЭтоОшибка = Показатели.Р03С150.Итог > 
		РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, РасчетнаяСумма);
	Настройки.Расшифровка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки,
		Показатели.Р03С150.Итог, Показатели.Р08С180К20.Значение, Показатели.Р81С180К20.Значение, РасчетнаяСумма);
		
	ДополнитьСтруктуруОшибок(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_30(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='1.30'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Раздел 3'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, 
		НСтр("ru='Возможно влияние погрешности в результате округления показателей'"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Раздела 3 (КС 1.30)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='п.1 ст. 153, ст. 171, 172 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Сумма налога, уплаченная налогоплательщиком налоговым органам при ввозе товаров в стр.160 Раздела 3 '") +
		НСтр("ru='должна быть равна сумме стр.180 Раздела 8, в которых стр.010 Раздела 8 = 19 и сумме стр.180 '") +
		НСтр("ru='Приложения 1 к Разделу 8, в которых стр.010 = 19, с учетом погрешности округления (при наличии)'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 ± 0,49 = %2 + %3 Итог [%4]'"));
	Заголовки.Вставить("ОписаниеОшибки"		, 
		НСтр("ru='Ошибка исчисления суммы НДС, подлежащей вычету'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р03С160"		, "П000300016003");
	ИменаПоказателей.Вставить("Р08С180К19"	, Неопределено);
	ИменаПоказателей.Вставить("Р81С180К19"	, Неопределено);
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	ЗарегистрироватьФормулу(Настройки);
	
	ЗаполнитьИРасшифроватьПоказатели(Показатели, мДанныеОтчета.ДанныеКС.ДанныеР03);
	ЗаполнитьИРасшифроватьПоказатели(Показатели, мДанныеОтчета.ДанныеКС.ДанныеР08);
	ЗаполнитьИРасшифроватьПоказатели(Показатели, мДанныеОтчета.ДанныеКС.ДанныеР81);
	
	РасчетнаяСумма = Показатели.Р08С180К19.Значение + Показатели.Р81С180К19.Значение;
	Настройки.ЭтоОшибка = НЕ Показатели.Р03С160.Итог = 
		РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, РасчетнаяСумма);
	Настройки.Расшифровка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки,
		Показатели.Р03С160.Итог, Показатели.Р08С180К19.Значение, Показатели.Р81С180К19.Значение, РасчетнаяСумма);
		
	ДополнитьСтруктуруОшибок(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_31(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='1.31'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Раздел 3'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, 
		НСтр("ru='Возможно влияние погрешности в результате округления показателей'"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Раздела 3 (КС 1.31)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст. 161, 171, 172 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Сумма налога, уплаченная в бюджет в стр.180 гр.3 Раздела 3 должна быть равна сумме стр.180 '") +
		НСтр("ru='Раздела 8, в которых стр.010 Раздела 8 = 06 и сумме стр.180 Приложения 1 к Разделу 8, в которых '") +
		НСтр("ru='стр.010 = 06, с учетом погрешности округления (при наличии)'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 ± 0,49 = %2 + %3 Итог [%4]'"));
	Заголовки.Вставить("ОписаниеОшибки"		, 
		НСтр("ru='Ошибка исчисления суммы НДС, подлежащей вычету'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р03С180"		, "П000300018003");
	ИменаПоказателей.Вставить("Р08С180К06"	, Неопределено);
	ИменаПоказателей.Вставить("Р81С180К06"	, Неопределено);
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	ЗарегистрироватьФормулу(Настройки);
	
	ЗаполнитьИРасшифроватьПоказатели(Показатели, мДанныеОтчета.ДанныеКС.ДанныеР03);
	ЗаполнитьИРасшифроватьПоказатели(Показатели, мДанныеОтчета.ДанныеКС.ДанныеР08);
	ЗаполнитьИРасшифроватьПоказатели(Показатели, мДанныеОтчета.ДанныеКС.ДанныеР81);
	
	РасчетнаяСумма = Показатели.Р08С180К06.Значение + Показатели.Р81С180К06.Значение;
	Настройки.ЭтоОшибка = НЕ Показатели.Р03С180.Итог = 
		РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, РасчетнаяСумма);
	Настройки.Расшифровка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки,
		Показатели.Р03С180.Итог, Показатели.Р08С180К06.Значение, Показатели.Р81С180К06.Значение, РасчетнаяСумма);
		
	ДополнитьСтруктуруОшибок(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_32(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='1.32'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Раздел 8'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Раздела 8 (КС 1.32)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст. 171, 172 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Сумма налога по счету-фактуре в стр.190 Раздела 8 должна быть равна сумме стр.180 '") +
		НСтр("ru='Раздела 8'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, 
		НСтр("ru='Ошибка исчисления суммы НДС, подлежащей вычету'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р08С190"	, Неопределено);
	ИменаПоказателей.Вставить("Р08С180"	, Неопределено);
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	ЗарегистрироватьФормулу(Настройки);
	
	ЗаполнитьИРасшифроватьПоказатели(Показатели, мДанныеОтчета.ДанныеКС.ДанныеР08);
	
	Настройки.ЭтоОшибка = НЕ Показатели.Р08С190.Значение = Показатели.Р08С180.Значение;
	Настройки.Расшифровка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки,
		Показатели.Р08С190.Значение, Показатели.Р08С180.Значение);
		
	ДополнитьСтруктуруОшибок(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_33(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='1.33'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Приложение 1 к Разделу 8'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Приложения 1 к Разделу 8 (КС 1.33)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст. 171, 172 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Сумма налога по стр.190 Приложения 1 к Разделу 8 должна быть равна сумме стр.005 и 180 '") +
		НСтр("ru='Приложения 1 к Разделу 8'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = %2 + %3 Итог [%4]'"));
	Заголовки.Вставить("ОписаниеОшибки"		, 
		НСтр("ru='Ошибка исчисления суммы НДС, подлежащей вычету'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р81С190"	, Неопределено);
	ИменаПоказателей.Вставить("Р81С005"	, Неопределено);
	ИменаПоказателей.Вставить("Р81С180"	, Неопределено);
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	ЗарегистрироватьФормулу(Настройки);
	
	ЗаполнитьИРасшифроватьПоказатели(Показатели, мДанныеОтчета.ДанныеКС.ДанныеР81);
	
	РасчетнаяСумма = Показатели.Р81С005.Значение + Показатели.Р81С180.Значение;
	Настройки.ЭтоОшибка = НЕ Показатели.Р81С190.Значение = РасчетнаяСумма;
	Настройки.Расшифровка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки,
		Показатели.Р81С190.Значение, Показатели.Р81С005.Значение, Показатели.Р81С180.Значение, РасчетнаяСумма);
		
	ДополнитьСтруктуруОшибок(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_34(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='1.34'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Раздел 9'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Раздела 9 (КС 1.34)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст. 153, 173 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			,
		НСтр("ru='Стоимость продаж, облагаемых налогом по ставке 20% по стр.230 Раздела 9 должна быть равна '") +
		НСтр("ru='сумме стр.170 Раздела 9'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, 
		НСтр("ru='Возможна ошибка исчисления суммы НДС, подлежащей уплате в бюджет'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р09С230"	, Неопределено);
	ИменаПоказателей.Вставить("Р09С170"	, Неопределено);
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	ЗарегистрироватьФормулу(Настройки);
	
	ЗаполнитьИРасшифроватьПоказатели(Показатели, мДанныеОтчета.ДанныеКС.ДанныеР09);
	
	Настройки.ЭтоОшибка = НЕ Показатели.Р09С230.Значение = Показатели.Р09С170.Значение;
	Настройки.Расшифровка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки,
		Показатели.Р09С230.Значение, Показатели.Р09С170.Значение);
		
	ДополнитьСтруктуруОшибок(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_35(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='1.35'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Раздел 9'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Раздела 9 (КС 1.35)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст. 153, 173 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			,
		НСтр("ru='Стоимость продаж, облагаемых налогом по ставке 10% по стр.240 Раздела 9 должна быть равна '") +
		НСтр("ru='сумме стр.180 Раздела 9'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, 
		НСтр("ru='Возможна ошибка исчисления суммы НДС, подлежащей уплате в бюджет'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р09С240"	, Неопределено);
	ИменаПоказателей.Вставить("Р09С180"	, Неопределено);
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	ЗарегистрироватьФормулу(Настройки);
	
	ЗаполнитьИРасшифроватьПоказатели(Показатели, мДанныеОтчета.ДанныеКС.ДанныеР09);
	
	Настройки.ЭтоОшибка = НЕ Показатели.Р09С240.Значение = Показатели.Р09С180.Значение;
	Настройки.Расшифровка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки,
		Показатели.Р09С240.Значение, Показатели.Р09С180.Значение);
		
	ДополнитьСтруктуруОшибок(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_36(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='1.36'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Раздел 9'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Раздела 9 (КС 1.36)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст. 164, 165, 167, 173 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			,
		НСтр("ru='Стоимость продаж, облагаемых налогом по ставке 0% по стр.250 Раздела 9 должна быть равна '") +
		НСтр("ru='сумме стр.190 Раздела 9'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, 
		НСтр("ru='Возможна ошибка исчисления суммы НДС, подлежащей уплате в бюджет'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р09С250"	, Неопределено);
	ИменаПоказателей.Вставить("Р09С190"	, Неопределено);
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	ЗарегистрироватьФормулу(Настройки);
	
	ЗаполнитьИРасшифроватьПоказатели(Показатели, мДанныеОтчета.ДанныеКС.ДанныеР09);
	
	Настройки.ЭтоОшибка = НЕ Показатели.Р09С250.Значение = Показатели.Р09С190.Значение;
	Настройки.Расшифровка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки,
		Показатели.Р09С250.Значение, Показатели.Р09С190.Значение);
		
	ДополнитьСтруктуруОшибок(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_37(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='1.37'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Раздел 9'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Раздела 9 (КС 1.37)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст. 153, 173 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			,
		НСтр("ru='Сумма налога по ставке 20% в стр.260 Раздела 9 должна быть равна '") +
		НСтр("ru='сумме стр.200 Раздела 9'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, 
		НСтр("ru='Ошибка исчисления суммы НДС, подлежащей уплате в бюджет'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р09С260"	, Неопределено);
	ИменаПоказателей.Вставить("Р09С200"	, Неопределено);
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	ЗарегистрироватьФормулу(Настройки);
	
	ЗаполнитьИРасшифроватьПоказатели(Показатели, мДанныеОтчета.ДанныеКС.ДанныеР09);
	
	Настройки.ЭтоОшибка = НЕ Показатели.Р09С260.Значение = Показатели.Р09С200.Значение;
	Настройки.Расшифровка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки,
		Показатели.Р09С260.Значение, Показатели.Р09С200.Значение);
		
	ДополнитьСтруктуруОшибок(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_38(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='1.38'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Раздел 9'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Раздела 9 (КС 1.38)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст. 153, 173 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			,
		НСтр("ru='Сумма налога по ставке 10% в стр.270 Раздела 9 должна быть равна '") +
		НСтр("ru='сумме стр.210 Раздела 9'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, 
		НСтр("ru='Ошибка исчисления суммы НДС, подлежащей уплате в бюджет'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р09С270"	, Неопределено);
	ИменаПоказателей.Вставить("Р09С210"	, Неопределено);
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	ЗарегистрироватьФормулу(Настройки);
	
	ЗаполнитьИРасшифроватьПоказатели(Показатели, мДанныеОтчета.ДанныеКС.ДанныеР09);
	
	Настройки.ЭтоОшибка = НЕ Показатели.Р09С270.Значение = Показатели.Р09С210.Значение;
	Настройки.Расшифровка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки,
		Показатели.Р09С270.Значение, Показатели.Р09С210.Значение);
		
	ДополнитьСтруктуруОшибок(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_39(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='1.39'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Приложение 1 к Разделу 9'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Приложения 1 к Разделу 9 (КС 1.39)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст. 153, 173 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Стоимость продаж по ставке 20% в стр.310 Приложения 1 к Разделу 9 должна быть равна сумме '") +
		НСтр("ru='стр.020 и 250 Приложения 1 к Разделу 9'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = %2 + %3 Итог [%4]'"));
	Заголовки.Вставить("ОписаниеОшибки"		, 
		НСтр("ru='Возможно ошибка исчисления суммы НДС, подлежащей уплате в бюджет'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р91С310"	, Неопределено);
	ИменаПоказателей.Вставить("Р91С020"	, Неопределено);
	ИменаПоказателей.Вставить("Р91С250"	, Неопределено);
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	ЗарегистрироватьФормулу(Настройки);
	
	ЗаполнитьИРасшифроватьПоказатели(Показатели, мДанныеОтчета.ДанныеКС.ДанныеР91);
	
	РасчетнаяСумма = Показатели.Р91С020.Значение + Показатели.Р91С250.Значение;
	Настройки.ЭтоОшибка = НЕ Показатели.Р91С310.Значение = РасчетнаяСумма;
	Настройки.Расшифровка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки,
		Показатели.Р91С310.Значение, Показатели.Р91С020.Значение, Показатели.Р91С250.Значение, РасчетнаяСумма);
		
	ДополнитьСтруктуруОшибок(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_40(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='1.40'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Приложение 1 к Разделу 9'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Приложения 1 к Разделу 9 (КС 1.40)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст. 153, 173 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Стоимость продаж по ставке 10% в стр.320 Приложения 1 к Разделу 9 должна быть равна сумме '") +
		НСтр("ru='стр.030 и 260 Приложения 1 к Разделу 9'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = %2 + %3 Итог [%4]'"));
	Заголовки.Вставить("ОписаниеОшибки"		, 
		НСтр("ru='Возможно ошибка исчисления суммы НДС, подлежащей уплате в бюджет'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р91С320"	, Неопределено);
	ИменаПоказателей.Вставить("Р91С030"	, Неопределено);
	ИменаПоказателей.Вставить("Р91С260"	, Неопределено);
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	ЗарегистрироватьФормулу(Настройки);
	
	ЗаполнитьИРасшифроватьПоказатели(Показатели, мДанныеОтчета.ДанныеКС.ДанныеР91);
	
	РасчетнаяСумма = Показатели.Р91С030.Значение + Показатели.Р91С260.Значение;
	Настройки.ЭтоОшибка = НЕ Показатели.Р91С320.Значение = РасчетнаяСумма;
	Настройки.Расшифровка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки,
		Показатели.Р91С320.Значение, Показатели.Р91С030.Значение, Показатели.Р91С260.Значение, РасчетнаяСумма);
		
	ДополнитьСтруктуруОшибок(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_41(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='1.41'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Приложение 1 к Разделу 9'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Приложения 1 к Разделу 9 (КС 1.41)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст. 164, 165, 167, 173 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Стоимость продаж по ставке 0% в стр.330 Приложения 1 к Разделу 9 должна быть равна сумме '") +
		НСтр("ru='стр.040 и 270 Приложения 1 к Разделу 9'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = %2 + %3 Итог [%4]'"));
	Заголовки.Вставить("ОписаниеОшибки"		, 
		НСтр("ru='Возможно ошибка исчисления суммы НДС, подлежащей уплате в бюджет'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р91С330"	, Неопределено);
	ИменаПоказателей.Вставить("Р91С040"	, Неопределено);
	ИменаПоказателей.Вставить("Р91С270"	, Неопределено);
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	ЗарегистрироватьФормулу(Настройки);
	
	ЗаполнитьИРасшифроватьПоказатели(Показатели, мДанныеОтчета.ДанныеКС.ДанныеР91);
	
	РасчетнаяСумма = Показатели.Р91С040.Значение + Показатели.Р91С270.Значение;
	Настройки.ЭтоОшибка = НЕ Показатели.Р91С330.Значение = РасчетнаяСумма;
	Настройки.Расшифровка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки,
		Показатели.Р91С330.Значение, Показатели.Р91С040.Значение, Показатели.Р91С270.Значение, РасчетнаяСумма);
		
	ДополнитьСтруктуруОшибок(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_42(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='1.42'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Приложение 1 к Разделу 9'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Приложения 1 к Разделу 9 (КС 1.42)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст. 153, 173 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Сумма налога по ставке 20% в стр.340 Приложения 1 к Разделу 9 должна быть равна сумме '") +
		НСтр("ru='стр.050 и 280 Приложения 1 к Разделу 9'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = %2 + %3 Итог [%4]'"));
	Заголовки.Вставить("ОписаниеОшибки"		, 
		НСтр("ru='Ошибка исчисления суммы НДС, подлежащей уплате в бюджет'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р91С340"	, Неопределено);
	ИменаПоказателей.Вставить("Р91С050"	, Неопределено);
	ИменаПоказателей.Вставить("Р91С280"	, Неопределено);
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	ЗарегистрироватьФормулу(Настройки);
	
	ЗаполнитьИРасшифроватьПоказатели(Показатели, мДанныеОтчета.ДанныеКС.ДанныеР91);
	
	РасчетнаяСумма = Показатели.Р91С050.Значение + Показатели.Р91С280.Значение;
	Настройки.ЭтоОшибка = НЕ Показатели.Р91С340.Значение = РасчетнаяСумма;
	Настройки.Расшифровка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки,
		Показатели.Р91С340.Значение, Показатели.Р91С050.Значение, Показатели.Р91С280.Значение, РасчетнаяСумма);
		
	ДополнитьСтруктуруОшибок(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_43(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='1.43'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Приложение 1 к Разделу 9'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Приложения 1 к Разделу 9 (КС 1.43)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст. 153, 173 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Сумма налога по ставке 10% в стр.350 Приложения 1 к Разделу 9 должна быть равна сумме '") +
		НСтр("ru='стр.060 и 290 Приложения 1 к Разделу 9'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = %2 + %3 Итог [%4]'"));
	Заголовки.Вставить("ОписаниеОшибки"		, 
		НСтр("ru='Ошибка исчисления суммы НДС, подлежащей уплате в бюджет'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р91С350"	, Неопределено);
	ИменаПоказателей.Вставить("Р91С060"	, Неопределено);
	ИменаПоказателей.Вставить("Р91С290"	, Неопределено);
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	ЗарегистрироватьФормулу(Настройки);
	
	ЗаполнитьИРасшифроватьПоказатели(Показатели, мДанныеОтчета.ДанныеКС.ДанныеР91);
	
	РасчетнаяСумма = Показатели.Р91С060.Значение + Показатели.Р91С290.Значение;
	Настройки.ЭтоОшибка = НЕ Показатели.Р91С350.Значение = РасчетнаяСумма;
	Настройки.Расшифровка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки,
		Показатели.Р91С350.Значение, Показатели.Р91С060.Значение, Показатели.Р91С290.Значение, РасчетнаяСумма);
		
	ДополнитьСтруктуруОшибок(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_44(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='1.44'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Раздел 12'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Раздела 12 (КС 1.44)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст. 173 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Сумма налога в стр.070 Раздела 12 должна быть равна разнице значений '") +
		НСтр("ru='стр.080 и 060 Раздела 12'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = %2 - %3 Итог [%4]'"));
	Заголовки.Вставить("ОписаниеОшибки"		, 
		НСтр("ru='Ошибка исчисления суммы НДС, подлежащей уплате в бюджет'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р12С070"	, Неопределено);
	ИменаПоказателей.Вставить("Р12С080"	, Неопределено);
	ИменаПоказателей.Вставить("Р12С060"	, Неопределено);
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	ЗарегистрироватьФормулу(Настройки);
	
	ЗаполнитьИРасшифроватьПоказатели(Показатели, мДанныеОтчета.ДанныеКС.ДанныеР12);
	
	РасчетнаяСумма = Показатели.Р12С080.Значение - Показатели.Р12С060.Значение;
	Настройки.ЭтоОшибка = НЕ Показатели.Р12С070.Значение = РасчетнаяСумма;
	Настройки.Расшифровка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки,
		Показатели.Р12С070.Значение, Показатели.Р12С080.Значение, Показатели.Р12С060.Значение, РасчетнаяСумма);
		
	ДополнитьСтруктуруОшибок(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_45(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='1.45'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Раздел 9'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Раздела 9 (КС 1.45)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст. 153, 173 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			,
		НСтр("ru='Стоимость продаж, облагаемых налогом по ставке 18% по стр.235 Раздела 9 должна быть равна '") +
		НСтр("ru='сумме стр.175 Раздела 9'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, 
		НСтр("ru='Возможна ошибка исчисления суммы НДС, подлежащей уплате в бюджет'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р09С235"	, Неопределено);
	ИменаПоказателей.Вставить("Р09С175"	, Неопределено);
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	ЗарегистрироватьФормулу(Настройки);
	
	ЗаполнитьИРасшифроватьПоказатели(Показатели, мДанныеОтчета.ДанныеКС.ДанныеР09);
	
	Настройки.ЭтоОшибка = НЕ Показатели.Р09С235.Значение = Показатели.Р09С175.Значение;
	Настройки.Расшифровка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки,
		Показатели.Р09С235.Значение, Показатели.Р09С175.Значение);
		
	ДополнитьСтруктуруОшибок(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_46(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='1.46'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Раздел 9'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Раздела 9 (КС 1.46)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст. 153, 173 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			,
		НСтр("ru='Сумма налога по ставке 18% в стр.265 Раздела 9 должна быть равна '") +
		НСтр("ru='сумме стр.205 Раздела 9'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, 
		НСтр("ru='Ошибка исчисления суммы НДС, подлежащей уплате в бюджет'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р09С265"	, Неопределено);
	ИменаПоказателей.Вставить("Р09С205"	, Неопределено);
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	ЗарегистрироватьФормулу(Настройки);
	
	ЗаполнитьИРасшифроватьПоказатели(Показатели, мДанныеОтчета.ДанныеКС.ДанныеР09);
	
	Настройки.ЭтоОшибка = НЕ Показатели.Р09С265.Значение = Показатели.Р09С205.Значение;
	Настройки.Расшифровка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки,
		Показатели.Р09С265.Значение, Показатели.Р09С205.Значение);
		
	ДополнитьСтруктуруОшибок(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_47(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='1.47'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Приложение 1 к Разделу 9'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Приложения 1 к Разделу 9 (КС 1.47)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст. 153, 173 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Стоимость продаж по ставке 18% в стр.315 Приложения 1 к Разделу 9 должна быть равна сумме '") +
		НСтр("ru='стр.025 и 255 Приложения 1 к Разделу 9'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = %2 + %3 Итог [%4]'"));
	Заголовки.Вставить("ОписаниеОшибки"		, 
		НСтр("ru='Возможно ошибка исчисления суммы НДС, подлежащей уплате в бюджет'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р91С315"	, Неопределено);
	ИменаПоказателей.Вставить("Р91С025"	, Неопределено);
	ИменаПоказателей.Вставить("Р91С255"	, Неопределено);
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	ЗарегистрироватьФормулу(Настройки);
	
	ЗаполнитьИРасшифроватьПоказатели(Показатели, мДанныеОтчета.ДанныеКС.ДанныеР91);
	
	РасчетнаяСумма = Показатели.Р91С025.Значение + Показатели.Р91С255.Значение;
	Настройки.ЭтоОшибка = НЕ Показатели.Р91С315.Значение = РасчетнаяСумма;
	Настройки.Расшифровка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки,
		Показатели.Р91С315.Значение, Показатели.Р91С025.Значение, Показатели.Р91С255.Значение, РасчетнаяСумма);
		
	ДополнитьСтруктуруОшибок(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_48(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='1.48'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Приложение 1 к Разделу 9'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Приложения 1 к Разделу 9 (КС 1.48)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст. 153, 173 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Сумма налога по ставке 18% в стр.345 Приложения 1 к Разделу 9 должна быть равна сумме '") +
		НСтр("ru='стр.055 и 285 Приложения 1 к Разделу 9'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = %2 + %3 Итог [%4]'"));
	Заголовки.Вставить("ОписаниеОшибки"		, 
		НСтр("ru='Ошибка исчисления суммы НДС, подлежащей уплате в бюджет'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р91С345"	, Неопределено);
	ИменаПоказателей.Вставить("Р91С055"	, Неопределено);
	ИменаПоказателей.Вставить("Р91С285"	, Неопределено);
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	ЗарегистрироватьФормулу(Настройки);
	
	ЗаполнитьИРасшифроватьПоказатели(Показатели, мДанныеОтчета.ДанныеКС.ДанныеР91);
	
	РасчетнаяСумма = Показатели.Р91С055.Значение + Показатели.Р91С285.Значение;
	Настройки.ЭтоОшибка = НЕ Показатели.Р91С345.Значение = РасчетнаяСумма;
	Настройки.Расшифровка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки,
		Показатели.Р91С345.Значение, Показатели.Р91С055.Значение, Показатели.Р91С285.Значение, РасчетнаяСумма);
		
	ДополнитьСтруктуруОшибок(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_49(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='1.49'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Раздел 2'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Раздела 2 (КС 1.49)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='п.1, 4 ст. 174 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='При условии отражения в стр.070 Раздела 2 кода 1011700, стр.060 Раздела 2 = 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, 
		НСтр("ru='Возможно нарушение срока уплаты суммы налога'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р02С070"	, "П000200007003");
	ИменаПоказателей.Вставить("Р02С060"	, "П000200006003");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого Лист02 Из мДанныеОтчета.ДанныеКС.ДанныеР02 Цикл
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьИРасшифроватьПоказатели(Показатели, Лист02);
		
		Настройки.ЭтоОшибка = Показатели.Р02С070.Значение = "1011700" И НЕ Показатели.Р02С060.Значение = 0;
		Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки, "%1", Показатели.Р02С060.Значение);
		ДополнитьСтруктуруОшибок(Настройки);
	КонецЦикла;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_50(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='1.50'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Раздел 2'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Раздела 2 (КС 1.50)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='п.4, 6, 8 ст. 161 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='При условии заполнения стр.040 - 060 Раздела 2, в стр.070 Раздела 2 указывается код '") +
		НСтр("ru='1011705, 1011709, 1011715'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='(%1) = 1011705, 1011709, 1011715'"));
	Заголовки.Вставить("ОписаниеОшибки"		, 
		НСтр("ru='Возможно указан неверный код'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р02С070"	, "П000200007003");
	ИменаПоказателей.Вставить("Р02С020"	, "П000200002003");
	ИменаПоказателей.Вставить("Р02С030"	, "П000200003003");
	ИменаПоказателей.Вставить("Р02С040"	, "П000200004003");
	ИменаПоказателей.Вставить("Р02С050"	, "П000200005003");
	ИменаПоказателей.Вставить("Р02С060"	, "П000200006003");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	Показатели.Р02С020.Расшифровывать = Ложь;
	Показатели.Р02С030.Расшифровывать = Ложь;
	
	Для каждого Лист02 Из мДанныеОтчета.ДанныеКС.ДанныеР02 Цикл
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьИРасшифроватьПоказатели(Показатели, Лист02);
		
		Настройки.ЭтоОшибка = НЕ ЗначениеЗаполнено(Показатели.Р02С020.Значение) 
			И НЕ	ЗначениеЗаполнено(Показатели.Р02С030.Значение) И ЗначениеЗаполнено(Показатели.Р02С040.Значение)
			И		ЗначениеЗаполнено(Показатели.Р02С050.Значение) И ЗначениеЗаполнено(Показатели.Р02С060.Значение)
			И		(НЕ ЗначениеЗаполнено(Показатели.Р02С070.Значение)
			ИЛИ		СтрНайти("1011705,1011709,1011715", Показатели.Р02С070.Значение) = 0);
		Показатели.Р02С070.Значение = ?(ЗначениеЗаполнено(Показатели.Р02С070.Значение), Показатели.Р02С070.Значение, "...");
		Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки, "%1", Показатели.Р02С070.Значение);
		ДополнитьСтруктуруОшибок(Настройки);
	КонецЦикла;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_51(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='1.51'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Раздел 2'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Раздела 2 (КС 1.51)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='п.3 ст. 161 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='При условии заполнения стр.020 - 060 Раздела 2, в стр.070 Раздела 2 указывается код 1011703'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='(%1) = 1011703'"));
	Заголовки.Вставить("ОписаниеОшибки"		, 
		НСтр("ru='Возможно указан неверный код'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р02С070"	, "П000200007003");
	ИменаПоказателей.Вставить("Р02С020"	, "П000200002003");
	ИменаПоказателей.Вставить("Р02С030"	, "П000200003003");
	ИменаПоказателей.Вставить("Р02С040"	, "П000200004003");
	ИменаПоказателей.Вставить("Р02С050"	, "П000200005003");
	ИменаПоказателей.Вставить("Р02С060"	, "П000200006003");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого Лист02 Из мДанныеОтчета.ДанныеКС.ДанныеР02 Цикл
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьИРасшифроватьПоказатели(Показатели, Лист02);
		
		Настройки.ЭтоОшибка = ЗначениеЗаполнено(Показатели.Р02С020.Значение) 
			И 		ЗначениеЗаполнено(Показатели.Р02С030.Значение) И ЗначениеЗаполнено(Показатели.Р02С040.Значение)
			И		ЗначениеЗаполнено(Показатели.Р02С050.Значение) И ЗначениеЗаполнено(Показатели.Р02С060.Значение)
			И НЕ	Показатели.Р02С070.Значение = "1011703";
		Показатели.Р02С070.Значение = ?(ЗначениеЗаполнено(Показатели.Р02С070.Значение), Показатели.Р02С070.Значение, "...");
		Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки, "%1", Показатели.Р02С070.Значение);
		ДополнитьСтруктуруОшибок(Настройки);
	КонецЦикла;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_52(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='1.52'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Раздел 2'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Раздела 2 (КС 1.52)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='п.1, 5 ст. 161, п.10 ст. 174.2 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='При условии заполнения стр.020, 040 - 060 Раздела 2, в стр.070 Раздела 2 указывается код '") +
		НСтр("ru='1011707, 1011711, 1011712, 1011714'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='(%1) = 1011707, 1011711, 1011712, 1011714'"));
	Заголовки.Вставить("ОписаниеОшибки"		, 
		НСтр("ru='Возможно указан неверный код'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р02С070"	, "П000200007003");
	ИменаПоказателей.Вставить("Р02С020"	, "П000200002003");
	ИменаПоказателей.Вставить("Р02С030"	, "П000200003003");
	ИменаПоказателей.Вставить("Р02С040"	, "П000200004003");
	ИменаПоказателей.Вставить("Р02С050"	, "П000200005003");
	ИменаПоказателей.Вставить("Р02С060"	, "П000200006003");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	Показатели.Р02С030.Расшифровывать = Ложь;
	
	Для каждого Лист02 Из мДанныеОтчета.ДанныеКС.ДанныеР02 Цикл
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьИРасшифроватьПоказатели(Показатели, Лист02);
		
		Настройки.ЭтоОшибка = ЗначениеЗаполнено(Показатели.Р02С020.Значение) 
			И НЕ	ЗначениеЗаполнено(Показатели.Р02С030.Значение) И ЗначениеЗаполнено(Показатели.Р02С040.Значение)
			И		ЗначениеЗаполнено(Показатели.Р02С050.Значение) И ЗначениеЗаполнено(Показатели.Р02С060.Значение)
			И		(НЕ ЗначениеЗаполнено(Показатели.Р02С070.Значение)
			ИЛИ 	СтрНайти("1011707,1011711,1011712,1011714", Показатели.Р02С070.Значение) = 0);
		Показатели.Р02С070.Значение = ?(ЗначениеЗаполнено(Показатели.Р02С070.Значение), Показатели.Р02С070.Значение, "...");
		Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки, "%1", Показатели.Р02С070.Значение);
		ДополнитьСтруктуруОшибок(Настройки);
	КонецЦикла;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_53а(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='1.53а'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Раздел 1'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Раздела 1 (КС 1.53а)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст. 80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение КБК в стр.020 Раздела 1 должно соответствовать списку допустимых значений'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='(%1) найдено в списке значений'"));
	Заголовки.Вставить("ОписаниеОшибки"		, 
		НСтр("ru='Неверный код КБК'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р01С020"	, "П000100002003");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	Список	= мДанныеОтчета.ДанныеКС.СоответствиеСписков.Получить(Показатели.Р01С020.ИмяПоказателя);
	
	Если НЕ Список = Неопределено Тогда
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьИРасшифроватьПоказатели(Показатели, мДанныеОтчета.ДанныеКС.ДанныеР01);
		
		Настройки.ЭтоОшибка = РазделЗаполнен(мДанныеОтчета.ДанныеКС.ДанныеР01, Истина) 
			И Список.Получить(Показатели.Р01С020.Значение) = Неопределено;
		Показатели.Р01С020.Значение = ?(ЗначениеЗаполнено(Показатели.Р01С020.Значение), Показатели.Р01С020.Значение, "...");
		Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки, "%1", Показатели.Р01С020.Значение);
		ДополнитьСтруктуруОшибок(Настройки);
	КонецЕсли;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_53б(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='1.53б'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Раздел 2'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Раздела 2 (КС 1.53б)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст. 80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение КБК в стр.040 Раздела 2 должно соответствовать списку допустимых значений'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='(%1) найдено в списке значений'"));
	Заголовки.Вставить("ОписаниеОшибки"		, 
		НСтр("ru='Неверный код КБК'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р02С040"	, "П000200004003");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	Список	= мДанныеОтчета.ДанныеКС.СоответствиеСписков.Получить(Показатели.Р02С040.ИмяПоказателя);
	
	Если НЕ Список = Неопределено Тогда
		Для каждого Лист02 Из мДанныеОтчета.ДанныеКС.ДанныеР02 Цикл
			ЗарегистрироватьФормулу(Настройки);
			ЗаполнитьИРасшифроватьПоказатели(Показатели, Лист02);
		
			Настройки.ЭтоОшибка = РазделЗаполнен(Лист02, Истина) И Список.Получить(Показатели.Р02С040.Значение) = Неопределено;
			Показатели.Р02С040.Значение = ?(ЗначениеЗаполнено(Показатели.Р02С040.Значение), Показатели.Р02С040.Значение, "...");
			Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки, "%1", Показатели.Р02С040.Значение);
			ДополнитьСтруктуруОшибок(Настройки);
		КонецЦикла;
	КонецЕсли;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_54а(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='1.54а'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Раздел 1'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru='Реализация отложена'"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Раздела 1 (КС 1.54а)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст. 80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение ОКТМО в стр.010 Раздела 1 должно соответствовать Общероссийскому классификатору '") +
		НСтр("ru='территорий муниципальных образований'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='(%1) найдено в списке значений'"));
	Заголовки.Вставить("ОписаниеОшибки"		, 
		НСтр("ru='Неверный код ОКТМО'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_54б(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='1.54б'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Раздел 2'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru='Реализация отложена'"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Раздела 2 (КС 1.54б)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст. 80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение ОКТМО в стр.050 Раздела 2 должно соответствовать Общероссийскому классификатору '") +
		НСтр("ru='территорий муниципальных образований'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='(%1) найдено в списке значений'"));
	Заголовки.Вставить("ОписаниеОшибки"		, 
		НСтр("ru='Неверный код ОКТМО'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_55_доп(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='1.55.доп'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Раздел 4'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Раздела 4 (КС 1.55.доп)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст. 173 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Сумма налога по стр.130 Раздела 4 должна быть равна сумме значений стр.050 и 080 за минусом '") +
		НСтр("ru='суммы значений стр.030 и 040 Раздела 4, если полученная разница > 0, иначе 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = (%2 + %3) - (%4 + %5) Итог [%6]'"));
	Заголовки.Вставить("ОписаниеОшибки"		, 
		НСтр("ru='Ошибка исчисления суммы НДС, подлежащей уплате в бюджет'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р04С130"	, "П000400013003");
	ИменаПоказателей.Вставить("Р04С050"	, "П0004М1005003_");
	ИменаПоказателей.Вставить("Р04С080"	, "П0004М2008003_");
	ИменаПоказателей.Вставить("Р04С030"	, "П0004М1003003_");
	ИменаПоказателей.Вставить("Р04С040"	, "П0004М1004003_");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	ЗарегистрироватьФормулу(Настройки);
	
	ЗаполнитьИРасшифроватьПоказатели(Показатели, мДанныеОтчета.ДанныеКС.ДанныеР04);
	
	РасчетнаяСумма = Макс(Показатели.Р04С050.Итог + Показатели.Р04С080.Итог - Показатели.Р04С030.Итог - 
		Показатели.Р04С040.Итог, 0);
	Настройки.ЭтоОшибка = НЕ Показатели.Р04С130.Значение = РасчетнаяСумма;
	Настройки.Расшифровка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки,
		Показатели.Р04С130.Значение, Показатели.Р04С050.Итог, Показатели.Р04С080.Итог, Показатели.Р04С030.Итог, 
		Показатели.Р04С040.Итог, РасчетнаяСумма);
		
	ДополнитьСтруктуруОшибок(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_56_доп(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='1.56.доп'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Раздел 6'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Раздела 6 (КС 1.56.доп)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст. 173 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Сумма налога по стр.160 Раздела 6 должна быть равна сумме значений стр.050, 100 и 130 за минусом '") +
		НСтр("ru='суммы значений стр.060, 090 и 150 Раздела 6, если полученная разница > 0, иначе 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = (%2 + %3 + %4) - (%5 + %6 + %7) Итог [%8]'"));
	Заголовки.Вставить("ОписаниеОшибки"		, 
		НСтр("ru='Ошибка исчисления суммы НДС, подлежащей уплате в бюджет'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р06С160"	, "П000600016003");
	ИменаПоказателей.Вставить("Р06С050"	, "П000600005003");
	ИменаПоказателей.Вставить("Р06С100"	, "П0006М2010003_");
	ИменаПоказателей.Вставить("Р06С130"	, "П0006М3013003_");
	ИменаПоказателей.Вставить("Р06С060"	, "П000600006003");
	ИменаПоказателей.Вставить("Р06С090"	, "П0006М2009003_");
	ИменаПоказателей.Вставить("Р06С150"	, "П0006М3015003_");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	ЗарегистрироватьФормулу(Настройки);
	
	ЗаполнитьИРасшифроватьПоказатели(Показатели, мДанныеОтчета.ДанныеКС.ДанныеР06);
	
	РасчетнаяСумма = Макс(Показатели.Р06С050.Итог + Показатели.Р06С100.Итог + Показатели.Р06С130.Итог - 
		Показатели.Р06С060.Итог - Показатели.Р06С090.Итог - Показатели.Р06С150.Итог, 0);
	Настройки.ЭтоОшибка = НЕ Показатели.Р06С160.Значение = РасчетнаяСумма;
	Настройки.Расшифровка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки,
		Показатели.Р06С160.Значение, Показатели.Р06С050.Итог, Показатели.Р06С100.Итог, Показатели.Р06С130.Итог, 
		Показатели.Р06С060.Итог, Показатели.Р06С090.Итог, Показатели.Р06С150.Итог, РасчетнаяСумма);
		
	ДополнитьСтруктуруОшибок(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_57_доп(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='1.57.доп'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Раздел 6'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Раздела 6 (КС 1.57.доп)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст. 153, 164, 165, 167 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Сумма налога по стр.170 Раздела 6 должна быть равна сумме значений стр.060, 090 и 150 за минусом '") +
		НСтр("ru='суммы значений стр.050, 100 и 130 Раздела 6, если полученная разница > 0, иначе 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = (%2 + %3 + %4) - (%5 + %6 + %7) Итог [%8]'"));
	Заголовки.Вставить("ОписаниеОшибки"		, 
		НСтр("ru='Ошибка исчисления суммы НДС, подлежащей вычету'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р06С170"	, "П000600017003");
	ИменаПоказателей.Вставить("Р06С060"	, "П000600006003");
	ИменаПоказателей.Вставить("Р06С090"	, "П0006М2009003_");
	ИменаПоказателей.Вставить("Р06С150"	, "П0006М3015003_");
	ИменаПоказателей.Вставить("Р06С050"	, "П000600005003");
	ИменаПоказателей.Вставить("Р06С100"	, "П0006М2010003_");
	ИменаПоказателей.Вставить("Р06С130"	, "П0006М3013003_");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	ЗарегистрироватьФормулу(Настройки);
	
	ЗаполнитьИРасшифроватьПоказатели(Показатели, мДанныеОтчета.ДанныеКС.ДанныеР06);
	
	РасчетнаяСумма = Макс(Показатели.Р06С060.Итог + Показатели.Р06С090.Итог + Показатели.Р06С150.Итог - 
		Показатели.Р06С050.Итог - Показатели.Р06С100.Итог - Показатели.Р06С130.Итог, 0);
	Настройки.ЭтоОшибка = НЕ Показатели.Р06С170.Значение = РасчетнаяСумма;
	Настройки.Расшифровка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки,
		Показатели.Р06С170.Значение, Показатели.Р06С060.Итог, Показатели.Р06С090.Итог, Показатели.Р06С150.Итог, 
		Показатели.Р06С050.Итог, Показатели.Р06С100.Итог, Показатели.Р06С130.Итог, РасчетнаяСумма);
		
	ДополнитьСтруктуруОшибок(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

#КонецОбласти

#Область КС_ФормированиеКонтекста

&НаСервере
Процедура СформироватьДанныеКонтрольныхСоотношений()

#Область ФормированиеДанныхОдностраничныхРазделов

	СтруктураОдностраничныхРазделов = Новый Структура;
	СтруктураОдностраничныхРазделов.Вставить("ДанныеР01", "ПолеТабличногоДокументаРаздел1");
	СтруктураОдностраничныхРазделов.Вставить("ДанныеР03", "ПолеТабличногоДокументаРаздел3");
	СтруктураОдностраничныхРазделов.Вставить("ДанныеР32", "ПолеТабличногоДокументаРаздел3_Прил2");
	СтруктураОдностраничныхРазделов.Вставить("ДанныеР04", "ПолеТабличногоДокументаРаздел4");
	СтруктураОдностраничныхРазделов.Вставить("ДанныеР06", "ПолеТабличногоДокументаРаздел6");
	СтруктураОдностраничныхРазделов.Вставить("ДанныеР07", "ПолеТабличногоДокументаРаздел7");
	СтруктураОдностраничныхРазделов.Вставить("ДанныеР00", "ПолеТабличногоДокументаТитульный");

	Для каждого Элемент Из СтруктураОдностраничныхРазделов Цикл
		ДанныеРаздела = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(мДанныеОтчета[Элемент.Значение]);
		ДанныеРаздела.Вставить("Страница", "1");
		мДанныеОтчета.ДанныеКС.Вставить(Элемент.Ключ, ДанныеРаздела);
	КонецЦикла;

#КонецОбласти

#Область ФормированиеДанныхМногостраничныхРазделов

	СтруктураМногостраничныхРазделов = Новый Структура;
	СтруктураМногостраничныхРазделов.Вставить("ДанныеР02", "ТаблицаСтраницыРаздела2");
	СтруктураМногостраничныхРазделов.Вставить("ДанныеР31", "ТаблицаСтраницыРаздела3_Прил1");
	СтруктураМногостраничныхРазделов.Вставить("ДанныеР05", "ТаблицаСтраницыРаздела5");

	Для каждого Элемент Из СтруктураМногостраничныхРазделов Цикл
		ДанныеРаздела = РеквизитФормыВЗначение(Элемент.Значение, Тип("ТаблицаЗначений"));
		
		МассивДанных = Новый Массив;
		Для каждого СтрокаТаблицы Из ДанныеРаздела Цикл
			Страница = ДанныеРаздела.Индекс(СтрокаТаблицы) + 1;
			Если НЕ СтрокаТаблицы.Данные.Количество() = 0 Тогда
				ДанныеСтраницы = ОбщегоНазначенияКлиентСервер.СкопироватьСписокЗначений(СтрокаТаблицы.Данные)[0].Значение;
				ДанныеСтраницы.Вставить("Страница", Страница);
				МассивДанных.Добавить(ДанныеСтраницы);
			КонецЕсли;
		КонецЦикла;
		
		мДанныеОтчета.ДанныеКС.Вставить(Элемент.Ключ, МассивДанных);
	КонецЦикла;

#КонецОбласти

#Область ФормированиеДанныхПоставляемыхРазделов

	ДанныеР08	= Новый Структура("Страница");
	ДанныеР81	= Новый Структура("Страница");
	ДанныеР09	= Новый Структура("Страница");
	ДанныеР91	= Новый Структура("Страница");
	ДанныеР12	= Новый Структура("Страница");
	
	Отчет = СтруктураРеквизитовФормы.мСохраненныйДок;
	СоответствиеИмен = СформироватьСоответствиеИмен();
	мДанныеОтчета.ДанныеКС.Вставить("СоответствиеИмен", СоответствиеИмен);
	
	ИтогиР08	= РегламентированнаяОтчетность.ИтогиРазделаДекларацииНДС(Отчет, "Раздел8");
	ИтогиР81	= РегламентированнаяОтчетность.ИтогиРазделаДекларацииНДС(Отчет, "Раздел8_Прил1");
	ИтогиР09	= РегламентированнаяОтчетность.ИтогиРазделаДекларацииНДС(Отчет, "Раздел9");
	ИтогиР91	= РегламентированнаяОтчетность.ИтогиРазделаДекларацииНДС(Отчет, "Раздел9_Прил1");
	
	Разделы8_12	= СтраницыРазделов8_12();
	ТаблицаР08	= ПолучитьТаблицуРаздела(Разделы8_12.СтраницыРаздел8		, "Раздел8");
	ТаблицаР81	= ПолучитьТаблицуРаздела(Разделы8_12.СтраницыРаздел8_Прил1	, "Раздел8_Прил1");
	ТаблицаР09	= ПолучитьТаблицуРаздела(Разделы8_12.СтраницыРаздел9		, "Раздел9");
	ТаблицаР91	= ПолучитьТаблицуРаздела(Разделы8_12.СтраницыРаздел9_Прил1	, "Раздел9_Прил1");
	ТаблицаР12	= ПолучитьТаблицуРаздела(Разделы8_12.СтраницыРаздел12		, "Раздел12");
	
	ТаблицаР08К06 = ПолучитьТаблицуПоКодуОперации(ТаблицаР08, "06");
	ТаблицаР08К19 = ПолучитьТаблицуПоКодуОперации(ТаблицаР08, "19");
	ТаблицаР08К20 = ПолучитьТаблицуПоКодуОперации(ТаблицаР08, "20");
	ТаблицаР08К41 = ПолучитьТаблицуПоКодуОперации(ТаблицаР08, "41");
	ТаблицаР08К43 = ПолучитьТаблицуПоКодуОперации(ТаблицаР08, "43");
	ТаблицаР08К44 = ПолучитьТаблицуПоКодуОперации(ТаблицаР08, "44");
	ТаблицаР81К06 = ПолучитьТаблицуПоКодуОперации(ТаблицаР81, "06");
	ТаблицаР81К19 = ПолучитьТаблицуПоКодуОперации(ТаблицаР81, "19");
	ТаблицаР81К20 = ПолучитьТаблицуПоКодуОперации(ТаблицаР81, "20");
	ТаблицаР81К41 = ПолучитьТаблицуПоКодуОперации(ТаблицаР81, "41");
	ТаблицаР81К43 = ПолучитьТаблицуПоКодуОперации(ТаблицаР81, "43");
	ТаблицаР81К44 = ПолучитьТаблицуПоКодуОперации(ТаблицаР81, "44");
	ТаблицаР09К06 = ПолучитьТаблицуПоКодуОперации(ТаблицаР09, "06");
	ТаблицаР09К41 = ПолучитьТаблицуПоКодуОперации(ТаблицаР09, "41");
	ТаблицаР09К43 = ПолучитьТаблицуПоКодуОперации(ТаблицаР09, "43");
	ТаблицаР09К44 = ПолучитьТаблицуПоКодуОперации(ТаблицаР09, "44");
	ТаблицаР91К06 = ПолучитьТаблицуПоКодуОперации(ТаблицаР91, "06");
	ТаблицаР91К41 = ПолучитьТаблицуПоКодуОперации(ТаблицаР91, "41");
	ТаблицаР91К43 = ПолучитьТаблицуПоКодуОперации(ТаблицаР91, "43");
	ТаблицаР91К44 = ПолучитьТаблицуПоКодуОперации(ТаблицаР91, "44");
	
	ЗаполнитьДанныеРаздела(ИтогиР08			, ДанныеР08, "Р08С190");
	ЗаполнитьДанныеРаздела(ТаблицаР08		, ДанныеР08, "Р08С170, Р08С180");
	ЗаполнитьДанныеРаздела(ТаблицаР08К06	, ДанныеР08, "Р08С180К06");
	ЗаполнитьДанныеРаздела(ТаблицаР08К19	, ДанныеР08, "Р08С180К19");
	ЗаполнитьДанныеРаздела(ТаблицаР08К20	, ДанныеР08, "Р08С180К20");
	ЗаполнитьДанныеРаздела(ТаблицаР08К41	, ДанныеР08, "Р08С180К41");
	ЗаполнитьДанныеРаздела(ТаблицаР08К43	, ДанныеР08, "Р08С180К43");
	ЗаполнитьДанныеРаздела(ТаблицаР08К44	, ДанныеР08, "Р08С180К44");
	
	ЗаполнитьДанныеРаздела(ИтогиР81			, ДанныеР81, "Р81С005, Р81С190");
	ЗаполнитьДанныеРаздела(ТаблицаР81		, ДанныеР81, "Р81С170, Р81С180");
	ЗаполнитьДанныеРаздела(ТаблицаР81К06	, ДанныеР81, "Р81С180К06");
	ЗаполнитьДанныеРаздела(ТаблицаР81К19	, ДанныеР81, "Р81С180К19");
	ЗаполнитьДанныеРаздела(ТаблицаР81К20	, ДанныеР81, "Р81С180К20");
	ЗаполнитьДанныеРаздела(ТаблицаР81К41	, ДанныеР81, "Р81С180К41");
	ЗаполнитьДанныеРаздела(ТаблицаР81К43	, ДанныеР81, "Р81С180К43");
	ЗаполнитьДанныеРаздела(ТаблицаР81К44	, ДанныеР81, "Р81С180К44");
	
	ЗаполнитьДанныеРаздела(ИтогиР09			, ДанныеР09, "Р09С230, Р09С235, Р09С240, Р09С250, Р09С260, Р09С265, Р09С270");
	ЗаполнитьДанныеРаздела(ИтогиР09			, ДанныеР09, "Р09С280");
	ЗаполнитьДанныеРаздела(ТаблицаР09		, ДанныеР09, "Р09С160, Р09С170, Р09С175, Р09С180, Р09С190, Р09С200, Р09С205");
	ЗаполнитьДанныеРаздела(ТаблицаР09		, ДанныеР09, "Р09С210, Р09С220");
	ЗаполнитьДанныеРаздела(ТаблицаР09К06	, ДанныеР09, "Р09С200К06, Р09С205К06, Р09С210К06");
	ЗаполнитьДанныеРаздела(ТаблицаР09К41	, ДанныеР09, "Р09С200К41, Р09С205К41, Р09С210К41");
	ЗаполнитьДанныеРаздела(ТаблицаР09К43	, ДанныеР09, "Р09С200К43, Р09С205К43, Р09С210К43");
	ЗаполнитьДанныеРаздела(ТаблицаР09К44	, ДанныеР09, "Р09С200К44, Р09С205К44, Р09С210К44");
	
	ЗаполнитьДанныеРаздела(ИтогиР91			, ДанныеР91, "Р91С020, Р91С025, Р91С030, Р91С040, Р91С050, Р91С055, Р91С060");
	ЗаполнитьДанныеРаздела(ИтогиР91			, ДанныеР91, "Р91С070, Р91С310, Р91С315, Р91С320, Р91С330, Р91С340, Р91С345");
	ЗаполнитьДанныеРаздела(ИтогиР91			, ДанныеР91, "Р91С350, Р91С360");
	ЗаполнитьДанныеРаздела(ТаблицаР91		, ДанныеР91, "Р91С240, Р91С250, Р91С255, Р91С260, Р91С270, Р91С280, Р91С285");
	ЗаполнитьДанныеРаздела(ТаблицаР91		, ДанныеР91, "Р91С290, Р91С300");
	ЗаполнитьДанныеРаздела(ТаблицаР91К06	, ДанныеР91, "Р91С280К06, Р91С285К06, Р91С290К06");
	ЗаполнитьДанныеРаздела(ТаблицаР91К41	, ДанныеР91, "Р91С280К41, Р91С285К41, Р91С290К41");
	ЗаполнитьДанныеРаздела(ТаблицаР91К43	, ДанныеР91, "Р91С280К43, Р91С285К43, Р91С290К43");
	ЗаполнитьДанныеРаздела(ТаблицаР91К44	, ДанныеР91, "Р91С280К44, Р91С285К44, Р91С290К44");
	
	ЗаполнитьДанныеРаздела(ТаблицаР12		, ДанныеР12, "Р12С060, Р12С070, Р12С080");
	
	мДанныеОтчета.ДанныеКС.Вставить("ДанныеР08", ДанныеР08);
	мДанныеОтчета.ДанныеКС.Вставить("ДанныеР81", ДанныеР81);
	мДанныеОтчета.ДанныеКС.Вставить("ДанныеР09", ДанныеР09);
	мДанныеОтчета.ДанныеКС.Вставить("ДанныеР91", ДанныеР91);
	мДанныеОтчета.ДанныеКС.Вставить("ДанныеР12", ДанныеР12);

#КонецОбласти

#Область ФормированиеПрочихДанных
	
	ПредставлениеРазделов = Новый Структура();
	
	ПредставлениеРазделов.Вставить("Р01", "Раздела 1");
	ПредставлениеРазделов.Вставить("Р02", "Раздела 2");
	ПредставлениеРазделов.Вставить("Р03", "Раздела 3");
	ПредставлениеРазделов.Вставить("Р31", "Приложения 1 к Разделу 3");
	ПредставлениеРазделов.Вставить("Р32", "Приложения 2 к Разделу 3");
	ПредставлениеРазделов.Вставить("Р04", "Раздела 4");
	ПредставлениеРазделов.Вставить("Р05", "Раздела 5");
	ПредставлениеРазделов.Вставить("Р06", "Раздела 6");
	ПредставлениеРазделов.Вставить("Р07", "Раздела 7");
	ПредставлениеРазделов.Вставить("Р08", "Раздела 8");
	ПредставлениеРазделов.Вставить("Р81", "Приложения 1 к Разделу 8");
	ПредставлениеРазделов.Вставить("Р09", "Раздела 9");
	ПредставлениеРазделов.Вставить("Р91", "Приложения 1 к Разделу 9");
	ПредставлениеРазделов.Вставить("Р10", "Раздела 10");
	ПредставлениеРазделов.Вставить("Р11", "Раздела 11");
	ПредставлениеРазделов.Вставить("Р12", "Раздела 12");
	
	мДанныеОтчета.ДанныеКС.Вставить("ПредставлениеРазделов", ПредставлениеРазделов);
	
	РазделыПоказателей = Новый Структура();
	
	РазделыПоказателей.Вставить("Р01", "Раздел1");
	РазделыПоказателей.Вставить("Р02", "Раздел2");
	РазделыПоказателей.Вставить("Р03", "Раздел3");
	РазделыПоказателей.Вставить("Р31", "Раздел3_Прил1");
	РазделыПоказателей.Вставить("Р32", "Раздел3_Прил2");
	РазделыПоказателей.Вставить("Р04", "Раздел4");
	РазделыПоказателей.Вставить("Р05", "Раздел5");
	РазделыПоказателей.Вставить("Р06", "Раздел6");
	РазделыПоказателей.Вставить("Р07", "Раздел7");
	РазделыПоказателей.Вставить("Р08", "Раздел8");
	РазделыПоказателей.Вставить("Р81", "Раздел8_Прил1");
	РазделыПоказателей.Вставить("Р09", "Раздел9");
	РазделыПоказателей.Вставить("Р91", "Раздел9_Прил1");
	РазделыПоказателей.Вставить("Р10", "Раздел10");
	РазделыПоказателей.Вставить("Р11", "Раздел11");
	РазделыПоказателей.Вставить("Р12", "Раздел12");
	
	мДанныеОтчета.ДанныеКС.Вставить("РазделыПоказателей", РазделыПоказателей);
	
	МногостраничныеРазделы = Новый Массив;
	МногостраничныеРазделы.Добавить("Р02");
	МногостраничныеРазделы.Добавить("Р31");
	МногостраничныеРазделы.Добавить("Р05");
	
	мДанныеОтчета.ДанныеКС.Вставить("МногостраничныеРазделы", МногостраничныеРазделы);
	
	ЦелочисленныеРазделы = Новый Массив;
	ЦелочисленныеРазделы.Добавить("Р01");
	ЦелочисленныеРазделы.Добавить("Р02");
	ЦелочисленныеРазделы.Добавить("Р03");
	ЦелочисленныеРазделы.Добавить("Р31");
	ЦелочисленныеРазделы.Добавить("Р32");
	ЦелочисленныеРазделы.Добавить("Р04");
	ЦелочисленныеРазделы.Добавить("Р05");
	ЦелочисленныеРазделы.Добавить("Р06");
	ЦелочисленныеРазделы.Добавить("Р07");
	
	мДанныеОтчета.ДанныеКС.Вставить("ЦелочисленныеРазделы", ЦелочисленныеРазделы);
	
	МассивПолейИсключений = Новый Массив;
	МассивПолейИсключений.Добавить("П000100001003");
	МассивПолейИсключений.Добавить("П000200005003");
	МассивПолейИсключений.Добавить("Страница");
	
	мДанныеОтчета.ДанныеКС.Вставить("МассивПолейИсключений", МассивПолейИсключений);
	
	МассивПолейКБК = Новый Массив;
	МассивПолейКБК.Добавить("П000100002003");
	МассивПолейКБК.Добавить("П000200004003");
	
	ТаблицаСписков = РеквизитФормыВЗначение("СвойстваПоказателей", Тип("ТаблицаЗначений"));
	СоответствиеСписков = Новый Соответствие;
	
	Для каждого СтрокаТЗ Из ТаблицаСписков Цикл
		Если НЕ МассивПолейКБК.Найти(СтрокаТЗ.Показатель) = Неопределено Тогда
			СоответствиеЗначений = Новый Соответствие;
			Для каждого СтрокаЗначения Из СтрокаТЗ.ТаблицаЗначений Цикл
				Если НЕ ЗначениеЗаполнено(СтрокаЗначения.Код) Тогда
					Продолжить;
				КонецЕсли;
				СоответствиеЗначений.Вставить(СтрокаЗначения.Код, 1);
			КонецЦикла;
			СоответствиеСписков.Вставить(СтрокаТЗ.Показатель, СоответствиеЗначений);
		КонецЕсли;
	КонецЦикла;
	
	мДанныеОтчета.ДанныеКС.Вставить("СоответствиеСписков", СоответствиеСписков);
	
#КонецОбласти

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеРаздела(Источник, СтруктураДанных, Показатели)
	
	МассивПоказателей = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Показатели, ", ");
	
	Если ТипЗнч(Источник) = Тип("Структура") Тогда
		Для каждого Показатель Из МассивПоказателей Цикл
			СинонимИмени = мДанныеОтчета.ДанныеКС.СоответствиеИмен.Получить(Показатель);
			Если Источник.Свойство(СинонимИмени) Тогда
				СтруктураДанных.Вставить(Показатель, Источник[СинонимИмени]);
			Иначе
				СтруктураДанных.Вставить(Показатель, 0);
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(Источник) = Тип("ТаблицаЗначений") Тогда
		Для каждого Показатель Из МассивПоказателей Цикл
			СинонимИмени = мДанныеОтчета.ДанныеКС.СоответствиеИмен.Получить(Лев(Показатель, 7));
			Если НЕ Источник.Колонки.Найти(СинонимИмени) = Неопределено Тогда
				СтруктураДанных.Вставить(Показатель, Источник.Итог(СинонимИмени));
			Иначе
				СтруктураДанных.Вставить(Показатель, 0);
			КонецЕсли;
		КонецЦикла;
		
	Иначе
		Для каждого Показатель Из МассивПоказателей Цикл
			СтруктураДанных.Вставить(Показатель, 0);
		КонецЦикла;
	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция СформироватьСоответствиеИмен()
	
	СоответствиеИмен = Новый Соответствие;
	
	// Раздел 8
	СоответствиеИмен.Вставить("Р08С170", "СтоимПокупВ");
	СоответствиеИмен.Вставить("Р08С180", "СумНДСВыч");
	СоответствиеИмен.Вставить("Р08С190", "СумНДСВсКПк");
	
	// Приложение 1 к Разделу 8
	СоответствиеИмен.Вставить("Р81С005", "СумНДСИтКПк");
	СоответствиеИмен.Вставить("Р81С170", "СтоимПокупВ");
	СоответствиеИмен.Вставить("Р81С180", "СумНДС");
	СоответствиеИмен.Вставить("Р81С190", "СумНДСИтП1Р8");
	
	// Раздел 9
	СоответствиеИмен.Вставить("Р09С160", "СтоимПродСФ");
	СоответствиеИмен.Вставить("Р09С170", "СтоимПродСФ20");
	СоответствиеИмен.Вставить("Р09С175", "СтоимПродСФ18");
	СоответствиеИмен.Вставить("Р09С180", "СтоимПродСФ10");
	СоответствиеИмен.Вставить("Р09С190", "СтоимПродСФ0");
	СоответствиеИмен.Вставить("Р09С200", "СумНДССФ20");
	СоответствиеИмен.Вставить("Р09С205", "СумНДССФ18");
	СоответствиеИмен.Вставить("Р09С210", "СумНДССФ10");
	СоответствиеИмен.Вставить("Р09С220", "СтоимПродОсв");
	СоответствиеИмен.Вставить("Р09С230", "СтПродБезНДС20");
	СоответствиеИмен.Вставить("Р09С235", "СтПродБезНДС18");
	СоответствиеИмен.Вставить("Р09С240", "СтПродБезНДС10");
	СоответствиеИмен.Вставить("Р09С250", "СтПродБезНДС0");
	СоответствиеИмен.Вставить("Р09С260", "СумНДСВсКПр20");
	СоответствиеИмен.Вставить("Р09С265", "СумНДСВсКПр18");
	СоответствиеИмен.Вставить("Р09С270", "СумНДСВсКПр10");
	СоответствиеИмен.Вставить("Р09С280", "СтПродОсвВсКПр");
	
	// Приложение 1 к Разделу 9
	СоответствиеИмен.Вставить("Р91С020", "ИтСтПродКПр20");
	СоответствиеИмен.Вставить("Р91С025", "ИтСтПродКПр18");
	СоответствиеИмен.Вставить("Р91С030", "ИтСтПродКПр10");
	СоответствиеИмен.Вставить("Р91С040", "ИтСтПродКПр0");
	СоответствиеИмен.Вставить("Р91С050", "СумНДСИтКПр20");
	СоответствиеИмен.Вставить("Р91С055", "СумНДСИтКПр18");
	СоответствиеИмен.Вставить("Р91С060", "СумНДСИтКПр10");
	СоответствиеИмен.Вставить("Р91С070", "ИтСтПродОсвКПр");
	СоответствиеИмен.Вставить("Р91С240", "СтоимПродСФ");
	СоответствиеИмен.Вставить("Р91С250", "СтоимПродСФ20");
	СоответствиеИмен.Вставить("Р91С255", "СтоимПродСФ18");
	СоответствиеИмен.Вставить("Р91С260", "СтоимПродСФ10");
	СоответствиеИмен.Вставить("Р91С270", "СтоимПродСФ0");
	СоответствиеИмен.Вставить("Р91С280", "СумНДССФ20");
	СоответствиеИмен.Вставить("Р91С285", "СумНДССФ18");
	СоответствиеИмен.Вставить("Р91С290", "СумНДССФ10");
	СоответствиеИмен.Вставить("Р91С300", "СтоимПродОсв");
	СоответствиеИмен.Вставить("Р91С310", "СтПродВсП1Р9_20");
	СоответствиеИмен.Вставить("Р91С315", "СтПродВсП1Р9_18");
	СоответствиеИмен.Вставить("Р91С320", "СтПродВсП1Р9_10");
	СоответствиеИмен.Вставить("Р91С330", "СтПродВсП1Р9_0");
	СоответствиеИмен.Вставить("Р91С340", "СумНДСВсП1Р9_20");
	СоответствиеИмен.Вставить("Р91С345", "СумНДСВсП1Р9_18");
	СоответствиеИмен.Вставить("Р91С350", "СумНДСВсП1Р9_10");
	СоответствиеИмен.Вставить("Р91С360", "СтПродОсвП1Р9Вс");
	СоответствиеИмен.Вставить("Р12С060", "СтоимТовБНалВс");
	СоответствиеИмен.Вставить("Р12С070", "СумНалПокуп");
	СоответствиеИмен.Вставить("Р12С080", "СтоимТовСНалВс");
	
	Возврат СоответствиеИмен;
	
КонецФункции

&НаСервере
Функция ПолучитьТаблицуРаздела(ТаблицаРаздела, ИмяСтраницы)
	
	ТаблицаРезультат = Неопределено;
	
	Если ТаблицаРаздела.Количество() = 0 Тогда
		Возврат ТаблицаРезультат;
	КонецЕсли; 
		
	Для Каждого ЧастьРаздела Из ТаблицаРаздела Цикл
		
		СтрокиСегментаРаздела = РегламентированнаяОтчетность.СегментДанныхРазделаДекларацииНДС(
			СтруктураРеквизитовФормы.мСохраненныйДок, ИмяСтраницы, ЧастьРаздела.НомерПервойСтроки);
			
		Если СтрокиСегментаРаздела = Неопределено Тогда
			Продолжить;
		КонецЕсли;
			
		Если ТаблицаРезультат = Неопределено Тогда
			ТаблицаРезультат = СтрокиСегментаРаздела.СкопироватьКолонки();
		КонецЕсли;
		
		Для Каждого СтрокаДанных ИЗ СтрокиСегментаРаздела Цикл
			ЗаполнитьЗначенияСвойств(ТаблицаРезультат.Добавить(), СтрокаДанных);		
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ТаблицаРезультат;
	
КонецФункции

&НаСервере
Функция ПолучитьТаблицуПоКодуОперации(ТаблицаДанных, КодОперации);
	
	Результат = Новый ТаблицаЗначений;
	
	Если ТаблицаДанных = Неопределено ИЛИ НЕ ТипЗнч(ТаблицаДанных) = Тип("ТаблицаЗначений") Тогда
		Возврат Результат;
	КонецЕсли;
	
	МассивНайденныхСтрок = Новый Массив;
	
	Для Каждого СтрокаПоказателей Из ТаблицаДанных Цикл
		Если ТипЗнч(СтрокаПоказателей.КодВидОпер) = Тип("Массив") 
			И НЕ СтрокаПоказателей.КодВидОпер.Найти(КодОперации) = Неопределено Тогда
			МассивНайденныхСтрок.Добавить(СтрокаПоказателей);
		КонецЕсли;
	КонецЦикла;
	
	Если МассивНайденныхСтрок.Количество() > 0 Тогда
		Возврат ТаблицаДанных.Скопировать(МассивНайденныхСтрок);
	Иначе
		Возврат Результат;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область КС_Сервис

&НаСервере
Процедура СформироватьПоказатели(Показатели, ИменаПоказателей)
	
	Показатели = ?(Показатели = Неопределено, Новый Структура, Показатели);
	
	Для каждого Элемент Из ИменаПоказателей Цикл
		Показатели.Вставить(Элемент.Ключ, Новый Структура());
		
		МассивПредставления	= Новый Массив;
		ПодстрокаРаздела	= "";
		ПодстрокаСтраницы	= "";
		
		ИндексРаздела		= Лев(Элемент.Ключ, 3);
		ПодстрокаСтроки		= Сред(Элемент.Ключ, 5, 3);
		ПодстрокаДополнения	= Сред(Элемент.Ключ, 8, 1);
		мДанныеОтчета.ДанныеКС.ПредставлениеРазделов.Свойство(ИндексРаздела, ПодстрокаРаздела);
		мДанныеОтчета.ДанныеКС.РазделыПоказателей.Свойство(ИндексРаздела, ПодстрокаСтраницы);
		
		Если ПодстрокаДополнения = "Г" Тогда
			МассивПредставления.Добавить("Графа " + Сред(Элемент.Ключ, 9, 1));
		КонецЕсли;
		МассивПредставления.Добавить("Строка " + ПодстрокаСтроки);
		МассивПредставления.Добавить(ПодстрокаРаздела);
		Если ПодстрокаДополнения = "К" Тогда
			МассивПредставления.Добавить("по коду операции " + Сред(Элемент.Ключ, 9, 2));
		КонецЕсли;
		Представление		= СтрСоединить(МассивПредставления, " ");
		
		Многострочный		= СтрДлина(Элемент.Значение) = 14;
		Многостраничный		= НЕ мДанныеОтчета.ДанныеКС.МногостраничныеРазделы.Найти(ИндексРаздела) = Неопределено;
		Округление			= НЕ мДанныеОтчета.ДанныеКС.ЦелочисленныеРазделы.Найти(ИндексРаздела) = Неопределено;
		
		// постоянные данные
		Показатели[Элемент.Ключ].Вставить("Раздел"			, ИндексРаздела);
		Показатели[Элемент.Ключ].Вставить("ИмяПоказателя"	, ?(ЗначениеЗаполнено(Элемент.Значение), 
			Элемент.Значение, Элемент.Ключ));
		Показатели[Элемент.Ключ].Вставить("Представление"	, Представление);
		Показатели[Элемент.Ключ].Вставить("ИмяСтраницы"		, ПодстрокаСтраницы);
		
		// переменные данные
		Показатели[Элемент.Ключ].Вставить("Отчет");
		Показатели[Элемент.Ключ].Вставить("Страница"		, "");
		Показатели[Элемент.Ключ].Вставить("Значение");
		Показатели[Элемент.Ключ].Вставить("Итог"			, 0);
		Показатели[Элемент.Ключ].Вставить("МассивЗначений"	, Новый Массив);
		
		// сервисные данные
		Показатели[Элемент.Ключ].Вставить("Многостраничный"	, Многостраничный);
		Показатели[Элемент.Ключ].Вставить("Многострочный"	, Многострочный);
		Показатели[Элемент.Ключ].Вставить("Округление"		, Округление);
		Показатели[Элемент.Ключ].Вставить("Синоним"			, Элемент.Ключ);
		Показатели[Элемент.Ключ].Вставить("Дополнение"		, "");
		Показатели[Элемент.Ключ].Вставить("Расшифровывать"	, Истина);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура РасшифроватьПоказатель(Показатель)
		
	НоваяСтрока	= СписокРасшифровкиПоказателей.Добавить();
	НоваяСтрока.Номер					= СчетчикФормулДляРасшифровок;
	
	НоваяСтрока.ИмяПоказателя			= Показатель.ИмяПоказателя;
	НоваяСтрока.ПредставлениеПоказателя = ?(ЗначениеЗаполнено(Показатель.Дополнение), 
	Показатель.Представление + ", (" + Показатель.Дополнение + ")", Показатель.Представление);
	НоваяСтрока.ИмяСтраницы				= Показатель.ИмяСтраницы;
	
	НоваяСтрока.СсылкаНаДокументРО		= ?(ЗначениеЗаполнено(Показатель.Отчет), 
		Показатель.Отчет, СтруктураРеквизитовФормы.мСохраненныйДок);
	НоваяСтрока.СсылкаНаДокументРО		= ?(Лев(Показатель.ИмяПоказателя, 7) = Лев(Показатель.Синоним, 7), 
		Неопределено, НоваяСтрока.СсылкаНаДокументРО);
	НоваяСтрока.Страница				= Показатель.Страница;
	НоваяСтрока.ЗначениеПоказателя		= Показатель.Значение;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьИРасшифроватьПоказатель(Показатель, Источник)
	
	Перем ЗначениеВИсточнике;
	
	Если Источник.Свойство(Показатель.ИмяПоказателя, ЗначениеВИсточнике) Тогда
		Показатель.Страница = Источник.Страница;
		
		Если ТипЗнч(ЗначениеВИсточнике) = Тип("Число") И Показатель.Округление Тогда
			Показатель.Значение = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, 
				ЗначениеВИсточнике);
			Показатель.Итог = Показатель.Итог + Показатель.Значение;
		ИначеЕсли ТипЗнч(ЗначениеВИсточнике) = Тип("Число") Тогда
			Показатель.Значение = ЗначениеВИсточнике;
			Показатель.Итог = Показатель.Итог + ЗначениеВИсточнике;
		Иначе
			Показатель.Значение = ЗначениеВИсточнике;
			Показатель.Итог = Показатель.Итог + 0;
			Показатель.МассивЗначений.Добавить(ЗначениеВИсточнике);
		КонецЕсли;
		
		Если Показатель.Расшифровывать Тогда
			РасшифроватьПоказатель(Показатель);
			// исключение двойной расшифровки сводных показателей в разделе 5 (стр.080 и 090)
			Если Показатель.Раздел = "Р05" И НЕ Показатель.Многострочный Тогда
				Показатель.Расшифровывать = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьИРасшифроватьПоказатели(Показатели, Источник)
	
	Если ТипЗнч(Источник) = Тип("Массив") Тогда
		Для каждого ЭлементМассива Из Источник Цикл
			ЗаполнитьИРасшифроватьПоказатели(Показатели, ЭлементМассива);
		КонецЦикла;
		Возврат;
	КонецЕсли;
	
	Для каждого Элемент Из Показатели Цикл
		
		Если Элемент.Значение.Многострочный Тогда
			КоличествоСтрок = КоличествоСтрок(Источник, Лев(Элемент.Значение.ИмяПоказателя, 14));
			Если КоличествоСтрок = 0 Тогда
				Продолжить;
			КонецЕсли;
		Иначе
			КоличествоСтрок = 1;
		КонецЕсли;
		
		Для НомерСтроки = 1 По КоличествоСтрок Цикл
			
			Если Элемент.Значение.Многострочный Тогда
				Элемент.Значение.ИмяПоказателя = Лев(Элемент.Значение.ИмяПоказателя, 14) + XMLСтрока(НомерСтроки);
			КонецЕсли;
				
			ЗаполнитьИРасшифроватьПоказатель(Элемент.Значение, Источник);
			
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗарегистрироватьФормулу(Знач Настройки);

	СчетчикФормулДляРасшифровок				= СчетчикФормулДляРасшифровок + 1;
	НовСтр									= СписокРасшифровкиФормулы.Добавить();
	НовСтр.ТекстовоеПредставлениеФормулы	= Настройки.ОписаниеКС;
	НовСтр.Номер							= СчетчикФормулДляРасшифровок;
	
КонецПроцедуры

&НаСервере
Процедура ДополнитьСтруктуруОшибок(Настройки)
	
	Если Настройки.ЭтоОшибка Тогда
		Настройки.КоличествоНайденныхОшибок = Настройки.КоличествоНайденныхОшибок + 1;
	Иначе
		Настройки.КоличествоНайденныхБезОшибок = Настройки.КоличествоНайденныхБезОшибок + 1;
	КонецЕсли;
	
	Счетчик		= XMLСтрока(Настройки.КоличествоНайденныхОшибок + Настройки.КоличествоНайденныхБезОшибок);
	ОписаниеКС	= СформироватьОписаниеКС(Настройки, "ДопСведенияВОписаниеКС");
	ОписаниеКС	= ?(ПустаяСтрока(Настройки.ТекстФормулы), "", Настройки.ТекстФормулы + Символы.ПС) + ОписаниеКС;
	
	Настройки.СтруктураОшибок.Вставить("ТекстовоеПредставлениеФормулы" + Счетчик, ОписаниеКС);
	Настройки.СтруктураОшибок.Вставить("Расшифровка"	+ Счетчик, Настройки.Расшифровка);
	Настройки.СтруктураОшибок.Вставить("ЭтоОшибка"		+ Счетчик, Настройки.ЭтоОшибка);
	Настройки.СтруктураОшибок.Вставить("Нарушение"		+ Счетчик, Настройки.Нарушение);
	Настройки.СтруктураОшибок.Вставить("Описание"		+ Счетчик, Настройки.ОписаниеОшибки);
	Настройки.СтруктураОшибок.Вставить("Комментарий"	+ Счетчик, Настройки.Комментарий);
	
КонецПроцедуры

&НаСервере
Функция СформироватьОписаниеКС(Знач Настройки, ЗначениеСвойства)
	
	Если Настройки[ЗначениеСвойства] Тогда
		Если ЗначениеЗаполнено(Настройки.ДопСведения) Тогда
				
			Возврат Настройки.ОписаниеКС + " (" + Настройки.ДопСведения + ")"; 
			
		КонецЕсли; 
	КонецЕсли;
	
	Возврат Настройки.ОписаниеКС;
	
КонецФункции

&НаСервере
Функция ОбработатьНастройки(Знач Настройки = Неопределено, 
	Знач ИзменяемыеСвойства 	= Неопределено, 
	Знач СтруктураРезультата 	= Неопределено)
	
	Если Настройки = Неопределено Тогда
		
		Настройки = Новый Структура;
		Настройки.Вставить("ТекстФормулы"			, (НСтр("ru=''")));
		Настройки.Вставить("Нарушение"				, (НСтр("ru=''")));
		Настройки.Вставить("ОписаниеКС"				, (НСтр("ru=''")));
		Настройки.Вставить("ОписаниеОшибки"			, (НСтр("ru=''")));
		Настройки.Вставить("ОписаниеОшибок"			, Новый Массив);
		Настройки.Вставить("Расшифровка"			, (НСтр("ru=''")));
		Настройки.Вставить("ШаблонРасшифровки"		, (НСтр("ru=''")));
		Настройки.Вставить("ДопСведения"			, (НСтр("ru=''")));
		Настройки.Вставить("ШаблонДопСведений"		, (НСтр("ru=''")));
		Настройки.Вставить("Комментарий"			, (НСтр("ru=''")));
		Настройки.Вставить("ДопСведенияПараметры"	, Новый Структура);
		Настройки.Вставить("ЭтоОшибка"				, Ложь);
		Настройки.Вставить("СтруктураОшибок");
		Настройки.Вставить("КоличествоНайденныхОшибок");
		Настройки.Вставить("КоличествоНайденныхБезОшибок");
		Настройки.Вставить("ДопСведенияВОписаниеКС");
		Настройки.Вставить("ДопСведенияВЗаголовокРасшифровки");
		Настройки.Вставить("ДопСведенияВСтрокуРасшифровки");
		Настройки.Вставить("ПредставлениеПоказателя", "");
		Настройки.Вставить("РасшифровкаСписка"		, "");
		
		Если Документирование Тогда
			
			Настройки.Вставить("НомерКС");
			Настройки.Вставить("Раздел");
			Настройки.Вставить("Условие");
			
		КонецЕсли; 
	
	КонецЕсли;
	
	Если Не ИзменяемыеСвойства = Неопределено Тогда
		Для каждого ЭлементКоллекции Из ИзменяемыеСвойства Цикл
			Если Настройки.Свойство(ЭлементКоллекции.Ключ) Тогда
				Настройки.Вставить(ЭлементКоллекции.Ключ, ЭлементКоллекции.Значение);
			КонецЕсли; 
		КонецЦикла;
	КонецЕсли;
	
	Если Документирование Тогда
		СтрокаОписания = ТаблицаОписаний.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаОписания, Настройки);
		СтрокаОписания.ОписаниеКС	= ?(ПустаяСтрока(Настройки.ТекстФормулы), "", Настройки.ТекстФормулы + Символы.ПС) 
			+ Настройки.ОписаниеКС;
		Возврат Настройки;
	КонецЕсли;
	
	Если Не СтруктураРезультата = Неопределено Тогда
		Для каждого ЭлементКоллекции Из СтруктураРезультата Цикл
			Если Настройки.Свойство(ЭлементКоллекции.Ключ) Тогда
				Настройки.Вставить(ЭлементКоллекции.Ключ, ЭлементКоллекции.Значение);
				
			КонецЕсли; 
		КонецЦикла;
	КонецЕсли;
	
	Возврат Настройки;
	
КонецФункции

&НаСервере
Функция ОбработатьРезультат(Знач Настройки, Знач СтруктураРезультата);
	
	ЗаполнитьЗначенияСвойств(СтруктураРезультата, Настройки,
		"КоличествоНайденныхОшибок, КоличествоНайденныхБезОшибок");
	
	Возврат СтруктураРезультата;
	
КонецФункции

&НаСервере
Функция КоличествоСтрок(Источник, ИмяПоказателя)
	
	Количество = 0;
	
	Пока Источник.Свойство(ИмяПоказателя + XMLСтрока(Количество + 1)) Цикл
		Количество = Количество + 1;
	КонецЦикла;
	
	Возврат Количество;
	
КонецФункции

&НаСервере
Функция СуммаПоказателей(Показатели, КодПоказателя = "")
	
	Результат = 0;
	
	Для каждого Показатель Из Показатели Цикл
		Если НЕ ЗначениеЗаполнено(КодПоказателя) Тогда
			Результат = Результат + Показатель.Значение.Значение;
		ИначеЕсли СтрНайти(Показатель.Ключ, КодПоказателя) = 0 Тогда
			Продолжить;
		Иначе
			Результат = Результат + Показатель.Значение.Значение;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция РазделЗаполнен(Раздел, ПроверятьИсключения = Ложь)
	
	Если НЕ ТипЗнч(Раздел) = Тип("Структура") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Для каждого Элемент Из Раздел Цикл
		Если ПроверятьИсключения Тогда
			Если НЕ мДанныеОтчета.ДанныеКС.МассивПолейИсключений.Найти(Элемент.Ключ) = Неопределено Тогда
				Продолжить;
			КонецЕсли; 
		КонецЕсли;
		Если Элемент.Ключ = "Страница" Тогда
			Продолжить;
		КонецЕсли;
		Если ЗначениеЗаполнено(Элемент.Значение) Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла; 
	
	Возврат Ложь;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область ПроверкаКонтрагентов

&НаСервере
Функция ПолучитьРезультатРаботыФоновогоЗадания() Экспорт
	
	Возврат ПроверкаКонтрагентовБРО.ПолучитьРезультатРаботыФоновогоЗадания(ЭтотОбъект);
	
КонецФункции

&НаСервере
Процедура ПроверитьКонтрагентовВОтчете(Знач ДополнительныеПараметры) Экспорт
	
	ПроверкаКонтрагентовБРО.ПроверитьКонтрагентовВОтчете(ЭтотОбъект, ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработатьРезультатПроверкиКонтрагентов()
	
	ПроверкаКонтрагентовБРОКлиент.ОбработатьРезультатПроверкиКонтрагентовВОтчете(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьКонтрагентовВОтчетеКоманда(Команда)
	
	ПроверкаКонтрагентовБРОКлиент.ПроверитьКонтрагентовВОтчетеКоманда(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыИФункцииОтображенияПанелиСРезультатамиПроверки

&НаКлиенте
Процедура ВывестиПанельВыполненияПроверки() Экспорт
	
	Элементы.Проверка.ТекущаяСтраница = Элементы.ПроверкаВПроцессеВыполнения;
	
КонецПроцедуры

&НаКлиенте
Процедура ВывестиРезультатПроверки() Экспорт
	
	Если СтруктураРеквизитовФормы.ОтчетСформированОбработкойКонсолидацияОтчетностиПоНДС Тогда
		ВывестиРезультатПроверкиКонтрагентов();
		Возврат;
	КонецЕсли;
	
	РезультатПроверкиВыгрузки     = РезультатПроверкиВыгрузки();
	РезультатПроверкиКонтрагентов = РезультатПроверкиКонтрагентов();
	
	Если НЕ РезультатПроверкиВыгрузки.ПроверкаВыполнена
	   И НЕ РезультатПроверкиКонтрагентов.ПроверкаВыполнена Тогда
		
		ИзменитьВидимостьГруппы("Проверка", Ложь);
		
		Возврат;
		
	Иначе
		
		ИзменитьВидимостьГруппы("Проверка", Истина);
		
		Если НЕ РезультатПроверкиВыгрузки.ПроверкаВыполнена
		 ИЛИ НЕ РезультатПроверкиКонтрагентов.ПроверкаВыполнена Тогда
			
			ВывестиПанельВыполненияПроверки();
			
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если РезультатПроверкиВыгрузки.КоличествоОбнаруженныхОшибок > 0
		И РезультатПроверкиКонтрагентов.КоличествоОбнаруженныхОшибок > 0 Тогда
		
		ТекстРезультатаПроверкиВыгрузки = ФорматированныйТекстРезультатаПроверки(
		РезультатПроверкиВыгрузки.КоличествоОбнаруженныхОшибок, "ПроверкаВыгрузки");
		
		ТекстРезультатаПроверкиКонтрагентов = ФорматированныйТекстРезультатаПроверки(
		РезультатПроверкиКонтрагентов.КоличествоОбнаруженныхОшибок, "ПроверкаКонтрагентов");
		
		ТекстРезультатаПроверкиКонтрагентов[0] = НСтр("ru=', и '");
		
		ТекстРезультатаПроверки = Новый Массив();
		ТекстРезультатаПроверки.Добавить(ТекстРезультатаПроверкиВыгрузки);
		ТекстРезультатаПроверки.Добавить(ТекстРезультатаПроверкиКонтрагентов);
		
		Элементы.ТекстCРезультатомПроверки.Заголовок = Новый ФорматированнаяСтрока(ТекстРезультатаПроверки);
		
		Элементы.РезультатПроверки.ЦветФона = Новый Цвет(251, 212, 212);
		
	ИначеЕсли РезультатПроверкиВыгрузки.КоличествоОбнаруженныхОшибок = 0
		И РезультатПроверкиКонтрагентов.КоличествоОбнаруженныхОшибок = 0 Тогда
		
		Если РезультатПроверкиКонтрагентов.ОшибкаПодключенияКСервису Тогда
			ПроверкаКонтрагентовОтклонена = ЭтотОбъект.РеквизитыПроверкиКонтрагентов.Свойство("ПроверкаКонтрагентовОтклонена")
				И ЭтотОбъект.РеквизитыПроверкиКонтрагентов.ПроверкаКонтрагентовОтклонена;
			Если ПроверкаКонтрагентовОтклонена Тогда
				Элементы.ТекстCРезультатомПроверки.Заголовок = Новый ФорматированнаяСтрока(НСтр(
				"ru='Нет ошибок, препятствующих отправке декларации. Проверка контрагентов сервисом ФНС отключена.'"));
				Элементы.РезультатПроверки.ЦветФона = Новый Цвет(255, 255, 192);
			Иначе
				Элементы.ТекстCРезультатомПроверки.Заголовок = Новый ФорматированнаяСтрока(НСтр(
				"ru='Нет ошибок, препятствующих отправке декларации. Проверка контрагентов сервисом ФНС не выполнена из-за ошибки подключения к сервису.'"));
				Элементы.РезультатПроверки.ЦветФона = Новый Цвет(255, 255, 192);
			КонецЕсли;
			
		Иначе
			Элементы.ТекстCРезультатомПроверки.Заголовок = Новый ФорматированнаяСтрока(НСтр(
			"ru='Нет ошибок, препятствующих отправке декларации, и ошибок проверки контрагентов сервисом ФНС.'"));
			Элементы.РезультатПроверки.ЦветФона = Новый Цвет(215, 240, 199);
			
		КонецЕсли;
		
	ИначеЕсли РезультатПроверкиВыгрузки.КоличествоОбнаруженныхОшибок = 0
	        И РезультатПроверкиКонтрагентов.КоличествоОбнаруженныхОшибок > 0 Тогда
		ТекстРезультатаПроверкиКонтрагентов = ФорматированныйТекстРезультатаПроверки(
		РезультатПроверкиКонтрагентов.КоличествоОбнаруженныхОшибок, "ПроверкаКонтрагентов");
		
		ТекстРезультатаПроверки = Новый Массив();
		ТекстРезультатаПроверки.Добавить(НСтр("ru='Нет ошибок, препятствующих отправке декларации.'"));
		ТекстРезультатаПроверки.Добавить(ТекстРезультатаПроверкиКонтрагентов);
		
		Элементы.ТекстCРезультатомПроверки.Заголовок = Новый ФорматированнаяСтрока(ТекстРезультатаПроверки);
		
		Элементы.РезультатПроверки.ЦветФона = Новый Цвет(255, 255, 192);
		
	ИначеЕсли РезультатПроверкиВыгрузки.КоличествоОбнаруженныхОшибок = 0
	        И РезультатПроверкиКонтрагентов.КоличествоОбнаруженныхОшибок > 0 Тогда
		ТекстРезультатаПроверкиКонтрагентов = ФорматированныйТекстРезультатаПроверки(
		РезультатПроверкиКонтрагентов.КоличествоОбнаруженныхОшибок, "ПроверкаКонтрагентов");
		
		ТекстРезультатаПроверки = Новый Массив();
		ТекстРезультатаПроверки.Добавить(НСтр("ru='Нет ошибок, препятствующих отправке декларации. '"));
		ТекстРезультатаПроверки.Добавить(ТекстРезультатаПроверкиКонтрагентов);
		
		Элементы.ТекстCРезультатомПроверки.Заголовок = Новый ФорматированнаяСтрока(ТекстРезультатаПроверки);
		
		Элементы.РезультатПроверки.ЦветФона = Новый Цвет(255, 255, 192);
		
	ИначеЕсли РезультатПроверкиВыгрузки.КоличествоОбнаруженныхОшибок > 0
	        И РезультатПроверкиКонтрагентов.КоличествоОбнаруженныхОшибок > 0 Тогда
		ТекстРезультатаПроверкиВыгрузки     = ФорматированныйТекстРезультатаПроверки(
		РезультатПроверкиВыгрузки.КоличествоОбнаруженныхОшибок, "ПроверкаВыгрузки");
		
		ТекстРезультатаПроверкиКонтрагентов = ФорматированныйТекстРезультатаПроверки(
		РезультатПроверкиКонтрагентов.КоличествоОбнаруженныхОшибок, "ПроверкаКонтрагентов");
		
		ТекстРезультатаПроверкиКонтрагентов[0] = НСтр("ru=', и '");
		
		ТекстРезультатаПроверки = Новый Массив();
		ТекстРезультатаПроверки.Добавить(ТекстРезультатаПроверкиВыгрузки);
		ТекстРезультатаПроверки.Добавить(ТекстРезультатаПроверкиКонтрагентов);
		
		Элементы.ТекстCРезультатомПроверки.Заголовок = Новый ФорматированнаяСтрока(ТекстРезультатаПроверки);
		
		Элементы.РезультатПроверки.ЦветФона = Новый Цвет(251, 212, 212);
		
	ИначеЕсли РезультатПроверкиВыгрузки.КоличествоОбнаруженныхОшибок > 0
	        И РезультатПроверкиКонтрагентов.КоличествоОбнаруженныхОшибок = 0 Тогда
		Если РезультатПроверкиКонтрагентов.ОшибкаПодключенияКСервису Тогда
			
			ТекстРезультатаПроверкиВыгрузки = ФорматированныйТекстРезультатаПроверки(
			РезультатПроверкиВыгрузки.КоличествоОбнаруженныхОшибок, "ПроверкаВыгрузки");
			
			ТекстРезультатаПроверки = Новый Массив();
			ТекстРезультатаПроверки.Добавить(ТекстРезультатаПроверкиВыгрузки);
			ПроверкаКонтрагентовОтклонена = ЭтотОбъект.РеквизитыПроверкиКонтрагентов.Свойство("ПроверкаКонтрагентовОтклонена")
				И ЭтотОбъект.РеквизитыПроверкиКонтрагентов.ПроверкаКонтрагентовОтклонена;
			Если ПроверкаКонтрагентовОтклонена Тогда
				ТекстРезультатаПроверки.Добавить(НСтр("ru='. Проверка контрагентов сервисом ФНС отключена.'"));
			Иначе
				ТекстРезультатаПроверки.Добавить(НСтр("ru='. Проверка контрагентов сервисом ФНС не выполнена из-за ошибки подключения к сервису.'"));
			КонецЕсли;
			
			Элементы.ТекстCРезультатомПроверки.Заголовок = Новый ФорматированнаяСтрока(ТекстРезультатаПроверки);
			
		Иначе
			
			ТекстРезультатаПроверкиВыгрузки = ФорматированныйТекстРезультатаПроверки(
			РезультатПроверкиВыгрузки.КоличествоОбнаруженныхОшибок, "ПроверкаВыгрузки");
			
			ТекстРезультатаПроверки = Новый Массив();
			ТекстРезультатаПроверки.Добавить(ТекстРезультатаПроверкиВыгрузки);
			ТекстРезультатаПроверки.Добавить(НСтр("ru='. Нет ошибок проверки контрагентов сервисом ФНС.'"));
			
			Элементы.ТекстCРезультатомПроверки.Заголовок = Новый ФорматированнаяСтрока(ТекстРезультатаПроверки);
			
		КонецЕсли;
		
		Элементы.РезультатПроверки.ЦветФона = Новый Цвет(251, 212, 212);
		
	КонецЕсли;
	
	Элементы.Проверка.ТекущаяСтраница = Элементы.РезультатПроверки;
	
КонецПроцедуры

&НаКлиенте
Процедура ВывестиРезультатПроверкиКонтрагентов()
	
	РезультатПроверкиКонтрагентов = РезультатПроверкиКонтрагентов();
	
	Если РезультатПроверкиКонтрагентов.КоличествоОбнаруженныхОшибок > 0 Тогда
		
		ТекстРезультатаПроверкиКонтрагентов = ФорматированныйТекстРезультатаПроверки(
		РезультатПроверкиКонтрагентов.КоличествоОбнаруженныхОшибок, "ПроверкаКонтрагентов");
		
		ТекстРезультатаПроверки = Новый Массив();
		ТекстРезультатаПроверки.Добавить(ТекстРезультатаПроверкиКонтрагентов);
		
		Элементы.ТекстCРезультатомПроверки.Заголовок = Новый ФорматированнаяСтрока(ТекстРезультатаПроверки);
		
		Элементы.РезультатПроверки.ЦветФона = Новый Цвет(255, 255, 192);
		
	ИначеЕсли РезультатПроверкиКонтрагентов.КоличествоОбнаруженныхОшибок = 0 Тогда
		
		Если РезультатПроверкиКонтрагентов.ОшибкаПодключенияКСервису Тогда
			
			Элементы.ТекстCРезультатомПроверки.Заголовок = Новый ФорматированнаяСтрока(НСтр(
			"ru='Проверка контрагентов сервисом ФНС не выполнена из-за ошибки подключения к сервису.'"));
			
			Элементы.РезультатПроверки.ЦветФона = Новый Цвет(255, 255, 192);
			
		Иначе
			
			Элементы.ТекстCРезультатомПроверки.Заголовок = Новый ФорматированнаяСтрока(НСтр(
			"ru='Нет ошибок проверки контрагентов сервисом ФНС.'"));
			
			Элементы.РезультатПроверки.ЦветФона = Новый Цвет(215, 240, 199);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Элементы.Проверка.ТекущаяСтраница = Элементы.РезультатПроверки;
	
КонецПроцедуры

&НаКлиенте
Функция ПанельСРезультатамиПроверкиОтображена() Экспорт
	
	Возврат Элементы.Проверка.Видимость;
	
КонецФункции

&НаКлиенте
Функция РезультатПроверкиВыгрузки()
	
	РезультатПроверки = Новый Структура;
	РезультатПроверки.Вставить("ПроверкаВыполнена", Ложь);
	РезультатПроверки.Вставить("КоличествоОбнаруженныхОшибок", 0);
	
	Если СтруктураРеквизитовФормы.УспешноеАвтозаполнение = Истина Тогда
		
		Если ЗначениеЗаполнено(СтруктураРеквизитовФормы.АдресХранилищаПроверкиВыгрузки) Тогда
			
			РезультатВыполненияЗадания = ПолучитьИзВременногоХранилища(СтруктураРеквизитовФормы.АдресХранилищаПроверкиВыгрузки);
			
			Если ЗначениеЗаполнено(РезультатВыполненияЗадания) Тогда
				
				РезультатПроверки = Новый Структура;
				РезультатПроверки.Вставить("ПроверкаВыполнена", Истина);
				РезультатПроверки.Вставить("КоличествоОбнаруженныхОшибок", РезультатВыполненияЗадания.КоличествоОшибок);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат РезультатПроверки;
	
КонецФункции

&НаКлиенте
Функция РезультатПроверкиКонтрагентов()
	
	Возврат ПроверкаКонтрагентовБРОКлиентСервер.РезультатПроверкиКонтрагентов(ЭтотОбъект);
	
КонецФункции

&НаКлиенте
Функция ФорматированныйТекстРезультатаПроверки(КолвоОшибок, НаимОперации)
	
	ТекстРезультатаПроверки = Новый Массив();
	
	Если Прав(Строка(КолвоОшибок), 1) = "1"
		И НЕ КолвоОшибок = 11 Тогда
		
		ТекстРезультатаПроверки.Добавить(НСтр("ru='Обнаружена '"));
		
		Если НаимОперации = "ПроверкаВыгрузки" Тогда
			
			ТекстРезультатаПроверки.Добавить(Новый ФорматированнаяСтрока(Строка(КолвоОшибок)
			+ НСтр("ru=' ошибка'"), , , , "ПоказатьОшибкиПроверкиВыгрузки"));
			
			ТекстРезультатаПроверки.Добавить(НСтр("ru=', препятствующая отправке декларации'"));
			
		ИначеЕсли НаимОперации = "ПроверкаКС" Тогда
			
			ТекстРезультатаПроверки.Добавить(Новый ФорматированнаяСтрока(Строка(КолвоОшибок)
			+ НСтр("ru=' ошибка'"), , , , "ПоказатьОшибкиПроверкиКС"));
			
			ТекстРезультатаПроверки.Добавить(НСтр("ru=' в контрольных соотношениях'"));
			
		ИначеЕсли НаимОперации = "ПроверкаКонтрагентов" Тогда
			
			ТекстРезультатаПроверки.Добавить(Новый ФорматированнаяСтрока(Строка(КолвоОшибок)
			+ НСтр("ru=' ошибка'"), , , , "ПоказатьОшибкиПроверкиКонтрагентов"));
			
			ТекстРезультатаПроверки.Добавить(НСтр("ru=' проверки контрагентов сервисом ФНС.'"));
			
		КонецЕсли;
		
	ИначеЕсли (Прав(Строка(КолвоОшибок), 1) = "2"
		ИЛИ Прав(Строка(КолвоОшибок), 1) = "3"
		ИЛИ Прав(Строка(КолвоОшибок), 1) = "4")
		И НЕ КолвоОшибок = 12 И НЕ КолвоОшибок = 13 И НЕ КолвоОшибок = 14 Тогда
		
		ТекстРезультатаПроверки.Добавить(НСтр("ru='Обнаружено '"));
		
		Если НаимОперации = "ПроверкаВыгрузки" Тогда
			
			ТекстРезультатаПроверки.Добавить(Новый ФорматированнаяСтрока(Строка(КолвоОшибок)
			+ НСтр("ru=' ошибки'"), , , , "ПоказатьОшибкиПроверкиВыгрузки"));
			
			ТекстРезультатаПроверки.Добавить(НСтр("ru=', препятствующие отправке декларации'"));
			
		ИначеЕсли НаимОперации = "ПроверкаКС" Тогда
			
			ТекстРезультатаПроверки.Добавить(Новый ФорматированнаяСтрока(Строка(КолвоОшибок)
			+ НСтр("ru=' ошибки'"), , , , "ПоказатьОшибкиПроверкиКС"));
			
			ТекстРезультатаПроверки.Добавить(НСтр("ru=' в контрольных соотношениях'"));
			
		ИначеЕсли НаимОперации = "ПроверкаКонтрагентов" Тогда
			
			ТекстРезультатаПроверки.Добавить(Новый ФорматированнаяСтрока(Строка(КолвоОшибок)
			+ НСтр("ru=' ошибки'"), , , , "ПоказатьОшибкиПроверкиКонтрагентов"));
			
			ТекстРезультатаПроверки.Добавить(НСтр("ru=' проверки контрагентов сервисом ФНС.'"));
			
		КонецЕсли;
		
	Иначе
		
		ТекстРезультатаПроверки.Добавить(НСтр("ru='Обнаружено '"));
		
		Если НаимОперации = "ПроверкаВыгрузки" Тогда
			
			ТекстРезультатаПроверки.Добавить(Новый ФорматированнаяСтрока(Строка(КолвоОшибок)
			+ НСтр("ru=' ошибок'"), , , , "ПоказатьОшибкиПроверкиВыгрузки"));
			
			ТекстРезультатаПроверки.Добавить(НСтр("ru=', препятствующих отправке декларации'"));
			
		ИначеЕсли НаимОперации = "ПроверкаКС" Тогда
			
			ТекстРезультатаПроверки.Добавить(Новый ФорматированнаяСтрока(Строка(КолвоОшибок)
			+ НСтр("ru=' ошибок'"), , , , "ПоказатьОшибкиПроверкиКС"));
			
			ТекстРезультатаПроверки.Добавить(НСтр("ru=' в контрольных соотношениях'"));
			
		ИначеЕсли НаимОперации = "ПроверкаКонтрагентов" Тогда
			
			ТекстРезультатаПроверки.Добавить(Новый ФорматированнаяСтрока(Строка(КолвоОшибок)
			+ НСтр("ru=' ошибок'"), , , , "ПоказатьОшибкиПроверкиКонтрагентов"));
			
			ТекстРезультатаПроверки.Добавить(НСтр("ru=' проверки контрагентов сервисом ФНС.'"));
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ТекстРезультатаПроверки;
	
КонецФункции

&НаКлиенте
Процедура ТекстCРезультатомПроверкиОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "ПоказатьОшибкиПроверкиВыгрузки" Тогда
		
		Если СтруктураРеквизитовФормы.Свойство("АдресХранилищаПроверкиВыгрузки") Тогда
			
			РезультатПроверкиВыгрузки = ПолучитьИзВременногоХранилища(
			СтруктураРеквизитовФормы.АдресХранилищаПроверкиВыгрузки);
			
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("СохраненныйОтчет", СтруктураРеквизитовФормы.мСохраненныйДок);
			ПараметрыФормы.Вставить("ПредставлениеОшибок", РезультатПроверкиВыгрузки.ПредставлениеОшибок);
			ПараметрыФормы.Вставить("НазваниеДекларации", Заголовок);
			
			Если РезультатПроверкиВыгрузки.КоличествоОшибок = 0 Тогда
				ПоказатьПредупреждение( , НСтр("ru='Ошибок не обнаружено!'"));
			Иначе
				ФормаНавигацииПоОшибкам = ПолучитьФорму(
				"Документ.ВыгрузкаРегламентированныхОтчетов.Форма.ФормаСообщенийОбОшибках",
				ПараметрыФормы, ЭтаФорма, Новый УникальныйИдентификатор);
				ФормаНавигацииПоОшибкам.Открыть();
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ПоказатьОшибкиПроверкиКС" Тогда
	
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ПоказатьОшибкиПроверкиКонтрагентов" Тогда
		
		ПроверкаКонтрагентовБРОКлиент.ОткрытьОтчетПоНекорректнымКонтрагентам(ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьВидимостьГруппы(ИмяГруппы, Видимость)
	
	Элементы[ИмяГруппы].Видимость = Видимость;
	
	Для Каждого ЭлементГруппы Из Элементы[ИмяГруппы].ПодчиненныеЭлементы Цикл
		
		ЭлементГруппы.Видимость = Видимость;
		
		Если ТипЗнч(ЭлементГруппы) = Тип("ГруппаФормы") Тогда
			
			ИзменитьВидимостьГруппы(ЭлементГруппы.Имя, Видимость);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Функция ЗаполненоНовымАлгоритмом() Экспорт
	
	Возврат СтруктураРеквизитовФормы.УспешноеАвтозаполнение = Истина;
	
КонецФункции

&НаСервере
Процедура ПроверитьВозможностьВыгрузкиВФоне()
	
	РегламентированныйОтчет = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
	ШаблоныОшибок = Отчеты.РегламентированныйОтчетНДС.ПолучитьМакет("ШаблоныСообщенийОбОшибках2019Кв1");
	АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
	
	ПараметрыФоновогоЗадания = Новый Массив;
	ПараметрыФоновогоЗадания.Добавить(РегламентированныйОтчет);
	ПараметрыФоновогоЗадания.Добавить(ШаблоныОшибок);
	ПараметрыФоновогоЗадания.Добавить(Заголовок);
	ПараметрыФоновогоЗадания.Добавить(АдресХранилища);
	
	НаименованиеЗадания = НСтр("ru = 'Проверка возможности формирования электронного представления'");
	Задание = ФоновыеЗадания.Выполнить(
	"РегламентированнаяОтчетностьПроверкаНДС.ВыявитьОшибкиЗаполненияПрепятствующиеФормированиюЭлектронногоПредставления",
	ПараметрыФоновогоЗадания, , НаименованиеЗадания);
	ИдентификаторЗадания = Задание.УникальныйИдентификатор;
	
	ПараметрыЗаданияПроверкиВыгрузки = Новый Структура;
	ПараметрыЗаданияПроверкиВыгрузки.Вставить("МаксимальныйИнтервал", 20);
	ПараметрыЗаданияПроверкиВыгрузки.Вставить("ТекущийИнтервал", 1);
	ПараметрыЗаданияПроверкиВыгрузки.Вставить("КоэффициентУвеличенияИнтервала", 1.618);
	ПараметрыЗаданияПроверкиВыгрузки.Вставить("ИдентификаторЗадания", ИдентификаторЗадания);
	
	СтруктураРеквизитовФормы.Вставить("АдресХранилищаПроверкиВыгрузки", АдресХранилища);
	СтруктураРеквизитовФормы.Вставить("ПараметрыЗаданияПроверкиВыгрузки", ПараметрыЗаданияПроверкиВыгрузки);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеЗаданияПроверкиВозможностиВыгрузки()
	
	Если СтруктураРеквизитовФормы.Свойство("ПараметрыЗаданияПроверкиВыгрузки") Тогда
		
		СостояниеЗадания
		= СостояниеФоновогоЗадания(СтруктураРеквизитовФормы.ПараметрыЗаданияПроверкиВыгрузки.ИдентификаторЗадания);
		
		Если СостояниеЗадания = "Завершено" Тогда
			
			ВывестиРезультатПроверки();
			
		ИначеЕсли СостояниеЗадания = "Активно" Тогда
			ТекущийИнтервал = СтруктураРеквизитовФормы.ПараметрыЗаданияПроверкиВыгрузки.ТекущийИнтервал;
			МаксимальныйИнтервал = СтруктураРеквизитовФормы.ПараметрыЗаданияПроверкиВыгрузки.МаксимальныйИнтервал;
			КоэффициентУвеличенияИнтервала
			= СтруктураРеквизитовФормы.ПараметрыЗаданияПроверкиВыгрузки.КоэффициентУвеличенияИнтервала;
			
			ИнтервалОжидания = Мин(ТекущийИнтервал * КоэффициентУвеличенияИнтервала, МаксимальныйИнтервал);
			СтруктураРеквизитовФормы.ПараметрыЗаданияПроверкиВыгрузки.ТекущийИнтервал = ИнтервалОжидания;
			
			ПодключитьОбработчикОжидания(
			"Подключаемый_ПроверитьВыполнениеЗаданияПроверкиВозможностиВыгрузки", ИнтервалОжидания, Истина);
		Иначе
			ВызватьИсключение "Ошибка выполнения фонового задания проверки выгрузки";
		КонецЕсли;
	Иначе
		ВызватьИсключение "Ошибка выполнения фонового задания проверки выгрузки";
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СостояниеФоновогоЗадания(ИдентификаторФоновогоЗадания)
	
	Задание = НайтиЗаданиеПоИдентификатору(ИдентификаторФоновогоЗадания);
	
	Если Задание <> Неопределено Тогда
		Если Задание.Состояние = СостояниеФоновогоЗадания.Активно Тогда
			Возврат "Активно";
		ИначеЕсли Задание.Состояние = СостояниеФоновогоЗадания.Завершено Тогда
			Возврат "Завершено";
		ИначеЕсли Задание.Состояние = СостояниеФоновогоЗадания.ЗавершеноАварийно Тогда
			Возврат "ЗавершеноАварийно";
		ИначеЕсли Задание.Состояние = СостояниеФоновогоЗадания.Отменено Тогда
			Возврат "Отменено";
		КонецЕсли;
	КонецЕсли;
	
	Возврат "Неопределено";
	
КонецФункции

&НаСервереБезКонтекста
Функция НайтиЗаданиеПоИдентификатору(Знач ИдентификаторФоновогоЗадания)
	
	Если ТипЗнч(ИдентификаторФоновогоЗадания) = Тип("Строка") Тогда
		ИдентификаторЗадания = Новый УникальныйИдентификатор(ИдентификаторФоновогоЗадания);
	КонецЕсли;
	
	Задание = ФоновыеЗадания.НайтиПоУникальномуИдентификатору(ИдентификаторФоновогоЗадания);
	
	Возврат Задание;
	
КонецФункции

&НаСервере
Процедура ЗаписатьРезультатПроверкиВыгрузки()
	
	ОбъектОтчета = ОбъектОтчета(ЭтаФорма.ИмяФормы);
	
	ОбъектОтчета.ЗаписатьРезультатПроверкиВыгрузки(СтруктураРеквизитовФормы.мВыбраннаяФорма,
												   СтруктураРеквизитовФормы);
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьРезультатПроверкиВыгрузки()
	
	ПараметрыЗаписи = Новый Структура;
	ПараметрыЗаписи.Вставить("РегламентированныйОтчет", СтруктураРеквизитовФормы.мСохраненныйДок);
	ПараметрыЗаписи.Вставить("ВидДополнительногоФайла", "РезультатПроверкиВыгрузки.mxl");
	
	Данные = РегламентированнаяОтчетность.ДанныеРегистраДополнительныхФайлов(ПараметрыЗаписи);
	
	СтруктураРеквизитовФормы.АдресХранилищаПроверкиВыгрузки
	= ПоместитьВоВременноеХранилище(Данные, Новый УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеЭтапаНажатие(Элемент)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("СтатусОтчета", Элементы.НаименованиеЭтапа.Заголовок);
	
	ОписаниеОповещения
	= Новый ОписаниеОповещения("ВыборИзСпискаСтатусаОтчетаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	СтатусыОтчета = Новый СписокЗначений;
	СтатусыОтчета.Добавить("В работе");
	СтатусыОтчета.Добавить("Подготовлено");
	СтатусыОтчета.Добавить("Сдано");
	
	ТекЭлемент = СтатусыОтчета.НайтиПоЗначению(Элементы.НаименованиеЭтапа.Заголовок);
	ИндексТекЭлемента = СтатусыОтчета.Индекс(ТекЭлемент);
	
	ПоказатьВыборИзСписка(ОписаниеОповещения, СтатусыОтчета, Элементы.НаименованиеЭтапа, ИндексТекЭлемента);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборИзСпискаСтатусаОтчетаЗавершение(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	
	Если НЕ ВыбранныйЭлемент = Неопределено Тогда
		
		Элементы.НаименованиеЭтапа.Заголовок = ВыбранныйЭлемент.Значение;
		
		Если ДополнительныеПараметры.СтатусОтчета = "Сдано"
			И Элементы.НаименованиеЭтапа.Заголовок = "Сдано" Тогда
			
			СохранитьНаКлиенте();
			
		Иначе
			
			СохранитьНаКлиенте(, , Истина);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ВыполненоСохранениеФайлаВыгрузки" Тогда
		
		Если НЕ СтруктураРеквизитовФормы.ПодключенДокументооборотСКонтролирующимОрганом
		   И НЕ Элементы.НаименованиеЭтапа.Заголовок = "Сдано" Тогда
			
			ОписаниеОповещения = Новый ОписаниеОповещения("ВопросИзменитьСтатусОтчетаЗавершение", ЭтотОбъект);
			
			ТекстВопроса = НСтр("ru='Декларация выгружена, рекомендуется установить для нее состояние ""Сдано"".
			|Для сданной декларации редактирование запрещено. Состояние можно установить
			|или снять вручную в форме декларации.
			|
			|Установить для декларации состояние ""Сдано""?'");
			
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросИзменитьСтатусОтчетаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		Элементы.НаименованиеЭтапа.Заголовок = "Сдано";
		
		СохранитьНаКлиенте();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ТекстСообщенияОНепройденномКонтролеНомеровКорректировок()
	
	Возврат ОбъектОтчета(ЭтаФорма.ИмяФормы).ТекстСообщенияОНепройденномКонтролеНомеровКорректировок(
	СтруктураРеквизитовФормы.мСохраненныйДок.Организация, СтруктураРеквизитовФормы.мСохраненныйДок.КодНалоговогоОргана,
	СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания, НомерКорректировки);
	
КонецФункции

&НаСервере
Функция ОбъектОтчета(ЭтаФормаИмя) Экспорт
	
	Если мОбъектОтчета = Неопределено Тогда 
		мОбъектОтчета = РегламентированнаяОтчетностьВызовСервера.ОбъектОтчета(ЭтаФормаИмя);
	КонецЕсли;
	
	Возврат мОбъектОтчета;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИмяОтчета(ЭтаФормаИмя)
	Форма_Имя = СтрЗаменить(ЭтаФормаИмя, "Внешний", "");
	Возврат Сред(Лев(Форма_Имя, СтрНайти(Форма_Имя, ".Форма.") - 1), 7);
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИмяФормыОтчета(ЭтаФормаИмя)
	Возврат Сред(ЭтаФормаИмя, СтрНайти(ЭтаФормаИмя, ".Форма.") + 7);
КонецФункции
