#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныеПроцедурыИФункции

#Область ФормированиеРегламентированногоОтчета

Функция СформироватьАвтоматическиРеглОтчет(ПараметрыАвтоформирования, КорректирующийОтчет) Экспорт
	
	ИмяФормы = ПараметрыАвтоформирования.ИмяФормыОтчета;
	
	РазделыОтчета = РазделыРеглОтчета(ИмяФормы);
	
	СтраницыРазделов8_12 = СтраницыРазделов8_12(ИмяФормы);
	
	ДанныеРеглОтчета = Новый Структура;
	ДанныеРеглОтчета.Вставить("ДатаПодписи", ТекущаядатаСеанса());
	
	ПараметрыАвтоФормирования.Вставить("ДатаПодписи", ДанныеРеглОтчета.ДатаПодписи);
	
	ПараметрыАвтоФормирования.Вставить("НомерКорректировки", ?(КорректирующийОтчет, 1, 0));
	
	ДанныеРеглОтчета.Вставить("СтруктураРеквизитовФормы");
	
	СформироватьСтруктуруРеквизитовФормы(ИмяФормы, ДанныеРеглОтчета.СтруктураРеквизитовФормы);
	
	ДанныеРеглОтчета.СтруктураРеквизитовФормы.Организация = ПараметрыАвтоформирования.Организация;
	ДанныеРеглОтчета.СтруктураРеквизитовФормы.ДатаНачалаАвтозаполнения = ПараметрыАвтоформирования.ДатаНачала;
	ДанныеРеглОтчета.СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета = ПараметрыАвтоформирования.ДатаНачала;
	ДанныеРеглОтчета.СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета = ПараметрыАвтоформирования.ДатаОкончания;
	ДанныеРеглОтчета.СтруктураРеквизитовФормы.мПериодичность = Перечисления.Периодичность.Квартал;
	
	ЗаполнитьРаздел1ПоУмолчанию(ИмяФормы, РазделыОтчета.Раздел1.Данные, ДанныеРеглОтчета.СтруктураРеквизитовФормы);
	
	ЗаполнитьПустыеСтруктурыДанных(ИмяФормы, РазделыОтчета);
	
	РазделыОтчета.Титульный.Данные.НомерКорректировки = ПараметрыАвтоФормирования.НомерКорректировки;
	РазделыОтчета.Титульный.Данные.ДатаПодписи = ДанныеРеглОтчета.ДатаПодписи;
	
	ДанныеРеглОтчета.СтруктураРеквизитовФормы.ВидДокумента = ?(КорректирующийОтчет, 1, 0);
	
	ДанныеРеглОтчета.Вставить("СтруктураВариантыЗаполнения", Новый Структура);
	СформироватьВариантыЗаполнения(ИмяФормы,
								   ДанныеРеглОтчета.СтруктураРеквизитовФормы,
								   ДанныеРеглОтчета.СтруктураВариантыЗаполнения);
	
	ПоказатьПериод(ИмяФормы, РазделыОтчета.Титульный.Данные, ДанныеРеглОтчета.СтруктураРеквизитовФормы);
	
	ЗаполнитьСведенияОбОрганизации(ИмяФормы,
								   РазделыОтчета.Титульный.Данные,
								   ДанныеРеглОтчета.СтруктураРеквизитовФормы,
								   ДанныеРеглОтчета.ДатаПодписи);
	
	РазделыОтчета.Раздел1.Данные.Вставить("П000100001003",
		СокрЛП(ДанныеРеглОтчета.СтруктураРеквизитовФормы.КодТерриториальногоОбразования));
		
	Если ЗначениеЗаполнено(РазделыОтчета.Раздел1.Данные.П000100001003) Тогда
		РазделыОтчета.Раздел1.Данные.Вставить("П000100002003",
			СокрЛП(ДанныеРеглОтчета.СтруктураРеквизитовФормы.КБКПоУмолчанию));
	КонецЕсли;
	
	ДеревоСтраницОтчета = СтруктураСтраницОтчета(ИмяФормы);
	
	ДанныеРеглОтчета.Вставить("ДеревоСтраницОтчета", ДеревоСтраницОтчета);
	
	ПараметрыЗаписи = Новый Структура;
	ПараметрыЗаписи.Вставить("ИсточникОтчета", ПараметрыАвтоформирования.ИсточникОтчета);
	ПараметрыЗаписи.Вставить("ИмяФормыОтчета", ПараметрыАвтоформирования.ИмяФормыОтчета);
	ПараметрыЗаписи.Вставить("Организация", ПараметрыАвтоформирования.Организация);
	ПараметрыЗаписи.Вставить("ДатаНачала", ПараметрыАвтоформирования.ДатаНачала);
	ПараметрыЗаписи.Вставить("ДатаОкончания", ПараметрыАвтоформирования.ДатаОкончания);
	ПараметрыЗаписи.Вставить("СохраняемыйРеглОтчет", ПараметрыАвтоформирования.СсылкаНаСохрРеглОтчет);
	ПараметрыЗаписи.Вставить("Ошибки", ПараметрыАвтоформирования.Ошибки);
	ПараметрыЗаписи.Вставить("ДатаПодписи", ДанныеРеглОтчета.ДатаПодписи);
	ПараметрыЗаписи.Вставить("ЕдиницаИзмерения", Перечисления.ПорядкиОкругленияОтчетности.Окр1);
	ПараметрыЗаписи.Вставить("ТочностьЕдиницыИзмерения", 0);
	ПараметрыЗаписи.Вставить("Периодичность", ДанныеРеглОтчета.СтруктураРеквизитовФормы.мПериодичность);
	ПараметрыЗаписи.Вставить("Комментарий", "");
	ПараметрыЗаписи.Вставить("КодИФНС", РазделыОтчета.Титульный.Данные.КодИМНС);
	ПараметрыЗаписи.Вставить("КПП", РазделыОтчета.Титульный.Данные.КПП1);
	ПараметрыЗаписи.Вставить("СтруктураРеквизитовФормы", ДанныеРеглОтчета.СтруктураРеквизитовФормы);
	ПараметрыЗаписи.Вставить("СтруктураВариантыЗаполнения", ДанныеРеглОтчета.СтруктураВариантыЗаполнения);
	ПараметрыЗаписи.Вставить("ВерсияФормы", ДанныеРеглОтчета.СтруктураРеквизитовФормы.мВерсияФормы);
	ПараметрыЗаписи.Вставить("ФлОтклВыборЗначений", Ложь);
	ПараметрыЗаписи.Вставить("ФлажокОтклАвтоРасчет", Ложь);
	ПараметрыЗаписи.Вставить("ПечатьБезШтрихкодаРазрешена", Неопределено);
	ПараметрыЗаписи.Вставить("ФлПроверятьСоотношенияПриПечатиИВыгрузки", Ложь);
	ПараметрыЗаписи.Вставить("ФлПодсчетСтраниц", Неопределено);
	ПараметрыЗаписи.Вставить("СохранятьРасшифровку", ДанныеРеглОтчета.СтруктураРеквизитовФормы.мСохранятьРасшифровку);
	ПараметрыЗаписи.Вставить("АдресВременногоХранилищаРасшифровки",
		ДанныеРеглОтчета.СтруктураРеквизитовФормы.АдресВременногоХранилищаРасшифровки);
	ПараметрыЗаписи.Вставить("ГруппаОрганизаций", ДанныеРеглОтчета.СтруктураРеквизитовФормы.ГруппаОрганизаций);
	ПараметрыЗаписи.Вставить("ДатаНачалаАвтозаполнения",
		ДанныеРеглОтчета.СтруктураРеквизитовФормы.ДатаНачалаАвтозаполнения);
	ПараметрыЗаписи.Вставить("ВыполненоЗаполнениеРазделов",
		ДанныеРеглОтчета.СтруктураРеквизитовФормы.ВыполненоЗаполнениеРазделов);
	ПараметрыЗаписи.Вставить("УспешноеАвтозаполнение", ДанныеРеглОтчета.СтруктураРеквизитовФормы.УспешноеАвтозаполнение);
	ПараметрыЗаписи.Вставить("ДеревоСтраницОтчета", ДеревоСтраницОтчета);
	ПараметрыЗаписи.Вставить("Вариант", ?(КорректирующийОтчет, 1, 0));
	ПараметрыЗаписи.Вставить("РазделыОтчета", РазделыОтчета);
	ПараметрыЗаписи.Вставить("СтраницыРазделов8_12", СтраницыРазделов8_12);
	ПараметрыЗаписи.Вставить("НаименованиеОтчета", ДанныеРеглОтчета.СтруктураРеквизитовФормы.НаименованиеОтчета);
	Если ПараметрыАвтоформирования.Свойство("ДанныеПомощникаЗаполнения") Тогда
		ПараметрыЗаписи.Вставить("ДанныеПомощникаЗаполнения", ПараметрыАвтоформирования.ДанныеПомощникаЗаполнения);
	КонецЕсли;
	
	ПараметрыАвтоформирования.СсылкаНаСохрРеглОтчет = ЗаписатьРеглОтчет(ИмяФормы, ПараметрыЗаписи);
	
	ЗаполнитьРеглОтчет(ИмяФормы,
					   ПараметрыАвтоформирования,
					   КорректирующийОтчет,
					   РазделыОтчета,
					   СтраницыРазделов8_12,
					   ДанныеРеглОтчета);
	
	ПараметрыЗаписи.Вставить("УспешноеАвтозаполнение", ДанныеРеглОтчета.СтруктураРеквизитовФормы.УспешноеАвтозаполнение);
	ПараметрыЗаписи.Вставить("АдресВременногоХранилищаРасшифровки",
		ДанныеРеглОтчета.СтруктураРеквизитовФормы.АдресВременногоХранилищаРасшифровки);
	
	ПараметрыАвтоформирования.СсылкаНаСохрРеглОтчет = ЗаписатьРеглОтчет(ИмяФормы, ПараметрыЗаписи);
	
	ПроверитьВыгрузкуПоНовомуАлгоритмуНаСервере(ИмяФормы, ДанныеРеглОтчета.СтруктураРеквизитовФормы);
	
	ПараметрыПроверкиКонтрагентов = Новый Структура;
	ПараметрыПроверкиКонтрагентов.Вставить("ДекларацияНДС", ПараметрыАвтоформирования.СсылкаНаСохрРеглОтчет);
	ПараметрыПроверкиКонтрагентов.Вставить("Заголовок",
		ПараметрыАвтоформирования.СсылкаНаСохрРеглОтчет.НаименованиеОтчета
	  + НСтр("ru=' за '")
	  + ПараметрыАвтоформирования.СсылкаНаСохрРеглОтчет.ПредставлениеПериода
	  + " ("
	  + ПараметрыАвтоформирования.СсылкаНаСохрРеглОтчет.Организация.Наименование
	  + ")");
	ПараметрыПроверкиКонтрагентов.Вставить("СтраницыРазделов", СтраницыРазделов8_12);
	ПараметрыПроверкиКонтрагентов.Вставить("ЭтоДекларацияПоНДС", Истина);
	ПараметрыПроверкиКонтрагентов.Вставить("ЭтоЗапускПроверкиПослеЗаполнения", Истина);
	
	АдресХранилищаПроверкиКонтрагентов = ПоместитьВоВременноеХранилище(Неопределено, Новый УникальныйИдентификатор());
	
	Попытка
		
		ПроверкаКонтрагентовБРО.ПроверитьКонтрагентовВОтчетахФоновоеЗадание(ПараметрыПроверкиКонтрагентов,
			АдресХранилищаПроверкиКонтрагентов);
		
		РеквизитыПроверкиКонтрагентов = ПолучитьИзВременногоХранилища(АдресХранилищаПроверкиКонтрагентов);
		
		РеквизитыПроверкиКонтрагентов.Удалить("ДекларацияНДС");
		РеквизитыПроверкиКонтрагентов.Удалить("Заголовок");
		РеквизитыПроверкиКонтрагентов.Удалить("ЭтоЗапускПроверкиПослеЗаполнения");
		
		РеквизитыПроверкиКонтрагентов.Вставить("АдресХранилища", Неопределено);
		РеквизитыПроверкиКонтрагентов.Вставить("ИдентификаторЗадания", Неопределено);
		РеквизитыПроверкиКонтрагентов.Вставить("ПроверкаИспользуется", Истина);
		
		РеквизитыПроверкиКонтрагентов.ПроверкаВыполнилась = Истина;
		
		ПараметрыСохраненияРезультатовПроверкиКонтрагентов = Новый Структура;
		
		ПараметрыСохраненияРезультатовПроверкиКонтрагентов.Вставить("РеквизитыПроверкиКонтрагентов",
			РеквизитыПроверкиКонтрагентов);
		ПараметрыСохраненияРезультатовПроверкиКонтрагентов.Вставить("СтруктураРеквизитовФормы",
			ДанныеРеглОтчета.СтруктураРеквизитовФормы);
		
		ПараметрыСохраненияРезультатовПроверкиКонтрагентов.Вставить(ПараметрыСохраненияРезультатовПроверкиКонтрагентов);
		
		ПроверкаКонтрагентовБРО.СохранитьРезультатыПроверкиПриСохраненииДекларации(
			ПараметрыСохраненияРезультатовПроверкиКонтрагентов);
		
		Возврат ПараметрыАвтоформирования.СсылкаНаСохрРеглОтчет;
		
	Исключение
		
		РеквизитыПроверкиКонтрагентов = ПроверкаКонтрагентовБРОКлиентСервер.ПустойРезультатПроверки();
		
		РеквизитыПроверкиКонтрагентов.Вставить("АдресХранилища", Неопределено);
		РеквизитыПроверкиКонтрагентов.Вставить("ИдентификаторЗадания", Неопределено);
		РеквизитыПроверкиКонтрагентов.Вставить("ПроверкаИспользуется", Истина);
		РеквизитыПроверкиКонтрагентов.Вставить("ЭтоДекларацияПоНДС", Истина);
		
		РеквизитыПроверкиКонтрагентов.ПроверкаВыполнилась = Истина;
		
		ПараметрыСохраненияРезультатовПроверкиКонтрагентов = Новый Структура;
		
		ПараметрыСохраненияРезультатовПроверкиКонтрагентов.Вставить("РеквизитыПроверкиКонтрагентов",
		РеквизитыПроверкиКонтрагентов);
		ПараметрыСохраненияРезультатовПроверкиКонтрагентов.Вставить("СтруктураРеквизитовФормы",
		ДанныеРеглОтчета.СтруктураРеквизитовФормы);
		
		ПараметрыСохраненияРезультатовПроверкиКонтрагентов.Вставить(ПараметрыСохраненияРезультатовПроверкиКонтрагентов);
		
		ПроверкаКонтрагентовБРО.СохранитьРезультатыПроверкиПриСохраненииДекларации(
		ПараметрыСохраненияРезультатовПроверкиКонтрагентов);
		
		Возврат ПараметрыАвтоформирования.СсылкаНаСохрРеглОтчет;
		
	КонецПопытки;
	
КонецФункции

Процедура ЗаполнитьРаздел1ПоУмолчанию(ИмяФормы, СтруктураДанныхРаздел1, СтруктураРеквизитовФормы) Экспорт
	
	Если НЕ СтруктураДанныхРаздел1.Свойство("П000100001003") Тогда
		СтруктураДанныхРаздел1.Вставить("П000100001003", "");
	КонецЕсли;
	
	Если НЕ СтруктураДанныхРаздел1.Свойство("П000100002003") Тогда
		СтруктураДанныхРаздел1.Вставить("П000100002003", "");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтруктураДанныхРаздел1.П000100001003)
	   И НЕ ЗначениеЗаполнено(СтруктураДанныхРаздел1.П000100002003) Тогда
		СтруктураДанныхРаздел1.Вставить("П000100002003", СтруктураРеквизитовФормы.КБКПоУмолчанию);
	КонецЕсли;
	
	Если НЕ СтруктураДанныхРаздел1.Свойство("П000100003003") Тогда
		СтруктураДанныхРаздел1.Вставить("П000100003003", 0);
	КонецЕсли;
	
	Если НЕ СтруктураДанныхРаздел1.Свойство("П000100004003") Тогда
		СтруктураДанныхРаздел1.Вставить("П000100004003", 0);
	КонецЕсли;
	
	Если НЕ СтруктураДанныхРаздел1.Свойство("П000100005003") Тогда
		СтруктураДанныхРаздел1.Вставить("П000100005003", 0);
	КонецЕсли;
	
	Если НЕ СтруктураДанныхРаздел1.Свойство("П000100006003") Тогда
		СтруктураДанныхРаздел1.Вставить("П000100006003", "");
	КонецЕсли;
	
	Если НЕ СтруктураДанныхРаздел1.Свойство("П000100007003") Тогда
		СтруктураДанныхРаздел1.Вставить("П000100007003", "");
	КонецЕсли;
	
	Если НЕ СтруктураДанныхРаздел1.Свойство("П000100008003") Тогда
		СтруктураДанныхРаздел1.Вставить("П000100008003", "");
	КонецЕсли;
	
КонецПроцедуры

Функция РазделыРеглОтчета(ИмяФормы) Экспорт
	
	ДанныеДопСтрок = Новый Структура;
	ДанныеДопСтрок.Вставить("Раздел3_Прил1", 	 Новый ТаблицаЗначений);
	ДанныеДопСтрок.Вставить("Раздел3_Прил2", 	 Новый ТаблицаЗначений);
	ДанныеДопСтрок.Вставить("Раздел4",		     Новый Структура);
	ДанныеДопСтрок.Раздел4.Вставить("П0004М100", Новый ТаблицаЗначений);
	ДанныеДопСтрок.Раздел4.Вставить("П0004М200", Новый ТаблицаЗначений);
	ДанныеДопСтрок.Раздел4.Вставить("П0004М300", Новый ТаблицаЗначений);
	ДанныеДопСтрок.Вставить("Раздел5",		 	 Новый ТаблицаЗначений);
	ДанныеДопСтрок.Вставить("Раздел6", 			 Новый Структура);
	ДанныеДопСтрок.Раздел6.Вставить("П0006М100", Новый ТаблицаЗначений);
	ДанныеДопСтрок.Раздел6.Вставить("П0006М200", Новый ТаблицаЗначений);
	ДанныеДопСтрок.Раздел6.Вставить("П0006М300", Новый ТаблицаЗначений);
	ДанныеДопСтрок.Вставить("Раздел7", 		 	 Новый ТаблицаЗначений);
	
	ДанныеДопСтрок.Раздел3_Прил1.Колонки.Добавить("П000310007001",
		Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(4)));
	ДанныеДопСтрок.Раздел3_Прил1.Колонки.Добавить("П000310007002",
		Новый ОписаниеТипов("Дата", Новый КвалификаторыДаты(ЧастиДаты.Дата)));
	ДанныеДопСтрок.Раздел3_Прил1.Колонки.Добавить("П000310007003",
		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(4, 1, ДопустимыйЗнак.Любой)));
	ДанныеДопСтрок.Раздел3_Прил1.Колонки.Добавить("П000310007004",
		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(12, 2, ДопустимыйЗнак.Любой)));
	
	ДанныеДопСтрок.Раздел3_Прил2.Колонки.Добавить("П000320000101",
		Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(9)));
	ДанныеДопСтрок.Раздел3_Прил2.Колонки.Добавить("П000320000102",
		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(14, 2, ДопустимыйЗнак.Любой)));
	ДанныеДопСтрок.Раздел3_Прил2.Колонки.Добавить("П000320000103",
		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(14, 2, ДопустимыйЗнак.Любой)));
	
	ДанныеДопСтрок.Раздел4.П0004М100.Колонки.Добавить("П0004М1001003",
		Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(7)));
	ДанныеДопСтрок.Раздел4.П0004М100.Колонки.Добавить("П0004М1002003",
		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(16, 2, ДопустимыйЗнак.Любой)));
	ДанныеДопСтрок.Раздел4.П0004М100.Колонки.Добавить("П0004М1003003",
		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(16, 2, ДопустимыйЗнак.Любой)));
	ДанныеДопСтрок.Раздел4.П0004М100.Колонки.Добавить("П0004М1004003",
		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(16, 2, ДопустимыйЗнак.Любой)));
	ДанныеДопСтрок.Раздел4.П0004М100.Колонки.Добавить("П0004М1005003",
		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(16, 2, ДопустимыйЗнак.Любой)));
	
	ДанныеДопСтрок.Раздел4.П0004М200.Колонки.Добавить("П0004М2006003",
		Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(7)));
	ДанныеДопСтрок.Раздел4.П0004М200.Колонки.Добавить("П0004М2007003",
		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(16, 2, ДопустимыйЗнак.Любой)));
	ДанныеДопСтрок.Раздел4.П0004М200.Колонки.Добавить("П0004М2008003",
		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(16, 2, ДопустимыйЗнак.Любой)));
	
	ДанныеДопСтрок.Раздел4.П0004М300.Колонки.Добавить("П0004М3009003",
		Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(7)));
	ДанныеДопСтрок.Раздел4.П0004М300.Колонки.Добавить("П0004М3010003",
		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(16, 2, ДопустимыйЗнак.Любой)));
	ДанныеДопСтрок.Раздел4.П0004М300.Колонки.Добавить("П0004М3011003",
		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(16, 2, ДопустимыйЗнак.Любой)));
	
	ДанныеДопСтрок.Раздел5.Колонки.Добавить("П000500003003",
		Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(7)));
	ДанныеДопСтрок.Раздел5.Колонки.Добавить("П000500004003",
		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(16, 2, ДопустимыйЗнак.Любой)));
	ДанныеДопСтрок.Раздел5.Колонки.Добавить("П000500005003",
		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(16, 2, ДопустимыйЗнак.Любой)));
	ДанныеДопСтрок.Раздел5.Колонки.Добавить("П000500006003",
		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(16, 2, ДопустимыйЗнак.Любой)));
	ДанныеДопСтрок.Раздел5.Колонки.Добавить("П000500007003",
		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(16, 2, ДопустимыйЗнак.Любой)));
	
	ДанныеДопСтрок.Раздел6.П0006М100.Колонки.Добавить("П0006М1001003",
		Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(7)));
	ДанныеДопСтрок.Раздел6.П0006М100.Колонки.Добавить("П0006М1002003",
		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(16, 2, ДопустимыйЗнак.Любой)));
	ДанныеДопСтрок.Раздел6.П0006М100.Колонки.Добавить("П0006М1003003",
		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(16, 2, ДопустимыйЗнак.Любой)));
	ДанныеДопСтрок.Раздел6.П0006М100.Колонки.Добавить("П0006М1004003",
		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(16, 2, ДопустимыйЗнак.Любой)));
	
	ДанныеДопСтрок.Раздел6.П0006М200.Колонки.Добавить("П0006М2007003",
		Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(7)));
	ДанныеДопСтрок.Раздел6.П0006М200.Колонки.Добавить("П0006М2008003",
		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(16, 2, ДопустимыйЗнак.Любой)));
	ДанныеДопСтрок.Раздел6.П0006М200.Колонки.Добавить("П0006М2009003",
		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(16, 2, ДопустимыйЗнак.Любой)));
	ДанныеДопСтрок.Раздел6.П0006М200.Колонки.Добавить("П0006М2010003",
		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(16, 2, ДопустимыйЗнак.Любой)));
	
	ДанныеДопСтрок.Раздел6.П0006М300.Колонки.Добавить("П0006М3011003",
		Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(7)));
	ДанныеДопСтрок.Раздел6.П0006М300.Колонки.Добавить("П0006М3012003",
		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(16, 2, ДопустимыйЗнак.Любой)));
	ДанныеДопСтрок.Раздел6.П0006М300.Колонки.Добавить("П0006М3013003",
		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(16, 2, ДопустимыйЗнак.Любой)));
	ДанныеДопСтрок.Раздел6.П0006М300.Колонки.Добавить("П0006М3014003",
		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(16, 2, ДопустимыйЗнак.Любой)));
	ДанныеДопСтрок.Раздел6.П0006М300.Колонки.Добавить("П0006М3015003",
		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(16, 2, ДопустимыйЗнак.Любой)));
	
	ДанныеДопСтрок.Раздел7.Колонки.Добавить("П000700000101",
		Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(7)));
	ДанныеДопСтрок.Раздел7.Колонки.Добавить("П000700000102",
		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(16, 2, ДопустимыйЗнак.Любой)));
	ДанныеДопСтрок.Раздел7.Колонки.Добавить("П000700000103",
		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(16, 2, ДопустимыйЗнак.Любой)));
	ДанныеДопСтрок.Раздел7.Колонки.Добавить("П000700000104",
		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(16, 2, ДопустимыйЗнак.Любой)));
	
	ДанныеДопСтраниц = Новый Структура;
	ДанныеДопСтраниц.Вставить("Раздел2", 	   Новый ТаблицаЗначений);
	ДанныеДопСтраниц.Вставить("Раздел3_Прил1", Новый ТаблицаЗначений);
	ДанныеДопСтраниц.Вставить("Раздел5", 	   Новый ТаблицаЗначений);
	
	ДанныеДопСтраниц.Раздел2.Колонки.Добавить("Представление",
		Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(254)));
	ДанныеДопСтраниц.Раздел2.Колонки.Добавить("АктивнаяСтраница",
		Новый ОписаниеТипов("Булево"));
	ДанныеДопСтраниц.Раздел2.Колонки.Добавить("АвтоматическоеПредставление",
		Новый ОписаниеТипов("Булево"));
	ДанныеДопСтраниц.Раздел2.Колонки.Добавить("Данные",
		Новый ОписаниеТипов("Структура"));
	
	ДанныеДопСтраниц.Раздел3_Прил1.Колонки.Добавить("Представление",
		Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(254)));
	ДанныеДопСтраниц.Раздел3_Прил1.Колонки.Добавить("АктивнаяСтраница",
		Новый ОписаниеТипов("Булево"));
	ДанныеДопСтраниц.Раздел3_Прил1.Колонки.Добавить("АвтоматическоеПредставление",
		Новый ОписаниеТипов("Булево"));
	ДанныеДопСтраниц.Раздел3_Прил1.Колонки.Добавить("Данные",
		Новый ОписаниеТипов("Структура"));
	ДанныеДопСтраниц.Раздел3_Прил1.Колонки.Добавить("ДанныеДопСтрок",
		Новый ОписаниеТипов("Структура"));
	
	ДанныеДопСтраниц.Раздел5.Колонки.Добавить("Представление",
		Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(254)));
	ДанныеДопСтраниц.Раздел5.Колонки.Добавить("АктивнаяСтраница",
		Новый ОписаниеТипов("Булево"));
	ДанныеДопСтраниц.Раздел5.Колонки.Добавить("АвтоматическоеПредставление",
		Новый ОписаниеТипов("Булево"));
	ДанныеДопСтраниц.Раздел5.Колонки.Добавить("Данные",
		Новый ОписаниеТипов("Структура"));
	ДанныеДопСтраниц.Раздел5.Колонки.Добавить("ДанныеДопСтрок",
		Новый ОписаниеТипов("ТаблицаЗначений"));
	
	РазделыОтчета = Новый Структура;
	РазделыОтчета.Вставить("Титульный",
		Новый Структура("МногостраничностьВРазделе, Данные",
						Ложь, Новый Структура));
	
	РазделыОтчета.Вставить("Раздел1",
		Новый Структура("МногостраничностьВРазделе, Данные",
						Ложь, Новый Структура));
	
	РазделыОтчета.Вставить("Раздел2",
		Новый Структура("МногостраничностьВРазделе, Данные",
						Истина, ДанныеДопСтраниц.Раздел2));
	
	РазделыОтчета.Вставить("Раздел3",
		Новый Структура("МногостраничностьВРазделе, Данные",
						Ложь, Новый Структура));
	
	РазделыОтчета.Вставить("Раздел3_Прил1",
		Новый Структура("МногостраничностьВРазделе, Данные, ДанныеДопСтрок, ИдентификаторДопСтрок",
						Истина, ДанныеДопСтраниц.Раздел3_Прил1, ДанныеДопСтрок.Раздел3_Прил1, "П0003100070"));
	
	РазделыОтчета.Вставить("Раздел3_Прил2",
		Новый Структура("МногостраничностьВРазделе, Данные, ДанныеДопСтрок, ИдентификаторДопСтрок",
						Ложь, Новый Структура, ДанныеДопСтрок.Раздел3_Прил2, "П0003200001"));
	
	РазделыОтчета.Вставить("Раздел4",
		Новый Структура("МногостраничностьВРазделе, Данные, ДанныеДопСтрок",
						Ложь, Новый Структура, ДанныеДопСтрок.Раздел4));
	
	РазделыОтчета.Вставить("Раздел5",
		Новый Структура("МногостраничностьВРазделе, Данные, ДанныеДопСтрок, ИдентификаторДопСтрок",
						Истина, ДанныеДопСтраниц.Раздел5, ДанныеДопСтрок.Раздел5, "П00050000"));
	
	РазделыОтчета.Вставить("Раздел6",
		Новый Структура("МногостраничностьВРазделе, Данные, ДанныеДопСтрок",
						Ложь, Новый Структура, ДанныеДопСтрок.Раздел6));
	
	РазделыОтчета.Вставить("Раздел7",
		Новый Структура("МногостраничностьВРазделе, Данные, ДанныеДопСтрок, ИдентификаторДопСтрок",
						Ложь, Новый Структура, ДанныеДопСтрок.Раздел7, "П0007000001"));
		
	Возврат РазделыОтчета;
	
КонецФункции

Функция СтраницыРазделов8_12(ИмяФормы)

	ДанныеСтраниц = Новый Структура;
	ДанныеСтраниц.Вставить("СтраницыРаздел8", 	    Новый ТаблицаЗначений);
	ДанныеСтраниц.Вставить("СтраницыРаздел8_Прил1", Новый ТаблицаЗначений);
	ДанныеСтраниц.Вставить("СтраницыРаздел9", 	    Новый ТаблицаЗначений);
	ДанныеСтраниц.Вставить("СтраницыРаздел9_Прил1", Новый ТаблицаЗначений);
	ДанныеСтраниц.Вставить("СтраницыРаздел10",      Новый ТаблицаЗначений);
	ДанныеСтраниц.Вставить("СтраницыРаздел11", 	    Новый ТаблицаЗначений);
	ДанныеСтраниц.Вставить("СтраницыРаздел12", 	    Новый ТаблицаЗначений);
	
	ДанныеСтраниц.СтраницыРаздел8.Колонки.Добавить("Представление",
		Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(0)));
	ДанныеСтраниц.СтраницыРаздел8.Колонки.Добавить("НомерПервойСтроки",
		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 0, ДопустимыйЗнак.Неотрицательный)));
	ДанныеСтраниц.СтраницыРаздел8.Колонки.Добавить("НомерПоследнейСтроки",
		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 0, ДопустимыйЗнак.Неотрицательный)));
	
	ДанныеСтраниц.СтраницыРаздел8_Прил1.Колонки.Добавить("Представление",
		Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(0)));
	ДанныеСтраниц.СтраницыРаздел8_Прил1.Колонки.Добавить("НомерПервойСтроки",
		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 0, ДопустимыйЗнак.Неотрицательный)));
	ДанныеСтраниц.СтраницыРаздел8_Прил1.Колонки.Добавить("НомерПоследнейСтроки",
		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 0, ДопустимыйЗнак.Неотрицательный)));
	
	ДанныеСтраниц.СтраницыРаздел9.Колонки.Добавить("Представление",
		Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(0)));
	ДанныеСтраниц.СтраницыРаздел9.Колонки.Добавить("НомерПервойСтроки",
		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 0, ДопустимыйЗнак.Неотрицательный)));
	ДанныеСтраниц.СтраницыРаздел9.Колонки.Добавить("НомерПоследнейСтроки",
		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 0, ДопустимыйЗнак.Неотрицательный)));
	
	ДанныеСтраниц.СтраницыРаздел9_Прил1.Колонки.Добавить("Представление",
		Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(0)));
	ДанныеСтраниц.СтраницыРаздел9_Прил1.Колонки.Добавить("НомерПервойСтроки",
		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 0, ДопустимыйЗнак.Неотрицательный)));
	ДанныеСтраниц.СтраницыРаздел9_Прил1.Колонки.Добавить("НомерПоследнейСтроки",
		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 0, ДопустимыйЗнак.Неотрицательный)));
	
	ДанныеСтраниц.СтраницыРаздел10.Колонки.Добавить("Представление",
		Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(0)));
	ДанныеСтраниц.СтраницыРаздел10.Колонки.Добавить("НомерПервойСтроки",
		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 0, ДопустимыйЗнак.Неотрицательный)));
	ДанныеСтраниц.СтраницыРаздел10.Колонки.Добавить("НомерПоследнейСтроки",
		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 0, ДопустимыйЗнак.Неотрицательный)));
	
	ДанныеСтраниц.СтраницыРаздел11.Колонки.Добавить("Представление",
		Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(0)));
	ДанныеСтраниц.СтраницыРаздел11.Колонки.Добавить("НомерПервойСтроки",
		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 0, ДопустимыйЗнак.Неотрицательный)));
	ДанныеСтраниц.СтраницыРаздел11.Колонки.Добавить("НомерПоследнейСтроки",
		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 0, ДопустимыйЗнак.Неотрицательный)));
	
	ДанныеСтраниц.СтраницыРаздел12.Колонки.Добавить("Представление",
		Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(0)));
	ДанныеСтраниц.СтраницыРаздел12.Колонки.Добавить("НомерПервойСтроки",
		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 0, ДопустимыйЗнак.Неотрицательный)));
	ДанныеСтраниц.СтраницыРаздел12.Колонки.Добавить("НомерПоследнейСтроки",
		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 0, ДопустимыйЗнак.Неотрицательный)));
	
	СтраницыРазделов8_12 = Новый Структура;
	СтраницыРазделов8_12.Вставить("СтраницыРаздел8", ДанныеСтраниц.СтраницыРаздел8);
	СтраницыРазделов8_12.Вставить("СтраницыРаздел8_Прил1", ДанныеСтраниц.СтраницыРаздел8_Прил1);
	СтраницыРазделов8_12.Вставить("СтраницыРаздел9", ДанныеСтраниц.СтраницыРаздел9);
	СтраницыРазделов8_12.Вставить("СтраницыРаздел9_Прил1", ДанныеСтраниц.СтраницыРаздел9_Прил1);
	СтраницыРазделов8_12.Вставить("СтраницыРаздел10", ДанныеСтраниц.СтраницыРаздел10);
	СтраницыРазделов8_12.Вставить("СтраницыРаздел11", ДанныеСтраниц.СтраницыРаздел11);
	СтраницыРазделов8_12.Вставить("СтраницыРаздел12", ДанныеСтраниц.СтраницыРаздел12);
	
	Возврат СтраницыРазделов8_12;

КонецФункции

Процедура ЗаполнитьРеглОтчет(ИмяФормы,
							 ПараметрыАвтоформирования,
							 КорректирующийОтчет,
							 РазделыОтчета,
							 СтраницыРазделов8_12,
							 ДанныеРеглОтчета)
		
	ИсточникОтчета = ПараметрыАвтоформирования.ИсточникОтчета;
	ИмяФормыОтчета = ПараметрыАвтоформирования.ИмяФормыОтчета;
	
	ДанныеРеглОтчета.СтруктураРеквизитовФормы.АдресВоВременномХранилище
		= ПоместитьВоВременноеХранилище(Неопределено, Новый УникальныйИдентификатор());
	
	ДанныеРеглОтчета.СтруктураРеквизитовФормы.АдресВременногоХранилищаРасшифровки
		= ПоместитьВоВременноеХранилище(Неопределено, Новый УникальныйИдентификатор());
	
	ПараметрыОтчета = Новый Структура;
	ПараметрыОтчета.Вставить("Организация",        ПараметрыАвтоформирования.Организация);
	ПараметрыОтчета.Вставить("ГруппаОрганизаций",
		ДанныеРеглОтчета.СтруктураРеквизитовФормы.ГруппаОрганизаций.Скопировать());
	ПараметрыОтчета.Вставить("ВидДокумента",       ?(ПараметрыАвтоформирования.НомерКорректировки = 0, 0, 1));
	ПараметрыОтчета.Вставить("НомерКорректировки", ПараметрыАвтоформирования.НомерКорректировки);
	ПараметрыОтчета.Вставить("ДатаПодписи",        ПараметрыАвтоформирования.ДатаПодписи);
	ПараметрыОтчета.Вставить("УникальныйИдентификаторФормы", Новый УникальныйИдентификатор());
	ПараметрыОтчета.Вставить("АдресВоВременномХранилище",
		ДанныеРеглОтчета.СтруктураРеквизитовФормы.АдресВоВременномХранилище);
	ПараметрыОтчета.Вставить("АдресВременногоХранилищаРасшифровки",
		ДанныеРеглОтчета.СтруктураРеквизитовФормы.АдресВременногоХранилищаРасшифровки);
	ПараметрыОтчета.Вставить("Декларация", ПараметрыАвтоформирования.СсылкаНаСохрРеглОтчет);
	Если КонецКвартала(ПараметрыАвтоформирования.ДатаОкончания) = КонецКвартала("20170331") Тогда
		ПараметрыОтчета.Вставить("мДатаНачалаПериодаОтчета",
		ДанныеРеглОтчета.СтруктураРеквизитовФормы.ДатаНачалаАвтозаполнения);
	Иначе
		ПараметрыОтчета.Вставить("мДатаНачалаПериодаОтчета", НачалоКвартала(ПараметрыАвтоформирования.ДатаОкончания));
	КонецЕсли;
	ПараметрыОтчета.Вставить("мДатаКонцаПериодаОтчета", ПараметрыАвтоформирования.ДатаОкончания);
	ПараметрыОтчета.Вставить("ДатаНачалаРасширенногоПериодаОтчета",
		ДатаНачалаРасширенногоПериодаОтчета(ИмяФормы, ДанныеРеглОтчета.СтруктураРеквизитовФормы));
		
	Если ПараметрыАвтоформирования.Свойство("ДанныеПомощникаЗаполнения") Тогда 
		ПараметрыОтчета.Вставить("ДанныеПомощникаЗаполнения", ПараметрыАвтоформирования.ДанныеПомощникаЗаполнения);
	КонецЕсли;
		
	Контейнер = Новый Структура;
	Контейнер.Вставить("Раздел1", РазделыОтчета.Раздел1.Данные);
	Контейнер.Вставить("Раздел2", РазделыОтчета.Раздел2.Данные);
	Контейнер.Вставить("Раздел3", РазделыОтчета.Раздел3.Данные);
	Контейнер.Вставить("Раздел3_Прил1", РазделыОтчета.Раздел3_Прил1.Данные);
	Контейнер.Вставить("Раздел3_Прил2", РазделыОтчета.Раздел3_Прил2.Данные);
	Контейнер.Вставить("Раздел3_Прил2_ДанныеДопСтрок", РазделыОтчета.Раздел3_Прил2.ДанныеДопСтрок);
	Контейнер.Вставить("Раздел4", РазделыОтчета.Раздел4.Данные);
	Контейнер.Вставить("Раздел4_ДанныеДопСтрок010_050", РазделыОтчета.Раздел4.ДанныеДопСтрок.П0004М100);
	Контейнер.Вставить("Раздел4_ДанныеДопСтрок060_080", РазделыОтчета.Раздел4.ДанныеДопСтрок.П0004М200);
	Контейнер.Вставить("Раздел4_ДанныеДопСтрок090_110", РазделыОтчета.Раздел4.ДанныеДопСтрок.П0004М300);
	Контейнер.Вставить("Раздел5", РазделыОтчета.Раздел5.Данные);
	Контейнер.Вставить("Раздел5_ДанныеДопСтрок", РазделыОтчета.Раздел5.ДанныеДопСтрок);
	Контейнер.Вставить("Раздел6", РазделыОтчета.Раздел6.Данные);
	Контейнер.Вставить("Раздел6_ДанныеДопСтрок010_040", РазделыОтчета.Раздел6.ДанныеДопСтрок.П0006М100);
	Контейнер.Вставить("Раздел6_ДанныеДопСтрок070_100", РазделыОтчета.Раздел6.ДанныеДопСтрок.П0006М200);
	Контейнер.Вставить("Раздел6_ДанныеДопСтрок110_150", РазделыОтчета.Раздел6.ДанныеДопСтрок.П0006М300);
	Контейнер.Вставить("Раздел7", РазделыОтчета.Раздел7.Данные);
	Контейнер.Вставить("Раздел7_ДанныеДопСтрок", РазделыОтчета.Раздел7.ДанныеДопСтрок);
	Контейнер.Вставить("Раздел8", Новый Структура);
	Контейнер.Вставить("Раздел8_Прил1", Новый Структура);
	Контейнер.Вставить("Раздел9", Новый Структура);
	Контейнер.Вставить("Раздел9_Прил1", Новый Структура);
	Контейнер.Вставить("Раздел10", Новый Структура);
	Контейнер.Вставить("Раздел11", Новый Структура);
	Контейнер.Вставить("Раздел12", Новый Структура);
	Контейнер.Вставить("ДополнительныеСведения", Новый Структура("П000100001003",
	РазделыОтчета.Раздел1.Данные.П000100001003));
	
	Если ПараметрыАвтоформирования.Свойство("ЗаполнятьВнешнимиДанными")
	   И ПараметрыАвтоформирования.ЗаполнятьВнешнимиДанными Тогда
		
		ЗаполнитьРеглОтчетВнешнимиДанными(ИмяФормы, Контейнер, ПараметрыАвтоформирования.ВнешниеДанные);
		
	Иначе
		
		РегламентированнаяОтчетностьПереопределяемый.ЗаполнитьОтчет(ИсточникОтчета,
																	ИмяФормыОтчета,
																	ПараметрыОтчета,
																	Контейнер);
																	
		ДанныеРеглОтчета.СтруктураРеквизитовФормы.УспешноеАвтозаполнение = Истина;
		
		ДанныеРеглОтчета.СтруктураРеквизитовФормы.АвтозаполнениеРазделовВТекущейСессии
			= НовыйНаборПризнаковАвтозаполнения(ИмяФормы, Истина);
			                    			
		Для Каждого ЭлементСтруктуры Из Контейнер Цикл
				
			ИмяЭлемента = ЭлементСтруктуры.Ключ;
			
			Если ИмяЭлемента = "Раздел8"
		 	 ИЛИ ИмяЭлемента = "Раздел8_Прил1"
		  	 ИЛИ ИмяЭлемента = "Раздел9"
		  	 ИЛИ ИмяЭлемента = "Раздел9_Прил1"
			 ИЛИ ИмяЭлемента = "Раздел10"
			 ИЛИ ИмяЭлемента = "Раздел11"
			 ИЛИ ИмяЭлемента = "Раздел12" Тогда
			 
				ЗаполнитьСведенияНДС(ИмяФормы, Контейнер, ИмяЭлемента,
					СтраницыРазделов8_12["Страницы" + ИмяЭлемента],
					ДанныеРеглОтчета.СтруктураРеквизитовФормы);
				
			ИначеЕсли ИмяЭлемента = "ДополнительныеСведения" Тогда
				
				ОКТМО = СокрЛП(ЭлементСтруктуры.Значение.П000100001003);
				
				ДанныеРеглОтчета.СтруктураРеквизитовФормы.Вставить("КодТерриториальногоОбразования", ОКТМО);
					
				Для Каждого СтраницаРаздела Из Контейнер.Раздел2 Цикл
					
					ДанныеСтраницы = СтраницаРаздела.Данные;
					
					Если ДанныеСтраницы = Неопределено Тогда
						
						Продолжить;
						
					КонецЕсли;
					
					ДанныеСтраницы.Вставить("П000200005003", ОКТМО);
					
				КонецЦикла;	
			
			КонецЕсли;
			
		КонецЦикла;
		
		ЗаполнитьЗначенияПолейПоУмолчанию(ИмяФормы,
										  Контейнер.Раздел1,
										  Контейнер.Раздел2,
										  ДанныеРеглОтчета.СтруктураРеквизитовФормы);
		
		Расчет(ИмяФормы, РазделыОтчета, ДанныеРеглОтчета.СтруктураРеквизитовФормы);
																
	КонецЕсли;
			
КонецПроцедуры

Процедура Расчет(ИмяФормы, РазделыОтчета, СтруктураРеквизитовФормы)
	
	ФорматОкругленияЧисла = Новый Структура;
	ФорматОкругленияЧисла.Вставить("Разрядность", СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения);
	ФорматОкругленияЧисла.Вставить("Класс", 1);
	
	// Раздел 2.
	//			
	Для Каждого ЭлементТабл Из РазделыОтчета.Раздел2.Данные Цикл
		
		КодОперации = СокрЛП(ЭлементТабл.Данные.П000200007003);
						
		Если КодОперации = "1011705" ИЛИ КодОперации = "1011707" Тогда
			
			ОкрП000200008003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
				ФорматОкругленияЧисла, ЭлементТабл.Данные.П000200008003);
			
			ОкрП000200009003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
				ФорматОкругленияЧисла, ЭлементТабл.Данные.П000200009003);
			
			ОкрП000200010003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
				ФорматОкругленияЧисла, ЭлементТабл.Данные.П000200010003);
			
			Если ОкрП000200008003 = 0 Тогда
				ЭлементТабл.Данные.П000200006003 = ОкрП000200009003;
			Иначе
				ЭлементТабл.Данные.П000200006003 = ОкрП000200008003 + ОкрП000200009003 - ОкрП000200010003;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
				
	// Раздел 3 Приложение 1.
	//		
	Для Каждого ЭлементТабл Из РазделыОтчета.Раздел3_Прил1.Данные Цикл
		
		Колонка4 = 0;
		
		Для Ном = 1 По 10 Цикл
			
			ЭлементТабл.Данные["П000310007004_" + Ном]
				= РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла,
					ЭлементТабл.Данные["П000310006001"]) / 10 * ЭлементТабл.Данные["П000310007003_" + Ном] / 100;
					
			Колонка4 = Колонка4 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
				ФорматОкругленияЧисла, ЭлементТабл.Данные["П000310007004_" + Ном]);
			
		КонецЦикла;
			
		ЭлементТабл.Данные.П000310008004 = Колонка4;
		
	КонецЦикла;
			
	// Раздел 3 Приложение 2.
	//		
	ТаблицаБлока = РазделыОтчета.Раздел3_Прил2.ДанныеДопСтрок;
	
	Колонка2 = 0;
	Колонка3 = 0;
	
	Для Каждого ЭлементТабл Из ТаблицаБлока Цикл
		
		Колонка2 = Колонка2 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
			ФорматОкругленияЧисла, ЭлементТабл.П000320000102);
			
		Колонка3 = Колонка3 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
			ФорматОкругленияЧисла, ЭлементТабл.П000320000103);	
		
	КонецЦикла;
	
	РазделыОтчета.Раздел3_Прил2.Данные.П000320000202 = Колонка2;
	РазделыОтчета.Раздел3_Прил2.Данные.П000320000203 = Колонка3;
	
	// Раздел 3.
	//
	Если ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2019Кв1") Тогда
		
		ОкрП000300001003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
		ФорматОкругленияЧисла, РазделыОтчета.Раздел3.Данные.П000300001003);
		РазделыОтчета.Раздел3.Данные.П000300001005 = ОкрП000300001003 * 20 / 100;
		
		ОкрП000300002003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
		ФорматОкругленияЧисла, РазделыОтчета.Раздел3.Данные.П000300002003);
		РазделыОтчета.Раздел3.Данные.П000300002005 = ОкрП000300002003 * 10 / 100;
		
		ОкрП000300003003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
		ФорматОкругленияЧисла, РазделыОтчета.Раздел3.Данные.П000300003003);
		РазделыОтчета.Раздел3.Данные.П000300003005 = ОкрП000300003003 * 20 / 120;
		
		ОкрП000300004003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
		ФорматОкругленияЧисла, РазделыОтчета.Раздел3.Данные.П000300004003);
		РазделыОтчета.Раздел3.Данные.П000300004005 = ОкрП000300004003 * 10 / 110;
		
		ОкрП000300004103 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
		ФорматОкругленияЧисла, РазделыОтчета.Раздел3.Данные.П000300004103);
		РазделыОтчета.Раздел3.Данные.П000300004105 = ОкрП000300004103 * 18 / 100;
		
		ОкрП000300004203 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
		ФорматОкругленияЧисла, РазделыОтчета.Раздел3.Данные.П000300004203);
		РазделыОтчета.Раздел3.Данные.П000300004205 = ОкрП000300004203 * 18 / 118;
		
		ОкрП000300004503 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
		ФорматОкругленияЧисла, РазделыОтчета.Раздел3.Данные.П000300004503);
		РазделыОтчета.Раздел3.Данные.П000300004505 = ОкрП000300004503 * 20 / 100;
		
		ОкрП000300004603 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
		ФорматОкругленияЧисла, РазделыОтчета.Раздел3.Данные.П000300004603);
		РазделыОтчета.Раздел3.Данные.П000300004605 = ОкрП000300004603 * 10 / 100;
		
		ОкрП000300006003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
		ФорматОкругленияЧисла, РазделыОтчета.Раздел3.Данные.П000300006003);
		РазделыОтчета.Раздел3.Данные.П000300006005 = ОкрП000300006003 * 20 / 100;
		
		ОкрП000300001005 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
		ФорматОкругленияЧисла, РазделыОтчета.Раздел3.Данные.П000300001005);
		ОкрП000300002005 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
		ФорматОкругленияЧисла, РазделыОтчета.Раздел3.Данные.П000300002005);
		ОкрП000300003005 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
		ФорматОкругленияЧисла, РазделыОтчета.Раздел3.Данные.П000300003005);
		ОкрП000300004005 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
		ФорматОкругленияЧисла, РазделыОтчета.Раздел3.Данные.П000300004005);
		ОкрП000300004105 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
		ФорматОкругленияЧисла, РазделыОтчета.Раздел3.Данные.П000300004105);
		ОкрП000300004205 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
		ФорматОкругленияЧисла, РазделыОтчета.Раздел3.Данные.П000300004205);
		ОкрП000300004505 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
		ФорматОкругленияЧисла, РазделыОтчета.Раздел3.Данные.П000300004505);
		ОкрП000300004605 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
		ФорматОкругленияЧисла, РазделыОтчета.Раздел3.Данные.П000300004605);
		ОкрП000300005005 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
		ФорматОкругленияЧисла, РазделыОтчета.Раздел3.Данные.П000300005005);
		ОкрП000300006005 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
		ФорматОкругленияЧисла, РазделыОтчета.Раздел3.Данные.П000300006005);
		ОкрП000300007005 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
		ФорматОкругленияЧисла, РазделыОтчета.Раздел3.Данные.П000300007005);
		ОкрП000300008005 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
		ФорматОкругленияЧисла, РазделыОтчета.Раздел3.Данные.П000300008005);
		ОкрП000300010505 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
		ФорматОкругленияЧисла, РазделыОтчета.Раздел3.Данные.П000300010505);
		ОкрП000300010905 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
		ФорматОкругленияЧисла, РазделыОтчета.Раздел3.Данные.П000300010905);
		ОкрП000300011005 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
		ФорматОкругленияЧисла, РазделыОтчета.Раздел3.Данные.П000300011005);
		ОкрП000300011505 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
		ФорматОкругленияЧисла, РазделыОтчета.Раздел3.Данные.П000300011505);
		
		РазделыОтчета.Раздел3.Данные.П000300011805
		= ОкрП000300001005 + ОкрП000300002005 + ОкрП000300003005 + ОкрП000300004005
		+ ОкрП000300004105 + ОкрП000300004205 + ОкрП000300004505 + ОкрП000300004605
		+ ОкрП000300005005 + ОкрП000300006005 + ОкрП000300007005 + ОкрП000300008005
		+ ОкрП000300010505 + ОкрП000300010905 + ОкрП000300011005 + ОкрП000300011505;
		
		ОкрП000300012003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
		ФорматОкругленияЧисла, РазделыОтчета.Раздел3.Данные.П000300012003);
		ОкрП000300013003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
		ФорматОкругленияЧисла, РазделыОтчета.Раздел3.Данные.П000300013003);
		ОкрП000300013503 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
		ФорматОкругленияЧисла, РазделыОтчета.Раздел3.Данные.П000300013503);
		ОкрП000300014003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
		ФорматОкругленияЧисла, РазделыОтчета.Раздел3.Данные.П000300014003);
		ОкрП000300015003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
		ФорматОкругленияЧисла, РазделыОтчета.Раздел3.Данные.П000300015003);
		ОкрП000300016003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
		ФорматОкругленияЧисла, РазделыОтчета.Раздел3.Данные.П000300016003);
		ОкрП000300017003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
		ФорматОкругленияЧисла, РазделыОтчета.Раздел3.Данные.П000300017003);
		ОкрП000300018003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
		ФорматОкругленияЧисла, РазделыОтчета.Раздел3.Данные.П000300018003);
		ОкрП000300018503 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
		ФорматОкругленияЧисла, РазделыОтчета.Раздел3.Данные.П000300018503);
		
		РазделыОтчета.Раздел3.Данные.П000300019003 = ОкрП000300012003
		+ ОкрП000300013003 + ОкрП000300013503 + ОкрП000300014003 + ОкрП000300015003
		+ ОкрП000300016003 + ОкрП000300017003 + ОкрП000300018003 + ОкрП000300018503;
		
		РазделыОтчета.Раздел3.Данные.П000300020003
		= Макс(РазделыОтчета.Раздел3.Данные.П000300011805 - РазделыОтчета.Раздел3.Данные.П000300019003, 0);
		
		РазделыОтчета.Раздел3.Данные.П000300021003
		= Макс(РазделыОтчета.Раздел3.Данные.П000300019003 - РазделыОтчета.Раздел3.Данные.П000300011805, 0);
		
	Иначе// "ФормаОтчета2017Кв1"
		
		ОкрП000300001003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
		ФорматОкругленияЧисла, РазделыОтчета.Раздел3.Данные.П000300001003);
		РазделыОтчета.Раздел3.Данные.П000300001005 = ОкрП000300001003 * 18 / 100;
		
		ОкрП000300002003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
		ФорматОкругленияЧисла, РазделыОтчета.Раздел3.Данные.П000300002003);
		РазделыОтчета.Раздел3.Данные.П000300002005 = ОкрП000300002003 * 10 / 100;
		
		ОкрП000300003003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
		ФорматОкругленияЧисла, РазделыОтчета.Раздел3.Данные.П000300003003);
		РазделыОтчета.Раздел3.Данные.П000300003005 = ОкрП000300003003 * 18 / 118;
		
		ОкрП000300004003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
		ФорматОкругленияЧисла, РазделыОтчета.Раздел3.Данные.П000300004003);
		РазделыОтчета.Раздел3.Данные.П000300004005 = ОкрП000300004003 * 10 / 110;
		
		ОкрП000300004103 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
		ФорматОкругленияЧисла, РазделыОтчета.Раздел3.Данные.П000300004103);
		РазделыОтчета.Раздел3.Данные.П000300004105 = ОкрП000300004103 * 18 / 118;
		
		ОкрП000300004203 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
		ФорматОкругленияЧисла, РазделыОтчета.Раздел3.Данные.П000300004203);
		РазделыОтчета.Раздел3.Данные.П000300004205 = ОкрП000300004203 * 10 / 110;
		
		ОкрП000300006003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
		ФорматОкругленияЧисла, РазделыОтчета.Раздел3.Данные.П000300006003);
		РазделыОтчета.Раздел3.Данные.П000300006005 = ОкрП000300006003 * 18 / 100;
		
		ОкрП000300010503 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
		ФорматОкругленияЧисла, РазделыОтчета.Раздел3.Данные.П000300010503);
		РазделыОтчета.Раздел3.Данные.П000300010505 = ОкрП000300010503 * 18 / 100;
		
		ОкрП000300010603 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
		ФорматОкругленияЧисла, РазделыОтчета.Раздел3.Данные.П000300010603);
		РазделыОтчета.Раздел3.Данные.П000300010605 = ОкрП000300010603 * 10 / 100;
		
		ОкрП000300010703 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
		ФорматОкругленияЧисла, РазделыОтчета.Раздел3.Данные.П000300010703);
		РазделыОтчета.Раздел3.Данные.П000300010705 = ОкрП000300010703 * 18 / 118;
		
		ОкрП000300010803 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
		ФорматОкругленияЧисла, РазделыОтчета.Раздел3.Данные.П000300010803);
		РазделыОтчета.Раздел3.Данные.П000300010805 = ОкрП000300010803 * 10 / 110;
		
		ОкрП000300001005 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
		ФорматОкругленияЧисла, РазделыОтчета.Раздел3.Данные.П000300001005);
		ОкрП000300002005 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
		ФорматОкругленияЧисла, РазделыОтчета.Раздел3.Данные.П000300002005);
		ОкрП000300003005 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
		ФорматОкругленияЧисла, РазделыОтчета.Раздел3.Данные.П000300003005);
		ОкрП000300004005 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
		ФорматОкругленияЧисла, РазделыОтчета.Раздел3.Данные.П000300004005);
		ОкрП000300004105 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
		ФорматОкругленияЧисла, РазделыОтчета.Раздел3.Данные.П000300004105);
		ОкрП000300004205 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
		ФорматОкругленияЧисла, РазделыОтчета.Раздел3.Данные.П000300004205);
		ОкрП000300005005 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
		ФорматОкругленияЧисла, РазделыОтчета.Раздел3.Данные.П000300005005);
		ОкрП000300006005 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
		ФорматОкругленияЧисла, РазделыОтчета.Раздел3.Данные.П000300006005);
		ОкрП000300007005 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
		ФорматОкругленияЧисла, РазделыОтчета.Раздел3.Данные.П000300007005);
		ОкрП000300008005 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
		ФорматОкругленияЧисла, РазделыОтчета.Раздел3.Данные.П000300008005);
		ОкрП000300010505 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
		ФорматОкругленияЧисла, РазделыОтчета.Раздел3.Данные.П000300010505);
		ОкрП000300010605 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
		ФорматОкругленияЧисла, РазделыОтчета.Раздел3.Данные.П000300010605);
		ОкрП000300010705 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
		ФорматОкругленияЧисла, РазделыОтчета.Раздел3.Данные.П000300010705);
		ОкрП000300010805 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
		ФорматОкругленияЧисла, РазделыОтчета.Раздел3.Данные.П000300010805);
		ОкрП000300010905 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
		ФорматОкругленияЧисла, РазделыОтчета.Раздел3.Данные.П000300010905);
		ОкрП000300011005 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
		ФорматОкругленияЧисла, РазделыОтчета.Раздел3.Данные.П000300011005);
		ОкрП000300011505 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
		ФорматОкругленияЧисла, РазделыОтчета.Раздел3.Данные.П000300011505);
		
		РазделыОтчета.Раздел3.Данные.П000300011805
		= ОкрП000300001005 + ОкрП000300002005 + ОкрП000300003005 + ОкрП000300004005
		+ ОкрП000300004105 + ОкрП000300004205 + ОкрП000300005005 + ОкрП000300006005
		+ ОкрП000300007005 + ОкрП000300008005 + ОкрП000300010505 + ОкрП000300010605
		+ ОкрП000300010705 + ОкрП000300010805 + ОкрП000300010905 + ОкрП000300011005
		+ ОкрП000300011505;
		
		ОкрП000300012003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
		ФорматОкругленияЧисла, РазделыОтчета.Раздел3.Данные.П000300012003);
		ОкрП000300013003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
		ФорматОкругленияЧисла, РазделыОтчета.Раздел3.Данные.П000300013003);
		ОкрП000300014003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
		ФорматОкругленияЧисла, РазделыОтчета.Раздел3.Данные.П000300014003);
		ОкрП000300015003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
		ФорматОкругленияЧисла, РазделыОтчета.Раздел3.Данные.П000300015003);
		ОкрП000300016003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
		ФорматОкругленияЧисла, РазделыОтчета.Раздел3.Данные.П000300016003);
		ОкрП000300017003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
		ФорматОкругленияЧисла, РазделыОтчета.Раздел3.Данные.П000300017003);
		ОкрП000300018003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
		ФорматОкругленияЧисла, РазделыОтчета.Раздел3.Данные.П000300018003);
		ОкрП000300018503 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
		ФорматОкругленияЧисла, РазделыОтчета.Раздел3.Данные.П000300018503);
		
		РазделыОтчета.Раздел3.Данные.П000300019003
		= ОкрП000300012003 + ОкрП000300013003 + ОкрП000300014003 + ОкрП000300015003
		+ ОкрП000300016003 + ОкрП000300017003 + ОкрП000300018003 + ОкрП000300018503;
		
		РазделыОтчета.Раздел3.Данные.П000300020003
		= Макс(РазделыОтчета.Раздел3.Данные.П000300011805 - РазделыОтчета.Раздел3.Данные.П000300019003, 0);
		
		РазделыОтчета.Раздел3.Данные.П000300021003
		= Макс(РазделыОтчета.Раздел3.Данные.П000300019003 - РазделыОтчета.Раздел3.Данные.П000300011805, 0);
		
	КонецЕсли;
	
	// Раздел 4.
	//
	СуммаП0004М1003003 = 0;
	СуммаП0004М1004003 = 0;
	СуммаП0004М1005003 = 0;
	СуммаП0004М2008003 = 0;
	
	Для Ном = 1 По РазделыОтчета.Раздел4.ДанныеДопСтрок.П0004М100.Количество() Цикл
		
		СуммаП0004М1003003 = СуммаП0004М1003003 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
			ФорматОкругленияЧисла, РазделыОтчета.Раздел4.ДанныеДопСтрок.П0004М100[Ном - 1].П0004М1003003);
		
		СуммаП0004М1004003 = СуммаП0004М1004003 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
			ФорматОкругленияЧисла, РазделыОтчета.Раздел4.ДанныеДопСтрок.П0004М100[Ном - 1].П0004М1004003);
		
		СуммаП0004М1005003 = СуммаП0004М1005003 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
			ФорматОкругленияЧисла, РазделыОтчета.Раздел4.ДанныеДопСтрок.П0004М100[Ном - 1].П0004М1005003);
		
	КонецЦикла;
	
	Для Ном = 1 По РазделыОтчета.Раздел4.ДанныеДопСтрок.П0004М200.Количество() Цикл
		
		СуммаП0004М2008003 = СуммаП0004М2008003 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
			ФорматОкругленияЧисла, РазделыОтчета.Раздел4.ДанныеДопСтрок.П0004М200[Ном - 1].П0004М2008003);
		
	КонецЦикла;
	
	РазделыОтчета.Раздел4.Данные.П000400012003
		= Макс((СуммаП0004М1003003 + СуммаП0004М1004003) - (СуммаП0004М1005003 + СуммаП0004М2008003), 0);
	
	РазделыОтчета.Раздел4.Данные.П000400013003
		= Макс((СуммаП0004М1005003 + СуммаП0004М2008003) - (СуммаП0004М1003003 + СуммаП0004М1004003), 0);
	
	// Раздел 5.
	//
	СуммаП000500005003 = 0;
	СуммаП000500007003 = 0;
	
	Для Каждого ЭлементТабл Из РазделыОтчета.Раздел5.Данные Цикл
		
		Если ЭлементТабл.ДанныеДопСтрок.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ЭлементТаблДанныеДопСтрок = ЭлементТабл.ДанныеДопСтрок;
						
		Для Ном = 0 По ЭлементТаблДанныеДопСтрок.Количество() - 1 Цикл
			
			СуммаП000500005003 = СуммаП000500005003 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
				ФорматОкругленияЧисла, ЭлементТаблДанныеДопСтрок[Ном].П000500005003);
				
			СуммаП000500007003 = СуммаП000500007003 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
				ФорматОкругленияЧисла, ЭлементТаблДанныеДопСтрок[Ном].П000500007003);	
				
		КонецЦикла;
		
	КонецЦикла;
	
	Для Каждого ЭлементТабл Из РазделыОтчета.Раздел5.Данные Цикл
		
		Если НЕ ЭлементТабл.Данные.Количество() = 0 Тогда
			
			ЭлементТабл.Данные.П000500008003 = СуммаП000500005003;
			ЭлементТабл.Данные.П000500009003 = СуммаП000500007003;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Раздел 6.
	//
	СуммаП0006М1003003 = 0;
	СуммаП0006М1004003 = 0;
	СуммаП0006М2009003 = 0;
	СуммаП0006М2010003 = 0;
	СуммаП0006М3013003 = 0;
	СуммаП0006М3015003 = 0;
				
	Для Ном = 1 По РазделыОтчета.Раздел6.ДанныеДопСтрок.П0006М100.Количество() Цикл
		
		СуммаП0006М1003003 = СуммаП0006М1003003 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
			ФорматОкругленияЧисла, РазделыОтчета.Раздел6.ДанныеДопСтрок.П0006М100[Ном - 1].П0006М1003003);
			
		СуммаП0006М1004003 = СуммаП0006М1004003 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
			ФорматОкругленияЧисла, РазделыОтчета.Раздел6.ДанныеДопСтрок.П0006М100[Ном - 1].П0006М1004003);	
			
	КонецЦикла;
				
	РазделыОтчета.Раздел6.Данные.П000600005003 = СуммаП0006М1003003;
	РазделыОтчета.Раздел6.Данные.П000600006003 = СуммаП0006М1004003;
				
	П000600005003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
		ФорматОкругленияЧисла, РазделыОтчета.Раздел6.Данные.П000600005003);
		
	П000600006003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
		ФорматОкругленияЧисла, РазделыОтчета.Раздел6.Данные.П000600006003);
				
	Для Ном = 1 По РазделыОтчета.Раздел6.ДанныеДопСтрок.П0006М200.Количество() Цикл
			
		СуммаП0006М2009003 = СуммаП0006М2009003 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
			ФорматОкругленияЧисла, РазделыОтчета.Раздел6.ДанныеДопСтрок.П0006М200[Ном - 1].П0006М2009003);
					
		СуммаП0006М2010003 = СуммаП0006М2010003 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
			ФорматОкругленияЧисла, РазделыОтчета.Раздел6.ДанныеДопСтрок.П0006М200[Ном - 1].П0006М2010003);
					
	КонецЦикла;
				
	Для Ном = 1 По РазделыОтчета.Раздел6.ДанныеДопСтрок.П0006М300.Количество() Цикл
		
		СуммаП0006М3013003 = СуммаП0006М3013003 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
			ФорматОкругленияЧисла, РазделыОтчета.Раздел6.ДанныеДопСтрок.П0006М300[Ном - 1].П0006М3013003);
			
		СуммаП0006М3015003 = СуммаП0006М3015003 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
			ФорматОкругленияЧисла, РазделыОтчета.Раздел6.ДанныеДопСтрок.П0006М300[Ном - 1].П0006М3015003);
			
	КонецЦикла;
				
	РазделыОтчета.Раздел6.Данные.П000600016003
		= Макс((П000600005003 + СуммаП0006М2010003 + СуммаП0006М3013003)
		- (П000600006003 + СуммаП0006М2009003 + СуммаП0006М3015003), 0);
				
	РазделыОтчета.Раздел6.Данные.П000600017003
		= Макс((П000600006003 + СуммаП0006М2009003 + СуммаП0006М3015003)
		- (П000600005003 + СуммаП0006М2010003 + СуммаП0006М3013003), 0);
	
	// Раздел 1.
	//
	КодОКТМО = СокрЛП(РазделыОтчета.Раздел1.Данные.П000100001003);
			
	Если ЗначениеЗаполнено(КодОКТМО) Тогда
				
		ОкрП000300020003 = 0;
		ОкрП000300021003 = 0;
		ОкрП000400012003 = 0;
		ОкрП000400013003 = 0;
		ОкрП000500008003 = 0;
		ОкрП000500009003 = 0;
		ОкрП000600016003 = 0;
		ОкрП000600017003 = 0;
				
		Если РазделыОтчета.Раздел3.Данные.Свойство("П000300020003") Тогда
			
			ОкрП000300020003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
				ФорматОкругленияЧисла, РазделыОтчета.Раздел3.Данные.П000300020003);
			
		КонецЕсли;
		
		Если РазделыОтчета.Раздел3.Данные.Свойство("П000300021003") Тогда
			
			ОкрП000300021003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
				ФорматОкругленияЧисла, РазделыОтчета.Раздел3.Данные.П000300021003);
			
		КонецЕсли;
		
		Если РазделыОтчета.Раздел4.Данные.Свойство("П000400012003") Тогда
			
			ОкрП000400012003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
				ФорматОкругленияЧисла, РазделыОтчета.Раздел4.Данные.П000400012003);
			
		КонецЕсли;
		
		Если РазделыОтчета.Раздел4.Данные.Свойство("П000400013003") Тогда
			
			ОкрП000400013003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
				ФорматОкругленияЧисла, РазделыОтчета.Раздел4.Данные.П000400013003);
			
		КонецЕсли;
				
		Если РазделыОтчета.Раздел6.Данные.Свойство("П000600016003") Тогда
			
			ОкрП000600016003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
				ФорматОкругленияЧисла, РазделыОтчета.Раздел6.Данные.П000600016003);
				
		КонецЕсли;
				
		Если РазделыОтчета.Раздел6.Данные.Свойство("П000600017003") Тогда
			
			ОкрП000600017003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
				ФорматОкругленияЧисла, РазделыОтчета.Раздел6.Данные.П000600017003);
				
		КонецЕсли;
			
		ОкрП000500008003 = СуммаП000500005003;
		ОкрП000500009003 = СуммаП000500007003;
				
		СуммаНалога	= (ОкрП000300020003 + ОкрП000400013003 + ОкрП000600016003)
					- (ОкрП000300021003 + ОкрП000400012003 + ОкрП000500008003 + ОкрП000500009003 + ОкрП000600017003);
				
	Иначе
				
		СуммаНалога = 0;
				
	КонецЕсли;
			
	РазделыОтчета.Раздел1.Данные.Вставить("П000100004003", Макс(СуммаНалога, 0));
	РазделыОтчета.Раздел1.Данные.Вставить("П000100005003", Макс(-СуммаНалога, 0));
			
КонецПроцедуры

Процедура ЗаполнитьЗначенияПолейПоУмолчанию(ИмяФормы,
											СтруктураДанныхРаздел1,
											ТаблицаСтраницыРаздела2,
											СтруктураРеквизитовФормы) Экспорт
	
	ЗаполнитьРаздел1ПоУмолчанию(ИмяФормы,
							 	СтруктураДанныхРаздел1,
								СтруктураРеквизитовФормы);
		
	Для Каждого СтраницаРаздела2 Из ТаблицаСтраницыРаздела2 Цикл
		
		Если СтраницаРаздела2.Данные.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТипЗнч(СтраницаРаздела2.Данные) = Тип("СписокЗначений") Тогда
			
			СтраницаРаздела2Данные = СтраницаРаздела2.Данные[0].Значение;
			
		Иначе
			
			СтраницаРаздела2Данные = СтраницаРаздела2.Данные;
			
		КонецЕсли;
				
		Для Каждого ПоказательСтраницыРаздела2 Из СтраницаРаздела2Данные Цикл
			
			Если НЕ ПоказательСтраницыРаздела2.Ключ = "П000200005003"
			   И ЗначениеЗаполнено(ПоказательСтраницыРаздела2.Значение) Тогда
				
				СтраницаРаздела2Данные.Вставить("П000200004003", СтруктураРеквизитовФормы.КБКПоУмолчанию);
				
				Прервать;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ЗаполнитьСведенияНДС(ИмяФормы, Контейнер, ИмяРаздела, СписокСтраницРаздела, СтруктураРеквизитовФормы) Экспорт
	
	ТипБулево = Новый ОписаниеТипов("Булево");
	
	Если Контейнер[ИмяРаздела].Свойство("ФормироватьТабличныйДокумент") Тогда
		
		ПризнакЗаполнения = Контейнер[ИмяРаздела].ФормироватьТабличныйДокумент;
		
	Иначе
		
		ПризнакЗаполнения = Ложь;
		
	КонецЕсли;
	
	ПризнакЗаполнения = ТипБулево.ПривестиЗначение(ПризнакЗаполнения);
	
	СтруктураРеквизитовФормы.ВыполненоЗаполнениеРазделов.Вставить(ИмяРаздела, ПризнакЗаполнения);
	
	Возврат СписокСекцийРазделаИзРегистра(ИмяФормы, ИмяРаздела, СписокСтраницРаздела, СтруктураРеквизитовФормы);
	
КонецФункции

Функция ДатаНачалаРасширенногоПериодаОтчета(ИмяФормы, СтруктураРеквизитовФормы) Экспорт
	
	ДатаРегистрацииОрганизации
		= РегламентированнаяОтчетность.ДатаРегистрацииОрганизации(СтруктураРеквизитовФормы.Организация);
	
	ПервыйНалоговыйПериод = ИнтерфейсыВзаимодействияБРО.БлижайшийНалоговыйПериод(
		СтруктураРеквизитовФормы.Организация, ДатаРегистрацииОрганизации,
		Перечисления.ВариантыРасширенногоПервогоНалоговогоПериода.РегистрацияВПоследние10ДнейКвартала);
	
	КонецПервогоНалоговогоПериода = КонецДня(ПервыйНалоговыйПериод.Конец);
	
	Если КонецПервогоНалоговогоПериода >= КонецГода('20171231')
	   И КонецПервогоНалоговогоПериода = СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета Тогда
		
		Возврат НачалоДня(Мин(ПервыйНалоговыйПериод.Начало, ПервыйНалоговыйПериод.Период));
		
	КонецЕсли;
	
	Возврат НачалоКвартала(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	
КонецФункции

Процедура СформироватьСтруктуруРеквизитовФормы(ИмяФормы, СтруктураРеквизитовФормы) Экспорт

	СтруктураРеквизитовФормы = Новый Структура;
	СтруктураРеквизитовФормы.Вставить("мВерсияФормы", "01/01/" + Лев(Прав(СокрЛП(ИмяФормы), 7), 4));
	СтруктураРеквизитовФормы.Вставить("мСоставПоказателей", "СоставПоказателей" + Прав(СокрЛП(ИмяФормы), 7));
	СтруктураРеквизитовФормы.Вставить("мКодОтчета", "1151001");
	СтруктураРеквизитовФормы.Вставить("НаименованиеОтчета", "Декларация по НДС");
	СтруктураРеквизитовФормы.Вставить("КБКПоУмолчанию", "18210301000011000110");
	СтруктураРеквизитовФормы.Вставить("мИдГруппы31",  "П0003100070");
	СтруктураРеквизитовФормы.Вставить("мИдГруппы32",  "П0003200001");
	СтруктураРеквизитовФормы.Вставить("мИдГруппы4М1", "П0004М100");
	СтруктураРеквизитовФормы.Вставить("мИдГруппы4М2", "П0004М200");
	СтруктураРеквизитовФормы.Вставить("мИдГруппы4М3", "П0004М300");
	СтруктураРеквизитовФормы.Вставить("мИдГруппы5",   "П00050000");
	СтруктураРеквизитовФормы.Вставить("мИдГруппы6М1", "П0006М100");
	СтруктураРеквизитовФормы.Вставить("мИдГруппы6М2", "П0006М200");
	СтруктураРеквизитовФормы.Вставить("мИдГруппы6М3", "П0006М300");
	СтруктураРеквизитовФормы.Вставить("мИдГруппы7",   "П0007000001");
	СтруктураРеквизитовФормы.Вставить("ПодключенДокументооборотСКонтролирующимОрганом", Ложь);
	СтруктураРеквизитовФормы.Вставить("АвтоЗаполнениеРеглОтчетаДоступно", Истина);
	СтруктураРеквизитовФормы.Вставить("ОтчетСтарогоОбразца", Ложь);
	СтруктураРеквизитовФормы.Вставить("ОтчетСформированОбработкойКонсолидацияОтчетностиПоНДС", Ложь);
	СтруктураРеквизитовФормы.Вставить("мСохранятьРасшифровку", Истина);
	СтруктураРеквизитовФормы.Вставить("ФлажокОтклАвтоРасчет", Ложь);
	СтруктураРеквизитовФормы.Вставить("ОтображатьКнопкуЗаполнить", Ложь);
	СтруктураРеквизитовФормы.Вставить("ОтображатьКнопкуРасшифровать", Ложь);
	СтруктураРеквизитовФормы.Вставить("АдресХранилищаПроверкиВыгрузки", Неопределено);
	СтруктураРеквизитовФормы.Вставить("ГруппаОрганизаций", Новый СписокЗначений);
	СтруктураРеквизитовФормы.Вставить("ВыполненоЗаполнениеРазделов", НовыйНаборПризнаковЗаполнения(ИмяФормы));
	СтруктураРеквизитовФормы.Вставить("АвтозаполнениеРазделовВТекущейСессии", НовыйНаборПризнаковАвтозаполнения(ИмяФормы));
	СтруктураРеквизитовФормы.Вставить("АктуальностьСведенийРаздел8", 0);
	СтруктураРеквизитовФормы.Вставить("АктуальностьСведенийРаздел8_Прил1", 0);
	СтруктураРеквизитовФормы.Вставить("АктуальностьСведенийРаздел9", 0);
	СтруктураРеквизитовФормы.Вставить("АктуальностьСведенийРаздел9_Прил1", 0);
	СтруктураРеквизитовФормы.Вставить("АктуальностьСведенийРаздел10", 0);
	СтруктураРеквизитовФормы.Вставить("АктуальностьСведенийРаздел11", 0);
	СтруктураРеквизитовФормы.Вставить("АктуальностьСведенийРаздел12", 0);
	СтруктураРеквизитовФормы.Вставить("ОКВЭД",  "");
	СтруктураРеквизитовФормы.Вставить("ОКВЭД2", "");
	СтруктураРеквизитовФормы.Вставить("КодТерриториальногоОбразования", "");
	СтруктураРеквизитовФормы.Вставить("ЕдиницаИзмерения");
	СтруктураРеквизитовФормы.Вставить("ТочностьЕдиницыИзмерения", 0);
	СтруктураРеквизитовФормы.Вставить("Организация");
	СтруктураРеквизитовФормы.Вставить("ВидДокумента");
	СтруктураРеквизитовФормы.Вставить("ДатаНачалаАвтозаполнения");
	СтруктураРеквизитовФормы.Вставить("ИП");
	СтруктураРеквизитовФормы.Вставить("мАвтоВыборКодов");
	СтруктураРеквизитовФормы.Вставить("мБезОткрытияФормы");
	СтруктураРеквизитовФормы.Вставить("мВариант");
	СтруктураРеквизитовФормы.Вставить("мВыбраннаяФорма");
	СтруктураРеквизитовФормы.Вставить("мДатаКонцаПериодаОтчета");
	СтруктураРеквизитовФормы.Вставить("мДатаНачалаПериодаОтчета");
	СтруктураРеквизитовФормы.Вставить("мДокументПредставителя");
	СтруктураРеквизитовФормы.Вставить("мЗаписываетсяНовыйДокумент");
	СтруктураРеквизитовФормы.Вставить("мЗаписьЗапрещена");
	СтруктураРеквизитовФормы.Вставить("мИмяПредставителя");
	СтруктураРеквизитовФормы.Вставить("мНазваниеПредставителя");
	СтруктураРеквизитовФормы.Вставить("мОписаниеТиповЧислоЕ");
	СтруктураРеквизитовФормы.Вставить("мОтчествоПредставителя");
	СтруктураРеквизитовФормы.Вставить("мПериодичность");
	СтруктураРеквизитовФормы.Вставить("мПечатаемыеРазделы");
	СтруктураРеквизитовФормы.Вставить("мПечатныеФормы");
	СтруктураРеквизитовФормы.Вставить("мПечатьБезШтрихкодаРазрешена");
	СтруктураРеквизитовФормы.Вставить("мПредставительФизЛицо");
	СтруктураРеквизитовФормы.Вставить("мРежимПечати");
	СтруктураРеквизитовФормы.Вставить("мСкопированаФорма");
	СтруктураРеквизитовФормы.Вставить("мСохраненныйДок");
	СтруктураРеквизитовФормы.Вставить("мСтрокаФормата");
	СтруктураРеквизитовФормы.Вставить("мСчетчикСтраниц");
	СтруктураРеквизитовФормы.Вставить("мФамилияПредставителя");
	СтруктураРеквизитовФормы.Вставить("СправочникиВидыКонтактнойИнформацииФактАдресОрганизации");
	СтруктураРеквизитовФормы.Вставить("ЦветЗаполняетсяАвтоАрифметика");
	СтруктураРеквизитовФормы.Вставить("НаимОрганизации");
	СтруктураРеквизитовФормы.Вставить("СтрПериодОтчета");
	СтруктураРеквизитовФормы.Вставить("ВыводитьСтраницуВТаблДокНаСервере");
	СтруктураРеквизитовФормы.Вставить("НаимТекущегоРаздела");
	СтруктураРеквизитовФормы.Вставить("НомерТекущейСтраницы");
	СтруктураРеквизитовФормы.Вставить("ТекущаяСтрокаРазделовОтчета");
	СтруктураРеквизитовФормы.Вставить("ДоступенМеханизмПечатиРеглОтчетностиСДвухмернымШтрихкодомPDF417");
	СтруктураРеквизитовФормы.Вставить("ТекстДляЗаголовочнойЧасти");
	СтруктураРеквизитовФормы.Вставить("мПроверятьСоотношенияПриПечатиИВыгрузки");
	СтруктураРеквизитовФормы.Вставить("АдресВременногоХранилищаРасшифровки");
	СтруктураРеквизитовФормы.Вставить("СформироватьФормуОтчетаАвтоматически");
	СтруктураРеквизитовФормы.Вставить("ИдентификаторЗадания");
	СтруктураРеквизитовФормы.Вставить("АдресВоВременномХранилище");
	СтруктураРеквизитовФормы.Вставить("УспешноеАвтозаполнение");
	СтруктураРеквизитовФормы.Вставить("АвтозаполняемыеПоказатели");
	
КонецПроцедуры

Функция НовыйНаборПризнаковЗаполнения(ИмяФормы) Экспорт
	
	ПризнакиЗаполнения = Новый Структура;
	ПризнакиЗаполнения.Вставить("Раздел8", Ложь);
	ПризнакиЗаполнения.Вставить("Раздел8_Прил1", Ложь);
	ПризнакиЗаполнения.Вставить("Раздел9", Ложь);
	ПризнакиЗаполнения.Вставить("Раздел9_Прил1", Ложь);
	ПризнакиЗаполнения.Вставить("Раздел10", Ложь);
	ПризнакиЗаполнения.Вставить("Раздел11", Ложь);
	ПризнакиЗаполнения.Вставить("Раздел12", Ложь);
	
	Возврат ПризнакиЗаполнения;
	
КонецФункции

Функция НовыйНаборПризнаковАвтозаполнения(ИмяФормы, ВыполнялосьАвтозаполнение = Ложь) Экспорт
	
	Признаки = Новый Структура;
	Признаки.Вставить("Раздел8",       ВыполнялосьАвтозаполнение);
	Признаки.Вставить("Раздел8_Прил1", ВыполнялосьАвтозаполнение);
	Признаки.Вставить("Раздел9",       ВыполнялосьАвтозаполнение);
	Признаки.Вставить("Раздел9_Прил1", ВыполнялосьАвтозаполнение);
	Признаки.Вставить("Раздел10",      ВыполнялосьАвтозаполнение);
	Признаки.Вставить("Раздел11",      ВыполнялосьАвтозаполнение);
	Признаки.Вставить("Раздел12",      ВыполнялосьАвтозаполнение);
	
	Возврат Признаки;
	
КонецФункции

Процедура ЗаполнитьРеглОтчетВнешнимиДанными(ИмяФормы, Приемник, Источник)
	
	// Пример.
	Приемник.Раздел1.П000100001003 = Источник.Раздел1.П000100001003;
	
КонецПроцедуры

Процедура ЗаполнитьПустыеСтруктурыДанных(ИмяФормы, РазделыОтчета)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	Для Каждого Раздел Из РазделыОтчета Цикл
		
		Если Раздел.Значение.Данные.Количество() = 0 Тогда
			
			ТабличныйДокумент.Очистить();
			
			ТабличныйДокумент.Вывести(ЭтотОбъект.ПолучитьМакет(ИмяФормы + "_" + Раздел.Ключ));
			
			ДанныеТабличногоДокумента = СобратьДанные(ИмяФормы, ТабличныйДокумент);
			
			Если Раздел.Значение.МногостраничностьВРазделе Тогда
				
				ДопСтраницаРаздела = Раздел.Значение.Данные.Добавить();
				
				Если Раздел.Ключ = "Раздел5" Тогда
					ДопСтраницаРаздела.Представление = "Лист N 1";
				Иначе
					ДопСтраницаРаздела.Представление = "Новая страница";
				КонецЕсли;
				
				ДопСтраницаРаздела.АктивнаяСтраница = Ложь;
				ДопСтраницаРаздела.АвтоматическоеПредставление = Истина;
				ДопСтраницаРаздела.Данные = ДанныеТабличногоДокумента;
				
				Если Раздел.Значение.Свойство("ДанныеДопСтрок")
					И ТипЗнч(Раздел.Значение.ДанныеДопСтрок) = Тип("ТаблицаЗначений") Тогда
					
					КоличествоДопСтрок = 1;
					
					Если Раздел.Ключ = "Раздел3_Прил1" Тогда
						КоличествоДопСтрок = 10;
					КонецЕсли;
					
					Для НомерСтроки = 1 По КоличествоДопСтрок Цикл
						Раздел.Значение.ДанныеДопСтрок.Добавить();
					КонецЦикла;
					
					Если ТипЗнч(ДопСтраницаРаздела.ДанныеДопСтрок) = Тип("ТаблицаЗначений") Тогда
						ДопСтраницаРаздела.ДанныеДопСтрок = Раздел.Значение.ДанныеДопСтрок;
					КонецЕсли;
					
				КонецЕсли;
				
			Иначе
				
				Раздел.Значение.Данные = ДанныеТабличногоДокумента;
				
				Если Раздел.Значение.Свойство("ДанныеДопСтрок") Тогда
					
					Если ТипЗнч(Раздел.Значение.ДанныеДопСтрок) = Тип("Структура") Тогда
						
						Для Каждого ДопСтрока Из Раздел.Значение.ДанныеДопСтрок Цикл
							
							ДопСтрока.Значение.Добавить();
							
						КонецЦикла;
						
					Иначе
						
						Раздел.Значение.ДанныеДопСтрок.Добавить();
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция СобратьДанные(ИмяФормы, ТабличныйДокумент)
	
	СтруктураДанныхПоля = Новый Структура;
	
	Для Инд = 0 По ТабличныйДокумент.Области.Количество() - 1 Цикл
		
		ТекущаяОбласть = ТабличныйДокумент.Области[Инд];
		
		Если НЕ ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ ТекущаяОбласть.СодержитЗначение = Истина Тогда
			Продолжить;
		КонецЕсли;
		
		ИмяПоказателя      = ТекущаяОбласть.Имя;
		ЗначениеПоказателя = ТекущаяОбласть.Значение;
		
		СтруктураДанныхПоля.Вставить(ИмяПоказателя, ЗначениеПоказателя);
		
	КонецЦикла;
	
	Возврат СтруктураДанныхПоля;
	
КонецФункции

Процедура СформироватьВариантыЗаполнения(ИмяФормы,
										 СтруктураРеквизитовФормы,
										 СтруктураВариантыЗаполнения,
										 ТаблицаСоставПоказателей = Неопределено) Экспорт
	
	МакетСоставаПоказателей = ЭтотОбъект.ПолучитьМакет(СтруктураРеквизитовФормы.мСоставПоказателей);
		
	Для Инд = 0 По МакетСоставаПоказателей.Области.Количество() - 1 Цикл
		
		ТекОбласть  = МакетСоставаПоказателей.Области[Инд];
		ИмяСтраницы = ТекОбласть.Имя;
		
		ТаблицаВариантыЗаполнения = Новый ТаблицаЗначений;
		ТаблицаВариантыЗаполнения.Колонки.Добавить("КодПоказателя",
			Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(50)));
		ТаблицаВариантыЗаполнения.Колонки.Добавить("ВариантЗаполнения",
			Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(1, 0)));
		ТаблицаВариантыЗаполнения.Колонки.Добавить("ЗначениеАвто",
			Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(16, 2)));
		ТаблицаВариантыЗаполнения.Колонки.Добавить("Дельта",
			Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(16, 2)));
		ТаблицаВариантыЗаполнения.Колонки.Добавить("Комментарий",
			Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100)));
		ТаблицаВариантыЗаполнения.Колонки.Добавить("КодПоказателяПоСтруктуре",
			Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(50)));
			
		Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
			
			КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
			ИмяПоказателя = КодПоказателя;
			
			Если КодПоказателя = "===" Тогда
				Прервать;
			КонецЕсли;
			
			Если КодПоказателя = "###" Тогда
				Прервать;
			КонецЕсли;
			
			Если Лев(КодПоказателя, 2) = "//" Тогда
				Продолжить;
			КонецЕсли;
			
			КодПоказателяПоФорме 	 = СокрЛП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
			ПризнМногострочность 	 = СокрЛП(МакетСоставаПоказателей.Область(Ном, 3).Текст);
			ТипДанныхРеквизита	     = СокрЛП(МакетСоставаПоказателей.Область(Ном, 4).Текст);
			стрКолСтрокИсходный 	 = СокрЛП(МакетСоставаПоказателей.Область(Ном, 5).Текст);
			КодПоказателяПоСтруктуре = СокрЛП(МакетСоставаПоказателей.Область(Ном, 9).Текст);						
			
			стрВариантЗаполнения = РегламентированнаяОтчетность.ПолучитьВариантЗаполненияПоказателяРегОтчета(
			МакетСоставаПоказателей, Ном);
			
			чКолСтрокИсходный  = ? (ПустаяСтрока(стрКолСтрокИсходный),  0, Число(стрКолСтрокИсходный));
			чВариантЗаполнения = ? (ПустаяСтрока(стрВариантЗаполнения), 0, Число(стрВариантЗаполнения));
			
			Если ТипЗнч(ТаблицаСоставПоказателей) = Тип("ТаблицаЗначений") Тогда
				
				НоваяСтрока = ТаблицаСоставПоказателей.Добавить();
				НоваяСтрока.ИмяПоляТаблДокумента   	 = ИмяСтраницы;
				НоваяСтрока.КодПоказателяПоСоставу 	 = КодПоказателя;
				НоваяСтрока.КодПоказателяПоФорме   	 = КодПоказателяПоФорме;
				НоваяСтрока.ПризнМногострочности   	 = ПризнМногострочность;
				НоваяСтрока.ТипДанныхПоказателя 	 = ТипДанныхРеквизита;
				НоваяСтрока.КодПоказателяПоСтруктуре = КодПоказателяпоСтруктуре;
				
			КонецЕсли;
			
			Если чВариантЗаполнения <> 0
			 ИЛИ ИмяСтраницы = "Раздел2"
			 ИЛИ ИмяСтраницы = "Раздел7" Тогда
				
				НоваяСтрока = ТаблицаВариантыЗаполнения.Добавить();
				НоваяСтрока.КодПоказателя = ? (НЕ ПустаяСтрока(КодПоказателяПоФорме), КодПоказателяПоФорме, КодПоказателя);
				НоваяСтрока.ВариантЗаполнения = чВариантЗаполнения;
				НоваяСтрока.КодПоказателяПоСтруктуре = КодПоказателяПоСтруктуре;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если ТаблицаВариантыЗаполнения.Количество() > 0 Тогда
			
			МассивВариантовЗаполненияСтраниц = Новый Массив;
			МассивВариантовЗаполненияСтраниц.Добавить(ТаблицаВариантыЗаполнения);
			
			СтруктураВариантыЗаполнения.Вставить(ИмяСтраницы, МассивВариантовЗаполненияСтраниц);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПоказатьПериод(ИмяФормы, СтруктураДанныхТитульный, СтруктураРеквизитовФормы) Экспорт
	
	Если ТипЗнч(СтруктураДанныхТитульный) = Тип("ТабличныйДокумент") Тогда
		
		ПериодОтчета = СтруктураДанныхТитульный.Области.Период.Значение;
		ГодОтчета	 = СтруктураДанныхТитульный.Области.ОтчетГод.Значение;
		
	ИначеЕсли ТипЗнч(СтруктураДанныхТитульный) = Тип("Структура") Тогда
		
		ПериодОтчета = СтруктураДанныхТитульный.Период;
		ГодОтчета	 = СтруктураДанныхТитульный.ОтчетГод;
		
	КонецЕсли;
		
	Если (НЕ ЗначениеЗаполнено(ПериодОтчета)
		И СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено)
		ИЛИ ЗначениеЗаполнено(СтруктураРеквизитовФормы.мСкопированаФорма) Тогда
		
		СоответствиеНомераМесяцаКодуОтчетногоПериода = Новый Соответствие;
		
		СоответствиеНомераМесяцаКодуОтчетногоПериода.Вставить(3,  "21");
		СоответствиеНомераМесяцаКодуОтчетногоПериода.Вставить(6,  "22");
		СоответствиеНомераМесяцаКодуОтчетногоПериода.Вставить(9,  "23");
		СоответствиеНомераМесяцаКодуОтчетногоПериода.Вставить(12, "24");
		
		ПериодОтчета = СоответствиеНомераМесяцаКодуОтчетногоПериода[Месяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета)];
		
	КонецЕсли;
	
	ГодОтчета = Формат(Год(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета), "ЧГ=");
	
	Если ТипЗнч(СтруктураДанныхТитульный) = Тип("ТабличныйДокумент") Тогда
		
		СтруктураДанныхТитульный.Области.Период.Значение   = ПериодОтчета;
		СтруктураДанныхТитульный.Области.ОтчетГод.Значение = ГодОтчета;
		
	ИначеЕсли ТипЗнч(СтруктураДанныхТитульный) = Тип("Структура") Тогда
		
		СтруктураДанныхТитульный.Период   = ПериодОтчета;
		СтруктураДанныхТитульный.ОтчетГод = ГодОтчета;
		
	КонецЕсли;
	
	СтруктураРеквизитовФормы.СтрПериодОтчета
	= ПредставлениеПериода(НачалоДня(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета),
	КонецДня(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета), "ФП = Истина");
	
КонецПроцедуры

Функция СтруктураСтраницОтчета(ИмяФормы) Экспорт
	
	ДеревоСтраницОтчета = Новый ДеревоЗначений;
	
	ДеревоСтраницОтчета.Колонки.Добавить("Представление",
		Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100)));
	ДеревоСтраницОтчета.Колонки.Добавить("ИмяСтраницы",
		Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100)));
	ДеревоСтраницОтчета.Колонки.Добавить("ИмяПоляТабличногоДокум",
		Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100)));
	ДеревоСтраницОтчета.Колонки.Добавить("ИмяОбластиТабличногоПоля",
		Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100)));
	ДеревоСтраницОтчета.Колонки.Добавить("ОриентацияСтраницы");
	ДеревоСтраницОтчета.Колонки.Добавить("ВыводНаПечать",
		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(1, 0)));
	ДеревоСтраницОтчета.Колонки.Добавить("ПоказатьСтраницу",
		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(1, 0)));
	ДеревоСтраницОтчета.Колонки.Добавить("ВыгрузитьСтраницу",
		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(1, 0)));
	
	ДеревоСтраницОтчета.Строки.Очистить();
	
	СтрокаУровня1 = ДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы        = "Титульный";
	СтрокаУровня1.Представление      = "Титульный лист";
	СтрокаУровня1.ОриентацияСтраницы = "Портрет";
	СтрокаУровня1.ВыводНаПечать      = 1;
	СтрокаУровня1.ПоказатьСтраницу   = 1;
	СтрокаУровня1.ВыгрузитьСтраницу  = 2;
	
	СтрокаУровня1 = ДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы        = "Раздел1";
	СтрокаУровня1.Представление      = "Раздел 1";
	СтрокаУровня1.ОриентацияСтраницы = "Портрет";
	СтрокаУровня1.ВыводНаПечать      = 1;
	СтрокаУровня1.ПоказатьСтраницу   = 1;
	СтрокаУровня1.ВыгрузитьСтраницу  = 2;
	
	СтрокаУровня1 = ДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы        = "Раздел2";
	СтрокаУровня1.Представление      = "Раздел 2";
	СтрокаУровня1.ОриентацияСтраницы = "Портрет";
	СтрокаУровня1.ВыводНаПечать      = 1;
	СтрокаУровня1.ПоказатьСтраницу   = 1;
	СтрокаУровня1.ВыгрузитьСтраницу  = 2;
	
	СтрокаУровня1 = ДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы        = "Раздел3";
	СтрокаУровня1.Представление      = "Раздел 3";
	СтрокаУровня1.ОриентацияСтраницы = "Портрет";
	СтрокаУровня1.ВыводНаПечать      = 1;
	СтрокаУровня1.ПоказатьСтраницу   = 1;
	СтрокаУровня1.ВыгрузитьСтраницу  = 2;
	
	СтрокаУровня1 = ДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы        = "Раздел3_Прил1";
	СтрокаУровня1.Представление      = "Раздел 3. Прил. 1";
	СтрокаУровня1.ОриентацияСтраницы = "Портрет";
	СтрокаУровня1.ВыводНаПечать      = 1;
	СтрокаУровня1.ПоказатьСтраницу   = 1;
	СтрокаУровня1.ВыгрузитьСтраницу  = 2;
	
	СтрокаУровня1 = ДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы        = "Раздел3_Прил2";
	СтрокаУровня1.Представление      = "Раздел 3. Прил. 2";
	СтрокаУровня1.ОриентацияСтраницы = "Портрет";
	СтрокаУровня1.ВыводНаПечать      = 1;
	СтрокаУровня1.ПоказатьСтраницу   = 1;
	СтрокаУровня1.ВыгрузитьСтраницу  = 2;
	
	СтрокаУровня1 = ДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы        = "Раздел4";
	СтрокаУровня1.Представление      = "Раздел 4";
	СтрокаУровня1.ОриентацияСтраницы = "Портрет";
	СтрокаУровня1.ВыводНаПечать      = 1;
	СтрокаУровня1.ПоказатьСтраницу   = 1;
	СтрокаУровня1.ВыгрузитьСтраницу  = 2;
	
	СтрокаУровня1 = ДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы        = "Раздел5";
	СтрокаУровня1.Представление      = "Раздел 5";
	СтрокаУровня1.ОриентацияСтраницы = "Портрет";
	СтрокаУровня1.ВыводНаПечать      = 1;
	СтрокаУровня1.ПоказатьСтраницу   = 1;
	СтрокаУровня1.ВыгрузитьСтраницу  = 2;
	
	СтрокаУровня1 = ДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы        = "Раздел6";
	СтрокаУровня1.Представление      = "Раздел 6";
	СтрокаУровня1.ОриентацияСтраницы = "Портрет";
	СтрокаУровня1.ВыводНаПечать      = 1;
	СтрокаУровня1.ПоказатьСтраницу   = 1;
	СтрокаУровня1.ВыгрузитьСтраницу  = 2;
	
	СтрокаУровня1 = ДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы        = "Раздел7";
	СтрокаУровня1.Представление      = "Раздел 7";
	СтрокаУровня1.ОриентацияСтраницы = "Портрет";
	СтрокаУровня1.ВыводНаПечать      = 1;
	СтрокаУровня1.ПоказатьСтраницу   = 1;
	СтрокаУровня1.ВыгрузитьСтраницу  = 2;
	
	СтрокаУровня1 = ДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы        = "Раздел8";
	СтрокаУровня1.Представление      = "Раздел 8";
	СтрокаУровня1.ОриентацияСтраницы = "Портрет";
	СтрокаУровня1.ВыводНаПечать      = 1;
	СтрокаУровня1.ПоказатьСтраницу   = 1;
	СтрокаУровня1.ВыгрузитьСтраницу  = 2;
	
	СтрокаУровня1 = ДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы        = "Раздел8_Прил1";
	СтрокаУровня1.Представление      = "Раздел 8. Прил. 1";
	СтрокаУровня1.ОриентацияСтраницы = "Портрет";
	СтрокаУровня1.ВыводНаПечать      = 1;
	СтрокаУровня1.ПоказатьСтраницу   = 1;
	СтрокаУровня1.ВыгрузитьСтраницу  = 2;
	
	СтрокаУровня1 = ДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы        = "Раздел9";
	СтрокаУровня1.Представление      = "Раздел 9";
	СтрокаУровня1.ОриентацияСтраницы = "Портрет";
	СтрокаУровня1.ВыводНаПечать      = 1;
	СтрокаУровня1.ПоказатьСтраницу   = 1;
	СтрокаУровня1.ВыгрузитьСтраницу  = 2;
	
	СтрокаУровня1 = ДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы        = "Раздел9_Прил1";
	СтрокаУровня1.Представление      = "Раздел 9. Прил. 1";
	СтрокаУровня1.ОриентацияСтраницы = "Портрет";
	СтрокаУровня1.ВыводНаПечать      = 1;
	СтрокаУровня1.ПоказатьСтраницу   = 1;
	СтрокаУровня1.ВыгрузитьСтраницу  = 2;
	
	СтрокаУровня1 = ДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы        = "Раздел10";
	СтрокаУровня1.Представление      = "Раздел 10";
	СтрокаУровня1.ОриентацияСтраницы = "Портрет";
	СтрокаУровня1.ВыводНаПечать      = 1;
	СтрокаУровня1.ПоказатьСтраницу   = 1;
	СтрокаУровня1.ВыгрузитьСтраницу  = 2;
	
	СтрокаУровня1 = ДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы        = "Раздел11";
	СтрокаУровня1.Представление      = "Раздел 11";
	СтрокаУровня1.ОриентацияСтраницы = "Портрет";
	СтрокаУровня1.ВыводНаПечать      = 1;
	СтрокаУровня1.ПоказатьСтраницу   = 1;
	СтрокаУровня1.ВыгрузитьСтраницу  = 2;
	
	СтрокаУровня1 = ДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы        = "Раздел12";
	СтрокаУровня1.Представление      = "Раздел 12";
	СтрокаУровня1.ОриентацияСтраницы = "Портрет";
	СтрокаУровня1.ВыводНаПечать      = 1;
	СтрокаУровня1.ПоказатьСтраницу   = 1;
	СтрокаУровня1.ВыгрузитьСтраницу  = 2;
	
	Возврат ДеревоСтраницОтчета;
	
КонецФункции

Процедура ЗаполнитьСведенияОбОрганизации(ИмяФормы,
										 СтруктураДанныхТитульный,
										 СтруктураРеквизитовФормы,
										 ДатаПодписи,
										 ИзмененаДатаПодписи = Ложь) Экспорт
			
	Если НЕ ИзмененаДатаПодписи Тогда
		
		СтрокаСведений = "ИННЮЛ, КППЮЛ, НаимЮЛПол, КодНО, НаимНО, ТипНП, ТелОрганизации, ФИО, ОКТМО";
		СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(
		СтруктураРеквизитовФормы.Организация, ДатаПодписи, СтрокаСведений);
		
		ДополнитьСправа = 1;
		
		КодНО = СведенияОбОрганизации.КодНО;
		Для Инд = СтрДлина(СведенияОбОрганизации.КодНО) + 1 По 4 Цикл
			КодНО = " " + КодНО;
		КонецЦикла;
		
		ПоМесту = "";
		
		Если СведенияОбОрганизации.ТипНП = 1 Тогда
			ПоМесту = "214";
			КПП = СокрЛП(СведенияОбОрганизации.КППЮЛ);
			Если ЗначениеЗаполнено(КПП) Тогда
				Символы56КПП = Сред(КПП, 5, 2);
			Иначе
				Символы56КПП = "";
			КонецЕсли;
			Если ЗначениеЗаполнено(Символы56КПП) Тогда
				Если Символы56КПП = "36" ИЛИ Символы56КПП = "76" Тогда
					ПоМесту = "250";
				ИначеЕсли Символы56КПП = "4T" ИЛИ Символы56КПП = "5G" Тогда
					ПоМесту = "227";
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли СведенияОбОрганизации.ТипНП = 5 Тогда
			ПоМесту = "331";
		ИначеЕсли СведенияОбОрганизации.ТипНП = 3 Тогда
			ПоМесту = "116";
		КонецЕсли;
		
		Если РегламентированнаяОтчетностьВызовСервера.ЭтоЮридическоеЛицо(СтруктураРеквизитовФормы.Организация) Тогда
			НаименованиеОрганизации = СокрЛП(СведенияОбОрганизации.НаимЮлПол);
		Иначе
			НаименованиеОрганизации = СокрЛП(СведенияОбОрганизации.ФИО);
		КонецЕсли;
		
		СтруктураРеквизитовФормы.Вставить("КодТерриториальногоОбразования", СокрЛП(СведенияОбОрганизации.ОКТМО));
		
		Если ТипЗнч(СтруктураДанныхТитульный) = Тип("ТабличныйДокумент") Тогда
			
			СтруктураДанныхТитульный.Области.ИНН1.Значение = СведенияОбОрганизации.ИННЮЛ;
			СтруктураДанныхТитульный.Области.КПП1.Значение = СведенияОбОрганизации.КППЮЛ;
			СтруктураДанныхТитульный.Области.КодИМНС.Значение = КодНО;
			СтруктураДанныхТитульный.Области.ПоМесту.Значение = ПоМесту;
			СтруктураДанныхТитульный.Области.НаимОрг.Значение = НаименованиеОрганизации;
			СтруктураДанныхТитульный.Области.ТелОрганизации.Значение = СокрЛП(СведенияОбОрганизации.ТелОрганизации);
			
		ИначеЕсли ТипЗнч(СтруктураДанныхТитульный) = Тип("Структура") Тогда
			
			СтруктураДанныхТитульный.ИНН1 = СведенияОбОрганизации.ИННЮЛ;
			СтруктураДанныхТитульный.КПП1 = СведенияОбОрганизации.КППЮЛ;
			СтруктураДанныхТитульный.КодИМНС = КодНО;
			СтруктураДанныхТитульный.ПоМесту = ПоМесту;
			СтруктураДанныхТитульный.НаимОрг = НаименованиеОрганизации;
			СтруктураДанныхТитульный.ТелОрганизации = СокрЛП(СведенияОбОрганизации.ТелОрганизации);
			
		КонецЕсли;
		
	КонецЕсли;
	
	РегламентированнаяОтчетность.ПолучитьЗначениеОКВЭД(ДатаПодписи, СтруктураРеквизитовФормы);
	
	РегламентированнаяОтчетностьКлиентСервер.УстановитьЗначениеОКВЭД(ДатаПодписи,
	СтруктураРеквизитовФормы, ?(ТипЗнч(СтруктураДанныхТитульный) = Тип("ТабличныйДокумент"),
	СтруктураДанныхТитульный.Области.ОКВЭД.Значение, СтруктураДанныхТитульный.ОКВЭД));
	
	ЗаполнитьСведенияОПодписантах(ИмяФормы, СтруктураРеквизитовФормы, СтруктураДанныхТитульный, ДатаПодписи);
	
КонецПроцедуры

Процедура ЗаполнитьСведенияОПодписантах(ИмяФормы,
										СтруктураРеквизитовФормы,
										СтруктураДанныхТитульный,
										ДатаПодписи) Экспорт
	
	ТипПодписанта = "1";
	Подписант = "";
	НаименованиеОрганизацииПредставителя = "";
	ДокументПредставителя = "";
	
	Если ТипЗнч(СтруктураДанныхТитульный) = Тип("ТабличныйДокумент") Тогда
		
		КодНО = СокрЛП(СтруктураДанныхТитульный.Области.КодИМНС.Значение);
		КПП   = СокрЛП(СтруктураДанныхТитульный.Области.КПП1.Значение);
		
	ИначеЕсли ТипЗнч(СтруктураДанныхТитульный) = Тип("Структура") Тогда
		
		КодНО = СокрЛП(СтруктураДанныхТитульный.КодИМНС);
		КПП   = СокрЛП(СтруктураДанныхТитульный.КПП1);
		
	КонецЕсли;
	
	СведенияОПредставителе = РегламентированнаяОтчетностьВызовСервера.ПолучитьПоКодамСведенияОПредставителе(
	СтруктураРеквизитовФормы.Организация, КодНО, КПП);
	
	ТипПодписанта = СведенияОПредставителе.ТипПодписанта;
	
	Если ТипПодписанта = "1" Тогда
		// Представителя нет.
		Если РегламентированнаяОтчетностьВызовСервера.ЭтоЮридическоеЛицо(СтруктураРеквизитовФормы.Организация) Тогда
			// Подписант - руководитель.
			СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(
										СтруктураРеквизитовФормы.Организация, ДатаПодписи, "ФИОРук, ФИО");
			Подписант = СокрЛП(?(ЗначениеЗаполнено(СведенияОбОрганизации.ФИОРук), СведенияОбОрганизации.ФИОРук,
																				  СведенияОбОрганизации.ФИО));	
		КонецЕсли;
	Иначе
		// Подписант - представитель.
	    Подписант 							 = СведенияОПредставителе.ФИОПредставителя;
 		НаименованиеОрганизацииПредставителя = СведенияОПредставителе.НаименованиеОрганизацииПредставителя;
		ДокументПредставителя 				 = СведенияОПредставителе.ДокументПредставителя;
	КонецЕсли;
	
	Если ТипЗнч(СтруктураДанныхТитульный) = Тип("ТабличныйДокумент") Тогда
		
		СтруктураДанныхТитульный.Области.ПрПодп.Значение       = ТипПодписанта;
		СтруктураДанныхТитульный.Области.ОргПодписант.Значение = Подписант;
		СтруктураДанныхТитульный.Области.ОргУп.Значение        = НаименованиеОрганизацииПредставителя;
		СтруктураДанныхТитульный.Области.ДокУпПред.Значение    = ДокументПредставителя;
		
	ИначеЕсли ТипЗнч(СтруктураДанныхТитульный) = Тип("Структура") Тогда
		
		СтруктураДанныхТитульный.ПрПодп       = ТипПодписанта;
		СтруктураДанныхТитульный.ОргПодписант = Подписант;
		СтруктураДанныхТитульный.ОргУп        = НаименованиеОрганизацииПредставителя;
		СтруктураДанныхТитульный.ДокУпПред    = ДокументПредставителя;
		
	КонецЕсли;
			
КонецПроцедуры

Функция ЗаписатьРеглОтчет(ИмяФормы, ПараметрыЗаписи)
			
	Если НЕ ПараметрыЗаписи.СохраняемыйРеглОтчет = Неопределено Тогда
		
		Если ТипЗнч(ПараметрыЗаписи.СохраняемыйРеглОтчет) = Тип("ДокументСсылка.РегламентированныйОтчет")
		   И НЕ ПараметрыЗаписи.СохраняемыйРеглОтчет.Пустая() Тогда
			
			ДокументРегламентированныйОтчет = ПараметрыЗаписи.СохраняемыйРеглОтчет.ПолучитьОбъект();
			
			РегламентированнаяОтчетность.ЗаблокироватьДокумент(ДокументРегламентированныйОтчет);
						
		ИначеЕсли ТипЗнч(ПараметрыЗаписи.СохраняемыйРеглОтчет) = Тип("ДокументОбъект.РегламентированныйОтчет") Тогда
			
			ДокументРегламентированныйОтчет = ПараметрыЗаписи.СохраняемыйРеглОтчет;
			
			РегламентированнаяОтчетность.ЗаблокироватьДокумент(ДокументРегламентированныйОтчет);
						
		Иначе
			
			РегламентированнаяОтчетность.ДобавитьОшибкуФормированияРеглОтчета(ПараметрыЗаписи,
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Неверный тип входящего параметра (%1) при автоматическом формировании формы %2'"),
						ТипЗнч(ПараметрыЗаписи.СохраняемыйРеглОтчет),  ПараметрыЗаписи.НаименованиеОтчета));
						
			Возврат Неопределено;
			
		КонецЕсли
		
	Иначе
		
		ДокументРегламентированныйОтчет = Документы.РегламентированныйОтчет.СоздатьДокумент();
		
		РегламентированнаяОтчетность.ЗаблокироватьДокумент(ДокументРегламентированныйОтчет);
		
		ДокументРегламентированныйОтчет.Дата = ПараметрыЗаписи.ДатаОкончания;
		ДокументРегламентированныйОтчет.УстановитьВремя();
		ДокументРегламентированныйОтчет.УстановитьНовыйНомер();
		
	КонецЕсли;
		
	ПараметрыЗаписи.СохраняемыйРеглОтчет = ДокументРегламентированныйОтчет;
		
	Если ЗаписатьДокумент(ИмяФормы, ПараметрыЗаписи) = Ложь Тогда
		Возврат Неопределено;
	КонецЕсли;
			
	Возврат ДокументРегламентированныйОтчет.Ссылка;
	
КонецФункции

Функция ЗаписатьДокумент(ИмяФормы, ПараметрыЗаписи) Экспорт
	
	ДокументРегламентированныйОтчет = ПараметрыЗаписи.СохраняемыйРеглОтчет;
	
	ДокументРегламентированныйОтчет.ИсточникОтчета           = ПараметрыЗаписи.ИсточникОтчета;
	ДокументРегламентированныйОтчет.НаименованиеОтчета       = ПараметрыЗаписи.НаименованиеОтчета;
	ДокументРегламентированныйОтчет.ДатаНачала               = ПараметрыЗаписи.ДатаНачала;
	ДокументРегламентированныйОтчет.ДатаОкончания            = ПараметрыЗаписи.ДатаОкончания;
	ДокументРегламентированныйОтчет.Периодичность            = ПараметрыЗаписи.Периодичность;
	ДокументРегламентированныйОтчет.ВыбраннаяФорма           = ПараметрыЗаписи.ИмяФормыОтчета;
	ДокументРегламентированныйОтчет.Организация              = ПараметрыЗаписи.Организация;
	ДокументРегламентированныйОтчет.ДатаПодписи              = ПараметрыЗаписи.ДатаПодписи;
	ДокументРегламентированныйОтчет.ЕдиницаИзмерения         = ПараметрыЗаписи.ЕдиницаИзмерения;
	ДокументРегламентированныйОтчет.ТочностьЕдиницыИзмерения = ПараметрыЗаписи.ТочностьЕдиницыИзмерения;
	ДокументРегламентированныйОтчет.ВидОтчетности            = Перечисления.ВидыОтчетности.РегламентированнаяОтчетность;
	ДокументРегламентированныйОтчет.Комментарий              = ПараметрыЗаписи.Комментарий;
	ДокументРегламентированныйОтчет.КодНалоговогоОргана      = ПараметрыЗаписи.КодИФНС;
	ДокументРегламентированныйОтчет.КПП                      = ПараметрыЗаписи.КПП;
	ДокументРегламентированныйОтчет.Вид                      = ПараметрыЗаписи.Вариант;
	ДокументРегламентированныйОтчет.ФорматВыгрузки           = "Автоматически";
	ДокументРегламентированныйОтчет.ПредставлениеВида        = РегламентированнаяОтчетность.
															   ПредставлениеВидаДокумента(
															   ДокументРегламентированныйОтчет.Вид);
	
	ПоказателиОтчета = Новый Структура;
	Префикс = "ПолеТабличногоДокумента";
	Для Каждого Раздел Из ПараметрыЗаписи.РазделыОтчета Цикл
		Если НЕ Раздел.Значение.МногостраничностьВРазделе
		   И НЕ Раздел.Ключ = "Раздел8"
		   И НЕ Раздел.Ключ = "Раздел8_Прил1"
		   И НЕ Раздел.Ключ = "Раздел9"
		   И НЕ Раздел.Ключ = "Раздел9_Прил1"
		   И НЕ Раздел.Ключ = "Раздел10"
		   И НЕ Раздел.Ключ = "Раздел11"
		   И НЕ Раздел.Ключ = "Раздел12" Тогда
			ПоказателиОтчета.Вставить(Префикс + Раздел.Ключ, Раздел.Значение.Данные);
		КонецЕсли;
	КонецЦикла;
	
	СписокСохранения = Новый Структура;
	СписокСохранения.Вставить("ПоказателиОтчета", ПоказателиОтчета);
	
	ДанныеМногострочныхРазделов = Новый Структура;
	Для Каждого ЭлементСтруктуры Из ПараметрыЗаписи.РазделыОтчета Цикл
		ДанныеДопСтрок = Неопределено;
		Если ЭлементСтруктуры.Значение.Свойство("ДанныеДопСтрок", ДанныеДопСтрок) Тогда
			Если ТипЗнч(ДанныеДопСтрок) = Тип("ТаблицаЗначений") Тогда
				ДанныеМногострочныхРазделов.Вставить(ЭлементСтруктуры.Значение.ИдентификаторДопСтрок,
				ЭлементСтруктуры.Значение.ДанныеДопСтрок);
			ИначеЕсли ТипЗнч(ДанныеДопСтрок) = Тип("Структура") Тогда
				Для Каждого ДопСтрока Из ДанныеДопСтрок Цикл
					ДанныеМногострочныхРазделов.Вставить(ДопСтрока.Ключ, ДопСтрока.Значение);
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	СписокСохранения.Вставить("ДанныеМногострочныхРазделов", ДанныеМногострочныхРазделов);
	
	ДанныеМногостраничныхРазделов = Новый Структура;
	Для Каждого ЭлементСтруктуры Из ПараметрыЗаписи.РазделыОтчета Цикл
		Если ЭлементСтруктуры.Значение.МногостраничностьВРазделе
		   И НЕ ЭлементСтруктуры.Значение.Данные = Неопределено Тогда
			ДанныеМногостраничныхРазделов.Вставить(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Значение.Данные);
		КонецЕсли;
	КонецЦикла;
	СписокСохранения.Вставить("ДанныеМногостраничныхРазделов", ДанныеМногостраничныхРазделов);
	
	СписокСохранения.Вставить("ДанныеВариантовАвтоЗаполнения", ПараметрыЗаписи.СтруктураВариантыЗаполнения);
	
	СписокСохранения.Вставить("Автозаполнение", ПараметрыЗаписи.ФлажокОтклАвтоРасчет);
	СписокСохранения.Вставить("ВерсияФормы", ПараметрыЗаписи.ВерсияФормы);
	СписокСохранения.Вставить("СохранятьРасшифровку", ПараметрыЗаписи.СохранятьРасшифровку);
	
	Если ПараметрыЗаписи.АдресВременногоХранилищаРасшифровки <> Неопределено Тогда
		
		ТаблицаРасшифровки = ПолучитьИзВременногоХранилища(ПараметрыЗаписи.АдресВременногоХранилищаРасшифровки);
		
		Если ПараметрыЗаписи.СохранятьРасшифровку = Истина Тогда
			СписокСохранения.Вставить("Расшифровка", ТаблицаРасшифровки);
		КонецЕсли;
		
	КонецЕсли;
	
	СписокСохранения.Вставить("ГруппаОрганизаций", ПараметрыЗаписи.ГруппаОрганизаций);
	СписокСохранения.Вставить("ДатаНачалаАвтозаполнения", ПараметрыЗаписи.ДатаНачалаАвтозаполнения);
	СписокСохранения.Вставить("ВыполненоЗаполнениеРазделов", ПараметрыЗаписи.ВыполненоЗаполнениеРазделов);
	СписокСохранения.Вставить("УспешноеАвтозаполнение", ПараметрыЗаписи.УспешноеАвтозаполнение);
	СписокСохранения.Вставить("ФлПодсчетСтраниц", ПараметрыЗаписи.ФлПодсчетСтраниц);
	СписокСохранения.Вставить("ФлПроверятьСоотношенияПриПечатиИВыгрузки",
		ПараметрыЗаписи.ФлПроверятьСоотношенияПриПечатиИВыгрузки);
	СписокСохранения.Вставить("ФлОтклВыборЗначений", ПараметрыЗаписи.ФлОтклВыборЗначений);
	СписокСохранения.Вставить("ПечатьБезШтрихкодаРазрешена", ПараметрыЗаписи.ПечатьБезШтрихкодаРазрешена);
	
	Если ПараметрыЗаписи.Свойство("ДанныеПомощникаЗаполнения") Тогда
		СписокСохранения.Вставить("ДанныеПомощникаЗаполнения", ПараметрыЗаписи.ДанныеПомощникаЗаполнения);
	КонецЕсли;
	
	Если ПараметрыЗаписи.Свойство("Модифицированность") Тогда
		СписокСохранения.Вставить("Модифицированность", ПараметрыЗаписи.Модифицированность);
	КонецЕсли;
	
	ДобавитьПризнакАктуальностиСведенийРаздела(ИмяФормы, ПараметрыЗаписи.СтруктураРеквизитовФормы,
		СписокСохранения, "Раздел8");
	ДобавитьПризнакАктуальностиСведенийРаздела(ИмяФормы, ПараметрыЗаписи.СтруктураРеквизитовФормы,
		СписокСохранения, "Раздел8_Прил1");
	ДобавитьПризнакАктуальностиСведенийРаздела(ИмяФормы, ПараметрыЗаписи.СтруктураРеквизитовФормы,
		СписокСохранения, "Раздел9");
	ДобавитьПризнакАктуальностиСведенийРаздела(ИмяФормы, ПараметрыЗаписи.СтруктураРеквизитовФормы,
		СписокСохранения, "Раздел9_Прил1");
	ДобавитьПризнакАктуальностиСведенийРаздела(ИмяФормы, ПараметрыЗаписи.СтруктураРеквизитовФормы,
		СписокСохранения, "Раздел10");
	ДобавитьПризнакАктуальностиСведенийРаздела(ИмяФормы, ПараметрыЗаписи.СтруктураРеквизитовФормы,
		СписокСохранения, "Раздел11");
	ДобавитьПризнакАктуальностиСведенийРаздела(ИмяФормы, ПараметрыЗаписи.СтруктураРеквизитовФормы,
		СписокСохранения, "Раздел12");
	
	ДокументРегламентированныйОтчет.ДанныеОтчета = Новый ХранилищеЗначения(СписокСохранения);
	
	ДокументРегламентированныйОтчет.ДеревоНастройкиСтраниц = Новый ХранилищеЗначения(ПараметрыЗаписи.ДеревоСтраницОтчета);
	
	Попытка
		
		НачатьТранзакцию();
		
		ДокументРегламентированныйОтчет.Записать();
		
		ДокументРегламентированныйОтчет.Разблокировать();
		
		ПараметрыЗаписи.СтруктураРеквизитовФормы.мСохраненныйДок = ДокументРегламентированныйОтчет.Ссылка;
		
		СохранитьСведенияНДС(ИмяФормы,
							 ПараметрыЗаписи.СтраницыРазделов8_12,
							 ПараметрыЗаписи.СтруктураРеквизитовФормы);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию(); 
		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"),
		РегламентированнаяОтчетностьКлиентСервер.СформироватьТекстСообщения(ОписаниеОшибки()));
		
		РегламентированнаяОтчетность.ДобавитьОшибкуФормированияРеглОтчета(ПараметрыЗаписи, ТекстСообщения);
		
		ДокументРегламентированныйОтчет.Разблокировать();
		
		Возврат Ложь;
		
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

Процедура СохранитьСведенияНДС(ИмяФормы, СтраницыРазделов8_12, СтруктураРеквизитовФормы)
	
	// Удаление сегментов раздела при очистке отчета.
	
	Для Каждого СтраницаРазделов8_12 Из СтраницыРазделов8_12 Цикл
		
		ИмяРаздела = СтрЗаменить(СтраницаРазделов8_12.Ключ, "Страницы", "");
		
		Если СтраницаРазделов8_12.Значение.Количество() = 0 Тогда
			
			РегламентированнаяОтчетность.УдалитьСегментыТабличногоДокументаРазделаДекларацииНДС(
			СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, ИмяРаздела);
			
			РегламентированнаяОтчетность.УдалитьСегментыДанныхРазделаДекларацииНДС(
			СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, ИмяРаздела);
			
			РегламентированнаяОтчетность.УдалитьИтогиРазделаДекларацииНДС(
			СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, ИмяРаздела);
			
		КонецЕсли;
		
		// Сохранение результатов автозаполнения без сегментирования.
		
		ЗаписьРегистраСведений = РегистрыСведений.ДополнительныеФайлыРегламентированныхОтчетов.СоздатьМенеджерЗаписи();
		ЗаписьРегистраСведений.РегламентированныйОтчет = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
		ЗаписьРегистраСведений.ВидДополнительногоФайла = "ТабличныйДокумент" + ИмяРаздела;
		
		Если СтруктураРеквизитовФормы.Свойство("АдресТабличногоДокумента" + ИмяРаздела)
		   И СтруктураРеквизитовФормы["АдресТабличногоДокумента" + ИмяРаздела] <> Неопределено Тогда
			
			ЗаписьРегистраСведений.СодержимоеФайла = Новый ХранилищеЗначения(
			ПолучитьИзВременногоХранилища(СтруктураРеквизитовФормы["АдресТабличногоДокумента" + ИмяРаздела]));
			
			ЗаписьРегистраСведений.ИмяФайла = ИмяРаздела + ".mxl";
			ЗаписьРегистраСведений.Размер = 1;
			ЗаписьРегистраСведений.ДатаДобавления = ТекущаяДатаСеанса();
			ЗаписьРегистраСведений.Записать();
			
		Иначе
			
			ЗаписьРегистраСведений.Удалить();
			
		КонецЕсли;
		
		ЗаписьРегистраСведений = РегистрыСведений.ДополнительныеФайлыРегламентированныхОтчетов.СоздатьМенеджерЗаписи();
		ЗаписьРегистраСведений.РегламентированныйОтчет = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
		ЗаписьРегистраСведений.ВидДополнительногоФайла = "Данные" + ИмяРаздела;
		
		Если СтруктураРеквизитовФормы.Свойство("АдресДанных" + ИмяРаздела)
		   И СтруктураРеквизитовФормы["АдресДанных" + ИмяРаздела] <> Неопределено Тогда
			
			ЗаписьРегистраСведений.СодержимоеФайла = Новый ХранилищеЗначения(
			ПолучитьИзВременногоХранилища(СтруктураРеквизитовФормы["АдресДанных" + ИмяРаздела]));
			
			ЗаписьРегистраСведений.ИмяФайла = ИмяРаздела + ".xml";
			ЗаписьРегистраСведений.Размер = 1;
			ЗаписьРегистраСведений.ДатаДобавления = ТекущаяДатаСеанса();
			ЗаписьРегистраСведений.Записать();
			
		Иначе
			
			ЗаписьРегистраСведений.Удалить();
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьПризнакАктуальностиСведенийРаздела(ИмяФормы, СтруктураРеквизитовФормы, СписокСохранения, ИмяРаздела)
	
	Если СтруктураРеквизитовФормы.Свойство("АктуальностьСведений" + ИмяРаздела) Тогда
		СохраняемоеСостояние = СтруктураРеквизитовФормы["АктуальностьСведений" + ИмяРаздела];
	Иначе
		СохраняемоеСостояние = 0;
	КонецЕсли;
	
	СписокСохранения.Вставить("АктуальностьСведений" + ИмяРаздела, СохраняемоеСостояние);
	
КонецПроцедуры

#КонецОбласти

#Область ВыгрузкаРегламентированногоОтчета

Функция УниверсальнаяВыгрузка(Параметры) Экспорт
	
	Перем ДанныеОтчета;
	Перем СтруктураРеквизитовФормы;
	Перем СтраницыРазделов8_12;
	
	СохраненныйОтчет  = Параметры.СохраненныйОтчет;
	ИсточникОтчета    = Параметры.ИсточникОтчета;
	ИмяФормы          = Параметры.ВыбраннаяФорма;
	РезультатВыгрузки = Параметры.РезультатВыгрузки;
	
	Если Параметры.Свойство("СтраницыРазделов8_12") Тогда
		СтраницыРазделов8_12 = Параметры.СтраницыРазделов8_12;
	КонецЕсли;
	
	СформироватьСтруктуруРеквизитовФормы(ИмяФормы, СтруктураРеквизитовФормы);
	
	СтруктураРеквизитовФормы.мСохраненныйДок = СохраненныйОтчет;
	
	СформироватьСтруктуруПоказателей(ИмяФормы,
									 ДанныеОтчета,
									 СтруктураРеквизитовФормы);
	
	ПараметрыВыгрузки = СформироватьСтруктуруПараметров(ИмяФормы,
														ДанныеОтчета,
														СтруктураРеквизитовФормы,
														СтраницыРазделов8_12);
	
	ДеревоВыгрузки = ИзвлечьСтруктуруXML(ИмяФормы);
	
	ПроверитьВыгрузкуПоНовомуАлгоритмуНаСервере(ИмяФормы, СтруктураРеквизитовФормы);
	
	РезультатПроверкиВыгрузки = ПолучитьИзВременногоХранилища(СтруктураРеквизитовФормы.АдресХранилищаПроверкиВыгрузки);
	
	Если НЕ РезультатПроверкиВыгрузки.КоличествоОшибок = 0 Тогда
		
		ТекстОшибки = НСтр("ru='Выявлены ошибки заполнения показателей.'");
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки, ТекстОшибки, "Титульный");
		
		РезультатВыгрузки.Вставить("РезультатПроверкиВыгрузки", РезультатПроверкиВыгрузки);
		РезультатВыгрузки.Вставить("РеглОтчетВыгружен", Ложь);
		
		Возврат РезультатВыгрузки;
		
	КонецЕсли;
	
	ЗаполнитьДанными(ИмяФормы,
					 ДанныеОтчета,
					 ПараметрыВыгрузки,
					 ДеревоВыгрузки,
					 РезультатВыгрузки,
					 СтруктураРеквизитовФормы);
	
	Если НЕ ПроверитьДанные(ИмяФормы, ДеревоВыгрузки, РезультатВыгрузки) Тогда
		
		РезультатВыгрузки.Вставить("РеглОтчетВыгружен", Ложь);
		
		Возврат РезультатВыгрузки;
		
	КонецЕсли;
	
	Если НЕ СтраницыРазделов8_12 = Неопределено Тогда
		
		ТекстВыгрузки = Новый Массив;
		
		ВыгрузкаРаздела = ВыгрузкаРаздел8(ИмяФормы, СтруктураРеквизитовФормы, СтраницыРазделов8_12, ПараметрыВыгрузки);
		Если НЕ ВыгрузкаРаздела = Неопределено Тогда
			ТекстВыгрузки.Добавить(ВыгрузкаРаздела);
		КонецЕсли;
		
		ВыгрузкаРаздела = ВыгрузкаРаздел8_Прил1(ИмяФормы, СтруктураРеквизитовФормы, СтраницыРазделов8_12, ПараметрыВыгрузки);
		Если НЕ ВыгрузкаРаздела = Неопределено Тогда
			ТекстВыгрузки.Добавить(ВыгрузкаРаздела);
		КонецЕсли;
		
		ВыгрузкаРаздела = ВыгрузкаРаздел9(ИмяФормы, СтруктураРеквизитовФормы, СтраницыРазделов8_12, ПараметрыВыгрузки);
		Если НЕ ВыгрузкаРаздела = Неопределено Тогда
			ТекстВыгрузки.Добавить(ВыгрузкаРаздела);
		КонецЕсли;
		
		ВыгрузкаРаздела = ВыгрузкаРаздел9_Прил1(ИмяФормы, СтруктураРеквизитовФормы, СтраницыРазделов8_12, ПараметрыВыгрузки);
		Если НЕ ВыгрузкаРаздела = Неопределено Тогда
			ТекстВыгрузки.Добавить(ВыгрузкаРаздела);
		КонецЕсли;
		
		ВыгрузкаРаздела = ВыгрузкаРаздел10(ИмяФормы, СтруктураРеквизитовФормы, СтраницыРазделов8_12, ПараметрыВыгрузки);
		Если НЕ ВыгрузкаРаздела = Неопределено Тогда
			ТекстВыгрузки.Добавить(ВыгрузкаРаздела);
		КонецЕсли;
		
		ВыгрузкаРаздела = ВыгрузкаРаздел11(ИмяФормы, СтруктураРеквизитовФормы, СтраницыРазделов8_12, ПараметрыВыгрузки);
		Если НЕ ВыгрузкаРаздела = Неопределено Тогда
			ТекстВыгрузки.Добавить(ВыгрузкаРаздела);
		КонецЕсли;
		
		ВыгрузкаРаздела = ВыгрузкаРаздел12(ИмяФормы, СтруктураРеквизитовФормы, СтраницыРазделов8_12, ПараметрыВыгрузки);
		Если НЕ ВыгрузкаРаздела = Неопределено Тогда
			ТекстВыгрузки.Добавить(ВыгрузкаРаздела);
		КонецЕсли;
		
	КонецЕсли;
	
	ЗаполнитьСведенияОРазделах8_12(ИмяФормы, ДеревоВыгрузки, ПараметрыВыгрузки);
	
	КодировкаФайлаВыгрузки = "windows-1251";
	
	ТекстВыгрузкиРазделов1_7 = ВыгрузитьДеревоВXML(ИмяФормы, ДеревоВыгрузки, ПараметрыВыгрузки);
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("xml");
	ЗаписьТекста = Новый ЗаписьТекста(ИмяВременногоФайла, КодировкаФайлаВыгрузки);
	ЗаписьТекста.Записать(ТекстВыгрузкиРазделов1_7);
	ЗаписьТекста.Закрыть();
	ЗаписьТекста = Неопределено;
	
	ФайлВыгрузки = Новый ДвоичныеДанные(ИмяВременногоФайла);
	
	АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(ФайлВыгрузки, Новый УникальныйИдентификатор);
	
	УдалитьФайлы(ИмяВременногоФайла);
	
	РезультатВыгрузки.Вставить("ИмяФайлаВыгрузки", ПараметрыВыгрузки.ИдФайл + ".xml");
	РезультатВыгрузки.Вставить("АдресФайлаВыгрузки", АдресВоВременномХранилище);
	РезультатВыгрузки.Вставить("КодировкаФайлаВыгрузки", КодировкаФайлаВыгрузки);
	Если ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2019Кв1") Тогда
		РезультатВыгрузки.Вставить("ТипФайлаВыгрузки", "НДС2019Разделы1_7");
	Иначе// "ФормаОтчета2017Кв1"
		РезультатВыгрузки.Вставить("ТипФайлаВыгрузки", "НДС2017Разделы1_7");
	КонецЕсли;
	РезультатВыгрузки.Вставить("РеглОтчетВыгружен", Истина);
	
	Если НЕ СтраницыРазделов8_12 = Неопределено Тогда
		
		ВыгрузкаРазделов1_7 = Новый Структура;
		ВыгрузкаРазделов1_7.Вставить("ИмяФайлаВыгрузки", РезультатВыгрузки.ИмяФайлаВыгрузки);
		ВыгрузкаРазделов1_7.Вставить("АдресФайлаВыгрузки", РезультатВыгрузки.АдресФайлаВыгрузки);
		ВыгрузкаРазделов1_7.Вставить("КодировкаФайлаВыгрузки", РезультатВыгрузки.КодировкаФайлаВыгрузки);
		ВыгрузкаРазделов1_7.Вставить("ТипФайлаВыгрузки", РезультатВыгрузки.ТипФайлаВыгрузки);
		
		ТекстВыгрузки.Добавить(ВыгрузкаРазделов1_7);
		
		РезультатВыгрузки.Вставить("ТекстВыгрузки", ТекстВыгрузки);
		
	КонецЕсли;
	
	Возврат РезультатВыгрузки;
	
КонецФункции

Процедура СформироватьСтруктуруПоказателей(ИмяФормы,
										   ДанныеОтчета,
										   СтруктураРеквизитовФормы) Экспорт
	
	ДанныеОтчета = Новый Структура;
			
	СохрСтруктура = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить();
	
	ПоказателиОтчета = СохрСтруктура.ПоказателиОтчета;
	
	Для Каждого Раздел Из ПоказателиОтчета Цикл
		
		Если СтруктураРеквизитовФормы.ОтчетСтарогоОбразца Тогда
			
			ИмяРаздела = СтрЗаменить(Раздел.Ключ, "ПолеТабличногоДокумента", "");
			
			ВосстановитьСтруктуруДанныхРазделаСтарогоОбразца(ИмяФормы, СохрСтруктура, Раздел.Ключ, ИмяРаздела);
			
		КонецЕсли;
		
		ДанныеОтчета.Вставить(Раздел.Ключ,
			РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(Раздел.Значение));
			
	КонецЦикла;
	
	Для Каждого Раздел Из СохрСтруктура.ДанныеМногостраничныхРазделов Цикл
						
		Для Каждого Лист Из Раздел.Значение Цикл
			Лист.Данные = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(Лист.Данные);
		КонецЦикла;
		
		ДанныеОтчета.Вставить(Раздел.Ключ, Раздел.Значение);
		
	КонецЦикла;
	
	ДобавитьПоказателиВРаздел2(ИмяФормы, ДанныеОтчета.Раздел2);
			
КонецПроцедуры

Процедура ДобавитьПоказателиВРаздел2(ИмяФормы, Раздел2) Экспорт
	
	Для Каждого ЛистРаздела2 Из Раздел2 Цикл
		
		Если ТипЗнч(ЛистРаздела2.Данные) = Тип("Структура") Тогда
			ДанныеЛистаРаздела2 = ЛистРаздела2.Данные;
		Иначе	
			ДанныеЛистаРаздела2 = ЛистРаздела2.Данные[0].Значение;
		КонецЕсли;	
		
		ФИО = РегламентированнаяОтчетность.РазложитьФИО(СокрЛП(ДанныеЛистаРаздела2.П000200002003));
		
		ДанныеЛистаРаздела2.Вставить("П000200002003_1", ФИО.Фамилия);
		ДанныеЛистаРаздела2.Вставить("П000200002003_2", ФИО.Имя);
		ДанныеЛистаРаздела2.Вставить("П000200002003_3", ФИО.Отчество);
		
	КонецЦикла;	
	
КонецПроцедуры

Процедура ВосстановитьСтруктуруДанныхРазделаСтарогоОбразца(ИмяФормы,
														   СохраненныеДанныеОтчета,
														   ИмяСтруктурыДанных,
														   ИмяРаздела) Экспорт
	
	ПоказателиОтчета = СохраненныеДанныеОтчета.ПоказателиОтчета;
	
	Данные = ПоказателиОтчета[ИмяСтруктурыДанных];
	
	Если ИмяРаздела = "Титульный" Тогда
		
		Для Каждого Показатель Из Данные Цикл
			
			ИмяПоказателя = Показатель.Ключ;
			
			Если ИмяПоказателя = "ИНН1_1" Тогда
				Данные.Вставить("ИНН1");
				Для Ном = 1 По 12 Цикл
					Данные.ИНН1 = СокрЛП(Данные.ИНН1) + Данные["ИНН1_" + Ном];
					Данные.Удалить("ИНН1_" + Ном);
				КонецЦикла;
				Если Лев(Данные.ИНН1, 2) = "00" Тогда
					Данные.ИНН1 = Сред(Данные.ИНН1, 3);
				КонецЕсли;
				Если Прав(Данные.ИНН1, 2) = "--" Тогда
					Данные.ИНН1 = Лев(Данные.ИНН1, СтрНайти(Данные.ИНН1, "--") - 1);
				КонецЕсли;
			ИначеЕсли ИмяПоказателя = "КПП1_1" Тогда
				Данные.Вставить("КПП1");
				Для Ном = 1 По 9 Цикл
					Данные.КПП1 = СокрЛП(Данные.КПП1) + Данные["КПП1_" + Ном];
					Данные.Удалить("КПП1_" + Ном);
				КонецЦикла;
			КонецЕсли;
			
		КонецЦикла;
		
	ИначеЕсли ИмяРаздела = "Раздел3_Прил2" Тогда
		
		ВосстановитьДанныеМногострочнойЧастиИзНемногострочныхДанныхСтарогоОбразца(
		ИмяФормы, Данные, СохраненныеДанныеОтчета.ДанныеМногострочныхРазделов.П0003200001);
		
	ИначеЕсли ИмяРаздела = "Раздел4" Тогда
		
		ВосстановитьДанныеМногострочнойЧастиИзНемногострочныхДанныхСтарогоОбразца(
		ИмяФормы, Данные, СохраненныеДанныеОтчета.ДанныеМногострочныхРазделов.П0004М100);
		
		ВосстановитьДанныеМногострочнойЧастиИзНемногострочныхДанныхСтарогоОбразца(
		ИмяФормы, Данные, СохраненныеДанныеОтчета.ДанныеМногострочныхРазделов.П0004М200);
		
		ВосстановитьДанныеМногострочнойЧастиИзНемногострочныхДанныхСтарогоОбразца(
		ИмяФормы, Данные, СохраненныеДанныеОтчета.ДанныеМногострочныхРазделов.П0004М300);
		
	ИначеЕсли ИмяРаздела = "Раздел6" Тогда
		
		ВосстановитьДанныеМногострочнойЧастиИзНемногострочныхДанныхСтарогоОбразца(
		ИмяФормы, Данные, СохраненныеДанныеОтчета.ДанныеМногострочныхРазделов.П0006М100);
		
		ВосстановитьДанныеМногострочнойЧастиИзНемногострочныхДанныхСтарогоОбразца(
		ИмяФормы, Данные, СохраненныеДанныеОтчета.ДанныеМногострочныхРазделов.П0006М200);
		
		ВосстановитьДанныеМногострочнойЧастиИзНемногострочныхДанныхСтарогоОбразца(
		ИмяФормы, Данные, СохраненныеДанныеОтчета.ДанныеМногострочныхРазделов.П0006М300);
		
	ИначеЕсли ИмяРаздела = "Раздел7" Тогда
		
		ВосстановитьДанныеМногострочнойЧастиИзНемногострочныхДанныхСтарогоОбразца(
		ИмяФормы, Данные, СохраненныеДанныеОтчета.ДанныеМногострочныхРазделов.П0007000001);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ВосстановитьДанныеМногострочнойЧастиИзНемногострочныхДанныхСтарогоОбразца(
	ИмяФормы, НемногострочныеДанные, ТаблицаМнЧ)
	
	Для Инд = 1 По ТаблицаМнЧ.Количество() Цикл
		СтрокаМнЧ = ТаблицаМнЧ[Инд - 1];
		_Инд = "_" + Формат(Инд, "ЧГ=");
		Для каждого КолонкаМнЧ Из ТаблицаМнЧ.Колонки Цикл
			ЗначПок = Неопределено;
			Если НемногострочныеДанные.Свойство(КолонкаМнЧ.Имя + _Инд, ЗначПок) Тогда
				СтрокаМнЧ[КолонкаМнЧ.Имя] = ЗначПок;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Функция СформироватьСтруктуруПараметров(ИмяФормы,
										ДанныеОтчета,
										СтруктураРеквизитовФормы,
										СтраницыРазделов8_12 = Неопределено) Экспорт
	
	Титульный = ДанныеОтчета.ПолеТабличногоДокументаТитульный;
	
	ПараметрыВыгрузки = Новый Структура;
	ПараметрыВыгрузки.Вставить("ВерсПрог",     РегламентированнаяОтчетность.НазваниеИВерсияПрограммы());
	ПараметрыВыгрузки.Вставить("КНД",          СтруктураРеквизитовФормы.мКодОтчета);
	ПараметрыВыгрузки.Вставить("ДатаДок",      Формат(ТекущаяДатаСеанса(), "ДФ=дд.ММ.гггг"));
	ПараметрыВыгрузки.Вставить("ГодПериодОтч", Формат(СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания, "ДФ=гггг"));
	ПараметрыВыгрузки.Вставить("ПериодОтч",    СокрЛП(Титульный.Период));
	ПараметрыВыгрузки.Вставить("КодИФНС",      СокрЛП(Титульный.КодИМНС));
	ПараметрыВыгрузки.Вставить("ВидДок",       Строка(СтруктураРеквизитовФормы.мСохраненныйДок.Вид));
	ПараметрыВыгрузки.Вставить("ПоМесту",      СокрЛП(Титульный.ПоМесту));
	ПараметрыВыгрузки.Вставить("ОКВЭДОрг",     СтрЗаменить(СокрЛП(СтрЗаменить(Титульный.ОКВЭД, ".", " ")), " ", "."));
	ПараметрыВыгрузки.Вставить("ТелОрг",       СокрЛП(Титульный.ТелОрганизации));
	ПараметрыВыгрузки.Вставить("НаимОрг",      СокрЛП(Титульный.НаимОрг));
	ПараметрыВыгрузки.Вставить("ИННОрг",       СокрЛП(СтруктураРеквизитовФормы.мСохраненныйДок.Организация.ИНН));
	ПараметрыВыгрузки.Вставить("КППОрг",       СокрЛП(Титульный.КПП1));
	ПараметрыВыгрузки.Вставить("КодФормРеорг", СокрЛП(Титульный.КодФормыРеорганизации));
	ПараметрыВыгрузки.Вставить("ИННОргРеорг",  СокрЛП(Титульный.ИННРеорганизованнойОрганизации));
	ПараметрыВыгрузки.Вставить("КППОргРеорг",  СокрЛП(Титульный.КППРеорганизованнойОрганизации));
	
	ПараметрыВыгрузки.Вставить("КодИФНСПосредника", ?(
	СтруктураРеквизитовФормы.мСохраненныйДок.Организация.КрупнейшийНалогоплательщик,
	СокрЛП(СтруктураРеквизитовФормы.мСохраненныйДок.Организация.КодНалоговогоОрганаПолучателя), ""));
	
	ПараметрыВыгрузки.Вставить("ТипПодписанта",        СокрЛП(Титульный.ПрПодп));
	ПараметрыВыгрузки.Вставить("НаимОргПредставителя", СокрЛП(Титульный.ОргУп));
	ПараметрыВыгрузки.Вставить("НаимДокПредставителя", СокрЛП(Титульный.ДокУпПред));
	
	ФИОИП = РегламентированнаяОтчетность.РазложитьФИО(Титульный.НаимОрг);
	ПараметрыВыгрузки.Вставить("ФамилияИП",  ФИОИП.Фамилия);
	ПараметрыВыгрузки.Вставить("ИмяИП",      ФИОИП.Имя);
	ПараметрыВыгрузки.Вставить("ОтчествоИП", ФИОИП.Отчество);
	
	ПараметрыВыгрузки.Вставить("ЭтоПБОЮЛ", НЕ РегламентированнаяОтчетностьВызовСервера.ЭтоЮридическоеЛицо(
	СтруктураРеквизитовФормы.мСохраненныйДок.Организация));
	
	СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(
	СтруктураРеквизитовФормы.мСохраненныйДок.Организация, ТекущаяДатаСеанса(), "ФИОБух, ТелБух");
	Если ПараметрыВыгрузки.ЭтоПБОЮЛ И ПустаяСтрока(СведенияОбОрганизации.ФИОБух) Тогда
		ПараметрыВыгрузки.Вставить("ДолжОтв",     "Индивидуальный предприниматель");
		ПараметрыВыгрузки.Вставить("ФамилияОтв",  ФИОИП.Фамилия);
		ПараметрыВыгрузки.Вставить("ИмяОтв",      ФИОИП.Имя);
		ПараметрыВыгрузки.Вставить("ОтчествоОтв", ФИОИП.Отчество);
		ПараметрыВыгрузки.Вставить("ТелОтв",      ?(ПараметрыВыгрузки.Свойство("ТелОрг"), ПараметрыВыгрузки.ТелОрг, ""));
	Иначе
		ФИОБух = РегламентированнаяОтчетность.РазложитьФИО(СведенияОбОрганизации.ФИОБух);
		ПараметрыВыгрузки.Вставить("ДолжОтв",     "Главный бухгалтер");
		ПараметрыВыгрузки.Вставить("ФамилияОтв",  ФИОБух.Фамилия);
		ПараметрыВыгрузки.Вставить("ИмяОтв",      ФИОБух.Имя);
		ПараметрыВыгрузки.Вставить("ОтчествоОтв", ФИОБух.Отчество);
		ПараметрыВыгрузки.Вставить("ТелОтв",      СведенияОбОрганизации.ТелБух);
	КонецЕсли;
	
	ФИОПодписанта = РегламентированнаяОтчетность.РазложитьФИО(Титульный.ОргПодписант);
	ПараметрыВыгрузки.Вставить("ФамилияПодписанта",  ФИОПодписанта.Фамилия);
	ПараметрыВыгрузки.Вставить("ИмяПодписанта",      ФИОПодписанта.Имя);
	ПараметрыВыгрузки.Вставить("ОтчествоПодписанта", ФИОПодписанта.Отчество);
	
	ПараметрыВыгрузки.Вставить("ПрефиксИмениФайлаВыгрузки", "NO_NDS");
	
	ПараметрыВыгрузки.Вставить("ИмяКлючевогоУзлаСодержательнойЧасти", "НДС");
	
	ПараметрыВыгрузки.Вставить("ИдФайл", СформироватьИдФайл(ИмяФормы, ПараметрыВыгрузки));
	
	СохраненныеДанные = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить();
	
	ПараметрыВыгрузки.Вставить(
	"АктуальностьСведенийРаздел8", Формат(СохраненныеДанные.АктуальностьСведенийРаздел8, "ЧН="));
	ПараметрыВыгрузки.Вставить(
	"АктуальностьСведенийРаздел8_Прил1", Формат(СохраненныеДанные.АктуальностьСведенийРаздел8_Прил1, "ЧН="));
	ПараметрыВыгрузки.Вставить(
	"АктуальностьСведенийРаздел9", Формат(СохраненныеДанные.АктуальностьСведенийРаздел9, "ЧН="));
	ПараметрыВыгрузки.Вставить(
	"АктуальностьСведенийРаздел9_Прил1", Формат(СохраненныеДанные.АктуальностьСведенийРаздел9_Прил1, "ЧН="));
	ПараметрыВыгрузки.Вставить(
	"АктуальностьСведенийРаздел10", Формат(СохраненныеДанные.АктуальностьСведенийРаздел10, "ЧН="));
	ПараметрыВыгрузки.Вставить(
	"АктуальностьСведенийРаздел11", Формат(СохраненныеДанные.АктуальностьСведенийРаздел11, "ЧН="));
	ПараметрыВыгрузки.Вставить(
	"АктуальностьСведенийРаздел12", Формат(СохраненныеДанные.АктуальностьСведенийРаздел12, "ЧН="));
	
	ПараметрыВыгрузки.Вставить("ДанныеСегментированы",
	СохраненныеДанные.Свойство("УспешноеАвтозаполнение") И СохраненныеДанные.УспешноеАвтозаполнение = Истина);
	
	УстановитьПризнакиВыгрузкиРазделов8и9(ИмяФормы,
										  ДанныеОтчета,
										  СтраницыРазделов8_12,
										  ПараметрыВыгрузки,
										  СтруктураРеквизитовФормы);
	
	Возврат ПараметрыВыгрузки;
	
КонецФункции

Функция СформироватьИдФайл(ИмяФормы, ПараметрыВыгрузки)
	
	Возврат ПараметрыВыгрузки.ПрефиксИмениФайлаВыгрузки
		+ "_" + ?(ЗначениеЗаполнено(ПараметрыВыгрузки.КодИФНСПосредника),
				ПараметрыВыгрузки.КодИФНСПосредника, ПараметрыВыгрузки.КодИФНС)
		+ "_" + ПараметрыВыгрузки.КодИФНС
		+ "_" + ?(ПараметрыВыгрузки.Свойство("ЭтоПБОЮЛ") И ПараметрыВыгрузки.ЭтоПБОЮЛ,
				СокрЛП(ПараметрыВыгрузки.ИННОрг), СокрЛП(ПараметрыВыгрузки.ИННОрг) + СокрЛП(ПараметрыВыгрузки.КППОрг))
		+ "_" + Формат(ТекущаяДатаСеанса(), "ДФ=ггггММдд")
		+ "_" + Строка(Новый УникальныйИдентификатор);
	
КонецФункции

Процедура УстановитьПризнакиВыгрузкиРазделов8и9(ИмяФормы,
												ДанныеОтчета,
												СтраницыРазделов8_12,
												ПараметрыВыгрузки,
												СтруктураРеквизитовФормы)
	
	Раздел3 = ДанныеОтчета.ПолеТабличногоДокументаРаздел3;
	Раздел4 = ДанныеОтчета.ПолеТабличногоДокументаРаздел4;
	Раздел5 = ДанныеОтчета.Раздел5;
	Раздел6 = ДанныеОтчета.ПолеТабличногоДокументаРаздел6;
	
	ЗаполненаРаздел4Строка030 = Ложь;
	ЗаполненаРаздел4Строка040 = Ложь;
	ЗаполненаРаздел4Строка050 = Ложь;
	ЗаполненаРаздел4Строка080 = Ложь;
	
	НомерСтроки = 1;
	Пока РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(
		Раздел4, "П0004М1003003_" + Формат(НомерСтроки, "ЧГ=")) Цикл
		
		ЗаполненаРаздел4Строка030 = ЗаполненаРаздел4Строка030 ИЛИ Раздел4["П0004М1003003_" + Формат(НомерСтроки, "ЧГ=")] > 0;
		ЗаполненаРаздел4Строка040 = ЗаполненаРаздел4Строка040 ИЛИ Раздел4["П0004М1004003_" + Формат(НомерСтроки, "ЧГ=")] > 0;
		ЗаполненаРаздел4Строка050 = ЗаполненаРаздел4Строка050 ИЛИ Раздел4["П0004М1005003_" + Формат(НомерСтроки, "ЧГ=")] > 0;
		НомерСтроки = НомерСтроки + 1;
		
	КонецЦикла;
	
	НомерСтроки = 1;
	Пока РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(
		Раздел4, "П0004М2008003_" + Формат(НомерСтроки, "ЧГ=")) Цикл
		
		ЗаполненаРаздел4Строка080 = ЗаполненаРаздел4Строка050 ИЛИ Раздел4["П0004М2008003_" + Формат(НомерСтроки, "ЧГ=")] > 0;
		НомерСтроки = НомерСтроки + 1;
		
	КонецЦикла;
	
	ЗаполненаРаздел5Строка050 = Ложь;
	ЗаполненаРаздел5Строка070 = Ложь;
	
	Для Каждого ЛистРаздела Из Раздел5 Цикл
		
		Если ТипЗнч(ЛистРаздела.Данные) = Тип("Структура") Тогда
			ДанныеЛиста = ЛистРаздела.Данные;
		Иначе
			ДанныеЛиста = ЛистРаздела.Данные[0].Значение;
		КонецЕсли;
		
		НомерСтроки = 1;
		Пока РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(
			ДанныеЛиста, "П000500005003_" + Формат(НомерСтроки, "ЧГ=")) Цикл
			
			ЗаполненаРаздел5Строка050
			= ЗаполненаРаздел5Строка050 ИЛИ ДанныеЛиста["П000500005003_" + Формат(НомерСтроки, "ЧГ=")] > 0;
			ЗаполненаРаздел5Строка070
			= ЗаполненаРаздел5Строка070 ИЛИ ДанныеЛиста["П000500007003_" + Формат(НомерСтроки, "ЧГ=")] > 0;
			НомерСтроки = НомерСтроки + 1;
			
		КонецЦикла;
		
	КонецЦикла;
	
	ЗаполненаРаздел6Строка030 = Ложь;
	ЗаполненаРаздел6Строка040 = Ложь;
	ЗаполненаРаздел6Строка100 = Ложь;
	ЗаполненаРаздел6Строка120 = Ложь;
	ЗаполненаРаздел6Строка140 = Ложь;
	
	НомерСтроки = 1;
	Пока РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(
		Раздел6, "П0006М1003003_" + Формат(НомерСтроки, "ЧГ=")) Цикл
		
		ЗаполненаРаздел6Строка030 = ЗаполненаРаздел6Строка030 ИЛИ Раздел6["П0006М1003003_" + Формат(НомерСтроки, "ЧГ=")] > 0;
		НомерСтроки = НомерСтроки + 1;
		
	КонецЦикла;
	
	НомерСтроки = 1;
	Пока РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(
		Раздел6, "П0006М1004003_" + Формат(НомерСтроки, "ЧГ=")) Цикл
		
		ЗаполненаРаздел6Строка040 = ЗаполненаРаздел6Строка040 ИЛИ Раздел6["П0006М1004003_" + Формат(НомерСтроки, "ЧГ=")] > 0;
		НомерСтроки = НомерСтроки + 1;
		
	КонецЦикла;
	
	НомерСтроки = 1;
	Пока РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(
		Раздел6, "П0006М2010003_" + Формат(НомерСтроки, "ЧГ=")) Цикл
		
		ЗаполненаРаздел6Строка100 = ЗаполненаРаздел6Строка100 ИЛИ Раздел6["П0006М2010003_" + Формат(НомерСтроки, "ЧГ=")] > 0;
		НомерСтроки = НомерСтроки + 1;
		
	КонецЦикла;
	
	НомерСтроки = 1;
	Пока РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(
		Раздел6, "П0006М3012003_" + Формат(НомерСтроки, "ЧГ=")) Цикл
		
		ЗаполненаРаздел6Строка120 = ЗаполненаРаздел6Строка120 ИЛИ Раздел6["П0006М3012003_" + Формат(НомерСтроки, "ЧГ=")] > 0;
		ЗаполненаРаздел6Строка140 = ЗаполненаРаздел6Строка140 ИЛИ Раздел6["П0006М3014003_" + Формат(НомерСтроки, "ЧГ=")] > 0;
		НомерСтроки = НомерСтроки + 1;
		
	КонецЦикла;
	
	Если СтраницыРазделов8_12 = Неопределено Тогда
		
		ДанныеРаздел8_Прил1 = Неопределено;
		ДанныеРаздел9_Прил1 = Неопределено;
		
	Иначе
		
		ДанныеРаздел8_Прил1 = ДанныеРазделаНДСИзРегистра(ИмяФормы,
														 "Раздел8_Прил1",
														 СтраницыРазделов8_12.СтраницыРаздел8_Прил1,
														 ПараметрыВыгрузки.ДанныеСегментированы,
														 СтруктураРеквизитовФормы);
		
		ДанныеРаздел9_Прил1 = ДанныеРазделаНДСИзРегистра(ИмяФормы,
												 		 "Раздел9_Прил1",
														 СтраницыРазделов8_12.СтраницыРаздел9_Прил1,
														 ПараметрыВыгрузки.ДанныеСегментированы,
														 СтруктураРеквизитовФормы);
		
	КонецЕсли;
	
	Раздел8Обязателен = ДанныеРаздел8_Прил1 <> Неопределено
	ИЛИ Раздел3.П000300019003 > 0
	ИЛИ ЗаполненаРаздел4Строка030
	ИЛИ ЗаполненаРаздел4Строка040
	ИЛИ ЗаполненаРаздел5Строка050
	ИЛИ ЗаполненаРаздел5Строка070
	ИЛИ ЗаполненаРаздел6Строка040
	ИЛИ ЗаполненаРаздел6Строка140;
	
	ПараметрыВыгрузки.Вставить("Раздел8Обязателен", Раздел8Обязателен);
	
	Раздел9Обязателен = ДанныеРаздел9_Прил1 <> Неопределено
	ИЛИ Раздел3.П000300011805 > 0
	ИЛИ ЗаполненаРаздел4Строка050
	ИЛИ ЗаполненаРаздел4Строка080
	ИЛИ ЗаполненаРаздел6Строка030
	ИЛИ ЗаполненаРаздел6Строка100
	ИЛИ ЗаполненаРаздел6Строка120;
	
	ПараметрыВыгрузки.Вставить("Раздел9Обязателен", Раздел9Обязателен);
	
КонецПроцедуры

Функция ДанныеРазделаНДСИзРегистра(ИмяФормы,
								   ИмяРаздела,
								   СписокСтраницРаздела,
								   ДанныеСегментированы,
								   СтруктураРеквизитовФормы)
	
	Если ДанныеСегментированы Тогда
		
		СекцииРаздела = СписокСекцийРазделаИзРегистра(ИмяФормы, ИмяРаздела, СписокСтраницРаздела, СтруктураРеквизитовФормы);
		
		Если СекцииРаздела.Количество() > 0 Тогда
			ДанныеРаздела = СекцииРаздела.ВыгрузитьКолонку("НомерПервойСтроки");
		Иначе
			ДанныеРаздела = Неопределено;
		КонецЕсли;
		
	Иначе
		
		ЗаписьРегистраСведений = РегистрыСведений.ДополнительныеФайлыРегламентированныхОтчетов.СоздатьМенеджерЗаписи();
		ЗаписьРегистраСведений.РегламентированныйОтчет = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
		ЗаписьРегистраСведений.ВидДополнительногоФайла = "Данные" + ИмяРаздела;
		
		ЗаписьРегистраСведений.Прочитать();
		
		Если ЗначениеЗаполнено(ЗаписьРегистраСведений.ВидДополнительногоФайла) Тогда
			
			ДанныеРаздела = ЗаписьРегистраСведений.СодержимоеФайла.Получить();
			
			Если ДанныеРаздела.Записи.Количество() = 0 Тогда
				
				ДанныеРаздела = Неопределено;
				
			КонецЕсли;
			
		Иначе
			
			ДанныеРаздела = Неопределено;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ДанныеРаздела;
	
КонецФункции

Функция СписокСекцийРазделаИзРегистра(ИмяФормы, ИмяРаздела, СписокСтраницРаздела, СтруктураРеквизитовФормы) Экспорт
	
	Префикс = "Данные" + ИмяРаздела + ".";
	
	ЗапросПоДанным = Новый Запрос;
	ЗапросПоДанным.Текст = "ВЫБРАТЬ
	                       |	ДополнительныеФайлыРегламентированныхОтчетов.ВидДополнительногоФайла Как ВидДополнительногоФайла
	                       |ИЗ
	                       |	РегистрСведений.ДополнительныеФайлыРегламентированныхОтчетов КАК ДополнительныеФайлыРегламентированныхОтчетов
	                       |ГДЕ
	                       |	ДополнительныеФайлыРегламентированныхОтчетов.РегламентированныйОтчет = &РегламентированныйОтчет
	                       |	И ДополнительныеФайлыРегламентированныхОтчетов.ВидДополнительногоФайла ПОДОБНО &ШаблонОтбора";
	
	ЗапросПоДанным.УстановитьПараметр("ШаблонОтбора", Префикс + "%");
	ЗапросПоДанным.УстановитьПараметр("РегламентированныйОтчет", СтруктураРеквизитовФормы.мСохраненныйДок);
	
	Если ТипЗнч(СписокСтраницРаздела) = Тип("Структура") Тогда
		
		СписокСтраницРаздела = СписокСтраницРаздела["Страницы" + ИмяРаздела];
		
	КонецЕсли;
	
	СписокСтраницРаздела.Очистить();
	
	ВыборкаСегментов = ЗапросПоДанным.Выполнить().Выбрать();
	
	ТипЧисло = Новый ОписаниеТипов("Число");
	
	Пока ВыборкаСегментов.Следующий() Цикл
		НомерПервойСтрокиСегмента = Сред(ВыборкаСегментов.ВидДополнительногоФайла, СтрДлина(Префикс) + 1);
		НомерПервойСтрокиСегмента = ТипЧисло.ПривестиЗначение(НомерПервойСтрокиСегмента);
		
		Страница = СписокСтраницРаздела.Добавить();
		Страница.НомерПервойСтроки = НомерПервойСтрокиСегмента;
	КонецЦикла;
	
	СписокСтраницРаздела.Сортировать("НомерПервойСтроки");
	ВсегоСтраниц = СписокСтраницРаздела.Количество();
	
	Для Инд = 0 По ВсегоСтраниц - 2 Цикл
		СписокСтраницРаздела[Инд].НомерПоследнейСтроки = СписокСтраницРаздела[Инд + 1].НомерПервойСтроки - 1;
	КонецЦикла;
	
	Если ВсегоСтраниц > 0 Тогда
		НомерПервойСтрокиПоследнегоСегмента = СписокСтраницРаздела[ВсегоСтраниц-1].НомерПервойСтроки;
		ДанныеСегмента = РегламентированнаяОтчетность.СегментДанныхРазделаДекларацииНДС(
			СтруктураРеквизитовФормы.мСохраненныйДок, ИмяРаздела, НомерПервойСтрокиПоследнегоСегмента);
		ВсегоСтрокВСегменте = ДанныеСегмента.Количество();
		СписокСтраницРаздела[ВсегоСтраниц-1].НомерПоследнейСтроки =
			НомерПервойСтрокиПоследнегоСегмента - 1 + ВсегоСтрокВСегменте;
	КонецЕсли;
	
	Для Каждого Страница Из СписокСтраницРаздела Цикл
		НомерСтраницы = СписокСтраницРаздела.Индекс(Страница) + 1;
		Страница.Представление = "Часть " + СтрокаЧГ0(ИмяФормы, НомерСтраницы);
	КонецЦикла;
	
	Возврат СписокСтраницРаздела;
	
КонецФункции

Функция СтрокаЧГ0(ИмяФормы, ИсходноеЧисло)
	
	Возврат Формат(ИсходноеЧисло, "ЧН=; ЧГ=");
	
КонецФункции

Функция ИзвлечьСтруктуруXML(ИмяФормы) Экспорт
	
	ДеревоСтруктуры = Новый ДеревоЗначений;
	ДеревоСтруктуры.Колонки.Добавить("Код");
	ДеревоСтруктуры.Колонки.Добавить("Тип");
	ДеревоСтруктуры.Колонки.Добавить("Формат");
	ДеревоСтруктуры.Колонки.Добавить("МинРазмерность");
	ДеревоСтруктуры.Колонки.Добавить("МаксРазмерность");
	ДеревоСтруктуры.Колонки.Добавить("Обязательность");
	ДеревоСтруктуры.Колонки.Добавить("Многостраничность");
	ДеревоСтруктуры.Колонки.Добавить("Многострочность");
	ДеревоСтруктуры.Колонки.Добавить("Раздел");
	ДеревоСтруктуры.Колонки.Добавить("Ключ");
	ДеревоСтруктуры.Колонки.Добавить("Условие");
	ДеревоСтруктуры.Колонки.Добавить("ЗначениеПоУмолчанию");
	ДеревоСтруктуры.Колонки.Добавить("Значение");
	ДеревоСтруктуры.Колонки.Добавить("Представление");
	ДеревоСтруктуры.Колонки.Добавить("Показатели");
	
	Если ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2019Кв1") Тогда
		ИмяМакетаСтруктурыВыгрузки = "СхемаВыгрузки506";
	Иначе// "ФормаОтчета2017Кв1"
		ИмяМакетаСтруктурыВыгрузки = "СхемаВыгрузки505";
	КонецЕсли;
	
	Макет = ЭтотОбъект.ПолучитьМакет(ИмяМакетаСтруктурыВыгрузки);
	
	ВысотаТаблицы = Макет.ВысотаТаблицы;
	
	УчтенныеГруппы = Новый Соответствие;
	
	Для Уровень = 0 По Макет.КоличествоУровнейГруппировокСтрок() - 1 Цикл
		Макет.ПоказатьУровеньГруппировокСтрок(Уровень);
		Для НомерСтроки = 2 По ВысотаТаблицы Цикл
			НомСтр = ВысотаТаблицы - НомерСтроки + 2;
			Если Макет.Область(НомСтр, 1).Видимость И УчтенныеГруппы.Получить(НомСтр) = Неопределено Тогда	
				
				РодительскийУзел = ДеревоСтруктуры;
				Если Уровень <> 0 Тогда
					Для Инд = 1 По НомСтр - 2 Цикл
						Узел = УчтенныеГруппы.Получить(НомСтр - Инд);
						Если Узел <> Неопределено Тогда
							РодительскийУзел = Узел;
							Прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				НовСтр = РодительскийУзел.Строки.Вставить(0);
				НовСтр.Код = СокрЛП(Макет.Область(НомСтр, 1, НомСтр, 1).Текст);
				НовСтр.Раздел = СокрЛП(Макет.Область(НомСтр, 2, НомСтр, 2).Текст);
				НовСтр.Ключ = СокрЛП(Макет.Область(НомСтр, 3, НомСтр, 3).Текст);
				НовСтр.Тип = СокрЛП(Макет.Область(НомСтр, 4, НомСтр, 4).Текст);
				НовСтр.Формат = СокрЛП(Макет.Область(НомСтр, 5, НомСтр, 5).Текст);
				МинРазмерность = СокрЛП(Макет.Область(НомСтр, 6, НомСтр, 6).Текст);
				НовСтр.МинРазмерность = ?(ПустаяСтрока(МинРазмерность), ?(НовСтр.Формат = "N", 99999, 0), Число(МинРазмерность));
				МаксРазмерность = СокрЛП(Макет.Область(НомСтр, 7, НомСтр, 7).Текст);
				НовСтр.МаксРазмерность = ?(ПустаяСтрока(МаксРазмерность), 99999, Число(МаксРазмерность));
				НовСтр.Обязательность = СокрЛП(Макет.Область(НомСтр, 8, НомСтр, 8).Текст);
				НовСтр.Многостраничность = НЕ ПустаяСтрока(Макет.Область(НомСтр, 9, НомСтр, 9).Текст);
				НовСтр.Многострочность = НЕ ПустаяСтрока(Макет.Область(НомСтр, 10, НомСтр, 10).Текст);
				НовСтр.Условие = СокрЛП(Макет.Область(НомСтр, 11, НомСтр, 11).Текст);
				НовСтр.ЗначениеПоУмолчанию = СокрЛП(Макет.Область(НомСтр, 12, НомСтр, 12).Текст);
				НовСтр.Представление = СокрЛП(Макет.Область(НомСтр, 13, НомСтр, 13).Текст);
				
				УчтенныеГруппы.Вставить(НомСтр, НовСтр);
				
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат ДеревоСтруктуры;
	
КонецФункции

Процедура ПроверитьВыгрузкуПоНовомуАлгоритмуНаСервере(ИмяФормы, СтруктураРеквизитовФормы) Экспорт
	
	АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, Новый УникальныйИдентификатор);
	Если ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2019Кв1") Тогда
		ШаблоныОшибок = Отчеты.РегламентированныйОтчетНДС.ПолучитьМакет("ШаблоныСообщенийОбОшибках2019Кв1");
	Иначе// "ФормаОтчета2017Кв1"
		ШаблоныОшибок = Отчеты.РегламентированныйОтчетНДС.ПолучитьМакет("ШаблоныСообщенийОбОшибках2017Кв1");
	КонецЕсли;
	РегламентированныйОтчет = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
	
	СтруктураРеквизитовФормы.Вставить("АдресХранилищаПроверкиВыгрузки", АдресХранилища);
	
	НаименованиеОтчета = СтруктураРеквизитовФормы.НаименованиеОтчета + " за " + СтруктураРеквизитовФормы.СтрПериодОтчета
	+ " (" + СтруктураРеквизитовФормы.мСохраненныйДок.Организация.Наименование + ")";
	
	РегламентированнаяОтчетностьПроверкаНДС.
	ВыявитьОшибкиЗаполненияПрепятствующиеФормированиюЭлектронногоПредставления(
	РегламентированныйОтчет, ШаблоныОшибок, НаименованиеОтчета, АдресХранилища);
	
	ЗаписатьРезультатПроверкиВыгрузки(ИмяФормы, СтруктураРеквизитовФормы);
	
КонецПроцедуры

Процедура ЗаписатьРезультатПроверкиВыгрузки(ИмяФормы, СтруктураРеквизитовФормы) Экспорт
	
	Если ЗначениеЗаполнено(СтруктураРеквизитовФормы.АдресХранилищаПроверкиВыгрузки) Тогда
		
		Результат = ПолучитьИзВременногоХранилища(СтруктураРеквизитовФормы.АдресХранилищаПроверкиВыгрузки);
		
		ПараметрыЗаписи = Новый Структура;
		ПараметрыЗаписи.Вставить("РегламентированныйОтчет", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка);
		ПараметрыЗаписи.Вставить("ВидДополнительногоФайла", "РезультатПроверкиВыгрузки.mxl");
		ПараметрыЗаписи.Вставить("Данные",                  Результат);
		
		РегламентированнаяОтчетность.ЗаписатьДанныеВРегистрДополнительныхФайлов(ПараметрыЗаписи);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьДанными(ИмяФормы,
						   ДанныеОтчета,
						   ПараметрыВыгрузки,
						   ДеревоВыгрузки,
						   РезультатВыгрузки,
					 	   СтруктураРеквизитовФормы)
	
	ОбработатьУсловныеЭлементы(ИмяФормы,
							   ДанныеОтчета,
							   ПараметрыВыгрузки,
							   ДеревоВыгрузки,
							   РезультатВыгрузки);
												  
	ЗаполнитьДаннымиУзел(ИмяФормы,
						 ДанныеОтчета,
						 СтруктураРеквизитовФормы,
						 ПараметрыВыгрузки,
						 ДеревоВыгрузки);
											
	ОтсечьНезаполненныеНеобязательныеУзлы(ИмяФормы, ДеревоВыгрузки);
		
	ПостобработкаДереваВыгрузки(ИмяФормы, ДеревоВыгрузки);
	
КонецПроцедуры

Процедура ОбработатьУсловныеЭлементы(ИмяФормы,
									 ДанныеОтчета,
									 Знач ПараметрыВыгрузки,
									 Узел,
									 РезультатВыгрузки)
	
	Если ТипЗнч(Узел) <> Тип("ДеревоЗначений") Тогда
		Если Узел.Код = ПараметрыВыгрузки.ИмяКлючевогоУзлаСодержательнойЧасти Тогда
			Возврат;
		КонецЕсли;
		РегламентированнаяОтчетность.ДополнитьСтруктуруПараметровПрочиеОтчеты(ДанныеОтчета, ПараметрыВыгрузки, Узел);
	КонецЕсли;
	
	КоличествоСтрок = Узел.Строки.Количество();
	
	Для Инд = 1 По КоличествоСтрок Цикл
		ТекСтр = Узел.Строки.Получить(КоличествоСтрок - Инд);
		Если НЕ ПустаяСтрока(ТекСтр.Условие) Тогда
			Если НЕ РегламентированнаяОтчетность.УсловиеВыполнено(РезультатВыгрузки, ПараметрыВыгрузки, ТекСтр.Условие) Тогда
				Узел.Строки.Удалить(ТекСтр);
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		ОбработатьУсловныеЭлементы(ИмяФормы, ДанныеОтчета, ПараметрыВыгрузки, ТекСтр, РезультатВыгрузки);
	КонецЦикла;
	
КонецПроцедуры

Процедура ОтсечьНезаполненныеНеобязательныеУзлы(ИмяФормы, Узел)
	
	КоличествоСтрок = Узел.Строки.Количество();
	
	Для Инд = 1 По КоличествоСтрок Цикл
		Стр = Узел.Строки.Получить(КоличествоСтрок - Инд);
		ОтсечьНезаполненныеНеобязательныеУзлы(ИмяФормы, Стр);
	КонецЦикла;
	
	Если ТипЗнч(Узел) <> Тип("ДеревоЗначений") Тогда
		Если (СтрНайти(Узел.Обязательность, "Н") <> 0
		 ИЛИ СтрНайти(Узел.Обязательность, "H") <> 0)
		   И УзелПуст(ИмяФормы, Узел) Тогда // учтем оба варианта: кириллицу и латиницу
			РегламентированнаяОтчетность.УдалитьУзел(Узел);
		ИначеЕсли (СтрНайти(Узел.Обязательность, "М") <> 0
			  ИЛИ СтрНайти(Узел.Обязательность, "M") <> 0) // учтем оба варианта: кириллицу и латиницу
			    И УзелПуст(ИмяФормы, Узел)
				И ?(СтрНайти(Узел.Обязательность, "О") <> 0
				ИЛИ СтрНайти(Узел.Обязательность, "O") <> 0,
				РегламентированнаяОтчетность.ИмеютсяАналогичныеСоседниеУзлыКлюч(Узел), Истина) Тогда
			РегламентированнаяОтчетность.УдалитьУзел(Узел);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПостобработкаДереваВыгрузки(ИмяФормы, ДеревоВыгрузки)
	
	УзелНДС = ДеревоВыгрузки.Строки.Найти("НДС", "Код", Истина);
	
	УзелНалИсчСМР = УзелНДС.Строки.Найти("НалИсчСМР", "Код", Истина);
	Если УзелНалИсчСМР <> Неопределено
	   И УзелПуст(ИмяФормы, УзелНалИсчСМР)
	   И УзелНалИсчСМР.Родитель.Родитель.Строки.Найти("ВыпСМРСоб", "Код", Истина) = Неопределено Тогда
		
		УзелНалИсчСМР.Родитель.Строки.Удалить(УзелНалИсчСМР);
		
	КонецЕсли;
	
	УзелСумНалВосст = УзелНДС.Строки.Найти("СумНалВосст", "Код", Истина);
	Если УзелСумНалВосст <> Неопределено И УзелПуст(ИмяФормы, УзелСумНалВосст) Тогда
		
		УзлыДатаИсп170 = УзелНДС.Строки.НайтиСтроки(Новый Структура("Код", "ДатаИсп170"), Истина);
		Если УзлыДатаИсп170.Количество() = 0 Тогда
			
			УзелСумНалВосст.Родитель.Строки.Удалить(УзелСумНалВосст);
			
		КонецЕсли;
		
	КонецЕсли;
	
	УзелСумНалОб = УзелНДС.Строки.Найти("СумНалОб", "Код", Истина);
	Если УзелСумНалОб <> Неопределено И УзелСумНалОб.Строки.Количество() = 1
	   И УзелПуст(ИмяФормы, УзелСумНалОб.Строки[0]) Тогда
		
		УзлыСумНалИсч = УзелНДС.Строки.НайтиСтроки(Новый Структура("Код", "СумНалИсч"), Истина);
		Если УзлыСумНалИсч.Количество() = 0 Тогда
			
			УзелСумНалОб.Родитель.Строки.Удалить(УзелСумНалОб);
			
		КонецЕсли;
		
	КонецЕсли;
	
	УзелСумУпл164 = УзелНДС.Строки.Найти("СумУпл164", "Код", Истина);
	Если УзелСумУпл164 <> Неопределено Тогда
		
		УзелСумНалВычСложный = УзелСумУпл164.Строки.Найти("СумНалВыч", "Код");
		Если УзелСумНалВычСложный <> Неопределено Тогда
			
			Если УзелСумНалВычСложный.Строки.Количество() = 1 И УзелПуст(ИмяФормы, УзелСумНалВычСложный.Строки[0]) Тогда
				
				УзлыСумНалВыч = УзелНДС.Строки.НайтиСтроки(Новый Структура("Код, Ключ", "СумНалВыч", "П000320000103"), Истина);
				Если УзлыСумНалВыч.Количество() = 0 Тогда
					УзелСумНалВычСложный.Родитель.Строки.Удалить(УзелСумНалВычСложный);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	НалВычПред0 = УзелНДС.Строки.Найти("НалВычПред0", "Код", Истина);
	Если НалВычПред0 <> Неопределено Тогда
		СумВозмПдтв = НалВычПред0.Строки.Найти("СумВозмПдтв", "Код", Истина);
		СумВозмНеПдтв = НалВычПред0.Строки.Найти("СумВозмНеПдтв", "Код", Истина);
		Если СумВозмПдтв = Неопределено И СумВозмНеПдтв = Неопределено Тогда
			НалВычПред0.Родитель.Строки.Удалить(НалВычПред0);
		КонецЕсли;
	КонецЕсли;
	
	УзелСумНал164Ит = УзелНДС.Строки.Найти("СумНал164Ит", "Код", Истина);
	Если УзелСумНал164Ит <> Неопределено Тогда
		МногострочнаяЧастьЗаполнена = (УзелНДС.Строки.Найти("СумОпер6", "Код", Истина) <> Неопределено);
		Если НЕ МногострочнаяЧастьЗаполнена И УзелПуст(ИмяФормы, УзелСумНал164Ит) Тогда
			РегламентированнаяОтчетность.УдалитьУзел(УзелСумНал164Ит);
		КонецЕсли;
	КонецЕсли;
	
	ОтсечьНезаполненныеНеобязательныеУзлы(ИмяФормы, ДеревоВыгрузки);
	
КонецПроцедуры

Процедура ЗаполнитьДаннымиУзел(ИмяФормы,
							   ДанныеОтчета,
							   СтруктураРеквизитовФормы,
							   ПараметрыВыгрузки,
							   Узел,
							   НомерСтроки = Неопределено)
	
	Для Каждого Стр Из Узел.Строки Цикл
		Если Стр.Тип = "С" ИЛИ Стр.Тип = "C" Тогда // учтем оба варианта: кириллицу и латиницу
			Если РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(ПараметрыВыгрузки,
				"ИмяКлючевогоУзлаСодержательнойЧасти") И Стр.Код = ПараметрыВыгрузки.ИмяКлючевогоУзлаСодержательнойЧасти Тогда
				ЗаполнитьСодержательнуюЧасть(ИмяФормы, ДанныеОтчета, СтруктураРеквизитовФормы, Стр);
			Иначе
				ЗаполнитьДаннымиУзел(ИмяФормы,
									 ДанныеОтчета,
									 СтруктураРеквизитовФормы,
									 ПараметрыВыгрузки,
									 Стр);
			КонецЕсли;
		Иначе
			Если ПустаяСтрока(Стр.ЗначениеПоУмолчанию) Тогда
				Если НЕ ПустаяСтрока(Стр.Ключ)
					И РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(ПараметрыВыгрузки, Стр.Ключ) Тогда
					ВывестиПоказательВXML(ИмяФормы, Стр, ПараметрыВыгрузки[Стр.Ключ]);
				Иначе
					Стр.Значение = "";
				КонецЕсли;
			ИначеЕсли Лев(Стр.ЗначениеПоУмолчанию, 1) = "&" Тогда
				Ключ = Сред(Стр.ЗначениеПоУмолчанию, 2);
				Если РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(ПараметрыВыгрузки, Ключ) Тогда
					ВывестиПоказательВXML(ИмяФормы, Стр, ПараметрыВыгрузки[Ключ]);
				КонецЕсли;
			Иначе
				Стр.Значение = Стр.ЗначениеПоУмолчанию;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ВывестиПоказательВXML(ИмяФормы, Узел, ЗначениеПоказателя)
	
	МинШирина = Узел.МинРазмерность;
	МаксШирина = Узел.МаксРазмерность;
	
	Если Узел.Формат = "T" ИЛИ Узел.Формат = "Т" ИЛИ Узел.Формат = "S" Тогда // учтем оба варианта: кириллицу и латиницу
		Если ТипЗнч(ЗначениеПоказателя) = Тип("Дата") Тогда
			ЗначениеПоказателяСтр = Формат(ЗначениеПоказателя, "ДФ=dd.MM.yyyy");
		Иначе
			ЗначениеПоказателяСтр = СокрЛП(ЗначениеПоказателя);
		КонецЕсли;
		Узел.Значение = ?(МаксШирина < СтрДлина(ЗначениеПоказателяСтр),
		СокрЛП(Лев(ЗначениеПоказателяСтр, МаксШирина)), ЗначениеПоказателяСтр);
	ИначеЕсли Узел.Формат = "N" Тогда
		СтрокаФормата = "ЧРД=.;ЧН=0;ЧГ=;";
		Если Узел.МаксРазмерность <> 0 И Узел.МаксРазмерность <> 99999 Тогда
			СтрокаФормата = СтрокаФормата + "ЧЦ=" + Формат(Узел.МаксРазмерность, "ЧГ=") + ";";
		КонецЕсли;
		Если Узел.МинРазмерность <> 99999 Тогда
			СтрокаФормата = СтрокаФормата + "ЧДЦ=" + Формат(Узел.МинРазмерность, "ЧГ=") + ";";
		КонецЕсли;
		Узел.Значение = СокрЛП(Формат(ЗначениеПоказателя, СтрокаФормата));
	ИначеЕсли Узел.Формат = "gYear" Тогда
		Если ТипЗнч(ЗначениеПоказателя) = Тип("Дата") Тогда
			Узел.Значение = СокрЛП(Формат(ЗначениеПоказателя, "ДФ=гггг"));
		Иначе
			Узел.Значение = Прав(СокрЛП(ЗначениеПоказателя), 4);
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

Функция УзелПуст(ИмяФормы, Узел)
	
	Для Каждого Стр из Узел.Строки Цикл
		Если НЕ УзелПуст(ИмяФормы, Стр) Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Если Узел.Формат = "S" Тогда
		Возврат Истина;
	ИначеЕсли Узел.Формат = "N" Тогда
		Возврат Узел.Значение = "0" ИЛИ (НЕ ЗначениеЗаполнено(Узел.Значение));
	Иначе
		Возврат НЕ ЗначениеЗаполнено(Узел.Значение);
	КонецЕсли;
	
КонецФункции

Процедура ЗаполнитьСодержательнуюЧасть(ИмяФормы, ДанныеОтчета, СтруктураРеквизитовФормы, УзелРодитель)
	
	Титульный     = ДанныеОтчета.ПолеТабличногоДокументаТитульный;
	Раздел1       = ДанныеОтчета.ПолеТабличногоДокументаРаздел1;
	Раздел2       = ДанныеОтчета.Раздел2;
	Раздел3       = ДанныеОтчета.ПолеТабличногоДокументаРаздел3;
	Раздел3_Прил1 = ДанныеОтчета.Раздел3_Прил1;
	Раздел3_Прил2 = ДанныеОтчета.ПолеТабличногоДокументаРаздел3_Прил2;
	Раздел4       = ДанныеОтчета.ПолеТабличногоДокументаРаздел4;
	Раздел5       = ДанныеОтчета.Раздел5;
	Раздел6       = ДанныеОтчета.ПолеТабличногоДокументаРаздел6;
	Раздел7       = ДанныеОтчета.ПолеТабличногоДокументаРаздел7;
	
	// Раздел 1.
	УзелСумУплНП = ПолучитьПодчиненныйЭлемент(ИмяФормы, УзелРодитель, "СумУплНП");
	ЗадатьЗначениеЭлемента(ИмяФормы, УзелСумУплНП, "ОКТМО", Раздел1.П000100001003);
	ЗадатьЗначениеЭлемента(ИмяФормы, УзелСумУплНП, "КБК",   Раздел1.П000100002003);
	
	П100100004003
	= ?(ЗначениеСуммыЗаполнено(ИмяФормы, Раздел1.П000100005003), -Раздел1.П000100005003, Раздел1.П000100004003);
	
	ЗадатьЗначениеЭлемента(ИмяФормы, УзелСумУплНП, "СумПУ_173.5", Раздел1.П000100003003);
	ЗадатьЗначениеЭлемента(ИмяФормы, УзелСумУплНП, "СумПУ_173.1", П100100004003);
	
	Узел_СумПУ_173_5 = ПолучитьПодчиненныйЭлемент(ИмяФормы, УзелСумУплНП, "СумПУ_173.5");
	Узел_СумПУ_173_1 = ПолучитьПодчиненныйЭлемент(ИмяФормы, УзелСумУплНП, "СумПУ_173.1");
	
	ЗаполненоОКТМО = ЗначениеЗаполнено(Раздел1.П000100001003);
	
	Если ЗаполненоОКТМО Тогда
		Если ЗначениеЗаполнено(Раздел1.П000100003003) И НЕ ЗначениеЗаполнено(П100100004003) Тогда
			РегламентированнаяОтчетность.УдалитьУзел(Узел_СумПУ_173_1);
		ИначеЕсли НЕ ЗначениеЗаполнено(Раздел1.П000100003003) Тогда
			РегламентированнаяОтчетность.УдалитьУзел(Узел_СумПУ_173_5);
		КонецЕсли;
	Иначе
		РегламентированнаяОтчетность.УдалитьУзел(Узел_СумПУ_173_5);
		РегламентированнаяОтчетность.УдалитьУзел(Узел_СумПУ_173_1);
	КонецЕсли;
	
	ЗадатьЗначениеЭлемента(ИмяФормы, УзелСумУплНП, "НомДогИТ",     Раздел1.П000100006003);
	ЗадатьЗначениеЭлемента(ИмяФормы, УзелСумУплНП, "ДатаНачДогИТ", Раздел1.П000100007003);
	ЗадатьЗначениеЭлемента(ИмяФормы, УзелСумУплНП, "ДатаКонДогИТ", Раздел1.П000100008003);
	
	// Раздел 2.
	УзелСумУплНАШаблон = ПолучитьПодчиненныйЭлемент(ИмяФормы, УзелРодитель, "СумУплНА");
	Для Каждого ЛистРаздела2 Из Раздел2 Цикл
		
		УзелСумУплНА = СкопироватьУзел(ИмяФормы, УзелРодитель, УзелСумУплНАШаблон);
		
		ЗаполнитьДаннымиУзел(ИмяФормы,
							 ДанныеОтчета,
							 СтруктураРеквизитовФормы,
							 ЛистРаздела2.Данные,
							 УзелСумУплНА);
		
		Если ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2019Кв1") Тогда
			
			Если СокрЛП(ЛистРаздела2.Данные.П000200007003) = "1011715" Тогда
				РегламентированнаяОтчетность.УдалитьУзел(ПолучитьПодчиненныйЭлемент(ИмяФормы, УзелСумУплНА, "КППИно"));
				РегламентированнаяОтчетность.УдалитьУзел(ПолучитьПодчиненныйЭлемент(ИмяФормы, УзелСумУплНА, "СведПродФЛ"));
				РегламентированнаяОтчетность.УдалитьУзел(ПолучитьПодчиненныйЭлемент(ИмяФормы, УзелСумУплНА, "СведПродЮЛ"));
			Иначе
				ИННЭкземпляраРаздела = СокрЛП(ЛистРаздела2.Данные.П000200003003);
				Если СтрДлина(ИННЭкземпляраРаздела) = 10 ИЛИ НЕ ЗначениеЗаполнено(ИННЭкземпляраРаздела) Тогда
					РегламентированнаяОтчетность.УдалитьУзел(ПолучитьПодчиненныйЭлемент(ИмяФормы, УзелСумУплНА, "СведПродФЛ"));
				ИначеЕсли СтрДлина(ИННЭкземпляраРаздела) = 12 Тогда
					РегламентированнаяОтчетность.УдалитьУзел(ПолучитьПодчиненныйЭлемент(ИмяФормы, УзелСумУплНА, "СведПродЮЛ"));
				КонецЕсли;
			КонецЕсли;
			
		Иначе// "ФормаОтчета2017Кв1"
			
			ИННЭкземпляраРаздела = СокрЛП(ЛистРаздела2.Данные.П000200003003);
			Если СтрДлина(ИННЭкземпляраРаздела) = 10 ИЛИ НЕ ЗначениеЗаполнено(ИННЭкземпляраРаздела) Тогда
				РегламентированнаяОтчетность.УдалитьУзел(ПолучитьПодчиненныйЭлемент(ИмяФормы, УзелСумУплНА, "СведПродФЛ"));
			ИначеЕсли СтрДлина(ИННЭкземпляраРаздела) = 12 Тогда
				РегламентированнаяОтчетность.УдалитьУзел(ПолучитьПодчиненныйЭлемент(ИмяФормы, УзелСумУплНА, "СведПродЮЛ"));
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Раздел 3.
	УзелСумУпл164 = ПолучитьПодчиненныйЭлемент(ИмяФормы, УзелРодитель, "СумУпл164");
	ЗадатьЗначениеЭлемента(ИмяФормы, УзелСумУпл164, "НалПУ164",
	?(ЗначениеСуммыЗаполнено(ИмяФормы, Раздел3.П000300021003), -Раздел3.П000300021003, Раздел3.П000300020003));
	
	ЗаполнитьДаннымиУзел(ИмяФормы,
						 ДанныеОтчета,
						 СтруктураРеквизитовФормы,
						 Раздел3,
						 ПолучитьПодчиненныйЭлемент(ИмяФормы, УзелСумУпл164, "СумНалОб"));
	
	ЗаполнитьДаннымиУзел(ИмяФормы,
						 ДанныеОтчета,
						 СтруктураРеквизитовФормы,
						 Раздел3,
						 ПолучитьПодчиненныйЭлемент(ИмяФормы, УзелСумУпл164, "СумНалВыч"));
	
	// Раздел 3 приложение 1.
	УзелСумВосУплШаблон = ПолучитьПодчиненныйЭлемент(ИмяФормы, УзелСумУпл164, "СумВосУпл");
	Для Каждого ЛистРаздел3Прил1 Из Раздел3_Прил1 Цикл
		УзелСумВосУпл = СкопироватьУзел(ИмяФормы, УзелСумУпл164, УзелСумВосУплШаблон);
		ДанныеЛистРаздел3Прил1 = ЛистРаздел3Прил1.Данные;
		Для Каждого Узел Из УзелСумВосУпл.Строки Цикл
			Если Узел.Тип = "А" ИЛИ Узел.Тип = "A" Тогда
				ВывестиПоказательВXML(ИмяФормы, Узел, ДанныеЛистРаздел3Прил1[Узел.Ключ]);
			КонецЕсли;
		КонецЦикла;
		УзелСведНалГодШаблон = ПолучитьПодчиненныйЭлемент(ИмяФормы, УзелСумВосУпл, "СведНалГод");
		Инд = 1;
		Пока РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(
				ДанныеЛистРаздел3Прил1, "П000310007001_" + Формат(Инд, "ЧГ=")) Цикл
			УзелСведНалГод = СкопироватьУзел(ИмяФормы, УзелСумВосУпл, УзелСведНалГодШаблон);
			ВыгрузитьСтрокуМногострочнойЧасти(ИмяФормы, ДанныеЛистРаздел3Прил1, УзелСведНалГод, Инд);
			Инд = Инд + 1;
		КонецЦикла;
	КонецЦикла;
	
	// Раздел 3 приложение 2.
	УзелСумВычИн = ПолучитьПодчиненныйЭлемент(ИмяФормы, УзелСумУпл164, "СумВычИн");
	УзелСведНалГодИШаблон = ПолучитьПодчиненныйЭлемент(ИмяФормы, УзелСумВычИн, "СведНалГодИ");
	Инд = 1;
	Пока РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(
			Раздел3_Прил2, "П000320000101_" + Формат(Инд, "ЧГ=")) Цикл
		УзелСведНалГодИ = СкопироватьУзел(ИмяФормы, УзелСумВычИн, УзелСведНалГодИШаблон);
		ВыгрузитьСтрокуМногострочнойЧасти(ИмяФормы, Раздел3_Прил2, УзелСведНалГодИ, Инд);
		
		// Элемент "СумНалИсч" обязателен при отсутствии элемента "СумНалВыч".
		// Элемент "СумНалВыч" обязателен при отсутствии элемента "СумНалИсч".
		УзелКППИнУч = ПолучитьПодчиненныйЭлемент(ИмяФормы, УзелСведНалГодИ, "КППИнУч");
		Если ЗначениеЗаполнено(УзелКППИнУч.Значение) Тогда
			УзелСумНалИсч = ПолучитьПодчиненныйЭлемент(ИмяФормы, УзелСведНалГодИ, "СумНалИсч");
			УзелСумНалВыч = ПолучитьПодчиненныйЭлемент(ИмяФормы, УзелСведНалГодИ, "СумНалВыч");
			Если УзелСумНалВыч.Значение = "0" Тогда
				УзелСумНалИсч.Обязательность = "О";
			КонецЕсли;
		КонецЕсли;
		
		Инд = Инд + 1;
	КонецЦикла;
	
	// Раздел 4.
	УзелНалПодтв0 = ПолучитьПодчиненныйЭлемент(ИмяФормы, УзелРодитель, "НалПодтв0");
	ЗадатьЗначениеЭлемента(ИмяФормы, УзелНалПодтв0, "СумИсчислИтог",
	?(ЗначениеСуммыЗаполнено(ИмяФормы, Раздел4.П000400013003), -Раздел4.П000400013003, Раздел4.П000400012003));
	УзелСумОперШаблон = ПолучитьПодчиненныйЭлемент(ИмяФормы, УзелНалПодтв0, "СумОпер4");
	Инд = 1;
	Пока РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(Раздел4, "П0004М1001003_" + Формат(Инд, "ЧГ=")) Цикл
		УзелСумОпер = СкопироватьУзел(ИмяФормы, УзелНалПодтв0, УзелСумОперШаблон);
		ВыгрузитьСтрокуМногострочнойЧасти(ИмяФормы, Раздел4, УзелСумОпер, Инд);
		Инд = Инд + 1;
	КонецЦикла;
	УзелКорНБВозврТовШаблон = ПолучитьПодчиненныйЭлемент(ИмяФормы, УзелНалПодтв0, "КорНБВозврТов");
	Инд = 1;
	Пока РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(Раздел4, "П0004М2006003_" + Формат(Инд, "ЧГ=")) Цикл
		УзелКорНБВозврТов = СкопироватьУзел(ИмяФормы, УзелНалПодтв0, УзелКорНБВозврТовШаблон);
		ВыгрузитьСтрокуМногострочнойЧасти(ИмяФормы, Раздел4, УзелКорНБВозврТов, Инд);
		Инд = Инд + 1;
	КонецЦикла;
	УзелКорНБИзмЦенШаблон = ПолучитьПодчиненныйЭлемент(ИмяФормы, УзелНалПодтв0, "КорНБИзмЦен");
	Инд = 1;
	Пока РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(Раздел4, "П0004М3009003_" + Формат(Инд, "ЧГ=")) Цикл
		УзелКорНБИзмЦен = СкопироватьУзел(ИмяФормы, УзелНалПодтв0, УзелКорНБИзмЦенШаблон);
		ВыгрузитьСтрокуМногострочнойЧасти(ИмяФормы, Раздел4, УзелКорНБИзмЦен, Инд);
		
		// Элемент "КорНалБазаУв" обязателен при отсутствии элемента "КорНалБазаУм".
		// Элемент "КорНалБазаУм" обязателен при отсутствии элемента "КорНалБазаУв".
		УзелКодОпер = ПолучитьПодчиненныйЭлемент(ИмяФормы, УзелКорНБИзмЦен, "КодОпер");
		Если ЗначениеЗаполнено(УзелКодОпер.Значение) Тогда
			УзелКорНалБазаУв = ПолучитьПодчиненныйЭлемент(ИмяФормы, УзелКорНБИзмЦен, "КорНалБазаУв");
			УзелКорНалБазаУм = ПолучитьПодчиненныйЭлемент(ИмяФормы, УзелКорНБИзмЦен, "КорНалБазаУм");
			Если УзелКорНалБазаУм.Значение = "0" Тогда
				УзелКорНалБазаУв.Обязательность = "О";
			КонецЕсли;
		КонецЕсли;
		
		Инд = Инд + 1;
	КонецЦикла;
	
	// Раздел 5.
	СумВозмПдтв   = 0;
	СумВозмНеПдтв = 0;
	УзелНалВычПред0 = ПолучитьПодчиненныйЭлемент(ИмяФормы, УзелРодитель, "НалВычПред0");
	УзелСумПерШаблон = ПолучитьПодчиненныйЭлемент(ИмяФормы, УзелНалВычПред0, "СумПер");
	Для Каждого ЛистРаздела5 Из Раздел5 Цикл
		ДанныеЛистаРаздела5 = ЛистРаздела5.Данные;
		УзелЛистаРаздела5 = СкопироватьУзел(ИмяФормы, УзелНалВычПред0, УзелСумПерШаблон);
		Для Каждого Узел Из УзелЛистаРаздела5.Строки Цикл
			Если Узел.Тип = "А" ИЛИ Узел.Тип = "A" Тогда
				ВывестиПоказательВXML(ИмяФормы, Узел, ДанныеЛистаРаздела5[Узел.Ключ]);
			КонецЕсли;
		КонецЦикла;
		Если Раздел5.Индекс(ЛистРаздела5) = 0 Тогда
			СумВозмПдтв   = ДанныеЛистаРаздела5.П000500008003;
			СумВозмНеПдтв = ДанныеЛистаРаздела5.П000500009003;
		КонецЕсли;
		УзелСумОперШаблон = ПолучитьПодчиненныйЭлемент(ИмяФормы, УзелЛистаРаздела5, "СумОпер5");
		Инд = 1;
		Пока РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(
			ДанныеЛистаРаздела5, "П000500003003_" + Формат(Инд, "ЧГ=")) Цикл
			УзелСумОпер = СкопироватьУзел(ИмяФормы, УзелЛистаРаздела5, УзелСумОперШаблон);
			ВыгрузитьСтрокуМногострочнойЧасти(ИмяФормы, ДанныеЛистаРаздела5, УзелСумОпер, Инд, "П000500003003");
			
			// Элемент "НалБазаПод" обязателен при:
			// - наличии элемента "НалВычПод";
			// - отсутствии элементов "НалБазаНеПод" и НалВычНеПод".
			
			// Элемент "НалВычПод" обязателен при:
			// - наличии элемента "НалБазаПод";
			// - отсутствии элементов "НалБазаНеПод" и НалВычНеПод".
			
			// Элемент "НалБазаНеПод" обязателен при:
			// - наличии элемента "НалВычНеПод";
			// - отсутствии элементов "НалБазаПод" и НалВычПод".
			
			// Элемент "НалВычНеПод" обязателен при:
			// - наличии элемента "НалБазаНеПод";
			// - отсутствии элементов "НалБазаПод" и НалВычПод".
			
			УзелКодОпер = ПолучитьПодчиненныйЭлемент(ИмяФормы, УзелСумОпер, "КодОпер");
			Если ЗначениеЗаполнено(УзелКодОпер.Значение) Тогда
				УзелНалБазаПод = ПолучитьПодчиненныйЭлемент(ИмяФормы, УзелСумОпер,   "НалБазаПод");
				УзелНалВычПод = ПолучитьПодчиненныйЭлемент(ИмяФормы, УзелСумОпер,    "НалВычПод");
				УзелНалБазаНеПод = ПолучитьПодчиненныйЭлемент(ИмяФормы, УзелСумОпер, "НалБазаНеПод");
				УзелНалВычНеПод = ПолучитьПодчиненныйЭлемент(ИмяФормы, УзелСумОпер,  "НалВычНеПод");
				
				Если УзелНалВычПод.Значение <> "0"
					ИЛИ (УзелНалБазаНеПод.Значение = "0" И УзелНалВычНеПод.Значение = "0") Тогда
					УзелНалБазаПод.Обязательность = "О";
				КонецЕсли;
				
				Если УзелНалБазаПод.Значение <> "0"
					ИЛИ (УзелНалБазаНеПод.Значение = "0" И УзелНалВычНеПод.Значение = "0") Тогда
					УзелНалВычПод.Обязательность = "О";
				КонецЕсли;
				
				Если УзелНалВычНеПод.Значение <> "0"
					ИЛИ (УзелНалБазаПод.Значение = "0" И УзелНалВычПод.Значение = "0") Тогда
					УзелНалБазаНеПод.Обязательность = "О";
				КонецЕсли;
				
				Если УзелНалБазаНеПод.Значение <> "0"
					ИЛИ (УзелНалБазаПод.Значение = "0" И УзелНалВычПод.Значение = "0") Тогда
					УзелНалВычНеПод.Обязательность = "О";
				КонецЕсли;
				
			КонецЕсли;
			
			Инд = Инд + 1;
		КонецЦикла;
	КонецЦикла;
	ЗадатьЗначениеЭлемента(ИмяФормы, УзелНалВычПред0, "СумВозмПдтв", СумВозмПдтв);
	ЗадатьЗначениеЭлемента(ИмяФормы, УзелНалВычПред0, "СумВозмНеПдтв", СумВозмНеПдтв);
	// Элемент "СумВозмПдтв" обязателен при отсутствии элемента "СумВозмНеПдтв".
	// Элемент "СумВозмНеПдтв" обязателен при отсутствии элемента "СумВозмПдтв".
	Если НЕ УзелПуст(ИмяФормы, УзелНалВычПред0) Тогда
		УзелСумВозмПдтв = ПолучитьПодчиненныйЭлемент(ИмяФормы, УзелНалВычПред0, "СумВозмПдтв");
		УзелСумВозмНеПдтв = ПолучитьПодчиненныйЭлемент(ИмяФормы, УзелНалВычПред0, "СумВозмНеПдтв");
		Если УзелСумВозмНеПдтв.Значение = "0" Тогда
			УзелСумВозмПдтв.Обязательность = "О";
		КонецЕсли;
	КонецЕсли;
	
	// Раздел 6.
	УзелНалНеПодтв0 = ПолучитьПодчиненныйЭлемент(ИмяФормы, УзелРодитель, "НалНеПодтв0");
	ЗадатьЗначениеЭлемента(ИмяФормы, УзелНалНеПодтв0, "СумНал164Ит", Раздел6.П000600005003);
	ЗадатьЗначениеЭлемента(ИмяФормы, УзелНалНеПодтв0, "НалВычНеПодИт", Раздел6.П000600006003);
	ЗадатьЗначениеЭлемента(ИмяФормы, УзелНалНеПодтв0, "НалИсчислИт",
	?(ЗначениеСуммыЗаполнено(ИмяФормы, Раздел6.П000600017003), -Раздел6.П000600017003, Раздел6.П000600016003));
	УзелСумОперШаблон = ПолучитьПодчиненныйЭлемент(ИмяФормы, УзелНалНеПодтв0, "СумОпер6");
	Инд = 1;
	Пока РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(Раздел6, "П0006М1001003_" + Формат(Инд, "ЧГ=")) Цикл
		УзелСумОпер = СкопироватьУзел(ИмяФормы, УзелНалНеПодтв0, УзелСумОперШаблон);
		ВыгрузитьСтрокуМногострочнойЧасти(ИмяФормы, Раздел6, УзелСумОпер, Инд);
		Инд = Инд + 1;
	КонецЦикла;
	УзелКорНалВозврТовШаблон = ПолучитьПодчиненныйЭлемент(ИмяФормы, УзелНалНеПодтв0, "КорНалВозврТов");
	Инд = 1;
	Пока РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(Раздел6, "П0006М2007003_" + Формат(Инд, "ЧГ=")) Цикл
		УзелКорНалВозврТов = СкопироватьУзел(ИмяФормы, УзелНалНеПодтв0, УзелКорНалВозврТовШаблон);
		ВыгрузитьСтрокуМногострочнойЧасти(ИмяФормы, Раздел6, УзелКорНалВозврТов, Инд);
		Инд = Инд + 1;
	КонецЦикла;
	УзелКорНалИзмЦенШаблон = ПолучитьПодчиненныйЭлемент(ИмяФормы, УзелНалНеПодтв0, "КорНалИзмЦен");
	Инд = 1;
	Пока РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(Раздел6, "П0006М3011003_" + Формат(Инд, "ЧГ=")) Цикл
		УзелКорНалИзмЦен = СкопироватьУзел(ИмяФормы, УзелНалНеПодтв0, УзелКорНалИзмЦенШаблон);
		ВыгрузитьСтрокуМногострочнойЧасти(ИмяФормы, Раздел6, УзелКорНалИзмЦен, Инд);
		
		// Элемент "КорНалБазаУв" обязателен при отсутствии элемента "КорНалБазаУм".
		// Элемент "КорНалБазаУм" обязателен при отсутствии элемента "КорНалБазаУв".
		УзелКодОпер = ПолучитьПодчиненныйЭлемент(ИмяФормы, УзелКорНалИзмЦен, "КодОпер");
		Если ЗначениеЗаполнено(УзелКодОпер.Значение) Тогда
			УзелКорНалБазаУв = ПолучитьПодчиненныйЭлемент(ИмяФормы, УзелКорНалИзмЦен, "КорНалБазаУв");
			УзелКорНалБазаУм = ПолучитьПодчиненныйЭлемент(ИмяФормы, УзелКорНалИзмЦен, "КорНалБазаУм");
			Если УзелКорНалБазаУм.Значение = "0" Тогда
				УзелКорНалБазаУв.Обязательность = "О";
			КонецЕсли;
		КонецЕсли;
		
		Инд = Инд + 1;
	КонецЦикла;
	
	// Раздел 7.
	УзелОперНеНал = ПолучитьПодчиненныйЭлемент(ИмяФормы, УзелРодитель, "ОперНеНал");
	ЗадатьЗначениеЭлемента(ИмяФормы, УзелОперНеНал, "ОплПостСв6Мес", Раздел7.П000700001001);
	Инд = 1;
	УзелСумОперШаблон = ПолучитьПодчиненныйЭлемент(ИмяФормы, УзелОперНеНал, "СумОпер7");
	Пока РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(Раздел7, "П000700000101_" + Формат(Инд, "ЧГ=")) Цикл
		УзелСумОпер = СкопироватьУзел(ИмяФормы, УзелОперНеНал, УзелСумОперШаблон);
		ВыгрузитьСтрокуМногострочнойЧасти(ИмяФормы, Раздел7, УзелСумОпер, Инд);
		Инд = Инд + 1;
	КонецЦикла;
	
	// Разделы 8-12
	УзелКнигаПокуп = ПолучитьПодчиненныйЭлемент(ИмяФормы, УзелРодитель, "КнигаПокуп");
	ЗадатьЗначениеЭлемента(ИмяФормы, УзелКнигаПокуп, "НаимКнПок", "NO_NDS.8");
	
	УзелКнигаПокупДЛ = ПолучитьПодчиненныйЭлемент(ИмяФормы, УзелРодитель, "КнигаПокупДЛ");
	ЗадатьЗначениеЭлемента(ИмяФормы, УзелКнигаПокупДЛ, "НаимКнПокДЛ", "NO_NDS.81");
	
	УзелКнигаПрод = ПолучитьПодчиненныйЭлемент(ИмяФормы, УзелРодитель, "КнигаПрод");
	ЗадатьЗначениеЭлемента(ИмяФормы, УзелКнигаПрод, "НаимКнПрод", "NO_NDS.9");
	
	УзелКнигаПродДЛ = ПолучитьПодчиненныйЭлемент(ИмяФормы, УзелРодитель, "КнигаПродДЛ");
	ЗадатьЗначениеЭлемента(ИмяФормы, УзелКнигаПродДЛ, "НаимКнПродДЛ", "NO_NDS.91");
	
	УзелЖУчВыстСчФ = ПолучитьПодчиненныйЭлемент(ИмяФормы, УзелРодитель, "ЖУчВыстСчФ");
	ЗадатьЗначениеЭлемента(ИмяФормы, УзелЖУчВыстСчФ, "НаимЖУчВыстСчФ", "NO_NDS.10");
	
	УзелЖУчПолучСчФ = ПолучитьПодчиненныйЭлемент(ИмяФормы, УзелРодитель, "ЖУчПолучСчФ");
	ЗадатьЗначениеЭлемента(ИмяФормы, УзелЖУчПолучСчФ, "НаимЖУчПолучСчФ", "NO_NDS.11");
	
	УзелВыстСчФ_173_5 = ПолучитьПодчиненныйЭлемент(ИмяФормы, УзелРодитель, "ВыстСчФ_173.5");
	ЗадатьЗначениеЭлемента(ИмяФормы, УзелВыстСчФ_173_5, "НаимВыстСчФ_173.5", "NO_NDS.12");
	
КонецПроцедуры

Процедура ЗадатьЗначениеЭлемента(ИмяФормы, Узел, КодЭлемента, Значение)
	
	ВывестиПоказательВXML(ИмяФормы, ПолучитьПодчиненныйЭлемент(ИмяФормы, Узел, КодЭлемента), Значение);
	
КонецПроцедуры

Функция ПолучитьПодчиненныйЭлемент(ИмяФормы, Узел, КодЭлемента)
	
	Для Каждого Стр Из Узел.Строки Цикл
		Если Стр.Код = КодЭлемента Тогда
			Возврат Стр;
		КонецЕсли;
	КонецЦикла;
	
КонецФункции

Функция СкопироватьУзел(ИмяФормы, Родитель, Узел)
	
	СтрокиСТемЖеКодом = Родитель.Строки.НайтиСтроки(Новый Структура("Код", Узел.Код), Ложь);
	МаксИндекс = -1;
	Для Каждого СтрокаСТемЖеКодом Из СтрокиСТемЖеКодом Цикл
		ТекИндекс = Родитель.Строки.Индекс(СтрокаСТемЖеКодом);
		Если ТекИндекс > МаксИндекс Тогда
			МаксИндекс = ТекИндекс;
		КонецЕсли;
	КонецЦикла;
	
	ИндексСоздаваемогоУзла = МаксИндекс + 1;
	Если ИндексСоздаваемогоУзла >= Родитель.Строки.Количество() ИЛИ ИндексСоздаваемогоУзла = 0 Тогда
		НовыйУзел = Родитель.Строки.Добавить();
	Иначе
		НовыйУзел = Родитель.Строки.Вставить(ИндексСоздаваемогоУзла);
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(НовыйУзел, Узел, , "Родитель, Строки");
	Для Каждого Стр из Узел.Строки Цикл
		СкопироватьУзел(ИмяФормы, НовыйУзел, Стр);
	КонецЦикла;
	Возврат НовыйУзел;
	
КонецФункции

Функция ЗначениеСуммыЗаполнено(ИмяФормы, ЗначениеСуммы)
	
	Возврат (Окр(ЗначениеСуммы) <> 0);
	
КонецФункции

Процедура ВыгрузитьСтрокуМногострочнойЧасти(ИмяФормы, Данные, Узел, НомерСтроки, ПоказателиИсключения = Неопределено)
	
	Если ПоказателиИсключения = Неопределено Тогда
		СтрИсключения = Новый Структура;
	Иначе
		СтрИсключения = Новый Структура(ПоказателиИсключения);
	КонецЕсли;
	
	СуффиксТекущейСтроки = "_" + Формат(НомерСтроки, "ЧГ=");
	
	СтрокаПустая = Истина;
	Для Каждого Стр Из Узел.Строки Цикл
		Если НЕ СтрИсключения.Свойство(Стр.Ключ)
		   И ЗначениеПоказателяЗаполнено(ИмяФормы, Данные[Стр.Ключ + СуффиксТекущейСтроки], Стр) Тогда
			СтрокаПустая = Ложь;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ СтрокаПустая Тогда
		Для Каждого Стр Из Узел.Строки Цикл
			ВывестиПоказательВXML(ИмяФормы, Стр, Данные[Стр.Ключ + СуффиксТекущейСтроки]);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Функция ЗначениеПоказателяЗаполнено(ИмяФормы, ЗначениеПоказателя, ЯвляетсяСуммой)
	
	Если ТипЗнч(ЯвляетсяСуммой) = Тип("Булево") Тогда
		ПоказательЯвляетсяСуммой = ЯвляетсяСуммой;
	Иначе
		ПоказательЯвляетсяСуммой = (ЯвляетсяСуммой.Формат = "N"
		И ЯвляетсяСуммой.МаксРазмерность >= 10 И ЯвляетсяСуммой.МинРазмерность = 99999);
	КонецЕсли;
	
	Возврат ?(ПоказательЯвляетсяСуммой,
	ЗначениеСуммыЗаполнено(ИмяФормы, ЗначениеПоказателя), ЗначениеЗаполнено(ЗначениеПоказателя));
	
КонецФункции

Функция ПроверитьДанные(ИмяФормы, ДеревоВыгрузки, РезультатВыгрузки)
	
	СтатусПроверки = Истина;
	
	Если ТипЗнч(ДеревоВыгрузки) <> Тип("ДеревоЗначений") Тогда
		Если НЕ ЗначениеСоответствуетФормату(ИмяФормы, ДеревоВыгрузки, РезультатВыгрузки) Тогда
			СтатусПроверки = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Для Каждого Стр из ДеревоВыгрузки.Строки Цикл
		СтатусПроверки = (ПроверитьДанные(ИмяФормы, Стр, РезультатВыгрузки) И СтатусПроверки);
	КонецЦикла;
	
	Возврат СтатусПроверки;
	
КонецФункции

Функция ЗначениеСоответствуетФормату(ИмяФормы, Стр, РезультатВыгрузки)
	
	СтатусПроверки = Истина;
	Если Стр.Формат = "Т" ИЛИ Стр.Формат = "T"  ИЛИ Стр.Формат = "S" Тогда // учтем оба варианта: кириллицу и латиницу
		ДлинаЗначения = СтрДлина(Стр.Значение);
		Если ДлинаЗначения < Стр.МинРазмерность Тогда
			СтатусПроверки = Ложь;
			Если ЗначениеЗаполнено(Стр.Раздел) И ЗначениеЗаполнено(Стр.Ключ) Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
					НСтр("ru='Формирование XML: Длина значения показателя """
					+ РегламентированнаяОтчетность.ПредставлениеПоказателя(Стр)
					+ """ (" + АдресПоказателя(ИмяФормы, Стр)+ ") меньше минимально возможной (" + ДлинаЗначения
					+ " < " + Стр.МинРазмерность + ")'"), Стр.Раздел, Стр.Ключ, "");
			Иначе
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
					НСтр("ru='Формирование XML: Длина значения показателя """
					+ РегламентированнаяОтчетность.ПредставлениеПоказателя(Стр)
					+ """ (" + АдресПоказателя(ИмяФормы, Стр)+ ") меньше минимально возможной (" + ДлинаЗначения
					+ " < " + Стр.МинРазмерность + ")'"), "Титульный", "");
			КонецЕсли;
		КонецЕсли;
		Если ДлинаЗначения > Стр.МаксРазмерность Тогда
			СтатусПроверки = Ложь;
			Если ЗначениеЗаполнено(Стр.Раздел) И ЗначениеЗаполнено(Стр.Ключ) Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
					НСтр("ru='Формирование XML: Длина значения показателя """
					+ РегламентированнаяОтчетность.ПредставлениеПоказателя(Стр)
					+ """  (" + АдресПоказателя(ИмяФормы, Стр)+ ") больше максимально возможной (" + ДлинаЗначения
					+ " > " + Стр.МаксРазмерность + ")'"), Стр.Раздел, Стр.Ключ, "");
			Иначе
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
					НСтр("ru='Формирование XML: Длина значения показателя """
					+ РегламентированнаяОтчетность.ПредставлениеПоказателя(Стр)
					+ """  (" + АдресПоказателя(ИмяФормы, Стр)+ ") больше максимально возможной (" + ДлинаЗначения
					+ " > " + Стр.МаксРазмерность + ")'"), "Титульный", "");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Возврат СтатусПроверки;
	
КонецФункции

Функция АдресПоказателя(ИмяФормы, СтрокаПоказателя)
	
	Результат = СтрокаПоказателя.Код;
	
	СтрокаВерхнегоУровня = СтрокаПоказателя.Родитель;
	
	Пока ЗначениеЗаполнено(СтрокаВерхнегоУровня) Цикл
		Результат = СтрокаВерхнегоУровня.Код + "\" + Результат;
		СтрокаВерхнегоУровня = СтрокаВерхнегоУровня.Родитель;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ВыгрузкаРаздел8(ИмяФормы, СтруктураРеквизитовФормы, СписокСтраницРаздела, ПараметрыВыгрузки)
	
	ИмяРаздела = "Раздел8";
	
	Если НЕ (ПараметрыВыгрузки.ВидДок <> "0" И ПараметрыВыгрузки["АктуальностьСведений" + ИмяРаздела] = "1"
		И ПараметрыВыгрузки.Раздел8Обязателен) Тогда
		ДанныеРаздела = ДанныеРазделаНДСДляВыгрузки(ИмяФормы,
													СтруктураРеквизитовФормы,
													СписокСтраницРаздела,
													ПараметрыВыгрузки,
													ИмяРаздела);
		Если ДанныеРаздела = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	ИдФайл = СформироватьИдентификаторФайлаВыгрузкиНДС(ИмяФормы, ПараметрыВыгрузки, "NO_NDS.8");
	ПараметрыВыгрузки.Вставить("ИдФайл" + ИмяРаздела, ИдФайл);
	
	КомпоновщикXML = КомпоновщикXML_Новый(ИмяФормы);
	
	КомпоновщикXML_СоздатьУзел(ИмяФормы, КомпоновщикXML, "Файл");
	КомпоновщикXML_ВывестиАтрибут(ИмяФормы, КомпоновщикXML, "xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");
	КомпоновщикXML_ВывестиАтрибут(ИмяФормы, КомпоновщикXML, "ИдФайл", ИдФайл);
	КомпоновщикXML_ВывестиАтрибут(ИмяФормы, КомпоновщикXML, "ВерсПрог", ПараметрыВыгрузки.ВерсПрог);
	
	Если ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2019Кв1") Тогда
		КомпоновщикXML_ВывестиАтрибут(ИмяФормы, КомпоновщикXML, "ВерсФорм", "5.06");
	Иначе// "ФормаОтчета2017Кв1"
		КомпоновщикXML_ВывестиАтрибут(ИмяФормы, КомпоновщикXML, "ВерсФорм", "5.05");
	КонецЕсли;
	
	КомпоновщикXML_СоздатьУзел(ИмяФормы, КомпоновщикXML, "Документ");
	КомпоновщикXML_ВывестиАтрибут(ИмяФормы, КомпоновщикXML, "Индекс", "0000080");
	КомпоновщикXML_ВывестиАтрибут(ИмяФормы, КомпоновщикXML, "НомКорр", ПараметрыВыгрузки.ВидДок);
	
	Если ПараметрыВыгрузки.ВидДок <> "0" Тогда
		КомпоновщикXML_ВывестиАтрибут(ИмяФормы,
									  КомпоновщикXML,
									  "ПризнСвед8",
									  ПараметрыВыгрузки["АктуальностьСведений" + ИмяРаздела]);
	КонецЕсли;
	
	Если ПараметрыВыгрузки.ВидДок = "0" ИЛИ ПараметрыВыгрузки["АктуальностьСведений" + ИмяРаздела] = "0" Тогда
		
		СтрокиРаздела = ДанныеРаздела.СтрокиРаздела;
		ИтогиРаздела = ДанныеРаздела.ИтогиРаздела;
		
		КомпоновщикXML_СоздатьУзел(ИмяФормы, КомпоновщикXML, "КнигаПокуп");
		КомпоновщикXML_ВывестиАтрибут(ИмяФормы, КомпоновщикXML, "СумНДСВсКПк", ИтогиРаздела.СумНДСВсКПк, "Ч,19,2");
		
		Если ПараметрыВыгрузки.ДанныеСегментированы Тогда
			Для Каждого НомерПервойСтрокиСекции Из СтрокиРаздела Цикл
				СтрокиСегментаРаздела = РегламентированнаяОтчетность.СегментДанныхРазделаДекларацииНДС(
				СтруктураРеквизитовФормы.мСохраненныйДок, "Раздел8", НомерПервойСтрокиСекции);
				Для Каждого СтрокаДанных ИЗ СтрокиСегментаРаздела Цикл
					ВыгрузитьСтрокуСведенийРаздела8(ИмяФормы, КомпоновщикXML, СтрокаДанных);
				КонецЦикла;
			КонецЦикла;
		Иначе
			Для Каждого СтрокаДанных Из СтрокиРаздела Цикл
				ВыгрузитьСтрокуСведенийРаздела8(ИмяФормы, КомпоновщикXML, СтрокаДанных);
			КонецЦикла;
		КонецЕсли;
		
		КомпоновщикXML_ЗакрытьУзел(ИмяФормы, КомпоновщикXML);
	КонецЕсли;
	
	КомпоновщикXML_ЗакрытьУзел(ИмяФормы, КомпоновщикXML);
	КомпоновщикXML_ЗакрытьУзел(ИмяФормы, КомпоновщикXML);
	
	РезультатВыгрузки = Новый Структура;
	РезультатВыгрузки.Вставить("ИмяФайлаВыгрузки", ИдФайл + ".xml");
	РезультатВыгрузки.Вставить("АдресФайлаВыгрузки", КомпоновщикXML_СсылкаНаВременноеХранилище(ИмяФормы, КомпоновщикXML));
	Если ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2019Кв1") Тогда
		РезультатВыгрузки.Вставить("ТипФайлаВыгрузки", "НДС2019" + ИмяРаздела);
	Иначе// "ФормаОтчета2017Кв1"
		РезультатВыгрузки.Вставить("ТипФайлаВыгрузки", "НДС2017" + ИмяРаздела);
	КонецЕсли;
	РезультатВыгрузки.Вставить("КодировкаФайлаВыгрузки", "windows-1251");
	
	Возврат РезультатВыгрузки;
	
КонецФункции

Процедура ВыгрузитьСтрокуСведенийРаздела8(ИмяФормы, КомпоновщикXML, СтрокаДанных)
	
	КомпоновщикXML_СоздатьУзел(ИмяФормы, КомпоновщикXML, "КнПокСтр");
	
	КомпоновщикXML_ВывестиАтрибут(ИмяФормы, КомпоновщикXML, "НомерПор", СтрокаДанных.НомерПор, "Ч,12");
	
	КомпоновщикXML_ВывестиАтрибут(ИмяФормы, КомпоновщикXML, "НомСчФПрод", СтрокаДанных.НомСчФПрод, "Т,1000");
	КомпоновщикXML_ВывестиНеобязательныйАтрибут(ИмяФормы, КомпоновщикXML, "ДатаСчФПрод", СтрокаДанных.ДатаСчФПрод,
												"Т,10");
	
	КомпоновщикXML_ВывестиНеобязательныйАтрибут(ИмяФормы, КомпоновщикXML, "НомИспрСчФ", СтрокаДанных.НомИспрСчФ, "Ч,3");
	КомпоновщикXML_ВывестиНеобязательныйАтрибут(ИмяФормы, КомпоновщикXML, "ДатаИспрСчФ", СтрокаДанных.ДатаИспрСчФ,
												"Т,10");
	
	КомпоновщикXML_ВывестиНеобязательныйАтрибут(ИмяФормы, КомпоновщикXML, "НомКСчФПрод", СтрокаДанных.НомКСчФПрод,
												"Т,256");
	КомпоновщикXML_ВывестиНеобязательныйАтрибут(ИмяФормы, КомпоновщикXML, "ДатаКСчФПрод", СтрокаДанных.ДатаКСчФПрод,
												"Т,10");
	
	КомпоновщикXML_ВывестиНеобязательныйАтрибут(ИмяФормы, КомпоновщикXML, "НомИспрКСчФ", СтрокаДанных.НомИспрКСчФ, "Ч,3");
	КомпоновщикXML_ВывестиНеобязательныйАтрибут(ИмяФормы, КомпоновщикXML, "ДатаИспрКСчФ", СтрокаДанных.ДатаИспрКСчФ,
												"Т,10");
	
	КомпоновщикXML_ВывестиНеобязательныйАтрибут(ИмяФормы, КомпоновщикXML, "ОКВ", СтрокаДанных.ОКВ, "Т,3");
	
	КомпоновщикXML_ВывестиАтрибут(ИмяФормы, КомпоновщикXML, "СтоимПокупВ", СтрокаДанных.СтоимПокупВ, "Ч,19,2");
	КомпоновщикXML_ВывестиАтрибут(ИмяФормы, КомпоновщикXML, "СумНДСВыч", СтрокаДанных.СумНДСВыч, "Ч,19,2");
	
	Для Инд = 0 По СтрокаДанных.КодВидОпер.Количество() - 1 Цикл
		КомпоновщикXML_СоздатьУзел(ИмяФормы, КомпоновщикXML, "КодВидОпер");
		КомпоновщикXML_ВывестиЗначениеИЗакрытьУзел(ИмяФормы, КомпоновщикXML, СтрокаДанных.КодВидОпер[Инд]);
	КонецЦикла;
	
	Для Инд = 0 По СтрокаДанных.ДокПдтвУпл.Количество() - 1 Цикл
		КомпоновщикXML_СоздатьУзел(ИмяФормы, КомпоновщикXML, "ДокПдтвУпл");
		
		КомпоновщикXML_ВывестиАтрибут(ИмяФормы, КомпоновщикXML, "НомДокПдтвУпл", СтрокаДанных.ДокПдтвУпл[Инд].НомДокПдтвУпл,
									  "Т,256");
		КомпоновщикXML_ВывестиАтрибут(ИмяФормы, КомпоновщикXML, "ДатаДокПдтвУпл",
									  СтрокаДанных.ДокПдтвУпл[Инд].ДатаДокПдтвУпл, "Т,10");
		
		КомпоновщикXML_ЗакрытьУзел(ИмяФормы, КомпоновщикXML);
	КонецЦикла;
	
	Для Инд = 0 По СтрокаДанных.ДатаУчТов.Количество() - 1 Цикл
		КомпоновщикXML_СоздатьУзел(ИмяФормы, КомпоновщикXML, "ДатаУчТов");
		КомпоновщикXML_ВывестиЗначениеИЗакрытьУзел(ИмяФормы, КомпоновщикXML, СтрокаДанных.ДатаУчТов[Инд]);
	КонецЦикла;
	
	Для Инд = 0 По СтрокаДанных.СвПрод.Количество() - 1 Цикл
		КомпоновщикXML_СоздатьУзел(ИмяФормы, КомпоновщикXML, "СвПрод");
		
		Если СтрокаДанных.СвПрод[Инд].Свойство("ИННФЛ") Тогда
			КомпоновщикXML_СоздатьУзел(ИмяФормы, КомпоновщикXML, "СведИП");
			
			КомпоновщикXML_ВывестиАтрибут(ИмяФормы, КомпоновщикXML, "ИННФЛ", СтрокаДанных.СвПрод[Инд].ИННФЛ, "Т,12");
			
			КомпоновщикXML_ЗакрытьУзел(ИмяФормы, КомпоновщикXML);
		Иначе
			КомпоновщикXML_СоздатьУзел(ИмяФормы, КомпоновщикXML, "СведЮЛ");
			
			КомпоновщикXML_ВывестиАтрибут(ИмяФормы, КомпоновщикXML, "ИННЮЛ", СтрокаДанных.СвПрод[Инд].ИННЮЛ, "Т,10");
			КомпоновщикXML_ВывестиАтрибут(ИмяФормы, КомпоновщикXML, "КПП", СтрокаДанных.СвПрод[Инд].КПП, "Т,9");
			
			КомпоновщикXML_ЗакрытьУзел(ИмяФормы, КомпоновщикXML);
		КонецЕсли;
		
		КомпоновщикXML_ЗакрытьУзел(ИмяФормы, КомпоновщикXML);
	КонецЦикла;
	
	Если СтрокаДанных.СвПос <> Неопределено Тогда
		КомпоновщикXML_СоздатьУзел(ИмяФормы, КомпоновщикXML, "СвПос");
		
		Если СтрокаДанных.СвПос.Свойство("ИННФЛ") Тогда
			КомпоновщикXML_СоздатьУзел(ИмяФормы, КомпоновщикXML, "СведИП");
			
			КомпоновщикXML_ВывестиАтрибут(ИмяФормы, КомпоновщикXML, "ИННФЛ", СтрокаДанных.СвПос.ИННФЛ, "Т,12");
			
			КомпоновщикXML_ЗакрытьУзел(ИмяФормы, КомпоновщикXML);
		Иначе
			КомпоновщикXML_СоздатьУзел(ИмяФормы, КомпоновщикXML, "СведЮЛ");
			
			КомпоновщикXML_ВывестиАтрибут(ИмяФормы, КомпоновщикXML, "ИННЮЛ", СтрокаДанных.СвПос.ИННЮЛ, "Т,10");
			КомпоновщикXML_ВывестиАтрибут(ИмяФормы, КомпоновщикXML, "КПП", СтрокаДанных.СвПос.КПП, "Т,9");
			
			КомпоновщикXML_ЗакрытьУзел(ИмяФормы, КомпоновщикXML);
		КонецЕсли;
		
		КомпоновщикXML_ЗакрытьУзел(ИмяФормы, КомпоновщикXML);
	КонецЕсли;
	
	Для Инд = 0 По СтрокаДанных.РегНомТД.Количество() - 1 Цикл
		КомпоновщикXML_ВывестиНеобязательныйМножественныйЭлемент(ИмяФормы,
																 КомпоновщикXML,
																 "РегНомТД",
																 СтрокаДанных.РегНомТД[Инд],
																 "Т,27");
	КонецЦикла;
	
	КомпоновщикXML_ЗакрытьУзел(ИмяФормы, КомпоновщикXML);
	
КонецПроцедуры

Функция ВыгрузкаРаздел8_Прил1(ИмяФормы, СтруктураРеквизитовФормы, СписокСтраницРаздела, ПараметрыВыгрузки)
	
	ИмяРаздела = "Раздел8_Прил1";
	
	ДанныеРаздела = ДанныеРазделаНДСДляВыгрузки(ИмяФормы,
												СтруктураРеквизитовФормы,
												СписокСтраницРаздела,
												ПараметрыВыгрузки,
												ИмяРаздела);
	Если ДанныеРаздела = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СтрокиРаздела = ДанныеРаздела.СтрокиРаздела;
	ИтогиРаздела = ДанныеРаздела.ИтогиРаздела;
	
	ИдФайл = СформироватьИдентификаторФайлаВыгрузкиНДС(ИмяФормы, ПараметрыВыгрузки, "NO_NDS.81");
	ПараметрыВыгрузки.Вставить("ИдФайл" + ИмяРаздела, ИдФайл);
	
	КомпоновщикXML = КомпоновщикXML_Новый(ИмяФормы);
	
	КомпоновщикXML_СоздатьУзел(ИмяФормы, КомпоновщикXML, "Файл");
	КомпоновщикXML_ВывестиАтрибут(ИмяФормы, КомпоновщикXML, "xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");
	КомпоновщикXML_ВывестиАтрибут(ИмяФормы, КомпоновщикXML, "ИдФайл", ИдФайл);
	КомпоновщикXML_ВывестиАтрибут(ИмяФормы, КомпоновщикXML, "ВерсПрог", ПараметрыВыгрузки.ВерсПрог);
	
	Если ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2019Кв1") Тогда
		КомпоновщикXML_ВывестиАтрибут(ИмяФормы, КомпоновщикXML, "ВерсФорм", "5.06");
	Иначе// "ФормаОтчета2017Кв1"
		КомпоновщикXML_ВывестиАтрибут(ИмяФормы, КомпоновщикXML, "ВерсФорм", "5.05");
	КонецЕсли;
	
	КомпоновщикXML_СоздатьУзел(ИмяФормы, КомпоновщикXML, "Документ");
	КомпоновщикXML_ВывестиАтрибут(ИмяФормы, КомпоновщикXML, "Индекс", "0000081");
	КомпоновщикXML_ВывестиАтрибут(ИмяФормы, КомпоновщикXML, "НомКорр", ПараметрыВыгрузки.ВидДок);
	
	Если ПараметрыВыгрузки.ВидДок <> "0" Тогда
		КомпоновщикXML_ВывестиАтрибут(ИмяФормы, КомпоновщикXML, "ПризнСвед81",
									  ПараметрыВыгрузки["АктуальностьСведений" + ИмяРаздела]);
	КонецЕсли;
	
	Если ПараметрыВыгрузки.ВидДок = "0" ИЛИ ПараметрыВыгрузки["АктуальностьСведений" + ИмяРаздела] = "0" Тогда
		
		КомпоновщикXML_СоздатьУзел(ИмяФормы, КомпоновщикXML, "КнигаПокупДЛ");
		КомпоновщикXML_ВывестиАтрибут(ИмяФормы, КомпоновщикXML, "СумНДСИтКПк", ИтогиРаздела.СумНДСИтКПк,  "Ч,19,2");
		КомпоновщикXML_ВывестиАтрибут(ИмяФормы, КомпоновщикXML, "СумНДСИтП1Р8", ИтогиРаздела.СумНДСИтП1Р8, "Ч,19,2");
		
		Если ПараметрыВыгрузки.ДанныеСегментированы Тогда
			Для Каждого НомерПервойСтрокиСекции Из СтрокиРаздела Цикл
				СтрокиСегментаРаздела = РегламентированнаяОтчетность.СегментДанныхРазделаДекларацииНДС(
				СтруктураРеквизитовФормы.мСохраненныйДок, ИмяРаздела, НомерПервойСтрокиСекции);
				Для Каждого СтрокаДанных ИЗ СтрокиСегментаРаздела Цикл
					ВыгрузитьСтрокуСведенийРаздела8_Прил1(ИмяФормы, КомпоновщикXML, СтрокаДанных);
				КонецЦикла;
			КонецЦикла;
		Иначе
			Для Каждого СтрокаДанных Из СтрокиРаздела Цикл
				ВыгрузитьСтрокуСведенийРаздела8_Прил1(ИмяФормы, КомпоновщикXML, СтрокаДанных);
			КонецЦикла;
		КонецЕсли;
		
		КомпоновщикXML_ЗакрытьУзел(ИмяФормы, КомпоновщикXML);
		
	КонецЕсли;
	
	КомпоновщикXML_ЗакрытьУзел(ИмяФормы, КомпоновщикXML);
	КомпоновщикXML_ЗакрытьУзел(ИмяФормы, КомпоновщикXML);
	
	РезультатВыгрузки = Новый Структура;
	РезультатВыгрузки.Вставить("ИмяФайлаВыгрузки", ИдФайл + ".xml");
	РезультатВыгрузки.Вставить("АдресФайлаВыгрузки", КомпоновщикXML_СсылкаНаВременноеХранилище(ИмяФормы, КомпоновщикXML));
	Если ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2019Кв1") Тогда
		РезультатВыгрузки.Вставить("ТипФайлаВыгрузки", "НДС2019" + ИмяРаздела);
	Иначе// "ФормаОтчета2017Кв1"
		РезультатВыгрузки.Вставить("ТипФайлаВыгрузки", "НДС2017" + ИмяРаздела);
	КонецЕсли;
	РезультатВыгрузки.Вставить("КодировкаФайлаВыгрузки", "windows-1251");
	
	Возврат РезультатВыгрузки;
	
КонецФункции

Процедура ВыгрузитьСтрокуСведенийРаздела8_Прил1(ИмяФормы, КомпоновщикXML, СтрокаДанных)
	
	КомпоновщикXML_СоздатьУзел(ИмяФормы, КомпоновщикXML, "КнПокДЛСтр");
	
	КомпоновщикXML_ВывестиАтрибут(ИмяФормы, КомпоновщикXML, "НомерПор", СтрокаДанных.НомерПор, "Ч,12");
	
	КомпоновщикXML_ВывестиАтрибут(ИмяФормы, КомпоновщикXML, "НомСчФПрод", СтрокаДанных.НомСчФПрод, "Т,1000");
	КомпоновщикXML_ВывестиНеобязательныйАтрибут(ИмяФормы, КомпоновщикXML, "ДатаСчФПрод", СтрокаДанных.ДатаСчФПрод,
												"Т,10");
	
	КомпоновщикXML_ВывестиНеобязательныйАтрибут(ИмяФормы, КомпоновщикXML, "НомИспрСчФ", СтрокаДанных.НомИспрСчФ, "Ч,3");
	КомпоновщикXML_ВывестиНеобязательныйАтрибут(ИмяФормы, КомпоновщикXML, "ДатаИспрСчФ", СтрокаДанных.ДатаИспрСчФ,
												"Т,10");
	
	КомпоновщикXML_ВывестиНеобязательныйАтрибут(ИмяФормы, КомпоновщикXML, "НомКСчФПрод", СтрокаДанных.НомКСчФПрод,
												"Т,256");
	КомпоновщикXML_ВывестиНеобязательныйАтрибут(ИмяФормы, КомпоновщикXML, "ДатаКСчФПрод", СтрокаДанных.ДатаКСчФПрод,
												"Т,10");
	
	КомпоновщикXML_ВывестиНеобязательныйАтрибут(ИмяФормы, КомпоновщикXML, "НомИспрКСчФ", СтрокаДанных.НомИспрКСчФ, "Ч,3");
	КомпоновщикXML_ВывестиНеобязательныйАтрибут(ИмяФормы, КомпоновщикXML, "ДатаИспрКСчФ", СтрокаДанных.ДатаИспрКСчФ,
												"Т,10");
	
	КомпоновщикXML_ВывестиНеобязательныйАтрибут(ИмяФормы, КомпоновщикXML, "ОКВ", СтрокаДанных.ОКВ, "Т,3");
	
	КомпоновщикXML_ВывестиАтрибут(ИмяФормы, КомпоновщикXML, "СтоимПокупВ", СтрокаДанных.СтоимПокупВ, "Ч,19,2");
	КомпоновщикXML_ВывестиАтрибут(ИмяФормы, КомпоновщикXML, "СумНДС", СтрокаДанных.СумНДС, "Ч,19,2");
	
	Для Инд = 0 По СтрокаДанных.КодВидОпер.Количество() - 1 Цикл
		КомпоновщикXML_СоздатьУзел(ИмяФормы, КомпоновщикXML, "КодВидОпер");
		КомпоновщикXML_ВывестиЗначениеИЗакрытьУзел(ИмяФормы, КомпоновщикXML, СтрокаДанных.КодВидОпер[Инд]);
	КонецЦикла;
	
	Для Инд = 0 По СтрокаДанных.ДокПдтвУпл.Количество() - 1 Цикл
		КомпоновщикXML_СоздатьУзел(ИмяФормы, КомпоновщикXML, "ДокПдтвУпл");
		
		КомпоновщикXML_ВывестиАтрибут(ИмяФормы, КомпоновщикXML, "НомДокПдтвУпл",
									  СтрокаДанных.ДокПдтвУпл[Инд].НомДокПдтвУпл, "Т,256");
		КомпоновщикXML_ВывестиАтрибут(ИмяФормы, КомпоновщикXML, "ДатаДокПдтвУпл",
									  СтрокаДанных.ДокПдтвУпл[Инд].ДатаДокПдтвУпл, "Т,10");
		
		КомпоновщикXML_ЗакрытьУзел(ИмяФормы, КомпоновщикXML);
	КонецЦикла;
	
	Для Инд = 0 По СтрокаДанных.ДатаУчТов.Количество() - 1 Цикл
		КомпоновщикXML_СоздатьУзел(ИмяФормы, КомпоновщикXML, "ДатаУчТов");
		КомпоновщикXML_ВывестиЗначениеИЗакрытьУзел(ИмяФормы, КомпоновщикXML, СтрокаДанных.ДатаУчТов[Инд]);
	КонецЦикла;
	
	Для Инд = 0 По СтрокаДанных.СвПрод.Количество() - 1 Цикл
		КомпоновщикXML_СоздатьУзел(ИмяФормы, КомпоновщикXML, "СвПрод");
		
		Если СтрокаДанных.СвПрод[Инд].Свойство("ИННФЛ") Тогда
			КомпоновщикXML_СоздатьУзел(ИмяФормы, КомпоновщикXML, "СведИП");
			
			КомпоновщикXML_ВывестиАтрибут(ИмяФормы, КомпоновщикXML, "ИННФЛ", СтрокаДанных.СвПрод[Инд].ИННФЛ, "Т,12");
			
			КомпоновщикXML_ЗакрытьУзел(ИмяФормы, КомпоновщикXML);
		Иначе
			КомпоновщикXML_СоздатьУзел(ИмяФормы, КомпоновщикXML, "СведЮЛ");
			
			КомпоновщикXML_ВывестиАтрибут(ИмяФормы, КомпоновщикXML, "ИННЮЛ", СтрокаДанных.СвПрод[Инд].ИННЮЛ, "Т,10");
			КомпоновщикXML_ВывестиАтрибут(ИмяФормы, КомпоновщикXML, "КПП", СтрокаДанных.СвПрод[Инд].КПП, "Т,9");
			
			КомпоновщикXML_ЗакрытьУзел(ИмяФормы, КомпоновщикXML);
		КонецЕсли;
		
		КомпоновщикXML_ЗакрытьУзел(ИмяФормы, КомпоновщикXML);
	КонецЦикла;
	
	Если СтрокаДанных.СвПос <> Неопределено Тогда
		КомпоновщикXML_СоздатьУзел(ИмяФормы, КомпоновщикXML, "СвПос");
		
		Если СтрокаДанных.СвПос.Свойство("ИННФЛ") Тогда
			КомпоновщикXML_СоздатьУзел(ИмяФормы, КомпоновщикXML, "СведИП");
			
			КомпоновщикXML_ВывестиАтрибут(ИмяФормы, КомпоновщикXML, "ИННФЛ", СтрокаДанных.СвПос.ИННФЛ, "Т,12");
			
			КомпоновщикXML_ЗакрытьУзел(ИмяФормы, КомпоновщикXML);
		Иначе
			КомпоновщикXML_СоздатьУзел(ИмяФормы, КомпоновщикXML, "СведЮЛ");
			
			КомпоновщикXML_ВывестиАтрибут(ИмяФормы, КомпоновщикXML, "ИННЮЛ", СтрокаДанных.СвПос.ИННЮЛ, "Т,10");
			КомпоновщикXML_ВывестиАтрибут(ИмяФормы, КомпоновщикXML, "КПП", СтрокаДанных.СвПос.КПП, "Т,9");
			
			КомпоновщикXML_ЗакрытьУзел(ИмяФормы, КомпоновщикXML);
		КонецЕсли;
		
		КомпоновщикXML_ЗакрытьУзел(ИмяФормы, КомпоновщикXML);
	КонецЕсли;
	
	Для Инд = 0 По СтрокаДанных.РегНомТД.Количество() - 1 Цикл
		КомпоновщикXML_ВывестиНеобязательныйМножественныйЭлемент(ИмяФормы,
																 КомпоновщикXML,
																 "РегНомТД",
																 СтрокаДанных.РегНомТД[Инд],
																 "Т,27");
	КонецЦикла;
	
	КомпоновщикXML_ЗакрытьУзел(ИмяФормы, КомпоновщикXML);
	
КонецПроцедуры

Функция ВыгрузкаРаздел9(ИмяФормы, СтруктураРеквизитовФормы, СписокСтраницРаздела, ПараметрыВыгрузки)
	
	ИмяРаздела = "Раздел9";
	
	Если НЕ (ПараметрыВыгрузки.ВидДок <> "0" И ПараметрыВыгрузки["АктуальностьСведений" + ИмяРаздела] = "1"
	   И ПараметрыВыгрузки.Раздел9Обязателен) Тогда
		ДанныеРаздела = ДанныеРазделаНДСДляВыгрузки(ИмяФормы,
													СтруктураРеквизитовФормы,
													СписокСтраницРаздела,
													ПараметрыВыгрузки,
													ИмяРаздела);
		Если ДанныеРаздела = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	ИдФайл = СформироватьИдентификаторФайлаВыгрузкиНДС(ИмяФормы, ПараметрыВыгрузки, "NO_NDS.9");
	ПараметрыВыгрузки.Вставить("ИдФайл" + ИмяРаздела, ИдФайл);
	
	КомпоновщикXML = КомпоновщикXML_Новый(ИмяФормы);
	
	КомпоновщикXML_СоздатьУзел(ИмяФормы, КомпоновщикXML, "Файл");
	КомпоновщикXML_ВывестиАтрибут(ИмяФормы, КомпоновщикXML, "xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");
	КомпоновщикXML_ВывестиАтрибут(ИмяФормы, КомпоновщикXML, "ИдФайл", ИдФайл);
	КомпоновщикXML_ВывестиАтрибут(ИмяФормы, КомпоновщикXML, "ВерсПрог", ПараметрыВыгрузки.ВерсПрог);
	
	Если ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2019Кв1") Тогда
		КомпоновщикXML_ВывестиАтрибут(ИмяФормы, КомпоновщикXML, "ВерсФорм", "5.06");
	Иначе// "ФормаОтчета2017Кв1"
		КомпоновщикXML_ВывестиАтрибут(ИмяФормы, КомпоновщикXML, "ВерсФорм", "5.05");
	КонецЕсли;
	
	КомпоновщикXML_СоздатьУзел(ИмяФормы, КомпоновщикXML, "Документ");
	КомпоновщикXML_ВывестиАтрибут(ИмяФормы, КомпоновщикXML, "Индекс", "0000090");
	КомпоновщикXML_ВывестиАтрибут(ИмяФормы, КомпоновщикXML, "НомКорр", ПараметрыВыгрузки.ВидДок);
	
	Если ПараметрыВыгрузки.ВидДок <> "0" Тогда
		КомпоновщикXML_ВывестиАтрибут(ИмяФормы, КомпоновщикXML, "ПризнСвед9",
									  ПараметрыВыгрузки["АктуальностьСведений" + ИмяРаздела]);
	КонецЕсли;
	
	Если ПараметрыВыгрузки.ВидДок = "0" ИЛИ ПараметрыВыгрузки["АктуальностьСведений" + ИмяРаздела] = "0" Тогда
		
		СтрокиРаздела = ДанныеРаздела.СтрокиРаздела;
		ИтогиРаздела = ДанныеРаздела.ИтогиРаздела;
		
		КомпоновщикXML_СоздатьУзел(ИмяФормы, КомпоновщикXML, "КнигаПрод");
		Если ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2019Кв1") Тогда
			КомпоновщикXML_ВывестиНеобязательныйАтрибут(ИмяФормы, КомпоновщикXML, "СтПродБезНДС20",
														ИтогиРаздела.СтПродБезНДС20, "Ч,19,2");
		КонецЕсли;
		КомпоновщикXML_ВывестиНеобязательныйАтрибут(ИмяФормы, КомпоновщикXML, "СтПродБезНДС18",
													ИтогиРаздела.СтПродБезНДС18, "Ч,19,2");
		КомпоновщикXML_ВывестиНеобязательныйАтрибут(ИмяФормы, КомпоновщикXML, "СтПродБезНДС10",
													ИтогиРаздела.СтПродБезНДС10, "Ч,19,2");
		КомпоновщикXML_ВывестиНеобязательныйАтрибут(ИмяФормы, КомпоновщикXML, "СтПродБезНДС0",
													ИтогиРаздела.СтПродБезНДС0,  "Ч,19,2");
		Если ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2019Кв1") Тогда
			КомпоновщикXML_ВывестиНеобязательныйАтрибут(ИмяФормы, КомпоновщикXML, "СумНДСВсКПр20",
														ИтогиРаздела.СумНДСВсКПр20,  "Ч,19,2");
		КонецЕсли;
		КомпоновщикXML_ВывестиНеобязательныйАтрибут(ИмяФормы, КомпоновщикXML, "СумНДСВсКПр18",
													ИтогиРаздела.СумНДСВсКПр18,  "Ч,19,2");
		КомпоновщикXML_ВывестиНеобязательныйАтрибут(ИмяФормы, КомпоновщикXML, "СумНДСВсКПр10",
													ИтогиРаздела.СумНДСВсКПр10,  "Ч,19,2");
		КомпоновщикXML_ВывестиНеобязательныйАтрибут(ИмяФормы, КомпоновщикXML, "СтПродОсвВсКПр",
													ИтогиРаздела.СтПродОсвВсКПр, "Ч,19,2");
		
		Если ПараметрыВыгрузки.ДанныеСегментированы Тогда
			Для Каждого НомерПервойСтрокиСекции Из СтрокиРаздела Цикл
				СтрокиСегментаРаздела = РегламентированнаяОтчетность.СегментДанныхРазделаДекларацииНДС(
				СтруктураРеквизитовФормы.мСохраненныйДок, ИмяРаздела, НомерПервойСтрокиСекции);
				Для Каждого СтрокаДанных ИЗ СтрокиСегментаРаздела Цикл
					ВыгрузитьСтрокуСведенийРаздела9(ИмяФормы, КомпоновщикXML, СтрокаДанных);
				КонецЦикла;
			КонецЦикла;
		Иначе
			Для Каждого СтрокаДанных Из СтрокиРаздела Цикл
				ВыгрузитьСтрокуСведенийРаздела9(ИмяФормы, КомпоновщикXML, СтрокаДанных);
			КонецЦикла;
		КонецЕсли;
		
		КомпоновщикXML_ЗакрытьУзел(ИмяФормы, КомпоновщикXML);
		
	КонецЕсли;
		
	КомпоновщикXML_ЗакрытьУзел(ИмяФормы, КомпоновщикXML);
	КомпоновщикXML_ЗакрытьУзел(ИмяФормы, КомпоновщикXML);
	
	РезультатВыгрузки = Новый Структура;
	РезультатВыгрузки.Вставить("ИмяФайлаВыгрузки", ИдФайл + ".xml");
	РезультатВыгрузки.Вставить("АдресФайлаВыгрузки", КомпоновщикXML_СсылкаНаВременноеХранилище(ИмяФормы, КомпоновщикXML));
	Если ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2019Кв1") Тогда
		РезультатВыгрузки.Вставить("ТипФайлаВыгрузки", "НДС2019" + ИмяРаздела);
	Иначе// "ФормаОтчета2017Кв1"
		РезультатВыгрузки.Вставить("ТипФайлаВыгрузки", "НДС2017" + ИмяРаздела);
	КонецЕсли;
	РезультатВыгрузки.Вставить("КодировкаФайлаВыгрузки", "windows-1251");
	
	Возврат РезультатВыгрузки;
	
КонецФункции

Процедура ВыгрузитьСтрокуСведенийРаздела9(ИмяФормы, КомпоновщикXML, СтрокаДанных)
	
	КомпоновщикXML_СоздатьУзел(ИмяФормы, КомпоновщикXML, "КнПродСтр");
	
	КомпоновщикXML_ВывестиАтрибут(ИмяФормы, КомпоновщикXML, "НомерПор", СтрокаДанных.НомерПор, "Ч,12");
	
	КомпоновщикXML_ВывестиАтрибут(ИмяФормы, КомпоновщикXML, "НомСчФПрод", СтрокаДанных.НомСчФПрод, "Т,1000");
	КомпоновщикXML_ВывестиАтрибут(ИмяФормы, КомпоновщикXML, "ДатаСчФПрод", СтрокаДанных.ДатаСчФПрод, "Т,10");
	
	КомпоновщикXML_ВывестиНеобязательныйАтрибут(ИмяФормы, КомпоновщикXML, "НомИспрСчФ", СтрокаДанных.НомИспрСчФ, "Ч,3");
	КомпоновщикXML_ВывестиНеобязательныйАтрибут(ИмяФормы, КомпоновщикXML, "ДатаИспрСчФ", СтрокаДанных.ДатаИспрСчФ,
												"Т,10");
	
	КомпоновщикXML_ВывестиНеобязательныйАтрибут(ИмяФормы, КомпоновщикXML, "НомКСчФПрод", СтрокаДанных.НомКСчФПрод,
												"Т,256");
	КомпоновщикXML_ВывестиНеобязательныйАтрибут(ИмяФормы, КомпоновщикXML, "ДатаКСчФПрод", СтрокаДанных.ДатаКСчФПрод,
												"Т,10");
	
	КомпоновщикXML_ВывестиНеобязательныйАтрибут(ИмяФормы, КомпоновщикXML, "НомИспрКСчФ", СтрокаДанных.НомИспрКСчФ, "Ч,3");
	КомпоновщикXML_ВывестиНеобязательныйАтрибут(ИмяФормы, КомпоновщикXML, "ДатаИспрКСчФ", СтрокаДанных.ДатаИспрКСчФ,
												"Т,10");
	
	КомпоновщикXML_ВывестиНеобязательныйАтрибут(ИмяФормы, КомпоновщикXML, "ОКВ", СтрокаДанных.ОКВ, "Т,3");
	
	ВыгружатьНулевойАтрибут_СтоимПродСФВ = ЗначениеЗаполнено(СтрокаДанных.ОКВ) И СтрокаДанных.ОКВ <> "643";
	Если ВыгружатьНулевойАтрибут_СтоимПродСФВ Тогда
		КомпоновщикXML_ВывестиАтрибут(ИмяФормы, КомпоновщикXML, "СтоимПродСФВ", СтрокаДанных.СтоимПродСФВ, "Ч,19,2");
	Иначе
		КомпоновщикXML_ВывестиНеобязательныйАтрибут(ИмяФормы, КомпоновщикXML, "СтоимПродСФВ", СтрокаДанных.СтоимПродСФВ,
													"Ч,19,2");
	КонецЕсли;
	
	ВыгружатьНулевойАтрибут_СтоимПродСФ = НЕ ЗначениеЗаполнено(СтрокаДанных.СтоимПродСФ)
	                                    И НЕ ЗначениеЗаполнено(СтрокаДанных.СтоимПродОсв);
	Если ВыгружатьНулевойАтрибут_СтоимПродСФ Тогда
		КомпоновщикXML_ВывестиАтрибут(ИмяФормы, КомпоновщикXML, "СтоимПродСФ", СтрокаДанных.СтоимПродСФ, "Ч,19,2");
	Иначе
		КомпоновщикXML_ВывестиНеобязательныйАтрибут(ИмяФормы, КомпоновщикXML, "СтоимПродСФ", СтрокаДанных.СтоимПродСФ,
													"Ч,19,2");
	КонецЕсли;
	
	Если ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2019Кв1") Тогда
		КомпоновщикXML_ВывестиНеобязательныйАтрибут(ИмяФормы, КомпоновщикXML, "СтоимПродСФ20", СтрокаДанных.СтоимПродСФ20,
													"Ч,19,2");
	КонецЕсли;
	КомпоновщикXML_ВывестиНеобязательныйАтрибут(ИмяФормы, КомпоновщикXML, "СтоимПродСФ18", СтрокаДанных.СтоимПродСФ18,
												"Ч,19,2");
	КомпоновщикXML_ВывестиНеобязательныйАтрибут(ИмяФормы, КомпоновщикXML, "СтоимПродСФ10", СтрокаДанных.СтоимПродСФ10,
												"Ч,19,2");
	КомпоновщикXML_ВывестиНеобязательныйАтрибут(ИмяФормы, КомпоновщикXML, "СтоимПродСФ0",  СтрокаДанных.СтоимПродСФ0,
												"Ч,19,2");
	
	Если ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2019Кв1") Тогда
		ВыгружатьНулевойАтрибут_СумНДССФ20 = ЗначениеЗаполнено(СтрокаДанных.СтоимПродСФ20);
		Если ВыгружатьНулевойАтрибут_СумНДССФ20 Тогда
			КомпоновщикXML_ВывестиАтрибут(ИмяФормы, КомпоновщикXML, "СумНДССФ20", СтрокаДанных.СумНДССФ20, "Ч,19,2");
		Иначе
			КомпоновщикXML_ВывестиНеобязательныйАтрибут(ИмяФормы, КомпоновщикXML, "СумНДССФ20", СтрокаДанных.СумНДССФ20,
														"Ч,19,2");
		КонецЕсли;
	КонецЕсли;
	
	ВыгружатьНулевойАтрибут_СумНДССФ18 = ЗначениеЗаполнено(СтрокаДанных.СтоимПродСФ18);
	Если ВыгружатьНулевойАтрибут_СумНДССФ18 Тогда
		КомпоновщикXML_ВывестиАтрибут(ИмяФормы, КомпоновщикXML, "СумНДССФ18", СтрокаДанных.СумНДССФ18, "Ч,19,2");
	Иначе
		КомпоновщикXML_ВывестиНеобязательныйАтрибут(ИмяФормы, КомпоновщикXML, "СумНДССФ18", СтрокаДанных.СумНДССФ18,
													"Ч,19,2");
	КонецЕсли;
	
	ВыгружатьНулевойАтрибут_СумНДССФ10 = ЗначениеЗаполнено(СтрокаДанных.СтоимПродСФ10);
	Если ВыгружатьНулевойАтрибут_СумНДССФ10 Тогда
		КомпоновщикXML_ВывестиАтрибут(ИмяФормы, КомпоновщикXML, "СумНДССФ10", СтрокаДанных.СумНДССФ10, "Ч,19,2");
	Иначе
		КомпоновщикXML_ВывестиНеобязательныйАтрибут(ИмяФормы, КомпоновщикXML, "СумНДССФ10", СтрокаДанных.СумНДССФ10,
													"Ч,19,2");
	КонецЕсли;
	
	КомпоновщикXML_ВывестиНеобязательныйАтрибут(ИмяФормы, КомпоновщикXML, "СтоимПродОсв", СтрокаДанных.СтоимПродОсв,
												"Ч,19,2");
	
	Для Инд = 0 По СтрокаДанных.КодВидОпер.Количество() - 1 Цикл
		КомпоновщикXML_СоздатьУзел(ИмяФормы, КомпоновщикXML, "КодВидОпер");
		КомпоновщикXML_ВывестиЗначениеИЗакрытьУзел(ИмяФормы, КомпоновщикXML, СтрокаДанных.КодВидОпер[Инд]);
	КонецЦикла;
	
	Для Инд = 0 По СтрокаДанных.РегНомТД.Количество() - 1 Цикл
		КомпоновщикXML_ВывестиНеобязательныйМножественныйЭлемент(ИмяФормы,
			КомпоновщикXML, "РегНомТД", СтрокаДанных.РегНомТД[Инд], "Т,27");
	КонецЦикла;
	
	Если ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2019Кв1") Тогда
		Для Инд = 0 По СтрокаДанных.КодВидТовар.Количество() - 1 Цикл
			КомпоновщикXML_ВывестиНеобязательныйМножественныйЭлемент(ИмяФормы,
				КомпоновщикXML, "КодВидТовар", СтрокаДанных.КодВидТовар[Инд], "Т,10");
		КонецЦикла;
	КонецЕсли;
	
	Для Инд = 0 По СтрокаДанных.ДокПдтвОпл.Количество() - 1 Цикл
		КомпоновщикXML_СоздатьУзел(ИмяФормы, КомпоновщикXML, "ДокПдтвОпл");
		
		КомпоновщикXML_ВывестиАтрибут(ИмяФормы, КомпоновщикXML, "НомДокПдтвОпл",
			СтрокаДанных.ДокПдтвОпл[Инд].НомДокПдтвОпл,  "Т,256");
		КомпоновщикXML_ВывестиАтрибут(ИмяФормы, КомпоновщикXML, "ДатаДокПдтвОпл",
			СтрокаДанных.ДокПдтвОпл[Инд].ДатаДокПдтвОпл, "Т,10");
		
		КомпоновщикXML_ЗакрытьУзел(ИмяФормы, КомпоновщикXML);
	КонецЦикла;
	
	Для Инд = 0 По СтрокаДанных.СвПокуп.Количество() - 1 Цикл
		КомпоновщикXML_СоздатьУзел(ИмяФормы, КомпоновщикXML, "СвПокуп");
		
		Если СтрокаДанных.СвПокуп[Инд].Свойство("ИННФЛ") Тогда
			КомпоновщикXML_СоздатьУзел(ИмяФормы, КомпоновщикXML, "СведИП");
			
			КомпоновщикXML_ВывестиАтрибут(ИмяФормы, КомпоновщикXML, "ИННФЛ", СтрокаДанных.СвПокуп[Инд].ИННФЛ, "Т,12");
			
			КомпоновщикXML_ЗакрытьУзел(ИмяФормы, КомпоновщикXML);
		Иначе
			КомпоновщикXML_СоздатьУзел(ИмяФормы, КомпоновщикXML, "СведЮЛ");
			
			КомпоновщикXML_ВывестиАтрибут(ИмяФормы, КомпоновщикXML, "ИННЮЛ", СтрокаДанных.СвПокуп[Инд].ИННЮЛ, "Т,10");
			КомпоновщикXML_ВывестиАтрибут(ИмяФормы, КомпоновщикXML, "КПП", СтрокаДанных.СвПокуп[Инд].КПП, "Т,9");
			
			КомпоновщикXML_ЗакрытьУзел(ИмяФормы, КомпоновщикXML);
		КонецЕсли;
		
		КомпоновщикXML_ЗакрытьУзел(ИмяФормы, КомпоновщикXML);
	КонецЦикла;
	
	Если СтрокаДанных.СвПос <> Неопределено Тогда
		КомпоновщикXML_СоздатьУзел(ИмяФормы, КомпоновщикXML, "СвПос");
		
		Если СтрокаДанных.СвПос.Свойство("ИННФЛ") Тогда
			КомпоновщикXML_СоздатьУзел(ИмяФормы, КомпоновщикXML, "СведИП");
			
			КомпоновщикXML_ВывестиАтрибут(ИмяФормы, КомпоновщикXML, "ИННФЛ", СтрокаДанных.СвПос.ИННФЛ, "Т,12");
			
			КомпоновщикXML_ЗакрытьУзел(ИмяФормы, КомпоновщикXML);
		Иначе
			КомпоновщикXML_СоздатьУзел(ИмяФормы, КомпоновщикXML, "СведЮЛ");
			
			КомпоновщикXML_ВывестиАтрибут(ИмяФормы, КомпоновщикXML, "ИННЮЛ", СтрокаДанных.СвПос.ИННЮЛ, "Т,10");
			КомпоновщикXML_ВывестиАтрибут(ИмяФормы, КомпоновщикXML, "КПП", СтрокаДанных.СвПос.КПП, "Т,9");
			
			КомпоновщикXML_ЗакрытьУзел(ИмяФормы, КомпоновщикXML);
		КонецЕсли;
		
		КомпоновщикXML_ЗакрытьУзел(ИмяФормы, КомпоновщикXML);
	КонецЕсли;
	
	КомпоновщикXML_ЗакрытьУзел(ИмяФормы, КомпоновщикXML);
	
КонецПроцедуры

Функция ВыгрузкаРаздел9_Прил1(ИмяФормы, СтруктураРеквизитовФормы, СписокСтраницРаздела, ПараметрыВыгрузки)
	
	ИмяРаздела = "Раздел9_Прил1";
	
	ДанныеРаздела = ДанныеРазделаНДСДляВыгрузки(ИмяФормы,
												СтруктураРеквизитовФормы,
												СписокСтраницРаздела,
												ПараметрыВыгрузки,
												ИмяРаздела);
	Если ДанныеРаздела = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СтрокиРаздела = ДанныеРаздела.СтрокиРаздела;
	ИтогиРаздела = ДанныеРаздела.ИтогиРаздела;
	
	ИдФайл = СформироватьИдентификаторФайлаВыгрузкиНДС(ИмяФормы, ПараметрыВыгрузки, "NO_NDS.91");
	ПараметрыВыгрузки.Вставить("ИдФайл" + ИмяРаздела, ИдФайл);
	
	КомпоновщикXML = КомпоновщикXML_Новый(ИмяФормы);
	
	КомпоновщикXML_СоздатьУзел(ИмяФормы, КомпоновщикXML, "Файл");
	КомпоновщикXML_ВывестиАтрибут(ИмяФормы, КомпоновщикXML, "xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");
	КомпоновщикXML_ВывестиАтрибут(ИмяФормы, КомпоновщикXML, "ИдФайл", ИдФайл);
	КомпоновщикXML_ВывестиАтрибут(ИмяФормы, КомпоновщикXML, "ВерсПрог", ПараметрыВыгрузки.ВерсПрог);
	
	Если ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2019Кв1") Тогда
		КомпоновщикXML_ВывестиАтрибут(ИмяФормы, КомпоновщикXML, "ВерсФорм", "5.06");
	Иначе// "ФормаОтчета2017Кв1"
		КомпоновщикXML_ВывестиАтрибут(ИмяФормы, КомпоновщикXML, "ВерсФорм", "5.05");
	КонецЕсли;
	
	КомпоновщикXML_СоздатьУзел(ИмяФормы, КомпоновщикXML, "Документ");
	КомпоновщикXML_ВывестиАтрибут(ИмяФормы, КомпоновщикXML, "Индекс", "0000091");
	КомпоновщикXML_ВывестиАтрибут(ИмяФормы, КомпоновщикXML, "НомКорр", ПараметрыВыгрузки.ВидДок);
	
	Если ПараметрыВыгрузки.ВидДок <> "0" Тогда
		КомпоновщикXML_ВывестиАтрибут(ИмяФормы, КомпоновщикXML, "ПризнСвед91",
			ПараметрыВыгрузки["АктуальностьСведений" + ИмяРаздела]);
	КонецЕсли;
	
	Если ПараметрыВыгрузки.ВидДок = "0" ИЛИ ПараметрыВыгрузки["АктуальностьСведений" + ИмяРаздела] = "0" Тогда
		
		КомпоновщикXML_СоздатьУзел(ИмяФормы, КомпоновщикXML, "КнигаПродДЛ");
		Если ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2019Кв1") Тогда
			КомпоновщикXML_ВывестиНеобязательныйАтрибут(ИмяФормы, КомпоновщикXML, "ИтСтПродКПр20",
														ИтогиРаздела.ИтСтПродКПр20, "Ч,19,2");
		КонецЕсли;
		КомпоновщикXML_ВывестиНеобязательныйАтрибут(ИмяФормы, КомпоновщикXML, "ИтСтПродКПр18",
													ИтогиРаздела.ИтСтПродКПр18, "Ч,19,2");
		КомпоновщикXML_ВывестиНеобязательныйАтрибут(ИмяФормы, КомпоновщикXML, "ИтСтПродКПр10",
													ИтогиРаздела.ИтСтПродКПр10, "Ч,19,2");
		КомпоновщикXML_ВывестиНеобязательныйАтрибут(ИмяФормы, КомпоновщикXML, "ИтСтПродКПр0",
													ИтогиРаздела.ИтСтПродКПр0,  "Ч,19,2");
		Если ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2019Кв1") Тогда
			КомпоновщикXML_ВывестиНеобязательныйАтрибут(ИмяФормы, КомпоновщикXML, "СумНДСИтКПр20",
														ИтогиРаздела.СумНДСИтКПр20, "Ч,19,2");
		КонецЕсли;
		КомпоновщикXML_ВывестиНеобязательныйАтрибут(ИмяФормы, КомпоновщикXML, "СумНДСИтКПр18",
													ИтогиРаздела.СумНДСИтКПр18,  "Ч,19,2");
		КомпоновщикXML_ВывестиНеобязательныйАтрибут(ИмяФормы, КомпоновщикXML, "СумНДСИтКПр10",
													ИтогиРаздела.СумНДСИтКПр10,  "Ч,19,2");
		КомпоновщикXML_ВывестиНеобязательныйАтрибут(ИмяФормы, КомпоновщикXML, "ИтСтПродОсвКПр",
													ИтогиРаздела.ИтСтПродОсвКПр, "Ч,19,2");
		Если ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2019Кв1") Тогда
			КомпоновщикXML_ВывестиНеобязательныйАтрибут(ИмяФормы, КомпоновщикXML, "СтПродВсП1Р9_20",
														ИтогиРаздела.СтПродВсП1Р9_20,  "Ч,19,2");
		КонецЕсли;
		КомпоновщикXML_ВывестиНеобязательныйАтрибут(ИмяФормы, КомпоновщикXML, "СтПродВсП1Р9_18",
													ИтогиРаздела.СтПродВсП1Р9_18,  "Ч,19,2");
		КомпоновщикXML_ВывестиНеобязательныйАтрибут(ИмяФормы, КомпоновщикXML, "СтПродВсП1Р9_10",
													ИтогиРаздела.СтПродВсП1Р9_10, "Ч,19,2");
		КомпоновщикXML_ВывестиНеобязательныйАтрибут(ИмяФормы, КомпоновщикXML, "СтПродВсП1Р9_0",
													ИтогиРаздела.СтПродВсП1Р9_0,  "Ч,19,2");
		Если ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2019Кв1") Тогда
			КомпоновщикXML_ВывестиНеобязательныйАтрибут(ИмяФормы, КомпоновщикXML, "СумНДСВсП1Р9_20",
														ИтогиРаздела.СумНДСВсП1Р9_20, "Ч,19,2");
		КонецЕсли;
		КомпоновщикXML_ВывестиНеобязательныйАтрибут(ИмяФормы, КомпоновщикXML, "СумНДСВсП1Р9_18",
													ИтогиРаздела.СумНДСВсП1Р9_18, "Ч,19,2");
		КомпоновщикXML_ВывестиНеобязательныйАтрибут(ИмяФормы, КомпоновщикXML, "СумНДСВсП1Р9_10",
													ИтогиРаздела.СумНДСВсП1Р9_10,  "Ч,19,2");
		КомпоновщикXML_ВывестиНеобязательныйАтрибут(ИмяФормы, КомпоновщикXML, "СтПродОсвП1Р9Вс",
													ИтогиРаздела.СтПродОсвП1Р9Вс, "Ч,19,2");
		
		Если ПараметрыВыгрузки.ДанныеСегментированы Тогда
			Для Каждого НомерПервойСтрокиСекции Из СтрокиРаздела Цикл
				СтрокиСегментаРаздела = РегламентированнаяОтчетность.СегментДанныхРазделаДекларацииНДС(
				СтруктураРеквизитовФормы.мСохраненныйДок, ИмяРаздела, НомерПервойСтрокиСекции);
				Для Каждого СтрокаДанных ИЗ СтрокиСегментаРаздела Цикл
					ВыгрузитьСтрокуСведенийРаздела9_Прил1(ИмяФормы, КомпоновщикXML, СтрокаДанных);
				КонецЦикла;
			КонецЦикла;
		Иначе
			Для Каждого СтрокаДанных Из СтрокиРаздела Цикл
				ВыгрузитьСтрокуСведенийРаздела9_Прил1(ИмяФормы, КомпоновщикXML, СтрокаДанных);
			КонецЦикла;
		КонецЕсли;
		
		КомпоновщикXML_ЗакрытьУзел(ИмяФормы, КомпоновщикXML);
		
	КонецЕсли;
	
	КомпоновщикXML_ЗакрытьУзел(ИмяФормы, КомпоновщикXML);
	КомпоновщикXML_ЗакрытьУзел(ИмяФормы, КомпоновщикXML);
	
	РезультатВыгрузки = Новый Структура;
	РезультатВыгрузки.Вставить("ИмяФайлаВыгрузки", ИдФайл + ".xml");
	РезультатВыгрузки.Вставить("АдресФайлаВыгрузки", КомпоновщикXML_СсылкаНаВременноеХранилище(ИмяФормы, КомпоновщикXML));
	Если ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2019Кв1") Тогда
		РезультатВыгрузки.Вставить("ТипФайлаВыгрузки", "НДС2019" + ИмяРаздела);
	Иначе// "ФормаОтчета2017Кв1"
		РезультатВыгрузки.Вставить("ТипФайлаВыгрузки", "НДС2017" + ИмяРаздела);
	КонецЕсли;
	РезультатВыгрузки.Вставить("КодировкаФайлаВыгрузки", "windows-1251");
	
	Возврат РезультатВыгрузки;
	
КонецФункции

Процедура ВыгрузитьСтрокуСведенийРаздела9_Прил1(ИмяФормы, КомпоновщикXML, СтрокаДанных)
	
	КомпоновщикXML_СоздатьУзел(ИмяФормы, КомпоновщикXML, "КнПродДЛСтр");
	
	КомпоновщикXML_ВывестиАтрибут(ИмяФормы, КомпоновщикXML, "НомерПор", СтрокаДанных.НомерПор, "Ч,12");
	
	КомпоновщикXML_ВывестиАтрибут(ИмяФормы, КомпоновщикXML, "НомСчФПрод", СтрокаДанных.НомСчФПрод, "Т,1000");
	КомпоновщикXML_ВывестиАтрибут(ИмяФормы, КомпоновщикXML, "ДатаСчФПрод", СтрокаДанных.ДатаСчФПрод, "Т,10");
	
	КомпоновщикXML_ВывестиНеобязательныйАтрибут(ИмяФормы, КомпоновщикXML, "НомИспрСчФ", СтрокаДанных.НомИспрСчФ, "Ч,3");
	КомпоновщикXML_ВывестиНеобязательныйАтрибут(ИмяФормы, КомпоновщикXML, "ДатаИспрСчФ", СтрокаДанных.ДатаИспрСчФ,
												"Т,10");
	
	КомпоновщикXML_ВывестиНеобязательныйАтрибут(ИмяФормы, КомпоновщикXML, "НомКСчФПрод", СтрокаДанных.НомКСчФПрод,
												"Т,256");
	КомпоновщикXML_ВывестиНеобязательныйАтрибут(ИмяФормы, КомпоновщикXML, "ДатаКСчФПрод", СтрокаДанных.ДатаКСчФПрод,
												"Т,10");
	
	КомпоновщикXML_ВывестиНеобязательныйАтрибут(ИмяФормы, КомпоновщикXML, "НомИспрКСчФ", СтрокаДанных.НомИспрКСчФ, "Ч,3");
	КомпоновщикXML_ВывестиНеобязательныйАтрибут(ИмяФормы, КомпоновщикXML, "ДатаИспрКСчФ", СтрокаДанных.ДатаИспрКСчФ,
												"Т,10");
	
	КомпоновщикXML_ВывестиНеобязательныйАтрибут(ИмяФормы, КомпоновщикXML, "ОКВ", СтрокаДанных.ОКВ, "Т,3");
	
	ВыгружатьНулевойАтрибут_СтоимПродСФВ = ЗначениеЗаполнено(СтрокаДанных.ОКВ) И СтрокаДанных.ОКВ <> "643";
	Если ВыгружатьНулевойАтрибут_СтоимПродСФВ Тогда
		КомпоновщикXML_ВывестиАтрибут(ИмяФормы, КомпоновщикXML, "СтоимПродСФВ", СтрокаДанных.СтоимПродСФВ, "Ч,19,2");
	Иначе
		КомпоновщикXML_ВывестиНеобязательныйАтрибут(ИмяФормы, КомпоновщикXML, "СтоимПродСФВ",
			СтрокаДанных.СтоимПродСФВ, "Ч,19,2");
	КонецЕсли;
	
	ВыгружатьНулевойАтрибут_СтоимПродСФ = НЕ ЗначениеЗаполнено(СтрокаДанных.СтоимПродСФ)
	                                    И НЕ ЗначениеЗаполнено(СтрокаДанных.СтоимПродОсв);
	Если ВыгружатьНулевойАтрибут_СтоимПродСФ Тогда
		КомпоновщикXML_ВывестиАтрибут(ИмяФормы, КомпоновщикXML, "СтоимПродСФ", СтрокаДанных.СтоимПродСФ, "Ч,19,2");
	Иначе
		КомпоновщикXML_ВывестиНеобязательныйАтрибут(ИмяФормы, КомпоновщикXML, "СтоимПродСФ",
													СтрокаДанных.СтоимПродСФ, "Ч,19,2");
	КонецЕсли;
	
	Если ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2019Кв1") Тогда
		КомпоновщикXML_ВывестиНеобязательныйАтрибут(ИмяФормы, КомпоновщикXML, "СтоимПродСФ20",
													СтрокаДанных.СтоимПродСФ20, "Ч,19,2");
	КонецЕсли;
	КомпоновщикXML_ВывестиНеобязательныйАтрибут(ИмяФормы, КомпоновщикXML, "СтоимПродСФ18",
												СтрокаДанных.СтоимПродСФ18, "Ч,19,2");
	КомпоновщикXML_ВывестиНеобязательныйАтрибут(ИмяФормы, КомпоновщикXML, "СтоимПродСФ10",
												СтрокаДанных.СтоимПродСФ10, "Ч,19,2");
	КомпоновщикXML_ВывестиНеобязательныйАтрибут(ИмяФормы, КомпоновщикXML, "СтоимПродСФ0",
												СтрокаДанных.СтоимПродСФ0,  "Ч,19,2");
	
	Если ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2019Кв1") Тогда
		ВыгружатьНулевойАтрибут_СумНДССФ20 = ЗначениеЗаполнено(СтрокаДанных.СтоимПродСФ20);
		Если ВыгружатьНулевойАтрибут_СумНДССФ20 Тогда
			КомпоновщикXML_ВывестиАтрибут(ИмяФормы, КомпоновщикXML, "СумНДССФ20", СтрокаДанных.СумНДССФ20, "Ч,19,2");
		Иначе
			КомпоновщикXML_ВывестиНеобязательныйАтрибут(ИмяФормы, КомпоновщикXML, "СумНДССФ20",
														СтрокаДанных.СумНДССФ20, "Ч,19,2");
		КонецЕсли;
	КонецЕсли;
	
	ВыгружатьНулевойАтрибут_СумНДССФ18 = ЗначениеЗаполнено(СтрокаДанных.СтоимПродСФ18);
	Если ВыгружатьНулевойАтрибут_СумНДССФ18 Тогда
		КомпоновщикXML_ВывестиАтрибут(ИмяФормы, КомпоновщикXML, "СумНДССФ18", СтрокаДанных.СумНДССФ18, "Ч,19,2");
	Иначе
		КомпоновщикXML_ВывестиНеобязательныйАтрибут(ИмяФормы, КомпоновщикXML, "СумНДССФ18",
													СтрокаДанных.СумНДССФ18, "Ч,19,2");
	КонецЕсли;
	
	ВыгружатьНулевойАтрибут_СумНДССФ10 = ЗначениеЗаполнено(СтрокаДанных.СтоимПродСФ10);
	Если ВыгружатьНулевойАтрибут_СумНДССФ10 Тогда
		КомпоновщикXML_ВывестиАтрибут(ИмяФормы, КомпоновщикXML, "СумНДССФ10", СтрокаДанных.СумНДССФ10, "Ч,19,2");
	Иначе
		КомпоновщикXML_ВывестиНеобязательныйАтрибут(ИмяФормы, КомпоновщикXML, "СумНДССФ10",
													СтрокаДанных.СумНДССФ10, "Ч,19,2");
	КонецЕсли;
	
	КомпоновщикXML_ВывестиНеобязательныйАтрибут(ИмяФормы, КомпоновщикXML, "СтоимПродОсв",
												СтрокаДанных.СтоимПродОсв, "Ч,19,2");
	
	Для Инд = 0 По СтрокаДанных.КодВидОпер.Количество() - 1 Цикл
		КомпоновщикXML_СоздатьУзел(ИмяФормы, КомпоновщикXML, "КодВидОпер");
		КомпоновщикXML_ВывестиЗначениеИЗакрытьУзел(ИмяФормы, КомпоновщикXML, СтрокаДанных.КодВидОпер[Инд]);
	КонецЦикла;
	
	Для Инд = 0 По СтрокаДанных.РегНомТД.Количество() - 1 Цикл
		КомпоновщикXML_ВывестиНеобязательныйМножественныйЭлемент(ИмяФормы,
			КомпоновщикXML, "РегНомТД", СтрокаДанных.РегНомТД[Инд], "Т,27");
	КонецЦикла;
	
	Если ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2019Кв1") Тогда
		Для Инд = 0 По СтрокаДанных.КодВидТовар.Количество() - 1 Цикл
			КомпоновщикXML_ВывестиНеобязательныйМножественныйЭлемент(ИмяФормы,
				КомпоновщикXML, "КодВидТовар", СтрокаДанных.КодВидТовар[Инд], "Т,10");
		КонецЦикла;
	КонецЕсли;
	
	Для Инд = 0 По СтрокаДанных.ДокПдтвОпл.Количество() - 1 Цикл
		КомпоновщикXML_СоздатьУзел(ИмяФормы, КомпоновщикXML, "ДокПдтвОпл");
		
		КомпоновщикXML_ВывестиАтрибут(ИмяФормы, КомпоновщикXML, "НомДокПдтвОпл",
									  СтрокаДанных.ДокПдтвОпл[Инд].НомДокПдтвОпл, "Т,256");
		КомпоновщикXML_ВывестиАтрибут(ИмяФормы, КомпоновщикXML, "ДатаДокПдтвОпл",
									  СтрокаДанных.ДокПдтвОпл[Инд].ДатаДокПдтвОпл, "Т,10");
		
		КомпоновщикXML_ЗакрытьУзел(ИмяФормы, КомпоновщикXML);
	КонецЦикла;
	
	Для Инд = 0 По СтрокаДанных.СвПокуп.Количество() - 1 Цикл
		КомпоновщикXML_СоздатьУзел(ИмяФормы, КомпоновщикXML, "СвПокуп");
		
		Если СтрокаДанных.СвПокуп[Инд].Свойство("ИННФЛ") Тогда
			КомпоновщикXML_СоздатьУзел(ИмяФормы, КомпоновщикXML, "СведИП");
			
			КомпоновщикXML_ВывестиАтрибут(ИмяФормы, КомпоновщикXML, "ИННФЛ", СтрокаДанных.СвПокуп[Инд].ИННФЛ, "Т,12");
			
			КомпоновщикXML_ЗакрытьУзел(ИмяФормы, КомпоновщикXML);
		Иначе
			КомпоновщикXML_СоздатьУзел(ИмяФормы, КомпоновщикXML, "СведЮЛ");
			
			КомпоновщикXML_ВывестиАтрибут(ИмяФормы, КомпоновщикXML, "ИННЮЛ", СтрокаДанных.СвПокуп[Инд].ИННЮЛ, "Т,10");
			КомпоновщикXML_ВывестиАтрибут(ИмяФормы, КомпоновщикXML, "КПП", СтрокаДанных.СвПокуп[Инд].КПП, "Т,9");
			
			КомпоновщикXML_ЗакрытьУзел(ИмяФормы, КомпоновщикXML);
		КонецЕсли;
		
		КомпоновщикXML_ЗакрытьУзел(ИмяФормы, КомпоновщикXML);
	КонецЦикла;
	
	Если СтрокаДанных.СвПос <> Неопределено Тогда
		КомпоновщикXML_СоздатьУзел(ИмяФормы, КомпоновщикXML, "СвПос");
		
		Если СтрокаДанных.СвПос.Свойство("ИННФЛ") Тогда
			КомпоновщикXML_СоздатьУзел(ИмяФормы, КомпоновщикXML, "СведИП");
			
			КомпоновщикXML_ВывестиАтрибут(ИмяФормы, КомпоновщикXML, "ИННФЛ", СтрокаДанных.СвПос.ИННФЛ, "Т,12");
			
			КомпоновщикXML_ЗакрытьУзел(ИмяФормы, КомпоновщикXML);
		Иначе
			КомпоновщикXML_СоздатьУзел(ИмяФормы, КомпоновщикXML, "СведЮЛ");
			
			КомпоновщикXML_ВывестиАтрибут(ИмяФормы, КомпоновщикXML, "ИННЮЛ", СтрокаДанных.СвПос.ИННЮЛ, "Т,10");
			КомпоновщикXML_ВывестиАтрибут(ИмяФормы, КомпоновщикXML, "КПП", СтрокаДанных.СвПос.КПП, "Т,9");
			
			КомпоновщикXML_ЗакрытьУзел(ИмяФормы, КомпоновщикXML);
		КонецЕсли;
		
		КомпоновщикXML_ЗакрытьУзел(ИмяФормы, КомпоновщикXML);
	КонецЕсли;
	
	КомпоновщикXML_ЗакрытьУзел(ИмяФормы, КомпоновщикXML);
	
КонецПроцедуры

Функция ВыгрузкаРаздел10(ИмяФормы, СтруктураРеквизитовФормы, СписокСтраницРаздела, ПараметрыВыгрузки)
	
	ИмяРаздела = "Раздел10";
	
	ДанныеРаздела = ДанныеРазделаНДСДляВыгрузки(ИмяФормы,
												СтруктураРеквизитовФормы,
												СписокСтраницРаздела,
												ПараметрыВыгрузки,
												ИмяРаздела);
	Если ДанныеРаздела = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СтрокиРаздела = ДанныеРаздела.СтрокиРаздела;
	ИтогиРаздела = ДанныеРаздела.ИтогиРаздела;
	
	ИдФайл = СформироватьИдентификаторФайлаВыгрузкиНДС(ИмяФормы, ПараметрыВыгрузки, "NO_NDS.10");
	ПараметрыВыгрузки.Вставить("ИдФайл" + ИмяРаздела, ИдФайл);
	
	КомпоновщикXML = КомпоновщикXML_Новый(ИмяФормы);
	
	КомпоновщикXML_СоздатьУзел(ИмяФормы, КомпоновщикXML, "Файл");
	КомпоновщикXML_ВывестиАтрибут(ИмяФормы, КомпоновщикXML, "xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");
	КомпоновщикXML_ВывестиАтрибут(ИмяФормы, КомпоновщикXML, "ИдФайл", ИдФайл);
	КомпоновщикXML_ВывестиАтрибут(ИмяФормы, КомпоновщикXML, "ВерсПрог", ПараметрыВыгрузки.ВерсПрог);
	
	Если ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2019Кв1") Тогда
		КомпоновщикXML_ВывестиАтрибут(ИмяФормы, КомпоновщикXML, "ВерсФорм", "5.06");
	Иначе// "ФормаОтчета2017Кв1"
		КомпоновщикXML_ВывестиАтрибут(ИмяФормы, КомпоновщикXML, "ВерсФорм", "5.05");
	КонецЕсли;
	
	КомпоновщикXML_СоздатьУзел(ИмяФормы, КомпоновщикXML, "Документ");
	КомпоновщикXML_ВывестиАтрибут(ИмяФормы, КомпоновщикXML, "Индекс", "0000100");
	КомпоновщикXML_ВывестиАтрибут(ИмяФормы, КомпоновщикXML, "НомКорр", ПараметрыВыгрузки.ВидДок);
	
	Если ПараметрыВыгрузки.ВидДок <> "0" Тогда
		КомпоновщикXML_ВывестиАтрибут(ИмяФормы, КомпоновщикXML, "ПризнСвед10",
									  ПараметрыВыгрузки["АктуальностьСведений" + ИмяРаздела]);
	КонецЕсли;
	
	Если ПараметрыВыгрузки.ВидДок = "0" ИЛИ ПараметрыВыгрузки["АктуальностьСведений" + ИмяРаздела] = "0" Тогда
		
		КомпоновщикXML_СоздатьУзел(ИмяФормы, КомпоновщикXML, "ЖУчВыстСчФ");
		
		Если ПараметрыВыгрузки.ДанныеСегментированы Тогда
			Для Каждого НомерПервойСтрокиСекции Из СтрокиРаздела Цикл
				СтрокиСегментаРаздела = РегламентированнаяОтчетность.СегментДанныхРазделаДекларацииНДС(
				СтруктураРеквизитовФормы.мСохраненныйДок, ИмяРаздела, НомерПервойСтрокиСекции);
				Для Каждого СтрокаДанных ИЗ СтрокиСегментаРаздела Цикл
					ВыгрузитьСтрокуСведенийРаздела10(ИмяФормы, КомпоновщикXML, СтрокаДанных);
				КонецЦикла;
			КонецЦикла;
		Иначе
			Для Каждого СтрокаДанных Из СтрокиРаздела Цикл
				ВыгрузитьСтрокуСведенийРаздела10(ИмяФормы, КомпоновщикXML, СтрокаДанных);
			КонецЦикла;
		КонецЕсли;
		
		КомпоновщикXML_ЗакрытьУзел(ИмяФормы, КомпоновщикXML);
		
	КонецЕсли;
	
	КомпоновщикXML_ЗакрытьУзел(ИмяФормы, КомпоновщикXML);
	КомпоновщикXML_ЗакрытьУзел(ИмяФормы, КомпоновщикXML);
	
	РезультатВыгрузки = Новый Структура;
	РезультатВыгрузки.Вставить("ИмяФайлаВыгрузки", ИдФайл + ".xml");
	РезультатВыгрузки.Вставить("АдресФайлаВыгрузки", КомпоновщикXML_СсылкаНаВременноеХранилище(ИмяФормы, КомпоновщикXML));
	Если ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2019Кв1") Тогда
		РезультатВыгрузки.Вставить("ТипФайлаВыгрузки", "НДС2019" + ИмяРаздела);
	Иначе// "ФормаОтчета2017Кв1"
		РезультатВыгрузки.Вставить("ТипФайлаВыгрузки", "НДС2017" + ИмяРаздела);
	КонецЕсли;
	РезультатВыгрузки.Вставить("КодировкаФайлаВыгрузки", "windows-1251");
	
	Возврат РезультатВыгрузки;
	
КонецФункции

Процедура ВыгрузитьСтрокуСведенийРаздела10(ИмяФормы, КомпоновщикXML, СтрокаДанных)
	
	КомпоновщикXML_СоздатьУзел(ИмяФормы, КомпоновщикXML, "ЖУчВыстСчФСтр");
	
	КомпоновщикXML_ВывестиАтрибут(ИмяФормы, КомпоновщикXML, "НомерПор", СтрокаДанных.НомерПор, "Ч,12");
	
	КомпоновщикXML_ВывестиАтрибут(ИмяФормы, КомпоновщикXML, "НомСчФПрод", СтрокаДанных.НомСчФПрод, "Т,1000");
	КомпоновщикXML_ВывестиАтрибут(ИмяФормы, КомпоновщикXML, "ДатаСчФПрод", СтрокаДанных.ДатаСчФПрод, "Т,10");
	
	КомпоновщикXML_ВывестиНеобязательныйАтрибут(ИмяФормы, КомпоновщикXML, "НомИспрСчФ", СтрокаДанных.НомИспрСчФ, "Ч,3");
	КомпоновщикXML_ВывестиНеобязательныйАтрибут(ИмяФормы, КомпоновщикXML, "ДатаИспрСчФ", СтрокаДанных.ДатаИспрСчФ,
												"Т,10");
	
	КомпоновщикXML_ВывестиНеобязательныйАтрибут(ИмяФормы, КомпоновщикXML, "НомКСчФПрод", СтрокаДанных.НомКСчФПрод,
												"Т,256");
	КомпоновщикXML_ВывестиНеобязательныйАтрибут(ИмяФормы, КомпоновщикXML, "ДатаКСчФПрод", СтрокаДанных.ДатаКСчФПрод,
												"Т,10");
	
	КомпоновщикXML_ВывестиНеобязательныйАтрибут(ИмяФормы, КомпоновщикXML, "НомИспрКСчФ", СтрокаДанных.НомИспрКСчФ, "Ч,3");
	КомпоновщикXML_ВывестиНеобязательныйАтрибут(ИмяФормы, КомпоновщикXML, "ДатаИспрКСчФ", СтрокаДанных.ДатаИспрКСчФ,
												"Т,10");
	
	Для Инд = 0 По СтрокаДанных.КодВидОпер.Количество() - 1 Цикл
		КомпоновщикXML_СоздатьУзел(ИмяФормы, КомпоновщикXML, "КодВидОпер");
		КомпоновщикXML_ВывестиЗначениеИЗакрытьУзел(ИмяФормы, КомпоновщикXML, СтрокаДанных.КодВидОпер[Инд]);
	КонецЦикла;
	
	Если СтрокаДанных.СвПокуп <> Неопределено Тогда
		КомпоновщикXML_СоздатьУзел(ИмяФормы, КомпоновщикXML, "СвПокуп");
		
		Если СтрокаДанных.СвПокуп.Свойство("ИННФЛ") Тогда
			КомпоновщикXML_СоздатьУзел(ИмяФормы, КомпоновщикXML, "СведИП");
			
			КомпоновщикXML_ВывестиАтрибут(ИмяФормы, КомпоновщикXML, "ИННФЛ", СтрокаДанных.СвПокуп.ИННФЛ, "Т,12");
			
			КомпоновщикXML_ЗакрытьУзел(ИмяФормы, КомпоновщикXML);
		Иначе
			КомпоновщикXML_СоздатьУзел(ИмяФормы, КомпоновщикXML, "СведЮЛ");
			
			КомпоновщикXML_ВывестиАтрибут(ИмяФормы, КомпоновщикXML, "ИННЮЛ", СтрокаДанных.СвПокуп.ИННЮЛ, "Т,10");
			КомпоновщикXML_ВывестиАтрибут(ИмяФормы, КомпоновщикXML, "КПП", СтрокаДанных.СвПокуп.КПП, "Т,9");
			
			КомпоновщикXML_ЗакрытьУзел(ИмяФормы, КомпоновщикXML);
		КонецЕсли;
		
		КомпоновщикXML_ЗакрытьУзел(ИмяФормы, КомпоновщикXML);
	КонецЕсли;
	
	Для Инд = 0 По СтрокаДанных.СвСчФОтПрод.Количество() -1 Цикл
		ДанныеОДеятельности = СтрокаДанных.СвСчФОтПрод[Инд];
		
		КомпоновщикXML_СоздатьУзел(ИмяФормы, КомпоновщикXML, "СвСчФОтПрод");
		
		КомпоновщикXML_ВывестиАтрибут(ИмяФормы, КомпоновщикXML, "НомСчФОтПрод", ДанныеОДеятельности.НомСчФОтПрод, "Т,1000");
		КомпоновщикXML_ВывестиАтрибут(ИмяФормы, КомпоновщикXML, "ДатаСчФОтПрод", ДанныеОДеятельности.ДатаСчФОтПрод, "Т,10");
		
		КомпоновщикXML_ВывестиНеобязательныйАтрибут(ИмяФормы, КомпоновщикXML, "ОКВ", ДанныеОДеятельности.ОКВ, "Т,3");
		
		ВыгружатьАтрибуты_СтоимТовСчФВс_СумНДССчФ = НЕ ЗначениеЗаполнено(СтрокаДанных.НомКСчФПрод);
		Если ВыгружатьАтрибуты_СтоимТовСчФВс_СумНДССчФ Тогда
			КомпоновщикXML_ВывестиАтрибут(ИмяФормы, КомпоновщикXML, "СтоимТовСчФВс", ДанныеОДеятельности.СтоимТовСчФВс,
										  "Ч,19,2");
			КомпоновщикXML_ВывестиАтрибут(ИмяФормы, КомпоновщикXML, "СумНДССчФ", ДанныеОДеятельности.СумНДССчФ, "Ч,19,2");
		КонецЕсли;
		
		ЕстьКорректировкаСчетаФактуры = ЗначениеЗаполнено(СтрокаДанных.НомКСчФПрод)
		                            ИЛИ ЗначениеЗаполнено(СтрокаДанных.ДатаКСчФПрод)
		                            ИЛИ ЗначениеЗаполнено(СтрокаДанных.НомИспрКСчФ)
		                            ИЛИ ЗначениеЗаполнено(СтрокаДанных.ДатаИспрКСчФ);
		
		ВыгружатьНулевойАтрибут_РазСтКСчФУм = ЕстьКорректировкаСчетаФактуры
											И НЕ ЗначениеЗаполнено(ДанныеОДеятельности.РазСтКСчФУв);
		Если ВыгружатьНулевойАтрибут_РазСтКСчФУм Тогда
			КомпоновщикXML_ВывестиАтрибут(ИмяФормы, КомпоновщикXML, "РазСтКСчФУм", ДанныеОДеятельности.РазСтКСчФУм, "Ч,19,2");
		Иначе
			КомпоновщикXML_ВывестиНеобязательныйАтрибут(ИмяФормы, КомпоновщикXML, "РазСтКСчФУм",
														ДанныеОДеятельности.РазСтКСчФУм, "Ч,19,2");
		КонецЕсли;
		
		ВыгружатьНулевойАтрибут_РазСтКСчФУв = ЕстьКорректировкаСчетаФактуры
											И НЕ ЗначениеЗаполнено(ДанныеОДеятельности.РазСтКСчФУм)
		                                    И НЕ ВыгружатьНулевойАтрибут_РазСтКСчФУм;
		Если ВыгружатьНулевойАтрибут_РазСтКСчФУв Тогда
			КомпоновщикXML_ВывестиАтрибут(ИмяФормы, КомпоновщикXML, "РазСтКСчФУв", ДанныеОДеятельности.РазСтКСчФУв, "Ч,19,2");
		Иначе
			КомпоновщикXML_ВывестиНеобязательныйАтрибут(ИмяФормы, КомпоновщикXML, "РазСтКСчФУв",
														ДанныеОДеятельности.РазСтКСчФУв, "Ч,19,2");
		КонецЕсли;
		
		ВыгружатьНулевойАтрибут_РазНДСКСчФУм = ВыгружатьНулевойАтрибут_РазСтКСчФУм
										   ИЛИ ЗначениеЗаполнено(ДанныеОДеятельности.РазСтКСчФУм);
		Если ВыгружатьНулевойАтрибут_РазНДСКСчФУм Тогда
			КомпоновщикXML_ВывестиАтрибут(ИмяФормы, КомпоновщикXML, "РазНДСКСчФУм", ДанныеОДеятельности.РазНДСКСчФУм, "Ч,19,2");
		Иначе
			КомпоновщикXML_ВывестиНеобязательныйАтрибут(ИмяФормы, КомпоновщикXML, "РазНДСКСчФУм",
														ДанныеОДеятельности.РазНДСКСчФУм, "Ч,19,2");
		КонецЕсли;
		
		ВыгружатьНулевойАтрибут_РазНДСКСчФУв = ВыгружатьНулевойАтрибут_РазСтКСчФУв
										   ИЛИ ЗначениеЗаполнено(ДанныеОДеятельности.РазСтКСчФУв);
		Если ВыгружатьНулевойАтрибут_РазНДСКСчФУв Тогда
			КомпоновщикXML_ВывестиАтрибут(ИмяФормы, КомпоновщикXML, "РазНДСКСчФУв", ДанныеОДеятельности.РазНДСКСчФУв, "Ч,19,2");
		Иначе
			КомпоновщикXML_ВывестиНеобязательныйАтрибут(ИмяФормы, КомпоновщикXML, "РазНДСКСчФУв",
														ДанныеОДеятельности.РазНДСКСчФУв, "Ч,19,2");
		КонецЕсли;
		
		Если ДанныеОДеятельности.СвПрод <> Неопределено Тогда
			КомпоновщикXML_СоздатьУзел(ИмяФормы, КомпоновщикXML, "СвПрод");
			
			Если ДанныеОДеятельности.СвПрод.Свойство("ИННФЛ") Тогда
				КомпоновщикXML_СоздатьУзел(ИмяФормы, КомпоновщикXML, "СведИП");
				
				КомпоновщикXML_ВывестиАтрибут(ИмяФормы, КомпоновщикXML, "ИННФЛ", ДанныеОДеятельности.СвПрод.ИННФЛ, "Т,12");
				
				КомпоновщикXML_ЗакрытьУзел(ИмяФормы, КомпоновщикXML);
			Иначе
				КомпоновщикXML_СоздатьУзел(ИмяФормы, КомпоновщикXML, "СведЮЛ");
				
				КомпоновщикXML_ВывестиАтрибут(ИмяФормы, КомпоновщикXML, "ИННЮЛ", ДанныеОДеятельности.СвПрод.ИННЮЛ, "Т,10");
				КомпоновщикXML_ВывестиАтрибут(ИмяФормы, КомпоновщикXML, "КПП", ДанныеОДеятельности.СвПрод.КПП, "Т,9");
				
				КомпоновщикXML_ЗакрытьУзел(ИмяФормы, КомпоновщикXML);
			КонецЕсли;
			
			КомпоновщикXML_ЗакрытьУзел(ИмяФормы, КомпоновщикXML);
		КонецЕсли;
		
		КомпоновщикXML_ЗакрытьУзел(ИмяФормы, КомпоновщикXML);
	КонецЦикла;
	
	КомпоновщикXML_ЗакрытьУзел(ИмяФормы, КомпоновщикXML);
	
КонецПроцедуры

Функция ВыгрузкаРаздел11(ИмяФормы, СтруктураРеквизитовФормы, СписокСтраницРаздела, ПараметрыВыгрузки)
	
	ИмяРаздела = "Раздел11";
	
	ДанныеРаздела = ДанныеРазделаНДСДляВыгрузки(ИмяФормы,
												СтруктураРеквизитовФормы,
												СписокСтраницРаздела,
												ПараметрыВыгрузки,
												ИмяРаздела);
	Если ДанныеРаздела = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СтрокиРаздела = ДанныеРаздела.СтрокиРаздела;
	ИтогиРаздела = ДанныеРаздела.ИтогиРаздела;
	
	ИдФайл = СформироватьИдентификаторФайлаВыгрузкиНДС(ИмяФормы, ПараметрыВыгрузки, "NO_NDS.11");
	ПараметрыВыгрузки.Вставить("ИдФайл" + ИмяРаздела, ИдФайл);
	
	КомпоновщикXML = КомпоновщикXML_Новый(ИмяФормы);
	
	КомпоновщикXML_СоздатьУзел(ИмяФормы, КомпоновщикXML, "Файл");
	КомпоновщикXML_ВывестиАтрибут(ИмяФормы, КомпоновщикXML, "xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");
	КомпоновщикXML_ВывестиАтрибут(ИмяФормы, КомпоновщикXML, "ИдФайл", ИдФайл);
	КомпоновщикXML_ВывестиАтрибут(ИмяФормы, КомпоновщикXML, "ВерсПрог", ПараметрыВыгрузки.ВерсПрог);
	
	Если ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2019Кв1") Тогда
		КомпоновщикXML_ВывестиАтрибут(ИмяФормы, КомпоновщикXML, "ВерсФорм", "5.06");
	Иначе// "ФормаОтчета2017Кв1"
		КомпоновщикXML_ВывестиАтрибут(ИмяФормы, КомпоновщикXML, "ВерсФорм", "5.05");
	КонецЕсли;
	
	КомпоновщикXML_СоздатьУзел(ИмяФормы, КомпоновщикXML, "Документ");
	КомпоновщикXML_ВывестиАтрибут(ИмяФормы, КомпоновщикXML, "Индекс", "0000110");
	КомпоновщикXML_ВывестиАтрибут(ИмяФормы, КомпоновщикXML, "НомКорр", ПараметрыВыгрузки.ВидДок);
	Если ПараметрыВыгрузки.ВидДок <> "0" Тогда
		КомпоновщикXML_ВывестиАтрибут(ИмяФормы, КомпоновщикXML, "ПризнСвед11",
									  ПараметрыВыгрузки["АктуальностьСведений" + ИмяРаздела]);
	КонецЕсли;
	
	Если ПараметрыВыгрузки.ВидДок = "0" ИЛИ ПараметрыВыгрузки["АктуальностьСведений" + ИмяРаздела] = "0" Тогда
		
		КомпоновщикXML_СоздатьУзел(ИмяФормы, КомпоновщикXML, "ЖУчПолучСчФ");
		
		Если ПараметрыВыгрузки.ДанныеСегментированы Тогда
			Для Каждого НомерПервойСтрокиСекции Из СтрокиРаздела Цикл
				СтрокиСегментаРаздела = РегламентированнаяОтчетность.СегментДанныхРазделаДекларацииНДС(
				СтруктураРеквизитовФормы.мСохраненныйДок, ИмяРаздела, НомерПервойСтрокиСекции);
				Для Каждого СтрокаДанных ИЗ СтрокиСегментаРаздела Цикл
					ВыгрузитьСтрокуСведенийРаздела11(ИмяФормы, КомпоновщикXML, СтрокаДанных);
				КонецЦикла;
			КонецЦикла;
		Иначе
			Для Каждого СтрокаДанных Из СтрокиРаздела Цикл
				ВыгрузитьСтрокуСведенийРаздела11(ИмяФормы, КомпоновщикXML, СтрокаДанных);
			КонецЦикла;
		КонецЕсли;
		
		КомпоновщикXML_ЗакрытьУзел(ИмяФормы, КомпоновщикXML);
		
	КонецЕсли;
	
	КомпоновщикXML_ЗакрытьУзел(ИмяФормы, КомпоновщикXML);
	КомпоновщикXML_ЗакрытьУзел(ИмяФормы, КомпоновщикXML);
	
	РезультатВыгрузки = Новый Структура;
	РезультатВыгрузки.Вставить("ИмяФайлаВыгрузки", ИдФайл + ".xml");
	РезультатВыгрузки.Вставить("АдресФайлаВыгрузки", КомпоновщикXML_СсылкаНаВременноеХранилище(ИмяФормы, КомпоновщикXML));
	Если ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2019Кв1") Тогда
		РезультатВыгрузки.Вставить("ТипФайлаВыгрузки", "НДС2019" + ИмяРаздела);
	Иначе// "ФормаОтчета2017Кв1"
		РезультатВыгрузки.Вставить("ТипФайлаВыгрузки", "НДС2017" + ИмяРаздела);
	КонецЕсли;
	РезультатВыгрузки.Вставить("КодировкаФайлаВыгрузки", "windows-1251");
	
	Возврат РезультатВыгрузки;
	
КонецФункции

Процедура ВыгрузитьСтрокуСведенийРаздела11(ИмяФормы, КомпоновщикXML, СтрокаДанных)
	
	КомпоновщикXML_СоздатьУзел(ИмяФормы, КомпоновщикXML, "ЖУчПолучСчФСтр");
	
	КомпоновщикXML_ВывестиАтрибут(ИмяФормы, КомпоновщикXML, "НомерПор", СтрокаДанных.НомерПор, "Ч,12");
	
	КомпоновщикXML_ВывестиАтрибут(ИмяФормы, КомпоновщикXML, "НомСчФПрод", СтрокаДанных.НомСчФПрод, "Т,1000");
	КомпоновщикXML_ВывестиАтрибут(ИмяФормы, КомпоновщикXML, "ДатаСчФПрод", СтрокаДанных.ДатаСчФПрод, "Т,10");
	
	КомпоновщикXML_ВывестиНеобязательныйАтрибут(ИмяФормы, КомпоновщикXML, "НомИспрСчФ", СтрокаДанных.НомИспрСчФ, "Ч,3");
	КомпоновщикXML_ВывестиНеобязательныйАтрибут(ИмяФормы, КомпоновщикXML, "ДатаИспрСчФ", СтрокаДанных.ДатаИспрСчФ,
												"Т,10");
	
	КомпоновщикXML_ВывестиНеобязательныйАтрибут(ИмяФормы, КомпоновщикXML, "НомКСчФПрод", СтрокаДанных.НомКСчФПрод,
												"Т,256");
	КомпоновщикXML_ВывестиНеобязательныйАтрибут(ИмяФормы, КомпоновщикXML, "ДатаКСчФПрод", СтрокаДанных.ДатаКСчФПрод,
												"Т,10");
	
	КомпоновщикXML_ВывестиНеобязательныйАтрибут(ИмяФормы, КомпоновщикXML, "НомИспрКСчФ", СтрокаДанных.НомИспрКСчФ, "Ч,3");
	КомпоновщикXML_ВывестиНеобязательныйАтрибут(ИмяФормы, КомпоновщикXML, "ДатаИспрКСчФ", СтрокаДанных.ДатаИспрКСчФ,
												"Т,10");
	
	КомпоновщикXML_ВывестиАтрибут(ИмяФормы, КомпоновщикXML, "КодВидСд", СтрокаДанных.КодВидСд, "Т,1");
	КомпоновщикXML_ВывестиНеобязательныйАтрибут(ИмяФормы, КомпоновщикXML, "ОКВ", СтрокаДанных.ОКВ, "Т,3");
	
	КомпоновщикXML_ВывестиАтрибут(ИмяФормы, КомпоновщикXML, "СтоимТовСчФВс", СтрокаДанных.СтоимТовСчФВс, "Ч,19,2");
	
	ЕстьКорректировкаСчетаФактуры = ЗначениеЗаполнено(СтрокаДанных.НомКСчФПрод)
	                            ИЛИ ЗначениеЗаполнено(СтрокаДанных.ДатаКСчФПрод)
	                            ИЛИ ЗначениеЗаполнено(СтрокаДанных.НомИспрКСчФ)
	                            ИЛИ ЗначениеЗаполнено(СтрокаДанных.ДатаИспрКСчФ);
	
	Если ЕстьКорректировкаСчетаФактуры Тогда
		КомпоновщикXML_ВывестиНеобязательныйАтрибут(ИмяФормы, КомпоновщикXML, "СумНДССчФ", СтрокаДанных.СумНДССчФ, "Ч,19,2");
	Иначе
		КомпоновщикXML_ВывестиАтрибут(ИмяФормы, КомпоновщикXML, "СумНДССчФ", СтрокаДанных.СумНДССчФ, "Ч,19,2");
	КонецЕсли;
	
	ВыгружатьНулевойАтрибут_РазСтКСчФУм = ЕстьКорректировкаСчетаФактуры И НЕ ЗначениеЗаполнено(СтрокаДанных.РазСтКСчФУв);
	Если ВыгружатьНулевойАтрибут_РазСтКСчФУм Тогда
		КомпоновщикXML_ВывестиАтрибут(ИмяФормы, КомпоновщикXML, "РазСтКСчФУм", СтрокаДанных.РазСтКСчФУм, "Ч,19,2");
	Иначе
		КомпоновщикXML_ВывестиНеобязательныйАтрибут(ИмяФормы, КомпоновщикXML, "РазСтКСчФУм", СтрокаДанных.РазСтКСчФУм,
													"Ч,19,2");
	КонецЕсли;
	
	ВыгружатьНулевойАтрибут_РазСтКСчФУв = ЕстьКорректировкаСчетаФактуры И НЕ ЗначениеЗаполнено(СтрокаДанных.РазСтКСчФУм)
	                                    И НЕ ВыгружатьНулевойАтрибут_РазСтКСчФУм;
	Если ВыгружатьНулевойАтрибут_РазСтКСчФУв Тогда
		КомпоновщикXML_ВывестиАтрибут(ИмяФормы, КомпоновщикXML, "РазСтКСчФУв", СтрокаДанных.РазСтКСчФУв, "Ч,19,2");
	Иначе
		КомпоновщикXML_ВывестиНеобязательныйАтрибут(ИмяФормы, КомпоновщикXML, "РазСтКСчФУв", СтрокаДанных.РазСтКСчФУв,
													"Ч,19,2");
	КонецЕсли;
	
	ВыгружатьНулевойАтрибут_РазНДСКСчФУм = ВыгружатьНулевойАтрибут_РазСтКСчФУм
									   ИЛИ ЗначениеЗаполнено(СтрокаДанных.РазСтКСчФУм);
	Если ВыгружатьНулевойАтрибут_РазНДСКСчФУм Тогда
		КомпоновщикXML_ВывестиАтрибут(ИмяФормы, КомпоновщикXML, "РазНДСКСчФУм", СтрокаДанных.РазНДСКСчФУм, "Ч,19,2");
	Иначе
		КомпоновщикXML_ВывестиНеобязательныйАтрибут(ИмяФормы, КомпоновщикXML, "РазНДСКСчФУм", СтрокаДанных.РазНДСКСчФУм,
													"Ч,19,2");
	КонецЕсли;
	
	ВыгружатьНулевойАтрибут_РазНДСКСчФУв = ВыгружатьНулевойАтрибут_РазСтКСчФУв
									   ИЛИ ЗначениеЗаполнено(СтрокаДанных.РазСтКСчФУв);
	Если ВыгружатьНулевойАтрибут_РазНДСКСчФУв Тогда
		КомпоновщикXML_ВывестиАтрибут(ИмяФормы, КомпоновщикXML, "РазНДСКСчФУв", СтрокаДанных.РазНДСКСчФУв, "Ч,19,2");
	Иначе
		КомпоновщикXML_ВывестиНеобязательныйАтрибут(ИмяФормы, КомпоновщикXML, "РазНДСКСчФУв", СтрокаДанных.РазНДСКСчФУв,
													"Ч,19,2");
	КонецЕсли;
	
	Для Инд = 0 По СтрокаДанных.КодВидОпер.Количество() - 1 Цикл
		КомпоновщикXML_СоздатьУзел(ИмяФормы, КомпоновщикXML, "КодВидОпер");
		КомпоновщикXML_ВывестиЗначениеИЗакрытьУзел(ИмяФормы, КомпоновщикXML, СтрокаДанных.КодВидОпер[Инд]);
	КонецЦикла;
	
	Если СтрокаДанных.СвПрод <> Неопределено Тогда
		КомпоновщикXML_СоздатьУзел(ИмяФормы, КомпоновщикXML, "СвПрод");
		
		Если СтрокаДанных.СвПрод.Свойство("ИННФЛ") Тогда
			КомпоновщикXML_СоздатьУзел(ИмяФормы, КомпоновщикXML, "СведИП");
			
			КомпоновщикXML_ВывестиАтрибут(ИмяФормы, КомпоновщикXML, "ИННФЛ", СтрокаДанных.СвПрод.ИННФЛ, "Т,12");
			
			КомпоновщикXML_ЗакрытьУзел(ИмяФормы, КомпоновщикXML);
		Иначе
			КомпоновщикXML_СоздатьУзел(ИмяФормы, КомпоновщикXML, "СведЮЛ");
			
			КомпоновщикXML_ВывестиАтрибут(ИмяФормы, КомпоновщикXML, "ИННЮЛ", СтрокаДанных.СвПрод.ИННЮЛ, "Т,10");
			КомпоновщикXML_ВывестиАтрибут(ИмяФормы, КомпоновщикXML, "КПП", СтрокаДанных.СвПрод.КПП, "Т,9");
			
			КомпоновщикXML_ЗакрытьУзел(ИмяФормы, КомпоновщикXML);
		КонецЕсли;
		
		КомпоновщикXML_ЗакрытьУзел(ИмяФормы, КомпоновщикXML);
	КонецЕсли;
	
	Если СтрокаДанных.СвКомис <> Неопределено Тогда
		КомпоновщикXML_СоздатьУзел(ИмяФормы, КомпоновщикXML, "СвКомис");
		
		Если СтрокаДанных.СвКомис.Свойство("ИННФЛ") Тогда
			КомпоновщикXML_СоздатьУзел(ИмяФормы, КомпоновщикXML, "СведИП");
			
			КомпоновщикXML_ВывестиАтрибут(ИмяФормы, КомпоновщикXML, "ИННФЛ", СтрокаДанных.СвКомис.ИННФЛ, "Т,12");
			
			КомпоновщикXML_ЗакрытьУзел(ИмяФормы, КомпоновщикXML);
		Иначе
			КомпоновщикXML_СоздатьУзел(ИмяФормы, КомпоновщикXML, "СведЮЛ");
			
			КомпоновщикXML_ВывестиАтрибут(ИмяФормы, КомпоновщикXML, "ИННЮЛ", СтрокаДанных.СвКомис.ИННЮЛ, "Т,10");
			КомпоновщикXML_ВывестиАтрибут(ИмяФормы, КомпоновщикXML, "КПП", СтрокаДанных.СвКомис.КПП, "Т,9");
			
			КомпоновщикXML_ЗакрытьУзел(ИмяФормы, КомпоновщикXML);
		КонецЕсли;
		
		КомпоновщикXML_ЗакрытьУзел(ИмяФормы, КомпоновщикXML);
	КонецЕсли;
	
	КомпоновщикXML_ЗакрытьУзел(ИмяФормы, КомпоновщикXML);
	
КонецПроцедуры

Функция ВыгрузкаРаздел12(ИмяФормы, СтруктураРеквизитовФормы, СписокСтраницРаздела, ПараметрыВыгрузки)
	
	ИмяРаздела = "Раздел12";
	
	ДанныеРаздела = ДанныеРазделаНДСДляВыгрузки(ИмяФормы,
												СтруктураРеквизитовФормы,
												СписокСтраницРаздела,
												ПараметрыВыгрузки,
												ИмяРаздела);
	Если ДанныеРаздела = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СтрокиРаздела = ДанныеРаздела.СтрокиРаздела;
	ИтогиРаздела = ДанныеРаздела.ИтогиРаздела;
	
	ИдФайл = СформироватьИдентификаторФайлаВыгрузкиНДС(ИмяФормы, ПараметрыВыгрузки, "NO_NDS.12");
	ПараметрыВыгрузки.Вставить("ИдФайл" + ИмяРаздела, ИдФайл);
	
	КомпоновщикXML = КомпоновщикXML_Новый(ИмяФормы);
	
	КомпоновщикXML_СоздатьУзел(ИмяФормы, КомпоновщикXML, "Файл");
	КомпоновщикXML_ВывестиАтрибут(ИмяФормы, КомпоновщикXML, "xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");
	КомпоновщикXML_ВывестиАтрибут(ИмяФормы, КомпоновщикXML, "ИдФайл", ИдФайл);
	КомпоновщикXML_ВывестиАтрибут(ИмяФормы, КомпоновщикXML, "ВерсПрог", ПараметрыВыгрузки.ВерсПрог);
	
	Если ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2019Кв1") Тогда
		КомпоновщикXML_ВывестиАтрибут(ИмяФормы, КомпоновщикXML, "ВерсФорм", "5.06");
	Иначе// "ФормаОтчета2017Кв1"
		КомпоновщикXML_ВывестиАтрибут(ИмяФормы, КомпоновщикXML, "ВерсФорм", "5.05");
	КонецЕсли;
	
	КомпоновщикXML_СоздатьУзел(ИмяФормы, КомпоновщикXML, "Документ");
	КомпоновщикXML_ВывестиАтрибут(ИмяФормы, КомпоновщикXML, "Индекс", "0000120");
	КомпоновщикXML_ВывестиАтрибут(ИмяФормы, КомпоновщикXML, "НомКорр", ПараметрыВыгрузки.ВидДок);
	
	Если ПараметрыВыгрузки.ВидДок <> "0" Тогда
		КомпоновщикXML_ВывестиАтрибут(ИмяФормы, КомпоновщикXML, "ПризнСвед12",
									  ПараметрыВыгрузки["АктуальностьСведений" + ИмяРаздела]);
	КонецЕсли;
	
	Если ПараметрыВыгрузки.ВидДок = "0" ИЛИ ПараметрыВыгрузки["АктуальностьСведений" + ИмяРаздела] = "0" Тогда
		
		Если ПараметрыВыгрузки.ДанныеСегментированы Тогда
			Для Каждого НомерПервойСтрокиСекции Из СтрокиРаздела Цикл
				СтрокиСегментаРаздела = РегламентированнаяОтчетность.СегментДанныхРазделаДекларацииНДС(
				СтруктураРеквизитовФормы.мСохраненныйДок, ИмяРаздела, НомерПервойСтрокиСекции);
				Для Каждого СтрокаДанных ИЗ СтрокиСегментаРаздела Цикл
					ВыгрузитьСтрокуСведенийРаздела12(ИмяФормы, КомпоновщикXML, СтрокаДанных);
				КонецЦикла;
			КонецЦикла;
		Иначе
			Для Каждого СтрокаДанных Из СтрокиРаздела Цикл
				ВыгрузитьСтрокуСведенийРаздела12(ИмяФормы, КомпоновщикXML, СтрокаДанных);
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	КомпоновщикXML_ЗакрытьУзел(ИмяФормы, КомпоновщикXML);
	КомпоновщикXML_ЗакрытьУзел(ИмяФормы, КомпоновщикXML);
	
	РезультатВыгрузки = Новый Структура;
	РезультатВыгрузки.Вставить("ИмяФайлаВыгрузки", ИдФайл + ".xml");
	РезультатВыгрузки.Вставить("АдресФайлаВыгрузки", КомпоновщикXML_СсылкаНаВременноеХранилище(ИмяФормы, КомпоновщикXML));
	Если ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2019Кв1") Тогда
		РезультатВыгрузки.Вставить("ТипФайлаВыгрузки", "НДС2019" + ИмяРаздела);
	Иначе// "ФормаОтчета2017Кв1"
		РезультатВыгрузки.Вставить("ТипФайлаВыгрузки", "НДС2017" + ИмяРаздела);
	КонецЕсли;
	РезультатВыгрузки.Вставить("КодировкаФайлаВыгрузки", "windows-1251");
	
	Возврат РезультатВыгрузки;
	
КонецФункции

Процедура ВыгрузитьСтрокуСведенийРаздела12(ИмяФормы, КомпоновщикXML, СтрокаДанных)
	
	КомпоновщикXML_СоздатьУзел(ИмяФормы, КомпоновщикXML, "ВыстСчФ_173.5");
	
	КомпоновщикXML_ВывестиАтрибут(ИмяФормы, КомпоновщикXML, "НомСчФ", СтрокаДанных.НомСчФ, "Т,1000");
	КомпоновщикXML_ВывестиАтрибут(ИмяФормы, КомпоновщикXML, "ДатаСчФ", СтрокаДанных.ДатаСчФ, "Т,10");
	
	КомпоновщикXML_ВывестиНеобязательныйАтрибут(ИмяФормы, КомпоновщикXML, "ОКВ", СтрокаДанных.ОКВ, "Т,3");
	
	КомпоновщикXML_ВывестиАтрибут(ИмяФормы, КомпоновщикXML, "СтоимТовБНалВс", СтрокаДанных.СтоимТовБНалВс, "Ч,19,2");
	КомпоновщикXML_ВывестиАтрибут(ИмяФормы, КомпоновщикXML, "СумНалПокуп",    СтрокаДанных.СумНалПокуп,    "Ч,19,2");
	КомпоновщикXML_ВывестиАтрибут(ИмяФормы, КомпоновщикXML, "СтоимТовСНалВс", СтрокаДанных.СтоимТовСНалВс, "Ч,19,2");
	
	Если СтрокаДанных.СвПокуп <> Неопределено Тогда
		КомпоновщикXML_СоздатьУзел(ИмяФормы, КомпоновщикXML, "СвПокуп");
		
		Если СтрокаДанных.СвПокуп.Свойство("ИННФЛ") Тогда
			КомпоновщикXML_СоздатьУзел(ИмяФормы, КомпоновщикXML, "СведИП");
			
			КомпоновщикXML_ВывестиАтрибут(ИмяФормы, КомпоновщикXML, "ИННФЛ", СтрокаДанных.СвПокуп.ИННФЛ, "Т,12");
			
			КомпоновщикXML_ЗакрытьУзел(ИмяФормы, КомпоновщикXML);
		Иначе
			КомпоновщикXML_СоздатьУзел(ИмяФормы, КомпоновщикXML, "СведЮЛ");
			
			КомпоновщикXML_ВывестиАтрибут(ИмяФормы, КомпоновщикXML, "ИННЮЛ", СтрокаДанных.СвПокуп.ИННЮЛ, "Т,10");
			КомпоновщикXML_ВывестиАтрибут(ИмяФормы, КомпоновщикXML, "КПП", СтрокаДанных.СвПокуп.КПП, "Т,9");
			
			КомпоновщикXML_ЗакрытьУзел(ИмяФормы, КомпоновщикXML);
		КонецЕсли;
		
		КомпоновщикXML_ЗакрытьУзел(ИмяФормы, КомпоновщикXML);
	КонецЕсли;
	
	КомпоновщикXML_ЗакрытьУзел(ИмяФормы, КомпоновщикXML);
	
КонецПроцедуры

Функция ДанныеРазделаНДСДляВыгрузки(ИмяФормы,
									СтруктураРеквизитовФормы,
									СписокСтраницРаздела,
									ПараметрыВыгрузки,
									ИмяРаздела)
	
	ДанныеРаздела = Неопределено;
	
	Если ПараметрыВыгрузки.ДанныеСегментированы Тогда
		СекцииРаздела = СписокСекцийРазделаИзРегистра(ИмяФормы, ИмяРаздела, СписокСтраницРаздела, СтруктураРеквизитовФормы);
		
		Если СекцииРаздела.Количество() > 0 Тогда
			ДанныеРаздела = Новый Структура();
			ДанныеРаздела.Вставить("СтрокиРаздела", СекцииРаздела.ВыгрузитьКолонку("НомерПервойСтроки"));
			ДанныеРаздела.Вставить("ИтогиРаздела", РегламентированнаяОтчетность.ИтогиРазделаДекларацииНДС(
				СтруктураРеквизитовФормы.мСохраненныйДок, ИмяРаздела));
		КонецЕсли;
		
	Иначе
		ЗаписьРегистраСведений = РегистрыСведений.ДополнительныеФайлыРегламентированныхОтчетов.СоздатьМенеджерЗаписи();
		ЗаписьРегистраСведений.РегламентированныйОтчет = СтруктураРеквизитовФормы.мСохраненныйДок;
		ЗаписьРегистраСведений.ВидДополнительногоФайла = "Данные" + ИмяРаздела;
		
		ЗаписьРегистраСведений.Прочитать();
		
		Если ЗначениеЗаполнено(ЗаписьРегистраСведений.ВидДополнительногоФайла) Тогда
			Данные = ЗаписьРегистраСведений.СодержимоеФайла.Получить();
			Если Данные.Записи.Количество() > 0 Тогда
				ДанныеРаздела = Новый Структура();
				ДанныеРаздела.Вставить("СтрокиРаздела", Данные.Записи);
				Если Данные.Свойство("Итоги") Тогда
					ДанныеРаздела.Вставить("ИтогиРаздела", Данные.Итоги);
				Иначе
					ДанныеРаздела.Вставить("ИтогиРаздела", Неопределено);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ДанныеРаздела;
	
КонецФункции

Функция ЗаменитьСимволыРазметки(ИмяФормы, Знач ПредставлениеЗначения)
	
	ПредставлениеЗначения = СтрЗаменить(ПредставлениеЗначения, "&", "&amp;");
	ПредставлениеЗначения = СтрЗаменить(ПредставлениеЗначения, "<", "&lt;");
	ПредставлениеЗначения = СтрЗаменить(ПредставлениеЗначения, ">", "&gt;");
	ПредставлениеЗначения = СтрЗаменить(ПредставлениеЗначения, """", "&quot;");
	ПредставлениеЗначения = СтрЗаменить(ПредставлениеЗначения, "'", "&apos;");
	
	Возврат ПредставлениеЗначения;
	
КонецФункции

Функция СформироватьИдентификаторФайлаВыгрузкиНДС(ИмяФормы, ПараметрыВыгрузки, ПрефиксИмени)
	
	ИдентификаторФайла = ПрефиксИмени
	+ "_" + ?(ЗначениеЗаполнено(ПараметрыВыгрузки.КодИФНСПосредника),
			ПараметрыВыгрузки.КодИФНСПосредника,
			ПараметрыВыгрузки.КодИФНС)
	+ "_" + ПараметрыВыгрузки.КодИФНС
	+ "_" + ?(ПараметрыВыгрузки.Свойство("ЭтоПБОЮЛ") И ПараметрыВыгрузки.ЭтоПБОЮЛ,
			СокрЛП(ПараметрыВыгрузки.ИННОрг),
			СокрЛП(ПараметрыВыгрузки.ИННОрг) + СокрЛП(ПараметрыВыгрузки.КППОрг))
	+ "_" + Формат(ТекущаяДатаСеанса(), "ДФ=ггггММдд")
	+ "_" + Строка(Новый УникальныйИдентификатор);
	
	Возврат ИдентификаторФайла;
	
КонецФункции

Функция КомпоновщикXML_Новый(ИмяФормы)
	
	КомпоновщикXML = Новый Структура;
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("xml");
	ЗаписьТекста = Новый ЗаписьТекста(ИмяВременногоФайла, "windows-1251");
	ЗаписьТекста.Записать("<?xml version=""1.0"" encoding=""windows-1251""?>");
	
	КомпоновщикXML.Вставить("ИмяФайла", ИмяВременногоФайла);
	КомпоновщикXML.Вставить("ЗаписьТекста", ЗаписьТекста);
	КомпоновщикXML.Вставить("СтэкУзлов", Новый Массив);
	КомпоновщикXML.Вставить("НовыйУзелЗакрыт", Истина);
	КомпоновщикXML.Вставить("Табуляция", "");
	
	Возврат КомпоновщикXML;
	
КонецФункции

Процедура КомпоновщикXML_СоздатьУзел(ИмяФормы, КомпоновщикXML, ИмяУзла)
	
	Если НЕ КомпоновщикXML.НовыйУзелЗакрыт Тогда
		КомпоновщикXML.ЗаписьТекста.Записать(">");
		КомпоновщикXML.Табуляция = КомпоновщикXML.Табуляция + Символы.Таб;
	КонецЕсли;
	
	КомпоновщикXML.СтэкУзлов.Вставить(0, ИмяУзла);
	КомпоновщикXML.ЗаписьТекста.Записать(Символы.ПС + КомпоновщикXML.Табуляция + "<" + ИмяУзла);
	КомпоновщикXML.НовыйУзелЗакрыт = Ложь;
	
КонецПроцедуры

Процедура КомпоновщикXML_ВывестиАтрибут(ИмяФормы, КомпоновщикXML, ИмяАтрибута, ЗначениеАтрибута, ТипАтрибута = "Т")
	
	ОписаниеТипаАтрибута = СтрРазделить(ТипАтрибута, ",");
	
	Если ОписаниеТипаАтрибута[0] = "Д" Тогда
		ПредставлениеЗначения = Формат(ЗначениеАтрибута, "ДФ=dd.MM.yyyy");
		
	ИначеЕсли ОписаниеТипаАтрибута[0] = "Т" Тогда
		ПредставлениеЗначения = СокрЛП(ЗначениеАтрибута);
		ПредставлениеЗначения = ЗаменитьСимволыРазметки(ИмяФормы, ПредставлениеЗначения);
		Если ОписаниеТипаАтрибута.Количество() >= 2 Тогда
			МаксимальнаяДлина = Число(ОписаниеТипаАтрибута[1]);
			ПредставлениеЗначения = Лев(ПредставлениеЗначения, МаксимальнаяДлина);
		КонецЕсли;
		
	ИначеЕсли ОписаниеТипаАтрибута[0] = "Ч" Тогда
		СтрокаФормата = "ЧРД=.;ЧН=0;ЧГ=;";
		
		Если ОписаниеТипаАтрибута.Количество() >= 2 Тогда
			РазмерностьПолная = Число(ОписаниеТипаАтрибута[1]);
			СтрокаФормата = СтрокаФормата + "ЧЦ=" + Формат(РазмерностьПолная, "ЧГ=") + ";";
		КонецЕсли;
		
		Если ОписаниеТипаАтрибута.Количество() >= 3 Тогда
			РазмерностьДробнойЧасти = Число(ОписаниеТипаАтрибута[2]);
			СтрокаФормата = СтрокаФормата + "ЧДЦ=" + Формат(РазмерностьДробнойЧасти, "ЧГ=") + ";";
		КонецЕсли;
		
		ПредставлениеЗначения = Формат(ЗначениеАтрибута, СтрокаФормата);
		
	Иначе
		ПредставлениеЗначения = СокрЛП(ЗначениеАтрибута);
	КонецЕсли;
	
	КомпоновщикXML.ЗаписьТекста.Записать(" " + ИмяАтрибута + "=""" + ПредставлениеЗначения + """");
	
КонецПроцедуры

Процедура КомпоновщикXML_ВывестиНеобязательныйАтрибут(ИмяФормы,
													  КомпоновщикXML,
													  ИмяАтрибута,
													  ЗначениеАтрибута,
													  ТипАтрибута)
	
	Если ЗначениеЗаполнено(ЗначениеАтрибута) Тогда
		КомпоновщикXML_ВывестиАтрибут(ИмяФормы, КомпоновщикXML, ИмяАтрибута, ЗначениеАтрибута, ТипАтрибута);
	КонецЕсли;
	
КонецПроцедуры

Процедура КомпоновщикXML_ВывестиНеобязательныйМножественныйЭлемент(ИмяФормы,
																   КомпоновщикXML,
																   ИмяЭлемента,
																   ЗначениеЭлемента,
																   ТипЭлемента)
	
	Если ЗначениеЗаполнено(ЗначениеЭлемента) Тогда
		КомпоновщикXML_ВывестиМножественныйЭлемент(ИмяФормы, КомпоновщикXML, ИмяЭлемента, ЗначениеЭлемента, ТипЭлемента);
	КонецЕсли;
	
КонецПроцедуры

Процедура КомпоновщикXML_ВывестиМножественныйЭлемент(ИмяФормы,
													 КомпоновщикXML,
													 ИмяЭлемента,
													 ЗначениеЭлемента,
													 ТипЭлемента)
	
	ОписаниеТипаАтрибута = СтрРазделить(ТипЭлемента, ",");
	
	Если ОписаниеТипаАтрибута[0] = "Т" Тогда
		ПредставлениеЗначения = СокрЛП(ЗначениеЭлемента);
		ПредставлениеЗначения = ЗаменитьСимволыРазметки(ИмяФормы, ПредставлениеЗначения);
		Если ОписаниеТипаАтрибута.Количество() >= 2 Тогда
			МаксимальнаяДлина = Число(ОписаниеТипаАтрибута[1]);
			ПредставлениеЗначения = Лев(ПредставлениеЗначения, МаксимальнаяДлина);
		КонецЕсли;
	Иначе
		ПредставлениеЗначения = СокрЛП(ЗначениеЭлемента);
	КонецЕсли;
	
	КомпоновщикXML_СоздатьУзел(ИмяФормы, КомпоновщикXML, ИмяЭлемента);
	КомпоновщикXML_ВывестиЗначениеИЗакрытьУзел(ИмяФормы, КомпоновщикXML, ПредставлениеЗначения);
	
КонецПроцедуры

Процедура КомпоновщикXML_ВывестиЗначениеИЗакрытьУзел(ИмяФормы, КомпоновщикXML, Значение)
	
	КомпоновщикXML.ЗаписьТекста.Записать(">" + Значение + "</" + КомпоновщикXML.СтэкУзлов[0] + ">");
	КомпоновщикXML.СтэкУзлов.Удалить(0);
	КомпоновщикXML.НовыйУзелЗакрыт = Истина;
	
КонецПроцедуры

Процедура КомпоновщикXML_ЗакрытьУзел(ИмяФормы, КомпоновщикXML)
	
	Если КомпоновщикXML.НовыйУзелЗакрыт Тогда
		КомпоновщикXML.Табуляция = Сред(КомпоновщикXML.Табуляция, 2);
		КомпоновщикXML.ЗаписьТекста.Записать(
		Символы.ПС + КомпоновщикXML.Табуляция + "</" + КомпоновщикXML.СтэкУзлов[0] + ">");
	Иначе
		КомпоновщикXML.ЗаписьТекста.Записать("/>");
		КомпоновщикXML.НовыйУзелЗакрыт = Истина;
	КонецЕсли;
	
	КомпоновщикXML.СтэкУзлов.Удалить(0);
	
КонецПроцедуры

Функция КомпоновщикXML_СсылкаНаВременноеХранилище(ИмяФормы, КомпоновщикXML)
	
	КомпоновщикXML.ЗаписьТекста.Закрыть();
	КомпоновщикXML.ЗаписьТекста = Неопределено;
	
	ФайлВыгрузки = Новый ДвоичныеДанные(КомпоновщикXML.ИмяФайла);
	
	АдресВХранилище = ПоместитьВоВременноеХранилище(ФайлВыгрузки, Новый УникальныйИдентификатор);
	
	УдалитьФайлы(КомпоновщикXML.ИмяФайла);
	
	Возврат АдресВХранилище;
	
КонецФункции

Процедура ЗаполнитьСведенияОРазделах8_12(ИмяФормы, ДеревоВыгрузки, ПараметрыВыгрузки)
	
	УзелНДС = ДеревоВыгрузки.Строки.Найти("НДС", "Код", Истина);
	
	Если УзелНДС = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПризнакиЗаполненностиРазделов8_12 = Новый Структура;
	ПризнакиЗаполненностиРазделов8_12.Вставить("ПризнНал8",  "0");
	ПризнакиЗаполненностиРазделов8_12.Вставить("ПризнНал81", "0");
	ПризнакиЗаполненностиРазделов8_12.Вставить("ПризнНал9",  "0");
	ПризнакиЗаполненностиРазделов8_12.Вставить("ПризнНал91", "0");
	ПризнакиЗаполненностиРазделов8_12.Вставить("ПризнНал10", "0");
	ПризнакиЗаполненностиРазделов8_12.Вставить("ПризнНал11", "0");
	ПризнакиЗаполненностиРазделов8_12.Вставить("ПризнНал12", "0");
	
	ЕстьРазделы8_12 = Ложь;
	
	ИмяФайлаСведенийРаздела = Неопределено;
	
	УзелКнигаПокуп = ПолучитьПодчиненныйЭлемент(ИмяФормы, УзелНДС, "КнигаПокуп");
	Если ПараметрыВыгрузки.Свойство("ИдФайлРаздел8", ИмяФайлаСведенийРаздела) Тогда
		ЗадатьЗначениеЭлемента(ИмяФормы, УзелКнигаПокуп, "НаимКнПок", ИмяФайлаСведенийРаздела + ".xml");
		ПризнакиЗаполненностиРазделов8_12.Вставить("ПризнНал8", "1");
		ЕстьРазделы8_12 = Истина;
	Иначе
		РегламентированнаяОтчетность.УдалитьУзел(УзелКнигаПокуп);
	КонецЕсли;
	
	УзелКнигаПокупДЛ = ПолучитьПодчиненныйЭлемент(ИмяФормы, УзелНДС, "КнигаПокупДЛ");
	Если ПараметрыВыгрузки.Свойство("ИдФайлРаздел8_Прил1", ИмяФайлаСведенийРаздела) Тогда
		ЗадатьЗначениеЭлемента(ИмяФормы, УзелКнигаПокупДЛ, "НаимКнПокДЛ", ИмяФайлаСведенийРаздела + ".xml");
		ПризнакиЗаполненностиРазделов8_12.Вставить("ПризнНал81", "1");
		ЕстьРазделы8_12 = Истина;
	Иначе
		РегламентированнаяОтчетность.УдалитьУзел(УзелКнигаПокупДЛ);
	КонецЕсли;
	
	УзелКнигаПрод = ПолучитьПодчиненныйЭлемент(ИмяФормы, УзелНДС, "КнигаПрод");
	Если ПараметрыВыгрузки.Свойство("ИдФайлРаздел9", ИмяФайлаСведенийРаздела) Тогда
		ЗадатьЗначениеЭлемента(ИмяФормы, УзелКнигаПрод, "НаимКнПрод", ИмяФайлаСведенийРаздела + ".xml");
		ПризнакиЗаполненностиРазделов8_12.Вставить("ПризнНал9", "1");
		ЕстьРазделы8_12 = Истина;
	Иначе
		РегламентированнаяОтчетность.УдалитьУзел(УзелКнигаПрод);
	КонецЕсли;
	
	УзелКнигаПродДЛ = ПолучитьПодчиненныйЭлемент(ИмяФормы, УзелНДС, "КнигаПродДЛ");
	Если ПараметрыВыгрузки.Свойство("ИдФайлРаздел9_Прил1", ИмяФайлаСведенийРаздела) Тогда
		ЗадатьЗначениеЭлемента(ИмяФормы, УзелКнигаПродДЛ, "НаимКнПродДЛ", ИмяФайлаСведенийРаздела + ".xml");
		ПризнакиЗаполненностиРазделов8_12.Вставить("ПризнНал91", "1");
		ЕстьРазделы8_12 = Истина;
	Иначе
		РегламентированнаяОтчетность.УдалитьУзел(УзелКнигаПродДЛ);
	КонецЕсли;
	
	УзелЖУчВыстСчФ = ПолучитьПодчиненныйЭлемент(ИмяФормы, УзелНДС, "ЖУчВыстСчФ");
	Если ПараметрыВыгрузки.Свойство("ИдФайлРаздел10", ИмяФайлаСведенийРаздела) Тогда
		ЗадатьЗначениеЭлемента(ИмяФормы, УзелЖУчВыстСчФ, "НаимЖУчВыстСчФ", ИмяФайлаСведенийРаздела + ".xml");
		ПризнакиЗаполненностиРазделов8_12.Вставить("ПризнНал10", "1");
		ЕстьРазделы8_12 = Истина;
	Иначе
		РегламентированнаяОтчетность.УдалитьУзел(УзелЖУчВыстСчФ);
	КонецЕсли;
	
	УзелЖУчПолучСчФ = ПолучитьПодчиненныйЭлемент(ИмяФормы, УзелНДС, "ЖУчПолучСчФ");
	Если ПараметрыВыгрузки.Свойство("ИдФайлРаздел11", ИмяФайлаСведенийРаздела) Тогда
		ЗадатьЗначениеЭлемента(ИмяФормы, УзелЖУчПолучСчФ, "НаимЖУчПолучСчФ", ИмяФайлаСведенийРаздела + ".xml");
		ПризнакиЗаполненностиРазделов8_12.Вставить("ПризнНал11", "1");
		ЕстьРазделы8_12 = Истина;
	Иначе
		РегламентированнаяОтчетность.УдалитьУзел(УзелЖУчПолучСчФ);
	КонецЕсли;
	
	УзелВыстСчФ_173_5 = ПолучитьПодчиненныйЭлемент(ИмяФормы, УзелНДС, "ВыстСчФ_173.5");
	Если ПараметрыВыгрузки.Свойство("ИдФайлРаздел12", ИмяФайлаСведенийРаздела) Тогда
		ЗадатьЗначениеЭлемента(ИмяФормы, УзелВыстСчФ_173_5, "НаимВыстСчФ_173.5", ИмяФайлаСведенийРаздела + ".xml");
		ПризнакиЗаполненностиРазделов8_12.Вставить("ПризнНал12", "1");
		ЕстьРазделы8_12 = Истина;
	Иначе
		РегламентированнаяОтчетность.УдалитьУзел(УзелВыстСчФ_173_5);
	КонецЕсли;
	
	Если ЕстьРазделы8_12 Тогда
		ЗадатьЗначениеЭлемента(ИмяФормы, ДеревоВыгрузки, "ПризнНал8-12", "1");
	КонецЕсли;
	
	Для Каждого ИмяПризнакаИЗначение Из ПризнакиЗаполненностиРазделов8_12 Цикл
		УзелПризнакаЗаполненностиРаздела = ПолучитьПодчиненныйЭлемент(ИмяФормы, ДеревоВыгрузки, ИмяПризнакаИЗначение.Ключ);
		Если ЕстьРазделы8_12 Тогда
			ВывестиПоказательВXML(ИмяФормы, УзелПризнакаЗаполненностиРаздела, ИмяПризнакаИЗначение.Значение);
		Иначе
			РегламентированнаяОтчетность.УдалитьУзел(УзелПризнакаЗаполненностиРаздела);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ВыгрузитьДеревоВXML(ИмяФормы, ДеревоВыгрузки, ПараметрыВыгрузки)
	
	ПотокXML = РегламентированнаяОтчетность.СоздатьНовыйПотокXML("windows-1251");
	ЗаписатьУзелДереваВXML(ИмяФормы, ДеревоВыгрузки, ПотокXML, ПараметрыВыгрузки);
	ТекстДляЗаписи = ПотокXML.Закрыть();
	Возврат ТекстДляЗаписи;
	
КонецФункции

Функция ЗаписатьУзелДереваВXML(ИмяФормы, СтрокаДерева, ПотокXML, ПараметрыВыгрузки)
	
	Если ТипЗнч(СтрокаДерева) = Тип("ДеревоЗначений") Тогда
		ПотокXML.ЗаписатьНачалоЭлемента("Файл");
		ПотокXML.ЗаписатьАтрибут("xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");
		Для Каждого Стр Из СтрокаДерева.Строки Цикл
			ЗаписатьУзелДереваВXML(ИмяФормы, Стр, ПотокXML, ПараметрыВыгрузки);
		КонецЦикла;
		ПотокXML.ЗаписатьКонецЭлемента();
	Иначе
		Если СтрокаДерева.Тип = "А" ИЛИ СтрокаДерева.Тип = "A" Тогда
			ПотокXML.ЗаписатьАтрибут(СтрокаДерева.Код, Строка(СтрокаДерева.Значение));
		Иначе
			ПотокXML.ЗаписатьНачалоЭлемента(СтрокаДерева.Код);
			Для Каждого Лист из СтрокаДерева.Строки Цикл
				ЗаписатьУзелДереваВXML(ИмяФормы, Лист, ПотокXML, ПараметрыВыгрузки);
			КонецЦикла;
			ПотокXML.ЗаписатьТекст(Строка(СтрокаДерева.Значение));
			ПотокXML.ЗаписатьКонецЭлемента();
		КонецЕсли;
	КонецЕсли;

КонецФункции

#КонецОбласти

#Область КонтрольНомеровКорректировок

Функция ТекстСообщенияОНепройденномКонтролеНомеровКорректировок(Организация, КодНалоговогоОргана,
	ДатаКонцаПериодаОтчета, ТекущийНомерКорректировки) Экспорт
	
	Если ТекущийНомерКорректировки < 501 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТекстСообщения = "Номер корректировки отправляемого отчета " + Формат(ТекущийНомерКорректировки, "ЧГ=") + ".
	|В программе ";
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Источник", "РегламентированныйОтчетНДС");
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ДатаОкончания", ДатаКонцаПериодаОтчета);
	Запрос.УстановитьПараметр("КодНалоговогоОргана", СокрЛП(КодНалоговогоОргана));
	Запрос.УстановитьПараметр("ТекущийНомер", ТекущийНомерКорректировки);
	
	Запрос.УстановитьПараметр("Тип1", Тип("СправочникСсылка.ВидыОтправляемыхДокументов"));
	
	Типы2 = Новый Массив;
	Типы2.Добавить(Тип("СправочникСсылка.РегламентированныеОтчеты"));
	Типы2.Добавить(Тип("СправочникСсылка.УдалитьРегламентированныеОтчеты"));
	Запрос.УстановитьПараметр("Типы2", Типы2);
	
	Запрос.УстановитьПараметр("Тип3", Тип("СправочникСсылка.НалоговыеОрганы"));
	
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	РегламентированныйОтчет.Вид КАК НомерКорректировки
	|ИЗ
	|	Документ.РегламентированныйОтчет КАК РегламентированныйОтчет
	|ГДЕ
	|	РегламентированныйОтчет.ИсточникОтчета = &Источник
	|	И РегламентированныйОтчет.Организация = &Организация
	|	И РегламентированныйОтчет.КодНалоговогоОргана = &КодНалоговогоОргана
	|	И РАЗНОСТЬДАТ(РегламентированныйОтчет.ДатаОкончания, &ДатаОкончания, ДЕНЬ) = 0
	|	И РегламентированныйОтчет.Вид < &ТекущийНомер
	|	И НЕ РегламентированныйОтчет.ПометкаУдаления
	|ОБЪЕДИНИТЬ ВСЕ
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЭлектронноеПредставление.Версия КАК НомерКорректировки
	|ИЗ
	|	Справочник.ЭлектронныеПредставленияРегламентированныхОтчетов КАК ЭлектронноеПредставление
	|ГДЕ
	|	((ТИПЗНАЧЕНИЯ(ЭлектронноеПредставление.ВидОтчета) = &Тип1
	|	И ЭлектронноеПредставление.ВидОтчета.Источник = &Источник)
	|	ИЛИ (ТИПЗНАЧЕНИЯ(ЭлектронноеПредставление.ВидОтчета) В (&Типы2)
	|	И ЭлектронноеПредставление.ВидОтчета.ИсточникОтчета = &Источник))
	|	И ЭлектронноеПредставление.Организация = &Организация
	|	И (ТИПЗНАЧЕНИЯ(ЭлектронноеПредставление.Получатель) = &Тип3
	|	И ЭлектронноеПредставление.Получатель.Код = &КодНалоговогоОргана)
	|	И РАЗНОСТЬДАТ(ЭлектронноеПредставление.ДатаОкончания, &ДатаОкончания, ДЕНЬ) = 0
	|	И ЭлектронноеПредставление.Версия < &ТекущийНомер
	|	И НЕ ЭлектронноеПредставление.ПометкаУдаления
	|";
	
	Результат = Запрос.Выполнить();
	
	Если НЕ Результат.Пустой() Тогда
		
		НомераКорректировок = Результат.Выгрузить();
		НомераКорректировок.Свернуть("НомерКорректировки");
		НомераКорректировок.Сортировать("НомерКорректировки Возр");
		
		НомераКорректировок = НомераКорректировок.ВыгрузитьКолонку("НомерКорректировки");
		
		ОтсутствующиеНомераКорректировок = Новый Массив;
		
		Для НомСч = 0 По ТекущийНомерКорректировки - 1 Цикл
			Если НомераКорректировок.Найти(НомСч) = Неопределено Тогда
				ОтсутствующиеНомераКорректировок.Добавить(НомСч);
			КонецЕсли;
		КонецЦикла;
		
		Если ОтсутствующиеНомераКорректировок.Количество() = 0 Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		Если ОтсутствующиеНомераКорректировок.Количество() = 1 Тогда
			ТекстСообщения = ТекстСообщения + "не найден отчет по НДС с предыдущим номером корректировки ";
		Иначе
			ТекстСообщения = ТекстСообщения + "не найдены отчеты по НДС с предыдущими номерами корректировок: ";
		КонецЕсли;
		
		ТекстСообщения = ТекстСообщения + ПредставлениеПеречняЦелыхУникальныхЧисел(ОтсутствующиеНомераКорректировок);
		
	Иначе
		
		Если ТекущийНомерКорректировки = 0 Тогда
			Возврат Неопределено;
		ИначеЕсли ТекущийНомерКорректировки = 1 Тогда
			ТекстСообщения = ТекстСообщения + "не найден отчет по НДС с предыдущим номером корректировки 0";
		Иначе
			ТекстСообщения = ТекстСообщения + "не найдены отчеты по НДС с предыдущими номерами корректировок: 0-"
			+ Формат(ТекущийНомерКорректировки - 1, "ЧГ=");
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СтрШаблон(НСтр("ru='%1. %2'"), ТекстСообщения, Символы.ПС
	+ "Для отправки отчета необходимо исправить номер корректировки отправляемого отчета
	|или загрузить в программу отчеты по НДС с недостающими номерами корректировок.");
	
КонецФункции

Функция ПредставлениеПеречняЦелыхУникальныхЧисел(Знач МассивЧисел, Разделитель = ", ", Выводить123Как1_3 = Истина)
	
	Если МассивЧисел.Количество() = 0 Тогда
		Возврат "";
	КонецЕсли;
	
	Результат = "";
	
	Если Выводить123Как1_3 Тогда
		
		ПредЗнач = Неопределено;
		ПредПредЗнач = Неопределено;
		СледЗнач = Неопределено;
		
		НачИнтервала = Неопределено;
		
		Для НомСч = 0 По МассивЧисел.Количество() - 1 Цикл
			
			ТекЗнач = МассивЧисел[НомСч];
			
			ПредЗнач = ?(НомСч = 0, Неопределено, МассивЧисел[НомСч - 1]);
			
			ПредПредЗнач = ?(НомСч = 0 ИЛИ НомСч = 1, Неопределено, МассивЧисел[НомСч - 2]);
			
			СледЗнач = ?(НомСч = МассивЧисел.Количество() - 1, Неопределено, МассивЧисел[НомСч + 1]);
			
			ЭтоВнутренняяЧастьИнтервала
			= ПредЗнач <> Неопределено И СледЗнач <> Неопределено И ПредЗнач + 1 = ТекЗнач И ТекЗнач + 1 = СледЗнач;
			
			ЭтоКонецИнтервала
			= (СледЗнач = Неопределено ИЛИ (СледЗнач <> Неопределено И ТекЗнач + 1 <> СледЗнач))
			И ПредПредЗнач <> Неопределено И ПредЗнач + 1 = ТекЗнач И ПредПредЗнач + 1 = ПредЗнач;
			
			Если ЭтоКонецИнтервала Тогда
				Результат = Результат + "-" + Формат(ТекЗнач, "ЧГ=");
			ИначеЕсли НЕ ЭтоВнутренняяЧастьИнтервала Тогда
				Результат = Результат + ?(Результат = "", "", Разделитель) + Формат(ТекЗнач, "ЧГ=;ЧН=");
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		
		Для НомСч = 0 По МассивЧисел.Количество() - 1 Цикл
			
			ТекЗнач = МассивЧисел[НомСч];
			МассивЧисел[НомСч] = Формат(ТекЗнач, "ЧГ=");
			
		КонецЦикла;
		
		Результат = СтрСоединить(МассивЧисел, Разделитель);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли