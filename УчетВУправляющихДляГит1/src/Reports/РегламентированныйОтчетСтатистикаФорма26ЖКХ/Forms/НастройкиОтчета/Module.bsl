////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

&НаСервере
// Процедура заполняет неизменяемые значения в табличных частях настройки соответствия льгот.
Процедура ЗаполнитьНастройкиСоответствияЛьгот()
	
	СтруктураПараметров = УПЖКХ_ТиповыеМетодыВызовСервера.ХранилищеОбщихНастроекЗагрузить("СтатистикаФорма26_НастройкиОтчета");
	
	Если ТипЗнч(СтруктураПараметров) = Тип("Структура") Тогда
		мГруппыЛьготныхКатегорий = Новый ТаблицаЗначений;
		СтруктураПараметров.Свойство("ТаблицаСоответствияЛьготныхКатегорий", мГруппыЛьготныхКатегорий);
	Иначе
		мГруппыЛьготныхКатегорий = Новый СписокЗначений;
		мГруппыЛьготныхКатегорий.Добавить("ОбязательстваРФ", "обязательствам Российской Федерации");
		мГруппыЛьготныхКатегорий.Добавить("ОбязательстваСубъектовРФ", "обязательствам субъектов Российской Федерации");
		мГруппыЛьготныхКатегорий.Добавить("НПАМестныхОргановСамоуправления",
											"нормативным правовым актам местных органов самоуправления субъекта Российской Федерации");
	КонецЕсли;
		
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("СправочникСсылка.КВП_ЛьготныеКатегории"));
	
	ТаблицаСоответствияЛьготныхКатегорий.Очистить();
	Для Каждого ГруппаЛьготныхКатегорий Из  мГруппыЛьготныхКатегорий Цикл
		НоваяСтрока = ТаблицаСоответствияЛьготныхКатегорий.Добавить();
		Попытка
			НоваяСтрока.ГруппаЛьготныхКатегорий = ГруппаЛьготныхКатегорий.Значение;
			НоваяСтрока.ГруппаЛьготныхКатегорийПредставление = ГруппаЛьготныхКатегорий.Представление;
		Исключение
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ГруппаЛьготныхКатегорий);
		КонецПопытки;
		НоваяСтрока.СписокЛьготныхКатегорий.ТипЗначения = Новый ОписаниеТипов(МассивТипов);
		Если НоваяСтрока.СписокЛьготныхКатегорий.Количество() > 0 Тогда
			НоваяСтрока.СписокЛьготныхКатегорийЗаполнен = Истина;
		Иначе
			НоваяСтрока.СписокЛьготныхКатегорийЗаполнен = Ложь;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьНачальныеНастройкиСоответствияЛьгот()

&НаСервере
// Процедура сохраняет настройки отчета в хранилище.
Процедура СохранитьНастройки()
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ТаблицаСоответствияЛьготныхКатегорий", ТаблицаСоответствияЛьготныхКатегорий.Выгрузить());
	
	УПЖКХ_ТиповыеМетодыВызовСервера.ХранилищеОбщихНастроекСохранить("СтатистикаФорма26_НастройкиОтчета",,
																	СтруктураПараметров);
	
																КонецПроцедуры

&НаСервереБезКонтекста
// Процедура передает заполненяет массив льготных категорий.
//
Процедура ЗаполнитьМассивУникальнымиЗначениямиНаСервере(МассивПриемник, МассивИсточник);
	
	УПЖКХ_ОбщегоНазначенияСервер.ЗаполнитьМассивУникальнымиЗначениями(МассивПриемник, МассивИсточник);
	
КонецПроцедуры // ЗаполнитьМассивУникальнымиЗначениямиНаСервере()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
// Обработчик события "ПриСозданииНаСервере" формы.
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЗаполнитьНастройкиСоответствияЛьгот();
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПередЗакрытием" формы.
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ЗавершениеРаботы Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	Если Модифицированность Тогда
		
		Ответ = Вопрос("Настройки были изменены. Сохранить изменения?", РежимДиалогаВопрос.ДаНетОтмена);
		
		Если Ответ = КодВозвратаДиалога.Да Тогда
			
			СохранитьНастройки();
			
		ИначеЕсли Ответ = КодВозвратаДиалога.Отмена Тогда
			
			Отказ = Истина;
			
		КонецЕсли;
		
	Иначе
		
		Возврат;
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
// Обработчик команды "Сохранить".
Процедура Сохранить(Команда)
	
	СохранитьНастройки();
	
	Модифицированность = Ложь;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля "СписокЛьготныхКатегорий".
//
Процедура СписокЛьготныхКатегорийПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ТаблицаСоответствияУслуг.ТекущиеДанные;
	
	Если НЕ ТекущиеДанные = Неопределено Тогда
		// исключим повторяющиеся льготные категории в выбранном значении
		МассивУникальныхЗначений = Новый Массив;
		
		ВыбранноеЗначение = ТекущиеДанные.СписокЛьготныхКатегорий;
		ЗаполнитьМассивУникальнымиЗначениямиНаСервере(МассивУникальныхЗначений, ВыбранноеЗначение.ВыгрузитьЗначения());
		
		ВыбранноеЗначение.ЗагрузитьЗначения(МассивУникальныхЗначений);
		
		// удалим льготные категории, которые были использованы в других группах
		КоличествоСтрок = ВыбранноеЗначение.Количество();
		Если КоличествоСтрок > 0 Тогда
			ТекущиеДанные.СписокЛьготныхКатегорийЗаполнен = Истина;
		Иначе
			ТекущиеДанные.СписокЛьготныхКатегорийЗаполнен = Ложь;
		КонецЕсли;
		
		Для Индекс = 1 По КоличествоСтрок Цикл
			
			СтрокаКатегории = ВыбранноеЗначение.Получить(КоличествоСтрок - Индекс);
			
			// удалим незаполненные значения
			Если НЕ ЗначениеЗаполнено(СтрокаКатегории.Значение) Тогда
				ВыбранноеЗначение.Удалить(СтрокаКатегории);
			КонецЕсли;
			
			Для Каждого СтрокаГруппы ИЗ ТаблицаСоответствияЛьготныхКатегорий Цикл
				
				Если СтрокаГруппы = ТекущиеДанные Тогда
					Продолжить;
				КонецЕсли;
				
				Если НЕ СтрокаГруппы.СписокЛьготныхКатегорий.НайтиПоЗначению(СтрокаКатегории.Значение) = Неопределено Тогда
					
					УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Льготная категория """ + СтрокаКатегории.Значение + """ указана в категории,
								|меры социальной поддержки которых осуществляются по " + СтрокаГруппы.ГруппаЛьготныхКатегорийПредставление + ".");
					
					ВыбранноеЗначение.Удалить(СтрокаКатегории);
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
	НовоеКоличествоСтрок = Элементы.ТаблицаСоответствияУслуг.ТекущиеДанные.СписокЛьготныхКатегорий.Количество();
	
	Если НовоеКоличествоСтрок > 0 Тогда
		ТекущиеДанные.СписокЛьготныхКатегорийЗаполнен = Истина;
	Иначе
		ТекущиеДанные.СписокЛьготныхКатегорийЗаполнен = Ложь;
	КонецЕсли;
	
КонецПроцедуры
