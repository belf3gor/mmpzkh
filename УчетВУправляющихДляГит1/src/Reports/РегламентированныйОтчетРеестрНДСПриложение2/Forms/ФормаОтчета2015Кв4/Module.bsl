&НаСервере
Перем мОбъектОтчета;

&НаСервере
Перем СохраненныеДанныеОтчета;

&НаКлиенте
Перем ОбработкаКС Экспорт;

&НаСервере
Перем СписокРасшифровкиПоказателей;

&НаСервере
Перем СписокРасшифровкиформулы;

&НаСервере
Перем ДанныеРеестра;

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	// Обход ошибки платформы Параметр сеанса отсутствует или удален.
	ТабличныйДокумент.Очистить();
	
	СформироватьСтруктуруРеквизитовФормы();
	
	СтруктураРеквизитовФормы.мВерсияФормы = "01/10/2015";
	
	СтруктураРеквизитовФормы.мВыбраннаяФорма          = Параметры.мВыбраннаяФорма;
	СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета  = Параметры.мДатаКонцаПериодаОтчета;
	СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета = Параметры.мДатаНачалаПериодаОтчета;
	СтруктураРеквизитовФормы.мПериодичность           = Параметры.мПериодичность;
	СтруктураРеквизитовФормы.мСкопированаФорма        = Параметры.мСкопированаФорма;
	СтруктураРеквизитовФормы.мСохраненныйДок          = Параметры.мСохраненныйДок;
	СтруктураРеквизитовФормы.Организация              = Параметры.Организация;
	
	СоответствиеЕдиницыИзмеренияДелителю = Новый Структура;
	СоответствиеЕдиницыИзмеренияДелителю.Вставить("Окр1", 1);
	СоответствиеЕдиницыИзмеренияДелителю.Вставить("Окр1000", 1000);
	СоответствиеЕдиницыИзмеренияДелителю.Вставить("Окр1000000", 1000000);
	
	СтруктураРеквизитовФормы.СправочникиВидыКонтактнойИнформацииАдресОрганизации
	= РегламентированнаяОтчетность.ВидКонтактнойИнформации("ЮрАдресКонтрагента");
	
	мСтруктураЦветовРаскраски = Новый Структура;
	мСтруктураЦветовРаскраски.Вставить("_0", Новый Цвет(255, 255, 192));
	мСтруктураЦветовРаскраски.Вставить("_4", Новый Цвет(192, 220, 192));
	мСтруктураЦветовРаскраски.Вставить("_5", Новый Цвет(255, 255, 255));
	
	ПорядкиОкругленияОтчетности = Новый Структура;
	ПорядкиОкругленияОтчетности.Вставить("ПеречислениеПорядкиОкругленияОтчетностиОкр1",
		Перечисления.ПорядкиОкругленияОтчетности.Окр1);
	
	ДатаПодписи = ТекущаяДатаСеанса();
	
	Инициализация(Параметры.БезОткрытияФормы);
	
КонецПроцедуры

&НаСервере
Процедура СформироватьСтруктуруРеквизитовФормы()
	
	СтруктураРеквизитовФормы = Новый Структура;
	СтруктураРеквизитовФормы.Вставить("СписокПечатаемыхЛистов");
	СтруктураРеквизитовФормы.Вставить("мПечатныеформы");
	СтруктураРеквизитовФормы.Вставить("мРежимПечати");
	СтруктураРеквизитовФормы.Вставить("ВыводитьСтраницуВТаблДокНаСервере");
	СтруктураРеквизитовФормы.Вставить("НаимТекущегоРаздела");
	СтруктураРеквизитовФормы.Вставить("мАвтоВыборКодов");
	СтруктураРеквизитовФормы.Вставить("мБезОткрытияФормы");
	СтруктураРеквизитовФормы.Вставить("мВерсияФормы");
	СтруктураРеквизитовФормы.Вставить("мЗаписываетсяНовыйДокумент");
	СтруктураРеквизитовФормы.Вставить("мИдГруппы100");
	СтруктураРеквизитовФормы.Вставить("мИдГруппы110");
	СтруктураРеквизитовФормы.Вставить("ДлинаИмениГруппы");
	СтруктураРеквизитовФормы.Вставить("ДлинаИмениГрафы");
	СтруктураРеквизитовФормы.Вставить("ТочностьЕдиницыИзмерения");
	СтруктураРеквизитовФормы.Вставить("ФлажокОтклАвтоРасчет", Ложь);
	СтруктураРеквизитовФормы.Вставить("ВидДокумента");
	СтруктураРеквизитовФормы.Вставить("ИП");
	СтруктураРеквизитовФормы.Вставить("ЕдиницаИзмерения");
	СтруктураРеквизитовФормы.Вставить("мВариант");
	СтруктураРеквизитовФормы.Вставить("мВыбраннаяФорма");
	СтруктураРеквизитовФормы.Вставить("мДатаКонцаПериодаОтчета");
	СтруктураРеквизитовФормы.Вставить("мДатаНачалаПериодаОтчета");
	СтруктураРеквизитовФормы.Вставить("мПериодичность");
	СтруктураРеквизитовФормы.Вставить("мСкопированаФорма");
	СтруктураРеквизитовФормы.Вставить("мСохраненныйДок");
	СтруктураРеквизитовФормы.Вставить("Организация");
	СтруктураРеквизитовФормы.Вставить("НаимОрганизации");
	СтруктураРеквизитовФормы.Вставить("СтрПериодОтчета");
	СтруктураРеквизитовФормы.Вставить("ТекущаяСтрокаРазделовОтчета");
	СтруктураРеквизитовФормы.Вставить("НомераСтрокМногоуровнегоРаздела");
	СтруктураРеквизитовФормы.Вставить("СтруктураМногострочныхЧастей");
	СтруктураРеквизитовФормы.Вставить("СправочникиВидыКонтактнойИнформацииАдресОрганизации");
	СтруктураРеквизитовФормы.Вставить("ИтоговыеСуммыПоКодамОпераций");
	СтруктураРеквизитовФормы.Вставить("ДекларацияНДС");
	СтруктураРеквизитовФормы.Вставить("СведенияОтправкиДеклНДС");
	СтруктураРеквизитовФормы.Вставить("СведенияВыгрузкиДеклНДС");
	СтруктураРеквизитовФормы.Вставить("ТекстДляЗаголовочнойЧасти");
	СтруктураРеквизитовФормы.Вставить("мПроверятьСоотношенияПриПечатиИВыгрузки");
	
КонецПроцедуры

#Область Инициализация

&НаСервере
Процедура Инициализация(БезОткрытияФормы = Ложь) Экспорт
	
	Перем ИсходноеКоличествоСтрокГруппы;
	
	СтруктураРеквизитовФормы.мБезОткрытияФормы = БезОткрытияФормы;
	
	СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный";
	
	// Очистка для случая повторного запуска инициализации,
	// например, при загрузке отчета из файла выгрузки.
	ТабличныйДокумент.Очистить();
	
	ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + СтруктураРеквизитовФормы.НаимТекущегоРаздела));
	
	ИнициализироватьОбычныеРазделы();
	
	ИнициализироватьМногоуровневыеРазделы();
	
	ИнициализироватьМногострочныеЧасти();
	
	ЗаполнитьСтруктуруЗависимыхЯчеекДляАвторасчета();
	
	ФормироватьСтруктуруСтраницОтчета();
	
	ФормироватьСтруктуруСвойствСтраниц();
	
	ЗаполнитьПустыеСтруктурыДанных();
	
	СформироватьДеревоРазделовОтчетаНаСервере();
	
	СтруктураРеквизитовФормы.мАвтоВыборКодов = Ложь;
	
	СтруктураРеквизитовФормы.СписокПечатаемыхЛистов = Новый СписокЗначений;
	СтруктураРеквизитовФормы.мПечатныеформы = Новый СписокЗначений;
	СтруктураРеквизитовФормы.мРежимПечати = Ложь;
	
	СтруктураРеквизитовФормы.ВидДокумента = 0;
	НомерКорректировки = 1;
	
	СведенияОтправкиДеклНДС = Новый Структура;
	СведенияОтправкиДеклНДС.Вставить("ОтправкаДеклНДС", Неопределено);
	СведенияОтправкиДеклНДС.Вставить("ИмяФайлаОтправкиДеклНДС", Неопределено);
	СтруктураРеквизитовФормы.СведенияОтправкиДеклНДС = СведенияОтправкиДеклНДС;
	
	СведенияВыгрузкиДеклНДС = Новый Структура;
	СведенияВыгрузкиДеклНДС.Вставить("ВыгрузкаДеклНДС", Неопределено);
	СведенияВыгрузкиДеклНДС.Вставить("ИмяФайлаВыгрузкиДеклНДС", Неопределено);
	СтруктураРеквизитовФормы.СведенияВыгрузкиДеклНДС = СведенияВыгрузкиДеклНДС;
	
	Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
		Если СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено Тогда
			ВосстановитьСохраненныеДанные();
		Иначе
			СтруктураРеквизитовФормы.ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1;
			СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = 0;
			КопироватьДанныеФормы(мДеревоСтраницОтчета, мДеревоВыбранныхСтраниц);
			СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки = Ложь;
		КонецЕсли;
		Модифицированность = Истина;
	Иначе
		ВосстановитьСохраненныеДанные();
		Если СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено Тогда
			СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено;
			Модифицированность = Истина;
		КонецЕсли;
		Если НЕ БезОткрытияФормы И НЕ СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
			ЗаблокироватьДанныеДляРедактирования(
				СтруктураРеквизитовФормы.мСохраненныйДок, , ЭтаФорма.УникальныйИдентификатор);
		КонецЕсли;
	КонецЕсли;
	
	УстановитьДоступностьОбластей(ЭтаФорма, СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
	ПоказатьПериод();
	
	ЗаполнитьПериодОтчета();
	
	СтруктураРеквизитовФормы.ИП = НЕ РегламентированнаяОтчетностьВызовСервера.ЭтоЮридическоеЛицо(
		СтруктураРеквизитовФормы.Организация);
	
	Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено
		ИЛИ СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено Тогда
		ЗаполнитьСведенияОбОрганизацииНаСервере();
	КонецЕсли;
	
	СтруктураРеквизитовФормы.НаимОрганизации = СтруктураРеквизитовФормы.Организация.Наименование;
	
	Если НЕ БезОткрытияФормы Тогда
		СформироватьСпискиВыбора();
	КонецЕсли;
	
	ОтобразитьНомерКорректировки(ЭтаФорма);
	
	СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
	НомерКорректировки = ?(СтруктураРеквизитовФормы.ВидДокумента = 0, 0, НомерКорректировки);
	ТабличныйДокумент.Области.НомерКорректировки.Значение = Строка(НомерКорректировки);
	ЗаполнитьДатуВЯчейках(ЭтаФорма);
	
	РегламентированнаяОтчетность.ДобавитьКнопкуПрисоединенныеФайлы(ЭтаФорма);
	
	РегламентированнаяОтчетностьКлиентСервер.ПриИнициализацииФормыРегламентированногоОтчета(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьМногострочныеЧасти()
	
	// Идентификаторы многострочных групп.
	СтруктураРеквизитовФормы.мИдГруппы100 = "П10000";
	СтруктураРеквизитовФормы.мИдГруппы110 = "П11000";
	
	// Свойства, общие для всех многострочных групп.
	СтруктураРеквизитовФормы.ДлинаИмениГруппы = 6;
	СтруктураРеквизитовФормы.ДлинаИмениГрафы = 8;
	
	// Структура с описанием свойств каждой группы в отдельности.
	СтруктураМногострочныхЧастей = Новый Структура;
	
	// Группа П10000.
	ИменаГраф = Новый Массив;
	ИменаГраф.Добавить("П1000001");
	ИменаГраф.Добавить("П1000002");
	ИменаГраф.Добавить("П1000003");
	ИменаГраф.Добавить("П1000005");
	ИменаГраф.Добавить("П1000006");
	ИменаГраф.Добавить("П1000007");
	ИменаГраф.Добавить("П1000012");
	ИменаГраф.Добавить("П1000013");
	ИменаПодчиненныхГрупп = Новый Массив;
	ИменаПодчиненныхГрупп.Добавить(СтруктураРеквизитовФормы.мИдГруппы110);
	СтруктураМногострочныхЧастей.Вставить(
		СтруктураРеквизитовФормы.мИдГруппы100, Новый Структура(
		"ИменаГраф,ИсхКолСтрок,УровеньПодчинения,ИменаПодчиненныхГрупп,ИмяГрафыНумерацииСтрок",
		ИменаГраф, 1, 0, ИменаПодчиненныхГрупп, "П1000001"));
	
	// Группа П11000.
	ИменаГраф = Новый Массив;
	ИменаГраф.Добавить("П1100004");
	ИменаГраф.Добавить("П1100008");
	ИменаГраф.Добавить("П1100009");
	ИменаГраф.Добавить("П1100010");
	ИменаГраф.Добавить("П1100011");
	ИменаПодчиненныхГрупп = Новый Массив;
	КолонкиСИзмНижнГраницей = Новый Массив;
	КолонкиСИзмНижнГраницей.Добавить(6);
	СтруктураМногострочныхЧастей.Вставить(
		СтруктураРеквизитовФормы.мИдГруппы110, Новый Структура(
		"ИменаГраф,ИсхКолСтрок,УровеньПодчинения,ИменаПодчиненныхГрупп,КолонкиСИзмНижнГраницей",
		ИменаГраф, 1, 1, ИменаПодчиненныхГрупп, КолонкиСИзмНижнГраницей));
	
	СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей = СтруктураМногострочныхЧастей;
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьМногоуровневыеРазделы()
	
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела = Новый Массив;
	
	// Структура содержит имена и число уровней многоуровневых разделов.
	мСтруктураМногоуровневыхРазделов = Новый Структура;
	мСтруктураМногоуровневыхРазделов.Вставить("Реестр", 1);
	
	ДеревоДанных = Новый ДеревоЗначений;
	ДеревоДанных.Колонки.Добавить("Данные");
	ДеревоДанных.Колонки.Добавить("ДанныеМногострочныхЧастей");
	ДеревоДанных.Колонки.Добавить("АдресТабличногоДокумента");
	
	Для каждого Элем Из мСтруктураМногоуровневыхРазделов Цикл
		
		ИмяРаздела = Элем.Ключ;
		КолУровней = Элем.Значение;
		
		ДеревоДанныхРаздела = ДеревоДанных.Скопировать();
		
		ТекВетка = ДеревоДанныхРаздела;
		
		Для ТекУровень = 0 По КолУровней - 1 Цикл
			ТекВетка = ТекВетка.Строки.Добавить();
			ТекВетка.Данные = Новый Структура;
			ТекВетка.ДанныеМногострочныхЧастей = Новый Структура;
		КонецЦикла;
		
		ИтоговыеСуммыПоКодамОпераций = Новый Массив;
		ИтоговыеСуммыПоКодамОпераций.Добавить(Новый Структура("КодОперации,НалБазаИтого", "", 0));
		СтруктураРеквизитовФормы.ИтоговыеСуммыПоКодамОпераций = ИтоговыеСуммыПоКодамОпераций;
		
		СтруктураРеквизитовФормы.Вставить("АдресВоВрХранилищеДеревоДанных" + ИмяРаздела);
		
		СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяРаздела]
			= ПоместитьВоВременноеХранилище(ДеревоДанныхРаздела, УникальныйИдентификатор);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьОбычныеРазделы()
	
	СтруктураДанныхТитульный = Новый Структура;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПустыеСтруктурыДанных()
	
	СохрТабличныйДокумент = Новый ТабличныйДокумент;
	
	СохрТабличныйДокумент.Вывести(ТабличныйДокумент);
	
	Для Каждого Раздел Из мСвойстваРазделовДекларации.ПолучитьЭлементы() Цикл
		
		// Многоуровневый раздел.
		Если мСтруктураМногоуровневыхРазделов.Свойство(Раздел.ИмяСтраницы) Тогда
			
			ДеревоДанныхРазделУровень0 = ПолучитьИзВременногоХранилища(
				СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + Раздел.ИмяСтраницы]);
			
			Если ДеревоДанныхРазделУровень0.Строки.Количество() = 1 Тогда
				Если ДеревоДанныхРазделУровень0.Строки[0].Данные.Количество() = 0 Тогда
					ТабличныйДокумент.Очистить();
					ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + Раздел.ИмяСтраницы));
					УстановитьНомерПервойСтроки(ЭтаФорма);
					СпрятатьЗначкиУдалитьСтроку();
					СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Очистить();
					СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Добавить(1);
					СохранитьДанныеРаздела(Раздел.ИмяСтраницы);
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(СохрТабличныйДокумент);
	
КонецПроцедуры

&НаСервере
Процедура СпрятатьЗначкиУдалитьСтроку()
	
	Для каждого Обл Из ТабличныйДокумент.Области Цикл
		Если Лев(Обл.Имя, 13) = "УдалитьСтроку" Тогда
			Обл.Гиперссылка = Ложь;
			Обл.Текст = "";
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ФормироватьСтруктуруСтраницОтчета() Экспорт
	
	мДеревоСтраницОтчета.ПолучитьЭлементы().Очистить();
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Титульный";
	СтрокаУровня1.Представление            = "Титульный лист";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Реестр";
	СтрокаУровня1.Представление            = "Реестр";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	
КонецПроцедуры

&НаСервере
Процедура ФормироватьСтруктуруСвойствСтраниц()

	мСвойстваРазделовДекларации.ПолучитьЭлементы().Очистить();
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы = "Титульный";
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы = "Реестр";
	
КонецПроцедуры

&НаСервере
Процедура СформироватьСпискиВыбора()
	
	МакетСоставаПоказателей = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет("СпискиВыбора2015Кв4");
	
	КоллекцияСписковВыбора = Новый Соответствие;
	Для Каждого Область Из МакетСоставаПоказателей.Области Цикл
		Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Строки Тогда
			ВерхОбласти = Область.Верх;
			НизОбласти = Область.Низ;
			ТаблСписка = Новый ТаблицаЗначений;
			ТаблСписка.Колонки.Добавить("Код",,,
				МакетСоставаПоказателей.Область(ВерхОбласти, 1, ВерхОбласти, 1).ШиринаКолонки);
			ТаблСписка.Колонки.Добавить("Название",,,
				МакетСоставаПоказателей.Область(ВерхОбласти, 2, ВерхОбласти, 2).ШиринаКолонки);
			ТаблСписка.Колонки.Добавить("РезультатПроверки",,, 0);
			Для НомСтр = ВерхОбласти По НизОбласти Цикл
				КодПоказателя = СокрП(МакетСоставаПоказателей.Область(НомСтр, 1).Текст);
				Если КодПоказателя <> "###" Тогда
					НовСтрока = ТаблСписка.Добавить();
					НовСтрока.Код = КодПоказателя;
					НовСтрока.Название = СокрП(МакетСоставаПоказателей.Область(НомСтр, 2).Текст);
					НовСтрока.РезультатПроверки = СокрП(МакетСоставаПоказателей.Область(НомСтр, 3).Текст);
				КонецЕсли;
			КонецЦикла;
			КоллекцияСписковВыбора.Вставить(Область.Имя, ТаблСписка);
		КонецЕсли;
	КонецЦикла;
	
	СвойстваПоказателей.Очистить();
	
	//Титульный.
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "Период", 2, ,
		"Выбор кода периода", КоллекцияСписковВыбора["КодыНалоговыхПериодов"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "КодФормыРеорганизации", 1, ,
		"Выбор кода формы реорганизации (ликвидации)", КоллекцияСписковВыбора["КодыФормыРеорганизации"]);
	
	//Реестр.
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "КодОперации", 7, ,
		"Выбор кода операции", КоллекцияСписковВыбора["КодыОпераций"]);
	
КонецПроцедуры

&НаСервере
Процедура ПоказатьПериод()
	
	СтруктураРеквизитовФормы.СтрПериодОтчета
	= ПредставлениеПериода(НачалоДня(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета),
	КонецДня(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета), "ФП = Истина");
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПериодОтчета()
	
	Если НЕ ЗначениеЗаполнено(ТабличныйДокумент.Области.Период.Значение)
		ИЛИ СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено Тогда
		СоответствиеНомераМесяцаКодуОтчетногоПериода = Новый Соответствие;
		СоответствиеНомераМесяцаКодуОтчетногоПериода.Вставить(3,  "21");
		СоответствиеНомераМесяцаКодуОтчетногоПериода.Вставить(6,  "22");
		СоответствиеНомераМесяцаКодуОтчетногоПериода.Вставить(9,  "23");
		СоответствиеНомераМесяцаКодуОтчетногоПериода.Вставить(12, "24");
		
		КодОтчетногоПериода
		= СоответствиеНомераМесяцаКодуОтчетногоПериода[Месяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета)];
		
		ТабличныйДокумент.Области.Период.Значение = КодОтчетногоПериода;
	КонецЕсли;
	
	ТабличныйДокумент.Области.ОтчетГод.Значение = Формат(
		Год(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета), "ЧГ=");
	
КонецПроцедуры

#КонецОбласти

#Область СохранениеДанныхОтчета

&НаКлиенте
Процедура СохранитьОтчет(Команда)
	
	Если Элементы.РазделыОтчета.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СохранитьНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНаКлиенте(Автосохранение = Ложь, ВыполняемоеОповещение = Неопределено) Экспорт
	
	Вариант = СтруктураРеквизитовФормы.ВидДокумента * НомерКорректировки;
	
	Если СтруктураДанныхТитульный.Количество() = 0
	 ИЛИ СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
		
		СтруктураДанныхТитульный.Вставить("НалоговыйОрган", ТабличныйДокумент.Области.НалоговыйОрган.Значение);
		СтруктураДанныхТитульный.Вставить("КПП", ТабличныйДокумент.Области.КПП.Значение);
		
	КонецЕсли;
	
	КодИФНС = СтруктураДанныхТитульный.НалоговыйОрган;
	КПП = СтруктураДанныхТитульный.КПП;
	
	Если НЕ РегламентированнаяОтчетностьКлиент.ПриЗаписиРегламентированногоОтчетаНаКлиенте(ЭтаФорма, КодИФНС, Автосохранение, Вариант) Тогда
		Возврат;
	КонецЕсли;
	
	ПодобныйОтчетСуществует = Ложь;
	ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки = Ложь;
	
	Если Элементы.РазделыОтчета.ТекущиеДанные = Неопределено Тогда
		НаименованиеТекущегоРаздела = СтруктураРеквизитовФормы.НаимТекущегоРаздела;
	Иначе
		НаименованиеТекущегоРаздела = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
	КонецЕсли;
	
	РезультатСохранения = ПередСохранением(КодИФНС, КПП, ПодобныйОтчетСуществует, Вариант, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, Автосохранение, НаименованиеТекущегоРаздела);
	
	ВидДокументаНомерКорректировкиИзменен = Неопределено;
	
	Если ПодобныйОтчетСуществует И Автосохранение Тогда
		Возврат;
	КонецЕсли;
	
	НуженВопросПередСохранением = (ПодобныйОтчетСуществует ИЛИ ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки);
	
	Если НуженВопросПередСохранением Тогда
		
		СохранитьНаКлиентеСВопросом(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, ПодобныйОтчетСуществует, КодИФНС, КПП);
		
	Иначе
		
		ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНаКлиентеСВопросом(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, ПодобныйОтчетСуществует, КодИФНС, КПП)
	
	Если ПодобныйОтчетСуществует Тогда
		
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(КодВозвратаДиалога.Да, "Сохранить");
		Кнопки.Добавить(КодВозвратаДиалога.Нет, "Отмена");
		
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Отчет с видом %1 уже существует.
			|Сохранить отчет с таким же видом?'"), ?(Вариант = 0, """Первичный""", """Корректирующий/" + Вариант + """"));
		ДополнительныеПараметры = Новый Структура("Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, КодИФНС, КПП", Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, КодИФНС, КПП);
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросСохранитьОтчетСТакимЖеВидомЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, Кнопки, , Кнопки.Получить(1).Значение);
		
	Иначе
		
		СохранитьНаКлиентеСВопросомПродолжение(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки,КодИФНС, КПП);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросСохранитьОтчетСТакимЖеВидомЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Автосохранение = ДополнительныеПараметры.Автосохранение;
	Вариант = ДополнительныеПараметры.Вариант;
	ВыполняемоеОповещение = ДополнительныеПараметры.ВыполняемоеОповещение;
	КодИФНС = ДополнительныеПараметры.КодИФНС;
	КПП = ДополнительныеПараметры.КПП;
	ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки = ДополнительныеПараметры.ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки;
	
	Ответ = РезультатВопроса;
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	СохранитьНаКлиентеСВопросомПродолжение(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки,КодИФНС, КПП);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНаКлиентеСВопросомПродолжение(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, КодИФНС, КПП)
	
	Если ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки Тогда
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("ВидОтчета", Вариант);
		
		ФормаВопроса = РегламентированнаяОтчетностьКлиент.ПолучитьОбщуюФормуПоИмени("ВопросПриИзмененииВидаДокументаНомераКорректировки", ПараметрыФормы);
		ФормаВопроса.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		ДополнительныеПараметры = Новый Структура("Автосохранение, Вариант, ВыполняемоеОповещение, КодИФНС, КПП", Автосохранение, Вариант, ВыполняемоеОповещение,КодИФНС, КПП );
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросПриИзмененииВидаДокументаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ФормаВопроса.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
		ФормаВопроса.Открыть();
	Иначе
		Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Сохраняется %1...'"), ЭтаФорма.Заголовок), , , БиблиотекаКартинок.Записать);
		РезультатСохранения = Сохранить(Автосохранение, КодИФНС, КПП, Вариант, Неопределено, Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
		ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПриИзмененииВидаДокументаЗавершение(КодВозврата, ДополнительныеПараметры) Экспорт
	
	Автосохранение = ДополнительныеПараметры.Автосохранение;
	Вариант = ДополнительныеПараметры.Вариант;
	ВыполняемоеОповещение = ДополнительныеПараметры.ВыполняемоеОповещение;
	КодИФНС = ДополнительныеПараметры.КодИФНС;
	КПП = ДополнительныеПараметры.КПП;
	Если КодВозврата = КодВозвратаДиалога.Да
		ИЛИ КодВозврата = КодВозвратаДиалога.Нет Тогда
		ВидДокументаНомерКорректировкиИзменен = ?(КодВозврата = КодВозвратаДиалога.Да, Истина, Ложь);
	Иначе
		Возврат;
	КонецЕсли;
	
	Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Сохраняется %1...'"), ЭтаФорма.Заголовок), , , БиблиотекаКартинок.Записать);
	РезультатСохранения = Сохранить(Автосохранение, КодИФНС, КПП, Вариант, ВидДокументаНомерКорректировкиИзменен, Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
	ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения)
	
	КлючУникальности = СтруктураРеквизитовФормы.мСохраненныйДок;
	
	Если РезультатСохранения Тогда
		
		РегламентированнаяОтчетностьКлиент.ПослеЗаписиРегламентированногоОтчета(ЭтаФорма);
		
		Если ВыполняемоеОповещение <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ВыполняемоеОповещение);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПередСохранением(КодИФНС, КПП, ПодобныйОтчетСуществует, Вариант, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, Автосохранение, НаимТекРаздела)
	
	Если РегламентированнаяОтчетность.БылиИзмененыКлючевыеРеквизитыОтчета(ЭтаФорма, КодИФНС, КПП)
	   И РегламентированнаяОтчетность.СуществуетДокументСАналогичнымиРеквизитами(ЭтаФорма, КодИФНС, КПП) Тогда
		
		ПодобныйОтчетСуществует = Истина;
		
	КонецЕсли;
	
	СтруктураРеквизитовФормы.мЗаписываетсяНовыйДокумент = (СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено ИЛИ СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено);
	
	Если Вариант <> Неопределено И ((СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено) ИЛИ (СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено) ИЛИ (Вариант <> СтруктураРеквизитовФормы.мВариант)) Тогда
		
		Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено ИЛИ СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено Тогда
			
		ИначеЕсли Вариант <> СтруктураРеквизитовФормы.мВариант Тогда
			
			ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПодобныйОтчетСуществует
	 ИЛИ ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Возврат Сохранить(Автосохранение, КодИФНС, КПП, Вариант, , НаимТекРаздела);
	
КонецФункции

&НаСервере
Функция Сохранить(Автосохранение = Ложь, КодИФНС, КПП, Вариант, ВидДокументаНомерКорректировкиИзменен = Неопределено, НаимТекРаздела) Экспорт
	
	ДанныеДляРазблокирования = Неопределено;
	
	Если НЕ СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
		Если НЕ СтруктураРеквизитовФормы.мБезОткрытияФормы Тогда
			ДанныеДляРазблокирования = Новый Структура("Ключ,ИдФормы",
			СтруктураРеквизитовФормы.мСохраненныйДок, ЭтаФорма.УникальныйИдентификатор);
		КонецЕсли;
		СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.ПолучитьОбъект();
	КонецЕсли;
	
	Если НЕ РегламентированнаяОтчетность.ПриЗаписиРегламентированногоОтчетаНаСервере(
		ЭтаФорма, КодИФНС, Автосохранение, Вариант, ВидДокументаНомерКорректировкиИзменен,
		СтруктураРеквизитовФормы.мСохраненныйДок) Тогда
		СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
		Возврат Ложь;
	КонецЕсли;
	
	СтруктураРеквизитовФормы.мСохраненныйДок.ИсточникОтчета = Метаданные.Отчеты[ИмяОтчета(ЭтаФорма.ИмяФормы)].Имя;
	СтруктураРеквизитовФормы.мСохраненныйДок.НаименованиеОтчета = Метаданные.Отчеты[ИмяОтчета(ЭтаФорма.ИмяФормы)].ОсновнаяФорма.Синоним;
	СтруктураРеквизитовФормы.мСохраненныйДок.ДатаНачала               = СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета;
	СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания            = СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета;
	СтруктураРеквизитовФормы.мСохраненныйДок.Периодичность            = СтруктураРеквизитовФормы.мПериодичность;
	СтруктураРеквизитовФормы.мСохраненныйДок.ВыбраннаяФорма           = СтруктураРеквизитовФормы.мВыбраннаяФорма;
	СтруктураРеквизитовФормы.мСохраненныйДок.Организация              = СтруктураРеквизитовФормы.Организация;
	СтруктураРеквизитовФормы.мСохраненныйДок.ДатаПодписи              = ДатаПодписи;
	СтруктураРеквизитовФормы.мСохраненныйДок.ЕдиницаИзмерения         = СтруктураРеквизитовФормы.ЕдиницаИзмерения;
	СтруктураРеквизитовФормы.мСохраненныйДок.ТочностьЕдиницыИзмерения = СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения;
	СтруктураРеквизитовФормы.мСохраненныйДок.ВидОтчетности            = Перечисления.ВидыОтчетности.РегламентированнаяОтчетность;
	СтруктураРеквизитовФормы.мСохраненныйДок.Комментарий              = Комментарий;
	СтруктураРеквизитовФормы.мСохраненныйДок.КодНалоговогоОргана      = КодИФНС;
	СтруктураРеквизитовФормы.мСохраненныйДок.КПП                      = КПП;
	СтруктураРеквизитовФормы.мСохраненныйДок.Вид                      = Вариант;
	СтруктураРеквизитовФормы.мСохраненныйДок.ПредставлениеВида        = РегламентированнаяОтчетность.ПредставлениеВидаДокумента(СтруктураРеквизитовФормы.мСохраненныйДок.Вид);
	СтруктураРеквизитовФормы.мВариант                                 = Вариант;
	
	СтруктураРеквизитовФормы.мСохраненныйДок.ФорматВыгрузки = "Автоматически";
	
	СохранитьДанныеРаздела(НаимТекРаздела);
	
	ЗаполнитьПустыеСтруктурыДанных();
	
	ПоказателиОтчета = Новый Структура();
	ЗаполнитьПоказателиОтчетаНаСервере(ПоказателиОтчета);
	
	СписокСохранения = Новый Структура();
	
	СписокСохранения.Вставить("ПоказателиОтчета", ПоказателиОтчета);
	
	// Вставляем данные многоуровневых разделов.
	ДанныеМногоуровневыхРазделов = Новый Структура;
	Для каждого Элем Из мСтруктураМногоуровневыхРазделов Цикл
		ИмяРаздела = Элем.Ключ;
		ДанныеМногоуровневыхРазделов.Вставить(Элем.Ключ, ПолучитьИзВременногоХранилища(
			СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + Элем.Ключ]));
	КонецЦикла;
	СписокСохранения.Вставить("ДанныеМногоуровневыхРазделов", ДанныеМногоуровневыхРазделов);
	СписокСохранения.Вставить("ИтоговыеСуммыПоКодамОпераций", СтруктураРеквизитовФормы.ИтоговыеСуммыПоКодамОпераций);
	
	СписокСохранения.Вставить("ДекларацияНДС", СтруктураРеквизитовФормы.ДекларацияНДС);
	СписокСохранения.Вставить("ОтправкаДеклНДС",
		СтруктураРеквизитовФормы.СведенияОтправкиДеклНДС.ОтправкаДеклНДС);
	СписокСохранения.Вставить("ИмяФайлаОтправкиДеклНДС",
		СтруктураРеквизитовФормы.СведенияОтправкиДеклНДС.ИмяФайлаОтправкиДеклНДС);
	СписокСохранения.Вставить("ВыгрузкаДеклНДС",
		СтруктураРеквизитовФормы.СведенияВыгрузкиДеклНДС.ВыгрузкаДеклНДС);
	СписокСохранения.Вставить("ИмяФайлаВыгрузкиДеклНДС",
		СтруктураРеквизитовФормы.СведенияВыгрузкиДеклНДС.ИмяФайлаВыгрузкиДеклНДС);
	
	СписокСохранения.Вставить("ВерсияФормы", СтруктураРеквизитовФормы.мВерсияФормы);
	СписокСохранения.Вставить("ФлОтклВыборЗначений", СтруктураРеквизитовФормы.мАвтоВыборКодов);
	СписокСохранения.Вставить("Автозаполнение", СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);
	СписокСохранения.Вставить("ФлПроверятьСоотношенияПриПечатиИВыгрузки", 
		СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки);
		
	ХранилищеДанных = Новый ХранилищеЗначения(СписокСохранения);
	СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета = ХранилищеДанных;
	
	Попытка
		СтруктураРеквизитовФормы.мСохраненныйДок.Записать();
		СохранитьТабличныеДокументыСтраниц();
		ВосстановитьТабличныеДокументыСтраниц();
		РегламентированнаяОтчетность.СохранитьСтатусОтправкиРеглОтчета(ЭтаФорма);
	Исключение
		Если НЕ Автосохранение Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"),
				РегламентированнаяОтчетностьКлиентСервер.СформироватьТекстСообщения(ОписаниеОшибки()));
			Сообщение.Сообщить();
		КонецЕсли;
		СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
		Возврат Ложь;
	КонецПопытки;
	
	СохранитьДеревоСтраницОтчета(СтруктураРеквизитовФормы.мСохраненныйДок);
	
	Модифицированность = Ложь;
	
	СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
	
	Если НЕ СтруктураРеквизитовФормы.мБезОткрытияФормы
		И НЕ СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
		ЗаблокироватьДанныеДляРедактирования(СтруктураРеквизитовФормы.мСохраненныйДок, , ЭтаФорма.УникальныйИдентификатор);
	КонецЕсли;
	
	Если ДанныеДляРазблокирования <> Неопределено Тогда
		РазблокироватьДанныеДляРедактирования(ДанныеДляРазблокирования.Ключ, ДанныеДляРазблокирования.ИдФормы);
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Процедура СохранитьТабличныеДокументыСтраниц()
	
	Если СтруктураРеквизитовФормы.мСохраненныйДок <> Неопределено Тогда
		
		Если мСтруктураМногоуровневыхРазделов.Свойство("Реестр") Тогда
			
			Рег = РегистрыСведений.ДополнительныеФайлыРегламентированныхОтчетов;
			Ном = 1;
			ЗаписьВыбрана = Истина;
			Пока ЗаписьВыбрана Цикл
				Зап = Рег.СоздатьМенеджерЗаписи();
				Зап.РегламентированныйОтчет = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
				Зап.ВидДополнительногоФайла = "РеестрСтраница" + Формат(Ном, "ЧГ=");
				Если Зап.Выбран() Тогда
					Зап.Удалить();
					Ном = Ном + 1;
				Иначе
					ЗаписьВыбрана = Ложь;
				КонецЕсли;
			КонецЦикла;
			
			ДеревоРеестра = ПолучитьИзВременногоХранилища(
				СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхРеестр"]);
			
			Для Ном = 1 По ДеревоРеестра.Строки.Количество() Цикл
				ВеткаРеестра = ДеревоРеестра.Строки[Ном - 1];
				Зап = Рег.СоздатьМенеджерЗаписи();
				Зап.РегламентированныйОтчет = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
				Зап.ВидДополнительногоФайла = "РеестрСтраница" + Формат(Ном, "ЧГ=");
				Зап.СодержимоеФайла = Новый ХранилищеЗначения(
					ПолучитьИзВременногоХранилища(ВеткаРеестра.АдресТабличногоДокумента));
				Зап.Записать();
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоказателиОтчетаНаСервере(ПоказателиОтчета)
	
	Префикс = "ПолеТабличногоДокумента";
	
	Для Каждого Раздел Из мСвойстваРазделовДекларации.ПолучитьЭлементы() Цикл
		Если НЕ мСтруктураМногоуровневыхРазделов.Свойство(Раздел.ИмяСтраницы) Тогда
			ПоказателиОтчета.Вставить(Префикс + Раздел.ИмяСтраницы, ЭтаФорма["СтруктураДанных" + Раздел.ИмяСтраницы]);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СохранитьДеревоСтраницОтчета(Знач мСохраненныйДок)
	
	Если мСохраненныйДок <> Неопределено Тогда
		Если ТипЗнч(мСохраненныйДок) = Тип("ДокументСсылка.РегламентированныйОтчет") Тогда
			мСохраненныйДок = мСохраненныйДок.ПолучитьОбъект();
		КонецЕсли;
		Если Не мСохраненныйДок.ЭтоНовый() Тогда
			// Сохраняем выбранные листы для печати в хранилище.
			ХранилищеДанных = Новый ХранилищеЗначения(РеквизитФормыВЗначение("мДеревоСтраницОтчета"));
			мСохраненныйДок.ДеревоНастройкиСтраниц = ХранилищеДанных;
			Попытка
				мСохраненныйДок.Записать();
			Исключение
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ВосстановлениеСохраненныхДанныхОтчета

&НаСервере
Процедура ВосстановитьСохраненныеДанные()
	Перем ДанныеМногоуровневыхРазделов;
	Перем ПоказателиОтчета;
	Перем Автозаполнение;
	Перем ТаблицаМногостраничногоДокумента;
	
	// В случае, если формы была скопирована по F9, то проверим, не изменилась ли организация.
	Если НЕ ЗначениеЗаполнено(СтруктураРеквизитовФормы.Организация) Тогда
		СтруктураРеквизитовФормы.Организация = СтруктураРеквизитовФормы.мСохраненныйДок.Организация;
	КонецЕсли;
	
	СтруктураРеквизитовФормы.ЕдиницаИзмерения = СтруктураРеквизитовФормы.мСохраненныйДок.ЕдиницаИзмерения;
	СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = СтруктураРеквизитовФормы.мСохраненныйДок.ТочностьЕдиницыИзмерения;
	ДатаПодписи = СтруктураРеквизитовФормы.мСохраненныйДок.ДатаПодписи;
	Комментарий = СтруктураРеквизитовФормы.мСохраненныйДок.Комментарий;
	
	СписокСохранения = СохраненныеДанныеОтчета();
	
	ДеревоНастройкиСтраниц = СтруктураРеквизитовФормы.мСохраненныйДок.ДеревоНастройкиСтраниц.Получить();
	ЗначениеВРеквизитФормы(ДеревоНастройкиСтраниц.Скопировать(), "мДеревоСтраницОтчета");
	
	СписокСохранения.Свойство("ПоказателиОтчета", ПоказателиОтчета);
	
	Если СписокСохранения.Свойство("ДанныеМногоуровневыхРазделов", ДанныеМногоуровневыхРазделов) Тогда
		Для Каждого ЭлементСтруктуры Из ДанныеМногоуровневыхРазделов Цикл
			СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ЭлементСтруктуры.Ключ]
				= ПоместитьВоВременноеХранилище(ЭлементСтруктуры.Значение, УникальныйИдентификатор);
		КонецЦикла;
	КонецЕсли;
	
	СписокСохранения.Свойство("ИтоговыеСуммыПоКодамОпераций", СтруктураРеквизитовФормы.ИтоговыеСуммыПоКодамОпераций);
	
	СписокСохранения.Свойство("ДекларацияНДС", СтруктураРеквизитовФормы.ДекларацияНДС);
	СписокСохранения.Свойство("ОтправкаДеклНДС",
		СтруктураРеквизитовФормы.СведенияОтправкиДеклНДС.ОтправкаДеклНДС);
	СписокСохранения.Свойство("ИмяФайлаОтправкиДеклНДС",
		СтруктураРеквизитовФормы.СведенияОтправкиДеклНДС.ИмяФайлаОтправкиДеклНДС);
	СписокСохранения.Свойство("ВыгрузкаДеклНДС",
		СтруктураРеквизитовФормы.СведенияВыгрузкиДеклНДС.ВыгрузкаДеклНДС);
	СписокСохранения.Свойство("ИмяФайлаВыгрузкиДеклНДС",
		СтруктураРеквизитовФормы.СведенияВыгрузкиДеклНДС.ИмяФайлаВыгрузкиДеклНДС);
	
	СписокСохранения.Свойство("ФлОтклВыборЗначений", СтруктураРеквизитовФормы.мАвтоВыборКодов);
	Если СтруктураРеквизитовФормы.мАвтоВыборКодов = Неопределено Тогда
		СтруктураРеквизитовФормы.мАвтоВыборКодов = Ложь;
	КонецЕсли;
	
	СписокСохранения.Свойство("ФлПроверятьСоотношенияПриПечатиИВыгрузки", 
		СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки);
	СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки = ?(
		СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки = Неопределено, Ложь, 
		СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки);
	
	СписокСохранения.Свойство("Автозаполнение", Автозаполнение);
	СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет = Автозаполнение;
	
	СформироватьДеревоРазделовОтчетаНаСервере();
	
	Префикс = "ПолеТабличногоДокумента";
	Для Каждого Раздел Из мСвойстваРазделовДекларации.ПолучитьЭлементы() Цикл
		Если НЕ мСтруктураМногоуровневыхРазделов.Свойство(Раздел.ИмяСтраницы) Тогда
			ЭтаФорма["СтруктураДанных" + Раздел.ИмяСтраницы] = ПоказателиОтчета[Префикс + Раздел.ИмяСтраницы];
		КонецЕсли;
	КонецЦикла;
	
	ИмяТекРаздела = "Титульный";
	Для Каждого ЭлСтруктуры Из ЭтаФорма["СтруктураДанных" + ИмяТекРаздела] Цикл
		Обл = ТабличныйДокумент.Области[ЭлСтруктуры.Ключ];
		Если Обл <> Неопределено Тогда
			Обл.Значение = ЭлСтруктуры.Значение;
		КонецЕсли;
	КонецЦикла;
	
	Если СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено Тогда
		СтруктураРеквизитовФормы.ДекларацияНДС = Неопределено;
		СтруктураРеквизитовФормы.СведенияОтправкиДеклНДС.ОтправкаДеклНДС = Неопределено;
		СтруктураРеквизитовФормы.СведенияОтправкиДеклНДС.ИмяФайлаОтправкиДеклНДС = Неопределено;
		СтруктураРеквизитовФормы.СведенияВыгрузкиДеклНДС.ВыгрузкаДеклНДС = Неопределено;
		СтруктураРеквизитовФормы.СведенияВыгрузкиДеклНДС.ИмяФайлаВыгрузкиДеклНДС = Неопределено;
	КонецЕсли;
	
	ТабличныйДокумент.Области["ДекларацияНДС"].Значение = ПредставлениеОтчета(
		СтруктураРеквизитовФормы.ДекларацияНДС);
	ТабличныйДокумент.Области["ОтправкаДеклНДС"].Значение = ПредставлениеОтправкиОтчета(
		СтруктураРеквизитовФормы.СведенияОтправкиДеклНДС.ОтправкаДеклНДС);
	ТабличныйДокумент.Области["ВыгрузкаДеклНДС"].Значение = ПредставлениеВыгрузкиОтчета(
		СтруктураРеквизитовФормы.СведенияВыгрузкиДеклНДС.ВыгрузкаДеклНДС);
	
	ВосстановитьТабличныеДокументыСтраниц();
	
	РегламентированнаяОтчетность.ОперацииПриВосстановленииРегламентированногоОтчета(ЭтаФорма);
	
	КопироватьДанныеФормы(мДеревоСтраницОтчета, мДеревоВыбранныхСтраниц);
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьТабличныеДокументыСтраниц()
	
	Если СтруктураРеквизитовФормы.мСохраненныйДок <> Неопределено Тогда
		
		Если мСтруктураМногоуровневыхРазделов.Свойство("Реестр") Тогда
			
			Рег = РегистрыСведений.ДополнительныеФайлыРегламентированныхОтчетов;
			
			ДеревоРеестра = ПолучитьИзВременногоХранилища(
				СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхРеестр"]);
			
			Для Ном = 1 По ДеревоРеестра.Строки.Количество() Цикл
				ВеткаРеестра = ДеревоРеестра.Строки[Ном - 1];
				Зап = Рег.СоздатьМенеджерЗаписи();
				Зап.РегламентированныйОтчет = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
				Зап.ВидДополнительногоФайла = "РеестрСтраница" + Формат(Ном, "ЧГ=");
				Зап.Прочитать();
				Если ВеткаРеестра.АдресТабличногоДокумента <> Неопределено Тогда
					УдалитьИзВременногоХранилища(ВеткаРеестра.АдресТабличногоДокумента);
				КонецЕсли;
				ВеткаРеестра.АдресТабличногоДокумента = ПоместитьВоВременноеХранилище(
					Зап.СодержимоеФайла.Получить(), УникальныйИдентификатор);
			КонецЦикла;
			
			УдалитьИзВременногоХранилища(СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхРеестр"]);
			СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхРеестр"]
				= ПоместитьВоВременноеХранилище(ДеревоРеестра, УникальныйИдентификатор);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция СохраненныеДанныеОтчета()
	
	Если СохраненныеДанныеОтчета = Неопределено Тогда
		СохраненныеДанныеОтчета = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить();
	КонецЕсли;
	
	Возврат СохраненныеДанныеОтчета;
	
КонецФункции

#КонецОбласти

#Область ОбработкаСобытийВТабличномДокументе

&НаКлиенте
Процедура ТабличныйДокументВыбор(Элемент, Область, СтандартнаяОбработка)
	
	Если СтрЧислоВхождений(Область.Имя, "ДобавитьСтроку") = 1 И Область.Текст <> "" Тогда
		ДобавитьСтроку("");
	ИначеЕсли СтрЧислоВхождений(Область.Имя, "УдалитьСтроку") = 1 И Область.Текст <> "" Тогда
		УдалитьСтроку("");
	ИначеЕсли СтрЧислоВхождений(Область.Имя, "ДобавитьСтраницу") > 0 И Область.Текст <> "" Тогда
		ДобавитьСтраницу("");
	ИначеЕсли СтрЧислоВхождений(Область.Имя, "УдалитьСтраницу") > 0 И Область.Текст <> "" Тогда
		УдалитьСтраницу("");
	ИначеЕсли Область.Имя = "ОбновитьСведенияОтправокВыгрузок" Тогда
		ОбработатьСведенияОтправокВыгрузокДекларацииНДС();
		УстановитьДоступностьОбластей(ЭтаФорма, "Титульный");
	КонецЕсли;
	
	Если РегламентированнаяОтчетностьКлиент.ВыбраннаяОбластьРегламентированногоОтчетаНеВерна(ЭтаФорма, Область, СтандартнаяОбработка) Тогда
		Возврат;
	КонецЕсли;
	
	Если Область.Имя = "ДекларацияНДС" Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ПарамОтбора = Новый Структура;
		ПарамОтбора.Вставить("ИсточникОтчета", "РегламентированныйОтчетНДС");
		ПарамОтбора.Вставить("Периодичность", СтруктураРеквизитовФормы.мПериодичность);
		Организации = Новый СписокЗначений;
		Организации.Добавить(СтруктураРеквизитовФормы.Организация);
		ПарамОтбора.Вставить("Организация", Организации);
		ПарамОтбора.Вставить("ОтборКодИФНС", Ложь);
		ПарамОтбора.Вставить("ОтборПериод", Истина);
		ПарамОтбора.Вставить("ДатаНачалаПериодаОтчета", НачалоДня(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета));
		ПарамОтбора.Вставить("ДатаКонцаПериодаОтчета", НачалоДня(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета));
		
		ФормаВыбораОтчета = РегламентированнаяОтчетностьКлиент.ПолучитьОбщуюФормуПоИмени(
			"ФормаВыбораОтчета", ПарамОтбора, ЭтаФорма);
		ФормаВыбораОтчета.ОписаниеОповещенияОЗакрытии
			= Новый ОписаниеОповещения("ОткрытьФормуВыбораОтчетаЗавершение", ЭтотОбъект);
		ФормаВыбораОтчета.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		ФормаВыбораОтчета.Элементы.ФормаСоздатьОтчет.Видимость = Ложь;
		ФормаВыбораОтчета.Открыть();
		
	ИначеЕсли Область.Имя = "ОтправкаДеклНДС" Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ВыбратьОтправкуОтчета(
			СтруктураРеквизитовФормы["ДекларацияНДС"], СтруктураРеквизитовФормы.Организация,
			ПредставлениеОтчета(СтруктураРеквизитовФормы["ДекларацияНДС"]),
			Новый ОписаниеОповещения("ОткрытьФормуВыбораОтправкиОтчетовЗавершение", ЭтотОбъект));
		
	ИначеЕсли Область.Имя = "ВыгрузкаДеклНДС" Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ПараметрыОтбора = Новый Структура("Организация, Основание",
		СтруктураРеквизитовФормы.Организация, СтруктураРеквизитовФормы.ДекларацияНДС);
		
		ВыгрузкиДекларацииНДС
			= РегламентированнаяОтчетностьВызовСервера.ДокументыВыгрузкиДекларацииНДС(ПараметрыОтбора);
		
		ФормаВыбораОтчета = РегламентированнаяОтчетностьКлиент.ПолучитьОбщуюФормуПоИмени(
			"ФормаВыбораВыгрузкиОтчетов", Новый Структура("ДокументыВыгрузки", ВыгрузкиДекларацииНДС), ЭтаФорма);
		ФормаВыбораОтчета.Заголовок = ПредставлениеОтчета(СтруктураРеквизитовФормы["ДекларацияНДС"]) + ": история выгрузки";
		ФормаВыбораОтчета.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		ФормаВыбораОтчета.ОписаниеОповещенияОЗакрытии
			= Новый ОписаниеОповещения("ОткрытьФормуВыбораВыгрузкиОтчетовЗавершение", ЭтотОбъект, ВыгрузкиДекларацииНДС);
		ФормаВыбораОтчета.Открыть();
		
	ИначеЕсли Область.Имя = "НалоговыйОрган" Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ОбработкаВыбораИФНС();
		
	ИначеЕсли Лев(Область.Имя, 8) = "П1000007" Тогда
		
		СтандартнаяОбработка = Ложь;
		
		РоссийскийАдрес = Новый Соответствие;
		
		РоссийскийАдрес.Вставить("Индекс",          "");
		РоссийскийАдрес.Вставить("Регион",          "");
		РоссийскийАдрес.Вставить("КодРегиона",      "");
		РоссийскийАдрес.Вставить("Район",           "");
		РоссийскийАдрес.Вставить("Город",           "");
		РоссийскийАдрес.Вставить("НаселенныйПункт", "");
		РоссийскийАдрес.Вставить("Улица",           "");
		РоссийскийАдрес.Вставить("Дом",             "");
		РоссийскийАдрес.Вставить("Корпус",          "");
		РоссийскийАдрес.Вставить("Квартира",        "");
		
		Если Регионы.Количество() = 0 Тогда
			ЗаполнитьРегионыНаСервере();
		КонецЕсли;
		
		Регион = Регионы.НайтиСтроки(Новый Структура("Код", СокрЛП(РоссийскийАдрес["Регион"])));
			
		Если Регион.Количество() > 0 Тогда
			
			РоссийскийАдрес["Регион"] = Регион[0].Наим;
			
		КонецЕсли;
		
		ЗначенияПолей = Новый СписокЗначений;
		
		ЗначенияПолей.Добавить(РоссийскийАдрес["Индекс"],          "Индекс");
		ЗначенияПолей.Добавить(РоссийскийАдрес["Регион"],          "Регион");
		ЗначенияПолей.Добавить(РоссийскийАдрес["КодРегиона"],      "КодРегиона");
		ЗначенияПолей.Добавить(РоссийскийАдрес["Район"],           "Район");
		ЗначенияПолей.Добавить(РоссийскийАдрес["Город"],           "Город");
		ЗначенияПолей.Добавить(РоссийскийАдрес["НаселенныйПункт"], "НаселенныйПункт");
		ЗначенияПолей.Добавить(РоссийскийАдрес["Улица"],           "Улица");
		ЗначенияПолей.Добавить(РоссийскийАдрес["Дом"],             "Дом");
		ЗначенияПолей.Добавить(РоссийскийАдрес["Корпус"],          "Корпус");
		ЗначенияПолей.Добавить(РоссийскийАдрес["Квартира"],        "Квартира");
		
		ПредставлениеАдреса = РегламентированнаяОтчетностьКлиентСервер.ПредставлениеАдресаВФормате9Запятых("643," + РоссийскийАдрес["Индекс"] + ","
																												  + РоссийскийАдрес["Регион"] + ","
																												  + РоссийскийАдрес["Район"] + ","
																												  + РоссийскийАдрес["Город"] + ","
																												  + РоссийскийАдрес["НаселенныйПункт"] + ","
																												  + РоссийскийАдрес["Улица"] + ","
																												  + РоссийскийАдрес["Дом"] + ","
																												  + РоссийскийАдрес["Корпус"] + ","
																												  + РоссийскийАдрес["Квартира"]);
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Заголовок",               "Ввод адреса");
		ПараметрыФормы.Вставить("ЗначенияПолей", 		   ЗначенияПолей);
		ПараметрыФормы.Вставить("Представление", 		   ПредставлениеАдреса);
		ПараметрыФормы.Вставить("ВидКонтактнойИнформации", СтруктураРеквизитовФормы.СправочникиВидыКонтактнойИнформацииАдресОрганизации);
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("РоссийскийАдрес", РоссийскийАдрес);
		
		ТипЗначения = Тип("ОписаниеОповещения");
		ПараметрыКонструктора = Новый Массив(3);
		ПараметрыКонструктора[0] = "ОткрытьФормуКонтактнойИнформацииЗавершение";
		ПараметрыКонструктора[1] = ЭтаФорма;
		ПараметрыКонструктора[2] = ДополнительныеПараметры;
		
		Оповещение = Новый (ТипЗначения, ПараметрыКонструктора);
		
		ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеКонтактнойИнформациейКлиент").ОткрытьФормуКонтактнойИнформации(ПараметрыФормы, , Оповещение);
		
	Иначе
		
		ПараметрВводаПоля = РегламентированнаяОтчетностьКлиентСервер.НайтиСвойстваПоказателя(ЭтаФорма, Область.Имя);
		
		Если ПараметрВводаПоля <> Неопределено И ПараметрВводаПоля.ТаблицаЗначений.Количество() > 0 Тогда
			КодПоказателя = ПараметрВводаПоля.Показатель;
			КопироватьДанныеФормы(ПараметрВводаПоля.ТаблицаЗначений, ТЗВыбора);
			
			ТребРезультат = 0;
			Если КодПоказателя = "Период" Тогда
				НомерКвартала = Число(Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ=к"));
				ТребРезультат = НомерКвартала;
			КонецЕсли;
			
			Если ТребРезультат <> 0 Тогда
				РазмерТЗ = ТЗВыбора.Количество();
				Для Сч = 1 По РазмерТЗ Цикл
					ЭлементТЗ = ТЗВыбора[РазмерТЗ - Сч];
					Рез = ?(ЭлементТЗ.РезультатПроверки = "", 0, Число(ЭлементТЗ.РезультатПроверки));
					Если Рез <> 0 И Рез <> ТребРезультат Тогда
						ТЗВыбора.Удалить(ЭлементТЗ);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			ВвестиПоказатель(Элемент, Область, КодПоказателя, Ложь, ПараметрВводаПоля.ТекстПриВыборе, ТЗВыбора, СтандартнаяОбработка);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТабличныйДокументПриИзмененииСодержимогоОбласти(Элемент, Область)
	
	ИмяПоказателя = Область.Имя;
	ЗначПоказателя = Область.Значение;
	
	Если ИмяПоказателя = "ДатаПодписи" Тогда 
		ДатаПодписи = Область.Значение;
		ЗаполнитьСведенияОбОрганизацииНаСервере(Истина);
		Модифицированность = Истина;
	ИначеЕсли ИмяПоказателя = "НомерКорректировки" Тогда 
		ОписаниеТипа = Новый ОписаниеТипов("Число");
		НомерКорректировки = ОписаниеТипа.ПривестиЗначение(Область.Значение);
		СтруктураРеквизитовФормы.ВидДокумента = ?(НомерКорректировки = 0, 0, 1);
		Область.Значение = Строка(НомерКорректировки);
		Модифицированность = Истина;
	КонецЕсли;
	
	ПараметрВводаПоля = РегламентированнаяОтчетностьКлиентСервер.НайтиСвойстваПоказателя(ЭтаФорма, ИмяПоказателя);
	
	Если ПараметрВводаПоля <> Неопределено И ПараметрВводаПоля.ТаблицаЗначений.Количество() > 0 Тогда
		
		КопироватьДанныеФормы(ПараметрВводаПоля.ТаблицаЗначений, ТЗВыбора);
		ЭлТЗВыбора = ТЗВыбора.НайтиСтроки(Новый Структура("Код", ЗначПоказателя));
		
	КонецЕсли;
	
	ИмяРаздела = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
	
	ИмяОбласти = Область.Имя;
	Если ИмяРаздела <> "Титульный" Тогда
		ПозицияПодстроки = СтрНайти(ИмяОбласти, "_");
		Если ПозицияПодстроки > 0 Тогда
			ИмяОбласти = Лев(ИмяОбласти, ПозицияПодстроки - 1);
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыВводаПоля = СвойстваПоказателей.НайтиСтроки(Новый Структура("Показатель", ИмяОбласти));
	Если ПараметрыВводаПоля.Количество() > 0 Тогда
		ПараметрВводаПоля = ПараметрыВводаПоля[0];
		Если СтрДлина(СокрЛП(ЗначПоказателя)) <> 0 И ПараметрВводаПоля.Длина <> 0 И СтрДлина(СокрЛП(ЗначПоказателя)) <> ПараметрВводаПоля.Длина Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='Длина значения показателя должна быть равна " + ПараметрВводаПоля.Длина + "!'");
			Сообщение.Сообщить();
		КонецЕсли;
	КонецЕсли;
	
	Модифицированность = Истина;
	
	УстановитьДоступностьОбластей(ЭтаФорма, ИмяРаздела);
	
	Если ИмяРаздела = "Реестр" Тогда
		РасчетНаКлиенте(ИмяРаздела, ИмяОбласти);
		Если Область.Имя = "КодОперации" Тогда
			ПронумероватьСтрокиТабличнойЧасти(ИмяРаздела);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТабличныйДокументПриАктивизацииОбласти(Элемент)
	
	Элементы.ТабличныйДокументКонтекстноеМенюУдалитьСтроку.Доступность = Ложь;
	Элементы.ТабличныйДокументКонтекстноеМенюДобавитьСтроку.Доступность = Ложь;
	Элементы.ТабличныйДокументКонтекстноеМенюДобавитьСтрокуКопированием.Доступность = Ложь;
	
	Если Лев(Элемент.ТекущаяОбласть.Имя, 13) = "УдалитьСтроку" Тогда
		ИмяГруппы = Неопределено;
	Иначе
		ИмяГруппы = МногострочнаяЧастьТекущейОбласти(Элемент.ТекущаяОбласть);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИмяГруппы) Тогда
		
		Элементы.ТабличныйДокументКонтекстноеМенюДобавитьСтроку.Доступность = Истина;
		Элементы.ТабличныйДокументКонтекстноеМенюДобавитьСтрокуКопированием.Доступность = Истина;
		
		ИмяПервойГрафы = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппы]["ИменаГраф"][0];
		ИсхКолСтрок = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппы]["ИсхКолСтрок"];
		Координаты = СтрокаСКоординатамиПоказателя(Элемент.ТекущаяОбласть.Имя);
		
		ТестИмя = ИмяПервойГрафы + Координаты + СтрокаСИндексомПоказателя(ИсхКолСтрок + 1);
		Если СтрЧислоВхождений(Элемент.ТекущаяОбласть.Имя, "ДобавитьСтроку") = 0
			И ТабличныйДокумент.Области.Найти(ТестИмя) <> Неопределено Тогда
			Элементы.ТабличныйДокументКонтекстноеМенюУдалитьСтроку.Доступность = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	ДопТекст = ДополнительныйТекстПриДобавленииУдаленииСтрок(ИмяГруппы);
	Если ДопТекст <> Неопределено Тогда
		Элементы.ТабличныйДокументКонтекстноеМенюДобавитьСтроку.Заголовок
		= ДопТекст.ЗаголовокКонтекстногоМенюДобавитьСтроку;
		Элементы.ТабличныйДокументКонтекстноеМенюДобавитьСтрокуКопированием.Заголовок
		= ДопТекст.ЗаголовокКонтекстногоМенюДобавитьСтрокуКопированием;
		Элементы.ТабличныйДокументКонтекстноеМенюУдалитьСтроку.Заголовок
		= ДопТекст.ЗаголовокКонтекстногоМенюУдалитьСтроку;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция МногострочнаяЧастьТекущейОбласти(Знач ТекОбласть)
	
	Если ТекОбласть = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ИмяОбласти = СтрЗаменить(ТекОбласть.Имя, "ДобавитьСтрокуЗначок", "");
	ИмяОбласти = СтрЗаменить(ИмяОбласти, "ДобавитьСтроку", "");
	ИмяОбласти = СтрЗаменить(ИмяОбласти, "УдалитьСтроку", "");
	
	ИмяГруппы = Лев(ИмяОбласти, СтруктураРеквизитовФормы.ДлинаИмениГруппы);
	
	Для каждого ЭлемСтруктуры Из СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей Цикл
		Если ЭлемСтруктуры.Ключ = ИмяГруппы Тогда
			Возврат ИмяГруппы;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

&НаКлиенте
Функция ДополнительныйТекстПриДобавленииУдаленииСтрок(Знач ИмяГруппы)
	
	Если НЕ ЗначениеЗаполнено(ИмяГруппы) Тогда
		Возврат Неопределено;
	ИначеЕсли НЕ СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей.Свойство(ИмяГруппы) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ИмяГруппы = СтруктураРеквизитовФормы.мИдГруппы100 Тогда
		Подстрока = "строку";
		ТекстВопроса = НСтр("ru='Удалить выбранную строку?'");
	ИначеЕсли ИмяГруппы = СтруктураРеквизитовФормы.мИдГруппы110 Тогда
		Подстрока = "маршрутное поручение";
		ТекстВопроса = НСтр("ru='Удалить выбранное маршрутное поручение?'");
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	ДопТекст = Новый Структура;
	ДопТекст.Вставить("ЗаголовокКонтекстногоМенюДобавитьСтроку", "Добавить " + Подстрока);
	ДопТекст.Вставить("ЗаголовокКонтекстногоМенюДобавитьСтрокуКопированием", "Добавить " + Подстрока + " копированием");
	ДопТекст.Вставить("ЗаголовокКонтекстногоМенюУдалитьСтроку", "Удалить " + Подстрока);
	ДопТекст.Вставить("ТекстВопросаПередУдалениемСтроки", ТекстВопроса);
	
	Возврат ДопТекст;
	
КонецФункции

&НаСервере
Процедура ОбработатьСведенияОтправокВыгрузокДекларацииНДС_УстановитьПериодПоУмолчанию()
	
	ОбработатьСведенияОтправокВыгрузокДекларацииНДС();
	
	ТабличныйДокумент.Области.Период.Очистить();
	
	ЗаполнитьПериодОтчета();
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьСведенияОтправокВыгрузокДекларацииНДС_УстановитьПериодИзДекларацииНДС()
	
	ОбработатьСведенияОтправокВыгрузокДекларацииНДС();
	
	УстановитьПериодИзДекларацииНДС();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПериодИзДекларацииНДС()
	
	ТабличныйДокумент.Области.Период.Значение = ПериодИзДекларацииНДС();
	
КонецПроцедуры

&НаСервере
Функция ПериодИзДекларацииНДС()
	
	ПериодДекларацииНДС = "";
	Если ЗначениеЗаполнено(СтруктураРеквизитовФормы.ДекларацияНДС) Тогда
		ДекларацияНДСДанныеТитульногоЛиста
		= СтруктураРеквизитовФормы.ДекларацияНДС.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаТитульный;
		Если ДекларацияНДСДанныеТитульногоЛиста.Свойство("Период") Тогда
			ПериодДекларацииНДС = ДекларацияНДСДанныеТитульногоЛиста.Период;
		Иначе // случай перехода 2.0 - 3.0
			ПериодДекларацииНДС = ДекларацияНДСДанныеТитульногоЛиста.Период1 + ДекларацияНДСДанныеТитульногоЛиста.Период2;
		КонецЕсли;
	КонецЕсли;
	Возврат СокрЛП(ПериодДекларацииНДС);
	
КонецФункции

&НаКлиенте
Процедура ОткрытьФормуВыбораОтчетаЗавершение(РезультатВыбора, ДопПараметры) Экспорт
	
	Если РезультатВыбора <> Неопределено Тогда
		Если СтруктураРеквизитовФормы["ДекларацияНДС"] = РезультатВыбора Тогда
			ТабличныйДокумент.Область("ДекларацияНДС").Значение = "";
			СтруктураРеквизитовФормы.Вставить("ДекларацияНДС", Неопределено);
		Иначе
			ТабличныйДокумент.Область("ДекларацияНДС").Значение = ПредставлениеОтчета(РезультатВыбора);
			СтруктураРеквизитовФормы.Вставить("ДекларацияНДС", РезультатВыбора);
		КонецЕсли;
		Если ЗначениеЗаполнено(СтруктураРеквизитовФормы["ДекларацияНДС"]) Тогда
			ОбработатьСведенияОтправокВыгрузокДекларацииНДС_УстановитьПериодИзДекларацииНДС();
		Иначе
			ОбработатьСведенияОтправокВыгрузокДекларацииНДС_УстановитьПериодПоУмолчанию();
		КонецЕсли;
		УстановитьДоступностьОбластей(ЭтаФорма, СтруктураРеквизитовФормы.НаимТекущегоРаздела);
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораОтправкиОтчетовЗавершение(РезультатВыбора, ДопПараметры) Экспорт
	
	Если РезультатВыбора <> Неопределено Тогда
		Если СтруктураРеквизитовФормы.СведенияОтправкиДеклНДС["ОтправкаДеклНДС"]
			= ПредставлениеОтправкиОтчета(РезультатВыбора) Тогда
			ТабличныйДокумент.Область("ОтправкаДеклНДС").Значение = "";
			СведенияОтправкиДеклНДС = Новый Структура;
			СведенияОтправкиДеклНДС.Вставить("ОтправкаДеклНДС", Неопределено);
			СведенияОтправкиДеклНДС.Вставить("ИмяФайлаОтправкиДеклНДС", Неопределено);
			СтруктураРеквизитовФормы.СведенияОтправкиДеклНДС = СведенияОтправкиДеклНДС;
		Иначе
			СтруктураПолногоИмениФайла
				= ОбщегоНазначенияКлиентСервер.РазложитьПолноеИмяФайла(РезультатВыбора.ИмяФайла);
			ТабличныйДокумент.Область("ОтправкаДеклНДС").Значение = ПредставлениеОтправкиОтчета(РезультатВыбора);
			СведенияОтправкиДеклНДС = Новый Структура;
			СведенияОтправкиДеклНДС.Вставить("ОтправкаДеклНДС", ПредставлениеОтправкиОтчета(РезультатВыбора));
			СведенияОтправкиДеклНДС.Вставить("ИмяФайлаОтправкиДеклНДС", СтруктураПолногоИмениФайла.ИмяБезРасширения);
			СтруктураРеквизитовФормы.СведенияОтправкиДеклНДС = СведенияОтправкиДеклНДС;
		КонецЕсли;
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораВыгрузкиОтчетовЗавершение(РезультатВыбора, ДопПараметры) Экспорт
	
	Если РезультатВыбора <> Неопределено Тогда
		Если СтруктураРеквизитовФормы.СведенияВыгрузкиДеклНДС["ВыгрузкаДеклНДС"] = РезультатВыбора Тогда
			ТабличныйДокумент.Область("ВыгрузкаДеклНДС").Значение = "";
			СведенияВыгрузкиДеклНДС = Новый Структура;
			СведенияВыгрузкиДеклНДС.Вставить("ВыгрузкаДеклНДС", Неопределено);
			СведенияВыгрузкиДеклНДС.Вставить("ИмяФайлаВыгрузкиДеклНДС", Неопределено);
			СтруктураРеквизитовФормы.СведенияВыгрузкиДеклНДС = СведенияВыгрузкиДеклНДС;
		Иначе
			СтруктураПолногоИмениФайла
				= ОбщегоНазначенияКлиентСервер.РазложитьПолноеИмяФайла(
				ДопПараметры.НайтиПоЗначению(РезультатВыбора).Представление);
			ТабличныйДокумент.Область("ВыгрузкаДеклНДС").Значение = ПредставлениеВыгрузкиОтчета(РезультатВыбора);
			СведенияВыгрузкиДеклНДС = Новый Структура;
			СведенияВыгрузкиДеклНДС.Вставить("ВыгрузкаДеклНДС",
				ДопПараметры.НайтиПоЗначению(РезультатВыбора).Значение);
			СведенияВыгрузкиДеклНДС.Вставить("ИмяФайлаВыгрузкиДеклНДС",
				СтруктураПолногоИмениФайла.ИмяБезРасширения);
			СтруктураРеквизитовФормы.СведенияВыгрузкиДеклНДС = СведенияВыгрузкиДеклНДС;
		КонецЕсли;
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПредставлениеОтчета(РегОтчет)
	
	Если ЗначениеЗаполнено(РегОтчет) Тогда
		Возврат РегОтчет.НаименованиеОтчета + " за " + РегОтчет.ПредставлениеПериода
			+ " (Вид: " + СтрЗаменить(СтрЗаменить(СокрЛП(РегОтчет.ПредставлениеВида),
			"П", "первичная"), "К/", "Номер корректировки: ")
			+ ")";
	Иначе
		Возврат "";
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ПредставлениеВыгрузкиОтчета(ВыгрузкаРегОтчета)
	
	Если ЗначениеЗаполнено(ВыгрузкаРегОтчета) Тогда
		Возврат "Выгрузка от " + ВыгрузкаРегОтчета.Дата + " № " + ВыгрузкаРегОтчета.Номер;
	Иначе
		Возврат "";
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ПредставлениеОтправкиОтчета(ОтправкаРегОтчета)
	
	Если ЗначениеЗаполнено(ОтправкаРегОтчета) Тогда
		Если ТипЗнч(ОтправкаРегОтчета) = Тип("Строка") Тогда
			Возврат ОтправкаРегОтчета;
		Иначе
			Возврат "Отправка от " + ОтправкаРегОтчета.ДатаОтправки;
		КонецЕсли;
	Иначе
		Возврат "";
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ОткрытьФормуКонтактнойИнформацииЗавершение(Результат, Параметры) Экспорт
	
	ОбновитьАдресВТабличномДокументе(Результат, Параметры.РоссийскийАдрес);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьАдресВТабличномДокументе(Результат, РоссийскийАдрес)
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		
		ТабличныйДокумент.ТекущаяОбласть.Значение = Результат.Представление;
		
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРегионыНаСервере()
	
	РегламентированнаяОтчетность.ЗаполнитьРегионы(Регионы);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗапретитьВводДанныхВОбласть(мСтруктураЦветовРаскраски, ОбрабОбласть)
	
	ЦветНедоступнойОбласти = мСтруктураЦветовРаскраски["_5"];
	
	ОбрабОбласть.Защита   = Истина;
	ОбрабОбласть.ЦветФона = ЦветНедоступнойОбласти;
	
	ТипЗначенияОбласти = ТипЗнч(ОбрабОбласть.Значение);
	Если ТипЗначенияОбласти = Тип("Число") Тогда
		ОбрабОбласть.Значение = 0;
	ИначеЕсли ТипЗначенияОбласти = Тип("Строка") Тогда
		ОбрабОбласть.Значение = "";
	Иначе
		ОбрабОбласть.Значение = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РазрешитьВводДанныхВОбласть(мСтруктураЦветовРаскраски, ОбрабОбласть)
	
	ЦветОбластиРучногоВвода = мСтруктураЦветовРаскраски["_0"];
	
	ОбрабОбласть.Защита = Ложь;
	ОбрабОбласть.ЦветФона = ЦветОбластиРучногоВвода;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьОбластей(Форма, ИмяТекРаздела)
	
	Если ИмяТекРаздела = "Титульный" Тогда
		
		ОпредОбласть = Форма.ТабличныйДокумент.Области.КодФормыРеорганизации;
		ОбрабОбласть1 = Форма.ТабличныйДокумент.Области.ИННРеорганизованнойОрганизации;
		ОбрабОбласть2 = Форма.ТабличныйДокумент.Области.КППРеорганизованнойОрганизации;
		Если ПустаяСтрока(ОпредОбласть.Значение) ИЛИ ОпредОбласть.Значение = "0" Тогда
			ЗапретитьВводДанныхВОбласть(Форма.мСтруктураЦветовРаскраски, ОбрабОбласть1);
			ЗапретитьВводДанныхВОбласть(Форма.мСтруктураЦветовРаскраски, ОбрабОбласть2);
		Иначе
			РазрешитьВводДанныхВОбласть(Форма.мСтруктураЦветовРаскраски, ОбрабОбласть1);
			РазрешитьВводДанныхВОбласть(Форма.мСтруктураЦветовРаскраски, ОбрабОбласть2);
		КонецЕсли;
		
		// Область сведений о выгрузках отображается вместо области сведений об отправках
		// в случае, если в информационной базе отсутствуют отправки, но имеются выгрузки.
		Обл1 = Форма.ТабличныйДокумент.Области.СекцияОтправкаДеклНДС;
		Обл2 = Форма.ТабличныйДокумент.Области.СекцияВыгрузкаДеклНДС;
		Если ЗначениеЗаполнено(
			Форма.СтруктураРеквизитовФормы.СведенияВыгрузкиДеклНДС["ИмяФайлаВыгрузкиДеклНДС"]) Тогда
			Обл2.Видимость = Истина;
			Обл1.Видимость = Ложь;
			Форма.ТабличныйДокумент.Области.ОтправкаДеклНДС.Очистить();
		Иначе
			Обл1.Видимость = Истина;
			ОблОтправкаДеклНДС = Форма.ТабличныйДокумент.Области.ОтправкаДеклНДС;
			Если ЗначениеЗаполнено(Форма.СтруктураРеквизитовФормы["ДекларацияНДС"]) Тогда
				РазрешитьВводДанныхВОбласть(Форма.мСтруктураЦветовРаскраски, ОблОтправкаДеклНДС);
			Иначе
				// Запрет на выбор отправки, если не выбрана декларация по НДС.
				ЗапретитьВводДанныхВОбласть(Форма.мСтруктураЦветовРаскраски, ОблОтправкаДеклНДС);
			КонецЕсли;
			Обл2.Видимость = Ложь;
			Форма.ТабличныйДокумент.Области.ВыгрузкаДеклНДС.Очистить();
		КонецЕсли;
		
	ИначеЕсли ИмяТекРаздела = "Реестр" Тогда
		
		ОбрабОбласть = Форма.ТабличныйДокумент.Области["НалБазаИтого"];
		Если Форма.СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Тогда
			ОбрабОбласть.Защита   = Ложь;
			ОбрабОбласть.ЦветФона = Форма.мСтруктураЦветовРаскраски["_0"];
		Иначе
			ОбрабОбласть.Защита   = Истина;
			ОбрабОбласть.ЦветФона = Форма.мСтруктураЦветовРаскраски["_4"];
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПомещениеДанныхИзТабличногоДокументаВМестаХранения

&НаСервере
Процедура СохранитьДанныеРаздела(НаимРаздела)
	
	// Многоуровневые разделы.
	//
	Если мСтруктураМногоуровневыхРазделов.Свойство(НаимРаздела) Тогда
		
		ДеревоДанныхРаздела = ПолучитьИзВременногоХранилища(
			СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + НаимРаздела]);
		
		ТекВетка = ДеревоДанныхРаздела;
		
		Для каждого НомерСтроки Из СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела Цикл
			ТекВетка = ТекВетка.Строки[НомерСтроки - 1];
		КонецЦикла;
		
		ДанныеТаблДокумента = ДанныеТабличногоДокумента(НаимРаздела);
		
		ТекВетка.Данные = ДанныеТаблДокумента.Данные;
		ТекВетка.ДанныеМногострочныхЧастей = ДанныеТаблДокумента.ДанныеМногострочныхЧастей;
		Если ТекВетка.АдресТабличногоДокумента <> Неопределено Тогда
			УдалитьИзВременногоХранилища(ТекВетка.АдресТабличногоДокумента);
		КонецЕсли;
		ТекВетка.АдресТабличногоДокумента = ПоместитьВоВременноеХранилище(
			ТабличныйДокумент.ПолучитьОбласть(), УникальныйИдентификатор);
		
		Если НЕ СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Тогда
			КодОперации = ТабличныйДокумент.Области["КодОперации"].Значение;
			НалБазаИтого = ТабличныйДокумент.Области["НалБазаИтого"].Значение;
			Для каждого Ветка Из ДеревоДанныхРаздела.Строки Цикл
				Если Ветка.Данные["КодОперации"] = КодОперации Тогда
					Ветка.Данные["НалБазаИтого"] = НалБазаИтого;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + НаимРаздела]
			= ПоместитьВоВременноеХранилище(ДеревоДанныхРаздела, УникальныйИдентификатор);
		
	// Обычные разделы.
	//
	Иначе
		
		ЭтаФорма["СтруктураДанных" + НаимРаздела] = ДанныеТабличногоДокумента(НаимРаздела);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ДанныеТабличногоДокумента(НаимРаздела)
	
	ДанныеТаблДокумента = Новый Структура;
	
	// Многоуровневые разделы.
	//
	Если мСтруктураМногоуровневыхРазделов.Свойство(НаимРаздела) Тогда
		
		СтруктураДанных = Новый Структура();
		СтруктураДанных.Вставить("КодОперации", ТабличныйДокумент.Область("КодОперации").Значение);
		СтруктураДанных.Вставить("НалБазаИтого", ТабличныйДокумент.Область("НалБазаИтого").Значение);
		ДанныеТаблДокумента.Вставить("Данные", СтруктураДанных);
		
		СтруктураДанныхМногострочныхЧастей = Новый Структура;
		Для каждого ЭлемСтруктуры Из СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей Цикл
			
			Если ЭлемСтруктуры.Значение["УровеньПодчинения"] = 0 Тогда
				ДеревоДанных = Новый ДеревоЗначений;
				ДеревоДанных.Колонки.Добавить("Данные");
				ДеревоДанных.Колонки.Добавить("ДанныеМногострочныхЧастей");
				ДеревоДанных.Колонки.Добавить("АдресТабличногоДокумента");
				
				СформироватьДеревоМногострочнойЧастиПоДаннымТабличногоДокумента(ЭлемСтруктуры.Ключ, ДеревоДанных);
				
				СтруктураДанныхМногострочныхЧастей.Вставить(ЭлемСтруктуры.Ключ, ДеревоДанных);
			КонецЕсли;
			
		КонецЦикла;
		ДанныеТаблДокумента.Вставить("ДанныеМногострочныхЧастей", СтруктураДанныхМногострочныхЧастей);
		
	// Обычные разделы.
	//
	Иначе
		
		Для Инд = 0 По ТабличныйДокумент.Области.Количество() - 1 Цикл
			
			ТекОбласть = ТабличныйДокумент.Области[Инд];
			
			Если Тип(ТекОбласть) = Тип("РисунокТабличногоДокумента")
				ИЛИ ТекОбласть.ТипОбласти <> ТипОбластиЯчеекТабличногоДокумента.Прямоугольник
				ИЛИ ТекОбласть.СодержитЗначение <> Истина Тогда
				Продолжить;
			КонецЕсли;
			
			ДанныеТаблДокумента.Вставить(ТекОбласть.Имя, ТекОбласть.Значение);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ДанныеТаблДокумента;
	
КонецФункции

&НаСервере
Процедура СформироватьДеревоМногострочнойЧастиПоДаннымТабличногоДокумента(ИмяГруппы, ДеревоДанных, Координаты = "")
	
	Если НЕ СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей.Свойство(ИмяГруппы) Тогда
		Возврат;
	КонецЕсли;
	
	МассивИменГраф = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппы]["ИменаГраф"];
	ИмяПервойГрафы = МассивИменГраф[0];
	
	Инд_Число = 1;
	Пока ТабличныйДокумент.Области.Найти(ИмяПервойГрафы + Координаты + СтрокаСИндексомПоказателя(Инд_Число)) <> Неопределено Цикл
		НовВетка = ДеревоДанных.Строки.Добавить();
		
		// Заполнение данными из текущей строки многострочной части.
		Данные = Новый Структура;
		Инд = СтрокаСИндексомПоказателя(Инд_Число);
		Для каждого ИмяГрафы Из МассивИменГраф Цикл
			Обл = ТабличныйДокумент.Области.Найти(ИмяГрафы + Координаты + Инд);
			Если Обл <> Неопределено Тогда
				Данные.Вставить(ИмяГрафы, Обл.Значение);
			КонецЕсли;
		КонецЦикла;
		НовВетка.Данные = Данные;
		
		// Заполнение данными из строк многострочных частей, подчиненных текущей строке многострочной части.
		ДанныеМногострочныхЧастей = Новый Структура;
		ИменаПодчГрупп = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппы]["ИменаПодчиненныхГрупп"];
		Для каждого ИмяПодчГруппы Из ИменаПодчГрупп Цикл
			ДеревоПодчСтрок = Новый ДеревоЗначений;
			ДеревоПодчСтрок.Колонки.Добавить("Данные");
			ДеревоПодчСтрок.Колонки.Добавить("ДанныеМногострочныхЧастей");
			ДеревоПодчСтрок.Колонки.Добавить("АдресТабличногоДокумента");
			ПодчКоординаты = Координаты + Инд;
			СформироватьДеревоМногострочнойЧастиПоДаннымТабличногоДокумента(
				ИмяПодчГруппы, ДеревоПодчСтрок, ПодчКоординаты);
			ДанныеМногострочныхЧастей.Вставить(ИмяПодчГруппы, ДеревоПодчСтрок);
		КонецЦикла;
		НовВетка.ДанныеМногострочныхЧастей = ДанныеМногострочныхЧастей;
		
		Инд_Число = Инд_Число + 1;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ПомещениеДанныхИзМестХраненияВТабличныйДокумент

&НаСервере
Процедура ВывестиДанныеВТабличныйДокументНаСервере(ИмяТекРаздела, НовыеНомераСтрокМногоуровнегоРаздела = Неопределено)
	
	СохранитьДанныеРаздела(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
	ВывестиДанныеВТабличныйДокумент(ИмяТекРаздела, НовыеНомераСтрокМногоуровнегоРаздела);
	
	СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяТекРаздела;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиДанныеВТабличныйДокумент(ИмяТекРаздела, НовыеНомераСтрокМногоуровнегоРаздела = Неопределено)
	
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + ИмяТекРаздела));
	
	// Многоуровневые разделы.
	//
	Если мСтруктураМногоуровневыхРазделов.Свойство(ИмяТекРаздела) Тогда
		
		ДеревоДанныхРаздела = ПолучитьИзВременногоХранилища(
			СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяТекРаздела]);
		
		ТекВетка = ДеревоДанныхРаздела;
		
		Для каждого НомерСтроки Из НовыеНомераСтрокМногоуровнегоРаздела Цикл
			ТекВетка = ТекВетка.Строки[НомерСтроки - 1];
		КонецЦикла;
		
		Если ТекВетка.АдресТабличногоДокумента <> Неопределено Тогда
			ТабличныйДокумент.Очистить();
			ТабличныйДокумент.Вывести(ПолучитьИзВременногоХранилища(ТекВетка.АдресТабличногоДокумента));
		КонецЕсли;
		
		Если НЕ СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Тогда
			КодОперации = ТабличныйДокумент.Области["КодОперации"].Значение;
			СуммаНалБаз = 0;
			Для каждого ЭлМассива Из СтруктураРеквизитовФормы.ИтоговыеСуммыПоКодамОпераций Цикл
				Если ЭлМассива["КодОперации"] = КодОперации Тогда
					СуммаНалБаз = СуммаНалБаз + ЭлМассива["НалБазаИтого"];
				КонецЕсли;
			КонецЦикла;
			ТабличныйДокумент.Области["НалБазаИтого"].Значение = СуммаНалБаз;
		КонецЕсли;
		
		СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела = НовыеНомераСтрокМногоуровнегоРаздела;
		
	// Обычные разделы.
	//
	Иначе
		
		Для Каждого ЭлСтруктуры Из ЭтаФорма["СтруктураДанных" + ИмяТекРаздела] Цикл
			Обл = ТабличныйДокумент.Области.Найти(ЭлСтруктуры.Ключ);
			Если Обл <> Неопределено Тогда
				Обл.Значение = ЭлСтруктуры.Значение;
			КонецЕсли;
		КонецЦикла;
		
		Если ИмяТекРаздела = "Титульный" Тогда
			
			Если СтруктураРеквизитовФормы.Свойство("ДекларацияНДС") Тогда
				ТабличныйДокумент.Область("ДекларацияНДС").Значение = ПредставлениеОтчета(
					СтруктураРеквизитовФормы["ДекларацияНДС"]);
				ТабличныйДокумент.Область("ОтправкаДеклНДС").Значение = ПредставлениеОтправкиОтчета(
					СтруктураРеквизитовФормы.СведенияОтправкиДеклНДС["ОтправкаДеклНДС"]);
				ТабличныйДокумент.Область("ВыгрузкаДеклНДС").Значение = ПредставлениеВыгрузкиОтчета(
					СтруктураРеквизитовФормы.СведенияВыгрузкиДеклНДС["ВыгрузкаДеклНДС"]);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	УстановитьДоступностьОбластей(ЭтаФорма, ИмяТекРаздела);
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьСведенияОтправокВыгрузокДекларацииНДС(ВозврПараметры = Неопределено, ИзменятьДанныеОтчета = Истина)
	
	ИмяФайла = Неопределено;
	
	ВозврПараметры = Новый Структура("КолОтправок, КолВыгрузок", 0, 0);
	
	// Поиск имени файла в отправках.
	
	СведенияПоВсемОтправкам
		= СведенияПоОтправкам.СведенияПоВсемОтправкам(СтруктураРеквизитовФормы["ДекларацияНДС"]);
	
	КолОтправок = СведенияПоВсемОтправкам.Количество();
	
	ВозврПараметры["КолОтправок"] = КолОтправок;
	
	Если ИзменятьДанныеОтчета Тогда
		
		Если КолОтправок > 0 Тогда
			Идентификатор = СведенияПоВсемОтправкам[0].ИдентификаторОтправки;
			СведенияПоОтправке = СведенияПоОтправкам.СведенияПоОтправке(
				СтруктураРеквизитовФормы["ДекларацияНДС"], Идентификатор);
			СтруктураПолногоИмениФайла
				= ОбщегоНазначенияКлиентСервер.РазложитьПолноеИмяФайла(СведенияПоОтправке.ИмяФайла);
			Отправка = ПредставлениеОтправкиОтчета(СведенияПоВсемОтправкам[0]);
			ИмяФайла = СтруктураПолногоИмениФайла.ИмяБезРасширения;
			СтруктураРеквизитовФормы.СведенияОтправкиДеклНДС["ОтправкаДеклНДС"] = Отправка;
			СтруктураРеквизитовФормы.СведенияОтправкиДеклНДС["ИмяФайлаОтправкиДеклНДС"] = ИмяФайла;
			Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
				ТабличныйДокумент.Область("ОтправкаДеклНДС").Значение = Отправка;
			КонецЕсли;
		Иначе
			СтруктураРеквизитовФормы.СведенияОтправкиДеклНДС["ОтправкаДеклНДС"] = Неопределено;
			СтруктураРеквизитовФормы.СведенияОтправкиДеклНДС["ИмяФайлаОтправкиДеклНДС"] = Неопределено;
			ТабличныйДокумент.Область("ОтправкаДеклНДС").Очистить();
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ИмяФайла) Тогда
			// Очистка сведений выгрузки, если имя файла найдено в отправках.
			СтруктураРеквизитовФормы.СведенияВыгрузкиДеклНДС.Вставить("ВыгрузкаДеклНДС", Неопределено);
			СтруктураРеквизитовФормы.СведенияВыгрузкиДеклНДС.Вставить("ИмяФайлаВыгрузкиДеклНДС", Неопределено);
			Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
				ТабличныйДокумент.Область("ВыгрузкаДеклНДС").Очистить();
			КонецЕсли;
			Возврат;
		КонецЕсли;
		
		Модифицированность = Истина;
		
	КонецЕсли;
	
	// Поиск имени файла в выгрузках.
	
	ПараметрыОтбора = Новый Структура("Организация, Основание",
		СтруктураРеквизитовФормы.Организация, СтруктураРеквизитовФормы.ДекларацияНДС);
	ВыгрузкиДекларацииНДС
		= РегламентированнаяОтчетностьВызовСервера.ДокументыВыгрузкиДекларацииНДС(ПараметрыОтбора);
	
	КолВыгрузок = ВыгрузкиДекларацииНДС.Количество();
	
	ВозврПараметры["КолВыгрузок"] = КолВыгрузок;
	
	Если ИзменятьДанныеОтчета Тогда
		
		Если КолВыгрузок > 0 Тогда
			СтруктураПолногоИмениФайла
				= ОбщегоНазначенияКлиентСервер.РазложитьПолноеИмяФайла(ВыгрузкиДекларацииНДС[0].Представление);
			Выгрузка = ВыгрузкиДекларацииНДС[0].Значение;
			ИмяФайла = СтруктураПолногоИмениФайла.ИмяБезРасширения;
			СтруктураРеквизитовФормы.СведенияВыгрузкиДеклНДС["ВыгрузкаДеклНДС"] = Выгрузка;
			СтруктураРеквизитовФормы.СведенияВыгрузкиДеклНДС["ИмяФайлаВыгрузкиДеклНДС"] = ИмяФайла;
			Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
				ТабличныйДокумент.Область("ВыгрузкаДеклНДС").Значение = ПредставлениеВыгрузкиОтчета(
					СтруктураРеквизитовФормы.СведенияВыгрузкиДеклНДС["ВыгрузкаДеклНДС"]);
			КонецЕсли;
		Иначе
			СтруктураРеквизитовФормы.СведенияВыгрузкиДеклНДС["ВыгрузкаДеклНДС"] = Неопределено;
			СтруктураРеквизитовФормы.СведенияВыгрузкиДеклНДС["ИмяФайлаВыгрузкиДеклНДС"] = Неопределено;
			ТабличныйДокумент.Область("ВыгрузкаДеклНДС").Очистить();
		КонецЕсли;
		// Очистка сведений отправки, если имя файла найдено в выгрузках.
		Если ЗначениеЗаполнено(ИмяФайла) Тогда
			СтруктураРеквизитовФормы.СведенияОтправкиДеклНДС["ОтправкаДеклНДС"] = Неопределено;
			СтруктураРеквизитовФормы.СведенияОтправкиДеклНДС["ИмяФайлаОтправкиДеклНДС"] = Неопределено;
			Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
				ТабличныйДокумент.Область("ОтправкаДеклНДС").Очистить();
			КонецЕсли;
		КонецЕсли;
		
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ДобавлениеУдалениеСтраницМногоуровневыхРазделов

&НаКлиенте
Процедура ДобавитьСтраницу(Команда)
	
	ИмяРаздела = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
	
	ДобавитьСтраницуНаСервере(ИмяРаздела);
	
	Обл = ТабличныйДокумент.Области["УдалитьСтраницуЗначок"];
	Обл.Гиперссылка = Истина;
	Обл.Текст = "х";
	Обл = ТабличныйДокумент.Области["УдалитьСтраницу"];
	Обл.Гиперссылка = Истина;
	Обл.Текст = "Удалить страницу";
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьСтраницуНаСервере(ИмяРаздела)
	
	ДеревоДанных = ПолучитьИзВременногоХранилища(
		СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяРаздела]);
	
	Ветка = ДеревоДанных.Строки.Добавить();
	Ветка.Данные = Новый Структура;
	Ветка.ДанныеМногострочныхЧастей = Новый Структура;
	
	ТекНомерСтраницы = ДеревоДанных.Строки.Количество();
	
	// Сохранение данных предыдущей страницы.
	ДанныеТаблДокумента = ДанныеТабличногоДокумента(ИмяРаздела);
	ПредыдущаяВетка = ДеревоДанных.Строки[
		СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[0] - 1];
	ПредыдущаяВетка.Данные = ДанныеТаблДокумента.Данные;
	ПредыдущаяВетка.ДанныеМногострочныхЧастей = ДанныеТаблДокумента.ДанныеМногострочныхЧастей;
	Если ПредыдущаяВетка.АдресТабличногоДокумента <> Неопределено Тогда
		УдалитьИзВременногоХранилища(ПредыдущаяВетка.АдресТабличногоДокумента);
	КонецЕсли;
	ПредыдущаяВетка.АдресТабличногоДокумента = ПоместитьВоВременноеХранилище(
		ТабличныйДокумент.ПолучитьОбласть(), УникальныйИдентификатор);
	
	// Вывод данных новой страницы.
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + ИмяРаздела));
	
	УстановитьНомерПервойСтроки(ЭтаФорма);
	СпрятатьЗначкиУдалитьСтроку();
	
	// Сохранение данных новой страницы.
	ДанныеТаблДокумента = ДанныеТабличногоДокумента(ИмяРаздела);
	Ветка.Данные = ДанныеТаблДокумента.Данные;
	Ветка.ДанныеМногострочныхЧастей = ДанныеТаблДокумента.ДанныеМногострочныхЧастей;
	Ветка.АдресТабличногоДокумента = ПоместитьВоВременноеХранилище(
		ТабличныйДокумент.ПолучитьОбласть(), УникальныйИдентификатор);
	
	Если ИмяРаздела = "Реестр" Тогда
		СтруктураРеквизитовФормы.ИтоговыеСуммыПоКодамОпераций.Добавить(
			Новый Структура("КодОперации,НалБазаИтого", "", 0));
	КонецЕсли;
	
	СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяРаздела]
		= ПоместитьВоВременноеХранилище(ДеревоДанных, УникальныйИдентификатор);
	
	СформироватьДеревоРазделовОтчетаНаСервере();
	
	Для каждого ИскомыйРаздел Из РазделыОтчета.ПолучитьЭлементы() Цикл
		Если ИскомыйРаздел.КолонкаРазделыОтчетаСокрНаим = ИмяРаздела Тогда
			Для каждого НайденнаяСтраница Из ИскомыйРаздел.ПолучитьЭлементы() Цикл
				Если НайденнаяСтраница.КолонкаНомерСтраницыРазделаОтчета = ТекНомерСтраницы Тогда
					Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяСтраница.ПолучитьИдентификатор();
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Очистить();
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Добавить(ТекНомерСтраницы);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтраницу(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("УдалитьСтраницуЗавершение", ЭтотОбъект);
	ТекстВопроса = НСтр("ru='Удалить текущую страницу?'");
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 60, КодВозвратаДиалога.Да);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтраницуЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	ИмяРаздела           = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
	НомУдаляемойСтраницы = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета;
	
	УдалитьСтраницуНаСервере(ИмяРаздела, НомУдаляемойСтраницы);
	
	УправлениеВидимостьюСсылкиУдалитьСтраницу();
	
КонецПроцедуры

&НаСервере
Процедура УдалитьСтраницуНаСервере(ИмяРаздела, НомерУдаляемойСтраницы)
	
	ДеревоДанных = ПолучитьИзВременногоХранилища(
		СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяРаздела]);
	
	КолСтраниц = ДеревоДанных.Строки.Количество();
	
	НомПолучаемойСтраницы = ?(НомерУдаляемойСтраницы = КолСтраниц,
		НомерУдаляемойСтраницы - 1, НомерУдаляемойСтраницы);
	
	Если ДеревоДанных.Строки[НомерУдаляемойСтраницы - 1].АдресТабличногоДокумента <> Неопределено Тогда
		УдалитьИзВременногоХранилища(ДеревоДанных.Строки[НомерУдаляемойСтраницы - 1].АдресТабличногоДокумента);
	КонецЕсли;
	
	ДеревоДанных.Строки.Удалить(НомерУдаляемойСтраницы - 1);
	
	Если ИмяРаздела = "Реестр" Тогда
		СтруктураРеквизитовФормы.ИтоговыеСуммыПоКодамОпераций.Удалить(НомерУдаляемойСтраницы - 1);
	КонецЕсли;
	
	СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяРаздела]
		= ПоместитьВоВременноеХранилище(ДеревоДанных, УникальныйИдентификатор);
	
	СформироватьДеревоРазделовОтчетаНаСервере();
	
	Для каждого ИскомыйРаздел Из РазделыОтчета.ПолучитьЭлементы() Цикл
		Если ИскомыйРаздел.КолонкаРазделыОтчетаСокрНаим = ИмяРаздела Тогда
			Для каждого НайденнаяСтраница Из ИскомыйРаздел.ПолучитьЭлементы() Цикл
				Если НайденнаяСтраница.КолонкаНомерСтраницыРазделаОтчета = НомПолучаемойСтраницы Тогда
					Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяСтраница.ПолучитьИдентификатор();
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Очистить();
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Добавить(НомПолучаемойСтраницы);
	
	ВывестиДанныеВТабличныйДокумент(ИмяРаздела, СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела);
	
	ПронумероватьСтрокиТабличнойЧасти(ИмяРаздела);
	
	Модифицированность = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область ДобавлениеУдалениеДополнительныхСтрокМногострочныхЧастейМногоуровневыхРазделов

&НаКлиенте
Процедура ДобавитьСтроку(Команда)
	
	ВставитьДополнительнуюСтроку();
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСтрокуКопированием(Команда)
	
	ВставитьДополнительнуюСтроку(Истина);
	
КонецПроцедуры

&НаСервере
Процедура ВставитьДополнительнуюСтроку(Знач Копирование = Ложь)
	
	ИмяТекОбласти = Элементы.ТабличныйДокумент.ТекущаяОбласть.Имя;
	
	Если СтрНайти(ИмяТекОбласти, "ДобавитьСтроку") Тогда
		ИмяОбластиПреемника = СтрЗаменить(ИмяТекОбласти, "ДобавитьСтроку", "");
		ИмяОбластиПреемника = СтрЗаменить(ИмяОбластиПреемника, "Значок", "");
		ИмяГруппы = Лев(ИмяОбластиПреемника, СтруктураРеквизитовФормы.ДлинаИмениГруппы);
		ИмяОбластиПреемника = "ДобавлениеСтроки" + ИмяОбластиПреемника;
	Иначе
		ИмяГруппы = Лев(ИмяТекОбласти, СтруктураРеквизитовФормы.ДлинаИмениГруппы);
		ИмяГрафы = Лев(ИмяТекОбласти, СтруктураРеквизитовФормы.ДлинаИмениГрафы);
		МаксИнд = ИндексПоказателя(ИмяТекОбласти);
		Координаты = СтрокаСКоординатамиПоказателя(ИмяТекОбласти);
		Пока ТабличныйДокумент.Области.Найти(ИмяГрафы + Координаты + СтрокаСИндексомПоказателя(МаксИнд + 1)) <> Неопределено Цикл
			МаксИнд = МаксИнд + 1;
		КонецЦикла;
		ИмяОбластиПреемника = "ДобавлениеСтроки" + ИмяГруппы + Координаты + СтрокаСИндексомПоказателя(МаксИнд);
	КонецЕсли;
	
	Если ПревышеноДопустимоеКоличествоСтрокТабличногоДокумента(
		СтруктураРеквизитовФормы.НаимТекущегоРаздела, ИмяГруппы) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Превышено допустимое количество строк табличного документа. Необходимо добавить страницу и продолжить ввод данных.'");
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
	
	ВставитьДопСтроку(СтруктураРеквизитовФормы.НаимТекущегоРаздела, ИмяГруппы, ИмяОбластиПреемника, Копирование);
	
	СохранитьДанныеРаздела(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
	Если Копирование Тогда
		Расчет(ЭтаФорма, СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	КонецЕсли;
	
	Если СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей.Свойство(ИмяГруппы) Тогда
		ИмяГрафыНумерацииСтрок = Неопределено;
		СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппы].Свойство(
			"ИмяГрафыНумерацииСтрок", ИмяГрафыНумерацииСтрок);
		Если ИмяГрафыНумерацииСтрок <> Неопределено Тогда
			ПронумероватьСтрокиТабличнойЧасти(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВставитьДопСтроку(Знач ИмяРаздела, Знач ИмяГруппы, Знач ИмяОбластиПреемника, Знач Копирование = Ложь)
	
	Если НЕ СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей.Свойство(ИмяГруппы) Тогда
		Возврат;
	КонецЕсли;
	
	Модифицированность = Истина;
	
	НачИндекс = "_1";
	
	Если СтрНайти(ИмяОбластиПреемника, "ДобавлениеСтроки" + ИмяГруппы) > 0 Тогда
		
		ОблПреемник = ТабличныйДокумент.Области.Найти(ИмяОбластиПреемника);
		
		Если Копирование Тогда
			
			ТекОбласть = Элементы.ТабличныйДокумент.ТекущаяОбласть;
			
			ОбластьДляКопированияВерх = ТекОбласть.Верх;
			
			ОбластьДляКопированияНиз = Неопределено;
			ТекКоординаты = СтрокаСКоординатамиПоказателя(ТекОбласть.Имя);
			ТекИндекс_Число = ИндексПоказателя(ТекОбласть.Имя);
			СледИндекс_Число = ТекИндекс_Число + 1;
			ИскомаяОбласть = ТабличныйДокумент.Области.Найти("УдалитьСтроку" + ИмяГруппы + ТекКоординаты + СтрокаСИндексомПоказателя(СледИндекс_Число));
			Если ИскомаяОбласть = Неопределено Тогда
				ИскомаяОбласть = ТабличныйДокумент.Области.Найти("ДобавлениеСтроки" + ИмяГруппы + ТекКоординаты + СтрокаСИндексомПоказателя(ТекИндекс_Число));
			КонецЕсли;
			Если ИскомаяОбласть <> Неопределено Тогда
				ОбластьДляКопированияНиз = ИскомаяОбласть.Верх - 1;
			КонецЕсли;
			
			Если ОбластьДляКопированияНиз <> Неопределено Тогда
				
				ВремТаблДок = ТабличныйДокумент.ПолучитьОбласть(ОбластьДляКопированияВерх, , ОбластьДляКопированияНиз, );
				
				МассивИменГраф = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппы]["ИменаГраф"];
				
				УровеньПодчиненияИндекс = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппы]["УровеньПодчинения"];
				
				ПреИндекс_Число = ИндексПоказателя(ИмяОбластиПреемника);
				НовИндекс_Число = ПреИндекс_Число + 1;
				
				СоответствиеИменОбластей = Новый Соответствие;
				
				Для каждого ИскомаяОбласть Из ВремТаблДок.Области Цикл
					Если СтрНачинаетсяС(ИскомаяОбласть.Имя, "МногострочнаяЧасть") Тогда
						СоответствиеИменОбластей.Вставить(ИскомаяОбласть.Имя, "");
					Иначе
						МасПодстрок = СтрРазделить(ИскомаяОбласть.Имя, "_", Ложь);
						Если МасПодстрок.Количество() >= УровеньПодчиненияИндекс + 2 Тогда
							МасПодстрок[УровеньПодчиненияИндекс + 1] = Формат(НовИндекс_Число, "ЧГ=");
						КонецЕсли;
						СоответствиеИменОбластей.Вставить(ИскомаяОбласть.Имя, СтрСоединить(МасПодстрок, "_"));
					КонецЕсли;
				КонецЦикла;
				
				НовИмяТекОбл = Неопределено;
				
				Для каждого Эл Из СоответствиеИменОбластей Цикл
					ИскомаяОбласть = ВремТаблДок.Области.Найти(Эл.Ключ);
					Если ИскомаяОбласть <> Неопределено Тогда
						ИскомаяОбласть.Имя = Эл.Значение;
						Если НовИмяТекОбл = Неопределено И СтрНачинаетсяС(ИскомаяОбласть.Имя, МассивИменГраф[0]) Тогда
							НовИмяТекОбл = ИскомаяОбласть.Имя;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
				
				НовКоординаты = СтрокаСКоординатамиПоказателя(ИмяОбластиПреемника);
				
				ПреИндекс_Число = ИндексПоказателя(ИмяОбластиПреемника);
				ПреИндекс = СтрокаСИндексомПоказателя(ПреИндекс_Число);
				
				НовИндекс_Число = ПреИндекс_Число + 1;
				НовИндекс = СтрокаСИндексомПоказателя(НовИндекс_Число);
				
				ПреПостфикс = ИмяГруппы + НовКоординаты + ПреИндекс;
				НовПостфикс = ИмяГруппы + НовКоординаты + НовИндекс;
				
				Обл = ВремТаблДок.Область("УдалитьСтроку" + НовПостфикс);
				Обл.Гиперссылка = Истина;
				Обл.Текст = "х";
				Если НовИндекс_Число = 2 Тогда
					Обл = ТабличныйДокумент.Области.Найти("УдалитьСтроку" + ПреПостфикс);
					Обл.Гиперссылка = Истина;
					Обл.Текст = "х";
				КонецЕсли;
				
				Обл = ТабличныйДокумент.Области.Найти("ДобавитьСтроку" + ПреПостфикс);
				Обл.Имя = "ДобавитьСтроку" + НовПостфикс;
				Обл = ТабличныйДокумент.Области.Найти("ДобавитьСтрокуЗначок" + ПреПостфикс);
				Обл.Имя = "ДобавитьСтрокуЗначок" + НовПостфикс;
				
				ОблПреемник.Имя = "ДобавлениеСтроки" + НовПостфикс;
				
				ВставляемаяОбласть = ВремТаблДок.Область(1, , ВремТаблДок.ВысотаТаблицы, );
				
				ТабличныйДокумент.ВставитьОбласть(
				ВставляемаяОбласть, ОблПреемник, ТипСмещенияТабличногоДокумента.ПоВертикали);
				
				// Установка текущей области после добавления строки копированием.
				Если НовИмяТекОбл <> Неопределено Тогда
					Элементы.ТабличныйДокумент.ТекущаяОбласть = ТабличныйДокумент.Области[НовИмяТекОбл];
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе
			
			ВремТаблДок = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + ИмяРаздела).ПолучитьОбласть();
			
			ИскомаяОбластьМнЧ = ВремТаблДок.Области.Найти("МногострочнаяЧасть" + ИмяГруппы);
			
			ВремТаблДок = ВремТаблДок.ПолучитьОбласть(ИскомаяОбластьМнЧ.Верх, ,
				ИскомаяОбластьМнЧ.Верх + ВысотаМногострочнойЧасти(ИмяГруппы, ВремТаблДок) - 1, );
			
			ВремТаблДок.Область("МногострочнаяЧасть" + ИмяГруппы).Имя = "";
			
			НовКоординаты = СтрокаСКоординатамиПоказателя(ИмяОбластиПреемника);
			
			КолУровнейПодчиненности = СтрЧислоВхождений(НовКоординаты, "_");
			НачКоординаты = "";
			Для НомУр = 1 По КолУровнейПодчиненности Цикл
				НачКоординаты = НачКоординаты + НачИндекс;
			КонецЦикла;
			
			ПреИндекс_Число = ИндексПоказателя(ИмяОбластиПреемника);
			ПреИндекс = СтрокаСИндексомПоказателя(ПреИндекс_Число);
			
			НовИндекс_Число = ПреИндекс_Число + 1;
			НовИндекс = СтрокаСИндексомПоказателя(НовИндекс_Число);
			
			НачПостфикс = ИмяГруппы + НачКоординаты + НачИндекс;
			ПреПостфикс = ИмяГруппы + НовКоординаты + ПреИндекс;
			НовПостфикс = ИмяГруппы + НовКоординаты + НовИндекс;
			
			МассивИменГраф = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппы]["ИменаГраф"];
			Для каждого ИмяГрафы Из МассивИменГраф Цикл
				НачИмяОбл = ИмяГрафы + НачКоординаты + НачИндекс;
				НовИмяОбл = ИмяГрафы + НовКоординаты + НовИндекс;
				
				ОбластьЯчейки = ВремТаблДок.Области[НачИмяОбл];
				ОбластьЯчейки.Имя = НовИмяОбл;
				
				Если ОбластьЯчейки.СодержитЗначение = Истина Тогда
					ОбластьЯчейки.Очистить();
				КонецЕсли;
			КонецЦикла;
			
			Обл = ВремТаблДок.Область("УдалитьСтроку" + НачПостфикс);
			Обл.Имя = "УдалитьСтроку" + НовПостфикс;
			
			Обл = ВремТаблДок.Область("УдалитьСтроку" + НовПостфикс);
			Обл.Гиперссылка = Истина;
			Обл.Текст = "х";
			Если НовИндекс_Число = 2 Тогда
				Обл = ТабличныйДокумент.Области.Найти("УдалитьСтроку" + ПреПостфикс);
				Обл.Гиперссылка = Истина;
				Обл.Текст = "х";
			КонецЕсли;
			
			Обл = ТабличныйДокумент.Области.Найти("ДобавитьСтроку" + ПреПостфикс);
			Обл.Имя = "ДобавитьСтроку" + НовПостфикс;
			Обл = ТабличныйДокумент.Области.Найти("ДобавитьСтрокуЗначок" + ПреПостфикс);
			Обл.Имя = "ДобавитьСтрокуЗначок" + НовПостфикс;
			
			ОблПреемник.Имя = "ДобавлениеСтроки" + НовПостфикс;
			
			// Обновление координат в именах областей подчиненных многострочных частей.
			ИменаПодчиненныхГрупп = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[
				ИмяГруппы]["ИменаПодчиненныхГрупп"];
			Для каждого ИмяПодчГруппы Из ИменаПодчиненныхГрупп Цикл
				ПарамРеинд = Новый Структура("ИмяГруппы,ПреКоординаты,НовКоординаты",
					ИмяПодчГруппы, НачКоординаты + НачИндекс, НовКоординаты + НовИндекс);
				РеиндексироватьПодчиненныеДопСтрокиПриДобавлении(ВремТаблДок, ПарамРеинд);
			КонецЦикла;
			
			ВставляемаяОбласть = ВремТаблДок.Область(1, , ВремТаблДок.ВысотаТаблицы, );
			
			// Изменения в оформлении ячеек: установка значения "НетЛинии"/"Сплошная" для
			// свойства "ГраницаСнизу" (в случае задания номеров специальных колонок):
			НомераСпецКолонок = Неопределено;
			СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппы].Свойство(
				"КолонкиСИзмНижнГраницей", НомераСпецКолонок);
			Если НомераСпецКолонок <> Неопределено Тогда
				Для каждого НомКолонки Из НомераСпецКолонок Цикл
					// Удаление линии в определенных колонках последней (до добавления) строки.
					Обл = ТабличныйДокумент.Область(
						ОблПреемник.Верх - 1, НомКолонки, ОблПреемник.Верх - 1, НомКолонки);
					Если Обл <> Неопределено Тогда
						Обл.ГраницаСнизу = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.НетЛинии);
					КонецЕсли;
					// Установка линии в определенных колонках добавляемой строки.
					Обл = ВремТаблДок.Область(
						ВставляемаяОбласть.Низ, НомКолонки, ВставляемаяОбласть.Низ, НомКолонки);
					Если Обл <> Неопределено Тогда
						Обл.ГраницаСнизу = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			ТабличныйДокумент.ВставитьОбласть(
				ВставляемаяОбласть, ОблПреемник, ТипСмещенияТабличногоДокумента.ПоВертикали);
			
			// Установка текущей области после добавления строки.
			НовИмяТекОбл = МассивИменГраф[0] + НовКоординаты + НовИндекс;
			НовТекОбл = ТабличныйДокумент.Области[НовИмяТекОбл];
			Элементы.ТабличныйДокумент.ТекущаяОбласть = НовТекОбл;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтроку(Команда)
	
	ИмяТекОбласти = Элементы.ТабличныйДокумент.ТекущаяОбласть.Имя;
	ИмяТекОбласти = СтрЗаменить(ИмяТекОбласти, "УдалитьСтроку", "");
	
	ИмяГруппы = Лев(ИмяТекОбласти, СтруктураРеквизитовФормы.ДлинаИмениГруппы);
	
	Если НЕ СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей.Свойство(ИмяГруппы) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Не выбрана удаляемая строка многострочного раздела.'");
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("УдалитьСтрокуЗавершение", ЭтотОбъект);
	ДопТекст = ДополнительныйТекстПриДобавленииУдаленииСтрок(ИмяГруппы);
	Если ДопТекст <> Неопределено Тогда
		ТекстВопроса = ДопТекст.ТекстВопросаПередУдалениемСтроки;
	Иначе
		ТекстВопроса = НСтр("ru='Удалить выбранную строку?'");
	КонецЕсли;
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтрокуЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	УдалитьДопСтрокуНаСервере();
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьДопСтрокуНаСервере()
	
	ИмяТекОбласти = Элементы.ТабличныйДокумент.ТекущаяОбласть.Имя;
	
	УдалитьДопСтроку(ИмяТекОбласти);
	
	СохранитьДанныеРаздела(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
	Расчет(ЭтаФорма, СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
	ИмяГруппы = СтрЗаменить(ИмяТекОбласти, "УдалитьСтроку", "");
	ИмяГруппы = Лев(ИмяГруппы, СтруктураРеквизитовФормы.ДлинаИмениГруппы);
	Если СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей.Свойство(ИмяГруппы) Тогда
		ИмяГрафыНумерацииСтрок = Неопределено;
		СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппы].Свойство(
			"ИмяГрафыНумерацииСтрок", ИмяГрафыНумерацииСтрок);
		Если ИмяГрафыНумерацииСтрок <> Неопределено Тогда
			ПронумероватьСтрокиТабличнойЧасти(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьДопСтроку(ИмяОбласти)
	
	ИмяГруппы = СтрЗаменить(ИмяОбласти, "УдалитьСтроку", "");
	ИмяГруппы = Лев(ИмяГруппы, СтруктураРеквизитовФормы.ДлинаИмениГруппы);
	
	ТекКоординаты = СтрокаСКоординатамиПоказателя(ИмяОбласти);
	
	ТекИндекс_Число = ИндексПоказателя(ИмяОбласти);
	ТекИндекс = СтрокаСИндексомПоказателя(ТекИндекс_Число);
	ТекПостфикс = ИмяГруппы + ТекКоординаты + ТекИндекс;
	
	МассивИменГраф = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппы]["ИменаГраф"];
	ИмяПервойГрафы = МассивИменГраф[0];
	
	ОблДобавлениеСтроки = ТабличныйДокумент.Области.Найти("ДобавлениеСтроки" + ТекПостфикс);
	
	// Удаляется последняя строка.
	//
	Если ОблДобавлениеСтроки <> Неопределено Тогда
		
		ПреИндекс_Число = ТекИндекс_Число - 1;
		ПреИндекс = СтрокаСИндексомПоказателя(ПреИндекс_Число);
		ПреПостфикс = ИмяГруппы + ТекКоординаты + ПреИндекс;
		
		ОблУдаляемогоПоказателя = ТабличныйДокумент.Область(ИмяПервойГрафы + ТекКоординаты + ТекИндекс);
		
		ВерхУдОбласти = ОблУдаляемогоПоказателя.Верх;
		НизУдОбласти  = ОблДобавлениеСтроки.Верх - 1;
		
		УдаляемаяОбласть = ТабличныйДокумент.Область(ВерхУдОбласти, , НизУдОбласти, );
		ТабличныйДокумент.УдалитьОбласть(УдаляемаяОбласть, ТипСмещенияТабличногоДокумента.ПоВертикали);
		
		Обл = ТабличныйДокумент.Области.Найти("ДобавлениеСтроки" + ТекПостфикс);
		Обл.Имя = "ДобавлениеСтроки" + ПреПостфикс;
		Обл = ТабличныйДокумент.Области.Найти("ДобавитьСтроку" + ТекПостфикс);
		Обл.Имя = "ДобавитьСтроку" + ПреПостфикс;
		Обл = ТабличныйДокумент.Области.Найти("ДобавитьСтрокуЗначок" + ТекПостфикс);
		Обл.Имя = "ДобавитьСтрокуЗначок" + ПреПостфикс;
		
		Если ПреИндекс_Число = 1 Тогда
			Обл = ТабличныйДокумент.Область("УдалитьСтроку" + ПреПостфикс);
			Обл.Гиперссылка = Ложь;
			Обл.Текст = "";
		КонецЕсли;
		
		// Изменения в оформлении ячеек в случае задания номеров специальных колонок.
		НомераСпецКолонок = Неопределено;
		СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппы].Свойство(
			"КолонкиСИзмНижнГраницей", НомераСпецКолонок);
		Если НомераСпецКолонок <> Неопределено Тогда
			Для каждого НомКолонки Из НомераСпецКолонок Цикл
				// Установка линии в определенных колонках последней (после удаления) строки.
				Обл = ТабличныйДокумент.Область(
					ВерхУдОбласти - 1, НомКолонки, ВерхУдОбласти - 1, НомКолонки);
				Если Обл <> Неопределено Тогда
					Обл.ГраницаСнизу = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		НовИмяТекОбл = ИмяПервойГрафы + ТекКоординаты + ПреИндекс;
		Элементы.ТабличныйДокумент.ТекущаяОбласть = ТабличныйДокумент.Области[НовИмяТекОбл];
		
	// Удаляемая строка не последняя.
	//
	Иначе
		
		НовИндекс_Число = ТекИндекс_Число + 1;
		НовИндекс = СтрокаСИндексомПоказателя(НовИндекс_Число);
		
		ОблУдаляемогоПоказателя = ТабличныйДокумент.Область(ИмяПервойГрафы + ТекКоординаты + ТекИндекс);
		ОблСледующегоПоказателя = ТабличныйДокумент.Область(ИмяПервойГрафы + ТекКоординаты + НовИндекс);
		
		ВерхУдОбласти = ОблУдаляемогоПоказателя.Верх;
		НизУдОбласти  = ОблСледующегоПоказателя.Верх - 1;
		
		УдаляемаяОбласть = ТабличныйДокумент.Область(ВерхУдОбласти, , НизУдОбласти, );
		
		// Сохранение свойств "эталонных" областей для последующего восстановления.
		СпОбластейДляВосстановленияПослеУдаления = Новый СписокЗначений;
		ВремТаблДок = ТабличныйДокумент.ПолучитьОбласть(УдаляемаяОбласть.Имя);
		Для каждого ЭлемСтруктуры Из СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей Цикл
			ИмяИскомойобласти = "МногострочнаяЧасть" + ЭлемСтруктуры.Ключ;
			Искомаяобласть = ВремТаблДок.Области.Найти(ИмяИскомойобласти);
			Если Искомаяобласть <> Неопределено Тогда
				ВысотаОбл = Искомаяобласть.Низ - Искомаяобласть.Верх + 1;
				СпОбластейДляВосстановленияПослеУдаления.Добавить(ВысотаОбл, ЭлемСтруктуры.Ключ);
			КонецЕсли;
		КонецЦикла;
		
		ТабличныйДокумент.УдалитьОбласть(УдаляемаяОбласть, ТипСмещенияТабличногоДокумента.ПоВертикали);
		
		НовИндекс_Число = ТекИндекс_Число;
		
		// Реиндексация имен областей текущей многострочной части после удаления строки.
		Пока ТабличныйДокумент.Области.Найти(ИмяПервойГрафы + ТекКоординаты
			+ СтрокаСИндексомПоказателя(НовИндекс_Число + 1)) <> Неопределено Цикл
			
			ПреИндекс = СтрокаСИндексомПоказателя(НовИндекс_Число + 1);
			НовИндекс = СтрокаСИндексомПоказателя(НовИндекс_Число);
			
			Для каждого ИмяГрафы Из МассивИменГраф Цикл
				ПреИмяОбл = ИмяГрафы + ТекКоординаты + ПреИндекс;
				НовИмяОбл = ИмяГрафы + ТекКоординаты + НовИндекс;
				
				ОбластьЯчейки = ТабличныйДокумент.Области[ПреИмяОбл];
				ОбластьЯчейки.Имя = НовИмяОбл;
			КонецЦикла;
			
			ПреПостфикс = ИмяГруппы + ТекКоординаты + ПреИндекс;
			НовПостфикс = ИмяГруппы + ТекКоординаты + НовИндекс;
			
			Обл = ТабличныйДокумент.Области.Найти("УдалитьСтроку" + ПреПостфикс);
			Обл.Имя = "УдалитьСтроку" + НовПостфикс;
			
			// Обновление координат в именах областей подчиненных многострочных частей.
			ИменаПодчиненныхГрупп = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[
				ИмяГруппы]["ИменаПодчиненныхГрупп"];
			Для каждого ИмяПодчГруппы Из ИменаПодчиненныхГрупп Цикл
				ПарамРеинд = Новый Структура("ИмяГруппы,ПреКоординаты,НовКоординаты",
					ИмяПодчГруппы, ТекКоординаты + ПреИндекс, ТекКоординаты + НовИндекс);
				РеиндексироватьПодчиненныеДопСтрокиПриУдалении(ПарамРеинд);
			КонецЦикла;
			
			НовИндекс_Число = НовИндекс_Число + 1;
			
		КонецЦикла;
		
		ПреИндекс = СтрокаСИндексомПоказателя(НовИндекс_Число);
		НовИндекс = СтрокаСИндексомПоказателя(НовИндекс_Число - 1);
		
		ПреПостфикс = ИмяГруппы + ТекКоординаты + ПреИндекс;
		НовПостфикс = ИмяГруппы + ТекКоординаты + НовИндекс;
		
		Обл = ТабличныйДокумент.Области.Найти("ДобавлениеСтроки" + ПреПостфикс);
		Обл.Имя = "ДобавлениеСтроки" + НовПостфикс;
		Обл = ТабличныйДокумент.Области.Найти("ДобавитьСтроку" + ПреПостфикс);
		Обл.Имя = "ДобавитьСтроку" + НовПостфикс;
		Обл = ТабличныйДокумент.Области.Найти("ДобавитьСтрокуЗначок" + ПреПостфикс);
		Обл.Имя = "ДобавитьСтрокуЗначок" + НовПостфикс;
		
		// Восстановление удаленных "эталонных" областей по предварительно сохраненным свойствам.
		НачИндекс = "_1";
		Для каждого ЭлемСписка Из СпОбластейДляВосстановленияПослеУдаления Цикл
			НачКоординаты = "";
			УровеньПодчиненияГруппы = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[
				ЭлемСписка.Представление]["УровеньПодчинения"];
			
			Для НомУр = 1 По УровеньПодчиненияГруппы Цикл
				НачКоординаты = НачКоординаты + НачИндекс;
			КонецЦикла;
			
			ИмяГрафыДляПозиционирования = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[
				ЭлемСписка.Представление]["ИменаГраф"][0];
			
			ИмяОбластиДляПозиционирования = ИмяГрафыДляПозиционирования + НачКоординаты + НачИндекс;
			ОбластьДляПозиционирования = ТабличныйДокумент.Область(ИмяОбластиДляПозиционирования);
			
			ВосстОбластьВерх = ОбластьДляПозиционирования.Верх;
			ВосстОбластьНиз  = ВосстОбластьВерх + ЭлемСписка.Значение - 1;
			
			ВосстОбласть = ТабличныйДокумент.Область(ВосстОбластьВерх, , ВосстОбластьНиз, );
			ВосстОбласть.Имя = "МногострочнаяЧасть" + ЭлемСписка.Представление;
		КонецЦикла;
		
		Если НовИндекс = НачИндекс Тогда // после удаления осталась единственная строка
			Обл = ТабличныйДокумент.Область("УдалитьСтроку" + НовПостфикс);
			Обл.Гиперссылка = Ложь;
			Обл.Текст = "";
		КонецЕсли;
		
		НовИмяТекОбл = ИмяПервойГрафы + ТекКоординаты + ТекИндекс;
		Элементы.ТабличныйДокумент.ТекущаяОбласть = ТабличныйДокумент.Области[НовИмяТекОбл];
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПревышеноДопустимоеКоличествоСтрокТабличногоДокумента(ИмяРаздела, ИмяГруппы)
	
	ДопустимоеКоличествоСтрок = 10000;
	
	Возврат ТабличныйДокумент.ВысотаТаблицы + ВысотаМногострочнойЧасти(ИмяГруппы) > ДопустимоеКоличествоСтрок;
	
КонецФункции

&НаСервере
Функция ВысотаМногострочнойЧасти(ИмяГруппы, ТаблДок = Неопределено)
	
	Если ТаблДок = Неопределено Тогда
		ТаблДок = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + СтруктураРеквизитовФормы.НаимТекущегоРаздела).ПолучитьОбласть();
	КонецЕсли;
	
	ИскомаяОбласть1 = ТаблДок.Области.Найти("МногострочнаяЧасть" + ИмяГруппы);
	Для каждого ИскомаяОбласть2 Из ТаблДок.Области Цикл
		Если Лев(ИскомаяОбласть2.Имя, 16 + СтруктураРеквизитовФормы.ДлинаИмениГруппы)
			= "ДобавлениеСтроки" + ИмяГруппы Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ИскомаяОбласть2.Верх - ИскомаяОбласть1.Верх;
	
КонецФункции

&НаСервере
Процедура РеиндексироватьПодчиненныеДопСтрокиПриДобавлении(ТаблДок, ПараметрыРеиндексации)
	
	ИмяГруппы = ПараметрыРеиндексации["ИмяГруппы"];
	ПреКоординаты = ПараметрыРеиндексации["ПреКоординаты"];
	НовКоординаты = ПараметрыРеиндексации["НовКоординаты"];
	
	МассивИменГраф = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппы]["ИменаГраф"];
	НачИндекс = "_1";
	
	Для каждого ИмяГрафы Из МассивИменГраф Цикл
		ПреИмяОбл = ИмяГрафы + ПреКоординаты + НачИндекс;
		НовИмяОбл = ИмяГрафы + НовКоординаты + НачИндекс;
		
		ОбластьЯчейки = ТаблДок.Области[ПреИмяОбл];
		ОбластьЯчейки.Имя = НовИмяОбл;
	КонецЦикла;
	
	ПреПостфикс = ИмяГруппы + ПреКоординаты + НачИндекс;
	НовПостфикс = ИмяГруппы + НовКоординаты + НачИндекс;
	
	Обл = ТаблДок.Области.Найти("УдалитьСтроку" + ПреПостфикс);
	Обл.Имя = "УдалитьСтроку" + НовПостфикс;
	Обл.Гиперссылка = Ложь;
	Обл.Текст = "";
	
	Обл = ТаблДок.Области.Найти("ДобавлениеСтроки" + ПреПостфикс);
	Обл.Имя = "ДобавлениеСтроки" + НовПостфикс;
	Обл = ТаблДок.Области.Найти("ДобавитьСтроку" + ПреПостфикс);
	Обл.Имя = "ДобавитьСтроку" + НовПостфикс;
	Обл = ТаблДок.Области.Найти("ДобавитьСтрокуЗначок" + ПреПостфикс);
	Обл.Имя = "ДобавитьСтрокуЗначок" + НовПостфикс;
	
	ТаблДок.Область("МногострочнаяЧасть" + ИмяГруппы).Имя = "";
	
	ИменаПодчиненныхГрупп = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[
		ИмяГруппы]["ИменаПодчиненныхГрупп"];
	Для каждого ИмяПодчГруппы Из ИменаПодчиненныхГрупп Цикл
		ПарамРеинд = Новый Структура("ИмяГруппы,ПреКоординаты,НовКоординаты",
			ИмяПодчГруппы, ПреКоординаты + НачИндекс, НовКоординаты + НачИндекс);
		РеиндексироватьПодчиненныеДопСтрокиПриДобавлении(ТаблДок, ПарамРеинд);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура РеиндексироватьПодчиненныеДопСтрокиПриУдалении(ПараметрыРеиндексации)
	
	ИмяГруппы = ПараметрыРеиндексации["ИмяГруппы"];
	ПреКоординаты = ПараметрыРеиндексации["ПреКоординаты"];
	НовКоординаты = ПараметрыРеиндексации["НовКоординаты"];
	
	МассивИменГраф = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппы]["ИменаГраф"];
	ИмяПервойГрафы = МассивИменГраф[0];
	
	Инд_Число = 1;
	Пока ТабличныйДокумент.Области.Найти(ИмяПервойГрафы
		+ ПреКоординаты + СтрокаСИндексомПоказателя(Инд_Число)) <> Неопределено Цикл
		
		Инд = СтрокаСИндексомПоказателя(Инд_Число);
		
		Для каждого ИмяГрафы Из МассивИменГраф Цикл
			ПреИмяОбл = ИмяГрафы + ПреКоординаты + Инд;
			НовИмяОбл = ИмяГрафы + НовКоординаты + Инд;
			
			ОбластьЯчейки = ТабличныйДокумент.Области[ПреИмяОбл];
			ОбластьЯчейки.Имя = НовИмяОбл;
		КонецЦикла;
		
		ПреПостфикс = ИмяГруппы + ПреКоординаты + Инд;
		НовПостфикс = ИмяГруппы + НовКоординаты + Инд;
		
		Обл = ТабличныйДокумент.Области.Найти("УдалитьСтроку" + ПреПостфикс);
		Обл.Имя = "УдалитьСтроку" + НовПостфикс;
		
		ИменаПодчиненныхГрупп = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппы]["ИменаПодчиненныхГрупп"];
		Для каждого ИмяПодчГруппы Из ИменаПодчиненныхГрупп Цикл
			ПарамРеинд = Новый Структура("ИмяГруппы,ПреКоординаты,НовКоординаты",
				ИмяПодчГруппы, ПреКоординаты + Инд, НовКоординаты + Инд);
			РеиндексироватьПодчиненныеДопСтрокиПриУдалении(ПарамРеинд);
		КонецЦикла;
		
		Инд_Число = Инд_Число + 1;
		
	КонецЦикла;
	
	Инд = СтрокаСИндексомПоказателя(Инд_Число - 1);
	
	ПреПостфикс = ИмяГруппы + ПреКоординаты + Инд;
	НовПостфикс = ИмяГруппы + НовКоординаты + Инд;
	
	Обл = ТабличныйДокумент.Области.Найти("ДобавлениеСтроки" + ПреПостфикс);
	Обл.Имя = "ДобавлениеСтроки" + НовПостфикс;
	Обл = ТабличныйДокумент.Области.Найти("ДобавитьСтроку" + ПреПостфикс);
	Обл.Имя = "ДобавитьСтроку" + НовПостфикс;
	Обл = ТабличныйДокумент.Области.Найти("ДобавитьСтрокуЗначок" + ПреПостфикс);
	Обл.Имя = "ДобавитьСтрокуЗначок" + НовПостфикс;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ИндексПоказателя(Знач ИмяОбласти)
	
	МассивСтрок = СтрРазделить(ИмяОбласти, "_");
	
	КолСтрок = МассивСтрок.Количество();
	
	Если КолСтрок = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ИндексСтрока = МассивСтрок[КолСтрок - 1];
	Если СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(ИндексСтрока) Тогда
		Возврат Число(ИндексСтрока);
	КонецЕсли;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СтрокаСИндексомПоказателя(Знач Индекс)
	
	Если ТипЗнч(Индекс) <> Тип("Число") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат "_" + Формат(Индекс, "ЧГ=");
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СтрокаСКоординатамиПоказателя(Знач Координаты)
	
	СтрокаСКоординатами = "";
	
	Если ТипЗнч(Координаты) = Тип("Массив") Тогда
		Для каждого КоординатаЧисло Из Координаты Цикл
			Если ТипЗнч(КоординатаЧисло) <> Тип("Число") Тогда
				Возврат Неопределено;
			КонецЕсли;
			СтрокаСКоординатами = СтрокаСКоординатами + "_" + Формат(КоординатаЧисло, "ЧГ=");
		КонецЦикла;
	ИначеЕсли ТипЗнч(Координаты) = Тип("Строка") Тогда
		МассивСтрок = СтрРазделить(Координаты, "_");
		КолСтрок = МассивСтрок.Количество();
		Если КолСтрок = 0 Тогда
			Возврат Неопределено;
		КонецЕсли;
		МассивСтрок.Удалить(КолСтрок - 1);
		МассивСтрок.Удалить(0);
		Для каждого КоординатаСтрока Из МассивСтрок Цикл
			Если СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(КоординатаСтрока) Тогда
				СтрокаСКоординатами = СтрокаСКоординатами + "_" + Формат(КоординатаСтрока, "ЧГ=");
			Иначе
				Возврат Неопределено;
			КонецЕсли;
		КонецЦикла;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат СтрокаСКоординатами;
	
КонецФункции

#КонецОбласти

#Область Авторасчет

&НаКлиенте
Процедура РасчетНаКлиенте(ИмяТекущейСтраницыПанели = "", ОбластьИмя = "") Экспорт
	
	Расчет(ЭтаФорма, ИмяТекущейСтраницыПанели, ОбластьИмя);
	
КонецПроцедуры

&НаСервере
Процедура РасчетНаСервере(ИмяТекущейСтраницыПанели = "", ОбластьИмя = "") Экспорт
	
	Расчет(ЭтаФорма, ИмяТекущейСтраницыПанели, ОбластьИмя);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура Расчет(Форма, ИмяРаздела = "", ОбластьИмя = "") Экспорт
	
	Перем ТаблицаБлока;
	
	Если Форма.СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Тогда
		Возврат;
	КонецЕсли;
	
	Если ИмяРаздела = "Реестр" Тогда
		
		Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяРаздела Тогда
			
			Если ЗначениеЗаполнено(ОбластьИмя)
				И ((СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.НалБазаИтого, ОбластьИмя) > 0)
				ИЛИ (СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.НалБазаИтого,
				Лев(ОбластьИмя, Форма.СтруктураРеквизитовФормы.ДлинаИмениГрафы)) > 0)) Тогда
				
				НомСтраницы = Форма.СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[0];
				КодОперации = Форма.ТабличныйДокумент.Области["КодОперации"].Значение;
				СуммаНалБаз = 0;
				Если ЗначениеЗаполнено(КодОперации) Тогда
					Ном = 1;
					Пока Форма.ТабличныйДокумент.Области.Найти("П1000012_" + Формат(Ном, "ЧГ=")) <> Неопределено Цикл
						СуммаНалБаз = СуммаНалБаз
							+ Форма.ТабличныйДокумент.Области["П1000012_" + Формат(Ном, "ЧГ=")].Значение;
						Ном = Ном + 1;
					КонецЦикла;
					Форма.СтруктураРеквизитовФормы.ИтоговыеСуммыПоКодамОпераций[НомСтраницы - 1]["КодОперации"] = КодОперации;
					Форма.СтруктураРеквизитовФормы.ИтоговыеСуммыПоКодамОпераций[НомСтраницы - 1]["НалБазаИтого"] = СуммаНалБаз;
					СуммаНалБаз = 0;
					Для каждого ЭлМассива Из Форма.СтруктураРеквизитовФормы.ИтоговыеСуммыПоКодамОпераций Цикл
						Если ЭлМассива["КодОперации"] = КодОперации Тогда
							СуммаНалБаз = СуммаНалБаз + ЭлМассива["НалБазаИтого"];
						КонецЕсли;
					КонецЦикла;
				Иначе
					Форма.СтруктураРеквизитовФормы.ИтоговыеСуммыПоКодамОпераций[НомСтраницы - 1]["КодОперации"] = "";
					Форма.СтруктураРеквизитовФормы.ИтоговыеСуммыПоКодамОпераций[НомСтраницы - 1]["НалБазаИтого"] = 0;
				КонецЕсли;
				Форма.ТабличныйДокумент.Области["НалБазаИтого"].Значение = СуммаНалБаз;
				
			ИначеЕсли НЕ ЗначениеЗаполнено(ОбластьИмя) Тогда
				РасчетВДеревеЗначений(Форма, ИмяРаздела);
			КонецЕсли;
		Иначе
			РасчетВДеревеЗначений(Форма, ИмяРаздела);
		КонецЕсли;
		
	ИначеЕсли ИмяРаздела = "" Тогда
		
		Расчет(Форма, "Реестр");
		
	КонецЕсли;
	
	Форма.Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РасчетВДеревеЗначений(Форма, ИмяРаздела)
	
	Если ИмяРаздела = "Реестр" Тогда
		
		ДеревоДанных = ПолучитьИзВременногоХранилища(
			Форма.СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяРаздела]);
		
		Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяРаздела Тогда
			АктивнаяВетка = ДеревоДанных.Строки[
				Форма.СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[0] - 1];
		КонецЕсли;
		
		Для каждого Ветка Из ДеревоДанных.Строки Цикл
			
			Если Ветка = АктивнаяВетка Тогда
				Ветка.Данные["КодОперации"]
					= Форма.ТабличныйДокумент.Области["КодОперации"].Значение;
				ДанныеМнЧ_П10000 = Ветка.ДанныеМногострочныхЧастей.П10000.Строки;
				Для каждого Ветка_П10000 Из ДанныеМнЧ_П10000 Цикл
					Ветка_П10000.Данные.Вставить("П1000012", Форма.ТабличныйДокумент.Области["П1000012_"
						+ Формат(ДанныеМнЧ_П10000.Индекс(Ветка_П10000) + 1, "ЧГ=")].Значение);
				КонецЦикла;
			КонецЕсли;
			
			НомСтраницы = ДеревоДанных.Строки.Индекс(Ветка);
			КодОперации = Ветка.Данные["КодОперации"];
			СуммаНалБаз = 0;
			Если ЗначениеЗаполнено(КодОперации) Тогда
				ДанныеМнЧ_П10000 = Ветка.ДанныеМногострочныхЧастей.П10000.Строки;
				Для каждого Ветка_П10000 Из ДанныеМнЧ_П10000 Цикл
					СуммаНалБаз = СуммаНалБаз + Ветка_П10000.Данные["П1000012"];
				КонецЦикла;
				Форма.СтруктураРеквизитовФормы.ИтоговыеСуммыПоКодамОпераций[НомСтраницы]["КодОперации"] = КодОперации;
				Форма.СтруктураРеквизитовФормы.ИтоговыеСуммыПоКодамОпераций[НомСтраницы]["НалБазаИтого"] = СуммаНалБаз;
				СуммаНалБаз = 0;
				Для каждого ЭлМассива Из Форма.СтруктураРеквизитовФормы.ИтоговыеСуммыПоКодамОпераций Цикл
					Если ЭлМассива["КодОперации"] = КодОперации Тогда
						СуммаНалБаз = СуммаНалБаз + ЭлМассива["НалБазаИтого"];
					КонецЕсли;
				КонецЦикла;
			Иначе
				Форма.СтруктураРеквизитовФормы.ИтоговыеСуммыПоКодамОпераций[НомСтраницы]["КодОперации"] = "";
				Форма.СтруктураРеквизитовФормы.ИтоговыеСуммыПоКодамОпераций[НомСтраницы]["НалБазаИтого"] = 0;
			КонецЕсли;
			Ветка.Данные["НалБазаИтого"] = СуммаНалБаз;
			
			Если Ветка = АктивнаяВетка Тогда
				Форма.ТабличныйДокумент.Области["НалБазаИтого"].Значение = Ветка.Данные["НалБазаИтого"];
			КонецЕсли;
			
		КонецЦикла;
		
		Форма.СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяРаздела]
			= ПоместитьВоВременноеХранилище(ДеревоДанных, Форма.УникальныйИдентификатор);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтруктуруЗависимыхЯчеекДляАвторасчета()
	
	СтруктураЗависимыхЯчеекДляАвторасчета = Новый Структура;
	
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("НалБазаИтого", "КодОперации;П1000012");
	
КонецПроцедуры

#КонецОбласти

#Область ВыгрузкаИПроверкаВыгрузкиЭлектронногоПредставления

&НаКлиенте
Процедура ЗагрузитьИзФайла(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузитьИзФайлаЗавершение", ЭтотОбъект);
	
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередЗагрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура Выгрузить(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьЗавершение", ЭтотОбъект);
	
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(
		ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайлаЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ЗагрузитьИзФайлаОтчет();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайлаОтчет() Экспорт
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузитьИзФайлаОтчетЗавершение", ЭтотОбъект);
	
	Если Модифицированность Тогда
		СохранитьНаКлиенте(,ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайлаОтчетЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	РегламентированнаяОтчетностьЗагрузкаКлиент.ЗагрузитьИзФайлаОтчет(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Функция ЗагрузкаОтчетаИзФайла(ДанныеДляЗагрузки) Экспорт
	
	Если Модифицированность Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = СтрШаблон(НСтр("ru='Отчет ""%1"" не сохранен.'"), ЭтотОбъект.Заголовок);
		Сообщение.Сообщить();
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ ЗагрузкаОтчетаИзФайлаНаСервере(ДанныеДляЗагрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
		
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция ЗагрузкаОтчетаИзФайлаНаСервере(ДанныеДляЗагрузки)
	
	СформироватьСтруктуруПоказателей();
	ПараметрыОтчета = СформироватьСтруктуруПараметров();
	
	ДеревьяДляЗагрузки = Новый Структура;
	ДеревьяДляЗагрузки.Вставить("ДеревоЗагрузкиРеестра",  ИзвлечьСтруктуруXML("СхемаВыгрузки501_1"));
	ДеревьяДляЗагрузки.Вставить("ДеревоЗагрузкиСведений", ИзвлечьСтруктуруXML("СхемаВыгрузки501_2"));
	
	Если НЕ РегламентированнаяОтчетностьЗагрузка.ЗагрузкаОтчетаИзФайла(
		ЭтотОбъект, ПараметрыОтчета, ДанныеДляЗагрузки, ДеревьяДляЗагрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура ВыгрузитьЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ВыгрузитьОтчет();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьОтчет() Экспорт
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьОтчетЗавершение", ЭтотОбъект);
	
	Если Модифицированность Тогда
		СохранитьНаКлиенте(,ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьОтчетЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ФормаВыгрузкиРеглОтчета = Неопределено;
	
	ФормаВыгрузкиРеглОтчета = ПолучитьФорму(
		"Документ.ВыгрузкаРегламентированныхОтчетов.Форма.ФормаДокумента", , ЭтаФорма);
	
	СпДокОсн = Новый СписокЗначений;
	СпДокОсн.Добавить(СтруктураРеквизитовФормы.мСохраненныйДок);
	
	ФормаВыгрузкиРеглОтчета.СформироватьИЗаписать(СпДокОсн);
	
КонецПроцедуры

&НаКлиенте
Функция УниверсальнаяВыгрузка(ТекстВыгрузки = Неопределено, ПроверятьБлокировки = Истина) Экспорт
	
	Перем ПараметрыВыгрузки;
	
	Если Модифицированность Тогда
		ТекстЗаголовка = ЗаголовокРегламентированногоОтчета(
			СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета, СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
		
		ОргСтр = " (" + СтруктураРеквизитовФормы.Организация + ")";
		Если СтрНайти(ТекстЗаголовка, ОргСтр) = 0 Тогда
			ТекстЗаголовка = ТекстЗаголовка + ОргСтр;
		КонецЕсли;
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Отчет """ + ТекстЗаголовка + """ не сохранен.";
		Сообщение.Сообщить();
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Если Открыта() Тогда
		Если СтруктураРеквизитовФормы.ЕдиницаИзмерения
			<> ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1 Тогда
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='Перед выгрузкой необходимо установить единицу измерения ""в рублях"".'");
			Сообщение.Сообщить();
			
			Возврат Ложь;
			
		КонецЕсли;
		
		Если СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения <> 0 Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='Перед выгрузкой необходимо установить точность ""0"".'");
			Сообщение.Сообщить();
			
			Возврат Ложь;
			
		КонецЕсли;
	КонецЕсли;
	
	Если СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки = Истина Тогда 
		РегламентированнаяОтчетностьКлиент.ПроверитьКонтрольныеСоотношения(ЭтаФорма, ОбработкаКС, Истина);
	КонецЕсли;
	
	Если НЕ УниверсальнаяВыгрузкаXMLНаСервере(ТекстВыгрузки, ПараметрыВыгрузки) Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Функция ЗаголовокРегламентированногоОтчета(ДатаНач, ДатаКон, Периодичность = Неопределено) Экспорт
	
	СтрПериодОтчета = ПредставлениеПериода(НачалоДня(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета),
	КонецДня(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета), "ФП = Истина");
	
	Если СтрНайти(ЭтаФорма.Заголовок, СтрПериодОтчета) = 0 Тогда
		Возврат ЭтаФорма.Заголовок + " за " + СтрПериодОтчета;
	Иначе
		Возврат ЭтаФорма.Заголовок;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция УниверсальнаяВыгрузкаXMLНаСервере(ТекстВыгрузки, ПараметрыВыгрузки)
	
	СформироватьСтруктуруПоказателей();
	ПараметрыВыгрузки = СформироватьСтруктуруПараметров();
	
	ДеревоВыгрузкиРеестра  = ИзвлечьСтруктуруXML("СхемаВыгрузки501_1");
	ДеревоВыгрузкиСведений = ИзвлечьСтруктуруXML("СхемаВыгрузки501_2");
	
	Если НЕ ПроверитьВозможностьВыгрузки(
		ПараметрыВыгрузки, ДеревоВыгрузкиРеестра, ДеревоВыгрузкиСведений) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ЗаполнитьДанными(ПараметрыВыгрузки, ДеревоВыгрузкиРеестра);
	ЗаполнитьДанными(ПараметрыВыгрузки, ДеревоВыгрузкиСведений);
	
	ТекстВыгрузки = Новый Массив;
	
	ТекстВыгрузкиСведений = ВыгрузитьДеревоВXML(ДеревоВыгрузкиСведений, ПараметрыВыгрузки);
	ТекстВыгрузки.Добавить(ВыгрузкаСведений(ТекстВыгрузкиСведений, ПараметрыВыгрузки));
	
	ТекстВыгрузкиРеестра = ВыгрузитьДеревоВXML(ДеревоВыгрузкиРеестра, ПараметрыВыгрузки);
	ТекстВыгрузки.Добавить(ВыгрузкаРеестра(ТекстВыгрузкиРеестра, ПараметрыВыгрузки));
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция СформироватьСтруктуруПоказателей()
	
	мДанныеОтчета = Новый Структура;
	
	СохрСтруктура = СохраненныеДанныеОтчета();
	ПоказателиОтчета = СохрСтруктура.ПоказателиОтчета;
	Для Каждого Раздел Из ПоказателиОтчета Цикл
		мДанныеОтчета.Вставить(СтрЗаменить(Раздел.Ключ, "ПолеТабличногоДокумента", ""),
			РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(Раздел.Значение));
	КонецЦикла;
	
	Для Каждого Раздел Из мСтруктураМногоуровневыхРазделов Цикл
		мДанныеОтчета.Вставить(Раздел.Ключ);
	КонецЦикла;
	
КонецФункции

&НаСервере
Функция СформироватьСтруктуруПараметров()
	
	Титульный = мДанныеОтчета.Титульный;
	
	ПараметрыВыгрузки = Новый Структура;
	ПараметрыВыгрузки.Вставить("ВерсПрог",     РегламентированнаяОтчетность.НазваниеИВерсияПрограммы());
	ПараметрыВыгрузки.Вставить("ДатаДок",      Формат(ТекущаяДатаСеанса(), "ДФ=дд.ММ.гггг"));
	ПараметрыВыгрузки.Вставить("ГодПериодОтч", Формат(СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания, "ДФ=гггг"));
	ПараметрыВыгрузки.Вставить("ПериодОтч",    СокрЛП(Титульный.Период));
	ПараметрыВыгрузки.Вставить("КодИФНС",      СокрЛП(Титульный.НалоговыйОрган));
	ПараметрыВыгрузки.Вставить("ВидДок",       Строка(СтруктураРеквизитовФормы.мСохраненныйДок.Вид));
	ПараметрыВыгрузки.Вставить("ТелОрг",       СокрЛП(Титульный.ТелОрганизации));
	ПараметрыВыгрузки.Вставить("НаимОрг",      СокрЛП(Титульный.НаимОрг));
	ПараметрыВыгрузки.Вставить("ИННОрг",       СокрЛП(СтруктураРеквизитовФормы.Организация.ИНН));
	ПараметрыВыгрузки.Вставить("КППОрг",       СокрЛП(Титульный.КПП));
	ПараметрыВыгрузки.Вставить("КодФормРеорг", СокрЛП(Титульный.КодФормыРеорганизации));
	ПараметрыВыгрузки.Вставить("ИННОргРеорг",  СокрЛП(Титульный.ИННРеорганизованнойОрганизации));
	ПараметрыВыгрузки.Вставить("КППОргРеорг",  СокрЛП(Титульный.КППРеорганизованнойОрганизации));
	ПараметрыВыгрузки.Вставить("КодИФНСПосредника",
		?(СтруктураРеквизитовФормы.Организация.КрупнейшийНалогоплательщик,
		СокрЛП(СтруктураРеквизитовФормы.Организация.КодНалоговогоОрганаПолучателя), ""));
	
	ПараметрыВыгрузки.Вставить("ТипПодписанта",        СокрЛП(Титульный.ПрПодп));
	ПараметрыВыгрузки.Вставить("НаимОргПредставителя", СокрЛП(Титульный.ОргУп));
	ПараметрыВыгрузки.Вставить("НаимДокПредставителя", СокрЛП(Титульный.ДокУпПред));
	
	ФИОИП = РегламентированнаяОтчетность.РазложитьФИО(Титульный.НаимОрг);
	ПараметрыВыгрузки.Вставить("ФамилияИП",  ФИОИП.Фамилия);
	ПараметрыВыгрузки.Вставить("ИмяИП",      ФИОИП.Имя);
	ПараметрыВыгрузки.Вставить("ОтчествоИП", ФИОИП.Отчество);
	
	ПараметрыВыгрузки.Вставить("ЭтоПБОЮЛ", НЕ РегламентированнаяОтчетностьВызовСервера.ЭтоЮридическоеЛицо(
		СтруктураРеквизитовФормы.Организация));
	
	СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(
		СтруктураРеквизитовФормы.Организация, ТекущаяДатаСеанса(), "ФИОБух, ТелБух");
	Если ПараметрыВыгрузки.ЭтоПБОЮЛ И ПустаяСтрока(СведенияОбОрганизации.ФИОБух) Тогда
		ПараметрыВыгрузки.Вставить("ФамилияОтв",  ФИОИП.Фамилия);
		ПараметрыВыгрузки.Вставить("ИмяОтв",      ФИОИП.Имя);
		ПараметрыВыгрузки.Вставить("ОтчествоОтв", ФИОИП.Отчество);
		ПараметрыВыгрузки.Вставить("ТелОтв", ?(ПараметрыВыгрузки.Свойство("ТелОрг"), ПараметрыВыгрузки.ТелОрг, ""));
	Иначе
		ФИОБух = РегламентированнаяОтчетность.РазложитьФИО(СведенияОбОрганизации.ФИОБух);
		ПараметрыВыгрузки.Вставить("ДолжОтв",     "Главный бухгалтер");
		ПараметрыВыгрузки.Вставить("ФамилияОтв",  ФИОБух.Фамилия);
		ПараметрыВыгрузки.Вставить("ИмяОтв",      ФИОБух.Имя);
		ПараметрыВыгрузки.Вставить("ОтчествоОтв", ФИОБух.Отчество);
		ПараметрыВыгрузки.Вставить("ТелОтв",      СведенияОбОрганизации.ТелБух);
	КонецЕсли;
	
	ФИОПодписанта = РегламентированнаяОтчетность.РазложитьФИО(Титульный.ОргПодписант);
	ПараметрыВыгрузки.Вставить("ФамилияПодписанта",  ФИОПодписанта.Фамилия);
	ПараметрыВыгрузки.Вставить("ИмяПодписанта",      ФИОПодписанта.Имя);
	ПараметрыВыгрузки.Вставить("ОтчествоПодписанта", ФИОПодписанта.Отчество);
	
	ПараметрыВыгрузки.Вставить("ИмяКлючевогоУзлаСодержательнойЧасти", "РеестрТрНеф_2");
	
	ПараметрыВыгрузки.Вставить("ИдФайл", ИдентификаторФайлаВыгрузки(ПараметрыВыгрузки, "KO_RRNFTSNDS"));
	
	ПараметрыВыгрузки.Вставить("ИдСведФайл", ИдентификаторФайлаВыгрузки(ПараметрыВыгрузки, "KO_RRNFTSNDS.2"));
	
	ПараметрыВыгрузки.Вставить("ИдСведФайлСРасш", ПараметрыВыгрузки.ИдСведФайл + ".xml");
	
	Если ЗначениеЗаполнено(
		СтруктураРеквизитовФормы.СведенияОтправкиДеклНДС["ИмяФайлаОтправкиДеклНДС"]) Тогда
		ПараметрыВыгрузки.Вставить("ИдНДСФайл",
			СтруктураРеквизитовФормы.СведенияОтправкиДеклНДС["ИмяФайлаОтправкиДеклНДС"]);
	ИначеЕсли ЗначениеЗаполнено(
		СтруктураРеквизитовФормы.СведенияВыгрузкиДеклНДС["ИмяФайлаВыгрузкиДеклНДС"]) Тогда
		ПараметрыВыгрузки.Вставить("ИдНДСФайл",
			СтруктураРеквизитовФормы.СведенияВыгрузкиДеклНДС["ИмяФайлаВыгрузкиДеклНДС"]);
	Иначе
		ПараметрыВыгрузки.Вставить("ИдНДСФайл", "");
	Конецесли;
	
	ВозвращаемыеПараметры = Неопределено;
	ОбработатьСведенияОтправокВыгрузокДекларацииНДС(ВозвращаемыеПараметры, Ложь);
	ПараметрыВыгрузки.Вставить("КолОтправокНДС", ВозвращаемыеПараметры.КолОтправок);
	ПараметрыВыгрузки.Вставить("КолВыгрузокНДС", ВозвращаемыеПараметры.КолВыгрузок);
	
	Возврат ПараметрыВыгрузки;
	
КонецФункции

&НаСервере
Функция ИзвлечьСтруктуруXML(ИмяМакета)
	
	ДеревоСтруктуры = Новый ДеревоЗначений;
	ДеревоСтруктуры.Колонки.Добавить("Код");
	ДеревоСтруктуры.Колонки.Добавить("Тип");
	ДеревоСтруктуры.Колонки.Добавить("Формат");
	ДеревоСтруктуры.Колонки.Добавить("МинРазмерность");
	ДеревоСтруктуры.Колонки.Добавить("МаксРазмерность");
	ДеревоСтруктуры.Колонки.Добавить("Обязательность");
	ДеревоСтруктуры.Колонки.Добавить("Многостраничность");
	ДеревоСтруктуры.Колонки.Добавить("Многострочность");
	ДеревоСтруктуры.Колонки.Добавить("Раздел");
	ДеревоСтруктуры.Колонки.Добавить("Ключ");
	ДеревоСтруктуры.Колонки.Добавить("Условие");
	ДеревоСтруктуры.Колонки.Добавить("ЗначениеПоУмолчанию");
	ДеревоСтруктуры.Колонки.Добавить("Значение");
	ДеревоСтруктуры.Колонки.Добавить("Представление");
	ДеревоСтруктуры.Колонки.Добавить("Показатели");
	
	Макет = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(ИмяМакета);
	
	ВысотаТаблицы = Макет.ВысотаТаблицы;
	
	УчтенныеГруппы = Новый Соответствие;
	
	Для Уровень = 0 По Макет.КоличествоУровнейГруппировокСтрок() - 1 Цикл
		Макет.ПоказатьУровеньГруппировокСтрок(Уровень);
		Для НомерСтроки = 2 По ВысотаТаблицы Цикл
			НомСтр = ВысотаТаблицы - НомерСтроки + 2;
			Если Макет.Область(НомСтр, 0, НомСтр, 0).Видимость И УчтенныеГруппы.Получить(НомСтр) = Неопределено Тогда
				
				РодительскийУзел = ДеревоСтруктуры;
				Если Уровень <> 0 Тогда
					Для Инд = 1 По НомСтр - 2 Цикл
						Узел = УчтенныеГруппы.Получить(НомСтр - Инд);
						Если Узел <> Неопределено Тогда
							РодительскийУзел = Узел;
							Прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				НовСтр = РодительскийУзел.Строки.Вставить(0);
				НовСтр.Код = СокрЛП(Макет.Область(НомСтр, 1, НомСтр, 1).Текст);
				НовСтр.Раздел = СокрЛП(Макет.Область(НомСтр, 2, НомСтр, 2).Текст);
				НовСтр.Ключ = СокрЛП(Макет.Область(НомСтр, 3, НомСтр, 3).Текст);
				НовСтр.Тип = СокрЛП(Макет.Область(НомСтр, 4, НомСтр, 4).Текст);
				НовСтр.Формат = СокрЛП(Макет.Область(НомСтр, 5, НомСтр, 5).Текст);
				МинРазмерность = СокрЛП(Макет.Область(НомСтр, 6, НомСтр, 6).Текст);
				НовСтр.МинРазмерность = ?(ПустаяСтрока(МинРазмерность), ?(НовСтр.Формат = "N", 99999, 0), Число(МинРазмерность));
				МаксРазмерность = СокрЛП(Макет.Область(НомСтр, 7, НомСтр, 7).Текст);
				НовСтр.МаксРазмерность = ?(ПустаяСтрока(МаксРазмерность), 99999, Число(МаксРазмерность));
				НовСтр.Обязательность = СокрЛП(Макет.Область(НомСтр, 8, НомСтр, 8).Текст);
				НовСтр.Многостраничность = НЕ ПустаяСтрока(Макет.Область(НомСтр, 9, НомСтр, 9).Текст);
				НовСтр.Многострочность = НЕ ПустаяСтрока(Макет.Область(НомСтр, 10, НомСтр, 10).Текст);
				НовСтр.Условие = СокрЛП(Макет.Область(НомСтр, 11, НомСтр, 11).Текст);
				НовСтр.ЗначениеПоУмолчанию = СокрЛП(Макет.Область(НомСтр, 12, НомСтр, 12).Текст);
				НовСтр.Представление = СокрЛП(Макет.Область(НомСтр, 13, НомСтр, 13).Текст);
				
				УчтенныеГруппы.Вставить(НомСтр, НовСтр);
				
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат ДеревоСтруктуры;
	
КонецФункции

&НаСервере
Функция ПроверитьВозможностьВыгрузки(ПараметрыВыгрузки, ДеревоВыгрузкиРеестра, ДеревоВыгрузкиСведений)
	
	СтатусПроверки = Истина;
	
	ДанныеМногоуровневыхРазделов = Новый Структура;
	СохрСтруктура = СохраненныеДанныеОтчета();
	Для каждого ЭлементСтруктуры Из СохрСтруктура.ДанныеМногоуровневыхРазделов Цикл
		ДанныеМногоуровневыхРазделов.Вставить(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Значение);
	КонецЦикла;
	
	ВозможныеКодыПериода = "01|02|03|04|05|06|07|08|09|10|11|12|21|22|23|24|51|54|55|56|71|72|73|74|75|76|77|78|79|80|81|82";
	ВозможныеКодыФормыРеорганизции = "0|1|2|3|5|6";
	
	// Титульный лист.
	Если ПараметрыВыгрузки.ЭтоПБОЮЛ Тогда
		Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.ИННОрг) Тогда
			ОписаниеОшибки = "Не задан ИНН индивидуального предпринимателя. Внесите исправление в справочник организаций и обновите сведения в реестре (меню ""Еще"" - ""Обновить"").";
			СообщитьВТС(ОписаниеОшибки, "Титульный", "ИНН");
			СтатусПроверки = Ложь;
		ИначеЕсли СтрДлина(ПараметрыВыгрузки.ИННОрг) <> 12 Тогда
			ОписаниеОшибки = "Задан ИНН индивидуального предпринимателя, не состоящий из 12 цифр. Внесите исправление в справочник организаций и обновите сведения в реестре (меню ""Еще"" - ""Обновить"").";
			СообщитьВТС(ОписаниеОшибки, "Титульный", "ИНН");
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.ФамилияИП) Тогда
			ОписаниеОшибки = "Не задана фамилия налогоплательщика. Укажите фамилию индивидуального предпринимателя в справочнике организаций и обновите сведения в реестре (меню ""Еще"" - ""Обновить"").";
			СообщитьВТС(ОписаниеОшибки, "Титульный", "НаимОрг");
			СтатусПроверки = Ложь;
		КонецЕсли;
		Если ПустаяСтрока(ПараметрыВыгрузки.ИмяИП) Тогда
			ОписаниеОшибки = "Не задано имя налогоплательщика. Укажите имя индивидуального предпринимателя в справочнике организаций и обновите сведения в реестре (меню ""Еще"" - ""Обновить"").";
			СообщитьВТС(ОписаниеОшибки, "Титульный", "НаимОрг");
			СтатусПроверки = Ложь;
		КонецЕсли;
	Иначе
		Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.ИННОрг) Тогда
			ОписаниеОшибки = "Не задан ИНН организации. Внесите исправление в справочник организаций и обновите сведения в реестре (меню ""Еще"" - ""Обновить"").";
			СообщитьВТС(ОписаниеОшибки, "Титульный", "ИНН");
			СтатусПроверки = Ложь;
		ИначеЕсли СтрДлина(ПараметрыВыгрузки.ИННОрг) <> 10 Тогда
			ОписаниеОшибки = "Задан ИНН организации, не состоящий из 10 цифр. Внесите исправление в справочник организаций и обновите сведения в реестре (меню ""Еще"" - ""Обновить"").";
			СообщитьВТС(ОписаниеОшибки, "Титульный", "ИНН");
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.КППОрг) Тогда
			ОписаниеОшибки = "Не задан КПП организации. Внесите исправление в справочник организаций и обновите сведения в реестре (меню ""Еще"" - ""Обновить"").";
			СообщитьВТС(ОписаниеОшибки, "Титульный", "КПП");
			СтатусПроверки = Ложь;
		ИначеЕсли СтрДлина(ПараметрыВыгрузки.КППОрг) <> 9 Тогда
			ОписаниеОшибки = "Задан КПП организации, не состоящий из 9 символов. Внесите исправление в справочник организаций и обновите сведения в реестре (меню ""Еще"" - ""Обновить"").";
			СообщитьВТС(ОписаниеОшибки, "Титульный", "КПП");
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.НаимОрг) Тогда
			ОписаниеОшибки = "Не задано наименование налогоплательщика. Заполните наименование в справочнике организаций и обновите сведения в реестре (меню ""Еще"" - ""Обновить"").";
			СообщитьВТС(ОписаниеОшибки, "Титульный", "НаимОрг");
			СтатусПроверки = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.ПериодОтч) Тогда
		ОписаниеОшибки = "Не задан код налогового периода.";
		СообщитьВТС(ОписаниеОшибки, "Титульный", "Период");
		СтатусПроверки = Ложь;
	ИначеЕсли СтрНайти(ВозможныеКодыПериода, ПараметрыВыгрузки.ПериодОтч) = 0 Тогда
		ОписаниеОшибки = "Задано некорректное значение кода налогового периода.";
		СообщитьВТС(ОписаниеОшибки, "Титульный", "Период");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	КодНалоговогоОргана = СокрЛП(ПараметрыВыгрузки.КодИФНС);
	Если НЕ ЗначениеЗаполнено(КодНалоговогоОргана) Тогда
		ОписаниеОшибки = "Не задан код налогового органа, в который представляется реестр.";
		СообщитьВТС(ОписаниеОшибки, "Титульный", "НалоговыйОрган");
		СтатусПроверки = Ложь;
	ИначеЕсли СтрДлина(КодНалоговогоОргана) <> 4 ИЛИ НЕ СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(КодНалоговогоОргана) Тогда
		ОписаниеОшибки = "Задан код налогового органа, не состоящий из 4 цифр.";
		СообщитьВТС(ОписаниеОшибки, "Титульный", "НалоговыйОрган");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	ПодписаноИндивидуальнымПредпринимателем = (ПараметрыВыгрузки.ЭтоПБОЮЛ И ПараметрыВыгрузки.ТипПодписанта = "1");
	
	Если НЕ ПодписаноИндивидуальнымПредпринимателем Тогда
		Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.ФамилияПодписанта) Тогда
			ОписаниеОшибки = "Не задана фамилия подписанта. Внесите исправление в справочник организаций и обновите сведения в реестре (меню ""Еще"" - ""Обновить"").";
			СообщитьВТС(ОписаниеОшибки, "Титульный", "ОргПодписант");
			СтатусПроверки = Ложь;
		КонецЕсли;
		Если ПустаяСтрока(ПараметрыВыгрузки.ИмяПодписанта) Тогда
			ОписаниеОшибки = "Не задано имя подписанта. Внесите исправление в справочник организаций и обновите сведения в реестре (меню ""Еще"" - ""Обновить"").";
			СообщитьВТС(ОписаниеОшибки, "Титульный", "ОргПодписант");
			СтатусПроверки = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если ПараметрыВыгрузки.ТипПодписанта = "2" И ПустаяСтрока(ПараметрыВыгрузки.НаимДокПредставителя) Тогда
		ОписаниеОшибки = "Не задано наименование документа, подтверждающего полномочия представителя налогоплательщика. Внесите исправление в справочник организаций и обновите сведения в реестре (меню ""Еще"" - ""Обновить"").";
		СообщитьВТС(ОписаниеОшибки, "Титульный", "ДокУпПред");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыВыгрузки.КодФормРеорг)
	 ИЛИ ЗначениеЗаполнено(ПараметрыВыгрузки.ИННОргРеорг)
	 ИЛИ ЗначениеЗаполнено(ПараметрыВыгрузки.КППОргРеорг) Тогда
		Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.КодФормРеорг) Тогда
			СообщитьВТС("Не задан код формы реорганизации (ликвидации).", "Титульный", "КодФормыРеорганизации");
			СтатусПроверки = Ложь;
		КонецЕсли;
		Если ЗначениеЗаполнено(ПараметрыВыгрузки.КодФормРеорг) И ПараметрыВыгрузки.КодФормРеорг <> "0" Тогда
			Если СтрНайти(ВозможныеКодыФормыРеорганизции, ПараметрыВыгрузки.КодФормРеорг) = 0 Тогда
				СообщитьВТС("Задано некорректное значение кода формы реорганизации (ликвидации).", "Титульный", "КодФормыРеорганизации");
				СтатусПроверки = Ложь;
			Иначе
				ДлинаИННОргРеорг = СтрДлина(ПараметрыВыгрузки.ИННОргРеорг);
				Если ДлинаИННОргРеорг <> 10 Тогда
					СообщитьВТС("Не" + ?(ДлинаИННОргРеорг = 0, "", "верно") + " задан ИНН реорганизованной организации.",
					"Титульный", "ИННРеорганизованнойОрганизации");
					СтатусПроверки = Ложь;
				КонецЕсли;
				ДлинаКППОргРеорг = СтрДлина(ПараметрыВыгрузки.КППОргРеорг);
				Если ДлинаКППОргРеорг <> 9 Тогда
					СообщитьВТС("Не" + ?(ДлинаКППОргРеорг = 0, "", "верно") + " задан КПП реорганизованной организации.",
					"Титульный", "КППРеорганизованнойОрганизации");
					СтатусПроверки = Ложь;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СтруктураРеквизитовФормы.ДекларацияНДС) Тогда
		СообщитьВТС("Не задана декларация по налогу на добавленную стоимость, к которой представляется реестр.",
		"Титульный", "ДекларацияНДС");
		СтатусПроверки = Ложь;
	ИначеЕсли ПараметрыВыгрузки.ПериодОтч <> ПериодИзДекларацииНДС() Тогда
		ОписаниеОшибки = "Значение кода налогового периода, заданного в реестре, должно быть равно значению кода налогового периода, заданному в декларации по налогу на добавленную стоимость.";
		СообщитьВТС(ОписаниеОшибки, "Титульный", "Период");
		СтатусПроверки = Ложь;
	ИначеЕсли НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.ИдНДСФайл) Тогда
		Если ПараметрыВыгрузки.КолОтправокНДС = 0 И ПараметрыВыгрузки.КолВыгрузокНДС = 0 Тогда
			СообщитьВТС("В информационной базе данных не найдены сведения об отправленном или выгруженном электронном представлении заданной декларации по налогу на добавленную стоимость, к которой представляется реестр.",
			"Титульный", "ДекларацияНДС");
			СтатусПроверки = Ложь;
		Иначе
			Если ПараметрыВыгрузки.КолОтправокНДС > 0 Тогда
				СообщитьВТС("Не задано отправленное электронное представление декларации по налогу на добавленную стоимость.",
				"Титульный", "ОтправкаДеклНДС");
				СтатусПроверки = Ложь;
			Иначе
				СообщитьВТС("Не задано выгруженное электронное представление декларации по налогу на добавленную стоимость.",
				"Титульный", "ВыгрузкаДеклНДС");
				СтатусПроверки = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// Реестр.
	ДанныеРеестра = ДанныеМногоуровневыхРазделов["Реестр"];
	Для каждого Ветка Из ДанныеРеестра.Строки Цикл
		
		НомерСтраницы = ДанныеРеестра.Строки.Индекс(Ветка) + 1;
		НомерСтраницы_Строка = Формат(НомерСтраницы, "ЧГ=");
		
		ДлинаКодОперации = СтрДлина(СокрЛП(Ветка.Данные["КодОперации"]));
		Если ДлинаКодОперации <> 7 Тогда
			СообщитьВТС("Страница " + НомерСтраницы_Строка + ": не" + ?(ДлинаКодОперации = 0,
			"", "верно") + " задан код операции.", "Реестр", "КодОперации", НомерСтраницы);
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		ДанныеМнЧ_П10000 = Ветка.ДанныеМногострочныхЧастей.П10000.Строки;
		Для каждого Ветка_П10000 Из ДанныеМнЧ_П10000 Цикл
			
			НомерСтрокиП10000 = ДанныеМнЧ_П10000.Индекс(Ветка_П10000) + 1;
			НомерСтрокиП10000_Строка = Формат(НомерСтрокиП10000, "ЧГ=");
			
			НомПП = Ветка_П10000.Данные["П1000001"];
			
			Если НЕ ЗначениеЗаполнено(Ветка_П10000.Данные["П1000003"]) Тогда
				ИмяПок = "П1000003" + "_" + НомерСтрокиП10000_Строка;
				СообщитьВТС("Страница " + НомерСтраницы_Строка + ": в строке "
				+ НомПП + " не задана дата документа, подтверждающего оказание услуг.",
				"Реестр", ИмяПок, НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(Ветка_П10000.Данные["П1000005"]) Тогда
				ИмяПок = "П1000005" + "_" + НомерСтрокиП10000_Строка;
				СообщитьВТС("Страница " + НомерСтраницы_Строка + ": в строке "
				+ НомПП + " не задан номер договора на оказание услуг.",
				"Реестр", ИмяПок, НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(Ветка_П10000.Данные["П1000006"]) Тогда
				ИмяПок = "П1000006" + "_" + НомерСтрокиП10000_Строка;
				СообщитьВТС("Страница " + НомерСтраницы_Строка + ": в строке "
				+ НомПП + " не задано наименование грузоотправителя.",
				"Реестр", ИмяПок, НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(Ветка_П10000.Данные["П1000007"]) Тогда
				ИмяПок = "П1000007" + "_" + НомерСтрокиП10000_Строка;
				СообщитьВТС("Страница " + НомерСтраницы_Строка + ": в строке "
				+ НомПП + " не задан адрес грузоотправителя.",
				"Реестр", ИмяПок, НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			// 11000.
			ДанныеМнЧ_П11000 = Ветка_П10000.ДанныеМногострочныхЧастей.П11000.Строки;
			Для каждого Ветка_П11000 Из ДанныеМнЧ_П11000 Цикл
				
				НомерСтрокиП11000 = ДанныеМнЧ_П11000.Индекс(Ветка_П11000) + 1;
				НомерСтрокиП11000_Строка = Формат(НомерСтрокиП11000, "ЧГ=");
				
				Если НЕ ЗначениеЗаполнено(Ветка_П11000.Данные["П1100008"]) Тогда
					ИмяПок = "П1100008" + "_" + НомерСтрокиП10000_Строка + "_" + НомерСтрокиП11000_Строка;
					СообщитьВТС("Страница " + НомерСтраницы_Строка + ": в строке " + НомПП
					+ " не задан номер маршрутного поручения (телеграммы).",
					"Реестр", ИмяПок, НомерСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
				Если НЕ ЗначениеЗаполнено(Ветка_П11000.Данные["П1100009"]) Тогда
					ИмяПок = "П1100009" + "_" + НомерСтрокиП10000_Строка + "_" + НомерСтрокиП11000_Строка;
					СообщитьВТС("Страница " + НомерСтраницы_Строка + ": в строке " + НомПП
					+ " не задана дата маршрутного поручения (телеграммы).",
					"Реестр", ИмяПок, НомерСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
				Если НЕ ЗначениеЗаполнено(Ветка_П11000.Данные["П1100004"]) Тогда
					ИмяПок = "П1100004" + "_" + НомерСтрокиП10000_Строка + "_" + НомерСтрокиП11000_Строка;
					СообщитьВТС("Страница " + НомерСтраницы_Строка + ": в строке " + НомПП
					+ " не задано наименование пункта назначения нефти и нефтепродуктов (за пределами территории Российской Федерации или на границе Российской Федерации).",
					"Реестр", ИмяПок, НомерСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
				Если НЕ ЗначениеЗаполнено(Ветка_П11000.Данные["П1100010"]) Тогда
					ИмяПок = "П1100010" + "_" + НомерСтрокиП10000_Строка + "_" + НомерСтрокиП11000_Строка;
					СообщитьВТС("Страница " + НомерСтраницы_Строка + ": в строке " + НомПП
					+ " не задано наименование конечного пункта маршрута.",
					"Реестр", ИмяПок, НомерСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
				
			КонецЦикла;
			
			Если ТаблицаСообщений.Количество() >= 100 Тогда
				Возврат СтатусПроверки;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат СтатусПроверки;
	
КонецФункции

&НаСервере
Процедура СообщитьВТС(Описание, Раздел, ИмяЯчейки, ФИО = "")
	
	РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, Описание, Раздел, ИмяЯчейки, ФИО);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанными(ПараметрыВыгрузки, ДеревоВыгрузки)
	
	ОбработатьУсловныеЭлементы(ПараметрыВыгрузки, ДеревоВыгрузки); // формируем точную структуру XML-макета
	ЗаполнитьДаннымиУзел(ПараметрыВыгрузки, ДеревоВыгрузки);
	ОтсечьНезаполненныеНеобязательныеУзлы(ДеревоВыгрузки);
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьУсловныеЭлементы(Знач ПараметрыВыгрузки, Узел)
	
	Если ТипЗнч(Узел) <> Тип("ДеревоЗначений") Тогда
		Если Узел.Код = ПараметрыВыгрузки.ИмяКлючевогоУзлаСодержательнойЧасти Тогда
			Возврат;
		КонецЕсли;
		РегламентированнаяОтчетность.ДополнитьСтруктуруПараметров(мДанныеОтчета, ПараметрыВыгрузки, Узел);
	КонецЕсли;
	КоличествоСтрок = Узел.Строки.Количество();
	Для Инд = 1 По КоличествоСтрок Цикл
		ТекСтр = Узел.Строки.Получить(КоличествоСтрок - Инд);
		Если НЕ ПустаяСтрока(ТекСтр.Условие) Тогда
			Если НЕ РегламентированнаяОтчетность.УсловиеВыполнено(ЭтаФорма, ПараметрыВыгрузки, ТекСтр.Условие) Тогда
				Узел.Строки.Удалить(ТекСтр);
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		ОбработатьУсловныеЭлементы(ПараметрыВыгрузки, ТекСтр);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДаннымиУзел(ПараметрыВыгрузки, Узел, НомерСтроки = Неопределено)
	
	СтрокиУзла = Новый Массив;
	Для Каждого Стр Из Узел.Строки Цикл
		СтрокиУзла.Добавить(Стр);
	КонецЦикла;
	
	Для Каждого Стр из СтрокиУзла Цикл
		Если Стр.Тип = "С" ИЛИ Стр.Тип = "C" Тогда // учет обоих вариантов: кириллицы и латиницы
			Если РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(ПараметрыВыгрузки, "ИмяКлючевогоУзлаСодержательнойЧасти") И Стр.Код = ПараметрыВыгрузки.ИмяКлючевогоУзлаСодержательнойЧасти Тогда
				ЗаполнитьСодержательнуюЧасть(Стр);
			ИначеЕсли Стр.Многострочность Тогда
				НомСтр = 1;
				ПодчиненныйЭлемент = ПолучитьПервыйПодчиненныйУзелСЗаполненнымКлючом(Стр);
				КлючПодчиненногоЭлемента = ПодчиненныйЭлемент.Ключ;
				Пока РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(ПараметрыВыгрузки, КлючПодчиненногоЭлемента + "_" + Формат(НомСтр, "ЧГ=")) Цикл
					УзелСоответствующийСтроке = СкопироватьУзел(Узел, Стр);
					ЗаполнитьДаннымиУзел(ПараметрыВыгрузки, УзелСоответствующийСтроке, НомСтр);
					НомСтр = НомСтр + 1;
				КонецЦикла;
			Иначе
				ЗаполнитьДаннымиУзел(ПараметрыВыгрузки, Стр, НомерСтроки);
			КонецЕсли;
		Иначе
			Если ПустаяСтрока(Стр.ЗначениеПоУмолчанию) Тогда
				Если НЕ ПустаяСтрока(Стр.Ключ) Тогда
					ПолныйКодПоказателя = Стр.Ключ + ?(ЗначениеЗаполнено(НомерСтроки), "_" + Формат(НомерСтроки, "ЧГ="), "");
					ЗначениеПоказателя = Неопределено;
					Если ПараметрыВыгрузки.Свойство(ПолныйКодПоказателя, ЗначениеПоказателя) Тогда
						ВывестиПоказательВXML(Стр, ЗначениеПоказателя);
					Иначе
						ВывестиПоказательВXML(Стр, "");
					КонецЕсли;
				Иначе
					Стр.Значение = "";
				КонецЕсли;
			ИначеЕсли Лев(Стр.ЗначениеПоУмолчанию, 1) = "&" Тогда
				ВывестиПоказательВXML(Стр, ПараметрыВыгрузки[Сред(Стр.ЗначениеПоУмолчанию, 2)]);
			Иначе
				Стр.Значение = Стр.ЗначениеПоУмолчанию;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьПервыйПодчиненныйУзелСЗаполненнымКлючом(Родитель)
	
	Для Каждого Стр из Родитель.Строки Цикл
		Если ЗначениеЗаполнено(Стр.Ключ) Тогда
			Возврат Стр;
		КонецЕсли;
	КонецЦикла;
	Возврат Неопределено;
	
КонецФункции

&НаСервере
Функция СкопироватьУзел(Родитель, Узел, Знач МаксИндекс = Неопределено)
	
	// Нахождение узла с максимальным индексом и с тем же кодом,
	// что и у копируемого, и добавление нового сразу после найденного.
	Если МаксИндекс = Неопределено Тогда
		СтрокиСТемЖеКодом = Родитель.Строки.НайтиСтроки(Новый Структура("Код", Узел.Код), Ложь);
		МаксИндекс = - 1;
		КолСтрокСТемЖеКодом = СтрокиСТемЖеКодом.Количество();
		Если КолСтрокСТемЖеКодом > 0 Тогда
			МаксИндекс = Родитель.Строки.Индекс(СтрокиСТемЖеКодом[КолСтрокСТемЖеКодом - 1]);
		КонецЕсли;
	КонецЕсли;
	
	ИндексСоздаваемогоУзла = МаксИндекс + 1;
	Если ИндексСоздаваемогоУзла >= Родитель.Строки.Количество() ИЛИ ИндексСоздаваемогоУзла = 0 Тогда
		// Аналогичный узел не найден или найденный узел - последний.
		НовыйУзел = Родитель.Строки.Добавить();
	Иначе
		НовыйУзел = Родитель.Строки.Вставить(ИндексСоздаваемогоУзла);
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(НовыйУзел, Узел, , "Родитель, Строки");
	
	Для Каждого Стр из Узел.Строки Цикл
		СкопироватьУзел(НовыйУзел, Стр, Узел.Строки.Количество() - 1);
	КонецЦикла;
	
	Возврат НовыйУзел;
	
КонецФункции

&НаСервере
Функция ПолучитьПодчиненныйЭлемент(Узел, КодЭлемента)
	
	ЧислоВместоКодаЭлемента = (ТипЗнч(КодЭлемента) = Тип("Число"));
	Если ТипЗнч(КодЭлемента) = Тип("Число") Тогда
		Если Узел.Строки.Количество() > КодЭлемента Тогда
			Возврат Узел.Строки.Получить(КодЭлемента);
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	Иначе
		Для Каждого Стр Из Узел.Строки Цикл
			Если Стр.Код = КодЭлемента Тогда
				Возврат Стр;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьСодержательнуюЧасть(УзелРодитель)
	
	ДанныеМногоуровневыхРазделов = Новый Структура;
	СохрСтруктура = СохраненныеДанныеОтчета();
	Для каждого ЭлементСтруктуры Из СохрСтруктура.ДанныеМногоуровневыхРазделов Цикл
		ДанныеМногоуровневыхРазделов.Вставить(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Значение);
	КонецЦикла;
	
	ДеревоДанных = ДанныеМногоуровневыхРазделов["Реестр"];
	
	УпорядоченныеДанныеДерева = Новый Структура();
	Для каждого Ветка Из ДеревоДанных.Строки Цикл
		КодОперации = СокрЛП(Ветка.Данные["КодОперации"]);
		Если ЗначениеЗаполнено(КодОперации) Тогда
			_КодОперации = "_" + КодОперации;
			Если НЕ УпорядоченныеДанныеДерева.Свойство(_КодОперации) Тогда
				УпорядоченныеДанныеДерева.Вставить(_КодОперации, Новый Массив);
			КонецЕсли;
			УпорядоченныеДанныеДерева[_КодОперации].Добавить(ДеревоДанных.Строки.Индекс(Ветка));
		КонецЕсли;
	КонецЦикла;
	
	РеестрТрНеф_2 = ПолучитьПодчиненныйЭлемент(УзелРодитель.Родитель, "РеестрТрНеф_2");
	
	Для каждого ЭлемСтруктуры Из УпорядоченныеДанныеДерева Цикл
		
		МассивУпорядоченныхДанных = ЭлемСтруктуры.Значение;
		
		ПерваяВетка = ДеревоДанных.Строки[МассивУпорядоченныхДанных[0]];
		
		ЭкзРеестрТрНеф_2 = СкопироватьУзел(УзелРодитель.Родитель, РеестрТрНеф_2);
		Для каждого Эл Из ЭкзРеестрТрНеф_2.Строки Цикл
			Если Эл.Строки.Количество() = 0 Тогда
				ВывестиПоказательВXML(Эл, ПерваяВетка.Данные[Эл.Ключ]);
			КонецЕсли;
		КонецЦикла;
		
		// Узел "СведДкПдтвУслуг" имеется только в схеме выгрузки "Сведений".
		// Если он не найден, значит, сейчас формируются данные "Реестра"
		// (для выгрузки первого из 2-х файлов).
		СведДкПдтвУслуг = ПолучитьПодчиненныйЭлемент(ЭкзРеестрТрНеф_2, "СведДкПдтвУслуг");
		Если СведДкПдтвУслуг = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		// Формирование данных "Сведений" (для выгрузки второго из 2-х файлов).
		// 10000.
		Для каждого ИндексВетки Из МассивУпорядоченныхДанных Цикл
			
			Ветка = ДеревоДанных.Строки[ИндексВетки];
			
			ДанныеМнЧ_П10000 = Ветка.ДанныеМногострочныхЧастей.П10000.Строки;
			Для каждого Ветка_П10000 Из ДанныеМнЧ_П10000 Цикл
				
				ЭкзСведДкПдтвУслуг = СкопироватьУзел(ЭкзРеестрТрНеф_2, СведДкПдтвУслуг, ЭкзРеестрТрНеф_2.Строки.Количество() - 1);
				Для каждого Эл Из ЭкзСведДкПдтвУслуг.Строки Цикл
					Если Эл.Строки.Количество() = 0 Тогда
						Если Эл.Код = "НомерДк" Тогда
							ТекЗнач = СокрЛП(Ветка_П10000.Данные[Эл.Ключ]);
							ВывестиПоказательВXML(Эл, ?(НЕ ЗначениеЗаполнено(ТекЗнач), "б/н", ТекЗнач));
						Иначе
							ВывестиПоказательВXML(Эл, Ветка_П10000.Данные[Эл.Ключ]);
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
				
				// 11000.
				МаршПоруч = ПолучитьПодчиненныйЭлемент(ЭкзСведДкПдтвУслуг, "МаршПоруч");
				ДанныеМнЧ_П11000 = Ветка_П10000.ДанныеМногострочныхЧастей.П11000.Строки;
				Для каждого Ветка_П11000 Из ДанныеМнЧ_П11000 Цикл
					
					ЭкзМаршПоруч = СкопироватьУзел(ЭкзСведДкПдтвУслуг, МаршПоруч, ЭкзСведДкПдтвУслуг.Строки.Количество() - 1);
					Для каждого Эл Из ЭкзМаршПоруч.Строки Цикл
						ВывестиПоказательВXML(Эл, Ветка_П11000.Данные[Эл.Ключ]);
					КонецЦикла;
					
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ВывестиПоказательВXML(Узел, ЗначениеПоказателя)
	
	МинШирина = Узел.МинРазмерность;
	МаксШирина = Узел.МаксРазмерность;
	
	Если Узел.Формат = "T" ИЛИ Узел.Формат = "Т" Тогда // учтем оба варианта: кириллицу и латиницу
		Если ТипЗнч(ЗначениеПоказателя) = Тип("Дата") Тогда
			ЗначениеПоказателяСтр = Формат(ЗначениеПоказателя, "ДФ=dd.MM.yyyy");
		Иначе
			ЗначениеПоказателяСтр = СокрЛП(ЗначениеПоказателя);
		КонецЕсли;
		Узел.Значение = ?(МаксШирина < СтрДлина(ЗначениеПоказателяСтр), СокрЛП(Лев(ЗначениеПоказателяСтр, МаксШирина)), ЗначениеПоказателяСтр);
	ИначеЕсли Узел.Формат = "N" Тогда
		СтрокаФормата = "ЧРД=.;ЧН=0;ЧГ=;";
		Если Узел.МаксРазмерность <> 0 И Узел.МаксРазмерность <> 99999 Тогда
			СтрокаФормата = СтрокаФормата + "ЧЦ=" + Формат(Узел.МаксРазмерность, "ЧГ=") + ";";
		КонецЕсли;
		Если Узел.МинРазмерность <> 99999 Тогда
			СтрокаФормата = СтрокаФормата + "ЧДЦ=" + Формат(Узел.МинРазмерность, "ЧГ=") + ";";
		КонецЕсли;
		Узел.Значение = СокрЛП(Формат(ЗначениеПоказателя, СтрокаФормата));
	ИначеЕсли Узел.Формат = "gYear" Тогда
		Если ТипЗнч(ЗначениеПоказателя) = Тип("Дата") Тогда
			Узел.Значение = СокрЛП(Формат(ЗначениеПоказателя, "ДФ=гггг"));
		Иначе
			Узел.Значение = Прав(СокрЛП(ЗначениеПоказателя), 4);
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ОтсечьНезаполненныеНеобязательныеУзлы(Узел)
	
	КоличествоСтрок = Узел.Строки.Количество();
	Для Инд = 1 По КоличествоСтрок Цикл
		Стр = Узел.Строки.Получить(КоличествоСтрок - Инд);
		ОтсечьНезаполненныеНеобязательныеУзлы(Стр);
	КонецЦикла;
	
	Если ТипЗнч(Узел) <> Тип("ДеревоЗначений") Тогда
		Если (СтрНайти(Узел.Обязательность, "Н") <> 0 ИЛИ СтрНайти(Узел.Обязательность, "H") <> 0) И УзелПуст(Узел) Тогда // учтем оба варианта: кириллицу и латиницу
			РегламентированнаяОтчетность.УдалитьУзел(Узел);
		ИначеЕсли (СтрНайти(Узел.Обязательность, "М") <> 0 ИЛИ СтрНайти(Узел.Обязательность, "M") <> 0) // учтем оба варианта: кириллицу и латиницу
		И УзелПуст(Узел)
		И ?(СтрНайти(Узел.Обязательность, "О") <> 0 ИЛИ СтрНайти(Узел.Обязательность, "O") <> 0, РегламентированнаяОтчетность.ИмеютсяАналогичныеСоседниеУзлыКлюч(Узел), Истина) Тогда
			РегламентированнаяОтчетность.УдалитьУзел(Узел);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция УзелПуст(Узел)
	
	Для Каждого Стр из Узел.Строки Цикл
		Если НЕ УзелПуст(Стр) Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Если Узел.Формат = "S" Тогда
		Возврат Истина;
		
	ИначеЕсли Узел.Формат = "N" Тогда
		Возврат Узел.Значение = "0" ИЛИ (НЕ ЗначениеЗаполнено(Узел.Значение));
		
	Иначе
		Возврат НЕ ЗначениеЗаполнено(Узел.Значение);
		
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ИдентификаторФайлаВыгрузки(ПараметрыВыгрузки, ПрефиксИмени)
	
	ИдентификаторФайла = ПрефиксИмени
		+ "_" + ?(ЗначениеЗаполнено(ПараметрыВыгрузки.КодИФНСПосредника), ПараметрыВыгрузки.КодИФНСПосредника, ПараметрыВыгрузки.КодИФНС)
		+ "_" + ПараметрыВыгрузки.КодИФНС
		+ "_" + ?(ПараметрыВыгрузки.Свойство("ЭтоПБОЮЛ") И ПараметрыВыгрузки.ЭтоПБОЮЛ, СокрЛП(ПараметрыВыгрузки.ИННОрг), СокрЛП(ПараметрыВыгрузки.ИННОрг) + СокрЛП(ПараметрыВыгрузки.КППОрг))
		+ "_" + Формат(ТекущаяДатаСеанса(), "ДФ=ггггММдд")
		+ "_" + Строка(Новый УникальныйИдентификатор);
	
	Возврат ИдентификаторФайла;
	
КонецФункции

&НаСервере
Функция ВыгрузкаРеестра(ТекстВыгрузки, ПараметрыВыгрузки)
	
	КодировкаФайлаВыгрузки = "windows-1251";
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("xml");
	ЗаписьТекста = Новый ЗаписьТекста(ИмяВременногоФайла, КодировкаФайлаВыгрузки);
	ЗаписьТекста.Записать(ТекстВыгрузки);
	ЗаписьТекста.Закрыть();
	ЗаписьТекста = Неопределено;
	
	ФайлВыгрузки = Новый ДвоичныеДанные(ИмяВременногоФайла);
	
	АдресВоВремХранилище = ПоместитьВоВременноеХранилище(ФайлВыгрузки, Новый УникальныйИдентификатор);
	
	УдалитьФайлы(ИмяВременногоФайла);
	
	РезультатВыгрузки = Новый Структура;
	РезультатВыгрузки.Вставить("ИмяФайлаВыгрузки", ПараметрыВыгрузки.ИдФайл + ".xml");
	РезультатВыгрузки.Вставить("АдресФайлаВыгрузки", АдресВоВремХранилище);
	РезультатВыгрузки.Вставить("ТипФайлаВыгрузки", "РеестрНДС_2");
	РезультатВыгрузки.Вставить("КодировкаФайлаВыгрузки", КодировкаФайлаВыгрузки);
	
	Возврат РезультатВыгрузки;
	
КонецФункции

&НаСервере
Функция ВыгрузкаСведений(ТекстВыгрузки, ПараметрыВыгрузки)
	
	КодировкаФайлаВыгрузки = "windows-1251";
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("xml");
	ЗаписьТекста = Новый ЗаписьТекста(ИмяВременногоФайла, КодировкаФайлаВыгрузки);
	ЗаписьТекста.Записать(ТекстВыгрузки);
	ЗаписьТекста.Закрыть();
	ЗаписьТекста = Неопределено;
	
	ФайлВыгрузки = Новый ДвоичныеДанные(ИмяВременногоФайла);
	
	АдресВоВремХранилище = ПоместитьВоВременноеХранилище(ФайлВыгрузки, Новый УникальныйИдентификатор);
	
	УдалитьФайлы(ИмяВременногоФайла);
	
	РезультатВыгрузки = Новый Структура;
	РезультатВыгрузки.Вставить("ИмяФайлаВыгрузки", ПараметрыВыгрузки.ИдСведФайл + ".xml");
	РезультатВыгрузки.Вставить("АдресФайлаВыгрузки", АдресВоВремХранилище);
	РезультатВыгрузки.Вставить("ТипФайлаВыгрузки", "РеестрНДС_2_Сведения");
	РезультатВыгрузки.Вставить("КодировкаФайлаВыгрузки", КодировкаФайлаВыгрузки);
	
	Возврат РезультатВыгрузки;
	
КонецФункции

&НаСервере
Функция ВыгрузитьДеревоВXML(ДеревоВыгрузки, ПараметрыВыгрузки)
	
	ПотокXML = РегламентированнаяОтчетность.СоздатьНовыйПотокXML("windows-1251"); // создаем новый поток для записи
	ЗаписатьУзелДереваВXML(ДеревоВыгрузки, ПотокXML, ПараметрыВыгрузки); // пишем дерево в поток
	ТекстДляЗаписи = ПотокXML.Закрыть(); // получаем текст XML
	Возврат ТекстДляЗаписи;
	
КонецФункции

&НаСервере
Функция ЗаписатьУзелДереваВXML(СтрокаДерева, ПотокXML, ПараметрыВыгрузки) Экспорт
	
	Если ТипЗнч(СтрокаДерева) = Тип("ДеревоЗначений") Тогда
		ПотокXML.ЗаписатьНачалоЭлемента("Файл");
		ПотокXML.ЗаписатьАтрибут("xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");
		Для каждого Стр Из СтрокаДерева.Строки Цикл
			ЗаписатьУзелДереваВXML(Стр, ПотокXML, ПараметрыВыгрузки);
		КонецЦикла;
		ПотокXML.ЗаписатьКонецЭлемента();
	Иначе
		Если СтрокаДерева.Тип = "А" ИЛИ СтрокаДерева.Тип = "A" Тогда
			ПотокXML.ЗаписатьАтрибут(СтрокаДерева.Код, Строка(СтрокаДерева.Значение));
		Иначе
			ПотокXML.ЗаписатьНачалоЭлемента(СтрокаДерева.Код);
			Для каждого Лист из СтрокаДерева.Строки Цикл
				ЗаписатьУзелДереваВXML(Лист, ПотокXML, ПараметрыВыгрузки);
			КонецЦикла;
			ПотокXML.ЗаписатьТекст(Строка(СтрокаДерева.Значение));
			ПотокXML.ЗаписатьКонецЭлемента();
		КонецЕсли;
	КонецЕсли;

КонецФункции

&НаКлиенте
Процедура ПроверитьВыгрузку(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьВыгрузкуЗавершение", ЭтотОбъект);
	
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(
		ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузкуЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПроверитьВыгрузкуОтчета();
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузкуОтчета()
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьВыгрузкуОтчетаЗавершение", ЭтотОбъект);
	
	Если Модифицированность Тогда
		СохранитьНаКлиенте(,ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузкуОтчетаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ФормаВыгрузкиРеглОтчета = ПолучитьФорму(
		"Документ.ВыгрузкаРегламентированныхОтчетов.Форма.ФормаДокумента", , ЭтаФорма);
	
	СпДокОсн = Новый СписокЗначений;
	СпДокОсн.Добавить(СтруктураРеквизитовФормы.мСохраненныйДок);
	
	ФормаВыгрузкиРеглОтчета.Проверить(СпДокОсн);
	
КонецПроцедуры

&НаСервере
Функция ПроверитьПоказатели() Экспорт
	
	СформироватьСтруктуруПоказателей();
	ПараметрыВыгрузки = СформироватьСтруктуруПараметров();
	
	ДеревоВыгрузкиРеестра  = ИзвлечьСтруктуруXML("СхемаВыгрузки501_1");
	ДеревоВыгрузкиСведений = ИзвлечьСтруктуруXML("СхемаВыгрузки501_2");
	
	Если НЕ ПроверитьВозможностьВыгрузки(
		ПараметрыВыгрузки, ДеревоВыгрузкиРеестра, ДеревоВыгрузкиСведений) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ЗаполнитьДанными(ПараметрыВыгрузки, ДеревоВыгрузкиРеестра);
	ЗаполнитьДанными(ПараметрыВыгрузки, ДеревоВыгрузкиСведений);
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#Область УправлениеНастройкамиОтчета

&НаКлиенте
Процедура ОткрытьФормуНастроек(Команда)
	
	ОткрытьФормуВыбораСтраниц("ВыбратьДляНастройки");
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораСтраниц(ВариантВыбора)
	Перем ТекущийРазделОтчетаСокрНаим;
	Перем НомерСтраницыРазделаОтчета;
	
	// Запоминаем текущий раздел, установленный в дереве разделов отчета.
	Если НЕ Элементы.РазделыОтчета.ТекущиеДанные = Неопределено Тогда
		ТекущийРазделОтчетаСокрНаим = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
		НомерСтраницыРазделаОтчета  = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета;
	КонецЕсли;
	
	мПараметры = Новый Структура;
	мПараметры.Вставить("ПроверкаСоотношений", Истина);
	мПараметры.Вставить("СчетчикСтраниц", Ложь);
	мПараметры.Вставить("Автосохранение", Ложь);
	мПараметры.Вставить("ИмеетсяРеквизитДеревоВыбранныхСтраниц", Истина);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ФлажокОтклАвтоРасчет", СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);
	ПараметрыФормы.Вставить("мАвтоВыборКодов", СтруктураРеквизитовФормы.мАвтоВыборКодов);
	ПараметрыФормы.Вставить("мПараметры", мПараметры);
	ПараметрыФормы.Вставить("мПроверятьСоотношенияПриПечатиИВыгрузки", 
		СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки);
	
	ФормаНастройкиОтчета = РегламентированнаяОтчетностьКлиент.ПолучитьОбщуюФормуПоИмени("НастройкиОтчета", ПараметрыФормы, ЭтаФорма);

	мДеревоВыбранныхСтраниц.ПолучитьЭлементы().Очистить();

	КопироватьДанныеФормы(мДеревоСтраницОтчета, ФормаНастройкиОтчета.Дерево);
	
	ЗначениеАвторасчета = СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет;
	
	ДополнительныеПараметры = Новый Структура("ЗначениеАвторасчета, НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим", ЗначениеАвторасчета, НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим);
	ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьФормуВыбораСтраницЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ФормаНастройкиОтчета.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
	ФормаНастройкиОтчета.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	ФормаНастройкиОтчета.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораСтраницЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	ЗначениеАвторасчета = ДополнительныеПараметры.ЗначениеАвторасчета;
	НомерСтраницыРазделаОтчета = ДополнительныеПараметры.НомерСтраницыРазделаОтчета;
	ТекущийРазделОтчетаСокрНаим = ДополнительныеПараметры.ТекущийРазделОтчетаСокрНаим;
	
	Модифицированность = Истина;
	
	флЗначенияИдентичны = Истина;
	
	Для Индекс = 0 По мДеревоСтраницОтчета.ПолучитьЭлементы().Количество() - 1 Цикл
		
		Если НЕ мДеревоСтраницОтчета.ПолучитьЭлементы()[Индекс].ПоказатьСтраницу = мДеревоВыбранныхСтраниц.ПолучитьЭлементы()[Индекс].ПоказатьСтраницу Тогда
			флЗначенияИдентичны = Ложь;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЗначениеАвторасчета <> СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Тогда
		
		Если СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет = Ложь Тогда
			
			ДополнительныеПараметры = Новый Структура(
			"НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим, флЗначенияИдентичны",
			НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим, флЗначенияИдентичны);
			ОписаниеОповещения = Новый ОписаниеОповещения(
			"ВопросПерерасчетВсехРассчитываемыхПоказателейЗавершение", ЭтотОбъект, ДополнительныеПараметры);
			ТекстВопроса = НСтр("ru='Будет произведен перерасчет всех рассчитываемых показателей. Продолжить?'");
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
			
		Иначе
			
			УстановитьДоступностьОбластей(ЭтаФорма, ТекущийРазделОтчетаСокрНаим);
			
			ДопПараметры = Новый Структура(
			"НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим, флЗначенияИдентичны",
			НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим, флЗначенияИдентичны);
			ПослеОткрытияФормыВыбораСтраниц(ДопПараметры);
			
		КонецЕсли;
		
	Иначе
		
		ДопПараметры = Новый Структура(
		"НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим, флЗначенияИдентичны",
		НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим, флЗначенияИдентичны);
		ПослеОткрытияФормыВыбораСтраниц(ДопПараметры);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПерерасчетВсехРассчитываемыхПоказателейЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	НомерСтраницыРазделаОтчета = ДополнительныеПараметры.НомерСтраницыРазделаОтчета;
	ТекущийРазделОтчетаСокрНаим = ДополнительныеПараметры.ТекущийРазделОтчетаСокрНаим;
	флЗначенияИдентичны = ДополнительныеПараметры.флЗначенияИдентичны;
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет = Истина;
		Возврат;
	КонецЕсли;
	
	РасчетНаСервере();
	
	УстановитьДоступностьОбластей(ЭтаФорма, ТекущийРазделОтчетаСокрНаим);
	
	ДопПараметры = Новый Структура(
		"НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим, флЗначенияИдентичны",
		НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим, флЗначенияИдентичны);
	ПослеОткрытияФормыВыбораСтраниц(ДопПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеОткрытияФормыВыбораСтраниц(ДополнительныеПараметры)
	
	НомерСтраницыРазделаОтчета = ДополнительныеПараметры.НомерСтраницыРазделаОтчета;
	ТекущийРазделОтчетаСокрНаим = ДополнительныеПараметры.ТекущийРазделОтчетаСокрНаим;
	флЗначенияИдентичны = ДополнительныеПараметры.флЗначенияИдентичны;
	
	РегламентированнаяОтчетностьКлиент.ПоказатьСтраницыОтчетаНаКлиенте(ЭтаФорма);
	
	Если НЕ флЗначенияИдентичны Тогда
		
		СформироватьДеревоРазделовОтчетаНаСервере();
		
		Если НЕ ТекущийРазделОтчетаСокрНаим = Неопределено Тогда
			
			НайденнаяСтрока = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(
				РазделыОтчета.ПолучитьЭлементы(), "КолонкаРазделыОтчетаСокрНаим", ТекущийРазделОтчетаСокрНаим);
			
			Если НЕ НайденнаяСтрока = Неопределено И НЕ НомерСтраницыРазделаОтчета = Неопределено
				И НайденнаяСтрока.ПолучитьЭлементы().Количество() > 0 Тогда
				
				НайденнаяСтрока = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(
				НайденнаяСтрока.ПолучитьЭлементы(), "КолонкаНомерСтраницыРазделаОтчета", НомерСтраницыРазделаОтчета);
				
			КонецЕсли;
			
			Если НЕ НайденнаяСтрока = Неопределено Тогда
				
				Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяСтрока.ПолучитьИдентификатор();
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Очистка

#Область ОчисткаОтчета

&НаКлиенте
Процедура ОчиститьОтчет(Команда)
	
	РегламентированнаяОтчетностьКлиент.МеханизмыОчисткиРегламентированныхОтчетов(
		ЭтаФорма, "ОчиститьВесьОтчет");
	
КонецПроцедуры

&НаКлиенте
Процедура Очистить(ВыполняемоеОповещение = Неопределено) Экспорт
	
	РегламентированнаяОтчетностьКлиент.Очистить(ЭтаФорма, ВыполняемоеОповещение);
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьНаСервере() Экспорт
	
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела <> "Титульный" Тогда
		ТабличныйДокумент.Очистить();
	КонецЕсли;
	
	ИнициализироватьМногоуровневыеРазделы();
	
	ЗаполнитьПустыеСтруктурыДанных();
	
	СформироватьДеревоРазделовОтчетаНаСервере();
	
	ОбновитьДеревоРазделовВФормеОтчета(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Очистить();
	
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Реестр" Тогда
		СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Добавить(1);
	КонецЕсли;
	
	СтруктураРеквизитовФормы.Вставить("ДекларацияНДС", Неопределено);
	СтруктураРеквизитовФормы.СведенияОтправкиДеклНДС.Вставить("ОтправкаДеклНДС", Неопределено);
	СтруктураРеквизитовФормы.СведенияОтправкиДеклНДС.Вставить("ИмяФайлаОтправкиДеклНДС", Неопределено);
	СтруктураРеквизитовФормы.СведенияВыгрузкиДеклНДС.Вставить("ВыгрузкаДеклНДС", Неопределено);
	СтруктураРеквизитовФормы.СведенияВыгрузкиДеклНДС.Вставить("ИмяФайлаВыгрузкиДеклНДС", Неопределено);
	
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела <> "Титульный" Тогда
		ВывестиДанныеВТабличныйДокумент(СтруктураРеквизитовФормы.НаимТекущегоРаздела,
		СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела);
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДеревоРазделовВФормеОтчета(ИмяРаздела)
	
	Если НЕ ИмяРаздела = Неопределено Тогда
		
		// Пытаемся найти ранее запомненный раздел.
		НайденнаяСтрока = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(
			РазделыОтчета.ПолучитьЭлементы(), "КолонкаРазделыОтчетаСокрНаим", ИмяРаздела);
		
		// В случае успешного поиска, устанавливаем курсор на найденный раздел.
		Если НЕ НайденнаяСтрока = Неопределено Тогда
			Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяСтрока.ПолучитьИдентификатор();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОчисткаТекущейСтраницы

&НаКлиенте
Процедура ОчиститьТекущуюСтраницу(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОчиститьТекущуюСтраницуЗавершение", ЭтотОбъект);
	РегламентированнаяОтчетностьКлиент.МеханизмыОчисткиРегламентированныхОтчетов(
		ЭтаФорма, "ОчиститьТекущийЭкземплярМногостраничногоРаздела"
		+ Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим,
		ОписаниеОповещения);
	
КонецПроцедуры

&НаСервере
Процедура ОчисткаРегламентированногоОтчетаНаСервере(ИмяСтраницы, ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста, РежимОчистки, Многостраничность, КолВоСтраницВРазделе) Экспорт
	
	Если ИмяСтраницы = "Реестр" Тогда
		
		ТабличныйДокумент.Очистить();
		ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + ИмяСтраницы));
		
		ПронумероватьСтрокиТабличнойЧасти(ИмяСтраницы);
		
		ВывестиДанныеВТабличныйДокументНаСервере(ИмяСтраницы,
			СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела);
		
	ИначеЕсли ИмяСтраницы = "Титульный" Тогда
		
		Для каждого Обл Из ТабличныйДокумент.Области Цикл
			Если СтрЧислоВхождений(Тип(Обл), "Рисунок") = 0
				И Обл.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник
				И Обл.СодержитЗначение = Истина
				И НЕ Обл.Защита Тогда
				Обл.Очистить();
			КонецЕсли;
		КонецЦикла;
		
		Обл = ТабличныйДокумент.Области.Найти("ДатаПодписи");
		Если ЗначениеЗаполнено(Обл.Значение) Тогда
			ДатаПодписи = Лев(СтрЗаменить(Формат(Обл.Значение, "ДФ = ""дд.ММ.гггг 'г.'"""), ".", ""), 8);
		Иначе
			ДатаПодписи = "        ";
		КонецЕсли;
		
		СохранитьДанныеРаздела(ИмяСтраницы);
		
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТекущуюСтраницуЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
		НомерКорректировки = 0;
		ТабличныйДокумент.Области.НомерКорректировки.Значение = "0";
		СтруктураРеквизитовФормы.ВидДокумента = ?(НомерКорректировки = 0, 0, 1);
		СтруктураРеквизитовФормы.Вставить("ДекларацияНДС", Неопределено);
		СтруктураРеквизитовФормы.СведенияОтправкиДеклНДС.Вставить("ОтправкаДеклНДС", Неопределено);
		СтруктураРеквизитовФормы.СведенияОтправкиДеклНДС.Вставить("ИмяФайлаОтправкиДеклНДС", Неопределено);
		СтруктураРеквизитовФормы.СведенияВыгрузкиДеклНДС.Вставить("ВыгрузкаДеклНДС", Неопределено);
		СтруктураРеквизитовФормы.СведенияВыгрузкиДеклНДС.Вставить("ИмяФайлаВыгрузкиДеклНДС", Неопределено);
		УстановитьДоступностьОбластей(ЭтаФорма, СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	ИначеЕсли СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Реестр" Тогда
		УправлениеВидимостьюСсылкиУдалитьСтраницу();
		УстановитьНомерПервойСтроки(ЭтаФорма);
		СпрятатьЗначкиУдалитьСтроку();
		НомСтраницы = СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[0];
		ЭлМассива = СтруктураРеквизитовФормы.ИтоговыеСуммыПоКодамОпераций[НомСтраницы - 1];
		ЭлМассива["КодОперации"] = "";
		ЭлМассива["НалБазаИтого"] = 0;
		Элементы.ТабличныйДокумент.ТекущаяОбласть = ТабличныйДокумент.Область(1, 1, 1, 1);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область Печать

&НаКлиенте
Процедура ПоказатьБланк(Команда)
	
	Отказ = Ложь;
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("Команда", Команда);
	ОписаниеОповещения = Новый ОписаниеОповещения("ПоказатьБланкЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередПечатьюРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьБланкЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Команда = ДополнительныеПараметры.Команда;
	
	ДополнительныеПараметрыПечати = Новый Структура;
	ДополнительныеПараметрыПечати.Вставить("ВидПечати", Команда.Имя);
	ОписаниеОповещения = Новый ОписаниеОповещения("ПечатьЗавершение", ЭтотОбъект, ДополнительныеПараметрыПечати);
	
	Если ЗначениеЗаполнено(СтруктураРеквизитовФормы.мСохраненныйДок) Тогда
		
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
						
	Иначе
		
		СохранитьНаКлиенте(, ОписаниеОповещения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Печать(ДополнительныеПараметры.ВидПечати);
	
КонецПроцедуры

&НаКлиенте
Процедура Печать(ВидПечати, НеИзФормыОтчета = Ложь) Экспорт
	
	Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='%1. Формируется печатная форма...'"), ЭтаФорма.Заголовок), , , БиблиотекаКартинок.Печать);
	
	Если НЕ ПечатьНаСервере(ВидПечати) Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ОткрытьФормуПредварительногоПросмотра(
	ЭтаФорма, ВидПечати, , СтруктураРеквизитовФормы.мПечатныеФормы);
	
КонецПроцедуры

&НаСервере
Функция ПечатьНаСервере(ВидПечати)
	
	Если НЕ РегламентированнаяОтчетность.ПринтерДоступен() Тогда
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Перед формированием печатных форм необходимо определить в системе принтер и задать его в качестве используемого по умолчанию!'");
		Сообщение.Сообщить();
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Если СтруктураРеквизитовФормы.ЕдиницаИзмерения <> ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1
		ИЛИ СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения <> 0 Тогда
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Печать возможна только при установленной единице измерения ""в рублях"" и точности ""0"".'");
		Сообщение.Сообщить();
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Если ТипЗнч(мДеревоВыбранныхСтраниц) <> Тип("ДанныеФормыДерево") Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	РегламентированнаяОтчетность.УдалитьСтарыеПечатныеБланкиРегламентированныхОтчетов();
	
	СтруктураРеквизитовФормы.мПечатныеФормы.Очистить();
	СтруктураРеквизитовФормы.мПечатныеФормы.Добавить(СтруктураРеквизитовФормы.мСохраненныйДок,
	ВРег(СокрЛП("СсылкаНаРегламентированныйОтчет")));
	
	СохранитьДанныеРаздела(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
	сохрТаблДок = ТабличныйДокумент.ПолучитьОбласть();
	
	сохрНомераСтрокМногоуровнегоРаздела = СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела;
	
	СтрПоля = "ПолеСверху, ПолеСправа, ПолеСнизу, ПолеСлева";
	ВремПоля = Новый Структура(СтрПоля);
	
	ЗаполнитьЗначенияСвойств(ВремПоля, ТабличныйДокумент, СтрПоля);
	ВывестиДанныеВТабличныйДокумент("Титульный");
	
	ВыбранныеСтраницы = Новый Массив();
	
	НачатьТранзакцию();
	
	Для Каждого СтрокаУровня1 Из мДеревоВыбранныхСтраниц.ПолучитьЭлементы() Цикл
		
		Если СтрокаУровня1.ВыводНаПечать = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ВыбранныеСтраницы.Добавить(СтрокаУровня1.ИмяСтраницы);
		
	КонецЦикла;
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("НаименованиеЛиста",  "Реестр");
	СтруктураПараметров.Вставить("ОриентацияЛиста",    "Ландшафт");
	СтруктураПараметров.Вставить("ИмяСтраницы",        "Реестр");
	Структурапараметров.Вставить("ИмяОбластиТаблПоля", "ТабличныйДокумент");
	СтруктураПараметров.Вставить("ВидПечати",          ВидПечати);
	
	ВывестиНаПечатьОтчет(СтруктураПараметров, ВыбранныеСтраницы, СтрПоля);
	
	ЗафиксироватьТранзакцию();
	
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела = сохрНомераСтрокМногоуровнегоРаздела;
	
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(сохрТаблДок);
	ЗаполнитьЗначенияСвойств(ТабличныйДокумент, ВремПоля, СтрПоля);
	
	КопироватьДанныеФормы(мДеревоВыбранныхСтраниц, мДеревоСтраницОтчета);
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Процедура ВывестиНаПечатьОтчет(СтруктураПараметров, ВыбранныеСтраницы, СтрПоля = Неопределено)
	
	НомерСтраницы = 1;
	
	Если ВыбранныеСтраницы.Найти("Титульный") <> Неопределено Тогда
		
		ИмяМакета = "ПечатныйБланк2015Кв4_Титульный";
		
		Макет = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(ИмяМакета);
		
		ПечФорма = Макет.Получитьобласть("Титульный");
		ПечФорма.ПолеСверху = 5;
		ПечФорма.ПолеСправа = 5;
		ПечФорма.ПолеСнизу  = 5;
		ПечФорма.ПолеСлева  = 5;
		ПечФорма.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
		ПечФорма.Автомасштаб = Истина;
		
		ПечФорма.Параметры.Заполнить(СтруктураДанныхТитульный);
		
		Если ЗначениеЗаполнено(СтруктураДанныхТитульный.ИННРеорганизованнойОрганизации)
			ИЛИ ЗначениеЗаполнено(СтруктураДанныхТитульный.КППРеорганизованнойОрганизации) Тогда
			ПечФорма.Параметры.ИННКППРеорганизованнойОрганизации
			= СокрЛП(СтруктураДанныхТитульный.ИННРеорганизованнойОрганизации)
			+ "/" + СокрЛП(СтруктураДанныхТитульный.КППРеорганизованнойОрганизации);
		КонецЕсли;
		
		НомерСтраницы = НомерСтраницы + 1;
		
		СтруктураПараметров.Вставить("НомерСтраницы", НомерСтраницы);
		
		РегламентированнаяОтчетность.ВывестиНаПечатьЛистОбщая(
		ЭтаФорма.Заголовок, СтруктураПараметров, ПечФорма, СтруктураРеквизитовФормы.мПечатныеФормы);
		
	КонецЕсли;
	
	Если ВыбранныеСтраницы.Найти("Реестр") <> Неопределено Тогда
		
		ИмяМакета = "ПечатныйБланк2015Кв4_Реестр";
		
		Макет = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(ИмяМакета);
		
		ПечФорма = Новый ТабличныйДокумент;
		ПечФорма.ПолеСверху = 5;
		ПечФорма.ПолеСправа = 5;
		ПечФорма.ПолеСнизу  = 5;
		ПечФорма.ПолеСлева  = 5;
		ПечФорма.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
		ПечФорма.Автомасштаб = Истина;
		
		ПечФорма1 = Новый ТабличныйДокумент;
		ПечФорма1.ПолеСверху = 5;
		ПечФорма1.ПолеСправа = 5;
		ПечФорма1.ПолеСнизу  = 5;
		ПечФорма1.ПолеСлева  = 5;
		ПечФорма1.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
		ПечФорма1.Автомасштаб = Истина;
		
		ВерхняяСтрока  = Макет.Получитьобласть("ВерхняяСтрока");
		Шапка          = Макет.Получитьобласть("Шапка");
		ПодШапка       = Макет.Получитьобласть("ПодШапка");
		СтрокаДокумент = Макет.Получитьобласть("СтрокаДокумент");
		
		МассивПроверки = Новый Массив;
		ИменаВыведенныхСекцийСтрокаДокумент = Новый Массив;
		
		ДеревоДанныхРаздела = ПолучитьИзВременногоХранилища(
		СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхРеестр"]);
		
		ИндСтрокаДокумент = 0;
		
		Для каждого Страница Из ДеревоДанныхРаздела.Строки Цикл
			
			ПечФорма.Очистить();
			ПечФорма.Вывести(ВерхняяСтрока);
			Для ИндПарам = 0 По Шапка.Параметры.Количество() - 1 Цикл
				Шапка.Параметры[ИндПарам] = Неопределено;
			КонецЦикла;
			Шапка.Параметры.Заполнить(Страница.Данные);
			ПечФорма.Вывести(Шапка);
			ПечФорма.Вывести(ПодШапка);
			
			// П10000.
			//
			Строки1 = Страница.ДанныеМногострочныхЧастей.П10000.Строки;
			
			Для каждого Строка1 Из Строки1 Цикл
				
				ИменаВыведенныхСекцийСтрокаДокумент.Очистить();
				
				ПечФорма1.Очистить();
				
				ОблОбъедСтрока1_Верх = Неопределено;
				ОблОбъедСтрока1_Низ  = Неопределено;
				
				СтрокаДокумент.Параметры.Заполнить(Строка1.Данные);
				
				// П11000.
				//
				Строки11 = Строка1.ДанныеМногострочныхЧастей.П11000.Строки;
				
				Для каждого Строка11 Из Строки11 Цикл
					
					Если Строки11.Индекс(Строка11) > 0 Тогда
						Для ИндПарам = 0 По СтрокаДокумент.Параметры.Количество() - 1 Цикл
							СтрокаДокумент.Параметры[ИндПарам] = Неопределено;
						КонецЦикла;
					КонецЕсли;
					
					СтрокаДокумент.Параметры.Заполнить(Строка11.Данные);
					
					ПечФорма1.Вывести(СтрокаДокумент);
					ПечФорма1СтрокаДокумент = ПечФорма1.Область("СтрокаДокумент");
					ИндСтрокаДокумент = ИндСтрокаДокумент + 1;
					ПечФорма1СтрокаДокумент.Имя = "_" + Формат(ИндСтрокаДокумент, "ЧГ=");
					
					ИменаВыведенныхСекцийСтрокаДокумент.Добавить(ПечФорма1СтрокаДокумент.Имя);
					
					Если Строки11.Индекс(Строка11) = 0 Тогда
						ОблОбъедСтрока1_Верх = ПечФорма1СтрокаДокумент.Верх;
					КонецЕсли;
					ОблОбъедСтрока1_Низ = ПечФорма1СтрокаДокумент.Низ;
					
				КонецЦикла;
				
				Если ЗначениеЗаполнено(ОблОбъедСтрока1_Верх) И ЗначениеЗаполнено(ОблОбъедСтрока1_Низ)
					И ОблОбъедСтрока1_Верх <> ОблОбъедСтрока1_Низ Тогда
					
					Для каждого ИмяСекции Из ИменаВыведенныхСекцийСтрокаДокумент Цикл
						ПечФорма1СтрокаДокумент = ПечФорма1.Область(ИмяСекции);
						ПечФорма1СтрокаДокумент.Имя = "";
					КонецЦикла;
					
					ОблОбъед = ПечФорма1.Область(ОблОбъедСтрока1_Верх, , ОблОбъедСтрока1_Низ, );
					ОблОбъед.Имя = ИменаВыведенныхСекцийСтрокаДокумент[0];
					
					ИменаВыведенныхСекцийСтрокаДокумент.Очистить();
					
					Для НомерКолонки = 2 По 14 Цикл
						Если НомерКолонки = 5 ИЛИ (НомерКолонки >= 9 И НомерКолонки <= 12) Тогда
							Продолжить;
						КонецЕсли;
						ОблОбъед = ПечФорма1.Область(ОблОбъедСтрока1_Верх, НомерКолонки, ОблОбъедСтрока1_Низ, НомерКолонки);
						ОблОбъед.Объединить();
					КонецЦикла;
					
				КонецЕсли;
				
				МассивПроверки.Очистить();
				МассивПроверки.Добавить(ПечФорма1);
				
				Если НЕ ПечФорма.ПроверитьВывод(МассивПроверки) Тогда
					
					НомерСтраницы = НомерСтраницы + 1;
					
					СтруктураПараметров.Вставить("НомерСтраницы", НомерСтраницы);
					
					РегламентированнаяОтчетность.ВывестиНаПечатьЛистОбщая(
					ЭтаФорма.Заголовок, СтруктураПараметров, ПечФорма, СтруктураРеквизитовФормы.мПечатныеФормы);
					
					ПечФорма.Очистить();
					ПечФорма.Вывести(ВерхняяСтрока);
					ПечФорма.Вывести(ПодШапка);
					
				КонецЕсли;
				
				ПечФорма.Вывести(ПечФорма1);
				
			КонецЦикла;
			
			НомерСтраницы = НомерСтраницы + 1;
			
			СтруктураПараметров.Вставить("НомерСтраницы", НомерСтраницы);
			
			РегламентированнаяОтчетность.ВывестиНаПечатьЛистОбщая(
			ЭтаФорма.Заголовок, СтруктураПараметров, ПечФорма, СтруктураРеквизитовФормы.мПечатныеФормы);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьНомерПервойСтроки(Форма)
	
	Для каждого ИдГруппы Из Форма.СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей Цикл
		ИмяГрафыНумерацииСтрок = Неопределено;
		ИдГруппы.Значение.Свойство("ИмяГрафыНумерацииСтрок", ИмяГрафыНумерацииСтрок);
		Если ИмяГрафыНумерацииСтрок <> Неопределено Тогда
			Обл = Форма.ТабличныйДокумент.Области[ИмяГрафыНумерацииСтрок + "_1"];
			Если Обл <> Неопределено Тогда
				Обл.Значение = "1";
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПронумероватьСтрокиТабличнойЧасти(ИмяРаздела)
	
	Если ИмяРаздела = "Реестр" Тогда
		
		СписокМаксНомеровСтрокПоКодамОпераций = Новый СписокЗначений();
		
		ДеревоДанных = ПолучитьИзВременногоХранилища(
			СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяРаздела]);
		
		Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяРаздела Тогда
			АктивнаяВетка = ДеревоДанных.Строки[
				СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[0] - 1];
		КонецЕсли;
		
		Для каждого Ветка Из ДеревоДанных.Строки Цикл
			
			Если Ветка = АктивнаяВетка Тогда
				Ветка.Данные["КодОперации"] = ТабличныйДокумент.Области["КодОперации"].Значение;
			КонецЕсли;
			
			КодОперации = Ветка.Данные["КодОперации"];
			
			ДанныеМнЧ_П10000 = Ветка.ДанныеМногострочныхЧастей.П10000.Строки;
			
			ТД = Неопределено;
			Если Ветка.АдресТабличногоДокумента <> Неопределено Тогда
				ТД = ПолучитьИзВременногоХранилища(Ветка.АдресТабличногоДокумента);
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(КодОперации) Тогда
				НомСтроки = 0;
				Для каждого Ветка_П10000 Из ДанныеМнЧ_П10000 Цикл
					НомСтроки = НомСтроки + 1;
					Ветка_П10000.Данные["П1000001"] = Формат(НомСтроки, "ЧГ=");
					Если ТД <> Неопределено Тогда
						ИндексВетки = ДанныеМнЧ_П10000.Индекс(Ветка_П10000);
						ТД.Область("П1000001" + "_" + Формат(ИндексВетки + 1, "ЧГ=")).Значение = Формат(НомСтроки, "ЧГ=");
					КонецЕсли;
				КонецЦикла;
			Иначе
				ЭлемСписка = СписокМаксНомеровСтрокПоКодамОпераций.НайтиПоЗначению(КодОперации);
				Если ЭлемСписка = Неопределено Тогда
					НомСтроки = 0;
					Для каждого Ветка_П10000 Из ДанныеМнЧ_П10000 Цикл
						НомСтроки = НомСтроки + 1;
						Ветка_П10000.Данные["П1000001"] = Формат(НомСтроки, "ЧГ=");
						Если ТД <> Неопределено Тогда
							ИндексВетки = ДанныеМнЧ_П10000.Индекс(Ветка_П10000);
							ТД.Область("П1000001" + "_" + Формат(ИндексВетки + 1, "ЧГ=")).Значение = Формат(НомСтроки, "ЧГ=");
						КонецЕсли;
					КонецЦикла;
					СписокМаксНомеровСтрокПоКодамОпераций.Добавить(КодОперации, Формат(НомСтроки, "ЧГ="));
				Иначе
					НомСтроки = Число(ЭлемСписка.Представление);
					Для каждого Ветка_П10000 Из ДанныеМнЧ_П10000 Цикл
						НомСтроки = НомСтроки + 1;
						Ветка_П10000.Данные["П1000001"] = Формат(НомСтроки, "ЧГ=");
						Если ТД <> Неопределено Тогда
							ИндексВетки = ДанныеМнЧ_П10000.Индекс(Ветка_П10000);
							ТД.Область("П1000001" + "_" + Формат(ИндексВетки + 1, "ЧГ=")).Значение = Формат(НомСтроки, "ЧГ=");
						КонецЕсли;
					КонецЦикла;
					ЭлемСписка.Представление = Формат(НомСтроки, "ЧГ=");
				КонецЕсли;
			КонецЕсли;
			
			Если Ветка = АктивнаяВетка Тогда
				Ном = 1;
				Пока ТабличныйДокумент.Области.Найти("П1000001_" + Формат(Ном, "ЧГ=")) <> Неопределено Цикл
					Обл = ТабличныйДокумент.Области["П1000001_" + Формат(Ном, "ЧГ=")];
					Обл.Значение = ДанныеМнЧ_П10000[Ном - 1].Данные["П1000001"];
					Ном = Ном + 1;
				КонецЦикла;
			КонецЕсли;
			
			Если Ветка.АдресТабличногоДокумента <> Неопределено Тогда
				УдалитьИзВременногоХранилища(Ветка.АдресТабличногоДокумента);
				Ветка.АдресТабличногоДокумента = ПоместитьВоВременноеХранилище(ТД, УникальныйИдентификатор);
			КонецЕсли;
			
		КонецЦикла;
		
		СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяРаздела]
			= ПоместитьВоВременноеХранилище(ДеревоДанных, УникальныйИдентификатор);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьДатуВЯчейках(Форма)
	
	Форма.ТабличныйДокумент.Области.ДатаПодписи.Значение = Форма.ДатаПодписи;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСведенияОбОрганизацииНаСервере(ВПрограммеИзмененаДатаПодписи = Ложь)
	
	ЗаполнитьСведенияОбОрганизации(ЭтаФорма, ВПрограммеИзмененаДатаПодписи);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьСведенияОбОрганизации(Форма, ВПрограммеИзмененаДатаПодписи = Ложь)
	
	Если НЕ ВПрограммеИзмененаДатаПодписи Тогда
	
		СтрокаСведений = "ИННЮЛ, КППЮЛ, НаимЮЛПол, КодНО, ТипНП, ТелОрганизации, ФИО";
		
		СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(
			Форма.СтруктураРеквизитовФормы.Организация, Форма.ДатаПодписи, СтрокаСведений);
		
		ИНН = СокрЛП(СведенияОбОрганизации.ИННЮЛ);
		КПП = СокрЛП(СведенияОбОрганизации.КППЮЛ);
		
		Форма.ТабличныйДокумент.Области.ИНН.Значение = ИНН;
		Форма.ТабличныйДокумент.Области.КПП.Значение = КПП;
		
		КодНО = СведенияОбОрганизации.КодНО;
		Для Инд = СтрДлина(СведенияОбОрганизации.КодНО) + 1 По 4 Цикл
			КодНО = " " + КодНО;
		КонецЦикла;
		Форма.ТабличныйДокумент.Области.НалоговыйОрган.Значение = КодНО;
		
		Если Форма.СтруктураРеквизитовФормы.ИП Тогда
			НаименованиеОрганизации = СокрЛП(СведенияОбОрганизации.ФИО);
		Иначе
			НаименованиеОрганизации = СокрЛП(СведенияОбОрганизации.НаимЮлПол);
		КонецЕсли;
		Форма.ТабличныйДокумент.Области.НаимОрг.Значение = НаименованиеОрганизации;
		
		Форма.ТабличныйДокумент.Области.ТелОрганизации.Значение = СокрЛП(СведенияОбОрганизации.ТелОрганизации);
		
		ЗаполнитьДатуВЯчейках(Форма);
		
	Иначе
		
		Если Форма.СтруктураРеквизитовФормы.ИП Тогда
			
			СтрокаСведений = "ФИО";
			
			СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(
			Форма.СтруктураРеквизитовФормы.Организация, Форма.ДатаПодписи, СтрокаСведений);
			
			Форма.ТабличныйДокумент.Области.НаимОрг.Значение = СокрЛП(СведенияОбОрганизации.ФИО);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Форма.ЗаполнитьСведенияОПодписантах();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСведенияОПодписантах() Экспорт
	
	ТипПодписанта = "1";
	Подписант = "";
	НаименованиеОрганизацииПредставителя = "";
	ДокументПредставителя = "";
	
	// Выяснение, есть ли представитель.
	КодНО = СокрЛП(ТабличныйДокумент.Области.НалоговыйОрган.Значение);
	КПП   = СокрЛП(ТабличныйДокумент.Области.КПП.Значение);
	
	СведенияОПредставителе = РегламентированнаяОтчетностьВызовСервера.ПолучитьПоКодамСведенияОПредставителе(
		СтруктураРеквизитовФормы.Организация, КодНО, КПП);
	
	ТипПодписанта = СведенияОПредставителе.ТипПодписанта;
	
	Если ТипПодписанта = "1" Тогда
		// Представителя нет.
		Если РегламентированнаяОтчетностьВызовСервера.ЭтоЮридическоеЛицо(СтруктураРеквизитовФормы.Организация) Тогда
			// Подписант - руководитель.
			СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(
				СтруктураРеквизитовФормы.Организация, ДатаПодписи, "ФИОРук, ФИО");
			Подписант = СокрЛП(?(ЗначениеЗаполнено(СведенияОбОрганизации.ФИОРук), СведенияОбОрганизации.ФИОРук, СведенияОбОрганизации.ФИО));
		Иначе
			Подписант = ТабличныйДокумент.Области.НаимОрг.Значение;
		КонецЕсли;
	Иначе
		// Представитель есть, подписант - он.
		Подписант = СведенияОПредставителе.ФИОПредставителя;
		НаименованиеОрганизацииПредставителя = СведенияОПредставителе.НаименованиеОрганизацииПредставителя;
		ДокументПредставителя = СведенияОПредставителе.ДокументПредставителя;
	КонецЕсли;
	
	ТабличныйДокумент.Области.ПрПодп.Значение = ТипПодписанта;
	ТабличныйДокумент.Области.ОргПодписант.Значение = Подписант;
	ТабличныйДокумент.Области.ОргУп.Значение = НаименованиеОрганизацииПредставителя;
	ТабличныйДокумент.Области.ДокУпПред.Значение = ДокументПредставителя;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ВвестиПоказатель(Элемент, Область, КодПоказателя, Знач ЭтоСумма, Знач ТекстВыбора, ТаблицаВыбора, СтандартнаяОбработка, КолонкаПоиска = "Код") Экспорт
	
	Если ТаблицаВыбора = Неопределено ИЛИ СтруктураРеквизитовФормы.мАвтоВыборКодов Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	Если Область.Имя = КодПоказателя ИЛИ МногострочнаяЧастьТекущейОбласти(Область) <> Неопределено Тогда
		ИсходноеЗначение = ?(ТипЗнч(Область.Значение) = Тип("Строка"), СокрЛП(Область.Значение), Область.Значение);
	Иначе
		Разделитель = ?(Лев(Область.Имя, СтрДлина(КодПоказателя) + 1) = КодПоказателя + "_", "_", "");
		ИндексОбласти = 1;
		ИсходноеЗначение = "";
		Пока ЭтаФорма[ТекущийЭлемент.Имя].Области.Найти(КодПоказателя + Разделитель + Формат(ИндексОбласти, "ЧГ=")) <> Неопределено Цикл
			ИсходноеЗначение = ИсходноеЗначение + Строка(ЭтаФорма[ТекущийЭлемент.Имя].Области[КодПоказателя + Разделитель + Формат(ИндексОбласти, "ЧГ=")].Значение);
			ИндексОбласти = ИндексОбласти + 1;
		КонецЦикла;
		ИсходноеЗначение = СокрЛП(ИсходноеЗначение);
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Заголовок",          ТекстВыбора);
	ПараметрыФормы.Вставить("ТаблицаЗначений",    ТаблицаВыбора);
	ПараметрыФормы.Вставить("СтруктураДляПоиска", Новый Структура(КолонкаПоиска, ИсходноеЗначение));
	
	ДополнительныеПараметры = Новый Структура("ИндексОбласти, КодПоказателя, КолонкаПоиска, Область, Разделитель, Элемент", ИндексОбласти, КодПоказателя, КолонкаПоиска, Область, Разделитель, Элемент);
	ОписаниеОповещения = Новый ОписаниеОповещения("ВвестиПоказательЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ОткрытьФорму("Обработка.ОбщиеОбъектыРеглОтчетности.Форма.ФормаВыбораЗначенияИзТаблицы", ПараметрыФормы, ЭтаФорма,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ВвестиПоказательЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	ИндексОбласти = ДополнительныеПараметры.ИндексОбласти;
	КодПоказателя = ДополнительныеПараметры.КодПоказателя;
	КолонкаПоиска = ДополнительныеПараметры.КолонкаПоиска;
	Область = ДополнительныеПараметры.Область;
	Разделитель = ДополнительныеПараметры.Разделитель;
	Элемент = ДополнительныеПараметры.Элемент;
	
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Область.Имя = КодПоказателя ИЛИ МногострочнаяЧастьТекущейОбласти(Область) <> Неопределено Тогда
		Область.Значение = РезультатВыбора[КолонкаПоиска];
	Иначе
		СтрокаРезультатВыбора = Строка(РезультатВыбора[КолонкаПоиска]);
		Для Инд = СтрДлина(СтрокаРезультатВыбора) + 1 По ИндексОбласти - 1 Цикл
			СтрокаРезультатВыбора = " " + РезультатВыбора[КолонкаПоиска];
		КонецЦикла;
		Для Инд = 1 По ИндексОбласти - 1 Цикл
			ЭтаФорма[ТекущийЭлемент.Имя].Области[КодПоказателя + Разделитель + Формат(Инд, "ЧГ=")].Значение = СокрЛП(Сред(РезультатВыбора[КолонкаПоиска], Инд, 1));
		КонецЦикла;
	КонецЕсли;
	
	Модифицированность = Истина;
	
	ТабличныйДокументПриИзмененииСодержимогоОбласти(Элемент, Область);
	
КонецПроцедуры

&НаКлиенте
Процедура АктивизироватьЯчейку(Ячейка) Экспорт
	
	РегламентированнаяОтчетностьКлиент.АктивизироватьЯчейку(ЭтаФорма, Ячейка);
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьДеревоРазделовОтчетаНаКлиенте() Экспорт
	
	// Необходимо для работы универсального механизма.
	Возврат;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьДеревоРазделовОтчетаНаСервере()
	
	ЭтаФорма["РазделыОтчета"].ПолучитьЭлементы().Очистить();
	
	Для Каждого ЭлементДереваСтраницОтчета Из ЭтаФорма["мДеревоСтраницОтчета"].ПолучитьЭлементы() Цикл
		
		Если ЭлементДереваСтраницОтчета.ПоказатьСтраницу = 1 Тогда
			
			ЭлементРазделовОтчета = ЭтаФорма["РазделыОтчета"].ПолучитьЭлементы().Добавить();
			
			ЭлементРазделовОтчета.КолонкаРазделыОтчета         = ЭлементДереваСтраницОтчета.Представление;
			ЭлементРазделовОтчета.КолонкаРазделыОтчетаСокрНаим = ЭлементДереваСтраницОтчета.ИмяСтраницы;
			ЭлементРазделовОтчета.ИндексКартинки               = 1;
			ЭлементРазделовОтчета.РазделМногостраничный        = Ложь;
			ЭлементРазделовОтчета.РазделМногострочный          = Ложь;
			
			Если ЭлементРазделовОтчета.КолонкаРазделыОтчетаСокрНаим = "Реестр" Тогда
				
				ДеревоДанныхРеестр = ПолучитьИзВременногоХранилища(
					СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхРеестр"]);
				
				КолСтрокВДеревеДанныхРеестр = Макс(ДеревоДанныхРеестр.Строки.Количество(), 1);
				
				ЭлементРазделовОтчета.ИндексКартинки = 0;
				ЭлементРазделовОтчета.РазделМногостраничный = Истина;
				
				Для НомерСтраницыРеестр = 1 По КолСтрокВДеревеДанныхРеестр Цикл
					
					ЭлементРеестр = ЭлементРазделовОтчета.ПолучитьЭлементы().Добавить();
					
					ЭлементРеестр.КолонкаРазделыОтчета              = "Стр. " + Формат(НомерСтраницыРеестр, "ЧГ=");
					ЭлементРеестр.КолонкаРазделыОтчетаСокрНаим      = "Реестр";
					ЭлементРеестр.КолонкаНомерСтраницыРазделаОтчета = НомерСтраницыРеестр;
					ЭлементРеестр.ИндексКартинки                    = 0;
					ЭлементРеестр.РазделМногостраничный             = ЭлементРазделовОтчета.РазделМногостраничный;
					ЭлементРеестр.РазделМногострочный               = ЭлементРазделовОтчета.РазделМногострочный;
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура РазделыОтчетаПриАктивизацииСтроки(Элемент)
	
	Если Элемент.ТекущиеДанные = Неопределено
	 ИЛИ Элемент.ТекущаяСтрока = СтруктураРеквизитовФормы.ТекущаяСтрокаРазделовОтчета Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураРеквизитовФормы.ТекущаяСтрокаРазделовОтчета = Элемент.ТекущаяСтрока;
	Элементы.ОчиститьТекущуюСтраницу.Доступность = Истина;
	Если СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере Тогда
		
		Если Элемент.ТекущиеДанные.РазделМногостраничный Тогда
			Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета
				= ?(Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета = Неопределено
				ИЛИ Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета = 0,
				1, Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета);
		КонецЕсли;
		
		Если Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Реестр" Тогда
			
			НовыеНомераСтрокМногоуровнегоРаздела = Новый Массив;
			
			ТекРодитель = Элемент.ТекущиеДанные.ПолучитьРодителя();
			Если ТекРодитель <> Неопределено Тогда
				Пока ТекРодитель.ПолучитьРодителя() <> Неопределено Цикл
					НовыеНомераСтрокМногоуровнегоРаздела.Вставить(0, ТекРодитель.КолонкаНомерСтраницыРазделаОтчета);
					ТекРодитель = ТекРодитель.ПолучитьРодителя();
				КонецЦикла;
			КонецЕсли;
			
			НовыеНомераСтрокМногоуровнегоРаздела.Добавить(Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета);
			
			ВывестиДанныеВТабличныйДокументНаСервере(
				Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим,
				НовыеНомераСтрокМногоуровнегоРаздела);
			
		Иначе
			ВывестиДанныеВТабличныйДокументНаСервере(
				Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
		КонецЕсли;
		
	Иначе
		СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Истина;
	КонецЕсли;
	
	КМенюРО = Элементы.РазделыОтчета.КонтекстноеМеню;
	Если Элемент.ТекущиеДанные.РазделМногостраничный Тогда
		Элемент.Развернуть(Элемент.ТекущаяСтрока);
		КМенюРО.Видимость = Истина;
		Если Элемент.ТекущиеДанные.ПолучитьРодителя() = Неопределено Тогда
			Элементы.ОчиститьТекущуюСтраницу.Доступность = Ложь;
		КонецЕсли;
		
		Если НЕ Элемент.ТекущиеДанные.ПолучитьРодителя() = Неопределено
			И Элемент.ТекущиеДанные.ПолучитьРодителя().ПолучитьЭлементы().Количество() > 1 Тогда
			КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюДобавитьСтраницу.Видимость = Истина;
			КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюУдалитьСтраницу.Видимость = Истина;
			
		Иначе
			КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюДобавитьСтраницу.Видимость = Истина;
			КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюУдалитьСтраницу.Видимость = Ложь;
			
		КонецЕсли;
		
		#Если ВебКлиент Тогда
			ВидимостьМеню = КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюДобавитьСтраницу.Видимость;
			КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюДобавитьСтраницу.Видимость = Ложь;
		#КонецЕсли
		
		КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюДобавитьСтраницу.Заголовок = "Добавить страницу";
		
		#Если ВебКлиент Тогда
			КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюДобавитьСтраницу.Видимость = ВидимостьМеню;
		#КонецЕсли
	Иначе
		КМенюРО.Видимость = Ложь;
		КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюДобавитьСтраницу.Видимость = Ложь;
		КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюУдалитьСтраницу.Видимость = Ложь;
	КонецЕсли;
	
	Если Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Титульный" Тогда
		Элементы.Обновить.Доступность = Истина;
	Иначе
		Элементы.Обновить.Доступность = Ложь;
	КонецЕсли;
	
	Если Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Титульный" Тогда
		Элементы.ТабличныйДокументКонтекстноеМенюГруппаСтроки.Видимость = Ложь;
	Иначе
		Элементы.ТабличныйДокументКонтекстноеМенюГруппаСтроки.Видимость = Истина;
	КонецЕсли;
	
	УправлениеВидимостьюСсылкиУдалитьСтраницу();
	
	Элементы.ТабличныйДокумент.ТекущаяОбласть = ТабличныйДокумент.Область(1, 1);
	
КонецПроцедуры

&НаКлиенте
Процедура УправлениеВидимостьюСсылкиУдалитьСтраницу()
	
	Обл1 = ТабличныйДокумент.Области.Найти("УдалитьСтраницуЗначок");
	Обл2 = ТабличныйДокумент.Области.Найти("УдалитьСтраницу");
	
	Если Обл1 <> Неопределено И Обл2 <> Неопределено Тогда
		Если Элементы.РазделыОтчета.ТекущиеДанные.ПолучитьРодителя() = Неопределено Тогда
			Обл1.Текст = "";
			Обл1.Гиперссылка = Ложь;
			Обл2.Текст = "";
			Обл2.Гиперссылка = Ложь;
		Иначе
			БолееОднойСтраницыВРазделе
			= Элементы.РазделыОтчета.ТекущиеДанные.ПолучитьРодителя().ПолучитьЭлементы().Количество() > 1;
			Обл1.Текст = ?(БолееОднойСтраницыВРазделе, "х", "");
			Обл1.Гиперссылка = ?(БолееОднойСтраницыВРазделе, Истина, Ложь);
			Обл2.Текст = ?(БолееОднойСтраницыВРазделе, "Удалить страницу", "");
			Обл2.Гиперссылка = ?(БолееОднойСтраницыВРазделе, Истина, Ложь);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Обновить(Команда)
	
	ЗаполнитьСведенияОбОрганизацииНаСервере();
	
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
		УстановитьДоступностьОбластей(ЭтаФорма, "Титульный");
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	РегламентированнаяОтчетностьКлиент.ПередЗакрытиемРегламентированногоОтчета(ЭтаФорма, Отказ, СтандартнаяОбработка, ЗавершениеРаботы, ТекстПредупреждения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ЗавершениеРаботы Тогда
				
		Возврат;
		
	КонецЕсли;
	
	ПриЗакрытииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПриЗакрытииНаСервере()
	
	РегламентированнаяОтчетность.ПриЗакрытииРегламентированногоОтчета(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если СтрНайти(Заголовок, СтруктураРеквизитовФормы.СтрПериодОтчета) = 0 Тогда
		Заголовок = Заголовок + " за " + СтруктураРеквизитовФормы.СтрПериодОтчета;
	КонецЕсли;
	
	ОргСтр = " (" + СтруктураРеквизитовФормы.НаимОрганизации + ")";
	Если СтрНайти(Заголовок, ОргСтр) = 0 Тогда
		Заголовок = Заголовок + ОргСтр;
	КонецЕсли;
	
	Заголовок = Заголовок + ?(СтрНайти(ЭтаФорма.ИмяФормы, "Внешний") > 0, " - внешний отчет", "");
	
	ПодключитьОбработчикОжидания("ВыполнитьПроверкуПередОткрытием", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПроверкуПередОткрытием()
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПриОткрытииЗавершение", ЭтотОбъект);
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередОткрытиемФормыРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытииЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Модифицированность = Ложь;
		Закрыть();
		Возврат;
	КонецЕсли;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОтобразитьНомерКорректировки(Форма)
	
	НомерКорр = Форма.СтруктураРеквизитовФормы.ВидДокумента * Форма.НомерКорректировки;
	НомерКорректировкиСтрока = Формат(НомерКорр, "ЧН=0; ЧГ=");
	СтрДлинаНомерКорректировкиСтрока = СтрДлина(НомерКорректировкиСтрока);
	
	Форма.ТабличныйДокумент.Области["НомерКорректировки"].Значение = НомерКорректировкиСтрока;
	
Конецпроцедуры

&НаКлиенте
Процедура ОбработкаВыбораИФНС()
	
	КодИМНС = СокрЛП(ТабличныйДокумент.Области.НалоговыйОрган.Значение);
	КПП = СокрЛП(ТабличныйДокумент.Области.КПП.Значение);
	ЗначенияДляОтбора = Новый Массив;
	ЗначенияДляОтбора.Добавить(Новый Структура("КодНО, КПП", КодИМНС, КПП));
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Организация", СтруктураРеквизитовФормы.Организация);
	ПараметрыФормы.Вставить("ЗначенияДляОтбора", ЗначенияДляОтбора);
	
	ФормаВыбораНалоговогоОргана = РегламентированнаяОтчетностьКлиент.ПолучитьОбщуюФормуПоИмени(
		"ФормаВыбораНалоговогоОргана", ПараметрыФормы, ЭтаФорма);
	
	Если ФормаВыбораНалоговогоОргана.ТаблицаНО.Количество() <> 0 Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаВыбораИФНСЗавершение", ЭтотОбъект);
		ФормаВыбораНалоговогоОргана.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
		ФормаВыбораНалоговогоОргана.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		ФормаВыбораНалоговогоОргана.Открыть();
		
	ИначеЕсли НЕ ЗначениеЗаполнено(КодИМНС) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Код налогового органа необходимо задать в справочнике ""Организации"".'");
		Сообщение.Сообщить();
		Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
			УстановитьДоступностьОбластей(ЭтаФорма, СтруктураРеквизитовФормы.НаимТекущегоРаздела);
		КонецЕсли;
		
	Иначе
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Для выбора инспекции, необходимо завести соответствующую запись в справочнике ""Регистрации в налоговом органе"".'");
		Сообщение.Сообщить();
		Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
			УстановитьДоступностьОбластей(ЭтаФорма, СтруктураРеквизитовФормы.НаимТекущегоРаздела);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораИФНСЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	Если РезультатВыбора <> Неопределено Тогда
		
		ВыбранныйКодНО = РезультатВыбора.КодНО;
		ДлинаКодаНО = СтрДлина(ВыбранныйКодНО);
		
		Для Инд = ДлинаКодаНО + 1 По 4 Цикл
			ВыбранныйКодНО = "0" + ВыбранныйКодНО;
		КонецЦикла;
		
		ТабличныйДокумент.Области["НалоговыйОрган"].Значение = ВыбранныйКодНО;
		
		ТабличныйДокумент.Области["КПП"].Значение = РезультатВыбора.КПП;
		
		ЗаполнитьСведенияОПодписантах();
		
		Модифицированность = Истина;
		
	КонецЕсли;
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
		УстановитьДоступностьОбластей(ЭтаФорма, СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ СТЫКОВКИ С СЕРВИСОМ СДАЧИ ОТЧЕТНОСТИ ЧЕРЕЗ ПРЕДСТАВИТЕЛЯ

&НаКлиенте
Процедура ОтправитьЧерезПредставителя(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОтправитьЧерезПредставителяЗавершение", ЭтотОбъект);
	
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьЧерезПредставителяЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ПриНажатииНаКнопкуОтправкиЧерезПредставителяВРегламентированномОтчете(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВИнтернете(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьВИнтернетеЗавершение", ЭтотОбъект);
	
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВИнтернетеЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ПроверитьВИнтернете(ЭтаФорма);
	
КонецПроцедуры

#Область ПанельОтправкиВКонтролирующиеОрганы

&НаКлиенте
Процедура ОбновитьОтправку(Команда)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОбновитьОтправкуИзПанелиОтправки(ЭтаФорма, "ФНС");
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаПротоколНажатие(Элемент)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьПротоколИзПанелиОтправки(ЭтаФорма, "ФНС");
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьНеотправленноеИзвещение(Команда)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОтправитьНеотправленноеИзвещениеИзПанелиОтправки(ЭтаФорма, "ФНС");
КонецПроцедуры

&НаКлиенте
Процедура ЭтапыОтправкиНажатие(Элемент)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьСостояниеОтправкиИзПанелиОтправки(ЭтаФорма, "ФНС");
КонецПроцедуры

&НаКлиенте
Процедура КритическиеОшибкиОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьКритическиеОшибкиИзПанелиОтправки(ЭтаФорма, "ФНС");
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаНаименованиеЭтапаНажатие(Элемент)
	
	ПараметрыИзменения = Новый Структура;
	ПараметрыИзменения.Вставить("Форма", ЭтаФорма);
	ПараметрыИзменения.Вставить("Организация", СтруктураРеквизитовФормы.Организация);
	ПараметрыИзменения.Вставить("КонтролирующийОрган",
		ПредопределенноеЗначение("Перечисление.ТипыКонтролирующихОрганов.ФНС"));
	
	РегламентированнаяОтчетностьКлиент.ИзменитьСтатусОтправки(ПараметрыИзменения);
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ОтправитьВКонтролирующийОрган(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверкаВозможностиВыгрузкиРегламентированногоОтчетаПередОтправкой", ЭтотОбъект);
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередОтправкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаВозможностиВыгрузкиРегламентированногоОтчетаПередОтправкой(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОтправитьВКонтролирующийОрганЗавершение", ЭтотОбъект);
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьВКонтролирующийОрганЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ПриНажатииНаКнопкуОтправкиВКонтролирующийОрган(ЭтаФорма, "ФНС");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Форма", ЭтаФорма);
	Оповещение = Новый ОписаниеОповещения("ПослеСохраненияФормыЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	СохранитьНаКлиенте(, Оповещение);
КонецПроцедуры

&НаКлиенте
Процедура ПослеСохраненияФормыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	ДополнительныеПараметры.Форма.Закрыть();
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОткрытьПрисоединенныеФайлы(Команда)
	
	РегламентированнаяОтчетностьКлиент.СохранитьОтчетИОткрытьФормуПрисоединенныеФайлы(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийПриИзменении(Элемент)
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Функция ОбъектОтчета(ЭтаФормаИмя) Экспорт
	
	Если мОбъектОтчета = Неопределено Тогда 
		мОбъектОтчета = РегламентированнаяОтчетностьВызовСервера.ОбъектОтчета(ЭтаФормаИмя);
	КонецЕсли;
	
	Возврат мОбъектОтчета;
	
КонецФункции

#Область ПроцедурыИФункцииМеханизмаПроверкиКонтрольныхСоотношений

&НаКлиенте
Процедура Проверить(Команда)
	
	РегламентированнаяОтчетностьКлиент.ПроверитьКонтрольныеСоотношения(ЭтаФорма, ОбработкаКС);
	
КонецПроцедуры

&НаСервере
Функция ПроверитьКонтрольныеСоотношенияВОтчете() Экспорт
	
	СтруктураРеквизитовФормы.ТекстДляЗаголовочнойЧасти =
		РегламентированнаяОтчетностьКлиентСервер.ПредставлениеДокументаРеглОтч(СтруктураРеквизитовФормы.мСохраненныйДок);
	
	Если СписокРасшифровкиПоказателей = Неопределено Тогда
		СписокРасшифровкиПоказателей = РегламентированнаяОтчетность.СоздатьСписокРасшифровкиПоказателей();
		
	Иначе
		СписокРасшифровкиПоказателей.Очистить();
		
	КонецЕсли;
	
	Если СписокРасшифровкиформулы = Неопределено Тогда
		СписокРасшифровкиформулы = РегламентированнаяОтчетность.СоздатьСписокРасшифровкиформулы();
		
	Иначе
		СписокРасшифровкиформулы.Очистить();
		
	КонецЕсли;
	
	СчетчикФормулДляРасшифровок = 0;
	
	ДанныеРеестра 		= ПолучитьИзВременногоХранилища(СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхРеестр"]);
	СтруктураРезультата = ОбработатьРезультат(,,Истина);
	
	Если РазделЗаполнен(ДанныеРеестра.Строки, Ложь) Тогда
		
		ПроверитьКС_2_1_1(СтруктураРезультата);
		ПроверитьКС_2_1_2(СтруктураРезультата);
		ПроверитьКС_2_1_3(СтруктураРезультата);
		ПроверитьКС_2_2_1(СтруктураРезультата);
		ПроверитьКС_2_2_2(СтруктураРезультата);
		ПроверитьКС_2_2_3(СтруктураРезультата);
	
	КонецЕсли;
	
	ДанныеРеестра 		= Неопределено;
	СтруктураРезультата = ОбработатьРезультат(, СтруктураРезультата, Ложь);
	
	Если СписокРасшифровкиПоказателей.Количество() > 0 Тогда 
		СтруктураРезультата.Вставить("СписокРасшифровкиПоказателей", 
			ПоместитьВоВременноеХранилище(СписокРасшифровкиПоказателей, Новый УникальныйИдентификатор));
			
	КонецЕсли;
	
	Если СписокРасшифровкиформулы.Количество() > 0 Тогда
		АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(СписокРасшифровкиформулы, Новый УникальныйИдентификатор);
		СтруктураРезультата.Вставить("СписокРасшифровкиформулы", АдресВоВременномХранилище);
		
	КонецЕсли;
	
	Возврат СтруктураРезультата;
	
КонецФункции

&НаСервере
Процедура ПроверитьКС_2_1_1(СтруктураРезультата)
	
	Заголовки	= Новый Структура;
	Заголовки.Вставить("ТекстФормулы"	,НСтр("ru='Проверка КС 2.1.1'"));
	Настройки	= ОбработатьНастройки(	, Заголовки, СтруктураРезультата);
	
	ПроверитьКС_НумерацияСтрок(СтруктураРезультата, Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_2_1_2(СтруктураРезультата)
	
	Заголовки	= Новый Структура;
	Заголовки.Вставить("ТекстФормулы"	,НСтр("ru='Проверка КС 2.1.2'"));
	Настройки	= ОбработатьНастройки(	, Заголовки, СтруктураРезультата);
	
	ПроверитьКС_СоответствиеНалоговойБазыПострочнойСумме(СтруктураРезультата, Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_2_1_3(СтруктураРезультата)
	
	Заголовки	= Новый Структура;
	Заголовки.Вставить("ТекстФормулы"		,НСтр("ru='Проверка КС 2.1.3'"));
	Заголовки.Вставить("ОписаниеКС"			,
		НСтр("ru='Контроль соблюдения положений п. 9 ст. 165 Кодекса (учет 180 дней). С даты документа, '") +
		НСтр("ru='подтверждающего оказание услуг, в графе 3, не должно пройти больше 180 дней'"));
	Настройки	= ОбработатьНастройки(		,Заголовки, СтруктураРезультата);
	
	ПроверитьКС_Контроль180Дней(СтруктураРезультата, Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_2_2_1(СтруктураРезультата)
	
	Заголовки	= Новый Структура;
	Заголовки.Вставить("ТекстФормулы"	,НСтр("ru='Проверка КС 2.2.1'"));
	Настройки	= ОбработатьНастройки(	, Заголовки, СтруктураРезультата);
	
	ПроверитьКС_СверкаСДекларациейНДС_Код(СтруктураРезультата, Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_2_2_2(СтруктураРезультата)
	
	Заголовки	= Новый Структура;
	Заголовки.Вставить("ТекстФормулы"	,НСтр("ru='Проверка КС 2.2.2'"));
	Настройки	= ОбработатьНастройки(	, Заголовки, СтруктураРезультата);
	Настройки.Вставить("ПоложительнаяРазница", Ложь);
	
	ПроверитьКС_СверкаСДекларациейНДС_Сумма(СтруктураРезультата, Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_2_2_3(СтруктураРезультата)
	
	Заголовки	= Новый Структура;
	Заголовки.Вставить("ТекстФормулы"	,НСтр("ru='Проверка КС 2.2.3'"));
	Настройки	= ОбработатьНастройки(	, Заголовки, СтруктураРезультата);
	Настройки.Вставить("ПоложительнаяРазница", Истина);
	
	ПроверитьКС_СверкаСДекларациейНДС_Сумма(СтруктураРезультата, Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_НумерацияСтрок(СтруктураРезультата, Настройки)
	
	Настройки.Вставить("Нарушение"			,НСтр("ru='Арифметическая ошибка'"));
	Настройки.Вставить("ОписаниеКС"			,НСтр("ru='Номер по порядку = номер предшествующей строки + 1'"));
	Настройки.Вставить("ШаблонОшибки1"		,
		НСтр("ru='Нарушен порядок следования номеров строк, вместо номера %1 указан номер %2'"));
	Настройки.Вставить("ШаблонОшибки2"		,НСтр("ru='Номер строки не является числом'"));
	Настройки.Вставить("ШаблонОшибки3"		,
		НСтр("ru='Номер строки не равен номеру предшествующей строки увеличенному на единицу'"));
	Настройки.Вставить("ШаблонДопСведений"	,НСтр("ru='Страница %1, Строка %2'"));
	Настройки.Вставить("ШаблонРасшифровки"	,НСтр("ru='%1 = %2 + 1'"));
	
	КолвоСтрок				= Новый Соответствие;
	КолвоСтрокРасч			= Новый Соответствие;
	ИндексСтраницы			= 0;
	
	Для каждого СтраницаРаздела Из ДанныеРеестра.Строки Цикл
		
		ДанныеСтраницы		= СтраницаРаздела.ДанныеМногострочныхЧастей.П10000.Строки;
		НомерСтраницы		= ИндексСтраницы + 1;
		НомерПредыдущий		= КолвоСтрок.Получить(СтраницаРаздела.Данные.КодОперации);
		НомерРасчетный		= КолвоСтрокРасч.Получить(СтраницаРаздела.Данные.КодОперации);
		НомерПредыдущий		= ?(НомерПредыдущий = Неопределено, 0, НомерПредыдущий);
		НомерРасчетный		= ?(НомерРасчетный = Неопределено, 0, НомерРасчетный);
		КолвоСтрокВМногострочнойЧасти = ДанныеСтраницы.Количество();
		
		Для НомерСтроки = 1 По КолвоСтрокВМногострочнойЧасти Цикл
			
			НомерРасчетный	= НомерРасчетный + 1;
			ДанныеМнСтроч	= ДанныеСтраницы[НомерСтроки - 1].Данные;
			Показатели 		= ЗаполнитьПоказатели("НомерСтроки", ДанныеСтраницы[НомерСтроки - 1].Данные, НомерСтроки);
			Настройки.Вставить("ДопСведенияПараметры", Новый Структура("НомерСтраницы, НомерСтроки", НомерСтраницы, 
				НомерРасчетный));
			ЗарегистрироватьФормулу(Настройки);
			РасшифроватьПоказатели(Показатели, Настройки, "Реестр", НомерСтраницы);
			НомерПоРеестру	= СтрокаВЧисло(Показатели.НомерСтроки.Значение);
			ЭтоОшибка		= Истина;
			
			Если НомерПоРеестру = Неопределено Тогда
				НомерПоРеестру 	= НомерПредыдущий + 1;
				Настройки.ОписаниеОшибки = Настройки.ШаблонОшибки2;
			Иначе
				Если НомерПоРеестру = НомерПредыдущий + 1 И НомерПоРеестру = НомерРасчетный Тогда
					ЭтоОшибка = Ложь;
				ИначеЕсли НомерПоРеестру = НомерРасчетный Тогда
					Настройки.ОписаниеОшибки = Настройки.ШаблонОшибки3;
				Иначе
					Настройки.ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонОшибки1, 
						НомерРасчетный, НомерПоРеестру);
				КонецЕсли;
			КонецЕсли;
			
			Настройки.Расшифровка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки, 
				НомерПоРеестру, НомерПредыдущий);
			Настройки.ЭтоОшибка = ЭтоОшибка;
			ДобавитьЭлементВСтруктуруОшибок(Настройки);
			НомерПредыдущий = НомерПоРеестру;
			
		КонецЦикла;
		
		Если ЗначениеЗаполнено(СтраницаРаздела.Данные.КодОперации) Тогда
			КолвоСтрок.Вставить(СтраницаРаздела.Данные.КодОперации, НомерПоРеестру);
			КолвоСтрокРасч.Вставить(СтраницаРаздела.Данные.КодОперации, НомерРасчетный);
		КонецЕсли; 
		
		ИндексСтраницы = ИндексСтраницы + 1;
		
	КонецЦикла;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_СоответствиеНалоговойБазыПострочнойСумме(СтруктураРезультата, Настройки)
	
	Настройки.Вставить("Нарушение"			,НСтр("ru='Арифметическая ошибка'"));
	Настройки.Вставить("ОписаниеКС"			,
		НСтр("ru='Итого налоговая база = ∑ Налоговая база по соответствующей операции по реализации '") +
		НСтр("ru='товаров (работ, услуг), обоснованность применения налоговой ставки 0 процентов по '") +
		НСтр("ru='которой документально подтверждена'"));
	Настройки.Вставить("ШаблонОшибки"		,
		НСтр("ru='Значение итоговой налоговой базы по реестру %1 %2 суммы значений налоговой базы по всем '") +
		НСтр("ru='строкам реестра сведений %3 на %4'"));
	Настройки.Вставить("ШаблонРасшифровки"	,НСтр("ru='%1 = %2'"));
	
	ДеревоДанных			= Новый ДеревоЗначений;
	ДеревоДанных.Колонки.Добавить("Статья");
	ДеревоДанных.Колонки.Добавить("НомерСтраницы");
	ДеревоДанных.Колонки.Добавить("НомерСтроки");
	ДеревоДанных.Колонки.Добавить("НомерРасчетный");
	ДеревоДанных.Колонки.Добавить("ПострочнаяСумма", Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(16, 2)));
	КоличествоСтраниц 		= ДанныеРеестра.Строки.Количество();
	КолвоСтрокРасч			= Новый Соответствие;
	
	Для НомерСтраницы = 1 По КоличествоСтраниц Цикл
		
		СтраницаРаздела		= ДанныеРеестра.Строки[НомерСтраницы - 1];
		КодОперации			= СтраницаРаздела.Данные.КодОперации;
		СтатьяДерева		= ДеревоДанных.Строки.Найти(КодОперации, "Статья");
		СтатьяДерева		= ?(Не СтатьяДерева = Неопределено, СтатьяДерева, ДеревоДанных.Строки.Добавить());
		СтатьяДерева.Статья	= КодОперации;
		КоличествоСтрок		= СтраницаРаздела.ДанныеМногострочныхЧастей.П10000.Строки.Количество();
		НомерРасчетный		= КолвоСтрокРасч.Получить(КодОперации);
		НомерРасчетный		= ?(НомерРасчетный = Неопределено, 0, НомерРасчетный);
		
		Для НомерСтроки = 1 По КоличествоСтрок Цикл
			
			СтрокаКоллекции	= СтраницаРаздела.ДанныеМногострочныхЧастей.П10000.Строки[НомерСтроки - 1];
			СтрокаДерева	= СтатьяДерева.Строки.Добавить();
			НомерРасчетный	= НомерРасчетный + 1;
			СтрокаДерева.НомерСтраницы = НомерСтраницы;
			СтрокаДерева.НомерСтроки = НомерСтроки;
			СтрокаДерева.НомерРасчетный = НомерРасчетный;
			ПоказательБазы	= ЗаполнитьПоказатели("НалоговаяБаза", СтрокаКоллекции.Данные, НомерСтроки);
			СтрокаДерева.ПострочнаяСумма = ПоказательБазы.НалоговаяБаза.Значение;
			СтатьяДерева.ПострочнаяСумма = СтатьяДерева.ПострочнаяСумма + ПоказательБазы.НалоговаяБаза.Значение;
			
		КонецЦикла;
		
		Если ЗначениеЗаполнено(КодОперации) Тогда
			КолвоСтрокРасч.Вставить(КодОперации, НомерРасчетный);
		КонецЕсли;
		
	КонецЦикла;
	
	Для НомерСтраницы = 1 По КоличествоСтраниц Цикл
		
		СтраницаРаздела		= ДанныеРеестра.Строки[НомерСтраницы - 1];
		КодОперации			= СтраницаРаздела.Данные.КодОперации;
		КодОперацииСтр		= ?(ЗначениеЗаполнено(КодОперации), КодОперации, "("""")");
		Настройки.Вставить("ШаблонДопСведений"	,НСтр("ru='Страница %1, Код операции %2'"));
		Настройки.Вставить("ДопСведенияПараметры", Новый Структура("НомерСтраницы, КодОперации", НомерСтраницы, 
			КодОперацииСтр));
		ЗарегистрироватьФормулу(Настройки);
		ПоказательИтого		= ЗаполнитьПоказатели("БазаИтого", СтраницаРаздела.Данные);
		РасшифроватьПоказатели(ПоказательИтого, Настройки, "Реестр", НомерСтраницы);
		СтатьяДерева		= ДеревоДанных.Строки.Найти(КодОперации, "Статья");
		ПострочнаяСумма		= 0;
		
		Если Не СтатьяДерева = Неопределено Тогда
			Для каждого СтрокаДерева Из СтатьяДерева.Строки Цикл
				Настройки.Вставить("ШаблонДопСведений"	,НСтр("ru='Страница %1, Строка %2'"));
				Настройки.Вставить("ДопСведенияПараметры", Новый Структура("НомерСтраницы, НомерСтроки", 
					СтрокаДерева.НомерСтраницы, СтрокаДерева.НомерРасчетный));
				ПоказательБазы	= ЗаполнитьПоказатели("НалоговаяБаза", СтрокаТЗВСтруктуру(СтрокаДерева), 
					СтрокаДерева.НомерСтроки);
				РасшифроватьПоказатели(ПоказательБазы, Настройки, "Реестр", СтрокаДерева.НомерСтраницы);
			КонецЦикла;
			ПострочнаяСумма = СтатьяДерева.ПострочнаяСумма;
		КонецЕсли;
			
		Разница		= ПоказательИтого.БазаИтого.Значение - Округлить(ПострочнаяСумма);
		ЭтоОшибка	= Не Разница = 0;
		Настройки.ОписаниеОшибки = ?(ЭтоОшибка, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			Настройки.ШаблонОшибки, ПоказательИтого.БазаИтого.Значение, ?(Разница > 0, "больше", "меньше"), 
			ПострочнаяСумма, ?(Разница > 0, Разница, -Разница)), Настройки.ШаблонОшибки);
		Настройки.Расшифровка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки, 
			ПоказательИтого.БазаИтого.Значение, ПострочнаяСумма);
		Настройки.ЭтоОшибка = ЭтоОшибка;
		Настройки.Вставить("ШаблонДопСведений"	,НСтр("ru='Страница %1, Код операции %2'"));
		Настройки.Вставить("ДопСведенияПараметры", Новый Структура("НомерСтраницы, КодОперации", НомерСтраницы, 
			КодОперацииСтр));
		ДобавитьЭлементВСтруктуруОшибок(Настройки);
	КонецЦикла;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_Контроль180Дней(СтруктураРезультата, Настройки)
	
	Настройки.Вставить("Нарушение"		,НСтр("ru='п. 9 ст. 165 НК РФ'"));
	Настройки.Вставить("ШаблонОшибки"		
		,НСтр("ru='С даты документа, подтверждающего оказание услуг, прошло более 180 дней (просрочка: %1 дн.)'"));
	Настройки.Вставить("ШаблонРасшифровки1"	,НСтр("ru='%1 + 180 дн. Итог [%2] = %3'"));
	Настройки.Вставить("ШаблонРасшифровки2"	,НСтр("ru='Указанное значение: (""%1"")'"));
	Настройки.Вставить("ШаблонДопСведений"	,НСтр("ru='Страница %1, Строка %2'"));
	
	КолвоСтрокРасч			= Новый Соответствие;
	ДатаНачалаОтчета		= СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета;
	НомерСтраницы			= 0;
	
	Для каждого СтраницаРаздела Из ДанныеРеестра.Строки Цикл
		
		ДанныеСтраницы		= СтраницаРаздела.ДанныеМногострочныхЧастей.П10000.Строки;
		НомерСтраницы		= НомерСтраницы + 1;
		НомерРасчетный		= КолвоСтрокРасч.Получить(СтраницаРаздела.Данные.КодОперации);
		НомерРасчетный		= ?(НомерРасчетный = Неопределено, 0, НомерРасчетный);
		КоличествоСтрок		= ДанныеСтраницы.Количество();
		
		Для НомерСтроки = 1 По КоличествоСтрок Цикл
			
			НомерРасчетный	= НомерРасчетный + 1;
			Настройки.Вставить("ДопСведенияПараметры", Новый Структура("НомерСтраницы, НомерСтроки", НомерСтраницы, 
				НомерРасчетный));
			ЗарегистрироватьФормулу(Настройки);
			Показатели = ЗаполнитьПоказатели("ДатаДокумента", ДанныеСтраницы[НомерСтроки - 1].Данные, НомерСтроки);
			РасшифроватьПоказатели(Показатели, Настройки, "Реестр", НомерСтраницы);
			
			КрайнийСрок		= Показатели.ДатаДокумента.Значение + (180 * 86400);
			Разница			= (ДатаНачалаОтчета - КрайнийСрок)/86400;
			Настройки.Расшифровка		= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки1, 
				Показатели.ДатаДокумента.ЗначениеСтр, Формат(КрайнийСрок, "ДЛФ=D"), Формат(ДатаНачалаОтчета, "ДЛФ=D"));
			Настройки.ОписаниеОшибки	= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонОшибки, 
				?(Разница > 100000, " - ", Разница));
			
			Если Не ЗначениеЗаполнено(Показатели.ДатаДокумента.ЗначениеСтр) Тогда
				Настройки.ОписаниеОшибки	= НСтр("ru='Значение не заполнено'");
				Настройки.Расшифровка		= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки2, 
					Показатели.ДатаДокумента.ЗначениеСтр);
			КонецЕсли;
			
			Настройки.ЭтоОшибка	= КрайнийСрок < ДатаНачалаОтчета;
			ДобавитьЭлементВСтруктуруОшибок(Настройки);
				
		КонецЦикла;
		
		Если ЗначениеЗаполнено(СтраницаРаздела.Данные.КодОперации) Тогда
			КолвоСтрокРасч.Вставить(СтраницаРаздела.Данные.КодОперации, НомерРасчетный);
		КонецЕсли; 
		
	КонецЦикла;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_СверкаСДекларациейНДС_Код(СтруктураРезультата, Настройки);
	
	Настройки.Вставить("Нарушение"		,НСтр("ru='Ошибка заполнения'"));
	Настройки.Вставить("ОписаниеКС"		,
		НСтр("ru='Код операции = строка 010 раздела 4 налоговой декларации по НДС'"));
	Настройки.Вставить("ШаблонОшибки1"		,
		НСтр("ru='Код операции по реализации товаров (работ, услуг) (""%1""), указанный в реестре, '") +
		НСтр("ru='не соответствует коду операции по реализации товаров (работ, услуг), '") +
		НСтр("ru='указанному в строке 010 раздела 4 налоговой декларации по НДС'"));
	Настройки.Вставить("ШаблонОшибки2"		,
		НСтр("ru='На титульном листе реестра не указана налоговая декларация по НДС'"));
	Настройки.Вставить("ШаблонОшибки3"		,НСтр("ru='Раздел 4 налоговой декларации по НДС не заполнен'"));
	Настройки.Вставить("ШаблонОшибки4"		,НСтр("ru='Код операции на странице реестра не заполнен'"));
	Настройки.Вставить("ШаблонРасшифровки"	,НСтр("ru='%1 = %2'"));
	Настройки.Вставить("ШаблонДопСведений"	,НСтр("ru='Страница %1'"));
	
	КоличествоСтраниц		= ДанныеРеестра.Строки.Количество();
	СоответствиеПроверяемых	= Новый Соответствие;
	ТаблицаДекларации		= Новый ТаблицаЗначений;
	ТаблицаДекларации.Колонки.Добавить("КодОперации");
	ТаблицаДекларации.Колонки.Добавить("НалБазаИтого", Новый ОписаниеТипов("Число"));
	ТаблицаДекларации.Колонки.Добавить("НомерРаздела", Новый ОписаниеТипов("Число"));
	ДекларацияНДС			= СтруктураРеквизитовФормы.ДекларацияНДС;
	ДекларацияОтсутствует	= Не ЗначениеЗаполнено(ДекларацияНДС);
	
	Если Не ДекларацияОтсутствует Тогда
	
		ДанныеДекларацияНДС	= РегламентированнаяОтчетность.ПолучитьДанныеСохрРегОтчета(ДекларацияНДС);
		НомерРаздела		= 0;
		ДанныеРаздела		= Новый Структура("КодОперации, НалБазаИтого");
		
		Пока Истина Цикл
			
			НомерРаздела = НомерРаздела + 1;
			ИмяПоказателя = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПоказательПоСтроке("Р4С010НДС").Имя, 
				"_", НомерРаздела);
			ДанныеДекларацияНДС.ДанныеРазделовРеглОтчета.Раздел4.Свойство(ИмяПоказателя, ДанныеРаздела.КодОперации);
			ИмяПоказателя = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПоказательПоСтроке("Р4С020НДС").Имя, 
				"_", НомерРаздела);
			ДанныеДекларацияНДС.ДанныеРазделовРеглОтчета.Раздел4.Свойство(ИмяПоказателя, ДанныеРаздела.НалБазаИтого);
			
			Если ДанныеРаздела.КодОперации = Неопределено Тогда
				Прервать;
			Иначе
				НоваяСтрока = ТаблицаДекларации.Добавить();
				НоваяСтрока.НомерРаздела = НомерРаздела;
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеРаздела);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли; 
	
	Для НомерСтраницы = 1 По КоличествоСтраниц Цикл
		
		Настройки.ЭтоОшибка = Истина;
		ОписаниеОшибки 		= Настройки.ШаблонОшибки1;
		Показатели = ЗаполнитьПоказатели("КодОперации", ДанныеРеестра.Строки[НомерСтраницы - 1].Данные);
		
		Если ДекларацияОтсутствует Тогда
			ОписаниеОшибки	= Настройки.ШаблонОшибки2;
		ИначеЕсли ТаблицаДекларации.Количество() = 1 И Не ЗначениеЗаполнено(ТаблицаДекларации[0].КодОперации) Тогда
			ОписаниеОшибки	= Настройки.ШаблонОшибки3;
		ИначеЕсли Не ЗначениеЗаполнено(Показатели.КодОперации.Значение) Тогда
			ОписаниеОшибки	= Настройки.ШаблонОшибки4;
		ИначеЕсли ТаблицаДекларации.НайтиСтроки(Новый Структура("КодОперации", 
			Показатели.КодОперации.Значение)).Количество() = 0 Тогда
		Иначе
			Настройки.ЭтоОшибка	= Ложь;
			СтрокиДекларации = ТаблицаДекларации.НайтиСтроки(Новый Структура("КодОперации", Показатели.КодОперации.Значение));
			СоответствиеПроверяемых.Вставить(НомерСтраницы, СтрокиДекларации);
		КонецЕсли;
		
		Настройки.ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ОписаниеОшибки, 
			Показатели.КодОперации.ЗначениеСтр);
		Настройки.Расшифровка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки, 
			?(ЗначениеЗаполнено(Показатели.КодОперации.ЗначениеСтр), Показатели.КодОперации.ЗначениеСтр, "("""")"), 
			?(Настройки.ЭтоОшибка, НСтр("ru='строка 010 раздела 4 налоговой декларации по НДС'"), 
			Показатели.КодОперации.ЗначениеСтр));
		Настройки.Вставить("ДопСведенияПараметры", Новый Структура("НомерСтраницы", НомерСтраницы));
		ЗарегистрироватьФормулу(Настройки);
		РасшифроватьПоказатели(Показатели, Настройки, "Реестр", НомерСтраницы);
			
		Если Не Настройки.ЭтоОшибка Тогда
			Для каждого СтрокаДекларации Из СтрокиДекларации Цикл
				
				Настройки.Вставить("ДопСведения", "Строка 010 Раздела 4 Налоговой декларации по НДС");
				Настройки.Вставить("ДопСведенияПараметры", Новый Структура);
				ПоказательКодНДС = ЗаполнитьПоказатели("Р4С010НДС", СтрокаТЗВСтруктуру(СтрокаДекларации), 
					СтрокаДекларации.НомерРаздела);
				РасшифроватьПоказатели(ПоказательКодНДС, Настройки, "Раздел4", НомерСтраницы,,, 
					СтруктураРеквизитовФормы.ДекларацияНДС);
				
			КонецЦикла;
		КонецЕсли;
		
		Настройки.Вставить("ДопСведенияПараметры", Новый Структура("НомерСтраницы", НомерСтраницы));
		ДобавитьЭлементВСтруктуруОшибок(Настройки);
		
	КонецЦикла;
	
	Настройки.Вставить("СоответствиеПроверяемых", ?(СоответствиеПроверяемых.Количество() = 0, Неопределено, 
		СоответствиеПроверяемых));
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_СверкаСДекларациейНДС_Сумма(СтруктураРезультата, Настройки);
	
	Настройки.Вставить("ШаблонНарушения"	,НСтр("ru='Арифметическая ошибка'"));
	Настройки.Вставить("ОписаниеКС"		,
		НСтр("ru='Итого налоговая база (в рублях) = строка 020 раздела 4 налоговой декларации НДС по '") +
		НСтр("ru='соответствующему коду операции'"));
	Настройки.Вставить("ШаблонОшибки"		,
		НСтр("ru='Налоговая база из реестра %1 налоговой базы из налоговой декларации по НДС по коду операции %2 на %3'"));
	Настройки.Вставить("ШаблонРасшифровки"	,НСтр("ru='%1 = %2'"));
	Настройки.Вставить("ШаблонДопСведений"	,НСтр("ru='Страница %1'"));
	КоличествоСтраниц = ДанныеРеестра.Строки.Количество();
	
	Если СтруктураРезультата.СоответствиеПроверяемых = Неопределено Тогда
		Возврат;	
	КонецЕсли;
	
	Для НомерСтраницы = 1 По КоличествоСтраниц Цикл
		
		СтрокиДекларации = СтруктураРезультата.СоответствиеПроверяемых.Получить(НомерСтраницы);
		
		Если СтрокиДекларации = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		БазаИтогоДекларация = 0;
			
		Для каждого СтрокаДекларации Из СтрокиДекларации Цикл
			БазаИтогоДекларация = БазаИтогоДекларация + СтрокаДекларации.НалБазаИтого;
		КонецЦикла;
		
		Показатели	= ЗаполнитьПоказатели("КодОперации, БазаИтого", ДанныеРеестра.Строки[НомерСтраницы - 1].Данные);
		Разница		= Округлить(Показатели.БазаИтого.Значение) - Округлить(БазаИтогоДекларация);
		
		Если Не (Настройки.ПоложительнаяРазница И Разница > 0 Или Не (Настройки.ПоложительнаяРазница Или Разница > 0)) 
			Тогда
			Продолжить;
		КонецЕсли;
		
		Настройки.Расшифровка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки, 
			Показатели.БазаИтого.Значение, БазаИтогоДекларация);
		Настройки.Вставить("ДопСведенияПараметры", Новый Структура("НомерСтраницы", НомерСтраницы));
		ЗарегистрироватьФормулу(Настройки);
		РасшифроватьПоказатели(Показатели, Настройки, "Реестр", НомерСтраницы);
		
		Для каждого СтрокаДекларации Из СтрокиДекларации Цикл
			
			Настройки.Вставить("ДопСведения", "Строка 020 Раздела 4 Налоговой декларации по НДС");
			Настройки.Вставить("ДопСведенияПараметры", Новый Структура);
			ПоказательСуммаНДС = ЗаполнитьПоказатели("Р4С020НДС", СтрокаТЗВСтруктуру(СтрокаДекларации), 
				СтрокаДекларации.НомерРаздела);
			РасшифроватьПоказатели(ПоказательСуммаНДС, Настройки, "Раздел4", НомерСтраницы,,, 
				СтруктураРеквизитовФормы.ДекларацияНДС);
			
		КонецЦикла;
	
		Настройки.ЭтоОшибка		= Не Разница = 0;
		Настройки.ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонОшибки, 
			?(Разница > 0, "больше", "меньше"), Показатели.КодОперации.ЗначениеСтр, ?(Разница > 0, Разница, -Разница));
		Настройки.Вставить("ДопСведенияПараметры", Новый Структура("НомерСтраницы", НомерСтраницы));
		ДобавитьЭлементВСтруктуруОшибок(Настройки);
			
	КонецЦикла;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Функция ПоказательПоСтроке(УсловныйКодПоказателя)
	
	Результат = Новый Структура;
	
	Если УсловныйКодПоказателя = "НомерСтроки" Тогда
		Результат.Вставить("Имя", "П1000001%1%2");
		Результат.Вставить("Представление", Нстр("ru='Номер строки'"));
		Результат.Вставить("ИзменяемаяРазмерность", Ложь);
		
	ИначеЕсли УсловныйКодПоказателя = "КодОперации" Тогда
		Результат.Вставить("Имя", "КодОперации");
		Результат.Вставить("Представление", Нстр("ru='Код операции'"));
		Результат.Вставить("ИзменяемаяРазмерность", Ложь);
		
	ИначеЕсли УсловныйКодПоказателя = "БазаИтого" Тогда
		Результат.Вставить("Имя", "НалБазаИтого");
		Результат.Вставить("Представление", Нстр("ru='Итоговая сумма налоговой базы'"));
		Результат.Вставить("ИзменяемаяРазмерность", Истина);
		
	ИначеЕсли УсловныйКодПоказателя = "НалоговаяБаза" Тогда
		Результат.Вставить("Имя", "П1000012%1%2");
		Результат.Вставить("Представление", Нстр("ru='Сумма налоговой базы'"));
		Результат.Вставить("ИзменяемаяРазмерность", Ложь);
		
	ИначеЕсли УсловныйКодПоказателя = "ДатаДокумента" Тогда
		Результат.Вставить("Имя", "П1000003%1%2");
		Результат.Вставить("Представление", Нстр("ru='Дата документа, подтверждающего оказание услуг'"));
		Результат.Вставить("ИзменяемаяРазмерность", Ложь);
		
	ИначеЕсли УсловныйКодПоказателя = "Р4С010НДС" Тогда
		Результат.Вставить("Имя", "П0004М1001003%1%2");
		Результат.Вставить("Представление", Нстр("ru='Код операции'"));
		Результат.Вставить("ИзменяемаяРазмерность", Ложь);
		
	ИначеЕсли УсловныйКодПоказателя = "Р4С020НДС" Тогда
		Результат.Вставить("Имя", "П0004М1002003%1%2");
		Результат.Вставить("Представление", Нстр("ru='Налоговая база'"));
		Результат.Вставить("ИзменяемаяРазмерность", Ложь);
		
	КонецЕсли;
	
	Результат.Вставить("ПредставлениеСформировано", Ложь);
	
	Возврат Результат
	
КонецФункции

&НаСервере
Функция ОбработатьНастройки(Знач Настройки = Неопределено, 
	Знач ИзменяемыеСвойства 	= Неопределено, 
	Знач СтруктураРезультата 	= Неопределено)
	
	Если Настройки = Неопределено Тогда
		
		Настройки = Новый Структура;
		Настройки.Вставить("ТекстФормулы"			, (НСтр("ru=''")));
		Настройки.Вставить("Нарушение"				, (НСтр("ru=''")));
		Настройки.Вставить("ОписаниеКС"				, (НСтр("ru=''")));
		Настройки.Вставить("ОписаниеОшибки"			, (НСтр("ru=''")));
		Настройки.Вставить("ОписаниеОшибок"			, Новый Массив);
		Настройки.Вставить("Расшифровка"			, (НСтр("ru=''")));
		Настройки.Вставить("ШаблонРасшифровки"		, (НСтр("ru=''")));
		Настройки.Вставить("ШаблонОшибки	"		, (НСтр("ru=''")));
		Настройки.Вставить("ДопСведения"			, (НСтр("ru=''")));
		Настройки.Вставить("ШаблонДопСведений"		, (НСтр("ru=''")));
		Настройки.Вставить("ДопСведенияПараметры"	, Новый Структура);
		Настройки.Вставить("Показатель"				, (НСтр("ru=''")));
		Настройки.Вставить("Показатели"				, Новый Массив);
		Настройки.Вставить("ЭтоОшибка"				, Ложь);
		Настройки.Вставить("ПроверятьПустые"		, Ложь);
		Настройки.Вставить("Декларирование"			, Ложь);
		Настройки.Вставить("СоответствиеПроверяемых");
		Настройки.Вставить("СтруктураОшибок");
		Настройки.Вставить("КоличествоНайденныхОшибок");
		Настройки.Вставить("КоличествоНайденныхБезОшибок");
		Настройки.Вставить("ДопСведенияВОписаниеКС");
		Настройки.Вставить("ДопСведенияВЗаголовокРасшифровки");
		Настройки.Вставить("ДопСведенияВСтрокуРасшифровки");
	
	КонецЕсли;
	
	Если Не ИзменяемыеСвойства = Неопределено Тогда
		Для каждого ЭлементКоллекции Из ИзменяемыеСвойства Цикл
			Если Настройки.Свойство(ЭлементКоллекции.Ключ) Тогда
				Настройки.Вставить(ЭлементКоллекции.Ключ, ЭлементКоллекции.Значение);
			КонецЕсли; 
		КонецЦикла;
	КонецЕсли;
	
	Если Не СтруктураРезультата = Неопределено Тогда
		Для каждого ЭлементКоллекции Из СтруктураРезультата Цикл
			Если Настройки.Свойство(ЭлементКоллекции.Ключ) Тогда
				Настройки.Вставить(ЭлементКоллекции.Ключ, ЭлементКоллекции.Значение);
			КонецЕсли; 
		КонецЦикла;
	КонецЕсли;
	
	Возврат Настройки;
	
КонецФункции

&НаСервере
Функция ЗаполнитьПоказатели(Знач СтрокаПоказателей, Источник, НомерСтроки = 0, 
	НомерПодстроки1 = Неопределено, НомерПодстроки2 = Неопределено, НомерПодстроки3 = Неопределено)

	МассивНазваний			= СтрРазделить(СтрокаПоказателей, ", ", Ложь);
	СтруктураПоказателей	= Новый Структура;
	
	Для каждого ЭлементМассива Из МассивНазваний Цикл
		Показатель = ПоказательПоСтроке(ЭлементМассива);
		СтруктураПоказателей.Вставить(ЭлементМассива, Показатель);
	КонецЦикла;
	
	Для каждого ЭлементКоллекции Из СтруктураПоказателей Цикл
		Если ЗначениеЗаполнено(НомерСтроки) Тогда
			ВставитьЗначениеМногострочногоПоказателя(Источник, ЭлементКоллекции.Значение, НомерСтроки,
				НомерПодстроки1, НомерПодстроки2, НомерПодстроки3);
		Иначе
			ВставитьЗначениеПоказателя(Источник, ЭлементКоллекции.Значение);
		КонецЕсли;
	КонецЦикла;
	
	Возврат СтруктураПоказателей;
	
КонецФункции

&НаСервере
Процедура РасшифроватьПоказатели(СтруктураПоказателей, 
	Знач Настройки,
	Знач НазваниеСтраницы,
	Знач НомерСтраницы,
	Знач ВключаяПоказатели	= Неопределено,
	Знач ИсключаяПоказатели	= Неопределено,
	Знач ДокументРО			= Неопределено)
	
	Для каждого ЭлементКоллекции Из СтруктураПоказателей Цикл
		
		Если ПропуститьЭлемент(ЭлементКоллекции.Ключ, ВключаяПоказатели, ИсключаяПоказатели) Тогда
			Продолжить;
		КонецЕсли;
		
		ЭлементКоллекции.Значение.Представление = ПредставлениеПоказателя(ЭлементКоллекции.Значение, 
			Настройки.ДопСведенияВСтрокуРасшифровки, Настройки);
		ВнестиПоказательВРасшифровку(ЭлементКоллекции.Значение, НазваниеСтраницы, СтрокаЧГ0(НомерСтраницы), ДокументРО);
	
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ОбработатьРезультат(Знач Настройки = Неопределено, Знач СтруктураРезультата = Неопределено,
	Создать = Неопределено);
	
	Если Создать = Истина Тогда
	
		СтруктураРезультата = Новый Структура;
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", 0);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", 0);
		СтруктураРезультата.Вставить("СтруктураОшибок", Новый Структура);
		СтруктураРезультата.Вставить("ДопСведенияВОписаниеКС"			, Истина);
		СтруктураРезультата.Вставить("ДопСведенияВЗаголовокРасшифровки"	, Ложь);
		СтруктураРезультата.Вставить("ДопСведенияВСтрокуРасшифровки"	, Истина);
		СтруктураРезультата.Вставить("СоответствиеПроверяемых");
		СтруктураРезультата.Вставить("ТаблицаОКСМ");
	
	ИначеЕсли Создать = Неопределено Тогда
		
		ЗаполнитьЗначенияСвойств(СтруктураРезультата, Настройки,
			"КоличествоНайденныхОшибок, КоличествоНайденныхБезОшибок, СоответствиеПроверяемых");
	
	ИначеЕсли Создать = Ложь Тогда
		
		СтруктураРезультата.Удалить("ДопСведенияВОписаниеКС");
		СтруктураРезультата.Удалить("ДопСведенияВЗаголовокРасшифровки");
		СтруктураРезультата.Удалить("ДопСведенияВСтрокуРасшифровки");
		СтруктураРезультата.Удалить("СоответствиеПроверяемых");
		СтруктураРезультата.Удалить("ТаблицаОКСМ");
	
	КонецЕсли;
	
	Возврат СтруктураРезультата;
	
КонецФункции

&НаСервере
Функция ПропуститьЭлемент(НазваниеПоказателя, СтрокаВключая, СтрокаИсключая)
	
	Если СтрокаВключая = Неопределено И СтрокаИсключая = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли; 
	
	Обработать	= Не СтрокаВключая = Неопределено И Не СтрНайти(СтрокаВключая, НазваниеПоказателя) = 0
		Или Не СтрокаИсключая = Неопределено И СтрНайти(СтрокаИсключая, НазваниеПоказателя) = 0;
	Исключить	= Не СтрокаИсключая = Неопределено И Не СтрНайти(СтрокаИсключая, НазваниеПоказателя) = 0
		Или Не СтрокаВключая = Неопределено И СтрНайти(СтрокаВключая, НазваниеПоказателя) = 0;
	
	Если Исключить Тогда
		Возврат Истина;
	КонецЕсли; 
	
	Если Обработать Тогда
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ЗарегистрироватьФормулу(Знач Настройки);

	СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
	ОписаниеКС = СформироватьОписаниеКС(Настройки, "ДопСведенияВЗаголовокРасшифровки");
	РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(СписокРасшифровкиФормулы, 
		ОписаниеКС, , СчетчикФормулДляРасшифровок);
	
КонецПроцедуры

&НаСервере
Функция СформироватьОписаниеКС(Знач Настройки, ЗначениеСвойства)
	
	Перем ДобавитьДопСведения;
	
	Настройки.Свойство(ЗначениеСвойства, ДобавитьДопСведения);
	
	Если ДобавитьДопСведения Тогда
		СформироватьТекстДопСведений(Настройки);
		Возврат Настройки.ОписаниеКС + " (" + Настройки.ДопСведения + ")"; 
	Иначе
		Возврат Настройки.ОписаниеКС;
	КонецЕсли; 
	
КонецФункции

&НаСервере
Процедура СформироватьТекстДопСведений(Знач Настройки)
	
	Если Не Настройки.ДопСведенияПараметры = Неопределено И
		Не Настройки.ДопСведенияПараметры.Количество() = 0 Тогда
		
		МассивПараметров = Новый Массив;
		Для каждого ЭлементКоллекции Из Настройки.ДопСведенияПараметры Цикл
			МассивПараметров.Добавить(ЭлементКоллекции.Значение);
		КонецЦикла;
		
		КоличествоПараметров = МассивПараметров.Количество();
		
		Если КоличествоПараметров = 1 Тогда
			Настройки.ДопСведения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				Настройки.ШаблонДопСведений, МассивПараметров[0]);
		ИначеЕсли КоличествоПараметров = 2 Тогда
			Настройки.ДопСведения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				Настройки.ШаблонДопСведений, МассивПараметров[0], МассивПараметров[1]);
		ИначеЕсли КоличествоПараметров = 3 Тогда
			Настройки.ДопСведения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				Настройки.ШаблонДопСведений, МассивПараметров[0], МассивПараметров[1], МассивПараметров[2]);
		ИначеЕсли КоличествоПараметров = 4 Тогда
			Настройки.ДопСведения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				Настройки.ШаблонДопСведений, МассивПараметров[0], МассивПараметров[1], МассивПараметров[2], 
				МассивПараметров[3]);
		ИначеЕсли КоличествоПараметров = 5 Тогда
			Настройки.ДопСведения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				Настройки.ШаблонДопСведений, МассивПараметров[0], МассивПараметров[1], МассивПараметров[2], 
				МассивПараметров[3], МассивПараметров[4]);
		Иначе
			Настройки.ДопСведения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				Настройки.ШаблонДопСведений, МассивПараметров[0], МассивПараметров[1], МассивПараметров[2], 
				МассивПараметров[3], МассивПараметров[4], МассивПараметров[5]);
		КонецЕсли;
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьЭлементВСтруктуруОшибок(Настройки)
	
	Если Настройки.ЭтоОшибка Тогда
		Настройки.КоличествоНайденныхОшибок = Настройки.КоличествоНайденныхОшибок + 1;
	Иначе
		Настройки.КоличествоНайденныхБезОшибок = Настройки.КоличествоНайденныхБезОшибок + 1;
	КонецЕсли;
	
	Счетчик		= Формат(Настройки.КоличествоНайденныхОшибок + Настройки.КоличествоНайденныхБезОшибок, "ЧГ=0");
	ОписаниеКС	= СформироватьОписаниеКС(Настройки, "ДопСведенияВОписаниеКС");
	ОписаниеКС	= ?(ПустаяСтрока(Настройки.ТекстФормулы), "", Настройки.ТекстФормулы + Символы.ПС) + ОписаниеКС;
	
	Настройки.СтруктураОшибок.Вставить("ТекстовоеПредставлениеФормулы" + Счетчик, ОписаниеКС);
	Настройки.СтруктураОшибок.Вставить("Расшифровка"	+ Счетчик, Настройки.Расшифровка);
	Настройки.СтруктураОшибок.Вставить("ЭтоОшибка"		+ Счетчик, Настройки.ЭтоОшибка);
	Настройки.СтруктураОшибок.Вставить("Нарушение"		+ Счетчик, Настройки.Нарушение);
	Настройки.СтруктураОшибок.Вставить("Описание"		+ Счетчик, Настройки.ОписаниеОшибки);
	Настройки.СтруктураОшибок.Вставить("Комментарий"	+ Счетчик, НСтр("ru=''"));
	
КонецПроцедуры

&НаСервере
Функция ПредставлениеПоказателя(Показатель, ПолноеПредставление, Знач Настройки = Неопределено)
	
	Если Настройки = Неопределено Или Показатель.ПредставлениеСформировано Тогда
		Возврат Показатель.Представление;
	КонецЕсли; 
	
	СформироватьТекстДопСведений(Настройки);
	
	Представление = ?(ПолноеПредставление, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Нстр("ru='%1. %2'"), 
		Настройки.ДопСведения, Показатель.Представление), Настройки.ДопСведения);
	Показатель.ПредставлениеСформировано = Истина;
	
	Возврат Представление;
	
КонецФункции

&НаСервере
Функция Округлить(Показатель)
	
	Возврат РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, Показатель);
	
КонецФункции

&НаСервере
Функция СтрокаВЧисло(Знач Значение)
	
	Возврат СтроковыеФункцииКлиентСервер.СтрокаВЧисло(Значение);
	
КонецФункции

&НаСервере
Функция РазделЗаполнен(ВнешняяКоллекция, Знач Результат)
	
	Для каждого ВнешнийЭлемент Из ВнешняяКоллекция Цикл
	
		Для Каждого Показатель Из ВнешнийЭлемент.Данные Цикл
			Если Прав(Показатель.Ключ, 2) = "01" Тогда
				// номер строки
				Продолжить;
			КонецЕсли;
			Результат = Результат Или ЗначениеЗаполнено(Показатель.Значение);
		КонецЦикла;
		
		Если Не ВнешнийЭлемент.ДанныеМногострочныхЧастей.Количество() = 0 Тогда
			Для каждого ВнутреннийЭлемент Из ВнешнийЭлемент.ДанныеМногострочныхЧастей Цикл
				Результат = Результат Или РазделЗаполнен(ВнутреннийЭлемент.Значение.Строки, Результат)
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ВставитьЗначениеПоказателя(ИсточникДанных, Показатель)
	
	Если ИсточникДанных.Свойство(Показатель.Имя) Тогда
		ЗначениеПоказателя = ИсточникДанных[Показатель.Имя];
	Иначе
		ЗначениеПоказателя = 0;
	КонецЕсли;
	
	Если Показатель.Свойство("ИзменяемаяРазмерность") И Показатель.ИзменяемаяРазмерность = Истина Тогда
		Если ЗначениеПоказателя = Неопределено Тогда
			ЗначениеПоказателя = 0;
		Иначе
			ЗначениеПоказателя = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, ЗначениеПоказателя);
		КонецЕсли;
	КонецЕсли;
	
	Если Показатель.Свойство("Формат") И ЗначениеЗаполнено(Показатель.Формат) Тогда
		ПредставлениеЗначения = Формат(ЗначениеПоказателя, Показатель.Формат);
	ИначеЕсли ТипЗнч(ЗначениеПоказателя) = Тип("Строка") Тогда
		ПредставлениеЗначения = ЗначениеПоказателя;
	ИначеЕсли ТипЗнч(ЗначениеПоказателя) = Тип("Дата") Тогда
		ПредставлениеЗначения = Формат(ЗначениеПоказателя, "ДЛФ=D");
	ИначеЕсли ТипЗнч(ЗначениеПоказателя) = Тип("Число") Тогда
		ПредставлениеЗначения = Формат(ЗначениеПоказателя, "ЧРД=,; ЧН=");
	Иначе
		ПредставлениеЗначения = Строка(ЗначениеПоказателя);
	КонецЕсли;
	
	Показатель.Вставить("Значение", ЗначениеПоказателя);
	Показатель.Вставить("ЗначениеСтр", ПредставлениеЗначения);
	
КонецПроцедуры

&НаСервере
Процедура ВставитьЗначениеМногострочногоПоказателя(ИсточникДанных, Показатель, НомерСтроки, 
	НомерПодстроки1 = Неопределено, НомерПодстроки2 = Неопределено, НомерПодстроки3 = Неопределено)
	
	ИмяПоказателя = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Показатель.Имя, "");
	
	Если ИсточникДанных.Свойство(ИмяПоказателя) Тогда
		ЗначениеПоказателя = ИсточникДанных[ИмяПоказателя];
	ИначеЕсли ИсточникДанных.Свойство("ПострочнаяСумма") Тогда
		ЗначениеПоказателя = ИсточникДанных.ПострочнаяСумма;
	ИначеЕсли Показатель.Имя = "П0004М1001003%1%2" Тогда
		ЗначениеПоказателя = ИсточникДанных.КодОперации;
	ИначеЕсли Показатель.Имя = "П0004М1002003%1%2" Тогда
		ЗначениеПоказателя = ИсточникДанных.НалБазаИтого;
	Иначе
		ЗначениеПоказателя = 0;
	КонецЕсли;
	
	Если Показатель.Свойство("ИзменяемаяРазмерность") И Показатель.ИзменяемаяРазмерность = Истина Тогда
		ЗначениеПоказателя = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, ЗначениеПоказателя);
	КонецЕсли;
	
	Если Показатель.Свойство("Формат") И ЗначениеЗаполнено(Показатель.Формат) Тогда
		ПредставлениеЗначения = Формат(ЗначениеПоказателя, Показатель.Формат);
	ИначеЕсли ТипЗнч(ЗначениеПоказателя) = Тип("Строка") Тогда
		ПредставлениеЗначения = ЗначениеПоказателя;
	ИначеЕсли ТипЗнч(ЗначениеПоказателя) = Тип("Дата") Тогда
		ПредставлениеЗначения = Формат(ЗначениеПоказателя, "ДЛФ=D");
	ИначеЕсли ТипЗнч(ЗначениеПоказателя) = Тип("Число") Тогда
		ПредставлениеЗначения = Формат(ЗначениеПоказателя, "ЧРД=,; ЧН=");
	Иначе
		ПредставлениеЗначения = Строка(ЗначениеПоказателя);
	КонецЕсли;
	
	Показатель.Вставить("Значение", ЗначениеПоказателя);
	Показатель.Вставить("ЗначениеСтр", ПредставлениеЗначения);
	
	НомерСтрокиСтр = СтрокаЧГ0(НомерСтроки);
	Показатель.Вставить("НомерСтроки", НомерСтрокиСтр);
	
	Если Не НомерПодстроки1 = Неопределено Тогда
		Показатель.Вставить("НомерПодстроки1", НомерПодстроки1);
	КонецЕсли;
	
	Если Не НомерПодстроки2 = Неопределено Тогда
		Показатель.Вставить("НомерПодстроки2", НомерПодстроки2);
	КонецЕсли;
	
	Если Не НомерПодстроки3 = Неопределено Тогда
		Показатель.Вставить("НомерПодстроки3", НомерПодстроки3);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВнестиПоказательВРасшифровку(Показатель, ИмяСтраницы, НомерСтраницы = Неопределено, ДокументРО = Неопределено)
	
	ПредставлениеПоказателя = Показатель.Представление;
	
	ЗначениеПоказателя = ?(ТипЗнч(Показатель.Значение) = Тип ("Дата"), Показатель.ЗначениеСтр, Показатель.Значение);
	
	Если Показатель.Свойство("НомерПодстроки3") Тогда
		ИмяПоказателя = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Показатель.Имя, "_", 
		Показатель.НомерСтроки, "_", Показатель.НомерПодстроки1, "_", Показатель.НомерПодстроки2, "_", 
		Показатель.НомерПодстроки3);
	ИначеЕсли Показатель.Свойство("НомерПодстроки2") Тогда
		ИмяПоказателя = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Показатель.Имя, "_", 
		Показатель.НомерСтроки, "_", Показатель.НомерПодстроки1, "_", Показатель.НомерПодстроки2);
	ИначеЕсли Показатель.Свойство("НомерПодстроки1") Тогда
		ИмяПоказателя = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Показатель.Имя, "_", 
		Показатель.НомерСтроки, "_", Показатель.НомерПодстроки1);
	ИначеЕсли Показатель.Свойство("НомерСтроки") Тогда
		ИмяПоказателя = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Показатель.Имя, "_", 
		Показатель.НомерСтроки);
	Иначе
		ИмяПоказателя = Показатель.Имя;
	КонецЕсли;
	
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(
		СписокРасшифровкиПоказателей,
		ИмяПоказателя,
		ПредставлениеПоказателя,
		ЗначениеПоказателя,
		"",
		?(ДокументРО = Неопределено, СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, ДокументРО.Ссылка),
		ИмяСтраницы,
		Неопределено,
		НомерСтраницы,
		СчетчикФормулДляРасшифровок);
	
КонецПроцедуры

&НаСервере
Функция СтрокаЧГ0(ИсходноеЧисло)
	
	Возврат Формат(ИсходноеЧисло, "ЧН=; ЧГ=");
	
КонецФункции

&НаСервере
Функция СтрокаТЗВСтруктуру(СтрокаТЗ)
	
	Результат = Новый Структура;
	ТаблицаВладелец = СтрокаТЗ.Владелец();
	
	Для каждого Колонка Из ТаблицаВладелец.Колонки Цикл
		Результат.Вставить(Колонка.Имя);
	КонецЦикла;
	
	ЗаполнитьЗначенияСвойств(Результат, СтрокаТЗ);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

&НаКлиентеНаСервереБезКонтекста
Функция ИмяОтчета(ЭтаФормаИмя)
	Форма_Имя = СтрЗаменить(ЭтаФормаИмя, "Внешний", "");
	Возврат Сред(Лев(Форма_Имя, СтрНайти(Форма_Имя, ".Форма.") - 1), 7);
КонецФункции