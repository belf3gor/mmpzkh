#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если НЕ (Параметры.Свойство("Ключ") И ТипЗнч(Параметры.Ключ) = Тип("Структура")) Тогда
		ТекстСообщения = НСтр("ru = 'Реестр документов может быть сформирован только из формы списка документов'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,,, Отказ);
		Возврат;
	КонецЕсли;
	
	Если Параметры.Ключ.Свойство("НастройкиКомпоновки") Тогда
		СписокКомпоновщикНастроек.ЗагрузитьНастройки(Параметры.Ключ.НастройкиКомпоновки);
	КонецЕсли;
	
	ВыводитьЗаголовок = Истина;
	ВыводитьПодписи   = Истина;
	БухгалтерскиеОтчетыВызовСервера.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	
	Если Параметры.Свойство("Заголовок") Тогда
		Заголовок = Параметры.Заголовок;
	Иначе
		Заголовок = НСтр("ru = 'Реестр документов'");
	КонецЕсли;
	
	Если Параметры.Свойство("Организация") Тогда
		Отчет.Организация = Параметры.Организация;
	КонецЕсли;
	
	Если Параметры.Свойство("ТипыДокументов") Тогда
		Если ТипЗнч(Параметры.ТипыДокументов) = Тип("Массив") Тогда
			ТипыДокументов.ЗагрузитьЗначения(Параметры.ТипыДокументов);
		ИначеЕсли ТипЗнч(Параметры.ТипыДокументов) = Тип("СписокЗначений") Тогда
			ТипыДокументов = Параметры.ТипыДокументов;
		КонецЕсли;
	КонецЕсли;
	
	Если Параметры.Свойство("Период") Тогда
		Отчет.НачалоПериода = Параметры.Период.ДатаНачала;
		Отчет.КонецПериода  = Параметры.Период.ДатаОкончания;
	КонецЕсли;
	
	ИмяСписка = Заголовок;
	
	ИнициализироватьОтчет(Параметры.Ключ.ОсновнаяТаблица, Параметры.Ключ.ТекстЗапроса);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ФормированиеРеестраВФоне();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	ПользовательскиеНастройкиМодифицированы = Истина;
	БухгалтерскиеОтчетыКлиент.ПередЗакрытием(ЭтотОбъект, Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка);
	
КонецПроцедуры

&НаСервере
Процедура ПриСохраненииПользовательскихНастроекНаСервере(Настройки)
	
	ОписаниеНастроекРеестра = Новый ОписаниеНастроек();
	ОписаниеНастроекРеестра.КлючОбъекта   = "Отчет.РеестрДокументов/Список";
	ОписаниеНастроекРеестра.КлючНастроек  = ИмяТаблицы;
	ОписаниеНастроекРеестра.Пользователь  = ИмяПользователя();
	ОписаниеНастроекРеестра.Представление = ИмяСписка;
	ТаблицаПоказателей = Отчет.Показатели.Выгрузить();
	Если ПоказателиИзменены(ТаблицаПоказателей) Тогда
		ХранилищеПользовательскихНастроекОтчетов.Сохранить(
			ОписаниеНастроекРеестра.КлючОбъекта,
			ОписаниеНастроекРеестра.КлючНастроек,
			Новый ХранилищеЗначения(ТаблицаПоказателей),
			ОписаниеНастроекРеестра);
	Иначе
		ХранилищеПользовательскихНастроекОтчетов.Удалить(
			ОписаниеНастроекРеестра.КлючОбъекта,
			ОписаниеНастроекРеестра.КлючНастроек,
			ОписаниеНастроекРеестра.Пользователь);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеПользовательскихНастроекНаСервере(Настройки)
	
	СохраняемыеПоказатели = ХранилищеПользовательскихНастроекОтчетов.Загрузить("Отчет.РеестрДокументов/Список", ИмяТаблицы);
	Если СохраняемыеПоказатели <> Неопределено Тогда
		Отчет.Показатели.Очистить();
		
		ВсеНастройкиСписка = СписокКомпоновщикНастроек.ПолучитьНастройки();
		Если ВсеНастройкиСписка.Структура.Количество() > 0 Тогда
			ПоказателиИсточник = ВсеНастройкиСписка.Структура[0].Выбор.Элементы;
		Иначе
			ПоказателиИсточник = СтандартныеПоказателиСтруктура();
		КонецЕсли;
		
		ТаблицаПоказателей = СохраняемыеПоказатели.Получить();
		ЗаполнитьТаблицуПоказателей(
			ПоказателиИсточник,
			Отчет.КомпоновщикНастроек.Настройки.Структура[0].Выбор, // ПоказателиПриемник
			ВсеНастройкиСписка.УсловноеОформление.Элементы,
			ТаблицаПоказателей);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
	БухгалтерскиеОтчетыКлиент.ОрганизацияПриИзменении(ЭтотОбъект, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура НачалоПериодаПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КонецПериодаПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РезультатПриАктивизацииОбласти(Элемент)
	Если ТипЗнч(Результат.ВыделенныеОбласти) = Тип("ВыделенныеОбластиТабличногоДокумента") Тогда
		ИнтервалОжидания = ?(ПолучитьСкоростьКлиентскогоСоединения() = СкоростьКлиентскогоСоединения.Низкая, 1, 0.2);
		ПодключитьОбработчикОжидания("Подключаемый_РезультатПриАктивизацииОбластиПодключаемый", ИнтервалОжидания, Истина);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТоварыУслугиПриИзменении(Элемент)
	Если НЕ ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КомпоновщикНастроекНастройкиОтборПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
	БухгалтерскиеОтчетыКлиент.ОтборыПриИзменении(ЭтотОбъект, Элемент, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура КомпоновщикНастроекНастройкиОтборПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	БухгалтерскиеОтчетыКлиент.ОтборыПередНачаломДобавления(ЭтотОбъект, Элемент, Отказ, Копирование, Родитель, Группа);
	
КонецПроцедуры

&НаКлиенте
Процедура КомпоновщикНастроекНастройкиОтборПередНачаломИзменения(Элемент, Отказ)
	
	БухгалтерскиеОтчетыКлиент.ОтборыПередНачаломИзменения(ЭтотОбъект, Элемент, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура РезультатОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	
	БухгалтерскиеОтчетыКлиент.ОбработкаРасшифровкиСтандартногоОтчета(ЭтотОбъект, Элемент, Расшифровка, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура РезультатОбработкаДополнительнойРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	
	// Не будем обрабатывать нажатие на правую кнопку мыши.
	// Покажем стандартное контекстное меню ячейки табличного документа.
	Расшифровка = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборыПравоеЗначениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СписокПараметров = Новый Структура;
	СписокПараметров.Вставить("Дата",               Отчет.КонецПериода);
	СписокПараметров.Вставить("Организация",        Отчет.Организация);
	СписокПараметров.Вставить("СчетУчета",          Неопределено);
	СписокПараметров.Вставить("Номенклатура",       Неопределено);
	СписокПараметров.Вставить("Склад",              Неопределено);
	СписокПараметров.Вставить("Контрагент",         Неопределено);
	СписокПараметров.Вставить("ДоговорКонтрагента", Неопределено);
	
	БухгалтерскиеОтчетыКлиент.ОтборыПравоеЗначениеНачалоВыбора(ЭтотОбъект, Элемент, ДанныеВыбора, СтандартнаяОбработка, СписокПараметров);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыГруппировка

&НаКлиенте
Процедура ПоказателиПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказателиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказателиПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказателиСнятьФлажки(Команда)
	
	Для каждого СтрокаТаблицы Из Отчет.Показатели Цикл
		СтрокаТаблицы.Использование = Ложь;
	КонецЦикла;
	
	Если НЕ ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказателиУстановитьФлажки(Команда)
	
	Для каждого СтрокаТаблицы Из Отчет.Показатели Цикл
		СтрокаТаблицы.Использование = Истина;
	КонецЦикла;
	
	Если НЕ ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказателиУстановитьСтандартныеНастройки(Команда)
	
	ПоказателиУстановитьСтандартныеНастройкиНаСервере();
	
	Если НЕ ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Печать(Команда)
	
	ПодключитьОбработчикОжидания("ФормированиеРеестраВФоне", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьСразу(Команда)
	Результат.Напечатать(РежимИспользованияДиалогаПечати.НеИспользовать);
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьНастройки(Команда)
	
	Элементы.Сформировать.КнопкаПоУмолчанию = Истина;
	СкрытьНастройки();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьНастройки(Команда)
	
	Элементы.ПрименитьНастройки.КнопкаПоУмолчанию = Истина;
	ОткрытьНастройки();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьПериод(Команда)
	
	ПараметрыВыбора    = Новый Структура("НачалоПериода,КонецПериода", Отчет.НачалоПериода, Отчет.КонецПериода);
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыбратьПериодЗавершение", ЭтотОбъект);
	ОткрытьФорму("ОбщаяФорма.ВыборСтандартногоПериода", ПараметрыВыбора, Элементы.ВыбратьПериод,,,, ОписаниеОповещения);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ЗаполнитьОтборКомпоновщикаНастройкиДанных(ЭлементыИсточник, ЭлементыПриемник, КорневойУровень = Истина)
	
	НеиспользуемыйОтбор   = Новый Массив;
	ДействующиеПоляОтбора = Новый Массив;
	Для каждого ЭлементОтбора Из ЭлементыИсточник Цикл
		Если ТипЗнч(ЭлементОтбора) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			НовыйЭлементОтбора = ЭлементыПриемник.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
			ЗаполнитьЗначенияСвойств(НовыйЭлементОтбора, ЭлементОтбора);
			ЗаполнитьОтборКомпоновщикаНастройкиДанных(ЭлементОтбора.Элементы, НовыйЭлементОтбора.Элементы, Ложь);
		ИначеЕсли ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			Если КорневойУровень
				И (ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Дата")
				ИЛИ ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДатаОтбора")
				ИЛИ ЭлементОтбора.ВидСравнения  = ВидСравненияКомпоновкиДанных.Равно
					И ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Организация")) Тогда
				Продолжить;
			КонецЕсли;
			
			Если НЕ ЭлементОтбора.Использование Тогда
				НеиспользуемыйОтбор.Добавить(ЭлементОтбора);
				Продолжить;
			Иначе
				ДействующиеПоляОтбора.Добавить(ЭлементОтбора.ЛевоеЗначение);
			КонецЕсли;
			
			НовыйЭлементОтбора = ЭлементыПриемник.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЗаполнитьЗначенияСвойств(НовыйЭлементОтбора, ЭлементОтбора,, "ИдентификаторПользовательскойНастройки, Представление");
			НовыйЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ;
		КонецЕсли;
	КонецЦикла;
	
	Для каждого ЭлементОтбора Из НеиспользуемыйОтбор Цикл
		Если ДействующиеПоляОтбора.Найти(ЭлементОтбора.ЛевоеЗначение) = Неопределено Тогда
			НовыйЭлементОтбора = ЭлементыПриемник.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЗаполнитьЗначенияСвойств(НовыйЭлементОтбора, ЭлементОтбора,, "ИдентификаторПользовательскойНастройки, Представление");
			НовыйЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ;
		Иначе
			ЭлементыИсточник.Удалить(ЭлементОтбора);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПараметрыКомпоновщикаДанных(ЭлементыИсточник, ЭлементыПриемник)
	
	Для каждого ЭлементПараметра Из ЭлементыИсточник Цикл
		Если НЕ ЭлементПараметра.Использование Тогда
			Продолжить;
		КонецЕсли;
		
		ЭлементПараметраКуда = ЭлементыПриемник.Найти(ЭлементПараметра.Параметр);
		Если ЭлементПараметраКуда = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(ЭлементПараметраКуда, ЭлементПараметра);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПорядокКомпоновщикаДанных(ЭлементыИсточник, ЭлементыПриемник)
	
	Для каждого ЭлементПараметра Из ЭлементыИсточник Цикл
		Если Строка(ЭлементПараметра.Поле) = "ДополнительноеПолеПорядка2" Тогда
			Продолжить;
		КонецЕсли;
		ЭлементПараметраКуда = ЭлементыПриемник.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
		ЗаполнитьЗначенияСвойств(ЭлементПараметраКуда, ЭлементПараметра);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДоступныеПоляВыбора(ЭлементыИсточник, ЭлементыПриемник)
	Для каждого ЭлементВыбора Из ЭлементыИсточник Цикл
		Если ЭлементВыбора.Папка Тогда
			Если ЕстьОтборПоПервичнымДокументам Тогда
				ЗаполнитьДоступныеПоляВыбора(ЭлементВыбора.Элементы, ЭлементыПриемник);
			КонецЕсли;
		Иначе
			НовоеПолеВыбора = ЭлементыПриемник.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
			ЗаполнитьЗначенияСвойств(НовоеПолеВыбора, ЭлементВыбора);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Функция СгенерироватьТекстЗапроса(ИмяТаблицы)
	
	РезультатТекст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Таб.Ссылка КАК Ссылка,
	|	Таб.Дата КАК Дата,
	|	Таб.Номер,
	|	Таб.Проведен КАК Проведен,
	|	Таб.ПометкаУдаления КАК ПометкаУдаления";
	
	ПозицияТочки  = СтрНайти(ИмяТаблицы, ".");
	ТипМетаданных = Лев(ИмяТаблицы,  ПозицияТочки - 1);
	ИмяОбъекта    = Прав(ИмяТаблицы, СтрДлина(ИмяТаблицы) - ПозицияТочки);
	
	Если ТипМетаданных = "Документ" Тогда
		Менеджер = "Документы";
		РеквизитыСписка = Метаданные[Менеджер][ИмяОбъекта].Реквизиты;
		РезультатТекст  = РезультатТекст + ",
			|	Таб.ВерсияДанных";
	Иначе
		Менеджер = "ЖурналыДокументов";
		РеквизитыСписка = Метаданные[Менеджер][ИмяОбъекта].Графы;
		РезультатТекст  = РезультатТекст + ",
			|	Таб.Тип";
	КонецЕсли;
	
	Для каждого Реквизит Из РеквизитыСписка Цикл
		РезультатТекст = РезультатТекст + ",
			|	Таб." + Реквизит.Имя;
	КонецЦикла;
	
	Попытка
		МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ИмяТаблицы);
		ДополнительныеРеквизиты = МенеджерОбъекта.ПолучитьДополнительныеРеквизитыДляРеестра();
	Исключение
		ДополнительныеРеквизиты = Новый Структура;
	КонецПопытки;
	
	Для каждого КлючИЗначение Из ДополнительныеРеквизиты Цикл
		НазваниеРеквизита = "Таб." + КлючИЗначение.Ключ;
		Если СтрНайти(КлючИЗначение.Значение, "Таб.") > 0 Тогда
			ПолеРеквизита = КлючИЗначение.Значение + " КАК " + КлючИЗначение.Ключ;
		Иначе
			ПолеРеквизита = "Таб." + КлючИЗначение.Значение + " КАК " + КлючИЗначение.Ключ;
		КонецЕсли;
		
		Если СтрНайти(РезультатТекст, НазваниеРеквизита) = 0 Тогда
			РезультатТекст = РезультатТекст + ",
				|	" + ПолеРеквизита;
		Иначе
			РезультатТекст = СтрЗаменить(РезультатТекст, НазваниеРеквизита, ПолеРеквизита);
		КонецЕсли;
	КонецЦикла;
	
	РезультатТекст = РезультатТекст + ",
		|	ЕСТЬNULL(ДанныеПервичныхДокументов.Номер, """") КАК НомерВходящегоДокумента,
		|	ЕСТЬNULL(ДанныеПервичныхДокументов.Дата, """") КАК ДатаВходящегоДокумента
		|ИЗ
		|	" + ИмяТаблицы + " КАК Таб
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК ДанныеПервичныхДокументов
		|		ПО Таб.Организация = ДанныеПервичныхДокументов.Организация
		|			И Таб.Ссылка = ДанныеПервичныхДокументов.Документ
		|
		|УПОРЯДОЧИТЬ ПО
		|	Дата";
	
	Возврат РезультатТекст;
	
КонецФункции

&НаСервере
Функция УточнитьТекстЗапросаПоДопРеквизитам(ТекстЗапроса)
	
	СхемаЗапроса = Новый СхемаЗапроса;
	СхемаЗапроса.УстановитьТекстЗапроса(ТекстЗапроса);
	ПакетЗапросов    = СхемаЗапроса.ПакетЗапросов;
	Колонки          = ПакетЗапросов[0].Колонки;
	Оператор         = ПакетЗапросов[0].Операторы[0];
	ИсточникЗапроса  = Оператор.Источники[0];
	ИмяТаблицы       = ИсточникЗапроса.Источник.ИмяТаблицы;
	Псевдоним        = ИсточникЗапроса.Источник.Псевдоним;
	
	Попытка
		МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ИмяТаблицы);
		ДополнительныеРеквизиты = МенеджерОбъекта.ПолучитьДополнительныеРеквизитыДляРеестра();
	Исключение
		ДополнительныеРеквизиты = Новый Структура;
	КонецПопытки;
	
	// Учтем особенности журналов документов.
	Если СтрНайти(ИмяТаблицы, "ЖурналДокументов.") > 0 Тогда
		КолонкаСсылка1 = Колонки.Найти("Ссылка1");
		Если КолонкаСсылка1 <> Неопределено Тогда
			Колонки.Удалить(Колонки.Индекс(КолонкаСсылка1));
		КонецЕсли;
		
		ПолеВалюта = "ВалютаДокумента";
		КолонкаВалюта = Колонки.Найти("Валюта");
		Если КолонкаВалюта <> Неопределено И КолонкаВалюта.Псевдоним = "Валюта" Тогда
			ПолеВалюта = "Валюта";
			КолонкаВалюта.Псевдоним = "ВалютаДокумента";
		КонецЕсли;
		
		КолонкаВалютаДокумента = Колонки.Найти("ВалютаДокумента");
		Если НЕ ДополнительныеРеквизиты.Свойство("ВалютаДокумента") И КолонкаВалютаДокумента <> Неопределено Тогда
			ИсточникДанных = Псевдоним + "." + ПолеВалюта;
			ТекстЗапросаВалютаДокумента =
				"ВЫБОР КОГДА "
				+ ИсточникДанных + " ЕСТЬ NULL ИЛИ "
				+ ИсточникДанных + "=ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка) ТОГДА &ВалютаРеглУчета ИНАЧЕ "
				+ ИсточникДанных
				+ " КОНЕЦ";
			СхемаВалютаДокумента = Новый ВыражениеСхемыЗапроса(ТекстЗапросаВалютаДокумента);
			Индекс = Оператор.ВыбираемыеПоля.Индекс(КолонкаВалютаДокумента.Поля[0]);
			Оператор.ВыбираемыеПоля.Установить(Индекс, СхемаВалютаДокумента);
			КолонкаВалютаДокумента.Псевдоним = "ВалютаДокумента"; // Иногда псевдоним сбрасывается.
		КонецЕсли;
		
		КолонкаСуммаДокумента = Колонки.Найти("СуммаДокумента");
		Если НЕ ДополнительныеРеквизиты.Свойство("СуммаДокумента") И КолонкаСуммаДокумента <> Неопределено Тогда
			ТекстЗапросаСуммаДокумента = "ЕСТЬNULL(" + Псевдоним + ".СуммаДокумента, 0)";
			СхемаСуммаДокумента = Новый ВыражениеСхемыЗапроса(ТекстЗапросаСуммаДокумента);
			Индекс = Оператор.ВыбираемыеПоля.Индекс(КолонкаСуммаДокумента.Поля[0]);
			Оператор.ВыбираемыеПоля.Установить(Индекс, СхемаСуммаДокумента);
			КолонкаСуммаДокумента.Псевдоним = "СуммаДокумента"; // Иногда псевдоним сбрасывается.
		КонецЕсли;
	КонецЕсли;
	
	ДобавленИсточникДанныеПервичныхДокументов = Ложь;
	Для каждого КлючИЗначение Из ДополнительныеРеквизиты Цикл
		КолонкаДопРеквизита = Колонки.Найти(КлючИЗначение.Ключ);
		Если СтрНайти(КлючИЗначение.Значение, "Таб.") > 0 Тогда
			ТекстЗапросаДопРеквизита = СтрЗаменить(КлючИЗначение.Значение, "Таб.", Псевдоним + ".");
		Иначе
			ТекстЗапросаДопРеквизита = Псевдоним + "." + КлючИЗначение.Значение;
		КонецЕсли;
		
		Если КолонкаДопРеквизита = Неопределено Тогда
			// В некоторых журналах нет граф с реквизитами входящих документов.
			// Получим эти реквизиты из регистра ДанныеПервичныхДокументов.
			Если КлючИЗначение.Ключ = "ДатаВходящегоДокумента" ИЛИ КлючИЗначение.Ключ = "НомерВходящегоДокумента" Тогда
				Если НЕ ДобавленИсточникДанныеПервичныхДокументов Тогда
					ДанныеПервичныхДокументов = Оператор.Источники.Добавить("РегистрСведений.ДанныеПервичныхДокументов");
					ДанныеПервичныхДокументов.Соединения.Очистить();
					ИсточникЗапроса.Соединения.Добавить(ДанныеПервичныхДокументов,
						Псевдоним + ".Организация = ДанныеПервичныхДокументов.Организация И "
							+ Псевдоним + ".Ссылка = ДанныеПервичныхДокументов.Документ");
					ДобавленИсточникДанныеПервичныхДокументов = Истина;
				КонецЕсли;
				
				Если КлючИЗначение.Ключ = "ДатаВходящегоДокумента" Тогда
					ТекстЗапросаРеквизитыВходящегоДокумента = "ЕСТЬNULL(ДанныеПервичныхДокументов.Дата, """")";
				Иначе
					ТекстЗапросаРеквизитыВходящегоДокумента = "ЕСТЬNULL(ДанныеПервичныхДокументов.Номер, """")";
				КонецЕсли;
				
				КолонкаРеквизитыВходящегоДокумента = Колонки.Найти(КлючИЗначение.Ключ);
				Если КолонкаРеквизитыВходящегоДокумента = Неопределено Тогда
					Оператор.ВыбираемыеПоля.Добавить(ТекстЗапросаРеквизитыВходящегоДокумента);
					Колонки[Колонки.Количество() - 1].Псевдоним = КлючИЗначение.Ключ;
				Иначе
					СхемаРеквизитыВходящегоДокумента = Новый ВыражениеСхемыЗапроса(ТекстЗапросаРеквизитыВходящегоДокумента);
					Индекс = Оператор.ВыбираемыеПоля.Индекс(КолонкаРеквизитыВходящегоДокумента.Поля[0]);
					Оператор.ВыбираемыеПоля.Установить(Индекс, СхемаРеквизитыВходящегоДокумента);
				КонецЕсли;
			ИначеЕсли КлючИЗначение.Ключ = "ЕстьТовары" ИЛИ КлючИЗначение.Ключ = "ЕстьОборудование"
				ИЛИ КлючИЗначение.Ключ = "ЕстьУслуги" ИЛИ КлючИЗначение.Ключ = "ЕстьАгентскиеУслуги" Тогда
				СоставныеЧастиВыражения = СтрРазделить(ТекстЗапросаДопРеквизита, ".");
				ИсточникПервичныеДокументы = "Документ."+ СтрЗаменить(СоставныеЧастиВыражения[0], "Документ", "") + "." + СоставныеЧастиВыражения[1];
				ПервичныеДокументы = Оператор.Источники.Добавить(ИсточникПервичныеДокументы, СоставныеЧастиВыражения[0] + СоставныеЧастиВыражения[1]);
				ПервичныеДокументы.Соединения.Очистить();
				ИсточникЗапроса.Соединения.Добавить(ПервичныеДокументы,
					Псевдоним + ".Ссылка = " + ПервичныеДокументы.Источник.Псевдоним + ".Ссылка
						|И (" + ПервичныеДокументы.Источник.Псевдоним + ".НомерСтроки = 1)");
				ПолеЗапроса = "ВЫБОР КОГДА " + ПервичныеДокументы.Источник.Псевдоним +"."
					+ СоставныеЧастиВыражения[2] + " ЕСТЬ NULL ТОГДА ЛОЖЬ ИНАЧЕ ИСТИНА КОНЕЦ";
				Оператор.ВыбираемыеПоля.Добавить(ПолеЗапроса);
				Колонки[Колонки.Количество() - 1].Псевдоним = КлючИЗначение.Ключ;
				ЕстьОтборПоПервичнымДокументам = Истина;
			Иначе
				Оператор.ВыбираемыеПоля.Добавить(ТекстЗапросаДопРеквизита);
				Колонки[Колонки.Количество() - 1].Псевдоним = КлючИЗначение.Ключ;
			КонецЕсли;
		Иначе
			СхемаДопРеквизита = Новый ВыражениеСхемыЗапроса(ТекстЗапросаДопРеквизита);
			Индекс = Оператор.ВыбираемыеПоля.Индекс(КолонкаДопРеквизита.Поля[0]);
			Оператор.ВыбираемыеПоля.Установить(Индекс, СхемаДопРеквизита);
		КонецЕсли;
	КонецЦикла;
	
	ТекстЗапроса = СхемаЗапроса.ПолучитьТекстЗапроса();
	
	// СхемаЗапроса не работает с расширением языка запросов в {},
	// поэтому остальные изменения производятся прямой заменой текста запроса.
	
	// Учтем особенности журналов документов, где изменено поле Ссылка.
	// Т.к. платформа в этом случае автоматически добавляет поле Ссылка1.
	ПсевдонимСсылка1 = Псевдоним + ".Ссылка.* КАК Ссылка1";
	Если СтрНайти(ТекстЗапроса, ПсевдонимСсылка1) > 0 Тогда
		Если СтрНайти(ТекстЗапроса, ПсевдонимСсылка1 + ",") > 0 Тогда
			ПсевдонимСсылка1 = ПсевдонимСсылка1 + ",";
		КонецЕсли;
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ПсевдонимСсылка1, "");
	КонецЕсли;
	
	// Обход особенности работы СхемыЗапроса.
	// В запросах динамического списка могут встречаться сложные "технические" условия, описанные в расширении языка запросов.
	// Если какое-то условие нужно только для функционирования дин.списка
	// и не должно попадать в пользовательский отбор, то у него не задают псевдоним.
	// Но после использования СхемыЗапроса у этих условий псевдоним добавляется автоматически (вида: "ПолеN").
	// Если использовать полученный текст запроса в СКД, такие условия начинают попадать в поля отбора отчета,
	// чего не происходит, если псеводним отсутствует.
	// Удалим их.
	Для сч = 1 По 9 Цикл
		ПсеводнимТехУсловияОтбора = ") КАК Поле" + сч;
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ПсеводнимТехУсловияОтбора, ")");
	КонецЦикла;
	
	Возврат ТекстЗапроса;
	
КонецФункции

&НаСервере
Процедура ИнициализироватьОтчет(ОсновнаяТаблица, ТекстЗапроса)
	
	Если ЗначениеЗаполнено(ТекстЗапроса) Тогда
		ТекстЗапроса = УточнитьТекстЗапросаПоДопРеквизитам(ТекстЗапроса);
	ИначеЕсли ЗначениеЗаполнено(ОсновнаяТаблица) Тогда
		ИмяТаблицы   = ОсновнаяТаблица;
		ТекстЗапроса = СгенерироватьТекстЗапроса(ИмяТаблицы);
	Иначе
		Возврат;
	КонецЕсли;
	
	СКД = Новый СхемаКомпоновкиДанных;
	ИсточникДанных = СКД.ИсточникиДанных.Добавить();
	ИсточникДанных.Имя = "ИсточникДанных";
	ИсточникДанных.ТипИсточникаДанных = "Local";
	
	НаборДанных = СКД.НаборыДанных.Добавить(Тип("НаборДанныхЗапросСхемыКомпоновкиДанных"));
	НаборДанных.Имя = "НаборДанных1";
	НаборДанных.ИсточникДанных = ИсточникДанных.Имя;
	НаборДанных.Запрос = ТекстЗапроса;
	НаборДанных.АвтоЗаполнениеДоступныхПолей = Истина;
	
	СхемаКомпоновкиДанныхЭталон = Отчеты.РеестрДокументов.ПолучитьМакет("СхемаКомпоновкиДанныхЭталон");
	Для каждого ПолеЭталон Из СхемаКомпоновкиДанныхЭталон.НаборыДанных.НаборДанныхЭталон.Поля Цикл
		ПолеСхемыКомпоновки = НаборДанных.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
		ЗаполнитьЗначенияСвойств(ПолеСхемыКомпоновки, ПолеЭталон);
		Для каждого ОформлениеЭталон Из ПолеЭталон.Оформление.Элементы Цикл
			Оформление = ПолеСхемыКомпоновки.Оформление.Элементы.Найти(ОформлениеЭталон.Параметр);
			ЗаполнитьЗначенияСвойств(Оформление, ОформлениеЭталон);
		КонецЦикла;
	КонецЦикла;
	
	Для каждого ПараметрЭталон Из СхемаКомпоновкиДанныхЭталон.Параметры Цикл
		Параметр = СКД.Параметры.Добавить();
		ЗаполнитьЗначенияСвойств(Параметр, ПараметрЭталон);
	КонецЦикла;
	
	Для каждого ПолеИтогаЭталон Из СхемаКомпоновкиДанныхЭталон.ПоляИтога Цикл
		ПолеИтога = СКД.ПоляИтога.Добавить();
		ЗаполнитьЗначенияСвойств(ПолеИтога, ПолеИтогаЭталон);
		Для каждого ГруппировкаИтога Из ПолеИтогаЭталон.Группировки Цикл
			ПолеИтога.Группировки.Добавить(ГруппировкаИтога);
		КонецЦикла;
	КонецЦикла;
	
	СхемаКомпоновкиДанных = ПоместитьВоВременноеХранилище(СКД, СхемаКомпоновкиДанных);
	
	Отчет.КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
	
	ПоляВыбора = Отчет.КомпоновщикНастроек.Настройки.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
	ЗаполнитьДоступныеПоляВыбора(Отчет.КомпоновщикНастроек.Настройки.ДоступныеПоляВыбора.Элементы, ПоляВыбора.Выбор.Элементы);
	
	ВсеНастройкиСписка = СписокКомпоновщикНастроек.ПолучитьНастройки();
	Если ВсеНастройкиСписка.Отбор.Элементы.Количество() > 0 Тогда
		ЗаполнитьОтборКомпоновщикаНастройкиДанных(ВсеНастройкиСписка.Отбор.Элементы, Отчет.КомпоновщикНастроек.Настройки.Отбор.Элементы);
	КонецЕсли;
	
	Если ВсеНастройкиСписка.ПараметрыДанных.Элементы.Количество() > 0 Тогда
		ЗаполнитьПараметрыКомпоновщикаДанных(ВсеНастройкиСписка.ПараметрыДанных.Элементы, Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы);
	КонецЕсли;
	
	Если ВсеНастройкиСписка.Порядок.Элементы.Количество() > 0 Тогда
		Отчет.КомпоновщикНастроек.Настройки.Структура[0].Порядок.Элементы.Очистить();
		ЗаполнитьПорядокКомпоновщикаДанных(ВсеНастройкиСписка.Порядок.Элементы, Отчет.КомпоновщикНастроек.Настройки.Структура[0].Порядок.Элементы);
	КонецЕсли;
	
	Если ВсеНастройкиСписка.Структура.Количество() > 0 Тогда
		ПоказателиИсточник = ВыделитьИсточник(ВсеНастройкиСписка.Структура);
	Иначе
		ПоказателиИсточник = СтандартныеПоказателиСтруктура();
	КонецЕсли;
	
	ЗаполнитьТаблицуПоказателей(
		ПоказателиИсточник,
		Отчет.КомпоновщикНастроек.Настройки.Структура[0].Выбор, // ПоказателиПриемник
		ВсеНастройкиСписка.УсловноеОформление.Элементы);
	
	Если ЕстьОтборПоПервичнымДокументам Тогда
		Элементы.ГруппаТоварыУслуги.Видимость = Истина;
		Если СтрНайти(ИмяТаблицы, "ПоступлениеТоваровУслуг") > 0 Тогда
			Элементы.ТоварыУслуги.СписокВыбора[1].Представление = НСтр("ru = 'Только поступления товаров'");
			Элементы.ТоварыУслуги.СписокВыбора[2].Представление = НСтр("ru = 'Только полученные услуги'");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ВыделитьИсточник(Настройки)
	
	Если Настройки[0].Структура.Количество() = 0 Тогда
		Возврат Настройки[0].Выбор.Элементы;
	Иначе
		Возврат ВыделитьИсточник(Настройки[0].Структура);
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ПоказателиИзменены(Показатели)
	
	ПоказателиИзменены = Ложь;
	
	СтандартныеПоказателиРеестра = СтандартныеПоказателиРеестра();
	КоличествоПоказателей        = СтандартныеПоказателиРеестра.Количество();
	ИндексПоказателя = 0;
	Для каждого Показатель Из Показатели Цикл
		Если НЕ Показатель.Использование Тогда
			Продолжить;
		КонецЕсли;
		
		Если ИндексПоказателя = КоличествоПоказателей ИЛИ Показатель.Поле <> СтандартныеПоказателиРеестра[ИндексПоказателя] Тогда
			ПоказателиИзменены = Истина;
			Прервать;
		КонецЕсли;
		
		ИндексПоказателя = ИндексПоказателя + 1;
	КонецЦикла;
	
	Возврат ПоказателиИзменены;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьТаблицуПоказателей(ПоказателиИсточник, ПоказателиПриемник, УсловноеОформление, СохраненныеНастройки = Неопределено)
	
	ВосстановлениеНастроек = Ложь;
	Если СохраненныеНастройки = Неопределено Тогда
		ПоказателиРеестра = СтандартныеПоказателиРеестра();
	Иначе
		ПоказателиРеестра = СохраненныеНастройки;
		ВосстановлениеНастроек = Истина;
	КонецЕсли;
	
	ТаблицаПоказателей = Отчет.Показатели.Выгрузить();
	ТаблицаПоказателей.Колонки.Добавить("Приоритет", Новый ОписаниеТипов("Число"));
	
	Для каждого Показатель Из ПоказателиПриемник.Элементы Цикл
		ДоступноеПоле = Отчет.КомпоновщикНастроек.Настройки.Выбор.ДоступныеПоляВыбора.Элементы.Найти(Показатель.Поле);
		ПоказательИмя = Строка(Показатель.Поле);
		Если ВосстановлениеНастроек Тогда
			СохраненныйПоказатель = ПоказателиРеестра.Найти(ПоказательИмя, "Поле");
			Если СохраненныйПоказатель = Неопределено Тогда
				ПорядокПоказателя = Неопределено;
			Иначе
				ПорядокПоказателя = ПоказателиРеестра.Индекс(СохраненныйПоказатель);
				ИспользованиеПоказателя = СохраненныйПоказатель.Использование;
			КонецЕсли;
		Иначе
			ПорядокПоказателя = ПоказателиРеестра.Найти(ПоказательИмя);
			ИспользованиеПоказателя = Истина;
		КонецЕсли;
		
		Если ПорядокПоказателя = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = ТаблицаПоказателей.Добавить();
		НоваяСтрока.Поле = ПоказательИмя;
		Если ДоступноеПоле = Неопределено Тогда
			Если СтрНайти(ПоказательИмя, "Ссылка.") > 0 Тогда
				ТекстУО = ВыделитьЗаголовокИзУсловногоОформления(Показатель.Поле, УсловноеОформление);
				НоваяСтрока.Представление = ?(ПустаяСтрока(ТекстУО), СтрЗаменить(ПоказательИмя, "Ссылка.", ""), ТекстУО);
			ИначеЕсли НЕ ПустаяСтрока(Показатель.Заголовок) Тогда
				НоваяСтрока.Представление = Показатель.Заголовок;
			Иначе
				НоваяСтрока.Представление = ПоказательИмя;
			КонецЕсли;
		Иначе
			НоваяСтрока.Представление = ДоступноеПоле.Заголовок;
		КонецЕсли;
		
		НоваяСтрока.Приоритет     = ПорядокПоказателя;
		НоваяСтрока.Использование = ИспользованиеПоказателя;
	КонецЦикла;
	
	Приоритет = ПоказателиРеестра.Количество();
	ДобавитьДоступныеПоля(ТаблицаПоказателей, ПоказателиИсточник, УсловноеОформление, Приоритет);
	
	ТаблицаПоказателей.Сортировать("Приоритет");
	Если ТаблицаПоказателей.Найти("СуммаДокумента", "Поле") = Неопределено Тогда
		ПоказательВалюта = ТаблицаПоказателей.Найти("ВалютаДокумента", "Поле");
		Если ПоказательВалюта <> Неопределено И ПоказательВалюта.Использование Тогда
			// В отсуствии Суммы, Валюта смысла не имеет (как и итоги по ней).
			ПоказательВалюта.Использование = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Отчет.Показатели.Загрузить(ТаблицаПоказателей);
	
	ЗаполнитьПоказателиОтчета(ПоказателиПриемник, ТаблицаПоказателей);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьДоступныеПоля(ТаблицаПоказателей, ПоказателиИсточник, УсловноеОформление, Приоритет)
	
	Для каждого Показатель Из ПоказателиИсточник Цикл
		Если ТипЗнч(Показатель) = Тип("АвтоВыбранноеПолеКомпоновкиДанных") Тогда
			Продолжить;
		ИначеЕсли ТипЗнч(Показатель) = Тип("ГруппаВыбранныхПолейКомпоновкиДанных") Тогда
			ДобавитьДоступныеПоля(ТаблицаПоказателей, Показатель.Элементы, УсловноеОформление, Приоритет);
			Продолжить;
		КонецЕсли;
		
		ПоказательИмя = Строка(Показатель.Поле);
		ДоступноеПоле = Отчет.КомпоновщикНастроек.Настройки.Выбор.ДоступныеПоляВыбора.Элементы.Найти(ПоказательИмя);
		Если ТаблицаПоказателей.Найти(ПоказательИмя, "Поле") <> Неопределено ИЛИ ПоказательИмя = "Валюта" Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = ТаблицаПоказателей.Добавить();
		НоваяСтрока.Поле = Строка(Показатель.Поле);
		
		Если ДоступноеПоле = Неопределено Тогда
			Если СтрНайти(ПоказательИмя, "Ссылка.") > 0 Тогда
				ТекстУО = ВыделитьЗаголовокИзУсловногоОформления(Показатель.Поле, УсловноеОформление);
				НоваяСтрока.Представление = ?(ПустаяСтрока(ТекстУО), СтрЗаменить(ПоказательИмя, "Ссылка.", ""), ТекстУО);
			ИначеЕсли НЕ ПустаяСтрока(Показатель.Заголовок) Тогда
				НоваяСтрока.Представление = Показатель.Заголовок;
			Иначе
				НоваяСтрока.Представление = ПоказательИмя;
			КонецЕсли;
		Иначе
			НоваяСтрока.Представление = ДоступноеПоле.Заголовок;
		КонецЕсли;
		
		НоваяСтрока.Приоритет = Приоритет;
		
		Приоритет = Приоритет + 1;
	КонецЦикла;
	
КонецПроцедуры

// Получает представление поля, добавленного в динамический список "через точку" от Ссылки, из Условного оформления (УО).
// В настройках компоновки динамического списка представление такого поля есть только в УО.
//
// Параметры:
//    Поле               - ПолеКомпоновкиДанных
//    УсловноеОформление - КоллекцияЭлементовУсловногоОформленияКомпоновкиДанных
//
&НаСервереБезКонтекста
Функция ВыделитьЗаголовокИзУсловногоОформления(Поле, УсловноеОформление)
	
	Результат = "";
	Для каждого ЭлементУО Из УсловноеОформление Цикл
		Если Поле = ЭлементУО.Поля.Элементы[0].Поле Тогда
			ПараметрТекст = Новый ПараметрКомпоновкиДанных("Текст");
			ЭлементУОТекст = ЭлементУО.Оформление.Элементы.Найти(ПараметрТекст);
			Если ЭлементУОТекст <> Неопределено И ЭлементУОТекст.Использование Тогда
				Результат = ЭлементУОТекст.Значение;
			КонецЕсли;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ПоказателиУстановитьСтандартныеНастройкиНаСервере()
	
	ДозаполнитьСтандартными = Ложь;
	ВсеНастройкиСписка = СписокКомпоновщикНастроек.ПолучитьНастройки();
	Если ВсеНастройкиСписка.Структура.Количество() > 0 Тогда
		ПоказателиИсточник = ВыделитьИсточник(ВсеНастройкиСписка.Структура);
		ДозаполнитьСтандартными = Истина;
	Иначе
		ПоказателиИсточник = СтандартныеПоказателиСтруктура();
	КонецЕсли;
	
	Отчет.Показатели.Очистить();
	ЗаполнитьТаблицуПоказателей(
		ПоказателиИсточник,
		Отчет.КомпоновщикНастроек.Настройки.Структура[0].Выбор, // ПоказателиПриемник
		ВсеНастройкиСписка.УсловноеОформление.Элементы);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоказателиОтчета(ПоказателиКуда, ТаблицаПоказателей)
	
	ПоказателиКуда.Элементы.Очистить();
	Для каждого Показатель Из ТаблицаПоказателей Цикл
		ПоказательПоле = Новый ПолеКомпоновкиДанных(Строка(Показатель.Поле));
		ВыбранноеПоле = БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ПоказателиКуда, ПоказательПоле, Показатель.Представление);
		ВыбранноеПоле.Использование = Показатель.Использование;
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СтандартныеПоказателиРеестра()
	
	Массив = Новый Массив;
	Массив.Добавить("Дата");
	Массив.Добавить("Ссылка");
	Массив.Добавить("Номер");
	Массив.Добавить("ДатаВходящегоДокумента");
	Массив.Добавить("НомерВходящегоДокумента");
	Массив.Добавить("СуммаДокумента");
	Массив.Добавить("ВалютаДокумента");
	Массив.Добавить("Информация");
	
	Возврат Массив;
	
КонецФункции

&НаСервереБезКонтекста
Функция СтандартныеПоказателиСтруктура()
	
	Массив = Новый Массив;
	Для каждого Элемент Из СтандартныеПоказателиРеестра() Цикл
		СтруктураПоказателя = Новый Структура("Поле, Заголовок", Элемент, Элемент);
		Если Элемент = "Ссылка" Тогда
			СтруктураПоказателя.Заголовок = "Документ";
		ИначеЕсли Элемент = "ВалютаДокумента" Тогда
			СтруктураПоказателя.Заголовок = "Валюта";
		ИначеЕсли Элемент = "СуммаДокумента" Тогда
			СтруктураПоказателя.Заголовок = "Сумма";
		ИначеЕсли Элемент = "ДатаВходящегоДокумента" Тогда
			СтруктураПоказателя.Заголовок = "Дата вх.";
		ИначеЕсли Элемент = "НомерВходящегоДокумента" Тогда
			СтруктураПоказателя.Заголовок = "Номер вх.";
		КонецЕсли;
		Массив.Добавить(СтруктураПоказателя);
	КонецЦикла;
	
	Возврат Массив;
	
КонецФункции

&НаСервере
Процедура ЗагрузитьПодготовленныеДанные()
	
	РезультатВыполнения = ПолучитьИзВременногоХранилища(АдресХранилища);
	Результат = РезультатВыполнения.Результат;
	ДанныеРасшифровки = РезультатВыполнения.ДанныеРасшифровки;
	
	Результат.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_РеестрДокументов";
	
	ВысотаШапки     = 0;
	ВысотаЗаголовка = 0;
	ВысотаПодвала   = 0;
	Если ВыводитьЗаголовок Тогда
		ВысотаЗаголовка = Результат.Области.Заголовок.Низ;
	КонецЕсли;
	Если ВыводитьПодписи Тогда
		ВысотаПодвала   = 5;
	КонецЕсли;
	Если Результат.ВысотаТаблицы > ВысотаЗаголовка + ВысотаПодвала Тогда
		ВысотаШапки     = 1;
	КонецЕсли;
	ОкончаниеЗаголовка  = ВысотаЗаголовка + ВысотаШапки;
	
	Результат.ФиксацияСверху = ОкончаниеЗаголовка;
	Если ВысотаШапки = 0 Тогда
		Результат.ПовторятьПриПечатиСтроки = Неопределено;
	Иначе
		Результат.ПовторятьПриПечатиСтроки = Результат.Область("R" + Формат(ОкончаниеЗаголовка, "ЧГ="));
	КонецЕсли;
	
	УправлениеКолонтитулами.УстановитьКолонтитулы(Результат);
	Результат.ОбластьПечати = Результат.Область();
	
	ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеИспользовать");
	
	ИдентификаторЗадания = Неопределено;
	
КонецПроцедуры

&НаСервере
Функция ПодготовитьПараметрыОтчета()
	
	ПараметрыОтчета = Новый Структура;
	ПараметрыОтчета.Вставить("ДанныеРасшифровки",         ДанныеРасшифровки);
	ПараметрыОтчета.Вставить("НачалоПериода",             Отчет.НачалоПериода);
	ПараметрыОтчета.Вставить("КонецПериода",              Отчет.КонецПериода);
	ПараметрыОтчета.Вставить("Организация",               Отчет.Организация);
	ПараметрыОтчета.Вставить("СхемаКомпоновкиДанных",     ПолучитьИзВременногоХранилища(СхемаКомпоновкиДанных));
	ПараметрыОтчета.Вставить("НастройкиКомпоновкиДанных", Отчет.КомпоновщикНастроек.ПолучитьНастройки());
	ПараметрыОтчета.Вставить("ИдентификаторОтчета",       БухгалтерскиеОтчетыКлиентСервер.ПолучитьИдентификаторОбъекта(ЭтотОбъект));
	ПараметрыОтчета.Вставить("ВыводитьЗаголовок",         ВыводитьЗаголовок);
	ПараметрыОтчета.Вставить("ВыводитьПодвал",            ВыводитьПодписи);
	ПараметрыОтчета.Вставить("МакетОформления",           "МакетОформленияКомпоновкиДанныхРеестра");
	ПараметрыОтчета.Вставить("ОтветственноеЛицо" ,        Перечисления.ОтветственныеЛицаОрганизаций.ОтветственныйЗаБухгалтерскиеРегистры);
	ПараметрыОтчета.Вставить("ИмяСписка",                 ИмяСписка);
	ПараметрыОтчета.Вставить("ИмяТаблицы",                ИмяТаблицы);
	ПараметрыОтчета.Вставить("ТипыДокументов",            ТипыДокументов);
	ПараметрыОтчета.Вставить("ВключатьОбособленныеПодразделения", Ложь);
	
	ПараметрыОтчета.Вставить("ЕстьОтборПоПервичнымДокументам", ЕстьОтборПоПервичнымДокументам);
	ПараметрыОтчета.Вставить("ТоварыУслуги",                   ТоварыУслуги);
	
	Возврат ПараметрыОтчета;
	
КонецФункции

&НаСервере
Функция СформироватьНаСервере()
	
	ДлительныеОперации.ОтменитьВыполнениеЗадания(ИдентификаторЗадания);
	ИдентификаторЗадания = Неопределено;
	ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеИспользовать");
	
	ЗаполнитьПоказателиОтчета(Отчет.КомпоновщикНастроек.Настройки.Структура[0].Выбор, Отчет.Показатели);
	
	ПараметрыДлительногоЗадания = ПодготовитьПараметрыОтчета();
	
	РезультатВыполнения = ДлительныеОперации.ЗапуститьВыполнениеВФоне(
		УникальныйИдентификатор,
		"БухгалтерскиеОтчетыВызовСервера.СформироватьОтчет",
		ПараметрыДлительногоЗадания,
		НСтр("ru = 'Формирование реестра документов'"));
	АдресХранилища       = РезультатВыполнения.АдресХранилища;
	ИдентификаторЗадания = РезультатВыполнения.ИдентификаторЗадания;
	
	Элементы.Сформировать.КнопкаПоУмолчанию = Истина;
	Элементы.РазделыОтчета.ТекущаяСтраница  = Элементы.Отчет;
	
	Если РезультатВыполнения.ЗаданиеВыполнено Тогда
		ЗагрузитьПодготовленныеДанные();
	КонецЕсли;
	
	Возврат РезультатВыполнения;
	
КонецФункции

&НаСервере
Процедура ВычислитьСуммуВыделенныхЯчеекТабличногоДокументаВКонтекстеНаСервере()
	
	ПолеСумма = БухгалтерскиеОтчетыВызовСервера.ВычислитьСуммуВыделенныхЯчеекТабличногоДокумента(
		Результат, КэшВыделеннойОбласти);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаданиеВыполнено(ИдентификаторЗадания)
	
	Возврат ДлительныеОперации.ЗаданиеВыполнено(ИдентификаторЗадания);
	
КонецФункции

&НаКлиенте
Процедура ФормированиеРеестраВФоне()
	
	ОтключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания");
	
	РезультатВыполнения = СформироватьНаСервере();
	Если НЕ РезультатВыполнения.ЗаданиеВыполнено Тогда
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "ФормированиеОтчета");
	Иначе
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеИспользовать");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеЗадания()
	
	Попытка
		Если ЗаданиеВыполнено(ИдентификаторЗадания) Тогда
			ЗагрузитьПодготовленныеДанные();
			ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеИспользовать");
		Иначе
			ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
			ПодключитьОбработчикОжидания(
				"Подключаемый_ПроверитьВыполнениеЗадания",
				ПараметрыОбработчикаОжидания.ТекущийИнтервал,
				Истина);
		КонецЕсли;
	Исключение
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеИспользовать");
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьЗапрещенныеПоля(Режим = "") Экспорт
	
	СписокПолей = Новый Массив;
	
	СписокПолей.Добавить("UserFields");
	СписокПолей.Добавить("DataParameters");
	СписокПолей.Добавить("SystemFields");
	СписокПолей.Добавить("Показатели");
	СписокПолей.Добавить("Период");
	СписокПолей.Добавить("Дата");
	СписокПолей.Добавить("ЕстьТовары");
	СписокПолей.Добавить("ЕстьУслуги");
	СписокПолей.Добавить("ЕстьАгентскиеУслуги");
	СписокПолей.Добавить("ЕстьОборудование");
	СписокПолей.Добавить("Тип");
	
	Возврат Новый ФиксированныйМассив(СписокПолей);
	
КонецФункции

&НаКлиенте
Процедура ОткрытьНастройки()
	
	Элементы.РазделыОтчета.ТекущаяСтраница = Элементы.НастройкиОтчета;
	
КонецПроцедуры

&НаКлиенте
Процедура СкрытьНастройки()
	
	Элементы.РазделыОтчета.ТекущаяСтраница = Элементы.Отчет;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПОДКЛЮЧАЕМЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаКлиенте
Процедура Подключаемый_РезультатПриАктивизацииОбластиПодключаемый()
	
	НеобходимоВычислятьНаСервере = Ложь;
	БухгалтерскиеОтчетыКлиент.ВычислитьСуммуВыделенныхЯчеекТабличногоДокумента(
		ПолеСумма, Результат, КэшВыделеннойОбласти, НеобходимоВычислятьНаСервере);
	
	Если НеобходимоВычислятьНаСервере Тогда
		ВычислитьСуммуВыделенныхЯчеекТабличногоДокументаВКонтекстеНаСервере();
	КонецЕсли;
	
	ОтключитьОбработчикОжидания("Подключаемый_РезультатПриАктивизацииОбластиПодключаемый");
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ЗАВЕРШЕНИЕ НЕМОДАЛЬНЫХ ВЫЗОВОВ

&НаКлиенте
Процедура ВыбратьПериодЗавершение(РезультатВыбора, ДопПараметры) Экспорт
	
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(Отчет, РезультатВыбора, "НачалоПериода, КонецПериода");
	
	Если НЕ ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
