#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

Процедура ПередКомпоновкойМакета(ПараметрыОтчета, Схема, КомпоновщикНастроек) Экспорт
	
	Настройки = КомпоновщикНастроек.Настройки;
	
	СхемаКомпоновкиДанныхЭталон = Отчеты.РеестрДокументов.ПолучитьМакет("СхемаКомпоновкиДанныхЭталон");
	Для каждого ПараметрВыводаЭталон Из СхемаКомпоновкиДанныхЭталон.НастройкиПоУмолчанию.ПараметрыВывода.Элементы Цикл
		ПараметрВывода = Настройки.ПараметрыВывода.Элементы.Найти(ПараметрВыводаЭталон.Параметр);
		ЗаполнитьЗначенияСвойств(ПараметрВывода, ПараметрВыводаЭталон);
	КонецЦикла;
	
	БухгалтерскиеОтчетыВызовСервера.ДобавитьОтборПоОрганизации(ПараметрыОтчета, КомпоновщикНастроек, ПараметрыОтчета.ИмяТаблицы);
	
	ВалютаРеглУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(Настройки, "ВалютаРеглУчета", ВалютаРеглУчета);
	Если Настройки.ПараметрыДанных.Элементы.Найти("ВалютаРеглУчета") = Неопределено Тогда
		ПараметрВалютареглУчета = Настройки.ПараметрыДанных.Элементы.Добавить();
		ПараметрВалютареглУчета.Параметр = Новый ПараметрКомпоновкиДанных("ВалютаРеглУчета");
		ПараметрВалютареглУчета.Значение = ВалютаРеглУчета;
		ПараметрВалютареглУчета.Использование = Истина;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыОтчета.НачалоПериода) Тогда
		БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(
			КомпоновщикНастроек, "Дата", ПараметрыОтчета.НачалоПериода, ВидСравненияКомпоновкиДанных.БольшеИлиРавно);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыОтчета.КонецПериода) Тогда
		БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(
			КомпоновщикНастроек, "Дата", КонецДня(ПараметрыОтчета.КонецПериода), ВидСравненияКомпоновкиДанных.МеньшеИлиРавно);
	КонецЕсли;
	
	Если ПараметрыОтчета.ТипыДокументов.Количество() > 0 Тогда
		БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(
			КомпоновщикНастроек, "Тип", ПараметрыОтчета.ТипыДокументов, ВидСравненияКомпоновкиДанных.ВСписке);
	КонецЕсли;
	
	Если ПараметрыОтчета.ЕстьОтборПоПервичнымДокументам Тогда
		Если ПараметрыОтчета.ТоварыУслуги = 1 Тогда
			Если СтрНайти(ПараметрыОтчета.ИмяТаблицы, "ПоступлениеТоваровУслуг") > 0 Тогда
				ГруппаОтбора = Настройки.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
				ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
				БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ГруппаОтбора, "ЕстьТовары", Истина);
				БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ГруппаОтбора, "ЕстьОборудование", Истина);
			Иначе
				БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(КомпоновщикНастроек, "ЕстьТовары", Истина);
			КонецЕсли;
		ИначеЕсли ПараметрыОтчета.ТоварыУслуги = 2 Тогда
			ГруппаОтбора = Настройки.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
			ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
			БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ГруппаОтбора, "ЕстьУслуги", Истина);
			БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ГруппаОтбора, "ЕстьАгентскиеУслуги", Истина);
		КонецЕсли;
	КонецЕсли;
	
	НастроитьСтруктуруОтчета(Настройки, ПараметрыОтчета, Схема, СхемаКомпоновкиДанныхЭталон);
	
КонецПроцедуры

Процедура НастройкиДинамическогоСписка(Форма, ИмяТаблицыФормы = "Список") Экспорт
	
	Элементы = Форма.Элементы;
	
	НастройкиСписка = Новый Структура("Ключ, Период, Организация");
	НастройкиСписка.Ключ = Новый Структура("ОсновнаяТаблица, ТекстЗапроса, НастройкиКомпоновки");
	НастройкиСписка.Ключ.ОсновнаяТаблица = "";
	
	ТаблицаКоманды = ПолучитьИзВременногоХранилища(Форма.ПараметрыПодключаемыхКоманд.АдресТаблицыКоманд);
	СтрокаТаблицы = ТаблицаКоманды.Найти("Реестр документов", "Представление");
	Если СтрокаТаблицы <> Неопределено Тогда
		СтрокаТаблицы.ДополнительныеПараметры.ДополнительныеПараметры.Вставить("АдресХранилищаНастройкиДинСпискаДляРеестра",
			Форма.АдресХранилищаНастройкиДинСпискаДляРеестра);
		ПоместитьВоВременноеХранилище(ТаблицаКоманды, Форма.ПараметрыПодключаемыхКоманд.АдресТаблицыКоманд);
		ЗаголовокФормы = СтрокаТаблицы.ДополнительныеПараметры.ЗаголовокФормы;
		НастройкиСписка.Вставить("Заголовок", ЗаголовокФормы);
	КонецЕсли;
	
	СхемаКомпоновки     = Элементы[ИмяТаблицыФормы].ПолучитьИсполняемуюСхемуКомпоновкиДанных();
	НастройкиКомпоновки = Элементы[ИмяТаблицыФормы].ПолучитьИсполняемыеНастройкиКомпоновкиДанных();
	
	НастройкиСписка.Ключ.ТекстЗапроса        = СхемаКомпоновки.НаборыДанных.НаборДанныхДинамическогоСписка.Запрос;
	НастройкиСписка.Ключ.НастройкиКомпоновки = НастройкиКомпоновки;
	НастройкиСписка.Период = Новый СтандартныйПериод();
	ЗаполнитьЗначенияСвойств(НастройкиСписка.Период, Элементы[ИмяТаблицыФормы].Период);
	
	ОтборВСписке = НастройкиКомпоновки.Отбор;
	Если Справочники.Организации.ИспользуетсяНесколькоОрганизаций() Тогда
		НастройкиСписка.Организация = Справочники.Организации.ПустаяСсылка();
		МассивЭлементовОтбораОрганизация = ОбщегоНазначенияКлиентСервер.НайтиЭлементыИГруппыОтбора(ОтборВСписке, "Организация");
		ЭлементОтбораОрганизация = ?(МассивЭлементовОтбораОрганизация.Количество() > 0, МассивЭлементовОтбораОрганизация[0], Неопределено);
		Если ЭлементОтбораОрганизация <> Неопределено И ЭлементОтбораОрганизация.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно
			И ЭлементОтбораОрганизация.Использование Тогда
			НастройкиСписка.Организация = ЭлементОтбораОрганизация.ПравоеЗначение;
		КонецЕсли;
	Иначе
		НастройкиСписка.Организация = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация");
	КонецЕсли;
	
	ЭлементыПараметров = НастройкиКомпоновки.ПараметрыДанных.Элементы;
	
	Для каждого ПараметрЗапроса Из ЭлементыПараметров Цикл
		Если НЕ ПараметрЗапроса.Использование Тогда
			Продолжить;
		КонецЕсли;
		
		ИмяПараметра = Строка(ПараметрЗапроса.Параметр);
		Если ИмяПараметра = "ОтборТипыДокументов" Тогда
			ЭтоДокументыПоставщиков = Ложь;
			ЭтоДокументыПокупателей = Ложь;
			Если ТипЗнч(ПараметрЗапроса.Значение) = Тип("СписокЗначений") Тогда
				ЭтоДокументыПоставщиков = ПараметрЗапроса.Значение.НайтиПоЗначению(
					Тип("ДокументСсылка.ПоступлениеТоваровУслуг")) <> Неопределено;
				ЭтоДокументыПокупателей = ПараметрЗапроса.Значение.НайтиПоЗначению(
					Тип("ДокументСсылка.РеализацияТоваровУслуг")) <> Неопределено;
			ИначеЕсли ТипЗнч(ПараметрЗапроса.Значение) = Тип("Массив") Тогда
				ЭтоДокументыПоставщиков = ПараметрЗапроса.Значение.Найти(
					Тип("ДокументСсылка.ПоступлениеТоваровУслуг")) <> Неопределено;
				ЭтоДокументыПокупателей = ПараметрЗапроса.Значение.Найти(
					Тип("ДокументСсылка.РеализацияТоваровУслуг")) <> Неопределено;
			КонецЕсли;
			
			Если ЭтоДокументыПоставщиков Тогда
				НастройкиСписка.Вставить("Заголовок", НСтр("ru = 'Реестр документов поставщиков'"));
			ИначеЕсли ЭтоДокументыПокупателей Тогда
				НастройкиСписка.Вставить("Заголовок", НСтр("ru = 'Реестр документов покупателей'"));
			КонецЕсли;
			НастройкиСписка.Вставить("ТипыДокументов", ПараметрЗапроса.Значение);
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	// Выделим период отчета. Возможны разные ситуации:
	//  1. Если в списке существует Дата отбора и она установлена - то у нее максимальный приоритет.
	//  2. Если в списке установлен Стандартный период, то им и ограничим период отчета.
	//  3. Если в списке выделено несколько документов, то ограничим период датами первого и последнего документов.
	//  4. Если период отчета задан через Настройку списка (СКД-отбор на Дату документов) - то возьме ее для ограничения.
	//  5. Если не задано никакого ограничения по периоду, за начало отсчета периода возьмем начало месяца
	//     даты "текущего документа" в списке, а сверху ограничим период концом текущего месяца.
	// Если получившийся период ограничен только с одной строны (с начала или с конца), то для полного ограничения действуем как в п.5.
	// Основная идея полного ограничения периода состоит в том, чтобы пользователь случайно не сформировал
	// отчет за неограниченный (снизу) период времени - т.к. это может занять много времени и ресурсов оборудования.
	
	ДатаОтчета = ОбщегоНазначения.ТекущаяДатаПользователя();
	ВыделенныеСтроки = Элементы[ИмяТаблицыФормы].ВыделенныеСтроки;
	КоличествоДокументов = ВыделенныеСтроки.Количество();
	Если КоличествоДокументов = 1 Тогда
		ВыделеннаяСтрока = ВыделенныеСтроки[0];
		Если ТипЗнч(ВыделеннаяСтрока) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
			ДатаДокумента = ДатаОтчета;
		Иначе
			ДатаДокумента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВыделеннаяСтрока, "Дата");
		КонецЕсли;
	КонецЕсли;
	
	ЕстьОтборПоДате = Ложь;
	Если ЗначениеЗаполнено(НастройкиСписка.Период) Тогда
		Если НЕ ЗначениеЗаполнено(НастройкиСписка.Период.ДатаНачала) Тогда
			Если КоличествоДокументов = 1 Тогда
				НастройкиСписка.Период.ДатаНачала = НачалоМесяца(ДатаДокумента);
			Иначе
				НастройкиСписка.Период.ДатаНачала = НачалоМесяца(НастройкиСписка.Период.ДатаОкончания);
			КонецЕсли;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(НастройкиСписка.Период.ДатаОкончания) Тогда
			НастройкиСписка.Период.ДатаОкончания = КонецМесяца(ДатаОтчета);
		КонецЕсли;
	Иначе
		МассивЭлементовОтбораПоДате = ОбщегоНазначенияКлиентСервер.НайтиЭлементыИГруппыОтбора(ОтборВСписке, "Дата");
		ДатаНачала    = '00010101';
		ДатаОкончания = '00010101';
		Если МассивЭлементовОтбораПоДате.Количество() = 2 Тогда
			Если МассивЭлементовОтбораПоДате[0].Использование И МассивЭлементовОтбораПоДате[1].Использование Тогда
				Для каждого ЭлементОтбораПоДате Из МассивЭлементовОтбораПоДате Цикл
					Если ТипЗнч(ЭлементОтбораПоДате.ПравоеЗначение) = Тип("СтандартнаяДатаНачала") Тогда
						ДатаОтбора = ЭлементОтбораПоДате.ПравоеЗначение.Дата;
					Иначе
						ДатаОтбора = ЭлементОтбораПоДате.ПравоеЗначение;
					КонецЕсли;
					Если ЭлементОтбораПоДате.ВидСравнения = ВидСравненияКомпоновкиДанных.БольшеИлиРавно Тогда
						ДатаНачала    = ДатаОтбора;
					ИначеЕсли ЭлементОтбораПоДате.ВидСравнения = ВидСравненияКомпоновкиДанных.Больше Тогда
						ДатаНачала    = КонецДня(ДатаОтбора) + 1;
					ИначеЕсли ЭлементОтбораПоДате.ВидСравнения = ВидСравненияКомпоновкиДанных.МеньшеИлиРавно Тогда
						ДатаОкончания = ДатаОтбора;
					ИначеЕсли ЭлементОтбораПоДате.ВидСравнения = ВидСравненияКомпоновкиДанных.Меньше Тогда
						ДатаОкончания = НачалоДня(ДатаОтбора) - 1;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		Если ЗначениеЗаполнено(ДатаНачала) И ЗначениеЗаполнено(ДатаОкончания) Тогда
			НастройкиСписка.Период.ДатаНачала    = ДатаНачала;
			НастройкиСписка.Период.ДатаОкончания = ДатаОкончания;
		Иначе
			Для каждого ЭлементОтбораПоДате Из МассивЭлементовОтбораПоДате Цикл
				ЕстьОтборПоДате = ЭлементОтбораПоДате.Использование
					И (ТипЗнч(ЭлементОтбораПоДате.ПравоеЗначение) = Тип("Дата")
						ИЛИ ТипЗнч(ЭлементОтбораПоДате.ПравоеЗначение) = Тип("СтандартнаяДатаНачала"));
				Если ЕстьОтборПоДате Тогда
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	ЕстьОтборПоДатеОтбора = Ложь;
	МассивЭлементовОтбораПоДатеОтбора = ОбщегоНазначенияКлиентСервер.НайтиЭлементыИГруппыОтбора(ОтборВСписке, "ДатаОтбора");
	Для каждого ЭлементОтбораПоДатеОтбора Из МассивЭлементовОтбораПоДатеОтбора Цикл
		ЕстьОтборПоДатеОтбора = ЭлементОтбораПоДатеОтбора.Использование;
		Если ЕстьОтборПоДатеОтбора Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ЕстьОтборПоДатеОтбора Тогда
		ДатаОтбора = ЭлементОтбораПоДатеОтбора.ПравоеЗначение;
		НастройкиСписка.Период.ДатаНачала    = ДатаОтбора;
		НастройкиСписка.Период.ДатаОкончания = ДатаОтбора;
	ИначеЕсли ЕстьОтборПоДате Тогда
		Если ТипЗнч(ЭлементОтбораПоДате.ПравоеЗначение) = Тип("СтандартнаяДатаНачала") Тогда
			ДатаОтбора = ЭлементОтбораПоДате.ПравоеЗначение.Дата;
		Иначе
			ДатаОтбора = ЭлементОтбораПоДате.ПравоеЗначение;
		КонецЕсли;
		
		НастройкиСписка.Период.ДатаНачала    = ДатаОтбора;
		НастройкиСписка.Период.ДатаОкончания = ДатаОтбора;
		Если ЭлементОтбораПоДате.ВидСравнения = ВидСравненияКомпоновкиДанных.БольшеИлиРавно Тогда
			НастройкиСписка.Период.ДатаОкончания = КонецМесяца(ДатаОтчета);
		ИначеЕсли ЭлементОтбораПоДате.ВидСравнения = ВидСравненияКомпоновкиДанных.Больше Тогда
			НастройкиСписка.Период.ДатаНачала = КонецДня(НастройкиСписка.Период.ДатаОкончания) + 1;
			НастройкиСписка.Период.ДатаОкончания = КонецМесяца(ДатаОтчета);
		ИначеЕсли ЭлементОтбораПоДате.ВидСравнения = ВидСравненияКомпоновкиДанных.МеньшеИлиРавно Тогда
			Если КоличествоДокументов = 1 Тогда
				НастройкиСписка.Период.ДатаНачала = НачалоМесяца(ДатаДокумента);
			Иначе
				НастройкиСписка.Период.ДатаНачала = НачалоМесяца(ДатаОтбора);
			КонецЕсли;
		ИначеЕсли ЭлементОтбораПоДате.ВидСравнения = ВидСравненияКомпоновкиДанных.Меньше Тогда
			НастройкиСписка.Период.ДатаОкончания = НачалоДня(НастройкиСписка.Период.ДатаНачала) - 1;
			Если КоличествоДокументов = 1 Тогда
				НастройкиСписка.Период.ДатаНачала = НачалоМесяца(ДатаДокумента);
			Иначе
				НастройкиСписка.Период.ДатаНачала = НачалоМесяца(ДатаОтбора);
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли НЕ ЗначениеЗаполнено(НастройкиСписка.Период) Тогда
		НастройкиСписка.Период.ДатаНачала    = НачалоМесяца(ДатаОтчета);
		НастройкиСписка.Период.ДатаОкончания = КонецМесяца(ДатаОтчета);
		Если КоличествоДокументов = 1 Тогда
			НастройкиСписка.Период.ДатаНачала = НачалоМесяца(ДатаДокумента);
		ИначеЕсли КоличествоДокументов > 1 Тогда
			ТаблицаДат = Новый ТаблицаЗначений;
			ТаблицаДат.Колонки.Добавить("Дата", Новый ОписаниеТипов("Дата"));
			
			СчетчикДокументов = 0;
			ДокументыПоТипам = ОбщегоНазначенияБП.РазложитьСписокПоТипамЗначенийОбъектов(ВыделенныеСтроки);
			Для Каждого КлючИЗначениеПоТипам Из ДокументыПоТипам Цикл
				Если КлючИЗначениеПоТипам.Ключ = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
					Продолжить;
				КонецЕсли;
				
				ДокументыОдногоТипа = КлючИЗначениеПоТипам.Значение;
				ДатыДокументов = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(ДокументыОдногоТипа, "Дата");
				Для каждого КлючИЗначение Из ДатыДокументов Цикл
					НоваяСтрока = ТаблицаДат.Добавить();
					НоваяСтрока.Дата = КлючИЗначение.Значение;
					СчетчикДокументов = СчетчикДокументов + 1;
				КонецЦикла;
			КонецЦикла;
			
			Если СчетчикДокументов = 0 Тогда
				НастройкиСписка.Период.ДатаНачала    = НачалоМесяца(ДатаОтчета);
				НастройкиСписка.Период.ДатаОкончания = КонецМесяца(ДатаОтчета);
			ИначеЕсли СчетчикДокументов = 1 Тогда
				НастройкиСписка.Период.ДатаНачала    = НачалоМесяца(ТаблицаДат[0].Дата);
				НастройкиСписка.Период.ДатаОкончания = КонецМесяца(ТаблицаДат[0].Дата);
			Иначе
				ТаблицаДат.Сортировать("Дата");
				НастройкиСписка.Период.ДатаНачала    = ТаблицаДат[0].Дата;
				НастройкиСписка.Период.ДатаОкончания = ТаблицаДат[СчетчикДокументов - 1].Дата;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(НастройкиСписка, Форма.АдресХранилищаНастройкиДинСпискаДляРеестра);
	
КонецПроцедуры

Функция ПолучитьПараметрыИсполненияОтчета() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ИспользоватьПередКомпоновкойМакета", Истина);
	Результат.Вставить("ИспользоватьПослеКомпоновкиМакета",  Ложь);
	Результат.Вставить("ИспользоватьПослеВыводаРезультата",  Ложь);
	Результат.Вставить("ИспользоватьДанныеРасшифровки",      Истина);
	Результат.Вставить("ИспользоватьРасширенныеПараметрыРасшифровки", Истина);
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьТекстОтбора(Знач ОтборКомпоновкиДанных) Экспорт
	
	ЭлементыОтбора = Новый Массив;
	Для каждого ЭлементОтбора Из ОтборКомпоновкиДанных.Элементы Цикл
		Если НЕ ЭлементОтбора.Использование
			ИЛИ ТипЗнч(ЭлементОтбора) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			Продолжить; // Неиспользуемые отборы и группы отборов не выводим (они могут быть очень громоздкими).
		КонецЕсли;
		Если Строка(ЭлементОтбора.ЛевоеЗначение) = "Организация"
				И ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно
			ИЛИ Строка(ЭлементОтбора.ЛевоеЗначение) = "Дата"
			ИЛИ Строка(ЭлементОтбора.ЛевоеЗначение) = "Тип" Тогда
			Продолжить; // Стандартные отборы не выводим.
		КонецЕсли;
		
		СоставляющиеОтбора = Новый Массив;
		ДоступноеПолеОтбора = ОтборКомпоновкиДанных.ДоступныеПоляОтбора.Элементы.Найти(Строка(ЭлементОтбора.ЛевоеЗначение));
		Если ДоступноеПолеОтбора = Неопределено Тогда
			СоставляющиеОтбора.Добавить(Строка(ЭлементОтбора.ЛевоеЗначение));
		Иначе
			СоставляющиеОтбора.Добавить(ДоступноеПолеОтбора.Заголовок);
		КонецЕсли;
		
		СоставляющиеОтбора.Добавить(Строка(ЭлементОтбора.ВидСравнения));
		СоставляющиеОтбора.Добавить("""" + Строка(ЭлементОтбора.ПравоеЗначение) + """");
		
		ЭлементыОтбора.Добавить(СтрСоединить(СоставляющиеОтбора, " "));
	КонецЦикла;
	
	Возврат СтрСоединить(ЭлементыОтбора, " И ");
	
КонецФункции

Функция ПолучитьТекстЗаголовка(ПараметрыОтчета) Экспорт
	
	Если ЗначениеЗаполнено(ПараметрыОтчета.НачалоПериода) ИЛИ ЗначениеЗаполнено(ПараметрыОтчета.КонецПериода) Тогда
		ТекстЗаголовка = ПараметрыОтчета.ИмяСписка + БухгалтерскиеОтчетыКлиентСервер.ПолучитьПредставлениеПериода(
			ПараметрыОтчета.НачалоПериода, ПараметрыОтчета.КонецПериода);
	Иначе
		ТекстЗаголовка = ПараметрыОтчета.ИмяСписка;
	КонецЕсли;
	
	Возврат ТекстЗаголовка;
	
КонецФункции

Функция НомерНаПечать(Номер, Ссылка) Экспорт
	
	Если ТипЗнч(Ссылка) = Тип("ДокументСсылка.ПлатежноеПоручение") Тогда
		ПредставлениеНомера = УчетДенежныхСредствКлиентСервер.НомерОбъектаБезПрефикса(Номер);
	ИначеЕсли ТипЗнч(Ссылка) = Тип("ДокументСсылка.СчетФактураВыданный")
		ИЛИ ТипЗнч(Ссылка) = Тип("ДокументСсылка.СчетФактураПолученный") Тогда // Номера с/ф не требуется "приводить".
		ПредставлениеНомера = Номер;
	Иначе
		ПредставлениеНомера = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Номер, Истина, Ложь);
	КонецЕсли;
	
	Возврат ПредставлениеНомера;
	
КонецФункции

Функция ПредставлениеДокумента(Ссылка) Экспорт
	
	Возврат Ссылка.Метаданные().Синоним;
	
КонецФункции

Процедура ЗаполнитьПараметрыРасшифровкиОтчета(Адрес, Расшифровка, ПараметрыРасшифровки) Экспорт
	
	ДанныеОбъекта = ПолучитьИзВременногоХранилища(Адрес);
	
	ОтчетОбъект       = ДанныеОбъекта.Объект;
	ДанныеРасшифровки = ДанныеОбъекта.ДанныеРасшифровки;
	
	ЭлементРасшифровки = ДанныеРасшифровки.Элементы[Расшифровка];
	Если ТипЗнч(ЭлементРасшифровки) = Тип("ЭлементРасшифровкиКомпоновкиДанныхГруппировка") Тогда
		Возврат;
	КонецЕсли;
	
	// При расшифровке любого поля в строке таблицы реестра должен открываться Документ, данные которого выводятся в этой строке.
	// Чтобы выделить нужный документ из всей переданной расшифровки, сначала определяем индекс расшифровываемой ячейки.
	// Потом пытаемся найти "документ" в окрестностях этого индекса.
	// При поиске ограничение (для строки) одно - это поле "Номер по порядку" (НПП).
	// Слева находится НПП текущей строки, а справа НПП следующей строки.
	// Соответственно алогоритм такой:
	//  1. если в текущей ячейке находится НПП, то выполняем поиск документа только "вправо".
	//   Х-------------->Д
	//┌─────┬───────┬──────────┬───────┬─────┬───────┐
	//│ НПП │ Поле1 │ Документ │ ПолеХ │ ... │ ПолеN │
	//└─────┴───────┴──────────┴───────┴─────┴───────┘
	//
	// 2.1(а) в ином случае поиск начинаем сначала "влево", т.к. в случае удачи мы встретим Документ (Ссылку).
	//                    Д<--------------Х
	//┌─────┬───────┬──────────┬───────┬─────┬───────┐
	//│ НПП │ Поле1 │ Документ │ ПолеХ │ ... │ ПолеN │
	//└─────┴───────┴──────────┴───────┴─────┴───────┘
	// 2.1(б) а в случае неудачи мы придем к НПП "нашей" строки
	//   0<-----Х
	//┌─────┬───────┬──────────┬───────┬─────┬───────┐
	//│ НПП │ Поле1 │ Документ │ ПолеХ │ ... │ ПолеN │
	//└─────┴───────┴──────────┴───────┴─────┴───────┘
	// 2.2 в этом случае дополнительно выполним поиск "вправо" и Документ будет найден,
	//     либо мы дойдем до крайнего элемента таблицы, если расшифровка была вызвана, например, в Итогах.
	//          Х-------->Д
	//┌─────┬───────┬──────────┬───────┬─────┬───────┐
	//│ НПП │ Поле1 │ Документ │ ПолеХ │ ... │ ПолеN │
	//└─────┴───────┴──────────┴───────┴─────┴───────┘
	//
	// Если в ячейке расшифровки Null, то поиск не осуществляем - это точно не строка отчета.
	
	ПоляРасшифровки = ЭлементРасшифровки.ПолучитьПоля();
	Если ПоляРасшифровки.Количество() > 0 Тогда
		Если ПоляРасшифровки[0].Значение = Null Тогда
			Возврат;
		ИначеЕсли ПоляРасшифровки[0].Поле = "Ссылка" Тогда
			ПараметрыРасшифровки.Вставить("ОткрытьОбъект", Истина);
			ПараметрыРасшифровки.Вставить("Значение", ПоляРасшифровки[0].Значение);
		Иначе
			КоличествоПолейРасшифровки = ДанныеРасшифровки.Элементы.Количество();
			РасшифровкаИндекс = ДанныеРасшифровки.Элементы.Индекс(ДанныеРасшифровки.Элементы[Расшифровка]);
			Если ПоляРасшифровки[0].Поле = "СистемныеПоля.НомерПоПорядку" Тогда
				ИндексРасшифровки = ИндексРасшифровкиДокументаВСтроке(ДанныеРасшифровки, РасшифровкаИндекс, КоличествоПолейРасшифровки);
			Иначе
				ИндексРасшифровки = ИндексРасшифровкиДокументаВСтроке(ДанныеРасшифровки, РасшифровкаИндекс, КоличествоПолейРасшифровки, -1);
				Если ИндексРасшифровки = 0 Тогда
					ИндексРасшифровки = ИндексРасшифровкиДокументаВСтроке(ДанныеРасшифровки, РасшифровкаИндекс, КоличествоПолейРасшифровки);
				КонецЕсли;
			КонецЕсли;
			
			Если ИндексРасшифровки > 0 Тогда
				ПараметрыРасшифровки.Вставить("ОткрытьОбъект", Истина);
				ПоляРасшифровки = ДанныеРасшифровки.Элементы[ИндексРасшифровки].ПолучитьПоля();
				ПараметрыРасшифровки.Вставить("Значение", ПоляРасшифровки[0].Значение);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура НастроитьСтруктуруОтчета(Настройки, ПараметрыОтчета, Схема, СхемаКомпоновкиДанныхЭталон)
	
	ВыбранныеЭлементы = Настройки.Структура[0].Выбор.Элементы;
	ВыбранаВалютаДокумента  = Ложь;
	ЕстьВалютаДокумента     = Ложь;
	ЕстьСуммаДокумента      = Ложь;
	ЕстьВыбранныйПоказатель = Ложь;
	Для каждого ВыбранныйЭлемент Из ВыбранныеЭлементы Цикл
		Если ВыбранныйЭлемент.Использование Тогда
			ЕстьВыбранныйПоказатель = Истина;
			Если ВыбранныйЭлемент.Поле = Новый ПолеКомпоновкиДанных("ВалютаДокумента") Тогда
				ВыбранаВалютаДокумента = Истина;
			КонецЕсли;
		КонецЕсли;
		Если ВыбранныйЭлемент.Поле = Новый ПолеКомпоновкиДанных("ВалютаДокумента") Тогда
			ЕстьВалютаДокумента = Истина;
		КонецЕсли;
		Если ВыбранныйЭлемент.Поле = Новый ПолеКомпоновкиДанных("СуммаДокумента") Тогда
			ЕстьСуммаДокумента = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Если ЕстьВыбранныйПоказатель Тогда
		КоличествоВыбранныхЭлементов = ВыбранныеЭлементы.Количество();
		НомерПоПорядку = ВыбранныеЭлементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
		НомерПоПорядку.Поле = Новый ПолеКомпоновкиДанных("СистемныеПоля.НомерПоПорядку");
		НомерПоПорядку.Заголовок = "№ п/п";
		ВыбранныеЭлементы.Сдвинуть(НомерПоПорядку, -КоличествоВыбранныхЭлементов);
	КонецЕсли;
	
	СтруктураИтоги = Настройки.Структура[0];
	Для каждого СтруктураИтогиЭталон Из СхемаКомпоновкиДанныхЭталон.НастройкиПоУмолчанию.Структура Цикл
		Для каждого ПараметрВыводаСтруктураЭталон Из СтруктураИтогиЭталон.ПараметрыВывода.Элементы Цикл
			ПараметрВыводаСтруктура = СтруктураИтоги.ПараметрыВывода.Элементы.Найти(ПараметрВыводаСтруктураЭталон.Параметр);
			ЗаполнитьЗначенияСвойств(ПараметрВыводаСтруктура, ПараметрВыводаСтруктураЭталон);
		КонецЦикла;
		
		КомпоновкаДанныхКлиентСервер.СкопироватьЭлементы(СтруктураИтоги.УсловноеОформление, СтруктураИтогиЭталон.УсловноеОформление);
	КонецЦикла;
	
	ВыражениеИтогаСуммаБезБезВалюты = "ВычислитьВыражение(""Сумма(СуммаДокумента)"", ""ОбщийИтог"")";
	ПолеИтогаСумма = Схема.ПоляИтога.Найти("СуммаДокумента");
	Если ПолеИтогаСумма = Неопределено Тогда
		ВыражениеИтогаСуммаВалюта = ВыражениеИтогаСуммаБезБезВалюты;
	Иначе
		ВыражениеИтогаСуммаВалюта = ПолеИтогаСумма.Выражение;
	КонецЕсли;
	
	Если НЕ ЕстьВалютаДокумента ИЛИ НЕ ПолучитьФункциональнуюОпцию("ИспользоватьВалютныйУчет") Тогда
		Схема.ПоляИтога.Очистить();
		ПолеИтогаСумма = Схема.ПоляИтога.Добавить();
		ПолеИтогаСумма.ПутьКДанным = "СуммаДокумента";
		ПолеИтогаСумма.Группировки.Добавить("ОбщийИтог");
		ПолеИтогаСумма.Выражение   = ВыражениеИтогаСуммаБезБезВалюты;
		ВыражениеИтогаСуммаВалюта  = ВыражениеИтогаСуммаБезБезВалюты;
	КонецЕсли;
	
	Если НЕ ЕстьСуммаДокумента И ПолеИтогаСумма <> Неопределено Тогда
		Схема.ПоляИтога.Удалить(ПолеИтогаСумма);
	КонецЕсли;
	
	ТипСуммыНеотр = ОбщегоНазначения.ОписаниеТипаЧисло(15, 2, ДопустимыйЗнак.Неотрицательный);
	ТипСуммы      = ОбщегоНазначения.ОписаниеТипаЧисло(15, 2);
	
	Для каждого ВыбранныйЭлемент Из ВыбранныеЭлементы Цикл
		Если ВыбранныйЭлемент.Использование И ВыбранныйЭлемент.Поле <> Новый ПолеКомпоновкиДанных("СуммаДокумента") Тогда
			ИмяПоля = СтрЗаменить(Строка(ВыбранныйЭлемент.Поле), "Ссылка.", "");
			ДоступноеПоле = Настройки.Выбор.ДоступныеПоляВыбора.Элементы.Найти(ИмяПоля);
			ИмяПоля = Строка(ВыбранныйЭлемент.Поле);
			Если ДоступноеПоле <> Неопределено И Схема.ПоляИтога.Найти(ИмяПоля) = Неопределено Тогда
				Если ДоступноеПоле.ТипЗначения.Типы().Количество() = 1 И ДоступноеПоле.ТипЗначения.ПривестиЗначение(0) = 0 Тогда // Проверяем, что это "число".
					НовоеПолеИтога = Схема.ПоляИтога.Добавить();
					НовоеПолеИтога.ПутьКДанным = ИмяПоля;
					НовоеПолеИтога.Группировки.Добавить("ОбщийИтог");
					Если ДоступноеПоле.ТипЗначения = ТипСуммы ИЛИ ДоступноеПоле.ТипЗначения = ТипСуммыНеотр Тогда
						Если ВыбранаВалютаДокумента Тогда
							НовоеПолеИтога.Выражение = СтрЗаменить(ВыражениеИтогаСуммаВалюта, "СуммаДокумента", "ЕстьNull(" + НовоеПолеИтога.ПутьКДанным + ",0)");
						Иначе
							НовоеПолеИтога.Выражение = СтрЗаменить(ВыражениеИтогаСуммаБезБезВалюты, "СуммаДокумента", "ЕстьNull(" + НовоеПолеИтога.ПутьКДанным + ",0)");
						КонецЕсли;
					Иначе
						НовоеПолеИтога.Выражение = СтрЗаменить(ВыражениеИтогаСуммаБезБезВалюты, "СуммаДокумента", "ЕстьNull(" + НовоеПолеИтога.ПутьКДанным + ",0)");
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Для каждого УО Из СтруктураИтоги.УсловноеОформление.Элементы Цикл
		Если ЗначениеЗаполнено(УО.Отбор) И СтрНайти(Строка(УО.Отбор), "Сумма") > 0 Тогда
			УО.Отбор.Элементы.Очистить();
			УО.Поля.Элементы.Очистить();
			Для каждого ПолеИтога Из Схема.ПоляИтога Цикл
				Если ПолеИтога.ПутьКДанным = "ВалютаДокумента" Тогда
					Продолжить;
				КонецЕсли;
				
				// Итоги, которые вычисляются не в разрезе валют оформлять не нужно - это сделает платформа.
				Если СтрНайти(ПолеИтога.Выражение, "Валюта") = 0 Тогда
					Продолжить;
				КонецЕсли;
				
				ОформляемоеПоле = УО.Поля.Элементы.Добавить();
				ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(ПолеИтога.ПутьКДанным);
				ОформляемоеПоле.Использование = Истина;
			КонецЦикла;
			
			УО.Использование = УО.Поля.Элементы.Количество() > 0;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Возращает индекс документа в данных расшифровки.
// Поиск ограничен строкой таблицы отчета (расшифровки).
//
// Параметры:
//    ДанныеРасшифровки          - ДанныеРасшифровкиКомпоновкиДанных
//    ТекущееЗначениеИндекса     - Число
//    КоличествоПолейРасшифровки - Число
//    Знак                       - Число - направление поиска. Необязательное, должно иметь значения: (1; -1).
//
// Возвращаемое значение:
//    Число - если документ не найден, возращает 0.
//
Функция ИндексРасшифровкиДокументаВСтроке(ДанныеРасшифровки, Знач ТекущееЗначениеИндекса, КоличествоПолейРасшифровки, Знак = 1)
	
	ИндексРасшифровки = 0;
	ТекущееЗначениеИндекса = ТекущееЗначениеИндекса + Знак;
	Пока ТекущееЗначениеИндекса >= 0 И ТекущееЗначениеИндекса <= КоличествоПолейРасшифровки + 1 Цикл
		ЭлементРасшифровки = ДанныеРасшифровки.Элементы[ТекущееЗначениеИндекса];
		Если ТипЗнч(ЭлементРасшифровки) = Тип("ЭлементРасшифровкиКомпоновкиДанныхГруппировка") Тогда
			Прервать;
		КонецЕсли;
		
		ПоляРасшифровки = ДанныеРасшифровки.Элементы[ТекущееЗначениеИндекса].ПолучитьПоля();
		Если ПоляРасшифровки.Количество() > 0 Тогда
			Если ПоляРасшифровки[0].Поле = "СистемныеПоля.НомерПоПорядку" Тогда
				Прервать;
			ИначеЕсли ПоляРасшифровки[0].Поле = "Ссылка" Тогда
				ИндексРасшифровки = ТекущееЗначениеИндекса;
				Прервать;
			КонецЕсли;
		КонецЕсли;
		
		ТекущееЗначениеИндекса = ТекущееЗначениеИндекса + Знак;
	КонецЦикла;
	
	Возврат ИндексРасшифровки;
	
КонецФункции

#КонецОбласти

#КонецЕсли
