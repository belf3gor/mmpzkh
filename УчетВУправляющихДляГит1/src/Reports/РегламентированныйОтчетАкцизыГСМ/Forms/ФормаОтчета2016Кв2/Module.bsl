&НаКлиенте
Перем ОбработкаКС Экспорт;

&НаСервере
Перем СписокРасшифровкиПоказателей;

&НаСервере
Перем СписокРасшифровкиформулы;

&НаСервере
Перем мОбъектОтчета;

&НаСервере
Перем ТаблицаСоставПоказателей;

&НаСервере
Перем СохраненныеДанныеОтчета;

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	// Обход ошибки платформы Параметр сеанса отсутствует или удален.
	ТабличныйДокумент.Очистить();
	
	СформироватьСтруктуруРеквизитовФормы();
	
	СтруктураРеквизитовФормы.СписокПечатаемыхЛистов = Новый СписокЗначений;
	
	СтруктураРеквизитовФормы.мСоставПоказателей = "СоставПоказателей2016Кв2";
	
	СтруктураРеквизитовФормы.мОписаниеТиповЧислоЕ
		= Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(13, 2));
	
	// Идентификаторы многострочных групп.
	СтруктураРеквизитовФормы.мИдГруппы1   = "П0000100001";
	СтруктураРеквизитовФормы.мИдГруппы21  = "П0002100001";
	СтруктураРеквизитовФормы.мИдГруппы22  = "П0002200001";
	СтруктураРеквизитовФормы.мИдГруппы241 = "П0002400001";
	СтруктураРеквизитовФормы.мИдГруппы242 = "П0002400002";
	СтруктураРеквизитовФормы.мИдГруппы25  = "П0002500001";
	СтруктураРеквизитовФормы.мИдГруппы26  = "П0002600001";
	СтруктураРеквизитовФормы.мИдГруппы101 = "П0010100001";
	СтруктураРеквизитовФормы.мИдГруппы103 = "П0010300001";
	СтруктураРеквизитовФормы.мИдГруппы104 = "П0010400001";
	
	// Идентификаторы структур с данными немногостраничных разделов.
	СтруктураДанныхТитульный = Новый Структура;
	
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела = Новый Массив;
	
	// Структура содержит имена и число уровней многоуровневых разделов.
	мСтруктураМногоуровневыхРазделов = Новый Структура;
	мСтруктураМногоуровневыхРазделов.Вставить("Приложение21", 2);
	
	ИнициализацияМногоуровневыхРазделов();
	
	ИнициализацияМногостраничныхРазделов();
	
	// Структура многострочных разделов формы.
	мСтруктураМногострочныхРазделов = Новый Структура;
	мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы1,   СтруктураРеквизитовФормы.мИдГруппы1);
	мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы21,  СтруктураРеквизитовФормы.мИдГруппы21);
	мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы22,  СтруктураРеквизитовФормы.мИдГруппы22);
	мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы241, СтруктураРеквизитовФормы.мИдГруппы241);
	мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы242, СтруктураРеквизитовФормы.мИдГруппы242);
	мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы25,  СтруктураРеквизитовФормы.мИдГруппы25);
	мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы26,  СтруктураРеквизитовФормы.мИдГруппы26);
	мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы101, СтруктураРеквизитовФормы.мИдГруппы101);
	мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы103, СтруктураРеквизитовФормы.мИдГруппы103);
	мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы104, СтруктураРеквизитовФормы.мИдГруппы104);
	
	мСтруктураИменаКолонокРазделов = Новый Структура;
	мСтруктураИменаКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы1,   Новый СписокЗначений);
	мСтруктураИменаКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы21,  Новый СписокЗначений);
	мСтруктураИменаКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы22,  Новый СписокЗначений);
	мСтруктураИменаКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы241, Новый СписокЗначений);
	мСтруктураИменаКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы242, Новый СписокЗначений);
	мСтруктураИменаКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы25,  Новый СписокЗначений);
	мСтруктураИменаКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы26,  Новый СписокЗначений);
	мСтруктураИменаКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы101, Новый СписокЗначений);
	мСтруктураИменаКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы103, Новый СписокЗначений);
	мСтруктураИменаКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы104, Новый СписокЗначений);
	
	// Структура содержит данные дополнительных страниц.
	мСтруктураМногостраничныхРазделов = Новый Структура;
	мСтруктураМногостраничныхРазделов.Вставить("Раздел1",     "ТаблицаСтраницыРаздел1");
	мСтруктураМногостраничныхРазделов.Вставить("Раздел2",     "ТаблицаСтраницыРаздел2");
	мСтруктураМногостраничныхРазделов.Вставить("Раздел3",     "ТаблицаСтраницыРаздел3");
	мСтруктураМногостраничныхРазделов.Вставить("Приложение1", "ТаблицаСтраницыПриложение1");
	мСтруктураМногостраничныхРазделов.Вставить("Приложение3", "ТаблицаСтраницыПриложение3");
	мСтруктураМногостраничныхРазделов.Вставить("Приложение4", "ТаблицаСтраницыПриложение4");
	
	мСтруктураИсхКолвоСтрокРазделов = Новый Структура;
	мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы1,   1);
	мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы21,  1);
	мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы22,  1);
	мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы241, 1);
	мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы242, 1);
	мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы25,  1);
	мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы26,  1);
	мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы101, 1);
	мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы103, 1);
	мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы104, 1);
	
	мСтруктураКолвоКолонокРазделов = Новый Структура;
	мСтруктураКолвоКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы1,   3);
	мСтруктураКолвоКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы21,  3);
	мСтруктураКолвоКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы22,  3);
	мСтруктураКолвоКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы241, 5);
	мСтруктураКолвоКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы242, 3);
	мСтруктураКолвоКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы25,  4);
	мСтруктураКолвоКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы26,  5);
	мСтруктураКолвоКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы101, 4);
	мСтруктураКолвоКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы103, 6);
	мСтруктураКолвоКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы104, 6);
	
	ЦветЗаполняетсяТолькоВручную                           = Новый Цвет(255, 255, 225);
	ЦветЗаполняетсяАвтоКорректир                           = Новый Цвет(255, 240, 200);
	ЦветЗаполняетсяАвтоБезКорректир                        = Новый Цвет(230, 240, 220);
	СтруктураРеквизитовФормы.ЦветЗаполняетсяАвтоАрифметика = Новый Цвет(192, 220, 192);
	ЦветЗаполняетсяОднозначноВручную                       = Новый Цвет(255, 255, 192);
	ЦветЗаполняетсяАвтоматически                           = Новый Цвет(255, 255, 255);

	// Структура цветов раскраски автозаполняемых ячеек.
	мСтруктураЦветовРаскраски = Новый Структура;
	мСтруктураЦветовРаскраски.Вставить("_1", ЦветЗаполняетсяТолькоВручную);
	мСтруктураЦветовРаскраски.Вставить("_2", ЦветЗаполняетсяАвтоКорректир);
	мСтруктураЦветовРаскраски.Вставить("_3", ЦветЗаполняетсяАвтоБезКорректир);
	мСтруктураЦветовРаскраски.Вставить("_4", СтруктураРеквизитовФормы.ЦветЗаполняетсяАвтоАрифметика);
	мСтруктураЦветовРаскраски.Вставить("_0", ЦветЗаполняетсяОднозначноВручную);
	мСтруктураЦветовРаскраски.Вставить("_5", ЦветЗаполняетсяАвтоматически);
	
	мСтруктураВариантыЗаполнения       = Новый Структура;
	мСтруктураВариантыЗаполненияЭталон = Новый Структура;
	
	// Версия формы.
	СтруктураРеквизитовФормы.мВерсияФормы = "11/05/2016";
	
	// Код отчета, равен КНД.
	СтруктураРеквизитовФормы.мКодОтчета = 1151089;
	
	СтруктураРеквизитовФормы.ВариантыФорматовВыгрузки = Новый СписокЗначений;
	СтруктураРеквизитовФормы.ВариантыФорматовВыгрузки.Добавить(
		СтруктураРеквизитовФормы.мСоставПоказателей, "Формат 5.01", Истина);
	
	СтруктураРеквизитовФормы.КНД = "1151089";
	
	СтруктураРеквизитовФормы.мПечатныеформы = Новый СписокЗначений;
	СтруктураРеквизитовФормы.мПечатаемыеРазделы = Новый СписокЗначений;
	
	ИмяРаздела = "Титульный";
	
	ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + ИмяРаздела));
	
	СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяРаздела;
	
	СтруктураРеквизитовФормы.мВыбраннаяФорма          = Параметры.мВыбраннаяФорма;
	СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета  = Параметры.мДатаКонцаПериодаОтчета;
	СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета = Параметры.мДатаНачалаПериодаОтчета;
	СтруктураРеквизитовФормы.мПериодичность           = Параметры.мПериодичность;
	СтруктураРеквизитовФормы.мСкопированаФорма        = Параметры.мСкопированаФорма;
	СтруктураРеквизитовФормы.мСохраненныйДок          = Параметры.мСохраненныйДок;
	СтруктураРеквизитовФормы.Организация              = Параметры.Организация;
	СтруктураРеквизитовФормы.ДоступенМеханизмПечатиРеглОтчетностиСДвухмернымШтрихкодомPDF417
	= Параметры.ДоступенМеханизмПечатиРеглОтчетностиСДвухмернымШтрихкодомPDF417;
	
	ДатаПодписи = ТекущаяДатаСеанса();
	
	ПорядкиОкругленияОтчетности = Новый Структура;
	ПорядкиОкругленияОтчетности.Вставить("ПеречислениеПорядкиОкругленияОтчетностиОкр1",       Перечисления.ПорядкиОкругленияОтчетности.Окр1);
	ПорядкиОкругленияОтчетности.Вставить("ПеречислениеПорядкиОкругленияОтчетностиОкр1000",    Перечисления.ПорядкиОкругленияОтчетности.Окр1000);
	ПорядкиОкругленияОтчетности.Вставить("ПеречислениеПорядкиОкругленияОтчетностиОкр1000000", Перечисления.ПорядкиОкругленияОтчетности.Окр1000000);
	
	СоответствиеЕдиницыИзмеренияДелителю = Новый Структура;
	СоответствиеЕдиницыИзмеренияДелителю.Вставить("Окр1", 1);
	СоответствиеЕдиницыИзмеренияДелителю.Вставить("Окр1000", 1000);
	СоответствиеЕдиницыИзмеренияДелителю.Вставить("Окр1000000", 1000000);
	
	Инициализация(Параметры.БезОткрытияФормы);
	
КонецПроцедуры

&НаСервере
Процедура СформироватьСтруктуруРеквизитовФормы()
	
	СтруктураРеквизитовФормы = Новый Структура;
	СтруктураРеквизитовФормы.Вставить("ВыводитьСтраницуВТаблДокНаСервере");
	СтруктураРеквизитовФормы.Вставить("НаимТекущегоРаздела");
	СтруктураРеквизитовФормы.Вставить("КНД");
	СтруктураРеквизитовФормы.Вставить("мАвтоВыборКодов");
	СтруктураРеквизитовФормы.Вставить("мБезОткрытияФормы");
	СтруктураРеквизитовФормы.Вставить("мВерсияФормы");
	СтруктураРеквизитовФормы.Вставить("мДелитель");
	СтруктураРеквизитовФормы.Вставить("мЗаписываетсяНовыйДокумент");
	СтруктураРеквизитовФормы.Вставить("мЗаписьЗапрещена");
	СтруктураРеквизитовФормы.Вставить("мИдГруппы1");
	СтруктураРеквизитовФормы.Вставить("мИдГруппы21");
	СтруктураРеквизитовФормы.Вставить("мИдГруппы22");
	СтруктураРеквизитовФормы.Вставить("мИдГруппы241");
	СтруктураРеквизитовФормы.Вставить("мИдГруппы242");
	СтруктураРеквизитовФормы.Вставить("мИдГруппы25");
	СтруктураРеквизитовФормы.Вставить("мИдГруппы26");
	СтруктураРеквизитовФормы.Вставить("мИдГруппы101");
	СтруктураРеквизитовФормы.Вставить("мИдГруппы103");
	СтруктураРеквизитовФормы.Вставить("мИдГруппы104");
	СтруктураРеквизитовФормы.Вставить("мКодОтчета");
	СтруктураРеквизитовФормы.Вставить("мРежимПечати");
	СтруктураРеквизитовФормы.Вставить("мСоставПоказателей");
	СтруктураРеквизитовФормы.Вставить("мСтрокаФормата");
	СтруктураРеквизитовФормы.Вставить("мСчетчикСтраниц");
	СтруктураРеквизитовФормы.Вставить("ОтключитьВыполнениеРасчета", Ложь);
	СтруктураРеквизитовФормы.Вставить("ТочностьЕдиницыИзмерения");
	СтруктураРеквизитовФормы.Вставить("ФлажокОтклАвтоРасчет", Ложь);
	СтруктураРеквизитовФормы.Вставить("ВариантыФорматовВыгрузки");
	СтруктураРеквизитовФормы.Вставить("ВидДокумента");
	СтруктураРеквизитовФормы.Вставить("ИП");
	СтруктураРеквизитовФормы.Вставить("ЕдиницаИзмерения");
	СтруктураРеквизитовФормы.Вставить("мВариант");
	СтруктураРеквизитовФормы.Вставить("мВыбраннаяФорма");
	СтруктураРеквизитовФормы.Вставить("мДатаКонцаПериодаОтчета");
	СтруктураРеквизитовФормы.Вставить("мДатаНачалаПериодаОтчета");
	СтруктураРеквизитовФормы.Вставить("мОписаниеТиповЧислоЕ");
	СтруктураРеквизитовФормы.Вставить("мПериодичность");
	СтруктураРеквизитовФормы.Вставить("мПечатаемыеРазделы");
	СтруктураРеквизитовФормы.Вставить("мПечатныеФормы");
	СтруктураРеквизитовФормы.Вставить("мСкопированаФорма");
	СтруктураРеквизитовФормы.Вставить("мСохраненныйДок");
	СтруктураРеквизитовФормы.Вставить("мПечатьБезШтрихкодаРазрешена");
	СтруктураРеквизитовФормы.Вставить("Организация");
	СтруктураРеквизитовФормы.Вставить("ЦветЗаполняетсяАвтоАрифметика");
	СтруктураРеквизитовФормы.Вставить("СписокПечатаемыхЛистов");
	СтруктураРеквизитовФормы.Вставить("НаимОрганизации");
	СтруктураРеквизитовФормы.Вставить("НачальноеЗначениеНаимОрганизации", "");
	СтруктураРеквизитовФормы.Вставить("СтрПериодОтчета");
	СтруктураРеквизитовФормы.Вставить("ТекущаяСтрокаРазделовОтчета");
	СтруктураРеквизитовФормы.Вставить("ДоступенМеханизмПечатиРеглОтчетностиСДвухмернымШтрихкодомPDF417");
	СтруктураРеквизитовФормы.Вставить("ТекстДляЗаголовочнойЧасти");
	СтруктураРеквизитовФормы.Вставить("НомераСтрокМногоуровнегоРаздела");
	СтруктураРеквизитовФормы.Вставить("АдресВоВремХранилищеТаблицаСоставПоказателей");
	СтруктураРеквизитовФормы.Вставить("ИмяАктивнойОбластиРаздела2", "");
	СтруктураРеквизитовФормы.Вставить("ОКВЭД",  "");
	СтруктураРеквизитовФормы.Вставить("ОКВЭД2", "");
	СтруктураРеквизитовФормы.Вставить("мПроверятьСоотношенияПриПечатиИВыгрузки");
	
КонецПроцедуры

&НаСервере
Процедура ИнициализацияМногоуровневыхРазделов()
	
	ДеревоДанных = Новый ДеревоЗначений;
	ДеревоДанных.Колонки.Добавить("Данные");
	
	Для каждого Элем Из мСтруктураМногоуровневыхРазделов Цикл
		
		ИмяРаздела = Элем.Ключ;
		КолУровней = Элем.Значение;
		
		ДеревоДанныхРаздела = ДеревоДанных.Скопировать();
		
		ТекВетка = ДеревоДанныхРаздела;
		
		Для ТекУровень = 0 По КолУровней - 1 Цикл
			ТекВетка = ТекВетка.Строки.Добавить();
			ТекВетка.Данные = Новый Структура;
		КонецЦикла;
		
		СтруктураРеквизитовФормы.Вставить("АдресВоВрХранилищеДеревоДанных" + ИмяРаздела);
		
		СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяРаздела]
			= ПоместитьВоВременноеХранилище(ДеревоДанныхРаздела, УникальныйИдентификатор);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьТаблицуСоставаПоказателей()
	
	Если ТаблицаСоставПоказателей = Неопределено Тогда
		ТаблицаСоставПоказателей = ПолучитьИзВременногоХранилища(
			СтруктураРеквизитовФормы.АдресВоВремХранилищеТаблицаСоставПоказателей);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьТаблицуСоставаПоказателей()
	
	ОписаниеТиповСтрока15 = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(15));
	ОписаниеТиповСтрока50 = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(50));
	
	ТаблицаСоставПоказателей = Новый ТаблицаЗначений;
	
	КолонкиТЗ = ТаблицаСоставПоказателей.Колонки;
	КолонкиТЗ.Добавить("ИмяПоляТаблДокумента",     ОписаниеТиповСтрока15);
	КолонкиТЗ.Добавить("КодПоказателяПоСоставу",   ОписаниеТиповСтрока50);
	КолонкиТЗ.Добавить("КодПоказателяПоФорме",     ОписаниеТиповСтрока50);
	КолонкиТЗ.Добавить("ПризнМногострочности",     ОписаниеТиповСтрока15);
	КолонкиТЗ.Добавить("ТипДанныхПоказателя",      ОписаниеТиповСтрока15);
	КолонкиТЗ.Добавить("КодПоказателяПоСтруктуре", ОписаниеТиповСтрока50);
	
	СтруктураРеквизитовФормы.АдресВоВремХранилищеТаблицаСоставПоказателей
		= ПоместитьВоВременноеХранилище(ТаблицаСоставПоказателей, УникальныйИдентификатор);
	
КонецПроцедуры

&НаСервере
Процедура ИнициализацияМногостраничныхРазделов()
	
	СтрПерваяСтраница = ТаблицаСтраницыРаздел1.Добавить();
	СтрПерваяСтраница.Представление               = "Новая страница";
	СтрПерваяСтраница.АктивнаяСтраница            = Истина;
	СтрПерваяСтраница.АвтоматическоеПредставление = Истина;
	
	СтрПерваяСтраница = ТаблицаСтраницыРаздел2.Добавить();
	СтрПерваяСтраница.Представление               = "Новая страница";
	СтрПерваяСтраница.АктивнаяСтраница            = Истина;
	СтрПерваяСтраница.АвтоматическоеПредставление = Истина;
	
	СтрПерваяСтраница = ТаблицаСтраницыРаздел3.Добавить();
	СтрПерваяСтраница.Представление               = "Новая страница";
	СтрПерваяСтраница.АктивнаяСтраница            = Истина;
	СтрПерваяСтраница.АвтоматическоеПредставление = Истина;
	
	СтрПерваяСтраница = ТаблицаСтраницыПриложение1.Добавить();
	СтрПерваяСтраница.Представление               = "Новая страница";
	СтрПерваяСтраница.АктивнаяСтраница            = Истина;
	СтрПерваяСтраница.АвтоматическоеПредставление = Истина;
	
	СтрПерваяСтраница = ТаблицаСтраницыПриложение3.Добавить();
	СтрПерваяСтраница.Представление               = "Новая страница";
	СтрПерваяСтраница.АктивнаяСтраница            = Истина;
	СтрПерваяСтраница.АвтоматическоеПредставление = Истина;
	
	СтрПерваяСтраница = ТаблицаСтраницыПриложение4.Добавить();
	СтрПерваяСтраница.Представление               = "Новая страница";
	СтрПерваяСтраница.АктивнаяСтраница            = Истина;
	СтрПерваяСтраница.АвтоматическоеПредставление = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ВставитьДополнительнуюСтраницуНаСервере(ИмяТекущейСтраницыПанели = Неопределено, СохранятьДанныеТекущейСтраницы = Истина)
	
	ИзменитьТаблицуПараметровАвтозаполнения(1, ИмяТекущейСтраницыПанели);
	
	СтруктураРеквизитовФормы.ОтключитьВыполнениеРасчета = Истина;
	
	Если ИмяТекущейСтраницыПанели = "Раздел2" Тогда
		ВставитьДополнительнуюСтраницу(ЭтаФорма, ИмяТекущейСтраницыПанели);
	Иначе
		РегламентированнаяОтчетность.ВставитьДополнительнуюСтраницуНаСервере(ЭтаФорма, ИмяТекущейСтраницыПанели, СохранятьДанныеТекущейСтраницы);
	КонецЕсли;
	РегламентированнаяОтчетность.ПослеВставкиДополнительнойСтраницыНаСервере(ЭтаФорма, ИмяТекущейСтраницыПанели);
	
	СтруктураРеквизитовФормы.ОтключитьВыполнениеРасчета = Ложь;
	
	СохранитьДанныеРаздела(ИмяТекущейСтраницыПанели, Ложь, Ложь);
	
	РасчетНаСервере(ИмяТекущейСтраницыПанели);
	
	СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ВставитьДополнительнуюСтраницу(Форма, ИмяТекущейСтраницыПанели = Неопределено)
	
	Перем ТаблицаСтраницРаздела;
	Перем СтруктураДанныхДопСтрокРаздела;

	Если ИмяТекущейСтраницыПанели = Неопределено Тогда
		ИмяТекущейСтраницыПанели = Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела;
	КонецЕсли;

	Если Не Форма.мСтруктураМногостраничныхРазделов.Свойство(ИмяТекущейСтраницыПанели, ТаблицаСтраницРаздела) Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаСтраницРаздела = Форма[ТаблицаСтраницРаздела];

	ИмяТекТабличногоПоля = "ТабличныйДокумент";
	ТекТабличноеПоле     = Форма[ИмяТекТабличногоПоля];

	СтруктураДанныхТекущейТаблицы = СобратьДанныеТекущегоТаблПоля(Форма, ИмяТекТабличногоПоля);

	Если ИмяТекущейСтраницыПанели = "Раздел2" Тогда
		
		// Раздел 2 содержит несколько многострочных блоков,
		// Поочередно сохраняем данные дополнительных строк каждого блока.
		ОбновитьСтруктуруМногострочногоРаздела(Форма, Форма.СтруктураРеквизитовФормы.мИдГруппы21);
		ОбновитьСтруктуруМногострочногоРаздела(Форма, Форма.СтруктураРеквизитовФормы.мИдГруппы22);
		ОбновитьСтруктуруМногострочногоРаздела(Форма, Форма.СтруктураРеквизитовФормы.мИдГруппы241);
		ОбновитьСтруктуруМногострочногоРаздела(Форма, Форма.СтруктураРеквизитовФормы.мИдГруппы242);
		ОбновитьСтруктуруМногострочногоРаздела(Форма, Форма.СтруктураРеквизитовФормы.мИдГруппы25);
		ОбновитьСтруктуруМногострочногоРаздела(Форма, Форма.СтруктураРеквизитовФормы.мИдГруппы26);
		
		// Обновим структуру, хранящую данные строк многострочных блоков.
		СтруктураДанныхДопСтрокРаздела = Новый Структура;
		
		ПромТаблицаДопСтрокРаздела = Неопределено;
		Форма.мСтруктураМногострочныхРазделов.Свойство(Форма.СтруктураРеквизитовФормы.мИдГруппы21, ПромТаблицаДопСтрокРаздела);
		ПромТаблицаДопСтрокРаздела = Форма[ПромТаблицаДопСтрокРаздела];
		ТаблицаДопСтрокГруппы21 = Форма["Хранилище" + Форма.СтруктураРеквизитовФормы.мИдГруппы21].Добавить().Таблица;
		КопироватьДанныеФормы(ПромТаблицаДопСтрокРаздела, ТаблицаДопСтрокГруппы21);
		СтруктураДанныхДопСтрокРаздела.Вставить(Форма.СтруктураРеквизитовФормы.мИдГруппы21, ТаблицаДопСтрокГруппы21);
		
		ПромТаблицаДопСтрокРаздела = Неопределено;
		Форма.мСтруктураМногострочныхРазделов.Свойство(Форма.СтруктураРеквизитовФормы.мИдГруппы22, ПромТаблицаДопСтрокРаздела);
		ПромТаблицаДопСтрокРаздела = Форма[ПромТаблицаДопСтрокРаздела];
		ТаблицаДопСтрокГруппы22 = Форма["Хранилище" + Форма.СтруктураРеквизитовФормы.мИдГруппы22].Добавить().Таблица;
		КопироватьДанныеФормы(ПромТаблицаДопСтрокРаздела, ТаблицаДопСтрокГруппы22);
		СтруктураДанныхДопСтрокРаздела.Вставить(Форма.СтруктураРеквизитовФормы.мИдГруппы22, ТаблицаДопСтрокГруппы22);
		
		ПромТаблицаДопСтрокРаздела = Неопределено;
		Форма.мСтруктураМногострочныхРазделов.Свойство(Форма.СтруктураРеквизитовФормы.мИдГруппы241, ПромТаблицаДопСтрокРаздела);
		ПромТаблицаДопСтрокРаздела = Форма[ПромТаблицаДопСтрокРаздела];
		ТаблицаДопСтрокГруппы241 = Форма["Хранилище" + Форма.СтруктураРеквизитовФормы.мИдГруппы241].Добавить().Таблица;
		КопироватьДанныеФормы(ПромТаблицаДопСтрокРаздела, ТаблицаДопСтрокГруппы241);
		СтруктураДанныхДопСтрокРаздела.Вставить(Форма.СтруктураРеквизитовФормы.мИдГруппы241, ТаблицаДопСтрокГруппы241);
		
		ПромТаблицаДопСтрокРаздела = Неопределено;
		Форма.мСтруктураМногострочныхРазделов.Свойство(Форма.СтруктураРеквизитовФормы.мИдГруппы242, ПромТаблицаДопСтрокРаздела);
		ПромТаблицаДопСтрокРаздела = Форма[ПромТаблицаДопСтрокРаздела];
		ТаблицаДопСтрокГруппы242 = Форма["Хранилище" + Форма.СтруктураРеквизитовФормы.мИдГруппы242].Добавить().Таблица;
		КопироватьДанныеФормы(ПромТаблицаДопСтрокРаздела, ТаблицаДопСтрокГруппы242);
		СтруктураДанныхДопСтрокРаздела.Вставить(Форма.СтруктураРеквизитовФормы.мИдГруппы242, ТаблицаДопСтрокГруппы242);
		
		ПромТаблицаДопСтрокРаздела = Неопределено;
		Форма.мСтруктураМногострочныхРазделов.Свойство(Форма.СтруктураРеквизитовФормы.мИдГруппы25, ПромТаблицаДопСтрокРаздела);
		ПромТаблицаДопСтрокРаздела = Форма[ПромТаблицаДопСтрокРаздела];
		ТаблицаДопСтрокГруппы25 = Форма["Хранилище" + Форма.СтруктураРеквизитовФормы.мИдГруппы25].Добавить().Таблица;
		КопироватьДанныеФормы(ПромТаблицаДопСтрокРаздела, ТаблицаДопСтрокГруппы25);
		СтруктураДанныхДопСтрокРаздела.Вставить(Форма.СтруктураРеквизитовФормы.мИдГруппы25, ТаблицаДопСтрокГруппы25);
		
		ПромТаблицаДопСтрокРаздела = Неопределено;
		Форма.мСтруктураМногострочныхРазделов.Свойство(Форма.СтруктураРеквизитовФормы.мИдГруппы26, ПромТаблицаДопСтрокРаздела);
		ПромТаблицаДопСтрокРаздела = Форма[ПромТаблицаДопСтрокРаздела];
		ТаблицаДопСтрокГруппы26 = Форма["Хранилище" + Форма.СтруктураРеквизитовФормы.мИдГруппы26].Добавить().Таблица;
		КопироватьДанныеФормы(ПромТаблицаДопСтрокРаздела, ТаблицаДопСтрокГруппы26);
		СтруктураДанныхДопСтрокРаздела.Вставить(Форма.СтруктураРеквизитовФормы.мИдГруппы26, ТаблицаДопСтрокГруппы26);
		
	КонецЕсли;

	Если ТаблицаСтраницРаздела.Количество() = 0 Тогда
		// Создаем исходную таблицу значений многостраничных разделов.
		СтрТаблицаСтраницы = ТаблицаСтраницРаздела.Добавить();
		СтрТаблицаСтраницы.АктивнаяСтраница = Истина;
		СтрТаблицаСтраницы.АвтоматическоеПредставление = Истина;
	КонецЕсли;

	СтрТаблицаСтраницы = ТаблицаСтраницРаздела.НайтиСтроки(Новый Структура("АктивнаяСтраница", Истина));

	Если СтрТаблицаСтраницы.Количество() > 0 Тогда
		
		СтрТаблицаСтраницы = СтрТаблицаСтраницы[0];
		
		Если ПустаяСтрока(СтрТаблицаСтраницы.Представление) 
		 ИЛИ (СтрТаблицаСтраницы.Представление = "Новая страница") Тогда
			СтрТаблицаСтраницы.Представление = "Новая страница";
		КонецЕсли;
		
		Если СтрТаблицаСтраницы.Данные.Количество() > 0 Тогда
			СтрТаблицаСтраницы.Данные[0].Значение = СтруктураДанныхТекущейТаблицы;
		Иначе
			СтрТаблицаСтраницы.Данные.Добавить(СтруктураДанныхТекущейТаблицы);
		КонецЕсли;
		
		Если ИмяТекущейСтраницыПанели = "Раздел2" Тогда
			Если СтрТаблицаСтраницы.ДанныеДопСтрок.Количество() > 0 Тогда
				СтрТаблицаСтраницы.ДанныеДопСтрок[0].Значение = СтруктураДанныхДопСтрокРаздела;
			Иначе
				СтрТаблицаСтраницы.ДанныеДопСтрок.Добавить(СтруктураДанныхДопСтрокРаздела, "ДанныеФормыКоллекцияТаблицаДопСтрокРаздела");
			КонецЕсли;
		КонецЕсли;
		
		СтрТаблицаСтраницы.АктивнаяСтраница = Ложь;
		СтрНоваяСтраница = ТаблицаСтраницРаздела.Добавить();
		СтрНоваяСтраница.Представление    = "Новая страница";
		СтрНоваяСтраница.АктивнаяСтраница = Истина;
		
		// Очищаем показатели текущей страницы и в случае, если страница содержит
		// многострочный раздел, удаляем все дополнительно созданные строки.
		ОчиститьТабличноеПоле(Форма, ИмяТекущейСтраницыПанели);
		
		// Выполняем расчет показателей добавленной страницы.
		Расчет(Форма, ИмяТекущейСтраницыПанели);
		
		Модифицированность = Истина;
	КонецЕсли;
	
	УстановитьЦветФонаЯчейки(Форма, , , ИмяТекущейСтраницыПанели);
	
КонецПроцедуры

&НаКлиенте
Процедура Очистить(ВыполняемоеОповещение = Неопределено) Экспорт
	
	РегламентированнаяОтчетностьКлиент.Очистить(ЭтаФорма, ВыполняемоеОповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура СпециальныеОперацииПослеОчисткиЛистаНаКлиенте(ИмяСтраницы, УдалениДопЭкз = Истина) Экспорт
	
	СпециальныеОперацииПослеОчисткиЛиста(ЭтаФорма, ИмяСтраницы, УдалениДопЭкз);
	
КонецПроцедуры

&НаСервере
Процедура СпециальныеОперацииПослеОчисткиЛистаНаСервере(ИмяСтраницы, УдалениДопЭкз = Истина) Экспорт
	
	СпециальныеОперацииПослеОчисткиЛиста(ЭтаФорма, ИмяСтраницы, УдалениДопЭкз);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СпециальныеОперацииПослеОчисткиЛиста(Форма, ИмяСтраницы, УдалениДопЭкз) Экспорт
	
	Расчет(Форма, ИмяСтраницы);
	
КонецПроцедуры

&НаСервере
Процедура ФормироватьСтруктуруСвойствСтраниц() Экспорт

	мСвойстваРазделовДекларации.ПолучитьЭлементы().Очистить();
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	
	СтрокаУровня1.ИмяСтраницы                   = "Титульный";
	СтрокаУровня1.СохранятьМногострКакТЗ        = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе     = Ложь;
	СтрокаУровня1.МаксКолвоЭкз                  = 0;
	СтрокаУровня1.ОчищатьРаздел                 = Ложь;
	СтрокаУровня1.ИмяПредставления              = "";
	СтрокаУровня1.ПредставлениеДанных           = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки   = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым = Ложь;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	
	СтрокаУровня1.ИмяСтраницы                   = "Раздел1";
	СтрокаУровня1.СохранятьМногострКакТЗ        = Истина;
	СтрокаУровня1.МногостраничностьВРазделе     = Истина;
	СтрокаУровня1.МаксКолвоЭкз                  = 0;
	СтрокаУровня1.ОчищатьРаздел                 = Истина;
	СтрокаУровня1.ИмяПредставления              = "";
	СтрокаУровня1.ПредставлениеДанных           = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки   = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым = Ложь;
	
	НовСтр = СтрокаУровня1.МногострочностьВРазделе.Добавить();
	НовСтр.ИдГруппы = СтруктураРеквизитовФормы.мИдГруппы1;
	НовСтр.Область = "МногострочнаяЧасть";
	НовСтр.ВысотаСтроки = 6;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	
	СтрокаУровня1.ИмяСтраницы                   = "Раздел2";
	СтрокаУровня1.СохранятьМногострКакТЗ        = Истина;
	СтрокаУровня1.МногостраничностьВРазделе     = Истина;
	СтрокаУровня1.МаксКолвоЭкз                  = 0;
	СтрокаУровня1.ОчищатьРаздел                 = Истина;
	СтрокаУровня1.ИмяПредставления              = "";
	СтрокаУровня1.ПредставлениеДанных           = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки   = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым = Ложь;
	
	НовСтр = СтрокаУровня1.МногострочностьВРазделе.Добавить();
	НовСтр.ИдГруппы = СтруктураРеквизитовФормы.мИдГруппы21;
	НовСтр.Область = "МногострочнаяЧасть21";
	НовСтр.ВысотаСтроки = 2;
	
	НовСтр = СтрокаУровня1.МногострочностьВРазделе.Добавить();
	НовСтр.ИдГруппы = СтруктураРеквизитовФормы.мИдГруппы22;
	НовСтр.Область = "МногострочнаяЧасть22";
	НовСтр.ВысотаСтроки = 2;
	
	НовСтр = СтрокаУровня1.МногострочностьВРазделе.Добавить();
	НовСтр.ИдГруппы = СтруктураРеквизитовФормы.мИдГруппы241;
	НовСтр.Область = "МногострочнаяЧасть241";
	НовСтр.ВысотаСтроки = 2;
	
	НовСтр = СтрокаУровня1.МногострочностьВРазделе.Добавить();
	НовСтр.ИдГруппы = СтруктураРеквизитовФормы.мИдГруппы242;
	НовСтр.Область = "МногострочнаяЧасть242";
	НовСтр.ВысотаСтроки = 2;
	
	НовСтр = СтрокаУровня1.МногострочностьВРазделе.Добавить();
	НовСтр.ИдГруппы = СтруктураРеквизитовФормы.мИдГруппы25;
	НовСтр.Область = "МногострочнаяЧасть25";
	НовСтр.ВысотаСтроки = 2;
	
	НовСтр = СтрокаУровня1.МногострочностьВРазделе.Добавить();
	НовСтр.ИдГруппы = СтруктураРеквизитовФормы.мИдГруппы26;
	НовСтр.Область = "МногострочнаяЧасть26";
	НовСтр.ВысотаСтроки = 2;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	
	СтрокаУровня1.ИмяСтраницы                   = "Раздел3";
	СтрокаУровня1.СохранятьМногострКакТЗ        = Истина;
	СтрокаУровня1.МногостраничностьВРазделе     = Истина;
	СтрокаУровня1.МаксКолвоЭкз                  = 0;
	СтрокаУровня1.ОчищатьРаздел                 = Истина;
	СтрокаУровня1.ИмяПредставления              = "";
	СтрокаУровня1.ПредставлениеДанных           = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки   = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым = Ложь;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	
	СтрокаУровня1.ИмяСтраницы                   = "Приложение1";
	СтрокаУровня1.СохранятьМногострКакТЗ        = Истина;
	СтрокаУровня1.МногостраничностьВРазделе     = Истина;
	СтрокаУровня1.МаксКолвоЭкз                  = 0;
	СтрокаУровня1.ОчищатьРаздел                 = Истина;
	СтрокаУровня1.ИмяПредставления              = "";
	СтрокаУровня1.ПредставлениеДанных           = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки   = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым = Ложь;
	
	НовСтр = СтрокаУровня1.МногострочностьВРазделе.Добавить();
	НовСтр.ИдГруппы = СтруктураРеквизитовФормы.мИдГруппы101;
	НовСтр.Область = "МногострочнаяЧасть";
	НовСтр.ВысотаСтроки = 2;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	
	СтрокаУровня1.ИмяСтраницы                   = "Приложение21";
	СтрокаУровня1.СохранятьМногострКакТЗ        = Истина;
	СтрокаУровня1.МногостраничностьВРазделе     = Ложь;
	СтрокаУровня1.МаксКолвоЭкз                  = 0;
	СтрокаУровня1.ОчищатьРаздел                 = Истина;
	СтрокаУровня1.ИмяПредставления              = "";
	СтрокаУровня1.ПредставлениеДанных           = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки   = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым = Ложь;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	
	СтрокаУровня1.ИмяСтраницы                   = "Приложение22";
	СтрокаУровня1.СохранятьМногострКакТЗ        = Истина;
	СтрокаУровня1.МногостраничностьВРазделе     = Истина;
	СтрокаУровня1.МаксКолвоЭкз                  = 0;
	СтрокаУровня1.ОчищатьРаздел                 = Истина;
	СтрокаУровня1.ИмяПредставления              = "";
	СтрокаУровня1.ПредставлениеДанных           = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки   = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым = Ложь;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	
	СтрокаУровня1.ИмяСтраницы                   = "Приложение3";
	СтрокаУровня1.СохранятьМногострКакТЗ        = Истина;
	СтрокаУровня1.МногостраничностьВРазделе     = Истина;
	СтрокаУровня1.МаксКолвоЭкз                  = 0;
	СтрокаУровня1.ОчищатьРаздел                 = Истина;
	СтрокаУровня1.ИмяПредставления              = "";
	СтрокаУровня1.ПредставлениеДанных           = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки   = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым = Ложь;
	
	НовСтр = СтрокаУровня1.МногострочностьВРазделе.Добавить();
	НовСтр.ИдГруппы = СтруктураРеквизитовФормы.мИдГруппы103;
	НовСтр.Область = "МногострочнаяЧасть";
	НовСтр.ВысотаСтроки = 8;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	
	СтрокаУровня1.ИмяСтраницы                   = "Приложение4";
	СтрокаУровня1.СохранятьМногострКакТЗ        = Истина;
	СтрокаУровня1.МногостраничностьВРазделе     = Истина;
	СтрокаУровня1.МаксКолвоЭкз                  = 0;
	СтрокаУровня1.ОчищатьРаздел                 = Истина;
	СтрокаУровня1.ИмяПредставления              = "";
	СтрокаУровня1.ПредставлениеДанных           = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки   = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым = Ложь;
	
	НовСтр = СтрокаУровня1.МногострочностьВРазделе.Добавить();
	НовСтр.ИдГруппы = СтруктураРеквизитовФормы.мИдГруппы104;
	НовСтр.Область = "МногострочнаяЧасть";
	НовСтр.ВысотаСтроки = 8;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ИдентификаторыМногострочныхГрупп(Форма)
	
	ИдГрупп = Новый Структура;
	ИдГрупп.Вставить("мИдГруппы1",   Форма.СтруктураРеквизитовФормы.мИдГруппы1);
	ИдГрупп.Вставить("мИдГруппы21",  Форма.СтруктураРеквизитовФормы.мИдГруппы21);
	ИдГрупп.Вставить("мИдГруппы22",  Форма.СтруктураРеквизитовФормы.мИдГруппы22);
	ИдГрупп.Вставить("мИдГруппы241", Форма.СтруктураРеквизитовФормы.мИдГруппы241);
	ИдГрупп.Вставить("мИдГруппы242", Форма.СтруктураРеквизитовФормы.мИдГруппы242);
	ИдГрупп.Вставить("мИдГруппы25",  Форма.СтруктураРеквизитовФормы.мИдГруппы25);
	ИдГрупп.Вставить("мИдГруппы26",  Форма.СтруктураРеквизитовФормы.мИдГруппы26);
	ИдГрупп.Вставить("мИдГруппы101", Форма.СтруктураРеквизитовФормы.мИдГруппы101);
	ИдГрупп.Вставить("мИдГруппы103", Форма.СтруктураРеквизитовФормы.мИдГруппы103);
	ИдГрупп.Вставить("мИдГруппы104", Форма.СтруктураРеквизитовФормы.мИдГруппы104);
	
	Возврат ИдГрупп;
	
КонецФункции

&НаСервере
Функция ОпределитьТабличноеПолеПоИдМногострочногоРазделаНаСервере(ИдГруппы) Экспорт
	
	ИдГрупп = ИдентификаторыМногострочныхГрупп(ЭтаФорма);
	
	Возврат ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИдГруппы, ИдГрупп);
	
КонецФункции

&НаКлиенте
Функция ОпределитьТабличноеПолеПоИдМногострочногоРазделаНаКлиенте(ИдГруппы) Экспорт
	
	ИдГрупп = ИдентификаторыМногострочныхГрупп(ЭтаФорма);
	
	Возврат ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИдГруппы, ИдГрупп);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИдГруппы, ИдГрупп)
	
	Перем ТекТабличноеПоле;
	
	Если ИдГруппы = ИдГрупп.мИдГруппы1 Тогда
		ТекТабличноеПоле = "Раздел1";
	ИначеЕсли ИдГруппы = ИдГрупп.мИдГруппы21
		ИЛИ ИдГруппы = ИдГрупп.мИдГруппы22
		ИЛИ ИдГруппы = ИдГрупп.мИдГруппы241
		ИЛИ ИдГруппы = ИдГрупп.мИдГруппы242
		ИЛИ ИдГруппы = ИдГрупп.мИдГруппы25
		ИЛИ ИдГруппы = ИдГрупп.мИдГруппы26 Тогда
		ТекТабличноеПоле = "Раздел2";
	ИначеЕсли ИдГруппы = ИдГрупп.мИдГруппы101 Тогда
		ТекТабличноеПоле = "Приложение1";
	ИначеЕсли ИдГруппы = ИдГрупп.мИдГруппы103 Тогда
		ТекТабличноеПоле = "Приложение3";
	ИначеЕсли ИдГруппы = ИдГрупп.мИдГруппы104 Тогда
		ТекТабличноеПоле = "Приложение4";
	КонецЕсли;
	
	Возврат ТекТабличноеПоле;
	
КонецФункции

&НаСервере
Функция ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ИмяЛиста = Неопределено) Экспорт
	
	ИдГрупп = ИдентификаторыМногострочныхГрупп(ЭтаФорма);
	
	Возврат ОпределитьИдМногострочногоРазделаПоАктивнойСтранице(ЭтаФорма, ИмяЛиста, , ИдГрупп);
	
КонецФункции

&НаКлиенте
Функция ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаКлиенте(ИмяЛиста = Неопределено) Экспорт
	
	ИдГрупп = ИдентификаторыМногострочныхГрупп(ЭтаФорма);
	
	Возврат ОпределитьИдМногострочногоРазделаПоАктивнойСтранице(ЭтаФорма, ИмяЛиста, , ИдГрупп);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ОпределитьИдМногострочногоРазделаПоАктивнойСтранице(Форма, ИмяЛиста = Неопределено, ТекущаяСтраница = Неопределено, ИдГрупп)
	
	Перем ИмяГруппы;
	
	Если ИмяЛиста = Неопределено Тогда
		ИмяТекущейСтраницыПанели = ТекущаяСтраница.Имя;
	Иначе
		ИмяТекущейСтраницыПанели = ИмяЛиста;
	КонецЕсли;
	
	Если ИмяТекущейСтраницыПанели = "Раздел1" Тогда
		ИмяГруппы = ИдГрупп.мИдГруппы1;
	ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел2" Тогда
		ИмяГруппы = РазделТекущейОбласти(Форма, Форма.Элементы.ТабличныйДокумент.ТекущаяОбласть);
	ИначеЕсли ИмяТекущейСтраницыПанели = "Приложение1" Тогда
		ИмяГруппы = ИдГрупп.мИдГруппы101;
	ИначеЕсли ИмяТекущейСтраницыПанели = "Приложение3" Тогда
		ИмяГруппы = ИдГрупп.мИдГруппы103;
	ИначеЕсли ИмяТекущейСтраницыПанели = "Приложение4" Тогда
		ИмяГруппы = ИдГрупп.мИдГруппы104;
	КонецЕсли;
	
	Возврат ИмяГруппы;
	
КонецФункции

&НаСервере
Функция СобратьДанныеТекущегоТаблПоляНаСервере(ИмяТабличногоПоля) Экспорт
	
	Возврат СобратьДанныеТекущегоТаблПоля(ЭтаФорма, ИмяТабличногоПоля);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СобратьДанныеТекущегоТаблПоля(Форма, ИмяТабличногоПоля)
	
	ТабличноеПоле = Форма[ИмяТабличногоПоля];
	
	СтруктураДанныхПоля = Новый Структура;
	
	Для Инд = 0 По ТабличноеПоле.Области.Количество() - 1 Цикл
		ТекущаяОбласть = ТабличноеПоле.Области[Инд];
		
		Если НЕ Тип(ТекущаяОбласть) = Тип("РисунокТабличногоДокумента")
			И Не ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТекущаяОбласть.СодержитЗначение <> Истина Тогда
			Продолжить;
		КонецЕсли;
		
		ИмяПоказателя      = ТекущаяОбласть.Имя;
		ЗначениеПоказателя = ТекущаяОбласть.Значение;
		
		СтруктураДанныхПоля.Вставить(ИмяПоказателя, ЗначениеПоказателя);
	
	КонецЦикла;
	
	Возврат СтруктураДанныхПоля;
	
КонецФункции

&НаСервере
Процедура ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставленияПоРазделуНаСервере(Знач ИмяРаздела) Экспорт
	
	Возврат;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставленияПоРазделуНаКлиенте(Знач ИмяРаздела) Экспорт
	
	Возврат;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнениеЗначенийВКвадратикахНаСервере(Знач ИмяСтраницы) Экспорт
	
	Возврат;
	
КонецПроцедуры

&НаСервере
Функция ОбновитьПеременныеМодуляНаСервере(ИмяПоказателя, ЗначениеПоказателя) Экспорт
	
	ИзмененияПроизошли = Истина;
	
	ИмяТекТабличногоПоля = "ТабличныйДокумент";
	ТекТабличноеПоле     = ЭтаФорма[ИмяТекТабличногоПоля];
	
	Попытка
		ТекТабличноеПоле.Области[ИмяПоказателя].Значение = ЗначениеПоказателя;
		Если Лев(ИмяПоказателя, 1) = "_" Тогда
			Возврат ИзмененияПроизошли;
		КонецЕсли;
	Исключение
		ИзмененияПроизошли = Ложь;
	КонецПопытки;
	
	Возврат ИзмененияПроизошли;
	
КонецФункции

&НаСервере
Процедура ПоказатьПериод()
	
	ЗаполнитьПериодОтчета(ЭтаФорма);
	
	СтруктураРеквизитовФормы.СтрПериодОтчета = ПредставлениеПериода(
		НачалоДня(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета),
		КонецДня(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета), "ФП = Истина");
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДатуВЯчейкахНаСервере() Экспорт
	
	ЗаполнитьДатуВЯчейках(ЭтаФорма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьДатуВЯчейках(Форма)
	
	Форма.ТабличныйДокумент.Области.ДатаПодписи.Значение = Форма.ДатаПодписи;
	
КонецПроцедуры

&НаСервере
Процедура УправлениеЛистамиНаСервере(ТипНП = Неопределено) Экспорт
	
	УправлениеЛистами(ЭтаФорма, ТипНП);
	
КонецПроцедуры

&НаКлиенте
Процедура УправлениеЛистамиНаКлиенте(ТипНП = Неопределено) Экспорт
	
	УправлениеЛистами(ЭтаФорма, ТипНП);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеЛистами(Форма, ТипНП = Неопределено)
	
	Возврат;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСведенияОбОрганизацииНаСервере(ВПрограммеИзмененаДатаПодписи = Ложь)
	
	ЗаполнитьСведенияОбОрганизации(ЭтаФорма, ВПрограммеИзмененаДатаПодписи);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьСведенияОбОрганизации(Форма, ВПрограммеИзмененаДатаПодписи = Ложь)
	
	Если НЕ ВПрограммеИзмененаДатаПодписи Тогда
		
		СтрокаСведений = "ИННЮЛ, КППЮЛ, НаимЮЛПол, КодНО, НаимНО, ТелОрганизации, ФИО";
		
		СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(
			Форма.СтруктураРеквизитовФормы.Организация, Форма.ДатаПодписи, СтрокаСведений);
		
		ИНН = СокрЛП(СведенияОбОрганизации.ИННЮЛ);
		КПП = СокрЛП(СведенияОбОрганизации.КППЮЛ);
		
		Форма.ТабличныйДокумент.Области.ИНН.Значение = ИНН;
		Форма.ТабличныйДокумент.Области.КПП.Значение = КПП;
		
		КодНО = СведенияОбОрганизации.КодНО;
		Для Инд = СтрДлина(СведенияОбОрганизации.КодНО) + 1 По 4 Цикл
			КодНО = " " + КодНО;
		КонецЦикла;
		Форма.ТабличныйДокумент.Области.НалоговыйОрган.Значение = КодНО;
		
		Если Форма.СтруктураРеквизитовФормы.ИП Тогда
			НаименованиеОрганизации = СведенияОбОрганизации.ФИО;
		Иначе
			НаименованиеОрганизации = СведенияОбОрганизации.НаимЮлПол;
		КонецЕсли;
		Форма.ТабличныйДокумент.Области.НаимОрг.Значение = СокрЛП(НаименованиеОрганизации);
		
		Форма.СтруктураРеквизитовФормы.НачальноеЗначениеНаимОрганизации = Форма.ТабличныйДокумент.Области.НаимОрг.Значение;
		
		Форма.ТабличныйДокумент.Области.ТелОрганизации.Значение = СокрЛП(СведенияОбОрганизации.ТелОрганизации);
						
		ЗаполнитьДатуВЯчейках(Форма);
		
	КонецЕсли;
	
	РегламентированнаяОтчетность.ПолучитьЗначениеОКВЭД(Форма.ДатаПодписи, Форма.СтруктураРеквизитовФормы);
	РегламентированнаяОтчетностьКлиентСервер.УстановитьЗначениеОКВЭД(Форма.ДатаПодписи,
																	 Форма.СтруктураРеквизитовФормы,
																	 Форма.ТабличныйДокумент.Области.ОКВЭД.Значение);
	
	Форма.ЗаполнитьСведенияОПодписантах();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСведенияОПодписантах() Экспорт
	
	ТипПодписанта = "1";
	Подписант = "";
	НаименованиеОрганизацииПредставителя = "";
	ДокументПредставителя = "";
	
	// Выясним, есть ли представитель.
	КодНО = СокрЛП(ТабличныйДокумент.Области.НалоговыйОрган.Значение);
	КПП   = СокрЛП(ТабличныйДокумент.Области.КПП.Значение);
	
	СведенияОПредставителе = РегламентированнаяОтчетностьВызовСервера.ПолучитьПоКодамСведенияОПредставителе(
		СтруктураРеквизитовФормы.Организация, КодНО, КПП);
	
	ТипПодписанта = СведенияОПредставителе.ТипПодписанта;
	
	Если ТипПодписанта = "1" Тогда
		// Представителя нет.
		Если РегламентированнаяОтчетностьВызовСервера.ЭтоЮридическоеЛицо(СтруктураРеквизитовФормы.Организация) Тогда
			// Подписант - руководитель.
			СведенияОбОрганизации
				= РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(
				СтруктураРеквизитовФормы.Организация, ДатаПодписи, "ФИОРук, ФИО");
			Подписант = СокрЛП(?(ЗначениеЗаполнено(СведенияОбОрганизации.ФИОРук),
				СведенияОбОрганизации.ФИОРук, СведенияОбОрганизации.ФИО));
		КонецЕсли;
	Иначе
		// Есть представитель, подписант - он.
		Подписант = СведенияОПредставителе.ФИОПредставителя;
		НаименованиеОрганизацииПредставителя = СведенияОПредставителе.НаименованиеОрганизацииПредставителя;
		ДокументПредставителя = СведенияОПредставителе.ДокументПредставителя;
	КонецЕсли;
	
	ТабличныйДокумент.Области.ПрПодп.Значение = ТипПодписанта;
	ТабличныйДокумент.Области.ОргПодписант.Значение = Подписант;
	ТабличныйДокумент.Области.ОргУп.Значение = НаименованиеОрганизацииПредставителя;
	ТабличныйДокумент.Области.ДокУпПред.Значение = ДокументПредставителя;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораСтраниц(ВариантВыбора)
	Перем ТекущийРазделОтчетаСокрНаим;
	Перем НомерСтраницыРазделаОтчета;
	
	// Запоминаем текущий раздел, установленный в дереве разделов отчета.
	Если НЕ Элементы.РазделыОтчета.ТекущиеДанные = Неопределено Тогда
		ТекущийРазделОтчетаСокрНаим = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
		НомерСтраницыРазделаОтчета  = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета;
	КонецЕсли;
	
	мПараметры = Новый Структура;
	мПараметры.Вставить("ПроверкаСоотношений", Истина);
	мПараметры.Вставить("Автосохранение", Ложь);
	мПараметры.Вставить("ИмеетсяРеквизитДеревоВыбранныхСтраниц", Истина);
	
	Если СтруктураРеквизитовФормы.ДоступенМеханизмПечатиРеглОтчетностиСДвухмернымШтрихкодомPDF417 Тогда
		мПараметры.Вставить("РазрешитьВстроеннуюПечать", Истина);
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ФлажокОтклАвтоРасчет", СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);
	ПараметрыФормы.Вставить("мПечатьБезШтрихкодаРазрешена", СтруктураРеквизитовФормы.мПечатьБезШтрихкодаРазрешена);
	ПараметрыФормы.Вставить("мСчетчикСтраниц", СтруктураРеквизитовФормы.мСчетчикСтраниц);
	ПараметрыФормы.Вставить("мАвтоВыборКодов", СтруктураРеквизитовФормы.мАвтоВыборКодов);
	ПараметрыФормы.Вставить("мПроверятьСоотношенияПриПечатиИВыгрузки", СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки);
	ПараметрыФормы.Вставить("мПараметры", мПараметры);
	
	ФормаНастройкиОтчета = РегламентированнаяОтчетностьКлиент.ПолучитьОбщуюФормуПоИмени("НастройкиОтчета", ПараметрыФормы, ЭтаФорма);
	
	мДеревоВыбранныхСтраниц.ПолучитьЭлементы().Очистить();
	
	КопироватьДанныеФормы(мДеревоСтраницОтчета, ФормаНастройкиОтчета.Дерево);
	
	ЗначениеАвторасчета = СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет;
	
	ДополнительныеПараметры = Новый Структура(
		"ЗначениеАвторасчета, НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим",
		ЗначениеАвторасчета, НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим);
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ОткрытьФормуВыбораСтраницЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ФормаНастройкиОтчета.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
	ФормаНастройкиОтчета.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	ФормаНастройкиОтчета.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораСтраницЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	ЗначениеАвторасчета = ДополнительныеПараметры.ЗначениеАвторасчета;
	НомерСтраницыРазделаОтчета = ДополнительныеПараметры.НомерСтраницыРазделаОтчета;
	ТекущийРазделОтчетаСокрНаим = ДополнительныеПараметры.ТекущийРазделОтчетаСокрНаим;
	
	РегламентированнаяОтчетностьКлиентСервер.ПоказатьКнопкиПечати(ЭтаФорма);
	
	Модифицированность = Истина;
	
	флЗначенияИдентичны = Истина;
	
	Для Индекс = 0 По мДеревоСтраницОтчета.ПолучитьЭлементы().Количество() - 1 Цикл
		
		Если НЕ мДеревоСтраницОтчета.ПолучитьЭлементы()[Индекс].ПоказатьСтраницу
			= мДеревоВыбранныхСтраниц.ПолучитьЭлементы()[Индекс].ПоказатьСтраницу Тогда
			флЗначенияИдентичны = Ложь;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЗначениеАвторасчета <> СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Тогда
		
		Если СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет = Ложь Тогда
			
			ДополнительныеПараметры = Новый Структура(
				"НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим, флЗначенияИдентичны",
			НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим, флЗначенияИдентичны);
			ОписаниеОповещения = Новый ОписаниеОповещения(
				"ВопросПерерасчетВсехРассчитываемыхПоказателейЗавершение", ЭтотОбъект, ДополнительныеПараметры);
			ТекстВопроса = НСтр("ru='Будет произведен перерасчет всех рассчитываемых показателей. Продолжить?'");
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
			
		Иначе
			
			#Если ВебКлиент Тогда
				ИзменитьТаблицуВариантовЗаполненияНаСервере();
			#Иначе
				РегламентированнаяОтчетностьКлиентСервер.ИзменитьТаблицуВариантовЗаполнения(
					ЭтаФорма, НЕ СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);
			#КонецЕсли
			
			УстановитьДоступностьОбластей(ЭтаФорма, ТекущийРазделОтчетаСокрНаим);
			
			ДопПараметры = Новый Структура(
				"НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим, флЗначенияИдентичны",
			НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим, флЗначенияИдентичны);
			ПослеОткрытияФормыВыбораСтраниц(ДопПараметры);
			
		КонецЕсли;
		
	Иначе
		
		ДопПараметры = Новый Структура(
			"НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим, флЗначенияИдентичны",
		НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим, флЗначенияИдентичны);
		ПослеОткрытияФормыВыбораСтраниц(ДопПараметры);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПерерасчетВсехРассчитываемыхПоказателейЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	НомерСтраницыРазделаОтчета = ДополнительныеПараметры.НомерСтраницыРазделаОтчета;
	ТекущийРазделОтчетаСокрНаим = ДополнительныеПараметры.ТекущийРазделОтчетаСокрНаим;
	флЗначенияИдентичны = ДополнительныеПараметры.флЗначенияИдентичны;
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет = Истина;
		Возврат;
	КонецЕсли;
	
	РасчетНаСервере();
	
	#Если ВебКлиент Тогда
		ИзменитьТаблицуВариантовЗаполненияНаСервере();
	#Иначе
		РегламентированнаяОтчетностьКлиентСервер.ИзменитьТаблицуВариантовЗаполнения(
		ЭтаФорма, НЕ СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);
	#КонецЕсли
	
	УстановитьДоступностьОбластей(ЭтаФорма, ТекущийРазделОтчетаСокрНаим);
	
	ДопПараметры = Новый Структура(
		"НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим, флЗначенияИдентичны",
		НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим, флЗначенияИдентичны);
	ПослеОткрытияФормыВыбораСтраниц(ДопПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеОткрытияФормыВыбораСтраниц(ДополнительныеПараметры)
	
	НомерСтраницыРазделаОтчета = ДополнительныеПараметры.НомерСтраницыРазделаОтчета;
	ТекущийРазделОтчетаСокрНаим = ДополнительныеПараметры.ТекущийРазделОтчетаСокрНаим;
	флЗначенияИдентичны = ДополнительныеПараметры.флЗначенияИдентичны;
	
	РегламентированнаяОтчетностьКлиент.ПоказатьСтраницыОтчетаНаКлиенте(ЭтаФорма);
	
	Если НЕ флЗначенияИдентичны Тогда
		
		СформироватьДеревоРазделовОтчетаНаКлиенте();
		
		Если НЕ ТекущийРазделОтчетаСокрНаим = Неопределено Тогда
			
			НайденнаяСтрока = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(
				РазделыОтчета.ПолучитьЭлементы(), "КолонкаРазделыОтчетаСокрНаим", ТекущийРазделОтчетаСокрНаим);
			
			Если НЕ НайденнаяСтрока = Неопределено И НЕ НомерСтраницыРазделаОтчета = Неопределено
				И НайденнаяСтрока.ПолучитьЭлементы().Количество() > 0 Тогда
				
				НайденнаяСтрока = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(
				НайденнаяСтрока.ПолучитьЭлементы(), "КолонкаНомерСтраницыРазделаОтчета", НомерСтраницыРазделаОтчета);
				
			КонецЕсли;
			
			Если НЕ НайденнаяСтрока = Неопределено Тогда
				
				Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяСтрока.ПолучитьИдентификатор();
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьТаблицуВариантовЗаполненияНаСервере()
	
	РегламентированнаяОтчетностьКлиентСервер.ИзменитьТаблицуВариантовЗаполнения(
		ЭтаФорма, НЕ СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);
	
КонецПроцедуры

&НаСервере
Процедура ВывестиНаПечатьЛист(Парам1, ОбщиеРеквизитыРазделов, СтрПоля = Неопределено)
	
	ПрефиксИменМакетов = "ПечатныйБланк2016Кв2_";
	
	СоответствиеРазделовМакетам = Новый Соответствие;
	
	СоответствиеРазделовМакетам.Вставить("Титульный",    ПрефиксИменМакетов + "Титульный");
	СоответствиеРазделовМакетам.Вставить("Раздел1",      ПрефиксИменМакетов + "Раздел1");
	СоответствиеРазделовМакетам.Вставить("Раздел3",      ПрефиксИменМакетов + "Раздел3");
	СоответствиеРазделовМакетам.Вставить("Приложение1",  ПрефиксИменМакетов + "Приложение1");
	СоответствиеРазделовМакетам.Вставить("Приложение21", ПрефиксИменМакетов + "Приложение21");
	СоответствиеРазделовМакетам.Вставить("Приложение22", ПрефиксИменМакетов + "Приложение22");
	СоответствиеРазделовМакетам.Вставить("Приложение3",  ПрефиксИменМакетов + "Приложение3");
	СоответствиеРазделовМакетам.Вставить("Приложение4",  ПрефиксИменМакетов + "Приложение4");
	
	МЧБРаздела = СоответствиеРазделовМакетам[Парам1.ИмяСтраницы];
	
	МакетМЧБ = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(МЧБРаздела);
	МакетМЧБ.ПолеСверху = 5;
	МакетМЧБ.ПолеСправа = 5;
	МакетМЧБ.ПолеСнизу  = 5;
	МакетМЧБ.ПолеСлева  = 5;
	
	ВремПоля = Новый Структура(СтрПоля);
	
	ИдГруппы = ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(Парам1.ИмяСтраницы);
	
	Если ИдГруппы <> Неопределено Тогда
		
		ИсхКолвоСтрокБлока = 0;
		
		// Определение исходного количества строк на листе МЧБ.
		Если Парам1.ИмяСтраницы = "Раздел1" Тогда
			ИсхКолвоСтрокБлока = 7;
		ИначеЕсли Парам1.ИмяСтраницы = "Приложение1" Тогда
			ИсхКолвоСтрокБлока = 22;
		ИначеЕсли Парам1.ИмяСтраницы = "Приложение3"
			ИЛИ Парам1.ИмяСтраницы = "Приложение4" Тогда
			ИсхКолвоСтрокБлока = 3;
		КонецЕсли;
		
		СохрТабличныйДокумент = Новый ТабличныйДокумент;
		СохрТабличныйДокумент.Вывести(ТабличныйДокумент);
		
		ТекКолвоСтрокБлока = ЭтаФорма[мСтруктураМногострочныхРазделов[ИдГруппы]].Количество();
		Если ТекКолвоСтрокБлока > 0 И ИсхКолвоСтрокБлока > 0 Тогда
			//Добавляли строки - значит будут доп. листы МЧБ
			//Определение общего количества листов МЧБ
			КолвоЛистовМЧБ = Цел(ТекКолвоСтрокБлока / ИсхКолвоСтрокБлока);
			КолвоСтрокНаПоследнемЛисте = ТекКолвоСтрокБлока % ИсхКолвоСтрокБлока;
			Если КолвоСтрокНаПоследнемЛисте <> 0 Тогда
				КолвоЛистовМЧБ = КолвоЛистовМЧБ + 1;	
			КонецЕсли;
			
			//заполнение строки имен показателей (для проверки перед переименованием)
			СтрИменаПоказателей = "";
			
			Колонки = ДанныеФормыВЗначение(ЭтаФорма[мСтруктураМногострочныхРазделов[ИдГруппы]], Тип("ТаблицаЗначений")).Колонки;
			
			Для каждого КолонкаСтруктуры Из Колонки Цикл
				СтрИменаПоказателей = СтрИменаПоказателей + КолонкаСтруктуры.Имя;
			КонецЦикла;
			
			//Заполнение списка листов МЧБ
			СписокЛистовМЧБ = Новый СписокЗначений;
			Для Сч = 1 По КолвоЛистовМЧБ Цикл
				
				СписокОчищаемыхОбластей = Новый Массив;
				СписокОбластейПереименования = Новый СписокЗначений;
				
				Для каждого ТекущаяОбласть Из МакетМЧБ.Области Цикл
					ИмяЯчейки = ТекущаяОбласть.Имя;
					
					Если СтрДлина(ИмяЯчейки) < 13 ИЛИ СтрНайти(СтрИменаПоказателей, Лев(ИмяЯчейки, 13)) = 0 Тогда
						//проверка на вхождение в данную многострочную часть
						Продолжить;
					КонецЕсли;
					
					//определение и обрасывание НомерЯчейки
					ПоказательИНомерСтрокиСРазделителем = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСмысловуюЧастьИмениЯчейки(ИмяЯчейки, Истина); // ВМЕСТЕ с разделителем
					ПоказательИНомерСтроки = Лев(ПоказательИНомерСтрокиСРазделителем,СтрДлина(ПоказательИНомерСтрокиСРазделителем) - 1);
					НомерЯчейки = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСмысловуюЧастьИмениЯчейки(ИмяЯчейки, Ложь);
					//определение СмысловаяЧасть и ТекущийСчетчик
					СмысловаяЧастьСРазделителем = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСмысловуюЧастьИмениЯчейки(ПоказательИНомерСтроки, Истина); // ВМЕСТЕ с разделителем
					СмысловаяЧасть = Лев(СмысловаяЧастьСРазделителем,СтрДлина(СмысловаяЧастьСРазделителем) - 1);
					ТекущийСчетчик = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСмысловуюЧастьИмениЯчейки(ПоказательИНомерСтроки, Ложь);
					
					//Окончательная проверка на вхождение в данную многострочную часть
					Если СтрНайти(СтрИменаПоказателей,СмысловаяЧасть) = 0 Тогда
						Продолжить;
					КонецЕсли;
					
					НовыйСчетчик = Число(ТекущийСчетчик) + ?(Сч = 1, 0, ИсхКолвоСтрокБлока);
					Если НовыйСчетчик > ТекКолвоСтрокБлока Тогда
						СписокОчищаемыхОбластей.Добавить(ТекущаяОбласть);
						Продолжить;
					КонецЕсли;
					
					//Подготовка к переименованию
					//заполнение списка: значение - область, представление - будущее имя.
					СписокОбластейПереименования.Добавить(ТекущаяОбласть,
						СмысловаяЧасть + "_" + Формат(НовыйСчетчик, "ЧГ=") + "_" + НомерЯчейки);
				КонецЦикла;
				
				Если Сч > 1 Тогда
					Для каждого ТекущаяОбласть Из МакетМЧБ.Области Цикл
						ИмяЯчейки = ТекущаяОбласть.Имя;
						Если Лев(ИмяЯчейки, 2) = "П0" И СтрНайти(СтрИменаПоказателей, Лев(ИмяЯчейки, 13)) = 0 Тогда
							СписокОчищаемыхОбластей.Добавить(ТекущаяОбласть);
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				//Очищение
				Для каждого ОбластьСписка Из СписокОчищаемыхОбластей Цикл
					ОбластьСписка.Имя = "";
					ОбластьСписка.Текст = ?(СокрЛП(ОбластьСписка.Текст) = ".", ".", "-");
				КонецЦикла;
				
				//Переименование
				Для каждого ЭлСпискаОбластей Из СписокОбластейПереименования Цикл
					ЭлСпискаОбластей.Значение.Имя = ЭлСпискаОбластей.Представление;
				КонецЦикла;
				
				СписокЛистовМЧБ.Добавить(МакетМЧБ.ПолучитьОбласть());
			КонецЦикла;
			
			Для каждого элЛистМЧБ Из СписокЛистовМЧБ Цикл
				
				ТабличныйДокумент.Очистить();
				ТабличныйДокумент.Вывести(СохрТабличныйДокумент);
				
				ЛистМЧБ = элЛистМЧБ.Значение;
				
				ЛистМЧБ.ПолеСверху = 5;
				ЛистМЧБ.ПолеСправа = 5;
				ЛистМЧБ.ПолеСнизу  = 5;
				ЛистМЧБ.ПолеСлева  = 5;
				
				ЗаполнитьМакетМЧБ(Парам1, ЛистМЧБ, ОбщиеРеквизитыРазделов);
				
				Если СписокЛистовМЧБ.Индекс(элЛистМЧБ) > 0 Тогда
					ОбнулитьИтоговыеПоказателиНаЛистеМЧБ(ЛистМЧБ);
				КонецЕсли;
				
				ЗаполнитьЗначенияСвойств(ВремПоля, ТабличныйДокумент, СтрПоля);
				ТабличныйДокумент.Очистить();
				ТабличныйДокумент.Вывести(ЛистМЧБ);
				ЗаполнитьЗначенияСвойств(ТабличныйДокумент, ЛистМЧБ, СтрПоля);
				
				РегламентированнаяОтчетность.ВывестиНаПечатьЛистОбщая(
					ЭтаФорма.Заголовок, Парам1, ТабличныйДокумент, СтруктураРеквизитовФормы.мПечатныеФормы);
				
				ЗаполнитьЗначенияСвойств(ТабличныйДокумент, ВремПоля, СтрПоля);
			КонецЦикла;
			
			Возврат;
			
		КонецЕсли;
	КонецЕсли;
	
	ЗаполнитьМакетМЧБ(Парам1, МакетМЧБ, ОбщиеРеквизитыРазделов);
	
	ЗаполнитьЗначенияСвойств(ВремПоля, ТабличныйДокумент, СтрПоля);
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(МакетМЧБ);
	ЗаполнитьЗначенияСвойств(ТабличныйДокумент, МакетМЧБ, СтрПоля, "Макет");
	
	РегламентированнаяОтчетность.ВывестиНаПечатьЛистОбщая(
		ЭтаФорма.Заголовок, Парам1, ТабличныйДокумент, СтруктураРеквизитовФормы.мПечатныеФормы);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьМакетМЧБ(ПараметрыПечати, МакетМЧБ, ОбщиеРеквизитыРазделов)
	
	Показатели = Новый ТаблицаЗначений;
	Показатели.Колонки.Добавить("Имя");
	Показатели.Колонки.Добавить("Значение");
	Показатели.Колонки.Добавить("ЗначениеМЧБ");
	
	Показатели.Индексы.Добавить("Имя");
	
	ИсходныйМакет = ТабличныйДокумент;
	Для Каждого Область Из ИсходныйМакет.Области Цикл
		Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник
			И Область.СодержитЗначение = Истина Тогда
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = Область.Имя;
			НовСтр.Значение = Область.Значение;
			НовСтр.ЗначениеМЧБ = ПолучитьЗначениеМЧБ(Область);
		КонецЕсли;
	КонецЦикла;
	
	НайдЗнач = Показатели.Найти("ИНН", "Имя");
	Если НЕ НайдЗнач = Неопределено Тогда
		Показатели.Удалить(НайдЗнач);
	КонецЕсли;
	ИНН = "";
	Для Ном = 0 По 11 Цикл
		ИНН = ИНН + ОбщиеРеквизитыРазделов.ИНН[Ном];
	КонецЦикла;
	НовСтр = Показатели.Добавить();
	НовСтр.Имя = "ИНН";
	НовСтр.Значение = ИНН;
	НовСтр.ЗначениеМЧБ = СокрЛП(ИНН);
	НовСтр = Показатели.Добавить();
	НовСтр.Имя = "ИНН1";
	НовСтр.Значение = ИНН;
	НовСтр.ЗначениеМЧБ = СокрЛП(ИНН);
	
	НайдЗнач = Показатели.Найти("КПП", "Имя");
	Если НЕ НайдЗнач = Неопределено Тогда
		Показатели.Удалить(НайдЗнач);
	КонецЕсли;
	КПП = "";
	Для Ном = 0 По 8 Цикл
		КПП = КПП + ОбщиеРеквизитыРазделов.КПП[Ном];
	КонецЦикла;
	НовСтр = Показатели.Добавить();
	НовСтр.Имя = "КПП";
	НовСтр.Значение = КПП;
	НовСтр.ЗначениеМЧБ = СокрЛП(КПП);
	НовСтр = Показатели.Добавить();
	НовСтр.Имя = "КПП1";
	НовСтр.Значение = КПП;
	НовСтр.ЗначениеМЧБ = СокрЛП(КПП);
	
	НайдЗнач = Показатели.Найти("ДатаПодписи", "Имя");
	Если НЕ НайдЗнач = Неопределено Тогда
		Показатели.Удалить(НайдЗнач);
	КонецЕсли;
	ДатаПодписиСтр = "";
	Для Ном = 0 По 7 Цикл
		ДатаПодписиСтр = ДатаПодписиСтр + ОбщиеРеквизитыРазделов.ДатаПодписи[Ном];
	КонецЦикла;
	НовСтр = Показатели.Добавить();
	НовСтр.Имя = "ДатаПодписи";
	НовСтр.Значение = ДатаПодписиСтр;
	НовСтр.ЗначениеМЧБ = СокрЛП(ДатаПодписиСтр);
	
	НовСтр = Показатели.Добавить();
	НовСтр.Имя = "ДатаПодписиПолная";
	Если СокрЛП(ДатаПодписиСтр) <> "" Тогда
		НовСтр.Значение = Формат(Дата(Прав(ДатаПодписиСтр, 4) + Сред(ДатаПодписиСтр, 3, 2) + Лев(ДатаПодписиСтр, 2) + "000000"), "ДФ = ""дд.ММ.гггг""");
		НовСтр.ЗначениеМЧБ = СокрЛП(Формат(Дата(Прав(ДатаПодписиСтр, 4) + Сред(ДатаПодписиСтр, 3, 2) + Лев(ДатаПодписиСтр, 2) + "000000"), "ДФ = ""дд.ММ.гггг"""));
	КонецЕсли;
	
	// Особая обработка ФИО на титульном листе.
	Если ПараметрыПечати.ИмяСтраницы = "Титульный" Тогда
		
		ПокПодписант = Показатели.Найти("ОргПодписант", "Имя");
		Если ПокПодписант <> Неопределено Тогда
			
			ФИО = РегламентированнаяОтчетность.РазложитьФИО(ПокПодписант.Значение);
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "ОргПодписантФамилия";
			НовСтр.Значение = ФИО.Фамилия;
			НовСтр.ЗначениеМЧБ = ФИО.Фамилия;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "ОргПодписантИмя";
			НовСтр.Значение = ФИО.Имя;
			НовСтр.ЗначениеМЧБ = ФИО.Имя;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "ОргПодписантОтчество";
			НовСтр.Значение = ФИО.Отчество;
			НовСтр.ЗначениеМЧБ = ФИО.Отчество;
			
		КонецЕсли;
		
		// Особая обработка ОКВЭД.
		ПокОКВЭД = Показатели.Найти("ОКВЭД", "Имя");
		Если ПокОКВЭД <> Неопределено Тогда
			ОКВЭД = ПокОКВЭД.ЗначениеМЧБ;
			Если Сред(ОКВЭД, 2, 1) = "." Тогда
				ОКВЭД = Лев(ОКВЭД, 1) + " " + Сред(ОКВЭД, 2);
			КонецЕсли;
			Если Сред(ОКВЭД, 5, 1) = "." Тогда
				ОКВЭД = Лев(ОКВЭД, 4) + " " + Сред(ОКВЭД, 5);
			КонецЕсли;
			ПокОКВЭД.Значение = ОКВЭД;
			ПокОКВЭД.ЗначениеМЧБ = ОКВЭД;
		КонецЕсли;
		
	КонецЕсли;
	
	// Особая обработка ОКТМО.
	Для Каждого Показатель Из Показатели Цикл
		Если СтрНайти(Показатель.Имя, "П000010001003") > 0 Тогда
			Показатель.ЗначениеМЧБ = РегламентированнаяОтчетностьКлиентСервер.ДополнитьСтроку(
				СокрЛП(Показатель.Значение), 11, "-", 1);
		КонецЕсли;
	КонецЦикла;
	
	ИндексТочкиПоКорню = Новый Структура;
	Для каждого Область Из МакетМЧБ.Области Цикл
		Если Область.Текст = "." Тогда
			ТекАдресЗначенияОбласти = АдресЗначенияОбласти(Область);
			Корень = ТекАдресЗначенияОбласти.Корень;
			ИндексТочкиЧислаНаМЧБ = ТекАдресЗначенияОбласти.ИндексЗнакоместа;
			ИндексТочкиПоКорню.Вставить(Корень,ИндексТочкиЧислаНаМЧБ);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Область Из МакетМЧБ.Области Цикл
		Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			ИмяОбласти = Область.Имя;
			
			Если СтрЧислоВхождений(ИмяОбласти, "НомСтр") > 0
			 ИЛИ СтрЧислоВхождений(ИмяОбласти, "СоставленаНа") > 0 Тогда
				Продолжить;
			КонецЕсли;
			
			РезультатПоиска = Показатели.Найти(ИмяОбласти, "Имя");
			Если РезультатПоиска = Неопределено Тогда
				ТекАдресЗначенияОбласти = АдресЗначенияОбласти(Область);
				ЗначениеВыведено = Ложь;
				Если ТекАдресЗначенияОбласти.ИндексЗнакоместа <> 0 Тогда
					РезультатПоиска = Показатели.Найти(ТекАдресЗначенияОбласти.Корень, "Имя");
					Если РезультатПоиска <> Неопределено Тогда
						Если ТипЗнч(РезультатПоиска.Значение)=Тип("Число") Тогда
							// Разделение числа на 2 части.
							ЦелаяЧасть = Цел(РезультатПоиска.Значение);
							СтрЦелаяЧасть = СтрЗаменить(Строка(Формат(Цел(РезультатПоиска.Значение), "ЧРГ=';'")), ";", "");
							Если РезультатПоиска.Значение < 0 И СтрНайти(РезультатПоиска.ЗначениеМЧБ, ".") > 0 Тогда
								СтрДробнаяЧасть = Сред(Строка(РезультатПоиска.Значение - ЦелаяЧасть),4);
							Иначе
								СтрДробнаяЧасть = Сред(Строка(РезультатПоиска.Значение - ЦелаяЧасть),3);
							КонецЕсли;
							Если СтрЦелаяЧасть <> "" ИЛИ СтрДробнаяЧасть <> "" Тогда
								СтрЦелаяЧасть = ?(СтрЦелаяЧасть = "", "0", СтрЦелаяЧасть);
								Если РезультатПоиска.Значение < 0 Тогда
									СтрЦелаяЧасть = ?(СтрЦелаяЧасть = "0", "-0", СтрЦелаяЧасть);
								КонецЕсли;
								СтрДробнаяЧасть = ?(СтрДробнаяЧасть = "", "0", СтрДробнаяЧасть);
							КонецЕсли;
							// Разделение областей показателя на 2 части.
							ИндексТочкиЧислаНаМЧБ = Неопределено;
							Если ИндексТочкиПоКорню.Свойство(ТекАдресЗначенияОбласти.Корень,ИндексТочкиЧислаНаМЧБ) = Ложь Тогда
								// На МЧБ нет разделения на целую и дробную части.
								ПрисвоитьЗначениеОбласти(Область, РезультатПоиска.ЗначениеМЧБ, ТекАдресЗначенияОбласти.ИндексЗнакоместа);
								ЗначениеВыведено = Истина;
							Иначе
								// Определяем какая часть выводится (Целая, дробная или точка).
								Если ТекАдресЗначенияОбласти.ИндексЗнакоместа<ИндексТочкиЧислаНаМЧБ Тогда
									// Выводится целая часть.
									ПрисвоитьЗначениеОбласти(Область, ?(РезультатПоиска.ЗначениеМЧБ = "-","-",СтрЦелаяЧасть), ТекАдресЗначенияОбласти.ИндексЗнакоместа);
									ЗначениеВыведено = Истина;
								ИначеЕсли ТекАдресЗначенияОбласти.ИндексЗнакоместа > ИндексТочкиЧислаНаМЧБ Тогда
									// Выводится дробная часть.
									ПрисвоитьЗначениеОбласти(Область, СтрДробнаяЧасть, ТекАдресЗначенияОбласти.ИндексЗнакоместа - ИндексТочкиЧислаНаМЧБ);
									ЗначениеВыведено = Истина;
								Иначе
									// Выводится точка. Считаем, что область заполненяется корректно.
									ЗначениеВыведено = Истина;
								КонецЕсли;
							КонецЕсли;
						Иначе
							ПрисвоитьЗначениеОбласти(Область, РезультатПоиска.ЗначениеМЧБ, ТекАдресЗначенияОбласти.ИндексЗнакоместа, ТипЗнч(РезультатПоиска.Значение) <> Тип("Строка") ИЛИ НЕ ЗначениеЗаполнено(РезультатПоиска.Значение));
							ЗначениеВыведено = Истина;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
				Если НЕ ЗначениеВыведено Тогда
					
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Не удалось заполнить область ""%1"".'"), ИмяОбласти);
					Сообщение.Сообщить();
					
				КонецЕсли;
			Иначе
				ПрисвоитьЗначениеОбласти(Область, РезультатПоиска.ЗначениеМЧБ);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ОбнулитьИтоговыеПоказателиНаЛистеМЧБ(ТаблДок)
	
	ОбластьИтоговыеПоказатели = ТаблДок.Области.Найти("ИтоговыеПоказатели");
	
	Если ОбластьИтоговыеПоказатели = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбластьИтоговыеПоказателиВерх = ОбластьИтоговыеПоказатели.Верх;
	ОбластьИтоговыеПоказателиНиз = ОбластьИтоговыеПоказатели.Низ;
	
	Для Каждого Обл Из ТаблДок.Области Цикл
		
		Если Обл.ГраницаСлева = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если Обл.Верх >= ОбластьИтоговыеПоказателиВерх
			И Обл.Низ <= ОбластьИтоговыеПоказателиНиз
			И Обл.ГраницаСлева.ТипЛинии = ТипЛинииЯчейкиТабличногоДокумента.Точечная Тогда
			
			Если Обл.СодержитЗначение = Истина Тогда // возможны 3 состояния
				Обл.Значение = "-";
			Иначе
				Обл.Текст = "-";
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьЗначениеМЧБ(Область)
	
	ТипЗначения = ТипЗнч(Область.Значение);
	Если ТипЗначения = Тип("Число") Тогда
		ФорматОбласти = Область.Формат;
		СоотвСтрокаФормата = РазобратьСтрокуФормата(ФорматОбласти);
		СоотвСтрокаФормата.Вставить("ЧРД", ".");
		СоотвСтрокаФормата.Вставить("ЧГ", "");
		Результат = Формат(Область.Значение, СобратьСтрокуФормата(СоотвСтрокаФормата));
	ИначеЕсли ТипЗначения = Тип("Строка") Тогда
		Результат = СокрЛП(Область.Значение);
	ИначеЕсли ТипЗначения = Тип("Дата") Тогда
		Результат = Формат(Область.Значение, ?(ПустаяСтрока(Область.Формат), "ДФ=ddMMyyyy", Область.Формат));
	ИначеЕсли ТипЗначения = Тип("Булево") Тогда
		Результат = Формат(Область.Значение, Область.Формат);
	КонецЕсли;
	Возврат СокрЛП(Результат);
	
КонецФункции

&НаСервере
Функция АдресЗначенияОбласти(Область)
	
	Имя = Область.Имя;
	КореньИмениОбласти = Неопределено;
	СтрИндексЗнакоместа = "";
	ИндексЗнакоместа = 0;
	ДлинаИмени = СтрДлина(Имя);
	Для ИндексВхождения = 1 По ДлинаИмени Цикл
		СтрИндексЗнакоместа = Сред(Имя, ДлинаИмени - ИндексВхождения + 1);
		Если СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(СтрИндексЗнакоместа) Тогда
			КореньИмениОбласти = Лев(Имя, ДлинаИмени - ИндексВхождения);
			ИндексЗнакоместа = Число(СтрИндексЗнакоместа);
		Иначе
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если Прав(КореньИмениОбласти, 1) = "_" Тогда
		КореньИмениОбласти = Лев(КореньИмениОбласти, СтрДлина(КореньИмениОбласти) - 1);
	КонецЕсли;
		
	Возврат Новый Структура("Корень, ИндексЗнакоместа", КореньИмениОбласти, ИндексЗнакоместа);
	
КонецФункции

&НаСервере
Процедура ПрисвоитьЗначениеОбласти(Область, Знач Значение, ИндексЗнакоместа = 0, ДополнятьСправа_ = Истина)
	
	Если ИндексЗнакоместа <> 0 Тогда
		Если СтрДлина(Значение) >= ИндексЗнакоместа Тогда
			Значение = Сред(Значение, ИндексЗнакоместа, 1);
		Иначе
			Значение = ?(ДополнятьСправа_, "-", "");
		КонецЕсли;
	ИначеЕсли НЕ ЗначениеЗаполнено(Значение) Тогда
		Значение = "-";
	КонецЕсли;
	
	Если Область.СодержитЗначение = Истина Тогда
		Область.Значение = ВРЕГ(Значение);
	Иначе
		Область.Текст = ВРЕГ(Значение);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция РазобратьСтрокуФормата(Знач СтрокаФормата)
	
	ЗначенияПараметров = Новый Соответствие;
	Пока СтрНайти(СтрокаФормата, ";") <> 0 Цикл
		ВхождениеРазделителя = СтрНайти(СтрокаФормата, ";");
		ДоРазделителя = Лев(СтрокаФормата, ВхождениеРазделителя - 1);
		ВхождениеРавно = СтрНайти(ДоРазделителя, "=");
		Если ВхождениеРавно <> 0 И ВхождениеРавно <> 1 Тогда
			ЗначенияПараметров.Вставить(Лев(ДоРазделителя, ВхождениеРавно - 1), Сред(ДоРазделителя, ВхождениеРавно + 1));
		КонецЕсли;
		СтрокаФормата = Сред(СтрокаФормата, ВхождениеРазделителя + 1);
	КонецЦикла;
	ВхождениеРавно = СтрНайти(СтрокаФормата, "=");
	Если ВхождениеРавно <> 0 И ВхождениеРавно <> 1 Тогда
		ЗначенияПараметров.Вставить(Лев(СтрокаФормата, ВхождениеРавно - 1), Сред(СтрокаФормата, ВхождениеРавно + 1));
	КонецЕсли;
	Возврат ЗначенияПараметров;
	
КонецФункции

&НаСервере
Функция СобратьСтрокуФормата(ПараметрыФормата)
	
	СтрокаФормата = "";
	Для Каждого Параметр Из ПараметрыФормата Цикл
		СтрокаФормата = СтрокаФормата + "; " + Параметр.Ключ + "=" + Параметр.Значение;
	КонецЦикла;
	Если НЕ ПустаяСтрока(СтрокаФормата) Тогда
		СтрокаФормата = Сред(СтрокаФормата, 3);
	КонецЕсли;
	Возврат СтрокаФормата;
	
КонецФункции

&НаСервере
Процедура ВывестиНаПечатьДополнительныеСтраницы(СтруктураПараметровСтраницы, ОбщиеРеквизитыРазделов)
	
	Перем ИмяСтраницы;
	Перем ТаблицаСтраницРаздела;
	
	СтруктураПараметровСтраницы.Свойство("ИмяСтраницыПанели", ИмяСтраницы);
	
	Если Не мСтруктураМногостраничныхРазделов.Свойство(ИмяСтраницы, ТаблицаСтраницРаздела) Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаСтраницРаздела = ЭтаФорма[ТаблицаСтраницРаздела];
	
	МассивПризнаковАктивности = Новый Массив;
	Для Каждого Страница Из ТаблицаСтраницРаздела Цикл
		ТекущийИндекс = ТаблицаСтраницРаздела.Индекс(Страница);
		МассивПризнаковАктивности.Добавить(ТаблицаСтраницРаздела[ТекущийИндекс].АктивнаяСтраница);
	КонецЦикла;
	
	Для Каждого Страница Из ТаблицаСтраницРаздела Цикл
		ТекущийИндекс = ТаблицаСтраницРаздела.Индекс(Страница);
		ВывестиМакетВТаблДокНаСервере(ИмяСтраницы, ТекущийИндекс + 1);
		Если ИмяСтраницы = "Раздел2" Тогда
			ВывестиНаПечатьРаздел2(СтруктураПараметровСтраницы, ОбщиеРеквизитыРазделов);
		Иначе
			ВывестиНаПечатьЛист(СтруктураПараметровСтраницы, ОбщиеРеквизитыРазделов);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Страница Из ТаблицаСтраницРаздела Цикл
		ТекущийИндекс = ТаблицаСтраницРаздела.Индекс(Страница);
		ТаблицаСтраницРаздела[ТекущийИндекс].АктивнаяСтраница = МассивПризнаковАктивности[ТекущийИндекс];
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиРазделВТабличныйДокументНаСервере(ИмяГруппы, СтруктураГруппы) Экспорт
	
	ВывестиРазделВТабличныйДокумент(ЭтаФорма, ИмяГруппы, СтруктураГруппы);
	
КонецПроцедуры

&НаКлиенте
Процедура ВывестиРазделВТабличныйДокументНаКлиенте(ИмяГруппы, СтруктураГруппы) Экспорт
	
	ВывестиРазделВТабличныйДокумент(ЭтаФорма, ИмяГруппы, СтруктураГруппы);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ВывестиРазделВТабличныйДокумент(Форма, ИмяГруппы, СтруктураГруппы)
	
	Перем ИсходноеКоличествоСтрокГруппы;
	
	#Если НаКлиенте Тогда
		ТекущаяСтраница = Форма.ОпределитьТабличноеПолеПоИдМногострочногоРазделаНаКлиенте(ИмяГруппы);
	#Иначе
		ТекущаяСтраница = Форма.ОпределитьТабличноеПолеПоИдМногострочногоРазделаНаСервере(ИмяГруппы);
	#КонецЕсли
	
	Форма.мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);
	
	ТекущееКоличествоСтрокГруппы = СтруктураГруппы.Количество();
	
	ТекТабличноеПолеИмя = "ТабличныйДокумент";
	
	ТекТабличноеПоле = Форма[ТекТабличноеПолеИмя];
	
	НастройкиМнгЧ = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСвойствоРаздела(Форма,
		ТекущаяСтраница, "МногострочностьВРазделе").НайтиСтроки(Новый Структура("ИдГруппы", ИмяГруппы))[0];
	ВысотаСтроки = НастройкиМнгЧ.ВысотаСтроки;
	
	Если ТекущееКоличествоСтрокГруппы > ИсходноеКоличествоСтрокГруппы Тогда
		Форма.ДобавитьНеобходимоеКоличествоДопСтрокНаСервере(ТекТабличноеПоле, ТекТабличноеПолеИмя,
			ИсходноеКоличествоСтрокГруппы, ТекущееКоличествоСтрокГруппы, ИмяГруппы, СтруктураГруппы, ВысотаСтроки);
		Форма[ТекТабличноеПолеИмя] = ТекТабличноеПоле;
	КонецЕсли;
	
	Для Каждого СтрокаТаблицы Из СтруктураГруппы Цикл
		
		НомерСтрокиВТаблице      = СтруктураГруппы.Индекс(СтрокаТаблицы);
		НомерСтрокиВФормеТаблицы = Формат(НомерСтрокиВТаблице + 1, "ЧГ=");
		
		СписокИменКолонокРаздела = Форма.мСтруктураИменаКолонокРазделов[ИмяГруппы];
		
		Для НомерГрафы = 1 По Форма.мСтруктураКолвоКолонокРазделов[ИмяГруппы] Цикл
			
			КолонкаТаблицыИмя = СписокИменКолонокРаздела.Получить(НомерГрафы - 1).Значение;
			
			Если СтруктураГруппы[0].Свойство(КолонкаТаблицыИмя) Тогда
				
				ИмяЯчейки            = КолонкаТаблицыИмя + "_" + НомерСтрокиВФормеТаблицы;
				ОбластьЯчейкиТаблицы = ТекТабличноеПоле.Области[ИмяЯчейки];
				ЗначениеЯчейки       = СтрокаТаблицы[КолонкаТаблицыИмя];
				
				Если ОбластьЯчейкиТаблицы.СодержитЗначение = Истина Тогда
					ОбластьЯчейкиТаблицы.Значение = ЗначениеЯчейки;
				Иначе
					ОбластьЯчейкиТаблицы.Текст = ЗначениеЯчейки;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьНеобходимоеКоличествоДопСтрокНаСервере(ТекТабличноеПоле, ТекТабличноеПолеИмя, ИсходноеКоличествоСтрокГруппы, ТекущееКоличествоСтрокГруппы, ИмяГруппы, СтруктураГруппы, ВысотаСтроки) Экспорт
	
	ПостфиксВИмениОбластиМногострочнаяЧасть = "";
	Если ИмяГруппы = "П0002100001" Тогда
		ПостфиксВИмениОбластиМногострочнаяЧасть = "21";
	ИначеЕсли ИмяГруппы = "П0002200001" Тогда
		ПостфиксВИмениОбластиМногострочнаяЧасть = "22";
	ИначеЕсли ИмяГруппы = "П0002400001" Тогда
		ПостфиксВИмениОбластиМногострочнаяЧасть = "241";
	ИначеЕсли ИмяГруппы = "П0002400002" Тогда
		ПостфиксВИмениОбластиМногострочнаяЧасть = "242";
	ИначеЕсли ИмяГруппы = "П0002500001" Тогда
		ПостфиксВИмениОбластиМногострочнаяЧасть = "25";
	ИначеЕсли ИмяГруппы = "П0002600001" Тогда
		ПостфиксВИмениОбластиМногострочнаяЧасть = "26";
	КонецЕсли;
	
	ОбластьДопСтроки = ТекТабличноеПоле.ПолучитьОбласть("МногострочнаяЧасть" + ПостфиксВИмениОбластиМногострочнаяЧасть);
	
	КоординатыОбластей = Новый Структура();
	
	Для Каждого Область Из ТекТабличноеПоле.Области Цикл
		
		Если СтрНайти(Область.Имя, "_") Тогда
			
			КоординатыОбластей.Вставить(Область.Имя, Область.Верх);
			
		КонецЕсли;
		
	КонецЦикла;
	
	МногострочнаяЧастьВерх = ТекТабличноеПоле.Области["МногострочнаяЧасть" + ПостфиксВИмениОбластиМногострочнаяЧасть].Верх;
	
	МногострочнаяЧастьНиз = ТекТабличноеПоле.Области["МногострочнаяЧасть" + ПостфиксВИмениОбластиМногострочнаяЧасть].Низ;
	
	ТекТабличноеПоле.ВставитьОбласть(ОбластьДопСтроки.Область(), ТекТабличноеПоле.Область(МногострочнаяЧастьНиз + 1, ,
		МногострочнаяЧастьНиз + (ТекущееКоличествоСтрокГруппы - 1) * ВысотаСтроки), ТипСмещенияТабличногоДокумента.ПоВертикали);
	
	Для НомНовойСтроки = ИсходноеКоличествоСтрокГруппы По ТекущееКоличествоСтрокГруппы Цикл
		
		Постфикс = Формат(ТекущееКоличествоСтрокГруппы - НомНовойСтроки + 1, "ЧГ=");
		
		Для Каждого Область Из ОбластьДопСтроки.Области Цикл
			
			Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
				
				ОбластьТаблДок = ТекТабличноеПоле.Область(
					КоординатыОбластей[Область.Имя] + (ТекущееКоличествоСтрокГруппы - НомНовойСтроки) * ВысотаСтроки,
					Область.Лево,
					КоординатыОбластей[Область.Имя] + (ТекущееКоличествоСтрокГруппы - НомНовойСтроки) * ВысотаСтроки,
					Область.Право);
				
				Если ОбластьТаблДок.СодержитЗначение Тогда
					ОбластьТаблДок.Очистить();
				КонецЕсли;
				
				ОбластьТаблДок.Имя = Лев(Область.Имя, СтрНайти(Область.Имя, "_")) + Постфикс;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	ТекТабличноеПоле.Область(ТекТабличноеПоле.Области["МногострочнаяЧасть" + ПостфиксВИмениОбластиМногострочнаяЧасть].Верх, ,
	ТекТабличноеПоле.Области["МногострочнаяЧасть" + ПостфиксВИмениОбластиМногострочнаяЧасть].Низ).Имя = "";
	
	ТекТабличноеПоле.Область(МногострочнаяЧастьВерх, , МногострочнаяЧастьНиз).Имя = "МногострочнаяЧасть" + ПостфиксВИмениОбластиМногострочнаяЧасть;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиРазделВТабличныйДокументСпецНаСервере(Знач НастройкиМнгЧ, ИмяГруппы, Раздел, СтруктураГруппы, мСтруктураКолвоКолонокРазделов) Экспорт
	
	// Реальное кол-во строк (колво заполненных строк).
	ТекущееКоличествоСтрокГруппы = СтруктураГруппы.Количество();
	
	// Режим восстановления многострочных блоков. Из процедуры ВосстановитьСохраненныеДанные.
	НастройкиМнгЧ = ДанныеФормыВЗначение(НастройкиМнгЧ, Тип("ТаблицаЗначений")).Скопировать();
	
	НазвОбласти = НастройкиМнгЧ.Найти(ИмяГруппы, "ИдГруппы").Область;
	
	НастройкиМнгЧ.Колонки.Добавить("НизМногострочнойЧасти");
	НастройкиМнгЧ.Колонки.Добавить("ВерхМногострочнойЧасти");
	
	// Определим координаты всех многострочных блоков, для последующего восстановления.
	Для каждого Зап Из НастройкиМнгЧ Цикл
		КоординатаНиз  = Раздел.Области[Зап.Область].Низ;
		КоординатаВерх = Раздел.Области[Зап.Область].Верх;
		Зап.НизМногострочнойЧасти  = КоординатаНиз;
		Зап.ВерхМногострочнойЧасти = КоординатаВерх;
		// Координаты текущей области.
		Если Зап.Область = НазвОбласти Тогда
			Низ  = КоординатаНиз;
			Верх = КоординатаВерх;
		КонецЕсли;
	КонецЦикла;
	
	ВысотаСтроки = НастройкиМнгЧ.Найти(ИмяГруппы, "ИдГруппы").ВысотаСтроки;
	
	// Скопируем верхнюю часть документа, не включая многострочную часть.
	ТаблДок = Раздел.ПолучитьОбласть(1, , Верх - 1);
	// Скопируем подвал, все, что ниже области многострочного блока.
	Подвал = Раздел.ПолучитьОбласть(Низ + 1, , Раздел.ВысотаТаблицы);
	
	Строка = Раздел.ПолучитьОбласть(Верх, , Верх + ВысотаСтроки - 1);
	
	Если ВысотаСтроки > 1 Тогда
		ОбластьОпределениеВысотыСтрокиМногострочнойЧасти=Строка.Области.Найти("ОпределениеВысотыСтрокиМногострочнойЧасти");
		Если ОбластьОпределениеВысотыСтрокиМногострочнойЧасти<>Неопределено Тогда
			ОбластьОпределениеВысотыСтрокиМногострочнойЧасти.Имя = "";
		КонецЕсли;
	КонецЕсли;
	
	Если Строка.Области.Найти(НазвОбласти) <> Неопределено Тогда
		Строка.Области[НазвОбласти].Имя = "";
	КонецЕсли;
	
	// При превышении реального кол-ва строк над исходным кол-вом (по шаблону),
	// автоматически добавляем необходимое колво строк.
	
	Для НомНовойСтроки = 1 По ТекущееКоличествоСтрокГруппы Цикл
		// Переопределим именованность.
		Строка1 = Строка.ПолучитьОбласть(1, , Строка.ВысотаТаблицы);
		НомСтр = Формат(НомНовойСтроки, "ЧГ=");
		
		СписокИменКолонокРаздела = мСтруктураИменаКолонокРазделов[ИмяГруппы];
		
		Для НомерГрафы = 1 По мСтруктураКолвоКолонокРазделов[ИмяГруппы] Цикл
			
			КолИмя = СписокИменКолонокРаздела.Получить(НомерГрафы - 1).Значение;
			
			Если СтруктураГруппы[0].Свойство(КолИмя) Тогда
				
				Строка1.Области[КолИмя + "_1"].Имя = КолИмя + "_" + НомСтр;
				
			КонецЕсли;
			
		КонецЦикла;
		
		ЗаполнитьСтрокуДаннымиИзТаблицы(ДанныеФормыВЗначение(СтруктураГруппы, Тип("ТаблицаЗначений")), Строка1, СтруктураГруппы[НомНовойСтроки - 1], НомСтр);
		ТаблДок.Вывести(Строка1);
		
	КонецЦикла;
	
	ТаблДок.Вывести(Подвал);
	
	Раздел.Очистить();
	Раздел.Вывести(ТаблДок);
	
	// Восстановим области.
	Для каждого Зап Из НастройкиМнгЧ Цикл
		Раздел.Область("R" + Формат(Зап.НизМногострочнойЧасти, "ЧГ=") + ":R" + Формат(Зап.ВерхМногострочнойЧасти, "ЧГ=")).Имя = Зап.Область;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтрокуДаннымиИзТаблицы(ТаблицаРаздела, Строка1, СтрокаТаблицы, НомерНаФорме)
	
	// Заполняем строку.
	Для каждого Колонка Из ТаблицаРаздела.Колонки Цикл
		КолонкаИмя = Колонка.Имя;
		НазвЯчейки = КолонкаИмя + "_" + НомерНаФорме;
		
		ЗначениеПоказателя = СтрокаТаблицы[КолонкаИмя];
		
		Если Строка1.Области[НазвЯчейки].СодержитЗначение = Истина Тогда
			Строка1.Области[НазвЯчейки].Значение = ЗначениеПоказателя;
		Иначе
			Строка1.Области[НазвЯчейки].Текст = ЗначениеПоказателя;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ИзменитьТаблицуПараметровАвтозаполнения(Парам, Лист)
	Перем МассивВариантовЗаполненияСтраниц;
	Перем ТаблицаВариантыЗаполнения;
	Перем ТаблицаСтраницРаздела;
	
	ИмяТекущейСтраницыПанели = Лист;
	
	Если Не мСтруктураВариантыЗаполнения.Свойство(ИмяТекущейСтраницыПанели, МассивВариантовЗаполненияСтраниц) Тогда
		Возврат;
	КонецЕсли;
	
	МассивВариантовЗаполненияСтраниц = ЭтаФорма["ТаблицаВариантыЗаполнения" + ИмяТекущейСтраницыПанели];
	
	НомерТекущейСтраницы = 1;
	
	Если мСтруктураМногостраничныхРазделов.Свойство(ИмяТекущейСтраницыПанели, ТаблицаСтраницРаздела) Тогда
		
		ТаблицаСтраницРаздела = ЭтаФорма[ТаблицаСтраницРаздела];
		
		// Раздел является многостраничным, определим активную страницу раздела.
		СтрТаблицаСтраницы = ТаблицаСтраницРаздела.НайтиСтроки(Новый Структура("АктивнаяСтраница", Истина));
		Если СтрТаблицаСтраницы.Количество() > 0 Тогда
			НомерТекущейСтраницы = ТаблицаСтраницРаздела.Индекс(СтрТаблицаСтраницы[0]) + 1;
		КонецЕсли;
	КонецЕсли;
	
	Если Парам = 1 Тогда // создаем таблицу параметров автозаполнения ячеек добавленного листа
		
		// При добавлении новой страницы параметры автозаполнения ее ячеек определяем
		// по эталонной модели.
		НоваяТаблицаВариантыЗаполнения = РегламентированнаяОтчетностьВызовСервера.ПолучитьТаблицуВариантовЗаполненияНаСервере(ЭтаФорма, ИмяТекущейСтраницыПанели, НЕ СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет, СтруктураРеквизитовФормы.мОписаниеТиповЧислоЕ);
		
		Если НоваяТаблицаВариантыЗаполнения <> Неопределено Тогда
			
			ТаблВариантов = МассивВариантовЗаполненияСтраниц.Добавить();	
			
			Если ТипЗнч(НоваяТаблицаВариантыЗаполнения) = Тип("ДанныеФормыКоллекция") Тогда
				
				КопироватьДанныеФормы(НоваяТаблицаВариантыЗаполнения, ТаблВариантов.ТаблицаВариантовЗаполнения);
				
			Иначе
				
				ЗначениеВДанныеФормы(НоваяТаблицаВариантыЗаполнения, ТаблВариантов.ТаблицаВариантовЗаполнения);
				
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе // Парам = -1. Удаляем таблицу параметров автозаполнения ячеек удаленного листа
		
		Если МассивВариантовЗаполненияСтраниц.Количество() > 1 Тогда 
			МассивВариантовЗаполненияСтраниц.Удалить(НомерТекущейСтраницы - 1);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьТабличноеПолеНаСервере(ВыбТабличноеПолеИмя) Экспорт
	
	ОчиститьТабличноеПоле(ЭтаФорма, ВыбТабличноеПолеИмя);
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТабличноеПолеНаКлиенте(ВыбТабличноеПолеИмя) Экспорт
	
	ОчиститьТабличноеПоле(ЭтаФорма, ВыбТабличноеПолеИмя);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОчиститьТабличноеПоле(Форма, ВыбТабличноеПолеИмя)
	
	РегламентированнаяОтчетностьКлиентСервер.ОчиститьТабличноеПоле(Форма, ВыбТабличноеПолеИмя);
	
КонецПроцедуры

&НаКлиенте
Процедура Печать(ВидПечати, НеИзФормыОтчета = Ложь) Экспорт
	
	Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1. Формируется печатная форма...'"), ЭтаФорма.Заголовок), , , БиблиотекаКартинок.Печать);
	
	Если СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки = Истина Тогда // возможны 3 состояния флага
		РегламентированнаяОтчетностьКлиент.ПроверитьКонтрольныеСоотношения(ЭтаФорма, ОбработкаКС, Истина);
	КонецЕсли;
	
	Если НЕ ПечатьНаСервере(ВидПечати) Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ОткрытьФормуПредварительногоПросмотра(ЭтаФорма, ВидПечати, , СтруктураРеквизитовФормы.СписокПечатаемыхЛистов);
	
	СтруктураРеквизитовФормы.мРежимПечати = Ложь;
	
КонецПроцедуры

&НаСервере
Функция ПечатьНаСервере(ВидПечати)
	
	Если НЕ РегламентированнаяОтчетность.ПринтерДоступен() Тогда
		
		Сообщение = Новый СообщениеПользователю;
		
		Сообщение.Текст = НСтр("ru='Перед формированием печатных форм необходимо определить в системе принтер и задать его в качестве используемого по умолчанию.'");
		
		Сообщение.Сообщить();
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Если СтруктураРеквизитовФормы.ЕдиницаИзмерения <> ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1 ИЛИ СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения <> 0 Тогда
		
		Сообщение = Новый СообщениеПользователю;
		
		Сообщение.Текст = НСтр("ru='Печать возможна только при установленной единице измерения ""в рублях"" и точности ""0"".'");
		
		Сообщение.Сообщить();
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Если ТипЗнч(мДеревоВыбранныхСтраниц) <> Тип("ДанныеФормыДерево") Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	СтруктураРеквизитовФормы.мПечатныеФормы.Очистить();
	СтруктураРеквизитовФормы.мРежимПечати = Истина;
	
	СохранитьДанныеРаздела(СтруктураРеквизитовФормы.НаимТекущегоРаздела, Ложь, Ложь);
	
	// Если текущий раздел многостраничный, имеющий многострочные части,
	// предварительно сохраним данные многострочных групп.
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел1" Тогда
		СохрТЗМногострочнойГруппы1 = ЭтаФорма[СтруктураРеквизитовФормы.мИдГруппы1].Выгрузить();
	ИначеЕсли СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел2" Тогда
		СохрТЗМногострочнойГруппы21 = ЭтаФорма[СтруктураРеквизитовФормы.мИдГруппы21].Выгрузить();
		СохрТЗМногострочнойГруппы22 = ЭтаФорма[СтруктураРеквизитовФормы.мИдГруппы22].Выгрузить();
		СохрТЗМногострочнойГруппы241 = ЭтаФорма[СтруктураРеквизитовФормы.мИдГруппы241].Выгрузить();
		СохрТЗМногострочнойГруппы242 = ЭтаФорма[СтруктураРеквизитовФормы.мИдГруппы242].Выгрузить();
		СохрТЗМногострочнойГруппы25 = ЭтаФорма[СтруктураРеквизитовФормы.мИдГруппы25].Выгрузить();
		СохрТЗМногострочнойГруппы26 = ЭтаФорма[СтруктураРеквизитовФормы.мИдГруппы26].Выгрузить();
	ИначеЕсли СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Приложение1" Тогда
		СохрТЗМногострочнойГруппы101 = ЭтаФорма[СтруктураРеквизитовФормы.мИдГруппы101].Выгрузить();
	ИначеЕсли СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Приложение3" Тогда
		СохрТЗМногострочнойГруппы103 = ЭтаФорма[СтруктураРеквизитовФормы.мИдГруппы103].Выгрузить();
	ИначеЕсли СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Приложение4" Тогда
		СохрТЗМногострочнойГруппы104 = ЭтаФорма[СтруктураРеквизитовФормы.мИдГруппы104].Выгрузить();
	КонецЕсли;
	
	сохрТаблДок = ТабличныйДокумент.ПолучитьОбласть();
	
	сохрНомераСтрокМногоуровнегоРаздела = СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела;
	
	СтрПоля = "ПолеСверху, ПолеСправа, ПолеСнизу, ПолеСлева";
	ВремПоля = Новый Структура(СтрПоля);
	
	ЗаполнитьЗначенияСвойств(ВремПоля, ТабличныйДокумент, СтрПоля);
	ВывестиМакетВТаблДокНаСервере("Титульный", 0);
	
	ОбщиеРеквизитыРазделов = ПолучитьОбщиеРеквизитыСТитульногоЛиста();
	
	Для Каждого СтрокаУровня1 Из мДеревоВыбранныхСтраниц.ПолучитьЭлементы() Цикл
		
		Если СтрокаУровня1.ВыводНаПечать = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("НаименованиеЛиста",  СтрокаУровня1.Представление);
		СтруктураПараметров.Вставить("ОриентацияЛиста",    СтрокаУровня1.ОриентацияСтраницы);
		СтруктураПараметров.Вставить("ИмяСтраницы",        СтрокаУровня1.ИмяСтраницы);
		Структурапараметров.Вставить("ИмяОбластиТаблПоля", СтрокаУровня1.ИмяОбластиТабличногоПоля);
		СтруктураПараметров.Вставить("ВидПечати",          ВидПечати);
		
		Если мСтруктураМногоуровневыхРазделов.Свойство(СтрокаУровня1.ИмяСтраницы) Тогда
			
			ВывестиНаПечатьДанныеМногоуровневогоРаздела(СтруктураПараметров, ОбщиеРеквизитыРазделов, СтрПоля);
			
		Иначе
			
			Если НЕ мСтруктураМногостраничныхРазделов.Свойство(СтрокаУровня1.ИмяСтраницы) Тогда
				
				ВывестиМакетВТаблДокНаСервере(СтрокаУровня1.ИмяСтраницы, 0);
				ВывестиНаПечатьЛист(СтруктураПараметров, ОбщиеРеквизитыРазделов, СтрПоля);
				
			Иначе
				
				СтруктураПараметров.Вставить("ИмяСтраницыПанели", СтрокаУровня1.ИмяСтраницы);
				ВывестиНаПечатьДополнительныеСтраницы(СтруктураПараметров, ОбщиеРеквизитыРазделов);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Если текущий раздел многостраничный, имеющий многострочные части,
	// восстановим предварительно сохраненные данные многострочных групп.
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел1" Тогда
		ЭтаФорма[СтруктураРеквизитовФормы.мИдГруппы1].Загрузить(СохрТЗМногострочнойГруппы1);
	ИначеЕсли СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел2" Тогда
		ЭтаФорма[СтруктураРеквизитовФормы.мИдГруппы21].Загрузить(СохрТЗМногострочнойГруппы21);
		ЭтаФорма[СтруктураРеквизитовФормы.мИдГруппы22].Загрузить(СохрТЗМногострочнойГруппы22);
		ЭтаФорма[СтруктураРеквизитовФормы.мИдГруппы241].Загрузить(СохрТЗМногострочнойГруппы241);
		ЭтаФорма[СтруктураРеквизитовФормы.мИдГруппы242].Загрузить(СохрТЗМногострочнойГруппы242);
		ЭтаФорма[СтруктураРеквизитовФормы.мИдГруппы25].Загрузить(СохрТЗМногострочнойГруппы25);
		ЭтаФорма[СтруктураРеквизитовФормы.мИдГруппы26].Загрузить(СохрТЗМногострочнойГруппы26);
	ИначеЕсли СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Приложение1" Тогда
		ЭтаФорма[СтруктураРеквизитовФормы.мИдГруппы101].Загрузить(СохрТЗМногострочнойГруппы101);
	ИначеЕсли СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Приложение3" Тогда
		ЭтаФорма[СтруктураРеквизитовФормы.мИдГруппы103].Загрузить(СохрТЗМногострочнойГруппы103);
	ИначеЕсли СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Приложение4" Тогда
		ЭтаФорма[СтруктураРеквизитовФормы.мИдГруппы104].Загрузить(СохрТЗМногострочнойГруппы104);
	КонецЕсли;
	
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела = сохрНомераСтрокМногоуровнегоРаздела;
	
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(сохрТаблДок);
	ЗаполнитьЗначенияСвойств(ТабличныйДокумент, ВремПоля, СтрПоля);
	
	РегламентированнаяОтчетностьКлиентСервер.ПроставлениеНомеровЛистов(
	ЭтаФорма, , СтруктураРеквизитовФормы.СписокПечатаемыхЛистов);
	
	КопироватьДанныеФормы(мДеревоВыбранныхСтраниц, мДеревоСтраницОтчета);
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Процедура ВывестиНаПечатьРаздел2(Парам1, ОбщиеРеквизитыРазделов, СтрПоля = Неопределено)
	
	МакетМЧБ = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет("ПечатныйБланк2016Кв2_Раздел2");
	
	МакетМЧБ.ПолеСверху = 5;
	МакетМЧБ.ПолеСправа = 5;
	МакетМЧБ.ПолеСнизу  = 5;
	МакетМЧБ.ПолеСлева  = 5;
	
	ВремПоля = Новый Структура(СтрПоля);
	
	ИдГруппы21  = СтруктураРеквизитовФормы.мИдГруппы21;
	ИдГруппы22  = СтруктураРеквизитовФормы.мИдГруппы22;
	ИдГруппы241 = СтруктураРеквизитовФормы.мИдГруппы241;
	ИдГруппы242 = СтруктураРеквизитовФормы.мИдГруппы242;
	ИдГруппы25  = СтруктураРеквизитовФормы.мИдГруппы25;
	ИдГруппы26  = СтруктураРеквизитовФормы.мИдГруппы26;
	
	ИсхКолвоСтрокБлока21  = 8;
	ИсхКолвоСтрокБлока22  = 8;
	ИсхКолвоСтрокБлока241 = 5;
	ИсхКолвоСтрокБлока242 = 1;
	ИсхКолвоСтрокБлока25  = 4;
	ИсхКолвоСтрокБлока26  = 5;
	
	СохрТабличныйДокумент = Новый ТабличныйДокумент;
	СохрТабличныйДокумент.Вывести(ТабличныйДокумент);
	
	ТекКолвоСтрокБлока21  = ЭтаФорма[мСтруктураМногострочныхРазделов[ИдГруппы21]].Количество();
	ТекКолвоСтрокБлока22  = ЭтаФорма[мСтруктураМногострочныхРазделов[ИдГруппы22]].Количество();
	ТекКолвоСтрокБлока241 = ЭтаФорма[мСтруктураМногострочныхРазделов[ИдГруппы241]].Количество();
	ТекКолвоСтрокБлока242 = ЭтаФорма[мСтруктураМногострочныхРазделов[ИдГруппы242]].Количество();
	ТекКолвоСтрокБлока25  = ЭтаФорма[мСтруктураМногострочныхРазделов[ИдГруппы25]].Количество();
	ТекКолвоСтрокБлока26  = ЭтаФорма[мСтруктураМногострочныхРазделов[ИдГруппы26]].Количество();
	
	КолвоЛистовМЧБДляБлока21 = Цел(ТекКолвоСтрокБлока21 / ИсхКолвоСтрокБлока21);
	Если ТекКолвоСтрокБлока21 % ИсхКолвоСтрокБлока21 > 0 Тогда
		КолвоЛистовМЧБДляБлока21 = КолвоЛистовМЧБДляБлока21 + 1;
	КонецЕсли;
	КолвоЛистовМЧБДляБлока22 = Цел(ТекКолвоСтрокБлока22 / ИсхКолвоСтрокБлока22);
	Если ТекКолвоСтрокБлока22 % ИсхКолвоСтрокБлока22 > 0 Тогда
		КолвоЛистовМЧБДляБлока22 = КолвоЛистовМЧБДляБлока22 + 1;
	КонецЕсли;
	КолвоЛистовМЧБДляБлока241 = Цел(ТекКолвоСтрокБлока241 / ИсхКолвоСтрокБлока241);
	Если ТекКолвоСтрокБлока241 % ИсхКолвоСтрокБлока241 > 0 Тогда
		КолвоЛистовМЧБДляБлока241 = КолвоЛистовМЧБДляБлока241 + 1;
	КонецЕсли;
	КолвоЛистовМЧБДляБлока242 = Цел(ТекКолвоСтрокБлока242 / ИсхКолвоСтрокБлока242);
	Если ТекКолвоСтрокБлока242 % ИсхКолвоСтрокБлока242 > 0 Тогда
		КолвоЛистовМЧБДляБлока242 = КолвоЛистовМЧБДляБлока242 + 1;
	КонецЕсли;
	КолвоЛистовМЧБДляБлока25 = Цел(ТекКолвоСтрокБлока25 / ИсхКолвоСтрокБлока25);
	Если ТекКолвоСтрокБлока25 % ИсхКолвоСтрокБлока25 > 0 Тогда
		КолвоЛистовМЧБДляБлока25 = КолвоЛистовМЧБДляБлока25 + 1;
	КонецЕсли;
	КолвоЛистовМЧБДляБлока26 = Цел(ТекКолвоСтрокБлока26 / ИсхКолвоСтрокБлока26);
	Если ТекКолвоСтрокБлока26 % ИсхКолвоСтрокБлока26 > 0 Тогда
		КолвоЛистовМЧБДляБлока26 = КолвоЛистовМЧБДляБлока26 + 1;
	КонецЕсли;
	
	КолвоЛистовМЧБ = Макс(
	КолвоЛистовМЧБДляБлока21, КолвоЛистовМЧБДляБлока22, КолвоЛистовМЧБДляБлока241,
	КолвоЛистовМЧБДляБлока242, КолвоЛистовМЧБДляБлока25, КолвоЛистовМЧБДляБлока26);
	
	// Заполнение строки имен показателей (для проверки перед переименованием).
	СтрИменаПоказателей21  = "";
	СтрИменаПоказателей22  = "";
	СтрИменаПоказателей241 = "";
	СтрИменаПоказателей242 = "";
	СтрИменаПоказателей25  = "";
	СтрИменаПоказателей26  = "";
	
	Колонки21  = ДанныеФормыВЗначение(
	ЭтаФорма[мСтруктураМногострочныхРазделов[ИдГруппы21]], Тип("ТаблицаЗначений")).Колонки;
	Колонки22  = ДанныеФормыВЗначение(
	ЭтаФорма[мСтруктураМногострочныхРазделов[ИдГруппы22]], Тип("ТаблицаЗначений")).Колонки;
	Колонки241 = ДанныеФормыВЗначение(
	ЭтаФорма[мСтруктураМногострочныхРазделов[ИдГруппы241]], Тип("ТаблицаЗначений")).Колонки;
	Колонки242 = ДанныеФормыВЗначение(
	ЭтаФорма[мСтруктураМногострочныхРазделов[ИдГруппы242]], Тип("ТаблицаЗначений")).Колонки;
	Колонки25  = ДанныеФормыВЗначение(
	ЭтаФорма[мСтруктураМногострочныхРазделов[ИдГруппы25]], Тип("ТаблицаЗначений")).Колонки;
	Колонки26  = ДанныеФормыВЗначение(
	ЭтаФорма[мСтруктураМногострочныхРазделов[ИдГруппы26]], Тип("ТаблицаЗначений")).Колонки;
	
	Для каждого КолонкаСтруктуры Из Колонки21 Цикл
		СтрИменаПоказателей21 = СтрИменаПоказателей21 + КолонкаСтруктуры.Имя;
	КонецЦикла;
	Для каждого КолонкаСтруктуры Из Колонки22 Цикл
		СтрИменаПоказателей22 = СтрИменаПоказателей22 + КолонкаСтруктуры.Имя;
	КонецЦикла;
	Для каждого КолонкаСтруктуры Из Колонки241 Цикл
		СтрИменаПоказателей241 = СтрИменаПоказателей241 + КолонкаСтруктуры.Имя;
	КонецЦикла;
	Для каждого КолонкаСтруктуры Из Колонки242 Цикл
		СтрИменаПоказателей242 = СтрИменаПоказателей242 + КолонкаСтруктуры.Имя;
	КонецЦикла;
	Для каждого КолонкаСтруктуры Из Колонки25 Цикл
		СтрИменаПоказателей25 = СтрИменаПоказателей25 + КолонкаСтруктуры.Имя;
	КонецЦикла;
	Для каждого КолонкаСтруктуры Из Колонки26 Цикл
		СтрИменаПоказателей26 = СтрИменаПоказателей26 + КолонкаСтруктуры.Имя;
	КонецЦикла;
	
	// Заполнение списка листов МЧБ.
	СписокЛистовМЧБ = Новый СписокЗначений;
	Для Сч = 1 По КолвоЛистовМЧБ Цикл
		
		СписокОчищаемыхОбластей = Новый Массив;
		СписокОбластейПереименования = Новый СписокЗначений;
		
		Для каждого ТекущаяОбласть Из МакетМЧБ.Области Цикл
			ИмяЯчейки = ТекущаяОбласть.Имя;
			
			Если СтрДлина(ИмяЯчейки) < 13
				ИЛИ (СтрНайти(СтрИменаПоказателей21, Лев(ИмяЯчейки, 13)) = 0
				И СтрНайти(СтрИменаПоказателей22,  Лев(ИмяЯчейки, 13)) = 0
				И СтрНайти(СтрИменаПоказателей241, Лев(ИмяЯчейки, 13)) = 0
				И СтрНайти(СтрИменаПоказателей242, Лев(ИмяЯчейки, 13)) = 0
				И СтрНайти(СтрИменаПоказателей25,  Лев(ИмяЯчейки, 13)) = 0
				И СтрНайти(СтрИменаПоказателей26,  Лев(ИмяЯчейки, 13)) = 0) Тогда
				Продолжить;
			КонецЕсли;
			
			ПоказательИНомерСтрокиСРазделителем
			= РегламентированнаяОтчетностьКлиентСервер.ПолучитьСмысловуюЧастьИмениЯчейки(ИмяЯчейки, Истина);
			
			ПоказательИНомерСтроки
			= Лев(ПоказательИНомерСтрокиСРазделителем,СтрДлина(ПоказательИНомерСтрокиСРазделителем) - 1);
			
			НомерЯчейки = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСмысловуюЧастьИмениЯчейки(ИмяЯчейки, Ложь);
			
			СмысловаяЧастьСРазделителем
			= РегламентированнаяОтчетностьКлиентСервер.ПолучитьСмысловуюЧастьИмениЯчейки(ПоказательИНомерСтроки, Истина);
			
			СмысловаяЧасть = Лев(СмысловаяЧастьСРазделителем,СтрДлина(СмысловаяЧастьСРазделителем) - 1);
			
			ТекущийСчетчик
			= РегламентированнаяОтчетностьКлиентСервер.ПолучитьСмысловуюЧастьИмениЯчейки(ПоказательИНомерСтроки, Ложь);
			
			// Окончательная проверка на вхождение в данную многострочную часть.
			ЭтоПоказательБлока21  = Ложь;
			ЭтоПоказательБлока22  = Ложь;
			ЭтоПоказательБлока241 = Ложь;
			ЭтоПоказательБлока242 = Ложь;
			ЭтоПоказательБлока25  = Ложь;
			ЭтоПоказательБлока26  = Ложь;
			
			Если СтрНайти(СтрИменаПоказателей21,СмысловаяЧасть) > 0 Тогда
				ЭтоПоказательБлока21 = Истина;
				ИсхКолвоСтрокБлока = ИсхКолвоСтрокБлока21;
			ИначеЕсли СтрНайти(СтрИменаПоказателей22,СмысловаяЧасть) > 0 Тогда
				ЭтоПоказательБлока22 = Истина;
				ИсхКолвоСтрокБлока = ИсхКолвоСтрокБлока22;
			ИначеЕсли СтрНайти(СтрИменаПоказателей241,СмысловаяЧасть) > 0 Тогда
				ЭтоПоказательБлока241 = Истина;
				ИсхКолвоСтрокБлока = ИсхКолвоСтрокБлока241;
			ИначеЕсли СтрНайти(СтрИменаПоказателей242,СмысловаяЧасть) > 0 Тогда
				ЭтоПоказательБлока242 = Истина;
				ИсхКолвоСтрокБлока = ИсхКолвоСтрокБлока242;
			ИначеЕсли СтрНайти(СтрИменаПоказателей25,СмысловаяЧасть) > 0 Тогда
				ЭтоПоказательБлока25 = Истина;
				ИсхКолвоСтрокБлока = ИсхКолвоСтрокБлока25;
			ИначеЕсли СтрНайти(СтрИменаПоказателей26,СмысловаяЧасть) > 0 Тогда
				ЭтоПоказательБлока26 = Истина;
				ИсхКолвоСтрокБлока = ИсхКолвоСтрокБлока26;
			Иначе
				Продолжить;
			КонецЕсли;
			
			НовыйСчетчик = Число(ТекущийСчетчик) + ?(Сч = 1, 0, ИсхКолвоСтрокБлока);
			
			Если ЭтоПоказательБлока21 Тогда
				Если НовыйСчетчик > ТекКолвоСтрокБлока21 Тогда
					СписокОчищаемыхОбластей.Добавить(ТекущаяОбласть);
					Продолжить;
				КонецЕсли;
			ИначеЕсли ЭтоПоказательБлока22 Тогда
				Если НовыйСчетчик > ТекКолвоСтрокБлока22 Тогда
					СписокОчищаемыхОбластей.Добавить(ТекущаяОбласть);
					Продолжить;
				КонецЕсли;
			ИначеЕсли ЭтоПоказательБлока241 Тогда
				Если НовыйСчетчик > ТекКолвоСтрокБлока241 Тогда
					СписокОчищаемыхОбластей.Добавить(ТекущаяОбласть);
					Продолжить;
				КонецЕсли;
			ИначеЕсли ЭтоПоказательБлока242 Тогда
				Если НовыйСчетчик > ТекКолвоСтрокБлока242 Тогда
					СписокОчищаемыхОбластей.Добавить(ТекущаяОбласть);
					Продолжить;
				КонецЕсли;
			ИначеЕсли ЭтоПоказательБлока25 Тогда
				Если НовыйСчетчик > ТекКолвоСтрокБлока25 Тогда
					СписокОчищаемыхОбластей.Добавить(ТекущаяОбласть);
					Продолжить;
				КонецЕсли;
			ИначеЕсли ЭтоПоказательБлока26 Тогда
				Если НовыйСчетчик > ТекКолвоСтрокБлока26 Тогда
					СписокОчищаемыхОбластей.Добавить(ТекущаяОбласть);
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			// Подготовка к переименованию.
			// Заполнение списка: значение - область, представление - будущее имя.
			СписокОбластейПереименования.Добавить(
			ТекущаяОбласть, СмысловаяЧасть + "_" + Формат(НовыйСчетчик, "ЧГ=") + "_" + НомерЯчейки);
			
		КонецЦикла;
		
		// Очищение.
		Для каждого ОбластьСписка Из СписокОчищаемыхОбластей Цикл
			ОбластьСписка.Имя = "";
			ОбластьСписка.Текст = ?(СокрЛП(ОбластьСписка.Текст) = ".", ".", "-");
		КонецЦикла;
		
		// Переименование.
		Для каждого ЭлСпискаОбластей Из СписокОбластейПереименования Цикл
			ЭлСпискаОбластей.Значение.Имя = ЭлСпискаОбластей.Представление;
		КонецЦикла;
		
		СписокЛистовМЧБ.Добавить(МакетМЧБ.ПолучитьОбласть());
		
	КонецЦикла;
	
	Для каждого элЛистМЧБ Из СписокЛистовМЧБ Цикл
		
		ТабличныйДокумент.Очистить();
		ТабличныйДокумент.Вывести(СохрТабличныйДокумент);
		
		ЛистМЧБ = элЛистМЧБ.Значение;
		
		ЛистМЧБ.ПолеСверху = 5;
		ЛистМЧБ.ПолеСправа = 5;
		ЛистМЧБ.ПолеСнизу  = 5;
		ЛистМЧБ.ПолеСлева  = 5;
		
		ЗаполнитьМакетМЧБ(Парам1, ЛистМЧБ, ОбщиеРеквизитыРазделов);
		
		Если СписокЛистовМЧБ.Индекс(элЛистМЧБ) > 0 Тогда
			ОбнулитьИтоговыеПоказателиНаЛистеМЧБ(ЛистМЧБ);
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(ВремПоля, ТабличныйДокумент, СтрПоля);
		ТабличныйДокумент.Очистить();
		ТабличныйДокумент.Вывести(ЛистМЧБ);
		ЗаполнитьЗначенияСвойств(ТабличныйДокумент, ЛистМЧБ, СтрПоля);
		
		РегламентированнаяОтчетность.ВывестиНаПечатьЛистОбщая(
			ЭтаФорма.Заголовок, Парам1, ТабличныйДокумент, СтруктураРеквизитовФормы.мПечатныеФормы);
		
		ЗаполнитьЗначенияСвойств(ТабличныйДокумент, ВремПоля, СтрПоля);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиНаПечатьДанныеМногоуровневогоРаздела(СтруктураПараметров, ОбщиеРеквизитыРазделов, СтрПоля)
	
	ИмяТекРаздела = СтруктураПараметров.ИмяСтраницы;
	
	ДеревоДанныхРаздела = ПолучитьИзВременногоХранилища(
	СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяТекРаздела]);
	
	Если ИмяТекРаздела = "Приложение21" Тогда
		
		// Вывод листов с кодом "13401078".
		Для НомСтрокиВДереве = 1 По ДеревоДанныхРаздела.Строки.Количество() Цикл
			
			Ветка21 = ДеревоДанныхРаздела.Строки[НомСтрокиВДереве - 1];
			
			ТабличныйДокумент.Очистить();
			
			ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + ИмяТекРаздела));
			
			Для Каждого ЭлСтруктуры Из Ветка21.Данные Цикл
				Обл = ТабличныйДокумент.Области.Найти(ЭлСтруктуры.Ключ);
				Если Обл <> Неопределено Тогда
					Обл.Значение = ЭлСтруктуры.Значение;
				КонецЕсли;
			КонецЦикла;
			
			ВывестиНаПечатьЛист(СтруктураПараметров, ОбщиеРеквизитыРазделов, СтрПоля);
			
			// Вывод листов с кодом "13401085".
			Для НомСтрокиВВетке21 = 1 По Ветка21.Строки.Количество() Цикл
				
				Ветка22 = Ветка21.Строки[НомСтрокиВВетке21 - 1];
				
				ТабличныйДокумент.Очистить();
				
				ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_Приложение22"));
				
				Для Каждого ЭлСтруктуры Из Ветка22.Данные Цикл
					Обл = ТабличныйДокумент.Области.Найти(ЭлСтруктуры.Ключ);
					Если Обл <> Неопределено Тогда
						Обл.Значение = ЭлСтруктуры.Значение;
					КонецЕсли;
				КонецЦикла;
				
				СтруктураПараметров21 = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(СтруктураПараметров);
				СтруктураПараметров21.Вставить("ИмяСтраницы", "Приложение22");
				
				ВывестиНаПечатьЛист(СтруктураПараметров21, ОбщиеРеквизитыРазделов, СтрПоля);
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьОбщиеРеквизитыСТитульногоЛиста()
	
	МассивИНН         = Новый Массив(12);
	МассивКПП         = Новый Массив(9);
	МассивДатаПодписи = Новый Массив(8);
	
	ИсходныйМакет = ТабличныйДокумент;
	
	Область = ИсходныйМакет.Области.Найти("ИНН");
	Если НЕ Область = Неопределено Тогда
		СтрИНН = Область.Значение;
		Если СтрДлина(СтрИНН) = 10 Тогда
			СтрИНН = СтрИНН + "--";
		КонецЕсли;
		Для Ном = 1 По СтрДлина(СтрИНН) Цикл
			МассивИНН[Ном - 1] = Сред(СтрИНН, Ном, 1);
		КонецЦикла;
	КонецЕсли;
	
	Область = ИсходныйМакет.Области.Найти("КПП");
	Если НЕ Область = Неопределено Тогда
		Для Ном = 1 По СтрДлина(Область.Значение) Цикл
			МассивКПП[Ном - 1] = Сред(Область.Значение, Ном, 1);
		КонецЦикла;
	КонецЕсли;
	
	Область = ИсходныйМакет.Области.Найти("ДатаПодписи");
	
	Если НЕ Область = Неопределено Тогда
		Если ТипЗнч(Область.Значение) = Тип("Строка") Тогда 
			СтрДатаПодписи = Лев(СтрЗаменить(Область.Значение, ".", ""), 8);
		ИначеЕсли ТипЗнч(Область.Значение) = Тип("Дата") Тогда 
			Если ЗначениеЗаполнено(Область.Значение) Тогда 
				СтрДатаПодписи = Лев(СтрЗаменить(Формат(Область.Значение, "ДФ = ""дд.ММ.гггг 'г.'"""), ".", ""), 8);
			Иначе
				СтрДатаПодписи = "        ";
			КонецЕсли;
		КонецЕсли;
		Для Ном = 1 По СтрДлина(СтрДатаПодписи) Цикл
			МассивДатаПодписи[Ном - 1] = Сред(СтрДатаПодписи, Ном, 1);
		КонецЦикла;
	КонецЕсли;
	
	ОбщиеРеквизитыРазделов = Новый Структура;
	
	ОбщиеРеквизитыРазделов.Вставить("ИНН", МассивИНН);
	ОбщиеРеквизитыРазделов.Вставить("КПП", МассивКПП);
	ОбщиеРеквизитыРазделов.Вставить("ДатаПодписи", МассивДатаПодписи);
	
	Возврат ОбщиеРеквизитыРазделов;
	
КонецФункции

&НаКлиенте
Процедура СохранитьНаКлиенте(Автосохранение = Ложь, ВыполняемоеОповещение = Неопределено) Экспорт
	
	Вариант = СтруктураРеквизитовФормы.ВидДокумента * НомерКорректировки;
	
	Если СтруктураДанныхТитульный.Количество() = 0
	 ИЛИ СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
		
		СтруктураДанныхТитульный.Вставить("НалоговыйОрган", ТабличныйДокумент.Области.НалоговыйОрган.Значение);
		СтруктураДанныхТитульный.Вставить("КПП", ТабличныйДокумент.Области.КПП.Значение);
		
	КонецЕсли;
	
	КодИФНС = СтруктураДанныхТитульный.НалоговыйОрган;
	КПП = СтруктураДанныхТитульный.КПП;
	
	Если НЕ РегламентированнаяОтчетностьКлиент.ПриЗаписиРегламентированногоОтчетаНаКлиенте(ЭтаФорма, КодИФНС, Автосохранение, Вариант) Тогда
		Возврат;
	КонецЕсли;
	
	ПодобныйОтчетСуществует = Ложь;
	ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки = Ложь;
	
	Если Элементы.РазделыОтчета.ТекущиеДанные = Неопределено Тогда
		НаименованиеТекущегоРаздела = СтруктураРеквизитовФормы.НаимТекущегоРаздела;
	Иначе
		НаименованиеТекущегоРаздела = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
	КонецЕсли;
	
	РезультатСохранения = ПередСохранением(КодИФНС, КПП, ПодобныйОтчетСуществует, Вариант, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, Автосохранение, НаименованиеТекущегоРаздела);
	
	ВидДокументаНомерКорректировкиИзменен = Неопределено;
	
	Если ПодобныйОтчетСуществует И Автосохранение Тогда
		Возврат;
	КонецЕсли;
	
	НуженВопросПередСохранением = (ПодобныйОтчетСуществует ИЛИ ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки);
	
	Если НуженВопросПередСохранением Тогда
		
		СохранитьНаКлиентеСВопросом(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, ПодобныйОтчетСуществует, КодИФНС, КПП);
		
	Иначе
		
		ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНаКлиентеСВопросом(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, ПодобныйОтчетСуществует, КодИФНС, КПП)
	
	Если ПодобныйОтчетСуществует Тогда
		
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(КодВозвратаДиалога.Да, "Сохранить");
		Кнопки.Добавить(КодВозвратаДиалога.Нет, "Отмена");
		
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Отчет с видом %1 уже существует.
			|Сохранить отчет с таким же видом?'"), ?(Вариант = 0, """Первичный""", """Корректирующий/" + Вариант + """"));
		ДополнительныеПараметры = Новый Структура("Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, КодИФНС, КПП", Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, КодИФНС, КПП);
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросСохранитьОтчетСТакимЖеВидомЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, Кнопки, , Кнопки.Получить(1).Значение);
		
	Иначе
		
		СохранитьНаКлиентеСВопросомПродолжение(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки,КодИФНС, КПП);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросСохранитьОтчетСТакимЖеВидомЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Автосохранение = ДополнительныеПараметры.Автосохранение;
	Вариант = ДополнительныеПараметры.Вариант;
	ВыполняемоеОповещение = ДополнительныеПараметры.ВыполняемоеОповещение;
	КодИФНС = ДополнительныеПараметры.КодИФНС;
	КПП = ДополнительныеПараметры.КПП;
	ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки = ДополнительныеПараметры.ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки;
	
	Ответ = РезультатВопроса;
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	СохранитьНаКлиентеСВопросомПродолжение(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки,КодИФНС, КПП);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНаКлиентеСВопросомПродолжение(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, КодИФНС, КПП)
	
	Если ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки Тогда
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("ВидОтчета", Вариант);
		
		ФормаВопроса = РегламентированнаяОтчетностьКлиент.ПолучитьОбщуюФормуПоИмени("ВопросПриИзмененииВидаДокументаНомераКорректировки", ПараметрыФормы);
		ФормаВопроса.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		ДополнительныеПараметры = Новый Структура("Автосохранение, Вариант, ВыполняемоеОповещение, КодИФНС, КПП", Автосохранение, Вариант, ВыполняемоеОповещение,КодИФНС, КПП );
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросПриИзмененииВидаДокументаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ФормаВопроса.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
		ФормаВопроса.Открыть();
	Иначе
		Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Сохраняется %1...'"), ЭтаФорма.Заголовок), , , БиблиотекаКартинок.Записать);
		РезультатСохранения = Сохранить(Автосохранение, КодИФНС, КПП, Вариант, Неопределено, Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
		ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПриИзмененииВидаДокументаЗавершение(КодВозврата, ДополнительныеПараметры) Экспорт
	
	Автосохранение = ДополнительныеПараметры.Автосохранение;
	Вариант = ДополнительныеПараметры.Вариант;
	ВыполняемоеОповещение = ДополнительныеПараметры.ВыполняемоеОповещение;
	КодИФНС = ДополнительныеПараметры.КодИФНС;
	КПП = ДополнительныеПараметры.КПП;
	Если КодВозврата = КодВозвратаДиалога.Да
		ИЛИ КодВозврата = КодВозвратаДиалога.Нет Тогда
		ВидДокументаНомерКорректировкиИзменен = ?(КодВозврата = КодВозвратаДиалога.Да, Истина, Ложь);
	Иначе
		Возврат;
	КонецЕсли;
	
	Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Сохраняется %1...'"), ЭтаФорма.Заголовок), , , БиблиотекаКартинок.Записать);
	РезультатСохранения = Сохранить(Автосохранение, КодИФНС, КПП, Вариант, ВидДокументаНомерКорректировкиИзменен, Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
	ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения)
	
	КлючУникальности = СтруктураРеквизитовФормы.мСохраненныйДок;
	
	Если РезультатСохранения Тогда
		
		РегламентированнаяОтчетностьКлиент.ПослеЗаписиРегламентированногоОтчета(ЭтаФорма);
		
		Если ВыполняемоеОповещение <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ВыполняемоеОповещение);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПередСохранением(КодИФНС, КПП, ПодобныйОтчетСуществует, Вариант, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, Автосохранение, НаимТекРаздела)
	
	Если РегламентированнаяОтчетность.БылиИзмененыКлючевыеРеквизитыОтчета(ЭтаФорма, КодИФНС, КПП)
	   И РегламентированнаяОтчетность.СуществуетДокументСАналогичнымиРеквизитами(ЭтаФорма, КодИФНС, КПП) Тогда
		
		ПодобныйОтчетСуществует = Истина;
		
	КонецЕсли;
	
	СтруктураРеквизитовФормы.мЗаписываетсяНовыйДокумент = (СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено ИЛИ СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено);
	
	Если Вариант <> Неопределено И ((СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено) ИЛИ (СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено) ИЛИ (Вариант <> СтруктураРеквизитовФормы.мВариант)) Тогда
		
		Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено ИЛИ СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено Тогда
			
		ИначеЕсли Вариант <> СтруктураРеквизитовФормы.мВариант Тогда
			
			ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПодобныйОтчетСуществует
	 ИЛИ ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Возврат Сохранить(Автосохранение, КодИФНС, КПП, Вариант, , НаимТекРаздела);
	
КонецФункции

&НаСервере
Функция Сохранить(Автосохранение = Ложь, КодИФНС, КПП, Вариант, ВидДокументаНомерКорректировкиИзменен = Неопределено, НаимТекРаздела) Экспорт
	
	ДанныеДляРазблокирования = Неопределено;
	
	Если НЕ СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
		Если НЕ СтруктураРеквизитовФормы.мБезОткрытияФормы Тогда
			ДанныеДляРазблокирования = Новый Структура("Ключ,ИдФормы",
			СтруктураРеквизитовФормы.мСохраненныйДок, ЭтаФорма.УникальныйИдентификатор);
		КонецЕсли;
		СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.ПолучитьОбъект();
	КонецЕсли;
	
	Если НЕ РегламентированнаяОтчетность.ПриЗаписиРегламентированногоОтчетаНаСервере(ЭтаФорма, КодИФНС, Автосохранение, Вариант, ВидДокументаНомерКорректировкиИзменен, СтруктураРеквизитовФормы.мСохраненныйДок) Тогда
		СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
		Возврат Ложь;
	КонецЕсли;

	// Значения реквизитов документа.
	СтруктураРеквизитовФормы.мСохраненныйДок.ИсточникОтчета           = Метаданные.Отчеты[Сред(Лев(СтрЗаменить(ЭтаФорма.ИмяФормы, "Внешний", ""), СтрНайти(СтрЗаменить(ЭтаФорма.ИмяФормы, "Внешний", ""), ".Форма.") - 1), 7)].Имя;
	СтруктураРеквизитовФормы.мСохраненныйДок.НаименованиеОтчета       = Метаданные.Отчеты[Сред(Лев(СтрЗаменить(ЭтаФорма.ИмяФормы, "Внешний", ""), СтрНайти(СтрЗаменить(ЭтаФорма.ИмяФормы, "Внешний", ""), ".Форма.") - 1), 7)].ОсновнаяФорма.Синоним;
	СтруктураРеквизитовФормы.мСохраненныйДок.ДатаНачала               = СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета;
	СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания            = СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета;
	СтруктураРеквизитовФормы.мСохраненныйДок.Периодичность            = СтруктураРеквизитовФормы.мПериодичность;
	СтруктураРеквизитовФормы.мСохраненныйДок.ВыбраннаяФорма           = СтруктураРеквизитовФормы.мВыбраннаяФорма;
	СтруктураРеквизитовФормы.мСохраненныйДок.Организация              = СтруктураРеквизитовФормы.Организация;
	СтруктураРеквизитовФормы.мСохраненныйДок.ДатаПодписи              = ДатаПодписи;
	СтруктураРеквизитовФормы.мСохраненныйДок.ЕдиницаИзмерения         = СтруктураРеквизитовФормы.ЕдиницаИзмерения;
	СтруктураРеквизитовФормы.мСохраненныйДок.ТочностьЕдиницыИзмерения = СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения;
	СтруктураРеквизитовФормы.мСохраненныйДок.ВидОтчетности            = Перечисления.ВидыОтчетности.РегламентированнаяОтчетность;
	СтруктураРеквизитовФормы.мСохраненныйДок.Комментарий              = Комментарий;
	СтруктураРеквизитовФормы.мСохраненныйДок.КодНалоговогоОргана      = КодИФНС;
	СтруктураРеквизитовФормы.мСохраненныйДок.КПП                      = КПП;
	СтруктураРеквизитовФормы.мСохраненныйДок.Вид                      = Вариант;
	СтруктураРеквизитовФормы.мСохраненныйДок.ПредставлениеВида        = РегламентированнаяОтчетность.ПредставлениеВидаДокумента(СтруктураРеквизитовФормы.мСохраненныйДок.Вид);
	СтруктураРеквизитовФормы.мВариант                                 = Вариант;
	
	СтруктураРеквизитовФормы.мСохраненныйДок.ФорматВыгрузки = "Автоматически";
	
	СохранитьДанныеРаздела(НаимТекРаздела, Ложь, Ложь);
	
	ЗаполнитьПустыеСтруктурыДанных();
	
	ПоказателиОтчета = Новый Структура();
	
	ЗаполнитьПоказателиОтчетаНаСервере(ПоказателиОтчета);
	
	СписокСохранения = Новый Структура();
	
	СписокСохранения.Вставить("ПоказателиОтчета", ПоказателиОтчета);
	
	ДанныеМногострочныхРазделов = Новый Структура;
	
	Для Каждого ЭлементСтруктуры Из мСтруктураМногострочныхРазделов Цикл
		
		ДанныеМногострочныхРазделов.Вставить(ЭлементСтруктуры.Ключ, ДанныеФормыВЗначение(ЭтаФорма[ЭлементСтруктуры.Значение], Тип("ТаблицаЗначений")));
		
	КонецЦикла;
	
	СписокСохранения.Вставить("ДанныеМногострочныхРазделов", ДанныеМногострочныхРазделов);
	
	ДанныеМногостраничныхРазделов = Новый Структура;
	МассивТиповНеопределено = Новый Массив;
	МассивТиповНеопределено.Добавить(Тип("Неопределено"));
	ОписаниеТиповНеопределено = Новый ОписаниеТипов(МассивТиповНеопределено);
	Для Каждого ЭлементСтруктуры Из мСтруктураМногостраничныхРазделов Цикл
		
		ДанныеМногостраничныхРазделов.Вставить(ЭлементСтруктуры.Ключ, ДанныеФормыВЗначение(ЭтаФорма[ЭлементСтруктуры.Значение], Тип("ТаблицаЗначений")));
		
		ТаблЗнач = Неопределено;
		
		Если ДанныеМногостраничныхРазделов.Свойство(ЭлементСтруктуры.Ключ, ТаблЗнач) Тогда
			
			Если НЕ ТаблЗнач.Колонки.Найти("Данные") = Неопределено Тогда
				
				ТаблЗнач.Колонки.Удалить("Данные");
				ТаблЗнач.Колонки.Добавить("Данные", ОписаниеТиповНеопределено);
				
				Ном = 0;
				
				Для Каждого СтрокаТаблЗнач Из ТаблЗнач Цикл
					
					СтрокаТаблЗнач.Данные = ЭтаФорма[ЭлементСтруктуры.Значение][Ном].Данные[0].Значение;
					
					Ном = Ном + 1;
					
				КонецЦикла;
				
			КонецЕсли;
			
			Если НЕ ТаблЗнач.Колонки.Найти("ДанныеДопСтрок") = Неопределено Тогда
				
				ТаблЗнач.Колонки.Удалить("ДанныеДопСтрок");
				ТаблЗнач.Колонки.Добавить("ДанныеДопСтрок", ОписаниеТиповНеопределено);
				
				Ном = 0;
				
				Для Каждого СтрокаТаблЗнач Из ТаблЗнач Цикл
					
					СтруктураДанныхДопСтрок = Новый Структура;
					
					Если ЭлементСтруктуры.Ключ = "Раздел2" Тогда
						
						Для Каждого ЭлСтруктуры Из ЭтаФорма[ЭлементСтруктуры.Значение][Ном].ДанныеДопСтрок[0].Значение Цикл
							
							СтруктураДанныхДопСтрок.Вставить(ЭлСтруктуры.Ключ, ДанныеФормыВЗначение(ЭлСтруктуры.Значение, Тип("ТаблицаЗначений")));
							
						КонецЦикла;
						
					Иначе
						
						Если (ЭтаФорма[ЭлементСтруктуры.Значение][Ном].ДанныеДопСтрок.Количество() > 0)
						   И (ЭтаФорма[ЭлементСтруктуры.Значение][Ном].ДанныеДопСтрок[0].Представление = "ДанныеФормыКоллекцияТаблицаДопСтрокРаздела") Тогда
							
							СтрокаТаблЗнач.ДанныеДопСтрок = ДанныеФормыВЗначение(ЭтаФорма[ЭлементСтруктуры.Значение][Ном].ДанныеДопСтрок[0].Значение, Тип("ТаблицаЗначений"));
							
							Ном = Ном + 1;
							
							Продолжить;
							
						КонецЕсли;
						
						Для Каждого ЭлСтруктуры Из ЭтаФорма[ЭлементСтруктуры.Значение][Ном].ДанныеДопСтрок Цикл
							
							СтруктураДанныхДопСтрок.Вставить(ДанныеФормыВЗначение(ЭлСтруктуры.Значение, Тип("ТаблицаЗначений")));
							
						КонецЦикла;
						
					КонецЕсли;
					
					СтрокаТаблЗнач.ДанныеДопСтрок = СтруктураДанныхДопСтрок;
					Ном = Ном + 1;
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	СписокСохранения.Вставить("ДанныеМногостраничныхРазделов", ДанныеМногостраничныхРазделов);
	
	ДанныеМногоуровневыхРазделов = Новый Структура;
	Для каждого Элем Из мСтруктураМногоуровневыхРазделов Цикл
		ИмяРаздела = Элем.Ключ;
		ДанныеМногоуровневыхРазделов.Вставить(Элем.Ключ, ПолучитьИзВременногоХранилища(
			СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + Элем.Ключ]));
	КонецЦикла;
	СписокСохранения.Вставить("ДанныеМногоуровневыхРазделов", ДанныеМногоуровневыхРазделов);
	
	ДанныеВариантовАвтоЗаполнения = Новый Структура;
	Для Каждого ЭлементСтруктуры Из мСтруктураВариантыЗаполнения Цикл
		МассивТаблЗнач = Новый Массив;
		ДанныеВариантовАвтоЗаполнения.Вставить(ЭлементСтруктуры.Ключ, МассивТаблЗнач);
		Для Каждого ЭлементМассива Из ЭтаФорма["ТаблицаВариантыЗаполнения" + ЭлементСтруктуры.Ключ] Цикл
			МассивТаблЗнач.Добавить(ДанныеФормыВЗначение(ЭлементМассива.ТаблицаВариантовЗаполнения, Тип("ТаблицаЗначений")));
		КонецЦикла;
	КонецЦикла;
	СписокСохранения.Вставить("ДанныеВариантовАвтоЗаполнения", ДанныеВариантовАвтоЗаполнения);
	
	СписокСохранения.Вставить("ВерсияФормы", СтруктураРеквизитовФормы.мВерсияФормы);
	СписокСохранения.Вставить("ФлПодсчетСтраниц", СтруктураРеквизитовФормы.мСчетчикСтраниц);
	СписокСохранения.Вставить("ФлОтклВыборЗначений", СтруктураРеквизитовФормы.мАвтоВыборКодов);
	СписокСохранения.Вставить("Автозаполнение", СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);
	СписокСохранения.Вставить("ПечатьБезШтрихкодаРазрешена", СтруктураРеквизитовФормы.мПечатьБезШтрихкодаРазрешена);
	СписокСохранения.Вставить("ФлПроверятьСоотношенияПриПечатиИВыгрузки", СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки);
	
	ХранилищеДанных = Новый ХранилищеЗначения(СписокСохранения);
	СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета = ХранилищеДанных;
	
	Попытка
		СтруктураРеквизитовФормы.мСохраненныйДок.Записать();
		РегламентированнаяОтчетность.СохранитьСтатусОтправкиРеглОтчета(ЭтаФорма);
	Исключение
		Если НЕ Автосохранение Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"),
				РегламентированнаяОтчетностьКлиентСервер.СформироватьТекстСообщения(ОписаниеОшибки()));
			Сообщение.Сообщить();
		КонецЕсли;
		СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
		Возврат Ложь;
	КонецПопытки;
	
	СохранитьДеревоСтраницОтчета(СтруктураРеквизитовФормы.мСохраненныйДок);
	
	Модифицированность = Ложь;
	
	СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
	
	Если НЕ СтруктураРеквизитовФормы.мБезОткрытияФормы
	   И НЕ СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
		ЗаблокироватьДанныеДляРедактирования(СтруктураРеквизитовФормы.мСохраненныйДок, , ЭтаФорма.УникальныйИдентификатор);
	КонецЕсли;
	
	Если ДанныеДляРазблокирования <> Неопределено Тогда
		РазблокироватьДанныеДляРедактирования(ДанныеДляРазблокирования.Ключ, ДанныеДляРазблокирования.ИдФормы);
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьПоказателиОтчетаНаСервере(ПоказателиОтчета)
	
	Префикс = "ПолеТабличногоДокумента";
	
	Для Каждого Раздел Из мСвойстваРазделовДекларации.ПолучитьЭлементы() Цикл
		
		Если НЕ Раздел.МногостраничностьВРазделе
			И Раздел.ИмяСтраницы <> "Приложение21"
			И Раздел.ИмяСтраницы <> "Приложение22" Тогда
			ПоказателиОтчета.Вставить(Префикс + Раздел.ИмяСтраницы, ЭтаФорма["СтруктураДанных" + Раздел.ИмяСтраницы]);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПустыеСтруктурыДанных()
	
	СохрТабличныйДокумент = Новый ТабличныйДокумент;
	
	СохрТабличныйДокумент.Вывести(ТабличныйДокумент);
	
	Для Каждого Раздел Из мСвойстваРазделовДекларации.ПолучитьЭлементы() Цикл
		
		// Многоуровневые разделы и входящие в них подразделы.
		Если Раздел.ИмяСтраницы = "Приложение21"
		 ИЛИ Раздел.ИмяСтраницы = "Приложение22" Тогда
			
			ИмяМногоуровневогоРаздела = "Приложение21";
			
			ДеревоДанныхРазделУровень0 = ПолучитьИзВременногоХранилища(
				СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяМногоуровневогоРаздела]);
			
			Если Раздел.ИмяСтраницы = "Приложение21" Тогда
				Если ДеревоДанныхРазделУровень0.Строки.Количество() = 1 Тогда
					Если ДеревоДанныхРазделУровень0.Строки[0].Данные.Количество() = 0 Тогда
						ТабличныйДокумент.Очистить();
						ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + Раздел.ИмяСтраницы));
						СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Очистить();
						СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Добавить(1);
						СохранитьДанныеРаздела(Раздел.ИмяСтраницы, Ложь);
					КонецЕсли;
				КонецЕсли;
			ИначеЕсли Раздел.ИмяСтраницы = "Приложение22" Тогда
				Если ДеревоДанныхРазделУровень0.Строки.Количество() = 1 Тогда
					ДеревоДанныхРазделУровень1 = ДеревоДанныхРазделУровень0.Строки[0];
					Если ДеревоДанныхРазделУровень1.Строки.Количество() = 1 Тогда
						Если ДеревоДанныхРазделУровень1.Строки[0].Данные.Количество() = 0 Тогда
							ТабличныйДокумент.Очистить();
							ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + Раздел.ИмяСтраницы));
							СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Очистить();
							СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Добавить(1);
							СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Добавить(1);
							СохранитьДанныеРаздела(Раздел.ИмяСтраницы, Ложь);
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			Продолжить;
			
		КонецЕсли;
		
		Если НЕ Раздел.МногостраничностьВРазделе
			И (ЭтаФорма["СтруктураДанных" + Раздел.ИмяСтраницы].Количество() = 0) Тогда
			
			ТабличныйДокумент.Очистить();
			ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + Раздел.ИмяСтраницы));
			
			СохранитьДанныеРаздела(Раздел.ИмяСтраницы, Ложь);
			
		ИначеЕсли Раздел.МногостраничностьВРазделе
			И (ЭтаФорма[мСтруктураМногостраничныхРазделов[Раздел.ИмяСтраницы]][0].Данные.Количество() = 0) Тогда
			
			ТабличныйДокумент.Очистить();
			ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + Раздел.ИмяСтраницы));
			
			СохранитьДанныеРаздела(Раздел.ИмяСтраницы, Ложь);
			
		КонецЕсли;
	
	КонецЦикла;
	
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(СохрТабличныйДокумент);
	
КонецПроцедуры

&НаСервере
Процедура СохранитьДеревоСтраницОтчета(Знач мСохраненныйДок)
	
	Если мСохраненныйДок <> Неопределено Тогда
		
		Если ТипЗнч(мСохраненныйДок) = Тип("ДокументСсылка.РегламентированныйОтчет") Тогда
			мСохраненныйДок = мСохраненныйДок.ПолучитьОбъект();
		КонецЕсли;
		
		Если Не мСохраненныйДок.ЭтоНовый() Тогда
			// Сохраняем выбранные листы для печати в хранилище.
			ХранилищеДанных = Новый ХранилищеЗначения(РеквизитФормыВЗначение("мДеревоСтраницОтчета"));
			мСохраненныйДок.ДеревоНастройкиСтраниц = ХранилищеДанных;
			Попытка
				мСохраненныйДок.Записать();
			Исключение
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьСохраненныеДанные()
	Перем ДанныеМногострочныхРазделов;
	Перем ДанныеМногостраничныхРазделов;
	Перем ДанныеМногоуровневыхРазделов;
	Перем ДанныеВариановАвтоЗаполнения;
	Перем ПоказателиОтчета;
	Перем Автозаполнение;
	Перем ТаблицаМногостраничногоДокумента;
	
	// В случае, если формы была скопирована по F9, то проверим, не изменилась ли организация.
	Если НЕ ЗначениеЗаполнено(СтруктураРеквизитовФормы.Организация) Тогда
		СтруктураРеквизитовФормы.Организация = СтруктураРеквизитовФормы.мСохраненныйДок.Организация;
	КонецЕсли;
	
	СтруктураРеквизитовФормы.ЕдиницаИзмерения         = СтруктураРеквизитовФормы.мСохраненныйДок.ЕдиницаИзмерения;
	СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = СтруктураРеквизитовФормы.мСохраненныйДок.ТочностьЕдиницыИзмерения;
	ДатаПодписи = СтруктураРеквизитовФормы.мСохраненныйДок.ДатаПодписи;
	Комментарий	= СтруктураРеквизитовФормы.мСохраненныйДок.Комментарий;
	
	СписокСохранения = СохраненныеДанныеОтчета();
	
	ДеревоНастройкиСтраниц = СтруктураРеквизитовФормы.мСохраненныйДок.ДеревоНастройкиСтраниц.Получить();
	Если СписокСохранения.Свойство("ОкружениеСохранения") Тогда
		Для каждого Строка Из ДеревоНастройкиСтраниц.Строки Цикл
			Если Строка.ИмяСтраницы = "Приложение22" Тогда
				ДеревоНастройкиСтраниц.Строки.Удалить(Строка);
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	ЗначениеВРеквизитФормы(ДеревоНастройкиСтраниц.Скопировать(), "мДеревоСтраницОтчета");
	
	Если СписокСохранения.Свойство("ДанныеМногострочныхРазделов", ДанныеМногострочныхРазделов) Тогда
		Для Каждого ЭлементСтруктуры Из ДанныеМногострочныхРазделов Цикл
			НайденноеЗначение = Неопределено;
			мСтруктураМногострочныхРазделов.Свойство(ЭлементСтруктуры.Ключ, НайденноеЗначение);
			Если НЕ НайденноеЗначение = Неопределено Тогда
				ЗначениеВДанныеФормы(ЭлементСтруктуры.Значение, ЭтаФорма[НайденноеЗначение])
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если СписокСохранения.Свойство("ДанныеВариантовАвтоЗаполнения", ДанныеВариановАвтоЗаполнения) Тогда
		Если НЕ ДанныеВариановАвтоЗаполнения = Неопределено Тогда
			мСтруктураВариантыЗаполнения.Очистить();
			Для Каждого ЭлементСтруктуры Из ДанныеВариановАвтоЗаполнения Цикл
				мСтруктураВариантыЗаполнения.Вставить(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Ключ);
				ЭтаФорма["ТаблицаВариантыЗаполнения" + ЭлементСтруктуры.Ключ].Очистить();
				Для Каждого ЭлементМассива Из ЭлементСтруктуры.Значение Цикл
					ТаблВарЗаполнения = ЭтаФорма["ТаблицаВариантыЗаполнения" + ЭлементСтруктуры.Ключ].Добавить().ТаблицаВариантовЗаполнения;
					ЗначениеВДанныеФормы(ЭлементМассива, ТаблВарЗаполнения);
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	СписокСохранения.Свойство( "ПоказателиОтчета", ПоказателиОтчета );
	
	Если СписокСохранения.Свойство("ДанныеМногостраничныхРазделов", ДанныеМногостраничныхРазделов) Тогда
		
		Для Каждого ЭлементСтруктуры Из ДанныеМногостраничныхРазделов Цикл
			
			НайденноеЗначение = Неопределено;
			
			мСтруктураМногостраничныхРазделов.Свойство(ЭлементСтруктуры.Ключ, НайденноеЗначение);
			
			Если НЕ НайденноеЗначение = Неопределено Тогда
				
				НайденноеЗначение = ЭтаФорма[НайденноеЗначение];
				
				ЗначениеВДанныеФормы(ЭлементСтруктуры.Значение, НайденноеЗначение);
				
				Если НайденноеЗначение[0].Свойство("Данные") Тогда
					
					Для Каждого СтрокаТаблЗнач Из НайденноеЗначение Цикл
						
						Если ТипЗнч(СтрокаТаблЗнач.Данные) = Тип("СписокЗначений") Тогда
							
							СтрокаТаблЗнач.Данные.Очистить();
							СтрокаТаблЗнач.Данные.Добавить(ЭлементСтруктуры.Значение[НайденноеЗначение.Индекс(СтрокаТаблЗнач)].Данные);
							
						КонецЕсли;
						
					КонецЦикла;
					
				КонецЕсли;
				
				Если НайденноеЗначение[0].Свойство("ДанныеДопСтрок") Тогда
					
					Ном = 0;
					
					Для Каждого СтрокаТаблЗнач Из ЭлементСтруктуры.Значение Цикл
						
						Если ТипЗнч(СтрокаТаблЗнач.ДанныеДопСтрок) = Тип("Структура") Тогда
							
							СтруктураДопСтрок = Новый Структура;
							
							Для Каждого ЭлСтруктуры Из СтрокаТаблЗнач.ДанныеДопСтрок Цикл
								
								ТаблЗнач = ЭлСтруктуры.Значение;
								
								СтрокаТаблЗначДанныеДопСтрок = ЭтаФорма["Хранилище" + ЭлСтруктуры.Ключ].Добавить().Таблица;
								
								ЗначениеВДанныеФормы(ТаблЗнач, СтрокаТаблЗначДанныеДопСтрок);
								
								СтруктураДопСтрок.Вставить(ЭлСтруктуры.Ключ, СтрокаТаблЗначДанныеДопСтрок);
								
							КонецЦикла;
							
							НайденноеЗначение[Ном].ДанныеДопСтрок.Добавить(СтруктураДопСтрок, "ДанныеФормыКоллекцияТаблицаДопСтрокРаздела");
							
						ИначеЕсли ТипЗнч(СтрокаТаблЗнач.ДанныеДопСтрок) = Тип("ТаблицаЗначений") Тогда
							
							СтрокаТаблЗначДанныеДопСтрок = ЭтаФорма["Хранилище" + ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ЭлементСтруктуры.Ключ)].Добавить().Таблица;
							
							ЗначениеВДанныеФормы(СтрокаТаблЗнач.ДанныеДопСтрок, СтрокаТаблЗначДанныеДопСтрок);
							
							НайденноеЗначение[Ном].ДанныеДопСтрок.Добавить(СтрокаТаблЗначДанныеДопСтрок, "ДанныеФормыКоллекцияТаблицаДопСтрокРаздела");
							
						КонецЕсли;
						
						Ном = Ном + 1;
						
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Для Каждого Раздел Из мСтруктураМногостраничныхРазделов Цикл
		Для Каждого Страница Из ЭтаФорма[Раздел.Значение] Цикл
			Страница.АктивнаяСтраница = Ложь;
		КонецЦикла;
	КонецЦикла;
	
	Если СписокСохранения.Свойство("ДанныеМногоуровневыхРазделов", ДанныеМногоуровневыхРазделов) Тогда
		Для Каждого ЭлементСтруктуры Из ДанныеМногоуровневыхРазделов Цикл
			СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ЭлементСтруктуры.Ключ]
				= ПоместитьВоВременноеХранилище(ЭлементСтруктуры.Значение, УникальныйИдентификатор);
		КонецЦикла;
	КонецЕсли;
	
	СписокСохранения.Свойство("ФлПодсчетСтраниц", СтруктураРеквизитовФормы.мСчетчикСтраниц);
	СписокСохранения.Свойство("ФлОтклВыборЗначений", СтруктураРеквизитовФормы.мАвтоВыборКодов);
	Если СтруктураРеквизитовФормы.мАвтоВыборКодов = Неопределено Тогда
		СтруктураРеквизитовФормы.мАвтоВыборКодов = Ложь;
	КонецЕсли;
	
	СписокСохранения.Свойство("ФлПроверятьСоотношенияПриПечатиИВыгрузки", СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки);
	СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки = ?(СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки = Неопределено, Ложь, СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки);
	
	СписокСохранения.Свойство("Автозаполнение", Автозаполнение);
	СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет = Автозаполнение;
	
	Если НЕ СписокСохранения.Свойство("ПечатьБезШтрихкодаРазрешена", СтруктураРеквизитовФормы.мПечатьБезШтрихкодаРазрешена) Тогда
		СтруктураРеквизитовФормы.мПечатьБезШтрихкодаРазрешена = Ложь;
	КонецЕсли;
	
	СформироватьДеревоРазделовОтчетаНаСервере();
	
	Префикс = "ПолеТабличногоДокумента";
	Для Каждого Раздел Из мСвойстваРазделовДекларации.ПолучитьЭлементы() Цикл
		Если НЕ Раздел.МногостраничностьВРазделе
			И Раздел.ИмяСтраницы <> "Приложение21"
			И Раздел.ИмяСтраницы <> "Приложение22" Тогда
			ЭтаФорма["СтруктураДанных" + Раздел.ИмяСтраницы] = ПоказателиОтчета[Префикс + Раздел.ИмяСтраницы];
		КонецЕсли;
	КонецЦикла;
	
	ИмяТекРаздела = "Титульный";
	
	Для Каждого ЭлСтруктуры Из ЭтаФорма["СтруктураДанных" + ИмяТекРаздела] Цикл
		Обл = ТабличныйДокумент.Области.Найти(ЭлСтруктуры.Ключ);
		Если Обл <> Неопределено Тогда
			Обл.Значение = ЭлСтруктуры.Значение;
		КонецЕсли;
	КонецЦикла;
	
	РегламентированнаяОтчетность.ОперацииПриВосстановленииРегламентированногоОтчета(ЭтаФорма);
	
	КопироватьДанныеФормы(мДеревоСтраницОтчета, мДеревоВыбранныхСтраниц);
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьСохраненныеДанныеОтчетаСтарогоОбразца(СписокСохранения)
	
	Перем ДанныеВариантовАвтоЗаполнения;
	Перем ДанныеМногостраничныхРазделов;
	
	ДанныеМногоуровневыхРазделов = Новый Структура;
	
	ПрефиксТД = "ПолеТабличногоДокумента";
	
	// Данные вариантов автозаполнения.
	Если СписокСохранения.Свойство("ДанныеВариантовАвтоЗаполнения", ДанныеВариантовАвтоЗаполнения) Тогда
		Если ДанныеВариантовАвтоЗаполнения.Свойство("Приложение21") Тогда
			ДанныеВариантовАвтоЗаполнения.Удалить("Приложение21");
		КонецЕсли;
		Если ДанныеВариантовАвтоЗаполнения.Свойство("Приложение22") Тогда
			ДанныеВариантовАвтоЗаполнения.Удалить("Приложение22");
		КонецЕсли;
	КонецЕсли;
	
	// Данные многостраничных разделов, имеющих 1 многострочную часть.
	Если СписокСохранения.Свойство("ДанныеМногостраничныхРазделов", ДанныеМногостраничныхРазделов) Тогда
		Для Каждого ЭлементСтруктуры Из ДанныеМногостраничныхРазделов Цикл
			Если ЭлементСтруктуры.Значение.Колонки.Найти("ДанныеДопСтрок") <> Неопределено Тогда
				Для Каждого СтрокаТЗ Из ЭлементСтруктуры.Значение Цикл
					Если ЭлементСтруктуры.Ключ = "Раздел1" Тогда
						СтрокаТЗ.ДанныеДопСтрок = СтрокаТЗ.ДанныеДопСтрок.П0000100001;
					ИначеЕсли ЭлементСтруктуры.Ключ = "Приложение1" Тогда
						СтрокаТЗ.ДанныеДопСтрок = СтрокаТЗ.ДанныеДопСтрок.П0010100001;
					ИначеЕсли ЭлементСтруктуры.Ключ = "Приложение3" Тогда
						СтрокаТЗ.ДанныеДопСтрок = СтрокаТЗ.ДанныеДопСтрок.П0010300001;
					ИначеЕсли ЭлементСтруктуры.Ключ = "Приложение4" Тогда
						СтрокаТЗ.ДанныеДопСтрок = СтрокаТЗ.ДанныеДопСтрок.П0010400001;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			ДанныеМногостраничныхРазделов.Вставить(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Значение);
		КонецЦикла;
		СписокСохранения.Вставить("ДанныеМногостраничныхРазделов", ДанныеМногостраничныхРазделов);
	КонецЕсли;
	
	// Титульный лист.
	ДанныеТит = СписокСохранения.ПоказателиОтчета[ПрефиксТД + "Титульный"];
	Для Каждого Показатель Из ДанныеТит Цикл
		ИмяПоказателя = Показатель.Ключ;
		Если ИмяПоказателя = "ИНН1_1" Тогда
			ДанныеТит.Вставить("ИНН", "");
			Для Ном = 1 По 10 Цикл
				ДанныеТит.ИНН = ДанныеТит.ИНН + СокрЛП(ДанныеТит["ИНН1_" + Ном]);
				ДанныеТит.Удалить("ИНН1_" + Ном);
			КонецЦикла;
			Если Лев(ДанныеТит.ИНН, 2) = "00" Тогда
				ДанныеТит.ИНН = Сред(ДанныеТит.ИНН, 3);
			КонецЕсли;
			ДанныеТит.ИНН = СтрЗаменить(ДанныеТит.ИНН, "-", "");
		ИначеЕсли ИмяПоказателя = "КПП1_1" Тогда
			ДанныеТит.Вставить("КПП", "");
			Для Ном = 1 По 9 Цикл
				ДанныеТит.КПП = ДанныеТит.КПП + СокрЛП(ДанныеТит["КПП1_" + Ном]);
				ДанныеТит.Удалить("КПП1_" + Ном);
			КонецЦикла;
		ИначеЕсли ИмяПоказателя = "НалоговыйОрган1" Тогда
			ДанныеТит.Вставить("НалоговыйОрган", "");
			Для Ном = 1 По 4 Цикл
				ДанныеТит.НалоговыйОрган = ДанныеТит.НалоговыйОрган + СокрЛП(ДанныеТит["НалоговыйОрган" + Ном]);
				ДанныеТит.Удалить("НалоговыйОрган" + Ном);
			КонецЦикла;
		ИначеЕсли ИмяПоказателя = "НомерКорректировки1" Тогда
			ДанныеТит.Вставить("НомерКорректировки", "");
			Для Ном = 1 По 3 Цикл
				ДанныеТит.НомерКорректировки = ДанныеТит.НомерКорректировки
				+ СтрЗаменить(СокрЛП(ДанныеТит["НомерКорректировки" + Ном]), "-", "");
				ДанныеТит.Удалить("НомерКорректировки" + Ном);
				Если НЕ ЗначениеЗаполнено(ДанныеТит.НомерКорректировки) Тогда
					ДанныеТит.НомерКорректировки = "0";
				КонецЕсли;
			КонецЦикла;
		ИначеЕсли ИмяПоказателя = "Период1" Тогда
			ДанныеТит.Вставить("Период", "");
			Для Ном = 1 По 2 Цикл
				ДанныеТит.Период = ДанныеТит.Период + СокрЛП(ДанныеТит["Период" + Ном]);
				ДанныеТит.Удалить("Период" + Ном);
			КонецЦикла;
		ИначеЕсли ИмяПоказателя = "ОтчетГод1" Тогда
			ДанныеТит.Вставить("ОтчетГод", "");
			Для Ном = 1 По 4 Цикл
				ДанныеТит.ОтчетГод = ДанныеТит.ОтчетГод + СокрЛП(ДанныеТит["ОтчетГод" + Ном]);
				ДанныеТит.Удалить("ОтчетГод" + Ном);
			КонецЦикла;
		ИначеЕсли ИмяПоказателя = "ПоМесту1" Тогда
			ДанныеТит.Вставить("ПоМесту", "");
			Для Ном = 1 По 3 Цикл
				ДанныеТит.ПоМесту = ДанныеТит.ПоМесту + СокрЛП(ДанныеТит["ПоМесту" + Ном]);
				ДанныеТит.Удалить("ПоМесту" + Ном);
			КонецЦикла;
		ИначеЕсли ИмяПоказателя = "Прил1" Тогда
			ДанныеТит.Вставить("Прил", "");
			Для Ном = 1 По 3 Цикл
				ДанныеТит.Прил = ДанныеТит.Прил + СокрЛП(ДанныеТит["Прил" + Ном]);
				ДанныеТит.Удалить("Прил" + Ном);
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	ИнициализацияМногоуровневыхРазделов();
	
	// Приложение 2.1.
	ИмяРаздела = "Приложение21";
	
	ДеревоРаздела = ПолучитьИзВременногоХранилища(
		СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяРаздела]);
	
	НачСтруктураДанных21 = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(
		ДеревоРаздела.Строки[0].Данные);
	
	НачСтруктураДанных22 = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(
		ДеревоРаздела.Строки[0].Строки[0].Данные);
	
	ДеревоРаздела.Строки.Удалить(0);
	
	ТЗ_Прил21 = ДанныеМногостраничныхРазделов[ИмяРаздела].Скопировать();
	ТЗ_Прил22 = ДанныеМногостраничныхРазделов["Приложение22"];
	
	ДеревоДанных = Новый ДеревоЗначений;
	ДеревоДанных.Колонки.Добавить("Данные");
	
	Для каждого СтрокаТЗ_Прил21 Из ТЗ_Прил21 Цикл
		
		ВеткаПрил21 = ДеревоДанных.Строки.Добавить();
		ВеткаПрил21.Данные = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(СтрокаТЗ_Прил21.Данные);
		
		ЕстьПодчПрил22ДляТекПрил21 = Ложь;
		КолСтрок22 = ТЗ_Прил22.Количество();
		
		Для НомСтр22 = 1 По КолСтрок22 Цикл
			ОбрИнд22 = КолСтрок22 - НомСтр22;
			Данные22 = ТЗ_Прил22[ОбрИнд22].Данные;
			Если СокрЛП(ВеткаПрил21.Данные.П001020001003) = СокрЛП(Данные22.П001020011003) Тогда
				ВеткаПрил22 = ВеткаПрил21.Строки.Вставить(0);
				ВеткаПрил22.Данные = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(Данные22);
				ТЗ_Прил22.Удалить(ОбрИнд22);
				ЕстьПодчПрил22ДляТекПрил21 = Истина;
			КонецЕсли;
		КонецЦикла;
		
		Если НЕ ЕстьПодчПрил22ДляТекПрил21 Тогда
			ВеткаПрил22 = ВеткаПрил21.Строки.Добавить();
			ВеткаПрил22.Данные = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(НачСтруктураДанных22);
		КонецЕсли;
		
	КонецЦикла;
	
	СтраницыПрил21ПоДаннымПрил22 = Новый СписокЗначений;
	Для каждого СтрокаТЗ_Прил22 Из ТЗ_Прил22 Цикл
		
		Данные22 = СтрокаТЗ_Прил22.Данные;
		Элем = СтраницыПрил21ПоДаннымПрил22.НайтиПоЗначению(СокрЛП(Данные22.П001020011003));
		
		Если Элем = Неопределено Тогда
			ВеткаПрил21 = ДеревоДанных.Строки.Добавить();
			СтраницыПрил21ПоДаннымПрил22.Добавить(СокрЛП(Данные22.П001020011003),
			Формат(ДеревоДанных.Строки.Индекс(ВеткаПрил21), "ЧГ="));
		Иначе
			ВеткаПрил21 = ДеревоДанных.Строки[Число(Элем.Представление)];
		КонецЕсли;
		
		ВеткаПрил22 = ВеткаПрил21.Строки.Добавить();
		ВеткаПрил22.Данные = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(Данные22);
		
	КонецЦикла;
	
	ДанныеМногоуровневыхРазделов.Вставить(ИмяРаздела, ДеревоДанных);
	
	СписокСохранения.Вставить("ДанныеМногоуровневыхРазделов", ДанныеМногоуровневыхРазделов);
	
	СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяРаздела]
		= ПоместитьВоВременноеХранилище(ДеревоДанных, УникальныйИдентификатор);
	
КонецПроцедуры

&НаСервере
Процедура НачальныеОперацииСМногострочнымиБлоками()
	Перем ИсходноеКоличествоСтрокГруппы;
	
	// Создаем исходную структуру многострочных разделов.
	Для Каждого ЭлементСтруктуры Из мСтруктураМногострочныхРазделов Цикл
		ИмяГруппы = ЭлементСтруктуры.Ключ;
		СтруктураГруппы = ЭтаФорма[ЭлементСтруктуры.Значение];
		мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);
		Для НСтр = 1 По ИсходноеКоличествоСтрокГруппы Цикл
			СтруктураГруппы.Добавить();
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтруктуруЗависимыхЯчеекДляАвторасчета()
	
	СтруктураЗависимыхЯчеекДляАвторасчета = Новый Структура;
	
	// Раздел 2.
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000230000102", "П000210000103;П000220000103");
	
	// Раздел 3.
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000030010003", "П000030006003;П000030007003;П000030008003;П000030009003");
	
	// Приложение 1.
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П001010000104", "П001010000102;П001010000103");
	
	// Приложение 2.1.
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П001020008004", "П001020006004;П001020007004");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П001020010004", "П001020006004;П001020007004;П001020004004");
	
	// Приложение 2.2.
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П001020020003", "П001020018003;П001020019003");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П001020020004", "П001020018004;П001020019004");
	
	// Приложение 3.
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П001030005003", "П001030000103;П001030000106");
	
	// Приложение 4.
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П001040005003", "П001040000103;П001040000106");
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтруктуруИменКолонокМногострочныхРазделов()
	
	Для каждого ЭлементСтруктуры Из мСтруктураМногострочныхРазделов Цикл
		
		СписокИменРаздела = мСтруктураИменаКолонокРазделов[ЭлементСтруктуры.Ключ];
		ТаблицаРаздела = ДанныеФормыВЗначение(ЭтаФорма[ЭлементСтруктуры.Значение], Тип("ТаблицаЗначений"));
		
		СписокИменРаздела.Очистить();
		Для каждого КолонкаТаблицы Из ТаблицаРаздела.Колонки Цикл
			СписокИменРаздела.Добавить(КолонкаТаблицы.Имя);
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура Инициализация(БезОткрытияФормы = Ложь) Экспорт
	
	Перем ИсходноеКоличествоСтрокГруппы;
	
	СтруктураРеквизитовФормы.мБезОткрытияФормы = БезОткрытияФормы;
	
	ИнициализироватьТаблицуСоставаПоказателей();
	
	ЗаполнитьНачальныеНастройки();
	
	ЗаполнитьСтруктуруЗависимыхЯчеекДляАвторасчета();
	
	ЗаполнитьСтруктуруИменКолонокМногострочныхРазделов();
	
	ФормироватьСтруктуруСтраницОтчета();
	
	ФормироватьСтруктуруСвойствСтраниц();
	
	СформироватьДеревоРазделовОтчетаНаСервере();
	
	СтруктураРеквизитовФормы.мАвтоВыборКодов = Ложь;
	СтруктураРеквизитовФормы.мРежимПечати = Ложь;
	
	СтруктураРеквизитовФормы.ВидДокумента = 0;
	НомерКорректировки = 1;
	
	ОтчетСкопированОрганизацияНеИзменилась = Ложь;
	
	Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
		НачальныеОперацииСМногострочнымиБлоками();
		Если СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено Тогда
			ВосстановитьСохраненныеДанные();
		Иначе
			СтруктураРеквизитовФормы.ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1;
			СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = 0;
			СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки = Ложь;
			КопироватьДанныеФормы(мДеревоСтраницОтчета, мДеревоВыбранныхСтраниц);
			ТабличныйДокумент.Области.ПоМесту.Значение
			= ?(РегламентированнаяОтчетностьВызовСервера.ЭтоЮридическоеЛицо(
			СтруктураРеквизитовФормы.Организация), "214", "120");
		КонецЕсли;
		Модифицированность = Истина;
	Иначе
		ВосстановитьСохраненныеДанные();
		Если ЗначениеЗаполнено(СтруктураРеквизитовФормы.мСкопированаФорма) Тогда
			Если СтруктураРеквизитовФормы.мСохраненныйДок.Организация
				= СтруктураРеквизитовФормы.Организация Тогда
				ОтчетСкопированОрганизацияНеИзменилась = Истина;
			КонецЕсли;
			СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено;
			Модифицированность = Истина;
		КонецЕсли;
		Если НЕ БезОткрытияФормы И НЕ СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
			ЗаблокироватьДанныеДляРедактирования(
				СтруктураРеквизитовФормы.мСохраненныйДок, , ЭтаФорма.УникальныйИдентификатор);
		КонецЕсли;
	КонецЕсли;
	
	ЗаполнитьПустыеСтруктурыДанных();
	
	СтруктураРеквизитовФормы.ИП = НЕ РегламентированнаяОтчетностьВызовСервера.ЭтоЮридическоеЛицо(
		СтруктураРеквизитовФормы.Организация);
	
	СтруктураРеквизитовФормы.НачальноеЗначениеНаимОрганизации = НачальноеЗначениеНаименованияОрганизации();
	
	Если ЗначениеЗаполнено(СтруктураРеквизитовФормы.мСкопированаФорма) Тогда
		Если СтруктураРеквизитовФормы.ИП
			И ЗначениеЗаполнено(ТабличныйДокумент.Области.КодФормыРеорганизации.Значение)
			И ТабличныйДокумент.Области.КодФормыРеорганизации.Значение <> "0" Тогда
			ТабличныйДокумент.Области.КодФормыРеорганизации.Значение = "";
		КонецЕсли;
	КонецЕсли;
	
	УстановитьДоступностьОбластей(ЭтаФорма, СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
	ПоказатьПериод();
	
	Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено
		ИЛИ ЗначениеЗаполнено(СтруктураРеквизитовФормы.мСкопированаФорма) Тогда
		
		Если ОтчетСкопированОрганизацияНеИзменилась Тогда
			
			Если НЕ СтруктураРеквизитовФормы.ИП
				И ЗначениеЗаполнено(СтруктураРеквизитовФормы.мСкопированаФорма)
				И ЗначениеЗаполнено(ТабличныйДокумент.Области.КодФормыРеорганизации.Значение)
				И ТабличныйДокумент.Области.КодФормыРеорганизации.Значение <> "0" Тогда
				НаимОргВосстановленное = ТабличныйДокумент.Области.НаимОрг.Значение;
				ЗаполнитьСведенияОбОрганизацииНаСервере();
				ТабличныйДокумент.Области.НаимОрг.Значение = НаимОргВосстановленное;
			КонецЕсли;
			
		Иначе
			
			ЗаполнитьСведенияОбОрганизацииНаСервере();
			
		КонецЕсли;
		
	КонецЕсли;
	
	СтруктураРеквизитовФормы.НаимОрганизации = СтруктураРеквизитовФормы.Организация.Наименование;
	
	Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено
		И НЕ ЗначениеЗаполнено(СтруктураРеквизитовФормы.мСкопированаФорма) Тогда
		
		Если НЕ СтруктураРеквизитовФормы.ИП Тогда
			Если Сред(СокрЛП(ТабличныйДокумент.Области.КПП.Значение), 5, 2) = "50" Тогда
				ТабличныйДокумент.Области.ПоМесту.Значение = "213";
			КонецЕсли;
		КонецЕсли;
		
		СведОбОрг = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(
			СтруктураРеквизитовФормы.Организация, ДатаПодписи, "ОКТМО");
		ТаблицаСтраницыРаздел1[0].Данные[0].Значение.П000010001003 = СокрЛП(СведОбОрг.ОКТМО);
		
	КонецЕсли;
	
	Если НЕ БезОткрытияФормы Тогда
		СформироватьСпискиВыбора();
		РегламентированнаяОтчетностьКлиентСервер.ПоказатьКнопкиПечати(ЭтаФорма);
	КонецЕсли;
	
	ОтобразитьНомерКорректировки(ЭтаФорма);
	
	СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
	НомерКорректировки = ?(СтруктураРеквизитовФормы.ВидДокумента = 0, 0, НомерКорректировки);
	ТабличныйДокумент.Области.НомерКорректировки.Значение = Строка(НомерКорректировки);
	ЗаполнитьДатуВЯчейкахНаСервере();
	РегламентированнаяОтчетность.ПолучитьЗначениеОКВЭД(ДатаПодписи, СтруктураРеквизитовФормы);
	
	РегламентированнаяОтчетность.ДобавитьКнопкуПрисоединенныеФайлы(ЭтаФорма);
	
	РегламентированнаяОтчетностьКлиентСервер.ПриИнициализацииФормыРегламентированногоОтчета(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Функция НачальноеЗначениеНаименованияОрганизации()
	
	Если НЕ СтруктураРеквизитовФормы.ИП Тогда
		
		СтрокаСведений = "НаимЮЛПол";
		
		СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(
			СтруктураРеквизитовФормы.Организация, ДатаПодписи, СтрокаСведений);
		
		НаимОрганизации = "";
		СведенияОбОрганизации.Свойство("НаимЮлПол", НаимОрганизации);
		
		Возврат СокрЛП(НаимОрганизации);
		
	Иначе
		
		Возврат "";
		
	КонецЕсли;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьПериодОтчета(Форма)
	
	ЗаполненКодФормыРеорганизации = ЗначениеЗаполнено(Форма.ТабличныйДокумент.Области.КодФормыРеорганизации.Значение);
	МесяцОкончания = Месяц(Форма.СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	
	Если ЗаполненКодФормыРеорганизации Тогда
		КодОтчетногоПериода = МесяцОкончания + 70;
	Иначе
		КодОтчетногоПериода = МесяцОкончания;
	КонецЕсли;
	
	Форма.ТабличныйДокумент.Области.Период.Значение = Формат(КодОтчетногоПериода, "ЧЦ=2; ЧВН=");
	
	Форма.ТабличныйДокумент.Области.ОтчетГод.Значение = Формат(
		Год(Форма.СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета), "ЧГ=");
	
КонецПроцедуры

&НаСервере
Процедура ФормироватьСтруктуруСтраницОтчета() Экспорт
	
	мДеревоСтраницОтчета.ПолучитьЭлементы().Очистить();
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы        = "Титульный";
	СтрокаУровня1.Представление      = "Титульный лист";
	СтрокаУровня1.ОриентацияСтраницы = "Портрет";
	СтрокаУровня1.ВыводНаПечать      = 1;
	СтрокаУровня1.ПоказатьСтраницу   = 1;
	СтрокаУровня1.ВыгрузитьСтраницу  = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы        = "Раздел1";
	СтрокаУровня1.Представление      = "Раздел 1";
	СтрокаУровня1.ОриентацияСтраницы = "Портрет";
	СтрокаУровня1.ВыводНаПечать      = 1;
	СтрокаУровня1.ПоказатьСтраницу   = 1;
	СтрокаУровня1.ВыгрузитьСтраницу  = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы        = "Раздел2";
	СтрокаУровня1.Представление      = "Раздел 2";
	СтрокаУровня1.ОриентацияСтраницы = "Портрет";
	СтрокаУровня1.ВыводНаПечать      = 1;
	СтрокаУровня1.ПоказатьСтраницу   = 1;
	СтрокаУровня1.ВыгрузитьСтраницу  = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы        = "Раздел3";
	СтрокаУровня1.Представление      = "Раздел 3";
	СтрокаУровня1.ОриентацияСтраницы = "Портрет";
	СтрокаУровня1.ВыводНаПечать      = 1;
	СтрокаУровня1.ПоказатьСтраницу   = 1;
	СтрокаУровня1.ВыгрузитьСтраницу  = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы        = "Приложение1";
	СтрокаУровня1.Представление      = "Приложение 1";
	СтрокаУровня1.ОриентацияСтраницы = "Портрет";
	СтрокаУровня1.ВыводНаПечать      = 1;
	СтрокаУровня1.ПоказатьСтраницу   = 1;
	СтрокаУровня1.ВыгрузитьСтраницу  = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы        = "Приложение21";
	СтрокаУровня1.Представление      = "Приложение 2";
	СтрокаУровня1.ОриентацияСтраницы = "Портрет";
	СтрокаУровня1.ВыводНаПечать      = 1;
	СтрокаУровня1.ПоказатьСтраницу   = 1;
	СтрокаУровня1.ВыгрузитьСтраницу  = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы        = "Приложение3";
	СтрокаУровня1.Представление      = "Приложение 3";
	СтрокаУровня1.ОриентацияСтраницы = "Портрет";
	СтрокаУровня1.ВыводНаПечать      = 1;
	СтрокаУровня1.ПоказатьСтраницу   = 1;
	СтрокаУровня1.ВыгрузитьСтраницу  = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы        = "Приложение4";
	СтрокаУровня1.Представление      = "Приложение 4";
	СтрокаУровня1.ОриентацияСтраницы = "Портрет";
	СтрокаУровня1.ВыводНаПечать      = 1;
	СтрокаУровня1.ПоказатьСтраницу   = 1;
	СтрокаУровня1.ВыгрузитьСтраницу  = 2;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНачальныеНастройки() Экспорт
	
	ПолучитьТаблицуСоставаПоказателей();
	ТаблицаСоставПоказателей.Очистить();
	
	МакетСоставаПоказателей = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(СтруктураРеквизитовФормы.мСоставПоказателей);
	
	Для Инд = 0 По МакетСоставаПоказателей.Области.Количество() - 1 Цикл
		
		ТекОбласть  = МакетСоставаПоказателей.Области[Инд];
		ИмяСтраницы = ТекОбласть.Имя;
		
		Если ИмяСтраницы = "Приложение21" ИЛИ ИмяСтраницы = "Приложение22" Тогда
			Продолжить;
		КонецЕсли;
		
		ЭтаФорма["ТаблицаВариантыЗаполнения" + ИмяСтраницы].Добавить();
		
		Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
			КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
			ИмяПоказателя = КодПоказателя;
			
			Если КодПоказателя = "===" Тогда
				Прервать;
			КонецЕсли;
			
			Если Лев(КодПоказателя, 2) = "//" Тогда
				Продолжить;
			КонецЕсли;
			
			КодПоказателяПоФорме = СокрЛП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
			ПризнМногострочность = СокрЛП(МакетСоставаПоказателей.Область(Ном, 3).Текст);
			ТипДанныхРеквизита   = СокрЛП(МакетСоставаПоказателей.Область(Ном, 4).Текст);
			стрКолСтрокИсходный  = СокрЛП(МакетСоставаПоказателей.Область(Ном, 5).Текст);
			стрВариантЗаполнения = РегламентированнаяОтчетность.ПолучитьВариантЗаполненияПоказателяРегОтчета(МакетСоставаПоказателей, Ном);
			КодПоказателяПоСтруктуре = СокрЛП(МакетСоставаПоказателей.Область(Ном, 9).Текст);
			
			чКолСтрокИсходный  = ? (ПустаяСтрока(стрКолСтрокИсходный),  0, Число(стрКолСтрокИсходный));
			чВариантЗаполнения = ? (ПустаяСтрока(стрВариантЗаполнения), 0, Число(стрВариантЗаполнения));
			
			НоваяСтрока = ТаблицаСоставПоказателей.Добавить();
			НоваяСтрока.ИмяПоляТаблДокумента   = ИмяСтраницы;
			НоваяСтрока.КодПоказателяПоСоставу = КодПоказателя;
			НоваяСтрока.КодПоказателяПоФорме   = КодПоказателяПоФорме;
			НоваяСтрока.ПризнМногострочности   = ПризнМногострочность;
			НоваяСтрока.ТипДанныхПоказателя    = ТипДанныхРеквизита;
			НоваяСтрока.КодПоказателяПоСтруктуре = КодПоказателяпоСтруктуре;
			
			Если чВариантЗаполнения <> 0 Тогда
				НоваяСтрока = ЭтаФорма["ТаблицаВариантыЗаполнения" + ИмяСтраницы][0].ТаблицаВариантовЗаполнения.Добавить();
				НоваяСтрока.КодПоказателя      = ? (Не ПустаяСтрока(КодПоказателяПоФорме), КодПоказателяПоФорме, КодПоказателя);
				НоваяСтрока.ВариантЗаполнения  = чВариантЗаполнения;
				НоваяСтрока.КодПоказателяПоСтруктуре  = КодПоказателяПоСтруктуре;
			КонецЕсли;
			
		КонецЦикла;
		
		Если ЭтаФорма["ТаблицаВариантыЗаполнения" + ИмяСтраницы][0].ТаблицаВариантовЗаполнения.Количество() > 0 Тогда	
			мСтруктураВариантыЗаполнения.Вставить(ИмяСтраницы, ИмяСтраницы);
			мСтруктураВариантыЗаполненияЭталон.Вставить(ИмяСтраницы, ИмяСтраницы);
		Конецесли;
		
	КонецЦикла;
	
	СтруктураРеквизитовФормы.АдресВоВремХранилищеТаблицаСоставПоказателей
		= ПоместитьВоВременноеХранилище(ТаблицаСоставПоказателей, УникальныйИдентификатор);
	
КонецПроцедуры

&НаСервере
Процедура СформироватьСпискиВыбора()
	
	МакетСоставаПоказателей = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет("СпискиВыбора2016Кв2");
	
	КоллекцияСписковВыбора = Новый Соответствие;
	Для Каждого Область Из МакетСоставаПоказателей.Области Цикл
		Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Строки Тогда
			ВерхОбласти = Область.Верх;
			НизОбласти = Область.Низ;
			ТаблСписка = Новый ТаблицаЗначений;
			ТаблСписка.Колонки.Добавить("Код",,, МакетСоставаПоказателей.Область(ВерхОбласти, 1, ВерхОбласти, 1).ШиринаКолонки);
			ТаблСписка.Колонки.Добавить("Название",,, МакетСоставаПоказателей.Область(ВерхОбласти, 2, ВерхОбласти, 2).ШиринаКолонки);
			Для НомСтр = ВерхОбласти По НизОбласти Цикл
				КодПоказателя = СокрП(МакетСоставаПоказателей.Область(НомСтр, 1).Текст);
				Если КодПоказателя <> "###" Тогда
					НовСтрока = ТаблСписка.Добавить();
					НовСтрока.Код = КодПоказателя;
					НовСтрока.Название = СокрП(МакетСоставаПоказателей.Область(НомСтр, 2).Текст);
				КонецЕсли;
			КонецЦикла;
			КоллекцияСписковВыбора.Вставить(Область.Имя, ТаблСписка);
		КонецЕсли;
	КонецЦикла;
	
	СвойстваПоказателей.Очистить();
	
	Если СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета >= '20190101' Тогда
		ИмяСекции_КодыПоказателей_Раздел21 = "КодыПоказателей_Раздел21_20190101";
		ИмяСекции_КодыПоказателей_Раздел22 = "КодыПоказателей_Раздел22_20190101";
		ИмяСекции_КодыПоказателей_Раздел24 = "КодыПоказателей_Раздел24_20180101";
		ИмяСекции_КодыПоказателей_Раздел25 = "КодыПоказателей_Раздел25_20180101";
		ИмяСекции_КодыПоказателей_Приложение1 = "КодыПоказателей_Приложение1_20180101";
	ИначеЕсли СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета >= '20180101' Тогда
		ИмяСекции_КодыПоказателей_Раздел21 = "КодыПоказателей_Раздел21_20180101";
		ИмяСекции_КодыПоказателей_Раздел22 = "КодыПоказателей_Раздел22_20180101";
		ИмяСекции_КодыПоказателей_Раздел24 = "КодыПоказателей_Раздел24_20180101";
		ИмяСекции_КодыПоказателей_Раздел25 = "КодыПоказателей_Раздел25_20180101";
		ИмяСекции_КодыПоказателей_Приложение1 = "КодыПоказателей_Приложение1_20180101";
	Иначе
		ИмяСекции_КодыПоказателей_Раздел21 = "КодыПоказателей_Раздел21";
		ИмяСекции_КодыПоказателей_Раздел22 = "КодыПоказателей_Раздел22";
		ИмяСекции_КодыПоказателей_Раздел24 = "КодыПоказателей_Раздел24";
		ИмяСекции_КодыПоказателей_Раздел25 = "КодыПоказателей_Раздел25";
		ИмяСекции_КодыПоказателей_Приложение1 = "КодыПоказателей_Приложение1";
	КонецЕсли;
	
	Если СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета >= '20190101' Тогда
		ИмяСекции_КБК = "КБК_20190101";
		ИмяСекции_КодыВидаПодакцизныхТоваров_Раздел2 = "КодыВидаПодакцизныхТоваров_БезПриродногоГаза_20190101";
		ИмяСекции_КодыВидаПодакцизныхТоваров_Приложение1 = "КодыВидаПодакцизныхТоваров_БезПриродногоГаза_Приложение1_20190101";
		ИмяСекции_КодыВидаПодакцизныхТоваров_Приложение21 = "КодыВидаПодакцизныхТоваров_20190101";
	ИначеЕсли СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета >= '20180101' Тогда
		ИмяСекции_КБК = "КБК_20170101";
		ИмяСекции_КодыВидаПодакцизныхТоваров_Раздел2 = "КодыВидаПодакцизныхТоваров_БезПриродногоГаза_20180101";
		ИмяСекции_КодыВидаПодакцизныхТоваров_Приложение1 = "КодыВидаПодакцизныхТоваров_БезПриродногоГаза_Приложение1_20180101";
		ИмяСекции_КодыВидаПодакцизныхТоваров_Приложение21 = "КодыВидаПодакцизныхТоваров_20180101";
	ИначеЕсли СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета >= '20170101' Тогда
		ИмяСекции_КБК = "КБК_20170101";
		ИмяСекции_КодыВидаПодакцизныхТоваров_Раздел2 = "КодыВидаПодакцизныхТоваров_БезПриродногоГаза_20170101";
		ИмяСекции_КодыВидаПодакцизныхТоваров_Приложение1 = "КодыВидаПодакцизныхТоваров_БезПриродногоГаза";
		ИмяСекции_КодыВидаПодакцизныхТоваров_Приложение21 = "КодыВидаПодакцизныхТоваров_20170101";
	Иначе
		ИмяСекции_КБК = "КБК";
		ИмяСекции_КодыВидаПодакцизныхТоваров_Раздел2 = "КодыВидаПодакцизныхТоваров_БезПриродногоГаза";
		ИмяСекции_КодыВидаПодакцизныхТоваров_Приложение1 = "КодыВидаПодакцизныхТоваров_БезПриродногоГаза";
		ИмяСекции_КодыВидаПодакцизныхТоваров_Приложение21 = "КодыВидаПодакцизныхТоваров";
	КонецЕсли;
	
	// Титульный лист.
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "ПоМесту", 3, ,
		"Выбор места представления", КоллекцияСписковВыбора["МестаПредставления"]);
	Если СтруктураРеквизитовФормы.ИП Тогда
		ИмяСекцииФормРеорг = "ФормыРеорганизацииИП";
	Иначе
		ИмяСекцииФормРеорг = "ФормыРеорганизацииОрг";
	КонецЕсли;
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "КодФормыРеорганизации", 1, ,
		"Выбор кода формы реорганизации (ликвидации)", КоллекцияСписковВыбора[ИмяСекцииФормРеорг]);
	
	//Раздел 1.
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000010000001", 1, ,
		"Выбор признака наличия свидетельства (свидетельств) / сертификата (свидетельства) эксплуатанта",
		КоллекцияСписковВыбора["ПризнакиНаличияСвидетельства"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000010000002", 1, ,
		"Выбор признака налогоплательщика", КоллекцияСписковВыбора["ПризнакиНалогоплательщика"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000010000101", 20, ,
		"Выбор кода бюджетной классификации", КоллекцияСписковВыбора[ИмяСекции_КБК]);
	
	//Раздел 2.
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000020001003", 3, ,
		"Выбор кода вида подакцизного товара", КоллекцияСписковВыбора[ИмяСекции_КодыВидаПодакцизныхТоваров_Раздел2]);
	
	//Раздел 2.1.
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000210000101", 5, ,
		"Выбор кода показателя", КоллекцияСписковВыбора[ИмяСекции_КодыПоказателей_Раздел21]);
	
	//Раздел 2.2.
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000220000101", 5, ,
		"Выбор кода показателя", КоллекцияСписковВыбора[ИмяСекции_КодыПоказателей_Раздел22]);
	
	//Раздел 2.4.
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000240000101", 5, ,
		"Выбор кода показателя", КоллекцияСписковВыбора[ИмяСекции_КодыПоказателей_Раздел24]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000240000104", 2, ,
		"Выбор кода налогового периода", КоллекцияСписковВыбора["КодыПериодов"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000240000202", 2, ,
		"Выбор кода налогового периода", КоллекцияСписковВыбора["КодыПериодов"]);
	
	//Раздел 2.5.
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000250000101", 5, ,
		"Выбор кода показателя", КоллекцияСписковВыбора[ИмяСекции_КодыПоказателей_Раздел25]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000250000104", 1, ,
		"Выбор признака наличия банковской гарантии", КоллекцияСписковВыбора["ПризнакиНаличияБанковскойГарантии"]);
	
	//Раздел 2.6.
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000260000101", 5, ,
		"Выбор кода показателя", КоллекцияСписковВыбора["КодыПоказателей_Раздел26"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000260000104", 2, ,
		"Выбор кода налогового периода", КоллекцияСписковВыбора["КодыПериодов"]);
	
	//Раздел 3.
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000030001003", 3, ,
		"Выбор кода вида подакцизного товара", КоллекцияСписковВыбора["КодыВидаПодакцизныхТоваров_Раздел3"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000030002003", 5, ,
		"Выбор кода показателя", КоллекцияСписковВыбора["КодыПоказателей_Раздел3"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000030003003", 20, ,
		"Выбор кода бюджетной классификации", КоллекцияСписковВыбора["КБК_Раздел3"]);
	
	//Приложение 1.
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П001010001003", 3, ,
		"Выбор кода вида подакцизного товара", КоллекцияСписковВыбора[ИмяСекции_КодыВидаПодакцизныхТоваров_Приложение1]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П001010000101", 5, ,
		"Выбор кода показателя", КоллекцияСписковВыбора[ИмяСекции_КодыПоказателей_Приложение1]);
	
	//Приложение 2.1.
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П001020001003", 3, ,
		"Выбор кода вида подакцизного товара", КоллекцияСписковВыбора[ИмяСекции_КодыВидаПодакцизныхТоваров_Приложение21]);
	
	//Приложение 2.2.
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П001020011003", 3, ,
		"Выбор кода вида подакцизного товара", КоллекцияСписковВыбора["КодыВидаПодакцизныхТоваров"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П001020017005", 2, ,
		"Выбор кода налогового периода", КоллекцияСписковВыбора["КодыПериодов"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П001020018005", 2, ,
		"Выбор кода налогового периода", КоллекцияСписковВыбора["КодыПериодов"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П001020020005", 2, ,
		"Выбор кода налогового периода", КоллекцияСписковВыбора["КодыПериодов"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П001020021005", 2, ,
		"Выбор кода налогового периода", КоллекцияСписковВыбора["КодыПериодов"]);
	
КонецПроцедуры

&НаКлиенте
Процедура ВвестиПоказатель(Элемент, Область, КодПоказателя, Знач ЭтоСумма, Знач ТекстВыбора, ТаблицаВыбора, СтандартнаяОбработка, КолонкаПоиска = "Код") Экспорт
	
	Если ТаблицаВыбора = Неопределено ИЛИ СтруктураРеквизитовФормы.мАвтоВыборКодов Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	Если Область.Имя = КодПоказателя
		ИЛИ РегламентированнаяОтчетностьКлиентСервер.ПоказательВходитВМногострочнуюЧасть(ЭтаФорма, КодПоказателя) > 0 Тогда
		ИсходноеЗначение = ?(ТипЗнч(Область.Значение) = Тип("Строка"), СокрЛП(Область.Значение), Область.Значение);
	Иначе
		Разделитель = ?(Лев(Область.Имя, СтрДлина(КодПоказателя) + 1) = КодПоказателя + "_", "_", "");
		ИндексОбласти = 1;
		ИсходноеЗначение = "";
		Пока ЭтаФорма[ТекущийЭлемент.Имя].Области.Найти(КодПоказателя + Разделитель + Формат(ИндексОбласти, "ЧГ=")) <> Неопределено Цикл
			ИсходноеЗначение = ИсходноеЗначение + Строка(ЭтаФорма[ТекущийЭлемент.Имя].Области[КодПоказателя + Разделитель + Формат(ИндексОбласти, "ЧГ=")].Значение);
			ИндексОбласти = ИндексОбласти + 1;
		КонецЦикла;
		ИсходноеЗначение = СокрЛП(ИсходноеЗначение);
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Заголовок",          ТекстВыбора);
	ПараметрыФормы.Вставить("ТаблицаЗначений",    ТаблицаВыбора);
	ПараметрыФормы.Вставить("СтруктураДляПоиска", Новый Структура(КолонкаПоиска, ИсходноеЗначение));
	
	ДополнительныеПараметры = Новый Структура(
		"ИндексОбласти, КодПоказателя, КолонкаПоиска, Область, Разделитель, Элемент",
		ИндексОбласти, КодПоказателя, КолонкаПоиска, Область, Разделитель, Элемент);
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ВвестиПоказательЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ОткрытьФорму("Обработка.ОбщиеОбъектыРеглОтчетности.Форма.ФормаВыбораЗначенияИзТаблицы",
		ПараметрыФормы, ЭтаФорма,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ВвестиПоказательЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	ИндексОбласти = ДополнительныеПараметры.ИндексОбласти;
	КодПоказателя = ДополнительныеПараметры.КодПоказателя;
	КолонкаПоиска = ДополнительныеПараметры.КолонкаПоиска;
	Область = ДополнительныеПараметры.Область;
	Разделитель = ДополнительныеПараметры.Разделитель;
	Элемент = ДополнительныеПараметры.Элемент;
	
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Область.Имя = КодПоказателя
		ИЛИ РегламентированнаяОтчетностьКлиентСервер.ПоказательВходитВМногострочнуюЧасть(ЭтаФорма, КодПоказателя) > 0 Тогда
		Область.Значение = РезультатВыбора[КолонкаПоиска];
	Иначе
		СтрокаРезультатВыбора = Строка(РезультатВыбора[КолонкаПоиска]);
		Для Инд = СтрДлина(СтрокаРезультатВыбора) + 1 По ИндексОбласти - 1 Цикл
			СтрокаРезультатВыбора = " " + РезультатВыбора[КолонкаПоиска];
		КонецЦикла;
		Для Инд = 1 По ИндексОбласти - 1 Цикл
			ЭтаФорма[ТекущийЭлемент.Имя].Области[КодПоказателя + Разделитель + Формат(Инд, "ЧГ=")].Значение = СокрЛП(Сред(РезультатВыбора[КолонкаПоиска], Инд, 1));
		КонецЦикла;
	КонецЕсли;
	
	Модифицированность = Истина;
	
	ТабличныйДокументПриИзмененииСодержимогоОбласти(Элемент, Область);
	
	Если КодПоказателя = "КодФормыРеорганизации" Тогда
		УстановитьДоступностьОбластей(ЭтаФорма, "Титульный");
		ЗаполнитьПериодОтчета(ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СообщитьВТС(Описание, Раздел, ИмяЯчейки, ФИО = "")
	
	РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, Описание, Раздел, ИмяЯчейки, ФИО);
	
КонецПроцедуры

&НаСервере
Функция ИзвлечьСтруктуруXML()
	
	ДеревоСтруктуры = Новый ДеревоЗначений;
	ДеревоСтруктуры.Колонки.Добавить("Код");
	ДеревоСтруктуры.Колонки.Добавить("Тип");
	ДеревоСтруктуры.Колонки.Добавить("Формат");
	ДеревоСтруктуры.Колонки.Добавить("МинРазмерность");
	ДеревоСтруктуры.Колонки.Добавить("МаксРазмерность");
	ДеревоСтруктуры.Колонки.Добавить("Обязательность");
	ДеревоСтруктуры.Колонки.Добавить("Многостраничность");
	ДеревоСтруктуры.Колонки.Добавить("Многострочность");
	ДеревоСтруктуры.Колонки.Добавить("Раздел");
	ДеревоСтруктуры.Колонки.Добавить("Ключ");
	ДеревоСтруктуры.Колонки.Добавить("Условие");
	ДеревоСтруктуры.Колонки.Добавить("ЗначениеПоУмолчанию");
	ДеревоСтруктуры.Колонки.Добавить("Значение");
	ДеревоСтруктуры.Колонки.Добавить("Представление");
	ДеревоСтруктуры.Колонки.Добавить("Показатели");
	
	Макет = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет("СхемаВыгрузки501");

	ВысотаТаблицы = Макет.ВысотаТаблицы;
	
	УчтенныеГруппы = Новый Соответствие;
	
	Для Уровень = 0 По Макет.КоличествоУровнейГруппировокСтрок() - 1 Цикл
		Макет.ПоказатьУровеньГруппировокСтрок(Уровень);
		Для НомерСтроки = 2 По ВысотаТаблицы Цикл
			НомСтр = ВысотаТаблицы - НомерСтроки + 2;
			Если Макет.Область(НомСтр, 0, НомСтр, 0).Видимость И УчтенныеГруппы.Получить(НомСтр) = Неопределено Тогда
				
				РодительскийУзел = ДеревоСтруктуры;
				Если Уровень <> 0 Тогда
					Для Инд = 1 По НомСтр - 2 Цикл
						Узел = УчтенныеГруппы.Получить(НомСтр - Инд);
						Если Узел <> Неопределено Тогда
							РодительскийУзел = Узел;
							Прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				НовСтр = РодительскийУзел.Строки.Вставить(0);
				НовСтр.Код = СокрЛП(Макет.Область(НомСтр, 1, НомСтр, 1).Текст);
				НовСтр.Раздел = СокрЛП(Макет.Область(НомСтр, 2, НомСтр, 2).Текст);
				НовСтр.Ключ = СокрЛП(Макет.Область(НомСтр, 3, НомСтр, 3).Текст);
				НовСтр.Тип = СокрЛП(Макет.Область(НомСтр, 4, НомСтр, 4).Текст);
				НовСтр.Формат = СокрЛП(Макет.Область(НомСтр, 5, НомСтр, 5).Текст);
				МинРазмерность = СокрЛП(Макет.Область(НомСтр, 6, НомСтр, 6).Текст);
				НовСтр.МинРазмерность = ?(ПустаяСтрока(МинРазмерность), ?(НовСтр.Формат = "N", 99999, 0), Число(МинРазмерность));
				МаксРазмерность = СокрЛП(Макет.Область(НомСтр, 7, НомСтр, 7).Текст);
				НовСтр.МаксРазмерность = ?(ПустаяСтрока(МаксРазмерность), 99999, Число(МаксРазмерность));
				НовСтр.Обязательность = СокрЛП(Макет.Область(НомСтр, 8, НомСтр, 8).Текст);
				НовСтр.Многостраничность = НЕ ПустаяСтрока(Макет.Область(НомСтр, 9, НомСтр, 9).Текст);
				НовСтр.Многострочность = НЕ ПустаяСтрока(Макет.Область(НомСтр, 10, НомСтр, 10).Текст);
				НовСтр.Условие = СокрЛП(Макет.Область(НомСтр, 11, НомСтр, 11).Текст);
				НовСтр.ЗначениеПоУмолчанию = СокрЛП(Макет.Область(НомСтр, 12, НомСтр, 12).Текст);
				НовСтр.Представление = СокрЛП(Макет.Область(НомСтр, 13, НомСтр, 13).Текст);
				
				УчтенныеГруппы.Вставить(НомСтр, НовСтр);
				
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат ДеревоСтруктуры;
	
КонецФункции

&НаСервере
Функция ПроверитьПоказатели() Экспорт
	
	СформироватьСтруктуруПоказателей();
	ДеревоВыгрузки = ИзвлечьСтруктуруXML();
	ПараметрыВыгрузки = СформироватьСтруктуруПараметров();
	Если НЕ ПроверитьВозможностьВыгрузки(ПараметрыВыгрузки, ДеревоВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	ЗаполнитьДанными(ДеревоВыгрузки, ПараметрыВыгрузки);
	Если НЕ ПроверитьДанные(ДеревоВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция СформироватьСтруктуруПоказателей()
	
	мДанныеОтчета = Новый Структура;
	
	СохрСтруктура = СохраненныеДанныеОтчета();
	ПоказателиОтчета = СохрСтруктура.ПоказателиОтчета;
	Для Каждого Раздел Из ПоказателиОтчета Цикл
		мДанныеОтчета.Вставить(СтрЗаменить(Раздел.Ключ, "ПолеТабличногоДокумента", ""), РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(Раздел.Значение));
	КонецЦикла;
	
	ТекущийРаздел = Неопределено;
	Если мСтруктураМногостраничныхРазделов.Свойство(СтруктураРеквизитовФормы.НаимТекущегоРаздела, ТекущийРаздел) Тогда
		АктивнаяСтраница = ЭтаФорма[ТекущийРаздел].НайтиСтроки(Новый Структура("АктивнаяСтраница", Истина));
		Если АктивнаяСтраница.Количество() > 0 Тогда
			АктивнаяСтраница = АктивнаяСтраница[0];
			ИндексАктивнойСтраницы = ЭтаФорма[ТекущийРаздел].Индекс(АктивнаяСтраница);
		КонецЕсли;
	КонецЕсли;

	Для Каждого ЭлементСтруктуры Из СохрСтруктура.ДанныеМногостраничныхРазделов Цикл	
		
		НайденноеЗначение = Неопределено;
		
		мСтруктураМногостраничныхРазделов.Свойство(ЭлементСтруктуры.Ключ, НайденноеЗначение);
		
		Если НЕ НайденноеЗначение = Неопределено Тогда
			
			НайденноеЗначение = ЭтаФорма[НайденноеЗначение];
			
			ЗначениеВДанныеФормы(ЭлементСтруктуры.Значение, НайденноеЗначение);
			
			Если НайденноеЗначение[0].Свойство("Данные") Тогда
				
				Для Каждого СтрокаТаблЗнач Из НайденноеЗначение Цикл
					
					Если ТипЗнч(СтрокаТаблЗнач.Данные) = Тип("СписокЗначений") Тогда
						
						СтрокаТаблЗнач.Данные.Очистить();
						СтрокаТаблЗнач.Данные.Добавить(ЭлементСтруктуры.Значение[НайденноеЗначение.Индекс(СтрокаТаблЗнач)].Данные);
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
			Если НайденноеЗначение[0].Свойство("ДанныеДопСтрок") Тогда
				
				Ном = 0;
				
				Для Каждого СтрокаТаблЗнач Из ЭлементСтруктуры.Значение Цикл
					
					Если ТипЗнч(СтрокаТаблЗнач.ДанныеДопСтрок) = Тип("Структура") Тогда
						
						СтруктураДопСтрок = Новый Структура;
						
						Для Каждого ЭлСтруктуры Из СтрокаТаблЗнач.ДанныеДопСтрок Цикл
							
							ТаблЗнач = ЭлСтруктуры.Значение;
							
							СтрокаТаблЗначДанныеДопСтрок = ЭтаФорма["Хранилище" + ЭлСтруктуры.Ключ].Добавить().Таблица;
							
							ЗначениеВДанныеФормы(ТаблЗнач, СтрокаТаблЗначДанныеДопСтрок);
							
							СтруктураДопСтрок.Вставить(ЭлСтруктуры.Ключ, СтрокаТаблЗначДанныеДопСтрок);
							
						КонецЦикла;
						
						НайденноеЗначение[Ном].ДанныеДопСтрок.Добавить(СтруктураДопСтрок, "ДанныеФормыКоллекцияТаблицаДопСтрокРаздела");
						
					ИначеЕсли ТипЗнч(СтрокаТаблЗнач.ДанныеДопСтрок) = Тип("ТаблицаЗначений") Тогда
						
						СтрокаТаблЗначДанныеДопСтрок = ЭтаФорма["Хранилище" + ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ЭлементСтруктуры.Ключ)].Добавить().Таблица;
						
						ЗначениеВДанныеФормы(СтрокаТаблЗнач.ДанныеДопСтрок, СтрокаТаблЗначДанныеДопСтрок);
						
						НайденноеЗначение[Ном].ДанныеДопСтрок.Добавить(СтрокаТаблЗначДанныеДопСтрок, "ДанныеФормыКоллекцияТаблицаДопСтрокРаздела");
						
					КонецЕсли;
					
					Ном = Ном + 1;
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого Раздел Из мСтруктураМногостраничныхРазделов Цикл
		Для Каждого Страница Из ЭтаФорма[Раздел.Значение] Цикл
			Страница.АктивнаяСтраница = Ложь;
		КонецЦикла;
	КонецЦикла;

	ТекущийРаздел = Неопределено;
	Если мСтруктураМногостраничныхРазделов.Свойство(СтруктураРеквизитовФормы.НаимТекущегоРаздела, ТекущийРаздел) Тогда
		Если ИндексАктивнойСтраницы <> Неопределено Тогда
			ЭтаФорма[ТекущийРаздел][ИндексАктивнойСтраницы].АктивнаяСтраница = Истина;
		КонецЕсли;
	КонецЕсли;

	Для Каждого Раздел Из мСтруктураМногостраничныхРазделов Цикл
		ТаблицаЛистовРаздела = ЭтаФорма[Раздел.Значение];
		Для Каждого Лист Из ТаблицаЛистовРаздела Цикл
			Лист.Данные[0].Значение = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(Лист.Данные[0].Значение);
		КонецЦикла;
		мДанныеОтчета.Вставить(Раздел.Ключ, ЭтаФорма[Раздел.Значение]);
	КонецЦикла;
	
КонецФункции

&НаСервере
Функция СформироватьСтруктуруПараметров()
	
	Титульный = мДанныеОтчета.Титульный;
	
	ПараметрыВыгрузки = Новый Структура;
	ПараметрыВыгрузки.Вставить("ВерсПрог",     РегламентированнаяОтчетность.НазваниеИВерсияПрограммы());
	ПараметрыВыгрузки.Вставить("КНД",          СтруктураРеквизитовФормы.КНД);
	ПараметрыВыгрузки.Вставить("ДатаДок",      Формат(ТекущаяДатаСеанса(), "ДФ=дд.ММ.гггг"));
	ПараметрыВыгрузки.Вставить("ГодПериодОтч", Формат(СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания, "ДФ=гггг"));
	ПараметрыВыгрузки.Вставить("ПериодОтч",    СокрЛП(Титульный.Период));
	ПараметрыВыгрузки.Вставить("КодИФНС",      СокрЛП(Титульный.НалоговыйОрган));
	ПараметрыВыгрузки.Вставить("ВидДок",       Строка(СтруктураРеквизитовФормы.мСохраненныйДок.Вид));
	ПараметрыВыгрузки.Вставить("ПоМесту",      СокрЛП(Титульный.ПоМесту));
	ПараметрыВыгрузки.Вставить("ОКВЭДОрг",     СтрЗаменить(СокрЛП(СтрЗаменить(Титульный.ОКВЭД, ".", " ")), " ", "."));
	ПараметрыВыгрузки.Вставить("ТелОрг",       СокрЛП(Титульный.ТелОрганизации));
	ПараметрыВыгрузки.Вставить("НаимОрг",      СокрЛП(Титульный.НаимОрг));
	ПараметрыВыгрузки.Вставить("ИННОрг",       СокрЛП(СтруктураРеквизитовФормы.Организация.ИНН));
	ПараметрыВыгрузки.Вставить("КППОрг",       СокрЛП(Титульный.КПП));
	ПараметрыВыгрузки.Вставить("КодИФНСПосредника",
		?(СтруктураРеквизитовФормы.Организация.КрупнейшийНалогоплательщик,
		СокрЛП(СтруктураРеквизитовФормы.Организация.КодНалоговогоОрганаПолучателя), ""));
	
	ПараметрыВыгрузки.Вставить("ТипПодписанта",        СокрЛП(Титульный.ПрПодп));
	ПараметрыВыгрузки.Вставить("НаимОргПредставителя", СокрЛП(Титульный.ОргУп));
	ПараметрыВыгрузки.Вставить("НаимДокПредставителя", СокрЛП(Титульный.ДокУпПред));
	
	ФИОИП = РегламентированнаяОтчетность.РазложитьФИО(Титульный.НаимОрг);
	ПараметрыВыгрузки.Вставить("ФамилияИП",  ФИОИП.Фамилия);
	ПараметрыВыгрузки.Вставить("ИмяИП",      ФИОИП.Имя);
	ПараметрыВыгрузки.Вставить("ОтчествоИП", ФИОИП.Отчество);
	
	ПараметрыВыгрузки.Вставить("ЭтоПБОЮЛ",
		НЕ РегламентированнаяОтчетностьВызовСервера.ЭтоЮридическоеЛицо(СтруктураРеквизитовФормы.Организация));
	
	СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(
		СтруктураРеквизитовФормы.Организация, ТекущаяДатаСеанса(), "ФИОБух, ТелБух");
	Если ПараметрыВыгрузки.ЭтоПБОЮЛ И ПустаяСтрока(СведенияОбОрганизации.ФИОБух) Тогда
		ПараметрыВыгрузки.Вставить("ДолжОтв",     "Индивидуальный предприниматель");
		ПараметрыВыгрузки.Вставить("ФамилияОтв",  ФИОИП.Фамилия);
		ПараметрыВыгрузки.Вставить("ИмяОтв",      ФИОИП.Имя);
		ПараметрыВыгрузки.Вставить("ОтчествоОтв", ФИОИП.Отчество);
		ПараметрыВыгрузки.Вставить("ТелОтв",      ?(ПараметрыВыгрузки.Свойство("ТелОрг"), ПараметрыВыгрузки.ТелОрг, ""));
	Иначе
		ФИОБух = РегламентированнаяОтчетность.РазложитьФИО(СведенияОбОрганизации.ФИОБух);
		ПараметрыВыгрузки.Вставить("ДолжОтв",     "Главный бухгалтер");
		ПараметрыВыгрузки.Вставить("ФамилияОтв",  ФИОБух.Фамилия);
		ПараметрыВыгрузки.Вставить("ИмяОтв",      ФИОБух.Имя);
		ПараметрыВыгрузки.Вставить("ОтчествоОтв", ФИОБух.Отчество);
		ПараметрыВыгрузки.Вставить("ТелОтв",      СведенияОбОрганизации.ТелБух);
	КонецЕсли;
	
	ФИОПодписанта = РегламентированнаяОтчетность.РазложитьФИО(Титульный.ОргПодписант);
	ПараметрыВыгрузки.Вставить("ФамилияПодписанта",  ФИОПодписанта.Фамилия);
	ПараметрыВыгрузки.Вставить("ИмяПодписанта",      ФИОПодписанта.Имя);
	ПараметрыВыгрузки.Вставить("ОтчествоПодписанта", ФИОПодписанта.Отчество);
	
	ПараметрыВыгрузки.Вставить("ПрефиксИмениФайлаВыгрузки", "NO_AKCAVNEF");
	
	ПараметрыВыгрузки.Вставить("ИмяКлючевогоУзлаСодержательнойЧасти", "АкцАвтоНефт");
	
	ПараметрыВыгрузки.Вставить("ИдФайл", СформироватьИдФайл(ПараметрыВыгрузки));
	
	ПараметрыВыгрузки.Вставить("ФормРеорг",  СокрЛП(Титульный.КодФормыРеорганизации));
	ПараметрыВыгрузки.Вставить("ИННЮЛРеорг", СокрЛП(Титульный.ИННРеорганизованнойОрганизации));
	ПараметрыВыгрузки.Вставить("КППРеорг",   СокрЛП(Титульный.КППРеорганизованнойОрганизации));
	
	Возврат ПараметрыВыгрузки;
	
КонецФункции

&НаСервере
Функция СформироватьИдФайл(ПараметрыВыгрузки)
	
	Возврат ПараметрыВыгрузки.ПрефиксИмениФайлаВыгрузки
	+ "_" + ?(ЗначениеЗаполнено(ПараметрыВыгрузки.КодИФНСПосредника), ПараметрыВыгрузки.КодИФНСПосредника, ПараметрыВыгрузки.КодИФНС)
	+ "_" + ПараметрыВыгрузки.КодИФНС
	+ "_" + ?(ПараметрыВыгрузки.Свойство("ЭтоПБОЮЛ") И ПараметрыВыгрузки.ЭтоПБОЮЛ, СокрЛП(ПараметрыВыгрузки.ИННОрг), СокрЛП(ПараметрыВыгрузки.ИННОрг) + СокрЛП(ПараметрыВыгрузки.КППОрг))
	+ "_" + Формат(ТекущаяДатаСеанса(), "ДФ=ггггММдд")
	+ "_" + Строка(Новый УникальныйИдентификатор);
	
КонецФункции

&НаСервере
Функция ПроверитьВозможностьВыгрузки(ПараметрыВыгрузки, ДеревоВыгрузки)
	
	СтатусПроверки = Истина;
	
	ДанныеМногоуровневыхРазделов = Новый Структура;
	СохрСтруктура = СохраненныеДанныеОтчета();
	Для каждого ЭлементСтруктуры Из СохрСтруктура.ДанныеМногоуровневыхРазделов Цикл
		ДанныеМногоуровневыхРазделов.Вставить(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Значение);
	КонецЦикла;
	
	ВозможныеКодыПоМесту = Новый Массив;
	ВозможныеКодыПоМесту.Добавить("120");
	ВозможныеКодыПоМесту.Добавить("213");
	ВозможныеКодыПоМесту.Добавить("214");
	ВозможныеКодыПоМесту.Добавить("215");
	ВозможныеКодыПоМесту.Добавить("216");
	ВозможныеКодыПоМесту.Добавить("220");
	ВозможныеКодыПоМесту.Добавить("331");
	
	ВозможныеКодыПериода = "01|02|03|04|05|06|07|08|09|10|11|12|71|72|73|74|75|76|77|78|79|80|81|82";
	
	ВозможныеКодыФормыРеорганизции = "0|1|2|3|5|6";
	
	ВозможныеКодыПризнакаНпл = Новый Массив;
	ВозможныеКодыПризнакаНпл.Добавить("A");
	ВозможныеКодыПризнакаНпл.Добавить("B");
	
	// Титульный лист.
	Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.ИННОрг) Тогда
		СообщитьВТС("Не задан ИНН налогоплательщика.", "Титульный", "ИНН");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если НЕ ПараметрыВыгрузки.ЭтоПБОЮЛ И НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.КППОрг) Тогда
		СообщитьВТС("Не задан КПП налогоплательщика.", "Титульный", "КПП");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.НаимОрг) Тогда
		СообщитьВТС("Не задано наименование налогоплательщика.", "Титульный", "НаимОрг");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.КодИФНС) Тогда
		СообщитьВТС("Не задан код налогового органа.", "Титульный", "НалоговыйОрган");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.ОКВЭДОрг) Тогда
		СообщитьВТС("Не задан код по ОКВЭД.", "Титульный", "ОКВЭД");
		СтатусПроверки = Ложь;
	ИначеЕсли НЕ РегламентированнаяОтчетностьКлиентСервер.ОКВЭДСоответствуетТребованиям(ПараметрыВыгрузки.ОКВЭДОрг) Тогда
		СообщитьВТС("Задано некорректное значение кода по ОКВЭД. Допустимы значения, соответствующие шаблонам: ""XX"", ""XX.X"", ""XX.XX"", ""XX.XX.X"", ""XX.XX.XX"" (X - любая цифра).", "Титульный", "ОКВЭД");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.ПоМесту) Тогда
		СообщитьВТС("На титульном листе не задан код места нахождения (учета).", "Титульный", "ПоМесту");
		СтатусПроверки = Ложь;
	ИначеЕсли ВозможныеКодыПоМесту.Найти(ПараметрыВыгрузки.ПоМесту) = Неопределено Тогда
		СообщитьВТС("На титульном листе задан некорректный код места нахождения (учета).", "Титульный", "ПоМесту");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.ПериодОтч) Тогда
		СообщитьВТС("На титульном листе не задан код налогового периода.", "Титульный", "Период");
		СтатусПроверки = Ложь;
	ИначеЕсли СтрНайти(ВозможныеКодыПериода, ПараметрыВыгрузки.ПериодОтч) = 0 Тогда
		СообщитьВТС("На титульном листе задано некорректное значение кода налогового периода.", "Титульный", "Период");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если (НЕ ПараметрыВыгрузки.ЭтоПБОЮЛ ИЛИ ПараметрыВыгрузки.ТипПодписанта = "2") И НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.ФамилияПодписанта) Тогда
		СообщитьВТС("Не задана фамилия подписанта.", "Титульный", "ОргПодписант");
		СтатусПроверки = Ложь;
	КонецЕсли;
	Если (НЕ ПараметрыВыгрузки.ЭтоПБОЮЛ ИЛИ ПараметрыВыгрузки.ТипПодписанта = "2") И НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.ИмяПодписанта) Тогда
		СообщитьВТС("Не задано имя подписанта.", "Титульный", "ОргПодписант");
		СтатусПроверки = Ложь;
	КонецЕсли;
	Если ПараметрыВыгрузки.ТипПодписанта = "2" И НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.НаимДокПредставителя) Тогда
		СообщитьВТС("Не задано наименование документа, удостоверяющего полномочия представителя.", "Титульный", "ДокУпПред");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыВыгрузки.ИННЮЛРеорг)
	 ИЛИ ЗначениеЗаполнено(ПараметрыВыгрузки.КППРеорг)
	 ИЛИ ЗначениеЗаполнено(ПараметрыВыгрузки.ФормРеорг) Тогда
		Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.ФормРеорг) Тогда
			СообщитьВТС("Не задан код формы реорганизации (ликвидации).", "Титульный", "КодФормыРеорганизации");
			СтатусПроверки = Ложь;
		КонецЕсли;
		Если ЗначениеЗаполнено(ПараметрыВыгрузки.ФормРеорг) И ПараметрыВыгрузки.ФормРеорг <> "0" Тогда
			ДлинаИННРеорг = СтрДлина(ПараметрыВыгрузки.ИННЮЛРеорг);
			Если ДлинаИННРеорг <> 10 Тогда
				СообщитьВТС("Не" + ?(ДлинаИННРеорг = 0, "", "верно") + " задан ИНН реорганизованной организации.", "Титульный", "ИННРеорганизованнойОрганизации");
				СтатусПроверки = Ложь;
			КонецЕсли;
			ДлинаКППРеорг = СтрДлина(ПараметрыВыгрузки.КППРеорг);
			Если ДлинаКППРеорг <> 9 Тогда
				СообщитьВТС("Не" + ?(ДлинаКППРеорг = 0, "", "верно") + " задан КПП реорганизованной организации.", "Титульный", "КППРеорганизованнойОрганизации");
				СтатусПроверки = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// Раздел 1.
	Раздел1 = мДанныеОтчета.Раздел1;
	Для Каждого СтраницаРаздела1 Из Раздел1 Цикл
		
		Данные1 = СтраницаРаздела1.Данные[0].Значение;
		
		НомерСтраницы1 = Раздел1.Индекс(СтраницаРаздела1) + 1;
		НомерСтраницы1_Стр = Формат(НомерСтраницы1, "ЧГ=");
		
		НалСвид = СокрЛП(Данные1.П000010000001);
		Если НЕ ЗначениеЗаполнено(НалСвид) Тогда
			СообщитьВТС("Раздел 1 -> Страница " + НомерСтраницы1_Стр
			+ ": не задан признак наличия свидетельства (свидетельств) / сертификата (свидетельства) эксплуатанта.",
			"Раздел1", "П000010000001", НомерСтраницы1);
			СтатусПроверки = Ложь;
		ИначеЕсли НЕ (НалСвид = "1" ИЛИ НалСвид = "0") Тогда
			СообщитьВТС("Раздел 1 -> Страница " + НомерСтраницы1_Стр
			+ ": неверно задан признак наличия свидетельства (свидетельств) / сертификата (свидетельства) эксплуатанта.",
			"Раздел1", "П000010000001", НомерСтраницы1);
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		ПризНП = СокрЛП(Данные1.П000010000002);
		Если ЗначениеЗаполнено(ПризНП) Тогда
			Если ВозможныеКодыПризнакаНпл.Найти(ПризНП) = Неопределено Тогда
				СообщитьВТС("Раздел 1 -> Страница " + НомерСтраницы1_Стр
				+ ": неверно задан признак налогоплательщика.",
				"Раздел1", "П000010000002", НомерСтраницы1);
				СтатусПроверки = Ложь;
			КонецЕсли;
		КонецЕсли;
		
		ОКТМО = СокрЛП(Данные1["П000010001003"]);
		ДлинаОКТМО = СтрДлина(ОКТМО);
		Если ДлинаОКТМО <> 11 И ДлинаОКТМО <> 8 Тогда
			СообщитьВТС("Раздел 1 -> Страница " + НомерСтраницы1_Стр + ": не" + ?(ДлинаОКТМО = 0, "", "верно")
			+ " задан код по ОКТМО.", "Раздел1", "П000010001003", НомерСтраницы1);
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		// Многострочная часть раздела 1.
		НомерСтроки = 1;
		ЗаполненХотяБыОдинИзБлоковРаздела1 = Ложь;
		
		Пока Данные1.Свойство("П000010000101_" + Формат(НомерСтроки, "ЧГ=")) Цикл
			
			НомерСтроки_Стр = Формат(НомерСтроки, "ЧГ=");
			
			ИмяЯчейкиКБК = "П000010000101_" + НомерСтроки_Стр;
			ИмяЯчейкиСуммаКУплате = "П000010000102_" + НомерСтроки_Стр;
			ИмяЯчейкиСуммаКУменьш = "П000010000103_" + НомерСтроки_Стр;
			
			КБК = СокрЛП(Данные1[ИмяЯчейкиКБК]);
			СуммаКУплате = Данные1[ИмяЯчейкиСуммаКУплате];
			СуммаКУменьш = Данные1[ИмяЯчейкиСуммаКУменьш];
			
			Если НЕ ЗначениеЗаполнено(КБК)
				И НЕ ЗначениеЗаполнено(СуммаКУплате)
				И НЕ ЗначениеЗаполнено(СуммаКУменьш) Тогда
				НомерСтроки = НомерСтроки + 1;
				Продолжить;
			КонецЕсли;
			
			ДлинаКБК = СтрДлина(КБК);
			Если ДлинаКБК <> 20 Тогда
				СообщитьВТС("Раздел 1 -> Страница " + НомерСтраницы1_Стр + ": в блоке " + НомерСтроки_Стр
				+ " строк 020-040 не" + ?(ДлинаКБК = 0, "", "верно") + " задан код бюджетной классификации.",
				"Раздел1", ИмяЯчейкиКБК, НомерСтраницы1);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СуммаКУплате) И ЗначениеЗаполнено(СуммаКУменьш) Тогда
				СообщитьВТС("Раздел 1 -> Страница " + НомерСтраницы1_Стр + ": в блоке " + НомерСтроки_Стр
				+ " строк 020-040 одновременно заполнены строки 030 и 040.",
				"Раздел1", ИмяЯчейкиСуммаКУплате, НомерСтраницы1);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			ЗаполненХотяБыОдинИзБлоковРаздела1 = Истина;
			
			НомерСтроки = НомерСтроки + 1;
		КонецЦикла;
		
		Если НЕ ЗаполненХотяБыОдинИзБлоковРаздела1 Тогда
			СообщитьВТС("Раздел 1 -> Страница " + НомерСтраницы1_Стр
			+ ": не заполнен ни один из блоков строк 020-040",
			"Раздел1", "П000010000101_1", НомерСтраницы1);
			СтатусПроверки = Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	// Раздел 2.
	Раздел2 = мДанныеОтчета.Раздел2;
	Для Каждого СтраницаРаздела2 Из Раздел2 Цикл
		Данные2 = СтраницаРаздела2.Данные[0].Значение;
		Если НЕ СтраницаПуста(Данные2, "Раздел2", ДеревоВыгрузки) Тогда
			НомерСтраницы2 = Раздел2.Индекс(СтраницаРаздела2) + 1;
			КодПТ2 = СокрЛП(Данные2["П000020001003"]);
			// Код вида подакцизного товара.
			КодПТ2Длина = СтрДлина(КодПТ2);
			Если КодПТ2Длина <> 3 Тогда
				СообщитьВТС("Раздел 2 -> Страница " + НомерСтраницы2
				+ ": не" + ?(КодПТ2Длина = 0, "", "верно")
				+ " задан код вида подакцизного товара.", "Раздел2", "П000020001003", НомерСтраницы2);
				СтатусПроверки = Ложь;
			КонецЕсли;
			// Многострочная часть раздела 2.1.
			ЗаполненХотяБыОдинИзБлоковРаздела21 = Ложь;
			НомерСтроки21 = 1;
			Пока Данные2.Свойство("П000210000101_" + Формат(НомерСтроки21, "ЧГ=")) Цикл
				КодПок21  = СокрЛП(Данные2["П000210000101_" + Формат(НомерСтроки21, "ЧГ=")]);
				НалБаза21 = Данные2["П000210000102_" + Формат(НомерСтроки21, "ЧГ=")];
				СумАкц21  = Данные2["П000210000103_" + Формат(НомерСтроки21, "ЧГ=")];
				Если НЕ ЗначениеЗаполнено(КодПок21)
					И НЕ ЗначениеЗаполнено(НалБаза21)
					И НЕ ЗначениеЗаполнено(СумАкц21) Тогда
					НомерСтроки21 = НомерСтроки21 + 1;
					Продолжить;
				КонецЕсли;
				ЗаполненХотяБыОдинИзБлоковРаздела21 = Истина;
				// Код показателя.
				КодПок21Длина = СтрДлина(КодПок21);
				Если КодПок21Длина <> 5 Тогда
					СообщитьВТС("Раздел 2 -> Страница " + НомерСтраницы2
					+ ": в строке " + Формат(НомерСтроки21, "ЧГ=")
					+ " подраздела 2.1 не" + ?(КодПок21Длина = 0, "", "верно")
					+ " задан код показателя.", "Раздел2",
					"П000210000101_" + Формат(НомерСтроки21, "ЧГ="), НомерСтраницы2);
					СтатусПроверки = Ложь;
				КонецЕсли;
				НомерСтроки21 = НомерСтроки21 + 1;
			КонецЦикла;
			Если НЕ ЗаполненХотяБыОдинИзБлоковРаздела21 Тогда
				СообщитьВТС("Раздел 2 -> Страница " + НомерСтраницы2
					+ ": в строке 1 подраздела 2.1 не задан код показателя.",
				"Раздел2", "П000210000101_1", НомерСтраницы2);
				СтатусПроверки = Ложь;
			КонецЕсли;
			// Многострочная часть раздела 2.2.
			НомерСтроки22 = 1;
			Пока Данные2.Свойство("П000220000101_" + Формат(НомерСтроки22, "ЧГ=")) Цикл
				КодПок22    = СокрЛП(Данные2["П000220000101_" + Формат(НомерСтроки22, "ЧГ=")]);
				ОбъемРеал22 = Данные2["П000220000102_" + Формат(НомерСтроки22, "ЧГ=")];
				СумВыч22    = Данные2["П000220000103_" + Формат(НомерСтроки22, "ЧГ=")];
				Если НЕ ЗначениеЗаполнено(КодПок22)
					И НЕ ЗначениеЗаполнено(ОбъемРеал22)
					И НЕ ЗначениеЗаполнено(СумВыч22) Тогда
					НомерСтроки22 = НомерСтроки22 + 1;
					Продолжить;
				КонецЕсли;
				// Код показателя.
				КодПок22Длина = СтрДлина(КодПок22);
				Если КодПок22Длина <> 5 Тогда
					СообщитьВТС("Раздел 2 -> Страница " + НомерСтраницы2
					+ ": в строке " + Формат(НомерСтроки22, "ЧГ=")
					+ " подраздела 2.2 не" + ?(КодПок22Длина = 0, "", "верно")
					+ " задан код показателя.", "Раздел2",
					"П000220000101_" + Формат(НомерСтроки22, "ЧГ="), НомерСтраницы2);
					СтатусПроверки = Ложь;
				КонецЕсли;
				НомерСтроки22 = НомерСтроки22 + 1;
			КонецЦикла;
			// Раздел 2.3.
			Если ЗначениеЗаполнено(Данные2["П000230000102"])
				И ЗначениеЗаполнено(Данные2["П000230000202"]) Тогда
				СообщитьВТС("Раздел 2 -> Страница " + НомерСтраницы2
				+ ": в подразделе 2.3 одновременно заполнены строки с кодами показателей 40001 и 40002.",
				"Раздел2", "П000230000102", НомерСтраницы2);
				СтатусПроверки = Ложь;
			КонецЕсли;
			// Многострочная часть раздела 2.4.
			ЗаполненХотяБыОдинИзБлоковРаздела241 = Ложь;
			НомерСтроки241 = 1;
			Пока Данные2.Свойство("П000240000101_" + Формат(НомерСтроки241, "ЧГ=")) Цикл
				КодПок241  = СокрЛП(Данные2["П000240000101_" + Формат(НомерСтроки241, "ЧГ=")]);
				НалБаза241 = Данные2["П000240000102_" + Формат(НомерСтроки241, "ЧГ=")];
				СумАкц241  = Данные2["П000240000103_" + Формат(НомерСтроки241, "ЧГ=")];
				ПерЭксп241 = СокрЛП(Данные2["П000240000104_" + Формат(НомерСтроки241, "ЧГ=")]);
				ГодЭксп241 = Формат(Данные2["П000240000105_" + Формат(НомерСтроки241, "ЧГ=")], "ЧГ=");
				Если НЕ ЗначениеЗаполнено(КодПок241)
					И НЕ ЗначениеЗаполнено(НалБаза241)
					И НЕ ЗначениеЗаполнено(СумАкц241)
					И НЕ ЗначениеЗаполнено(ПерЭксп241)
					И НЕ ЗначениеЗаполнено(ГодЭксп241) Тогда
					НомерСтроки241 = НомерСтроки241 + 1;
					Продолжить;
				КонецЕсли;
				ЗаполненХотяБыОдинИзБлоковРаздела241 = Истина;
				// Код показателя.
				КодПок241Длина = СтрДлина(КодПок241);
				Если КодПок241Длина <> 5 Тогда
					СообщитьВТС("Раздел 2 -> Страница " + НомерСтраницы2
					+ ": в строке " + Формат(НомерСтроки241, "ЧГ=")
					+ " подраздела 2.4 не" + ?(КодПок241Длина = 0, "", "верно")
					+ " задан код показателя.", "Раздел2",
					"П000240000101_" + Формат(НомерСтроки241, "ЧГ="), НомерСтраницы2);
					СтатусПроверки = Ложь;
				КонецЕсли;
				// Код и год налогового периода, в котором осуществлена реализация товаров на экспорт.
				ПерЭксп241Длина = СтрДлина(ПерЭксп241);
				Если ПерЭксп241Длина <> 2 Тогда
					СообщитьВТС("Раздел 2 -> Страница " + НомерСтраницы2
					+ ": в строке " + Формат(НомерСтроки241, "ЧГ=")
					+ " подраздела 2.4 не" + ?(ПерЭксп241Длина = 0, "", "верно")
					+ " задан код налогового периода, в котором осуществлена реализация товаров на экспорт.",
					"Раздел2", "П000240000104_" + Формат(НомерСтроки241, "ЧГ="), НомерСтраницы2);
					СтатусПроверки = Ложь;
				Иначе
					Если СтрНайти(ВозможныеКодыПериода, ПерЭксп241) = 0 Тогда
						СообщитьВТС("Раздел 2 -> Страница " + НомерСтраницы2
						+ ": в строке " + Формат(НомерСтроки241, "ЧГ=")
						+ " подраздела 2.4 неверно задан код налогового периода, в котором осуществлена реализация товаров на экспорт.",
						"Раздел2", "П000240000104_" + Формат(НомерСтроки241, "ЧГ="), НомерСтраницы2);
						СтатусПроверки = Ложь;
					КонецЕсли;
				КонецЕсли;
				ГодЭксп241Длина = СтрДлина(ГодЭксп241);
				Если ГодЭксп241Длина <> 4 Тогда
					СообщитьВТС("Раздел 2 -> Страница " + НомерСтраницы2
					+ ": в строке " + Формат(НомерСтроки241, "ЧГ=")
					+ " подраздела 2.4 не" + ?(ГодЭксп241Длина = 0, "", "верно")
					+ " задан год налогового периода, в котором осуществлена реализация товаров на экспорт.", "Раздел2",
					"П000240000105_" + Формат(НомерСтроки241, "ЧГ="), НомерСтраницы2);
					СтатусПроверки = Ложь;
				КонецЕсли;
				НомерСтроки241 = НомерСтроки241 + 1;
			КонецЦикла;
			// В случае, если заполнена многострочная часть строки 010 раздела 2.4,
			// должна быть заполнена многострочная часть раздела 2.4.
			Если НЕ ЗаполненХотяБыОдинИзБлоковРаздела241 Тогда
				ЗаполненХотяБыОдинИзБлоковРаздела242 = Ложь;
				НомерСтроки242 = 1;
				Пока Данные2.Свойство("П000240000201_" + Формат(НомерСтроки242, "ЧГ=")) Цикл
					ЗначПок242  = Данные2["П000240000201_" + Формат(НомерСтроки242, "ЧГ=")];
					ПерЭксп242 = СокрЛП(Данные2["П000240000202_" + Формат(НомерСтроки242, "ЧГ=")]);
					ГодЭксп242 = Формат(Данные2["П000240000203_" + Формат(НомерСтроки242, "ЧГ=")], "ЧГ=");
					Если НЕ ЗначениеЗаполнено(ЗначПок242)
						И НЕ ЗначениеЗаполнено(ПерЭксп242)
						И НЕ ЗначениеЗаполнено(ГодЭксп242) Тогда
						НомерСтроки242 = НомерСтроки242 + 1;
						Продолжить;
					КонецЕсли;
					ЗаполненХотяБыОдинИзБлоковРаздела242 = Истина;
					Прервать;
				КонецЦикла;
				Если ЗаполненХотяБыОдинИзБлоковРаздела242 Тогда
					СообщитьВТС("Раздел 2 -> Страница " + НомерСтраницы2
						+ ": подраздел 2.4 должен быть заполнен, если заполнена строка 010.",
					"Раздел2", "П000240000101_1", НомерСтраницы2);
					СтатусПроверки = Ложь;
				КонецЕсли;
			КонецЕсли;
			// Многострочная часть строки 010 раздела 2.4.
			НомерСтроки242 = 1;
			Пока Данные2.Свойство("П000240000201_" + Формат(НомерСтроки242, "ЧГ=")) Цикл
				ЗначПок242  = Данные2["П000240000201_" + Формат(НомерСтроки242, "ЧГ=")];
				ПерЭксп242 = СокрЛП(Данные2["П000240000202_" + Формат(НомерСтроки242, "ЧГ=")]);
				ГодЭксп242 = Формат(Данные2["П000240000203_" + Формат(НомерСтроки242, "ЧГ=")], "ЧГ=");
				Если НЕ ЗначениеЗаполнено(ЗначПок242)
					И НЕ ЗначениеЗаполнено(ПерЭксп242)
					И НЕ ЗначениеЗаполнено(ГодЭксп242) Тогда
					НомерСтроки242 = НомерСтроки242 + 1;
					Продолжить;
				КонецЕсли;
				// Код и год налогового периода, в котором осуществлена реализация товаров на экспорт.
				ПерЭксп242Длина = СтрДлина(ПерЭксп242);
				Если ПерЭксп242Длина <> 2 Тогда
					СообщитьВТС("Раздел 2 -> Страница " + НомерСтраницы2
					+ ": в блоке " + Формат(НомерСтроки242, "ЧГ=")
					+ " строк 010 подраздела 2.4 не" + ?(ПерЭксп242Длина = 0, "", "верно")
					+ " задан код налогового периода.",
					"Раздел2", "П000240000202_" + Формат(НомерСтроки242, "ЧГ="), НомерСтраницы2);
					СтатусПроверки = Ложь;
				Иначе
					Если СтрНайти(ВозможныеКодыПериода, ПерЭксп242) = 0 Тогда
						СообщитьВТС("Раздел 2 -> Страница " + НомерСтраницы2
						+ ": в блоке " + Формат(НомерСтроки242, "ЧГ=")
						+ " строк 010 подраздела 2.4 неверно задан код налогового периода.",
						"Раздел2", "П000240000202_" + Формат(НомерСтроки242, "ЧГ="), НомерСтраницы2);
						СтатусПроверки = Ложь;
					КонецЕсли;
				КонецЕсли;
				ГодЭксп242Длина = СтрДлина(ГодЭксп242);
				Если ГодЭксп242Длина <> 4 Тогда
					СообщитьВТС("Раздел 2 -> Страница " + НомерСтраницы2
					+ ": в блоке " + Формат(НомерСтроки242, "ЧГ=")
					+ " строк 010 подраздела 2.4 не" + ?(ГодЭксп242Длина = 0, "", "верно")
					+ " задан год налогового периода.", "Раздел2",
					"П000240000203_" + Формат(НомерСтроки242, "ЧГ="), НомерСтраницы2);
					СтатусПроверки = Ложь;
				КонецЕсли;
				НомерСтроки242 = НомерСтроки242 + 1;
			КонецЦикла;
			// Многострочная часть раздела 2.5.
			НомерСтроки25 = 1;
			Пока Данные2.Свойство("П000250000101_" + Формат(НомерСтроки25, "ЧГ=")) Цикл
				КодПок25 = СокрЛП(Данные2["П000250000101_" + Формат(НомерСтроки25, "ЧГ=")]);
				НалБаза25 = Данные2["П000250000102_" + Формат(НомерСтроки25, "ЧГ=")];
				СумВыч25 = Данные2["П000250000103_" + Формат(НомерСтроки25, "ЧГ=")];
				НаличБГ25 = СокрЛП(Данные2["П000250000104_" + Формат(НомерСтроки25, "ЧГ=")]);
				Если НЕ ЗначениеЗаполнено(КодПок25)
					И НЕ ЗначениеЗаполнено(НалБаза25)
					И НЕ ЗначениеЗаполнено(СумВыч25)
					И НЕ ЗначениеЗаполнено(НаличБГ25) Тогда
					НомерСтроки25 = НомерСтроки25 + 1;
					Продолжить;
				КонецЕсли;
				// Код показателя.
				КодПок25Длина = СтрДлина(КодПок25);
				Если КодПок25Длина <> 5 Тогда
					СообщитьВТС("Раздел 2 -> Страница " + НомерСтраницы2
					+ ": в строке " + Формат(НомерСтроки25, "ЧГ=")
					+ " подраздела 2.5 не" + ?(КодПок25Длина = 0, "", "верно")
					+ " задан код показателя.", "Раздел2",
					"П000250000101_" + Формат(НомерСтроки25, "ЧГ="), НомерСтраницы2);
					СтатусПроверки = Ложь;
				КонецЕсли;
				// Признак наличия банковской гарантии.
				Если НЕ ЗначениеЗаполнено(НаличБГ25) Тогда
					СообщитьВТС("Раздел 2 -> Страница " + НомерСтраницы2
					+ ": в строке " + Формат(НомерСтроки25, "ЧГ=")
					+ " подраздела 2.5 не задан признак наличия банковской гарантии.", "Раздел2",
					"П000250000104_" + Формат(НомерСтроки25, "ЧГ="), НомерСтраницы2);
					СтатусПроверки = Ложь;
				КонецЕсли;
				НомерСтроки25 = НомерСтроки25 + 1;
			КонецЦикла;
			// Многострочная часть раздела 2.6.
			НомерСтроки26 = 1;
			Пока Данные2.Свойство("П000260000101_" + Формат(НомерСтроки26, "ЧГ=")) Цикл
				КодПок26  = СокрЛП(Данные2["П000260000101_" + Формат(НомерСтроки26, "ЧГ=")]);
				НалБаза26 = Данные2["П000260000102_" + Формат(НомерСтроки26, "ЧГ=")];
				СумАкц26  = Данные2["П000260000103_" + Формат(НомерСтроки26, "ЧГ=")];
				ПерЭксп26 = СокрЛП(Данные2["П000260000104_" + Формат(НомерСтроки26, "ЧГ=")]);
				ГодЭксп26 = Формат(Данные2["П000260000105_" + Формат(НомерСтроки26, "ЧГ=")], "ЧГ=");
				Если НЕ ЗначениеЗаполнено(КодПок26)
					И НЕ ЗначениеЗаполнено(НалБаза26)
					И НЕ ЗначениеЗаполнено(СумАкц26)
					И НЕ ЗначениеЗаполнено(ПерЭксп26)
					И НЕ ЗначениеЗаполнено(ГодЭксп26) Тогда
					НомерСтроки26 = НомерСтроки26 + 1;
					Продолжить;
				КонецЕсли;
				// Код показателя.
				КодПок26Длина = СтрДлина(КодПок26);
				Если КодПок26Длина <> 5 Тогда
					СообщитьВТС("Раздел 2 -> Страница " + НомерСтраницы2
					+ ": в строке " + Формат(НомерСтроки26, "ЧГ=")
					+ " подраздела 2.6 не" + ?(КодПок26Длина = 0, "", "верно")
					+ " задан код показателя.", "Раздел2",
					"П000260000101_" + Формат(НомерСтроки26, "ЧГ="), НомерСтраницы2);
					СтатусПроверки = Ложь;
				КонецЕсли;
				// Код и год налогового периода, в котором осуществлена реализация товаров на экспорт.
				ПерЭксп26Длина = СтрДлина(ПерЭксп26);
				Если ПерЭксп26Длина <> 2 Тогда
					СообщитьВТС("Раздел 2 -> Страница " + НомерСтраницы2
					+ ": в строке " + Формат(НомерСтроки26, "ЧГ=")
					+ " подраздела 2.6 не" + ?(КодПок26Длина = 0, "", "верно")
					+ " задан код налогового периода, в котором осуществлена реализация товаров в государства - члены Евразийского экономического союза.",
					"Раздел2", "П000260000104_" + Формат(НомерСтроки26, "ЧГ="), НомерСтраницы2);
					СтатусПроверки = Ложь;
				Иначе
					Если СтрНайти(ВозможныеКодыПериода, ПерЭксп26) = 0 Тогда
						СообщитьВТС("Раздел 2 -> Страница " + НомерСтраницы2
						+ ": в строке " + Формат(НомерСтроки26, "ЧГ=")
						+ " подраздела 2.6 неверно задан код налогового периода, в котором осуществлена реализация товаров в государства - члены Евразийского экономического союза.",
						"Раздел2", "П000260000104_" + Формат(НомерСтроки26, "ЧГ="), НомерСтраницы2);
						СтатусПроверки = Ложь;
					КонецЕсли;
				КонецЕсли;
				ГодЭксп26Длина = СтрДлина(ГодЭксп26);
				Если ГодЭксп26Длина <> 4 Тогда
					СообщитьВТС("Раздел 2 -> Страница " + НомерСтраницы2
					+ ": в строке " + Формат(НомерСтроки26, "ЧГ=")
					+ " подраздела 2.6 не" + ?(ГодЭксп26Длина = 0, "", "верно")
					+ " задан год налогового периода, в котором осуществлена реализация товаров в государства - члены Евразийского экономического союза.",
					"Раздел2", "П000260000105_" + Формат(НомерСтроки26, "ЧГ="), НомерСтраницы2);
					СтатусПроверки = Ложь;
				КонецЕсли;
				НомерСтроки26 = НомерСтроки26 + 1;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	// Раздел 3.
	ВозможныеКодыПТ = Новый Массив;
	ВозможныеКодыПТ.Добавить("735");
	ВозможныеКодыПТ.Добавить("736");
	ВозможныеКодыПок = Новый Массив;
	ВозможныеКодыПок.Добавить("10001");
	ВозможныеКодыПок.Добавить("10037");
	ВозможныеКодыПок.Добавить("22001");
	ВозможныеКодыПок.Добавить("22002");
	Раздел3 = мДанныеОтчета.Раздел3;
	Для Каждого СтраницаРаздела3 Из Раздел3 Цикл
		Данные3 = СтраницаРаздела3.Данные[0].Значение;
		Если НЕ СтраницаПуста(Данные3, "Раздел3", ДеревоВыгрузки) Тогда
			НомерСтраницы3 = Раздел3.Индекс(СтраницаРаздела3) + 1;
			НомерСтраницы3_Стр = Формат(НомерСтраницы3, "ЧГ=");
			
			ИмяЯчейкиКодПТ     = "П000030001003";
			ИмяЯчейкиКодПок    = "П000030002003";
			ИмяЯчейкиКБК       = "П000030003003";
			ИмяЯчейкиНомерСогл = "П000030004003";
			ИмяЯчейкиДатаСогл  = "П000030005003";
			
			КодПТ     = СокрЛП(Данные3[ИмяЯчейкиКодПТ]);
			КодПок    = СокрЛП(Данные3[ИмяЯчейкиКодПок]);
			КБК       = СокрЛП(Данные3[ИмяЯчейкиКБК]);
			НомерСогл = СокрЛП(Данные3[ИмяЯчейкиНомерСогл]);
			ДатаСогл  = Данные3[ИмяЯчейкиДатаСогл];
			
			ДлинаКодПТ = СтрДлина(КодПТ);
			Если ВозможныеКодыПТ.Найти(КодПТ) = Неопределено Тогда
				СообщитьВТС("Раздел 3 -> Страница " + НомерСтраницы3_Стр
				+ ": не" + ?(ДлинаКодПТ = 0, "", "верно") + " задан код вида подакцизного товара.",
				"Раздел3", ИмяЯчейкиКодПТ, НомерСтраницы3);
				СтатусПроверки = Ложь;
			КонецЕсли;
			ДлинаКодПок = СтрДлина(КодПок);
			Если ВозможныеКодыПок.Найти(КодПок) = Неопределено Тогда
				СообщитьВТС("Раздел 3 -> Страница " + НомерСтраницы3_Стр
				+ ": не" + ?(ДлинаКодПок = 0, "", "верно") + " задан код показателя.",
				"Раздел3", ИмяЯчейкиКодПок, НомерСтраницы3);
				СтатусПроверки = Ложь;
			КонецЕсли;
			ДлинаКБК = СтрДлина(КБК);
			Если ДлинаКБК <> 20 Тогда
				СообщитьВТС("Раздел 3 -> Страница " + НомерСтраницы3_Стр
				+ ": не" + ?(ДлинаКБК = 0, "", "верно") + " задан код бюджетной классификации.",
				"Раздел3", ИмяЯчейкиКБК, НомерСтраницы3);
				СтатусПроверки = Ложь;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(НомерСогл) Тогда
				СообщитьВТС("Раздел 3 -> Страница " + НомерСтраницы3_Стр
				+ ": не задан номер международного договора Российской Федерации.",
				"Раздел3", ИмяЯчейкиНомерСогл, НомерСтраницы3);
				СтатусПроверки = Ложь;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(ДатаСогл) Тогда
				СообщитьВТС("Раздел 3 -> Страница " + НомерСтраницы3_Стр
				+ ": не задана дата международного договора Российской Федерации.",
				"Раздел3", ИмяЯчейкиДатаСогл, НомерСтраницы3);
				СтатусПроверки = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	// Приложение 1.
	Приложение1 = мДанныеОтчета.Приложение1;
	Для Каждого СтраницаПриложения1 Из Приложение1 Цикл
		Данные101 = СтраницаПриложения1.Данные[0].Значение;
		Если НЕ СтраницаПуста(Данные101, "Приложение1", ДеревоВыгрузки) Тогда
			НомерСтраницы101 = Приложение1.Индекс(СтраницаПриложения1) + 1;
			КодВидаПТ101 = СокрЛП(Данные101["П001010001003"]);
			// Код вида подакцизного товара.
			КодВидаПТ101Длина = СтрДлина(КодВидаПТ101);
			Если КодВидаПТ101Длина <> 3 Тогда
				СообщитьВТС("Приложение 1 -> Страница " + НомерСтраницы101
				+ ": не" + ?(КодВидаПТ101Длина = 0, "", "верно")
				+ " задан код вида подакцизного товара.", "Приложение1", "П001010001003", НомерСтраницы101);
				СтатусПроверки = Ложь;
			КонецЕсли;
			// Многострочная часть приложения 1.
			ЗаполненХотяБыОдинИзБлоковПриложения1 = Ложь;
			НомерСтроки101 = 1;
			Пока Данные101.Свойство("П001010000101_" + Формат(НомерСтроки101, "ЧГ=")) Цикл
				КодПок101   = СокрЛП(Данные101["П001010000101_" + Формат(НомерСтроки101, "ЧГ=")]);
				МощнДвиг101 = Данные101["П001010000102_" + Формат(НомерСтроки101, "ЧГ=")];
				КолПТ101    = Данные101["П001010000103_" + Формат(НомерСтроки101, "ЧГ=")];
				НалБаза101  = Данные101["П001010000104_" + Формат(НомерСтроки101, "ЧГ=")];
				Если НЕ ЗначениеЗаполнено(КодПок101)
					И НЕ ЗначениеЗаполнено(МощнДвиг101)
					И НЕ ЗначениеЗаполнено(КолПТ101)
					И НЕ ЗначениеЗаполнено(НалБаза101) Тогда
					НомерСтроки101 = НомерСтроки101 + 1;
					Продолжить;
				КонецЕсли;
				ЗаполненХотяБыОдинИзБлоковПриложения1 = Истина;
				// Код показателя.
				КодПок101Длина = СтрДлина(КодПок101);
				Если КодПок101Длина <> 5 Тогда
					СообщитьВТС("Приложение 1 -> Страница " + НомерСтраницы101
					+ ": в строке " + Формат(НомерСтроки101, "ЧГ=")
					+ " не" + ?(КодПок101Длина = 0, "", "верно")
					+ " задан код показателя.", "Приложение1",
					"П001010000101_" + Формат(НомерСтроки101, "ЧГ="), НомерСтраницы101);
					СтатусПроверки = Ложь;
				КонецЕсли;
				НомерСтроки101 = НомерСтроки101 + 1;
			КонецЦикла;
			Если НЕ ЗаполненХотяБыОдинИзБлоковПриложения1 Тогда
				СообщитьВТС("Приложение 1 -> Страница " + НомерСтраницы101
				+ ": в строке 1 не задан код показателя.",
				"Приложение1", "П001010000101_1", НомерСтраницы101);
				СтатусПроверки = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	// Приложение 2.
	// Определение необходимости проверки приложения 2.
	Приложение21 = ДанныеМногоуровневыхРазделов.Приложение21;
	ПроверятьПриложение21 = Ложь;
	Для каждого СтраницаПриложения21 Из Приложение21.Строки Цикл
		Если НЕ СтраницаПуста(СтраницаПриложения21.Данные, "Приложение21", ДеревоВыгрузки) Тогда
			ПроверятьПриложение21 = Истина;
			Прервать;
		КонецЕсли;
		Для каждого СтраницаПриложения22 Из СтраницаПриложения21.Строки Цикл
			Если НЕ СтраницаПуста(СтраницаПриложения22.Данные, "Приложение22", ДеревоВыгрузки) Тогда
				ПроверятьПриложение21 = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если ПроверятьПриложение21 Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Если ПроверятьПриложение21 Тогда
		Для каждого СтраницаПриложения21 Из Приложение21.Строки Цикл
			НомерСтраницыПрил21 = Приложение21.Строки.Индекс(СтраницаПриложения21) + 1;
			
			// Код вида подакцизного товара.
			КодВидаПТПрил21Длина = СтрДлина(СокрЛП(СтраницаПриложения21.Данные["П001020001003"]));
			Если КодВидаПТПрил21Длина <> 3 Тогда
				СообщитьВТС("Приложение 2 -> Расчет акциза. Страница " + НомерСтраницыПрил21
				+ ": не" + ?(КодВидаПТПрил21Длина = 0, "", "верно")
				+ " задан код вида подакцизного товара.", "Приложение21", "П001020001003", НомерСтраницыПрил21);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			Для каждого СтраницаПриложения22 Из СтраницаПриложения21.Строки Цикл
				Если СтраницаПуста(СтраницаПриложения22.Данные, "Приложение22", ДеревоВыгрузки) Тогда
					Продолжить;
				КонецЕсли;
				
				НомерСтраницыПрил22 = СтраницаПриложения21.Строки.Индекс(СтраницаПриложения22) + 1;
				КоординатыСтраницыПрил22 = Строка(НомерСтраницыПрил21) + "," + Строка(НомерСтраницыПрил22);
				
				ДатаВыдБГ102 = СтраницаПриложения22.Данные["П001020011503"];
				НомерБГ102   = СокрЛП(СтраницаПриложения22.Данные["П001020012003"]);
				ДатаНачБГ102 = СтраницаПриложения22.Данные["П001020013003"];
				ДатаКонБГ102 = СтраницаПриложения22.Данные["П001020014003"];
				
				// Дата выдачи банковской гарантии.
				Если НЕ ЗначениеЗаполнено(ДатаВыдБГ102) Тогда
					СообщитьВТС("Приложение 2 -> Расчет акциза. Страница " + НомерСтраницыПрил21
					+ " -> Банковская гарантия. Страница " + НомерСтраницыПрил22
					+ ": не задана дата выдачи банковской гарантии.",
					"Приложение22", "П001020011503", КоординатыСтраницыПрил22);
					СтатусПроверки = Ложь;
				КонецЕсли;
				// Номер банковской гарантии.
				Если НЕ ЗначениеЗаполнено(НомерБГ102) Тогда
					СообщитьВТС("Приложение 2 -> Расчет акциза. Страница " + НомерСтраницыПрил21
					+ " -> Банковская гарантия. Страница " + НомерСтраницыПрил22
					+ ": не задан номер банковской гарантии.",
					"Приложение22", "П001020012003", КоординатыСтраницыПрил22);
					СтатусПроверки = Ложь;
				КонецЕсли;
				// Дата начала срока действия банковской гарантии.
				Если НЕ ЗначениеЗаполнено(ДатаНачБГ102) Тогда
					СообщитьВТС("Приложение 2 -> Расчет акциза. Страница " + НомерСтраницыПрил21
					+ " -> Банковская гарантия. Страница " + НомерСтраницыПрил22
					+ ": не задана дата начала действия банковской гарантии.",
					"Приложение22", "П001020013003", КоординатыСтраницыПрил22);
					СтатусПроверки = Ложь;
				КонецЕсли;
				// Дата окончания срока действия банковской гарантии.
				Если НЕ ЗначениеЗаполнено(ДатаКонБГ102) Тогда
					СообщитьВТС("Приложение 2 -> Расчет акциза. Страница " + НомерСтраницыПрил21
					+ " -> Банковская гарантия. Страница " + НомерСтраницыПрил22
					+ ": не задана дата окончания действия банковской гарантии.",
					"Приложение22", "П001020014003", КоординатыСтраницыПрил22);
					СтатусПроверки = Ложь;
				КонецЕсли;
				
				// Единообразные проверки в строках 170, 180, 200, 210.
				МассивПрефиксов = Новый Массив;
				МассивПрефиксов.Добавить("П0010200170");
				МассивПрефиксов.Добавить("П0010200180");
				МассивПрефиксов.Добавить("П0010200200");
				МассивПрефиксов.Добавить("П0010200210");
				Для каждого Префикс Из МассивПрефиксов Цикл
					ОбъТовПрил22 = СтраницаПриложения22.Данные[Префикс + "03"];
					СумАкцПрил22 = СтраницаПриложения22.Данные[Префикс + "04"];
					ПерЭксПрил22 = СокрЛП(СтраницаПриложения22.Данные[Префикс + "05"]);
					ГодЭксПрил22 = Формат(СтраницаПриложения22.Данные[Префикс + "06"], "ЧГ=");
					Если ЗначениеЗаполнено(ОбъТовПрил22)
						ИЛИ ЗначениеЗаполнено(СумАкцПрил22)
						ИЛИ ЗначениеЗаполнено(ПерЭксПрил22)
						ИЛИ ЗначениеЗаполнено(ГодЭксПрил22) Тогда
						// Код налогового периода, в котором осуществлена реализация товаров на экспорт.
						ПерЭксПрил22Длина = СтрДлина(ПерЭксПрил22);
						Если ПерЭксПрил22Длина <> 2 Тогда
							СообщитьВТС("Приложение 2 -> Расчет акциза. Страница " + НомерСтраницыПрил21
							+ " -> Банковская гарантия. Страница " + НомерСтраницыПрил22
							+ ": в строке " + Прав(Префикс, 3) + " не" + ?(ПерЭксПрил22Длина = 0, "", "верно")
							+ " задан код налогового периода, в котором осуществлена реализация подакцизных товаров на экспорт.",
							"Приложение22", Префикс + "05", КоординатыСтраницыПрил22);
							СтатусПроверки = Ложь;
						Иначе
							Если СтрНайти(ВозможныеКодыПериода, ПерЭксПрил22) = 0 Тогда
								СообщитьВТС("Приложение 2 -> Расчет акциза. Страница " + НомерСтраницыПрил21
								+ " -> Банковская гарантия. Страница " + НомерСтраницыПрил22
								+ ": в строке " + Прав(Префикс, 3) + " неверно задан код налогового периода, в котором осуществлена реализация подакцизных товаров на экспорт.",
								"Приложение22", Префикс + "05", КоординатыСтраницыПрил22);
								СтатусПроверки = Ложь;
							КонецЕсли;
						КонецЕсли;
						// Год налогового периода, в котором осуществлена реализация товаров на экспорт.
						ГодЭксПрил22Длина = СтрДлина(ГодЭксПрил22);
						Если ГодЭксПрил22Длина <> 4 Тогда
							СообщитьВТС("Приложение 2 -> Расчет акциза. Страница " + НомерСтраницыПрил21
							+ " -> Банковская гарантия. Страница " + НомерСтраницыПрил22
							+ ": в строке " + Прав(Префикс, 3) + " не" + ?(ГодЭксПрил22Длина = 0, "", "верно")
							+ " задан год налогового периода, в котором осуществлена реализация подакцизных товаров на экспорт.",
							"Приложение22", Префикс + "06", КоординатыСтраницыПрил22);
							СтатусПроверки = Ложь;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
			
		КонецЦикла;
	КонецЕсли;
	
	// Приложение 3.
	Приложение3 = мДанныеОтчета.Приложение3;
	Для Каждого СтраницаПриложения3 Из Приложение3 Цикл
		Данные103 = СтраницаПриложения3.Данные[0].Значение;
		Если НЕ СтраницаПуста(Данные103, "Приложение3", ДеревоВыгрузки) Тогда
			НомерСтраницы103 = Приложение3.Индекс(СтраницаПриложения3) + 1;
			НомерСтраницы103_Стр = Формат(НомерСтраницы103, "ЧГ=");
			
			НаимОрг103 = СокрЛП(Данные103["П001030001001"]);
			ИНН103     = СокрЛП(Данные103["П001030002001"]);
			КПП103     = СокрЛП(Данные103["П001030003001"]);
			СерСвид103 = СокрЛП(Данные103["П001030004001"]);
			НомСвид103 = СокрЛП(Данные103["П001030004002"]);
			
			ДлинаИНН103 = СтрДлина(ИНН103);
			
			Если ДлинаИНН103 = 10 Тогда
				
				Если НЕ ЗначениеЗаполнено(НаимОрг103) Тогда
					СообщитьВТС("Приложение 3 -> Страница " + НомерСтраницы103_Стр
					+ ": не задано наименование организации - поставщика прямогонного бензина.",
					"Приложение3", "П001030001001", НомерСтраницы103);
					СтатусПроверки = Ложь;
				КонецЕсли;
				ДлинаКПП103 = СтрДлина(КПП103);
				Если ДлинаКПП103 <> 9 Тогда
					СообщитьВТС("Приложение 3 -> Страница " + НомерСтраницы103_Стр
					+ ": не" + ?(ДлинаКПП103 = 0, "", "верно") + " задан КПП поставщика.",
					"Приложение3", "П001030003001", НомерСтраницы103);
					СтатусПроверки = Ложь;
				КонецЕсли;
				
			ИначеЕсли ДлинаИНН103 = 12 Тогда
				
				ФИОИП = РегламентированнаяОтчетность.РазложитьФИО(НаимОрг103);
				Если НЕ ЗначениеЗаполнено(ФИОИП.Фамилия) Тогда
					СообщитьВТС("Приложение 3 -> Страница " + НомерСтраницы103_Стр
					+ ": не задана фамилия индивидуального предпринимателя - поставщика прямогонного бензина.",
					"Приложение3", "П001030001001", НомерСтраницы103);
					СтатусПроверки = Ложь;
				КонецЕсли;
				Если НЕ ЗначениеЗаполнено(ФИОИП.Имя) Тогда
					СообщитьВТС("Приложение 3 -> Страница " + НомерСтраницы103_Стр
					+ ": не задано имя индивидуального предпринимателя - поставщика прямогонного бензина.",
					"Приложение3", "П001030001001", НомерСтраницы103);
					СтатусПроверки = Ложь;
				КонецЕсли;
				
			Иначе
				
				СообщитьВТС("Приложение 3 -> Страница " + НомерСтраницы103_Стр
				+ ": не" + ?(ДлинаИНН103 = 0, "", "верно") + " задан ИНН поставщика.",
				"Приложение3", "П001030002001", НомерСтраницы103);
				СтатусПроверки = Ложь;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(СерСвид103) Тогда
				СообщитьВТС("Приложение 3 -> Страница " + НомерСтраницы103_Стр
				+ ": не задана серия свидетельства поставщика.",
				"Приложение3", "П001030004001", НомерСтраницы103);
				СтатусПроверки = Ложь;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(НомСвид103) Тогда
				СообщитьВТС("Приложение 3 -> Страница " + НомерСтраницы103_Стр
				+ ": не задан номер свидетельства поставщика.",
				"Приложение3", "П001030004002", НомерСтраницы103);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			// Многострочная часть приложения 3.
			ЗаполненХотяБыОдинИзБлоковПриложения3 = Ложь;
			НомерСтроки103 = 1;
			Пока Данные103.Свойство("П001030000101_" + Формат(НомерСтроки103, "ЧГ=")) Цикл
				НомерСтроки103_Стр = Формат(НомерСтроки103, "ЧГ=");
				НомСчФ103   = СокрЛП(Данные103["П001030000101_" + НомерСтроки103_Стр]);
				ДатаСчФ103  = Данные103["П001030000102_" + НомерСтроки103_Стр];
				ОбСпСчФ103  = Данные103["П001030000103_" + НомерСтроки103_Стр];
				НомКСчФ103  = СокрЛП(Данные103["П001030000104_" + НомерСтроки103_Стр]);
				ДатаКСчФ103 = Данные103["П001030000105_" + НомерСтроки103_Стр];
				ОбСпКСчФ103 = Данные103["П001030000106_" + НомерСтроки103_Стр];
				Если НЕ ЗначениеЗаполнено(НомСчФ103)
					И НЕ ЗначениеЗаполнено(ДатаСчФ103)
					И НЕ ЗначениеЗаполнено(ОбСпСчФ103)
					И НЕ ЗначениеЗаполнено(НомКСчФ103)
					И НЕ ЗначениеЗаполнено(ДатаКСчФ103)
					И НЕ ЗначениеЗаполнено(ОбСпКСчФ103) Тогда
					НомерСтроки103 = НомерСтроки103 + 1;
					Продолжить;
				КонецЕсли;
				ЗаполненХотяБыОдинИзБлоковПриложения3 = Истина;
				Если НЕ ЗначениеЗаполнено(НомСчФ103) Тогда
					СообщитьВТС("Приложение 3 -> Страница " + НомерСтраницы103_Стр
					+ ": в строке " +НомерСтроки103_Стр + " не задан номер счета-фактуры.",
					"Приложение3", "П001030000101_" + НомерСтроки103_Стр, НомерСтраницы103);
					СтатусПроверки = Ложь;
				КонецЕсли;
				Если НЕ ЗначениеЗаполнено(ДатаСчФ103) Тогда
					СообщитьВТС("Приложение 3 -> Страница " + НомерСтраницы103_Стр
					+ ": в строке " + НомерСтроки103_Стр + " не задана дата счета-фактуры.",
					"Приложение3", "П001030000102_" + НомерСтроки103_Стр, НомерСтраницы103);
					СтатусПроверки = Ложь;
				КонецЕсли;
				НомерСтроки103 = НомерСтроки103 + 1;
			КонецЦикла;
			Если НЕ ЗаполненХотяБыОдинИзБлоковПриложения3 Тогда
				СообщитьВТС("Приложение 3 -> Страница " + НомерСтраницы103_Стр
				+ ": в строке 1 не задан номер счета-фактуры.",
				"Приложение3", "П001030000101_1", НомерСтраницы103);
				СообщитьВТС("Приложение 3 -> Страница " + НомерСтраницы103_Стр
				+ ": в строке 1 не задана дата счета-фактуры.",
				"Приложение3", "П001030000102_1", НомерСтраницы103);
				СтатусПроверки = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	// Приложение 4.
	Приложение4 = мДанныеОтчета.Приложение4;
	Для Каждого СтраницаПриложения4 Из Приложение4 Цикл
		Данные104 = СтраницаПриложения4.Данные[0].Значение;
		Если НЕ СтраницаПуста(Данные104, "Приложение4", ДеревоВыгрузки) Тогда
			НомерСтраницы104 = Приложение4.Индекс(СтраницаПриложения4) + 1;
			НомерСтраницы104_Стр = Формат(НомерСтраницы104, "ЧГ=");
			
			НаимОрг104 = СокрЛП(Данные104["П001040001001"]);
			ИНН104     = СокрЛП(Данные104["П001040002001"]);
			КПП104     = СокрЛП(Данные104["П001040003001"]);
			СерСвид104 = СокрЛП(Данные104["П001040004001"]);
			НомСвид104 = СокрЛП(Данные104["П001040004002"]);
			
			ДлинаИНН104 = СтрДлина(ИНН104);
			
			Если ДлинаИНН104 = 10 Тогда
				Если НЕ ЗначениеЗаполнено(НаимОрг104) Тогда
					СообщитьВТС("Приложение 4 -> Страница " + НомерСтраницы104_Стр
					+ ": не задано наименование организации - покупателя (получателя) прямогонного бензина.",
					"Приложение4", "П001040001001", НомерСтраницы104);
					СтатусПроверки = Ложь;
				КонецЕсли;
				ДлинаКПП104 = СтрДлина(КПП104);
				Если ДлинаКПП104 <> 9 Тогда
					СообщитьВТС("Приложение 4 -> Страница " + НомерСтраницы104_Стр
					+ ": не" + ?(ДлинаКПП104 = 0, "", "верно") + " задан КПП покупателя (получателя).",
					"Приложение4", "П001040003001", НомерСтраницы104);
					СтатусПроверки = Ложь;
				КонецЕсли;
			ИначеЕсли ДлинаИНН104 = 12 Тогда
				ФИОИП = РегламентированнаяОтчетность.РазложитьФИО(НаимОрг104);
				Если НЕ ЗначениеЗаполнено(ФИОИП.Фамилия) Тогда
					СообщитьВТС("Приложение 4 -> Страница " + НомерСтраницы104_Стр
					+ ": не задана фамилия индивидуального предпринимателя - покупателя (получателя) прямогонного бензина.",
					"Приложение4", "П001040001001", НомерСтраницы104);
					СтатусПроверки = Ложь;
				КонецЕсли;
				Если НЕ ЗначениеЗаполнено(ФИОИП.Имя) Тогда
					СообщитьВТС("Приложение 4 -> Страница " + НомерСтраницы104_Стр
					+ ": не задано имя индивидуального предпринимателя - покупателя (получателя) прямогонного бензина.",
					"Приложение4", "П001040001001", НомерСтраницы104);
					СтатусПроверки = Ложь;
				КонецЕсли;
			Иначе
				СообщитьВТС("Приложение 4 -> Страница " + НомерСтраницы104_Стр
				+ ": не" + ?(ДлинаИНН104 = 0, "", "верно") + " задан ИНН покупателя (получателя).",
				"Приложение4", "П001040002001", НомерСтраницы104);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(СерСвид104) Тогда
				СообщитьВТС("Приложение 4 -> Страница " + НомерСтраницы104_Стр
				+ ": не задана серия свидетельства покупателя (получателя).",
				"Приложение4", "П001040004001", НомерСтраницы104);
				СтатусПроверки = Ложь;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(НомСвид104) Тогда
				СообщитьВТС("Приложение 4 -> Страница " + НомерСтраницы104_Стр
				+ ": не задан номер свидетельства покупателя (получателя).",
				"Приложение4", "П001040004002", НомерСтраницы104);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			// Многострочная часть приложения 4.
			ЗаполненХотяБыОдинИзБлоковПриложения4 = Ложь;
			НомерСтроки104 = 1;
			Пока Данные104.Свойство("П001040000101_" + Формат(НомерСтроки104, "ЧГ=")) Цикл
				НомерСтроки104_Стр = Формат(НомерСтроки104, "ЧГ=");
				НомСчФ104   = СокрЛП(Данные104["П001040000101_" + НомерСтроки104_Стр]);
				ДатаСчФ104  = Данные104["П001040000102_" + НомерСтроки104_Стр];
				ОбСпСчФ104  = Данные104["П001040000103_" + НомерСтроки104_Стр];
				НомКСчФ104  = СокрЛП(Данные104["П001040000104_" + НомерСтроки104_Стр]);
				ДатаКСчФ104 = Данные104["П001040000105_" + НомерСтроки104_Стр];
				ОбСпКСчФ104 = Данные104["П001040000106_" + НомерСтроки104_Стр];
				Если НЕ ЗначениеЗаполнено(НомСчФ104)
					И НЕ ЗначениеЗаполнено(ДатаСчФ104)
					И НЕ ЗначениеЗаполнено(ОбСпСчФ104)
					И НЕ ЗначениеЗаполнено(НомКСчФ104)
					И НЕ ЗначениеЗаполнено(ДатаКСчФ104)
					И НЕ ЗначениеЗаполнено(ОбСпКСчФ104) Тогда
					НомерСтроки104 = НомерСтроки104 + 1;
					Продолжить;
				КонецЕсли;
				ЗаполненХотяБыОдинИзБлоковПриложения4 = Истина;
				Если НЕ ЗначениеЗаполнено(НомСчФ104) Тогда
					СообщитьВТС("Приложение 4 -> Страница " + НомерСтраницы104_Стр
					+ ": в строке " +НомерСтроки104_Стр + " не задан номер счета-фактуры.",
					"Приложение4", "П001040000101_" + НомерСтроки104_Стр, НомерСтраницы104);
					СтатусПроверки = Ложь;
				КонецЕсли;
				Если НЕ ЗначениеЗаполнено(ДатаСчФ104) Тогда
					СообщитьВТС("Приложение 4 -> Страница " + НомерСтраницы104_Стр
					+ ": в строке " + НомерСтроки104_Стр + " не задана дата счета-фактуры.",
					"Приложение4", "П001040000102_" + НомерСтроки104_Стр, НомерСтраницы104);
					СтатусПроверки = Ложь;
				КонецЕсли;
				НомерСтроки104 = НомерСтроки104 + 1;
			КонецЦикла;
			Если НЕ ЗаполненХотяБыОдинИзБлоковПриложения4 Тогда
				СообщитьВТС("Приложение 4 -> Страница " + НомерСтраницы104_Стр
				+ ": в строке 1 не задан номер счета-фактуры.",
				"Приложение4", "П001040000101_1", НомерСтраницы104);
				СообщитьВТС("Приложение 4 -> Страница " + НомерСтраницы104_Стр
				+ ": в строке 1 не задана дата счета-фактуры.",
				"Приложение4", "П001040000102_1", НомерСтраницы104);
				СтатусПроверки = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат СтатусПроверки;
	
КонецФункции

&НаСервере
Функция СохраненныеДанныеОтчета()
	
	Если СохраненныеДанныеОтчета = Неопределено Тогда
		
		СохраненныеДанныеОтчета = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить();
		
		Если СохраненныеДанныеОтчета.Свойство("ОкружениеСохранения") Тогда
			ВосстановитьСохраненныеДанныеОтчетаСтарогоОбразца(СохраненныеДанныеОтчета);
		КонецЕсли;
		
		ДанныеРаздела3 = СохраненныеДанныеОтчета.ДанныеМногостраничныхРазделов.Раздел3;
		Если НЕ ДанныеРаздела3[0].Данные.Свойство("П000030001003") Тогда
			// Значения в строках 010 и 020 раздела 3 ранее выводились в виде текста.
			Для каждого СтраницаРаздела3 Из ДанныеРаздела3 Цикл
				СтраницаРаздела3.Данные.Вставить("П000030001003", "735");
				СтраницаРаздела3.Данные.Вставить("П000030002003", "10037");
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СохраненныеДанныеОтчета;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьДанными(ДеревоВыгрузки, ПараметрыВыгрузки)
	
	ОбработатьУсловныеЭлементы(ПараметрыВыгрузки, ДеревоВыгрузки); // формируем точную структуру XML-макета
	ЗаполнитьДаннымиУзел(ПараметрыВыгрузки, ДеревоВыгрузки);
	ОтсечьНезаполненныеНеобязательныеУзлы(ДеревоВыгрузки);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСодержательнуюЧасть(УзелРодитель)
	
	ДанныеМногоуровневыхРазделов = Новый Структура;
	СохрСтруктура = СохраненныеДанныеОтчета();
	Для каждого ЭлементСтруктуры Из СохрСтруктура.ДанныеМногоуровневыхРазделов Цикл
		ДанныеМногоуровневыхРазделов.Вставить(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Значение);
	КонецЦикла;
	
	// Раздел 1.
	Данные1 = мДанныеОтчета.Раздел1;
	СумНалПУ = ПолучитьПодчиненныйЭлемент(УзелРодитель, "СумНалПУ");
	Для Каждого СтраницаРаздела Из Данные1 Цикл
		ДанныеСтраницы = СтраницаРаздела.Данные[0].Значение;
		ЭкзСумНалПУ = СкопироватьУзел(УзелРодитель, СумНалПУ);
		Для каждого Эл Из ЭкзСумНалПУ.Строки Цикл
			Если Эл.Строки.Количество() = 0 Тогда
				ВывестиПоказательВXML(Эл, ДанныеСтраницы[Эл.Ключ]);
			КонецЕсли;
		КонецЦикла;
		// Многострочная часть раздела 1.
		СумНалПУКод = ПолучитьПодчиненныйЭлемент(ЭкзСумНалПУ, "СумНалПУКод");
		НомерСтроки = 1;
		НомерСтрокиСтр = "1";
		Пока ДанныеСтраницы.Свойство("П000010000101_" + НомерСтрокиСтр) Цикл
			ЭкзСумНалПУКод = СкопироватьУзел(ЭкзСумНалПУ, СумНалПУКод);
			Для каждого Эл Из ЭкзСумНалПУКод.Строки Цикл
				Если Эл.Ключ = "П100010000102" Тогда
					СуммаНалПУ
					= ДанныеСтраницы["П000010000102_" + НомерСтрокиСтр]
					- ДанныеСтраницы["П000010000103_" + НомерСтрокиСтр];
					ВывестиПоказательВXML(Эл, СуммаНалПУ);
				Иначе
					ВывестиПоказательВXML(Эл, ДанныеСтраницы[Эл.Ключ + "_" + НомерСтрокиСтр]);
				КонецЕсли;
			КонецЦикла;
			НомерСтроки = НомерСтроки + 1;
			НомерСтрокиСтр = Формат(НомерСтроки, "ЧГ=");
		КонецЦикла;
	КонецЦикла;
	
	// Раздел 2.
	Данные2 = мДанныеОтчета.Раздел2;
	РасчАкц = ПолучитьПодчиненныйЭлемент(УзелРодитель, "РасчАкц");
	Для Каждого СтраницаРаздела Из Данные2 Цикл
		ДанныеСтраницы = СтраницаРаздела.Данные[0].Значение;
		Если НЕ СтраницаПуста(ДанныеСтраницы, "Раздел2", УзелРодитель.Владелец()) Тогда
			ЭкзРасчАкц = СкопироватьУзел(УзелРодитель, РасчАкц);
			Для каждого Эл Из ЭкзРасчАкц.Строки Цикл
				Если Эл.Строки.Количество() = 0 Тогда
					ВывестиПоказательВXML(Эл, ДанныеСтраницы[Эл.Ключ]);
				КонецЕсли;
			КонецЦикла;
			// Многострочная часть раздела 2.1.
			ОперПТ = ПолучитьПодчиненныйЭлемент(ЭкзРасчАкц, "ОперПТ");
			ОперПТКод = ПолучитьПодчиненныйЭлемент(ОперПТ, "ОперПТКод");
			НомерСтроки = 1;
			Пока ДанныеСтраницы.Свойство("П000210000101_" + Формат(НомерСтроки, "ЧГ=")) Цикл
				ЭкзОперПТКод = СкопироватьУзел(ОперПТ, ОперПТКод);
				ЗаполнитьДаннымиУзел(ДанныеСтраницы, ЭкзОперПТКод, НомерСтроки);
				НомерСтроки = НомерСтроки + 1;
			КонецЦикла;
			// Многострочная часть раздела 2.2.
			АкцизВыч = ПолучитьПодчиненныйЭлемент(ЭкзРасчАкц, "АкцизВыч");
			АкцизВычКод = ПолучитьПодчиненныйЭлемент(АкцизВыч, "АкцизВычКод");
			НомерСтроки = 1;
			Пока ДанныеСтраницы.Свойство("П000220000101_" + Формат(НомерСтроки, "ЧГ=")) Цикл
				ЭкзАкцизВычКод = СкопироватьУзел(АкцизВыч, АкцизВычКод);
				ЗаполнитьДаннымиУзел(ДанныеСтраницы, ЭкзАкцизВычКод, НомерСтроки);
				НомерСтроки = НомерСтроки + 1;
			КонецЦикла;
			// Раздела 2.3.
			АкцизПУ = ПолучитьПодчиненныйЭлемент(ЭкзРасчАкц, "АкцизПУ");
			Для каждого Эл Из АкцизПУ.Строки Цикл
				Если НЕ ЗначениеЗаполнено(Эл.Ключ) И ЗначениеЗаполнено(Эл.ЗначениеПоУмолчанию) Тогда
					ВывестиПоказательВXML(Эл, Эл.ЗначениеПоУмолчанию);
				Иначе
					ВывестиПоказательВXML(Эл, ДанныеСтраницы[Эл.Ключ]);
				КонецЕсли;
			КонецЦикла;
			АкцизУм = ПолучитьПодчиненныйЭлемент(ЭкзРасчАкц, "АкцизУм");
			Для каждого Эл Из АкцизУм.Строки Цикл
				Если НЕ ЗначениеЗаполнено(Эл.Ключ) И ЗначениеЗаполнено(Эл.ЗначениеПоУмолчанию) Тогда
					ВывестиПоказательВXML(Эл, Эл.ЗначениеПоУмолчанию);
				Иначе
					ВывестиПоказательВXML(Эл, ДанныеСтраницы[Эл.Ключ]);
				КонецЕсли;
			КонецЦикла;
			// Раздел 2.4.
			АкцизВозм = ПолучитьПодчиненныйЭлемент(ЭкзРасчАкц, "АкцизВозм");
			// Многострочная часть раздела 2.4.
			АкцизВозмКод = ПолучитьПодчиненныйЭлемент(АкцизВозм, "АкцизВозмКод");
			НомерСтроки = 1;
			Пока ДанныеСтраницы.Свойство("П000240000101_" + Формат(НомерСтроки, "ЧГ=")) Цикл
				ЭкзАкцизВозмКод = СкопироватьУзел(АкцизВозм, АкцизВозмКод);
				ЗаполнитьДаннымиУзел(ДанныеСтраницы, ЭкзАкцизВозмКод, НомерСтроки);
				НомерСтроки = НомерСтроки + 1;
			КонецЦикла;
			// Многострочная часть строк "010".
			ПревУплВозм = ПолучитьПодчиненныйЭлемент(АкцизВозм, "ПревУплВозм");
			НомерСтроки = 1;
			Пока ДанныеСтраницы.Свойство("П000240000201_" + Формат(НомерСтроки, "ЧГ=")) Цикл
				ЭкзПревУплВозм = СкопироватьУзел(АкцизВозм, ПревУплВозм);
				ЗаполнитьДаннымиУзел(ДанныеСтраницы, ЭкзПревУплВозм, НомерСтроки);
				НомерСтроки = НомерСтроки + 1;
			КонецЦикла;
			// Многострочная часть раздела 2.5.
			РеалПТБГ = ПолучитьПодчиненныйЭлемент(ЭкзРасчАкц, "РеалПТБГ");
			РеалПТБГКод = ПолучитьПодчиненныйЭлемент(РеалПТБГ, "РеалПТБГКод");
			НомерСтроки = 1;
			Пока ДанныеСтраницы.Свойство("П000250000101_" + Формат(НомерСтроки, "ЧГ=")) Цикл
				ЭкзРеалПТБГКод = СкопироватьУзел(РеалПТБГ, РеалПТБГКод);
				ЗаполнитьДаннымиУзел(ДанныеСтраницы, ЭкзРеалПТБГКод, НомерСтроки);
				НомерСтроки = НомерСтроки + 1;
			КонецЦикла;
			// Многострочная часть раздела 2.6.
			РеалПТЕЭС = ПолучитьПодчиненныйЭлемент(ЭкзРасчАкц, "РеалПТЕЭС");
			РеалПТЕЭСКод = ПолучитьПодчиненныйЭлемент(РеалПТЕЭС, "РеалПТЕЭСКод");
			НомерСтроки = 1;
			Пока ДанныеСтраницы.Свойство("П000260000101_" + Формат(НомерСтроки, "ЧГ=")) Цикл
				ЭкзРеалПТЕЭСКод = СкопироватьУзел(РеалПТЕЭС, РеалПТЕЭСКод);
				ЗаполнитьДаннымиУзел(ДанныеСтраницы, ЭкзРеалПТЕЭСКод, НомерСтроки);
				НомерСтроки = НомерСтроки + 1;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	// Раздел 3.
	Данные3 = мДанныеОтчета.Раздел3;
	РасчАкцГаз = ПолучитьПодчиненныйЭлемент(УзелРодитель, "РасчАкцГаз");
	Для Каждого СтраницаРаздела Из Данные3 Цикл
		ДанныеСтраницы = СтраницаРаздела.Данные[0].Значение;
		Если НЕ СтраницаПуста(ДанныеСтраницы, "Раздел3", УзелРодитель.Владелец()) Тогда
			ЭкзРасчАкцГаз = СкопироватьУзел(УзелРодитель, РасчАкцГаз);
			Для каждого Эл Из ЭкзРасчАкцГаз.Строки Цикл
				ВывестиПоказательВXML(Эл, ДанныеСтраницы[Эл.Ключ]);
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	// Приложение 1.
	ДанныеПрил1 = мДанныеОтчета.Приложение1;
	РасчНалБаза = ПолучитьПодчиненныйЭлемент(УзелРодитель, "РасчНалБаза");
	Для Каждого СтраницаРаздела Из ДанныеПрил1 Цикл
		ДанныеСтраницы = СтраницаРаздела.Данные[0].Значение;
		ЭкзРасчНалБаза = СкопироватьУзел(УзелРодитель, РасчНалБаза);
		Для каждого Эл Из ЭкзРасчНалБаза.Строки Цикл
			Если Эл.Строки.Количество() = 0 Тогда
				ВывестиПоказательВXML(Эл, ДанныеСтраницы[Эл.Ключ]);
			КонецЕсли;
		КонецЦикла;
		// Многострочная часть Приложения 1.
		РасчНалБазаКод = ПолучитьПодчиненныйЭлемент(ЭкзРасчНалБаза, "РасчНалБазаКод");
		НомерСтроки = 1;
		Пока ДанныеСтраницы.Свойство("П001010000101_" + Формат(НомерСтроки, "ЧГ=")) Цикл
			ЭкзРасчНалБазаКод = СкопироватьУзел(ЭкзРасчНалБаза, РасчНалБазаКод);
			ЗаполнитьДаннымиУзел(ДанныеСтраницы, ЭкзРасчНалБазаКод, НомерСтроки);
			НомерСтроки = НомерСтроки + 1;
		КонецЦикла;
	КонецЦикла;
	
	// Приложение 2.1.
	Прил21 = ДанныеМногоуровневыхРазделов.Приложение21;
	РасчАкОсвБГЭксп = ПолучитьПодчиненныйЭлемент(УзелРодитель, "РасчАкОсвБГЭксп");
	Для каждого СтраницаПрил21 Из Прил21.Строки Цикл
		ЭкзРасчАкОсвБГЭксп = СкопироватьУзел(УзелРодитель, РасчАкОсвБГЭксп);
		Для каждого Эл Из ЭкзРасчАкОсвБГЭксп.Строки Цикл
			Если Эл.Строки.Количество() = 0 Тогда
				ВывестиПоказательВXML(Эл, СтраницаПрил21.Данные[Эл.Ключ]);
			Иначе
				Если СокрЛП(Эл.Код) <> "БГОсвРеалЭксп" Тогда
					ТекУзел = ПолучитьПодчиненныйЭлемент(ЭкзРасчАкОсвБГЭксп, СокрЛП(Эл.Код));
					ЗаполнитьДаннымиУзел(СтраницаПрил21.Данные, ТекУзел);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		// Приложение 2.2.
		БГОсвРеалЭксп = ПолучитьПодчиненныйЭлемент(ЭкзРасчАкОсвБГЭксп, "БГОсвРеалЭксп");
		Для каждого СтраницаПрил22 Из СтраницаПрил21.Строки Цикл
			ЭкзБГОсвРеалЭксп = СкопироватьУзел(ЭкзРасчАкОсвБГЭксп, БГОсвРеалЭксп);
			Для каждого Эл Из ЭкзБГОсвРеалЭксп.Строки Цикл
				Если Эл.Строки.Количество() = 0 Тогда
					ВывестиПоказательВXML(Эл, СтраницаПрил22.Данные[Эл.Ключ]);
				Иначе
					ТекУзел = ПолучитьПодчиненныйЭлемент(ЭкзБГОсвРеалЭксп, СокрЛП(Эл.Код));
					ЗаполнитьДаннымиУзел(СтраницаПрил22.Данные, ТекУзел);
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	// Приложение 3.
	ДанныеПрил3 = мДанныеОтчета.Приложение3;
	БензПолучСвид = ПолучитьПодчиненныйЭлемент(УзелРодитель, "БензПолучСвид");
	Для Каждого СтраницаРаздела Из ДанныеПрил3 Цикл
		ДанныеСтраницы = СтраницаРаздела.Данные[0].Значение;
		Если НЕ СтраницаПуста(ДанныеСтраницы, "Приложение3", УзелРодитель.Владелец()) Тогда
			ЭкзБензПолучСвид = СкопироватьУзел(УзелРодитель, БензПолучСвид);
			Для каждого Эл Из ЭкзБензПолучСвид.Строки Цикл
				Если Эл.Строки.Количество() = 0 Тогда
					ВывестиПоказательВXML(Эл, ДанныеСтраницы[Эл.Ключ]);
				КонецЕсли;
			КонецЦикла;
			
			ИНН_Прил3 = СокрЛП(ДанныеСтраницы.П001030002001);
			Длина_ИНН_Прил3 = СтрДлина(ИНН_Прил3);
			
			ПоставОрг = ПолучитьПодчиненныйЭлемент(ЭкзБензПолучСвид, "ПоставОрг");
			ПоставИП  = ПолучитьПодчиненныйЭлемент(ЭкзБензПолучСвид, "ПоставИП");
			
			Если Длина_ИНН_Прил3 = 10 Тогда
				
				ЗаполнитьДаннымиУзел(ДанныеСтраницы, ПоставОрг);
				
				РегламентированнаяОтчетность.УдалитьУзел(ПоставИП);
				
			ИначеЕсли Длина_ИНН_Прил3 = 12 Тогда
				
				Для каждого Эл Из ПоставИП.Строки Цикл
					Если Эл.Строки.Количество() = 0 Тогда
						ВывестиПоказательВXML(Эл, ДанныеСтраницы[Эл.Ключ]);
					КонецЕсли;
				КонецЦикла;
				
				ФИОИП = РегламентированнаяОтчетность.РазложитьФИО(СокрЛП(ДанныеСтраницы.П001030001001));
				УзелФИО = ПолучитьПодчиненныйЭлемент(ПоставИП, "ФИО");
				ВывестиПоказательВXML(УзелФИО.Строки[0], ФИОИП.Фамилия);
				ВывестиПоказательВXML(УзелФИО.Строки[1], ФИОИП.Имя);
				ВывестиПоказательВXML(УзелФИО.Строки[2], ФИОИП.Отчество);
				
				РегламентированнаяОтчетность.УдалитьУзел(ПоставОрг);
				
			КонецЕсли;
			
			ОбПолБензПер650 = ПолучитьПодчиненныйЭлемент(ЭкзБензПолучСвид, "ОбПолБензПер650");
			Для каждого Эл Из ОбПолБензПер650.Строки Цикл
				Если НЕ ЗначениеЗаполнено(Эл.Ключ) И ЗначениеЗаполнено(Эл.ЗначениеПоУмолчанию) Тогда
					ВывестиПоказательВXML(Эл, Эл.ЗначениеПоУмолчанию);
				Иначе
					ВывестиПоказательВXML(Эл, ДанныеСтраницы[Эл.Ключ]);
				КонецЕсли;
			КонецЦикла;
			// Многострочная часть Приложения 3.
			СвОбБензСчФ = ПолучитьПодчиненныйЭлемент(ЭкзБензПолучСвид, "СвОбБензСчФ");
			НомерСтроки = 1;
			Пока ДанныеСтраницы.Свойство("П001030000101_" + Формат(НомерСтроки, "ЧГ=")) Цикл
				ЭкзСвОбБензСчФ = СкопироватьУзел(ЭкзБензПолучСвид, СвОбБензСчФ);
				ЗаполнитьДаннымиУзел(ДанныеСтраницы, ЭкзСвОбБензСчФ, НомерСтроки);
				НомерСтроки = НомерСтроки + 1;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	// Приложение 4.
	ДанныеПрил4 = мДанныеОтчета.Приложение4;
	БензРеалСвид = ПолучитьПодчиненныйЭлемент(УзелРодитель, "БензРеалСвид");
	Для Каждого СтраницаРаздела Из ДанныеПрил4 Цикл
		ДанныеСтраницы = СтраницаРаздела.Данные[0].Значение;
		Если НЕ СтраницаПуста(ДанныеСтраницы, "Приложение4", УзелРодитель.Владелец()) Тогда
			ЭкзБензРеалСвид = СкопироватьУзел(УзелРодитель, БензРеалСвид);
			Для каждого Эл Из ЭкзБензРеалСвид.Строки Цикл
				Если Эл.Строки.Количество() = 0 Тогда
					ВывестиПоказательВXML(Эл, ДанныеСтраницы[Эл.Ключ]);
				КонецЕсли;
			КонецЦикла;
			
			ИНН_Прил4 = СокрЛП(ДанныеСтраницы.П001040002001);
			Длина_ИНН_Прил4 = СтрДлина(ИНН_Прил4);
			
			ПолучОрг = ПолучитьПодчиненныйЭлемент(ЭкзБензРеалСвид, "ПолучОрг");
			ПолучИП  = ПолучитьПодчиненныйЭлемент(ЭкзБензРеалСвид, "ПолучИП");
			
			Если Длина_ИНН_Прил4 = 10 Тогда
				
				ЗаполнитьДаннымиУзел(ДанныеСтраницы, ПолучОрг);
				
				РегламентированнаяОтчетность.УдалитьУзел(ПолучИП);
				
			ИначеЕсли Длина_ИНН_Прил4 = 12 Тогда
				
				Для каждого Эл Из ПолучИП.Строки Цикл
					Если Эл.Строки.Количество() = 0 Тогда
						ВывестиПоказательВXML(Эл, ДанныеСтраницы[Эл.Ключ]);
					КонецЕсли;
				КонецЦикла;
				
				ФИОИП = РегламентированнаяОтчетность.РазложитьФИО(СокрЛП(ДанныеСтраницы.П001040001001));
				УзелФИО = ПолучитьПодчиненныйЭлемент(ПолучИП, "ФИО");
				ВывестиПоказательВXML(УзелФИО.Строки[0], ФИОИП.Фамилия);
				ВывестиПоказательВXML(УзелФИО.Строки[1], ФИОИП.Имя);
				ВывестиПоказательВXML(УзелФИО.Строки[2], ФИОИП.Отчество);
				
				РегламентированнаяОтчетность.УдалитьУзел(ПолучОрг);
				
			КонецЕсли;
			
			ОбРеалБензПер650 = ПолучитьПодчиненныйЭлемент(ЭкзБензРеалСвид, "ОбРеалБензПер650");
			Для каждого Эл Из ОбРеалБензПер650.Строки Цикл
				Если НЕ ЗначениеЗаполнено(Эл.Ключ) И ЗначениеЗаполнено(Эл.ЗначениеПоУмолчанию) Тогда
					ВывестиПоказательВXML(Эл, Эл.ЗначениеПоУмолчанию);
				Иначе
					ВывестиПоказательВXML(Эл, ДанныеСтраницы[Эл.Ключ]);
				КонецЕсли;
			КонецЦикла;
			// Многострочная часть Приложения 4.
			СвОбБензСчФ = ПолучитьПодчиненныйЭлемент(ЭкзБензРеалСвид, "СвОбБензСчФ");
			НомерСтроки = 1;
			Пока ДанныеСтраницы.Свойство("П001040000101_" + Формат(НомерСтроки, "ЧГ=")) Цикл
				ЭкзСвОбБензСчФ = СкопироватьУзел(ЭкзБензРеалСвид, СвОбБензСчФ);
				ЗаполнитьДаннымиУзел(ДанныеСтраницы, ЭкзСвОбБензСчФ, НомерСтроки);
				НомерСтроки = НомерСтроки + 1;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПроверитьДанные(Узел)
	
	СтатусПроверки = Истина;
	Если ТипЗнч(Узел) <> Тип("ДеревоЗначений") Тогда
		Если НЕ ЗначениеСоответствуетФормату(Узел) Тогда
			СтатусПроверки = Ложь;
		КонецЕсли;
	КонецЕсли;
	Для Каждого Стр из Узел.Строки Цикл
		СтатусПроверки = (ПроверитьДанные(Стр) И СтатусПроверки); // именно в указанном порядке для выдачи всех ошибок
	КонецЦикла;
	Возврат СтатусПроверки;
	
КонецФункции

&НаСервере
Функция ПолучитьПоказателиРаздела(ДеревоВыгрузки, Раздел)
	
	ПоказателиРаздела = ДеревоВыгрузки.Строки.НайтиСтроки(Новый Структура("Раздел", Раздел), Истина);
	КоличествоСтрокРаздела = ПоказателиРаздела.Количество();
	Для ОбрИнд = 1 По КоличествоСтрокРаздела Цикл
		Инд = КоличествоСтрокРаздела - ОбрИнд;
		ТекСтр = ПоказателиРаздела[Инд];
		Если НЕ ЗначениеЗаполнено(ТекСтр.Ключ) Тогда
			ПоказателиРаздела.Удалить(Инд);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ПоказателиРаздела;
	
КонецФункции

&НаСервере
Функция ПоказательЗаполнен(Показатель, Значение)
	
	Возврат ЗначениеЗаполнено(Значение) И НЕ (СокрЛП(Показатель.Формат) = "N" И Показатель.МаксРазмерность = 15 И ТипЗнч(Значение) = Тип("Число") И Окр(Значение) = 0);
	
КонецФункции

&НаСервере
Функция СтраницаПуста(ДанныеСтраницы, Показатели, ДеревоВыгрузки = Неопределено)
	
	Если ТипЗнч(Показатели) = Тип("Строка") Тогда
		ПоказателиРаздела = ПолучитьПоказателиРаздела(ДеревоВыгрузки, Показатели);
	Иначе
		ПоказателиРаздела = Показатели;
	КонецЕсли;
	
	ПоказателиНеанализируемыеНаЗаполненность = Новый Массив;
	
	Для Каждого Пок Из ПоказателиРаздела Цикл
		Если ПоказателиНеанализируемыеНаЗаполненность.Найти(Пок.Ключ) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Если Пок.Многострочность Тогда
			ИндексСтроки = 1;
			ЗначениеПоказателя = Неопределено;
			Пока ДанныеСтраницы.Свойство(Пок.Ключ + "_" + Формат(ИндексСтроки, "ЧГ="), ЗначениеПоказателя) Цикл
				Если ПоказательЗаполнен(Пок, ЗначениеПоказателя) Тогда
					Возврат Ложь;
				КонецЕсли;
				ИндексСтроки = ИндексСтроки + 1;
			КонецЦикла;
		Иначе
			Если ПоказательЗаполнен(Пок, ДанныеСтраницы[Пок.Ключ]) Тогда
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция СкопироватьУзел(Родитель, Узел)
	
	// Находим узел с максимальным индексом и с тем же кодом,
	// что и у копируемого, и добавляем новый сразу после найденного
	СтрокиСТемЖеКодом = Родитель.Строки.НайтиСтроки(Новый Структура("Код", Узел.Код), Ложь);
	МаксИндекс = -1;
	Для Каждого СтрокаСТемЖеКодом Из СтрокиСТемЖеКодом Цикл
		ТекИндекс = Родитель.Строки.Индекс(СтрокаСТемЖеКодом);
		Если ТекИндекс > МаксИндекс Тогда
			МаксИндекс = ТекИндекс;
		КонецЕсли;
	КонецЦикла;
	
	ИндексСоздаваемогоУзла = МаксИндекс + 1;
	Если ИндексСоздаваемогоУзла >= Родитель.Строки.Количество() ИЛИ ИндексСоздаваемогоУзла = 0 Тогда // если аналогичный узел не найден или найденный узел - последний
		НовыйУзел = Родитель.Строки.Добавить();
	Иначе
		НовыйУзел = Родитель.Строки.Вставить(ИндексСоздаваемогоУзла);
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(НовыйУзел, Узел, , "Родитель, Строки");
	Для Каждого Стр из Узел.Строки Цикл
		СкопироватьУзел(НовыйУзел, Стр);
	КонецЦикла;
	Возврат НовыйУзел;
	
КонецФункции

&НаСервере
Функция ПолучитьПодчиненныйЭлемент(Узел, КодЭлемента)
	
	ЧислоВместоКодаЭлемента = (ТипЗнч(КодЭлемента) = Тип("Число"));
	Если ТипЗнч(КодЭлемента) = Тип("Число") Тогда
		Если Узел.Строки.Количество() > КодЭлемента Тогда
			Возврат Узел.Строки.Получить(КодЭлемента);
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	Иначе
		Для Каждого Стр Из Узел.Строки Цикл
			Если Стр.Код = КодЭлемента Тогда
				Возврат Стр;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ОтсечьНезаполненныеНеобязательныеУзлы(Узел)
	
	КоличествоСтрок = Узел.Строки.Количество();
	Для Инд = 1 По КоличествоСтрок Цикл
		Стр = Узел.Строки.Получить(КоличествоСтрок - Инд);
		ОтсечьНезаполненныеНеобязательныеУзлы(Стр);
	КонецЦикла;
	
	Если ТипЗнч(Узел) <> Тип("ДеревоЗначений") Тогда
		Если (СтрНайти(Узел.Обязательность, "Н") <> 0 ИЛИ СтрНайти(Узел.Обязательность, "H") <> 0) И УзелПуст(Узел) Тогда // учтем оба варианта: кириллицу и латиницу
			РегламентированнаяОтчетность.УдалитьУзел(Узел);
		ИначеЕсли (СтрНайти(Узел.Обязательность, "М") <> 0 ИЛИ СтрНайти(Узел.Обязательность, "M") <> 0) // учтем оба варианта: кириллицу и латиницу
		И УзелПуст(Узел)
		И ?(СтрНайти(Узел.Обязательность, "О") <> 0 ИЛИ СтрНайти(Узел.Обязательность, "O") <> 0, РегламентированнаяОтчетность.ИмеютсяАналогичныеСоседниеУзлыКлюч(Узел), Истина) Тогда
			РегламентированнаяОтчетность.УдалитьУзел(Узел);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция УзелПуст(Узел, ПоказателиНеанализируемыеНаЗаполненность = Неопределено)
	
	ПустойУзел = ?(Узел.Формат = "N",
		Узел.Значение = "0" ИЛИ (НЕ ЗначениеЗаполнено(Узел.Значение)),
		НЕ ЗначениеЗаполнено(Узел.Значение));
	Для Каждого Стр из Узел.Строки Цикл
		Если НЕ УзелПуст(Стр) Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ПустойУзел;
	
КонецФункции

&НаСервере
Процедура ОбработатьУсловныеЭлементы(Знач ПараметрыВыгрузки, Узел)
	
	Если ТипЗнч(Узел) <> Тип("ДеревоЗначений") Тогда
		Если Узел.Код = ПараметрыВыгрузки.ИмяКлючевогоУзлаСодержательнойЧасти Тогда
			Возврат;
		КонецЕсли;
		РегламентированнаяОтчетность.ДополнитьСтруктуруПараметров(мДанныеОтчета, ПараметрыВыгрузки, Узел);
	КонецЕсли;
	КоличествоСтрок = Узел.Строки.Количество();
	Для Инд = 1 По КоличествоСтрок Цикл
		ТекСтр = Узел.Строки.Получить(КоличествоСтрок - Инд);
		Если НЕ ПустаяСтрока(ТекСтр.Условие) Тогда
			Если НЕ РегламентированнаяОтчетность.УсловиеВыполнено(ЭтаФорма, ПараметрыВыгрузки, ТекСтр.Условие) Тогда
				Узел.Строки.Удалить(ТекСтр);
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		ОбработатьУсловныеЭлементы(ПараметрыВыгрузки, ТекСтр);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ВывестиПоказательВXML(Узел, Знач ЗначениеПоказателя)
	
	МинШирина = Узел.МинРазмерность;
	МаксШирина = Узел.МаксРазмерность;
	
	Если Узел.Формат = "T" ИЛИ Узел.Формат = "Т" Тогда // учтем оба варианта: кириллицу и латиницу
		Если ТипЗнч(ЗначениеПоказателя) = Тип("Число") Тогда
			ЗначениеПоказателя = Формат(ЗначениеПоказателя, "ЧГ=");
		КонецЕсли;
		Если ТипЗнч(ЗначениеПоказателя) = Тип("Дата") Тогда
			ЗначениеПоказателя = Формат(ЗначениеПоказателя, "ДФ=дд.ММ.гггг");
		КонецЕсли;
		Если ЗначениеЗаполнено(ЗначениеПоказателя) Тогда
			Узел.Значение = ?(МаксШирина < СтрДлина(СокрЛП(ЗначениеПоказателя)), СокрЛП(Лев(СокрЛП(ЗначениеПоказателя), МаксШирина)), СокрЛП(ЗначениеПоказателя));
		Иначе
			Узел.Значение = Неопределено;
		КонецЕсли;
	ИначеЕсли Узел.Формат = "N" Тогда
		СтрокаФормата = "ЧРД=.;ЧН=0;ЧГ=;";
		Если Узел.МаксРазмерность <> 0 И Узел.МаксРазмерность <> 99999 Тогда
			СтрокаФормата = СтрокаФормата + "ЧЦ=" + Формат(Узел.МаксРазмерность, "ЧГ=") + ";";
		КонецЕсли;
		Если Узел.МинРазмерность <> 99999 Тогда
			СтрокаФормата = СтрокаФормата + "ЧДЦ=" + Формат(Узел.МинРазмерность, "ЧГ=") + ";";
		КонецЕсли;
		Узел.Значение = СокрЛП(Формат(ЗначениеПоказателя, СтрокаФормата));
	ИначеЕсли Узел.Формат = "gYear" Тогда
		Если ТипЗнч(ЗначениеПоказателя) = Тип("Дата") Тогда
			Если ЗначениеЗаполнено(ЗначениеПоказателя) Тогда
				Узел.Значение = СокрЛП(Формат(ЗначениеПоказателя, "ДФ=гггг"));
			Иначе
				Узел.Значение = Неопределено;
			КонецЕсли;
		Иначе
			Узел.Значение = Прав(СокрЛП(ЗначениеПоказателя), 4);
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ПолучитьПервыйПодчиненныйУзелСЗаполненнымКлючом(Родитель)
	
	Для Каждого Стр из Родитель.Строки Цикл
		Если ЗначениеЗаполнено(Стр.Ключ) Тогда
			Возврат Стр;
		КонецЕсли;
	КонецЦикла;
	Возврат Неопределено;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьДаннымиУзел(ПараметрыВыгрузки, Узел, НомерСтроки = Неопределено)
	
	СтрокиУзла = Новый Массив;
	Для Каждого Стр Из Узел.Строки Цикл
		СтрокиУзла.Добавить(Стр);
	КонецЦикла;
	
	Для Каждого Стр из СтрокиУзла Цикл
		Если Стр.Тип = "С" ИЛИ Стр.Тип = "C" Тогда // учтем оба варианта: кириллицу и латиницу
			Если РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(ПараметрыВыгрузки, "ИмяКлючевогоУзлаСодержательнойЧасти") И Стр.Код = ПараметрыВыгрузки.ИмяКлючевогоУзлаСодержательнойЧасти Тогда
				ЗаполнитьСодержательнуюЧасть(Стр);
			ИначеЕсли Стр.Многострочность Тогда
				НомСтр = 1;
				ПодчиненныйЭлемент = ПолучитьПервыйПодчиненныйУзелСЗаполненнымКлючом(Стр);
				КлючПодчиненногоЭлемента = ПодчиненныйЭлемент.Ключ;
				Пока РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(ПараметрыВыгрузки, КлючПодчиненногоЭлемента + "_" + Формат(НомСтр, "ЧГ=")) Цикл
					УзелСоответствующийСтроке = СкопироватьУзел(Узел, Стр);
					ЗаполнитьДаннымиУзел(ПараметрыВыгрузки, УзелСоответствующийСтроке, НомСтр);
					НомСтр = НомСтр + 1;
				КонецЦикла;
			Иначе
				ЗаполнитьДаннымиУзел(ПараметрыВыгрузки, Стр, НомерСтроки);
			КонецЕсли;
		Иначе
			Если ПустаяСтрока(Стр.ЗначениеПоУмолчанию) Тогда
				Если НЕ ПустаяСтрока(Стр.Ключ) Тогда
					ПолныйКодПоказателя = Стр.Ключ + ?(ЗначениеЗаполнено(НомерСтроки), "_" + Формат(НомерСтроки, "ЧГ="), "");
					ЗначениеПоказателя = Неопределено;
					Если ПараметрыВыгрузки.Свойство(ПолныйКодПоказателя, ЗначениеПоказателя) Тогда
						ВывестиПоказательВXML(Стр, ЗначениеПоказателя);
					Иначе
						ВывестиПоказательВXML(Стр, "");
					КонецЕсли;
				Иначе
					Стр.Значение = "";
				КонецЕсли;
			ИначеЕсли Лев(Стр.ЗначениеПоУмолчанию, 1) = "&" Тогда
				ВывестиПоказательВXML(Стр, ПараметрыВыгрузки[Сред(Стр.ЗначениеПоУмолчанию, 2)]);
			Иначе
				Стр.Значение = Стр.ЗначениеПоУмолчанию;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ЗначениеСоответствуетФормату(Стр)
	
	СтатусПроверки = Истина;
	Если Стр.Формат = "Т" ИЛИ Стр.Формат = "T" Тогда // учтем оба варианта: кириллицу и латиницу
		ДлинаЗначения = СтрДлина(Стр.Значение);
		Если ДлинаЗначения < Стр.МинРазмерность Тогда
			СтатусПроверки = Ложь;
			СообщитьВТС("Длина значения показателя """ + РегламентированнаяОтчетность.ПредставлениеПоказателя(Стр) + """ меньше минимально возможной (" + ДлинаЗначения + " < " + Стр.МинРазмерность + ")", "Титульный", "");
		КонецЕсли;
		Если ДлинаЗначения > Стр.МаксРазмерность Тогда
			СтатусПроверки = Ложь;
			СообщитьВТС("Длина значения показателя """ + РегламентированнаяОтчетность.ПредставлениеПоказателя(Стр) + """ больше максимально возможной (" + ДлинаЗначения + " > " + Стр.МаксРазмерность + ")", "Титульный", "");
		КонецЕсли;
	КонецЕсли;
	Возврат СтатусПроверки;
	
КонецФункции

&НаСервере
Функция ВыгрузитьДеревоВXML(ДеревоВыгрузки, ПараметрыВыгрузки)
	
	ПотокXML = РегламентированнаяОтчетность.СоздатьНовыйПотокXML("windows-1251"); // создаем новый поток для записи
	ЗаписатьУзелДереваВXML(ДеревоВыгрузки, ПотокXML, ПараметрыВыгрузки); // пишем дерево в поток
	ТекстДляЗаписи = ПотокXML.Закрыть(); // получаем текст XML

	Возврат ТекстДляЗаписи;
	
КонецФункции

&НаСервере
Функция ЗаписатьУзелДереваВXML(СтрокаДерева, ПотокXML, ПараметрыВыгрузки) Экспорт
	
	Если ТипЗнч(СтрокаДерева) = Тип("ДеревоЗначений") Тогда
		ПотокXML.ЗаписатьНачалоЭлемента("Файл");
		ПотокXML.ЗаписатьАтрибут("xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");
		Для каждого Стр Из СтрокаДерева.Строки Цикл
			ЗаписатьУзелДереваВXML(Стр, ПотокXML, ПараметрыВыгрузки);
		КонецЦикла;
		ПотокXML.ЗаписатьКонецЭлемента();
	Иначе
		Если СтрокаДерева.Тип = "А" ИЛИ СтрокаДерева.Тип = "A" Тогда 
			ПотокXML.ЗаписатьАтрибут(СтрокаДерева.Код, Строка(СтрокаДерева.Значение));
		Иначе
			ПотокXML.ЗаписатьНачалоЭлемента(СтрокаДерева.Код);
			Для каждого Лист из СтрокаДерева.Строки Цикл
				ЗаписатьУзелДереваВXML(Лист, ПотокXML, ПараметрыВыгрузки);
			КонецЦикла;
			ПотокXML.ЗаписатьТекст(Строка(СтрокаДерева.Значение));
			ПотокXML.ЗаписатьКонецЭлемента();
		КонецЕсли;
	КонецЕсли;

КонецФункции

&НаКлиенте
Процедура ВыгрузитьОтчет() Экспорт
	
	Если НЕ ЗначениеЗаполнено(СтруктураРеквизитовФормы.Организация) Тогда
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Организация не выбрана. Выгрузка невозможна.'");
		Сообщение.Сообщить();
		
		Возврат;
		
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьОтчетЗавершение", ЭтотОбъект);
	
	Если Модифицированность Тогда
		СохранитьНаКлиенте(,ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьОтчетЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ФормаВыгрузкиРеглОтчета = ПолучитьФорму("Документ.ВыгрузкаРегламентированныхОтчетов.Форма.ФормаДокумента", , ЭтаФорма);
	
	СпДокОсн = Новый СписокЗначений;
	СпДокОсн.Добавить(СтруктураРеквизитовФормы.мСохраненныйДок);
	
	ФормаВыгрузкиРеглОтчета.СформироватьИЗаписать(СпДокОсн);
	
КонецПроцедуры

&НаКлиенте
Функция УниверсальнаяВыгрузка(ТекстВыгрузки = Неопределено, ПроверятьБлокировки = Истина) Экспорт
	
	Перем ПараметрыВыгрузки;
	
	Если Модифицированность Тогда
		ТекстЗаголовка = ЗаголовокРегламентированногоОтчета(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета, СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
		
		ОргСтр = " (" + СтруктураРеквизитовФормы.Организация + ")";
		Если СтрНайти(ТекстЗаголовка, ОргСтр) = 0 Тогда
			ТекстЗаголовка = ТекстЗаголовка + ОргСтр;
		КонецЕсли;
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Отчет """ + ТекстЗаголовка + """ не сохранен.";
		Сообщение.Сообщить();
		
		Возврат Ложь;
	КонецЕсли;
	
	Если Открыта() Тогда
		Если СтруктураРеквизитовФормы.ЕдиницаИзмерения <> ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1 Тогда
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='Перед выгрузкой необходимо установить единицу измерения ""в рублях"".'");
			Сообщение.Сообщить();
			
			Возврат Ложь;
			
		КонецЕсли;
		Если СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения <> 0 Тогда
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='Перед выгрузкой необходимо установить точность ""0"".'");
			Сообщение.Сообщить();
			
			Возврат Ложь;
			
		КонецЕсли;
	КонецЕсли;
	
	Если СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки = Истина Тогда // возможны 3 состояния
		РегламентированнаяОтчетностьКлиент.ПроверитьКонтрольныеСоотношения(ЭтаФорма, ОбработкаКС, Истина);
	КонецЕсли;
	
	Если НЕ УниверсальнаяВыгрузкаXMLНаСервере(ТекстВыгрузки, ПараметрыВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Функция ЗаголовокРегламентированногоОтчета(ДатаНач, ДатаКон, Периодичность = Неопределено) Экспорт
	
	СтрПериодОтчета = ПредставлениеПериода(
	НачалоДня(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета),
	КонецДня(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета), "ФП = Истина");
	
	Если СтрНайти(ЭтаФорма.Заголовок, СтрПериодОтчета) = 0 Тогда
		Возврат ЭтаФорма.Заголовок + " за " + СтрПериодОтчета;
	Иначе
		Возврат ЭтаФорма.Заголовок;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция УниверсальнаяВыгрузкаXMLНаСервере(ТекстВыгрузки, ПараметрыВыгрузки)
	
	СформироватьСтруктуруПоказателей();
	ПараметрыВыгрузки = СформироватьСтруктуруПараметров();
	ДеревоВыгрузки = ИзвлечьСтруктуруXML();
	
	Если НЕ ПроверитьВозможностьВыгрузки(ПараметрыВыгрузки, ДеревоВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ЗаполнитьДанными(ДеревоВыгрузки, ПараметрыВыгрузки);
	Если НЕ ПроверитьДанные(ДеревоВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ТекстВыгрузки = ВыгрузитьДеревоВXML(ДеревоВыгрузки, ПараметрыВыгрузки);
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура АктивизироватьЯчейку(Ячейка) Экспорт
	
	Если Ячейка.Раздел = "Приложение21" Тогда
		
		Для каждого НайденныйРаздел Из РазделыОтчета.ПолучитьЭлементы() Цикл
			Если НайденныйРаздел.КолонкаРазделыОтчетаСокрНаим = "Приложение21" Тогда
				Для каждого НайденнаяСтраница Из НайденныйРаздел.ПолучитьЭлементы() Цикл
					Если НайденнаяСтраница.КолонкаНомерСтраницыРазделаОтчета = Число(Ячейка.Страница) Тогда
						СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Истина;
						Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяСтраница.ПолучитьИдентификатор();
						Прервать;
					КонецЕсли;
				КонецЦикла;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли Ячейка.Раздел = "Приложение22" Тогда
		
		НомераСтрокМногоуровнегоРаздела
			= СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Ячейка.Страница);
		
		Для каждого НайденныйРаздел Из РазделыОтчета.ПолучитьЭлементы() Цикл
			Если НайденныйРаздел.КолонкаРазделыОтчетаСокрНаим = "Приложение21" Тогда
				Для каждого НайденнаяСтраница Из НайденныйРаздел.ПолучитьЭлементы() Цикл
					Если НайденнаяСтраница.КолонкаНомерСтраницыРазделаОтчета
						= Число(НомераСтрокМногоуровнегоРаздела[0]) Тогда
						ТекСтраницаРаздела21 = НайденнаяСтраница;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Для каждого НайденнаяСтраница22 Из ТекСтраницаРаздела21.ПолучитьЭлементы() Цикл
			Если НайденнаяСтраница22.КолонкаНомерСтраницыРазделаОтчета
				= Число(НомераСтрокМногоуровнегоРаздела[1]) Тогда
				Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяСтраница22.ПолучитьИдентификатор();
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Если Ячейка.Раздел = "Приложение21"
		ИЛИ Ячейка.Раздел = "Приложение22" Тогда
		ТекущийЭлемент = Элементы.ТабличныйДокумент;
		НайденнаяОбласть = ТабличныйДокумент.Области.Найти(Ячейка.ИмяЯчейки);
		Если НЕ НайденнаяОбласть = Неопределено Тогда
			Элементы.ТабличныйДокумент.ТекущаяОбласть = НайденнаяОбласть;
		ИначеЕсли Ячейка.СтрокаПП <> Неопределено И ЗначениеЗаполнено(Ячейка.СтрокаПП) Тогда
			НайденнаяОбласть = ТабличныйДокумент.Области.Найти(Ячейка.ИмяЯчейки + Ячейка.СтрокаПП);
			Если НЕ НайденнаяОбласть = Неопределено Тогда
				Элементы.ТабличныйДокумент.ТекущаяОбласть = НайденнаяОбласть;
			Иначе
				НайденнаяОбласть = ТабличныйДокумент.Области.Найти(Ячейка.ИмяЯчейки + "_" + Ячейка.СтрокаПП);
				Если НЕ НайденнаяОбласть = Неопределено Тогда
					Элементы.ТабличныйДокумент.ТекущаяОбласть = НайденнаяОбласть;
				КонецЕсли;
			КонецЕсли;
		Иначе
			НайденнаяОбласть = ТабличныйДокумент.Области.Найти(Ячейка.ИмяЯчейки + "1");
			Если НЕ НайденнаяОбласть = Неопределено Тогда
				Элементы.ТабличныйДокумент.ТекущаяОбласть = НайденнаяОбласть;
			Иначе
				НайденнаяОбласть = ТабличныйДокумент.Области.Найти(Ячейка.ИмяЯчейки + "_1");
				Если НЕ НайденнаяОбласть = Неопределено Тогда
					Элементы.ТабличныйДокумент.ТекущаяОбласть = НайденнаяОбласть;
				Иначе
					Элементы.ТабличныйДокумент.ТекущаяОбласть = ТабличныйДокумент.Область(Ячейка.ИмяЯчейки);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
		РазделыОтчетаПриАктивизацииСтроки(Элементы.РазделыОтчета);
		СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Истина;
	Иначе
		РегламентированнаяОтчетностьКлиент.АктивизироватьЯчейку(ЭтаФорма, Ячейка);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьДеревоРазделовОтчетаНаСервере() Экспорт
	
	СформироватьДеревоРазделовОтчета(ЭтаФорма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СформироватьДеревоРазделовОтчета(Форма)
	
	Форма["РазделыОтчета"].ПолучитьЭлементы().Очистить();
	
	Для Каждого ЭлементДереваСтраницОтчета Из Форма["мДеревоСтраницОтчета"].ПолучитьЭлементы() Цикл
		
		Если ЭлементДереваСтраницОтчета.ПоказатьСтраницу = 1 Тогда
			
			ЭлементРазделовОтчета = Форма["РазделыОтчета"].ПолучитьЭлементы().Добавить();
			ЭлементРазделовОтчета.КолонкаРазделыОтчета         = ЭлементДереваСтраницОтчета.Представление;
			ЭлементРазделовОтчета.КолонкаРазделыОтчетаСокрНаим = ЭлементДереваСтраницОтчета.ИмяСтраницы;
			ЭлементРазделовОтчета.ИндексКартинки               = 1;
			ЭлементРазделовОтчета.РазделМногостраничный        = Ложь;
			ЭлементРазделовОтчета.РазделМногострочный          = Ложь;
			
			Если ЭлементРазделовОтчета.КолонкаРазделыОтчетаСокрНаим = "Приложение21" Тогда
				
				ДеревоДанныхПриложение21 = ПолучитьИзВременногоХранилища(
					Форма.СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхПриложение21"]);
				
				КолСтрокВДеревеДанныхПриложение21 = Макс(ДеревоДанныхПриложение21.Строки.Количество(), 1);
				
				ЭлементРазделовОтчета.ИндексКартинки = 0;
				ЭлементРазделовОтчета.РазделМногостраничный = Истина;
				
				Для НомерСтраницыПриложение21 = 1 По КолСтрокВДеревеДанныхПриложение21 Цикл
					
					ЭлементПриложение21 = ЭлементРазделовОтчета.ПолучитьЭлементы().Добавить();
					
					ЭлементПриложение21.КолонкаРазделыОтчета              = "Расчет акциза. Стр. " + НомерСтраницыПриложение21;
					ЭлементПриложение21.КолонкаРазделыОтчетаСокрНаим      = "Приложение21";
					ЭлементПриложение21.КолонкаНомерСтраницыРазделаОтчета = НомерСтраницыПриложение21;
					ЭлементПриложение21.ИндексКартинки                    = 0;
					ЭлементПриложение21.РазделМногостраничный             = ЭлементРазделовОтчета.РазделМногостраничный;
					ЭлементПриложение21.РазделМногострочный               = ЭлементРазделовОтчета.РазделМногострочный;
					
					КолСтрокВДеревеДанныхПриложение22
						= Макс(ДеревоДанныхПриложение21.Строки[НомерСтраницыПриложение21 - 1].Строки.Количество(), 1);
					
					Для НомерСтраницыПриложение22 = 1 По КолСтрокВДеревеДанныхПриложение22 Цикл
						
						ЭлементПриложение22 = ЭлементПриложение21.ПолучитьЭлементы().Добавить();
						
						ЭлементПриложение22.КолонкаРазделыОтчета              = "Банковская гарантия. Стр. " + НомерСтраницыПриложение22;
						ЭлементПриложение22.КолонкаРазделыОтчетаСокрНаим      = "Приложение22";
						ЭлементПриложение22.КолонкаНомерСтраницыРазделаОтчета = НомерСтраницыПриложение22;
						ЭлементПриложение22.ИндексКартинки                    = 1;
						ЭлементПриложение22.РазделМногостраничный             = ЭлементПриложение21.РазделМногостраничный;
						ЭлементПриложение22.РазделМногострочный               = ЭлементПриложение21.РазделМногострочный;
						
					КонецЦикла;
					
				КонецЦикла;
				
			КонецЕсли;
			
			НайденноеЗначение = Неопределено;
			
			Если Форма["мСтруктураМногостраничныхРазделов"].Свойство(ЭлементРазделовОтчета.КолонкаРазделыОтчетаСокрНаим, НайденноеЗначение) Тогда
				
				Если НЕ НайденноеЗначение = Неопределено Тогда
					
					НайденноеЗначение = Форма[НайденноеЗначение];
					
					ЭлементРазделовОтчета.ИндексКартинки        = 0;
					ЭлементРазделовОтчета.РазделМногостраничный = Истина;
					
					Для НомерСтраницы = 1 По НайденноеЗначение.Количество() Цикл
						
						СтраницаРазделаОтчета = ЭлементРазделовОтчета.ПолучитьЭлементы().Добавить();
						
						СтраницаРазделаОтчета.КолонкаРазделыОтчета              = "Стр. " + НомерСтраницы;
						СтраницаРазделаОтчета.КолонкаРазделыОтчетаСокрНаим      = ЭлементРазделовОтчета.КолонкаРазделыОтчетаСокрНаим;
						СтраницаРазделаОтчета.КолонкаНомерСтраницыРазделаОтчета = НомерСтраницы;
						СтраницаРазделаОтчета.ИндексКартинки                    = 1;
						СтраницаРазделаОтчета.РазделМногостраничный             = ЭлементРазделовОтчета.РазделМногостраничный;
						СтраницаРазделаОтчета.РазделМногострочный               = ЭлементРазделовОтчета.РазделМногострочный;
						
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура РазделыОтчетаПриАктивизацииСтроки(Элемент)
	
	Если Элемент.ТекущиеДанные = Неопределено
	 ИЛИ Элемент.ТекущаяСтрока = СтруктураРеквизитовФормы.ТекущаяСтрокаРазделовОтчета Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураРеквизитовФормы.ТекущаяСтрокаРазделовОтчета = Элемент.ТекущаяСтрока;
	Элементы.ОчиститьТекущуюСтраницу.Доступность = Истина;
	Если СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере Тогда
		
		Если Элемент.ТекущиеДанные.РазделМногостраничный Тогда
			Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета
				= ?(Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета = Неопределено
				ИЛИ Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета = 0,
				1, Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета);
		КонецЕсли;
		
		Если Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Приложение21"
		 ИЛИ Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Приложение22" Тогда
			
			НовыеНомераСтрокМногоуровнегоРаздела = Новый Массив;
			
			ТекРодитель = Элемент.ТекущиеДанные.ПолучитьРодителя();
			Если ТекРодитель <> Неопределено Тогда
				Пока ТекРодитель.ПолучитьРодителя() <> Неопределено Цикл
					НовыеНомераСтрокМногоуровнегоРаздела.Вставить(0, ТекРодитель.КолонкаНомерСтраницыРазделаОтчета);
					ТекРодитель = ТекРодитель.ПолучитьРодителя();
				КонецЦикла;
			КонецЕсли;
			
			НовыеНомераСтрокМногоуровнегоРаздела.Добавить(Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета);
			
			ВывестиМакетСтраницыВТабличныйДокументНаСервере(
				Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим,
				Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета,
				НовыеНомераСтрокМногоуровнегоРаздела);
			
		Иначе
			ВывестиМакетСтраницыВТабличныйДокументНаСервере(
				Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим,
				Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета);
		КонецЕсли;
		
	Иначе
		СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Истина;
	КонецЕсли;
	
	КМенюРО = Элементы.РазделыОтчета.КонтекстноеМеню;
	Если Элемент.ТекущиеДанные.РазделМногостраничный Тогда
		Элемент.Развернуть(Элемент.ТекущаяСтрока);
		КМенюРО.Видимость = Истина;
		Если Элемент.ТекущиеДанные.ПолучитьРодителя() = Неопределено Тогда
			Элементы.ОчиститьТекущуюСтраницу.Доступность = Ложь;
		КонецЕсли;
		
		Если НЕ Элемент.ТекущиеДанные.ПолучитьРодителя() = Неопределено
			И Элемент.ТекущиеДанные.ПолучитьРодителя().ПолучитьЭлементы().Количество() > 1 Тогда
			КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюДобавитьСтраницу.Видимость = Истина;
			КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюУдалитьСтраницу.Видимость = Истина;
			
		Иначе
			КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюДобавитьСтраницу.Видимость = Истина;
			КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюУдалитьСтраницу.Видимость = Ложь;
			
		КонецЕсли;
		
		#Если ВебКлиент Тогда
			ВидимостьМеню = КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюДобавитьСтраницу.Видимость;
			КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюДобавитьСтраницу.Видимость = Ложь;
		#КонецЕсли
		
		Если СтрНайти(Элемент.ТекущиеДанные.КолонкаРазделыОтчета, "Расчет акциза") > 0
			ИЛИ Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Приложение21" Тогда
			КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюДобавитьСтраницу.Заголовок
			= "Добавить страницу ""Расчет акциза""";
		ИначеЕсли СтрНайти(Элемент.ТекущиеДанные.КолонкаРазделыОтчета, "Банковская гарантия") > 0 Тогда
			КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюДобавитьСтраницу.Заголовок
			= "Добавить страницу ""Банковская гарантия""";
		Иначе
			КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюДобавитьСтраницу.Заголовок = "Добавить страницу";
		КонецЕсли;
		
		#Если ВебКлиент Тогда
			КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюДобавитьСтраницу.Видимость = ВидимостьМеню;
		#КонецЕсли
	Иначе
		КМенюРО.Видимость = Ложь;
		КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюДобавитьСтраницу.Видимость = Ложь;
		КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюУдалитьСтраницу.Видимость = Ложь;
	КонецЕсли;
	
	Если Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Титульный" Тогда
		Элементы.Обновить.Доступность = Истина;
	Иначе
		Элементы.Обновить.Доступность = Ложь;
	КонецЕсли;
	
	Если Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Титульный" Тогда
		Элементы.ТабличныйДокументКонтекстноеМенюГруппаСтроки.Видимость = Ложь;
	Иначе
		Элементы.ТабличныйДокументКонтекстноеМенюГруппаСтроки.Видимость = Истина;
	КонецЕсли;
	
	СпрятатьСсылкуУдалитьСтраницу();
	
	Элементы.ТабличныйДокумент.ТекущаяОбласть
		= ТекущаяОбластьТабличногоДокумента(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
КонецПроцедуры

&НаКлиенте
Функция ТекущаяОбластьТабличногоДокумента(ИмяРаздела)
	
	ИмяАктивнойОбласти = Неопределено;
	
	Если ИмяРаздела = "Раздел2"
		И ЗначениеЗаполнено(СтруктураРеквизитовФормы.ИмяАктивнойОбластиРаздела2)
		И ТабличныйДокумент.Области.Найти(
		СтруктураРеквизитовФормы.ИмяАктивнойОбластиРаздела2) <> Неопределено Тогда
		ИмяАктивнойОбласти = СтруктураРеквизитовФормы.ИмяАктивнойОбластиРаздела2;
		СтруктураРеквизитовФормы.ИмяАктивнойОбластиРаздела2 = "";
	КонецЕсли;
	
	Возврат ?(ИмяАктивнойОбласти <> Неопределено,
		ТабличныйДокумент.Область(ИмяАктивнойОбласти), ТабличныйДокумент.Область(1, 1));
	
КонецФункции

&НаКлиенте
Процедура СпрятатьСсылкуУдалитьСтраницу()
	
	Если Элементы.РазделыОтчета.ТекущиеДанные.ПолучитьРодителя() <> Неопределено Тогда
		Если Элементы.РазделыОтчета.ТекущиеДанные.ПолучитьРодителя().ПолучитьЭлементы().Количество() > 1 Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ОблУдалитьСтраницу = ТабличныйДокумент.Области.Найти("УдалитьСтраницуЗначок");
	Если ОблУдалитьСтраницу <> Неопределено Тогда 
		ОблУдалитьСтраницу.Текст = "";
		ОблУдалитьСтраницу.Гиперссылка = Ложь;
	КонецЕсли;
	ОблУдалитьСтраницу = ТабличныйДокумент.Области.Найти("УдалитьСтраницу");
	Если ОблУдалитьСтраницу <> Неопределено Тогда 
		ОблУдалитьСтраницу.Текст = "";
		ОблУдалитьСтраницу.Гиперссылка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СформироватьСтруктуруДанныхДопСтрокСтраницы(Форма, ИмяСтраницы)
	
	Перем СтруктураДанныхДопСтрокРаздела;
	
	Если ИмяСтраницы = "Раздел2" Тогда
		
		ОбновитьСтруктуруМногострочногоРаздела(Форма, Форма.СтруктураРеквизитовФормы.мИдГруппы21);
		ОбновитьСтруктуруМногострочногоРаздела(Форма, Форма.СтруктураРеквизитовФормы.мИдГруппы22);
		ОбновитьСтруктуруМногострочногоРаздела(Форма, Форма.СтруктураРеквизитовФормы.мИдГруппы241);
		ОбновитьСтруктуруМногострочногоРаздела(Форма, Форма.СтруктураРеквизитовФормы.мИдГруппы242);
		ОбновитьСтруктуруМногострочногоРаздела(Форма, Форма.СтруктураРеквизитовФормы.мИдГруппы25);
		ОбновитьСтруктуруМногострочногоРаздела(Форма, Форма.СтруктураРеквизитовФормы.мИдГруппы26);
		
		СтруктураДанныхДопСтрокРаздела = Новый Структура;
		
		// Обновим структуру, хранящую данные строк многострочных блоков.
		ПромТаблицаДопСтрокРаздела = Неопределено;
		Форма.мСтруктураМногострочныхРазделов.Свойство(Форма.СтруктураРеквизитовФормы.мИдГруппы21, ПромТаблицаДопСтрокРаздела);
		ПромТаблицаДопСтрокРаздела = Форма[ПромТаблицаДопСтрокРаздела];
		ТаблицаДопСтрокГруппы = Форма["Хранилище" + Форма.СтруктураРеквизитовФормы.мИдГруппы21].Добавить().Таблица;
		КопироватьДанныеФормы(ПромТаблицаДопСтрокРаздела, ТаблицаДопСтрокГруппы);
		СтруктураДанныхДопСтрокРаздела.Вставить(Форма.СтруктураРеквизитовФормы.мИдГруппы21, ТаблицаДопСтрокГруппы);
		
		ПромТаблицаДопСтрокРаздела = Неопределено;
		Форма.мСтруктураМногострочныхРазделов.Свойство(Форма.СтруктураРеквизитовФормы.мИдГруппы22, ПромТаблицаДопСтрокРаздела);
		ПромТаблицаДопСтрокРаздела = Форма[ПромТаблицаДопСтрокРаздела];
		ТаблицаДопСтрокГруппы = Форма["Хранилище" + Форма.СтруктураРеквизитовФормы.мИдГруппы22].Добавить().Таблица;
		КопироватьДанныеФормы(ПромТаблицаДопСтрокРаздела, ТаблицаДопСтрокГруппы);
		СтруктураДанныхДопСтрокРаздела.Вставить(Форма.СтруктураРеквизитовФормы.мИдГруппы22, ТаблицаДопСтрокГруппы);
		
		ПромТаблицаДопСтрокРаздела = Неопределено;
		Форма.мСтруктураМногострочныхРазделов.Свойство(Форма.СтруктураРеквизитовФормы.мИдГруппы241, ПромТаблицаДопСтрокРаздела);
		ПромТаблицаДопСтрокРаздела = Форма[ПромТаблицаДопСтрокРаздела];
		ТаблицаДопСтрокГруппы = Форма["Хранилище" + Форма.СтруктураРеквизитовФормы.мИдГруппы241].Добавить().Таблица;
		КопироватьДанныеФормы(ПромТаблицаДопСтрокРаздела, ТаблицаДопСтрокГруппы);
		СтруктураДанныхДопСтрокРаздела.Вставить(Форма.СтруктураРеквизитовФормы.мИдГруппы241, ТаблицаДопСтрокГруппы);
		
		ПромТаблицаДопСтрокРаздела = Неопределено;
		Форма.мСтруктураМногострочныхРазделов.Свойство(Форма.СтруктураРеквизитовФормы.мИдГруппы242, ПромТаблицаДопСтрокРаздела);
		ПромТаблицаДопСтрокРаздела = Форма[ПромТаблицаДопСтрокРаздела];
		ТаблицаДопСтрокГруппы = Форма["Хранилище" + Форма.СтруктураРеквизитовФормы.мИдГруппы242].Добавить().Таблица;
		КопироватьДанныеФормы(ПромТаблицаДопСтрокРаздела, ТаблицаДопСтрокГруппы);
		СтруктураДанныхДопСтрокРаздела.Вставить(Форма.СтруктураРеквизитовФормы.мИдГруппы242, ТаблицаДопСтрокГруппы);
		
		ПромТаблицаДопСтрокРаздела = Неопределено;
		Форма.мСтруктураМногострочныхРазделов.Свойство(Форма.СтруктураРеквизитовФормы.мИдГруппы25, ПромТаблицаДопСтрокРаздела);
		ПромТаблицаДопСтрокРаздела = Форма[ПромТаблицаДопСтрокРаздела];
		ТаблицаДопСтрокГруппы = Форма["Хранилище" + Форма.СтруктураРеквизитовФормы.мИдГруппы25].Добавить().Таблица;
		КопироватьДанныеФормы(ПромТаблицаДопСтрокРаздела, ТаблицаДопСтрокГруппы);
		СтруктураДанныхДопСтрокРаздела.Вставить(Форма.СтруктураРеквизитовФормы.мИдГруппы25, ТаблицаДопСтрокГруппы);
		
		ПромТаблицаДопСтрокРаздела = Неопределено;
		Форма.мСтруктураМногострочныхРазделов.Свойство(Форма.СтруктураРеквизитовФормы.мИдГруппы26, ПромТаблицаДопСтрокРаздела);
		ПромТаблицаДопСтрокРаздела = Форма[ПромТаблицаДопСтрокРаздела];
		ТаблицаДопСтрокГруппы = Форма["Хранилище" + Форма.СтруктураРеквизитовФормы.мИдГруппы26].Добавить().Таблица;
		КопироватьДанныеФормы(ПромТаблицаДопСтрокРаздела, ТаблицаДопСтрокГруппы);
		СтруктураДанныхДопСтрокРаздела.Вставить(Форма.СтруктураРеквизитовФормы.мИдГруппы26, ТаблицаДопСтрокГруппы);
		
	ИначеЕсли ИмяСтраницы = "Раздел1"
		ИЛИ ИмяСтраницы = "Приложение1"
		ИЛИ ИмяСтраницы = "Приложение3"
		ИЛИ ИмяСтраницы = "Приложение4" Тогда
		
		Если ИмяСтраницы = "Раздел1" Тогда
			ИдГруппы = Форма.СтруктураРеквизитовФормы.мИдГруппы1;
		ИначеЕсли ИмяСтраницы = "Приложение1" Тогда
			ИдГруппы = Форма.СтруктураРеквизитовФормы.мИдГруппы101;
		ИначеЕсли ИмяСтраницы = "Приложение3" Тогда
			ИдГруппы = Форма.СтруктураРеквизитовФормы.мИдГруппы103;
		ИначеЕсли ИмяСтраницы = "Приложение4" Тогда
			ИдГруппы = Форма.СтруктураРеквизитовФормы.мИдГруппы104;
		КонецЕсли;
		
		ОбновитьСтруктуруМногострочногоРаздела(Форма, ИдГруппы);
		
		СтруктураДанныхДопСтрокРаздела = Новый Структура;
		
		// Обновим структуру, хранящую данные строк многострочного блока.
		ПромТаблицаДопСтрокРаздела = Неопределено;
		Форма.мСтруктураМногострочныхРазделов.Свойство(ИдГруппы, ПромТаблицаДопСтрокРаздела);
		ПромТаблицаДопСтрокРаздела = Форма[ПромТаблицаДопСтрокРаздела];
		ТаблицаДопСтрокГруппы = Форма["Хранилище" + ИдГруппы].Добавить().Таблица;
		КопироватьДанныеФормы(ПромТаблицаДопСтрокРаздела, ТаблицаДопСтрокГруппы);
		СтруктураДанныхДопСтрокРаздела = ТаблицаДопСтрокГруппы;
		
	КонецЕсли;
	
	Возврат СтруктураДанныхДопСтрокРаздела;
	
КонецФункции

&НаСервере
Процедура СохранитьДанныеРаздела(НаимРаздела, ОчищатьРазделЕслиЕстьМногострочность, ИзменятьАктивнуюСтраницу = Истина)
	
	// Многостраничные разделы (без многострочных частей).
	//
	Если НаимРаздела = "Раздел3" Тогда
		
		СтруктураДанных = Новый Структура;
		
		Для Каждого Область Из ТабличныйДокумент.Области Цикл
			
			Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник И Область.СодержитЗначение Тогда
				СтруктураДанных.Вставить(Область.Имя, Область.Значение);
			КонецЕсли;
			
		КонецЦикла;
		
		НаимТаблицыСтраницы = мСтруктураМногостраничныхРазделов[НаимРаздела];
		
		АктивныеСтраницы = ЭтаФорма[НаимТаблицыСтраницы].НайтиСтроки(Новый Структура("АктивнаяСтраница", Истина));
		
		Если АктивныеСтраницы.Количество() > 0 Тогда
			
			АктивнаяСтраница = АктивныеСтраницы[0];
			АктивнаяСтраница.Данные.Очистить();
			АктивнаяСтраница.Данные.Добавить(СтруктураДанных);
			
			АктивнаяСтраница.АктивнаяСтраница = НЕ ИзменятьАктивнуюСтраницу;
			
		КонецЕсли;
		
	// Многостраничные и многострочные разделы.
	//
	ИначеЕсли НаимРаздела = "Раздел1"
		ИЛИ НаимРаздела = "Раздел2"
		ИЛИ НаимРаздела = "Приложение1"
		ИЛИ НаимРаздела = "Приложение3"
		ИЛИ НаимРаздела = "Приложение4" Тогда
		
		ТаблицаСтраницРаздела = Неопределено;
		
		мСтруктураМногостраничныхРазделов.Свойство(НаимРаздела, ТаблицаСтраницРаздела);
		
		ТаблицаСтраницРаздела = ЭтаФорма[ТаблицаСтраницРаздела];
		
		СтрТаблицыСтраниц = ТаблицаСтраницРаздела.НайтиСтроки(Новый Структура("АктивнаяСтраница", Истина));
		
		Если СтрТаблицыСтраниц.Количество() > 0 Тогда
			
			СтрТаблицаСтраницы = СтрТаблицыСтраниц[0];
			
			СтруктураДанныхТекущейТаблицы = СобратьДанныеТекущегоТаблПоля(ЭтаФорма, "ТабличныйДокумент");
			
			Если ПустаяСтрока(СтрТаблицаСтраницы.Представление) Тогда
				СтрТаблицаСтраницы.Представление = "Новая страница";
			КонецЕсли;
			
			СтруктураДанныхДопСтрокРаздела = СформироватьСтруктуруДанныхДопСтрокСтраницы(ЭтаФорма, НаимРаздела);
			
			Если СтрТаблицаСтраницы.Данные.Количество() > 0 Тогда
				СтрТаблицаСтраницы.Данные[0].Значение = СтруктураДанныхТекущейТаблицы;
			Иначе
				СтрТаблицаСтраницы.Данные.Добавить(СтруктураДанныхТекущейТаблицы);
			КонецЕсли;
			
			Если СтрТаблицаСтраницы.ДанныеДопСтрок.Количество() > 0 Тогда
				СтрТаблицаСтраницы.ДанныеДопСтрок[0].Значение = СтруктураДанныхДопСтрокРаздела;
			Иначе
				СтрТаблицаСтраницы.ДанныеДопСтрок.Добавить(СтруктураДанныхДопСтрокРаздела, "ДанныеФормыКоллекцияТаблицаДопСтрокРаздела");
			КонецЕсли;
			
			СтрТаблицаСтраницы.АктивнаяСтраница = НЕ ИзменятьАктивнуюСтраницу;
			
		КонецЕсли;
		
	// Многоуровневые разделы.
	//
	ИначеЕсли НаимРаздела = "Приложение21"
		ИЛИ НаимРаздела = "Приложение22" Тогда
		
		ДеревоДанныхРаздела = ПолучитьИзВременногоХранилища(
			СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхПриложение21"]);
		
		ТекВетка = ДеревоДанныхРаздела;
		
		Для каждого НомерСтроки Из СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела Цикл
			ТекВетка = ТекВетка.Строки[НомерСтроки - 1];
		КонецЦикла;
		
		ТекВетка.Данные = СобратьДанныеТекущегоТаблПоля(ЭтаФорма, "ТабличныйДокумент");
		
		СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхПриложение21"]
			= ПоместитьВоВременноеХранилище(ДеревоДанныхРаздела, УникальныйИдентификатор);
		
	// Обычные разделы.
	//
	Иначе
		
		ЭтаФорма["СтруктураДанных" + НаимРаздела] = СобратьДанныеТекущегоТаблПоля(ЭтаФорма, "ТабличныйДокумент");
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиМакетСтраницыВТабличныйДокументНаСервере(ИмяТекРаздела, НомерСтраницыРазделаОтчета, НовыеНомераСтрокМногоуровнегоРаздела = Неопределено)
	
	СохранитьДанныеРаздела(СтруктураРеквизитовФормы.НаимТекущегоРаздела, Истина);
	
	ВывестиМакетВТаблДокНаСервере(ИмяТекРаздела, НомерСтраницыРазделаОтчета, НовыеНомераСтрокМногоуровнегоРаздела);
	
	СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяТекРаздела;
	
	УстановитьДоступностьОбластей(ЭтаФорма, ИмяТекРаздела);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьУдалитьСтраницу(НаимТаблицыСтраницы)
	Если ЭтаФорма[НаимТаблицыСтраницы].Количество() = 1 Тогда 
		Обл = ТабличныйДокумент.Области.Найти("УдалитьСтраницуЗначок");
		Если Обл <> Неопределено Тогда 
			Обл.Гиперссылка = Ложь;
			Обл.Текст = "";
			Обл = ТабличныйДокумент.Области["УдалитьСтраницу"];
			Обл.Гиперссылка = Ложь;
			Обл.Текст = "";
		КонецЕсли;
	Иначе
		Обл = ТабличныйДокумент.Области.Найти("УдалитьСтраницуЗначок");
		Если Обл <> Неопределено Тогда 
			Обл.Гиперссылка = Истина;
			Обл.Текст = "х";
			Обл = ТабличныйДокумент.Области["УдалитьСтраницу"];
			Обл.Гиперссылка = Истина;
			Обл.Текст = "Удалить страницу";
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ВывестиМакетВТаблДокНаСервере(ИмяТекРаздела, НомерСтраницыРазделаОтчета, НовыеНомераСтрокМногоуровнегоРаздела = Неопределено)
	
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + ИмяТекРаздела));
	
	// Многостраничные разделы (без многострочных частей).
	//
	Если ИмяТекРаздела = "Раздел3" Тогда
	 
		НаимТаблицыСтраницы = мСтруктураМногостраничныхРазделов[ИмяТекРаздела];
		
		СтруктураДанных = Новый Структура;
		
		СписокДанных = ЭтаФорма[НаимТаблицыСтраницы][НомерСтраницыРазделаОтчета - 1].Данные;
		
		Для Каждого ТаблицаСтраницы Из ЭтаФорма[НаимТаблицыСтраницы] Цикл
			
			ТаблицаСтраницы.АктивнаяСтраница = Ложь;
			
		КонецЦикла;
		
		ЭтаФорма[НаимТаблицыСтраницы][НомерСтраницыРазделаОтчета - 1].АктивнаяСтраница = Истина;
		
		Если СписокДанных.Количество() > 0 Тогда
			СтруктураДанных = СписокДанных[0].Значение;
		КонецЕсли;
			
		Для Каждого ЭлСтруктуры Из СтруктураДанных Цикл
			Попытка
				ТабличныйДокумент.Области[ЭлСтруктуры.Ключ].Значение = ЭлСтруктуры.Значение;
			Исключение
			КонецПопытки;
		КонецЦикла;
		
		УстановитьВидимостьУдалитьСтраницу(НаимТаблицыСтраницы);
		
	// Многостраничные и многострочные разделы (количество многострочных частей более 1).
	//
	ИначеЕсли ИмяТекРаздела = "Раздел2" Тогда
		НаимТаблицыСтраницы = "ТаблицаСтраницыРаздел2";
		
		СтруктураДанных = Новый Структура;
		
		СписокДанных = ЭтаФорма[НаимТаблицыСтраницы][НомерСтраницыРазделаОтчета - 1].Данные;
		
		Для каждого ТаблицаСтраницы Из ЭтаФорма[НаимТаблицыСтраницы] Цикл
			ТаблицаСтраницы.АктивнаяСтраница = Ложь;
		КонецЦикла;
		
		ЭтаФорма[НаимТаблицыСтраницы][НомерСтраницыРазделаОтчета - 1].АктивнаяСтраница = Истина;
		
		Если СписокДанных.Количество() > 0 Тогда
			СтруктураДанных = СписокДанных[0].Значение;
		КонецЕсли;
		
		Для Каждого ЭлСтруктуры Из СтруктураДанных Цикл
			Обл = ТабличныйДокумент.Области.Найти(ЭлСтруктуры.Ключ);
			Если Обл <> Неопределено И Обл.СодержитЗначение Тогда 
				Обл.Значение = ЭлСтруктуры.Значение;
			КонецЕсли;
		КонецЦикла;
		
		ТаблицаСтраницРаздела = Неопределено;
		
		мСтруктураМногостраничныхРазделов.Свойство(ИмяТекРаздела, ТаблицаСтраницРаздела);
		
		ТаблицаСтраницРаздела = ЭтаФорма[ТаблицаСтраницРаздела];
		
		СтрСледующаяСтраница = ТаблицаСтраницРаздела[НомерСтраницыРазделаОтчета - 1];
		
		СтрСледующаяСтраница.АктивнаяСтраница = Истина;
		
		ТаблицаВариантыЗаполнения = РегламентированнаяОтчетностьВызовСервера.ПолучитьТаблицуВариантовЗаполненияНаСервере(ЭтаФорма, ИмяТекРаздела);
		
		НовДанныеДопСтрокРаздела = СтрСледующаяСтраница.ДанныеДопСтрок;
		
		Если (ТипЗнч(НовДанныеДопСтрокРаздела) = Тип("СписокЗначений"))
			И (НовДанныеДопСтрокРаздела.Количество() > 0)
			И (НовДанныеДопСтрокРаздела[0].Представление = "ДанныеФормыКоллекцияТаблицаДопСтрокРаздела") Тогда
			
			НовДанныеДопСтрокРаздела = НовДанныеДопСтрокРаздела[0].Значение;
			
		Иначе
			
			НовДанныеДопСтрокРаздела = Неопределено;
			
		КонецЕсли;
		
		Если НовДанныеДопСтрокРаздела <> Неопределено Тогда
			
			Для Каждого ГруппаСтрок Из НовДанныеДопСтрокРаздела Цикл
				
				ИмяГруппыДопСтрок = ГруппаСтрок.Ключ;
				ДанныеГруппыСтрок = ГруппаСтрок.Значение;
				
				ПромТаблицаГруппыСтрок = ЭтаФорма["Хранилище" + ИмяГруппыДопСтрок].Добавить().Таблица;
				
				КопироватьДанныеФормы(ДанныеГруппыСтрок, ПромТаблицаГруппыСтрок);
				
				// Заменяем таблицу значений с данными текущей страницы.
				КопироватьДанныеФормы(ПромТаблицаГруппыСтрок, ЭтаФорма[ИмяГруппыДопСтрок]);
				
				ВывестиРазделВТабличныйДокументНаСервере(ИмяГруппыДопСтрок, ПромТаблицаГруппыСтрок);
				ОбновитьСтруктуруМногострочногоРаздела(ЭтаФорма, ИмяГруппыДопСтрок);
				Если ЭтаФорма[ИмяГруппыДопСтрок].Количество() = 1 Тогда 
					Обл = ТабличныйДокумент.Области["УдалитьСтроку" + ИмяГруппыДопСтрок + "01_1"];
					Обл.Текст = "";
					Обл.Гиперссылка = Ложь;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
		УстановитьВидимостьУдалитьСтраницу(НаимТаблицыСтраницы);
		
		Для Каждого КЗ Из мСтруктураМногострочныхРазделов Цикл 
			Обл = ТабличныйДокумент.Области.Найти("УдалитьСтроку" + КЗ.Ключ + "01_2");
			Если Обл = Неопределено Тогда
				Обл = ТабличныйДокумент.Области.Найти("УдалитьСтроку" + КЗ.Ключ + "01_1");
				Если Обл <> Неопределено Тогда 
					Обл.Текст = "";
					Обл.Гиперссылка = Ложь;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
	// Многостраничные и многострочные разделы (1 многострочная часть).
	//
	ИначеЕсли ИмяТекРаздела = "Раздел1"
		ИЛИ ИмяТекРаздела = "Приложение1"
		ИЛИ ИмяТекРаздела = "Приложение3"
		ИЛИ ИмяТекРаздела = "Приложение4" Тогда
		
		СтруктураДанных = Новый Структура;
		
		НаимТаблицыСтраницы = мСтруктураМногостраничныхРазделов[ИмяТекРаздела];
		
		СписокДанных = ЭтаФорма[НаимТаблицыСтраницы][НомерСтраницыРазделаОтчета - 1].Данные;
		
		Для каждого ТаблицаСтраницы Из ЭтаФорма[НаимТаблицыСтраницы] Цикл
			ТаблицаСтраницы.АктивнаяСтраница = Ложь;
		КонецЦикла;
		
		ЭтаФорма[НаимТаблицыСтраницы][НомерСтраницыРазделаОтчета - 1].АктивнаяСтраница = Истина;
	
		Если СписокДанных.Количество() > 0 Тогда
			СтруктураДанных = СписокДанных[0].Значение;
		КонецЕсли;
		
		Для Каждого ЭлСтруктуры Из СтруктураДанных Цикл
			
			Если ТабличныйДокумент.Области.Найти(ЭлСтруктуры.Ключ) <> Неопределено Тогда
				ТабличныйДокумент.Области[ЭлСтруктуры.Ключ].Значение = ЭлСтруктуры.Значение;
			КонецЕсли;
			
		КонецЦикла;
		
		ТаблицаСтраницРаздела = ЭтаФорма[НаимТаблицыСтраницы];
		
		СтрСледующаяСтраница = ТаблицаСтраницРаздела[НомерСтраницыРазделаОтчета - 1];
		
		СтрСледующаяСтраница.АктивнаяСтраница = Истина;
		
		ТаблицаВариантыЗаполнения = РегламентированнаяОтчетностьВызовСервера.ПолучитьТаблицуВариантовЗаполненияНаСервере(ЭтаФорма, ИмяТекРаздела);
		
		КолМногострочныхЧастей = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСвойствоРаздела(ЭтаФорма, ИмяТекРаздела, "МногострочностьВРазделе").Количество();
		
		Если КолМногострочныхЧастей > 0 Тогда
			
			НовДанныеДопСтрокРаздела = СтрСледующаяСтраница.ДанныеДопСтрок;
			
			Если (ТипЗнч(НовДанныеДопСтрокРаздела) = Тип("СписокЗначений"))
				И (НовДанныеДопСтрокРаздела.Количество() > 0)
				И (НовДанныеДопСтрокРаздела[0].Представление = "ДанныеФормыКоллекцияТаблицаДопСтрокРаздела") Тогда
				
				НовДанныеДопСтрокРаздела = НовДанныеДопСтрокРаздела[0].Значение;
				
			Иначе
				
				НовДанныеДопСтрокРаздела = Неопределено;
				
			КонецЕсли;
			
			// Способ хранения многострочных частей.
			СохранятьМногострКакТЗ = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСвойствоРаздела(ЭтаФорма, ИмяТекРаздела, "СохранятьМногострКакТЗ");
			
		Иначе
			
			НовТаблицаДопСтрокРаздела = Неопределено; // многострочности нет
			ИмяГруппыДопСтрок = Неопределено; // имя группы строк неопределено
			
		КонецЕсли;
		
		Если НовДанныеДопСтрокРаздела <> Неопределено Тогда
			
			// В случае, если многострочных частей больше 1, то хранится структура, иначе, таблица значений с данными.
			Если (КолМногострочныхЧастей > 0) И (НЕ СохранятьМногострКакТЗ) Тогда
				Для Каждого ГруппаСтрок Из НовДанныеДопСтрокРаздела Цикл
					ИмяГруппыДопСтрок = ГруппаСтрок.Ключ;
					ДанныеГруппыСтрок = ГруппаСтрок.Значение;
					
					ПромТаблицаГруппыСтрок = ЭтаФорма["Хранилище" + ИмяГруппыДопСтрок].Добавить().Таблица;
					
					КопироватьДанныеФормы(ДанныеГруппыСтрок, ПромТаблицаГруппыСтрок);
					
					// Заменяем таблицу значений с данными текущей страницы.
					КопироватьДанныеФормы(ПромТаблицаГруппыСтрок, ЭтаФорма[ИмяГруппыДопСтрок]);
					
					ВывестиРазделВТабличныйДокументНаСервере(ИмяГруппыДопСтрок, ПромТаблицаГруппыСтрок);
					ОбновитьСтруктуруМногострочногоРазделаНаСервере(ИмяГруппыДопСтрок);
					
				КонецЦикла;
				
			ИначеЕсли (КолМногострочныхЧастей > 0) И (СохранятьМногострКакТЗ) Тогда
				
				ИмяГруппыДопСтрок = ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ИмяТекРаздела);
				
				ПромТаблицаДопСтрокРаздела = ЭтаФорма["Хранилище" + ИмяГруппыДопСтрок].Добавить().Таблица;
				
				КопироватьДанныеФормы(НовДанныеДопСтрокРаздела, ПромТаблицаДопСтрокРаздела);
				
				// Заменяем таблицу значений с данными текущей страницы.
				КопироватьДанныеФормы(ПромТаблицаДопСтрокРаздела, ЭтаФорма[ИмяГруппыДопСтрок]);
				
				// Выводим в табличный документ данные группы дополнительных строк и обновляем структуру многострочного раздела.
				ВывестиРазделВТабличныйДокументНаСервере(ИмяГруппыДопСтрок, ПромТаблицаДопСтрокРаздела);
				ОбновитьСтруктуруМногострочногоРазделаНаСервере(ИмяГруппыДопСтрок);
				
			КонецЕсли;
			
		КонецЕсли;
		
		УстановитьВидимостьУдалитьСтраницу(НаимТаблицыСтраницы);
		ИмяГруппыДопСтрок = ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ИмяТекРаздела);
		Если ТабличныйДокумент.Области.Найти("УдалитьСтроку" + ИмяГруппыДопСтрок + "01_2") = Неопределено Тогда
			Обл = ТабличныйДокумент.Области.Найти("УдалитьСтроку" + ИмяГруппыДопСтрок + "01_1");
			Если Обл <> Неопределено Тогда 
				Обл.Гиперссылка = Ложь;
				Обл.Текст = "";
			КонецЕсли;
		КонецЕсли;
		
	// Многоуровневые разделы.
	//
	ИначеЕсли ИмяТекРаздела = "Приложение21"
		ИЛИ ИмяТекРаздела = "Приложение22" Тогда
		
		ДеревоДанныхРаздела = ПолучитьИзВременногоХранилища(
			СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхПриложение21"]);
		
		ТекВетка = ДеревоДанныхРаздела;
		
		Для каждого НомерСтроки Из НовыеНомераСтрокМногоуровнегоРаздела Цикл
			ТекВетка = ТекВетка.Строки[НомерСтроки - 1];
		КонецЦикла;
		
		Для Каждого ЭлСтруктуры Из ТекВетка.Данные Цикл
			Обл = ТабличныйДокумент.Области.Найти(ЭлСтруктуры.Ключ);
			Если Обл <> Неопределено Тогда
				Обл.Значение = ЭлСтруктуры.Значение;
			КонецЕсли;
		КонецЦикла;
		
		СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела = НовыеНомераСтрокМногоуровнегоРаздела;
		
	// Обычные разделы (немногостраничные, немногострочные).
	//
	Иначе
		
		Для Каждого ЭлСтруктуры Из ЭтаФорма["СтруктураДанных" + ИмяТекРаздела] Цикл
			Обл = ТабличныйДокумент.Области.Найти(ЭлСтруктуры.Ключ);
			Если Обл <> Неопределено Тогда
				Обл.Значение = ЭлСтруктуры.Значение;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Если ИмяТекРаздела <> "Титульный"
		И ИмяТекРаздела <> "Приложение21"
		И ИмяТекРаздела <> "Приложение22" Тогда
		УстановитьЦветФонаЯчейкиНаСервере(,, ИмяТекРаздела);
	КонецЕсли;
	
	Если ИмяТекРаздела <> "Титульный" Тогда
		РегламентированнаяОтчетностьКлиентСервер.ОтрисоватьЗначкиУдаленияСтрок(ЭтаФорма);
	КонецЕсли;
	
	УстановитьДоступностьОбластей(ЭтаФорма, ИмяТекРаздела);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДеревоРазделовВФормеОтчета(ИмяРаздела)
	
	Если НЕ ИмяРаздела = Неопределено Тогда
		
		// Пытаемся найти ранее запомненный раздел.
		НайденнаяСтрока = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(РазделыОтчета.ПолучитьЭлементы(), "КолонкаРазделыОтчетаСокрНаим", ИмяРаздела);
		
		// В случае успешного поиска, устанавливаем курсор на найденный раздел.
		Если НЕ НайденнаяСтрока = Неопределено Тогда
			Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяСтрока.ПолучитьИдентификатор();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьОтчет(Команда)
	
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Приложение22" Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ОчиститьОтчетЗавершение", ЭтотОбъект, СтруктураРеквизитовФормы.НаимТекущегоРаздела);
		РегламентированнаяОтчетностьКлиент.МеханизмыОчисткиРегламентированныхОтчетов(
			ЭтаФорма, "ОчиститьВесьОтчет", ОписаниеОповещения);
	Иначе
		РегламентированнаяОтчетностьКлиент.МеханизмыОчисткиРегламентированныхОтчетов(
			ЭтаФорма, "ОчиститьВесьОтчет");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьОтчетЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ОбновитьДеревоРазделовВФормеОтчета(ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТекущуюСтраницу(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОчиститьТекущуюСтраницуЗавершение", ЭтотОбъект);
	РегламентированнаяОтчетностьКлиент.МеханизмыОчисткиРегламентированныхОтчетов(
		ЭтаФорма, "ОчиститьТекущийЭкземплярМногостраничногоРаздела"
		+ Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим,
		ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТекущуюСтраницуЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
		НомерКорректировки = 0;
		ТабличныйДокумент.Области.НомерКорректировки.Значение = "0";
		СтруктураРеквизитовФормы.ВидДокумента = ?(НомерКорректировки = 0, 0, 1);
	Иначе
		РегламентированнаяОтчетностьКлиентСервер.ОтрисоватьЗначкиУдаленияСтрок(ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьОтчет(Команда)
	
	Если Элементы.РазделыОтчета.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СохранитьНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСтраницу(Команда)
	
	Модифицированность = Истина;
	
	Если Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Приложение21" Тогда
		
		ДобавитьСтраницуВПриложение21НаСервере();
		
	ИначеЕсли Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Приложение22" Тогда
		
		Родитель22 = Элементы.РазделыОтчета.ТекущиеДанные.ПолучитьРодителя();
		НомСтраницыРодителя22 = Родитель22.КолонкаНомерСтраницыРазделаОтчета;
		
		ДобавитьСтраницуВПриложение22НаСервере(НомСтраницыРодителя22);
		
	Иначе
		
		ВставитьДополнительнуюСтраницуНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
		УстановитьДоступностьОбластей(ЭтаФорма, СтруктураРеквизитовФормы.НаимТекущегоРаздела);
		
	КонецЕсли;
	
	Обл = ТабличныйДокумент.Области["УдалитьСтраницуЗначок"];
	Обл.Гиперссылка = Истина;
	Обл.Текст = "х";
	Обл = ТабличныйДокумент.Области["УдалитьСтраницу"];
	Обл.Гиперссылка = Истина;
	Обл.Текст = "Удалить страницу";
	
	Для Каждого КЗ Из мСтруктураМногострочныхРазделов Цикл 
		Обл = ТабличныйДокумент.Области.Найти("УдалитьСтроку" + КЗ.Ключ + "01_1");
		Если Обл <> Неопределено Тогда
			Обл.Гиперссылка = Ложь;
			Обл.Текст = "";
		КонецЕсли;
	КонецЦикла;
	РегламентированнаяОтчетностьКлиентСервер.ОтрисоватьЗначкиУдаленияСтрок(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьСтраницуВПриложение21НаСервере()
	
	ДеревоДанныхПриложение21 = ПолучитьИзВременногоХранилища(
		СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхПриложение21"]);
	
	// Ур. 0.
	ВеткаПриложение21 = ДеревоДанныхПриложение21.Строки.Добавить();
	ВеткаПриложение21.Данные = Новый Структура;
	
	// Ур. 1.
	ВеткаПриложение22 = ВеткаПриложение21.Строки.Добавить();
	ВеткаПриложение22.Данные = Новый Структура;
	
	ТекНомерСтраницы = ДеревоДанныхПриложение21.Строки.Количество();// ур. 0
	
	// Сохранение данных предыдущей страницы.
	ПредыдущаяВеткаПриложение21 = ДеревоДанныхПриложение21.Строки[
		СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[0] - 1];// ур. 0
	ПредыдущаяВеткаПриложение21.Данные = СобратьДанныеТекущегоТаблПоля(ЭтаФорма, "ТабличныйДокумент");
	
	// Вывод и сохранение данных новых страниц.
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + "Приложение22"));
	ВеткаПриложение22.Данные = СобратьДанныеТекущегоТаблПоля(ЭтаФорма, "ТабличныйДокумент");
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + "Приложение21"));
	ВеткаПриложение21.Данные = СобратьДанныеТекущегоТаблПоля(ЭтаФорма, "ТабличныйДокумент");
	
	СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхПриложение21"]
		= ПоместитьВоВременноеХранилище(ДеревоДанныхПриложение21, УникальныйИдентификатор);
	
	СформироватьДеревоРазделовОтчетаНаСервере();
	
	Для каждого НайденноеПриложение21 Из РазделыОтчета.ПолучитьЭлементы() Цикл
		Если НайденноеПриложение21.КолонкаРазделыОтчетаСокрНаим = "Приложение21" Тогда
			Для каждого НайденнаяСтраница5 Из НайденноеПриложение21.ПолучитьЭлементы() Цикл
				Если НайденнаяСтраница5.КолонкаНомерСтраницыРазделаОтчета = ТекНомерСтраницы Тогда
					Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяСтраница5.ПолучитьИдентификатор();
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Очистить();
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Добавить(ТекНомерСтраницы);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьСтраницуВПриложение22НаСервере(НомСтраницыРодителя)
	
	ДеревоДанныхПриложение21 = ПолучитьИзВременногоХранилища(
		СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхПриложение21"]);
	
	// Ур. 0.
	ВеткаПриложение21 = ДеревоДанныхПриложение21.Строки[НомСтраницыРодителя - 1];
	
	// Ур. 1.
	ВеткаПриложение22 = ВеткаПриложение21.Строки.Добавить();
	ВеткаПриложение22.Данные = Новый Структура;
	
	ТекНомерСтраницы = ДеревоДанныхПриложение21.Строки[НомСтраницыРодителя - 1].Строки.Количество();// ур. 1
	
	// Сохранение данных предыдущей страницы.
	ПредыдущаяВеткаПриложение22 = ДеревоДанныхПриложение21.Строки[
		СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[0] - 1].Строки[
		СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[1] - 1];// ур. 1
	ПредыдущаяВеткаПриложение22.Данные = СобратьДанныеТекущегоТаблПоля(ЭтаФорма, "ТабличныйДокумент");
	
	// Вывод и сохранение данных новых страниц.
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + "Приложение22"));
	
	// Установка кода вида подакцизного товара родительской страницы Раздела 1 Приложения 2.
	ТабличныйДокумент.Области["П001020011003"].Значение = СокрЛП(ВеткаПриложение21.Данные["П001020001003"]);
	
	ВеткаПриложение22.Данные = СобратьДанныеТекущегоТаблПоля(ЭтаФорма, "ТабличныйДокумент");
	
	СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхПриложение21"]
		= ПоместитьВоВременноеХранилище(ДеревоДанныхПриложение21, УникальныйИдентификатор);
	
	СформироватьДеревоРазделовОтчетаНаСервере();
	
	Для каждого НайденноеПриложение21 Из РазделыОтчета.ПолучитьЭлементы() Цикл
		Если НайденноеПриложение21.КолонкаРазделыОтчетаСокрНаим = "Приложение21" Тогда
			Для каждого НайденнаяСтраница21 Из НайденноеПриложение21.ПолучитьЭлементы() Цикл
				Если НайденнаяСтраница21.КолонкаНомерСтраницыРазделаОтчета = НомСтраницыРодителя Тогда
					ТекСтраницаПриложения21 = НайденнаяСтраница21;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Для каждого НайденнаяСтраница22 Из ТекСтраницаПриложения21.ПолучитьЭлементы() Цикл
		Если НайденнаяСтраница22.КолонкаНомерСтраницыРазделаОтчета = ТекНомерСтраницы Тогда
			Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяСтраница22.ПолучитьИдентификатор();
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Очистить();
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Добавить(НомСтраницыРодителя);
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Добавить(ТекНомерСтраницы);
	
КонецПроцедуры

&НаКлиенте
Функция СобратьДанныеТекущегоТаблПоляНаКлиенте(ИмяТабличногоПоля) Экспорт
	
	Возврат СобратьДанныеТекущегоТаблПоля(ЭтаФорма, ИмяТабличногоПоля);
	
КонецФункции

&НаСервере
Процедура ОбновитьСтруктуруМногострочногоРазделаНаСервере(ИмяГруппы) Экспорт
	
	ОбновитьСтруктуруМногострочногоРаздела(ЭтаФорма, ИмяГруппы);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСтруктуруМногострочногоРазделаНаКлиенте(ИмяГруппы) Экспорт
	
	ОбновитьСтруктуруМногострочногоРаздела(ЭтаФорма, ИмяГруппы);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьСтруктуруМногострочногоРаздела(Форма, ИмяГруппы)
	
	Перем СтруктураГруппы;
	
	Форма.мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);
	
	СтруктураГруппы = Форма[СтруктураГруппы];
	
	ТекТабличноеПолеИмя = "ТабличныйДокумент";
	
	ТекТабличноеПоле = Форма[ТекТабличноеПолеИмя];
	
	Для НСтр = 1 По СтруктураГруппы.Количество() Цикл
		
		ТекСтрокаТаблицы = СтруктураГруппы[НСтр - 1];
		
		НСтрСтр = Формат(НСтр, "ЧГ=");
		
		СписокИменКолонокРаздела = Форма.мСтруктураИменаКолонокРазделов[ИмяГруппы];
		
		Для НомерГрафы = 1 По Форма.мСтруктураКолвоКолонокРазделов[ИмяГруппы] Цикл
			
			ИмяКолонки = СписокИменКолонокРаздела.Получить(НомерГрафы - 1).Значение;
			
			Если СтруктураГруппы[0].Свойство(ИмяКолонки) Тогда
				
				ИмяЯчейки     = ИмяКолонки + "_" + НСтрСтр;
				ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяЯчейки];
				
				Если ОбластьЯчейки.СодержитЗначение = Истина Тогда
					ЗначениеЯчейки = ОбластьЯчейки.Значение;
				Иначе
					ЗначениеЯчейки = ОбластьЯчейки.Текст;
				КонецЕсли;
				
				ТекСтрокаТаблицы[ИмяКолонки] = ЗначениеЯчейки;
				
			КонецЕсли;
			
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнениеЗначенийВКвадратикахНаКлиенте(Знач ИмяСтраницы) Экспорт
	
	Возврат;
	
КонецПроцедуры

&НаКлиенте
Процедура РасчетНаКлиенте(ИмяТекущейСтраницыПанели = "", ОбластьИмя = "") Экспорт
	
	Расчет(ЭтаФорма, ИмяТекущейСтраницыПанели, ОбластьИмя);
	
КонецПроцедуры

&НаСервере
Процедура РасчетНаСервере(ИмяТекущейСтраницыПанели = "", ОбластьИмя = "") Экспорт
	
	Расчет(ЭтаФорма, ИмяТекущейСтраницыПанели, ОбластьИмя);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура Расчет(Форма, ИмяРаздела = "", ОбластьИмя = "") Экспорт
	
	Перем ТаблицаБлока;
	
	Если Форма.СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет ИЛИ Форма.СтруктураРеквизитовФормы.мРежимПечати Тогда
		Возврат;
	КонецЕсли;
	
	Если Форма.СтруктураРеквизитовФормы.ОтключитьВыполнениеРасчета Тогда
		Возврат;
	КонецЕсли;
	
	Если ИмяРаздела = "Раздел2" Тогда
		
		Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяРаздела Тогда
			
			Если ЗначениеЗаполнено(ОбластьИмя)
				И (СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000230000102, Лев(ОбластьИмя, 13)) > 0) Тогда
				// По коду показателя 40001 отражается положительная разница между
				// итоговой суммой акциза по всем строкам графы 3 всех листов подраздела 2.1 и
				// итоговой суммой акциза, подлежащей вычету, по всем строкам графы 3 всех листов подраздела 2.2.
				
				// По коду показателя 40002 отражается отрицательная разница (без знака "минус") между
				// итоговой суммой акциза по всем строкам графы 3 всех листов подраздела 2.1 и
				// итоговой суммой акциза, подлежащей вычету, по всем строкам графы 3 всех листов подраздела 2.2.
				
				ИтогСумма_Разд21_Гр3 = 0;
				Инд = 1;
				Пока Форма.ТабличныйДокумент.Области.Найти("П000210000103_" + Формат(Инд, "ЧГ=")) <> Неопределено Цикл
					ИтогСумма_Разд21_Гр3 = ИтогСумма_Разд21_Гр3
						+ Форма.ТабличныйДокумент.Области["П000210000103_" + Формат(Инд, "ЧГ=")].Значение;
					Инд = Инд + 1;
				КонецЦикла;
				
				ИтогСумма_Разд22_Гр3 = 0;
				Инд = 1;
				Пока Форма.ТабличныйДокумент.Области.Найти("П000220000103_" + Формат(Инд, "ЧГ=")) <> Неопределено Цикл
					ИтогСумма_Разд22_Гр3 = ИтогСумма_Разд22_Гр3
						+ Форма.ТабличныйДокумент.Области["П000220000103_" + Формат(Инд, "ЧГ=")].Значение;
					Инд = Инд + 1;
				КонецЦикла;
				
				Форма.ТабличныйДокумент.Области["П000230000102"].Значение
					= Макс(ИтогСумма_Разд21_Гр3 - ИтогСумма_Разд22_Гр3, 0);
				Форма.ТабличныйДокумент.Области["П000230000202"].Значение
					= Макс(ИтогСумма_Разд22_Гр3 - ИтогСумма_Разд21_Гр3, 0);
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) Тогда
				РасчетВСтруктуре(Форма, ИмяРаздела);
			КонецЕсли;
			
		Иначе
			РасчетВСтруктуре(Форма, ИмяРаздела);
		КонецЕсли;
		
	ИначеЕсли ИмяРаздела = "Раздел3" Тогда
		
		Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяРаздела Тогда
			
			// Стр. 100 = стр. 060 * стр. 070 - стр. 080 - стр. 090.
			Если ЗначениеЗаполнено(ОбластьИмя)
				И (СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000030010003, ОбластьИмя) > 0) Тогда
				Форма.ТабличныйДокумент.Области.П000030010003.Значение
					= Форма.ТабличныйДокумент.Области.П000030006003.Значение
					* Форма.ТабличныйДокумент.Области.П000030007003.Значение
					- Форма.ТабличныйДокумент.Области.П000030008003.Значение
					- Форма.ТабличныйДокумент.Области.П000030009003.Значение;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) Тогда
				РасчетВСтруктуре(Форма, ИмяРаздела);
			КонецЕсли;
			
		Иначе
			РасчетВСтруктуре(Форма, ИмяРаздела);
		КонецЕсли;
		
	ИначеЕсли ИмяРаздела = "Приложение1" Тогда
		
		// Графа 4 = графа 2 * графа 3.
		Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяРаздела Тогда
			Если ЗначениеЗаполнено(ОбластьИмя)
				И (СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П001010000104, Лев(ОбластьИмя, 13)) > 0) Тогда
				Постфикс = Сред(ОбластьИмя, 14);
				Форма.ТабличныйДокумент.Области["П001010000104" + Постфикс].Значение
					= Форма.ТабличныйДокумент.Области["П001010000102" + Постфикс].Значение
					* Форма.ТабличныйДокумент.Области["П001010000103" + Постфикс].Значение;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) Тогда
				РасчетВСтруктуре(Форма, ИмяРаздела);
			КонецЕсли;
		Иначе
			РасчетВСтруктуре(Форма, ИмяРаздела);
		КонецЕсли;
		
	ИначеЕсли ИмяРаздела = "Приложение21" Тогда
		
		Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяРаздела Тогда
			Если ЗначениеЗаполнено(ОбластьИмя)
				И (СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П001020008004, ОбластьИмя) > 0) Тогда
				// Стр. 080(4) = стр. 060(4) + стр. 070(4).
				Форма.ТабличныйДокумент.Области.П001020008004.Значение
					= Форма.ТабличныйДокумент.Области.П001020006004.Значение
					+ Форма.ТабличныйДокумент.Области.П001020007004.Значение;
			КонецЕсли;
			Если ЗначениеЗаполнено(ОбластьИмя)
				И (СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П001020010004, ОбластьИмя) > 0) Тогда
				// Стр. 100(4) = стр. 040(4) - стр. 080(4).
				Форма.ТабличныйДокумент.Области.П001020010004.Значение
					= Форма.ТабличныйДокумент.Области.П001020004004.Значение
					- Форма.ТабличныйДокумент.Области.П001020008004.Значение;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) Тогда
				РасчетВДеревеЗначений(Форма, ИмяРаздела);
			КонецЕсли;
		Иначе
			РасчетВДеревеЗначений(Форма, ИмяРаздела);
		КонецЕсли;
		
	ИначеЕсли ИмяРаздела = "Приложение22" Тогда
		
		Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяРаздела Тогда
			Если ЗначениеЗаполнено(ОбластьИмя)
				И (СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П001020020003, ОбластьИмя) > 0) Тогда
				// Стр. 200(3) = стр. 180(3) + стр. 190(3).
				Форма.ТабличныйДокумент.Области.П001020020003.Значение
					= Форма.ТабличныйДокумент.Области.П001020018003.Значение
					+ Форма.ТабличныйДокумент.Области.П001020019003.Значение;
			КонецЕсли;
			Если ЗначениеЗаполнено(ОбластьИмя)
				И (СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П001020020004, ОбластьИмя) > 0) Тогда
				// Стр. 200(4) = стр. 180(4) + стр. 190(4).
				Форма.ТабличныйДокумент.Области.П001020020004.Значение
					= Форма.ТабличныйДокумент.Области.П001020018004.Значение
					+ Форма.ТабличныйДокумент.Области.П001020019004.Значение;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) Тогда
				РасчетВДеревеЗначений(Форма, ИмяРаздела);
			КонецЕсли;
		Иначе
			РасчетВДеревеЗначений(Форма, ИмяРаздела);
		КонецЕсли;
		
	ИначеЕсли ИмяРаздела = "Приложение3" Тогда
		
		// Стр. 050 = Сумма по гр. 3 (при условии, что значение в графе 6 = 0) + Сумма по графе 6.
		Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяРаздела Тогда
			Если ЗначениеЗаполнено(ОбластьИмя)
				И (СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П001030005003, Лев(ОбластьИмя, 13)) > 0) Тогда
				НомСтр = 1;
				Постфикс = "_1";
				ЗначВСтроке050 = 0;
				Пока Форма.ТабличныйДокумент.Области.Найти("П001030000103" + Постфикс) <> Неопределено Цикл
					ТекЗначПоГр3 = Форма.ТабличныйДокумент.Области["П001030000103" + Постфикс].Значение;
					ТекЗначПоГр6 = Форма.ТабличныйДокумент.Области["П001030000106" + Постфикс].Значение;
					ЗначВСтроке050 = ЗначВСтроке050 + ?(ТекЗначПоГр6 = 0, ТекЗначПоГр3, ТекЗначПоГр6);
					НомСтр = НомСтр + 1;
					Постфикс = "_" + Формат(НомСтр, "ЧГ=");
				КонецЦикла;
				Форма.ТабличныйДокумент.Области["П001030005003"].Значение = ЗначВСтроке050;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) Тогда
				РасчетВСтруктуре(Форма, ИмяРаздела);
			КонецЕсли;
		Иначе
			РасчетВСтруктуре(Форма, ИмяРаздела);
		КонецЕсли;
		
	ИначеЕсли ИмяРаздела = "Приложение4" Тогда
		
		// Стр. 050 = Сумма по гр. 3 (при условии, что значение в графе 6 = 0) + Сумма по графе 6.
		Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяРаздела Тогда
			Если ЗначениеЗаполнено(ОбластьИмя)
				И (СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П001040005003, Лев(ОбластьИмя, 13)) > 0) Тогда
				НомСтр = 1;
				Постфикс = "_1";
				ЗначВСтроке050 = 0;
				Пока Форма.ТабличныйДокумент.Области.Найти("П001040000103" + Постфикс) <> Неопределено Цикл
					ТекЗначПоГр3 = Форма.ТабличныйДокумент.Области["П001040000103" + Постфикс].Значение;
					ТекЗначПоГр6 = Форма.ТабличныйДокумент.Области["П001040000106" + Постфикс].Значение;
					ЗначВСтроке050 = ЗначВСтроке050 + ?(ТекЗначПоГр6 = 0, ТекЗначПоГр3, ТекЗначПоГр6);
					НомСтр = НомСтр + 1;
					Постфикс = "_" + Формат(НомСтр, "ЧГ=");
				КонецЦикла;
				Форма.ТабличныйДокумент.Области["П001040005003"].Значение = ЗначВСтроке050;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) Тогда
				РасчетВСтруктуре(Форма, ИмяРаздела);
			КонецЕсли;
		Иначе
			РасчетВСтруктуре(Форма, ИмяРаздела);
		КонецЕсли;
		
	ИначеЕсли ИмяРаздела = "" Тогда
		
		Расчет(Форма, "Приложение4");
		Расчет(Форма, "Приложение3");
		Расчет(Форма, "Приложение22");
		Расчет(Форма, "Приложение21");
		Расчет(Форма, "Приложение1");
		Расчет(Форма, "Раздел3");
		Расчет(Форма, "Раздел2");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РасчетВСтруктуре(Форма, ИмяЛиста)
	
	ТаблицаРаздела = Форма.мСтруктураМногостраничныхРазделов[ИмяЛиста];
	ТаблицаРаздела = Форма[ТаблицаРаздела];
	
	Для Каждого Страница Из ТаблицаРаздела Цикл
		Данные = Страница.Данные[0].Значение;
		Если (Данные = Неопределено) ИЛИ (Тип(Данные) <> Тип("Структура")) Тогда
			Продолжить;
		КонецЕсли;
		Страница.Данные[0].Пометка = Ложь; // для инициализации обмена с сервером
		
		Если ИмяЛиста = "Раздел2" Тогда
			
			ДанныеДопСтрок = Страница.ДанныеДопСтрок[0].Значение;
			Если (ДанныеДопСтрок = Неопределено) ИЛИ (Тип(ДанныеДопСтрок) <> Тип("Структура")) Тогда
				Продолжить;
			КонецЕсли;
			Страница.ДанныеДопСтрок[0].Пометка = Ложь; // для инициализации обмена с сервером
			
			ДанныеДопСтрокПодразд21 = ДанныеДопСтрок.П0002100001;
			ДанныеДопСтрокПодразд22 = ДанныеДопСтрок.П0002200001;
			
			Если Страница.АктивнаяСтраница И (Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяЛиста) Тогда
				Для НомДопСтроки = 1 По ДанныеДопСтрокПодразд21.Количество() Цикл
					ДопСтрокаПодразд21 = ДанныеДопСтрокПодразд21[НомДопСтроки - 1];
					ДопСтрокаПодразд21.П000210000103
						= Форма.ТабличныйДокумент.Области["П000210000103_" + Формат(НомДопСтроки, "ЧГ=")].Значение;
				КонецЦикла;
				Для НомДопСтроки = 1 По ДанныеДопСтрокПодразд22.Количество() Цикл
					ДопСтрокаПодразд22 = ДанныеДопСтрокПодразд22[НомДопСтроки - 1];
					ДопСтрокаПодразд22.П000220000103
						= Форма.ТабличныйДокумент.Области["П000220000103_" + Формат(НомДопСтроки, "ЧГ=")].Значение;
				КонецЦикла;
			КонецЕсли;
			
			ИтогСумма_Разд21_Гр3 = 0;
			Для каждого ДопСтрокаПодразд21 Из ДанныеДопСтрокПодразд21 Цикл
				ИтогСумма_Разд21_Гр3 = ИтогСумма_Разд21_Гр3 + ДопСтрокаПодразд21.П000210000103;
			КонецЦикла;
			ИтогСумма_Разд22_Гр3 = 0;
			Для каждого ДопСтрокаПодразд22 Из ДанныеДопСтрокПодразд22 Цикл
				ИтогСумма_Разд22_Гр3 = ИтогСумма_Разд22_Гр3 + ДопСтрокаПодразд22.П000220000103;
			КонецЦикла;
			
			// По коду показателя 40001 отражается положительная разница между
			// итоговой суммой акциза по всем строкам графы 3 всех листов подраздела 2.1 и итоговой
			// суммой акциза, подлежащей вычету, по всем строкам графы 3 всех листов подраздела 2.2.
			Данные.П000230000102 = Макс(ИтогСумма_Разд21_Гр3 - ИтогСумма_Разд22_Гр3, 0);
			
			// По коду показателя 40002 отражается отрицательная разница (без знака "минус") между
			// итоговой суммой акциза по всем строкам графы 3 всех листов подраздела 2.1 и итоговой
			// суммой акциза, подлежащей вычету, по всем строкам графы 3 всех листов подраздела 2.2.
			Данные.П000230000202 = Макс(ИтогСумма_Разд22_Гр3 - ИтогСумма_Разд21_Гр3, 0);
			
			Если Страница.АктивнаяСтраница И (Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяЛиста) Тогда
				Форма.ТабличныйДокумент.Области["П000230000102"].Значение = Данные.П000230000102;
				Форма.ТабличныйДокумент.Области["П000230000202"].Значение = Данные.П000230000202;
			КонецЕсли;
			
		ИначеЕсли ИмяЛиста = "Раздел3" Тогда
			
			// Стр. 100 = стр. 060 * стр. 070 - стр. 080 - стр. 090.
			Если Страница.АктивнаяСтраница И Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяЛиста Тогда
				Форма.ТабличныйДокумент.Области.П000030010003.Значение
					= Форма.ТабличныйДокумент.Области.П000030006003.Значение
					* Форма.ТабличныйДокумент.Области.П000030007003.Значение
					- Форма.ТабличныйДокумент.Области.П000030008003.Значение
					- Форма.ТабличныйДокумент.Области.П000030009003.Значение;
				Данные.Вставить("П000030010003", Форма.ТабличныйДокумент.Области.П000030010003.Значение);
			Иначе
				Данные.Вставить("П000030010003",
					Данные.П000030006003 * Данные.П000030007003 - Данные.П000030008003 - Данные.П000030009003);
			КонецЕсли;
			
		ИначеЕсли ИмяЛиста = "Приложение1" Тогда
			
			// Графа 4 = графа 2 * графа 3 (для каждой строки).
			ДанныеДопСтрокПрил1 = Страница.ДанныеДопСтрок[0].Значение;
			Если (ДанныеДопСтрокПрил1 = Неопределено)
				ИЛИ (Тип(ДанныеДопСтрокПрил1) <> Тип("ДанныеФормыКоллекция")) Тогда
				Продолжить;
			КонецЕсли;
			Страница.ДанныеДопСтрок[0].Пометка = Ложь; // для инициализации обмена с сервером
			
			Если Страница.АктивнаяСтраница И (Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяЛиста) Тогда
				Для НомДопСтроки = 1 По ДанныеДопСтрокПрил1.Количество() Цикл
					ДопСтрокаПрил1 = ДанныеДопСтрокПрил1[НомДопСтроки - 1];
					ДопСтрокаПрил1.П001010000102
						= Форма.ТабличныйДокумент.Области["П001010000102_" + Формат(НомДопСтроки, "ЧГ=")].Значение;
					ДопСтрокаПрил1.П001010000103
						= Форма.ТабличныйДокумент.Области["П001010000103_" + Формат(НомДопСтроки, "ЧГ=")].Значение;
				КонецЦикла;
			КонецЕсли;
			
			Для каждого ДопСтрокаПрил1 Из ДанныеДопСтрокПрил1 Цикл
				ДопСтрокаПрил1.П001010000104
					= ДопСтрокаПрил1.П001010000102 * ДопСтрокаПрил1.П001010000103;
			КонецЦикла;
			
			Если Страница.АктивнаяСтраница И (Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяЛиста) Тогда
				Для НомДопСтроки = 1 По ДанныеДопСтрокПрил1.Количество() Цикл
					Форма.ТабличныйДокумент.Области["П001010000104_" + Формат(НомДопСтроки, "ЧГ=")].Значение
						= ДанныеДопСтрокПрил1[НомДопСтроки - 1].П001010000104;
				КонецЦикла;
			КонецЕсли;
			
		ИначеЕсли ИмяЛиста = "Приложение3" Тогда
			
			ДанныеДопСтрокПрил3 = Страница.ДанныеДопСтрок[0].Значение;
			Если (ДанныеДопСтрокПрил3 = Неопределено)
				ИЛИ (Тип(ДанныеДопСтрокПрил3) <> Тип("ДанныеФормыКоллекция")) Тогда
				Продолжить;
			КонецЕсли;
			Страница.ДанныеДопСтрок[0].Пометка = Ложь; // для инициализации обмена с сервером
			
			Если Страница.АктивнаяСтраница И (Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяЛиста) Тогда
				Для НомДопСтроки = 1 По ДанныеДопСтрокПрил3.Количество() Цикл
					ДопСтрокаПрил3 = ДанныеДопСтрокПрил3[НомДопСтроки - 1];
					ДопСтрокаПрил3.П001030000103
						= Форма.ТабличныйДокумент.Области["П001030000103_" + Формат(НомДопСтроки, "ЧГ=")].Значение;
					ДопСтрокаПрил3.П001030000106
						= Форма.ТабличныйДокумент.Области["П001030000106_" + Формат(НомДопСтроки, "ЧГ=")].Значение;
				КонецЦикла;
			КонецЕсли;
			
			ЗначВСтроке050 = 0;
			Для каждого ДопСтрокаПрил3 Из ДанныеДопСтрокПрил3 Цикл
				ТекЗначПоГр3 = ДопСтрокаПрил3.П001030000103;
				ТекЗначПоГр6 = ДопСтрокаПрил3.П001030000106;
				ЗначВСтроке050 = ЗначВСтроке050 + ?(ТекЗначПоГр6 = 0, ТекЗначПоГр3, ТекЗначПоГр6);
			КонецЦикла;
			Данные.Вставить("П001030005003", ЗначВСтроке050);
			
			Если Страница.АктивнаяСтраница И (Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяЛиста) Тогда
				Форма.ТабличныйДокумент.Области["П001030005003"].Значение = Данные.П001030005003;
			КонецЕсли;
			
		ИначеЕсли ИмяЛиста = "Приложение4" Тогда
			
			ДанныеДопСтрокПрил4 = Страница.ДанныеДопСтрок[0].Значение;
			Если (ДанныеДопСтрокПрил4 = Неопределено)
				ИЛИ (Тип(ДанныеДопСтрокПрил4) <> Тип("ДанныеФормыКоллекция")) Тогда
				Продолжить;
			КонецЕсли;
			Страница.ДанныеДопСтрок[0].Пометка = Ложь; // для инициализации обмена с сервером
			
			Если Страница.АктивнаяСтраница И (Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяЛиста) Тогда
				Для НомДопСтроки = 1 По ДанныеДопСтрокПрил4.Количество() Цикл
					ДопСтрокаПрил4 = ДанныеДопСтрокПрил4[НомДопСтроки - 1];
					ДопСтрокаПрил4.П001040000103
						= Форма.ТабличныйДокумент.Области["П001040000103_" + Формат(НомДопСтроки, "ЧГ=")].Значение;
					ДопСтрокаПрил4.П001040000106
						= Форма.ТабличныйДокумент.Области["П001040000106_" + Формат(НомДопСтроки, "ЧГ=")].Значение;
				КонецЦикла;
			КонецЕсли;
			
			ЗначВСтроке050 = 0;
			Для каждого ДопСтрокаПрил4 Из ДанныеДопСтрокПрил4 Цикл
				ТекЗначПоГр3 = ДопСтрокаПрил4.П001040000103;
				ТекЗначПоГр6 = ДопСтрокаПрил4.П001040000106;
				ЗначВСтроке050 = ЗначВСтроке050 + ?(ТекЗначПоГр6 = 0, ТекЗначПоГр3, ТекЗначПоГр6);
			КонецЦикла;
			Данные.Вставить("П001040005003", ЗначВСтроке050);
			
			Если Страница.АктивнаяСтраница И (Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяЛиста) Тогда
				Форма.ТабличныйДокумент.Области["П001040005003"].Значение = Данные.П001040005003;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РасчетВДеревеЗначений(Форма, ИмяРаздела)
	
	Если ИмяРаздела = "Приложение21" Тогда
		
		ДеревоДанныхПриложение21 = ПолучитьИзВременногоХранилища(
			Форма.СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхПриложение21"]);
		
		Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяРаздела Тогда
			АктивнаяВеткаДереваЗначений = ДеревоДанныхПриложение21.Строки[
				Форма.СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[0] - 1];
		КонецЕсли;
		
		Для каждого ВеткаПриложение21 Из ДеревоДанныхПриложение21.Строки Цикл
			
			Если ВеткаПриложение21 = АктивнаяВеткаДереваЗначений Тогда
				ВеткаПриложение21.Данные.Вставить("П001020004004",
					Форма.ТабличныйДокумент.Области["П001020004004"].Значение);
				ВеткаПриложение21.Данные.Вставить("П001020006004",
					Форма.ТабличныйДокумент.Области["П001020006004"].Значение);
				ВеткаПриложение21.Данные.Вставить("П001020007004",
					Форма.ТабличныйДокумент.Области["П001020007004"].Значение);
			КонецЕсли;
			
			ВеткаПриложение21.Данные.Вставить("П001020008004",
				ВеткаПриложение21.Данные.П001020006004 + ВеткаПриложение21.Данные.П001020007004);
			ВеткаПриложение21.Данные.Вставить("П001020010004",
				ВеткаПриложение21.Данные.П001020004004 - ВеткаПриложение21.Данные.П001020008004);
			
			Если ВеткаПриложение21 = АктивнаяВеткаДереваЗначений Тогда
				Форма.ТабличныйДокумент.Области["П001020008004"].Значение
					= ВеткаПриложение21.Данные.П001020008004;
				Форма.ТабличныйДокумент.Области["П001020010004"].Значение
					= ВеткаПриложение21.Данные.П001020010004;
			КонецЕсли;
			
		КонецЦикла;
		
		Форма.СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхПриложение21"]
			= ПоместитьВоВременноеХранилище(ДеревоДанныхПриложение21, Форма.УникальныйИдентификатор);
		
	ИначеЕсли ИмяРаздела = "Приложение22" Тогда
		
		ДеревоДанныхПриложение21 = ПолучитьИзВременногоХранилища(
			Форма.СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхПриложение21"]);
		
		Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяРаздела Тогда
			АктивнаяВеткаДереваЗначений = ДеревоДанныхПриложение21.Строки[
				Форма.СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[0] - 1].Строки[
				Форма.СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[1] - 1];
		КонецЕсли;
		
		Для каждого ВеткаПриложение21 Из ДеревоДанныхПриложение21.Строки Цикл
			Для каждого ВеткаПриложение22 Из ВеткаПриложение21.Строки Цикл
				
				Если ВеткаПриложение22 = АктивнаяВеткаДереваЗначений Тогда
					ВеткаПриложение22.Данные.Вставить("П001020018003",
						Форма.ТабличныйДокумент.Области["П001020018003"].Значение);
					ВеткаПриложение22.Данные.Вставить("П001020019003",
						Форма.ТабличныйДокумент.Области["П001020019003"].Значение);
					ВеткаПриложение22.Данные.Вставить("П001020018004",
						Форма.ТабличныйДокумент.Области["П001020018004"].Значение);
					ВеткаПриложение22.Данные.Вставить("П001020019004",
						Форма.ТабличныйДокумент.Области["П001020019004"].Значение);
				КонецЕсли;
				
				ВеткаПриложение22.Данные.Вставить("П001020020003",
					ВеткаПриложение22.Данные.П001020018003 + ВеткаПриложение22.Данные.П001020019003);
				ВеткаПриложение22.Данные.Вставить("П001020020004",
					ВеткаПриложение22.Данные.П001020018004 + ВеткаПриложение22.Данные.П001020019004);
				
				Если ВеткаПриложение22 = АктивнаяВеткаДереваЗначений Тогда
					Форма.ТабличныйДокумент.Области["П001020020003"].Значение
						= ВеткаПриложение22.Данные.П001020020003;
					Форма.ТабличныйДокумент.Области["П001020020004"].Значение
						= ВеткаПриложение22.Данные.П001020020004;
				КонецЕсли;
				
			КонецЦикла;
		КонецЦикла;
		
		Форма.СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхПриложение21"]
			= ПоместитьВоВременноеХранилище(ДеревоДанныхПриложение21, Форма.УникальныйИдентификатор);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УдалитьДополнительнуюСтраницу(Форма, ИмяТекущейСтраницыПанели = Неопределено)
	Перем ТаблицаСтраницРаздела;
	
	Если Не Форма.мСтруктураМногостраничныхРазделов.Свойство(ИмяТекущейСтраницыПанели, ТаблицаСтраницРаздела) Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаСтраницРаздела = Форма[ТаблицаСтраницРаздела];
	
	Если ТаблицаСтраницРаздела.Количество() = 1 Тогда
		Возврат;
	КонецЕсли;
	
	ИмяТекТабличногоПоля = "ТабличныйДокумент";
	ТекТабличноеПоле     = Форма[ИмяТекТабличногоПоля];
	
	СтрТаблицаСтраницы = ТаблицаСтраницРаздела.НайтиСтроки(Новый Структура("АктивнаяСтраница", Истина));
	
	Если СтрТаблицаСтраницы.Количество() > 0 Тогда
		СтрТаблицаСтраницы = СтрТаблицаСтраницы[0];
		ИндексТекСтрока = ТаблицаСтраницРаздела.Индекс(СтрТаблицаСтраницы);
		ТаблицаСтраницРаздела.Удалить(СтрТаблицаСтраницы);
		
		// Очищаем редактируемые ячейки удаляемой страницы.
		ОчиститьТабличноеПоле(Форма, ИмяТекущейСтраницыПанели);
		
		КолвоДопСтраниц = ТаблицаСтраницРаздела.Количество();
		Если КолвоДопСтраниц > 0 Тогда
			СтрТаблицаСтраницыЗамена = ТаблицаСтраницРаздела[Мин(ИндексТекСтрока, КолвоДопСтраниц - 1)];
			
			// Для страниц многостраничного раздела, содержащих многострочную часть,
			// восстанавливаем структуру дополнительных строк.
			Если ИмяТекущейСтраницыПанели = "Раздел2" Тогда
				
				// Предварительно проверим, содержит ли страница многострочные части
				ДанныеДопСтрокРаздела = СтрТаблицаСтраницыЗамена.ДанныеДопСтрок[0].Значение;
				
				Если ДанныеДопСтрокРаздела <> Неопределено Тогда
					Для Каждого ГруппаСтрок Из ДанныеДопСтрокРаздела Цикл
						ИмяГруппыДопСтрок = ГруппаСтрок.Ключ;
						ДанныеГруппыСтрок = ГруппаСтрок.Значение;
						
						ПромТаблицаГруппыСтрок = Форма["Хранилище" + ИмяГруппыДопСтрок].Добавить().Таблица;
						
						КопироватьДанныеФормы(ДанныеГруппыСтрок, ПромТаблицаГруппыСтрок);
						
						// Заменяем таблицу значений с данными текущей страницы.
						КопироватьДанныеФормы(ПромТаблицаГруппыСтрок, Форма[ИмяГруппыДопСтрок]);
						// Выводим в табличный документ строки многострочной группы.
						ВывестиРазделВТабличныйДокумент(Форма, ИмяГруппыДопСтрок, ПромТаблицаГруппыСтрок);
						
					КонецЦикла;
				КонецЕсли;
				
			КонецЕсли;
			
			// Восстановим данные замещаемой страницы.
			СтруктураДанныхСтраницыЗамена = СтрТаблицаСтраницыЗамена.Данные[0].Значение;
			
			Для Каждого Элемент Из СтруктураДанныхСтраницыЗамена Цикл
				
				ИмяПоказателя      = Элемент.Ключ;
				ЗначениеПоказателя = Элемент.Значение;
				
				Попытка
					Форма[ИмяТекТабличногоПоля].Области[ИмяПоказателя].Значение = ЗначениеПоказателя;
				Исключение
				КонецПопытки;
				
			КонецЦикла;
			
			СтрТаблицаСтраницыЗамена.АктивнаяСтраница = Истина;
		КонецЕсли;
		
		Расчет(Форма, ИмяТекущейСтраницыПанели);
		Форма.Модифицированность = Истина;
	КонецЕсли;
	
	УстановитьЦветФонаЯчейки(Форма, , , ИмяТекущейСтраницыПанели);
	
КонецПроцедуры

&НаСервере
Процедура УдалитьДополнительнуюСтраницуНаСервере(ИмяТекущейСтраницыПанели = Неопределено)
	
	ИзменитьТаблицуПараметровАвтозаполнения(-1, ИмяТекущейСтраницыПанели);
	
	Если ИмяТекущейСтраницыПанели = "Раздел2" Тогда
		УдалитьДополнительнуюСтраницу(ЭтаФорма, ИмяТекущейСтраницыПанели);
	Иначе
		РегламентированнаяОтчетность.УдалитьДополнительнуюСтраницуНаСервере(ЭтаФорма, ИмяТекущейСтраницыПанели);
	КонецЕсли;
	
	СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
	
	УстановитьДоступностьОбластей(ЭтаФорма, ИмяТекущейСтраницыПанели);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтраницу(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("УдалитьСтраницуЗавершение", ЭтотОбъект);
	ТекстВопроса = НСтр("ru='Удалить текущую страницу?'");
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 60, КодВозвратаДиалога.Да);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтраницуЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.РазделыОтчета.ТекущиеДанные;
	
	КопияТекущиеДанные = ТекущиеДанные;
	
	ТекущиеДанные = ТекущиеДанные.ПолучитьРодителя();
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.ПолучитьЭлементы().Количество() = 1 Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяСтраницаРазделаПослеУдаления = Неопределено;
	Если КопияТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета = ТекущиеДанные.ПолучитьЭлементы().Количество() Тогда
		
		ЭлементыДанныхФормыДерево = ТекущиеДанные.ПолучитьЭлементы();
		ИмяКолонки = "КолонкаНомерСтраницыРазделаОтчета";
		ИскомоеЗначение = КопияТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета - 1;
		ТекущаяСтраницаРазделаПослеУдаления = Неопределено;
		Для Ном = 0 По ЭлементыДанныхФормыДерево.Количество() - 1 Цикл
			ЭлементДерева = ЭлементыДанныхФормыДерево.Получить(Ном);
			Если ЭлементДерева[ИмяКолонки] = ИскомоеЗначение Тогда
				ТекущаяСтраницаРазделаПослеУдаления = ЭлементДерева;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Если Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Приложение21" Тогда
		
		НомУдаляемойСтраницы = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета;
		
		УдалитьДополнительнуюСтраницуПриложение21НаСервере(НомУдаляемойСтраницы);
		СпрятатьСсылкуУдалитьСтраницу();
		
	ИначеЕсли Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Приложение22" Тогда
		
		НомУдаляемойСтраницы = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета;
		
		ТекРодитель = Элементы.РазделыОтчета.ТекущиеДанные.ПолучитьРодителя();
		НомСтраницыРодителя = ТекРодитель.КолонкаНомерСтраницыРазделаОтчета;
		
		УдалитьДополнительнуюСтраницуПриложение22НаСервере(НомУдаляемойСтраницы, НомСтраницыРодителя);
		СпрятатьСсылкуУдалитьСтраницу();
		
	Иначе
		
		УдалитьДополнительнуюСтраницуНаСервере(Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
		ТекущиеДанные.ПолучитьЭлементы().Удалить(ТекущиеДанные.ПолучитьЭлементы().Индекс(КопияТекущиеДанные));
		НомерСтраницы = 1;
		Для Каждого СтраницаРаздела Из ТекущиеДанные.ПолучитьЭлементы() Цикл
			СтраницаРаздела.КолонкаРазделыОтчета              = "Стр. " + НомерСтраницы;
			СтраницаРаздела.КолонкаНомерСтраницыРазделаОтчета = НомерСтраницы;
			НомерСтраницы = НомерСтраницы + 1;
		КонецЦикла;
		Если НЕ ТекущаяСтраницаРазделаПослеУдаления = Неопределено Тогда
			Элементы.РазделыОтчета.ТекущаяСтрока = ТекущаяСтраницаРазделаПослеУдаления.ПолучитьИдентификатор();
		КонецЕсли;
		Если ТекущиеДанные.ПолучитьЭлементы().Количество() = 1 Тогда 
			Обл = ТабличныйДокумент.Области.Найти("УдалитьСтраницуЗначок");
			Если Обл <> Неопределено Тогда 
				Обл.Гиперссылка = Ложь;
				Обл.Текст = "";
				Обл = ТабличныйДокумент.Области["УдалитьСтраницу"];
				Обл.Гиперссылка = Ложь;
				Обл.Текст = "";
			КонецЕсли;
		Иначе
			Обл = ТабличныйДокумент.Области.Найти("УдалитьСтраницуЗначок");
			Если Обл <> Неопределено Тогда 
				Обл.Гиперссылка = Истина;
				Обл.Текст = "х";
				Обл = ТабличныйДокумент.Области["УдалитьСтраницу"];
				Обл.Гиперссылка = Истина;
				Обл.Текст = "Удалить страницу";
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиентСервер.ОтрисоватьЗначкиУдаленияСтрок(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура УдалитьДополнительнуюСтраницуПриложение21НаСервере(НомУдаляемойСтраницы)
	
	ДеревоДанныхПриложение21 = ПолучитьИзВременногоХранилища(
		СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхПриложение21"]);
	
	КолСтраницПриложение21 = ДеревоДанныхПриложение21.Строки.Количество();
	
	НомПолучаемойСтраницы = ?(НомУдаляемойСтраницы = КолСтраницПриложение21, НомУдаляемойСтраницы - 1, НомУдаляемойСтраницы);
	
	// Ур. 0.
	ДеревоДанныхПриложение21.Строки.Удалить(НомУдаляемойСтраницы - 1);
	
	СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхПриложение21"]
		= ПоместитьВоВременноеХранилище(ДеревоДанныхПриложение21, УникальныйИдентификатор);
	
	СформироватьДеревоРазделовОтчетаНаСервере();
	
	Для каждого НайденноеПриложение21 Из РазделыОтчета.ПолучитьЭлементы() Цикл
		Если НайденноеПриложение21.КолонкаРазделыОтчетаСокрНаим = "Приложение21" Тогда
			Для каждого НайденнаяСтраница21 Из НайденноеПриложение21.ПолучитьЭлементы() Цикл
				Если НайденнаяСтраница21.КолонкаНомерСтраницыРазделаОтчета = НомПолучаемойСтраницы Тогда
					Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяСтраница21.ПолучитьИдентификатор();
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Очистить();
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Добавить(НомПолучаемойСтраницы);
	
	Модифицированность = Истина;
	
	// Вывод страницы.
	ВывестиМакетВТаблДокНаСервере("Приложение21", , СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела);
	
КонецПроцедуры

&НаСервере
Процедура УдалитьДополнительнуюСтраницуПриложение22НаСервере(НомУдаляемойСтраницы, НомСтраницыРодителя)
	
	ДеревоДанныхПриложение21 = ПолучитьИзВременногоХранилища(
		СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхПриложение21"]);
	
	КолСтраницПриложение22 = ДеревоДанныхПриложение21.Строки[НомСтраницыРодителя - 1].Строки.Количество();
	
	НомПолучаемойСтраницы = ?(НомУдаляемойСтраницы = КолСтраницПриложение22, НомУдаляемойСтраницы - 1, НомУдаляемойСтраницы);
	
	// Ур. 1.
	ДеревоДанныхПриложение21.Строки[НомСтраницыРодителя - 1].Строки.Удалить(НомУдаляемойСтраницы - 1);
	
	СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхПриложение21"]
		= ПоместитьВоВременноеХранилище(ДеревоДанныхПриложение21, УникальныйИдентификатор);
	
	СформироватьДеревоРазделовОтчетаНаСервере();
	
	Для каждого НайденноеПриложение21 Из РазделыОтчета.ПолучитьЭлементы() Цикл
		Если НайденноеПриложение21.КолонкаРазделыОтчетаСокрНаим = "Приложение21" Тогда
			Для каждого НайденнаяСтраница21 Из НайденноеПриложение21.ПолучитьЭлементы() Цикл
				Если НайденнаяСтраница21.КолонкаНомерСтраницыРазделаОтчета = НомСтраницыРодителя Тогда
					ТекСтраницаПриложения21 = НайденнаяСтраница21;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Для каждого НайденнаяСтраница22 Из ТекСтраницаПриложения21.ПолучитьЭлементы() Цикл
		Если НайденнаяСтраница22.КолонкаНомерСтраницыРазделаОтчета = НомПолучаемойСтраницы Тогда
			Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяСтраница22.ПолучитьИдентификатор();
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Очистить();
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Добавить(НомСтраницыРодителя);
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Добавить(НомПолучаемойСтраницы);
	
	Модифицированность = Истина;
	
	// Вывод страницы.
	ВывестиМакетВТаблДокНаСервере("Приложение22", , СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела);
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьПоказателиОтчетаЗаполняемыеИзИБНаСервере(ИмяСтраницы)
	
	РегламентированнаяОтчетностьКлиентСервер.ОчиститьПоказателиОтчетаЗаполняемыеИзИБ(ЭтаФорма, ИмяСтраницы);
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьДеревоРазделовОтчетаНаКлиенте() Экспорт
	
	СформироватьДеревоРазделовОтчетаНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСтроку(Команда)
	
	ДобавитьСтрокуНаСервере(Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьСтрокуНаСервере(КолонкаРазделыОтчетаСокрНаим)
	
	ВставитьДополнительнуюСтроку(ЭтаФорма, КолонкаРазделыОтчетаСокрНаим);
	СохранитьДанныеРаздела(КолонкаРазделыОтчетаСокрНаим, Ложь, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтроку(Команда)
	
	ТекТабличноеПоле = ЭтаФорма["ТабличныйДокумент"];
	
	ТекущаяОбласть = ТекТабличноеПоле.ТекущаяОбласть;
	ИмяГруппы      = РазделТекущейОбласти(ЭтаФорма, ТекущаяОбласть);
	
	Если ИмяГруппы = Неопределено Тогда
		
		Сообщение = Новый СообщениеПользователю;
		
		Сообщение.Текст = НСтр("ru='Не выбрана удаляемая строка многострочного раздела.'");
		
		Сообщение.Сообщить();
		
		Возврат;
		
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("УдалитьСтрокуЗавершение", ЭтотОбъект);
	ТекстВопроса = НСтр("ru='Удалить выбранную строку?'");
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтрокуЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	УдалитьДополнительнуюСтрокуНаСервере(Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
	
КонецПроцедуры

&НаСервере
Процедура УдалитьДополнительнуюСтрокуНаСервере(ТекущаяСтраница)
	
	СтруктураРеквизитовФормы.ОтключитьВыполнениеРасчета = Истина;
	
	УдалитьДополнительнуюСтроку(ЭтаФорма, , , ТекущаяСтраница);
	СохранитьДанныеРаздела(ТекущаяСтраница, Ложь, Ложь);
	
	СтруктураРеквизитовФормы.ОтключитьВыполнениеРасчета = Ложь;
	
	Расчет(ЭтаФорма, ТекущаяСтраница);
	
КонецПроцедуры

&НаКлиенте
Процедура Обновить(Команда)
	
	ЗаполнитьСведенияОбОрганизацииНаСервере();
	
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
		УстановитьДоступностьОбластей(ЭтаФорма, "Титульный");
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДатуВЯчейкахНаКлиенте() Экспорт
	
	ЗаполнитьДатуВЯчейках(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЦветФонаЯчейкиНаСервере(ИмяЯчейки = Неопределено, ВариантЗаполнения = Неопределено, ИмяТекущейСтраницыПанели = "") Экспорт
	
	УстановитьЦветФонаЯчейки(ЭтаФорма, ИмяЯчейки, ВариантЗаполнения, ИмяТекущейСтраницыПанели);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЦветФонаЯчейкиНаКлиенте(ИмяЯчейки = Неопределено, ВариантЗаполнения = Неопределено, ИмяТекущейСтраницыПанели = "") Экспорт
	
	УстановитьЦветФонаЯчейки(ЭтаФорма, ИмяЯчейки, ВариантЗаполнения, ИмяТекущейСтраницыПанели);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЦветФонаЯчейки(Форма, ИмяЯчейки = Неопределено, ВариантЗаполнения = Неопределено, ИмяТекущейСтраницыПанели = "")
	
	Перем ЦветФона;
	Перем Комментарий;
	
	Если Форма.СтруктураРеквизитовФормы.мБезОткрытияФормы Или Форма.СтруктураРеквизитовФормы.мРежимПечати Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ИмяЯчейки = Неопределено Тогда
		
		ИмяПоляТаблДокумента = "ТабличныйДокумент";
		
		Ключ = "_" + ВариантЗаполнения;
		Форма.мСтруктураЦветовРаскраски.Свойство(Ключ, ЦветФона);
		
		Если ВариантЗаполнения = 4 Тогда
			Форма[ИмяПоляТаблДокумента].Области[ИмяЯчейки].Защита = Истина;
		Иначе
			Форма[ИмяПоляТаблДокумента].Области[ИмяЯчейки].Защита = Ложь;
		КонецЕсли;
		
		Форма[ИмяПоляТаблДокумента].Области[ИмяЯчейки].ЦветФона = ЦветФона;
		
	Иначе
		
		ТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения(Форма, ИмяТекущейСтраницыПанели);
		Если ТаблицаВариантыЗаполнения = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Для Каждого Строка Из ТаблицаВариантыЗаполнения Цикл
			ИмяПоказателя     = Строка.КодПоказателя;
			ВариантЗаполнения = Строка.ВариантЗаполнения;
			Комментарий       = Строка.Комментарий;
			КодПоказателяПоСтруктуре = Строка.КодПоказателяПоСтруктуре;
			
			КолвоСтрокВМногострочнойЧасти = ПоказательВходитВМногострочнуюЧасть(Форма, ИмяПоказателя);
			
			Если КолвоСтрокВМногострочнойЧасти > 0 Тогда
				Многострочность = Истина;
				БазоваяЧасть = ИмяПоказателя;
			Иначе
				Многострочность = Ложь;
				КолвоСтрокВМногострочнойЧасти = 1;
			КонецЕсли;
			
			Для Инд = 1 по КолвоСтрокВМногострочнойЧасти Цикл
				
				Если Многострочность Тогда
					ИмяПоказателя = БазоваяЧасть + "_" + Формат(Инд, "ЧГ=");
				КонецЕсли;
				
				ТекОбластьЯчеек = Форма.ТабличныйДокумент.Области[ИмяПоказателя];
				Если (Не ПустаяСтрока(Комментарий)) ИЛИ (Не ПустаяСтрока(ТекОбластьЯчеек.Примечание.Текст)) Тогда
					ТекОбластьЯчеек.Примечание.Текст = Комментарий;
				КонецЕсли;
				
				Ключ = "_" + ВариантЗаполнения;
				Форма.мСтруктураЦветовРаскраски.Свойство(Ключ, ЦветФона);
				
				Если ВариантЗаполнения = 4 Тогда
					Форма.ТабличныйДокумент.Области[ИмяПоказателя].Защита = Истина;
				Иначе
					Форма.ТабличныйДокумент.Области[ИмяПоказателя].Защита = Ложь;
				КонецЕсли;
				
				Форма.ТабличныйДокумент.Области[ИмяПоказателя].ЦветФона = ЦветФона;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуНастроек(Команда)
	
	ОткрытьФормуВыбораСтраниц("ВыбратьДляНастройки");
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	РегламентированнаяОтчетностьКлиент.ПередЗакрытиемРегламентированногоОтчета(ЭтаФорма, Отказ, СтандартнаяОбработка, ЗавершениеРаботы, ТекстПредупреждения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСДвухмернымШтрихкодомPDF417(Команда)
	
	РегламентированнаяОтчетностьКлиент.ВывестиМашиночитаемуюФорму(ЭтаФорма, Команда.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьБланк(Команда)
	
	Отказ = Ложь;
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("Команда", Команда);
	ОписаниеОповещения = Новый ОписаниеОповещения("ПоказатьБланкЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередПечатьюРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьБланкЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Команда = ДополнительныеПараметры.Команда;
	
	Печать(Команда.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайла(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузитьИзФайлаЗавершение", ЭтотОбъект);
	
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередЗагрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура Выгрузить(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьЗавершение", ЭтотОбъект);
	
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайлаЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ЗагрузитьИзФайлаОтчет();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайлаОтчет() Экспорт
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузитьИзФайлаОтчетЗавершение", ЭтотОбъект);
	
	Если Модифицированность Тогда
		СохранитьНаКлиенте(,ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайлаОтчетЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	РегламентированнаяОтчетностьЗагрузкаКлиент.ЗагрузитьИзФайлаОтчет(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Функция ЗагрузкаОтчетаИзФайла(ДанныеДляЗагрузки) Экспорт
	
	Если Модифицированность Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = СтрШаблон(НСтр("ru='Отчет ""%1"" не сохранен.'"), ЭтотОбъект.Заголовок);
		Сообщение.Сообщить();
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ ЗагрузкаОтчетаИзФайлаНаСервере(ДанныеДляЗагрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
		
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция ЗагрузкаОтчетаИзФайлаНаСервере(ДанныеДляЗагрузки)
	
	СформироватьСтруктуруПоказателей();
	
	ПараметрыОтчета = СформироватьСтруктуруПараметров();
	
	ДеревоДляЗагрузки = ИзвлечьСтруктуруXML();
	
	Если НЕ РегламентированнаяОтчетностьЗагрузка.ЗагрузкаОтчетаИзФайла(
		ЭтотОбъект, ПараметрыОтчета, ДанныеДляЗагрузки, ДеревоДляЗагрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура ВыгрузитьЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ВыгрузитьОтчет();
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузку(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьВыгрузкуЗавершение", ЭтотОбъект);
	
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузкуЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПроверитьВыгрузкуОтчета();
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузкуОтчета()
	
	Если НЕ ЗначениеЗаполнено(СтруктураРеквизитовФормы.Организация) Тогда
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Организация не выбрана. Выгрузка невозможна.'");
		Сообщение.Сообщить();
		
		Возврат;
		
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьВыгрузкуОтчетаЗавершение", ЭтотОбъект);
	
	Если Модифицированность Тогда
		СохранитьНаКлиенте(,ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузкуОтчетаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ФормаВыгрузкиРеглОтчета = ПолучитьФорму("Документ.ВыгрузкаРегламентированныхОтчетов.Форма.ФормаДокумента", , ЭтаФорма);
	
	СпДокОсн = Новый СписокЗначений;
	СпДокОсн.Добавить(СтруктураРеквизитовФормы.мСохраненныйДок);
	
	ФормаВыгрузкиРеглОтчета.Проверить(СпДокОсн);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ЗавершениеРаботы Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ПриЗакрытииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПриЗакрытииНаСервере()
	
	РегламентированнаяОтчетность.ПриЗакрытииРегламентированногоОтчета(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если СтрНайти(Заголовок, СтруктураРеквизитовФормы.СтрПериодОтчета) = 0 Тогда
		Заголовок = Заголовок + " за " + СтруктураРеквизитовФормы.СтрПериодОтчета;
	КонецЕсли;
	
	ОргСтр = " (" + СтруктураРеквизитовФормы.НаимОрганизации + ")";
	Если СтрНайти(Заголовок, ОргСтр) = 0 Тогда
		Заголовок = Заголовок + ОргСтр;
	КонецЕсли;
	
	Заголовок = Заголовок + ?(СтрНайти(ЭтаФорма.ИмяФормы, "Внешний") > 0, " - внешний отчет", "");
	
	ПодключитьОбработчикОжидания("ВыполнитьПроверкуПередОткрытием", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПроверкуПередОткрытием()
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПриОткрытииЗавершение", ЭтотОбъект);
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередОткрытиемФормыРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытииЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Модифицированность = Ложь;
		Закрыть();
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОтобразитьНомерКорректировки(Форма)
	
	НомерКорр = Форма.СтруктураРеквизитовФормы.ВидДокумента * Форма.НомерКорректировки;
	НомерКорректировкиСтрока = Формат(НомерКорр, "ЧН=0; ЧГ=");
	СтрДлинаНомерКорректировкиСтрока = СтрДлина(НомерКорректировкиСтрока);
	
	Форма.ТабличныйДокумент.Области["НомерКорректировки"].Значение = НомерКорректировкиСтрока;
	
Конецпроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ВставитьДополнительнуюСтроку(Форма, ТекущаяСтраница)
	
	Перем СтруктураГруппы;
	Перем МаксимальноеКоличествоСтрокГруппы;
	
	#Если НаКлиенте Тогда
		ИмяГруппы = Форма.ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаКлиенте(ТекущаяСтраница);
	#Иначе
		ИмяГруппы = Форма.ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ТекущаяСтраница);
	#КонецЕсли
	
	Если ИмяГруппы = Неопределено Тогда
		
		Сообщение = Новый СообщениеПользователю;
		
		Сообщение.Текст = НСтр("ru='Не выбран многострочный раздел, в который необходимо добавить строку.'");
		
		Сообщение.Сообщить();
		
		Возврат;
		
	КонецЕсли;
	
	// Исходное количество строк группы.
	Форма.мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, МаксимальноеКоличествоСтрокГруппы);
	
	ТекТабличноеПолеИмя = "ТабличныйДокумент";
	
	ТекТабличноеПоле = Форма[ТекТабличноеПолеИмя];
	
	Форма.мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);
	
	СтруктураГруппы = Форма[СтруктураГруппы];
	
	СписокИменКолонокРаздела = Форма.мСтруктураИменаКолонокРазделов[ИмяГруппы];
	
	// Определяем последнюю строку многострочной группы.
	КолСтрок = СтруктураГруппы.Количество();
	КолСтрокСтр = Формат(КолСтрок, "ЧГ=");
	КолСтрокСтр1 = Формат(КолСтрок + 1, "ЧГ=");
	
	ИмяПервойЯчейки = Форма.мСтруктураИменаКолонокРазделов[ИмяГруппы][0].Значение;
	
	ИмяПервойЯчейкиПоследнейСтроки = ИмяПервойЯчейки + "_" + КолСтрокСтр;
	ИмяТекущейОбласти = ИмяПервойЯчейки + "_" + КолСтрокСтр1;
	
	// Область первой ячейки последней строки многострочного раздела.
	ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяПервойЯчейкиПоследнейСтроки];
	
	НастройкиМнгЧ = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСвойствоРаздела(
		Форма, Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела, "МногострочностьВРазделе").НайтиСтроки(
		Новый Структура("ИдГруппы", ИмяГруппы))[0];
	ВысотаСтроки = НастройкиМнгЧ.ВысотаСтроки;
	
	// Номера строк исходной области.
	НомерВерхЯчейкиОбласти = ОбластьЯчейки.Верх;
	НомерНижнЯчейкиОбласти = ОбластьЯчейки.Верх + ВысотаСтроки - 1;
	СдвигСтрок = НомерНижнЯчейкиОбласти - НомерВерхЯчейкиОбласти + 1;
	
	// Номера строк вставляемой области.
	НомерВерхЯчейкиНовойОбласти = НомерВерхЯчейкиОбласти + СдвигСтрок;
	НомерНижнЯчейкиНовойОбласти = НомерНижнЯчейкиОбласти + СдвигСтрок;
	
	РегламентированнаяОтчетностьВызовСервера.СпециальногоДобавленияСтроки(
		ТекТабличноеПоле, ТекТабличноеПолеИмя, ИмяГруппы,
		НомерВерхЯчейкиОбласти, НомерНижнЯчейкиОбласти);
	
	Форма[ТекТабличноеПолеИмя] = ТекТабличноеПоле;
	
	СписокИменКолонокРаздела = Форма.мСтруктураИменаКолонокРазделов[ИмяГруппы];
	
	Для НомерГрафы = 1 По Форма.мСтруктураКолвоКолонокРазделов[ИмяГруппы] Цикл
		
		ИмяКолонки = СписокИменКолонокРаздела.Получить(НомерГрафы - 1).Значение;
		
		// Переопределяем имена вставленной области.
		Если СтруктураГруппы[0].Свойство(ИмяКолонки) Тогда
			
			ИмяОбластиЯчейки    = ИмяКолонки + "_" + КолСтрокСтр;
			ИмяНовОбластиЯчейки = ИмяКолонки + "_" + КолСтрокСтр1;
			
			ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяОбластиЯчейки];
			ОбластьЯчейки.Имя = ИмяНовОбластиЯчейки;
			
			// Определяем границы ячейки исходной области.
			НомерВерхСтрокиЯчейки  = ОбластьЯчейки.Верх - СдвигСтрок;
			НомерНижнСтрокиЯчейки  = ОбластьЯчейки.Низ  - СдвигСтрок;
			
			НомерЛевоКолонкиЯчейки = ОбластьЯчейки.Лево;
			НомерПравКолонкиЯчейки = ОбластьЯчейки.Право;
			
			// Назначаем имя ячейки исходной области,
			// (т.к. в результате вставки новой области оно было очищено).
			ОбластьЯчейкиИсходнойОбласти = ТекТабличноеПоле.Область(
				НомерВерхСтрокиЯчейки, НомерЛевоКолонкиЯчейки,
				НомерНижнСтрокиЯчейки, НомерПравКолонкиЯчейки);
			ОбластьЯчейкиИсходнойОбласти.Имя = ИмяОбластиЯчейки;
			
			// Назначаем имена областей для удаления строк.
			Если НомерГрафы = 1 Тогда
				НовОбластьЯчейкиУдалитьСтроку = ТекТабличноеПоле.Область(
					ОбластьЯчейки.Верх, 2, ОбластьЯчейки.Верх, 2);
				НовОбластьЯчейкиУдалитьСтроку.Имя = "УдалитьСтроку" + ИмяНовОбластиЯчейки;
				ИсхОбластьЯчейкиУдалитьСтроку = ТекТабличноеПоле.Область(
					ОбластьЯчейкиИсходнойОбласти.Верх, 2, ОбластьЯчейкиИсходнойОбласти.Верх, 2);
				ИсхОбластьЯчейкиУдалитьСтроку.Имя = "УдалитьСтроку" + ИмяОбластиЯчейки;
			КонецЕсли;
			
			// Очищаем значения ячеек вставленной области.
			Если ОбластьЯчейки.СодержитЗначение = Истина Тогда
				ОбластьЯчейки.Очистить();
			Иначе
				// Порядековый номер последней строки перед вставкой.
				ИсходныйНомер        = Число("0" + ОбластьЯчейки.Текст);
				НовыйПорядковыйНомер = ИсходныйНомер + 1;
				
				ОбластьЯчейки.Текст  = ? (НЕ НовыйПорядковыйНомер > МаксимальноеКоличествоСтрокГруппы, Строка(НовыйПорядковыйНомер), "");
				
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	// Назначим текущей областью таблицы первую редактируемую ячейку добавленной строки.
	Форма.Элементы[ТекТабличноеПолеИмя].ТекущаяОбласть = ТекТабличноеПоле.Области[ИмяТекущейОбласти];
	
	// Установим фокус на поле табличного документа.
	Форма.ТекущийЭлемент = Форма.Элементы[ТекТабличноеПолеИмя];
	
	// Добавляем в структуру многострочной группы новую строку.
	СтруктураГруппы.Добавить();
	
	Инд = 0;
	Пока Истина Цикл 
		Инд = Инд + 1;
		Обл = ТекТабличноеПоле.Области.Найти("УдалитьСтроку" + ИмяГруппы + "01_" + Формат(Инд, "ЧГ="));
		Если Обл = Неопределено Тогда
			Прервать;
		КонецЕсли;
		Обл.Гиперссылка = Истина;
		Обл.Текст = "х";
	КонецЦикла;
	
	Форма.Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ОпределитьИдМногострочногоРазделаПоТабличномуПолю(Форма, ИмяТекущейСтраницы) Экспорт
	
	Перем ИдГруппы;
	
	Если ИмяТекущейСтраницы = "Раздел1" Тогда
		ИмяГруппы = Форма.СтруктураРеквизитовФормы.мИдГруппы1;
	ИначеЕсли ИмяТекущейСтраницы = "Раздел2" Тогда
		ИмяГруппы = РазделТекущейОбласти(Форма, Форма.Элементы.ТабличныйДокумент.ТекущаяОбласть);
	ИначеЕсли ИмяТекущейСтраницы = "Приложение1" Тогда
		ИмяГруппы = Форма.СтруктураРеквизитовФормы.мИдГруппы101;
	ИначеЕсли ИмяТекущейСтраницы = "Приложение3" Тогда
		ИмяГруппы = Форма.СтруктураРеквизитовФормы.мИдГруппы103;
	ИначеЕсли ИмяТекущейСтраницы = "Приложение4" Тогда
		ИмяГруппы = Форма.СтруктураРеквизитовФормы.мИдГруппы104;
	КонецЕсли;
	
	Возврат ИмяГруппы;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПоказательВходитВМногострочнуюЧасть(Форма, ИмяПоказателя)
	
	ИмяГруппы = Лев(ИмяПоказателя, 11);
	
	СтруктураГруппы = Неопределено;
	
	Если НЕ Форма.мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы) Тогда
		Возврат 0;
	Иначе
		СтруктураГруппы = Форма[СтруктураГруппы];
		Возврат СтруктураГруппы.Количество();
	КонецЕсли;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьТаблицуВариантовЗаполнения(Форма, ИмяСтраницыПанели, ПолучитьЭталонную = Ложь)

	#Если НаКлиенте Тогда
		Возврат РегламентированнаяОтчетностьКлиент.ПолучитьТаблицуВариантовЗаполненияНаКлиенте(Форма, ИмяСтраницыПанели, ПолучитьЭталонную);
	#Иначе
		Возврат РегламентированнаяОтчетностьВызовСервера.ПолучитьТаблицуВариантовЗаполненияНаСервере(Форма, ИмяСтраницыПанели, ПолучитьЭталонную);
	#КонецЕсли
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УдалитьДополнительнуюСтроку(Форма, СпециальноеДобавление = Ложь, ИмяКолонкиНомера = Неопределено, ТекущаяСтраница) Экспорт
	Перем ИсходноеКоличествоСтрокГруппы;
	Перем СтруктураГруппы;
	
	// Сначала выполним проверку на активную страницу панели формы,
	// которая содержит многострочный раздел.
	#Если НаКлиенте Тогда
		ИмяГруппы = Форма.ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаКлиенте(ТекущаяСтраница);
	#Иначе
		ИмяГруппы = Форма.ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ТекущаяСтраница);
	#КонецЕсли
	
	// Исходное количество строк группы.
	Форма.мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);
	
	Форма.мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);
	
	ТекТабличноеПолеИмя = "ТабличныйДокумент";
	
	ТекТабличноеПоле = Форма[ТекТабличноеПолеИмя];
	ТекущаяОбласть = Форма.Элементы[ТекТабличноеПолеИмя].ТекущаяОбласть;
	ИмяЯчейки      = ТекущаяОбласть.Имя;
	
	ИмяГруппы = РазделТекущейОбласти(Форма, ТекущаяОбласть);
	
	// Предварительно обновим структуру многострочных разделов.
	РегламентированнаяОтчетностьКлиентСервер.ОбновитьСтруктуруМногострочногоРаздела(Форма, ИмяГруппы);
	
	// Номер строки многострочного раздела определим по имени выделенной ячейки.
	НомУдаляемойСтроки = Число(Сред(ИмяЯчейки, СтрНайти(ИмяЯчейки, "_") + 1));
	НомерСтрокиТаблицы = НомУдаляемойСтроки - 1; // нумерация строк в таблице значений начинается с нуля
	СтруктураГруппы = Форма[СтруктураГруппы];
	
	ИмяПервойЯчейки = Форма.мСтруктураИменаКолонокРазделов[ИмяГруппы][0].Значение;
	
	Если СтруктураГруппы.Количество() > ИсходноеКоличествоСтрокГруппы Тогда
		// Удаляется добавленная строка.
		ИмяПервойЯчейкиУдаляемойСтроки = ИмяПервойЯчейки + "_" + Формат(НомУдаляемойСтроки, "ЧГ=");
		// Область первой ячейки удаляемой строки многострочного раздела.
		ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяПервойЯчейкиУдаляемойСтроки];
		
		НастройкиМнгЧ = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСвойствоРаздела(
			Форма, ТекущаяСтраница, "МногострочностьВРазделе").НайтиСтроки(Новый Структура("ИдГруппы", ИмяГруппы))[0];
		ВысотаСтроки = НастройкиМнгЧ.ВысотаСтроки;
		
		// Номера строк удаляемой области.
		НомерВерхЯчейкиОбласти = ОбластьЯчейки.Верх;
		НомерНижнЯчейкиОбласти = ОбластьЯчейки.Верх + ВысотаСтроки - 1;
		
		РегламентированнаяОтчетностьВызовСервера.СпециальногоУдаленияСтроки(
			ТекТабличноеПоле, ТекТабличноеПолеИмя, ИмяГруппы, НомерВерхЯчейкиОбласти, НомерНижнЯчейкиОбласти);
		
		Форма[ТекТабличноеПолеИмя] = ТекТабличноеПоле;
		
		КолвоСдвигаемыхСтрок = СтруктураГруппы.Количество() - НомУдаляемойСтроки;
		
		// Обновим имена ячеек сдвинутых строк.
		Если КолвоСдвигаемыхСтрок > 0 Тогда
			
			Для НСтр = НомУдаляемойСтроки + 1 По СтруктураГруппы.Количество() Цикл
				
				ТекСтрока = СтруктураГруппы[НСтр-1];
				
				СписокИменКолонокРаздела = Форма.мСтруктураИменаКолонокРазделов[ИмяГруппы];
				
				Для НомерГрафы = 1 По Форма.мСтруктураКолвоКолонокРазделов[ИмяГруппы] Цикл
					
					КолонкаИмя = СписокИменКолонокРаздела.Получить(НомерГрафы - 1).Значение;
					
					Если СтруктураГруппы[0].Свойство(КолонкаИмя) Тогда
						
						ИмяСдвинутойЯчейки = КолонкаИмя + "_" + Формат(НСтр, "ЧГ=");
						НовоеИмяСдвинутойЯчейки = КолонкаИмя + "_" + Формат(НСтр - 1, "ЧГ=");
						
						ОбластьСдвинутойЯчейки     = ТекТабличноеПоле.Области[ИмяСдвинутойЯчейки];
						ОбластьСдвинутойЯчейки.Имя = НовоеИмяСдвинутойЯчейки;
						
						Если НомерГрафы = 1 Тогда
							ОбластьЯчейкиУдалитьСтроку = ТекТабличноеПоле.Область(
								ОбластьСдвинутойЯчейки.Верх, 2, ОбластьСдвинутойЯчейки.Верх, 2);
							ОбластьЯчейкиУдалитьСтроку.Имя = "УдалитьСтроку" + НовоеИмяСдвинутойЯчейки;
						КонецЕсли;
						
						Если ОбластьСдвинутойЯчейки.СодержитЗначение <> Истина Тогда
							// Обновляем порядковый номер строки.
							
							СтарыйНомер = Число(ТекСтрока[КолонкаИмя]);
							НовыйПорядковыйНомер = Строка(Макс(СтарыйНомер - 1, 0));
							ОбластьСдвинутойЯчейки.Текст = НовыйПорядковыйНомер + ".";
							
							// Обновляем значение элемента таблицы значений.
							ТекСтрока[КолонкаИмя] = НовыйПорядковыйНомер;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
				
			КонецЦикла;
		КонецЕсли;
		
		// Обновляем структуру многострочного раздела.
		СтруктураГруппы.Удалить(НомерСтрокиТаблицы);
		
	Иначе
		// Строка не удаляется в форме табличного документа, должен осуществляться сдвиг строк.
		// Обновляем структуру многострочного раздела: удаляем выбранную строку и добавляем пустую строку.
		СтруктураГруппы.Удалить(НомерСтрокиТаблицы);
		
		ДобавляемаяСтрока = СтруктураГруппы.Добавить();
		
		СписокИменКолонокРаздела = Форма.мСтруктураИменаКолонокРазделов[ИмяГруппы];
		
		// Обновляем порядковые номера строк, выводимых в табличный документ.
		Для Каждого СтрокаТаблицы Из СтруктураГруппы Цикл
			
			НомерСтрокиВТаблице = СтруктураГруппы.Индекс(СтрокаТаблицы);
			НомерСтрокиВФормеТаблицы = Формат(НомерСтрокиВТаблице + 1, "ЧГ=");
			
			Для НомерГрафы = 1 По Форма.мСтруктураКолвоКолонокРазделов[ИмяГруппы] Цикл
				
				КолонкаТаблицыИмя = СписокИменКолонокРаздела.Получить(НомерГрафы - 1).Значение;
				
				Если СтруктураГруппы[0].Свойство(КолонкаТаблицыИмя) Тогда
					
					ИмяЯчейки            = КолонкаТаблицыИмя + "_" + НомерСтрокиВФормеТаблицы;
					ОбластьЯчейкиТаблицы = ТекТабличноеПоле.Области[ИмяЯчейки];
					
					Если ОбластьЯчейкиТаблицы.СодержитЗначение <> Истина Тогда
						
						ПервыйНомерВГруппе = 1;
						
						// Обновляем порядковый номер строки.
						НовыйПорядковыйНомер = Строка(ПервыйНомерВГруппе + НомерСтрокиВТаблице);
						
						СтрокаТаблицы[КолонкаТаблицыИмя] = НовыйПорядковыйНомер;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		// Обновляем экранную форму табличного документа.
		#Если НаКлиенте Тогда
			Форма.ВывестиРазделВТабличныйДокументНаКлиенте(ИмяГруппы, СтруктураГруппы);
		#Иначе
			Форма.ВывестиРазделВТабличныйДокументНаСервере(ИмяГруппы, СтруктураГруппы);
		#КонецЕсли
		
	КонецЕсли;
	
	Расчет(Форма, ТекущаяСтраница);
	
	// Назначим текущей областью таблицы первую редактируемую ячейку
	// удаленной строки, если ее порядковый номер меньше кол-ва строк
	// многострочного раздела, или последней строки раздела в противном случае.
	
	// Определяем текущую область таблицы.
	НомТекущейСтроки  = Мин(НомУдаляемойСтроки, СтруктураГруппы.Количество());
	
	ИмяТекущейОбласти = ИмяПервойЯчейки + "_" + Формат(НомТекущейСтроки, "ЧГ=");
	
	Форма.Элементы[ТекТабличноеПолеИмя].ТекущаяОбласть = ТекТабличноеПоле.Области[ИмяТекущейОбласти];
	
	// Установим фокус на поле табличного документа.
	ТекущийЭлемент = Форма.Элементы[ТекТабличноеПолеИмя];
	Если СтруктураГруппы.Количество() = 1 Тогда
		Обл = ТекТабличноеПоле.Области.Найти("УдалитьСтроку" + ИмяГруппы + "01_1");
		Если Обл <> Неопределено Тогда 
			Обл.Гиперссылка = Ложь;
			Обл.Текст = "";
		КонецЕсли;
		Обл = ТекТабличноеПоле.Области.Найти("УдалитьСтроку" + ИмяГруппы + "10_1");
		Если Обл <> Неопределено Тогда 
			Обл.Гиперссылка = Ложь;
			Обл.Текст = "";
		КонецЕсли;
	КонецЕсли;
	Форма.Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ОчисткаРегламентированногоОтчетаНаСервере(ИмяСтраницы, ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста, РежимОчистки, Многостраничность, КолВоСтраницВРазделе) Экспорт
	
	УдалятьсяВсеДопЭкземпляры = Ложь;
	
	Если СтрНайти(РежимОчистки, "ОчиститьТекущийРаздел") > 0 Тогда
		
		Если (Многостраничность) И (КолВоСтраницВРазделе > 1) Тогда
			
			СтруктураРеквизитовФормы.ОтключитьВыполнениеРасчета = Истина;
			
			ОчиститьПоказателиОтчетаЗаполняемыеИзИБНаСервере(ИмяСтраницы);
			СохранитьДанныеРаздела(СтруктураРеквизитовФормы.НаимТекущегоРаздела, Истина, Ложь);
			
			СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяСтраницы;
			СтруктураРеквизитовФормы.ОтключитьВыполнениеРасчета = Ложь;
			
			УдалятьсяВсеДопЭкземпляры = Истина;
			
		Иначе
			
			ОчиститьТабличноеПолеНаСервере(ИмяСтраницы);
			
		КонецЕсли;
		
		СформироватьДеревоРазделовОтчетаНаСервере();
		
		СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
		
	ИначеЕсли СтрНайти(РежимОчистки, "ОчиститьТекущийЭкземплярМногостраничногоРаздела") > 0 Тогда
		
		СтруктураРеквизитовФормы.ОтключитьВыполнениеРасчета = Истина;
		
		ОчиститьТабличноеПолеНаСервере(ИмяСтраницы);
		
		СохранитьДанныеРаздела(СтруктураРеквизитовФормы.НаимТекущегоРаздела, Истина, Ложь);
		
		СтруктураРеквизитовФормы.ОтключитьВыполнениеРасчета = Ложь;
		
	КонецЕсли;
	
	Если ИмяСтраницы = "Титульный" Тогда
		Если Элементы.Найти("ДатаПодписи") = Неопределено Тогда
			Область = ТабличныйДокумент.Области.Найти("ДатаПодписи");
			Если НЕ Область = Неопределено Тогда
				Если ТипЗнч(Область.Значение) = Тип("Строка") Тогда
					ДатаПодписи = Лев(СтрЗаменить(Область.Значение, ".", ""), 8);
				ИначеЕсли ТипЗнч(Область.Значение) = Тип("Дата") Тогда
					Если ЗначениеЗаполнено(Область.Значение) Тогда
						ДатаПодписи = Лев(СтрЗаменить(Формат(Область.Значение, "ДФ = ""дд.ММ.гггг 'г.'"""), ".", ""), 8);
					Иначе
						ДатаПодписи = "        ";
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиентСервер.ПослеОчисткиРегламентированногоОтчета(
		ЭтаФорма, ИмяСтраницы, ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста);
	
КонецПроцедуры

&НаКлиенте
Процедура ОчисткаРегламентированногоОтчетаНаКлиенте(ИмяСтраницы, ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста, РежимОчистки, Многостраничность, КолВоСтраницВРазделе) Экспорт
	
	УдалятьсяВсеДопЭкземпляры = Ложь;
	
	Если СтрНайти(РежимОчистки, "ОчиститьТекущийРаздел") > 0 Тогда
		
		Если (Многостраничность) И (КолВоСтраницВРазделе > 1) Тогда
			РегламентированнаяОтчетностьКлиентСервер.ОчиститьПоказателиОтчетаЗаполняемыеИзИБ(ЭтаФорма, ИмяСтраницы);
			УдалятьсяВсеДопЭкземпляры = Истина;
		Иначе
			ОчиститьТабличноеПолеНаКлиенте(ИмяСтраницы);
		КонецЕсли;
		
		СформироватьДеревоРазделовОтчетаНаКлиенте();
		
	ИначеЕсли СтрНайти(РежимОчистки, "ОчиститьТекущийЭкземплярМногостраничногоРаздела") > 0 Тогда
		
		ОчиститьТабличноеПолеНаКлиенте(ИмяСтраницы);
		
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиентСервер.ПослеОчисткиРегламентированногоОтчета(
		ЭтаФорма, ИмяСтраницы, ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста);
	
	СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораИФНС()
	
	КодИМНС = СокрЛП(ТабличныйДокумент.Области.НалоговыйОрган.Значение);
	КПП     = СокрЛП(ТабличныйДокумент.Области.КПП.Значение);
	ЗначенияДляОтбора = Новый Массив;
	ЗначенияДляОтбора.Добавить(Новый Структура("КодНО, КПП", КодИМНС, КПП));
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Организация", СтруктураРеквизитовФормы.Организация);
	ПараметрыФормы.Вставить("ЗначенияДляОтбора", ЗначенияДляОтбора);
	
	ФормаВыбораНалоговогоОргана = РегламентированнаяОтчетностьКлиент.ПолучитьОбщуюФормуПоИмени(
		"ФормаВыбораНалоговогоОргана", ПараметрыФормы, ЭтаФорма);
	
	Если ФормаВыбораНалоговогоОргана.ТаблицаНО.Количество() <> 0 Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаВыбораИФНСЗавершение", ЭтотОбъект);
		ФормаВыбораНалоговогоОргана.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
		ФормаВыбораНалоговогоОргана.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		ФормаВыбораНалоговогоОргана.Открыть();
		
	ИначеЕсли НЕ ЗначениеЗаполнено(КодИМНС) Тогда
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Код налогового органа необходимо задать в справочнике ""Организации"".'");
		Сообщение.Сообщить();
		Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
			УстановитьДоступностьОбластей(ЭтаФорма, СтруктураРеквизитовФормы.НаимТекущегоРаздела);
		КонецЕсли;
		
	Иначе
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Для выбора инспекции, необходимо завести соответствующую запись в справочнике ""Регистрации в налоговом органе"".'");
		Сообщение.Сообщить();
		Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
			УстановитьДоступностьОбластей(ЭтаФорма, СтруктураРеквизитовФормы.НаимТекущегоРаздела);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораИФНСЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	Если РезультатВыбора <> Неопределено Тогда
		
		ВыбранныйКодНО = РезультатВыбора.КодНО;
		ДлинаКодаНО = СтрДлина(ВыбранныйКодНО);
		
		Для Инд = ДлинаКодаНО + 1 По 4 Цикл
			ВыбранныйКодНО = "0" + ВыбранныйКодНО;
		КонецЦикла;
		
		ТабличныйДокумент.Области["НалоговыйОрган"].Значение = ВыбранныйКодНО;
		
		ТабличныйДокумент.Области["КПП"].Значение = РезультатВыбора.КПП;
		
		ЗаполнитьСведенияОПодписантах();
		
		Модифицированность = Истина;
		
	КонецЕсли;
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
		УстановитьДоступностьОбластей(ЭтаФорма, СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СобратьДанные(ИмяОбласти)
	
	Если СтрЧислоВхождений(ИмяОбласти, "Строки010Раздела24") > 0 Тогда
		СформироватьСтроки010Раздела24(
			Элементы.РазделыОтчета.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета);
	ИначеЕсли СтрЧислоВхождений(ИмяОбласти, "Раздел25") > 0 Тогда
		СформироватьРаздел25(
			Элементы.РазделыОтчета.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета);
	ИначеЕсли СтрЧислоВхождений(ИмяОбласти, "Приложение21") > 0 Тогда
		СформироватьПриложение21();
	КонецЕсли;
	
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела <> "Приложение21" Тогда
		Если ЭтаФорма["ТаблицаСтраницы"
			+ СтруктураРеквизитовФормы.НаимТекущегоРаздела].Количество() > 0 Тогда
			Для Каждого Область Из ТабличныйДокумент.Области Цикл
				Если СтрЧислоВхождений(Область.Имя, "УдалитьСтраницу") > 0 Тогда
					Если ЭтаФорма["ТаблицаСтраницы"
						+ СтруктураРеквизитовФормы.НаимТекущегоРаздела].Количество() = 1 Тогда
						Область.Текст = "";
						Область.Гиперссылка = Ложь;
					Иначе
						Если СтрЧислоВхождений(Область.Имя, "Значок") > 0 Тогда
							Область.Текст = "х";
						Иначе
							Область.Текст = "Удалить страницу";
						КонецЕсли;
						Область.Гиперссылка = Истина;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьСтроки010Раздела24(НомерСтраницыРазделаОтчета)
	
	СохранитьДанныеРаздела(СтруктураРеквизитовФормы.НаимТекущегоРаздела, Истина);
	
	ТекСтраницаРаздела2 = ТаблицаСтраницыРаздел2[НомерСтраницыРазделаОтчета - 1];
	
	СтруктураДанныхДопСтрокРаздела = ТекСтраницаРаздела2.ДанныеДопСтрок[0].Значение;
	
	ДанныеДопСтрокРаздела24 = Неопределено;
	ДанныеДопСтрок010Раздела24 = Неопределено;
	Если СтруктураДанныхДопСтрокРаздела.Свойство("П0002400001", ДанныеДопСтрокРаздела24)
		И СтруктураДанныхДопСтрокРаздела.Свойство("П0002400002", ДанныеДопСтрок010Раздела24) Тогда
		
		ДанныеДопСтрок010Раздела24.Очистить();
		
		ТЗ = ДанныеФормыВЗначение(ДанныеДопСтрокРаздела24, Тип("ТаблицаЗначений"));
		
		Если СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета >= '20180101' Тогда
			
			КодыПоказателей_2ХХХХ = СтрРазделить("20003,20009,20011,20013,20015", ",", Ложь);
			КодыПоказателей_5ХХХХ = СтрРазделить("50001,50006,50007", ",", Ложь);
			
			Для каждого СтрокаТЗ Из ТЗ Цикл
				КодПок = СокрЛП(СтрокаТЗ.П000240000101);
				Если КодыПоказателей_2ХХХХ.Найти(КодПок) <> Неопределено Тогда
					СтрокаТЗ.П000240000101 = "2ХХХХ";
				ИначеЕсли КодыПоказателей_5ХХХХ.Найти(КодПок) <> Неопределено Тогда
					СтрокаТЗ.П000240000101 = "5ХХХХ";
				КонецЕсли;
			КонецЦикла;
			
			ТЗ.Свернуть("П000240000101,П000240000104,П000240000105", "П000240000103");
			Для каждого СтрокаТЗ Из ТЗ Цикл
				Если СокрЛП(СтрокаТЗ.П000240000101) = "2ХХХХ"
					И ЗначениеЗаполнено(СтрокаТЗ.П000240000104)
					И ЗначениеЗаполнено(СтрокаТЗ.П000240000105) Тогда
					Превышение = 0;
					МассивСтрок_5ХХХХ = ТЗ.НайтиСтроки(Новый Структура(
					"П000240000101,П000240000104,П000240000105",
					"5ХХХХ", СтрокаТЗ.П000240000104, СтрокаТЗ.П000240000105));
					Если МассивСтрок_5ХХХХ.Количество() > 0 Тогда
						ТЗ_5ХХХХ = ТЗ.Скопировать(МассивСтрок_5ХХХХ);
						ТЗ_5ХХХХ.Свернуть("П000240000101,П000240000104,П000240000105", "П000240000103");
						Превышение = Макс(СтрокаТЗ.П000240000103 - ТЗ_5ХХХХ[0].П000240000103, 0);
					Иначе
						Превышение = СтрокаТЗ.П000240000103;
					КонецЕсли;
					НовСтрока010 = ДанныеДопСтрок010Раздела24.Добавить();
					НовСтрока010.П000240000201 = Превышение;
					НовСтрока010.П000240000202 = СтрокаТЗ.П000240000104;
					НовСтрока010.П000240000203 = СтрокаТЗ.П000240000105;
				КонецЕсли;
			КонецЦикла;
			
		Иначе
			
			ТЗ.Свернуть("П000240000101,П000240000104,П000240000105", "П000240000103");
			Для каждого СтрокаТЗ Из ТЗ Цикл
				Если СокрЛП(СтрокаТЗ.П000240000101) = "20003"
					И ЗначениеЗаполнено(СтрокаТЗ.П000240000104)
					И ЗначениеЗаполнено(СтрокаТЗ.П000240000105) Тогда
					Превышение = 0;
					МассивСтрок_50001 = ТЗ.НайтиСтроки(Новый Структура(
					"П000240000101,П000240000104,П000240000105",
					"50001", СтрокаТЗ.П000240000104, СтрокаТЗ.П000240000105));
					Если МассивСтрок_50001.Количество() > 0 Тогда
						ТЗ_50001 = ТЗ.Скопировать(МассивСтрок_50001);
						ТЗ_50001.Свернуть("П000240000101,П000240000104,П000240000105", "П000240000103");
						Превышение = Макс(СтрокаТЗ.П000240000103 - ТЗ_50001[0].П000240000103, 0);
					Иначе
						Превышение = СтрокаТЗ.П000240000103;
					КонецЕсли;
					НовСтрока010 = ДанныеДопСтрок010Раздела24.Добавить();
					НовСтрока010.П000240000201 = Превышение;
					НовСтрока010.П000240000202 = СтрокаТЗ.П000240000104;
					НовСтрока010.П000240000203 = СтрокаТЗ.П000240000105;
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ДанныеДопСтрок010Раздела24.Количество() = 0 Тогда
		ДанныеДопСтрок010Раздела24.Добавить();
	КонецЕсли;
	
	ВывестиМакетВТаблДокНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела,
		НомерСтраницыРазделаОтчета);
	
	СтруктураРеквизитовФормы.ИмяАктивнойОбластиРаздела2 = "П000240000201_1";
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьРаздел25(НомерСтраницыРазделаОтчета)
	
	СохранитьДанныеРаздела(СтруктураРеквизитовФормы.НаимТекущегоРаздела, Истина);
	
	ТекСтраницаРаздела2 = ТаблицаСтраницыРаздел2[НомерСтраницыРазделаОтчета - 1];
	
	КодВидаПодакцизТовара_Раздел2 = СокрЛП(ТекСтраницаРаздела2.Данные[0].Значение.П000020001003);
	
	Если НЕ ЗначениеЗаполнено(КодВидаПодакцизТовара_Раздел2) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Не заполнен код вида подакцизного товара на странице "
			+ НомерСтраницыРазделаОтчета + " Раздела 2.'");
		Сообщение.Сообщить();
		ВывестиМакетВТаблДокНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела,
			НомерСтраницыРазделаОтчета);
		СтруктураРеквизитовФормы.ИмяАктивнойОбластиРаздела2 = "П000020001003";
		Возврат;
	КонецЕсли;
	
	СтруктураДанныхДопСтрокРаздела = ТекСтраницаРаздела2.ДанныеДопСтрок[0].Значение;
	
	ДанныеДопСтрокРаздела25 = Неопределено;
	Если СтруктураДанныхДопСтрокРаздела.Свойство("П0002500001", ДанныеДопСтрокРаздела25) Тогда
		
		ТЗ = ДанныеФормыВЗначение(ДанныеДопСтрокРаздела25, Тип("ТаблицаЗначений"));
		ТЗ.Очистить();
		
		ДеревоДанныхПрил21 = ПолучитьИзВременногоХранилища(
			СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхПриложение21"]);
			
		Для каждого Ветка21 Из ДеревоДанныхПрил21.Строки Цикл
			КодВидаПодакцизТовара_Прил21 = СокрЛП(Ветка21.Данные.П001020001003);
			Если КодВидаПодакцизТовара_Прил21 = КодВидаПодакцизТовара_Раздел2 Тогда
				СтрокаТЗ = ТЗ.Добавить();
				СтрокаТЗ.П000250000101 = "20001";
				СтрокаТЗ.П000250000102 = Ветка21.Данные.П001020004003;
				СтрокаТЗ.П000250000103 = Ветка21.Данные.П001020004004;
				СтрокаТЗ.П000250000104 = "1";
				СтрокаТЗ = ТЗ.Добавить();
				СтрокаТЗ.П000250000101 = "50003";
				СтрокаТЗ.П000250000102 = Ветка21.Данные.П001020006003;
				СтрокаТЗ.П000250000103 = Ветка21.Данные.П001020006004;
				СтрокаТЗ.П000250000104 = "1";
			КонецЕсли;
		КонецЦикла;
		
		ТЗ.Свернуть("П000250000101,П000250000104", "П000250000102,П000250000103");
		
		ЗначениеВДанныеФормы(ТЗ, ДанныеДопСтрокРаздела25);
		
		Если ДанныеДопСтрокРаздела25.Количество() = 0 Тогда
			ДанныеДопСтрокРаздела25.Добавить();
		КонецЕсли;
		
	КонецЕсли;
	
	ВывестиМакетВТаблДокНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела,
		НомерСтраницыРазделаОтчета);
	
	СтруктураРеквизитовФормы.ИмяАктивнойОбластиРаздела2 = "П000250000101_1";
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьПриложение21()
	
	ДеревоДанныхРаздела = ПолучитьИзВременногоХранилища(
		СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхПриложение21"]);
	
	ТекВетка21 = ДеревоДанныхРаздела.Строки[(СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[0] - 1)];
	
	ТекВетка21.Данные["П001020001003"] = ТабличныйДокумент.Области["П001020001003"].Значение;
	
	Для каждого Показатель Из ТекВетка21.Данные Цикл
		Если ТипЗнч(Показатель.Значение) = Тип("Число") Тогда
			ТекВетка21.Данные[Показатель.Ключ] = 0;
		КонецЕсли;
	КонецЦикла;
	
	ТекВетка21.Данные.Вставить("П001020002003", ТекВетка21.Строки.Количество());
	
	Для каждого Ветка22 Из ТекВетка21.Строки Цикл
		ТекВетка21.Данные.Вставить(
		"П001020003003", ТекВетка21.Данные["П001020003003"] + Ветка22.Данные["П001020015003"]);
		ТекВетка21.Данные.Вставить(
		"П001020004003", ТекВетка21.Данные["П001020004003"] + Ветка22.Данные["П001020016003"]);
		ТекВетка21.Данные.Вставить(
		"П001020004004", ТекВетка21.Данные["П001020004004"] + Ветка22.Данные["П001020016004"]);
		ТекВетка21.Данные.Вставить(
		"П001020005004", ТекВетка21.Данные["П001020005004"] + Ветка22.Данные["П001020017004"]);
		ТекВетка21.Данные.Вставить(
		"П001020006003", ТекВетка21.Данные["П001020006003"] + Ветка22.Данные["П001020018003"]);
		ТекВетка21.Данные.Вставить(
		"П001020006004", ТекВетка21.Данные["П001020006004"] + Ветка22.Данные["П001020018004"]);
		ТекВетка21.Данные.Вставить(
		"П001020007004", ТекВетка21.Данные["П001020007004"] + Ветка22.Данные["П001020019004"]);
		Если СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Тогда
			ТекВетка21.Данные.Вставить(
			"П001020008004", ТекВетка21.Данные["П001020008004"] + Ветка22.Данные["П001020020004"]);
		Иначе
			ТекВетка21.Данные.Вставить(
			"П001020008004", ТекВетка21.Данные["П001020006004"] + ТекВетка21.Данные["П001020007004"]);
		КонецЕсли;
		ТекВетка21.Данные.Вставить(
		"П001020009004", ТекВетка21.Данные["П001020009004"] + Ветка22.Данные["П001020021004"]);
		Если СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Тогда
			ТекВетка21.Данные.Вставить(
			"П001020010004", ТекВетка21.Данные["П001020010004"] + Ветка22.Данные["П001020022003"]);
		Иначе
			ТекВетка21.Данные.Вставить(
			"П001020010004", ТекВетка21.Данные["П001020004004"] - ТекВетка21.Данные["П001020008004"]);
		КонецЕсли;
	КонецЦикла;
	
	СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхПриложение21"]
		= ПоместитьВоВременноеХранилище(ДеревоДанныхРаздела, УникальныйИдентификатор);
	
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Приложение21" Тогда
		Для каждого Показатель Из ТекВетка21.Данные Цикл
			ТабличныйДокумент.Области[Показатель.Ключ].Значение = Показатель.Значение;
		КонецЦикла;
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ТабличныйДокументВыбор(Элемент, Область, СтандартнаяОбработка)
	
	Если СтрЧислоВхождений(Область.Имя, "ДобавитьСтроку") = 1 И Область.Текст <> "" Тогда
		ДобавитьСтроку("");
	ИначеЕсли СтрЧислоВхождений(Область.Имя, "УдалитьСтроку") = 1 И Область.Текст <> "" Тогда
		УдалитьСтроку("");
	ИначеЕсли СтрЧислоВхождений(Область.Имя, "ДобавитьСтраницу") > 0 И Область.Текст <> "" Тогда
		ДобавитьСтраницу("");
	ИначеЕсли СтрЧислоВхождений(Область.Имя, "УдалитьСтраницу") > 0 И Область.Текст <> "" Тогда
		УдалитьСтраницу("");
	ИначеЕсли СтрЧислоВхождений(Область.Имя, "СобратьДанные") > 0 И Область.Гиперссылка Тогда
		СобратьДанные(Область.Имя);
	КонецЕсли;
	
	Если РегламентированнаяОтчетностьКлиент.ВыбраннаяОбластьРегламентированногоОтчетаНеВерна(
		ЭтаФорма, Область, СтандартнаяОбработка) Тогда
		Возврат;
	КонецЕсли;
	
	Если Область.Имя = "НалоговыйОрган" Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ОбработкаВыбораИФНС();
		
	Иначе
		
		ПараметрВводаПоля = РегламентированнаяОтчетностьКлиентСервер.НайтиСвойстваПоказателя(ЭтаФорма, Область.Имя);
		
		Если ПараметрВводаПоля <> Неопределено И ПараметрВводаПоля.ТаблицаЗначений.Количество() > 0 Тогда
			КодПоказателя = ПараметрВводаПоля.Показатель;
			КопироватьДанныеФормы(ПараметрВводаПоля.ТаблицаЗначений, ТЗВыбора);
			
			ВвестиПоказатель(Элемент, Область, КодПоказателя, Ложь, ПараметрВводаПоля.ТекстПриВыборе, ТЗВыбора, СтандартнаяОбработка);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТабличныйДокументПриИзмененииСодержимогоОбласти(Элемент, Область)
	
	ИмяПоказателя = Область.Имя;
	ЗначПоказателя = Область.Значение;
	
	Если ИмяПоказателя = "ДатаПодписи" Тогда 
		ДатаПодписи = Область.Значение;
		ЗаполнитьСведенияОбОрганизацииНаСервере(Истина);
		Модифицированность = Истина;
	ИначеЕсли ИмяПоказателя = "НомерКорректировки" Тогда 
		ОписаниеТипа = Новый ОписаниеТипов("Число");
		НомерКорректировки = ОписаниеТипа.ПривестиЗначение(Область.Значение);
		СтруктураРеквизитовФормы.ВидДокумента = ?(НомерКорректировки = 0, 0, 1);
		Область.Значение = Строка(НомерКорректировки);
		РегламентированнаяОтчетностьКлиентСервер.УстановитьЗначениеОКВЭД(ДатаПодписи,
																	 СтруктураРеквизитовФормы,
																	 ТабличныйДокумент.Области.ОКВЭД.Значение);
		Модифицированность = Истина;
	КонецЕсли;
	
	ПараметрВводаПоля = РегламентированнаяОтчетностьКлиентСервер.НайтиСвойстваПоказателя(ЭтаФорма, ИмяПоказателя);
	
	Если ПараметрВводаПоля <> Неопределено И ПараметрВводаПоля.ТаблицаЗначений.Количество() > 0 Тогда
		
		КопироватьДанныеФормы(ПараметрВводаПоля.ТаблицаЗначений, ТЗВыбора);
		ЭлТЗВыбора = ТЗВыбора.НайтиСтроки(Новый Структура("Код", ЗначПоказателя));
		
	КонецЕсли;
	
	Если СтрНайти(Область.Имя, "ОКВЭД") > 0 Тогда
		Если НЕ ПустаяСтрока(ЗначПоказателя)
			И НЕ РегламентированнаяОтчетностьКлиентСервер.ОКВЭДСоответствуетТребованиям(ЗначПоказателя) Тогда
			ТекстСообщения
			= "На титульном листе задано некорректное значение кода вида деятельности по ОКВЭД." + Символы.ПС
			+ "Допустимы значения, соответствующие следующим шаблонам:" + Символы.ПС
			+ """XX"", ""XX.X"", ""XX.XX"", ""XX.XX.X"", ""XX.XX.XX"" (X - любая цифра).";
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='" + ТекстСообщения + "'");
			Сообщение.Сообщить();
		КонецЕсли;
	КонецЕсли;
	
	ИмяРаздела = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
	
	ИмяОбласти = Область.Имя;
	Если ИмяРаздела <> "Титульный" Тогда
		ПозицияПодстроки = СтрНайти(ИмяОбласти, "_");
		Если ПозицияПодстроки > 0 Тогда
			ИмяОбласти = Лев(ИмяОбласти, ПозицияПодстроки - 1);
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыВводаПоля = СвойстваПоказателей.НайтиСтроки(Новый Структура("Показатель", ИмяОбласти));
	Если ПараметрыВводаПоля.Количество() > 0 Тогда
		ПараметрВводаПоля = ПараметрыВводаПоля[0];
		Если СтрДлина(СокрЛП(ЗначПоказателя)) <> 0 И ПараметрВводаПоля.Длина <> 0
			И СтрДлина(СокрЛП(ЗначПоказателя)) <> ПараметрВводаПоля.Длина Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='Длина значения показателя должна быть равна " + ПараметрВводаПоля.Длина + ".'");
			Сообщение.Сообщить();
		КонецЕсли;
	ИначеЕсли Лев(ИмяПоказателя, 13) = "П000240000105"
		ИЛИ Лев(ИмяПоказателя, 13) = "П000240000203"
		ИЛИ Лев(ИмяПоказателя, 13) = "П000260000105"
		ИЛИ ИмяПоказателя = "П001020017006"
		ИЛИ ИмяПоказателя = "П001020018006"
		ИЛИ ИмяПоказателя = "П001020020006"
		ИЛИ ИмяПоказателя = "П001020021006" Тогда
		Если Область.Значение > 0 И Область.Значение < 1000 Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='Длина значения показателя должна быть равна 4.'");
			Сообщение.Сообщить();
		КонецЕсли;
	КонецЕсли;
	
	Модифицированность = Истина;
	
	УстановитьДоступностьОбластей(ЭтаФорма, ИмяРаздела);
	
	Если ИмяРаздела = "Титульный" Тогда
		ЗаполнитьПериодОтчета(ЭтаФорма);
	Иначе
		
		Если Область.Имя = "П001020001003" Тогда
			УстановитьКодВидаПодакцизногоТовараВПодчиненныхРазделах2Приложений2(Область.Значение);
		КонецЕсли;
		
		РасчетНаКлиенте(ИмяРаздела, Область.Имя);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьКодВидаПодакцизногоТовараВПодчиненныхРазделах2Приложений2(КодВидаПТ)
	
	ДеревоДанныхРаздела = ПолучитьИзВременногоХранилища(
		СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхПриложение21"]);
	
	ТекВетка21 = ДеревоДанныхРаздела.Строки[(СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[0] - 1)];
	Для каждого Ветка22 Из ТекВетка21.Строки Цикл
		Ветка22.Данные.Вставить("П001020011003", КодВидаПТ);
	КонецЦикла;
	
	СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхПриложение21"]
		= ПоместитьВоВременноеХранилище(ДеревоДанныхРаздела, УникальныйИдентификатор);
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьНаСервере() Экспорт
	
	ТаблицаСтраницыРаздел1.Очистить();
	ТаблицаСтраницыРаздел2.Очистить();
	ТаблицаСтраницыРаздел3.Очистить();
	ТаблицаСтраницыПриложение1.Очистить();
	ТаблицаСтраницыПриложение3.Очистить();
	ТаблицаСтраницыПриложение4.Очистить();
	
	ИнициализацияМногоуровневыхРазделов();
	
	ИнициализацияМногостраничныхРазделов();
	
	Для Каждого мнгРаздел Из мСтруктураМногострочныхРазделов Цикл
		ЭтаФорма[мнгРаздел.Ключ].Очистить();
	КонецЦикла;
	
	НачальныеОперацииСМногострочнымиБлоками();
	
	ЗаполнитьПустыеСтруктурыДанных();
	
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Очистить();
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Приложение21" Тогда
		СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Добавить(1);
	ИначеЕсли СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Приложение22" Тогда
		СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Добавить(1);
		СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Добавить(1);
	КонецЕсли;
	
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела <> "Титульный" Тогда
		ОчиститьТабличноеПолеНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	КонецЕсли;
	
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Приложение21"
		ИЛИ СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Приложение22" Тогда
		ИмяТекРаздела = СтруктураРеквизитовФормы.НаимТекущегоРаздела;
		ВывестиМакетВТаблДокНаСервере(ИмяТекРаздела, 1,
			СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела);
		СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяТекРаздела;
		УстановитьДоступностьОбластей(ЭтаФорма, СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	Иначе
		ВывестиМакетСтраницыВТабличныйДокументНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела, 1,
			СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела);
	КонецЕсли;
	
	СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
	
	РегламентированнаяОтчетностьКлиентСервер.ОчиститьВариантыЗаполнения(ЭтаФорма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьОбластей(Форма, ИмяСтраницыПанели)
	
	Если ИмяСтраницыПанели = "Титульный" Тогда
		
		ОпредОбласть = Форма.ТабличныйДокумент.Области.КодФормыРеорганизации;
		ОбрабОбласть1 = Форма.ТабличныйДокумент.Области.ИННРеорганизованнойОрганизации;
		ОбрабОбласть2 = Форма.ТабличныйДокумент.Области.КППРеорганизованнойОрганизации;
		Если ПустаяСтрока(ОпредОбласть.Значение)
		 ИЛИ ОпредОбласть.Значение = "0" Тогда
			ЗапретитьВводДанныхВОбласть(Форма, ОбрабОбласть1);
			ЗапретитьВводДанныхВОбласть(Форма, ОбрабОбласть2);
		Иначе
			РазрешитьВводДанныхВОбласть(Форма, ОбрабОбласть1);
			РазрешитьВводДанныхВОбласть(Форма, ОбрабОбласть2);
		КонецЕсли;
		
		Если НЕ Форма.СтруктураРеквизитовФормы.ИП Тогда
			ОпредОбласть1 = Форма.ТабличныйДокумент.Области.КодФормыРеорганизации;
			ОпредОбласть2 = Форма.ТабличныйДокумент.Области.ПоМесту;
			ОбрабОбласть = Форма.ТабличныйДокумент.Области.НаимОрг;
			Если ЗначениеЗаполнено(ОпредОбласть1.Значение) И ОпредОбласть1.Значение <> "0"
				И (ОпредОбласть2.Значение = "215" ИЛИ ОпредОбласть2.Значение = "216") Тогда
				РазрешитьВводДанныхВОбласть(Форма, ОбрабОбласть);
			Иначе
				ЗапретитьВводДанныхВОбласть(Форма, ОбрабОбласть);
				Форма.ТабличныйДокумент.Области.НаимОрг.Значение = Форма.СтруктураРеквизитовФормы.НачальноеЗначениеНаимОрганизации;
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ИмяСтраницыПанели = "Приложение21" Тогда
		
		ОбрабОбласть1 = Форма.ТабличныйДокумент.Области["П001020008004"];
		ОбрабОбласть2 = Форма.ТабличныйДокумент.Области["П001020010004"];
		Если Форма.СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Тогда
			ОбрабОбласть1.Защита   = Ложь;
			ОбрабОбласть1.ЦветФона = Форма.мСтруктураЦветовРаскраски["_0"];
			ОбрабОбласть2.Защита   = Ложь;
			ОбрабОбласть2.ЦветФона = Форма.мСтруктураЦветовРаскраски["_0"];
		Иначе
			ОбрабОбласть1.Защита   = Истина;
			ОбрабОбласть1.ЦветФона = Форма.мСтруктураЦветовРаскраски["_4"];
			ОбрабОбласть2.Защита   = Истина;
			ОбрабОбласть2.ЦветФона = Форма.мСтруктураЦветовРаскраски["_4"];
		КонецЕсли;
		
	ИначеЕсли ИмяСтраницыПанели = "Приложение22" Тогда
		
		ОбрабОбласть = Форма.ТабличныйДокумент.Области["П001020011003"];
		ЗапретитьВводДанныхВОбласть(Форма, ОбрабОбласть, Ложь);
		
		ОбрабОбласть1 = Форма.ТабличныйДокумент.Области["П001020020003"];
		ОбрабОбласть2 = Форма.ТабличныйДокумент.Области["П001020020004"];
		Если Форма.СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Тогда
			ОбрабОбласть1.Защита   = Ложь;
			ОбрабОбласть1.ЦветФона = Форма.мСтруктураЦветовРаскраски["_0"];
			ОбрабОбласть2.Защита   = Ложь;
			ОбрабОбласть2.ЦветФона = Форма.мСтруктураЦветовРаскраски["_0"];
		Иначе
			ОбрабОбласть1.Защита   = Истина;
			ОбрабОбласть1.ЦветФона = Форма.мСтруктураЦветовРаскраски["_4"];
			ОбрабОбласть2.Защита   = Истина;
			ОбрабОбласть2.ЦветФона = Форма.мСтруктураЦветовРаскраски["_4"];
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗапретитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть, ОчищатьЗначение = Истина)
	
	ЦветНедоступнойОбласти = Форма.мСтруктураЦветовРаскраски["_5"];
	
	ОбрабатываемаяОбласть.Защита   = Истина;
	ОбрабатываемаяОбласть.ЦветФона = ЦветНедоступнойОбласти;
	
	Если ОчищатьЗначение Тогда
		ТипЗначенияОбласти = ТипЗнч(ОбрабатываемаяОбласть.Значение);
		Если ТипЗначенияОбласти = Тип("Число") Тогда
			ОбрабатываемаяОбласть.Значение = 0;
		ИначеЕсли ТипЗначенияОбласти = Тип("Строка") Тогда
			ОбрабатываемаяОбласть.Значение = "";
		Иначе
			ОбрабатываемаяОбласть.Значение = Неопределено;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РазрешитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть)
	
	ЦветОбластиРучногоВвода = Форма.мСтруктураЦветовРаскраски["_0"];
	
	ОбрабатываемаяОбласть.Защита   = Ложь;
	ОбрабатываемаяОбласть.ЦветФона = ЦветОбластиРучногоВвода;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ СТЫКОВКИ С СЕРВИСОМ СДАЧИ ОТЧЕТНОСТИ ЧЕРЕЗ ПРЕДСТАВИТЕЛЯ

&НаКлиенте
Процедура ОтправитьЧерезПредставителя(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОтправитьЧерезПредставителяЗавершение", ЭтотОбъект);
	
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьЧерезПредставителяЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ПриНажатииНаКнопкуОтправкиЧерезПредставителяВРегламентированномОтчете(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВИнтернете(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьВИнтернетеЗавершение", ЭтотОбъект);
	
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВИнтернетеЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ПроверитьВИнтернете(ЭтаФорма);
	
КонецПроцедуры

#Область ПанельОтправкиВКонтролирующиеОрганы

&НаКлиенте
Процедура ОбновитьОтправку(Команда)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОбновитьОтправкуИзПанелиОтправки(ЭтаФорма, "ФНС");
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаПротоколНажатие(Элемент)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьПротоколИзПанелиОтправки(ЭтаФорма, "ФНС");
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьНеотправленноеИзвещение(Команда)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОтправитьНеотправленноеИзвещениеИзПанелиОтправки(ЭтаФорма, "ФНС");
КонецПроцедуры

&НаКлиенте
Процедура ЭтапыОтправкиНажатие(Элемент)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьСостояниеОтправкиИзПанелиОтправки(ЭтаФорма, "ФНС");
КонецПроцедуры

&НаКлиенте
Процедура КритическиеОшибкиОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьКритическиеОшибкиИзПанелиОтправки(ЭтаФорма, "ФНС");
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаНаименованиеЭтапаНажатие(Элемент)
	
	ПараметрыИзменения = Новый Структура;
	ПараметрыИзменения.Вставить("Форма", ЭтаФорма);
	ПараметрыИзменения.Вставить("Организация", СтруктураРеквизитовФормы.Организация);
	ПараметрыИзменения.Вставить("КонтролирующийОрган",
		ПредопределенноеЗначение("Перечисление.ТипыКонтролирующихОрганов.ФНС"));
	
	РегламентированнаяОтчетностьКлиент.ИзменитьСтатусОтправки(ПараметрыИзменения);
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ОтправитьВКонтролирующийОрган(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверкаВозможностиВыгрузкиРегламентированногоОтчетаПередОтправкой", ЭтотОбъект);
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередОтправкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаВозможностиВыгрузкиРегламентированногоОтчетаПередОтправкой(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОтправитьВКонтролирующийОрганЗавершение", ЭтотОбъект);
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьВКонтролирующийОрганЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ПриНажатииНаКнопкуОтправкиВКонтролирующийОрган(ЭтаФорма, "ФНС");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Форма", ЭтаФорма);
	Оповещение = Новый ОписаниеОповещения("ПослеСохраненияФормыЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	СохранитьНаКлиенте(, Оповещение);
КонецПроцедуры

&НаКлиенте
Процедура ПослеСохраненияФормыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	ДополнительныеПараметры.Форма.Закрыть();
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция РазделТекущейОбласти(Форма, ТекущаяОбласть, ДлИмениОбласти = 13) Экспорт
	
	Если ТекущаяОбласть = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ИмяТекущейОбласти = СтрЗаменить(ТекущаяОбласть.Имя, "ДобавитьСтрокуЗначок", "ДобавитьСтроку");
	Если ИмяТекущейОбласти = "ДобавитьСтроку1" Тогда
		Возврат Форма.СтруктураРеквизитовФормы.мИдГруппы1;
	ИначеЕсли ИмяТекущейОбласти = "ДобавитьСтроку21" Тогда
		Возврат Форма.СтруктураРеквизитовФормы.мИдГруппы21;
	ИначеЕсли ИмяТекущейОбласти = "ДобавитьСтроку22" Тогда
		Возврат Форма.СтруктураРеквизитовФормы.мИдГруппы22;
	ИначеЕсли ИмяТекущейОбласти = "ДобавитьСтроку241" Тогда
		Возврат Форма.СтруктураРеквизитовФормы.мИдГруппы241;
	ИначеЕсли ИмяТекущейОбласти = "ДобавитьСтроку242" Тогда
		Возврат Форма.СтруктураРеквизитовФормы.мИдГруппы242;
	ИначеЕсли ИмяТекущейОбласти = "ДобавитьСтроку25" Тогда
		Возврат Форма.СтруктураРеквизитовФормы.мИдГруппы25;
	ИначеЕсли ИмяТекущейОбласти = "ДобавитьСтроку26" Тогда
		Возврат Форма.СтруктураРеквизитовФормы.мИдГруппы26;
	ИначеЕсли ИмяТекущейОбласти = "ДобавитьСтроку101" Тогда
		Возврат Форма.СтруктураРеквизитовФормы.мИдГруппы101;
	ИначеЕсли ИмяТекущейОбласти = "ДобавитьСтроку103" Тогда
		Возврат Форма.СтруктураРеквизитовФормы.мИдГруппы103;
	ИначеЕсли ИмяТекущейОбласти = "ДобавитьСтроку104" Тогда
		Возврат Форма.СтруктураРеквизитовФормы.мИдГруппы104;
	ИначеЕсли СтрНайти(ИмяТекущейОбласти, "УдалитьСтроку") > 0 Тогда
		ИмяТекущейОбласти = СтрЗаменить(ИмяТекущейОбласти, "УдалитьСтроку", "");
	КонецЕсли;
	
	ИмяАктивногоРаздела = Лев(ИмяТекущейОбласти, ДлИмениОбласти);
	
	Для Каждого ЭлементСтруктуры Из Форма.мСтруктураМногострочныхРазделов Цикл
		ИмяГруппы = ЭлементСтруктуры.Ключ;
		
		СтруктураГруппы = Форма[ЭлементСтруктуры.Значение];
		
		Если СтруктураГруппы[0].Свойство(ИмяАктивногоРаздела) Тогда
			Возврат ИмяГруппы;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

&НаКлиенте
Процедура ТабличныйДокументПриАктивизацииОбласти(Элемент)
	Элементы.ТабличныйДокументКонтекстноеМенюУдалитьСтроку.Доступность = Ложь;
	Элементы.ТабличныйДокументКонтекстноеМенюДобавитьСтроку.Доступность = Ложь;
	
	ИмяГруппы = РазделТекущейОбласти(ЭтаФорма, Элемент.ТекущаяОбласть);
	
	Если ЗначениеЗаполнено(ИмяГруппы) Тогда 
		ТестовоеИмя = ИмяГруппы + "01_" + Формат(мСтруктураИсхКолвоСтрокРазделов[ИмяГруппы] + 1, "ЧГ=");
		Элементы.ТабличныйДокументКонтекстноеМенюДобавитьСтроку.Доступность = Истина;
		Если СтрЧислоВхождений(Элемент.ТекущаяОбласть.Имя, "ДобавитьСтроку") = 0 
			И ТабличныйДокумент.Области.Найти(ТестовоеИмя) <> Неопределено Тогда
			Элементы.ТабличныйДокументКонтекстноеМенюУдалитьСтроку.Доступность = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОткрытьПрисоединенныеФайлы(Команда)
	
	РегламентированнаяОтчетностьКлиент.СохранитьОтчетИОткрытьФормуПрисоединенныеФайлы(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийПриИзменении(Элемент)
	Модифицированность = Истина;
КонецПроцедуры

&НаСервере
Функция ОбъектОтчета(ЭтаФормаИмя) Экспорт
	
	Если мОбъектОтчета = Неопределено Тогда 
		мОбъектОтчета = РегламентированнаяОтчетностьВызовСервера.ОбъектОтчета(ЭтаФормаИмя);
	КонецЕсли;
	
	Возврат мОбъектОтчета;
	
КонецФункции

#Область МеханизмПроверкиКонтрольныхСоотношений

#Область КС_Управление

&НаКлиенте
Процедура Проверить(Команда)
	
	РегламентированнаяОтчетностьКлиент.ПроверитьКонтрольныеСоотношения(ЭтаФорма, ОбработкаКС);
	
КонецПроцедуры

&НаСервере
Функция ПроверитьКонтрольныеСоотношенияВОтчете() Экспорт
	
	СформироватьСтруктуруПоказателей();
	
	мДанныеОтчета.Вставить("ДанныеКС"	, Новый Структура);
	СформироватьТаблицуСтавок();
	СформироватьВременныеТаблицы();
	
	СтруктураРеквизитовФормы.ТекстДляЗаголовочнойЧасти = 
		РегламентированнаяОтчетностьКлиентСервер.ПредставлениеДокументаРеглОтч(СтруктураРеквизитовФормы.мСохраненныйДок);
		
	СтруктураРезультата = Новый Структура;
	СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", 0);
	СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", 0);
	СтруктураРезультата.Вставить("СтруктураОшибок", Новый Структура);
	СтруктураРезультата.Вставить("ДопСведенияВОписаниеКС"			, Истина);
	СтруктураРезультата.Вставить("ДопСведенияВЗаголовокРасшифровки"	, Ложь);
	СтруктураРезультата.Вставить("ДопСведенияВСтрокуРасшифровки"	, Истина);
	
	СписокРасшифровкиПоказателей	= РегламентированнаяОтчетность.СоздатьСписокРасшифровкиПоказателей();
	СписокРасшифровкиформулы		= РегламентированнаяОтчетность.СоздатьСписокРасшифровкиформулы();
	СчетчикФормулДляРасшифровок		= 0;
	
	ПроверитьКС_1_1(СтруктураРезультата);
	ПроверитьКС_1_2(СтруктураРезультата);
	ПроверитьКС_1_3(СтруктураРезультата);
	ПроверитьКС_1_4(СтруктураРезультата);
	
	Если СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета		>= '20190101' Тогда
		ПроверитьКС_2_1_v19(СтруктураРезультата);
	ИначеЕсли СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета	>= '20180101' Тогда
		ПроверитьКС_2_1_v18(СтруктураРезультата);
	ИначеЕсли СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета	>= '20170101' Тогда
		ПроверитьКС_2_1_v17(СтруктураРезультата);
	Иначе
		ПроверитьКС_2_1(СтруктураРезультата);
	КонецЕсли;
	
	Если СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета		>= '20190101' Тогда
		ПроверитьКС_2_2_v19(СтруктураРезультата);
	ИначеЕсли СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета	>= '20180101' Тогда
		ПроверитьКС_2_2_v18(СтруктураРезультата);
	Иначе
		ПроверитьКС_2_2(СтруктураРезультата);
	КонецЕсли;
	
	ПроверитьКС_2_3(СтруктураРезультата);
	
	Если СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета		>= '20190101' Тогда
		ПроверитьКС_2_4_v19(СтруктураРезультата);
	ИначеЕсли СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета	>= '20180101' Тогда
		ПроверитьКС_2_4_v18(СтруктураРезультата);
	Иначе
		ПроверитьКС_2_4(СтруктураРезультата);
	КонецЕсли;
	
	ПроверитьКС_2_5(СтруктураРезультата);
	ПроверитьКС_2_6(СтруктураРезультата);
	ПроверитьКС_2_7(СтруктураРезультата);
	
	Если СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета		>= '20180101' Тогда
		ПроверитьКС_2_8_v18(СтруктураРезультата);
		ПроверитьКС_2_9_v18(СтруктураРезультата);
	Иначе
		ПроверитьКС_2_8(СтруктураРезультата);
		ПроверитьКС_2_9(СтруктураРезультата);
	КонецЕсли;
	
	ПроверитьКС_2_10(СтруктураРезультата);
	ПроверитьКС_2_11(СтруктураРезультата);
	ПроверитьКС_2_12(СтруктураРезультата);
	ПроверитьКС_2_13(СтруктураРезультата);
	
	ПроверитьКС_3_1(СтруктураРезультата);
	ПроверитьКС_3_2(СтруктураРезультата);
	ПроверитьКС_3_3(СтруктураРезультата);
	ПроверитьКС_3_4(СтруктураРезультата);
	ПроверитьКС_3_6(СтруктураРезультата);
	
	Если СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета		>= '20190101' Тогда
		ПроверитьКС_4_1_v19(СтруктураРезультата);
	ИначеЕсли СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета	>= '20180101' Тогда
		ПроверитьКС_4_1_v18(СтруктураРезультата);
	Иначе
		ПроверитьКС_4_1(СтруктураРезультата);
	КонецЕсли;
	
	ПроверитьКС_4_2(СтруктураРезультата);
	
	Если СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета		>= '20180101' Тогда
		ПроверитьКС_4_3_v18(СтруктураРезультата);
	Иначе
		ПроверитьКС_4_3(СтруктураРезультата);
	КонецЕсли;
	
	ПроверитьКС_4_4(СтруктураРезультата);
	ПроверитьКС_4_5(СтруктураРезультата);
	
	Если СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета		>= '20190101' Тогда
		ПроверитьКС_5_1_v19(СтруктураРезультата);
	ИначеЕсли СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета	>= '20180101' Тогда
		ПроверитьКС_5_1_v18(СтруктураРезультата);
	ИначеЕсли СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета	>= '20170101' Тогда
		ПроверитьКС_5_1_v17(СтруктураРезультата);
	Иначе
		ПроверитьКС_5_1(СтруктураРезультата);
	КонецЕсли;
	
	ПроверитьКС_5_2(СтруктураРезультата);
	ПроверитьКС_5_3(СтруктураРезультата);
	ПроверитьКС_5_4(СтруктураРезультата);
	ПроверитьКС_5_5(СтруктураРезультата);
	ПроверитьКС_5_7(СтруктураРезультата);
	ПроверитьКС_5_8(СтруктураРезультата);
	ПроверитьКС_5_9(СтруктураРезультата);
	ПроверитьКС_5_10(СтруктураРезультата);
	ПроверитьКС_5_11(СтруктураРезультата);
	ПроверитьКС_5_12(СтруктураРезультата);
	ПроверитьКС_5_13(СтруктураРезультата);
	ПроверитьКС_5_14(СтруктураРезультата);
	ПроверитьКС_5_15(СтруктураРезультата);
	
	Если СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета		>= '20190101' Тогда
		ПроверитьКС_6_1_v19(СтруктураРезультата);
	ИначеЕсли СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета	>= '20180101' Тогда
		ПроверитьКС_6_1_v18(СтруктураРезультата);
	ИначеЕсли СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета	>= '20170101' Тогда
		ПроверитьКС_6_1_v17(СтруктураРезультата);
	Иначе
		ПроверитьКС_6_1(СтруктураРезультата);
	КонецЕсли;
	
	ПроверитьКС_6_2(СтруктураРезультата);
	ПроверитьКС_6_3(СтруктураРезультата);
	ПроверитьКС_6_4(СтруктураРезультата);
	ПроверитьКС_6_10(СтруктураРезультата);
	ПроверитьКС_6_12(СтруктураРезультата);
	ПроверитьКС_6_14(СтруктураРезультата);
	ПроверитьКС_6_16(СтруктураРезультата);
	ПроверитьКС_6_17(СтруктураРезультата);
	ПроверитьКС_6_20(СтруктураРезультата);
	ПроверитьКС_6_21(СтруктураРезультата);
	
	ПроверитьКС_7_2(СтруктураРезультата);
	ПроверитьКС_8_2(СтруктураРезультата);
		
	мДанныеОтчета = Неопределено;
	Если СписокРасшифровкиформулы.Количество() = 0 Тогда
		Возврат СтруктураРезультата;
	КонецЕсли;
	
	АдресФормул			= ПоместитьВоВременноеХранилище(СписокРасшифровкиформулы	, Новый УникальныйИдентификатор);
	АдресПоказателей	= ПоместитьВоВременноеХранилище(СписокРасшифровкиПоказателей, Новый УникальныйИдентификатор);
	СтруктураРезультата.Вставить("СписокРасшифровкиформулы"		, АдресФормул);
	СтруктураРезультата.Вставить("СписокРасшифровкиПоказателей"	, АдресПоказателей);
	
	Возврат СтруктураРезультата;
	
КонецФункции

#КонецОбласти

#Область КС_Проверки

#Область КС_ПроверкиРаздела1

&НаСервере
Процедура ПроверитьКС_1_1(СтруктураРезультата)
	ОбщееЧислоОшибок    = СтруктураРезультата.КоличествоНайденныхОшибок;
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок;
	СтруктураОшибок     = СтруктураРезультата.СтруктураОшибок;
	ТекстФормулы    = НСтр("ru='Проверка раздела 1 (КС 1.1)'");
	ОписаниеКС      = НСтр("ru='Признак наличия свидетельства/сертификата должно иметь значение ""1"" или ""0""'");
	ОписаниеОшибки  = НСтр("ru='Неверно указан признак наличия свидетельства/сертификата в разделе 1'");
	Р1СтГр01 = ПоказательПоСтроке("Р1СтГр01");
	ДанныеПоказателей = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить();
	СтраницыРаздела1 = ДанныеПоказателей.ДанныеМногостраничныхРазделов.Раздел1;
	Для Каждого СтраницаР1 Из СтраницыРаздела1 Цикл
		ДанныеСтраницыР1 = СтраницаР1.Данные;
		НомерСтраницыР1Стр = СтрокаЧГ0(СтраницыРаздела1.Индекс(СтраницаР1) + 1);
		ВставитьЗначениеПоказателя(ДанныеСтраницыР1, Р1СтГр01);
		Если НЕ ЗначениеЗаполнено(Р1СтГр01.Значение) Тогда
			Продолжить;
		КонецЕсли;
		СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
		ЗарегистрироватьФормулуДляРасшифровки(ОписаниеКС);
		ВнестиПоказательВРасшифровку(Р1СтГр01, "Раздел1", НомерСтраницыР1Стр);
		Расшифровка = ?(ЗначениеЗаполнено(Р1СтГр01.ЗначениеСтр), """" + Р1СтГр01.ЗначениеСтр + """", "[ ]") + " = ""1"", ""0""";
		КСВыполнено = КодНайден(Р1СтГр01.Значение, "0,1");
		Если КСВыполнено Тогда
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
		Иначе
			ЭтоОшибка = Истина;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
		КонецЕсли;
		ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, ЭтоОшибка,
			ОписаниеОшибки,);
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_1_2(СтруктураРезультата)
	ОбщееЧислоОшибок    = СтруктураРезультата.КоличествоНайденныхОшибок;
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок;
	СтруктураОшибок     = СтруктураРезультата.СтруктураОшибок;
	ТекстФормулы    = НСтр("ru='Проверка раздела 1 (КС 1.2)'");
	ОписаниеКС      = НСтр("ru='Признак налогоплательщика должен иметь значение ""А"" или ""В""'");
	ОписаниеОшибки  = НСтр("ru='Неверно указан признак налогоплательщика в разделе 1'");
	Р1СтГр02 = ПоказательПоСтроке("Р1СтГр02");
	ДанныеПоказателей = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить();
	СтраницыРаздела1 = ДанныеПоказателей.ДанныеМногостраничныхРазделов.Раздел1;
	Для Каждого СтраницаР1 Из СтраницыРаздела1 Цикл
		ДанныеСтраницыР1 = СтраницаР1.Данные;
		НомерСтраницыР1Стр = СтрокаЧГ0(СтраницыРаздела1.Индекс(СтраницаР1) + 1);
		ВставитьЗначениеПоказателя(ДанныеСтраницыР1, Р1СтГр02);
		Если НЕ ЗначениеЗаполнено(Р1СтГр02.Значение) Тогда
			Продолжить;
		КонецЕсли;
		СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
		ЗарегистрироватьФормулуДляРасшифровки(ОписаниеКС);
		ВнестиПоказательВРасшифровку(Р1СтГр02, "Раздел1", НомерСтраницыР1Стр);
		Расшифровка = ?(ЗначениеЗаполнено(Р1СтГр02.ЗначениеСтр), """" + Р1СтГр02.ЗначениеСтр + """", "[ ]") + " = ""A"", ""B""";
		КСВыполнено = КодНайден(Р1СтГр02.Значение, "A,B");
		Если КСВыполнено Тогда
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
		Иначе
			ЭтоОшибка = Истина;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
		КонецЕсли;
		ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, ЭтоОшибка,
			ОписаниеОшибки,);
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_1_3(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка раздела 1 (КС 1.3)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст. 202 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Если графа 2 подраздела 2.3 раздела 2 с кодом графы 1 ""40001"" > 0 и графа 2 подраздела 2.3 '") +
		НСтр("ru='раздела 2 с кодом графы 1 ""40002"" = 0, строка 030 раздела 1 должна быть равна графе 2 '") +
		НСтр("ru='подраздела 2.3 раздела 2 с кодом графы 1 ""40001""'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru='КБК %1'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 Итог [%2] = %3 Итог [%4]'"));
	Заголовки.Вставить("ОписаниеОшибки"		, 
		НСтр("ru='Неправильно указана сумма акциза, подлежащая уплате в бюджет'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	Настройки.Вставить("ПоказательР1",		"Р1Ст1Гр02");
	
	ПроверитьКС_1_4_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_1_4(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка раздела 1 (КС 1.4)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст. 202 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Если графа 2 подраздела 2.3 раздела 2 с кодом графы 1 ""40001"" = 0 и графа 2 подраздела 2.3 '") +
		НСтр("ru='раздела 2 с кодом графы 1 ""40002"" > 0, строка 040 раздела 1 должна быть равна графе 2 '") +
		НСтр("ru='подраздела 2.3 раздела 2 с кодом графы 1 ""40002""'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru='КБК %1'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 Итог [%2] = %3 Итог [%4]'"));
	Заголовки.Вставить("ОписаниеОшибки"		, 
		НСтр("ru='Неправильно указана сумма акциза, начисленная к уменьшению'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	Настройки.Вставить("ПоказательР1",		"Р1Ст1Гр03");
	
	ПроверитьКС_1_4_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_1_4_код(Настройки)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = мДанныеОтчета.ДанныеКС.ВТ;
	Запрос.Текст =
	
	"ВЫБРАТЬ
	|	ВТ_Раздел1.КБК КАК КБК,
	|	ВТ_Раздел1.НомерСтраницы КАК НомерСтраницы,
	|	ВТ_Раздел1.НомерСтроки КАК НомерСтроки,
	|	ВТ_Раздел1.Р1Ст1Гр02 КАК Р1Ст1Гр02
	|ИЗ
	|	ВТ_Раздел1 КАК ВТ_Раздел1
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтраницы,
	|	НомерСтроки
	|ИТОГИ
	|	СУММА(Р1Ст1Гр02)
	|ПО
	|	КБК
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Раздел2.КБК КАК КБК,
	|	ВТ_Раздел2.Раздел КАК Раздел,
	|	ВТ_Раздел2.КодТовара КАК КодТовара,
	|	ВТ_Раздел2.НомерСтраницы КАК НомерСтраницы,
	|	ВТ_Раздел2.Р23Ст1Гр02 КАК Р23Ст1Гр02,
	|	ВТ_Раздел2.Р23Ст2Гр02 КАК Р23Ст2Гр02,
	|	ВТ_Раздел2.Р3Ст110Гр03 КАК Р3Ст110Гр03
	|ИЗ
	|	ВТ_Раздел2 КАК ВТ_Раздел2
	|
	|УПОРЯДОЧИТЬ ПО
	|	Раздел,
	|	НомерСтраницы
	|ИТОГИ
	|	СУММА(Р23Ст1Гр02),
	|	СУММА(Р23Ст2Гр02),
	|	СУММА(Р3Ст110Гр03)
	|ПО
	|	КБК";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "Р1Ст1Гр02", Настройки.ПоказательР1);
	
	Результат = Запрос.ВыполнитьПакет();
	ВыборкаР1 = Результат[0].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ВыборкаР2 = Результат[1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаР1.Следующий() Цикл
		
		Настройки.Вставить("ДопСведенияПараметры", Новый Структура("КБК", ВыборкаР1.КБК));
		ЗарегистрироватьФормулу(Настройки);
		СуммаР1Стр = "";
		СуммаР2Стр = "";
		СуммаР2 = 0;
		Счетчик = 0;
			
		Выборка = ВыборкаР1.Выбрать();
		Пока Выборка.Следующий() Цикл
			Показатели = ЗаполнитьПоказатели(Настройки.ПоказательР1, Выборка, Выборка.НомерСтроки, Истина);
			Дополнение = "КБК " + ВыборкаР1.КБК;
			ДобавитьИнфоКПредставлениюПоказателя(Показатели[Настройки.ПоказательР1], Дополнение);
			РасшифроватьПоказатели(Показатели, Настройки, "Раздел1", Выборка.НомерСтраницы);
			ЗначениеПоказателя = ?(Показатели[Настройки.ПоказательР1].Значение >= 0, 
				Показатели[Настройки.ПоказательР1].Значение, "(" + Показатели[Настройки.ПоказательР1].Значение + ")");
			СуммаР1Стр = СуммаР1Стр + ЗначениеПоказателя + " + ";
		КонецЦикла;
		
		Если ВыборкаР2.НайтиСледующий(ВыборкаР1.КБК, "КБК") Тогда
			СуммаР2 = ВыборкаР2.Р23Ст1Гр02 + ВыборкаР2.Р23Ст2Гр02 + ВыборкаР2.Р3Ст110Гр03;
			Выборка = ВыборкаР2.Выбрать();
			Пока Выборка.Следующий() Цикл
				Показатели = ЗаполнитьПоказатели("Р23Ст1Гр02, Р23Ст2Гр02, Р3Ст110Гр03", Выборка,, Истина);
				Для каждого Показатель Из Показатели Цикл
					Если ЗначениеЗаполнено(Показатель.Значение.Значение) Тогда
						Дополнение = "Страница " + Выборка.НомерСтраницы + ", код товара " + Выборка.КодТовара + " -> КБК "
							+ Выборка.КБК;
						ДобавитьИнфоКПредставлениюПоказателя(Показатель.Значение, Дополнение);
						ВнестиПоказательВРасшифровку(Показатель.Значение, Выборка.Раздел, Выборка.НомерСтраницы);
					КонецЕсли;
					Если Счетчик <= 4 И ЗначениеЗаполнено(Показатель.Значение.Значение) Тогда
						ЗначениеПоказателя = ?(Показатель.Значение.Значение >= 0, Показатель.Значение.ЗначениеСтр, "(" 
							+ Показатель.Значение.ЗначениеСтр + ")");
						СуммаР2Стр = СуммаР2Стр + ?(Счетчик = 4, ?(ЗначениеЗаполнено(СуммаР2), "<...>", "0"), 
							ЗначениеПоказателя + " + ");
						Счетчик = Счетчик + 1;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
		КонецЕсли; 
			
		Настройки.ЭтоОшибка		= ?(Настройки.ПоказательР1 = "Р1Ст1Гр02", СуммаР2 >= 0 И 
			НЕ ВыборкаР1[Настройки.ПоказательР1] = СуммаР2 ИЛИ СуммаР2 < 0 И НЕ ВыборкаР1[Настройки.ПоказательР1] = 0, 
			СуммаР2 < 0 И НЕ ВыборкаР1[Настройки.ПоказательР1] = СуммаР2 ИЛИ СуммаР2 >= 0 
			И НЕ ВыборкаР1[Настройки.ПоказательР1] = 0);
		Настройки.Расшифровка	= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки, 
			РасшифровкаВСтр(СуммаР1Стр), ВыборкаР1[Настройки.ПоказательР1], РасшифровкаВСтр(СуммаР2Стр), СуммаР2);
		ДополнитьСтруктуруОшибок(Настройки);
		ВыборкаР2.Сбросить();
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область КС_ПроверкиРаздела2

&НаСервере
Процедура ПроверитьКС_2_1(СтруктураРезультата)
	ОбщееЧислоОшибок    = СтруктураРезультата.КоличествоНайденныхОшибок;
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок;
	СтруктураОшибок     = СтруктураРезультата.СтруктураОшибок;
	ТекстФормулы    = НСтр("ru='Проверка раздела 2 (КС 2.1)'");
	ОписаниеКС      = НСтр("ru='Код вида подакцизного товара (стр. 010)  = 510, 520, 531, 532, '")
		+ НСтр("ru='630, 640, 650, 665, 671, 672, 673, 674, 676, 677'");
	ОписаниеОшибки  = НСтр("ru='Неверно указан код вида подакцизного товара в разделе 2'");
	Р2Ст10Гр03 = ПоказательПоСтроке("Р2Ст10Гр03");
	ДанныеПоказателей = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить();
	СтраницыРаздела2 = ДанныеПоказателей.ДанныеМногостраничныхРазделов.Раздел2;
	КодыПоказателей = ПолучитьСтрокуИзСпискаВыбора("КодыВидаПодакцизныхТоваров_БезПриродногоГаза");
	Для Каждого СтраницаР2 Из СтраницыРаздела2 Цикл
		ДанныеСтраницыР2 = СтраницаР2.Данные;
		НомерСтраницыР2Стр = СтрокаЧГ0(СтраницыРаздела2.Индекс(СтраницаР2) + 1);
		ВставитьЗначениеПоказателя(ДанныеСтраницыР2, Р2Ст10Гр03);
		Если НЕ ЗначениеЗаполнено(Р2Ст10Гр03.Значение) Тогда
			Продолжить;
		КонецЕсли;
		СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
		ЗарегистрироватьФормулуДляРасшифровки(ОписаниеКС);
		ВнестиПоказательВРасшифровку(Р2Ст10Гр03, "Раздел2", НомерСтраницыР2Стр);
		КСВыполнено = КодНайден(Р2Ст10Гр03.Значение, КодыПоказателей);
		Расшифровка = ?(ЗначениеЗаполнено(Р2Ст10Гр03.ЗначениеСтр), """" + Р2Ст10Гр03.ЗначениеСтр + """", "[ ]")
			+ " = 510, 520, 531, 532, 630, 640, 650, 665, 671, 672, 673, 674, 676, 677";
		Если КСВыполнено Тогда
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
		Иначе
			ЭтоОшибка = Истина;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
		КонецЕсли;
		ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, 
			Расшифровка, ЭтоОшибка, ОписаниеОшибки,);
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_2_1_v17(СтруктураРезультата)
	ОбщееЧислоОшибок    = СтруктураРезультата.КоличествоНайденныхОшибок;
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок;
	СтруктураОшибок     = СтруктураРезультата.СтруктураОшибок;
	ТекстФормулы    = НСтр("ru='Проверка раздела 2 (КС 2.1)'");
	ОписаниеКС      = НСтр("ru='Код вида подакцизного товара (стр. 010)  = 470, 471, 472, 510, 520, 531, 532, '")
		+ НСтр("ru='630, 640, 650, 665, 671, 672, 673, 674, 676, 677'");
	ОписаниеОшибки  = НСтр("ru='Неверно указан код вида подакцизного товара в разделе 2'");
	Р2Ст10Гр03 = ПоказательПоСтроке("Р2Ст10Гр03");
	ДанныеПоказателей = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить();
	СтраницыРаздела2 = ДанныеПоказателей.ДанныеМногостраничныхРазделов.Раздел2;
	КодыПоказателей = ПолучитьСтрокуИзСпискаВыбора("КодыВидаПодакцизныхТоваров_БезПриродногоГаза_20170101");
	Для Каждого СтраницаР2 Из СтраницыРаздела2 Цикл
		ДанныеСтраницыР2 = СтраницаР2.Данные;
		НомерСтраницыР2Стр = СтрокаЧГ0(СтраницыРаздела2.Индекс(СтраницаР2) + 1);
		ВставитьЗначениеПоказателя(ДанныеСтраницыР2, Р2Ст10Гр03);
		Если НЕ ЗначениеЗаполнено(Р2Ст10Гр03.Значение) Тогда
			Продолжить;
		КонецЕсли;
		СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
		ЗарегистрироватьФормулуДляРасшифровки(ОписаниеКС);
		ВнестиПоказательВРасшифровку(Р2Ст10Гр03, "Раздел2", НомерСтраницыР2Стр);
		КСВыполнено = КодНайден(Р2Ст10Гр03.Значение, КодыПоказателей);
		Расшифровка = ?(ЗначениеЗаполнено(Р2Ст10Гр03.ЗначениеСтр), """" + Р2Ст10Гр03.ЗначениеСтр + """", "[ ]")
			+ " = 470, 471, 472, 510, 520, 531, 532, 630, 640, 650, 665, 671, 672, 673, 674, 676, 677";
		Если КСВыполнено Тогда
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
		Иначе
			ЭтоОшибка = Истина;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
		КонецЕсли;
		ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, 
			Расшифровка, ЭтоОшибка, ОписаниеОшибки,);
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_2_1_v18(СтруктураРезультата)
	ОбщееЧислоОшибок    = СтруктураРезультата.КоличествоНайденныхОшибок;
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок;
	СтруктураОшибок     = СтруктураРезультата.СтруктураОшибок;
	ТекстФормулы    = НСтр("ru='Проверка раздела 2 (КС 2.1)'");
	ОписаниеКС      = НСтр("ru='Код вида подакцизного товара (стр. 010)  = 470, 471, 472, 510, 520, 531, 532, 533, '")
		+ НСтр("ru='534, 535, 536, 630, 640, 650, 665, 671, 672, 673, 674, 676, 677'");
	ОписаниеОшибки  = НСтр("ru='Неверно указан код вида подакцизного товара в разделе 2'");
	Р2Ст10Гр03 = ПоказательПоСтроке("Р2Ст10Гр03");
	ДанныеПоказателей = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить();
	СтраницыРаздела2 = ДанныеПоказателей.ДанныеМногостраничныхРазделов.Раздел2;
	КодыПоказателей = ПолучитьСтрокуИзСпискаВыбора("КодыВидаПодакцизныхТоваров_БезПриродногоГаза_20180101");
	Для Каждого СтраницаР2 Из СтраницыРаздела2 Цикл
		ДанныеСтраницыР2 = СтраницаР2.Данные;
		НомерСтраницыР2Стр = СтрокаЧГ0(СтраницыРаздела2.Индекс(СтраницаР2) + 1);
		ВставитьЗначениеПоказателя(ДанныеСтраницыР2, Р2Ст10Гр03);
		Если НЕ ЗначениеЗаполнено(Р2Ст10Гр03.Значение) Тогда
			Продолжить;
		КонецЕсли;
		СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
		ЗарегистрироватьФормулуДляРасшифровки(ОписаниеКС);
		ВнестиПоказательВРасшифровку(Р2Ст10Гр03, "Раздел2", НомерСтраницыР2Стр);
		КСВыполнено = КодНайден(Р2Ст10Гр03.Значение, КодыПоказателей);
		Расшифровка = ?(ЗначениеЗаполнено(Р2Ст10Гр03.ЗначениеСтр), """" + Р2Ст10Гр03.ЗначениеСтр + """", "[ ]")
			+ " = 470, 471, 472, 510, 520, 531, 532, 533, 534, 535, 536, 630, 640, 650, 665, 671, 672, 673, 674, 676, 677";
		Если КСВыполнено Тогда
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
		Иначе
			ЭтоОшибка = Истина;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
		КонецЕсли;
		ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, 
			Расшифровка, ЭтоОшибка, ОписаниеОшибки,);
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_2_1_v19(СтруктураРезультата)
	ОбщееЧислоОшибок    = СтруктураРезультата.КоличествоНайденныхОшибок;
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок;
	СтруктураОшибок     = СтруктураРезультата.СтруктураОшибок;
	ТекстФормулы    = НСтр("ru='Проверка раздела 2 (КС 2.1)'");
	ОписаниеКС      = НСтр("ru='Код вида подакцизного товара (стр. 010)  = 470, 471, 472, 510, 520, 531, 532, 533, '")
		+ НСтр("ru='534, 535, 536, 630, 640, 650, 665, 671, 672, 673, 674, 676, 677, 678, 679'");
	ОписаниеОшибки  = НСтр("ru='Неверно указан код вида подакцизного товара в разделе 2'");
	Р2Ст10Гр03 = ПоказательПоСтроке("Р2Ст10Гр03");
	ДанныеПоказателей = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить();
	СтраницыРаздела2 = ДанныеПоказателей.ДанныеМногостраничныхРазделов.Раздел2;
	КодыПоказателей = ПолучитьСтрокуИзСпискаВыбора("КодыВидаПодакцизныхТоваров_БезПриродногоГаза_20190101");
	Для Каждого СтраницаР2 Из СтраницыРаздела2 Цикл
		ДанныеСтраницыР2 = СтраницаР2.Данные;
		НомерСтраницыР2Стр = СтрокаЧГ0(СтраницыРаздела2.Индекс(СтраницаР2) + 1);
		ВставитьЗначениеПоказателя(ДанныеСтраницыР2, Р2Ст10Гр03);
		Если НЕ ЗначениеЗаполнено(Р2Ст10Гр03.Значение) Тогда
			Продолжить;
		КонецЕсли;
		СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
		ЗарегистрироватьФормулуДляРасшифровки(ОписаниеКС);
		ВнестиПоказательВРасшифровку(Р2Ст10Гр03, "Раздел2", НомерСтраницыР2Стр);
		КСВыполнено = КодНайден(Р2Ст10Гр03.Значение, КодыПоказателей);
		Расшифровка = ?(ЗначениеЗаполнено(Р2Ст10Гр03.ЗначениеСтр), """" + Р2Ст10Гр03.ЗначениеСтр + """", "[ ]")
			+ " = 470, 471, 472, 510, 520, 531, 532, 533, 534, 535, 536, 630, 640, 650, 665, 671, 672, 673, 674, 676, 677, "
			+ "678, 679";
		Если КСВыполнено Тогда
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
		Иначе
			ЭтоОшибка = Истина;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
		КонецЕсли;
		ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, 
			Расшифровка, ЭтоОшибка, ОписаниеОшибки,);
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_2_2(СтруктураРезультата)
	ОбщееЧислоОшибок    = СтруктураРезультата.КоличествоНайденныхОшибок;
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок;
	СтруктураОшибок     = СтруктураРезультата.СтруктураОшибок;
	ТекстФормулы    = НСтр("ru='Проверка раздела 2 (КС 2.2)'");
	ОписаниеКС      = НСтр("ru='Код показателя в графе 1 подраздела 2.1 раздела 2 = ""10001, 10006 - 10012, 10021, 10031 - 10036, 10038 - 10040, 20003 - 20005""'");
	ОписаниеОшибки  = НСтр("ru='Неверно указан код показателя в графе 1 подраздела 2.1 раздела 2'");
	Р21Ст1Гр01 = ПоказательПоСтроке("Р21Ст1Гр01");
	ДанныеПоказателей = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить();
	СтраницыРаздела2 = ДанныеПоказателей.ДанныеМногостраничныхРазделов.Раздел2;
	Для Каждого СтраницаР2 Из СтраницыРаздела2 Цикл
		ДанныеСтраницыР2 = СтраницаР2.Данные;
		НомерСтраницыР2Стр = СтрокаЧГ0(СтраницыРаздела2.Индекс(СтраницаР2) + 1);
		КолвоСтрокВМногострочнойЧасти = КоличествоСтрок(ДанныеСтраницыР2, "П000210000101_");
		Для Инд = 1 По КолвоСтрокВМногострочнойЧасти Цикл
			ВставитьЗначениеМногострочногоПоказателя(ДанныеСтраницыР2, Р21Ст1Гр01, Инд);
			Если НЕ ЗначениеЗаполнено(Р21Ст1Гр01.Значение) Тогда
				Продолжить;
			КонецЕсли;
			СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
			ЗарегистрироватьФормулуДляРасшифровки(ОписаниеКС);
			ВнестиПоказательВРасшифровку(Р21Ст1Гр01, "Раздел2", НомерСтраницыР2Стр);
			КСВыполнено = КодНайден(Р21Ст1Гр01.Значение,
				"10001,10006,10007,10008,10009,10010,10011,10012,10021,10022,10023,10024,10025,10026,10027,10028,10029,10030,10031,10033,10034,10035,10036,10037,10038,10039,10040,20003,20004,20005");
			Расшифровка = ?(ЗначениеЗаполнено(Р21Ст1Гр01.ЗначениеСтр), """" + Р21Ст1Гр01.ЗначениеСтр + """", "[ ]")
				+ " = ""10001, 10006 - 10012, 10021, 10031 - 10036, 10038 - 10040, 20003 - 20005""";
			Если КСВыполнено Тогда
				ЭтоОшибка = Ложь;
				ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
			Иначе
				ЭтоОшибка = Истина;
				ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
			КонецЕсли;
			ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, ЭтоОшибка,
				ОписаниеОшибки,);
		КонецЦикла;
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_2_2_v18(СтруктураРезультата)
	ОбщееЧислоОшибок    = СтруктураРезультата.КоличествоНайденныхОшибок;
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок;
	СтруктураОшибок     = СтруктураРезультата.СтруктураОшибок;
	ТекстФормулы    = НСтр("ru='Проверка раздела 2 (КС 2.2)'");
	ОписаниеКС      = НСтр("ru='Код показателя в графе 1 подраздела 2.1 раздела 2 = ""10001, 10006 - 10012, 10021, 10031 - 10036, 10038 - 10043, 20003 - 20005, 20009, 20011, 20013, 20015""'");
	ОписаниеОшибки  = НСтр("ru='Неверно указан код показателя в графе 1 подраздела 2.1 раздела 2'");
	Р21Ст1Гр01 = ПоказательПоСтроке("Р21Ст1Гр01");
	ДанныеПоказателей = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить();
	СтраницыРаздела2 = ДанныеПоказателей.ДанныеМногостраничныхРазделов.Раздел2;
	КодыПоказателей_Раздел21 = ПолучитьСтрокуИзСпискаВыбора("КодыПоказателей_Раздел21_20180101");
	Для Каждого СтраницаР2 Из СтраницыРаздела2 Цикл
		ДанныеСтраницыР2 = СтраницаР2.Данные;
		НомерСтраницыР2Стр = СтрокаЧГ0(СтраницыРаздела2.Индекс(СтраницаР2) + 1);
		КолвоСтрокВМногострочнойЧасти = КоличествоСтрок(ДанныеСтраницыР2, "П000210000101_");
		Для Инд = 1 По КолвоСтрокВМногострочнойЧасти Цикл
			ВставитьЗначениеМногострочногоПоказателя(ДанныеСтраницыР2, Р21Ст1Гр01, Инд);
			Если НЕ ЗначениеЗаполнено(Р21Ст1Гр01.Значение) Тогда
				Продолжить;
			КонецЕсли;
			СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
			ЗарегистрироватьФормулуДляРасшифровки(ОписаниеКС);
			ВнестиПоказательВРасшифровку(Р21Ст1Гр01, "Раздел2", НомерСтраницыР2Стр);
			КСВыполнено = КодНайден(Р21Ст1Гр01.Значение, КодыПоказателей_Раздел21);
			Расшифровка = ?(ЗначениеЗаполнено(Р21Ст1Гр01.ЗначениеСтр), """" + Р21Ст1Гр01.ЗначениеСтр + """", "[ ]")
				+ " = ""10001, 10006 - 10012, 10021, 10031 - 10036, 10038 - 10043, 20003 - 20005, 20009, 20011, 20013, 20015""";
			Если КСВыполнено Тогда
				ЭтоОшибка = Ложь;
				ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
			Иначе
				ЭтоОшибка = Истина;
				ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
			КонецЕсли;
			ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, 
				Расшифровка, ЭтоОшибка, ОписаниеОшибки);
		КонецЦикла;
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_2_2_v19(СтруктураРезультата)
	ОбщееЧислоОшибок    = СтруктураРезультата.КоличествоНайденныхОшибок;
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок;
	СтруктураОшибок     = СтруктураРезультата.СтруктураОшибок;
	ТекстФормулы    = НСтр("ru='Проверка раздела 2 (КС 2.2)'");
	ОписаниеКС      = НСтр("ru='Код показателя в графе 1 подраздела 2.1 раздела 2 = ""10001, 10006 - 10012, 10021, 10031 - 10036, 10038 - 10047, 20003 - 20005, 20009, 20011, 20013, 20015""'");
	ОписаниеОшибки  = НСтр("ru='Неверно указан код показателя в графе 1 подраздела 2.1 раздела 2'");
	Р21Ст1Гр01 = ПоказательПоСтроке("Р21Ст1Гр01");
	ДанныеПоказателей = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить();
	СтраницыРаздела2 = ДанныеПоказателей.ДанныеМногостраничныхРазделов.Раздел2;
	КодыПоказателей_Раздел21 = ПолучитьСтрокуИзСпискаВыбора("КодыПоказателей_Раздел21_20190101");
	Для Каждого СтраницаР2 Из СтраницыРаздела2 Цикл
		ДанныеСтраницыР2 = СтраницаР2.Данные;
		НомерСтраницыР2Стр = СтрокаЧГ0(СтраницыРаздела2.Индекс(СтраницаР2) + 1);
		КолвоСтрокВМногострочнойЧасти = КоличествоСтрок(ДанныеСтраницыР2, "П000210000101_");
		Для Инд = 1 По КолвоСтрокВМногострочнойЧасти Цикл
			ВставитьЗначениеМногострочногоПоказателя(ДанныеСтраницыР2, Р21Ст1Гр01, Инд);
			Если НЕ ЗначениеЗаполнено(Р21Ст1Гр01.Значение) Тогда
				Продолжить;
			КонецЕсли;
			СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
			ЗарегистрироватьФормулуДляРасшифровки(ОписаниеКС);
			ВнестиПоказательВРасшифровку(Р21Ст1Гр01, "Раздел2", НомерСтраницыР2Стр);
			КСВыполнено = КодНайден(Р21Ст1Гр01.Значение, КодыПоказателей_Раздел21);
			Расшифровка = ?(ЗначениеЗаполнено(Р21Ст1Гр01.ЗначениеСтр), """" + Р21Ст1Гр01.ЗначениеСтр + """", "[ ]")
				+ " = ""10001, 10006 - 10012, 10021, 10031 - 10036, 10038 - 10047, 20003 - 20005, 20009, 20011, 20013, 20015""";
			Если КСВыполнено Тогда
				ЭтоОшибка = Ложь;
				ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
			Иначе
				ЭтоОшибка = Истина;
				ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
			КонецЕсли;
			ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, 
				Расшифровка, ЭтоОшибка, ОписаниеОшибки);
		КонецЦикла;
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_2_3(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка раздела 2 (КС 2.3)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст. 202 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Графа 3 подраздела 2.1 раздела 2 (по соответствующему подакцизному товару (строка 010 раздела 2) '") +
		НСтр("ru='и соответствующему коду показателя (графа 1 подраздела 2.1 раздела 2)) = графа 2 подраздела 2.1 '") +
		НСтр("ru='раздела 2 х ставка акциза'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru='Страница %1, код товара %2, код операции %3'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = %2 х %3 Итог [%4]'"));
	Заголовки.Вставить("ОписаниеОшибки"		, 
		НСтр("ru='Допущена ошибка при определении суммы акциза в подразделе 2.1 раздела 2'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = мДанныеОтчета.ДанныеКС.ВТ;
	Запрос.Текст =
	
	"ВЫБРАТЬ
	|	ВТ_Раздел21.НомерСтраницы КАК НомерСтраницы,
	|	ВТ_Раздел21.НомерСтроки КАК НомерСтроки,
	|	ВТ_Раздел21.КодТовара КАК КодТовара,
	|	ВТ_Раздел21.НомерОперации КАК НомерОперации,
	|	ВТ_Раздел21.Р21Ст1Гр02 КАК Р21Ст1Гр02,
	|	ВТ_Раздел21.Р21Ст1Гр03 КАК Р21Ст1Гр03,
	|	ВТ_Раздел21.Ставка КАК Ставка,
	|	ВТ_Раздел21.ЕдИзм КАК ЕдИзм
	|ИЗ
	|	ВТ_Раздел21 КАК ВТ_Раздел21
	|ГДЕ
	|	ВТ_Раздел21.СтавкаНайдена
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтраницы,
	|	НомерСтроки";	
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Настройки.Вставить("ДопСведенияПараметры", Новый Структура("Страница, Товар, Операция", 
			Выборка.НомерСтраницы, Выборка.КодТовара, Выборка.НомерОперации));
		ЗарегистрироватьФормулу(Настройки);
			
		Показатели = ЗаполнитьПоказатели("Р21Ст1Гр02, Р21Ст1Гр03", Выборка, Выборка.НомерСтроки, Истина);
		Дополнение = "Код товара " + Выборка.КодТовара + " -> ставка " + Выборка.Ставка + " руб за 1 " + Выборка.ЕдИзм;
		ДобавитьИнфоКПредставлениюПоказателя(Показатели.Р21Ст1Гр02, Дополнение);
		РасшифроватьПоказатели(Показатели, Настройки, "Раздел2", Выборка.НомерСтраницы);
		
		РасчетнаяСумма = Показатели.Р21Ст1Гр02.Значение * Выборка.Ставка;
		Настройки.ЭтоОшибка		= Не РасчетнаяСумма = Показатели.Р21Ст1Гр03.Значение;
		Настройки.Расшифровка	= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки, 
			Показатели.Р21Ст1Гр03.ЗначениеСтр, Показатели.Р21Ст1Гр02.ЗначениеСтр, Выборка.Ставка, РасчетнаяСумма);
		ДополнитьСтруктуруОшибок(Настройки);
	КонецЦикла;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_2_4(СтруктураРезультата)
	ОбщееЧислоОшибок    = СтруктураРезультата.КоличествоНайденныхОшибок;
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок;
	СтруктураОшибок     = СтруктураРезультата.СтруктураОшибок;
	ТекстФормулы    = НСтр("ru='Проверка раздела 2 (КС 2.4)'");
	ОписаниеКС      = НСтр("ru='Код показателя в графе 1 подраздела 2.2 раздела 2 = ""30001 - 30002, 30006 - 30007, 30020 - 30032""'");
	ОписаниеОшибки  = НСтр("ru='Неверно указан код показателя в графе 1 подраздела 2.2 раздела 2'");
	Р22Ст1Гр01 = ПоказательПоСтроке("Р22Ст1Гр01");
	ДанныеПоказателей = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить();
	СтраницыРаздела2 = ДанныеПоказателей.ДанныеМногостраничныхРазделов.Раздел2;
	Для Каждого СтраницаР2 Из СтраницыРаздела2 Цикл
		ДанныеСтраницыР2 = СтраницаР2.Данные;
		НомерСтраницыР2Стр = СтрокаЧГ0(СтраницыРаздела2.Индекс(СтраницаР2) + 1);
		КолвоСтрокВМногострочнойЧасти = КоличествоСтрок(ДанныеСтраницыР2, "П000220000101_");
		Для Инд = 1 По КолвоСтрокВМногострочнойЧасти Цикл
			ВставитьЗначениеМногострочногоПоказателя(ДанныеСтраницыР2, Р22Ст1Гр01, Инд);
			Если НЕ ЗначениеЗаполнено(Р22Ст1Гр01.Значение) Тогда
				Продолжить;
			КонецЕсли;
			СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
			ЗарегистрироватьФормулуДляРасшифровки(ОписаниеКС);
			ВнестиПоказательВРасшифровку(Р22Ст1Гр01, "Раздел2", НомерСтраницыР2Стр);
			КСВыполнено = КодНайден(Р22Ст1Гр01.Значение,
				"30001,30002,30006,30007,30020,30021,30022,30023,30024,30025,30026,30027,30028,30029,30030,30031,30032");
			Расшифровка = ?(ЗначениеЗаполнено(Р22Ст1Гр01.ЗначениеСтр), """" + Р22Ст1Гр01.ЗначениеСтр + """", "[ ]")
				+ " = ""30001 - 30002, 30006 - 30007, 30020 - 30032""";
			Если КСВыполнено Тогда
				ЭтоОшибка = Ложь;
				ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
			Иначе
				ЭтоОшибка = Истина;
				ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
			КонецЕсли;
			ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, ЭтоОшибка,
				ОписаниеОшибки,);
		КонецЦикла;
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_2_4_v18(СтруктураРезультата)
	ОбщееЧислоОшибок    = СтруктураРезультата.КоличествоНайденныхОшибок;
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок;
	СтруктураОшибок     = СтруктураРезультата.СтруктураОшибок;
	ТекстФормулы    = НСтр("ru='Проверка раздела 2 (КС 2.4)'");
	ОписаниеКС      = НСтр("ru='Код показателя в графе 1 подраздела 2.2 раздела 2 = ""30001 - 30002, 30006 - 30007, 30020 - 30034""'");
	ОписаниеОшибки  = НСтр("ru='Неверно указан код показателя в графе 1 подраздела 2.2 раздела 2'");
	Р22Ст1Гр01 = ПоказательПоСтроке("Р22Ст1Гр01");
	ДанныеПоказателей = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить();
	СтраницыРаздела2 = ДанныеПоказателей.ДанныеМногостраничныхРазделов.Раздел2;
	КодыПоказателей_Раздел22 = ПолучитьСтрокуИзСпискаВыбора("КодыПоказателей_Раздел22_20180101");
	Для Каждого СтраницаР2 Из СтраницыРаздела2 Цикл
		ДанныеСтраницыР2 = СтраницаР2.Данные;
		НомерСтраницыР2Стр = СтрокаЧГ0(СтраницыРаздела2.Индекс(СтраницаР2) + 1);
		КолвоСтрокВМногострочнойЧасти = КоличествоСтрок(ДанныеСтраницыР2, "П000220000101_");
		Для Инд = 1 По КолвоСтрокВМногострочнойЧасти Цикл
			ВставитьЗначениеМногострочногоПоказателя(ДанныеСтраницыР2, Р22Ст1Гр01, Инд);
			Если НЕ ЗначениеЗаполнено(Р22Ст1Гр01.Значение) Тогда
				Продолжить;
			КонецЕсли;
			СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
			ЗарегистрироватьФормулуДляРасшифровки(ОписаниеКС);
			ВнестиПоказательВРасшифровку(Р22Ст1Гр01, "Раздел2", НомерСтраницыР2Стр);
			КСВыполнено = КодНайден(Р22Ст1Гр01.Значение, КодыПоказателей_Раздел22);
			Расшифровка = ?(ЗначениеЗаполнено(Р22Ст1Гр01.ЗначениеСтр), """" + Р22Ст1Гр01.ЗначениеСтр + """", "[ ]")
				+ " = ""30001 - 30002, 30006 - 30007, 30020 - 30034""";
			Если КСВыполнено Тогда
				ЭтоОшибка = Ложь;
				ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
			Иначе
				ЭтоОшибка = Истина;
				ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
			КонецЕсли;
			ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, 
				Расшифровка, ЭтоОшибка, ОписаниеОшибки);
		КонецЦикла;
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_2_4_v19(СтруктураРезультата)
	ОбщееЧислоОшибок    = СтруктураРезультата.КоличествоНайденныхОшибок;
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок;
	СтруктураОшибок     = СтруктураРезультата.СтруктураОшибок;
	ТекстФормулы    = НСтр("ru='Проверка раздела 2 (КС 2.4)'");
	ОписаниеКС      = НСтр("ru='Код показателя в графе 1 подраздела 2.2 раздела 2 = ""30001 - 30002, 30006 - 30007, 30020 - 30041""'");
	ОписаниеОшибки  = НСтр("ru='Неверно указан код показателя в графе 1 подраздела 2.2 раздела 2'");
	Р22Ст1Гр01 = ПоказательПоСтроке("Р22Ст1Гр01");
	ДанныеПоказателей = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить();
	СтраницыРаздела2 = ДанныеПоказателей.ДанныеМногостраничныхРазделов.Раздел2;
	КодыПоказателей_Раздел22 = ПолучитьСтрокуИзСпискаВыбора("КодыПоказателей_Раздел22_20190101");
	Для Каждого СтраницаР2 Из СтраницыРаздела2 Цикл
		ДанныеСтраницыР2 = СтраницаР2.Данные;
		НомерСтраницыР2Стр = СтрокаЧГ0(СтраницыРаздела2.Индекс(СтраницаР2) + 1);
		КолвоСтрокВМногострочнойЧасти = КоличествоСтрок(ДанныеСтраницыР2, "П000220000101_");
		Для Инд = 1 По КолвоСтрокВМногострочнойЧасти Цикл
			ВставитьЗначениеМногострочногоПоказателя(ДанныеСтраницыР2, Р22Ст1Гр01, Инд);
			Если НЕ ЗначениеЗаполнено(Р22Ст1Гр01.Значение) Тогда
				Продолжить;
			КонецЕсли;
			СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
			ЗарегистрироватьФормулуДляРасшифровки(ОписаниеКС);
			ВнестиПоказательВРасшифровку(Р22Ст1Гр01, "Раздел2", НомерСтраницыР2Стр);
			КСВыполнено = КодНайден(Р22Ст1Гр01.Значение, КодыПоказателей_Раздел22);
			Расшифровка = ?(ЗначениеЗаполнено(Р22Ст1Гр01.ЗначениеСтр), """" + Р22Ст1Гр01.ЗначениеСтр + """", "[ ]")
				+ " = ""30001 - 30002, 30006 - 30007, 30020 - 30041""";
			Если КСВыполнено Тогда
				ЭтоОшибка = Ложь;
				ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
			Иначе
				ЭтоОшибка = Истина;
				ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
			КонецЕсли;
			ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, 
				Расшифровка, ЭтоОшибка, ОписаниеОшибки);
		КонецЦикла;
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_2_5(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка раздела 2 (КС 2.5)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст. 202 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Графа 1 подраздела 2.3 раздела 2 должна иметь значения ""40001"" или ""40002""'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru='Страница %1, код товара %2'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = 40001 или 40002'"));
	Заголовки.Вставить("ОписаниеОшибки"		, 
		НСтр("ru='Неверно указан код показателя в графе 1 подраздела 2.3 раздела 2'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	
	Данные = Новый Структура("Р23Ст1Гр01, Р23Ст2Гр01", "40001", "40002");
	МассивЗначений = Новый Массив;
	МассивЗначений.Добавить("40001");
	МассивЗначений.Добавить("40002");
	
	Раздел2 = СохраненныеДанныеОтчета.ДанныеМногостраничныхРазделов.Раздел2;
	Для каждого Страница Из Раздел2 Цикл
		
		КодТовара	= ЗаполнитьПоказатели("Р2Ст10Гр03", Страница.Данные);		
		Показатели	= ЗаполнитьПоказатели("Р23Ст1Гр01, Р23Ст2Гр01", Данные,, Истина);
		НомерСтраницы = Раздел2.Индекс(Страница) + 1;
		
		Для каждого Элемент Из Данные Цикл
			Настройки.Вставить("ДопСведенияПараметры", Новый Структура("Страница, Товар", 
				НомерСтраницы, КодТовара.Р2Ст10Гр03.Значение));
			ЗарегистрироватьФормулу(Настройки);
			РасшифроватьПоказатели(Показатели, Настройки, "Раздел2", НомерСтраницы, Элемент.Ключ);
			Настройки.ЭтоОшибка		= МассивЗначений.Найти(Показатели[Элемент.Ключ].Значение) = Неопределено;
			Настройки.Расшифровка	= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки, 
				Показатели[Элемент.Ключ].Значение);
			ДополнитьСтруктуруОшибок(Настройки);
		КонецЦикла;
	КонецЦикла;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_2_6(СтруктураРезультата)
	ОбщееЧислоОшибок    = СтруктураРезультата.КоличествоНайденныхОшибок;
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок;
	СтруктураОшибок     = СтруктураРезультата.СтруктураОшибок;
	ТекстФормулы    = НСтр("ru='Проверка раздела 2 (КС 2.6)'");
	ОписаниеКС      = НСтр("ru='Сумма акциза в графе 2 подраздела 2.3 раздела 2 по коду графы 1 ""40001"" = Сумма акциза в графе 3 подраздела 2.1 раздела 2 - Сумма вычета в графе 3 подраздела 2.2 раздела 2, если Сумма акциза в графе 3 подраздела 2.1 раздела 2 >= Сумма вычета в графе 3 подраздела 2.2 раздела 2 '");
	ОписаниеОшибки  = НСтр("ru='Допущена ошибка при определении суммы акциза, подлежащей уплате в бюджет либо начисленной к уменьшению в графе 2 подраздела 2.3 раздела 2'");
	Р23Ст1Гр02 = ПоказательПоСтроке("Р23Ст1Гр02");
	Р21Ст1Гр03 = ПоказательПоСтроке("Р21Ст1Гр03");
	Р22Ст1Гр03 = ПоказательПоСтроке("Р22Ст1Гр03");
	Р21Ст1Гр03 = ПоказательПоСтроке("Р21Ст1Гр03");
	Р22Ст1Гр03 = ПоказательПоСтроке("Р22Ст1Гр03");
	ДанныеПоказателей = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить();
	СтраницыРаздела2 = ДанныеПоказателей.ДанныеМногостраничныхРазделов.Раздел2;
	Для Каждого СтраницаР2 Из СтраницыРаздела2 Цикл
		ДанныеСтраницыР2 = СтраницаР2.Данные;
		НомерСтраницыР2Стр = СтрокаЧГ0(СтраницыРаздела2.Индекс(СтраницаР2) + 1);
		ВставитьЗначениеПоказателя(ДанныеСтраницыР2, Р23Ст1Гр02);
		СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
		ЗарегистрироватьФормулуДляРасшифровки(ОписаниеКС);
		ВнестиПоказательВРасшифровку(Р23Ст1Гр02, "Раздел2", НомерСтраницыР2Стр);
		КолвоСтрокВМногострочнойЧасти = КоличествоСтрок(ДанныеСтраницыР2, "П000210000103_");
		СуммаР21Ст1Гр03 = 0;
		СуммаР21Ст1Гр03Стр = "";
		Для Инд = 1 По КолвоСтрокВМногострочнойЧасти Цикл
			ВставитьЗначениеМногострочногоПоказателя(ДанныеСтраницыР2, Р21Ст1Гр03, Инд);
			ВнестиПоказательВРасшифровку(Р21Ст1Гр03, "Раздел2", НомерСтраницыР2Стр);
			СуммаР21Ст1Гр03 = СуммаР21Ст1Гр03 + Р21Ст1Гр03.Значение;
			СуммаР21Ст1Гр03Стр = СуммаР21Ст1Гр03Стр + Р21Ст1Гр03.ЗначениеСтр + " + ";
		КонецЦикла;
		КолвоСтрокВМногострочнойЧасти = КоличествоСтрок(ДанныеСтраницыР2, "П000220000103_");
		СуммаР22Ст1Гр03 = 0;
		СуммаР22Ст1Гр03Стр = "";
		Для Инд = 1 По КолвоСтрокВМногострочнойЧасти Цикл
			ВставитьЗначениеМногострочногоПоказателя(ДанныеСтраницыР2, Р22Ст1Гр03, Инд);
			ВнестиПоказательВРасшифровку(Р22Ст1Гр03, "Раздел2", НомерСтраницыР2Стр);
			СуммаР22Ст1Гр03 = СуммаР22Ст1Гр03 + Р22Ст1Гр03.Значение;
			СуммаР22Ст1Гр03Стр = СуммаР22Ст1Гр03Стр + Р22Ст1Гр03.ЗначениеСтр + " + ";
		КонецЦикла;
		КС = ПоказателиКС(Р23Ст1Гр02.Значение, СуммаР21Ст1Гр03 - СуммаР22Ст1Гр03);
		Расшифровка = КС.ЛеваяЧастьСтр + " = (" + РасшифровкаВСтр(СуммаР21Ст1Гр03СтР) + ") - ("
			+ РасшифровкаВСтр(СуммаР22Ст1Гр03Стр) + ") Итог [" + КС.ПраваяЧастьСтр + "], когда " + Строка(СуммаР21Ст1Гр03)
			+ " >= " + Строка(СуммаР22Ст1Гр03);
		УсловиеВыполнено = (СуммаР21Ст1Гр03 >= СуммаР22Ст1Гр03);
		Если НЕ УсловиеВыполнено ИЛИ (УсловиеВыполнено И КС.ЛеваяЧасть = КС.ПраваяЧасть) Тогда
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
		Иначе
			ЭтоОшибка = Истина;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
		КонецЕсли;
		ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, ЭтоОшибка,
			ОписаниеОшибки,);
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_2_7(СтруктураРезультата)
	ОбщееЧислоОшибок    = СтруктураРезультата.КоличествоНайденныхОшибок;
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок;
	СтруктураОшибок     = СтруктураРезультата.СтруктураОшибок;
	ТекстФормулы    = НСтр("ru='Проверка раздела 2 (КС 2.7)'");
	ОписаниеКС      = НСтр("ru='Сумма акциза в графе 2 подраздела 2.3 раздела 2 по коду графы 1 ""40002"" = Сумма вычета в графе 3 подраздела 2.2 раздела 2 - Сумма акциза в графе 3 подраздела 2.1 раздела 2, если Сумма акциза в графе 3 подраздела 2.1 раздела 2 < Сумма вычета в графе 3 подраздела 2.2 раздела 2 '");
	ОписаниеОшибки  = НСтр("ru='Допущена ошибка при определении суммы акциза, подлежащей уплате в бюджет либо начисленной к уменьшению в графе 2 подраздела 2.3 раздела 2'");
	Р23Ст2Гр02 = ПоказательПоСтроке("Р23Ст2Гр02");
	Р22Ст1Гр03 = ПоказательПоСтроке("Р22Ст1Гр03");
	Р21Ст1Гр03 = ПоказательПоСтроке("Р21Ст1Гр03");
	ДанныеПоказателей = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить();
	СтраницыРаздела2 = ДанныеПоказателей.ДанныеМногостраничныхРазделов.Раздел2;
	Для Каждого СтраницаР2 Из СтраницыРаздела2 Цикл
		ДанныеСтраницыР2 = СтраницаР2.Данные;
		НомерСтраницыР2Стр = СтрокаЧГ0(СтраницыРаздела2.Индекс(СтраницаР2) + 1);
		ВставитьЗначениеПоказателя(ДанныеСтраницыР2, Р23Ст2Гр02);
		СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
		ЗарегистрироватьФормулуДляРасшифровки(ОписаниеКС);
		ВнестиПоказательВРасшифровку(Р23Ст2Гр02, "Раздел2", НомерСтраницыР2Стр);
		КолвоСтрокВМногострочнойЧасти = КоличествоСтрок(ДанныеСтраницыР2, "П000220000103_");
		СуммаР22Ст1Гр03 = 0;
		СуммаР22Ст1Гр03Стр = "";
		Для Инд = 1 По КолвоСтрокВМногострочнойЧасти Цикл
			ВставитьЗначениеМногострочногоПоказателя(ДанныеСтраницыР2, Р22Ст1Гр03, Инд);
			ВнестиПоказательВРасшифровку(Р22Ст1Гр03, "Раздел2", НомерСтраницыР2Стр);
			СуммаР22Ст1Гр03 = СуммаР22Ст1Гр03 + Р22Ст1Гр03.Значение;
			СуммаР22Ст1Гр03Стр = СуммаР22Ст1Гр03Стр + Р22Ст1Гр03.ЗначениеСтр + " + ";
		КонецЦикла;
		КолвоСтрокВМногострочнойЧасти = КоличествоСтрок(ДанныеСтраницыР2, "П000210000103_");
		СуммаР21Ст1Гр03 = 0;
		СуммаР21Ст1Гр03Стр = "";
		Для Инд = 1 По КолвоСтрокВМногострочнойЧасти Цикл
			ВставитьЗначениеМногострочногоПоказателя(ДанныеСтраницыР2, Р21Ст1Гр03, Инд);
			ВнестиПоказательВРасшифровку(Р21Ст1Гр03, "Раздел2", НомерСтраницыР2Стр);
			СуммаР21Ст1Гр03 = СуммаР21Ст1Гр03 + Р21Ст1Гр03.Значение;
			СуммаР21Ст1Гр03Стр = СуммаР21Ст1Гр03Стр + Р21Ст1Гр03.ЗначениеСтр + " + ";
		КонецЦикла;
		КС = ПоказателиКС(Р23Ст2Гр02.Значение, СуммаР22Ст1Гр03 - СуммаР21Ст1Гр03);
		Расшифровка = КС.ЛеваяЧастьСтр + " = (" + РасшифровкаВСтр(СуммаР22Ст1Гр03СтР) + ") - ("
			+ РасшифровкаВСтр(СуммаР21Ст1Гр03Стр) + ") Итог [" + КС.ПраваяЧастьСтр + "], когда " + Строка(СуммаР21Ст1Гр03)
			+ " < " + Строка(СуммаР22Ст1Гр03);
		УсловиеВыполнено = (СуммаР21Ст1Гр03 < СуммаР22Ст1Гр03);
		Если НЕ УсловиеВыполнено ИЛИ (УсловиеВыполнено И КС.ЛеваяЧасть = КС.ПраваяЧасть) Тогда
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
		Иначе
			ЭтоОшибка = Истина;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
		КонецЕсли;
		ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, ЭтоОшибка,
			ОписаниеОшибки,);
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_2_8(СтруктураРезультата)
	ОбщееЧислоОшибок    = СтруктураРезультата.КоличествоНайденныхОшибок;
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок;
	СтруктураОшибок     = СтруктураРезультата.СтруктураОшибок;
	ТекстФормулы    = НСтр("ru='Проверка раздела 2 (КС 2.8)'");
	ОписаниеКС      = НСтр("ru='Код показателя в графе 1 подраздела 2.4 раздела 2 = ""20003"" или ""50001""'");
	ОписаниеОшибки  = НСтр("ru='Неверно указан код показателя в графе 1 подраздела 2.4 раздела 2'");
	Р24Ст1Гр01 = ПоказательПоСтроке("Р24Ст1Гр01");
	ДанныеПоказателей = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить();
	СтраницыРаздела2 = ДанныеПоказателей.ДанныеМногостраничныхРазделов.Раздел2;
	Для Каждого СтраницаР2 Из СтраницыРаздела2 Цикл
		ДанныеСтраницыР2 = СтраницаР2.Данные;
		НомерСтраницыР2Стр = СтрокаЧГ0(СтраницыРаздела2.Индекс(СтраницаР2) + 1);
		КолвоСтрокВМногострочнойЧасти = КоличествоСтрок(ДанныеСтраницыР2, "П000240000101_");
		Для Инд = 1 По КолвоСтрокВМногострочнойЧасти Цикл
			ВставитьЗначениеМногострочногоПоказателя(ДанныеСтраницыР2, Р24Ст1Гр01, Инд);
			Если НЕ ЗначениеЗаполнено(Р24Ст1Гр01.Значение) Тогда
				Продолжить;
			КонецЕсли;
			СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
			ЗарегистрироватьФормулуДляРасшифровки(ОписаниеКС);
			ВнестиПоказательВРасшифровку(Р24Ст1Гр01, "Раздел2", НомерСтраницыР2Стр);
			КСВыполнено = КодНайден(Р24Ст1Гр01.Значение,
				"20003,50001");
			Расшифровка = ?(ЗначениеЗаполнено(Р24Ст1Гр01.ЗначениеСтр), """" + Р24Ст1Гр01.ЗначениеСтр + """", "[ ]")
				+ " = ""20003"" или ""50001""";
			Если КСВыполнено Тогда
				ЭтоОшибка = Ложь;
				ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
			Иначе
				ЭтоОшибка = Истина;
				ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
			КонецЕсли;
			ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, ЭтоОшибка,
				ОписаниеОшибки,);
		КонецЦикла;
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_2_8_v18(СтруктураРезультата)
	ОбщееЧислоОшибок    = СтруктураРезультата.КоличествоНайденныхОшибок;
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок;
	СтруктураОшибок     = СтруктураРезультата.СтруктураОшибок;
	ТекстФормулы    = НСтр("ru='Проверка раздела 2 (КС 2.8)'");
	ОписаниеКС      = НСтр("ru='Код показателя в графе 1 подраздела 2.4 раздела 2 = ""20003, 20009, 20011, 20013, 20015, 50001, 50006 - 50007""'");
	ОписаниеОшибки  = НСтр("ru='Неверно указан код показателя в графе 1 подраздела 2.4 раздела 2'");
	Р24Ст1Гр01 = ПоказательПоСтроке("Р24Ст1Гр01");
	ДанныеПоказателей = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить();
	СтраницыРаздела2 = ДанныеПоказателей.ДанныеМногостраничныхРазделов.Раздел2;
	КодыПоказателей_Раздел24 = ПолучитьСтрокуИзСпискаВыбора("КодыПоказателей_Раздел24_20180101");
	Для Каждого СтраницаР2 Из СтраницыРаздела2 Цикл
		ДанныеСтраницыР2 = СтраницаР2.Данные;
		НомерСтраницыР2Стр = СтрокаЧГ0(СтраницыРаздела2.Индекс(СтраницаР2) + 1);
		КолвоСтрокВМногострочнойЧасти = КоличествоСтрок(ДанныеСтраницыР2, "П000240000101_");
		Для Инд = 1 По КолвоСтрокВМногострочнойЧасти Цикл
			ВставитьЗначениеМногострочногоПоказателя(ДанныеСтраницыР2, Р24Ст1Гр01, Инд);
			Если НЕ ЗначениеЗаполнено(Р24Ст1Гр01.Значение) Тогда
				Продолжить;
			КонецЕсли;
			СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
			ЗарегистрироватьФормулуДляРасшифровки(ОписаниеКС);
			ВнестиПоказательВРасшифровку(Р24Ст1Гр01, "Раздел2", НомерСтраницыР2Стр);
			КСВыполнено = КодНайден(Р24Ст1Гр01.Значение, КодыПоказателей_Раздел24);
			Расшифровка = ?(ЗначениеЗаполнено(Р24Ст1Гр01.ЗначениеСтр), """" + Р24Ст1Гр01.ЗначениеСтр + """", "[ ]")
				+ " = ""20003, 20009, 20011, 20013, 20015, 50001, 50006 - 50007""";
			Если КСВыполнено Тогда
				ЭтоОшибка = Ложь;
				ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
			Иначе
				ЭтоОшибка = Истина;
				ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
			КонецЕсли;
			ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, 
				Расшифровка, ЭтоОшибка, ОписаниеОшибки);
		КонецЦикла;
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_2_9(СтруктураРезультата)
	ОбщееЧислоОшибок    = СтруктураРезультата.КоличествоНайденныхОшибок;
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок;
	СтруктураОшибок     = СтруктураРезультата.СтруктураОшибок;
	ТекстФормулы    = НСтр("ru='Проверка раздела 2 (КС 2.9)'");
	ОписаниеКС      = НСтр("ru='Код показателя в графе 1 подраздела 2.5 раздела 2 = ""20001"" или ""50003""'");
	ОписаниеОшибки  = НСтр("ru='Неверно указан код показателя в графе 1 подраздела 2.5 раздела 2'");
	Р25Ст1Гр01 = ПоказательПоСтроке("Р25Ст1Гр01");
	ДанныеПоказателей = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить();
	СтраницыРаздела2 = ДанныеПоказателей.ДанныеМногостраничныхРазделов.Раздел2;
	Для Каждого СтраницаР2 Из СтраницыРаздела2 Цикл
		ДанныеСтраницыР2 = СтраницаР2.Данные;
		НомерСтраницыР2Стр = СтрокаЧГ0(СтраницыРаздела2.Индекс(СтраницаР2) + 1);
		КолвоСтрокВМногострочнойЧасти = КоличествоСтрок(ДанныеСтраницыР2, "П000250000101_");
		Для Инд = 1 По КолвоСтрокВМногострочнойЧасти Цикл
			ВставитьЗначениеМногострочногоПоказателя(ДанныеСтраницыР2, Р25Ст1Гр01, Инд);
			Если НЕ ЗначениеЗаполнено(Р25Ст1Гр01.Значение) Тогда
				Продолжить;
			КонецЕсли;
			СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
			ЗарегистрироватьФормулуДляРасшифровки(ОписаниеКС);
			ВнестиПоказательВРасшифровку(Р25Ст1Гр01, "Раздел2", НомерСтраницыР2Стр);
			КСВыполнено = КодНайден(Р25Ст1Гр01.Значение,
				"20001,50003");
			Расшифровка = ?(ЗначениеЗаполнено(Р25Ст1Гр01.ЗначениеСтр), """" + Р25Ст1Гр01.ЗначениеСтр + """", "[ ]")
				+ " = ""20001"" или ""50003""";
			Если КСВыполнено Тогда
				ЭтоОшибка = Ложь;
				ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
			Иначе
				ЭтоОшибка = Истина;
				ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
			КонецЕсли;
			ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, ЭтоОшибка,
				ОписаниеОшибки,);
		КонецЦикла;
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_2_9_v18(СтруктураРезультата)
	ОбщееЧислоОшибок    = СтруктураРезультата.КоличествоНайденныхОшибок;
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок;
	СтруктураОшибок     = СтруктураРезультата.СтруктураОшибок;
	ТекстФормулы    = НСтр("ru='Проверка раздела 2 (КС 2.9)'");
	ОписаниеКС      = НСтр("ru='Код показателя в графе 1 подраздела 2.5 раздела 2 = ""20001, 20008, 20010, 20012, 20014, 50003, 50008 - 50011""'");
	ОписаниеОшибки  = НСтр("ru='Неверно указан код показателя в графе 1 подраздела 2.5 раздела 2'");
	Р25Ст1Гр01 = ПоказательПоСтроке("Р25Ст1Гр01");
	ДанныеПоказателей = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить();
	СтраницыРаздела2 = ДанныеПоказателей.ДанныеМногостраничныхРазделов.Раздел2;
	КодыПоказателей_Раздел25 = ПолучитьСтрокуИзСпискаВыбора("КодыПоказателей_Раздел25_20180101");
	Для Каждого СтраницаР2 Из СтраницыРаздела2 Цикл
		ДанныеСтраницыР2 = СтраницаР2.Данные;
		НомерСтраницыР2Стр = СтрокаЧГ0(СтраницыРаздела2.Индекс(СтраницаР2) + 1);
		КолвоСтрокВМногострочнойЧасти = КоличествоСтрок(ДанныеСтраницыР2, "П000250000101_");
		Для Инд = 1 По КолвоСтрокВМногострочнойЧасти Цикл
			ВставитьЗначениеМногострочногоПоказателя(ДанныеСтраницыР2, Р25Ст1Гр01, Инд);
			Если НЕ ЗначениеЗаполнено(Р25Ст1Гр01.Значение) Тогда
				Продолжить;
			КонецЕсли;
			СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
			ЗарегистрироватьФормулуДляРасшифровки(ОписаниеКС);
			ВнестиПоказательВРасшифровку(Р25Ст1Гр01, "Раздел2", НомерСтраницыР2Стр);
			КСВыполнено = КодНайден(Р25Ст1Гр01.Значение, КодыПоказателей_Раздел25);
			Расшифровка = ?(ЗначениеЗаполнено(Р25Ст1Гр01.ЗначениеСтр), """" + Р25Ст1Гр01.ЗначениеСтр + """", "[ ]")
				+ " = ""20001, 20008, 20010, 20012, 20014, 50003, 50008 - 50011""";
			Если КСВыполнено Тогда
				ЭтоОшибка = Ложь;
				ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
			Иначе
				ЭтоОшибка = Истина;
				ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
			КонецЕсли;
			ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, 
				Расшифровка, ЭтоОшибка, ОписаниеОшибки);
		КонецЦикла;
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_2_10(СтруктураРезультата)
	ОбщееЧислоОшибок    = СтруктураРезультата.КоличествоНайденныхОшибок;
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок;
	СтруктураОшибок     = СтруктураРезультата.СтруктураОшибок;
	ТекстФормулы    = НСтр("ru='Проверка раздела 2 (КС 2.10)'");
	ОписаниеКС      = НСтр("ru='Признак наличия банковской гарантии в графе 4 подраздела 2.5 раздела 2 = ""0"" или ""1""'");
	ОписаниеОшибки  = НСтр("ru='Неверно указан признак наличия банковской гарантии в графе 4 подраздела 2.5 раздела 2'");
	Р25Ст1Гр04 = ПоказательПоСтроке("Р25Ст1Гр04");
	ДанныеПоказателей = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить();
	СтраницыРаздела2 = ДанныеПоказателей.ДанныеМногостраничныхРазделов.Раздел2;
	Для Каждого СтраницаР2 Из СтраницыРаздела2 Цикл
		ДанныеСтраницыР2 = СтраницаР2.Данные;
		НомерСтраницыР2Стр = СтрокаЧГ0(СтраницыРаздела2.Индекс(СтраницаР2) + 1);
		КолвоСтрокВМногострочнойЧасти = КоличествоСтрок(ДанныеСтраницыР2, "П000250000101_");
		Для Инд = 1 По КолвоСтрокВМногострочнойЧасти Цикл
			ВставитьЗначениеМногострочногоПоказателя(ДанныеСтраницыР2, Р25Ст1Гр04, Инд);
			Если НЕ ЗначениеЗаполнено(Р25Ст1Гр04.Значение) Тогда
				Продолжить;
			КонецЕсли;
			СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
			ЗарегистрироватьФормулуДляРасшифровки(ОписаниеКС);
			ВнестиПоказательВРасшифровку(Р25Ст1Гр04, "Раздел2", НомерСтраницыР2Стр);
			КСВыполнено = КодНайден(Р25Ст1Гр04.Значение, "0,1");
			Расшифровка = ?(ЗначениеЗаполнено(Р25Ст1Гр04.ЗначениеСтр), """" + Р25Ст1Гр04.ЗначениеСтр + """", "[ ]")
				+ " = ""0"" или ""1""";
			Если КСВыполнено Тогда
				ЭтоОшибка = Ложь;
				ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
			Иначе
				ЭтоОшибка = Истина;
				ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
			КонецЕсли;
			ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, ЭтоОшибка,
				ОписаниеОшибки,);
		КонецЦикла;
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_2_11(СтруктураРезультата)
	ОбщееЧислоОшибок    = СтруктураРезультата.КоличествоНайденныхОшибок;
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок;
	СтруктураОшибок     = СтруктураРезультата.СтруктураОшибок;
	ТекстФормулы    = НСтр("ru='Проверка раздела 2 (КС 2.11)'");
	ОписаниеКС      = НСтр("ru='Код показателя в графе 1 подраздела 2.6 раздела 2 = ""20002"" или ""20004"" или ""50002"" или ""50004""'");
	ОписаниеОшибки  = НСтр("ru='Неверно указан код показателя в графе 1 подраздела 2.6 раздела 2'");
	Р26Ст1Гр01 = ПоказательПоСтроке("Р26Ст1Гр01");
	ДанныеПоказателей = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить();
	СтраницыРаздела2 = ДанныеПоказателей.ДанныеМногостраничныхРазделов.Раздел2;
	Для Каждого СтраницаР2 Из СтраницыРаздела2 Цикл
		ДанныеСтраницыР2 = СтраницаР2.Данные;
		НомерСтраницыР2Стр = СтрокаЧГ0(СтраницыРаздела2.Индекс(СтраницаР2) + 1);
		КолвоСтрокВМногострочнойЧасти = КоличествоСтрок(ДанныеСтраницыР2, "П000260000101_");
		Для Инд = 1 По КолвоСтрокВМногострочнойЧасти Цикл
			ВставитьЗначениеМногострочногоПоказателя(ДанныеСтраницыР2, Р26Ст1Гр01, Инд);
			Если НЕ ЗначениеЗаполнено(Р26Ст1Гр01.Значение) Тогда
				Продолжить;
			КонецЕсли;
			СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
			ЗарегистрироватьФормулуДляРасшифровки(ОписаниеКС);
			ВнестиПоказательВРасшифровку(Р26Ст1Гр01, "Раздел2", НомерСтраницыР2Стр);
			КСВыполнено = КодНайден(Р26Ст1Гр01.Значение, "20002,20004,50002,50004");
			Расшифровка = ?(ЗначениеЗаполнено(Р26Ст1Гр01.ЗначениеСтр), """" + Р26Ст1Гр01.ЗначениеСтр + """", "[ ]")
				+ " = ""20002"", ""20004"", ""50002"", ""50004""";
			Если КСВыполнено Тогда
				ЭтоОшибка = Ложь;
				ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
			Иначе
				ЭтоОшибка = Истина;
				ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
			КонецЕсли;
			ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, ЭтоОшибка,
				ОписаниеОшибки,);
		КонецЦикла;
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_2_12(СтруктураРезультата)
	ОбщееЧислоОшибок    = СтруктураРезультата.КоличествоНайденныхОшибок;
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок;
	СтруктураОшибок     = СтруктураРезультата.СтруктураОшибок;
	ТекстФормулы    = НСтр("ru='Проверка раздела 2 (КС 2.12)'");
	ОписаниеКС      = НСтр("ru='Налоговая база в графе 2 подраздела 2.6 раздела 2 с кодом ""20002"" по графе 1 = Налоговой базе в графе 2 подраздела 2.1 раздела 2 с кодом ""20002"" по графе 1'");
	ОписаниеОшибки  = НСтр("ru='Допущена ошибка при определении налоговой базы акциза в подразделе 2.6 раздела 2'");
	Р26Ст1Гр01 = ПоказательПоСтроке("Р26Ст1Гр01");
	Р26Ст1Гр02 = ПоказательПоСтроке("Р26Ст1Гр02");
	Р21Ст1Гр01 = ПоказательПоСтроке("Р21Ст1Гр01");
	Р21Ст1Гр02 = ПоказательПоСтроке("Р21Ст1Гр02");
	ДанныеПоказателей = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить();
	СтраницыРаздела2 = ДанныеПоказателей.ДанныеМногостраничныхРазделов.Раздел2;
	Для Каждого СтраницаР2 Из СтраницыРаздела2 Цикл
		ДанныеСтраницыР2 = СтраницаР2.Данные;
		НомерСтраницыР2Стр = СтрокаЧГ0(СтраницыРаздела2.Индекс(СтраницаР2) + 1);
		СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
		ЗарегистрироватьФормулуДляРасшифровки(ОписаниеКС);
		КолвоСтрокВМногострочнойЧасти = КоличествоСтрок(ДанныеСтраницыР2, "П000260000101_");
		СуммаР26Ст1Гр02 = 0;
		СуммаР26Ст1Гр02Стр = "";
		Для Инд = 1 По КолвоСтрокВМногострочнойЧасти Цикл
			ВставитьЗначениеМногострочногоПоказателя(ДанныеСтраницыР2, Р26Ст1Гр01, Инд);
			Если Р26Ст1Гр01.Значение <> "20002" Тогда
				Продолжить;
			КонецЕсли;
			ВставитьЗначениеМногострочногоПоказателя(ДанныеСтраницыР2, Р26Ст1Гр02, Инд);
			ВнестиПоказательВРасшифровку(Р26Ст1Гр01, "Раздел2", НомерСтраницыР2Стр);
			ВнестиПоказательВРасшифровку(Р26Ст1Гр02, "Раздел2", НомерСтраницыР2Стр);
			СуммаР26Ст1Гр02 = СуммаР26Ст1Гр02 + Р26Ст1Гр02.Значение;
			СуммаР26Ст1Гр02Стр = СуммаР26Ст1Гр02Стр + Р26Ст1Гр02.ЗначениеСтр + " + ";
		КонецЦикла;
		КолвоСтрокВМногострочнойЧасти = КоличествоСтрок(ДанныеСтраницыР2, "П000210000101_");
		СуммаР21Ст1Гр02 = 0;
		СуммаР21Ст1Гр02Стр = "";
		Для Инд = 1 По КолвоСтрокВМногострочнойЧасти Цикл
			ВставитьЗначениеМногострочногоПоказателя(ДанныеСтраницыР2, Р21Ст1Гр01, Инд);
			Если Р21Ст1Гр01.Значение <> "20002" Тогда
				Продолжить;
			КонецЕсли;
			ВставитьЗначениеМногострочногоПоказателя(ДанныеСтраницыР2, Р21Ст1Гр02, Инд);
			ВнестиПоказательВРасшифровку(Р21Ст1Гр01, "Раздел2", НомерСтраницыР2Стр);
			ВнестиПоказательВРасшифровку(Р21Ст1Гр02, "Раздел2", НомерСтраницыР2Стр);
			СуммаР21Ст1Гр02 = СуммаР21Ст1Гр02 + Р21Ст1Гр02.Значение;
			СуммаР21Ст1Гр02Стр = СуммаР21Ст1Гр02Стр + Р21Ст1Гр02.ЗначениеСтр + " + ";
		КонецЦикла;
		КС = ПоказателиКС(СуммаР26Ст1Гр02, СуммаР21Ст1Гр02);
		Расшифровка = "(" + РасшифровкаВСтр(СуммаР26Ст1Гр02Стр) + ") Итог [" + КС.ЛеваяЧастьСтр + "] = ("
			+ РасшифровкаВСтр(СуммаР21Ст1Гр02Стр) + ") Итог [" + КС.ПраваяЧастьСтр + "]";
		Если КС.ЛеваяЧасть = КС.ПраваяЧасть Тогда
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
		Иначе
			ЭтоОшибка = Истина;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
		КонецЕсли;
		ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, ЭтоОшибка,
			ОписаниеОшибки,);
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_2_13(СтруктураРезультата)
	ОбщееЧислоОшибок    = СтруктураРезультата.КоличествоНайденныхОшибок;
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок;
	СтруктураОшибок     = СтруктураРезультата.СтруктураОшибок;
	ТекстФормулы    = НСтр("ru='Проверка раздела 2 (КС 2.13)'");
	ОписаниеКС      = НСтр("ru='Сумма акциза в графе 3 подраздела 2.6 раздела 2 с кодом ""20004"" по графе 1 = Сумме акциза в графе 3 подраздела 2.1 раздела 2 с кодом ""20004"" по графе 1'");
	ОписаниеОшибки  = НСтр("ru='Допущена ошибка при определении суммы акциза в подразделе 2.6 раздела 2'");
	Р26Ст1Гр01 = ПоказательПоСтроке("Р26Ст1Гр01");
	Р26Ст1Гр03 = ПоказательПоСтроке("Р26Ст1Гр03");
	Р21Ст1Гр01 = ПоказательПоСтроке("Р21Ст1Гр01");
	Р21Ст1Гр03 = ПоказательПоСтроке("Р21Ст1Гр03");
	ДанныеПоказателей = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить();
	СтраницыРаздела2 = ДанныеПоказателей.ДанныеМногостраничныхРазделов.Раздел2;
	Для Каждого СтраницаР2 Из СтраницыРаздела2 Цикл
		ДанныеСтраницыР2 = СтраницаР2.Данные;
		НомерСтраницыР2Стр = СтрокаЧГ0(СтраницыРаздела2.Индекс(СтраницаР2) + 1);
		СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
		ЗарегистрироватьФормулуДляРасшифровки(ОписаниеКС);
		КолвоСтрокВМногострочнойЧасти = КоличествоСтрок(ДанныеСтраницыР2, "П000260000101_");
		СуммаР26Ст1Гр03 = 0;
		СуммаР26Ст1Гр03Стр = "";
		Для Инд = 1 По КолвоСтрокВМногострочнойЧасти Цикл
			ВставитьЗначениеМногострочногоПоказателя(ДанныеСтраницыР2, Р26Ст1Гр01, Инд);
			Если Р26Ст1Гр01.Значение <> "20004" Тогда
				Продолжить;
			КонецЕсли;
			ВставитьЗначениеМногострочногоПоказателя(ДанныеСтраницыР2, Р26Ст1Гр03, Инд);
			ВнестиПоказательВРасшифровку(Р26Ст1Гр01, "Раздел2", НомерСтраницыР2Стр);
			ВнестиПоказательВРасшифровку(Р26Ст1Гр03, "Раздел2", НомерСтраницыР2Стр);
			СуммаР26Ст1Гр03 = СуммаР26Ст1Гр03 + Р26Ст1Гр03.Значение;
			СуммаР26Ст1Гр03Стр = СуммаР26Ст1Гр03Стр + Р26Ст1Гр03.ЗначениеСтр + " + ";
		КонецЦикла;
		КолвоСтрокВМногострочнойЧасти = КоличествоСтрок(ДанныеСтраницыР2, "П000210000101_");
		СуммаР21Ст1Гр03 = 0;
		СуммаР21Ст1Гр03Стр = "";
		Для Инд = 1 По КолвоСтрокВМногострочнойЧасти Цикл
			ВставитьЗначениеМногострочногоПоказателя(ДанныеСтраницыР2, Р21Ст1Гр01, Инд);
			Если Р21Ст1Гр01.Значение <> "20004" Тогда
				Продолжить;
			КонецЕсли;
			ВставитьЗначениеМногострочногоПоказателя(ДанныеСтраницыР2, Р21Ст1Гр03, Инд);
			ВнестиПоказательВРасшифровку(Р21Ст1Гр01, "Раздел2", НомерСтраницыР2Стр);
			ВнестиПоказательВРасшифровку(Р21Ст1Гр03, "Раздел2", НомерСтраницыР2Стр);
			СуммаР21Ст1Гр03 = СуммаР21Ст1Гр03 + Р21Ст1Гр03.Значение;
			СуммаР21Ст1Гр03Стр = СуммаР21Ст1Гр03Стр + Р21Ст1Гр03.ЗначениеСтр + " + ";
		КонецЦикла;
		КС = ПоказателиКС(СуммаР26Ст1Гр03, СуммаР21Ст1Гр03);
		Расшифровка = "(" + РасшифровкаВСтр(СуммаР26Ст1Гр03Стр) + ") Итог [" + КС.ЛеваяЧастьСтр + "] = ("
			+ РасшифровкаВСтр(СуммаР21Ст1Гр03Стр) + ") Итог [" + КС.ПраваяЧастьСтр + "]";
		Если КС.ЛеваяЧасть = КС.ПраваяЧасть Тогда
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
		Иначе
			ЭтоОшибка = Истина;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
		КонецЕсли;
		ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, ЭтоОшибка,
			ОписаниеОшибки,);
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
	КонецЦикла;
КонецПроцедуры

#КонецОбласти

#Область КС_ПроверкиРаздела3

&НаСервере
Процедура ПроверитьКС_3_1(СтруктураРезультата)
	ОбщееЧислоОшибок    = СтруктураРезультата.КоличествоНайденныхОшибок;
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок;
	СтруктураОшибок     = СтруктураРезультата.СтруктураОшибок;
	ТекстФормулы    = НСтр("ru='Проверка раздела 3 (КС 3.1)'");
	ОписаниеКС      = НСтр("ru='Код вида подакцизного товара в строке 010 раздела 3 = ""735""'");
	ОписаниеОшибки  = НСтр("ru='Неверно указан код подакцизного товара в разделе 3'");
	Р3Ст10Гр03 = ПоказательПоСтроке("Р3Ст10Гр03");
	ДанныеПоказателей = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить();
	СтраницыРаздела3 = ДанныеПоказателей.ДанныеМногостраничныхРазделов.Раздел3;
	Для Каждого СтраницаР3 Из СтраницыРаздела3 Цикл
		ДанныеСтраницыР3 = СтраницаР3.Данные;
		НомерСтраницыР3Стр = СтрокаЧГ0(СтраницыРаздела3.Индекс(СтраницаР3) + 1);
		ВставитьЗначениеПоказателя(ДанныеСтраницыР3, Р3Ст10Гр03);
		Если НЕ ЗначениеЗаполнено(Р3Ст10Гр03.Значение) Тогда
			Продолжить;
		КонецЕсли;
		СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
		ЗарегистрироватьФормулуДляРасшифровки(ОписаниеКС);
		ВнестиПоказательВРасшифровку(Р3Ст10Гр03, "Раздел3", НомерСтраницыР3Стр);
		КС = ПоказателиКС(Р3Ст10Гр03.Значение, "735");
		Расшифровка = КС.ЛеваяЧастьСтр + " = " + КС.ПраваяЧастьСтр;
		Если КС.ЛеваяЧасть = КС.ПраваяЧасть Тогда
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
		Иначе
			ЭтоОшибка = Истина;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
		КонецЕсли;
		ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, ЭтоОшибка,
			ОписаниеОшибки,);
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_3_2(СтруктураРезультата)
	ОбщееЧислоОшибок    = СтруктураРезультата.КоличествоНайденныхОшибок;
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок;
	СтруктураОшибок     = СтруктураРезультата.СтруктураОшибок;
	ТекстФормулы    = НСтр("ru='Проверка раздела 3 (КС 3.2)'");
	ОписаниеКС      = НСтр("ru='Код показателя в строке 020 раздела 3 = ""10037""'");
	ОписаниеОшибки  = НСтр("ru='Неверно указан код показателя в разделе 3'");
	Р3Ст20Гр03 = ПоказательПоСтроке("Р3Ст20Гр03");
	ДанныеПоказателей = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить();
	СтраницыРаздела3 = ДанныеПоказателей.ДанныеМногостраничныхРазделов.Раздел3;
	Для Каждого СтраницаР3 Из СтраницыРаздела3 Цикл
		ДанныеСтраницыР3 = СтраницаР3.Данные;
		НомерСтраницыР3Стр = СтрокаЧГ0(СтраницыРаздела3.Индекс(СтраницаР3) + 1);
		ВставитьЗначениеПоказателя(ДанныеСтраницыР3, Р3Ст20Гр03);
		Если НЕ ЗначениеЗаполнено(Р3Ст20Гр03.Значение) Тогда
			Продолжить;
		КонецЕсли;
		СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
		ЗарегистрироватьФормулуДляРасшифровки(ОписаниеКС);
		ВнестиПоказательВРасшифровку(Р3Ст20Гр03, "Раздел3", НомерСтраницыР3Стр);
		КС = ПоказателиКС(Р3Ст20Гр03.Значение, "10037");
		Расшифровка = КС.ЛеваяЧастьСтр + " = " + КС.ПраваяЧастьСтр;
		Если КС.ЛеваяЧасть = КС.ПраваяЧасть Тогда
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
		Иначе
			ЭтоОшибка = Истина;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
		КонецЕсли;
		ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, ЭтоОшибка,
			ОписаниеОшибки,);
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_3_3(СтруктураРезультата)
	ОбщееЧислоОшибок    = СтруктураРезультата.КоличествоНайденныхОшибок;
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок;
	СтруктураОшибок     = СтруктураРезультата.СтруктураОшибок;
	ТекстФормулы    = НСтр("ru='Проверка раздела 3 (КС 3.3)'");
	ОписаниеКС      = НСтр("ru='КБК в строке 030 раздела 3 = КБК в строке 020 раздела 1'");
	ОписаниеОшибки  = НСтр("ru='Для КБК, указанному в разделе 3, по которому уплачивается акциз, не заполнен раздел 1'");
	Р3Ст30Гр03 = ПоказательПоСтроке("Р3Ст30Гр03");
	Р1Ст1Гр01 = ПоказательПоСтроке("Р1Ст1Гр01");
	ДанныеПоказателей = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить();
	СтраницыРаздела3 = ДанныеПоказателей.ДанныеМногостраничныхРазделов.Раздел3;
	СтраницыРаздела1 = ДанныеПоказателей.ДанныеМногостраничныхРазделов.Раздел1;
	Для Каждого СтраницаР3 Из СтраницыРаздела3 Цикл
		ДанныеСтраницыР3 = СтраницаР3.Данные;
		НомерСтраницыР3Стр = СтрокаЧГ0(СтраницыРаздела3.Индекс(СтраницаР3) + 1);
		ВставитьЗначениеПоказателя(ДанныеСтраницыР3, Р3Ст30Гр03);
		Если НЕ ЗначениеЗаполнено(Р3Ст30Гр03.Значение) Тогда
			Продолжить;
		КонецЕсли;
		СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
		ЗарегистрироватьФормулуДляРасшифровки(ОписаниеКС);
		ВнестиПоказательВРасшифровку(Р3Ст30Гр03, "Раздел3", НомерСтраницыР3Стр);
		ЗаполненРаздел1 = Ложь;
		Для Каждого СтраницаР1 Из СтраницыРаздела1 Цикл
			ДанныеСтраницыР1 = СтраницаР1.Данные;
			НомерСтраницыР1Стр = СтрокаЧГ0(СтраницыРаздела1.Индекс(СтраницаР1) + 1);
			КолвоСтрокВМногострочнойЧасти = КоличествоСтрок(ДанныеСтраницыР1, "П000010000101_");
			Для Инд = 1 По КолвоСтрокВМногострочнойЧасти Цикл
				ВставитьЗначениеМногострочногоПоказателя(ДанныеСтраницыР1, Р1Ст1Гр01, Инд);
				Если Р1Ст1Гр01.Значение = Р3Ст30Гр03.Значение Тогда
					ЗаполненРаздел1 = Истина;
					ВнестиПоказательВРасшифровку(Р1Ст1Гр01, "Раздел1", НомерСтраницыР1Стр);
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Если ЗаполненРаздел1 Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если ЗаполненРаздел1 Тогда
			Расшифровка = "По КБК " + "" + Р3Ст30Гр03.ЗначениеСтр + "" + " в строке 030 раздела 3 заполнен раздел 1";
		Иначе
			Расшифровка = "По КБК " + "" + Р3Ст30Гр03.ЗначениеСтр + "" + " в строке 030 раздела 3 не заполнен раздел 1";
		КонецЕсли;
		Если ЗаполненРаздел1 Тогда
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
		Иначе
			ЭтоОшибка = Истина;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
		КонецЕсли;
		ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, ЭтоОшибка,
			ОписаниеОшибки,);
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_3_4(СтруктураРезультата)
	ОбщееЧислоОшибок    = СтруктураРезультата.КоличествоНайденныхОшибок;
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок;
	СтруктураОшибок     = СтруктураРезультата.СтруктураОшибок;
	ТекстФормулы    = НСтр("ru='Проверка раздела 3 (КС 3.4)'");
	ОписаниеКС      = НСтр("ru='Налоговая база в строке 100 раздела 3 = Объем природного газа в строке 060 раздела 3 х Стоимость природного газа в строке 070 раздела 3 - (Сумма таможенных платежей по строке 080 раздела 3 + Расходы на транспортировку по строке 090 раздела 3)'");
	ОписаниеОшибки  = НСтр("ru='Допущена ошибка при определении налоговой базы в разделе 3'");
	Р3Ст100Гр03 = ПоказательПоСтроке("Р3Ст100Гр03");
	Р3Ст60Гр03 = ПоказательПоСтроке("Р3Ст60Гр03");
	Р3Ст70Гр03 = ПоказательПоСтроке("Р3Ст70Гр03");
	Р3Ст80Гр03 = ПоказательПоСтроке("Р3Ст80Гр03");
	Р3Ст90Гр03 = ПоказательПоСтроке("Р3Ст90Гр03");
	ДанныеПоказателей = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить();
	СтраницыРаздела3 = ДанныеПоказателей.ДанныеМногостраничныхРазделов.Раздел3;
	Для Каждого СтраницаР3 Из СтраницыРаздела3 Цикл
		ДанныеСтраницыР3 = СтраницаР3.Данные;
		НомерСтраницыР3Стр = СтрокаЧГ0(СтраницыРаздела3.Индекс(СтраницаР3) + 1);
		ВставитьЗначениеПоказателя(ДанныеСтраницыР3, Р3Ст100Гр03);
		ВставитьЗначениеПоказателя(ДанныеСтраницыР3, Р3Ст60Гр03);
		ВставитьЗначениеПоказателя(ДанныеСтраницыР3, Р3Ст70Гр03);
		ВставитьЗначениеПоказателя(ДанныеСтраницыР3, Р3Ст80Гр03);
		ВставитьЗначениеПоказателя(ДанныеСтраницыР3, Р3Ст90Гр03);
		СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
		ЗарегистрироватьФормулуДляРасшифровки(ОписаниеКС);
		ВнестиПоказательВРасшифровку(Р3Ст100Гр03, "Раздел3", НомерСтраницыР3Стр);
		ВнестиПоказательВРасшифровку(Р3Ст60Гр03, "Раздел3", НомерСтраницыР3Стр);
		ВнестиПоказательВРасшифровку(Р3Ст70Гр03, "Раздел3", НомерСтраницыР3Стр);
		ВнестиПоказательВРасшифровку(Р3Ст80Гр03, "Раздел3", НомерСтраницыР3Стр);
		ВнестиПоказательВРасшифровку(Р3Ст90Гр03, "Раздел3", НомерСтраницыР3Стр);
		КС = ПоказателиКС(Р3Ст100Гр03.Значение, Р3Ст60Гр03.Значение * Р3Ст70Гр03.Значение - (Р3Ст80Гр03.Значение + Р3Ст90Гр03.Значение));
		Расшифровка = КС.ЛеваяЧастьСтр + " = " + Р3Ст60Гр03.ЗначениеСтр + " * " + Р3Ст70Гр03.ЗначениеСтр + " - ("
			+ Р3Ст80Гр03.ЗначениеСтр + " + " + Р3Ст90Гр03.ЗначениеСтр + ") Итог [" + КС.ПраваяЧастьСтр + "]";
		Если КС.ЛеваяЧасть = КС.ПраваяЧасть Тогда
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
		Иначе
			ЭтоОшибка = Истина;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
		КонецЕсли;
		ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, ЭтоОшибка,
			ОписаниеОшибки,);
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_3_6(СтруктураРезультата)
	ОбщееЧислоОшибок    = СтруктураРезультата.КоличествоНайденныхОшибок;
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок;
	СтруктураОшибок     = СтруктураРезультата.СтруктураОшибок;
	ТекстФормулы    = НСтр("ru='Проверка раздела 3 (КС 3.6)'");
	ОписаниеКС      = НСтр("ru='Сумма акциза по строке 110 раздела 3 = сумма акциза к уплате по строке 030 раздела 1 по соответствующему КБК'");
	ОписаниеОшибки  = НСтр("ru='Для суммы акциза по природному газу, указанному в разделе 3, не заполнен раздел 1'");
	Р3Ст110Гр03 = ПоказательПоСтроке("Р3Ст110Гр03");
	Р3Ст30Гр03 = ПоказательПоСтроке("Р3Ст30Гр03");
	Р1Ст1Гр02 = ПоказательПоСтроке("Р1Ст1Гр02");
	Р1Ст1Гр01 = ПоказательПоСтроке("Р1Ст1Гр01");
	ДанныеПоказателей = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить();
	СтраницыРаздела3 = ДанныеПоказателей.ДанныеМногостраничныхРазделов.Раздел3;
	СтраницыРаздела1 = ДанныеПоказателей.ДанныеМногостраничныхРазделов.Раздел1;
	МассивКБК = Новый Массив;
	Для Каждого СтраницаР3 Из СтраницыРаздела3 Цикл
		ДанныеСтраницыР3 = СтраницаР3.Данные;
		НомерСтраницыР3Стр = СтрокаЧГ0(СтраницыРаздела3.Индекс(СтраницаР3) + 1);
		ВставитьЗначениеПоказателя(ДанныеСтраницыР3, Р3Ст30Гр03);
		Если ЗначениеЗаполнено(Р3Ст30Гр03.Значение) И МассивКБК.Найти(Р3Ст30Гр03.Значение) = Неопределено Тогда
			МассивКБК.Добавить(Р3Ст30Гр03.Значение);
		КонецЕсли;
	КонецЦикла;
	Для Каждого КБК Из МассивКБК Цикл
		СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
		ЗарегистрироватьФормулуДляРасшифровки(ОписаниеКС);
		СуммаР3Ст110Гр03 = 0;
		СуммаР3Ст110Гр03Стр = "";
		СуммаР1Ст1Гр02 = 0;
		СуммаР1Ст1Гр02Стр = "";
		Для Каждого СтраницаР3 Из СтраницыРаздела3 Цикл
			ДанныеСтраницыР3 = СтраницаР3.Данные;
			НомерСтраницыР3Стр = СтрокаЧГ0(СтраницыРаздела3.Индекс(СтраницаР3) + 1);
			ВставитьЗначениеПоказателя(ДанныеСтраницыР3, Р3Ст30Гр03);
			Если НЕ КБК = Р3Ст30Гр03.Значение Тогда
				Продолжить;
			КонецЕсли;
			ВнестиПоказательВРасшифровку(Р3Ст30Гр03, "Раздел3", НомерСтраницыР3Стр);
			ВставитьЗначениеПоказателя(ДанныеСтраницыР3, Р3Ст110Гр03);
			ВнестиПоказательВРасшифровку(Р3Ст110Гр03, "Раздел3", НомерСтраницыР3Стр);
			СуммаР3Ст110Гр03 = СуммаР3Ст110Гр03 + Р3Ст110Гр03.Значение;
			СуммаР3Ст110Гр03Стр = СуммаР3Ст110Гр03Стр + Р3Ст110Гр03.ЗначениеСтр + " + ";
		КонецЦикла;
		Для Каждого СтраницаР1 Из СтраницыРаздела1 Цикл
			ДанныеСтраницыР1 = СтраницаР1.Данные;
			НомерСтраницыР1Стр = СтрокаЧГ0(СтраницыРаздела1.Индекс(СтраницаР1) + 1);
			КолвоСтрокВМногострочнойЧасти = КоличествоСтрок(ДанныеСтраницыР1, "П000010000101_");
			Для Инд = 1 По КолвоСтрокВМногострочнойЧасти Цикл
				ВставитьЗначениеМногострочногоПоказателя(ДанныеСтраницыР1, Р1Ст1Гр01, Инд);
				Если НЕ КБК = Р1Ст1Гр01.Значение Тогда
					Продолжить;
				КонецЕсли;
				ВнестиПоказательВРасшифровку(Р1Ст1Гр01, "Раздел1", НомерСтраницыР1Стр);
				ВставитьЗначениеМногострочногоПоказателя(ДанныеСтраницыР1, Р1Ст1Гр02, Инд);
				ВнестиПоказательВРасшифровку(Р1Ст1Гр02, "Раздел1", НомерСтраницыР1Стр);
				СуммаР1Ст1Гр02 = СуммаР1Ст1Гр02 + Р1Ст1Гр02.Значение;
				СуммаР1Ст1Гр02Стр = СуммаР1Ст1Гр02Стр + Р1Ст1Гр02.ЗначениеСтр + " + ";
			КонецЦикла;
		КонецЦикла;
		КС = ПоказателиКС(СуммаР3Ст110Гр03, СуммаР1Ст1Гр02);
		Расшифровка = "По КБК " + КБК + "(" + РасшифровкаВСтр(СуммаР3Ст110Гр03Стр) + ") Итог [" + КС.ЛеваяЧастьСтр + "] = ("
			+ РасшифровкаВСтр(СуммаР1Ст1Гр02Стр) + ") Итог [" + КС.ПраваяЧастьСтр + "]";
		Если КС.ЛеваяЧасть = КС.ПраваяЧасть Тогда
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
		Иначе
			ЭтоОшибка = Истина;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
		КонецЕсли;
		ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, ЭтоОшибка,
			ОписаниеОшибки,);
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
	КонецЦикла;
КонецПроцедуры

#КонецОбласти

#Область КС_ПроверкиРаздела4

&НаСервере
Процедура ПроверитьКС_4_1(СтруктураРезультата)
	ОбщееЧислоОшибок    = СтруктураРезультата.КоличествоНайденныхОшибок;
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок;
	СтруктураОшибок     = СтруктураРезультата.СтруктураОшибок;
	ТекстФормулы    = НСтр("ru='Проверка приложения № 1 (КС 4.1)'");
	ОписаниеКС      = НСтр("ru='Код вида подакцизного товара в строке 010 приложения №1 = 510, 520, 531, 532, '")
		+ НСтр("ru='630, 640, 650, 665, 671, 672, 673, 674, 676, 677'");
	ОписаниеОшибки  = НСтр("ru='Неверно указан код вида подакцизного товара в Приложении N 1'");
	П101Ст10Гр03 = ПоказательПоСтроке("П101Ст10Гр03");
	ДанныеПоказателей = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить();
	СтраницыПриложения1 = ДанныеПоказателей.ДанныеМногостраничныхРазделов.Приложение1;
	КодыПоказателей_Приложение1 = 
		ПолучитьСтрокуИзСпискаВыбора("КодыВидаПодакцизныхТоваров_БезПриродногоГаза");
	Для Каждого СтраницаП1 Из СтраницыПриложения1 Цикл
		ДанныеСтраницыП1 = СтраницаП1.Данные;
		НомерСтраницыП1Стр = СтрокаЧГ0(СтраницыПриложения1.Индекс(СтраницаП1) + 1);
		ВставитьЗначениеПоказателя(ДанныеСтраницыП1, П101Ст10Гр03);
		Если НЕ ЗначениеЗаполнено(П101Ст10Гр03.Значение) Тогда
			Продолжить;
		КонецЕсли;
		СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
		ЗарегистрироватьФормулуДляРасшифровки(ОписаниеКС);
		ВнестиПоказательВРасшифровку(П101Ст10Гр03, "Приложение1", НомерСтраницыП1Стр);
		КСВыполнено = КодНайден(П101Ст10Гр03.Значение, КодыПоказателей_Приложение1);
		Расшифровка = ?(ЗначениеЗаполнено(П101Ст10Гр03.ЗначениеСтр), """" + П101Ст10Гр03.ЗначениеСтр + """", "[ ]")
			+ " = 510, 520, 531, 532, 630, 640, 650, 665, 671, 672, 673, 674, 676, 677";
		Если КСВыполнено Тогда
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
		Иначе
			ЭтоОшибка = Истина;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
		КонецЕсли;
		ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, 
			Расшифровка, ЭтоОшибка, ОписаниеОшибки);
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_4_1_v18(СтруктураРезультата)
	ОбщееЧислоОшибок    = СтруктураРезультата.КоличествоНайденныхОшибок;
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок;
	СтруктураОшибок     = СтруктураРезультата.СтруктураОшибок;
	ТекстФормулы    = НСтр("ru='Проверка приложения № 1 (КС 4.1)'");
	ОписаниеКС      = НСтр("ru='Код вида подакцизного товара в строке 010 приложения №1 = 510, 520, 531, 532, 533, '")
		+ НСтр("ru='534, 535, 536, 630, 640, 650, 665, 671, 672, 673, 674, 676, 677'");
	ОписаниеОшибки  = НСтр("ru='Неверно указан код вида подакцизного товара в Приложении N 1'");
	П101Ст10Гр03 = ПоказательПоСтроке("П101Ст10Гр03");
	ДанныеПоказателей = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить();
	СтраницыПриложения1 = ДанныеПоказателей.ДанныеМногостраничныхРазделов.Приложение1;
	КодыПоказателей_Приложение1 = 
		ПолучитьСтрокуИзСпискаВыбора("КодыВидаПодакцизныхТоваров_БезПриродногоГаза_Приложение1_20180101");
	Для Каждого СтраницаП1 Из СтраницыПриложения1 Цикл
		ДанныеСтраницыП1 = СтраницаП1.Данные;
		НомерСтраницыП1Стр = СтрокаЧГ0(СтраницыПриложения1.Индекс(СтраницаП1) + 1);
		ВставитьЗначениеПоказателя(ДанныеСтраницыП1, П101Ст10Гр03);
		Если НЕ ЗначениеЗаполнено(П101Ст10Гр03.Значение) Тогда
			Продолжить;
		КонецЕсли;
		СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
		ЗарегистрироватьФормулуДляРасшифровки(ОписаниеКС);
		ВнестиПоказательВРасшифровку(П101Ст10Гр03, "Приложение1", НомерСтраницыП1Стр);
		КСВыполнено = КодНайден(П101Ст10Гр03.Значение, КодыПоказателей_Приложение1);
		Расшифровка = ?(ЗначениеЗаполнено(П101Ст10Гр03.ЗначениеСтр), """" + П101Ст10Гр03.ЗначениеСтр + """", "[ ]")
			+ " = 510, 520, 531, 532, 533, 534, 535, 536, 630, 640, 650, 665, 671, 672, 673, 674, 676, 677";
		Если КСВыполнено Тогда
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
		Иначе
			ЭтоОшибка = Истина;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
		КонецЕсли;
		ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, 
			Расшифровка, ЭтоОшибка, ОписаниеОшибки);
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_4_1_v19(СтруктураРезультата)
	ОбщееЧислоОшибок    = СтруктураРезультата.КоличествоНайденныхОшибок;
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок;
	СтруктураОшибок     = СтруктураРезультата.СтруктураОшибок;
	ТекстФормулы    = НСтр("ru='Проверка приложения № 1 (КС 4.1)'");
	ОписаниеКС      = НСтр("ru='Код вида подакцизного товара в строке 010 приложения №1 = 510, 520, 531, 532, 533, '")
		+ НСтр("ru='534, 535, 536, 630, 640, 650, 665, 671, 672, 673, 674, 676, 677, 678, 679'");
	ОписаниеОшибки  = НСтр("ru='Неверно указан код вида подакцизного товара в Приложении N 1'");
	П101Ст10Гр03 = ПоказательПоСтроке("П101Ст10Гр03");
	ДанныеПоказателей = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить();
	СтраницыПриложения1 = ДанныеПоказателей.ДанныеМногостраничныхРазделов.Приложение1;
	КодыПоказателей_Приложение1 = 
		ПолучитьСтрокуИзСпискаВыбора("КодыВидаПодакцизныхТоваров_БезПриродногоГаза_Приложение1_20190101");
	Для Каждого СтраницаП1 Из СтраницыПриложения1 Цикл
		ДанныеСтраницыП1 = СтраницаП1.Данные;
		НомерСтраницыП1Стр = СтрокаЧГ0(СтраницыПриложения1.Индекс(СтраницаП1) + 1);
		ВставитьЗначениеПоказателя(ДанныеСтраницыП1, П101Ст10Гр03);
		Если НЕ ЗначениеЗаполнено(П101Ст10Гр03.Значение) Тогда
			Продолжить;
		КонецЕсли;
		СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
		ЗарегистрироватьФормулуДляРасшифровки(ОписаниеКС);
		ВнестиПоказательВРасшифровку(П101Ст10Гр03, "Приложение1", НомерСтраницыП1Стр);
		КСВыполнено = КодНайден(П101Ст10Гр03.Значение, КодыПоказателей_Приложение1);
		Расшифровка = ?(ЗначениеЗаполнено(П101Ст10Гр03.ЗначениеСтр), """" + П101Ст10Гр03.ЗначениеСтр + """", "[ ]")
			+ " = 510, 520, 531, 532, 533, 534, 535, 536, 630, 640, 650, 665, 671, 672, 673, 674, 676, 677, 678, 679";
		Если КСВыполнено Тогда
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
		Иначе
			ЭтоОшибка = Истина;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
		КонецЕсли;
		ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, 
			Расшифровка, ЭтоОшибка, ОписаниеОшибки);
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_4_2(СтруктураРезультата)
	ОбщееЧислоОшибок    = СтруктураРезультата.КоличествоНайденныхОшибок;
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок;
	СтруктураОшибок     = СтруктураРезультата.СтруктураОшибок;
	ТекстФормулы    = НСтр("ru='Проверка приложения № 1 (КС 4.2)'");
	ОписаниеКС      = НСтр("ru='Код вида подакцизного товара в строке 010 приложения №1 = Код вида подакцизного товара в строке 010 раздела 2 для автомобилей легковых и мотоциклов'");
	ОписаниеОшибки  = НСтр("ru='Для кода вида подакцизного товара, указанного в строке 010 Приложения N 1, не заполнен раздел 2'");
	П101Ст10Гр03 = ПоказательПоСтроке("П101Ст10Гр03");
	Р2Ст10Гр03 = ПоказательПоСтроке("Р2Ст10Гр03");
	ДанныеПоказателей = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить();
	СтраницыПриложения1 = ДанныеПоказателей.ДанныеМногостраничныхРазделов.Приложение1;
	СтраницыРаздела2 = ДанныеПоказателей.ДанныеМногостраничныхРазделов.Раздел2;
	Для Каждого СтраницаП1 Из СтраницыПриложения1 Цикл
		ДанныеСтраницыП1 = СтраницаП1.Данные;
		НомерСтраницыП1Стр = СтрокаЧГ0(СтраницыПриложения1.Индекс(СтраницаП1) + 1);
		ВставитьЗначениеПоказателя(ДанныеСтраницыП1, П101Ст10Гр03);
		Если НЕ КодНайден(П101Ст10Гр03.Значение, "510,520,531,532,533,534,535,536") Тогда
			Продолжить;
		КонецЕсли;
		СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
		ЗарегистрироватьФормулуДляРасшифровки(ОписаниеКС);
		ВнестиПоказательВРасшифровку(П101Ст10Гр03, "Приложение1", НомерСтраницыП1Стр);
		ЗаполненРаздел2 = Ложь;
		Для Каждого СтраницаР2 Из СтраницыРаздела2 Цикл
			ДанныеСтраницыР2 = СтраницаР2.Данные;
			НомерСтраницыР2Стр = СтрокаЧГ0(СтраницыРаздела2.Индекс(СтраницаР2) + 1);
			ВставитьЗначениеПоказателя(ДанныеСтраницыР2, Р2Ст10Гр03);
			Если П101Ст10Гр03.Значение = Р2Ст10Гр03.Значение Тогда
				ЗаполненРаздел2 = Истина;
				ВнестиПоказательВРасшифровку(Р2Ст10Гр03, "Раздел2", НомерСтраницыР2Стр);
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если ЗаполненРаздел2 Тогда
			Расшифровка = "Для " + "" + П101Ст10Гр03.ЗначениеСтр + "" + " заполнен раздел 2";
		Иначе
			Расшифровка = "Для " + "" + П101Ст10Гр03.ЗначениеСтр + "" + " не заполнен раздел 2";
		КонецЕсли;
		Если ЗаполненРаздел2 Тогда
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
		Иначе
			ЭтоОшибка = Истина;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
		КонецЕсли;
			ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, ЭтоОшибка,
				ОписаниеОшибки,);
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_4_3(СтруктураРезультата)
	ОбщееЧислоОшибок    = СтруктураРезультата.КоличествоНайденныхОшибок;
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок;
	СтруктураОшибок     = СтруктураРезультата.СтруктураОшибок;
	ТекстФормулы    = НСтр("ru='Проверка приложения № 1 (КС 4.3)'");
	ОписаниеКС      = НСтр("ru='Код показателя в графе 1 приложения №1 = ""10001"" или ""10006 - 10012"" или ""20001 - 20005"" или ""30001"" - ""30002"" или ""50001"" - ""50004""'");
	ОписаниеОшибки  = НСтр("ru='Неверно указан код вида подакцизного товара в Приложении N 1'");
	П101Ст1Гр01 = ПоказательПоСтроке("П101Ст1Гр01");
	ДанныеПоказателей = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить();
	СтраницыПриложения1 = ДанныеПоказателей.ДанныеМногостраничныхРазделов.Приложение1;
	Для Каждого СтраницаП1 Из СтраницыПриложения1 Цикл
		ДанныеСтраницыП1 = СтраницаП1.Данные;
		НомерСтраницыП1Стр = СтрокаЧГ0(СтраницыПриложения1.Индекс(СтраницаП1) + 1);
		КолвоСтрокВМногострочнойЧасти = КоличествоСтрок(ДанныеСтраницыП1, "П001010000101_");
		Для Инд = 1 По КолвоСтрокВМногострочнойЧасти Цикл
			ВставитьЗначениеМногострочногоПоказателя(ДанныеСтраницыП1, П101Ст1Гр01, Инд);
			Если НЕ ЗначениеЗаполнено(П101Ст1Гр01.Значение) Тогда
				Продолжить;
			КонецЕсли;
			СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
			ЗарегистрироватьФормулуДляРасшифровки(ОписаниеКС);
			ВнестиПоказательВРасшифровку(П101Ст1Гр01, "Приложение1", НомерСтраницыП1Стр);
			КСВыполнено = КодНайден(П101Ст1Гр01.Значение,
				"10001,10006,10007,10008,10009,10010,10011,10012,20001,20002,20003,20004,20005,30001,30002,50001,50002,50003,50004");
			Расшифровка = ?(ЗначениеЗаполнено(П101Ст1Гр01.ЗначениеСтр), """" + П101Ст1Гр01.ЗначениеСтр + """", "[ ]")
				+ " = ""10001"", ""10006-10012"", ""20001-20005"", ""30001-30002"", ""50001-50004""";
			Если КСВыполнено Тогда
				ЭтоОшибка = Ложь;
				ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
			Иначе
				ЭтоОшибка = Истина;
				ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
			КонецЕсли;
			ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, ЭтоОшибка,
				ОписаниеОшибки,);
			СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
			СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_4_3_v18(СтруктураРезультата)
	ОбщееЧислоОшибок    = СтруктураРезультата.КоличествоНайденныхОшибок;
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок;
	СтруктураОшибок     = СтруктураРезультата.СтруктураОшибок;
	ТекстФормулы    = НСтр("ru='Проверка приложения № 1 (КС 4.3)'");
	ОписаниеКС      = НСтр("ru='Код показателя в графе 1 приложения №1 = ""10001, 10006 - 10012, 10041 - 10043, 20001 - 20005, 20008 - 20015, 30001 - 30002, 30033 - 30034, 50001 - 50004, 50006 - 50011""'");
	ОписаниеОшибки  = НСтр("ru='Неверно указан код вида подакцизного товара в Приложении N 1'");
	П101Ст1Гр01 = ПоказательПоСтроке("П101Ст1Гр01");
	ДанныеПоказателей = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить();
	СтраницыПриложения1 = ДанныеПоказателей.ДанныеМногостраничныхРазделов.Приложение1;
	КодыПоказателей_Приложение1 = ПолучитьСтрокуИзСпискаВыбора("КодыПоказателей_Приложение1_20180101");
	Для Каждого СтраницаП1 Из СтраницыПриложения1 Цикл
		ДанныеСтраницыП1 = СтраницаП1.Данные;
		НомерСтраницыП1Стр = СтрокаЧГ0(СтраницыПриложения1.Индекс(СтраницаП1) + 1);
		КолвоСтрокВМногострочнойЧасти = КоличествоСтрок(ДанныеСтраницыП1, "П001010000101_");
		Для Инд = 1 По КолвоСтрокВМногострочнойЧасти Цикл
			ВставитьЗначениеМногострочногоПоказателя(ДанныеСтраницыП1, П101Ст1Гр01, Инд);
			Если НЕ ЗначениеЗаполнено(П101Ст1Гр01.Значение) Тогда
				Продолжить;
			КонецЕсли;
			СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
			ЗарегистрироватьФормулуДляРасшифровки(ОписаниеКС);
			ВнестиПоказательВРасшифровку(П101Ст1Гр01, "Приложение1", НомерСтраницыП1Стр);
			КСВыполнено = КодНайден(П101Ст1Гр01.Значение, КодыПоказателей_Приложение1);
			Расшифровка = ?(ЗначениеЗаполнено(П101Ст1Гр01.ЗначениеСтр), """" + П101Ст1Гр01.ЗначениеСтр + """", "[ ]")
				+ " = ""10001, 10006 - 10012, 10041 - 10043, 20001 - 20005, 20008 - 20015, 30001 - 30002, 30033 - 30034, 50001 - 50004, 50006 - 50011""";
			Если КСВыполнено Тогда
				ЭтоОшибка = Ложь;
				ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
			Иначе
				ЭтоОшибка = Истина;
				ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
			КонецЕсли;
			ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, 
				Расшифровка, ЭтоОшибка, ОписаниеОшибки);
			СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
			СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_4_4(СтруктураРезультата)
	ОбщееЧислоОшибок    = СтруктураРезультата.КоличествоНайденныхОшибок;
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок;
	СтруктураОшибок     = СтруктураРезультата.СтруктураОшибок;
	ТекстФормулы    = НСтр("ru='Проверка приложения № 1 (КС 4.4)'");
	ОписаниеКС      = НСтр("ru='Налоговая база в графе 4 Приложения № 1 = произведение значений в графе 2 Приложения №1 и в графе 3 Приложения №1 по соответствующему коду графы 1 Приложения №1'");
	ОписаниеОшибки  = НСтр("ru='Допущена ошибка при определении налоговой базы в Приложении N 1'");
	П101Ст1Гр04 = ПоказательПоСтроке("П101Ст1Гр04");
	П101Ст1Гр02 = ПоказательПоСтроке("П101Ст1Гр02");
	П101Ст1Гр03 = ПоказательПоСтроке("П101Ст1Гр03");
	ДанныеПоказателей = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить();
	СтраницыПриложения1 = ДанныеПоказателей.ДанныеМногостраничныхРазделов.Приложение1;
	Для Каждого СтраницаП1 Из СтраницыПриложения1 Цикл
		ДанныеСтраницыП1 = СтраницаП1.Данные;
		НомерСтраницыП1Стр = СтрокаЧГ0(СтраницыПриложения1.Индекс(СтраницаП1) + 1);
		КолвоСтрокВМногострочнойЧасти = КоличествоСтрок(ДанныеСтраницыП1, "П001010000101_");
		Для Инд = 1 По КолвоСтрокВМногострочнойЧасти Цикл
			ВставитьЗначениеМногострочногоПоказателя(ДанныеСтраницыП1, П101Ст1Гр04, Инд);
			ВставитьЗначениеМногострочногоПоказателя(ДанныеСтраницыП1, П101Ст1Гр02, Инд);
			ВставитьЗначениеМногострочногоПоказателя(ДанныеСтраницыП1, П101Ст1Гр03, Инд);
			СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
			ЗарегистрироватьФормулуДляРасшифровки(ОписаниеКС);
			ВнестиПоказательВРасшифровку(П101Ст1Гр04, "Приложение1", НомерСтраницыП1Стр);
			ВнестиПоказательВРасшифровку(П101Ст1Гр02, "Приложение1", НомерСтраницыП1Стр);
			ВнестиПоказательВРасшифровку(П101Ст1Гр03, "Приложение1", НомерСтраницыП1Стр);
			КС = ПоказателиКС(П101Ст1Гр04.Значение, П101Ст1Гр02.Значение * П101Ст1Гр03.Значение);
			Расшифровка = КС.ЛеваяЧастьСтр + " = " + П101Ст1Гр02.ЗначениеСтр + " * " + П101Ст1Гр03.ЗначениеСтр + " Итог["
				+ КС.ПраваяЧастьСтр + "]";
			Если КС.ЛеваяЧасть = КС.ПраваяЧасть Тогда
				ЭтоОшибка = Ложь;
				ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
			Иначе
				ЭтоОшибка = Истина;
				ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
			КонецЕсли;
			ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, ЭтоОшибка,
				ОписаниеОшибки,);
			СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
			СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_4_5(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка приложения № 1 (КС 4.5)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст. 80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Графа 4 приложения № 1 по соответствующему коду (графа 1 приложения № 1) должна быть равна '") +
		НСтр("ru='или графе 2 подраздела 2.1 Раздела 2 или графе 2 подраздела 2.2 Раздела 2 '") +
		НСтр("ru='или графе 2 подраздела 2.4 Раздела 2 или графе 2 подраздела 2.5 Раздела 2 '") +
		НСтр("ru='или графе 2 подраздела 2.6 Раздела 2'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru='Код товара %1, код операции %2'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 Итог [%2] = %3 Итог [%4]'"));
	Заголовки.Вставить("ОписаниеОшибки"		, 
		НСтр("ru='Допущена ошибка при определении налоговой базы в подразделе 2.1 или подразделе 2.2 '") +
		НСтр("ru='или подразделе 2.4 или подразделе 2.5 или подразделе 2.6 Раздела 2'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = мДанныеОтчета.ДанныеКС.ВТ;
	Запрос.Текст =
	
	"ВЫБРАТЬ
	|	ВТ_Раздел21.КодТовара + ВТ_Раздел21.НомерОперации КАК Ключ,
	|	ВТ_Раздел21.НомерСтраницы КАК НомерСтраницы,
	|	ВТ_Раздел21.НомерСтроки КАК НомерСтроки,
	|	""Раздел21"" КАК Раздел,
	|	ВТ_Раздел21.КодТовара КАК КодТовара,
	|	ВТ_Раздел21.НомерОперации КАК НомерОперации,
	|	ВТ_Раздел21.Р21Ст1Гр02 КАК Р21Ст1Гр02,
	|	0 КАК Р22Ст1Гр02,
	|	0 КАК Р24Ст1Гр02,
	|	0 КАК Р25Ст1Гр02,
	|	0 КАК Р26Ст1Гр02
	|ПОМЕСТИТЬ ВТ_Раздел2Х
	|ИЗ
	|	ВТ_Раздел21 КАК ВТ_Раздел21
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТ_Раздел22.КодТовара + ВТ_Раздел22.НомерОперации,
	|	ВТ_Раздел22.НомерСтраницы,
	|	ВТ_Раздел22.НомерСтроки,
	|	""Раздел22"",
	|	ВТ_Раздел22.КодТовара,
	|	ВТ_Раздел22.НомерОперации,
	|	0,
	|	ВТ_Раздел22.Р22Ст1Гр02,
	|	0,
	|	0,
	|	0
	|ИЗ
	|	ВТ_Раздел22 КАК ВТ_Раздел22
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТ_Раздел24.КодТовара + ВТ_Раздел24.НомерОперации,
	|	ВТ_Раздел24.НомерСтраницы,
	|	ВТ_Раздел24.НомерСтроки,
	|	""Раздел24"",
	|	ВТ_Раздел24.КодТовара,
	|	ВТ_Раздел24.НомерОперации,
	|	0,
	|	0,
	|	ВТ_Раздел24.Р24Ст1Гр02,
	|	0,
	|	0
	|ИЗ
	|	ВТ_Раздел24 КАК ВТ_Раздел24
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТ_Раздел25.КодТовара + ВТ_Раздел25.НомерОперации,
	|	ВТ_Раздел25.НомерСтраницы,
	|	ВТ_Раздел25.НомерСтроки,
	|	""Раздел25"",
	|	ВТ_Раздел25.КодТовара,
	|	ВТ_Раздел25.НомерОперации,
	|	0,
	|	0,
	|	0,
	|	ВТ_Раздел25.Р25Ст1Гр02,
	|	0
	|ИЗ
	|	ВТ_Раздел25 КАК ВТ_Раздел25
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТ_Раздел26.КодТовара + ВТ_Раздел26.НомерОперации,
	|	ВТ_Раздел26.НомерСтраницы,
	|	ВТ_Раздел26.НомерСтроки,
	|	""Раздел26"",
	|	ВТ_Раздел26.КодТовара,
	|	ВТ_Раздел26.НомерОперации,
	|	0,
	|	0,
	|	0,
	|	0,
	|	ВТ_Раздел26.Р26Ст1Гр02
	|ИЗ
	|	ВТ_Раздел26 КАК ВТ_Раздел26
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Приложение1.КодТовара + ВТ_Приложение1.НомерОперации КАК Ключ,
	|	ВТ_Приложение1.НомерСтраницы КАК НомерСтраницы,
	|	ВТ_Приложение1.НомерСтроки КАК НомерСтроки,
	|	ВТ_Приложение1.КодТовара КАК КодТовара,
	|	ВТ_Приложение1.НомерОперации КАК НомерОперации,
	|	ВТ_Приложение1.П101Ст1Гр04 КАК П101Ст1Гр04
	|ИЗ
	|	ВТ_Приложение1 КАК ВТ_Приложение1
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ключ,
	|	НомерСтраницы,
	|	НомерСтроки
	|ИТОГИ
	|	МИНИМУМ(КодТовара),
	|	МИНИМУМ(НомерОперации),
	|	СУММА(П101Ст1Гр04)
	|ПО
	|	Ключ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Раздел2Х.Ключ КАК Ключ,
	|	ВТ_Раздел2Х.Раздел КАК Раздел,
	|	ВТ_Раздел2Х.НомерСтраницы КАК НомерСтраницы,
	|	ВТ_Раздел2Х.НомерСтроки КАК НомерСтроки,
	|	ВТ_Раздел2Х.КодТовара КАК КодТовара,
	|	ВТ_Раздел2Х.НомерОперации КАК НомерОперации,
	|	ВТ_Раздел2Х.Р21Ст1Гр02 КАК Р21Ст1Гр02,
	|	ВТ_Раздел2Х.Р22Ст1Гр02 КАК Р22Ст1Гр02,
	|	ВТ_Раздел2Х.Р24Ст1Гр02 КАК Р24Ст1Гр02,
	|	ВТ_Раздел2Х.Р25Ст1Гр02 КАК Р25Ст1Гр02,
	|	ВТ_Раздел2Х.Р26Ст1Гр02 КАК Р26Ст1Гр02
	|ИЗ
	|	ВТ_Раздел2Х КАК ВТ_Раздел2Х
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ключ,
	|	Раздел,
	|	НомерСтраницы,
	|	НомерСтроки
	|ИТОГИ
	|	СУММА(Р21Ст1Гр02),
	|	СУММА(Р22Ст1Гр02),
	|	СУММА(Р24Ст1Гр02),
	|	СУММА(Р25Ст1Гр02),
	|	СУММА(Р26Ст1Гр02)
	|ПО
	|	Ключ";
	
	Результат = Запрос.ВыполнитьПакет();
	ВыборкаР1 = Результат[1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ВыборкаР2 = Результат[2].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаР1.Следующий() Цикл
		
		Настройки.Вставить("ДопСведенияПараметры", Новый Структура("КодТовара, НомерОперации", 
			ВыборкаР1.КодТовара, ВыборкаР1.НомерОперации));
		ЗарегистрироватьФормулу(Настройки);
		СуммаР1Стр = "";
		СуммаР2Стр = "";
		СуммаР2 = 0;
		Счетчик = 0;
			
		Выборка = ВыборкаР1.Выбрать();
		Пока Выборка.Следующий() Цикл
			Показатели = ЗаполнитьПоказатели("П101Ст1Гр04", Выборка, Выборка.НомерСтроки, Истина);
			Если ЗначениеЗаполнено(Показатели.П101Ст1Гр04.Значение) Тогда
				РасшифроватьПоказатели(Показатели, Настройки, "Приложение1", Выборка.НомерСтраницы);
			КонецЕсли;
			Если Счетчик <= 4 И ЗначениеЗаполнено(Показатели.П101Ст1Гр04.Значение) Тогда
				СуммаР1Стр = СуммаР1Стр + ?(Счетчик = 4, ?(ЗначениеЗаполнено(ВыборкаР1.П101Ст1Гр04), "<...>", "0"), 
					Показатели.П101Ст1Гр04.ЗначениеСтр + " + ");
				Счетчик = Счетчик + 1;
			КонецЕсли;
		КонецЦикла;
		
		Если ВыборкаР2.НайтиСледующий(ВыборкаР1.Ключ, "Ключ") Тогда
			СуммаР2 = ВыборкаР2.Р21Ст1Гр02 + ВыборкаР2.Р22Ст1Гр02 + ВыборкаР2.Р24Ст1Гр02 + ВыборкаР2.Р25Ст1Гр02 
				+ ВыборкаР2.Р26Ст1Гр02;
			Выборка = ВыборкаР2.Выбрать();
			Пока Выборка.Следующий() Цикл
				Показатели = ЗаполнитьПоказатели("Р21Ст1Гр02, Р22Ст1Гр02, Р24Ст1Гр02, Р25Ст1Гр02, Р26Ст1Гр02", Выборка, 
					Выборка.НомерСтроки, Истина);
				Для каждого Показатель Из Показатели Цикл
					Если ЗначениеЗаполнено(Показатель.Значение.Значение) Тогда
						Дополнение = "Страница " + Выборка.НомерСтраницы + ", код товара " + Выборка.КодТовара 
							+ ", код операции " + Выборка.НомерОперации;
						ДобавитьИнфоКПредставлениюПоказателя(Показатель.Значение, Дополнение);
						ВнестиПоказательВРасшифровку(Показатель.Значение, "Раздел2", Выборка.НомерСтраницы);
					КонецЕсли;
					Если Счетчик <= 4 И ЗначениеЗаполнено(Показатель.Значение.Значение) Тогда
						СуммаР2Стр = СуммаР2Стр + ?(Счетчик = 4, ?(ЗначениеЗаполнено(СуммаР2), "<...>", "0"), 
							Показатель.Значение.ЗначениеСтр + " + ");
						Счетчик = Счетчик + 1;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
		КонецЕсли; 
			
		Настройки.ЭтоОшибка		= НЕ ВыборкаР1.П101Ст1Гр04 = СуммаР2;
		Настройки.Расшифровка	= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки, 
			РасшифровкаВСтр(СуммаР1Стр), ВыборкаР1.П101Ст1Гр04, РасшифровкаВСтр(СуммаР2Стр), СуммаР2);
		ДополнитьСтруктуруОшибок(Настройки);
		ВыборкаР2.Сбросить();
	КонецЦикла;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

#КонецОбласти

#Область КС_ПроверкиРаздела5

&НаСервере
Процедура ПроверитьКС_5_1(СтруктураРезультата)
	ОбщееЧислоОшибок    = СтруктураРезультата.КоличествоНайденныхОшибок;
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок;
	СтруктураОшибок     = СтруктураРезультата.СтруктураОшибок;
	ТекстФормулы    = НСтр("ru='Проверка раздела 1 Приложения №2 (КС 5.1)'");
	ОписаниеКС      = НСтр("ru='Код вида подакцизного товара в строке 010 раздела 1 Приложения № 2 = '")
		+ НСтр("ru='510, 520, 531, 532, 630, 640, 650, 665, 671, 672, 673, 674, 676, 677, 735'");
	ОписаниеОшибки  = НСтр("ru='Неверно указан код вида подакцизного товара в Приложении N 2 раздела 1'");
	П102Ст10Гр03 = ПоказательПоСтроке("П102Ст10Гр03");
	Приложение21 = ДанныеИзДереваРаздела("Приложение21");
	УровеньСтраницы = "";
	КодыПоказателей_Приложение2 = ПолучитьСтрокуИзСпискаВыбора("КодыВидаПодакцизныхТоваров");
	Для Каждого СтраницаРаздела Из Приложение21 Цикл
		ДанныеСтраницы = СтраницаРаздела.Данные;
		Если УровеньСтраницы = НомерСтраницыМнУ(СтраницаРаздела.Представление, П102Ст10Гр03.ПорядокСтраницы) Тогда
			Продолжить;
		КонецЕсли;
		УровеньСтраницы = НомерСтраницыМнУ(СтраницаРаздела.Представление, П102Ст10Гр03.ПорядокСтраницы);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, П102Ст10Гр03);
		Если НЕ ЗначениеЗаполнено(П102Ст10Гр03.Значение) Тогда
			Продолжить;
		КонецЕсли;
		СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
		ЗарегистрироватьФормулуДляРасшифровки(ОписаниеКС);
		ВнестиПоказательВРасшифровку(П102Ст10Гр03, "Приложение21", НомерСтраницыМнУ(СтраницаРаздела.Представление, 
			П102Ст10Гр03.ПорядокСтраницы));
		КСВыполнено = КодНайден(П102Ст10Гр03.Значение, КодыПоказателей_Приложение2);
		Расшифровка = ?(ЗначениеЗаполнено(П102Ст10Гр03.ЗначениеСтр), """" + П102Ст10Гр03.ЗначениеСтр + """", "[ ]")
			+ " = 510, 520, 531, 532, 630, 640, 650, 665, 671, 672, 673, 674, 676, 677, 735";
		Если КСВыполнено Тогда
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
		Иначе
			ЭтоОшибка = Истина;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
		КонецЕсли;
		ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, 
			Расшифровка, ЭтоОшибка, ОписаниеОшибки,);
	КонецЦикла;
	СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
	СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
	СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_5_1_v17(СтруктураРезультата)
	ОбщееЧислоОшибок    = СтруктураРезультата.КоличествоНайденныхОшибок;
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок;
	СтруктураОшибок     = СтруктураРезультата.СтруктураОшибок;
	ТекстФормулы    = НСтр("ru='Проверка раздела 1 Приложения №2 (КС 5.1)'");
	ОписаниеКС      = НСтр("ru='Код вида подакцизного товара в строке 010 раздела 1 Приложения № 2 = 470, 471, 472, '")
		+ НСтр("ru='510, 520, 531, 532, 630, 640, 650, 665, 671, 672, 673, 674, 676, 677, 735'");
	ОписаниеОшибки  = НСтр("ru='Неверно указан код вида подакцизного товара в Приложении N 2 раздела 1'");
	П102Ст10Гр03 = ПоказательПоСтроке("П102Ст10Гр03");
	Приложение21 = ДанныеИзДереваРаздела("Приложение21");
	УровеньСтраницы = "";
	КодыПоказателей_Приложение2 = ПолучитьСтрокуИзСпискаВыбора("КодыВидаПодакцизныхТоваров_20170101");
	Для Каждого СтраницаРаздела Из Приложение21 Цикл
		ДанныеСтраницы = СтраницаРаздела.Данные;
		Если УровеньСтраницы = НомерСтраницыМнУ(СтраницаРаздела.Представление, П102Ст10Гр03.ПорядокСтраницы) Тогда
			Продолжить;
		КонецЕсли;
		УровеньСтраницы = НомерСтраницыМнУ(СтраницаРаздела.Представление, П102Ст10Гр03.ПорядокСтраницы);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, П102Ст10Гр03);
		Если НЕ ЗначениеЗаполнено(П102Ст10Гр03.Значение) Тогда
			Продолжить;
		КонецЕсли;
		СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
		ЗарегистрироватьФормулуДляРасшифровки(ОписаниеКС);
		ВнестиПоказательВРасшифровку(П102Ст10Гр03, "Приложение21", НомерСтраницыМнУ(СтраницаРаздела.Представление, 
			П102Ст10Гр03.ПорядокСтраницы));
		КСВыполнено = КодНайден(П102Ст10Гр03.Значение, КодыПоказателей_Приложение2);
		Расшифровка = ?(ЗначениеЗаполнено(П102Ст10Гр03.ЗначениеСтр), """" + П102Ст10Гр03.ЗначениеСтр + """", "[ ]")
			+ " = 470, 471, 472, 510, 520, 531, 532, 630, 640, 650, 665, 671, 672, 673, 674, 676, "
			+ "677, 735";
		Если КСВыполнено Тогда
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
		Иначе
			ЭтоОшибка = Истина;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
		КонецЕсли;
		ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, 
			Расшифровка, ЭтоОшибка, ОписаниеОшибки,);
	КонецЦикла;
	СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
	СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
	СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_5_1_v18(СтруктураРезультата)
	ОбщееЧислоОшибок    = СтруктураРезультата.КоличествоНайденныхОшибок;
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок;
	СтруктураОшибок     = СтруктураРезультата.СтруктураОшибок;
	ТекстФормулы    = НСтр("ru='Проверка раздела 1 Приложения №2 (КС 5.1)'");
	ОписаниеКС      = НСтр("ru='Код вида подакцизного товара в строке 010 раздела 1 Приложения № 2 = 470, 471, 472, '")
		+ НСтр("ru='510, 520, 531, 532, 533, 534, 535, 536, 630, 640, 650, 665, 671, 672, 673, 674, 676, 677, 735'");
	ОписаниеОшибки  = НСтр("ru='Неверно указан код вида подакцизного товара в Приложении N 2 раздела 1'");
	П102Ст10Гр03 = ПоказательПоСтроке("П102Ст10Гр03");
	Приложение21 = ДанныеИзДереваРаздела("Приложение21");
	УровеньСтраницы = "";
	КодыПоказателей_Приложение2 = ПолучитьСтрокуИзСпискаВыбора("КодыВидаПодакцизныхТоваров_20180101");
	Для Каждого СтраницаРаздела Из Приложение21 Цикл
		ДанныеСтраницы = СтраницаРаздела.Данные;
		Если УровеньСтраницы = НомерСтраницыМнУ(СтраницаРаздела.Представление, П102Ст10Гр03.ПорядокСтраницы) Тогда
			Продолжить;
		КонецЕсли;
		УровеньСтраницы = НомерСтраницыМнУ(СтраницаРаздела.Представление, П102Ст10Гр03.ПорядокСтраницы);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, П102Ст10Гр03);
		Если НЕ ЗначениеЗаполнено(П102Ст10Гр03.Значение) Тогда
			Продолжить;
		КонецЕсли;
		СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
		ЗарегистрироватьФормулуДляРасшифровки(ОписаниеКС);
		ВнестиПоказательВРасшифровку(П102Ст10Гр03, "Приложение21", НомерСтраницыМнУ(СтраницаРаздела.Представление, 
			П102Ст10Гр03.ПорядокСтраницы));
		КСВыполнено = КодНайден(П102Ст10Гр03.Значение, КодыПоказателей_Приложение2);
		Расшифровка = ?(ЗначениеЗаполнено(П102Ст10Гр03.ЗначениеСтр), """" + П102Ст10Гр03.ЗначениеСтр + """", "[ ]")
			+ " = 470, 471, 472, 510, 520, 531, 532, 533, 534, 535, 536, 630, 640, 650, 665, 671, 672, 673, 674, 676, "
			+ "677, 735";
		Если КСВыполнено Тогда
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
		Иначе
			ЭтоОшибка = Истина;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
		КонецЕсли;
		ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, 
			Расшифровка, ЭтоОшибка, ОписаниеОшибки,);
	КонецЦикла;
	СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
	СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
	СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_5_1_v19(СтруктураРезультата)
	ОбщееЧислоОшибок    = СтруктураРезультата.КоличествоНайденныхОшибок;
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок;
	СтруктураОшибок     = СтруктураРезультата.СтруктураОшибок;
	ТекстФормулы    = НСтр("ru='Проверка раздела 1 Приложения №2 (КС 5.1)'");
	ОписаниеКС      = НСтр("ru='Код вида подакцизного товара в строке 010 раздела 1 Приложения № 2 = 470, 471, 472, '")
		+ НСтр("ru='510, 520, 531, 532, 533, 534, 535, 536, 630, 640, 650, 665, 671, 672, 673, 674, 676, 677, 678, 679, '")
		+ НСтр("ru='735'");
	ОписаниеОшибки  = НСтр("ru='Неверно указан код вида подакцизного товара в Приложении N 2 раздела 1'");
	П102Ст10Гр03 = ПоказательПоСтроке("П102Ст10Гр03");
	Приложение21 = ДанныеИзДереваРаздела("Приложение21");
	УровеньСтраницы = "";
	КодыПоказателей_Приложение2 = ПолучитьСтрокуИзСпискаВыбора("КодыВидаПодакцизныхТоваров_20190101");
	Для Каждого СтраницаРаздела Из Приложение21 Цикл
		ДанныеСтраницы = СтраницаРаздела.Данные;
		Если УровеньСтраницы = НомерСтраницыМнУ(СтраницаРаздела.Представление, П102Ст10Гр03.ПорядокСтраницы) Тогда
			Продолжить;
		КонецЕсли;
		УровеньСтраницы = НомерСтраницыМнУ(СтраницаРаздела.Представление, П102Ст10Гр03.ПорядокСтраницы);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, П102Ст10Гр03);
		Если НЕ ЗначениеЗаполнено(П102Ст10Гр03.Значение) Тогда
			Продолжить;
		КонецЕсли;
		СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
		ЗарегистрироватьФормулуДляРасшифровки(ОписаниеКС);
		ВнестиПоказательВРасшифровку(П102Ст10Гр03, "Приложение21", НомерСтраницыМнУ(СтраницаРаздела.Представление, 
			П102Ст10Гр03.ПорядокСтраницы));
		КСВыполнено = КодНайден(П102Ст10Гр03.Значение, КодыПоказателей_Приложение2);
		Расшифровка = ?(ЗначениеЗаполнено(П102Ст10Гр03.ЗначениеСтр), """" + П102Ст10Гр03.ЗначениеСтр + """", "[ ]")
			+ " = 470, 471, 472, 510, 520, 531, 532, 533, 534, 535, 536, 630, 640, 650, 665, 671, 672, 673, 674, 676, "
			+ "677, 678, 679, 735";
		Если КСВыполнено Тогда
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
		Иначе
			ЭтоОшибка = Истина;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
		КонецЕсли;
		ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, 
			Расшифровка, ЭтоОшибка, ОписаниеОшибки,);
	КонецЦикла;
	СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
	СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
	СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_5_2(СтруктураРезультата)
	ОбщееЧислоОшибок    = СтруктураРезультата.КоличествоНайденныхОшибок;
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок;
	СтруктураОшибок     = СтруктураРезультата.СтруктураОшибок;
	ТекстФормулы    = НСтр("ru='Проверка раздела 1 Приложения №2 (КС 5.2)'");
	ОписаниеКС      = НСтр("ru='Общее количество банковских гарантий в строке 020 раздела 1 Приложения № 2 = Общее количество банковских гарантий с разными номерами по строке 120 всех листов раздела 2 Приложения № 2 по соответствующему виду подакцизного товара '");
	ОписаниеОшибки  = НСтр("ru='Допущена ошибка при определении общего количества банковских гарантий, действующих в налоговом периоде в строке 020 Приложения N 2 раздела 1'");
	П102Ст20Гр03 = ПоказательПоСтроке("П102Ст20Гр03");
	П102Ст120Гр03 = ПоказательПоСтроке("П102Ст120Гр03");
	П102Ст10Гр03 = ПоказательПоСтроке("П102Ст10Гр03");
	Приложение21 = ДанныеИзДереваРаздела("Приложение21");
	УровеньСтраницы = "";
	Для Каждого СтраницаРаздела Из Приложение21 Цикл
		ДанныеСтраницы = СтраницаРаздела.Данные;
		Если УровеньСтраницы = НомерСтраницыМнУ(СтраницаРаздела.Представление, П102Ст10Гр03.ПорядокСтраницы) Тогда
			Продолжить;
		КонецЕсли;
		УровеньСтраницы = НомерСтраницыМнУ(СтраницаРаздела.Представление, П102Ст10Гр03.ПорядокСтраницы);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, П102Ст20Гр03);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, П102Ст120Гр03);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, П102Ст10Гр03);
		Если НЕ ЗначениеЗаполнено(П102Ст10Гр03.Значение) Тогда
			Продолжить;
		КонецЕсли;
		СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
		ЗарегистрироватьФормулуДляРасшифровки(ОписаниеКС);
		ВнестиПоказательВРасшифровку(П102Ст20Гр03, П102Ст20Гр03.Раздел, НомерСтраницыМнУ(СтраницаРаздела.Представление, П102Ст20Гр03.ПорядокСтраницы));
		ВнестиПоказательВРасшифровку(П102Ст10Гр03, П102Ст10Гр03.Раздел, НомерСтраницыМнУ(СтраницаРаздела.Представление, П102Ст10Гр03.ПорядокСтраницы));
		
		УровеньСтраницы2 = "";
		МассивБГ = Новый Массив;
		Для Каждого СтраницаРаздела2 Из Приложение21 Цикл
			ДанныеСтраницы2 = СтраницаРаздела2.Данные;
			Если УровеньСтраницы2 = НомерСтраницыМнУ(СтраницаРаздела2.Представление, П102Ст120Гр03.ПорядокСтраницы) Тогда
				Продолжить;
			КонецЕсли;
			УровеньСтраницы2 = НомерСтраницыМнУ(СтраницаРаздела2.Представление, П102Ст120Гр03.ПорядокСтраницы);
			Если НЕ УровеньСтраницы = Лев(УровеньСтраницы2, СтрДлина(УровеньСтраницы)) Тогда
				Продолжить;
			КонецЕсли;
			ВставитьЗначениеПоказателя(ДанныеСтраницы2, П102Ст120Гр03);
			Если ЗначениеЗаполнено(П102Ст120Гр03.Значение) И МассивБГ.Найти(П102Ст120Гр03.Значение) = Неопределено Тогда
				МассивБГ.Добавить(П102Ст120Гр03.Значение);
			КонецЕсли;
			ВнестиПоказательВРасшифровку(П102Ст120Гр03, П102Ст120Гр03.Раздел, НомерСтраницыМнУ(СтраницаРаздела2.Представление, П102Ст120Гр03.ПорядокСтраницы));
		КонецЦикла;
		КС = ПоказателиКС(П102Ст20Гр03.Значение, МассивБГ.Количество());
		Расшифровка = КС.ЛеваяЧастьСтр + " = " + КС.ПраваяЧастьСтр;
		Если КС.ЛеваяЧасть = КС.ПраваяЧасть Тогда
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
		Иначе
			ЭтоОшибка = Истина;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
		КонецЕсли;
		
		ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, ЭтоОшибка,
			ОписаниеОшибки,);
	КонецЦикла;
	СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
	СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
	СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_5_3(СтруктураРезультата)
	ОбщееЧислоОшибок    = СтруктураРезультата.КоличествоНайденныхОшибок;
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок;
	СтруктураОшибок     = СтруктураРезультата.СтруктураОшибок;
	ТекстФормулы    = НСтр("ru='Проверка раздела 1 Приложения №2 (КС 5.3)'");
	ОписаниеКС      = НСтр("ru='Общая сумма по банковским гарантиям в строке 030 раздела 1 Приложения № 2 = Сумма значений строки 150 раздела 2 Приложения № 2 по соответствующему виду подакцизного товара '");
	ОписаниеОшибки  = НСтр("ru='Допущена ошибка при определении общей суммы, на которую выданы действующие в налоговом периоде банковские гарантии в Приложении N 2 раздела 1'");
	
	П102Ст10Гр03 = ПоказательПоСтроке("П102Ст10Гр03");
	П102Ст30Гр03 = ПоказательПоСтроке("П102Ст30Гр03");
	П102Ст150Гр03 = ПоказательПоСтроке("П102Ст150Гр03");
	Приложение21 = ДанныеИзДереваРаздела("Приложение21");
	УровеньСтраницы = "";
	Для Каждого СтраницаРаздела Из Приложение21 Цикл
		ДанныеСтраницы = СтраницаРаздела.Данные;
		Если УровеньСтраницы = НомерСтраницыМнУ(СтраницаРаздела.Представление, П102Ст10Гр03.ПорядокСтраницы) Тогда
			Продолжить;
		КонецЕсли;
		УровеньСтраницы = НомерСтраницыМнУ(СтраницаРаздела.Представление, П102Ст10Гр03.ПорядокСтраницы);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, П102Ст30Гр03);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, П102Ст10Гр03);
		Если НЕ ЗначениеЗаполнено(П102Ст10Гр03.Значение) Тогда
			Продолжить;
		КонецЕсли;
		СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
		ЗарегистрироватьФормулуДляРасшифровки(ОписаниеКС);
		ВнестиПоказательВРасшифровку(П102Ст30Гр03, П102Ст30Гр03.Раздел, НомерСтраницыМнУ(СтраницаРаздела.Представление, П102Ст30Гр03.ПорядокСтраницы));
		ВнестиПоказательВРасшифровку(П102Ст10Гр03, П102Ст10Гр03.Раздел, НомерСтраницыМнУ(СтраницаРаздела.Представление, П102Ст10Гр03.ПорядокСтраницы));
		
		УровеньСтраницы2 = "";
		СуммаСт150 = 0;
		СуммаСт150Стр = "";
		Для Каждого СтраницаРаздела2 Из Приложение21 Цикл
			ДанныеСтраницы2 = СтраницаРаздела2.Данные;
			Если УровеньСтраницы2 = НомерСтраницыМнУ(СтраницаРаздела2.Представление, П102Ст150Гр03.ПорядокСтраницы) Тогда
				Продолжить;
			КонецЕсли;
			УровеньСтраницы2 = НомерСтраницыМнУ(СтраницаРаздела2.Представление, П102Ст150Гр03.ПорядокСтраницы);
			Если НЕ УровеньСтраницы = Лев(УровеньСтраницы2, СтрДлина(УровеньСтраницы)) Тогда
				Продолжить;
			КонецЕсли;
			ВставитьЗначениеПоказателя(ДанныеСтраницы2, П102Ст150Гр03);
			ВнестиПоказательВРасшифровку(П102Ст150Гр03, П102Ст150Гр03.Раздел, НомерСтраницыМнУ(СтраницаРаздела2.Представление, П102Ст150Гр03.ПорядокСтраницы));
			СуммаСт150 = СуммаСт150 + П102Ст150Гр03.Значение;
			СуммаСт150Стр = "" + СуммаСт150Стр + П102Ст150Гр03.ЗначениеСтр + " + ";
		КонецЦикла;
		КС = ПоказателиКС(П102Ст30Гр03.Значение, СуммаСт150);
		Расшифровка = КС.ЛеваяЧастьСтр + " = " + РасшифровкаВСтр(СуммаСт150Стр) + " Итог [" + КС.ПраваяЧастьСтр + "]";
		Если КС.ЛеваяЧасть = КС.ПраваяЧасть Тогда
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
		Иначе
			ЭтоОшибка = Истина;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
		КонецЕсли;
		ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, ЭтоОшибка,
			ОписаниеОшибки,);
	КонецЦикла;
	СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
	СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
	СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_5_4(СтруктураРезультата)
	ОбщееЧислоОшибок    = СтруктураРезультата.КоличествоНайденныхОшибок;
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок;
	СтруктураОшибок     = СтруктураРезультата.СтруктураОшибок;
	ТекстФормулы    = НСтр("ru='Проверка раздела 1 Приложения №2 (КС 5.4)'");
	ОписаниеКС      = НСтр("ru='Объем подакцизных нефтепродуктов в графе 3 строки 040 раздела 1 Приложения № 2 = Сумма значений в строке 160 графы 3 раздела 2 Приложения № 2 по соответствующему виду подакцизного товара '");
	ОписаниеОшибки  = НСтр("ru='Допущена ошибка при определении общего объема подакцизных нефтепродуктов (общая мощность двигателей автомобилей легковых (мотоциклов)) в строке 040 графы 3 Приложения N 2 раздела 1'");
	П102Ст10Гр03 = ПоказательПоСтроке("П102Ст10Гр03");
	П102Ст40Гр03 = ПоказательПоСтроке("П102Ст40Гр03");
	П102Ст160Гр03 = ПоказательПоСтроке("П102Ст160Гр03");
	Приложение21 = ДанныеИзДереваРаздела("Приложение21");
	УровеньСтраницы = "";
	Для Каждого СтраницаРаздела Из Приложение21 Цикл
		ДанныеСтраницы = СтраницаРаздела.Данные;
		Если УровеньСтраницы = НомерСтраницыМнУ(СтраницаРаздела.Представление, П102Ст10Гр03.ПорядокСтраницы) Тогда
			Продолжить;
		КонецЕсли;
		УровеньСтраницы = НомерСтраницыМнУ(СтраницаРаздела.Представление, П102Ст10Гр03.ПорядокСтраницы);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, П102Ст40Гр03);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, П102Ст10Гр03);
		Если НЕ ЗначениеЗаполнено(П102Ст10Гр03.Значение) Тогда
			Продолжить;
		КонецЕсли;
		СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
		ЗарегистрироватьФормулуДляРасшифровки(ОписаниеКС);
		ВнестиПоказательВРасшифровку(П102Ст40Гр03, П102Ст40Гр03.Раздел, НомерСтраницыМнУ(СтраницаРаздела.Представление, П102Ст40Гр03.ПорядокСтраницы));
		ВнестиПоказательВРасшифровку(П102Ст10Гр03, П102Ст10Гр03.Раздел, НомерСтраницыМнУ(СтраницаРаздела.Представление, П102Ст10Гр03.ПорядокСтраницы));
		
		УровеньСтраницы2 = "";
		СуммаСт160 = 0;
		СуммаСт160Стр = "";
		Для Каждого СтраницаРаздела2 Из Приложение21 Цикл
			ДанныеСтраницы2 = СтраницаРаздела2.Данные;
			Если УровеньСтраницы2 = НомерСтраницыМнУ(СтраницаРаздела2.Представление, П102Ст160Гр03.ПорядокСтраницы) Тогда
				Продолжить;
			КонецЕсли;
			УровеньСтраницы2 = НомерСтраницыМнУ(СтраницаРаздела2.Представление, П102Ст160Гр03.ПорядокСтраницы);
			Если НЕ УровеньСтраницы = Лев(УровеньСтраницы2, СтрДлина(УровеньСтраницы)) Тогда
				Продолжить;
			КонецЕсли;
			ВставитьЗначениеПоказателя(ДанныеСтраницы2, П102Ст160Гр03);
			ВнестиПоказательВРасшифровку(П102Ст160Гр03, П102Ст160Гр03.Раздел, НомерСтраницыМнУ(СтраницаРаздела2.Представление, П102Ст160Гр03.ПорядокСтраницы));
			СуммаСт160 = СуммаСт160 + П102Ст160Гр03.Значение;
			СуммаСт160Стр = "" + СуммаСт160Стр + П102Ст160Гр03.ЗначениеСтр + " + ";
		КонецЦикла;
		КС = ПоказателиКС(П102Ст40Гр03.Значение, СуммаСт160);
		Расшифровка = КС.ЛеваяЧастьСтр + " = " + РасшифровкаВСтр(СуммаСт160Стр) + " Итог [" + КС.ПраваяЧастьСтр + "]";
		Если КС.ЛеваяЧасть = КС.ПраваяЧасть Тогда
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
		Иначе
			ЭтоОшибка = Истина;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
		КонецЕсли;
		ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, ЭтоОшибка,
			ОписаниеОшибки,);
	КонецЦикла;
	СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
	СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
	СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_5_5(СтруктураРезультата)
	
	ОбщееЧислоОшибок    = СтруктураРезультата.КоличествоНайденныхОшибок;
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок;
	СтруктураОшибок     = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы    = НСтр("ru='Проверка раздела 1 Приложения №2 (КС 5.5)'");
	ОписаниеКС      = НСтр("ru='Сумма акциза в графе 4 строки 050 раздела 1 Приложения № 2 = Сумма значений в строке 170 графы 4 раздела 2 Приложения № 2 '");
	
	ОписаниеОшибки  = НСтр("ru='Допущена ошибка при определении суммы акциза, освобожденной от уплаты в связи с представлением банковских гарантий при неподтверждении факта экспорта в налоговом периоде в графе 4 строки 050 Приложения N 2 раздела 1'");
	
	П102Ст50Гр04 = ПоказательПоСтроке("П102Ст50Гр04");
	П102Ст170Гр04 = ПоказательПоСтроке("П102Ст170Гр04");
	П102Ст10Гр03 = ПоказательПоСтроке("П102Ст10Гр03");
	Приложение21 = ДанныеИзДереваРаздела("Приложение21");
	УровеньСтраницы = "";
	Для Каждого СтраницаРаздела Из Приложение21 Цикл
		ДанныеСтраницы = СтраницаРаздела.Данные;
		Если УровеньСтраницы = НомерСтраницыМнУ(СтраницаРаздела.Представление, П102Ст10Гр03.ПорядокСтраницы) Тогда
			Продолжить;
		КонецЕсли;
		УровеньСтраницы = НомерСтраницыМнУ(СтраницаРаздела.Представление, П102Ст10Гр03.ПорядокСтраницы);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, П102Ст50Гр04);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, П102Ст10Гр03);
		Если НЕ ЗначениеЗаполнено(П102Ст10Гр03.Значение) Тогда
			Продолжить;
		КонецЕсли;
		СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
		ЗарегистрироватьФормулуДляРасшифровки(ОписаниеКС);
		ВнестиПоказательВРасшифровку(П102Ст50Гр04, П102Ст50Гр04.Раздел, НомерСтраницыМнУ(СтраницаРаздела.Представление, П102Ст50Гр04.ПорядокСтраницы));
		ВнестиПоказательВРасшифровку(П102Ст10Гр03, П102Ст10Гр03.Раздел, НомерСтраницыМнУ(СтраницаРаздела.Представление, П102Ст10Гр03.ПорядокСтраницы));
		
		УровеньСтраницы2 = "";
		СуммаСт170 = 0;
		СуммаСт170Стр = "";
		Для Каждого СтраницаРаздела2 Из Приложение21 Цикл
			ДанныеСтраницы2 = СтраницаРаздела2.Данные;
			Если УровеньСтраницы2 = НомерСтраницыМнУ(СтраницаРаздела2.Представление, П102Ст170Гр04.ПорядокСтраницы) Тогда
				Продолжить;
			КонецЕсли;
			УровеньСтраницы2 = НомерСтраницыМнУ(СтраницаРаздела2.Представление, П102Ст170Гр04.ПорядокСтраницы);
			Если НЕ УровеньСтраницы = Лев(УровеньСтраницы2, СтрДлина(УровеньСтраницы)) Тогда
				Продолжить;
			КонецЕсли;
			ВставитьЗначениеПоказателя(ДанныеСтраницы2, П102Ст170Гр04);
			ВнестиПоказательВРасшифровку(П102Ст170Гр04, П102Ст170Гр04.Раздел, НомерСтраницыМнУ(СтраницаРаздела2.Представление, П102Ст170Гр04.ПорядокСтраницы));
			СуммаСт170 = СуммаСт170 + П102Ст170Гр04.Значение;
			СуммаСт170Стр = "" + СуммаСт170Стр + П102Ст170Гр04.ЗначениеСтр + " + ";
		КонецЦикла;
		КС = ПоказателиКС(П102Ст50Гр04.Значение, СуммаСт170);
		Расшифровка = КС.ЛеваяЧастьСтр + " = " + РасшифровкаВСтр(СуммаСт170Стр) + " Итог [" + КС.ПраваяЧастьСтр + "]";
		Если КС.ЛеваяЧасть = КС.ПраваяЧасть Тогда
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
		Иначе
			ЭтоОшибка = Истина;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
		КонецЕсли;
		ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, ЭтоОшибка,
			ОписаниеОшибки,);
	КонецЦикла;
	СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
	СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
	СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_5_7(СтруктураРезультата)
	
	ОбщееЧислоОшибок    = СтруктураРезультата.КоличествоНайденныхОшибок;
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок;
	СтруктураОшибок     = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы    = НСтр("ru='Проверка раздела 1 Приложения №2 (КС 5.7)'");
	ОписаниеКС      = НСтр("ru='Объем подакцизных нефтепродуктов по строке 060 графы 3 раздела 1 Приложения №2 = Сумма значений по строке 180 графы 3 раздела 2 Приложения № 2 по соответствующему виду подакцизного товара '");
	
	ОписаниеОшибки  = НСтр("ru='Допущена ошибка при определении общего объема подакцизных нефтепродуктов (общая мощность двигателей автомобилей легковых (мотоциклов)) в строке 060 графы 3 Приложения N 2 раздела 1'");
	
	П102Ст10Гр03 = ПоказательПоСтроке("П102Ст10Гр03");
	П102Ст60Гр03 = ПоказательПоСтроке("П102Ст60Гр03");
	П102Ст180Гр03 = ПоказательПоСтроке("П102Ст180Гр03");
	Приложение21 = ДанныеИзДереваРаздела("Приложение21");
	УровеньСтраницы = "";
	Для Каждого СтраницаРаздела Из Приложение21 Цикл
		ДанныеСтраницы = СтраницаРаздела.Данные;
		Если УровеньСтраницы = НомерСтраницыМнУ(СтраницаРаздела.Представление, П102Ст10Гр03.ПорядокСтраницы) Тогда
			Продолжить;
		КонецЕсли;
		УровеньСтраницы = НомерСтраницыМнУ(СтраницаРаздела.Представление, П102Ст10Гр03.ПорядокСтраницы);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, П102Ст60Гр03);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, П102Ст10Гр03);
		Если НЕ ЗначениеЗаполнено(П102Ст10Гр03.Значение) Тогда
			Продолжить;
		КонецЕсли;
		СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
		ЗарегистрироватьФормулуДляРасшифровки(ОписаниеКС);
		ВнестиПоказательВРасшифровку(П102Ст60Гр03, П102Ст60Гр03.Раздел, НомерСтраницыМнУ(СтраницаРаздела.Представление, П102Ст60Гр03.ПорядокСтраницы));
		ВнестиПоказательВРасшифровку(П102Ст10Гр03, П102Ст10Гр03.Раздел, НомерСтраницыМнУ(СтраницаРаздела.Представление, П102Ст10Гр03.ПорядокСтраницы));
		
		УровеньСтраницы2 = "";
		СуммаСт180 = 0;
		СуммаСт180Стр = "";
		Для Каждого СтраницаРаздела2 Из Приложение21 Цикл
			ДанныеСтраницы2 = СтраницаРаздела2.Данные;
			Если УровеньСтраницы2 = НомерСтраницыМнУ(СтраницаРаздела2.Представление, П102Ст180Гр03.ПорядокСтраницы) Тогда
				Продолжить;
			КонецЕсли;
			УровеньСтраницы2 = НомерСтраницыМнУ(СтраницаРаздела2.Представление, П102Ст180Гр03.ПорядокСтраницы);
			Если НЕ УровеньСтраницы = Лев(УровеньСтраницы2, СтрДлина(УровеньСтраницы)) Тогда
				Продолжить;
			КонецЕсли;
			ВставитьЗначениеПоказателя(ДанныеСтраницы2, П102Ст180Гр03);
			ВнестиПоказательВРасшифровку(П102Ст180Гр03, П102Ст180Гр03.Раздел, НомерСтраницыМнУ(СтраницаРаздела2.Представление, П102Ст180Гр03.ПорядокСтраницы));
			СуммаСт180 = СуммаСт180 + П102Ст180Гр03.Значение;
			СуммаСт180Стр = "" + СуммаСт180Стр + П102Ст180Гр03.ЗначениеСтр + " + ";
		КонецЦикла;
		КС = ПоказателиКС(П102Ст60Гр03.Значение, СуммаСт180);
		Расшифровка = КС.ЛеваяЧастьСтр + " = " + РасшифровкаВСтр(СуммаСт180Стр) + " Итог [" + КС.ПраваяЧастьСтр + "]";
		Если КС.ЛеваяЧасть = КС.ПраваяЧасть Тогда
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
		Иначе
			ЭтоОшибка = Истина;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
		КонецЕсли;
		ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, ЭтоОшибка,
			ОписаниеОшибки,);
	КонецЦикла;
	СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
	СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
	СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_5_8(СтруктураРезультата)
	
	ОбщееЧислоОшибок    = СтруктураРезультата.КоличествоНайденныхОшибок;
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок;
	СтруктураОшибок     = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы    = НСтр("ru='Проверка раздела 1 Приложения №2 (КС 5.8)'");
	ОписаниеКС      = НСтр("ru='Объем подакцизных нефтепродуктов по строке 060 графы 3 раздела 1 Приложения №2 = Налоговой базе в графе 2 подраздела 2.5 раздела 2 по коду показателя графы 1 = ""50003"" '");
	
	ОписаниеОшибки  = НСтр("ru='Допущена ошибка при определении суммы акциза в подразделе 2.5 раздела 2'");
	
	П102Ст60Гр03 = ПоказательПоСтроке("П102Ст60Гр03");
	П102Ст10Гр03 = ПоказательПоСтроке("П102Ст10Гр03");
	Р25Ст1Гр02 = ПоказательПоСтроке("Р25Ст1Гр02");
	Р2Ст10Гр03 = ПоказательПоСтроке("Р2Ст10Гр03");
	Р25Ст1Гр01 = ПоказательПоСтроке("Р25Ст1Гр01");
	ДанныеПоказателей = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить();
	СтраницыРаздела2 = ДанныеПоказателей.ДанныеМногостраничныхРазделов.Раздел2;
	Приложение21 = ДанныеИзДереваРаздела("Приложение21");
	
	УровеньСтраницы = "";
	МассивКВПТ = Новый Массив;
	Для Каждого СтраницаРаздела Из Приложение21 Цикл
		ДанныеСтраницы = СтраницаРаздела.Данные;
		Если УровеньСтраницы = НомерСтраницыМнУ(СтраницаРаздела.Представление, П102Ст10Гр03.ПорядокСтраницы) Тогда
			Продолжить;
		КонецЕсли;
		УровеньСтраницы = НомерСтраницыМнУ(СтраницаРаздела.Представление, П102Ст10Гр03.ПорядокСтраницы);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, П102Ст10Гр03);
		Если НЕ ЗначениеЗаполнено(П102Ст10Гр03.Значение) Тогда
			Продолжить;
		КонецЕсли;
		Если МассивКВПТ.Найти(П102Ст10Гр03.Значение) = Неопределено Тогда
			МассивКВПТ.Добавить(П102Ст10Гр03.Значение);
		КонецЕсли;
	КонецЦикла;
	
	УровеньСтраницы = "";
	Для Каждого КодКВПТ Из МассивКВПТ Цикл
		СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
		ЗарегистрироватьФормулуДляРасшифровки(ОписаниеКС);
		СуммаСт60 = 0;
		СуммаСт60Стр = "";
		Для Каждого СтраницаРаздела Из Приложение21 Цикл
			ДанныеСтраницы = СтраницаРаздела.Данные;
			Если УровеньСтраницы = НомерСтраницыМнУ(СтраницаРаздела.Представление, П102Ст10Гр03.ПорядокСтраницы) Тогда
				Продолжить;
			КонецЕсли;
			УровеньСтраницы = НомерСтраницыМнУ(СтраницаРаздела.Представление, П102Ст10Гр03.ПорядокСтраницы);
			ВставитьЗначениеПоказателя(ДанныеСтраницы, П102Ст60Гр03);
			ВставитьЗначениеПоказателя(ДанныеСтраницы, П102Ст10Гр03);
			Если НЕ КодКВПТ = П102Ст10Гр03.Значение Тогда
				Продолжить;
			КонецЕсли;
			ВнестиПоказательВРасшифровку(П102Ст60Гр03, П102Ст60Гр03.Раздел, НомерСтраницыМнУ(СтраницаРаздела.Представление, П102Ст60Гр03.ПорядокСтраницы));
			СуммаСт60 = СуммаСт60 + П102Ст60Гр03.Значение;
			СуммаСт60Стр = СуммаСт60Стр + П102Ст60Гр03.ЗначениеСтр + " + ";
		КонецЦикла;
		СуммаР25 = 0;
		СуммаР25Стр = "";
		Для Каждого СтраницаР2 Из СтраницыРаздела2 Цикл
			ДанныеСтраницыР2 = СтраницаР2.Данные;
			НомерСтраницыР2Стр = СтрокаЧГ0(СтраницыРаздела2.Индекс(СтраницаР2) + 1);
			ВставитьЗначениеПоказателя(ДанныеСтраницыР2, Р2Ст10Гр03);
			Если НЕ Р2Ст10Гр03.Значение = КодКВПТ Тогда
				Продолжить;
			КонецЕсли;
			КолвоСтрокВМногострочнойЧасти = КоличествоСтрок(ДанныеСтраницыР2, "П000250000101_");
			Для Инд = 1 По КолвоСтрокВМногострочнойЧасти Цикл
				ВставитьЗначениеМногострочногоПоказателя(ДанныеСтраницыР2, Р25Ст1Гр01, Инд);
				Если НЕ Р25Ст1Гр01.Значение = "50003" Тогда
					Продолжить;
				КонецЕсли;
				ВставитьЗначениеМногострочногоПоказателя(ДанныеСтраницыР2, Р25Ст1Гр02, Инд);
				ВнестиПоказательВРасшифровку(Р25Ст1Гр02, "Раздел2", НомерСтраницыР2Стр);
				СуммаР25 = СуммаР25 + Р25Ст1Гр02.Значение;
				СуммаР25Стр = СуммаР25Стр + Р25Ст1Гр02.ЗначениеСтр + " + ";
			КонецЦикла;
		КонецЦикла;
		КС = ПоказателиКС(СуммаСт60, СуммаР25);
		Расшифровка = РасшифровкаВСтр(СуммаСт60Стр) + " Итог [" + КС.ЛеваяЧастьСтр + "] = " + РасшифровкаВСтр(СуммаР25Стр) + " Итог [" + КС.ПраваяЧастьСтр + "]";
		Если КС.ЛеваяЧасть = КС.ПраваяЧасть Тогда
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
		Иначе
			ЭтоОшибка = Истина;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
		КонецЕсли;
		ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, ЭтоОшибка,
			ОписаниеОшибки,);
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_5_9(СтруктураРезультата)
	ОбщееЧислоОшибок    = СтруктураРезультата.КоличествоНайденныхОшибок;
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок;
	СтруктураОшибок     = СтруктураРезультата.СтруктураОшибок;
	ТекстФормулы    = НСтр("ru='Проверка раздела 1 Приложения №2 (КС 5.9)'");
	ОписаниеКС      = НСтр("ru='Сумма акциза в строке 060 графы 4 раздела 1 Приложения № 2 = Сумма значений по строке 180 графы 4 раздела 2 Приложений № 2 по соответствующему виду подакцизного товара '");
	ОписаниеОшибки  = НСтр("ru='Допущена ошибка при определении суммы акциза, освобожденной от уплаты в связи с представлением банковских гарантий при подтверждении факта экспорта в налоговом периоде в строке 060 графы 4 Приложения N 2 раздела 1'");
	П102Ст10Гр03 = ПоказательПоСтроке("П102Ст10Гр03");
	П102Ст60Гр04 = ПоказательПоСтроке("П102Ст60Гр04");
	П102Ст180Гр04 = ПоказательПоСтроке("П102Ст180Гр04");
	Приложение21 = ДанныеИзДереваРаздела("Приложение21");
	УровеньСтраницы = "";
	Для Каждого СтраницаРаздела Из Приложение21 Цикл
		ДанныеСтраницы = СтраницаРаздела.Данные;
		Если УровеньСтраницы = НомерСтраницыМнУ(СтраницаРаздела.Представление, П102Ст10Гр03.ПорядокСтраницы) Тогда
			Продолжить;
		КонецЕсли;
		УровеньСтраницы = НомерСтраницыМнУ(СтраницаРаздела.Представление, П102Ст10Гр03.ПорядокСтраницы);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, П102Ст60Гр04);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, П102Ст10Гр03);
		Если НЕ ЗначениеЗаполнено(П102Ст10Гр03.Значение) Тогда
			Продолжить;
		КонецЕсли;
		СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
		ЗарегистрироватьФормулуДляРасшифровки(ОписаниеКС);
		ВнестиПоказательВРасшифровку(П102Ст60Гр04, П102Ст60Гр04.Раздел, НомерСтраницыМнУ(СтраницаРаздела.Представление, П102Ст60Гр04.ПорядокСтраницы));
		ВнестиПоказательВРасшифровку(П102Ст10Гр03, П102Ст10Гр03.Раздел, НомерСтраницыМнУ(СтраницаРаздела.Представление, П102Ст10Гр03.ПорядокСтраницы));
		
		УровеньСтраницы2 = "";
		СуммаСт180 = 0;
		СуммаСт180Стр = "";
		Для Каждого СтраницаРаздела2 Из Приложение21 Цикл
			ДанныеСтраницы2 = СтраницаРаздела2.Данные;
			Если УровеньСтраницы2 = НомерСтраницыМнУ(СтраницаРаздела2.Представление, П102Ст180Гр04.ПорядокСтраницы) Тогда
				Продолжить;
			КонецЕсли;
			УровеньСтраницы2 = НомерСтраницыМнУ(СтраницаРаздела2.Представление, П102Ст180Гр04.ПорядокСтраницы);
			Если НЕ УровеньСтраницы = Лев(УровеньСтраницы2, СтрДлина(УровеньСтраницы)) Тогда
				Продолжить;
			КонецЕсли;
			ВставитьЗначениеПоказателя(ДанныеСтраницы2, П102Ст180Гр04);
			ВнестиПоказательВРасшифровку(П102Ст180Гр04, П102Ст180Гр04.Раздел, НомерСтраницыМнУ(СтраницаРаздела2.Представление, П102Ст180Гр04.ПорядокСтраницы));
			СуммаСт180 = СуммаСт180 + П102Ст180Гр04.Значение;
			СуммаСт180Стр = "" + СуммаСт180Стр + П102Ст180Гр04.ЗначениеСтр + " + ";
		КонецЦикла;
		КС = ПоказателиКС(П102Ст60Гр04.Значение, СуммаСт180);
		Расшифровка = КС.ЛеваяЧастьСтр + " = " + РасшифровкаВСтр(СуммаСт180Стр) + " Итог [" + КС.ПраваяЧастьСтр + "]";
		Если КС.ЛеваяЧасть = КС.ПраваяЧасть Тогда
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
		Иначе
			ЭтоОшибка = Истина;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
		КонецЕсли;
		ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, ЭтоОшибка,
			ОписаниеОшибки,);
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_5_10(СтруктураРезультата)
	ОбщееЧислоОшибок    = СтруктураРезультата.КоличествоНайденныхОшибок;
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок;
	СтруктураОшибок     = СтруктураРезультата.СтруктураОшибок;
	ТекстФормулы    = НСтр("ru='Проверка раздела 1 Приложения №2 (КС 5.10)'");
	ОписаниеКС      = НСтр("ru='Сумма акциза в строке 070 графы 4 раздела 1 Приложения № 2 = Сумма значений  по строке 190 графы 4 раздела 2 Приложения № 2 по соответствующему виду подакцизного товара '");
	ОписаниеОшибки  = НСтр("ru='Допущена ошибка при определении суммы акциза, освобожденной от уплаты в связи с представлением банковских гарантий при подтверждении факта экспорта в предыдущих налоговых периодах в строке 070 графы 4 Приложения N 2 раздела 1'");
	П102Ст10Гр03 = ПоказательПоСтроке("П102Ст10Гр03");
	П102Ст70Гр04 = ПоказательПоСтроке("П102Ст70Гр04");
	П102Ст190Гр04 = ПоказательПоСтроке("П102Ст190Гр04");
	Приложение21 = ДанныеИзДереваРаздела("Приложение21");
	УровеньСтраницы = "";
	Для Каждого СтраницаРаздела Из Приложение21 Цикл
		ДанныеСтраницы = СтраницаРаздела.Данные;
		Если УровеньСтраницы = НомерСтраницыМнУ(СтраницаРаздела.Представление, П102Ст10Гр03.ПорядокСтраницы) Тогда
			Продолжить;
		КонецЕсли;
		УровеньСтраницы = НомерСтраницыМнУ(СтраницаРаздела.Представление, П102Ст10Гр03.ПорядокСтраницы);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, П102Ст70Гр04);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, П102Ст10Гр03);
		Если НЕ ЗначениеЗаполнено(П102Ст10Гр03.Значение) Тогда
			Продолжить;
		КонецЕсли;
		СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
		ЗарегистрироватьФормулуДляРасшифровки(ОписаниеКС);
		ВнестиПоказательВРасшифровку(П102Ст70Гр04, П102Ст70Гр04.Раздел, НомерСтраницыМнУ(СтраницаРаздела.Представление, П102Ст70Гр04.ПорядокСтраницы));
		ВнестиПоказательВРасшифровку(П102Ст10Гр03, П102Ст10Гр03.Раздел, НомерСтраницыМнУ(СтраницаРаздела.Представление, П102Ст10Гр03.ПорядокСтраницы));
		
		УровеньСтраницы2 = "";
		СуммаСт190 = 0;
		СуммаСт190Стр = "";
		Для Каждого СтраницаРаздела2 Из Приложение21 Цикл
			ДанныеСтраницы2 = СтраницаРаздела2.Данные;
			Если УровеньСтраницы2 = НомерСтраницыМнУ(СтраницаРаздела2.Представление, П102Ст190Гр04.ПорядокСтраницы) Тогда
				Продолжить;
			КонецЕсли;
			УровеньСтраницы2 = НомерСтраницыМнУ(СтраницаРаздела2.Представление, П102Ст190Гр04.ПорядокСтраницы);
			Если НЕ УровеньСтраницы = Лев(УровеньСтраницы2, СтрДлина(УровеньСтраницы)) Тогда
				Продолжить;
			КонецЕсли;
			ВставитьЗначениеПоказателя(ДанныеСтраницы2, П102Ст190Гр04);
			ВнестиПоказательВРасшифровку(П102Ст190Гр04, П102Ст190Гр04.Раздел, НомерСтраницыМнУ(СтраницаРаздела2.Представление, П102Ст190Гр04.ПорядокСтраницы));
			СуммаСт190 = СуммаСт190 + П102Ст190Гр04.Значение;
			СуммаСт190Стр = "" + СуммаСт190Стр + П102Ст190Гр04.ЗначениеСтр + " + ";
		КонецЦикла;
		КС = ПоказателиКС(П102Ст70Гр04.Значение, СуммаСт190);
		Расшифровка = КС.ЛеваяЧастьСтр + " = " + РасшифровкаВСтр(СуммаСт190Стр) + " Итог [" + КС.ПраваяЧастьСтр + "]";
		Если КС.ЛеваяЧасть = КС.ПраваяЧасть Тогда
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
		Иначе
			ЭтоОшибка = Истина;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
		КонецЕсли;
		ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, ЭтоОшибка,
			ОписаниеОшибки,);
	КонецЦикла;
	СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
	СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
	СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_5_11(СтруктураРезультата)
	ОбщееЧислоОшибок    = СтруктураРезультата.КоличествоНайденныхОшибок;
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок;
	СтруктураОшибок     = СтруктураРезультата.СтруктураОшибок;
	ТекстФормулы    = НСтр("ru='Проверка раздела 1 Приложения №2 (КС 5.11)'");
	ОписаниеКС      = НСтр("ru='Сумма акциза в строке 080 графы 4 раздела 1 Приложения № 2 = Сумма значений по строке 200 графы 4 раздела 2 Приложения № 2 по соответствующему виду подакцизного товара '");
	ОписаниеОшибки  = НСтр("ru='Допущена ошибка при определении суммы акциза, освобожденной от уплаты в связи с представлением банковских гарантий при подтверждении факта экспорта на конец налогового периода в строке 080 графы 4 Приложения N 2 раздела 1'");
	П102Ст10Гр03 = ПоказательПоСтроке("П102Ст10Гр03");
	П102Ст80Гр04 = ПоказательПоСтроке("П102Ст80Гр04");
	П102Ст200Гр04 = ПоказательПоСтроке("П102Ст200Гр04");
	Приложение21 = ДанныеИзДереваРаздела("Приложение21");
	УровеньСтраницы = "";
	Для Каждого СтраницаРаздела Из Приложение21 Цикл
		ДанныеСтраницы = СтраницаРаздела.Данные;
		Если УровеньСтраницы = НомерСтраницыМнУ(СтраницаРаздела.Представление, П102Ст10Гр03.ПорядокСтраницы) Тогда
			Продолжить;
		КонецЕсли;
		УровеньСтраницы = НомерСтраницыМнУ(СтраницаРаздела.Представление, П102Ст10Гр03.ПорядокСтраницы);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, П102Ст80Гр04);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, П102Ст10Гр03);
		Если НЕ ЗначениеЗаполнено(П102Ст10Гр03.Значение) Тогда
			Продолжить;
		КонецЕсли;
		СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
		ЗарегистрироватьФормулуДляРасшифровки(ОписаниеКС);
		ВнестиПоказательВРасшифровку(П102Ст80Гр04, П102Ст80Гр04.Раздел, НомерСтраницыМнУ(СтраницаРаздела.Представление, П102Ст80Гр04.ПорядокСтраницы));
		ВнестиПоказательВРасшифровку(П102Ст10Гр03, П102Ст10Гр03.Раздел, НомерСтраницыМнУ(СтраницаРаздела.Представление, П102Ст10Гр03.ПорядокСтраницы));
		УровеньСтраницы2 = "";
		СуммаСт200 = 0;
		СуммаСт200Стр = "";
		Для Каждого СтраницаРаздела2 Из Приложение21 Цикл
			ДанныеСтраницы2 = СтраницаРаздела2.Данные;
			Если УровеньСтраницы2 = НомерСтраницыМнУ(СтраницаРаздела2.Представление, П102Ст200Гр04.ПорядокСтраницы) Тогда
				Продолжить;
			КонецЕсли;
			УровеньСтраницы2 = НомерСтраницыМнУ(СтраницаРаздела2.Представление, П102Ст200Гр04.ПорядокСтраницы);
			Если НЕ УровеньСтраницы = Лев(УровеньСтраницы2, СтрДлина(УровеньСтраницы)) Тогда
				Продолжить;
			КонецЕсли;
			ВставитьЗначениеПоказателя(ДанныеСтраницы2, П102Ст200Гр04);
			ВнестиПоказательВРасшифровку(П102Ст200Гр04, П102Ст200Гр04.Раздел, НомерСтраницыМнУ(СтраницаРаздела2.Представление, П102Ст200Гр04.ПорядокСтраницы));
			СуммаСт200 = СуммаСт200 + П102Ст200Гр04.Значение;
			СуммаСт200Стр = "" + СуммаСт200Стр + П102Ст200Гр04.ЗначениеСтр + " + ";
		КонецЦикла;
		КС = ПоказателиКС(П102Ст80Гр04.Значение, СуммаСт200);
		Расшифровка = КС.ЛеваяЧастьСтр + " = " + РасшифровкаВСтр(СуммаСт200Стр) + " Итог [" + КС.ПраваяЧастьСтр + "]";
		Если КС.ЛеваяЧасть = КС.ПраваяЧасть Тогда
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
		Иначе
			ЭтоОшибка = Истина;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
		КонецЕсли;
		ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, ЭтоОшибка,
			ОписаниеОшибки,);
	КонецЦикла;
	СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
	СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
	СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_5_12(СтруктураРезультата)
	ОбщееЧислоОшибок    = СтруктураРезультата.КоличествоНайденныхОшибок;
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок;
	СтруктураОшибок     = СтруктураРезультата.СтруктураОшибок;
	ТекстФормулы    = НСтр("ru='Проверка раздела 1 Приложения №2 (КС 5.12)'");
	ОписаниеКС      = НСтр("ru='Сумма акциза в строке 080 графы 4 раздела 1 Приложения № 2 = Сумме значений по графе 4 строки 060 раздела 1 Приложения № 2 и по графе 4 строки 070 раздела 1 Приложения № 2 '");
	ОписаниеОшибки  = НСтр("ru='Допущена ошибка при определении суммы акциза, освобожденной от уплаты в связи с представлением банковских гарантий при подтверждении факта экспорта на конец налогового периода в строке 080 графы 4 Приложения N 2 раздела 1'");
	П102Ст10Гр03 = ПоказательПоСтроке("П102Ст10Гр03");
	П102Ст80Гр04 = ПоказательПоСтроке("П102Ст80Гр04");
	П102Ст60Гр04 = ПоказательПоСтроке("П102Ст60Гр04");
	П102Ст70Гр04 = ПоказательПоСтроке("П102Ст70Гр04");
	Приложение21 = ДанныеИзДереваРаздела("Приложение21");
	УровеньСтраницы = "";
	Для Каждого СтраницаРаздела Из Приложение21 Цикл
		ДанныеСтраницы = СтраницаРаздела.Данные;
		Если УровеньСтраницы = НомерСтраницыМнУ(СтраницаРаздела.Представление, П102Ст10Гр03.ПорядокСтраницы) Тогда
			Продолжить;
		КонецЕсли;
		УровеньСтраницы = НомерСтраницыМнУ(СтраницаРаздела.Представление, П102Ст10Гр03.ПорядокСтраницы);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, П102Ст10Гр03);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, П102Ст80Гр04);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, П102Ст60Гр04);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, П102Ст70Гр04);
		Если НЕ ЗначениеЗаполнено(П102Ст10Гр03.Значение) Тогда
			Продолжить;
		КонецЕсли;
		СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
		ЗарегистрироватьФормулуДляРасшифровки(ОписаниеКС);
		ВнестиПоказательВРасшифровку(П102Ст80Гр04, П102Ст80Гр04.Раздел, НомерСтраницыМнУ(СтраницаРаздела.Представление, П102Ст80Гр04.ПорядокСтраницы));
		ВнестиПоказательВРасшифровку(П102Ст60Гр04, П102Ст60Гр04.Раздел, НомерСтраницыМнУ(СтраницаРаздела.Представление, П102Ст60Гр04.ПорядокСтраницы));
		ВнестиПоказательВРасшифровку(П102Ст70Гр04, П102Ст70Гр04.Раздел, НомерСтраницыМнУ(СтраницаРаздела.Представление, П102Ст70Гр04.ПорядокСтраницы));
		КС = ПоказателиКС(П102Ст80Гр04.Значение, П102Ст60Гр04.Значение + П102Ст70Гр04.Значение);
		Расшифровка = КС.ЛеваяЧастьСтр + " = " + П102Ст60Гр04.ЗначениеСтр + " + " + П102Ст70Гр04.ЗначениеСтр + " Итог [" + КС.ПраваяЧастьСтр + "]";
		Если КС.ЛеваяЧасть = КС.ПраваяЧасть Тогда
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
		Иначе
			ЭтоОшибка = Истина;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
		КонецЕсли;
		ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, ЭтоОшибка,
			ОписаниеОшибки,);
	КонецЦикла;
	СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
	СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
	СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_5_13(СтруктураРезультата)
	ОбщееЧислоОшибок    = СтруктураРезультата.КоличествоНайденныхОшибок;
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок;
	СтруктураОшибок     = СтруктураРезультата.СтруктураОшибок;
	ТекстФормулы    = НСтр("ru='Проверка раздела 1 Приложения №2 (КС 5.13)'");
	ОписаниеКС      = НСтр("ru='Сумма акциза в строке 090 графы 4 раздела 1 Приложения № 2 = Сумма значений по графе 4 строки 210 раздела 2 Приложений № 2 по соответствующему виду подакцизного товара '");
	ОписаниеОшибки  = НСтр("ru='Допущена ошибка при определении суммы акциза, освобожденной от уплаты в связи с представлением банковских гарантий при неподтверждении факта экспорта на конец налогового периода в строке 090 графы 4 Приложения N 2 раздела 1'");
	
	П102Ст10Гр03 = ПоказательПоСтроке("П102Ст10Гр03");
	П102Ст90Гр04 = ПоказательПоСтроке("П102Ст90Гр04");
	П102Ст210Гр04 = ПоказательПоСтроке("П102Ст210Гр04");
	Приложение21 = ДанныеИзДереваРаздела("Приложение21");
	УровеньСтраницы = "";
	Для Каждого СтраницаРаздела Из Приложение21 Цикл
		ДанныеСтраницы = СтраницаРаздела.Данные;
		Если УровеньСтраницы = НомерСтраницыМнУ(СтраницаРаздела.Представление, П102Ст10Гр03.ПорядокСтраницы) Тогда
			Продолжить;
		КонецЕсли;
		УровеньСтраницы = НомерСтраницыМнУ(СтраницаРаздела.Представление, П102Ст10Гр03.ПорядокСтраницы);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, П102Ст90Гр04);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, П102Ст10Гр03);
		Если НЕ ЗначениеЗаполнено(П102Ст10Гр03.Значение) Тогда
			Продолжить;
		КонецЕсли;
		СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
		ЗарегистрироватьФормулуДляРасшифровки(ОписаниеКС);
		ВнестиПоказательВРасшифровку(П102Ст90Гр04, П102Ст90Гр04.Раздел, НомерСтраницыМнУ(СтраницаРаздела.Представление, П102Ст90Гр04.ПорядокСтраницы));
		ВнестиПоказательВРасшифровку(П102Ст10Гр03, П102Ст10Гр03.Раздел, НомерСтраницыМнУ(СтраницаРаздела.Представление, П102Ст10Гр03.ПорядокСтраницы));
		УровеньСтраницы2 = "";
		СуммаСт210 = 0;
		СуммаСт210Стр = "";
		Для Каждого СтраницаРаздела2 Из Приложение21 Цикл
			ДанныеСтраницы2 = СтраницаРаздела2.Данные;
			Если УровеньСтраницы2 = НомерСтраницыМнУ(СтраницаРаздела2.Представление, П102Ст210Гр04.ПорядокСтраницы) Тогда
				Продолжить;
			КонецЕсли;
			УровеньСтраницы2 = НомерСтраницыМнУ(СтраницаРаздела2.Представление, П102Ст210Гр04.ПорядокСтраницы);
			Если НЕ УровеньСтраницы = Лев(УровеньСтраницы2, СтрДлина(УровеньСтраницы)) Тогда
				Продолжить;
			КонецЕсли;
			ВставитьЗначениеПоказателя(ДанныеСтраницы2, П102Ст210Гр04);
			ВнестиПоказательВРасшифровку(П102Ст210Гр04, П102Ст210Гр04.Раздел, НомерСтраницыМнУ(СтраницаРаздела2.Представление, П102Ст210Гр04.ПорядокСтраницы));
			СуммаСт210 = СуммаСт210 + П102Ст210Гр04.Значение;
			СуммаСт210Стр = "" + СуммаСт210Стр + П102Ст210Гр04.ЗначениеСтр + " + ";
		КонецЦикла;
		КС = ПоказателиКС(П102Ст90Гр04.Значение, СуммаСт210);
		Расшифровка = КС.ЛеваяЧастьСтр + " = " + РасшифровкаВСтр(СуммаСт210Стр) + " Итог [" + КС.ПраваяЧастьСтр + "]";
		Если КС.ЛеваяЧасть = КС.ПраваяЧасть Тогда
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
		Иначе
			ЭтоОшибка = Истина;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
		КонецЕсли;
		ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, ЭтоОшибка,
			ОписаниеОшибки,);
	КонецЦикла;
	СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
	СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
	СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_5_14(СтруктураРезультата)
	ОбщееЧислоОшибок    = СтруктураРезультата.КоличествоНайденныхОшибок;
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок;
	СтруктураОшибок     = СтруктураРезультата.СтруктураОшибок;
	ТекстФормулы    = НСтр("ru='Проверка раздела 1 Приложения №2 (КС 5.14)'");
	ОписаниеКС      = НСтр("ru='Сумма акциза в строке 050 графы 4 раздела 1 Приложения № 2 = Сумме акциза в строке 090 графы 4 раздела 1 Приложения № 2 предыдущего налогового периода по соответствующему виду подакцизного товара'");
	ОписаниеОшибки  = НСтр("ru='Допущена ошибка при определении суммы акциза, освобожденной от уплаты в связи с представлением банковских гарантий при неподтверждении факта экспорта на конец налогового периода в строке 090 графы 4 Приложения N 2 раздела 1'");
	П102Ст10Гр03 = ПоказательПоСтроке("П102Ст10Гр03");
	П102Ст10Гр03ПРП = ПоказательПоСтроке("П102Ст10Гр03");
	П102Ст50Гр04 = ПоказательПоСтроке("П102Ст50Гр04");
	П102Ст90Гр04 = ПоказательПоСтроке("П102Ст90Гр04");
	Приложение21 = ДанныеИзДереваРаздела("Приложение21");
	мДанныеОтчетаПРП = Неопределено; // данные отчета предыдущего расчетного периода
	СохраненныйДокПРП = РегламентированнаяОтчетность.ПолучитьДокументПНП(СтруктураРеквизитовФормы.мСохраненныйДок);
	Если СохраненныйДокПРП <> Неопределено Тогда
		ДанныеПРП = ДанныеИзДереваРаздела("Приложение21", СохраненныйДокПРП);
	Иначе
		Возврат;
	КонецЕсли;
	
	УровеньСтраницы = "";
	МассивКВПТ = Новый Массив;
	Для Каждого СтраницаРаздела Из Приложение21 Цикл
		ДанныеСтраницы = СтраницаРаздела.Данные;
		Если УровеньСтраницы = НомерСтраницыМнУ(СтраницаРаздела.Представление, П102Ст10Гр03.ПорядокСтраницы) Тогда
			Продолжить;
		КонецЕсли;
		УровеньСтраницы = НомерСтраницыМнУ(СтраницаРаздела.Представление, П102Ст10Гр03.ПорядокСтраницы);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, П102Ст10Гр03);
		Если НЕ ЗначениеЗаполнено(П102Ст10Гр03.Значение) Тогда
			Продолжить;
		КонецЕсли;
		Если МассивКВПТ.Найти(П102Ст10Гр03.Значение) = Неопределено Тогда
			МассивКВПТ.Добавить(П102Ст10Гр03.Значение);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого КодКВПТ Из МассивКВПТ Цикл
		СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
		ЗарегистрироватьФормулуДляРасшифровки(ОписаниеКС);
		СуммаСт50 = 0;
		СуммаСт50Стр = "";
		УровеньСтраницы = "";
		Для Каждого СтраницаРаздела Из Приложение21 Цикл
			ДанныеСтраницы = СтраницаРаздела.Данные;
			Если УровеньСтраницы = НомерСтраницыМнУ(СтраницаРаздела.Представление, П102Ст10Гр03.ПорядокСтраницы) Тогда
				Продолжить;
			КонецЕсли;
			УровеньСтраницы = НомерСтраницыМнУ(СтраницаРаздела.Представление, П102Ст10Гр03.ПорядокСтраницы);
			ВставитьЗначениеПоказателя(ДанныеСтраницы, П102Ст50Гр04);
			ВставитьЗначениеПоказателя(ДанныеСтраницы, П102Ст10Гр03);
			Если НЕ КодКВПТ = П102Ст10Гр03.Значение Тогда
				Продолжить;
			КонецЕсли;
			ВнестиПоказательВРасшифровку(П102Ст50Гр04, П102Ст50Гр04.Раздел, НомерСтраницыМнУ(СтраницаРаздела.Представление, П102Ст50Гр04.ПорядокСтраницы));
			СуммаСт50 = СуммаСт50 + П102Ст50Гр04.Значение;
			СуммаСт50Стр = СуммаСт50Стр + П102Ст50Гр04.ЗначениеСтр + " + ";
		КонецЦикла;
		СуммаСт90 = 0;
		СуммаСт90Стр = "";
		УровеньСтраницыПРП = "";
		Для Каждого СтраницаРазделаПРП Из ДанныеПРП Цикл
			ДанныеСтраницыПРП = СтраницаРазделаПРП.Данные;
			Если УровеньСтраницыПРП = НомерСтраницыМнУ(СтраницаРазделаПРП.Представление, П102Ст10Гр03ПРП.ПорядокСтраницы) Тогда
				Продолжить;
			КонецЕсли;
			УровеньСтраницыПРП = НомерСтраницыМнУ(СтраницаРазделаПРП.Представление, П102Ст10Гр03ПРП.ПорядокСтраницы);
			ВставитьЗначениеПоказателя(ДанныеСтраницыПРП, П102Ст90Гр04);
			ВставитьЗначениеПоказателя(ДанныеСтраницыПРП, П102Ст10Гр03ПРП);
			Если НЕ КодКВПТ = П102Ст10Гр03ПРП.Значение Тогда
				Продолжить;
			КонецЕсли;
			РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, П102Ст90Гр04.Имя,
				П102Ст90Гр04.Представление, П102Ст90Гр04.Значение, "", СохраненныйДокПРП, "Приложение21", Неопределено,
				НомерСтраницыМнУ(СтраницаРазделаПРП.Представление, П102Ст90Гр04.ПорядокСтраницы), СчетчикФормулДляРасшифровок);
			СуммаСт90 = СуммаСт90 + П102Ст90Гр04.Значение;
			СуммаСт90Стр = СуммаСт90Стр + П102Ст90Гр04.ЗначениеСтр + " + ";
		КонецЦикла;

		КС = ПоказателиКС(СуммаСт50, СуммаСт90);
		Расшифровка = "Для кода """ + Строка(КодКВПТ) + """ " + РасшифровкаВСтр(СуммаСт50Стр) + " Итог [" + КС.ЛеваяЧастьСтр
			+ "] = " + РасшифровкаВСтр(СуммаСт90Стр) + " Итог [" + КС.ПраваяЧастьСтр + "]";
		Если КС.ЛеваяЧасть = КС.ПраваяЧасть Тогда
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
		Иначе
			ЭтоОшибка = Истина;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
		КонецЕсли;
		ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, ЭтоОшибка,
			ОписаниеОшибки,);
	КонецЦикла;
	СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
	СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
	СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_5_15(СтруктураРезультата)
	ОбщееЧислоОшибок    = СтруктураРезультата.КоличествоНайденныхОшибок;
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок;
	СтруктураОшибок     = СтруктураРезультата.СтруктураОшибок;
	ТекстФормулы    = НСтр("ru='Проверка раздела 1 Приложения №2 (КС 5.15)'");
	ОписаниеКС      = НСтр("ru='Сумма акциза в строке 100 графы 4 раздела 1 Приложения № 2 = Сумма значений по строке 220 графы 3 раздела 2 Приложения № 2 по соответствующему виду подакцизного товара '");
	ОписаниеОшибки  = НСтр("ru='Допущена ошибка при определении превышения суммы акциза, освобожденной от уплаты в связи с представлением банковских гарантий над суммой акциза подтвержденного экспорта на конец налогового периода в строке 100 графы 4 Приложения N 2 раздела 1'");
	П102Ст10Гр03 = ПоказательПоСтроке("П102Ст10Гр03");
	П102Ст100Гр04 = ПоказательПоСтроке("П102Ст100Гр04");
	П102Ст220Гр03 = ПоказательПоСтроке("П102Ст220Гр03");
	Приложение21 = ДанныеИзДереваРаздела("Приложение21");
	УровеньСтраницы = "";
	Для Каждого СтраницаРаздела Из Приложение21 Цикл
		ДанныеСтраницы = СтраницаРаздела.Данные;
		Если УровеньСтраницы = НомерСтраницыМнУ(СтраницаРаздела.Представление, П102Ст10Гр03.ПорядокСтраницы) Тогда
			Продолжить;
		КонецЕсли;
		УровеньСтраницы = НомерСтраницыМнУ(СтраницаРаздела.Представление, П102Ст10Гр03.ПорядокСтраницы);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, П102Ст100Гр04);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, П102Ст10Гр03);
		Если НЕ ЗначениеЗаполнено(П102Ст10Гр03.Значение) Тогда
			Продолжить;
		КонецЕсли;
		СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
		ЗарегистрироватьФормулуДляРасшифровки(ОписаниеКС);
		ВнестиПоказательВРасшифровку(П102Ст100Гр04, П102Ст100Гр04.Раздел, НомерСтраницыМнУ(СтраницаРаздела.Представление, П102Ст100Гр04.ПорядокСтраницы));
		ВнестиПоказательВРасшифровку(П102Ст10Гр03, П102Ст10Гр03.Раздел, НомерСтраницыМнУ(СтраницаРаздела.Представление, П102Ст10Гр03.ПорядокСтраницы));
		УровеньСтраницы2 = "";
		СуммаСт220 = 0;
		СуммаСт220Стр = "";
		Для Каждого СтраницаРаздела2 Из Приложение21 Цикл
			ДанныеСтраницы2 = СтраницаРаздела2.Данные;
			Если УровеньСтраницы2 = НомерСтраницыМнУ(СтраницаРаздела2.Представление, П102Ст220Гр03.ПорядокСтраницы) Тогда
				Продолжить;
			КонецЕсли;
			УровеньСтраницы2 = НомерСтраницыМнУ(СтраницаРаздела2.Представление, П102Ст220Гр03.ПорядокСтраницы);
			Если НЕ УровеньСтраницы = Лев(УровеньСтраницы2, СтрДлина(УровеньСтраницы)) Тогда
				Продолжить;
			КонецЕсли;
			ВставитьЗначениеПоказателя(ДанныеСтраницы2, П102Ст220Гр03);
			ВнестиПоказательВРасшифровку(П102Ст220Гр03, П102Ст220Гр03.Раздел, НомерСтраницыМнУ(СтраницаРаздела2.Представление, П102Ст220Гр03.ПорядокСтраницы));
			СуммаСт220 = СуммаСт220 + П102Ст220Гр03.Значение;
			СуммаСт220Стр = "" + СуммаСт220Стр + П102Ст220Гр03.ЗначениеСтр + " + ";
		КонецЦикла;
		КС = ПоказателиКС(П102Ст100Гр04.Значение, СуммаСт220);
		Расшифровка = КС.ЛеваяЧастьСтр + " = " + РасшифровкаВСтр(СуммаСт220Стр) + " Итог [" + КС.ПраваяЧастьСтр + "]";
		Если КС.ЛеваяЧасть = КС.ПраваяЧасть Тогда
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
		Иначе
			ЭтоОшибка = Истина;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
		КонецЕсли;
		ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, ЭтоОшибка,
			ОписаниеОшибки,);
	КонецЦикла;
	СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
	СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
	СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
КонецПроцедуры

#КонецОбласти

#Область КС_ПроверкиРаздела6

&НаСервере
Процедура ПроверитьКС_6_1(СтруктураРезультата)
	ОбщееЧислоОшибок    = СтруктураРезультата.КоличествоНайденныхОшибок;
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок;
	СтруктураОшибок     = СтруктураРезультата.СтруктураОшибок;
	ТекстФормулы    = НСтр("ru='Проверка раздела 2 Приложения №2 (КС 6.1)'");
	ОписаниеКС      = НСтр("ru='Код вида подакцизного товара в строке 110 раздела 2 Приложения №2 = '")
		+ НСтр("ru='510, 520, 531, 532, 630, 640, 650, 665, 671, 672, 673, 674, 676, 677, 735'");
	ОписаниеОшибки  = НСтр("ru='Неверно указан код вида подакцизного товара в Приложении N 2 раздела 2'");
	П102Ст110Гр03 = ПоказательПоСтроке("П102Ст110Гр03");
	Приложение21 = ДанныеИзДереваРаздела("Приложение21");
	УровеньСтраницы = "";
	КодыПоказателей_Приложение21 = ПолучитьСтрокуИзСпискаВыбора("КодыВидаПодакцизныхТоваров");
	Для Каждого СтраницаРаздела Из Приложение21 Цикл
		ДанныеСтраницы = СтраницаРаздела.Данные;
		Если УровеньСтраницы = НомерСтраницыМнУ(СтраницаРаздела.Представление, П102Ст110Гр03.ПорядокСтраницы) Тогда
			Продолжить;
		КонецЕсли;
		УровеньСтраницы = НомерСтраницыМнУ(СтраницаРаздела.Представление, П102Ст110Гр03.ПорядокСтраницы);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, П102Ст110Гр03);
		Если НЕ ЗначениеЗаполнено(П102Ст110Гр03.Значение) Тогда
			Продолжить;
		КонецЕсли;
		СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
		ЗарегистрироватьФормулуДляРасшифровки(ОписаниеКС);
		ВнестиПоказательВРасшифровку(П102Ст110Гр03, П102Ст110Гр03.Раздел, НомерСтраницыМнУ(СтраницаРаздела.Представление, 
			П102Ст110Гр03.ПорядокСтраницы));
		КСВыполнено = КодНайден(П102Ст110Гр03.Значение, КодыПоказателей_Приложение21);
		Расшифровка = ?(ЗначениеЗаполнено(П102Ст110Гр03.ЗначениеСтр), """" + П102Ст110Гр03.ЗначениеСтр + """", "[ ]")
			+ " = 510, 520, 531, 532, 630, 640, 650, 665, 671, 672, 673, 674, 676, 677, 735";
		Если КСВыполнено Тогда
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
		Иначе
			ЭтоОшибка = Истина;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
		КонецЕсли;
		ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, 
			Расшифровка, ЭтоОшибка,
			ОписаниеОшибки,);
	КонецЦикла;
	СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
	СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
	СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_6_1_v17(СтруктураРезультата)
	ОбщееЧислоОшибок    = СтруктураРезультата.КоличествоНайденныхОшибок;
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок;
	СтруктураОшибок     = СтруктураРезультата.СтруктураОшибок;
	ТекстФормулы    = НСтр("ru='Проверка раздела 2 Приложения №2 (КС 6.1)'");
	ОписаниеКС      = НСтр("ru='Код вида подакцизного товара в строке 110 раздела 2 Приложения №2 = 470, 471, 472, '")
		+ НСтр("ru='510, 520, 531, 532, 630, 640, 650, 665, 671, 672, 673, 674, 676, 677, 735'");
	ОписаниеОшибки  = НСтр("ru='Неверно указан код вида подакцизного товара в Приложении N 2 раздела 2'");
	П102Ст110Гр03 = ПоказательПоСтроке("П102Ст110Гр03");
	Приложение21 = ДанныеИзДереваРаздела("Приложение21");
	УровеньСтраницы = "";
	КодыПоказателей_Приложение21 = ПолучитьСтрокуИзСпискаВыбора("КодыВидаПодакцизныхТоваров_20170101");
	Для Каждого СтраницаРаздела Из Приложение21 Цикл
		ДанныеСтраницы = СтраницаРаздела.Данные;
		Если УровеньСтраницы = НомерСтраницыМнУ(СтраницаРаздела.Представление, П102Ст110Гр03.ПорядокСтраницы) Тогда
			Продолжить;
		КонецЕсли;
		УровеньСтраницы = НомерСтраницыМнУ(СтраницаРаздела.Представление, П102Ст110Гр03.ПорядокСтраницы);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, П102Ст110Гр03);
		Если НЕ ЗначениеЗаполнено(П102Ст110Гр03.Значение) Тогда
			Продолжить;
		КонецЕсли;
		СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
		ЗарегистрироватьФормулуДляРасшифровки(ОписаниеКС);
		ВнестиПоказательВРасшифровку(П102Ст110Гр03, П102Ст110Гр03.Раздел, НомерСтраницыМнУ(СтраницаРаздела.Представление, 
			П102Ст110Гр03.ПорядокСтраницы));
		КСВыполнено = КодНайден(П102Ст110Гр03.Значение, КодыПоказателей_Приложение21);
		Расшифровка = ?(ЗначениеЗаполнено(П102Ст110Гр03.ЗначениеСтр), """" + П102Ст110Гр03.ЗначениеСтр + """", "[ ]")
			+ " = 470, 471, 472, 510, 520, 531, 532, 630, 640, 650, 665, 671, 672, 673, 674, 676, 677, 735";
		Если КСВыполнено Тогда
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
		Иначе
			ЭтоОшибка = Истина;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
		КонецЕсли;
		ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, 
			Расшифровка, ЭтоОшибка,
			ОписаниеОшибки,);
	КонецЦикла;
	СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
	СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
	СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_6_1_v18(СтруктураРезультата)
	ОбщееЧислоОшибок    = СтруктураРезультата.КоличествоНайденныхОшибок;
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок;
	СтруктураОшибок     = СтруктураРезультата.СтруктураОшибок;
	ТекстФормулы    = НСтр("ru='Проверка раздела 2 Приложения №2 (КС 6.1)'");
	ОписаниеКС      = НСтр("ru='Код вида подакцизного товара в строке 110 раздела 2 Приложения №2 = 470, 471, 472, '")
		+ НСтр("ru='510, 520, 531, 532, 533, 534, 535, 536, 630, 640, 650, 665, 671, 672, 673, 674, 676, 677, 735'");
	ОписаниеОшибки  = НСтр("ru='Неверно указан код вида подакцизного товара в Приложении N 2 раздела 2'");
	П102Ст110Гр03 = ПоказательПоСтроке("П102Ст110Гр03");
	Приложение21 = ДанныеИзДереваРаздела("Приложение21");
	УровеньСтраницы = "";
	КодыПоказателей_Приложение21 = ПолучитьСтрокуИзСпискаВыбора("КодыВидаПодакцизныхТоваров_20180101");
	Для Каждого СтраницаРаздела Из Приложение21 Цикл
		ДанныеСтраницы = СтраницаРаздела.Данные;
		Если УровеньСтраницы = НомерСтраницыМнУ(СтраницаРаздела.Представление, П102Ст110Гр03.ПорядокСтраницы) Тогда
			Продолжить;
		КонецЕсли;
		УровеньСтраницы = НомерСтраницыМнУ(СтраницаРаздела.Представление, П102Ст110Гр03.ПорядокСтраницы);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, П102Ст110Гр03);
		Если НЕ ЗначениеЗаполнено(П102Ст110Гр03.Значение) Тогда
			Продолжить;
		КонецЕсли;
		СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
		ЗарегистрироватьФормулуДляРасшифровки(ОписаниеКС);
		ВнестиПоказательВРасшифровку(П102Ст110Гр03, П102Ст110Гр03.Раздел, НомерСтраницыМнУ(СтраницаРаздела.Представление, 
			П102Ст110Гр03.ПорядокСтраницы));
		КСВыполнено = КодНайден(П102Ст110Гр03.Значение, КодыПоказателей_Приложение21);
		Расшифровка = ?(ЗначениеЗаполнено(П102Ст110Гр03.ЗначениеСтр), """" + П102Ст110Гр03.ЗначениеСтр + """", "[ ]")
			+ " = 470, 471, 472, 510, 520, 531, 532, 533, 534, 535, 536, 630, 640, 650, 665, 671, 672, 673, 674, 676, "
			+ "677, 735";
		Если КСВыполнено Тогда
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
		Иначе
			ЭтоОшибка = Истина;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
		КонецЕсли;
		ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, 
			Расшифровка, ЭтоОшибка,
			ОписаниеОшибки,);
	КонецЦикла;
	СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
	СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
	СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_6_1_v19(СтруктураРезультата)
	ОбщееЧислоОшибок    = СтруктураРезультата.КоличествоНайденныхОшибок;
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок;
	СтруктураОшибок     = СтруктураРезультата.СтруктураОшибок;
	ТекстФормулы    = НСтр("ru='Проверка раздела 2 Приложения №2 (КС 6.1)'");
	ОписаниеКС      = НСтр("ru='Код вида подакцизного товара в строке 110 раздела 2 Приложения №2 = 470, 471, 472, '")
		+ НСтр("ru='510, 520, 531, 532, 533, 534, 535, 536, 630, 640, 650, 665, 671, 672, 673, 674, 676, 677, 678, 679, '")
		+ НСтр("ru='735'");
	ОписаниеОшибки  = НСтр("ru='Неверно указан код вида подакцизного товара в Приложении N 2 раздела 2'");
	П102Ст110Гр03 = ПоказательПоСтроке("П102Ст110Гр03");
	Приложение21 = ДанныеИзДереваРаздела("Приложение21");
	УровеньСтраницы = "";
	КодыПоказателей_Приложение21 = ПолучитьСтрокуИзСпискаВыбора("КодыВидаПодакцизныхТоваров_20190101");
	Для Каждого СтраницаРаздела Из Приложение21 Цикл
		ДанныеСтраницы = СтраницаРаздела.Данные;
		Если УровеньСтраницы = НомерСтраницыМнУ(СтраницаРаздела.Представление, П102Ст110Гр03.ПорядокСтраницы) Тогда
			Продолжить;
		КонецЕсли;
		УровеньСтраницы = НомерСтраницыМнУ(СтраницаРаздела.Представление, П102Ст110Гр03.ПорядокСтраницы);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, П102Ст110Гр03);
		Если НЕ ЗначениеЗаполнено(П102Ст110Гр03.Значение) Тогда
			Продолжить;
		КонецЕсли;
		СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
		ЗарегистрироватьФормулуДляРасшифровки(ОписаниеКС);
		ВнестиПоказательВРасшифровку(П102Ст110Гр03, П102Ст110Гр03.Раздел, НомерСтраницыМнУ(СтраницаРаздела.Представление, 
			П102Ст110Гр03.ПорядокСтраницы));
		КСВыполнено = КодНайден(П102Ст110Гр03.Значение, КодыПоказателей_Приложение21);
		Расшифровка = ?(ЗначениеЗаполнено(П102Ст110Гр03.ЗначениеСтр), """" + П102Ст110Гр03.ЗначениеСтр + """", "[ ]")
			+ " = 470, 471, 472, 510, 520, 531, 532, 533, 534, 535, 536, 630, 640, 650, 665, 671, 672, 673, 674, 676, "
			+ "677, 678, 679, 735";
		Если КСВыполнено Тогда
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
		Иначе
			ЭтоОшибка = Истина;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
		КонецЕсли;
		ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, 
			Расшифровка, ЭтоОшибка,
			ОписаниеОшибки,);
	КонецЦикла;
	СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
	СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
	СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_6_2(СтруктураРезультата)
	ОбщееЧислоОшибок    = СтруктураРезультата.КоличествоНайденныхОшибок;
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок;
	СтруктураОшибок     = СтруктураРезультата.СтруктураОшибок;
	ТекстФормулы    = НСтр("ru='Проверка раздела 2 Приложения №2 (КС 6.2)'");
	ОписаниеКС      = НСтр("ru='Дата выдачи банковской гарантии в строке 115 раздела 2 Приложения № 2 должна быть ранее Даты начала действия банковской гарантии в строке 130 раздела 2 Приложения № 2'");
	ОписаниеОшибки  = НСтр("ru='Неверно указана дата выдачи банковской гарантии в Приложении N 2 раздела 2'");
	П102Ст115Гр03 = ПоказательПоСтроке("П102Ст115Гр03");
	П102Ст130Гр03 = ПоказательПоСтроке("П102Ст130Гр03");
	Приложение21 = ДанныеИзДереваРаздела("Приложение21");
	УровеньСтраницы = "";
	Для Каждого СтраницаРаздела Из Приложение21 Цикл
		ДанныеСтраницы = СтраницаРаздела.Данные;
		Если УровеньСтраницы = НомерСтраницыМнУ(СтраницаРаздела.Представление, П102Ст115Гр03.ПорядокСтраницы) Тогда
			Продолжить;
		КонецЕсли;
		УровеньСтраницы = НомерСтраницыМнУ(СтраницаРаздела.Представление, П102Ст115Гр03.ПорядокСтраницы);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, П102Ст115Гр03);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, П102Ст130Гр03);
		Если НЕ (ЗначениеЗаполнено(П102Ст115Гр03.Значение) И ЗначениеЗаполнено(П102Ст130Гр03.Значение)) Тогда
			Продолжить;
		КонецЕсли;
		СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
		ЗарегистрироватьФормулуДляРасшифровки(ОписаниеКС);
		ВнестиПоказательВРасшифровку(П102Ст115Гр03, П102Ст115Гр03.Раздел, НомерСтраницыМнУ(СтраницаРаздела.Представление, П102Ст115Гр03.ПорядокСтраницы));
		ВнестиПоказательВРасшифровку(П102Ст130Гр03, П102Ст130Гр03.Раздел, НомерСтраницыМнУ(СтраницаРаздела.Представление, П102Ст130Гр03.ПорядокСтраницы));
	
		КС = ПоказателиКС(П102Ст115Гр03.Значение, П102Ст130Гр03.Значение);
		Расшифровка = КС.ЛеваяЧастьСтр + " < " + КС.ПраваяЧастьСтр;
		
		Если КС.ЛеваяЧасть < КС.ПраваяЧасть Тогда
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
			
		Иначе
			ЭтоОшибка = Истина;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
			
		КонецЕсли;
		
		ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, ЭтоОшибка,
			ОписаниеОшибки,);
	КонецЦикла;
	СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
	СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
	СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_6_3(СтруктураРезультата)
	ОбщееЧислоОшибок    = СтруктураРезультата.КоличествоНайденныхОшибок;
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок;
	СтруктураОшибок     = СтруктураРезультата.СтруктураОшибок;
	ТекстФормулы    = НСтр("ru='Проверка раздела 2 Приложения №2 (КС 6.3)'");
	ОписаниеКС      = НСтр("ru='Дата выдачи банковской гарантии в строке 115 раздела 2 Приложения № 2 должна быть ранее Даты окончания действия банковской гарантии в строке 140 раздела 2 Приложения № 2'");
	ОписаниеОшибки  = НСтр("ru='Неверно указана дата выдачи банковской гарантии в Приложении N 2 раздела 2'");
	П102Ст115Гр03 = ПоказательПоСтроке("П102Ст115Гр03");
	П102Ст140Гр03 = ПоказательПоСтроке("П102Ст140Гр03");
	Приложение21 = ДанныеИзДереваРаздела("Приложение21");
	УровеньСтраницы = "";
	Для Каждого СтраницаРаздела Из Приложение21 Цикл
		ДанныеСтраницы = СтраницаРаздела.Данные;
		Если УровеньСтраницы = НомерСтраницыМнУ(СтраницаРаздела.Представление, П102Ст115Гр03.ПорядокСтраницы) Тогда
			Продолжить;
		КонецЕсли;
		УровеньСтраницы = НомерСтраницыМнУ(СтраницаРаздела.Представление, П102Ст115Гр03.ПорядокСтраницы);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, П102Ст115Гр03);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, П102Ст140Гр03);
		Если НЕ (ЗначениеЗаполнено(П102Ст115Гр03.Значение) И ЗначениеЗаполнено(П102Ст140Гр03.Значение)) Тогда
			Продолжить;
		КонецЕсли;
		СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
		ЗарегистрироватьФормулуДляРасшифровки(ОписаниеКС);
		ВнестиПоказательВРасшифровку(П102Ст115Гр03, П102Ст115Гр03.Раздел, НомерСтраницыМнУ(СтраницаРаздела.Представление, П102Ст115Гр03.ПорядокСтраницы));
		ВнестиПоказательВРасшифровку(П102Ст140Гр03, П102Ст140Гр03.Раздел, НомерСтраницыМнУ(СтраницаРаздела.Представление, П102Ст140Гр03.ПорядокСтраницы));
		КС = ПоказателиКС(П102Ст115Гр03.Значение, П102Ст140Гр03.Значение);
		Расшифровка = КС.ЛеваяЧастьСтр + " < " + КС.ПраваяЧастьСтр;
		Если КС.ЛеваяЧасть < КС.ПраваяЧасть Тогда
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
		Иначе
			ЭтоОшибка = Истина;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
		КонецЕсли;
		ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, ЭтоОшибка,
			ОписаниеОшибки,);
	КонецЦикла;
	СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
	СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
	СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_6_4(СтруктураРезультата)
	ОбщееЧислоОшибок    = СтруктураРезультата.КоличествоНайденныхОшибок;
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок;
	СтруктураОшибок     = СтруктураРезультата.СтруктураОшибок;
	ТекстФормулы    = НСтр("ru='Проверка раздела 2 Приложения №2 (КС 6.4)'");
	ОписаниеКС      = НСтр("ru='Дата начала действия банковской гарантии в строке 130 раздела 2 Приложения № 2 должна быть ранее Даты окончания действия банковской гарантии в строке 140 раздела 2 Приложения № 2'");
	ОписаниеОшибки  = НСтр("ru='Неверно указана дата начала действия банковской гарантии в Приложении N 2 раздела 2'");
	П102Ст130Гр03 = ПоказательПоСтроке("П102Ст130Гр03");
	П102Ст140Гр03 = ПоказательПоСтроке("П102Ст140Гр03");
	Приложение21 = ДанныеИзДереваРаздела("Приложение21");
	УровеньСтраницы = "";
	Для Каждого СтраницаРаздела Из Приложение21 Цикл
		ДанныеСтраницы = СтраницаРаздела.Данные;
		Если УровеньСтраницы = НомерСтраницыМнУ(СтраницаРаздела.Представление, П102Ст130Гр03.ПорядокСтраницы) Тогда
			Продолжить;
		КонецЕсли;
		УровеньСтраницы = НомерСтраницыМнУ(СтраницаРаздела.Представление, П102Ст130Гр03.ПорядокСтраницы);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, П102Ст130Гр03);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, П102Ст140Гр03);
		Если НЕ (ЗначениеЗаполнено(П102Ст130Гр03.Значение) И ЗначениеЗаполнено(П102Ст140Гр03.Значение)) Тогда
			Продолжить;
		КонецЕсли;
		СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
		ЗарегистрироватьФормулуДляРасшифровки(ОписаниеКС);
		ВнестиПоказательВРасшифровку(П102Ст130Гр03, П102Ст130Гр03.Раздел, НомерСтраницыМнУ(СтраницаРаздела.Представление, П102Ст130Гр03.ПорядокСтраницы));
		ВнестиПоказательВРасшифровку(П102Ст140Гр03, П102Ст140Гр03.Раздел, НомерСтраницыМнУ(СтраницаРаздела.Представление, П102Ст140Гр03.ПорядокСтраницы));
		КС = ПоказателиКС(П102Ст130Гр03.Значение, П102Ст140Гр03.Значение);
		Расшифровка = КС.ЛеваяЧастьСтр + " < " + КС.ПраваяЧастьСтр;
		Если КС.ЛеваяЧасть < КС.ПраваяЧасть Тогда
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
		Иначе
			ЭтоОшибка = Истина;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
		КонецЕсли;
		ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, ЭтоОшибка,
			ОписаниеОшибки,);
	КонецЦикла;
	СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
	СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
	СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_6_10(СтруктураРезультата)
	
	ОбщееЧислоОшибок    = СтруктураРезультата.КоличествоНайденныхОшибок;
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок;
	СтруктураОшибок     = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы    = НСтр("ru='Проверка раздела 2 Приложения №2 (КС 6.10)'");
	ОписаниеКС      = НСтр("ru='Объем реализованных на экспорт подакцизных нефтепродуктов в строке 200 графы 3 раздела 2 Приложения № 2 = Объем реализованных на экспорт подакцизных нефтепродуктов в строке 180 графы 3 раздела 2 Приложения № 2 + Объем реализованных на экспорт подакцизных нефтепродуктов в строке 190 графы 3 раздела 2 Приложения № 2 '");
	
	ОписаниеОшибки  = НСтр("ru='Допущена ошибка при определении налоговой базы на конец налогового периода в строке 200 графы 3 Приложения N 2 раздела 2'");
	П102Ст10Гр03 = ПоказательПоСтроке("П102Ст10Гр03");
	П102Ст200Гр03 = ПоказательПоСтроке("П102Ст200Гр03");
	П102Ст180Гр03 = ПоказательПоСтроке("П102Ст180Гр03");
	П102Ст190Гр03 = ПоказательПоСтроке("П102Ст190Гр03");
	Приложение21 = ДанныеИзДереваРаздела("Приложение21");
	УровеньСтраницы = "";
	Для Каждого СтраницаРаздела Из Приложение21 Цикл
		ДанныеСтраницы = СтраницаРаздела.Данные;
		Если УровеньСтраницы = НомерСтраницыМнУ(СтраницаРаздела.Представление, П102Ст200Гр03.ПорядокСтраницы) Тогда
			Продолжить;
		КонецЕсли;
		УровеньСтраницы = НомерСтраницыМнУ(СтраницаРаздела.Представление, П102Ст200Гр03.ПорядокСтраницы);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, П102Ст10Гр03);
		Если НЕ ЗначениеЗаполнено(П102Ст10Гр03.Значение) Тогда
			Продолжить;
		КонецЕсли;
		СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
		ЗарегистрироватьФормулуДляРасшифровки(ОписаниеКС);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, П102Ст200Гр03);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, П102Ст180Гр03);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, П102Ст190Гр03);
		ВнестиПоказательВРасшифровку(П102Ст200Гр03, П102Ст200Гр03.Раздел, НомерСтраницыМнУ(СтраницаРаздела.Представление, П102Ст200Гр03.ПорядокСтраницы));
		ВнестиПоказательВРасшифровку(П102Ст180Гр03, П102Ст180Гр03.Раздел, НомерСтраницыМнУ(СтраницаРаздела.Представление, П102Ст180Гр03.ПорядокСтраницы));
		ВнестиПоказательВРасшифровку(П102Ст190Гр03, П102Ст190Гр03.Раздел, НомерСтраницыМнУ(СтраницаРаздела.Представление, П102Ст190Гр03.ПорядокСтраницы));
		КС = ПоказателиКС(П102Ст200Гр03.Значение, П102Ст180Гр03.Значение + П102Ст190Гр03.Значение);
		Расшифровка = КС.ЛеваяЧастьСтр + " = " + П102Ст180Гр03.ЗначениеСтр + " + " + П102Ст190Гр03.ЗначениеСтр + " Итог [" + КС.ПраваяЧастьСтр + "]";
		Если КС.ЛеваяЧасть = КС.ПраваяЧасть Тогда
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
		Иначе
			ЭтоОшибка = Истина;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
		КонецЕсли;
		ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, ЭтоОшибка,
			ОписаниеОшибки,);
	КонецЦикла;
	СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
	СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
	СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_6_12(СтруктураРезультата)
	ОбщееЧислоОшибок    = СтруктураРезультата.КоличествоНайденныхОшибок;
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок;
	СтруктураОшибок     = СтруктураРезультата.СтруктураОшибок;
	ТекстФормулы    = НСтр("ru='Проверка раздела 2 Приложения №2 (КС 6.12)'");
	ОписаниеКС      = НСтр("ru='Сумма акциза в строке 200 графы 4 раздела 2 Приложения № 2 = Сумма акциза в строке 180 графы 4 раздела 2 Приложения № 2 + Сумма акциза в строке 190 графы 4 раздела 2 Приложения № 2 '");
	ОписаниеОшибки  = НСтр("ru='Допущена ошибка при определении суммы акциза, освобожденной от уплаты по банковской гарантии при подтверждении факта экспорта на конец налогового периода в строке 200 графы 4 Приложения N 2 раздела 2'");
	П102Ст10Гр03 = ПоказательПоСтроке("П102Ст10Гр03");
	П102Ст200Гр04 = ПоказательПоСтроке("П102Ст200Гр04");
	П102Ст180Гр04 = ПоказательПоСтроке("П102Ст180Гр04");
	П102Ст190Гр04 = ПоказательПоСтроке("П102Ст190Гр04");
	Приложение21 = ДанныеИзДереваРаздела("Приложение21");
	УровеньСтраницы = "";
	Для Каждого СтраницаРаздела Из Приложение21 Цикл
		ДанныеСтраницы = СтраницаРаздела.Данные;
		Если УровеньСтраницы = НомерСтраницыМнУ(СтраницаРаздела.Представление, П102Ст200Гр04.ПорядокСтраницы) Тогда
			Продолжить;
		КонецЕсли;
		УровеньСтраницы = НомерСтраницыМнУ(СтраницаРаздела.Представление, П102Ст200Гр04.ПорядокСтраницы);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, П102Ст10Гр03);
		Если НЕ ЗначениеЗаполнено(П102Ст10Гр03.Значение) Тогда
			Продолжить;
		КонецЕсли;
		СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
		ЗарегистрироватьФормулуДляРасшифровки(ОписаниеКС);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, П102Ст200Гр04);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, П102Ст180Гр04);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, П102Ст190Гр04);
		ВнестиПоказательВРасшифровку(П102Ст200Гр04, П102Ст200Гр04.Раздел, НомерСтраницыМнУ(СтраницаРаздела.Представление, П102Ст200Гр04.ПорядокСтраницы));
		ВнестиПоказательВРасшифровку(П102Ст180Гр04, П102Ст180Гр04.Раздел, НомерСтраницыМнУ(СтраницаРаздела.Представление, П102Ст180Гр04.ПорядокСтраницы));
		ВнестиПоказательВРасшифровку(П102Ст190Гр04, П102Ст190Гр04.Раздел, НомерСтраницыМнУ(СтраницаРаздела.Представление, П102Ст190Гр04.ПорядокСтраницы));
		КС = ПоказателиКС(П102Ст200Гр04.Значение, П102Ст180Гр04.Значение + П102Ст190Гр04.Значение);
		Расшифровка = КС.ЛеваяЧастьСтр + " = " + П102Ст180Гр04.ЗначениеСтр + " + " + П102Ст190Гр04.ЗначениеСтр + " Итог [" + КС.ПраваяЧастьСтр + "]";
		Если КС.ЛеваяЧасть = КС.ПраваяЧасть Тогда
		ЭтоОшибка = Ложь;
		ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
		Иначе
			ЭтоОшибка = Истина;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
		КонецЕсли;
		ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, ЭтоОшибка,
			ОписаниеОшибки,);
	КонецЦикла;
	СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
	СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
	СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_6_14(СтруктураРезультата)
	ОбщееЧислоОшибок    = СтруктураРезультата.КоличествоНайденныхОшибок;
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок;
	СтруктураОшибок     = СтруктураРезультата.СтруктураОшибок;
	ТекстФормулы    = НСтр("ru='Проверка раздела 2 Приложения №2 (КС 6.14)'");
	ОписаниеКС      = НСтр("ru='Объем реализованных на экспорт подакцизных нефтепродуктов в строке 210 графы 3 раздела 2 Приложения № 2 = Сумма значений всех строк 160 графы 3 раздела 2 Приложения № 2 - Сумма значений всех строк 200 графы 3 раздела 2 Приложения № 2 для соответствующей банковской гарантии (строка 120 раздела 2 Приложения № 2) '");
	ОписаниеОшибки  = НСтр("ru='Допущена ошибка при определении налоговой базы на конец налогового периода в строке 210 графы 3 Приложения N 2 раздела 2'");
	П102Ст210Гр03 = ПоказательПоСтроке("П102Ст210Гр03");
	П102Ст160Гр03 = ПоказательПоСтроке("П102Ст160Гр03");
	П102Ст200Гр03 = ПоказательПоСтроке("П102Ст200Гр03");
	П102Ст120Гр03 = ПоказательПоСтроке("П102Ст120Гр03");
	Приложение21 = ДанныеИзДереваРаздела("Приложение21");
	УровеньСтраницы = "";
	Для Каждого СтраницаРаздела Из Приложение21 Цикл
		ДанныеСтраницы = СтраницаРаздела.Данные;
		Если УровеньСтраницы = НомерСтраницыМнУ(СтраницаРаздела.Представление, П102Ст120Гр03.ПорядокСтраницы) Тогда
			Продолжить;
		КонецЕсли;
		УровеньСтраницы = НомерСтраницыМнУ(СтраницаРаздела.Представление, П102Ст120Гр03.ПорядокСтраницы);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, П102Ст120Гр03);
		Если НЕ ЗначениеЗаполнено(П102Ст120Гр03.Значение) Тогда
			Продолжить;
		КонецЕсли;
		СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
		ЗарегистрироватьФормулуДляРасшифровки(ОписаниеКС);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, П102Ст210Гр03);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, П102Ст160Гр03);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, П102Ст200Гр03);
		ВнестиПоказательВРасшифровку(П102Ст120Гр03, П102Ст120Гр03.Раздел, НомерСтраницыМнУ(СтраницаРаздела.Представление, П102Ст120Гр03.ПорядокСтраницы));
		ВнестиПоказательВРасшифровку(П102Ст210Гр03, П102Ст210Гр03.Раздел, НомерСтраницыМнУ(СтраницаРаздела.Представление, П102Ст210Гр03.ПорядокСтраницы));
		ВнестиПоказательВРасшифровку(П102Ст160Гр03, П102Ст160Гр03.Раздел, НомерСтраницыМнУ(СтраницаРаздела.Представление, П102Ст160Гр03.ПорядокСтраницы));
		ВнестиПоказательВРасшифровку(П102Ст200Гр03, П102Ст200Гр03.Раздел, НомерСтраницыМнУ(СтраницаРаздела.Представление, П102Ст200Гр03.ПорядокСтраницы));
		КС = ПоказателиКС(П102Ст210Гр03.Значение, П102Ст160Гр03.Значение - П102Ст200Гр03.Значение);
		Расшифровка = КС.ЛеваяЧастьСтр + " = " + П102Ст160Гр03.ЗначениеСтр + " - " + П102Ст200Гр03.ЗначениеСтр + " Итог [" + КС.ПраваяЧастьСтр + "]";
		Если КС.ЛеваяЧасть = КС.ПраваяЧасть Тогда
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
		Иначе
			ЭтоОшибка = Истина;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
		КонецЕсли;
		ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, ЭтоОшибка,
			ОписаниеОшибки,);
	КонецЦикла;
	СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
	СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
	СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_6_16(СтруктураРезультата)
	ОбщееЧислоОшибок    = СтруктураРезультата.КоличествоНайденныхОшибок;
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок;
	СтруктураОшибок     = СтруктураРезультата.СтруктураОшибок;
	ТекстФормулы    = НСтр("ru='Проверка раздела 2 Приложения №2 (КС 6.16)'");
	ОписаниеКС      = НСтр("ru='Сумма акциза в строке 210 графы 4 раздела 2 Приложения № 2 = Сумма всех значений по строке 160 графы 4 раздела 2 Приложения № 2 – Сумма всех значений по строке 200 графы 4 раздела 2 Приложения № 2 для соответствующей банковской гарантии (строка 120 раздела 2 Приложения № 2) '");
	ОписаниеОшибки  = НСтр("ru='Допущена ошибка при определении суммы акциза, освобожденной от уплаты по банковской гарантии при неподтверждении факта экспорта на конец налогового периода в строке 210 графы 4 Приложения N 2 раздела 2'");
	П102Ст210Гр04 = ПоказательПоСтроке("П102Ст210Гр04");
	П102Ст160Гр04 = ПоказательПоСтроке("П102Ст160Гр04");
	П102Ст200Гр04 = ПоказательПоСтроке("П102Ст200Гр04");
	П102Ст120Гр03 = ПоказательПоСтроке("П102Ст120Гр03");
	Приложение21 = ДанныеИзДереваРаздела("Приложение21");
	УровеньСтраницы = "";
	Для Каждого СтраницаРаздела Из Приложение21 Цикл
		ДанныеСтраницы = СтраницаРаздела.Данные;
		Если УровеньСтраницы = НомерСтраницыМнУ(СтраницаРаздела.Представление, П102Ст120Гр03.ПорядокСтраницы) Тогда
			Продолжить;
		КонецЕсли;
		УровеньСтраницы = НомерСтраницыМнУ(СтраницаРаздела.Представление, П102Ст120Гр03.ПорядокСтраницы);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, П102Ст120Гр03);
		Если НЕ ЗначениеЗаполнено(П102Ст120Гр03.Значение) Тогда
			Продолжить;
		КонецЕсли;
		СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
		ЗарегистрироватьФормулуДляРасшифровки(ОписаниеКС);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, П102Ст210Гр04);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, П102Ст160Гр04);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, П102Ст200Гр04);
		ВнестиПоказательВРасшифровку(П102Ст120Гр03, П102Ст120Гр03.Раздел, НомерСтраницыМнУ(СтраницаРаздела.Представление, П102Ст120Гр03.ПорядокСтраницы));
		ВнестиПоказательВРасшифровку(П102Ст210Гр04, П102Ст210Гр04.Раздел, НомерСтраницыМнУ(СтраницаРаздела.Представление, П102Ст210Гр04.ПорядокСтраницы));
		ВнестиПоказательВРасшифровку(П102Ст160Гр04, П102Ст160Гр04.Раздел, НомерСтраницыМнУ(СтраницаРаздела.Представление, П102Ст160Гр04.ПорядокСтраницы));
		ВнестиПоказательВРасшифровку(П102Ст200Гр04, П102Ст200Гр04.Раздел, НомерСтраницыМнУ(СтраницаРаздела.Представление, П102Ст200Гр04.ПорядокСтраницы));
		КС = ПоказателиКС(П102Ст210Гр04.Значение, П102Ст160Гр04.Значение - П102Ст200Гр04.Значение);
		Расшифровка = КС.ЛеваяЧастьСтр + " = " + П102Ст160Гр04.ЗначениеСтр + " - " + П102Ст200Гр04.ЗначениеСтр + " Итог [" + КС.ПраваяЧастьСтр + "]";
		Если КС.ЛеваяЧасть = КС.ПраваяЧасть Тогда
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
		Иначе
			ЭтоОшибка = Истина;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
		КонецЕсли;
		ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, ЭтоОшибка,
			ОписаниеОшибки,);
	КонецЦикла;
	СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
	СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
	СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_6_17(СтруктураРезультата)
	ОбщееЧислоОшибок    = СтруктураРезультата.КоличествоНайденныхОшибок;
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок;
	СтруктураОшибок     = СтруктураРезультата.СтруктураОшибок;
	ТекстФормулы    = НСтр("ru='Проверка раздела 2 Приложения №2 (КС 6.17)'");
	ОписаниеКС      = НСтр("ru='Сумма акциза в строке 210 графы 4 раздела 2 Приложения № 2 = (Сумма акциза в строке 160 графы 4 раздела 2 Приложения № 2 + Сумма акциза в строке 170 графы 4 раздела 2 Приложения № 2) – Сумма акциза в строке 180 графы 4 раздела 2 Приложения № 2 для соответствующей банковской гарантии (строка 120 раздела 2 Приложения № 2 для одного  налогового периода) '");
	ОписаниеОшибки  = НСтр("ru='Допущена ошибка при определении суммы акциза, освобожденной от уплаты по банковской гарантии при неподтверждении факта экспорта на конец налогового периода в строке 210 графы 4 Приложения N 2 раздела 3'");
	П102Ст210Гр04 = ПоказательПоСтроке("П102Ст210Гр04");
	П102Ст160Гр04 = ПоказательПоСтроке("П102Ст160Гр04");
	П102Ст170Гр04 = ПоказательПоСтроке("П102Ст170Гр04");
	П102Ст180Гр04 = ПоказательПоСтроке("П102Ст180Гр04");
	П102Ст120Гр03 = ПоказательПоСтроке("П102Ст120Гр03");
	Приложение21 = ДанныеИзДереваРаздела("Приложение21");
	УровеньСтраницы = "";
	Для Каждого СтраницаРаздела Из Приложение21 Цикл
		ДанныеСтраницы = СтраницаРаздела.Данные;
		Если УровеньСтраницы = НомерСтраницыМнУ(СтраницаРаздела.Представление, П102Ст120Гр03.ПорядокСтраницы) Тогда
			Продолжить;
		КонецЕсли;
		УровеньСтраницы = НомерСтраницыМнУ(СтраницаРаздела.Представление, П102Ст120Гр03.ПорядокСтраницы);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, П102Ст120Гр03);
		Если НЕ ЗначениеЗаполнено(П102Ст120Гр03.Значение) Тогда
			Продолжить;
		КонецЕсли;
		СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
		ЗарегистрироватьФормулуДляРасшифровки(ОписаниеКС);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, П102Ст210Гр04);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, П102Ст160Гр04);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, П102Ст170Гр04);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, П102Ст180Гр04);
		ВнестиПоказательВРасшифровку(П102Ст120Гр03, П102Ст120Гр03.Раздел, НомерСтраницыМнУ(СтраницаРаздела.Представление, П102Ст120Гр03.ПорядокСтраницы));
		ВнестиПоказательВРасшифровку(П102Ст210Гр04, П102Ст210Гр04.Раздел, НомерСтраницыМнУ(СтраницаРаздела.Представление, П102Ст210Гр04.ПорядокСтраницы));
		ВнестиПоказательВРасшифровку(П102Ст160Гр04, П102Ст160Гр04.Раздел, НомерСтраницыМнУ(СтраницаРаздела.Представление, П102Ст160Гр04.ПорядокСтраницы));
		ВнестиПоказательВРасшифровку(П102Ст170Гр04, П102Ст170Гр04.Раздел, НомерСтраницыМнУ(СтраницаРаздела.Представление, П102Ст170Гр04.ПорядокСтраницы));
		ВнестиПоказательВРасшифровку(П102Ст180Гр04, П102Ст180Гр04.Раздел, НомерСтраницыМнУ(СтраницаРаздела.Представление, П102Ст180Гр04.ПорядокСтраницы));
		КС = ПоказателиКС(П102Ст210Гр04.Значение, П102Ст160Гр04.Значение + П102Ст170Гр04.Значение - П102Ст180Гр04.Значение);
		Расшифровка = КС.ЛеваяЧастьСтр + " = " + П102Ст160Гр04.ЗначениеСтр + " + " + П102Ст170Гр04.ЗначениеСтр + " - " + П102Ст180Гр04.ЗначениеСтр + " Итог [" + КС.ПраваяЧастьСтр + "]";
		Если КС.ЛеваяЧасть = КС.ПраваяЧасть Тогда
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
		Иначе
			ЭтоОшибка = Истина;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
		КонецЕсли;
		ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, ЭтоОшибка,
			ОписаниеОшибки,);
	КонецЦикла;
	СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
	СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
	СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_6_20(СтруктураРезультата)
	ОбщееЧислоОшибок    = СтруктураРезультата.КоличествоНайденныхОшибок;
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок;
	СтруктураОшибок     = СтруктураРезультата.СтруктураОшибок;
	ТекстФормулы    = НСтр("ru='Проверка раздела 2 Приложения №2 (КС 6.21)'");
	ОписаниеКС      = НСтр("ru='Сумма акциза по всем строкам 160 графы 4 раздела 2 Приложения № 2 = Сумма акциза по всем  строкам 200 графы 4 раздела 2 Приложения № 2 + Сумма акциза по всем строкам 210 графы 4 раздела 2 Приложения № 2 для соответствующей банковской гарантии в декларации за налоговый период '");
	ОписаниеОшибки  = НСтр("ru='Допущена ошибка при определении суммы акциза, освобожденной от уплаты по банковской гарантии в Приложении N 2 раздела 2'");
	П102Ст120Гр03 = ПоказательПоСтроке("П102Ст120Гр03");
	П102Ст160Гр04 = ПоказательПоСтроке("П102Ст160Гр04");
	П102Ст200Гр04 = ПоказательПоСтроке("П102Ст200Гр04");
	П102Ст210Гр04 = ПоказательПоСтроке("П102Ст210Гр04");
	Приложение21 = ДанныеИзДереваРаздела("Приложение21");
	УровеньСтраницы = "";
	Для Каждого СтраницаРаздела Из Приложение21 Цикл
		ДанныеСтраницы = СтраницаРаздела.Данные;
		Если УровеньСтраницы = НомерСтраницыМнУ(СтраницаРаздела.Представление, П102Ст120Гр03.ПорядокСтраницы) Тогда
			Продолжить;
		КонецЕсли;
		УровеньСтраницы = НомерСтраницыМнУ(СтраницаРаздела.Представление, П102Ст120Гр03.ПорядокСтраницы);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, П102Ст120Гр03);
		Если НЕ ЗначениеЗаполнено(П102Ст120Гр03.Значение) Тогда
			Продолжить;
		КонецЕсли;
		СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
		ЗарегистрироватьФормулуДляРасшифровки(ОписаниеКС);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, П102Ст160Гр04);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, П102Ст200Гр04);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, П102Ст210Гр04);
		ВнестиПоказательВРасшифровку(П102Ст120Гр03, П102Ст120Гр03.Раздел, НомерСтраницыМнУ(СтраницаРаздела.Представление, П102Ст120Гр03.ПорядокСтраницы));
		ВнестиПоказательВРасшифровку(П102Ст160Гр04, П102Ст160Гр04.Раздел, НомерСтраницыМнУ(СтраницаРаздела.Представление, П102Ст160Гр04.ПорядокСтраницы));
		ВнестиПоказательВРасшифровку(П102Ст200Гр04, П102Ст200Гр04.Раздел, НомерСтраницыМнУ(СтраницаРаздела.Представление, П102Ст200Гр04.ПорядокСтраницы));
		ВнестиПоказательВРасшифровку(П102Ст210Гр04, П102Ст210Гр04.Раздел, НомерСтраницыМнУ(СтраницаРаздела.Представление, П102Ст210Гр04.ПорядокСтраницы));
		КС = ПоказателиКС(П102Ст210Гр04.Значение, П102Ст200Гр04.Значение + П102Ст210Гр04.Значение);
		Расшифровка = КС.ЛеваяЧастьСтр + " = " + П102Ст200Гр04.ЗначениеСтр + " + " + П102Ст210Гр04.ЗначениеСтр + " Итог [" + КС.ПраваяЧастьСтр + "]";
		Если КС.ЛеваяЧасть = КС.ПраваяЧасть Тогда
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
		Иначе
			ЭтоОшибка = Истина;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
		КонецЕсли;
		ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, ЭтоОшибка,
			ОписаниеОшибки,);
	КонецЦикла;
	СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
	СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
	СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_6_21(СтруктураРезультата)
	ОбщееЧислоОшибок    = СтруктураРезультата.КоличествоНайденныхОшибок;
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок;
	СтруктураОшибок     = СтруктураРезультата.СтруктураОшибок;
	ТекстФормулы    = НСтр("ru='Проверка раздела 2 Приложения №2 (КС 6.22)'");
	ОписаниеКС      = НСтр("ru='Превышение суммы акциза в строке 220 графы 3 раздела 2 Приложения № 2 <= Сумма, на которую выдана банковская гарантия в строке 150 раздела 2 Приложения № 2 – Сумма акциза в строке 200 графы 4 раздела 2 Приложения № 2 для соответствующей банковской гарантии (строка 120 раздела 2 Приложения № 2) '");
	ОписаниеОшибки  = НСтр("ru='Допущена ошибка при определении превышения суммы акциза, освобожденной от уплаты в связи с представлением банковских гарантий над суммой акциза подтвержденного экспорта на конец налогового периода в строке 220 графы 3 Приложения N 2 раздела 2'");
	П102Ст220Гр03 = ПоказательПоСтроке("П102Ст220Гр03");
	П102Ст150Гр03 = ПоказательПоСтроке("П102Ст150Гр03");
	П102Ст200Гр04 = ПоказательПоСтроке("П102Ст200Гр04");
	П102Ст120Гр03 = ПоказательПоСтроке("П102Ст120Гр03");
	Приложение21 = ДанныеИзДереваРаздела("Приложение21");
	УровеньСтраницы = "";
	Для Каждого СтраницаРаздела Из Приложение21 Цикл
		ДанныеСтраницы = СтраницаРаздела.Данные;
		Если УровеньСтраницы = НомерСтраницыМнУ(СтраницаРаздела.Представление, П102Ст120Гр03.ПорядокСтраницы) Тогда
			Продолжить;
		КонецЕсли;
		УровеньСтраницы = НомерСтраницыМнУ(СтраницаРаздела.Представление, П102Ст120Гр03.ПорядокСтраницы);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, П102Ст120Гр03);
		Если НЕ ЗначениеЗаполнено(П102Ст120Гр03.Значение) Тогда
			Продолжить;
		КонецЕсли;
		СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
		ЗарегистрироватьФормулуДляРасшифровки(ОписаниеКС);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, П102Ст220Гр03);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, П102Ст150Гр03);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, П102Ст200Гр04);
		ВнестиПоказательВРасшифровку(П102Ст120Гр03, П102Ст120Гр03.Раздел, НомерСтраницыМнУ(СтраницаРаздела.Представление, П102Ст120Гр03.ПорядокСтраницы));
		ВнестиПоказательВРасшифровку(П102Ст220Гр03, П102Ст220Гр03.Раздел, НомерСтраницыМнУ(СтраницаРаздела.Представление, П102Ст220Гр03.ПорядокСтраницы));
		ВнестиПоказательВРасшифровку(П102Ст150Гр03, П102Ст150Гр03.Раздел, НомерСтраницыМнУ(СтраницаРаздела.Представление, П102Ст150Гр03.ПорядокСтраницы));
		ВнестиПоказательВРасшифровку(П102Ст200Гр04, П102Ст200Гр04.Раздел, НомерСтраницыМнУ(СтраницаРаздела.Представление, П102Ст200Гр04.ПорядокСтраницы));
		КС = ПоказателиКС(П102Ст200Гр04.Значение, П102Ст150Гр03.Значение + П102Ст200Гр04.Значение);
		Расшифровка = КС.ЛеваяЧастьСтр + " <= " + П102Ст150Гр03.ЗначениеСтр + " + " + П102Ст200Гр04.ЗначениеСтр + " Итог [" + КС.ПраваяЧастьСтр + "]";
		Если КС.ЛеваяЧасть <= КС.ПраваяЧасть Тогда
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
		Иначе
			ЭтоОшибка = Истина;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
		КонецЕсли;
		ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, ЭтоОшибка,
			ОписаниеОшибки,);
	КонецЦикла;
	СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
	СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
	СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
КонецПроцедуры

#КонецОбласти

#Область КС_ПроверкиРаздела7

&НаСервере
Процедура ПроверитьКС_7_2(СтруктураРезультата)
	ОбщееЧислоОшибок    = СтруктураРезультата.КоличествоНайденныхОшибок;
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок;
	СтруктураОшибок     = СтруктураРезультата.СтруктураОшибок;
	ТекстФормулы    = НСтр("ru='Проверка Приложения № 3 (КС 7.2)'");
	ОписаниеКС      = НСтр("ru='Налоговая база в графе 3 строки 050 Приложения № 3 = Сумма значений (графы 6 строки 060 Приложения № 3, если гр. 6 > 0 и графы 3 строки 060 Приложения № 3, если гр. 6 = ""-"") '");
	ОписаниеОшибки  = НСтр("ru='Допущена ошибка при определении объема прямогонного бензина, полученного в налоговом периоде в строке 050 Приложения N 3'");
	П103Ст50Гр03 = ПоказательПоСтроке("П103Ст50Гр03");
	П103Ст1Гр06 = ПоказательПоСтроке("П103Ст1Гр06");
	П103Ст1Гр03 = ПоказательПоСтроке("П103Ст1Гр03");
	ДанныеПоказателей = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить();
	СтраницыПриложения3 = ДанныеПоказателей.ДанныеМногостраничныхРазделов.Приложение3;
	Для Каждого СтраницаП3 Из СтраницыПриложения3 Цикл
		ДанныеСтраницыП3 = СтраницаП3.Данные;
		НомерСтраницыП3Стр = СтрокаЧГ0(СтраницыПриложения3.Индекс(СтраницаП3) + 1);
		СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
		ЗарегистрироватьФормулуДляРасшифровки(ОписаниеКС);
		ВставитьЗначениеПоказателя(ДанныеСтраницыП3, П103Ст50Гр03);
		ВнестиПоказательВРасшифровку(П103Ст50Гр03, "Приложение3", НомерСтраницыП3Стр);
		СуммаСт60 = 0;
		СуммаСт60Стр = "";
		КолвоСтрокВМногострочнойЧасти = КоличествоСтрок(ДанныеСтраницыП3, "П001030000101_");
		Для Инд = 1 По КолвоСтрокВМногострочнойЧасти Цикл
			ВставитьЗначениеМногострочногоПоказателя(ДанныеСтраницыП3, П103Ст1Гр06, Инд);
			ВставитьЗначениеМногострочногоПоказателя(ДанныеСтраницыП3, П103Ст1Гр03, Инд);
			Если П103Ст1Гр06.Значение > 0 Тогда
				СуммаСт60 = СуммаСт60 + П103Ст1Гр06.Значение;
				СуммаСт60Стр = СуммаСт60Стр + П103Ст1Гр06.ЗначениеСтр + " + ";;
				ВнестиПоказательВРасшифровку(П103Ст1Гр06, "Приложение3", НомерСтраницыП3Стр);
			ИначеЕсли П103Ст1Гр03.Значение <> 0 Тогда
				СуммаСт60 = СуммаСт60 + П103Ст1Гр03.Значение;
				СуммаСт60Стр = СуммаСт60Стр + П103Ст1Гр03.ЗначениеСтр + " + ";;
				ВнестиПоказательВРасшифровку(П103Ст1Гр03, "Приложение3", НомерСтраницыП3Стр);
			КонецЕсли;
		КонецЦикла;
		КС = ПоказателиКС(П103Ст50Гр03.Значение, СуммаСт60);
		Расшифровка = КС.ЛеваяЧастьСтр + " = " + РасшифровкаВСтр(СуммаСт60Стр) + " Итог [" + КС.ПраваяЧастьСтр + "]";
		Если КС.ЛеваяЧасть = КС.ПраваяЧасть Тогда
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
		Иначе
			ЭтоОшибка = Истина;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
		КонецЕсли;
		ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, ЭтоОшибка,
			ОписаниеОшибки,);
	КонецЦикла;
	СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
	СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
	СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
КонецПроцедуры

#КонецОбласти

#Область КС_ПроверкиРаздела8

&НаСервере
Процедура ПроверитьКС_8_2(СтруктураРезультата)
	ОбщееЧислоОшибок    = СтруктураРезультата.КоличествоНайденныхОшибок;
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок;
	СтруктураОшибок     = СтруктураРезультата.СтруктураОшибок;
	ТекстФормулы    = НСтр("ru='Проверка Приложения № 4 (КС 8.2)'");
	ОписаниеКС      = НСтр("ru='Объем прямогонного бензина в графе 3 строки 050 Приложения №3 = Сумма значений (графы 6 строки 060 Приложения № 4, если гр. 6 > 0 и графы 3 строки 060 Приложения № 4, если гр. 6 = ""-"") '");
	ОписаниеОшибки  = НСтр("ru='Допущена ошибка при определении объема прямогонного бензина, полученного в налоговом периоде в строке 050 Приложения N 3'");
	П104Ст50Гр03 = ПоказательПоСтроке("П104Ст50Гр03");
	П104Ст1Гр06 = ПоказательПоСтроке("П104Ст1Гр06");
	П104Ст1Гр03 = ПоказательПоСтроке("П104Ст1Гр03");
	ДанныеПоказателей = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить();
	СтраницыПриложения4 = ДанныеПоказателей.ДанныеМногостраничныхРазделов.Приложение4;
	Для Каждого СтраницаП4 Из СтраницыПриложения4 Цикл
		ДанныеСтраницыП4 = СтраницаП4.Данные;
		НомерСтраницыП4Стр = СтрокаЧГ0(СтраницыПриложения4.Индекс(СтраницаП4) + 1);
		СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
		ЗарегистрироватьФормулуДляРасшифровки(ОписаниеКС);
		ВставитьЗначениеПоказателя(ДанныеСтраницыП4, П104Ст50Гр03);
		ВнестиПоказательВРасшифровку(П104Ст50Гр03, "Приложение4", НомерСтраницыП4Стр);
		СуммаСт60 = 0;
		СуммаСт60Стр = "";
		КолвоСтрокВМногострочнойЧасти = КоличествоСтрок(ДанныеСтраницыП4, "П001040000101_");
		Для Инд = 1 По КолвоСтрокВМногострочнойЧасти Цикл
			ВставитьЗначениеМногострочногоПоказателя(ДанныеСтраницыП4, П104Ст1Гр06, Инд);
			ВставитьЗначениеМногострочногоПоказателя(ДанныеСтраницыП4, П104Ст1Гр03, Инд);
			Если П104Ст1Гр06.Значение > 0 Тогда
				СуммаСт60 = СуммаСт60 + П104Ст1Гр06.Значение;
				СуммаСт60Стр = СуммаСт60Стр + П104Ст1Гр06.ЗначениеСтр + " + ";;
				ВнестиПоказательВРасшифровку(П104Ст1Гр06, "Приложение4", НомерСтраницыП4Стр);
			ИначеЕсли П104Ст1Гр03.Значение <> 0 Тогда
				СуммаСт60 = СуммаСт60 + П104Ст1Гр03.Значение;
				СуммаСт60Стр = СуммаСт60Стр + П104Ст1Гр03.ЗначениеСтр + " + ";;
				ВнестиПоказательВРасшифровку(П104Ст1Гр03, "Приложение4", НомерСтраницыП4Стр);
			КонецЕсли;
		КонецЦикла;
		КС = ПоказателиКС(П104Ст50Гр03.Значение, СуммаСт60, Ложь, Ложь);
		Расшифровка = КС.ЛеваяЧастьСтр + " = " + РасшифровкаВСтр(СуммаСт60Стр) + " Итог [" + КС.ПраваяЧастьСтр + "]";
		Если КС.ЛеваяЧасть = КС.ПраваяЧасть Тогда
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
		Иначе
			ЭтоОшибка = Истина;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
		КонецЕсли;
		ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, ЭтоОшибка,
			ОписаниеОшибки,);
	КонецЦикла;
	СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
	СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
	СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область КС_ФормированиеКонтекста

&НаСервере
Процедура СформироватьВременныеТаблицы()
	
	мДанныеОтчета.ДанныеКС.Вставить("ВТ", Новый МенеджерВременныхТаблиц);
	
	К05	= Новый КвалификаторыСтроки(5);
	К10	= Новый КвалификаторыСтроки(10);
	К20	= Новый КвалификаторыСтроки(20);
	К80	= Новый КвалификаторыСтроки(80);
	
	Т_Раздел1 = Новый ТаблицаЗначений;
	Т_Раздел1.Колонки.Добавить("НомерСтраницы"		, Новый ОписаниеТипов("Число"));
	Т_Раздел1.Колонки.Добавить("НомерСтроки"		, Новый ОписаниеТипов("Число"));
	Т_Раздел1.Колонки.Добавить("ОКТМО"				, Новый ОписаниеТипов("Строка",,К20));
	Т_Раздел1.Колонки.Добавить("КБК"				, Новый ОписаниеТипов("Строка",,К20));
	Т_Раздел1.Колонки.Добавить("Р1Ст1Гр02"			, Новый ОписаниеТипов("Число"));
	Т_Раздел1.Колонки.Добавить("Р1Ст1Гр03"			, Новый ОписаниеТипов("Число"));
	
	Т_Раздел2 = Новый ТаблицаЗначений;
	Т_Раздел2.Колонки.Добавить("НомерСтраницы"		, Новый ОписаниеТипов("Число"));
	Т_Раздел2.Колонки.Добавить("Раздел"				, Новый ОписаниеТипов("Строка",,К10));
	Т_Раздел2.Колонки.Добавить("КодТовара"			, Новый ОписаниеТипов("Строка",,К05));
	Т_Раздел2.Колонки.Добавить("КБК"				, Новый ОписаниеТипов("Строка",,К20));
	Т_Раздел2.Колонки.Добавить("Р23Ст1Гр02"			, Новый ОписаниеТипов("Число"));
	Т_Раздел2.Колонки.Добавить("Р23Ст2Гр02"			, Новый ОписаниеТипов("Число"));
	Т_Раздел2.Колонки.Добавить("Р3Ст110Гр03"		, Новый ОписаниеТипов("Число"));
	
	Т_Раздел21 = Новый ТаблицаЗначений;
	Т_Раздел21.Колонки.Добавить("НомерСтраницы"		, Новый ОписаниеТипов("Число"));
	Т_Раздел21.Колонки.Добавить("НомерСтроки"		, Новый ОписаниеТипов("Число"));
	Т_Раздел21.Колонки.Добавить("КодТовара"			, Новый ОписаниеТипов("Строка",,К05));
	Т_Раздел21.Колонки.Добавить("НомерОперации"		, Новый ОписаниеТипов("Строка",,К05));
	Т_Раздел21.Колонки.Добавить("Р21Ст1Гр02"		, Новый ОписаниеТипов("Число"));
	Т_Раздел21.Колонки.Добавить("Р21Ст1Гр03"		, Новый ОписаниеТипов("Число"));
	Т_Раздел21.Колонки.Добавить("Ставка"			, Новый ОписаниеТипов("Число"));
	Т_Раздел21.Колонки.Добавить("СтавкаНайдена"		, Новый ОписаниеТипов("Булево"));
	Т_Раздел21.Колонки.Добавить("ЕдИзм"				, Новый ОписаниеТипов("Строка",,К05));
	
	Т_Раздел22 = Новый ТаблицаЗначений;
	Т_Раздел22.Колонки.Добавить("НомерСтраницы"		, Новый ОписаниеТипов("Число"));
	Т_Раздел22.Колонки.Добавить("НомерСтроки"		, Новый ОписаниеТипов("Число"));
	Т_Раздел22.Колонки.Добавить("КодТовара"			, Новый ОписаниеТипов("Строка",,К05));
	Т_Раздел22.Колонки.Добавить("НомерОперации"		, Новый ОписаниеТипов("Строка",,К05));
	Т_Раздел22.Колонки.Добавить("Р22Ст1Гр02"		, Новый ОписаниеТипов("Число"));
	
	Т_Раздел24 = Новый ТаблицаЗначений;
	Т_Раздел24.Колонки.Добавить("НомерСтраницы"		, Новый ОписаниеТипов("Число"));
	Т_Раздел24.Колонки.Добавить("НомерСтроки"		, Новый ОписаниеТипов("Число"));
	Т_Раздел24.Колонки.Добавить("КодТовара"			, Новый ОписаниеТипов("Строка",,К05));
	Т_Раздел24.Колонки.Добавить("НомерОперации"		, Новый ОписаниеТипов("Строка",,К05));
	Т_Раздел24.Колонки.Добавить("Р24Ст1Гр02"		, Новый ОписаниеТипов("Число"));
	
	Т_Раздел25 = Новый ТаблицаЗначений;
	Т_Раздел25.Колонки.Добавить("НомерСтраницы"		, Новый ОписаниеТипов("Число"));
	Т_Раздел25.Колонки.Добавить("НомерСтроки"		, Новый ОписаниеТипов("Число"));
	Т_Раздел25.Колонки.Добавить("КодТовара"			, Новый ОписаниеТипов("Строка",,К05));
	Т_Раздел25.Колонки.Добавить("НомерОперации"		, Новый ОписаниеТипов("Строка",,К05));
	Т_Раздел25.Колонки.Добавить("Р25Ст1Гр02"		, Новый ОписаниеТипов("Число"));
	
	Т_Раздел26 = Новый ТаблицаЗначений;
	Т_Раздел26.Колонки.Добавить("НомерСтраницы"		, Новый ОписаниеТипов("Число"));
	Т_Раздел26.Колонки.Добавить("НомерСтроки"		, Новый ОписаниеТипов("Число"));
	Т_Раздел26.Колонки.Добавить("КодТовара"			, Новый ОписаниеТипов("Строка",,К05));
	Т_Раздел26.Колонки.Добавить("НомерОперации"		, Новый ОписаниеТипов("Строка",,К05));
	Т_Раздел26.Колонки.Добавить("Р26Ст1Гр02"		, Новый ОписаниеТипов("Число"));
	
	Т_Приложение1 = Новый ТаблицаЗначений;
	Т_Приложение1.Колонки.Добавить("НомерСтраницы"	, Новый ОписаниеТипов("Число"));
	Т_Приложение1.Колонки.Добавить("НомерСтроки"	, Новый ОписаниеТипов("Число"));
	Т_Приложение1.Колонки.Добавить("КодТовара"		, Новый ОписаниеТипов("Строка",,К05));
	Т_Приложение1.Колонки.Добавить("НомерОперации"	, Новый ОписаниеТипов("Строка",,К05));
	Т_Приложение1.Колонки.Добавить("П101Ст1Гр04"	, Новый ОписаниеТипов("Число"));

	СоответствиеКБККодуТовара = Новый Соответствие;
	СоответствиеКБККодуТовара.Вставить("470", "18210302360011000110");
	СоответствиеКБККодуТовара.Вставить("471", "18210302370011000110");
	СоответствиеКБККодуТовара.Вставить("472", "18210302380011000110");
	СоответствиеКБККодуТовара.Вставить("510", "18210302060011000110");
	СоответствиеКБККодуТовара.Вставить("520", "18210302060011000110");
	СоответствиеКБККодуТовара.Вставить("531", "18210302060011000110");
	СоответствиеКБККодуТовара.Вставить("532", "18210302060011000110");
	СоответствиеКБККодуТовара.Вставить("533", "18210302060011000110");
	СоответствиеКБККодуТовара.Вставить("534", "18210302060011000110");
	СоответствиеКБККодуТовара.Вставить("535", "18210302060011000110");
	СоответствиеКБККодуТовара.Вставить("536", "18210302060011000110");
	СоответствиеКБККодуТовара.Вставить("630", "18210302070011000110");
	СоответствиеКБККодуТовара.Вставить("640", "18210302080011000110");
	СоответствиеКБККодуТовара.Вставить("650", "18210302042011000110");
	СоответствиеКБККодуТовара.Вставить("665", "18210302041011000110");
	СоответствиеКБККодуТовара.Вставить("671", "18210302310011000110");
	СоответствиеКБККодуТовара.Вставить("672", "18210302300011000110");
	СоответствиеКБККодуТовара.Вставить("673", "18210302300011000110");
	СоответствиеКБККодуТовара.Вставить("674", "18210302300011000110");
	СоответствиеКБККодуТовара.Вставить("676", "18210302041011000110");
	СоответствиеКБККодуТовара.Вставить("677", "18210302330011000110");
	СоответствиеКБККодуТовара.Вставить("678", "18210302390011000110");
	СоответствиеКБККодуТовара.Вставить("679", "18210302400011000110");
	СоответствиеКБККодуТовара.Вставить("735", "18210302320011000110");
	СоответствиеКБККодуТовара.Вставить("736", "18210302320011000110");
	
	Раздел1 = СохраненныеДанныеОтчета.ДанныеМногостраничныхРазделов.Раздел1;
	Для каждого Страница Из Раздел1 Цикл
		
		ПоказателиШапки = ЗаполнитьПоказатели("Р01С010", Страница.Данные);
		КоличествоСтрок = КоличествоСтрок(Страница.Данные, ПоказательПоСтроке("Р1Ст1Гр01").Имя);
		
		Для Инд = 1 По КоличествоСтрок Цикл
		
			Показатели	= ЗаполнитьПоказатели("Р1Ст1Гр01, Р1Ст1Гр02, Р1Ст1Гр03", Страница.Данные, Инд);
			НоваяСтрока	= Т_Раздел1.Добавить();
			НоваяСтрока.НомерСтраницы	= Раздел1.Индекс(Страница) + 1;
			НоваяСтрока.НомерСтроки		= Инд;
			НоваяСтрока.ОКТМО			= ПоказателиШапки.Р01С010.Значение;
			НоваяСтрока.КБК				= Показатели.Р1Ст1Гр01.Значение;
			НоваяСтрока.Р1Ст1Гр02		= Показатели.Р1Ст1Гр02.Значение;
			НоваяСтрока.Р1Ст1Гр03		= - Показатели.Р1Ст1Гр03.Значение;
		
		КонецЦикла;
	КонецЦикла;
	
	Раздел2 = СохраненныеДанныеОтчета.ДанныеМногостраничныхРазделов.Раздел2;
	Для каждого Страница Из Раздел2 Цикл
		
		Показатели	= ЗаполнитьПоказатели("Р2Ст10Гр03, Р23Ст1Гр02, Р23Ст2Гр02", Страница.Данные);
		НоваяСтрока	= Т_Раздел2.Добавить();
		НоваяСтрока.НомерСтраницы	= Раздел2.Индекс(Страница) + 1;
		НоваяСтрока.Раздел			= "Раздел2";
		НоваяСтрока.КодТовара		= Показатели.Р2Ст10Гр03.Значение;
		НоваяСтрока.КБК				= СоответствиеКБККодуТовара.Получить(НоваяСтрока.КодТовара);
		НоваяСтрока.Р23Ст1Гр02		= Показатели.Р23Ст1Гр02.Значение;
		НоваяСтрока.Р23Ст2Гр02		= - Показатели.Р23Ст2Гр02.Значение;
		
		КоличествоСтрок = КоличествоСтрок(Страница.Данные, ПоказательПоСтроке("Р21Ст1Гр02").Имя);
		Для Инд = 1 По КоличествоСтрок Цикл
		
			Показатели	= ЗаполнитьПоказатели("Р21Ст1Гр01, Р21Ст1Гр02, Р21Ст1Гр03", Страница.Данные, Инд);
			НоваяСтрока2= Т_Раздел21.Добавить();
			НоваяСтрока2.НомерСтраницы	= НоваяСтрока.НомерСтраницы;
			НоваяСтрока2.НомерСтроки	= Инд;
			НоваяСтрока2.КодТовара		= НоваяСтрока.КодТовара;
			НоваяСтрока2.НомерОперации	= Показатели.Р21Ст1Гр01.Значение;
			НоваяСтрока2.Р21Ст1Гр02		= Показатели.Р21Ст1Гр02.Значение;
			НоваяСтрока2.Р21Ст1Гр03		= Показатели.Р21Ст1Гр03.Значение;
			СтрокаСтавки = мДанныеОтчета.ДанныеКС.ТаблицаСтавок.Найти(НоваяСтрока.КодТовара, "КодТовара");
			НоваяСтрока2.СтавкаНайдена	= НЕ СтрокаСтавки = Неопределено;
			НоваяСтрока2.Ставка			= ?(НоваяСтрока2.СтавкаНайдена, СтрокаСтавки.Ставка	, 0);
			НоваяСтрока2.ЕдИзм			= ?(НоваяСтрока2.СтавкаНайдена, СтрокаСтавки.ЕдИзм	, "");
		
		КонецЦикла;
		
		КоличествоСтрок = КоличествоСтрок(Страница.Данные, ПоказательПоСтроке("Р22Ст1Гр02").Имя);
		Для Инд = 1 По КоличествоСтрок Цикл
		
			Показатели	= ЗаполнитьПоказатели("Р22Ст1Гр01, Р22Ст1Гр02", Страница.Данные, Инд);
			НоваяСтрока2= Т_Раздел22.Добавить();
			НоваяСтрока2.НомерСтраницы	= НоваяСтрока.НомерСтраницы;
			НоваяСтрока2.НомерСтроки	= Инд;
			НоваяСтрока2.КодТовара		= НоваяСтрока.КодТовара;
			НоваяСтрока2.НомерОперации	= Показатели.Р22Ст1Гр01.Значение;
			НоваяСтрока2.Р22Ст1Гр02		= Показатели.Р22Ст1Гр02.Значение;
		
		КонецЦикла;
		
		КоличествоСтрок = КоличествоСтрок(Страница.Данные, ПоказательПоСтроке("Р24Ст1Гр02").Имя);
		Для Инд = 1 По КоличествоСтрок Цикл
		
			Показатели	= ЗаполнитьПоказатели("Р24Ст1Гр01, Р24Ст1Гр02", Страница.Данные, Инд);
			НоваяСтрока2= Т_Раздел24.Добавить();
			НоваяСтрока2.НомерСтраницы	= НоваяСтрока.НомерСтраницы;
			НоваяСтрока2.НомерСтроки	= Инд;
			НоваяСтрока2.КодТовара		= НоваяСтрока.КодТовара;
			НоваяСтрока2.НомерОперации	= Показатели.Р24Ст1Гр01.Значение;
			НоваяСтрока2.Р24Ст1Гр02		= Показатели.Р24Ст1Гр02.Значение;
		
		КонецЦикла;
		
		КоличествоСтрок = КоличествоСтрок(Страница.Данные, ПоказательПоСтроке("Р25Ст1Гр02").Имя);
		Для Инд = 1 По КоличествоСтрок Цикл
		
			Показатели	= ЗаполнитьПоказатели("Р25Ст1Гр01, Р25Ст1Гр02", Страница.Данные, Инд);
			НоваяСтрока2= Т_Раздел25.Добавить();
			НоваяСтрока2.НомерСтраницы	= НоваяСтрока.НомерСтраницы;
			НоваяСтрока2.НомерСтроки	= Инд;
			НоваяСтрока2.КодТовара		= НоваяСтрока.КодТовара;
			НоваяСтрока2.НомерОперации	= Показатели.Р25Ст1Гр01.Значение;
			НоваяСтрока2.Р25Ст1Гр02		= Показатели.Р25Ст1Гр02.Значение;
		
		КонецЦикла;
		
		КоличествоСтрок = КоличествоСтрок(Страница.Данные, ПоказательПоСтроке("Р26Ст1Гр02").Имя);
		Для Инд = 1 По КоличествоСтрок Цикл
		
			Показатели	= ЗаполнитьПоказатели("Р26Ст1Гр01, Р26Ст1Гр02", Страница.Данные, Инд);
			НоваяСтрока2= Т_Раздел26.Добавить();
			НоваяСтрока2.НомерСтраницы	= НоваяСтрока.НомерСтраницы;
			НоваяСтрока2.НомерСтроки	= Инд;
			НоваяСтрока2.КодТовара		= НоваяСтрока.КодТовара;
			НоваяСтрока2.НомерОперации	= Показатели.Р26Ст1Гр01.Значение;
			НоваяСтрока2.Р26Ст1Гр02		= Показатели.Р26Ст1Гр02.Значение;
		
		КонецЦикла;
	КонецЦикла;
	
	Раздел3 = СохраненныеДанныеОтчета.ДанныеМногостраничныхРазделов.Раздел3;
	Для каждого Страница Из Раздел3 Цикл
		
		Показатели	= ЗаполнитьПоказатели("Р3Ст10Гр03, Р3Ст30Гр03, Р3Ст110Гр03", Страница.Данные);
		НоваяСтрока	= Т_Раздел2.Добавить();
		НоваяСтрока.НомерСтраницы	= Раздел3.Индекс(Страница) + 1;
		НоваяСтрока.Раздел			= "Раздел3";
		НоваяСтрока.КодТовара		= Показатели.Р3Ст10Гр03.Значение;
		НоваяСтрока.КБК				= Показатели.Р3Ст30Гр03.Значение;
		НоваяСтрока.Р3Ст110Гр03		= Показатели.Р3Ст110Гр03.Значение;
		
	КонецЦикла;
	
	Приложение1 = СохраненныеДанныеОтчета.ДанныеМногостраничныхРазделов.Приложение1;
	Для каждого Страница Из Приложение1 Цикл
		
		ПоказателиШапки	= ЗаполнитьПоказатели("П101Ст10Гр03", Страница.Данные);
		
		КоличествоСтрок = КоличествоСтрок(Страница.Данные, ПоказательПоСтроке("П101Ст1Гр04").Имя);
		Для Инд = 1 По КоличествоСтрок Цикл
		
			Показатели	= ЗаполнитьПоказатели("П101Ст1Гр01, П101Ст1Гр04", Страница.Данные, Инд);
			НоваяСтрока2= Т_Приложение1.Добавить();
			НоваяСтрока2.НомерСтраницы	= Приложение1.Индекс(Страница) + 1;
			НоваяСтрока2.НомерСтроки	= Инд;
			НоваяСтрока2.КодТовара		= ПоказателиШапки.П101Ст10Гр03.Значение;
			НоваяСтрока2.НомерОперации	= Показатели.П101Ст1Гр01.Значение;
			НоваяСтрока2.П101Ст1Гр04	= Показатели.П101Ст1Гр04.Значение;
		
		КонецЦикла;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = мДанныеОтчета.ДанныеКС.ВТ;
	Запрос.УстановитьПараметр("Т_Раздел1"		, Т_Раздел1);
	Запрос.УстановитьПараметр("Т_Раздел2"		, Т_Раздел2);
	Запрос.УстановитьПараметр("Т_Раздел21"		, Т_Раздел21);
	Запрос.УстановитьПараметр("Т_Раздел22"		, Т_Раздел22);
	Запрос.УстановитьПараметр("Т_Раздел24"		, Т_Раздел24);
	Запрос.УстановитьПараметр("Т_Раздел25"		, Т_Раздел25);
	Запрос.УстановитьПараметр("Т_Раздел26"		, Т_Раздел26);
	Запрос.УстановитьПараметр("Т_Приложение1"	, Т_Приложение1);
	Запрос.Текст =
	
	"ВЫБРАТЬ
	|	Т_Раздел1.НомерСтраницы КАК НомерСтраницы,
	|	Т_Раздел1.НомерСтроки КАК НомерСтроки,
	|	Т_Раздел1.ОКТМО КАК ОКТМО,
	|	Т_Раздел1.КБК КАК КБК,
	|	Т_Раздел1.Р1Ст1Гр02 КАК Р1Ст1Гр02,
	|	Т_Раздел1.Р1Ст1Гр03 КАК Р1Ст1Гр03
	|ПОМЕСТИТЬ ВТ_Раздел1
	|ИЗ
	|	&Т_Раздел1 КАК Т_Раздел1
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Т_Раздел2.НомерСтраницы КАК НомерСтраницы,
	|	Т_Раздел2.Раздел КАК Раздел,
	|	Т_Раздел2.КодТовара КАК КодТовара,
	|	Т_Раздел2.КБК КАК КБК,
	|	Т_Раздел2.Р23Ст1Гр02 КАК Р23Ст1Гр02,
	|	Т_Раздел2.Р23Ст2Гр02 КАК Р23Ст2Гр02,
	|	Т_Раздел2.Р3Ст110Гр03 КАК Р3Ст110Гр03
	|ПОМЕСТИТЬ ВТ_Раздел2
	|ИЗ
	|	&Т_Раздел2 КАК Т_Раздел2
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Т_Раздел21.НомерСтраницы КАК НомерСтраницы,
	|	Т_Раздел21.НомерСтроки КАК НомерСтроки,
	|	Т_Раздел21.КодТовара КАК КодТовара,
	|	Т_Раздел21.НомерОперации КАК НомерОперации,
	|	Т_Раздел21.Р21Ст1Гр02 КАК Р21Ст1Гр02,
	|	Т_Раздел21.Р21Ст1Гр03 КАК Р21Ст1Гр03,
	|	Т_Раздел21.Ставка КАК Ставка,
	|	Т_Раздел21.СтавкаНайдена КАК СтавкаНайдена,
	|	Т_Раздел21.ЕдИзм КАК ЕдИзм
	|ПОМЕСТИТЬ ВТ_Раздел21
	|ИЗ
	|	&Т_Раздел21 КАК Т_Раздел21
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Т_Раздел22.НомерСтраницы КАК НомерСтраницы,
	|	Т_Раздел22.НомерСтроки КАК НомерСтроки,
	|	Т_Раздел22.КодТовара КАК КодТовара,
	|	Т_Раздел22.НомерОперации КАК НомерОперации,
	|	Т_Раздел22.Р22Ст1Гр02 КАК Р22Ст1Гр02
	|ПОМЕСТИТЬ ВТ_Раздел22
	|ИЗ
	|	&Т_Раздел22 КАК Т_Раздел22
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Т_Раздел24.НомерСтраницы КАК НомерСтраницы,
	|	Т_Раздел24.НомерСтроки КАК НомерСтроки,
	|	Т_Раздел24.КодТовара КАК КодТовара,
	|	Т_Раздел24.НомерОперации КАК НомерОперации,
	|	Т_Раздел24.Р24Ст1Гр02 КАК Р24Ст1Гр02
	|ПОМЕСТИТЬ ВТ_Раздел24
	|ИЗ
	|	&Т_Раздел24 КАК Т_Раздел24
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Т_Раздел25.НомерСтраницы КАК НомерСтраницы,
	|	Т_Раздел25.НомерСтроки КАК НомерСтроки,
	|	Т_Раздел25.КодТовара КАК КодТовара,
	|	Т_Раздел25.НомерОперации КАК НомерОперации,
	|	Т_Раздел25.Р25Ст1Гр02 КАК Р25Ст1Гр02
	|ПОМЕСТИТЬ ВТ_Раздел25
	|ИЗ
	|	&Т_Раздел25 КАК Т_Раздел25
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Т_Раздел26.НомерСтраницы КАК НомерСтраницы,
	|	Т_Раздел26.НомерСтроки КАК НомерСтроки,
	|	Т_Раздел26.КодТовара КАК КодТовара,
	|	Т_Раздел26.НомерОперации КАК НомерОперации,
	|	Т_Раздел26.Р26Ст1Гр02 КАК Р26Ст1Гр02
	|ПОМЕСТИТЬ ВТ_Раздел26
	|ИЗ
	|	&Т_Раздел26 КАК Т_Раздел26
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Т_Приложение1.НомерСтраницы КАК НомерСтраницы,
	|	Т_Приложение1.НомерСтроки КАК НомерСтроки,
	|	Т_Приложение1.КодТовара КАК КодТовара,
	|	Т_Приложение1.НомерОперации КАК НомерОперации,
	|	Т_Приложение1.П101Ст1Гр04 КАК П101Ст1Гр04
	|ПОМЕСТИТЬ ВТ_Приложение1
	|ИЗ
	|	&Т_Приложение1 КАК Т_Приложение1";	
	
	Запрос.Выполнить();
	
КонецПроцедуры

&НаСервере
Процедура СформироватьТаблицуСтавок()
	
	ТаблицаНастроек = Новый ТаблицаЗначений;
	ТаблицаНастроек.Колонки.Добавить("КодТовара", Новый ОписаниеТипов("Строка"));
	ТаблицаНастроек.Колонки.Добавить("Ставка"	, Новый ОписаниеТипов("Число"));
	ТаблицаНастроек.Колонки.Добавить("ЕдИзм"	, Новый ОписаниеТипов("Строка"));
	
	ВерсияСтавок = ПолучитьВерсиюСтавок();
	
	Если ВерсияСтавок = Неопределено Тогда
		мДанныеОтчета.ДанныеКС.Вставить("ТаблицаСтавок", ТаблицаНастроек);
		Возврат;
	КонецЕсли;
	
	МакетНастроекКС = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет("НастройкиКС2016Кв2");
	Область = МакетНастроекКС.Области.Найти(ВерсияСтавок);
	
	Если Область = Неопределено Тогда
		мДанныеОтчета.ДанныеКС.Вставить("ТаблицаСтавок", ТаблицаНастроек);
		Возврат;
	КонецЕсли;
	
	Для НомерСтроки = Область.Верх По Область.Низ Цикл
		НовСтрока = ТаблицаНастроек.Добавить();
		НовСтрока.КодТовара = СокрЛП(МакетНастроекКС.Область(НомерСтроки, 1).Текст);
		НовСтрока.Ставка	= СокрЛП(МакетНастроекКС.Область(НомерСтроки, 2).Текст);
		НовСтрока.ЕдИзм		= СокрЛП(МакетНастроекКС.Область(НомерСтроки, 3).Текст);
	КонецЦикла;
	
	мДанныеОтчета.ДанныеКС.Вставить("ТаблицаСтавок", ТаблицаНастроек);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьВерсиюСтавок()
	
	Если СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета >= '20210101' Тогда
		
		Возврат НСтр("ru='Ставки20210101'");
		
	ИначеЕсли СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета >= '20200101' Тогда
		
		Возврат НСтр("ru='Ставки20200101'");
		
	ИначеЕсли СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета >= '20190101' Тогда
		
		Возврат НСтр("ru='Ставки20190101'");
		
	ИначеЕсли СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета >= '20180701' Тогда
		
		Возврат НСтр("ru='Ставки20180701'");
		
	ИначеЕсли СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета >= '20180101' Тогда
		
		Возврат НСтр("ru='Ставки20180101'");
	
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

#КонецОбласти

#Область КС_Сервис

&НаСервере
Функция ПоказательПоСтроке(УсловныйКодПоказателя)
	Результат = Новый Структура;
	Результат.Вставить("Имя");
	Результат.Вставить("Представление");
	Если УсловныйКодПоказателя = "Р1СтГр01" Тогда
		Результат.Вставить("Имя", "П000010000001");
		Результат.Вставить("Представление", Нстр("ru='Признак наличия свидетельства/сертификата'"));
	ИначеЕсли УсловныйКодПоказателя = "Р1СтГр02" Тогда
		Результат.Вставить("Имя", "П000010000002");
		Результат.Вставить("Представление", Нстр("ru='Признак налогоплательщика'"));
	ИначеЕсли УсловныйКодПоказателя = "Р01С010" Тогда
		Результат.Вставить("Имя", "П000010001003");
		Результат.Вставить("Представление", Нстр("ru='Код по ОКТМО'"));
	ИначеЕсли УсловныйКодПоказателя = "Р1Ст1Гр01" Тогда
		Результат.Вставить("Имя", "П000010000101_%1");
		Результат.Вставить("Представление", Нстр("ru='Код бюджетной классификации'"));
	ИначеЕсли УсловныйКодПоказателя = "Р1Ст1Гр02" Тогда
		Результат.Вставить("Имя", "П000010000102_%1");
		Результат.Вставить("Представление", Нстр("ru='Сумма акциза, подлежащая уплате в бюджет'"));
	ИначеЕсли УсловныйКодПоказателя = "Р1Ст1Гр03" Тогда
		Результат.Вставить("Имя", "П000010000103_%1");
		Результат.Вставить("Представление", Нстр("ru='Сумма акциза, начисленная к уменьшению'"));
	ИначеЕсли УсловныйКодПоказателя = "Р23Ст1Гр01" Тогда
		Результат.Вставить("Имя", "П000230000101");
		Результат.Вставить("Представление", Нстр("ru='Код показателя'"));
	ИначеЕсли УсловныйКодПоказателя = "Р23Ст1Гр02" Тогда
		Результат.Вставить("Имя", "П000230000102");
		Результат.Вставить("Представление", Нстр("ru='Сумма акциза'"));
	ИначеЕсли УсловныйКодПоказателя = "Р23Ст2Гр01" Тогда
		Результат.Вставить("Имя", "П000230000201");
		Результат.Вставить("Представление", Нстр("ru='Код показателя'"));
	ИначеЕсли УсловныйКодПоказателя = "Р23Ст2Гр02" Тогда
		Результат.Вставить("Имя", "П000230000202");
		Результат.Вставить("Представление", Нстр("ru='Сумма акциза'"));
	ИначеЕсли УсловныйКодПоказателя = "Р2Ст10Гр03" Тогда
		Результат.Вставить("Имя", "П000020001003");
		Результат.Вставить("Представление", Нстр("ru='Код вида подакцизного товара'"));
	ИначеЕсли УсловныйКодПоказателя = "Р21Ст1Гр01" Тогда
		Результат.Вставить("Имя", "П000210000101_%1");
		Результат.Вставить("Представление", Нстр("ru='Код показателя'"));
	ИначеЕсли УсловныйКодПоказателя = "Р21Ст1Гр02" Тогда
		Результат.Вставить("Имя", "П000210000102_%1");
		Результат.Вставить("Представление", Нстр("ru='Налоговая база'"));
	ИначеЕсли УсловныйКодПоказателя = "Р21Ст1Гр03" Тогда
		Результат.Вставить("Имя", "П000210000103_%1");
		Результат.Вставить("Представление", Нстр("ru='Сумма акциза'"));
	ИначеЕсли УсловныйКодПоказателя = "Р22Ст1Гр01" Тогда
		Результат.Вставить("Имя", "П000220000101_%1");
		Результат.Вставить("Представление", Нстр("ru='Код показателя'"));
	ИначеЕсли УсловныйКодПоказателя = "Р22Ст1Гр02" Тогда
		Результат.Вставить("Имя", "П000220000102_%1");
		Результат.Вставить("Представление", Нстр("ru='Налоговая база'"));
	ИначеЕсли УсловныйКодПоказателя = "Р22Ст1Гр03" Тогда
		Результат.Вставить("Имя", "П000220000103_%1");
		Результат.Вставить("Представление", Нстр("ru='Сумма вычета'"));
	ИначеЕсли УсловныйКодПоказателя = "Р24Ст1Гр01" Тогда
		Результат.Вставить("Имя", "П000240000101_%1");
		Результат.Вставить("Представление", Нстр("ru='Код показателя'"));
	ИначеЕсли УсловныйКодПоказателя = "Р24Ст1Гр02" Тогда
		Результат.Вставить("Имя", "П000240000102_%1");
		Результат.Вставить("Представление", Нстр("ru='Налоговая база'"));
	ИначеЕсли УсловныйКодПоказателя = "Р25Ст1Гр01" Тогда
		Результат.Вставить("Имя", "П000250000101_%1");
		Результат.Вставить("Представление", Нстр("ru='Код показателя'"));
	ИначеЕсли УсловныйКодПоказателя = "Р25Ст1Гр02" Тогда
		Результат.Вставить("Имя", "П000250000102_%1");
		Результат.Вставить("Представление", Нстр("ru='Налоговая база'"));
	ИначеЕсли УсловныйКодПоказателя = "Р25Ст1Гр03" Тогда
		Результат.Вставить("Имя", "П000250000103_%1");
		Результат.Вставить("Представление", Нстр("ru='Сумма акциза'"));
	ИначеЕсли УсловныйКодПоказателя = "Р25Ст1Гр04" Тогда
		Результат.Вставить("Имя", "П000250000104_%1");
		Результат.Вставить("Представление", Нстр("ru='Признак наличия банковской гарантии'"));
	ИначеЕсли УсловныйКодПоказателя = "Р26Ст1Гр01" Тогда
		Результат.Вставить("Имя", "П000260000101_%1");
		Результат.Вставить("Представление", Нстр("ru='Код показателя'"));
	ИначеЕсли УсловныйКодПоказателя = "Р26Ст1Гр02" Тогда
		Результат.Вставить("Имя", "П000260000102_%1");
		Результат.Вставить("Представление", Нстр("ru='Налоговая база'"));
	ИначеЕсли УсловныйКодПоказателя = "Р26Ст1Гр03" Тогда
		Результат.Вставить("Имя", "П000260000103_%1");
		Результат.Вставить("Представление", Нстр("ru='Сумма акциза'"));
	ИначеЕсли УсловныйКодПоказателя = "Р21Ст1Гр02" Тогда
		Результат.Вставить("Имя", "П000210000102_%1");
		Результат.Вставить("Представление", Нстр("ru='Налоговая база'"));
	ИначеЕсли УсловныйКодПоказателя = "Р3Ст10Гр03" Тогда
		Результат.Вставить("Имя", "П000030001003");
		Результат.Вставить("Представление", Нстр("ru='Код вида подакцизного товара'"));
	ИначеЕсли УсловныйКодПоказателя = "Р3Ст20Гр03" Тогда
		Результат.Вставить("Имя", "П000030002003");
		Результат.Вставить("Представление", Нстр("ru='Код показателя'"));
	ИначеЕсли УсловныйКодПоказателя = "Р3Ст30Гр03" Тогда
		Результат.Вставить("Имя", "П000030003003");
		Результат.Вставить("Представление", Нстр("ru='Код бюджетной классификации'"));
	ИначеЕсли УсловныйКодПоказателя = "Р3Ст100Гр03" Тогда
		Результат.Вставить("Имя", "П000030010003");
		Результат.Вставить("Представление", Нстр("ru='Налоговая база (стоимость реализованного(переданного) в налоговом периоде)'"));
	ИначеЕсли УсловныйКодПоказателя = "Р3Ст60Гр03" Тогда
		Результат.Вставить("Имя", "П000030006003");
		Результат.Вставить("Представление", Нстр("ru='Объем реализованного (переданного) в налоговом периоде'"));
	ИначеЕсли УсловныйКодПоказателя = "Р3Ст70Гр03" Тогда
		Результат.Вставить("Имя", "П000030007003");
		Результат.Вставить("Представление", Нстр("ru='Стоимость (цена реализации)'"));
	ИначеЕсли УсловныйКодПоказателя = "Р3Ст80Гр03" Тогда
		Результат.Вставить("Имя", "П000030008003");
		Результат.Вставить("Представление", Нстр("ru='Сумма таможенных платежей'"));
	ИначеЕсли УсловныйКодПоказателя = "Р3Ст90Гр03" Тогда
		Результат.Вставить("Имя", "П000030009003");
		Результат.Вставить("Представление", Нстр("ru='Расходы, произведенные в налоговом периоде на транспортировку природного газа за пределами РФ'"));
	ИначеЕсли УсловныйКодПоказателя = "Р3Ст110Гр03" Тогда
		Результат.Вставить("Имя", "П000030011003");
		Результат.Вставить("Представление", Нстр("ru='Сумма акциза, подлежащая уплате в бюджет'"));
	ИначеЕсли УсловныйКодПоказателя = "П101Ст10Гр03" Тогда
		Результат.Вставить("Имя", "П001010001003");
		Результат.Вставить("Представление", Нстр("ru='Код вида подакцизного товара'"));
	ИначеЕсли УсловныйКодПоказателя = "П101Ст1Гр01" Тогда
		Результат.Вставить("Имя", "П001010000101_%1");
		Результат.Вставить("Представление", Нстр("ru='Код показателя'"));
	ИначеЕсли УсловныйКодПоказателя = "П101Ст1Гр04" Тогда
		Результат.Вставить("Имя", "П001010000104_%1");
		Результат.Вставить("Представление", Нстр("ru='Налоговая база (общая мощность, л.с)'"));
	ИначеЕсли УсловныйКодПоказателя = "П101Ст1Гр02" Тогда
		Результат.Вставить("Имя", "П001010000102_%1");
		Результат.Вставить("Представление", Нстр("ru='Мощность двигателя, л.с.'"));
	ИначеЕсли УсловныйКодПоказателя = "П101Ст1Гр03" Тогда
		Результат.Вставить("Имя", "П001010000103_%1");
		Результат.Вставить("Представление", Нстр("ru='Количество подакцизного товара, шт.'"));
	ИначеЕсли УсловныйКодПоказателя = "П102Ст10Гр03" Тогда
		Результат.Вставить("Имя", "П001020001003");
		Результат.Вставить("Представление", Нстр("ru='Код вида подакцизного товара'"));
	ИначеЕсли УсловныйКодПоказателя = "П102Ст20Гр03" Тогда
		Результат.Вставить("Имя", "П001020002003");
		Результат.Вставить("Представление", Нстр("ru='Общее количество банковских гарантий'"));
	ИначеЕсли УсловныйКодПоказателя = "П102Ст30Гр03" Тогда
		Результат.Вставить("Имя", "П001020003003");
		Результат.Вставить("Представление", Нстр("ru='Общая сумма'"));
	ИначеЕсли УсловныйКодПоказателя = "П102Ст150Гр03" Тогда
		Результат.Вставить("Имя", "П001020015003");
		Результат.Вставить("Представление", Нстр("ru='Сумма, на которую выдана банковская гарантия'"));
	ИначеЕсли УсловныйКодПоказателя = "П102Ст40Гр03" Тогда
		Результат.Вставить("Имя", "П001020004003");
		Результат.Вставить("Представление", Нстр("ru='Общая сумма акциза, освобожденная от уплаты'"));
	ИначеЕсли УсловныйКодПоказателя = "П102Ст160Гр03" Тогда
		Результат.Вставить("Имя", "П001020016003");
		Результат.Вставить("Представление", Нстр("ru='Сумма акциза, освобожденная от уплаты в связи с представлением банковской гарантии'"));
	ИначеЕсли УсловныйКодПоказателя = "П102Ст160Гр04" Тогда
		Результат.Вставить("Имя", "П001020016004");
		Результат.Вставить("Представление", Нстр("ru='Сумма акциза, освобожденная от уплаты в связи с представлением банковской гарантии'"));
	ИначеЕсли УсловныйКодПоказателя = "П102Ст50Гр04" Тогда
		Результат.Вставить("Имя", "П001020005004");
		Результат.Вставить("Представление", Нстр("ru='Общая сумма акциза, освобожденная от уплаты в связи с представлением банковских гарантий'"));
	ИначеЕсли УсловныйКодПоказателя = "П102Ст110Гр03" Тогда
		Результат.Вставить("Имя", "П001020011003");
		Результат.Вставить("Представление", Нстр("ru='Код вида подакцизного товара'"));
	ИначеЕсли УсловныйКодПоказателя = "П102Ст115Гр03" Тогда
		Результат.Вставить("Имя", "П001020011503");
		Результат.Вставить("Представление", Нстр("ru='Дата выдачи банковской гарантии'"));
	ИначеЕсли УсловныйКодПоказателя = "П102Ст120Гр03" Тогда
		Результат.Вставить("Имя", "П001020012003");
		Результат.Вставить("Представление", Нстр("ru='Номер банковской гарантии'"));
	ИначеЕсли УсловныйКодПоказателя = "П102Ст130Гр03" Тогда
		Результат.Вставить("Имя", "П001020013003");
		Результат.Вставить("Представление", Нстр("ru='Дата начала действия банковской гарантии'"));
	ИначеЕсли УсловныйКодПоказателя = "П102Ст140Гр03" Тогда
		Результат.Вставить("Имя", "П001020014003");
		Результат.Вставить("Представление", Нстр("ru='Дата окончания действия банковской гарантии'"));
	ИначеЕсли УсловныйКодПоказателя = "П102Ст170Гр04" Тогда
		Результат.Вставить("Имя", "П001020017004");
		Результат.Вставить("Представление", Нстр("ru='Сумма акциза'"));
	ИначеЕсли УсловныйКодПоказателя = "П102Ст60Гр03" Тогда
		Результат.Вставить("Имя", "П001020006003");
		Результат.Вставить("Представление", Нстр("ru='Объем подакцизных нефтепродуктов (в тоннах) или мощность двигателей (в л.с.)'"));
	ИначеЕсли УсловныйКодПоказателя = "П102Ст180Гр03" Тогда
		Результат.Вставить("Имя", "П001020018003");
		Результат.Вставить("Представление", Нстр("ru='Объем реализованных на экспорт подакцизных нефтепродуктов (в тоннах) или мощность двигателей(в л.с.)'"));
	ИначеЕсли УсловныйКодПоказателя = "П102Ст180Гр04" Тогда
		Результат.Вставить("Имя", "П001020018004");
		Результат.Вставить("Представление", Нстр("ru='Сумма акциза'"));
	ИначеЕсли УсловныйКодПоказателя = "П102Ст70Гр04" Тогда
		Результат.Вставить("Имя", "П001020007004");
		Результат.Вставить("Представление", Нстр("ru='Сумма акциза'"));
	ИначеЕсли УсловныйКодПоказателя = "П102Ст190Гр04" Тогда
		Результат.Вставить("Имя", "П001020019004");
		Результат.Вставить("Представление", Нстр("ru='Сумма акциза'"));
	ИначеЕсли УсловныйКодПоказателя = "П102Ст80Гр04" Тогда
		Результат.Вставить("Имя", "П001020008004");
		Результат.Вставить("Представление", Нстр("ru='Сумма акциза'"));
	ИначеЕсли УсловныйКодПоказателя = "П102Ст200Гр04" Тогда
		Результат.Вставить("Имя", "П001020020004");
		Результат.Вставить("Представление", Нстр("ru='Сумма акциза'"));
	ИначеЕсли УсловныйКодПоказателя = "П102Ст60Гр04" Тогда
		Результат.Вставить("Имя", "П001020006004");
		Результат.Вставить("Представление", Нстр("ru='Сумма акциза'"));
	ИначеЕсли УсловныйКодПоказателя = "П102Ст90Гр04" Тогда
		Результат.Вставить("Имя", "П001020009004");
		Результат.Вставить("Представление", Нстр("ru='Сумма акциза'"));
	ИначеЕсли УсловныйКодПоказателя = "П102Ст210Гр03" Тогда
		Результат.Вставить("Имя", "П001020021003");
		Результат.Вставить("Представление", Нстр("ru='Объем реализованных на экспорт подакцизных нефтепродуктов (в тоннах) или мощность двигателей (в л.с.)'"));
	ИначеЕсли УсловныйКодПоказателя = "П102Ст210Гр04" Тогда
		Результат.Вставить("Имя", "П001020021004");
		Результат.Вставить("Представление", Нстр("ru='Сумма акциза'"));
	ИначеЕсли УсловныйКодПоказателя = "П102Ст100Гр04" Тогда
		Результат.Вставить("Имя", "П001020010004");
		Результат.Вставить("Представление", Нстр("ru='Сумма акциза'"));
	ИначеЕсли УсловныйКодПоказателя = "П102Ст190Гр03" Тогда
		Результат.Вставить("Имя", "П001020019003");
		Результат.Вставить("Представление", Нстр("ru='Объем реализованных на экспорт подакцизных нефтепродуктов (в тоннах) или мощность двигателей (в л.с.)'"));
	ИначеЕсли УсловныйКодПоказателя = "П102Ст200Гр03" Тогда
		Результат.Вставить("Имя", "П001020020003");
		Результат.Вставить("Представление", Нстр("ru='Объем реализованных на экспорт подакцизных нефтепродуктов (в тоннах) или мощность двигателей (в л.с.)'"));
	ИначеЕсли УсловныйКодПоказателя = "П102Ст220Гр03" Тогда
		Результат.Вставить("Имя", "П001020022003");
		Результат.Вставить("Представление", Нстр("ru='Превышение суммы акциза, освобожденной от уплаты'"));
	ИначеЕсли УсловныйКодПоказателя = "П103Ст50Гр03" Тогда
		Результат.Вставить("Имя", "П001030005003");
		Результат.Вставить("Представление", Нстр("ru=''"));
		
	ИначеЕсли УсловныйКодПоказателя = "П104Ст50Гр03" Тогда
		Результат.Вставить("Имя", "П001040005003");
		Результат.Вставить("Представление", Нстр("ru=''"));
		
	ИначеЕсли УсловныйКодПоказателя = "П103Ст1Гр06" Тогда
		Результат.Вставить("Имя", "П001030000106");
		Результат.Вставить("Представление", Нстр("ru=''"));
	
	ИначеЕсли УсловныйКодПоказателя = "П103Ст1Гр03" Тогда
		Результат.Вставить("Имя", "П001030000103");
		Результат.Вставить("Представление", Нстр("ru=''"));
	
	ИначеЕсли УсловныйКодПоказателя = "П103Ст1Гр01" Тогда
		Результат.Вставить("Имя", "П001030000101");
		Результат.Вставить("Представление", Нстр("ru=''"));
	
	ИначеЕсли УсловныйКодПоказателя = "П103Ст1Гр02" Тогда
		Результат.Вставить("Имя", "П001030000102");
		Результат.Вставить("Представление", Нстр("ru=''"));
	
	ИначеЕсли УсловныйКодПоказателя = "П104Ст1Гр01" Тогда
		Результат.Вставить("Имя", "П001040000101");
		Результат.Вставить("Представление", Нстр("ru=''"));
	
	ИначеЕсли УсловныйКодПоказателя = "П104Ст1Гр02" Тогда
		Результат.Вставить("Имя", "П001040000102");
		Результат.Вставить("Представление", Нстр("ru=''"));
	
	ИначеЕсли УсловныйКодПоказателя = "П104Ст1Гр03" Тогда
		Результат.Вставить("Имя", "П001040000103_%1");
		Результат.Вставить("Представление", Нстр("ru=''"));
	
	ИначеЕсли УсловныйКодПоказателя = "П103Ст20Гр01" Тогда
		Результат.Вставить("Имя", "П001030002001");
		Результат.Вставить("Представление", Нстр("ru=''"));
	
	ИначеЕсли УсловныйКодПоказателя = "П104Ст20Гр01" Тогда
		Результат.Вставить("Имя", "П001040002001");
		Результат.Вставить("Представление", Нстр("ru=''"));
	
	ИначеЕсли УсловныйКодПоказателя = "П104Ст1Гр06" Тогда
		Результат.Вставить("Имя", "П001040000106_%1");
		Результат.Вставить("Представление", Нстр("ru=''"));
		
	КонецЕсли;
	ДобавитьКординаты(Результат);
	Возврат Результат;
КонецФункции

&НаСервере
Функция ПоказателиКС(ЛеваяЧасть, ПраваяЧасть, РазмерЛев = Истина, РазмерПрав = Истина)
	ПоказателиКС = Новый Структура();
	Если НЕ ТипЗнч(ЛеваяЧасть) = Тип("Дата") Тогда
		Если РазмерЛев Тогда 
			ЛеваяЧасть = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, ЛеваяЧасть);
		КонецЕсли;
	КонецЕсли;
	Если НЕ ТипЗнч(ПраваяЧасть) = Тип("Дата") Тогда
		Если РазмерПрав Тогда 
			ПраваяЧасть = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, ПраваяЧасть);
		КонецЕсли;
	КонецЕсли;
	ПоказателиКС.Вставить("ЛеваяЧасть", ЛеваяЧасть);
	Если ТипЗнч(ЛеваяЧасть) = Тип("Дата") Тогда
		ПоказателиКС.Вставить("ЛеваяЧастьСтр", Формат(ЛеваяЧасть, "ЧРД=,; ЧН=; ДФ=dd.MM.yyyy; ДП=-"));
	Иначе
		ПоказателиКС.Вставить("ЛеваяЧастьСтр", Формат(ЛеваяЧасть, "ЧРД=,; ЧН="));
	КонецЕсли;
	ПоказателиКС.Вставить("ПраваяЧасть", ПраваяЧасть);
	Если ТипЗнч(ПраваяЧасть) = Тип("Дата") Тогда
		ПоказателиКС.Вставить("ПраваяЧастьСтр", Формат(ПраваяЧасть, "ЧРД=,; ЧН=; ДФ=dd.MM.yyyy; ДП=-"));
	Иначе
		ПоказателиКС.Вставить("ПраваяЧастьСтр", Формат(ПраваяЧасть, "ЧРД=,; ЧН="));
	КонецЕсли;
	Возврат ПоказателиКС;
КонецФункции

&НаСервере
Процедура ВставитьЗначениеПоказателя(ИсточникДанных, Показатель, ИмяКолонки = "")
	
	Если ТипЗнч(ИсточникДанных) = Тип("СтрокаТаблицыЗначений") Тогда
		Если ИсточникДанных.Владелец().Колонки.Найти(Показатель.Имя) <> Неопределено Тогда
			ЗначениеПоказателя = ИсточникДанных[Показатель.Имя];
		Иначе
			ЗначениеПоказателя = 0;
		КонецЕсли;
	Иначе
		Если ЗначениеЗаполнено(ИмяКолонки) Тогда
			ЗначениеПоказателя = ИсточникДанных[ИмяКолонки];
		ИначеЕсли ИсточникДанных.Свойство(Показатель.Имя) Тогда
			ЗначениеПоказателя = ИсточникДанных[Показатель.Имя];
		Иначе
			ЗначениеПоказателя = 0;
		КонецЕсли;
	КонецЕсли;
	
	Если Показатель.Свойство("ИзменяемаяРазмерность") И Показатель.ИзменяемаяРазмерность = Истина Тогда
		ЗначениеПоказателя = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, ЗначениеПоказателя);
	КонецЕсли;
	
	Если Показатель.Свойство("Формат") И ЗначениеЗаполнено(Показатель.Формат) Тогда
		ПредставлениеЗначения = Формат(ЗначениеПоказателя, Показатель.Формат);
	ИначеЕсли ТипЗнч(ЗначениеПоказателя) = Тип("Строка") Тогда
		ПредставлениеЗначения = ЗначениеПоказателя;
	ИначеЕсли ТипЗнч(ЗначениеПоказателя) = Тип("Число") Тогда
		ПредставлениеЗначения = Формат(ЗначениеПоказателя, "ЧРД=,; ЧН=");
	ИначеЕсли ТипЗнч(ЗначениеПоказателя) = Тип("Дата") Тогда
		ПредставлениеЗначения = Формат(ЗначениеПоказателя, "ДЛФ=D");
	Иначе
		ПредставлениеЗначения = Строка(ЗначениеПоказателя);
	КонецЕсли;
	
	Показатель.Вставить("Значение", ЗначениеПоказателя);
	Показатель.Вставить("ЗначениеСтр", ПредставлениеЗначения);
	
КонецПроцедуры

&НаСервере
Процедура ВставитьЗначениеМногострочногоПоказателя(ИсточникДанных, Показатель, НомерСтроки, ИмяКолонки = "")
	
	НомерСтрокиСтр = СтрокаЧГ0(НомерСтроки);
	ИмяПоказателя = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Показатель.Имя, НомерСтрокиСтр);
	
	Если ЗначениеЗаполнено(ИмяКолонки) Тогда
		ЗначениеПоказателя = ИсточникДанных[ИмяКолонки];
	ИначеЕсли ИсточникДанных.Свойство(ИмяПоказателя) Тогда
		ЗначениеПоказателя = ИсточникДанных[ИмяПоказателя];
	Иначе
		ЗначениеПоказателя = 0;
	КонецЕсли;
	
	Если Показатель.Свойство("ИзменяемаяРазмерность") И Показатель.ИзменяемаяРазмерность = Истина Тогда
		ЗначениеПоказателя = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, ЗначениеПоказателя);
	КонецЕсли;
	
	Если Показатель.Свойство("Формат") И ЗначениеЗаполнено(Показатель.Формат) Тогда
		ПредставлениеЗначения = Формат(ЗначениеПоказателя, Показатель.Формат);
	ИначеЕсли ТипЗнч(ЗначениеПоказателя) = Тип("Строка") Тогда
		ПредставлениеЗначения = ЗначениеПоказателя;
	ИначеЕсли ТипЗнч(ЗначениеПоказателя) = Тип("Число") Тогда
		ПредставлениеЗначения = Формат(ЗначениеПоказателя, "ЧРД=,; ЧН=");
	ИначеЕсли ТипЗнч(ЗначениеПоказателя) = Тип("Дата") Тогда
		ПредставлениеЗначения = Формат(ЗначениеПоказателя, "ДЛФ=D");
	Иначе
		ПредставлениеЗначения = Строка(ЗначениеПоказателя);
	КонецЕсли;
	
	Показатель.Вставить("Значение", ЗначениеПоказателя);
	Показатель.Вставить("ЗначениеСтр", ПредставлениеЗначения);
	Показатель.Вставить("НомерСтроки", НомерСтрокиСтр);
	
КонецПроцедуры

&НаСервере
Процедура ЗарегистрироватьФормулуДляРасшифровки(ОписаниеКС);
	
	РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(СписокРасшифровкиФормулы, ОписаниеКС, , СчетчикФормулДляРасшифровок);
	
КонецПроцедуры

&НаСервере
Процедура ВнестиПоказательВРасшифровку(Показатель, ИмяСтраницы, НомерСтраницы = Неопределено)
	
	НомерСтраницыДляЗамены = ?(ЗначениеЗаполнено(НомерСтраницы), НомерСтраницы, "");
	ПредставлениеПоказателя = СтрокаСНомеромСтраницы(Показатель.Представление, НомерСтраницыДляЗамены);
	
	ЗначениеПоказателя = ?(ТипЗнч(Показатель.Значение) = Тип ("Дата"), Показатель.ЗначениеСтр, Показатель.Значение);
	
	Если Показатель.Свойство("НомерСтроки") Тогда
		ИмяПоказателя = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Показатель.Имя, Показатель.НомерСтроки);
	Иначе
		ИмяПоказателя = Показатель.Имя;
	КонецЕсли;
	
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(
		СписокРасшифровкиПоказателей,
		ИмяПоказателя,
		ПредставлениеПоказателя,
		ЗначениеПоказателя,
		"",
		СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка,
		ИмяСтраницы,
		Неопределено,
		НомерСтраницы,
		СчетчикФормулДляРасшифровок);
	
КонецПроцедуры

&НаСервере
Функция СтрокаСНомеромСтраницы (ИсходнаяСтрока, НомерСтраницы)
	ТекстСтраница = Нстр("ru='страница №'");
	Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ИсходнаяСтрока, ", " + ТекстСтраница + " " + НомерСтраницы + ")");
КонецФункции

&НаСервере
Процедура ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, ЭтоОшибка, Описание = Неопределено, Нарушение = Неопределено)
	ТекстовоеПредставлениеФормулы = ?(ПустаяСтрока(ТекстФормулы), "", ТекстФормулы + ". ") + ОписаниеКС;
	СтруктураОшибок.Вставить("Описание" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), Описание));
	СтруктураОшибок.Вставить("Нарушение" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), Нарушение));
	СтруктураОшибок.Вставить("Расшифровка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), Расшифровка));
	СтруктураОшибок.Вставить("ЭтоОшибка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), ЭтоОшибка);
	СтруктураОшибок.Вставить("ТекстовоеПредставлениеФормулы" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), ТекстовоеПредставлениеФормулы));
КонецПроцедуры

&НаСервере
Функция СтрокаЧГ0(ИсходноеЧисло)
	Возврат Формат(ИсходноеЧисло, "ЧН=; ЧГ=0");
КонецФункции

&НаСервере
Функция КодНайден(ЗначениеКода, Условия = Неопределено)
	МассивКодов = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Условия);
	Возврат МассивКодов.Найти(ЗначениеКода) <> Неопределено;
КонецФункции

&НаСервере
Функция КоличествоСтрок(Данные, Показатель)
	Инд = 1; Количество = 0;
	Пока Данные.Свойство(Лев(Показатель, 14) + СтрокаЧГ0(Инд)) Цикл
		Количество = Количество + 1;
		Инд = Инд + 1;
	КонецЦикла;
	Возврат Количество;
КонецФункции

&НаСервере
Функция РасшифровкаВСтр(СтрокаДляРасшифровки)
	Если ТипЗнч(СтрокаДляРасшифровки) = Тип("Строка") Тогда
		Если Прав(СтрокаДляРасшифровки, 3) = " + " Тогда
			Возврат Лев(СтрокаДляРасшифровки, СтрДлина(СтрокаДляРасшифровки) - 3);
		ИначеЕсли Прав(СтрокаДляРасшифровки, 3) = " - " Тогда
			Возврат Лев(СтрокаДляРасшифровки, СтрДлина(СтрокаДляРасшифровки) - 3);
		ИначеЕсли Прав(СтрокаДляРасшифровки, 3) = " и " Тогда
			Возврат Лев(СтрокаДляРасшифровки, СтрДлина(СтрокаДляРасшифровки) - 3);
		Иначе
			Возврат СтрокаДляРасшифровки;
		КонецЕсли;
	ИначеЕсли ТипЗнч(СтрокаДляРасшифровки) = Тип("Число") Тогда
		Возврат СтрокаЧГ0(РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтрокаДляРасшифровки));
	Иначе
		Возврат СтрокаДляРасшифровки;
	КонецЕсли;
КонецФункции

&НаСервере
Функция ПолучитьСтрокуИзСпискаВыбора(ИмяСекции)
	
	Результат = "";
	
	МакетСоставаПоказателей = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет("СпискиВыбора2016Кв2");
	
	Область = МакетСоставаПоказателей.Области.Найти(ИмяСекции);
	Если НЕ Область = Неопределено Тогда
		Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Строки Тогда
			ВерхОбласти = Область.Верх;
			НизОбласти = Область.Низ;
			Для НомСтр = ВерхОбласти По НизОбласти Цикл
				КодПоказателя = СокрП(МакетСоставаПоказателей.Область(НомСтр, 1).Текст);
				Если ЗначениеЗаполнено(КодПоказателя) Тогда
					Результат = Результат + КодПоказателя + ?(НомСтр = НизОбласти, "", ",");
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ДобавитьКординаты(Результат)
	Перем ИмяПоказателя;
	ИмяПоказателя = Результат.Имя;
	ИмяПоказателя = СтрЗаменить(ИмяПоказателя, "_%1", "");
	Если СтрНайти("П001020001003|П001020002003|П001020003003|П001020004003|П001020004004|П001020005004|П001020006003
					|П001020006004|П001020007004|П001020008004|П001020009004|П001020010004", ИмяПоказателя) <> 0 Тогда
		Результат.Вставить("Раздел", "Приложение21");
		Результат.Вставить("ПорядокСтраницы", 1);
	ИначеЕсли СтрНайти("П001020011003|П001020011503|П001020012003|П001020013003|П001020014003|П001020015003|П001020016003
						|П001020016004|П001020017003|П001020017004|П001020017005|П001020017006|П001020018003|П001020018004|П001020018005
						|П001020018006|П001020019003|П001020019004|П001020020003|П001020020004|П001020020005|П001020020006|П001020021003
						|П001020021004|П001020021005|П001020021006|П001020022003", ИмяПоказателя) <> 0 Тогда
		Результат.Вставить("Раздел", "Приложение22");
		Результат.Вставить("ПорядокСтраницы", 2);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция НомерСтраницыНав(НомерСтраницы, ПорядокСтраницы)
	МассивНомеров = СтрРазделить(НомерСтраницы, ",");
	Индекс = МассивНомеров.ВГраница();
	Пока Индекс >= ПорядокСтраницы Цикл 
		Если Индекс > ПорядокСтраницы-1 Тогда
			МассивНомеров.Удалить(Индекс);
		КонецЕсли; 
		Индекс = Индекс - 1; 
	КонецЦикла;
	Возврат СтрСоединить(МассивНомеров, ",");
КонецФункции

&НаСервере
Функция НомерСтраницыМнУ(НомерСтраницы, ПорядокСтраницы)
	Перем Результат;
	Результат = "";
	ЧислоПорядков = СтрЧислоВхождений(НомерСтраницы, ",") + 1;
	Если ЧислоПорядков = 0 Тогда
		Возврат НомерСтраницы;
	ИначеЕсли ЧислоПорядков = ПорядокСтраницы Тогда
		Возврат НомерСтраницы;
	Иначе
		Результат = НомерСтраницыНав(НомерСтраницы, ПорядокСтраницы);
	КонецЕсли;
	Возврат Результат;
КонецФункции

&НаСервере
Процедура ДобавитьСтрокуВТаблицу(Таблица, Ветка2, Ветка21, Ветка211 = Неопределено, НомерСтраницы)
	ОбъединеннаяСтруктура = Новый Структура;
	Для Каждого ЭлементСтруктуры Из Ветка2.Данные Цикл
		ОбъединеннаяСтруктура.Вставить(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Значение);
	КонецЦикла;
	Для Каждого ЭлементСтруктуры Из Ветка21.Данные Цикл
		ОбъединеннаяСтруктура.Вставить(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Значение);
	КонецЦикла;
	Если Ветка211 <> Неопределено Тогда
		Для Каждого ЭлементСтруктуры Из Ветка211.Данные Цикл
			ОбъединеннаяСтруктура.Вставить(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Значение);
		КонецЦикла;
	КонецЕсли;
	НоваяСтрока = Таблица.Добавить();
	НоваяСтрока.Представление = НомерСтраницы;
	НоваяСтрока.Данные = ОбъединеннаяСтруктура;
КонецПроцедуры

&НаСервере
Функция НомерСтраницы(НомСтрокиВДереве, НомСтрокиВВетке2, НомСтрокиВВетке21 = "")
	Разделитель = ",";
	Возврат СтрокаЧГ0(НомСтрокиВДереве) + Разделитель + СтрокаЧГ0(НомСтрокиВВетке2)
		+ ?(ЗначениеЗаполнено(НомСтрокиВВетке21), Разделитель + СтрокаЧГ0(НомСтрокиВВетке21), "");
КонецФункции

&НаСервере
Функция ДанныеИзДереваРаздела(ИмяРаздела, ДокументПРП = Неопределено) Экспорт
	Если ДокументПРП = Неопределено Тогда
		ДеревоДанныхРаздела = ПолучитьИзВременногоХранилища(СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяРаздела]);
	Иначе
		ДанныеОтчета = ДокументПРП.ДанныеОтчета.Получить();
		Если ТипЗнч(ДанныеОтчета) = Тип("Структура") Тогда
			ДеревоДанныхРаздела = ДанныеОтчета.ДанныеМногоуровневыхРазделов.Приложение21;
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("Представление");
	Таблица.Колонки.Добавить("Данные");
	Для НомСтрокиВДереве = 1 По ДеревоДанныхРаздела.Строки.Количество() Цикл
		Ветка2 = ДеревоДанныхРаздела.Строки[НомСтрокиВДереве - 1];
		Для НомСтрокиВВетке2 = 1 По Ветка2.Строки.Количество() Цикл
			Ветка21 = Ветка2.Строки[НомСтрокиВВетке2 - 1];
			Если Ветка21.Строки.Количество() = 0 Тогда
				Представление = НомерСтраницы(НомСтрокиВДереве, НомСтрокиВВетке2,);
				ДобавитьСтрокуВТаблицу(Таблица, Ветка2, Ветка21, , Представление);
			Иначе
				Для НомСтрокиВВетке21 = 1 По Ветка21.Строки.Количество() Цикл
					Ветка211 = Ветка21.Строки[НомСтрокиВВетке21 - 1];
					Представление = НомерСтраницы(НомСтрокиВДереве, НомСтрокиВВетке2, НомСтрокиВВетке21);
					ДобавитьСтрокуВТаблицу(Таблица, Ветка2, Ветка21, Ветка211, Представление);
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	Возврат Таблица;
КонецФункции

#КонецОбласти

#Область КС_Сервис_v2

&НаСервере
Процедура РасшифроватьПоказатели(Знач СтруктураПоказателей, 
	Знач Настройки,
	Знач НазваниеСтраницы,
	Знач НомерСтраницы,
	Знач ВключаяПоказатели	= Неопределено,
	Знач ИсключаяПоказатели	= Неопределено,
	Знач Отчет = Неопределено)
	
	Для каждого ЭлементКоллекции Из СтруктураПоказателей Цикл
		
		Если ПропуститьЭлемент(ЭлементКоллекции.Ключ, ВключаяПоказатели, ИсключаяПоказатели) Тогда
			Продолжить;
		КонецЕсли;
		
		ВнестиПоказательВРасшифровку(ЭлементКоллекции.Значение, НазваниеСтраницы, СтрокаЧГ0(НомерСтраницы));
	
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗарегистрироватьФормулу(Знач Настройки);

	СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
	ОписаниеКС = СформироватьОписаниеКС(Настройки, "ДопСведенияВЗаголовокРасшифровки");
	РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(СписокРасшифровкиФормулы, 
		ОписаниеКС, , СчетчикФормулДляРасшифровок);
	
КонецПроцедуры

&НаСервере
Процедура ДополнитьСтруктуруОшибок(Настройки)
	
	Если Настройки.ЭтоОшибка Тогда
		Настройки.КоличествоНайденныхОшибок = Настройки.КоличествоНайденныхОшибок + 1;
	Иначе
		Настройки.КоличествоНайденныхБезОшибок = Настройки.КоличествоНайденныхБезОшибок + 1;
	КонецЕсли;
	
	Счетчик		= Формат(Настройки.КоличествоНайденныхОшибок + Настройки.КоличествоНайденныхБезОшибок, "ЧГ=0");
	ОписаниеКС	= СформироватьОписаниеКС(Настройки, "ДопСведенияВОписаниеКС");
	ОписаниеКС	= ?(ПустаяСтрока(Настройки.ТекстФормулы), "", Настройки.ТекстФормулы + Символы.ПС) + ОписаниеКС;
	
	Настройки.СтруктураОшибок.Вставить("ТекстовоеПредставлениеФормулы" + Счетчик, ОписаниеКС);
	Настройки.СтруктураОшибок.Вставить("Расшифровка"	+ Счетчик, Настройки.Расшифровка);
	Настройки.СтруктураОшибок.Вставить("ЭтоОшибка"		+ Счетчик, Настройки.ЭтоОшибка);
	Настройки.СтруктураОшибок.Вставить("Нарушение"		+ Счетчик, Настройки.Нарушение);
	Настройки.СтруктураОшибок.Вставить("Описание"		+ Счетчик, Настройки.ОписаниеОшибки);
	Настройки.СтруктураОшибок.Вставить("Комментарий"	+ Счетчик, НСтр("ru=''"));
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьИнфоКПредставлениюПоказателя(Показатель, СтрокаИнфо)
	
	ПредставлениеПоказателя = Показатель.Представление;
	
	Если СтрЗаканчиваетсяНа(ПредставлениеПоказателя, ")") Тогда
		ПозицияОткрСкобки = СтрНайти(ПредставлениеПоказателя, "(", НаправлениеПоиска.СКонца);
		Если ПозицияОткрСкобки > 0 Тогда
			ПредставлениеПоказателя = Лев(ПредставлениеПоказателя, ПозицияОткрСкобки);
			Показатель.Представление = ПредставлениеПоказателя + СтрокаИнфо + ")";
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Показатель.Представление = ПредставлениеПоказателя + " (" + СтрокаИнфо + ")";
	
КонецПроцедуры

&НаСервере
Функция ОбработатьНастройки(Знач Настройки = Неопределено, 
	Знач ИзменяемыеСвойства 	= Неопределено, 
	Знач СтруктураРезультата 	= Неопределено)
	
	Если Настройки = Неопределено Тогда
		
		Настройки = Новый Структура;
		Настройки.Вставить("ТекстФормулы"			, (НСтр("ru=''")));
		Настройки.Вставить("Нарушение"				, (НСтр("ru=''")));
		Настройки.Вставить("ОписаниеКС"				, (НСтр("ru=''")));
		Настройки.Вставить("ОписаниеОшибки"			, (НСтр("ru=''")));
		Настройки.Вставить("ОписаниеОшибок"			, Новый Массив);
		Настройки.Вставить("Расшифровка"			, (НСтр("ru=''")));
		Настройки.Вставить("ШаблонРасшифровки"		, (НСтр("ru=''")));
		Настройки.Вставить("ДопСведения"			, (НСтр("ru=''")));
		Настройки.Вставить("ШаблонДопСведений"		, (НСтр("ru=''")));
		Настройки.Вставить("ДопСведенияПараметры"	, Новый Структура);
		Настройки.Вставить("ЭтоОшибка"				, Ложь);
		Настройки.Вставить("СтруктураОшибок");
		Настройки.Вставить("КоличествоНайденныхОшибок");
		Настройки.Вставить("КоличествоНайденныхБезОшибок");
		Настройки.Вставить("ДопСведенияВОписаниеКС");
		Настройки.Вставить("ДопСведенияВЗаголовокРасшифровки");
		Настройки.Вставить("ДопСведенияВСтрокуРасшифровки");
	
	КонецЕсли;
	
	Если Не ИзменяемыеСвойства = Неопределено Тогда
		Для каждого ЭлементКоллекции Из ИзменяемыеСвойства Цикл
			Если Настройки.Свойство(ЭлементКоллекции.Ключ) Тогда
				Настройки.Вставить(ЭлементКоллекции.Ключ, ЭлементКоллекции.Значение);
			КонецЕсли; 
		КонецЦикла;
	КонецЕсли;
	
	Если Не СтруктураРезультата = Неопределено Тогда
		Для каждого ЭлементКоллекции Из СтруктураРезультата Цикл
			Если Настройки.Свойство(ЭлементКоллекции.Ключ) Тогда
				Настройки.Вставить(ЭлементКоллекции.Ключ, ЭлементКоллекции.Значение);
			КонецЕсли; 
		КонецЦикла;
	КонецЕсли;
	
	Возврат Настройки;
	
КонецФункции

&НаСервере
Функция ЗаполнитьПоказатели(Знач СтрокаПоказателей, Источник, НомерСтроки = 0, ПоКолонке = Ложь)

	МассивНазваний			= СтрРазделить(СтрокаПоказателей, ", ", Ложь);
	СтруктураПоказателей	= Новый Структура;
	
	Для каждого ЭлементМассива Из МассивНазваний Цикл
		Показатель = ПоказательПоСтроке(ЭлементМассива);
		СтруктураПоказателей.Вставить(ЭлементМассива, Показатель);
	КонецЦикла;
	
	Для каждого ЭлементКоллекции Из СтруктураПоказателей Цикл
		Если ЗначениеЗаполнено(НомерСтроки) Тогда
			ВставитьЗначениеМногострочногоПоказателя(Источник, ЭлементКоллекции.Значение, НомерСтроки, 
				?(ПоКолонке, ЭлементКоллекции.Ключ, ""));
		Иначе
			ВставитьЗначениеПоказателя(Источник, ЭлементКоллекции.Значение, ?(ПоКолонке, ЭлементКоллекции.Ключ, ""));
		КонецЕсли;
	КонецЦикла;
	
	Возврат СтруктураПоказателей;
	
КонецФункции

&НаСервере
Функция ОбработатьРезультат(Знач Настройки, Знач СтруктураРезультата);
	
	ЗаполнитьЗначенияСвойств(СтруктураРезультата, Настройки,
		"КоличествоНайденныхОшибок, КоличествоНайденныхБезОшибок");
	
	Возврат СтруктураРезультата;
	
КонецФункции

&НаСервере
Функция ПропуститьЭлемент(НазваниеПоказателя, СтрокаВключая, СтрокаИсключая)
	
	Если СтрокаВключая = Неопределено И СтрокаИсключая = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли; 
	
	Обработать	= Не СтрокаВключая = Неопределено И Не СтрНайти(СтрокаВключая, НазваниеПоказателя) = 0
		Или Не СтрокаИсключая = Неопределено И СтрНайти(СтрокаИсключая, НазваниеПоказателя) = 0;
	Исключить	= Не СтрокаИсключая = Неопределено И Не СтрНайти(СтрокаИсключая, НазваниеПоказателя) = 0
		Или Не СтрокаВключая = Неопределено И СтрНайти(СтрокаВключая, НазваниеПоказателя) = 0;
	
	Если Исключить Тогда
		Возврат Истина;
	КонецЕсли; 
	
	Если Обработать Тогда
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция СформироватьОписаниеКС(Знач Настройки, ЗначениеСвойства)
	
	Если Настройки[ЗначениеСвойства] Тогда
		
		Если Не Настройки.ДопСведенияПараметры = Неопределено И
			Не Настройки.ДопСведенияПараметры.Количество() = 0 Тогда
			
			МассивПараметров = Новый Массив;
			Для каждого ЭлементКоллекции Из Настройки.ДопСведенияПараметры Цикл
				МассивПараметров.Добавить(ЭлементКоллекции.Значение);
			КонецЦикла;
			
			КоличествоПараметров = МассивПараметров.Количество();
			
			Если КоличествоПараметров = 1 Тогда
				Настройки.ДопСведения = СтрЗаменить(Настройки.ШаблонДопСведений, "%1", МассивПараметров[0]);
			ИначеЕсли КоличествоПараметров = 2 Тогда
				Настройки.ДопСведения = СтрЗаменить(Настройки.ШаблонДопСведений, "%1", МассивПараметров[0]);
				Настройки.ДопСведения = СтрЗаменить(Настройки.ДопСведения, "%2", МассивПараметров[1]);
			ИначеЕсли КоличествоПараметров = 3 Тогда
				Настройки.ДопСведения = СтрЗаменить(Настройки.ШаблонДопСведений, "%1", МассивПараметров[0]);
				Настройки.ДопСведения = СтрЗаменить(Настройки.ДопСведения, "%2", МассивПараметров[1]);
				Настройки.ДопСведения = СтрЗаменить(Настройки.ДопСведения, "%3", МассивПараметров[2]);
			ИначеЕсли КоличествоПараметров = 4 Тогда
				Настройки.ДопСведения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					Настройки.ШаблонДопСведений, МассивПараметров[0], МассивПараметров[1], МассивПараметров[2], 
					МассивПараметров[3]);
			ИначеЕсли КоличествоПараметров = 5 Тогда
				Настройки.ДопСведения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					Настройки.ШаблонДопСведений, МассивПараметров[0], МассивПараметров[1], МассивПараметров[2], 
					МассивПараметров[3], МассивПараметров[4]);
			Иначе
				Настройки.ДопСведения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					Настройки.ШаблонДопСведений, МассивПараметров[0], МассивПараметров[1], МассивПараметров[2], 
					МассивПараметров[3], МассивПараметров[4], МассивПараметров[5]);
			КонецЕсли;
				
			Возврат Настройки.ОписаниеКС + " (" + Настройки.ДопСведения + ")"; 
		КонецЕсли; 
	КонецЕсли;
	
	Возврат Настройки.ОписаниеКС;
	
КонецФункции

#КонецОбласти

#КонецОбласти
