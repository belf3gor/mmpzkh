#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

Функция ВерсияФорматаВыгрузки(Знач НаДату = Неопределено, ВыбраннаяФорма = Неопределено) Экспорт
	
	Возврат Перечисления.ВерсииФорматовВыгрузки.Версия500;
	
КонецФункции

Функция ТаблицаФормОтчета() Экспорт
	
	ТаблицаФормОтчета = НоваяТаблицаФормОтчета();
	
	ЗаполнитьЗначенияСвойств(ТаблицаФормОтчета.Добавить(), РеквизитыФормыОтчета2019());
	
	НоваяФорма = ТаблицаФормОтчета.Добавить();
	НоваяФорма.ФормаОтчета        = "ФормаОтчета2014кв1";
	НоваяФорма.ОписаниеОтчета     = "Форма утверждена приказом ФНС РФ от 27.12.2010 № ММВ-7-3/768@ (в редакции приказа ФНС России от 14.11.2013 г. N ММВ-7-3/501@)";
	НоваяФорма.РедакцияФормы      = "от 14.11.2013 г. N ММВ-7-3/501@";
	НоваяФорма.ДатаНачалоДействия = '20140101';
	НоваяФорма.ДатаКонецДействия  = '20191231';
	
	НоваяФорма = ТаблицаФормОтчета.Добавить();
	НоваяФорма.ФормаОтчета        = "ФормаОтчета2011кв1";
	НоваяФорма.ОписаниеОтчета     = "Форма утверждена приказом ФНС РФ от 27.12.2010 № ММВ-7-3/768@";
	НоваяФорма.РедакцияФормы      = "от 27.12.2010 № ММВ-7-3/768@";
	НоваяФорма.ДатаНачалоДействия = '20110101';
	НоваяФорма.ДатаКонецДействия  = '20131231';

	Возврат ТаблицаФормОтчета;
	
КонецФункции

Функция ДанныеРеглОтчета(ЭкземплярРеглОтчета) Экспорт
	
	Период         = ЭкземплярРеглОтчета.ДатаОкончания;
	ВыбраннаяФорма = ЭкземплярРеглОтчета.ВыбраннаяФорма;
	ДанныеОтчета   = ЭкземплярРеглОтчета.ДанныеОтчета.Получить();
	
	ТаблицаДанныхРеглОтчета = ИнтерфейсыВзаимодействияБРО.НовыйТаблицаДанныхРеглОтчета();
	
	Если ЭкземплярРеглОтчета.ВыбраннаяФорма = "ФормаОтчета2014кв1"
		Или ЭкземплярРеглОтчета.ВыбраннаяФорма = РеквизитыФормы2019().ИмяОбъекта Тогда
		
		ДанныеДекларации = ПрочитатьДанныеДекларации(ДанныеОтчета, ЭкземплярРеглОтчета.ВыбраннаяФорма);
		Если ДанныеДекларации <> Неопределено Тогда
			Сумма = ТаблицаДанныхРеглОтчета.Добавить();
			Сумма.Период    = Период;
			Сумма.ВидНалога = Перечисления.ВидыНалогов.НДФЛ_ИП;
			Сумма.ОКАТО     = ДанныеДекларации.ОКТМО;
			Сумма.Сумма     = ДанныеДекларации.ПредполагаемаяСуммаДоходов;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ТаблицаДанныхРеглОтчета;
	
КонецФункции

Функция ДеревоФормИФорматов() Экспорт
	
	ДеревоФормИФорматов = НовоеДеревоФормИФорматов();
	
	СтрокаФормыПоФормату = ОпределитьФормуВДеревеФормИФорматов(ДеревоФормИФорматов, "1151021", '20101227', "ММВ-7-3/768@", "ФормаОтчета2011кв1");
	ОпределитьФорматВДеревеФормИФорматов(СтрокаФормыПоФормату, "5.01");
	
	СтрокаФормыПоФормату = ОпределитьФормуВДеревеФормИФорматов(ДеревоФормИФорматов, "1151021", '20131114', "ММВ-7-3/501@", "ФормаОтчета2014кв1");
	ОпределитьФорматВДеревеФормИФорматов(СтрокаФормыПоФормату, "5.02");
	
	СтрокаФормыПоФормату = ДеревоФормИФорматов.Строки.Добавить();
	ЗаполнитьЗначенияСвойств(СтрокаФормыПоФормату, РеквизитыФормы2019());
	ЗаполнитьЗначенияСвойств(СтрокаФормыПоФормату.Строки.Добавить(), РеквизитыФормата2019());
	
	Возврат ДеревоФормИФорматов;
	
КонецФункции

// Возвращает имя формы, действующей в налоговом периоде
//
// Параметры:
//   Период - дата
//
Функция ФормаПоУмолчанию(Знач Период) Экспорт
	
	ТекущаяДатаПользователя = ОбщегоНазначения.ТекущаяДатаПользователя();
	
	ДействующиеФормы = ДействующиеФормы(Период);
	Если ДействующиеФормы.Количество() = 0 Тогда
		Возврат "";
	КонецЕсли;
	
	// Выбираем самую новую из вступивших в силу форм отчета
	Для Каждого Строка Из ДействующиеФормы Цикл
		Если Строка.ДатаНачалоДействия <= ТекущаяДатаПользователя Тогда
			ВыбраннаяФорма = Строка;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ВыбраннаяФорма = Неопределено Тогда
		// Форма отчета одна, но еще не вступила в силу
		ВыбраннаяФорма = ДействующиеФормы[0];
	КонецЕсли;
	
	ОписаниеОтчета = ВыбраннаяФорма.ОписаниеОтчета;
	РедакцияФормы = ВыбраннаяФорма.РедакцияФормы;
	
	Возврат ВыбраннаяФорма.ФормаОтчета;
	
КонецФункции

Функция ДействующиеФормы(Знач Период) Экспорт
	
	Период = НачалоДня(КонецГода(Период));
	
	ДействующиеФормы = Новый Массив;
	
	ТаблицаФормОтчета = ТаблицаФормОтчета();
	ТаблицаФормОтчета.Сортировать("ДатаНачалоДействия Убыв");
	Для Каждого Строка Из ТаблицаФормОтчета Цикл
		Если (Строка.ДатаНачалоДействия) <= Период И (Период <= Строка.ДатаКонецДействия Или Не ЗначениеЗаполнено(Строка.ДатаКонецДействия)) Тогда
			ДействующиеФормы.Добавить(Строка);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ДействующиеФормы;
	
КонецФункции

Функция СостояниеОтправки(ЭкземплярРеглОтчета) Экспорт
	
	Если Не ЗначениеЗаполнено(ЭкземплярРеглОтчета) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	КонтекстЭДОСервер = ДокументооборотСКОВызовСервера.ПолучитьОбработкуЭДО();
	Если КонтекстЭДОСервер <> Неопределено Тогда
		СостояниеОтправки = КонтекстЭДОСервер.ТекущееСостояниеОтправки(ЭкземплярРеглОтчета);
	КонецЕсли;
	
	Возврат СостояниеОтправки;
	
КонецФункции

Функция ДоступнаПечатьPDF417(ВыбраннаяФорма) Экспорт
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область СтандартныеПроцедурыИФункции

Функция ОпределитьФормуВДеревеФормИФорматов(ДеревоФормИФорматов, Код, ДатаПриказа = '00010101', НомерПриказа = "", ИмяОбъекта = "",
			ДатаНачалаДействия = '00010101', ДатаОкончанияДействия = '00010101', Описание = "")
	
	НовСтр = ДеревоФормИФорматов.Строки.Добавить();
	НовСтр.Код = СокрЛП(Код);
	НовСтр.ДатаПриказа = ДатаПриказа;
	НовСтр.НомерПриказа = СокрЛП(НомерПриказа);
	НовСтр.ДатаНачалаДействия = ДатаНачалаДействия;
	НовСтр.ДатаОкончанияДействия = ДатаОкончанияДействия;
	НовСтр.ИмяОбъекта = СокрЛП(ИмяОбъекта);
	НовСтр.Описание = СокрЛП(Описание);
	Возврат НовСтр;
	
КонецФункции

Функция ОпределитьФорматВДеревеФормИФорматов(Форма, Версия, ДатаПриказа = '00010101', НомерПриказа = "",
			ДатаНачалаДействия = Неопределено, ДатаОкончанияДействия = Неопределено, ИмяОбъекта = "", Описание = "")
	
	НовСтр = Форма.Строки.Добавить();
	НовСтр.Код = СокрЛП(Версия);
	НовСтр.ДатаПриказа = ДатаПриказа;
	НовСтр.НомерПриказа = СокрЛП(НомерПриказа);
	НовСтр.ДатаНачалаДействия = ?(ДатаНачалаДействия = Неопределено, Форма.ДатаНачалаДействия, ДатаНачалаДействия);
	НовСтр.ДатаОкончанияДействия = ?(ДатаОкончанияДействия = Неопределено, Форма.ДатаОкончанияДействия, ДатаОкончанияДействия);
	НовСтр.ИмяОбъекта = СокрЛП(ИмяОбъекта);
	НовСтр.Описание = СокрЛП(Описание);
	Возврат НовСтр;
	
КонецФункции

Функция НоваяТаблицаФормОтчета()
	
	ТаблицаФормОтчета = Новый ТаблицаЗначений;
	ТаблицаФормОтчета.Колонки.Добавить("ФормаОтчета",        ОбщегоНазначения.ОписаниеТипаСтрока(50));
	ТаблицаФормОтчета.Колонки.Добавить("ОписаниеОтчета",     ОбщегоНазначения.ОписаниеТипаСтрока(200), "Утверждена",  20);
	ТаблицаФормОтчета.Колонки.Добавить("ДатаНачалоДействия", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата), "Действует с", 5);
	ТаблицаФормОтчета.Колонки.Добавить("ДатаКонецДействия",  ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата), "         " + "по", 5);
	ТаблицаФормОтчета.Колонки.Добавить("РедакцияФормы",      ОбщегоНазначения.ОписаниеТипаСтрока(50), "Редакция формы", 20);
	
	Возврат ТаблицаФормОтчета;
	
КонецФункции

Функция НовыеРеквизитыФормыОтчета()
	
	Возврат ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(НоваяТаблицаФормОтчета().Добавить());
	
КонецФункции

Функция НовоеДеревоФормИФорматов()
	
	ДеревоФормИФорматов = Новый ДеревоЗначений;
	ДеревоФормИФорматов.Колонки.Добавить("Код", ОбщегоНазначения.ОписаниеТипаСтрока(7));
	ДеревоФормИФорматов.Колонки.Добавить("ДатаПриказа", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	ДеревоФормИФорматов.Колонки.Добавить("НомерПриказа", ОбщегоНазначения.ОписаниеТипаСтрока(50));
	ДеревоФормИФорматов.Колонки.Добавить("ДатаНачалаДействия", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	ДеревоФормИФорматов.Колонки.Добавить("ДатаОкончанияДействия", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	ДеревоФормИФорматов.Колонки.Добавить("ИмяОбъекта", ОбщегоНазначения.ОписаниеТипаСтрока(50));
	ДеревоФормИФорматов.Колонки.Добавить("Описание", ОбщегоНазначения.ОписаниеТипаСтрока(255));
	
	Возврат ДеревоФормИФорматов;
	
КонецФункции

Функция НовыеРеквизитыФормИФорматовПриказа()
	
	ДеревоФормИФорматов = НовоеДеревоФормИФорматов();
	СтрокаДереваЗначений = ДеревоФормИФорматов.Строки.Добавить();
	
	Реквизиты = Новый Структура;
	Для каждого Колонка Из ДеревоФормИФорматов.Колонки Цикл
		Реквизиты.Вставить(Колонка.Имя, СтрокаДереваЗначений[Колонка.Имя]);
	КонецЦикла;
	
	Возврат Реквизиты;
	
КонецФункции

#КонецОбласти

#Область СохранениеОтчета

// Создает и заполняет новый отчет.
// В случае, если регламентированный отчет передан, то происходит только заполнение отчета.
//
// Параметры:
//   РегламентированныйОтчет - ДокументСсылка.РегламентированныйОтчет
//   Организация - СправочникСсылка.Организации
//   Период - Дата - Налоговый период
//   ВыбраннаяФорма - Строка - форма декларации
//   НомерКорректировки - Число - номер корректировки
//   ДанныеЗаполнения - Структура
//
Процедура СоздатьЗаполнитьОтчет(РегламентированныйОтчет, Организация, Период, ВыбраннаяФорма, НомерКорректировки, ДанныеЗаполнения) Экспорт
	
	СтруктураРеквизитовФормы = СтруктураРеквизитовФормы(Организация, Период, ВыбраннаяФорма);
	СтруктураРеквизитовФормы.Вставить("мВариант", НомерКорректировки);
	
	Если ЗначениеЗаполнено(РегламентированныйОтчет) Тогда
		РегламентированныйОтчет = РегламентированныйОтчет.ПолучитьОбъект();
	Иначе
		РегламентированныйОтчет = СоздатьРегламентированныйОтчет(СтруктураРеквизитовФормы);
	КонецЕсли;
	
	КодИФНС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтруктураРеквизитовФормы.Организация, "КодНалоговогоОргана");
	ЗаполнитьРеквизитыШапки(РегламентированныйОтчет, СтруктураРеквизитовФормы, КодИФНС);
	
	КлючиПоказателей = КлючиПоказателейДекларации(СтруктураРеквизитовФормы.мВыбраннаяФорма);
	
	ДанныеОтчета = НоваяСтруктураДанныхОтчета(Организация, Период, СтруктураРеквизитовФормы);
	
	ТитульныйЛист = ДанныеОтчета.ПоказателиОтчета[ИмяПоказателя("Титульный")];
	ЗаполнитьТитульныйЛист(ТитульныйЛист, Организация, Период, НомерКорректировки);
	ЗаполнитьДатуПодписи(ТитульныйЛист, СтруктураРеквизитовФормы);
	ЗаполнитьСведенияОПодписантах(ТитульныйЛист, Организация);
	
	Заполнить(ДанныеЗаполнения, ДанныеОтчета, КлючиПоказателей);
	
	РегламентированныйОтчет.ДанныеОтчета = Новый ХранилищеЗначения(ДанныеОтчета);
	РегламентированныйОтчет.ДеревоНастройкиСтраниц = Новый ХранилищеЗначения(ДеревоСтраницОтчета(СтруктураРеквизитовФормы.мВыбраннаяФорма));
	Попытка
		РегламентированныйОтчет.Записать();
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(РегламентированнаяОтчетностьКлиентСервер.СформироватьТекстСообщения(ОписаниеОшибки()));
		Возврат;
	КонецПопытки;
	
	РегламентированныйОтчет = РегламентированныйОтчет.Ссылка;
	
КонецПроцедуры

// Заполняет структуру данных титульного листа.
//
// Параметры:
//   ТитульныйЛист - струтура
//   Организация - СправочникСсылка.Организации
//   Период - Дата - Налоговый период
//   НомерКорректировки - Число - номер корректировки
//
Процедура ЗаполнитьТитульныйЛист(ТитульныйЛист, Организация, Период, НомерКорректировки = 0) Экспорт
	
	СписокПоказателей = "ИННЮЛ, КодНО, ФИО, ОКТМО, ТелСлуж, ТелДом";
	
	СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(Организация, Период, СписокПоказателей);
	Если СведенияОбОрганизации = Неопределено Или СведенияОбОрганизации.Количество() = 0 Тогда
		ЗаполнитьЗначенияСвойств(ТитульныйЛист, НоваяСтруктураТитульногоЛиста());
		Возврат;
	КонецЕсли;
	
	ТитульныйЛист.ИНН1 = СокрЛП(СведенияОбОрганизации.ИННЮЛ);
	ТитульныйЛист.НомерКорректировки = НомерКорректировки;
	ТитульныйЛист.ОтчетГод = Формат(Год(Период), "ЧГ=0");
	ТитульныйЛист.КодИМНС = СтроковыеФункцииКлиентСервер.ДополнитьСтроку(СведенияОбОрганизации.КодНО, 4, " ", "Слева");
	ТитульныйЛист.ПоМесту = "720"; // Физическое лицо, зарегистрированное в качестве индивидуального предпринимателя
	
	ФИО = РегламентированнаяОтчетность.РазложитьФИО(СведенияОбОрганизации.ФИО);
	Если ФИО.Количество() <> 0 Тогда
		ТитульныйЛист.Фамилия  = СокрЛП(ФИО.Фамилия);
		ТитульныйЛист.Имя      = СокрЛП(ФИО.Имя);
		ТитульныйЛист.Отчество = СокрЛП(ФИО.Отчество);
	КонецЕсли;
	
	ТитульныйЛист.ОКАТО = СокрЛП(СведенияОбОрганизации.ОКТМО);
	
	ТелОрганизации = ?(Не ПустаяСтрока(СведенияОбОрганизации.ТелСлуж),
		СокрЛП(СведенияОбОрганизации.ТелСлуж),
		СокрЛП(СведенияОбОрганизации.ТелДом));
	
	ТитульныйЛист.ТелОрганизации = ТелефонДляОтчета(ТелОрганизации);
	
КонецПроцедуры

Процедура ЗаполнитьДатуПодписи(ТитульныйЛист, СтруктураРеквизитовФормы)
	
	ТитульныйЛист.ДатаПодписи = СтруктураРеквизитовФормы.ДатаПодписи;
	
КонецПроцедуры

Процедура ЗаполнитьСведенияОПодписантах(ТитульныйЛист, Организация) Экспорт
	
	СведенияОПредставителе = РегламентированнаяОтчетностьВызовСервера.ПолучитьПоКодамСведенияОПредставителе(
		Организация, ТитульныйЛист.КодИМНС);
	
	Если СведенияОПредставителе.ТипПодписанта = "2" Тогда
		ФИОПодписант = РегламентированнаяОтчетность.РазложитьФИО(СведенияОПредставителе.ФИОПредставителя);
		НаименованиеОрганизацииПредставителя = СведенияОПредставителе.НаименованиеОрганизацииПредставителя;
		ДокументПредставителя = СведенияОПредставителе.ДокументПредставителя;
	Иначе
		ФИОПодписант = Новый Структура("Фамилия,Имя,Отчество", "", "", "");
		НаименованиеОрганизацииПредставителя = "";
		ДокументПредставителя = "";
	КонецЕсли;
	
	ТитульныйЛист.ПрПодп = СведенияОПредставителе.ТипПодписанта;
	ТитульныйЛист.ОргПодписантФамилия = ФИОПодписант.Фамилия;
	ТитульныйЛист.ОргПодписантИмя = ФИОПодписант.Имя;
	ТитульныйЛист.ОргПодписантОтчество = ФИОПодписант.Отчество;
	ТитульныйЛист.ОргУп = НаименованиеОрганизацииПредставителя;
	ТитульныйЛист.ДокУпПред = ДокументПредставителя;
	
КонецПроцедуры

Функция ЗаписатьДанныеФормы(ДанныеФормы, СтруктураРеквизитовФормы, КодИФНС, Автосохранение = Ложь, ВидДокументаНомерКорректировкиИзменен = Ложь) Экспорт
	
	СтруктураРеквизитовФормы.мЗаписываетсяНовыйДокумент = (СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено
		Или СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено
		Или ВидДокументаНомерКорректировкиИзменен);
	
	Если СтруктураРеквизитовФормы.мЗаписываетсяНовыйДокумент Тогда
		РегламентированныйОтчет = СоздатьРегламентированныйОтчет(СтруктураРеквизитовФормы);
	Иначе
		РегламентированныйОтчет = СтруктураРеквизитовФормы.мСохраненныйДок.ПолучитьОбъект();
	КонецЕсли;
	ЗаполнитьРеквизитыШапки(РегламентированныйОтчет, СтруктураРеквизитовФормы, КодИФНС);
	
	ДанныеОтчета = Новый Структура;
	ДанныеОтчета.Вставить("ПоказателиОтчета", ДанныеФормы.ПоказателиОтчета);
	ДанныеОтчета.Вставить("ВерсияФормы", СтруктураРеквизитовФормы.мВерсияФормы);
	ДанныеОтчета.Вставить("ФлПодсчетСтраниц", СтруктураРеквизитовФормы.мСчетчикСтраниц);
	ДанныеОтчета.Вставить("ФлОтклВыборЗначений", СтруктураРеквизитовФормы.мАвтоВыборКодов);
	ДанныеОтчета.Вставить("Автозаполнение", СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);
	ДанныеОтчета.Вставить("ПечатьБезШтрихкодаРазрешена", СтруктураРеквизитовФормы.мПечатьБезШтрихкодаРазрешена);
	
	РегламентированныйОтчет.ДанныеОтчета = Новый ХранилищеЗначения(ДанныеОтчета);
	
	РегламентированныйОтчет.ДеревоНастройкиСтраниц = Новый ХранилищеЗначения(ДанныеФормы.ДеревоНастройкиСтраниц);
	
	Попытка
		РегламентированныйОтчет.Записать();
	Исключение
		Если Не Автосохранение Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(РегламентированнаяОтчетностьКлиентСервер.СформироватьТекстСообщения(ОписаниеОшибки()));
		КонецЕсли;
		Возврат Ложь;
	КонецПопытки;
	
	СтруктураРеквизитовФормы.мСохраненныйДок = РегламентированныйОтчет.Ссылка;
	
	Возврат Истина;
	
КонецФункции

// Создает новый документ вида РегламентированныйОтчет и заполняет реквизиты шапки
//
// Параметры:
//   СтруктураРеквизитовФормы - Структура - см. СтруктураРеквизитовФормы()
//
// Возвращаемое значение:
//   ДокументОбъект.РегламентированныйОтчет
//
Функция СоздатьРегламентированныйОтчет(СтруктураРеквизитовФормы)
	
	РегламентированныйОтчет = Документы.РегламентированныйОтчет.СоздатьДокумент();
	РегламентированныйОтчет.Дата = СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета;
	РегламентированныйОтчет.УстановитьВремя();
	
	Возврат РегламентированныйОтчет;
	
КонецФункции

// Заполняет реквизиты шапки документа РегламентированныйОтчет
//
// Параметры:
//   РегламентированныйОтчет - ДокументОбъект.РегламентированныйОтчет
//   СтруктураРеквизитовФормы - Структура - см. СтруктураРеквизитовФормы()
//   КодИФНС - Строка - код ИФНС
//
Процедура ЗаполнитьРеквизитыШапки(РегламентированныйОтчет, СтруктураРеквизитовФормы, КодИФНС)
	
	РегламентированныйОтчет.ИсточникОтчета = "РегламентированныйОтчет4НДФЛ";
	РегламентированныйОтчет.НаименованиеОтчета = "Декларация 4-НДФЛ";
	РегламентированныйОтчет.ДатаНачала = СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета;
	РегламентированныйОтчет.ДатаОкончания = СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета;
	РегламентированныйОтчет.Периодичность = СтруктураРеквизитовФормы.мПериодичность;
	РегламентированныйОтчет.ВыбраннаяФорма = СтруктураРеквизитовФормы.мВыбраннаяФорма;
	РегламентированныйОтчет.Организация = СтруктураРеквизитовФормы.Организация;
	РегламентированныйОтчет.ДатаПодписи = СтруктураРеквизитовФормы.ДатаПодписи;
	РегламентированныйОтчет.ЕдиницаИзмерения = СтруктураРеквизитовФормы.ЕдиницаИзмерения;
	РегламентированныйОтчет.ТочностьЕдиницыИзмерения = СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения;
	РегламентированныйОтчет.ВидОтчетности = Перечисления.ВидыОтчетности.РегламентированнаяОтчетность;
	РегламентированныйОтчет.Комментарий = СтруктураРеквизитовФормы.Комментарий;
	РегламентированныйОтчет.КодНалоговогоОргана = КодИФНС;
	РегламентированныйОтчет.КПП = "";
	РегламентированныйОтчет.Вид = СтруктураРеквизитовФормы.мВариант;
	РегламентированныйОтчет.ПредставлениеВида = РегламентированнаяОтчетность.ПредставлениеВидаДокумента(РегламентированныйОтчет.Вид);
	РегламентированныйОтчет.ФорматВыгрузки = "Автоматически";
	
КонецПроцедуры

// Создает структуру данных, которая соответствует пустой форме
//
// Параметры:
//   Организация - СправочникСсылка.Организации
//   Период - Дата - налоговый период
//   СтруктураРеквизитовФормы - Структура - см. СтруктураРеквизитовФормы()
//
// Возвращаемое значение:
//   Структура
//
Функция НоваяСтруктураДанныхОтчета(Организация, Период, СтруктураРеквизитовФормы)
	
	СвойстваРазделовДекларации = СвойстваРазделовДекларации(СтруктураРеквизитовФормы.мВыбраннаяФорма);
	
	ПоказателиОтчета = ПоказателиОтчета(СвойстваРазделовДекларации);
	
	ДанныеОтчета = Новый Структура;
	ДанныеОтчета.Вставить("ПоказателиОтчета", ПоказателиОтчета);
	ДанныеОтчета.Вставить("ВерсияФормы", СтруктураРеквизитовФормы.мВерсияФормы);
	ДанныеОтчета.Вставить("ФлПодсчетСтраниц", СтруктураРеквизитовФормы.мСчетчикСтраниц);
	ДанныеОтчета.Вставить("ФлОтклВыборЗначений", СтруктураРеквизитовФормы.мАвтоВыборКодов);
	ДанныеОтчета.Вставить("Автозаполнение", СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);
	ДанныеОтчета.Вставить("ПечатьБезШтрихкодаРазрешена", СтруктураРеквизитовФормы.мПечатьБезШтрихкодаРазрешена);
	
	Возврат ДанныеОтчета;
	
КонецФункции

// Преобразует структуру дохода или вычета в структуру данных регламентированного отчета
//
// Параметры:
//   ДанныеЗаполнения - Структура - структура, которую требуется сохранить
//   ДанныеОтчета - Структура - структура данных регламентированного отчета
//   КлючиПоказателейДекларации - Структура - см. КлючиПоказателейДекларации()
//
Процедура Заполнить(ДанныеЗаполнения, ДанныеОтчета, КлючиПоказателейДекларации)
	
	Перем КлючПоказателя;
	
	Для Каждого ЭлементДанных Из ДанныеЗаполнения Цикл
		
		// Ищем соответствующий ключ показателя
		КлючиПоказателейДекларации.Свойство(ЭлементДанных.Ключ, КлючПоказателя);
		Если КлючПоказателя = Неопределено Тогда
			ВызватьИсключение СтрШаблон("Не найден ключ показателя ""%1""", ЭлементДанных.Ключ);
		КонецЕсли;
		
		ИмяПоля = КлючПоказателя.ИмяПоля;
		ИмяРаздела = КлючПоказателя.СвойствоРаздела.ИмяСтраницы;
		
		ДанныеОтчета.ПоказателиОтчета[ИмяПоказателя(ИмяРаздела)].Вставить(ИмяПоля, ЭлементДанных.Значение);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ЧтениеДанныхДекларации

Функция ПрочитатьДанныеДекларации(ДанныеОтчета, ВыбраннаяФорма) Экспорт
	
	Если ТипЗнч(ДанныеОтчета) <> Тип("Структура") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	КлючиПоказателей = КлючиПоказателейДекларации(ВыбраннаяФорма);
	
	Показатели = ОбщегоНазначения.ВыгрузитьКолонку(КлючиПоказателей, "Ключ");
	
	СтруктураДанныхОтчета = Новый Структура;
	Для Каждого ИмяПоказателя Из Показатели Цикл
		ВставитьПоказательВСтруктуру(ИмяПоказателя, КлючиПоказателей, ДанныеОтчета, СтруктураДанныхОтчета);
	КонецЦикла;
	
	Возврат СтруктураДанныхОтчета;
	
КонецФункции

Процедура ВставитьПоказательВСтруктуру(ИмяПоказателя, КлючиПоказателей, ДанныеОтчета, СтруктураДанныхОтчета)
	
	Перем КлючПоказателя;
	
	КлючиПоказателей.Свойство(ИмяПоказателя, КлючПоказателя);
	ЗначениеПоказателя = ПрочитатьПоказательИзДанныхОтчета(ИмяПоказателя, КлючПоказателя, ДанныеОтчета);
	СтруктураДанныхОтчета.Вставить(ИмяПоказателя, ЗначениеПоказателя);
	
КонецПроцедуры

Функция ПрочитатьПоказательИзДанныхОтчета(ИмяПоказателя, КлючПоказателя, ДанныеОтчета)
	
	Перем ЗначениеПоказателя;
	
	Если КлючПоказателя = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ИмяПоля = КлючПоказателя.ИмяПоля;
	ИмяРаздела = КлючПоказателя.СвойствоРаздела.ИмяСтраницы;
	
	ПоказателиОтчета = ДанныеОтчета.ПоказателиОтчета[ИмяПоказателя(ИмяРаздела)];
	ПоказателиОтчета.Свойство(ИмяПоля, ЗначениеПоказателя);
	
	Возврат ЗначениеПоказателя;
	
КонецФункции

#КонецОбласти

#Область ДанныеОтчета

Функция НовыйСвойстваРазделовДекларации()
	
	СвойстваРазделовДекларации = Новый ДеревоЗначений;
	СвойстваРазделовДекларации.Колонки.Добавить("ИмяСтраницы", ОбщегоНазначения.ОписаниеТипаСтрока(100));
	СвойстваРазделовДекларации.Колонки.Добавить("МногострочностьВРазделе", Новый ОписаниеТипов("ТаблицаЗначений"));
	СвойстваРазделовДекларации.Колонки.Добавить("СохранятьМногострКакТЗ", Новый ОписаниеТипов("Булево"));
	СвойстваРазделовДекларации.Колонки.Добавить("МногостраничностьВРазделе", Новый ОписаниеТипов("Булево"));
	СвойстваРазделовДекларации.Колонки.Добавить("ОчищатьРаздел", Новый ОписаниеТипов("Булево"));
	СвойстваРазделовДекларации.Колонки.Добавить("ИмяПредставления", ОбщегоНазначения.ОписаниеТипаСтрока(50));
	СвойстваРазделовДекларации.Колонки.Добавить("ПредставлениеДанных", Новый ОписаниеТипов("Булево"));
	СвойстваРазделовДекларации.Колонки.Добавить("РазделОбязателенДляВыгрузки", Новый ОписаниеТипов("Булево"));
	СвойстваРазделовДекларации.Колонки.Добавить("РазделЯвляетсяАвтозаполняемым", Новый ОписаниеТипов("Булево"));
	СвойстваРазделовДекларации.Колонки.Добавить("МаксКолвоЭкз", ОбщегоНазначения.ОписаниеТипаЧисло(1, 0));
	СвойстваРазделовДекларации.Колонки.Добавить("ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста", Новый ОписаниеТипов("Булево"));
	СвойстваРазделовДекларации.Колонки.Добавить("ПоказыватьИтогиТолькоНаПоследнейСтранице", Новый ОписаниеТипов("Булево"));
	
	Возврат СвойстваРазделовДекларации;
	
КонецФункции

Функция НовыйСтруктураРеквизитовФормы()
	
	СтруктураРеквизитовФормы = Новый Структура;
	СтруктураРеквизитовФормы.Вставить("Организация");
	СтруктураРеквизитовФормы.Вставить("ЕдиницаИзмерения", Перечисления.ПорядкиОкругленияОтчетности.Окр1);
	СтруктураРеквизитовФормы.Вставить("ТочностьЕдиницыИзмерения", 0);
	СтруктураРеквизитовФормы.Вставить("ВариантыФорматовВыгрузки", Новый СписокЗначений);
	СтруктураРеквизитовФормы.Вставить("ВидДокумента");
	СтруктураРеквизитовФормы.Вставить("мАвтоВыборКодов", Ложь);
	СтруктураРеквизитовФормы.Вставить("мБезОткрытияФормы");
	СтруктураРеквизитовФормы.Вставить("мВариант");
	СтруктураРеквизитовФормы.Вставить("мВерсияФормы");
	СтруктураРеквизитовФормы.Вставить("мВыбраннаяФорма");
	СтруктураРеквизитовФормы.Вставить("мДатаКонцаПериодаОтчета");
	СтруктураРеквизитовФормы.Вставить("мДатаНачалаПериодаОтчета");
	СтруктураРеквизитовФормы.Вставить("мДокументПредставителя");
	СтруктураРеквизитовФормы.Вставить("мЗаписываетсяНовыйДокумент");
	СтруктураРеквизитовФормы.Вставить("мЗаписьЗапрещена");
	СтруктураРеквизитовФормы.Вставить("мЗаписьЗапрещена");
	СтруктураРеквизитовФормы.Вставить("ИдентификаторЗадания");
	СтруктураРеквизитовФормы.Вставить("АдресВоВременномХранилище");
	
	СтруктураРеквизитовФормы.Вставить("мИмяПредставителя");
	СтруктураРеквизитовФормы.Вставить("мКодОтчета");
	СтруктураРеквизитовФормы.Вставить("мНазваниеПредставителя");
	СтруктураРеквизитовФормы.Вставить("мОтчествоПредставителя");
	СтруктураРеквизитовФормы.Вставить("мПечатаемыеРазделы", Новый СписокЗначений);
	СтруктураРеквизитовФормы.Вставить("мПечатныеФормы", Новый СписокЗначений);
	СтруктураРеквизитовФормы.Вставить("мПечатьБезШтрихкодаРазрешена", Ложь);
	СтруктураРеквизитовФормы.Вставить("мПредставительФизЛицо");
	СтруктураРеквизитовФормы.Вставить("мРежимПечати", Ложь);
	СтруктураРеквизитовФормы.Вставить("мСкопированаФорма");
	СтруктураРеквизитовФормы.Вставить("мСоставПоказателей");
	СтруктураРеквизитовФормы.Вставить("мСохраненныйДок");
	СтруктураРеквизитовФормы.Вставить("мСтрокаФормата");
	СтруктураРеквизитовФормы.Вставить("мСчетчикСтраниц");
	СтруктураРеквизитовФормы.Вставить("мФамилияПредставителя");
	СтруктураРеквизитовФормы.Вставить("НаимОрганизации");
	СтруктураРеквизитовФормы.Вставить("НаимОрг");
	СтруктураРеквизитовФормы.Вставить("ФлажокОтклАвтоРасчет", Ложь);
	СтруктураРеквизитовФормы.Вставить("мПолноеИмяФайлаВнешнейОбработки");
	СтруктураРеквизитовФормы.Вставить("мПоМесту");
	СтруктураРеквизитовФормы.Вставить("СписокПечатаемыхЛистов", Новый СписокЗначений);
	СтруктураРеквизитовФормы.Вставить("СтрПериодОтчета");
	СтруктураРеквизитовФормы.Вставить("ВыводитьСтраницуВТаблДокНаСервере");
	СтруктураРеквизитовФормы.Вставить("НаимТекущегоРаздела", "Титульный");
	СтруктураРеквизитовФормы.Вставить("НомерТекущейСтраницы", 1);
	СтруктураРеквизитовФормы.Вставить("НужноРассчитатьОтчетНаСервере", Ложь);
	СтруктураРеквизитовФормы.Вставить("ДоступенМеханизмПечатиРеглОтчетностиСДвухмернымШтрихкодомPDF417");
	СтруктураРеквизитовФормы.Вставить("мСтатусНалогоплательщика");
	СтруктураРеквизитовФормы.Вставить("мПериодичность");
	СтруктураРеквизитовФормы.Вставить("ДатаПодписи", ТекущаяДатаСеанса());
	СтруктураРеквизитовФормы.Вставить("Комментарий", "");
	
	Возврат СтруктураРеквизитовФормы;
	
КонецФункции

Функция НовыйДеревоСтраницОтчета()
	
	// Дерево содержит коллекцию страниц отчета.
	// В колонках дерева хранятся следующие данные:
	//    - представление листа;
	//    - имя страницы основной панели формы, содержащей выводимый на печать лист;
	//    - имя поля табличного документа;
	//    - имя области ячеек табличного документа (используется в случае вывода
	//      на печать отдельных страниц титульного листа);
	//    - ориентация страницы при печати;
	//    - число, метка вывода страницы на печать;
	//    - число, метка показа страницы на основной панели формы;
	//    - число, метка выгрузки данных страницы в ИМНС.
	
	ДеревоСтраницОтчета = Новый ДеревоЗначений;
	ДеревоСтраницОтчета.Колонки.Добавить("Представление", ОбщегоНазначения.ОписаниеТипаСтрока(100));
	ДеревоСтраницОтчета.Колонки.Добавить("ИмяСтраницы", ОбщегоНазначения.ОписаниеТипаСтрока(100));
	ДеревоСтраницОтчета.Колонки.Добавить("ИмяПоляТабличногоДокум", ОбщегоНазначения.ОписаниеТипаСтрока(100));
	ДеревоСтраницОтчета.Колонки.Добавить("ИмяОбластиТабличногоПоля", ОбщегоНазначения.ОписаниеТипаСтрока(100));
	ДеревоСтраницОтчета.Колонки.Добавить("ОриентацияСтраницы", ОбщегоНазначения.ОписаниеТипаСтрока(0));
	ДеревоСтраницОтчета.Колонки.Добавить("ВыводНаПечать", ОбщегоНазначения.ОписаниеТипаЧисло(1));
	ДеревоСтраницОтчета.Колонки.Добавить("ПоказатьСтраницу", ОбщегоНазначения.ОписаниеТипаЧисло(1));
	ДеревоСтраницОтчета.Колонки.Добавить("ВыгрузитьСтраницу", ОбщегоНазначения.ОписаниеТипаЧисло(1));
	
	Возврат ДеревоСтраницОтчета;
	
КонецФункции

Функция ДобавитьСтраницуОтчета(ДеревоСтраницОтчета, ИмяСтраницы, Представление, ОриентацияСтраницы = "Портрет", ВыводНаПечать = 1, ПоказатьСтраницу = 1, ВыгрузитьСтраницу = 2)
	
	НоваяСтрока = ДеревоСтраницОтчета.Строки.Добавить();
	НоваяСтрока.ИмяСтраницы = ИмяСтраницы;
	НоваяСтрока.Представление = Представление;
	НоваяСтрока.ОриентацияСтраницы = ОриентацияСтраницы;
	НоваяСтрока.ВыводНаПечать = ВыводНаПечать;
	НоваяСтрока.ПоказатьСтраницу = ПоказатьСтраницу;
	НоваяСтрока.ВыгрузитьСтраницу = ВыгрузитьСтраницу;
	
	Возврат НоваяСтрока;
	
КонецФункции

Функция НоваяСтруктураТитульногоЛиста()
	
	СтруктураРаздела = Новый Структура;
	СтруктураРаздела.Вставить("ИНН1", "");
	
	СтруктураРаздела.Вставить("НомерКорректировки", "0");
	СтруктураРаздела.Вставить("ОтчетГод", "");
	СтруктураРаздела.Вставить("КодИМНС", "");
	СтруктураРаздела.Вставить("ПоМесту", "");
	
	СтруктураРаздела.Вставить("ОКАТО", "");
	
	СтруктураРаздела.Вставить("Фамилия", "");
	СтруктураРаздела.Вставить("Имя", "");
	СтруктураРаздела.Вставить("Отчество", "");
	
	СтруктураРаздела.Вставить("ТелОрганизации", "");
	
	СтруктураРаздела.Вставить("СуммаПредполагаемогоДохода", 0);
	
	СтруктураРаздела.Вставить("Прил", 0);
	
	СтруктураРаздела.Вставить("ПрПодп", "1");
	
	СтруктураРаздела.Вставить("ОргПодписантФамилия", "");
	СтруктураРаздела.Вставить("ОргПодписантИмя", "");
	СтруктураРаздела.Вставить("ОргПодписантОтчество", "");
	
	СтруктураРаздела.Вставить("ОргУп", "");
	
	СтруктураРаздела.Вставить("ДатаПодписи", ТекущаяДатаСеанса());
	
	СтруктураРаздела.Вставить("ДокУпПред", "");
	
	Возврат СтруктураРаздела;
	
КонецФункции

Функция ПоказателиОтчета(СвойстваРазделовДекларации, Форма = Неопределено) Экспорт
	
	ПоказателиОтчета = Новый Структура;
	
	Для Каждого СвойствоРаздела Из СвойстваРазделовДекларации.Строки Цикл
		
		Если СвойствоРаздела.МногостраничностьВРазделе Тогда
			Продолжить;
		КонецЕсли;
		
		ИмяРаздела = СвойствоРаздела.ИмяСтраницы;
		
		Если Форма <> Неопределено Тогда
			ПоказателиОтчета.Вставить(
				ИмяПоказателя(ИмяРаздела),
				Форма[СтрШаблон("СтруктураДанных%1", ИмяРаздела)]);
		ИначеЕсли ИмяРаздела = "Титульный" Тогда
			ПоказателиОтчета.Вставить(
				ИмяПоказателя(ИмяРаздела),
				НоваяСтруктураТитульногоЛиста());
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ПоказателиОтчета;
	
КонецФункции

Функция СвойствоРаздела(СвойстваРазделов, ИмяРаздела)
	
	Возврат СвойстваРазделов.Строки.Найти(ИмяРаздела, "ИмяСтраницы");
	
КонецФункции

#КонецОбласти

#Область ВыгрузкаXML

Функция ПараметрыВыгрузки(ВыбраннаяФорма, Титульный) Экспорт
	
	ПараметрыВыгрузки = Новый Структура;
	ПараметрыВыгрузки.Вставить("ВерсПрог",       РегламентированнаяОтчетность.НазваниеИВерсияПрограммы());
	ПараметрыВыгрузки.Вставить("КНД",            "1151021");
	ПараметрыВыгрузки.Вставить("ДатаДок",        Формат(Титульный.ДатаПодписи, "ДФ=дд.ММ.гггг"));
	ПараметрыВыгрузки.Вставить("ГодПериодОтч",   Формат(Титульный.ОтчетГод, "ЧГ=0"));
	ПараметрыВыгрузки.Вставить("КодИФНС",        СокрЛП(Титульный.КодИМНС));
	ПараметрыВыгрузки.Вставить("ВидДок",         Строка(Титульный.НомерКорректировки));
	ПараметрыВыгрузки.Вставить("ОКАТОФЛ",        СокрЛП(Титульный.ОКАТО));
	ПараметрыВыгрузки.Вставить("ТелФЛ",          СокрЛП(Титульный.ТелОрганизации));
	ПараметрыВыгрузки.Вставить("ФамилияФЛ",      СокрЛП(Титульный.Фамилия));
	ПараметрыВыгрузки.Вставить("ИмяФЛ",          СокрЛП(Титульный.Имя));
	ПараметрыВыгрузки.Вставить("ОтчествоФЛ",     СокрЛП(Титульный.Отчество)); 
	ПараметрыВыгрузки.Вставить("КодКатегорииФЛ", СокрЛП(Титульный.ПоМесту));
	ПараметрыВыгрузки.Вставить("ПредДоход",      Титульный.СуммаПредполагаемогоДохода); 
	
	ПараметрыВыгрузки.Вставить("ИННФЛ", СокрЛП(Титульный.ИНН1));
	
	ПараметрыВыгрузки.Вставить("ТипПодписанта",        СокрЛП(Титульный.ПрПодп));
	ПараметрыВыгрузки.Вставить("НаимОргПредставителя", СокрЛП(Титульный.ОргУп));
	ПараметрыВыгрузки.Вставить("НаимДокПредставителя", СокрЛП(Титульный.ДокУпПред));
	
	ПараметрыВыгрузки.Вставить("ФамилияПодписанта",  Титульный.ОргПодписантФамилия);
	ПараметрыВыгрузки.Вставить("ИмяПодписанта",      Титульный.ОргПодписантИмя);
	ПараметрыВыгрузки.Вставить("ОтчествоПодписанта", Титульный.ОргПодписантОтчество);
	
	ПараметрыВыгрузки.Вставить("ИмяФайлаСхемы", ИмяФайлаСхемы(ВыбраннаяФорма));
	ПараметрыВыгрузки.Вставить("ПрефиксИмениФайлаВыгрузки", "NO_NDFL4");
	
	ПараметрыВыгрузки.Вставить("ИмяКлючевогоУзлаСодержательнойЧасти", "НДФЛ4");
	
	ПараметрыВыгрузки.Вставить("ИдФайл", ИмяФайлаВыгрузки(ПараметрыВыгрузки));
	
	Возврат ПараметрыВыгрузки;
	
КонецФункции

Функция ИмяФайлаВыгрузки(ПараметрыВыгрузки)
	
	ЧастиИмени = Новый Массив;
	ЧастиИмени.Добавить(ПараметрыВыгрузки.ПрефиксИмениФайлаВыгрузки);
	ЧастиИмени.Добавить(ПараметрыВыгрузки.КодИФНС);
	ЧастиИмени.Добавить(ПараметрыВыгрузки.КодИФНС);
	ЧастиИмени.Добавить(СокрЛП(ПараметрыВыгрузки.ИННФЛ));
	ЧастиИмени.Добавить(Формат(ТекущаяДатаСеанса(), "ДФ=ггггММдд"));
	ЧастиИмени.Добавить(Строка(Новый УникальныйИдентификатор));
	
	Возврат СтрСоединить(ЧастиИмени, "_");
	
КонецФункции

Функция ИмяФайлаСхемы(ВыбраннаяФорма)
	
	Если ВыбраннаяФорма = РеквизитыФормы2019().ИмяОбъекта Тогда
		Возврат ИмяФайлаСхемы2019();
	ИначеЕсли ВыбраннаяФорма = "ФормаОтчета2014кв1" Тогда
		Возврат ИмяФайлаСхемы2014();
	Иначе
		ВызватьИсключение СтрШаблон(НСтр("ru = 'Не определена схема выгрузки для формы %1'"), ВыбраннаяФорма);
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область ОбщиеПроцедурыИФункции

Функция КлючиПоказателейДекларации(ВыбраннаяФорма)
	
	Если ВыбраннаяФорма = РеквизитыФормы2019().ИмяОбъекта Тогда
		Возврат КлючиПоказателейДекларации2019();
	ИначеЕсли ВыбраннаяФорма = "ФормаОтчета2014кв1" Тогда
		Возврат КлючиПоказателейДекларации2014();
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция СтруктураРеквизитовФормы(Организация, Период, ВыбраннаяФорма, ПараметрыОткрытойФормы = Неопределено) Экспорт
	
	ПараметрыФормы = НовыеПараметрыФормы(Организация, Период, ВыбраннаяФорма);
	Если ПараметрыОткрытойФормы <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(ПараметрыФормы, ПараметрыОткрытойФормы);
	КонецЕсли;
	
	Если ПараметрыФормы.мВыбраннаяФорма = РеквизитыФормы2019().ИмяОбъекта Тогда
		Возврат СтруктураРеквизитовФормы2019(ПараметрыФормы);
	ИначеЕсли ПараметрыФормы.мВыбраннаяФорма = "ФормаОтчета2014кв1" Тогда
		Возврат СтруктураРеквизитовФормы2014(ПараметрыФормы);
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция СвойстваРазделовДекларации(ВыбраннаяФорма) Экспорт
	
	Если ВыбраннаяФорма = РеквизитыФормы2019().ИмяОбъекта Тогда
		Возврат СвойстваРазделовДекларации2019();
	ИначеЕсли ВыбраннаяФорма = "ФормаОтчета2014кв1" Тогда
		Возврат СвойстваРазделовДекларации2014();
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция ДеревоСтраницОтчета(ВыбраннаяФорма) Экспорт
	
	Если ВыбраннаяФорма = РеквизитыФормы2019().ИмяОбъекта Тогда
		Возврат ДеревоСтраницОтчета2019();
	ИначеЕсли ВыбраннаяФорма = "ФормаОтчета2014кв1" Тогда
		Возврат ДеревоСтраницОтчета2014();
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция СоответствиеРазделовМакетамМЧБ(ВыбраннаяФорма) Экспорт
	
	СвойстваРазделов = СвойстваРазделовДекларации(ВыбраннаяФорма);
	Если СвойстваРазделов = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СоответствиеРазделовМакетамМЧБ = Новый Соответствие;
	
	СуффиксФормы = СуффиксВыбраннойФормы(ВыбраннаяФорма);
	
	Для каждого ОписаниеРаздела Из СвойстваРазделов.Строки Цикл
		СоответствиеРазделовМакетамМЧБ.Вставить(
			ОписаниеРаздела.ИмяСтраницы, СтрШаблон("МЧБ_%1_%2", СуффиксФормы, ОписаниеРаздела.ИмяСтраницы));
	КонецЦикла;
	
	Возврат СоответствиеРазделовМакетамМЧБ;
	
КонецФункции

Функция НовыеПараметрыФормы(Организация, Период, ВыбраннаяФорма)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("мВыбраннаяФорма", ВыбраннаяФорма);
	ПараметрыФормы.Вставить("Организация", Организация);
	ПараметрыФормы.Вставить("мДатаНачалаПериодаОтчета", НачалоГода(Период));
	ПараметрыФормы.Вставить("мДатаКонцаПериодаОтчета", КонецГода(Период));
	ПараметрыФормы.Вставить("мПериодичность", Перечисления.Периодичность.Год);
	ПараметрыФормы.Вставить("мСохраненныйДок", Неопределено);
	ПараметрыФормы.Вставить("мСкопированаФорма", Неопределено);
	ПараметрыФормы.Вставить("ДоступенМеханизмПечатиРеглОтчетностиСДвухмернымШтрихкодомPDF417", Истина);
	ПараметрыФормы.Вставить("СформироватьФормуОтчетаАвтоматически", Ложь);
	
	Возврат ПараметрыФормы;
	
КонецФункции

Процедура ДобавитьКлючПоказателя(Ключ, ИмяСтраницы, ИмяПоля, СвойстваРазделовДекларации, КлючиПоказателей, ОбщееПолеМногострочногоРаздела = Ложь)
	
	СвойствоРаздела = СвойствоРаздела(СвойстваРазделовДекларации, ИмяСтраницы);
	Если СвойствоРаздела = Неопределено Тогда
		ВызватьИсключение СтрШаблон(НСтр("ru = 'Не найден раздел декларации ""%1""'"), ИмяСтраницы);
	КонецЕсли;
	
	ЗначениеКлюча = Новый Структура;
	Если СвойствоРаздела.МногострочностьВРазделе.Количество() <> 0 Тогда
		ЗначениеКлюча.Вставить("МногострочныйРаздел", СвойствоРаздела.МногострочностьВРазделе[0].ИдГруппы);
	КонецЕсли;
	Если СвойствоРаздела.МногостраничностьВРазделе Тогда
		ЗначениеКлюча.Вставить("МногостраничныйРаздел", СвойствоРаздела.ИмяСтраницы);
	Иначе
		ЗначениеКлюча.Вставить("ИмяПоказателя", ИмяПоказателя(СвойствоРаздела.ИмяСтраницы));
	КонецЕсли;
	ЗначениеКлюча.Вставить("ИмяПоля", ИмяПоля);
	ЗначениеКлюча.Вставить("ОбщееПолеМногострочногоРаздела", ОбщееПолеМногострочногоРаздела);
	ЗначениеКлюча.Вставить("СвойствоРаздела", СвойствоРаздела);
	
	Если Не КлючиПоказателей.Свойство(Ключ) Тогда
		КлючиПоказателей.Вставить(Ключ, ЗначениеКлюча);
	Иначе
		ВызватьИсключение СтрШаблон(НСтр("ru = 'Дубль ключа показателя ""%1""'"), Ключ);
	КонецЕсли;
	
КонецПроцедуры

Функция ИмяПоказателя(ИмяСтраницы)
	
	Возврат СтрШаблон("ПолеТабличногоДокумента%1", ИмяСтраницы);
	
КонецФункции

// Возвращает коллекцию таблиц, содержащих списки выбора значений показателей декларации.
//
Функция СпискиВыбора(МакетСоставаПоказателей) Экспорт
	
	КоллекцияСписковВыбора = Новый Соответствие;
	Для Каждого Область Из МакетСоставаПоказателей.Области Цикл
		Если Область.ТипОбласти <> ТипОбластиЯчеекТабличногоДокумента.Строки Тогда
			Продолжить;
		КонецЕсли;
		ВерхОбласти = Область.Верх;
		НизОбласти = Область.Низ;
		ТаблСписка = Новый ТаблицаЗначений;
		ТаблСписка.Колонки.Добавить("Код",,, МакетСоставаПоказателей.Область(ВерхОбласти, 1, ВерхОбласти, 1).ШиринаКолонки);
		ТаблСписка.Колонки.Добавить("Название",,, МакетСоставаПоказателей.Область(ВерхОбласти, 2, ВерхОбласти, 2).ШиринаКолонки);
		ТаблСписка.Колонки.Добавить("РезультатПроверки",,, 0);
		Для НомСтр = ВерхОбласти По НизОбласти Цикл
			КодПоказателя = СокрП(МакетСоставаПоказателей.Область(НомСтр, 1).Текст);
			Если КодПоказателя <> "###" Тогда
				НовСтрока = ТаблСписка.Добавить();
				НовСтрока.Код = КодПоказателя;
				НовСтрока.Название = СокрП(МакетСоставаПоказателей.Область(НомСтр, 2).Текст);
				НовСтрока.РезультатПроверки = СокрП(МакетСоставаПоказателей.Область(НомСтр, 3).Текст);
			КонецЕсли;
		КонецЦикла;
		КоллекцияСписковВыбора.Вставить(Область.Имя, ТаблСписка);
	КонецЦикла;
	
	Возврат КоллекцияСписковВыбора;
	
КонецФункции

// Приводит телефон к требованиям порядка заполнения
Функция ТелефонДляОтчета(Знач Телефон) Экспорт
	
	// Номер телефона указываются без пробелов и прочерков. Для каждой скобки и знака "+" отводится одна ячейка
	Телефон = СтрЗаменить(Телефон, " ", "");
	Телефон = СтрЗаменить(Телефон, "-", "");
	
	Возврат Телефон;
	
КонецФункции

Функция СуффиксВыбраннойФормы(ВыбраннаяФорма)
	
	Возврат Сред(ВыбраннаяФорма, СтрДлина("ФормаОтчета") + 1);
	
КонецФункции

#КонецОбласти

#Область Форма2014кв1

Функция СтруктураРеквизитовФормы2014(ПараметрыФормы)
	
	СтруктураРеквизитовФормы = НовыйСтруктураРеквизитовФормы();
	
	ЗаполнитьЗначенияСвойств(СтруктураРеквизитовФормы, ПараметрыФормы);
	
	СтруктураРеквизитовФормы.мСоставПоказателей = "СоставПоказателей2014кв1";
	СтруктураРеквизитовФормы.мВерсияФормы = "01/01/2014";
	СтруктураРеквизитовФормы.мКодОтчета = "1151021"; // КНД
	
	СтруктураРеквизитовФормы.мПоМесту = "720";
	
	СтруктураРеквизитовФормы.ВариантыФорматовВыгрузки.Добавить(СтруктураРеквизитовФормы.мСоставПоказателей, "Формат 5.02", Истина);
	
	Возврат СтруктураРеквизитовФормы;
	
КонецФункции

Функция КлючиПоказателейДекларации2014() Экспорт
	
	СвойстваРазделовДекларации = СвойстваРазделовДекларации2014();
	
	КлючиПоказателей = Новый Структура;
	
	// Титульный лист
	ДобавитьКлючПоказателя("ОКТМО", "Титульный", "ОКАТО", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("ПредполагаемаяСуммаДоходов", "Титульный", "СуммаПредполагаемогоДохода", СвойстваРазделовДекларации, КлючиПоказателей);
	
	Возврат КлючиПоказателей;
	
КонецФункции

Функция СвойстваРазделовДекларации2014()
	
	СвойстваРазделовДекларации = НовыйСвойстваРазделовДекларации();
	
	СтрокаУровня1 = СвойстваРазделовДекларации.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы = "Титульный";
	СтрокаУровня1.ПредставлениеДанных = Истина;
	
	Возврат СвойстваРазделовДекларации;
	
КонецФункции

Функция ДеревоСтраницОтчета2014()
	
	ДеревоСтраницОтчета = НовыйДеревоСтраницОтчета();
	
	ДобавитьСтраницуОтчета(ДеревоСтраницОтчета,
		"Титульный",
		НСтр("ru = 'Титульный лист'"));
	
	Возврат ДеревоСтраницОтчета;
	
КонецФункции

Функция ИмяФайлаСхемы2014()
	
	Возврат "NO_NDFL4_1_034_00_05_02_01.xsd";
	
КонецФункции

#КонецОбласти

#Область Форма2019кв1

Функция РеквизитыФормыОтчета2019()
	
	РеквизитыФормы = РеквизитыФормы2019();
	
	РеквизитыФормыОтчета = НовыеРеквизитыФормыОтчета();
	РеквизитыФормыОтчета.ФормаОтчета = РеквизитыФормы.ИмяОбъекта;
	РеквизитыФормыОтчета.ДатаНачалоДействия = РеквизитыФормы.ДатаНачалаДействия;
	
	РеквизитыФормыОтчета.ОписаниеОтчета = РеквизитыФормы.Описание;
		
	РеквизитыФормыОтчета.РедакцияФормы = СтрШаблон(
		"от %1 г. № %2",
		Формат(РеквизитыФормы.ДатаПриказа, "Л=ru_RU; ДФ=dd.MM.yyyy"),
		РеквизитыФормы.НомерПриказа);
	
	Возврат РеквизитыФормыОтчета;
	
КонецФункции

Функция РеквизитыФормы2019()
	
	РеквизитыФормы = НовыеРеквизитыФормИФорматовПриказа();
	РеквизитыФормы.Код = "1151021";
	РеквизитыФормы.ДатаПриказа = Дата(2019, 01, 09);
	РеквизитыФормы.НомерПриказа = "ММВ-7-11/3@";
	РеквизитыФормы.ДатаНачалаДействия = Дата(2019, 4, 5);
	РеквизитыФормы.ИмяОбъекта = "ФормаОтчета2019кв1";
	РеквизитыФормы.Описание = "Утверждена приказом ФНС России от 27 декабря 2010 г. N ММВ-7-3/768@"
		+ " " + "(в редакции приказов ФНС России от 14.11.2013 г. N ММВ-7-3/501@, от 09.01.2019 N ММВ-7-11/3@)";
	
	Возврат РеквизитыФормы;
	
КонецФункции

Функция РеквизитыФормата2019()
	
	РеквизитыФормы = РеквизитыФормы2019();
	
	РеквизитыФормата = НовыеРеквизитыФормИФорматовПриказа();
	РеквизитыФормата.Код = "5.03";
	РеквизитыФормата.ДатаНачалаДействия = РеквизитыФормы.ДатаНачалаДействия;
	
	Возврат РеквизитыФормата;
	
КонецФункции

Функция СтруктураРеквизитовФормы2019(ПараметрыФормы)
	
	СтруктураРеквизитовФормы = НовыйСтруктураРеквизитовФормы();
	
	ЗаполнитьЗначенияСвойств(СтруктураРеквизитовФормы, ПараметрыФормы);
	
	СтруктураРеквизитовФормы.мСоставПоказателей = "СоставПоказателей2019кв1";
	СтруктураРеквизитовФормы.мВерсияФормы = "05/04/2019";
	СтруктураРеквизитовФормы.мКодОтчета = "1151021"; // КНД
	
	СтруктураРеквизитовФормы.мПоМесту = "720";
	
	СтруктураРеквизитовФормы.ВариантыФорматовВыгрузки.Добавить(СтруктураРеквизитовФормы.мСоставПоказателей, "Формат 5.03", Истина);
	
	Возврат СтруктураРеквизитовФормы;
	
КонецФункции

Функция КлючиПоказателейДекларации2019() Экспорт
	
	СвойстваРазделовДекларации = СвойстваРазделовДекларации2019();
	
	КлючиПоказателей = Новый Структура;
	
	// Титульный лист
	ДобавитьКлючПоказателя("ОКТМО", "Титульный", "ОКАТО", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("ПредполагаемаяСуммаДоходов", "Титульный", "СуммаПредполагаемогоДохода", СвойстваРазделовДекларации, КлючиПоказателей);
	
	Возврат КлючиПоказателей;
	
КонецФункции

Функция СвойстваРазделовДекларации2019()
	
	СвойстваРазделовДекларации = НовыйСвойстваРазделовДекларации();
	
	СтрокаУровня1 = СвойстваРазделовДекларации.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы = "Титульный";
	СтрокаУровня1.ПредставлениеДанных = Истина;
	
	Возврат СвойстваРазделовДекларации;
	
КонецФункции

Функция ДеревоСтраницОтчета2019()
	
	ДеревоСтраницОтчета = НовыйДеревоСтраницОтчета();
	
	ДобавитьСтраницуОтчета(ДеревоСтраницОтчета,
		"Титульный",
		НСтр("ru = 'Титульный лист'"));
	
	Возврат ДеревоСтраницОтчета;
	
КонецФункции

Функция ИмяФайлаСхемы2019()
	
	Возврат "NO_NDFL4_1_034_00_05_03_01.xsd";
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли