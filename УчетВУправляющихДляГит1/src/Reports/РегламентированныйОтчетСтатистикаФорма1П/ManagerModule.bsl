#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс
	
Функция ВерсияФорматаВыгрузки(Знач НаДату = Неопределено, ВыбраннаяФорма = Неопределено) Экспорт
	
	Если НаДату = Неопределено Тогда
		НаДату = ТекущаяДатаСеанса();
	КонецЕсли;
		
	Если НаДату > '20110101' Тогда
		Возврат Перечисления.ВерсииФорматовВыгрузки.ВерсияФСГС;
	КонецЕсли;
		
КонецФункции

Функция ТаблицаФормОтчета() Экспорт
	
	ОписаниеТиповСтрока = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(0));
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("Дата"));
	ОписаниеТиповДата = Новый ОписаниеТипов(МассивТипов, , Новый КвалификаторыДаты(ЧастиДаты.Дата));
	
	ТаблицаФормОтчета = Новый ТаблицаЗначений;
	ТаблицаФормОтчета.Колонки.Добавить("ФормаОтчета",        ОписаниеТиповСтрока);
	ТаблицаФормОтчета.Колонки.Добавить("ОписаниеОтчета",     ОписаниеТиповСтрока, "Утверждена",  20);
	ТаблицаФормОтчета.Колонки.Добавить("ДатаНачалоДействия", ОписаниеТиповДата,   "Действует с", 5);
	ТаблицаФормОтчета.Колонки.Добавить("ДатаКонецДействия",  ОписаниеТиповДата,   "         по", 5);
	ТаблицаФормОтчета.Колонки.Добавить("РедакцияФормы",      ОписаниеТиповСтрока, "Редакция формы", 20);
	
	НоваяФорма = ТаблицаФормОтчета.Добавить();
	НоваяФорма.ФормаОтчета        = "ФормаОтчета2011Кв1";
	НоваяФорма.ОписаниеОтчета     = "Форма утверждена приказом Росстата от 15.09.2010 № 316.";
	НоваяФорма.РедакцияФормы	  = "от 15.09.2010 № 316.";
	НоваяФорма.ДатаНачалоДействия = '20100101';
	НоваяФорма.ДатаКонецДействия  = '20101231';
	
	НоваяФорма = ТаблицаФормОтчета.Добавить();
	НоваяФорма.ФормаОтчета        = "ФормаОтчета2012Кв1";
	НоваяФорма.ОписаниеОтчета     = "Форма утверждена приказом Росстата от 15.08.2011 № 355.";
	НоваяФорма.РедакцияФормы	  = "от 15.08.2011 № 355.";
	НоваяФорма.ДатаНачалоДействия = '20110101';
	НоваяФорма.ДатаКонецДействия  = '20111231';

	НоваяФорма = ТаблицаФормОтчета.Добавить();
	НоваяФорма.ФормаОтчета        = "ФормаОтчета2013Кв1";
	НоваяФорма.ОписаниеОтчета     = "Форма утверждена приказом Росстата от 29.08.2012 № 470.";
	НоваяФорма.РедакцияФормы	  = "от 29.08.2012 № 470.";
	НоваяФорма.ДатаНачалоДействия = '20120101';
	НоваяФорма.ДатаКонецДействия  = '20121231';
	
	НоваяФорма = ТаблицаФормОтчета.Добавить();
	НоваяФорма.ФормаОтчета        = "ФормаОтчета2014Кв1";
	НоваяФорма.ОписаниеОтчета     = "Форма утверждена приказом Росстата от 12.08.2013 № 323.";
	НоваяФорма.РедакцияФормы	  = "от 12.08.2013 № 323.";
	НоваяФорма.ДатаНачалоДействия = '20130101';
	НоваяФорма.ДатаКонецДействия  = '20131231';
	
	НоваяФорма = ТаблицаФормОтчета.Добавить();
	НоваяФорма.ФормаОтчета        = "ФормаОтчета2015Кв1";
	НоваяФорма.ОписаниеОтчета     = "Форма утверждена приказом Росстата от 04.09.2014 № 547.";
	НоваяФорма.РедакцияФормы	  = "от 04.09.2014 № 547.";
	НоваяФорма.ДатаНачалоДействия = '20140101';
	НоваяФорма.ДатаКонецДействия  = '20141231';
	
	НоваяФорма = ТаблицаФормОтчета.Добавить();
	НоваяФорма.ФормаОтчета        = "ФормаОтчета2016Кв1";
	НоваяФорма.ОписаниеОтчета     = "Форма утверждена приказом Росстата от 15.07.2015 № 320.";
	НоваяФорма.РедакцияФормы	  = "от 15.07.2015 № 320.";
	НоваяФорма.ДатаНачалоДействия = '20150101';
	НоваяФорма.ДатаКонецДействия  = '20161231';
	
	НоваяФорма = ТаблицаФормОтчета.Добавить();
	НоваяФорма.ФормаОтчета        = "ФормаОтчета2017Кв1";
	НоваяФорма.ОписаниеОтчета     = "Форма утверждена приказом Росстата от 21.08.2017 № 541.";
	НоваяФорма.РедакцияФормы	  = "от 21.08.2017 № 541.";
	НоваяФорма.ДатаНачалоДействия = '20170101';
	НоваяФорма.ДатаКонецДействия  = '20171231';
	
	НоваяФорма = ТаблицаФормОтчета.Добавить();
	НоваяФорма.ФормаОтчета        = "ФормаОтчета2018Кв1";
	НоваяФорма.ОписаниеОтчета     = "Форма утверждена приказом Росстата от 27.07.2018 № 461.";
	НоваяФорма.РедакцияФормы	  = "27.07.2018 № 461.";
	НоваяФорма.ДатаНачалоДействия = '20180101';
	НоваяФорма.ДатаКонецДействия  = РегламентированнаяОтчетностьКлиентСервер.ПустоеЗначениеТипа(Тип("Дата"));
	
	Возврат ТаблицаФормОтчета;
	
КонецФункции

Функция ДанныеРеглОтчета(ЭкземплярРеглОтчета) Экспорт
	
	Возврат Неопределено;
	
КонецФункции

Функция ДеревоФормИФорматов() Экспорт
	
	ФормыИФорматы = Новый ДеревоЗначений;
	ФормыИФорматы.Колонки.Добавить("Код");
	ФормыИФорматы.Колонки.Добавить("ДатаПриказа");
	ФормыИФорматы.Колонки.Добавить("НомерПриказа");
	ФормыИФорматы.Колонки.Добавить("ДатаНачалаДействия");
	ФормыИФорматы.Колонки.Добавить("ДатаОкончанияДействия");
	ФормыИФорматы.Колонки.Добавить("ИмяОбъекта");
	ФормыИФорматы.Колонки.Добавить("Описание");
	
	Форма20110101 = ОпределитьФормуВДеревеФормИФорматов(ФормыИФорматы, "601009", '20100915', "316",	"ФормаОтчета2011Кв1");
	Форма20120101 = ОпределитьФормуВДеревеФормИФорматов(ФормыИФорматы, "601009", '20110815', "355",	"ФормаОтчета2012Кв1");
	Форма20130101 = ОпределитьФормуВДеревеФормИФорматов(ФормыИФорматы, "601009", '20120829', "470",	"ФормаОтчета2013Кв1");
	Форма20140101 = ОпределитьФормуВДеревеФормИФорматов(ФормыИФорматы, "601009", '20130812', "323",	"ФормаОтчета2014Кв1");
	Форма20150101 = ОпределитьФормуВДеревеФормИФорматов(ФормыИФорматы, "601009", '20140904', "547",	"ФормаОтчета2015Кв1");
	Форма20150101 = ОпределитьФормуВДеревеФормИФорматов(ФормыИФорматы, "601009", '20150715', "320",	"ФормаОтчета2016Кв1");
	Форма20150101 = ОпределитьФормуВДеревеФормИФорматов(ФормыИФорматы, "601009", '20170821', "541",	"ФормаОтчета2017Кв1");
	Форма20150101 = ОпределитьФормуВДеревеФормИФорматов(ФормыИФорматы, "601009", '20180727', "461",	"ФормаОтчета2018Кв1");
	ВерсияВыгрузки = РегламентированнаяОтчетность.ПолучитьВерсиюВыгрузкиСтатОтчета("РегламентированныйОтчетСтатистикаФорма1П", "ФормаОтчета2018Кв1");
	РегламентированнаяОтчетность.ОпределитьФорматВДеревеФормИФорматов(Форма20150101, ВерсияВыгрузки);
	
	Возврат ФормыИФорматы;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ОпределитьФормуВДеревеФормИФорматов(ДеревоФормИФорматов, Код, ДатаПриказа = '00010101', НомерПриказа = "", ИмяОбъекта = "",
			ДатаНачалаДействия = '00010101', ДатаОкончанияДействия = '00010101', Описание = "")
	
	НовСтр = ДеревоФормИФорматов.Строки.Добавить();
	НовСтр.Код = СокрЛП(Код);
	НовСтр.ДатаПриказа = ДатаПриказа;
	НовСтр.НомерПриказа = СокрЛП(НомерПриказа);
	НовСтр.ДатаНачалаДействия = ДатаНачалаДействия;
	НовСтр.ДатаОкончанияДействия = ДатаОкончанияДействия;
	НовСтр.ИмяОбъекта = СокрЛП(ИмяОбъекта);
	НовСтр.Описание = СокрЛП(Описание);
	Возврат НовСтр;
	
КонецФункции

#КонецОбласти

#Если Не ВнешнееСоединение Тогда
#Область ФормированиеТекстаВыгрузки

Процедура ЗаполнитьДанными2016(КонтекстФормы, ДеревоВыгрузки, ПараметрыВыгрузки)
	РегламентированнаяОтчетность.ОбработатьУсловныеЭлементы(КонтекстФормы, ПараметрыВыгрузки, ДеревоВыгрузки);
	ЗаполнитьДаннымиУзел2016(КонтекстФормы, ПараметрыВыгрузки, ДеревоВыгрузки);
	ПостОбработкаДереваВыгрузки(ДеревоВыгрузки);
	РегламентированнаяОтчетность.ОтсечьНезаполненныеНеобязательныеУзлыСтатистики(ДеревоВыгрузки);
КонецПроцедуры

Процедура ЗаполнитьДаннымиУзел2016(КонтекстФормы, ПараметрыВыгрузки, Узел, НомерСтроки = Неопределено)
	
	СтрокиУзла = Новый Массив;
	Для Каждого Стр Из Узел.Строки Цикл
		СтрокиУзла.Добавить(Стр);
	КонецЦикла;
	
	Для Каждого Стр из СтрокиУзла Цикл
		
		Если ПустаяСтрока(Стр.ЗначениеПоУмолчанию) Тогда
			Если НЕ ПустаяСтрока(Стр.Ключ) Тогда
				ПолныйКодПоказателя = Стр.Ключ + ?(ЗначениеЗаполнено(НомерСтроки), "_" + Формат(НомерСтроки, "ЧГ="), "");
				ЗначениеПоказателя = Неопределено;
				Если ПараметрыВыгрузки.Свойство(ПолныйКодПоказателя, ЗначениеПоказателя) Тогда
					ФорматПредставленияНуля = Неопределено;
					Если ПараметрыВыгрузки.Свойство("ЧН" + ПолныйКодПоказателя, ФорматПредставленияНуля) Тогда
						РегламентированнаяОтчетность.ВывестиПоказательСтатистикиВXML(Стр, ЗначениеПоказателя, ФорматПредставленияНуля);
					Иначе
						РегламентированнаяОтчетность.ВывестиПоказательСтатистикиВXML(Стр, ЗначениеПоказателя);
					КонецЕсли;
				Иначе
					РегламентированнаяОтчетность.ВывестиПоказательСтатистикиВXML(Стр, "");
				КонецЕсли;
			Иначе
				Стр.Значение = "";
			КонецЕсли;
		ИначеЕсли Лев(Стр.ЗначениеПоУмолчанию, 1) = "&" Тогда
			РегламентированнаяОтчетность.ВывестиПоказательСтатистикиВXML(Стр, ПараметрыВыгрузки[Сред(Стр.ЗначениеПоУмолчанию, 2)]);
		Иначе
			Стр.Значение = Стр.ЗначениеПоУмолчанию;
			Если НЕ ПустаяСтрока(Стр.Ключ) Тогда
				ПолныйКодПоказателя = Стр.Ключ + ?(ЗначениеЗаполнено(НомерСтроки), "_" + Формат(НомерСтроки, "ЧГ="), "");
				ЗначениеПоказателя = Неопределено;
				Если ПараметрыВыгрузки.Свойство(ПолныйКодПоказателя, ЗначениеПоказателя) Тогда
					ФорматПредставленияНуля = Неопределено;
					Если ПараметрыВыгрузки.Свойство("ЧН" + ПолныйКодПоказателя, ФорматПредставленияНуля) Тогда
						РегламентированнаяОтчетность.ВывестиПоказательСтатистикиВXML(Стр, ЗначениеПоказателя, ФорматПредставленияНуля);
					Иначе
						РегламентированнаяОтчетность.ВывестиПоказательСтатистикиВXML(Стр, ЗначениеПоказателя);
					КонецЕсли;
				Иначе
					РегламентированнаяОтчетность.ВывестиПоказательСтатистикиВXML(Стр, "");
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если Стр.Тип = "С" ИЛИ Стр.Тип = "C" Тогда // учтем оба варианта: кириллицу и латиницу
			Если Стр.Многостраничность И Стр.Код = ПараметрыВыгрузки.ИмяКлючевогоУзлаСодержательнойЧасти Тогда
				ЛистыМногостраничногоРаздела = Неопределено;
				Если Не ПустаяСтрока(Стр.Раздел) И КонтекстФормы.мДанныеОтчета.Свойство(Стр.Раздел, ЛистыМногостраничногоРаздела) Тогда
					Для Каждого Лист Из ЛистыМногостраничногоРаздела Цикл
						ДанныеЛиста = Лист.Данные;
						ДанныеЛиста.Вставить("ИмяКлючевогоУзлаСодержательнойЧасти","");
						Если Стр.Многострочность Тогда
							НомСтр = 1;
							ПодчиненныйЭлемент = РегламентированнаяОтчетность.ПолучитьПервыйПодчиненныйУзелСЗаполненнымКлючом(Стр);
							КлючПодчиненногоЭлемента = ПодчиненныйЭлемент.Ключ;
							Пока РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(ДанныеЛиста, КлючПодчиненногоЭлемента + "_" + Формат(НомСтр, "ЧГ=")) Цикл
								УзелСоответствующийСтроке = РегламентированнаяОтчетность.СкопироватьУзел(Узел, Стр);
								ЗаполнитьДаннымиУзел2016(КонтекстФормы, ДанныеЛиста, УзелСоответствующийСтроке, НомСтр);
								НомСтр = НомСтр + 1;
							КонецЦикла;
						Иначе
							УзелМногостраничногоРаздела = РегламентированнаяОтчетность.СкопироватьУзел(Узел, Стр);
							ЗаполнитьДаннымиУзел2016(КонтекстФормы, ДанныеЛиста, УзелМногостраничногоРаздела);
						КонецЕсли;
					КонецЦикла;
				Иначе
					ЗаполнитьДаннымиУзел2016(КонтекстФормы, ПараметрыВыгрузки, Стр);
				КонецЕсли;
			ИначеЕсли Стр.Многострочность И Стр.Код = ПараметрыВыгрузки.ИмяКлючевогоУзлаСодержательнойЧасти Тогда
				НомСтр = 1;
				ПодчиненныйЭлемент = РегламентированнаяОтчетность.ПолучитьПервыйПодчиненныйУзелСЗаполненнымКлючом(Стр);
				КлючПодчиненногоЭлемента = ПодчиненныйЭлемент.Ключ;
				Пока РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(ПараметрыВыгрузки, КлючПодчиненногоЭлемента + "_" + Формат(НомСтр, "ЧГ=")) Цикл
					УзелСоответствующийСтроке = РегламентированнаяОтчетность.СкопироватьУзел(Узел, Стр);
					ЗаполнитьДаннымиУзел2016(КонтекстФормы, ПараметрыВыгрузки, УзелСоответствующийСтроке, НомСтр);
					НомСтр = НомСтр + 1;
				КонецЦикла;
			Иначе
				ЗаполнитьДаннымиУзел2016(КонтекстФормы, ПараметрыВыгрузки, Стр, НомерСтроки);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция СформироватьСтруктуруПараметров2017(КонтекстФормы, мСохраненныйДок)
	
	Перем ПолученноеЗначение;
	
	КонтекстФормы.мДанныеОтчета.Вставить("ПолеТабличногоДокументаРаздел10", КонтекстФормы.ДанныеМногостраничныхРазделов.Раздел10);
	ТабДокументТитульный = КонтекстФормы.мДанныеОтчета.ПолеТабличногоДокументаТитульный;
	ТабДокументРаздел1   = КонтекстФормы.мДанныеОтчета.ПолеТабличногоДокументаРаздел1;
	ТабДокументРаздел2_3 = КонтекстФормы.мДанныеОтчета.ПолеТабличногоДокументаРаздел2_3;
	ТабДокументРаздел7   = КонтекстФормы.мДанныеОтчета.ПолеТабличногоДокументаРаздел7;
	ТабДокументРаздел9   = КонтекстФормы.мДанныеОтчета.ПолеТабличногоДокументаРаздел9;
	ТабДокументПодписи   = КонтекстФормы.мДанныеОтчета.ПолеТабличногоДокументаПодписи;
	
	ДопАтрибуты = РегламентированнаяОтчетность.СформироватьСтруктуруДопАтрибутов("Отчет.РегламентированныйОтчетСтатистикаФорма1П.Форма.ФормаОтчета2018Кв1", "АтрибВыгрузкиXML2018Кв1");
	
	РеквизитыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(мСохраненныйДок, "Организация, ДатаПодписи");
	СтрокаСведений = "ФИОРук, ОКВЭД2, ОКАТО";
	СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(РеквизитыДокумента.Организация, РеквизитыДокумента.ДатаПодписи, СтрокаСведений);
	
	ПараметрыВыгрузки = Новый Структура;
	
	ДопАтрибуты.Свойство("code", ПолученноеЗначение);
	ПараметрыВыгрузки.Вставить("КодШаблона", ПолученноеЗначение);
	ДопАтрибуты.Свойство("idf", ПолученноеЗначение);
	ПараметрыВыгрузки.Вставить("КодФормы", ПолученноеЗначение);
	ДопАтрибуты.Свойство("shifr", ПолученноеЗначение);
	ПараметрыВыгрузки.Вставить("ШифрФормы", ПолученноеЗначение);
	ДопАтрибуты.Свойство("version", ПолученноеЗначение);
	ПараметрыВыгрузки.Вставить("ВерсияШаблона", ПолученноеЗначение);
	ДопАтрибуты.Свойство("format_version", ПолученноеЗначение);
	ПараметрыВыгрузки.Вставить("ВерсияФормата", ПолученноеЗначение);
	
	ОтчПериод  = 12;
	РасчПериод = Формат(Год(мСохраненныйДок.ДатаОкончания),"ЧГ=0");
	
	ПараметрыВыгрузки.Вставить("ОКПО",  СокрЛП(ТабДокументТитульный.ОргКодОКПО));
	ПараметрыВыгрузки.Вставить("ОКВЭД", СокрЛП(СведенияОбОрганизации.ОКВЭД2));
	ПараметрыВыгрузки.Вставить("ОКАТО", СокрЛП(СведенияОбОрганизации.ОКАТО));
	
	ПараметрыВыгрузки.Вставить("ОтчПериод", СокрЛП(ОтчПериод));
	ПараметрыВыгрузки.Вставить("РасчПериод", СокрЛП(РасчПериод));
	ПараметрыВыгрузки.Вставить("ОргНазвание", СокрЛП(ТабДокументТитульный.ОргНазв));
	ПараметрыВыгрузки.Вставить("ОргДиректор", СокрЛП(СведенияОбОрганизации.ФИОРук));
	ПараметрыВыгрузки.Вставить("ОргДолжностьИсп", СокрЛП(ТабДокументПодписи.ОргДолжностьИсп));
	ПараметрыВыгрузки.Вставить("ОргИсполнитель", СокрЛП(ТабДокументПодписи.ОргИсполнитель));
	ПараметрыВыгрузки.Вставить("ОргТелефонИсп", СокрЛП(ТабДокументПодписи.ОргТелефонИсп));
	
	ДопАтрибуты.Свойство("idp", ПолученноеЗначение);
	ПараметрыВыгрузки.Вставить("КодПериодичности", Число(СокрЛП(ПолученноеЗначение)));
	ПараметрыВыгрузки.Вставить("Документ", мСохраненныйДок);
	
	РегламентированнаяОтчетность.АтрибутыВФорматеВыгрузки(ПараметрыВыгрузки);
	
	ПараметрыВыгрузки.Вставить("ИмяФайла", Строка(Новый УникальныйИдентификатор) + ".xml");
	
	ПараметрыВыгрузки.Вставить("ИмяКлючевогоУзлаСодержательнойЧасти", "row");
	
	Для Ном = 3 По 8 Цикл
		НомСтр = Формат(Ном, "ЧЦ=2; ЧВН=");
		КодПоказателя = "П01000" + НомСтр + "01";
		ПараметрыВыгрузки.Вставить("Зн_" + КодПоказателя, ?(ТабДокументРаздел1[КодПоказателя] < 0, 1, 0));
	КонецЦикла;
	
	Для Ном = 1 По 10 Цикл
		НомСтр = Формат(Ном, "ЧЦ=2; ЧВН=");
		КодПоказателя = "П020002" + НомСтр + "01";
		ПараметрыВыгрузки.Вставить("Зн_" + КодПоказателя, ТабДокументРаздел2_3[КодПоказателя]);
	КонецЦикла;
	
	Для Ном = 601 По 671 Цикл
		НомСтр = Формат(Ном, "ЧЦ=3; ЧВН=");
		ПараметрыВыгрузки.Вставить("Зн_" + НомСтр, ТабДокументРаздел7["П0600" + НомСтр + "01"]);
	КонецЦикла;
	
	Для Ном = 701 По 737 Цикл
		НомСтр = Формат(Ном, "ЧЦ=3; ЧВН=");
		ПараметрыВыгрузки.Вставить("Зн_" + НомСтр, ТабДокументРаздел7["П0700" + НомСтр + "01"]);
	КонецЦикла;
	
	ПараметрыВыгрузки.Вставить("Зн_П0200021101", ?(ТабДокументРаздел2_3.П0200021101 < 0, "1", "0"));
	ПараметрыВыгрузки.Вставить("ОснОКПО", ТабДокументРаздел9.Код);
	
	Возврат ПараметрыВыгрузки;
	
КонецФункции

Процедура ПостОбработкаДереваВыгрузки(ДеревоВыгрузки)
	
	НайденныеУзлы = Новый Массив;
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Код", "code");
	ПараметрыОтбора.Вставить("Многостраничность", Истина);
	ПараметрыОтбора.Вставить("Многострочность", Ложь);
	ПараметрыОтбора.Вставить("ЗначениеПоУмолчанию", "202");
	ПараметрыОтбора.Вставить("Значение", "202");
	
	НайденныеАтрибутыУзлов = ДеревоВыгрузки.Строки.НайтиСтроки(ПараметрыОтбора, Истина);
	
	// Формируем массив узлов, которые нужно объединить
	Для каждого СтрокаАтрибутаУзла Из НайденныеАтрибутыУзлов Цикл
		РодительскийУзел = ?(СтрокаАтрибутаУзла.Родитель = Неопределено, СтрокаАтрибутаУзла.Владелец(), СтрокаАтрибутаУзла.Родитель);
		Если РодительскийУзел.Строки.НайтиСтроки(Новый Структура("Код, ЗначениеПоУмолчанию", "s1", "00")).Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		Если РодительскийУзел.Строки.НайтиСтроки(Новый Структура("Код, ЗначениеПоУмолчанию", "s2", "00")).Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		НайденныеУзлы.Добавить(РодительскийУзел);
	КонецЦикла;
	
	Если НайденныеУзлы.Количество() <= 1 Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаЗначенийЭлементовУзлов = Новый ТаблицаЗначений;
	ТаблицаЗначенийЭлементовУзлов.Колонки.Добавить("КодКолонки", Новый ОписаниеТипов("Строка"));
	ТаблицаЗначенийЭлементовУзлов.Колонки.Добавить("Значение", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(17, 1)));
	
	ПервыйУзел = НайденныеУзлы[0];
	Для каждого НайденныйУзел Из НайденныеУзлы Цикл
		НайденныеСтроки = НайденныйУзел.Строки.НайтиСтроки(Новый Структура("Код", "col"));
		Для каждого Стр Из НайденныеСтроки Цикл
			СтрКод = Стр.Строки.Найти("code", "Код");
			Если СтрКод <> Неопределено Тогда
				СтрокаТаблицы = ТаблицаЗначенийЭлементовУзлов.Добавить();
				СтрокаТаблицы.КодКолонки = СтрКод.ЗначениеПоУмолчанию;
				Попытка
					СтрокаТаблицы.Значение = ?(ПустаяСтрока(Стр.Значение), 0, Число(Стр.Значение));
				Исключение
					СтрокаТаблицы.Значение = 0;
				КонецПопытки;
			КонецЕсли; 
		КонецЦикла;
		// Удаляем все найденные узлы, кроме первого
		Если НайденныйУзел <> ПервыйУзел Тогда
			РегламентированнаяОтчетность.УдалитьУзел(НайденныйУзел);
		КонецЕсли; 
	КонецЦикла;
	
	ТаблицаЗначенийЭлементовУзлов.Свернуть("КодКолонки", "Значение");
	
	НайденныеСтроки = ПервыйУзел.Строки.НайтиСтроки(Новый Структура("Код", "col"));
	Для каждого Стр Из НайденныеСтроки Цикл
		СтрКод = Стр.Строки.Найти("code", "Код");
		Если СтрКод <> Неопределено Тогда
			СтрокаТаблицы = ТаблицаЗначенийЭлементовУзлов.Найти(СтрКод.ЗначениеПоУмолчанию, "КодКолонки");
			Если СтрокаТаблицы <> Неопределено Тогда
				РегламентированнаяОтчетность.ВывестиПоказательСтатистикиВXML(Стр, СтрокаТаблицы.Значение);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ТекстВыгрузкиОтчетаСтатистики(мСохраненныйДок, ВыбраннаяФорма) Экспорт 
	ТекстВыгрузки = "";
	Если ВыбраннаяФорма = "ФормаОтчета2017Кв1" Тогда
		КонтекстФормы = УниверсальныйОтчетСтатистики.СформироватьКонтекстФормыДляПоказателей(мСохраненныйДок);
		ПараметрыВыгрузки = СформироватьСтруктуруПараметров2017(КонтекстФормы, мСохраненныйДок);
		ПараметрыВыгрузки.Вставить("Год2016", ("2016" = ПараметрыВыгрузки.РасчПериод));
		ПараметрыВыгрузки.Вставить("ОргЭлектроннаяПочта", "-");
		ДеревоВыгрузки = РегламентированнаяОтчетность.ПолучитьДеревоВыгрузки(КонтекстФормы, "СхемаВыгрузкиXML2017Кв1");
		ЗаполнитьДанными2016(КонтекстФормы, ДеревоВыгрузки, ПараметрыВыгрузки);
		ТекстВыгрузки = РегламентированнаяОтчетность.ВыгрузитьДеревоВXML(ДеревоВыгрузки, ПараметрыВыгрузки);
	ИначеЕсли ВыбраннаяФорма = "ФормаОтчета2018Кв1" Тогда
		КонтекстФормы = УниверсальныйОтчетСтатистики.СформироватьКонтекстФормыДляПоказателей(мСохраненныйДок);
		ПараметрыВыгрузки = СформироватьСтруктуруПараметров2017(КонтекстФормы, мСохраненныйДок);
		ПараметрыВыгрузки.Вставить("ОргЭлектроннаяПочта", "-");
		ДеревоВыгрузки = РегламентированнаяОтчетность.ПолучитьДеревоВыгрузки(КонтекстФормы, "СхемаВыгрузкиXML2018Кв1");
		ЗаполнитьДанными2016(КонтекстФормы, ДеревоВыгрузки, ПараметрыВыгрузки);
		ТекстВыгрузки = РегламентированнаяОтчетность.ВыгрузитьДеревоВXML(ДеревоВыгрузки, ПараметрыВыгрузки);
	КонецЕсли;
	
	Возврат ТекстВыгрузки;
КонецФункции
#КонецОбласти
#КонецЕсли

#КонецЕсли