&НаКлиенте
Перем ПараметрыОбработчикаОжидания; // Хранит параметры обработчика ожидания.

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

#Область ОбработчикиСобытийФормы

&НаСервере
// Обработчик события "ПриСозданииНаСервере" формы.
//
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Отчет.ПериодОтчета = УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьРабочуюДату();
	
	// Установка настроек печати по умолчанию. Если настройки были изменены, они будут загружены при формировании отчета.
	Результат.АвтоМасштаб = Истина;
	
	// Реклама
	ОТР_РекламаКлиентСервер.ПриСозданииНаСервере(ЭтаФорма);
	// Конец Реклама
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриОткрытии" формы.
//
Процедура ПриОткрытии(Отказ)
	
	ОбновитьНастройкиУчетнойПолитикиТСЖ();
	УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеИспользовать");
	
	УПЖКХ_ТиповыеМетодыКлиентСервер.ЗаполнитьМесяцПоДате(ЭтаФорма, "Отчет.ПериодОтчета", "МесяцСтрокой");
	
КонецПроцедуры

&НаСервере
// Процедура возникает при сохранении настроек на сервере.
Процедура ПриСохраненииПользовательскихНастроекНаСервере(Настройки)
	
	УПЖКХ_ТиповыеМетодыВызовСервера.ПриСохраненииПользовательскихНастроекНаСервере(ЭтаФорма, Настройки, Истина);
	
КонецПроцедуры

&НаСервере
// Процедура возникает при загрузке настроек на сервере.
Процедура ПриЗагрузкеПользовательскихНастроекНаСервере(Настройки)
	
	УПЖКХ_ТиповыеМетодыВызовСервера.ПриЗагрузкеПользовательскихНастроекНаСервере(ЭтаФорма, Настройки, Истина);
	
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

#Область ОбработчикиСобытийЭлементовФормы

#Область Реклама

&НаКлиенте
// Процедура - обработчик нажатия на картинку баннера.
Процедура Подключаемый_РекламаОткрытьСтраницуСайта(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОТР_РекламаКлиент.Подключаемый_РекламаОткрытьСтраницуСайта(ЭтаФорма);
	
КонецПроцедуры // Подключаемый_РекламаОткрытьСтраницуСайта()

&НаКлиенте
// Процедура - обработчик нажатия на картинку закрытия баннера.
Процедура Подключаемый_РекламаКартникаЗакрытияБаннераНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;

	ОТР_РекламаКлиент.Подключаемый_РекламаКартникаЗакрытияБаннераНажатие(ЭтаФорма);
	
КонецПроцедуры // Подключаемый_РекламаОткрытьСтраницуСайта()

#КонецОбласти // Реклама

&НаКлиенте
// Обработчик события "ПриИзменении" поля "Период".
Процедура ПериодОтчетаПриИзменении(Элемент)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВводМесяцаПриИзменении(ЭтаФорма, "Отчет.ПериодОтчета", "МесяцСтрокой");
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "НачалоВыбора" поля "Период".
Процедура ПериодОтчетаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВводМесяцаНачалоВыбора(ЭтаФорма, ЭтаФорма, "Отчет.ПериодОтчета", "МесяцСтрокой", Ложь);
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "Регулирование" поля "Период".
Процедура ПериодОтчетаРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВводМесяцаРегулирование(ЭтаФорма, "Отчет.ПериодОтчета", "МесяцСтрокой", Направление);
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "АвтоПодбор" поля "Период".
Процедура ПериодОтчетаАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВводМесяцаАвтоПодборТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ОкончаниеВводаТекста" поля "Период".
Процедура ПериодОтчетаОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, Параметры, СтандартнаяОбработка)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВводМесяцаОкончаниеВводаТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля "Услуга".
Процедура УслугаПриИзменении(Элемент)
	
	Отчет.НормаПотребленияДляПенсионеров = ПредопределенноеЗначение("Справочник.КВП_НормыПотребленияУслуг.ПустаяСсылка");
	
	ПолеОтбораПриИзменении(Элемент);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля "Организация".
Процедура ОрганизацияПриИзменении(Элемент)
	
	ОбновитьНастройкиУчетнойПолитикиТСЖ();
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" полей отборов.
Процедура ПолеОтбораПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

#Область ОбработчикиКомандФормы

&НаКлиенте
// Обработчик команды "Сформировать".
//
Процедура Сформировать(Команда)
	
	Если Не ПроверитьЗаполнение() ИЛИ Не ОбновитьНастройкиУчетнойПолитикиТСЖ() Тогда
		Возврат;
	КонецЕсли;
	
	ОчиститьСообщения();
	
	ОтключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания");
	
	РезультатВыполнения = СформироватьОтчетНаСервере();
	Если Не РезультатВыполнения.ЗаданиеВыполнено Тогда
		УПЖКХ_ТиповыеМетодыКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
		УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "ФормированиеОтчета");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

#Область СлужебныеПроцедурыИФункции

&НаСервере
// Процедура формирует отчет на сервере.
Функция СформироватьОтчетНаСервере() Экспорт
	
	Если Не ПроверитьЗаполнение() Тогда 
		Возврат Новый Структура("ЗаданиеВыполнено", Истина);
	КонецЕсли;
	
	ИБФайловая = УПЖКХ_ТиповыеМетодыСервер.ИнформационнаяБазаФайловая();
	
	УПЖКХ_ТиповыеМетодыСервер.ОтменитьВыполнениеЗадания(ИдентификаторЗадания);
	
	ИдентификаторЗадания = Неопределено;
	
	УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеИспользовать");
	
	ПараметрыОтчета = ПодготовитьПараметрыОтчета();
	
	Если ИБФайловая Тогда
		АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
		Отчеты.УПЖКХ_ОтчетОПотребленииЭлектроэнергии.СформироватьОтчет(ПараметрыОтчета, АдресХранилища);
		РезультатВыполнения = Новый Структура("ЗаданиеВыполнено", Истина);
	Иначе
		РезультатВыполнения = УПЖКХ_ТиповыеМетодыСервер.ЗапуститьВыполнениеВФоне(
			УникальныйИдентификатор, 
			"Отчеты.УПЖКХ_ОтчетОПотребленииЭлектроэнергии.СформироватьОтчет", 
			ПараметрыОтчета, 
			УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьНаименованиеЗаданияВыполненияОтчета(ЭтаФорма));
		
		ИдентификаторЗадания = РезультатВыполнения.ИдентификаторЗадания;
		АдресХранилища       = РезультатВыполнения.АдресХранилища;
	КонецЕсли;
	
	Если РезультатВыполнения.ЗаданиеВыполнено Тогда
		ЗагрузитьПодготовленныеДанные();
	КонецЕсли;
	
	Возврат РезультатВыполнения;
	
КонецФункции

&НаКлиенте
// Процедуры проверяет выполнение задания.
Процедура Подключаемый_ПроверитьВыполнениеЗадания()
	
	Попытка
		Если ЗаданиеВыполнено(ИдентификаторЗадания) Тогда 
			ЗагрузитьПодготовленныеДанные();
			УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеИспользовать");
		Иначе
			УПЖКХ_ТиповыеМетодыКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
			ПодключитьОбработчикОжидания(
				"Подключаемый_ПроверитьВыполнениеЗадания", 
				ПараметрыОбработчикаОжидания.ТекущийИнтервал, 
				Истина);
		КонецЕсли;
	Исключение
		УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеИспользовать");
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

&НаСервереБезКонтекста
// Процедура проверяет, выполнено ли задание.
Функция ЗаданиеВыполнено(ИдентификаторЗадания)
	
	Возврат УПЖКХ_ТиповыеМетодыСервер.ЗаданиеВыполнено(ИдентификаторЗадания);
	
КонецФункции

&НаСервере
// Процедура загрузки подготовленных данных.
Процедура ЗагрузитьПодготовленныеДанные()
	
	Результат = ПолучитьИзВременногоХранилища(АдресХранилища);
	
	УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеИспользовать");
	
	//УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
// Процедура подготовки параметров учета.
Функция ПодготовитьПараметрыОтчета()
	
	ПараметрыОтчета = Новый Структура;
	ПараметрыОтчета.Вставить("МесяцСтрокойГод",           МесяцСтрокой);
	
	ПараметрыОтчета.Вставить("ИсполнительУслуг",          ПолучитьПредставлениеОрганизации());
	ПараметрыОтчета.Вставить("ПредставлениеАдресаЗдания", ПолучитьПредставлениеЗдания());
	ПараметрыОтчета.Вставить("НомерДоговораРСО",          ПолучитьНомерДоговораРСО());
	ПараметрыОтчета.Вставить("ОборудованУстановками",     "не оборудован электроустановками");
	
	ПолучитьИнформациюОбОборудованииПлитами(ПараметрыОтчета);
	
	ПолучитьКоэффициентСезонностиПериода(ПараметрыОтчета);
	
	ЗаполнитьСведенияОПоказаниях(ПараметрыОтчета);
	
	ЗаполнитьДанныеОтветственного(ПараметрыОтчета);
	
	Возврат ПараметрыОтчета;
	
КонецФункции // ПодготовитьПараметрыОтчета()

&НаСервере
// Возвращает наименование организации.
//
// Возвращаемое значение:
// <Строка> - наименование организации с учетом настройки справочника "Организации"
//            "Для печатных форм использовать".
//
Функция ПолучитьПредставлениеОрганизации()
	
	Возврат УПЖКХ_ПечатьКвитанцийСервер.ПолучитьНаименованиеОрганизации(Отчет.Организация);
	
КонецФункции // ПолучитьПредставлениеОрганизации()

&НаСервере
// Возвращает адрес здания.
//
// Возвращаемое значение:
// <Строка> - адрес здания с учетом настройки справочника "Организации"
//            "Представление адреса".
//
Функция ПолучитьПредставлениеЗдания()
	
	Возврат Справочники.КВП_Здания.ПолучитьПредставлениеЗдания(Отчет.Здание);
	
КонецФункции // ПолучитьПредставлениеЗдания()

&НаСервере
// Возвращает реквизиты договора с РСО по услуге электрической энергии.
//
// Возвращаемое значение:
// <Строка> - реквизиты договора с РСО по услуге электрической энергии.
//
Функция ПолучитьНомерДоговораРСО()
	
	НомерДоговораРСО = "";
	
	Если НЕ Отчет.ДоговорЭнергоснабжения.Пустая() Тогда
		ДатаДоговора     = Отчет.ДоговорЭнергоснабжения.Дата;
		НомерДоговора    = СокрЛП(Отчет.ДоговорЭнергоснабжения.Номер);
		
		НомерДоговораРСО = ?(НЕ ПустаяСтрока(НомерДоговора),
										?(Найти(НомерДоговора, "№") = 0, "№"+НомерДоговора, НомерДоговора),
										"")
						 + ?(НЕ ДатаДоговора = Дата(1,1,1), " от " + Формат(ДатаДоговора, "ДФ=dd.MM.yyyy"), "");
	КонецЕсли;
	
	Возврат НомерДоговораРСО;
	
КонецФункции // ПолучитьНомерДоговораРСО()

&НаСервере
// Процедура заполняет информацию об оборудовании электрическими или газовыми плитами.
Процедура ПолучитьИнформациюОбОборудованииПлитами(СтруктураПараметровОтчета)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КВП_БлагоустройствоОбъектов.Значение
	|ИЗ
	|	РегистрСведений.КВП_БлагоустройствоОбъектов КАК КВП_БлагоустройствоОбъектов
	|ГДЕ
	|	КВП_БлагоустройствоОбъектов.Объект = &Здание
	|	И КВП_БлагоустройствоОбъектов.ВидБлагоустройства = ЗНАЧЕНИЕ(Справочник.КВП_ВидыБлагоустройстваОбъектов.Плита)
	|	И (КВП_БлагоустройствоОбъектов.Значение = ЗНАЧЕНИЕ(Перечисление.КВП_Плита.Газовая)
	|			ИЛИ КВП_БлагоустройствоОбъектов.Значение = ЗНАЧЕНИЕ(Перечисление.КВП_Плита.Электрическая))";
	Запрос.УстановитьПараметр("Здание", Отчет.Здание);
	Таблица = Запрос.Выполнить().Выгрузить();
	
	Если Таблица.Количество() > 0 Тогда
		ТипПлиты = Таблица[0].Значение;
		Если ТипПлиты = ПредопределенноеЗначение("Перечисление.КВП_Плита.Газовая") Тогда
			СтруктураПараметровОтчета.Вставить("ОборудованПлитами", "оборудован стационарными газовыми плитами");
		ИначеЕсли ТипПлиты = ПредопределенноеЗначение("Перечисление.КВП_Плита.Электрическая") Тогда
			СтруктураПараметровОтчета.Вставить("ОборудованПлитами", "оборудован стационарными электроплитами");
		КонецЕсли;
	КонецЕсли;
	
	Если Не СтруктураПараметровОтчета.Свойство("ОборудованПлитами") Тогда
		СтруктураПараметровОтчета.Вставить("ОборудованПлитами", "не оборудован газовыми или стационарными электроплитами");
	КонецЕсли;
	
КонецПроцедуры // ПолучитьИнформациюОбОборудованииПлитами()

&НаСервере
// Процедура определяет коэффициент сезонности периода.
Процедура ПолучитьКоэффициентСезонностиПериода(СтруктураПараметровОтчета)
	
	ТаблицаКоэффициентовСезонности = ПолучитьТаблицуКоэффициентовСезонности();
	
	Коэффициент = ТаблицаКоэффициентовСезонности.Найти(Месяц(Отчет.ПериодОтчета), "Месяц").Величина;
	
	СтруктураПараметровОтчета.Вставить("КоэффициентД", Коэффициент);
	
КонецПроцедуры // ПолучитьКоэффициентСезонностиПериода()

&НаСервере
// Функция формирует таблицу коэффицентов сезонности.
Функция ПолучитьТаблицуКоэффициентовСезонности()
	
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("Месяц",    УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьОписаниеТиповЧисла(2));
	Таблица.Колонки.Добавить("Величина", УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьОписаниеТиповЧисла(3,1));
	
	НоваяСтрока = Таблица.Добавить();
	НоваяСтрока.Месяц    = 1;
	НоваяСтрока.Величина = 1;
	
	НоваяСтрока = Таблица.Добавить();
	НоваяСтрока.Месяц    = 2;
	НоваяСтрока.Величина = 0.9;
	
	НоваяСтрока = Таблица.Добавить();
	НоваяСтрока.Месяц    = 3;
	НоваяСтрока.Величина = 0.9;
	
	НоваяСтрока = Таблица.Добавить();
	НоваяСтрока.Месяц    = 4;
	НоваяСтрока.Величина = 0.9;
	
	НоваяСтрока = Таблица.Добавить();
	НоваяСтрока.Месяц    = 5;
	НоваяСтрока.Величина = 1;
	НоваяСтрока = Таблица.Добавить();
	НоваяСтрока.Месяц    = 6;
	НоваяСтрока.Величина = 1.1;
	
	НоваяСтрока = Таблица.Добавить();
	НоваяСтрока.Месяц    = 7;
	НоваяСтрока.Величина = 1.1;
	
	НоваяСтрока = Таблица.Добавить();
	НоваяСтрока.Месяц    = 8;
	НоваяСтрока.Величина = 1.1;
	
	НоваяСтрока = Таблица.Добавить();
	НоваяСтрока.Месяц    = 9;
	НоваяСтрока.Величина = 1;
	
	НоваяСтрока = Таблица.Добавить();
	НоваяСтрока.Месяц    = 10;
	НоваяСтрока.Величина = 1;
	
	НоваяСтрока = Таблица.Добавить();
	НоваяСтрока.Месяц    = 11;
	НоваяСтрока.Величина = 1;
	
	НоваяСтрока = Таблица.Добавить();
	НоваяСтрока.Месяц    = 12;
	НоваяСтрока.Величина = 1;
	
	Возврат Таблица;
	
КонецФункции // ПолучитьТаюлицуКоэффициентовСезонности()

&НаСервере
// Процедура заполняет параметры, соответствующие сведениям о показаниях.
Процедура ЗаполнитьСведенияОПоказаниях(СтруктураПараметровОтчета)
	
	Запрос = Новый Запрос;
	Запрос.Текст = ПолучитьТекстЗапроса();
	
	Запрос.УстановитьПараметр("ДатаКон",             КонецМесяца(Отчет.ПериодОтчета));
	Запрос.УстановитьПараметр("ДатаНач",             НачалоМесяца(Отчет.ПериодОтчета));
	Запрос.УстановитьПараметр("Здание",              Отчет.Здание);
	Запрос.УстановитьПараметр("Организация",         Отчет.Организация);
	Запрос.УстановитьПараметр("Услуга",              Отчет.Услуга);
	Запрос.УстановитьПараметр("НормаДляПенсионеров", Отчет.НормаПотребленияДляПенсионеров);
	
	Запрос.УстановитьПараметр("УказыватьКоличествоПрожИЗарегЧислами", Константы.УПЖКХ_УказыватьКоличествоПрожИЗарегЧислами.Получить());
	
	врТаблицаПоказаний = Запрос.Выполнить().Выгрузить();
	
	ТаблицаПоказаний = врТаблицаПоказаний.Скопировать();
	
	ТипЧисло = УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьОписаниеТиповЧисла(18, Константы.УПЖКХ_ТочностьОбъемаНачислений.Получить());
	
	ТаблицаПоказаний.Колонки.Добавить("ВПределахСоцНормы", ТипЧисло);
	ТаблицаПоказаний.Колонки.Добавить("СверхСоцНормы",     ТипЧисло);
	ТаблицаПоказаний.Колонки.Добавить("Всего",             ТипЧисло);
	
	Если ТаблицаПоказаний.Количество() > 0 Тогда
		Для Каждого ТекущаяСтрока Из ТаблицаПоказаний Цикл
			Если НЕ ТекущаяСтрока.НормаПотребления.Пустая()
			   И Не ТекущаяСтрока.ВариантНастройки = ПредопределенноеЗначение("Перечисление.КВП_ВариантыНастроекРасчетаНормативовПотребления.Простой") Тогда
				ТекущаяСтрока.РазмерСоцНормы = ПолучитьРазмерНормыПотребления(ТекущаяСтрока.ЛицевойСчет,
																		   Отчет.ПериодОтчета,
																		   ТекущаяСтрока.НормаПотребления,
																		   Отчет.Организация);
			КонецЕсли;
			
			Если ТекущаяСтрока.ВПределахНормы Тогда
				ТекущаяСтрока.ВПределахСоцНормы = ТекущаяСтрока.Количество;
			Иначе
				ТекущаяСтрока.СверхСоцНормы = ТекущаяСтрока.Количество;
			КонецЕсли;
			ТекущаяСтрока.Всего = ТекущаяСтрока.СверхСоцНормы + ТекущаяСтрока.ВПределахСоцНормы;
			
		КонецЦикла;
	КонецЕсли;
	
	ТаблицаПоказаний.Свернуть("НомерКвартиры, РазмерСоцНормы, ГруппаДомохозяйства, НормаДляПенсионеров", "ВПределахСоцНормы, СверхСоцНормы, Всего");
	
	// Заполним параметры строки "Кроме пенсионеров".
	ТаблицаПоказанийКромеПенсионеров = ТаблицаПоказаний.СкопироватьКолонки();
	
	СтрокиСПоказаниямиКромеПенсионеров = ТаблицаПоказаний.НайтиСтроки(Новый Структура("НормаДляПенсионеров", Ложь));
	Если СтрокиСПоказаниямиКромеПенсионеров.Количество() > 0 Тогда
		ТаблицаПоказанийКромеПенсионеров = ТаблицаПоказаний.Скопировать(СтрокиСПоказаниямиКромеПенсионеров);
	КонецЕсли;
	
	СтруктураПараметровОтчета.Вставить("ВПределахСоцНормыКромеПенсионеров", ТаблицаПоказанийКромеПенсионеров.Итог("ВПределахСоцНормы"));
	СтруктураПараметровОтчета.Вставить("СверхСоцНормыКромеПенсионеров",     ТаблицаПоказанийКромеПенсионеров.Итог("СверхСоцНормы"));
	СтруктураПараметровОтчета.Вставить("ВсегоКромеПенсионеров",             ТаблицаПоказанийКромеПенсионеров.Итог("Всего"));
	
	// Вставим в структуру параметров отчета таблицу "ТаблицаПоказаний".
	ТаблицаПоказаний.Колонки.Удалить("НормаДляПенсионеров");
	СтруктураПараметровОтчета.Вставить("ТаблицаПоказаний", ТаблицаПоказаний);
	
	// Итоговые значения таблицы.
	СтруктураПараметровОтчета.Вставить("ИтогРазмерСоцНормы",    ТаблицаПоказаний.Итог("РазмерСоцНормы"));
	СтруктураПараметровОтчета.Вставить("ИтогВсего",             ТаблицаПоказаний.Итог("Всего"));
	СтруктураПараметровОтчета.Вставить("ИтогВПределахСоцНормы", ТаблицаПоказаний.Итог("ВПределахСоцНормы"));
	СтруктураПараметровОтчета.Вставить("ИтогСверхСоцНормы",     ТаблицаПоказаний.Итог("СверхСоцНормы"));
	
КонецПроцедуры // ЗаполнитьСведенияОПоказаниях()

&НаСервере
// Возвращает текст запроса по показаниям.
Функция ПолучитьТекстЗапроса()
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_ЛицевыеСчетаСрезПоследних.Объект КАК Помещение,
	|	КВП_ЛицевыеСчетаСрезПоследних.ЛицевойСчет,
	|	КВП_ЛицевыеСчетаСрезПоследних.Объект.Код КАК ПомещениеКод
	|ПОМЕСТИТЬ втВсеПомещенияИЛицевыеСчетаЗдания
	|ИЗ
	|	РегистрСведений.КВП_ЛицевыеСчета.СрезПоследних(&ДатаКон, Объект.Владелец = &Здание) КАК КВП_ЛицевыеСчетаСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВЫБОР
	|		КОГДА КВП_НазначенныеНачисленияСрезПоследних.Объект ССЫЛКА Справочник.УПЖКХ_Помещения
	|			ТОГДА КВП_НазначенныеНачисленияСрезПоследних.Объект
	|		ИНАЧЕ ВЫБОР
	|				КОГДА КВП_НазначенныеНачисленияСрезПоследних.Объект ССЫЛКА Справочник.КВП_ЛицевыеСчета
	|					ТОГДА КВП_НазначенныеНачисленияСрезПоследних.Объект.Адрес
	|			КОНЕЦ
	|	КОНЕЦ КАК Помещение,
	|	ВЫБОР
	|		КОГДА КВП_НазначенныеНачисленияСрезПоследних.Объект ССЫЛКА Справочник.КВП_ЛицевыеСчета
	|			ТОГДА КВП_НазначенныеНачисленияСрезПоследних.Объект
	|	КОНЕЦ КАК ЛицевойСчет
	|ПОМЕСТИТЬ втПомещенияИЛССНазначеннойУслугой
	|ИЗ
	|	РегистрСведений.КВП_НазначенныеНачисления.СрезПоследних(
	|			&ДатаКон,
	|			Организация = &Организация
	|					И Услуга = &Услуга
	|					И Объект В
	|						(ВЫБРАТЬ
	|							втВсеПомещенияИЛицевыеСчетаЗдания.ЛицевойСчет
	|						ИЗ
	|							втВсеПомещенияИЛицевыеСчетаЗдания КАК втВсеПомещенияИЛицевыеСчетаЗдания)
	|				ИЛИ Объект В
	|					(ВЫБРАТЬ
	|						втВсеПомещенияИЛицевыеСчетаЗдания.Помещение
	|					ИЗ
	|						втВсеПомещенияИЛицевыеСчетаЗдания КАК втВсеПомещенияИЛицевыеСчетаЗдания)) КАК КВП_НазначенныеНачисленияСрезПоследних
	|ГДЕ
	|	КВП_НазначенныеНачисленияСрезПоследних.Действует
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_УслугиСоставныеУслуги.Услуга КАК СоставляющаяУслуга,
	|	ВЫБОР
	|		КОГДА НЕ КВП_УслугиСоставныеУслуги.ВидОграничения = ЗНАЧЕНИЕ(Перечисление.КВП_ВидыОграниченийСоставныхУслуг.БезОграничения)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ВПределахНормы
	|ПОМЕСТИТЬ втСоставляющиеУслуги
	|ИЗ
	|	Справочник.КВП_Услуги КАК КВП_Услуги
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КВП_Услуги.СоставныеУслуги КАК КВП_УслугиСоставныеУслуги
	|		ПО (КВП_УслугиСоставныеУслуги.Ссылка = КВП_Услуги.Ссылка)
	|ГДЕ
	|	КВП_Услуги.Ссылка = &Услуга
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УПЖКХ_НачисленияОбороты.ЛицевойСчет.Адрес КАК Помещение,
	|	УПЖКХ_НачисленияОбороты.ЛицевойСчет,
	|	СУММА(УПЖКХ_НачисленияОбороты.Количество) КАК Количество,
	|	УПЖКХ_НачисленияОбороты.СоставнаяУслуга КАК СоставляющаяУслуга,
	|	УПЖКХ_НачисленияОбороты.Услуга
	|ПОМЕСТИТЬ втРасход
	|ИЗ
	|	РегистрНакопления.УПЖКХ_Начисления.Обороты(
	|			&ДатаНач,
	|			&ДатаКон,
	|			,
	|			Организация = &Организация
	|				И Услуга = &Услуга
	|				И СоставнаяУслуга В
	|					(ВЫБРАТЬ
	|						втСоставляющиеУслуги.СоставляющаяУслуга
	|					ИЗ
	|						втСоставляющиеУслуги КАК втСоставляющиеУслуги)) КАК УПЖКХ_НачисленияОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	УПЖКХ_НачисленияОбороты.ЛицевойСчет,
	|	УПЖКХ_НачисленияОбороты.СоставнаяУслуга,
	|	УПЖКХ_НачисленияОбороты.ЛицевойСчет.Адрес,
	|	УПЖКХ_НачисленияОбороты.Услуга
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_НормыПотребленияУслугЛССрезПоследних.ЛицевойСчет,
	|	КВП_НормыПотребленияУслугЛССрезПоследних.Услуга КАК СоставнаяУслуга,
	|	КВП_НормыПотребленияУслугЛССрезПоследних.НормаПотребления,
	|	КВП_НормыПотребленияУслугЛССрезПоследних.НормаПотребления.Размер КАК РазмерНормы,
	|	КВП_НормыПотребленияУслугЛССрезПоследних.НормаПотребления.ВариантНастройки,
	|	ВЫБОР
	|		КОГДА КВП_НормыПотребленияУслугЛССрезПоследних.НормаПотребления = &НормаДляПенсионеров
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК НормаДляПенсионеров
	|ПОМЕСТИТЬ втНормыИзЛС
	|ИЗ
	|	РегистрСведений.КВП_НормыПотребленияУслугЛС.СрезПоследних(
	|			&ДатаКон,
	|			Услуга = &Услуга
	|				И ЛицевойСчет В
	|					(ВЫБРАТЬ
	|						втПомещенияИЛССНазначеннойУслугой.ЛицевойСчет
	|					ИЗ
	|						втПомещенияИЛССНазначеннойУслугой КАК втПомещенияИЛССНазначеннойУслугой)) КАК КВП_НормыПотребленияУслугЛССрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втРасход.ЛицевойСчет.Адрес КАК Помещение,
	|	втРасход.ЛицевойСчет,
	|	втРасход.Количество,
	|	втРасход.СоставляющаяУслуга,
	|	ЕСТЬNULL(втНормыИзЛС.НормаПотребления, ЗНАЧЕНИЕ(Справочник.КВП_НормыПотребленияУслуг.ПустаяСсылка)) КАК НормаПотребления,
	|	ЕСТЬNULL(втНормыИзЛС.РазмерНормы, 0) КАК РазмерНормы,
	|	ЕСТЬNULL(втНормыИзЛС.НормаПотребленияВариантНастройки, ЗНАЧЕНИЕ(Перечисление.КВП_ВариантыНастроекРасчетаНормативовПотребления.ПустаяСсылка)) КАК ВариантНастройки,
	|	ЕСТЬNULL(втСоставляющиеУслуги.ВПределахНормы, ЛОЖЬ) КАК ВПределахНормы,
	|	ЕСТЬNULL(втНормыИзЛС.НормаДляПенсионеров, ЛОЖЬ) КАК НормаДляПенсионеров
	|ПОМЕСТИТЬ втИтоговая
	|ИЗ
	|	втРасход КАК втРасход
	|		ЛЕВОЕ СОЕДИНЕНИЕ втСоставляющиеУслуги КАК втСоставляющиеУслуги
	|		ПО втРасход.СоставляющаяУслуга = втСоставляющиеУслуги.СоставляющаяУслуга
	|		ЛЕВОЕ СОЕДИНЕНИЕ втНормыИзЛС КАК втНормыИзЛС
	|		ПО втРасход.ЛицевойСчет = втНормыИзЛС.ЛицевойСчет
	|			И втРасход.Услуга = втНормыИзЛС.СоставнаяУслуга
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ втНормыИзЛС
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ втРасход
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ втСоставляющиеУслуги
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втВсеПомещенияИЛицевыеСчетаЗдания.Помещение,
	|	втВсеПомещенияИЛицевыеСчетаЗдания.ПомещениеКод,
	|	втВсеПомещенияИЛицевыеСчетаЗдания.ЛицевойСчет,
	|	ЕСТЬNULL(втИтоговая.Количество, 0) КАК Количество,
	|	ЕСТЬNULL(втИтоговая.СоставляющаяУслуга, ЗНАЧЕНИЕ(Справочник.КВП_Услуги.ПустаяСсылка)) КАК СоставляющаяУслуга,
	|	ЕСТЬNULL(втИтоговая.НормаПотребления, ЗНАЧЕНИЕ(Справочник.КВП_НормыПотребленияУслуг.ПустаяСсылка)) КАК НормаПотребления,
	|	ЕСТЬNULL(втИтоговая.РазмерНормы, 0) КАК РазмерНормы,
	|	ЕСТЬNULL(втИтоговая.ВариантНастройки, ЗНАЧЕНИЕ(Перечисление.КВП_ВариантыНастроекРасчетаНормативовПотребления.ПустаяСсылка)) КАК ВариантНастройки,
	|	ЕСТЬNULL(втИтоговая.ВПределахНормы, ЛОЖЬ) КАК ВПределахНормы,
	|	ЕСТЬNULL(втИтоговая.НормаДляПенсионеров, ЛОЖЬ) КАК НормаДляПенсионеров
	|ПОМЕСТИТЬ втОсновная
	|ИЗ
	|	втВсеПомещенияИЛицевыеСчетаЗдания КАК втВсеПомещенияИЛицевыеСчетаЗдания
	|		ЛЕВОЕ СОЕДИНЕНИЕ втИтоговая КАК втИтоговая
	|		ПО втВсеПомещенияИЛицевыеСчетаЗдания.ЛицевойСчет = втИтоговая.ЛицевойСчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ втИтоговая
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КоличествоЗарегистрированныхИзСведений.ЛицевойСчет,
	|	КоличествоЗарегистрированныхИзСведений.КоличествоЗарегистрированных
	|ПОМЕСТИТЬ втКоличествоЗарегистрированныхИзСведений
	|ИЗ
	|	(ВЫБРАТЬ
	|		УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.ЛицевойСчет КАК ЛицевойСчет,
	|		КОЛИЧЕСТВО(РАЗЛИЧНЫЕ УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.Жилец) КАК КоличествоЗарегистрированных
	|	ИЗ
	|		РегистрСведений.УПЖКХ_СведенияОЗарегистрированных.СрезПоследних(
	|				&ДатаКон,
	|				ЛицевойСчет В
	|					(ВЫБРАТЬ
	|						втВсеПомещенияИЛицевыеСчетаЗдания.ЛицевойСчет
	|					ИЗ
	|						втВсеПомещенияИЛицевыеСчетаЗдания КАК втВсеПомещенияИЛицевыеСчетаЗдания)) КАК УПЖКХ_СведенияОЗарегистрированныхСрезПоследних
	|	ГДЕ
	|		УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.Зарегистрирован
	|	
	|	СГРУППИРОВАТЬ ПО
	|		УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.ЛицевойСчет) КАК КоличествоЗарегистрированныхИзСведений
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_УчетКоличестваЖильцовПоЛицевымСчетам.ЛицевойСчет КАК ЛицевойСчет,
	|	КВП_УчетКоличестваЖильцовПоЛицевымСчетам.КоличествоЗарегистрированных КАК КоличествоЗарегистрированных
	|ПОМЕСТИТЬ втУчетКоличестваЖильцов
	|ИЗ
	|	РегистрСведений.КВП_УчетКоличестваЖильцовПоЛицевымСчетам.СрезПоследних(
	|			&ДатаКон,
	|			ЛицевойСчет В
	|				(ВЫБРАТЬ
	|					втВсеПомещенияИЛицевыеСчетаЗдания.ЛицевойСчет
	|				ИЗ
	|					втВсеПомещенияИЛицевыеСчетаЗдания КАК втВсеПомещенияИЛицевыеСчетаЗдания)) КАК КВП_УчетКоличестваЖильцовПоЛицевымСчетам
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втОсновная.Помещение,
	|	втОсновная.ПомещениеКод,
	|	втОсновная.ЛицевойСчет,
	|	втОсновная.Количество,
	|	втОсновная.СоставляющаяУслуга,
	|	втОсновная.НормаПотребления,
	|	втОсновная.РазмерНормы,
	|	втОсновная.ВариантНастройки,
	|	втОсновная.ВПределахНормы,
	|	ВЫБОР
	|		КОГДА &УказыватьКоличествоПрожИЗарегЧислами = ИСТИНА
	|			ТОГДА ЕСТЬNULL(втУчетКоличестваЖильцов.КоличествоЗарегистрированных, 0)
	|		ИНАЧЕ ЕСТЬNULL(втКоличествоЗарегистрированныхИзСведений.КоличествоЗарегистрированных, 0)
	|	КОНЕЦ КАК КоличествоЗарегистрированных,
	|	втОсновная.НормаДляПенсионеров
	|ПОМЕСТИТЬ втИтоговая
	|ИЗ
	|	втОсновная КАК втОсновная
	|		ЛЕВОЕ СОЕДИНЕНИЕ втКоличествоЗарегистрированныхИзСведений КАК втКоличествоЗарегистрированныхИзСведений
	|		ПО втОсновная.ЛицевойСчет = втКоличествоЗарегистрированныхИзСведений.ЛицевойСчет
	|		ЛЕВОЕ СОЕДИНЕНИЕ втУчетКоличестваЖильцов КАК втУчетКоличестваЖильцов
	|		ПО втОсновная.ЛицевойСчет = втУчетКоличестваЖильцов.ЛицевойСчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втИтоговая.Помещение,
	|	ПРЕДСТАВЛЕНИЕ(втИтоговая.Помещение) КАК НомерКвартиры,
	|	втИтоговая.ПомещениеКод КАК ПомещениеКод,
	|	втИтоговая.ЛицевойСчет,
	|	втИтоговая.Количество,
	|	втИтоговая.СоставляющаяУслуга,
	|	втИтоговая.НормаПотребления,
	|	втИтоговая.РазмерНормы КАК РазмерСоцНормы,
	|	втИтоговая.ВариантНастройки,
	|	втИтоговая.ВПределахНормы,
	|	ВЫБОР
	|		КОГДА втИтоговая.КоличествоЗарегистрированных = 0
	|			ТОГДА 0
	|		КОГДА втИтоговая.КоличествоЗарегистрированных = 1
	|			ТОГДА 1
	|		КОГДА втИтоговая.КоличествоЗарегистрированных = 2
	|			ТОГДА 2
	|		КОГДА втИтоговая.КоличествоЗарегистрированных = 3
	|			ТОГДА 3
	|		КОГДА втИтоговая.КоличествоЗарегистрированных = 4
	|			ТОГДА 4
	|		КОГДА втИтоговая.КоличествоЗарегистрированных >= 5
	|			ТОГДА 5
	|	КОНЕЦ КАК ГруппаДомохозяйства,
	|	втИтоговая.НормаДляПенсионеров
	|ИЗ
	|	втИтоговая КАК втИтоговая
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПомещениеКод";
	
	Возврат ТекстЗапроса;
	
КонецФункции // ПолучитьТекстЗапроса()

&НаСервере
// Заполняет ответственного в структуре параметров отчета.
//
Функция ЗаполнитьДанныеОтветственного(СтруктураПараметровОтчета)
	
	Если Не Отчет.Ответственный.Пустая() Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ОтветственныеЛицаОрганизацийСрезПоследних.Должность
		|ИЗ
		|	РегистрСведений.ОтветственныеЛицаОрганизаций.СрезПоследних(
		|			&Дата,
		|			ФизическоеЛицо = &Ответственный
		|				И СтруктурнаяЕдиница = &Организация) КАК ОтветственныеЛицаОрганизацийСрезПоследних";
		Запрос.УстановитьПараметр("Дата",          НачалоДня(Отчет.ПериодОтчета));
		Запрос.УстановитьПараметр("Ответственный", Отчет.Ответственный);
		Запрос.УстановитьПараметр("Организация",   Отчет.Организация);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			СтруктураПараметровОтчета.Вставить("Должность", Выборка.Должность);
		КонецЕсли;
		
		СтруктураПараметровОтчета.Вставить("Ответственный", Отчет.Ответственный);
		
	КонецЕсли;
	
КонецФункции // ЗаполнитьДанныеОтветственного()

&НаКлиенте
// Функция получает настройки учетной политики ЖКХ.
//
// Возввращаемые параметры:
//  Отказ - <Булево> - определяет, заданы (Истина) или нет (Ложь)
//                     настройки учетной политики ЖКХ.
//
Функция ОбновитьНастройкиУчетнойПолитикиТСЖ()
	
	Отказ = Ложь;
	мНастройкиУчетнойПолитикиТСЖ = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьПараметрыУчетнойПолитикиЖКХ(КонецМесяца(Отчет.ПериодОтчета),
																											  Отчет.Организация,
																											  Отказ);
	Возврат Не Отказ;
	
КонецФункции // ОбновитьНастройкиУчетнойПолитикиТСЖ()

#КонецОбласти