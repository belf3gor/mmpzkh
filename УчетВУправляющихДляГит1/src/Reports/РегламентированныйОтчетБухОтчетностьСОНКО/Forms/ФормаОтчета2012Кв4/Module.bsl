&НаСервере
Перем мОбъектОтчета;

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	// Обход ошибки платформы Параметр сеанса отсутствует или удален
	ТабличныйДокумент.Очистить();
	
	СформироватьСтруктуруРеквизитовФормы();
	
	СтруктураРеквизитовФормы.СписокПечатаемыхЛистов = Новый СписокЗначений;
	
	мСтруктураМногострочныхРазделов   = Новый Структура;
	мСтруктураИсхКолвоСтрокРазделов   = Новый Структура;
	мСтруктураМногостраничныхРазделов = Новый Структура;
	
	СтруктураМногострочныхЧастей = Новый Структура;
	СтруктураРеквизитовФормы.СоответствиеПоказателейМногострочныхЧастейИхОписанию = Новый Соответствие;
	
	ЦветЗаполняетсяТолькоВручную    = Новый Цвет(255, 255, 225);
	ЦветЗаполняетсяАвтоКорректир    = Новый Цвет(255, 240, 200);
	ЦветЗаполняетсяАвтоБезКорректир = Новый Цвет(230, 240, 220);
	ЦветЗаполняетсяАвтоАрифметика   = Новый Цвет(192, 220, 192);
	ЦветЗаполняетсяВсегдаВручную    = Новый Цвет(255, 255, 192);
	ЦветНеЗаполняется               = Новый Цвет(255, 255, 255);
	
	// Структура цветов раскраски автозаполняемых ячеек.
	мСтруктураЦветовРаскраски = Новый Структура;
	мСтруктураЦветовРаскраски.Вставить("_0", ЦветЗаполняетсяВсегдаВручную);
	мСтруктураЦветовРаскраски.Вставить("_1", ЦветЗаполняетсяТолькоВручную);
	мСтруктураЦветовРаскраски.Вставить("_2", ЦветЗаполняетсяАвтоКорректир);
	мСтруктураЦветовРаскраски.Вставить("_3", ЦветЗаполняетсяАвтоБезКорректир);
	мСтруктураЦветовРаскраски.Вставить("_4", ЦветЗаполняетсяАвтоАрифметика);
	мСтруктураЦветовРаскраски.Вставить("_5", ЦветНеЗаполняется);
	
	СтруктураДанныхБаланс = Новый Структура;
	СтруктураДанныхОФР    = Новый Структура;
	СтруктураДанныхОЦИС   = Новый Структура;
									   	
	мСтруктураВариантыЗаполнения       = Новый Структура;
	мСтруктураВариантыЗаполненияЭталон = Новый Структура;
		
	// ОПИСАНИЕ ПАРАМЕТРОВ ФОРМЫ ОТЧЕТА
	//
	// Версия формы
	СтруктураРеквизитовФормы.мВерсияФормы = "11/06/2014";
	
	СтруктураРеквизитовФормы.мПечатныеформы = Новый СписокЗначений;
	СтруктураРеквизитовФормы.мПечатаемыеРазделы = Новый СписокЗначений;
	
	СтруктураРеквизитовФормы.мВыбраннаяФорма           = Параметры.мВыбраннаяФорма;
	СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета   = Параметры.мДатаКонцаПериодаОтчета;
	СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета  = Параметры.мДатаНачалаПериодаОтчета;
	СтруктураРеквизитовФормы.мСкопированаФорма         = Параметры.мСкопированаФорма;
	СтруктураРеквизитовФормы.мСохраненныйДок           = Параметры.мСохраненныйДок;
	СтруктураРеквизитовФормы.Организация               = Параметры.Организация;
	СтруктураРеквизитовФормы.СпособСозданияОрганизации = Параметры.СпособСозданияОрганизации;
	СтруктураРеквизитовФормы.ДатаСозданияОрганизации   = Параметры.ДатаСозданияОрганизации;
	СтруктураРеквизитовФормы.СформироватьФормуОтчетаАвтоматически = Параметры.СформироватьФормуОтчетаАвтоматически;
	СтруктураРеквизитовФормы.ДоступенМеханизмПечатиРеглОтчетностиСДвухмернымШтрихкодомPDF417
		= Параметры.ДоступенМеханизмПечатиРеглОтчетностиСДвухмернымШтрихкодомPDF417;
	
	ДатаПодписи	= ТекущаяДатаСеанса();
	
	ПорядкиОкругленияОтчетности = Новый Структура;
	ПорядкиОкругленияОтчетности.Вставить("ПеречислениеПорядкиОкругленияОтчетностиОкр1",       Перечисления.ПорядкиОкругленияОтчетности.Окр1);
	ПорядкиОкругленияОтчетности.Вставить("ПеречислениеПорядкиОкругленияОтчетностиОкр1000",    Перечисления.ПорядкиОкругленияОтчетности.Окр1000);
	ПорядкиОкругленияОтчетности.Вставить("ПеречислениеПорядкиОкругленияОтчетностиОкр1000000", Перечисления.ПорядкиОкругленияОтчетности.Окр1000000);
	
	СтруктураРеквизитовФормы.ИмяСохраняемогоПараметра = "РегламентированныйОтчетБухОтчетностьСОНКО_ФормаОтчета2012Кв4_Изменения";
	СтруктураРеквизитовФормы.СохраненныйВыборПользователя = Загрузить(СтруктураРеквизитовФормы.ИмяСохраняемогоПараметра);
	СтруктураРеквизитовФормы.КоличествоСтрокИнформационногоМакета = СтрЧислоСтрок(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет("ФормаОтчета2012Кв4_Изменения").ПолучитьТекст());
	Инициализация(Параметры.БезОткрытияФормы);
	
КонецПроцедуры

&НаСервере
Функция Загрузить(ИмяСохраняемогоПараметра)
	
	Возврат ХранилищеНастроекДанныхФорм.Загрузить("Отчет.РегламентированныйОтчетБухОтчетностьСОНКО.Форма.УведомлениеОбИзменениях", ИмяСохраняемогоПараметра);
	
КонецФункции

&НаСервере
Процедура СформироватьСтруктуруРеквизитовФормы()
	
	СтруктураРеквизитовФормы = Новый Структура;
	
	СтруктураРеквизитовФормы.Вставить("мВыбраннаяФорма");
	СтруктураРеквизитовФормы.Вставить("мСкопированаФорма");
	СтруктураРеквизитовФормы.Вставить("мСохраненныйДок");
	СтруктураРеквизитовФормы.Вставить("мДатаНачалаПериодаОтчета");
	СтруктураРеквизитовФормы.Вставить("мДатаКонцаПериодаОтчета");
	СтруктураРеквизитовФормы.Вставить("мЗаписьЗапрещена");
	СтруктураРеквизитовФормы.Вставить("мЗаписываетсяНовыйДокумент");
	СтруктураРеквизитовФормы.Вставить("мВариант");
	СтруктураРеквизитовФормы.Вставить("мПечатьБезШтрихкодаРазрешена");
	СтруктураРеквизитовФормы.Вставить("мПечатаемыеРазделы");
	СтруктураРеквизитовФормы.Вставить("мВерсияФормы");
	СтруктураРеквизитовФормы.Вставить("мПечатныеФормы");
	СтруктураРеквизитовФормы.Вставить("мВПрограммеИзмененаОрганизация");
	СтруктураРеквизитовФормы.Вставить("ТипАдреса");
	СтруктураРеквизитовФормы.Вставить("мБезОткрытияФормы");
	СтруктураРеквизитовФормы.Вставить("мРежимПечати");
	СтруктураРеквизитовФормы.Вставить("ЗаголовокДатаОтчетная");
	СтруктураРеквизитовФормы.Вставить("ЗаголовокДатаКонцаПрошлогоГода");
	СтруктураРеквизитовФормы.Вставить("ЗаголовокДатаКонцаПозапрошлогоГода");
	СтруктураРеквизитовФормы.Вставить("ЗаголовокДатаОтчетногоПериода");
	СтруктураРеквизитовФормы.Вставить("ЗаголовокДатаОтчетногоПериодаПрошлогоГода");
	СтруктураРеквизитовФормы.Вставить("НаимТекущегоРаздела");
	СтруктураРеквизитовФормы.Вставить("ВидДокумента");
	СтруктураРеквизитовФормы.Вставить("СтрПериодОтчета");
	СтруктураРеквизитовФормы.Вставить("Организация");
	СтруктураРеквизитовФормы.Вставить("ЕдиницаИзмерения");
	СтруктураРеквизитовФормы.Вставить("мДелитель");
	СтруктураРеквизитовФормы.Вставить("ТочностьЕдиницыИзмерения");
	СтруктураРеквизитовФормы.Вставить("ИП");
	СтруктураРеквизитовФормы.Вставить("НаимОрганизации");
	СтруктураРеквизитовФормы.Вставить("ВыводитьСтраницуВТаблДокНаСервере");
	СтруктураРеквизитовФормы.Вставить("ОтображатьКнопкуЗаполнить", Ложь);
	СтруктураРеквизитовФормы.Вставить("ОтображатьКнопкуРасшифровать", Ложь);
	СтруктураРеквизитовФормы.Вставить("АдресВременногоХранилищаРасшифровки");
	СтруктураРеквизитовФормы.Вставить("мСохранятьРасшифровку", Истина);
	СтруктураРеквизитовФормы.Вставить("мПроверятьСоотношенияПриПечатиИВыгрузки");
	СтруктураРеквизитовФормы.Вставить("мОписаниеТиповЧислоЕ");
	СтруктураРеквизитовФормы.Вставить("ЗаголовкиОтчетов");
	СтруктураРеквизитовФормы.Вставить("ФлажокОтклАвтоРасчет", Ложь);
	СтруктураРеквизитовФормы.Вставить("СписокПечатаемыхЛистов");
	СтруктураРеквизитовФормы.Вставить("ТекущаяСтрокаРазделовОтчета");
	СтруктураРеквизитовФормы.Вставить("АдресВоВременномХранилище");
	СтруктураРеквизитовФормы.Вставить("ГруппаОрганизаций", Новый СписокЗначений);
	СтруктураРеквизитовФормы.Вставить("АдресВФормате9Запятых");
	СтруктураРеквизитовФормы.Вставить("СтрокаФорматаПредставления");
	СтруктураРеквизитовФормы.Вставить("ДелительПредставления");
	СтруктураРеквизитовФормы.Вставить("ИзмененаОрганизация");
	СтруктураРеквизитовФормы.Вставить("СоответствиеПоказателейМногострочныхЧастейИхОписанию");
	СтруктураРеквизитовФормы.Вставить("мАдресДляВыгрузки");
	СтруктураРеквизитовФормы.Вставить("СформироватьФормуОтчетаАвтоматически");
	СтруктураРеквизитовФормы.Вставить("ИмяСохраняемогоПараметра");
	СтруктураРеквизитовФормы.Вставить("СохраненныйВыборПользователя");
	СтруктураРеквизитовФормы.Вставить("КоличествоСтрокИнформационногоМакета");
	СтруктураРеквизитовФормы.Вставить("ДоступенМеханизмПечатиРеглОтчетностиСДвухмернымШтрихкодомPDF417");
	СтруктураРеквизитовФормы.Вставить("СпособСозданияОрганизации");
	СтруктураРеквизитовФормы.Вставить("ДатаСозданияОрганизации");
	СтруктураРеквизитовФормы.Вставить("ОКВЭД",  "");
	СтруктураРеквизитовФормы.Вставить("ОКВЭД2", "");
	СтруктураРеквизитовФормы.Вставить("ОснВидДеят",  "");
	СтруктураРеквизитовФормы.Вставить("ОснВидДеят2", "");
	СтруктураРеквизитовФормы.Вставить("ДатаАктуальностиДанных");
	
	// Параметр используется для открытия формы длительной операции
	// при автоматическом заполнении отчета при создании.
	//   Значения:
	//     Неопределено - задание не запускалось.
	//     Структура    - параметры запуска и результат.
	СтруктураРеквизитовФормы.Вставить("РезультатЗапускаАвтозаполненияПриСоздании");
	
КонецПроцедуры

&НаСервере
Процедура Инициализация(БезОткрытияФормы = Ложь) Экспорт
		
	СтруктураРеквизитовФормы.мБезОткрытияФормы = БезОткрытияФормы;
	СтруктураРеквизитовФормы.мРежимПечати = Ложь;
	СтруктураРеквизитовФормы.мПечатьБезШтрихкодаРазрешена = Истина;
	
	Элементы.ПанельПроверкиАктуальностиДанных.Видимость = Ложь;
	
	ТабличныйДокумент.Очистить(); // очистка необходима в случае повторного вызова процедуры "Инициализация"
	
	ИнициализироватьСтруктуруЗаголовковОтчетов();
	
	ИмяРаздела = "Баланс";
	
	ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + ИмяРаздела));
	
	СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяРаздела;
	
	ИнициализироватьСвойстваРазделовОтчета();
	
	ЗаполнитьСтруктуруЗависимыхЯчеекДляАвторасчета();
	
	ЗаполнитьНачальныеНастройки();
	
	Если Не СтруктураРеквизитовФормы.мБезОткрытияФормы Тогда
		КопироватьДанныеФормы(мДеревоСтраницОтчета, мДеревоВыбранныхСтраниц);
		СформироватьСпискиВыбора();
	КонецЕсли;
	
	СформироватьДеревоРазделовОтчетаНаСервере();
	
	Для Каждого ЭлементСтруктуры Из СтруктураМногострочныхЧастей Цикл
		ПеренумероватьСтрокиИЗаполнитьЗаголовкиМногострочнойЧасти(ЭлементСтруктуры.Значение, СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	КонецЦикла;
	
	Если СтруктураРеквизитовФормы.СформироватьФормуОтчетаАвтоматически Тогда
		СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация = Истина;
	Иначе
		СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация = Ложь;
	КонецЕсли;
	
	СтруктураРеквизитовФормы.ВидДокумента = 0;
	НомерКорректировки = 1;
	
	Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
		Если СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено Тогда
			ВосстановитьСохраненныеДанные();
			
		Иначе
			СтруктураРеквизитовФормы.ЕдиницаИзмерения         = Перечисления.ПорядкиОкругленияОтчетности.Окр1000;
			СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = 0;
			
			СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки = Ложь;
			
			КопироватьДанныеФормы(мДеревоСтраницОтчета, мДеревоВыбранныхСтраниц);
			
			УстановитьФорматВыводаНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
			
			СтруктураРеквизитовФормы.ТипАдреса = ТипАдресаПоУмолчанию();
			
		КонецЕсли;
		
		Модифицированность = Истина;
		
	Иначе
		ВосстановитьСохраненныеДанные();
		
		Если ЗначениеЗаполнено(СтруктураРеквизитовФормы.мСкопированаФорма) Тогда
			СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено;
			Модифицированность = Истина;
		КонецЕсли;
		
		Если НЕ БезОткрытияФормы
		   И НЕ СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
			ЗаблокироватьДанныеДляРедактирования(СтруктураРеквизитовФормы.мСохраненныйДок, , ЭтаФорма.УникальныйИдентификатор);
		КонецЕсли;
		
	КонецЕсли;
	
	ПолучитьСведенияОПоказателяхОтчета();
	
	Если РегламентированнаяОтчетностьВызовСервера.ИспользуетсяОднаОрганизация() Тогда
		ТабличныйДокумент.Области.ОрганизацииДляЗаполненияОтчета.Текст = "";
		ТабличныйДокумент.Области.ОрганизацииДляЗаполненияОтчета.ГиперСсылка = Ложь;
	КонецЕсли;
	
	Если НЕ СтруктураРеквизитовФормы.ОтображатьКнопкуЗаполнить Тогда
		Элементы.Заполнить.Видимость = Ложь;
		ТабличныйДокумент.Области.ОрганизацииДляЗаполненияОтчета.Текст = "";
		ТабличныйДокумент.Области.ОрганизацииДляЗаполненияОтчета.ГиперСсылка = Ложь;
		СтруктураРеквизитовФормы.мСохранятьРасшифровку = Ложь;
	КонецЕсли;
	
	Если НЕ СтруктураРеквизитовФормы.ОтображатьКнопкуРасшифровать Тогда
		Элементы.Расшифровать.Видимость = Ложь;
		Элементы.ТабличныйДокументКонтекстноеМенюРасшифровать.Видимость = Ложь;
	КонецЕсли;
	
	ПоказатьПериод(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
	ЗаполнитьЗаголовкиВРазделахОтчетностиПоЕдиницеИзмерения();
	
	ТабличныйДокумент.Области.ДатаПодписиОтчета.Значение = ДатаПодписи;
	
	СтруктураРеквизитовФормы.ИП = НЕ РегламентированнаяОтчетностьВызовСервера.ЭтоЮридическоеЛицо(СтруктураРеквизитовФормы.Организация);
	
	Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено
	 ИЛИ СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация
	 ИЛИ СтруктураРеквизитовФормы.СформироватьФормуОтчетаАвтоматически Тогда
		ЗаполнитьСведенияОбОрганизацииНаСервере();
		
	Иначе
		РегламентированнаяОтчетность.ПолучитьЗначениеОКВЭД(ДатаПодписи, СтруктураРеквизитовФормы);
		РегламентированнаяОтчетность.ПолучитьЗначениеВидаЭкономическойДеятельности(ДатаПодписи, СтруктураРеквизитовФормы);
		
	КонецЕсли;
	
	УстановитьЦветФонаЯчейкиНаСервере( , , СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	СтруктураРеквизитовФормы.НаимОрганизации = СтруктураРеквизитовФормы.Организация.Наименование;
	
	Если ВидСдачиОтчетности = 1 Тогда 
		ТабличныйДокумент.Области.ВидОтчетности.Значение = "Обычная";
	ИначеЕсли ВидСдачиОтчетности = 2 Тогда
		ТабличныйДокумент.Области.ВидОтчетности.Значение = "Промежуточная при ликвидации/реорганизации";
	ИначеЕсли ВидСдачиОтчетности = 3 Тогда
		ТабличныйДокумент.Области.ВидОтчетности.Значение = "Ликвидационная";
	КонецЕсли;
	
	Если СтруктураРеквизитовФормы.ВидДокумента = 0 Тогда 
		НомерКорректировки = 0;
	КонецЕсли;
	ТабличныйДокумент.Области.НомерКорректировки.Значение = Строка(НомерКорректировки);
	
	СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
	
	// Отправка бух. отчетности в Росстат
	ОтправкаБухгалтерскойОтчетностиВРосстат.ОпределитьСсылкуНаСуществующийОтчетВРосстат(ЭтотОбъект);
	ОтправкаБухгалтерскойОтчетностиВРосстатКлиентСервер.УстановитьВидимостьСсылкиНаОтчетРосстатаИПанелиПредупреждения(ЭтотОбъект);
	// Конец Отправка бух. отчетности в Росстат
	
	Если Не СтруктураРеквизитовФормы.мБезОткрытияФормы Тогда
		ЗаполнитьПримечанияКодовСтрок(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	КонецЕсли;
	
	РегламентированнаяОтчетность.ДобавитьКнопкуПрисоединенныеФайлы(ЭтаФорма);
	
	РегламентированнаяОтчетностьКлиентСервер.ПриИнициализацииФормыРегламентированногоОтчета(ЭтаФорма);
	
	Если СтруктураРеквизитовФормы.СформироватьФормуОтчетаАвтоматически Тогда
		РезультатЗапуска = ЗаполнитьАвтоНаСервере();
		СтруктураРеквизитовФормы.Вставить("РезультатЗапускаАвтозаполненияПриСоздании", РезультатЗапуска);
		
		Если РезультатЗапуска.Статус = "Выполнено" Тогда
			ЗагрузитьПодготовленныеДанные();
			
		ИначеЕсли РезультатЗапуска.Статус = "Ошибка" Тогда
			ВызватьИсключение РезультатЗапуска.ПодробноеПредставлениеОшибки;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьСпискиВыбора()
	
	МакетСписковВыбора = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет("СпискиВыбора2012Кв4");
	
	КоллекцияСписковВыбора = Новый Соответствие;
	
	Для Каждого Область Из МакетСписковВыбора.Области Цикл
		Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Строки Тогда
			ВерхОбласти = Область.Верх;
			НизОбласти = Область.Низ;
			
			ТаблСписка = Новый ТаблицаЗначений;
			ТаблСписка.Колонки.Добавить("Код", , , 4);
			ТаблСписка.Колонки.Добавить("Название",);
			
			Для НомСтр = ВерхОбласти По НизОбласти Цикл
				НовСтрока = ТаблСписка.Добавить();
				НовСтрока.Код = СокрЛП(МакетСписковВыбора.Область(НомСтр, 1).Текст);
				НовСтрока.Название = СокрЛП(МакетСписковВыбора.Область(НомСтр, 2).Текст);
			КонецЦикла;
			
			КоллекцияСписковВыбора.Вставить(Область.Имя, ТаблСписка);
		КонецЕсли;
	КонецЦикла;
	
	СвойстваПоказателей.Очистить();
	
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000010000103", 4, , "Выбор кода строки", КоллекцияСписковВыбора["П000010000103"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000010000203", 4, , "Выбор кода строки", КоллекцияСписковВыбора["П000010000203"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000010000403", 4, , "Выбор кода строки", КоллекцияСписковВыбора["П000010000403"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000010000603", 4, , "Выбор кода строки", КоллекцияСписковВыбора["П000010000603"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000010000703", 4, , "Выбор кода строки", КоллекцияСписковВыбора["П000010000703"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000010000803", 4, , "Выбор кода строки", КоллекцияСписковВыбора["П000010000803"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000010001003", 4, , "Выбор кода строки", КоллекцияСписковВыбора["П000010001003"]);
	
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000020000202", 4, , "Выбор кода строки", КоллекцияСписковВыбора["П000020000202"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000020000402", 4, , "Выбор кода строки", КоллекцияСписковВыбора["П000020000402"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000020000602", 4, , "Выбор кода строки", КоллекцияСписковВыбора["П000020000602"]);
	
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000100621002", 4, , "Выбор кода строки", КоллекцияСписковВыбора["П000100621002"]);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьОтчет(Команда)
	
	Если Элементы.РазделыОтчета.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СохранитьНаКлиенте();
	
КонецПроцедуры

&НаСервере
Процедура ПослеСменыЕдИзмеренияИТочности()
	
	ЗаполнитьПустыеСтруктурыДанных();
	
	ПроверитьТочность();
	
	УстановитьФорматВыводаНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
	ЗаполнитьЗаголовкиВРазделахОтчетностиПоЕдиницеИзмерения();
	
	РасчетНаСервере();

	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ТабличныйДокументПриИзмененииСодержимогоОбласти(Элемент, Область)
	
	Если НЕ ((Область.Имя = "ОргНазв") Или (Область.Имя = "ОргКодОКПО") Или (Область.Имя = "ОргОтрасль")
	 Или (Область.Имя = "ОргКодОКВЭД") Или (Область.Имя = "ОргФорма") Или (Область.Имя = "ОргФормаСобств")
	 Или (Область.Имя = "ОргКодОКОПФ") Или (Область.Имя = "ОргКодОКФС") Или (Область.Имя = "ОргПочтАдрес")
	 Или (Область.Имя = "ОргДиректор") Или (Область.Имя = "ОргБухгалтер"))
	 Или (Область.Имя = "ДатаПодписиОтчета") Тогда
	 
		РасчетНаКлиенте(СтруктураРеквизитовФормы.НаимТекущегоРаздела, Область.Имя);
		
	КонецЕсли;
	
	Если Область.Имя = "ДатаПодписиОтчета" Тогда 
		ДатаПодписи = Область.Значение;
		ЗаполнитьСведенияОбОрганизацииНаСервере(Истина);
		СтруктураДанныхОФР.Вставить("ДатаПодписиОтчета", ДатаПодписи);
		СтруктураДанныхОЦИС.Вставить("ДатаПодписиОтчета", ДатаПодписи);
		СтруктураДанныхБаланс.Вставить("ДатаПодписиОтчета", ДатаПодписи);
		ОбновитьЗначенияОКВЭДиВидаЭкономическойДеятельности();
	ИначеЕсли Область.Имя = "НомерКорректировки" Тогда
		ОписаниеТипа = Новый ОписаниеТипов("Число");
		НомерКорректировки = ОписаниеТипа.ПривестиЗначение(Область.Значение);
		СтруктураРеквизитовФормы.ВидДокумента = ?(НомерКорректировки = 0, 0, 1);
		Область.Значение = Строка(НомерКорректировки);
		РегламентированнаяОтчетностьКлиентСервер.УстановитьЗначениеОКВЭД(ДатаПодписи,
																	 СтруктураРеквизитовФормы,
																	 ТабличныйДокумент.Области.ОргКодОКВЭД.Значение);
		РегламентированнаяОтчетностьКлиентСервер.УстановитьЗначениеВидаЭкономическойДеятельности(ДатаПодписи,
																	 СтруктураРеквизитовФормы,
																	 ТабличныйДокумент.Области.ОргОтрасль.Значение);															 
		ОбновитьЗначенияОКВЭДиВидаЭкономическойДеятельности();															 															 
		Модифицированность = Истина;
	КонецЕсли;
	
	Если СтрНайти(Область.Имя, "П") = 1 Тогда
		ЦветФонаЯчейки = Элемент.ТекущаяОбласть.ЦветФона;
		Если ЦветФонаЯчейки = мСтруктураЦветовРаскраски["_2"] Тогда
			ОбновитьПараметрыАвтозаполненияЯчейки();
		КонецЕсли;
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗначенияОКВЭДиВидаЭкономическойДеятельности()
	
	Если СтруктураДанныхБаланс.Свойство("ОргКодОКВЭД") Тогда
		
		РегламентированнаяОтчетностьКлиентСервер.УстановитьЗначениеОКВЭД(ДатаПодписи,
																	 СтруктураРеквизитовФормы,
																	 СтруктураДанныхБаланс.ОргКодОКВЭД);
		
	КонецЕсли;	
	
	Если СтруктураДанныхОФР.Свойство("ОргКодОКВЭД") Тогда
		
		РегламентированнаяОтчетностьКлиентСервер.УстановитьЗначениеОКВЭД(ДатаПодписи,
																	 СтруктураРеквизитовФормы,
																	 СтруктураДанныхОФР.ОргКодОКВЭД);
																	 
	КонецЕсли;																 
	
	Если СтруктураДанныхОЦИС.Свойство("ОргКодОКВЭД") Тогда
		
		РегламентированнаяОтчетностьКлиентСервер.УстановитьЗначениеОКВЭД(ДатаПодписи,
																	 СтруктураРеквизитовФормы,
																	 СтруктураДанныхОЦИС.ОргКодОКВЭД);
																	 
	КонецЕсли;																 
																	 
	Если СтруктураДанныхБаланс.Свойство("ОргОтрасль") Тогда
		
		РегламентированнаяОтчетностьКлиентСервер.УстановитьЗначениеВидаЭкономическойДеятельности(ДатаПодписи,
																	 СтруктураРеквизитовФормы,
																	 СтруктураДанныхБаланс.ОргОтрасль);
		
	КонецЕсли;	
	
	Если СтруктураДанныхОФР.Свойство("ОргОтрасль") Тогда
		
		РегламентированнаяОтчетностьКлиентСервер.УстановитьЗначениеВидаЭкономическойДеятельности(ДатаПодписи,
																	 СтруктураРеквизитовФормы,
																	 СтруктураДанныхОФР.ОргОтрасль);
		
	КонецЕсли;
		
	Если СтруктураДанныхОЦИС.Свойство("ОргОтрасль") Тогда
		
		РегламентированнаяОтчетностьКлиентСервер.УстановитьЗначениеВидаЭкономическойДеятельности(ДатаПодписи,
																	 СтруктураРеквизитовФормы,
																	 СтруктураДанныхОЦИС.ОргОтрасль);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТабличныйДокументВыбор(Элемент, Область, СтандартнаяОбработка)
	
	Если Область.Имя = "ОргПочтАдрес" Тогда
		
		Адреса = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(СтруктураРеквизитовФормы.Организация, ДатаПодписи, "АдрФакт, АдрЮР, АдрПочт");
		
		Если ПустаяСтрока(СтрЗаменить(Адреса.АдрФакт, ",", "")) Тогда
			Адреса.АдрФакт = "";
		Иначе
			Адреса.АдрФакт = РегламентированнаяОтчетностьКлиентСервер.ПредставлениеАдресаВФормате9Запятых(Адреса.АдрФакт);
		КонецЕсли;
			
		Если ПустаяСтрока(СтрЗаменить(Адреса.АдрЮР, ",", "")) Тогда
			Адреса.АдрЮР = "";
		Иначе
			Адреса.АдрЮР = РегламентированнаяОтчетностьКлиентСервер.ПредставлениеАдресаВФормате9Запятых(Адреса.АдрЮР);
		КонецЕсли;
			
		Если ПустаяСтрока(СтрЗаменить(Адреса.АдрПочт, ",", "")) Тогда
			Адреса.АдрПочт = "";
		Иначе
			Адреса.АдрПочт = РегламентированнаяОтчетностьКлиентСервер.ПредставлениеАдресаВФормате9Запятых(Адреса.АдрПочт);
		КонецЕсли;
		
		ТаблицаВыбора.Очистить();
		
		НовСтр = ТаблицаВыбора.Добавить();
		НовСтр.Код = "Пустое значение";
		НовСтр.Название = "Адрес не указывается";
		
		Если ЗначениеЗаполнено(Адреса.АдрФакт) Тогда
			НовСтр = ТаблицаВыбора.Добавить();
			НовСтр.Код = "Фактический адрес";
			НовСтр.Название = Адреса.АдрФакт;
		КонецЕсли;

		Если ЗначениеЗаполнено(Адреса.АдрЮР) Тогда
			НовСтр = ТаблицаВыбора.Добавить();
			НовСтр.Код = "Юридический адрес";
			НовСтр.Название = Адреса.АдрЮР;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Адреса.АдрПочт) Тогда
			НовСтр = ТаблицаВыбора.Добавить();
			НовСтр.Код = "Почтовый адрес";
			НовСтр.Название = Адреса.АдрПочт;
		КонецЕсли;
			
		Если ТаблицаВыбора.Количество() = 1 Тогда
			ПоказатьПредупреждение(,НСтр("ru='В контактной информации не указаны адреса организации.'"));
			Возврат;
		КонецЕсли;

		ПоискЗначение = ?(ПустаяСтрока(Область.Значение), "Адрес не указывается", Область.Значение);

		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Заголовок",           "Выберите адрес");
		ПараметрыФормы.Вставить("ТаблицаЗначений",     ТаблицаВыбора);
		ПараметрыФормы.Вставить("СтруктураДляПоиска",  Новый Структура("Название", ПоискЗначение));
		ПараметрыФормы.Вставить("НаимКолонкиКод",      "Тип адреса");
		ПараметрыФормы.Вставить("НаимКолонкиНазвание", "Адрес");
		
		ДополнительныеПараметры = Новый Структура("Область", Область);
		ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьФормуВыбораАдресаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ОткрытьФорму("Обработка.ОбщиеОбъектыРеглОтчетности.Форма.ФормаВыбораЗначенияИзТаблицы", ПараметрыФормы, ЭтаФорма,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	ИначеЕсли Область.Имя = "ОрганизацииДляЗаполненияОтчета" И Область.Текст <> "" Тогда 
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("НачальноеЗначениеВыбора", Новый Структура("Организация", СтруктураРеквизитовФормы.Организация));
		ПараметрыФормы.Вставить("Организация", СтруктураРеквизитовФормы.ГруппаОрганизаций);
			
		ФормаВыбораОрганизаций = РегламентированнаяОтчетностьКлиент.ПолучитьОбщуюФормуПоИмени("ФормаВыбораОрганизаций", ПараметрыФормы, ЭтаФорма);
		ФормаВыбораОрганизаций.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		ФормаВыбораОрганизаций.Открыть();
	ИначеЕсли Область.Имя = "ВидОтчетности" Тогда
		СтандартнаяОбработка = Ложь;
		Периоды = Новый СписокЗначений;
		Периоды.Добавить("1", "Обычная");
		Периоды.Добавить("2", "Промежуточная при ликвидации/реорганизации");
		Периоды.Добавить("3", "Ликвидационная");
		ОписаниеОповещения = Новый ОписаниеОповещения("ВыбратьИзСпискаВидОтчетностиЗавершение", ЭтотОбъект);
		ПоказатьВыборИзСписка(ОписаниеОповещения, Периоды);
	КонецЕсли;
	
	ПараметрВводаПоля = РегламентированнаяОтчетностьКлиентСервер.НайтиСвойстваПоказателя(ЭтаФорма, Область.Имя);
	
	Если ПараметрВводаПоля <> Неопределено И ПараметрВводаПоля.ТаблицаЗначений.Количество() > 0 Тогда
		
		КодПоказателя = ПараметрВводаПоля.Показатель;
		КопироватьДанныеФормы(ПараметрВводаПоля.ТаблицаЗначений, ТЗВыбора);
		
		ВвестиПоказатель(Элемент, Область, КодПоказателя, Ложь, ПараметрВводаПоля.ТекстПриВыборе, ТЗВыбора, СтандартнаяОбработка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВвестиПоказатель(Элемент, Область, КодПоказателя, Знач ЭтоСумма, Знач ТекстВыбора, ТаблицаВыбора, СтандартнаяОбработка, КолонкаПоиска = "Код") Экспорт
	
	Если ТаблицаВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	//если показатель входит в состав многострочной части, тогда имя области не будет совпадать с переданным кодом показателя
	//необходимо это учесть
	//считаем, что в многострочной части не может быть показателя, состоящего из нескольких ячеек
	Если Область.Имя = КодПоказателя ИЛИ РегламентированнаяОтчетностьКлиентСервер.ПоказательВходитВМногострочнуюЧасть(ЭтаФорма, КодПоказателя) > 0 Тогда

		ИсходноеЗначение = ?(ТипЗнч(Область.Значение) = Тип("Строка"), СокрЛП(Область.Значение), Область.Значение);
	Иначе
		Разделитель = ?(Лев(Область.Имя, СтрДлина(КодПоказателя) + 1) = КодПоказателя + "_", "_", "");
		ИндексОбласти = 1;
		ИсходноеЗначение = "";
		Пока ЭтаФорма[ТекущийЭлемент.Имя].Области.Найти(КодПоказателя + Разделитель + Формат(ИндексОбласти, "ЧГ=")) <> Неопределено Цикл
			ИсходноеЗначение = ИсходноеЗначение + Строка(ЭтаФорма[ТекущийЭлемент.Имя].Области[КодПоказателя + Разделитель + Формат(ИндексОбласти, "ЧГ=")].Значение);
			ИндексОбласти = ИндексОбласти + 1;
		КонецЦикла;
		ИсходноеЗначение = СокрЛП(ИсходноеЗначение);
	КонецЕсли;
		
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Заголовок",          ТекстВыбора);
	ПараметрыФормы.Вставить("ТаблицаЗначений",    ТаблицаВыбора);
	ПараметрыФормы.Вставить("СтруктураДляПоиска", Новый Структура(КолонкаПоиска, ИсходноеЗначение));
	
	ДополнительныеПараметры = Новый Структура("ИндексОбласти, КодПоказателя, КолонкаПоиска, Область, Разделитель", ИндексОбласти, КодПоказателя, КолонкаПоиска, Область, Разделитель);
	ОписаниеОповещения = Новый ОписаниеОповещения("ВвестиПоказательЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ОткрытьФорму("Обработка.ОбщиеОбъектыРеглОтчетности.Форма.ФормаВыбораЗначенияИзТаблицы", ПараметрыФормы, ЭтаФорма,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ВвестиПоказательЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	ИндексОбласти = ДополнительныеПараметры.ИндексОбласти;
	КодПоказателя = ДополнительныеПараметры.КодПоказателя;
	КолонкаПоиска = ДополнительныеПараметры.КолонкаПоиска;
	Область = ДополнительныеПараметры.Область;
	Разделитель = ДополнительныеПараметры.Разделитель;
	
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	//если показатель входит в состав многострочной части, тогда имя области не будет совпадать с переданным кодом показателя
	//необходимо это учесть
	//считаем, что в многострочной части не может быть показателя, состоящего из нескольких ячеек
	Если Область.Имя = КодПоказателя ИЛИ РегламентированнаяОтчетностьКлиентСервер.ПоказательВходитВМногострочнуюЧасть(ЭтаФорма, КодПоказателя) > 0 Тогда
		Область.Значение = РезультатВыбора[КолонкаПоиска];
	Иначе
		СтрокаРезультатВыбора = Строка(РезультатВыбора[КолонкаПоиска]);
		Для Инд = СтрДлина(СтрокаРезультатВыбора) + 1 По ИндексОбласти - 1 Цикл
			СтрокаРезультатВыбора = " " + РезультатВыбора[КолонкаПоиска];
		КонецЦикла;
		Для Инд = 1 По ИндексОбласти - 1 Цикл
			ЭтаФорма[ТекущийЭлемент.Имя].Области[КодПоказателя + Разделитель + Формат(Инд, "ЧГ=")].Значение = СокрЛП(Сред(РезультатВыбора[КолонкаПоиска], Инд, 1));
		КонецЦикла;
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьИзСпискаВидОтчетностиЗавершение(ПериодЭлемент, ДополнительныеПараметры) Экспорт
	Если ПериодЭлемент <> Неопределено Тогда
		ТабличныйДокумент.Области["ВидОтчетности"].Значение = ПериодЭлемент.Представление;
		ВидСдачиОтчетности = ПериодЭлемент.Значение;
		Модифицированность = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораАдресаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Область = ДополнительныеПараметры.Область;
	
	
	УказанныйАдрес = Результат;
	
	Если УказанныйАдрес = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Модифицированность = Истина;
	
	Область.Значение = ?(УказанныйАдрес.Название = "Адрес не указывается", "", УказанныйАдрес.Название);
	
	Если УказанныйАдрес.Название = "Адрес не указывается" Тогда
		
		СтруктураРеквизитовФормы.ТипАдреса = "АдрФакт";
		СтруктураРеквизитовФормы.мАдресДляВыгрузки = "";
		
	КонецЕсли;
	
	Если УказанныйАдрес.Код = "Фактический адрес" Тогда
		
		СтруктураРеквизитовФормы.ТипАдреса = "АдрФакт";
		СтруктураРеквизитовФормы.мАдресДляВыгрузки = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(СтруктураРеквизитовФормы.Организация, ДатаПодписи, "АдрФакт").АдрФакт;
		
	КонецЕсли;
	
	Если УказанныйАдрес.Код = "Юридический адрес" Тогда
		
		СтруктураРеквизитовФормы.ТипАдреса = "АдрЮР";
		СтруктураРеквизитовФормы.мАдресДляВыгрузки = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(СтруктураРеквизитовФормы.Организация, ДатаПодписи, "АдрЮР").АдрЮР;
		
	КонецЕсли;
	
	Если УказанныйАдрес.Код = "Почтовый адрес" Тогда
		
		СтруктураРеквизитовФормы.ТипАдреса = "АдрПочт";
		СтруктураРеквизитовФормы.мАдресДляВыгрузки = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(СтруктураРеквизитовФормы.Организация, ДатаПодписи, "АдрПочт").АдрПочт;
		
	КонецЕсли;
	
	#Если ВебКлиент Тогда
		ВывестиМакетСтраницыВТабличныйДокументНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела, 1);
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура Обновить(Команда)
	
	СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация = Истина;
	
	ОбновитьСведенияОбОрганизацииВРазделахНаСервере();
	
	СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация = Ложь;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСведенияОбОрганизацииВРазделахНаСервере()
	
	СведенияОбОрганизации = Новый Структура;
	
	ЗаполнитьСведенияОбОрганизации(ЭтаФорма, , СведенияОбОрганизации);
	
	Если ТипЗнч(СведенияОбОрганизации) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Раздел Из мСвойстваРазделовДекларации.ПолучитьЭлементы() Цикл
		
		Если Раздел.МногостраничностьВРазделе
			ИЛИ Лев(Раздел.ИмяСтраницы, 6) = "Баланс" Тогда
			Продолжить;
		КонецЕсли;
		
		ДанныеРаздела = ЭтаФорма["СтруктураДанных" + Раздел.ИмяСтраницы];
		
		Если ДанныеРаздела.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Для каждого Пок Из СведенияОбОрганизации Цикл
			Если ДанныеРаздела.Свойство(Пок.Ключ) Тогда
				Если Пок.Ключ = "ОргКодОКПО" Тогда
					Если СтруктураРеквизитовФормы.ИП Тогда
						ДанныеРаздела.Вставить(Пок.Ключ, "");
					Иначе
						ДанныеРаздела.Вставить(Пок.Ключ, Пок.Значение);
					КонецЕсли;
				Иначе
					ДанныеРаздела.Вставить(Пок.Ключ, Пок.Значение);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайла(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузитьИзФайлаЗавершение", ЭтотОбъект);
	
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередЗагрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура Выгрузить(Команда)
	
	Если СтруктураРеквизитовФормы.ИП Тогда
		
		РегламентированнаяОтчетностьКлиент.ПоказатьПредупреждениеОНевозможностиВыгрузкиОтчета();
		
		Возврат;
		
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьЗавершение", ЭтотОбъект);

	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайлаЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ЗагрузитьИзФайлаОтчет();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайлаОтчет() Экспорт
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузитьИзФайлаОтчетЗавершение", ЭтотОбъект);
	
	Если Модифицированность Тогда
		СохранитьНаКлиенте(,ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайлаОтчетЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	РегламентированнаяОтчетностьЗагрузкаКлиент.ЗагрузитьИзФайлаОтчет(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Функция ЗагрузкаОтчетаИзФайла(ДанныеДляЗагрузки) Экспорт
	
	Если Модифицированность Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = СтрШаблон(НСтр("ru='Отчет ""%1"" не сохранен.'"), ЭтотОбъект.Заголовок);
		Сообщение.Сообщить();
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ ЗагрузкаОтчетаИзФайлаНаСервере(ДанныеДляЗагрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
		
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция ЗагрузкаОтчетаИзФайлаНаСервере(ДанныеДляЗагрузки)
	
	СформироватьСтруктуруПоказателей();
	
	ПараметрыОтчета = СформироватьСтруктуруПараметров();
	
	ПараметрыОтчета.Вставить("ИменаВычитаемыхПоказателей", ПолучитьСписокВычитаемыхПоказателей());
	
	ДеревоДляЗагрузки = ИзвлечьСтруктуруXML();
	
	Если НЕ РегламентированнаяОтчетностьЗагрузка.ЗагрузкаОтчетаИзФайла(
		ЭтотОбъект, ПараметрыОтчета, ДанныеДляЗагрузки, ДеревоДляЗагрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура ВыгрузитьЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ВыгрузитьОтчет();
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузку(Команда)
	
	Если СтруктураРеквизитовФормы.ИП Тогда
		
		РегламентированнаяОтчетностьКлиент.ПоказатьПредупреждениеОНевозможностиВыгрузкиОтчета();
		
		Возврат;
		
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьВыгрузкуЗавершение", ЭтотОбъект);

	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
		
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузкуЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПроверитьВыгрузкуОтчета();
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузкуОтчета()
	
	Если НЕ ЗначениеЗаполнено(СтруктураРеквизитовФормы.Организация) Тогда
		
		Сообщение = Новый СообщениеПользователю;
		
		Сообщение.Текст = НСтр("ru='Организация не выбрана! Выгрузка невозможна.'");
		
		Сообщение.Сообщить();
		
		Возврат;
		
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьВыгрузкуОтчетаЗавершение", ЭтотОбъект);
	
	Если Модифицированность Тогда
		СохранитьНаКлиенте(,ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузкуОтчетаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ФормаВыгрузкиРеглОтчета = ПолучитьФорму("Документ.ВыгрузкаРегламентированныхОтчетов.Форма.ФормаДокумента", , ЭтаФорма);
	
	СпДокОсн = Новый СписокЗначений;
	СпДокОсн.Добавить(СтруктураРеквизитовФормы.мСохраненныйДок);
	
	ФормаВыгрузкиРеглОтчета.Проверить(СпДокОсн);
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьОтчет(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОчиститьОтчетЗавершение", ЭтотОбъект);
	ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Внимание! Будут очищены все показатели отчета.%1Продолжить операцию?'"), Символы.ПС);
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьОтчетЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		
		ОчиститьНаСервере();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТекущуюСтраницу(Команда)
	
	ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Внимание! Будут очищены все показатели текущего отчета.%1Продолжить операцию?'"), Символы.ПС);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОчиститьТекущуюСтраницуЗавершение", ЭтотОбъект);
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТекущуюСтраницуЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.Нет Тогда
		
		ОчиститьНаСервере(Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
		
		Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Баланс" Тогда
			
			НомерКорректировки = 0;
			СтруктураРеквизитовФормы.ВидДокумента = 0;
			ТабличныйДокумент.Области.НомерКорректировки.Значение = "0";
			ТабличныйДокумент.Области.ВидОтчетности.Значение = "Обычная";
			ВидСдачиОтчетности = 1;

			Если Элементы.Найти("ДатаПодписиОтчета") = Неопределено Тогда
				Область = ТабличныйДокумент.Области.Найти("ДатаПодписиОтчета");
				Если НЕ Область = Неопределено Тогда
					ДатаПодписи = "        ";
					ТабличныйДокумент.Области.ДатаПодписиОтчета.Значение = ДатаПодписи;
					СтруктураДанныхОФР.Вставить("ДатаПодписиОтчета",    ДатаПодписи);
					СтруктураДанныхОЦИС.Вставить("ДатаПодписиОтчета",   ДатаПодписи);
					СтруктураДанныхБаланс.Вставить("ДатаПодписиОтчета", ДатаПодписи);
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если СтрНайти(Заголовок, СтруктураРеквизитовФормы.СтрПериодОтчета) = 0 Тогда
		Заголовок = Заголовок + " за " + СтруктураРеквизитовФормы.СтрПериодОтчета;
	КонецЕсли;
	
	ОргСтр = " (" + СтруктураРеквизитовФормы.НаимОрганизации + ")";
	Если СтрНайти(Заголовок, ОргСтр) = 0 Тогда
		Заголовок = Заголовок + ОргСтр;
	КонецЕсли;
	
	Заголовок = Заголовок + ?(СтрНайти(ЭтаФорма.ИмяФормы, "Внешний") > 0, " - внешний отчет", "");
	
	ПодключитьОбработчикОжидания("ВыполнитьПроверкуПередОткрытием", 0.1, Истина);

КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПроверкуПередОткрытием()
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПриОткрытииЗавершение", ЭтотОбъект);
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередОткрытиемФормыРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытииЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Модифицированность = Ложь;
		Закрыть();
		Возврат;
	КонецЕсли;
	
	РезультатЗапускаАвтозаполнения = СтруктураРеквизитовФормы.РезультатЗапускаАвтозаполненияПриСоздании;
	
	Если РезультатЗапускаАвтозаполнения<> Неопределено И РезультатЗапускаАвтозаполнения.Статус = "Выполняется" Тогда
		ОповещениеОЗавершении = Новый ОписаниеОповещения("ОбработатьЗавершениеАвтозаполненияВФоне", ЭтотОбъект);
		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтаФорма);
		ДлительныеОперацииКлиент.ОжидатьЗавершение(РезультатЗапускаАвтозаполнения, ОповещениеОЗавершении, ПараметрыОжидания);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	РегламентированнаяОтчетностьКлиент.ПередЗакрытиемРегламентированногоОтчета(ЭтаФорма, Отказ, СтандартнаяОбработка, ЗавершениеРаботы, ТекстПредупреждения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ЗавершениеРаботы Тогда
				
		Возврат;
		
	КонецЕсли;
	
	ПриЗакрытииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПриЗакрытииНаСервере()
			
	РегламентированнаяОтчетность.ПриЗакрытииРегламентированногоОтчета(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуНастроек(Команда)
	
	ОткрытьФормуВыбораСтраниц("ВыбратьДляНастройки");
	
КонецПроцедуры

&НаКлиенте
Процедура Печатать(Команда)
	
	СформироватьНастройкиФормыВыбораПечати();
		
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ПараметрыПечати", НастройкиФормыВыбораПечати);
		
	ФормаВыбора = ПолучитьФорму("Отчет.РегламентированныйОтчетБухОтчетностьМП.Форма.ВыборПечатнойФормы", ПараметрыФормы);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПечататьЗавершение", ЭтотОбъект);
	ФормаВыбора.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
	ФормаВыбора.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	ФормаВыбора.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ПечататьЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		НастройкиФормыВыбораПечати = Результат;
		Если Результат.АктивныйПункт = 1 Тогда
			РегламентированнаяОтчетностьКлиент.ВывестиМашиночитаемуюФорму(ЭтаФорма, "ПоказатьСДвухмернымШтрихкодомPDF417");
		ИначеЕсли Результат.АктивныйПункт = 2 Тогда
			Если Результат.ВключатьКодыСтрок Тогда
				ПечататьИзФормы("ПоказатьБланк");
			Иначе
				ПечататьИзФормы("ПоказатьБланкБезКодов");
			КонецЕсли;
		ИначеЕсли Результат.АктивныйПункт = 3 Тогда
			ПечататьИзФормы("ПоказатьБланкКНД0710097");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПечататьИзФормы(ВидПечати)
	
	Отказ = Ложь;
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("ВидПечати", ВидПечати);
	ОписаниеОповещения = Новый ОписаниеОповещения("ПечататьИзФормыЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередПечатьюРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПечататьИзФормыЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;

	ВидПечати = ДополнительныеПараметры.ВидПечати;
		
	Печать(ВидПечати);
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьСтруктуруЗаголовковОтчетов()
	
	СтруктураРеквизитовФормы.ЗаголовкиОтчетов = Новый Соответствие;
	
	КонецПредыдущегоГода = КонецГода(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, -12));
	КонецГодаПредшествующегоПредыдущему = КонецГода(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, -24));
	
	ГодОтчета = Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ = 'гггг'");
	ГодПредыдущий = Формат(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, -12), "ДФ = 'гггг'");
	
	СтруктураРеквизитовФормы.ЗаголовкиОтчетов.Вставить("ЗаПериодОтчетногоГода", "за " + ГодОтчета + "г.");
	СтруктураРеквизитовФормы.ЗаголовкиОтчетов.Вставить("ЗаПериодПредыдущегоГода", "за " + ГодПредыдущий + "г.");
	
	СтруктураРеквизитовФормы.ЗаголовкиОтчетов.Вставить("НаОтчетнуюДату", "На " + Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДЛФ=DD"));
	СтруктураРеквизитовФормы.ЗаголовкиОтчетов.Вставить("НаКонецПредыдущегоГода", "На " + Формат(КонецПредыдущегоГода, "ДЛФ=DD"));
	СтруктураРеквизитовФормы.ЗаголовкиОтчетов.Вставить("НаКонецГодаПредшествующегоПредыдущему", "На " + Формат(КонецГодаПредшествующегоПредыдущему, "ДЛФ=DD"));
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьСвойстваРазделовОтчета()
	
	мСвойстваРазделовДекларации.ПолучитьЭлементы().Очистить();

	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	
	СтрокаУровня1.ИмяСтраницы                          = "Баланс";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Истина;
	СтрокаУровня1.МногострочностьВРазделе.Добавить();
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	
	СтрокаУровня1.ИмяСтраницы                          = "ОФР";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Истина;
	СтрокаУровня1.МногострочностьВРазделе.Добавить();
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
		
	СтрокаУровня1.ИмяСтраницы                          = "ОЦИС";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Истина;
	СтрокаУровня1.МногострочностьВРазделе.Добавить();
			
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтруктуруЗависимыхЯчеекДляАвторасчета()
	
	// БАЛАНС
	//
	СтруктураЗависимыхЯчеекДляАвторасчета = Новый Структура;
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000010000504", "П000010000104;П000010000204;П000010000304;П000010000404");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000010000505", "П000010000105;П000010000205;П000010000305;П000010000405");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000010000506", "П000010000106;П000010000206;П000010000306;П000010000406");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000010001104", "П000010000604;П000010000704;П000010000804;П000010000904;П000010001004");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000010001105", "П000010000605;П000010000705;П000010000805;П000010000905;П000010001005");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000010001106", "П000010000606;П000010000706;П000010000806;П000010000906;П000010001006");
	
	// ОТЧЕТ О ФИНАНСОВЫХ РЕЗУЛЬТАТАХ
	//
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000020000703", "П000020000103;П000020000203;П000020000303;П000020000403;П000020000503;П000020000603");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000020000704", "П000020000104;П000020000204;П000020000304;П000020000404;П000020000504;П000020000604");
	
	// ОТЧЕТ О ЦЕЛЕВОМ ИСПОЛЬЗОВАНИИ СРЕДСТВ
	//
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100640003", "П000100610003;П000100621003;П000100624003;П000100625003;П000100631003;П000100632003;П000100633003;П000100635003");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100640004", "П000100610004;П000100621004;П000100624004;П000100625004;П000100631004;П000100632004;П000100633004;П000100635004");
		         	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНачальныеНастройки() Экспорт
	
	УстановитьВидСдачиОтчетности(1);
	ИнициализироватьНастройкиСтраниц();
	СформироватьСоставПоказателей();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидСдачиОтчетности(КодВидаСдачиОтчетности = 1)
		
	Если КодВидаСдачиОтчетности <> Неопределено Тогда
		Если НЕ (КодВидаСдачиОтчетности = 2 ИЛИ КодВидаСдачиОтчетности = 3) Тогда
			КодВидаСдачиОтчетности = 1;
		КонецЕсли;
	Иначе
		КодВидаСдачиОтчетности = 1;
	КонецЕсли;
	
	ВидСдачиОтчетности = КодВидаСдачиОтчетности;
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьНастройкиСтраниц()
	
	мДеревоСтраницОтчета.ПолучитьЭлементы().Очистить();
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Баланс";
	СтрокаУровня1.Представление            = "Бухгалтерский баланс";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	СтрокаУровня1.АвторасчетПоказателей    = Истина;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "ОФР";
	СтрокаУровня1.Представление            = "Отчет о финансовых" + Символы.ПС + "результатах";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 0;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	СтрокаУровня1.АвторасчетПоказателей    = Истина;
		
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "ОЦИС";
	СтрокаУровня1.Представление            = "Отчет о целевом" + Символы.ПС + "использовании средств";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	СтрокаУровня1.АвторасчетПоказателей    = Истина;
		
КонецПроцедуры

&НаСервере
Процедура СформироватьСоставПоказателей()
	
	МакетСоставаПоказателей = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(ИмяМакетаСоставаПоказателей());

	Для Каждого Отчет Из МакетСоставаПоказателей.Области Цикл
		
		Если Отчет.ТипОбласти <> ТипОбластиЯчеекТабличногоДокумента.Строки Тогда
			Продолжить;
		КонецЕсли;
		
		ИмяСтраницы = Отчет.Имя;
		
		ЭтаФорма["ТаблицаВариантыЗаполнения" + ИмяСтраницы].Добавить();
		                      		
		Для Ном = Отчет.Верх По Отчет.Низ Цикл	
			// перебираем строки макета
			
			// Код показателя (по составу показателей) определяется по первой колонке макета
			КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
			ИмяПоказателя = КодПоказателя;
			
			Если КодПоказателя = "===" Тогда         // признак конечной строки
				Прервать;
			КонецЕсли;
			
			Если Лев(КодПоказателя, 2) = "//" Тогда  // пропускаем комментарии
				Продолжить;
			КонецЕсли;
			
			// код показателя по форме отчете (имя ячейки в полях табличного документа формы)
			КодПоказателяПоФорме = СокрЛП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
			// признак многострочности определяется по третьей колонке макета
			ПризнМногострочность = СокрЛП(МакетСоставаПоказателей.Область(Ном, 3).Текст);
			// по четвертой колонке определяется тип данных реквизита
			ТипДанныхРеквизита   = СокрЛП(МакетСоставаПоказателей.Область(Ном, 4).Текст);
			// по колонке 5 определяется исходное количество строк многострочного раздела
			стрКолСтрокИсходный  = СокрЛП(МакетСоставаПоказателей.Область(Ном, 5).Текст);
			// вариант заполнения ячейки определяется по колонке 6 макета
			стрВариантЗаполнения = РегламентированнаяОтчетность.ПолучитьВариантЗаполненияПоказателяРегОтчета(МакетСоставаПоказателей, Ном);
			
			чКолСтрокИсходный    = ? (ПустаяСтрока(стрКолСтрокИсходный),  0, Число(стрКолСтрокИсходный));
			чВариантЗаполнения   = ? (ПустаяСтрока(стрВариантЗаполнения), 0, Число(стрВариантЗаполнения));
			
			Если ИмяСтраницы = "ОЦИС" И чВариантЗаполнения = 3 Тогда
				чВариантЗаполнения = 0;
			КонецЕсли;
						
			// формируем таблицу значений, содержащей состав показателей отчета
			НоваяСтрока = мТаблицаСоставПоказателей.Добавить();
			НоваяСтрока.ИмяПоляТаблДокумента   = ИмяСтраницы;
			НоваяСтрока.КодПоказателяПоСоставу = КодПоказателя;
			НоваяСтрока.КодПоказателяПоФорме   = КодПоказателяПоФорме;
			НоваяСтрока.ПризнМногострочности   = ПризнМногострочность;
			НоваяСтрока.ТипДанныхПоказателя    = ТипДанныхРеквизита;
			
			Если чВариантЗаполнения <> 0 Тогда
				// Если в колонке 6 задан вариант заполнения показателя, 
				// то его значение может определяться по данным ИБ.
				// Дополняем таблицу значений вариантов заполнения
				НоваяСтрока = ЭтаФорма["ТаблицаВариантыЗаполнения" + ИмяСтраницы][0].ТаблицаВариантовЗаполнения.Добавить();
				НоваяСтрока.КодПоказателя      = ? (Не ПустаяСтрока(КодПоказателяПоФорме), КодПоказателяПоФорме, КодПоказателя);
				НоваяСтрока.ВариантЗаполнения  = чВариантЗаполнения;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если ЭтаФорма["ТаблицаВариантыЗаполнения" + ИмяСтраницы][0].ТаблицаВариантовЗаполнения.Количество() > 0 Тогда			
			// имеются автоматически заполняемые ячейки
			
			// Создаем структуру, содержащей варианты заполнения показателей отчета.
			//
			// В качестве ключа используется имя страницы основной панели формы, содержащей
			//   табличный документ с автоматически заполняемыми показателями.
			// В качестве значения принимаем Массив из таблицы значений - вариантов заполнения
			//   показателей по каждой странице многостраничного раздела.
			//
			мСтруктураВариантыЗаполнения.Вставить(ИмяСтраницы, ИмяСтраницы);
			мСтруктураВариантыЗаполненияЭталон.Вставить(ИмяСтраницы, ИмяСтраницы);
			
		Конецесли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьДеревоРазделовОтчетаНаСервере() Экспорт
	
	СформироватьДеревоРазделовОтчета(ЭтаФорма);
			
КонецПроцедуры

&НаКлиенте
Процедура СформироватьДеревоРазделовОтчетаНаКлиенте() Экспорт
	
	СформироватьДеревоРазделовОтчета(ЭтаФорма);
			
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СформироватьДеревоРазделовОтчета(Форма)
	
	Форма["РазделыОтчета"].ПолучитьЭлементы().Очистить();
	
	Для Каждого ЭлементДереваСтраницОтчета Из Форма["мДеревоСтраницОтчета"].ПолучитьЭлементы() Цикл
		
		Если ЭлементДереваСтраницОтчета.ПоказатьСтраницу = 1 Тогда
			
			ЭлементРазделовОтчета = Форма["РазделыОтчета"].ПолучитьЭлементы().Добавить();
			ЭлементРазделовОтчета.КолонкаРазделыОтчета         = ЭлементДереваСтраницОтчета.Представление;
			ЭлементРазделовОтчета.КолонкаРазделыОтчетаСокрНаим = ЭлементДереваСтраницОтчета.ИмяСтраницы;
			ЭлементРазделовОтчета.ИндексКартинки               = 1;
			ЭлементРазделовОтчета.РазделМногостраничный        = Ложь;
			ЭлементРазделовОтчета.РазделМногострочный          = Ложь;
				
		КонецЕсли;
				
	КонецЦикла;
			
КонецПроцедуры

&НаСервере
Процедура ВосстановитьСохраненныеДанные()
	
	Перем ДанныеВариановАвтоЗаполнения;
	Перем ПоказателиОтчета;
	Перем ВерсияФормы;
	Перем ТаблицаРасшифровки;
	Перем Авторасчет;
	Перем СохраненнаяСтруктураМногострочныхЧастей;
		
	// В случае, если форма была скопирована, то проверим, не изменилась ли организация.
	Если СтруктураРеквизитовФормы.Организация <> СтруктураРеквизитовФормы.мСохраненныйДок.Организация
	   И СтруктураРеквизитовФормы.Организация <> РегламентированнаяОтчетностьКлиентСервер.ПустоеЗначениеТипа("СправочникСсылка.Организации")
	   И СтруктураРеквизитовФормы.Организация <> Неопределено Тогда
		СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация = Истина;
	Иначе
		СтруктураРеквизитовФормы.Организация = СтруктураРеквизитовФормы.мСохраненныйДок.Организация;
	КонецЕсли;

	ДатаПодписи                                       = СтруктураРеквизитовФормы.мСохраненныйДок.ДатаПодписи;
	СтруктураРеквизитовФормы.ЕдиницаИзмерения         = СтруктураРеквизитовФормы.мСохраненныйДок.ЕдиницаИзмерения;
	СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = СтруктураРеквизитовФормы.мСохраненныйДок.ТочностьЕдиницыИзмерения;
	Комментарий      								  = СтруктураРеквизитовФормы.мСохраненныйДок.Комментарий;

	СписокСохранения = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить();
	
	ДеревоНастройкиСтраниц = СтруктураРеквизитовФормы.мСохраненныйДок.ДеревоНастройкиСтраниц.Получить();
	ЗначениеВРеквизитФормы(ДеревоНастройкиСтраниц.Скопировать(), "мДеревоСтраницОтчета");
	
	// восстанавливаем сохраненные данные вариантов автозаполнения ячеек
	Если СписокСохранения.Свойство("ДанныеВариантовАвтоЗаполнения", ДанныеВариановАвтоЗаполнения) Тогда
		
		Если НЕ ДанныеВариановАвтоЗаполнения = Неопределено Тогда
			
			мСтруктураВариантыЗаполнения.Очистить();
			
			Для Каждого ЭлементСтруктуры Из ДанныеВариановАвтоЗаполнения Цикл
				
				мСтруктураВариантыЗаполнения.Вставить(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Ключ);
				
				ЭтаФорма["ТаблицаВариантыЗаполнения" + ЭлементСтруктуры.Ключ].Очистить();
				
				Для Каждого ЭлементМассива Из ЭлементСтруктуры.Значение Цикл
										
					ТаблВарЗаполнения = ЭтаФорма["ТаблицаВариантыЗаполнения" + ЭлементСтруктуры.Ключ].Добавить().ТаблицаВариантовЗаполнения;
										
					ЗначениеВДанныеФормы(ЭлементМассива, ТаблВарЗаполнения);
					
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	СписокСохранения.Свойство("СохранятьРасшифровку", СтруктураРеквизитовФормы.мСохранятьРасшифровку);
	Если СтруктураРеквизитовФормы.мСохранятьРасшифровку = Неопределено Тогда
		СтруктураРеквизитовФормы.мСохранятьРасшифровку = Истина;
	КонецЕсли;
	
	СписокСохранения.Свойство("Расшифровка", ТаблицаРасшифровки);
	
	Если ТипЗнч(ТаблицаРасшифровки) = Тип("ТаблицаЗначений") Тогда
		
		Если ТаблицаРасшифровки.Колонки.Найти("НомСтроки") <> Неопределено Тогда
			
			ИмяПоказателя     = ТаблицаРасшифровки.Колонки.Найти("ИмяПоказателя");
			ИмяПоказателя.Имя = "НаименованиеПоказателя";
			
			ИмяЯчейки     = ТаблицаРасшифровки.Колонки.Найти("ИмяЯчейки");
			ИмяЯчейки.Имя = "ИмяПоказателя";
			
			Раздел     = ТаблицаРасшифровки.Колонки.Найти("Раздел");
			Раздел.Имя = "ИмяРаздела";
			
			ИмяСлагаемого     = ТаблицаРасшифровки.Колонки.Найти("ИмяСлагаемого");
			ИмяСлагаемого.Имя = "НаименованиеСлагаемого";
			
			ТаблицаРасшифровки.Колонки.Добавить("ДополнительныеПараметры");
			
			Для Каждого Элемент Из ТаблицаРасшифровки Цикл
				
				Если ЗначениеЗаполнено(Элемент.КодСчета) Тогда
					Элемент.НаименованиеСлагаемого = Элемент.НаименованиеСлагаемого + Элемент.КодСчета.Код;
				КонецЕсли;
				
				ДопПараметры = Новый Структура;
				
				Если ЗначениеЗаполнено(Элемент.Субконто1) Тогда
					ДопПараметры.Вставить("Субконто1", Новый Структура("ВидСубконто,ЗначениеСубконто", Элемент.КодСчета.ВидыСубконто[0].ВидСубконто, Элемент.Субконто1));
				КонецЕсли;
				
				Если ЗначениеЗаполнено(Элемент.Субконто2) Тогда
					ДопПараметры.Вставить("Субконто2", Новый Структура("ВидСубконто,ЗначениеСубконто", Элемент.КодСчета.ВидыСубконто[1].ВидСубконто, Элемент.Субконто2));
				КонецЕсли;
				
				Если ЗначениеЗаполнено(Элемент.Субконто3) Тогда
					ДопПараметры.Вставить("Субконто3", Новый Структура("ВидСубконто,ЗначениеСубконто", Элемент.КодСчета.ВидыСубконто[2].ВидСубконто, Элемент.Субконто3));
				КонецЕсли;
				
				Элемент.ДополнительныеПараметры = ДопПараметры;
				
			КонецЦикла;
									
			ТаблицаРасшифровки = ТаблицаРасшифровки.Скопировать(, "ИмяПоказателя, НаименованиеПоказателя, ЗнакОперации, НаименованиеСлагаемого, Сумма, ИмяРаздела, ДополнительныеПараметры");
			
		КонецЕсли;
		
		СтруктураРеквизитовФормы.АдресВременногоХранилищаРасшифровки = ПоместитьВоВременноеХранилище(ТаблицаРасшифровки, УникальныйИдентификатор);
		Элементы.Расшифровать.Доступность = Истина;
		Элементы.ТабличныйДокументКонтекстноеМенюРасшифровать.Доступность = Истина;
		
	КонецЕсли;
	
	// восстанавливаем флажок проверки соотношения показателей при печати и выгрузке
	СписокСохранения.Свойство("мПроверятьСоотношенияПриПечатиИВыгрузки", СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки);
	Если СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки = Неопределено Тогда
		СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки = Ложь;
	КонецЕсли;
	
	СписокСохранения.Свойство("ВидСдачиОтчетности", ВидСдачиОтчетности);
	СписокСохранения.Свойство("ОтчетностьВРосстат", ОтчетностьВРосстат);
	УстановитьВидСдачиОтчетности(ВидСдачиОтчетности);
	
	СписокСохранения.Свойство("СтруктураМногострочныхЧастей", СохраненнаяСтруктураМногострочныхЧастей);
	
	Если СохраненнаяСтруктураМногострочныхЧастей <> Неопределено Тогда
		
		Для Каждого ЭлементСтруктуры Из СохраненнаяСтруктураМногострочныхЧастей Цикл
			    								
			ТаблЗнач = ЭлементСтруктуры.Значение.Состав;
				
			СтруктураЗнач = Новый Структура;
			МассивЗнач    = Новый Массив;
				
			Для Каждого СтрТаблЗнач Из ТаблЗнач Цикл
					
				СтруктураЗнач.Очистить();
					
				Для Каждого Колонка Из ТаблЗнач.Колонки Цикл
						
					СтруктураЗнач.Вставить(Колонка.Имя, СтрТаблЗнач[Колонка.Имя]);
						
				КонецЦикла;
					
				МассивЗнач.Добавить(СтруктураЗнач);
					
			КонецЦикла;
				
			ЭлементСтруктуры.Значение.Состав = МассивЗнач;
				
			ЭлементСтруктуры.Значение.ИмяПоляТабличногоДокумента = СтрЗаменить(ЭлементСтруктуры.Значение.ИмяПоляТабличногоДокумента, "ПолеТабличногоДокумента", "");
			
		КонецЦикла;
		
		СтруктураМногострочныхЧастей = СохраненнаяСтруктураМногострочныхЧастей;
		
	КонецЕсли;
	
	// восстанавливаем флажок проверки соотношения показателей при печати и выгрузке
	СписокСохранения.Свойство("мПроверятьСоотношенияПриПечатиИВыгрузки", СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки);
	Если СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки = Неопределено Тогда
		СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки = Ложь;
	КонецЕсли;
			
	СписокСохранения.Свойство("ГруппаОрганизаций", СтруктураРеквизитовФормы.ГруппаОрганизаций);
	Если СтруктураРеквизитовФормы.ГруппаОрганизаций = Неопределено Тогда
		СтруктураРеквизитовФормы.ГруппаОрганизаций = Новый СписокЗначений;
	КонецЕсли;
	
	СписокСохранения.Свойство("ТипАдреса", СтруктураРеквизитовФормы.ТипАдреса);
	Если СтруктураРеквизитовФормы.ТипАдреса = Неопределено ИЛИ ПустаяСтрока(СтруктураРеквизитовФормы.ТипАдреса) ИЛИ СтрНайти("АдрФакт, АдрЮР, АдрПочт", СтруктураРеквизитовФормы.ТипАдреса) = 0 Тогда
		СтруктураРеквизитовФормы.ТипАдреса = ТипАдресаПоУмолчанию();
	КонецЕсли;
	
	СписокСохранения.Свойство("АдресВФормате9Запятых", СтруктураРеквизитовФормы.АдресВФормате9Запятых);
	Если СтруктураРеквизитовФормы.АдресВФормате9Запятых = Неопределено Тогда
		
		СтруктураРеквизитовФормы.АдресВФормате9Запятых = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(СтруктураРеквизитовФормы.Организация, ДатаПодписи, СтруктураРеквизитовФормы.ТипАдреса)[СтруктураРеквизитовФормы.ТипАдреса];
		
	КонецЕсли;
	
	СписокСохранения.Свойство("АвторасчетПоказателей", Авторасчет);
	Если НЕ Авторасчет = Неопределено Тогда
		СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет = Авторасчет;
	КонецЕсли;
	
	// восстановим сохраненные данные редактируемых ячеек
	СписокСохранения.Свойство( "ПоказателиОтчета", ПоказателиОтчета);
	
	Если СписокСохранения.Свойство("ВерсияФормы", ВерсияФормы) Тогда
		Если ВерсияФормы <> СтруктураРеквизитовФормы.мВерсияФормы Тогда
			СформироватьСоставПоказателей();
		КонецЕсли;
	КонецЕсли;
	
	СписокСохранения.Свойство("НастройкиФормыВыбораПечати", НастройкиФормыВыбораПечати);
	
	СформироватьДеревоРазделовОтчетаНаСервере();
	
	Префикс = "ПолеТабличногоДокумента";
	
	Для Каждого Раздел Из мСвойстваРазделовДекларации.ПолучитьЭлементы() Цикл	
		
		Если НЕ Раздел.МногостраничностьВРазделе Тогда			
			ЭтаФорма["СтруктураДанных" + Раздел.ИмяСтраницы] = ПоказателиОтчета[Префикс + Раздел.ИмяСтраницы];
		КонецЕсли;
		
	КонецЦикла;
	
	ИмяТекРаздела = "Баланс";
	
	Для Каждого ЭлСтруктуры Из ЭтаФорма["СтруктураДанных" + ИмяТекРаздела] Цикл
		Попытка
			ТабличныйДокумент.Области[ЭлСтруктуры.Ключ].Значение = ЭлСтруктуры.Значение;
		Исключение
		КонецПопытки;
	КонецЦикла;
	
	СписокСохранения.Свойство("СпособСозданияОрганизации", СтруктураРеквизитовФормы.СпособСозданияОрганизации);
	
	СписокСохранения.Свойство("ДатаСозданияОрганизации", СтруктураРеквизитовФормы.ДатаСозданияОрганизации);
	
	СписокСохранения.Свойство("ДатаАктуальностиДанных", СтруктураРеквизитовФормы.ДатаАктуальностиДанных);
	
	СписокСохранения.Свойство("ПроверкаАктуализацииДанныхПредупреждение", Элементы.ПроверкаАктуализацииДанныхПредупреждение.Заголовок);
		
	Если ЗначениеЗаполнено(Элементы.ПроверкаАктуализацииДанныхПредупреждение.Заголовок) Тогда
		
		Элементы.ПанельПроверкиАктуальностиДанных.Видимость = Истина;
		
	КонецЕсли;
	
	РегламентированнаяОтчетность.ОперацииПриВосстановленииРегламентированногоОтчета(ЭтаФорма);
	
	УстановитьФорматВыводаНаСервере(ИмяТекРаздела);
	
	КопироватьДанныеФормы(мДеревоСтраницОтчета, мДеревоВыбранныхСтраниц);
	
	РасчетНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьФорматВыводаНаСервере(НаимРаздела)
	
	УстановитьФорматВывода(ЭтаФорма, НаимРаздела);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьФорматВывода(Форма, НаимРаздела)
	Перем СтруктураГруппы;
	
	Если Форма.СтруктураРеквизитовФормы.ЕдиницаИзмерения = Форма.ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1 Тогда
		Форма.СтруктураРеквизитовФормы.ДелительПредставления = 1;
		Форма.СтруктураРеквизитовФормы.СтрокаФорматаПредставления = "ЧЦ = 15; ЧДЦ = " + Форма.СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧО=0; ЧС = 0";

	ИначеЕсли Форма.СтруктураРеквизитовФормы.ЕдиницаИзмерения = Форма.ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1000 Тогда
		Форма.СтруктураРеквизитовФормы.ДелительПредставления = 1000;
		Форма.СтруктураРеквизитовФормы.СтрокаФорматаПредставления = "ЧЦ = 15; ЧДЦ = " + Форма.СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧО=0; ЧС = 3";

	ИначеЕсли Форма.СтруктураРеквизитовФормы.ЕдиницаИзмерения = Форма.ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1000000 Тогда
		Форма.СтруктураРеквизитовФормы.ДелительПредставления = 1000000;
		Форма.СтруктураРеквизитовФормы.СтрокаФорматаПредставления = "ЧЦ = 15; ЧДЦ = " + Форма.СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧО=0; ЧС = 6";

	КонецЕсли;
	
	ПоказатьКодЕдиницыИзмерения(Форма);
	
	Для Каждого СтрПоказатели Из Форма.мТаблицаСоставПоказателей Цикл

		Если НЕ НаимРаздела = СтрПоказатели.ИмяПоляТаблДокумента Тогда
			Продолжить;
		КонецЕсли;
		
		КодПоказателя        = СокрП(СтрПоказатели.КодПоказателяПоСоставу);
		ПризнМногострочность = СокрП(СтрПоказатели.ПризнМногострочности);

		Если КодПоказателя = "===" Тогда
			Прервать;
		КонецЕсли;

		Если (Лев(КодПоказателя, 2) = "//") ИЛИ (КодПоказателя = "###") Тогда
			Продолжить;
		КонецЕсли;

		КодПоказателяВФорме = СокрП(СтрПоказатели.КодПоказателяПоФорме);

		ИмяПоказателя = КодПоказателя;
		Если Не ПустаяСтрока(КодПоказателяВФорме) Тогда
			ИмяПоказателя = КодПоказателяВФорме;
		КонецЕсли;

		ТипДанныхПоказателя = СокрП(СтрПоказатели.ТипДанныхПоказателя);

		Если ТипДанныхПоказателя = "Е" Тогда

			ТекТабличноеПоле = Форма.ТабличныйДокумент;

			Если ПризнМногострочность <> "/" Тогда
				ФорматируемаяОбласть = ТекТабличноеПоле.Области[ИмяПоказателя];
				ФорматируемаяОбласть.Формат = Форма.СтруктураРеквизитовФормы.СтрокаФорматаПредставления;
			Иначе
				УстановитьФорматВыводаМногострочногоПоказателя(Форма, ТекТабличноеПоле, ИмяПоказателя);
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ТипАдресаПоУмолчанию()
	
	Результат = "АдрФакт";
	
	Адреса = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(СтруктураРеквизитовФормы.Организация, ДатаПодписи, "АдрФакт, АдрЮР, АдрПочт");
	
	Если ПустаяСтрока(СтрЗаменить(Адреса.АдрФакт, ",", "")) Тогда
		Адреса.АдрФакт = "";
	Иначе
		Адреса.АдрФакт = РегламентированнаяОтчетностьКлиентСервер.ПредставлениеАдресаВФормате9Запятых(Адреса.АдрФакт);
	КонецЕсли;
	
	Если ПустаяСтрока(СтрЗаменить(Адреса.АдрЮР, ",", "")) Тогда
		Адреса.АдрЮР = "";
	Иначе
		Адреса.АдрЮР = РегламентированнаяОтчетностьКлиентСервер.ПредставлениеАдресаВФормате9Запятых(Адреса.АдрЮР);
	КонецЕсли;
	
	Если ПустаяСтрока(СтрЗаменить(Адреса.АдрПочт, ",", "")) Тогда
		Адреса.АдрПочт = "";
	Иначе
		Адреса.АдрПочт = РегламентированнаяОтчетностьКлиентСервер.ПредставлениеАдресаВФормате9Запятых(Адреса.АдрПочт);
	КонецЕсли;
		
	Если НЕ ПустаяСтрока(Адреса.АдрФакт) Тогда
		Результат = "АдрФакт";
	ИначеЕсли НЕ ПустаяСтрока(Адреса.АдрЮР) Тогда
		Результат = "АдрЮР";
	ИначеЕсли НЕ ПустаяСтрока(Адреса.АдрПочт) Тогда
		Результат = "АдрПочт";
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ПолучитьСведенияОПоказателяхОтчета()
	
	ПараметрыОтчета = Новый Структура;
	ПараметрыОтчета.Вставить("СтруктураРеквизитовФормы", СтруктураРеквизитовФормы);
	
	РегламентированнаяОтчетность.ПолучитьСведенияОПоказателяхОтчета(ЭтаФорма, ПараметрыОтчета);
		
КонецПроцедуры

&НаСервере
Процедура ПоказатьПериод(НаимТекущегоРаздела)
	
	Если НаимТекущегоРаздела = "Баланс" Тогда
		
		// Период в заголовке отчета.
		Если НачалоГода(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета) <> НачалоДня(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета) Тогда
			СтруктураРеквизитовФормы.СтрПериодОтчета = Формат(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета, "ДФ=dd.MM.yyyy") + " - "
							+ Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ='ММММ гггг'") + " г." ;
		Иначе
			Если Месяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) = 1 Тогда 
				СтруктураРеквизитовФормы.СтрПериодОтчета = Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ='ММММ гггг'") + " г." ;
			Иначе
				СтруктураРеквизитовФормы.СтрПериодОтчета = "Январь - " + Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ='ММММ гггг'") + " г." ;
			КонецЕсли;
		КонецЕсли;
		
		//БАЛАНС
		// Период в заголовке баланса.
		ТабличныйДокумент.Области.ДатаБаланса.Значение = "на " + Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ = 'дд ММММ гггг'")+ " г.";
		
		ДатаКонцаПрошлогоГода 		= Дата(Год(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) - 1, 12, 31);
		ДатаКонцаПозапрошлогоГода 	= Дата(Год(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) - 2, 12, 31);
		
		СтруктураРеквизитовФормы.ЗаголовокДатаОтчетная 				= "На " + Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ = 'дд ММММ гггг'")+ " г.";
		СтруктураРеквизитовФормы.ЗаголовокДатаКонцаПрошлогоГода 	= "На " + Формат(ДатаКонцаПрошлогоГода, "ДФ = 'дд ММММ гггг'")+ " г.";
		СтруктураРеквизитовФормы.ЗаголовокДатаКонцаПозапрошлогоГода = "На " + Формат(ДатаКонцаПозапрошлогоГода, "ДФ = 'дд ММММ гггг'")+ " г.";
		
		ТабличныйДокумент.Области.ДатаОтчетная.Значение 			  = СтруктураРеквизитовФормы.ЗаголовокДатаОтчетная;
		ТабличныйДокумент.Области.ДатаКонцаПрошлогоГода.Значение 	  = СтруктураРеквизитовФормы.ЗаголовокДатаКонцаПрошлогоГода;
		ТабличныйДокумент.Области.ДатаКонцаПозапрошлогоГода.Значение  = СтруктураРеквизитовФормы.ЗаголовокДатаКонцаПозапрошлогоГода;
		
		// Период в списке кодов в форме баланса.
		ТабличныйДокумент.Области.ДатаКонцаПериодаОтчетаГод.Значение   = Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ = 'гггг'");
		ТабличныйДокумент.Области.ДатаКонцаПериодаОтчетаМесяц.Значение = Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ = 'ММ'");
		ТабличныйДокумент.Области.ДатаКонцаПериодаОтчетаЧисло.Значение = Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ = 'дд'");
		
	ИначеЕсли НаимТекущегоРаздела = "ОФР" Тогда
		
		ДатаКонцаПериодаОтчета = ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, -12);
		
		Если НачалоГода(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета) <> НачалоДня(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета) Тогда
			СтрПериод = Формат(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета, "ДФ=dd.MM.yyyy") + " - "
					  + Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ='ММММ гггг'") + " г." ;
		Иначе
			Если НачалоМесяца(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) = СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета Тогда
				СтрПериод = Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ = 'ММММ гггг'") + " г.";
			Иначе
				СтрПериод = "Январь - " + Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ = 'ММММ гггг'") + " г.";
			КонецЕсли;
		КонецЕсли;
		
		Если Месяц(ДатаКонцаПериодаОтчета) = 1 Тогда
			СтрПериодПрошлыйГод = Формат(ДатаКонцаПериодаОтчета, "ДФ = 'ММММ гггг'") + " г.";
		Иначе
			СтрПериодПрошлыйГод = "Январь - " + Формат(ДатаКонцаПериодаОтчета, "ДФ = 'ММММ гггг'") + " г.";
		КонецЕсли;
		
		ПериодОтчета = " за " + СтрПериод;
		
		ТабличныйДокумент.Области.ПериодОтчета.Значение = ПериодОтчета;
		
		ТабличныйДокумент.Области.ДатаКонцаПериодаОтчетаГод.Значение   = Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ = 'гггг'");
		ТабличныйДокумент.Области.ДатаКонцаПериодаОтчетаМесяц.Значение = Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ = 'ММ'");
		ТабличныйДокумент.Области.ДатаКонцаПериодаОтчетаЧисло.Значение = Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ = 'дд'");
		
		ЗаголовокДатаОтчетногоПериода = "За " + СтрПериод;
		ЗаголовокДатаОтчетногоПериодаПрошлогоГода = "За " + СтрПериодПрошлыйГод;
		
		ТабличныйДокумент.Области.ДатаОтчетногоПериода.Значение = ЗаголовокДатаОтчетногоПериода;
		ТабличныйДокумент.Области.ДатаОтчетногоПериодаПрошлогоГода.Значение = ЗаголовокДатаОтчетногоПериодаПрошлогоГода;
		
	ИначеЕсли НаимТекущегоРаздела = "ОЦИС" Тогда
		
		ДатаКонцаПериодаОтчета = ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, -12);
		
		Если НачалоГода(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета) <> НачалоДня(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета) Тогда
			СтрПериод = Формат(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета, "ДФ=dd.MM.yyyy") + " - "
					  + Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ='ММММ гггг'") + " г." ;
		Иначе
			Если НачалоМесяца(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) = СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета Тогда
				СтрПериод = Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ = 'ММММ гггг'") + " г.";
			Иначе
				СтрПериод = "Январь - " + Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ = 'ММММ гггг'") + " г.";
			КонецЕсли;
		КонецЕсли;
		
		Если Месяц(ДатаКонцаПериодаОтчета) = 1 Тогда
			СтрПериодПрошлыйГод = Формат(ДатаКонцаПериодаОтчета, "ДФ = 'ММММ гггг'") + " г.";
		Иначе
			СтрПериодПрошлыйГод = "Январь - " + Формат(ДатаКонцаПериодаОтчета, "ДФ = 'ММММ гггг'") + " г.";
		КонецЕсли;
		
		ПериодОтчета = " за " + СтрПериод;
		
		ТабличныйДокумент.Области.ПериодОтчета.Значение = ПериодОтчета;
		ТабличныйДокумент.Области.ДатаКонцаПериодаОтчетаГод.Значение   = Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ = 'гггг'");
		ТабличныйДокумент.Области.ДатаКонцаПериодаОтчетаМесяц.Значение = Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ = 'ММ'");
		ТабличныйДокумент.Области.ДатаКонцаПериодаОтчетаЧисло.Значение = Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ = 'дд'");
		
		ЗаголовокДатаОтчетногоПериода = "За " + СтрПериод;
		ЗаголовокДатаОтчетногоПериодаПрошлогоГода = "За " + СтрПериодПрошлыйГод;
		
		ТабличныйДокумент.Области.ДатаОтчетногоПериода.Значение = ЗаголовокДатаОтчетногоПериода;
		ТабличныйДокумент.Области.ДатаОтчетногоПериодаПрошлогоГода.Значение = ЗаголовокДатаОтчетногоПериодаПрошлогоГода;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСведенияОбОрганизацииНаСервере(ВПрограммеИзмененаДатаПодписи = Ложь)
	
	ЗаполнитьСведенияОбОрганизации(ЭтаФорма, ВПрограммеИзмененаДатаПодписи);
		
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьСведенияОбОрганизации(Форма, ВПрограммеИзмененаДатаПодписи = Ложь, СведенияОбОрганизации = Неопределено)
	
	Если (Форма.СтруктураРеквизитовФормы.Организация  = Неопределено) Или (Форма.СтруктураРеквизитовФормы.Организация = РегламентированнаяОтчетностьКлиентСервер.ПустоеЗначениеТипа("СправочникСсылка.Организации")) Тогда
		Возврат
	КонецЕсли;
	
	// Составляем список данных, необходимых для вывода в декларацию
	Сведения = Новый СписокЗначений;
	
	Если НЕ ВПрограммеИзмененаДатаПодписи Тогда
		Сведения.Добавить("", "ИННЮЛ"); // ИНН
		Сведения.Добавить("", "НаимЮЛПол"); // Полное наименование 
		Сведения.Добавить("", "ОКПО");
		Сведения.Добавить("", "ОКОПФ");
		Сведения.Добавить("", "ОКФС");
		Сведения.Добавить("", "ФормСобств");
		Сведения.Добавить("", "ОргПравФорм");
		Сведения.Добавить("", Форма.СтруктураРеквизитовФормы.ТипАдреса);
	КонецЕсли;
	
	Сведения.Добавить("", "ФИОРук"); // ФИО руководителя
	Сведения.Добавить("", "ФИОБух"); // ФИО бухгалтера
	      	
	//В поле "Адрес" указывается:
	//- для организации - место ее государственной регистрации (место нахождения);
	//- для обособленного подразделения - место его нахождения;
	//- для физического лица - полный адрес постоянного места жительства физического лица на основании документа, удостоверяющего его личность, либо иного документа, подтверждающего адрес постоянного места жительства.
	
	// Теперь получаем данные из глобальной общей функции
	ОргСведения = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(Форма.СтруктураРеквизитовФормы.Организация, Форма.ДатаПодписи, Сведения);
	
	Если НЕ ВПрограммеИзмененаДатаПодписи Тогда
		ИННЮЛ = "";
		НаимЮЛПол = "";
		ОКПО = "";
		ПолныйАдрЮР = "";
		ФормСобств = "";
		ОКОПФ = "";
		ОКФС = "";
		ОргПравФорм1 = "";
		ПолныйАдрес = "";
	КонецЕсли;
	
	ФИОРук = ""; // ФИО руководителя
	ФИОБух = ""; // ФИО бухгалтера
	
	Если НЕ ВПрограммеИзмененаДатаПодписи Тогда
		ОргСведения.Свойство("ИННЮЛ", ИННЮЛ);
		ОргСведения.Свойство("НаимЮЛПол", НаимЮЛПол);
		ОргСведения.Свойство("ОКПО", ОКПО);
		ОргСведения.Свойство("ОКОПФ", ОКОПФ);
		ОргСведения.Свойство("ОКФС", ОКФС);
		ОргСведения.Свойство("ПолныйАдрЮР", ПолныйАдрЮР);
		ОргСведения.Свойство("ФормСобств", ФормСобств);
		ОргСведения.Свойство("ОргПравФорм", ОргПравФорм1);
		ОргСведения.Свойство(Форма.СтруктураРеквизитовФормы.ТипАдреса, ПолныйАдрес);
	КонецЕсли;
	
	ОргСведения.Свойство("ФИОРук", ФИОРук);
	ОргСведения.Свойство("ФИОБух", ФИОБух);
	
	Если НЕ Форма.ТабличныйДокумент.Области.Найти("ОргКодОКВЭД") = Неопределено Тогда
		
		РегламентированнаяОтчетность.ПолучитьЗначениеОКВЭД(Форма.ДатаПодписи, Форма.СтруктураРеквизитовФормы);
		РегламентированнаяОтчетностьКлиентСервер.УстановитьЗначениеОКВЭД(Форма.ДатаПодписи,
																		 Форма.СтруктураРеквизитовФормы,
																		 Форма.ТабличныйДокумент.Области.ОргКодОКВЭД.Значение);
		
	КонецЕсли;
	
	Если НЕ Форма.ТабличныйДокумент.Области.Найти("ОргОтрасль") = Неопределено Тогда	
		
		РегламентированнаяОтчетность.ПолучитьЗначениеВидаЭкономическойДеятельности(Форма.ДатаПодписи, Форма.СтруктураРеквизитовФормы);
		РегламентированнаяОтчетностьКлиентСервер.УстановитьЗначениеВидаЭкономическойДеятельности(Форма.ДатаПодписи,
																		 						 Форма.СтруктураРеквизитовФормы,
																		 						 Форма.ТабличныйДокумент.Области.ОргОтрасль.Значение);
		
	КонецЕсли;
	
	Если ВПрограммеИзмененаДатаПодписи Тогда
		
		// Обновим только то, что зависит от даты подписи
		Если НЕ Форма.ТабличныйДокумент.Области.Найти("ОргДиректор") = Неопределено Тогда
			Форма.ТабличныйДокумент.Области.ОргДиректор.Значение = ФИОРук;
		КонецЕсли;
				
		Возврат;
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ИННЮЛ) Тогда
		ИННЮЛ = "";
	КонецЕсли;
	
	мИННЮЛ = ИННЮЛ;
	
	Если НЕ Форма.ТабличныйДокумент.Области.Найти("ОргИНН") = Неопределено Тогда
		Форма.ТабличныйДокумент.Области.ОргИНН.Значение = мИННЮЛ;
	КонецЕсли;
		
	Если НЕ Форма.ТабличныйДокумент.Области.Найти("ОргНазв") = Неопределено И ((Форма.СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация) Или (ПустаяСтрока(Форма.ТабличныйДокумент.Области.ОргНазв.Значение))) Тогда
		Форма.ТабличныйДокумент.Области.ОргНазв.Значение = НаимЮЛПол;
	КонецЕсли;
	
	// Работаем с ФИО руководителя
	Если НЕ Форма.ТабличныйДокумент.Области.Найти("ОргКодОКПО") = Неопределено И ((Форма.СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация) Или (ПустаяСтрока(Форма.ТабличныйДокумент.Области.ОргКодОКПО.Значение))) Тогда	
				
		Если Форма.СтруктураРеквизитовФормы.ИП Тогда
			Форма.ТабличныйДокумент.Области.ОргКодОКПО.Значение = "";
		Иначе
			Форма.ТабличныйДокумент.Области.ОргКодОКПО.Значение = ОКПО;
		КонецЕсли;
		
	КонецЕсли;
			
	Если НЕ Форма.ТабличныйДокумент.Области.Найти("ОргФорма") = Неопределено И ((Форма.СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация) Или (ПустаяСтрока(Форма.ТабличныйДокумент.Области.ОргФорма.Значение))) Тогда	
		Форма.ТабличныйДокумент.Области.ОргФорма.Значение = ОргПравФорм1;
	КонецЕсли;
		
	Если НЕ Форма.ТабличныйДокумент.Области.Найти("ОргКодОКОПФ") = Неопределено И ((Форма.СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация) Или (ПустаяСтрока(Форма.ТабличныйДокумент.Области.ОргКодОКОПФ.Значение))) Тогда	
		Форма.ТабличныйДокумент.Области.ОргКодОКОПФ.Значение = ОКОПФ;
	КонецЕсли;
	
	Если НЕ Форма.ТабличныйДокумент.Области.Найти("ОргКодОКФС") = Неопределено И ((Форма.СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация) Или (ПустаяСтрока(Форма.ТабличныйДокумент.Области.ОргКодОКФС.Значение))) Тогда	
		Форма.ТабличныйДокумент.Области.ОргКодОКФС.Значение = ОКФС;
	КонецЕсли;
	
	Если НЕ Форма.ТабличныйДокумент.Области.Найти("ОргФормаСобств") = Неопределено И ((Форма.СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация) Или (ПустаяСтрока(Форма.ТабличныйДокумент.Области.ОргФормаСобств.Значение))) Тогда	
		Форма.ТабличныйДокумент.Области.ОргФормаСобств.Значение = ФормСобств;
	КонецЕсли;
	
	Если (НЕ Форма.ТабличныйДокумент.Области.Найти("ОргПочтАдрес") = Неопределено) И ((Форма.СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация) Или (ПустаяСтрока(Форма.ТабличныйДокумент.Области.ОргПочтАдрес.Значение))) Тогда	
		
		Форма.ТабличныйДокумент.Области.ОргПочтАдрес.Значение = РегламентированнаяОтчетностьКлиентСервер.ПредставлениеАдресаВФормате9Запятых(ПолныйАдрес);
		Форма.СтруктураРеквизитовФормы.мАдресДляВыгрузки = ПолныйАдрес;
		
	КонецЕсли;
	
	Если НЕ Форма.ТабличныйДокумент.Области.Найти("ОргДиректор") = Неопределено И ((Форма.СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация) ИЛИ (ПустаяСтрока(Форма.ТабличныйДокумент.Области.ОргДиректор.Значение))) Тогда	
		Форма.ТабличныйДокумент.Области.ОргДиректор.Значение = ФИОРук;
	КонецЕсли;
	
	Если ТипЗнч(СведенияОбОрганизации) = Тип("Структура") Тогда
		СведенияОбОрганизации.Вставить("ОргДиректор",    ФИОРук);
		СведенияОбОрганизации.Вставить("ОргИНН",         мИННЮЛ);
		СведенияОбОрганизации.Вставить("ОргНазв",        НаимЮЛПол);
		СведенияОбОрганизации.Вставить("ОргКодОКПО",     ОКПО);
		СведенияОбОрганизации.Вставить("ОргКодОКВЭД",    Форма.ТабличныйДокумент.Области.ОргКодОКВЭД.Значение);
		СведенияОбОрганизации.Вставить("ОргФорма",       ОргПравФорм1);
		СведенияОбОрганизации.Вставить("ОргОтрасль",     Форма.ТабличныйДокумент.Области.ОргОтрасль.Значение);
		СведенияОбОрганизации.Вставить("ОргКодОКОПФ",    ОКОПФ);
		СведенияОбОрганизации.Вставить("ОргКодОКФС",     ОКФС);
		СведенияОбОрганизации.Вставить("ОргФормаСобств", ФормСобств);
		СведенияОбОрганизации.Вставить("ОргПочтАдрес",
			РегламентированнаяОтчетностьКлиентСервер.ПредставлениеАдресаВФормате9Запятых(ПолныйАдрес));
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЦветФонаЯчейкиНаСервере(ИмяЯчейки = Неопределено, ВариантЗаполнения = Неопределено, ИмяТекущейСтраницыПанели = "") Экспорт
	
	УстановитьЦветФонаЯчейки(ЭтаФорма, ИмяЯчейки, ВариантЗаполнения, ИмяТекущейСтраницыПанели);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЦветФонаЯчейки(Форма, ИмяЯчейки = Неопределено, ВариантЗаполнения = Неопределено, ИмяТекущейСтраницыПанели = "")
		
	Перем ЦветФона;
	Перем Комментарий;

	// Не нужно разукрашивать табличные поля, если открывается без открытия формы (например печать или просмотр)
	Если Форма.СтруктураРеквизитовФормы.мБезОткрытияФормы Или Форма.СтруктураРеквизитовФормы.мРежимПечати Тогда
		Возврат;
	КонецЕсли;

	Если Не ИмяЯчейки = Неопределено Тогда
		// устанавливаем цвет фона конкретной ячейки
		#Если НаКлиенте Тогда
			ИмяСтраницыПанели = РегламентированнаяОтчетностьКлиент.ОпределитьСтраницуПанелиПоКодуПоказателяНаКлиенте(Форма, ИмяЯчейки);
		#Иначе
			ИмяСтраницыПанели = РегламентированнаяОтчетностьВызовСервера.ОпределитьСтраницуПанелиПоКодуПоказателяНаСервере(Форма, ИмяЯчейки);
		#КонецЕсли
				
		Если ИмяСтраницыПанели = Неопределено Тогда
			Возврат;
		КонецЕсли;

		ИмяПоляТаблДокумента = "ТабличныйДокумент";

		Ключ = "_" + ВариантЗаполнения;
		Форма.мСтруктураЦветовРаскраски.Свойство(Ключ, ЦветФона);
		
		Если ВариантЗаполнения = 4 Тогда

			Форма[ИмяПоляТаблДокумента].Области[ИмяЯчейки].Защита = Истина;

		ИначеЕсли ВариантЗаполнения = 5 Тогда

			Форма[ИмяПоляТаблДокумента].Области[ИмяЯчейки].Защита = Истина

		Иначе

			Форма[ИмяПоляТаблДокумента].Области[ИмяЯчейки].Защита = Ложь;
			
		КонецЕсли;

		Форма[ИмяПоляТаблДокумента].Области[ИмяЯчейки].ЦветФона = ЦветФона;

	Иначе
		// устанавливаем цвет фона всех автозаполняемых ячеек активной страницы

		#Если НаКлиенте Тогда
			ТаблицаВариантыЗаполнения = РегламентированнаяОтчетностьКлиент.ПолучитьТаблицуВариантовЗаполненияНаКлиенте(Форма, ИмяТекущейСтраницыПанели);
		#Иначе
			ТаблицаВариантыЗаполнения = РегламентированнаяОтчетностьВызовСервера.ПолучитьТаблицуВариантовЗаполненияНаСервере(Форма, ИмяТекущейСтраницыПанели);
		#КонецЕсли
		
		Если ТаблицаВариантыЗаполнения = Неопределено Тогда
			Возврат;
		КонецЕсли;

		Для Каждого Строка Из ТаблицаВариантыЗаполнения Цикл
			ИмяПоказателя            =  Строка.КодПоказателя;
			ВариантЗаполнения        =  Строка.ВариантЗаполнения;
			Комментарий              =  Строка.Комментарий;
			КодПоказателяПоСтруктуре =  Строка.КодПоказателяПоСтруктуре;

			КолвоСтрокВМногострочнойЧасти = ПоказательВходитВМногострочнуюЧасть(Форма, ИмяПоказателя);
			
			Если КолвоСтрокВМногострочнойЧасти > 0 Тогда
				Многострочность = Истина;
				БазоваяЧасть = ИмяПоказателя;
				ОписанияБлоков = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСвойствоРаздела(Форма, ИмяТекущейСтраницыПанели, "МногострочностьВРазделе");

				Если ТипЗнч(ОписанияБлоков) = Тип("Число") Тогда
					ВБлокеВсеПоказателиЗаполняются = Истина;
				ИначеЕсли ТипЗнч(ОписанияБлоков) = Тип("ДанныеФормыКоллекция") Тогда
					ИмяГруппы = Сред(ИмяПоказателя, 1, 11);
					ВБлокеВсеПоказателиЗаполняются = НЕ ОписанияБлоков.НайтиСтроки(Новый Структура("ИдГруппы", ИмяГруппы))[0].НезаполняемыеПоказателиЕсть;
				КонецЕсли;

			Иначе
				Многострочность = Ложь;
				ВБлокеВсеПоказателиЗаполняются = Истина;
				КолвоСтрокВМногострочнойЧасти = 1;
			КонецЕсли;
			
			Для Инд = 1 по КолвоСтрокВМногострочнойЧасти Цикл

				Если Многострочность Тогда
					ИмяПоказателя = БазоваяЧасть + "_" + СтрокаЧГ0(Инд);
					
				КонецЕсли;

				// пропускаем фантомные ячейки несуществующих многострочных частей
				Если Форма.ТабличныйДокумент.Области.Найти(ИмяПоказателя) = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				ТекОбластьЯчеек = Форма.ТабличныйДокумент.Области[ИмяПоказателя];
				Если (Не ПустаяСтрока(Комментарий)) ИЛИ (Не ПустаяСтрока(ТекОбластьЯчеек.Примечание.Текст)) Тогда
					ТекОбластьЯчеек.Примечание.Текст = Комментарий;
				КонецЕсли;

				Ключ = "_" + ВариантЗаполнения;
				Форма.мСтруктураЦветовРаскраски.Свойство(Ключ, ЦветФона);

				Если ВариантЗаполнения = 4 Тогда

					Форма.ТабличныйДокумент.Области[ИмяПоказателя].Защита = Истина;

				ИначеЕсли ВариантЗаполнения = 5 Тогда

					Форма.ТабличныйДокумент.Области[ИмяПоказателя].Защита = Истина;

				Иначе

					Форма.ТабличныйДокумент.Области[ИмяПоказателя].Защита = Ложь;
					
				КонецЕсли;

				Форма.ТабличныйДокумент.Области[ИмяПоказателя].ЦветФона = ЦветФона;
					
			КонецЦикла;
			
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПустыеСтруктурыДанных()
	
	СохрТабличныйДокумент = Новый ТабличныйДокумент;
	
	СохрТабличныйДокумент.Вывести(ТабличныйДокумент);
	
	Для Каждого Раздел Из мСвойстваРазделовДекларации.ПолучитьЭлементы() Цикл
		
		Если НЕ Раздел.МногостраничностьВРазделе
		  И (ЭтаФорма["СтруктураДанных" + Раздел.ИмяСтраницы].Количество() = 0) Тогда
		  
			ТабличныйДокумент.Очистить();
			ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + Раздел.ИмяСтраницы));
			
			ПоказатьПериод(Раздел.ИмяСтраницы);
	
			Если НЕ ТабличныйДокумент.Области.Найти("ДатаПодписиОтчета") = Неопределено Тогда
				ТабличныйДокумент.Области.ДатаПодписиОтчета.Значение = ДатаПодписи;
			КонецЕсли;
		
			ЗаполнитьСведенияОбОрганизацииНаСервере();
			
			СохранитьДанныеРаздела(Раздел.ИмяСтраницы, Ложь);
					
		КонецЕсли;
	
	КонецЦикла;
	
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(СохрТабличныйДокумент);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьТочность()
	
	Если СтруктураРеквизитовФормы.ЕдиницаИзмерения = ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1 Тогда

		Если СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения > 2 Тогда
									
			Сообщение = Новый СообщениеПользователю;
			
			Сообщение.Текст = НСтр("ru='Баланс: при выводе сумм в рублях точность не может превышать 2 знака.'");

			Сообщение.Сообщить();
			
			СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = 2;
			
		КонецЕсли;

	ИначеЕсли СтруктураРеквизитовФормы.ЕдиницаИзмерения = ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1000 Тогда

		Если СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения > 3 Тогда
			
			Сообщение = Новый СообщениеПользователю;

			Сообщение.Текст = НСтр("ru='Баланс: при выводе сумм в тысячах рублей точность не может превышать 3 знака.'");

			Сообщение.Сообщить();
			
			СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = 3;
			
		КонецЕсли;

	ИначеЕсли СтруктураРеквизитовФормы.ЕдиницаИзмерения = ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1000000 Тогда

		Если СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения > 6 Тогда
						
			Сообщение = Новый СообщениеПользователю;

			Сообщение.Текст = НСтр("ru='Баланс: при выводе сумм в миллионах рублей точность не может превышать 6 знаков.'");

			Сообщение.Сообщить();
			
			СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = 6;
			
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЗаголовкиВРазделахОтчетностиПоЕдиницеИзмерения()

	Если СтруктураРеквизитовФормы.ЕдиницаИзмерения = ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1 Тогда	
		НазваниеЕдиницыИзмерения = "руб";
	ИначеЕсли СтруктураРеквизитовФормы.ЕдиницаИзмерения = ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1000 Тогда
		НазваниеЕдиницыИзмерения = "тыс. руб";
	ИначеЕсли СтруктураРеквизитовФормы.ЕдиницаИзмерения = ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1000000 Тогда	
		НазваниеЕдиницыИзмерения = "млн. руб";
	Иначе
		НазваниеЕдиницыИзмерения = "";
	КонецЕсли;
    	
КонецПроцедуры

&НаКлиенте
Процедура РасчетНаКлиенте(ИмяСтраницыПанели = "", ОбластьИмя = "") Экспорт

	Расчет(ЭтаФорма, ИмяСтраницыПанели, ОбластьИмя);

КонецПроцедуры

&НаСервере
Процедура РасчетНаСервере(ИмяСтраницыПанели = "", ОбластьИмя = "") Экспорт

	Расчет(ЭтаФорма, ИмяСтраницыПанели, ОбластьИмя);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура Расчет(Форма, ИмяСтраницыПанели = "", Знач ОбластьИмя = "")	
	
	Если Форма.СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Тогда
		Возврат;
	КонецЕсли;
	
	// БАЛАНС
	//
	Если ИмяСтраницыПанели = "Баланс" Тогда
		
		Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Баланс" Тогда
			
			Баланс = Форма.ТабличныйДокумент.Области;
			
			// Актив
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000010000504, ОбластьИмя) > 0 Тогда
				
				Баланс.П000010000504.Значение = Баланс.П000010000104.Значение
				+ Баланс.П000010000204.Значение
				+ Баланс.П000010000304.Значение
				+ Баланс.П000010000404.Значение;
				
			КонецЕсли;	
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000010000505, ОбластьИмя) > 0 Тогда
												
				Баланс.П000010000505.Значение = Баланс.П000010000105.Значение
				+ Баланс.П000010000205.Значение
				+ Баланс.П000010000305.Значение
				+ Баланс.П000010000405.Значение;
				
			КонецЕсли;	
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000010000506, ОбластьИмя) > 0 Тогда
												
				Баланс.П000010000506.Значение = Баланс.П000010000106.Значение
				+ Баланс.П000010000206.Значение
				+ Баланс.П000010000306.Значение
				+ Баланс.П000010000406.Значение;
				
			КонецЕсли;	
			
			// Пассив
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000010001104, ОбластьИмя) > 0 Тогда
												
				Баланс.П000010001104.Значение = Баланс.П000010000604.Значение
				+ Баланс.П000010000704.Значение
				+ Баланс.П000010000804.Значение
				+ Баланс.П000010000904.Значение
				+ Баланс.П000010001004.Значение;
				
			КонецЕсли;	
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000010001105, ОбластьИмя) > 0 Тогда
				
				Баланс.П000010001105.Значение = Баланс.П000010000605.Значение
				+ Баланс.П000010000705.Значение
				+ Баланс.П000010000805.Значение
				+ Баланс.П000010000905.Значение
				+ Баланс.П000010001005.Значение;
				
			КонецЕсли;	
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000010001106, ОбластьИмя) > 0 Тогда
				
				Баланс.П000010001106.Значение = Баланс.П000010000606.Значение
				+ Баланс.П000010000706.Значение
				+ Баланс.П000010000806.Значение
				+ Баланс.П000010000906.Значение
				+ Баланс.П000010001006.Значение;
				
			КонецЕсли;	
				
		Иначе
			
			Баланс = Форма.СтруктураДанныхБаланс;
			
			// Актив
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000010000504, ОбластьИмя) > 0 Тогда
				
				Баланс.П000010000504 = Баланс.П000010000104
				+ Баланс.П000010000204
				+ Баланс.П000010000304
				+ Баланс.П000010000404;
				
			КонецЕсли;	
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000010000505, ОбластьИмя) > 0 Тогда
												
				Баланс.П000010000505 = Баланс.П000010000105
				+ Баланс.П000010000205
				+ Баланс.П000010000305
				+ Баланс.П000010000405;
				
			КонецЕсли;	
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000010000506, ОбластьИмя) > 0 Тогда
												
				Баланс.П000010000506 = Баланс.П000010000106
				+ Баланс.П000010000206
				+ Баланс.П000010000306
				+ Баланс.П000010000406;
				
			КонецЕсли;	
			
			// Пассив
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000010001104, ОбластьИмя) > 0 Тогда
												
				Баланс.П000010001104 = Баланс.П000010000604
				+ Баланс.П000010000704
				+ Баланс.П000010000804
				+ Баланс.П000010000904
				+ Баланс.П000010001004;
				
			КонецЕсли;	
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000010001105, ОбластьИмя) > 0 Тогда
				
				Баланс.П000010001105 = Баланс.П000010000605
				+ Баланс.П000010000705
				+ Баланс.П000010000805
				+ Баланс.П000010000905
				+ Баланс.П000010001005;
				
			КонецЕсли;	
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000010001106, ОбластьИмя) > 0 Тогда
				
				Баланс.П000010001106 = Баланс.П000010000606
				+ Баланс.П000010000706
				+ Баланс.П000010000806
				+ Баланс.П000010000906
				+ Баланс.П000010001006;
				
			КонецЕсли;	
			
		КонецЕсли;
		
	// ОТЧЕТ О ФИНАНСОВЫХ РЕЗУЛЬТАТАХ
	//
	ИначеЕсли ИмяСтраницыПанели = "ОФР" Тогда
		
		Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "ОФР" Тогда
			
			ОФР = Форма.ТабличныйДокумент.Области;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000020000703, ОбластьИмя) > 0 Тогда
				
				ОФР.П000020000703.Значение = ОкруглитьЧислоПоФормату(Форма, ОФР.П000020000103.Значение)
				+ ОкруглитьЧислоПоФормату(Форма, ОФР.П000020000203.Значение)
				+ ОкруглитьЧислоПоФормату(Форма, ОФР.П000020000303.Значение)
				+ ОкруглитьЧислоПоФормату(Форма, ОФР.П000020000403.Значение)
				+ ОкруглитьЧислоПоФормату(Форма, ОФР.П000020000503.Значение)
				+ ОкруглитьЧислоПоФормату(Форма, ОФР.П000020000603.Значение);
				
			КонецЕсли;	
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000020000704, ОбластьИмя) > 0 Тогда
				
				ОФР.П000020000704.Значение = ОкруглитьЧислоПоФормату(Форма, ОФР.П000020000104.Значение)
				+ ОкруглитьЧислоПоФормату(Форма, ОФР.П000020000204.Значение)
				+ ОкруглитьЧислоПоФормату(Форма, ОФР.П000020000304.Значение)
				+ ОкруглитьЧислоПоФормату(Форма, ОФР.П000020000404.Значение)
				+ ОкруглитьЧислоПоФормату(Форма, ОФР.П000020000504.Значение)
				+ ОкруглитьЧислоПоФормату(Форма, ОФР.П000020000604.Значение);
				
			КонецЕсли;	
			
		Иначе
			
			ОФР = Форма.СтруктураДанныхОФР;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000020000703, ОбластьИмя) > 0 Тогда
				
				ОФР.П000020000703 = ОкруглитьЧислоПоФормату(Форма, ОФР.П000020000103)
				+ ОкруглитьЧислоПоФормату(Форма, ОФР.П000020000203)
				+ ОкруглитьЧислоПоФормату(Форма, ОФР.П000020000303)
				+ ОкруглитьЧислоПоФормату(Форма, ОФР.П000020000403)
				+ ОкруглитьЧислоПоФормату(Форма, ОФР.П000020000503)
				+ ОкруглитьЧислоПоФормату(Форма, ОФР.П000020000603);
				
			КонецЕсли;	
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000020000704, ОбластьИмя) > 0 Тогда
				
				ОФР.П000020000704 = ОкруглитьЧислоПоФормату(Форма, ОФР.П000020000104)
				+ ОкруглитьЧислоПоФормату(Форма, ОФР.П000020000204)
				+ ОкруглитьЧислоПоФормату(Форма, ОФР.П000020000304)
				+ ОкруглитьЧислоПоФормату(Форма, ОФР.П000020000404)
				+ ОкруглитьЧислоПоФормату(Форма, ОФР.П000020000504)
				+ ОкруглитьЧислоПоФормату(Форма, ОФР.П000020000604);
				
			КонецЕсли;	
			
		КонецЕсли;	
		
	// ОТЧЕТ О ЦЕЛЕВОМ ИСПОЛЬЗОВАНИИ СРЕДСТВ
	//
	ИначеЕсли ИмяСтраницыПанели = "ОЦИС" Тогда
		
		Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "ОЦИС" Тогда
			
			ОЦИС = Форма.ТабличныйДокумент.Области;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100640003, ОбластьИмя) > 0 Тогда
												
				ОЦИС.П000100640003.Значение = ОЦИС.П000100610003.Значение
				+ ОЦИС.П000100621003.Значение
				+ ОЦИС.П000100624003.Значение
				+ ОЦИС.П000100625003.Значение
				+ ОЦИС.П000100631003.Значение
				+ ОЦИС.П000100632003.Значение
				+ ОЦИС.П000100633003.Значение
				+ ОЦИС.П000100635003.Значение;
				
			КонецЕсли;	
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100640004, ОбластьИмя) > 0 Тогда
				
				ОЦИС.П000100640004.Значение = ОЦИС.П000100610004.Значение
				+ ОЦИС.П000100621004.Значение
				+ ОЦИС.П000100624004.Значение
				+ ОЦИС.П000100625004.Значение
				+ ОЦИС.П000100631004.Значение
				+ ОЦИС.П000100632004.Значение
				+ ОЦИС.П000100633004.Значение
				+ ОЦИС.П000100635004.Значение;
				
			КонецЕсли;	
			
		Иначе
			
			ОЦИС = Форма.СтруктураДанныхОЦИС;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100640003, ОбластьИмя) > 0 Тогда
												
				ОЦИС.П000100640003 = ОЦИС.П000100610003
				+ ОЦИС.П000100621003
				+ ОЦИС.П000100624003
				+ ОЦИС.П000100625003
				+ ОЦИС.П000100631003
				+ ОЦИС.П000100632003
				+ ОЦИС.П000100633003
				+ ОЦИС.П000100635003;
				
			КонецЕсли;	
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100640004, ОбластьИмя) > 0 Тогда
				
				ОЦИС.П000100640004 = ОЦИС.П000100610004
				+ ОЦИС.П000100621004
				+ ОЦИС.П000100624004
				+ ОЦИС.П000100625004
				+ ОЦИС.П000100631004
				+ ОЦИС.П000100632004
				+ ОЦИС.П000100633004
				+ ОЦИС.П000100635004;
				
			КонецЕсли;	
			
		КонецЕсли;		
		
	ИначеЕсли ИмяСтраницыПанели = "" Тогда
		
		Расчет(Форма, "Баланс", ОбластьИмя);
		Расчет(Форма, "ОФР",    ОбластьИмя);
		Расчет(Форма, "ОЦИС",   ОбластьИмя);
				
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Функция ИмяМакетаСоставаПоказателей()
	
	Возврат "СоставПоказателей2012Кв4";
	
КонецФункции

&НаСервере
Процедура ВосстановитьСохраненныеНастройкиСоставаПоказателей(ИмяРаздела, НастройкиРаздела, СписокНастроек)
	
	Для Каждого СтрокаНастройки Из НастройкиРаздела.Строки Цикл
		Идентификатор = СтрокаНастройки.Идентификатор;
		СтрокаНастроекОтчета = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(ЭтаФорма[НастройкиСоставаПоказателейОтчета[ИмяРаздела]].ПолучитьЭлементы(), "Идентификатор", Идентификатор);
		Если СтрокаНастроекОтчета <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(СтрокаНастроекОтчета, СтрокаНастройки, СписокНастроек);
		КонецЕсли;
		ВосстановитьСохраненныеНастройкиСоставаПоказателей(ИмяРаздела, СтрокаНастройки, СписокНастроек);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СохранитьДанныеРаздела(НаимРаздела, ОчищатьРазделЕслиЕстьМногострочность)
	
	ЭтаФорма["СтруктураДанных" + НаимРаздела] = СобратьДанныеТекущегоТаблПоля(ЭтаФорма, "ТабличныйДокумент");
			
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СобратьДанныеТекущегоТаблПоля(Форма, ТабличноеПоле) Экспорт

	СтруктураДанныхПоля = Новый Структура;

	ТабличноеПоле = Форма[ТабличноеПоле];
	
	Для Инд = 0 По ТабличноеПоле.Области.Количество() - 1 Цикл
		ТекущаяОбласть = ТабличноеПоле.Области[Инд];

		Если Не ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			Продолжить;
		КонецЕсли;

		Если ТекущаяОбласть.СодержитЗначение <> Истина Тогда
			Продолжить;
		КонецЕсли;

		ИмяПоказателя      = ТекущаяОбласть.Имя;
		ЗначениеПоказателя = ТекущаяОбласть.Значение;
		СтруктураДанныхПоля.Вставить(ИмяПоказателя, ЗначениеПоказателя);

	КонецЦикла;

	Возврат СтруктураДанныхПоля;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ПоказатьКодЕдиницыИзмерения(Форма)

	Если Форма.ТабличныйДокумент.Области.Найти("КодЕИ") = Неопределено
	 ИЛИ Форма.ТабличныйДокумент.Области.Найти("НазвЕИ") = Неопределено Тогда
		Возврат;
	КонецЕсли;
		
	Если Форма.СтруктураРеквизитовФормы.ЕдиницаИзмерения = Форма.ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1 Тогда
		Форма.ТабличныйДокумент.Области.КодЕИ.Значение = "383";
		Форма.ТабличныйДокумент.Области.НазвЕИ.Значение = "в рублях";
	ИначеЕсли Форма.СтруктураРеквизитовФормы.ЕдиницаИзмерения = Форма.ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1000 Тогда
		Форма.ТабличныйДокумент.Области.КодЕИ.Значение = "384";
		Форма.ТабличныйДокумент.Области.НазвЕИ.Значение = "в тыс. рублей";
	ИначеЕсли Форма.СтруктураРеквизитовФормы.ЕдиницаИзмерения = Форма.ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1000000 Тогда
		Форма.ТабличныйДокумент.Области.КодЕИ.Значение = "385";
		Форма.ТабличныйДокумент.Области.НазвЕИ.Значение = "в млн. рублей";
	Иначе
		Форма.ТабличныйДокумент.Области.КодЕИ.Значение = "";
		Форма.ТабличныйДокумент.Области.НазвЕИ.Значение = "";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьФорматВыводаМногострочногоПоказателя(Форма, ПолеТабличногоДокумента, ИмяПоказателяБезСчетчика)
	
	ИдентификаторМногострочнойЧасти = Форма.СтруктураРеквизитовФормы.СоответствиеПоказателейМногострочныхЧастейИхОписанию[ИмяПоказателяБезСчетчика];
	СтруктураМногострочнойЧасти = Форма.СтруктураМногострочныхЧастей[ИдентификаторМногострочнойЧасти];
	КоличествоСтрокВМногострочнойЧасти = СтруктураМногострочнойЧасти.Состав.Количество();
	
	Для Инд = 1 По КоличествоСтрокВМногострочнойЧасти Цикл
		ИмяОбласти = ИмяПоказателяБезСчетчика + "_" + СтрокаЧГ0(Инд);
		Область = ПолеТабличногоДокумента.Области[ИмяОбласти];
		Область.Формат = Форма.СтруктураРеквизитовФормы.СтрокаФорматаПредставления;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПоказательВходитВМногострочнуюЧасть(Форма, ИмяПоказателя)
	
	// Поиск показателя в множестве альтернативных описаний многострочных частей.
	ИмяСтруктурыМногострочнойЧасти = Форма.СтруктураРеквизитовФормы.СоответствиеПоказателейМногострочныхЧастейИхОписанию[ИмяПоказателя];
	Если ИмяСтруктурыМногострочнойЧасти <> Неопределено Тогда
		СтруктураМногострочнойЧасти = Форма.СтруктураМногострочныхЧастей[ИмяСтруктурыМногострочнойЧасти];
		КоличествоСтрокМногострочнойЧасти = СтруктураМногострочнойЧасти.Состав.Количество();
		Возврат КоличествоСтрокМногострочнойЧасти;
	КонецЕсли;
	
	Возврат 0;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СтрокаЧГ0(ИсходноеЧисло)
	
	Возврат Формат(ИсходноеЧисло, "ЧГ=0");
	
КонецФункции

// СохранитьНаКлиенте
&НаКлиенте
Процедура СохранитьНаКлиенте(Автосохранение = Ложь, ВыполняемоеОповещение=Неопределено) Экспорт
	
	Если СтруктураДанныхБаланс.Количество() = 0
		ИЛИ СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Баланс" Тогда
		СтруктураДанныхБаланс.Вставить("НомерКорректировки", ТабличныйДокумент.Области.НомерКорректировки.Значение);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СтруктураДанныхБаланс.НомерКорректировки) Тогда
		ЗначениеКорректировки = 0;
	Иначе
		ЗначениеКорректировки = Число(СтруктураДанныхБаланс.НомерКорректировки);
	КонецЕсли;
	Вариант = СтруктураРеквизитовФормы.ВидДокумента * ЗначениеКорректировки;
	
	Если НЕ РегламентированнаяОтчетностьКлиент.ПриЗаписиРегламентированногоОтчетаНаКлиенте(ЭтаФорма, , Автосохранение, Вариант) Тогда
		Возврат;
	КонецЕсли;
	
	ПодобныйОтчетСуществует = Ложь;
	ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки = Ложь;
	
	Если Элементы.РазделыОтчета.ТекущиеДанные = Неопределено Тогда
		НаименованиеТекущегоРаздела = СтруктураРеквизитовФормы.НаимТекущегоРаздела;
	Иначе
		НаименованиеТекущегоРаздела = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
	КонецЕсли;
	
	РезультатСохранения = ПередСохранением(, ПодобныйОтчетСуществует, Вариант, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, Автосохранение, НаименованиеТекущегоРаздела);
	ВидДокументаНомерКорректировкиИзменен = Неопределено;
	
	Если ПодобныйОтчетСуществует И Автосохранение Тогда
		Возврат;
	КонецЕсли;
	
	НуженВопросПередСохранением = (ПодобныйОтчетСуществует ИЛИ ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки);
	
	Если НуженВопросПередСохранением Тогда
		
		СохранитьНаКлиентеСВопросом(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, ПодобныйОтчетСуществует);
		
	Иначе
		
		ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНаКлиентеСВопросом(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, ПодобныйОтчетСуществует)
	
	Если ПодобныйОтчетСуществует Тогда
		
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(КодВозвратаДиалога.Да, "Сохранить");
		Кнопки.Добавить(КодВозвратаДиалога.Нет, "Отмена");
		
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Отчет с видом %1 уже существует.
			|Сохранить отчет с таким же видом?'"), ?(Вариант = 0, """Первичный""", """Корректирующий/" + Вариант + """"));
		ДополнительныеПараметры = Новый Структура("Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки", Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки);
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросСохранитьОтчетСТакимЖеВидомЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, Кнопки, , Кнопки.Получить(1).Значение);
		
	Иначе
		
		СохранитьНаКлиентеСВопросомПродолжение(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросСохранитьОтчетСТакимЖеВидомЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Автосохранение = ДополнительныеПараметры.Автосохранение;
	Вариант = ДополнительныеПараметры.Вариант;
	ВыполняемоеОповещение = ДополнительныеПараметры.ВыполняемоеОповещение;
	ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки = ДополнительныеПараметры.ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки;
	
	Ответ = РезультатВопроса;
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	СохранитьНаКлиентеСВопросомПродолжение(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНаКлиентеСВопросомПродолжение(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки)
	
	Если ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки Тогда
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("ВидОтчета", Вариант);
		
		ФормаВопроса = РегламентированнаяОтчетностьКлиент.ПолучитьОбщуюФормуПоИмени("ВопросПриИзмененииВидаДокументаНомераКорректировки", ПараметрыФормы);
		ФормаВопроса.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		ДополнительныеПараметры = Новый Структура("Автосохранение, Вариант, ВыполняемоеОповещение", Автосохранение, Вариант, ВыполняемоеОповещение);
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросПриИзмененииВидаДокументаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ФормаВопроса.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
		ФормаВопроса.Открыть();
	Иначе
		Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Сохраняется %1...'"), ЭтаФорма.Заголовок), , , БиблиотекаКартинок.Записать);
		РезультатСохранения = Сохранить(Автосохранение, , Вариант, Ложь, Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
		ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПриИзмененииВидаДокументаЗавершение(КодВозврата, ДополнительныеПараметры) Экспорт
	
	Автосохранение = ДополнительныеПараметры.Автосохранение;
	Вариант = ДополнительныеПараметры.Вариант;
	ВыполняемоеОповещение = ДополнительныеПараметры.ВыполняемоеОповещение;
	
	Если КодВозврата = КодВозвратаДиалога.Да
		ИЛИ КодВозврата = КодВозвратаДиалога.Нет Тогда
		ВидДокументаНомерКорректировкиИзменен = ?(КодВозврата = КодВозвратаДиалога.Да, Истина, Ложь);
	Иначе
		Возврат;
	КонецЕсли;
	
	Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Сохраняется %1...'"), ЭтаФорма.Заголовок), , , БиблиотекаКартинок.Записать);
	РезультатСохранения = Сохранить(Автосохранение, , Вариант, ВидДокументаНомерКорректировкиИзменен, Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
	ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения)
	
	КлючУникальности = СтруктураРеквизитовФормы.мСохраненныйДок;
	
	Если РезультатСохранения Тогда
		
		РегламентированнаяОтчетностьКлиент.ПослеЗаписиРегламентированногоОтчета(ЭтаФорма);
		
		Если ВыполняемоеОповещение <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ВыполняемоеОповещение);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры
// СохранитьНаКлиенте

&НаСервере
Функция ПередСохранением(КодИФНС = "не применимо", ПодобныйОтчетСуществует, Вариант, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, Автосохранение, НаимТекРаздела)
	
	Если РегламентированнаяОтчетность.БылиИзмененыКлючевыеРеквизитыОтчета(ЭтаФорма, КодИФНС)
	   И РегламентированнаяОтчетность.СуществуетДокументСАналогичнымиРеквизитами(ЭтаФорма, КодИФНС) Тогда
		
		ПодобныйОтчетСуществует = Истина;
		
	КонецЕсли;
	
	СтруктураРеквизитовФормы.мЗаписываетсяНовыйДокумент = (СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено ИЛИ СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено);
	
	Если Вариант <> Неопределено И ((СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено) ИЛИ (СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено) ИЛИ (Вариант <> СтруктураРеквизитовФормы.мВариант)) Тогда
		
		Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено ИЛИ СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено Тогда
						
		ИначеЕсли Вариант <> СтруктураРеквизитовФормы.мВариант Тогда
			
			ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки = Истина;
								
		КонецЕсли;

	КонецЕсли;
	
	Если ПодобныйОтчетСуществует
	 ИЛИ ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки Тогда
	 
	 	Возврат Ложь;
		
 	КонецЕсли;
		
	Возврат Сохранить(Автосохранение, КодИФНС, Вариант, , НаимТекРаздела);
		
КонецФункции

&НаСервере
Функция Сохранить(Автосохранение = Ложь, КодИФНС = "не применимо", Вариант, ВидДокументаНомерКорректировкиИзменен = Неопределено, НаимТекРаздела) Экспорт
	
	ДанныеДляРазблокирования = Неопределено;
	
	Если НЕ СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
		Если НЕ СтруктураРеквизитовФормы.мБезОткрытияФормы Тогда
			ДанныеДляРазблокирования = Новый Структура("Ключ,ИдФормы",
			СтруктураРеквизитовФормы.мСохраненныйДок, ЭтаФорма.УникальныйИдентификатор);
		КонецЕсли;
		СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.ПолучитьОбъект();
	КонецЕсли;
	
	Если НЕ РегламентированнаяОтчетность.ПриЗаписиРегламентированногоОтчетаНаСервере(ЭтаФорма, КодИФНС, Автосохранение, Вариант, ВидДокументаНомерКорректировкиИзменен, СтруктураРеквизитовФормы.мСохраненныйДок) Тогда
		СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
		Возврат Ложь;
	КонецЕсли;

	// установим текущие значения реквизитов документа
	СтруктураРеквизитовФормы.мСохраненныйДок.ИсточникОтчета = Метаданные.Отчеты[Сред(Лев(СтрЗаменить(ЭтаФорма.ИмяФормы, "Внешний", ""), СтрНайти(СтрЗаменить(ЭтаФорма.ИмяФормы, "Внешний", ""), ".Форма.") - 1), 7)].Имя;
	СтруктураРеквизитовФормы.мСохраненныйДок.НаименованиеОтчета = Метаданные.Отчеты[Сред(Лев(СтрЗаменить(ЭтаФорма.ИмяФормы, "Внешний", ""), СтрНайти(СтрЗаменить(ЭтаФорма.ИмяФормы, "Внешний", ""), ".Форма.") - 1), 7)].ОсновнаяФорма.Синоним;
	СтруктураРеквизитовФормы.мСохраненныйДок.ДатаНачала                 = СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета;
	СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания              = СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета;
	СтруктураРеквизитовФормы.мСохраненныйДок.ВыбраннаяФорма             = СтруктураРеквизитовФормы.мВыбраннаяФорма;
	СтруктураРеквизитовФормы.мСохраненныйДок.Организация                = СтруктураРеквизитовФормы.Организация;
	СтруктураРеквизитовФормы.мСохраненныйДок.ДатаПодписи                = ДатаПодписи;
	СтруктураРеквизитовФормы.мСохраненныйДок.ЕдиницаИзмерения           = СтруктураРеквизитовФормы.ЕдиницаИзмерения;
	СтруктураРеквизитовФормы.мСохраненныйДок.ТочностьЕдиницыИзмерения   = СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения;
	СтруктураРеквизитовФормы.мСохраненныйДок.ВидОтчетности              = Перечисления.ВидыОтчетности.РегламентированнаяОтчетность;
	СтруктураРеквизитовФормы.мСохраненныйДок.Комментарий                = Комментарий;
	СтруктураРеквизитовФормы.мСохраненныйДок.Вид                        = Вариант;
	СтруктураРеквизитовФормы.мСохраненныйДок.ПредставлениеВида          = РегламентированнаяОтчетность.ПредставлениеВидаДокумента(СтруктураРеквизитовФормы.мСохраненныйДок.Вид);
    СтруктураРеквизитовФормы.мВариант                                   = Вариант;
    	
	Если СтруктураРеквизитовФормы.Организация <> Справочники.Организации.ПустаяСсылка() Тогда
		СтруктураРеквизитовФормы.мСохраненныйДок.КодНалоговогоОргана = СтруктураРеквизитовФормы.Организация.КодНалоговогоОргана;
	КонецЕсли;
	
	СтруктураРеквизитовФормы.мСохраненныйДок.ФорматВыгрузки = "Автоматически";
	
	СохранитьДанныеРаздела(НаимТекРаздела, Ложь);
	
	ЗаполнитьПустыеСтруктурыДанных();
	
	// формируем данные редактируемых ячеек таблицы
	ПоказателиОтчета = Новый Структура();
	
	ЗаполнитьПоказателиОтчетаНаСервере(ПоказателиОтчета);
    
	// формируем список сохранения
	СписокСохранения = Новый Структура();

	// вставляем данные редактируемых ячеек таблицы	
	СписокСохранения.Вставить("ПоказателиОтчета", ПоказателиОтчета);
	
	СписокСохранения.Вставить("ДанныеМногострочныхРазделов", Неопределено);
	
	ДанныеВариантовАвтоЗаполнения = Новый Структура;
	
	Для Каждого ЭлементСтруктуры Из мСтруктураВариантыЗаполнения Цикл
		
		МассивТаблЗнач = Новый Массив;
		
		ДанныеВариантовАвтоЗаполнения.Вставить(ЭлементСтруктуры.Ключ, МассивТаблЗнач);
			
		Для Каждого ЭлементМассива Из ЭтаФорма["ТаблицаВариантыЗаполнения" + ЭлементСтруктуры.Ключ] Цикл
			
			МассивТаблЗнач.Добавить(ДанныеФормыВЗначение(ЭлементМассива.ТаблицаВариантовЗаполнения, Тип("ТаблицаЗначений")));
			
		КонецЦикла;
			
	КонецЦикла;
	
	// вставляем данные вариантов автозаполнения ячеек
	СписокСохранения.Вставить("ДанныеВариантовАвтоЗаполнения", ДанныеВариантовАвтоЗаполнения);

	// вствляем версию формы
	СписокСохранения.Вставить("ВерсияФормы", СтруктураРеквизитовФормы.мВерсияФормы);
	
	СписокСохранения.Вставить("СохранятьРасшифровку", СтруктураРеквизитовФормы.мСохранятьРасшифровку);
	
	Если СтруктураРеквизитовФормы.АдресВременногоХранилищаРасшифровки <> Неопределено Тогда
	
		ТаблицаРасшифровки = ПолучитьИзВременногоХранилища(СтруктураРеквизитовФормы.АдресВременногоХранилищаРасшифровки);

		Если СтруктураРеквизитовФормы.мСохранятьРасшифровку = Истина Тогда
			СписокСохранения.Вставить("Расшифровка", ТаблицаРасшифровки);
		КонецЕсли;
		
	КонецЕсли;
	
	// Сохраним список организаций, по которому необходимо собирать отчет.
	СписокСохранения.Вставить("ГруппаОрганизаций", СтруктураРеквизитовФормы.ГруппаОрганизаций);
	
	// Сохраним тип адреса выводимый в отчете.
	СписокСохранения.Вставить("ТипАдреса", СтруктураРеквизитовФормы.ТипАдреса);
	
	СписокСохранения.Вставить("Адрес9Запятых", СтруктураРеквизитовФормы.мАдресДляВыгрузки);

	// вствляем флажок разрешения печати без штрихкода
	СписокСохранения.Вставить("ПечатьБезШтрихкодаРазрешена", СтруктураРеквизитовФормы.мПечатьБезШтрихкодаРазрешена);
	
	СписокСохранения.Вставить("мПроверятьСоотношенияПриПечатиИВыгрузки", СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки);
	
	СписокСохранения.Вставить("АвторасчетПоказателей", СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);
		
	СохрСтруктураМногострочныхЧастей = Новый Структура;
	
	Для Каждого МногострочнаяЧасть Из СтруктураМногострочныхЧастей Цикл
		
		НовыйЭлементСтруктуры = Новый Структура;
		
		Для Каждого ЭлементСтруктуры Из МногострочнаяЧасть.Значение Цикл
			
			Если ЭлементСтруктуры.Ключ = "ИмяПоляТабличногоДокумента" Тогда
				
				НовыйЭлементСтруктуры.Вставить(ЭлементСтруктуры.Ключ, "ПолеТабличногоДокумента" + ЭлементСтруктуры.Значение);
				
			ИначеЕсли ЭлементСтруктуры.Ключ = "Состав" Тогда	
				
				ТаблЗнач = Новый ТаблицаЗначений;
				
				Колонки = ЭлементСтруктуры.Значение[0];
				
				Для Каждого Колонка Из Колонки Цикл
					
					ТаблЗнач.Колонки.Добавить(Колонка.Ключ);
					
				КонецЦикла;
				
				Для Каждого Элемент Из ЭлементСтруктуры.Значение Цикл
					
					СтрТаблЗнач = ТаблЗнач.Добавить();
					
					Для Каждого ЗначениеКолонки Из Элемент Цикл
						
						СтрТаблЗнач[ЗначениеКолонки.Ключ] = ЗначениеКолонки.Значение;
						
					КонецЦикла;
					
				КонецЦикла;
				
				НовыйЭлементСтруктуры.Вставить(ЭлементСтруктуры.Ключ, ТаблЗнач);
				
			Иначе 
				
				НовыйЭлементСтруктуры.Вставить(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Значение);
				
			КонецЕсли;
			
		КонецЦикла;
		
		СохрСтруктураМногострочныхЧастей.Вставить(МногострочнаяЧасть.Ключ, НовыйЭлементСтруктуры);
		
	КонецЦикла;
	
	СписокСохранения.Вставить("СтруктураМногострочныхЧастей", СохрСтруктураМногострочныхЧастей);
	
	СписокСохранения.Вставить("ВидСдачиОтчетности", ВидСдачиОтчетности);
	СписокСохранения.Вставить("ОтчетностьВРосстат", ОтчетностьВРосстат);
	СписокСохранения.Вставить("НастройкиФормыВыбораПечати", НастройкиФормыВыбораПечати);
	
	СписокСохранения.Вставить("СпособСозданияОрганизации", СтруктураРеквизитовФормы.СпособСозданияОрганизации);
	
	СписокСохранения.Вставить("ДатаСозданияОрганизации", СтруктураРеквизитовФормы.ДатаСозданияОрганизации);
	
	СписокСохранения.Вставить("ДатаАктуальностиДанных", СтруктураРеквизитовФормы.ДатаАктуальностиДанных);
		
	СписокСохранения.Вставить("ПроверкаАктуализацииДанныхПредупреждение", "");
	
	Если Элементы.ПанельПроверкиАктуальностиДанных.Видимость Тогда
		
		СписокСохранения.Вставить("ПроверкаАктуализацииДанныхПредупреждение", Элементы.ПроверкаАктуализацииДанныхПредупреждение.Заголовок);
		
	КонецЕсли;
	
	ХранилищеДанных = Новый ХранилищеЗначения(СписокСохранения);
	СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета = ХранилищеДанных;
	
	// записываем документ, хранящий данные отчета
	Попытка
		СтруктураРеквизитовФормы.мСохраненныйДок.Записать();
		РегламентированнаяОтчетность.СохранитьСтатусОтправкиРеглОтчета(ЭтаФорма);
	Исключение
		Если НЕ Автосохранение Тогда
			
			Сообщение = Новый СообщениеПользователю;

			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), РегламентированнаяОтчетностьКлиентСервер.СформироватьТекстСообщения(ОписаниеОшибки()));

			Сообщение.Сообщить();
			
		КонецЕсли;
		СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
		Возврат Ложь;
	КонецПопытки;
	
	СохранитьДеревоСтраницОтчета(СтруктураРеквизитовФормы.мСохраненныйДок);
	
	Модифицированность = Ложь;

	СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
	
	Если НЕ СтруктураРеквизитовФормы.мБезОткрытияФормы
       И НЕ СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
				   
    	ЗаблокироватьДанныеДляРедактирования(СтруктураРеквизитовФормы.мСохраненныйДок, , ЭтаФорма.УникальныйИдентификатор);

    КонецЕсли;
	
	Если ДанныеДляРазблокирования <> Неопределено Тогда
		РазблокироватьДанныеДляРедактирования(ДанныеДляРазблокирования.Ключ, ДанныеДляРазблокирования.ИдФормы);
	КонецЕсли;
	
	Возврат Истина;

КонецФункции

&НаСервере
Процедура КонвертироватьДанныеФормыДеревоВДеревоЗначений(ДеревоЗначений, Родитель)
	
	Если Родитель.ПолучитьЭлементы().Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ЭлементДерева Из Родитель.ПолучитьЭлементы() Цикл
		
		НоваяСтрокаДерева = ДеревоЗначений.Строки.Добавить();
		
		НоваяСтрокаДерева["Наименование"]     = ЭлементДерева["Наименование"];
		НоваяСтрокаДерева["Идентификатор"]    = ЭлементДерева["Идентификатор"];
		НоваяСтрокаДерева["Отключаемость"]    = ЭлементДерева["Отключаемость"];
		НоваяСтрокаДерева["ВключатьВОтчет"]   = ЭлементДерева["ВключатьВОтчет"];
		НоваяСтрокаДерева["ОбластиЗатенения"] = ДанныеФормыВЗначение(ЭлементДерева["ОбластиЗатенения"], Тип("ТаблицаЗначений"));
		
		КонвертироватьДанныеФормыДеревоВДеревоЗначений(НоваяСтрокаДерева, ЭлементДерева);
		
	КонецЦикла;
				
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоказателиОтчетаНаСервере(ПоказателиОтчета)
	
	Префикс = "ПолеТабличногоДокумента";
	
	Для Каждого Раздел Из мСвойстваРазделовДекларации.ПолучитьЭлементы() Цикл
			
		Если НЕ Раздел.МногостраничностьВРазделе Тогда
			ПоказателиОтчета.Вставить(Префикс + Раздел.ИмяСтраницы, ЭтаФорма["СтруктураДанных" + Раздел.ИмяСтраницы]);
		КонецЕсли;
	
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СохранитьДеревоСтраницОтчета(Знач мСохраненныйДок)
	
	Если мСохраненныйДок <> Неопределено Тогда
				
		Если ТипЗнч(мСохраненныйДок) = Тип("ДокументСсылка.РегламентированныйОтчет") Тогда
			мСохраненныйДок = мСохраненныйДок.ПолучитьОбъект();
		КонецЕсли;
		
		Если Не мСохраненныйДок.ЭтоНовый() Тогда
			
			// Сохраняем выбранные листы для печати в хранилище
			ХранилищеДанных = Новый ХранилищеЗначения(РеквизитФормыВЗначение("мДеревоСтраницОтчета"));
			мСохраненныйДок.ДеревоНастройкиСтраниц = ХранилищеДанных;
			Попытка
				мСохраненныйДок.Записать();
			Исключение
			КонецПопытки;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьОтчет() Экспорт
		
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьОтчетЗавершение", ЭтотОбъект);
	
	Если Модифицированность Тогда
		СохранитьНаКлиенте(,ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьОтчетЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ФормаВыгрузкиРеглОтчета = ПолучитьФорму("Документ.ВыгрузкаРегламентированныхОтчетов.Форма.ФормаДокумента", , ЭтаФорма);
	
	СпДокОсн = Новый СписокЗначений;
	СпДокОсн.Добавить(СтруктураРеквизитовФормы.мСохраненныйДок);
	
	ФормаВыгрузкиРеглОтчета.СформироватьИЗаписать(СпДокОсн);
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьНаСервере(НаимТекущегоРаздела = "")
	
	Если НЕ ЗначениеЗаполнено(НаимТекущегоРаздела)
	 ИЛИ НаимТекущегоРаздела = "Баланс" Тогда
	 	СтруктураДанныхБаланс.Очистить();
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(НаимТекущегоРаздела)
	 ИЛИ НаимТекущегоРаздела = "ОФР" Тогда
		СтруктураДанныхОФР.Очистить();
	КонецЕсли;
			
	Если НЕ ЗначениеЗаполнено(НаимТекущегоРаздела)
	 ИЛИ НаимТекущегоРаздела = "ОЦИС" Тогда
		СтруктураДанныхОЦИС.Очистить();
	КонецЕсли;	
			
	ЗаполнитьПустыеСтруктурыДанных();
	
	Если НаимТекущегоРаздела = "Баланс" Тогда
		СтруктураДанныхБаланс.Вставить("НомерКорректировки", НомерКорректировки);
		СтруктураДанныхБаланс.Вставить("ДатаПодписиОтчета", ДатаПодписи);
		
		Если ВидСдачиОтчетности = 1 Тогда
			СтруктураДанныхБаланс.Вставить("ВидОтчетности", "Обычная");
		ИначеЕсли ВидСдачиОтчетности = 2 Тогда
			СтруктураДанныхБаланс.Вставить("ВидОтчетности", "Промежуточная при ликвидации/реорганизации");
		ИначеЕсли ВидСдачиОтчетности = 3 Тогда
			СтруктураДанныхБаланс.Вставить("ВидОтчетности", "Ликвидационная");
		КонецЕсли;
	ИначеЕсли НЕ ЗначениеЗаполнено(НаимТекущегоРаздела) Тогда  
		СтруктураДанныхБаланс.Вставить("НомерКорректировки", НомерКорректировки);
		СтруктураДанныхБаланс.Вставить("ДатаПодписиОтчета", ДатаПодписи);
		Если ВидСдачиОтчетности = 1 Тогда
			СтруктураДанныхБаланс.Вставить("ВидОтчетности", "Обычная");
		ИначеЕсли ВидСдачиОтчетности = 2 Тогда
			СтруктураДанныхБаланс.Вставить("ВидОтчетности", "Промежуточная при ликвидации/реорганизации");
		ИначеЕсли ВидСдачиОтчетности = 3 Тогда
			СтруктураДанныхБаланс.Вставить("ВидОтчетности", "Ликвидационная");
		КонецЕсли;
		ОблВидОтчетности = ТабличныйДокумент.Области.Найти("ВидОтчетности");
		Если ОблВидОтчетности <> Неопределено Тогда 
			ОблВидОтчетности.Значение = СтруктураДанныхБаланс.ВидОтчетности;
			ТабличныйДокумент.Области.Найти("НомерКорректировки").Значение = НомерКорректировки;
			ТабличныйДокумент.Области.Найти("ДатаПодписиОтчета").Значение = ДатаПодписи;
		КонецЕсли;
	КонецЕсли;
	
	ОчиститьТабличноеПоле(НаимТекущегоРаздела);
				
	ВывестиМакетСтраницыВТабличныйДокументНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела, 1);
	
	РасчетНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
	// Очищаем расшифровку.
	Если СтруктураРеквизитовФормы.АдресВременногоХранилищаРасшифровки <> Неопределено Тогда
	
		ТаблицаРасшифровки = ПолучитьИзВременногоХранилища(СтруктураРеквизитовФормы.АдресВременногоХранилищаРасшифровки);

		Если НЕ ПустаяСтрока(НаимТекущегоРаздела) Тогда
			Для Каждого ОбластьОтчета Из ТабличныйДокумент.Области Цикл
				Если ОбластьОтчета.ТипОбласти <> ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
					Продолжить;
				КонецЕсли;
				СтрокиРасшифровки = ТаблицаРасшифровки.НайтиСтроки(Новый Структура("ИмяПоказателя", ОбластьОтчета.Имя));
				Для Каждого СтрокаРасшифровки Из СтрокиРасшифровки Цикл
					ТаблицаРасшифровки.Удалить(СтрокаРасшифровки);
				КонецЦикла;
			КонецЦикла;
		Иначе
			ТаблицаРасшифровки.Очистить();
			Элементы.Расшифровать.Доступность = Ложь;
			Элементы.ТабличныйДокументКонтекстноеМенюРасшифровать.Доступность = Ложь;
		КонецЕсли;
		
	КонецЕсли;

	СтруктураДанныхБаланс.Вставить("НомерКорректировки", Строка(НомерКорректировки));
	ОблНомерКорректировки = ТабличныйДокумент.Области.Найти("НомерКорректировки");
	Если ОблНомерКорректировки <> Неопределено Тогда 
		ОблНомерКорректировки.Значение = Строка(НомерКорректировки);
	КонецЕсли;
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьТабличноеПоле(НаимТекущегоРаздела = "")
	
	ПоказателиНеПодлежащиеОчистке = Новый Массив;
	ПоказателиНеПодлежащиеОчистке.Добавить("ОргНазв");
	ПоказателиНеПодлежащиеОчистке.Добавить("ОргКодОКПО");
	ПоказателиНеПодлежащиеОчистке.Добавить("ОргОтрасль");
	ПоказателиНеПодлежащиеОчистке.Добавить("ОргКодОКВЭД");
	ПоказателиНеПодлежащиеОчистке.Добавить("ОргФорма");
	ПоказателиНеПодлежащиеОчистке.Добавить("ОргКодОКОПФ");
	ПоказателиНеПодлежащиеОчистке.Добавить("ОргФормаСобств");
	ПоказателиНеПодлежащиеОчистке.Добавить("ОргКодОКФС");
	ПоказателиНеПодлежащиеОчистке.Добавить("ОргПочтАдрес");
	ПоказателиНеПодлежащиеОчистке.Добавить("ОргДиректор");
	ПоказателиНеПодлежащиеОчистке.Добавить("ОргБухгалтер");
	ПоказателиНеПодлежащиеОчистке.Добавить("ВидОтчетности");
	ПоказателиНеПодлежащиеОчистке.Добавить("НомерКорректировки");
	
	// Определяем содержание многострочных блоков и удаляем все строки кроме первой
	Для Каждого ЭлементСтруктуры Из СтруктураМногострочныхЧастей Цикл
		
		СтруктураМногострочнойЧасти = ЭлементСтруктуры.Значение;
		
		Если ЗначениеЗаполнено(НаимТекущегоРаздела)
		   И НЕ СтруктураМногострочнойЧасти.ИмяПоляТабличногоДокумента = НаимТекущегоРаздела Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураГруппы = СтруктураМногострочнойЧасти.Состав;
		
		КопияСтруктураГруппы = СтруктураГруппы[0];
		
		// очищаем структуру группы и воссоздаем строку по умолчанию
		СтруктураГруппы.Очистить();
		СтруктураГруппы.Добавить(КопияСтруктураГруппы);
		
	КонецЦикла;
	
	Для Инд = 0 По ТабличныйДокумент.Области.Количество() - 1 Цикл
		ТекущаяОбласть = ТабличныйДокумент.Области[Инд];

		// Ячейки не подлежащие очистки
		Если ПоказателиНеПодлежащиеОчистке.Найти(ТекущаяОбласть.Имя) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;

		Если Не ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			Продолжить;
		КонецЕсли;

		Если ТекущаяОбласть.СодержитЗначение <> Неопределено И Не ТекущаяОбласть.СодержитЗначение Тогда	
			Продолжить;
		КонецЕсли;

		Если ТекущаяОбласть.Защита <> Неопределено И ТекущаяОбласть.Защита Тогда	
			Продолжить;
		КонецЕсли;

		ТекущаяОбласть.Очистить();
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиМакетСтраницыВТабличныйДокументНаСервере(ИмяТекРаздела, НомерСтраницыРазделаОтчета)
		
	СохранитьДанныеРаздела(СтруктураРеквизитовФормы.НаимТекущегоРаздела, Истина);
			
	ВывестиМакетВТаблДокНаСервере(ИмяТекРаздела, НомерСтраницыРазделаОтчета);
	
	СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяТекРаздела;
		
	ПоказатьПериод(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
	Если НЕ ТабличныйДокумент.Области.Найти("ДатаПодписиОтчета") = Неопределено Тогда
		ТабличныйДокумент.Области.ДатаПодписиОтчета.Значение = ДатаПодписи;
	КонецЕсли;
		
	ЗаполнитьСведенияОбОрганизацииНаСервере();
				
КонецПроцедуры

&НаСервере
Процедура ВывестиМакетВТаблДокНаСервере(ИмяТекРаздела, НомерСтраницыРазделаОтчета)
	
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + ИмяТекРаздела));
		
	Для Каждого ЭлСтруктуры Из ЭтаФорма["СтруктураДанных" + ИмяТекРаздела] Цикл
		Попытка
			ТабличныйДокумент.Области[ЭлСтруктуры.Ключ].Значение = ЭлСтруктуры.Значение;
		Исключение
		КонецПопытки;
	КонецЦикла;
	
	Если ИмяТекРаздела <> "Баланс" Тогда
		Если ТабличныйДокумент.Области.Найти("ОргДиректор") <> Неопределено
			И СтруктураДанныхБаланс.Свойство("ОргДиректор") Тогда
			ТабличныйДокумент.Области.ОргДиректор.Значение = СтруктураДанныхБаланс.ОргДиректор;
		КонецЕсли;
	КонецЕсли;
	
	Для Каждого ЭлементСтруктуры Из СтруктураМногострочныхЧастей Цикл
		ПеренумероватьСтрокиИЗаполнитьЗаголовкиМногострочнойЧасти(ЭлементСтруктуры.Значение, ИмяТекРаздела)
	КонецЦикла;
	
	УстановитьФорматВыводаНаСервере(ИмяТекРаздела);
	
	УстановитьЦветФонаЯчейкиНаСервере(,, ИмяТекРаздела);
	
	ЗаполнитьПримечанияКодовСтрок(ИмяТекРаздела);
	
	Если ИмяТекРаздела = "Баланс" Тогда 
		Если РегламентированнаяОтчетностьВызовСервера.ИспользуетсяОднаОрганизация() Тогда
			ТабличныйДокумент.Области.ОрганизацииДляЗаполненияОтчета.Текст = "";
			ТабличныйДокумент.Области.ОрганизацииДляЗаполненияОтчета.ГиперСсылка = Ложь;
		КонецЕсли;
		
		Если НЕ СтруктураРеквизитовФормы.ОтображатьКнопкуЗаполнить Тогда
			ТабличныйДокумент.Области.ОрганизацииДляЗаполненияОтчета.Текст = "";
			ТабличныйДокумент.Области.ОрганизацииДляЗаполненияОтчета.ГиперСсылка = Ложь;
			СтруктураРеквизитовФормы.мСохранятьРасшифровку = Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПримечанияКодовСтрок(НаимРаздела)
	
	ТекстПримечания = "Код строки необходимо указать по показателю,
	                  |имеющему наибольший удельный вес в составе укрупненного
	                  |(Подробнее см. Справку к отчету)";
	
	Если НаимРаздела = "Баланс" Тогда
		
		ТабличныйДокумент.Области["П000010000103"].Примечание.Текст = ТекстПримечания;
		ТабличныйДокумент.Области["П000010000203"].Примечание.Текст = ТекстПримечания;
		ТабличныйДокумент.Области["П000010000403"].Примечание.Текст = ТекстПримечания;
		ТабличныйДокумент.Области["П000010000603"].Примечание.Текст = ТекстПримечания;
		ТабличныйДокумент.Области["П000010000703"].Примечание.Текст = ТекстПримечания;
		ТабличныйДокумент.Области["П000010000803"].Примечание.Текст = ТекстПримечания;
		ТабличныйДокумент.Области["П000010001003"].Примечание.Текст = ТекстПримечания;
		
	ИначеЕсли НаимРаздела = "ОФР" Тогда
		
		ТабличныйДокумент.Области["П000020000202"].Примечание.Текст = ТекстПримечания;
		ТабличныйДокумент.Области["П000020000402"].Примечание.Текст = ТекстПримечания;
		ТабличныйДокумент.Области["П000020000602"].Примечание.Текст = ТекстПримечания;
		
	ИначеЕсли НаимРаздела = "ОЦИС" Тогда
		
		ТабличныйДокумент.Области["П000100621002"].Примечание.Текст = ТекстПримечания;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПеренумероватьСтрокиИЗаполнитьЗаголовкиМногострочнойЧасти(СтруктураМногострочнойЧасти, ИмяТекРаздела)

	Перем Кодификаторы;
	Перем Заголовки;
	
	Если НЕ СтруктураМногострочнойЧасти.ИмяПоляТабличногоДокумента = ИмяТекРаздела Тогда
		Возврат;
	КонецЕсли;
	
	// Если в описании структуры многострочной части указаны кодификаторы, то производится перенумерация
	Если СтруктураМногострочнойЧасти.Свойство("Кодификаторы", Кодификаторы) Тогда
		Если ТипЗнч(Кодификаторы) = Тип("Массив") Тогда
			Для Каждого Кодификатор Из Кодификаторы Цикл
				
				КоличествоКодов = СтруктураМногострочнойЧасти.Состав.Количество();
				МаксимальноеКоличествоСтрок = Неопределено;
				Если СтруктураМногострочнойЧасти.Свойство("Масштаб")
				   И СтруктураМногострочнойЧасти.Масштаб.Свойство("МаксимальноеКоличествоСтрок", МаксимальноеКоличествоСтрок)
				   И МаксимальноеКоличествоСтрок <> 0 Тогда
					КоличествоКодов = Мин(МаксимальноеКоличествоСтрок, КоличествоКодов);
				КонецЕсли;
				Для Инд = 1 По КоличествоКодов Цикл
					ОбластьСКодом = ТабличныйДокумент.Области[Кодификатор.Область + "_" + СтрокаЧГ0(Инд)];
					ОбластьСКодом.Текст = Формат(Кодификатор.Код + Инд - 1, "ЧГ=0");
				КонецЦикла;
				// Для остальных строк коды не назначаются.
				Для Инд = КоличествоКодов + 1 По СтруктураМногострочнойЧасти.Состав.Количество() Цикл
					ОбластьСКодом = ТабличныйДокумент.Области[Кодификатор.Область + "_" + СтрокаЧГ0(Инд)];
					ОбластьСКодом.Текст = "";
				КонецЦикла;
				
			КонецЦикла;
		ИначеЕсли ТипЗнч(Кодификаторы) = Тип("Структура") Тогда
			Для Инд = 1 По СтруктураМногострочнойЧасти.Состав.Количество() Цикл
				ОбластьСКодом = ТабличныйДокумент.Области[Кодификаторы.Область + "_" + СтрокаЧГ0(Инд)];
				ОбластьСКодом.Текст = Формат(Кодификаторы.Код + Инд - 1, "ЧГ=0");
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;

	// Если в описании структуры встречаются поля с датами, то производится их заполнение
	Если СтруктураМногострочнойЧасти.Свойство("Заголовки", Заголовки) Тогда
		Если ТипЗнч(Заголовки) = Тип("Массив") Тогда
			Для Каждого ЗаголовокСтроки Из Заголовки Цикл
				Для Инд = 1 По СтруктураМногострочнойЧасти.Состав.Количество() Цикл
					ОбластьОтчета = ТабличныйДокумент.Области[ЗаголовокСтроки.Область + "_" + СтрокаЧГ0(Инд)];
					ОбластьОтчета.Текст = СтруктураРеквизитовФормы.ЗаголовкиОтчетов[ЗаголовокСтроки.Заголовок];
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораСтраниц(ВариантВыбора)
	
    Перем ТекущийРазделОтчетаСокрНаим;
	Перем НомерСтраницыРазделаОтчета;
	
	// Запоминаем текущий раздел, установленный в дереве разделов отчета.
	Если НЕ Элементы.РазделыОтчета.ТекущиеДанные = Неопределено Тогда
		ТекущийРазделОтчетаСокрНаим = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
		НомерСтраницыРазделаОтчета  = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета;
	КонецЕсли;
	
	мПараметры = Новый Структура;
	мПараметры.Вставить("ПроверкаСоотношений", Ложь);
	мПараметры.Вставить("Автосохранение", Ложь);
	мПараметры.Вставить("СчетчикСтраниц", Ложь);
	мПараметры.Вставить("ЗначенияИзСписка", Ложь);
	мПараметры.Вставить("ИмеетсяРеквизитДеревоВыбранныхСтраниц", Истина);
	Если СтруктураРеквизитовФормы.ОтображатьКнопкуРасшифровать Тогда
		мПараметры.Вставить("СохранятьРасшифровкуАвтозаполнения", Истина);
	КонецЕсли;
	Если СтруктураРеквизитовФормы.ДоступенМеханизмПечатиРеглОтчетностиСДвухмернымШтрихкодомPDF417 Тогда
		мПараметры.Вставить("РазрешитьВстроеннуюПечать", Ложь);
	КонецЕсли;
			
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ФлажокОтклАвтоРасчет", СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);
	ПараметрыФормы.Вставить("ЕдиницаИзмерения", СтруктураРеквизитовФормы.ЕдиницаИзмерения);
	ПараметрыФормы.Вставить("ТочностьЕдиницыИзмерения", СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения);
	ПараметрыФормы.Вставить("СохранятьРасшифровкуАвтозаполнения", СтруктураРеквизитовФормы.мСохранятьРасшифровку);
	ПараметрыФормы.Вставить("мПараметры", мПараметры);
					
	ФормаНастройкиОтчета = ПолучитьФорму(Лев(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, ".Форма.") + 6) + ".НастройкиОтчета", ПараметрыФормы, ЭтаФорма);
	
	мДеревоВыбранныхСтраниц.ПолучитьЭлементы().Очистить();
    
	КопироватьДанныеФормы(мДеревоСтраницОтчета, ФормаНастройкиОтчета.Дерево);
	
	ЗначениеАвторасчета = СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет;
	ЗначениеЕдИзм = СтруктураРеквизитовФормы.ЕдиницаИзмерения;
	ЗначениеЗпт   = СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения;
	
	ДополнительныеПараметры = Новый Структура("ЗначениеАвторасчета, ЗначениеЕдИзм, ЗначениеЗпт, НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим", ЗначениеАвторасчета, ЗначениеЕдИзм, ЗначениеЗпт, НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим);
	ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьФормуВыбораСтраницЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ФормаНастройкиОтчета.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
	ФормаНастройкиОтчета.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	ФормаНастройкиОтчета.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораСтраницЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	ЗначениеАвторасчета = ДополнительныеПараметры.ЗначениеАвторасчета;
	ЗначениеЕдИзм = ДополнительныеПараметры.ЗначениеЕдИзм;
	ЗначениеЗпт = ДополнительныеПараметры.ЗначениеЗпт;
	НомерСтраницыРазделаОтчета = ДополнительныеПараметры.НомерСтраницыРазделаОтчета;
	ТекущийРазделОтчетаСокрНаим = ДополнительныеПараметры.ТекущийРазделОтчетаСокрНаим;
	
	Модифицированность = Истина;
	
	флЗначенияИдентичны = Истина;
	
	Для Индекс = 0 По мДеревоСтраницОтчета.ПолучитьЭлементы().Количество() - 1 Цикл
		
		Если НЕ мДеревоСтраницОтчета.ПолучитьЭлементы()[Индекс].ПоказатьСтраницу = мДеревоВыбранныхСтраниц.ПолучитьЭлементы()[Индекс].ПоказатьСтраницу Тогда
			флЗначенияИдентичны = Ложь;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЗначениеАвторасчета <> СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Тогда
		
		ИзменитьТаблицуВариантовЗаполненияНаСервере();
		
	КонецЕсли;
	
	Если ЗначениеЕдИзм <> СтруктураРеквизитовФормы.ЕдиницаИзмерения
		ИЛИ ЗначениеЗпт <> СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения Тогда
		ПослеСменыЕдИзмеренияИТочности();
	КонецЕсли;
	
	// Управляем видимостью страниц основной панели формы
	РегламентированнаяОтчетностьКлиент.ПоказатьСтраницыОтчетаНаКлиенте(ЭтаФорма);
	
	Если НЕ флЗначенияИдентичны Тогда
		
		СформироватьДеревоРазделовОтчетаНаКлиенте();
		
		Если НЕ ТекущийРазделОтчетаСокрНаим = Неопределено Тогда
			
			// Пытаемся найти ранее запомненный раздел.
			НайденнаяСтрока = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(РазделыОтчета.ПолучитьЭлементы(), "КолонкаРазделыОтчетаСокрНаим", ТекущийРазделОтчетаСокрНаим);
			
			Если НЕ НайденнаяСтрока = Неопределено 
				И НЕ НомерСтраницыРазделаОтчета = Неопределено 
				И НайденнаяСтрока.ПолучитьЭлементы().Количество() > 0 Тогда
				
				НайденнаяСтрока = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(НайденнаяСтрока.ПолучитьЭлементы(), "КолонкаНомерСтраницыРазделаОтчета", НомерСтраницыРазделаОтчета);
				
			КонецЕсли;
			
			// В случае успешного поиска, устанавливаем курсор на найденный раздел.
			Если НЕ НайденнаяСтрока = Неопределено Тогда
				Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяСтрока.ПолучитьИдентификатор();
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура ИзменитьТаблицуВариантовЗаполненияНаСервере()
	
	РегламентированнаяОтчетностьКлиентСервер.ИзменитьТаблицуВариантовЗаполнения(ЭтаФорма, НЕ СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);
	
	ПолучитьСведенияОПоказателяхОтчета();
	
КонецПроцедуры

&НаКлиенте
Функция УниверсальнаяВыгрузка(Текст = Неопределено, ПроверятьБлокировки = Истина) Экспорт
			
	Возврат УниверсальнаяВыгрузкаXML(Текст);
	
КонецФункции

&НаКлиенте
Функция УниверсальнаяВыгрузкаXML(ТекстВыгрузки = Неопределено) Экспорт
	
	Перем ПараметрыВыгрузки;
	
	Если Модифицированность Тогда
		ТекстЗаголовка = ЗаголовокРегламентированногоОтчета(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета, СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
		
		ОргСтр = " (" + СтруктураРеквизитовФормы.Организация + ")";
		Если СтрНайти(ТекстЗаголовка, ОргСтр) = 0 Тогда
			ТекстЗаголовка = ТекстЗаголовка + ОргСтр;
		КонецЕсли;

		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Отчет """ + ТекстЗаголовка + """ не сохранен.";
		Сообщение.Сообщить();
		
		Возврат Ложь;
	КонецЕсли;
	
	Если Открыта() Тогда
		
		Если СтруктураРеквизитовФормы.ЕдиницаИзмерения = ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1 Тогда
			
			Сообщение = Новый СообщениеПользователю;

			Сообщение.Текст = НСтр("ru='Перед выгрузкой необходимо установить единицу измерения ""в тысячах"" или ""в миллионах"".'");

			Сообщение.Сообщить();
			
			Возврат Ложь;
			
		КонецЕсли;
		
		Если СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения <> 0 Тогда
			
			Сообщение = Новый СообщениеПользователю;

			Сообщение.Текст = НСтр("ru='Перед выгрузкой необходимо установить точность ""0"".'");

			Сообщение.Сообщить();
			
			Возврат Ложь;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ УниверсальнаяВыгрузкаXMLНаСервере(ТекстВыгрузки, ПараметрыВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	        	
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция УниверсальнаяВыгрузкаXMLНаСервере(ТекстВыгрузки, ПараметрыВыгрузки)
	
	СформироватьСтруктуруПоказателей();
	ПараметрыВыгрузки = СформироватьСтруктуруПараметров();
		
	Если НЕ ПроверитьВозможностьВыгрузки(ПараметрыВыгрузки) Тогда
		
		мДанныеОтчета = Неопределено;
		
		Возврат Ложь;
		
	КонецЕсли;
	
	ДеревоВыгрузки = ИзвлечьСтруктуруXML();
	
	ЗаполнитьДанными(ДеревоВыгрузки, ПараметрыВыгрузки);
	
	Если НЕ ПроверитьДанные(ДеревоВыгрузки) Тогда
		
		мДанныеОтчета = Неопределено;
		
		Возврат Ложь;
		
	КонецЕсли;
	
	ТекстВыгрузки = ВыгрузитьДеревоВXML(ДеревоВыгрузки, ПараметрыВыгрузки);
		
	СписокДополнительныхФайлов = Новый СписокЗначений;
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(ТекстВыгрузки);
	ПостроительDOM = Новый ПостроительDOM;
	
	КорневойУзел = ПостроительDOM.Прочитать(ЧтениеXML);
	
	ЭлементыПояснительнаяЗаписка = КорневойУзел.ПолучитьЭлементыПоИмени("ПояснЗап");
	Если ЭлементыПояснительнаяЗаписка.Количество() > 0 Тогда
		УзелДополнительногоФайла = ЭлементыПояснительнаяЗаписка[0];
		АтрибутУзла = УзелДополнительногоФайла.Атрибуты.ПолучитьИменованныйЭлемент("НаимФайлПЗ");
		Если АтрибутУзла.Указан Тогда
			СписокДополнительныхФайлов.Добавить(АтрибутУзла.Значение, "- файл пояснительной записки, присвоив ему имя");
		КонецЕсли;
	КонецЕсли;
	
	ЭлементыАудиторскоеЗаключение = КорневойУзел.ПолучитьЭлементыПоИмени("АудитЗакл");
	Если ЭлементыАудиторскоеЗаключение.Количество() > 0 Тогда
		УзелДополнительногоФайла = ЭлементыАудиторскоеЗаключение[0];
		АтрибутУзла = УзелДополнительногоФайла.Атрибуты.ПолучитьИменованныйЭлемент("НаимФайлАЗ");
		Если АтрибутУзла.Указан Тогда
			СписокДополнительныхФайлов.Добавить(АтрибутУзла.Значение, "- файл аудиторского заключения, присвоив ему имя");
		КонецЕсли;
	КонецЕсли;
	
	ЭлементыЗаявленияРевизионногоСоюза = КорневойУзел.ПолучитьЭлементыПоИмени("ЗаявСХПр");
	Если ЭлементыЗаявленияРевизионногоСоюза.Количество() > 0 Тогда
		УзелДополнительногоФайла = ЭлементыЗаявленияРевизионногоСоюза[0];
		АтрибутУзла = УзелДополнительногоФайла.Атрибуты.ПолучитьИменованныйЭлемент("НаимФайлЗСХП");
		Если АтрибутУзла.Указан Тогда
			СписокДополнительныхФайлов.Добавить(АтрибутУзла.Значение, "- файл заявления ревизионного союза сельскохозяйственных производителей, присвоив ему имя");
		КонецЕсли;
	КонецЕсли;
	
	Если СписокДополнительныхФайлов.Количество() > 0 Тогда
		
		Сообщение = Новый СообщениеПользователю;
				
		Сообщение.Текст = НСтр("ru='К файлу выгрузки бухгалтерской отчетности приложите:'");

		Сообщение.Сообщить();
		
		Для Каждого ДополнительныйФайл Из СписокДополнительныхФайлов Цикл
						
			Сообщение = Новый СообщениеПользователю;
						
			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1%2%3'"), ДополнительныйФайл.Представление, Символы.ПС, ДополнительныйФайл.Значение);

			Сообщение.Сообщить();
			
		КонецЦикла;
	КонецЕсли;
	
	мДанныеОтчета = Неопределено;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Функция ЗаголовокРегламентированногоОтчета(ДатаНач, ДатаКон, Периодичность = Неопределено) Экспорт
		
	СтруктураРеквизитовФормы.СтрПериодОтчета = ПредставлениеПериода( НачалоДня(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета), КонецДня(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета), "ФП = Истина" );
		
	Если СтрНайти(ЭтаФорма.Заголовок, СтруктураРеквизитовФормы.СтрПериодОтчета) = 0 Тогда
		Возврат ЭтаФорма.Заголовок + " за " + СтруктураРеквизитовФормы.СтрПериодОтчета;
	Иначе
		Возврат ЭтаФорма.Заголовок;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ВыгрузитьДеревоВXML(ДеревоВыгрузки, ПараметрыВыгрузки)
	
	ПотокXML = РегламентированнаяОтчетность.СоздатьНовыйПотокXML(); // создаем новый поток для записи
	ЗаписатьУзелДереваВXML(ДеревоВыгрузки, ПотокXML); // пишем дерево в поток
	ТекстДляЗаписи = ПотокXML.Закрыть(); // получаем текст XML
	ТекстДляЗаписи = "<?xml version=""1.0"" encoding=""windows-1251""?>" + Сред(ТекстДляЗаписи, СтрНайти(ТекстДляЗаписи, Символы.ПС));
	Возврат ТекстДляЗаписи;
	
КонецФункции

&НаСервере
Функция ЗаписатьУзелДереваВXML(СтрокаДерева, ПотокXML) Экспорт
	
	Если ТипЗнч(СтрокаДерева) = Тип("ДеревоЗначений") Тогда
		ПотокXML.ЗаписатьНачалоЭлемента("Файл");
		ПотокXML.ЗаписатьАтрибут("xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");
		Для каждого Стр Из СтрокаДерева.Строки Цикл
			ЗаписатьУзелДереваВXML(Стр, ПотокXML);
		КонецЦикла;
		ПотокXML.ЗаписатьКонецЭлемента();
	Иначе
		Если СтрокаДерева.Тип = "А" ИЛИ СтрокаДерева.Тип = "A" Тогда 
			ПотокXML.ЗаписатьАтрибут(СтрокаДерева.Код, Строка(СтрокаДерева.Значение));
		Иначе
			ПотокXML.ЗаписатьНачалоЭлемента(СтрокаДерева.Код);
			Для каждого Лист из СтрокаДерева.Строки Цикл
				ЗаписатьУзелДереваВXML(Лист, ПотокXML);
			КонецЦикла;
			ПотокXML.ЗаписатьТекст(Строка(СтрокаДерева.Значение));
			ПотокXML.ЗаписатьКонецЭлемента();
		КонецЕсли;
	КонецЕсли;

КонецФункции

&НаСервере
Функция ПроверитьПоказатели() Экспорт
	
	ПризнакПроверкиПоказателей = ПроверитьПоказателиXML();
	
	мДанныеОтчета = Неопределено;
	
	Возврат ПризнакПроверкиПоказателей;
	
КонецФункции

&НаСервере
Функция ПроверитьПоказателиXML() Экспорт
	
	СформироватьСтруктуруПоказателей();
	ПараметрыВыгрузки = СформироватьСтруктуруПараметров();
	
	Если НЕ ПроверитьВозможностьВыгрузки(ПараметрыВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	ДеревоВыгрузки = ИзвлечьСтруктуруXML();
	ЗаполнитьДанными(ДеревоВыгрузки, ПараметрыВыгрузки);
	Если НЕ ПроверитьДанные(ДеревоВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция СформироватьСтруктуруПоказателей()
	
	мДанныеОтчета = Новый Структура;
	
	СохрСтруктура = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить();
	ПоказателиОтчета = СохрСтруктура.ПоказателиОтчета;
				
	Для Каждого Раздел Из ПоказателиОтчета Цикл
		мДанныеОтчета.Вставить(Раздел.Ключ, Раздел.Значение);
	КонецЦикла;
		
	ОбработатьПоказателиПередВыгрузкой();
	
	АдресДляВыгрузки = "";
	Если ПустаяСтрока(ПоказателиОтчета.ПолеТабличногоДокументаБаланс.ОргПочтАдрес) Тогда
		СтруктураРеквизитовФормы.мАдресДляВыгрузки = "";
	ИначеЕсли НЕ СохрСтруктура.Свойство("Адрес9Запятых", АдресДляВыгрузки) ИЛИ НЕ ЗначениеЗаполнено(АдресДляВыгрузки) Тогда
		Адреса = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(СтруктураРеквизитовФормы.Организация, ДатаПодписи, "АдрФакт, АдрЮР, АдрПочт");
		Если ПустаяСтрока(СтрЗаменить(Адреса.АдрФакт, ",", "")) Тогда
			АдрФакт = "";
		Иначе
			АдрФакт = Адреса.АдрФакт;
		КонецЕсли;
		Если ПустаяСтрока(СтрЗаменить(Адреса.АдрЮР, ",", "")) Тогда
			АдрЮР = "";
		Иначе
			АдрЮР = Адреса.АдрЮР;
		КонецЕсли;
		Если ПустаяСтрока(СтрЗаменить(Адреса.АдрПочт, ",", "")) Тогда
			АдрПочт = "";
		Иначе
			АдрПочт = Адреса.АдрПочт;
		КонецЕсли;
		Если ЗначениеЗаполнено(АдрФакт) Тогда
			АдресДляВыгрузки = АдрФакт;
		ИначеЕсли ЗначениеЗаполнено(АдрЮР) Тогда
			АдресДляВыгрузки = АдрЮР;
		Иначе
			АдресДляВыгрузки = АдрПочт;
		КонецЕсли;
	КонецЕсли;
	мДанныеОтчета.Вставить("АдресДляВыгрузки", АдресДляВыгрузки);
	
	мДанныеОтчета.Вставить("СтруктураМногострочныхЧастей", СохрСтруктура.СтруктураМногострочныхЧастей);
	
КонецФункции

&НаСервере
Функция СформироватьСтруктуруПараметров()
	
	Перем ВидСдачиОтчетности; // переопределяем переменную для восстановления вида отчетности из сведений сохраненного документа
	
	Титульный = мДанныеОтчета.ПолеТабличногоДокументаБаланс;

	СоответствиеЕдиницыИзмеренияСдвигу = Новый Соответствие;
	СоответствиеЕдиницыИзмеренияСдвигу.Вставить(Перечисления.ПорядкиОкругленияОтчетности.Окр1000000, 6);
	СоответствиеЕдиницыИзмеренияСдвигу.Вставить(Перечисления.ПорядкиОкругленияОтчетности.Окр1000, 3);
	СоответствиеЕдиницыИзмеренияСдвигу.Вставить(Перечисления.ПорядкиОкругленияОтчетности.Окр1, 0);
	
	ПараметрыВыгрузки = Новый Структура;
	ПараметрыВыгрузки.Вставить("ВерсПрог", РегламентированнаяОтчетность.НазваниеИВерсияПрограммы());
	ПараметрыВыгрузки.Вставить("ДатаДок",  Формат(ТекущаяДатаСеанса(), "ДФ=дд.ММ.гггг"));
	
	СписокСохранения = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить();
	
	Если Месяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) = 12 Тогда
		ПериодОтчетности = "34";
	Иначе
		ПериодОтчетности = "";
	КонецЕсли;
	
	Если СписокСохранения.Свойство("ВидСдачиОтчетности", ВидСдачиОтчетности) Тогда
		Если ВидСдачиОтчетности = 2 Тогда
			// Промежуточная отчетность при ликвидации/реорганизации.
			ПериодОтчетности = "94";
		ИначеЕсли ВидСдачиОтчетности = 3 Тогда
			// Ликвидационная отчетность.
			ПериодОтчетности = "90";
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыВыгрузки.Вставить("Период", ПериодОтчетности);
	
	ПараметрыВыгрузки.Вставить("ОтчетГод",          Формат(СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания, "ДФ=гггг"));
	ПараметрыВыгрузки.Вставить("ВидДок",            Строка(СтруктураРеквизитовФормы.мСохраненныйДок.Вид));
	ПараметрыВыгрузки.Вставить("НаимОрг",           СокрЛП(Титульный.ОргНазв));
	ПараметрыВыгрузки.Вставить("ИННОрг",            СокрЛП(Титульный.ОргИНН));
	ПараметрыВыгрузки.Вставить("КППОрг",            СокрЛП(СтруктураРеквизитовФормы.Организация.КПП));
	ПараметрыВыгрузки.Вставить("КодИФНС",           СокрЛП(СтруктураРеквизитовФормы.Организация.КодНалоговогоОргана));
	ПараметрыВыгрузки.Вставить("КодИФНСПосредника", ?(СтруктураРеквизитовФормы.Организация.КрупнейшийНалогоплательщик,
		СокрЛП(СтруктураРеквизитовФормы.Организация.КодНалоговогоОрганаПолучателя), ""));
	
	ПараметрыВыгрузки.Вставить("ОКПО",  СокрЛП(Титульный.ОргКодОКПО));
	ПараметрыВыгрузки.Вставить("ОКВЭД", СокрЛП(Титульный.ОргКодОКВЭД));
	ПараметрыВыгрузки.Вставить("ОКОПФ", СокрЛП(Титульный.ОргКодОКОПФ));
	ПараметрыВыгрузки.Вставить("ОКФС",  СокрЛП(Титульный.ОргКодОКФС));
	ПараметрКодЕИ = "";
	Если ЗначениеЗаполнено(Титульный.КодЕИ) Тогда
		ПараметрКодЕИ = СокрЛП(Титульный.КодЕИ);
	ИначеЕсли ЗначениеЗаполнено(СтруктураДанныхБаланс.КодЕИ) Тогда
		ПараметрКодЕИ = СокрЛП(СтруктураДанныхБаланс.КодЕИ);
	Иначе
		Попытка
			ПараметрКодЕИ = СокрЛП(ТабличныйДокумент.Области.КодЕИ.Значение);
		Исключение
			Если СтруктураРеквизитовФормы.ЕдиницаИзмерения
				= ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1 Тогда
				ПараметрКодЕИ = "383";
			ИначеЕсли СтруктураРеквизитовФормы.ЕдиницаИзмерения
				= ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1000 Тогда
				ПараметрКодЕИ = "384";
			ИначеЕсли СтруктураРеквизитовФормы.ЕдиницаИзмерения
				= ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1000000 Тогда
				ПараметрКодЕИ = "385";
			КонецЕсли;
		КонецПопытки;
	КонецЕсли;
	ПараметрыВыгрузки.Вставить("ОКЕИ", ПараметрКодЕИ);
	
	ПараметрыВыгрузки.Вставить("ФорматВывода", "ЧДЦ=0; ЧН=0; ЧС=" + СоответствиеЕдиницыИзмеренияСдвигу[СтруктураРеквизитовФормы.мСохраненныйДок.ЕдиницаИзмерения]);
	
	ЗаполнитьСведенияПодписантов(ПараметрыВыгрузки);
		
	ПараметрыВыгрузки.Вставить("ТелОрг", РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(СтруктураРеквизитовФормы.мСохраненныйДок.Организация, СтруктураРеквизитовФормы.мСохраненныйДок.ДатаПодписи, "ТелОрганизации").ТелОрганизации);
	
	СтруктураАдреса = РегламентированнаяОтчетностьКлиентСервер.РазложитьАдрес(мДанныеОтчета.АдресДляВыгрузки);
	ПараметрыВыгрузки.Вставить("АдрИндекс",     СокрЛП(СтруктураАдреса.Индекс));
	ПараметрыВыгрузки.Вставить("АдрКодРегион",  РегламентированнаяОтчетностьВызовСервера.КодРегионаПоНазванию(СокрЛП(СтруктураАдреса.Регион)));
	ПараметрыВыгрузки.Вставить("АдрРегион",     СокрЛП(СтруктураАдреса.Регион));
	ПараметрыВыгрузки.Вставить("АдрРайон",      СокрЛП(СтруктураАдреса.Район));
	ПараметрыВыгрузки.Вставить("АдрГород",      СокрЛП(СтруктураАдреса.Город));
	ПараметрыВыгрузки.Вставить("АдрНаселПункт", СокрЛП(СтруктураАдреса.НаселенныйПункт));
	ПараметрыВыгрузки.Вставить("АдрУлица",      СокрЛП(СтруктураАдреса.Улица));
	ПараметрыВыгрузки.Вставить("АдрДом",        СокрЛП(СтруктураАдреса.Дом));
	ПараметрыВыгрузки.Вставить("АдрКорпус",     СокрЛП(СтруктураАдреса.Корпус));
	ПараметрыВыгрузки.Вставить("АдрКварт",      СокрЛП(СтруктураАдреса.Квартира));
	
	ПараметрыВыгрузки.Вставить("ПрефиксИмениФайлаВыгрузки", "NO_BUHSONO");
	
	ПараметрыВыгрузки.Вставить("ИдентификаторФайлаВыгрузки", Строка(Новый УникальныйИдентификатор));
	
	ПараметрыВыгрузки.Вставить("ИдФайл", СформироватьИдФайл(ПараметрыВыгрузки));
	
	// Условия включения узлов и элементов в выгрузку.
	ДеревоНастройкиСтраниц = СтруктураРеквизитовФормы.мСохраненныйДок.ДеревоНастройкиСтраниц.Получить();
	ПараметрыВыгрузки.Вставить("ВключитьОФР", РазделВключенВОтчет("ОФР", ДеревоНастройкиСтраниц));
		
	ПараметрыВыгрузки.Вставить("СтруктураМногострочныхЧастей", мДанныеОтчета.СтруктураМногострочныхЧастей);
	
	Возврат ПараметрыВыгрузки;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьПараметрыНастройкамиПоказателей(ПараметрыВыгрузки, Настройки)
	
	Для Каждого СтрокаНастройки Из Настройки.ПолучитьЭлементы() Цикл
		
		Если СтрокаНастройки.Отключаемость Тогда
			ПараметрыВыгрузки.Вставить("Вкл" + СтрокаНастройки.Идентификатор, СтрокаНастройки.ВключатьВОтчет);
		КонецЕсли;
		
		ЗаполнитьПараметрыНастройкамиПоказателей(ПараметрыВыгрузки, СтрокаНастройки);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПроверитьВозможностьВыгрузки(ПараметрыВыгрузки)
	
	СтатусПроверки = Истина;
	
	Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.Период) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "Выгрузка за указанный период не предусмотрена по формату представления в электронной форме!", "Баланс", "ДатаБаланса");
		СтатусПроверки = Ложь;
		Возврат СтатусПроверки;
	КонецЕсли;
	
	Если ПустаяСтрока(ПараметрыВыгрузки.КодИФНС) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "В справочнике ""Организации"" для текущей организации не задан код ИФНС, необходимый для формирования имени файла выгрузки!", "Баланс");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ПустаяСтрока(ПараметрыВыгрузки.КППОрг) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "В справочнике ""Организации"" для текущей организации не задан КПП, необходимый для формирования корректного файла выгрузки!", "Баланс");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ПустаяСтрока(ПараметрыВыгрузки.НаимОрг) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На указано полное наименование организации!", "Баланс", "ОргНазв");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.ИННОрг) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "Не задан ИНН организации!", "Баланс", "ОргИНН");
		СтатусПроверки = Ложь;
	ИначеЕсли НЕ РегламентированнаяОтчетностьВызовСервера.ИННСоответствуетТребованиямНаСервере(ПараметрыВыгрузки.ИННОрг, Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "Задан некорректный ИНН юридического лица!", "Баланс", "ОргИНН");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ПараметрыВыгрузки.Свойство("ПрПодп") Тогда
		// Формат выгрузки 5.02.
		Если ПараметрыВыгрузки.ПрПодп = "1" Тогда
			// Руководитель организации.
			Если ПустаяСтрока(ПараметрыВыгрузки.ПодпФамилия) Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "Не удалось определить фамилию руководителя!", "Баланс", "ОргДиректор");
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			Если ПустаяСтрока(ПараметрыВыгрузки.ПодпИмя) Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "Не удалось определить имя руководителя!", "Баланс", "ОргДиректор");
				СтатусПроверки = Ложь;
			КонецЕсли;
			
		Иначе
			// Уполномоченный представитель.
			Если ПустаяСтрока(ПараметрыВыгрузки.ПодпФамилия) Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "Не удалось определить фамилию уполномоченного представителя!", "Баланс", "ОргДиректор");
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			Если ПустаяСтрока(ПараметрыВыгрузки.ПодпИмя) Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "Не удалось определить имя уполномоченного представителя!", "Баланс", "ОргДиректор");
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			Если ПустаяСтрока(ПараметрыВыгрузки.ПодпНаимДок) Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "Не задано наименование документа, удостоверяющего полномочия представителя!", "Баланс", "");
				СтатусПроверки = Ложь;
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		// Формат выгрузки 5.01.
		Если ПустаяСтрока(ПараметрыВыгрузки.ФамилияРук) Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "Не удалось определить фамилию руководителя!", "Баланс", "ОргДиректор");
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		Если ПустаяСтрока(ПараметрыВыгрузки.ИмяРук) Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "Не удалось определить имя руководителя!", "Баланс", "ОргДиректор");
			СтатусПроверки = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ПараметрыВыгрузки.ОКПО) И (СтрДлина(ПараметрыВыгрузки.ОКПО) < 8 ИЛИ СтрДлина(ПараметрыВыгрузки.ОКПО) > 10 ИЛИ НЕ СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(ПараметрыВыгрузки.ОКПО)) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На титульном листе задан некорректный код по ОКПО!", "Баланс", "ОргКодОКПО");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ПустаяСтрока(ПараметрыВыгрузки.ОКВЭД) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "Не указано значение кода вида деятельности по ОКВЭД!", "Баланс", "ОргКодОКВЭД");
		СтатусПроверки = Ложь;
	ИначеЕсли НЕ РегламентированнаяОтчетностьКлиентСервер.ОКВЭДСоответствуетТребованиям(ПараметрыВыгрузки.ОКВЭД) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "Указано некорректное значение кода вида деятельности по ОКВЭД! Допустимы значения, соответствующие следующим шаблонам: ""XX"", ""XX.X"", ""XX.XX"", ""XX.XX.X"", ""XX.XX.XX"" (X - любая цифра).!", "Баланс", "ОргКодОКВЭД");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ПустаяСтрока(ПараметрыВыгрузки.ОКОПФ) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "Не задан код по ОКОПФ!", "Баланс", "ОргКодОКОПФ");
		СтатусПроверки = Ложь;
	ИначеЕсли (СтрДлина(ПараметрыВыгрузки.ОКОПФ) <> 2 И СтрДлина(ПараметрыВыгрузки.ОКОПФ) <> 5) ИЛИ НЕ СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(ПараметрыВыгрузки.ОКОПФ) Тогда	
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "Задан некорректный код по ОКОПФ!", "Баланс", "ОргКодОКОПФ");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ПустаяСтрока(ПараметрыВыгрузки.ОКФС) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "Не задан код по ОКФС!", "Баланс", "ОргКодОКФС");
		СтатусПроверки = Ложь;
	ИначеЕсли СтрДлина(ПараметрыВыгрузки.ОКФС) <> 2 ИЛИ НЕ СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(ПараметрыВыгрузки.ОКФС) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "Задан некорректный код по ОКФС!", "Баланс", "ОргКодОКФС");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ПустаяСтрока(ПараметрыВыгрузки.ОКЕИ) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "Не задан код по ОКЕИ!", "Баланс", "КодЕИ");
		СтатусПроверки = Ложь;
	ИначеЕсли СтрДлина(ПараметрыВыгрузки.ОКЕИ) <> 3 ИЛИ НЕ СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(ПараметрыВыгрузки.ОКЕИ) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "Задан некорректный код по ОКЕИ!", "Баланс", "КодЕИ");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.АдрКодРегион) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "Требуется указание как минимум кода региона в адресе!", "Баланс", "ОргПочтАдрес");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	// Коды строк в бухгалтерском балансе.
	ПроверитьКодСтрокиБаланс(СтатусПроверки, "П0000100001", "Материальные внеоборотные активы");
	ПроверитьКодСтрокиБаланс(СтатусПроверки, "П0000100002", "Нематериальные, финансовые и другие внеоборотные активы");
	ПроверитьКодСтрокиБаланс(СтатусПроверки, "П0000100004", "Другие оборотные активы");
	ПроверитьКодСтрокиБаланс(СтатусПроверки, "П0000100006", "Целевые средства");
	ПроверитьКодСтрокиБаланс(СтатусПроверки, "П0000100007", "Фонд недвижимого и особо ценного движимого имущества и иные целевые фонды");
	ПроверитьКодСтрокиБаланс(СтатусПроверки, "П0000100008", "Долгосрочные обязательства");
	ПроверитьКодСтрокиБаланс(СтатусПроверки, "П0000100010", "Другие краткосрочные обязательства");
	
	// Коды строк в отчете о финансовых результатах.
	ПроверитьКодСтрокиОФР(СтатусПроверки, "П0000200002", "Расходы по обычной деятельности");
	ПроверитьКодСтрокиОФР(СтатусПроверки, "П0000200004", "Прочие доходы");
	ПроверитьКодСтрокиОФР(СтатусПроверки, "П0000200006", "Налоги на прибыль (доходы)");
	
	// Коды строк в отчете о целевом использовании средств.
	ПроверитьКодСтрокиОЦИС(СтатусПроверки, "П0001006210", "Взносы и иные целевые  поступления");
	
	Возврат СтатусПроверки;
	
КонецФункции

&НаСервере
Процедура ПроверитьКодСтрокиОФР(СтатусПроверки, ИмяПоказателя, НаименованиеСтроки)
	
	ДанныеОтчета = мДанныеОтчета.ПолеТабличногоДокументаОФР;
	
	КодСтроки = СокрЛП(ДанныеОтчета[ИмяПоказателя + "02"]);
	Графа03 = ДанныеОтчета[ИмяПоказателя + "03"];
	Графа04 = ДанныеОтчета[ИмяПоказателя + "04"];
	
	Если ЗначениеЗаполнено(КодСтроки) ИЛИ ЗначениеЗаполнено(Графа03) ИЛИ ЗначениеЗаполнено(Графа04) Тогда
		Если ПустаяСтрока(КодСтроки) Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "Не указан код строки """ + НаименованиеСтроки + """ отчета о финансовых результатах", "ОФР", ИмяПоказателя + "02");
			СтатусПроверки = Ложь;
		ИначеЕсли СтрДлина(КодСтроки) <> 4 Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "Неверно указан код строки """ + НаименованиеСтроки + """ отчета о финансовых результатах", "ОФР", ИмяПоказателя + "02");
			СтатусПроверки = Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКодСтрокиОЦИС(СтатусПроверки, ИмяПоказателя, НаименованиеСтроки)
	
	ДанныеОтчета = мДанныеОтчета.ПолеТабличногоДокументаОЦИС;
	
	КодСтроки = СокрЛП(ДанныеОтчета[ИмяПоказателя + "02"]);
	Графа03 = ДанныеОтчета[ИмяПоказателя + "03"];
	Графа04 = ДанныеОтчета[ИмяПоказателя + "04"];
	
	Если ЗначениеЗаполнено(КодСтроки) ИЛИ ЗначениеЗаполнено(Графа03) ИЛИ ЗначениеЗаполнено(Графа04) Тогда
		Если ПустаяСтрока(КодСтроки) Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "Не указан код строки """ + НаименованиеСтроки + """ отчета о целевом использовании средств", "ОЦИС", ИмяПоказателя + "02");
			СтатусПроверки = Ложь;
		ИначеЕсли СтрДлина(КодСтроки) <> 4 Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "Неверно указан код строки """ + НаименованиеСтроки + """ отчета о целевом использовании средств", "ОЦИС", ИмяПоказателя + "02");
			СтатусПроверки = Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКодСтрокиБаланс(СтатусПроверки, ИмяПоказателя, НаименованиеСтроки)
	
	ДанныеОтчета = мДанныеОтчета.ПолеТабличногоДокументаБаланс;
	
	КодСтроки = СокрЛП(ДанныеОтчета[ИмяПоказателя + "03"]);

	Графа04 = ДанныеОтчета[ИмяПоказателя + "04"];
	Графа05 = ДанныеОтчета[ИмяПоказателя + "05"];
	Графа06 = ДанныеОтчета[ИмяПоказателя + "06"];
	
	Если ЗначениеЗаполнено(КодСтроки) ИЛИ ЗначениеЗаполнено(Графа04) ИЛИ ЗначениеЗаполнено(Графа05) ИЛИ ЗначениеЗаполнено(Графа06) Тогда
		Если ПустаяСтрока(КодСтроки) Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "Не указан код строки """ + НаименованиеСтроки + """ бухгалтерского баланса", "Баланс", ИмяПоказателя + "03");
			СтатусПроверки = Ложь;
		ИначеЕсли СтрДлина(КодСтроки) <> 4 Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "Неверно указан код строки """ + НаименованиеСтроки + """ бухгалтерского баланса", "Баланс", ИмяПоказателя + "03");
			СтатусПроверки = Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ИзвлечьСтруктуруXML()
	
	ДеревоСтруктуры = Новый ДеревоЗначений;
	ДеревоСтруктуры.Колонки.Добавить("Код");
	ДеревоСтруктуры.Колонки.Добавить("Тип");
	ДеревоСтруктуры.Колонки.Добавить("Формат");
	ДеревоСтруктуры.Колонки.Добавить("МинРазмерность");
	ДеревоСтруктуры.Колонки.Добавить("МаксРазмерность");
	ДеревоСтруктуры.Колонки.Добавить("Обязательность");
	ДеревоСтруктуры.Колонки.Добавить("Многостраничность");
	ДеревоСтруктуры.Колонки.Добавить("Многострочность");
	ДеревоСтруктуры.Колонки.Добавить("Раздел");
	ДеревоСтруктуры.Колонки.Добавить("Ключ");
	ДеревоСтруктуры.Колонки.Добавить("Условие");
	ДеревоСтруктуры.Колонки.Добавить("ЗначениеПоУмолчанию");
	ДеревоСтруктуры.Колонки.Добавить("Значение");
	ДеревоСтруктуры.Колонки.Добавить("Представление");
	ДеревоСтруктуры.Колонки.Добавить("Показатели");
	
	Макет = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(ИмяМакетаСтруктурыВыгрузки());
		
	ВысотаТаблицы = Макет.ВысотаТаблицы;
	
	УчтенныеГруппы = Новый Соответствие;
	
	Для Уровень = 0 По Макет.КоличествоУровнейГруппировокСтрок() - 1 Цикл
		Макет.ПоказатьУровеньГруппировокСтрок(Уровень);
		Для НомерСтроки = 2 По ВысотаТаблицы Цикл
			НомСтр = ВысотаТаблицы - НомерСтроки + 2;
			Если Макет.Область(НомСтр, 0, НомСтр, 0).Видимость И УчтенныеГруппы.Получить(НомСтр) = Неопределено Тогда
				
				РодительскийУзел = ДеревоСтруктуры;
				Если Уровень <> 0 Тогда
					Для Инд = 1 По НомСтр - 2 Цикл
						Узел = УчтенныеГруппы.Получить(НомСтр - Инд);
						Если Узел <> Неопределено Тогда
							РодительскийУзел = Узел;
							Прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				НовСтр = РодительскийУзел.Строки.Вставить(0);
				НовСтр.Код = СокрЛП(Макет.Область(НомСтр, 1, НомСтр, 1).Текст);
				НовСтр.Раздел = СокрЛП(Макет.Область(НомСтр, 2, НомСтр, 2).Текст);
				НовСтр.Ключ = СокрЛП(Макет.Область(НомСтр, 3, НомСтр, 3).Текст);
				НовСтр.Тип = СокрЛП(Макет.Область(НомСтр, 4, НомСтр, 4).Текст);
				НовСтр.Формат = СокрЛП(Макет.Область(НомСтр, 5, НомСтр, 5).Текст);
				МинРазмерность = СокрЛП(Макет.Область(НомСтр, 6, НомСтр, 6).Текст);
				НовСтр.МинРазмерность = ?(ПустаяСтрока(МинРазмерность), ?(НовСтр.Формат = "N", 99999, 0), Число(МинРазмерность));
				МаксРазмерность = СокрЛП(Макет.Область(НомСтр, 7, НомСтр, 7).Текст);
				НовСтр.МаксРазмерность = ?(ПустаяСтрока(МаксРазмерность), 99999, Число(МаксРазмерность));
				НовСтр.Обязательность = СокрЛП(Макет.Область(НомСтр, 8, НомСтр, 8).Текст);
				НовСтр.Многостраничность = НЕ ПустаяСтрока(Макет.Область(НомСтр, 9, НомСтр, 9).Текст);
				НовСтр.Многострочность = НЕ ПустаяСтрока(Макет.Область(НомСтр, 10, НомСтр, 10).Текст);
				НовСтр.Условие = СокрЛП(Макет.Область(НомСтр, 11, НомСтр, 11).Текст);
				НовСтр.ЗначениеПоУмолчанию = СокрЛП(Макет.Область(НомСтр, 12, НомСтр, 12).Текст);
				НовСтр.Представление = СокрЛП(Макет.Область(НомСтр, 13, НомСтр, 13).Текст);
				
				УчтенныеГруппы.Вставить(НомСтр, НовСтр);
				
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат ДеревоСтруктуры;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьДанными(ДеревоВыгрузки, ПараметрыВыгрузки)
	
	ОбработатьУсловныеЭлементы(ПараметрыВыгрузки, ДеревоВыгрузки);
	
	ЗаполнитьДаннымиУзел(ПараметрыВыгрузки, ДеревоВыгрузки);
	
	ОтсечьНезаполненныеНеобязательныеУзлы(ДеревоВыгрузки);
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьУсловныеЭлементы(Знач ПараметрыВыгрузки, Узел)
	
	Если ТипЗнч(Узел) <> Тип("ДеревоЗначений") Тогда
		РегламентированнаяОтчетность.ДополнитьСтруктуруПараметровПрочиеОтчеты(мДанныеОтчета, ПараметрыВыгрузки, Узел);
	КонецЕсли;
	КоличествоСтрок = Узел.Строки.Количество();
	Для Инд = 1 По КоличествоСтрок Цикл
		ТекСтр = Узел.Строки.Получить(КоличествоСтрок - Инд);
		Если НЕ ПустаяСтрока(ТекСтр.Условие) Тогда
			Если НЕ РегламентированнаяОтчетность.УсловиеВыполнено(ЭтаФорма, ПараметрыВыгрузки, ТекСтр.Условие, "Баланс") Тогда
				Узел.Строки.Удалить(ТекСтр);
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		ОбработатьУсловныеЭлементы(ПараметрыВыгрузки, ТекСтр);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПроверитьДанные(Узел)
	
	СтатусПроверки = Истина;
	Если ТипЗнч(Узел) <> Тип("ДеревоЗначений") Тогда
		Если НЕ ЗначениеСоответствуетФормату(Узел) Тогда
			СтатусПроверки = Ложь;
		КонецЕсли;
	КонецЕсли;
	Для Каждого Стр из Узел.Строки Цикл
		СтатусПроверки = (ПроверитьДанные(Стр) И СтатусПроверки); // именно в указанном порядке для выдачи всех ошибок
	КонецЦикла;
	Возврат СтатусПроверки;
	
КонецФункции

&НаСервере
Процедура ОбработатьПоказателиПередВыгрузкой()
	
	Перем ЗначениеПоказателя;
	
	ИменаПоказателейСоЗнакомПлюс = ПолучитьСписокВычитаемыхПоказателей();
	
	Разделы = Новый Массив;
	Разделы.Добавить(мДанныеОтчета.ПолеТабличногоДокументаБаланс);
	Разделы.Добавить(мДанныеОтчета.ПолеТабличногоДокументаОФР);
	Разделы.Добавить(мДанныеОтчета.ПолеТабличногоДокументаОЦИС);
	
	Для Каждого Пок Из ИменаПоказателейСоЗнакомПлюс Цикл
		Для Каждого ПоказателиТекущегоРаздела Из Разделы Цикл
			Если ПоказателиТекущегоРаздела.Свойство(Пок + "_1") Тогда
				НомерСтроки = 1;
				Пока ПоказателиТекущегоРаздела.Свойство(Пок + "_" + СтрокаЧГ0(НомерСтроки), ЗначениеПоказателя) Цикл	
					Если ЗначениеПоказателя < 0 Тогда
						ПоказателиТекущегоРаздела.Вставить(Пок + "_" + СтрокаЧГ0(НомерСтроки), -ЗначениеПоказателя);
					КонецЕсли;
					НомерСтроки = НомерСтроки + 1;
				КонецЦикла;
			ИначеЕсли ПоказателиТекущегоРаздела.Свойство(Пок, ЗначениеПоказателя) И ЗначениеПоказателя < 0 Тогда
				ПоказателиТекущегоРаздела.Вставить(Пок, -ЗначениеПоказателя);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция СформироватьИдФайл(ПараметрыВыгрузки)
	
	Возврат ПараметрыВыгрузки.ПрефиксИмениФайлаВыгрузки
			+ "_" + ?(ЗначениеЗаполнено(ПараметрыВыгрузки.КодИФНСПосредника), ПараметрыВыгрузки.КодИФНСПосредника, ПараметрыВыгрузки.КодИФНС)
			+ "_" + ПараметрыВыгрузки.КодИФНС
			+ "_" + ?(ПараметрыВыгрузки.Свойство("ЭтоПБОЮЛ") И ПараметрыВыгрузки.ЭтоПБОЮЛ, СокрЛП(ПараметрыВыгрузки.ИННОрг), СокрЛП(ПараметрыВыгрузки.ИННОрг) + СокрЛП(ПараметрыВыгрузки.КППОрг))
			+ "_" + Формат(ТекущаяДатаСеанса(), "ДФ=ггггММдд")
			+ "_" + ПараметрыВыгрузки.ИдентификаторФайлаВыгрузки;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьДаннымиУзел(ПараметрыВыгрузки, Узел, НомерСтроки = Неопределено)
	
	МассивУзлов = Новый Массив;
	Для Каждого Ед Из Узел.Строки Цикл
		МассивУзлов.Добавить(Ед);
	КонецЦикла;
	
	Для Каждого Стр из МассивУзлов Цикл
		Если Стр.Тип = "С" ИЛИ Стр.Тип = "C" Тогда // учтем оба варианта: кириллицу и латиницу
			Если Стр.Многострочность Тогда
				КоличествоСтрок = ОпределитьКоличествоСтрокМногострочнойЧасти(ПараметрыВыгрузки, Стр);
				Для НомСтр = 1 По КоличествоСтрок Цикл
					НовыйУзел = СкопироватьУзел(Узел, Стр);
					ЗаполнитьДаннымиУзел(ПараметрыВыгрузки, НовыйУзел, НомСтр);
				КонецЦикла;
			Иначе
				ЗаполнитьДаннымиУзел(ПараметрыВыгрузки, Стр, НомерСтроки);
			КонецЕсли;
		Иначе
			Если ПустаяСтрока(Стр.ЗначениеПоУмолчанию) Тогда
				Если НЕ ПустаяСтрока(Стр.Ключ) Тогда
					ИмяСвойства = Стр.Ключ + ?(НомерСтроки = Неопределено, "", "_" + СтрокаЧГ0(НомерСтроки));
					Если ПараметрыВыгрузки.Свойство(ИмяСвойства) Тогда
						ЗначениеСвойства = ПараметрыВыгрузки[ИмяСвойства];
						Если ТипЗнч(ЗначениеСвойства) = Тип("Строка") Тогда
							ВывестиПоказательВXML(Стр, ЗначениеСвойства);
						Иначе
							ВывестиПоказательВXML(Стр, ЗначениеПриведенноеКЕдиницеИзмерения(ЗначениеСвойства, ПараметрыВыгрузки));
						КонецЕсли;
					Иначе
						Стр.Значение = ?(Стр.Формат = "N", "0", "");
					КонецЕсли;
				Иначе
					Стр.Значение = ?(Стр.Формат = "N", "0", "");
				КонецЕсли;
			ИначеЕсли Лев(Стр.ЗначениеПоУмолчанию, 1) = "&" Тогда
				ВывестиПоказательВXML(Стр, ПараметрыВыгрузки[Сред(Стр.ЗначениеПоУмолчанию, 2)]);
			Иначе
				Стр.Значение = Стр.ЗначениеПоУмолчанию;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОтсечьНезаполненныеНеобязательныеУзлы(Узел)
	
	КоличествоСтрок = Узел.Строки.Количество();
	Для Инд = 1 По КоличествоСтрок Цикл
		Стр = Узел.Строки.Получить(КоличествоСтрок - Инд);
		ОтсечьНезаполненныеНеобязательныеУзлы(Стр);
	КонецЦикла;
	
	Если ТипЗнч(Узел) <> Тип("ДеревоЗначений") Тогда
		УзелПуст = УзелПуст(Узел);
		Если УзелПуст Тогда
			Если СтрНайти(Узел.Обязательность, "Н") <> 0 ИЛИ СтрНайти(Узел.Обязательность, "H") <> 0 Тогда // учтем оба варианта: кириллицу и латиницу
				РегламентированнаяОтчетность.УдалитьУзел(Узел);
			ИначеЕсли (СтрНайти(Узел.Обязательность, "М") <> 0 ИЛИ СтрНайти(Узел.Обязательность, "M") <> 0) // учтем оба варианта: кириллицу и латиницу
			И ?(СтрНайти(Узел.Обязательность, "О") <> 0 ИЛИ СтрНайти(Узел.Обязательность, "O") <> 0, РегламентированнаяОтчетность.ИмеютсяАналогичныеСоседниеУзлыКлюч(Узел), Истина) Тогда
				РегламентированнаяОтчетность.УдалитьУзел(Узел);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЗначениеСоответствуетФормату(Стр)
	
	СтатусПроверки = Истина;
	Если Стр.Формат = "Т" ИЛИ Стр.Формат = "T" Тогда
		ДлинаЗначения = СтрДлина(Стр.Значение);
		Если ДлинаЗначения < Стр.МинРазмерность Тогда
			СтатусПроверки = Ложь;
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "Формирование XML: Длина значения показателя """ + РегламентированнаяОтчетность.ПредставлениеПоказателя(Стр) + """ (" + АдресПоказателя(Стр)+ ") меньше минимально возможной (" + ДлинаЗначения + " < " + Стр.МинРазмерность + ")", "Титульный", "");
		КонецЕсли;
		Если ДлинаЗначения > Стр.МаксРазмерность Тогда
			СтатусПроверки = Ложь;
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "Формирование XML: Длина значения показателя """ + РегламентированнаяОтчетность.ПредставлениеПоказателя(Стр) + """  (" + АдресПоказателя(Стр)+ ") больше максимально возможной (" + ДлинаЗначения + " > " + Стр.МаксРазмерность + ")", "Титульный", "");
		КонецЕсли;
	КонецЕсли;
	Возврат СтатусПроверки;
	
КонецФункции

&НаСервере
Функция АдресПоказателя(СтрокаПоказателя)
	
	Результат = СтрокаПоказателя.Код;
	
	СтрокаВерхнегоУровня = СтрокаПоказателя.Родитель;
	Пока ЗначениеЗаполнено(СтрокаВерхнегоУровня) Цикл
		Результат = СтрокаВерхнегоУровня.Код + "\" + Результат;
		СтрокаВерхнегоУровня = СтрокаВерхнегоУровня.Родитель;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ПолучитьСписокВычитаемыхПоказателей()
	
	ИменаПоказателейСоЗнакомПлюс = Новый Массив;
	
	// Вычитаемые показатели (в показателях отчета хранятся со знаком "-", при выгрузке должны быть положительными).
	
	// Отчет о прибылях и убытках.
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000020000203");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000020000204");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000020000303");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000020000304");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000020000503");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000020000504");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000020000603");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000020000604");
	
	// Отчет о целевом использовании полученных средств.
	СписокВычитаемыхСтрок = "6310, 6320, 6330, 6350";

	МассивВычитаемыхСтрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СписокВычитаемыхСтрок, ",");
	Для Каждого ВычитаемаяСтрока ИЗ МассивВычитаемыхСтрок Цикл
		ИменаПоказателейСоЗнакомПлюс.Добавить("П000100" + СокрЛП(ВычитаемаяСтрока) + "03");
		ИменаПоказателейСоЗнакомПлюс.Добавить("П000100" + СокрЛП(ВычитаемаяСтрока) + "04");
	КонецЦикла;
	
	Возврат ИменаПоказателейСоЗнакомПлюс;
	
КонецФункции

&НаСервере
Функция ЗначениеПриведенноеКЕдиницеИзмерения(Значение, ПараметрыВыгрузки)
	
	Возврат Число(Формат(Значение, ПараметрыВыгрузки.ФорматВывода));
	
КонецФункции

&НаСервере
Функция ОпределитьКоличествоСтрокМногострочнойЧасти(ПараметрыВыгрузки, Узел)
	
	ПервыйКлюч = ПолучитьПервыйКлючВПодчиненииКУзлу(Узел);
	Если ЗначениеЗаполнено(ПервыйКлюч) Тогда
		НомерСтроки = 1;
		Пока ПараметрыВыгрузки.Свойство(ПервыйКлюч + "_" + СтрокаЧГ0(НомерСтроки)) Цикл	
			НомерСтроки = НомерСтроки + 1;
		КонецЦикла;
		Возврат НомерСтроки - 1;
	Иначе
		Возврат 0;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция СкопироватьУзел(Родитель, Узел)
	
	// находим узел в максимальным индексом с тем же кодом, что и у копируемого и добавляем его сразу после найденного элемента
	СтрокиСТемЖеКодом = Родитель.Строки.НайтиСтроки(Новый Структура("Код", Узел.Код), Ложь);
	МаксИндекс = -1;
	Для Каждого СтрокаСТемЖеКодом Из СтрокиСТемЖеКодом Цикл
		ТекИндекс = Родитель.Строки.Индекс(СтрокаСТемЖеКодом);
		Если ТекИндекс > МаксИндекс Тогда
			МаксИндекс = ТекИндекс;
		КонецЕсли;
	КонецЦикла;
	
	ИндексСоздаваемогоУзла = МаксИндекс + 1;
	Если ИндексСоздаваемогоУзла >= Родитель.Строки.Количество() ИЛИ ИндексСоздаваемогоУзла = 0 Тогда // если аналогичный узел не найден или найденный узел - последний
		НовыйУзел = Родитель.Строки.Добавить();
	Иначе
		НовыйУзел = Родитель.Строки.Вставить(ИндексСоздаваемогоУзла);
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(НовыйУзел, Узел, , "Родитель, Строки");
	Для Каждого Стр из Узел.Строки Цикл
		СкопироватьУзел(НовыйУзел, Стр);
	КонецЦикла;
	Возврат НовыйУзел;
	
КонецФункции

&НаСервере
Функция ВывестиПоказательВXML(Узел, ЗначениеПоказателя)
	
	МинШирина = Узел.МинРазмерность;
	МаксШирина = Узел.МаксРазмерность;
	
	Если Узел.Формат = "T" ИЛИ Узел.Формат = "Т" Тогда // учтем оба варианта: кириллицу и латиницу
		Узел.Значение = ?(МаксШирина < СтрДлина(СокрЛП(ЗначениеПоказателя)), СокрЛП(Лев(СокрЛП(ЗначениеПоказателя), МаксШирина)), СокрЛП(ЗначениеПоказателя));
	ИначеЕсли Узел.Формат = "N" Тогда
		СтрокаФормата = "ЧРД=.;ЧН=0;ЧГ=;";
		Если Узел.МаксРазмерность <> 0 И Узел.МаксРазмерность <> 99999 Тогда
			СтрокаФормата = СтрокаФормата + "ЧЦ=" + Формат(Узел.МаксРазмерность, "ЧГ=") + ";";
		КонецЕсли;
		Если Узел.МинРазмерность <> 99999 Тогда
			СтрокаФормата = СтрокаФормата + "ЧДЦ=" + Формат(Узел.МинРазмерность, "ЧГ=") + ";";
		КонецЕсли;
		Узел.Значение = СокрЛП(Формат(ЗначениеПоказателя, СтрокаФормата));
	ИначеЕсли Узел.Формат = "gYear" Тогда
		Если ТипЗнч(ЗначениеПоказателя) = Тип("Дата") Тогда
			Узел.Значение = СокрЛП(Формат(ЗначениеПоказателя, "ДФ=гггг"));
		Иначе
			Узел.Значение = Прав(СокрЛП(ЗначениеПоказателя), 4);
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция УзелПуст(Узел)
	
	ПустойУзел = ?(Узел.Формат = "N",
	               Узел.Значение = "0" ИЛИ НЕ ЗначениеЗаполнено(Узел.Значение),
				   НЕ ЗначениеЗаполнено(Узел.Значение) ИЛИ Узел.Код = "ОКУД" ИЛИ Узел.Код = "КодСтрок");
	Для Каждого Стр из Узел.Строки Цикл
		Если НЕ УзелПуст(Стр) Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	Возврат ПустойУзел;
	
КонецФункции

&НаСервере
Функция ПолучитьПервыйКлючВПодчиненииКУзлу(Узел)
	
	Если ЗначениеЗаполнено(Узел.Ключ) Тогда
		Возврат Узел.Ключ;
	КонецЕсли;
	
	Для Каждого Стр Из Узел.Строки Цикл
		КлючВПодчинении = ПолучитьПервыйКлючВПодчиненииКУзлу(Стр);
		Если ЗначениеЗаполнено(КлючВПодчинении) Тогда
			Возврат КлючВПодчинении;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

&НаКлиенте
Функция СформироватьНастройкиФормыВыбораПечати()
	
	ЭтоЛиквидационнаяОтчетность = (ВидСдачиОтчетности = 2 ИЛИ ВидСдачиОтчетности = 3);
	ПечатьPDF417Разрешена = НЕ СтруктураРеквизитовФормы.ИП
	                      И (Месяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) = 12 ИЛИ ЭтоЛиквидационнаяОтчетность);
			
	Если НастройкиФормыВыбораПечати = Неопределено Тогда
		НастройкиФормыВыбораПечати = Новый Структура;
	КонецЕсли;
	
	НастройкиФормыВыбораПечати.Вставить("ДоступенПункт1", ПечатьPDF417Разрешена);
	НастройкиФормыВыбораПечати.Вставить("ВключатьКодыСтрок", Истина);
	
	Возврат НастройкиФормыВыбораПечати;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ОкруглитьЧислоПоФормату(Форма, ИсходноеЧисло)
		
	ОкругленноеЧисло = Окр(ИсходноеЧисло / Форма.СтруктураРеквизитовФормы.ДелительПредставления, Форма.СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения) * Форма.СтруктураРеквизитовФормы.ДелительПредставления; 

	Возврат ОкругленноеЧисло;
	
КонецФункции

&НаСервере
Функция ИмяМакетаСтруктурыВыгрузки()
			
	Если СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета >= '2013-01-01' Тогда
		Возврат "СхемаВыгрузки502";
	Иначе
		Возврат "СхемаВыгрузки501";
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура Печать(ВидПечати, НеИзФормыОтчета = Ложь) Экспорт
			
	Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1. Формируется печатная форма...'"), ЭтаФорма.Заголовок), , , БиблиотекаКартинок.Печать);
	
	Если НЕ ПечатьНаСервере(ВидПечати) Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ОткрытьФормуПредварительногоПросмотра(ЭтаФорма, ВидПечати, , СтруктураРеквизитовФормы.СписокПечатаемыхЛистов);
	
	СтруктураРеквизитовФормы.мРежимПечати = Ложь;
	
КонецПроцедуры

&НаСервере
Функция ПечатьНаСервере(ВидПечати) Экспорт
	
	Если НЕ РегламентированнаяОтчетность.ПринтерДоступен() Тогда
		
		Сообщение = Новый СообщениеПользователю;

		Сообщение.Текст = НСтр("ru='Перед формированием печатных форм необходимо определить в системе принтер и задать его в качестве используемого по умолчанию!'");

		Сообщение.Сообщить();
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Если ТипЗнч(мДеревоВыбранныхСтраниц) <> Тип("ДанныеФормыДерево") Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	СтруктураРеквизитовФормы.мПечатныеФормы.Очистить();

	СтруктураПараметров = Новый Структура;
	СтруктураРеквизитовФормы.мРежимПечати = Истина;

	СохранитьДанныеРаздела(СтруктураРеквизитовФормы.НаимТекущегоРаздела, Ложь);
				
	сохрТаблДок = ТабличныйДокумент.ПолучитьОбласть();
			
	ВывестиМакетВТаблДокНаСервере("Баланс", 0);
	
	Если ВидПечати = "ПоказатьБланкКНД0710097" Тогда
		СтруктураПараметров.Очистить();
		СтруктураПараметров.Вставить("НаименованиеЛиста",  "Форма по КНД 0710097");
		СтруктураПараметров.Вставить("ОриентацияЛиста",    "Портрет");
		Структурапараметров.Вставить("ИмяОбластиТаблПоля", "");
		СтруктураПараметров.Вставить("ВидПечати",          ВидПечати);
		ВывестиНаПечатьКНД0710097(СтруктураПараметров);
		
		Если ВидПечати = "ПоказатьБланкКНД0710097" Тогда
			ВидПечати = "ПоказатьБланк";
		КонецЕсли;
	КонецЕсли;
	
	Для Каждого СтрокаУровня1 Из мДеревоВыбранныхСтраниц.ПолучитьЭлементы() Цикл
        				
		Пометка = СтрокаУровня1.ПоказатьСтраницу;

		ИмяСтраницыПанели  = СтрокаУровня1.ИмяСтраницы;
		НаименованиеЛиста  = СтрокаУровня1.Представление;
		ОриентацияЛиста    = СтрокаУровня1.ОриентацияСтраницы;
		ИмяОбластиТаблПоля = СтрокаУровня1.ИмяОбластиТабличногоПоля;
		
		Если Пометка = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураПараметров.Очистить();
		СтруктураПараметров.Вставить("НаименованиеЛиста",  НаименованиеЛиста);
		СтруктураПараметров.Вставить("ОриентацияЛиста",    ОриентацияЛиста);
		Структурапараметров.Вставить("ИмяОбластиТаблПоля", ИмяОбластиТаблПоля);
		СтруктураПараметров.Вставить("ВидПечати",          ВидПечати);
		СтруктураПараметров.Вставить("ИмяСтраницы",	       ИмяСтраницыПанели);
		
		ВывестиМакетВТаблДокНаСервере(ИмяСтраницыПанели, 0);
		
		Если ЭтаФорма["СтруктураДанных" + ИмяСтраницыПанели].Количество() = 0 Тогда
			
			ЗаполнитьСведенияОбОрганизацииНаСервере();
			
			ПоказатьПериод(ИмяСтраницыПанели);

			Если НЕ ТабличныйДокумент.Области.Найти("ДатаПодписиОтчета") = Неопределено Тогда
				ТабличныйДокумент.Области.ДатаПодписиОтчета.Значение = ДатаПодписи;
			КонецЕсли;
			
		КонецЕсли;	
		
		ВывестиНаПечатьЛист(СтруктураПараметров);
	КонецЦикла;
	
	СтруктураРеквизитовФормы.мРежимПечати = Ложь;
	
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(сохрТаблДок);
			                               	
	РегламентированнаяОтчетностьКлиентСервер.ПроставлениеНомеровЛистов(ЭтаФорма, Ложь, СтруктураРеквизитовФормы.СписокПечатаемыхЛистов);
	
	КопироватьДанныеФормы(мДеревоВыбранныхСтраниц, мДеревоСтраницОтчета);
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Процедура ВывестиНаПечатьЛист(ПараметрыПечати)
	
	Если ПараметрыПечати.ИмяСтраницы = "Баланс" Тогда
		ВывестиНаПечатьБаланс(ПараметрыПечати);
	ИначеЕсли ПараметрыПечати.ИмяСтраницы = "ОФР" Тогда
		ВывестиНаПечатьОФР(ПараметрыПечати);
	ИначеЕсли ПараметрыПечати.ИмяСтраницы = "ОЦИС" Тогда
		ВывестиНаПечатьОЦИС(ПараметрыПечати);
	ИначеЕсли ПараметрыПечати.ИмяСтраницы = "" Тогда
		// Раздел не печатается.
	Иначе
		РегламентированнаяОтчетность.ВывестиНаПечатьЛистОбщая(ЭтаФорма, ПараметрыПечати, Неопределено, Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиНаПечатьКНД0710097(ПараметрыПечати)
	
	СписокПечатныхФорм = Новый СписокЗначений;
	
	// Подготовка данных для вывода.
	ДанныеОтчета = Новый Структура;
	ДанныеОтчета.Вставить("ИНН", СокрЛП(ТабличныйДокумент.Области.ОргИНН.Значение));
	ДанныеОтчета.Вставить("КПП", СокрЛП(СтруктураРеквизитовФормы.Организация.КПП));
	ДанныеОтчета.Вставить("НомерКорректировки", Формат(СтруктураРеквизитовФормы.ВидДокумента * НомерКорректировки, "ЧЦ=3; ЧН=; ЧГ=0"));
	
	Если Месяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) = 12 Тогда
		ПериодОтчетности = "34";
	Иначе
		ПериодОтчетности = "";
	КонецЕсли;
	
	Если ВидСдачиОтчетности = 2 Тогда
		// Промежуточная отчетность при ликвидации/реорганизации.
		ПериодОтчетности = "94";
	ИначеЕсли ВидСдачиОтчетности = 3 Тогда
		// Ликвидационная отчетность.
		ПериодОтчетности = "90";
	КонецЕсли;
	ДанныеОтчета.Вставить("Период", ПериодОтчетности);
	
	ДанныеОтчета.Вставить("ОтчетГод", Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ=гггг"));
	
	ДанныеОтчета.Вставить("НаимОрг",ВРег(СокрЛП(ТабличныйДокумент.Области.ОргНазв.Значение)));
	ДанныеОтчета.Вставить("ОКВЭД",  СокрЛП(СтрЗаменить(ТабличныйДокумент.Области.ОргКодОКВЭД.Значение,".", "")));
	ДанныеОтчета.Вставить("ОКПО",   СокрЛП(ТабличныйДокумент.Области.ОргКодОКПО.Значение));
	ДанныеОтчета.Вставить("ОКОПФ",  СокрЛП(ТабличныйДокумент.Области.ОргКодОКОПФ.Значение));
	ДанныеОтчета.Вставить("ОКФС",   СокрЛП(ТабличныйДокумент.Области.ОргКодОКФС.Значение));
	ДанныеОтчета.Вставить("ОКЕИ",   СокрЛП(ТабличныйДокумент.Области.КодЕИ.Значение));
	
	ДанныеОтчета.Вставить("ДатаПодписи", Формат(ДатаПодписи, "ДФ=ddMMyyyy"));
		
	СтруктураАдреса = РегламентированнаяОтчетностьКлиентСервер.РазложитьАдрес(СтруктураРеквизитовФормы.АдресВФормате9Запятых);
	ДанныеОтчета.Вставить("Индекс",          СокрЛП(СтруктураАдреса.Индекс));
	ДанныеОтчета.Вставить("СубъектРФ",       РегламентированнаяОтчетностьВызовСервера.КодРегионаПоНазванию(СокрЛП(СтруктураАдреса.Регион)));
	ДанныеОтчета.Вставить("Район",           ВРег(СокрЛП(СтруктураАдреса.Район)));
	ДанныеОтчета.Вставить("Город",           ВРег(СокрЛП(СтруктураАдреса.Город)));
	ДанныеОтчета.Вставить("НаселенныйПункт", ВРег(СокрЛП(СтруктураАдреса.НаселенныйПункт)));
	ДанныеОтчета.Вставить("Улица",           ВРег(СокрЛП(СтруктураАдреса.Улица)));
	ДанныеОтчета.Вставить("НомерДома",       ВРег(СокрЛП(СтруктураАдреса.Дом)));
	ДанныеОтчета.Вставить("НомерКорпуса",    ВРег(СокрЛП(СтруктураАдреса.Корпус)));
	ДанныеОтчета.Вставить("НомерОфиса",      ВРег(СокрЛП(СтруктураАдреса.Квартира)));
	
	Если СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета >= '2013-01-01' Тогда
		
		ПечатнаяФорма = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет("ФормаПечати2013Кв1_КНД0710097_1");
		
		КодНО = СокрЛП(СтруктураРеквизитовФормы.Организация.КодНалоговогоОргана);
		КПП = СокрЛП(СтруктураРеквизитовФормы.Организация.КПП);
		
		СведенияОПредставителе = РегламентированнаяОтчетностьВызовСервера.ПолучитьПоКодамСведенияОПредставителе(СтруктураРеквизитовФормы.Организация, КодНО, КПП);
		
		ТипПодписанта = СведенияОПредставителе.ТипПодписанта;
		
		Если ТипПодписанта = "1" Тогда
			// Руководитель организации.
			ДанныеОтчета.Вставить("ПризнакПодписанта", "1");
			
			ФИОРук = РегламентированнаяОтчетность.РазложитьФИО(ВРег(ТабличныйДокумент.Области.ОргДиректор.Значение));
			ДанныеОтчета.Вставить("ПодписантФамилия",  СокрЛП(ФИОРук.Фамилия));
			ДанныеОтчета.Вставить("ПодписантИмя",      СокрЛП(ФИОРук.Имя));
			ДанныеОтчета.Вставить("ПодписантОтчество", СокрЛП(ФИОРук.Отчество));
			
			ДанныеОтчета.Вставить("ДокументПредставителя", "");
		Иначе
			// Уполномоченный представитель.
			ДанныеОтчета.Вставить("ПризнакПодписанта", "2");
			
			ФИОПредставителя = РегламентированнаяОтчетность.РазложитьФИО(ВРег(СведенияОПредставителе.ФИОПредставителя));
			ДанныеОтчета.Вставить("ПодписантФамилия",  СокрЛП(ФИОПредставителя.Фамилия));
			ДанныеОтчета.Вставить("ПодписантИмя",      СокрЛП(ФИОПредставителя.Имя));
			ДанныеОтчета.Вставить("ПодписантОтчество", СокрЛП(ФИОПредставителя.Отчество));
			
			ДанныеОтчета.Вставить("ДокументПредставителя", ВРег(СведенияОПредставителе.ДокументПредставителя));
			
		КонецЕсли;
		
	Иначе
				
		ПечатнаяФорма = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет("ФормаПечати2012Кв1_КНД0710097_1");
		
		ФИОРук = РегламентированнаяОтчетность.РазложитьФИО(ТабличныйДокумент.Области.ОргДиректор.Значение);
		ДанныеОтчета.Вставить("ФамилияРуководителя",  ВРег(СокрЛП(ФИОРук.Фамилия)));
		ДанныеОтчета.Вставить("ИмяРуководителя",      ВРег(СокрЛП(ФИОРук.Имя)));
		ДанныеОтчета.Вставить("ОтчествоРуководителя", ВРег(СокрЛП(ФИОРук.Отчество)));
		
	КонецЕсли;
	
	ПечатнаяФорма.ОтображатьЗаголовки = Ложь;
	ПечатнаяФорма.ОтображатьСетку     = Ложь;
	ПечатнаяФорма.ЧерноБелыйПросмотр  = Истина;
	ПечатнаяФорма.ЧерноБелаяПечать    = Истина;
	ПечатнаяФорма.Автомасштаб         = Истина;
	ПечатнаяФорма.ОриентацияСтраницы  = ?(ПараметрыПечати.ОриентацияЛиста = "Портрет", ОриентацияСтраницы.Портрет, ОриентацияСтраницы.Ландшафт);
	
	ЗаполнитьПечатнуюФорму(ПечатнаяФорма, ДанныеОтчета);
	СписокПечатныхФорм.Добавить(ПечатнаяФорма);
		
	Если СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета >= '2013-01-01' Тогда
		ПечатнаяФорма = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет("ФормаПечати2013Кв1_КНД0710097_2");
	Иначе
		ПечатнаяФорма = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет("ФормаПечати2012Кв1_КНД0710097_2");
	КонецЕсли;
	
	ПечатнаяФорма.ОтображатьЗаголовки = Ложь;
	ПечатнаяФорма.ОтображатьСетку     = Ложь;
	ПечатнаяФорма.ЧерноБелыйПросмотр  = Истина;
	ПечатнаяФорма.ЧерноБелаяПечать    = Истина;
	ПечатнаяФорма.Автомасштаб         = Истина;
	ПечатнаяФорма.ОриентацияСтраницы  = ?(ПараметрыПечати.ОриентацияЛиста = "Портрет", ОриентацияСтраницы.Портрет, ОриентацияСтраницы.Ландшафт);
	
	ЗаполнитьПечатнуюФорму(ПечатнаяФорма, ДанныеОтчета);
	СписокПечатныхФорм.Добавить(ПечатнаяФорма);
	
	Для Каждого СформированныйЛист Из СписокПечатныхФорм Цикл
		СтруктураРеквизитовФормы.мПечатныеФормы.Добавить(СформированныйЛист.Значение, ПараметрыПечати.НаименованиеЛиста);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСведенияПодписантов(ПараметрыВыгрузки)
	
	Титульный = мДанныеОтчета.ПолеТабличногоДокументаБаланс;
	
	Если СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания >= '2013-01-01' Тогда
		
		// Формат выгрузки 5.02.
		КодНО = СокрЛП(СтруктураРеквизитовФормы.Организация.КодНалоговогоОргана);
		КПП = СокрЛП(СтруктураРеквизитовФормы.Организация.КПП);
		
		СведенияОПредставителе = РегламентированнаяОтчетностьВызовСервера.ПолучитьПоКодамСведенияОПредставителе(СтруктураРеквизитовФормы.Организация, КодНО, КПП);
		
		ТипПодписанта = СведенияОПредставителе.ТипПодписанта;
		
		Если ТипПодписанта = "1" Тогда
			// Руководитель организации.
			ПараметрыВыгрузки.Вставить("ПрПодп", "1");
			
			ФИОРук = РегламентированнаяОтчетность.РазложитьФИО(Титульный.ОргДиректор);
			ПараметрыВыгрузки.Вставить("ПодпФамилия",  СокрЛП(ФИОРук.Фамилия));
			ПараметрыВыгрузки.Вставить("ПодпИмя",      СокрЛП(ФИОРук.Имя));
			ПараметрыВыгрузки.Вставить("ПодпОтчество", СокрЛП(ФИОРук.Отчество));
			
			ПараметрыВыгрузки.Вставить("ПодпНаимДок", "");
		Иначе
			// Уполномоченный представитель.
			ПараметрыВыгрузки.Вставить("ПрПодп", "2");
			
			ФИОПредставителя = РегламентированнаяОтчетность.РазложитьФИО(СведенияОПредставителе.ФИОПредставителя);
			ПараметрыВыгрузки.Вставить("ПодпФамилия",  СокрЛП(ФИОПредставителя.Фамилия));
			ПараметрыВыгрузки.Вставить("ПодпИмя",      СокрЛП(ФИОПредставителя.Имя));
			ПараметрыВыгрузки.Вставить("ПодпОтчество", СокрЛП(ФИОПредставителя.Отчество));
			
			ПараметрыВыгрузки.Вставить("ПодпНаимДок", СведенияОПредставителе.ДокументПредставителя);
			
		КонецЕсли;
		
	Иначе
		
		// Формат выгрузки 5.01.
		ФИОРук = РегламентированнаяОтчетность.РазложитьФИО(Титульный.ОргДиректор);
		ПараметрыВыгрузки.Вставить("ФамилияРук",  СокрЛП(ФИОРук.Фамилия));
		ПараметрыВыгрузки.Вставить("ИмяРук",      СокрЛП(ФИОРук.Имя));
		ПараметрыВыгрузки.Вставить("ОтчествоРук", СокрЛП(ФИОРук.Отчество));
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПечатнуюФорму(ПечатнаяФорма, ДанныеОтчета)
	
	Для Каждого ЭкземплярДанных Из ДанныеОтчета Цикл
		ИмяОбласти = ЭкземплярДанных.Ключ;
		Значение   = ЭкземплярДанных.Значение;
		
		Если ПечатнаяФорма.Области.Найти(ИмяОбласти) <> Неопределено Тогда
			ПечатнаяФорма.Области[ИмяОбласти].Текст = Значение;
		КонецЕсли;
		
		НомСтр = 1;
		Постфикс = "_1";
		Пока ПечатнаяФорма.Области.Найти(ИмяОбласти + Постфикс) <> Неопределено Цикл
			ПечатнаяФорма.Области[ИмяОбласти + Постфикс].Текст = Сред(Значение, НомСтр, 1);
			
			НомСтр = НомСтр + 1;
			Постфикс = "_" + СтрокаЧГ0(НомСтр);
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УдалилитьНенужноеИзПечатнойФормы(ПечатнаяФорма)
	Обл1 = ПечатнаяФорма.Области.Найти("НомерКорректировки");
	Если Обл1 <> Неопределено Тогда 
		Обл1.Значение = "";
		НетЛинии = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.НетЛинии);
		Обл1.ГраницаСверху = НетЛинии;
		Обл1.ГраницаСнизу = НетЛинии;
		Обл1.ГраницаСлева = НетЛинии;
		Обл1.ГраницаСправа = НетЛинии;
	КонецЕсли;
	Обл1 = ПечатнаяФорма.Области.Найти("НомерКорректировкиЗаголовок");
	Если Обл1 <> Неопределено Тогда 
		Обл1.Текст = "";
	КонецЕсли;
	Обл1 = ПечатнаяФорма.Области.Найти("ВидОтчетности");
	Если Обл1 <> Неопределено Тогда 
		Обл1.Значение = "";
		НетЛинии = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.НетЛинии);
		Обл1.ГраницаСверху = НетЛинии;
		Обл1.ГраницаСнизу = НетЛинии;
		Обл1.ГраницаСлева = НетЛинии;
		Обл1.ГраницаСправа = НетЛинии;
	КонецЕсли;
	Обл1 = ПечатнаяФорма.Области.Найти("ВидОтчетностиЗаголовок");
	Если Обл1 <> Неопределено Тогда 
		Обл1.Текст = "";
	КонецЕсли;
	Обл1 = ПечатнаяФорма.Области.Найти("ОрганизацииДляЗаполненияОтчета");
	Если Обл1 <> Неопределено Тогда 
		Обл1.Текст = "";
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ВывестиНаПечатьБаланс(ПараметрыПечати)
	
	СписокПечатныхФорм = Новый СписокЗначений;
	
	ИсходныйТабличныйДокумент = ТабличныйДокумент;
	
	ПечатьБезКодов = (ПараметрыПечати.ВидПечати = "ПоказатьБланкБезКодов");
	
	ПечатнаяФорма = Новый ТабличныйДокумент();
	
	ПечатнаяФорма.ОтображатьЗаголовки = Ложь;
	ПечатнаяФорма.ОтображатьСетку     = Ложь;
	ПечатнаяФорма.ЧерноБелыйПросмотр  = Истина;
	ПечатнаяФорма.ЧерноБелаяПечать    = Истина;
	ПечатнаяФорма.Автомасштаб         = Истина;
	ПечатнаяФорма.ОриентацияСтраницы  = ?(ПараметрыПечати.ОриентацияЛиста = "Портрет", ОриентацияСтраницы.Портрет, ОриентацияСтраницы.Ландшафт);
	
	ВывестиОбластьМакета(ПечатнаяФорма, ИсходныйТабличныйДокумент, "Шапка01");
	
	ВертикальныеОбласти = Новый Массив;
	ВертикальныеОбласти.Добавить("ВертикальнаяЧасть01");
	ВертикальныеОбласти.Добавить("ВертикальнаяЧасть02");
	Если НЕ ПечатьБезКодов Тогда
		ВертикальныеОбласти.Добавить("ВертикальнаяЧасть03");
	КонецЕсли;
	ВертикальныеОбласти.Добавить("ВертикальнаяЧасть04");
	
	ГоризонтальныеОбласти = Новый Массив;
	ГоризонтальныеОбласти.Добавить(Новый Структура("Имя, Условный", "Шапка02", Ложь));
	ГоризонтальныеОбласти.Добавить(Новый Структура("Имя, Условный", "ОсновнаяЧасть01", Истина));
	ГоризонтальныеОбласти.Добавить(Новый Структура("Имя, Условный", "ОсновнаяЧасть02", Истина));
	ГоризонтальныеОбласти.Добавить(Новый Структура("Имя, Условный", "ОсновнаяЧасть03", Истина));
	ГоризонтальныеОбласти.Добавить(Новый Структура("Имя, Условный", "ОсновнаяЧасть04", Истина));
	ГоризонтальныеОбласти.Добавить(Новый Структура("Имя, Условный", "ОсновнаяЧасть05", Ложь));
	
	ГоризонтальныеОбласти.Добавить(Новый Структура("Имя, Условный", "Шапка03", Ложь));
	ГоризонтальныеОбласти.Добавить(Новый Структура("Имя, Условный", "ОсновнаяЧасть06", Истина));
	ГоризонтальныеОбласти.Добавить(Новый Структура("Имя, Условный", "ОсновнаяЧасть07", Истина));
	ГоризонтальныеОбласти.Добавить(Новый Структура("Имя, Условный", "ОсновнаяЧасть08", Истина));
	ГоризонтальныеОбласти.Добавить(Новый Структура("Имя, Условный", "ОсновнаяЧасть09", Истина));
	ГоризонтальныеОбласти.Добавить(Новый Структура("Имя, Условный", "ОсновнаяЧасть10", Истина));
	ГоризонтальныеОбласти.Добавить(Новый Структура("Имя, Условный", "ОсновнаяЧасть11", Ложь));
	
	Для Каждого ГоризонтальнаяОбласть Из ГоризонтальныеОбласти Цикл
		ВыводитьОбластьНаПечать = НЕ ГоризонтальнаяОбласть.Условный ИЛИ ОбластьОтчетаЗаполнена(ИсходныйТабличныйДокумент, ГоризонтальнаяОбласть.Имя);
		Если ВыводитьОбластьНаПечать Тогда
			ВывестиОбластьМакета(ПечатнаяФорма, ИсходныйТабличныйДокумент, ГоризонтальнаяОбласть.Имя, ВертикальныеОбласти);
		КонецЕсли;
	КонецЦикла;
	
	Если ПечатьБезКодов Тогда
		ПечатнаяФорма.Область(15, 2).ШиринаКолонки = 58.25;
	КонецЕсли;
	
	ВывестиОбластьМакета(ПечатнаяФорма, ИсходныйТабличныйДокумент, "Подвал01");
	УдалилитьНенужноеИзПечатнойФормы(ПечатнаяФорма);
	СписокПечатныхФорм.Добавить(ПечатнаяФорма);
		
	Для Каждого СформированныйЛист Из СписокПечатныхФорм Цикл
		СтруктураРеквизитовФормы.мПечатныеФормы.Добавить(СформированныйЛист.Значение, ПараметрыПечати.НаименованиеЛиста);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиНаПечатьОФР(ПараметрыПечати)
	
	СписокПечатныхФорм = Новый СписокЗначений;
	
	ИсходныйТабличныйДокумент = ТабличныйДокумент;
			
	ПечатьБезКодов = (ПараметрыПечати.ВидПечати = "ПоказатьБланкБезКодов");
	
	ПечатнаяФорма = Новый ТабличныйДокумент();
	
	ПечатнаяФорма.ОтображатьЗаголовки = Ложь;
	ПечатнаяФорма.ОтображатьСетку     = Ложь;
	ПечатнаяФорма.ЧерноБелыйПросмотр  = Истина;
	ПечатнаяФорма.ЧерноБелаяПечать    = Истина;
	ПечатнаяФорма.Автомасштаб         = Истина;
	ПечатнаяФорма.ОриентацияСтраницы  = ?(ПараметрыПечати.ОриентацияЛиста = "Портрет", ОриентацияСтраницы.Портрет, ОриентацияСтраницы.Ландшафт);
	
	ВывестиОбластьМакета(ПечатнаяФорма, ИсходныйТабличныйДокумент, "Шапка01");
	
	ВертикальныеОбласти = Новый Массив;
	ВертикальныеОбласти.Добавить("ВертикальнаяЧасть01");
	ВертикальныеОбласти.Добавить("ВертикальнаяЧасть02");
	Если НЕ ПечатьБезКодов Тогда
		ВертикальныеОбласти.Добавить("ВертикальнаяЧасть03");
	КонецЕсли;
	ВертикальныеОбласти.Добавить("ВертикальнаяЧасть04");
	
	ГоризонтальныеОбласти = Новый Массив;
	ГоризонтальныеОбласти.Добавить(Новый Структура("Имя, Условный", "Шапка02", Ложь));
	ГоризонтальныеОбласти.Добавить(Новый Структура("Имя, Условный", "ОсновнаяЧасть01", Истина));
	ГоризонтальныеОбласти.Добавить(Новый Структура("Имя, Условный", "ОсновнаяЧасть02", Истина));
	ГоризонтальныеОбласти.Добавить(Новый Структура("Имя, Условный", "ОсновнаяЧасть03", Истина));
	ГоризонтальныеОбласти.Добавить(Новый Структура("Имя, Условный", "ОсновнаяЧасть04", Истина));
	ГоризонтальныеОбласти.Добавить(Новый Структура("Имя, Условный", "ОсновнаяЧасть05", Истина));
	ГоризонтальныеОбласти.Добавить(Новый Структура("Имя, Условный", "ОсновнаяЧасть06", Истина));
	ГоризонтальныеОбласти.Добавить(Новый Структура("Имя, Условный", "ОсновнаяЧасть07", Ложь));
	
	Для Каждого ГоризонтальнаяОбласть Из ГоризонтальныеОбласти Цикл
		ВыводитьОбластьНаПечать = НЕ ГоризонтальнаяОбласть.Условный ИЛИ ОбластьОтчетаЗаполнена(ИсходныйТабличныйДокумент, ГоризонтальнаяОбласть.Имя);
		Если ВыводитьОбластьНаПечать Тогда
			ВывестиОбластьМакета(ПечатнаяФорма, ИсходныйТабличныйДокумент, ГоризонтальнаяОбласть.Имя, ВертикальныеОбласти);
		КонецЕсли;
	КонецЦикла;
	
	Если ПечатьБезКодов Тогда
		ПечатнаяФорма.Область(13, 2).ШиринаКолонки = 67.25;
	КонецЕсли;
	
	ВывестиОбластьМакета(ПечатнаяФорма, ИсходныйТабличныйДокумент, "Подвал01");
	СписокПечатныхФорм.Добавить(ПечатнаяФорма);
		
	Для Каждого СформированныйЛист Из СписокПечатныхФорм Цикл
		СтруктураРеквизитовФормы.мПечатныеФормы.Добавить(СформированныйЛист.Значение, ПараметрыПечати.НаименованиеЛиста);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиНаПечатьОЦИС(ПараметрыПечати)
	
	СписокПечатныхФорм = Новый СписокЗначений;
	
	ИсходныйТабличныйДокумент = ТабличныйДокумент;
	
	ПечатьБезКодов = (ПараметрыПечати.ВидПечати = "ПоказатьБланкБезКодов");
	
	ПечатнаяФорма = Новый ТабличныйДокумент();
	
	ПечатнаяФорма.ОтображатьЗаголовки = Ложь;
	ПечатнаяФорма.ОтображатьСетку     = Ложь;
	ПечатнаяФорма.ЧерноБелыйПросмотр  = Истина;
	ПечатнаяФорма.ЧерноБелаяПечать    = Истина;
	ПечатнаяФорма.Автомасштаб         = Истина;
	ПечатнаяФорма.ОриентацияСтраницы  = ?(ПараметрыПечати.ОриентацияЛиста = "Портрет", ОриентацияСтраницы.Портрет, ОриентацияСтраницы.Ландшафт);
	
	ВывестиОбластьМакета(ПечатнаяФорма, ИсходныйТабличныйДокумент, "Шапка01");
	
	ВертикальныеОбласти = Новый Массив;
	ВертикальныеОбласти.Добавить("ВертикальнаяЧасть01");
	Если НЕ ПечатьБезКодов Тогда
		ВертикальныеОбласти.Добавить("ВертикальнаяЧасть02");
	КонецЕсли;
	ВертикальныеОбласти.Добавить("ВертикальнаяЧасть03");
	
	ВывестиОбластьМакета(ПечатнаяФорма, ИсходныйТабличныйДокумент, "Шапка02", ВертикальныеОбласти);
	ВывестиОбластьМакета(ПечатнаяФорма, ИсходныйТабличныйДокумент, "ОсновнаяЧасть6100", ВертикальныеОбласти);
	
	ИсходныеОбласти = Новый Массив;
	ИсходныеОбласти.Добавить("ОсновнаяЧасть6210");
	ИсходныеОбласти.Добавить("ОсновнаяЧасть6240");
	ИсходныеОбласти.Добавить("ОсновнаяЧасть6250");
	
	ВыводитьШапкуПодраздела = Ложь;
	ВыводимыеОбласти = Новый Массив;
	Для Каждого ГоризонтальнаяОбласть Из ИсходныеОбласти Цикл
		ВыводитьОбласть = ОбластьОтчетаЗаполнена(ИсходныйТабличныйДокумент, ГоризонтальнаяОбласть);
		ВыводитьШапкуПодраздела = ВыводитьШапкуПодраздела ИЛИ ВыводитьОбласть;
		Если ВыводитьОбласть Тогда
			ВыводимыеОбласти.Добавить(ГоризонтальнаяОбласть);
		КонецЕсли;
	КонецЦикла;
	
	Если ВыводитьШапкуПодраздела Тогда
		ВывестиОбластьМакета(ПечатнаяФорма, ИсходныйТабличныйДокумент, "Шапка03", ВертикальныеОбласти);
		Для Каждого ГоризонтальнаяОбласть Из ВыводимыеОбласти Цикл
			ВывестиОбластьМакета(ПечатнаяФорма, ИсходныйТабличныйДокумент, ГоризонтальнаяОбласть, ВертикальныеОбласти);
		КонецЦикла;
	КонецЕсли;
	
	ИсходныеОбласти = Новый Массив;
	ИсходныеОбласти.Добавить("ОсновнаяЧасть6310");
	ИсходныеОбласти.Добавить("ОсновнаяЧасть6320");
	ИсходныеОбласти.Добавить("ОсновнаяЧасть6330");
	ИсходныеОбласти.Добавить("ОсновнаяЧасть6350");
	
	ВыводитьШапкуПодраздела = Ложь;
	ВыводимыеОбласти = Новый Массив;
	Для Каждого ГоризонтальнаяОбласть Из ИсходныеОбласти Цикл
		ВыводитьОбласть = ОбластьОтчетаЗаполнена(ИсходныйТабличныйДокумент, ГоризонтальнаяОбласть);
		ВыводитьШапкуПодраздела = ВыводитьШапкуПодраздела ИЛИ ВыводитьОбласть;
		Если ВыводитьОбласть Тогда
			ВыводимыеОбласти.Добавить(ГоризонтальнаяОбласть);
		КонецЕсли;
	КонецЦикла;
	
	Если ВыводитьШапкуПодраздела Тогда
		ВывестиОбластьМакета(ПечатнаяФорма, ИсходныйТабличныйДокумент, "Шапка04", ВертикальныеОбласти);
		Для Каждого ГоризонтальнаяОбласть Из ВыводимыеОбласти Цикл
			ВывестиОбластьМакета(ПечатнаяФорма, ИсходныйТабличныйДокумент, ГоризонтальнаяОбласть, ВертикальныеОбласти);
		КонецЦикла;
	КонецЕсли;
	
	ВывестиОбластьМакета(ПечатнаяФорма, ИсходныйТабличныйДокумент, "ОсновнаяЧасть6400", ВертикальныеОбласти);
	
	Если ПечатьБезКодов Тогда
		ПечатнаяФорма.Область(13, 2).ШиринаКолонки = 67.25;
	КонецЕсли;
	
	ВывестиОбластьМакета(ПечатнаяФорма, ИсходныйТабличныйДокумент, "Подвал01");
	СписокПечатныхФорм.Добавить(ПечатнаяФорма);
	
	Для Каждого СформированныйЛист Из СписокПечатныхФорм Цикл
		СтруктураРеквизитовФормы.мПечатныеФормы.Добавить(СформированныйЛист.Значение, ПараметрыПечати.НаименованиеЛиста);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ОбластьОтчетаЗаполнена(ИсходныйТабличныйДокумент, ИмяОбласти)
	
	ЗначенияЗаполнены = Ложь;
	
	ПроверяемаяОбласть = ИсходныйТабличныйДокумент.ПолучитьОбласть(ИмяОбласти);
	Для Каждого Область Из ПроверяемаяОбласть.Области Цикл
		Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник И Область.СодержитЗначение <> Неопределено 
		   И Область.СодержитЗначение И ТипЗнч(Область.Значение) = Тип("Число") Тогда
			ЗначениеОбласти = ОкруглитьЧислоПоФормату(ЭтаФорма, Область.Значение);
			ЗначенияЗаполнены = ЗначенияЗаполнены ИЛИ ЗначениеЗаполнено(ЗначениеОбласти);
			
			Если ЗначенияЗаполнены Тогда
				Прервать;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ЗначенияЗаполнены;
	
КонецФункции

&НаСервере
Процедура ВывестиОбластьМакета(ПечатнаяФорма, ИсходныйТабличныйДокумент, ИмяОбласти, ВертикальныеОбласти = Неопределено)
	
	Если ВертикальныеОбласти = Неопределено Тогда
		ВыводимаяОбласть = ИсходныйТабличныйДокумент.ПолучитьОбласть(ИмяОбласти);
		ПечатнаяФорма.Вывести(ВыводимаяОбласть);
	Иначе
		ЭтоПервыйСтолбец = Истина;
		Для Каждого ВертикальнаяОбласть Из ВертикальныеОбласти Цикл
			ВыводимаяОбласть = ИсходныйТабличныйДокумент.ПолучитьОбласть(ИмяОбласти + "|" + ВертикальнаяОбласть);
			Если ЭтоПервыйСтолбец Тогда
				ПечатнаяФорма.Вывести(ВыводимаяОбласть);
			Иначе
				ПечатнаяФорма.Присоединить(ВыводимаяОбласть);
			КонецЕсли;
			ЭтоПервыйСтолбец = Ложь;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьАтрибутКакСтроку(Узел, ИмяАтрибута)
	
	Атрибут = Узел.Атрибуты.ПолучитьИменованныйЭлемент(ИмяАтрибута);
	
	Если Атрибут = Неопределено Тогда
		Значение = "";
	Иначе
		Значение = Атрибут.Значение;
	КонецЕсли;
	
	Возврат Значение;
	
КонецФункции

&НаСервере
Функция ПолучитьАтрибутКакЧисло(Узел, ИмяАтрибута)
	
	Атрибут = Узел.Атрибуты.ПолучитьИменованныйЭлемент(ИмяАтрибута);
	
	Если Атрибут = Неопределено Тогда
		Значение = 0;
	Иначе
		Значение = Число(Атрибут.Значение);
	КонецЕсли;
	
	Возврат Значение;
	
КонецФункции

&НаСервере
Функция ПолучитьАтрибутКакБулево(Узел, ИмяАтрибута)
	
	Атрибут = Узел.Атрибуты.ПолучитьИменованныйЭлемент(ИмяАтрибута);
	
	Если Атрибут = Неопределено Тогда
		Значение = Истина;
	ИначеЕсли ВРег(Атрибут.Значение) = "FALSE" ИЛИ ВРег(Атрибут.Значение) = "ЛОЖЬ" Тогда
		Значение = Ложь;
	Иначе
		Значение = Истина;
	КонецЕсли;
	
	Возврат Значение;
	
КонецФункции

&НаСервере
Процедура РазобратьНастройкуПоказателя(УзелПоказателя, Настройка)
	
	НастройкаПоказателя = Настройка.ПолучитьЭлементы().Добавить();
	
	НастройкаПоказателя.Идентификатор  = ПолучитьАтрибутКакСтроку(УзелПоказателя, "Идентификатор");
	НастройкаПоказателя.Наименование   = ПолучитьАтрибутКакСтроку(УзелПоказателя, "Наименование");
	НастройкаПоказателя.Отключаемость  = ПолучитьАтрибутКакБулево(УзелПоказателя, "Отключаемость");
	НастройкаПоказателя.ВключатьВОтчет = Истина;
			
	Для Каждого Узел Из УзелПоказателя.ДочерниеУзлы Цикл
		ИмяУзла = Узел.ИмяУзла;
		Если ИмяУзла = "Показатель" Тогда
			РазобратьНастройкуПоказателя(Узел, НастройкаПоказателя);
		ИначеЕсли ИмяУзла = "ОбластьЗатенения" Тогда
			ОбластьЗатенения = НастройкаПоказателя.ОбластиЗатенения.Добавить();
			ОбластьЗатенения.ПолнаяОбласть       = ПолучитьАтрибутКакСтроку(Узел, "ПолнаяОбласть");
			ОбластьЗатенения.ГоризонтальнаяЧасть = ПолучитьАтрибутКакСтроку(Узел, "ГоризонтальнаяЧасть");
			ОбластьЗатенения.Лево  = ПолучитьАтрибутКакЧисло(Узел, "Лево");
			ОбластьЗатенения.Право = ПолучитьАтрибутКакЧисло(Узел, "Право");
		КонецЕсли;
	КонецЦикла;
		
КонецПроцедуры

&НаКлиенте
Процедура АктивизироватьЯчейку(Ячейка) Экспорт
	
	РегламентированнаяОтчетностьКлиент.АктивизироватьЯчейку(ЭтаФорма, Ячейка);
	
КонецПроцедуры

&НаСервере
Функция РазделВключенВОтчет(ИмяРаздела, Знач СписокРазделов = Неопределено)
	
	Если СписокРазделов = Неопределено Тогда
		СписокРазделов = мДеревоВыбранныхСтраниц;
	КонецЕсли;
	
	Результат = Ложь;
	
	НайденнаяСтраницаОтчета = СписокРазделов.Строки.Найти(ИмяРаздела, "ИмяСтраницы");
	Если НайденнаяСтраницаОтчета <> Неопределено Тогда
		Результат = (НайденнаяСтраницаОтчета.ПоказатьСтраницу <> 0);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции
   
&НаКлиенте
Процедура РазделыОтчетаПриАктивизацииСтроки(Элемент)
	
	Если Элемент.ТекущиеДанные = Неопределено
	 ИЛИ Элемент.ТекущаяСтрока = СтруктураРеквизитовФормы.ТекущаяСтрокаРазделовОтчета Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураРеквизитовФормы.ТекущаяСтрокаРазделовОтчета = Элемент.ТекущаяСтрока;
		
	КолонкаРазделыОтчетаСокрНаим      = Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
	КолонкаНомерСтраницыРазделаОтчета = Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета;
	
	Элементы.ОчиститьТекущуюСтраницу.Доступность = Истина;
			
	Если СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере Тогда
						
		Элементы.СтраницыОтчета.ТекущаяСтраница = Элементы.ТаблДок;
		
		ВывестиМакетСтраницыВТабличныйДокументНаСервере(КолонкаРазделыОтчетаСокрНаим, КолонкаНомерСтраницыРазделаОтчета);
								
	Иначе
		
		Элементы.СтраницыОтчета.ТекущаяСтраница = Элементы.ТаблДок;
		
		СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Истина;
		
	КонецЕсли;
	
	Если КолонкаРазделыОтчетаСокрНаим = "Баланс" Тогда
		
		Элементы.Обновить.Доступность = Истина;
		
	Иначе
		
		Элементы.Обновить.Доступность = Ложь;
		
	КонецЕсли;
	
	ОчиститьБлокВариантЗаполнения();
	
	Элементы.ТабличныйДокумент.ТекущаяОбласть = ТабличныйДокумент.Область(1, 1);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВИнтернете(Команда)
	
	Если СтруктураРеквизитовФормы.ИП Тогда
		
		РегламентированнаяОтчетностьКлиент.ПоказатьПредупреждениеОНевозможностиОтправкиОтчета();
		
		Возврат;
		
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьВИнтернетеЗавершение", ЭтотОбъект);

	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
		
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВИнтернетеЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ПроверитьВИнтернете(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьЧерезПредставителя(Команда)
	
	Если СтруктураРеквизитовФормы.ИП Тогда
		
		РегламентированнаяОтчетностьКлиент.ПоказатьПредупреждениеОНевозможностиОтправкиОтчета();
		
		Возврат;
		
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОтправитьЧерезПредставителяЗавершение", ЭтотОбъект);

	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьЧерезПредставителяЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ПриНажатииНаКнопкуОтправкиЧерезПредставителяВРегламентированномОтчете(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьБухгалтерскуюОтчетностьВРосстатНажатие(Элемент)
	
	ОтправкаБухгалтерскойОтчетностиВРосстатКлиент.СоздатьБухгалтерскуюОтчетностьВРосстатНажатие(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьАвто(Команда)
	
	Отказ = Ложь;
	
	РегламентированнаяОтчетностьКлиентПереопределяемый.ПроверитьВозможностьАвтоЗаполненияРеглОтчета(ИмяФормы, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("Команда", Команда);
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьАвтоЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередЗаполнениемРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьАвтоЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Команда = ДополнительныеПараметры.Команда;
	
	РезультатЗапускаФоновогоЗадания = ЗаполнитьАвтоНаСервере();
	
	Если РезультатЗапускаФоновогоЗадания.Статус = "Выполняется" Тогда
		ОповещениеОЗавершении = Новый ОписаниеОповещения("ОбработатьЗавершениеАвтозаполненияВФоне", ЭтотОбъект);
		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтаФорма);
		ДлительныеОперацииКлиент.ОжидатьЗавершение(РезультатЗапускаФоновогоЗадания, ОповещениеОЗавершении, ПараметрыОжидания);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьЗавершениеАвтозаполненияВФоне(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		Если Результат.Статус = "Выполнено" Тогда
			ЗагрузитьПодготовленныеДанные();
			
		ИначеЕсли Результат.Статус = "Ошибка" Тогда
			ВызватьИсключение Результат.ПодробноеПредставлениеОшибки;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЗаполнитьАвтоНаСервере()
	
	Модифицированность = Истина;
	
	РезультатПроверкиАктуализацииДанныхУчета = Неопределено;
	
	РегламентированнаяОтчетностьПереопределяемый.ПолучитьРезультатПроверкиАктуализацииДанныхУчета(
		СтруктураРеквизитовФормы.Организация,
		СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,
		РезультатПроверкиАктуализацииДанныхУчета);
	
	Элементы.ПанельПроверкиАктуальностиДанных.Видимость = Ложь;
	
	Если НЕ РезультатПроверкиАктуализацииДанныхУчета = Неопределено
	   И РезультатПроверкиАктуализацииДанныхУчета.ТребуетсяАктуализация Тогда
		ПроверкаАктуализацииДанныхПредупреждениеЗаголовок = Новый Массив;
		ПроверкаАктуализацииДанныхПредупреждениеЗаголовок.Добавить(НСтр("ru='Данные учета неактуальны с '"));
		ПроверкаАктуализацииДанныхПредупреждениеЗаголовок.Добавить(Новый ФорматированнаяСтрока(Формат(РезультатПроверкиАктуализацииДанныхУчета.ДатаАктуальности, "ДЛФ=Д"), Новый Шрифт(, , Истина)));
		ПроверкаАктуализацииДанныхПредупреждениеЗаголовок.Добавить(НСтр("ru='. Рекомендуется выполнить '"));
		ПроверкаАктуализацииДанныхПредупреждениеЗаголовок.Добавить(Новый ФорматированнаяСтрока(НСтр("ru='закрытие месяца'"), , , , "ОткрытьФормуЗакрытияМесяца"));
		ПроверкаАктуализацииДанныхПредупреждениеЗаголовок.Добавить(НСтр("ru=' и автозаполнить отчет повторно.'"));
		
		Элементы.ПроверкаАктуализацииДанныхПредупреждение.Заголовок =
		Новый ФорматированнаяСтрока(ПроверкаАктуализацииДанныхПредупреждениеЗаголовок);
		
		СтруктураРеквизитовФормы.ДатаАктуальностиДанных = РезультатПроверкиАктуализацииДанныхУчета.ДатаАктуальности;
		
		Элементы.ПанельПроверкиАктуальностиДанных.Видимость = Истина;
		
	КонецЕсли;
	
	СохранитьДанныеРаздела(СтруктураРеквизитовФормы.НаимТекущегоРаздела, Ложь);
	
	ЗаполнитьПустыеСтруктурыДанных();
	
	СтруктураРеквизитовФормы.АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
	
	ПараметрыОтчета = Новый Структура();
	ПараметрыОтчета.Вставить("Организация",                  СтруктураРеквизитовФормы.Организация);
	ПараметрыОтчета.Вставить("ГруппаОрганизаций",            СтруктураРеквизитовФормы.ГруппаОрганизаций);
	ПараметрыОтчета.Вставить("ДатаНачалаПериодаОтчета",      СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
	ПараметрыОтчета.Вставить("ДатаКонцаПериодаОтчета",       СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	ПараметрыОтчета.Вставить("УникальныйИдентификаторФормы", ЭтаФорма.УникальныйИдентификатор);
	ПараметрыОтчета.Вставить("АдресВоВременномХранилище",    СтруктураРеквизитовФормы.АдресВоВременномХранилище);
	
	Контейнер = Новый Структура();
	Контейнер.Вставить("Баланс", СтруктураДанныхБаланс);
	Контейнер.Вставить("ОФР",    СтруктураДанныхОФР);
	Контейнер.Вставить("ОЦИС",   СтруктураДанныхОЦИС);
	
	НаименованиеЗадания = НСтр("ru = 'Автоматическое заполнение по данным информационной базы'");
	
	ПараметрыПроцедуры = Новый Структура;
	ПараметрыПроцедуры.Вставить("ИДОтчета", Сред(Лев(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, ".Форма.") - 1), 7));
	ПараметрыПроцедуры.Вставить("ИДРедакцииОтчета", Сред(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, ".Форма.") + 7));
	ПараметрыПроцедуры.Вставить("ПараметрыОтчета", ПараметрыОтчета);
	ПараметрыПроцедуры.Вставить("Контейнер", Контейнер);
	
	ПараметрыВыполненияВФоне = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполненияВФоне.НаименованиеФоновогоЗадания = НаименованиеЗадания;
	ПараметрыВыполненияВФоне.ЗапуститьВФоне = Истина;
	
	РезультатЗапуска = ДлительныеОперации.ВыполнитьВФоне("РегламентированнаяОтчетность.ЗаполнитьОтчетВФоне",
		ПараметрыПроцедуры, ПараметрыВыполненияВФоне);
	
	Если РезультатЗапуска.Статус = "Выполнено" Тогда
		ЗагрузитьПодготовленныеДанные();
		
	ИначеЕсли РезультатЗапуска.Статус = "Ошибка" Тогда
		ВызватьИсключение РезультатЗапуска.ПодробноеПредставлениеОшибки;
		
	КонецЕсли;
	
	Возврат РезультатЗапуска;
	
КонецФункции

&НаСервере
Процедура ЗагрузитьПодготовленныеДанные()
	
	СтруктураДанных = ПолучитьИзВременногоХранилища(СтруктураРеквизитовФормы.АдресВоВременномХранилище);
	
	Если ТипЗнч(СтруктураДанных) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Контейнер = Неопределено;
	Если СтруктураДанных.Свойство("Контейнер", Контейнер) И ТипЗнч(Контейнер) = Тип("Структура") Тогда
		Для Каждого ЭлементСтруктуры Из Контейнер Цикл
			
			ИмяРаздела    = ЭлементСтруктуры.Ключ;
			ДанныеРаздела = ЭлементСтруктуры.Значение;
			Для каждого ДанныеПоказателя Из ДанныеРаздела Цикл
				ИмяПоказателя      = ДанныеПоказателя.Ключ;
				ЗначениеПоказателя = ДанныеПоказателя.Значение;
				Если ТипЗнч(ЗначениеПоказателя) = Тип("Число") Тогда
					ПараметрыОтбора = Новый Структура("КодПоказателя", ИмяПоказателя);
					МассивСтрок = ЭтаФорма["ТаблицаВариантыЗаполнения" + ИмяРаздела][0].ТаблицаВариантовЗаполнения.НайтиСтроки(ПараметрыОтбора);
					Если МассивСтрок.Количество() > 0 Тогда
						МассивСтрок[0].ЗначениеАвто = ЗначениеПоказателя;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
			ПарамОтбора = Новый Структура("ВариантЗаполнения", 1);
			МассивСтрокВЗ_1 = ЭтаФорма["ТаблицаВариантыЗаполнения" + ИмяРаздела][0].ТаблицаВариантовЗаполнения.НайтиСтроки(ПарамОтбора);
			ПарамОтбора = Новый Структура("ВариантЗаполнения", 2);
			МассивСтрокВЗ_2 = ЭтаФорма["ТаблицаВариантыЗаполнения" + ИмяРаздела][0].ТаблицаВариантовЗаполнения.НайтиСтроки(ПарамОтбора);
			
			ЭтаФорма["СтруктураДанных" + ИмяРаздела] = ЭлементСтруктуры.Значение;
			
			Для каждого ЭлМассива Из МассивСтрокВЗ_1 Цикл
				ЭтаФорма["СтруктураДанных" + ИмяРаздела][ЭлМассива.КодПоказателя] = 0;
			КонецЦикла;
			Для каждого ЭлМассива Из МассивСтрокВЗ_2 Цикл
				ЭтаФорма["СтруктураДанных" + ИмяРаздела][ЭлМассива.КодПоказателя]
					= ЭтаФорма["СтруктураДанных" + ИмяРаздела][ЭлМассива.КодПоказателя] + ЭлМассива.Дельта;
			КонецЦикла;
			
		КонецЦикла;
	КонецЕсли;
	
	ТаблицаРасшифровки = Неопределено;
	Если СтруктураДанных.Свойство("ТаблицаРасшифровки", ТаблицаРасшифровки) И ТипЗнч(ТаблицаРасшифровки) = Тип("ТаблицаЗначений") Тогда
		СтруктураРеквизитовФормы.АдресВременногоХранилищаРасшифровки = ПоместитьВоВременноеХранилище(ТаблицаРасшифровки, УникальныйИдентификатор);
		Элементы.Расшифровать.Доступность = Истина;
		Элементы.ТабличныйДокументКонтекстноеМенюРасшифровать.Доступность = Истина;
	КонецЕсли;
	
	ВывестиМакетВТаблДокНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела, 1);
	
	РасчетНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура Расшифровать(Команда)
	
	ПараметрыОтчета = Новый Структура();
	ПараметрыОтчета.Вставить("Организация", 			 			СтруктураРеквизитовФормы.Организация);
	ПараметрыОтчета.Вставить("ДатаНачалаПериодаОтчета",			    СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
	ПараметрыОтчета.Вставить("ДатаКонцаПериодаОтчета",  			СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	ПараметрыОтчета.Вставить("АдресВременногоХранилищаРасшифровки", СтруктураРеквизитовФормы.АдресВременногоХранилищаРасшифровки);
	
	ИДИменПоказателей = Новый Массив();
	ИДИменПоказателей.Добавить(Элементы.ТабличныйДокумент.ТекущаяОбласть.Имя);
	
	РегламентированнаяОтчетностьКлиент.ОткрытьРасшифровкуОтчета(Сред(Лев(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, ".Форма.") - 1), 7), Сред(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, ".Форма.") + 7), ИДИменПоказателей, ПараметрыОтчета)
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьУведомление(ОткрытьПринудительно = Ложь) Экспорт
	
	ЗначениеНеПоказывать = Формат(СтруктураРеквизитовФормы.КоличествоСтрокИнформационногоМакета, "ЧН=; ЧГ=0") + "_НеПоказывать";
	
	СтруктураРеквизитовФормы.СохраненныйВыборПользователя = ЗначениеНеПоказывать;
	
	ПоказатьОписаниеИзменений = ОткрытьПринудительно
							ИЛИ СтруктураРеквизитовФормы.СохраненныйВыборПользователя <> ЗначениеНеПоказывать;
	
	Если ПоказатьОписаниеИзменений Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("РежимОткрытия", ?(ОткрытьПринудительно, "Принудительно", "ПоВыбору"));
		ПараметрыФормы.Вставить("ИмяСохраняемогоПараметра", СтруктураРеквизитовФормы.ИмяСохраняемогоПараметра);
		ПараметрыФормы.Вставить("ЗначениеНеПоказывать", ЗначениеНеПоказывать);
		
		ОткрытьФорму("Обработка.ОбщиеОбъектыРеглОтчетности.Форма.УведомлениеОбИзмененияхВФормеОтчета",
			ПараметрыФормы, ЭтаФорма, СтруктураРеквизитовФормы.ИмяСохраняемогоПараметра);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаАктуализацииДанныхПредупреждениеОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "ОткрытьФормуЗакрытияМесяца" Тогда
		
		РегламентированнаяОтчетностьКлиентПереопределяемый.ОткрытьФормуЗакрытияМесяца(
														   СтруктураРеквизитовФормы.Организация,
														   СтруктураРеквизитовФормы.ДатаАктуальностиДанных);
		
	КонецЕсли;												   
													   
КонецПроцедуры

#Область ПанельОтправкиВКонтролирующиеОрганы

&НаКлиенте
Процедура ОбновитьОтправку(Команда)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОбновитьОтправкуИзПанелиОтправки(ЭтаФорма, "ФНС");
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаПротоколНажатие(Элемент)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьПротоколИзПанелиОтправки(ЭтаФорма, "ФНС");
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьНеотправленноеИзвещение(Команда)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОтправитьНеотправленноеИзвещениеИзПанелиОтправки(ЭтаФорма, "ФНС");
КонецПроцедуры

&НаКлиенте
Процедура ЭтапыОтправкиНажатие(Элемент)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьСостояниеОтправкиИзПанелиОтправки(ЭтаФорма, "ФНС");
КонецПроцедуры

&НаКлиенте
Процедура КритическиеОшибкиОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьКритическиеОшибкиИзПанелиОтправки(ЭтаФорма, "ФНС");
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаНаименованиеЭтапаНажатие(Элемент)
	
	ПараметрыИзменения = Новый Структура;
	ПараметрыИзменения.Вставить("Форма", ЭтаФорма);
	ПараметрыИзменения.Вставить("Организация", СтруктураРеквизитовФормы.Организация);
	ПараметрыИзменения.Вставить("КонтролирующийОрган",
		ПредопределенноеЗначение("Перечисление.ТипыКонтролирующихОрганов.ФНС"));
	
	РегламентированнаяОтчетностьКлиент.ИзменитьСтатусОтправки(ПараметрыИзменения);
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ОтправитьВКонтролирующийОрган(Команда)
	
	Если СтруктураРеквизитовФормы.ИП Тогда
		
		РегламентированнаяОтчетностьКлиент.ПоказатьПредупреждениеОНевозможностиОтправкиОтчета();
		
		Возврат;
		
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверкаВозможностиВыгрузкиРегламентированногоОтчетаПередОтправкой", ЭтотОбъект);
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередОтправкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаВозможностиВыгрузкиРегламентированногоОтчетаПередОтправкой(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОтправитьВКонтролирующийОрганЗавершение", ЭтотОбъект);
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьВКонтролирующийОрганЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ПриНажатииНаКнопкуОтправкиВКонтролирующийОрган(ЭтаФорма, "ФНС");
	
КонецПроцедуры

&НаКлиенте
Процедура  ЗаписатьИЗакрыть(Команда)
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Форма", ЭтаФорма);
	Оповещение = Новый ОписаниеОповещения("ПослеСохраненияФормыЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	СохранитьНаКлиенте(, Оповещение);
КонецПроцедуры

&НаКлиенте
Процедура ПослеСохраненияФормыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	ДополнительныеПараметры.Форма.Закрыть();
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// Отправка бух. отчетности в Росстат
	ОтправкаБухгалтерскойОтчетностиВРосстатКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	// Конец Отправка бух. отчетности в Росстат
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОткрытьПрисоединенныеФайлы(Команда)
	
	РегламентированнаяОтчетностьКлиент.СохранитьОтчетИОткрытьФормуПрисоединенныеФайлы(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийПриИзменении(Элемент)
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ТабличныйДокументПриАктивизацииОбласти(Элемент)
	
	ИмяОбласти = Элемент.ТекущаяОбласть.Имя;
	
	Если Лев(ИмяОбласти, 1) = "П"
		И Элемент.ТекущаяОбласть.СодержитЗначение = Истина// здесь исключаем значение Неопределено
		И ТипЗнч(Элемент.ТекущаяОбласть.Значение) = Тип("Число") Тогда
		ЦветФонаЯчейки = Элемент.ТекущаяОбласть.ЦветФона;
		Если ЦветФонаЯчейки = мСтруктураЦветовРаскраски["_1"]
		 ИЛИ ЦветФонаЯчейки = мСтруктураЦветовРаскраски["_2"] Тогда
			УправлениеБлокомВариантЗаполнения(ИмяОбласти);
		ИначеЕсли ЦветФонаЯчейки = мСтруктураЦветовРаскраски["_3"] Тогда
			ОчиститьБлокВариантЗаполнения(Истина);
		ИначеЕсли ЭтаФорма.Элементы.ВариантЗаполнения.Доступность Тогда
			ОчиститьБлокВариантЗаполнения();
		КонецЕсли;
	Иначе
		Если ЭтаФорма.Элементы.ВариантЗаполнения.Доступность Тогда
			ОчиститьБлокВариантЗаполнения();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#Область БлокВариантЗаполнения

&НаКлиенте
Процедура ВариантЗаполненияПриИзменении(Элемент)
	
	ИмяПоказателя = ТабличныйДокумент.ТекущаяОбласть.Имя;
	
	ИмяРаздела = СтруктураРеквизитовФормы.НаимТекущегоРаздела;
	
	НайденнаяСтрокаТВЗ = ВариантЗаполненияПоказателя(ИмяРаздела, ИмяПоказателя);
	
	Если НайденнаяСтрокаТВЗ <> Неопределено Тогда
		
		НовыйВариант = ЭтаФорма.Элементы.ВариантЗаполнения.СписокВыбора.Индекс(
			ЭтаФорма.Элементы.ВариантЗаполнения.СписокВыбора.НайтиПоЗначению(ВариантЗаполнения)) + 1;
		
		НайденнаяСтрокаТВЗ.ВариантЗаполнения = НовыйВариант;
		
		Если НовыйВариант = 1 Тогда
			
			НайденнаяСтрокаТВЗ.Дельта = 0;
			ВеличинаАвтокорректировки = 0;
			
		ИначеЕсли НовыйВариант = 2 Тогда
			
			Если (ТабличныйДокумент.Области[ИмяПоказателя].Значение = 0 И НайденнаяСтрокаТВЗ.Дельта = 0)
				И НайденнаяСтрокаТВЗ.ЗначениеАвто <> 0 Тогда
				
				ТабличныйДокумент.Области[ИмяПоказателя].Значение = НайденнаяСтрокаТВЗ.ЗначениеАвто;
				Расчет(ЭтаФорма, СтруктураРеквизитовФормы.НаимТекущегоРаздела, ИмяПоказателя);
				
			КонецЕсли;
			
			Дельта = ТабличныйДокумент.Области[ИмяПоказателя].Значение - НайденнаяСтрокаТВЗ.ЗначениеАвто;
			
			НайденнаяСтрокаТВЗ.Дельта = Дельта;
			ВеличинаАвтокорректировки = Дельта;
			
		ИначеЕсли НовыйВариант = 3 Тогда
			
			Если (ТабличныйДокумент.Области[ИмяПоказателя].Значение = 0) И (НайденнаяСтрокаТВЗ.Дельта = 0) Тогда
				ТабличныйДокумент.Области[ИмяПоказателя].Значение = НайденнаяСтрокаТВЗ.ЗначениеАвто;
			КонецЕсли;
			
			НайденнаяСтрокаТВЗ.Дельта = 0;
			НайденнаяСтрокаТВЗ.Комментарий = "";
			
			ВеличинаАвтокорректировки = 0;
			КомментарийКВариантуЗаполнения = "";
			
		КонецЕсли;
		
		ТабличныйДокумент.ТекущаяОбласть.ЦветФона = мСтруктураЦветовРаскраски["_" + НовыйВариант];
		
		УправлениеБлокомВариантЗаполнения(НайденнаяСтрокаТВЗ);
		
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УправлениеБлокомВариантЗаполнения(ДанныеПоказателя)
	
	// ДанныеПоказателя - имя показателя.
	//
	Если ТипЗнч(ДанныеПоказателя) = Тип("Строка") Тогда
		
		ИмяРаздела = СтруктураРеквизитовФормы.НаимТекущегоРаздела;
		
		НайденнаяСтрокаТВЗ = ВариантЗаполненияПоказателя(ИмяРаздела, ДанныеПоказателя);
		
		Если НайденнаяСтрокаТВЗ <> Неопределено Тогда
			
			ТекВариант     = НайденнаяСтрокаТВЗ.ВариантЗаполнения;
			ТекДельта      = НайденнаяСтрокаТВЗ.Дельта;
			ТекКомментарий = НайденнаяСтрокаТВЗ.Комментарий;
			Если ТекВариант = 1
			 ИЛИ ТекВариант = 2
			 ИЛИ ТекВариант = 3 Тогда
				ВариантЗаполнения = ЭтаФорма.Элементы.ВариантЗаполнения.СписокВыбора[ТекВариант - 1].Значение;
				ВеличинаАвтокорректировки = ТекДельта;
				КомментарийКВариантуЗаполнения = ТекКомментарий;
				ЭтаФорма.Элементы.ВариантЗаполнения.Доступность = Истина;
				ЭтаФорма.Элементы.ВеличинаАвтокорректировки.Доступность = ТекВариант = 2;
				ЭтаФорма.Элементы.КомментарийКВариантуЗаполнения.Доступность = ТекВариант <> 3;
				ТабличныйДокумент.Области[ДанныеПоказателя].Примечание.Текст = ТекКомментарий;
			КонецЕсли;
		Иначе
			ОчиститьБлокВариантЗаполнения();
		КонецЕсли;
		
	// ДанныеПоказателя - строка таблицы вариантов заполнения.
	//
	ИначеЕсли ТипЗнч(ДанныеПоказателя) = Тип("ДанныеФормыЭлементКоллекции") Тогда
		
		ТекВариант     = ДанныеПоказателя.ВариантЗаполнения;
		ТекДельта      = ДанныеПоказателя.Дельта;
		ТекКомментарий = ДанныеПоказателя.Комментарий;
		Если ТекВариант = 1
		 ИЛИ ТекВариант = 2
		 ИЛИ ТекВариант = 3 Тогда
			ВариантЗаполнения = ЭтаФорма.Элементы.ВариантЗаполнения.СписокВыбора[ТекВариант - 1].Значение;
			ВеличинаАвтокорректировки = ТекДельта;
			КомментарийКВариантуЗаполнения = ТекКомментарий;
			ЭтаФорма.Элементы.ВариантЗаполнения.Доступность = Истина;
			ЭтаФорма.Элементы.ВеличинаАвтокорректировки.Доступность = ТекВариант = 2;
			ЭтаФорма.Элементы.КомментарийКВариантуЗаполнения.Доступность = ТекВариант <> 3;
			ТабличныйДокумент.Области[ДанныеПоказателя.КодПоказателя].Примечание.Текст = ТекКомментарий;
		Иначе
			ОчиститьБлокВариантЗаполнения();
		КонецЕсли;
		
	Иначе
		ОчиститьБлокВариантЗаполнения();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьБлокВариантЗаполнения(АвтозаполнениеБезКорректировки = Ложь)
	
	ВариантЗаполнения = ?(АвтозаполнениеБезКорректировки, ЭтаФорма.Элементы.ВариантЗаполнения.СписокВыбора[2].Значение, "");
	ВеличинаАвтокорректировки = 0;
	КомментарийКВариантуЗаполнения = "";
	ЭтаФорма.Элементы.ВариантЗаполнения.Доступность = АвтозаполнениеБезКорректировки;
	ЭтаФорма.Элементы.ВеличинаАвтокорректировки.Доступность = Ложь;
	ЭтаФорма.Элементы.КомментарийКВариантуЗаполнения.Доступность = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ВеличинаАвтокорректировкиПриИзменении(Элемент)
	
	ТекущаяОбласть = ТабличныйДокумент.ТекущаяОбласть;
	ИмяПоказателя = ТекущаяОбласть.Имя;
	
	ИмяРаздела = СтруктураРеквизитовФормы.НаимТекущегоРаздела;
	
	НайденнаяСтрокаТВЗ = ВариантЗаполненияПоказателя(ИмяРаздела, ИмяПоказателя);
	
	Если НайденнаяСтрокаТВЗ <> Неопределено Тогда
		
		НайденнаяСтрокаТВЗ.Дельта = ВеличинаАвтокорректировки;
		
		ТекущаяОбласть.Значение = НайденнаяСтрокаТВЗ.ЗначениеАвто + НайденнаяСтрокаТВЗ.Дельта;
		
		РасчетНаКлиенте(ИмяРаздела, ИмяПоказателя);
		
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийКВариантуЗаполненияПриИзменении(Элемент)
	
	ТекущаяОбласть = ТабличныйДокумент.ТекущаяОбласть;
	ИмяПоказателя = ТекущаяОбласть.Имя;
	
	ИмяРаздела = СтруктураРеквизитовФормы.НаимТекущегоРаздела;
	
	НайденнаяСтрокаТВЗ = ВариантЗаполненияПоказателя(ИмяРаздела, ИмяПоказателя);
	
	Если НайденнаяСтрокаТВЗ <> Неопределено Тогда
		
		НайденнаяСтрокаТВЗ.Комментарий = КомментарийКВариантуЗаполнения;
		
		ТабличныйДокумент.Области[ИмяПоказателя].Примечание.Текст = КомментарийКВариантуЗаполнения;
		
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПараметрыАвтозаполненияЯчейки()
	
	ТекущаяОбласть = ТабличныйДокумент.ТекущаяОбласть;
	ИмяПоказателя = ТекущаяОбласть.Имя;
	
	ИмяРаздела = СтруктураРеквизитовФормы.НаимТекущегоРаздела;
	
	НайденнаяСтрокаТВЗ = ВариантЗаполненияПоказателя(ИмяРаздела, ИмяПоказателя);
	
	Если НайденнаяСтрокаТВЗ <> Неопределено Тогда
		
		Если ТипЗнч(ТекущаяОбласть.Значение) = Тип("Число") Тогда
			Дельта = ТекущаяОбласть.Значение - НайденнаяСтрокаТВЗ.ЗначениеАвто;
		Иначе
			Дельта = 0;
		КонецЕсли;
		
		НайденнаяСтрокаТВЗ.Дельта = Дельта;
		
		ВеличинаАвтокорректировки = Дельта;
		
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ВариантЗаполненияПоказателя(ИмяРаздела, ИмяПоказателя)
	
	Если ИмяРаздела = Неопределено ИЛИ ИмяПоказателя = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	#Если ВебКлиент Тогда
		ПараметрыОтбора = Новый Структура("КодПоказателя", ИмяПоказателя);
		МассивСтрок = ЭтаФорма["ТаблицаВариантыЗаполнения" + ИмяРаздела][0].ТаблицаВариантовЗаполнения.НайтиСтроки(ПараметрыОтбора);
		Если МассивСтрок.Количество() > 0 Тогда
			Возврат МассивСтрок[0];
		КонецЕсли;
	#Иначе
		Для каждого ТекСтрока Из ЭтаФорма["ТаблицаВариантыЗаполнения" + ИмяРаздела][0].ТаблицаВариантовЗаполнения Цикл
			КодПоказателя = ТекСтрока.КодПоказателя;
			Если КодПоказателя = ИмяПоказателя Тогда
				Возврат ТекСтрока;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	#КонецЕсли
	
	Возврат Неопределено;
	
КонецФункции

#КонецОбласти

// Отправка бух. отчетности в Росстат
&НаКлиенте
Процедура ОтправкаБухОтчетностиВРосстатПредупреждениеОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	ОтправкаБухгалтерскойОтчетностиВРосстатКлиент.ОбработкаНавигационнойСсылкиКраснойПанели(
		ЭтотОбъект, 
		Элемент, 
		НавигационнаяСсылкаФорматированнойСтроки, 
		СтандартнаяОбработка);
		
КонецПроцедуры

&НаКлиенте
Процедура ОтправкаБухОтчетностиВРосстатСкрытьНажатие(Элемент)
	
	ОтправкаБухгалтерскойОтчетностиВРосстатКлиент.ОтправкаБухОтчетностиВРосстатСкрытьНажатие(
		ЭтотОбъект, 
		Элемент);
		
КонецПроцедуры
// Конец Отправка бух. отчетности в Росстат

&НаСервере
Функция ОбъектОтчета(ЭтаФормаИмя) Экспорт
	
	Если мОбъектОтчета = Неопределено Тогда 
		мОбъектОтчета = РегламентированнаяОтчетностьВызовСервера.ОбъектОтчета(ЭтаФормаИмя);
	КонецЕсли;
	
	Возврат мОбъектОтчета;
	
КонецФункции
// Конец Отправка бух. отчетности в Росстат