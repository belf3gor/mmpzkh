&НаСервере
Перем мОбъектОтчета;

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	// Обход ошибки платформы Параметр сеанса отсутствует или удален
	ТабличныйДокумент.Очистить();
	
	СформироватьСтруктуруРеквизитовФормы();
	
	СтруктураРеквизитовФормы.СписокПечатаемыхЛистов = Новый СписокЗначений;

	СтруктураРеквизитовФормы.мПоляПоискаПоказателяВТСП = "КодПоказателяПоСоставу, КодПоказателяПоФорме";
	
	СтруктураРеквизитовФормы.мСоставПоказателей = "СоставПоказателей2012Кв4";
	
	СтруктураРеквизитовФормы.мОписаниеТиповЧислоЕ   = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(17, 2));
	
	СтруктураДанныхТитульный	= Новый Структура;
	
	ИнициализацияМногостраничныхРазделов();
	
	// Структура содержит данные дополнительных страниц
	мСтруктураМногостраничныхРазделов = Новый Структура;
	мСтруктураМногостраничныхРазделов.Вставить("Раздел1",       "ТаблицаСтраницыРазделаРаздел1");
	мСтруктураМногостраничныхРазделов.Вставить("Раздел2",       "ТаблицаСтраницыРазделаРаздел2");
		
	ЦветЗаполняетсяТолькоВручную     = Новый Цвет(255, 255, 225);
	ЦветЗаполняетсяАвтоКорректир     = Новый Цвет(255, 240, 200);
	ЦветЗаполняетсяАвтоБезКорректир  = Новый Цвет(230, 240, 220);
	СтруктураРеквизитовФормы.ЦветЗаполняетсяАвтоАрифметика    = Новый Цвет(192, 220, 192);
	ЦветЗаполняетсяОднозначноВручную = Новый Цвет(255, 255, 192);
	ЦветЗаполняетсяАвтоматически     = Новый Цвет(255, 255, 255);
	
	// структура цветов раскраски автозаполняемых ячеек
	мСтруктураЦветовРаскраски = Новый Структура;
	мСтруктураЦветовРаскраски.Вставить("_1", ЦветЗаполняетсяТолькоВручную);
	мСтруктураЦветовРаскраски.Вставить("_2", ЦветЗаполняетсяАвтоКорректир);
	мСтруктураЦветовРаскраски.Вставить("_3", ЦветЗаполняетсяАвтоБезКорректир);
	мСтруктураЦветовРаскраски.Вставить("_4", СтруктураРеквизитовФормы.ЦветЗаполняетсяАвтоАрифметика);
	мСтруктураЦветовРаскраски.Вставить("_0", ЦветЗаполняетсяОднозначноВручную);
	мСтруктураЦветовРаскраски.Вставить("_5", ЦветЗаполняетсяАвтоматически);
	
	мСтруктураВариантыЗаполнения       = Новый Структура;
	мСтруктураВариантыЗаполненияЭталон = Новый Структура;
	
	СтруктураРеквизитовФормы.мВерсияФормы = "18/07/2012";
	
	// Код отчета, равен КНД
	СтруктураРеквизитовФормы.мКодОтчета   = 1152004;
		
	СтруктураРеквизитовФормы.мПечатныеформы = Новый СписокЗначений;
	СтруктураРеквизитовФормы.мПечатаемыеРазделы = Новый СписокЗначений;
	
	ОбъектОтчет = ОбъектОтчета(ЭтаФорма.ИмяФормы);
	
	ИмяРаздела = "Титульный";
		
	ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + ИмяРаздела));
	
	СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяРаздела;
	
	СтруктураРеквизитовФормы.мВыбраннаяФорма          = Параметры.мВыбраннаяФорма;
	СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета  = Параметры.мДатаКонцаПериодаОтчета;
	СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета = Параметры.мДатаНачалаПериодаОтчета;
	СтруктураРеквизитовФормы.мПериодичность           = Параметры.мПериодичность;
	СтруктураРеквизитовФормы.мСкопированаФорма        = Параметры.мСкопированаФорма;
	СтруктураРеквизитовФормы.мСохраненныйДок          = Параметры.мСохраненныйДок;
	СтруктураРеквизитовФормы.Организация              = Параметры.Организация;
	СтруктураРеквизитовФормы.ДоступенМеханизмПечатиРеглОтчетностиСДвухмернымШтрихкодомPDF417 = Параметры.ДоступенМеханизмПечатиРеглОтчетностиСДвухмернымШтрихкодомPDF417;
	СтруктураРеквизитовФормы.СформироватьФормуОтчетаАвтоматически = Параметры.СформироватьФормуОтчетаАвтоматически;
	
	ДатаПодписи	= ТекущаяДатаСеанса();
	
	ПорядкиОкругленияОтчетности = Новый Структура;
	ПорядкиОкругленияОтчетности.Вставить("ПеречислениеПорядкиОкругленияОтчетностиОкр1",       Перечисления.ПорядкиОкругленияОтчетности.Окр1);
	ПорядкиОкругленияОтчетности.Вставить("ПеречислениеПорядкиОкругленияОтчетностиОкр1000",    Перечисления.ПорядкиОкругленияОтчетности.Окр1000);
	ПорядкиОкругленияОтчетности.Вставить("ПеречислениеПорядкиОкругленияОтчетностиОкр1000000", Перечисления.ПорядкиОкругленияОтчетности.Окр1000000);
	
	Инициализация(Параметры.БезОткрытияФормы);
	
КонецПроцедуры

&НаСервере
Процедура СформироватьСтруктуруРеквизитовФормы()
	
	СтруктураРеквизитовФормы = Новый Структура;
	СтруктураРеквизитовФормы.Вставить("Организация");
	СтруктураРеквизитовФормы.Вставить("ЕдиницаИзмерения");
	СтруктураРеквизитовФормы.Вставить("ТочностьЕдиницыИзмерения");
	СтруктураРеквизитовФормы.Вставить("ВидДокумента");
	СтруктураРеквизитовФормы.Вставить("ИП");
	СтруктураРеквизитовФормы.Вставить("мАвтоВыборКодов");
	СтруктураРеквизитовФормы.Вставить("мБезОткрытияФормы");
	СтруктураРеквизитовФормы.Вставить("мВариант");
	СтруктураРеквизитовФормы.Вставить("мВерсияФормы");
	СтруктураРеквизитовФормы.Вставить("мВыбраннаяФорма");
	СтруктураРеквизитовФормы.Вставить("мДатаКонцаПериодаОтчета");
	СтруктураРеквизитовФормы.Вставить("мДатаНачалаПериодаОтчета");
	СтруктураРеквизитовФормы.Вставить("мДокументПредставителя");
	СтруктураРеквизитовФормы.Вставить("мЗаписываетсяНовыйДокумент");
	СтруктураРеквизитовФормы.Вставить("мЗаписьЗапрещена");
	СтруктураРеквизитовФормы.Вставить("мИмяПредставителя");
	СтруктураРеквизитовФормы.Вставить("мКодОтчета");
	СтруктураРеквизитовФормы.Вставить("мНазваниеПредставителя");
	СтруктураРеквизитовФормы.Вставить("мОписаниеТиповЧислоЕ");
	СтруктураРеквизитовФормы.Вставить("мОтчествоПредставителя");
	СтруктураРеквизитовФормы.Вставить("мПериодичность");
	СтруктураРеквизитовФормы.Вставить("мПечатаемыеРазделы");
	СтруктураРеквизитовФормы.Вставить("мПечатныеФормы");
	СтруктураРеквизитовФормы.Вставить("мПечатьБезШтрихкодаРазрешена");
	СтруктураРеквизитовФормы.Вставить("мПредставительФизЛицо");
	СтруктураРеквизитовФормы.Вставить("мРежимПечати");
	СтруктураРеквизитовФормы.Вставить("мСкопированаФорма");
	СтруктураРеквизитовФормы.Вставить("мСоставПоказателей");
	СтруктураРеквизитовФормы.Вставить("мСохраненныйДок");
	СтруктураРеквизитовФормы.Вставить("мСтрокаФормата");
	СтруктураРеквизитовФормы.Вставить("мСчетчикСтраниц");
	СтруктураРеквизитовФормы.Вставить("мФамилияПредставителя");
	СтруктураРеквизитовФормы.Вставить("ФлажокОтклАвтоРасчет", Ложь);
	СтруктураРеквизитовФормы.Вставить("мФамилияПредставителя");
	СтруктураРеквизитовФормы.Вставить("мВПрограммеИзмененаОрганизация");
	СтруктураРеквизитовФормы.Вставить("мДелитель");
	СтруктураРеквизитовФормы.Вставить("мДокументВосстановлен");
	СтруктураРеквизитовФормы.Вставить("мИсключитьЗапускРасчета");
	СтруктураРеквизитовФормы.Вставить("мПоляПоискаПоказателяВТСП");
	СтруктураРеквизитовФормы.Вставить("мСтараяВерсияФормы");
	СтруктураРеквизитовФормы.Вставить("СтрПериодОтчета");
	СтруктураРеквизитовФормы.Вставить("НаимОрганизации");
	СтруктураРеквизитовФормы.Вставить("ВыводитьСтраницуВТаблДокНаСервере");
    СтруктураРеквизитовФормы.Вставить("НаимТекущегоРаздела");
	СтруктураРеквизитовФормы.Вставить("НомерТекущейСтраницы");
	СтруктураРеквизитовФормы.Вставить("СписокПечатаемыхЛистов");
	СтруктураРеквизитовФормы.Вставить("ОтображатьКнопкуЗаполнить", Ложь);
	СтруктураРеквизитовФормы.Вставить("ОтображатьКнопкуРасшифровать", Ложь);
	СтруктураРеквизитовФормы.Вставить("ТекущаяСтрокаРазделовОтчета");
	СтруктураРеквизитовФормы.Вставить("ЦветЗаполняетсяАвтоАрифметика");
	СтруктураРеквизитовФормы.Вставить("ДоступенМеханизмПечатиРеглОтчетностиСДвухмернымШтрихкодомPDF417");
	СтруктураРеквизитовФормы.Вставить("СформироватьФормуОтчетаАвтоматически");
	СтруктураРеквизитовФормы.Вставить("ОКВЭД",  "");
	СтруктураРеквизитовФормы.Вставить("ОКВЭД2", "");
						                                  
КонецПроцедуры

&НаСервере
Процедура ИнициализацияМногостраничныхРазделов()
	
	СтрПерваяСтраница = ЭтаФорма.ТаблицаСтраницыРазделаРаздел1.Добавить();
	СтрПерваяСтраница.Представление               = "Новая страница";
	СтрПерваяСтраница.АктивнаяСтраница            = Истина;
	СтрПерваяСтраница.АвтоматическоеПредставление = Истина;
	
	СтрПерваяСтраница = ЭтаФорма.ТаблицаСтраницыРазделаРаздел2.Добавить();
	СтрПерваяСтраница.Представление               = "Новая страница";
	СтрПерваяСтраница.АктивнаяСтраница            = Истина;
	СтрПерваяСтраница.АвтоматическоеПредставление = Истина;
	
КонецПроцедуры

&НаСервере
Процедура Инициализация(БезОткрытияФормы = Ложь) Экспорт
	Перем ИсходноеКоличествоСтрокГруппы;
	
	СтруктураРеквизитовФормы.мБезОткрытияФормы = БезОткрытияФормы;
	
	ЗаполнитьНачальныеНастройки();
	
	ФормироватьСтруктуруСтраницОтчета();
	
	ФормироватьСтруктуруСвойствСтраниц();
	
	СформироватьДеревоРазделовОтчетаНаСервере();
	
	СформироватьСпискиВыбора();
	
	ЗаполнитьСтруктуруЗависимыхЯчеекДляАвторасчета();
		
	СтруктураРеквизитовФормы.мСтараяВерсияФормы = СтруктураРеквизитовФормы.мВерсияФормы;
	
	ИнициализироватьМаскиПолейВводаТабличныхДокументов(СтруктураРеквизитовФормы.НаимТекущегоРаздела);

	СтруктураРеквизитовФормы.ВидДокумента = 0;
	ТабличныйДокумент.Области.НомерКорректировки.Значение = 0;
	НомерКорректировки = 0;
	
	СтруктураРеквизитовФормы.мАвтоВыборКодов = Ложь;
	
	РегламентированнаяОтчетность.ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставления(ЭтаФорма);
	
	Если СтруктураРеквизитовФормы.СформироватьФормуОтчетаАвтоматически Тогда
		СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация = Истина;
	Иначе
		СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация = Ложь;
	КонецЕсли;
	
	СтруктураРеквизитовФормы.мДокументВосстановлен = Ложь;
	СтруктураРеквизитовФормы.мРежимПечати = Ложь;
	СтруктураРеквизитовФормы.мИсключитьЗапускРасчета = Ложь;	
	
	Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
				
		Если СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено Тогда
			ВосстановитьСохраненныеДанные();
		Иначе
			
			СтруктураРеквизитовФормы.ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1;
			СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = 0;
			
			КопироватьДанныеФормы(мДеревоСтраницОтчета, мДеревоВыбранныхСтраниц);
			
			ТабличныйДокумент.Области.Период.Значение = "34";
			ТабличныйДокумент.Области.ПоМесту.Значение = "260";
			
			ЗаполнитьПустыеСтруктурыДанных();
			
			ТаблицаСтраницыРазделаРаздел1[0].Данные[0].Значение.П000010001003 = "18210604011021000110";
						
			ЗаполнитьДатуПодписи(ЭтаФорма);
			
		КонецЕсли;
		
		Модифицированность = Истина;
		
	Иначе
		
		ВосстановитьСохраненныеДанные();
		
		Если ЗначениеЗаполнено(СтруктураРеквизитовФормы.мСкопированаФорма) Тогда
			СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено;
		КонецЕсли;
		
		Если НЕ БезОткрытияФормы
           И НЕ СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
				   
        	ЗаблокироватьДанныеДляРедактирования(СтруктураРеквизитовФормы.мСохраненныйДок, , ЭтаФорма.УникальныйИдентификатор);

        КонецЕсли;
		
	КонецЕсли;
	
	РегламентированнаяОтчетность.ПолучитьСведенияОПоказателяхОтчета(ЭтаФорма);
	
	Если НЕ СтруктураРеквизитовФормы.ОтображатьКнопкуЗаполнить Тогда
		Элементы.Заполнить.Видимость = Ложь;
	КонецЕсли;
	
	Если НЕ СтруктураРеквизитовФормы.ОтображатьКнопкуРасшифровать Тогда
		Элементы.Расшифровать.Видимость = Ложь;
		Элементы.ТабличныйДокументКонтекстноеМенюРасшифровать.Видимость = Ложь;
	КонецЕсли;
	
	ПоказатьПериод();
	
	ИзменитьФорматНевведенныхПоказателей(ЭтаФорма);
	          	
	Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено
	 Или СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация
	 ИЛИ СтруктураРеквизитовФормы.СформироватьФормуОтчетаАвтоматически Тогда
	 
		ЗаполнитьСведенияОбОрганизацииНаСервере();
				
	Иначе
		
		УправлениеЛистами();
		РегламентированнаяОтчетность.ПолучитьЗначениеОКВЭД(ДатаПодписи, СтруктураРеквизитовФормы);
		
	КонецЕсли;
		
	Если НЕ БезОткрытияФормы Тогда
		РегламентированнаяОтчетностьКлиентСервер.ПоказатьКнопкиПечати(ЭтаФорма);
	КонецЕсли;
	
	УстановитьФорматВыводаНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
			
	СтруктураРеквизитовФормы.НаимОрганизации = СтруктураРеквизитовФормы.Организация.Наименование;
	СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
	
	УстановитьДоступностьОбластей(ЭтаФорма, СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
	РегламентированнаяОтчетность.ДобавитьКнопкуПрисоединенныеФайлы(ЭтаФорма);
	
	РегламентированнаяОтчетностьКлиентСервер.ПриИнициализацииФормыРегламентированногоОтчета(ЭтаФорма);
	
	Если СтруктураРеквизитовФормы.СформироватьФормуОтчетаАвтоматически Тогда
		ЗаполнитьАвтоНаСервере();
		Если Элементы.Расшифровать.Видимость Тогда
			Элементы.Расшифровать.Доступность = Истина;
			Элементы.ТабличныйДокументКонтекстноеМенюРасшифровать.Доступность = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьСпискиВыбора()
	
	МакетСоставаПоказателей = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет("Списки2012Кв1");
	
	КоллекцияСписковВыбора = Новый Соответствие;
	Для Каждого Область Из МакетСоставаПоказателей.Области Цикл
		Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Строки Тогда
			ВерхОбласти = Область.Верх;
			НизОбласти = Область.Низ;
			ТаблСписка = Новый ТаблицаЗначений;
			ТаблСписка.Колонки.Добавить("Код",,, МакетСоставаПоказателей.Область(ВерхОбласти, 1, ВерхОбласти, 1).ШиринаКолонки);
			ТаблСписка.Колонки.Добавить("Название",,, МакетСоставаПоказателей.Область(ВерхОбласти, 2, ВерхОбласти, 2).ШиринаКолонки);
			Для НомСтр = ВерхОбласти По НизОбласти Цикл
				КодПоказателя = СокрП(МакетСоставаПоказателей.Область(НомСтр, 1).Текст);
				Если КодПоказателя <> "###" Тогда
					НовСтрока = ТаблСписка.Добавить();
					НовСтрока.Код = КодПоказателя;
					НовСтрока.Название = СокрП(МакетСоставаПоказателей.Область(НомСтр, 2).Текст);
				КонецЕсли;
			КонецЦикла;
			КоллекцияСписковВыбора.Вставить(Область.Имя, ТаблСписка);
		КонецЕсли;
	КонецЦикла;
	
	СвойстваПоказателей.Очистить();
	
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "Период", 2, , "Выбор налогового периода", КоллекцияСписковВыбора["НалоговыеПериоды"]);
	
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "ПоМесту", 3, , "Выбор места представления", КоллекцияСписковВыбора["МестаПредставления"]);
	
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "КодФормыРеорганизации", 1, , "Выбор кода формы реорганизации (ликвидации)", КоллекцияСписковВыбора["КодыФормыРеорганизации"]);
	
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000010001003", 20, , "Выбор КБК", КоллекцияСписковВыбора["КБК"]);
	
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000020003003", 5, , "Выбор вида транспортного средства", КоллекцияСписковВыбора[ИмяСпискаВидовТранспортныхСредств()]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000020008003", 3, , "Выбор единицы измерения налоговой базы", КоллекцияСписковВыбора["КодыОКЕИ"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000020009003", 1, , "Выбор экологического класса", КоллекцияСписковВыбора["КодыЭкологическихКлассов"]);
	
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000020017003_КодЛьготы", 5, , "Выбор льготы", КоллекцияСписковВыбора["КодыЛьготОсвобожденияОтНалогообложения"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000020019003_КодЛьготы", 5, , "Выбор льготы", КоллекцияСписковВыбора["КодыЛьготУменьшенияСуммыНалога"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000020021003_КодЛьготы", 5, , "Выбор льготы", КоллекцияСписковВыбора["КодыЛьготСниженияНалоговойСтавки"]);
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьМаскиПолейВводаТабличныхДокументов(ИмяТекРаздела)
	
	// Маски полей ввода должны задаваться в программном коде для совместимости
	// с платформой версии 8.2.13 и более ранних.
	
	МаскаВводаОКАТО = "99999999999";
	
	Если ИмяТекРаздела = "Титульный" Тогда

		ТабличныйДокумент.Области.ИННРеорганизованнойОрганизации.Маска = "9999999999";
		ТабличныйДокумент.Области.КППРеорганизованнойОрганизации.Маска = "999999999";
		
		ТабличныйДокумент.Области.Прил.Маска = "999";
		
	ИначеЕсли ИмяТекРаздела = "Раздел1" Тогда
		
		ТабличныйДокумент.Области.П000010002003_1.Маска = МаскаВводаОКАТО;
		ТабличныйДокумент.Области.П000010002003_2.Маска = МаскаВводаОКАТО;
		ТабличныйДокумент.Области.П000010002003_3.Маска = МаскаВводаОКАТО;
				
	ИначеЕсли ИмяТекРаздела = "Раздел2" Тогда
		
		ТабличныйДокумент.Области.П000020002003.Маска = МаскаВводаОКАТО;
				
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьОбластей(Форма, ИмяСтраницыПанели = "")
	
	ЦветНедоступнойОбласти = Форма.мСтруктураЦветовРаскраски["_5"];
	ЦветОбластиРучногоВвода = Форма.мСтруктураЦветовРаскраски["_0"];
	ЦветАвторасчитываемойОбласти = Форма.мСтруктураЦветовРаскраски["_4"];
	
	Если ИмяСтраницыПанели = "Титульный" Тогда
	
		ОпределяющаяОбласть = Форма.ТабличныйДокумент.Области.КодФормыРеорганизации;
		ОбрабатываемаяОбласть1 = Форма.ТабличныйДокумент.Области.ИННРеорганизованнойОрганизации;
		ОбрабатываемаяОбласть2 = Форма.ТабличныйДокумент.Области.КППРеорганизованнойОрганизации;
		Если ПустаяСтрока(ОпределяющаяОбласть.Значение)
		 ИЛИ ОпределяющаяОбласть.Значение = "0" Тогда
			ЗапретитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть1);
			ЗапретитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть2);
		Иначе
			РазрешитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть1);
			РазрешитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть2);
		КонецЕсли;
		
	ИначеЕсли ИмяСтраницыПанели = "Раздел2" Тогда
	
		ОпределяющаяОбласть = Форма.ТабличныйДокумент.Области.П000020017003_КодЛьготы;
		ОбрабатываемаяОбласть = Форма.ТабличныйДокумент.Области.П000020017003_Основание;
		ОбрабатываемаяОбласть2 = Форма.ТабличныйДокумент.Области.П000020018003;
		Если ПустаяСтрока(ОпределяющаяОбласть.Значение)Тогда
			ЗапретитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть);
			ЗапретитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть2);
		ИначеЕсли ОпределяющаяОбласть.Значение = "30200" Тогда
			ЗапретитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть);
			ОбрабатываемаяОбласть2.ЦветФона = ?(Форма.СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет, ЦветОбластиРучногоВвода, ЦветАвторасчитываемойОбласти);
		Иначе
			РазрешитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть);
			УстановитьОснованиеЛьготыПоУмолчанию(ОбрабатываемаяОбласть);
			
			ОбрабатываемаяОбласть2.ЦветФона = ?(Форма.СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет, ЦветОбластиРучногоВвода, ЦветАвторасчитываемойОбласти);
		КонецЕсли;
		
		ОпределяющаяОбласть = Форма.ТабличныйДокумент.Области.П000020019003_КодЛьготы;
			
		ОбрабатываемаяОбласть1 = Форма.ТабличныйДокумент.Области.П000020019003_Основание;
		ОбрабатываемаяОбласть2 = Форма.ТабличныйДокумент.Области.П000020019003_Процент;
		ОбрабатываемаяОбласть3 = Форма.ТабличныйДокумент.Области.П000020020003;
				
		Если ПустаяСтрока(ОпределяющаяОбласть.Значение) Тогда
			ЗапретитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть1);
			ЗапретитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть2);
			ЗапретитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть3);
		Иначе
			РазрешитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть1);
			РазрешитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть2);
			
			Если Форма.СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Тогда
				ОбрабатываемаяОбласть3.Защита   = Ложь;
				ОбрабатываемаяОбласть3.ЦветФона = ЦветОбластиРучногоВвода;
			Иначе
				ОбрабатываемаяОбласть3.Защита   = Истина;
				ОбрабатываемаяОбласть3.ЦветФона = ЦветАвторасчитываемойОбласти;
			КонецЕсли;
		
			УстановитьОснованиеЛьготыПоУмолчанию(ОбрабатываемаяОбласть1);
		КонецЕсли;
		
		ОпределяющаяОбласть = Форма.ТабличныйДокумент.Области.П000020021003_КодЛьготы;
		
		ОбрабатываемаяОбласть1 = Форма.ТабличныйДокумент.Области.П000020021003_Основание;
		ОбрабатываемаяОбласть2 = Форма.ТабличныйДокумент.Области.П000020021003_Ставка;
		ОбрабатываемаяОбласть3 = Форма.ТабличныйДокумент.Области.П000020022003;
		
		Если ПустаяСтрока(ОпределяющаяОбласть.Значение) Тогда
			ЗапретитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть1);
			ЗапретитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть2);
			ЗапретитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть3);
			УстановитьПредставлениеНуля(ОбрабатываемаяОбласть2, "-");
		Иначе
			РазрешитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть1);
			РазрешитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть2);
		    						
			Если Форма.СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Тогда
				ОбрабатываемаяОбласть3.Защита   = Ложь;
				ОбрабатываемаяОбласть3.ЦветФона = ЦветОбластиРучногоВвода;
			Иначе
				ОбрабатываемаяОбласть3.Защита   = Истина;
				ОбрабатываемаяОбласть3.ЦветФона = ЦветАвторасчитываемойОбласти;
			КонецЕсли;
		
			УстановитьОснованиеЛьготыПоУмолчанию(ОбрабатываемаяОбласть1);
			УстановитьПредставлениеНуля(ОбрабатываемаяОбласть2, "0");
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьПредставлениеНуля(Область, Знач Представление)
	
	Если СокрЛП(Представление) = "0" Тогда
		Представление = "";
	КонецЕсли;
	
	ИсходнаяСтрокаФормата = Область.Формат;
	МассивЭлементовФорматирования = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИсходнаяСтрокаФормата, ";");
	
	Для Инд = 0 По МассивЭлементовФорматирования.ВГраница() Цикл
		ЭлементФорматаБезКрайнихПробелов = СокрЛП(МассивЭлементовФорматирования[Инд]);
		Если СтрНайти(ЭлементФорматаБезКрайнихПробелов, "ЧН") = 1 Тогда
			МассивЭлементовФорматирования[Инд] = "ЧН=" + Представление;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	СобраннаяСтрокаФормата = "";
	Для Каждого ЭлементФормата Из МассивЭлементовФорматирования Цикл
		ВставлятьРазделитель = НЕ ПустаяСтрока(СобраннаяСтрокаФормата);
		СобраннаяСтрокаФормата = СобраннаяСтрокаФормата + ?(ВставлятьРазделитель, ";", "")+ ЭлементФормата;
	КонецЦикла;
	
	Область.Формат = СобраннаяСтрокаФормата;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗапретитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть)
	
	ЦветНедоступнойОбласти = Форма.мСтруктураЦветовРаскраски["_5"];
	
	ОбрабатываемаяОбласть.Защита   = Истина;
	ОбрабатываемаяОбласть.ЦветФона = ЦветНедоступнойОбласти;
	
	ТипЗначенияОбласти = ТипЗнч(ОбрабатываемаяОбласть.Значение);
	Если ТипЗначенияОбласти = Тип("Число") Тогда
		ОбрабатываемаяОбласть.Значение = 0;
	ИначеЕсли ТипЗначенияОбласти = Тип("Строка") Тогда
		ОбрабатываемаяОбласть.Значение = "";
	Иначе
		ОбрабатываемаяОбласть.Значение = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РазрешитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть)
		
	Если Форма.ТаблицаВариантыЗаполненияРаздел2[0].ТаблицаВариантовЗаполнения.НайтиСтроки(Новый Структура("КодПоказателя", ОбрабатываемаяОбласть.Имя)).Количество() > 0 Тогда
		ЦветОбластиРучногоВвода = Форма.мСтруктураЦветовРаскраски["_3"];
	Иначе
		ЦветОбластиРучногоВвода = Форма.мСтруктураЦветовРаскраски["_0"];
	КонецЕсли;
	
	ОбрабатываемаяОбласть.Защита   = Ложь;
	ОбрабатываемаяОбласть.ЦветФона = ЦветОбластиРучногоВвода;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОснованиеЛьготыПоУмолчанию(ОбластьОснованияЛьготы)
	
	Если ПустаяСтрока(ОбластьОснованияЛьготы.Значение) Тогда
		ОбластьОснованияЛьготы.Значение = "000000000000";
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтруктуруЗависимыхЯчеекДляАвторасчета()
	
	СтруктураЗависимыхЯчеекДляАвторасчета = Новый Структура;
	
	// Раздел 1
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000010002103_1", "П000010002003_1");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000010002103_2", "П000010002003_2");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000010002103_3", "П000010002003_3");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000010003003_1", "П000010002103_1;П000010002303_1;П000010002503_1;П000010002703_1;П000010002003_1");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000010003003_2", "П000010002103_2;П000010002303_2;П000010002503_2;П000010002703_2;П000010002003_2");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000010003003_3", "П000010002103_3;П000010002303_3;П000010002503_3;П000010002703_3;П000010002003_3");
	
	// Раздел 2
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000020012003", "П000020011003");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000020014003", "П000020007003;П000020013003;П000020011003");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000020016003", "П000020015003");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000020018003", "П000020017003_КодЛьготы;П000020007003;П000020013003;П000020016003;П000020015003");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000020020003", "П000020007003;П000020013003;П000020016003;П000020019003_Процент;П000020015003");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000020022003", "П000020007003;П000020013003;П000020016003;П000020021003_Ставка;П000020015003");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000020023003", "П000020007003;П000020013003;П000020011003;П000020017003_КодЛьготы;П000020007003;П000020013003;П000020016003;П000020015003;П000020020003;П000020022003;П000020019003_Процент;П000020021003_Ставка");
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНачальныеНастройки()
	
	МакетСоставаПоказателей = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(СтруктураРеквизитовФормы.мСоставПоказателей);

	Для Инд = 0 По МакетСоставаПоказателей.Области.Количество() - 1 Цикл
		
		ТекОбласть    = МакетСоставаПоказателей.Области[Инд];
		ИмяСтраницы   = ТекОбласть.Имя;
			
		ЭтаФорма["ТаблицаВариантыЗаполнения" + ИмяСтраницы].Добавить();
		
		// Таблица значений содержит информацию о вариантах заполнения показателя отчета.
		// В колонках таблицы значений отображается следующая информация:
		//   - имя ячейки (код показателя);
		//   - вариант заполнения ячейки;
		//   - вычисленное по данным ИБ значение ячейки;
		//   - величина автокорректировки значения ячейки;
		//   - примечание к ячейке.
		//
		
		Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
			// перебираем строки макета
			
			// Код показателя (по составу показателей) определяется по первой колонке макета
			КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
			ИмяПоказателя = КодПоказателя;
			
			Если КодПоказателя = "===" Тогда         // признак конечной строки
				Прервать;
			КонецЕсли;
			
			Если Лев(КодПоказателя, 2) = "//" Тогда  // пропускаем комментарии
				Продолжить;
			КонецЕсли;
			
			// код показателя по форме отчете (имя ячейки в полях табличного документа формы)
			КодПоказателяПоФорме = СокрЛП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
			// признак многострочности определяется по третьей колонке макета
			ПризнМногострочность = СокрЛП(МакетСоставаПоказателей.Область(Ном, 3).Текст);
			// по четвертой колонке определяется тип данных реквизита
			ТипДанныхРеквизита   = СокрЛП(МакетСоставаПоказателей.Область(Ном, 4).Текст);
			// по колонке 5 определяется исходное количество строк многострочного раздела
			стрКолСтрокИсходный  = СокрЛП(МакетСоставаПоказателей.Область(Ном, 5).Текст);
			// вариант заполнения ячейки определяется по колонке 6 макета
			стрВариантЗаполнения = РегламентированнаяОтчетность.ПолучитьВариантЗаполненияПоказателяРегОтчета(МакетСоставаПоказателей, Ном);
			// код показателя из структуры, берется из колонки 9
			КодПоказателяПоСтруктуре = СокрЛП(МакетСоставаПоказателей.Область(Ном, 9).Текст);
			
			чКолСтрокИсходный    = ? (ПустаяСтрока(стрКолСтрокИсходный),  0, Число(стрКолСтрокИсходный));
			чВариантЗаполнения   = ? (ПустаяСтрока(стрВариантЗаполнения), 0, Число(стрВариантЗаполнения));
			
			// формируем таблицу значений, содержащей состав показателей отчета
			НоваяСтрока = мТаблицаСоставПоказателей.Добавить();
			НоваяСтрока.ИмяПоляТаблДокумента   = ИмяСтраницы;
			НоваяСтрока.КодПоказателяПоСоставу = КодПоказателя;
			НоваяСтрока.КодПоказателяПоФорме   = КодПоказателяПоФорме;
			НоваяСтрока.ПризнМногострочности   = ПризнМногострочность;
			НоваяСтрока.ТипДанныхПоказателя    = ТипДанныхРеквизита;
			НоваяСтрока.КодПоказателяПоСтруктуре = КодПоказателяпоСтруктуре;
			
			Если чВариантЗаполнения <> 0 Тогда
				// Если в колонке 6 задан вариант заполнения показателя, 
				// то его значение может определяться по данным ИБ.
				// Дополняем таблицу значений вариантов заполнения
				НоваяСтрока = ЭтаФорма["ТаблицаВариантыЗаполнения" + ИмяСтраницы][0].ТаблицаВариантовЗаполнения.Добавить();
				НоваяСтрока.КодПоказателя      = ? (Не ПустаяСтрока(КодПоказателяПоФорме), КодПоказателяПоФорме, КодПоказателя);
				НоваяСтрока.ВариантЗаполнения  = чВариантЗаполнения;
				НоваяСтрока.КодПоказателяПоСтруктуре  = КодПоказателяПоСтруктуре;
			КонецЕсли;
			
		КонецЦикла;
		
		Если ЭтаФорма["ТаблицаВариантыЗаполнения" + ИмяСтраницы][0].ТаблицаВариантовЗаполнения.Количество() > 0 Тогда
			// имеются автоматически заполняемые ячейки
			
			// Создаем структуру, содержащей варианты заполнения показателей отчета.
			//
			// В качестве ключа используется имя страницы основной панели формы, содержащей
			//   табличный документ с автоматически заполняемыми показателями.
			// В качестве значения принимаем Массив из таблицы значений - вариантов заполнения
			//   показателей по каждой странице многостраничного раздела.
			//
			мСтруктураВариантыЗаполнения.Вставить(ИмяСтраницы, ИмяСтраницы);
			мСтруктураВариантыЗаполненияЭталон.Вставить(ИмяСтраницы, ИмяСтраницы);
			
		Конецесли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ФормироватьСтруктуруСтраницОтчета() 
	
	// Дерево содержит коллекцию страниц отчета.
	// В колонках дерева хранятся следующие данные:
	//    - представление листа;
	//    - имя страницы основной панели формы, содержащей выводимый на печать лист;
	//    - имя поля табличного документа;
	//    - имя области ячеек табличного документа (используется в случае вывода
	//      на печать отдельных страниц титульного листа);
	//    - ориентация страницы при печати;
	//    - число, метка вывода страницы на печать;
	//    - число, метка показа страницы на основной панели формы;
	//    - число, метка выгрузки данных страницы в ИМНС.
	//
	
	мДеревоСтраницОтчета.ПолучитьЭлементы().Очистить();
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Титульный";
	СтрокаУровня1.Представление            = "Титульный лист";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел1";
	СтрокаУровня1.Представление            = "Раздел 1";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел2";
	СтрокаУровня1.Представление            = "Раздел 2";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	
КонецПроцедуры

&НаСервере
Процедура ФормироватьСтруктуруСвойствСтраниц() Экспорт
	
	мСвойстваРазделовДекларации.ПолучитьЭлементы().Очистить();
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	
	СтрокаУровня1.ИмяСтраницы                          = "Титульный";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Ложь;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "Раздел1";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Истина;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "ОКАТОРаздел1";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "Раздел2";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Истина;	
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "ОКАТОРаздел2";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьСохраненныеДанные()
	Перем ДанныеМногострочныхРазделов;
	Перем ДанныеМногостраничныхРазделов;
	Перем ДанныеВариановАвтоЗаполнения;
	Перем ПоказателиОтчета;
	Перем ВерсияФормы;
	Перем ТаблицаМногостраничногоДокумента;
	
	// В случае, если формы была скопирована по F9, то проверим, не изменилась ли организация.
	Если СтруктураРеквизитовФормы.Организация <> СтруктураРеквизитовФормы.мСохраненныйДок.Организация
		И СтруктураРеквизитовФормы.Организация <> РегламентированнаяОтчетностьКлиентСервер.ПустоеЗначениеТипа("СправочникСсылка.Организации")
		И СтруктураРеквизитовФормы.Организация <> Неопределено Тогда
		// Меняем переменную, для того, чтобы запустилась процедура ЗаполнитьСведенияОбОрганизации
		СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация = Истина;
	Иначе
		// восстанавливаем реквизиты отчета
		СтруктураРеквизитовФормы.Организация =	СтруктураРеквизитовФормы.мСохраненныйДок.Организация;
	КонецЕсли;
	
	ДатаПодписи			   = СтруктураРеквизитовФормы.мСохраненныйДок.ДатаПодписи;
	СтруктураРеквизитовФормы.ЕдиницаИзмерения 		   = СтруктураРеквизитовФормы.мСохраненныйДок.ЕдиницаИзмерения;
	СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = СтруктураРеквизитовФормы.мСохраненныйДок.ТочностьЕдиницыИзмерения;
	Комментарий					   = СтруктураРеквизитовФормы.мСохраненныйДок.Комментарий;
	
	// восстанавливаем сохраненные данные отчета
	СписокСохранения = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить();
	
	// список листов, выводимых на печать
	ДеревоНастройкиСтраниц = СтруктураРеквизитовФормы.мСохраненныйДок.ДеревоНастройкиСтраниц.Получить();
	
	// восстанавливаем сохраненные данные вариантов автозаполнения ячеек
	Если СписокСохранения.Свойство("ДанныеВариантовАвтоЗаполнения", ДанныеВариановАвтоЗаполнения) Тогда
		
		Если НЕ ДанныеВариановАвтоЗаполнения = Неопределено Тогда
			
			мСтруктураВариантыЗаполнения.Очистить();
			
			Для Каждого ЭлементСтруктуры Из ДанныеВариановАвтоЗаполнения Цикл
				
				мСтруктураВариантыЗаполнения.Вставить(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Ключ);
				
				ЭтаФорма["ТаблицаВариантыЗаполнения" + ЭлементСтруктуры.Ключ].Очистить();
				
				Для Каждого ЭлементМассива Из ЭлементСтруктуры.Значение Цикл
					
					ТаблВарЗаполнения = ЭтаФорма["ТаблицаВариантыЗаполнения" + ЭлементСтруктуры.Ключ].Добавить().ТаблицаВариантовЗаполнения;
					
					ЗначениеВДанныеФормы(ЭлементМассива, ТаблВарЗаполнения);
					
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// восстановим сохраненные данные редактируемых ячеек
	СписокСохранения.Свойство("ПоказателиОтчета", ПоказателиОтчета);
	
	// восстанавливаем версию формы
	Если СписокСохранения.Свойство("ВерсияФормы", ВерсияФормы) Тогда
		Если ВерсияФормы <> СтруктураРеквизитовФормы.мВерсияФормы Тогда
			// Версия формы изменилась.
			// Обновляем пользовательские настройки.
			СтруктураРеквизитовФормы.мСтараяВерсияФормы = ВерсияФормы;
			ОбновитьПользовательскиеНастройки();
		КонецЕсли;
	КонецЕсли;
	ЗначениеВРеквизитФормы(ДеревоНастройкиСтраниц.Скопировать(), "мДеревоСтраницОтчета");
		
	// восстанавливаем сохраненные данные многостраничных разделов
	Если СписокСохранения.Свойство("ДанныеМногостраничныхРазделов", ДанныеМногостраничныхРазделов) Тогда
		
		Для Каждого ЭлементСтруктуры Из ДанныеМногостраничныхРазделов Цикл
					
			НайденноеЗначение = Неопределено;
			
			мСтруктураМногостраничныхРазделов.Свойство(ЭлементСтруктуры.Ключ, НайденноеЗначение);
			
			Если НЕ НайденноеЗначение = Неопределено Тогда
				
				НайденноеЗначение = ЭтаФорма[НайденноеЗначение];
				
				ЗначениеВДанныеФормы(ЭлементСтруктуры.Значение, НайденноеЗначение);
				                     				
				Если НайденноеЗначение[0].Свойство("Данные") Тогда
					
					Для Каждого СтрокаТаблЗнач Из НайденноеЗначение Цикл
						
						Если ТипЗнч(СтрокаТаблЗнач.Данные) = Тип("СписокЗначений") Тогда
							
							СтрокаТаблЗнач.Данные.Очистить();
							СтрокаТаблЗнач.Данные.Добавить(ЭлементСтруктуры.Значение[НайденноеЗначение.Индекс(СтрокаТаблЗнач)].Данные);
							
						КонецЕсли;
						
					КонецЦикла;
					
				КонецЕсли;
								   				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Для Каждого Раздел Из мСтруктураМногостраничныхРазделов Цикл
		Для Каждого Страница Из ЭтаФорма[Раздел.Значение] Цикл
			Страница.АктивнаяСтраница = Ложь;
		КонецЦикла;
	КонецЦикла;
             	
	СписокСохранения.Свойство("ФлПодсчетСтраниц", СтруктураРеквизитовФормы.мСчетчикСтраниц);
	СписокСохранения.Свойство("ФлОтклВыборЗначений", СтруктураРеквизитовФормы.мАвтоВыборКодов);
	СтруктураРеквизитовФормы.мАвтоВыборКодов = ?(СтруктураРеквизитовФормы.мАвтоВыборКодов = Неопределено, Ложь, СтруктураРеквизитовФормы.мАвтоВыборКодов);
	
	Префикс = "ПолеТабличногоДокумента";	
	
	Для Каждого Раздел Из мСвойстваРазделовДекларации.ПолучитьЭлементы() Цикл	
	
		Если НЕ Раздел.МногостраничностьВРазделе Тогда
			ЭтаФорма["СтруктураДанных" + Раздел.ИмяСтраницы] = ПоказателиОтчета[Префикс + Раздел.ИмяСтраницы];
		КонецЕсли;

	КонецЦикла;
	
	ВосстановитьСведенияОбОрганизацииИзТитульногоЛистаСтарогоОбразца(ПоказателиОтчета);
		
	ИмяТекРаздела = "Титульный";
	
	Для Каждого ЭлСтруктуры Из ЭтаФорма["СтруктураДанных" + ИмяТекРаздела] Цикл
		Попытка
			ТабличныйДокумент.Области[ЭлСтруктуры.Ключ].Значение = ЭлСтруктуры.Значение;
		Исключение
		КонецПопытки;
	КонецЦикла;
	
	СписокСохранения.Свойство("Автозаполнение", СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);
	
	Если НЕ СписокСохранения.Свойство("ПечатьБезШтрихкодаРазрешена", СтруктураРеквизитовФормы.мПечатьБезШтрихкодаРазрешена) Тогда
		СтруктураРеквизитовФормы.мПечатьБезШтрихкодаРазрешена = Ложь;
	КонецЕсли;
	
	РегламентированнаяОтчетность.ОперацииПриВосстановленииРегламентированногоОтчета(ЭтаФорма);
	
	КопироватьДанныеФормы(мДеревоСтраницОтчета, мДеревоВыбранныхСтраниц);
	
	УстановитьФорматВыводаНаСервере(ЭтаФорма);
	
	Модифицированность   = Ложь;
	СтруктураРеквизитовФормы.мДокументВосстановлен = Истина;	
	СформироватьДеревоРазделовОтчетаНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьСведенияОбОрганизацииИзТитульногоЛистаСтарогоОбразца(ПоказателиОтчета)
	
	ПоказателиТаблПоле = ПоказателиОтчета["ПолеТабличногоДокументаТитульный"];
	
	Для Каждого Показатель Из ПоказателиТаблПоле Цикл
		
		ИмяПоказателя = Показатель.Ключ;
		
		Если ИмяПоказателя = "ИНН1_1" Тогда
			СтруктураДанныхТитульный.Вставить("ИНН1");
			Для Ном = 1 По 12 Цикл
				СтруктураДанныхТитульный.ИНН1 = СокрЛП(СтруктураДанныхТитульный.ИНН1) + ПоказателиТаблПоле["ИНН1_" + Ном];
				СтруктураДанныхТитульный.Удалить("ИНН1_" + Ном);
			КонецЦикла;
			Если Лев(СтруктураДанныхТитульный.ИНН1, 2) = "00" Тогда
				СтруктураДанныхТитульный.ИНН1 = Сред(СтруктураДанныхТитульный.ИНН1, 3);
			КонецЕсли;
			Если Прав(СтруктураДанныхТитульный.ИНН1, 2) = "--" Тогда
				СтруктураДанныхТитульный.ИНН1 = Лев(СтруктураДанныхТитульный.ИНН1, СтрНайти(СтруктураДанныхТитульный.ИНН1, "--") - 1);
			КонецЕсли;
		ИначеЕсли ИмяПоказателя = "КПП1_1" Тогда
			СтруктураДанныхТитульный.Вставить("КПП1");
			Для Ном = 1 По 9 Цикл
				СтруктураДанныхТитульный.КПП1 = СокрЛП(СтруктураДанныхТитульный.КПП1) + ПоказателиТаблПоле["КПП1_" + Ном];
				СтруктураДанныхТитульный.Удалить("КПП1_" + Ном);
			КонецЦикла;
		ИначеЕсли ИмяПоказателя = "НомерКорректировки1" Тогда
			СтруктураДанныхТитульный.Вставить("НомерКорректировки");
			Для Ном = 1 По 3 Цикл
				СтруктураДанныхТитульный.НомерКорректировки = СокрЛП(СтруктураДанныхТитульный.НомерКорректировки) + ?(ПоказателиТаблПоле["НомерКорректировки" + Ном] = "-", "", ПоказателиТаблПоле["НомерКорректировки" + Ном]);
				СтруктураДанныхТитульный.Удалить("НомерКорректировки" + Ном);
			КонецЦикла;				
		ИначеЕсли ИмяПоказателя = "Период1" Тогда
			СтруктураДанныхТитульный.Вставить("Период");
			Для Ном = 1 По 2 Цикл
				СтруктураДанныхТитульный.Период = СокрЛП(СтруктураДанныхТитульный.Период) + ПоказателиТаблПоле["Период" + Ном];
				СтруктураДанныхТитульный.Удалить("Период" + Ном);
			КонецЦикла;	
		ИначеЕсли ИмяПоказателя = "ОтчетГод1" Тогда
			СтруктураДанныхТитульный.Вставить("ОтчетГод");
			Для Ном = 1 По 4 Цикл
				СтруктураДанныхТитульный.ОтчетГод = СокрЛП(СтруктураДанныхТитульный.ОтчетГод) + ПоказателиТаблПоле["ОтчетГод" + Ном];
				СтруктураДанныхТитульный.Удалить("ОтчетГод" + Ном);
			КонецЦикла;						
		ИначеЕсли ИмяПоказателя = "КодИМНС1" Тогда
			СтруктураДанныхТитульный.Вставить("КодИМНС");
			Для Ном = 1 По 4 Цикл
				СтруктураДанныхТитульный.КодИМНС = СокрЛП(СтруктураДанныхТитульный.КодИМНС) + ПоказателиТаблПоле["КодИМНС" + Ном];
				СтруктураДанныхТитульный.Удалить("КодИМНС" + Ном);
			КонецЦикла;	
		ИначеЕсли ИмяПоказателя = "ПоМесту1" Тогда
			СтруктураДанныхТитульный.Вставить("ПоМесту");
			Для Ном = 1 По 3 Цикл
				СтруктураДанныхТитульный.ПоМесту = СокрЛП(СтруктураДанныхТитульный.ПоМесту) + ПоказателиТаблПоле["ПоМесту" + Ном];
				СтруктураДанныхТитульный.Удалить("ПоМесту" + Ном);
			КонецЦикла;		
		ИначеЕсли ИмяПоказателя = "Прил1" Тогда
			СтруктураДанныхТитульный.Вставить("Прил");
			Для Ном = 1 По 3 Цикл
				СтруктураДанныхТитульный.Прил = СокрЛП(СтруктураДанныхТитульный.Прил) + ПоказателиТаблПоле["Прил" + Ном];
				СтруктураДанныхТитульный.Удалить("Прил" + Ном);
			КонецЦикла;							
		КонецЕсли;
		
	КонецЦикла;
	
	ЗаполнитьДатуПодписи(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнениеЗначенийВКвадратикахНаКлиенте(Знач ИмяСтраницы) Экспорт
	
	ЗаполнениеЗначенийВКвадратиках(ЭтаФорма, ИмяСтраницы);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнениеЗначенийВКвадратикахНаСервере(Знач ИмяСтраницы) Экспорт
	
	ЗаполнениеЗначенийВКвадратиках(ЭтаФорма, ИмяСтраницы);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнениеЗначенийВКвадратиках(Форма, Знач ИмяСтраницы)
	
	// Процедура "заглушка" для сохранения работающих механизмов.
	Возврат;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьФорматВывода(Форма, НаимРаздела) Экспорт
	Перем СтруктураГруппы;
	Перем РазмерностьПрописьюТекст;

	Если Форма.СтруктураРеквизитовФормы.ЕдиницаИзмерения = Форма.ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1 Тогда
		Форма.СтруктураРеквизитовФормы.мДелитель = 1;
		РазмерностьПрописьюТекст = "в рублях";
		Форма.СтруктураРеквизитовФормы.мСтрокаФормата = "ЧЦ = 14; ЧДЦ = " + Форма.СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧС = 0";
		СтрокаФорматаНольЦифрой = "ЧЦ=17; ЧДЦ=" + Форма.СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=; ЧС=0";
		
	ИначеЕсли Форма.СтруктураРеквизитовФормы.ЕдиницаИзмерения = Форма.ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1000 Тогда
		Форма.СтруктураРеквизитовФормы.мДелитель = 1000;
		РазмерностьПрописьюТекст = "в тыс. рублей";
		Форма.СтруктураРеквизитовФормы.мСтрокаФормата = "ЧЦ = 14; ЧДЦ = " + Форма.СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧС = 3";
		СтрокаФорматаНольЦифрой = "ЧЦ=17; ЧДЦ=" + Форма.СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=; ЧС=3";
		
	ИначеЕсли Форма.СтруктураРеквизитовФормы.ЕдиницаИзмерения = Форма.ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1000000 Тогда
		Форма.СтруктураРеквизитовФормы.мДелитель = 1000000;
		РазмерностьПрописьюТекст = "в млн. рублей";
		Форма.СтруктураРеквизитовФормы.мСтрокаФормата = "ЧЦ = 14; ЧДЦ = " + Форма.СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧС = 6";
		СтрокаФорматаНольЦифрой = "ЧЦ=17; ЧДЦ=" + Форма.СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=; ЧС=6";
		
	КонецЕсли;
		
	Для Каждого СтрПоказатели Из Форма.мТаблицаСоставПоказателей Цикл

		Если НЕ НаимРаздела = СтрПоказатели.ИмяПоляТаблДокумента Тогда
			Продолжить;
		КонецЕсли;
				
		КодПоказателя        = СокрП(СтрПоказатели.КодПоказателяПоСоставу);
		ПризнМногострочность = СокрП(СтрПоказатели.ПризнМногострочности);
		КодПоказателяПоСтруктуре = СокрП(СтрПоказатели.КодПоказателяПоСтруктуре);

		Если КодПоказателя = "===" Тогда
			Прервать;
		КонецЕсли;

		Если (Лев(КодПоказателя, 2) = "//") ИЛИ (КодПоказателя = "###") Тогда
			Продолжить;
		КонецЕсли;

		КодПоказателяВФорме = СокрП(СтрПоказатели.КодПоказателяПоФорме);

		ИмяПоказателя = КодПоказателя;
		Если Не ПустаяСтрока(КодПоказателяВФорме) Тогда
			ИмяПоказателя = КодПоказателяВФорме;
		КонецЕсли;

		ТипДанныхПоказателя = СокрП(СтрПоказатели.ТипДанныхПоказателя);		
		
		Если (ТипДанныхПоказателя = "Е") И (НЕ ПустаяСтрока(КодПоказателяПоСтруктуре)) Тогда
			
			ТекТабличноеПоле = Форма.ТабличныйДокумент;
						
		КонецЕсли;
				
		Если (ТипДанныхПоказателя = "Е") И (ПустаяСтрока(КодПоказателяПоСтруктуре)) Тогда

		    ТекТабличноеПоле = Форма.ТабличныйДокумент;
			
			Если ПризнМногострочность <> "/" Тогда
				ФорматируемаяОбласть = ТекТабличноеПоле.Области[ИмяПоказателя];
				ФорматируемаяОбласть.ТипЗначения = Форма.СтруктураРеквизитовФормы.мОписаниеТиповЧислоЕ;
				ФорматируемаяОбласть.Формат = Форма.СтруктураРеквизитовФормы.мСтрокаФормата;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;			
КонецПроцедуры

&НаСервере
Процедура ПоказатьПериод()
	
	НомерМесяца   = Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ=М");
	Если НомерМесяца = "12" Тогда
		НомерМесяца = "0";
	КонецЕсли;
	
	НомерКвартала = Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ=к");
	НомерГода     = Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ=гггг");
	
	ТабличныйДокумент.Области.ОтчетГод.Значение   = НомерГода;	
	СтруктураРеквизитовФормы.СтрПериодОтчета = ПредставлениеПериода( НачалоДня(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета), КонецДня(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета), "ФП = Истина" );
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСведенияОбОрганизацииНаСервере(ВПрограммеИзмененаДатаПодписи = Ложь)
	
	ЗаполнитьСведенияОбОрганизации(ЭтаФорма, ВПрограммеИзмененаДатаПодписи);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьСведенияОбОрганизации(Форма, ВПрограммеИзмененаДатаПодписи = Ложь)
	
	Если НЕ ВПрограммеИзмененаДатаПодписи Тогда
	
		СтрокаСведений = "ИННЮЛ, КППЮЛ, НаимЮЛПол, КодНО, НаимНО, ТипНП, ТелОрганизации, ФИО";
		
		СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(Форма.СтруктураРеквизитовФормы.Организация, Форма.ДатаПодписи, СтрокаСведений);
		
		Форма.ТабличныйДокумент.Области.ИНН1.Значение = СведенияОбОрганизации.ИННЮЛ;
		Форма.ТабличныйДокумент.Области.КПП1.Значение = СведенияОбОрганизации.КППЮЛ;
		
		Форма.ТабличныйДокумент.Области["КодИМНС"].Значение = СведенияОбОрганизации.КодНО;
				
		ОбластьНаименованияОрганизации = Форма.ТабличныйДокумент.Области.НаименованиеОрганизации;
		ОбластьНаименованияОрганизации.Значение = СокрЛП(СведенияОбОрганизации.НаимЮлПол);
		
		ОбластьТелефонаОрганизации = Форма.ТабличныйДокумент.Области.ТелефонОрганизации;
		ОбластьТелефонаОрганизации.Значение = СокрЛП(СведенияОбОрганизации.ТелОрганизации);
		
	КонецЕсли;
	
	РегламентированнаяОтчетность.ПолучитьЗначениеОКВЭД(Форма.ДатаПодписи, Форма.СтруктураРеквизитовФормы);
	РегламентированнаяОтчетностьКлиентСервер.УстановитьЗначениеОКВЭД(Форма.ДатаПодписи,
																	 Форма.СтруктураРеквизитовФормы,
																	 Форма.ТабличныйДокумент.Области.ОКВЭД.Значение);
	
	// заполняем сведения о подписантах
	ЗаполнитьСведенияОПодписантах(Форма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьСведенияОПодписантах(Форма)
	
	ТипПодписанта = "1";
	Подписант = "";
	НаименованиеОрганизацииПредставителя = "";
	НаименованиеДокументаПредставителя = "";
	
	//выясним, есть ли представитель
	КодНО = Форма.ТабличныйДокумент.Области.КодИМНС.Значение;
	КПП   = Форма.ТабличныйДокумент.Области.КПП1.Значение;
	
	СведенияОПредставителе = РегламентированнаяОтчетностьВызовСервера.ПолучитьПоКодамСведенияОПредставителе(Форма.СтруктураРеквизитовФормы.Организация, КодНО, КПП);
	
	ТипПодписанта = СведенияОПредставителе.ТипПодписанта;
	
	Если ТипПодписанта = "1" Тогда
		// Представителя нет.
		Если Не РегламентированнаяОтчетностьВызовСервера.ЭтоЮридическоеЛицо(Форма.СтруктураРеквизитовФормы.Организация) Тогда
			// Поле подписанта остается пустым.
		Иначе
			// Подписант - руководитель.
			СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(Форма.СтруктураРеквизитовФормы.Организация, Форма.ДатаПодписи, "ФИОРук, ФИО");
			Подписант = СокрЛП(?(ЗначениеЗаполнено(СведенияОбОрганизации.ФИОРук), СведенияОбОрганизации.ФИОРук, СведенияОбОрганизации.ФИО));	
		КонецЕсли;
	Иначе
		// Есть представитель, подписант - он.
		Подписант                            = СведенияОПредставителе.ФИОПредставителя;
		НаименованиеОрганизацииПредставителя = СведенияОПредставителе.НаименованиеОрганизацииПредставителя;
		НаименованиеДокументаПредставителя   = СведенияОПредставителе.ДокументПредставителя;
	КонецЕсли;
	
	Форма.ТабличныйДокумент.Области.ТипПодписанта.Значение                        = ТипПодписанта;
	Форма.ТабличныйДокумент.Области.Подписант.Значение                            = Подписант;
	Форма.ТабличныйДокумент.Области.НаименованиеОрганизацииПредставителя.Значение = НаименованиеОрганизацииПредставителя;
	Форма.ТабличныйДокумент.Области.НаименованиеДокументаПредставителя.Значение   = НаименованиеДокументаПредставителя;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура УправлениеЛистамиНаСервере(ТипНП = Неопределено) Экспорт
	
	УправлениеЛистами(ТипНП);
	
КонецПроцедуры

&НаКлиенте
Процедура УправлениеЛистамиНаКлиенте(ТипНП = Неопределено) Экспорт
	
	УправлениеЛистами(ТипНП);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеЛистами(ТипНП = Неопределено)
	
	// Процедура "заглушка" для сохранения работающих механизмов.
	// Вызов осуществляется из роЗаполнитьСведенияОбОрганизации.
	Возврат;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЦветФонаЯчейкиНаКлиенте(ИмяЯчейки = Неопределено, ВариантЗаполнения = Неопределено, ИмяТекущейСтраницыПанели = "") Экспорт
	
	УстановитьЦветФонаЯчейки(ЭтаФорма, ИмяЯчейки, ВариантЗаполнения, ИмяТекущейСтраницыПанели);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЦветФонаЯчейкиНаСервере(ИмяЯчейки = Неопределено, ВариантЗаполнения = Неопределено, ИмяТекущейСтраницыПанели = "") Экспорт
	
	УстановитьЦветФонаЯчейки(ЭтаФорма, ИмяЯчейки, ВариантЗаполнения, ИмяТекущейСтраницыПанели);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЦветФонаЯчейки(Форма, ИмяЯчейки = Неопределено, ВариантЗаполнения = Неопределено, ИмяТекущейСтраницыПанели = "") Экспорт
	
	Перем ЦветФона;
	Перем Комментарий;

	// Не нужно разукрашивать табличные поля, если открывается без открытия формы (например печать или просмотр)
	Если Форма.СтруктураРеквизитовФормы.мБезОткрытияФормы Или Форма.СтруктураРеквизитовФормы.мРежимПечати Тогда
		Возврат;
	КонецЕсли;
    	
	Если Не ИмяЯчейки = Неопределено Тогда
		// устанавливаем цвет фона конкретной ячейки
		#Если НаКлиенте Тогда
			ИмяСтраницыПанели = РегламентированнаяОтчетностьКлиент.ОпределитьСтраницуПанелиПоКодуПоказателяНаКлиенте(Форма, ИмяЯчейки);
		#Иначе
			ИмяСтраницыПанели = РегламентированнаяОтчетностьВызовСервера.ОпределитьСтраницуПанелиПоКодуПоказателяНаСервере(Форма, ИмяЯчейки);
		#КонецЕсли
		
		Если ИмяСтраницыПанели = Неопределено Тогда
			Возврат;
		КонецЕсли;

		ИмяПоляТаблДокумента = "ТабличныйДокумент";

		Ключ = "_" + ВариантЗаполнения;
		Форма.мСтруктураЦветовРаскраски.Свойство(Ключ, ЦветФона);

		Если ВариантЗаполнения = 4 Тогда	
			Форма[ИмяПоляТаблДокумента].Области[ИмяЯчейки].Защита = Истина;
		Иначе
			Форма[ИмяПоляТаблДокумента].Области[ИмяЯчейки].Защита = Ложь;
		КонецЕсли;

		// установим цвет ячейки
		Форма[ИмяПоляТаблДокумента].Области[ИмяЯчейки].ЦветФона = ЦветФона;

	Иначе
		// устанавливаем цвет фона всех автозаполняемых ячеек активной страницы

		ТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения(Форма, ИмяТекущейСтраницыПанели);
		Если ТаблицаВариантыЗаполнения = Неопределено Тогда
			Возврат;
		КонецЕсли;

		Для Каждого Строка Из ТаблицаВариантыЗаполнения Цикл
			ИмяПоказателя     = Строка.КодПоказателя;
			ВариантЗаполнения = Строка.ВариантЗаполнения;
			Комментарий       = Строка.Комментарий;
			КодПоказателяПоСтруктуре = Строка.КодПоказателяПоСтруктуре;
			
			Многострочность = Ложь;
			КолвоСтрокВМногострочнойЧасти = 1;
			
			Для Инд = 1 по КолвоСтрокВМногострочнойЧасти Цикл
				
				ТекОбластьЯчеек = Форма.ТабличныйДокумент.Области[ИмяПоказателя];
				Если (Не ПустаяСтрока(Комментарий)) ИЛИ (Не ПустаяСтрока(ТекОбластьЯчеек.Примечание.Текст)) Тогда
					ТекОбластьЯчеек.Примечание.Текст = Комментарий;
				КонецЕсли;
				
				Ключ = "_" + ВариантЗаполнения;
				Форма.мСтруктураЦветовРаскраски.Свойство(Ключ, ЦветФона);
				
				Если ВариантЗаполнения = 4 Тогда	
					Форма.ТабличныйДокумент.Области[ИмяПоказателя].Защита = Истина;
				Иначе
					Форма.ТабличныйДокумент.Области[ИмяПоказателя].Защита = Ложь;
				КонецЕсли;
				
				Форма.ТабличныйДокумент.Области[ИмяПоказателя].ЦветФона = ЦветФона;
				
			КонецЦикла;

		КонецЦикла;

	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьТаблицуВариантовЗаполнения(Форма, ИмяСтраницыПанели, ПолучитьЭталонную = Ложь)

	#Если НаКлиенте Тогда
		Возврат РегламентированнаяОтчетностьКлиент.ПолучитьТаблицуВариантовЗаполненияНаКлиенте(Форма, ИмяСтраницыПанели, ПолучитьЭталонную);
	#Иначе
		Возврат РегламентированнаяОтчетностьВызовСервера.ПолучитьТаблицуВариантовЗаполненияНаСервере(Форма, ИмяСтраницыПанели, ПолучитьЭталонную);
	#КонецЕсли
	
КонецФункции

&НаСервере
Функция ОпределитьТабличноеПолеПоИдМногострочногоРазделаНаСервере(ИдГруппы) Экспорт
	
	ИдГрупп = Новый Структура;
	
	Возврат ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИдГруппы, ИдГрупп);
	
КонецФункции 

&НаКлиенте
Функция ОпределитьТабличноеПолеПоИдМногострочногоРазделаНаКлиенте(ИдГруппы) Экспорт
	
	ИдГрупп = Новый Структура;
	
	Возврат ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИдГруппы, ИдГрупп);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИдГруппы, ИдГрупп)
	
	Перем ТекТабличноеПоле;
			
	Возврат ТекТабличноеПоле;
	
КонецФункции

&НаСервере
Процедура ОбновитьПользовательскиеНастройки()
	
	Сообщение = Новый СообщениеПользователю;
	
	Сообщение.Текст = НСтр("ru='Изменилась версия формы отчета. Выполняется обновление пользовательских настроек.'");
	
	Сообщение.Сообщить();
	
	// Обновляем варианты заполнения показателей отчета
	ЕстьИзмененияВариантыЗаполнения = ОбновитьВариантыЗаполнения();
	
	// Обновляем настройки страниц отчета (содержание отчета)
	ЕстьИзмененияНастройкаСтраниц   = ОбновитьНастройкиСтраниц();
	
	Если ЕстьИзмененияВариантыЗаполнения ИЛИ ЕстьИзмененияНастройкаСтраниц Тогда
		// Если были изменения в пользовательских настройках,
		// то устанавливаем флаг модифицированности формы.
		Модифицированность = Истина;
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Обновление пользовательских настроек успешно завершено.'");
		Сообщение.Сообщить();
		
	Иначе
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Изменения в структуре пользовательских настроек не обнаружены.'");
		Сообщение.Сообщить();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиРазделВТабличныйДокументНаСервере(ИмяГруппы, СтруктураГруппы) Экспорт
	
	ВывестиРазделВТабличныйДокумент(ЭтаФорма, ИмяГруппы, СтруктураГруппы);
	
КонецПроцедуры

&НаКлиенте
Процедура ВывестиРазделВТабличныйДокументНаКлиенте(ИмяГруппы, СтруктураГруппы) Экспорт
	
	ВывестиРазделВТабличныйДокумент(ЭтаФорма, ИмяГруппы, СтруктураГруппы);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ВывестиРазделВТабличныйДокумент(Форма, ИмяГруппы, СтруктураГруппы)
	
	Перем ИсходноеКоличествоСтрокГруппы;
	
	// определим исходное колво строк многострочного раздела,
	// соответствующее бумажной форме отчета
	Форма.мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);
	
	// реальное кол-во строк (колво заполненных строк)
	ТекущееКоличествоСтрокГруппы = СтруктураГруппы.Количество();
	
	#Если НаКлиенте Тогда
		ТекТабличноеПолеИмя = Форма.ОпределитьТабличноеПолеПоИдМногострочногоРазделаНаКлиенте(ИмяГруппы);
	#Иначе
		ТекТабличноеПолеИмя = Форма.ОпределитьТабличноеПолеПоИдМногострочногоРазделаНаСервере(ИмяГруппы);
	#КонецЕсли
	
	ТекТабличноеПоле = Форма[ТекТабличноеПолеИмя];
		
	// При восстановлении сохраненных данных отчета сравниваем исходное кол-во
	// отображаемых в форме строк многострочного раздела с реальным количеством
	// созданных строк в сохраненном отчете.
	Если ТекущееКоличествоСтрокГруппы > ИсходноеКоличествоСтрокГруппы Тогда
		
		Форма.ВставитьОбластьВТабличныйДокументНаСервере(ИсходноеКоличествоСтрокГруппы, ТекущееКоличествоСтрокГруппы, ИмяГруппы, ТекТабличноеПоле, ТекТабличноеПолеИмя, СтруктураГруппы)
		
	КонецЕсли;
	
	// выводим значения строк
	Для Каждого СтрокаТаблицы Из СтруктураГруппы Цикл
		
		Для НомерГрафы = 1 По Форма.мСтруктураКолвоКолонокРазделов[ИмяГруппы] Цикл
			
			КолонкаТаблицыИмя = ИмяГруппы + Формат(НомерГрафы, "ЧЦ=2; ЧВН=");
			
			НомерСтрокиВТаблице      = СтруктураГруппы.Индекс(СтрокаТаблицы);
			НомерСтрокиВФормеТаблицы = НомерСтрокиВТаблице + 1;
			
			Если СтруктураГруппы[0].Свойство(КолонкаТаблицыИмя) Тогда
				
				ИмяЯчейки                = КолонкаТаблицыИмя + "_" + Формат(НомерСтрокиВФормеТаблицы, "ЧГ=0");
				ОбластьЯчейкиТаблицы     = ТекТабличноеПоле.Области[ИмяЯчейки];
				ЗначениеЯчейки           = СтрокаТаблицы[КолонкаТаблицыИмя];
				
				Если ОбластьЯчейкиТаблицы.СодержитЗначение = Истина Тогда
					// задаем значение ячейки
					ОбластьЯчейкиТаблицы.Значение = ЗначениеЯчейки;
				Иначе
					// устанавливаем порядковый номер строки
					ОбластьЯчейкиТаблицы.Текст    = ЗначениеЯчейки;
					
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ВставитьОбластьВТабличныйДокументНаСервере(ИсходноеКоличествоСтрокГруппы, ТекущееКоличествоСтрокГруппы, ИмяГруппы, ТекТабличноеПоле, ТекТабличноеПолеИмя, СтруктураГруппы) Экспорт
	
	// При превышении реального кол-ва строк над исходным кол-вом (по шаблону),
	// автоматически добавляем необходимое колво строк.
	Для НомНовойСтроки = ИсходноеКоличествоСтрокГруппы + 1 По ТекущееКоличествоСтрокГруппы Цикл
		
		НомИсходнойСтроки = НомНовойСтроки - 1;
		
		НомерГрафы = 1;
		
		КолонкаТаблицыИмя = ИмяГруппы + Формат(НомерГрафы, "ЧЦ=2; ЧВН=");
		
		// определяем имя первой ячейки последней из исходных строк
		ИмяПервойЯчейкиПоследнейСтроки = КолонкаТаблицыИмя + "_" + НомИсходнойСтроки;
		// область первой ячейки последней из исходных строк
		ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяПервойЯчейкиПоследнейСтроки];
		
		// номера строк исходной области
		НомерВерхЯчейкиОбласти = ОбластьЯчейки.Верх;
		НомерНижнЯчейкиОбласти = ОбластьЯчейки.Низ;
		
		СдвигСтрок = НомерНижнЯчейкиОбласти - НомерВерхЯчейкиОбласти + 1;
		
		// номера строк вставляемой области
		НомерВерхЯчейкиНовойОбласти = НомерВерхЯчейкиОбласти + СдвигСтрок;
		НомерНижнЯчейкиНовойОбласти = НомерНижнЯчейкиОбласти + СдвигСтрок;
		
		Если НомИсходнойСтроки < 11 Тогда	
			РегламентированнаяОтчетностьВызовСервера.СпециальногоДобавленияСтроки(ТекТабличноеПоле,ТекТабличноеПолеИмя, ИмяГруппы, НомерВерхЯчейкиОбласти, НомерНижнЯчейкиОбласти);
			ЭтаФорма[ТекТабличноеПолеИмя] = ТекТабличноеПоле;
		Иначе
			РегламентированнаяОтчетностьВызовСервера.ВставитьОбластьВТабличныйДокумент(ТекТабличноеПоле, НомерВерхЯчейкиОбласти, НомерНижнЯчейкиОбласти);
			ЭтаФорма[ТекТабличноеПолеИмя] = ТекТабличноеПоле;
		КонецЕсли;
		
		// переопределяем имена вставленной области
		Для НомерГрафы = 1 По ЭтаФорма.мСтруктураКолвоКолонокРазделов[ИмяГруппы] Цикл
			
			КолонкаТаблицыИмя = ИмяГруппы + Формат(НомерГрафы, "ЧЦ=2; ЧВН=");
			
			// переопределяем имена вставленной области
			Если СтруктураГруппы[0].Свойство(КолонкаТаблицыИмя) Тогда
				
				ИмяОбластиЯчейки    = КолонкаТаблицыИмя + "_" + Формат(НомИсходнойСтроки, "ЧГ=0");
				ИмяНовОбластиЯчейки = КолонкаТаблицыИмя + "_" + Формат(НомНовойСтроки, "ЧГ=0");
				
				ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяОбластиЯчейки];
				ОбластьЯчейки.Имя = ИмяНовОбластиЯчейки;
				
				// определяем границы ячейки исходной области
				НомерВерхСтрокиЯчейки  = ОбластьЯчейки.Верх - СдвигСтрок;
				НомерНижнСтрокиЯчейки  = ОбластьЯчейки.Низ  - СдвигСтрок;
				НомерЛевоКолонкиЯчейки = ОбластьЯчейки.Лево;
				НомерПравКолонкиЯчейки = ОбластьЯчейки.Право;
				
				// Назначаем имя ячейки исходной области,
				// (т.к. в результате вставки новой области оно было очищено)
				ОбластьЯчейкиИсходнойОбласти = ТекТабличноеПоле.Область(НомерВерхСтрокиЯчейки, НомерЛевоКолонкиЯчейки, НомерНижнСтрокиЯчейки, НомерПравКолонкиЯчейки);
				ОбластьЯчейкиИсходнойОбласти.Имя = ИмяОбластиЯчейки;
				
				// очищаем значения ячеек вставленной области
				Если ОбластьЯчейки.СодержитЗначение = Истина Тогда
					ОбластьЯчейки.Очистить();
				Иначе
					// порядковый номер последней строки перед вставкой
					ИсходныйНомер        = Число("0"+ОбластьЯчейки.Текст);
					НовыйПорядковыйНомер = ИсходныйНомер + 1;
					
					ОбластьЯчейки.Текст  = Строка(НовыйПорядковыйНомер);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ИмяЛиста = Неопределено) Экспорт
	
	ИдГрупп = Новый Структура;
	
	Возврат ОпределитьИдМногострочногоРазделаПоАктивнойСтранице(ИмяЛиста, , ИдГрупп);
	
КонецФункции

&НаКлиенте
Функция ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаКлиенте(ИмяЛиста = Неопределено) Экспорт
	
	ИдГрупп = Новый Структура;
	
	Возврат ОпределитьИдМногострочногоРазделаПоАктивнойСтранице(ИмяЛиста, , ИдГрупп);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ОпределитьИдМногострочногоРазделаПоАктивнойСтранице(ИмяЛиста = Неопределено, ТекущаяСтраница, ИдГрупп)
	Перем ИмяГруппы;
	
	Возврат ИмяГруппы;
	
КонецФункции

&НаСервере
Функция ОбновитьПеременныеМодуляНаСервере(ИмяПоказателя, ЗначениеПоказателя) Экспорт
	
	Возврат ОбновитьПеременныеМодуля(ЭтаФорма, ИмяПоказателя, ЗначениеПоказателя);
	
КонецФункции

&НаКлиенте
Функция ОбновитьПеременныеМодуляНаКлиенте(ИмяПоказателя, ЗначениеПоказателя) Экспорт
	
	Возврат ОбновитьПеременныеМодуля(ЭтаФорма, ИмяПоказателя, ЗначениеПоказателя);
	
КонецФункции

&НаКлиенте
Процедура СобратьДанные(Команда)
	
	РегламентированнаяОтчетностьКлиент.ОбновитьДеревоРазделовВФормеОтчета(ЭтаФорма);
	
	СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
	
	СформироватьРаздел1(Истина);
	
	СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
	
	РегламентированнаяОтчетностьКлиент.ОбновитьДеревоРазделовВФормеОтчета(ЭтаФорма);
	
	СтруктураРеквизитовФормы.НомерТекущейСтраницы = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета;
	
	ИзменитьФорматНевведенныхПоказателей(Этаформа);
	
	Если ЭтаФорма["ТаблицаСтраницыРазделаРаздел1"].Количество() > 0 Тогда
		Для Каждого Область Из ТабличныйДокумент.Области Цикл
			Если СтрЧислоВхождений(Область.Имя, "УдалитьСтраницу") > 0 Тогда
				Если ЭтаФорма["ТаблицаСтраницыРазделаРаздел1"].Количество() = 1 Тогда
					Область.Текст = "";
					Область.Гиперссылка = Ложь;
				Иначе
					Если СтрЧислоВхождений(Область.Имя, "Значок") > 0 Тогда
						Область.Текст = "х";
					Иначе
						Область.Текст = "Удалить страницу";
					КонецЕсли;
					Область.Гиперссылка = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОчисткаИПодготовкаРаздела1(АвансовыеПлатежиПоОКАТО)
	Перем ТаблицаСтраницРаздела1;

	Если Не мСтруктураМногостраничныхРазделов.Свойство("Раздел1", ТаблицаСтраницРаздела1) Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаСтраницРаздела1 = ЭтаФорма[ТаблицаСтраницРаздела1];
	
	Для Каждого СтрокаТаблицы Из ТаблицаСтраницРаздела1 Цикл
		Для Блок = 1 По 3 Цикл
			
			ОКАТО = СокрЛП(СтрокаТаблицы.Данные[0].Значение["П000010002003" + "_" + Блок]);
			Авансы = Новый Структура;
			
			Авансы.Вставить("СуммаАвансовыхПлатежей1Кв",СокрЛП(СтрокаТаблицы.Данные[0].Значение["П000010002303" + "_" + Блок]));
			Авансы.Вставить("СуммаАвансовыхПлатежей2Кв",СокрЛП(СтрокаТаблицы.Данные[0].Значение["П000010002503" + "_" + Блок]));
			Авансы.Вставить("СуммаАвансовыхПлатежей3Кв",СокрЛП(СтрокаТаблицы.Данные[0].Значение["П000010002703" + "_" + Блок]));
			
			Если АвансовыеПлатежиПоОКАТО.Получить(ОКАТО) = Неопределено Тогда
				АвансовыеПлатежиПоОКАТО.Вставить(ОКАТО, Авансы);
			КонецЕсли;
			
		КонецЦикла;
	КонецЦикла;
	
	КоличествоСтраниц = ТаблицаСтраницРаздела1.Количество();
	Для ОбратныйИндекс = 1 По КоличествоСтраниц Цикл
		Инд = КоличествоСтраниц - ОбратныйИндекс;
		СтрокаТаблицы = ТаблицаСтраницРаздела1[Инд];
		Если НЕ СтрокаТаблицы.АктивнаяСтраница Тогда
			Если ТаблицаСтраницРаздела1.Количество() = 1 Тогда
				// В таблице должно быть не менее одной строки.
				СтрокаТаблицы.АктивнаяСтраница = Истина;
			Иначе
				ТаблицаСтраницРаздела1.Удалить(СтрокаТаблицы);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	КБК = ТабличныйДокумент.Области.П000010001003.Значение;
	ОчиститьТабличноеПолеНаСервере("Раздел1");
	ТабличныйДокумент.Области.П000010001003.Значение = КБК;
	
	РегламентированнаяОтчетностьКлиентСервер.ОчиститьВариантыЗаполнения(ЭтаФорма, "Раздел1");
	
КонецПроцедуры

&НаСервере
Процедура СформироватьРаздел1(ПоРазделу2 = Ложь)
	
	Перем ТаблицаСтраницРаздела1;
	Перем ТаблицаСтраницРаздела2;
	
	АвансовыеПлатежиПоОКАТО = Новый Соответствие;
	
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел1" Тогда
		
		Если ПоРазделу2 Тогда
			ОчисткаИПодготовкаРаздела1(АвансовыеПлатежиПоОКАТО);
		КонецЕсли;
		
	Иначе
		
		Если ПоРазделу2 Тогда
			КБК = ТаблицаСтраницыРазделаРаздел1[0].Данные[0].Значение.П000010001003;
			
			ТаблицаСтраницыРазделаРаздел1.Очистить();
			
			СтрПерваяСтраница = ЭтаФорма.ТаблицаСтраницыРазделаРаздел1.Добавить();
			СтрПерваяСтраница.Представление               = "Новая страница";
			СтрПерваяСтраница.АктивнаяСтраница            = Истина;
			СтрПерваяСтраница.АвтоматическоеПредставление = Истина;
			
			ЗаполнитьПустыеСтруктурыДанных();
			
			РегламентированнаяОтчетностьКлиентСервер.ОчиститьВариантыЗаполнения(ЭтаФорма, "Раздел1");
			
			ТаблицаСтраницыРазделаРаздел1[0].Данные[0].Значение.П000010001003 = КБК;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не мСтруктураМногостраничныхРазделов.Свойство("Раздел1", ТаблицаСтраницРаздела1) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не мСтруктураМногостраничныхРазделов.Свойство("Раздел2", ТаблицаСтраницРаздела2) Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаСтраницРаздела1 = ЭтаФорма[ТаблицаСтраницРаздела1];
	ТаблицаСтраницРаздела2 = ЭтаФорма[ТаблицаСтраницРаздела2];

	ДляХраненияМассиваОкатоСумма = Новый Соответствие();
	МассивОкато					 = Новый Массив();
	
	КоличествоСтраниц = ТаблицаСтраницРаздела2.Количество();
	
	Для Инд = 0 По КоличествоСтраниц - 1 Цикл
		
		Если ТаблицаСтраницРаздела2[Инд].Данные.Количество() = 0 Тогда
			Прервать;
		КонецЕсли;
		
		ОКАТО = СокрЛП(ТаблицаСтраницРаздела2[Инд].Данные[0].Значение["П000020002003"]);
		
		Если НЕ ПустаяСтрока(ОКАТО) Тогда
			
			УсловиеСуммирования = Новый Структура;
			УсловиеСуммирования.Вставить("П000020002003", ОКАТО);
			Сумма = СуммаПоказателяРазделаПоСтраницам("Раздел2", "П000020023003", УсловиеСуммирования, Истина);
			
			Если ДляХраненияМассиваОкатоСумма.Получить(ОКАТО) = Неопределено Тогда
				МассивОкато.Добавить(ОКАТО);
				ДляХраненияМассиваОкатоСумма.Вставить(ОКАТО,Сумма);
			КонецЕсли;
			
		Иначе
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='Не заполнен код ОКТМО на странице Раздела 2!'");
			Сообщение.Сообщить();
						
			Возврат;
			
		КонецЕсли;
		
	КонецЦикла;
	
	КоличествоБлоковНаЛисте = 3;
	
	Для Инд = 0 По ДляХраненияМассиваОкатоСумма.Количество()-1 Цикл				
		
		Если Инд % КоличествоБлоковНаЛисте = 0 И Инд <> 0 Тогда
			
			Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел1" Тогда
				КБК = ТабличныйДокумент.Области.П000010001003.Значение;
			КонецЕсли;
			
			ВставитьДополнительнуюСтраницуНаСервере("Раздел1");
			
			Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел1" Тогда
				ТабличныйДокумент.Области.П000010001003.Значение = КБК;
			КонецЕсли;
			
		КонецЕсли;
		
		ОкончаниеИмениОбласти = Формат(Инд % КоличествоБлоковНаЛисте + 1, "ЧГ=");
		
		Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел1" Тогда
			
			ТабличныйДокумент.Области["П000010002003_" + ОкончаниеИмениОбласти].Значение = МассивОкато[Инд];
			ТабличныйДокумент.Области["П000010002103_" + ОкончаниеИмениОбласти].Значение = ДляХраненияМассиваОкатоСумма[МассивОкато[Инд]];
			
			Авансы = АвансовыеПлатежиПоОКАТО[МассивОкато[Инд]];
			Если Авансы <> Неопределено Тогда 
				ТабличныйДокумент.Области["П000010002303_" + ОкончаниеИмениОбласти].Значение = Авансы.СуммаАвансовыхПлатежей1Кв;
				ТабличныйДокумент.Области["П000010002503_" + ОкончаниеИмениОбласти].Значение = Авансы.СуммаАвансовыхПлатежей2Кв;
				ТабличныйДокумент.Области["П000010002703_" + ОкончаниеИмениОбласти].Значение = Авансы.СуммаАвансовыхПлатежей3Кв;
			КонецЕсли;
			
			РасчетНаСервере("Раздел1", "П000010002103_" + ОкончаниеИмениОбласти); 
			
		Иначе
			
			ТаблицаСтраницРаздела1[Цел(Инд / КоличествоБлоковНаЛисте)].Данные[0].Значение["П000010002003_" + ОкончаниеИмениОбласти] = МассивОкато[Инд];
			ТаблицаСтраницРаздела1[Цел(Инд / КоличествоБлоковНаЛисте)].Данные[0].Значение["П000010002103_" + ОкончаниеИмениОбласти] = ДляХраненияМассиваОкатоСумма[МассивОкато[Инд]];
			                      			
		КонецЕсли;
				
	КонецЦикла;
		
	Модифицированность = Истина;

КонецПроцедуры

&НаСервере
Функция СуммаПоказателяРазделаПоСтраницам(ИмяРаздела, ИмяПоказателя, Условия = Неопределено, Округлять = Ложь) Экспорт
	
	СтруктураРаздела = Неопределено;
	Если НЕ мСтруктураМногостраничныхРазделов.Свойство(ИмяРаздела, СтруктураРаздела) Тогда
		ВызватьИсключение "Раздел """ + ИмяРаздела + """ не существует в описании структуры многостраничных разделов";
	КонецЕсли;
	
	СтруктураРаздела = ЭтаФорма[СтруктураРаздела];
	Результат = 0;
	
	Для Каждого СтраницаРаздела Из СтруктураРаздела Цикл
		
		РазмещениеДанных = СтраницаРаздела.Данные[0].Значение;
		
		ЗначениеПоказателя = ПолучитьДанныеИзМестаРазмещения(РазмещениеДанных, ИмяПоказателя);
		Если Округлять Тогда
			ЗначениеПоказателя = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, ЗначениеПоказателя);
		КонецЕсли;
		
		Если ТипЗнч(Условия) = Тип("Структура") Тогда
			Для Каждого ЭлементСтруктуры ИЗ Условия Цикл
				ИмяПоказателяУсловия = ЭлементСтруктуры.Ключ;
				ЗначениеПоказателяУсловия = ПолучитьДанныеИзМестаРазмещения(РазмещениеДанных, ИмяПоказателяУсловия);
				Если ЗначениеПоказателяУсловия <> ЭлементСтруктуры.Значение Тогда
					ЗначениеПоказателя = 0;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Результат = Результат + ЗначениеПоказателя;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ОбновитьПеременныеМодуля(Форма, ИмяПоказателя, ЗначениеПоказателя)
	
	ИзмененияПроизошли = Ложь;
	
	Возврат ИзмененияПроизошли;
	
КонецФункции

&НаСервере
Функция ОбновитьВариантыЗаполнения()
	Перем МассивВариантовЗаполненияСтраниц;
	
	ЕстьИзменения = Ложь;
	
	// Подлежат обновлению следующие структуры:
	// 1.Пользовательские настройки вариантов заполнения таблиц
	
	// Сначала создадим эталонные модели вариантов автозаполнения таблиц.
	// Их определяем по макету СоставПоказателей
	МакетСоставаПоказателей = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(СтруктураРеквизитовФормы.мСоставПоказателей);
	
	ОписаниеТиповСтрока15  = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(15));
	
	ОписаниеТиповСтрока50  = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(50));
	
	ОписаниеТиповСтрока100 = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100));
	
	ОписаниеТиповЧисло1    = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(1));
	
	ЕстьИзменения = Ложь;
	
	Для ПереборныйИнд = 0 По МакетСоставаПоказателей.Области.Количество() - 1 Цикл
		// организован Цикл по именованным областям макета,
		// содержащим состав показателей и варианты автозаполнения
		// таблиц на каждой странице основной панели формы.
		
		ТекОбласть  = МакетСоставаПоказателей.Области[ПереборныйИнд];
		ИмяСтраницы = ТекОбласть.Имя;
		
		// Таблица значений содержит информацию о вариантах заполнения показателя отчета.
		// В колонках таблицы значений отображается следующая информация:
		//   - имя ячейки (код показателя);
		//   - вариант заполнения ячейки;
		//   - вычисленное по данным ИБ значение ячейки;
		//   - величина автокорректировки значения ячейки;
		//   - примечание к ячейке.
		//
		ТаблицаВариантыЗаполнения = Новый ТаблицаЗначений;
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "КодПоказателя",     ОписаниеТиповСтрока50  );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "ВариантЗаполнения", ОписаниеТиповЧисло1    );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "ЗначениеАвто",      СтруктураРеквизитовФормы.мОписаниеТиповЧислоЕ   );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "Дельта",            СтруктураРеквизитовФормы.мОписаниеТиповЧислоЕ   );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "Комментарий",       ОписаниеТиповСтрока100 );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "КодПоказателяПоСтруктуре",     ОписаниеТиповСтрока50  );
		
		Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
			// перебираем строки макета
			
			// Код показателя (по составу показателей) определяется по первой колонке макета
			КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
			ИмяПоказателя = КодПоказателя;
			
			Если КодПоказателя = "===" Тогда         // признак конечной строки
				Прервать;
			КонецЕсли;
			
			Если Лев(КодПоказателя, 2) = "//" Тогда  // пропускаем комментарии
				Продолжить;
			КонецЕсли;
			
			// код показателя по форме отчете (имя ячейки в полях табличного документа формы)
			КодПоказателяПоФорме = СокрЛП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
			// вариант заполнения ячейки определяется по колонке 6 макета
			стрВариантЗаполнения = РегламентированнаяОтчетность.ПолучитьВариантЗаполненияПоказателяРегОтчета(МакетСоставаПоказателей, Ном);
			
			чВариантЗаполнения   = ? (ПустаяСтрока(стрВариантЗаполнения), 0, Число(стрВариантЗаполнения));
			Если чВариантЗаполнения <> 0 Тогда
				// Если в колонке 6 задан варианет заполнения показателя, 
				// то его значение может определяться по данным ИБ.
				// Дополняем таблицу значений вариантов заполнения
				НоваяСтрока = ТаблицаВариантыЗаполнения.Добавить();
				НоваяСтрока.КодПоказателя      = ? (Не ПустаяСтрока(КодПоказателяПоФорме), КодПоказателяПоФорме, КодПоказателя);
				НоваяСтрока.ВариантЗаполнения  = чВариантЗаполнения;
				НоваяСтрока.КодПоказателяПоСтруктуре  = чВариантЗаполнения;
			КонецЕсли;
			
		КонецЦикла;
		
		Если Не мСтруктураВариантыЗаполнения.Свойство(ИмяСтраницы, МассивВариантовЗаполненияСтраниц) Тогда
			
			МассивВариантовЗаполненияСтраниц = ЭтаФорма["ТаблицаВариантыЗаполнения" + ИмяСтраницы];
			
			Если ТаблицаВариантыЗаполнения.Количество() > 0 Тогда
				
				МассивВариантовЗаполненияСтраниц.Очистить();
				
				МассивВариантовЗаполненияСтраниц.Добавить(ТаблицаВариантыЗаполнения);
								
				мСтруктураВариантыЗаполнения.Вставить(ИмяСтраницы, ИмяСтраницы);
				
				ЕстьИзменения = Истина;
				
			КонецЕсли;
		Иначе
			
			МассивВариантовЗаполненияСтраниц = ЭтаФорма["ТаблицаВариантыЗаполнения" + ИмяСтраницы];
			
			Если ТаблицаВариантыЗаполнения.Количество() = 0 Тогда
				// Рассмотрим вариант, когда в предыдущей версии формы по данной странице
				// было предусмотрено автозаполнение таблицы, а в текущей версии - отключено.
				// В этом случае из структуры вариантов автозаполнения удаляем элемент,
				// хранящий настройки вариантов автозаполнения текущей станицы.
				мСтруктураВариантыЗаполнения.Удалить(ИмяСтраницы);
				
				ЕстьИзменения = Истина;
			Иначе
				// Рассмотрим вариант, когда и в предыдущей, и в текущей версии формы было предусмотрено
				// автозаполнение текущей страницы. В этом случае обновляем таблицу значений, содержащей
				// пользовательские настройки вариантов автозаполнения текущей страницы.
				
				Для каждого ЭлементМассива Из МассивВариантовЗаполненияСтраниц Цикл
					
					ЭлементМассива = ЭлементМассива.ТаблицаВариантовЗаполнения;
					
					Для каждого СтрокаТаблицы Из ТаблицаВариантыЗаполнения Цикл
						КодПоказателя     = СтрокаТаблицы.КодПоказателя;
						ВариантЗаполнения = СтрокаТаблицы.ВариантЗаполнения;
						
						Если ЭлементМассива.НайтиСтроки(Новый Структура("КодПоказателя", КодПоказателя)).Количество() = 0 Тогда	
							// Рассмотри вариант, когда в новой версии формы список реквизитов,
							// заполняемых автоматически по данным ИБ, дополнен новым реквизитом.
							НоваяСтрока = ЭлементМассива.Добавить();
							НоваяСтрока.КодПоказателя     = КодПоказателя;
							НоваяСтрока.ВариантЗаполнения = ВариантЗаполнения;
							
							ЕстьИзменения = Истина;
						КонецЕсли;
					КонецЦикла;
					
					ТаблДляЦикла = ЭлементМассива.Выгрузить();
					
					Для каждого СтрокаТаблицы Из ТаблДляЦикла Цикл
						КодПоказателя = СтрокаТаблицы.КодПоказателя;

						Если ТаблицаВариантыЗаполнения.Найти(КодПоказателя, "КодПоказателя") = Неопределено Тогда
							// Рассмотрим вариант, когда в предыдущей версии отчета для данной страницы
							// было предусмотрено автозаполнение ячейки по коду КодПоказателя,
							// а в текущей версии - отключено. В этом случае удаляем эту ячейку
							// из таблицы пользовательских настроек вариантов автозаполнения.
							СтрокиВЭлементеМассива = ЭлементМассива.НайтиСтроки(Новый Структура("КодПоказателя", КодПоказателя));
							Если  СтрокиВЭлементеМассива.Количество() > 0 Тогда
								ЭлементМассива.Удалить(СтрокиВЭлементеМассива[0]);
								ЕстьИзменения = Истина;
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
					
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ЕстьИзменения;
	
КонецФункции

&НаСервере
Функция ОбновитьНастройкиСтраниц()
	
	ЕстьИзменения = Ложь;
	
	// формируем дерево значений - пользовательских настройки страниц отчета
	мПользовательскиеНастройкиСтраниц = РеквизитФормыВЗначение("мДеревоСтраницОтчета").Скопировать();
	
	// формируем дерево значений - настройки страниц отчета обновленной формы
	ФормироватьСтруктуруСтраницОтчета();
	
	// Сначала проверяем, не изменилась ли структура настроек страниц (колонки дерева)
	Для каждого ИсхКолонка Из РеквизитФормыВЗначение("мДеревоСтраницОтчета").Колонки Цикл
		
		Если мПользовательскиеНастройкиСтраниц.Колонки.Найти(ИсхКолонка.Имя) = Неопределено Тогда
			// добавиляем новую колонку
			мПользовательскиеНастройкиСтраниц.Колонки.Добавить(ИсхКолонка.Имя, ИсхКолонка.ТипЗначения, ИсхКолонка.Заголовок, ИсхКолонка.Ширина);
			мПользовательскиеНастройкиСтраниц.ЗагрузитьКолонку(РеквизитФормыВЗначение("мДеревоСтраницОтчета").ВыгрузитьКолонку(ИсхКолонка.Имя), ИсхКолонка.Имя);
			
			ЕстьИзменения = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	// Выполняем обратную задачу:
	// удаляем отсутствующие колонки
	Для каждого ТекКолонка Из мПользовательскиеНастройкиСтраниц.Колонки Цикл
		
		Если РеквизитФормыВЗначение("мДеревоСтраницОтчета").Колонки.Найти(ТекКолонка.Имя) = Неопределено Тогда
			// удаляем отсутствующую колонку
			мПользовательскиеНастройкиСтраниц.Колонки.Удалить(мПользовательскиеНастройкиСтраниц.Колонки.Индекс(ТекКолонка));
			
			ЕстьИзменения = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	// Обновляем строки дерева значений - пользовательских настроек:
	//
	// добавляем новые строки и удаляем лишние:
	Если мДеревоСтраницОтчета.ПолучитьЭлементы().Количество() <> мПользовательскиеНастройкиСтраниц.Строки.Количество() Тогда
		
		КолвоКолонок     = РеквизитФормыВЗначение("мДеревоСтраницОтчета").Колонки.Количество();
		
		// добавляем новые строки
		Для каждого Строка Из мДеревоСтраницОтчета.ПолучитьЭлементы() Цикл
			
			Если мПользовательскиеНастройкиСтраниц.Найти(Строка.ИмяСтраницы, "ИмяСтраницы") = Неопределено Тогда
				
				НоваяСтрока = мПользовательскиеНастройкиСтраниц.Строки.Добавить();
				Для НомКолонки = 0 По (КолвоКолонок - 1) Цикл
					
					НоваяСтрока[НомКолонки] = Строка[НомКолонки];
					
				КонецЦикла;
				
			КонецЕсли;
			
			// обновляем строки второго уровня
			Если Строка.Строки.Количество() > 0 Тогда
				
				Для каждого Строка2 Из Строка.Строки Цикл
					
					Если мПользовательскиеНастройкиСтраниц.Найти(Строка2.ИмяСтраницы, "ИмяСтраницы") = Неопределено Тогда
						
						НоваяСтрока2 = НоваяСтрока.Строки.Добавить();
						Для НомКолонки = 0 По (КолвоКолонок - 1) Цикл
							
							НоваяСтрока2[НомКолонки] = Строка2[НомКолонки];
							
						КонецЦикла;
						
					КонецЕсли;
					
				КонецЦикла; 
				
			КонецЕсли; 
			
		КонецЦикла;
		
		// удаляем лишние строки
		Для каждого Строка Из мПользовательскиеНастройкиСтраниц Цикл
			
			Если РеквизитФормыВЗначение("мДеревоСтраницОтчета").Найти(Строка.ИмяСтраницы, "ИмяСтраницы") = Неопределено Тогда
				
				мПользовательскиеНастройкиСтраниц.Строки.Удалить(мПользовательскиеНастройкиСтраниц.Строки.Индекс(Строка));
				
			КонецЕсли;
			
		КонецЦикла;
		
		ЕстьИзменения = Истина;
	КонецЕсли;
	
	Для каждого ТекСтрока Из мДеревоСтраницОтчета.ПолучитьЭлементы() Цикл
		
		НомСтр = мДеревоСтраницОтчета.ПолучитьЭлементы().Индекс(ТекСтрока);
		
		// устанавливаем признаки предопределенных установок выгружаемых страниц (значение флажка = 2);
		Если ТекСтрока.ВыгрузитьСтраницу = 2 Тогда
			
			Если мПользовательскиеНастройкиСтраниц.Строки[НомСтр].ВыгрузитьСтраницу <> 2 Тогда
				мПользовательскиеНастройкиСтраниц.Строки[НомСтр].ВыгрузитьСтраницу = 2;
				ЕстьИзменения = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
		// обновляем представление
		Если ТекСтрока.Представление <> мПользовательскиеНастройкиСтраниц.Строки[НомСтр].Представление Тогда
			мПользовательскиеНастройкиСтраниц.Строки[НомСтр].Представление = ТекСтрока.Представление;
			ЕстьИзменения = Истина;
		КонецЕсли;
		
		// обновляем имя поля табличного документа
		Если ТекСтрока.ИмяПоляТабличногоДокум <> мПользовательскиеНастройкиСтраниц.Строки[НомСтр].ИмяПоляТабличногоДокум Тогда
			мПользовательскиеНастройкиСтраниц.Строки[НомСтр].ИмяПоляТабличногоДокум = ТекСтрока.ИмяПоляТабличногоДокум;
			ЕстьИзменения = Истина;
		КонецЕсли;
		
	КонецЦикла; 
	
	ЗначениеВРеквизитФормы(мПользовательскиеНастройкиСтраниц.Скопировать(), "мДеревоСтраницОтчета");
	
	Возврат ЕстьИзменения;
	
КонецФункции

&НаСервере
Процедура СформироватьДеревоРазделовОтчетаНаСервере() Экспорт
	
	СформироватьДеревоРазделовОтчета(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьДеревоРазделовОтчетаНаКлиенте() Экспорт
	
	СформироватьДеревоРазделовОтчета(ЭтаФорма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СформироватьДеревоРазделовОтчета(Форма)
	
	Форма["РазделыОтчета"].ПолучитьЭлементы().Очистить();
	
	Для Каждого ЭлементДереваСтраницОтчета Из Форма["мДеревоСтраницОтчета"].ПолучитьЭлементы() Цикл
		
		Если ЭлементДереваСтраницОтчета.ПоказатьСтраницу = 1 Тогда
			
			ЭлементРазделовОтчета = Форма["РазделыОтчета"].ПолучитьЭлементы().Добавить();
			ЭлементРазделовОтчета.КолонкаРазделыОтчета         = ЭлементДереваСтраницОтчета.Представление;
			ЭлементРазделовОтчета.КолонкаРазделыОтчетаСокрНаим = ЭлементДереваСтраницОтчета.ИмяСтраницы;
			ЭлементРазделовОтчета.ИндексКартинки               = 1;
			ЭлементРазделовОтчета.РазделМногостраничный        = Ложь;
			ЭлементРазделовОтчета.РазделМногострочный          = РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(Форма, "мТаблицаМногострочныхРазделов");
			
			НайденноеЗначение = Неопределено;
			
			Если Форма["мСтруктураМногостраничныхРазделов"].Свойство(ЭлементРазделовОтчета.КолонкаРазделыОтчетаСокрНаим, НайденноеЗначение) Тогда
				
				Если НЕ НайденноеЗначение = Неопределено Тогда
					
					НайденноеЗначение = Форма[НайденноеЗначение];
					
					ЭлементРазделовОтчета.ИндексКартинки        = 0;
					ЭлементРазделовОтчета.РазделМногостраничный = Истина;
					
					Для НомерСтраницы = 1 По НайденноеЗначение.Количество() Цикл
						
						СтраницаРазделаОтчета = ЭлементРазделовОтчета.ПолучитьЭлементы().Добавить();
						
						СтраницаРазделаОтчета.КолонкаРазделыОтчета              = "Стр. " + НомерСтраницы;
						СтраницаРазделаОтчета.КолонкаРазделыОтчетаСокрНаим      = ЭлементРазделовОтчета.КолонкаРазделыОтчетаСокрНаим;
						СтраницаРазделаОтчета.КолонкаНомерСтраницыРазделаОтчета = НомерСтраницы;
						СтраницаРазделаОтчета.ИндексКартинки                    = 1;
						СтраницаРазделаОтчета.РазделМногостраничный             = ЭлементРазделовОтчета.РазделМногостраничный;
						СтраницаРазделаОтчета.РазделМногострочный               = ЭлементРазделовОтчета.РазделМногострочный;
						
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция СобратьДанныеТекущегоТаблПоляНаСервере(ИмяТабличногоПоля) Экспорт
	
	Возврат СобратьДанныеТекущегоТаблПоля(ЭтаФорма, ИмяТабличногоПоля);
	
КонецФункции

&НаКлиенте
Функция СобратьДанныеТекущегоТаблПоляНаКлиенте(ИмяТабличногоПоля) Экспорт
	
	Возврат СобратьДанныеТекущегоТаблПоля(ЭтаФорма, ИмяТабличногоПоля);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СобратьДанныеТекущегоТаблПоля(Форма, ТабличноеПоле) Экспорт
	
	ТабличноеПоле = Форма[ТабличноеПоле];

	СтруктураДанныхПоля = Новый Структура;

	Для Инд = 0 По ТабличноеПоле.Области.Количество() - 1 Цикл
		ТекущаяОбласть = ТабличноеПоле.Области[Инд];

		Если НЕ Тип(ТекущаяОбласть) = Тип("РисунокТабличногоДокумента") И Не ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			Продолжить;
		КонецЕсли;

		Если ТекущаяОбласть.СодержитЗначение <> Истина Тогда
			Продолжить;
		КонецЕсли;

		ИмяПоказателя      = ТекущаяОбласть.Имя;
		ЗначениеПоказателя = ТекущаяОбласть.Значение;

		СтруктураДанныхПоля.Вставить(ИмяПоказателя, ЗначениеПоказателя);

	КонецЦикла;

	Возврат СтруктураДанныхПоля;
	
КонецФункции

&НаКлиенте
Процедура ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставленияПоРазделуНаКлиенте(Знач ИмяРаздела) Экспорт
	
	ПеременныеМодуля = Новый Структура;
	
	ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставленияПоРазделу(ЭтаФорма, ИмяРаздела, ПеременныеМодуля);
		
КонецПроцедуры

&НаСервере
Процедура ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставленияПоРазделуНаСервере(Знач ИмяРаздела) Экспорт
	
	ПеременныеМодуля = Новый Структура;
	
	ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставленияПоРазделу(ЭтаФорма, ИмяРаздела, ПеременныеМодуля);
		
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставленияПоРазделу(Форма, Знач ИмяРаздела, ПеременныеМодуля)
	
	Возврат;
		          	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьОтчет(Команда)
	
	Если Элементы.РазделыОтчета.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СохранитьНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНаКлиенте(Автосохранение = Ложь, ВыполняемоеОповещение = Неопределено) Экспорт
	
	Вариант = СтруктураРеквизитовФормы.ВидДокумента * НомерКорректировки;

	Если СтруктураДанныхТитульный.Количество() = 0
		ИЛИ СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
		СтруктураДанныхТитульный.Вставить("КодИМНС", ТабличныйДокумент.Области.КодИМНС.Значение);
		СтруктураДанныхТитульный.Вставить("КПП1", ТабличныйДокумент.Области.КПП1.Значение);
		СтруктураДанныхТитульный.Вставить("НомерКорректировки", ТабличныйДокумент.Области.НомерКорректировки.Значение);
	КонецЕсли;
	
	КодИФНС = СтруктураДанныхТитульный.КодИМНС;
	КПП = СтруктураДанныхТитульный.КПП1;
                       
	Если НЕ РегламентированнаяОтчетностьКлиент.ПриЗаписиРегламентированногоОтчетаНаКлиенте(ЭтаФорма, КодИФНС, Автосохранение, Вариант) Тогда
		Возврат;
	КонецЕсли;
	
	ПодобныйОтчетСуществует = Ложь;
	ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки = Ложь;
	
	Если Элементы.РазделыОтчета.ТекущиеДанные = Неопределено Тогда
		НаименованиеТекущегоРаздела = СтруктураРеквизитовФормы.НаимТекущегоРаздела;
	Иначе
		НаименованиеТекущегоРаздела = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
	КонецЕсли;
	
	РезультатСохранения = ПередСохранением(КодИФНС, КПП, ПодобныйОтчетСуществует, Вариант, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, Автосохранение, НаименованиеТекущегоРаздела);
	
	ВидДокументаНомерКорректировкиИзменен = Неопределено;
	
	Если ПодобныйОтчетСуществует И Автосохранение Тогда
		Возврат;
	КонецЕсли;
	
	НуженВопросПередСохранением = (ПодобныйОтчетСуществует ИЛИ ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки);
	
	Если НуженВопросПередСохранением Тогда
		
		СохранитьНаКлиентеСВопросом(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, ПодобныйОтчетСуществует, КодИФНС, КПП);
		
	Иначе
		
		ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНаКлиентеСВопросом(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, ПодобныйОтчетСуществует, КодИФНС, КПП)
	
	Если ПодобныйОтчетСуществует Тогда
		
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(КодВозвратаДиалога.Да, "Сохранить");
		Кнопки.Добавить(КодВозвратаДиалога.Нет, "Отмена");
		
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Отчет с видом %1 уже существует.
			|Сохранить отчет с таким же видом?'"), ?(Вариант = 0, """Первичный""", """Корректирующий/" + Вариант + """"));
		ДополнительныеПараметры = Новый Структура("Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, КодИФНС, КПП", Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, КодИФНС, КПП);
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросСохранитьОтчетСТакимЖеВидомЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, Кнопки, , Кнопки.Получить(1).Значение);
		
	Иначе
		
		СохранитьНаКлиентеСВопросомПродолжение(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки,КодИФНС, КПП);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросСохранитьОтчетСТакимЖеВидомЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Автосохранение = ДополнительныеПараметры.Автосохранение;
	Вариант = ДополнительныеПараметры.Вариант;
	ВыполняемоеОповещение = ДополнительныеПараметры.ВыполняемоеОповещение;
	КодИФНС = ДополнительныеПараметры.КодИФНС;
	КПП = ДополнительныеПараметры.КПП;
	ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки = ДополнительныеПараметры.ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки;
	
	Ответ = РезультатВопроса;
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	СохранитьНаКлиентеСВопросомПродолжение(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки,КодИФНС, КПП);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНаКлиентеСВопросомПродолжение(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, КодИФНС, КПП)
	
	Если ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки Тогда
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("ВидОтчета", Вариант);
		
		ФормаВопроса = РегламентированнаяОтчетностьКлиент.ПолучитьОбщуюФормуПоИмени("ВопросПриИзмененииВидаДокументаНомераКорректировки", ПараметрыФормы);
		ФормаВопроса.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		ДополнительныеПараметры = Новый Структура("Автосохранение, Вариант, ВыполняемоеОповещение, КодИФНС, КПП", Автосохранение, Вариант, ВыполняемоеОповещение,КодИФНС, КПП );
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросПриИзмененииВидаДокументаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ФормаВопроса.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
		ФормаВопроса.Открыть();
	Иначе
		Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Сохраняется %1...'"), ЭтаФорма.Заголовок), , , БиблиотекаКартинок.Записать);
		РезультатСохранения = Сохранить(Автосохранение, КодИФНС, КПП, Вариант, Неопределено, Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
		ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПриИзмененииВидаДокументаЗавершение(КодВозврата, ДополнительныеПараметры) Экспорт
	
	Автосохранение = ДополнительныеПараметры.Автосохранение;
	Вариант = ДополнительныеПараметры.Вариант;
	ВыполняемоеОповещение = ДополнительныеПараметры.ВыполняемоеОповещение;
	КодИФНС = ДополнительныеПараметры.КодИФНС;
	КПП = ДополнительныеПараметры.КПП;
	Если КодВозврата = КодВозвратаДиалога.Да
		ИЛИ КодВозврата = КодВозвратаДиалога.Нет Тогда
		ВидДокументаНомерКорректировкиИзменен = ?(КодВозврата = КодВозвратаДиалога.Да, Истина, Ложь);
	Иначе
		Возврат;
	КонецЕсли;
	
	Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Сохраняется %1...'"), ЭтаФорма.Заголовок), , , БиблиотекаКартинок.Записать);
	РезультатСохранения = Сохранить(Автосохранение, КодИФНС, КПП, Вариант, ВидДокументаНомерКорректировкиИзменен, Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
	ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения)
	
	КлючУникальности = СтруктураРеквизитовФормы.мСохраненныйДок;
	
	Если РезультатСохранения Тогда
		
		РегламентированнаяОтчетностьКлиент.ПослеЗаписиРегламентированногоОтчета(ЭтаФорма);
		
		Если ВыполняемоеОповещение <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ВыполняемоеОповещение);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПередСохранением(КодИФНС, КПП, ПодобныйОтчетСуществует, Вариант, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, Автосохранение, ПоказателиОтчета)
	
	Если РегламентированнаяОтчетность.БылиИзмененыКлючевыеРеквизитыОтчета(ЭтаФорма, КодИФНС, КПП)
		И РегламентированнаяОтчетность.СуществуетДокументСАналогичнымиРеквизитами(ЭтаФорма, КодИФНС, КПП) Тогда
		
		ПодобныйОтчетСуществует = Истина;
		
	КонецЕсли;
	
	СтруктураРеквизитовФормы.мЗаписываетсяНовыйДокумент = (СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено ИЛИ СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено);
	
	Если Вариант <> Неопределено И ((СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено) ИЛИ (СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено) ИЛИ (Вариант <> СтруктураРеквизитовФормы.мВариант)) Тогда
		
		Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено ИЛИ СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено Тогда
			
		ИначеЕсли Вариант <> СтруктураРеквизитовФормы.мВариант Тогда
			
			ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПодобныйОтчетСуществует
		ИЛИ ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Возврат Сохранить(Автосохранение, КодИФНС, КПП, Вариант, , ПоказателиОтчета);
	
КонецФункции

&НаСервере
Процедура ЗаполнитьПустыеСтруктурыДанных()
	
	СохрТабличныйДокумент = Новый ТабличныйДокумент;
	
	СохрТабличныйДокумент.Вывести(ТабличныйДокумент);
	
	Для Каждого Раздел Из мСвойстваРазделовДекларации.ПолучитьЭлементы() Цикл
		
		Если НЕ Раздел.МногостраничностьВРазделе
		  И (ЭтаФорма["СтруктураДанных" + Раздел.ИмяСтраницы].Количество() = 0) Тогда
		  
			ТабличныйДокумент.Очистить();
			ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + Раздел.ИмяСтраницы));
			
			СохранитьДанныеРаздела(Раздел.ИмяСтраницы, Ложь);
			
		ИначеЕсли Раздел.МногостраничностьВРазделе
			    И (ЭтаФорма[мСтруктураМногостраничныхРазделов[Раздел.ИмяСтраницы]][0].Данные.Количество() = 0) Тогда
				
			ТабличныйДокумент.Очистить();
			ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + Раздел.ИмяСтраницы));
			
			СохранитьДанныеРаздела(Раздел.ИмяСтраницы, Ложь);	
			
		КонецЕсли;
	
	КонецЦикла;
	
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(СохрТабличныйДокумент);
	
КонецПроцедуры

&НаСервере
Функция Сохранить(Автосохранение = Ложь, КодИФНС, КПП, Вариант, ВидДокументаНомерКорректировкиИзменен = Неопределено, НаимТекРаздела) Экспорт
	
	ДанныеДляРазблокирования = Неопределено;
	
	Если НЕ СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
		Если НЕ СтруктураРеквизитовФормы.мБезОткрытияФормы Тогда
			ДанныеДляРазблокирования = Новый Структура("Ключ,ИдФормы",
			СтруктураРеквизитовФормы.мСохраненныйДок, ЭтаФорма.УникальныйИдентификатор);
		КонецЕсли;
		СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.ПолучитьОбъект();
	КонецЕсли;
	
	Если НЕ РегламентированнаяОтчетность.ПриЗаписиРегламентированногоОтчетаНаСервере(ЭтаФорма, КодИФНС, Автосохранение, Вариант, ВидДокументаНомерКорректировкиИзменен, СтруктураРеквизитовФормы.мСохраненныйДок) Тогда
		СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
		Возврат Ложь;
	КонецЕсли;
	
	// установим текущие значения реквизитов документа
	СтруктураРеквизитовФормы.мСохраненныйДок.ИсточникОтчета = Метаданные.Отчеты[ИмяОтчета(ЭтаФорма.ИмяФормы)].Имя;
	СтруктураРеквизитовФормы.мСохраненныйДок.НаименованиеОтчета = Метаданные.Отчеты[ИмяОтчета(ЭтаФорма.ИмяФормы)].ОсновнаяФорма.Синоним;
	СтруктураРеквизитовФормы.мСохраненныйДок.ДатаНачала                 = СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета;
	СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания              = СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета;
	СтруктураРеквизитовФормы.мСохраненныйДок.Периодичность              = СтруктураРеквизитовФормы.мПериодичность;
	СтруктураРеквизитовФормы.мСохраненныйДок.ВыбраннаяФорма             = СтруктураРеквизитовФормы.мВыбраннаяФорма;
	СтруктураРеквизитовФормы.мСохраненныйДок.Организация                = СтруктураРеквизитовФормы.Организация;
	СтруктураРеквизитовФормы.мСохраненныйДок.ДатаПодписи                = ДатаПодписи;
	СтруктураРеквизитовФормы.мСохраненныйДок.ЕдиницаИзмерения           = СтруктураРеквизитовФормы.ЕдиницаИзмерения;
	СтруктураРеквизитовФормы.мСохраненныйДок.ТочностьЕдиницыИзмерения   = СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения;
	СтруктураРеквизитовФормы.мСохраненныйДок.ВидОтчетности              = Перечисления.ВидыОтчетности.РегламентированнаяОтчетность;
	СтруктураРеквизитовФормы.мСохраненныйДок.Комментарий                = Комментарий;
	СтруктураРеквизитовФормы.мСохраненныйДок.КодНалоговогоОргана        = КодИФНС;
	СтруктураРеквизитовФормы.мСохраненныйДок.КПП        				= КПП;
	СтруктураРеквизитовФормы.мСохраненныйДок.Вид                        = Вариант;
	СтруктураРеквизитовФормы.мСохраненныйДок.ПредставлениеВида          = РегламентированнаяОтчетность.ПредставлениеВидаДокумента(СтруктураРеквизитовФормы.мСохраненныйДок.Вид);
	СтруктураРеквизитовФормы.мВариант = Вариант;
	
	СтруктураРеквизитовФормы.мСохраненныйДок.ФорматВыгрузки = "Автоматически";
	
	СохранитьДанныеРаздела(НаимТекРаздела, Ложь, Ложь);
	
	ЗаполнитьПустыеСтруктурыДанных();
	
	// формируем данные редактируемых ячеек таблицы
	ПоказателиОтчета = Новый Структура();
	
	ЗаполнитьПоказателиОтчетаНаСервере(ПоказателиОтчета);  
	
	// формируем список сохранения
	СписокСохранения = Новый Структура();
	
	// вставляем данные редактируемых ячеек таблицы	
	СписокСохранения.Вставить("ПоказателиОтчета", ПоказателиОтчета);
	
	ДанныеМногостраничныхРазделов = Новый Структура;
	
	МассивТиповНеопределено = Новый Массив; 
	МассивТиповНеопределено.Добавить(Тип("Неопределено"));
	ОписаниеТиповНеопределено = Новый ОписаниеТипов(МассивТиповНеопределено);
	
	Для Каждого ЭлементСтруктуры Из мСтруктураМногостраничныхРазделов Цикл
		
		ДанныеМногостраничныхРазделов.Вставить(ЭлементСтруктуры.Ключ, ДанныеФормыВЗначение(ЭтаФорма[ЭлементСтруктуры.Значение], Тип("ТаблицаЗначений")));
		
		ТаблЗнач = Неопределено;
		
		Если ДанныеМногостраничныхРазделов.Свойство(ЭлементСтруктуры.Ключ, ТаблЗнач) Тогда
						
			Если НЕ ТаблЗнач.Колонки.Найти("Данные") = Неопределено Тогда
												
				ТаблЗнач.Колонки.Удалить("Данные");
				ТаблЗнач.Колонки.Добавить("Данные", ОписаниеТиповНеопределено);
				
				Ном = 0;
				
				Для Каждого СтрокаТаблЗнач Из ТаблЗнач Цикл
					
					СтрокаТаблЗнач.Данные = ЭтаФорма[ЭлементСтруктуры.Значение][Ном].Данные[0].Значение;
					
					Ном = Ном + 1;
					
				КонецЦикла;
				
			КонецЕсли;
												
		КонецЕсли;
				
	КонецЦикла;
		
	// вставляем данные многостраничных разделов
	СписокСохранения.Вставить("ДанныеМногостраничныхРазделов", ДанныеМногостраничныхРазделов);

	ДанныеВариантовАвтоЗаполнения = Новый Структура;
	
	Для Каждого ЭлементСтруктуры Из мСтруктураВариантыЗаполнения Цикл
		
		МассивТаблЗнач = Новый Массив;
		
		ДанныеВариантовАвтоЗаполнения.Вставить(ЭлементСтруктуры.Ключ, МассивТаблЗнач);
			
		Для Каждого ЭлементМассива Из ЭтаФорма["ТаблицаВариантыЗаполнения" + ЭлементСтруктуры.Ключ] Цикл
			
			МассивТаблЗнач.Добавить(ДанныеФормыВЗначение(ЭлементМассива.ТаблицаВариантовЗаполнения, Тип("ТаблицаЗначений")));
			
		КонецЦикла;
			
	КонецЦикла;

	// вставляем данные вариантов автозаполнения ячеек
	СписокСохранения.Вставить("ДанныеВариантовАвтоЗаполнения", ДанныеВариантовАвтоЗаполнения);
	
	// вствляем версию формы
	СписокСохранения.Вставить("ВерсияФормы", СтруктураРеквизитовФормы.мВерсияФормы);
	
	// вствляем флажок пересчета страниц
	СписокСохранения.Вставить("ФлПодсчетСтраниц", СтруктураРеквизитовФормы.мСчетчикСтраниц);
	
	// вствляем флажок отключения
	СписокСохранения.Вставить("ФлОтклВыборЗначений", СтруктураРеквизитовФормы.мАвтоВыборКодов);
	
	// вствляем флажок ручной ввод ВРЕМЕННАЯ ОТМЕНА
	СписокСохранения.Вставить("Автозаполнение", СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);
	
	// вствляем флажок разрешения печати без штрихкода
	СписокСохранения.Вставить("ПечатьБезШтрихкодаРазрешена", СтруктураРеквизитовФормы.мПечатьБезШтрихкодаРазрешена);
	
	ХранилищеДанных = Новый ХранилищеЗначения(СписокСохранения);
	СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета = ХранилищеДанных;
	
	// записываем документ, хранящий данные отчета	
	Попытка
		СтруктураРеквизитовФормы.мСохраненныйДок.Записать();
		РегламентированнаяОтчетность.СохранитьСтатусОтправкиРеглОтчета(ЭтаФорма);
	Исключение
		Если НЕ Автосохранение Тогда
			
			Сообщение = Новый СообщениеПользователю;
			
			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), РегламентированнаяОтчетностьКлиентСервер.СформироватьТекстСообщения(ОписаниеОшибки()));
			
			Сообщение.Сообщить();
			
		КонецЕсли;
		СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
		Возврат Ложь;
	КонецПопытки;
	
	Модифицированность   = Ложь;
	
	СохранитьДеревоНастройкиСтраниц(СтруктураРеквизитовФормы.мСохраненныйДок);
	
	СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
	
	Если НЕ СтруктураРеквизитовФормы.мБезОткрытияФормы
       И НЕ СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
				   
    	ЗаблокироватьДанныеДляРедактирования(СтруктураРеквизитовФормы.мСохраненныйДок, , ЭтаФорма.УникальныйИдентификатор);

    КонецЕсли;
	
	Если ДанныеДляРазблокирования <> Неопределено Тогда
		РазблокироватьДанныеДляРедактирования(ДанныеДляРазблокирования.Ключ, ДанныеДляРазблокирования.ИдФормы);
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Процедура СохранитьДеревоНастройкиСтраниц(Знач мСохраненныйДок)
	
	Если мСохраненныйДок <> Неопределено Тогда
		
		Если ТипЗнч(мСохраненныйДок) = Тип("ДокументСсылка.РегламентированныйОтчет") Тогда
			мСохраненныйДок = мСохраненныйДок.ПолучитьОбъект();
		КонецЕсли;
		
		Если Не мСохраненныйДок.ЭтоНовый() Тогда
			// Сохраняем выбранные листы для печати в хранилище
			ХранилищеДанных = Новый ХранилищеЗначения(РеквизитФормыВЗначение("мДеревоСтраницОтчета"));
			мСохраненныйДок.ДеревоНастройкиСтраниц = ХранилищеДанных;
			Попытка
				мСохраненныйДок.Записать();
			Исключение
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
Конецпроцедуры

&НаСервере
Процедура ЗаполнитьПоказателиОтчетаНаСервере(ПоказателиОтчета)
	
	Префикс = "ПолеТабличногоДокумента";
	
	Для Каждого Раздел Из мСвойстваРазделовДекларации.ПолучитьЭлементы() Цикл
			
		Если НЕ Раздел.МногостраничностьВРазделе Тогда
			ПоказателиОтчета.Вставить(Префикс + Раздел.ИмяСтраницы, ЭтаФорма["СтруктураДанных" + Раздел.ИмяСтраницы]);
		КонецЕсли;
	
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДатуВЯчейкахНаКлиенте() Экспорт
	
	ЗаполнитьДатуВЯчейках(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДатуВЯчейкахНаСервере() Экспорт
	
	ЗаполнитьДатуВЯчейках(ЭтаФорма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьДатуВЯчейках(Форма)
	
	Форма["ТабличныйДокумент"].Области["ДатаПодписи"].Значение = Форма.ДатаПодписи;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если СтрНайти(Заголовок, СтруктураРеквизитовФормы.СтрПериодОтчета) = 0 Тогда
        Заголовок = Заголовок + " за " + СтруктураРеквизитовФормы.СтрПериодОтчета;
	КонецЕсли;
	
	ОргСтр = " (" + СтруктураРеквизитовФормы.НаимОрганизации + ")";
	Если СтрНайти(Заголовок, ОргСтр) = 0 Тогда
		Заголовок = Заголовок + ОргСтр;
	КонецЕсли;
	

	Заголовок = Заголовок + ?(СтрНайти(ЭтаФорма.ИмяФормы, "Внешний") > 0, " - внешний отчет", "");

	ПодключитьОбработчикОжидания("ВыполнитьПроверкуПередОткрытием", 0.1, Истина);

КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПроверкуПередОткрытием()
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПриОткрытииЗавершение", ЭтотОбъект);
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередОткрытиемФормыРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытииЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Модифицированность = Ложь;
		Закрыть();
		Возврат;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	РегламентированнаяОтчетностьКлиент.ПередЗакрытиемРегламентированногоОтчета(ЭтаФорма, Отказ, СтандартнаяОбработка, ЗавершениеРаботы, ТекстПредупреждения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ЗавершениеРаботы Тогда
				
		Возврат;
		
	КонецЕсли;
	
	ПриЗакрытииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПриЗакрытииНаСервере()
	
	РегламентированнаяОтчетность.ПриЗакрытииРегламентированногоОтчета(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура РазделыОтчетаПриАктивизацииСтроки(Элемент)
	
	Если Элемент.ТекущиеДанные = Неопределено
	 ИЛИ Элемент.ТекущаяСтрока = СтруктураРеквизитовФормы.ТекущаяСтрокаРазделовОтчета Тогда
		Возврат;
	КонецЕсли;
	
	КМенюРО = Элементы.РазделыОтчета.КонтекстноеМеню;
	КМенюТД = Элементы.ТабличныйДокументКонтекстноеМеню;
	
	КМенюТД.Видимость = Ложь;
	
	СтруктураРеквизитовФормы.ТекущаяСтрокаРазделовОтчета = Элемент.ТекущаяСтрока;
		
	Элементы.ОчиститьТекущуюСтраницу.Доступность = Истина;
							
	Если СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере Тогда
		
		Если Элемент.ТекущиеДанные.РазделМногостраничный Тогда
			
			Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета = ?(Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета = Неопределено
															        ИЛИ Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета = 0, 1, Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета);
																
		КонецЕсли;														
																
		ЗаголовокРаздела = Элемент.ТекущиеДанные.ПолучитьРодителя() = Неопределено;
				
		ВывестиМакетСтраницыВТабличныйДокументНаСервере(Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим,
														Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета,
														ЗаголовокРаздела);
		
	Иначе
		
		СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Истина;
		
	КонецЕсли;
		
	Если Элемент.ТекущиеДанные.РазделМногостраничный Тогда
		
		Элемент.Развернуть(Элемент.ТекущаяСтрока);
		
		КМенюРО.Видимость = Истина;
		
		Если Элемент.ТекущиеДанные.ПолучитьРодителя() = Неопределено
		 ИЛИ Элемент.ТекущиеДанные.ПолучитьРодителя().ПолучитьЭлементы().Количество() = 1 Тогда
			
			Если Элемент.ТекущиеДанные.ПолучитьРодителя() = Неопределено Тогда
				Элементы.ОчиститьТекущуюСтраницу.Доступность = Ложь;
			КонецЕсли;
			
			КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюКнопкаУдалитьСтраницу.Видимость  = Ложь;
			КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюКнопкаДобавитьСтраницу.Видимость = Истина;
			
		Иначе
			
			КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюКнопкаУдалитьСтраницу.Видимость  = Истина;
			КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюКнопкаДобавитьСтраницу.Видимость = Истина;
					
		КонецЕсли;
		
	Иначе
		
		КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюКнопкаУдалитьСтраницу.Видимость  = Ложь;
		КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюКнопкаДобавитьСтраницу.Видимость = Ложь;
		
	КонецЕсли;
	
	Если Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Титульный" Тогда
		Элементы.Обновить.Доступность = Истина;
	Иначе
		Элементы.Обновить.Доступность = Ложь;
	КонецЕсли;
	
	Элементы.ТабличныйДокумент.ТекущаяОбласть = ТабличныйДокумент.Область(1, 1);
	
КонецПроцедуры

&НаСервере
Процедура СохранитьДанныеРаздела(НаимРаздела, ОчищатьРазделЕслиЕстьМногострочность, ИзменятьАктивнуюСтраницу = Истина)	
	
	// Многостраничные разделы.
	
	Если НаимРаздела = "Раздел1"
	 ИЛИ НаимРаздела = "Раздел2" Тогда
		 			
		СтруктураДанных = Новый Структура;
		
		Для Каждого Область Из ТабличныйДокумент.Области Цикл
			
			Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник И Область.СодержитЗначение Тогда
				СтруктураДанных.Вставить(Область.Имя, Область.Значение);
			КонецЕсли;
			
		КонецЦикла;
		
		Если НаимРаздела = "Раздел1" Тогда
			
			НаимТаблицыСтраницы = "ТаблицаСтраницыРазделаРаздел1";			
			
		КонецЕсли;
		
		Если НаимРаздела = "Раздел2" Тогда
			
			НаимТаблицыСтраницы = "ТаблицаСтраницыРазделаРаздел2";			
			
		КонецЕсли;
		
		ТаблицаСтраницРаздела = Неопределено;
		
		мСтруктураМногостраничныхРазделов.Свойство(НаимРаздела, ТаблицаСтраницРаздела);
				
		ТаблицаСтраницРаздела = ЭтаФорма[ТаблицаСтраницРаздела];

		АктивнаяСтраница =  ТаблицаСтраницРаздела.НайтиСтроки(Новый Структура("АктивнаяСтраница", Истина));
		
		Если АктивнаяСтраница.Количество() > 0 Тогда
			
			АктивнаяСтраница = АктивнаяСтраница[0];
			
			АктивнаяСтраница.Данные.Очистить();
			АктивнаяСтраница.Данные.Добавить(СтруктураДанных);
			
			АктивнаяСтраница.АктивнаяСтраница = НЕ ИзменятьАктивнуюСтраницу;
			
		КонецЕсли;
				
	// Обычные разделы.
	//
	Иначе
		
		ЭтаФорма["СтруктураДанных" + НаимРаздела] = СобратьДанныеТекущегоТаблПоля(ЭтаФорма, "ТабличныйДокумент");
		
	КонецЕсли;	

КонецПроцедуры

&НаСервере
Процедура ВывестиМакетСтраницыВТабличныйДокументНаСервере(ИмяТекРаздела, НомерСтраницыРазделаОтчета, ЗаголовокРаздела = Ложь)
		
	СохранитьДанныеРаздела(СтруктураРеквизитовФормы.НаимТекущегоРаздела, Истина);
			
	ВывестиМакетВТаблДокНаСервере(ИмяТекРаздела, НомерСтраницыРазделаОтчета, ЗаголовокРаздела);
	
	СтруктураРеквизитовФормы.НаимТекущегоРаздела  = ИмяТекРаздела;
	СтруктураРеквизитовФормы.НомерТекущейСтраницы = НомерСтраницыРазделаОтчета;
	
	УстановитьДоступностьОбластей(ЭтаФорма, ИмяТекРаздела);
	
	ИзменитьФорматНевведенныхПоказателей(ЭтаФорма);

КонецПроцедуры

&НаСервере
Процедура ВывестиМакетВТаблДокНаСервере(ИмяТекРаздела, НомерСтраницыРазделаОтчета, ЗаголовокРаздела = Ложь)
	
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + ИмяТекРаздела));
		
	// Многостраничные разделы.
	
	Если ИмяТекРаздела = "Раздел1"
	 ИЛИ ИмяТекРаздела = "Раздел2" Тогда
	 
	  	Если ИмяТекРаздела = "Раздел1" Тогда
			НаимТаблицыСтраницы = "ТаблицаСтраницыРазделаРаздел1";
		КонецЕсли;
		
		Если ИмяТекРаздела = "Раздел2" Тогда
			НаимТаблицыСтраницы = "ТаблицаСтраницыРазделаРаздел2";
		КонецЕсли;
		
		Для Каждого ТаблицаСтраницы Из ЭтаФорма[НаимТаблицыСтраницы] Цикл
			
			Если ЭтаФорма[НаимТаблицыСтраницы].Количество() = 1 ИЛИ ЗаголовокРаздела Тогда
				
				Для Каждого Область Из ТабличныйДокумент.Области Цикл
					
					Если СтрЧислоВхождений(Область.Имя, "УдалитьСтраницу") > 0 Тогда
						
						Область.Текст = "";
						Область.Гиперссылка = Ложь;
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
			ТаблицаСтраницы.АктивнаяСтраница = Ложь;
			
		КонецЦикла;
		
		СтруктураДанных = Новый Структура;
		
		СписокДанных = ЭтаФорма[НаимТаблицыСтраницы][НомерСтраницыРазделаОтчета - 1].Данные;
		
		Для каждого ТаблицаСтраницы Из ЭтаФорма[НаимТаблицыСтраницы] Цикл
			ТаблицаСтраницы.АктивнаяСтраница = Ложь;
		КонецЦикла;
		
		ЭтаФорма[НаимТаблицыСтраницы][НомерСтраницыРазделаОтчета - 1].АктивнаяСтраница = Истина;
		
		Если СписокДанных.Количество() > 0 Тогда
			СтруктураДанных = СписокДанных[0].Значение;
		КонецЕсли;
		 	 
		Для Каждого ЭлСтруктуры Из СтруктураДанных Цикл
			Попытка
				ТабличныйДокумент.Области[ЭлСтруктуры.Ключ].Значение = ЭлСтруктуры.Значение;
			Исключение
			КонецПопытки;
		КонецЦикла;
								
	// Обычные разделы.
	//	
	Иначе
		
		Для Каждого ЭлСтруктуры Из ЭтаФорма["СтруктураДанных" + ИмяТекРаздела] Цикл
			Попытка
				ТабличныйДокумент.Области[ЭлСтруктуры.Ключ].Значение = ЭлСтруктуры.Значение;
			Исключение
			КонецПопытки;
		КонецЦикла;
		
	КонецЕсли;	
	
	Если ИмяТекРаздела = "Титульный" Тогда
		
		УправлениеЛистамиНаСервере();
		
	Иначе
		
		УстановитьФорматВыводаНаСервере(ИмяТекРаздела);
						
		УстановитьЦветФонаЯчейкиНаСервере(,, ИмяТекРаздела);
				
	КонецЕсли;
	
	ИнициализироватьМаскиПолейВводаТабличныхДокументов(ИмяТекРаздела)

КонецПроцедуры

&НаСервере
Процедура УстановитьФорматВыводаНаСервере(НаимРаздела)
	
	УстановитьФорматВывода(ЭтаФорма, НаимРаздела);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьФорматВыводаНаКлиенте(НаимРаздела)
	
	УстановитьФорматВывода(ЭтаФорма, НаимРаздела);
	
КонецПроцедуры

&НаКлиенте
Процедура РасчетНаКлиенте(ИмяСтраницыПанели = "",  ОбластьИмя = "") Экспорт
	
	Расчет(ЭтаФорма, ИмяСтраницыПанели, ОбластьИмя);
	
КонецПроцедуры

&НаСервере
Процедура РасчетНаСервере(ИмяСтраницыПанели = "", ОбластьИмя = "") Экспорт
	
	Расчет(ЭтаФорма, ИмяСтраницыПанели, ОбластьИмя);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура Расчет(Форма, ИмяТекущейСтраницыПанели = "", ОбластьИмя = "") Экспорт
	
	Если Форма.СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Или Форма.СтруктураРеквизитовФормы.мРежимПечати Тогда
		Возврат; // автрасчет отключен или не требуется
	КонецЕсли;
		
	Если ИмяТекущейСтраницыПанели = "Раздел1" Тогда
		
		РасчетРаздела1(Форма, ОбластьИмя, Форма.ТабличныйДокумент);
		
	ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел2" Тогда
		
		РасчетРаздела2(Форма, ОбластьИмя, Форма.ТабличныйДокумент);

	ИначеЕсли ИмяТекущейСтраницыПанели = "" Тогда	
		
		ПолныйРасчетРаздела2(Форма);
		РасчетРаздела2(Форма, , Форма.ТабличныйДокумент);
		ПолныйРасчетРаздела1(Форма);
		РасчетРаздела1(Форма, , Форма.ТабличныйДокумент);
		
	КонецЕсли;   		
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РасчетРаздела1(Форма, ОбластьИмя = "", МестоРазмещенияДанных)
	
	Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел1" Или ТипЗнч(МестоРазмещенияДанных) = Тип("Структура") Тогда
	
		КоличествоСходныхБлоковНаЛисте = 3;
		
		Для Инд = 1 По КоличествоСходныхБлоковНаЛисте Цикл
			ПостфиксИмениОбласти = "_" + Формат(Инд, "ЧГ=0");
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя)
				ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета["П000010002103" + ПостфиксИмениОбласти], ОбластьИмя) > 0 Тогда
				
				Строка020 = ПолучитьДанныеИзМестаРазмещения(МестоРазмещенияДанных, "П000010002003" + ПостфиксИмениОбласти); // ОКАТО
				
				Если ЗначениеЗаполнено(Строка020) Тогда
					УсловиеСуммирования = Новый Структура;
					УсловиеСуммирования.Вставить("П000020002003", Строка020);
					Округлять = Истина;
					ЗначениеСтроки021 = Форма.СуммаПоказателяРазделаПоСтраницам("Раздел2", "П000020023003", УсловиеСуммирования, Округлять);
				Иначе
					ЗначениеСтроки021 = 0;
				КонецЕсли;
				ПоместитьДанныеПоМестуРазмещения(МестоРазмещенияДанных, "П000010002103" + ПостфиксИмениОбласти, ЗначениеСтроки021);
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя)
				ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета["П000010003003" + ПостфиксИмениОбласти], ОбластьИмя) > 0 Тогда
			
				Строка021 = ПолучитьДанныеИзМестаРазмещения(МестоРазмещенияДанных, "П000010002103" + ПостфиксИмениОбласти);
				Строка023 = ПолучитьДанныеИзМестаРазмещения(МестоРазмещенияДанных, "П000010002303" + ПостфиксИмениОбласти);
				Строка025 = ПолучитьДанныеИзМестаРазмещения(МестоРазмещенияДанных, "П000010002503" + ПостфиксИмениОбласти);
				Строка027 = ПолучитьДанныеИзМестаРазмещения(МестоРазмещенияДанных, "П000010002703" + ПостфиксИмениОбласти);
				
				СуммаНалога = Строка021 - Строка023 - Строка025 - Строка027;
				
				ЗначениеСтроки30 = Макс(0, СуммаНалога);
				ЗначениеСтроки40 = -Мин(0, СуммаНалога);
				
				ПоместитьДанныеПоМестуРазмещения(МестоРазмещенияДанных, "П000010003003" + ПостфиксИмениОбласти, ЗначениеСтроки30);
				ПоместитьДанныеПоМестуРазмещения(МестоРазмещенияДанных, "П000010004003" + ПостфиксИмениОбласти, ЗначениеСтроки40);
				
			КонецЕсли;
				
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РасчетРаздела2(Форма, ОбластьИмя = "", МестоРазмещенияДанных)
	
	Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел2" Или ТипЗнч(МестоРазмещенияДанных) = Тип("Структура") Тогда

		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
			ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000020012003, ОбластьИмя) > 0 Тогда
			
			ЗначениеСтроки110 = ПолучитьДанныеИзМестаРазмещения(МестоРазмещенияДанных, "П000020011003");
			ЗначениеДляСтроки120 = Окр(ЗначениеСтроки110 / 12, 4);
			ПоместитьДанныеПоМестуРазмещения(МестоРазмещенияДанных, "П000020012003", ЗначениеДляСтроки120);
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
			ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000020014003, ОбластьИмя) > 0 Тогда
			
			ЗначениеСтроки070 = ПолучитьДанныеИзМестаРазмещения(МестоРазмещенияДанных, "П000020007003");
			ЗначениеСтроки130 = ПолучитьДанныеИзМестаРазмещения(МестоРазмещенияДанных, "П000020013003");
			ЗначениеСтроки120 = ПолучитьДанныеИзМестаРазмещения(МестоРазмещенияДанных, "П000020012003");
			
			ЗначениеДляСтроки140 = ЗначениеСтроки070 * ЗначениеСтроки130 * ЗначениеСтроки120;
			ЗначениеДляСтроки140 = Окр(ЗначениеДляСтроки140, 2);
			ПоместитьДанныеПоМестуРазмещения(МестоРазмещенияДанных, "П000020014003", ЗначениеДляСтроки140);
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
			ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000020016003, ОбластьИмя) > 0 Тогда
			
			ЗначениеСтроки150 = ПолучитьДанныеИзМестаРазмещения(МестоРазмещенияДанных, "П000020015003");
			
			ЗначениеДляСтроки160 = Окр(ЗначениеСтроки150 / 12, 4);
			ПоместитьДанныеПоМестуРазмещения(МестоРазмещенияДанных, "П000020016003", ЗначениеДляСтроки160);
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
			ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000020018003, ОбластьИмя) > 0 Тогда
			
			ЗначениеСтроки070 = ПолучитьДанныеИзМестаРазмещения(МестоРазмещенияДанных, "П000020007003");
			ЗначениеСтроки130 = ПолучитьДанныеИзМестаРазмещения(МестоРазмещенияДанных, "П000020013003");
			ЗначениеСтроки160 = ПолучитьДанныеИзМестаРазмещения(МестоРазмещенияДанных, "П000020016003");
			
			КодЛьготыВСтроке170 = ПолучитьДанныеИзМестаРазмещения(МестоРазмещенияДанных, "П000020017003_КодЛьготы");
			Если Не ПустаяСтрока(КодЛьготыВСтроке170) Тогда
				ЗначениеДляСтроки180 = ЗначениеСтроки070 * ЗначениеСтроки130 * ЗначениеСтроки160;
				ЗначениеДляСтроки180 = Окр(ЗначениеДляСтроки180, 2);
				ПоместитьДанныеПоМестуРазмещения(МестоРазмещенияДанных, "П000020018003", ЗначениеДляСтроки180);
			КонецЕсли;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
			ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000020020003, ОбластьИмя) > 0 Тогда
			
			ЗначениеСтроки070  = ПолучитьДанныеИзМестаРазмещения(МестоРазмещенияДанных, "П000020007003");
			ЗначениеСтроки130  = ПолучитьДанныеИзМестаРазмещения(МестоРазмещенияДанных, "П000020013003");
			ЗначениеСтроки160  = ПолучитьДанныеИзМестаРазмещения(МестоРазмещенияДанных, "П000020016003");
			ЗначениеСтроки190а = ПолучитьДанныеИзМестаРазмещения(МестоРазмещенияДанных, "П000020019003_Процент");
			
			КодЛьготыВСтроке190 = ПолучитьДанныеИзМестаРазмещения(МестоРазмещенияДанных, "П000020019003_КодЛьготы");
			Если Не ПустаяСтрока(КодЛьготыВСтроке190) Тогда
				ЗначениеДляСтроки200 = ЗначениеСтроки070 * ЗначениеСтроки130 * ЗначениеСтроки160 * (ЗначениеСтроки190а / 100);
				ЗначениеДляСтроки200 = Окр(ЗначениеДляСтроки200, 2);
				ПоместитьДанныеПоМестуРазмещения(МестоРазмещенияДанных, "П000020020003", ЗначениеДляСтроки200);
			КонецЕсли;
			
		КонецЕсли;	
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
			ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000020022003, ОбластьИмя) > 0 Тогда
			
			ЗначениеСтроки070  = ПолучитьДанныеИзМестаРазмещения(МестоРазмещенияДанных, "П000020007003");
			ЗначениеСтроки130  = ПолучитьДанныеИзМестаРазмещения(МестоРазмещенияДанных, "П000020013003");
			ЗначениеСтроки160  = ПолучитьДанныеИзМестаРазмещения(МестоРазмещенияДанных, "П000020016003");
			ЗначениеСтроки210а = ПолучитьДанныеИзМестаРазмещения(МестоРазмещенияДанных, "П000020021003_Ставка");
			
			КодЛьготыВСтроке210 = ПолучитьДанныеИзМестаРазмещения(МестоРазмещенияДанных, "П000020021003_КодЛьготы");
			Если Не ПустаяСтрока(КодЛьготыВСтроке210) Тогда
				ЗначениеДляСтроки220 = ((ЗначениеСтроки070 * ЗначениеСтроки130) - (ЗначениеСтроки070 * ЗначениеСтроки210а)) * ЗначениеСтроки160;
				ЗначениеДляСтроки220 = Окр(ЗначениеДляСтроки220, 2);
				ПоместитьДанныеПоМестуРазмещения(МестоРазмещенияДанных, "П000020022003", ЗначениеДляСтроки220);
			КонецЕсли;
			
		КонецЕсли;	
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
			ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000020023003, ОбластьИмя) > 0 Тогда
			
			ЗначениеСтроки140 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, ПолучитьДанныеИзМестаРазмещения(МестоРазмещенияДанных, "П000020014003"));
			ЗначениеСтроки180 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, ПолучитьДанныеИзМестаРазмещения(МестоРазмещенияДанных, "П000020018003"));
			ЗначениеСтроки200 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, ПолучитьДанныеИзМестаРазмещения(МестоРазмещенияДанных, "П000020020003"));
			ЗначениеСтроки220 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, ПолучитьДанныеИзМестаРазмещения(МестоРазмещенияДанных, "П000020022003"));
			
			Если ЗначениеСтроки180 <> 0 Тогда
				ЗначениеДляСтроки230 = ЗначениеСтроки140 - ЗначениеСтроки180;
			Иначе
				ЗначениеДляСтроки230 = ЗначениеСтроки140 - ЗначениеСтроки200 - ЗначениеСтроки220;
			КонецЕсли;
			ПоместитьДанныеПоМестуРазмещения(МестоРазмещенияДанных, "П000020023003", ЗначениеДляСтроки230);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьДанныеИзМестаРазмещения(МестоРазмещенияДанных, АдресДанных)
	
	Если ТипЗнч(МестоРазмещенияДанных) = Тип("Структура") Тогда
		ЗначениеВСтруктуре = Неопределено;
		Если МестоРазмещенияДанных.Свойство(АдресДанных, ЗначениеВСтруктуре) Тогда
			Возврат ЗначениеВСтруктуре;
		Иначе
			ВызватьИсключение "Невозможно получить данные из структуры: поле " + АдресДанных + " не существует";
		КонецЕсли;
	Иначе
		// Это должны быть данные в поле табличного документа.
		Возврат МестоРазмещенияДанных.Области[АдресДанных].Значение;
	КонецЕсли;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ПоместитьДанныеПоМестуРазмещения(МестоРазмещенияДанных, АдресДанных, ЗначениеДанных)
	
	Если ТипЗнч(МестоРазмещенияДанных) = Тип("Структура") Тогда
		МестоРазмещенияДанных.Вставить(АдресДанных, ЗначениеДанных);
	Иначе
		МестоРазмещенияДанных.Области[АдресДанных].Значение = ЗначениеДанных;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПолныйРасчетРаздела1(Форма)
	
	СтруктураРаздела = Неопределено;
	Форма.мСтруктураМногостраничныхРазделов.Свойство("Раздел1", СтруктураРаздела);
	СтруктураРаздела = Форма[СтруктураРаздела];
	
	Для Каждого СтраницаРаздела Из СтруктураРаздела Цикл
		РазмещениеДанных = СтраницаРаздела.Данные[0].Значение;
		РасчетРаздела1(Форма, , РазмещениеДанных);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПолныйРасчетРаздела2(Форма)
	
	СтруктураРаздела = Неопределено;
	Форма.мСтруктураМногостраничныхРазделов.Свойство("Раздел2", СтруктураРаздела);
	СтруктураРаздела = Форма[СтруктураРаздела];
	
	Для Каждого СтраницаРаздела Из СтруктураРаздела Цикл
		РазмещениеДанных = СтраницаРаздела.Данные[0].Значение;
		РасчетРаздела2(Форма, , РазмещениеДанных);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуНастроек(Команда)
	
	ОткрытьФормуВыбораСтраниц("ВыбратьДляНастройки");
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораСтраниц(ВариантВыбора)
	
	Перем ТекущийРазделОтчетаСокрНаим;
	Перем НомерСтраницыРазделаОтчета;
	
	// Запоминаем текущий раздел, установленный в дереве разделов отчета.
	Если НЕ Элементы.РазделыОтчета.ТекущиеДанные = Неопределено Тогда
		ТекущийРазделОтчетаСокрНаим = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
		НомерСтраницыРазделаОтчета  = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета;
	КонецЕсли;
	
	мПараметры = Новый Структура;
	мПараметры.Вставить("ПроверкаСоотношений", Ложь);
	мПараметры.Вставить("Автосохранение", Ложь);
	мПараметры.Вставить("ИмеетсяРеквизитДеревоВыбранныхСтраниц", Истина);
	
	Если СтруктураРеквизитовФормы.ДоступенМеханизмПечатиРеглОтчетностиСДвухмернымШтрихкодомPDF417 Тогда
		мПараметры.Вставить("РазрешитьВстроеннуюПечать", Истина);
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ФлажокОтклАвтоРасчет", СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);
	ПараметрыФормы.Вставить("мПечатьБезШтрихкодаРазрешена", СтруктураРеквизитовФормы.мПечатьБезШтрихкодаРазрешена);
	ПараметрыФормы.Вставить("мСчетчикСтраниц", СтруктураРеквизитовФормы.мСчетчикСтраниц);
	ПараметрыФормы.Вставить("мАвтоВыборКодов", СтруктураРеквизитовФормы.мАвтоВыборКодов);
	ПараметрыФормы.Вставить("ЕдиницаИзмерения", СтруктураРеквизитовФормы.ЕдиницаИзмерения);
	ПараметрыФормы.Вставить("ТочностьЕдиницыИзмерения", СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения);
	ПараметрыФормы.Вставить("мПараметры", мПараметры);
	
	ФормаНастройкиОтчета = РегламентированнаяОтчетностьКлиент.ПолучитьОбщуюФормуПоИмени("НастройкиОтчета", ПараметрыФормы, ЭтаФорма);
	
	мДеревоВыбранныхСтраниц.ПолучитьЭлементы().Очистить();
	
	КопироватьДанныеФормы(мДеревоСтраницОтчета, ФормаНастройкиОтчета.Дерево);
	
	ЗначениеАвторасчета = СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет;	
	ЗначениеЕдИзм       = СтруктураРеквизитовФормы.ЕдиницаИзмерения;
	ЗначениеЗпт         = СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения;
	
	ДополнительныеПараметры = Новый Структура("ЗначениеАвторасчета, ЗначениеЕдИзм, ЗначениеЗпт, НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим", ЗначениеАвторасчета, ЗначениеЕдИзм, ЗначениеЗпт, НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим);
	ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьФормуВыбораСтраницЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ФормаНастройкиОтчета.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
	ФормаНастройкиОтчета.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	ФормаНастройкиОтчета.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораСтраницЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	ЗначениеАвторасчета = ДополнительныеПараметры.ЗначениеАвторасчета;
	ЗначениеЕдИзм = ДополнительныеПараметры.ЗначениеЕдИзм;
	ЗначениеЗпт = ДополнительныеПараметры.ЗначениеЗпт;
	НомерСтраницыРазделаОтчета = ДополнительныеПараметры.НомерСтраницыРазделаОтчета;
	ТекущийРазделОтчетаСокрНаим = ДополнительныеПараметры.ТекущийРазделОтчетаСокрНаим;
	
	РегламентированнаяОтчетностьКлиентСервер.ПоказатьКнопкиПечати(ЭтаФорма);
	Модифицированность = Истина;
	
	флЗначенияИдентичны = Истина;
	
	Для Индекс = 0 По мДеревоСтраницОтчета.ПолучитьЭлементы().Количество() - 1 Цикл
		
		Если НЕ мДеревоСтраницОтчета.ПолучитьЭлементы()[Индекс].ПоказатьСтраницу = мДеревоВыбранныхСтраниц.ПолучитьЭлементы()[Индекс].ПоказатьСтраницу Тогда
			флЗначенияИдентичны = Ложь;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЗначениеАвторасчета <> СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Тогда
		
		#Если ВебКлиент Тогда
			ИзменитьТаблицуВариантовЗаполненияНаСервере();
		#Иначе
			РегламентированнаяОтчетностьКлиентСервер.ИзменитьТаблицуВариантовЗаполнения(ЭтаФорма, НЕ СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);
		#КонецЕсли
		
		УстановитьДоступностьОбластей(ЭтаФорма, СтруктураРеквизитовФормы.НаимТекущегоРаздела);
		
	КонецЕсли;
	
	Если ЗначениеЕдИзм <> СтруктураРеквизитовФормы.ЕдиницаИзмерения
		ИЛИ ЗначениеЗпт <> СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения Тогда
		ПослеСменыЕдИзмеренияИТочности();
	КонецЕсли;
	
	// Управляем видимостью страниц основной панели формы
	РегламентированнаяОтчетностьКлиент.ПоказатьСтраницыОтчетаНаКлиенте(ЭтаФорма);
	
	Если НЕ флЗначенияИдентичны Тогда
		
		СформироватьДеревоРазделовОтчетаНаКлиенте();
		
		Если НЕ ТекущийРазделОтчетаСокрНаим = Неопределено Тогда
			
			// Пытаемся найти ранее запомненный раздел.
			НайденнаяСтрока = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(РазделыОтчета.ПолучитьЭлементы(), "КолонкаРазделыОтчетаСокрНаим", ТекущийРазделОтчетаСокрНаим);
			
			Если НЕ НайденнаяСтрока = Неопределено 
				И НЕ НомерСтраницыРазделаОтчета = Неопределено 
				И НайденнаяСтрока.ПолучитьЭлементы().Количество() > 0 Тогда
				
				НайденнаяСтрока = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(НайденнаяСтрока.ПолучитьЭлементы(), "КолонкаНомерСтраницыРазделаОтчета", НомерСтраницыРазделаОтчета);
				
			КонецЕсли;
			
			// В случае успешного поиска, устанавливаем курсор на найденный раздел.
			Если НЕ НайденнаяСтрока = Неопределено Тогда
				Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяСтрока.ПолучитьИдентификатор();
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ИзменитьТаблицуВариантовЗаполненияНаСервере()
	
	РегламентированнаяОтчетностьКлиентСервер.ИзменитьТаблицуВариантовЗаполнения(ЭтаФорма, НЕ СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);
	
	РегламентированнаяОтчетность.ПолучитьСведенияОПоказателяхОтчета(ЭтаФорма);
	
КонецПроцедуры 

&НаКлиенте
Процедура ПослеСменыЕдИзмеренияИТочности()
	
	ПроверитьТочность();
	
	// Итоговые поля надо пересчитывать, потому что при расчете они округлются
	// в соответствии с установленной единицей изменения и точностью.
	#Если ВебКлиент Тогда
		УстановитьФорматВыводаНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	#Иначе
		УстановитьФорматВыводаНаКлиенте(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	#КонецЕсли
	
	ИзменитьФорматНевведенныхПоказателей(ЭтаФорма);
	
	РасчетНаКлиенте(СтруктураРеквизитовФормы.НаимТекущегоРаздела);

	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьТочность()
	
	Если СтруктураРеквизитовФормы.ЕдиницаИзмерения = ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1 Тогда
		
		Если СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения > 2 Тогда
			
			Сообщение = Новый СообщениеПользователю;
			
			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1: при выводе сумм в рублях точность не может превышать 2 знака'"), ЭтаФорма.Заголовок);
			
			Сообщение.Сообщить();
			
			СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = 2;
			
		КонецЕсли;
		
	ИначеЕсли СтруктураРеквизитовФормы.ЕдиницаИзмерения = ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1000 Тогда
		
		Если СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения > 3 Тогда
			
			Сообщение = Новый СообщениеПользователю;
			
			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1: при выводе сумм в тысячах рублей точность не может превышать 3 знака'"), ЭтаФорма.Заголовок);
			
			Сообщение.Сообщить();
			
			СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = 3;
			
		КонецЕсли;
		
	ИначеЕсли СтруктураРеквизитовФормы.ЕдиницаИзмерения = ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1000000 Тогда
		
		Если СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения > 6 Тогда
			
			Сообщение = Новый СообщениеПользователю;
			
			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1: при выводе сумм в миллионах рублей точность не может превышать 6 знаков'"), ЭтаФорма.Заголовок);
			
			Сообщение.Сообщить();
			
			СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = 6;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Обновить(Команда)
	
	СтруктураРеквизитовФормы.мВпрограммеИзмененаОрганизация = Истина;
	
	ЗаполнитьСведенияОбОрганизацииНаСервере();
		
	СтруктураРеквизитовФормы.мВпрограммеИзмененаОрганизация = Ложь;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьОтчет(Команда)
	
	РегламентированнаяОтчетностьКлиент.МеханизмыОчисткиРегламентированныхОтчетов(ЭтаФорма, "ОчиститьВесьОтчет");
	
	ИзменитьФорматНевведенныхПоказателей(ЭтаФорма);
	
	СтруктураРеквизитовФормы.НомерТекущейСтраницы = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета;
			
КонецПроцедуры 

&НаКлиенте
Процедура ОчиститьТекущуюСтраницу(Команда)
	
	Если Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Раздел1" Тогда
		
		КБК = ТабличныйДокумент.Области.П000010001003.Значение;
				
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.МеханизмыОчисткиРегламентированныхОтчетов(ЭтаФорма, "ОчиститьТекущийЭкземплярМногостраничногоРаздела" + Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
	УстановитьДоступностьОбластей(ЭтаФорма, СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
	ИзменитьФорматНевведенныхПоказателей(ЭтаФорма);
	
	Если Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Раздел1" Тогда
		
		ТабличныйДокумент.Области.П000010001003.Значение = КБК;
		
	Конецесли;

КонецПроцедуры 

&НаКлиенте
Процедура ТабличныйДокументПриИзмененииСодержимогоОбласти(Элемент, Область)
	
	ОбластьИмя = Элемент.ТекущаяОбласть.Имя;

	Если (СтрНайти(ОбластьИмя, "R") > 0) Или (СтрНайти(ОбластьИмя, "C") > 0) Или (СтрНайти(ОбластьИмя, "НомСтр") > 0) Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
		
		Если СтрНайти(ОбластьИмя, "ОКВЭД") > 0 Тогда
			
			Если НЕ РегламентированнаяОтчетностьКлиентСервер.ОКВЭДСоответствуетТребованиям(Область.Значение) Тогда
				
				Сообщение = Новый СообщениеПользователю;
				
				Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='На титульном листе задано некорректное значение кода вида деятельности по ОКВЭД!%1Допустимы значения, соответствующие следующим шаблонам:%2""XX"", ""XX.X"", ""XX.XX"", ""XX.XX.X"", ""XX.XX.XX"" (X - любая цифра).'"), Символы.ПС, Символы.ПС);
				
				Сообщение.Сообщить();
				
			КонецЕсли;
			
		ИначеЕсли СтрНайти(ОбластьИмя, "ДатаПодписи") > 0 Тогда	
			
			ДатаПодписи = ТабличныйДокумент.Области.ДатаПодписи.Значение;
			
			ЗаполнитьСведенияОбОрганизацииНаСервере(Истина);
	
			СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация = Истина;
	
			ЗаполнитьДатуВЯчейкахНаКлиенте();

			СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация = Ложь;

		ИначеЕсли СтрНайти(ОбластьИмя, "НомерКорректировки") > 0 Тогда		
			
			НомерКорректировки = ТабличныйДокумент.Области.НомерКорректировки.Значение;
			
			СтруктураРеквизитовФормы.ВидДокумента = ?(Область.Значение = 0, 0, 1);
			
			РегламентированнаяОтчетностьКлиентСервер.УстановитьЗначениеОКВЭД(ДатаПодписи,
																	 СтруктураРеквизитовФормы,
																	 ТабличныйДокумент.Области.ОКВЭД.Значение);
		
		КонецЕсли;
					
	ИначеЕсли СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел1" Тогда
			
		ЭтоПолеОКАТО = (ОбластьИмя = "П000010002003_1" ИЛИ ОбластьИмя = "П000010002003_2"  ИЛИ ОбластьИмя = "П000010002003_3");

		Если ЭтоПолеОКАТО И ЗначениеЗаполнено(Область.Значение) Тогда
			ДлинаЗначения = СтрДлина(СокрЛП(Область.Значение));
			Для Инд = ДлинаЗначения + 1 По 11 Цикл
				Область.Значение = СокрЛП(Область.Значение) + "0";
			КонецЦикла;
		КонецЕсли;
		
		РасчетНаКлиенте("Раздел1", ОбластьИмя);
		
		ИзменитьФорматНевведенныхПоказателей(ЭтаФорма);

	ИначеЕсли СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел2" Тогда
				
		ЭтоПолеОКАТО = (ОбластьИмя = "П000020002003");
		
		Если ЭтоПолеОКАТО И ЗначениеЗаполнено(Область.Значение) Тогда
			ДлинаЗначения = СтрДлина(СокрЛП(Область.Значение));
			Для Инд = ДлинаЗначения + 1 По 11 Цикл
				Область.Значение = СокрЛП(Область.Значение) + "0";
			КонецЦикла;
		КонецЕсли;

		ЭтоПолеВводаКоличестваМесяцев = (ОбластьИмя = "П000020011003" ИЛИ ОбластьИмя = "П000020015003");
		Если ЭтоПолеВводаКоличестваМесяцев И Область.Значение > 12 Тогда
			Область.Значение = 12;
		КонецЕсли;
		
		РасчетНаКлиенте("Раздел2", ОбластьИмя);
		
		ИзменитьФорматНевведенныхПоказателей(ЭтаФорма);

	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры 

&НаКлиенте
Процедура ТабличныйДокументВыбор(Элемент, Область, СтандартнаяОбработка)
	
	Если СтрЧислоВхождений(Область.Имя, "ДобавитьСтраницу") > 0 Тогда
		
		ДобавитьСтраницу("");
		
	ИначеЕсли СтрЧислоВхождений(Область.Имя, "УдалитьСтраницу") > 0 И Область.Гиперссылка Тогда
		
		УдалитьСтраницу("");
		
	ИначеЕсли СтрЧислоВхождений(Область.Имя, "СобратьДанные") > 0 И Область.Гиперссылка Тогда	
		
		СобратьДанные("");
		
	КонецЕсли;	
	
	Если РегламентированнаяОтчетностьКлиент.ВыбраннаяОбластьРегламентированногоОтчетаНеВерна(ЭтаФорма, Область, СтандартнаяОбработка) Тогда
		Возврат;
	КонецЕсли;
	
	ОбластьИмя = Область.Имя;
	
	Если (СтрНайти(ОбластьИмя, "КодИМНС") > 0) Тогда
		СтандартнаяОбработка = Ложь;
		ОбработкаВыбораИФНС();
		Возврат;
	КонецЕсли;
		
	ЭтоПолеВводаОснованияЛьготы = (СтрНайти(ОбластьИмя, "_Основание") > 0);
	Если ЭтоПолеВводаОснованияЛьготы Тогда
		СтандартнаяОбработка = Ложь;
		ВвестиОснованиеЛьготы(Область);
		Возврат;
	КонецЕсли;
	
	ЭтоКБКРаздела1 = (Область.Имя = "П000010001003");
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел1" Тогда
		ИсходноеЗначениеКБКРаздела1 = ТабличныйДокумент.Области.П000010001003.Значение;
	КонецЕсли;

	ПараметрВводаПоля = РегламентированнаяОтчетностьКлиентСервер.НайтиСвойстваПоказателя(ЭтаФорма, ОбластьИмя);
	
	//создание динамического списка выбора
	Если ПараметрВводаПоля <> Неопределено И ПараметрВводаПоля.ТаблицаЗначений.Количество() > 0 Тогда
		//обработка таблицы значений - удаление вариантов, не проходящих по условиям
		КодПоказателя = ПараметрВводаПоля.Показатель;
		КопироватьДанныеФормы(ПараметрВводаПоля.ТаблицаЗначений, ТЗВыбора);
				
		ТребРезультат = 0;
				
		Если ТребРезультат <> 0 Тогда
			//из ТЗВыбора удаляются элементы, у которых результат отличается от нуля и ТребРезультат
			РазмерТЗ = ТЗВыбора.Количество();
			Для Сч = 1 По РазмерТЗ Цикл
				ЭлементТЗ = ТЗВыбора[РазмерТЗ - Сч];
				Рез = ?(ЭлементТЗ.РезультатПроверки = "", 0, Число(ЭлементТЗ.РезультатПроверки));
				Если Рез <> 0 И Рез <> ТребРезультат Тогда
					ТЗВыбора.Удалить(ЭлементТЗ);
				КонецЕсли;
			КонецЦикла; 
		КонецЕсли;
						
		ВвестиПоказатель(Элемент, Область, КодПоказателя, Ложь, ПараметрВводаПоля.ТекстПриВыборе, ТЗВыбора, СтандартнаяОбработка);
	Иначе
		Если ЭтоКБКРаздела1 Тогда
			НовоеЗначениеКБКРаздела1 = ТабличныйДокумент.Области.П000010001003.Значение;
			ИзменилсяКБК = (ИсходноеЗначениеКБКРаздела1 <> НовоеЗначениеКБКРаздела1);
			Если ИзменилсяКБК Тогда
				УстановитьКБКВРазделе1();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
			
		
КонецПроцедуры

&НаКлиенте
Процедура УстановитьКБКВРазделе1()
	
	Перем ТаблицаСтраницРаздела;
	
	КБК = ТабличныйДокумент.Области.П000010001003.Значение;
	мСтруктураМногостраничныхРазделов.Свойство("Раздел1", ТаблицаСтраницРаздела);
	ТаблицаСтраницРаздела = ЭтаФорма[ТаблицаСтраницРаздела];
	Для Каждого Страница Из ТаблицаСтраницРаздела Цикл
		Если Страница.Данные.Количество() > 0
		   И Страница.Данные[0].Значение <> Неопределено Тогда
			Страница.Данные[0].Значение.П000010001003 = КБК;
			Страница.Данные[0].Пометка = Ложь;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ВвестиПоказатель(Элемент, Область, КодПоказателя, Знач ЭтоСумма, Знач ТекстВыбора, ТаблицаВыбора, СтандартнаяОбработка, КолонкаПоиска = "Код") Экспорт
	
	Если ТаблицаВыбора = Неопределено ИЛИ СтруктураРеквизитовФормы.мАвтоВыборКодов Тогда
		Возврат;
	КонецЕсли;
	
	ЭтоКБКРаздела1 = (Область.Имя = "П000010001003");
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел1" Тогда
		ИсходноеЗначениеКБКРаздела1 = ТабличныйДокумент.Области.П000010001003.Значение;
	КонецЕсли;

	СтандартнаяОбработка = Ложь;
		
	Если Область.Имя = КодПоказателя Тогда	

		ИсходноеЗначение = ?(ТипЗнч(Область.Значение) = Тип("Строка"), СокрЛП(Область.Значение), Область.Значение);
		
	Иначе
		
		Разделитель = ?(Лев(Область.Имя, СтрДлина(КодПоказателя) + 1) = КодПоказателя + "_", "_", "");
		ИндексОбласти = 1;
		ИсходноеЗначение = "";
		Пока ЭтаФорма[ТекущийЭлемент.Имя].Области.Найти(КодПоказателя + Разделитель + Формат(ИндексОбласти, "ЧГ=")) <> Неопределено Цикл
			ИсходноеЗначение = ИсходноеЗначение + Строка(ЭтаФорма[ТекущийЭлемент.Имя].Области[КодПоказателя + Разделитель + Формат(ИндексОбласти, "ЧГ=")].Значение);
			ИндексОбласти = ИндексОбласти + 1;
		КонецЦикла;
		ИсходноеЗначение = СокрЛП(ИсходноеЗначение);
		
	КонецЕсли;
		
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Заголовок",          ТекстВыбора);
	ПараметрыФормы.Вставить("ТаблицаЗначений",    ТаблицаВыбора);
	ПараметрыФормы.Вставить("СтруктураДляПоиска", Новый Структура(КолонкаПоиска, ИсходноеЗначение));
	

	ДополнительныеПараметры = Новый Структура("ИндексОбласти, ИсходноеЗначениеКБКРаздела1, КодПоказателя, КолонкаПоиска, Область, Разделитель, ЭтоКБКРаздела1", ИндексОбласти, ИсходноеЗначениеКБКРаздела1, КодПоказателя, КолонкаПоиска, Область, Разделитель, ЭтоКБКРаздела1);
	ОписаниеОповещения = Новый ОписаниеОповещения("ВвестиПоказательЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ОткрытьФорму("Обработка.ОбщиеОбъектыРеглОтчетности.Форма.ФормаВыбораЗначенияИзТаблицы", ПараметрыФормы, ЭтаФорма,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры

&НаКлиенте
Процедура ВвестиПоказательЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	ИндексОбласти = ДополнительныеПараметры.ИндексОбласти;
	ИсходноеЗначениеКБКРаздела1 = ДополнительныеПараметры.ИсходноеЗначениеКБКРаздела1;
	КодПоказателя = ДополнительныеПараметры.КодПоказателя;
	КолонкаПоиска = ДополнительныеПараметры.КолонкаПоиска;
	Область = ДополнительныеПараметры.Область;
	Разделитель = ДополнительныеПараметры.Разделитель;
	ЭтоКБКРаздела1 = ДополнительныеПараметры.ЭтоКБКРаздела1;
	
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Область.Имя = КодПоказателя Тогда	
		Область.Значение = РезультатВыбора[КолонкаПоиска];
	Иначе
		СтрокаРезультатВыбора = Строка(РезультатВыбора[КолонкаПоиска]);
		Для Инд = СтрДлина(СтрокаРезультатВыбора) + 1 По ИндексОбласти - 1 Цикл
			СтрокаРезультатВыбора = " " + РезультатВыбора[КолонкаПоиска];
		КонецЦикла;
		Для Инд = 1 По ИндексОбласти - 1 Цикл
			ЭтаФорма[ТекущийЭлемент.Имя].Области[КодПоказателя + Разделитель + Формат(Инд, "ЧГ=")].Значение = СокрЛП(Сред(РезультатВыбора[КолонкаПоиска], Инд, 1));
		КонецЦикла;
	КонецЕсли;
	
	Модифицированность = Истина;
	
	УстановитьДоступностьОбластей(ЭтаФорма, СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
	РасчетНаКлиенте(СтруктураРеквизитовФормы.НаимТекущегоРаздела, Область.Имя);
	
	Если ЭтоКБКРаздела1 Тогда
		НовоеЗначениеКБКРаздела1 = ТабличныйДокумент.Области.П000010001003.Значение;
		ИзменилсяКБК = (ИсходноеЗначениеКБКРаздела1 <> НовоеЗначениеКБКРаздела1);
		Если ИзменилсяКБК Тогда
			УстановитьКБКВРазделе1();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВвестиОснованиеЛьготы(Область)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ОснованиеЛьготы", Область.Значение);
	
	ФормаВвода = РегламентированнаяОтчетностьКлиент.ПолучитьОбщуюФормуПоИмени("ФормаВводаОснованияЛьготы", ПараметрыФормы, ЭтаФорма);
	
	ДополнительныеПараметры = Новый Структура("Область", Область);
	ОписаниеОповещения = Новый ОписаниеОповещения("ВвестиОснованиеЛьготыЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ФормаВвода.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
	ФормаВвода.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	ФормаВвода.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ВвестиОснованиеЛьготыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Область = ДополнительныеПараметры.Область;
	
	Если Результат <> Неопределено Тогда
		Область.Значение = Результат;
		Модифицированность = Истина;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораИФНС()
		
	КодИМНС = СокрЛП(ТабличныйДокумент.Области.КодИМНС.Значение);
	КПП     = СокрЛП(ТабличныйДокумент.Области.КПП1.Значение); 
	ЗначенияДляОтбора = Новый Массив;
	ЗначенияДляОтбора.Добавить(Новый Структура("КодНО, КПП", КодИМНС, КПП));
							   
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Организация", СтруктураРеквизитовФормы.Организация);
	ПараметрыФормы.Вставить("ЗначенияДляОтбора", ЗначенияДляОтбора);
						   
	ФормаВыбораНалоговогоОргана = РегламентированнаяОтчетностьКлиент.ПолучитьОбщуюФормуПоИмени("ФормаВыбораНалоговогоОргана", ПараметрыФормы, ЭтаФорма);
	
	Если ФормаВыбораНалоговогоОргана.ТаблицаНО.Количество() <> 0 Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаВыбораИФНСЗавершение", ЭтотОбъект);
		ФормаВыбораНалоговогоОргана.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
		ФормаВыбораНалоговогоОргана.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		ФормаВыбораНалоговогоОргана.Открыть();
		
	ИначеЕсли НЕ ЗначениеЗаполнено(КодИМНС) Тогда	
				
		Сообщение = Новый СообщениеПользователю;

		Сообщение.Текст = НСтр("ru='Код налогового органа необходимо задать в справочнике ""Организации"".'");

		Сообщение.Сообщить();
		
	Иначе
		
		Сообщение = Новый СообщениеПользователю;

		Сообщение.Текст = НСтр("ru='Для выбора инспекции, необходимо завести соответствующую запись в справочнике ""Регистрации в налоговом органе"".'");

		Сообщение.Сообщить();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораИФНСЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	Если РезультатВыбора <> Неопределено Тогда
		
		ВыбранныйКодНО = РезультатВыбора.КодНО;
		ДлинаКодаНО = СтрДлина(ВыбранныйКодНО);
		
		Для Инд = ДлинаКодаНО + 1 По 4 Цикл
			ВыбранныйКодНО = "0" + ВыбранныйКодНО;
		КонецЦикла;
		
		ТабличныйДокумент.Области.КодИМНС.Значение = ВыбранныйКодНО;
		ТабличныйДокумент.Области.КПП1.Значение    = РезультатВыбора.КПП;
		
		ЗаполнитьСведенияОПодписантах(ЭтаФорма);
		
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТабличноеПолеНаКлиенте(ВыбТабличноеПолеИмя) Экспорт
	
	ОчиститьТабличноеПоле(ЭтаФорма,ВыбТабличноеПолеИмя);
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьТабличноеПолеНаСервере(ВыбТабличноеПолеИмя) Экспорт
	
	ОчиститьТабличноеПоле(ЭтаФорма,ВыбТабличноеПолеИмя);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОчиститьТабличноеПоле(Форма,ВыбТабличноеПолеИмя) Экспорт
	
	ВыбТабличноеПоле = Форма.ТабличныйДокумент;
	
	//для очистки защищенных областей итоговых ячеек
	//получим список итоговых ячеек, снимая с них защиту), а после очищения вернем защиту
	СписокИтоговыхЯчеек = Новый СписокЗначений;
	
	Для каждого Область Из ВыбТабличноеПоле.Области Цикл
		Если Область.ЦветФона = Форма.СтруктураРеквизитовФормы.ЦветЗаполняетсяАвтоАрифметика И Область.Защита Тогда
			Область.Защита = Ложь;
			СписокИтоговыхЯчеек.Добавить(Область.Имя);
		КонецЕсли;
	КонецЦикла;
		
	ВыбТабличноеПоле = Форма.ТабличныйДокумент;
	
	// Непосредственно очищаем ячейки табличного документа.
	// Повторно, так как в результате расчета многостраничного многострочного блока заполняются итоговые ячейки, 
	// в арифметике которых есть показатели не из многострочного блока
	Для Инд = 0 По ВыбТабличноеПоле.Области.Количество() - 1 Цикл
		ТекущаяОбласть = ВыбТабличноеПоле.Области[Инд];

		Если Не ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			Продолжить;
		КонецЕсли;

		Если ТекущаяОбласть.СодержитЗначение <> Истина Тогда
			Продолжить;
		КонецЕсли;

		Если ТекущаяОбласть.Защита Тогда
			Продолжить;
		КонецЕсли;

		ТекущаяОбласть.Очистить();
	КонецЦикла;
	
	Для каждого КодИтоговогоПоказателя Из СписокИтоговыхЯчеек Цикл
		ОбластьПоказателя=ВыбТабличноеПоле.Области.Найти(КодИтоговогоПоказателя.Значение);
		Если ОбластьПоказателя <> Неопределено Тогда
			ОбластьПоказателя.Защита = Истина;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ОпределитьИдМногострочногоРазделаПоТабличномуПолю(ТекТабличноеПоле) Экспорт
	
	Перем ИдГруппы;
		
	Возврат ИдГруппы;
	
КонецФункции

&НаКлиенте
Процедура Очистить(ВыполняемоеОповещение = Неопределено) Экспорт
	
	РегламентированнаяОтчетностьКлиент.Очистить(ЭтаФорма, ВыполняемоеОповещение);
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьНаСервере() Экспорт
		
	ТаблицаСтраницыРазделаРаздел1.Очистить();
	ТаблицаСтраницыРазделаРаздел2.Очистить();
	
	ИнициализацияМногостраничныхРазделов();
			
	ЗаполнитьПустыеСтруктурыДанных();
	
	Если НЕ СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
		ОчиститьТабличноеПолеНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	КонецЕсли;
		
	ВывестиМакетСтраницыВТабличныйДокументНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела, 1);
		
	СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
	
	РегламентированнаяОтчетностьКлиентСервер.ОчиститьВариантыЗаполнения(ЭтаФорма);
	
	РегламентированнаяОтчетность.ПолучитьСведенияОПоказателяхОтчета(ЭтаФорма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьДатуПодписи(Форма)
	
	Форма.ТабличныйДокумент.Области.ДатаПодписи.Значение = Форма.ДатаПодписи;
	
КонецПроцедуры

&НаКлиенте
Процедура АктивизироватьЯчейку(Ячейка) Экспорт
	
	РегламентированнаяОтчетностьКлиент.АктивизироватьЯчейку(ЭтаФорма, Ячейка);
	
	ИзменитьФорматНевведенныхПоказателей(ЭтаФорма);
		
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ИзменитьФорматНевведенныхПоказателей(Форма)
	
	Если Форма.СтруктураРеквизитовФормы.ЕдиницаИзмерения = Форма.ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1 Тогда
		СтрокаФорматаНольПрочерком = "ЧЦ=17; ЧДЦ=" + Форма.СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧС=0";
		СтрокаФорматаНольЦифрой    = "ЧЦ=17; ЧДЦ=" + Форма.СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=; ЧС=0";
	ИначеЕсли Форма.СтруктураРеквизитовФормы.ЕдиницаИзмерения = Форма.ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1000 Тогда
		СтрокаФорматаНольПрочерком = "ЧЦ = 17; ЧДЦ = " + Форма.СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧС=3";
		СтрокаФорматаНольЦифрой    = "ЧЦ = 17; ЧДЦ = " + Форма.СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=; ЧС=3";
	ИначеЕсли Форма.СтруктураРеквизитовФормы.ЕдиницаИзмерения = Форма.ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1000000 Тогда
		СтрокаФорматаНольПрочерком = "ЧЦ = 17; ЧДЦ = " + Форма.СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧС=6";
		СтрокаФорматаНольЦифрой    = "ЧЦ = 17; ЧДЦ = " + Форма.СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=; ЧС=6";
	КонецЕсли;
	
	Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел1" Тогда
		Для Инд = 1 ПО 3 Цикл
			Постфикс = "_" + Инд;
			ВыводитьНольЦифрой = ЗначениеЗаполнено(Форма.ТабличныйДокумент.Области["П000010002003" + Постфикс].Значение)
			                 ИЛИ ЗначениеЗаполнено(Форма.ТабличныйДокумент.Области["П000010002103" + Постфикс].Значение)
			                 ИЛИ ЗначениеЗаполнено(Форма.ТабличныйДокумент.Области["П000010002303" + Постфикс].Значение)
			                 ИЛИ ЗначениеЗаполнено(Форма.ТабличныйДокумент.Области["П000010002503" + Постфикс].Значение)
			                 ИЛИ ЗначениеЗаполнено(Форма.ТабличныйДокумент.Области["П000010002703" + Постфикс].Значение)
			                 ИЛИ ЗначениеЗаполнено(Форма.ТабличныйДокумент.Области["П000010003003" + Постфикс].Значение)
			                 ИЛИ ЗначениеЗаполнено(Форма.ТабличныйДокумент.Области["П000010004003" + Постфикс].Значение);
			Если ВыводитьНольЦифрой Тогда
				Форма.ТабличныйДокумент.Области["П000010002103" + Постфикс].Формат = СтрокаФорматаНольЦифрой;
				Форма.ТабличныйДокумент.Области["П000010002303" + Постфикс].Формат = СтрокаФорматаНольЦифрой;
				Форма.ТабличныйДокумент.Области["П000010002503" + Постфикс].Формат = СтрокаФорматаНольЦифрой;
				Форма.ТабличныйДокумент.Области["П000010002703" + Постфикс].Формат = СтрокаФорматаНольЦифрой;
			Иначе
				Форма.ТабличныйДокумент.Области["П000010002103" + Постфикс].Формат = СтрокаФорматаНольПрочерком;
				Форма.ТабличныйДокумент.Области["П000010002303" + Постфикс].Формат = СтрокаФорматаНольПрочерком;
				Форма.ТабличныйДокумент.Области["П000010002503" + Постфикс].Формат = СтрокаФорматаНольПрочерком;
				Форма.ТабличныйДокумент.Области["П000010002703" + Постфикс].Формат = СтрокаФорматаНольПрочерком;
			КонецЕсли;
			
			Если ВыводитьНольЦифрой И ЗначениеЗаполнено(Форма.ТабличныйДокумент.Области["П000010004003" + Постфикс].Значение) Тогда
				Форма.ТабличныйДокумент.Области["П000010003003" + Постфикс].Формат = СтрокаФорматаНольПрочерком;
				Форма.ТабличныйДокумент.Области["П000010004003" + Постфикс].Формат = СтрокаФорматаНольЦифрой;
			ИначеЕсли ВыводитьНольЦифрой Тогда
				Форма.ТабличныйДокумент.Области["П000010003003" + Постфикс].Формат = СтрокаФорматаНольЦифрой;
				Форма.ТабличныйДокумент.Области["П000010004003" + Постфикс].Формат = СтрокаФорматаНольПрочерком;
			Иначе
				Форма.ТабличныйДокумент.Области["П000010003003" + Постфикс].Формат = СтрокаФорматаНольПрочерком;
				Форма.ТабличныйДокумент.Области["П000010004003" + Постфикс].Формат = СтрокаФорматаНольПрочерком;
			КонецЕсли;
		КонецЦикла;
	
	ИначеЕсли Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел2" Тогда
		ЛистЗаполнен = Ложь;
		Для Каждого Область Из Форма.ТабличныйДокумент.Области Цикл
			Если СтрНайти(Область.Имя, "П00002") = 1
			   И Область.СодержитЗначение <> Неопределено И Область.СодержитЗначение
			   И ЗначениеЗаполнено(Область.Значение) Тогда
				ЛистЗаполнен = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если ЛистЗаполнен Тогда
			Форма.ТабличныйДокумент.Области.П000020013003.Формат = "ЧДЦ=2; ЧН=";
			Форма.ТабличныйДокумент.Области.П000020014003.Формат = СтрокаФорматаНольЦифрой;
			Форма.ТабличныйДокумент.Области.П000020023003.Формат = СтрокаФорматаНольЦифрой;
		Иначе
			Форма.ТабличныйДокумент.Области.П000020013003.Формат = "ЧДЦ=2; ЧН=-";
			Форма.ТабличныйДокумент.Области.П000020014003.Формат = СтрокаФорматаНольПрочерком;
			Форма.ТабличныйДокумент.Области.П000020023003.Формат = СтрокаФорматаНольПрочерком;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСтраницу(Команда)
	
	Если Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Раздел1" Тогда
		
		КБК = ТабличныйДокумент.Области.П000010001003.Значение;
				
	КонецЕсли;
	
	ВставитьДополнительнуюСтраницуНаСервере(Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
		
	СтруктураРеквизитовФормы.НомерТекущейСтраницы = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета;
			
	Если Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Раздел1" Тогда
		
		ТабличныйДокумент.Области.П000010001003.Значение = КБК;
		
	Конецесли;
	
КонецПроцедуры

&НаСервере
Процедура ВставитьДополнительнуюСтраницуНаСервере(ИмяТекущейСтраницыПанели = Неопределено ) Экспорт
	
	РегламентированнаяОтчетность.ВставитьДополнительнуюСтраницуНаСервере(ЭтаФорма, ИмяТекущейСтраницыПанели);
	РегламентированнаяОтчетность.ПослеВставкиДополнительнойСтраницыНаСервере(ЭтаФорма, ИмяТекущейСтраницыПанели);
		
	УстановитьДоступностьОбластей(ЭтаФорма, ИмяТекущейСтраницыПанели);
	
	ИзменитьФорматНевведенныхПоказателей(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьДополнительнуюСтраницуНаКлиенте(ИмяТекущейСтраницыПанели = Неопределено ) Экспорт
	
	РегламентированнаяОтчетностьКлиент.ВставитьДополнительнуюСтраницуНаКлиенте(ЭтаФорма, ИмяТекущейСтраницыПанели);
	РегламентированнаяОтчетностьКлиент.ПослеВставкиДополнительнойСтраницыНаКлиенте(ЭтаФорма, ИмяТекущейСтраницыПанели);
	
	УстановитьДоступностьОбластей(ЭтаФорма, ИмяТекущейСтраницыПанели);
                 	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтраницу(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("УдалитьСтраницуЗавершение", ЭтотОбъект);
	ТекстВопроса = НСтр("ru='Удалить текущую страницу?'");
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 60, КодВозвратаДиалога.Да);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтраницуЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.РазделыОтчета.ТекущиеДанные;
	
	КопияТекущиеДанные = ТекущиеДанные;
	
	ТекущиеДанные = ТекущиеДанные.ПолучитьРодителя();
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.ПолучитьЭлементы().Количество() = 1 Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяСтраницаРазделаПослеУдаления = Неопределено;
	Если КопияТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета = ТекущиеДанные.ПолучитьЭлементы().Количество() Тогда
		ТекущаяСтраницаРазделаПослеУдаления = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(ТекущиеДанные.ПолучитьЭлементы(), "КолонкаНомерСтраницыРазделаОтчета", КопияТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета - 1);
		СтруктураРеквизитовФормы.НомерТекущейСтраницы = ТекущаяСтраницаРазделаПослеУдаления.КолонкаНомерСтраницыРазделаОтчета;
	КонецЕсли;
	
	УдалитьДополнительнуюСтраницуНаСервере(Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
	
	ТекущиеДанные.ПолучитьЭлементы().Удалить(ТекущиеДанные.ПолучитьЭлементы().Индекс(КопияТекущиеДанные));
	
	НомерСтраницы = 1;
	
	Для Каждого СтраницаРаздела Из ТекущиеДанные.ПолучитьЭлементы() Цикл
		
		СтраницаРаздела.КолонкаРазделыОтчета              = "Стр. " + НомерСтраницы;
		СтраницаРаздела.КолонкаНомерСтраницыРазделаОтчета = НомерСтраницы;
		
		НомерСтраницы = НомерСтраницы + 1;
		
	КонецЦикла;
	
	Если НЕ ТекущаяСтраницаРазделаПослеУдаления = Неопределено Тогда
		Элементы.РазделыОтчета.ТекущаяСтрока = ТекущаяСтраницаРазделаПослеУдаления.ПолучитьИдентификатор();
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура УдалитьДополнительнуюСтраницуНаСервере(ИмяТекущейСтраницыПанели = Неопределено)
	
	РегламентированнаяОтчетность.УдалитьДополнительнуюСтраницуНаСервере(ЭтаФорма, ИмяТекущейСтраницыПанели);
		
	УстановитьДоступностьОбластей(ЭтаФорма, ИмяТекущейСтраницыПанели);
	
	ИзменитьФорматНевведенныхПоказателей(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьОбщиеРеквизитыСТитульногоЛиста()
	
	МассивИНН         = Новый Массив(12);
	МассивКПП         = Новый Массив(9);
	МассивДатаПодписи = Новый Массив(8);
					
	ИсходныйМакет = ТабличныйДокумент;
		
	Область = ИсходныйМакет.Области.Найти("ИНН1");
	
	Если НЕ Область = Неопределено Тогда
		
		СтрИНН = Область.Значение;
		
		Если СтрДлина(СтрИНН) = 10 Тогда
			СтрИНН = СтрИНН + "--";
		КонецЕсли;
								
		Для Ном = 1 По СтрДлина(СтрИНН) Цикл
			
			МассивИНН[Ном - 1] = Сред(СтрИНН, Ном, 1);
			
		КонецЦикла;
		
	КонецЕсли;
		
	Область = ИсходныйМакет.Области.Найти("КПП1");
	
	Если НЕ Область = Неопределено Тогда
		
		Для Ном = 1 По СтрДлина(Область.Значение) Цикл
			
			МассивКПП[Ном - 1] = Сред(Область.Значение, Ном, 1);
			
		КонецЦикла;
		
	КонецЕсли;
			
	Область = ИсходныйМакет.Области.Найти("ДатаПодписи");
	
	Если НЕ Область = Неопределено Тогда
		
		СтрДатаПодписи = Лев(СтрЗаменить(Область.Значение, ".", ""), 8);
		
		Для Ном = 1 По СтрДлина(СтрДатаПодписи) Цикл
			
			Если ЗначениеЗаполнено(ИсходныйМакет.Области.ДатаПодписи.Значение) Тогда
				МассивДатаПодписи[Ном - 1] = Сред(СтрДатаПодписи, Ном, 1);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ОбщиеРеквизитыРазделов = Новый Структура;
	
	ОбщиеРеквизитыРазделов.Вставить("ИНН", МассивИНН);
	ОбщиеРеквизитыРазделов.Вставить("КПП", МассивКПП);
	ОбщиеРеквизитыРазделов.Вставить("ДатаПодписи", МассивДатаПодписи);
		
	Возврат ОбщиеРеквизитыРазделов;
	
КонецФункции

&НаКлиенте
Процедура ПоказатьБланк(Команда)
	
	Отказ = Ложь;
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("Команда", Команда);
	ОписаниеОповещения = Новый ОписаниеОповещения("ПоказатьБланкЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередПечатьюРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьБланкЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;

	Команда = ДополнительныеПараметры.Команда;
		
	Печать(Команда.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура Печать(ВидПечати, НеИзФормыОтчета = Ложь) Экспорт
	
	Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1. Формируется печатная форма...'"), ЭтаФорма.Заголовок), , , БиблиотекаКартинок.Печать);
	
	Если НЕ ПечатьНаСервере(ВидПечати) Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ОткрытьФормуПредварительногоПросмотра(ЭтаФорма, ВидПечати, , СтруктураРеквизитовФормы.СписокПечатаемыхЛистов);
		
	СтруктураРеквизитовФормы.мРежимПечати = Ложь;
	
КонецПроцедуры

&НаСервере
Функция ПечатьНаСервере(ВидПечати)
	
	Если НЕ РегламентированнаяОтчетность.ПринтерДоступен() Тогда
		
		Сообщение = Новый СообщениеПользователю;

		Сообщение.Текст = НСтр("ru='Перед формированием печатных форм необходимо определить в системе принтер и задать его в качестве используемого по умолчанию!'");

		Сообщение.Сообщить();
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Если СтруктураРеквизитовФормы.ЕдиницаИзмерения <> ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1 ИЛИ СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения <> 0 Тогда
		
		Сообщение = Новый СообщениеПользователю;

		Сообщение.Текст = НСтр("ru='Печать возможна только при установленной единице измерения ""в рублях"" и точности ""0"".'");

		Сообщение.Сообщить();

		Возврат Ложь;
		
	КонецЕсли;
		
	Если ТипЗнч(мДеревоВыбранныхСтраниц) <> Тип("ДанныеФормыДерево") Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	СтруктураРеквизитовФормы.мПечатныеФормы.Очистить();
	СтруктураРеквизитовФормы.мРежимПечати = Истина;
	
	СохранитьДанныеРаздела(СтруктураРеквизитовФормы.НаимТекущегоРаздела, Ложь, Ложь);
				
	сохрТаблДок = ТабличныйДокумент.ПолучитьОбласть();
	
	СтрПоля = "ПолеСверху, ПолеСправа, ПолеСнизу, ПолеСлева";
	ВремПоля = Новый Структура(СтрПоля);
	
	ЗаполнитьЗначенияСвойств(ВремПоля, ТабличныйДокумент, СтрПоля);
	
	ВывестиМакетВТаблДокНаСервере("Титульный", 0);
	
	ОбщиеРеквизитыРазделов = ПолучитьОбщиеРеквизитыСТитульногоЛиста();
		
	Для Каждого СтрокаУровня1 Из мДеревоВыбранныхСтраниц.ПолучитьЭлементы() Цикл
		
		Если СтрокаУровня1.ВыводНаПечать = 0 Тогда
			Продолжить;
		КонецЕсли;

		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("НаименованиеЛиста",  СтрокаУровня1.Представление);
		СтруктураПараметров.Вставить("ОриентацияЛиста",    СтрокаУровня1.ОриентацияСтраницы);
		СтруктураПараметров.Вставить("ИмяСтраницы",        СтрокаУровня1.ИмяСтраницы);
		Структурапараметров.Вставить("ИмяОбластиТаблПоля", СтрокаУровня1.ИмяОбластиТабличногоПоля);
		СтруктураПараметров.Вставить("ВидПечати",          ВидПечати);

		Если НЕ мСтруктураМногостраничныхРазделов.Свойство(СтрокаУровня1.ИмяСтраницы) Тогда
			
			ВывестиМакетВТаблДокНаСервере(СтрокаУровня1.ИмяСтраницы, 0);
			ВывестиНаПечатьЛист(СтруктураПараметров, ОбщиеРеквизитыРазделов, СтрПоля);
			
		Иначе
			
			СтруктураПараметров.Вставить("ИмяСтраницыПанели", СтрокаУровня1.ИмяСтраницы);
			ВывестиНаПечатьДополнительныеСтраницы(СтруктураПараметров, ОбщиеРеквизитыРазделов);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(сохрТаблДок);
	ЗаполнитьЗначенияСвойств(ТабличныйДокумент, ВремПоля, СтрПоля);
	
	РегламентированнаяОтчетностьКлиентСервер.ПроставлениеНомеровЛистов(ЭтаФорма, , СтруктураРеквизитовФормы.СписокПечатаемыхЛистов);
	
	КопироватьДанныеФормы(мДеревоВыбранныхСтраниц, мДеревоСтраницОтчета);
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьМакетМЧБ(ПараметрыПечати, МакетМЧБ, ОбщиеРеквизитыРазделов)
	
	Показатели = Новый ТаблицаЗначений;
	Показатели.Колонки.Добавить("Имя");
	Показатели.Колонки.Добавить("Значение");
	Показатели.Колонки.Добавить("ЗначениеМЧБ");
	
	Показатели.Индексы.Добавить("Имя");
	
	ИсходныйМакет = ТабличныйДокумент;
	Для Каждого Область Из ИсходныйМакет.Области Цикл
		Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник И Область.СодержитЗначение = Истина Тогда
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = Область.Имя;
			НовСтр.Значение = Область.Значение;
			НовСтр.ЗначениеМЧБ = ПолучитьЗначениеМЧБ(Область);
		КонецЕсли;
	КонецЦикла;
	
	НайденноеЗначение = Показатели.Найти("ИНН1", "Имя");
	
	Если НЕ НайденноеЗначение = Неопределено Тогда
		Показатели.Удалить(НайденноеЗначение);
	КонецЕсли;
		
	ИНН = "";
	Для Ном = 0 По 11 Цикл
		ИНН = ИНН + ОбщиеРеквизитыРазделов.ИНН[Ном];
	КонецЦикла;
	
	НовСтр = Показатели.Добавить();
	НовСтр.Имя = "ИНН1";
	НовСтр.Значение = ИНН;
	НовСтр.ЗначениеМЧБ = СокрЛП(ИНН);
	
	НайденноеЗначение = Показатели.Найти("КПП1", "Имя");
	
	Если НЕ НайденноеЗначение = Неопределено Тогда
		Показатели.Удалить(НайденноеЗначение);
	КонецЕсли;
		
	КПП = "";
	Для Ном = 0 По 8 Цикл
		КПП = КПП + ОбщиеРеквизитыРазделов.КПП[Ном];
	КонецЦикла;
	
	НовСтр = Показатели.Добавить();
	НовСтр.Имя = "КПП1";
	НовСтр.Значение = КПП;
	НовСтр.ЗначениеМЧБ = СокрЛП(КПП);
	
	НайденноеЗначение = Показатели.Найти("ДатаПодписи", "Имя");
		
	Если НЕ НайденноеЗначение = Неопределено Тогда
		Показатели.Удалить(НайденноеЗначение);
	КонецЕсли;
		
	ДатаПодписиСтр = "";
	Для Ном = 0 По 7 Цикл
		ДатаПодписиСтр = ДатаПодписиСтр + ОбщиеРеквизитыРазделов.ДатаПодписи[Ном];
	КонецЦикла;
	
	НовСтр = Показатели.Добавить();
	НовСтр.Имя = "ДатаПодписи";
	НовСтр.Значение = ДатаПодписиСтр;
	НовСтр.ЗначениеМЧБ = СокрЛП(ДатаПодписиСтр);
	
	// особая обработка ФИО на титульном листе
	Если ПараметрыПечати.ИмяСтраницы = "Титульный" Тогда
		
		ПокПодписант = Показатели.Найти("Подписант", "Имя");
		Если ПокПодписант <> Неопределено Тогда
			
			ФИО = РегламентированнаяОтчетность.РазложитьФИО(ПокПодписант.Значение);
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "ОргПодписантФамилия";
			НовСтр.Значение = ФИО.Фамилия;
			НовСтр.ЗначениеМЧБ = ФИО.Фамилия;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "ОргПодписантИмя";
			НовСтр.Значение = ФИО.Имя;
			НовСтр.ЗначениеМЧБ = ФИО.Имя;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "ОргПодписантОтчество";
			НовСтр.Значение = ФИО.Отчество;
			НовСтр.ЗначениеМЧБ = ФИО.Отчество;
			
		КонецЕсли;
		
		// особая обработка ОКВЭД
		ПокОКВЭД = Показатели.Найти("ОКВЭД", "Имя");
		Если ПокОКВЭД <> Неопределено Тогда
			ОКВЭД = ПокОКВЭД.ЗначениеМЧБ;
			Если Сред(ОКВЭД, 2, 1) = "." Тогда
				ОКВЭД = Лев(ОКВЭД, 1) + " " + Сред(ОКВЭД, 2);
			КонецЕсли;
			Если Сред(ОКВЭД, 5, 1) = "." Тогда
				ОКВЭД = Лев(ОКВЭД, 4) + " " + Сред(ОКВЭД, 5);
			КонецЕсли;
			ПокОКВЭД.Значение = ОКВЭД;
			ПокОКВЭД.ЗначениеМЧБ = ОКВЭД;
		КонецЕсли;
		
	КонецЕсли;
	
	// особая обработка ИНН
	ИНН = Новый Массив(12);
	Для Инд = 1 По 9 Цикл
		Для Знакоместо = 0 По 11 Цикл
			ИНН[Знакоместо] = Показатели.Найти("ИНН" + Инд + "_" + (Знакоместо + 1), "Имя");
		КонецЦикла;
		Если ИНН[0] = Неопределено ИЛИ ИНН[1] = Неопределено ИЛИ ИНН[10] = Неопределено Тогда
			Продолжить;
		КонецЕсли;
	КонецЦикла;

	ИндексТочкиПоКорню=Новый Структура;
	Для каждого Область Из МакетМЧБ.Области Цикл
		Если Область.Текст="." Тогда
			ТекАдресЗначенияОбласти = АдресЗначенияОбласти(Область);
			Корень=ТекАдресЗначенияОбласти.Корень;
			ИндексТочкиЧислаНаМЧБ=ТекАдресЗначенияОбласти.ИндексЗнакоместа;
			ИндексТочкиПоКорню.Вставить(Корень,ИндексТочкиЧислаНаМЧБ);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Область Из МакетМЧБ.Области Цикл
		Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			ИмяОбласти = Область.Имя;
			
			Если СтрЧислоВхождений(ИмяОбласти, "НомСтр") > 0
			 ИЛИ СтрЧислоВхождений(ИмяОбласти, "СоставленаНа") > 0 Тогда
				Продолжить;
			КонецЕсли;
					
			РезультатПоиска = Показатели.Найти(ИмяОбласти, "Имя");
			Если РезультатПоиска = Неопределено Тогда
				ТекАдресЗначенияОбласти = АдресЗначенияОбласти(Область);
				ЗначениеВыведено = Ложь;
				Если ТекАдресЗначенияОбласти.ИндексЗнакоместа <> 0 Тогда
					РезультатПоиска = Показатели.Найти(ТекАдресЗначенияОбласти.Корень, "Имя");
					Если РезультатПоиска <> Неопределено Тогда
						Если ТипЗнч(РезультатПоиска.Значение)=Тип("Число") Тогда
							//разделение числа на 2 части
							ЦелаяЧасть = Цел(РезультатПоиска.Значение);   
							СтрЦелаяЧасть = Строка(Формат(Цел(РезультатПоиска.Значение), "ЧГ=0; ЧН="));
							СтрДробнаяЧасть = Сред(Строка(РезультатПоиска.Значение - ЦелаяЧасть),3);
							Если СтрДробнаяЧасть = "" Тогда
								Если СтрЦелаяЧасть = "0" Тогда
									СтрЦелаяЧасть = "";
								КонецЕсли;
							КонецЕсли;
							//разделение областей показателя на 2 части
							
							ИндексТочкиЧислаНаМЧБ = Неопределено;
							Если ИндексТочкиПоКорню.Свойство(ТекАдресЗначенияОбласти.Корень,ИндексТочкиЧислаНаМЧБ) = Ложь Тогда
								//На МЧБ нет разделения на целую и дробную части
								ПрисвоитьЗначениеОбласти(Область, РезультатПоиска.ЗначениеМЧБ, ТекАдресЗначенияОбласти.ИндексЗнакоместа);
								ЗначениеВыведено = Истина;	
							Иначе
								//определяем какая часть выводится (Целая, дробная или точка)
								Если ТекАдресЗначенияОбласти.ИндексЗнакоместа<ИндексТочкиЧислаНаМЧБ Тогда
									//выводится целая часть
									ПрисвоитьЗначениеОбласти(Область, ?(РезультатПоиска.ЗначениеМЧБ = "-","-",СтрЦелаяЧасть), ТекАдресЗначенияОбласти.ИндексЗнакоместа);
									ЗначениеВыведено = Истина;	
								ИначеЕсли ТекАдресЗначенияОбласти.ИндексЗнакоместа > ИндексТочкиЧислаНаМЧБ Тогда
									//выводится дробная часть
									ПрисвоитьЗначениеОбласти(Область, СтрДробнаяЧасть, ТекАдресЗначенияОбласти.ИндексЗнакоместа - ИндексТочкиЧислаНаМЧБ);
									ЗначениеВыведено = Истина;
								Иначе
									//выводится точка
									//присваивать ничего не будем, но считаем, что область заполненяется корректно
									ЗначениеВыведено = Истина;
								КонецЕсли;
							КонецЕсли;
						Иначе
							ПрисвоитьЗначениеОбласти(Область, РезультатПоиска.ЗначениеМЧБ, ТекАдресЗначенияОбласти.ИндексЗнакоместа, ТипЗнч(РезультатПоиска.Значение) <> Тип("Строка") ИЛИ НЕ ЗначениеЗаполнено(РезультатПоиска.Значение));
							ЗначениеВыведено = Истина;		
						КонецЕсли;
					КонецЕсли;
										
				КонецЕсли;
				Если НЕ ЗначениеВыведено Тогда
										
					Сообщение = Новый СообщениеПользователю;

					Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Не удалось заполнить область ""%1""!'"), ИмяОбласти);

					Сообщение.Сообщить();

				КонецЕсли;
			Иначе
				ПрисвоитьЗначениеОбласти(Область, РезультатПоиска.ЗначениеМЧБ);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

&НаСервере
Функция ПолучитьЗначениеМЧБ(Область)
	
	ТипЗначения = ТипЗнч(Область.Значение);
	Если ТипЗначения = Тип("Число") Тогда
		ФорматОбласти = Область.Формат;
		СоотвСтрокаФормата = РазобратьСтрокуФормата(ФорматОбласти);
		СоотвСтрокаФормата.Вставить("ЧРД", ".");
		СоотвСтрокаФормата.Вставить("ЧГ", "");
		Результат = Формат(Область.Значение, СобратьСтрокуФормата(СоотвСтрокаФормата));
	ИначеЕсли ТипЗначения = Тип("Строка") Тогда
		Результат = СокрЛП(Область.Значение);
	ИначеЕсли ТипЗначения = Тип("Дата") Тогда
		Результат = Формат(Область.Значение, ?(ПустаяСтрока(Область.Формат), "ДФ=dd.MM.yyyy", Область.Формат));
	ИначеЕсли ТипЗначения = Тип("Булево") Тогда
		Результат = Формат(Область.Значение, Область.Формат);
	КонецЕсли;
	Возврат СокрЛП(Результат);
	
КонецФункции

&НаСервере
Функция АдресЗначенияОбласти(Область)
	
	Имя = Область.Имя;
	КореньИмениОбласти = Неопределено;
	СтрИндексЗнакоместа = "";
	ИндексЗнакоместа = 0;
	ДлинаИмени = СтрДлина(Имя);
	Для ИндексВхождения = 1 По ДлинаИмени Цикл
		СтрИндексЗнакоместа = Сред(Имя, ДлинаИмени - ИндексВхождения + 1);
		Если СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(СтрИндексЗнакоместа) Тогда
			КореньИмениОбласти = Лев(Имя, ДлинаИмени - ИндексВхождения);
			ИндексЗнакоместа = Число(СтрИндексЗнакоместа);
		Иначе
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если Прав(КореньИмениОбласти, 1) = "_" Тогда
		КореньИмениОбласти = Лев(КореньИмениОбласти, СтрДлина(КореньИмениОбласти) - 1);
	КонецЕсли;
		
	Возврат Новый Структура("Корень, ИндексЗнакоместа", КореньИмениОбласти, ИндексЗнакоместа);
	
КонецФункции

&НаСервере
Процедура ПрисвоитьЗначениеОбласти(Область, Знач Значение, ИндексЗнакоместа = 0, Дополнять_ = Истина)
	
	Если ИндексЗнакоместа <> 0 Тогда
		Если СтрДлина(Значение) >= ИндексЗнакоместа Тогда
			Значение = Сред(Значение, ИндексЗнакоместа, 1);
		Иначе
			Значение = ?(Дополнять_, "-", "");
		КонецЕсли;
	ИначеЕсли НЕ ЗначениеЗаполнено(Значение) И Дополнять_ Тогда
		Значение = "-";
	КонецЕсли;
	
	Если Область.СодержитЗначение = Истина Тогда
		Область.Значение = ВРЕГ(Значение);
	Иначе
		Область.Текст = ВРЕГ(Значение);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция РазобратьСтрокуФормата(Знач СтрокаФормата)
	
	ЗначенияПараметров = Новый Соответствие;
	Пока СтрНайти(СтрокаФормата, ";") <> 0 Цикл
		ВхождениеРазделителя = СтрНайти(СтрокаФормата, ";");
		ДоРазделителя = Лев(СтрокаФормата, ВхождениеРазделителя - 1);
		ВхождениеРавно = СтрНайти(ДоРазделителя, "=");
		Если ВхождениеРавно <> 0 И ВхождениеРавно <> 1 Тогда
			ЗначенияПараметров.Вставить(Лев(ДоРазделителя, ВхождениеРавно - 1), Сред(ДоРазделителя, ВхождениеРавно + 1));
		КонецЕсли;
		СтрокаФормата = Сред(СтрокаФормата, ВхождениеРазделителя + 1);
	КонецЦикла;
	ВхождениеРавно = СтрНайти(СтрокаФормата, "=");
	Если ВхождениеРавно <> 0 И ВхождениеРавно <> 1 Тогда
		ЗначенияПараметров.Вставить(Лев(СтрокаФормата, ВхождениеРавно - 1), Сред(СтрокаФормата, ВхождениеРавно + 1));
	КонецЕсли;
	Возврат ЗначенияПараметров;
	
КонецФункции

&НаСервере
Функция СобратьСтрокуФормата(ПараметрыФормата)
	
	СтрокаФормата = "";
	Для Каждого Параметр Из ПараметрыФормата Цикл
		СтрокаФормата = СтрокаФормата + "; " + Параметр.Ключ + "=" + Параметр.Значение;
	КонецЦикла;
	Если НЕ ПустаяСтрока(СтрокаФормата) Тогда
		СтрокаФормата = Сред(СтрокаФормата, 3);
	КонецЕсли;
	Возврат СтрокаФормата;
	
КонецФункции

&НаСервере
Процедура ВывестиНаПечатьЛист(Парам1, ОбщиеРеквизитыРазделов, СтрПоля = Неопределено)
	
	СоответствиеРазделовМакетам = Новый Соответствие;
	
	СоответствиеРазделовМакетам.Вставить("Титульный",	"МЧБ_2012Кв1_Титульный");
	СоответствиеРазделовМакетам.Вставить("Раздел1",		"МЧБ_2012Кв1_Раздел1");
	СоответствиеРазделовМакетам.Вставить("Раздел2",		"МЧБ_2012Кв1_Раздел2");
	
	МЧБРаздела = СоответствиеРазделовМакетам[Парам1.ИмяСтраницы];
		
	МакетМЧБ = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(МЧБРаздела);
	МакетМЧБ.ПолеСверху = 5;
	МакетМЧБ.ПолеСправа = 5;
	МакетМЧБ.ПолеСнизу = 5;
	МакетМЧБ.ПолеСлева = 5;
	
	ВремПоля = Новый Структура(СтрПоля);
				
	ЗаполнитьМакетМЧБ(Парам1, МакетМЧБ, ОбщиеРеквизитыРазделов);
	
	ЗаполнитьЗначенияСвойств(ВремПоля, ТабличныйДокумент, СтрПоля);
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(МакетМЧБ);
	ЗаполнитьЗначенияСвойств(ТабличныйДокумент, МакетМЧБ, СтрПоля, "Макет");
			
	РегламентированнаяОтчетность.ВывестиНаПечатьЛистОбщая(ЭтаФорма.Заголовок, Парам1, ТабличныйДокумент, СтруктураРеквизитовФормы.мПечатныеФормы);
		
КонецПроцедуры

&НаСервере
Процедура ВывестиНаПечатьДополнительныеСтраницы(СтруктураПараметровСтраницы, ОбщиеРеквизитыРазделов)
	
	Перем ИмяСтраницы;
	Перем ТаблицаСтраницРаздела;
	
	СтруктураПараметровСтраницы.Свойство("ИмяСтраницыПанели", ИмяСтраницы);
	
	Если Не мСтруктураМногостраничныхРазделов.Свойство(ИмяСтраницы, ТаблицаСтраницРаздела) Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаСтраницРаздела = ЭтаФорма[ТаблицаСтраницРаздела];
	
	МассивПризнаковАктивности = Новый Массив;
	Для Каждого Страница Из ТаблицаСтраницРаздела Цикл
		ТекущийИндекс = ТаблицаСтраницРаздела.Индекс(Страница);
		МассивПризнаковАктивности.Добавить(ТаблицаСтраницРаздела[ТекущийИндекс].АктивнаяСтраница);
	КонецЦикла;
	
	Для Каждого Страница Из ТаблицаСтраницРаздела Цикл
		ТекущийИндекс = ТаблицаСтраницРаздела.Индекс(Страница);
		ВывестиМакетВТаблДокНаСервере(ИмяСтраницы, ТекущийИндекс + 1);
		ВывестиНаПечатьЛист(СтруктураПараметровСтраницы, ОбщиеРеквизитыРазделов);
	КонецЦикла;
	
	Для Каждого Страница Из ТаблицаСтраницРаздела Цикл
		ТекущийИндекс = ТаблицаСтраницРаздела.Индекс(Страница);
		ТаблицаСтраницРаздела[ТекущийИндекс].АктивнаяСтраница = МассивПризнаковАктивности[ТекущийИндекс];
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСДвухмернымШтрихкодомPDF417(Команда)
	
	РегламентированнаяОтчетностьКлиент.ВывестиМашиночитаемуюФорму(ЭтаФорма, Команда.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайла(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузитьИзФайлаЗавершение", ЭтотОбъект);
	
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередЗагрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура Выгрузить(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьЗавершение", ЭтотОбъект);

	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайлаЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ЗагрузитьИзФайлаОтчет();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайлаОтчет() Экспорт
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузитьИзФайлаОтчетЗавершение", ЭтотОбъект);
	
	Если Модифицированность Тогда
		СохранитьНаКлиенте(,ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайлаОтчетЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	РегламентированнаяОтчетностьЗагрузкаКлиент.ЗагрузитьИзФайлаОтчет(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Функция ЗагрузкаОтчетаИзФайла(ДанныеДляЗагрузки) Экспорт
	
	Если Модифицированность Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = СтрШаблон(НСтр("ru='Отчет ""%1"" не сохранен.'"), ЭтотОбъект.Заголовок);
		Сообщение.Сообщить();
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ ЗагрузкаОтчетаИзФайлаНаСервере(ДанныеДляЗагрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
		
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция ЗагрузкаОтчетаИзФайлаНаСервере(ДанныеДляЗагрузки)
	
	СформироватьСтруктуруПоказателей();
	
	ПараметрыОтчета = СформироватьСтруктуруПараметров();
	
	ДеревоДляЗагрузки = ИзвлечьСтруктуруXML();
	
	Если НЕ РегламентированнаяОтчетностьЗагрузка.ЗагрузкаОтчетаИзФайла(
		ЭтотОбъект, ПараметрыОтчета, ДанныеДляЗагрузки, ДеревоДляЗагрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура ВыгрузитьЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ВыгрузитьОтчет();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьОтчет() Экспорт
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьОтчетЗавершение", ЭтотОбъект);
	
	Если Модифицированность Тогда
		СохранитьНаКлиенте(,ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьОтчетЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ФормаВыгрузкиРеглОтчета = ПолучитьФорму("Документ.ВыгрузкаРегламентированныхОтчетов.Форма.ФормаДокумента", , ЭтаФорма);
	
	СпДокОсн = Новый СписокЗначений;
	СпДокОсн.Добавить(СтруктураРеквизитовФормы.мСохраненныйДок);
	
	ФормаВыгрузкиРеглОтчета.СформироватьИЗаписать(СпДокОсн);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузку(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьВыгрузкуЗавершение", ЭтотОбъект);

	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
		
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузкуЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПроверитьВыгрузкуОтчета();
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузкуОтчета()
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьВыгрузкуОтчетаЗавершение", ЭтотОбъект);
	
	Если Модифицированность Тогда
		СохранитьНаКлиенте(,ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузкуОтчетаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ФормаВыгрузкиРеглОтчета = ПолучитьФорму("Документ.ВыгрузкаРегламентированныхОтчетов.Форма.ФормаДокумента", , ЭтаФорма);
	
	СпДокОсн = Новый СписокЗначений;
	СпДокОсн.Добавить(СтруктураРеквизитовФормы.мСохраненныйДок);
	
	ФормаВыгрузкиРеглОтчета.Проверить(СпДокОсн);
	
КонецПроцедуры

&НаСервере
Функция ПроверитьПоказатели() Экспорт
	
	СформироватьСтруктуруПоказателей();
	ПараметрыВыгрузки = СформироватьСтруктуруПараметров();
	Если НЕ ПроверитьВозможностьВыгрузки(ПараметрыВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	ДеревоВыгрузки = ИзвлечьСтруктуруXML();
	ЗаполнитьДанными(ДеревоВыгрузки, ПараметрыВыгрузки);
	Если НЕ РегламентированнаяОтчетность.ПроверитьДанные(ЭтаФорма, ДеревоВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Функция УниверсальнаяВыгрузка(ТекстВыгрузки = Неопределено, ПроверятьБлокировки = Истина) Экспорт
	
	Перем ПараметрыВыгрузки;
	
	Если Модифицированность Тогда
		ТекстЗаголовка = ЗаголовокРегламентированногоОтчета(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета, СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
		
		ОргСтр = " (" + СтруктураРеквизитовФормы.Организация + ")";
		Если СтрНайти(ТекстЗаголовка, ОргСтр) = 0 Тогда
			ТекстЗаголовка = ТекстЗаголовка + ОргСтр;
		КонецЕсли;
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Отчет """ + ТекстЗаголовка + """ не сохранен.";
		Сообщение.Сообщить();
		
		Возврат Ложь;
	КонецЕсли;
	
	Если Открыта() Тогда
		Если СтруктураРеквизитовФормы.ЕдиницаИзмерения <> ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1 Тогда
			
			Сообщение = Новый СообщениеПользователю;

			Сообщение.Текст = НСтр("ru='Перед выгрузкой необходимо установить единицу измерения ""в рублях"".'");

			Сообщение.Сообщить();
			
			Возврат Ложь;
			
		КонецЕсли;
		Если СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения <> 0 Тогда
			
			Сообщение = Новый СообщениеПользователю;

			Сообщение.Текст = НСтр("ru='Перед выгрузкой необходимо установить точность ""0"".'");

			Сообщение.Сообщить();
			
			Возврат Ложь;
			
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ УниверсальнаяВыгрузкаXMLНаСервере(ТекстВыгрузки, ПараметрыВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Функция ЗаголовокРегламентированногоОтчета(ДатаНач, ДатаКон, Периодичность = Неопределено) Экспорт
		
	СтрПериодОтчета = ПредставлениеПериода( НачалоДня(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета), КонецДня(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета), "ФП = Истина" );
		
	Если СтрНайти(ЭтаФорма.Заголовок, СтрПериодОтчета) = 0 Тогда
		Возврат ЭтаФорма.Заголовок + " за " + СтрПериодОтчета;
	Иначе
		Возврат ЭтаФорма.Заголовок;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция УниверсальнаяВыгрузкаXMLНаСервере(ТекстВыгрузки, ПараметрыВыгрузки)
	
	СформироватьСтруктуруПоказателей();
	ПараметрыВыгрузки = СформироватьСтруктуруПараметров();
	
	Если НЕ ПроверитьВозможностьВыгрузки(ПараметрыВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	ДеревоВыгрузки = ИзвлечьСтруктуруXML();
	
	ЗаполнитьДанными(ДеревоВыгрузки, ПараметрыВыгрузки);
	Если НЕ РегламентированнаяОтчетность.ПроверитьДанные(ЭтаФорма, ДеревоВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ТекстВыгрузки = ВыгрузитьДеревоВXML(ДеревоВыгрузки, ПараметрыВыгрузки);
		
	Возврат Истина;
	
КонецФункции

&НаСервере
Процедура ОчиститьПоказателиОтчетаЗаполняемыеИзИБНаСервере(ИмяСтраницы)
	
	РегламентированнаяОтчетностьКлиентСервер.ОчиститьПоказателиОтчетаЗаполняемыеИзИБ(ЭтаФорма, ИмяСтраницы);
	
КонецПроцедуры

&НаСервере
Функция ВывестиПоказательВXML(Узел, ЗначениеПоказателя)
	
	МинШирина = Узел.МинРазмерность;
	МаксШирина = Узел.МаксРазмерность;
	
	Если Узел.Формат = "T" ИЛИ Узел.Формат = "Т" Тогда // учтем оба варианта: кириллицу и латиницу
		Узел.Значение = ?(МаксШирина < СтрДлина(СокрЛП(ЗначениеПоказателя)), СокрЛП(Лев(СокрЛП(ЗначениеПоказателя), МаксШирина)), СокрЛП(ЗначениеПоказателя));
	ИначеЕсли Узел.Формат = "N" Тогда
		СтрокаФормата = "ЧРД=.;ЧН=0;ЧГ=;";
		Если Узел.МаксРазмерность <> 0 И Узел.МаксРазмерность <> 99999 Тогда
			СтрокаФормата = СтрокаФормата + "ЧЦ=" + Формат(Узел.МаксРазмерность, "ЧГ=") + ";";
		КонецЕсли;
		Если Узел.МинРазмерность <> 99999 Тогда
			СтрокаФормата = СтрокаФормата + "ЧДЦ=" + Формат(Узел.МинРазмерность, "ЧГ=") + ";";
		КонецЕсли;
		Узел.Значение = СокрЛП(Формат(ЗначениеПоказателя, СтрокаФормата));
	ИначеЕсли Узел.Формат = "gYear" Тогда
		Если ТипЗнч(ЗначениеПоказателя) = Тип("Дата") Тогда
			Узел.Значение = СокрЛП(Формат(ЗначениеПоказателя, "ДФ=гггг"));
		Иначе
			Узел.Значение = Прав(СокрЛП(ЗначениеПоказателя), 4);
		КонецЕсли;
	КонецЕсли;
	
КонецФункции 

&НаСервере
Функция ВыгрузитьДеревоВXML(ДеревоВыгрузки, ПараметрыВыгрузки)
	
	ПотокXML = РегламентированнаяОтчетность.СоздатьНовыйПотокXML("windows-1251"); // создаем новый поток для записи
	ЗаписатьУзелДереваВXML(ДеревоВыгрузки, ПотокXML, ПараметрыВыгрузки); // пишем дерево в поток
	Возврат ПотокXML.Закрыть(); // получаем текст XML
	
КонецФункции 

&НаСервере
Процедура ЗадатьЗначениеЭлемента(Узел, КодЭлемента, Значение)
	
	ВывестиПоказательВXML(ПолучитьПодчиненныйЭлемент(Узел, КодЭлемента), Значение);
	
КонецПроцедуры

&НаСервере
Функция ЗаписатьУзелДереваВXML(СтрокаДерева, ПотокXML, ПараметрыВыгрузки) Экспорт	
	
	Если ТипЗнч(СтрокаДерева) = Тип("ДеревоЗначений") Тогда
		ПотокXML.ЗаписатьНачалоЭлемента("Файл");
		ПотокXML.ЗаписатьАтрибут("xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");
		Для каждого Стр Из СтрокаДерева.Строки Цикл
			ЗаписатьУзелДереваВXML(Стр, ПотокXML, ПараметрыВыгрузки);
		КонецЦикла;
		ПотокXML.ЗаписатьКонецЭлемента();
	Иначе
		Если СтрокаДерева.Тип = "А" ИЛИ СтрокаДерева.Тип = "A" Тогда 
			ПотокXML.ЗаписатьАтрибут(СтрокаДерева.Код, Строка(СтрокаДерева.Значение));
		Иначе
			ПотокXML.ЗаписатьНачалоЭлемента(СтрокаДерева.Код);
			Для каждого Лист из СтрокаДерева.Строки Цикл
				ЗаписатьУзелДереваВXML(Лист, ПотокXML, ПараметрыВыгрузки);
			КонецЦикла;
			ПотокXML.ЗаписатьТекст(Строка(СтрокаДерева.Значение));
			ПотокXML.ЗаписатьКонецЭлемента();
		КонецЕсли;
	КонецЕсли;

КонецФункции

&НаСервере
Процедура ЗаполнитьДанными(ДеревоВыгрузки, ПараметрыВыгрузки)
	
	ОбработатьУсловныеЭлементы(ПараметрыВыгрузки, ДеревоВыгрузки);
	ЗаполнитьДаннымиУзел(ПараметрыВыгрузки, ДеревоВыгрузки);
	ОтсечьНезаполненныеНеобязательныеУзлы(ДеревоВыгрузки);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДаннымиУзел(ПараметрыВыгрузки, Узел, НомерСтроки = Неопределено)
	
	Для Каждого Стр из Узел.Строки Цикл
		Если Стр.Тип = "С" ИЛИ Стр.Тип = "C" Тогда // учтем оба варианта: кириллицу и латиницу
			Если Стр.Код = ПараметрыВыгрузки.ИмяКлючевогоУзлаСодержательнойЧасти Тогда
				ЗаполнитьСодержательнуюЧасть(Стр);
			Иначе
				ЗаполнитьДаннымиУзел(ПараметрыВыгрузки, Стр);
			КонецЕсли;
		Иначе
			Если ПустаяСтрока(Стр.ЗначениеПоУмолчанию) Тогда
				Если НЕ ПустаяСтрока(Стр.Ключ) Тогда	
					ВывестиПоказательВXML(Стр, ПараметрыВыгрузки[Стр.Ключ]);
				Иначе
					Стр.Значение = "";
				КонецЕсли;
			ИначеЕсли Лев(Стр.ЗначениеПоУмолчанию, 1) = "&" Тогда
				ВывестиПоказательВXML(Стр, ПараметрыВыгрузки[Сред(Стр.ЗначениеПоУмолчанию, 2)]);
			Иначе
				Стр.Значение = Стр.ЗначениеПоУмолчанию;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСодержательнуюЧасть(УзелРодитель)
	
	Раздел1 = мДанныеОтчета.Раздел1;
	Раздел2 = мДанныеОтчета.Раздел2;
	
	Узел_СумНалПУ = ПолучитьПодчиненныйЭлемент(УзелРодитель, "СумНалПУ");
	Узел_СумПУ = ПолучитьПодчиненныйЭлемент(Узел_СумНалПУ, "СумПУ");
	
	Для Каждого ЛистРаздела1 Из Раздел1 Цикл
		
		ДанныеРаздела1 = ЛистРаздела1.Данные[0].Значение;
		
		ЗадатьЗначениеЭлемента(Узел_СумНалПУ, "КБК", ДанныеРаздела1.П000010001003);
		
		КоличествоОднородныхБлоковНаЛистеРаздела1 = 3;
		
		Для НомерБлока = 1 По КоличествоОднородныхБлоковНаЛистеРаздела1 Цикл
			
			ПостфиксБлока = "_" + Формат(НомерБлока, "ЧГ=0");
			
			ОКАТО = СокрЛП(ДанныеРаздела1["П000010002003" + ПостфиксБлока]);
			
			СуммаНалогаИсчисленная  = ДанныеРаздела1["П000010002103" + ПостфиксБлока];
			СуммаАвансовыхПлатежей1 = ДанныеРаздела1["П000010002303" + ПостфиксБлока];
			СуммаАвансовыхПлатежей2 = ДанныеРаздела1["П000010002503" + ПостфиксБлока];
			СуммаАвансовыхПлатежей3 = ДанныеРаздела1["П000010002703" + ПостфиксБлока];
			
			СуммаНалогаКУплате     = ДанныеРаздела1["П000010003003" + ПостфиксБлока];
			СуммаНалогаКУменьшению = ДанныеРаздела1["П000010004003" + ПостфиксБлока];
			СуммаНалога = СуммаНалогаКУплате - СуммаНалогаКУменьшению;
			
			Если НЕ ЗначениеЗаполнено(ОКАТО) Тогда
				Продолжить;
			КонецЕсли;
			
			НовыйУзел_СумПУ = СкопироватьУзел(Узел_СумНалПУ, Узел_СумПУ);
			ЗадатьЗначениеЭлемента(НовыйУзел_СумПУ, "ОКАТО", ОКАТО);
			ЗадатьЗначениеЭлемента(НовыйУзел_СумПУ, "НалИсчисл", СуммаНалогаИсчисленная);
			ЗадатьЗначениеЭлемента(НовыйУзел_СумПУ, "АвПУКв1", СуммаАвансовыхПлатежей1);
			ЗадатьЗначениеЭлемента(НовыйУзел_СумПУ, "АвПУКв2", СуммаАвансовыхПлатежей2);
			ЗадатьЗначениеЭлемента(НовыйУзел_СумПУ, "АвПУКв3", СуммаАвансовыхПлатежей3);
			ЗадатьЗначениеЭлемента(НовыйУзел_СумПУ, "НалПУ", СуммаНалога);
			
			// Данные из раздела 2, связанные с разделом 1 по коду по ОКАТО
			Узел_РасчНалТС = ПолучитьПодчиненныйЭлемент(НовыйУзел_СумПУ, "РасчНалТС");
			Для Каждого ЛистРаздела2 Из Раздел2 Цикл
				
				ДанныеРаздела2 = ЛистРаздела2.Данные[0].Значение;
				
				Если ОКАТО <> СокрЛП(ДанныеРаздела2.П000020002003) Тогда
					Продолжить;
				КонецЕсли;
				
				НовыйУзел_РасчНалТС = СкопироватьУзел(НовыйУзел_СумПУ, Узел_РасчНалТС);
				
				Для Каждого Элемент Из НовыйУзел_РасчНалТС.Строки Цикл
					Если ПустаяСтрока(Элемент.Ключ) Тогда
						Продолжить;
					КонецЕсли;
					ЗадатьЗначениеЭлемента(НовыйУзел_РасчНалТС, Элемент.Код, ДанныеРаздела2[Элемент.Ключ]);
				КонецЦикла;
				
				// Льготы и основания.
				УзелЛьготы = ПолучитьПодчиненныйЭлемент(НовыйУзел_РасчНалТС, "ЛьготОсвНал");
				КодЛьготы = ДанныеРаздела2.П000020017003_КодЛьготы;
				Основание = ДанныеРаздела2.П000020017003_Основание;
				СуммаЛьготы = ДанныеРаздела2.П000020018003;
				Если НЕ ПустаяСтрока(КодЛьготы) Тогда
					Если ПустаяСтрока(Основание) Тогда
						ПолныйКодЛьготы = КодЛьготы;
					Иначе
						ПолныйКодЛьготы = КодЛьготы + "/" + Основание;
					КонецЕсли;
					ЗадатьЗначениеЭлемента(УзелЛьготы, "КодОсвНал", ПолныйКодЛьготы);
					ЗадатьЗначениеЭлемента(УзелЛьготы, "СумОсвНал", СуммаЛьготы);
				КонецЕсли;
				
				УзелЛьготы = ПолучитьПодчиненныйЭлемент(НовыйУзел_РасчНалТС, "ЛьготУменСум");
				КодЛьготы = ДанныеРаздела2.П000020019003_КодЛьготы;
				Основание = ДанныеРаздела2.П000020019003_Основание;
				СуммаЛьготы = ДанныеРаздела2.П000020020003;
				Если НЕ ПустаяСтрока(КодЛьготы) Тогда
					Если ПустаяСтрока(Основание) Тогда
						ПолныйКодЛьготы = КодЛьготы;
					Иначе
						ПолныйКодЛьготы = КодЛьготы + "/" + Основание;
					КонецЕсли;
					ЗадатьЗначениеЭлемента(УзелЛьготы, "КодУменСум", ПолныйКодЛьготы);
					ЗадатьЗначениеЭлемента(УзелЛьготы, "СумУменСум", СуммаЛьготы);
				КонецЕсли;
				
				УзелЛьготы = ПолучитьПодчиненныйЭлемент(НовыйУзел_РасчНалТС, "ЛьготСнижСтав");
				КодЛьготы = ДанныеРаздела2.П000020021003_КодЛьготы;
				Основание = ДанныеРаздела2.П000020021003_Основание;
				СуммаЛьготы = ДанныеРаздела2.П000020022003;
				Если НЕ ПустаяСтрока(КодЛьготы) Тогда
					Если ПустаяСтрока(Основание) Тогда
						ПолныйКодЛьготы = КодЛьготы;
					Иначе
						ПолныйКодЛьготы = КодЛьготы + "/" + Основание;
					КонецЕсли;
					ЗадатьЗначениеЭлемента(УзелЛьготы, "КодСнижСтав", ПолныйКодЛьготы);
					ЗадатьЗначениеЭлемента(УзелЛьготы, "СумСнижСтав", СуммаЛьготы);
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ИзвлечьСтруктуруXML()
	
	ДеревоСтруктуры = Новый ДеревоЗначений;
	ДеревоСтруктуры.Колонки.Добавить("Код");
	ДеревоСтруктуры.Колонки.Добавить("Тип");
	ДеревоСтруктуры.Колонки.Добавить("Формат");
	ДеревоСтруктуры.Колонки.Добавить("МинРазмерность");
	ДеревоСтруктуры.Колонки.Добавить("МаксРазмерность");
	ДеревоСтруктуры.Колонки.Добавить("Обязательность");
	ДеревоСтруктуры.Колонки.Добавить("Многостраничность");
	ДеревоСтруктуры.Колонки.Добавить("Многострочность");
	ДеревоСтруктуры.Колонки.Добавить("Раздел");
	ДеревоСтруктуры.Колонки.Добавить("Ключ");
	ДеревоСтруктуры.Колонки.Добавить("Условие");
	ДеревоСтруктуры.Колонки.Добавить("ЗначениеПоУмолчанию");
	ДеревоСтруктуры.Колонки.Добавить("Значение");
	ДеревоСтруктуры.Колонки.Добавить("Представление");
	ДеревоСтруктуры.Колонки.Добавить("Показатели");
			
	Макет = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет("СхемаВыгрузки501");
	ВысотаТаблицы = Макет.ВысотаТаблицы;
	
	УчтенныеГруппы = Новый Соответствие;
	
	Для Уровень = 0 По Макет.КоличествоУровнейГруппировокСтрок() - 1 Цикл
		Макет.ПоказатьУровеньГруппировокСтрок(Уровень);
		Для НомерСтроки = 2 По ВысотаТаблицы Цикл
			НомСтр = ВысотаТаблицы - НомерСтроки + 2;
			Если Макет.Область(НомСтр, 0, НомСтр, 0).Видимость И УчтенныеГруппы.Получить(НомСтр) = Неопределено Тогда
				
				РодительскийУзел = ДеревоСтруктуры;
				Если Уровень <> 0 Тогда
					Для Инд = 1 По НомСтр - 2 Цикл
						Узел = УчтенныеГруппы.Получить(НомСтр - Инд);
						Если Узел <> Неопределено Тогда
							РодительскийУзел = Узел;
							Прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				НовСтр = РодительскийУзел.Строки.Вставить(0);
				НовСтр.Код = СокрЛП(Макет.Область(НомСтр, 1, НомСтр, 1).Текст);
				НовСтр.Раздел = СокрЛП(Макет.Область(НомСтр, 2, НомСтр, 2).Текст);
				НовСтр.Ключ = СокрЛП(Макет.Область(НомСтр, 3, НомСтр, 3).Текст);
				НовСтр.Тип = СокрЛП(Макет.Область(НомСтр, 4, НомСтр, 4).Текст);
				НовСтр.Формат = СокрЛП(Макет.Область(НомСтр, 5, НомСтр, 5).Текст);
				МинРазмерность = СокрЛП(Макет.Область(НомСтр, 6, НомСтр, 6).Текст);
				НовСтр.МинРазмерность = ?(ПустаяСтрока(МинРазмерность), ?(НовСтр.Формат = "N", 99999, 0), Число(МинРазмерность));
				МаксРазмерность = СокрЛП(Макет.Область(НомСтр, 7, НомСтр, 7).Текст);
				НовСтр.МаксРазмерность = ?(ПустаяСтрока(МаксРазмерность), 99999, Число(МаксРазмерность));
				НовСтр.Обязательность = СокрЛП(Макет.Область(НомСтр, 8, НомСтр, 8).Текст);
				НовСтр.Многостраничность = НЕ ПустаяСтрока(Макет.Область(НомСтр, 9, НомСтр, 9).Текст);
				НовСтр.Многострочность = НЕ ПустаяСтрока(Макет.Область(НомСтр, 10, НомСтр, 10).Текст);
				НовСтр.Условие = СокрЛП(Макет.Область(НомСтр, 11, НомСтр, 11).Текст);
				НовСтр.ЗначениеПоУмолчанию = СокрЛП(Макет.Область(НомСтр, 12, НомСтр, 12).Текст);
				НовСтр.Представление = СокрЛП(Макет.Область(НомСтр, 13, НомСтр, 13).Текст);
				
				УчтенныеГруппы.Вставить(НомСтр, НовСтр);
				
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат ДеревоСтруктуры;
	
КонецФункции

&НаСервере
Процедура ОбработатьУсловныеЭлементы(Знач ПараметрыВыгрузки, Узел)
	
	Если ТипЗнч(Узел) <> Тип("ДеревоЗначений") Тогда
		Если Узел.Код = ПараметрыВыгрузки.ИмяКлючевогоУзлаСодержательнойЧасти Тогда
			Возврат;
		КонецЕсли;
		РегламентированнаяОтчетность.ДополнитьСтруктуруПараметровПрочиеОтчеты(мДанныеОтчета, ПараметрыВыгрузки, Узел);
	КонецЕсли;
	КоличествоСтрок = Узел.Строки.Количество();
	Для Инд = 1 По КоличествоСтрок Цикл
		ТекСтр = Узел.Строки.Получить(КоличествоСтрок - Инд);
		Если НЕ ПустаяСтрока(ТекСтр.Условие) Тогда
			Если НЕ РегламентированнаяОтчетность.УсловиеВыполнено(ЭтаФорма, ПараметрыВыгрузки, ТекСтр.Условие) Тогда
				Узел.Строки.Удалить(ТекСтр);
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		ОбработатьУсловныеЭлементы(ПараметрыВыгрузки, ТекСтр);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОтсечьНезаполненныеНеобязательныеУзлы(Узел)
	
	КоличествоСтрок = Узел.Строки.Количество();
	Для Инд = 1 По КоличествоСтрок Цикл
		Стр = Узел.Строки.Получить(КоличествоСтрок - Инд);
		ОтсечьНезаполненныеНеобязательныеУзлы(Стр);
	КонецЦикла;
	
	Если ТипЗнч(Узел) <> Тип("ДеревоЗначений") Тогда
		Если (СтрНайти(Узел.Обязательность, "Н") <> 0 ИЛИ СтрНайти(Узел.Обязательность, "H") <> 0) И УзелПуст(Узел) Тогда // учтем оба варианта: кириллицу и латиницу
			РегламентированнаяОтчетность.УдалитьУзел(Узел);
		ИначеЕсли (СтрНайти(Узел.Обязательность, "М") <> 0 ИЛИ СтрНайти(Узел.Обязательность, "M") <> 0) // учтем оба варианта: кириллицу и латиницу
		И УзелПуст(Узел)
		И ?(СтрНайти(Узел.Обязательность, "О") <> 0 ИЛИ СтрНайти(Узел.Обязательность, "O") <> 0, РегламентированнаяОтчетность.ИмеютсяАналогичныеСоседниеУзлыКлюч(Узел), Истина) Тогда
			РегламентированнаяОтчетность.УдалитьУзел(Узел);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ПолучитьПодчиненныйЭлемент(Узел, КодЭлемента)
	
	Для Каждого Стр Из Узел.Строки Цикл
		Если Стр.Код = КодЭлемента Тогда
			Возврат Стр;
		КонецЕсли;
	КонецЦикла;
	
КонецФункции

&НаСервере
Функция ПроверитьВозможностьВыгрузки(ПараметрыВыгрузки)
	
	СтатусПроверки = Истина;
	
	ФиксированныеЗначения = Новый Структура;
	
	ФиксированныеЗначения.Вставить("НалоговыйПериод", Новый Массив());
	ФиксированныеЗначения.НалоговыйПериод.Добавить("34");
	ФиксированныеЗначения.НалоговыйПериод.Добавить("50");
	
	ФиксированныеЗначения.Вставить("КодМестаПредставления", Новый Массив());
	ФиксированныеЗначения.КодМестаПредставления.Добавить("213");
	ФиксированныеЗначения.КодМестаПредставления.Добавить("216");
	ФиксированныеЗначения.КодМестаПредставления.Добавить("260");
	
	ФиксированныеЗначения.Вставить("КодФормыРеорганизации", Новый Массив());
	ФиксированныеЗначения.КодФормыРеорганизации.Добавить("0");
	ФиксированныеЗначения.КодФормыРеорганизации.Добавить("1");
	ФиксированныеЗначения.КодФормыРеорганизации.Добавить("2");
	ФиксированныеЗначения.КодФормыРеорганизации.Добавить("3");
	ФиксированныеЗначения.КодФормыРеорганизации.Добавить("5");
	ФиксированныеЗначения.КодФормыРеорганизации.Добавить("6");
	
	ФиксированныеЗначения.Вставить("ЭкологическийКласс", Новый Массив());
	ФиксированныеЗначения.ЭкологическийКласс.Добавить("0");
	ФиксированныеЗначения.ЭкологическийКласс.Добавить("1");
	ФиксированныеЗначения.ЭкологическийКласс.Добавить("2");
	ФиксированныеЗначения.ЭкологическийКласс.Добавить("3");
	ФиксированныеЗначения.ЭкологическийКласс.Добавить("4");
	ФиксированныеЗначения.ЭкологическийКласс.Добавить("5");
	
	ФиксированныеЗначения.Вставить("КБК", Новый Массив());
	ФиксированныеЗначения.КБК.Добавить("18210604011021000110");
	
	Если ПустаяСтрока(ПараметрыВыгрузки.ИННЮЛОрг) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "Не задан ИНН организации!", "Титульный", "ИНН1");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ПустаяСтрока(ПараметрыВыгрузки.КППОрг) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "Не задан КПП организации!", "Титульный", "КПП1");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	КлассификаторПоказателя = ФиксированныеЗначения.НалоговыйПериод;
	ПоказательПрошелПроверку = ПроверитьПоказательПоКлассификатору(ПараметрыВыгрузки.Период, КлассификаторПоказателя);
	Если НЕ ПоказательПрошелПроверку Тогда
		СообщениеОбОшибке = "Значение кода налогового периода должно быть равно одному из следующих значений: ";
		СообщениеОбОшибке = СообщениеОбОшибке + ПолучитьСписокЗначенийКлассификатора(КлассификаторПоказателя);
		СообщениеОбОшибке = СообщениеОбОшибке + "!";
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, СообщениеОбОшибке, "Титульный", "Период");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ПустаяСтрока(ПараметрыВыгрузки.НаимОрг) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "Не указано полное наименование организации!", "Титульный", "НаименованиеОрганизации");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ПустаяСтрока(ПараметрыВыгрузки.КодНО) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "Не задан код налогового органа!", "Титульный", "КодИМНС1");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ПустаяСтрока(ПараметрыВыгрузки.ОКВЭД) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На титульном листе не задано значение кода вида деятельности по ОКВЭД!", "Титульный", "ОКВЭД");
		СтатусПроверки = Ложь;
	ИначеЕсли НЕ РегламентированнаяОтчетностьКлиентСервер.ОКВЭДСоответствуетТребованиям(ПараметрыВыгрузки.ОКВЭД) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На титульном листе задано некорректное значение кода вида деятельности по ОКВЭД! Допустимы значения, соответствующие следующим шаблонам: ""XX"", ""XX.X"", ""XX.XX"", ""XX.XX.X"", ""XX.XX.XX"" (X - любая цифра).", "Титульный", "ОКВЭД");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	КлассификаторПоказателя = ФиксированныеЗначения.КодМестаПредставления;
	ПоказательПрошелПроверку = ПроверитьПоказательПоКлассификатору(ПараметрыВыгрузки.ПоМесту, КлассификаторПоказателя);
	Если НЕ ПоказательПрошелПроверку Тогда
		СообщениеОбОшибке = "Значение кода места, по которому представляется документ, должно быть равно одному из следующих значений: ";
		СообщениеОбОшибке = СообщениеОбОшибке + ПолучитьСписокЗначенийКлассификатора(КлассификаторПоказателя);
		СообщениеОбОшибке = СообщениеОбОшибке + "!";
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, СообщениеОбОшибке, "Титульный", "ПоМесту1");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	// Проверка параметров секции подписанта декларации.
	Если ПустаяСтрока(ПараметрыВыгрузки.ФамилияПодписанта) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "Не задана фамилия подписанта!", "Титульный", "ОргПодписант");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ПустаяСтрока(ПараметрыВыгрузки.ИмяПодписанта) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "Не задано имя подписанта!", "Титульный", "ОргПодписант");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ПараметрыВыгрузки.ТипПодписанта = "2" И ПустаяСтрока(ПараметрыВыгрузки.НаимДокПредставителя) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "Не задано наименование документа, удостоверяющего полномочия представителя!", "Титульный", "ДокУпПред");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	// Проверка параметров секции реорганизации.
	Если ЗначениеЗаполнено(ПараметрыВыгрузки.ФормРеорг) Тогда
		
		КлассификаторПоказателя = ФиксированныеЗначения.КодФормыРеорганизации;
		ПоказательПрошелПроверку = ПроверитьПоказательПоКлассификатору(ПараметрыВыгрузки.ФормРеорг, КлассификаторПоказателя);
		Если НЕ ПоказательПрошелПроверку Тогда
			СообщениеОбОшибке = "Значение код формы реорганизации (ликвидации) должно быть равно одному из следующих значений: ";
			СообщениеОбОшибке = СообщениеОбОшибке + ПолучитьСписокЗначенийКлассификатора(КлассификаторПоказателя);
			СообщениеОбОшибке = СообщениеОбОшибке + "!";
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, СообщениеОбОшибке, "Титульный", "КодФормыРеорганизации");
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		Если ПараметрыВыгрузки.ФормРеорг <> "0" Тогда
			
			ДлинаИННРеорг = СтрДлина(ПараметрыВыгрузки.ИННЮЛРеорг);
			Если ДлинаИННРеорг <> 10 Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "Не" + ?(ДлинаИННРеорг = 0, "", "верно") + " задан ИНН реорганизованной организации!", "Титульный", "ИНН_Реорг");
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			ДлинаКППРеорг = СтрДлина(ПараметрыВыгрузки.КППРеорг);
			Если ДлинаКППРеорг <> 9 Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "Не" + ?(ДлинаКППРеорг = 0, "", "верно") + " задан КПП реорганизованной организации!", "Титульный", "КПП_Реорг");
				СтатусПроверки = Ложь;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Проверка правильности заполнения Раздела 1.
	
	// Возможные проблемы:
	//   - не задан КБК;
	//   - неправильный КБК;
	//   - различные значения КБК;
	//   - нет ни одного раздела с заполненным кодом ОКАТО;
	//   - код ОКАТО задан неверно;
	//   - код ОКАТО дублируетя;
	//   - не задан код ОКАТО при заполненных суммах налогов и платежей.
	Раздел1 = мДанныеОтчета.Раздел1;
	
	ТаблицаКБК = Новый ТаблицаЗначений;
	ТаблицаКБК.Колонки.Добавить("НомерСтраницы");
	ТаблицаКБК.Колонки.Добавить("КБК");
	ТаблицаКБК.Колонки.Добавить("НеЗадан");
	
	ОКАТОРаздела1 = Новый ТаблицаЗначений;
	ОКАТОРаздела1.Колонки.Добавить("КодОКАТО");
	
	ЕстьЗаполненныйБлокРаздела1 = Ложь;
	
	КоличествоСходныхБлоковРаздела1 = 3;
	Для Каждого Лист Из Раздел1 Цикл
		ДанныеЛиста = Лист.Данные[0].Значение;
		НомерСтраницы = Раздел1.Индекс(Лист) + 1;
		
		НоваяСтрокаТаблицыКБК = ТаблицаКБК.Добавить();
		НоваяСтрокаТаблицыКБК.НомерСтраницы = НомерСтраницы;
		НоваяСтрокаТаблицыКБК.КБК = ДанныеЛиста.П000010001003;
		НоваяСтрокаТаблицыКБК.НеЗадан = ПустаяСтрока(НоваяСтрокаТаблицыКБК.КБК);
		
		Для Инд = 1 По КоличествоСходныхБлоковРаздела1 Цикл
			ПостфиксБлока = "_" + Формат(Инд, "ЧГ=0");
			ИмяОбластиОКАТО = "П000010002003" + ПостфиксБлока;
			
			ОКАТО = СокрЛП(ДанныеЛиста[ИмяОбластиОКАТО]);
			ЗаданоОКАТО = (НЕ ПустаяСтрока(ОКАТО));
			ЗаданыСуммыНалогаИПлатежей = (ЗначениеСуммыЗаполнено(ДанныеЛиста["П000010002103" + ПостфиксБлока])
			                          ИЛИ ЗначениеСуммыЗаполнено(ДанныеЛиста["П000010002303" + ПостфиксБлока])
			                          ИЛИ ЗначениеСуммыЗаполнено(ДанныеЛиста["П000010002503" + ПостфиксБлока])
			                          ИЛИ ЗначениеСуммыЗаполнено(ДанныеЛиста["П000010002703" + ПостфиксБлока])
			                          ИЛИ ЗначениеСуммыЗаполнено(ДанныеЛиста["П000010003003" + ПостфиксБлока])
			                          ИЛИ ЗначениеСуммыЗаполнено(ДанныеЛиста["П000010004003" + ПостфиксБлока]));
			
			ЕстьЗаполненныйБлокРаздела1 = (ЕстьЗаполненныйБлокРаздела1 ИЛИ ЗаданоОКАТО ИЛИ ЗаданыСуммыНалогаИПлатежей);
			
			Если ЗаданоОКАТО Тогда
				НоваяСтрокаОКАТО = ОКАТОРаздела1.Добавить();
				НоваяСтрокаОКАТО.КодОКАТО = ОКАТО;
				
				ДлинаОКАТО = СтрДлина(ОКАТО);
				Если ДлинаОКАТО <> 11 Тогда
					РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "В разделе 1 на странице " + НомерСтраницы + " неверно задан код по ОКАТО!", "Раздел1", ИмяОбластиОКАТО, НомерСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
			Иначе
				Если ЗаданыСуммыНалогаИПлатежей Тогда
					РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "В разделе 1 на странице " + НомерСтраницы + " не задан код по ОКАТО!", "Раздел1", ИмяОбластиОКАТО, НомерСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
	КонецЦикла;
	
	НезаданныйКБК = ТаблицаКБК.Найти(Истина, "НеЗадан");
	Если НезаданныйКБК <> Неопределено Тогда
		НомерСтраницы = ТаблицаКБК.Индекс(НезаданныйКБК) + 1;
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "В разделе 1 на странице " + НомерСтраницы + " не задан КБК!", "Раздел1", "П000010001003", НомерСтраницы);
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если НЕ ЕстьЗаполненныйБлокРаздела1 Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "В разделе 1 не заполнен ни один блок с информацией о суммах налога!", "Раздел1", "П000010002003_1", 1);
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	ТаблицаПроверкиУникальностиОКАТО = ОКАТОРаздела1.Скопировать();
	ТаблицаПроверкиУникальностиОКАТО.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число", , , Новый КвалификаторыЧисла(1)));
	ТаблицаПроверкиУникальностиОКАТО.ЗаполнитьЗначения(1, "Количество");
	ТаблицаПроверкиУникальностиОКАТО.Свернуть("КодОКАТО", "Количество");
	
	Для Каждого ПроверяемыйОКАТО Из ТаблицаПроверкиУникальностиОКАТО Цикл
		Если ПроверяемыйОКАТО.Количество > 1 Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "В разделе 1 обнаружен повторяющийся код ОКАТО " + ПроверяемыйОКАТО.КодОКАТО + "!", "Раздел1", , 1);
			СтатусПроверки = Ложь;
		КонецЕсли;
	КонецЦикла;
	
	// Проверка правильности заполнения Раздела 2.
	
	// Возможные проблемы:
	//   - не задан код ОКАТО при заполненных полях раздела;
	//   - код ОКАТО задан неверно;
	//   - код ОКАТО раздела 2 не соответствует ни одному коду ОКАТО из раздела 1;
	//   - не заполнены обязательные поля;
	//   - неверно заданы коды льгот и основания;
	Раздел2 = мДанныеОтчета.Раздел2;
	
	Для Каждого Лист Из Раздел2 Цикл
		ДанныеЛиста = Лист.Данные[0].Значение;
		НомерСтраницы = Раздел2.Индекс(Лист) + 1;
		
		ЛистЗаполнен = (НЕ ПустаяСтрока(ДанныеЛиста.П000020003003)
		            ИЛИ НЕ ПустаяСтрока(ДанныеЛиста.П000020004003)
		            ИЛИ НЕ ПустаяСтрока(ДанныеЛиста.П000020005003)
		            ИЛИ НЕ ПустаяСтрока(ДанныеЛиста.П000020006003)
		            ИЛИ ЗначениеЗаполнено(ДанныеЛиста.П000020007003)
		            ИЛИ НЕ ПустаяСтрока(ДанныеЛиста.П000020008003)
		            ИЛИ НЕ ПустаяСтрока(ДанныеЛиста.П000020009003)
		            ИЛИ НЕ ПустаяСтрока(ДанныеЛиста.П000020009003)
		            ИЛИ ЗначениеЗаполнено(ДанныеЛиста.П000020010003)
		            ИЛИ ЗначениеЗаполнено(ДанныеЛиста.П000020011003)
		            ИЛИ ЗначениеЗаполнено(ДанныеЛиста.П000020012003)
		            ИЛИ ЗначениеЗаполнено(ДанныеЛиста.П000020013003)
		            ИЛИ ЗначениеСуммыЗаполнено(ДанныеЛиста.П000020014003)
		            ИЛИ ЗначениеЗаполнено(ДанныеЛиста.П000020015003)
		            ИЛИ НЕ ПустаяСтрока(ДанныеЛиста.П000020017003_КодЛьготы)
		            ИЛИ ЗначениеСуммыЗаполнено(ДанныеЛиста.П000020018003)
		            ИЛИ НЕ ПустаяСтрока(ДанныеЛиста.П000020019003_КодЛьготы)
		            ИЛИ ЗначениеСуммыЗаполнено(ДанныеЛиста.П000020020003)
		            ИЛИ НЕ ПустаяСтрока(ДанныеЛиста.П000020021003_КодЛьготы)
		            ИЛИ ЗначениеСуммыЗаполнено(ДанныеЛиста.П000020022003)
		            ИЛИ ЗначениеСуммыЗаполнено(ДанныеЛиста.П000020023003));
		
		ИмяОбластиОКАТО = "П000020002003";
		ОКАТО = СокрЛП(ДанныеЛиста[ИмяОбластиОКАТО]);
		ЗаданоОКАТО = (НЕ ПустаяСтрока(ОКАТО));
		
		Если ЗаданоОКАТО Тогда
			ДлинаОКАТО = СтрДлина(ОКАТО);
			Если ДлинаОКАТО <> 11 Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "В разделе 2 на странице " + НомерСтраницы + " неверно задан код по ОКАТО!", "Раздел2", ИмяОбластиОКАТО, НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			ОКАТОНайденВРазделе1 = (ОКАТОРаздела1.Найти(ОКАТО, "КодОКАТО") <> Неопределено);
			
			Если НЕ ОКАТОНайденВРазделе1 Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "Для значения кода по ОКАТО на странице " + НомерСтраницы + " раздела 2 не найдено соответствующее значение кода по ОКАТО в разделе 1!", "Раздел2", ИмяОбластиОКАТО, НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
		Иначе
			Если ЛистЗаполнен Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "В разделе 2 на странице " + НомерСтраницы + " не задан код по ОКАТО!", "Раздел2", ИмяОбластиОКАТО, НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
		КонецЕсли;
		
		Если ЛистЗаполнен ИЛИ ЗаданоОКАТО Тогда
			
			ИмяПроверяемойОбласти = "П000020003003"; // Код вида транспортного средства
			ДлинаКодаВидаТC = СтрДлина(СокрЛП(ДанныеЛиста[ИмяПроверяемойОбласти]));
			Если ДлинаКодаВидаТC <> 5 Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " раздела 2 не задан код вид транспортного средства!", "Раздел2", ИмяПроверяемойОбласти, НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			ИмяПроверяемойОбласти = "П000020006003"; // Регистрационный знак транспортного средства
			ОбластьЗаполнена = НЕ ПустаяСтрока(СокрЛП(ДанныеЛиста[ИмяПроверяемойОбласти]));
			Если НЕ ОбластьЗаполнена Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " раздела 2 не задан регистрационный знак транспортного средства!", "Раздел2", ИмяПроверяемойОбласти, НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			ИмяПроверяемойОбласти = "П000020007003"; // Налоговая база
			ОбластьЗаполнена = ЗначениеЗаполнено(ДанныеЛиста[ИмяПроверяемойОбласти]);
			Если НЕ ОбластьЗаполнена Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " раздела 2 не задана налоговая база!", "Раздел2", ИмяПроверяемойОбласти, НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			ИмяПроверяемойОбласти = "П000020008003"; // Код вида единицы измерения по ОКЕИ
			ДлинаЗначенияОбласти = СтрДлина(СокрЛП(ДанныеЛиста[ИмяПроверяемойОбласти]));
			Если ДлинаЗначенияОбласти <> 3 Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " раздела 2 не задан код единицы измерения по ОКЕИ!", "Раздел2", ИмяПроверяемойОбласти, НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СтатусПроверки;
	
КонецФункции

&НаСервере
Функция ЗначениеСуммыЗаполнено(ЗначениеСуммы)
	
	Возврат (Окр(ЗначениеСуммы) <> 0)
	
КонецФункции

&НаСервере
Функция ПроверитьПоказательПоКлассификатору(ЗначениеПоказателя, МассивЗначенийКлассификатора)
	
	ЗначениеНайденоВМассиве = (МассивЗначенийКлассификатора.Найти(ЗначениеПоказателя) <> Неопределено);
	Возврат ЗначениеНайденоВМассиве;
	
КонецФункции

&НаСервере
Функция ПолучитьСписокЗначенийКлассификатора(МассивЗначенийКлассификатора)
	
	СтрокаЗначений = "";
	Для Инд = 0 По МассивЗначенийКлассификатора.ВГраница() Цикл
		СтрокаЗначений = СтрокаЗначений + ?(Инд = 0, "", ", ") + """" + МассивЗначенийКлассификатора[Инд] + """";
	КонецЦикла;
	
	Возврат СтрокаЗначений;
	
КонецФункции

&НаКлиенте
Процедура ПроставитьСведенияОПредставителеОрганизации() Экспорт
	РегламентированнаяОтчетностьКлиентСервер.ПроставитьСведенияОПредставителеОрганизации(ЭтаФорма, Истина);
КонецПроцедуры

&НаСервере
Функция СкопироватьУзел(Родитель, Узел)
	
	НовыйУзел = Родитель.Строки.Добавить();
	ЗаполнитьЗначенияСвойств(НовыйУзел, Узел, , "Родитель, Строки");
	Для Каждого Стр из Узел.Строки Цикл
		СкопироватьУзел(НовыйУзел, Стр);
	КонецЦикла;
	Возврат НовыйУзел;
	
КонецФункции

&НаСервере
Функция СформироватьИдФайл(ПараметрыВыгрузки)
			
	ЭтоПБОЮЛ = ПараметрыВыгрузки.Свойство("ЭтоПБОЮЛ") И ПараметрыВыгрузки.ЭтоПБОЮЛ;
	
	Возврат ПараметрыВыгрузки.ПрефиксИмениФайлаВыгрузки
			+ "_" + ?(ЗначениеЗаполнено(ПараметрыВыгрузки.КодИФНСПосредника), ПараметрыВыгрузки.КодИФНСПосредника, ПараметрыВыгрузки.КодНО)
			+ "_" + ПараметрыВыгрузки.КодНО
			+ "_" + ?(ЭтоПБОЮЛ, СокрЛП(ПараметрыВыгрузки.ИННЮЛОрг), СокрЛП(ПараметрыВыгрузки.ИННЮЛОрг) + СокрЛП(ПараметрыВыгрузки.КППОрг))
			+ "_" + Формат(ТекущаяДатаСеанса(), "ДФ=ггггММдд")
			+ "_" + Строка(Новый УникальныйИдентификатор);			
			
КонецФункции

&НаСервере
Функция СформироватьСтруктуруПараметров()
	
	Титульный = мДанныеОтчета.ПолеТабличногоДокументаТитульный;
	
	ПараметрыВыгрузки = Новый Структура;
	ПараметрыВыгрузки.Вставить("КодИФНСПосредника", ?(СтруктураРеквизитовФормы.Организация.КрупнейшийНалогоплательщик,
		СокрЛП(СтруктураРеквизитовФормы.Организация.КодНалоговогоОрганаПолучателя), ""));
	ПараметрыВыгрузки.Вставить("ИмяФайлаСхемы",             "NO_TRAND_1_054_00_05_01_01.xsd");
	ПараметрыВыгрузки.Вставить("ПрефиксИмениФайлаВыгрузки", "NO_TRAND");
	ПараметрыВыгрузки.Вставить("ИмяКлючевогоУзлаСодержательнойЧасти", "ТрНалНД");
	
	ПараметрыВыгрузки.Вставить("ВерсПрог", РегламентированнаяОтчетность.НазваниеИВерсияПрограммы());
	ПараметрыВыгрузки.Вставить("ДатаДок",  Формат(ТекущаяДатаСеанса(), "ДФ=дд.ММ.гггг"));
	ПараметрыВыгрузки.Вставить("Период",   СокрЛП(Титульный.Период));
	ПараметрыВыгрузки.Вставить("ОтчетГод", Формат(СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания, "ДФ=гггг"));
	ПараметрыВыгрузки.Вставить("КодНО",    СокрЛП(Титульный.КодИМНС));
	ПараметрыВыгрузки.Вставить("НомКорр",  Строка(СтруктураРеквизитовФормы.мСохраненныйДок.Вид));
	ПараметрыВыгрузки.Вставить("ПоМесту",  СокрЛП(Титульный.ПоМесту));
	ПараметрыВыгрузки.Вставить("ОКВЭД",    СтрЗаменить(СокрЛП(СтрЗаменить(Титульный.ОКВЭД, ".", " ")), " ", "."));
	ПараметрыВыгрузки.Вставить("Тлф",      СокрЛП(Титульный.ТелефонОрганизации));
	ПараметрыВыгрузки.Вставить("НаимОрг",  СокрЛП(Титульный.НаименованиеОрганизации));
	ПараметрыВыгрузки.Вставить("ИННЮЛОрг", СокрЛП(СтруктураРеквизитовФормы.Организация.ИНН));
	ПараметрыВыгрузки.Вставить("КППОрг",   СокрЛП(Титульный.КПП1));
	
	ПараметрыВыгрузки.Вставить("ФормРеорг",  СокрЛП(Титульный.КодФормыРеорганизации));
	ПараметрыВыгрузки.Вставить("ИННЮЛРеорг", СокрЛП(Титульный.ИННРеорганизованнойОрганизации));
	ПараметрыВыгрузки.Вставить("КППРеорг",   СокрЛП(Титульный.КППРеорганизованнойОрганизации));
	
	ФИОПодписанта = РегламентированнаяОтчетность.РазложитьФИО(Титульный.Подписант);
	
	ПараметрыВыгрузки.Вставить("ТипПодписанта",        СокрЛП(Титульный.ТипПодписанта));
	
	ПараметрыВыгрузки.Вставить("ФамилияПодписанта",  ФИОПодписанта.Фамилия);
	ПараметрыВыгрузки.Вставить("ИмяПодписанта",      ФИОПодписанта.Имя);
	ПараметрыВыгрузки.Вставить("ОтчествоПодписанта", ФИОПодписанта.Отчество);
	
	ПараметрыВыгрузки.Вставить("НаимОргПредставителя", СокрЛП(Титульный.НаименованиеОрганизацииПредставителя));
	ПараметрыВыгрузки.Вставить("НаимДокПредставителя", СокрЛП(Титульный.НаименованиеДокументаПредставителя));
	
	ПараметрыВыгрузки.Вставить("ИдФайл",   СформироватьИдФайл(ПараметрыВыгрузки));
	
	Возврат ПараметрыВыгрузки;
	
КонецФункции 

&НаСервере
Функция СформироватьСтруктуруПоказателей()
	
	мДанныеОтчета = Новый Структура;
	
	СохрСтруктура = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить();
	ПоказателиОтчета = СохрСтруктура.ПоказателиОтчета;
	Для Каждого Раздел Из ПоказателиОтчета Цикл
		мДанныеОтчета.Вставить(Раздел.Ключ, РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(Раздел.Значение));
	КонецЦикла;
	
	ТекущийРаздел = Неопределено;
	Если мСтруктураМногостраничныхРазделов.Свойство(СтруктураРеквизитовФормы.НаимТекущегоРаздела, ТекущийРаздел) Тогда
		АктивнаяСтраница = ЭтаФорма[ТекущийРаздел].НайтиСтроки(Новый Структура("АктивнаяСтраница", Истина));
		Если АктивнаяСтраница.Количество() > 0 Тогда
			АктивнаяСтраница = АктивнаяСтраница[0];
			ИндексАктивнойСтраницы = ЭтаФорма[ТекущийРаздел].Индекс(АктивнаяСтраница);
		КонецЕсли;
	КонецЕсли;

	Для Каждого ЭлементСтруктуры Из СохрСтруктура.ДанныеМногостраничныхРазделов Цикл	
		
		НайденноеЗначение = Неопределено;
		
		мСтруктураМногостраничныхРазделов.Свойство(ЭлементСтруктуры.Ключ, НайденноеЗначение);
		
		Если НЕ НайденноеЗначение = Неопределено Тогда
			
			НайденноеЗначение = ЭтаФорма[НайденноеЗначение];
			
			ЗначениеВДанныеФормы(ЭлементСтруктуры.Значение, НайденноеЗначение);
			
			Если НайденноеЗначение[0].Свойство("Данные") Тогда
				
				Для Каждого СтрокаТаблЗнач Из НайденноеЗначение Цикл
					
					Если ТипЗнч(СтрокаТаблЗнач.Данные) = Тип("СписокЗначений") Тогда
						
						СтрокаТаблЗнач.Данные.Очистить();
						СтрокаТаблЗнач.Данные.Добавить(ЭлементСтруктуры.Значение[НайденноеЗначение.Индекс(СтрокаТаблЗнач)].Данные);
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
						
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого Раздел Из мСтруктураМногостраничныхРазделов Цикл
		Для Каждого Страница Из ЭтаФорма[Раздел.Значение] Цикл
			Страница.АктивнаяСтраница = Ложь;
		КонецЦикла;
	КонецЦикла;

	ТекущийРаздел = Неопределено;
	Если мСтруктураМногостраничныхРазделов.Свойство(СтруктураРеквизитовФормы.НаимТекущегоРаздела, ТекущийРаздел) Тогда
		Если ИндексАктивнойСтраницы <> Неопределено Тогда
			ЭтаФорма[ТекущийРаздел][ИндексАктивнойСтраницы].АктивнаяСтраница = Истина;
		КонецЕсли;
	КонецЕсли;

	Для Каждого Раздел Из мСтруктураМногостраничныхРазделов Цикл
		ТаблицаЛистовРаздела = ЭтаФорма[Раздел.Значение];
		Для Каждого Лист Из ТаблицаЛистовРаздела Цикл
			Лист.Данные[0].Значение = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(Лист.Данные[0].Значение);
		КонецЦикла;
		мДанныеОтчета.Вставить(Раздел.Ключ, ЭтаФорма[Раздел.Значение]);
	КонецЦикла;
	
КонецФункции

&НаСервере
Функция УзелПуст(Узел)
	
	ПустойУзел = ?(Узел.Формат = "N", Узел.Значение = "0" ИЛИ (НЕ ЗначениеЗаполнено(Узел.Значение)), НЕ ЗначениеЗаполнено(Узел.Значение));
	Для Каждого Стр из Узел.Строки Цикл
		Если НЕ УзелПуст(Стр) Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	Возврат ПустойУзел;
	
КонецФункции

&НаСервере
Процедура ОчисткаРегламентированногоОтчетаНаСервере(ИмяСтраницы, ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста, РежимОчистки, Многостраничность, КолВоСтраницВРазделе) Экспорт
	
	УдалятьсяВсеДопЭкземпляры = Ложь;
	
	Если СтрНайти(РежимОчистки, "ОчиститьТекущийРаздел") > 0 Тогда
		
		Если (Многостраничность) И (КолВоСтраницВРазделе > 1) Тогда
			
			ОчиститьПоказателиОтчетаЗаполняемыеИзИБНаСервере(ИмяСтраницы);
			
			РегламентированнаяОтчетность.ПолучитьСведенияОПоказателяхОтчета(ЭтаФорма);
			
			УдалятьсяВсеДопЭкземпляры = Истина;
			
		Иначе
			
			ОчиститьТабличноеПолеНаСервере("ПолеТабличногоДокумента" + ИмяСтраницы);
			
		КонецЕсли;
		
		СформироватьДеревоРазделовОтчетаНаСервере();
		
		СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
		
	ИначеЕсли СтрНайти(РежимОчистки, "ОчиститьТекущийЭкземплярМногостраничногоРаздела") > 0 Тогда
		
		ОчиститьТабличноеПолеНаСервере(ИмяСтраницы);
		
	КонецЕсли;
	
	Если ИмяСтраницы = "Титульный" Тогда
		
		ЭтаФорма.НомерКорректировки                                   = 0;
		ТабличныйДокумент.Области.НомерКорректировки.Значение         = 0;
		СтруктураРеквизитовФормы.ВидДокумента                         = 0;
		
		Если Элементы.Найти("ДатаПодписи") = Неопределено Тогда
			Область = ТабличныйДокумент.Области.Найти("ДатаПодписи");
			Если НЕ Область = Неопределено Тогда
				Если ТипЗнч(Область.Значение) = Тип("Строка") Тогда
					ДатаПодписи = Лев(СтрЗаменить(Область.Значение, ".", ""), 8);
				ИначеЕсли ТипЗнч(Область.Значение) = Тип("Дата") Тогда
					Если ЗначениеЗаполнено(Область.Значение) Тогда
						ДатаПодписи = Лев(СтрЗаменить(Формат(Область.Значение, "ДФ = ""дд.ММ.гггг 'г.'"""), ".", ""), 8);
					Иначе
						ДатаПодписи = "        ";
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиентСервер.ПослеОчисткиРегламентированногоОтчета(ЭтаФорма, ИмяСтраницы, ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста);
	
КонецПроцедуры

&НаКлиенте
Процедура ОчисткаРегламентированногоОтчетаНаКлиенте(ИмяСтраницы, ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста, РежимОчистки, Многостраничность, КолВоСтраницВРазделе) Экспорт
	
	УдалятьсяВсеДопЭкземпляры = Ложь;
	
	Если СтрНайти(РежимОчистки, "ОчиститьТекущийРаздел") > 0 Тогда
		
		Если (Многостраничность) И (КолВоСтраницВРазделе > 1) Тогда

			РегламентированнаяОтчетностьКлиентСервер.ОчиститьПоказателиОтчетаЗаполняемыеИзИБ(ЭтаФорма, ИмяСтраницы);

			УдалятьсяВсеДопЭкземпляры = Истина;
			
		Иначе

			ОчиститьТабличноеПолеНаКлиенте("ПолеТабличногоДокумента" + ИмяСтраницы);

		КонецЕсли;
		
		СформироватьДеревоРазделовОтчетаНаКлиенте();
		
	ИначеЕсли СтрНайти(РежимОчистки, "ОчиститьТекущийЭкземплярМногостраничногоРаздела") > 0 Тогда
		
		ОчиститьТабличноеПолеНаКлиенте("ПолеТабличногоДокумента" + ИмяСтраницы);
		
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиентСервер.ПослеОчисткиРегламентированногоОтчета(ЭтаФорма, ИмяСтраницы, ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста);
	
КонецПроцедуры

&НаСервере
Функция ИмяСпискаВидовТранспортныхСредств()
	
	Если СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета >= '2013-01-01' Тогда
		Возврат "ВидыТранспортныхСредств2013";
	Иначе
		Возврат "ВидыТранспортныхСредств";
	КонецЕсли;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ СТЫКОВКИ С СЕРВИСОМ СДАЧИ ОТЧЕТНОСТИ ЧЕРЕЗ ПРЕДСТАВИТЕЛЯ

&НаКлиенте
Процедура ОтправитьЧерезПредставителя(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОтправитьЧерезПредставителяЗавершение", ЭтотОбъект);

	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьЧерезПредставителяЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ПриНажатииНаКнопкуОтправкиЧерезПредставителяВРегламентированномОтчете(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьАвто(Команда)
	
	Отказ = Ложь;
	
	РегламентированнаяОтчетностьКлиентПереопределяемый.ПроверитьВозможностьАвтоЗаполненияРеглОтчета(ИмяФормы, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("Команда", Команда);
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьАвтоЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередЗаполнениемРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьАвтоЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Команда = ДополнительныеПараметры.Команда;
	
	ЗаполнитьАвтоНаСервере();
	
	РегламентированнаяОтчетностьКлиент.ОбновитьДеревоРазделовВФормеОтчета(ЭтаФорма);
		
	Если НЕ Элементы.РазделыОтчета.ТекущиеДанные.ПолучитьРодителя() = Неопределено Тогда
		Элементы.РазделыОтчета.ТекущаяСтрока = Элементы.РазделыОтчета.ТекущиеДанные.ПолучитьРодителя().ПолучитьЭлементы()[0].ПолучитьИдентификатор();
	КонецЕсли;
	
	Если Элементы.Расшифровать.Видимость Тогда
		Элементы.Расшифровать.Доступность = Истина;
		Элементы.ТабличныйДокументКонтекстноеМенюРасшифровать.Доступность = Истина;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьАвтоНаСервере()
	
	СохранитьДанныеРаздела(СтруктураРеквизитовФормы.НаимТекущегоРаздела, Ложь);
	
	ЗаполнитьПустыеСтруктурыДанных();	
	
	ПараметрыОтчета = Новый Структура();
	ПараметрыОтчета.Вставить("Организация", 			 СтруктураРеквизитовФормы.Организация);
	ПараметрыОтчета.Вставить("мДатаНачалаПериодаОтчета", СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
	ПараметрыОтчета.Вставить("мДатаКонцаПериодаОтчета",  СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	ПараметрыОтчета.Вставить("КодНалоговогоОргана",      СтруктураДанныхТитульный.КодИМНС);
	ПараметрыОтчета.Вставить("КПП",                  	 СтруктураДанныхТитульный.КПП1);
	ПараметрыОтчета.Вставить("ДатаПодписи",              ДатаПодписи);
			                                    		
	Контейнер = Новый Структура();
	Контейнер.Вставить("Раздел1", ТаблицаСтраницыРазделаРаздел1);
	Контейнер.Вставить("Раздел2", ТаблицаСтраницыРазделаРаздел2);
			
	РегламентированнаяОтчетностьПереопределяемый.ЗаполнитьОтчет(ИмяОтчета(ЭтаФорма.ИмяФормы), ИмяФормыОтчета(ЭтаФорма.ИмяФормы), ПараметрыОтчета, Контейнер);
			
	ВывестиМакетВТаблДокНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела, 1);
	
	РасчетНаСервере();
	
	СформироватьРаздел1();
	
	РасчетНаСервере();
	
	ИзменитьФорматНевведенныхПоказателей(ЭтаФорма);
	
	Модифицированность = Истина;
	
КонецПроцедуры 

&НаКлиенте
Процедура Расшифровать(Команда)
	
	ПараметрыОтчета = Новый Структура();
	ПараметрыОтчета.Вставить("Организация", 			СтруктураРеквизитовФормы.Организация);
	ПараметрыОтчета.Вставить("ДатаНачалаПериодаОтчета", СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
	ПараметрыОтчета.Вставить("ДатаКонцаПериодаОтчета",  СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	
	ИДИменПоказателей = Новый Массив();
	ИДИменПоказателей.Добавить(Элементы.ТабличныйДокумент.ТекущаяОбласть.Имя);
	
	РегламентированнаяОтчетностьКлиент.ОткрытьРасшифровкуОтчета(ИмяОтчета(ЭтаФорма.ИмяФормы), ИмяФормыОтчета(ЭтаФорма.ИмяФормы), ИДИменПоказателей, ПараметрыОтчета)
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВИнтернете(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьВИнтернетеЗавершение", ЭтотОбъект);

	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
		
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВИнтернетеЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ПроверитьВИнтернете(ЭтаФорма);
	
КонецПроцедуры

#Область ПанельОтправкиВКонтролирующиеОрганы

&НаКлиенте
Процедура ОбновитьОтправку(Команда)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОбновитьОтправкуИзПанелиОтправки(ЭтаФорма, "ФНС");
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаПротоколНажатие(Элемент)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьПротоколИзПанелиОтправки(ЭтаФорма, "ФНС");
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьНеотправленноеИзвещение(Команда)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОтправитьНеотправленноеИзвещениеИзПанелиОтправки(ЭтаФорма, "ФНС");
КонецПроцедуры

&НаКлиенте
Процедура ЭтапыОтправкиНажатие(Элемент)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьСостояниеОтправкиИзПанелиОтправки(ЭтаФорма, "ФНС");
КонецПроцедуры

&НаКлиенте
Процедура КритическиеОшибкиОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьКритическиеОшибкиИзПанелиОтправки(ЭтаФорма, "ФНС");
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаНаименованиеЭтапаНажатие(Элемент)
	
	ПараметрыИзменения = Новый Структура;
	ПараметрыИзменения.Вставить("Форма", ЭтаФорма);
	ПараметрыИзменения.Вставить("Организация", СтруктураРеквизитовФормы.Организация);
	ПараметрыИзменения.Вставить("КонтролирующийОрган",
		ПредопределенноеЗначение("Перечисление.ТипыКонтролирующихОрганов.ФНС"));
	
	РегламентированнаяОтчетностьКлиент.ИзменитьСтатусОтправки(ПараметрыИзменения);
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ОтправитьВКонтролирующийОрган(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверкаВозможностиВыгрузкиРегламентированногоОтчетаПередОтправкой", ЭтотОбъект);
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередОтправкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаВозможностиВыгрузкиРегламентированногоОтчетаПередОтправкой(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОтправитьВКонтролирующийОрганЗавершение", ЭтотОбъект);
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьВКонтролирующийОрганЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ПриНажатииНаКнопкуОтправкиВКонтролирующийОрган(ЭтаФорма, "ФНС");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Форма", ЭтаФорма);
	Оповещение = Новый ОписаниеОповещения("ПослеСохраненияФормыЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	СохранитьНаКлиенте(, Оповещение);
КонецПроцедуры

&НаКлиенте
Процедура ПослеСохраненияФормыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	ДополнительныеПараметры.Форма.Закрыть();
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОткрытьПрисоединенныеФайлы(Команда)
	
	РегламентированнаяОтчетностьКлиент.СохранитьОтчетИОткрытьФормуПрисоединенныеФайлы(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийПриИзменении(Элемент)
	Модифицированность = Истина;
КонецПроцедуры

&НаСервере
Функция ОбъектОтчета(ЭтаФормаИмя) Экспорт
	Если мОбъектОтчета = Неопределено Тогда
		мОбъектОтчета = РегламентированнаяОтчетностьВызовСервера.ОбъектОтчета(ЭтаФормаИмя);
	КонецЕсли;
	Возврат мОбъектОтчета;
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИмяОтчета(ЭтаФормаИмя)
	Форма_Имя = СтрЗаменить(ЭтаФормаИмя, "Внешний", "");
	Возврат Сред(Лев(Форма_Имя, СтрНайти(Форма_Имя, ".Форма.") - 1), 7);
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИмяФормыОтчета(ЭтаФормаИмя)
	Возврат Сред(ЭтаФормаИмя, СтрНайти(ЭтаФормаИмя, ".Форма.") + 7);
КонецФункции