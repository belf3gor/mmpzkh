&НаКлиенте
Перем ОбработкаКС Экспорт;

&НаСервере
Перем СписокРасшифровкиПоказателей;

&НаСервере
Перем СписокРасшифровкиформулы;

&НаСервере
Перем мОбъектОтчета;

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	// Обход ошибки платформы Параметр сеанса отсутствует или удален.
	ТабличныйДокумент.Очистить();
	
	СформироватьСтруктуруРеквизитовФормы();
	
	СтруктураРеквизитовФормы.СписокПечатаемыхЛистов = Новый СписокЗначений;
	
	СтруктураРеквизитовФормы.мПоляПоискаПоказателяВТСП = "КодПоказателяПоСоставу, КодПоказателяПоФорме";
	
	СтруктураРеквизитовФормы.мСоставПоказателей = "СоставПоказателей2019Кв1";
	
	СтруктураРеквизитовФормы.мОписаниеТиповЧислоЕ = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(17, 2));
	
	СтруктураДанныхТитульный = Новый Структура;
	
	ИнициализацияМногостраничныхРазделов();
	
	мСтруктураМногостраничныхРазделов = Новый Структура;
	мСтруктураМногостраничныхРазделов.Вставить("Раздел1", "ТаблицаСтраницыРазделаРаздел1");
	мСтруктураМногостраничныхРазделов.Вставить("Раздел2", "ТаблицаСтраницыРазделаРаздел2");
	
	ЦветЗаполняетсяТолькоВручную     = Новый Цвет(255, 255, 225);
	ЦветЗаполняетсяАвтоКорректир     = Новый Цвет(255, 240, 200);
	ЦветЗаполняетсяАвтоБезКорректир  = Новый Цвет(230, 240, 220);
	СтруктураРеквизитовФормы.ЦветЗаполняетсяАвтоАрифметика = Новый Цвет(192, 220, 192);
	ЦветЗаполняетсяОднозначноВручную = Новый Цвет(255, 255, 192);
	ЦветЗаполняетсяАвтоматически     = Новый Цвет(255, 255, 255);
	
	мСтруктураЦветовРаскраски = Новый Структура;
	мСтруктураЦветовРаскраски.Вставить("_1", ЦветЗаполняетсяТолькоВручную);
	мСтруктураЦветовРаскраски.Вставить("_2", ЦветЗаполняетсяАвтоКорректир);
	мСтруктураЦветовРаскраски.Вставить("_3", ЦветЗаполняетсяАвтоБезКорректир);
	мСтруктураЦветовРаскраски.Вставить("_4", СтруктураРеквизитовФормы.ЦветЗаполняетсяАвтоАрифметика);
	мСтруктураЦветовРаскраски.Вставить("_0", ЦветЗаполняетсяОднозначноВручную);
	мСтруктураЦветовРаскраски.Вставить("_5", ЦветЗаполняетсяАвтоматически);
	
	мСтруктураВариантыЗаполнения       = Новый Структура;
	мСтруктураВариантыЗаполненияЭталон = Новый Структура;
	
	СтруктураРеквизитовФормы.мВерсияФормы = "01/01/2019";
	
	СтруктураРеквизитовФормы.мКодОтчета = 1152004;
	
	СтруктураРеквизитовФормы.мПечатныеформы = Новый СписокЗначений;
	СтруктураРеквизитовФормы.мПечатаемыеРазделы = Новый СписокЗначений;
	
	ОбъектОтчет = ОбъектОтчета(ЭтаФорма.ИмяФормы);
	
	ИмяРаздела = "Титульный";
	
	ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(
	ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + ИмяРаздела));
	
	СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяРаздела;
	
	СтруктураРеквизитовФормы.мВыбраннаяФорма          = Параметры.мВыбраннаяФорма;
	СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета  = Параметры.мДатаКонцаПериодаОтчета;
	СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета = Параметры.мДатаНачалаПериодаОтчета;
	СтруктураРеквизитовФормы.мПериодичность           = Параметры.мПериодичность;
	СтруктураРеквизитовФормы.мСкопированаФорма        = Параметры.мСкопированаФорма;
	СтруктураРеквизитовФормы.мСохраненныйДок          = Параметры.мСохраненныйДок;
	СтруктураРеквизитовФормы.Организация              = Параметры.Организация;
	Если ТипЗнч(Параметры.НалоговыйОрган) = Тип("СправочникСсылка.РегистрацииВНалоговомОргане") Тогда
		Если НЕ Параметры.НалоговыйОрган.Пустая() Тогда
			СтруктураРеквизитовФормы.РегистрацияВНалОргане = Параметры.НалоговыйОрган;
		КонецЕсли;
	КонецЕсли;
	СтруктураРеквизитовФормы.ДоступенМеханизмПечатиРеглОтчетностиСДвухмернымШтрихкодомPDF417
	= Параметры.ДоступенМеханизмПечатиРеглОтчетностиСДвухмернымШтрихкодомPDF417;
	СтруктураРеквизитовФормы.СформироватьФормуОтчетаАвтоматически = Параметры.СформироватьФормуОтчетаАвтоматически;
	
	ДатаПодписи = ТекущаяДатаСеанса();
	
	ПорядкиОкругленияОтчетности = Новый Структура;
	ПорядкиОкругленияОтчетности.Вставить("ПеречислениеПорядкиОкругленияОтчетностиОкр1",
	Перечисления.ПорядкиОкругленияОтчетности.Окр1);
	ПорядкиОкругленияОтчетности.Вставить("ПеречислениеПорядкиОкругленияОтчетностиОкр1000",
	Перечисления.ПорядкиОкругленияОтчетности.Окр1000);
	ПорядкиОкругленияОтчетности.Вставить("ПеречислениеПорядкиОкругленияОтчетностиОкр1000000",
	Перечисления.ПорядкиОкругленияОтчетности.Окр1000000);
	
	Инициализация(Параметры.БезОткрытияФормы);
	
КонецПроцедуры

&НаСервере
Процедура СформироватьСтруктуруРеквизитовФормы()
	
	СтруктураРеквизитовФормы = Новый Структура;
	СтруктураРеквизитовФормы.Вставить("Организация");
	СтруктураРеквизитовФормы.Вставить("ЕдиницаИзмерения");
	СтруктураРеквизитовФормы.Вставить("ТочностьЕдиницыИзмерения");
	СтруктураРеквизитовФормы.Вставить("ВидДокумента");
	СтруктураРеквизитовФормы.Вставить("ИП");
	СтруктураРеквизитовФормы.Вставить("мАвтоВыборКодов");
	СтруктураРеквизитовФормы.Вставить("мБезОткрытияФормы");
	СтруктураРеквизитовФормы.Вставить("мВариант");
	СтруктураРеквизитовФормы.Вставить("мВерсияФормы");
	СтруктураРеквизитовФормы.Вставить("мВыбраннаяФорма");
	СтруктураРеквизитовФормы.Вставить("мДатаКонцаПериодаОтчета");
	СтруктураРеквизитовФормы.Вставить("мДатаНачалаПериодаОтчета");
	СтруктураРеквизитовФормы.Вставить("мДокументПредставителя");
	СтруктураРеквизитовФормы.Вставить("мЗаписываетсяНовыйДокумент");
	СтруктураРеквизитовФормы.Вставить("мЗаписьЗапрещена");
	СтруктураРеквизитовФормы.Вставить("мИмяПредставителя");
	СтруктураРеквизитовФормы.Вставить("мКодОтчета");
	СтруктураРеквизитовФормы.Вставить("мНазваниеПредставителя");
	СтруктураРеквизитовФормы.Вставить("мОписаниеТиповЧислоЕ");
	СтруктураРеквизитовФормы.Вставить("мОтчествоПредставителя");
	СтруктураРеквизитовФормы.Вставить("мПериодичность");
	СтруктураРеквизитовФормы.Вставить("мПечатаемыеРазделы");
	СтруктураРеквизитовФормы.Вставить("мПечатныеФормы");
	СтруктураРеквизитовФормы.Вставить("мПечатьБезШтрихкодаРазрешена");
	СтруктураРеквизитовФормы.Вставить("мПредставительФизЛицо");
	СтруктураРеквизитовФормы.Вставить("мРежимПечати");
	СтруктураРеквизитовФормы.Вставить("мСкопированаФорма");
	СтруктураРеквизитовФормы.Вставить("мСоставПоказателей");
	СтруктураРеквизитовФормы.Вставить("мСохраненныйДок");
	СтруктураРеквизитовФормы.Вставить("мСтрокаФормата");
	СтруктураРеквизитовФормы.Вставить("мСчетчикСтраниц");
	СтруктураРеквизитовФормы.Вставить("мФамилияПредставителя");
	СтруктураРеквизитовФормы.Вставить("ФлажокОтклАвтоРасчет", Ложь);
	СтруктураРеквизитовФормы.Вставить("мФамилияПредставителя");
	СтруктураРеквизитовФормы.Вставить("мВПрограммеИзмененаОрганизация");
	СтруктураРеквизитовФормы.Вставить("мДелитель");
	СтруктураРеквизитовФормы.Вставить("мДокументВосстановлен");
	СтруктураРеквизитовФормы.Вставить("мИсключитьЗапускРасчета");
	СтруктураРеквизитовФормы.Вставить("мПоляПоискаПоказателяВТСП");
	СтруктураРеквизитовФормы.Вставить("мСтараяВерсияФормы");
	СтруктураРеквизитовФормы.Вставить("СтрПериодОтчета");
	СтруктураРеквизитовФормы.Вставить("НаимОрганизации");
	СтруктураРеквизитовФормы.Вставить("НачальноеЗначениеНаимОрганизации", "");
	СтруктураРеквизитовФормы.Вставить("ВыводитьСтраницуВТаблДокНаСервере");
    СтруктураРеквизитовФормы.Вставить("НаимТекущегоРаздела");
	СтруктураРеквизитовФормы.Вставить("НомерТекущейСтраницы");
	СтруктураРеквизитовФормы.Вставить("СписокПечатаемыхЛистов");
	СтруктураРеквизитовФормы.Вставить("ОтображатьКнопкуЗаполнить", Ложь);
	СтруктураРеквизитовФормы.Вставить("ОтображатьКнопкуРасшифровать", Ложь);
	СтруктураРеквизитовФормы.Вставить("ТекущаяСтрокаРазделовОтчета");
	СтруктураРеквизитовФормы.Вставить("ЦветЗаполняетсяАвтоАрифметика");
	СтруктураРеквизитовФормы.Вставить("ДоступенМеханизмПечатиРеглОтчетностиСДвухмернымШтрихкодомPDF417");
	СтруктураРеквизитовФормы.Вставить("СформироватьФормуОтчетаАвтоматически");
	СтруктураРеквизитовФормы.Вставить("ТекстДляЗаголовочнойЧасти");
	СтруктураРеквизитовФормы.Вставить("мПроверятьСоотношенияПриПечатиИВыгрузки");
	СтруктураРеквизитовФормы.Вставить("РегистрацияВНалОргане");
	СтруктураРеквизитовФормы.Вставить("ОКВЭД",  "");
	СтруктураРеквизитовФормы.Вставить("ОКВЭД2", "");
	
КонецПроцедуры

&НаСервере
Процедура ИнициализацияМногостраничныхРазделов()
	
	СтрПерваяСтраница = ЭтаФорма.ТаблицаСтраницыРазделаРаздел1.Добавить();
	СтрПерваяСтраница.Представление               = "Новая страница";
	СтрПерваяСтраница.АктивнаяСтраница            = Истина;
	СтрПерваяСтраница.АвтоматическоеПредставление = Истина;
	
	СтрПерваяСтраница = ЭтаФорма.ТаблицаСтраницыРазделаРаздел2.Добавить();
	СтрПерваяСтраница.Представление               = "Новая страница";
	СтрПерваяСтраница.АктивнаяСтраница            = Истина;
	СтрПерваяСтраница.АвтоматическоеПредставление = Истина;
	
КонецПроцедуры

&НаСервере
Процедура Инициализация(БезОткрытияФормы = Ложь) Экспорт
	Перем ИсходноеКоличествоСтрокГруппы;
	
	СтруктураРеквизитовФормы.мБезОткрытияФормы = БезОткрытияФормы;
	
	ЗаполнитьНачальныеНастройки();
	
	ФормироватьСтруктуруСтраницОтчета();
	
	ФормироватьСтруктуруСвойствСтраниц();
	
	СформироватьДеревоРазделовОтчетаНаСервере();
	
	СформироватьСпискиВыбора();
	
	ЗаполнитьСтруктуруЗависимыхЯчеекДляАвторасчета();
		
	СтруктураРеквизитовФормы.мСтараяВерсияФормы = СтруктураРеквизитовФормы.мВерсияФормы;
	
	ИнициализироватьМаскиПолейВводаТабличныхДокументов(СтруктураРеквизитовФормы.НаимТекущегоРаздела);

	СтруктураРеквизитовФормы.ВидДокумента = 0;
	ТабличныйДокумент.Области.НомерКорректировки.Значение = 0;
	НомерКорректировки = 0;
	
	СтруктураРеквизитовФормы.мАвтоВыборКодов = Ложь;
	
	РегламентированнаяОтчетность.ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставления(ЭтаФорма);
	
	Если СтруктураРеквизитовФормы.СформироватьФормуОтчетаАвтоматически Тогда
		СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация = Истина;
	Иначе
		СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация = Ложь;
	КонецЕсли;
	
	СтруктураРеквизитовФормы.мДокументВосстановлен = Ложь;
	СтруктураРеквизитовФормы.мРежимПечати = Ложь;
	СтруктураРеквизитовФормы.мИсключитьЗапускРасчета = Ложь;	
	
	Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
		
		Если СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено Тогда
			ВосстановитьСохраненныеДанные();
		Иначе
			
			СтруктураРеквизитовФормы.ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1;
			СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = 0;
			
			КопироватьДанныеФормы(мДеревоСтраницОтчета, мДеревоВыбранныхСтраниц);
			
			ТабличныйДокумент.Области.Период.Значение = "34";
			ТабличныйДокумент.Области.ПоМесту.Значение = ?(ОрганизацияКрупнейшийНалогоплательщик(), "213", "260");
			
			ЗаполнитьПустыеСтруктурыДанных();
			
			ТаблицаСтраницыРазделаРаздел1[0].Данные[0].Значение.П000010001003 = "18210604011021000110";
			
			Если НЕ СтруктураРеквизитовФормы.мБезОткрытияФормы Тогда
				СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки = Ложь;
			КонецЕсли;
		КонецЕсли;
		
		Модифицированность = Истина;
		
	Иначе
		
		ВосстановитьСохраненныеДанные();
		
		Если ЗначениеЗаполнено(СтруктураРеквизитовФормы.мСкопированаФорма) Тогда
			СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено;
			Модифицированность = Истина;
		КонецЕсли;
		
		Если НЕ БезОткрытияФормы
			И НЕ СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
			ЗаблокироватьДанныеДляРедактирования(
			СтруктураРеквизитовФормы.мСохраненныйДок, , ЭтаФорма.УникальныйИдентификатор);
		КонецЕсли;
		
	КонецЕсли;
	
	ЗаполнитьДатуПодписи(ЭтаФорма);
	
	СтруктураРеквизитовФормы.НачальноеЗначениеНаимОрганизации = НачальноеЗначениеНаименованияОрганизации();
	
	РегламентированнаяОтчетность.ПолучитьСведенияОПоказателяхОтчета(ЭтаФорма);
	
	Если НЕ СтруктураРеквизитовФормы.ОтображатьКнопкуЗаполнить Тогда
		Элементы.Заполнить.Видимость = Ложь;
	КонецЕсли;
	
	Если НЕ СтруктураРеквизитовФормы.ОтображатьКнопкуРасшифровать Тогда
		Элементы.Расшифровать.Видимость = Ложь;
		Элементы.ТабличныйДокументКонтекстноеМенюРасшифровать.Видимость = Ложь;
	КонецЕсли;
	
	ПоказатьПериод();
	
	ИзменитьФорматНевведенныхПоказателей(ЭтаФорма);
	
	Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено
	 Или СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация
	 ИЛИ СтруктураРеквизитовФормы.СформироватьФормуОтчетаАвтоматически Тогда
	 
		ЗаполнитьСведенияОбОрганизацииНаСервере();
		
	Иначе
		
		УправлениеЛистами();
		РегламентированнаяОтчетность.ПолучитьЗначениеОКВЭД(ДатаПодписи, СтруктураРеквизитовФормы);
		
	КонецЕсли;
	
	Если НЕ БезОткрытияФормы Тогда
		РегламентированнаяОтчетностьКлиентСервер.ПоказатьКнопкиПечати(ЭтаФорма);
	КонецЕсли;
	
	УстановитьФорматВыводаНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
	СтруктураРеквизитовФормы.НаимОрганизации = СтруктураРеквизитовФормы.Организация.Наименование;
	СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
	
	УстановитьДоступностьОбластей(ЭтаФорма, СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
	РегламентированнаяОтчетность.ДобавитьКнопкуПрисоединенныеФайлы(ЭтаФорма);
	
	РегламентированнаяОтчетностьКлиентСервер.ПриИнициализацииФормыРегламентированногоОтчета(ЭтаФорма);
	
	Если СтруктураРеквизитовФормы.СформироватьФормуОтчетаАвтоматически Тогда
		ЗаполнитьАвтоНаСервере();
		Если Элементы.Расшифровать.Видимость Тогда
			Элементы.Расшифровать.Доступность = Истина;
			Элементы.ТабличныйДокументКонтекстноеМенюРасшифровать.Доступность = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ОрганизацияКрупнейшийНалогоплательщик()
	
	Возврат СтруктураРеквизитовФормы.Организация.Метаданные().Реквизиты.Найти(
	"КрупнейшийНалогоплательщик") <> Неопределено И ТипЗнч(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
	СтруктураРеквизитовФормы.Организация, "КрупнейшийНалогоплательщик")) = Тип("Булево")
	И СтруктураРеквизитовФормы.Организация.КрупнейшийНалогоплательщик;
	
КонецФункции

&НаСервере
Функция НачальноеЗначениеНаименованияОрганизации()
	
	СтрокаСведений = "НаимЮЛПол";
	
	СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(
	СтруктураРеквизитовФормы.Организация, ДатаПодписи, СтрокаСведений);
	
	НаимОрганизации = "";
	СведенияОбОрганизации.Свойство("НаимЮлПол", НаимОрганизации);
	
	Возврат СокрЛП(НаимОрганизации);
	
КонецФункции

&НаСервере
Процедура СформироватьСпискиВыбора()
	
	МакетСоставаПоказателей = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет("СпискиВыбора2019Кв1");
	
	КоллекцияСписковВыбора = Новый Соответствие;
	Для Каждого Область Из МакетСоставаПоказателей.Области Цикл
		Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Строки Тогда
			ВерхОбласти = Область.Верх;
			НизОбласти = Область.Низ;
			ТаблСписка = Новый ТаблицаЗначений;
			ТаблСписка.Колонки.Добавить(
			"Код",,, МакетСоставаПоказателей.Область(ВерхОбласти, 1, ВерхОбласти, 1).ШиринаКолонки);
			ТаблСписка.Колонки.Добавить(
			"Название",,, МакетСоставаПоказателей.Область(ВерхОбласти, 2, ВерхОбласти, 2).ШиринаКолонки);
			Для НомСтр = ВерхОбласти По НизОбласти Цикл
				КодПоказателя = СокрП(МакетСоставаПоказателей.Область(НомСтр, 1).Текст);
				Если КодПоказателя <> "###" Тогда
					НовСтрока = ТаблСписка.Добавить();
					НовСтрока.Код = КодПоказателя;
					НовСтрока.Название = СокрП(МакетСоставаПоказателей.Область(НомСтр, 2).Текст);
				КонецЕсли;
			КонецЦикла;
			КоллекцияСписковВыбора.Вставить(Область.Имя, ТаблСписка);
		КонецЕсли;
	КонецЦикла;
	
	СвойстваПоказателей.Очистить();
	
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "Период", 2, ,
	"Выбор налогового периода", КоллекцияСписковВыбора["НалоговыеПериоды"]);
	
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "ПоМесту", 3, ,
	"Выбор места представления", КоллекцияСписковВыбора["МестаПредставления"]);
	
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "КодФормыРеорганизации", 1, ,
	"Выбор кода формы реорганизации (ликвидации)", КоллекцияСписковВыбора["КодыФормыРеорганизации"]);
	
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000010001003", 20, ,
	"Выбор КБК", КоллекцияСписковВыбора["КБК"]);
	
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000020003003", 5, ,
	"Выбор вида транспортного средства", КоллекцияСписковВыбора["ВидыТранспортныхСредств"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000020010003", 3, ,
	"Выбор единицы измерения налоговой базы", КоллекцияСписковВыбора["КодыОКЕИ"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000020011003", 1, ,
	"Выбор экологического класса", КоллекцияСписковВыбора["КодыЭкологическихКлассов"]);
	
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000020018003", 3, ,
	"Выбор значения коэффициента Кп", КоллекцияСписковВыбора["ЗначенияКоэффициентаКп"]);
	
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000020022003_КодЛьготы", 5, ,
	"Выбор кода льготы", КоллекцияСписковВыбора["КодыЛьготОсвобожденияОтНалогообложения"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000020024003_КодЛьготы", 5, ,
	"Выбор кода льготы", КоллекцияСписковВыбора["КодыЛьготУменьшенияСуммыНалога"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000020026003_КодЛьготы", 5, ,
	"Выбор кода льготы", КоллекцияСписковВыбора["КодыЛьготСниженияНалоговойСтавки"]);
	
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000020028003", 5, ,
	"Выбор кода вычета", КоллекцияСписковВыбора["КодыНалоговыхВычетов"]);
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьМаскиПолейВводаТабличныхДокументов(ИмяТекРаздела)
	
	МаскаВводаОКТМО = "99999999999";
	
	Если ИмяТекРаздела = "Титульный" Тогда
		ТабличныйДокумент.Области.ИННРеорганизованнойОрганизации.Маска = "9999999999";
		ТабличныйДокумент.Области.КППРеорганизованнойОрганизации.Маска = "999999999";
		ТабличныйДокумент.Области.Прил.Маска = "999";
	ИначеЕсли ИмяТекРаздела = "Раздел1" Тогда
		ТабличныйДокумент.Области.П000010001003.Маска = "99999999999999999999";
		ТабличныйДокумент.Области.П000010002003_1.Маска = МаскаВводаОКТМО;
		ТабличныйДокумент.Области.П000010002003_2.Маска = МаскаВводаОКТМО;
		ТабличныйДокумент.Области.П000010002003_3.Маска = МаскаВводаОКТМО;
	ИначеЕсли ИмяТекРаздела = "Раздел2" Тогда
		ТабличныйДокумент.Области.П000020002003.Маска = МаскаВводаОКТМО;
		ТабличныйДокумент.Области.П000020010003.Маска = "999";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьОбластей(Форма, ИмяСтраницыПанели = "")
	
	ЦветНедоступнойОбласти = Форма.мСтруктураЦветовРаскраски["_5"];
	ЦветОбластиРучногоВвода = Форма.мСтруктураЦветовРаскраски["_0"];
	ЦветАвторасчитываемойОбласти = Форма.мСтруктураЦветовРаскраски["_4"];
	
	Если ИмяСтраницыПанели = "Титульный" Тогда
		
		ОпределяющаяОбласть = Форма.ТабличныйДокумент.Области.КодФормыРеорганизации;
		ОбрабатываемаяОбласть1 = Форма.ТабличныйДокумент.Области.ИННРеорганизованнойОрганизации;
		ОбрабатываемаяОбласть2 = Форма.ТабличныйДокумент.Области.КППРеорганизованнойОрганизации;
		Если ПустаяСтрока(ОпределяющаяОбласть.Значение)
			ИЛИ ОпределяющаяОбласть.Значение = "0" Тогда
			ЗапретитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть1);
			ЗапретитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть2);
		Иначе
			РазрешитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть1);
			РазрешитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть2);
		КонецЕсли;
		
		ОпределяющаяОбласть = Форма.ТабличныйДокумент.Области.ПоМесту;
		ОбрабатываемаяОбласть = Форма.ТабличныйДокумент.Области.НаименованиеОрганизации;
		ЗначениеПоМесту = СокрЛП(ОпределяющаяОбласть.Значение);
		Если ЗначениеПоМесту = "260" ИЛИ ЗначениеПоМесту = "216" Тогда
			РазрешитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть);
		Иначе
			ЗапретитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть);
			ОбрабатываемаяОбласть.Значение = Форма.СтруктураРеквизитовФормы.НачальноеЗначениеНаимОрганизации;
		КонецЕсли;
		
	ИначеЕсли ИмяСтраницыПанели = "Раздел2" Тогда
		
		ОпределяющаяОбласть = Форма.ТабличныйДокумент.Области.П000020022003_КодЛьготы;
		ОбрабатываемаяОбласть = Форма.ТабличныйДокумент.Области.П000020022003_Основание;
		ОбрабатываемаяОбласть2 = Форма.ТабличныйДокумент.Области.П000020023003;
		Если ПустаяСтрока(ОпределяющаяОбласть.Значение)Тогда
			ЗапретитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть);
			ЗапретитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть2);
		ИначеЕсли ОпределяющаяОбласть.Значение = "30200" Тогда
			ЗапретитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть);
			ОбрабатываемаяОбласть2.Защита = НЕ Форма.СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет;
			ОбрабатываемаяОбласть2.ЦветФона = ?(Форма.СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет,
			ЦветОбластиРучногоВвода, ЦветАвторасчитываемойОбласти);
		Иначе
			РазрешитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть);
			УстановитьОснованиеЛьготыПоУмолчанию(ОбрабатываемаяОбласть);
			ОбрабатываемаяОбласть2.Защита = НЕ Форма.СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет;
			ОбрабатываемаяОбласть2.ЦветФона = ?(Форма.СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет,
			ЦветОбластиРучногоВвода, ЦветАвторасчитываемойОбласти);
		КонецЕсли;
		
		ОпределяющаяОбласть = Форма.ТабличныйДокумент.Области.П000020024003_КодЛьготы;
		
		ОбрабатываемаяОбласть1 = Форма.ТабличныйДокумент.Области.П000020024003_Основание;
		ОбрабатываемаяОбласть2 = Форма.ТабличныйДокумент.Области.П000020024003_Процент;
		ОбрабатываемаяОбласть3 = Форма.ТабличныйДокумент.Области.П000020025003;
		
		Если ПустаяСтрока(ОпределяющаяОбласть.Значение) Тогда
			ЗапретитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть1);
			ЗапретитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть2);
			ЗапретитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть3);
		Иначе
			РазрешитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть1);
			РазрешитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть2);
			
			Если Форма.СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Тогда
				ОбрабатываемаяОбласть3.Защита   = Ложь;
				ОбрабатываемаяОбласть3.ЦветФона = ЦветОбластиРучногоВвода;
			Иначе
				ОбрабатываемаяОбласть3.Защита   = Истина;
				ОбрабатываемаяОбласть3.ЦветФона = ЦветАвторасчитываемойОбласти;
			КонецЕсли;
			
			УстановитьОснованиеЛьготыПоУмолчанию(ОбрабатываемаяОбласть1);
		КонецЕсли;
		
		ОпределяющаяОбласть = Форма.ТабличныйДокумент.Области.П000020026003_КодЛьготы;
		
		ОбрабатываемаяОбласть1 = Форма.ТабличныйДокумент.Области.П000020026003_Основание;
		ОбрабатываемаяОбласть2 = Форма.ТабличныйДокумент.Области.П000020026003_Ставка;
		ОбрабатываемаяОбласть3 = Форма.ТабличныйДокумент.Области.П000020027003;
		
		Если ПустаяСтрока(ОпределяющаяОбласть.Значение) Тогда
			ЗапретитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть1);
			ЗапретитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть2);
			ЗапретитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть3);
			УстановитьПредставлениеНуля(ОбрабатываемаяОбласть2, "-");
		Иначе
			РазрешитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть1);
			РазрешитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть2);
			
			Если Форма.СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Тогда
				ОбрабатываемаяОбласть3.Защита   = Ложь;
				ОбрабатываемаяОбласть3.ЦветФона = ЦветОбластиРучногоВвода;
			Иначе
				ОбрабатываемаяОбласть3.Защита   = Истина;
				ОбрабатываемаяОбласть3.ЦветФона = ЦветАвторасчитываемойОбласти;
			КонецЕсли;
			
			УстановитьОснованиеЛьготыПоУмолчанию(ОбрабатываемаяОбласть1);
			УстановитьПредставлениеНуля(ОбрабатываемаяОбласть2, "0");
		КонецЕсли;
		
		ОпределяющаяОбласть = Форма.ТабличныйДокумент.Области.П000020028003;
		ОбрабатываемаяОбласть = Форма.ТабличныйДокумент.Области.П000020029003;
		Если ПустаяСтрока(ОпределяющаяОбласть.Значение)Тогда
			ЗапретитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть);
		Иначе
			РазрешитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьПредставлениеНуля(Область, Знач Представление)
	
	Если СокрЛП(Представление) = "0" Тогда
		Представление = "";
	КонецЕсли;
	
	ИсходнаяСтрокаФормата = Область.Формат;
	МассивЭлементовФорматирования
	= СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИсходнаяСтрокаФормата, ";");
	
	Для Инд = 0 По МассивЭлементовФорматирования.ВГраница() Цикл
		ЭлементФорматаБезКрайнихПробелов = СокрЛП(МассивЭлементовФорматирования[Инд]);
		Если СтрНайти(ЭлементФорматаБезКрайнихПробелов, "ЧН") = 1 Тогда
			МассивЭлементовФорматирования[Инд] = "ЧН=" + Представление;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	СобраннаяСтрокаФормата = "";
	Для Каждого ЭлементФормата Из МассивЭлементовФорматирования Цикл
		ВставлятьРазделитель = НЕ ПустаяСтрока(СобраннаяСтрокаФормата);
		СобраннаяСтрокаФормата = СобраннаяСтрокаФормата + ?(ВставлятьРазделитель, ";", "")+ ЭлементФормата;
	КонецЦикла;
	
	Область.Формат = СобраннаяСтрокаФормата;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗапретитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть)
	
	ЦветНедоступнойОбласти = Форма.мСтруктураЦветовРаскраски["_5"];
	
	ОбрабатываемаяОбласть.Защита   = Истина;
	ОбрабатываемаяОбласть.ЦветФона = ЦветНедоступнойОбласти;
	
	ТипЗначенияОбласти = ТипЗнч(ОбрабатываемаяОбласть.Значение);
	Если ТипЗначенияОбласти = Тип("Число") Тогда
		ОбрабатываемаяОбласть.Значение = 0;
	ИначеЕсли ТипЗначенияОбласти = Тип("Строка") Тогда
		ОбрабатываемаяОбласть.Значение = "";
	Иначе
		ОбрабатываемаяОбласть.Значение = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РазрешитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть)
	
	Если Форма.ТаблицаВариантыЗаполненияРаздел2[0].ТаблицаВариантовЗаполнения.НайтиСтроки(
		Новый Структура("КодПоказателя", ОбрабатываемаяОбласть.Имя)).Количество() > 0 Тогда
		ЦветОбластиРучногоВвода = Форма.мСтруктураЦветовРаскраски["_3"];
	Иначе
		ЦветОбластиРучногоВвода = Форма.мСтруктураЦветовРаскраски["_0"];
	КонецЕсли;
	
	ОбрабатываемаяОбласть.Защита   = Ложь;
	ОбрабатываемаяОбласть.ЦветФона = ЦветОбластиРучногоВвода;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОснованиеЛьготыПоУмолчанию(ОбластьОснованияЛьготы)
	
	Если ПустаяСтрока(ОбластьОснованияЛьготы.Значение) Тогда
		ОбластьОснованияЛьготы.Значение = "000000000000";
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтруктуруЗависимыхЯчеекДляАвторасчета()
	
	СтруктураЗависимыхЯчеекДляАвторасчета = Новый Структура;
	
	// Раздел 1.
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000010002103_1", "П000010002003_1");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000010002103_2", "П000010002003_2");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000010002103_3", "П000010002003_3");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000010003003_1", "П000010002103_1;П000010002303_1;П000010002503_1;П000010002703_1;П000010002003_1");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000010003003_2", "П000010002103_2;П000010002303_2;П000010002503_2;П000010002703_2;П000010002003_2");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000010003003_3", "П000010002103_3;П000010002303_3;П000010002503_3;П000010002703_3;П000010002003_3");
	
	// Раздел 2.
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000020014003", "П000020007003;П000020008003");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000020016003", "П000020007003;П000020008003;П000020014003");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000020019003", "П000020007003;П000020008003;П000020009003;П000020014003;П000020015003_Числ;П000020015003_Знам;П000020016003;П000020017003;П000020018003");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000020021003", "П000020020003");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000020023003", "П000020009003;П000020015003_Числ;П000020015003_Знам;П000020017003;П000020018003;П000020020003;П000020021003;П000020022003_КодЛьготы");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000020025003", "П000020009003;П000020015003_Числ;П000020015003_Знам;П000020017003;П000020018003;П000020020003;П000020021003;П000020024003_Процент");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000020027003", "П000020009003;П000020015003_Числ;П000020015003_Знам;П000020017003;П000020018003;П000020020003;П000020021003;П000020026003_Ставка;П000020026003_КодЛьготы");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000020030003", "П000020007003;П000020008003;П000020009003;П000020014003;П000020015003_Числ;П000020015003_Знам;П000020016003;П000020017003;П000020018003;П000020020003;П000020021003;П000020022003_КодЛьготы;П000020024003_Процент;П000020026003_Ставка;П000020026003_КодЛьготы;П000020028003;П000020029003");
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНачальныеНастройки()
	
	МакетСоставаПоказателей = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(СтруктураРеквизитовФормы.мСоставПоказателей);
	
	Для Инд = 0 По МакетСоставаПоказателей.Области.Количество() - 1 Цикл
		
		ТекОбласть  = МакетСоставаПоказателей.Области[Инд];
		ИмяСтраницы = ТекОбласть.Имя;
		
		ЭтаФорма["ТаблицаВариантыЗаполнения" + ИмяСтраницы].Добавить();
		
		Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
			КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
			ИмяПоказателя = КодПоказателя;
			
			Если КодПоказателя = "===" Тогда
				Прервать;
			КонецЕсли;
			
			Если Лев(КодПоказателя, 2) = "//" Тогда
				Продолжить;
			КонецЕсли;
			
			КодПоказателяПоФорме = СокрЛП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
			ПризнМногострочность = СокрЛП(МакетСоставаПоказателей.Область(Ном, 3).Текст);
			ТипДанныхРеквизита   = СокрЛП(МакетСоставаПоказателей.Область(Ном, 4).Текст);
			стрКолСтрокИсходный  = СокрЛП(МакетСоставаПоказателей.Область(Ном, 5).Текст);
			стрВариантЗаполнения = РегламентированнаяОтчетность.ПолучитьВариантЗаполненияПоказателяРегОтчета(
			МакетСоставаПоказателей, Ном);
			КодПоказателяПоСтруктуре = СокрЛП(МакетСоставаПоказателей.Область(Ном, 9).Текст);
			
			чКолСтрокИсходный    = ? (ПустаяСтрока(стрКолСтрокИсходный),  0, Число(стрКолСтрокИсходный));
			чВариантЗаполнения   = ? (ПустаяСтрока(стрВариантЗаполнения), 0, Число(стрВариантЗаполнения));
			
			НоваяСтрока = мТаблицаСоставПоказателей.Добавить();
			НоваяСтрока.ИмяПоляТаблДокумента   = ИмяСтраницы;
			НоваяСтрока.КодПоказателяПоСоставу = КодПоказателя;
			НоваяСтрока.КодПоказателяПоФорме   = КодПоказателяПоФорме;
			НоваяСтрока.ПризнМногострочности   = ПризнМногострочность;
			НоваяСтрока.ТипДанныхПоказателя    = ТипДанныхРеквизита;
			НоваяСтрока.КодПоказателяПоСтруктуре = КодПоказателяпоСтруктуре;
			
			Если чВариантЗаполнения <> 0 Тогда
				НоваяСтрока = ЭтаФорма["ТаблицаВариантыЗаполнения" + ИмяСтраницы][0].ТаблицаВариантовЗаполнения.Добавить();
				НоваяСтрока.КодПоказателя      = ? (Не ПустаяСтрока(КодПоказателяПоФорме), КодПоказателяПоФорме, КодПоказателя);
				НоваяСтрока.ВариантЗаполнения  = чВариантЗаполнения;
				НоваяСтрока.КодПоказателяПоСтруктуре  = КодПоказателяПоСтруктуре;
			КонецЕсли;
			
		КонецЦикла;
		
		Если ЭтаФорма["ТаблицаВариантыЗаполнения" + ИмяСтраницы][0].ТаблицаВариантовЗаполнения.Количество() > 0 Тогда
			
			мСтруктураВариантыЗаполнения.Вставить(ИмяСтраницы, ИмяСтраницы);
			мСтруктураВариантыЗаполненияЭталон.Вставить(ИмяСтраницы, ИмяСтраницы);
			
		Конецесли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ФормироватьСтруктуруСтраницОтчета() 
	
	мДеревоСтраницОтчета.ПолучитьЭлементы().Очистить();
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Титульный";
	СтрокаУровня1.Представление            = "Титульный лист";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел1";
	СтрокаУровня1.Представление            = "Раздел 1";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел2";
	СтрокаУровня1.Представление            = "Раздел 2";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	
КонецПроцедуры

&НаСервере
Процедура ФормироватьСтруктуруСвойствСтраниц() Экспорт
	
	мСвойстваРазделовДекларации.ПолучитьЭлементы().Очистить();
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	
	СтрокаУровня1.ИмяСтраницы                          = "Титульный";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Ложь;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "Раздел1";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Истина;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "ОКАТОРаздел1";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "Раздел2";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Истина;	
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "ОКАТОРаздел2";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьСохраненныеДанные()
	Перем ДанныеМногострочныхРазделов;
	Перем ДанныеМногостраничныхРазделов;
	Перем ДанныеВариановАвтоЗаполнения;
	Перем ПоказателиОтчета;
	Перем ВерсияФормы;
	Перем ТаблицаМногостраничногоДокумента;
	
	Если СтруктураРеквизитовФормы.Организация <> СтруктураРеквизитовФормы.мСохраненныйДок.Организация
		И СтруктураРеквизитовФормы.Организация <> РегламентированнаяОтчетностьКлиентСервер.ПустоеЗначениеТипа(
		"СправочникСсылка.Организации") И СтруктураРеквизитовФормы.Организация <> Неопределено Тогда
		СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация = Истина;
	Иначе
		СтруктураРеквизитовФормы.Организация = СтруктураРеквизитовФормы.мСохраненныйДок.Организация;
	КонецЕсли;
	
	ДатаПодписи = СтруктураРеквизитовФормы.мСохраненныйДок.ДатаПодписи;
	СтруктураРеквизитовФормы.ЕдиницаИзмерения = СтруктураРеквизитовФормы.мСохраненныйДок.ЕдиницаИзмерения;
	СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = СтруктураРеквизитовФормы.мСохраненныйДок.ТочностьЕдиницыИзмерения;
	Комментарий = СтруктураРеквизитовФормы.мСохраненныйДок.Комментарий;
	
	СписокСохранения = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить();
	
	ДеревоНастройкиСтраниц = СтруктураРеквизитовФормы.мСохраненныйДок.ДеревоНастройкиСтраниц.Получить();
	
	Если СписокСохранения.Свойство("ДанныеВариантовАвтоЗаполнения", ДанныеВариановАвтоЗаполнения) Тогда
		
		Если НЕ ДанныеВариановАвтоЗаполнения = Неопределено Тогда
			
			мСтруктураВариантыЗаполнения.Очистить();
			
			Для Каждого ЭлементСтруктуры Из ДанныеВариановАвтоЗаполнения Цикл
				
				мСтруктураВариантыЗаполнения.Вставить(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Ключ);
				
				ЭтаФорма["ТаблицаВариантыЗаполнения" + ЭлементСтруктуры.Ключ].Очистить();
				
				Для Каждого ЭлементМассива Из ЭлементСтруктуры.Значение Цикл
					
					ТаблВарЗаполнения
					= ЭтаФорма["ТаблицаВариантыЗаполнения" + ЭлементСтруктуры.Ключ].Добавить().ТаблицаВариантовЗаполнения;
					
					ЗначениеВДанныеФормы(ЭлементМассива, ТаблВарЗаполнения);
					
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	СписокСохранения.Свойство("ПоказателиОтчета", ПоказателиОтчета);
	
	Если СписокСохранения.Свойство("ВерсияФормы", ВерсияФормы) Тогда
		Если ВерсияФормы <> СтруктураРеквизитовФормы.мВерсияФормы Тогда
			СтруктураРеквизитовФормы.мСтараяВерсияФормы = ВерсияФормы;
			ОбновитьПользовательскиеНастройки();
		КонецЕсли;
	КонецЕсли;
	ЗначениеВРеквизитФормы(ДеревоНастройкиСтраниц.Скопировать(), "мДеревоСтраницОтчета");
	
	Если СписокСохранения.Свойство("ДанныеМногостраничныхРазделов", ДанныеМногостраничныхРазделов) Тогда
		
		Для Каждого ЭлементСтруктуры Из ДанныеМногостраничныхРазделов Цикл
			
			НайденноеЗначение = Неопределено;
			
			мСтруктураМногостраничныхРазделов.Свойство(ЭлементСтруктуры.Ключ, НайденноеЗначение);
			
			Если НЕ НайденноеЗначение = Неопределено Тогда
				
				НайденноеЗначение = ЭтаФорма[НайденноеЗначение];
				
				ЗначениеВДанныеФормы(ЭлементСтруктуры.Значение, НайденноеЗначение);
				
				Если НайденноеЗначение[0].Свойство("Данные") Тогда
					
					Для Каждого СтрокаТаблЗнач Из НайденноеЗначение Цикл
						
						Если ТипЗнч(СтрокаТаблЗнач.Данные) = Тип("СписокЗначений") Тогда
							
							СтрокаТаблЗнач.Данные.Очистить();
							СтрокаТаблЗнач.Данные.Добавить(ЭлементСтруктуры.Значение[НайденноеЗначение.Индекс(СтрокаТаблЗнач)].Данные);
							
						КонецЕсли;
						
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Для Каждого Раздел Из мСтруктураМногостраничныхРазделов Цикл
		Для Каждого Страница Из ЭтаФорма[Раздел.Значение] Цикл
			Страница.АктивнаяСтраница = Ложь;
		КонецЦикла;
	КонецЦикла;
	
	СписокСохранения.Свойство("ФлПодсчетСтраниц", СтруктураРеквизитовФормы.мСчетчикСтраниц);
	
	СписокСохранения.Свойство("ФлОтклВыборЗначений", СтруктураРеквизитовФормы.мАвтоВыборКодов);
	СтруктураРеквизитовФормы.мАвтоВыборКодов = ?(СтруктураРеквизитовФормы.мАвтоВыборКодов = Неопределено,
	Ложь, СтруктураРеквизитовФормы.мАвтоВыборКодов);
	
	СписокСохранения.Свойство("ФлПроверятьСоотношенияПриПечатиИВыгрузки",
	СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки);
	СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки
	= ?(СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки = Неопределено,
	Ложь, СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки);
	
	Префикс = "ПолеТабличногоДокумента";
	
	Для Каждого Раздел Из мСвойстваРазделовДекларации.ПолучитьЭлементы() Цикл	
		Если НЕ Раздел.МногостраничностьВРазделе Тогда
			ЭтаФорма["СтруктураДанных" + Раздел.ИмяСтраницы] = ПоказателиОтчета[Префикс + Раздел.ИмяСтраницы];
		КонецЕсли;
	КонецЦикла;
	
	ВосстановитьСведенияОбОрганизацииИзТитульногоЛистаСтарогоОбразца(ПоказателиОтчета);
	
	ИмяТекРаздела = "Титульный";
	
	Для Каждого ЭлСтруктуры Из ЭтаФорма["СтруктураДанных" + ИмяТекРаздела] Цикл
		Попытка
			ТабличныйДокумент.Области[ЭлСтруктуры.Ключ].Значение = ЭлСтруктуры.Значение;
		Исключение
		КонецПопытки;
	КонецЦикла;
	
	СписокСохранения.Свойство("Автозаполнение", СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);
	
	Если НЕ СписокСохранения.Свойство(
		"ПечатьБезШтрихкодаРазрешена", СтруктураРеквизитовФормы.мПечатьБезШтрихкодаРазрешена) Тогда
		СтруктураРеквизитовФормы.мПечатьБезШтрихкодаРазрешена = Ложь;
	КонецЕсли;
	
	РегламентированнаяОтчетность.ОперацииПриВосстановленииРегламентированногоОтчета(ЭтаФорма);
	
	КопироватьДанныеФормы(мДеревоСтраницОтчета, мДеревоВыбранныхСтраниц);
	
	УстановитьФорматВыводаНаСервере(ЭтаФорма);
	
	Модифицированность = Ложь;
	СтруктураРеквизитовФормы.мДокументВосстановлен = Истина;
	СформироватьДеревоРазделовОтчетаНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьСведенияОбОрганизацииИзТитульногоЛистаСтарогоОбразца(ПоказателиОтчета)
	
	ПоказателиТаблПоле = ПоказателиОтчета["ПолеТабличногоДокументаТитульный"];
	
	Для Каждого Показатель Из ПоказателиТаблПоле Цикл
		
		ИмяПоказателя = Показатель.Ключ;
		
		Если ИмяПоказателя = "ИНН1_1" Тогда
			СтруктураДанныхТитульный.Вставить("ИНН1");
			Для Ном = 1 По 12 Цикл
				СтруктураДанныхТитульный.ИНН1 = СокрЛП(СтруктураДанныхТитульный.ИНН1) + ПоказателиТаблПоле["ИНН1_" + Ном];
				СтруктураДанныхТитульный.Удалить("ИНН1_" + Ном);
			КонецЦикла;
			Если Лев(СтруктураДанныхТитульный.ИНН1, 2) = "00" Тогда
				СтруктураДанныхТитульный.ИНН1 = Сред(СтруктураДанныхТитульный.ИНН1, 3);
			КонецЕсли;
			Если Прав(СтруктураДанныхТитульный.ИНН1, 2) = "--" Тогда
				СтруктураДанныхТитульный.ИНН1 = Лев(СтруктураДанныхТитульный.ИНН1,
				СтрНайти(СтруктураДанныхТитульный.ИНН1, "--") - 1);
			КонецЕсли;
		ИначеЕсли ИмяПоказателя = "КПП1_1" Тогда
			СтруктураДанныхТитульный.Вставить("КПП1");
			Для Ном = 1 По 9 Цикл
				СтруктураДанныхТитульный.КПП1 = СокрЛП(СтруктураДанныхТитульный.КПП1) + ПоказателиТаблПоле["КПП1_" + Ном];
				СтруктураДанныхТитульный.Удалить("КПП1_" + Ном);
			КонецЦикла;
		ИначеЕсли ИмяПоказателя = "НомерКорректировки1" Тогда
			СтруктураДанныхТитульный.Вставить("НомерКорректировки");
			Для Ном = 1 По 3 Цикл
				СтруктураДанныхТитульный.НомерКорректировки = СокрЛП(СтруктураДанныхТитульный.НомерКорректировки)
				+ ?(ПоказателиТаблПоле["НомерКорректировки" + Ном] = "-", "", ПоказателиТаблПоле["НомерКорректировки" + Ном]);
				СтруктураДанныхТитульный.Удалить("НомерКорректировки" + Ном);
			КонецЦикла;
		ИначеЕсли ИмяПоказателя = "Период1" Тогда
			СтруктураДанныхТитульный.Вставить("Период");
			Для Ном = 1 По 2 Цикл
				СтруктураДанныхТитульный.Период = СокрЛП(СтруктураДанныхТитульный.Период) + ПоказателиТаблПоле["Период" + Ном];
				СтруктураДанныхТитульный.Удалить("Период" + Ном);
			КонецЦикла;
		ИначеЕсли ИмяПоказателя = "ОтчетГод1" Тогда
			СтруктураДанныхТитульный.Вставить("ОтчетГод");
			Для Ном = 1 По 4 Цикл
				СтруктураДанныхТитульный.ОтчетГод = СокрЛП(СтруктураДанныхТитульный.ОтчетГод)
				+ ПоказателиТаблПоле["ОтчетГод" + Ном];
				СтруктураДанныхТитульный.Удалить("ОтчетГод" + Ном);
			КонецЦикла;
		ИначеЕсли ИмяПоказателя = "КодИМНС1" Тогда
			СтруктураДанныхТитульный.Вставить("КодИМНС");
			Для Ном = 1 По 4 Цикл
				СтруктураДанныхТитульный.КодИМНС = СокрЛП(СтруктураДанныхТитульный.КодИМНС) + ПоказателиТаблПоле["КодИМНС" + Ном];
				СтруктураДанныхТитульный.Удалить("КодИМНС" + Ном);
			КонецЦикла;
		ИначеЕсли ИмяПоказателя = "ПоМесту1" Тогда
			СтруктураДанныхТитульный.Вставить("ПоМесту");
			Для Ном = 1 По 3 Цикл
				СтруктураДанныхТитульный.ПоМесту = СокрЛП(СтруктураДанныхТитульный.ПоМесту) + ПоказателиТаблПоле["ПоМесту" + Ном];
				СтруктураДанныхТитульный.Удалить("ПоМесту" + Ном);
			КонецЦикла;
		ИначеЕсли ИмяПоказателя = "Прил1" Тогда
			СтруктураДанныхТитульный.Вставить("Прил");
			Для Ном = 1 По 3 Цикл
				СтруктураДанныхТитульный.Прил = СокрЛП(СтруктураДанныхТитульный.Прил) + ПоказателиТаблПоле["Прил" + Ном];
				СтруктураДанныхТитульный.Удалить("Прил" + Ном);
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
	
	ЗаполнитьДатуПодписи(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнениеЗначенийВКвадратикахНаКлиенте(Знач ИмяСтраницы) Экспорт
	
	ЗаполнениеЗначенийВКвадратиках(ЭтаФорма, ИмяСтраницы);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнениеЗначенийВКвадратикахНаСервере(Знач ИмяСтраницы) Экспорт
	
	ЗаполнениеЗначенийВКвадратиках(ЭтаФорма, ИмяСтраницы);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнениеЗначенийВКвадратиках(Форма, Знач ИмяСтраницы)
	
	// Процедура "заглушка" для сохранения работающих механизмов.
	Возврат;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьФорматВывода(Форма, НаимРаздела) Экспорт
	Перем СтруктураГруппы;
	Перем РазмерностьПрописьюТекст;

	Если Форма.СтруктураРеквизитовФормы.ЕдиницаИзмерения
		= Форма.ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1 Тогда
		Форма.СтруктураРеквизитовФормы.мДелитель = 1;
		РазмерностьПрописьюТекст = "в рублях";
		Форма.СтруктураРеквизитовФормы.мСтрокаФормата = "ЧЦ = 14; ЧДЦ = "
		+ Форма.СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧС = 0";
		СтрокаФорматаНольЦифрой
		= "ЧЦ=17; ЧДЦ=" + Форма.СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=; ЧС=0";
		
	ИначеЕсли Форма.СтруктураРеквизитовФормы.ЕдиницаИзмерения
		= Форма.ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1000 Тогда
		Форма.СтруктураРеквизитовФормы.мДелитель = 1000;
		РазмерностьПрописьюТекст = "в тыс. рублей";
		Форма.СтруктураРеквизитовФормы.мСтрокаФормата = "ЧЦ = 14; ЧДЦ = "
		+ Форма.СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧС = 3";
		СтрокаФорматаНольЦифрой
		= "ЧЦ=17; ЧДЦ=" + Форма.СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=; ЧС=3";
		
	ИначеЕсли Форма.СтруктураРеквизитовФормы.ЕдиницаИзмерения
		= Форма.ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1000000 Тогда
		Форма.СтруктураРеквизитовФормы.мДелитель = 1000000;
		РазмерностьПрописьюТекст = "в млн. рублей";
		Форма.СтруктураРеквизитовФормы.мСтрокаФормата = "ЧЦ = 14; ЧДЦ = "
		+ Форма.СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧС = 6";
		СтрокаФорматаНольЦифрой
		= "ЧЦ=17; ЧДЦ=" + Форма.СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=; ЧС=6";
		
	КонецЕсли;
		
	Для Каждого СтрПоказатели Из Форма.мТаблицаСоставПоказателей Цикл
		
		Если НЕ НаимРаздела = СтрПоказатели.ИмяПоляТаблДокумента Тогда
			Продолжить;
		КонецЕсли;
		
		КодПоказателя        = СокрП(СтрПоказатели.КодПоказателяПоСоставу);
		ПризнМногострочность = СокрП(СтрПоказатели.ПризнМногострочности);
		КодПоказателяПоСтруктуре = СокрП(СтрПоказатели.КодПоказателяПоСтруктуре);
		
		Если КодПоказателя = "===" Тогда
			Прервать;
		КонецЕсли;
		
		Если (Лев(КодПоказателя, 2) = "//") ИЛИ (КодПоказателя = "###") Тогда
			Продолжить;
		КонецЕсли;
		
		КодПоказателяВФорме = СокрП(СтрПоказатели.КодПоказателяПоФорме);
		
		ИмяПоказателя = КодПоказателя;
		Если Не ПустаяСтрока(КодПоказателяВФорме) Тогда
			ИмяПоказателя = КодПоказателяВФорме;
		КонецЕсли;
		
		ТипДанныхПоказателя = СокрП(СтрПоказатели.ТипДанныхПоказателя);
		
		Если (ТипДанныхПоказателя = "Е") И (ПустаяСтрока(КодПоказателяПоСтруктуре)) Тогда
			
			ТекТабличноеПоле = Форма.ТабличныйДокумент;
			
			Если ПризнМногострочность <> "/" Тогда
				
				ФорматируемаяОбласть = ТекТабличноеПоле.Области[ИмяПоказателя];
				ДопустимыйЗнакПоказателя = ФорматируемаяОбласть.ТипЗначения.КвалификаторыЧисла.ДопустимыйЗнак;
				ЧислоЕЗнак = Форма.СтруктураРеквизитовФормы.мОписаниеТиповЧислоЕ;
				
				Если ДопустимыйЗнакПоказателя = ДопустимыйЗнак.Неотрицательный Тогда
					ЧислоЕЗнак = Новый ОписаниеТипов("Число",
					Новый КвалификаторыЧисла(ЧислоЕЗнак.КвалификаторыЧисла.Разрядность,
					ЧислоЕЗнак.КвалификаторыЧисла.РазрядностьДробнойЧасти, ДопустимыйЗнакПоказателя));
				КонецЕсли;
				
				ФорматируемаяОбласть.ТипЗначения = ЧислоЕЗнак;
				ФорматируемаяОбласть.Формат = Форма.СтруктураРеквизитовФормы.мСтрокаФормата;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПоказатьПериод()
	
	НомерМесяца   = Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ=М");
	Если НомерМесяца = "12" Тогда
		НомерМесяца = "0";
	КонецЕсли;
	
	НомерКвартала = Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ=к");
	НомерГода     = Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ=гггг");
	
	ТабличныйДокумент.Области.ОтчетГод.Значение = НомерГода;
	СтруктураРеквизитовФормы.СтрПериодОтчета = ПредставлениеПериода(
	НачалоДня(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета),
	КонецДня(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета), "ФП = Истина");
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСведенияОбОрганизацииНаСервере(ВПрограммеИзмененаДатаПодписи = Ложь)
	
	ЗаполнитьСведенияОбОрганизации(ЭтаФорма, ВПрограммеИзмененаДатаПодписи);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьСведенияОбОрганизации(Форма, ВПрограммеИзмененаДатаПодписи = Ложь)
	
	Если НЕ ВПрограммеИзмененаДатаПодписи Тогда
	
		СтрокаСведений = "ИННЮЛ, КППЮЛ, НаимЮЛПол, КодНО, ТелОрганизации";
		
		СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(
		Форма.СтруктураРеквизитовФормы.Организация, Форма.ДатаПодписи, СтрокаСведений);
		
		Форма.ТабличныйДокумент.Области.ИНН1.Значение = СведенияОбОрганизации.ИННЮЛ;
		
		Если ЗначениеЗаполнено(Форма.СтруктураРеквизитовФормы.РегистрацияВНалОргане) Тогда
			Форма.ТабличныйДокумент.Области.КПП1.Значение = СокрЛП(Форма.СтруктураРеквизитовФормы.РегистрацияВНалОргане.КПП);
			Форма.ТабличныйДокумент.Области.КодИМНС.Значение = СокрЛП(Форма.СтруктураРеквизитовФормы.РегистрацияВНалОргане.Код);
		Иначе
			Форма.ТабличныйДокумент.Области.КПП1.Значение = СведенияОбОрганизации.КППЮЛ;
			Форма.ТабличныйДокумент.Области.КодИМНС.Значение = СведенияОбОрганизации.КодНО;
		КонецЕсли;
		
		ОбластьНаименованияОрганизации = Форма.ТабличныйДокумент.Области.НаименованиеОрганизации;
		ОбластьНаименованияОрганизации.Значение = СокрЛП(СведенияОбОрганизации.НаимЮлПол);
		
		Форма.СтруктураРеквизитовФормы.НачальноеЗначениеНаимОрганизации = ОбластьНаименованияОрганизации.Значение;
		
		ОбластьТелефонаОрганизации = Форма.ТабличныйДокумент.Области.ТелефонОрганизации;
		ОбластьТелефонаОрганизации.Значение = СокрЛП(СведенияОбОрганизации.ТелОрганизации);
		
	КонецЕсли;
	
	РегламентированнаяОтчетность.ПолучитьЗначениеОКВЭД(Форма.ДатаПодписи, Форма.СтруктураРеквизитовФормы);
	РегламентированнаяОтчетностьКлиентСервер.УстановитьЗначениеОКВЭД(Форма.ДатаПодписи,
																	 Форма.СтруктураРеквизитовФормы,
																	 Форма.ТабличныйДокумент.Области.ОКВЭД.Значение);
	ЗаполнитьСведенияОПодписантах(Форма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьСведенияОПодписантах(Форма)
	
	ТипПодписанта = "1";
	Подписант = "";
	НаименованиеОрганизацииПредставителя = "";
	НаименованиеДокументаПредставителя = "";
	
	КодНО = Форма.ТабличныйДокумент.Области.КодИМНС.Значение;
	КПП   = Форма.ТабличныйДокумент.Области.КПП1.Значение;
	
	СведенияОПредставителе = РегламентированнаяОтчетностьВызовСервера.ПолучитьПоКодамСведенияОПредставителе(
	Форма.СтруктураРеквизитовФормы.Организация, КодНО, КПП);
	
	ТипПодписанта = СведенияОПредставителе.ТипПодписанта;
	
	Если ТипПодписанта = "1" Тогда
		// Представителя нет.
		Если Не РегламентированнаяОтчетностьВызовСервера.ЭтоЮридическоеЛицо(Форма.СтруктураРеквизитовФормы.Организация) Тогда
			// Поле подписанта остается пустым.
		Иначе
			// Подписант - руководитель.
			СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(
			Форма.СтруктураРеквизитовФормы.Организация, Форма.ДатаПодписи, "ФИОРук, ФИО");
			Подписант = СокрЛП(?(ЗначениеЗаполнено(СведенияОбОрганизации.ФИОРук),
			СведенияОбОрганизации.ФИОРук, СведенияОбОрганизации.ФИО));
		КонецЕсли;
	Иначе
		// Есть представитель, подписант - он.
		Подписант                            = СведенияОПредставителе.ФИОПредставителя;
		НаименованиеОрганизацииПредставителя = СведенияОПредставителе.НаименованиеОрганизацииПредставителя;
		НаименованиеДокументаПредставителя   = СведенияОПредставителе.ДокументПредставителя;
	КонецЕсли;
	
	Форма.ТабличныйДокумент.Области.ТипПодписанта.Значение                        = ТипПодписанта;
	Форма.ТабличныйДокумент.Области.Подписант.Значение                            = Подписант;
	Форма.ТабличныйДокумент.Области.НаименованиеОрганизацииПредставителя.Значение = НаименованиеОрганизацииПредставителя;
	Форма.ТабличныйДокумент.Области.НаименованиеДокументаПредставителя.Значение   = НаименованиеДокументаПредставителя;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура УправлениеЛистамиНаСервере(ТипНП = Неопределено) Экспорт
	
	УправлениеЛистами(ТипНП);
	
КонецПроцедуры

&НаКлиенте
Процедура УправлениеЛистамиНаКлиенте(ТипНП = Неопределено) Экспорт
	
	УправлениеЛистами(ТипНП);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеЛистами(ТипНП = Неопределено)
	
	// Процедура "заглушка" для сохранения работающих механизмов.
	Возврат;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЦветФонаЯчейкиНаКлиенте(ИмяЯчейки = Неопределено, ВариантЗаполнения = Неопределено, ИмяТекущейСтраницыПанели = "") Экспорт
	
	УстановитьЦветФонаЯчейки(ЭтаФорма, ИмяЯчейки, ВариантЗаполнения, ИмяТекущейСтраницыПанели);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЦветФонаЯчейкиНаСервере(ИмяЯчейки = Неопределено, ВариантЗаполнения = Неопределено, ИмяТекущейСтраницыПанели = "") Экспорт
	
	УстановитьЦветФонаЯчейки(ЭтаФорма, ИмяЯчейки, ВариантЗаполнения, ИмяТекущейСтраницыПанели);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЦветФонаЯчейки(Форма, ИмяЯчейки = Неопределено, ВариантЗаполнения = Неопределено, ИмяТекущейСтраницыПанели = "") Экспорт
	
	Перем ЦветФона;
	Перем Комментарий;
	
	Если Форма.СтруктураРеквизитовФормы.мБезОткрытияФормы Или Форма.СтруктураРеквизитовФормы.мРежимПечати Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ИмяЯчейки = Неопределено Тогда
		
		#Если НаКлиенте Тогда
			ИмяСтраницыПанели = РегламентированнаяОтчетностьКлиент.ОпределитьСтраницуПанелиПоКодуПоказателяНаКлиенте(
			Форма, ИмяЯчейки);
		#Иначе
			ИмяСтраницыПанели = РегламентированнаяОтчетностьВызовСервера.ОпределитьСтраницуПанелиПоКодуПоказателяНаСервере(
			Форма, ИмяЯчейки);
		#КонецЕсли
		
		Если ИмяСтраницыПанели = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ИмяПоляТаблДокумента = "ТабличныйДокумент";
		
		Ключ = "_" + ВариантЗаполнения;
		Форма.мСтруктураЦветовРаскраски.Свойство(Ключ, ЦветФона);
		
		Если ВариантЗаполнения = 4 Тогда	
			Форма[ИмяПоляТаблДокумента].Области[ИмяЯчейки].Защита = Истина;
		Иначе
			Форма[ИмяПоляТаблДокумента].Области[ИмяЯчейки].Защита = Ложь;
		КонецЕсли;
		
		Форма[ИмяПоляТаблДокумента].Области[ИмяЯчейки].ЦветФона = ЦветФона;
		
	Иначе
		
		ТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения(Форма, ИмяТекущейСтраницыПанели);
		Если ТаблицаВариантыЗаполнения = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Для Каждого Строка Из ТаблицаВариантыЗаполнения Цикл
			ИмяПоказателя     = Строка.КодПоказателя;
			ВариантЗаполнения = Строка.ВариантЗаполнения;
			Комментарий       = Строка.Комментарий;
			КодПоказателяПоСтруктуре = Строка.КодПоказателяПоСтруктуре;
			
			Многострочность = Ложь;
			КолвоСтрокВМногострочнойЧасти = 1;
			
			Для Инд = 1 по КолвоСтрокВМногострочнойЧасти Цикл
				
				ТекОбластьЯчеек = Форма.ТабличныйДокумент.Области[ИмяПоказателя];
				Если (Не ПустаяСтрока(Комментарий)) ИЛИ (Не ПустаяСтрока(ТекОбластьЯчеек.Примечание.Текст)) Тогда
					ТекОбластьЯчеек.Примечание.Текст = Комментарий;
				КонецЕсли;
				
				Ключ = "_" + ВариантЗаполнения;
				Форма.мСтруктураЦветовРаскраски.Свойство(Ключ, ЦветФона);
				
				Если ВариантЗаполнения = 4 Тогда	
					Форма.ТабличныйДокумент.Области[ИмяПоказателя].Защита = Истина;
				Иначе
					Форма.ТабличныйДокумент.Области[ИмяПоказателя].Защита = Ложь;
				КонецЕсли;
				
				Форма.ТабличныйДокумент.Области[ИмяПоказателя].ЦветФона = ЦветФона;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьТаблицуВариантовЗаполнения(Форма, ИмяСтраницыПанели, ПолучитьЭталонную = Ложь)
	
	#Если НаКлиенте Тогда
		Возврат РегламентированнаяОтчетностьКлиент.ПолучитьТаблицуВариантовЗаполненияНаКлиенте(
		Форма, ИмяСтраницыПанели, ПолучитьЭталонную);
	#Иначе
		Возврат РегламентированнаяОтчетностьВызовСервера.ПолучитьТаблицуВариантовЗаполненияНаСервере(
		Форма, ИмяСтраницыПанели, ПолучитьЭталонную);
	#КонецЕсли
	
КонецФункции

&НаСервере
Функция ОпределитьТабличноеПолеПоИдМногострочногоРазделаНаСервере(ИдГруппы) Экспорт
	
	ИдГрупп = Новый Структура;
	
	Возврат ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИдГруппы, ИдГрупп);
	
КонецФункции 

&НаКлиенте
Функция ОпределитьТабличноеПолеПоИдМногострочногоРазделаНаКлиенте(ИдГруппы) Экспорт
	
	ИдГрупп = Новый Структура;
	
	Возврат ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИдГруппы, ИдГрупп);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИдГруппы, ИдГрупп)
	
	Перем ТекТабличноеПоле;
	
	Возврат ТекТабличноеПоле;
	
КонецФункции

&НаСервере
Процедура ОбновитьПользовательскиеНастройки()
	
	Сообщение = Новый СообщениеПользователю;
	
	Сообщение.Текст = НСтр("ru='Изменилась версия формы отчета. Выполняется обновление пользовательских настроек.'");
	
	Сообщение.Сообщить();
	
	ЕстьИзмененияВариантыЗаполнения = ОбновитьВариантыЗаполнения();
	
	ЕстьИзмененияНастройкаСтраниц = ОбновитьНастройкиСтраниц();
	
	Если ЕстьИзмененияВариантыЗаполнения ИЛИ ЕстьИзмененияНастройкаСтраниц Тогда
		
		Модифицированность = Истина;
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Обновление пользовательских настроек успешно завершено.'");
		Сообщение.Сообщить();
		
	Иначе
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Изменения в структуре пользовательских настроек не обнаружены.'");
		Сообщение.Сообщить();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиРазделВТабличныйДокументНаСервере(ИмяГруппы, СтруктураГруппы) Экспорт
	
	ВывестиРазделВТабличныйДокумент(ЭтаФорма, ИмяГруппы, СтруктураГруппы);
	
КонецПроцедуры

&НаКлиенте
Процедура ВывестиРазделВТабличныйДокументНаКлиенте(ИмяГруппы, СтруктураГруппы) Экспорт
	
	ВывестиРазделВТабличныйДокумент(ЭтаФорма, ИмяГруппы, СтруктураГруппы);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ВывестиРазделВТабличныйДокумент(Форма, ИмяГруппы, СтруктураГруппы)
	
	Перем ИсходноеКоличествоСтрокГруппы;
	
	Форма.мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);
	
	ТекущееКоличествоСтрокГруппы = СтруктураГруппы.Количество();
	
	#Если НаКлиенте Тогда
		ТекТабличноеПолеИмя = Форма.ОпределитьТабличноеПолеПоИдМногострочногоРазделаНаКлиенте(ИмяГруппы);
	#Иначе
		ТекТабличноеПолеИмя = Форма.ОпределитьТабличноеПолеПоИдМногострочногоРазделаНаСервере(ИмяГруппы);
	#КонецЕсли
	
	ТекТабличноеПоле = Форма[ТекТабличноеПолеИмя];
	
	Если ТекущееКоличествоСтрокГруппы > ИсходноеКоличествоСтрокГруппы Тогда
		
		Форма.ВставитьОбластьВТабличныйДокументНаСервере(ИсходноеКоличествоСтрокГруппы, ТекущееКоличествоСтрокГруппы,
		ИмяГруппы, ТекТабличноеПоле, ТекТабличноеПолеИмя, СтруктураГруппы)
		
	КонецЕсли;
	
	Для Каждого СтрокаТаблицы Из СтруктураГруппы Цикл
		
		Для НомерГрафы = 1 По Форма.мСтруктураКолвоКолонокРазделов[ИмяГруппы] Цикл
			
			КолонкаТаблицыИмя = ИмяГруппы + Формат(НомерГрафы, "ЧЦ=2; ЧВН=");
			
			НомерСтрокиВТаблице      = СтруктураГруппы.Индекс(СтрокаТаблицы);
			НомерСтрокиВФормеТаблицы = НомерСтрокиВТаблице + 1;
			
			Если СтруктураГруппы[0].Свойство(КолонкаТаблицыИмя) Тогда
				
				ИмяЯчейки            = КолонкаТаблицыИмя + "_" + Формат(НомерСтрокиВФормеТаблицы, "ЧГ=0");
				ОбластьЯчейкиТаблицы = ТекТабличноеПоле.Области[ИмяЯчейки];
				ЗначениеЯчейки       = СтрокаТаблицы[КолонкаТаблицыИмя];
				
				Если ОбластьЯчейкиТаблицы.СодержитЗначение = Истина Тогда
					ОбластьЯчейкиТаблицы.Значение = ЗначениеЯчейки;
				Иначе
					ОбластьЯчейкиТаблицы.Текст = ЗначениеЯчейки;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ВставитьОбластьВТабличныйДокументНаСервере(ИсходноеКоличествоСтрокГруппы, ТекущееКоличествоСтрокГруппы, ИмяГруппы, ТекТабличноеПоле, ТекТабличноеПолеИмя, СтруктураГруппы) Экспорт
	
	Для НомНовойСтроки = ИсходноеКоличествоСтрокГруппы + 1 По ТекущееКоличествоСтрокГруппы Цикл
		
		НомИсходнойСтроки = НомНовойСтроки - 1;
		
		НомерГрафы = 1;
		
		КолонкаТаблицыИмя = ИмяГруппы + Формат(НомерГрафы, "ЧЦ=2; ЧВН=");
		
		ИмяПервойЯчейкиПоследнейСтроки = КолонкаТаблицыИмя + "_" + НомИсходнойСтроки;
		ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяПервойЯчейкиПоследнейСтроки];
		
		НомерВерхЯчейкиОбласти = ОбластьЯчейки.Верх;
		НомерНижнЯчейкиОбласти = ОбластьЯчейки.Низ;
		
		СдвигСтрок = НомерНижнЯчейкиОбласти - НомерВерхЯчейкиОбласти + 1;
		
		НомерВерхЯчейкиНовойОбласти = НомерВерхЯчейкиОбласти + СдвигСтрок;
		НомерНижнЯчейкиНовойОбласти = НомерНижнЯчейкиОбласти + СдвигСтрок;
		
		Если НомИсходнойСтроки < 11 Тогда
			РегламентированнаяОтчетностьВызовСервера.СпециальногоДобавленияСтроки(
			ТекТабличноеПоле,ТекТабличноеПолеИмя, ИмяГруппы, НомерВерхЯчейкиОбласти, НомерНижнЯчейкиОбласти);
			ЭтаФорма[ТекТабличноеПолеИмя] = ТекТабличноеПоле;
		Иначе
			РегламентированнаяОтчетностьВызовСервера.ВставитьОбластьВТабличныйДокумент(
			ТекТабличноеПоле, НомерВерхЯчейкиОбласти, НомерНижнЯчейкиОбласти);
			ЭтаФорма[ТекТабличноеПолеИмя] = ТекТабличноеПоле;
		КонецЕсли;
		
		Для НомерГрафы = 1 По ЭтаФорма.мСтруктураКолвоКолонокРазделов[ИмяГруппы] Цикл
			
			КолонкаТаблицыИмя = ИмяГруппы + Формат(НомерГрафы, "ЧЦ=2; ЧВН=");
			
			Если СтруктураГруппы[0].Свойство(КолонкаТаблицыИмя) Тогда
				
				ИмяОбластиЯчейки    = КолонкаТаблицыИмя + "_" + Формат(НомИсходнойСтроки, "ЧГ=0");
				ИмяНовОбластиЯчейки = КолонкаТаблицыИмя + "_" + Формат(НомНовойСтроки, "ЧГ=0");
				
				ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяОбластиЯчейки];
				ОбластьЯчейки.Имя = ИмяНовОбластиЯчейки;
				
				НомерВерхСтрокиЯчейки  = ОбластьЯчейки.Верх - СдвигСтрок;
				НомерНижнСтрокиЯчейки  = ОбластьЯчейки.Низ  - СдвигСтрок;
				НомерЛевоКолонкиЯчейки = ОбластьЯчейки.Лево;
				НомерПравКолонкиЯчейки = ОбластьЯчейки.Право;
				
				ОбластьЯчейкиИсходнойОбласти = ТекТабличноеПоле.Область(
				НомерВерхСтрокиЯчейки, НомерЛевоКолонкиЯчейки, НомерНижнСтрокиЯчейки, НомерПравКолонкиЯчейки);
				ОбластьЯчейкиИсходнойОбласти.Имя = ИмяОбластиЯчейки;
				
				Если ОбластьЯчейки.СодержитЗначение = Истина Тогда
					ОбластьЯчейки.Очистить();
				Иначе
					ИсходныйНомер        = Число("0"+ОбластьЯчейки.Текст);
					НовыйПорядковыйНомер = ИсходныйНомер + 1;
					ОбластьЯчейки.Текст  = Строка(НовыйПорядковыйНомер);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ИмяЛиста = Неопределено) Экспорт
	
	ИдГрупп = Новый Структура;
	
	Возврат ОпределитьИдМногострочногоРазделаПоАктивнойСтранице(ИмяЛиста, , ИдГрупп);
	
КонецФункции

&НаКлиенте
Функция ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаКлиенте(ИмяЛиста = Неопределено) Экспорт
	
	ИдГрупп = Новый Структура;
	
	Возврат ОпределитьИдМногострочногоРазделаПоАктивнойСтранице(ИмяЛиста, , ИдГрупп);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ОпределитьИдМногострочногоРазделаПоАктивнойСтранице(ИмяЛиста = Неопределено, ТекущаяСтраница, ИдГрупп)
	Перем ИмяГруппы;
	
	Возврат ИмяГруппы;
	
КонецФункции

&НаСервере
Функция ОбновитьПеременныеМодуляНаСервере(ИмяПоказателя, ЗначениеПоказателя) Экспорт
	
	Возврат ОбновитьПеременныеМодуля(ЭтаФорма, ИмяПоказателя, ЗначениеПоказателя);
	
КонецФункции

&НаКлиенте
Функция ОбновитьПеременныеМодуляНаКлиенте(ИмяПоказателя, ЗначениеПоказателя) Экспорт
	
	Возврат ОбновитьПеременныеМодуля(ЭтаФорма, ИмяПоказателя, ЗначениеПоказателя);
	
КонецФункции

&НаКлиенте
Процедура СобратьДанные(Команда)
	
	РегламентированнаяОтчетностьКлиент.ОбновитьДеревоРазделовВФормеОтчета(ЭтаФорма);
	
	СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
	
	СформироватьРаздел1();
	
	СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
	
	РегламентированнаяОтчетностьКлиент.ОбновитьДеревоРазделовВФормеОтчета(ЭтаФорма);
	
	СтруктураРеквизитовФормы.НомерТекущейСтраницы
	= Элементы.РазделыОтчета.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета;
	
	ИзменитьФорматНевведенныхПоказателей(Этаформа);
	
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел1" Тогда
		Если ЭтаФорма["ТаблицаСтраницыРазделаРаздел1"].Количество() > 0 Тогда
			Для Каждого Область Из ТабличныйДокумент.Области Цикл
				Если СтрЧислоВхождений(Область.Имя, "УдалитьСтраницу") > 0 Тогда
					Если ЭтаФорма["ТаблицаСтраницыРазделаРаздел1"].Количество() = 1 Тогда
						Область.Текст = "";
						Область.Гиперссылка = Ложь;
					Иначе
						Если СтрЧислоВхождений(Область.Имя, "Значок") > 0 Тогда
							Область.Текст = "х";
						Иначе
							Область.Текст = "Удалить страницу";
						КонецЕсли;
						Область.Гиперссылка = Истина;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьРаздел1()
	
	Перем ТаблицаСтраницРаздела1;
	Перем ТаблицаСтраницРаздела2;
	
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел1" Тогда
		
		Если мСтруктураМногостраничныхРазделов.Свойство("Раздел1", ТаблицаСтраницРаздела1) Тогда
			
			ТаблицаСтраницРаздела1 = ЭтаФорма[ТаблицаСтраницРаздела1];
			
			АвансовыеПлатежиПоОКТМО = Новый Соответствие;
			
			Для Каждого СтрокаТаблицы Из ТаблицаСтраницРаздела1 Цикл
				Для Блок = 1 По 3 Цикл
					ОКТМО = СокрЛП(СтрокаТаблицы.Данные[0].Значение["П000010002003" + "_" + Блок]);
					Если АвансовыеПлатежиПоОКТМО.Получить(ОКТМО) = Неопределено Тогда
						Авансы = Новый Структура;
						Авансы.Вставить("СуммаАвансовыхПлатежей1Кв", СтрокаТаблицы.Данные[0].Значение["П000010002303" + "_" + Блок]);
						Авансы.Вставить("СуммаАвансовыхПлатежей2Кв", СтрокаТаблицы.Данные[0].Значение["П000010002503" + "_" + Блок]);
						Авансы.Вставить("СуммаАвансовыхПлатежей3Кв", СтрокаТаблицы.Данные[0].Значение["П000010002703" + "_" + Блок]);
						АвансовыеПлатежиПоОКТМО.Вставить(ОКТМО, Авансы);
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
			
			КоличествоСтраниц = ТаблицаСтраницРаздела1.Количество();
			Для ОбратныйИндекс = 1 По КоличествоСтраниц Цикл
				Инд = КоличествоСтраниц - ОбратныйИндекс;
				СтрокаТаблицы = ТаблицаСтраницРаздела1[Инд];
				Если НЕ СтрокаТаблицы.АктивнаяСтраница Тогда
					Если ТаблицаСтраницРаздела1.Количество() = 1 Тогда
						// В таблице должно быть не менее одной строки.
						СтрокаТаблицы.АктивнаяСтраница = Истина;
					Иначе
						ТаблицаСтраницРаздела1.Удалить(СтрокаТаблицы);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
			КБК = ТабличныйДокумент.Области.П000010001003.Значение;
			ОчиститьТабличноеПолеНаСервере("Раздел1");
			ТабличныйДокумент.Области.П000010001003.Значение = КБК;
			
			РегламентированнаяОтчетностьКлиентСервер.ОчиститьВариантыЗаполнения(ЭтаФорма, "Раздел1");
			
		КонецЕсли;
		
	Иначе
		
		КБК = ТаблицаСтраницыРазделаРаздел1[0].Данные[0].Значение.П000010001003;
		
		ТаблицаСтраницыРазделаРаздел1.Очистить();
		
		СтрПерваяСтраница = ЭтаФорма.ТаблицаСтраницыРазделаРаздел1.Добавить();
		СтрПерваяСтраница.Представление               = "Новая страница";
		СтрПерваяСтраница.АктивнаяСтраница            = Истина;
		СтрПерваяСтраница.АвтоматическоеПредставление = Истина;
		
		ЗаполнитьПустыеСтруктурыДанных();
		
		РегламентированнаяОтчетностьКлиентСервер.ОчиститьВариантыЗаполнения(ЭтаФорма, "Раздел1");
		
		ТаблицаСтраницыРазделаРаздел1[0].Данные[0].Значение.П000010001003 = КБК;
		
	КонецЕсли;
	
	Если НЕ мСтруктураМногостраничныхРазделов.Свойство("Раздел1", ТаблицаСтраницРаздела1) Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ мСтруктураМногостраничныхРазделов.Свойство("Раздел2", ТаблицаСтраницРаздела2) Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаСтраницРаздела1 = ЭтаФорма[ТаблицаСтраницРаздела1];
	ТаблицаСтраницРаздела2 = ЭтаФорма[ТаблицаСтраницРаздела2];

	ДляХраненияМассиваОкатоСумма = Новый Соответствие();
	МассивОкато = Новый Массив();
	
	КоличествоСтраниц = ТаблицаСтраницРаздела2.Количество();
	
	Для Инд = 0 По КоличествоСтраниц - 1 Цикл
		
		Если ТаблицаСтраницРаздела2[Инд].Данные.Количество() = 0 Тогда
			Прервать;
		КонецЕсли;
		
		ОКАТО = СокрЛП(ТаблицаСтраницРаздела2[Инд].Данные[0].Значение["П000020002003"]);
		
		Если НЕ ПустаяСтрока(ОКАТО) Тогда
			
			УсловиеСуммирования = Новый Структура;
			УсловиеСуммирования.Вставить("П000020002003", ОКАТО);
			Сумма = СуммаПоказателяРазделаПоСтраницам("Раздел2", "П000020030003", УсловиеСуммирования, Истина);
			
			Если ДляХраненияМассиваОкатоСумма.Получить(ОКАТО) = Неопределено Тогда
				МассивОкато.Добавить(ОКАТО);
				ДляХраненияМассиваОкатоСумма.Вставить(ОКАТО,Сумма);
			КонецЕсли;
			
		Иначе
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='Не заполнен код ОКТМО на странице Раздела 2!'");
			Сообщение.Сообщить();
			РегламентированнаяОтчетность.ПолучитьСведенияОПоказателяхОтчета(ЭтаФорма);
			Возврат;
			
		КонецЕсли;
		
	КонецЦикла;
	
	КоличествоБлоковНаЛисте = 3;
	
	Для Инд = 0 По ДляХраненияМассиваОкатоСумма.Количество()-1 Цикл
		
		Если Инд % КоличествоБлоковНаЛисте = 0 И Инд <> 0 Тогда
			
			Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел1" Тогда
				
				КБК = ТабличныйДокумент.Области.П000010001003.Значение;
				ВставитьДополнительнуюСтраницуНаСервере("Раздел1");
				ТабличныйДокумент.Области.П000010001003.Значение = КБК;
				
			Иначе
				
				ВставитьДополнительнуюСтраницуНаСервере("Раздел1", Ложь);
				
			КонецЕсли;
			
		КонецЕсли;
		
		ОкончаниеИмениОбласти = Формат(Инд % КоличествоБлоковНаЛисте + 1, "ЧГ=");
		
		Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел1" Тогда
			
			ТабличныйДокумент.Области["П000010002003_" + ОкончаниеИмениОбласти].Значение = МассивОкато[Инд];
			ТабличныйДокумент.Области["П000010002103_" + ОкончаниеИмениОбласти].Значение
			= ДляХраненияМассиваОкатоСумма[МассивОкато[Инд]];
			
			Авансы = АвансовыеПлатежиПоОКТМО[МассивОкато[Инд]];
			Если Авансы <> Неопределено Тогда
				ТабличныйДокумент.Области["П000010002303_" + ОкончаниеИмениОбласти].Значение = Авансы.СуммаАвансовыхПлатежей1Кв;
				ТабличныйДокумент.Области["П000010002503_" + ОкончаниеИмениОбласти].Значение = Авансы.СуммаАвансовыхПлатежей2Кв;
				ТабличныйДокумент.Области["П000010002703_" + ОкончаниеИмениОбласти].Значение = Авансы.СуммаАвансовыхПлатежей3Кв;
			КонецЕсли;
			
			РасчетНаСервере("Раздел1", "П000010002103_" + ОкончаниеИмениОбласти);
			
		Иначе
			
			Если ТаблицаСтраницРаздела1[Цел(Инд / КоличествоБлоковНаЛисте)].Данные.Количество() = 0 Тогда
				
				СтруктураДанных = Новый Структура;
				
				Для НомерБлокаНаЛисте = 1 По КоличествоБлоковНаЛисте Цикл
					
					КБК = ТаблицаСтраницРаздела1[0].Данные[0].Значение["П000010001003"];
					
					СтруктураДанных.Вставить("П000010001003", КБК);
					
					СтруктураДанных.Вставить("П000010002003_" + НомерБлокаНаЛисте, "");
					СтруктураДанных.Вставить("П000010002103_" + НомерБлокаНаЛисте, 0);
					СтруктураДанных.Вставить("П000010002303_" + НомерБлокаНаЛисте, 0);
					СтруктураДанных.Вставить("П000010002503_" + НомерБлокаНаЛисте, 0);
					СтруктураДанных.Вставить("П000010002703_" + НомерБлокаНаЛисте, 0);
					СтруктураДанных.Вставить("П000010003003_" + НомерБлокаНаЛисте, 0);
					СтруктураДанных.Вставить("П000010004003_" + НомерБлокаНаЛисте, 0);
					
				КонецЦикла;
				
				ТаблицаСтраницРаздела1[Цел(Инд / КоличествоБлоковНаЛисте)].Данные.Вставить(0, СтруктураДанных);
				
			КонецЕсли;
			
			ТаблицаСтраницРаздела1[Цел(Инд / КоличествоБлоковНаЛисте)].Данные[0].Значение["П000010002003_"
			+ ОкончаниеИмениОбласти] = МассивОкато[Инд];
			ТаблицаСтраницРаздела1[Цел(Инд / КоличествоБлоковНаЛисте)].Данные[0].Значение["П000010002103_"
			+ ОкончаниеИмениОбласти] = ДляХраненияМассиваОкатоСумма[МассивОкато[Инд]];
			
		КонецЕсли;
		
	КонецЦикла;
	
	РегламентированнаяОтчетность.ПолучитьСведенияОПоказателяхОтчета(ЭтаФорма);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Функция СуммаПоказателяРазделаПоСтраницам(ИмяРаздела, ИмяПоказателя, Условия = Неопределено, Округлять = Ложь) Экспорт
	
	СтруктураРаздела = Неопределено;
	Если НЕ мСтруктураМногостраничныхРазделов.Свойство(ИмяРаздела, СтруктураРаздела) Тогда
		ВызватьИсключение "Раздел """ + ИмяРаздела + """ не существует в описании структуры многостраничных разделов";
	КонецЕсли;
	
	СтруктураРаздела = ЭтаФорма[СтруктураРаздела];
	Результат = 0;
	
	Для Каждого СтраницаРаздела Из СтруктураРаздела Цикл
		
		РазмещениеДанных = СтраницаРаздела.Данные[0].Значение;
		
		ЗначениеПоказателя = ПолучитьДанныеИзМестаРазмещения(РазмещениеДанных, ИмяПоказателя);
		Если Округлять Тогда
			ЗначениеПоказателя = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			ЭтаФорма, ЗначениеПоказателя);
		КонецЕсли;
		
		Если ТипЗнч(Условия) = Тип("Структура") Тогда
			Для Каждого ЭлементСтруктуры ИЗ Условия Цикл
				ИмяПоказателяУсловия = ЭлементСтруктуры.Ключ;
				ЗначениеПоказателяУсловия = ПолучитьДанныеИзМестаРазмещения(РазмещениеДанных, ИмяПоказателяУсловия);
				
				Если ТипЗнч(ЗначениеПоказателяУсловия) = Тип("Строка") Тогда
					ЗначениеПоказателяУсловия = СокрЛП(ЗначениеПоказателяУсловия);
				КонецЕсли;
				
				Если ЗначениеПоказателяУсловия <> ЭлементСтруктуры.Значение Тогда
					ЗначениеПоказателя = 0;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Результат = Результат + ЗначениеПоказателя;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ОбновитьПеременныеМодуля(Форма, ИмяПоказателя, ЗначениеПоказателя)
	
	ИзмененияПроизошли = Ложь;
	
	Возврат ИзмененияПроизошли;
	
КонецФункции

&НаСервере
Функция ОбновитьВариантыЗаполнения()
	Перем МассивВариантовЗаполненияСтраниц;
	
	ЕстьИзменения = Ложь;
	
	МакетСоставаПоказателей = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(СтруктураРеквизитовФормы.мСоставПоказателей);
	
	ОписаниеТиповСтрока15  = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(15));
	ОписаниеТиповСтрока50  = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(50));
	ОписаниеТиповСтрока100 = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100));
	ОписаниеТиповЧисло1    = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(1));
	
	ЕстьИзменения = Ложь;
	
	Для ПереборныйИнд = 0 По МакетСоставаПоказателей.Области.Количество() - 1 Цикл
		
		ТекОбласть  = МакетСоставаПоказателей.Области[ПереборныйИнд];
		ИмяСтраницы = ТекОбласть.Имя;
		
		ТаблицаВариантыЗаполнения = Новый ТаблицаЗначений;
		ТаблицаВариантыЗаполнения.Колонки.Добавить("КодПоказателя",     ОписаниеТиповСтрока50);
		ТаблицаВариантыЗаполнения.Колонки.Добавить("ВариантЗаполнения", ОписаниеТиповЧисло1);
		ТаблицаВариантыЗаполнения.Колонки.Добавить("ЗначениеАвто",      СтруктураРеквизитовФормы.мОписаниеТиповЧислоЕ);
		ТаблицаВариантыЗаполнения.Колонки.Добавить("Дельта",            СтруктураРеквизитовФормы.мОписаниеТиповЧислоЕ);
		ТаблицаВариантыЗаполнения.Колонки.Добавить("Комментарий",       ОписаниеТиповСтрока100);
		ТаблицаВариантыЗаполнения.Колонки.Добавить("КодПоказателяПоСтруктуре", ОписаниеТиповСтрока50);
		
		Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
			
			КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
			ИмяПоказателя = КодПоказателя;
			
			Если КодПоказателя = "===" Тогда
				Прервать;
			КонецЕсли;
			
			Если Лев(КодПоказателя, 2) = "//" Тогда
				Продолжить;
			КонецЕсли;
			
			КодПоказателяПоФорме = СокрЛП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
			стрВариантЗаполнения = РегламентированнаяОтчетность.ПолучитьВариантЗаполненияПоказателяРегОтчета(
			МакетСоставаПоказателей, Ном);
			
			чВариантЗаполнения = ?(ПустаяСтрока(стрВариантЗаполнения), 0, Число(стрВариантЗаполнения));
			Если чВариантЗаполнения <> 0 Тогда
				НоваяСтрока = ТаблицаВариантыЗаполнения.Добавить();
				НоваяСтрока.КодПоказателя = ? (Не ПустаяСтрока(КодПоказателяПоФорме), КодПоказателяПоФорме, КодПоказателя);
				НоваяСтрока.ВариантЗаполнения = чВариантЗаполнения;
				НоваяСтрока.КодПоказателяПоСтруктуре  = чВариантЗаполнения;
			КонецЕсли;
			
		КонецЦикла;
		
		Если Не мСтруктураВариантыЗаполнения.Свойство(ИмяСтраницы, МассивВариантовЗаполненияСтраниц) Тогда
			
			МассивВариантовЗаполненияСтраниц = ЭтаФорма["ТаблицаВариантыЗаполнения" + ИмяСтраницы];
			
			Если ТаблицаВариантыЗаполнения.Количество() > 0 Тогда
				
				МассивВариантовЗаполненияСтраниц.Очистить();
				МассивВариантовЗаполненияСтраниц.Добавить(ТаблицаВариантыЗаполнения);
				мСтруктураВариантыЗаполнения.Вставить(ИмяСтраницы, ИмяСтраницы);
				ЕстьИзменения = Истина;
				
			КонецЕсли;
		Иначе
			
			МассивВариантовЗаполненияСтраниц = ЭтаФорма["ТаблицаВариантыЗаполнения" + ИмяСтраницы];
			
			Если ТаблицаВариантыЗаполнения.Количество() = 0 Тогда
				
				мСтруктураВариантыЗаполнения.Удалить(ИмяСтраницы);
				ЕстьИзменения = Истина;
				
			Иначе
				
				Для каждого ЭлементМассива Из МассивВариантовЗаполненияСтраниц Цикл
					
					ЭлементМассива = ЭлементМассива.ТаблицаВариантовЗаполнения;
					
					Для каждого СтрокаТаблицы Из ТаблицаВариантыЗаполнения Цикл
						КодПоказателя     = СтрокаТаблицы.КодПоказателя;
						ВариантЗаполнения = СтрокаТаблицы.ВариантЗаполнения;
						
						Если ЭлементМассива.НайтиСтроки(Новый Структура("КодПоказателя", КодПоказателя)).Количество() = 0 Тогда
							
							НоваяСтрока = ЭлементМассива.Добавить();
							НоваяСтрока.КодПоказателя     = КодПоказателя;
							НоваяСтрока.ВариантЗаполнения = ВариантЗаполнения;
							
							ЕстьИзменения = Истина;
						КонецЕсли;
					КонецЦикла;
					
					ТаблДляЦикла = ЭлементМассива.Выгрузить();
					
					Для каждого СтрокаТаблицы Из ТаблДляЦикла Цикл
						КодПоказателя = СтрокаТаблицы.КодПоказателя;
						Если ТаблицаВариантыЗаполнения.Найти(КодПоказателя, "КодПоказателя") = Неопределено Тогда
							СтрокиВЭлементеМассива = ЭлементМассива.НайтиСтроки(Новый Структура("КодПоказателя", КодПоказателя));
							Если СтрокиВЭлементеМассива.Количество() > 0 Тогда
								ЭлементМассива.Удалить(СтрокиВЭлементеМассива[0]);
								ЕстьИзменения = Истина;
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
					
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ЕстьИзменения;
	
КонецФункции

&НаСервере
Функция ОбновитьНастройкиСтраниц()
	
	ЕстьИзменения = Ложь;
	
	мПользовательскиеНастройкиСтраниц = РеквизитФормыВЗначение("мДеревоСтраницОтчета").Скопировать();
	
	ФормироватьСтруктуруСтраницОтчета();
	
	Для каждого ИсхКолонка Из РеквизитФормыВЗначение("мДеревоСтраницОтчета").Колонки Цикл
		
		Если мПользовательскиеНастройкиСтраниц.Колонки.Найти(ИсхКолонка.Имя) = Неопределено Тогда
			мПользовательскиеНастройкиСтраниц.Колонки.Добавить(
			ИсхКолонка.Имя, ИсхКолонка.ТипЗначения, ИсхКолонка.Заголовок, ИсхКолонка.Ширина);
			мПользовательскиеНастройкиСтраниц.ЗагрузитьКолонку(
			РеквизитФормыВЗначение("мДеревоСтраницОтчета").ВыгрузитьКолонку(ИсхКолонка.Имя), ИсхКолонка.Имя);
			ЕстьИзменения = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Для каждого ТекКолонка Из мПользовательскиеНастройкиСтраниц.Колонки Цикл
		
		Если РеквизитФормыВЗначение("мДеревоСтраницОтчета").Колонки.Найти(ТекКолонка.Имя) = Неопределено Тогда
			мПользовательскиеНастройкиСтраниц.Колонки.Удалить(мПользовательскиеНастройкиСтраниц.Колонки.Индекс(ТекКолонка));
			ЕстьИзменения = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Если мДеревоСтраницОтчета.ПолучитьЭлементы().Количество()
		<> мПользовательскиеНастройкиСтраниц.Строки.Количество() Тогда
		
		КолвоКолонок = РеквизитФормыВЗначение("мДеревоСтраницОтчета").Колонки.Количество();
		
		Для каждого Строка Из мДеревоСтраницОтчета.ПолучитьЭлементы() Цикл
			
			Если мПользовательскиеНастройкиСтраниц.Найти(Строка.ИмяСтраницы, "ИмяСтраницы") = Неопределено Тогда
				НоваяСтрока = мПользовательскиеНастройкиСтраниц.Строки.Добавить();
				Для НомКолонки = 0 По (КолвоКолонок - 1) Цикл
					НоваяСтрока[НомКолонки] = Строка[НомКолонки];
				КонецЦикла;
			КонецЕсли;
			
			Если Строка.Строки.Количество() > 0 Тогда
				Для каждого Строка2 Из Строка.Строки Цикл
					Если мПользовательскиеНастройкиСтраниц.Найти(Строка2.ИмяСтраницы, "ИмяСтраницы") = Неопределено Тогда
						НоваяСтрока2 = НоваяСтрока.Строки.Добавить();
						Для НомКолонки = 0 По (КолвоКолонок - 1) Цикл
							НоваяСтрока2[НомКолонки] = Строка2[НомКолонки];
						КонецЦикла;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
		
		Для каждого Строка Из мПользовательскиеНастройкиСтраниц Цикл
			Если РеквизитФормыВЗначение("мДеревоСтраницОтчета").Найти(Строка.ИмяСтраницы, "ИмяСтраницы") = Неопределено Тогда
				мПользовательскиеНастройкиСтраниц.Строки.Удалить(мПользовательскиеНастройкиСтраниц.Строки.Индекс(Строка));
			КонецЕсли;
		КонецЦикла;
		
		ЕстьИзменения = Истина;
		
	КонецЕсли;
	
	Для каждого ТекСтрока Из мДеревоСтраницОтчета.ПолучитьЭлементы() Цикл
		
		НомСтр = мДеревоСтраницОтчета.ПолучитьЭлементы().Индекс(ТекСтрока);
		
		Если ТекСтрока.ВыгрузитьСтраницу = 2 Тогда
			Если мПользовательскиеНастройкиСтраниц.Строки[НомСтр].ВыгрузитьСтраницу <> 2 Тогда
				мПользовательскиеНастройкиСтраниц.Строки[НомСтр].ВыгрузитьСтраницу = 2;
				ЕстьИзменения = Истина;
			КонецЕсли;
		КонецЕсли;
		
		Если ТекСтрока.Представление <> мПользовательскиеНастройкиСтраниц.Строки[НомСтр].Представление Тогда
			мПользовательскиеНастройкиСтраниц.Строки[НомСтр].Представление = ТекСтрока.Представление;
			ЕстьИзменения = Истина;
		КонецЕсли;
		
		Если ТекСтрока.ИмяПоляТабличногоДокум
			<> мПользовательскиеНастройкиСтраниц.Строки[НомСтр].ИмяПоляТабличногоДокум Тогда
			мПользовательскиеНастройкиСтраниц.Строки[НомСтр].ИмяПоляТабличногоДокум = ТекСтрока.ИмяПоляТабличногоДокум;
			ЕстьИзменения = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(мПользовательскиеНастройкиСтраниц.Скопировать(), "мДеревоСтраницОтчета");
	
	Возврат ЕстьИзменения;
	
КонецФункции

&НаСервере
Процедура СформироватьДеревоРазделовОтчетаНаСервере() Экспорт
	
	СформироватьДеревоРазделовОтчета(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьДеревоРазделовОтчетаНаКлиенте() Экспорт
	
	СформироватьДеревоРазделовОтчета(ЭтаФорма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СформироватьДеревоРазделовОтчета(Форма)
	
	Форма["РазделыОтчета"].ПолучитьЭлементы().Очистить();
	
	Для Каждого ЭлементДереваСтраницОтчета Из Форма["мДеревоСтраницОтчета"].ПолучитьЭлементы() Цикл
		
		Если ЭлементДереваСтраницОтчета.ПоказатьСтраницу = 1 Тогда
			
			ЭлементРазделовОтчета = Форма["РазделыОтчета"].ПолучитьЭлементы().Добавить();
			ЭлементРазделовОтчета.КолонкаРазделыОтчета         = ЭлементДереваСтраницОтчета.Представление;
			ЭлементРазделовОтчета.КолонкаРазделыОтчетаСокрНаим = ЭлементДереваСтраницОтчета.ИмяСтраницы;
			ЭлементРазделовОтчета.ИндексКартинки               = 1;
			ЭлементРазделовОтчета.РазделМногостраничный        = Ложь;
			ЭлементРазделовОтчета.РазделМногострочный          = РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(
			Форма, "мТаблицаМногострочныхРазделов");
			
			НайденноеЗначение = Неопределено;
			
			Если Форма["мСтруктураМногостраничныхРазделов"].Свойство(
				ЭлементРазделовОтчета.КолонкаРазделыОтчетаСокрНаим, НайденноеЗначение) Тогда
				
				Если НЕ НайденноеЗначение = Неопределено Тогда
					
					НайденноеЗначение = Форма[НайденноеЗначение];
					
					ЭлементРазделовОтчета.ИндексКартинки        = 0;
					ЭлементРазделовОтчета.РазделМногостраничный = Истина;
					
					Для НомерСтраницы = 1 По НайденноеЗначение.Количество() Цикл
						
						СтраницаРазделаОтчета = ЭлементРазделовОтчета.ПолучитьЭлементы().Добавить();
						
						СтраницаРазделаОтчета.КолонкаРазделыОтчета              = "Стр. " + НомерСтраницы;
						СтраницаРазделаОтчета.КолонкаРазделыОтчетаСокрНаим      = ЭлементРазделовОтчета.КолонкаРазделыОтчетаСокрНаим;
						СтраницаРазделаОтчета.КолонкаНомерСтраницыРазделаОтчета = НомерСтраницы;
						СтраницаРазделаОтчета.ИндексКартинки                    = 1;
						СтраницаРазделаОтчета.РазделМногостраничный             = ЭлементРазделовОтчета.РазделМногостраничный;
						СтраницаРазделаОтчета.РазделМногострочный               = ЭлементРазделовОтчета.РазделМногострочный;
						
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция СобратьДанныеТекущегоТаблПоляНаСервере(ИмяТабличногоПоля) Экспорт
	
	Возврат СобратьДанныеТекущегоТаблПоля(ЭтаФорма, ИмяТабличногоПоля);
	
КонецФункции

&НаКлиенте
Функция СобратьДанныеТекущегоТаблПоляНаКлиенте(ИмяТабличногоПоля) Экспорт
	
	Возврат СобратьДанныеТекущегоТаблПоля(ЭтаФорма, ИмяТабличногоПоля);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СобратьДанныеТекущегоТаблПоля(Форма, ТабличноеПоле) Экспорт
	
	ТабличноеПоле = Форма[ТабличноеПоле];
	
	СтруктураДанныхПоля = Новый Структура;
	
	Для Инд = 0 По ТабличноеПоле.Области.Количество() - 1 Цикл
		ТекущаяОбласть = ТабличноеПоле.Области[Инд];
		
		Если НЕ Тип(ТекущаяОбласть) = Тип("РисунокТабличногоДокумента")
			И НЕ ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТекущаяОбласть.СодержитЗначение <> Истина Тогда
			Продолжить;
		КонецЕсли;
		
		ИмяПоказателя      = ТекущаяОбласть.Имя;
		ЗначениеПоказателя = ТекущаяОбласть.Значение;
		
		СтруктураДанныхПоля.Вставить(ИмяПоказателя, ЗначениеПоказателя);
		
	КонецЦикла;
	
	Возврат СтруктураДанныхПоля;
	
КонецФункции

&НаКлиенте
Процедура ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставленияПоРазделуНаКлиенте(Знач ИмяРаздела) Экспорт
	
	ПеременныеМодуля = Новый Структура;
	
	ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставленияПоРазделу(ЭтаФорма, ИмяРаздела, ПеременныеМодуля);
	
КонецПроцедуры

&НаСервере
Процедура ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставленияПоРазделуНаСервере(Знач ИмяРаздела) Экспорт
	
	ПеременныеМодуля = Новый Структура;
	
	ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставленияПоРазделу(ЭтаФорма, ИмяРаздела, ПеременныеМодуля);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставленияПоРазделу(Форма, Знач ИмяРаздела, ПеременныеМодуля)
	
	Возврат;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьОтчет(Команда)
	
	Если Элементы.РазделыОтчета.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СохранитьНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНаКлиенте(Автосохранение = Ложь, ВыполняемоеОповещение = Неопределено) Экспорт
	
	Если СтруктураДанныхТитульный.Количество() = 0
		ИЛИ СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
		СтруктураДанныхТитульный.Вставить("КодИМНС", ТабличныйДокумент.Области.КодИМНС.Значение);
		СтруктураДанныхТитульный.Вставить("КПП1", ТабличныйДокумент.Области.КПП1.Значение);
		СтруктураДанныхТитульный.Вставить("НомерКорректировки", ТабличныйДокумент.Области.НомерКорректировки.Значение);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СтруктураДанныхТитульный.НомерКорректировки) Тогда
		ЗначениеКорректировки = 0;
	Иначе
		ЗначениеКорректировки = Число(СтруктураДанныхТитульный.НомерКорректировки);
	КонецЕсли;
	
	Вариант = СтруктураРеквизитовФормы.ВидДокумента * ЗначениеКорректировки;
	
	КодИФНС = СтруктураДанныхТитульный.КодИМНС;
	КПП = СтруктураДанныхТитульный.КПП1;
	
	Если НЕ РегламентированнаяОтчетностьКлиент.ПриЗаписиРегламентированногоОтчетаНаКлиенте(
		ЭтаФорма, КодИФНС, Автосохранение, Вариант) Тогда
		Возврат;
	КонецЕсли;
	
	ПодобныйОтчетСуществует = Ложь;
	ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки = Ложь;
	
	Если Элементы.РазделыОтчета.ТекущиеДанные = Неопределено Тогда
		НаименованиеТекущегоРаздела = СтруктураРеквизитовФормы.НаимТекущегоРаздела;
	Иначе
		НаименованиеТекущегоРаздела = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
	КонецЕсли;
	
	РезультатСохранения = ПередСохранением(КодИФНС, КПП, ПодобныйОтчетСуществует, Вариант,
	ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, Автосохранение, НаименованиеТекущегоРаздела);
	
	ВидДокументаНомерКорректировкиИзменен = Неопределено;
	
	Если ПодобныйОтчетСуществует И Автосохранение Тогда
		Возврат;
	КонецЕсли;
	
	НуженВопросПередСохранением
	= ПодобныйОтчетСуществует ИЛИ ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки;
	
	Если НуженВопросПередСохранением Тогда
		СохранитьНаКлиентеСВопросом(Автосохранение, Вариант, ВыполняемоеОповещение,
		ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, ПодобныйОтчетСуществует, КодИФНС, КПП);
	Иначе
		ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНаКлиентеСВопросом(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, ПодобныйОтчетСуществует, КодИФНС, КПП)
	
	Если ПодобныйОтчетСуществует Тогда
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(КодВозвратаДиалога.Да, "Сохранить");
		Кнопки.Добавить(КодВозвратаДиалога.Нет, "Отмена");
		
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Отчет с видом %1 уже существует.
			|Сохранить отчет с таким же видом?'"), ?(Вариант = 0, """Первичный""", """Корректирующий/" + Вариант + """"));
		ДополнительныеПараметры = Новый Структура(
		"Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, КодИФНС, КПП",
		Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, КодИФНС, КПП);
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросСохранитьОтчетСТакимЖеВидомЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, Кнопки, , Кнопки.Получить(1).Значение);
	Иначе
		СохранитьНаКлиентеСВопросомПродолжение(Автосохранение, Вариант, ВыполняемоеОповещение,
		ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки,КодИФНС, КПП);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросСохранитьОтчетСТакимЖеВидомЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Автосохранение = ДополнительныеПараметры.Автосохранение;
	Вариант = ДополнительныеПараметры.Вариант;
	ВыполняемоеОповещение = ДополнительныеПараметры.ВыполняемоеОповещение;
	КодИФНС = ДополнительныеПараметры.КодИФНС;
	КПП = ДополнительныеПараметры.КПП;
	ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки
	= ДополнительныеПараметры.ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки;
	
	Ответ = РезультатВопроса;
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	СохранитьНаКлиентеСВопросомПродолжение(Автосохранение, Вариант, ВыполняемоеОповещение,
	ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки,КодИФНС, КПП);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНаКлиентеСВопросомПродолжение(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, КодИФНС, КПП)
	
	Если ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки Тогда
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("ВидОтчета", Вариант);
		
		ФормаВопроса = РегламентированнаяОтчетностьКлиент.ПолучитьОбщуюФормуПоИмени(
		"ВопросПриИзмененииВидаДокументаНомераКорректировки", ПараметрыФормы);
		ФормаВопроса.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		ДополнительныеПараметры = Новый Структура("Автосохранение, Вариант, ВыполняемоеОповещение, КодИФНС, КПП",
		Автосохранение, Вариант, ВыполняемоеОповещение,КодИФНС, КПП );
		ОписаниеОповещения = Новый ОписаниеОповещения(
		"ВопросПриИзмененииВидаДокументаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ФормаВопроса.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
		ФормаВопроса.Открыть();
	Иначе
		Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='Сохраняется %1...'"), ЭтаФорма.Заголовок), , , БиблиотекаКартинок.Записать);
		РезультатСохранения = Сохранить(Автосохранение, КодИФНС, КПП, Вариант, Неопределено,
		Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
		ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПриИзмененииВидаДокументаЗавершение(КодВозврата, ДополнительныеПараметры) Экспорт
	
	Автосохранение = ДополнительныеПараметры.Автосохранение;
	Вариант = ДополнительныеПараметры.Вариант;
	ВыполняемоеОповещение = ДополнительныеПараметры.ВыполняемоеОповещение;
	КодИФНС = ДополнительныеПараметры.КодИФНС;
	КПП = ДополнительныеПараметры.КПП;
	Если КодВозврата = КодВозвратаДиалога.Да
		ИЛИ КодВозврата = КодВозвратаДиалога.Нет Тогда
		ВидДокументаНомерКорректировкиИзменен = ?(КодВозврата = КодВозвратаДиалога.Да, Истина, Ложь);
	Иначе
		Возврат;
	КонецЕсли;
	
	Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
	НСтр("ru='Сохраняется %1...'"), ЭтаФорма.Заголовок), , , БиблиотекаКартинок.Записать);
	РезультатСохранения = Сохранить(Автосохранение, КодИФНС, КПП, Вариант,
	ВидДокументаНомерКорректировкиИзменен, Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
	ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения)
	
	КлючУникальности = СтруктураРеквизитовФормы.мСохраненныйДок;
	
	Если РезультатСохранения Тогда
		
		РегламентированнаяОтчетностьКлиент.ПослеЗаписиРегламентированногоОтчета(ЭтаФорма);
		
		Если ВыполняемоеОповещение <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ВыполняемоеОповещение);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПередСохранением(КодИФНС, КПП, ПодобныйОтчетСуществует, Вариант, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, Автосохранение, ПоказателиОтчета)
	
	Если РегламентированнаяОтчетность.БылиИзмененыКлючевыеРеквизитыОтчета(ЭтаФорма, КодИФНС, КПП)
		И РегламентированнаяОтчетность.СуществуетДокументСАналогичнымиРеквизитами(ЭтаФорма, КодИФНС, КПП) Тогда
		
		ПодобныйОтчетСуществует = Истина;
		
	КонецЕсли;
	
	СтруктураРеквизитовФормы.мЗаписываетсяНовыйДокумент = (СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено
	ИЛИ СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено);
	
	Если Вариант <> Неопределено И ((СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено)
		ИЛИ (СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено)
		ИЛИ (Вариант <> СтруктураРеквизитовФормы.мВариант)) Тогда
		
		Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено
			ИЛИ СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено Тогда
		ИначеЕсли Вариант <> СтруктураРеквизитовФормы.мВариант Тогда
			ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПодобныйОтчетСуществует ИЛИ ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Сохранить(Автосохранение, КодИФНС, КПП, Вариант, , ПоказателиОтчета);
	
КонецФункции

&НаСервере
Процедура ЗаполнитьПустыеСтруктурыДанных()
	
	СохрТабличныйДокумент = Новый ТабличныйДокумент;
	СохрТабличныйДокумент.Вывести(ТабличныйДокумент);
	
	Для Каждого Раздел Из мСвойстваРазделовДекларации.ПолучитьЭлементы() Цикл
		Если НЕ Раздел.МногостраничностьВРазделе
			И (ЭтаФорма["СтруктураДанных" + Раздел.ИмяСтраницы].Количество() = 0) Тогда
			ТабличныйДокумент.Очистить();
			ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(ЭтаФорма.ИмяФормы,
			СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + Раздел.ИмяСтраницы));
			СохранитьДанныеРаздела(Раздел.ИмяСтраницы, Ложь);
		ИначеЕсли Раздел.МногостраничностьВРазделе
			И (ЭтаФорма[мСтруктураМногостраничныхРазделов[Раздел.ИмяСтраницы]][0].Данные.Количество() = 0) Тогда
			ТабличныйДокумент.Очистить();
			ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(ЭтаФорма.ИмяФормы,
			СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + Раздел.ИмяСтраницы));
			СохранитьДанныеРаздела(Раздел.ИмяСтраницы, Ложь);
		КонецЕсли;
	КонецЦикла;
	
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(СохрТабличныйДокумент);
	
КонецПроцедуры

&НаСервере
Функция Сохранить(Автосохранение = Ложь, КодИФНС, КПП, Вариант, ВидДокументаНомерКорректировкиИзменен = Неопределено, НаимТекРаздела) Экспорт
	
	ДанныеДляРазблокирования = Неопределено;
	
	Если НЕ СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
		Если НЕ СтруктураРеквизитовФормы.мБезОткрытияФормы Тогда
			ДанныеДляРазблокирования = Новый Структура("Ключ,ИдФормы",
			СтруктураРеквизитовФормы.мСохраненныйДок, ЭтаФорма.УникальныйИдентификатор);
		КонецЕсли;
		СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.ПолучитьОбъект();
	КонецЕсли;
	
	Если НЕ РегламентированнаяОтчетность.ПриЗаписиРегламентированногоОтчетаНаСервере(ЭтаФорма, КодИФНС, Автосохранение,
		Вариант, ВидДокументаНомерКорректировкиИзменен, СтруктураРеквизитовФормы.мСохраненныйДок) Тогда
		СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
		Возврат Ложь;
	КонецЕсли;
	
	СтруктураРеквизитовФормы.мСохраненныйДок.ИсточникОтчета = Метаданные.Отчеты[ИмяОтчета(ЭтаФорма.ИмяФормы)].Имя;
	СтруктураРеквизитовФормы.мСохраненныйДок.НаименованиеОтчета = Метаданные.Отчеты[ИмяОтчета(ЭтаФорма.ИмяФормы)].ОсновнаяФорма.Синоним;
	СтруктураРеквизитовФормы.мСохраненныйДок.ДатаНачала               = СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета;
	СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания            = СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета;
	СтруктураРеквизитовФормы.мСохраненныйДок.Периодичность            = СтруктураРеквизитовФормы.мПериодичность;
	СтруктураРеквизитовФормы.мСохраненныйДок.ВыбраннаяФорма           = СтруктураРеквизитовФормы.мВыбраннаяФорма;
	СтруктураРеквизитовФормы.мСохраненныйДок.Организация              = СтруктураРеквизитовФормы.Организация;
	СтруктураРеквизитовФормы.мСохраненныйДок.ДатаПодписи              = ДатаПодписи;
	СтруктураРеквизитовФормы.мСохраненныйДок.ЕдиницаИзмерения         = СтруктураРеквизитовФормы.ЕдиницаИзмерения;
	СтруктураРеквизитовФормы.мСохраненныйДок.ТочностьЕдиницыИзмерения = СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения;
	СтруктураРеквизитовФормы.мСохраненныйДок.ВидОтчетности            = Перечисления.ВидыОтчетности.РегламентированнаяОтчетность;
	СтруктураРеквизитовФормы.мСохраненныйДок.Комментарий              = Комментарий;
	СтруктураРеквизитовФормы.мСохраненныйДок.КодНалоговогоОргана      = КодИФНС;
	СтруктураРеквизитовФормы.мСохраненныйДок.КПП                      = КПП;
	СтруктураРеквизитовФормы.мСохраненныйДок.Вид                      = Вариант;
	СтруктураРеквизитовФормы.мСохраненныйДок.ПредставлениеВида
	= РегламентированнаяОтчетность.ПредставлениеВидаДокумента(СтруктураРеквизитовФормы.мСохраненныйДок.Вид);
	СтруктураРеквизитовФормы.мВариант = Вариант;
	
	СтруктураРеквизитовФормы.мСохраненныйДок.ФорматВыгрузки = "Автоматически";
	
	СохранитьДанныеРаздела(НаимТекРаздела, Ложь, Ложь);
	
	ЗаполнитьПустыеСтруктурыДанных();
	
	ПоказателиОтчета = Новый Структура();
	
	ЗаполнитьПоказателиОтчетаНаСервере(ПоказателиОтчета);  
	
	СписокСохранения = Новый Структура();
	
	СписокСохранения.Вставить("ПоказателиОтчета", ПоказателиОтчета);
	
	ДанныеМногостраничныхРазделов = Новый Структура;
	
	МассивТиповНеопределено = Новый Массив; 
	МассивТиповНеопределено.Добавить(Тип("Неопределено"));
	ОписаниеТиповНеопределено = Новый ОписаниеТипов(МассивТиповНеопределено);
	
	Для Каждого ЭлементСтруктуры Из мСтруктураМногостраничныхРазделов Цикл
		
		ДанныеМногостраничныхРазделов.Вставить(ЭлементСтруктуры.Ключ,
		ДанныеФормыВЗначение(ЭтаФорма[ЭлементСтруктуры.Значение], Тип("ТаблицаЗначений")));
		
		ТаблЗнач = Неопределено;
		
		Если ДанныеМногостраничныхРазделов.Свойство(ЭлементСтруктуры.Ключ, ТаблЗнач) Тогда
			
			Если НЕ ТаблЗнач.Колонки.Найти("Данные") = Неопределено Тогда
				
				ТаблЗнач.Колонки.Удалить("Данные");
				ТаблЗнач.Колонки.Добавить("Данные", ОписаниеТиповНеопределено);
				
				Ном = 0;
				
				Для Каждого СтрокаТаблЗнач Из ТаблЗнач Цикл
					
					СтрокаТаблЗнач.Данные = ЭтаФорма[ЭлементСтруктуры.Значение][Ном].Данные[0].Значение;
					Ном = Ном + 1;
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	СписокСохранения.Вставить("ДанныеМногостраничныхРазделов", ДанныеМногостраничныхРазделов);
	
	ДанныеВариантовАвтоЗаполнения = Новый Структура;
	
	Для Каждого ЭлементСтруктуры Из мСтруктураВариантыЗаполнения Цикл
		
		МассивТаблЗнач = Новый Массив;
		
		ДанныеВариантовАвтоЗаполнения.Вставить(ЭлементСтруктуры.Ключ, МассивТаблЗнач);
		
		Для Каждого ЭлементМассива Из ЭтаФорма["ТаблицаВариантыЗаполнения" + ЭлементСтруктуры.Ключ] Цикл
			
			МассивТаблЗнач.Добавить(ДанныеФормыВЗначение(ЭлементМассива.ТаблицаВариантовЗаполнения, Тип("ТаблицаЗначений")));
			
		КонецЦикла;
		
	КонецЦикла;
	
	СписокСохранения.Вставить("ДанныеВариантовАвтоЗаполнения", ДанныеВариантовАвтоЗаполнения);
	
	СписокСохранения.Вставить("ВерсияФормы", СтруктураРеквизитовФормы.мВерсияФормы);
	
	СписокСохранения.Вставить("ФлПодсчетСтраниц", СтруктураРеквизитовФормы.мСчетчикСтраниц);
	
	СписокСохранения.Вставить("ФлПроверятьСоотношенияПриПечатиИВыгрузки",
	СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки);
	
	СписокСохранения.Вставить("ФлОтклВыборЗначений", СтруктураРеквизитовФормы.мАвтоВыборКодов);
	
	СписокСохранения.Вставить("Автозаполнение", СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);
	
	СписокСохранения.Вставить("ПечатьБезШтрихкодаРазрешена", СтруктураРеквизитовФормы.мПечатьБезШтрихкодаРазрешена);
	
	ХранилищеДанных = Новый ХранилищеЗначения(СписокСохранения);
	СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета = ХранилищеДанных;
	
	Попытка
		СтруктураРеквизитовФормы.мСохраненныйДок.Записать();
		РегламентированнаяОтчетность.СохранитьСтатусОтправкиРеглОтчета(ЭтаФорма);
	Исключение
		Если НЕ Автосохранение Тогда
			
			Сообщение = Новый СообщениеПользователю;
			
			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='%1'"), РегламентированнаяОтчетностьКлиентСервер.СформироватьТекстСообщения(ОписаниеОшибки()));
			
			Сообщение.Сообщить();
			
		КонецЕсли;
		СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
		Возврат Ложь;
	КонецПопытки;
	
	Модифицированность = Ложь;
	
	СохранитьДеревоНастройкиСтраниц(СтруктураРеквизитовФормы.мСохраненныйДок);
	
	СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
	
	Если НЕ СтруктураРеквизитовФормы.мБезОткрытияФормы
		И НЕ СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
		
		ЗаблокироватьДанныеДляРедактирования(СтруктураРеквизитовФормы.мСохраненныйДок, , ЭтаФорма.УникальныйИдентификатор);
		
	КонецЕсли;
	
	Если ДанныеДляРазблокирования <> Неопределено Тогда
		РазблокироватьДанныеДляРедактирования(ДанныеДляРазблокирования.Ключ, ДанныеДляРазблокирования.ИдФормы);
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Процедура СохранитьДеревоНастройкиСтраниц(Знач мСохраненныйДок)
	
	Если мСохраненныйДок <> Неопределено Тогда
		
		Если ТипЗнч(мСохраненныйДок) = Тип("ДокументСсылка.РегламентированныйОтчет") Тогда
			мСохраненныйДок = мСохраненныйДок.ПолучитьОбъект();
		КонецЕсли;
		
		Если Не мСохраненныйДок.ЭтоНовый() Тогда
			ХранилищеДанных = Новый ХранилищеЗначения(РеквизитФормыВЗначение("мДеревоСтраницОтчета"));
			мСохраненныйДок.ДеревоНастройкиСтраниц = ХранилищеДанных;
			Попытка
				мСохраненныйДок.Записать();
			Исключение
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
Конецпроцедуры

&НаСервере
Процедура ЗаполнитьПоказателиОтчетаНаСервере(ПоказателиОтчета)
	
	Префикс = "ПолеТабличногоДокумента";
	
	Для Каждого Раздел Из мСвойстваРазделовДекларации.ПолучитьЭлементы() Цикл
		
		Если НЕ Раздел.МногостраничностьВРазделе Тогда
			ПоказателиОтчета.Вставить(Префикс + Раздел.ИмяСтраницы, ЭтаФорма["СтруктураДанных" + Раздел.ИмяСтраницы]);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДатуВЯчейкахНаКлиенте() Экспорт
	
	ЗаполнитьДатуВЯчейках(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДатуВЯчейкахНаСервере() Экспорт
	
	ЗаполнитьДатуВЯчейках(ЭтаФорма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьДатуВЯчейках(Форма)
	
	Форма["ТабличныйДокумент"].Области["ДатаПодписи"].Значение = Форма.ДатаПодписи;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если СтрНайти(Заголовок, СтруктураРеквизитовФормы.СтрПериодОтчета) = 0 Тогда
		Заголовок = Заголовок + " за " + СтруктураРеквизитовФормы.СтрПериодОтчета;
	КонецЕсли;
	
	ОргСтр = " (" + СтруктураРеквизитовФормы.НаимОрганизации + ")";
	Если СтрНайти(Заголовок, ОргСтр) = 0 Тогда
		Заголовок = Заголовок + ОргСтр;
	КонецЕсли;
	
	Заголовок = Заголовок + ?(СтрНайти(ЭтаФорма.ИмяФормы, "Внешний") > 0, " - внешний отчет", "");
	
	ПодключитьОбработчикОжидания("ВыполнитьПроверкуПередОткрытием", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПроверкуПередОткрытием()
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПриОткрытииЗавершение", ЭтотОбъект);
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередОткрытиемФормыРегламентированногоОтчета(
	ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытииЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Модифицированность = Ложь;
		Закрыть();
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	РегламентированнаяОтчетностьКлиент.ПередЗакрытиемРегламентированногоОтчета(
	ЭтаФорма, Отказ, СтандартнаяОбработка, ЗавершениеРаботы, ТекстПредупреждения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ЗавершениеРаботы Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ПриЗакрытииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПриЗакрытииНаСервере()
	
	РегламентированнаяОтчетность.ПриЗакрытииРегламентированногоОтчета(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура РазделыОтчетаПриАктивизацииСтроки(Элемент)
	
	Если Элемент.ТекущиеДанные = Неопределено
		ИЛИ Элемент.ТекущаяСтрока = СтруктураРеквизитовФормы.ТекущаяСтрокаРазделовОтчета Тогда
		Возврат;
	КонецЕсли;
	
	КМенюРО = Элементы.РазделыОтчета.КонтекстноеМеню;
	КМенюТД = Элементы.ТабличныйДокументКонтекстноеМеню;
	
	КМенюТД.Видимость = Ложь;
	
	СтруктураРеквизитовФормы.ТекущаяСтрокаРазделовОтчета = Элемент.ТекущаяСтрока;
	
	Элементы.ОчиститьТекущуюСтраницу.Доступность = Истина;
	
	Если СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере Тогда
		
		Если Элемент.ТекущиеДанные.РазделМногостраничный Тогда
			
			Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета
			= ?(Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета = Неопределено
			ИЛИ Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета = 0,
			1, Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета);
			
		КонецЕсли;
		
		ЗаголовокРаздела = Элемент.ТекущиеДанные.ПолучитьРодителя() = Неопределено;
		
		ВывестиМакетСтраницыВТабличныйДокументНаСервере(Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим,
		Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета, ЗаголовокРаздела);
		
	Иначе
		
		СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Истина;
		
	КонецЕсли;
		
	Если Элемент.ТекущиеДанные.РазделМногостраничный Тогда
		
		Элемент.Развернуть(Элемент.ТекущаяСтрока);
		
		КМенюРО.Видимость = Истина;
		
		Если Элемент.ТекущиеДанные.ПолучитьРодителя() = Неопределено
		 ИЛИ Элемент.ТекущиеДанные.ПолучитьРодителя().ПолучитьЭлементы().Количество() = 1 Тогда
			
			Если Элемент.ТекущиеДанные.ПолучитьРодителя() = Неопределено Тогда
				Элементы.ОчиститьТекущуюСтраницу.Доступность = Ложь;
			КонецЕсли;
			
			КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюКнопкаУдалитьСтраницу.Видимость  = Ложь;
			КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюКнопкаДобавитьСтраницу.Видимость = Истина;
			
		Иначе
			
			КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюКнопкаУдалитьСтраницу.Видимость  = Истина;
			КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюКнопкаДобавитьСтраницу.Видимость = Истина;
			
		КонецЕсли;
		
	Иначе
		
		КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюКнопкаУдалитьСтраницу.Видимость  = Ложь;
		КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюКнопкаДобавитьСтраницу.Видимость = Ложь;
		
	КонецЕсли;
	
	Если Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Титульный" Тогда
		Элементы.Обновить.Доступность = Истина;
	Иначе
		Элементы.Обновить.Доступность = Ложь;
	КонецЕсли;
	
	Элементы.ТабличныйДокумент.ТекущаяОбласть = ТабличныйДокумент.Область(1, 1);
	
КонецПроцедуры

&НаСервере
Процедура СохранитьДанныеРаздела(НаимРаздела, ОчищатьРазделЕслиЕстьМногострочность, ИзменятьАктивнуюСтраницу = Истина)
	
	// Многостраничные разделы.
	//
	Если НаимРаздела = "Раздел1"
	 ИЛИ НаимРаздела = "Раздел2" Тогда
		СтруктураДанных = Новый Структура;
		
		Для Каждого Область Из ТабличныйДокумент.Области Цикл
			Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник И Область.СодержитЗначение Тогда
				СтруктураДанных.Вставить(Область.Имя, Область.Значение);
			КонецЕсли;
		КонецЦикла;
		
		Если НаимРаздела = "Раздел1" Тогда
			НаимТаблицыСтраницы = "ТаблицаСтраницыРазделаРаздел1";
		ИначеЕсли НаимРаздела = "Раздел2" Тогда
			НаимТаблицыСтраницы = "ТаблицаСтраницыРазделаРаздел2";
		КонецЕсли;
		
		ТаблицаСтраницРаздела = Неопределено;
		мСтруктураМногостраничныхРазделов.Свойство(НаимРаздела, ТаблицаСтраницРаздела);
		ТаблицаСтраницРаздела = ЭтаФорма[ТаблицаСтраницРаздела];
		АктивнаяСтраница = ТаблицаСтраницРаздела.НайтиСтроки(Новый Структура("АктивнаяСтраница", Истина));
		
		Если АктивнаяСтраница.Количество() > 0 Тогда
			АктивнаяСтраница = АктивнаяСтраница[0];
			АктивнаяСтраница.Данные.Очистить();
			АктивнаяСтраница.Данные.Добавить(СтруктураДанных);
			АктивнаяСтраница.АктивнаяСтраница = НЕ ИзменятьАктивнуюСтраницу;
		КонецЕсли;
	
	// Обычные разделы.
	//
	Иначе
		ЭтаФорма["СтруктураДанных" + НаимРаздела] = СобратьДанныеТекущегоТаблПоля(ЭтаФорма, "ТабличныйДокумент");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиМакетСтраницыВТабличныйДокументНаСервере(ИмяТекРаздела, НомерСтраницыРазделаОтчета, ЗаголовокРаздела = Ложь)
	
	СохранитьДанныеРаздела(СтруктураРеквизитовФормы.НаимТекущегоРаздела, Истина);
	
	ВывестиМакетВТаблДокНаСервере(ИмяТекРаздела, НомерСтраницыРазделаОтчета, ЗаголовокРаздела);
	
	СтруктураРеквизитовФормы.НаимТекущегоРаздела  = ИмяТекРаздела;
	СтруктураРеквизитовФормы.НомерТекущейСтраницы = НомерСтраницыРазделаОтчета;
	
	УстановитьДоступностьОбластей(ЭтаФорма, ИмяТекРаздела);
	
	ИзменитьФорматНевведенныхПоказателей(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ВывестиМакетВТаблДокНаСервере(ИмяТекРаздела, НомерСтраницыРазделаОтчета, ЗаголовокРаздела = Ложь)
	
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(ЭтаФорма.ИмяФормы,
	СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + ИмяТекРаздела));
	
	// Многостраничные разделы.
	//
	Если ИмяТекРаздела = "Раздел1"
		ИЛИ ИмяТекРаздела = "Раздел2" Тогда
		
		Если ИмяТекРаздела = "Раздел1" Тогда
			НаимТаблицыСтраницы = "ТаблицаСтраницыРазделаРаздел1";
		ИначеЕсли ИмяТекРаздела = "Раздел2" Тогда
			НаимТаблицыСтраницы = "ТаблицаСтраницыРазделаРаздел2";
		КонецЕсли;
		
		Для Каждого ТаблицаСтраницы Из ЭтаФорма[НаимТаблицыСтраницы] Цикл
			Если ЭтаФорма[НаимТаблицыСтраницы].Количество() = 1 ИЛИ ЗаголовокРаздела Тогда
				Для Каждого Область Из ТабличныйДокумент.Области Цикл
					Если СтрЧислоВхождений(Область.Имя, "УдалитьСтраницу") > 0 Тогда
						Область.Текст = "";
						Область.Гиперссылка = Ложь;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			ТаблицаСтраницы.АктивнаяСтраница = Ложь;
		КонецЦикла;
		
		СтруктураДанных = Новый Структура;
		
		СписокДанных = ЭтаФорма[НаимТаблицыСтраницы][НомерСтраницыРазделаОтчета - 1].Данные;
		
		Для каждого ТаблицаСтраницы Из ЭтаФорма[НаимТаблицыСтраницы] Цикл
			ТаблицаСтраницы.АктивнаяСтраница = Ложь;
		КонецЦикла;
		
		ЭтаФорма[НаимТаблицыСтраницы][НомерСтраницыРазделаОтчета - 1].АктивнаяСтраница = Истина;
		
		Если СписокДанных.Количество() > 0 Тогда
			СтруктураДанных = СписокДанных[0].Значение;
		КонецЕсли;
		
		Для Каждого ЭлСтруктуры Из СтруктураДанных Цикл
			Попытка
				ТабличныйДокумент.Области[ЭлСтруктуры.Ключ].Значение = ЭлСтруктуры.Значение;
			Исключение
			КонецПопытки;
		КонецЦикла;
		
	// Обычные разделы.
	//
	Иначе
		Для Каждого ЭлСтруктуры Из ЭтаФорма["СтруктураДанных" + ИмяТекРаздела] Цикл
			Попытка
				ТабличныйДокумент.Области[ЭлСтруктуры.Ключ].Значение = ЭлСтруктуры.Значение;
			Исключение
			КонецПопытки;
		КонецЦикла;
	КонецЕсли;
	
	Если ИмяТекРаздела = "Титульный" Тогда
		УправлениеЛистамиНаСервере();
	Иначе
		УстановитьФорматВыводаНаСервере(ИмяТекРаздела);
		УстановитьЦветФонаЯчейкиНаСервере(,, ИмяТекРаздела);
	КонецЕсли;
	
	ИнициализироватьМаскиПолейВводаТабличныхДокументов(ИмяТекРаздела)
	
КонецПроцедуры

&НаСервере
Процедура УстановитьФорматВыводаНаСервере(НаимРаздела)
	
	УстановитьФорматВывода(ЭтаФорма, НаимРаздела);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьФорматВыводаНаКлиенте(НаимРаздела)
	
	УстановитьФорматВывода(ЭтаФорма, НаимРаздела);
	
КонецПроцедуры

&НаКлиенте
Процедура РасчетНаКлиенте(ИмяСтраницыПанели = "",  ОбластьИмя = "") Экспорт
	
	Расчет(ЭтаФорма, ИмяСтраницыПанели, ОбластьИмя);
	
КонецПроцедуры

&НаСервере
Процедура РасчетНаСервере(ИмяСтраницыПанели = "", ОбластьИмя = "") Экспорт
	
	Расчет(ЭтаФорма, ИмяСтраницыПанели, ОбластьИмя);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура Расчет(Форма, ИмяТекущейСтраницыПанели = "", ОбластьИмя = "") Экспорт
	
	Если Форма.СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Или Форма.СтруктураРеквизитовФормы.мРежимПечати Тогда
		Возврат;
	КонецЕсли;
	
	Если ИмяТекущейСтраницыПанели = "Раздел1" Тогда
		РасчетРаздела1(Форма, ОбластьИмя, Форма.ТабличныйДокумент);
	ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел2" Тогда
		РасчетРаздела2(Форма, ОбластьИмя, Форма.ТабличныйДокумент);
	ИначеЕсли ИмяТекущейСтраницыПанели = "" Тогда
		ПолныйРасчетРаздела2(Форма);
		РасчетРаздела2(Форма, , Форма.ТабличныйДокумент);
		ПолныйРасчетРаздела1(Форма);
		РасчетРаздела1(Форма, , Форма.ТабличныйДокумент);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РасчетРаздела1(Форма, ОбластьИмя = "", МестоРазмещенияДанных)
	
	Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел1"
		ИЛИ ТипЗнч(МестоРазмещенияДанных) = Тип("Структура") Тогда
		
		КоличествоСходныхБлоковНаЛисте = 3;
		
		Для Инд = 1 По КоличествоСходныхБлоковНаЛисте Цикл
			ПостфиксИмениОбласти = "_" + Формат(Инд, "ЧГ=0");
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
				Форма.СтруктураЗависимыхЯчеекДляАвторасчета["П000010002103" + ПостфиксИмениОбласти], ОбластьИмя) > 0 Тогда
				
				Строка020 = ПолучитьДанныеИзМестаРазмещения(МестоРазмещенияДанных, "П000010002003" + ПостфиксИмениОбласти);
				
				Если ЗначениеЗаполнено(Строка020) Тогда
					УсловиеСуммирования = Новый Структура;
					УсловиеСуммирования.Вставить("П000020002003", Строка020);
					Округлять = Истина;
					ЗначениеСтроки021 = Форма.СуммаПоказателяРазделаПоСтраницам(
					"Раздел2", "П000020030003", УсловиеСуммирования, Округлять);
				Иначе
					ЗначениеСтроки021 = 0;
				КонецЕсли;
				ПоместитьДанныеПоМестуРазмещения(МестоРазмещенияДанных, "П000010002103" + ПостфиксИмениОбласти, ЗначениеСтроки021);
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
				Форма.СтруктураЗависимыхЯчеекДляАвторасчета["П000010003003" + ПостфиксИмениОбласти], ОбластьИмя) > 0 Тогда
				
				Строка021 = ПолучитьДанныеИзМестаРазмещения(МестоРазмещенияДанных, "П000010002103" + ПостфиксИмениОбласти);
				Строка023 = ПолучитьДанныеИзМестаРазмещения(МестоРазмещенияДанных, "П000010002303" + ПостфиксИмениОбласти);
				Строка025 = ПолучитьДанныеИзМестаРазмещения(МестоРазмещенияДанных, "П000010002503" + ПостфиксИмениОбласти);
				Строка027 = ПолучитьДанныеИзМестаРазмещения(МестоРазмещенияДанных, "П000010002703" + ПостфиксИмениОбласти);
				
				СуммаНалога = Строка021 - Строка023 - Строка025 - Строка027;
				
				ЗначениеСтроки30 = Макс(0, СуммаНалога);
				ЗначениеСтроки40 = -Мин(0, СуммаНалога);
				
				ПоместитьДанныеПоМестуРазмещения(МестоРазмещенияДанных, "П000010003003" + ПостфиксИмениОбласти, ЗначениеСтроки30);
				ПоместитьДанныеПоМестуРазмещения(МестоРазмещенияДанных, "П000010004003" + ПостфиксИмениОбласти, ЗначениеСтроки40);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РасчетРаздела2(Форма, ОбластьИмя = "", МестоРазмещенияДанных)
	
	Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел2"
		ИЛИ ТипЗнч(МестоРазмещенияДанных) = Тип("Структура") Тогда
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
			Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000020014003, ОбластьИмя) > 0 Тогда
			
			НачПериодаОтчета = НачалоДня(Форма.СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
			КонПериодаОтчета = НачалоДня(Форма.СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
			
			ЛеваяГраница = НачалоДня(ПолучитьДанныеИзМестаРазмещения(МестоРазмещенияДанных, "П000020007003"));
			Если НЕ ЗначениеЗаполнено(ЛеваяГраница) Тогда
				ЛеваяГраница = Неопределено;
			Иначе
				ЛеваяГраница = ?(ЛеваяГраница <= КонПериодаОтчета, Макс(ЛеваяГраница, НачПериодаОтчета), Неопределено);
			КонецЕсли;
			ПраваяГраница = НачалоДня(ПолучитьДанныеИзМестаРазмещения(МестоРазмещенияДанных, "П000020008003"));
			Если НЕ ЗначениеЗаполнено(ПраваяГраница) Тогда
				ПраваяГраница = КонПериодаОтчета;
			Иначе
				ПраваяГраница = ?(ПраваяГраница >= НачПериодаОтчета, Мин(ПраваяГраница, КонПериодаОтчета), Неопределено);
			КонецЕсли;
			
			МесяцыВладения = 0;
			
			Если ЗначениеЗаполнено(ЛеваяГраница) И ЗначениеЗаполнено(ПраваяГраница) И ЛеваяГраница <= ПраваяГраница Тогда
				ГодСтрока = Формат(Год(КонПериодаОтчета), "ЧГ=");
				Для НомМесяца = 1 По 12 Цикл
					МесяцСтрока = Формат(НомМесяца, "ЧЦ=2;ЧВН=");
					СерединаМесяца = НачалоДня(Дата(ГодСтрока + МесяцСтрока + "15"));
					Если ЛеваяГраница <= СерединаМесяца И ПраваяГраница > СерединаМесяца Тогда
						МесяцыВладения = МесяцыВладения + 1;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			ПоместитьДанныеПоМестуРазмещения(МестоРазмещенияДанных, "П000020014003", МесяцыВладения);
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
			Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000020016003, ОбластьИмя) > 0 Тогда
			
			ЗначениеСтроки140 = ПолучитьДанныеИзМестаРазмещения(МестоРазмещенияДанных, "П000020014003");
			ЗначениеДляСтроки160 = Окр(ЗначениеСтроки140 / 12, 4);
			ПоместитьДанныеПоМестуРазмещения(МестоРазмещенияДанных, "П000020016003", ЗначениеДляСтроки160);
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
			Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000020019003, ОбластьИмя) > 0 Тогда
			
			ЗначениеСтроки090 = ПолучитьДанныеИзМестаРазмещения(МестоРазмещенияДанных, "П000020009003");
			ЗначениеСтроки170 = ПолучитьДанныеИзМестаРазмещения(МестоРазмещенияДанных, "П000020017003");
			ЗначениеСтроки160 = ПолучитьДанныеИзМестаРазмещения(МестоРазмещенияДанных, "П000020016003");
			
			ЗначениеСтроки150_Числ = ПолучитьДанныеИзМестаРазмещения(МестоРазмещенияДанных, "П000020015003_Числ");
			ЗначениеСтроки150_Знам = ПолучитьДанныеИзМестаРазмещения(МестоРазмещенияДанных, "П000020015003_Знам");
			ЗначениеСтроки150 = 0;
			Если ЗначениеСтроки150_Числ > 0 И ЗначениеСтроки150_Знам > 0 Тогда
				ЗначениеСтроки150 = ЗначениеСтроки150_Числ / ЗначениеСтроки150_Знам;
			КонецЕсли;
			
			ЗначениеСтроки180 = ПолучитьДанныеИзМестаРазмещения(МестоРазмещенияДанных, "П000020018003");
			ЗначениеСтроки180 = ?(ЗначениеСтроки180 = 0, 1, ЗначениеСтроки180);
			
			ЗначениеДляСтроки190
			= ЗначениеСтроки090 * ЗначениеСтроки170 * ЗначениеСтроки150 * ЗначениеСтроки160 * ЗначениеСтроки180;
			ЗначениеДляСтроки190 = Окр(ЗначениеДляСтроки190, 2);
			ПоместитьДанныеПоМестуРазмещения(МестоРазмещенияДанных, "П000020019003", ЗначениеДляСтроки190);
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
			Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000020021003, ОбластьИмя) > 0 Тогда
			
			ЗначениеСтроки200 = ПолучитьДанныеИзМестаРазмещения(МестоРазмещенияДанных, "П000020020003");
			
			ЗначениеДляСтроки210 = Окр(ЗначениеСтроки200 / 12, 4);
			ПоместитьДанныеПоМестуРазмещения(МестоРазмещенияДанных, "П000020021003", ЗначениеДляСтроки210);
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
			Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000020023003, ОбластьИмя) > 0 Тогда
			
			ЗначениеСтроки090 = ПолучитьДанныеИзМестаРазмещения(МестоРазмещенияДанных, "П000020009003");
			ЗначениеСтроки170 = ПолучитьДанныеИзМестаРазмещения(МестоРазмещенияДанных, "П000020017003");
			ЗначениеСтроки210 = ПолучитьДанныеИзМестаРазмещения(МестоРазмещенияДанных, "П000020021003");
			
			ЗначениеСтроки150_Числ = ПолучитьДанныеИзМестаРазмещения(МестоРазмещенияДанных, "П000020015003_Числ");
			ЗначениеСтроки150_Знам = ПолучитьДанныеИзМестаРазмещения(МестоРазмещенияДанных, "П000020015003_Знам");
			ЗначениеСтроки150 = 0;
			Если ЗначениеСтроки150_Числ > 0 И ЗначениеСтроки150_Знам > 0 Тогда
				ЗначениеСтроки150 = ЗначениеСтроки150_Числ / ЗначениеСтроки150_Знам;
			КонецЕсли;
			
			ЗначениеСтроки180 = ПолучитьДанныеИзМестаРазмещения(МестоРазмещенияДанных, "П000020018003");
			ЗначениеСтроки180 = ?(ЗначениеСтроки180 = 0, 1, ЗначениеСтроки180);
			
			КодЛьготыВСтроке220 = ПолучитьДанныеИзМестаРазмещения(МестоРазмещенияДанных, "П000020022003_КодЛьготы");
			Если Не ПустаяСтрока(КодЛьготыВСтроке220) Тогда
				ЗначениеДляСтроки230
				= ЗначениеСтроки090 * ЗначениеСтроки170 * ЗначениеСтроки150 * ЗначениеСтроки180 * ЗначениеСтроки210;
				ЗначениеДляСтроки230 = Окр(ЗначениеДляСтроки230, 2);
				ПоместитьДанныеПоМестуРазмещения(МестоРазмещенияДанных, "П000020023003", ЗначениеДляСтроки230);
			КонецЕсли;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
			Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000020025003, ОбластьИмя) > 0 Тогда
			
			ЗначениеСтроки090  = ПолучитьДанныеИзМестаРазмещения(МестоРазмещенияДанных, "П000020009003");
			ЗначениеСтроки170  = ПолучитьДанныеИзМестаРазмещения(МестоРазмещенияДанных, "П000020017003");
			ЗначениеСтроки210  = ПолучитьДанныеИзМестаРазмещения(МестоРазмещенияДанных, "П000020021003");
			ЗначениеСтроки240а = ПолучитьДанныеИзМестаРазмещения(МестоРазмещенияДанных, "П000020024003_Процент");
			
			ЗначениеСтроки150_Числ = ПолучитьДанныеИзМестаРазмещения(МестоРазмещенияДанных, "П000020015003_Числ");
			ЗначениеСтроки150_Знам = ПолучитьДанныеИзМестаРазмещения(МестоРазмещенияДанных, "П000020015003_Знам");
			ЗначениеСтроки150 = 0;
			Если ЗначениеСтроки150_Числ > 0 И ЗначениеСтроки150_Знам > 0 Тогда
				ЗначениеСтроки150 = ЗначениеСтроки150_Числ / ЗначениеСтроки150_Знам;
			КонецЕсли;
			
			ЗначениеСтроки180 = ПолучитьДанныеИзМестаРазмещения(МестоРазмещенияДанных, "П000020018003");
			ЗначениеСтроки180 = ?(ЗначениеСтроки180 = 0, 1, ЗначениеСтроки180);
			
			КодЛьготыВСтроке240 = ПолучитьДанныеИзМестаРазмещения(МестоРазмещенияДанных, "П000020024003_КодЛьготы");
			Если Не ПустаяСтрока(КодЛьготыВСтроке240) Тогда
				ЗначениеДляСтроки250 = ЗначениеСтроки090 * ЗначениеСтроки170 * ЗначениеСтроки150
				* ЗначениеСтроки180 * ЗначениеСтроки210 * (ЗначениеСтроки240а / 100);
				ЗначениеДляСтроки250 = Окр(ЗначениеДляСтроки250, 2);
				ПоместитьДанныеПоМестуРазмещения(МестоРазмещенияДанных, "П000020025003", ЗначениеДляСтроки250);
			КонецЕсли;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
			Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000020027003, ОбластьИмя) > 0 Тогда
			
			ЗначениеСтроки090  = ПолучитьДанныеИзМестаРазмещения(МестоРазмещенияДанных, "П000020009003");
			ЗначениеСтроки170  = ПолучитьДанныеИзМестаРазмещения(МестоРазмещенияДанных, "П000020017003");
			ЗначениеСтроки210  = ПолучитьДанныеИзМестаРазмещения(МестоРазмещенияДанных, "П000020021003");
			ЗначениеСтроки260а = ПолучитьДанныеИзМестаРазмещения(МестоРазмещенияДанных, "П000020026003_Ставка");
			
			ЗначениеСтроки150_Числ = ПолучитьДанныеИзМестаРазмещения(МестоРазмещенияДанных, "П000020015003_Числ");
			ЗначениеСтроки150_Знам = ПолучитьДанныеИзМестаРазмещения(МестоРазмещенияДанных, "П000020015003_Знам");
			ЗначениеСтроки150 = 0;
			Если ЗначениеСтроки150_Числ > 0 И ЗначениеСтроки150_Знам > 0 Тогда
				ЗначениеСтроки150 = ЗначениеСтроки150_Числ / ЗначениеСтроки150_Знам;
			КонецЕсли;
			
			ЗначениеСтроки180 = ПолучитьДанныеИзМестаРазмещения(МестоРазмещенияДанных, "П000020018003");
			ЗначениеСтроки180 = ?(ЗначениеСтроки180 = 0, 1, ЗначениеСтроки180);
			
			КодЛьготыВСтроке260 = ПолучитьДанныеИзМестаРазмещения(МестоРазмещенияДанных, "П000020026003_КодЛьготы");
			Если Не ПустаяСтрока(КодЛьготыВСтроке260) Тогда
				ЗначениеДляСтроки270 = ((ЗначениеСтроки090 * ЗначениеСтроки170) - (ЗначениеСтроки090 * ЗначениеСтроки260а))
				* ЗначениеСтроки150 * ЗначениеСтроки180 * ЗначениеСтроки210;
			Иначе
				ЗначениеДляСтроки270 = 0;
			КонецЕсли;
			ЗначениеДляСтроки270 = Окр(ЗначениеДляСтроки270, 2);
			ПоместитьДанныеПоМестуРазмещения(МестоРазмещенияДанных, "П000020027003", ЗначениеДляСтроки270);
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
			ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000020030003, ОбластьИмя) > 0 Тогда
			
			ЗначениеСтроки190 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, ПолучитьДанныеИзМестаРазмещения(МестоРазмещенияДанных, "П000020019003"));
			ЗначениеСтроки230 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, ПолучитьДанныеИзМестаРазмещения(МестоРазмещенияДанных, "П000020023003"));
			ЗначениеСтроки250 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, ПолучитьДанныеИзМестаРазмещения(МестоРазмещенияДанных, "П000020025003"));
			ЗначениеСтроки270 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, ПолучитьДанныеИзМестаРазмещения(МестоРазмещенияДанных, "П000020027003"));
			ЗначениеСтроки290 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, ПолучитьДанныеИзМестаРазмещения(МестоРазмещенияДанных, "П000020029003"));
			
			Если ЗначениеСтроки230 <> 0 Тогда
				ЗначениеДляСтроки300 = ЗначениеСтроки190 - ЗначениеСтроки230 - ЗначениеСтроки290;
			Иначе
				ЗначениеДляСтроки300 = ЗначениеСтроки190 - ЗначениеСтроки250 - ЗначениеСтроки270 - ЗначениеСтроки290;
			КонецЕсли;
			ЗначениеДляСтроки300 = Макс(0, ЗначениеДляСтроки300);
			ПоместитьДанныеПоМестуРазмещения(МестоРазмещенияДанных, "П000020030003", ЗначениеДляСтроки300);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьДанныеИзМестаРазмещения(МестоРазмещенияДанных, АдресДанных)
	
	Если ТипЗнч(МестоРазмещенияДанных) = Тип("Структура") Тогда
		ЗначениеВСтруктуре = Неопределено;
		Если МестоРазмещенияДанных.Свойство(АдресДанных, ЗначениеВСтруктуре) Тогда
			Возврат ЗначениеВСтруктуре;
		Иначе
			ВызватьИсключение "Невозможно получить данные из структуры: поле " + АдресДанных + " не существует";
		КонецЕсли;
	Иначе
		Возврат МестоРазмещенияДанных.Области[АдресДанных].Значение;
	КонецЕсли;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ПоместитьДанныеПоМестуРазмещения(МестоРазмещенияДанных, АдресДанных, ЗначениеДанных)
	
	Если ТипЗнч(МестоРазмещенияДанных) = Тип("Структура") Тогда
		МестоРазмещенияДанных.Вставить(АдресДанных, ЗначениеДанных);
	Иначе
		МестоРазмещенияДанных.Области[АдресДанных].Значение = ЗначениеДанных;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПолныйРасчетРаздела1(Форма)
	
	СтруктураРаздела = Неопределено;
	Форма.мСтруктураМногостраничныхРазделов.Свойство("Раздел1", СтруктураРаздела);
	СтруктураРаздела = Форма[СтруктураРаздела];
	
	Для Каждого СтраницаРаздела Из СтруктураРаздела Цикл
		РазмещениеДанных = СтраницаРаздела.Данные[0].Значение;
		РасчетРаздела1(Форма, , РазмещениеДанных);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПолныйРасчетРаздела2(Форма)
	
	СтруктураРаздела = Неопределено;
	Форма.мСтруктураМногостраничныхРазделов.Свойство("Раздел2", СтруктураРаздела);
	СтруктураРаздела = Форма[СтруктураРаздела];
	
	Для Каждого СтраницаРаздела Из СтруктураРаздела Цикл
		РазмещениеДанных = СтраницаРаздела.Данные[0].Значение;
		РасчетРаздела2(Форма, , РазмещениеДанных);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуНастроек(Команда)
	
	ОткрытьФормуВыбораСтраниц("ВыбратьДляНастройки");
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораСтраниц(ВариантВыбора)
	
	Перем ТекущийРазделОтчетаСокрНаим;
	Перем НомерСтраницыРазделаОтчета;
	
	Если НЕ Элементы.РазделыОтчета.ТекущиеДанные = Неопределено Тогда
		ТекущийРазделОтчетаСокрНаим = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
		НомерСтраницыРазделаОтчета  = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета;
	КонецЕсли;
	
	мПараметры = Новый Структура;
	мПараметры.Вставить("ПроверкаСоотношений", Истина);
	мПараметры.Вставить("Автосохранение", Ложь);
	мПараметры.Вставить("ИмеетсяРеквизитДеревоВыбранныхСтраниц", Истина);
	
	Если СтруктураРеквизитовФормы.ДоступенМеханизмПечатиРеглОтчетностиСДвухмернымШтрихкодомPDF417 Тогда
		мПараметры.Вставить("РазрешитьВстроеннуюПечать", Истина);
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ФлажокОтклАвтоРасчет", СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);
	ПараметрыФормы.Вставить("мПечатьБезШтрихкодаРазрешена", СтруктураРеквизитовФормы.мПечатьБезШтрихкодаРазрешена);
	ПараметрыФормы.Вставить("мСчетчикСтраниц", СтруктураРеквизитовФормы.мСчетчикСтраниц);
	ПараметрыФормы.Вставить("мАвтоВыборКодов", СтруктураРеквизитовФормы.мАвтоВыборКодов);
	ПараметрыФормы.Вставить("мПроверятьСоотношенияПриПечатиИВыгрузки",
	СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки);
	ПараметрыФормы.Вставить("ЕдиницаИзмерения", СтруктураРеквизитовФормы.ЕдиницаИзмерения);
	ПараметрыФормы.Вставить("ТочностьЕдиницыИзмерения", СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения);
	ПараметрыФормы.Вставить("мПараметры", мПараметры);
	
	ФормаНастройкиОтчета = РегламентированнаяОтчетностьКлиент.ПолучитьОбщуюФормуПоИмени(
	"НастройкиОтчета", ПараметрыФормы, ЭтаФорма);
	
	мДеревоВыбранныхСтраниц.ПолучитьЭлементы().Очистить();
	
	КопироватьДанныеФормы(мДеревоСтраницОтчета, ФормаНастройкиОтчета.Дерево);
	
	ЗначениеАвторасчета = СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет;
	ЗначениеЕдИзм       = СтруктураРеквизитовФормы.ЕдиницаИзмерения;
	ЗначениеЗпт         = СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения;
	
	ДополнительныеПараметры = Новый Структура(
		"ЗначениеАвторасчета, ЗначениеЕдИзм, ЗначениеЗпт, НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим",
		ЗначениеАвторасчета, ЗначениеЕдИзм, ЗначениеЗпт, НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим);
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ОткрытьФормуВыбораСтраницЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ФормаНастройкиОтчета.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
	ФормаНастройкиОтчета.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	ФормаНастройкиОтчета.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораСтраницЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	ЗначениеАвторасчета = ДополнительныеПараметры.ЗначениеАвторасчета;
	ЗначениеЕдИзм = ДополнительныеПараметры.ЗначениеЕдИзм;
	ЗначениеЗпт = ДополнительныеПараметры.ЗначениеЗпт;
	НомерСтраницыРазделаОтчета = ДополнительныеПараметры.НомерСтраницыРазделаОтчета;
	ТекущийРазделОтчетаСокрНаим = ДополнительныеПараметры.ТекущийРазделОтчетаСокрНаим;
	
	РегламентированнаяОтчетностьКлиентСервер.ПоказатьКнопкиПечати(ЭтаФорма);
	Модифицированность = Истина;
	
	флЗначенияИдентичны = Истина;
	
	Для Индекс = 0 По мДеревоСтраницОтчета.ПолучитьЭлементы().Количество() - 1 Цикл
		
		Если НЕ мДеревоСтраницОтчета.ПолучитьЭлементы()[Индекс].ПоказатьСтраницу
			= мДеревоВыбранныхСтраниц.ПолучитьЭлементы()[Индекс].ПоказатьСтраницу Тогда
			флЗначенияИдентичны = Ложь;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЗначениеАвторасчета <> СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Тогда
		
		Если СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет = Ложь Тогда
			
			ДополнительныеПараметры = Новый Структура(
			"НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим, флЗначенияИдентичны, ЗначениеЕдИзм, ЗначениеЗпт",
			НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим, флЗначенияИдентичны, ЗначениеЕдИзм, ЗначениеЗпт);
			ОписаниеОповещения = Новый ОписаниеОповещения(
			"ВопросПерерасчетВсехРассчитываемыхПоказателейЗавершение", ЭтотОбъект, ДополнительныеПараметры);
			ТекстВопроса = НСтр("ru='Будет произведен перерасчет всех рассчитываемых показателей. Продолжить?'");
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
			
		Иначе
			
			#Если ВебКлиент Тогда
				ИзменитьТаблицуВариантовЗаполненияНаСервере();
			#Иначе
				РегламентированнаяОтчетностьКлиентСервер.ИзменитьТаблицуВариантовЗаполнения(
				ЭтаФорма, НЕ СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);
			#КонецЕсли
			
			УстановитьДоступностьОбластей(ЭтаФорма, ТекущийРазделОтчетаСокрНаим);
			ИзменитьФорматНевведенныхПоказателей(Этаформа);
			
			ДопПараметры = Новый Структура(
			"НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим, флЗначенияИдентичны, ЗначениеЕдИзм, ЗначениеЗпт",
			НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим, флЗначенияИдентичны, ЗначениеЕдИзм, ЗначениеЗпт);
			ПослеОткрытияФормыВыбораСтраниц(ДопПараметры);
			
		КонецЕсли;
		
	Иначе
		
		ДопПараметры = Новый Структура(
		"НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим, флЗначенияИдентичны, ЗначениеЕдИзм, ЗначениеЗпт",
		НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим, флЗначенияИдентичны, ЗначениеЕдИзм, ЗначениеЗпт);
		ПослеОткрытияФормыВыбораСтраниц(ДопПараметры);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПерерасчетВсехРассчитываемыхПоказателейЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	ЗначениеЕдИзм = ДополнительныеПараметры.ЗначениеЕдИзм;
	ЗначениеЗпт = ДополнительныеПараметры.ЗначениеЗпт;
	НомерСтраницыРазделаОтчета = ДополнительныеПараметры.НомерСтраницыРазделаОтчета;
	ТекущийРазделОтчетаСокрНаим = ДополнительныеПараметры.ТекущийРазделОтчетаСокрНаим;
	флЗначенияИдентичны = ДополнительныеПараметры.флЗначенияИдентичны;
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет = Истина;
		Возврат;
	КонецЕсли;
	
	ЭтоВебКлиент = Ложь;
	#Если ВебКлиент Тогда
		ЭтоВебКлиент = Истина;
	#КонецЕсли
	
	Если ТекущийРазделОтчетаСокрНаим = "Раздел1" Тогда
		
		РегламентированнаяОтчетностьКлиент.ОбновитьДеревоРазделовВФормеОтчета(ЭтаФорма);
		
		РасчетИФормированиеРаздела1(ТекущийРазделОтчетаСокрНаим, НомерСтраницыРазделаОтчета, ЭтоВебКлиент);
		
		СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
		
		РегламентированнаяОтчетностьКлиент.ОбновитьДеревоРазделовВФормеОтчета(ЭтаФорма);
		
		СтруктураРеквизитовФормы.НомерТекущейСтраницы
		= Элементы.РазделыОтчета.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета;
		
		УстановитьДоступностьОбластей(ЭтаФорма, ТекущийРазделОтчетаСокрНаим);
		
		ИзменитьФорматНевведенныхПоказателей(Этаформа);
		
	Иначе
		
		РасчетИФормированиеРаздела1(ТекущийРазделОтчетаСокрНаим, НомерСтраницыРазделаОтчета, ЭтоВебКлиент);
		
		СтруктураРеквизитовФормы.НаимТекущегоРаздела  = ТекущийРазделОтчетаСокрНаим;
		СтруктураРеквизитовФормы.НомерТекущейСтраницы = НомерСтраницыРазделаОтчета;
		
		УстановитьДоступностьОбластей(ЭтаФорма, ТекущийРазделОтчетаСокрНаим);
		
		ИзменитьФорматНевведенныхПоказателей(ЭтаФорма);
		
		СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
		
		РегламентированнаяОтчетностьКлиент.ОбновитьДеревоРазделовВФормеОтчета(ЭтаФорма);
		
	КонецЕсли;
	
	ДопПараметры = Новый Структура(
		"НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим, флЗначенияИдентичны, ЗначениеЕдИзм, ЗначениеЗпт",
		НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим, флЗначенияИдентичны, ЗначениеЕдИзм, ЗначениеЗпт);
	ПослеОткрытияФормыВыбораСтраниц(ДопПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеОткрытияФормыВыбораСтраниц(ДополнительныеПараметры)
	
	НомерСтраницыРазделаОтчета  = ДополнительныеПараметры.НомерСтраницыРазделаОтчета;
	ТекущийРазделОтчетаСокрНаим = ДополнительныеПараметры.ТекущийРазделОтчетаСокрНаим;
	флЗначенияИдентичны         = ДополнительныеПараметры.флЗначенияИдентичны;
	ЗначениеЕдИзм               = ДополнительныеПараметры.ЗначениеЕдИзм;
	ЗначениеЗпт                 = ДополнительныеПараметры.ЗначениеЗпт;
	
	Если ЗначениеЕдИзм <> СтруктураРеквизитовФормы.ЕдиницаИзмерения
		ИЛИ ЗначениеЗпт <> СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения Тогда
		ПослеСменыЕдИзмеренияИТочности();
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ПоказатьСтраницыОтчетаНаКлиенте(ЭтаФорма);
	
	Если НЕ флЗначенияИдентичны Тогда
		
		СформироватьДеревоРазделовОтчетаНаКлиенте();
		
		Если НЕ ТекущийРазделОтчетаСокрНаим = Неопределено Тогда
			
			НайденнаяСтрока = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(
			РазделыОтчета.ПолучитьЭлементы(), "КолонкаРазделыОтчетаСокрНаим", ТекущийРазделОтчетаСокрНаим);
			
			Если НЕ НайденнаяСтрока = Неопределено И НЕ НомерСтраницыРазделаОтчета = Неопределено
				И НайденнаяСтрока.ПолучитьЭлементы().Количество() > 0 Тогда
				
				НайденнаяСтрока = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(
				НайденнаяСтрока.ПолучитьЭлементы(), "КолонкаНомерСтраницыРазделаОтчета", НомерСтраницыРазделаОтчета);
				
			КонецЕсли;
			
			Если НЕ НайденнаяСтрока = Неопределено Тогда
				
				Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяСтрока.ПолучитьИдентификатор();
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура РасчетИФормированиеРаздела1(НаимТекРаздела, НомТекСтраницы, ЭтоВебКлиент)
	
	Если НЕ НаимТекРаздела = "Раздел1" Тогда
		СохранитьДанныеРаздела(НаимТекРаздела, , Ложь);
	КонецЕсли;
	
	СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
	
	РасчетНаСервере();
	
	СформироватьРаздел1();
	
	Если НаимТекРаздела = "Раздел1" Тогда
		СохранитьДанныеРаздела(НаимТекРаздела, , Ложь);
	Иначе
		ВывестиМакетВТаблДокНаСервере(НаимТекРаздела, НомТекСтраницы);
	КонецЕсли;
	
	Если ЭтоВебКлиент Тогда
		ИзменитьТаблицуВариантовЗаполненияНаСервере();
	Иначе
		РегламентированнаяОтчетностьКлиентСервер.ИзменитьТаблицуВариантовЗаполнения(
		ЭтаФорма, НЕ СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);
	КонецЕсли;
	
	РасчетНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьТаблицуВариантовЗаполненияНаСервере()
	
	РегламентированнаяОтчетностьКлиентСервер.ИзменитьТаблицуВариантовЗаполнения(
	ЭтаФорма, НЕ СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);
	
	РегламентированнаяОтчетность.ПолучитьСведенияОПоказателяхОтчета(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеСменыЕдИзмеренияИТочности()
	
	ПроверитьТочность();
	
	#Если ВебКлиент Тогда
		УстановитьФорматВыводаНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	#Иначе
		УстановитьФорматВыводаНаКлиенте(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	#КонецЕсли
	
	ИзменитьФорматНевведенныхПоказателей(ЭтаФорма);
	
	РасчетНаКлиенте(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьТочность()
	
	Если СтруктураРеквизитовФормы.ЕдиницаИзмерения
		= ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1 Тогда
		
		Если СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения > 2 Тогда
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр(
			"ru='%1: при выводе сумм в рублях точность не может превышать 2 знака'"), ЭтаФорма.Заголовок);
			Сообщение.Сообщить();
			
			СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = 2;
			
		КонецЕсли;
		
	ИначеЕсли СтруктураРеквизитовФормы.ЕдиницаИзмерения
		= ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1000 Тогда
		
		Если СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения > 3 Тогда
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр(
			"ru='%1: при выводе сумм в тысячах рублей точность не может превышать 3 знака'"), ЭтаФорма.Заголовок);
			Сообщение.Сообщить();
			
			СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = 3;
			
		КонецЕсли;
		
	ИначеЕсли СтруктураРеквизитовФормы.ЕдиницаИзмерения
		= ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1000000 Тогда
		
		Если СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения > 6 Тогда
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр(
			"ru='%1: при выводе сумм в миллионах рублей точность не может превышать 6 знаков'"), ЭтаФорма.Заголовок);
			Сообщение.Сообщить();
			
			СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = 6;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Обновить(Команда)
	
	СтруктураРеквизитовФормы.мВпрограммеИзмененаОрганизация = Истина;
	ЗаполнитьСведенияОбОрганизацииНаСервере();
	СтруктураРеквизитовФормы.мВпрограммеИзмененаОрганизация = Ложь;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьОтчет(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОчиститьОтчетЗавершение", ЭтотОбъект);
	РегламентированнаяОтчетностьКлиент.МеханизмыОчисткиРегламентированныхОтчетов(
	ЭтаФорма, "ОчиститьВесьОтчет", ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьОтчетЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	УстановитьДоступностьОбластей(ЭтаФорма, СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	ИзменитьФорматНевведенныхПоказателей(ЭтаФорма);
	
	СтруктураРеквизитовФормы.НомерТекущейСтраницы
	= Элементы.РазделыОтчета.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТекущуюСтраницу(Команда)
	
	КБК = "";
	Если Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Раздел1" Тогда
		КБК = ТабличныйДокумент.Области.П000010001003.Значение;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура("КБК", КБК);
	ОписаниеОповещения = Новый ОписаниеОповещения("ОчиститьТекущуюСтраницуЗавершение", ЭтотОбъект,
	ДополнительныеПараметры);
	РегламентированнаяОтчетностьКлиент.МеханизмыОчисткиРегламентированныхОтчетов(ЭтаФорма,
	"ОчиститьТекущийЭкземплярМногостраничногоРаздела" + Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим,
	ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТекущуюСтраницуЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	УстановитьДоступностьОбластей(ЭтаФорма, СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	ИзменитьФорматНевведенныхПоказателей(ЭтаФорма);
	
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел1" Тогда
		ТабличныйДокумент.Области.П000010001003.Значение = ДополнительныеПараметры.КБК;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТабличныйДокументПриИзмененииСодержимогоОбласти(Элемент, Область)
	
	ОбластьИмя = Элемент.ТекущаяОбласть.Имя;
	
	Если (СтрНайти(ОбластьИмя, "R") > 0) ИЛИ (СтрНайти(ОбластьИмя, "C") > 0)
		ИЛИ (СтрНайти(ОбластьИмя, "НомСтр") > 0) Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
		
		Если СтрНайти(ОбластьИмя, "ОКВЭД") > 0 Тогда
			
			Если НЕ РегламентированнаяОтчетностьКлиентСервер.ОКВЭДСоответствуетТребованиям(Область.Значение) Тогда
				
				Сообщение = Новый СообщениеПользователю;
				
				Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр(
				"ru='На титульном листе задано некорректное значение кода вида деятельности по ОКВЭД!%1Допустимы значения, соответствующие следующим шаблонам:%2""XX"", ""XX.X"", ""XX.XX"", ""XX.XX.X"", ""XX.XX.XX"" (X - любая цифра).'"),
				Символы.ПС, Символы.ПС);
				
				Сообщение.Сообщить();
				
			КонецЕсли;
			
		ИначеЕсли СтрНайти(ОбластьИмя, "ДатаПодписи") > 0 Тогда	
			
			ДатаПодписи = ТабличныйДокумент.Области.ДатаПодписи.Значение;
			
			ЗаполнитьСведенияОбОрганизацииНаСервере(Истина);
			
			СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация = Истина;
			
			ЗаполнитьДатуВЯчейкахНаКлиенте();
			
			СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация = Ложь;
			
		ИначеЕсли СтрНайти(ОбластьИмя, "НомерКорректировки") > 0 Тогда		
			
			НомерКорректировки = ТабличныйДокумент.Области.НомерКорректировки.Значение;
			
			СтруктураРеквизитовФормы.ВидДокумента = ?(Область.Значение = 0, 0, 1);
			
			РегламентированнаяОтчетностьКлиентСервер.УстановитьЗначениеОКВЭД(ДатаПодписи,
			СтруктураРеквизитовФормы,
			ТабличныйДокумент.Области.ОКВЭД.Значение);
			
		КонецЕсли;
		
	ИначеЕсли СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел1" Тогда
		
		РасчетНаКлиенте("Раздел1", ОбластьИмя);
		
		ИзменитьФорматНевведенныхПоказателей(ЭтаФорма);
		
	ИначеЕсли СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел2" Тогда
		
		ЭтоПолеВводаКоличестваМесяцев = (ОбластьИмя = "П000020014003" ИЛИ ОбластьИмя = "П000020020003");
		Если ЭтоПолеВводаКоличестваМесяцев И Область.Значение > 12 Тогда
			Область.Значение = 12;
		КонецЕсли;
		
		Если ОбластьИмя = "П000020022003_КодЛьготы"
			ИЛИ ОбластьИмя = "П000020024003_КодЛьготы"
			ИЛИ ОбластьИмя = "П000020026003_КодЛьготы" Тогда
			
			УстановитьДоступностьОбластей(ЭтаФорма, "Раздел2");
			
		КонецЕсли;
		
		Если ОбластьИмя = "П000020026003_Ставка" Тогда
			
			НалоговаяСтавка = ТабличныйДокумент.Области.П000020017003.Значение;
			ПониженнаяНалоговаяСтавка = Область.Значение;
			
			Если ПониженнаяНалоговаяСтавка > НалоговаяСтавка Тогда
				
				Область.Значение = 0;
				
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = НСтр("ru='Пониженная налоговая ставка не может превышать основную налоговую ставку'");
				Сообщение.Сообщить();
				
			КонецЕсли;
			
		КонецЕсли;
		
		РасчетНаКлиенте("Раздел2", ОбластьИмя);
		
		ИзменитьФорматНевведенныхПоказателей(ЭтаФорма);
		
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ТабличныйДокументВыбор(Элемент, Область, СтандартнаяОбработка)
	
	Если СтрЧислоВхождений(Область.Имя, "ДобавитьСтраницу") > 0 Тогда
		ДобавитьСтраницу("");
	ИначеЕсли СтрЧислоВхождений(Область.Имя, "УдалитьСтраницу") > 0 И Область.Гиперссылка Тогда
		УдалитьСтраницу("");
	ИначеЕсли СтрЧислоВхождений(Область.Имя, "СобратьДанные") > 0 И Область.Гиперссылка Тогда
		СобратьДанные("");
	КонецЕсли;
	
	Если РегламентированнаяОтчетностьКлиент.ВыбраннаяОбластьРегламентированногоОтчетаНеВерна(
		ЭтаФорма, Область, СтандартнаяОбработка) Тогда
		Возврат;
	КонецЕсли;
	
	ОбластьИмя = Область.Имя;
	
	Если СтрНайти(ОбластьИмя, "КодИМНС") > 0 Тогда
		СтандартнаяОбработка = Ложь;
		ОбработкаВыбораИФНС();
		Возврат;
	КонецЕсли;
	
	ЭтоПолеВводаОснованияЛьготы = СтрНайти(ОбластьИмя, "_Основание") > 0;
	Если ЭтоПолеВводаОснованияЛьготы Тогда
		СтандартнаяОбработка = Ложь;
		ВвестиОснованиеЛьготы(Область);
		Возврат;
	КонецЕсли;
	
	ЭтоКБКРаздела1 = Область.Имя = "П000010001003";
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел1" Тогда
		ИсходноеЗначениеКБКРаздела1 = ТабличныйДокумент.Области.П000010001003.Значение;
	КонецЕсли;
	
	Если Область.Имя = "П000020013003" Тогда
		
		СтандартнаяОбработка = Ложь;
		
		СписокГодов = Новый СписокЗначений;
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("ПервоеЧисло", Год(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета));
		СтруктураПараметров.Вставить("ПоследнееЧисло", 1900);
		СтруктураПараметров.Вставить("ТипСтрока", Истина);
		
		СписокГодов.ЗагрузитьЗначения(МассивЧиселЗаданныйИнтервалом(СтруктураПараметров));
		
		СписокГодов.Вставить(0, "", "Пустое значение");
		
		Оп = Новый ОписаниеОповещения("ВыбратьЧислоИзСпискаЗавершение", ЭтотОбъект, Область);
		
		ПоказатьВыборИзСписка(Оп, СписокГодов, Элементы.ТабличныйДокумент.ТекущаяОбласть,
		СписокГодов.НайтиПоЗначению(СокрЛП(Область.Значение)));
		
	КонецЕсли;
	
	ПараметрВводаПоля = РегламентированнаяОтчетностьКлиентСервер.НайтиСвойстваПоказателя(ЭтаФорма, ОбластьИмя);
	
	Если ПараметрВводаПоля <> Неопределено И ПараметрВводаПоля.ТаблицаЗначений.Количество() > 0 Тогда
		КодПоказателя = ПараметрВводаПоля.Показатель;
		КопироватьДанныеФормы(ПараметрВводаПоля.ТаблицаЗначений, ТЗВыбора);
		ТребРезультат = 0;
		Если ТребРезультат <> 0 Тогда
			РазмерТЗ = ТЗВыбора.Количество();
			Для Сч = 1 По РазмерТЗ Цикл
				ЭлементТЗ = ТЗВыбора[РазмерТЗ - Сч];
				Рез = ?(ЭлементТЗ.РезультатПроверки = "", 0, Число(ЭлементТЗ.РезультатПроверки));
				Если Рез <> 0 И Рез <> ТребРезультат Тогда
					ТЗВыбора.Удалить(ЭлементТЗ);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		ВвестиПоказатель(
		Элемент, Область, КодПоказателя, Ложь, ПараметрВводаПоля.ТекстПриВыборе, ТЗВыбора, СтандартнаяОбработка);
	Иначе
		Если ЭтоКБКРаздела1 Тогда
			НовоеЗначениеКБКРаздела1 = ТабличныйДокумент.Области.П000010001003.Значение;
			ИзменилсяКБК = (ИсходноеЗначениеКБКРаздела1 <> НовоеЗначениеКБКРаздела1);
			Если ИзменилсяКБК Тогда
				УстановитьКБКВРазделе1();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьЧислоИзСпискаЗавершение(ВыбЭлемент, ДополнительныйПараметр) Экспорт
	
	Если ВыбЭлемент <> Неопределено Тогда
		Если ВыбЭлемент.Значение <> ДополнительныйПараметр.Значение Тогда
			ДополнительныйПараметр.Значение = ВыбЭлемент.Значение;
			Модифицированность = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция МассивЧиселЗаданныйИнтервалом(СтруктураПараметров)
	
	МассивЧисел = Новый Массив;
	
	Если ТипЗнч(СтруктураПараметров) = Тип("Структура") Тогда
		
		ПервоеЧисло    = Неопределено;
		ПоследнееЧисло = Неопределено;
		
		Если СтруктураПараметров.Свойство("ПервоеЧисло", ПервоеЧисло)
			И СтруктураПараметров.Свойство("ПоследнееЧисло", ПоследнееЧисло) Тогда
			
			Если ПервоеЧисло <= ПоследнееЧисло Тогда
				ПоУбыванию = Ложь;
			Иначе
				ПоУбыванию = Истина;
				ПромежуточноеЗначение = ПервоеЧисло;
				ПервоеЧисло = ПоследнееЧисло;
				ПоследнееЧисло = ПромежуточноеЗначение;
			КонецЕсли;
			
			ТипСтрока = Ложь;
			СтруктураПараметров.Свойство("ТипСтрока", ТипСтрока);
			ТипСтрока = ТипСтрока = Истина;
			
			ДлинаСЛидирующимиНулями = Неопределено;
			СтруктураПараметров.Свойство("ДлинаСЛидирующимиНулями", ДлинаСЛидирующимиНулями);
			Если ТипЗнч(ДлинаСЛидирующимиНулями) <> Тип("Число")
				ИЛИ ДлинаСЛидирующимиНулями = 0 Тогда
				ДлинаСЛидирующимиНулями = Неопределено;
			КонецЕсли;
			
			Для ТекущееЧисло = ПервоеЧисло По ПоследнееЧисло Цикл
				
				Если ДлинаСЛидирующимиНулями <> Неопределено Тогда
					СтрокаФормата
					= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("ЧЦ=%1;ЧГ=;ЧВН=", ДлинаСЛидирующимиНулями);
					ТекущееЗначение = Формат(ТекущееЧисло, СтрокаФормата);
				ИначеЕсли ТипСтрока Тогда
					ТекущееЗначение = Формат(ТекущееЧисло, "ЧГ=");
				Иначе
					ТекущееЗначение = ТекущееЧисло;
				КонецЕсли;
				
				Если ПоУбыванию Тогда
					МассивЧисел.Вставить(0, ТекущееЗначение);
				Иначе
					МассивЧисел.Добавить(ТекущееЗначение);
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат МассивЧисел;
	
КонецФункции

&НаКлиенте
Процедура УстановитьКБКВРазделе1()
	
	Перем ТаблицаСтраницРаздела;
	
	КБК = ТабличныйДокумент.Области.П000010001003.Значение;
	мСтруктураМногостраничныхРазделов.Свойство("Раздел1", ТаблицаСтраницРаздела);
	ТаблицаСтраницРаздела = ЭтаФорма[ТаблицаСтраницРаздела];
	Для Каждого Страница Из ТаблицаСтраницРаздела Цикл
		Если Страница.Данные.Количество() > 0 И Страница.Данные[0].Значение <> Неопределено Тогда
			Страница.Данные[0].Значение.П000010001003 = КБК;
			Страница.Данные[0].Пометка = Ложь;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ВвестиПоказатель(Элемент, Область, КодПоказателя, Знач ЭтоСумма, Знач ТекстВыбора, ТаблицаВыбора, СтандартнаяОбработка, КолонкаПоиска = "Код") Экспорт
	
	Если ТаблицаВыбора = Неопределено ИЛИ СтруктураРеквизитовФормы.мАвтоВыборКодов Тогда
		Возврат;
	КонецЕсли;
	
	ЭтоКБКРаздела1 = (Область.Имя = "П000010001003");
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел1" Тогда
		ИсходноеЗначениеКБКРаздела1 = ТабличныйДокумент.Области.П000010001003.Значение;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	Если Область.Имя = КодПоказателя Тогда	
		
		ИсходноеЗначение = ?(ТипЗнч(Область.Значение) = Тип("Строка"), СокрЛП(Область.Значение), Область.Значение);
		
	Иначе
		
		Разделитель = ?(Лев(Область.Имя, СтрДлина(КодПоказателя) + 1) = КодПоказателя + "_", "_", "");
		ИндексОбласти = 1;
		ИсходноеЗначение = "";
		Пока ЭтаФорма[ТекущийЭлемент.Имя].Области.Найти(КодПоказателя + Разделитель + Формат(ИндексОбласти, "ЧГ="))
			<> Неопределено Цикл
			ИсходноеЗначение = ИсходноеЗначение + Строка(ЭтаФорма[ТекущийЭлемент.Имя].Области[КодПоказателя
			+ Разделитель + Формат(ИндексОбласти, "ЧГ=")].Значение);
			ИндексОбласти = ИндексОбласти + 1;
		КонецЦикла;
		ИсходноеЗначение = СокрЛП(ИсходноеЗначение);
		
	КонецЕсли;
	
	Если Область.Имя = "П000020018003" Тогда
		ТипСтрока = Новый ОписаниеТипов("Строка");
		ИсходноеЗначение = ТипСтрока.ПривестиЗначение(ИсходноеЗначение);
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Заголовок",          ТекстВыбора);
	ПараметрыФормы.Вставить("ТаблицаЗначений",    ТаблицаВыбора);
	ПараметрыФормы.Вставить("СтруктураДляПоиска", Новый Структура(КолонкаПоиска, ИсходноеЗначение));
	
	ДополнительныеПараметры = Новый Структура(
	"ИндексОбласти, ИсходноеЗначениеКБКРаздела1, КодПоказателя, КолонкаПоиска, Область, Разделитель, ЭтоКБКРаздела1",
	ИндексОбласти, ИсходноеЗначениеКБКРаздела1, КодПоказателя, КолонкаПоиска, Область, Разделитель, ЭтоКБКРаздела1);
	ОписаниеОповещения = Новый ОписаниеОповещения("ВвестиПоказательЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ОткрытьФорму("Обработка.ОбщиеОбъектыРеглОтчетности.Форма.ФормаВыбораЗначенияИзТаблицы",
	ПараметрыФормы, ЭтаФорма,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ВвестиПоказательЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	ИндексОбласти = ДополнительныеПараметры.ИндексОбласти;
	ИсходноеЗначениеКБКРаздела1 = ДополнительныеПараметры.ИсходноеЗначениеКБКРаздела1;
	КодПоказателя = ДополнительныеПараметры.КодПоказателя;
	КолонкаПоиска = ДополнительныеПараметры.КолонкаПоиска;
	Область = ДополнительныеПараметры.Область;
	Разделитель = ДополнительныеПараметры.Разделитель;
	ЭтоКБКРаздела1 = ДополнительныеПараметры.ЭтоКБКРаздела1;
	
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Область.Имя = КодПоказателя Тогда
		Если Область.Имя = "П000020018003" Тогда
			ТипЧисло = Новый ОписаниеТипов("Число");
			Область.Значение = ТипЧисло.ПривестиЗначение(РезультатВыбора[КолонкаПоиска]);
		Иначе
			Область.Значение = РезультатВыбора[КолонкаПоиска];
		КонецЕсли;
	Иначе
		СтрокаРезультатВыбора = Строка(РезультатВыбора[КолонкаПоиска]);
		Для Инд = СтрДлина(СтрокаРезультатВыбора) + 1 По ИндексОбласти - 1 Цикл
			СтрокаРезультатВыбора = " " + РезультатВыбора[КолонкаПоиска];
		КонецЦикла;
		Для Инд = 1 По ИндексОбласти - 1 Цикл
			ЭтаФорма[ТекущийЭлемент.Имя].Области[КодПоказателя + Разделитель + Формат(Инд, "ЧГ=")].Значение
			= СокрЛП(Сред(РезультатВыбора[КолонкаПоиска], Инд, 1));
		КонецЦикла;
	КонецЕсли;
	
	Модифицированность = Истина;
	
	УстановитьДоступностьОбластей(ЭтаФорма, СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
	РасчетНаКлиенте(СтруктураРеквизитовФормы.НаимТекущегоРаздела, Область.Имя);
	
	Если ЭтоКБКРаздела1 Тогда
		НовоеЗначениеКБКРаздела1 = ТабличныйДокумент.Области.П000010001003.Значение;
		ИзменилсяКБК = (ИсходноеЗначениеКБКРаздела1 <> НовоеЗначениеКБКРаздела1);
		Если ИзменилсяКБК Тогда
			УстановитьКБКВРазделе1();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВвестиОснованиеЛьготы(Область)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ОснованиеЛьготы", Область.Значение);
	
	ФормаВвода = РегламентированнаяОтчетностьКлиент.ПолучитьОбщуюФормуПоИмени(
	"ФормаВводаОснованияЛьготы", ПараметрыФормы, ЭтаФорма);
	
	ДополнительныеПараметры = Новый Структура("Область", Область);
	ОписаниеОповещения = Новый ОписаниеОповещения("ВвестиОснованиеЛьготыЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ФормаВвода.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
	ФормаВвода.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	ФормаВвода.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ВвестиОснованиеЛьготыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Область = ДополнительныеПараметры.Область;
	
	Если Результат <> Неопределено Тогда
		Область.Значение = Результат;
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораИФНС()
	
	КодИМНС = СокрЛП(ТабличныйДокумент.Области.КодИМНС.Значение);
	КПП = СокрЛП(ТабличныйДокумент.Области.КПП1.Значение);
	ЗначенияДляОтбора = Новый Массив;
	ЗначенияДляОтбора.Добавить(Новый Структура("КодНО, КПП", КодИМНС, КПП));
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Организация", СтруктураРеквизитовФормы.Организация);
	ПараметрыФормы.Вставить("ЗначенияДляОтбора", ЗначенияДляОтбора);
	
	ФормаВыбораНалоговогоОргана = РегламентированнаяОтчетностьКлиент.ПолучитьОбщуюФормуПоИмени(
	"ФормаВыбораНалоговогоОргана", ПараметрыФормы, ЭтаФорма);
	
	Если ФормаВыбораНалоговогоОргана.ТаблицаНО.Количество() <> 0 Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаВыбораИФНСЗавершение", ЭтотОбъект);
		ФормаВыбораНалоговогоОргана.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
		ФормаВыбораНалоговогоОргана.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		ФормаВыбораНалоговогоОргана.Открыть();
		
	ИначеЕсли НЕ ЗначениеЗаполнено(КодИМНС) Тогда
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Код налогового органа необходимо задать в справочнике ""Организации"".'");
		Сообщение.Сообщить();
		
	Иначе
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр(
		"ru='Для выбора инспекции, необходимо завести соответствующую запись в справочнике ""Регистрации в налоговом органе"".'");
		Сообщение.Сообщить();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораИФНСЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	Если РезультатВыбора <> Неопределено Тогда
		
		ВыбранныйКодНО = РезультатВыбора.КодНО;
		ДлинаКодаНО = СтрДлина(ВыбранныйКодНО);
		
		Для Инд = ДлинаКодаНО + 1 По 4 Цикл
			ВыбранныйКодНО = "0" + ВыбранныйКодНО;
		КонецЦикла;
		
		ТабличныйДокумент.Области.КодИМНС.Значение = ВыбранныйКодНО;
		ТабличныйДокумент.Области.КПП1.Значение = РезультатВыбора.КПП;
		
		ЗаполнитьСведенияОПодписантах(ЭтаФорма);
		
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТабличноеПолеНаКлиенте(ВыбТабличноеПолеИмя) Экспорт
	
	ОчиститьТабличноеПоле(ЭтаФорма,ВыбТабличноеПолеИмя);
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьТабличноеПолеНаСервере(ВыбТабличноеПолеИмя) Экспорт
	
	ОчиститьТабличноеПоле(ЭтаФорма,ВыбТабличноеПолеИмя);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОчиститьТабличноеПоле(Форма,ВыбТабличноеПолеИмя) Экспорт
	
	ВыбТабличноеПоле = Форма.ТабличныйДокумент;
	
	СписокИтоговыхЯчеек = Новый СписокЗначений;
	
	Для каждого Область Из ВыбТабличноеПоле.Области Цикл
		Если Область.ЦветФона = Форма.СтруктураРеквизитовФормы.ЦветЗаполняетсяАвтоАрифметика И Область.Защита Тогда
			Область.Защита = Ложь;
			СписокИтоговыхЯчеек.Добавить(Область.Имя);
		КонецЕсли;
	КонецЦикла;
	
	ВыбТабличноеПоле = Форма.ТабличныйДокумент;
	
	Для Инд = 0 По ВыбТабличноеПоле.Области.Количество() - 1 Цикл
		ТекущаяОбласть = ВыбТабличноеПоле.Области[Инд];
		Если Не ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			Продолжить;
		КонецЕсли;
		Если ТекущаяОбласть.СодержитЗначение <> Истина Тогда
			Продолжить;
		КонецЕсли;
		Если ТекущаяОбласть.Защита Тогда
			Продолжить;
		КонецЕсли;
		ТекущаяОбласть.Очистить();
	КонецЦикла;
	
	Для каждого КодИтоговогоПоказателя Из СписокИтоговыхЯчеек Цикл
		ОбластьПоказателя=ВыбТабличноеПоле.Области.Найти(КодИтоговогоПоказателя.Значение);
		Если ОбластьПоказателя <> Неопределено Тогда
			ОбластьПоказателя.Защита = Истина;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ОпределитьИдМногострочногоРазделаПоТабличномуПолю(ТекТабличноеПоле) Экспорт
	
	Перем ИдГруппы;
	
	Возврат ИдГруппы;
	
КонецФункции

&НаКлиенте
Процедура Очистить(ВыполняемоеОповещение = Неопределено) Экспорт
	
	РегламентированнаяОтчетностьКлиент.Очистить(ЭтаФорма, ВыполняемоеОповещение);
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьНаСервере() Экспорт
	
	ТаблицаСтраницыРазделаРаздел1.Очистить();
	ТаблицаСтраницыРазделаРаздел2.Очистить();
	ИнициализацияМногостраничныхРазделов();
	ЗаполнитьПустыеСтруктурыДанных();
	
	Если НЕ СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
		ОчиститьТабличноеПолеНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	КонецЕсли;
	
	ВывестиМакетСтраницыВТабличныйДокументНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела, 1);
	СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
	РегламентированнаяОтчетностьКлиентСервер.ОчиститьВариантыЗаполнения(ЭтаФорма);
	РегламентированнаяОтчетность.ПолучитьСведенияОПоказателяхОтчета(ЭтаФорма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьДатуПодписи(Форма)
	
	Форма.ТабличныйДокумент.Области.ДатаПодписи.Значение = Форма.ДатаПодписи;
	
КонецПроцедуры

&НаКлиенте
Процедура АктивизироватьЯчейку(Ячейка) Экспорт
	
	РегламентированнаяОтчетностьКлиент.АктивизироватьЯчейку(ЭтаФорма, Ячейка);
	ИзменитьФорматНевведенныхПоказателей(ЭтаФорма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ИзменитьФорматНевведенныхПоказателей(Форма)
	
	Если Форма.СтруктураРеквизитовФормы.ЕдиницаИзмерения
		= Форма.ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1 Тогда
		СтрокаФорматаНольПрочерком
		= "ЧЦ=17; ЧДЦ=" + Форма.СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧС=0";
		СтрокаФорматаНольЦифрой
		= "ЧЦ=17; ЧДЦ=" + Форма.СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=; ЧС=0";
	ИначеЕсли Форма.СтруктураРеквизитовФормы.ЕдиницаИзмерения
		= Форма.ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1000 Тогда
		СтрокаФорматаНольПрочерком
		= "ЧЦ = 17; ЧДЦ = " + Форма.СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧС=3";
		СтрокаФорматаНольЦифрой
		= "ЧЦ = 17; ЧДЦ = " + Форма.СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=; ЧС=3";
	ИначеЕсли Форма.СтруктураРеквизитовФормы.ЕдиницаИзмерения
		= Форма.ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1000000 Тогда
		СтрокаФорматаНольПрочерком
		= "ЧЦ = 17; ЧДЦ = " + Форма.СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧС=6";
		СтрокаФорматаНольЦифрой
		= "ЧЦ = 17; ЧДЦ = " + Форма.СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=; ЧС=6";
	КонецЕсли;
	
	Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел1" Тогда
		Для Инд = 1 ПО 3 Цикл
			Постфикс = "_" + Инд;
			ВыводитьНольЦифрой = ЗначениеЗаполнено(Форма.ТабличныйДокумент.Области["П000010002003" + Постфикс].Значение)
			                 ИЛИ ЗначениеЗаполнено(Форма.ТабличныйДокумент.Области["П000010002103" + Постфикс].Значение)
			                 ИЛИ ЗначениеЗаполнено(Форма.ТабличныйДокумент.Области["П000010002303" + Постфикс].Значение)
			                 ИЛИ ЗначениеЗаполнено(Форма.ТабличныйДокумент.Области["П000010002503" + Постфикс].Значение)
			                 ИЛИ ЗначениеЗаполнено(Форма.ТабличныйДокумент.Области["П000010002703" + Постфикс].Значение)
			                 ИЛИ ЗначениеЗаполнено(Форма.ТабличныйДокумент.Области["П000010003003" + Постфикс].Значение)
			                 ИЛИ ЗначениеЗаполнено(Форма.ТабличныйДокумент.Области["П000010004003" + Постфикс].Значение);
			Если ВыводитьНольЦифрой Тогда
				Форма.ТабличныйДокумент.Области["П000010002103" + Постфикс].Формат = СтрокаФорматаНольЦифрой;
				Форма.ТабличныйДокумент.Области["П000010002303" + Постфикс].Формат = СтрокаФорматаНольЦифрой;
				Форма.ТабличныйДокумент.Области["П000010002503" + Постфикс].Формат = СтрокаФорматаНольЦифрой;
				Форма.ТабличныйДокумент.Области["П000010002703" + Постфикс].Формат = СтрокаФорматаНольЦифрой;
			Иначе
				Форма.ТабличныйДокумент.Области["П000010002103" + Постфикс].Формат = СтрокаФорматаНольПрочерком;
				Форма.ТабличныйДокумент.Области["П000010002303" + Постфикс].Формат = СтрокаФорматаНольПрочерком;
				Форма.ТабличныйДокумент.Области["П000010002503" + Постфикс].Формат = СтрокаФорматаНольПрочерком;
				Форма.ТабличныйДокумент.Области["П000010002703" + Постфикс].Формат = СтрокаФорматаНольПрочерком;
			КонецЕсли;
			
			Если ВыводитьНольЦифрой
				И ЗначениеЗаполнено(Форма.ТабличныйДокумент.Области["П000010004003" + Постфикс].Значение) Тогда
				Форма.ТабличныйДокумент.Области["П000010003003" + Постфикс].Формат = СтрокаФорматаНольПрочерком;
				Форма.ТабличныйДокумент.Области["П000010004003" + Постфикс].Формат = СтрокаФорматаНольЦифрой;
			ИначеЕсли ВыводитьНольЦифрой Тогда
				Форма.ТабличныйДокумент.Области["П000010003003" + Постфикс].Формат = СтрокаФорматаНольЦифрой;
				Форма.ТабличныйДокумент.Области["П000010004003" + Постфикс].Формат = СтрокаФорматаНольПрочерком;
			Иначе
				Форма.ТабличныйДокумент.Области["П000010003003" + Постфикс].Формат = СтрокаФорматаНольПрочерком;
				Форма.ТабличныйДокумент.Области["П000010004003" + Постфикс].Формат = СтрокаФорматаНольПрочерком;
			КонецЕсли;
		КонецЦикла;
	
	ИначеЕсли Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел2" Тогда
		ЛистЗаполнен = Ложь;
		Для Каждого Область Из Форма.ТабличныйДокумент.Области Цикл
			Если СтрНайти(Область.Имя, "П00002") = 1 И Область.СодержитЗначение <> Неопределено И Область.СодержитЗначение
				И ЗначениеЗаполнено(Область.Значение) Тогда
				ЛистЗаполнен = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если ЛистЗаполнен Тогда
			Форма.ТабличныйДокумент.Области.П000020014003.Формат = СтрокаФорматаНольЦифрой;
			Форма.ТабличныйДокумент.Области.П000020016003.Формат = "ЧДЦ=4; ЧН=";
			Форма.ТабличныйДокумент.Области.П000020017003.Формат = "ЧДЦ=2; ЧН=";
			Форма.ТабличныйДокумент.Области.П000020019003.Формат = СтрокаФорматаНольЦифрой;
			Форма.ТабличныйДокумент.Области.П000020030003.Формат = СтрокаФорматаНольЦифрой;
		Иначе
			Форма.ТабличныйДокумент.Области.П000020014003.Формат = СтрокаФорматаНольПрочерком;
			Форма.ТабличныйДокумент.Области.П000020016003.Формат = "ЧДЦ=4; ЧН=-";
			Форма.ТабличныйДокумент.Области.П000020017003.Формат = "ЧДЦ=2; ЧН=-";
			Форма.ТабличныйДокумент.Области.П000020019003.Формат = СтрокаФорматаНольПрочерком;
			Форма.ТабличныйДокумент.Области.П000020030003.Формат = СтрокаФорматаНольПрочерком;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСтраницу(Команда)
	
	Если Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Раздел1" Тогда
		КБК = ТабличныйДокумент.Области.П000010001003.Значение;
	КонецЕсли;
	
	ВставитьДополнительнуюСтраницуНаСервере(Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
	СтруктураРеквизитовФормы.НомерТекущейСтраницы
	= Элементы.РазделыОтчета.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета;
	
	Если Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Раздел1" Тогда
		ТабличныйДокумент.Области.П000010001003.Значение = КБК;
	Конецесли;
	
КонецПроцедуры

&НаСервере
Процедура ВставитьДополнительнуюСтраницуНаСервере(ИмяТекущейСтраницыПанели = Неопределено, СохранятьДанныеТекущейСтраницы = Истина) Экспорт
	
	РегламентированнаяОтчетность.ВставитьДополнительнуюСтраницуНаСервере(
	ЭтаФорма, ИмяТекущейСтраницыПанели, СохранятьДанныеТекущейСтраницы);
	РегламентированнаяОтчетность.ПослеВставкиДополнительнойСтраницыНаСервере(ЭтаФорма, ИмяТекущейСтраницыПанели);
	УстановитьДоступностьОбластей(ЭтаФорма, ИмяТекущейСтраницыПанели);
	ИзменитьФорматНевведенныхПоказателей(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьДополнительнуюСтраницуНаКлиенте(ИмяТекущейСтраницыПанели = Неопределено) Экспорт
	
	РегламентированнаяОтчетностьКлиент.ВставитьДополнительнуюСтраницуНаКлиенте(ЭтаФорма, ИмяТекущейСтраницыПанели);
	РегламентированнаяОтчетностьКлиент.ПослеВставкиДополнительнойСтраницыНаКлиенте(ЭтаФорма, ИмяТекущейСтраницыПанели);
	УстановитьДоступностьОбластей(ЭтаФорма, ИмяТекущейСтраницыПанели);
	ИзменитьФорматНевведенныхПоказателей(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтраницу(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("УдалитьСтраницуЗавершение", ЭтотОбъект);
	ТекстВопроса = НСтр("ru='Удалить текущую страницу?'");
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 60, КодВозвратаДиалога.Да);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтраницуЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.РазделыОтчета.ТекущиеДанные;
	КопияТекущиеДанные = ТекущиеДанные;
	ТекущиеДанные = ТекущиеДанные.ПолучитьРодителя();
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.ПолучитьЭлементы().Количество() = 1 Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяСтраницаРазделаПослеУдаления = Неопределено;
	Если КопияТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета = ТекущиеДанные.ПолучитьЭлементы().Количество() Тогда
		ТекущаяСтраницаРазделаПослеУдаления
		= РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(ТекущиеДанные.ПолучитьЭлементы(),
		"КолонкаНомерСтраницыРазделаОтчета", КопияТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета - 1);
		СтруктураРеквизитовФормы.НомерТекущейСтраницы
		= ТекущаяСтраницаРазделаПослеУдаления.КолонкаНомерСтраницыРазделаОтчета;
	КонецЕсли;
	
	УдалитьДополнительнуюСтраницуНаСервере(Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
	ТекущиеДанные.ПолучитьЭлементы().Удалить(ТекущиеДанные.ПолучитьЭлементы().Индекс(КопияТекущиеДанные));
	
	НомерСтраницы = 1;
	
	Для Каждого СтраницаРаздела Из ТекущиеДанные.ПолучитьЭлементы() Цикл
		СтраницаРаздела.КолонкаРазделыОтчета = "Стр. " + НомерСтраницы;
		СтраницаРаздела.КолонкаНомерСтраницыРазделаОтчета = НомерСтраницы;
		НомерСтраницы = НомерСтраницы + 1;
	КонецЦикла;
	
	Если НЕ ТекущаяСтраницаРазделаПослеУдаления = Неопределено Тогда
		Элементы.РазделыОтчета.ТекущаяСтрока = ТекущаяСтраницаРазделаПослеУдаления.ПолучитьИдентификатор();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьДополнительнуюСтраницуНаСервере(ИмяТекущейСтраницыПанели = Неопределено)
	
	РегламентированнаяОтчетность.УдалитьДополнительнуюСтраницуНаСервере(ЭтаФорма, ИмяТекущейСтраницыПанели);
	УстановитьДоступностьОбластей(ЭтаФорма, ИмяТекущейСтраницыПанели);
	ИзменитьФорматНевведенныхПоказателей(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьОбщиеРеквизитыСТитульногоЛиста()
	
	МассивИНН         = Новый Массив(12);
	МассивКПП         = Новый Массив(9);
	МассивДатаПодписи = Новый Массив(8);
	
	ИсходныйМакет = ТабличныйДокумент;
	
	Область = ИсходныйМакет.Области.Найти("ИНН1");
	
	Если НЕ Область = Неопределено Тогда
		
		СтрИНН = Область.Значение;
		
		Если СтрДлина(СтрИНН) = 10 Тогда
			СтрИНН = СтрИНН + "--";
		КонецЕсли;
		
		Для Ном = 1 По СтрДлина(СтрИНН) Цикл
			МассивИНН[Ном - 1] = Сред(СтрИНН, Ном, 1);
		КонецЦикла;
		
	КонецЕсли;
	
	Область = ИсходныйМакет.Области.Найти("КПП1");
	
	Если НЕ Область = Неопределено Тогда
		
		Для Ном = 1 По СтрДлина(Область.Значение) Цикл
			МассивКПП[Ном - 1] = Сред(Область.Значение, Ном, 1);
		КонецЦикла;
		
	КонецЕсли;
	
	Область = ИсходныйМакет.Области.Найти("ДатаПодписи");
	
	Если НЕ Область = Неопределено Тогда
		
		СтрДатаПодписи = Лев(СтрЗаменить(Область.Значение, ".", ""), 8);
		
		Для Ном = 1 По СтрДлина(СтрДатаПодписи) Цикл
			Если ЗначениеЗаполнено(ИсходныйМакет.Области.ДатаПодписи.Значение) Тогда
				МассивДатаПодписи[Ном - 1] = Сред(СтрДатаПодписи, Ном, 1);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	ОбщиеРеквизитыРазделов = Новый Структура;
	
	ОбщиеРеквизитыРазделов.Вставить("ИНН", МассивИНН);
	ОбщиеРеквизитыРазделов.Вставить("КПП", МассивКПП);
	ОбщиеРеквизитыРазделов.Вставить("ДатаПодписи", МассивДатаПодписи);
	
	Возврат ОбщиеРеквизитыРазделов;
	
КонецФункции

&НаКлиенте
Процедура ПоказатьБланк(Команда)
	
	Отказ = Ложь;
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("Команда", Команда);
	ОписаниеОповещения = Новый ОписаниеОповещения("ПоказатьБланкЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередПечатьюРегламентированногоОтчета(
	ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьБланкЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Команда = ДополнительныеПараметры.Команда;
	
	Печать(Команда.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура Печать(ВидПечати, НеИзФормыОтчета = Ложь) Экспорт
	
	Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
	НСтр("ru='%1. Формируется печатная форма...'"), ЭтаФорма.Заголовок), , , БиблиотекаКартинок.Печать);
	
	Если СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки = Истина Тогда // возможны 3 состояния флага
		РегламентированнаяОтчетностьКлиент.ПроверитьКонтрольныеСоотношения(ЭтаФорма, ОбработкаКС, Истина);
	КонецЕсли;
	
	Если НЕ ПечатьНаСервере(ВидПечати) Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ОткрытьФормуПредварительногоПросмотра(
	ЭтаФорма, ВидПечати, , СтруктураРеквизитовФормы.СписокПечатаемыхЛистов);
	
	СтруктураРеквизитовФормы.мРежимПечати = Ложь;
	
КонецПроцедуры

&НаСервере
Функция ПечатьНаСервере(ВидПечати)
	
	Если НЕ РегламентированнаяОтчетность.ПринтерДоступен() Тогда
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр(
		"ru='Перед формированием печатных форм необходимо определить в системе принтер и задать его в качестве используемого по умолчанию!'");
		Сообщение.Сообщить();
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Если СтруктураРеквизитовФормы.ЕдиницаИзмерения
		<> ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1
		ИЛИ СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения <> 0 Тогда
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр(
		"ru='Печать возможна только при установленной единице измерения ""в рублях"" и точности ""0"".'");
		Сообщение.Сообщить();
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Если ТипЗнч(мДеревоВыбранныхСтраниц) <> Тип("ДанныеФормыДерево") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	СтруктураРеквизитовФормы.мПечатныеФормы.Очистить();
	СтруктураРеквизитовФормы.мРежимПечати = Истина;
	
	СохранитьДанныеРаздела(СтруктураРеквизитовФормы.НаимТекущегоРаздела, Ложь, Ложь);
	
	сохрТаблДок = ТабличныйДокумент.ПолучитьОбласть();
	
	СтрПоля = "ПолеСверху, ПолеСправа, ПолеСнизу, ПолеСлева";
	ВремПоля = Новый Структура(СтрПоля);
	
	ЗаполнитьЗначенияСвойств(ВремПоля, ТабличныйДокумент, СтрПоля);
	
	ВывестиМакетВТаблДокНаСервере("Титульный", 0);
	
	ОбщиеРеквизитыРазделов = ПолучитьОбщиеРеквизитыСТитульногоЛиста();
	
	Для Каждого СтрокаУровня1 Из мДеревоВыбранныхСтраниц.ПолучитьЭлементы() Цикл
		
		Если СтрокаУровня1.ВыводНаПечать = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("НаименованиеЛиста",  СтрокаУровня1.Представление);
		СтруктураПараметров.Вставить("ОриентацияЛиста",    СтрокаУровня1.ОриентацияСтраницы);
		СтруктураПараметров.Вставить("ИмяСтраницы",        СтрокаУровня1.ИмяСтраницы);
		Структурапараметров.Вставить("ИмяОбластиТаблПоля", СтрокаУровня1.ИмяОбластиТабличногоПоля);
		СтруктураПараметров.Вставить("ВидПечати",          ВидПечати);
		
		Если НЕ мСтруктураМногостраничныхРазделов.Свойство(СтрокаУровня1.ИмяСтраницы) Тогда
			ВывестиМакетВТаблДокНаСервере(СтрокаУровня1.ИмяСтраницы, 0);
			ВывестиНаПечатьЛист(СтруктураПараметров, ОбщиеРеквизитыРазделов, СтрПоля);
		Иначе
			СтруктураПараметров.Вставить("ИмяСтраницыПанели", СтрокаУровня1.ИмяСтраницы);
			ВывестиНаПечатьДополнительныеСтраницы(СтруктураПараметров, ОбщиеРеквизитыРазделов);
		КонецЕсли;
		
	КонецЦикла;
	
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(сохрТаблДок);
	ЗаполнитьЗначенияСвойств(ТабличныйДокумент, ВремПоля, СтрПоля);
	
	РегламентированнаяОтчетностьКлиентСервер.ПроставлениеНомеровЛистов(
	ЭтаФорма, , СтруктураРеквизитовФормы.СписокПечатаемыхЛистов);
	
	КопироватьДанныеФормы(мДеревоВыбранныхСтраниц, мДеревоСтраницОтчета);
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьМакетМЧБ(ПараметрыПечати, МакетМЧБ, ОбщиеРеквизитыРазделов)
	
	Показатели = Новый ТаблицаЗначений;
	Показатели.Колонки.Добавить("Имя");
	Показатели.Колонки.Добавить("Значение");
	Показатели.Колонки.Добавить("ЗначениеМЧБ");
	
	Показатели.Индексы.Добавить("Имя");
	
	ИсходныйМакет = ТабличныйДокумент;
	Для Каждого Область Из ИсходныйМакет.Области Цикл
		Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник И Область.СодержитЗначение = Истина Тогда
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = Область.Имя;
			НовСтр.Значение = Область.Значение;
			НовСтр.ЗначениеМЧБ = ПолучитьЗначениеМЧБ(Область);
		КонецЕсли;
	КонецЦикла;
	
	НайденноеЗначение = Показатели.Найти("ИНН1", "Имя");
	
	Если НЕ НайденноеЗначение = Неопределено Тогда
		Показатели.Удалить(НайденноеЗначение);
	КонецЕсли;
		
	ИНН = "";
	Для Ном = 0 По 11 Цикл
		ИНН = ИНН + ОбщиеРеквизитыРазделов.ИНН[Ном];
	КонецЦикла;
	
	НовСтр = Показатели.Добавить();
	НовСтр.Имя = "ИНН1";
	НовСтр.Значение = ИНН;
	НовСтр.ЗначениеМЧБ = СокрЛП(ИНН);
	
	НайденноеЗначение = Показатели.Найти("КПП1", "Имя");
	
	Если НЕ НайденноеЗначение = Неопределено Тогда
		Показатели.Удалить(НайденноеЗначение);
	КонецЕсли;
		
	КПП = "";
	Для Ном = 0 По 8 Цикл
		КПП = КПП + ОбщиеРеквизитыРазделов.КПП[Ном];
	КонецЦикла;
	
	НовСтр = Показатели.Добавить();
	НовСтр.Имя = "КПП1";
	НовСтр.Значение = КПП;
	НовСтр.ЗначениеМЧБ = СокрЛП(КПП);
	
	НайденноеЗначение = Показатели.Найти("ДатаПодписи", "Имя");
		
	Если НЕ НайденноеЗначение = Неопределено Тогда
		Показатели.Удалить(НайденноеЗначение);
	КонецЕсли;
		
	ДатаПодписиСтр = "";
	Для Ном = 0 По 7 Цикл
		ДатаПодписиСтр = ДатаПодписиСтр + ОбщиеРеквизитыРазделов.ДатаПодписи[Ном];
	КонецЦикла;
	
	НовСтр = Показатели.Добавить();
	НовСтр.Имя = "ДатаПодписи";
	НовСтр.Значение = ДатаПодписиСтр;
	НовСтр.ЗначениеМЧБ = СокрЛП(ДатаПодписиСтр);
	
	НовСтр = Показатели.Добавить();
	НовСтр.Имя = "ДатаПодписиПолная";
	Если СокрЛП(ДатаПодписиСтр) <> "" Тогда
		НовСтр.Значение = Формат(Дата(Прав(ДатаПодписиСтр, 4) + Сред(ДатаПодписиСтр, 3, 2)
		+ Лев(ДатаПодписиСтр, 2) + "000000"), "ДФ = ""дд.ММ.гггг""");
		НовСтр.ЗначениеМЧБ = СокрЛП(Формат(Дата(Прав(ДатаПодписиСтр, 4) + Сред(ДатаПодписиСтр, 3, 2)
		+ Лев(ДатаПодписиСтр, 2) + "000000"), "ДФ = ""дд.ММ.гггг"""));
	КонецЕсли;
	
	// особая обработка ФИО на титульном листе
	Если ПараметрыПечати.ИмяСтраницы = "Титульный" Тогда
		
		ПокПодписант = Показатели.Найти("Подписант", "Имя");
		Если ПокПодписант <> Неопределено Тогда
			
			ФИО = РегламентированнаяОтчетность.РазложитьФИО(ПокПодписант.Значение);
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "ОргПодписантФамилия";
			НовСтр.Значение = ФИО.Фамилия;
			НовСтр.ЗначениеМЧБ = ФИО.Фамилия;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "ОргПодписантИмя";
			НовСтр.Значение = ФИО.Имя;
			НовСтр.ЗначениеМЧБ = ФИО.Имя;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "ОргПодписантОтчество";
			НовСтр.Значение = ФИО.Отчество;
			НовСтр.ЗначениеМЧБ = ФИО.Отчество;
			
		КонецЕсли;
		
		// особая обработка ОКВЭД
		ПокОКВЭД = Показатели.Найти("ОКВЭД", "Имя");
		Если ПокОКВЭД <> Неопределено Тогда
			ОКВЭД = ПокОКВЭД.ЗначениеМЧБ;
			Если Сред(ОКВЭД, 2, 1) = "." Тогда
				ОКВЭД = Лев(ОКВЭД, 1) + " " + Сред(ОКВЭД, 2);
			КонецЕсли;
			Если Сред(ОКВЭД, 5, 1) = "." Тогда
				ОКВЭД = Лев(ОКВЭД, 4) + " " + Сред(ОКВЭД, 5);
			КонецЕсли;
			ПокОКВЭД.Значение = ОКВЭД;
			ПокОКВЭД.ЗначениеМЧБ = ОКВЭД;
		КонецЕсли;
		
	КонецЕсли;
	
	// особая обработка ИНН
	ИНН = Новый Массив(12);
	Для Инд = 1 По 9 Цикл
		Для Знакоместо = 0 По 11 Цикл
			ИНН[Знакоместо] = Показатели.Найти("ИНН" + Инд + "_" + (Знакоместо + 1), "Имя");
		КонецЦикла;
		Если ИНН[0] = Неопределено ИЛИ ИНН[1] = Неопределено ИЛИ ИНН[10] = Неопределено Тогда
			Продолжить;
		КонецЕсли;
	КонецЦикла;
	
	// ОКТМО.
	Для Каждого Показатель Из Показатели Цикл
		Если СтрНайти(Показатель.Имя, "П000010002003") = 1
		 ИЛИ СтрНайти(Показатель.Имя, "П000020002003") = 1 Тогда
			ОКТМО = СокрЛП(Показатель.Значение);
			ОКТМО = РегламентированнаяОтчетностьКлиентСервер.ДополнитьСтроку(ОКТМО, 11, "-", 1);
			Показатель.ЗначениеМЧБ = ОКТМО;
		КонецЕсли;
	КонецЦикла;

	ИндексТочкиПоКорню=Новый Структура;
	Для каждого Область Из МакетМЧБ.Области Цикл
		Если Область.Текст="." Тогда
			ТекАдресЗначенияОбласти = АдресЗначенияОбласти(Область);
			Корень=ТекАдресЗначенияОбласти.Корень;
			ИндексТочкиЧислаНаМЧБ=ТекАдресЗначенияОбласти.ИндексЗнакоместа;
			ИндексТочкиПоКорню.Вставить(Корень,ИндексТочкиЧислаНаМЧБ);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Область Из МакетМЧБ.Области Цикл
		Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			ИмяОбласти = Область.Имя;
			
			Если СтрЧислоВхождений(ИмяОбласти, "НомСтр") > 0
			 ИЛИ СтрЧислоВхождений(ИмяОбласти, "СоставленаНа") > 0 Тогда
				Продолжить;
			КонецЕсли;
					
			РезультатПоиска = Показатели.Найти(ИмяОбласти, "Имя");
			Если РезультатПоиска = Неопределено Тогда
				ТекАдресЗначенияОбласти = АдресЗначенияОбласти(Область);
				ЗначениеВыведено = Ложь;
				Если ТекАдресЗначенияОбласти.ИндексЗнакоместа <> 0 Тогда
					РезультатПоиска = Показатели.Найти(ТекАдресЗначенияОбласти.Корень, "Имя");
					Если РезультатПоиска <> Неопределено Тогда
						Если ТипЗнч(РезультатПоиска.Значение)=Тип("Число") Тогда
							//разделение числа на 2 части
							ЦелаяЧасть = Цел(РезультатПоиска.Значение);   
							СтрЦелаяЧасть = Строка(Формат(Цел(РезультатПоиска.Значение), "ЧГ=0; ЧН="));
							СтрДробнаяЧасть = Сред(Строка(РезультатПоиска.Значение - ЦелаяЧасть),3);
							Если СтрДробнаяЧасть = "" Тогда
								Если СтрЦелаяЧасть = "0" Тогда
									СтрЦелаяЧасть = "";
								КонецЕсли;
							КонецЕсли;
							//разделение областей показателя на 2 части
							
							ИндексТочкиЧислаНаМЧБ = Неопределено;
							Если ИндексТочкиПоКорню.Свойство(ТекАдресЗначенияОбласти.Корень,ИндексТочкиЧислаНаМЧБ) = Ложь Тогда
								//На МЧБ нет разделения на целую и дробную части
								ПрисвоитьЗначениеОбласти(Область, РезультатПоиска.ЗначениеМЧБ, ТекАдресЗначенияОбласти.ИндексЗнакоместа);
								ЗначениеВыведено = Истина;	
							Иначе
								//определяем какая часть выводится (Целая, дробная или точка)
								Если ТекАдресЗначенияОбласти.ИндексЗнакоместа<ИндексТочкиЧислаНаМЧБ Тогда
									//выводится целая часть
									ПрисвоитьЗначениеОбласти(
									Область, ?(РезультатПоиска.ЗначениеМЧБ = "-", "-", СтрЦелаяЧасть), ТекАдресЗначенияОбласти.ИндексЗнакоместа);
									ЗначениеВыведено = Истина;	
								ИначеЕсли ТекАдресЗначенияОбласти.ИндексЗнакоместа > ИндексТочкиЧислаНаМЧБ Тогда
									//выводится дробная часть
									ПрисвоитьЗначениеОбласти(
									Область, СтрДробнаяЧасть, ТекАдресЗначенияОбласти.ИндексЗнакоместа - ИндексТочкиЧислаНаМЧБ);
									ЗначениеВыведено = Истина;
								Иначе
									//выводится точка
									//присваивать ничего не будем, но считаем, что область заполненяется корректно
									ЗначениеВыведено = Истина;
								КонецЕсли;
							КонецЕсли;
						Иначе
							ПрисвоитьЗначениеОбласти(Область, РезультатПоиска.ЗначениеМЧБ, ТекАдресЗначенияОбласти.ИндексЗнакоместа,
							ТипЗнч(РезультатПоиска.Значение) <> Тип("Строка") ИЛИ НЕ ЗначениеЗаполнено(РезультатПоиска.Значение));
							ЗначениеВыведено = Истина;
						КонецЕсли;
					КонецЕсли;
					
				КонецЕсли;
				Если НЕ ЗначениеВыведено Тогда
					
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр(
					"ru='Не удалось заполнить область ""%1""!'"), ИмяОбласти);
					Сообщение.Сообщить();
					
				КонецЕсли;
			Иначе
				ПрисвоитьЗначениеОбласти(Область, РезультатПоиска.ЗначениеМЧБ);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

&НаСервере
Функция ПолучитьЗначениеМЧБ(Область)
	
	ТипЗначения = ТипЗнч(Область.Значение);
	Если ТипЗначения = Тип("Число") Тогда
		ФорматОбласти = Область.Формат;
		СоотвСтрокаФормата = РазобратьСтрокуФормата(ФорматОбласти);
		СоотвСтрокаФормата.Вставить("ЧРД", ".");
		СоотвСтрокаФормата.Вставить("ЧГ", "");
		Результат = Формат(Область.Значение, СобратьСтрокуФормата(СоотвСтрокаФормата));
	ИначеЕсли ТипЗначения = Тип("Строка") Тогда
		Результат = СокрЛП(Область.Значение);
	ИначеЕсли ТипЗначения = Тип("Дата") Тогда
		Результат = Формат(Область.Значение, ?(ПустаяСтрока(Область.Формат), "ДФ=dd.MM.yyyy", Область.Формат));
	ИначеЕсли ТипЗначения = Тип("Булево") Тогда
		Результат = Формат(Область.Значение, Область.Формат);
	КонецЕсли;
	Возврат СокрЛП(Результат);
	
КонецФункции

&НаСервере
Функция АдресЗначенияОбласти(Область)
	
	Имя = Область.Имя;
	КореньИмениОбласти = Неопределено;
	СтрИндексЗнакоместа = "";
	ИндексЗнакоместа = 0;
	ДлинаИмени = СтрДлина(Имя);
	Для ИндексВхождения = 1 По ДлинаИмени Цикл
		СтрИндексЗнакоместа = Сред(Имя, ДлинаИмени - ИндексВхождения + 1);
		Если СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(СтрИндексЗнакоместа) Тогда
			КореньИмениОбласти = Лев(Имя, ДлинаИмени - ИндексВхождения);
			ИндексЗнакоместа = Число(СтрИндексЗнакоместа);
		Иначе
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если Прав(КореньИмениОбласти, 1) = "_" Тогда
		КореньИмениОбласти = Лев(КореньИмениОбласти, СтрДлина(КореньИмениОбласти) - 1);
	КонецЕсли;
	
	Возврат Новый Структура("Корень, ИндексЗнакоместа", КореньИмениОбласти, ИндексЗнакоместа);
	
КонецФункции

&НаСервере
Процедура ПрисвоитьЗначениеОбласти(Область, Знач Значение, ИндексЗнакоместа = 0, Дополнять_ = Истина)
	
	Если ИндексЗнакоместа <> 0 Тогда
		Если СтрДлина(Значение) >= ИндексЗнакоместа Тогда
			Значение = Сред(Значение, ИндексЗнакоместа, 1);
		Иначе
			Значение = ?(Дополнять_, "-", "");
		КонецЕсли;
	ИначеЕсли НЕ ЗначениеЗаполнено(Значение) И Дополнять_ Тогда
		Значение = "-";
	КонецЕсли;
	
	Если Область.СодержитЗначение = Истина Тогда
		Область.Значение = ВРЕГ(Значение);
	Иначе
		Область.Текст = ВРЕГ(Значение);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция РазобратьСтрокуФормата(Знач СтрокаФормата)
	
	ЗначенияПараметров = Новый Соответствие;
	Пока СтрНайти(СтрокаФормата, ";") <> 0 Цикл
		ВхождениеРазделителя = СтрНайти(СтрокаФормата, ";");
		ДоРазделителя = Лев(СтрокаФормата, ВхождениеРазделителя - 1);
		ВхождениеРавно = СтрНайти(ДоРазделителя, "=");
		Если ВхождениеРавно <> 0 И ВхождениеРавно <> 1 Тогда
			ЗначенияПараметров.Вставить(Лев(ДоРазделителя, ВхождениеРавно - 1), Сред(ДоРазделителя, ВхождениеРавно + 1));
		КонецЕсли;
		СтрокаФормата = Сред(СтрокаФормата, ВхождениеРазделителя + 1);
	КонецЦикла;
	ВхождениеРавно = СтрНайти(СтрокаФормата, "=");
	Если ВхождениеРавно <> 0 И ВхождениеРавно <> 1 Тогда
		ЗначенияПараметров.Вставить(Лев(СтрокаФормата, ВхождениеРавно - 1), Сред(СтрокаФормата, ВхождениеРавно + 1));
	КонецЕсли;
	Возврат ЗначенияПараметров;
	
КонецФункции

&НаСервере
Функция СобратьСтрокуФормата(ПараметрыФормата)
	
	СтрокаФормата = "";
	Для Каждого Параметр Из ПараметрыФормата Цикл
		СтрокаФормата = СтрокаФормата + "; " + Параметр.Ключ + "=" + Параметр.Значение;
	КонецЦикла;
	Если НЕ ПустаяСтрока(СтрокаФормата) Тогда
		СтрокаФормата = Сред(СтрокаФормата, 3);
	КонецЕсли;
	Возврат СтрокаФормата;
	
КонецФункции

&НаСервере
Процедура ВывестиНаПечатьЛист(Парам1, ОбщиеРеквизитыРазделов, СтрПоля = Неопределено)
	
	ПрефиксИмениМакетов = "ПечатныйБланк2019Кв1_";
	
	СоответствиеРазделовМакетам = Новый Соответствие;
	СоответствиеРазделовМакетам.Вставить("Титульный", ПрефиксИмениМакетов + "Титульный");
	СоответствиеРазделовМакетам.Вставить("Раздел1",   ПрефиксИмениМакетов + "Раздел1");
	СоответствиеРазделовМакетам.Вставить("Раздел2",   ПрефиксИмениМакетов + "Раздел2");
	
	МЧБРаздела = СоответствиеРазделовМакетам[Парам1.ИмяСтраницы];
	
	МакетМЧБ = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(МЧБРаздела);
	МакетМЧБ.ПолеСверху = 5;
	МакетМЧБ.ПолеСправа = 5;
	МакетМЧБ.ПолеСнизу = 5;
	МакетМЧБ.ПолеСлева = 5;
	
	ВремПоля = Новый Структура(СтрПоля);
	
	ЗаполнитьМакетМЧБ(Парам1, МакетМЧБ, ОбщиеРеквизитыРазделов);
	
	ЗаполнитьЗначенияСвойств(ВремПоля, ТабличныйДокумент, СтрПоля);
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(МакетМЧБ);
	ЗаполнитьЗначенияСвойств(ТабличныйДокумент, МакетМЧБ, СтрПоля, "Макет");
	
	РегламентированнаяОтчетность.ВывестиНаПечатьЛистОбщая(
	ЭтаФорма.Заголовок, Парам1, ТабличныйДокумент, СтруктураРеквизитовФормы.мПечатныеФормы);
	
КонецПроцедуры

&НаСервере
Процедура ВывестиНаПечатьДополнительныеСтраницы(СтруктураПараметровСтраницы, ОбщиеРеквизитыРазделов)
	
	Перем ИмяСтраницы;
	Перем ТаблицаСтраницРаздела;
	
	СтруктураПараметровСтраницы.Свойство("ИмяСтраницыПанели", ИмяСтраницы);
	
	Если Не мСтруктураМногостраничныхРазделов.Свойство(ИмяСтраницы, ТаблицаСтраницРаздела) Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаСтраницРаздела = ЭтаФорма[ТаблицаСтраницРаздела];
	
	МассивПризнаковАктивности = Новый Массив;
	Для Каждого Страница Из ТаблицаСтраницРаздела Цикл
		ТекущийИндекс = ТаблицаСтраницРаздела.Индекс(Страница);
		МассивПризнаковАктивности.Добавить(ТаблицаСтраницРаздела[ТекущийИндекс].АктивнаяСтраница);
	КонецЦикла;
	
	Для Каждого Страница Из ТаблицаСтраницРаздела Цикл
		ТекущийИндекс = ТаблицаСтраницРаздела.Индекс(Страница);
		ВывестиМакетВТаблДокНаСервере(ИмяСтраницы, ТекущийИндекс + 1);
		ВывестиНаПечатьЛист(СтруктураПараметровСтраницы, ОбщиеРеквизитыРазделов);
	КонецЦикла;
	
	Для Каждого Страница Из ТаблицаСтраницРаздела Цикл
		ТекущийИндекс = ТаблицаСтраницРаздела.Индекс(Страница);
		ТаблицаСтраницРаздела[ТекущийИндекс].АктивнаяСтраница = МассивПризнаковАктивности[ТекущийИндекс];
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСДвухмернымШтрихкодомPDF417(Команда)
	
	РегламентированнаяОтчетностьКлиент.ВывестиМашиночитаемуюФорму(ЭтаФорма, Команда.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайла(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузитьИзФайлаЗавершение", ЭтотОбъект);
	
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередЗагрузкойРегламентированногоОтчета(
	ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура Выгрузить(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьЗавершение", ЭтотОбъект);
	
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(
	ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайлаЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ЗагрузитьИзФайлаОтчет();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайлаОтчет() Экспорт
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузитьИзФайлаОтчетЗавершение", ЭтотОбъект);
	
	Если Модифицированность Тогда
		СохранитьНаКлиенте(,ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайлаОтчетЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	РегламентированнаяОтчетностьЗагрузкаКлиент.ЗагрузитьИзФайлаОтчет(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Функция ЗагрузкаОтчетаИзФайла(ДанныеДляЗагрузки) Экспорт
	
	Если Модифицированность Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = СтрШаблон(НСтр("ru='Отчет ""%1"" не сохранен.'"), ЭтотОбъект.Заголовок);
		Сообщение.Сообщить();
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ ЗагрузкаОтчетаИзФайлаНаСервере(ДанныеДляЗагрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
		
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция ЗагрузкаОтчетаИзФайлаНаСервере(ДанныеДляЗагрузки)
	
	СформироватьСтруктуруПоказателей();
	
	ПараметрыОтчета = СформироватьСтруктуруПараметров();
	
	ДеревоДляЗагрузки = ИзвлечьСтруктуруXML();
	
	Если НЕ РегламентированнаяОтчетностьЗагрузка.ЗагрузкаОтчетаИзФайла(
		ЭтотОбъект, ПараметрыОтчета, ДанныеДляЗагрузки, ДеревоДляЗагрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура ВыгрузитьЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ВыгрузитьОтчет();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьОтчет() Экспорт
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьОтчетЗавершение", ЭтотОбъект);
	
	Если Модифицированность Тогда
		СохранитьНаКлиенте(,ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьОтчетЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ФормаВыгрузкиРеглОтчета
	= ПолучитьФорму("Документ.ВыгрузкаРегламентированныхОтчетов.Форма.ФормаДокумента", , ЭтаФорма);
	
	СпДокОсн = Новый СписокЗначений;
	СпДокОсн.Добавить(СтруктураРеквизитовФормы.мСохраненныйДок);
	
	ФормаВыгрузкиРеглОтчета.СформироватьИЗаписать(СпДокОсн);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузку(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьВыгрузкуЗавершение", ЭтотОбъект);
	
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(
	ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузкуЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПроверитьВыгрузкуОтчета();
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузкуОтчета()
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьВыгрузкуОтчетаЗавершение", ЭтотОбъект);
	
	Если Модифицированность Тогда
		СохранитьНаКлиенте(,ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузкуОтчетаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ФормаВыгрузкиРеглОтчета
	= ПолучитьФорму("Документ.ВыгрузкаРегламентированныхОтчетов.Форма.ФормаДокумента", , ЭтаФорма);
	
	СпДокОсн = Новый СписокЗначений;
	СпДокОсн.Добавить(СтруктураРеквизитовФормы.мСохраненныйДок);
	
	ФормаВыгрузкиРеглОтчета.Проверить(СпДокОсн);
	
КонецПроцедуры

&НаСервере
Функция ПроверитьПоказатели() Экспорт
	
	СформироватьСтруктуруПоказателей();
	ПараметрыВыгрузки = СформироватьСтруктуруПараметров();
	Если НЕ ПроверитьВозможностьВыгрузки(ПараметрыВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	ДеревоВыгрузки = ИзвлечьСтруктуруXML();
	ЗаполнитьДанными(ДеревоВыгрузки, ПараметрыВыгрузки);
	Если НЕ РегламентированнаяОтчетность.ПроверитьДанные(ЭтаФорма, ДеревоВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Функция УниверсальнаяВыгрузка(ТекстВыгрузки = Неопределено, ПроверятьБлокировки = Истина) Экспорт
	
	Перем ПараметрыВыгрузки;
	
	Если Модифицированность Тогда
		ТекстЗаголовка = ЗаголовокРегламентированногоОтчета(
		СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета, СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
		
		ОргСтр = " (" + СтруктураРеквизитовФормы.Организация + ")";
		Если СтрНайти(ТекстЗаголовка, ОргСтр) = 0 Тогда
			ТекстЗаголовка = ТекстЗаголовка + ОргСтр;
		КонецЕсли;
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Отчет """ + ТекстЗаголовка + """ не сохранен.";
		Сообщение.Сообщить();
		
		Возврат Ложь;
	КонецЕсли;
	
	Если Открыта() Тогда
		Если СтруктураРеквизитовФормы.ЕдиницаИзмерения
			<> ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1 Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='Перед выгрузкой необходимо установить единицу измерения ""в рублях"".'");
			Сообщение.Сообщить();
			Возврат Ложь;
		КонецЕсли;
		
		Если СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения <> 0 Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='Перед выгрузкой необходимо установить точность ""0"".'");
			Сообщение.Сообщить();
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки = Истина Тогда // возможны 3 состояния
		РегламентированнаяОтчетностьКлиент.ПроверитьКонтрольныеСоотношения(ЭтаФорма, ОбработкаКС, Истина);
	КонецЕсли;
	
	Если НЕ УниверсальнаяВыгрузкаXMLНаСервере(ТекстВыгрузки, ПараметрыВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Функция ЗаголовокРегламентированногоОтчета(ДатаНач, ДатаКон, Периодичность = Неопределено) Экспорт
	
	СтрПериодОтчета = ПредставлениеПериода(НачалоДня(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета),
	КонецДня(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета), "ФП = Истина");
	
	Если СтрНайти(ЭтаФорма.Заголовок, СтрПериодОтчета) = 0 Тогда
		Возврат ЭтаФорма.Заголовок + " за " + СтрПериодОтчета;
	Иначе
		Возврат ЭтаФорма.Заголовок;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция УниверсальнаяВыгрузкаXMLНаСервере(ТекстВыгрузки, ПараметрыВыгрузки)
	
	СформироватьСтруктуруПоказателей();
	ПараметрыВыгрузки = СформироватьСтруктуруПараметров();
	
	Если НЕ ПроверитьВозможностьВыгрузки(ПараметрыВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	ДеревоВыгрузки = ИзвлечьСтруктуруXML();
	
	ЗаполнитьДанными(ДеревоВыгрузки, ПараметрыВыгрузки);
	Если НЕ РегламентированнаяОтчетность.ПроверитьДанные(ЭтаФорма, ДеревоВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ТекстВыгрузки = ВыгрузитьДеревоВXML(ДеревоВыгрузки, ПараметрыВыгрузки);
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Процедура ОчиститьПоказателиОтчетаЗаполняемыеИзИБНаСервере(ИмяСтраницы)
	
	РегламентированнаяОтчетностьКлиентСервер.ОчиститьПоказателиОтчетаЗаполняемыеИзИБ(ЭтаФорма, ИмяСтраницы);
	
КонецПроцедуры

&НаСервере
Функция ВывестиПоказательВXML(Узел, ЗначениеПоказателя)
	
	МинШирина = Узел.МинРазмерность;
	МаксШирина = Узел.МаксРазмерность;
	
	Если Узел.Формат = "T" ИЛИ Узел.Формат = "Т" Тогда // учтем оба варианта: кириллицу и латиницу
		Если ТипЗнч(ЗначениеПоказателя) = Тип("Дата") Тогда
			ЗначениеПоказателяСтр = Формат(ЗначениеПоказателя, "ДФ=dd.MM.yyyy");
		Иначе
			ЗначениеПоказателяСтр = СокрЛП(ЗначениеПоказателя);
		КонецЕсли;
		Узел.Значение = ?(МаксШирина < СтрДлина(ЗначениеПоказателяСтр),
		СокрЛП(Лев(ЗначениеПоказателяСтр, МаксШирина)), ЗначениеПоказателяСтр);
	ИначеЕсли Узел.Формат = "N" Тогда
		СтрокаФормата = "ЧРД=.;ЧН=0;ЧГ=;";
		Если Узел.МаксРазмерность <> 0 И Узел.МаксРазмерность <> 99999 Тогда
			СтрокаФормата = СтрокаФормата + "ЧЦ=" + Формат(Узел.МаксРазмерность, "ЧГ=") + ";";
		КонецЕсли;
		Если Узел.МинРазмерность <> 99999 Тогда
			СтрокаФормата = СтрокаФормата + "ЧДЦ=" + Формат(Узел.МинРазмерность, "ЧГ=") + ";";
		КонецЕсли;
		Узел.Значение = СокрЛП(Формат(ЗначениеПоказателя, СтрокаФормата));
	ИначеЕсли Узел.Формат = "gYear" Тогда
		Если ТипЗнч(ЗначениеПоказателя) = Тип("Дата") Тогда
			Узел.Значение = СокрЛП(Формат(ЗначениеПоказателя, "ДФ=гггг"));
		Иначе
			Узел.Значение = Прав(СокрЛП(ЗначениеПоказателя), 4);
		КонецЕсли;
	КонецЕсли;
	
КонецФункции 

&НаСервере
Функция ВыгрузитьДеревоВXML(ДеревоВыгрузки, ПараметрыВыгрузки)
	
	ПотокXML = РегламентированнаяОтчетность.СоздатьНовыйПотокXML("windows-1251"); // создаем новый поток для записи
	ЗаписатьУзелДереваВXML(ДеревоВыгрузки, ПотокXML, ПараметрыВыгрузки); // пишем дерево в поток
	Возврат ПотокXML.Закрыть(); // получаем текст XML
	
КонецФункции

&НаСервере
Процедура ЗадатьЗначениеЭлемента(Узел, КодЭлемента, Значение)
	
	ВывестиПоказательВXML(ПолучитьПодчиненныйЭлемент(Узел, КодЭлемента), Значение);
	
КонецПроцедуры

&НаСервере
Функция ЗаписатьУзелДереваВXML(СтрокаДерева, ПотокXML, ПараметрыВыгрузки) Экспорт
	
	Если ТипЗнч(СтрокаДерева) = Тип("ДеревоЗначений") Тогда
		ПотокXML.ЗаписатьНачалоЭлемента("Файл");
		ПотокXML.ЗаписатьАтрибут("xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");
		Для каждого Стр Из СтрокаДерева.Строки Цикл
			ЗаписатьУзелДереваВXML(Стр, ПотокXML, ПараметрыВыгрузки);
		КонецЦикла;
		ПотокXML.ЗаписатьКонецЭлемента();
	Иначе
		Если СтрокаДерева.Тип = "А" ИЛИ СтрокаДерева.Тип = "A" Тогда 
			ПотокXML.ЗаписатьАтрибут(СтрокаДерева.Код, Строка(СтрокаДерева.Значение));
		Иначе
			ПотокXML.ЗаписатьНачалоЭлемента(СтрокаДерева.Код);
			Для каждого Лист из СтрокаДерева.Строки Цикл
				ЗаписатьУзелДереваВXML(Лист, ПотокXML, ПараметрыВыгрузки);
			КонецЦикла;
			ПотокXML.ЗаписатьТекст(Строка(СтрокаДерева.Значение));
			ПотокXML.ЗаписатьКонецЭлемента();
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьДанными(ДеревоВыгрузки, ПараметрыВыгрузки)
	
	ОбработатьУсловныеЭлементы(ПараметрыВыгрузки, ДеревоВыгрузки);
	ЗаполнитьДаннымиУзел(ПараметрыВыгрузки, ДеревоВыгрузки);
	ОтсечьНезаполненныеНеобязательныеУзлы(ДеревоВыгрузки);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДаннымиУзел(ПараметрыВыгрузки, Узел, НомерСтроки = Неопределено)
	
	Для Каждого Стр из Узел.Строки Цикл
		Если Стр.Тип = "С" ИЛИ Стр.Тип = "C" Тогда // учтем оба варианта: кириллицу и латиницу
			Если Стр.Код = ПараметрыВыгрузки.ИмяКлючевогоУзлаСодержательнойЧасти Тогда
				ЗаполнитьСодержательнуюЧасть(Стр);
			Иначе
				ЗаполнитьДаннымиУзел(ПараметрыВыгрузки, Стр);
			КонецЕсли;
		Иначе
			Если ПустаяСтрока(Стр.ЗначениеПоУмолчанию) Тогда
				Если НЕ ПустаяСтрока(Стр.Ключ) Тогда	
					ВывестиПоказательВXML(Стр, ПараметрыВыгрузки[Стр.Ключ]);
				Иначе
					Стр.Значение = "";
				КонецЕсли;
			ИначеЕсли Лев(Стр.ЗначениеПоУмолчанию, 1) = "&" Тогда
				ВывестиПоказательВXML(Стр, ПараметрыВыгрузки[Сред(Стр.ЗначениеПоУмолчанию, 2)]);
			Иначе
				Стр.Значение = Стр.ЗначениеПоУмолчанию;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСодержательнуюЧасть(УзелРодитель)
	
	Раздел1 = мДанныеОтчета.Раздел1;
	Раздел2 = мДанныеОтчета.Раздел2;
	
	Узел_СумНалПУ = ПолучитьПодчиненныйЭлемент(УзелРодитель, "СумНалПУ");
	Узел_СумПУ = ПолучитьПодчиненныйЭлемент(Узел_СумНалПУ, "СумПУ");
	
	Для Каждого ЛистРаздела1 Из Раздел1 Цикл
		
		ДанныеРаздела1 = ЛистРаздела1.Данные[0].Значение;
		
		ЗадатьЗначениеЭлемента(Узел_СумНалПУ, "КБК", ДанныеРаздела1.П000010001003);
		
		КоличествоОднородныхБлоковНаЛистеРаздела1 = 3;
		
		Для НомерБлока = 1 По КоличествоОднородныхБлоковНаЛистеРаздела1 Цикл
			
			ПостфиксБлока = "_" + Формат(НомерБлока, "ЧГ=0");
			
			ОКАТО = СокрЛП(ДанныеРаздела1["П000010002003" + ПостфиксБлока]);
			
			СуммаНалогаИсчисленная  = ДанныеРаздела1["П000010002103" + ПостфиксБлока];
			СуммаАвансовыхПлатежей1 = ДанныеРаздела1["П000010002303" + ПостфиксБлока];
			СуммаАвансовыхПлатежей2 = ДанныеРаздела1["П000010002503" + ПостфиксБлока];
			СуммаАвансовыхПлатежей3 = ДанныеРаздела1["П000010002703" + ПостфиксБлока];
			
			СуммаНалогаКУплате     = ДанныеРаздела1["П000010003003" + ПостфиксБлока];
			СуммаНалогаКУменьшению = ДанныеРаздела1["П000010004003" + ПостфиксБлока];
			СуммаНалога = СуммаНалогаКУплате - СуммаНалогаКУменьшению;
			
			Если НЕ ЗначениеЗаполнено(ОКАТО) Тогда
				Продолжить;
			КонецЕсли;
			
			НовыйУзел_СумПУ = СкопироватьУзел(Узел_СумНалПУ, Узел_СумПУ);
			ЗадатьЗначениеЭлемента(НовыйУзел_СумПУ, "ОКТМО", ОКАТО);
			ЗадатьЗначениеЭлемента(НовыйУзел_СумПУ, "НалИсчисл", СуммаНалогаИсчисленная);
			ЗадатьЗначениеЭлемента(НовыйУзел_СумПУ, "АвПУКв1", СуммаАвансовыхПлатежей1);
			ЗадатьЗначениеЭлемента(НовыйУзел_СумПУ, "АвПУКв2", СуммаАвансовыхПлатежей2);
			ЗадатьЗначениеЭлемента(НовыйУзел_СумПУ, "АвПУКв3", СуммаАвансовыхПлатежей3);
			ЗадатьЗначениеЭлемента(НовыйУзел_СумПУ, "НалПУ", СуммаНалога);
			
			// Данные из раздела 2, связанные с разделом 1 по коду по ОКАТО
			Узел_РасчНалТС = ПолучитьПодчиненныйЭлемент(НовыйУзел_СумПУ, "РасчНалТС");
			Для Каждого ЛистРаздела2 Из Раздел2 Цикл
				
				ДанныеРаздела2 = ЛистРаздела2.Данные[0].Значение;
				
				Если ОКАТО <> СокрЛП(ДанныеРаздела2.П000020002003) Тогда
					Продолжить;
				КонецЕсли;
				
				НовыйУзел_РасчНалТС = СкопироватьУзел(НовыйУзел_СумПУ, Узел_РасчНалТС);
				
				Для Каждого Элемент Из НовыйУзел_РасчНалТС.Строки Цикл
					Если ПустаяСтрока(Элемент.Ключ) Тогда
						Продолжить;
					КонецЕсли;
					ЗадатьЗначениеЭлемента(НовыйУзел_РасчНалТС, Элемент.Код, ДанныеРаздела2[Элемент.Ключ]);
				КонецЦикла;
				
				// Льготы и основания.
				УзелЛьготы = ПолучитьПодчиненныйЭлемент(НовыйУзел_РасчНалТС, "ЛьготОсвНал");
				КодЛьготы = ДанныеРаздела2.П000020022003_КодЛьготы;
				Основание = ДанныеРаздела2.П000020022003_Основание;
				СуммаЛьготы = ДанныеРаздела2.П000020023003;
				Если НЕ ПустаяСтрока(КодЛьготы) Тогда
					Если ПустаяСтрока(Основание) Тогда
						ПолныйКодЛьготы = КодЛьготы;
					Иначе
						ПолныйКодЛьготы = КодЛьготы + "/" + Основание;
					КонецЕсли;
					ЗадатьЗначениеЭлемента(УзелЛьготы, "КодОсвНал", ПолныйКодЛьготы);
					ЗадатьЗначениеЭлемента(УзелЛьготы, "СумОсвНал", СуммаЛьготы);
				КонецЕсли;
				
				УзелЛьготы = ПолучитьПодчиненныйЭлемент(НовыйУзел_РасчНалТС, "ЛьготУменСум");
				КодЛьготы = ДанныеРаздела2.П000020024003_КодЛьготы;
				Основание = ДанныеРаздела2.П000020024003_Основание;
				СуммаЛьготы = ДанныеРаздела2.П000020025003;
				Если НЕ ПустаяСтрока(КодЛьготы) Тогда
					Если ПустаяСтрока(Основание) Тогда
						ПолныйКодЛьготы = КодЛьготы;
					Иначе
						ПолныйКодЛьготы = КодЛьготы + "/" + Основание;
					КонецЕсли;
					ЗадатьЗначениеЭлемента(УзелЛьготы, "КодУменСум", ПолныйКодЛьготы);
					ЗадатьЗначениеЭлемента(УзелЛьготы, "СумУменСум", СуммаЛьготы);
				КонецЕсли;
				
				УзелЛьготы = ПолучитьПодчиненныйЭлемент(НовыйУзел_РасчНалТС, "ЛьготСнижСтав");
				КодЛьготы = ДанныеРаздела2.П000020026003_КодЛьготы;
				Основание = ДанныеРаздела2.П000020026003_Основание;
				СуммаЛьготы = ДанныеРаздела2.П000020027003;
				Если НЕ ПустаяСтрока(КодЛьготы) Тогда
					Если ПустаяСтрока(Основание) Тогда
						ПолныйКодЛьготы = КодЛьготы;
					Иначе
						ПолныйКодЛьготы = КодЛьготы + "/" + Основание;
					КонецЕсли;
					ЗадатьЗначениеЭлемента(УзелЛьготы, "КодСнижСтав", ПолныйКодЛьготы);
					ЗадатьЗначениеЭлемента(УзелЛьготы, "СумСнижСтав", СуммаЛьготы);
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ИзвлечьСтруктуруXML()
	
	ДеревоСтруктуры = Новый ДеревоЗначений;
	ДеревоСтруктуры.Колонки.Добавить("Код");
	ДеревоСтруктуры.Колонки.Добавить("Тип");
	ДеревоСтруктуры.Колонки.Добавить("Формат");
	ДеревоСтруктуры.Колонки.Добавить("МинРазмерность");
	ДеревоСтруктуры.Колонки.Добавить("МаксРазмерность");
	ДеревоСтруктуры.Колонки.Добавить("Обязательность");
	ДеревоСтруктуры.Колонки.Добавить("Многостраничность");
	ДеревоСтруктуры.Колонки.Добавить("Многострочность");
	ДеревоСтруктуры.Колонки.Добавить("Раздел");
	ДеревоСтруктуры.Колонки.Добавить("Ключ");
	ДеревоСтруктуры.Колонки.Добавить("Условие");
	ДеревоСтруктуры.Колонки.Добавить("ЗначениеПоУмолчанию");
	ДеревоСтруктуры.Колонки.Добавить("Значение");
	ДеревоСтруктуры.Колонки.Добавить("Представление");
	ДеревоСтруктуры.Колонки.Добавить("Показатели");
	
	Макет = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет("СхемаВыгрузки505");
	ВысотаТаблицы = Макет.ВысотаТаблицы;
	
	УчтенныеГруппы = Новый Соответствие;
	
	Для Уровень = 0 По Макет.КоличествоУровнейГруппировокСтрок() - 1 Цикл
		Макет.ПоказатьУровеньГруппировокСтрок(Уровень);
		Для НомерСтроки = 2 По ВысотаТаблицы Цикл
			НомСтр = ВысотаТаблицы - НомерСтроки + 2;
			Если Макет.Область(НомСтр, 0, НомСтр, 0).Видимость И УчтенныеГруппы.Получить(НомСтр) = Неопределено Тогда
				
				РодительскийУзел = ДеревоСтруктуры;
				Если Уровень <> 0 Тогда
					Для Инд = 1 По НомСтр - 2 Цикл
						Узел = УчтенныеГруппы.Получить(НомСтр - Инд);
						Если Узел <> Неопределено Тогда
							РодительскийУзел = Узел;
							Прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				НовСтр = РодительскийУзел.Строки.Вставить(0);
				НовСтр.Код = СокрЛП(Макет.Область(НомСтр, 1, НомСтр, 1).Текст);
				НовСтр.Раздел = СокрЛП(Макет.Область(НомСтр, 2, НомСтр, 2).Текст);
				НовСтр.Ключ = СокрЛП(Макет.Область(НомСтр, 3, НомСтр, 3).Текст);
				НовСтр.Тип = СокрЛП(Макет.Область(НомСтр, 4, НомСтр, 4).Текст);
				НовСтр.Формат = СокрЛП(Макет.Область(НомСтр, 5, НомСтр, 5).Текст);
				МинРазмерность = СокрЛП(Макет.Область(НомСтр, 6, НомСтр, 6).Текст);
				НовСтр.МинРазмерность = ?(ПустаяСтрока(МинРазмерность), ?(НовСтр.Формат = "N", 99999, 0), Число(МинРазмерность));
				МаксРазмерность = СокрЛП(Макет.Область(НомСтр, 7, НомСтр, 7).Текст);
				НовСтр.МаксРазмерность = ?(ПустаяСтрока(МаксРазмерность), 99999, Число(МаксРазмерность));
				НовСтр.Обязательность = СокрЛП(Макет.Область(НомСтр, 8, НомСтр, 8).Текст);
				НовСтр.Многостраничность = НЕ ПустаяСтрока(Макет.Область(НомСтр, 9, НомСтр, 9).Текст);
				НовСтр.Многострочность = НЕ ПустаяСтрока(Макет.Область(НомСтр, 10, НомСтр, 10).Текст);
				НовСтр.Условие = СокрЛП(Макет.Область(НомСтр, 11, НомСтр, 11).Текст);
				НовСтр.ЗначениеПоУмолчанию = СокрЛП(Макет.Область(НомСтр, 12, НомСтр, 12).Текст);
				НовСтр.Представление = СокрЛП(Макет.Область(НомСтр, 13, НомСтр, 13).Текст);
				
				УчтенныеГруппы.Вставить(НомСтр, НовСтр);
				
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат ДеревоСтруктуры;
	
КонецФункции

&НаСервере
Процедура ОбработатьУсловныеЭлементы(Знач ПараметрыВыгрузки, Узел)
	
	Если ТипЗнч(Узел) <> Тип("ДеревоЗначений") Тогда
		Если Узел.Код = ПараметрыВыгрузки.ИмяКлючевогоУзлаСодержательнойЧасти Тогда
			Возврат;
		КонецЕсли;
		РегламентированнаяОтчетность.ДополнитьСтруктуруПараметровПрочиеОтчеты(мДанныеОтчета, ПараметрыВыгрузки, Узел);
	КонецЕсли;
	КоличествоСтрок = Узел.Строки.Количество();
	Для Инд = 1 По КоличествоСтрок Цикл
		ТекСтр = Узел.Строки.Получить(КоличествоСтрок - Инд);
		Если НЕ ПустаяСтрока(ТекСтр.Условие) Тогда
			Если НЕ РегламентированнаяОтчетность.УсловиеВыполнено(ЭтаФорма, ПараметрыВыгрузки, ТекСтр.Условие) Тогда
				Узел.Строки.Удалить(ТекСтр);
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		ОбработатьУсловныеЭлементы(ПараметрыВыгрузки, ТекСтр);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОтсечьНезаполненныеНеобязательныеУзлы(Узел)
	
	КоличествоСтрок = Узел.Строки.Количество();
	Для Инд = 1 По КоличествоСтрок Цикл
		Стр = Узел.Строки.Получить(КоличествоСтрок - Инд);
		ОтсечьНезаполненныеНеобязательныеУзлы(Стр);
	КонецЦикла;
	
	Если ТипЗнч(Узел) <> Тип("ДеревоЗначений") Тогда
		Если (СтрНайти(Узел.Обязательность, "Н") <> 0 ИЛИ СтрНайти(Узел.Обязательность, "H") <> 0) И УзелПуст(Узел) Тогда // учтем оба варианта: кириллицу и латиницу
			РегламентированнаяОтчетность.УдалитьУзел(Узел);
		ИначеЕсли (СтрНайти(Узел.Обязательность, "М") <> 0 ИЛИ СтрНайти(Узел.Обязательность, "M") <> 0) // учтем оба варианта: кириллицу и латиницу
		И УзелПуст(Узел)
		И ?(СтрНайти(Узел.Обязательность, "О") <> 0 ИЛИ СтрНайти(Узел.Обязательность, "O") <> 0, РегламентированнаяОтчетность.ИмеютсяАналогичныеСоседниеУзлыКлюч(Узел), Истина) Тогда
			РегламентированнаяОтчетность.УдалитьУзел(Узел);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьПодчиненныйЭлемент(Узел, КодЭлемента)
	
	Для Каждого Стр Из Узел.Строки Цикл
		Если Стр.Код = КодЭлемента Тогда
			Возврат Стр;
		КонецЕсли;
	КонецЦикла;
	
КонецФункции

&НаСервере
Функция ПроверитьВозможностьВыгрузки(ПараметрыВыгрузки)
	
	СтатусПроверки = Истина;
	
	// Таблица для проверки сочетаний ОКТМО раздела 1 с разделом 2.
	СочетаниеРазделов = Новый ТаблицаЗначений;
	СочетаниеРазделов.Колонки.Добавить("ОКТМО");
	СочетаниеРазделов.Колонки.Добавить("Раздел", Новый ОписаниеТипов("Число"));
	СочетаниеРазделов.Колонки.Добавить("Страница", Новый ОписаниеТипов("Число"));
	СочетаниеРазделов.Колонки.Добавить("ИмяОбласти");
	СочетаниеРазделов.Колонки.Добавить("Счетчик1", Новый ОписаниеТипов("Число"));
	СочетаниеРазделов.Колонки.Добавить("Счетчик2", Новый ОписаниеТипов("Число"));
	
	ПроверитьЗаполнение_ТитульныйЛист(ПараметрыВыгрузки, СтатусПроверки);
	ПроверитьЗаполнение_Раздел1(СочетаниеРазделов, СтатусПроверки);
	ПроверитьЗаполнение_Раздел2(СочетаниеРазделов, СтатусПроверки);
	
	ПроверитьЗаполнение_СочетаниеРазделов(СочетаниеРазделов, СтатусПроверки);
	
	Возврат СтатусПроверки;
	
КонецФункции

&НаСервере
Процедура ПроверитьЗаполнение_ТитульныйЛист(ПараметрыВыгрузки, СтатусПроверки)
	
	ДлинаИНН = СтрДлина(СокрЛП(ПараметрыВыгрузки.ИННЮЛОрг));
	Если ДлинаИНН <> 10 Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(
			ЭтаФорма, "Не" + ?(ДлинаИНН = 0, "", "верно") + " задан ИНН организации", "Титульный", "ИНН1");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	ДлинаКПП = СтрДлина(СокрЛП(ПараметрыВыгрузки.КППОрг));
	Если ДлинаКПП <> 9 Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(
			ЭтаФорма, "Не" + ?(ДлинаИНН = 0, "", "верно") + " задан КПП организации", "Титульный", "КПП1");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	ДопустимыеНалоговыеПериоды = "34, 50";
	Если НЕ ЗначениеСодержитсяВСписке(ПараметрыВыгрузки.Период, ДопустимыеНалоговыеПериоды) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма,
			"Код налогового периода должен быть равен одному из следующих значений: "
			+ ДопустимыеНалоговыеПериоды, "Титульный", "Период");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ПустаяСтрока(ПараметрыВыгрузки.НаимОрг) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма,
			"Не указано полное наименование организации", "Титульный", "НаименованиеОрганизации");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	КодНО = ПараметрыВыгрузки.КодНО;
	Если ПустаяСтрока(КодНО) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма,
			"Не задан код налогового органа", "Титульный", "КодИМНС1");
		СтатусПроверки = Ложь;
	ИначеЕсли СтрДлина(СокрЛП(КодНО)) <> 4 ИЛИ НЕ СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(КодНО) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма,
			"Неверно задан код налогового органа", "Титульный", "КодИМНС1");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыВыгрузки.ОКВЭД)
		И НЕ РегламентированнаяОтчетностьКлиентСервер.ОКВЭДСоответствуетТребованиям(ПараметрыВыгрузки.ОКВЭД) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма,
		"На титульном листе задано некорректное значение кода вида деятельности по ОКВЭД. Допустимы значения, соответствующие следующим шаблонам: ""XX"", ""XX.X"", ""XX.XX"", ""XX.XX.X"", ""XX.XX.XX"" (X - любая цифра).",
		"Титульный", "ОКВЭД");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	ДопустимыеКодыМестаПредставления = "213, 216, 260";
	Если НЕ ЗначениеСодержитсяВСписке(ПараметрыВыгрузки.ПоМесту, ДопустимыеКодыМестаПредставления) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма,
			"Код места, по которому представляется документ, должен быть равен одному из следующих значений: "
			+ ДопустимыеКодыМестаПредставления, "Титульный", "ПоМесту1");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	// Секция реорганизации.
	Если ЗначениеЗаполнено(ПараметрыВыгрузки.ФормРеорг) Тогда
		
		ДопустимыеКодыФормыРеорганизации = "0, 1, 2, 3, 5, 6";
		Если НЕ ЗначениеСодержитсяВСписке(ПараметрыВыгрузки.ФормРеорг, ДопустимыеКодыФормыРеорганизации) Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма,
				"Код формы реорганизации (ликвидации) должен быть равен одному из следующих значений: "
				+ ДопустимыеКодыФормыРеорганизации, "Титульный", "КодФормыРеорганизации");
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		Если ЗначениеСодержитсяВСписке(ПараметрыВыгрузки.ФормРеорг, "1, 2, 3, 5, 6") Тогда
			ДлинаИННРеорг = СтрДлина(ПараметрыВыгрузки.ИННЮЛРеорг);
			Если ДлинаИННРеорг <> 10 Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма,
					"Не" + ?(ДлинаИННРеорг = 0, "", "верно") + " задан ИНН реорганизованной организации", "Титульный", "ИНН_Реорг");
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			ДлинаКППРеорг = СтрДлина(ПараметрыВыгрузки.КППРеорг);
			Если ДлинаКППРеорг <> 9 Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма,
					"Не" + ?(ДлинаКППРеорг = 0, "", "верно") + " задан КПП реорганизованной организации", "Титульный", "КПП_Реорг");
				СтатусПроверки = Ложь;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	// Секция подписанта декларации.
	Если ПустаяСтрока(ПараметрыВыгрузки.ФамилияПодписанта) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(
		ЭтаФорма, "Не задана фамилия подписанта", "Титульный", "ОргПодписант");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ПустаяСтрока(ПараметрыВыгрузки.ИмяПодписанта) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(
		ЭтаФорма, "Не задано имя подписанта", "Титульный", "ОргПодписант");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ПараметрыВыгрузки.ТипПодписанта = "2" И ПустаяСтрока(ПараметрыВыгрузки.НаимДокПредставителя) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(
		ЭтаФорма, "Не указан документ, удостоверяющий полномочия представителя", "Титульный", "ДокУпПред");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьЗаполнение_Раздел1(СочетаниеРазделов, СтатусПроверки)
	
	Раздел1 = мДанныеОтчета.Раздел1;
	
	ТаблицаКБК = Новый ТаблицаЗначений;
	ТаблицаКБК.Колонки.Добавить("НомерСтраницы");
	ТаблицаКБК.Колонки.Добавить("КБК");
	ТаблицаКБК.Колонки.Добавить("НеЗадан");
	
	ОКТМОРаздела = Новый ТаблицаЗначений;
	ОКТМОРаздела.Колонки.Добавить("КодОКТМО");
	
	ЕстьЗаполненныйБлок = Ложь;
	КоличествоБлоковРаздела = 3;
	
	Для Каждого Лист Из Раздел1 Цикл
		ДанныеЛиста = Лист.Данные[0].Значение;
		НомерСтраницы = Раздел1.Индекс(Лист) + 1;
		
		КБК = СокрЛП(ДанныеЛиста.П000010001003);
		
		НоваяСтрокаТаблицыКБК = ТаблицаКБК.Добавить();
		НоваяСтрокаТаблицыКБК.НомерСтраницы = НомерСтраницы;
		НоваяСтрокаТаблицыКБК.КБК = КБК;
		НоваяСтрокаТаблицыКБК.НеЗадан = ПустаяСтрока(НоваяСтрокаТаблицыКБК.КБК);
		
		Если ЗначениеЗаполнено(КБК)
		   И (СтрДлина(КБК) <> 20 ИЛИ НЕ СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(КБК)) Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма,
				"В разделе 1 на странице " + НомерСтраницы + " неверно задан КБК", "Раздел1", "П000010001003", НомерСтраницы);
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		Для Инд = 1 По КоличествоБлоковРаздела Цикл
			Постфикс = "_" + Формат(Инд, "ЧН=; ЧГ=0");
			ИмяОбластиОКТМО = "П000010002003" + Постфикс;
			
			ОКТМО = СокрЛП(ДанныеЛиста[ИмяОбластиОКТМО]);
			ЗаданоОКТМО = (НЕ ПустаяСтрока(ОКТМО));
			ЗаданыСуммыНалогаИПлатежей
				 = (ЗначениеСуммыЗаполнено(ДанныеЛиста["П000010002103" + Постфикс])
				ИЛИ ЗначениеСуммыЗаполнено(ДанныеЛиста["П000010002303" + Постфикс])
				ИЛИ ЗначениеСуммыЗаполнено(ДанныеЛиста["П000010002503" + Постфикс])
				ИЛИ ЗначениеСуммыЗаполнено(ДанныеЛиста["П000010002703" + Постфикс])
				ИЛИ ЗначениеСуммыЗаполнено(ДанныеЛиста["П000010003003" + Постфикс])
				ИЛИ ЗначениеСуммыЗаполнено(ДанныеЛиста["П000010004003" + Постфикс]));
			
			Если ЗаданоОКТМО Тогда
				ДлинаОКТМО = СтрДлина(ОКТМО);
				Если ДлинаОКТМО <> 11 И ДлинаОКТМО <> 8 ИЛИ НЕ СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(ОКТМО) Тогда
					РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "В разделе 1 на странице "
					+ НомерСтраницы + " неверно задан код по ОКТМО", "Раздел1", ИмяОбластиОКТМО, НомерСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
			Иначе
				Если ЗаданыСуммыНалогаИПлатежей Тогда
					РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "В разделе 1 на странице "
					+ НомерСтраницы + " не задан код по ОКТМО", "Раздел1", ИмяОбластиОКТМО, НомерСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
			КонецЕсли;
			
			Если ЗаданоОКТМО ИЛИ ЗаданыСуммыНалогаИПлатежей Тогда
				Сочетание = СочетаниеРазделов.Добавить();
				Сочетание.ОКТМО      = ОКТМО;
				Сочетание.Раздел     = 1;
				Сочетание.Страница   = НомерСтраницы;
				Сочетание.ИмяОбласти = ИмяОбластиОКТМО;
				Сочетание.Счетчик1   = 1;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	НезаданныйКБК = ТаблицаКБК.Найти(Истина, "НеЗадан");
	Если НезаданныйКБК <> Неопределено Тогда
		НомерСтраницы = ТаблицаКБК.Индекс(НезаданныйКБК) + 1;
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма,
		"В разделе 1 на странице " + НомерСтраницы + " не задан КБК", "Раздел1", "П000010001003", НомерСтраницы);
		СтатусПроверки = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьЗаполнение_Раздел2(СочетаниеРазделов, СтатусПроверки)
	
	Раздел2 = мДанныеОтчета.Раздел2;
	
	ЕстьЗаполненныйЛист = Ложь;
	
	Для Каждого Лист Из Раздел2 Цикл
		ДанныеЛиста = Лист.Данные[0].Значение;
		НомерСтраницы = Раздел2.Индекс(Лист) + 1;
		
		ИмяОбластиОКТМО = "П000020002003";
		ОКТМО = СокрЛП(ДанныеЛиста[ИмяОбластиОКТМО]);
		ЗаданоОКТМО = (НЕ ПустаяСтрока(ОКТМО));
		
		ЛистЗаполнен
			  = ЗначениеЗаполнено(ДанныеЛиста.П000020003003)
			ИЛИ ЗначениеЗаполнено(ДанныеЛиста.П000020004003)
			ИЛИ ЗначениеЗаполнено(ДанныеЛиста.П000020005003)
			ИЛИ ЗначениеЗаполнено(ДанныеЛиста.П000020006003)
			ИЛИ ЗначениеЗаполнено(ДанныеЛиста.П000020007003)
			ИЛИ ЗначениеЗаполнено(ДанныеЛиста.П000020008003)
			ИЛИ ЗначениеЗаполнено(ДанныеЛиста.П000020009003)
			ИЛИ ЗначениеЗаполнено(ДанныеЛиста.П000020010003)
			ИЛИ ЗначениеЗаполнено(ДанныеЛиста.П000020011003)
			ИЛИ ЗначениеЗаполнено(ДанныеЛиста.П000020012003)
			ИЛИ ЗначениеЗаполнено(ДанныеЛиста.П000020013003)
			ИЛИ ЗначениеЗаполнено(ДанныеЛиста.П000020014003)
			ИЛИ ЗначениеЗаполнено(ДанныеЛиста.П000020015003_Числ)
			ИЛИ ЗначениеЗаполнено(ДанныеЛиста.П000020015003_Знам)
			ИЛИ ЗначениеЗаполнено(ДанныеЛиста.П000020016003)
			ИЛИ ЗначениеЗаполнено(ДанныеЛиста.П000020017003)
			ИЛИ ЗначениеЗаполнено(ДанныеЛиста.П000020018003)
			ИЛИ ЗначениеСуммыЗаполнено(ДанныеЛиста.П000020019003)
			ИЛИ ЗначениеЗаполнено(ДанныеЛиста.П000020020003)
			ИЛИ ЗначениеЗаполнено(ДанныеЛиста.П000020021003)
			ИЛИ ЗначениеЗаполнено(ДанныеЛиста.П000020022003_КодЛьготы)
			ИЛИ ЗначениеСуммыЗаполнено(ДанныеЛиста.П000020023003)
			ИЛИ ЗначениеЗаполнено(ДанныеЛиста.П000020024003_КодЛьготы)
			ИЛИ ЗначениеСуммыЗаполнено(ДанныеЛиста.П000020025003)
			ИЛИ ЗначениеЗаполнено(ДанныеЛиста.П000020026003_КодЛьготы)
			ИЛИ ЗначениеСуммыЗаполнено(ДанныеЛиста.П000020027003)
			ИЛИ ЗначениеЗаполнено(ДанныеЛиста.П000020028003)
			ИЛИ ЗначениеСуммыЗаполнено(ДанныеЛиста.П000020029003)
			ИЛИ ЗначениеСуммыЗаполнено(ДанныеЛиста.П000020030003);
		
		Если ЗаданоОКТМО Тогда
			ДлинаОКТМО = СтрДлина(ОКТМО);
			Если ДлинаОКТМО <> 11 И ДлинаОКТМО <> 8 ИЛИ НЕ СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(ОКТМО) Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "В разделе 2 на странице " + НомерСтраницы
				+ " неверно задан код по ОКТМО", "Раздел2", ИмяОбластиОКТМО, НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
		Иначе
			Если ЛистЗаполнен Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "В разделе 2 на странице " + НомерСтраницы
				+ " не задан код по ОКТМО", "Раздел2", ИмяОбластиОКТМО, НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
		КонецЕсли;
		
		Если ЛистЗаполнен ИЛИ ЗаданоОКТМО Тогда
			
			ИмяПроверяемойОбласти = "П000020003003";
			ДлинаЗначенияОбласти = СтрДлина(СокрЛП(ДанныеЛиста[ИмяПроверяемойОбласти]));
			Если ДлинаЗначенияОбласти <> 5 Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "В разделе 2 на странице " + НомерСтраницы
				+ " не" + ?(ДлинаЗначенияОбласти = 0, "", "верно") + " задан код вид транспортного средства",
				"Раздел2", ИмяПроверяемойОбласти, НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			ИмяПроверяемойОбласти = "П000020006003";
			ОбластьЗаполнена = НЕ ПустаяСтрока(СокрЛП(ДанныеЛиста[ИмяПроверяемойОбласти]));
			Если НЕ ОбластьЗаполнена Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "В разделе 2 на странице " + НомерСтраницы
				+ " не задан регистрационный знак транспортного средства",
				"Раздел2", ИмяПроверяемойОбласти, НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			ИмяПроверяемойОбласти1 = "П000020007003";
			ИмяПроверяемойОбласти2 = "П000020008003";
			ИмяПроверяемойОбласти3 = "П000020013003";
			Область1Заполнена = ЗначениеЗаполнено(ДанныеЛиста[ИмяПроверяемойОбласти1]);
			Область2Заполнена = ЗначениеЗаполнено(ДанныеЛиста[ИмяПроверяемойОбласти2]);
			Область3Заполнена = ЗначениеЗаполнено(ДанныеЛиста[ИмяПроверяемойОбласти3]);
			Если НЕ Область1Заполнена Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "В разделе 2 на странице " + НомерСтраницы
				+ " не задана дата регистрации транспортного средства",
				"Раздел2", ИмяПроверяемойОбласти1, НомерСтраницы);
				СтатусПроверки = Ложь;
			ИначеЕсли Год(ДанныеЛиста[ИмяПроверяемойОбласти1]) > Год(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "В разделе 2 на странице " + НомерСтраницы
				+ " дата регистрации транспортного средства должна быть не больше даты окончания налогового периода.",
				"Раздел2", ИмяПроверяемойОбласти1, НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			Если Область2Заполнена Тогда
				Если Год(ДанныеЛиста[ИмяПроверяемойОбласти2]) < Год(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) Тогда
					РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "В разделе 2 на странице " + НомерСтраницы
					+ " дата прекращения регистрации транспортного средства (снятия с учета) должна быть не меньше даты начала налогового периода.",
					"Раздел2", ИмяПроверяемойОбласти2, НомерСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
				Если ДанныеЛиста[ИмяПроверяемойОбласти1] > ДанныеЛиста[ИмяПроверяемойОбласти2] Тогда
					РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "В разделе 2 на странице " + НомерСтраницы
					+ " дата регистрации транспортного средства должна быть не больше даты прекращения регистрации транспортного средства (снятия с учета).",
					"Раздел2", ИмяПроверяемойОбласти1, НомерСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
			КонецЕсли;
			Если Область3Заполнена И Область1Заполнена Тогда
				Если Число(ДанныеЛиста[ИмяПроверяемойОбласти3]) > Год(ДанныеЛиста[ИмяПроверяемойОбласти1]) Тогда
					РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "В разделе 2 на странице " + НомерСтраницы
					+ " год выпуска транспортного средства должен быть не больше года, указанного в дате регистрации транспортного средства.",
					"Раздел2", ИмяПроверяемойОбласти3, НомерСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
			КонецЕсли;
			
			ИмяПроверяемойОбласти = "П000020009003";
			ОбластьЗаполнена = ЗначениеЗаполнено(ДанныеЛиста[ИмяПроверяемойОбласти]);
			Если НЕ ОбластьЗаполнена Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "В разделе 2 на странице " + НомерСтраницы
				+ " не задана налоговая база", "Раздел2", ИмяПроверяемойОбласти, НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			ИмяПроверяемойОбласти = "П000020010003";
			ДлинаЗначенияОбласти = СтрДлина(СокрЛП(ДанныеЛиста[ИмяПроверяемойОбласти]));
			Если ДлинаЗначенияОбласти <> 3
				ИЛИ НЕ СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(ДанныеЛиста[ИмяПроверяемойОбласти]) Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "В разделе 2 на странице " + НомерСтраницы
				+ " не" + ?(ДлинаЗначенияОбласти = 0, "", "верно") + " задан код единицы измерения по ОКЕИ",
				"Раздел2", ИмяПроверяемойОбласти, НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			ДопустимыеЭкологическиеКлассы = "0, 1, 2, 3, 4, 5, 6";
			ИмяПроверяемойОбласти = "П000020011003";
			Если ЗначениеЗаполнено(ДанныеЛиста[ИмяПроверяемойОбласти])
			   И НЕ ЗначениеСодержитсяВСписке(ДанныеЛиста[ИмяПроверяемойОбласти], ДопустимыеЭкологическиеКлассы) Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "В разделе 2 на странице " + НомерСтраницы
				+ " экологический класс должен быть равен одному из следующих значений: " + ДопустимыеЭкологическиеКлассы,
				"Раздел2", ИмяПроверяемойОбласти, НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ДанныеЛиста.П000020015003_Числ) Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "В разделе 2 на странице " + НомерСтраницы
				+ " не задан числитель в доле налогоплательщика в праве на транспортное средство",
				"Раздел2", "П000020015003_Числ", НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ДанныеЛиста.П000020015003_Знам) Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "В разделе 2 на странице " + НомерСтраницы
				+ " не задан знаменатель в доле налогоплательщика в праве на транспортное средство",
				"Раздел2", "П000020015003_Знам", НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ДанныеЛиста.П000020015003_Числ) И ЗначениеЗаполнено(ДанныеЛиста.П000020015003_Знам)
			   И ДанныеЛиста.П000020015003_Знам < ДанныеЛиста.П000020015003_Числ Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "В разделе 2 на странице " + НомерСтраницы
				+ " числитель больше знаменателя в доле налогоплательщика в праве на транспортное средство",
				"Раздел2", "П000020015003_Числ", НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			ДопустимыеКодыЛьгот = "20210, 30200";
			ИмяПроверяемойОбласти = "П000020022003_КодЛьготы";
			КодЛьготы = ДанныеЛиста[ИмяПроверяемойОбласти];
			Если ЗначениеЗаполнено(КодЛьготы) И НЕ ЗначениеСодержитсяВСписке(КодЛьготы, ДопустимыеКодыЛьгот) Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "В разделе 2 на странице " + НомерСтраницы
				+ " код налоговой льготы в виде освобождения от налогообложения должен быть равен одному из следующих значений: "
				+ ДопустимыеКодыЛьгот, "Раздел2", ИмяПроверяемойОбласти, НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			ДопустимыйКодЛьготы = "20220";
			ИмяПроверяемойОбласти = "П000020024003_КодЛьготы";
			КодЛьготы = ДанныеЛиста[ИмяПроверяемойОбласти];
			Если ЗначениеЗаполнено(КодЛьготы) И КодЛьготы <> ДопустимыйКодЛьготы Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "В разделе 2 на странице " + НомерСтраницы
				+ " код налоговой льготы в виде уменьшения суммы налога должен быть равен " + ДопустимыйКодЛьготы,
				"Раздел2", ИмяПроверяемойОбласти, НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			ДопустимыйКодЛьготы = "20230";
			ИмяПроверяемойОбласти = "П000020026003_КодЛьготы";
			КодЛьготы = ДанныеЛиста[ИмяПроверяемойОбласти];
			Если ЗначениеЗаполнено(КодЛьготы) И КодЛьготы <> ДопустимыйКодЛьготы Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "В разделе 2 на странице " + НомерСтраницы
				+ " код налоговой льготы в виде снижения налоговой ставки должен быть равен " + ДопустимыйКодЛьготы,
				"Раздел2", ИмяПроверяемойОбласти, НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			Сочетание = СочетаниеРазделов.Добавить();
			Сочетание.ОКТМО      = ОКТМО;
			Сочетание.Раздел     = 2;
			Сочетание.Страница   = НомерСтраницы;
			Сочетание.ИмяОбласти = "П000020002003";
			Сочетание.Счетчик2   = 1;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьЗаполнение_СочетаниеРазделов(СочетаниеРазделов, СтатусПроверки)
	
	СочетанияРаздела1 = СочетаниеРазделов.НайтиСтроки(Новый Структура("Раздел", 1));
	СочетанияРаздела2 = СочетаниеРазделов.НайтиСтроки(Новый Структура("Раздел", 2));
	
	СокращеннаяПроверка = Ложь;
	
	Если СочетанияРаздела1.Количество() = 0 Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма,
		"В разделе 1 не заполнен ни один блок с информацией о суммах налога", "Раздел1", "П000010001003_1");
		СтатусПроверки = Ложь;
		СокращеннаяПроверка = Истина;
	КонецЕсли;
	
	Если СочетанияРаздела2.Количество() = 0 Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма,
		"В декларации отсутствуют заполненные страницы раздела 2", "Раздел2", "П000020001001", 1);
		СтатусПроверки = Ложь;
		СокращеннаяПроверка = Истина;
	КонецЕсли;
	
	Если СокращеннаяПроверка Тогда
		Возврат;
	КонецЕсли;
	
	ПовторенияРаздела1 = СочетаниеРазделов.Скопировать(СочетанияРаздела1);
	ПовторенияРаздела1.Свернуть("ОКТМО", "Счетчик1");
	
	Для Каждого СтрокаПроверки Из ПовторенияРаздела1 Цикл
		Если СтрокаПроверки.Счетчик1 > 1 И ЗначениеЗаполнено(СтрокаПроверки.ОКТМО) Тогда
			УсловияПоиска = Новый Структура("ОКТМО, Раздел", СтрокаПроверки.ОКТМО, 1);
			СтрокиДубликатов = СочетаниеРазделов.НайтиСтроки(УсловияПоиска);
			ТаблицаДубликатов = СочетаниеРазделов.Скопировать(СтрокиДубликатов);
			ТаблицаДубликатов.Сортировать("Страница, ИмяОбласти");
			
			СтраницаПерехода = ТаблицаДубликатов[0].Страница;
			ПозицияПерехода = ТаблицаДубликатов[0].ИмяОбласти;
			
			ТаблицаДубликатов.Свернуть("Страница");
			ТаблицаДубликатов.Сортировать("Страница");
			
			СписокСтраниц = "";
			Для Каждого Дубликат Из ТаблицаДубликатов Цикл
				СписокСтраниц = СписокСтраниц + ", " + Формат(Дубликат.Страница, "ЧН=; ЧГ=0");
			КонецЦикла;
			СписокСтраниц = Сред(СписокСтраниц, 3);
			
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма,
				"Обнаружены дублирующиеся сочетания кода по ОКТМО " + СтрокаПроверки.ОКТМО + " в разделе 1",
				"Раздел1", ПозицияПерехода, СтраницаПерехода);
			СтатусПроверки = Ложь;
		КонецЕсли;
	КонецЦикла;
	
	СочетаниеРазделовСвернутое = СочетаниеРазделов.Скопировать();
	СочетаниеРазделовСвернутое.Свернуть("ОКТМО", "Счетчик1, Счетчик2");
	
	Для Каждого Сочетание Из СочетаниеРазделовСвернутое Цикл
		// Связи раздела 1.
		Если Сочетание.Счетчик1 <> 0 И Сочетание.Счетчик2 = 0 И ЗначениеЗаполнено(Сочетание.ОКТМО) Тогда
			УсловияПоиска = Новый Структура("ОКТМО, Раздел", Сочетание.ОКТМО, 1);
			НесвязанныеСтроки = СочетаниеРазделов.НайтиСтроки(УсловияПоиска);
			
			СтраницаПерехода = НесвязанныеСтроки[0].Страница;
			ПозицияПерехода  = НесвязанныеСтроки[0].ИмяОбласти;
			
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "Для кода по ОКТМО " + НесвязанныеСтроки[0].ОКТМО
			+ " на странице " + Формат(СтраницаПерехода, "ЧН=; ЧГ=0")
			+ " раздела 1 не обнаружены заполненые страницы раздела 2", "Раздел1", ПозицияПерехода);
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		// Связи раздела 2.
		Если Сочетание.Счетчик1 = 0 И Сочетание.Счетчик2 <> 0 И ЗначениеЗаполнено(Сочетание.ОКТМО) Тогда
			УсловияПоиска = Новый Структура("ОКТМО, Раздел", Сочетание.ОКТМО, 2);
			НесвязанныеСтроки = СочетаниеРазделов.НайтиСтроки(УсловияПоиска);
			
			СтраницаПерехода = НесвязанныеСтроки[0].Страница;
			ПозицияПерехода  = НесвязанныеСтроки[0].ИмяОбласти;
			
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "Для кода по ОКТМО " + НесвязанныеСтроки[0].ОКТМО
			+ " на странице " + Формат(СтраницаПерехода, "ЧН=; ЧГ=0")
			+ " раздела 2 не найдены соответствующие значения кода по ОКТМО в разделе 1",
			"Раздел2", ПозицияПерехода, СтраницаПерехода);
			СтатусПроверки = Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ЗначениеСодержитсяВСписке(ПроверяемоеЗначение, КонтрольныйСписок)
	
	Результат = Ложь;
	
	Значения = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(КонтрольныйСписок, ",");
	Для Инд = 0 По Значения.ВГраница() Цикл
		Значения[Инд] = СокрЛП(Значения[Инд]);
	КонецЦикла;
	
	Результат = (Значения.Найти(ПроверяемоеЗначение) <> Неопределено);
	
	Возврат Результат
	
КонецФункции

&НаСервере
Функция ЗначениеСуммыЗаполнено(ЗначениеСуммы)
	
	Возврат (Окр(ЗначениеСуммы) <> 0)
	
КонецФункции

&НаКлиенте
Процедура ПроставитьСведенияОПредставителеОрганизации() Экспорт
	
	РегламентированнаяОтчетностьКлиентСервер.ПроставитьСведенияОПредставителеОрганизации(ЭтаФорма, Истина);
	
КонецПроцедуры

&НаСервере
Функция СкопироватьУзел(Родитель, Узел)
	
	НовыйУзел = Родитель.Строки.Добавить();
	ЗаполнитьЗначенияСвойств(НовыйУзел, Узел, , "Родитель, Строки");
	Для Каждого Стр из Узел.Строки Цикл
		СкопироватьУзел(НовыйУзел, Стр);
	КонецЦикла;
	Возврат НовыйУзел;
	
КонецФункции

&НаСервере
Функция СформироватьИдФайл(ПараметрыВыгрузки)
	
	ЭтоПБОЮЛ = ПараметрыВыгрузки.Свойство("ЭтоПБОЮЛ") И ПараметрыВыгрузки.ЭтоПБОЮЛ;
	
	Возврат ПараметрыВыгрузки.ПрефиксИмениФайлаВыгрузки
			+ "_" + ?(ЗначениеЗаполнено(ПараметрыВыгрузки.КодИФНСПосредника),
			        ПараметрыВыгрузки.КодИФНСПосредника, ПараметрыВыгрузки.КодНО)
			+ "_" + ПараметрыВыгрузки.КодНО
			+ "_" + ?(ЭтоПБОЮЛ, СокрЛП(ПараметрыВыгрузки.ИННЮЛОрг),
			        СокрЛП(ПараметрыВыгрузки.ИННЮЛОрг) + СокрЛП(ПараметрыВыгрузки.КППОрг))
			+ "_" + Формат(ТекущаяДатаСеанса(), "ДФ=ггггММдд")
			+ "_" + Строка(Новый УникальныйИдентификатор);
	
КонецФункции

&НаСервере
Функция СформироватьСтруктуруПараметров()
	
	Титульный = мДанныеОтчета.ПолеТабличногоДокументаТитульный;
	
	ПараметрыВыгрузки = Новый Структура;
	ПараметрыВыгрузки.Вставить("КодИФНСПосредника", ?(СтруктураРеквизитовФормы.Организация.КрупнейшийНалогоплательщик,
	СокрЛП(СтруктураРеквизитовФормы.Организация.КодНалоговогоОрганаПолучателя), ""));
	ПараметрыВыгрузки.Вставить("ПрефиксИмениФайлаВыгрузки", "NO_TRAND");
	ПараметрыВыгрузки.Вставить("ИмяКлючевогоУзлаСодержательнойЧасти", "ТрНалНД");
	
	ПараметрыВыгрузки.Вставить("ВерсПрог", РегламентированнаяОтчетность.НазваниеИВерсияПрограммы());
	ПараметрыВыгрузки.Вставить("ДатаДок",  Формат(ТекущаяДатаСеанса(), "ДФ=дд.ММ.гггг"));
	ПараметрыВыгрузки.Вставить("Период",   СокрЛП(Титульный.Период));
	ПараметрыВыгрузки.Вставить("ОтчетГод", Формат(СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания, "ДФ=гггг"));
	ПараметрыВыгрузки.Вставить("КодНО",    СокрЛП(Титульный.КодИМНС));
	ПараметрыВыгрузки.Вставить("НомКорр",  Строка(СтруктураРеквизитовФормы.мСохраненныйДок.Вид));
	ПараметрыВыгрузки.Вставить("ПоМесту",  СокрЛП(Титульный.ПоМесту));
	ПараметрыВыгрузки.Вставить("ОКВЭД",    СтрЗаменить(СокрЛП(СтрЗаменить(Титульный.ОКВЭД, ".", " ")), " ", "."));
	ПараметрыВыгрузки.Вставить("Тлф",      СокрЛП(Титульный.ТелефонОрганизации));
	ПараметрыВыгрузки.Вставить("НаимОрг",  СокрЛП(Титульный.НаименованиеОрганизации));
	ПараметрыВыгрузки.Вставить("ИННЮЛОрг", СокрЛП(СтруктураРеквизитовФормы.Организация.ИНН));
	ПараметрыВыгрузки.Вставить("КППОрг",   СокрЛП(Титульный.КПП1));
	
	ПараметрыВыгрузки.Вставить("ФормРеорг",  СокрЛП(Титульный.КодФормыРеорганизации));
	ПараметрыВыгрузки.Вставить("ИННЮЛРеорг", СокрЛП(Титульный.ИННРеорганизованнойОрганизации));
	ПараметрыВыгрузки.Вставить("КППРеорг",   СокрЛП(Титульный.КППРеорганизованнойОрганизации));
	
	ФИОПодписанта = РегламентированнаяОтчетность.РазложитьФИО(Титульный.Подписант);
	
	ПараметрыВыгрузки.Вставить("ТипПодписанта", СокрЛП(Титульный.ТипПодписанта));
	
	ПараметрыВыгрузки.Вставить("ФамилияПодписанта",  ФИОПодписанта.Фамилия);
	ПараметрыВыгрузки.Вставить("ИмяПодписанта",      ФИОПодписанта.Имя);
	ПараметрыВыгрузки.Вставить("ОтчествоПодписанта", ФИОПодписанта.Отчество);
	
	ПараметрыВыгрузки.Вставить("НаимОргПредставителя", СокрЛП(Титульный.НаименованиеОрганизацииПредставителя));
	ПараметрыВыгрузки.Вставить("НаимДокПредставителя", СокрЛП(Титульный.НаименованиеДокументаПредставителя));
	
	ПараметрыВыгрузки.Вставить("ИдФайл", СформироватьИдФайл(ПараметрыВыгрузки));
	
	Возврат ПараметрыВыгрузки;
	
КонецФункции

&НаСервере
Функция СформироватьСтруктуруПоказателей()
	
	мДанныеОтчета = Новый Структура;
	
	СохрСтруктура = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить();
	ПоказателиОтчета = СохрСтруктура.ПоказателиОтчета;
	Для Каждого Раздел Из ПоказателиОтчета Цикл
		мДанныеОтчета.Вставить(Раздел.Ключ, РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(Раздел.Значение));
	КонецЦикла;
	
	ТекущийРаздел = Неопределено;
	Если мСтруктураМногостраничныхРазделов.Свойство(СтруктураРеквизитовФормы.НаимТекущегоРаздела, ТекущийРаздел) Тогда
		АктивнаяСтраница = ЭтаФорма[ТекущийРаздел].НайтиСтроки(Новый Структура("АктивнаяСтраница", Истина));
		Если АктивнаяСтраница.Количество() > 0 Тогда
			АктивнаяСтраница = АктивнаяСтраница[0];
			ИндексАктивнойСтраницы = ЭтаФорма[ТекущийРаздел].Индекс(АктивнаяСтраница);
		КонецЕсли;
	КонецЕсли;
	
	Для Каждого ЭлементСтруктуры Из СохрСтруктура.ДанныеМногостраничныхРазделов Цикл	
		НайденноеЗначение = Неопределено;
		мСтруктураМногостраничныхРазделов.Свойство(ЭлементСтруктуры.Ключ, НайденноеЗначение);
		
		Если НЕ НайденноеЗначение = Неопределено Тогда
			
			НайденноеЗначение = ЭтаФорма[НайденноеЗначение];
			ЗначениеВДанныеФормы(ЭлементСтруктуры.Значение, НайденноеЗначение);
			
			Если НайденноеЗначение[0].Свойство("Данные") Тогда
				
				Для Каждого СтрокаТаблЗнач Из НайденноеЗначение Цикл
					Если ТипЗнч(СтрокаТаблЗнач.Данные) = Тип("СписокЗначений") Тогда
						СтрокаТаблЗнач.Данные.Очистить();
						СтрокаТаблЗнач.Данные.Добавить(ЭлементСтруктуры.Значение[НайденноеЗначение.Индекс(СтрокаТаблЗнач)].Данные);
					КонецЕсли;
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Раздел Из мСтруктураМногостраничныхРазделов Цикл
		Для Каждого Страница Из ЭтаФорма[Раздел.Значение] Цикл
			Страница.АктивнаяСтраница = Ложь;
		КонецЦикла;
	КонецЦикла;
	
	ТекущийРаздел = Неопределено;
	Если мСтруктураМногостраничныхРазделов.Свойство(СтруктураРеквизитовФормы.НаимТекущегоРаздела, ТекущийРаздел) Тогда
		Если ИндексАктивнойСтраницы <> Неопределено Тогда
			ЭтаФорма[ТекущийРаздел][ИндексАктивнойСтраницы].АктивнаяСтраница = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Для Каждого Раздел Из мСтруктураМногостраничныхРазделов Цикл
		ТаблицаЛистовРаздела = ЭтаФорма[Раздел.Значение];
		Для Каждого Лист Из ТаблицаЛистовРаздела Цикл
			Лист.Данные[0].Значение = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(Лист.Данные[0].Значение);
		КонецЦикла;
		мДанныеОтчета.Вставить(Раздел.Ключ, ЭтаФорма[Раздел.Значение]);
	КонецЦикла;
	
	ДополнитьСохраненныеПоказателиОтчета();
	
КонецФункции

&НаСервере
Процедура ДополнитьСохраненныеПоказателиОтчета()
	
	Раздел2 = мДанныеОтчета.Раздел2;
	Для Каждого Страница Из Раздел2 Цикл
		Данные = Страница.Данные[0].Значение;
		
		Числитель   = Данные.П000020015003_Числ;
		Знаменатель = Данные.П000020015003_Знам;
		Если ЗначениеЗаполнено(Числитель) И ЗначениеЗаполнено(Знаменатель) Тогда
			Доля = СокрЛП(Формат(Числитель, "ЧГ=") + "/" + Формат(Знаменатель, "ЧГ="));
		Иначе
			Доля = "";
		КонецЕсли;
		Данные.Вставить("П100020015003", Доля);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция УзелПуст(Узел)
	
	ПустойУзел = ?(Узел.Формат = "N", Узел.Значение = "0"
	ИЛИ (НЕ ЗначениеЗаполнено(Узел.Значение)), НЕ ЗначениеЗаполнено(Узел.Значение));
	Для Каждого Стр из Узел.Строки Цикл
		Если НЕ УзелПуст(Стр) Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	Возврат ПустойУзел;
	
КонецФункции

&НаСервере
Процедура ОчисткаРегламентированногоОтчетаНаСервере(ИмяСтраницы, ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста, РежимОчистки, Многостраничность, КолВоСтраницВРазделе) Экспорт
	
	УдалятьсяВсеДопЭкземпляры = Ложь;
	
	Если СтрНайти(РежимОчистки, "ОчиститьТекущийРаздел") > 0 Тогда
		
		Если (Многостраничность) И (КолВоСтраницВРазделе > 1) Тогда
			
			ОчиститьПоказателиОтчетаЗаполняемыеИзИБНаСервере(ИмяСтраницы);
			РегламентированнаяОтчетность.ПолучитьСведенияОПоказателяхОтчета(ЭтаФорма);
			УдалятьсяВсеДопЭкземпляры = Истина;
			
		Иначе
			
			ОчиститьТабличноеПолеНаСервере("ПолеТабличногоДокумента" + ИмяСтраницы);
			
		КонецЕсли;
		
		СформироватьДеревоРазделовОтчетаНаСервере();
		
		СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
		
	ИначеЕсли СтрНайти(РежимОчистки, "ОчиститьТекущийЭкземплярМногостраничногоРаздела") > 0 Тогда
		
		ОчиститьТабличноеПолеНаСервере(ИмяСтраницы);
		
	КонецЕсли;
	
	Если ИмяСтраницы = "Титульный" Тогда
		Если Элементы.Найти("ДатаПодписи") = Неопределено Тогда
			Область = ТабличныйДокумент.Области.Найти("ДатаПодписи");
			Если НЕ Область = Неопределено Тогда
				Если ТипЗнч(Область.Значение) = Тип("Строка") Тогда
					ДатаПодписи = Лев(СтрЗаменить(Область.Значение, ".", ""), 8);
				ИначеЕсли ТипЗнч(Область.Значение) = Тип("Дата") Тогда
					Если ЗначениеЗаполнено(Область.Значение) Тогда
						ДатаПодписи = Лев(СтрЗаменить(Формат(Область.Значение, "ДФ = ""дд.ММ.гггг 'г.'"""), ".", ""), 8);
					Иначе
						ДатаПодписи = "        ";
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиентСервер.ПослеОчисткиРегламентированногоОтчета(
	ЭтаФорма, ИмяСтраницы, ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста);
	
КонецПроцедуры

&НаКлиенте
Процедура ОчисткаРегламентированногоОтчетаНаКлиенте(ИмяСтраницы, ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста, РежимОчистки, Многостраничность, КолВоСтраницВРазделе) Экспорт
	
	УдалятьсяВсеДопЭкземпляры = Ложь;
	
	Если СтрНайти(РежимОчистки, "ОчиститьТекущийРаздел") > 0 Тогда
		
		Если (Многостраничность) И (КолВоСтраницВРазделе > 1) Тогда
			
			РегламентированнаяОтчетностьКлиентСервер.ОчиститьПоказателиОтчетаЗаполняемыеИзИБ(ЭтаФорма, ИмяСтраницы);
			УдалятьсяВсеДопЭкземпляры = Истина;
			
		Иначе
			
			ОчиститьТабличноеПолеНаКлиенте("ПолеТабличногоДокумента" + ИмяСтраницы);
			
		КонецЕсли;
		
		СформироватьДеревоРазделовОтчетаНаКлиенте();
		
	ИначеЕсли СтрНайти(РежимОчистки, "ОчиститьТекущийЭкземплярМногостраничногоРаздела") > 0 Тогда
		
		ОчиститьТабличноеПолеНаКлиенте("ПолеТабличногоДокумента" + ИмяСтраницы);
		
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиентСервер.ПослеОчисткиРегламентированногоОтчета(
	ЭтаФорма, ИмяСтраницы, ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ СТЫКОВКИ С СЕРВИСОМ СДАЧИ ОТЧЕТНОСТИ ЧЕРЕЗ ПРЕДСТАВИТЕЛЯ

&НаКлиенте
Процедура ОтправитьЧерезПредставителя(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОтправитьЧерезПредставителяЗавершение", ЭтотОбъект);
	
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(
	ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьЧерезПредставителяЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ПриНажатииНаКнопкуОтправкиЧерезПредставителяВРегламентированномОтчете(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьАвто(Команда)
	
	Отказ = Ложь;
	
	РегламентированнаяОтчетностьКлиентПереопределяемый.ПроверитьВозможностьАвтоЗаполненияРеглОтчета(ИмяФормы, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("Команда", Команда);
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьАвтоЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередЗаполнениемРегламентированногоОтчета(
	ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьАвтоЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Команда = ДополнительныеПараметры.Команда;
	
	ЗаполнитьАвтоНаСервере();
	
	РегламентированнаяОтчетностьКлиент.ОбновитьДеревоРазделовВФормеОтчета(ЭтаФорма);
	
	Если НЕ Элементы.РазделыОтчета.ТекущиеДанные.ПолучитьРодителя() = Неопределено Тогда
		Элементы.РазделыОтчета.ТекущаяСтрока
		= Элементы.РазделыОтчета.ТекущиеДанные.ПолучитьРодителя().ПолучитьЭлементы()[0].ПолучитьИдентификатор();
	КонецЕсли;
	
	Если Элементы.Расшифровать.Видимость Тогда
		Элементы.Расшифровать.Доступность = Истина;
		Элементы.ТабличныйДокументКонтекстноеМенюРасшифровать.Доступность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьАвтоНаСервере()
	
	СохранитьДанныеРаздела(СтруктураРеквизитовФормы.НаимТекущегоРаздела, Ложь);
	
	ЗаполнитьПустыеСтруктурыДанных();
	
	ПараметрыОтчета = Новый Структура();
	ПараметрыОтчета.Вставить("Организация",              СтруктураРеквизитовФормы.Организация);
	ПараметрыОтчета.Вставить("мДатаНачалаПериодаОтчета", СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
	ПараметрыОтчета.Вставить("мДатаКонцаПериодаОтчета",  СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	ПараметрыОтчета.Вставить("КодНалоговогоОргана",      СтруктураДанныхТитульный.КодИМНС);
	ПараметрыОтчета.Вставить("КПП",                      СтруктураДанныхТитульный.КПП1);
	ПараметрыОтчета.Вставить("ДатаПодписи",              ДатаПодписи);
	
	Контейнер = Новый Структура();
	Контейнер.Вставить("Раздел1", ТаблицаСтраницыРазделаРаздел1);
	Контейнер.Вставить("Раздел2", ТаблицаСтраницыРазделаРаздел2);
	
	РегламентированнаяОтчетностьПереопределяемый.ЗаполнитьОтчет(
	ИмяОтчета(ЭтаФорма.ИмяФормы), ИмяФормыОтчета(ЭтаФорма.ИмяФормы), ПараметрыОтчета, Контейнер);
	
	// Сохранение данных авансовых платежей по ОКТМО, полученных от потребителя БРО.
	ТаблицаСтраницРаздела1  = Неопределено;
	АвансовыеПлатежиПоОКТМО = Неопределено;
	Если мСтруктураМногостраничныхРазделов.Свойство("Раздел1", ТаблицаСтраницРаздела1) Тогда
		ТаблицаСтраницРаздела1 = ЭтаФорма[ТаблицаСтраницРаздела1];
		АвансовыеПлатежиПоОКТМО = Новый Соответствие;
		Для Каждого СтрокаТаблицы Из ТаблицаСтраницРаздела1 Цикл
			Для Блок = 1 По 3 Цикл
				ОКТМО = СокрЛП(СтрокаТаблицы.Данные[0].Значение["П000010002003_" + Блок]);
				Если АвансовыеПлатежиПоОКТМО.Получить(ОКТМО) = Неопределено Тогда
					Авансы = Новый Структура;
					Авансы.Вставить("СуммаАвансовыхПлатежей1Кв", СтрокаТаблицы.Данные[0].Значение["П000010002303_" + Блок]);
					Авансы.Вставить("СуммаАвансовыхПлатежей2Кв", СтрокаТаблицы.Данные[0].Значение["П000010002503_" + Блок]);
					Авансы.Вставить("СуммаАвансовыхПлатежей3Кв", СтрокаТаблицы.Данные[0].Значение["П000010002703_" + Блок]);
					АвансовыеПлатежиПоОКТМО.Вставить(ОКТМО, Авансы);
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	ВывестиМакетВТаблДокНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела, 1);
	
	Если НЕ СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел1" Тогда
		СохранитьДанныеРаздела(СтруктураРеквизитовФормы.НаимТекущегоРаздела, Ложь);
	КонецЕсли;
	
	СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
	
	РасчетНаСервере();
	
	СформироватьРаздел1();
	
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел1" Тогда
		СохранитьДанныеРаздела(СтруктураРеквизитовФормы.НаимТекущегоРаздела, , Ложь);
	КонецЕсли;
	
	// Восстановление данных авансовых платежей по ОКТМО после переформирования раздела 1 в БРО.
	Если АвансовыеПлатежиПоОКТМО <> Неопределено Тогда
		ТаблицаСтраницРаздела1 = Неопределено;
		Если мСтруктураМногостраничныхРазделов.Свойство("Раздел1", ТаблицаСтраницРаздела1) Тогда
			ТаблицаСтраницРаздела1 = ЭтаФорма[ТаблицаСтраницРаздела1];
			Для Каждого СтрокаТаблицы Из ТаблицаСтраницРаздела1 Цикл
				Для Блок = 1 По 3 Цикл
					ОКТМО = СокрЛП(СтрокаТаблицы.Данные[0].Значение["П000010002003_" + Блок]);
					Авансы = АвансовыеПлатежиПоОКТМО[ОКТМО];
					Если Авансы <> Неопределено Тогда
						СтрокаТаблицы.Данные[0].Значение["П000010002303_" + Блок] = Макс(Авансы.СуммаАвансовыхПлатежей1Кв, 0);
						СтрокаТаблицы.Данные[0].Значение["П000010002503_" + Блок] = Макс(Авансы.СуммаАвансовыхПлатежей2Кв, 0);
						СтрокаТаблицы.Данные[0].Значение["П000010002703_" + Блок] = Макс(Авансы.СуммаАвансовыхПлатежей3Кв, 0);
					Иначе
						СтрокаТаблицы.Данные[0].Значение["П000010002303_" + Блок] = 0;
						СтрокаТаблицы.Данные[0].Значение["П000010002503_" + Блок] = 0;
						СтрокаТаблицы.Данные[0].Значение["П000010002703_" + Блок] = 0;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	ВывестиМакетВТаблДокНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела, 1);
	
	РасчетНаСервере();
	
	УстановитьДоступностьОбластей(ЭтаФорма, СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
	ИзменитьФорматНевведенныхПоказателей(ЭтаФорма);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура Расшифровать(Команда)
	
	ПараметрыОтчета = Новый Структура();
	ПараметрыОтчета.Вставить("Организация",             СтруктураРеквизитовФормы.Организация);
	ПараметрыОтчета.Вставить("ДатаНачалаПериодаОтчета", СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
	ПараметрыОтчета.Вставить("ДатаКонцаПериодаОтчета",  СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	
	ИДИменПоказателей = Новый Массив();
	ИДИменПоказателей.Добавить(Элементы.ТабличныйДокумент.ТекущаяОбласть.Имя);
	
	РегламентированнаяОтчетностьКлиент.ОткрытьРасшифровкуОтчета(
	ИмяОтчета(ЭтаФорма.ИмяФормы), ИмяФормыОтчета(ЭтаФорма.ИмяФормы), ИДИменПоказателей, ПараметрыОтчета)
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВИнтернете(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьВИнтернетеЗавершение", ЭтотОбъект);
	
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(
	ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВИнтернетеЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ПроверитьВИнтернете(ЭтаФорма);
	
КонецПроцедуры

#Область ПанельОтправкиВКонтролирующиеОрганы

&НаКлиенте
Процедура ОбновитьОтправку(Команда)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОбновитьОтправкуИзПанелиОтправки(ЭтаФорма, "ФНС");
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаПротоколНажатие(Элемент)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьПротоколИзПанелиОтправки(ЭтаФорма, "ФНС");
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьНеотправленноеИзвещение(Команда)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОтправитьНеотправленноеИзвещениеИзПанелиОтправки(
	ЭтаФорма, "ФНС");
КонецПроцедуры

&НаКлиенте
Процедура ЭтапыОтправкиНажатие(Элемент)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьСостояниеОтправкиИзПанелиОтправки(ЭтаФорма, "ФНС");
КонецПроцедуры

&НаКлиенте
Процедура КритическиеОшибкиОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьКритическиеОшибкиИзПанелиОтправки(ЭтаФорма, "ФНС");
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаНаименованиеЭтапаНажатие(Элемент)
	
	ПараметрыИзменения = Новый Структура;
	ПараметрыИзменения.Вставить("Форма", ЭтаФорма);
	ПараметрыИзменения.Вставить("Организация", СтруктураРеквизитовФормы.Организация);
	ПараметрыИзменения.Вставить("КонтролирующийОрган",
		ПредопределенноеЗначение("Перечисление.ТипыКонтролирующихОрганов.ФНС"));
	
	РегламентированнаяОтчетностьКлиент.ИзменитьСтатусОтправки(ПараметрыИзменения);
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ОтправитьВКонтролирующийОрган(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
	"ПроверкаВозможностиВыгрузкиРегламентированногоОтчетаПередОтправкой", ЭтотОбъект);
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередОтправкойРегламентированногоОтчета(
	ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаВозможностиВыгрузкиРегламентированногоОтчетаПередОтправкой(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОтправитьВКонтролирующийОрганЗавершение", ЭтотОбъект);
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(
	ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьВКонтролирующийОрганЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ПриНажатииНаКнопкуОтправкиВКонтролирующийОрган(ЭтаФорма, "ФНС");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Форма", ЭтаФорма);
	Оповещение = Новый ОписаниеОповещения("ПослеСохраненияФормыЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	СохранитьНаКлиенте(, Оповещение);
КонецПроцедуры

&НаКлиенте
Процедура ПослеСохраненияФормыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	ДополнительныеПараметры.Форма.Закрыть();
КонецПроцедуры

#Область МеханизмПроверкиКонтрольныхСоотношений

&НаКлиенте
Процедура Проверить(Команда)
	
	РегламентированнаяОтчетностьКлиент.ПроверитьКонтрольныеСоотношения(ЭтаФорма, ОбработкаКС);
	
КонецПроцедуры

&НаСервере
Функция ПроверитьКонтрольныеСоотношенияВОтчете() Экспорт
	
	СформироватьСтруктуруПоказателей();
	
	СтруктураРеквизитовФормы.ТекстДляЗаголовочнойЧасти = РегламентированнаяОтчетностьКлиентСервер.ПредставлениеДокументаРеглОтч(СтруктураРеквизитовФормы.мСохраненныйДок);
	
	СтруктураРезультата = Новый Структура;
	СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", 0);
	СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", 0);
	СтруктураРезультата.Вставить("СтруктураОшибок", Новый Структура);
	
	Если СписокРасшифровкиПоказателей = Неопределено Тогда
		СписокРасшифровкиПоказателей = РегламентированнаяОтчетность.СоздатьСписокРасшифровкиПоказателей();
	Иначе
		СписокРасшифровкиПоказателей.Очистить();
	КонецЕсли;
	
	Если СписокРасшифровкиформулы = Неопределено Тогда
		СписокРасшифровкиформулы = РегламентированнаяОтчетность.СоздатьСписокРасшифровкиформулы();
	Иначе
		СписокРасшифровкиформулы.Очистить();
	КонецЕсли;
	
	СчетчикФормулДляРасшифровок = 0;
	ПроверитьКС_1_1(СтруктураРезультата);
	ПроверитьКС_1_2(СтруктураРезультата);
	ПроверитьКС_1_3(СтруктураРезультата);
	ПроверитьКС_2_1(СтруктураРезультата);
	ПроверитьКС_2_2(СтруктураРезультата);
	ПроверитьКС_2_3(СтруктураРезультата);
	ПроверитьКС_2_4(СтруктураРезультата);
	ПроверитьКС_2_5(СтруктураРезультата);
	ПроверитьКС_2_6(СтруктураРезультата);
	ПроверитьКС_2_7(СтруктураРезультата);
	ПроверитьКС_2_10(СтруктураРезультата);
	ПроверитьКС_2_11(СтруктураРезультата);
	ПроверитьКС_2_12(СтруктураРезультата);
	ПроверитьКС_2_13(СтруктураРезультата);
	ПроверитьКС_2_14(СтруктураРезультата);
	ПроверитьКС_2_15(СтруктураРезультата);
	ПроверитьКС_2_16(СтруктураРезультата);
	ПроверитьКС_2_17(СтруктураРезультата);
	ПроверитьКС_2_18(СтруктураРезультата);
	ПроверитьКС_2_19(СтруктураРезультата);
	ПроверитьКС_2_20а(СтруктураРезультата);
	ПроверитьКС_2_20б(СтруктураРезультата);
	
	Если СписокРасшифровкиПоказателей.Количество() > 0 Тогда 
		СтруктураРезультата.Вставить("СписокРасшифровкиПоказателей", 
			ПоместитьВоВременноеХранилище(СписокРасшифровкиПоказателей, Новый УникальныйИдентификатор));
	КонецЕсли;
	
	Если СписокРасшифровкиформулы.Количество() > 0 Тогда
		АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(СписокРасшифровкиформулы, Новый УникальныйИдентификатор);
		СтруктураРезультата.Вставить("СписокРасшифровкиформулы", АдресВоВременномХранилище);
	КонецЕсли;
	
	Возврат СтруктураРезультата;
	
КонецФункции

&НаСервере
Процедура ПроверитьКС_1_1(СтруктураРезультата)
	
	ОбщееЧислоОшибок    = СтруктураРезультата.КоличествоНайденныхОшибок;
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок;
	СтруктураОшибок     = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы   = НСтр("ru='Проверка раздела 1 (КС 1.1)'");
	ОписаниеКС     = НСтр("ru='Исчисленная сумма налога, подлежащая уплате в бюджет за налоговый период (строка 021 Раздел 1) должна быть равна сумме всех значений по строкам 300 Раздела 2 по соответствующим кодам ОКТМО и КБК'");
	
	Нарушение      = НСтр("ru='НК РФ ст.356'");
	ОписаниеОшибки1 = НСтр("ru='Завышена исчисленная сумма транспортного налога, подлежащая уплате в бюджет за налоговый период'");
	ОписаниеОшибки2 = НСтр("ru='Занижена исчисленная сумма транспортного налога, подлежащая уплате в бюджет за налоговый период'");
	
	Р1Стр020 = ПоказательПоСтроке("Р1Стр020");
	Р1Стр021 = ПоказательПоСтроке("Р1Стр021");
	
	Р2Стр020 = ПоказательПоСтроке("Р2Стр020");
	Р2Стр300 = ПоказательПоСтроке("Р2Стр300");
	
	Раздел1 = мДанныеОтчета.Раздел1;
	Раздел2 = мДанныеОтчета.Раздел2;
	
	Для Каждого СтраницаР1 Из Раздел1 Цикл
		ДанныеСтраницыР1 = СтраницаР1.Данные[0].Значение;
		НомерСтраницыР1Стр = ЧислоСтрЧГ0(Раздел1.Индекс(СтраницаР1) + 1);
		
		Для Инд = 1 По 3 Цикл
			ВставитьЗначениеМногострочногоПоказателя(ДанныеСтраницыР1, Р1Стр020, Инд);
			ВставитьЗначениеМногострочногоПоказателя(ДанныеСтраницыР1, Р1Стр021, Инд);
			
			ОКТМО = СокрЛП(Р1Стр020.Значение);
			
			ПроверятьСоотношение = ЗначениеЗаполнено(ОКТМО);
			Если НЕ ПроверятьСоотношение Тогда
				Продолжить;
			КонецЕсли;
			
			СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
			ЗарегистрироватьФормулуДляРасшифровки(ОписаниеКС);
			
			ВнестиПоказательВРасшифровку(Р1Стр020, "Раздел1", НомерСтраницыР1Стр);
			ВнестиПоказательВРасшифровку(Р1Стр021, "Раздел1", НомерСтраницыР1Стр);
			
			ЕстьСведенияРаздела2 = Ложь;
			КонтрольноеЗначение = 0;
			Расшифровка = Р1Стр021.ЗначениеСтр + " = ";
			
			Для Каждого СтраницаР2 Из Раздел2 Цикл
				ДанныеСтраницыР2 = СтраницаР2.Данные[0].Значение;
				НомерСтраницыР2Стр = ЧислоСтрЧГ0(Раздел2.Индекс(СтраницаР2) + 1);
				
				ВставитьЗначениеМногострочногоПоказателя(ДанныеСтраницыР2, Р2Стр020, Инд);
				ВставитьЗначениеМногострочногоПоказателя(ДанныеСтраницыР2, Р2Стр300, Инд);
				
				Если СокрЛП(Р2Стр020.Значение) <> ОКТМО Тогда
					Продолжить;
				КонецЕсли;
				
				ЕстьСведенияРаздела2 = Истина;
				
				ВнестиПоказательВРасшифровку(Р2Стр020, "Раздел2", НомерСтраницыР2Стр);
				ВнестиПоказательВРасшифровку(Р2Стр300, "Раздел2", НомерСтраницыР2Стр);
				
				КонтрольноеЗначение = КонтрольноеЗначение + Р2Стр300.Значение;
				Расшифровка = Расшифровка + Р2Стр300.ЗначениеСтр + " + ";
				
			КонецЦикла;
			
			Если ЕстьСведенияРаздела2 Тогда
				Расшифровка = Лев(Расшифровка, СтрДлина(Расшифровка) - 3);
				Расшифровка = Расшифровка + " Итог [" + КонтрольноеЗначение + "]";
				
				Если Р1Стр021.Значение > КонтрольноеЗначение Тогда
					ЭтоОшибка = Истина;
					ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
					ОписаниеОшибки = ОписаниеОшибки1;
				ИначеЕсли Р1Стр021.Значение < КонтрольноеЗначение Тогда
					ЭтоОшибка = Истина;
					ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
					ОписаниеОшибки = ОписаниеОшибки2;
				Иначе
					ЭтоОшибка = Ложь;
					ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
					ОписаниеОшибки = "";
				КонецЕсли;
			
			Иначе
				Расшифровка = Расшифровка + "сведения не указаны";
				
				ЭтоОшибка = Истина;
				ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
				ОписаниеОшибки = "Не заполнены листы раздела 2 по ОКТМО " + ОКТМО;
			КонецЕсли;
			
			ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок,
				Расшифровка, ЭтоОшибка, ОписаниеОшибки, Нарушение);
			
		КонецЦикла;
	КонецЦикла;
	
	СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
	СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
	СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_1_2(СтруктураРезультата)
	
	ОбщееЧислоОшибок    = СтруктураРезультата.КоличествоНайденныхОшибок;
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок;
	СтруктураОшибок     = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы   = НСтр("ru='Проверка раздела 1 (КС 1.2)'");
	ОписаниеКС     = НСтр("ru='Сумма налога, исчисленная к уплате в бюджет (строка 030 Раздела 1) должна быть равна значению строки 021 Раздела 1 за минусом суммы значений по строкам 023, 025, 027 Раздела 1 по соответствующим кодам ОКТМО и КБК, если значение строки 021 Раздела 1 за минусом суммы значений по строкам 023, 025, 027 Раздела 1 по соответствующим кодам ОКТМО и КБК больше или равно нулю'");
	
	Нарушение      = НСтр("ru='НК РФ ст.356'");
	ОписаниеОшибки1 = НСтр("ru='Завышена сумма транспортного налога, подлежащая уплате в бюджет'");
	ОписаниеОшибки2 = НСтр("ru='Занижена сумма транспортного налога, подлежащая уплате в бюджет'");
	
	Р1Стр020 = ПоказательПоСтроке("Р1Стр020");
	Р1Стр021 = ПоказательПоСтроке("Р1Стр021");
	Р1Стр023 = ПоказательПоСтроке("Р1Стр023");
	Р1Стр025 = ПоказательПоСтроке("Р1Стр025");
	Р1Стр027 = ПоказательПоСтроке("Р1Стр027");
	Р1Стр030 = ПоказательПоСтроке("Р1Стр030");
	
	Раздел1 = мДанныеОтчета.Раздел1;
	
	Для Каждого Страница Из Раздел1 Цикл
		ДанныеСтраницы = Страница.Данные[0].Значение;
		НомерСтраницыСтр = ЧислоСтрЧГ0(Раздел1.Индекс(Страница) + 1);
		
		Для Инд = 1 По 3 Цикл
			ВставитьЗначениеМногострочногоПоказателя(ДанныеСтраницы, Р1Стр020, Инд);
			ВставитьЗначениеМногострочногоПоказателя(ДанныеСтраницы, Р1Стр021, Инд);
			ВставитьЗначениеМногострочногоПоказателя(ДанныеСтраницы, Р1Стр023, Инд);
			ВставитьЗначениеМногострочногоПоказателя(ДанныеСтраницы, Р1Стр025, Инд);
			ВставитьЗначениеМногострочногоПоказателя(ДанныеСтраницы, Р1Стр027, Инд);
			ВставитьЗначениеМногострочногоПоказателя(ДанныеСтраницы, Р1Стр030, Инд);
			
			КонтрольноеЗначение = Р1Стр021.Значение - (Р1Стр023.Значение + Р1Стр025.Значение + Р1Стр027.Значение);
			БлокЗаполнен = ЗначениеЗаполнено(Р1Стр020.Значение)
				ИЛИ ЗначениеЗаполнено(Р1Стр021.Значение)
				ИЛИ ЗначениеЗаполнено(Р1Стр023.Значение)
				ИЛИ ЗначениеЗаполнено(Р1Стр025.Значение)
				ИЛИ ЗначениеЗаполнено(Р1Стр027.Значение)
				ИЛИ ЗначениеЗаполнено(Р1Стр030.Значение);
			ПроверятьСоотношение = (БлокЗаполнен И КонтрольноеЗначение >= 0);
			Если НЕ ПроверятьСоотношение Тогда
				Продолжить;
			КонецЕсли;
			
			СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
			ЗарегистрироватьФормулуДляРасшифровки(ОписаниеКС);
			
			ВнестиПоказательВРасшифровку(Р1Стр030, "Раздел1", НомерСтраницыСтр);
			ВнестиПоказательВРасшифровку(Р1Стр021, "Раздел1", НомерСтраницыСтр);
			ВнестиПоказательВРасшифровку(Р1Стр023, "Раздел1", НомерСтраницыСтр);
			ВнестиПоказательВРасшифровку(Р1Стр025, "Раздел1", НомерСтраницыСтр);
			ВнестиПоказательВРасшифровку(Р1Стр027, "Раздел1", НомерСтраницыСтр);
			
			Если Р1Стр030.Значение > КонтрольноеЗначение Тогда
				ЭтоОшибка = Истина;
				ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
				ОписаниеОшибки = ОписаниеОшибки1;
			ИначеЕсли Р1Стр030.Значение < КонтрольноеЗначение Тогда
				ЭтоОшибка = Истина;
				ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
				ОписаниеОшибки = ОписаниеОшибки2;
			Иначе
				ЭтоОшибка = Ложь;
				ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
				ОписаниеОшибки = "";
			КонецЕсли;
			
			Расшифровка = Р1Стр030.ЗначениеСтр + " = " + Р1Стр021.ЗначениеСтр + " - ("
				+ Р1Стр023.ЗначениеСтр + " + " + Р1Стр025.ЗначениеСтр + " + " + Р1Стр027.ЗначениеСтр
				+ ") Итог [" + КонтрольноеЗначение + "]"
				+ " при условии, что " + КонтрольноеЗначение + " >= 0";
			
			ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок,
				Расшифровка, ЭтоОшибка, ОписаниеОшибки, Нарушение);
			
		КонецЦикла;
	КонецЦикла;
	
	СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
	СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
	СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_1_3(СтруктураРезультата)
	
	ОбщееЧислоОшибок    = СтруктураРезультата.КоличествоНайденныхОшибок;
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок;
	СтруктураОшибок     = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы   = НСтр("ru='Проверка раздела 1 (КС 1.3)'");
	ОписаниеКС     = НСтр("ru='Сумма налога, исчисленная к уменьшению (строка 040 Раздела 1) должна быть равна разнице суммы значений по строкам 023, 025, 027 Раздела 1 и строки 021 Раздела 1 по соответствующим кодам ОКТМО и КБК, если строка 021 Раздела 1 за минусом суммы значений по строкам 023, 025, 027 Раздела 1 по соответствующим кодам ОКТМО и КБК меньше нуля'");
	
	Нарушение      = НСтр("ru='НК РФ ст.356'");
	ОписаниеОшибки = НСтр("ru='Занижена сумма транспортного налога, подлежащая уплате в бюджет'");
	
	Р1Стр020 = ПоказательПоСтроке("Р1Стр020");
	Р1Стр021 = ПоказательПоСтроке("Р1Стр021");
	Р1Стр023 = ПоказательПоСтроке("Р1Стр023");
	Р1Стр025 = ПоказательПоСтроке("Р1Стр025");
	Р1Стр027 = ПоказательПоСтроке("Р1Стр027");
	Р1Стр040 = ПоказательПоСтроке("Р1Стр040");
	
	Раздел1 = мДанныеОтчета.Раздел1;
	
	Для Каждого Страница Из Раздел1 Цикл
		ДанныеСтраницы = Страница.Данные[0].Значение;
		НомерСтраницыСтр = ЧислоСтрЧГ0(Раздел1.Индекс(Страница) + 1);
		
		Для Инд = 1 По 3 Цикл
			ВставитьЗначениеМногострочногоПоказателя(ДанныеСтраницы, Р1Стр020, Инд);
			ВставитьЗначениеМногострочногоПоказателя(ДанныеСтраницы, Р1Стр021, Инд);
			ВставитьЗначениеМногострочногоПоказателя(ДанныеСтраницы, Р1Стр023, Инд);
			ВставитьЗначениеМногострочногоПоказателя(ДанныеСтраницы, Р1Стр025, Инд);
			ВставитьЗначениеМногострочногоПоказателя(ДанныеСтраницы, Р1Стр027, Инд);
			ВставитьЗначениеМногострочногоПоказателя(ДанныеСтраницы, Р1Стр040, Инд);
			
			КонтрольноеЗначение = (Р1Стр023.Значение + Р1Стр025.Значение + Р1Стр027.Значение) - Р1Стр021.Значение;
			БлокЗаполнен = ЗначениеЗаполнено(Р1Стр020.Значение)
				ИЛИ ЗначениеЗаполнено(Р1Стр021.Значение)
				ИЛИ ЗначениеЗаполнено(Р1Стр023.Значение)
				ИЛИ ЗначениеЗаполнено(Р1Стр025.Значение)
				ИЛИ ЗначениеЗаполнено(Р1Стр027.Значение)
				ИЛИ ЗначениеЗаполнено(Р1Стр040.Значение);
			ПроверятьСоотношение = (БлокЗаполнен И -1 * КонтрольноеЗначение < 0);
			Если НЕ ПроверятьСоотношение Тогда
				Продолжить;
			КонецЕсли;
			
			СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
			ЗарегистрироватьФормулуДляРасшифровки(ОписаниеКС);
			
			ВнестиПоказательВРасшифровку(Р1Стр040, "Раздел1", НомерСтраницыСтр);
			ВнестиПоказательВРасшифровку(Р1Стр021, "Раздел1", НомерСтраницыСтр);
			ВнестиПоказательВРасшифровку(Р1Стр023, "Раздел1", НомерСтраницыСтр);
			ВнестиПоказательВРасшифровку(Р1Стр025, "Раздел1", НомерСтраницыСтр);
			ВнестиПоказательВРасшифровку(Р1Стр027, "Раздел1", НомерСтраницыСтр);
			
			Если Р1Стр040.Значение <> КонтрольноеЗначение Тогда
				ЭтоОшибка = Истина;
				ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
			Иначе
				ЭтоОшибка = Ложь;
				ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
			КонецЕсли;
			
			Расшифровка = Р1Стр040.ЗначениеСтр + " = (" + Р1Стр023.ЗначениеСтр + " + " + Р1Стр025.ЗначениеСтр
				+ " + " + Р1Стр027.ЗначениеСтр + ") - " + Р1Стр021.ЗначениеСтр
				+ " Итог [" + КонтрольноеЗначение + "]"
				+ " при условии, что " + (-1 * КонтрольноеЗначение) + " < 0";
			
			ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок,
				Расшифровка, ЭтоОшибка, ОписаниеОшибки, Нарушение);
			
		КонецЦикла;
	КонецЦикла;
	
	СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
	СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
	СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_2_1(СтруктураРезультата)
	
	ОбщееЧислоОшибок    = СтруктураРезультата.КоличествоНайденныхОшибок;
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок;
	СтруктураОшибок     = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы   = НСтр("ru='Проверка раздела 2 (КС 2.1)'");
	ОписаниеКС     = НСтр("ru='Код налоговой льготы в виде освобождения от налогообложения (строка 220 Раздела 2) должен быть заполнен, если значение строки 230 Раздела 2 больше нуля'");
	
	Нарушение      = НСтр("ru='НК РФ ст.356, п.2 ст.358'");
	ОписаниеОшибки = НСтр("ru='Не указан код налоговой льготы, что может привести к некорректной сумме транспортного налога, подлежащей уплате в бюджет'");
	
	Р2Стр220 = ПоказательПоСтроке("Р2Стр220");
	Р2Стр230 = ПоказательПоСтроке("Р2Стр230");
	
	Раздел2 = мДанныеОтчета.Раздел2;
	
	Для Каждого Страница Из Раздел2 Цикл
		ДанныеСтраницы = Страница.Данные[0].Значение;
		НомерСтраницыСтр = ЧислоСтрЧГ0(Раздел2.Индекс(Страница) + 1);
		
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Стр220);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Стр230);
		
		ПроверятьСоотношение = (Р2Стр230.Значение > 0);
		Если НЕ ПроверятьСоотношение Тогда
			Продолжить;
		КонецЕсли;
		
		СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
		ЗарегистрироватьФормулуДляРасшифровки(ОписаниеКС);
		
		ВнестиПоказательВРасшифровку(Р2Стр220, "Раздел2", НомерСтраницыСтр);
		ВнестиПоказательВРасшифровку(Р2Стр230, "Раздел2", НомерСтраницыСтр);
		
		Если НЕ ЗначениеЗаполнено(Р2Стр220.Значение) Тогда
			ЭтоОшибка = Истина;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
		Иначе
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
		КонецЕсли;
		
		Расшифровка = "Код льготы заполнен (""" + Р2Стр220.ЗначениеСтр + """)"
			+ " при условии, что " + Р2Стр230.ЗначениеСтр + " > 0";
		
		ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок,
			Расшифровка, ЭтоОшибка, ОписаниеОшибки, Нарушение);
		
	КонецЦикла;
	
	СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
	СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
	СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_2_2(СтруктураРезультата)
	
	ОбщееЧислоОшибок    = СтруктураРезультата.КоличествоНайденныхОшибок;
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок;
	СтруктураОшибок     = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы   = НСтр("ru='Проверка раздела 2 (КС 2.2)'");
	ОписаниеКС     = НСтр("ru='Сумма налоговой льготы (строка 230 Раздела 2) должна быть больше нуля, если значение строки 220 Раздела 2 заполнено'");
	
	Нарушение      = НСтр("ru='НК РФ ст.356, п.2 ст.358'");
	ОписаниеОшибки = НСтр("ru='Не исчислена сумма налоговой льготы, что может привести к некорректной сумме транспортного налога, подлежащей уплате в бюджет'");
	
	Р2Стр220 = ПоказательПоСтроке("Р2Стр220");
	Р2Стр230 = ПоказательПоСтроке("Р2Стр230");
	
	Раздел2 = мДанныеОтчета.Раздел2;
	
	Для Каждого Страница Из Раздел2 Цикл
		ДанныеСтраницы = Страница.Данные[0].Значение;
		НомерСтраницыСтр = ЧислоСтрЧГ0(Раздел2.Индекс(Страница) + 1);
		
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Стр220);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Стр230);
		
		ПроверятьСоотношение = ЗначениеЗаполнено(Р2Стр220.Значение);
		Если НЕ ПроверятьСоотношение Тогда
			Продолжить;
		КонецЕсли;
		
		СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
		ЗарегистрироватьФормулуДляРасшифровки(ОписаниеКС);
		
		ВнестиПоказательВРасшифровку(Р2Стр230, "Раздел2", НомерСтраницыСтр);
		ВнестиПоказательВРасшифровку(Р2Стр220, "Раздел2", НомерСтраницыСтр);
		
		Если НЕ Р2Стр230.Значение > 0 Тогда
			ЭтоОшибка = Истина;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
		Иначе
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
		КонецЕсли;
		
		Расшифровка = Р2Стр230.ЗначениеСтр + " > 0"
			+ " при условии, что код льготы заполнен (""" + Р2Стр220.ЗначениеСтр + """)";
		
		ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок,
			Расшифровка, ЭтоОшибка, ОписаниеОшибки, Нарушение);
		
	КонецЦикла;
	
	СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
	СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
	СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_2_3(СтруктураРезультата)
	
	ОбщееЧислоОшибок    = СтруктураРезультата.КоличествоНайденныхОшибок;
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок;
	СтруктураОшибок     = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы   = НСтр("ru='Проверка раздела 2 (КС 2.3)'");
	ОписаниеКС     = НСтр("ru='Код налоговой льготы в виде уменьшения суммы налога (строка 240 Раздела 2) должен быть заполнен, если значение строки 250 Раздела 2 больше нуля'");
	
	Нарушение      = НСтр("ru='НК РФ п.3 ст.361'");
	ОписаниеОшибки = НСтр("ru='Не указан код налоговой льготы, что может привести к некорректной сумме транспортного налога, подлежащей уплате в бюджет'");
	
	Р2Стр240 = ПоказательПоСтроке("Р2Стр240");
	Р2Стр250 = ПоказательПоСтроке("Р2Стр250");
	
	Раздел2 = мДанныеОтчета.Раздел2;
	
	Для Каждого Страница Из Раздел2 Цикл
		ДанныеСтраницы = Страница.Данные[0].Значение;
		НомерСтраницыСтр = ЧислоСтрЧГ0(Раздел2.Индекс(Страница) + 1);
		
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Стр240);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Стр250);
		
		ПроверятьСоотношение = (Р2Стр250.Значение > 0);
		Если НЕ ПроверятьСоотношение Тогда
			Продолжить;
		КонецЕсли;
		
		СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
		ЗарегистрироватьФормулуДляРасшифровки(ОписаниеКС);
		
		ВнестиПоказательВРасшифровку(Р2Стр240, "Раздел2", НомерСтраницыСтр);
		ВнестиПоказательВРасшифровку(Р2Стр250, "Раздел2", НомерСтраницыСтр);
		
		Если НЕ ЗначениеЗаполнено(Р2Стр240.Значение) Тогда
			ЭтоОшибка = Истина;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
		Иначе
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
		КонецЕсли;
		
		Расшифровка = "Код льготы заполнен (""" + Р2Стр240.ЗначениеСтр + """)"
			+ " при условии, что " + Р2Стр250.ЗначениеСтр + " > 0";
		
		ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок,
			Расшифровка, ЭтоОшибка, ОписаниеОшибки, Нарушение);
		
	КонецЦикла;
	
	СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
	СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
	СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_2_4(СтруктураРезультата)
	
	ОбщееЧислоОшибок    = СтруктураРезультата.КоличествоНайденныхОшибок;
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок;
	СтруктураОшибок     = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы   = НСтр("ru='Проверка раздела 2 (КС 2.4)'");
	ОписаниеКС     = НСтр("ru='Сумма налоговой льготы (строка 250 Раздела 2) должна быть больше нуля, если значение строки 240 Раздела 2 заполнено'");
	
	Нарушение      = НСтр("ru='НК РФ п.3 ст.361'");
	ОписаниеОшибки = НСтр("ru='Не исчислена сумма налоговой льготы, что может привести к некорректной сумме транспортного налога, подлежащей уплате в бюджет'");
	
	Р2Стр240 = ПоказательПоСтроке("Р2Стр240");
	Р2Стр250 = ПоказательПоСтроке("Р2Стр250");
	
	Раздел2 = мДанныеОтчета.Раздел2;
	
	Для Каждого Страница Из Раздел2 Цикл
		ДанныеСтраницы = Страница.Данные[0].Значение;
		НомерСтраницыСтр = ЧислоСтрЧГ0(Раздел2.Индекс(Страница) + 1);
		
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Стр240);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Стр250);
		
		ПроверятьСоотношение = ЗначениеЗаполнено(Р2Стр240.Значение);
		Если НЕ ПроверятьСоотношение Тогда
			Продолжить;
		КонецЕсли;
		
		СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
		ЗарегистрироватьФормулуДляРасшифровки(ОписаниеКС);
		
		ВнестиПоказательВРасшифровку(Р2Стр250, "Раздел2", НомерСтраницыСтр);
		ВнестиПоказательВРасшифровку(Р2Стр240, "Раздел2", НомерСтраницыСтр);
		
		Если НЕ Р2Стр250.Значение > 0 Тогда
			ЭтоОшибка = Истина;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
		Иначе
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
		КонецЕсли;
		
		Расшифровка = Р2Стр250.ЗначениеСтр + " > 0"
			+ " при условии, что код льготы заполнен (""" + Р2Стр240.ЗначениеСтр + """)";
		
		ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок,
			Расшифровка, ЭтоОшибка, ОписаниеОшибки, Нарушение);
		
	КонецЦикла;
	
	СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
	СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
	СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_2_5(СтруктураРезультата)
	
	ОбщееЧислоОшибок    = СтруктураРезультата.КоличествоНайденныхОшибок;
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок;
	СтруктураОшибок     = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы   = НСтр("ru='Проверка раздела 2 (КС 2.5)'");
	ОписаниеКС     = НСтр("ru='Код налоговой льготы в виде снижения налоговой ставки (строка 260 Раздела 2) должен быть заполнен, если значение строки 270 Раздела 2 больше нуля'");
	
	Нарушение      = НСтр("ru='НК РФ п.2 ст.361'");
	ОписаниеОшибки = НСтр("ru='Не указан код налоговой льготы, что может привести к некорректной сумме транспортного налога, подлежащей уплате в бюджет'");
	
	Р2Стр260 = ПоказательПоСтроке("Р2Стр260");
	Р2Стр270 = ПоказательПоСтроке("Р2Стр270");
	
	Раздел2 = мДанныеОтчета.Раздел2;
	
	Для Каждого Страница Из Раздел2 Цикл
		ДанныеСтраницы = Страница.Данные[0].Значение;
		НомерСтраницыСтр = ЧислоСтрЧГ0(Раздел2.Индекс(Страница) + 1);
		
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Стр260);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Стр270);
		
		ПроверятьСоотношение = (Р2Стр270.Значение > 0);
		Если НЕ ПроверятьСоотношение Тогда
			Продолжить;
		КонецЕсли;
		
		СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
		ЗарегистрироватьФормулуДляРасшифровки(ОписаниеКС);
		
		ВнестиПоказательВРасшифровку(Р2Стр260, "Раздел2", НомерСтраницыСтр);
		ВнестиПоказательВРасшифровку(Р2Стр270, "Раздел2", НомерСтраницыСтр);
		
		Если НЕ ЗначениеЗаполнено(Р2Стр260.Значение) Тогда
			ЭтоОшибка = Истина;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
		Иначе
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
		КонецЕсли;
		
		Расшифровка = "Код льготы заполнен (""" + Р2Стр260.ЗначениеСтр + """)"
			+ " при условии, что " + Р2Стр270.ЗначениеСтр + " > 0";
		
		ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок,
			Расшифровка, ЭтоОшибка, ОписаниеОшибки, Нарушение);
		
	КонецЦикла;
	
	СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
	СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
	СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_2_6(СтруктураРезультата)
	
	ОбщееЧислоОшибок    = СтруктураРезультата.КоличествоНайденныхОшибок;
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок;
	СтруктураОшибок     = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы   = НСтр("ru='Проверка раздела 2 (КС 2.6)'");
	ОписаниеКС     = НСтр("ru='Сумма налоговой льготы (строка 270 Раздела 2) должна быть больше нуля, если значение строки 260 Раздела 2 заполнено'");
	
	Нарушение      = НСтр("ru='НК РФ п.2 ст.361'");
	ОписаниеОшибки = НСтр("ru='Не исчислена сумма налоговой льготы, что может привести к некорректной сумме транспортного налога, подлежащей уплате в бюджет'");
	
	Р2Стр260 = ПоказательПоСтроке("Р2Стр260");
	Р2Стр270 = ПоказательПоСтроке("Р2Стр270");
	
	Раздел2 = мДанныеОтчета.Раздел2;
	
	Для Каждого Страница Из Раздел2 Цикл
		ДанныеСтраницы = Страница.Данные[0].Значение;
		НомерСтраницыСтр = ЧислоСтрЧГ0(Раздел2.Индекс(Страница) + 1);
		
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Стр260);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Стр270);
		
		ПроверятьСоотношение = ЗначениеЗаполнено(Р2Стр260.Значение);
		Если НЕ ПроверятьСоотношение Тогда
			Продолжить;
		КонецЕсли;
		
		СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
		ЗарегистрироватьФормулуДляРасшифровки(ОписаниеКС);
		
		ВнестиПоказательВРасшифровку(Р2Стр270, "Раздел2", НомерСтраницыСтр);
		ВнестиПоказательВРасшифровку(Р2Стр260, "Раздел2", НомерСтраницыСтр);
		
		Если НЕ Р2Стр270.Значение > 0 Тогда
			ЭтоОшибка = Истина;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
		Иначе
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
		КонецЕсли;
		
		Расшифровка = Р2Стр270.ЗначениеСтр + " > 0"
			+ " при условии, что код льготы заполнен (""" + Р2Стр260.ЗначениеСтр + """)";
		
		ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок,
			Расшифровка, ЭтоОшибка, ОписаниеОшибки, Нарушение);
		
	КонецЦикла;
	
	СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
	СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
	СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_2_7(СтруктураРезультата)
	
	ОбщееЧислоОшибок    = СтруктураРезультата.КоличествоНайденныхОшибок;
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок;
	СтруктураОшибок     = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы   = НСтр("ru='Проверка раздела 2 (КС 2.7)'");
	ОписаниеКС     = НСтр("ru='Количество полных месяцев использования льготы (строка 200 Раздела 2) должно быть заполнено одновременно с показателями кода налоговой льготы (строка 220 или строка 240 или строка 260 Раздела 2) и суммы налоговой льготы (строка 230 или строка 250 или строка 270 Раздела 2)'");
	
	Нарушение      = НСтр("ru='НК РФ п.2 ст.356, ст.358'");
	ОписаниеОшибки = НСтр("ru='Возможно неправомерное применение льготы, что может привести к некорректной сумме транспортного налога, подлежащей уплате в бюджет'");
	
	Р2Стр200 = ПоказательПоСтроке("Р2Стр200");
	Р2Стр220 = ПоказательПоСтроке("Р2Стр220");
	Р2Стр230 = ПоказательПоСтроке("Р2Стр230");
	Р2Стр240 = ПоказательПоСтроке("Р2Стр240");
	Р2Стр250 = ПоказательПоСтроке("Р2Стр250");
	Р2Стр260 = ПоказательПоСтроке("Р2Стр260");
	Р2Стр270 = ПоказательПоСтроке("Р2Стр270");
	
	Раздел2 = мДанныеОтчета.Раздел2;
	
	Для Каждого Страница Из Раздел2 Цикл
		ДанныеСтраницы = Страница.Данные[0].Значение;
		НомерСтраницыСтр = ЧислоСтрЧГ0(Раздел2.Индекс(Страница) + 1);
		
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Стр200);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Стр220);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Стр230);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Стр240);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Стр250);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Стр260);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Стр270);
		
		ПроверятьСоотношение = ЗначениеЗаполнено(Р2Стр200.Значение)
			ИЛИ ЗначениеЗаполнено(Р2Стр220.Значение)
			ИЛИ ЗначениеЗаполнено(Р2Стр230.Значение)
			ИЛИ ЗначениеЗаполнено(Р2Стр240.Значение)
			ИЛИ ЗначениеЗаполнено(Р2Стр250.Значение)
			ИЛИ ЗначениеЗаполнено(Р2Стр260.Значение)
			ИЛИ ЗначениеЗаполнено(Р2Стр270.Значение);
		
		Если НЕ ПроверятьСоотношение Тогда
			Продолжить;
		КонецЕсли;
		
		СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
		ЗарегистрироватьФормулуДляРасшифровки(ОписаниеКС);
		
		ВнестиПоказательВРасшифровку(Р2Стр200, "Раздел2", НомерСтраницыСтр);
		ВнестиПоказательВРасшифровку(Р2Стр220, "Раздел2", НомерСтраницыСтр);
		ВнестиПоказательВРасшифровку(Р2Стр230, "Раздел2", НомерСтраницыСтр);
		ВнестиПоказательВРасшифровку(Р2Стр240, "Раздел2", НомерСтраницыСтр);
		ВнестиПоказательВРасшифровку(Р2Стр250, "Раздел2", НомерСтраницыСтр);
		ВнестиПоказательВРасшифровку(Р2Стр260, "Раздел2", НомерСтраницыСтр);
		ВнестиПоказательВРасшифровку(Р2Стр270, "Раздел2", НомерСтраницыСтр);
		
		СоотношениеВыполняется = ЗначениеЗаполнено(Р2Стр200.Значение)
		                       И ((ЗначениеЗаполнено(Р2Стр220.Значение) И ЗначениеЗаполнено(Р2Стр230.Значение))
		                       ИЛИ (ЗначениеЗаполнено(Р2Стр240.Значение) И ЗначениеЗаполнено(Р2Стр250.Значение))
		                       ИЛИ (ЗначениеЗаполнено(Р2Стр260.Значение) И ЗначениеЗаполнено(Р2Стр270.Значение)));
		
		Если НЕ СоотношениеВыполняется Тогда
			ЭтоОшибка = Истина;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
		Иначе
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
		КонецЕсли;
		
		Расшифровка = Р2Стр200.ЗначениеСтр + " <> 0 и "
		            + " (код льготы в строке 220 заполнен (""" + Р2Стр220.ЗначениеСтр
		            + """) или код льготы в строке 240 заполнен (""" + Р2Стр240.ЗначениеСтр
		            + """) или код льготы в строке 260 заполнен (""" + Р2Стр260.ЗначениеСтр + """))"
		            + " и (" + Р2Стр230.ЗначениеСтр + " <> 0 или " + Р2Стр250.ЗначениеСтр + " <> 0 или " + Р2Стр270.ЗначениеСтр + " <> 0)";
		
		ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок,
			Расшифровка, ЭтоОшибка, ОписаниеОшибки, Нарушение);
			
	КонецЦикла;
	
	СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
	СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
	СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_2_10(СтруктураРезультата)
	
	ОбщееЧислоОшибок    = СтруктураРезультата.КоличествоНайденныхОшибок;
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок;
	СтруктураОшибок     = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы   = НСтр("ru='Проверка раздела 2 (КС 2.10)'");
	ОписаниеКС     = НСтр("ru='Сумма налоговой льготы по строке 230 Раздела 2 должна быть равна нулю, если не заполнен код налоговой льготы по строке 220 Раздела 2'");
	
	Нарушение      = НСтр("ru='НК РФ ст.356, ст.357'");
	ОписаниеОшибки = НСтр("ru='Возможно неправомерное применение льготы, что может привести к некорректной сумме транспортного налога, подлежащей уплате в бюджет'");
	
	Р2Стр220 = ПоказательПоСтроке("Р2Стр220");
	Р2Стр230 = ПоказательПоСтроке("Р2Стр230");
	
	Раздел2 = мДанныеОтчета.Раздел2;
	
	Для Каждого Страница Из Раздел2 Цикл
		ДанныеСтраницы = Страница.Данные[0].Значение;
		НомерСтраницыСтр = ЧислоСтрЧГ0(Раздел2.Индекс(Страница) + 1);
		
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Стр220);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Стр230);
		
		ПроверятьСоотношение = НЕ ЗначениеЗаполнено(Р2Стр220.Значение);
		
		Если НЕ ПроверятьСоотношение Тогда
			Продолжить;
		КонецЕсли;
		
		СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
		ЗарегистрироватьФормулуДляРасшифровки(ОписаниеКС);
		
		ВнестиПоказательВРасшифровку(Р2Стр220, "Раздел2", НомерСтраницыСтр);
		ВнестиПоказательВРасшифровку(Р2Стр230, "Раздел2", НомерСтраницыСтр);
		
		СоотношениеВыполняется = НЕ ЗначениеЗаполнено(Р2Стр230.Значение);
		
		Если НЕ СоотношениеВыполняется Тогда
			ЭтоОшибка = Истина;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
		Иначе
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
		КонецЕсли;
		
		Расшифровка = Р2Стр230.ЗначениеСтр + " = 0, когда код льготы в строке 220 не заполнен (""" + Р2Стр220.ЗначениеСтр + """)";
		
		ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок,
			Расшифровка, ЭтоОшибка, ОписаниеОшибки, Нарушение);
			
	КонецЦикла;
	
	СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
	СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
	СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_2_11(СтруктураРезультата)
	
	ОбщееЧислоОшибок    = СтруктураРезультата.КоличествоНайденныхОшибок;
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок;
	СтруктураОшибок     = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы   = НСтр("ru='Проверка раздела 2 (КС 2.11)'");
	ОписаниеКС     = НСтр("ru='Сумма налоговой льготы по строке по строке 250 раздела 2 должна быть равна нулю, если не заполнен код налоговой льготы по строке 240 Раздела 2'");
	
	Нарушение      = НСтр("ru='НК РФ ст.356, ст.357'");
	ОписаниеОшибки = НСтр("ru='Возможно неправомерное применение льготы, что может привести к некорректной сумме транспортного налога, подлежащей уплате в бюджет'");
	
	Р2Стр240 = ПоказательПоСтроке("Р2Стр240");
	Р2Стр250 = ПоказательПоСтроке("Р2Стр250");
	
	Раздел2 = мДанныеОтчета.Раздел2;
	
	Для Каждого Страница Из Раздел2 Цикл
		ДанныеСтраницы = Страница.Данные[0].Значение;
		НомерСтраницыСтр = ЧислоСтрЧГ0(Раздел2.Индекс(Страница) + 1);
		
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Стр240);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Стр250);
		
		ПроверятьСоотношение = НЕ ЗначениеЗаполнено(Р2Стр240.Значение);
		
		Если НЕ ПроверятьСоотношение Тогда
			Продолжить;
		КонецЕсли;
		
		СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
		ЗарегистрироватьФормулуДляРасшифровки(ОписаниеКС);
		
		ВнестиПоказательВРасшифровку(Р2Стр240, "Раздел2", НомерСтраницыСтр);
		ВнестиПоказательВРасшифровку(Р2Стр250, "Раздел2", НомерСтраницыСтр);
		
		СоотношениеВыполняется = НЕ ЗначениеЗаполнено(Р2Стр250.Значение);
		
		Если НЕ СоотношениеВыполняется Тогда
			ЭтоОшибка = Истина;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
		Иначе
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
		КонецЕсли;
		
		Расшифровка = Р2Стр250.ЗначениеСтр + " = 0, когда код льготы в строке 240 не заполнен (""" + Р2Стр240.ЗначениеСтр + """)";
		
		ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок,
			Расшифровка, ЭтоОшибка, ОписаниеОшибки, Нарушение);
			
	КонецЦикла;
	
	СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
	СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
	СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_2_12(СтруктураРезультата)
	
	ОбщееЧислоОшибок    = СтруктураРезультата.КоличествоНайденныхОшибок;
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок;
	СтруктураОшибок     = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы   = НСтр("ru='Проверка раздела 2 (КС 2.12)'");
	ОписаниеКС     = НСтр("ru='Сумма налоговой льготы по строке 270 Раздела 2 должна быть равна нулю, если не заполнен код налоговой льготы по строке 260 Раздела 2'");
	
	Нарушение      = НСтр("ru='НК РФ ст.356, ст.357'");
	ОписаниеОшибки = НСтр("ru='Возможно неправомерное применение льготы, что может привести к некорректной сумме транспортного налога, подлежащей уплате в бюджет'");
	
	Р2Стр260 = ПоказательПоСтроке("Р2Стр260");
	Р2Стр270 = ПоказательПоСтроке("Р2Стр270");
	
	Раздел2 = мДанныеОтчета.Раздел2;
	
	Для Каждого Страница Из Раздел2 Цикл
		ДанныеСтраницы = Страница.Данные[0].Значение;
		НомерСтраницыСтр = ЧислоСтрЧГ0(Раздел2.Индекс(Страница) + 1);
		
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Стр260);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Стр270);
		
		ПроверятьСоотношение = НЕ ЗначениеЗаполнено(Р2Стр260.Значение);
		
		Если НЕ ПроверятьСоотношение Тогда
			Продолжить;
		КонецЕсли;
		
		СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
		ЗарегистрироватьФормулуДляРасшифровки(ОписаниеКС);
		
		ВнестиПоказательВРасшифровку(Р2Стр260, "Раздел2", НомерСтраницыСтр);
		ВнестиПоказательВРасшифровку(Р2Стр270, "Раздел2", НомерСтраницыСтр);
		
		СоотношениеВыполняется = НЕ ЗначениеЗаполнено(Р2Стр270.Значение);
		
		Если НЕ СоотношениеВыполняется Тогда
			ЭтоОшибка = Истина;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
		Иначе
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
		КонецЕсли;
		
		Расшифровка = Р2Стр270.ЗначениеСтр + " = 0, когда код льготы в строке 260 не заполнен (""" + Р2Стр260.ЗначениеСтр + """)";
		
		ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок,
			Расшифровка, ЭтоОшибка, ОписаниеОшибки, Нарушение);
			
	КонецЦикла;
	
	СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
	СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
	СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_2_13(СтруктураРезультата)
	
	ОбщееЧислоОшибок    = СтруктураРезультата.КоличествоНайденныхОшибок;
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок;
	СтруктураОшибок     = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы   = НСтр("ru='Проверка раздела 2 (КС 2.13)'");
	ОписаниеКС     = НСтр("ru='Сумма налоговой льготы (строка 230 Раздела 2) должна быть равна строка 090 Раздела 2 * строка 170 Раздела 2 * строка 150 Раздела 2 * строка 180 * строка 210, если заполнен код льготы (строка 220 Раздела 2)'");
	
	Нарушение      = НСтр("ru='НК РФ п.2 ст.358'");
	ОписаниеОшибки = НСтр("ru='Возможно, неправильно определен коэффициент Кл, что может привести к некорректной сумме транспортного налога, подлежащей уплате в бюджет'");
	
	Р2Стр090      = ПоказательПоСтроке("Р2Стр090");
	Р2Стр170      = ПоказательПоСтроке("Р2Стр170");
	Р2Стр150_Числ = ПоказательПоСтроке("Р2Стр150_Числ");
	Р2Стр150_Знам = ПоказательПоСтроке("Р2Стр150_Знам");
	Р2Стр180      = ПоказательПоСтроке("Р2Стр180");
	Р2Стр210      = ПоказательПоСтроке("Р2Стр210");
	Р2Стр220      = ПоказательПоСтроке("Р2Стр220");
	Р2Стр230      = ПоказательПоСтроке("Р2Стр230");
	
	Раздел2 = мДанныеОтчета.Раздел2;
	
	Для Каждого Страница Из Раздел2 Цикл
		ДанныеСтраницы = Страница.Данные[0].Значение;
		НомерСтраницыСтр = ЧислоСтрЧГ0(Раздел2.Индекс(Страница) + 1);
		
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Стр090);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Стр170);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Стр150_Числ);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Стр150_Знам);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Стр180);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Стр210);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Стр220);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Стр230);
		
		ПроверятьСоотношение = ЗначениеЗаполнено(Р2Стр220.Значение);
		Если НЕ ПроверятьСоотношение Тогда
			Продолжить;
		КонецЕсли;
		
		СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
		ЗарегистрироватьФормулуДляРасшифровки(ОписаниеКС);
		
		ВнестиПоказательВРасшифровку(Р2Стр230,      "Раздел2", НомерСтраницыСтр);
		ВнестиПоказательВРасшифровку(Р2Стр090,      "Раздел2", НомерСтраницыСтр);
		ВнестиПоказательВРасшифровку(Р2Стр170,      "Раздел2", НомерСтраницыСтр);
		
		ВнестиПоказательВРасшифровку(Р2Стр150_Числ, "Раздел2", НомерСтраницыСтр);
		ВнестиПоказательВРасшифровку(Р2Стр150_Знам, "Раздел2", НомерСтраницыСтр);
		Если ЗначениеЗаполнено(Р2Стр150_Знам.Значение) Тогда
			РасшифровкаР2Стр150 = " * " + Р2Стр150_Числ.ЗначениеСтр + "/" + Р2Стр150_Знам.ЗначениеСтр;
		Иначе
			РасшифровкаР2Стр150 = " * 0";
			Р2Стр150_Числ.Значение = 0;
			Р2Стр150_Знам.Значение = 1;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Р2Стр180.Значение) Тогда
			ВнестиПоказательВРасшифровку(Р2Стр180,  "Раздел2", НомерСтраницыСтр);
			РасшифровкаР2Стр180 = " * " + Р2Стр180.ЗначениеСтр;
		Иначе
			Р2Стр180.Значение = 1;
			РасшифровкаР2Стр180 = "";
		КонецЕсли;
		
		ВнестиПоказательВРасшифровку(Р2Стр210,      "Раздел2", НомерСтраницыСтр);
		ВнестиПоказательВРасшифровку(Р2Стр220,      "Раздел2", НомерСтраницыСтр);
		
		КонтрольноеЗначение = Окр(Р2Стр090.Значение * Р2Стр170.Значение * (Р2Стр150_Числ.Значение / Р2Стр150_Знам.Значение)
			* Р2Стр180.Значение * Р2Стр210.Значение, 2);
		КонтрольноеЗначение = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, КонтрольноеЗначение);
		
		Если Р2Стр230.Значение <> КонтрольноеЗначение Тогда
			ЭтоОшибка = Истина;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
		Иначе
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
		КонецЕсли;
		
		Расшифровка = Р2Стр230.ЗначениеСтр + " = " + Р2Стр090.ЗначениеСтр + " * " + Р2Стр170.ЗначениеСтр
			+ РасшифровкаР2Стр150 + РасшифровкаР2Стр180 + " * " + Р2Стр210.ЗначениеСтр + " Итог [" + КонтрольноеЗначение + "]"
			+ " при условии, что код льготы заполнен ("""+ Р2Стр220.ЗначениеСтр + """)";
		
		ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок,
			Расшифровка, ЭтоОшибка, ОписаниеОшибки, Нарушение);
		
	КонецЦикла;
	
	СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
	СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
	СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_2_14(СтруктураРезультата)
	
	ОбщееЧислоОшибок    = СтруктураРезультата.КоличествоНайденныхОшибок;
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок;
	СтруктураОшибок     = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы   = НСтр("ru='Проверка раздела 2 (КС 2.14)'");
	ОписаниеКС     = НСтр("ru='Коэффициент Кв (строка 160 Раздела 2) должен быть равен 1, если строка 140 Раздела 2 = 12 (транспортное средство использовалось в течение всего налогового периода)'");
	
	Нарушение      = НСтр("ru='НК РФ п.3 ст.362'");
	ОписаниеОшибки = НСтр("ru='Неверно указан коэффициент Кв, что может привести к некорректной сумме транспортного налога, подлежащей уплате в бюджет'");
	
	Р2Стр140 = ПоказательПоСтроке("Р2Стр140");
	Р2Стр160 = ПоказательПоСтроке("Р2Стр160");
	
	Раздел2 = мДанныеОтчета.Раздел2;
	
	Для Каждого Страница Из Раздел2 Цикл
		ДанныеСтраницы = Страница.Данные[0].Значение;
		НомерСтраницыСтр = ЧислоСтрЧГ0(Раздел2.Индекс(Страница) + 1);
		
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Стр140);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Стр160);
		
		ПроверятьСоотношение = (Р2Стр140.Значение = 12);
		Если НЕ ПроверятьСоотношение Тогда
			Продолжить;
		КонецЕсли;
		
		СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
		ЗарегистрироватьФормулуДляРасшифровки(ОписаниеКС);
		
		ВнестиПоказательВРасшифровку(Р2Стр160, "Раздел2", НомерСтраницыСтр);
		ВнестиПоказательВРасшифровку(Р2Стр140, "Раздел2", НомерСтраницыСтр);
		
		КонтрольноеЗначение = 1;
		
		Если Р2Стр160.Значение <> КонтрольноеЗначение Тогда
			ЭтоОшибка = Истина;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
		Иначе
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
		КонецЕсли;
		
		Расшифровка = Р2Стр160.ЗначениеСтр + " = " + КонтрольноеЗначение
			+ " при условии, что " + Р2Стр140.ЗначениеСтр + " = 12";
		
		ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок,
			Расшифровка, ЭтоОшибка, ОписаниеОшибки, Нарушение);
		
	КонецЦикла;
	
	СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
	СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
	СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_2_15(СтруктураРезультата)
	
	ОбщееЧислоОшибок    = СтруктураРезультата.КоличествоНайденныхОшибок;
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок;
	СтруктураОшибок     = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы   = НСтр("ru='Проверка раздела 2 (КС 2.15)'");
	ОписаниеКС     = НСтр("ru='Сумма исчисленного налога (строка 190 Раздела 2) должна быть равна произведению строк 090, 170, 150, 160, 180 Раздела 2'");
	
	Нарушение      = НСтр("ru='НК РФ ст.362'");
	ОписаниеОшибки = НСтр("ru='Неправильно указана сумма исчисленного налога'");
	
	Р2Стр090      = ПоказательПоСтроке("Р2Стр090");
	Р2Стр170      = ПоказательПоСтроке("Р2Стр170");
	Р2Стр150_Числ = ПоказательПоСтроке("Р2Стр150_Числ");
	Р2Стр150_Знам = ПоказательПоСтроке("Р2Стр150_Знам");
	Р2Стр160      = ПоказательПоСтроке("Р2Стр160");
	Р2Стр180      = ПоказательПоСтроке("Р2Стр180");
	Р2Стр190      = ПоказательПоСтроке("Р2Стр190");
	
	Раздел2 = мДанныеОтчета.Раздел2;
	
	Для Каждого Страница Из Раздел2 Цикл
		ДанныеСтраницы = Страница.Данные[0].Значение;
		
		ЛистЗаполнен
			  = ЗначениеЗаполнено(СокрЛП(ДанныеСтраницы.П000020002003))
			ИЛИ ЗначениеЗаполнено(ДанныеСтраницы.П000020003003)
			ИЛИ ЗначениеЗаполнено(ДанныеСтраницы.П000020004003)
			ИЛИ ЗначениеЗаполнено(ДанныеСтраницы.П000020005003)
			ИЛИ ЗначениеЗаполнено(ДанныеСтраницы.П000020007003)
			ИЛИ ЗначениеЗаполнено(ДанныеСтраницы.П000020009003)
			ИЛИ ЗначениеЗаполнено(ДанныеСтраницы.П000020010003)
			ИЛИ ЗначениеЗаполнено(ДанныеСтраницы.П000020011003)
			ИЛИ ЗначениеЗаполнено(ДанныеСтраницы.П000020012003)
			ИЛИ ЗначениеЗаполнено(ДанныеСтраницы.П000020014003)
			ИЛИ ЗначениеЗаполнено(ДанныеСтраницы.П000020015003_Числ)
			ИЛИ ЗначениеЗаполнено(ДанныеСтраницы.П000020015003_Знам)
			ИЛИ ЗначениеЗаполнено(ДанныеСтраницы.П000020016003)
			ИЛИ ЗначениеЗаполнено(ДанныеСтраницы.П000020017003)
			ИЛИ ЗначениеЗаполнено(ДанныеСтраницы.П000020018003)
			ИЛИ ЗначениеСуммыЗаполнено(ДанныеСтраницы.П000020019003)
			ИЛИ ЗначениеЗаполнено(ДанныеСтраницы.П000020020003)
			ИЛИ ЗначениеЗаполнено(ДанныеСтраницы.П000020021003)
			ИЛИ ЗначениеЗаполнено(ДанныеСтраницы.П000020022003_КодЛьготы)
			ИЛИ ЗначениеСуммыЗаполнено(ДанныеСтраницы.П000020023003)
			ИЛИ ЗначениеЗаполнено(ДанныеСтраницы.П000020024003_КодЛьготы)
			ИЛИ ЗначениеСуммыЗаполнено(ДанныеСтраницы.П000020025003)
			ИЛИ ЗначениеЗаполнено(ДанныеСтраницы.П000020026003_КодЛьготы)
			ИЛИ ЗначениеСуммыЗаполнено(ДанныеСтраницы.П000020027003)
			ИЛИ ЗначениеСуммыЗаполнено(ДанныеСтраницы.П000020030003);
		
		Если НЕ ЛистЗаполнен Тогда
			Продолжить;
		КонецЕсли;
		
		НомерСтраницыСтр = ЧислоСтрЧГ0(Раздел2.Индекс(Страница) + 1);
		
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Стр090);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Стр170);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Стр150_Числ);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Стр150_Знам);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Стр160);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Стр180);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Стр190);
		
		СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
		ЗарегистрироватьФормулуДляРасшифровки(ОписаниеКС);
		
		ВнестиПоказательВРасшифровку(Р2Стр190,      "Раздел2", НомерСтраницыСтр);
		ВнестиПоказательВРасшифровку(Р2Стр090,      "Раздел2", НомерСтраницыСтр);
		ВнестиПоказательВРасшифровку(Р2Стр170,      "Раздел2", НомерСтраницыСтр);
		
		ВнестиПоказательВРасшифровку(Р2Стр150_Числ, "Раздел2", НомерСтраницыСтр);
		ВнестиПоказательВРасшифровку(Р2Стр150_Знам, "Раздел2", НомерСтраницыСтр);
		Если ЗначениеЗаполнено(Р2Стр150_Знам.Значение) Тогда
			РасшифровкаР2Стр150 = " * " + Р2Стр150_Числ.ЗначениеСтр + "/" + Р2Стр150_Знам.ЗначениеСтр;
		Иначе
			РасшифровкаР2Стр150 = " * 0";
			Р2Стр150_Числ.Значение = 0;
			Р2Стр150_Знам.Значение = 1;
		КонецЕсли;
		
		ВнестиПоказательВРасшифровку(Р2Стр160,      "Раздел2", НомерСтраницыСтр);
		
		Если ЗначениеЗаполнено(Р2Стр180.Значение) Тогда
			ВнестиПоказательВРасшифровку(Р2Стр180,  "Раздел2", НомерСтраницыСтр);
			РасшифровкаР2Стр180 = " * " + Р2Стр180.ЗначениеСтр;
		Иначе
			Р2Стр180.Значение = 1;
			РасшифровкаР2Стр180 = "";
		КонецЕсли;
		
		КонтрольноеЗначение = Окр(Р2Стр090.Значение * Р2Стр170.Значение * (Р2Стр150_Числ.Значение / Р2Стр150_Знам.Значение)
			* Р2Стр160.Значение * Р2Стр180.Значение, 2);
		КонтрольноеЗначение = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, КонтрольноеЗначение);
		
		Если Р2Стр190.Значение <> КонтрольноеЗначение Тогда
			ЭтоОшибка = Истина;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
		Иначе
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
		КонецЕсли;
		
		Расшифровка = Р2Стр190.ЗначениеСтр + " = " + Р2Стр090.ЗначениеСтр + " * " + Р2Стр170.ЗначениеСтр
			+ РасшифровкаР2Стр150 + " * " + Р2Стр160.ЗначениеСтр + РасшифровкаР2Стр180 + " Итог [" + КонтрольноеЗначение + "]";
		
		ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок,
			Расшифровка, ЭтоОшибка, ОписаниеОшибки, Нарушение);
		
	КонецЦикла;
	
	СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
	СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
	СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_2_16(СтруктураРезультата)
	
	ОбщееЧислоОшибок    = СтруктураРезультата.КоличествоНайденныхОшибок;
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок;
	СтруктураОшибок     = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы   = НСтр("ru='Проверка раздела 2 (КС 2.16)'");
	ОписаниеКС     = НСтр("ru='Сумма налоговой льготы (строка 250 Раздела 2) должна быть равна произведению значений строк 090, 170, 150, 180, 210, 240а Раздела 2 / 100%, если заполнен код льготы (строка 240 Раздела 2)'");
	
	Нарушение      = НСтр("ru='НК РФ п.3 ст. 361'");
	ОписаниеОшибки = НСтр("ru='Неправильно указана сумма налоговой льготы, что может привести к некорректной сумме транспортного налога, подлежащей уплате в бюджет'");
	
	Р2Стр090      = ПоказательПоСтроке("Р2Стр090");
	Р2Стр170      = ПоказательПоСтроке("Р2Стр170");
	Р2Стр150_Числ = ПоказательПоСтроке("Р2Стр150_Числ");
	Р2Стр150_Знам = ПоказательПоСтроке("Р2Стр150_Знам");
	Р2Стр180      = ПоказательПоСтроке("Р2Стр180");
	Р2Стр210      = ПоказательПоСтроке("Р2Стр210");
	Р2Стр240      = ПоказательПоСтроке("Р2Стр240");
	Р2Стр240а     = ПоказательПоСтроке("Р2Стр240а");
	Р2Стр250      = ПоказательПоСтроке("Р2Стр250");
	
	Раздел2 = мДанныеОтчета.Раздел2;
	
	Для Каждого Страница Из Раздел2 Цикл
		ДанныеСтраницы = Страница.Данные[0].Значение;
		НомерСтраницыСтр = ЧислоСтрЧГ0(Раздел2.Индекс(Страница) + 1);
		
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Стр090);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Стр170);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Стр150_Числ);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Стр150_Знам);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Стр180);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Стр210);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Стр240);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Стр240а);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Стр250);
		
		ПроверятьСоотношение = ЗначениеЗаполнено(Р2Стр240.Значение);
		Если НЕ ПроверятьСоотношение Тогда
			Продолжить;
		КонецЕсли;
		
		СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
		ЗарегистрироватьФормулуДляРасшифровки(ОписаниеКС);
		
		ВнестиПоказательВРасшифровку(Р2Стр250, "Раздел2", НомерСтраницыСтр);
		ВнестиПоказательВРасшифровку(Р2Стр090, "Раздел2", НомерСтраницыСтр);
		ВнестиПоказательВРасшифровку(Р2Стр170, "Раздел2", НомерСтраницыСтр);
		
		ВнестиПоказательВРасшифровку(Р2Стр150_Числ, "Раздел2", НомерСтраницыСтр);
		ВнестиПоказательВРасшифровку(Р2Стр150_Знам, "Раздел2", НомерСтраницыСтр);
		Если ЗначениеЗаполнено(Р2Стр150_Знам.Значение) Тогда
			РасшифровкаР2Стр150 = " * " + Р2Стр150_Числ.ЗначениеСтр + "/" + Р2Стр150_Знам.ЗначениеСтр;
		Иначе
			РасшифровкаР2Стр150 = " * 0";
			Р2Стр150_Числ.Значение = 0;
			Р2Стр150_Знам.Значение = 1;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Р2Стр180.Значение) Тогда
			ВнестиПоказательВРасшифровку(Р2Стр180,  "Раздел2", НомерСтраницыСтр);
			РасшифровкаР2Стр180 = " * " + Р2Стр180.ЗначениеСтр;
		Иначе
			Р2Стр180.Значение = 1;
			РасшифровкаР2Стр180 = "";
		КонецЕсли;
		
		ВнестиПоказательВРасшифровку(Р2Стр210, "Раздел2", НомерСтраницыСтр);
		ВнестиПоказательВРасшифровку(Р2Стр240а, "Раздел2", НомерСтраницыСтр);
		ВнестиПоказательВРасшифровку(Р2Стр240, "Раздел2", НомерСтраницыСтр);
		
		КонтрольноеЗначение = Р2Стр090.Значение * Р2Стр170.Значение * (Р2Стр150_Числ.Значение / Р2Стр150_Знам.Значение)
			* Р2Стр180.Значение * Р2Стр210.Значение * Р2Стр240а.Значение / 100;
		КонтрольноеЗначение = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, Окр(КонтрольноеЗначение, 2));
		
		Если Р2Стр250.Значение <> КонтрольноеЗначение Тогда
			ЭтоОшибка = Истина;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
		Иначе
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
		КонецЕсли;
		
		Расшифровка = Р2Стр250.ЗначениеСтр + " = " + Р2Стр090.ЗначениеСтр + " * " + Р2Стр170.ЗначениеСтр
			+ РасшифровкаР2Стр150 + РасшифровкаР2Стр180 + " * " + Р2Стр210.ЗначениеСтр + " * " + Р2Стр210.ЗначениеСтр + " * "
			+ Р2Стр240а.ЗначениеСтр + " / 100" + " Итог [" + КонтрольноеЗначение + "]"
			+ " при условии, что код льготы заполнен (""" + Р2Стр240.ЗначениеСтр + """)";
		
		ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок,
			Расшифровка, ЭтоОшибка, ОписаниеОшибки, Нарушение);
		
	КонецЦикла;
	
	СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
	СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
	СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_2_17(СтруктураРезультата)
	
	ОбщееЧислоОшибок    = СтруктураРезультата.КоличествоНайденныхОшибок;
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок;
	СтруктураОшибок     = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы   = НСтр("ru='Проверка раздела 2 (КС 2.17)'");
	ОписаниеКС     = НСтр("ru='Сумма налоговой льготы в виде снижения ставки налога (строка 270 Раздела 2) должна быть равна (строка 090 Раздела 2 х строка 170 Раздела 2) - (строка 090 Раздела 2 х строка 260а Раздела 2) х значение доли в строке 150 х значение коэффициента Кп в строке 180 x значение коэффициента Кл в строке 210, если заполнен код льготы (строка 260 Раздела 2)'");
	
	Нарушение      = НСтр("ru='НК РФ п.2 ст. 361'");
	ОписаниеОшибки = НСтр("ru='Неправильно указана сумма налоговой льготы, что может привести к некорректной сумме транспортного налога, подлежащей уплате в бюджет'");
	
	Р2Стр090      = ПоказательПоСтроке("Р2Стр090");
	Р2Стр170      = ПоказательПоСтроке("Р2Стр170");
	Р2Стр150_Числ = ПоказательПоСтроке("Р2Стр150_Числ");
	Р2Стр150_Знам = ПоказательПоСтроке("Р2Стр150_Знам");
	Р2Стр180      = ПоказательПоСтроке("Р2Стр180");
	Р2Стр210      = ПоказательПоСтроке("Р2Стр210");
	Р2Стр260      = ПоказательПоСтроке("Р2Стр260");
	Р2Стр260а     = ПоказательПоСтроке("Р2Стр260а");
	Р2Стр270      = ПоказательПоСтроке("Р2Стр270");
	
	Раздел2 = мДанныеОтчета.Раздел2;
	
	Для Каждого Страница Из Раздел2 Цикл
		ДанныеСтраницы = Страница.Данные[0].Значение;
		НомерСтраницыСтр = ЧислоСтрЧГ0(Раздел2.Индекс(Страница) + 1);
		
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Стр090);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Стр170);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Стр150_Числ);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Стр150_Знам);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Стр180);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Стр210);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Стр260);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Стр260а);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Стр270);
		
		ПроверятьСоотношение = ЗначениеЗаполнено(Р2Стр260.Значение);
		Если НЕ ПроверятьСоотношение Тогда
			Продолжить;
		КонецЕсли;
		
		СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
		ЗарегистрироватьФормулуДляРасшифровки(ОписаниеКС);
		
		ВнестиПоказательВРасшифровку(Р2Стр270, "Раздел2", НомерСтраницыСтр);
		ВнестиПоказательВРасшифровку(Р2Стр090, "Раздел2", НомерСтраницыСтр);
		ВнестиПоказательВРасшифровку(Р2Стр170, "Раздел2", НомерСтраницыСтр);
		ВнестиПоказательВРасшифровку(Р2Стр260а, "Раздел2", НомерСтраницыСтр);
		
		ВнестиПоказательВРасшифровку(Р2Стр150_Числ, "Раздел2", НомерСтраницыСтр);
		ВнестиПоказательВРасшифровку(Р2Стр150_Знам, "Раздел2", НомерСтраницыСтр);
		Если ЗначениеЗаполнено(Р2Стр150_Знам.Значение) Тогда
			РасшифровкаР2Стр150 = " * " + Р2Стр150_Числ.ЗначениеСтр + "/" + Р2Стр150_Знам.ЗначениеСтр;
		Иначе
			РасшифровкаР2Стр150 = " * 0";
			Р2Стр150_Числ.Значение = 0;
			Р2Стр150_Знам.Значение = 1;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Р2Стр180.Значение) Тогда
			ВнестиПоказательВРасшифровку(Р2Стр180,  "Раздел2", НомерСтраницыСтр);
			РасшифровкаР2Стр180 = " * " + Р2Стр180.ЗначениеСтр;
		Иначе
			Р2Стр180.Значение = 1;
			РасшифровкаР2Стр180 = "";
		КонецЕсли;
		
		ВнестиПоказательВРасшифровку(Р2Стр210, "Раздел2", НомерСтраницыСтр);
		ВнестиПоказательВРасшифровку(Р2Стр260, "Раздел2", НомерСтраницыСтр);
		
		КонтрольноеЗначение = Окр(Р2Стр090.Значение * (Р2Стр170.Значение - Р2Стр260а.Значение)
			* (Р2Стр150_Числ.Значение / Р2Стр150_Знам.Значение) * Р2Стр180.Значение * Р2Стр210.Значение, 2);
		КонтрольноеЗначение = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, КонтрольноеЗначение);
		
		Если Р2Стр270.Значение <> КонтрольноеЗначение Тогда
			ЭтоОшибка = Истина;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
		Иначе
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
		КонецЕсли;
		
		Расшифровка = Р2Стр270.ЗначениеСтр + " = " + Р2Стр090.ЗначениеСтр
			+ " * (" + Р2Стр170.ЗначениеСтр + " - " + Р2Стр260а.ЗначениеСтр + ")"
			+ РасшифровкаР2Стр150 + РасшифровкаР2Стр180 + " * " + Р2Стр210.ЗначениеСтр
			+ " Итог [" + КонтрольноеЗначение + "]"
			+ " при условии, что код льготы заполнен (""" + Р2Стр260.ЗначениеСтр + """)";
		
		ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок,
			Расшифровка, ЭтоОшибка, ОписаниеОшибки, Нарушение);
		
	КонецЦикла;
	
	СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
	СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
	СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_2_18(СтруктураРезультата)
	
	ОбщееЧислоОшибок	= СтруктураРезультата.КоличествоНайденныхОшибок;
	ОбщееЧислоБезОшибок	= СтруктураРезультата.КоличествоНайденныхБезОшибок;
	СтруктураОшибок		= СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы	= НСтр("ru='Проверка раздела 2 (КС 2.18)'");
	ОписаниеКС		= 
		НСтр("ru='Сумма налога, подлежащая уплате в бюджет в строке 300 Раздела 2 должна быть равна нулю, если сумма '") +
		НСтр("ru='налогового вычета в строке 290 Раздела 2 больше суммы исчисленного налога в строке 190 '") +
		НСтр("ru='Раздела 2 за минусом сумм налоговых льгот по строкам 250 и 270 Раздела 2'");
	
	Нарушение		= НСтр("ru='НК РФ ст.362'");
	ОписаниеОшибки	= НСтр("ru='Неправильно определена исчисленная сумма транспортного налога, подлежащая уплате '") +
		НСтр("ru='в бюджет за налоговый период'");
	
	Р2С190	= ПоказательПоСтроке("Р2Стр190");
	Р2С250	= ПоказательПоСтроке("Р2Стр250");
	Р2С270	= ПоказательПоСтроке("Р2Стр270");
	Р2С290	= ПоказательПоСтроке("Р2Стр290");
	Р2С300	= ПоказательПоСтроке("Р2Стр300");
	
	Раздел2 = мДанныеОтчета.Раздел2;
	
	Для Каждого Страница Из Раздел2 Цикл
		ДанныеСтраницы = Страница.Данные[0].Значение;
		НомерСтраницыСтр = ЧислоСтрЧГ0(Раздел2.Индекс(Страница) + 1);
		
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2С190);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2С250);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2С270);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2С290);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2С300);
		
		РасчетнаяСумма = Р2С190.Значение - Р2С250.Значение - Р2С270.Значение - Р2С290.Значение;
		ПроверятьСоотношение = ЗначениеЗаполнено(Р2С290.Значение) И РасчетнаяСумма < 0;;
		
		Если НЕ ПроверятьСоотношение Тогда
			Продолжить;
		КонецЕсли;
		
		СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
		ЗарегистрироватьФормулуДляРасшифровки(ОписаниеКС);
		
		ВнестиПоказательВРасшифровку(Р2С190, "Раздел2", НомерСтраницыСтр);
		ВнестиПоказательВРасшифровку(Р2С250, "Раздел2", НомерСтраницыСтр);
		ВнестиПоказательВРасшифровку(Р2С270, "Раздел2", НомерСтраницыСтр);
		ВнестиПоказательВРасшифровку(Р2С290, "Раздел2", НомерСтраницыСтр);
		ВнестиПоказательВРасшифровку(Р2С300, "Раздел2", НомерСтраницыСтр);
		
		Если Не Р2С300.Значение = 0 Тогда
			ЭтоОшибка = Истина;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
		Иначе
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
		КонецЕсли;
		
		Расшифровка = Р2С300.ЗначениеСтр + НСтр("ru=' = 0 в случае отрицательной разницы '") + Р2С190.ЗначениеСтр
			+ НСтр("ru=' - '") + Р2С250.ЗначениеСтр + НСтр("ru=' - '") + Р2С270.ЗначениеСтр + НСтр("ru=' - '")
			+ Р2С290.ЗначениеСтр
			+ НСтр("ru=' Итог ['") + РасчетнаяСумма + НСтр("ru=']'")
			+ НСтр("ru=' при условии, что сумма налогового вычета заполнена (""'") + Р2С290.ЗначениеСтр + НСтр("ru='"")'");
		
		ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок,
			Расшифровка, ЭтоОшибка, ОписаниеОшибки, Нарушение);
		
	КонецЦикла;
	
	СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
	СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
	СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_2_19(СтруктураРезультата)
	
	ОбщееЧислоОшибок	= СтруктураРезультата.КоличествоНайденныхОшибок;
	ОбщееЧислоБезОшибок	= СтруктураРезультата.КоличествоНайденныхБезОшибок;
	СтруктураОшибок		= СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы		= НСтр("ru='Проверка раздела 2 (КС 2.19)'");
	ОписаниеКС			= 
		НСтр("ru='Сумма налога, подлежащая уплате в бюджет в строке 300 Раздела 2 должна быть равна значению строки '") +
		НСтр("ru='190 Раздела 2 за минусом значений строк 250, 270, 290 Раздела 2, если сумма налогового вычета в '") +
		НСтр("ru='строке 290 Раздела 2 меньше или равна суммы исчисленного налога в строке 190 Раздела 2 за минусом '") +
		НСтр("ru='сумм налоговых льгот по строкам 250 и 270 Раздела 2'");
	
	Нарушение			= НСтр("ru='НК РФ ст.362'");
	ОписаниеОшибки		= 
		НСтр("ru='Неправильно определена исчисленная сумма транспортного налога, подлежащая уплате в бюджет за '") +
		НСтр("ru='налоговый период'");
	
	Р2С190	= ПоказательПоСтроке("Р2Стр190");
	Р2С250	= ПоказательПоСтроке("Р2Стр250");
	Р2С270	= ПоказательПоСтроке("Р2Стр270");
	Р2С290	= ПоказательПоСтроке("Р2Стр290");
	Р2С300	= ПоказательПоСтроке("Р2Стр300");
	
	Раздел2 = мДанныеОтчета.Раздел2;
	
	Для Каждого Страница Из Раздел2 Цикл
		ДанныеСтраницы = Страница.Данные[0].Значение;
		НомерСтраницыСтр = ЧислоСтрЧГ0(Раздел2.Индекс(Страница) + 1);
		
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2С190);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2С250);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2С270);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2С290);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2С300);
		
		РасчетнаяСумма = Р2С190.Значение - Р2С250.Значение - Р2С270.Значение - Р2С290.Значение;
		ПроверятьСоотношение = ЗначениеЗаполнено(Р2С290.Значение) И РасчетнаяСумма >= 0;;
		
		Если НЕ ПроверятьСоотношение Тогда
			Продолжить;
		КонецЕсли;
		
		СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
		ЗарегистрироватьФормулуДляРасшифровки(ОписаниеКС);
		
		ВнестиПоказательВРасшифровку(Р2С190, "Раздел2", НомерСтраницыСтр);
		ВнестиПоказательВРасшифровку(Р2С250, "Раздел2", НомерСтраницыСтр);
		ВнестиПоказательВРасшифровку(Р2С270, "Раздел2", НомерСтраницыСтр);
		ВнестиПоказательВРасшифровку(Р2С290, "Раздел2", НомерСтраницыСтр);
		ВнестиПоказательВРасшифровку(Р2С300, "Раздел2", НомерСтраницыСтр);
		
		Если Р2С300.Значение = РасчетнаяСумма Тогда
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
		Иначе
			ЭтоОшибка = Истина;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
		КонецЕсли;
			
		Расшифровка = Р2С300.ЗначениеСтр + " = " + Р2С190.ЗначениеСтр
			+ НСтр("ru=' - '") + Р2С250.ЗначениеСтр + " - " + Р2С270.ЗначениеСтр + " - "
			+ Р2С290.ЗначениеСтр
			+ НСтр("ru=' Итог ['") + РасчетнаяСумма + НСтр("ru=']'")
			+ НСтр("ru=' при условии, что сумма налогового вычета заполнена (""'") + Р2С290.ЗначениеСтр + НСтр("ru='"")'");
		
		ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок,
			Расшифровка, ЭтоОшибка, ОписаниеОшибки, Нарушение);
		
	КонецЦикла;
	
	СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
	СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
	СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_2_20а(СтруктураРезультата)
	
	ОбщееЧислоОшибок    = СтруктураРезультата.КоличествоНайденныхОшибок;
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок;
	СтруктураОшибок     = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы   = НСтр("ru='Проверка раздела 2 (КС 2.20а)'");
	ОписаниеКС     = НСтр("ru='Исчисленная сумма налога, подлежащая уплате в бюджет за налоговый период (строка 300 Раздела 2) должна быть равна разнице строк 190 и 230 Раздела 2, если строка 230 Раздела 2 (сумма налоговой льготы) больше нуля и при этом заполнен код льготы по строке 220 Раздела 2'");
	
	Нарушение      = НСтр("ru='НК РФ ст.362'");
	ОписаниеОшибки = НСтр("ru='Неправильно определена исчисленная сумма транспортного налога, подлежащая уплате в бюджет за налоговый период'");
	
	Р2Стр190 = ПоказательПоСтроке("Р2Стр190");
	Р2Стр220 = ПоказательПоСтроке("Р2Стр220");
	Р2Стр230 = ПоказательПоСтроке("Р2Стр230");
	Р2Стр300 = ПоказательПоСтроке("Р2Стр300");
	
	Раздел2 = мДанныеОтчета.Раздел2;
	
	Для Каждого Страница Из Раздел2 Цикл
		ДанныеСтраницы = Страница.Данные[0].Значение;
		НомерСтраницыСтр = ЧислоСтрЧГ0(Раздел2.Индекс(Страница) + 1);
		
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Стр190);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Стр220);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Стр230);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Стр300);
		
		ПроверятьСоотношение = (Р2Стр230.Значение > 0 И ЗначениеЗаполнено(Р2Стр220.Значение));
		Если НЕ ПроверятьСоотношение Тогда
			Продолжить;
		КонецЕсли;
		
		СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
		ЗарегистрироватьФормулуДляРасшифровки(ОписаниеКС);
		
		ВнестиПоказательВРасшифровку(Р2Стр300, "Раздел2", НомерСтраницыСтр);
		ВнестиПоказательВРасшифровку(Р2Стр190, "Раздел2", НомерСтраницыСтр);
		ВнестиПоказательВРасшифровку(Р2Стр220, "Раздел2", НомерСтраницыСтр);
		ВнестиПоказательВРасшифровку(Р2Стр230, "Раздел2", НомерСтраницыСтр);
		
		КонтрольноеЗначение = Р2Стр190.Значение - Р2Стр230.Значение;
		КонтрольноеЗначение = Макс(0, КонтрольноеЗначение);
		
		Если Р2Стр300.Значение <> КонтрольноеЗначение Тогда
			ЭтоОшибка = Истина;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
		Иначе
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
		КонецЕсли;
		
		Расшифровка = Р2Стр300.ЗначениеСтр + " = " + Р2Стр190.ЗначениеСтр + " - " + Р2Стр230.ЗначениеСтр
			+ " Итог [" + КонтрольноеЗначение + "]" + " при условии, что " + Р2Стр230.ЗначениеСтр
			+ " > 0 и заполнен код льготы (""" + Р2Стр220.ЗначениеСтр + """)";
		
		ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок,
			Расшифровка, ЭтоОшибка, ОписаниеОшибки, Нарушение);
		
	КонецЦикла;
	
	СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
	СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
	СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_2_20б(СтруктураРезультата)
	
	ОбщееЧислоОшибок    = СтруктураРезультата.КоличествоНайденныхОшибок;
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок;
	СтруктураОшибок     = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы   = НСтр("ru='Проверка раздела 2 (КС 2.20б)'");
	ОписаниеКС     = НСтр("ru='Исчисленная сумма налога, подлежащая уплате в бюджет за налоговый период (строка 300 Раздела 2) должна быть равна строка 190 Раздела 2 - строка 250 Раздела 2 - строка 270 - строка 290 Раздела 2, если строка 250 Раздела 2 (сумма налоговой льготы) больше нуля и при этом заполнен код льготы по строке 240 Раздела 2 и\или строка 270 Раздела 2 (сумма налоговой льготы) больше нуля и при этом заполнен код льготы по строке 260 Раздела 2 и(или) строка 290 Раздела 2 (сумма налогового вычета) больше нуля и при этом заполнен код налогового вычета по строке 280 Раздела 2'");
	
	Нарушение      = НСтр("ru='НК РФ ст.362'");
	ОписаниеОшибки = НСтр("ru='Неправильно определена исчисленная сумма транспортного налога, подлежащая уплате в бюджет за налоговый период'");
	
	Р2Стр190 = ПоказательПоСтроке("Р2Стр190");
	Р2Стр240 = ПоказательПоСтроке("Р2Стр240");
	Р2Стр250 = ПоказательПоСтроке("Р2Стр250");
	Р2Стр260 = ПоказательПоСтроке("Р2Стр260");
	Р2Стр270 = ПоказательПоСтроке("Р2Стр270");
	Р2Стр280 = ПоказательПоСтроке("Р2Стр280");
	Р2Стр290 = ПоказательПоСтроке("Р2Стр290");
	Р2Стр300 = ПоказательПоСтроке("Р2Стр300");
	
	Раздел2 = мДанныеОтчета.Раздел2;
	
	Для Каждого Страница Из Раздел2 Цикл
		ДанныеСтраницы = Страница.Данные[0].Значение;
		НомерСтраницыСтр = ЧислоСтрЧГ0(Раздел2.Индекс(Страница) + 1);
		
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Стр190);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Стр240);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Стр250);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Стр260);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Стр270);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Стр280);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Стр290);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Стр300);
		
		ПроверятьСоотношение = (Р2Стр250.Значение > 0 И ЗначениеЗаполнено(Р2Стр240.Значение))
			ИЛИ (Р2Стр270.Значение > 0 И ЗначениеЗаполнено(Р2Стр260.Значение))
			ИЛИ (Р2Стр290.Значение > 0 И ЗначениеЗаполнено(Р2Стр280.Значение));
			
		Если НЕ ПроверятьСоотношение Тогда
			Продолжить;
		КонецЕсли;
		
		СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
		ЗарегистрироватьФормулуДляРасшифровки(ОписаниеКС);
		
		ВнестиПоказательВРасшифровку(Р2Стр190, "Раздел2", НомерСтраницыСтр);
		ВнестиПоказательВРасшифровку(Р2Стр240, "Раздел2", НомерСтраницыСтр);
		ВнестиПоказательВРасшифровку(Р2Стр250, "Раздел2", НомерСтраницыСтр);
		ВнестиПоказательВРасшифровку(Р2Стр260, "Раздел2", НомерСтраницыСтр);
		ВнестиПоказательВРасшифровку(Р2Стр270, "Раздел2", НомерСтраницыСтр);
		ВнестиПоказательВРасшифровку(Р2Стр280, "Раздел2", НомерСтраницыСтр);
		ВнестиПоказательВРасшифровку(Р2Стр290, "Раздел2", НомерСтраницыСтр);
		ВнестиПоказательВРасшифровку(Р2Стр300, "Раздел2", НомерСтраницыСтр);
		
		КонтрольноеЗначение = Р2Стр190.Значение - Р2Стр250.Значение - Р2Стр270.Значение - Р2Стр290.Значение;
		КонтрольноеЗначение = Макс(0, КонтрольноеЗначение);
		
		Если Р2Стр300.Значение <> КонтрольноеЗначение Тогда
			ЭтоОшибка = Истина;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
		Иначе
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
		КонецЕсли;
		
		Расшифровка = Р2Стр300.ЗначениеСтр + " = " + Р2Стр190.ЗначениеСтр + " - " + Р2Стр250.ЗначениеСтр + " - "
			+ Р2Стр270.ЗначениеСтр + " - " + Р2Стр290.ЗначениеСтр + " Итог [" + КонтрольноеЗначение + "]" + " при условии, что "
			+ Р2Стр250.ЗначениеСтр + " > 0 и код льготы в строке 240 заполнен (""" + Р2Стр240.ЗначениеСтр + """)" + " и(или) "
			+ Р2Стр270.ЗначениеСтр + " > 0 и код льготы в строке 260 заполнен (""" + Р2Стр260.ЗначениеСтр + """)" + " и(или) "
			+ Р2Стр290.ЗначениеСтр + " > 0 и код налогового вычета в строке 280 заполнен (""" + Р2Стр280.ЗначениеСтр + """)";
		
		ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок,
			Расшифровка, ЭтоОшибка, ОписаниеОшибки, Нарушение);
		
	КонецЦикла;
	
	СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
	СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
	СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	
КонецПроцедуры

&НаСервере
Функция ПоказательПоСтроке(УсловныйКодПоказателя)
	
	Результат = Новый Структура;
	Результат.Вставить("Имя");
	Результат.Вставить("Представление");
	
	Если УсловныйКодПоказателя = "Р1Стр020" Тогда
		Результат.Вставить("Имя", "П000010002003_%1");
		Результат.Вставить("Представление", НСтр("ru='Код по ОКТМО (строка 020%1 раздела 1)'"));
		
	ИначеЕсли УсловныйКодПоказателя = "Р1Стр021" Тогда
		Результат.Вставить("Имя", "П000010002103_%1");
		Результат.Вставить("Представление", НСтр("ru='Исчисленная сумма налога, подлежащая уплате в бюджет за налоговый период (руб.) (строка 021%1 раздела 1)'"));
		Результат.Вставить("ИзменяемаяРазмерность", Истина);
		
	ИначеЕсли УсловныйКодПоказателя = "Р1Стр023" Тогда
		Результат.Вставить("Имя", "П000010002303_%1");
		Результат.Вставить("Представление", НСтр("ru='первый квартал (руб.) (строка 023%1 раздела 1)'"));
		Результат.Вставить("ИзменяемаяРазмерность", Истина);
		
	ИначеЕсли УсловныйКодПоказателя = "Р1Стр025" Тогда
		Результат.Вставить("Имя", "П000010002503_%1");
		Результат.Вставить("Представление", НСтр("ru='второй квартал (руб.) (строка 025%1 раздела 1)'"));
		Результат.Вставить("ИзменяемаяРазмерность", Истина);
		
	ИначеЕсли УсловныйКодПоказателя = "Р1Стр027" Тогда
		Результат.Вставить("Имя", "П000010002703_%1");
		Результат.Вставить("Представление", НСтр("ru='третий квартал (руб.) (строка 027%1 раздела 1)'"));
		Результат.Вставить("ИзменяемаяРазмерность", Истина);
		
	ИначеЕсли УсловныйКодПоказателя = "Р1Стр030" Тогда
		Результат.Вставить("Имя", "П000010003003_%1");
		Результат.Вставить("Представление", НСтр("ru='Сумма налога, исчисленная к уплате в бюджет (руб.) (строка 030%1 раздела 1)'"));
		Результат.Вставить("ИзменяемаяРазмерность", Истина);
		
	ИначеЕсли УсловныйКодПоказателя = "Р1Стр040" Тогда
		Результат.Вставить("Имя", "П000010004003_%1");
		Результат.Вставить("Представление", НСтр("ru='Сумма налога, исчисленная к уменьшению (руб.) (строка 040%1 раздела 1)'"));
		Результат.Вставить("ИзменяемаяРазмерность", Истина);
		
	ИначеЕсли УсловныйКодПоказателя = "Р2Стр020" Тогда
		Результат.Вставить("Имя", "П000020002003");
		Результат.Вставить("Представление", НСтр("ru='Код по ОКТМО (строка 020%1 раздела 2)'"));
		
	ИначеЕсли УсловныйКодПоказателя = "Р2Стр090" Тогда
		Результат.Вставить("Имя", "П000020009003");
		Результат.Вставить("Представление", НСтр("ru='Налоговая база (строка 090%1 раздела 2)'"));
		
	ИначеЕсли УсловныйКодПоказателя = "Р2Стр110" Тогда
		Результат.Вставить("Имя", "П000020011003");
		Результат.Вставить("Представление", НСтр("ru='Экологический класс (строка 110%1 раздела 2)'"));
		
	ИначеЕсли УсловныйКодПоказателя = "Р2Стр120" Тогда
		Результат.Вставить("Имя", "П000020012003");
		Результат.Вставить("Представление", НСтр("ru='Количество лет, прошедших с года выпуска транспортного средства (строка 120%1 раздела 2)'"));
		
	ИначеЕсли УсловныйКодПоказателя = "Р2Стр130" Тогда
		Результат.Вставить("Имя", "П000020013003");
		Результат.Вставить("Представление", НСтр("ru='Год выпуска транспортного средства (строка 130%1 раздела 2)'"));
		
	ИначеЕсли УсловныйКодПоказателя = "Р2Стр140" Тогда
		Результат.Вставить("Имя", "П000020014003");
		Результат.Вставить("Представление", НСтр("ru='Количество полных месяцев владения транспортным средством (строка 140%1 раздела 2)'"));
		
	ИначеЕсли УсловныйКодПоказателя = "Р2Стр150_Числ" Тогда
		Результат.Вставить("Имя", "П000020015003_Числ");
		Результат.Вставить("Представление", НСтр("ru='Доля налогоплательщика в праве на транспортное средство (числитель в строке 150%1 раздела 2)'"));
		
	ИначеЕсли УсловныйКодПоказателя = "Р2Стр150_Знам" Тогда
		Результат.Вставить("Имя", "П000020015003_Знам");
		Результат.Вставить("Представление", НСтр("ru='Доля налогоплательщика в праве на транспортное средство (знаменатель в строке 150%1 раздела 2)'"));
		
	ИначеЕсли УсловныйКодПоказателя = "Р2Стр160" Тогда
		Результат.Вставить("Имя", "П000020016003");
		Результат.Вставить("Представление", НСтр("ru='Коэффициент Кв (строка 160%1 раздела 2)'"));
		
	ИначеЕсли УсловныйКодПоказателя = "Р2Стр170" Тогда
		Результат.Вставить("Имя", "П000020017003");
		Результат.Вставить("Представление", НСтр("ru='Налоговая ставка (строка 170%1 раздела 2)'"));
		
	ИначеЕсли УсловныйКодПоказателя = "Р2Стр180" Тогда
		Результат.Вставить("Имя", "П000020018003");
		Результат.Вставить("Представление", НСтр("ru='Коэффициент Кп (строка 180%1 раздела 2)'"));
		
	ИначеЕсли УсловныйКодПоказателя = "Р2Стр190" Тогда
		Результат.Вставить("Имя", "П000020019003");
		Результат.Вставить("Представление", НСтр("ru='Сумма исчисленного налога (руб.) (строка 190%1 раздела 2)'"));
		Результат.Вставить("ИзменяемаяРазмерность", Истина);
		
	ИначеЕсли УсловныйКодПоказателя = "Р2Стр200" Тогда
		Результат.Вставить("Имя", "П000020020003");
		Результат.Вставить("Представление", НСтр("ru='Количество полных месяцев использования льготы (строка 200%1 раздела 2)'"));
		
	ИначеЕсли УсловныйКодПоказателя = "Р2Стр210" Тогда
		Результат.Вставить("Имя", "П000020021003");
		Результат.Вставить("Представление", НСтр("ru='Коэффициент Кл (строка 210%1 раздела 2)'"));
		
	ИначеЕсли УсловныйКодПоказателя = "Р2Стр220" Тогда
		Результат.Вставить("Имя", "П000020022003_КодЛьготы");
		Результат.Вставить("Представление", НСтр("ru='Код налоговой льготы в виде освобождения от налогообложения (строка 220%1 раздела 2)'"));
		
	ИначеЕсли УсловныйКодПоказателя = "Р2Стр230" Тогда
		Результат.Вставить("Имя", "П000020023003");
		Результат.Вставить("Представление", НСтр("ru='Сумма налоговой льготы (руб.) (строка 230%1 раздела 2)'"));
		Результат.Вставить("ИзменяемаяРазмерность", Истина);
		
	ИначеЕсли УсловныйКодПоказателя = "Р2Стр240" Тогда
		Результат.Вставить("Имя", "П000020024003_КодЛьготы");
		Результат.Вставить("Представление", НСтр("ru='Код налоговой льготы в виде уменьшения суммы налога (строка 240%1 раздела 2)'"));
		
	ИначеЕсли УсловныйКодПоказателя = "Р2Стр240а" Тогда
		Результат.Вставить("Имя", "П000020024003_Процент");
		Результат.Вставить("Представление", НСтр("ru='Процент, уменьшающий исчисленную сумму налога (строка 240а%1 раздела 2)'"));
		
	ИначеЕсли УсловныйКодПоказателя = "Р2Стр250" Тогда
		Результат.Вставить("Имя", "П000020025003");
		Результат.Вставить("Представление", НСтр("ru='Сумма налоговой льготы (руб.) (строка 250%1 раздела 2)'"));
		Результат.Вставить("ИзменяемаяРазмерность", Истина);
		
	ИначеЕсли УсловныйКодПоказателя = "Р2Стр260" Тогда
		Результат.Вставить("Имя", "П000020026003_КодЛьготы");
		Результат.Вставить("Представление", НСтр("ru='Код налоговой льготы в виде снижения налоговой ставки (строка 260%1 раздела 2)'"));
		
	ИначеЕсли УсловныйКодПоказателя = "Р2Стр260а" Тогда
		Результат.Вставить("Имя", "П000020026003_Ставка");
		Результат.Вставить("Представление", НСтр("ru='Пониженная налоговая ставка (строка 260а%1 раздела 2)'"));
		
	ИначеЕсли УсловныйКодПоказателя = "Р2Стр270" Тогда
		Результат.Вставить("Имя", "П000020027003");
		Результат.Вставить("Представление", НСтр("ru='Сумма налоговой льготы (руб.) (строка 270%1 раздела 2)'"));
		Результат.Вставить("ИзменяемаяРазмерность", Истина);
		
	ИначеЕсли УсловныйКодПоказателя = "Р2Стр280" Тогда
		Результат.Вставить("Имя", "П000020028003");
		Результат.Вставить("Представление", НСтр("ru='Код налогового вычета (руб.) (строка 280%1 раздела 2)'"));
		
	ИначеЕсли УсловныйКодПоказателя = "Р2Стр290" Тогда
		Результат.Вставить("Имя", "П000020029003");
		Результат.Вставить("Представление", НСтр("ru='Сумма налогового вычета (руб.) (строка 290%1 раздела 2)'"));
		Результат.Вставить("ИзменяемаяРазмерность", Истина);
		
	ИначеЕсли УсловныйКодПоказателя = "Р2Стр300" Тогда
		Результат.Вставить("Имя", "П000020030003");
		Результат.Вставить("Представление", НСтр("ru='Исчисленная сумма налога, подлежащая уплате в бюджет за налоговый период (руб.) (строка 300%1 раздела 2)'"));
		Результат.Вставить("ИзменяемаяРазмерность", Истина);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ВставитьЗначениеПоказателя(ИсточникДанных, Показатель)
	
	Если ИсточникДанных.Свойство(Показатель.Имя) Тогда
		ЗначениеПоказателя = ИсточникДанных[Показатель.Имя];
	Иначе
		ЗначениеПоказателя = 0;
	КонецЕсли;
	
	Если Показатель.Свойство("ИзменяемаяРазмерность") И Показатель.ИзменяемаяРазмерность = Истина Тогда
		ЗначениеПоказателя = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, ЗначениеПоказателя);
	КонецЕсли;
	
	Если Показатель.Свойство("Формат") И ЗначениеЗаполнено(Показатель.Формат) Тогда
		ПредставлениеЗначения = Формат(ЗначениеПоказателя, Показатель.Формат);
	ИначеЕсли ТипЗнч(ЗначениеПоказателя) = Тип("Строка") Тогда
		ПредставлениеЗначения = ЗначениеПоказателя;
	ИначеЕсли ТипЗнч(ЗначениеПоказателя) = Тип("Дата") Тогда
		ПредставлениеЗначения = Формат(ЗначениеПоказателя, "ДЛФ=D");
	ИначеЕсли ТипЗнч(ЗначениеПоказателя) = Тип("Число") Тогда
		ПредставлениеЗначения = Формат(ЗначениеПоказателя, "ЧРД=,; ЧН=");
	Иначе
		ПредставлениеЗначения = Строка(ЗначениеПоказателя);
	КонецЕсли;
	
	Показатель.Вставить("Значение", ЗначениеПоказателя);
	Показатель.Вставить("ЗначениеСтр", ПредставлениеЗначения);
	
КонецПроцедуры

&НаСервере
Процедура ВставитьЗначениеМногострочногоПоказателя(ИсточникДанных, Показатель, НомерСтроки)
	
	НомерСтрокиСтр = ЧислоСтрЧГ0(НомерСтроки);
	ИмяПоказателя = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Показатель.Имя, НомерСтрокиСтр);
	
	Если ИсточникДанных.Свойство(ИмяПоказателя) Тогда
		ЗначениеПоказателя = ИсточникДанных[ИмяПоказателя];
	Иначе
		ЗначениеПоказателя = 0;
	КонецЕсли;
	
	Если Показатель.Свойство("ИзменяемаяРазмерность") И Показатель.ИзменяемаяРазмерность = Истина Тогда
		ЗначениеПоказателя = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтаФорма, ЗначениеПоказателя);
	КонецЕсли;
	
	Если Показатель.Свойство("Формат") И ЗначениеЗаполнено(Показатель.Формат) Тогда
		ПредставлениеЗначения = Формат(ЗначениеПоказателя, Показатель.Формат);
	ИначеЕсли ТипЗнч(ЗначениеПоказателя) = Тип("Строка") Тогда
		ПредставлениеЗначения = ЗначениеПоказателя;
	ИначеЕсли ТипЗнч(ЗначениеПоказателя) = Тип("Дата") Тогда
		ПредставлениеЗначения = Формат(ЗначениеПоказателя, "ДЛФ=D");
	ИначеЕсли ТипЗнч(ЗначениеПоказателя) = Тип("Число") Тогда
		ПредставлениеЗначения = Формат(ЗначениеПоказателя, "ЧРД=,; ЧН=");
	Иначе
		ПредставлениеЗначения = Строка(ЗначениеПоказателя);
	КонецЕсли;
	
	Показатель.Вставить("Значение", ЗначениеПоказателя);
	Показатель.Вставить("ЗначениеСтр", ПредставлениеЗначения);
	Показатель.Вставить("НомерСтроки", НомерСтрокиСтр);
	
КонецПроцедуры

&НаСервере
Процедура ЗарегистрироватьФормулуДляРасшифровки(ОписаниеКС);
	
	РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(СписокРасшифровкиФормулы, ОписаниеКС, , СчетчикФормулДляРасшифровок);
	
КонецПроцедуры

&НаСервере
Процедура ВнестиПоказательВРасшифровку(Показатель, ИмяСтраницы, НомерСтраницы = Неопределено)
	
	НомерСтраницыДляЗамены = ?(ЗначениеЗаполнено(НомерСтраницы), НомерСтраницы, "");
	ПредставлениеПоказателя = СтрокаСНомеромСтраницы(Показатель.Представление, НомерСтраницыДляЗамены);
	
	ЗначениеПоказателя = ?(ТипЗнч(Показатель.Значение) = Тип ("Дата"), Показатель.ЗначениеСтр, Показатель.Значение);
	
	Если Показатель.Свойство("НомерСтроки") Тогда
		ИмяПоказателя = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Показатель.Имя, Показатель.НомерСтроки);
	Иначе
		ИмяПоказателя = Показатель.Имя;
	КонецЕсли;
	
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(
		СписокРасшифровкиПоказателей,
		ИмяПоказателя,
		ПредставлениеПоказателя,
		ЗначениеПоказателя,
		"",
		СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка,
		ИмяСтраницы,
		Неопределено,
		НомерСтраницы,
		СчетчикФормулДляРасшифровок);
	
КонецПроцедуры

&НаСервере
Функция СтрокаСНомеромСтраницы (ИсходнаяСтрока, НомерСтраницы)
	
	ТекстСтраница = Нстр("ru='страница №'");
	
	Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ИсходнаяСтрока, ", " + ТекстСтраница + " " + НомерСтраницы);
	
КонецФункции

&НаСервере
Процедура ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, ЭтоОшибка, Описание = Неопределено, Нарушение = Неопределено)
	
	ТекстовоеПредставлениеФормулы = ?(ПустаяСтрока(ТекстФормулы), "", ТекстФормулы + ". ") + ОписаниеКС;
	СтруктураОшибок.Вставить("Описание" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), Описание));
	СтруктураОшибок.Вставить("Нарушение" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), Нарушение));
	СтруктураОшибок.Вставить("Расшифровка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), Расшифровка));
	СтруктураОшибок.Вставить("ЭтоОшибка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), ЭтоОшибка);
	СтруктураОшибок.Вставить("ТекстовоеПредставлениеФормулы" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), ТекстовоеПредставлениеФормулы));
	
КонецПроцедуры

&НаСервере
Функция ЧислоСтрЧГ0(ПреобразуемоеЧисло)
	
	Возврат Формат(ПреобразуемоеЧисло, "ЧН=; ЧГ=0");
	
КонецФункции

#КонецОбласти

&НаКлиенте
Процедура Подключаемый_ОткрытьПрисоединенныеФайлы(Команда)
	
	РегламентированнаяОтчетностьКлиент.СохранитьОтчетИОткрытьФормуПрисоединенныеФайлы(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийПриИзменении(Элемент)
	Модифицированность = Истина;
КонецПроцедуры

&НаСервере
Функция ОбъектОтчета(ЭтаФормаИмя) Экспорт
	
	Если мОбъектОтчета = Неопределено Тогда 
		мОбъектОтчета = РегламентированнаяОтчетностьВызовСервера.ОбъектОтчета(ЭтаФормаИмя);
	КонецЕсли;
	
	Возврат мОбъектОтчета;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИмяОтчета(ЭтаФормаИмя)
	Форма_Имя = СтрЗаменить(ЭтаФормаИмя, "Внешний", "");
	Возврат Сред(Лев(Форма_Имя, СтрНайти(Форма_Имя, ".Форма.") - 1), 7);
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИмяФормыОтчета(ЭтаФормаИмя)
	Возврат Сред(ЭтаФормаИмя, СтрНайти(ЭтаФормаИмя, ".Форма.") + 7);
КонецФункции