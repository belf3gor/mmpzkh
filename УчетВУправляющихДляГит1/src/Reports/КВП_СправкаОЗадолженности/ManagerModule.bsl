#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныеПроцедурыИФункции

// Процедура формирует отчет.
Процедура СформироватьОтчет(ПараметрыОтчета, АдресХранилища) Экспорт
	
	Если ПараметрыОтчета.Организация.Пустая() Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Поле организация обязательно для заполнения!");
		Возврат;
	КонецЕсли;
	
	Если НЕ ПараметрыОтчета.Свойство("ВариантОтбораУслуг") Тогда
		ПараметрыОтчета.Вставить("ВариантОтбораУслуг", "формировать отчет по всем услугам");
	КонецЕсли;
	
	ДокументРезультат = Новый ТабличныйДокумент;
	
	Макет = УПЖКХ_ТиповыеМетодыСервер.ПолучитьМакет("Отчет.КВП_СправкаОЗадолженности.ПФ_MXL_СправкаОЗадолженности");
	
	// Выбор варианта залоговка, при вызове отчета из обработки "Работа с должниками"
	// используется краткий заголовок, в остальных случаях - стандартный заголовок.
	Если ПараметрыОтчета.Свойство("ЗаголовокКраткий", Истина) Тогда
		ОбластьЗаголовок = Макет.ПолучитьОбласть("ЗаголовокКраткий");
	Иначе
		ОбластьЗаголовок = Макет.ПолучитьОбласть("Заголовок");
	КонецЕсли;
	
	ОбластьЗаголовок.Параметры.Заполнить(ПараметрыОтчета);
	
	ДокументРезультат.Вывести(ОбластьЗаголовок);
	
	ОбластьСодержимоеСправки = Макет.ПолучитьОбласть("СодержимоеСправки");
	
	Если ЗначениеЗаполнено(ПараметрыОтчета.Проживающий) Тогда
		
		ПараметрыОтчета.Вставить("ФИО", ПараметрыОтчета.Проживающий.Наименование);
		
		ОбластьСодержимоеСправки.Параметры.Заполнить(ПараметрыОтчета);
		
		Если ТипЗнч(ПараметрыОтчета.Проживающий) = Тип("СправочникСсылка.УПЖКХ_Жильцы") Тогда
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	&Проживающий,
			|	ЕстьNULL(УПЖКХ_СведенияОПроживающихСрезПоследних.Проживает, Ложь) КАК Проживает,
			|	ЕстьNULL(УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.Зарегистрирован, Ложь) Зарегистрирован
			|ИЗ
			|	РегистрСведений.УПЖКХ_СведенияОПроживающих.СрезПоследних(&Дата, Жилец = &Проживающий) КАК УПЖКХ_СведенияОПроживающихСрезПоследних
			|		ПОЛНОЕ СОЕДИНЕНИЕ РегистрСведений.УПЖКХ_СведенияОЗарегистрированных.СрезПоследних(&Дата, Жилец = &Проживающий) КАК УПЖКХ_СведенияОЗарегистрированныхСрезПоследних
			|		ПО УПЖКХ_СведенияОПроживающихСрезПоследних.Жилец = УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.Жилец";
			
			Запрос.УстановитьПараметр("Дата"       , ПараметрыОтчета.Дата);
			Запрос.УстановитьПараметр("Проживающий", ПараметрыОтчета.Проживающий);
			
			ВыборкаДетальныеЗаписи = Запрос.Выполнить().Выбрать();
			
			СостояниеПоАдресу = "по адресу:";
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				Если ВыборкаДетальныеЗаписи.Проживает Тогда
					СостояниеПоАдресу = "проживающему(ей) по адресу:";
				ИначеЕсли ВыборкаДетальныеЗаписи.Зарегистрирован Тогда
					СостояниеПоАдресу = "зарегистрированному(ой) по адресу:";
				КонецЕсли;
			КонецЦикла;
			
			ПараметрыОтчета.Вставить("СостояниеПоАдресу", СостояниеПоАдресу);
			
			ОбластьСодержимоеСправки.Параметры.Заполнить(ПараметрыОтчета);
			
		КонецЕсли;
		
		ПараметрыОтчета.Вставить("ПолныйАдрес", ПолучитьАдресПомещения(ПараметрыОтчета.Адрес.Владелец.Наименование, ПараметрыОтчета.Адрес));
		ПараметрыОтчета.Вставить("Чел",         ПолучитьКоличествоЗарегистрированных(ПараметрыОтчета.Проживающий.Владелец, ПараметрыОтчета.Дата));
		
		ОбластьСодержимоеСправки.Параметры.Заполнить(ПараметрыОтчета);
		
		ДокументРезультат.Вывести(ОбластьСодержимоеСправки);
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Дата",        НачалоДня(ПараметрыОтчета.Дата));
		Запрос.УстановитьПараметр("Организация", ПараметрыОтчета.Организация);
		Запрос.УстановитьПараметр("ЛицевойСчет", ПараметрыОтчета.ЛицевойСчет);
		
		Запрос.Текст = ПолучитьТекстЗапроса();
		
		СписокОтобранныхУслуг = Неопределено;
		
		Если ПараметрыОтчета.ВариантОтбораУслуг = "формировать отчет по всем услугам" Тогда
			УсловиеНаУслугу = "ИСТИНА";
			Попытка
				мСтруктураНастроекКапРемонта = УПЖКХ_ПараметрыУчетаСервер.ПолучитьНастройкиУчетаУслугКапремонта(ПараметрыОтчета.Организация, Истина);
			Исключение
				мСтруктураНастроекКапРемонта = Неопределено;
			КонецПопытки;
			Если ТипЗнч(мСтруктураНастроекКапРемонта) = Тип("Структура")
				И мСтруктураНастроекКапРемонта.НастройкиОпределены
				И мСтруктураНастроекКапРемонта.ВедетсяРаздельныйУчет Тогда
				СписокОтобранныхУслуг = мСтруктураНастроекКапРемонта.СписокУслуг;
			КонецЕсли;
		Иначе
			Если ПараметрыОтчета.ВариантОтбораУслуг = "формировать отчет по указанным услугам" Тогда
				УсловиеНаУслугу = "Услуга В ИЕРАРХИИ (&СписокУслуг)";
			ИначеЕсли ПараметрыОтчета.ВариантОтбораУслуг = "формировать отчет по услугам кап. ремонта" Тогда
				УсловиеНаУслугу = "Услуга В (&СписокУслуг)";
			ИначеЕсли ПараметрыОтчета.ВариантОтбораУслуг = "формировать отчет по услугам, отличным от кап. ремонта" Тогда
				УсловиеНаУслугу = "НЕ Услуга В (&СписокУслуг)";
			КонецЕсли;
			Запрос.УстановитьПараметр("СписокУслуг", ПараметрыОтчета.СписокУслуг);
			СписокОтобранныхУслуг = ПараметрыОтчета.СписокУслуг;
		КонецЕсли;
		
		Запрос.УстановитьПараметр("СписокОтобранныхУслуг", СписокОтобранныхУслуг);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ДопПараметр", УсловиеНаУслугу);
		
		ВыборкаЗадолженностей = Запрос.Выполнить().Выбрать();
		
		Задолженность   = "";
		ЗадолженностьКР = "";
		
		Если ВыборкаЗадолженностей.Следующий() Тогда
			
			ЗадолженностьОсновная       = ВыборкаЗадолженностей.СуммаОтобранныхУслуг;
			ЗадолженностьДополнительная = ВыборкаЗадолженностей.СуммаОстальныхУслуг;
			
			Если ПараметрыОтчета.ВариантОтбораУслуг = "формировать отчет по всем услугам" Тогда
				ОбластьЗадолженности = Макет.ПолучитьОбласть("ЗадолженностьОсновныхУслуг");
				
				Задолженность = ?(ЗадолженностьДополнительная <= 0,
				                  "отсутствует",
				                  "составляет " + Формат(ЗадолженностьДополнительная, "ЧГ=0; ЧДЦ=2") + " руб.");
				
				Если НЕ СписокОтобранныхУслуг = Неопределено Тогда
					ОбластьЗадолженностиКР = Макет.ПолучитьОбласть("ЗадолженностьУслугКапРемонта");
					
					ЗадолженностьКР = ?(ЗадолженностьОсновная <= 0, 
					                  "отсутствует",
					                  "составляет " + Формат(ЗадолженностьОсновная, "ЧГ=0; ЧДЦ=2") + " руб.");
					
				КонецЕсли;
				
			Иначе
				
				Если ПараметрыОтчета.ВариантОтбораУслуг = "формировать отчет по указанным услугам" Тогда
					ОбластьЗадолженности = Макет.ПолучитьОбласть("ЗадолженностьОсновныхУслуг");
				ИначеЕсли ПараметрыОтчета.ВариантОтбораУслуг = "формировать отчет по услугам, отличным от кап. ремонта" Тогда
					ОбластьЗадолженности = Макет.ПолучитьОбласть("ЗадолженностьОсновныхУслуг");
					ЗадолженностьОсновная = ЗадолженностьДополнительная;
				ИначеЕсли ПараметрыОтчета.ВариантОтбораУслуг = "формировать отчет по услугам кап. ремонта" Тогда
					ОбластьЗадолженности = Макет.ПолучитьОбласть("ЗадолженностьУслугКапРемонта");
				КонецЕсли;
				
				Задолженность = ?(ЗадолженностьОсновная <= 0, 
								"отсутствует",
								"составляет " + Формат(ЗадолженностьОсновная, "ЧГ=0; ЧДЦ=2") + " руб.");
				
			КонецЕсли;
			
		Иначе
			
			ОбластьЗадолженности = Макет.ПолучитьОбласть("ЗадолженностьОсновныхУслуг");
			Задолженность = "отсутствует";
			
		КонецЕсли;
		
		ПараметрыОтчета.Вставить("Задолженность", Задолженность);
		ОбластьЗадолженности.Параметры.Заполнить(ПараметрыОтчета);
		ДокументРезультат.Вывести(ОбластьЗадолженности);
		
		Если НЕ ПустаяСтрока(ЗадолженностьКР) Тогда
			ПараметрыОтчета.Вставить("Задолженность", ЗадолженностьКР);
			ОбластьЗадолженностиКР.Параметры.Заполнить(ПараметрыОтчета);
			ДокументРезультат.Вывести(ОбластьЗадолженностиКР);
		КонецЕсли;
		
	КонецЕсли;
	
	ОбластьПодвал = Макет.ПолучитьОбласть("Подвал");
	Руководители = УПЖКХ_ТиповыеМетодыВызовСервера.ОтветственныеЛица(ПараметрыОтчета.Организация, КонецДня(ПараметрыОтчета.Дата));
	
	ПараметрыОтчета.Вставить("Директор",        Руководители.РуководительДолжность);
	ПараметрыОтчета.Вставить("ФИОДиректора",    Руководители.РуководительПредставление);
	ПараметрыОтчета.Вставить("ФИОПользователя", Руководители.ГлавныйБухгалтерПредставление);
	
	ОбластьПодвал.Параметры.Заполнить(ПараметрыОтчета);
	
	ДокументРезультат.Вывести(ОбластьПодвал);
	
	ПоместитьВоВременноеХранилище(ДокументРезультат, АдресХранилища);
	
КонецПроцедуры

// Формирует и возвращает текст запроса.
//
// Возвращаемое значение:
//  Строка - текст запроса
//
Функция ПолучитьТекстЗапроса()
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.ЛицевойСчет КАК ЛицевойСчет,
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.Услуга КАК Услуга,
	|	СУММА(КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.СуммаНачисленияОстаток) КАК СуммаНачисленияОстаток
	|ПОМЕСТИТЬ ТаблицаЗадолженностиОбщая
	|ИЗ
	|	РегистрНакопления.КВП_ВзаиморасчетыПоЛицевымСчетам.Остатки(
	|			&Дата,
	|			Организация = &Организация
	|				И ЛицевойСчет = &ЛицевойСчет
	|				И &ДопПараметр) КАК КВП_ВзаиморасчетыПоЛицевымСчетамОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.ЛицевойСчет,
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.Услуга
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаЗадолженностиОбщая.ЛицевойСчет КАК ЛицевойСчет,
	|	СУММА(ВЫБОР
	|			КОГДА ТаблицаЗадолженностиОбщая.Услуга В (&СписокОтобранныхУслуг)
	|				ТОГДА ТаблицаЗадолженностиОбщая.СуммаНачисленияОстаток
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаОтобранныхУслуг,
	|	СУММА(ВЫБОР
	|			КОГДА НЕ ТаблицаЗадолженностиОбщая.Услуга В (&СписокОтобранныхУслуг)
	|				ТОГДА ТаблицаЗадолженностиОбщая.СуммаНачисленияОстаток
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаОстальныхУслуг
	|ИЗ
	|	ТаблицаЗадолженностиОбщая КАК ТаблицаЗадолженностиОбщая
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаЗадолженностиОбщая.ЛицевойСчет";
	
	Возврат ТекстЗапроса;
	
КонецФункции // ПолучитьТекстЗапроса

#КонецОбласти

#КонецЕсли