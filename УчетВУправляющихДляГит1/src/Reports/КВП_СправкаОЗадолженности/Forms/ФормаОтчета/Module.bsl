
#Область ИнициализацияПеременных

&НаКлиенте
Перем ПараметрыОбработчикаОжидания; // Хранит параметры обработчика ожидания.

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

&НаСервере
// Формирует список услуг по настройкам отбора отчета.
//
Функция СформироватьСписокУслугДляЗапроса()
	
	СписокУслуг = Новый СписокЗначений;
	
	Если Отчет.ВариантОтбораУслуг = "формировать отчет по всем услугам" Тогда
		// Оставляем пустой список.
	ИначеЕсли Отчет.ВариантОтбораУслуг = "формировать отчет по указанным услугам" Тогда
		
		Для Каждого ТекСтрока Из Отчет.ВыбранныеУслуги Цикл
			Если НЕ ТекСтрока.Услуга = ПредопределенноеЗначение("Справочник.КВП_Услуги.ПустаяСсылка") Тогда
				СписокУслуг.Добавить(ТекСтрока.Услуга);
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли Отчет.ВариантОтбораУслуг = "формировать отчет по услугам, отличным от кап. ремонта"
		ИЛИ Отчет.ВариантОтбораУслуг = "формировать отчет по услугам кап. ремонта" Тогда
		
		СписокУслуг = мСтруктураНастроекКапРемонта.СписокУслуг;
		
	КонецЕсли;
	
	Возврат СписокУслуг;
	
КонецФункции

&НаСервере
// Промежуточная функция на сервере, предназначенная для обращения к функции модуля менеждера 
// справочника "Настройки учета по услугам капитального ремонта".
//
Функция ПолучитьЭлементСправочникаПоОрганизацииНаСервере(Организация)
	
	Возврат Справочники.УПЖКХ_НастройкиУчетаКапремонта.ПолучитьЭлементСправочникаПоОрганизации(Организация);
	
КонецФункции // ПолучитьЭлементСправочникаПоОрганизацииНаСервере()

&НаСервере
// Возвращает значение реквизита объекта.
//
Функция ПолучитьЗначениеРеквизитаОбъектаНаСервере(СсылкаНаЭлемент, НаименованиеРеквизита)
	
	Возврат СсылкаНаЭлемент[НаименованиеРеквизита];
	
КонецФункции // ПолучитьЗначениеРеквизитаОбъектаНаСервере()

&НаСервере
// Промежуточная функция на сервере, предназначенная для обращения к функции модуля менеждера 
// справочника "Настройки учета по услугам капитального ремонта".
Процедура РедактироватьПометкуНаУдалениеПоСсылкеНаСервере(СсылкаНаЭлемент)
	
	Справочники.УПЖКХ_НастройкиУчетаКапремонта.РедактироватьПометкуНаУдалениеПоСсылке(СсылкаНаЭлемент);
	
КонецПроцедуры // РедактироватьПометкуНаУдалениеПоСсылкеНаСервере()

&НаСервере
// Процедура получает сведения о настройках кап. ремонта по текущей организации
// и управляет текстом гиперссылки открытия настроек кап. ремонта.
Функция ОбновитьРеквизитыКапРемонта()
	
	ЗаполнитьРеквизитыОтчетаПоКапремонту();
	
	мМассивВариантовОтбораУслуг = Новый Массив;
	мМассивВариантовОтбораУслуг.Добавить("формировать отчет по всем услугам");
	мМассивВариантовОтбораУслуг.Добавить("формировать отчет по указанным услугам");
	
	Если ТипЗнч(мСтруктураНастроекКапРемонта) = Тип("Структура")
	   И мСтруктураНастроекКапРемонта.НастройкиОпределены
	   И мСтруктураНастроекКапРемонта.ВедетсяРаздельныйУчет Тогда
		
		СписокУслугКР = мСтруктураНастроекКапРемонта.СписокУслуг;
		СтрокаУслугКР = "";
		Для Каждого ТекЭлемент Из СписокУслугКР Цикл
			СтрокаУслугКР = СтрокаУслугКР + ?(Не ПустаяСтрока(СтрокаУслугКР), ",", "") + """" + ТекЭлемент.Значение + """";
		КонецЦикла;
		
		Если Не ПустаяСтрока(СтрокаУслугКР) Тогда
			СтрокаУслугКР = " (" +?(СписокУслугКР.Количество() > 1, "услуги: ", "услуга: ") + СтрокаУслугКР + ")";
		КонецЕсли;
		
		Элементы.КнопкаНастройкаВеденияКР.Заголовок = "Ведется раздельный учет по услугам капитального ремонта" + СтрокаУслугКР;
		
		мМассивВариантовОтбораУслуг.Добавить("формировать отчет по услугам, отличным от кап. ремонта");
		мМассивВариантовОтбораУслуг.Добавить("формировать отчет по услугам кап. ремонта");
		
	Иначе
		
		Элементы.КнопкаНастройкаВеденияКР.Заголовок = "Не ведется раздельный учет по услугам капитального ремонта";
		
		Если Отчет.ВариантОтбораУслуг = "формировать отчет по услугам, отличным от кап. ремонта"
			ИЛИ Отчет.ВариантОтбораУслуг = "формировать отчет по услугам кап. ремонта" Тогда
			Отчет.ВариантОтбораУслуг = "формировать отчет по всем услугам";
		КонецЕсли;
		
	КонецЕсли;
	
	Элементы.ВариантОтбораУслуг.СписокВыбора.ЗагрузитьЗначения(мМассивВариантовОтбораУслуг);
	
КонецФункции // ОбновитьРеквизитыКапРемонта()

&НаСервере
// Процедура предназначена для заполнения сведения о ведение раздельного учета по капремонту в организации.
//
Процедура ЗаполнитьРеквизитыОтчетаПоКапремонту()
	
	Попытка
		
		мСтруктураНастроекКапРемонта = УПЖКХ_ПараметрыУчетаСервер.ПолучитьНастройкиУчетаУслугКапремонта(Отчет.Организация, Истина);
		
	Исключение
		ВызватьИсключение УПЖКХ_ОбщегоНазначенияКлиентСервер.ПолучитьОписаниеОшибки(УПЖКХ_ОбщегоНазначенияКлиентСервер.ПодготовитьТекстОбОшибкеДляПользователя("<error>Не удалось получить настройки учета капитального ремонта. Пожалуйста, проверьте, корректно ли заданы настройки учета капитального ремонта.", ОписаниеОшибки()));
		Возврат;
	КонецПопытки;
	
КонецПроцедуры // ЗаполнитьРеквизитыОтчетаПоКапремонту()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
// Обработчик события "ПриСозданииНаСервере" формы.
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Установка настроек печати по умолчанию. Если настройки были изменены, они будут загружены при формировании отчета.
	Результат.АвтоМасштаб = Истина;
	
	Если НЕ ЗначениеЗаполнено(Отчет.Дата) Тогда
		Отчет.Дата = НачалоМесяца(ТекущаяДатаСеанса());
	КонецЕсли;
	
	НомерСправки = УПЖКХ_ТиповыеМетодыВызовСервера.ХранилищеОбщихНастроекЗагрузить("СправкаОЗадолженности_Номер");
	
	Отчет.Номер = Прав("0000000000" + Формат(НомерСправки, "ЧГ=0"), 10);
	Отчет.Проживающий = "";
	
	// Реклама
	ОТР_РекламаКлиентСервер.ПриСозданииНаСервере(ЭтаФорма);
	// Конец Реклама
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриОткрытии" формы.
Процедура ПриОткрытии(Отказ)
	
	ОбновитьРеквизитыКапРемонта();
	
	УправлениеФормой(ЭтаФорма);
	
	ОбновитьТекстЗаголовка();
	
	Если ТипЗнч(Отчет.Проживающий) = Тип("СправочникСсылка.УПЖКХ_Жильцы") Тогда
		ЛицевойСчетПроживающего = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(Отчет.Проживающий, "Владелец");
	ИначеЕсли ТипЗнч(Отчет.Проживающий) = Тип("СправочникСсылка.Контрагенты") Тогда
		ЛицевойСчетПроживающего = ПолучитьЛицевойСчетОтветственногоСобственника(Отчет.Проживающий);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПередЗакрытием" формы.
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ЗавершениеРаботы Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	УПЖКХ_ТиповыеМетодыВызовСервера.ХранилищеОбщихНастроекСохранить("СправкаОЗадолженности_Номер",, Число(Отчет.Номер)+1);
	
	ОтменитьВыполнениеЗаданияНаСервере();
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ОбработкаОповещения" формы.
//
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ЗаписаныНастройкиУчетаКапремонта"
		И Параметр = Отчет.Организация Тогда
		ОбновитьРеквизитыКапРемонта();
		УправлениеФормой(ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
// Процедура возникает при сохранении настроек на сервере.
Процедура ПриСохраненииПользовательскихНастроекНаСервере(Настройки)
	
	УПЖКХ_ТиповыеМетодыВызовСервера.ПриСохраненииПользовательскихНастроекНаСервере(ЭтаФорма, Настройки);
	
КонецПроцедуры

&НаСервере
// Процедура возникает при загрузке настроек на сервере.
Процедура ПриЗагрузкеПользовательскихНастроекНаСервере(Настройки)
	
	УПЖКХ_ТиповыеМетодыВызовСервера.ПриЗагрузкеПользовательскихНастроекНаСервере(ЭтаФорма, Настройки);
	
	ОбновитьРеквизитыКапРемонта();
	
	УправлениеФормой(ЭтаФорма);
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
// Процедура возникает при загрузке варианта на сервере.
Процедура ПриЗагрузкеВариантаНаСервере(Настройки)
	
	УПЖКХ_ТиповыеМетодыВызовСервера.УстановитьНастройкиПоУмолчанию(ЭтаФорма);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

#Область Реклама

&НаКлиенте
// Процедура - обработчик нажатия на картинку баннера.
Процедура Подключаемый_РекламаОткрытьСтраницуСайта(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОТР_РекламаКлиент.Подключаемый_РекламаОткрытьСтраницуСайта(ЭтаФорма);
	
КонецПроцедуры // Подключаемый_РекламаОткрытьСтраницуСайта()

&НаКлиенте
// Процедура - обработчик нажатия на картинку закрытия баннера.
Процедура Подключаемый_РекламаКартникаЗакрытияБаннераНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;

	ОТР_РекламаКлиент.Подключаемый_РекламаКартникаЗакрытияБаннераНажатие(ЭтаФорма);
	
КонецПроцедуры // Подключаемый_РекламаОткрытьСтраницуСайта()

#КонецОбласти // Реклама

&НаКлиенте
// Обработчик события "ПриИзменении" поля "Дата".
Процедура ДатаПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля "Организация".
Процедура ОрганизацияПриИзменении(Элемент)
	
	ОбновитьРеквизитыКапРемонта();
	
	УправлениеФормой(ЭтаФорма);
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля "Номер".
&НаКлиенте
Процедура НомерПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля "Проживающий".
Процедура ПроживающийПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "НачалоВыбора" поля ввода получателя справки.
Процедура ПроживающийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	// Проверять, является ли владелец жильцом.
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ВыбранТипЖильцы",      ЗначениеЗаполнено(Отчет.Проживающий) И ТипЗнч(Отчет.Проживающий) = Тип("СправочникСсылка.УПЖКХ_Жильцы"));
	СтруктураПараметров.Вставить("ВыбранТипКонтрагенты", ЗначениеЗаполнено(Отчет.Проживающий) И ТипЗнч(Отчет.Проживающий) = Тип("СправочникСсылка.Контрагенты"));
	
	ОбработатьВыборПроживающего(СтруктураПараметров, СтандартнаяОбработка);
	
КонецПроцедуры // ПроживающийНачалоВыбора()

&НаКлиенте
// Обработчик результата выбора жильца, вызванного в процедуре "ПроживающийНачалоВыбора()".
Процедура ОбработатьРезультатВыбораЖильцаПроживающийНачалоВыбора(ВыбранноеЗначение, ДопПараметры) Экспорт
	
	Если ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		
		предЗначение = ДопПараметры.предЗначение;
		
		Отчет.Проживающий = ?(ЗначениеЗаполнено(ВыбранноеЗначение), ВыбранноеЗначение, предЗначение);
		
		Если ТипЗнч(Отчет.Проживающий) = Тип("СправочникСсылка.УПЖКХ_Жильцы") Тогда
			ТекЛицевойСчет = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(ВыбранноеЗначение, "Владелец");
		ИначеЕсли ТипЗнч(Отчет.Проживающий) = Тип("СправочникСсылка.Контрагенты") Тогда
			ТекЛицевойСчет = ПолучитьЛицевойСчетОтветственногоСобственника(ВыбранноеЗначение);
		КонецЕсли;
		
		ПолеПомещение = ?(ЗначениеЗаполнено(ВыбранноеЗначение), УПЖКХ_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(ТекЛицевойСчет, "Адрес"), ПолеПомещение);
		ПолеЗдание    = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(ПолеПомещение, "Владелец");
		
		Отчет.ЛицевойСчет       = ?(ЗначениеЗаполнено(ВыбранноеЗначение), ТекЛицевойСчет, Отчет.ЛицевойСчет);
		ЛицевойСчетПроживающего = Отчет.ЛицевойСчет;
		
		Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ОбработатьРезультатВыбораЖильцаПроживающийНачалоВыбора()

&НаКлиенте
// Обработчик события "ОбработкаВыбора" поля "Проживающий".
Процедура ПроживающийОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("ВыбранТипЖильцы",      ВыбранноеЗначение = Тип("СправочникСсылка.УПЖКХ_Жильцы"));
		СтруктураПараметров.Вставить("ВыбранТипКонтрагенты", ВыбранноеЗначение = Тип("СправочникСсылка.Контрагенты"));
		
		СтруктураПараметров.Вставить("ПроживающийВыбран",    НЕ СтруктураПараметров.ВыбранТипЖильцы И НЕ СтруктураПараметров.ВыбранТипКонтрагенты И ЗначениеЗаполнено(ВыбранноеЗначение));
		СтруктураПараметров.Вставить("ВыбранноеЗначение",    ВыбранноеЗначение);
		
		ОбработатьВыборПроживающего(СтруктураПараметров, СтандартнаяОбработка);
		
	КонецЕсли;
	
КонецПроцедуры // ПроживающийОбработкаВыбора()

&НаКлиенте
// Обработчик события "ОбработкаВыбора" поля проживающий.
Процедура ОбработатьВыборПроживающего(СтруктураПараметров, СтандартнаяОбработка)
	
	ВыбранТипЖильцы      = ?(СтруктураПараметров.Свойство("ВыбранТипЖильцы"), СтруктураПараметров.ВыбранТипЖильцы, Ложь);
	ВыбранТипКонтрагенты = ?(СтруктураПараметров.Свойство("ВыбранТипКонтрагенты"), СтруктураПараметров.ВыбранТипКонтрагенты, Ложь);
	
	ПроживающийВыбран    = ?(СтруктураПараметров.Свойство("ПроживающийВыбран"), СтруктураПараметров.ПроживающийВыбран, Ложь);
	
	Если ПроживающийВыбран Тогда
		
		ДопПараметры = Новый Структура("предЗначение", "");
		
		ОбработатьРезультатВыбораЖильцаПроживающийНачалоВыбора(СтруктураПараметров.ВыбранноеЗначение, ДопПараметры);
		
		Возврат;
		
	КонецЕсли;
	
	Если ВыбранТипЖильцы ИЛИ ВыбранТипКонтрагенты Тогда
		
		Если ВыбранТипЖильцы Тогда
			
			ОтборПоЛС        = ФлагИспользоватьОтборПоЛицевомуСчету И ЗначениеЗаполнено(Отчет.ЛицевойСчет);
			ОтборПоПомещению = ФлагИспользоватьОтборПоПомещению И ЗначениеЗаполнено(ПолеПомещение);
			ОтборПоЗданию    = ФлагИспользоватьОтборПоЗданию И ЗначениеЗаполнено(ПолеЗдание);
			
			СтандартнаяОбработка = Ложь;
			
			Если ОтборПоЛС ИЛИ ОтборПоПомещению ИЛИ ОтборПоЗданию Тогда
				
				предЗначение = Отчет.Проживающий;
				
				Если ОтборПоЛС Тогда
					
					ФормаВыбора = ПолучитьФорму("Справочник.УПЖКХ_Жильцы.ФормаВыбора");
					
					УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьЭлементОтбора(ФормаВыбора.Список.Отбор, "Владелец", Отчет.ЛицевойСчет);
					
				ИначеЕсли ОтборПоПомещению Тогда
					
					СтруктураОтбора = Новый Структура("Владелец", Новый Структура("Адрес", ПолеПомещение));
					
					ФормаВыбора = ПолучитьФорму("Справочник.УПЖКХ_Жильцы.ФормаВыбора", Новый Структура("Отбор", СтруктураОтбора));
					
				Иначе
					
					СтруктураОтбора = Новый Структура("Владелец", Новый Структура("Адрес", Новый Структура("Владелец", ПолеЗдание)));
					
					ФормаВыбора = ПолучитьФорму("Справочник.УПЖКХ_Жильцы.ФормаВыбора", Новый Структура("Отбор", СтруктураОтбора));
					
				КонецЕсли;
				
			Иначе
				
				ФормаВыбора = ПолучитьФорму("Справочник.УПЖКХ_Жильцы.ФормаВыбора");
				
			КонецЕсли;
			
			ДопПараметры = Новый Структура("предЗначение", предЗначение);
			
			ФормаВыбора.ОписаниеОповещенияОзакрытии = Новый ОписаниеОповещения("ОбработатьРезультатВыбораЖильцаПроживающийНачалоВыбора", ЭтаФорма, ДопПараметры);
			ФормаВыбора.РежимОткрытияОкна           = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
			ФормаВыбора.Открыть();
			
		ИначеЕсли ВыбранТипКонтрагенты Тогда
			
			предЗначение = Отчет.Проживающий;
			
			СтандартнаяОбработка = Ложь;
			
			МассивКонтрагентов = ПолучитьМассивКонтрагентовПоОтбору();
			
			ФормаВыбора = ПолучитьФорму("Справочник.Контрагенты.ФормаВыбора");
			
			УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьЭлементОтбора(ФормаВыбора.Список.Отбор, "Ссылка", МассивКонтрагентов, ВидСравненияКомпоновкиДанных.ВСписке);
			
			ДопПараметры = Новый Структура("предЗначение", предЗначение);
			
			ФормаВыбора.ОписаниеОповещенияОзакрытии = Новый ОписаниеОповещения("ОбработатьРезультатВыбораЖильцаПроживающийНачалоВыбора", ЭтаФорма, ДопПараметры);
			ФормаВыбора.РежимОткрытияОкна           = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
			ФормаВыбора.Открыть();
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ОбработкаВыбора" поля здания.
Процедура ПолеЗданиеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ОбновитьСведенияОЗдании(ВыбранноеЗначение);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "НачалоВыбора" поля здания.
Процедура ПолеЗданиеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ФормаВыбора = ПолучитьФорму("Справочник.КВП_Здания.ФормаВыбора");
	
	УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьЭлементОтбора(ФормаВыбора.Список.Отбор, "ЭтоГруппа", Ложь);
	
	ФормаВыбора.ОписаниеОповещенияОзакрытии = Новый ОписаниеОповещения("ОбработатьРезультатВыбораЗданияНачалоВыбора", ЭтаФорма);
	ФормаВыбора.РежимОткрытияОкна           = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	ФормаВыбора.Открыть();
	
КонецПроцедуры

&НаКлиенте
// Обработчик результата выбора здания, вызванного в процедуре "ПолеЗданиеНачалоВыбора()".
Процедура ОбработатьРезультатВыбораЗданияНачалоВыбора(ВыбранноеЗначение, ДопПараметры) Экспорт
	
	ОбновитьСведенияОЗдании(ВыбранноеЗначение);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" флага использования в отборе здания.
Процедура ФлагИспользоватьОтборПоЗданиюПриИзменении(Элемент)
	
	Если ФлагИспользоватьОтборПоЗданию И НЕ ПроверитьЯвляетсяЛиПроживающийЖильцомЗдания() Тогда
		УстановитьПустуюСсылкуПроживающему();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" флага использования в отборе помещения.
Процедура ФлагИспользоватьОтборПоПомещениюПриИзменении(Элемент)
	
	Если ФлагИспользоватьОтборПоПомещению И НЕ ПроверитьЯвляетсяЛиПроживающийЖильцомПомещения() Тогда
		
		УстановитьПустуюСсылкуПроживающему();
		
		СписокЛС = ПолучитьСписокЛицевыхСчетов(ПолеПомещение);
		Если СписокЛС.Количество() > 0 Тогда
			Отчет.ЛицевойСчет = СписокЛС[0];
			ЗаполнитьПроживающего(Отчет.ЛицевойСчет);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" флага использования в отборе лицевого счета.
Процедура ФлагИспользоватьОтборПоЛицевомуСчетуПриИзменении(Элемент)
	
	Если ФлагИспользоватьОтборПоЛицевомуСчету Тогда
		ЗаполнитьПроживающего(Отчет.ЛицевойСчет);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "Очистка" поля "Проживающий".
Процедура ПроживающийОчистка(Элемент, СтандартнаяОбработка)
	
	Элемент.ВыбиратьТип = Истина;
	
КонецПроцедуры // ПроживающийОчистка()

&НаКлиенте
// Обработчик события "НачалоВыбора" поля "ЛицевойСчет".
Процедура ЛицевойСчетНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СтруктураОтбора = Новый Структура;
	
	Если ФлагИспользоватьОтборПоПомещению И ЗначениеЗаполнено(ПолеПомещение) Тогда
		
		СтруктураОтбора.Вставить("Адрес", ПолеПомещение);
		
	ИначеЕсли ФлагИспользоватьОтборПоЗданию И ЗначениеЗаполнено(ПолеЗдание) Тогда
		
		СтруктураОтбора.Вставить("Адрес", Новый Структура("Владелец", ПолеЗдание));
		
	КонецЕсли;
	
	ФормаВыбора = ПолучитьФорму("Справочник.КВП_ЛицевыеСчета.ФормаВыбора", Новый Структура("Отбор", СтруктураОтбора));
	ФормаВыбора.Элементы.Список.Отображение = ОтображениеТаблицы.Список;
	ФормаВыбора.ОписаниеОповещенияОзакрытии = Новый ОписаниеОповещения("ОбработатьРезультатВыбораЛСЛицевойСчетНачалоВыбора", ЭтаФорма);
	ФормаВыбора.РежимОткрытияОкна           = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	ФормаВыбора.Открыть();
	
КонецПроцедуры // ЛицевойСчетНачалоВыбора()

&НаКлиенте
// Обработчик результата выбора л/с, вызванного в процедуре "ЛицевойСчетНачалоВыбора()".
Процедура ОбработатьРезультатВыбораЛСЛицевойСчетНачалоВыбора(ВыбранноеЗначение, ДопПараметры) Экспорт
	
	ОбновитьСведенияОЛС(ВыбранноеЗначение);
	
КонецПроцедуры // ОбработатьРезультатВыбораЛСЛицевойСчетНачалоВыбора()

&НаКлиенте
// Обработчик события "ОбработкаВыбора" поля "ЛицевойСчет".
Процедура ЛицевойСчетОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ОбновитьСведенияОЛС(ВыбранноеЗначение);
	
КонецПроцедуры // ЛицевойСчетОбработкаВыбора()

&НаКлиенте
// Обработчик события "НачалоВыбора" поля "ПолеПомещение".
Процедура ПолеПомещениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	предАдрес            = ПолеПомещение;
	
	Если ФлагИспользоватьОтборПоЛицевомуСчету И ЗначениеЗаполнено(Отчет.ЛицевойСчет) Тогда
		
		ТекАдрес = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(Отчет.ЛицевойСчет, "Адрес");
		ТекЗдание = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(ТекАдрес, "Владелец");
		
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("Владелец", ТекЗдание);
		
		ФормаВыбора = ПолучитьФорму("Справочник.УПЖКХ_Помещения.ФормаВыбора", Новый Структура("Отбор", СтруктураОтбора));
		
		УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьЭлементОтбора(ФормаВыбора.Список.Отбор, "Наименование", УПЖКХ_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(ТекАдрес, "Наименование"));
		
	ИначеЕсли ФлагИспользоватьОтборПоЗданию И ЗначениеЗаполнено(ПолеЗдание) Тогда
		
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("Владелец", ПолеЗдание);
		
		ФормаВыбора = ПолучитьФорму("Справочник.УПЖКХ_Помещения.ФормаВыбора", Новый Структура("Отбор", СтруктураОтбора));
		
	Иначе
		
		ФормаВыбора = ПолучитьФорму("Справочник.УПЖКХ_Помещения.ФормаВыбора");
		
	КонецЕсли;
	
	ДопПараметры = Новый Структура("предАдрес", предАдрес);
	
	ФормаВыбора.ОписаниеОповещенияОзакрытии = Новый ОписаниеОповещения("ОбработатьРезультатВыбораПомещенияПолеПомещениеНачалоВыбора", ЭтаФорма, ДопПараметры);
	ФормаВыбора.РежимОткрытияОкна           = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	
	ФормаВыбора.Открыть();
	
КонецПроцедуры // ПолеПомещениеНачалоВыбора()

&НаКлиенте
// Обработчик события "ОбработкаВыбора" поля помещения.
Процедура ПолеПомещениеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ОбновитьСведенияОПомещении(ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
// Обработчик результата выбора помещения, вызванного в процедуре "ПолеПомещениеНачалоВыбора()".
Процедура ОбработатьРезультатВыбораПомещенияПолеПомещениеНачалоВыбора(ВыбранноеЗначение, ДопПараметры) Экспорт
	
	ОбновитьСведенияОПомещении(ВыбранноеЗначение);
	
КонецПроцедуры // ОбработатьРезультатВыыбораПомещенияПолеПомещениеНачалоВыбора()

&НаКлиенте
// Обработчик события "ПриИзменении" поля "Вариант отбора услуг".
Процедура ВариантОтбораУслугПриИзменении(Элемент)
	
	УправлениеФормой(ЭтаФорма);
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
КонецПроцедуры // ВариантОтбораУслугПриИзменении()

&НаКлиенте
// Обработчик события команды "Команда показать настройки ведения КР".
Процедура КомандаПоказатьНастройкиВеденияКР(Команда)
	
	СсылкаНаЭлемент = ПолучитьЭлементСправочникаПоОрганизацииНаСервере(Отчет.Организация);
	Если Не мСтруктураНастроекКапРемонта.НастройкиОпределены
		И СсылкаНаЭлемент = Неопределено Тогда
		ОткрытьФорму("Справочник.УПЖКХ_НастройкиУчетаКапремонта.ФормаОбъекта", Новый Структура("Владелец", Отчет.Организация), ЭтаФорма);
	Иначе
		Если ПолучитьЗначениеРеквизитаОбъектаНаСервере(СсылкаНаЭлемент, "ПометкаУдаления") Тогда
			Оповещение = Новый ОписаниеОповещения("КнопкаНастройкаВеденияКРНажатиеЗавершение", ЭтотОбъект, СсылкаНаЭлемент);
			
			ТекстВопроса = "Для текущей организации действие настройки учета по капитальному ремонту отменено."
						 + Символы.ПС + "Перед открытием формы элемента настройки необходимо включить. Продолжить?";
			
			ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
		Иначе
			ОткрытьФорму("Справочник.УПЖКХ_НастройкиУчетаКапремонта.Форма.ФормаЭлемента", Новый Структура("Ключ", СсылкаНаЭлемент), ЭтаФорма);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // КомандаПоказатьНастройкиВеденияКР()

&НаКлиенте
// Процедура - обработчик результата опроса команды "Команда показать настройки ведения КР".
//
Процедура КнопкаНастройкаВеденияКРНажатиеЗавершение(Ответ, ДополнительныйПараметр) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		РедактироватьПометкуНаУдалениеПоСсылкеНаСервере(ДополнительныйПараметр);
		ОткрытьФорму("Справочник.УПЖКХ_НастройкиУчетаКапремонта.Форма.ФормаЭлемента", Новый Структура("Ключ", ДополнительныйПараметр), ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры // КнопкаНастройкаВеденияКРНажатиеЗавершение()


/////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ПОЛЯ РЕЗУЛЬТАТА

&НаКлиенте
// Обработчик события "ОбработкаРасшифровки" поля "Результат".
Процедура РезультатОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	
	УПЖКХ_ТиповыеМетодыКлиент.ОбработкаРасшифровкиСтандартногоОтчета(ЭтаФорма, Элемент, Расшифровка, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ОбработкаДополнительнойРасшифровки" поля "Результат".
Процедура РезультатОбработкаДополнительнойРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	
	// Не будем обрабатывать нажатие на правую кнопку мыши.
	// Покажем стандартное контекстное меню ячейки табличного документа.
	Расшифровка = Неопределено;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
// Обработчик команды "СформироватьОтчет".
Процедура СформироватьОтчет(Команда)
	
	ОчиститьСообщения();
	
	ОтключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания");
	
	РезультатВыполнения = СформироватьОтчетНаСервере();
	Если Не РезультатВыполнения.ЗаданиеВыполнено Тогда
		УПЖКХ_ТиповыеМетодыКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
		УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "ФормированиеОтчета");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик команды "ПанельНастроек".
Процедура ПанельНастроек(Команда)
	
	Элементы.ГруппаПанельНастроек.Видимость = Не Элементы.ГруппаПанельНастроек.Видимость;
	УПЖКХ_ТиповыеМетодыКлиентСервер.ИзменитьЗаголовокКнопкиПанельНастроек(Элементы.ПанельНастроек, Элементы.ГруппаПанельНастроек.Видимость);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаСервереБезКонтекста
// Процедура проверяет, выполнено ли задание.
Функция ЗаданиеВыполнено(ИдентификаторЗадания)
	
	Возврат УПЖКХ_ТиповыеМетодыСервер.ЗаданиеВыполнено(ИдентификаторЗадания);
	
КонецФункции

&НаСервере
// Процедура отменяет выполнение задания.
Процедура ОтменитьВыполнениеЗаданияНаСервере()
	
	УПЖКХ_ТиповыеМетодыСервер.ОтменитьВыполнениеЗадания(ИдентификаторЗадания);
	
КонецПроцедуры

&НаСервере
// Процедура готовит параметры на сервере.
Функция ПодготовитьПараметрыОтчетаНаСервере()
	
	ПараметрыОтчета = Новый Структура;
	
	ПараметрыОтчета.Вставить("Дата"              , Отчет.Дата);
	ПараметрыОтчета.Вставить("Номер"             , Отчет.Номер);
	ПараметрыОтчета.Вставить("Организация"       , Отчет.Организация);
	ПараметрыОтчета.Вставить("Проживающий"       , Отчет.Проживающий);
	ПараметрыОтчета.Вставить("ВариантОтбораУслуг", Отчет.ВариантОтбораУслуг);
	ПараметрыОтчета.Вставить("СписокУслуг"       , СформироватьСписокУслугДляЗапроса());
	ПараметрыОтчета.Вставить("Адрес"             , ЛицевойСчетПроживающего.Адрес);
	ПараметрыОтчета.Вставить("ЛицевойСчет"       , ЛицевойСчетПроживающего);
	
	Возврат ПараметрыОтчета;
	
КонецФункции

&НаКлиенте
// Процедура обновляет текст заголовка.
Процедура ОбновитьТекстЗаголовка()
	
	ЗаголовокОтчета = "Справка о задолженности";
	
	ЭтаФорма.Заголовок = ЗаголовокОтчета;
	
КонецПроцедуры

&НаСервере
// Функция формирует отчет на сервере.
Функция СформироватьОтчетНаСервере() Экспорт
	
	Если Не ПроверитьЗаполнение() Тогда 
		Возврат Новый Структура("ЗаданиеВыполнено", Истина);
	КонецЕсли;
	
	ИБФайловая = УПЖКХ_ТиповыеМетодыСервер.ИнформационнаяБазаФайловая();
	
	УПЖКХ_ТиповыеМетодыСервер.ОтменитьВыполнениеЗадания(ИдентификаторЗадания);
	
	ИдентификаторЗадания = Неопределено;
	
	УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеИспользовать");
	
	ПараметрыОтчета = ПодготовитьПараметрыОтчетаНаСервере();
	
	Если ИБФайловая Тогда
		АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
		Отчеты.КВП_СправкаОЗадолженности.СформироватьОтчет(ПараметрыОтчета, АдресХранилища);
		РезультатВыполнения = Новый Структура("ЗаданиеВыполнено", Истина);
	Иначе
		РезультатВыполнения = УПЖКХ_ТиповыеМетодыСервер.ЗапуститьВыполнениеВФоне(
			УникальныйИдентификатор,
			"Отчеты.КВП_СправкаОЗадолженности.СформироватьОтчет",
			ПараметрыОтчета,
			УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьНаименованиеЗаданияВыполненияОтчета(ЭтаФорма));
			
		АдресХранилища       = РезультатВыполнения.АдресХранилища;
		ИдентификаторЗадания = РезультатВыполнения.ИдентификаторЗадания;
	КонецЕсли;
	
	Если РезультатВыполнения.ЗаданиеВыполнено Тогда
		ЗагрузитьПодготовленныеДанныеНаСервере();
	КонецЕсли;
	
	Возврат РезультатВыполнения;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
// Управляет видимостью элементов формы.
Процедура УправлениеФормой(Форма)
	
	Отчет    = Форма.Отчет;
	Элементы = Форма.Элементы;
	
	// Если вариант отбора услуг не заполнен, то по умолчанию устанавливаем "формировать отчет по всем услугам".
	Если ПустаяСтрока(Отчет.ВариантОтбораУслуг) Тогда
		Отчет.ВариантОтбораУслуг = "формировать отчет по всем услугам";
	КонецЕсли;
	
	Элементы.ГруппаОтборПоУслугам.Видимость = Отчет.ВариантОтбораУслуг = "формировать отчет по указанным услугам";
	
	Если Элементы.ГруппаОтборПоУслугам.Видимость И НЕ Элементы.ГруппаПанельНастроек.Видимость Тогда
		Элементы.СтраницыПанельНастроек.ТекущаяСтраница = Элементы.ГруппаОтборПоУслугам;
		Элементы.ГруппаПанельНастроек.Видимость = Не Элементы.ГруппаПанельНастроек.Видимость;
	КонецЕсли;
	
	Элементы.ПанельНастроек.Видимость = Элементы.ГруппаОтборПоУслугам.Видимость;
	
	УПЖКХ_ТиповыеМетодыКлиентСервер.ИзменитьЗаголовокКнопкиПанельНастроек(Элементы.ПанельНастроек, Элементы.ГруппаПанельНастроек.Видимость);
	
КонецПроцедуры

&НаСервере
// Процедура загружает подготовленные данные на сервере.
Процедура ЗагрузитьПодготовленныеДанныеНаСервере()
	
	Результат = ПолучитьИзВременногоХранилища(АдресХранилища);
	
	УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеИспользовать");
	
КонецПроцедуры

&НаКлиенте
// Процедуры проверяет выполнение задания.
Процедура Подключаемый_ПроверитьВыполнениеЗадания()
	
	Попытка
		Если ЗаданиеВыполнено(ИдентификаторЗадания) Тогда 
			ЗагрузитьПодготовленныеДанныеНаСервере();
			УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеИспользовать");
		Иначе
			УПЖКХ_ТиповыеМетодыКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
			ПодключитьОбработчикОжидания(
				"Подключаемый_ПроверитьВыполнениеЗадания",
				ПараметрыОбработчикаОжидания.ТекущийИнтервал,
				Истина);
		КонецЕсли;
	Исключение
		УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеИспользовать");
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
// Заполняет поле Проживающий, если по лицевому счету он один.
Процедура ЗаполнитьПроживающего(ВыбранноеЗначение)

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчетаСрезПоследних.ОтветственныйВладелец КАК ОтветственныйВладелец
	|ИЗ
	|	РегистрСведений.УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчета.СрезПоследних(&Дата, ЛицевойСчет = &ЛицевойСчет) КАК УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчетаСрезПоследних";
	
	Запрос.УстановитьПараметр("Дата",        Отчет.Дата);
	Запрос.УстановитьПараметр("ЛицевойСчет", ВыбранноеЗначение);
	
	ТаблицаРезультат = Запрос.Выполнить().Выгрузить();
	Отчет.Проживающий = ?(ТаблицаРезультат.Количество() > 0, ТаблицаРезультат[0].ОтветственныйВладелец, Справочники.УПЖКХ_Жильцы.ПустаяСсылка());
	
	ЛицевойСчетПроживающего = ВыбранноеЗначение;
	
	Если ТипЗнч(Отчет.Проживающий) = Тип("СправочникСсылка.УПЖКХ_Жильцы") Тогда
		Элементы.Проживающий.ВыбиратьТип = Ложь;
	Иначе
		Элементы.Проживающий.ВыбиратьТип = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
// Получает список лицевых счетов.
Функция ПолучитьСписокЛицевыхСчетов(ПолеПомещение)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_ЛицевыеСчетаСрезПоследних.ЛицевойСчет
	|ИЗ
	|	РегистрСведений.КВП_ЛицевыеСчета.СрезПоследних(&Дата, Объект = &Помещение) КАК КВП_ЛицевыеСчетаСрезПоследних";

	Запрос.УстановитьПараметр("Дата",      Отчет.Дата);
	Запрос.УстановитьПараметр("Помещение", ПолеПомещение);

	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ЛицевойСчет");

	
КонецФункции // ПолучитьСписокЛицевыхСчетов()

&НаСервере
// Получает массив контрагентов, соответствующих указанному отбору.
Функция ПолучитьМассивКонтрагентовПоОтбору()
	
	ОтборПоЛС        = ФлагИспользоватьОтборПоЛицевомуСчету И ЗначениеЗаполнено(Отчет.ЛицевойСчет);
	ОтборПоПомещению = ФлагИспользоватьОтборПоПомещению И ЗначениеЗаполнено(ПолеПомещение);
	ОтборПоЗданию    = ФлагИспользоватьОтборПоЗданию И ЗначениеЗаполнено(ПолеЗдание);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчетаСрезПоследних.ЛицевойСчет,
	|	УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчетаСрезПоследних.ОтветственныйВладелец
	|ИЗ
	|	РегистрСведений.УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчета.СрезПоследних(&Дата, &УсловиеОтбора) КАК УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчетаСрезПоследних
	|ГДЕ
	|	ТИПЗНАЧЕНИЯ(УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчетаСрезПоследних.ОтветственныйВладелец) = ТИП(Справочник.Контрагенты)";
	
	Запрос.УстановитьПараметр("Дата", Отчет.Дата);
	
	Если ФлагИспользоватьОтборПоЛицевомуСчету И ЗначениеЗаполнено(Отчет.ЛицевойСчет) Тогда
		
		УсловиеОтбора = "ЛицевойСчет = &ЛицевойСчет";
		Запрос.УстановитьПараметр("ЛицевойСчет", Отчет.ЛицевойСчет);
		
	ИначеЕсли ФлагИспользоватьОтборПоПомещению И ЗначениеЗаполнено(ПолеПомещение) Тогда
		
		УсловиеОтбора = "ЛицевойСчет.Адрес = &Адрес";
		Запрос.УстановитьПараметр("Адрес", ПолеПомещение);
		
	ИначеЕсли ФлагИспользоватьОтборПоЗданию И ЗначениеЗаполнено(ПолеЗдание) Тогда
		
		УсловиеОтбора = "ЛицевойСчет.Адрес.Владелец = &Здание";
		Запрос.УстановитьПараметр("Здание", ПолеЗдание);
		
	Иначе
		
		УсловиеОтбора = "";
		
	КонецЕсли;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеОтбора", УсловиеОтбора);
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	Возврат РезультатЗапроса.ВыгрузитьКолонку("ОтветственныйВладелец");
	
КонецФункции

&НаСервере
// Получает лицевой счет по ответственному собственнику.
Функция ПолучитьЛицевойСчетОтветственногоСобственника(Собственник)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчетаСрезПоследних.ЛицевойСчет,
	|	УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчетаСрезПоследних.ОтветственныйВладелец
	|ИЗ
	|	РегистрСведений.УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчета.СрезПоследних(&Дата, ОтветственныйВладелец = &Собственник) КАК УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчетаСрезПоследних";
	
	Запрос.УстановитьПараметр("Дата",        Отчет.Дата);
	Запрос.УстановитьПараметр("Собственник", Собственник);
	
	РезультатЗапрос = Запрос.Выполнить().Выгрузить();
	
	Если РезультатЗапрос.Количество() = 0 Тогда
		
		Возврат Справочники.КВП_ЛицевыеСчета.ПустаяСсылка();
		
	Иначе
		
		Возврат РезультатЗапрос[0].ЛицевойСчет;
		
	КонецЕсли;
	
КонецФункции

&НаСервере
// Проверяет, является ли проживающий жильцом выбранного здания.
Функция ПроверитьЯвляетсяЛиПроживающийЖильцомЗдания()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	УПЖКХ_Жильцы.Ссылка КАК Жилец
	|ИЗ
	|	Справочник.УПЖКХ_Жильцы КАК УПЖКХ_Жильцы
	|ГДЕ
	|	УПЖКХ_Жильцы.Владелец.Адрес.Владелец = &Здание
	|	И УПЖКХ_Жильцы.Ссылка = &Проживающий
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчетаСрезПоследних.ОтветственныйВладелец
	|ИЗ
	|	РегистрСведений.УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчета.СрезПоследних(
	|			&Дата,
	|			ЛицевойСчет.Адрес.Владелец = &Здание
	|				И ОтветственныйВладелец = &Проживающий) КАК УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчетаСрезПоследних";
	
	Запрос.УстановитьПараметр("Дата",        Отчет.Дата);
	Запрос.УстановитьПараметр("Проживающий", Отчет.Проживающий);
	Запрос.УстановитьПараметр("Здание",      ПолеЗдание);
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	Возврат НЕ РезультатЗапроса.Количество() = 0;
	
КонецФункции

&НаСервере
// Проверяет, является ли проживающий жильцом помещения.
Функция ПроверитьЯвляетсяЛиПроживающийЖильцомПомещения()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	УПЖКХ_Жильцы.Ссылка КАК Жилец
	|ИЗ
	|	Справочник.УПЖКХ_Жильцы КАК УПЖКХ_Жильцы
	|ГДЕ
	|	УПЖКХ_Жильцы.Владелец.Адрес = &Помещение
	|	И УПЖКХ_Жильцы.Владелец.Ссылка = &Проживающий
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчетаСрезПоследних.ОтветственныйВладелец
	|ИЗ
	|	РегистрСведений.УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчета.СрезПоследних(
	|			&Дата,
	|			ЛицевойСчет.Адрес = &Помещение
	|				И ОтветственныйВладелец = &Проживающий) КАК УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчетаСрезПоследних";
	
	Запрос.УстановитьПараметр("Дата",        Отчет.Дата);
	Запрос.УстановитьПараметр("Проживающий", Отчет.Проживающий);
	Запрос.УстановитьПараметр("Помещение",   ПолеПомещение);
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	Возврат НЕ РезультатЗапроса.Количество() = 0;
	
КонецФункции

&НаСервере
// Устанавливает реквизиту "Проживающий" пустое значение.
Процедура УстановитьПустуюСсылкуПроживающему()
	
	//Отчет.Проживающий = ?(ТипЗнч(Отчет.Проживающий) = Тип("СправочникСсылка.Контрагенты"), Справочники.Контрагенты.ПустаяСсылка(), Справочники.УПЖКХ_Жильцы.ПустаяСсылка());
	Отчет.Проживающий = "";
	Элементы.Проживающий.ВыбиратьТип = Истина;
	
КонецПроцедуры

&НаСервере
// Устанавливает реквизиту "Лицевой счет" пустое значение.
Процедура УстановитьПустуюСсылкуЛицевомуСчету()
	
	Отчет.ЛицевойСчет = Справочники.КВП_ЛицевыеСчета.ПустаяСсылка();
	
КонецПроцедуры

&НаСервере
// Устанавливает полю "Помещение" пустое значение.
Процедура УстановитьПустуюСсылкуПомещению()
	
	ПолеПомещение = Справочники.УПЖКХ_Помещения.ПустаяСсылка();
	
КонецПроцедуры

&НаКлиенте
// Устанавливает выбранное значение полю "Здание" и другим связанным с ним полям.
Процедура ОбновитьСведенияОЗдании(ВыбранноеЗначение)
	
	Если ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		
		Если НЕ ВыбранноеЗначение = ПолеЗдание Тогда
			
			УстановитьПустуюСсылкуЛицевомуСчету();
			УстановитьПустуюСсылкуПомещению();
			
			Если ФлагИспользоватьОтборПоЗданию Тогда
				УстановитьПустуюСсылкуПроживающему();
			КонецЕсли;
			
		КонецЕсли;
		
		ПолеЗдание = ВыбранноеЗначение;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Устанавливает выбранное значение полю "Лицевой счет" и другим связанным с ним полям.
Процедура ОбновитьСведенияОЛС(ВыбранноеЗначение)
	
	Если ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		
		ПолеПомещение = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(ВыбранноеЗначение, "Адрес");
		ПолеЗдание    = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(ПолеПомещение, "Владелец");
		
		Если ФлагИспользоватьОтборПоЛицевомуСчету И НЕ ВыбранноеЗначение = Отчет.ЛицевойСчет Тогда
			ЗаполнитьПроживающего(ВыбранноеЗначение);
			
			Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
				УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
			КонецЕсли;
		КонецЕсли;
		
		Отчет.ЛицевойСчет = ВыбранноеЗначение;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Устанавливает выбранное значение полю "Помещение" и другим связанным с ним полям.
Процедура ОбновитьСведенияОПомещении(ВыбранноеЗначение, СтандартнаяОбработка = Ложь)
	
	Если ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ПолеЗдание = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(ВыбранноеЗначение, "Владелец");
		
		Если НЕ ВыбранноеЗначение = ПолеПомещение Тогда
			УстановитьПустуюСсылкуПроживающему();
			УстановитьПустуюСсылкуЛицевомуСчету();
			
			Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
				УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
			КонецЕсли;
		КонецЕсли;
		
		СписокЛС = ПолучитьСписокЛицевыхСчетов(ВыбранноеЗначение);
		Если СписокЛС.Количество() > 0 Тогда
			Отчет.ЛицевойСчет = СписокЛС[0];
			
			Если ФлагИспользоватьОтборПоПомещению Тогда
				
				Если ВыбранноеЗначение <> ПолеПомещение Тогда
					ЗаполнитьПроживающего(Отчет.ЛицевойСчет);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		ПолеПомещение = ВыбранноеЗначение;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
