&НаКлиенте
Перем ПараметрыОбработчикаОжидания,
      ФормаДлительнойОперации;

&НаКлиенте
Перем ОбработкаКС Экспорт;

&НаСервере
Перем СписокРасшифровкиПоказателей;

&НаСервере
Перем СписокРасшифровкиформулы;

&НаСервере
Перем мОбъектОтчета;

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	// Обход ошибки платформы Параметр сеанса отсутствует или удален.
	ТабличныйДокумент.Очистить();
	
	СформироватьСтруктуруРеквизитовФормы();
	СтруктураРеквизитовФормы.СписокПечатаемыхЛистов = Новый СписокЗначений;
	СтруктураРеквизитовФормы.мСоставПоказателей = "СоставПоказателей2013Кв4";
	
	СоответствиеЕдиницыИзмеренияДелителю = Новый Структура;
	СоответствиеЕдиницыИзмеренияДелителю.Вставить("Окр1", 1);
	СоответствиеЕдиницыИзмеренияДелителю.Вставить("Окр1000", 1000);
	СоответствиеЕдиницыИзмеренияДелителю.Вставить("Окр1000000", 1000000);
	
	СтруктураРеквизитовФормы.мОписаниеТиповЧислоЕ = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(17, 2));
	
	СтруктураРеквизитовФормы.ИдМСЧ_Раздел1 = "П00001000";
	
	КолИсхСтрокМСЧ_Раздел1 = 1;
	
	КолКолонокИдГруппы1 = 3;
	
	ИнициализацияМногостраничныхРазделов();
	
	СтруктураДанныхТитульный = Новый Структура;
	СтруктураДанныхРаздел1   = Новый Структура;
	
	мСтруктураМногострочныхРазделов = Новый Структура;
	мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.ИдМСЧ_Раздел1, СтруктураРеквизитовФормы.ИдМСЧ_Раздел1);
	
	мСтруктураМногостраничныхРазделов = Новый Структура;
	мСтруктураМногостраничныхРазделов.Вставить("Раздел2", "ТаблицаСтраницыРазделаРаздел2");
	мСтруктураМногостраничныхРазделов.Вставить("Раздел3", "ТаблицаСтраницыРазделаРаздел3");
	
	мСтруктураИсхКолвоСтрокРазделов = Новый Структура;
	мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.ИдМСЧ_Раздел1, КолИсхСтрокМСЧ_Раздел1);
	
	мСтруктураКолвоКолонокРазделов = Новый Структура;
	мСтруктураКолвоКолонокРазделов.Вставить(СтруктураРеквизитовФормы.ИдМСЧ_Раздел1, КолКолонокИдГруппы1);
	
	ЦветЗаполняетсяТолькоВручную     = Новый Цвет(255, 255, 225);
	ЦветЗаполняетсяАвтоКорректир     = Новый Цвет(255, 240, 200);
	ЦветЗаполняетсяАвтоБезКорректир  = Новый Цвет(230, 240, 220);
	ЦветЗаполняетсяАвтоАрифметика    = Новый Цвет(192, 220, 192); // ЗЕЛЕНЫЙ
	ЦветЗаполняетсяОднозначноВручную = Новый Цвет(255, 255, 192); // ЖЕЛТЫЙ
	ЦветЗаполняетсяАвтоматически     = Новый Цвет(255, 255, 255); // Белый, Ввод запрещен
	
	мСтруктураЦветовРаскраски = Новый Структура;
	мСтруктураЦветовРаскраски.Вставить("_0", ЦветЗаполняетсяОднозначноВручную);
	мСтруктураЦветовРаскраски.Вставить("_1", ЦветЗаполняетсяТолькоВручную);
	мСтруктураЦветовРаскраски.Вставить("_2", ЦветЗаполняетсяАвтоКорректир);
	мСтруктураЦветовРаскраски.Вставить("_3", ЦветЗаполняетсяАвтоБезКорректир);
	мСтруктураЦветовРаскраски.Вставить("_4", ЦветЗаполняетсяАвтоАрифметика);
	мСтруктураЦветовРаскраски.Вставить("_5", ЦветЗаполняетсяАвтоматически);
	
	мСтруктураВариантыЗаполнения       = Новый Структура;
	мСтруктураВариантыЗаполненияЭталон = Новый Структура;
	
	СтруктураРеквизитовФормы.мВерсияФормы = "23/12/2013";
	
	СтруктураРеквизитовФормы.мКодОтчета = "1152028";
	
	СтруктураРеквизитовФормы.мПечатныеформы     = Новый СписокЗначений;
	СтруктураРеквизитовФормы.мПечатаемыеРазделы = Новый СписокЗначений;
	
	ИмяРаздела = "Титульный";
	
	ЭтаФормаИмя = ЭтаФорма.ИмяФормы;
	ИмяМакета = Сред(ЭтаФормаИмя, СтрНайти(ЭтаФормаИмя, "ФормаОтчета")) + "_" + ИмяРаздела;
	Попытка
		ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФормаИмя).ПолучитьМакет(ИмяМакета));
	Исключение
	КонецПопытки;
	
	СтруктураРеквизитовФормы.НаимТекущегоРаздела 	  = ИмяРаздела;
	СтруктураРеквизитовФормы.мВыбраннаяФорма          = Параметры.мВыбраннаяФорма;
	СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета  = Параметры.мДатаКонцаПериодаОтчета;
	СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета = Параметры.мДатаНачалаПериодаОтчета;
	СтруктураРеквизитовФормы.мПериодичность           = Параметры.мПериодичность;
	СтруктураРеквизитовФормы.мСкопированаФорма        = Параметры.мСкопированаФорма;
	СтруктураРеквизитовФормы.мСохраненныйДок          = Параметры.мСохраненныйДок;
	СтруктураРеквизитовФормы.Организация        	  = Параметры.Организация;
	Если ТипЗнч(Параметры.НалоговыйОрган) = Тип("СправочникСсылка.РегистрацииВНалоговомОргане") Тогда
		Если НЕ Параметры.НалоговыйОрган.Пустая() Тогда
			СтруктураРеквизитовФормы.РегистрацияВНалОргане = Параметры.НалоговыйОрган;
		КонецЕсли;
	КонецЕсли;
	СтруктураРеквизитовФормы.ДоступенМеханизмПечатиРеглОтчетностиСДвухмернымШтрихкодомPDF417 = Параметры.ДоступенМеханизмПечатиРеглОтчетностиСДвухмернымШтрихкодомPDF417;
	Если Параметры.Свойство("ФормаВРедакцииПисьмаБС_4_11_5197") Тогда
		Если ТипЗнч(Параметры.ФормаВРедакцииПисьмаБС_4_11_5197) = Тип("Булево") Тогда
			СтруктураРеквизитовФормы.ФормаВРедакцииПисьмаБС_4_11_5197 = Параметры.ФормаВРедакцииПисьмаБС_4_11_5197;
		КонецЕсли;
	КонецЕсли;
	СтруктураРеквизитовФормы.СформироватьФормуОтчетаАвтоматически = Параметры.СформироватьФормуОтчетаАвтоматически;
	
	ДатаПодписи	= ТекущаяДатаСеанса();
	
	ПорядкиОкругленияОтчетности = Новый Структура;
	ПорядкиОкругленияОтчетности.Вставить("ПеречислениеПорядкиОкругленияОтчетностиОкр1",       Перечисления.ПорядкиОкругленияОтчетности.Окр1);
	ПорядкиОкругленияОтчетности.Вставить("ПеречислениеПорядкиОкругленияОтчетностиОкр1000",    Перечисления.ПорядкиОкругленияОтчетности.Окр1000);
	ПорядкиОкругленияОтчетности.Вставить("ПеречислениеПорядкиОкругленияОтчетностиОкр1000000", Перечисления.ПорядкиОкругленияОтчетности.Окр1000000);
	
	Инициализация(Параметры.БезОткрытияФормы);
	
КонецПроцедуры

&НаСервере
Процедура СформироватьСтруктуруРеквизитовФормы()
	
	СтруктураРеквизитовФормы = Новый Структура;
	
	СтруктураРеквизитовФормы.Вставить("ВыводитьСтраницуВТаблДокНаСервере");
	СтруктураРеквизитовФормы.Вставить("НаимТекущегоРаздела");
	СтруктураРеквизитовФормы.Вставить("мАвтоВыборКодов");
	СтруктураРеквизитовФормы.Вставить("мБезОткрытияФормы");
	СтруктураРеквизитовФормы.Вставить("мВерсияФормы");
	СтруктураРеквизитовФормы.Вставить("мЗаписываетсяНовыйДокумент");
	СтруктураРеквизитовФормы.Вставить("мЗаписьЗапрещена");
	СтруктураРеквизитовФормы.Вставить("ИдМСЧ_Раздел1");
	СтруктураРеквизитовФормы.Вставить("мКодОтчета");
	СтруктураРеквизитовФормы.Вставить("мРежимПечати");
	СтруктураРеквизитовФормы.Вставить("мСоставПоказателей");
	СтруктураРеквизитовФормы.Вставить("мСтрокаФормата");
	СтруктураРеквизитовФормы.Вставить("мСчетчикСтраниц");
	СтруктураРеквизитовФормы.Вставить("ТочностьЕдиницыИзмерения");
	СтруктураРеквизитовФормы.Вставить("ФлажокОтклАвтоРасчет", Ложь);
	СтруктураРеквизитовФормы.Вставить("ВидДокумента");
	СтруктураРеквизитовФормы.Вставить("ЕдиницаИзмерения");
	СтруктураРеквизитовФормы.Вставить("мВариант");
	СтруктураРеквизитовФормы.Вставить("мВыбраннаяФорма");
	СтруктураРеквизитовФормы.Вставить("мДатаКонцаПериодаОтчета");
	СтруктураРеквизитовФормы.Вставить("мДатаНачалаПериодаОтчета");
	СтруктураРеквизитовФормы.Вставить("мОписаниеТиповЧислоЕ");
	СтруктураРеквизитовФормы.Вставить("НомерСтраницыРазделаОтчета");
	СтруктураРеквизитовФормы.Вставить("мПериодичность");
	СтруктураРеквизитовФормы.Вставить("мПечатаемыеРазделы");
	СтруктураРеквизитовФормы.Вставить("мПечатныеФормы");
	СтруктураРеквизитовФормы.Вставить("мСкопированаФорма");
	СтруктураРеквизитовФормы.Вставить("мСохраненныйДок");
	СтруктураРеквизитовФормы.Вставить("НомерТекущейСтраницы");
	СтруктураРеквизитовФормы.Вставить("Организация");
	СтруктураРеквизитовФормы.Вставить("СписокПечатаемыхЛистов");
	СтруктураРеквизитовФормы.Вставить("НаимОрганизации");
	СтруктураРеквизитовФормы.Вставить("СтрПериодОтчета");
	СтруктураРеквизитовФормы.Вставить("мДокументПредставителя");
	СтруктураРеквизитовФормы.Вставить("мИмяПредставителя");
	СтруктураРеквизитовФормы.Вставить("мИнтервалАвтосохранения");
	СтруктураРеквизитовФормы.Вставить("мНазваниеПредставителя");
	СтруктураРеквизитовФормы.Вставить("мВерсияОтчета");
	СтруктураРеквизитовФормы.Вставить("мОтчествоПредставителя");
	СтруктураРеквизитовФормы.Вставить("мОтчествоПредставителя");
	СтруктураРеквизитовФормы.Вставить("мПечатьБезШтрихкодаРазрешена");
	СтруктураРеквизитовФормы.Вставить("мПолноеИмяФайлаВнешнейОбработки");
	СтруктураРеквизитовФормы.Вставить("мПредставительФизЛицо");
	СтруктураРеквизитовФормы.Вставить("мПроверятьСоотношенияПриПечатиИВыгрузки");
	СтруктураРеквизитовФормы.Вставить("мФамилияПредставителя");
	СтруктураРеквизитовФормы.Вставить("НеПоказыватьСтраницуМногостраничногоРазделаНаСервере");
	СтруктураРеквизитовФормы.Вставить("ОтображатьКнопкуЗаполнить", Ложь);
	СтруктураРеквизитовФормы.Вставить("ОтображатьКнопкуРасшифровать", Ложь);
	СтруктураРеквизитовФормы.Вставить("ТекущаяСтрокаРазделовОтчета");
	СтруктураРеквизитовФормы.Вставить("ДоступенМеханизмПечатиРеглОтчетностиСДвухмернымШтрихкодомPDF417");
	СтруктураРеквизитовФормы.Вставить("ФормаВРедакцииПисьмаБС_4_11_5197", Истина);
	СтруктураРеквизитовФормы.Вставить("СформироватьФормуОтчетаАвтоматически");
	СтруктураРеквизитовФормы.Вставить("мСохранятьРасшифровку", Истина);
	СтруктураРеквизитовФормы.Вставить("АдресВременногоХранилищаРасшифровки");
	СтруктураРеквизитовФормы.Вставить("ТекстДляЗаголовочнойЧасти");
	СтруктураРеквизитовФормы.Вставить("мПроверятьСоотношенияПриПечатиИВыгрузки");
	СтруктураРеквизитовФормы.Вставить("РегистрацияВНалОргане");
	СтруктураРеквизитовФормы.Вставить("ОКВЭД",  "");
	СтруктураРеквизитовФормы.Вставить("ОКВЭД2", "");
	СтруктураРеквизитовФормы.Вставить("ИдентификаторЗадания");
	СтруктураРеквизитовФормы.Вставить("АдресВоВременномХранилище");
	
КонецПроцедуры 

&НаСервере
Процедура ИнициализацияМногостраничныхРазделов()
	
	СтрПерваяСтраница = ЭтаФорма.ТаблицаСтраницыРазделаРаздел2.Добавить();
	СтрПерваяСтраница.Представление               = "Новая страница";
	СтрПерваяСтраница.АктивнаяСтраница            = Истина;
	СтрПерваяСтраница.АвтоматическоеПредставление = Истина;
	
	СтрПерваяСтраница = ЭтаФорма.ТаблицаСтраницыРазделаРаздел3.Добавить();
	СтрПерваяСтраница.Представление               = "Новая страница";
	СтрПерваяСтраница.АктивнаяСтраница            = Истина;
	СтрПерваяСтраница.АвтоматическоеПредставление = Истина;
	
КонецПроцедуры

&НаСервере
Функция КБКИмуществаИностраннойОрганизации()
	
	Возврат "18210602010021000110";
	
КонецФункции

&НаСервере
Функция КБКПоКодуВидаИмущества(КодВидаИмущества)
	
	СоответствиеКодаВидаИмуществаКБК = Новый Соответствие;
	СоответствиеКодаВидаИмуществаКБК.Вставить("1", "18210602020021000110");
	СоответствиеКодаВидаИмуществаКБК.Вставить("2", "18210602010021000110");
	СоответствиеКодаВидаИмуществаКБК.Вставить("3", "18210602010021000110");
	СоответствиеКодаВидаИмуществаКБК.Вставить("5", "18210602010021000110");
	СоответствиеКодаВидаИмуществаКБК.Вставить("6", "18210602010021000110");
	Если Год(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) >= 2015 Тогда
		СоответствиеКодаВидаИмуществаКБК.Вставить("8", "18210602020021000110");
	КонецЕсли;
	
	Возврат СоответствиеКодаВидаИмуществаКБК[КодВидаИмущества];
	
КонецФункции

&НаСервере
Процедура НачальныеОперацииСМногострочнымиБлоками()
	
	Перем ИсходноеКоличествоСтрокГруппы;
	
	Для Каждого ЭлементСтруктуры Из мСтруктураМногострочныхРазделов Цикл
		ИмяГруппы = ЭлементСтруктуры.Ключ;
		СтруктураГруппы = ЭтаФорма[ЭлементСтруктуры.Значение];
		
		мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);
		
		Для НСтр = 1 По ИсходноеКоличествоСтрокГруппы Цикл
			
			СтруктураГруппы.Добавить();
			
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура Инициализация(БезОткрытияФормы = Ложь) Экспорт
	
	СтруктураРеквизитовФормы.мБезОткрытияФормы = БезОткрытияФормы;
	СтруктураРеквизитовФормы.мАвтоВыборКодов = Ложь;
	СтруктураРеквизитовФормы.мРежимПечати = Ложь;
	
	ИнициализироватьСвойстваРазделовОтчета();
	
	ЗаполнитьНачальныеНастройки();
	
	СформироватьДеревоРазделовОтчетаНаСервере();
	
	УстановитьМаскиВПоляхВвода(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
	СтруктураРеквизитовФормы.ВидДокумента = 0;
	НомерКорректировки = 1;
	
	НачальныеОперацииСМногострочнымиБлоками();
	
	СообщениеОбИзменениях = "";
	
	Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
		
		// Новый документ.
		КопироватьДанныеФормы(мДеревоСтраницОтчета, мДеревоВыбранныхСтраниц);
		ЗаполнитьСведенияОбОрганизацииНаСервере();
		
		СтруктураРеквизитовФормы.ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1;
		СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = 0;
		УстановитьФорматВыводаВПоляхВводаНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
		
		СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки = Ложь;
		
		ВывестиСведенияОПериодеОтчета();
		
		СтруктураРеквизитовФормы.ВидДокумента = 0;
		НомерКорректировки = 1;
		
		Периоды = Новый Соответствие;
		Периоды.Вставить(1, "21");
		Если СтруктураРеквизитовФормы.ФормаВРедакцииПисьмаБС_4_11_5197 Тогда
			Периоды.Вставить(2, "17");
			Периоды.Вставить(3, "18");
		Иначе
			Периоды.Вставить(2, "31");
			Периоды.Вставить(3, "33");
		КонецЕсли;
		
		НомерКвартала = Число(Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ=к"));
		
		ТабличныйДокумент.Области.Период.Значение = Периоды[НомерКвартала];
		
		ЗаполнитьДатуПодписи(ЭтаФорма);
		
	Иначе
		
		// Сохраненный или скопированный документ.
		ВосстановитьСохраненныеДанные();
		
		Если ЗначениеЗаполнено(СтруктураРеквизитовФормы.мСкопированаФорма) Тогда
			
			ЗаполнитьСведенияОбОрганизацииНаСервере();
			
			ИсходныйПериод = РегламентированнаяОтчетностьКлиентСервер.ВернутьЗначениеПараметраСЛиста(ЭтаФорма, "Титульный", "Период");
			
			Если ЗначениеЗаполнено(ИсходныйПериод) Тогда
				
				ЛиквидацияОрганизации = (Лев(ИсходныйПериод, 1) = "4" ИЛИ Лев(ИсходныйПериод, 1) = "5");
				
				Периоды = Новый Соответствие;
				Если ЛиквидацияОрганизации Тогда
					Периоды.Вставить(1, "51");
					Если СтруктураРеквизитовФормы.ФормаВРедакцииПисьмаБС_4_11_5197 Тогда
						Периоды.Вставить(2, "47");
						Периоды.Вставить(3, "48");
					Иначе
						Периоды.Вставить(2, "52");
						Периоды.Вставить(3, "53");
					КонецЕсли;
				Иначе
					Периоды.Вставить(1, "21");
					Если СтруктураРеквизитовФормы.ФормаВРедакцииПисьмаБС_4_11_5197 Тогда
						Периоды.Вставить(2, "17");
						Периоды.Вставить(3, "18");
					Иначе
						Периоды.Вставить(2, "31");
						Периоды.Вставить(3, "33");
					КонецЕсли;
				КонецЕсли;
				
				НомерКвартала = Число(Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ=к"));
				ТабличныйДокумент.Области.Период.Значение = Периоды[НомерКвартала];
				
			КонецЕсли;
			
			ВывестиСведенияОПериодеОтчета();
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтруктураРеквизитовФормы.мСкопированаФорма) Тогда
			
			Если НЕ (КонецДня(СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания)
				= КонецДня(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета)
				И СтруктураРеквизитовФормы.мСохраненныйДок.Организация
				= СтруктураРеквизитовФормы.Организация) Тогда
				
				Для каждого СтраницаРаздел3 Из ТаблицаСтраницыРазделаРаздел3 Цикл
					Если ЗначениеЗаполнено(СтраницаРаздел3.Данные[0].Значение.П000030008003_Числ)
						ИЛИ ЗначениеЗаполнено(СтраницаРаздел3.Данные[0].Значение.П000030008003_Знам) Тогда
						СтраницаРаздел3.Данные[0].Значение.Вставить("П000030008003_Числ", "");
						СтраницаРаздел3.Данные[0].Значение.Вставить("П000030008003_Знам", "");
						СообщениеОбИзменениях
						= НСтр("ru='В разделе 3 очищено значение показателя ""Коэффициент К"". Произведен перерасчет всех рассчитываемых показателей.'")
					КонецЕсли;
				КонецЦикла;
				
			КонецЕсли;
			
			СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено;
		КонецЕсли;
		
		Если НЕ БезОткрытияФормы
           И НЕ СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
				   
        	ЗаблокироватьДанныеДляРедактирования(СтруктураРеквизитовФормы.мСохраненныйДок, , ЭтаФорма.УникальныйИдентификатор);

        КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СообщениеОбИзменениях) Тогда
		РасчетНаСервере();
		СформироватьРаздел1();
		РасчетНаСервере();
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = СообщениеОбИзменениях;
		Сообщение.Сообщить();
	КонецЕсли;
	
	Если НЕ БезОткрытияФормы Тогда
		СформироватьСпискиВыбора();
		РегламентированнаяОтчетностьКлиентСервер.ПоказатьКнопкиПечати(ЭтаФорма);
	КонецЕсли;
	
	РегламентированнаяОтчетность.ПолучитьСведенияОПоказателяхОтчета(ЭтаФорма);
	
	Если НЕ СтруктураРеквизитовФормы.ОтображатьКнопкуЗаполнить Тогда
		Элементы.Заполнить.Видимость = Ложь;
		СтруктураРеквизитовФормы.мСохранятьРасшифровку = Ложь;
	КонецЕсли;
	
	Если НЕ СтруктураРеквизитовФормы.ОтображатьКнопкуРасшифровать Тогда
		Элементы.Расшифровать.Видимость = Ложь;
		Элементы.ТабличныйДокументКонтекстноеМенюРасшифровать.Видимость = Ложь;
	КонецЕсли;
	
	УстановитьЗаголовокФормы();
	
	СтруктураРеквизитовФормы.НаимОрганизации = СтруктураРеквизитовФормы.Организация.Наименование;
	
	НомерКорректировки = ?(СтруктураРеквизитовФормы.ВидДокумента = 0, 0, НомерКорректировки);
	СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
	
	УстановитьДоступностьОбластей(ЭтаФорма, СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	ТабличныйДокумент.Области.НомерКорректировки.Значение = Строка(НомерКорректировки);
	ЗаполнитьДатуВЯчейкахНаСервере();
	РегламентированнаяОтчетность.ПолучитьЗначениеОКВЭД(ДатаПодписи, СтруктураРеквизитовФормы);
	
	РегламентированнаяОтчетность.ДобавитьКнопкуПрисоединенныеФайлы(ЭтаФорма);
	
	РегламентированнаяОтчетностьКлиентСервер.ПриИнициализацииФормыРегламентированногоОтчета(ЭтаФорма);
	
	УстановитьНадписиНаТитульномЛисте(ТабличныйДокумент);
	
	Если СтруктураРеквизитовФормы.СформироватьФормуОтчетаАвтоматически Тогда
		ЗаполнитьАвтоНаСервере();
		Если Элементы.Расшифровать.Видимость Тогда
			Элементы.Расшифровать.Доступность = Истина;
			Элементы.ТабличныйДокументКонтекстноеМенюРасшифровать.Доступность = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция КодПоМестуПоУмолчанию()
	
	СтрокаСведений = "КППЮЛ, КодНО";
	СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(
		СтруктураРеквизитовФормы.Организация, ДатаПодписи, СтрокаСведений);
	
	КодНО = СведенияОбОрганизации.КодНО;
	Для Инд = СтрДлина(СведенияОбОрганизации.КодНО) + 1 По 4 Цикл
		КодНО = " " + КодНО;
	КонецЦикла;
	
	Если ТабличныйДокумент.Области["НалоговыйОрган"].Значение = КодНО Тогда
		
		ГоловнаяОрганизация = РегламентированнаяОтчетность.ГоловнаяОрганизация(
			СтруктураРеквизитовФормы.Организация);
		
		Если СтруктураРеквизитовФормы.Организация <> ГоловнаяОрганизация Тогда
			
			ГолОргКПП = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(
				ГоловнаяОрганизация, ДатаПодписи, "КППЮЛ").КППЮЛ;
			
			Если ТабличныйДокумент.Области["КПП1"].Значение <> ГолОргКПП Тогда
				
				Возврат "221";
				
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		Возврат "281";
		
	КонецЕсли;
	
	Возврат "214";
	
КонецФункции

&НаСервере
Процедура ИнициализироватьНастройкиПечатиСтраниц()
	
	мДеревоСтраницОтчета.ПолучитьЭлементы().Очистить();
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Титульный";
	СтрокаУровня1.Представление            = "Титульный лист";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел1";
	СтрокаУровня1.Представление            = "Раздел 1";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел2";
	СтрокаУровня1.Представление            = "Раздел 2";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел3";
	СтрокаУровня1.Представление            = "Раздел 3";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьСвойстваРазделовОтчета()
	
	мСвойстваРазделовДекларации.ПолучитьЭлементы().Очистить();
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	
	СтрокаУровня1.ИмяСтраницы                          = "Титульный";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Ложь;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "Раздел1";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Истина;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	
	НовСтр = СтрокаУровня1.МногострочностьВРазделе.Добавить();
	НовСтр.ИдГруппы = СтруктураРеквизитовФормы.ИдМСЧ_Раздел1;
	НовСтр.Область = "МногострочнаяЧасть";
	НовСтр.ВысотаСтроки = 7;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "Раздел2";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Истина;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "Раздел3";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Истина;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если СтрНайти(Заголовок, СтруктураРеквизитовФормы.СтрПериодОтчета) = 0 Тогда
		Заголовок = Заголовок + " за " + СтруктураРеквизитовФормы.СтрПериодОтчета;
	КонецЕсли;
	
	ОргСтр = " (" + СтруктураРеквизитовФормы.НаимОрганизации + ")";
	Если СтрНайти(Заголовок, ОргСтр) = 0 Тогда
		Заголовок = Заголовок + ОргСтр;
	КонецЕсли;
	
	Заголовок = Заголовок + ?(СтрНайти(ЭтаФорма.ИмяФормы, "Внешний") > 0, " - внешний отчет", "");
	
	ПодключитьОбработчикОжидания("ВыполнитьПроверкуПередОткрытием", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПроверкуПередОткрытием()
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПриОткрытииЗавершение", ЭтотОбъект);
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередОткрытиемФормыРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытииЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Модифицированность = Ложь;
		Закрыть();
		Возврат;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	РегламентированнаяОтчетностьКлиент.ПередЗакрытиемРегламентированногоОтчета(ЭтаФорма, Отказ, СтандартнаяОбработка, ЗавершениеРаботы, ТекстПредупреждения);
	
КонецПроцедуры 

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ЗавершениеРаботы Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ПриЗакрытииНаСервере();
	
КонецПроцедуры 

&НаСервере
Процедура ПриЗакрытииНаСервере()
	
	РегламентированнаяОтчетность.ПриЗакрытииРегламентированногоОтчета(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНачальныеНастройки()
	
	ИнициализироватьНастройкиПечатиСтраниц();
	СформироватьСоставПоказателей();
	
КонецПроцедуры

&НаСервере
Процедура СформироватьДеревоРазделовОтчетаНаСервере() Экспорт
	
	СформироватьДеревоРазделовОтчета(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьДеревоРазделовОтчетаНаКлиенте() Экспорт
	
	СформироватьДеревоРазделовОтчета(ЭтаФорма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СформироватьДеревоРазделовОтчета(Форма)
	
	Форма["РазделыОтчета"].ПолучитьЭлементы().Очистить();
	
	Для Каждого ЭлементДереваСтраницОтчета Из Форма["мДеревоСтраницОтчета"].ПолучитьЭлементы() Цикл
		
		Если ЭлементДереваСтраницОтчета.ПоказатьСтраницу = 1 Тогда
			
			ЭлементРазделовОтчета = Форма["РазделыОтчета"].ПолучитьЭлементы().Добавить();
			ЭлементРазделовОтчета.КолонкаРазделыОтчета         = ЭлементДереваСтраницОтчета.Представление;
			ЭлементРазделовОтчета.КолонкаРазделыОтчетаСокрНаим = ЭлементДереваСтраницОтчета.ИмяСтраницы;
			ЭлементРазделовОтчета.ИндексКартинки               = 1;
			ЭлементРазделовОтчета.РазделМногостраничный        = Ложь;
			ЭлементРазделовОтчета.РазделМногострочный          = РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(Форма, "мТаблицаМногострочныхРазделов");
			
			НайденноеЗначение = Неопределено;
			
			Если Форма["мСтруктураМногостраничныхРазделов"].Свойство(ЭлементРазделовОтчета.КолонкаРазделыОтчетаСокрНаим, НайденноеЗначение) Тогда
				
				Если НЕ НайденноеЗначение = Неопределено Тогда
					
					НайденноеЗначение = Форма[НайденноеЗначение];
					
					ЭлементРазделовОтчета.ИндексКартинки        = 0;
					ЭлементРазделовОтчета.РазделМногостраничный = Истина;
					
					Для НомерСтраницы = 1 По НайденноеЗначение.Количество() Цикл
						
						СтраницаРазделаОтчета = ЭлементРазделовОтчета.ПолучитьЭлементы().Добавить();
						
						СтраницаРазделаОтчета.КолонкаРазделыОтчета              = "Стр. " + НомерСтраницы;
						СтраницаРазделаОтчета.КолонкаРазделыОтчетаСокрНаим      = ЭлементРазделовОтчета.КолонкаРазделыОтчетаСокрНаим;
						СтраницаРазделаОтчета.КолонкаНомерСтраницыРазделаОтчета = НомерСтраницы;
						СтраницаРазделаОтчета.ИндексКартинки                    = 1;
						СтраницаРазделаОтчета.РазделМногостраничный             = ЭлементРазделовОтчета.РазделМногостраничный;
						СтраницаРазделаОтчета.РазделМногострочный               = ЭлементРазделовОтчета.РазделМногострочный;
						
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьСпискиВыбора()
	
	МакетСписковВыбора = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет("СпискиВыбора2013Кв4");
	
	КоллекцияСписковВыбора = Новый Соответствие;
	
	Для Каждого Область Из МакетСписковВыбора.Области Цикл
		Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Строки Тогда
			ВерхОбласти = Область.Верх;
			НизОбласти = Область.Низ;
			
			ТаблСписка = Новый ТаблицаЗначений;
			ТаблСписка.Колонки.Добавить("Код", , , МакетСписковВыбора.Область(ВерхОбласти, 1, ВерхОбласти, 1).ШиринаКолонки);
			ТаблСписка.Колонки.Добавить("Название", , , МакетСписковВыбора.Область(ВерхОбласти, 2, ВерхОбласти, 2).ШиринаКолонки);
			ТаблСписка.Колонки.Добавить("РезультатПроверки", , , 0);
			Для НомСтр = ВерхОбласти По НизОбласти Цикл
				НовСтрока = ТаблСписка.Добавить();
				НовСтрока.Код = СокрП(МакетСписковВыбора.Область(НомСтр, 1).Текст);
				НовСтрока.Название = СокрП(МакетСписковВыбора.Область(НомСтр, 2).Текст);
				НовСтрока.РезультатПроверки = СокрП(МакетСписковВыбора.Область(НомСтр, 3).Текст);
			КонецЦикла;
			
			КоллекцияСписковВыбора.Вставить(Область.Имя, ТаблСписка);
		КонецЕсли;
	КонецЦикла;
	
	СвойстваПоказателей.Очистить();
	
	// Титульный лист.
	ИмяСекцииНалоговыеПериоды = "НалоговыеПериоды";
	Если СтруктураРеквизитовФормы.ФормаВРедакцииПисьмаБС_4_11_5197 Тогда
		ИмяСекцииНалоговыеПериоды = "НалоговыеПериодыВРедакцииПисьмаБС_4_11_5197";
	КонецЕсли;
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "Период", 2, , "Выбор кода налогового периода", КоллекцияСписковВыбора[ИмяСекцииНалоговыеПериоды]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "ПоМесту", 3, , "Выбор кода места представления", КоллекцияСписковВыбора["МестаПредставления"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "КодФормыРеорганизации", 1, , "Выбор кода формы реорганизации (ликвидации)", КоллекцияСписковВыбора["КодыФормОрг"]);
	
	Если Год(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета) >= 2015 Тогда
		СписокВидовИмущества = "ВидыИмущества2015";
		СписокЛьгот = "Льготы2015";
	Иначе
		СписокВидовИмущества = "ВидыИмущества";
		СписокЛьгот = "Льготы";
	КонецЕсли;
	
	// Раздел 1.
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000010001003", 11, "ОКТМО");
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000010002003", 20, , "Выбор КБК", КоллекцияСписковВыбора["КБК"]);
	
	// Раздел 2.
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000020000101", 1, , "Выбор кода вида имущества", КоллекцияСписковВыбора[СписокВидовИмущества]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000020001001", 11, "ОКТМО");
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000020013003_КодЛьготы", 7, , "Выбор кода льготы", КоллекцияСписковВыбора[СписокЛьгот]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000020016003_КодЛьготы", 7, , "Выбор кода льготы", КоллекцияСписковВыбора["Льгота2012400"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000020019003_КодЛьготы", 7, , "Выбор кода льготы", КоллекцияСписковВыбора["Льгота2012500"]);
	
	// Раздел 3.
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000030001001", 11, "ОКТМО");
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000030004003_КодЛьготы", 7, , "Выбор кода льготы", КоллекцияСписковВыбора[СписокЛьгот]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000030006003_КодЛьготы", 7, , "Выбор кода льготы", КоллекцияСписковВыбора["Льгота2012400"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000030010003_КодЛьготы", 7, , "Выбор кода льготы", КоллекцияСписковВыбора["Льгота2012500"]);
	
КонецПроцедуры 

&НаСервере
Процедура ВосстановитьСохраненныеДанные()
	Перем ДанныеМногострочныхРазделов;
	Перем ДанныеМногостраничныхРазделов;
	Перем ДанныеВариановАвтоЗаполнения;
	Перем ПоказателиОтчета;
	Перем Автозаполнение;
	Перем ТаблицаРасшифровки;
	Перем ТаблицаМногостраничногоДокумента;
	
	Если НЕ ЗначениеЗаполнено(СтруктураРеквизитовФормы.Организация) Тогда
		СтруктураРеквизитовФормы.Организация = СтруктураРеквизитовФормы.мСохраненныйДок.Организация;
	КонецЕсли;
	
	ДатаПодписи = СтруктураРеквизитовФормы.мСохраненныйДок.ДатаПодписи;
	СтруктураРеквизитовФормы.ЕдиницаИзмерения = СтруктураРеквизитовФормы.мСохраненныйДок.ЕдиницаИзмерения;
	СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = СтруктураРеквизитовФормы.мСохраненныйДок.ТочностьЕдиницыИзмерения;
	Комментарий = СтруктураРеквизитовФормы.мСохраненныйДок.Комментарий;
	
	СписокСохранения = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить();
	
	ДеревоНастройкиСтраниц = СтруктураРеквизитовФормы.мСохраненныйДок.ДеревоНастройкиСтраниц.Получить();
	ЗначениеВРеквизитФормы(ДеревоНастройкиСтраниц.Скопировать(), "мДеревоСтраницОтчета");
	
	СписокСохранения.Свойство("ПоказателиОтчета", ПоказателиОтчета);
	
	Если СписокСохранения.Свойство("ДанныеМногострочныхРазделов", ДанныеМногострочныхРазделов) Тогда
		
		Для Каждого ЭлементСтруктуры Из ДанныеМногострочныхРазделов Цикл
			
			НайденноеЗначение = Неопределено;
			
			мСтруктураМногострочныхРазделов.Свойство(ЭлементСтруктуры.Ключ, НайденноеЗначение);
			
			Если ЭлементСтруктуры.Ключ = "П00001" Тогда
				
				// Случай перехода с 2.0 на 3.0.
				НайденноеЗначение = "П00001000";
				ЗначениеВДанныеФормы(ЭлементСтруктуры.Значение, ЭтаФорма[НайденноеЗначение]);
				ПоказателиРаздела1 = ПоказателиОтчета.ПолеТабличногоДокументаРаздел1;
				Для НомСтроки = 0 По ЭтаФорма[НайденноеЗначение].Количество() - 1 Цикл
					НомСтроки_ = Формат(НомСтроки + 1, "ЧГ=0");
					Для НомПодстроки = 1 По 3 Цикл
						ЭтаФорма[НайденноеЗначение][НомСтроки]["П00001000" + НомПодстроки + "003"]
						= ПоказателиРаздела1["П00001000" + НомПодстроки + "003_" + НомСтроки_];
					КонецЦикла;
				КонецЦикла;
				
			Иначе
				
				Если НЕ НайденноеЗначение = Неопределено Тогда
					
					ЗначениеВДанныеФормы(ЭлементСтруктуры.Значение, ЭтаФорма[НайденноеЗначение]);
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если СписокСохранения.Свойство("ДанныеВариантовАвтоЗаполнения", ДанныеВариановАвтоЗаполнения) Тогда
		
		Если НЕ ДанныеВариановАвтоЗаполнения = Неопределено Тогда
			
			мСтруктураВариантыЗаполнения.Очистить();
			
			Для Каждого ЭлементСтруктуры Из ДанныеВариановАвтоЗаполнения Цикл
				
				мСтруктураВариантыЗаполнения.Вставить(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Ключ);
				
				ЭтаФорма["ТаблицаВариантыЗаполнения" + ЭлементСтруктуры.Ключ].Очистить();
				
				Для Каждого ЭлементМассива Из ЭлементСтруктуры.Значение Цикл
					
					ТаблВарЗаполнения = ЭтаФорма["ТаблицаВариантыЗаполнения" + ЭлементСтруктуры.Ключ].Добавить().ТаблицаВариантовЗаполнения;
					
					ЗначениеВДанныеФормы(ЭлементМассива, ТаблВарЗаполнения);
					
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если СписокСохранения.Свойство("ДанныеМногостраничныхРазделов", ДанныеМногостраничныхРазделов) Тогда
		Для Каждого ЭлементСтруктуры Из ДанныеМногостраничныхРазделов Цикл
			
			НайденноеЗначение = Неопределено;
			
			мСтруктураМногостраничныхРазделов.Свойство(ЭлементСтруктуры.Ключ, НайденноеЗначение);
			
			Если НЕ НайденноеЗначение = Неопределено Тогда
				
				НайденноеЗначение = ЭтаФорма[НайденноеЗначение];
				
				ЗначениеВДанныеФормы(ЭлементСтруктуры.Значение, НайденноеЗначение);
				
				Если НайденноеЗначение[0].Свойство("Данные") Тогда
					
					Для Каждого СтрокаТаблЗнач Из НайденноеЗначение Цикл
						
						Если ТипЗнч(СтрокаТаблЗнач.Данные) = Тип("СписокЗначений") Тогда
							
							СтрокаТаблЗнач.Данные.Очистить();
							
							СтрокаТаблЗнач.Данные.Добавить(ЭлементСтруктуры.Значение[НайденноеЗначение.Индекс(СтрокаТаблЗнач)].Данные);
							
						КонецЕсли;
						
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Для каждого СтраницаРаздел3 Из ТаблицаСтраницыРазделаРаздел3 Цикл
		// Конвертация данных: изменением типа значения в строке 080 раздела 3.
		Если ТипЗнч(СтраницаРаздел3.Данные[0].Значение.П000030008003_Числ) = Тип("Число") Тогда
			СтраницаРаздел3.Данные[0].Значение.Вставить("П000030008003_Числ",
			Формат(СтраницаРаздел3.Данные[0].Значение.П000030008003_Числ));
		КонецЕсли;
		Если ТипЗнч(СтраницаРаздел3.Данные[0].Значение.П000030008003_Знам) = Тип("Число") Тогда
			СтраницаРаздел3.Данные[0].Значение.Вставить("П000030008003_Знам",
			Формат(СтраницаРаздел3.Данные[0].Значение.П000030008003_Знам));
		КонецЕсли;
	КонецЦикла;
	
	СписокСохранения.Свойство("ФлПодсчетСтраниц", СтруктураРеквизитовФормы.мСчетчикСтраниц);
	
	СписокСохранения.Свойство("ФлОтклВыборЗначений", СтруктураРеквизитовФормы.мАвтоВыборКодов);
	СтруктураРеквизитовФормы.мАвтоВыборКодов = ?(СтруктураРеквизитовФормы.мАвтоВыборКодов = Неопределено, Ложь, СтруктураРеквизитовФормы.мАвтоВыборКодов);
	
	СписокСохранения.Свойство("ФлПроверятьСоотношенияПриПечатиИВыгрузки", СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки);
	СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки = ?(СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки = Неопределено, Ложь, СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки);
	
	СписокСохранения.Свойство("Автозаполнение", Автозаполнение);
	СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет = Автозаполнение;
	
	Если НЕ ЗначениеЗаполнено(СтруктураРеквизитовФормы.мСкопированаФорма) Тогда
		СписокСохранения.Свойство("ФормаВРедакцииПисьмаБС_4_11_5197", СтруктураРеквизитовФормы.ФормаВРедакцииПисьмаБС_4_11_5197);
		Если СтруктураРеквизитовФормы.ФормаВРедакцииПисьмаБС_4_11_5197 = Неопределено Тогда
			СтруктураРеквизитовФормы.ФормаВРедакцииПисьмаБС_4_11_5197 = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	СписокСохранения.Свойство("СохранятьРасшифровку", СтруктураРеквизитовФормы.мСохранятьРасшифровку);
	Если СтруктураРеквизитовФормы.мСохранятьРасшифровку = Неопределено Тогда
		СтруктураРеквизитовФормы.мСохранятьРасшифровку = Истина;
	КонецЕсли;
	
	СписокСохранения.Свойство("Расшифровка", ТаблицаРасшифровки);
	
	Если ТипЗнч(ТаблицаРасшифровки) = Тип("ТаблицаЗначений") Тогда
		
		Если ТаблицаРасшифровки.Колонки.Найти("НомСтроки") <> Неопределено Тогда
			
			ИмяПоказателя     = ТаблицаРасшифровки.Колонки.Найти("ИмяПоказателя");
			ИмяПоказателя.Имя = "НаименованиеПоказателя";
			
			ИмяЯчейки     = ТаблицаРасшифровки.Колонки.Найти("ИмяЯчейки");
			ИмяЯчейки.Имя = "ИмяПоказателя";
			
			Раздел     = ТаблицаРасшифровки.Колонки.Найти("Раздел");
			Раздел.Имя = "ИмяРаздела";
			
			ИмяСлагаемого     = ТаблицаРасшифровки.Колонки.Найти("ИмяСлагаемого");
			ИмяСлагаемого.Имя = "НаименованиеСлагаемого";
			
			ТаблицаРасшифровки.Колонки.Добавить("ДополнительныеПараметры");
			
			Для Каждого Элемент Из ТаблицаРасшифровки Цикл
				
				Если ЗначениеЗаполнено(Элемент.КодСчета) Тогда
					Элемент.НаименованиеСлагаемого = Элемент.НаименованиеСлагаемого + Элемент.КодСчета.Код;
				КонецЕсли;
				
				ДопПараметры = Новый Структура;
				
				Если ЗначениеЗаполнено(Элемент.Субконто1) Тогда
					ДопПараметры.Вставить("Субконто1", Новый Структура("ВидСубконто,ЗначениеСубконто", Элемент.КодСчета.ВидыСубконто[0].ВидСубконто, Элемент.Субконто1));
				КонецЕсли;
				
				Если ЗначениеЗаполнено(Элемент.Субконто2) Тогда
					ДопПараметры.Вставить("Субконто2", Новый Структура("ВидСубконто,ЗначениеСубконто", Элемент.КодСчета.ВидыСубконто[1].ВидСубконто, Элемент.Субконто2));
				КонецЕсли;
				
				Если ЗначениеЗаполнено(Элемент.Субконто3) Тогда
					ДопПараметры.Вставить("Субконто3", Новый Структура("ВидСубконто,ЗначениеСубконто", Элемент.КодСчета.ВидыСубконто[2].ВидСубконто, Элемент.Субконто3));
				КонецЕсли;
				
				Элемент.ДополнительныеПараметры = ДопПараметры;
				
			КонецЦикла;
			
			ТаблицаРасшифровки = ТаблицаРасшифровки.Скопировать(, "ИмяПоказателя, НаименованиеПоказателя, ЗнакОперации, НаименованиеСлагаемого, Сумма, ИмяРаздела, ДополнительныеПараметры");
			
		КонецЕсли;
		
		СтруктураРеквизитовФормы.АдресВременногоХранилищаРасшифровки = ПоместитьВоВременноеХранилище(ТаблицаРасшифровки, УникальныйИдентификатор);
		Элементы.Расшифровать.Доступность = Истина;
		Элементы.ТабличныйДокументКонтекстноеМенюРасшифровать.Доступность = Истина;
		
	КонецЕсли;
	
	Префикс = "ПолеТабличногоДокумента";
	
	Для Каждого Раздел Из мСвойстваРазделовДекларации.ПолучитьЭлементы() Цикл	
		
		Если НЕ Раздел.МногостраничностьВРазделе Тогда
			ЭтаФорма["СтруктураДанных" + Раздел.ИмяСтраницы] = ПоказателиОтчета[Префикс + Раздел.ИмяСтраницы];
		КонецЕсли;
		
	КонецЦикла;
	
	ВосстановитьСведенияОбОрганизацииИзТитульногоЛистаСтарогоОбразца(ПоказателиОтчета);
	
	ИмяТекРаздела = "Титульный";
	
	Для Каждого ЭлСтруктуры Из ЭтаФорма["СтруктураДанных" + ИмяТекРаздела] Цикл
		Если ТабличныйДокумент.Области.Найти(ЭлСтруктуры.Ключ) <> Неопределено Тогда
			Если ТабличныйДокумент.Области.Найти(ЭлСтруктуры.Ключ).Имя = "ДатаПодписи" Тогда
				ТабличныйДокумент.Области[ЭлСтруктуры.Ключ].Значение = ДатаПодписи;
			Иначе
				ТабличныйДокумент.Области[ЭлСтруктуры.Ключ].Значение = ЭлСтруктуры.Значение;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ СписокСохранения.Свойство("ПечатьБезШтрихкодаРазрешена", СтруктураРеквизитовФормы.мПечатьБезШтрихкодаРазрешена) Тогда
		СтруктураРеквизитовФормы.мПечатьБезШтрихкодаРазрешена = Ложь;
	КонецЕсли;
	
	РегламентированнаяОтчетность.ОперацииПриВосстановленииРегламентированногоОтчета(ЭтаФорма);
	
	КопироватьДанныеФормы(мДеревоСтраницОтчета, мДеревоВыбранныхСтраниц);
	
	Модифицированность   = Ложь;
	
	СформироватьДеревоРазделовОтчетаНаСервере();
	
	Если П00001000.Количество() = 0 Тогда
		П00001000.Добавить();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьСведенияОбОрганизацииИзТитульногоЛистаСтарогоОбразца(ПоказателиОтчета)
	
	ПоказателиТаблПоле = ПоказателиОтчета["ПолеТабличногоДокументаТитульный"];
	
	Для Каждого Показатель Из ПоказателиТаблПоле Цикл
		
		ИмяПоказателя = Показатель.Ключ;
		
		Если ИмяПоказателя = "ИНН1_1" Тогда
			СтруктураДанныхТитульный.Вставить("ИНН1");
			Для Ном = 1 По 12 Цикл
				СтруктураДанныхТитульный.ИНН1 = СокрЛП(СтруктураДанныхТитульный.ИНН1) + ПоказателиТаблПоле["ИНН1_" + Ном];
				СтруктураДанныхТитульный.Удалить("ИНН1_" + Ном);
			КонецЦикла;
			Если Лев(СтруктураДанныхТитульный.ИНН1, 2) = "00" Тогда
				СтруктураДанныхТитульный.ИНН1 = Сред(СтруктураДанныхТитульный.ИНН1, 3);
			КонецЕсли;
			СтруктураДанныхТитульный.ИНН1 = СтрЗаменить(СтруктураДанныхТитульный.ИНН1, "-", "");
		ИначеЕсли ИмяПоказателя = "КПП1_1" Тогда
			СтруктураДанныхТитульный.Вставить("КПП1");
			Для Ном = 1 По 9 Цикл
				СтруктураДанныхТитульный.КПП1 = СокрЛП(СтруктураДанныхТитульный.КПП1) + ПоказателиТаблПоле["КПП1_" + Ном];
				СтруктураДанныхТитульный.Удалить("КПП1_" + Ном);
			КонецЦикла;
		ИначеЕсли ИмяПоказателя = "НомерКорректировки1" Тогда
			СтруктураДанныхТитульный.Вставить("НомерКорректировки");
			Для Ном = 1 По 3 Цикл
				СтруктураДанныхТитульный.НомерКорректировки = СокрЛП(СтруктураДанныхТитульный.НомерКорректировки) + ПоказателиТаблПоле["НомерКорректировки" + Ном];
				СтруктураДанныхТитульный.Удалить("НомерКорректировки" + Ном);
			КонецЦикла;
		ИначеЕсли ИмяПоказателя = "Период1" Тогда
			СтруктураДанныхТитульный.Вставить("Период");
			Для Ном = 1 По 2 Цикл
				СтруктураДанныхТитульный.Период = СокрЛП(СтруктураДанныхТитульный.Период) + ПоказателиТаблПоле["Период" + Ном];
				СтруктураДанныхТитульный.Удалить("Период" + Ном);
			КонецЦикла;
		ИначеЕсли ИмяПоказателя = "ОтчетГод1" Тогда
			СтруктураДанныхТитульный.Вставить("ОтчетГод");
			Для Ном = 1 По 4 Цикл
				СтруктураДанныхТитульный.ОтчетГод = СокрЛП(СтруктураДанныхТитульный.ОтчетГод) + ПоказателиТаблПоле["ОтчетГод" + Ном];
				СтруктураДанныхТитульный.Удалить("ОтчетГод" + Ном);
			КонецЦикла;
		ИначеЕсли ИмяПоказателя = "НалоговыйОрган1" Тогда
			СтруктураДанныхТитульный.Вставить("НалоговыйОрган");
			Для Ном = 1 По 4 Цикл
				СтруктураДанныхТитульный.НалоговыйОрган = СокрЛП(СтруктураДанныхТитульный.НалоговыйОрган) + ПоказателиТаблПоле["НалоговыйОрган" + Ном];
				СтруктураДанныхТитульный.Удалить("НалоговыйОрган" + Ном);
			КонецЦикла;
		ИначеЕсли ИмяПоказателя = "ПоМесту1" Тогда
			СтруктураДанныхТитульный.Вставить("ПоМесту");
			Для Ном = 1 По 3 Цикл
				СтруктураДанныхТитульный.ПоМесту = СокрЛП(СтруктураДанныхТитульный.ПоМесту) + ПоказателиТаблПоле["ПоМесту" + Ном];
				СтруктураДанныхТитульный.Удалить("ПоМесту" + Ном);
			КонецЦикла;
		ИначеЕсли ИмяПоказателя = "Прил1" Тогда
			СтруктураДанныхТитульный.Вставить("Прил");
			Для Ном = 1 По 3 Цикл
				СтруктураДанныхТитульный.Прил = СокрЛП(СтруктураДанныхТитульный.Прил) + ПоказателиТаблПоле["Прил" + Ном];
				СтруктураДанныхТитульный.Удалить("Прил" + Ном);
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
	
	ЗаполнитьДатуВЯчейкахНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьФорматВыводаВПоляхВводаНаСервере(НаимРаздела)
	
	УстановитьФорматВыводаВПоляхВвода(ЭтаФорма, НаимРаздела);
	
КонецПроцедуры 

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьФорматВыводаВПоляхВвода(Форма, НаимРаздела) Экспорт
	Перем СтруктураГруппы;
	
	Если Форма.СтруктураРеквизитовФормы.ЕдиницаИзмерения = Форма.ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1 Тогда
		Форма.СтруктураРеквизитовФормы.мСтрокаФормата = "ЧЦ = 17; ЧДЦ = " + Форма.СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧС = 0";
	ИначеЕсли Форма.СтруктураРеквизитовФормы.ЕдиницаИзмерения = Форма.ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1000 Тогда
		Форма.СтруктураРеквизитовФормы.мСтрокаФормата = "ЧЦ = 17; ЧДЦ = " + Форма.СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧС = 3";
	ИначеЕсли Форма.СтруктураРеквизитовФормы.ЕдиницаИзмерения = Форма.ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1000000 Тогда
		Форма.СтруктураРеквизитовФормы.мСтрокаФормата = "ЧЦ = 17; ЧДЦ = " + Форма.СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧС = 6";
	КонецЕсли;
	
	Для Каждого СтрПоказатели Из Форма.мТаблицаСоставПоказателей Цикл
		
		Если НЕ НаимРаздела = СтрПоказатели.ИмяПоляТаблДокумента Тогда
			Продолжить;
		КонецЕсли;
		
		КодПоказателя				= СокрП(СтрПоказатели.КодПоказателяПоСоставу);
		ПризнМногострочность		= СокрП(СтрПоказатели.ПризнМногострочности);
		КодПоказателяПоСтруктуре	= СокрП(СтрПоказатели.КодПоказателяПоСтруктуре);
		КодПоказателяПоФорме		= СокрП(СтрПоказатели.КодПоказателяПоФорме);
		ТипДанныхПоказателя			= СокрП(СтрПоказатели.ТипДанныхПоказателя);
		ИмяПоказателя				= ?(ПустаяСтрока(СтрПоказатели.КодПоказателяПоФорме), КодПоказателя, КодПоказателяПоФорме);
		
		Если ПустаяСтрока(КодПоказателя) ИЛИ КодПоказателя = "===" ИЛИ КодПоказателя = "###" ИЛИ Лев(КодПоказателя, 2) = "//" Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТипДанныхПоказателя = "Е" И ПустаяСтрока(КодПоказателяПоСтруктуре) Тогда
			ТекТабличноеПоле = Форма.ТабличныйДокумент;
			Если ПризнМногострочность <> "/" Тогда
				ФорматируемаяОбласть = ТекТабличноеПоле.Области[ИмяПоказателя];
				ДопустимыйЗнакПоказателя = ФорматируемаяОбласть.ТипЗначения.КвалификаторыЧисла.ДопустимыйЗнак;
				ЧислоЕЗнак =  Форма.СтруктураРеквизитовФормы.мОписаниеТиповЧислоЕ;
				
				Если ДопустимыйЗнакПоказателя = ДопустимыйЗнак.Неотрицательный Тогда
					ЧислоЕЗнак = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(ЧислоЕЗнак.КвалификаторыЧисла.Разрядность,ЧислоЕЗнак.КвалификаторыЧисла.РазрядностьДробнойЧасти, ДопустимыйЗнакПоказателя));
				КонецЕсли;
				ФорматируемаяОбласть.ТипЗначения = ЧислоЕЗнак;
				ФорматируемаяОбласть.Формат = Форма.СтруктураРеквизитовФормы.мСтрокаФормата;
			Иначе
				// определяем кол-во строк многострочного раздела и применяем процедуру форматирования к данной графе по всем строкам
				НСтр = 1;
				Пока ТекТабличноеПоле.Области.Найти(ИмяПоказателя + "_" + Формат(НСтр, "ЧГ=0")) <> Неопределено Цикл
					ФорматируемаяОбласть = ТекТабличноеПоле.Области[ИмяПоказателя + "_" + Формат(НСтр, "ЧГ=0")];
					ДопустимыйЗнакПоказателя = ФорматируемаяОбласть.ТипЗначения.КвалификаторыЧисла.ДопустимыйЗнак;
					ЧислоЕЗнак =  Форма.СтруктураРеквизитовФормы.мОписаниеТиповЧислоЕ;
					Если ДопустимыйЗнакПоказателя = ДопустимыйЗнак.Неотрицательный Тогда
						ЧислоЕЗнак = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(ЧислоЕЗнак.КвалификаторыЧисла.Разрядность,ЧислоЕЗнак.КвалификаторыЧисла.РазрядностьДробнойЧасти, ДопустимыйЗнакПоказателя));
					КонецЕсли;
					ФорматируемаяОбласть.ТипЗначения = ЧислоЕЗнак;
					ФорматируемаяОбласть.Формат = Форма.СтруктураРеквизитовФормы.мСтрокаФормата;
					НСтр = НСтр + 1;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьДатуПодписи(Форма)
	
	Форма.ТабличныйДокумент.Области.ДатаПодписи.Значение = Форма.ДатаПодписи;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДатуВЯчейкахНаСервере() Экспорт
	
	ЗаполнитьДатуВЯчейках(ЭтаФорма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьДатуВЯчейках(Форма)
	
	Форма.ТабличныйДокумент.Области.ДатаПодписи.Значение = Форма.ДатаПодписи;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСведенияОбОрганизацииНаСервере(ВПрограммеИзмененаДатаПодписи = Ложь)
	
	ЗаполнитьСведенияОбОрганизации(ЭтаФорма, ВПрограммеИзмененаДатаПодписи);
	
	Если НЕ ВПрограммеИзмененаДатаПодписи Тогда
		ТабличныйДокумент.Области["ПоМесту"].Значение = КодПоМестуПоУмолчанию();
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьСведенияОбОрганизации(Форма, ИзмененаДатаПодписи = Ложь)
	
	ПолеТабличногоДокументаТитульный = Форма.ТабличныйДокумент;
	
	Если НЕ ИзмененаДатаПодписи Тогда
		
		СтрокаСведений = "ИННЮЛ, КППЮЛ, НаимЮЛПол, КодНО, НаимНО, ТипНП, ТелОрганизации, ФИО";
		СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(Форма.СтруктураРеквизитовФормы.Организация, Форма.ДатаПодписи, СтрокаСведений);
		
		Форма.ТабличныйДокумент.Области["ИНН1"].Значение = СведенияОбОрганизации.ИННЮЛ;
								
		Если ЗначениеЗаполнено(Форма.СтруктураРеквизитовФормы.РегистрацияВНалОргане) Тогда
			
			Форма.ТабличныйДокумент.Области["КПП1"].Значение = СокрЛП(Форма.СтруктураРеквизитовФормы.РегистрацияВНалОргане.КПП);
			
			Форма.ТабличныйДокумент.Области["НалоговыйОрган"].Значение = СокрЛП(Форма.СтруктураРеквизитовФормы.РегистрацияВНалОргане.Код);
			
		Иначе
			
			Форма.ТабличныйДокумент.Области["КПП1"].Значение = СведенияОбОрганизации.КППЮЛ;
			
			// заполняем код ИФНС
			КодНО = СведенияОбОрганизации.КодНО;
			Для Инд = СтрДлина(СведенияОбОрганизации.КодНО) + 1 По 4 Цикл
				КодНО = " " + КодНО;
			КонецЦикла;
			Форма.ТабличныйДокумент.Области["НалоговыйОрган"].Значение = КодНО;
			
		КонецЕсли;
		
		ПолеТабличногоДокументаТитульный.Области.НаимОрг.Значение = СокрЛП(СведенияОбОрганизации.НаимЮлПол);
						
		// заполняем телефон организации
		ПолеТабличногоДокументаТитульный.Области.ТелОрганизации.Значение = СокрЛП(СведенияОбОрганизации.ТелОрганизации);
		
	КонецЕсли;
		
	РегламентированнаяОтчетность.ПолучитьЗначениеОКВЭД(Форма.ДатаПодписи, Форма.СтруктураРеквизитовФормы);
	РегламентированнаяОтчетностьКлиентСервер.УстановитьЗначениеОКВЭД(Форма.ДатаПодписи,
																	 Форма.СтруктураРеквизитовФормы,
																	 ПолеТабличногоДокументаТитульный.Области.ОКВЭД.Значение);
	
	// заполняем сведения о подписантах
	Форма.ЗаполнитьСведенияОПодписантах();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСведенияОПодписантах() Экспорт
	
	ТипПодписанта = "1";
	Подписант = "";
	НаименованиеОрганизацииПредставителя = "";
	ДокументПредставителя = "";
	
	//выясним, есть ли представитель
	КодНО = СокрЛП(ТабличныйДокумент.Области.НалоговыйОрган.Значение);
	КПП   = СокрЛП(ТабличныйДокумент.Области.КПП1.Значение);
	
	СведенияОПредставителе = РегламентированнаяОтчетностьВызовСервера.ПолучитьПоКодамСведенияОПредставителе(СтруктураРеквизитовФормы.Организация, КодНО, КПП);
	
	ТипПодписанта = СведенияОПредставителе.ТипПодписанта;
	
	Если ТипПодписанта = "1" Тогда
		//представителя нет
		Если РегламентированнаяОтчетностьВызовСервера.ЭтоЮридическоеЛицо(СтруктураРеквизитовФормы.Организация) Тогда
			//подписант - руководитель
			СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(СтруктураРеквизитовФормы.Организация, ДатаПодписи, "ФИОРук, ФИО");
			Подписант = СокрЛП(?(ЗначениеЗаполнено(СведенияОбОрганизации.ФИОРук), СведенияОбОрганизации.ФИОРук, СведенияОбОрганизации.ФИО));	
		КонецЕсли;
	Иначе
		//есть представитель, подписант - он
		Подписант 								= СведенияОПредставителе.ФИОПредставителя;
		НаименованиеОрганизацииПредставителя 	= СведенияОПредставителе.НаименованиеОрганизацииПредставителя;
		ДокументПредставителя 					= СведенияОПредставителе.ДокументПредставителя;
	КонецЕсли;
	
	ТабличныйДокумент.Области.ПрПодп.Значение = ТипПодписанта;
	ТабличныйДокумент.Области.ОргПодписант.Значение = Подписант;
	ТабличныйДокумент.Области.ОргУп.Значение = НаименованиеОрганизацииПредставителя;
	ТабличныйДокумент.Области.ДокУпПред.Значение = ДокументПредставителя;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЦветФонаЯчейкиНаКлиенте(ИмяЯчейки = Неопределено, ВариантЗаполнения = Неопределено, ИмяТекущейСтраницыПанели = "") Экспорт
	
	РегламентированнаяОтчетностьКлиентСервер.УстановитьЦветФонаЯчейки(ЭтаФорма, ИмяЯчейки, ВариантЗаполнения, ИмяТекущейСтраницыПанели);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЦветФонаЯчейкиНаСервере(ИмяЯчейки = Неопределено, ВариантЗаполнения = Неопределено, ИмяТекущейСтраницыПанели = "") Экспорт
	
	РегламентированнаяОтчетностьКлиентСервер.УстановитьЦветФонаЯчейки(ЭтаФорма, ИмяЯчейки, ВариантЗаполнения, ИмяТекущейСтраницыПанели);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьОтчет(Команда)
	
	Если Элементы.РазделыОтчета.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СохранитьНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНаКлиенте(Автосохранение = Ложь, ВыполняемоеОповещение=Неопределено) Экспорт
	
	Если СтруктураДанныхТитульный.Количество() = 0
		ИЛИ СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
		СтруктураДанныхТитульный.Вставить("НалоговыйОрган", ТабличныйДокумент.Области.НалоговыйОрган.Значение);
		СтруктураДанныхТитульный.Вставить("КПП1", ТабличныйДокумент.Области.КПП1.Значение);
		СтруктураДанныхТитульный.Вставить("НомерКорректировки", ТабличныйДокумент.Области.НомерКорректировки.Значение);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СтруктураДанныхТитульный.НомерКорректировки) Тогда
		ЗначениеКорректировки = 0;
	Иначе
		ЗначениеКорректировки = Число(СтруктураДанныхТитульный.НомерКорректировки);
	КонецЕсли;
	Вариант = СтруктураРеквизитовФормы.ВидДокумента * ЗначениеКорректировки;
	
	КодИФНС = СтруктураДанныхТитульный.НалоговыйОрган;
	КПП = СтруктураДанныхТитульный.КПП1;
	
	Если НЕ РегламентированнаяОтчетностьКлиент.ПриЗаписиРегламентированногоОтчетаНаКлиенте(ЭтаФорма, КодИФНС, Автосохранение, Вариант) Тогда
		Возврат;
	КонецЕсли;
	
	ПодобныйОтчетСуществует = Ложь;
	ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки = Ложь;
	
	Если Элементы.РазделыОтчета.ТекущиеДанные = Неопределено Тогда
		НаименованиеТекущегоРаздела = СтруктураРеквизитовФормы.НаимТекущегоРаздела;
	Иначе
		НаименованиеТекущегоРаздела = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
	КонецЕсли;
	
	РезультатСохранения = ПередСохранением(КодИФНС, КПП, ПодобныйОтчетСуществует, Вариант, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, Автосохранение, НаименованиеТекущегоРаздела);
	
	ВидДокументаНомерКорректировкиИзменен = Неопределено;
	
	Если ПодобныйОтчетСуществует И Автосохранение Тогда
		Возврат;
	КонецЕсли;
	
	НуженВопросПередСохранением = (ПодобныйОтчетСуществует ИЛИ ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки);
	
	Если НуженВопросПередСохранением Тогда
		СохранитьНаКлиентеСВопросом(Автосохранение, КодИФНС, КПП, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, ПодобныйОтчетСуществует);
	Иначе
		ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНаКлиентеСВопросом(Автосохранение, КодИФНС, КПП, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, ПодобныйОтчетСуществует)
	
	Если ПодобныйОтчетСуществует Тогда
		
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(КодВозвратаДиалога.Да, "Сохранить");
		Кнопки.Добавить(КодВозвратаДиалога.Нет, "Отмена");
		
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Отчет с видом %1 уже существует.
		|Сохранить отчет с таким же видом?'"), ?(Вариант = 0, """Первичный""", """Корректирующий/" + Вариант + """"));
		Ответ = Неопределено;
		
		ДополнительныеПараметры = Новый Структура("Автосохранение, Вариант, ВыполняемоеОповещение, КодИФНС, КПП, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки", Автосохранение, Вариант, ВыполняемоеОповещение, КодИФНС, КПП, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки);
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросСохранитьОтчетСТакимЖеВидомЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, Кнопки, , Кнопки.Получить(1).Значение);
		
	Иначе
		
		СохранитьНаКлиентеСВопросомПродолжение(Автосохранение, КодИФНС, КПП, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросСохранитьОтчетСТакимЖеВидомЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	Автосохранение = ДополнительныеПараметры.Автосохранение;
	Вариант = ДополнительныеПараметры.Вариант;
	ВыполняемоеОповещение = ДополнительныеПараметры.ВыполняемоеОповещение;
	КодИФНС = ДополнительныеПараметры.КодИФНС;
	КПП = ДополнительныеПараметры.КПП;
	ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки = ДополнительныеПараметры.ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки;
	
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		
		Возврат;
		
	КонецЕсли;
	
	СохранитьНаКлиентеСВопросомПродолжение(Автосохранение, КодИФНС, КПП, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНаКлиентеСВопросомПродолжение(Автосохранение, КодИФНС, КПП, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки)
	
	Если ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки Тогда
		
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("ВидОтчета", Вариант);
		
		ФормаВопроса = РегламентированнаяОтчетностьКлиент.ПолучитьОбщуюФормуПоИмени("ВопросПриИзмененииВидаДокументаНомераКорректировки", ПараметрыФормы);
		ДополнительныеПараметры = Новый Структура("Автосохранение, Вариант, ВыполняемоеОповещение, КодИФНС, КПП", Автосохранение, Вариант, ВыполняемоеОповещение, КодИФНС, КПП);
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросПриИзмененииВидаДокументаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ФормаВопроса.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
		ФормаВопроса.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		ФормаВопроса.Открыть();
		
	Иначе
		Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Сохраняется %1...'"), ЭтаФорма.Заголовок), , , БиблиотекаКартинок.Записать);
		РезультатСохранения = Сохранить(Автосохранение, КодИФНС, КПП, Вариант, Ложь, Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
		ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПриИзмененииВидаДокументаЗавершение(КодВозврата, ДополнительныеПараметры) Экспорт
	
	Автосохранение = ДополнительныеПараметры.Автосохранение;
	Вариант = ДополнительныеПараметры.Вариант;
	ВыполняемоеОповещение = ДополнительныеПараметры.ВыполняемоеОповещение;
	КодИФНС = ДополнительныеПараметры.КодИФНС;
	КПП = ДополнительныеПараметры.КПП;
	
	Если КодВозврата = КодВозвратаДиалога.Да
		ИЛИ КодВозврата = КодВозвратаДиалога.Нет Тогда
		ВидДокументаНомерКорректировкиИзменен = ?(КодВозврата = КодВозвратаДиалога.Да, Истина, Ложь);
	Иначе
		Возврат;
	КонецЕсли;
	
	Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Сохраняется %1...'"), ЭтаФорма.Заголовок), , , БиблиотекаКартинок.Записать);
	РезультатСохранения = Сохранить(Автосохранение, КодИФНС, КПП, Вариант, ВидДокументаНомерКорректировкиИзменен, Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
	ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения)
	
	КлючУникальности = СтруктураРеквизитовФормы.мСохраненныйДок;
	
	Если РезультатСохранения Тогда
		
		РегламентированнаяОтчетностьКлиент.ПослеЗаписиРегламентированногоОтчета(ЭтаФорма);
		
		Если ВыполняемоеОповещение <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ВыполняемоеОповещение);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПередСохранением(КодИФНС, КПП, ПодобныйОтчетСуществует, Вариант, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, Автосохранение, НаимТекРаздела)
	
	Если РегламентированнаяОтчетность.БылиИзмененыКлючевыеРеквизитыОтчета(ЭтаФорма, КодИФНС, КПП)
		И РегламентированнаяОтчетность.СуществуетДокументСАналогичнымиРеквизитами(ЭтаФорма, КодИФНС, КПП) Тогда
		
		ПодобныйОтчетСуществует = Истина;
		
	КонецЕсли;
	
	СтруктураРеквизитовФормы.мЗаписываетсяНовыйДокумент = (СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено ИЛИ СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено);
	
	Если Вариант <> Неопределено И ((СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено) ИЛИ (СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено) ИЛИ (Вариант <> СтруктураРеквизитовФормы.мВариант)) Тогда
		
		Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено ИЛИ СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено Тогда
			
		ИначеЕсли Вариант <> СтруктураРеквизитовФормы.мВариант Тогда
			
			ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПодобныйОтчетСуществует
		ИЛИ ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Возврат Сохранить(Автосохранение, КодИФНС, КПП, Вариант, , НаимТекРаздела);
	
КонецФункции

&НаСервере
Процедура ЗаполнитьПустыеСтруктурыДанных()
	
	СохрТабличныйДокумент = Новый ТабличныйДокумент;
	
	СохрТабличныйДокумент.Вывести(ТабличныйДокумент);
	
	Для Каждого Раздел Из мСвойстваРазделовДекларации.ПолучитьЭлементы() Цикл
		
		Если НЕ Раздел.МногостраничностьВРазделе
			И (ЭтаФорма["СтруктураДанных" + Раздел.ИмяСтраницы].Количество() = 0) Тогда
			
			ТабличныйДокумент.Очистить();
			ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + Раздел.ИмяСтраницы));
			
			СохранитьДанныеРаздела(Раздел.ИмяСтраницы, Ложь);
			
		ИначеЕсли Раздел.МногостраничностьВРазделе
			И (ЭтаФорма[мСтруктураМногостраничныхРазделов[Раздел.ИмяСтраницы]][0].Данные.Количество() = 0) Тогда
			
			ТабличныйДокумент.Очистить();
			ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + Раздел.ИмяСтраницы));
			
			СохранитьДанныеРаздела(Раздел.ИмяСтраницы, Ложь);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(СохрТабличныйДокумент);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоказателиОтчетаНаСервере(ПоказателиОтчета)
	
	Префикс = "ПолеТабличногоДокумента";
	
	Для Каждого Раздел Из мСвойстваРазделовДекларации.ПолучитьЭлементы() Цикл
		
		Если НЕ Раздел.МногостраничностьВРазделе Тогда
			ПоказателиОтчета.Вставить(Префикс + Раздел.ИмяСтраницы, ЭтаФорма["СтруктураДанных" + Раздел.ИмяСтраницы]);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция Сохранить(Автосохранение = Ложь, КодИФНС, КПП, Вариант, ВидДокументаНомерКорректировкиИзменен = Неопределено, НаимТекРаздела) Экспорт
	
	ДанныеДляРазблокирования = Неопределено;
	
	Если НЕ СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
		Если НЕ СтруктураРеквизитовФормы.мБезОткрытияФормы Тогда
			ДанныеДляРазблокирования = Новый Структура("Ключ,ИдФормы",
			СтруктураРеквизитовФормы.мСохраненныйДок, ЭтаФорма.УникальныйИдентификатор);
		КонецЕсли;
		СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.ПолучитьОбъект();
	КонецЕсли;
	
	Если НЕ РегламентированнаяОтчетность.ПриЗаписиРегламентированногоОтчетаНаСервере(ЭтаФорма, КодИФНС, Автосохранение, Вариант, ВидДокументаНомерКорректировкиИзменен, СтруктураРеквизитовФормы.мСохраненныйДок) Тогда
		СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
		Возврат Ложь;
	КонецЕсли;
	
	// установим текущие значения реквизитов документа
	СтруктураРеквизитовФормы.мСохраненныйДок.ИсточникОтчета = Метаданные.Отчеты[ИмяОтчета(ЭтаФорма.ИмяФормы)].Имя;
	СтруктураРеквизитовФормы.мСохраненныйДок.НаименованиеОтчета = Метаданные.Отчеты[ИмяОтчета(ЭтаФорма.ИмяФормы)].ОсновнаяФорма.Синоним;
	СтруктураРеквизитовФормы.мСохраненныйДок.ДатаНачала                 = СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета;
	СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания              = СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета;
	СтруктураРеквизитовФормы.мСохраненныйДок.Периодичность              = СтруктураРеквизитовФормы.мПериодичность;
	СтруктураРеквизитовФормы.мСохраненныйДок.ВыбраннаяФорма             = СтруктураРеквизитовФормы.мВыбраннаяФорма;
	СтруктураРеквизитовФормы.мСохраненныйДок.Организация                = СтруктураРеквизитовФормы.Организация;
	СтруктураРеквизитовФормы.мСохраненныйДок.ДатаПодписи                = ДатаПодписи;
	СтруктураРеквизитовФормы.мСохраненныйДок.ЕдиницаИзмерения           = СтруктураРеквизитовФормы.ЕдиницаИзмерения;
	СтруктураРеквизитовФормы.мСохраненныйДок.ТочностьЕдиницыИзмерения   = СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения;
	СтруктураРеквизитовФормы.мСохраненныйДок.ВидОтчетности              = Перечисления.ВидыОтчетности.РегламентированнаяОтчетность;
	СтруктураРеквизитовФормы.мСохраненныйДок.Комментарий                = Комментарий;
	СтруктураРеквизитовФормы.мСохраненныйДок.КодНалоговогоОргана        = КодИФНС;
	СтруктураРеквизитовФормы.мСохраненныйДок.КПП        				= КПП;
	СтруктураРеквизитовФормы.мСохраненныйДок.Вид                        = Вариант;
	СтруктураРеквизитовФормы.мСохраненныйДок.ПредставлениеВида          = РегламентированнаяОтчетность.ПредставлениеВидаДокумента(СтруктураРеквизитовФормы.мСохраненныйДок.Вид);
	СтруктураРеквизитовФормы.мВариант = Вариант;
	
	СтруктураРеквизитовФормы.мСохраненныйДок.ФорматВыгрузки = "Автоматически";
	
	СохранитьДанныеРаздела(НаимТекРаздела, Ложь, Ложь);
	
	ЗаполнитьПустыеСтруктурыДанных();
	
	// формируем данные редактируемых ячеек таблицы
	ПоказателиОтчета = Новый Структура();
	
	ЗаполнитьПоказателиОтчетаНаСервере(ПоказателиОтчета);
	
	// формируем список сохранения
	СписокСохранения = Новый Структура();
	
	// вставляем данные редактируемых ячеек таблицы
	СписокСохранения.Вставить("ПоказателиОтчета", ПоказателиОтчета);
	
	ДанныеМногострочныхРазделов = Новый Структура;
	
	Для Каждого ЭлементСтруктуры Из мСтруктураМногострочныхРазделов Цикл
		
		ДанныеМногострочныхРазделов.Вставить(ЭлементСтруктуры.Ключ, ДанныеФормыВЗначение(ЭтаФорма[ЭлементСтруктуры.Значение], Тип("ТаблицаЗначений")));
		
	КонецЦикла;
	
	// вставляем данные многострочных разделов
	СписокСохранения.Вставить("ДанныеМногострочныхРазделов", ДанныеМногострочныхРазделов);
	
	ДанныеМногостраничныхРазделов = Новый Структура;
	МассивТиповНеопределено = Новый Массив;
	
	МассивТиповНеопределено.Добавить(Тип("Неопределено"));
	
	ОписаниеТиповНеопределено = Новый ОписаниеТипов(МассивТиповНеопределено);
	
	Для Каждого ЭлементСтруктуры Из мСтруктураМногостраничныхРазделов Цикл
		
		ДанныеМногостраничныхРазделов.Вставить(ЭлементСтруктуры.Ключ, ДанныеФормыВЗначение(ЭтаФорма[ЭлементСтруктуры.Значение], Тип("ТаблицаЗначений")));
		
		ТаблЗнач = Неопределено;
		
		Если ДанныеМногостраничныхРазделов.Свойство(ЭлементСтруктуры.Ключ, ТаблЗнач) Тогда
			
			Если НЕ ТаблЗнач.Колонки.Найти("Данные") = Неопределено Тогда
				
				ТаблЗнач.Колонки.Удалить("Данные");
				
				ТаблЗнач.Колонки.Добавить("Данные", ОписаниеТиповНеопределено);
				
				Ном = 0;
				
				Для Каждого СтрокаТаблЗнач Из ТаблЗнач Цикл
					
					СтрокаТаблЗнач.Данные = ЭтаФорма[ЭлементСтруктуры.Значение][Ном].Данные[0].Значение;
					
					Ном = Ном + 1;
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// вставляем данные многостраничных разделов
	СписокСохранения.Вставить("ДанныеМногостраничныхРазделов", ДанныеМногостраничныхРазделов);
	
	ДанныеВариантовАвтоЗаполнения = Новый Структура;
	
	Для Каждого ЭлементСтруктуры Из мСтруктураВариантыЗаполнения Цикл
		
		МассивТаблЗнач = Новый Массив;
		
		ДанныеВариантовАвтоЗаполнения.Вставить(ЭлементСтруктуры.Ключ, МассивТаблЗнач);
		
		Для Каждого ЭлементМассива Из ЭтаФорма["ТаблицаВариантыЗаполнения" + ЭлементСтруктуры.Ключ] Цикл
			
			МассивТаблЗнач.Добавить(ДанныеФормыВЗначение(ЭлементМассива.ТаблицаВариантовЗаполнения, Тип("ТаблицаЗначений")));
			
		КонецЦикла;
		
	КонецЦикла;
	
	СписокСохранения.Вставить("ДанныеВариантовАвтоЗаполнения", ДанныеВариантовАвтоЗаполнения);
	
	СписокСохранения.Вставить("ВерсияФормы", СтруктураРеквизитовФормы.мВерсияФормы);
	
	СписокСохранения.Вставить("СохранятьРасшифровку", СтруктураРеквизитовФормы.мСохранятьРасшифровку);
	
	Если СтруктураРеквизитовФормы.АдресВременногоХранилищаРасшифровки <> Неопределено Тогда
		
		ТаблицаРасшифровки = ПолучитьИзВременногоХранилища(СтруктураРеквизитовФормы.АдресВременногоХранилищаРасшифровки);
		
		Если СтруктураРеквизитовФормы.мСохранятьРасшифровку = Истина Тогда
			СписокСохранения.Вставить("Расшифровка", ТаблицаРасшифровки);
		КонецЕсли;
		
	КонецЕсли;
	
	СписокСохранения.Вставить("ФлПодсчетСтраниц", СтруктураРеквизитовФормы.мСчетчикСтраниц);
	
	СписокСохранения.Вставить("ФлОтклВыборЗначений", СтруктураРеквизитовФормы.мАвтоВыборКодов);
	
	СписокСохранения.Вставить("ФлПроверятьСоотношенияПриПечатиИВыгрузки", СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки);
	
	СписокСохранения.Вставить("Автозаполнение", СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);
	
	СписокСохранения.Вставить("ПечатьБезШтрихкодаРазрешена", СтруктураРеквизитовФормы.мПечатьБезШтрихкодаРазрешена);
	
	СписокСохранения.Вставить("ФормаВРедакцииПисьмаБС_4_11_5197", СтруктураРеквизитовФормы.ФормаВРедакцииПисьмаБС_4_11_5197);
	
	ХранилищеДанных = Новый ХранилищеЗначения(СписокСохранения);
	СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета = ХранилищеДанных;
	
	Попытка
		СтруктураРеквизитовФормы.мСохраненныйДок.Записать();
		РегламентированнаяОтчетность.СохранитьСтатусОтправкиРеглОтчета(ЭтаФорма);
	Исключение
		Если НЕ Автосохранение Тогда
			
			Сообщение = Новый СообщениеПользователю;
			
			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), РегламентированнаяОтчетностьКлиентСервер.СформироватьТекстСообщения(ОписаниеОшибки()));
			
			Сообщение.Сообщить();
			
		КонецЕсли;
		СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
		Возврат Ложь;
	КонецПопытки;
	
	Модифицированность = Ложь;
	
	СохранитьДеревоНастройкиСтраниц(СтруктураРеквизитовФормы.мСохраненныйДок);
	
	СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
	
	Если НЕ СтруктураРеквизитовФормы.мБезОткрытияФормы
       И НЕ СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
		
    	ЗаблокироватьДанныеДляРедактирования(СтруктураРеквизитовФормы.мСохраненныйДок, , ЭтаФорма.УникальныйИдентификатор);

    КонецЕсли;
	
	Если ДанныеДляРазблокирования <> Неопределено Тогда
		РазблокироватьДанныеДляРедактирования(ДанныеДляРазблокирования.Ключ, ДанныеДляРазблокирования.ИдФормы);
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Процедура СохранитьДеревоНастройкиСтраниц(Знач мСохраненныйДок)
	
	Если мСохраненныйДок <> Неопределено Тогда
		
		Если ТипЗнч(мСохраненныйДок) = Тип("ДокументСсылка.РегламентированныйОтчет") Тогда
			мСохраненныйДок = мСохраненныйДок.ПолучитьОбъект();
		КонецЕсли;
		
		Если Не мСохраненныйДок.ЭтоНовый() Тогда
			// Сохраняем выбранные листы для печати в хранилище
			ХранилищеДанных = Новый ХранилищеЗначения(РеквизитФормыВЗначение("мДеревоСтраницОтчета"));
			мСохраненныйДок.ДеревоНастройкиСтраниц = ХранилищеДанных;
			Попытка
				мСохраненныйДок.Записать();
			Исключение
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
Конецпроцедуры

&НаСервере
Функция СобратьДанныеТекущегоТаблПоляНаСервере(ИмяТабличногоПоля) Экспорт
	
	Возврат СобратьДанныеТекущегоТаблПоля(ЭтаФорма, ИмяТабличногоПоля);
	
КонецФункции 

&НаКлиенте
Функция СобратьДанныеТекущегоТаблПоляНаКлиенте(ИмяТабличногоПоля) Экспорт
	
	Возврат СобратьДанныеТекущегоТаблПоля(ЭтаФорма, ИмяТабличногоПоля);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СобратьДанныеТекущегоТаблПоля(Форма, ТабличноеПоле) Экспорт
	
	СтруктураДанныхПоля = Новый Структура;
	Для Каждого ТекущаяОбласть Из Форма[ТабличноеПоле].Области Цикл
		Если ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник И ТекущаяОбласть.СодержитЗначение = Истина Тогда
			СтруктураДанныхПоля.Вставить(ТекущаяОбласть.Имя, ТекущаяОбласть.Значение);
		КонецЕсли;
	КонецЦикла;
	
	Возврат СтруктураДанныхПоля;
	
КонецФункции

&НаКлиенте
Процедура ОбработкаВыбораВПолеТабличногоДокумента(Элемент, Область, СтандартнаяОбработка)
	
	Если СтрЧислоВхождений(Область.Имя, "ДобавитьСтроку") = 1 И Область.Текст <> "" Тогда
		ДобавитьСтроку("");
	ИначеЕсли СтрЧислоВхождений(Область.Имя, "УдалитьСтроку") = 1 И Область.Текст <> "" Тогда
		УдалитьСтроку("");
	ИначеЕсли СтрЧислоВхождений(Область.Имя, "ДобавитьСтраницу") > 0 И Область.Текст <> "" Тогда
		ДобавитьСтраницу("");
	ИначеЕсли СтрЧислоВхождений(Область.Имя, "УдалитьСтраницу") > 0 И Область.Текст <> "" Тогда
		УдалитьСтраницу("");
	ИначеЕсли Область.Имя = "СобратьДанные" Тогда
		СобратьДанные(Неопределено);
	КонецЕсли;
	
	Если РегламентированнаяОтчетностьКлиент.ВыбраннаяОбластьРегламентированногоОтчетаНеВерна(ЭтаФорма, Область, СтандартнаяОбработка) Тогда
		Возврат;
	КонецЕсли;
	
	Если СтрНайти(Область.Имя, "НалоговыйОрган") = 1 Тогда
		ОбработкаВыбораИФНС();
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли;
	
	ЭтоПолеВводаОснованияЛьготы = (СтрНайти(Область.Имя, "_Основание") > 0);
	Если ЭтоПолеВводаОснованияЛьготы Тогда
		ВвестиОснованиеЛьготы(Область);
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли;
	
	ПараметрВводаПоля = РегламентированнаяОтчетностьКлиентСервер.НайтиСвойстваПоказателя(ЭтаФорма, Область.Имя);
	
	//создание динамического списка выбора
	Если ПараметрВводаПоля <> Неопределено И ПараметрВводаПоля.ТаблицаЗначений.Количество() > 0 Тогда
		//обработка таблицы значений - удаление вариантов, не проходящих по условиям
		КодПоказателя = ПараметрВводаПоля.Показатель;
		КопироватьДанныеФормы(ПараметрВводаПоля.ТаблицаЗначений, ТЗВыбора);
		
		ТребРезультат = 0;
		Если КодПоказателя = "Период" Тогда
			
			НомерКвартала = Число(Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ=к"));
			
			ТребРезультат = НомерКвартала;
			
		КонецЕсли;
		
		Если ТребРезультат <> 0 Тогда
			
			РазмерТЗ = ТЗВыбора.Количество();
			Для Сч = 1 По РазмерТЗ Цикл
				ЭлементТЗ = ТЗВыбора[РазмерТЗ - Сч];
				Рез = ?(ЭлементТЗ.РезультатПроверки = "", 0, Число(ЭлементТЗ.РезультатПроверки));
				Если Рез <> 0 И Рез <> ТребРезультат Тогда
					ТЗВыбора.Удалить(ЭлементТЗ);
				КонецЕсли;
			КонецЦикла; 
		КонецЕсли;
		
		Если ТЗВыбора <> Неопределено И НЕ СтруктураРеквизитовФормы.мАвтоВыборКодов Тогда
			
			СтандартнаяОбработка = Ложь;
			ВвестиПоказатель(Элемент, Область, КодПоказателя, Ложь, ПараметрВводаПоля.ТекстПриВыборе, ТЗВыбора, СтандартнаяОбработка);
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
	
	УстановитьДоступностьОбластей(ЭтаФорма, СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
КонецПроцедуры

&НаКлиенте
Процедура ВвестиОснованиеЛьготы(Область)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ОснованиеЛьготы", Область.Значение);
	
	ФормаВвода = РегламентированнаяОтчетностьКлиент.ПолучитьОбщуюФормуПоИмени("ФормаВводаОснованияЛьготы", ПараметрыФормы, ЭтаФорма);
	
	ДополнительныеПараметры = Новый Структура("Область", Область);
	ОписаниеОповещения = Новый ОписаниеОповещения("ВвестиОснованиеЛьготыЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ФормаВвода.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
	ФормаВвода.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	ФормаВвода.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ВвестиОснованиеЛьготыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Область = ДополнительныеПараметры.Область;
	
	Если Результат <> Неопределено Тогда
		Область.Значение = Результат;
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораИФНС()
	
	КодИМНС = СокрЛП(ТабличныйДокумент.Области.НалоговыйОрган.Значение);
	КПП     = СокрЛП(ТабличныйДокумент.Области.КПП1.Значение); 
	ЗначенияДляОтбора = Новый Массив;
	ЗначенияДляОтбора.Добавить(Новый Структура("КодНО, КПП", КодИМНС, КПП));
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Организация", СтруктураРеквизитовФормы.Организация);
	ПараметрыФормы.Вставить("ЗначенияДляОтбора", ЗначенияДляОтбора);
	
	ФормаВыбораНалоговогоОргана = РегламентированнаяОтчетностьКлиент.ПолучитьОбщуюФормуПоИмени("ФормаВыбораНалоговогоОргана", ПараметрыФормы, ЭтаФорма);
	
	Если ФормаВыбораНалоговогоОргана.ТаблицаНО.Количество() <> 0 Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаВыбораИФНСЗавершение", ЭтотОбъект);
		ФормаВыбораНалоговогоОргана.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
		ФормаВыбораНалоговогоОргана.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		ФормаВыбораНалоговогоОргана.Открыть();
		
	ИначеЕсли НЕ ЗначениеЗаполнено(КодИМНС) Тогда
		
		Сообщение = Новый СообщениеПользователю;
		
		Сообщение.Текст = НСтр("ru='Код налогового органа необходимо задать в справочнике ""Организации"".'");
		
		Сообщение.Сообщить();
		
	Иначе
		
		Сообщение = Новый СообщениеПользователю;
		
		Сообщение.Текст = НСтр("ru='Для выбора инспекции, необходимо завести соответствующую запись в справочнике ""Регистрации в налоговом органе"".'");
		
		Сообщение.Сообщить();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораИФНСЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	Если РезультатВыбора <> Неопределено Тогда
		
		ВыбранныйКодНО = РезультатВыбора.КодНО;
		ДлинаКодаНО = СтрДлина(ВыбранныйКодНО);
		
		Для Инд = ДлинаКодаНО + 1 По 4 Цикл
			ВыбранныйКодНО = "0" + ВыбранныйКодНО;
		КонецЦикла;
		
		ТабличныйДокумент.Области["НалоговыйОрган"].Значение = ВыбранныйКодНО;
		ТабличныйДокумент.области["КПП1"].Значение= РезультатВыбора.КПП ;
		
		ЗаполнитьПоказателиПриИзмененииКодаНалоговогоОргана();
		
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоказателиПриИзмененииКодаНалоговогоОргана()
	
	ТабличныйДокумент.Области["ПоМесту"].Значение = КодПоМестуПоУмолчанию();
	
	ЗаполнитьСведенияОПодписантах();
	
КонецПроцедуры

&НаКлиенте
Процедура ВвестиПоказатель(Элемент, Область, КодПоказателя, Знач ЭтоСумма, Знач ТекстВыбора, ТаблицаВыбора, СтандартнаяОбработка, КолонкаПоиска = "Код")
	
	ИсходноеЗначение = ?(ТипЗнч(Область.Значение) = Тип("Строка"), СокрЛП(Область.Значение), Область.Значение);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Заголовок",          ТекстВыбора);
	ПараметрыФормы.Вставить("ТаблицаЗначений",    ТаблицаВыбора);
	ПараметрыФормы.Вставить("СтруктураДляПоиска", Новый Структура(КолонкаПоиска, ИсходноеЗначение));
	
	ДополнительныеПараметры = Новый Структура("КолонкаПоиска, Область", КолонкаПоиска, Область);
	ОписаниеОповещения = Новый ОписаниеОповещения("ВвестиПоказательЗавершение", ЭтотОбъект, ДополнительныеПараметры);	
	ОткрытьФорму("Обработка.ОбщиеОбъектыРеглОтчетности.Форма.ФормаВыбораЗначенияИзТаблицы", ПараметрыФормы, ЭтаФорма,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ВвестиПоказательЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	КолонкаПоиска = ДополнительныеПараметры.КолонкаПоиска;
	Область = ДополнительныеПараметры.Область;
	
	РезультатВыбора = Результат;
	
	Если РезультатВыбора = Неопределено Тогда
		УстановитьДоступностьОбластей(ЭтаФорма, СтруктураРеквизитовФормы.НаимТекущегоРаздела);
		Возврат;
	КонецЕсли;
	
	Область.Значение = РезультатВыбора[КолонкаПоиска];
	
	Модифицированность = Истина;
	
	ОбработкаИзмененияСодержимогоВПолеТабличногоДокумента(Область);
	
	УстановитьДоступностьОбластей(ЭтаФорма, СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
КонецПроцедуры

&НаКлиенте
Процедура РасчетНаКлиенте(ИмяСтраницыПанели = "", ОбластьИмя = "") Экспорт
	
	Расчет(ЭтаФорма, ИмяСтраницыПанели, ОбластьИмя);
	
КонецПроцедуры 

&НаСервере
Процедура РасчетНаСервере(ИмяСтраницыПанели = "", ОбластьИмя = "") Экспорт
	
	Расчет(ЭтаФорма, ИмяСтраницыПанели, ОбластьИмя);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура Расчет(Форма, ИмяСтраницыПанели = "", ОбластьИмя = "")
	
	Перем ТаблицаБлока;
	
	Если Форма.СтруктураРеквизитовФормы.мРежимПечати
		ИЛИ Форма.СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Тогда
		Возврат;
	КонецЕсли;
	
	Делитель = 13;
	
	Если ИмяСтраницыПанели = "Раздел2" Тогда
		
		Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел2" Тогда
			
			ПолеТабличногоДокументаРаздел2 = Форма.ТабличныйДокумент.Области;
			
			Делимое120 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, ПолеТабличногоДокументаРаздел2.П000020002003.Значение)
			+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, ПолеТабличногоДокументаРаздел2.П000020003003.Значение)
			+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, ПолеТабличногоДокументаРаздел2.П000020004003.Значение)
			+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, ПолеТабличногоДокументаРаздел2.П000020005003.Значение);
			
			Делимое140 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, ПолеТабличногоДокументаРаздел2.П000020002004.Значение)
			+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, ПолеТабличногоДокументаРаздел2.П000020003004.Значение)
			+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, ПолеТабличногоДокументаРаздел2.П000020004004.Значение)
			+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, ПолеТабличногоДокументаРаздел2.П000020005004.Значение);
			
			Делитель = 4;
			
			Если Месяц(Форма.СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) > 3 Тогда
				
				Делимое120 = Делимое120
				+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, ПолеТабличногоДокументаРаздел2.П000020006003.Значение)
				+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, ПолеТабличногоДокументаРаздел2.П000020007003.Значение)
				+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, ПолеТабличногоДокументаРаздел2.П000020008003.Значение);
				
				Делимое140 = Делимое140
				+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, ПолеТабличногоДокументаРаздел2.П000020006004.Значение)
				+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, ПолеТабличногоДокументаРаздел2.П000020007004.Значение)
				+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, ПолеТабличногоДокументаРаздел2.П000020008004.Значение);
				
				Делитель = 7;
				
			КонецЕсли;
			
			Если Месяц(Форма.СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) > 6 Тогда
				
				Делимое120 = Делимое120
				+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, ПолеТабличногоДокументаРаздел2.П000020009003.Значение)
				+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, ПолеТабличногоДокументаРаздел2.П000020010003.Значение)
				+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, ПолеТабличногоДокументаРаздел2.П000020011003.Значение);
				
				Делимое140 = Делимое140
				+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, ПолеТабличногоДокументаРаздел2.П000020009004.Значение)
				+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, ПолеТабличногоДокументаРаздел2.П000020010004.Значение)
				+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, ПолеТабличногоДокументаРаздел2.П000020011004.Значение);
				
				Делитель = 10;
				
			КонецЕсли;
			
			ПолеТабличногоДокументаРаздел2.П000020012003.Значение = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Делимое120 / Делитель);
			ПолеТабличногоДокументаРаздел2.П000020014003.Значение = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Делимое140 / Делитель);
			
			СтоимостьОблагаемогоНалогомИмущества = Макс(ПолеТабличногоДокументаРаздел2.П000020012003.Значение 
			- ПолеТабличногоДокументаРаздел2.П000020014003.Значение, 0);
			
			КодВидаИмущества = СокрЛП(ПолеТабличногоДокументаРаздел2.П000020000101.Значение);
			
			ВыпУсловие1 = (КодВидаИмущества = "1" ИЛИ КодВидаИмущества = "3" ИЛИ КодВидаИмущества = "5" ИЛИ КодВидаИмущества = "6");
			Если Год(Форма.СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) >= 2015 Тогда
				ВыпУсловие1 = (ВыпУсловие1 ИЛИ КодВидаИмущества = "8");
			КонецЕсли;
			
			ВыпУсловие2 = (КодВидаИмущества = "2");
			
			Если ВыпУсловие1 Тогда
				
				Делимое = СтоимостьОблагаемогоНалогомИмущества * ПолеТабличногоДокументаРаздел2.П000020017003.Значение / 100;
				
				ПолеТабличногоДокументаРаздел2.П000020018003.Значение = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Делимое / 4);
				
			ИначеЕсли ВыпУсловие2 Тогда
				
				Коэффициент150 = ?(ПолеТабличногоДокументаРаздел2.П000020015003_Знам.Значение = 0, 0, СтоимостьОблагаемогоНалогомИмущества * ПолеТабличногоДокументаРаздел2.П000020015003_Числ.Значение / ПолеТабличногоДокументаРаздел2.П000020015003_Знам.Значение);
				
				Делимое = Коэффициент150 * ПолеТабличногоДокументаРаздел2.П000020017003.Значение / 100;
				
				ПолеТабличногоДокументаРаздел2.П000020018003.Значение = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Делимое / 4);
				
			Иначе
				
				ПолеТабличногоДокументаРаздел2.П000020018003.Значение = 0;
				
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ИмяСтраницыПанели = "Раздел3" Тогда
		
		Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел3" Тогда
			
			ПолеТабличногоДокументаРаздел3 = Форма.ТабличныйДокумент.Области;
			
			КоэффДоляСтоимости = ?(ПолеТабличногоДокументаРаздел3.П000030005003_Знам.Значение = 0, 1, ПолеТабличногоДокументаРаздел3.П000030005003_Числ.Значение / ПолеТабличногоДокументаРаздел3.П000030005003_Знам.Значение);
			
			П000030008003_Числ = ПолеТабличногоДокументаРаздел3.П000030008003_Числ.Значение;
			П000030008003_Знам = ПолеТабличногоДокументаРаздел3.П000030008003_Знам.Значение;
			КоэффК = 1;
			Если ЗначениеЗаполнено(П000030008003_Числ) И ЗначениеЗаполнено(П000030008003_Знам) Тогда
				Если Число(П000030008003_Знам) > 0 Тогда
					КоэффК = Число(П000030008003_Числ) / Число(П000030008003_Знам);
				КонецЕсли;
			КонецЕсли;
			
			Разность020И030 = Макс(РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, ПолеТабличногоДокументаРаздел3.П000030002003.Значение) - РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, ПолеТабличногоДокументаРаздел3.П000030003003.Значение), 0);
			СтавкаНалога = ПолеТабличногоДокументаРаздел3.П000030007003.Значение / 100;
			
			ЗначениеСтроки090 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Разность020И030 * КоэффДоляСтоимости * СтавкаНалога * КоэффК / 4);
			ПолеТабличногоДокументаРаздел3.П000030009003.Значение = ЗначениеСтроки090;
			
		КонецЕсли;
		
	ИначеЕсли ИмяСтраницыПанели = "" Тогда
		
		ПолныйРасчетРаздела2(Форма);
		Расчет(Форма, "Раздел2");
		ПолныйРасчетРаздела3(Форма);
		Расчет(Форма, "Раздел3");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПолныйРасчетРаздела2(Форма, ОбластьИмя = "")
	
	Для Каждого СтраницаРаздела2 Из Форма.ТаблицаСтраницыРазделаРаздел2 Цикл
		
		ПолеТабличногоДокументаРаздел2 = СтраницаРаздела2.Данные[0].Значение;
		
		Если ПолеТабличногоДокументаРаздел2.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Делимое120 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, ПолеТабличногоДокументаРаздел2.П000020002003)
		+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, ПолеТабличногоДокументаРаздел2.П000020003003)
		+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, ПолеТабличногоДокументаРаздел2.П000020004003)
		+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, ПолеТабличногоДокументаРаздел2.П000020005003);
		
		Делимое140 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, ПолеТабличногоДокументаРаздел2.П000020002004)
		+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, ПолеТабличногоДокументаРаздел2.П000020003004)
		+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, ПолеТабличногоДокументаРаздел2.П000020004004)
		+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, ПолеТабличногоДокументаРаздел2.П000020005004);
		
		Делитель = 4;
		
		Если Месяц(Форма.СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) > 3 Тогда
			
			Делимое120 = Делимое120
			+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, ПолеТабличногоДокументаРаздел2.П000020006003)
			+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, ПолеТабличногоДокументаРаздел2.П000020007003)
			+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, ПолеТабличногоДокументаРаздел2.П000020008003);
			
			Делимое140 = Делимое140
			+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, ПолеТабличногоДокументаРаздел2.П000020006004)
			+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, ПолеТабличногоДокументаРаздел2.П000020007004)
			+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, ПолеТабличногоДокументаРаздел2.П000020008004);
			
			Делитель = 7;
			
		КонецЕсли;
		
		Если Месяц(Форма.СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) > 6 Тогда
			
			Делимое120 = Делимое120
			+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, ПолеТабличногоДокументаРаздел2.П000020009003)
			+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, ПолеТабличногоДокументаРаздел2.П000020010003)
			+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, ПолеТабличногоДокументаРаздел2.П000020011003);
			
			Делимое140 = Делимое140
			+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, ПолеТабличногоДокументаРаздел2.П000020009004)
			+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, ПолеТабличногоДокументаРаздел2.П000020010004)
			+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, ПолеТабличногоДокументаРаздел2.П000020011004);
			
			Делитель = 10;
			
		КонецЕсли;
		
		ПолеТабличногоДокументаРаздел2.П000020012003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Делимое120 / Делитель);
		ПолеТабличногоДокументаРаздел2.П000020014003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Делимое140 / Делитель);
		
		СтоимостьОблагаемогоНалогомИмущества = Макс(ПолеТабличногоДокументаРаздел2.П000020012003 
		- ПолеТабличногоДокументаРаздел2.П000020014003, 0);
		
		КодВидаИмущества = СокрЛП(ПолеТабличногоДокументаРаздел2.П000020000101);
		
		ВыпУсловие1 = (КодВидаИмущества = "1" ИЛИ КодВидаИмущества = "3" ИЛИ КодВидаИмущества = "5" ИЛИ КодВидаИмущества = "6");
		Если Год(Форма.СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) >= 2015 Тогда
			ВыпУсловие1 = (ВыпУсловие1 ИЛИ КодВидаИмущества = "8");
		КонецЕсли;
		
		ВыпУсловие2 = (КодВидаИмущества = "2");
		
		Если ВыпУсловие1 Тогда
			
			Делимое = СтоимостьОблагаемогоНалогомИмущества * ПолеТабличногоДокументаРаздел2.П000020017003 / 100;
			
			ПолеТабличногоДокументаРаздел2.П000020018003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Делимое / 4);
			
		ИначеЕсли ВыпУсловие2 Тогда
			
			Коэффициент150 = ?(ПолеТабличногоДокументаРаздел2.П000020015003_Знам = 0, 0, СтоимостьОблагаемогоНалогомИмущества * ПолеТабличногоДокументаРаздел2.П000020015003_Числ / ПолеТабличногоДокументаРаздел2.П000020015003_Знам);
			
			Делимое = Коэффициент150 * ПолеТабличногоДокументаРаздел2.П000020017003 / 100;
			
			ПолеТабличногоДокументаРаздел2.П000020018003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Делимое / 4);
			
		Иначе
			
			ПолеТабличногоДокументаРаздел2.П000020018003 = 0;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПолныйРасчетРаздела3(Форма, ОбластьИмя = "")
	
	Для Каждого СтраницаРаздела3 Из Форма.ТаблицаСтраницыРазделаРаздел3 Цикл
		
		ПолеТабличногоДокументаРаздел3 = СтраницаРаздела3.Данные[0].Значение;
		
		Если ПолеТабличногоДокументаРаздел3.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		КоэффДоляСтоимости = ?(ПолеТабличногоДокументаРаздел3.П000030005003_Знам = 0, 1, ПолеТабличногоДокументаРаздел3.П000030005003_Числ / ПолеТабличногоДокументаРаздел3.П000030005003_Знам);
		
		П000030008003_Числ = ПолеТабличногоДокументаРаздел3.П000030008003_Числ;
		П000030008003_Знам = ПолеТабличногоДокументаРаздел3.П000030008003_Знам;
		КоэффК = 1;
		Если ЗначениеЗаполнено(П000030008003_Числ) И ЗначениеЗаполнено(П000030008003_Знам) Тогда
			Если Число(П000030008003_Знам) > 0 Тогда
				КоэффК = Число(П000030008003_Числ) / Число(П000030008003_Знам);
			КонецЕсли;
		КонецЕсли;
		
		Разность020И030 = Макс(РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, ПолеТабличногоДокументаРаздел3.П000030002003) - РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, ПолеТабличногоДокументаРаздел3.П000030003003), 0);
		СтавкаНалога = ПолеТабличногоДокументаРаздел3.П000030007003 / 100;
		
		ЗначениеСтроки090 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Разность020И030 * КоэффДоляСтоимости * СтавкаНалога * КоэффК / 4);
		ПолеТабличногоДокументаРаздел3.П000030009003 = ЗначениеСтроки090;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаИзмененияСодержимогоВПолеТабличногоДокумента(Область)
	
	ИмяПоказателя = Область.Имя;
	ИмяРаздела    = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
	
	Если ИмяПоказателя = "ДатаПодписи" Тогда 
		ДатаПодписи = Область.Значение;
		ЗаполнитьСведенияОбОрганизацииНаСервере(Истина);
		Модифицированность = Истина;
	ИначеЕсли ИмяПоказателя = "НомерКорректировки" Тогда 
		ОписаниеТипа = Новый ОписаниеТипов("Число");
		НомерКорректировки = ОписаниеТипа.ПривестиЗначение(Область.Значение);
		СтруктураРеквизитовФормы.ВидДокумента = ?(НомерКорректировки = 0, 0, 1);
		Область.Значение = Строка(НомерКорректировки);
		РегламентированнаяОтчетностьКлиентСервер.УстановитьЗначениеОКВЭД(ДатаПодписи,
																	 СтруктураРеквизитовФормы,
																	 ТабличныйДокумент.Области.ОКВЭД.Значение);
		Модифицированность = Истина;
	КонецЕсли;
	
	Если ИмяПоказателя = "ОКВЭД" И НЕ ПустаяСтрока(Область.Значение) И НЕ РегламентированнаяОтчетностьКлиентСервер.ОКВЭДСоответствуетТребованиям(Область.Значение) Тогда
		Сообщение = Новый СообщениеПользователю;
		
		Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='На титульном листе задано некорректное значение кода вида деятельности по ОКВЭД.%1Допустимы значения, соответствующие следующим шаблонам:%2""XX"", ""XX.X"", ""XX.XX"", ""XX.XX.X"", ""XX.XX.XX"" (X - любая цифра).'"), Символы.ПС, Символы.ПС);
		
		Сообщение.Сообщить();
	КонецЕсли;
	
	Если ИмяПоказателя = "П000030008003_Числ" Тогда
		Если ЗначениеЗаполнено(Область.Значение) Тогда
			ТабличныйДокумент.Области.Найти("П000030008003_Знам").Значение
			= ЗначениеЗнаменателяКоэффициентаК(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
		Иначе
			ТабличныйДокумент.Области.Найти("П000030008003_Знам").Значение = "";
		Конецесли;
	КонецЕсли;
	
	Модифицированность = Истина;
	
	Если ИмяРаздела = "Раздел2" ИЛИ ИмяРаздела = "Раздел3" Тогда
		
		ПозицияПодстроки = СтрНайти(Область.Имя, "_");
		
		Если ПозицияПодстроки > 0 Тогда
			ИмяОбласти = Лев(ИмяОбласти, ПозицияПодстроки - 1);
		КонецЕсли;
		
		РасчетНаКлиенте(ИмяРаздела, ИмяОбласти);
		
	КонецЕсли;
	
	УстановитьДоступностьОбластей(ЭтаФорма, ИмяРаздела);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ЗначениеЗнаменателяКоэффициентаК(ДатаОкончания)
	
	Если Год(ДатаОкончания) >= 2016 Тогда
		Возврат "3";
	Иначе // годы 2014 и 2015
		Возврат Формат(Месяц(ДатаОкончания));
	КонецЕсли;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьОбластей(Форма, ИмяСтраницыПанели = "")
	
	Если ИмяСтраницыПанели = "Титульный" Тогда
		
		ОпределяющаяОбласть    = Форма.ТабличныйДокумент.Области.КодФормыРеорганизации;
		ОбрабатываемаяОбласть1 = Форма.ТабличныйДокумент.Области.ИННРеорганизованнойОрганизации;
		ОбрабатываемаяОбласть2 = Форма.ТабличныйДокумент.Области.КППРеорганизованнойОрганизации;
		Если ПустаяСтрока(ОпределяющаяОбласть.Значение) Тогда
			ЗапретитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть1);
			ЗапретитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть2);
		Иначе
			РазрешитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть1);
			РазрешитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть2);
		КонецЕсли;
		
	ИначеЕсли ИмяСтраницыПанели = "Раздел2" Тогда
		
		КодВидаИмуществаРаздела2 = Форма.ТабличныйДокумент.Области.П000020000101.Значение;
		
		ОбрабатываемаяОбласть1 = Форма.ТабличныйДокумент.Области.П000020015003_Числ;
		ОбрабатываемаяОбласть2 = Форма.ТабличныйДокумент.Области.П000020015003_Знам;
		Если КодВидаИмуществаРаздела2 = "2" Тогда
			РазрешитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть1);
			РазрешитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть2);
		Иначе
			ЗапретитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть1);
			ЗапретитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть2);
		КонецЕсли;
		
		ОпределяющаяОбласть   = Форма.ТабличныйДокумент.Области.П000020013003_КодЛьготы;
		ОбрабатываемаяОбласть = Форма.ТабличныйДокумент.Области.П000020013003_Основание;
		Если ОпределяющаяОбласть.Значение = "2012000" Тогда
			РазрешитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть);
			УстановитьОснованиеЛьготыПоУмолчанию(ОбрабатываемаяОбласть);
		Иначе
			ЗапретитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть);
		КонецЕсли;
		
		ОпределяющаяОбласть   = Форма.ТабличныйДокумент.Области.П000020016003_КодЛьготы;
		ОбрабатываемаяОбласть = Форма.ТабличныйДокумент.Области.П000020016003_Основание;
		Если ОпределяющаяОбласть.Значение = "2012400" Тогда
			РазрешитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть);
			УстановитьОснованиеЛьготыПоУмолчанию(ОбрабатываемаяОбласть);
		Иначе
			ЗапретитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть);
		КонецЕсли;
		
		ОпределяющаяОбласть    = Форма.ТабличныйДокумент.Области.П000020019003_КодЛьготы;
		ОбрабатываемаяОбласть1 = Форма.ТабличныйДокумент.Области.П000020019003_Основание;
		ОбрабатываемаяОбласть2 = Форма.ТабличныйДокумент.Области.П000020020003;
		
		Если ОпределяющаяОбласть.Значение = "2012500" Тогда
			РазрешитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть1);
			РазрешитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть2);
			
			УстановитьОснованиеЛьготыПоУмолчанию(ОбрабатываемаяОбласть1);
		Иначе
			ЗапретитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть1);
			ЗапретитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть2);
		КонецЕсли;
		
	ИначеЕсли ИмяСтраницыПанели = "Раздел3" Тогда
		
		ОпределяющаяОбласть   = Форма.ТабличныйДокумент.Области.П000030004003_КодЛьготы;
		ОбрабатываемаяОбласть = Форма.ТабличныйДокумент.Области.П000030004003_Основание;
		Если ОпределяющаяОбласть.Значение = "2012000" Тогда
			РазрешитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть);
			УстановитьОснованиеЛьготыПоУмолчанию(ОбрабатываемаяОбласть);
		Иначе
			ЗапретитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть);
		КонецЕсли;
		
		ОпределяющаяОбласть   = Форма.ТабличныйДокумент.Области.П000030006003_КодЛьготы;
		ОбрабатываемаяОбласть = Форма.ТабличныйДокумент.Области.П000030006003_Основание;
		Если ОпределяющаяОбласть.Значение = "2012400" Тогда
			РазрешитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть);
			УстановитьОснованиеЛьготыПоУмолчанию(ОбрабатываемаяОбласть);
		Иначе
			ЗапретитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть);
		КонецЕсли;
		
		ОбрабатываемаяОбласть = Форма.ТабличныйДокумент.Области.П000030008003_Знам;
		ЗапретитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть, Ложь);
		
		ОпределяющаяОбласть    = Форма.ТабличныйДокумент.Области.П000030010003_КодЛьготы;
		ОбрабатываемаяОбласть1 = Форма.ТабличныйДокумент.Области.П000030010003_Основание;
		ОбрабатываемаяОбласть2 = Форма.ТабличныйДокумент.Области.П000030011003;
		Если ОпределяющаяОбласть.Значение = "2012500" Тогда
			РазрешитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть1);
			РазрешитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть2);
			
			УстановитьОснованиеЛьготыПоУмолчанию(ОбрабатываемаяОбласть1);
		Иначе
			ЗапретитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть1);
			ЗапретитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть2);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗапретитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть, ОчищатьЗначение = Истина)
	
	ЦветНедоступнойОбласти = Форма.мСтруктураЦветовРаскраски["_5"];
	
	ОбрабатываемаяОбласть.Защита   = Истина;
	ОбрабатываемаяОбласть.ЦветФона = ЦветНедоступнойОбласти;
	
	Если ОчищатьЗначение Тогда
		ТипЗначенияОбласти = ТипЗнч(ОбрабатываемаяОбласть.Значение);
		Если ТипЗначенияОбласти = Тип("Число") Тогда
			ОбрабатываемаяОбласть.Значение = 0;
		ИначеЕсли ТипЗначенияОбласти = Тип("Строка") Тогда
			ОбрабатываемаяОбласть.Значение = "";
		Иначе
			ОбрабатываемаяОбласть.Значение = Неопределено;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставленияПоРазделуНаСервере(Знач ИмяРаздела) Экспорт
КонецПроцедуры

&НаКлиенте
Процедура ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставленияПоРазделуНаКлиенте(Знач ИмяРаздела) Экспорт
КонецПроцедуры

&НаСервере
Процедура ЗаполнениеЗначенийВКвадратикахНаСервере(Знач ИмяСтраницы) Экспорт
	
	ЗаполнениеЗначенийВКвадратиках(ЭтаФорма, ИмяСтраницы);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнениеЗначенийВКвадратиках(Форма, Знач ИмяСтраницы)
КонецПроцедуры

&НаСервере
Функция ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ИмяЛиста = Неопределено) Экспорт
	
	ИдГрупп = Новый Структура;
	ИдГрупп.Вставить("ИдМСЧ_Раздел1", СтруктураРеквизитовФормы.ИдМСЧ_Раздел1);
	
	Возврат ОпределитьИдМногострочногоРазделаПоАктивнойСтранице(ИмяЛиста, , ИдГрупп);
	
КонецФункции

&НаКлиенте
Функция ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаКлиенте(ИмяЛиста = Неопределено) Экспорт
	
	ИдГрупп = Новый Структура;
	ИдГрупп.Вставить("ИдМСЧ_Раздел1", СтруктураРеквизитовФормы.ИдМСЧ_Раздел1);
	
	Возврат ОпределитьИдМногострочногоРазделаПоАктивнойСтранице(ИмяЛиста, , ИдГрупп);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ОпределитьИдМногострочногоРазделаПоАктивнойСтранице(ИмяЛиста = Неопределено, ТекущаяСтраница, ИдГрупп)
	Перем ИмяГруппы;
	
	Если ИмяЛиста = Неопределено Тогда
		ИмяТекущейСтраницыПанели = ТекущаяСтраница.Имя;
	Иначе
		ИмяТекущейСтраницыПанели = ИмяЛиста;
	КонецЕсли;
	
	Если ИмяТекущейСтраницыПанели = "Раздел1" Тогда
		ИмяГруппы = ИдГрупп.ИдМСЧ_Раздел1;
	КонецЕсли;
	
	Возврат ИмяГруппы;
	
КонецФункции

&НаСервере
Функция ОпределитьТабличноеПолеПоИдМногострочногоРазделаНаСервере(ИдГруппы) Экспорт
	
	ИдГрупп = Новый Структура;
	ИдГрупп.Вставить("ИдМСЧ_Раздел1", СтруктураРеквизитовФормы.ИдМСЧ_Раздел1);
	
	Возврат ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИдГруппы, ИдГрупп);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИдГруппы, ИдГрупп) Экспорт
	
	Перем ТекТабличноеПоле;
	
	Если ИдГруппы = ИдГрупп.ИдМСЧ_Раздел1 Тогда
		
		ТекТабличноеПоле = "Раздел1";
		
	КонецЕсли;
	
	Возврат ТекТабличноеПоле;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура РазрешитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть)
	
	ЦветОбластиРучногоВвода = Форма.мСтруктураЦветовРаскраски["_0"];
	
	ОбрабатываемаяОбласть.Защита   = Ложь;
	ОбрабатываемаяОбласть.ЦветФона = ЦветОбластиРучногоВвода;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗаголовокФормы()
	
	СтруктураРеквизитовФормы.СтрПериодОтчета = ПредставлениеПериода(НачалоДня(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета), КонецДня(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета), "ФП = Истина");
	
КонецПроцедуры

&НаСервере
Процедура УстановитьМаскиВПоляхВвода(ИмяТекРаздела)
	
	МаскаОКТМО = "99999999999";
	МаскаКБК = "99999999999999999999";
	
	// Титульный лист.
	Если ИмяТекРаздела = "Титульный" Тогда
		
		ТабличныйДокумент.Области.Период.Маска = "99";
		
		ТабличныйДокумент.Области.НалоговыйОрган.Маска = "9999";
		
		ТабличныйДокумент.Области.ПоМесту.Маска = "999";
		
		ТабличныйДокумент.Области.КодФормыРеорганизации.Маска = "9";
		ТабличныйДокумент.Области.ИННРеорганизованнойОрганизации.Маска = "9999999999";
		
		ТабличныйДокумент.Области.Прил.Маска = "999";
		
		// Раздел 1.
	ИначеЕсли ИмяТекРаздела = "Раздел1" Тогда
		
		ТабличныйДокумент.Области.П000010001003_1.Маска = МаскаОКТМО;
		ТабличныйДокумент.Области.П000010002003_1.Маска = МаскаКБК;
		
		// Раздел 2.
	ИначеЕсли ИмяТекРаздела = "Раздел2" Тогда
		
		ТабличныйДокумент.Области.П000020000101.Маска = "9";
		ТабличныйДокумент.Области.П000020001001.Маска = МаскаОКТМО;
		
		ТабличныйДокумент.Области.П000020013003_КодЛьготы.Маска = "9999999";
		ТабличныйДокумент.Области.П000020016003_КодЛьготы.Маска = "9999999";
		ТабличныйДокумент.Области.П000020019003_КодЛьготы.Маска = "9999999";
		
		// Раздел 3.
	ИначеЕсли ИмяТекРаздела = "Раздел3" Тогда
		
		ТабличныйДокумент.Области.П000030001001.Маска = МаскаОКТМО;
		
		ТабличныйДокумент.Области.П000030004003_КодЛьготы.Маска = "9999999";
		ТабличныйДокумент.Области.П000030006003_КодЛьготы.Маска = "9999999";
		ТабличныйДокумент.Области.П000030010003_КодЛьготы.Маска = "9999999";
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОснованиеЛьготыПоУмолчанию(ОбластьОснованияЛьготы)
	
	Если ПустаяСтрока(ОбластьОснованияЛьготы.Значение) Тогда
		ОбластьОснованияЛьготы.Значение = "000000000000";
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СохранитьДанныеРаздела(НаимРаздела, ОчищатьРазделЕслиЕстьМногострочность, ИзменятьАктивнуюСтраницу = Истина)
	
	// Многострочные разделы.
	//
	Если НаимРаздела = "Раздел1" Тогда
		
		ЭтаФорма["СтруктураДанных" + НаимРаздела] = СобратьДанныеТекущегоТаблПоля(ЭтаФорма, "ТабличныйДокумент");
		
		ИмяГруппы = ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(НаимРаздела);
		
		ОбновитьСтруктуруМногострочногоРаздела(ЭтаФорма, ИмяГруппы);
		
	// Многостраничные разделы.
	//
	ИначеЕсли НаимРаздела = "Раздел2"
		ИЛИ НаимРаздела = "Раздел3" Тогда
		
		СтруктураДанных = Новый Структура;
		
		Для Каждого Область Из ТабличныйДокумент.Области Цикл
			
			Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник И Область.СодержитЗначение Тогда
				СтруктураДанных.Вставить(Область.Имя, Область.Значение);
			КонецЕсли;
			
		КонецЦикла;
		
		Если НаимРаздела = "Раздел2" Тогда
			
			НаимТаблицыСтраницы = "ТаблицаСтраницыРазделаРаздел2";
			
		ИначеЕсли НаимРаздела = "Раздел3" Тогда
			
			НаимТаблицыСтраницы = "ТаблицаСтраницыРазделаРаздел3";
			
		КонецЕсли;
		
		АктивнаяСтраница = ЭтаФорма[НаимТаблицыСтраницы].НайтиСтроки(Новый Структура("АктивнаяСтраница", Истина));
		
		Если АктивнаяСтраница.Количество() > 0 Тогда
			
			АктивнаяСтраница = АктивнаяСтраница[0];
			
			АктивнаяСтраница.Данные.Очистить();
			АктивнаяСтраница.Данные.Добавить(СтруктураДанных);
			
			АктивнаяСтраница.АктивнаяСтраница = НЕ ИзменятьАктивнуюСтраницу;
			
		КонецЕсли;
		
	// Обычные разделы.
	//
	Иначе
		
		ЭтаФорма["СтруктураДанных" + НаимРаздела] = СобратьДанныеТекущегоТаблПоля(ЭтаФорма, "ТабличныйДокумент");
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиМакетСтраницыВТабличныйДокументНаСервере(ИмяТекРаздела, НомерСтраницыРазделаОтчета)
	
	СохранитьДанныеРаздела(СтруктураРеквизитовФормы.НаимТекущегоРаздела, Истина);
	ВывестиМакетВТаблДокНаСервере(ИмяТекРаздела, НомерСтраницыРазделаОтчета);
	СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяТекРаздела;
	СтруктураРеквизитовФормы.НомерТекущейСтраницы = НомерСтраницыРазделаОтчета;
	УстановитьДоступностьОбластей(ЭтаФорма, ИмяТекРаздела);
	
КонецПроцедуры 

&НаКлиенте
Процедура РазделыОтчетаПриАктивизацииСтроки(Элемент)
	
	Если Элемент.ТекущиеДанные = Неопределено
		ИЛИ Элемент.ТекущаяСтрока = СтруктураРеквизитовФормы.ТекущаяСтрокаРазделовОтчета Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураРеквизитовФормы.ТекущаяСтрокаРазделовОтчета = Элемент.ТекущаяСтрока;
	
	Элементы.ОчиститьТекущуюСтраницу.Доступность = Истина;
	
	Если СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере Тогда
		
		Если Элемент.ТекущиеДанные.РазделМногостраничный Тогда
			
			Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета = ?(Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета = Неопределено
			ИЛИ Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета = 0, 1, Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета);
			
		КонецЕсли;
		
		ВывестиМакетСтраницыВТабличныйДокументНаСервере(Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим, Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета);
		
	Иначе
		
		СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Истина;
		
	КонецЕсли;
	
	КМенюРО = Элементы.РазделыОтчета.КонтекстноеМеню;
	Если Элемент.ТекущиеДанные.РазделМногостраничный Тогда
		Элемент.Развернуть(Элемент.ТекущаяСтрока);
		КМенюРО.Видимость = Истина;
		Если Элемент.ТекущиеДанные.ПолучитьРодителя() = Неопределено Тогда
			Элементы.ОчиститьТекущуюСтраницу.Доступность = Ложь;
		КонецЕсли;
		
		Если Элемент.ТекущиеДанные.ПолучитьРодителя() = Неопределено Тогда
			КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюУдалитьСтраницу.Доступность = Ложь;
			КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюУдалитьСтраницу.Видимость = Ложь;
			КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюДобавитьСтраницу.Доступность = Истина;
			КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюДобавитьСтраницу.Видимость = Истина;
		ИначеЕсли Элемент.ТекущиеДанные.ПолучитьРодителя().ПолучитьЭлементы().Количество() = 1 Тогда
			КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюУдалитьСтраницу.Доступность = Ложь;
			КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюУдалитьСтраницу.Видимость = Ложь;
			КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюДобавитьСтраницу.Доступность = Истина;
			КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюДобавитьСтраницу.Видимость = Истина;
		Иначе
			КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюУдалитьСтраницу.Доступность = Истина;
			КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюУдалитьСтраницу.Видимость = Истина;
			КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюДобавитьСтраницу.Доступность = Истина;
			КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюДобавитьСтраницу.Видимость = Истина;
		КонецЕсли;
	Иначе
		КМенюРО.Видимость = Ложь;
		КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюУдалитьСтраницу.Видимость = Ложь;
		КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюУдалитьСтраницу.Доступность = Ложь;
		КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюДобавитьСтраницу.Видимость = Ложь;
		КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюДобавитьСтраницу.Доступность = Ложь;
	КонецЕсли;
	
	Если Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Титульный" Тогда
		Элементы.Обновить.Доступность = Истина;
	Иначе
		Элементы.Обновить.Доступность = Ложь;
	КонецЕсли;
	
	Если Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Раздел1" Тогда
		Элементы.ТабличныйДокументКонтекстноеМенюГруппаСтроки.Видимость = Истина;
	Иначе
		Элементы.ТабличныйДокументКонтекстноеМенюГруппаСтроки.Видимость = Ложь;
	КонецЕсли;
			
	РегламентированнаяОтчетностьКлиент.СпрятатьСсылкуУдалитьСтраницу(ЭтаФорма);
	
	Элементы.ТабличныйДокумент.ТекущаяОбласть = ТабличныйДокумент.Область(1, 1);
	
КонецПроцедуры 

&НаКлиенте
Процедура ДобавитьСтраницу(Команда)
	
	ВставитьДополнительнуюСтраницуНаСервере(Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
	СтруктураРеквизитовФормы.НомерТекущейСтраницы = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета;
	Обл = ТабличныйДокумент.Области["УдалитьСтраницуЗначок"];
	Обл.Гиперссылка = Истина;
	Обл.Текст = "х";
	Обл = ТабличныйДокумент.Области["УдалитьСтраницу"];
	Обл.Гиперссылка = Истина;
	Обл.Текст = "Удалить страницу";
	
КонецПроцедуры

&НаСервере
Процедура ВставитьДополнительнуюСтраницуНаСервере(ИмяТекущейСтраницыПанели = Неопределено)
	
	РегламентированнаяОтчетность.ВставитьДополнительнуюСтраницуНаСервере(ЭтаФорма, ИмяТекущейСтраницыПанели);
	РегламентированнаяОтчетность.ПослеВставкиДополнительнойСтраницыНаСервере(ЭтаФорма, ИмяТекущейСтраницыПанели);
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел3" Тогда
		ТабличныйДокумент.Области.П000030008003_Знам.Значение = "";
	КонецЕсли;
	УстановитьДоступностьОбластей(ЭтаФорма, ИмяТекущейСтраницыПанели);
	СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтраницу(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("УдалитьСтраницуЗавершение", ЭтотОбъект);
	ТекстВопроса = НСтр("ru='Удалить текущую страницу?'");
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 60, КодВозвратаДиалога.Да);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтраницуЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.РазделыОтчета.ТекущиеДанные;
	
	КопияТекущиеДанные = ТекущиеДанные;
	
	ТекущиеДанные = ТекущиеДанные.ПолучитьРодителя();
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.ПолучитьЭлементы().Количество() = 1 Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяСтраницаРазделаПослеУдаления = Неопределено;
	Если КопияТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета = ТекущиеДанные.ПолучитьЭлементы().Количество() Тогда
		ТекущаяСтраницаРазделаПослеУдаления = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(ТекущиеДанные.ПолучитьЭлементы(), "КолонкаНомерСтраницыРазделаОтчета", КопияТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета - 1);
	КонецЕсли;
	
	УдалитьДополнительнуюСтраницуНаСервере(Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
	
	ТекущиеДанные.ПолучитьЭлементы().Удалить(ТекущиеДанные.ПолучитьЭлементы().Индекс(КопияТекущиеДанные));
	
	НомерСтраницы = 1;
	
	Для Каждого СтраницаРаздела Из ТекущиеДанные.ПолучитьЭлементы() Цикл
		
		СтраницаРаздела.КолонкаРазделыОтчета              = "Стр. " + НомерСтраницы;
		СтраницаРаздела.КолонкаНомерСтраницыРазделаОтчета = НомерСтраницы;
		НомерСтраницы = НомерСтраницы + 1;
		
	КонецЦикла;
	
	Если НЕ ТекущаяСтраницаРазделаПослеУдаления = Неопределено Тогда
		Элементы.РазделыОтчета.ТекущаяСтрока = ТекущаяСтраницаРазделаПослеУдаления.ПолучитьИдентификатор();
	КонецЕсли;
	
	Если ТекущиеДанные.ПолучитьЭлементы().Количество() = 1 Тогда 
		Обл = ТабличныйДокумент.Области["УдалитьСтраницуЗначок"];
		Обл.Гиперссылка = Ложь;
		Обл.Текст = "";
		Обл = ТабличныйДокумент.Области["УдалитьСтраницу"];
		Обл.Гиперссылка = Ложь;
		Обл.Текст = "";
	Иначе
		Обл = ТабличныйДокумент.Области["УдалитьСтраницуЗначок"];
		Обл.Гиперссылка = Истина;
		Обл.Текст = "х";
		Обл = ТабличныйДокумент.Области["УдалитьСтраницу"];
		Обл.Гиперссылка = Истина;
		Обл.Текст = "Удалить страницу";
	КонецЕсли;
	РегламентированнаяОтчетностьКлиентСервер.ОтрисоватьЗначкиУдаленияСтрок(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура УдалитьДополнительнуюСтраницуНаСервере(ИмяТекущейСтраницыПанели = Неопределено)
	
	РегламентированнаяОтчетность.УдалитьДополнительнуюСтраницуНаСервере(ЭтаФорма, ИмяТекущейСтраницыПанели);
	УстановитьДоступностьОбластей(ЭтаФорма, ИмяТекущейСтраницыПанели);
	РасчетНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТабличноеПолеНаКлиенте(ВыбТабличноеПолеИмя) Экспорт
	
	ОчиститьТабличноеПоле(ЭтаФорма, ВыбТабличноеПолеИмя);
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьТабличноеПолеНаСервере(ВыбТабличноеПолеИмя) Экспорт
	
	ОчиститьТабличноеПоле(ЭтаФорма, ВыбТабличноеПолеИмя);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОчиститьТабличноеПоле(Форма, ВыбТабличноеПолеИмя)
	
	РегламентированнаяОтчетностьКлиентСервер.ОчиститьТабличноеПоле(Форма, ВыбТабличноеПолеИмя);
	
КонецПроцедуры 

&НаСервере
Процедура ВывестиСведенияОПериодеОтчета()
	
	ОтчетныйГод = Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ=гггг");
	ТабличныйДокумент.Области.ОтчетГод.Значение = ОтчетныйГод;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиРазделВТабличныйДокументНаСервере(ИмяГруппы, СтруктураГруппы) Экспорт
	
	ВывестиРазделВТабличныйДокумент(ЭтаФорма, ИмяГруппы, СтруктураГруппы);
	
КонецПроцедуры

&НаКлиенте
Процедура ВывестиРазделВТабличныйДокументНаКлиенте(ИмяГруппы, СтруктураГруппы) Экспорт
	
	ВывестиРазделВТабличныйДокумент(ЭтаФорма, ИмяГруппы, СтруктураГруппы);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ВывестиРазделВТабличныйДокумент(Форма, ИмяГруппы, СтруктураГруппы)
	
	Перем ИсходноеКоличествоСтрокГруппы;
	
	ТекущаяСтраница = Форма.ОпределитьТабличноеПолеПоИдМногострочногоРазделаНаСервере(ИмяГруппы);
	
	Форма.мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);
	
	ТекущееКоличествоСтрокГруппы = СтруктураГруппы.Количество();
	
	ТекТабличноеПолеИмя = "ТабличныйДокумент";
	
	ТекТабличноеПоле = Форма[ТекТабличноеПолеИмя];
	
	НастройкиМнгЧ = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСвойствоРаздела(Форма, ТекущаяСтраница, "МногострочностьВРазделе").НайтиСтроки(Новый Структура("ИдГруппы", ИмяГруппы))[0];
	ВысотаСтроки = НастройкиМнгЧ.ВысотаСтроки;
	
	Если ТекущееКоличествоСтрокГруппы > ИсходноеКоличествоСтрокГруппы Тогда
		
		Форма.ДобавитьНеобходимоеКоличествоДопСтрокНаСервере(ТекТабличноеПоле, ТекТабличноеПолеИмя, ИсходноеКоличествоСтрокГруппы, ТекущееКоличествоСтрокГруппы, ИмяГруппы, СтруктураГруппы, ВысотаСтроки);
		
		Форма[ТекТабличноеПолеИмя] = ТекТабличноеПоле;
		
	КонецЕсли;
	
	Для Каждого СтрокаТаблицы Из СтруктураГруппы Цикл
		
		НомерСтрокиВТаблице      = СтруктураГруппы.Индекс(СтрокаТаблицы);
		НомерСтрокиВФормеТаблицы = НомерСтрокиВТаблице + 1;
		
		Для НомерГрафы = 1 По Форма.мСтруктураКолвоКолонокРазделов[ИмяГруппы] Цикл
			
			КолонкаТаблицыИмя = ИмяГруппы + Формат((НомерГрафы) * 10, "ЧЦ=2; ЧВН=") + "03";
			
			Если СтруктураГруппы[0].Свойство(КолонкаТаблицыИмя) Тогда
				
				ИмяЯчейки                = КолонкаТаблицыИмя + "_" + НомерСтрокиВФормеТаблицы;
				ОбластьЯчейкиТаблицы     = ТекТабличноеПоле.Области[ИмяЯчейки];
				ЗначениеЯчейки           = СтрокаТаблицы[КолонкаТаблицыИмя];
				
				Если ОбластьЯчейкиТаблицы.СодержитЗначение = Истина Тогда
					ОбластьЯчейкиТаблицы.Значение = ЗначениеЯчейки;
				Иначе
					ОбластьЯчейкиТаблицы.Текст = ЗначениеЯчейки;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	РегламентированнаяОтчетностьКлиентСервер.ОтрисоватьЗначкиУдаленияСтрок(Форма);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьНеобходимоеКоличествоДопСтрокНаСервере(ТекТабличноеПоле, ТекТабличноеПолеИмя, ИсходноеКоличествоСтрокГруппы, ТекущееКоличествоСтрокГруппы, ИмяГруппы, СтруктураГруппы, ВысотаСтроки) Экспорт
	
	ОбластьДопСтроки = ТекТабличноеПоле.ПолучитьОбласть("МногострочнаяЧасть");
	
	КоординатыОбластей = Новый Структура();
	
	Для Каждого Область Из ТекТабличноеПоле.Области Цикл
		
		Если СтрНайти(Область.Имя, "_") Тогда
			
			КоординатыОбластей.Вставить(Область.Имя, Область.Верх);
			
		КонецЕсли;
		
	КонецЦикла;
	
	МногострочнаяЧастьВерх = ТекТабличноеПоле.Области.МногострочнаяЧасть.Верх;
	
	МногострочнаяЧастьНиз = ТекТабличноеПоле.Области.МногострочнаяЧасть.Низ;
	
	ТекТабличноеПоле.ВставитьОбласть(ОбластьДопСтроки.Область(), ТекТабличноеПоле.Область(МногострочнаяЧастьНиз + 1, , МногострочнаяЧастьНиз + (ТекущееКоличествоСтрокГруппы - 1) * ВысотаСтроки), ТипСмещенияТабличногоДокумента.ПоВертикали);
	
	Для НомНовойСтроки = ИсходноеКоличествоСтрокГруппы По ТекущееКоличествоСтрокГруппы Цикл
		
		Для Каждого Область Из ОбластьДопСтроки.Области Цикл
			
			Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
				
				ОбластьТаблДок = ТекТабличноеПоле.Область(КоординатыОбластей[Область.Имя] + (ТекущееКоличествоСтрокГруппы - НомНовойСтроки) * ВысотаСтроки, Область.Лево, КоординатыОбластей[Область.Имя] + (ТекущееКоличествоСтрокГруппы - НомНовойСтроки) * ВысотаСтроки, Область.Право);
				
				Если ОбластьТаблДок.СодержитЗначение Тогда
					ОбластьТаблДок.Очистить();
				КонецЕсли;
				
				ОбластьТаблДок.Имя = Лев(Область.Имя, СтрНайти(Область.Имя, "_")) + Строка(ТекущееКоличествоСтрокГруппы - НомНовойСтроки + 1);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	ТекТабличноеПоле.Область(ТекТабличноеПоле.Области.МногострочнаяЧасть.Верх, , ТекТабличноеПоле.Области.МногострочнаяЧасть.Низ).Имя = "";
	
	ТекТабличноеПоле.Область(МногострочнаяЧастьВерх, , МногострочнаяЧастьНиз).Имя = "МногострочнаяЧасть";
	
КонецПроцедуры

&НаКлиенте
Процедура СобратьДанные(Команда)
	
	СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
	
	ОчиститьТабличноеПолеНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
	РегламентированнаяОтчетностьКлиент.ОбновитьДеревоРазделовВФормеОтчета(ЭтаФорма);
	
	СформироватьРаздел1();
	
КонецПроцедуры

&НаСервере
Процедура ВставитьДополнительнуюСтроку(ТекущаяСтраница)
	
	Перем СтруктураГруппы;
	Перем МаксимальноеКоличествоСтрокГруппы;
	
	ИмяГруппы = ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ТекущаяСтраница);
	
	Если ИмяГруппы = Неопределено Тогда
		
		Сообщение = Новый СообщениеПользователю;
		
		Сообщение.Текст = НСтр("ru='Не выбран многострочный раздел, в который необходимо добавить строку.'");
		
		Сообщение.Сообщить();
		
		Возврат;
		
	КонецЕсли;
	
	мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, МаксимальноеКоличествоСтрокГруппы);
	
	ТекТабличноеПолеИмя = "ТабличныйДокумент";
	
	ТекТабличноеПоле = ЭтаФорма[ТекТабличноеПолеИмя];
	
	мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);
	
	СтруктураГруппы = ЭтаФорма[СтруктураГруппы];
	
	КолСтрок = СтруктураГруппы.Количество();
	КолСтрокСтр = Формат(КолСтрок, "ЧГ=0");
	КолСтрокСтр1 = Формат(КолСтрок + 1, "ЧГ=0");
	
	ИмяПервойЯчейкиПоследнейСтроки = ИмяГруппы + "1003_" + КолСтрокСтр;
	ИмяТекущейОбласти = ИмяГруппы + "1003_" + КолСтрокСтр1;
	
	ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяПервойЯчейкиПоследнейСтроки];
	
	НастройкиМнгЧ = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСвойствоРаздела(ЭтаФорма, СтруктураРеквизитовФормы.НаимТекущегоРаздела, "МногострочностьВРазделе").НайтиСтроки(Новый Структура("ИдГруппы", ИмяГруппы))[0];
	ВысотаСтроки = НастройкиМнгЧ.ВысотаСтроки;
	
	НомерВерхЯчейкиОбласти = ОбластьЯчейки.Верх;
	НомерНижнЯчейкиОбласти = ОбластьЯчейки.Верх + ВысотаСтроки - 1;
	СдвигСтрок = НомерНижнЯчейкиОбласти - НомерВерхЯчейкиОбласти + 1;
	
	НомерВерхЯчейкиНовойОбласти = НомерВерхЯчейкиОбласти + СдвигСтрок;
	НомерНижнЯчейкиНовойОбласти = НомерНижнЯчейкиОбласти + СдвигСтрок;
	
	РегламентированнаяОтчетностьВызовСервера.СпециальногоДобавленияСтроки(ТекТабличноеПоле, ТекТабличноеПолеИмя, ИмяГруппы, НомерВерхЯчейкиОбласти, НомерНижнЯчейкиОбласти);
	
	ЭтаФорма[ТекТабличноеПолеИмя] = ТекТабличноеПоле;
	
	Для НомерГрафы = 1 По мСтруктураКолвоКолонокРазделов[ИмяГруппы] Цикл
		
		ИмяКолонки = ИмяГруппы + Формат((НомерГрафы) * 10, "ЧЦ=2; ЧВН=") + "03";
		
		Если СтруктураГруппы[0].Свойство(ИмяКолонки) Тогда
			
			ИмяОбластиЯчейки    = ИмяКолонки + "_" + КолСтрокСтр;
			ИмяНовОбластиЯчейки = ИмяКолонки + "_" + КолСтрокСтр1;
			
			ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяОбластиЯчейки];
			ОбластьЯчейки.Имя = ИмяНовОбластиЯчейки;
			
			НомерВерхСтрокиЯчейки  = ОбластьЯчейки.Верх - СдвигСтрок;
			НомерНижнСтрокиЯчейки  = ОбластьЯчейки.Низ  - СдвигСтрок;
			
			НомерЛевоКолонкиЯчейки = ОбластьЯчейки.Лево;
			НомерПравКолонкиЯчейки = ОбластьЯчейки.Право;
			
			ОбластьЯчейкиИсходнойОбласти = ТекТабличноеПоле.Область(НомерВерхСтрокиЯчейки, НомерЛевоКолонкиЯчейки, НомерНижнСтрокиЯчейки, НомерПравКолонкиЯчейки);
			ОбластьЯчейкиИсходнойОбласти.Имя = ИмяОбластиЯчейки;
			
			// Назначаем имена областей для удаления строк
			Если НомерГрафы = 1 Тогда
				НовОбластьЯчейкиУдалитьСтроку = ТекТабличноеПоле.Область(ОбластьЯчейки.Верх, 1, ОбластьЯчейки.Верх, 1);
				НовОбластьЯчейкиУдалитьСтроку.Имя = "УдалитьСтроку" + ИмяНовОбластиЯчейки;
				ИсхОбластьЯчейкиУдалитьСтроку = ТекТабличноеПоле.Область(ОбластьЯчейкиИсходнойОбласти.Верх, 1, ОбластьЯчейкиИсходнойОбласти.Верх, 1);
				ИсхОбластьЯчейкиУдалитьСтроку.Имя = "УдалитьСтроку" + ИмяОбластиЯчейки;
			КонецЕсли;
			
			Если ОбластьЯчейки.СодержитЗначение = Истина Тогда
				ОбластьЯчейки.Очистить();
			Иначе
				ИсходныйНомер        = Число("0" + ОбластьЯчейки.Текст);
				НовыйПорядковыйНомер = ИсходныйНомер + 1;
				
				ОбластьЯчейки.Текст  = ? (НЕ НовыйПорядковыйНомер > МаксимальноеКоличествоСтрокГруппы, Строка(НовыйПорядковыйНомер), "");
				
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Инд = 0;
	Пока Истина Цикл 
		Инд = Инд + 1;
		Обл = ТекТабличноеПоле.Области.Найти("УдалитьСтроку" + ИмяГруппы + "1003_" + Инд);
		Если Обл = Неопределено Тогда 
			Прервать;
		КонецЕсли;
		Обл.Гиперссылка = Истина;
		Обл.Текст = "х";
	КонецЦикла;
	
	Элементы[ТекТабличноеПолеИмя].ТекущаяОбласть = ТекТабличноеПоле.Области[ИмяТекущейОбласти];
	
	ТекущийЭлемент = Элементы[ТекТабличноеПолеИмя];
	
	СтруктураГруппы.Добавить();
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСтруктуруМногострочногоРазделаНаСервере(ИмяГруппы) Экспорт
	
	ОбновитьСтруктуруМногострочногоРаздела(ЭтаФорма, ИмяГруппы);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСтруктуруМногострочногоРазделаНаКлиенте(ИмяГруппы) Экспорт
	
	ОбновитьСтруктуруМногострочногоРаздела(ЭтаФорма, ИмяГруппы);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьСтруктуруМногострочногоРаздела(Форма, ИмяГруппы)
	
	Перем СтруктураГруппы;
	
	Форма.мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);
	
	СтруктураГруппы = Форма[СтруктураГруппы];
	
	ТекТабличноеПолеИмя = "ТабличныйДокумент";
	
	ТекТабличноеПоле = Форма[ТекТабличноеПолеИмя];
	
	Для НСтр = 1 По СтруктураГруппы.Количество() Цикл
		
		ТекСтрокаТаблицы = СтруктураГруппы[НСтр - 1];
		
		Для НомерГрафы = 1 По Форма.мСтруктураКолвоКолонокРазделов[ИмяГруппы] Цикл
			
			ИмяКолонки = ИмяГруппы + Формат((НомерГрафы) * 10, "ЧЦ=2; ЧВН=") + "03";
			
			Если СтруктураГруппы[0].Свойство(ИмяКолонки) Тогда	
				
				ИмяЯчейки     = ИмяКолонки + "_" + НСтр;
				ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяЯчейки];
				
				Если ОбластьЯчейки.СодержитЗначение = Истина Тогда
					ЗначениеЯчейки = ОбластьЯчейки.Значение;
				Иначе
					ЗначениеЯчейки = ОбластьЯчейки.Текст;
				КонецЕсли;
				
				ТекСтрокаТаблицы[ИмяКолонки] = ЗначениеЯчейки;
				
			КонецЕсли;
			
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьРаздел1()
	
	Перем ТаблицаСтраницРаздела2;
	Перем ТаблицаСтраницРаздела3;
	
	Если НЕ мСтруктураМногостраничныхРазделов.Свойство("Раздел2", ТаблицаСтраницРаздела2) Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ мСтруктураМногостраничныхРазделов.Свойство("Раздел3", ТаблицаСтраницРаздела3) Тогда
		Возврат;
	КонецЕсли;
	
	ИтоговаяТаблица = Новый ТаблицаЗначений;
	ИтоговаяТаблица.Колонки.Добавить("ОКТМО");
	ИтоговаяТаблица.Колонки.Добавить("КБК");
	ИтоговаяТаблица.Колонки.Добавить("Сумма");
	
	// Сбор сведений раздела 2.
	ТаблДанных = ЭтаФорма[мСтруктураМногостраничныхРазделов.Раздел2];
	Для Каждого Стр из ТаблДанных Цикл
		
		Если Стр.Данные.Количество() = 0 Тогда
			Прервать;
		КонецЕсли;
		
		ОКТМО = СокрЛП(Стр.Данные[0].Значение.П000020001001);
		ВидИмущества = СокрЛП(Стр.Данные[0].Значение.П000020000101);
		
		ПодСтрПоиска = "12356";
		Если Год(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) >= 2015 Тогда
			ПодСтрПоиска = ПодСтрПоиска + "8";
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(ОКТМО) И НЕ ПустаяСтрока(ВидИмущества) И СтрНайти(ПодСтрПоиска, ВидИмущества) <> 0 Тогда
			
			НовСтр = ИтоговаяТаблица.Добавить();
			НовСтр.ОКТМО = ОКТМО;
			НовСтр.КБК   = КБКПоКодуВидаИмущества(ВидИмущества);
			НовСтр.Сумма = Макс(РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, Стр.Данные[0].Значение.П000020018003) - РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, Стр.Данные[0].Значение.П000020020003), 0);
			
		КонецЕсли;
	КонецЦикла;
	
	// Сбор сведений раздела 3.
	ТаблДанных = ЭтаФорма[мСтруктураМногостраничныхРазделов.Раздел3];
	Для Каждого Стр из ТаблДанных Цикл
		
		Если Стр.Данные.Количество() = 0 Тогда
			Прервать;
		КонецЕсли;
		
		ОКТМО = СокрЛП(Стр.Данные[0].Значение.П000030001001);
		Если НЕ ПустаяСтрока(ОКТМО) Тогда
			НовСтр = ИтоговаяТаблица.Добавить();
			НовСтр.ОКТМО = ОКТМО;
			НовСтр.КБК   = КБКИмуществаИностраннойОрганизации();
			НовСтр.Сумма = Макс(РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, Стр.Данные[0].Значение.П000030009003) - РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, Стр.Данные[0].Значение.П000030011003), 0);
			
		КонецЕсли;
	КонецЦикла;
	
	ИтоговаяТаблица.Свернуть("ОКТМО, КБК", "Сумма");
	
	ТаблицаМСЧРаздела1 = ЭтаФорма[мСтруктураМногострочныхРазделов[СтруктураРеквизитовФормы.ИдМСЧ_Раздел1]];
	ТаблицаМСЧРаздела1.Очистить();
	
	СтруктураДанныхРаздел1.Очистить();
	
	Если ИтоговаяТаблица.Количество() > 0 Тогда
		
		Для Инд = 0 По ИтоговаяТаблица.Количество() - 1 Цикл
			ТекСтр = ИтоговаяТаблица[Инд];
			
			НоваяСтрокаМСЧ = ТаблицаМСЧРаздела1.Добавить();
			
			НоваяСтрокаМСЧ.П000010001003 = ТекСтр.ОКТМО;
			НоваяСтрокаМСЧ.П000010002003 = ТекСтр.КБК;
			НоваяСтрокаМСЧ.П000010003003 = ТекСтр.Сумма;
			
			СтруктураДанныхРаздел1.Вставить("П000010001003_" + (Инд + 1), ТекСтр.ОКТМО);
			СтруктураДанныхРаздел1.Вставить("П000010002003_" + (Инд + 1), ТекСтр.КБК);
			СтруктураДанныхРаздел1.Вставить("П000010003003_" + (Инд + 1), ТекСтр.Сумма);
			
		КонецЦикла;
		
	Иначе
		
		ТаблицаМСЧРаздела1.Добавить();
		
		СтруктураДанныхРаздел1.Вставить("П000010001003_1", "");
		СтруктураДанныхРаздел1.Вставить("П000010002003_1", "");
		СтруктураДанныхРаздел1.Вставить("П000010003003_1", 0);
		
	КонецЕсли;
	
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел1" Тогда
		ВывестиРазделВТабличныйДокументНаСервере(СтруктураРеквизитовФормы.ИдМСЧ_Раздел1, ТаблицаМСЧРаздела1);
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьСоставПоказателей()
	
	ЭтаФормаИмя = ЭтаФорма.ИмяФормы;
	МакетСоставаПоказателей = ОбъектОтчета(ЭтаФормаИмя).ПолучитьМакет(СтруктураРеквизитовФормы.мСоставПоказателей);
	
	ДобавляемыеРеквизиты = Новый Массив;
	
	Для Инд = 0 По МакетСоставаПоказателей.Области.Количество() - 1 Цикл
		
		ТекОбласть    = МакетСоставаПоказателей.Области[Инд];
		
		ИмяСтраницы   = ТекОбласть.Имя;
		
		ЭтаФорма["ТаблицаВариантыЗаполнения" + ИмяСтраницы].Добавить();
		
		Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
			
			КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
			ИмяПоказателя = КодПоказателя;
			
			Если КодПоказателя = "===" Тогда         // признак конечной строки
				Прервать;
			КонецЕсли;
			
			Если Лев(КодПоказателя, 2) = "//" Тогда  // пропускаем комментарии
				Продолжить;
			КонецЕсли;
			
			КодПоказателяПоФорме = СокрЛП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
			ПризнМногострочность = СокрЛП(МакетСоставаПоказателей.Область(Ном, 3).Текст);
			ТипДанныхРеквизита   = СокрЛП(МакетСоставаПоказателей.Область(Ном, 4).Текст);
			стрКолСтрокИсходный  = СокрЛП(МакетСоставаПоказателей.Область(Ном, 5).Текст);
			стрВариантЗаполнения = РегламентированнаяОтчетность.ПолучитьВариантЗаполненияПоказателяРегОтчета(МакетСоставаПоказателей, Ном);
			КодПоказателяПоСтруктуре = СокрЛП(МакетСоставаПоказателей.Область(Ном, 9).Текст);
			
			чКолСтрокИсходный    = ? (ПустаяСтрока(стрКолСтрокИсходный),  0, Число(стрКолСтрокИсходный));
			чВариантЗаполнения   = ? (ПустаяСтрока(стрВариантЗаполнения), 0, Число(стрВариантЗаполнения));
			
			НоваяСтрока = мТаблицаСоставПоказателей.Добавить();
			НоваяСтрока.ИмяПоляТаблДокумента   = ИмяСтраницы;
			НоваяСтрока.КодПоказателяПоСоставу = КодПоказателя;
			НоваяСтрока.КодПоказателяПоФорме   = КодПоказателяПоФорме;
			НоваяСтрока.ПризнМногострочности   = ПризнМногострочность;
			НоваяСтрока.ТипДанныхПоказателя    = ТипДанныхРеквизита;
			НоваяСтрока.КодПоказателяПоСтруктуре = КодПоказателяпоСтруктуре;
			
			Если чВариантЗаполнения <> 0 Тогда
				НоваяСтрока = ЭтаФорма["ТаблицаВариантыЗаполнения" + ИмяСтраницы][0].ТаблицаВариантовЗаполнения.Добавить();
				НоваяСтрока.КодПоказателя      = ? (Не ПустаяСтрока(КодПоказателяПоФорме), КодПоказателяПоФорме, КодПоказателя);
				НоваяСтрока.ВариантЗаполнения  = чВариантЗаполнения;
				НоваяСтрока.КодПоказателяПоСтруктуре  = КодПоказателяПоСтруктуре;
			КонецЕсли;
			
		КонецЦикла;
		
		Если ЭтаФорма["ТаблицаВариантыЗаполнения" + ИмяСтраницы][0].ТаблицаВариантовЗаполнения.Количество() > 0 Тогда
			
			мСтруктураВариантыЗаполнения.Вставить(ИмяСтраницы, ИмяСтраницы);
			мСтруктураВариантыЗаполненияЭталон.Вставить(ИмяСтраницы, ИмяСтраницы);
			
		Конецесли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура Обновить(Команда)
	
	ЗаполнитьСведенияОбОрганизацииНаСервере();
	
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
		УстановитьДоступностьОбластей(ЭтаФорма, "Титульный");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТекущуюСтраницу(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОчиститьТекущуюСтраницуЗавершение", ЭтотОбъект);
	РегламентированнаяОтчетностьКлиент.МеханизмыОчисткиРегламентированныхОтчетов(
		ЭтаФорма, "ОчиститьТекущийЭкземплярМногостраничногоРаздела"
		+ Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим,
		ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТекущуюСтраницуЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
		НомерКорректировки = 0;
		ТабличныйДокумент.Области.НомерКорректировки.Значение = Строка(НомерКорректировки);
		СтруктураРеквизитовФормы.ВидДокумента = 0;
	Иначе
		Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел3" Тогда
			ТабличныйДокумент.Области.П000030008003_Знам.Значение = "";
		КонецЕсли;
		РегламентированнаяОтчетностьКлиентСервер.ОтрисоватьЗначкиУдаленияСтрок(ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиМакетВТаблДокНаСервере(ИмяТекРаздела, НомерСтраницыРазделаОтчета)
	
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + ИмяТекРаздела));
	
	// Многострочные разделы.
	//
	Если ИмяТекРаздела = "Раздел1" Тогда
		
		Для Каждого ЭлСтруктуры Из ЭтаФорма["СтруктураДанных" + ИмяТекРаздела] Цикл
			Обл = ТабличныйДокумент.Области.Найти(ЭлСтруктуры.Ключ);
			Если Обл <> Неопределено И Обл.СодержитЗначение Тогда 
				Обл.Значение = ЭлСтруктуры.Значение;
			КонецЕсли;
		КонецЦикла;
		
		ИмяГруппы = ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ИмяТекРаздела);
		
		СтруктураГруппы = Неопределено;
		
		мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);
		
		СтруктураГруппы = ЭтаФорма[СтруктураГруппы];
		
		ВывестиРазделВТабличныйДокумент(ЭтаФорма, ИмяГруппы, СтруктураГруппы);
		Если СтруктураГруппы.Количество() = 1 Тогда
			Обл = ТабличныйДокумент.Области["УдалитьСтроку" + ИмяГруппы + "1003_1"];
			Обл.Гиперссылка = Ложь;
			Обл.Текст = "";
		КонецЕсли;
		
	// Многостраничные разделы.
	//
	ИначеЕсли ИмяТекРаздела = "Раздел2"
		ИЛИ ИмяТекРаздела = "Раздел3" Тогда
		
		Если ИмяТекРаздела = "Раздел2" Тогда
			НаимТаблицыСтраницы = "ТаблицаСтраницыРазделаРаздел2";
		ИначеЕсли ИмяТекРаздела = "Раздел3" Тогда
			НаимТаблицыСтраницы = "ТаблицаСтраницыРазделаРаздел3";
		КонецЕсли;
		
		СтруктураДанных = Новый Структура;
		
		СписокДанных = ЭтаФорма[НаимТаблицыСтраницы][НомерСтраницыРазделаОтчета - 1].Данные;
		
		Для каждого ТаблицаСтраницы Из ЭтаФорма[НаимТаблицыСтраницы] Цикл
			ТаблицаСтраницы.АктивнаяСтраница = Ложь;
		КонецЦикла;
		
		ЭтаФорма[НаимТаблицыСтраницы][НомерСтраницыРазделаОтчета - 1].АктивнаяСтраница = Истина;
		
		Если СписокДанных.Количество() > 0 Тогда
			СтруктураДанных = СписокДанных[0].Значение;
		КонецЕсли;
		
		Для Каждого ЭлСтруктуры Из СтруктураДанных Цикл
			Обл = ТабличныйДокумент.Области.Найти(ЭлСтруктуры.Ключ);
			Если Обл <> Неопределено И Обл.СодержитЗначение Тогда 
				Обл.Значение = ЭлСтруктуры.Значение;
			КонецЕсли;
		КонецЦикла;
		
		Если ЭтаФорма[НаимТаблицыСтраницы].Количество() = 1 Тогда 
			Обл = ТабличныйДокумент.Области["УдалитьСтраницуЗначок"];
			Обл.Гиперссылка = Ложь;
			Обл.Текст = "";
			Обл = ТабличныйДокумент.Области["УдалитьСтраницу"];
			Обл.Гиперссылка = Ложь;
			Обл.Текст = "";
		Иначе
			Обл = ТабличныйДокумент.Области["УдалитьСтраницуЗначок"];
			Обл.Гиперссылка = Истина;
			Обл.Текст = "х";
			Обл = ТабличныйДокумент.Области["УдалитьСтраницу"];
			Обл.Гиперссылка = Истина;
			Обл.Текст = "Удалить страницу";
		КонецЕсли;
		
	// Обычные разделы.
	//
	Иначе
		
		Для Каждого ЭлСтруктуры Из ЭтаФорма["СтруктураДанных" + ИмяТекРаздела] Цикл
			Попытка
				ТабличныйДокумент.Области[ЭлСтруктуры.Ключ].Значение = ЭлСтруктуры.Значение;
			Исключение
			КонецПопытки;
		КонецЦикла;
		
	КонецЕсли;
	
	УстановитьМаскиВПоляхВвода(ИмяТекРаздела);
	
	Если ИмяТекРаздела = "Титульный" Тогда
		УстановитьНадписиНаТитульномЛисте(ТабличныйДокумент);
	Иначе
		УстановитьФорматВыводаВПоляхВводаНаСервере(ИмяТекРаздела);
		УстановитьЦветФонаЯчейкиНаСервере(,, ИмяТекРаздела);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьНадписиНаТитульномЛисте(ТаблДокумент)
	
	Если СтруктураРеквизитовФормы.ФормаВРедакцииПисьмаБС_4_11_5197 Тогда
		ТаблДокумент.Области.ТекстПриказа.Текст = "Приложение №4" + Символы.ПС
			+ "к приказу ФНС России" + Символы.ПС + "от 05.11.2013 № ММВ-7-11/478@"
			+ Символы.ПС + "(в редакции письма ФНС России" + Символы.ПС
			+ "от 25.03.2016 № БС-4-11/5197@)";
	Иначе
		ТаблДокумент.Области.ТекстПриказа.Текст = "Приложение №4" + Символы.ПС
			+ "к приказу ФНС России" + Символы.ПС + "от 05.11.2013 № ММВ-7-11/478@";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьОтчет(Команда)
	
	РегламентированнаяОтчетностьКлиент.МеханизмыОчисткиРегламентированныхОтчетов(ЭтаФорма, "ОчиститьВесьОтчет");
	
	СтруктураРеквизитовФормы.НомерТекущейСтраницы = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета;
	
КонецПроцедуры

&НаКлиенте
Процедура Очистить(ВыполняемоеОповещение = Неопределено) Экспорт
	
	РегламентированнаяОтчетностьКлиент.Очистить(ЭтаФорма, ВыполняемоеОповещение);
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьНаСервере() Экспорт
	
	СтруктураДанныхРаздел1.Очистить();
	ТаблицаСтраницыРазделаРаздел2.Очистить();
	ТаблицаСтраницыРазделаРаздел3.Очистить();
	
	Для Каждого мнгРаздел Из мСтруктураМногострочныхРазделов Цикл
		ЭтаФорма[мнгРаздел.Ключ].Очистить();
	КонецЦикла;
	
	ИнициализацияМногостраничныхРазделов();
	
	НачальныеОперацииСМногострочнымиБлоками();
	
	ЗаполнитьПустыеСтруктурыДанных();
	
	Если НЕ СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
		ОчиститьТабличноеПолеНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	КонецЕсли;
	
	ВывестиМакетСтраницыВТабличныйДокументНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела, 1);
	
	СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
	
	РегламентированнаяОтчетностьКлиентСервер.ОчиститьВариантыЗаполнения(ЭтаФорма);
	
	УстановитьДоступностьОбластей(ЭтаФорма, СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
	РегламентированнаяОтчетность.ПолучитьСведенияОПоказателяхОтчета(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьПоказателиОтчетаЗаполняемыеИзИБНаСервере(ИмяСтраницы)
	
	РегламентированнаяОтчетностьКлиентСервер.ОчиститьПоказателиОтчетаЗаполняемыеИзИБ(ЭтаФорма, ИмяСтраницы);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуНастроек(Команда)
	
	ОткрытьФормуВыбораСтраниц("ВыбратьДляНастройки");
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораСтраниц(ВариантВыбора)
	
	Перем ТекущийРазделОтчетаСокрНаим;
	Перем НомерСтраницыРазделаОтчета;
	
	// Запоминаем текущий раздел, установленный в дереве разделов отчета.
	Если НЕ Элементы.РазделыОтчета.ТекущиеДанные = Неопределено Тогда
		ТекущийРазделОтчетаСокрНаим = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
		НомерСтраницыРазделаОтчета  = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета;
	КонецЕсли;
	
	мПараметры = Новый Структура;
	мПараметры.Вставить("ПроверкаСоотношений", Ложь);
	мПараметры.Вставить("Автосохранение", Ложь);
	мПараметры.Вставить("ИмеетсяРеквизитДеревоВыбранныхСтраниц", Истина);
	
	Если СтруктураРеквизитовФормы.ОтображатьКнопкуРасшифровать Тогда
		мПараметры.Вставить("СохранятьРасшифровкуАвтозаполнения", Истина);
	КонецЕсли;
	Если СтруктураРеквизитовФормы.ДоступенМеханизмПечатиРеглОтчетностиСДвухмернымШтрихкодомPDF417 Тогда
		мПараметры.Вставить("РазрешитьВстроеннуюПечать", Истина);
	КонецЕсли;
	мПараметры.Вставить("ПроверкаСоотношений", Истина);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ФлажокОтклАвтоРасчет", СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);
	ПараметрыФормы.Вставить("мПечатьБезШтрихкодаРазрешена", СтруктураРеквизитовФормы.мПечатьБезШтрихкодаРазрешена);
	ПараметрыФормы.Вставить("мСчетчикСтраниц", СтруктураРеквизитовФормы.мСчетчикСтраниц);
	ПараметрыФормы.Вставить("мАвтоВыборКодов", СтруктураРеквизитовФормы.мАвтоВыборКодов);
	ПараметрыФормы.Вставить("мИнтервалАвтосохранения", СтруктураРеквизитовФормы.мИнтервалАвтосохранения);
	ПараметрыФормы.Вставить("мПроверятьСоотношенияПриПечатиИВыгрузки", СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки);
	ПараметрыФормы.Вставить("ЕдиницаИзмерения", СтруктураРеквизитовФормы.ЕдиницаИзмерения);
	ПараметрыФормы.Вставить("ТочностьЕдиницыИзмерения", СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения);
	ПараметрыФормы.Вставить("СохранятьРасшифровкуАвтозаполнения", СтруктураРеквизитовФормы.мСохранятьРасшифровку);
	ПараметрыФормы.Вставить("мПроверятьСоотношенияПриПечатиИВыгрузки", СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки);
	ПараметрыФормы.Вставить("мПараметры", мПараметры);
	
	ФормаНастройкиОтчета = РегламентированнаяОтчетностьКлиент.ПолучитьОбщуюФормуПоИмени("НастройкиОтчета", ПараметрыФормы, ЭтаФорма);
	
	мДеревоВыбранныхСтраниц.ПолучитьЭлементы().Очистить();
	
	КопироватьДанныеФормы(мДеревоСтраницОтчета, ФормаНастройкиОтчета.Дерево);
	
	ЗначениеАвторасчета = СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет;
	ЗначениеЕдИзм       = СтруктураРеквизитовФормы.ЕдиницаИзмерения;
	ЗначениеЗпт         = СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения;	
	ДополнительныеПараметры = Новый Структура("ЗначениеАвторасчета, ЗначениеЕдИзм, ЗначениеЗпт, НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим", ЗначениеАвторасчета, ЗначениеЕдИзм, ЗначениеЗпт, НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим);
	ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьФормуВыбораСтраницЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ФормаНастройкиОтчета.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
	ФормаНастройкиОтчета.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	ФормаНастройкиОтчета.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораСтраницЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	ЗначениеАвторасчета = ДополнительныеПараметры.ЗначениеАвторасчета;
	ЗначениеЕдИзм = ДополнительныеПараметры.ЗначениеЕдИзм;
	ЗначениеЗпт = ДополнительныеПараметры.ЗначениеЗпт;
	НомерСтраницыРазделаОтчета = ДополнительныеПараметры.НомерСтраницыРазделаОтчета;
	ТекущийРазделОтчетаСокрНаим = ДополнительныеПараметры.ТекущийРазделОтчетаСокрНаим;
	
	РегламентированнаяОтчетностьКлиентСервер.ПоказатьКнопкиПечати(ЭтаФорма);
	Модифицированность = Истина;
	
	флЗначенияИдентичны = Истина;
	
	Для Индекс = 0 По мДеревоСтраницОтчета.ПолучитьЭлементы().Количество() - 1 Цикл
		
		Если НЕ мДеревоСтраницОтчета.ПолучитьЭлементы()[Индекс].ПоказатьСтраницу = мДеревоВыбранныхСтраниц.ПолучитьЭлементы()[Индекс].ПоказатьСтраницу Тогда	
			флЗначенияИдентичны = Ложь;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЗначениеАвторасчета <> СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Тогда
		
		#Если ВебКлиент Тогда
			ИзменитьТаблицуВариантовЗаполненияНаСервере();
		#Иначе
			РегламентированнаяОтчетностьКлиентСервер.ИзменитьТаблицуВариантовЗаполнения(ЭтаФорма, НЕ СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);
		#КонецЕсли
		
		УстановитьДоступностьОбластей(ЭтаФорма, СтруктураРеквизитовФормы.НаимТекущегоРаздела);
		
	КонецЕсли;
	
	Если ЗначениеЕдИзм <> СтруктураРеквизитовФормы.ЕдиницаИзмерения
		ИЛИ ЗначениеЗпт <> СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения Тогда
		ПослеСменыЕдИзмеренияИТочности();
	КонецЕсли;
	
	// Управляем видимостью страниц основной панели формы
	РегламентированнаяОтчетностьКлиент.ПоказатьСтраницыОтчетаНаКлиенте(ЭтаФорма);
	
	Если НЕ флЗначенияИдентичны Тогда
		
		СформироватьДеревоРазделовОтчетаНаКлиенте();
		
		Если НЕ ТекущийРазделОтчетаСокрНаим = Неопределено Тогда
			
			// Пытаемся найти ранее запомненный раздел.
			НайденнаяСтрока = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(РазделыОтчета.ПолучитьЭлементы(), "КолонкаРазделыОтчетаСокрНаим", ТекущийРазделОтчетаСокрНаим);
			
			Если НЕ НайденнаяСтрока = Неопределено 
				И НЕ НомерСтраницыРазделаОтчета = Неопределено 
				И НайденнаяСтрока.ПолучитьЭлементы().Количество() > 0 Тогда
				
				НайденнаяСтрока = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(НайденнаяСтрока.ПолучитьЭлементы(), "КолонкаНомерСтраницыРазделаОтчета", НомерСтраницыРазделаОтчета);
				
			КонецЕсли;
			
			// В случае успешного поиска, устанавливаем курсор на найденный раздел.
			Если НЕ НайденнаяСтрока = Неопределено Тогда
				Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяСтрока.ПолучитьИдентификатор();
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеСменыЕдИзмеренияИТочности()
	
	ПроверитьТочность();
	
	#Если ВебКлиент Тогда
		УстановитьФорматВыводаВПоляхВводаНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	#Иначе
		УстановитьФорматВыводаВПоляхВводаНаКлиенте(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	#КонецЕсли
	
	РасчетНаКлиенте(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьФорматВыводаВПоляхВводаНаКлиенте(НаимРаздела)
	
	УстановитьФорматВыводаВПоляхВвода(ЭтаФорма, НаимРаздела);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьТочность()
	
	Если СтруктураРеквизитовФормы.ЕдиницаИзмерения = ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1 Тогда
		
		Если СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения > 2 Тогда
			
			Сообщение = Новый СообщениеПользователю;
			
			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1: при выводе сумм в рублях точность не может превышать 2 знака'"), ЭтаФорма.Заголовок);
			
			Сообщение.Сообщить();
			
			СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = 2;
			
		КонецЕсли;
		
	ИначеЕсли СтруктураРеквизитовФормы.ЕдиницаИзмерения = ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1000 Тогда
		
		Если СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения > 3 Тогда
			
			Сообщение = Новый СообщениеПользователю;
			
			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1: при выводе сумм в тысячах рублей точность не может превышать 3 знака'"), ЭтаФорма.Заголовок);
			
			Сообщение.Сообщить();
			
			СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = 3;
			
		КонецЕсли;
		
	ИначеЕсли СтруктураРеквизитовФормы.ЕдиницаИзмерения = ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1000000 Тогда
		
		Если СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения > 6 Тогда
			
			Сообщение = Новый СообщениеПользователю;
			
			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1: при выводе сумм в миллионах рублей точность не может превышать 6 знаков'"), ЭтаФорма.Заголовок);
			
			Сообщение.Сообщить();
			
			СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = 6;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьТаблицуВариантовЗаполненияНаСервере()
	
	РегламентированнаяОтчетностьКлиентСервер.ИзменитьТаблицуВариантовЗаполнения(ЭтаФорма, НЕ СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);
	
	РегламентированнаяОтчетность.ПолучитьСведенияОПоказателяхОтчета(ЭтаФорма);
	
КонецПроцедуры 

&НаКлиенте
Процедура ПоказатьБланк(Команда)
	
	Отказ = Ложь;
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("Команда", Команда);
	ОписаниеОповещения = Новый ОписаниеОповещения("ПоказатьБланкЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередПечатьюРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьБланкЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Команда = ДополнительныеПараметры.Команда;
		
	Печать(Команда.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура Печать(ВидПечати, НеИзФормыОтчета = Ложь) Экспорт
	
	Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1. Формируется печатная форма...'"), ЭтаФорма.Заголовок), , , БиблиотекаКартинок.Печать);
	
	Если СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки = Истина Тогда // возможны 3 состояния флага
		РегламентированнаяОтчетностьКлиент.ПроверитьКонтрольныеСоотношения(ЭтаФорма, ОбработкаКС, Истина);
	КонецЕсли;
	
	Если НЕ ПечатьНаСервере(ВидПечати) Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ОткрытьФормуПредварительногоПросмотра(ЭтаФорма, ВидПечати, , СтруктураРеквизитовФормы.СписокПечатаемыхЛистов);
	
	СтруктураРеквизитовФормы.мРежимПечати = Ложь;
	
КонецПроцедуры

&НаСервере
Функция ПечатьНаСервере(ВидПечати)
	
	Если НЕ РегламентированнаяОтчетность.ПринтерДоступен() Тогда
		
		Сообщение = Новый СообщениеПользователю;
		
		Сообщение.Текст = НСтр("ru='Перед формированием печатных форм необходимо определить в системе принтер и задать его в качестве используемого по умолчанию.'");
		
		Сообщение.Сообщить();
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Если СтруктураРеквизитовФормы.ЕдиницаИзмерения <> ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1 ИЛИ СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения <> 0 Тогда
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Печать возможна только при установленной единице измерения ""в рублях"" и точности ""0"".'");
		Сообщение.Сообщить();
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Если ТипЗнч(мДеревоВыбранныхСтраниц) <> Тип("ДанныеФормыДерево") Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	СтруктураРеквизитовФормы.мПечатныеФормы.Очистить();
	СтруктураРеквизитовФормы.мРежимПечати = Истина;
	
	СохранитьДанныеРаздела(СтруктураРеквизитовФормы.НаимТекущегоРаздела, Ложь, Ложь);
	
	сохрТаблДок = ТабличныйДокумент.ПолучитьОбласть();
	
	СтрПоля = "ПолеСверху, ПолеСправа, ПолеСнизу, ПолеСлева";
	ВремПоля = Новый Структура(СтрПоля);
	
	ЗаполнитьЗначенияСвойств(ВремПоля, ТабличныйДокумент, СтрПоля);
	
	ВывестиМакетВТаблДокНаСервере("Титульный", 0);
	
	ОбщиеРеквизитыРазделов = ПолучитьОбщиеРеквизитыСТитульногоЛиста();
	
	Для Каждого СтрокаУровня1 Из мДеревоВыбранныхСтраниц.ПолучитьЭлементы() Цикл
		
		Если СтрокаУровня1.ВыводНаПечать = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("НаименованиеЛиста",  СтрокаУровня1.Представление);
		СтруктураПараметров.Вставить("ОриентацияЛиста",    СтрокаУровня1.ОриентацияСтраницы);
		СтруктураПараметров.Вставить("ИмяСтраницы",        СтрокаУровня1.ИмяСтраницы);
		Структурапараметров.Вставить("ИмяОбластиТаблПоля", СтрокаУровня1.ИмяОбластиТабличногоПоля);
		СтруктураПараметров.Вставить("ВидПечати",          ВидПечати);
		
		Если НЕ мСтруктураМногостраничныхРазделов.Свойство(СтрокаУровня1.ИмяСтраницы) Тогда
			
			ВывестиМакетВТаблДокНаСервере(СтрокаУровня1.ИмяСтраницы, 0);
			ВывестиНаПечатьЛист(СтруктураПараметров, ОбщиеРеквизитыРазделов, СтрПоля);
			
		Иначе
			
			СтруктураПараметров.Вставить("ИмяСтраницыПанели", СтрокаУровня1.ИмяСтраницы);
			ВывестиНаПечатьДополнительныеСтраницы(СтруктураПараметров, ОбщиеРеквизитыРазделов);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(сохрТаблДок);
	ЗаполнитьЗначенияСвойств(ТабличныйДокумент, ВремПоля, СтрПоля);
	
	РегламентированнаяОтчетностьКлиентСервер.ПроставлениеНомеровЛистов(ЭтаФорма, , СтруктураРеквизитовФормы.СписокПечатаемыхЛистов);
	
	КопироватьДанныеФормы(мДеревоВыбранныхСтраниц, мДеревоСтраницОтчета);
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Процедура ВывестиНаПечатьДополнительныеСтраницы(СтруктураПараметровСтраницы, ОбщиеРеквизитыРазделов)
	
	Перем ИмяСтраницы;
	Перем ТаблицаСтраницРаздела;
	
	СтруктураПараметровСтраницы.Свойство("ИмяСтраницыПанели", ИмяСтраницы);
	
	Если Не мСтруктураМногостраничныхРазделов.Свойство(ИмяСтраницы, ТаблицаСтраницРаздела) Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаСтраницРаздела = ЭтаФорма[ТаблицаСтраницРаздела];
	
	МассивПризнаковАктивности = Новый Массив;
	Для Каждого Страница Из ТаблицаСтраницРаздела Цикл
		ТекущийИндекс = ТаблицаСтраницРаздела.Индекс(Страница);
		МассивПризнаковАктивности.Добавить(ТаблицаСтраницРаздела[ТекущийИндекс].АктивнаяСтраница);
	КонецЦикла;
	
	Для Каждого Страница Из ТаблицаСтраницРаздела Цикл
		ТекущийИндекс = ТаблицаСтраницРаздела.Индекс(Страница);
		ВывестиМакетВТаблДокНаСервере(ИмяСтраницы, ТекущийИндекс + 1);
		ВывестиНаПечатьЛист(СтруктураПараметровСтраницы, ОбщиеРеквизитыРазделов);
	КонецЦикла;
	
	Для Каждого Страница Из ТаблицаСтраницРаздела Цикл
		ТекущийИндекс = ТаблицаСтраницРаздела.Индекс(Страница);
		ТаблицаСтраницРаздела[ТекущийИндекс].АктивнаяСтраница = МассивПризнаковАктивности[ТекущийИндекс];
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиНаПечатьЛист(Парам1, ОбщиеРеквизитыРазделов, СтрПоля = Неопределено)
	
	СоответствиеРазделовМакетам = Новый Соответствие;
	
	СоответствиеРазделовМакетам.Вставить("Титульный", "ПечатныйБланк_2013Кв4_Титульный");
	СоответствиеРазделовМакетам.Вставить("Раздел1",   "ПечатныйБланк_2013Кв4_Раздел1");
	СоответствиеРазделовМакетам.Вставить("Раздел2",   "ПечатныйБланк_2013Кв4_Раздел2");
	СоответствиеРазделовМакетам.Вставить("Раздел3",   "ПечатныйБланк_2013Кв4_Раздел3");
	
	МЧБРаздела = СоответствиеРазделовМакетам[Парам1.ИмяСтраницы];
	
	МакетМЧБ = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(МЧБРаздела);
	МакетМЧБ.ПолеСверху = 5;
	МакетМЧБ.ПолеСправа = 5;
	МакетМЧБ.ПолеСнизу  = 5;
	МакетМЧБ.ПолеСлева  = 5;
	
	ВремПоля = Новый Структура(СтрПоля);
	
	ИдГруппы = ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(Парам1.ИмяСтраницы);
	
	Если ИдГруппы <> Неопределено Тогда
		
		ИсхКолвоСтрокБлока = 0;
		
		Если Парам1.ИмяСтраницы = "Раздел1" Тогда
			ИсхКолвоСтрокБлока = 7;
		КонецЕсли;
		
		СохрТабличныйДокумент = Новый ТабличныйДокумент;
		СохрТабличныйДокумент.Вывести(ТабличныйДокумент);
		
		ТекКолвоСтрокБлока = ЭтаФорма[мСтруктураМногострочныхРазделов[ИдГруппы]].Количество();
		Если ТекКолвоСтрокБлока > 0 И ИсхКолвоСтрокБлока > 0 Тогда
			
			КолвоЛистовМЧБ = Цел(ТекКолвоСтрокБлока / ИсхКолвоСтрокБлока);
			КолвоСтрокНаПоследнемЛисте = ТекКолвоСтрокБлока % ИсхКолвоСтрокБлока;
			Если КолвоСтрокНаПоследнемЛисте <> 0 Тогда
				КолвоЛистовМЧБ = КолвоЛистовМЧБ + 1;
			КонецЕсли;
			
			СтрИменаПоказателей = "";
			
			Колонки = ДанныеФормыВЗначение(ЭтаФорма[мСтруктураМногострочныхРазделов[ИдГруппы]], Тип("ТаблицаЗначений")).Колонки;
			
			Для каждого КолонкаСтруктуры Из Колонки Цикл
				СтрИменаПоказателей = СтрИменаПоказателей + КолонкаСтруктуры.Имя;
			КонецЦикла;
			
			СписокЛистовМЧБ = Новый СписокЗначений;
			Для Сч = 1 По КолвоЛистовМЧБ Цикл
				
				СписокОчищаемыхОбластей = Новый Массив;
				СписокОбластейПереименования = Новый СписокЗначений;
				Для каждого ТекущаяОбласть Из МакетМЧБ.Области Цикл
					ИмяЯчейки = ТекущаяОбласть.Имя;
					
					Если СтрДлина(ИмяЯчейки) < 13 ИЛИ СтрНайти(СтрИменаПоказателей, Лев(ИмяЯчейки, 13)) = 0 Тогда
						Продолжить;
					КонецЕсли;
					
					ПоказательИНомерСтрокиСРазделителем = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСмысловуюЧастьИмениЯчейки(ИмяЯчейки, Истина);
					ПоказательИНомерСтроки = Лев(ПоказательИНомерСтрокиСРазделителем,СтрДлина(ПоказательИНомерСтрокиСРазделителем) - 1);
					НомерЯчейки = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСмысловуюЧастьИмениЯчейки(ИмяЯчейки, Ложь);
					
					СмысловаяЧастьСРазделителем = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСмысловуюЧастьИмениЯчейки(ПоказательИНомерСтроки, Истина);
					СмысловаяЧасть = Лев(СмысловаяЧастьСРазделителем,СтрДлина(СмысловаяЧастьСРазделителем) - 1);
					ТекущийСчетчик = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСмысловуюЧастьИмениЯчейки(ПоказательИНомерСтроки, Ложь);
					
					Если СтрНайти(СтрИменаПоказателей,СмысловаяЧасть) = 0 Тогда
						Продолжить;
					КонецЕсли;
					
					НовыйСчетчик = Число(ТекущийСчетчик) + ?(Сч = 1, 0, ИсхКолвоСтрокБлока);
					Если НовыйСчетчик > ТекКолвоСтрокБлока Тогда
						СписокОчищаемыхОбластей.Добавить(ТекущаяОбласть);
						Продолжить;
					КонецЕсли;
					
					СписокОбластейПереименования.Добавить(ТекущаяОбласть, СмысловаяЧасть + "_" + НовыйСчетчик + "_" + НомерЯчейки);
				КонецЦикла;
				
				Для каждого ОбластьСписка Из СписокОчищаемыхОбластей Цикл
					ОбластьСписка.Имя = "";
					ОбластьСписка.Текст = ?(СокрЛП(ОбластьСписка.Текст) = ".", ".", "-");
				КонецЦикла;
				
				Для каждого ЭлСпискаОбластей Из СписокОбластейПереименования Цикл
					ЭлСпискаОбластей.Значение.Имя = ЭлСпискаОбластей.Представление;
				КонецЦикла;
				
				СписокЛистовМЧБ.Добавить(МакетМЧБ.ПолучитьОбласть());
			КонецЦикла;
			
			Для каждого элЛистМЧБ Из СписокЛистовМЧБ Цикл
				
				ТабличныйДокумент.Очистить();
				ТабличныйДокумент.Вывести(СохрТабличныйДокумент);
				
				ЛистМЧБ = элЛистМЧБ.Значение;
				
				ЗаполнитьМакетМЧБ(Парам1, ЛистМЧБ, ОбщиеРеквизитыРазделов);
				
				Если СписокЛистовМЧБ.Индекс(элЛистМЧБ)<СписокЛистовМЧБ.Количество() - 1 Тогда
					ОбнулитьИтоговыеПоказателиНаЛистеМЧБ(ЛистМЧБ);
				КонецЕсли;
				
				ЗаполнитьЗначенияСвойств(ВремПоля, ТабличныйДокумент, СтрПоля);
				ТабличныйДокумент.Очистить();
				ТабличныйДокумент.Вывести(ЛистМЧБ);
				ЗаполнитьЗначенияСвойств(ТабличныйДокумент, ЛистМЧБ, СтрПоля, "Макет");
				
				РегламентированнаяОтчетность.ВывестиНаПечатьЛистОбщая(ЭтаФорма.Заголовок, Парам1, ТабличныйДокумент, СтруктураРеквизитовФормы.мПечатныеФормы);
				
				ЗаполнитьЗначенияСвойств(ТабличныйДокумент, ВремПоля, СтрПоля);
			КонецЦикла;
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ЗаполнитьМакетМЧБ(Парам1, МакетМЧБ, ОбщиеРеквизитыРазделов);
	
	ЗаполнитьЗначенияСвойств(ВремПоля, ТабличныйДокумент, СтрПоля);
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(МакетМЧБ);
	ЗаполнитьЗначенияСвойств(ТабличныйДокумент, МакетМЧБ, СтрПоля, "Макет");
	
	РегламентированнаяОтчетность.ВывестиНаПечатьЛистОбщая(ЭтаФорма.Заголовок, Парам1, ТабличныйДокумент, СтруктураРеквизитовФормы.мПечатныеФормы);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьОбщиеРеквизитыСТитульногоЛиста()
	
	МассивИНН         = Новый Массив(12);
	МассивКПП         = Новый Массив(9);
	МассивДатаПодписи = Новый Массив(8);
	
	ИсходныйМакет = ТабличныйДокумент;
	
	Область = ИсходныйМакет.Области.Найти("ИНН1");
	
	Если НЕ Область = Неопределено Тогда
		
		СтрИНН = Область.Значение;
		
		Если СтрДлина(СтрИНН) = 10 Тогда
			СтрИНН = СтрИНН + "--";
		КонецЕсли;
		
		Для Ном = 1 По СтрДлина(СтрИНН) Цикл
			
			МассивИНН[Ном - 1] = Сред(СтрИНН, Ном, 1);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Область = ИсходныйМакет.Области.Найти("КПП1");
	
	Если НЕ Область = Неопределено Тогда
		
		Для Ном = 1 По СтрДлина(Область.Значение) Цикл
			
			МассивКПП[Ном - 1] = Сред(Область.Значение, Ном, 1);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Область = ИсходныйМакет.Области.Найти("ДатаПодписи");
	
	Если НЕ Область = Неопределено Тогда
		
		Если ТипЗнч(Область.Значение) = Тип("Строка") Тогда 
			СтрДатаПодписи = Лев(СтрЗаменить(Область.Значение, ".", ""), 8);
		ИначеЕсли ТипЗнч(Область.Значение) = Тип("Дата") Тогда 
			Если ЗначениеЗаполнено(Область.Значение) Тогда 
				СтрДатаПодписи = Лев(СтрЗаменить(Формат(Область.Значение, "ДФ = ""дд.ММ.гггг 'г.'"""), ".", ""), 8);
			Иначе
				СтрДатаПодписи = "        ";
			КонецЕсли;
		КонецЕсли;
		
		Для Ном = 1 По СтрДлина(СтрДатаПодписи) Цикл
			
			МассивДатаПодписи[Ном - 1] = Сред(СтрДатаПодписи, Ном, 1);
			
		КонецЦикла;
		
	КонецЕсли;
	
	ОбщиеРеквизитыРазделов = Новый Структура;
	
	ОбщиеРеквизитыРазделов.Вставить("ИНН", МассивИНН);
	ОбщиеРеквизитыРазделов.Вставить("КПП", МассивКПП);
	ОбщиеРеквизитыРазделов.Вставить("ДатаПодписи", МассивДатаПодписи);
	
	Возврат ОбщиеРеквизитыРазделов;
	
КонецФункции

&НаСервере
Процедура ОбнулитьИтоговыеПоказателиНаЛистеМЧБ(ТаблДок)
	
	ОбластьИтоговыеПоказатели = ТаблДок.Области.Найти("ИтоговыеПоказатели");
	
	Если ОбластьИтоговыеПоказатели = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбластьИтоговыеПоказателиВерх = ОбластьИтоговыеПоказатели.Верх;
	ОбластьИтоговыеПоказателиНиз = ОбластьИтоговыеПоказатели.Низ;
	
	Для Каждого Обл Из ТаблДок.Области Цикл
		
		Если Обл.ГраницаСлева = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если Обл.Верх >= ОбластьИтоговыеПоказателиВерх
			И Обл.Низ <= ОбластьИтоговыеПоказателиНиз
			И Обл.ГраницаСлева.ТипЛинии = ТипЛинииЯчейкиТабличногоДокумента.Точечная Тогда
			
			Если Обл.СодержитЗначение = Истина Тогда // возможны 3 состояния
				Обл.Значение = "-";
			Иначе
				Обл.Текст = "-";
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьМакетМЧБ(ПараметрыПечати, МакетМЧБ, ОбщиеРеквизитыРазделов)
	
	Показатели = Новый ТаблицаЗначений;
	Показатели.Колонки.Добавить("Имя");
	Показатели.Колонки.Добавить("Значение");
	Показатели.Колонки.Добавить("ЗначениеМЧБ");
	
	Показатели.Индексы.Добавить("Имя");
	
	ИсходныйМакет = ТабличныйДокумент;
	Для Каждого Область Из ИсходныйМакет.Области Цикл
		Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник И Область.СодержитЗначение = Истина Тогда
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = Область.Имя;
			НовСтр.Значение = Область.Значение;
			НовСтр.ЗначениеМЧБ = ПолучитьЗначениеМЧБ(Область);
		КонецЕсли;
	КонецЦикла;
	
	НайденноеЗначение = Показатели.Найти("ИНН1", "Имя");
	
	Если НЕ НайденноеЗначение = Неопределено Тогда
		Показатели.Удалить(НайденноеЗначение);
	КонецЕсли;
	
	ИНН = "";
	Для Ном = 0 По 11 Цикл
		ИНН = ИНН + ОбщиеРеквизитыРазделов.ИНН[Ном];
	КонецЦикла;
	
	НовСтр = Показатели.Добавить();
	НовСтр.Имя = "ИНН1";
	НовСтр.Значение = ИНН;
	НовСтр.ЗначениеМЧБ = СокрЛП(ИНН);
	
	НайденноеЗначение = Показатели.Найти("КПП1", "Имя");
	
	Если НЕ НайденноеЗначение = Неопределено Тогда
		Показатели.Удалить(НайденноеЗначение);
	КонецЕсли;
	
	КПП = "";
	Для Ном = 0 По 8 Цикл
		КПП = КПП + ОбщиеРеквизитыРазделов.КПП[Ном];
	КонецЦикла;
	
	НовСтр = Показатели.Добавить();
	НовСтр.Имя = "КПП1";
	НовСтр.Значение = КПП;
	НовСтр.ЗначениеМЧБ = СокрЛП(КПП);
	
	НайденноеЗначение = Показатели.Найти("ДатаПодписи", "Имя");
	
	Если НЕ НайденноеЗначение = Неопределено Тогда
		Показатели.Удалить(НайденноеЗначение);
	КонецЕсли;
	
	ДатаПодписиСтр = "";
	Для Ном = 0 По 7 Цикл
		ДатаПодписиСтр = ДатаПодписиСтр + ОбщиеРеквизитыРазделов.ДатаПодписи[Ном];
	КонецЦикла;
	
	НовСтр = Показатели.Добавить();
	НовСтр.Имя = "ДатаПодписи";
	НовСтр.Значение = ДатаПодписиСтр;
	НовСтр.ЗначениеМЧБ = СокрЛП(ДатаПодписиСтр);
	
	НовСтр = Показатели.Добавить();
	НовСтр.Имя = "ДатаПодписиПолная";
	Если СокрЛП(ДатаПодписиСтр) <> "" Тогда 
		НовСтр.Значение = Формат(Дата(Прав(ДатаПодписиСтр, 4) + Сред(ДатаПодписиСтр, 3, 2) + Лев(ДатаПодписиСтр, 2) + "000000"), "ДФ = ""дд.ММ.гггг""");
		НовСтр.ЗначениеМЧБ = СокрЛП(Формат(Дата(Прав(ДатаПодписиСтр, 4) + Сред(ДатаПодписиСтр, 3, 2) + Лев(ДатаПодписиСтр, 2) + "000000"), "ДФ = ""дд.ММ.гггг"""));
	КонецЕсли;
	
	Если ПараметрыПечати.ИмяСтраницы = "Титульный" Тогда
		
		УстановитьНадписиНаТитульномЛисте(МакетМЧБ);
		
		ПокПодписант = Показатели.Найти("ОргПодписант", "Имя");
		Если ПокПодписант <> Неопределено Тогда
			
			ФИО = РегламентированнаяОтчетность.РазложитьФИО(ПокПодписант.Значение);
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "ОргПодписантФамилия";
			НовСтр.Значение = ФИО.Фамилия;
			НовСтр.ЗначениеМЧБ = ФИО.Фамилия;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "ОргПодписантИмя";
			НовСтр.Значение = ФИО.Имя;
			НовСтр.ЗначениеМЧБ = ФИО.Имя;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "ОргПодписантОтчество";
			НовСтр.Значение = ФИО.Отчество;
			НовСтр.ЗначениеМЧБ = ФИО.Отчество;
			
		КонецЕсли;
		
		ПокОКВЭД = Показатели.Найти("ОКВЭД", "Имя");
		Если ПокОКВЭД <> Неопределено Тогда
			ОКВЭД = ПокОКВЭД.ЗначениеМЧБ;
			Если Сред(ОКВЭД, 2, 1) = "." Тогда
				ОКВЭД = Лев(ОКВЭД, 1) + " " + Сред(ОКВЭД, 2);
			КонецЕсли;
			Если Сред(ОКВЭД, 5, 1) = "." Тогда
				ОКВЭД = Лев(ОКВЭД, 4) + " " + Сред(ОКВЭД, 5);
			КонецЕсли;
			ПокОКВЭД.Значение = ОКВЭД;
			ПокОКВЭД.ЗначениеМЧБ = ОКВЭД;
		КонецЕсли;
		
	КонецЕсли;
	
	// ОКТМО.
	ПоказательОКТМО = Показатели.Найти("П000020001001", "Имя");
	Если ПоказательОКТМО = Неопределено Тогда
		ПоказательОКТМО = Показатели.Найти("П000030001001", "Имя");
	КонецЕсли;
	
	Если ПоказательОКТМО <> Неопределено Тогда
		ОКТМО = СокрЛП(ПоказательОКТМО.Значение);
		ОКТМО = РегламентированнаяОтчетностьКлиентСервер.ДополнитьСтроку(ОКТМО, 11, "-", 1);
		ПоказательОКТМО.ЗначениеМЧБ = ОКТМО;
	КонецЕсли;
	
	// особая обработка ИНН
	ИНН = Новый Массив(12);
	Для Инд = 1 По 9 Цикл
		Для Знакоместо = 0 По 11 Цикл
			ИНН[Знакоместо] = Показатели.Найти("ИНН" + Инд + "_" + (Знакоместо + 1), "Имя");
		КонецЦикла;
		Если ИНН[0] = Неопределено ИЛИ ИНН[1] = Неопределено ИЛИ ИНН[10] = Неопределено Тогда
			Продолжить;
		КонецЕсли;
	КонецЦикла;
	
	ИндексТочкиПоКорню=Новый Структура;
	Для каждого Область Из МакетМЧБ.Области Цикл
		Если Область.Текст="." Тогда
			ТекАдресЗначенияОбласти = АдресЗначенияОбласти(Область);
			Корень=ТекАдресЗначенияОбласти.Корень;
			ИндексТочкиЧислаНаМЧБ=ТекАдресЗначенияОбласти.ИндексЗнакоместа;
			ИндексТочкиПоКорню.Вставить(Корень,ИндексТочкиЧислаНаМЧБ);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Область Из МакетМЧБ.Области Цикл
		Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			ИмяОбласти = Область.Имя;
			
			Если СтрЧислоВхождений(ИмяОбласти, "НомСтр") > 0
				ИЛИ СтрЧислоВхождений(ИмяОбласти, "СоставленаНа") > 0 Тогда
				Продолжить;
			КонецЕсли;
			
			РезультатПоиска = Показатели.Найти(ИмяОбласти, "Имя");
			Если РезультатПоиска = Неопределено Тогда
				ТекАдресЗначенияОбласти = АдресЗначенияОбласти(Область);
				ЗначениеВыведено = Ложь;
				Если ТекАдресЗначенияОбласти.ИндексЗнакоместа <> 0 Тогда
					РезультатПоиска = Показатели.Найти(ТекАдресЗначенияОбласти.Корень, "Имя");
					Если РезультатПоиска <> Неопределено Тогда
						Если ТипЗнч(РезультатПоиска.Значение)=Тип("Число") Тогда
							//разделение числа на 2 части
							ЦелаяЧасть = Цел(РезультатПоиска.Значение);
							СтрЦелаяЧасть = Формат(Цел(РезультатПоиска.Значение), "ЧГ=0");
							СтрДробнаяЧасть = Сред(Строка(РезультатПоиска.Значение - ЦелаяЧасть),3);
							//разделение областей показателя на 2 части
							
							ИндексТочкиЧислаНаМЧБ = Неопределено;
							Если ИндексТочкиПоКорню.Свойство(ТекАдресЗначенияОбласти.Корень,ИндексТочкиЧислаНаМЧБ) = Ложь Тогда
								//На МЧБ нет разделения на целую и дробную части
								ПрисвоитьЗначениеОбласти(Область, РезультатПоиска.ЗначениеМЧБ, ТекАдресЗначенияОбласти.ИндексЗнакоместа);
								ЗначениеВыведено = Истина;	
							Иначе
								//определяем какая часть выводится (Целая, дробная или точка)
								Если ТекАдресЗначенияОбласти.ИндексЗнакоместа<ИндексТочкиЧислаНаМЧБ Тогда
									//выводится целая часть
									ПрисвоитьЗначениеОбласти(Область, ?(РезультатПоиска.ЗначениеМЧБ = "-","-",СтрЦелаяЧасть), ТекАдресЗначенияОбласти.ИндексЗнакоместа);
									ЗначениеВыведено = Истина;	
								ИначеЕсли ТекАдресЗначенияОбласти.ИндексЗнакоместа > ИндексТочкиЧислаНаМЧБ Тогда
									//выводится дробная часть
									ПрисвоитьЗначениеОбласти(Область, СтрДробнаяЧасть, ТекАдресЗначенияОбласти.ИндексЗнакоместа - ИндексТочкиЧислаНаМЧБ);
									ЗначениеВыведено = Истина;
								Иначе
									//выводится точка
									//присваивать ничего не будем, но считаем, что область заполненяется корректно
									ЗначениеВыведено = Истина;
								КонецЕсли;
							КонецЕсли;
						Иначе
							ПрисвоитьЗначениеОбласти(Область, РезультатПоиска.ЗначениеМЧБ, ТекАдресЗначенияОбласти.ИндексЗнакоместа, ТипЗнч(РезультатПоиска.Значение) <> Тип("Строка") ИЛИ НЕ ЗначениеЗаполнено(РезультатПоиска.Значение));
							ЗначениеВыведено = Истина;
						КонецЕсли;
					КонецЕсли;
					
					Если НЕ ЗначениеВыведено
						И (ПараметрыПечати.ИмяСтраницы = "Раздел1"
						ИЛИ ПараметрыПечати.ИмяСтраницы = "Раздел2"
						ИЛИ ПараметрыПечати.ИмяСтраницы = "Раздел3") Тогда
						
						ЗначениеВыведено = Истина;
						
					КонецЕсли;
					
				КонецЕсли;
				
				Если НЕ ЗначениеВыведено И ИмяОбласти <> "ТекстПриказа"
					И ИмяОбласти <> "ОпределениеВысотыСтрокиМногострочнойЧасти" Тогда
					
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Не удалось заполнить область ""%1"".'"), ИмяОбласти);
					Сообщение.Сообщить();
					
				КонецЕсли;
			Иначе
				ПрисвоитьЗначениеОбласти(Область, РезультатПоиска.ЗначениеМЧБ);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиНаПечатьЛистРаздела(СтруктураПараметровЛиста) Экспорт
	
	ПечатныеЛисты = Новый СписокЗначений;
	ПечатныеЛисты.Добавить(ВывестиНаПечатьЛистРазделаБезМногострочныхЧастей(СтруктураПараметровЛиста));
	СтруктураРеквизитовФормы.мПечатныеФормы.Добавить(ПечатныеЛисты[0].Значение, СтруктураПараметровЛиста.НаименованиеЛиста);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьЗначениеМЧБ(Область)
	
	ТипЗначения = ТипЗнч(Область.Значение);
	Если ТипЗначения = Тип("Число") Тогда
		ФорматОбласти = Область.Формат;
		СоотвСтрокаФормата = РазобратьСтрокуФормата(ФорматОбласти);
		СоотвСтрокаФормата.Вставить("ЧРД", ".");
		СоотвСтрокаФормата.Вставить("ЧГ", "");
		Результат = Формат(Область.Значение, СобратьСтрокуФормата(СоотвСтрокаФормата));
	ИначеЕсли ТипЗначения = Тип("Строка") Тогда
		Результат = СокрЛП(Область.Значение);
	ИначеЕсли ТипЗначения = Тип("Дата") Тогда
		Результат = Формат(Область.Значение, ?(ПустаяСтрока(Область.Формат), "ДФ=ddMMyyyy", Область.Формат));
	ИначеЕсли ТипЗначения = Тип("Булево") Тогда
		Результат = Формат(Область.Значение, Область.Формат);
	КонецЕсли;
	Возврат СокрЛП(Результат);
	
КонецФункции

&НаСервере
Функция АдресЗначенияОбласти(Область)
	
	Имя = Область.Имя;
	КореньИмениОбласти = Неопределено;
	СтрИндексЗнакоместа = "";
	ИндексЗнакоместа = 0;
	ДлинаИмени = СтрДлина(Имя);
	Для ИндексВхождения = 1 По ДлинаИмени Цикл
		СтрИндексЗнакоместа = Сред(Имя, ДлинаИмени - ИндексВхождения + 1);
		Если СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(СтрИндексЗнакоместа) Тогда
			КореньИмениОбласти = Лев(Имя, ДлинаИмени - ИндексВхождения);
			ИндексЗнакоместа = Число(СтрИндексЗнакоместа);
		Иначе
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если Прав(КореньИмениОбласти, 1) = "_" Тогда
		КореньИмениОбласти = Лев(КореньИмениОбласти, СтрДлина(КореньИмениОбласти) - 1);
	КонецЕсли;
	
	Возврат Новый Структура("Корень, ИндексЗнакоместа", КореньИмениОбласти, ИндексЗнакоместа);
	
КонецФункции

&НаСервере
Процедура ПрисвоитьЗначениеОбласти(Область, Знач Значение, ИндексЗнакоместа = 0, ДополнятьСправа_ = Истина)	
	
	Если ИндексЗнакоместа <> 0 Тогда
		Если СтрДлина(Значение) >= ИндексЗнакоместа Тогда
			Значение = Сред(Значение, ИндексЗнакоместа, 1);
		Иначе
			Значение = ?(ДополнятьСправа_, "-", "");
		КонецЕсли;
	ИначеЕсли НЕ ЗначениеЗаполнено(Значение) Тогда
		Значение = "-";
	КонецЕсли;
	
	Если Область.СодержитЗначение = Истина Тогда
		Если Область.Имя = "Приказ" Тогда
			Область.Значение = Значение;
		Иначе
			Область.Значение = ВРЕГ(Значение);
		КонецЕсли;
	Иначе
		Область.Текст = ВРЕГ(Значение);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ВывестиНаПечатьЛистРазделаБезМногострочныхЧастей(СтруктураПараметровЛиста)
	Перем Ориентация;
	Перем ИмяТабличногоПоля;
	Перем ИмяОбластиТаблПоля;
	
	ТаблДок = ЭтаФорма[СтруктураПараметровЛиста.ИмяТабличногоПоля];
	
	ПечатнаяФорма = Новый ТабличныйДокумент;
	ПечатнаяФорма.ОтображатьЗаголовки = Ложь;
	ПечатнаяФорма.ОтображатьСетку     = Ложь;
	ПечатнаяФорма.ЧерноБелыйПросмотр  = Истина;
	ПечатнаяФорма.ЧерноБелаяПечать    = Истина;
	ПечатнаяФорма.Автомасштаб         = Истина;
	ПечатнаяФорма.ОриентацияСтраницы  = ?(СтруктураПараметровЛиста.ОриентацияЛиста = "Портрет", ОриентацияСтраницы.Портрет, ОриентацияСтраницы.Ландшафт);
	
	ЗаполнитьЗначенияСвойств(ПечатнаяФорма, ТаблДок, "ПолеСлева, ПолеСверху, ПолеСправа, ПолеСнизу");
	
	СписокВыводимыхНаПечатьОбластей = Новый СписокЗначений;
	Для каждого Область Из ТаблДок.Области Цикл
		Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Строки Тогда
			СписокВыводимыхНаПечатьОбластей.Добавить(Область.Верх, Область.Имя);
		КонецЕсли;
	КонецЦикла;
	
	// Сортируем список в порядке расположения областей в таблице (по верхней координате).
	СписокВыводимыхНаПечатьОбластей.СортироватьПоЗначению();
	
	// Выполняем цикл до тех пор, пока не закончатся области, выводимые на печать.
	Пока СписокВыводимыхНаПечатьОбластей.Количество() > 0 Цикл
		
		Если СтрЧислоВхождений(ВРег(СписокВыводимыхНаПечатьОбластей[0].Представление), "ПУСТАЯСТРОКА") = 0 Тогда
			ОбластьВыводимаяНаПечать = ТаблДок.ПолучитьОбласть(СписокВыводимыхНаПечатьОбластей[0].Представление);
			СписокВыводимыхНаПечатьОбластей.Удалить(0);
			ПечатнаяФорма.Вывести(ОбластьВыводимаяНаПечать);
			Продолжить;
		КонецЕсли;
		
		// Получаем области "ПустаяСтрока" и "Ограничители", одновременно удаляя их из списка.
		ОбластьПустаяСтрока = ТаблДок.ПолучитьОбласть(СписокВыводимыхНаПечатьОбластей[0].Представление);
		СписокВыводимыхНаПечатьОбластей.Удалить(0);
		ОбластьОграничители = ТаблДок.ПолучитьОбласть(СписокВыводимыхНаПечатьОбластей[0].Представление);
		СписокВыводимыхНаПечатьОбластей.Удалить(0);
		
		ВыводимыеОбласти = Новый Массив;
		ВыводимыеОбласти.Добавить(ОбластьПустаяСтрока);
		ВыводимыеОбласти.Добавить(ОбластьОграничители);
		
		Пока ПечатнаяФорма.ПроверитьВывод(ВыводимыеОбласти) Цикл
			ПечатнаяФорма.Вывести(ОбластьПустаяСтрока);
		КонецЦикла;
		
		ПечатнаяФорма.Вывести(ОбластьОграничители);
		ПечатнаяФорма.ВывестиГоризонтальныйРазделительСтраниц();
		
	КонецЦикла;
	
	Возврат ПечатнаяФорма;
	
КонецФункции

&НаСервере
Функция РазобратьСтрокуФормата(Знач СтрокаФормата)
	
	ЗначенияПараметров = Новый Соответствие;
	Пока СтрНайти(СтрокаФормата, ";") <> 0 Цикл
		ВхождениеРазделителя = СтрНайти(СтрокаФормата, ";");
		ДоРазделителя = Лев(СтрокаФормата, ВхождениеРазделителя - 1);
		ВхождениеРавно = СтрНайти(ДоРазделителя, "=");
		Если ВхождениеРавно <> 0 И ВхождениеРавно <> 1 Тогда
			ЗначенияПараметров.Вставить(Лев(ДоРазделителя, ВхождениеРавно - 1), Сред(ДоРазделителя, ВхождениеРавно + 1));
		КонецЕсли;
		СтрокаФормата = Сред(СтрокаФормата, ВхождениеРазделителя + 1);
	КонецЦикла;
	ВхождениеРавно = СтрНайти(СтрокаФормата, "=");
	Если ВхождениеРавно <> 0 И ВхождениеРавно <> 1 Тогда
		ЗначенияПараметров.Вставить(Лев(СтрокаФормата, ВхождениеРавно - 1), Сред(СтрокаФормата, ВхождениеРавно + 1));
	КонецЕсли;
	Возврат ЗначенияПараметров;
	
КонецФункции

&НаСервере
Функция СобратьСтрокуФормата(ПараметрыФормата)
	
	СтрокаФормата = "";
	Для Каждого Параметр Из ПараметрыФормата Цикл
		СтрокаФормата = СтрокаФормата + "; " + Параметр.Ключ + "=" + Параметр.Значение;
	КонецЦикла;
	Если НЕ ПустаяСтрока(СтрокаФормата) Тогда
		СтрокаФормата = Сред(СтрокаФормата, 3);
	КонецЕсли;
	Возврат СтрокаФормата;
	
КонецФункции

&НаКлиенте
Процедура ПоказатьСДвухмернымШтрихкодомPDF417(Команда)
	
	РегламентированнаяОтчетностьКлиент.ВывестиМашиночитаемуюФорму(ЭтаФорма, Команда.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайла(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузитьИзФайлаЗавершение", ЭтотОбъект);
	
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередЗагрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура Выгрузить(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьЗавершение", ЭтотОбъект);

	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайлаЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ЗагрузитьИзФайлаОтчет();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайлаОтчет() Экспорт
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузитьИзФайлаОтчетЗавершение", ЭтотОбъект);
	
	Если Модифицированность Тогда
		СохранитьНаКлиенте(,ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайлаОтчетЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	РегламентированнаяОтчетностьЗагрузкаКлиент.ЗагрузитьИзФайлаОтчет(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Функция ЗагрузкаОтчетаИзФайла(ДанныеДляЗагрузки) Экспорт
	
	Если Модифицированность Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = СтрШаблон(НСтр("ru='Отчет ""%1"" не сохранен.'"), ЭтотОбъект.Заголовок);
		Сообщение.Сообщить();
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ ЗагрузкаОтчетаИзФайлаНаСервере(ДанныеДляЗагрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
		
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция ЗагрузкаОтчетаИзФайлаНаСервере(ДанныеДляЗагрузки)
	
	ИзвлечьСохраненныеПоказателиОтчета();
	
	ПараметрыОтчета = ПараметрыВыгрузкиОтчета();
	
	ДеревоДляЗагрузки = ИзвлечьСтруктуруXML();
	
	Если НЕ РегламентированнаяОтчетностьЗагрузка.ЗагрузкаОтчетаИзФайла(
		ЭтотОбъект, ПараметрыОтчета, ДанныеДляЗагрузки, ДеревоДляЗагрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура ВыгрузитьЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ВыгрузитьОтчет();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьОтчет() Экспорт
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьОтчетЗавершение", ЭтотОбъект);
	
	Если Модифицированность Тогда
		СохранитьНаКлиенте(, ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьОтчетЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ФормаВыгрузкиРеглОтчета = ПолучитьФорму("Документ.ВыгрузкаРегламентированныхОтчетов.Форма.ФормаДокумента", , ЭтаФорма);
	
	СпДокОсн = Новый СписокЗначений;
	СпДокОсн.Добавить(СтруктураРеквизитовФормы.мСохраненныйДок);
	
	ФормаВыгрузкиРеглОтчета.СформироватьИЗаписать(СпДокОсн);
	
КонецПроцедуры

&НаКлиенте
Функция УниверсальнаяВыгрузка(ТекстВыгрузки = Неопределено, ПроверятьБлокировки = Истина) Экспорт
	
	Перем ПараметрыВыгрузки;
	
	Если Модифицированность Тогда
		
		Если СтрНайти(Заголовок, СтруктураРеквизитовФормы.СтрПериодОтчета) = 0 Тогда
			ТекстЗаголовка = Заголовок + " за " + СтруктураРеквизитовФормы.СтрПериодОтчета;
		Иначе
			ТекстЗаголовка = Заголовок;
		КонецЕсли;
		
		ОргСтр = " (" + СтруктураРеквизитовФормы.НаимОрганизации + ")";
		Если СтрНайти(Заголовок, ОргСтр) = 0 Тогда
			ТекстЗаголовка = ТекстЗаголовка + ОргСтр;
		КонецЕсли;
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Отчет """ + ТекстЗаголовка + """ не сохранен.";
		Сообщение.Сообщить();
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Если Открыта() Тогда
		Если СтруктураРеквизитовФормы.ЕдиницаИзмерения <> ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1 Тогда
			
			Сообщение = Новый СообщениеПользователю;
			
			Сообщение.Текст = НСтр("ru='Перед выгрузкой необходимо установить единицу измерения ""в рублях"".'");
			
			Сообщение.Сообщить();
			
			Возврат Ложь;
			
		КонецЕсли;
		Если СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения <> 0 Тогда
			
			Сообщение = Новый СообщениеПользователю;
			
			Сообщение.Текст = НСтр("ru='Перед выгрузкой необходимо установить точность ""0"".'");
			
			Сообщение.Сообщить();
			
			Возврат Ложь;
			
		КонецЕсли;
	КонецЕсли;
	
	Если СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки = Истина Тогда // возможны 3 состояния
		РегламентированнаяОтчетностьКлиент.ПроверитьКонтрольныеСоотношения(ЭтаФорма, ОбработкаКС, Истина);
	КонецЕсли;
	
	Если НЕ УниверсальнаяВыгрузкаXMLНаСервере(ТекстВыгрузки, ПараметрыВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция УниверсальнаяВыгрузкаXMLНаСервере(ТекстВыгрузки, ПараметрыВыгрузки)
	
	ИзвлечьСохраненныеПоказателиОтчета();
	
	ПараметрыВыгрузки = ПараметрыВыгрузкиОтчета();
	ДеревоВыгрузки = ИзвлечьСтруктуруXML();
	Если НЕ ВыгрузкаВозможна(ПараметрыВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ЗаполнитьВыгрузкуДанными(ДеревоВыгрузки, ПараметрыВыгрузки);
	
	Если НЕ ДанныеВыгрузкиКорректны(ДеревоВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ТекстВыгрузки = ВыгрузитьДеревоВXML(ДеревоВыгрузки, ПараметрыВыгрузки);
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция ПараметрыВыгрузкиОтчета()
	
	Титульный = мДанныеОтчета.Титульный;
	
	ПараметрыВыгрузки = Новый Структура;
	
	ПараметрыВыгрузки.Вставить("ВерсПрог", РегламентированнаяОтчетность.НазваниеИВерсияПрограммы());
	
	ПараметрыВыгрузки.Вставить("ДатаДок",  Формат(ТекущаяДатаСеанса(), "ДФ=дд.ММ.гггг"));
	ПараметрыВыгрузки.Вставить("Период",   СокрЛП(Титульный.Период));
	ПараметрыВыгрузки.Вставить("ОтчетГод", СокрЛП(Титульный.ОтчетГод));
	
	ПараметрыВыгрузки.Вставить("КодНО",   СокрЛП(Титульный.НалоговыйОрган));
	ПараметрыВыгрузки.Вставить("НомКорр", Строка(СтруктураРеквизитовФормы.мСохраненныйДок.Вид));
	ПараметрыВыгрузки.Вставить("ПоМесту", СокрЛП(Титульный.ПоМесту));
	
	ПараметрыВыгрузки.Вставить("ОКВЭД", СтрЗаменить(СокрЛП(СтрЗаменить(Титульный.ОКВЭД, ".", " ")), " ", "."));
	ПараметрыВыгрузки.Вставить("Тлф",   СокрЛП(Титульный.ТелОрганизации));
	
	ПараметрыВыгрузки.Вставить("НаимОрг", СокрЛП(Титульный.НаимОрг));
	ПараметрыВыгрузки.Вставить("ИННОрг",  СокрЛП(СтруктураРеквизитовФормы.Организация.ИНН));
	ПараметрыВыгрузки.Вставить("КППОрг",  СокрЛП(Титульный.КПП1));
	
	ПараметрыВыгрузки.Вставить("ФормРеорг", СокрЛП(Титульный.КодФормыРеорганизации));
	ПараметрыВыгрузки.Вставить("ИННРеорг",  СокрЛП(Титульный.ИННРеорганизованнойОрганизации));
	ПараметрыВыгрузки.Вставить("КППРеорг",  СокрЛП(Титульный.КППРеорганизованнойОрганизации));
	
	ПараметрыВыгрузки.Вставить("ПрПодп", СокрЛП(Титульный.ПрПодп));
	
	ФИОПодписанта = РегламентированнаяОтчетность.РазложитьФИО(Титульный.ОргПодписант);
	ПараметрыВыгрузки.Вставить("ПодпФамилия",  ФИОПодписанта.Фамилия);
	ПараметрыВыгрузки.Вставить("ПодпИмя",      ФИОПодписанта.Имя);
	ПараметрыВыгрузки.Вставить("ПодпОтчество", ФИОПодписанта.Отчество);
	
	ПараметрыВыгрузки.Вставить("ПодпНаимОрг", СокрЛП(Титульный.ОргУп));
	ПараметрыВыгрузки.Вставить("ПодпНаимДок", СокрЛП(Титульный.ДокУпПред));
	
	ПараметрыВыгрузки.Вставить("ПрефиксИмениФайлаВыгрузки", "NO_IMUR");
	
	ПараметрыВыгрузки.Вставить("КодИФНСПосредника", ?(СтруктураРеквизитовФормы.Организация.КрупнейшийНалогоплательщик,
	СокрЛП(СтруктураРеквизитовФормы.Организация.КодНалоговогоОрганаПолучателя), ""));
	
	ПараметрыВыгрузки.Вставить("ИдФайл", СформироватьИдФайл(ПараметрыВыгрузки));
	
	Возврат ПараметрыВыгрузки;
	
КонецФункции

&НаСервере
Функция ИзвлечьСтруктуруXML()
	
	ДеревоСтруктуры = Новый ДеревоЗначений;
	ДеревоСтруктуры.Колонки.Добавить("Код");
	ДеревоСтруктуры.Колонки.Добавить("Тип");
	ДеревоСтруктуры.Колонки.Добавить("Формат");
	ДеревоСтруктуры.Колонки.Добавить("МинРазмерность");
	ДеревоСтруктуры.Колонки.Добавить("МаксРазмерность");
	ДеревоСтруктуры.Колонки.Добавить("Обязательность");
	ДеревоСтруктуры.Колонки.Добавить("Многостраничность");
	ДеревоСтруктуры.Колонки.Добавить("Многострочность");
	ДеревоСтруктуры.Колонки.Добавить("Раздел");
	ДеревоСтруктуры.Колонки.Добавить("Ключ");
	ДеревоСтруктуры.Колонки.Добавить("Условие");
	ДеревоСтруктуры.Колонки.Добавить("ЗначениеПоУмолчанию");
	ДеревоСтруктуры.Колонки.Добавить("Значение");
	ДеревоСтруктуры.Колонки.Добавить("Представление");
	ДеревоСтруктуры.Колонки.Добавить("Показатели");
	
	Макет = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(ИмяМакетаСтруктурыВыгрузки());
	ВысотаТаблицы = Макет.ВысотаТаблицы;
	
	УчтенныеГруппы = Новый Соответствие;
	
	Для Уровень = 0 По Макет.КоличествоУровнейГруппировокСтрок() - 1 Цикл
		Макет.ПоказатьУровеньГруппировокСтрок(Уровень);
		Для НомерСтроки = 2 По ВысотаТаблицы Цикл
			НомСтр = ВысотаТаблицы - НомерСтроки + 2;
			Если Макет.Область(НомСтр, 1).Видимость И УчтенныеГруппы.Получить(НомСтр) = Неопределено Тогда	
				
				РодительскийУзел = ДеревоСтруктуры;
				Если Уровень <> 0 Тогда
					Для Инд = 1 По НомСтр - 2 Цикл
						Узел = УчтенныеГруппы.Получить(НомСтр - Инд);
						Если Узел <> Неопределено Тогда
							РодительскийУзел = Узел;
							Прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				НовСтр = РодительскийУзел.Строки.Вставить(0);
				НовСтр.Код = СокрЛП(Макет.Область(НомСтр, 1, НомСтр, 1).Текст);
				НовСтр.Раздел = СокрЛП(Макет.Область(НомСтр, 2, НомСтр, 2).Текст);
				НовСтр.Ключ = СокрЛП(Макет.Область(НомСтр, 3, НомСтр, 3).Текст);
				НовСтр.Тип = СокрЛП(Макет.Область(НомСтр, 4, НомСтр, 4).Текст);
				НовСтр.Формат = СокрЛП(Макет.Область(НомСтр, 5, НомСтр, 5).Текст);
				МинРазмерность = СокрЛП(Макет.Область(НомСтр, 6, НомСтр, 6).Текст);
				НовСтр.МинРазмерность = ?(ПустаяСтрока(МинРазмерность), ?(НовСтр.Формат = "N", 99999, 0), Число(МинРазмерность));
				МаксРазмерность = СокрЛП(Макет.Область(НомСтр, 7, НомСтр, 7).Текст);
				НовСтр.МаксРазмерность = ?(ПустаяСтрока(МаксРазмерность), 99999, Число(МаксРазмерность));
				НовСтр.Обязательность = СокрЛП(Макет.Область(НомСтр, 8, НомСтр, 8).Текст);
				НовСтр.Многостраничность = НЕ ПустаяСтрока(Макет.Область(НомСтр, 9, НомСтр, 9).Текст);
				НовСтр.Многострочность = НЕ ПустаяСтрока(Макет.Область(НомСтр, 10, НомСтр, 10).Текст);
				НовСтр.Условие = СокрЛП(Макет.Область(НомСтр, 11, НомСтр, 11).Текст);
				НовСтр.ЗначениеПоУмолчанию = СокрЛП(Макет.Область(НомСтр, 12, НомСтр, 12).Текст);
				НовСтр.Представление = СокрЛП(Макет.Область(НомСтр, 13, НомСтр, 13).Текст);
				
				УчтенныеГруппы.Вставить(НомСтр, НовСтр);
				
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат ДеревоСтруктуры;
	
КонецФункции

&НаСервере
Функция ИмяПервогоПоказателяМногострочнойЧастиВыгрузки(Узел)
	
	Результат = Неопределено;
	
	Для Каждого СтрокаУзла из Узел.Строки Цикл
		Если СтрокаУзла.Тип = "С" ИЛИ СтрокаУзла.Тип = "C" Тогда // учтем оба варианта: кириллицу и латиницу
			Результат = ИмяПервогоПоказателяМногострочнойЧастиВыгрузки(СтрокаУзла);
		Иначе
			Если ЗначениеЗаполнено(СтрокаУзла.Ключ) Тогда
				Результат = СокрЛП(СтрокаУзла.Ключ);
			КонецЕсли;
		КонецЕсли;
		
		Если Результат <> Неопределено Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ИмяМакетаСтруктурыВыгрузки()
	
	Возврат "СхемаВыгрузки503";
	
КонецФункции

&НаСервере
Функция ДанныеВыгрузкиКорректны(Узел)
	
	СтатусПроверки = Истина;
	
	Если ТипЗнч(Узел) <> Тип("ДеревоЗначений") Тогда
		Если НЕ ЗначениеСоответствуетФормату(Узел) Тогда
			СтатусПроверки = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Для Каждого Стр из Узел.Строки Цикл
		СтатусПроверки = (ДанныеВыгрузкиКорректны(Стр) И СтатусПроверки);
	КонецЦикла;
	
	Возврат СтатусПроверки;
	
КонецФункции

&НаСервере
Процедура ДополнитьИменаПоказателейМногострочнойЧастиВыгрузки(Узел, Постфикс)
	
	Для Каждого СтрокаУзла из Узел.Строки Цикл
		Если СтрокаУзла.Тип = "С" ИЛИ СтрокаУзла.Тип = "C" Тогда // учтем оба варианта: кириллицу и латиницу
			ДополнитьИменаПоказателейМногострочнойЧастиВыгрузки(СтрокаУзла, Постфикс);
		Иначе
			Если ЗначениеЗаполнено(СтрокаУзла.Ключ) Тогда
				СтрокаУзла.Ключ = СокрЛП(СтрокаУзла.Ключ) + Постфикс;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ДополнитьСохраненныеПоказателиОтчета()
	
	Раздел2 = мДанныеОтчета.Раздел2;
	Для Каждого Страница Из Раздел2 Цикл
		Данные = Страница.Данные[0].Значение;
		
		КодЛьготы = Данные.П000020013003_КодЛьготы;
		Основание = Данные.П000020013003_Основание;
		Если ЗначениеЗаполнено(КодЛьготы) Тогда
			Если КодЛьготы = "2012000" Тогда
				ПолныйКодЛьготы = КодЛьготы + "/" + Основание;
			Иначе
				ПолныйКодЛьготы = КодЛьготы;
			КонецЕсли;
		Иначе
			ПолныйКодЛьготы = "";
		КонецЕсли;
		Данные.Вставить("П100020013003", ПолныйКодЛьготы);
		
		Числитель   = Данные.П000020015003_Числ;
		Знаменатель = Данные.П000020015003_Знам;
		Если ЗначениеЗаполнено(Числитель) И ЗначениеЗаполнено(Знаменатель) Тогда
			Доля = СокрЛП(Формат(Числитель, "ЧГ=") + "/" + Формат(Знаменатель, "ЧГ="));
		Иначе
			Доля = "";
		КонецЕсли;
		Данные.Вставить("П100020015003", Доля);
		
		КодЛьготы = Данные.П000020016003_КодЛьготы;
		Основание = Данные.П000020016003_Основание;
		Если ЗначениеЗаполнено(КодЛьготы) Тогда
			ПолныйКодЛьготы = КодЛьготы + "/" + Основание;
		Иначе
			ПолныйКодЛьготы = "";
		КонецЕсли;
		Данные.Вставить("П100020016003", ПолныйКодЛьготы);
		
		КодЛьготы = Данные.П000020019003_КодЛьготы;
		Основание = Данные.П000020019003_Основание;
		Если ЗначениеЗаполнено(КодЛьготы) Тогда
			ПолныйКодЛьготы = КодЛьготы + "/" + Основание;
		Иначе
			ПолныйКодЛьготы = "";
		КонецЕсли;
		Данные.Вставить("П100020019003", ПолныйКодЛьготы);
		
	КонецЦикла;
	
	Раздел3 = мДанныеОтчета.Раздел3;
	Для Каждого Страница Из Раздел3 Цикл
		Данные = Страница.Данные[0].Значение;
		
		КодЛьготы = Данные.П000030004003_КодЛьготы;
		Основание = Данные.П000030004003_Основание;
		Если ЗначениеЗаполнено(КодЛьготы) Тогда
			Если КодЛьготы = "2012000" Тогда
				ПолныйКодЛьготы = КодЛьготы + "/" + Основание;
			Иначе
				ПолныйКодЛьготы = КодЛьготы;
			КонецЕсли;
		Иначе
			ПолныйКодЛьготы = "";
		КонецЕсли;
		Данные.Вставить("П100030004003", ПолныйКодЛьготы);
		
		Числитель   = Данные.П000030005003_Числ;
		Знаменатель = Данные.П000030005003_Знам;
		Если ЗначениеЗаполнено(Числитель) И ЗначениеЗаполнено(Знаменатель) Тогда
			Доля = СокрЛП(Формат(Числитель, "ЧГ=") + "/" + Формат(Знаменатель, "ЧГ="));
		Иначе
			Доля = "";
		КонецЕсли;
		Данные.Вставить("П100030005003", Доля);
		
		КодЛьготы = Данные.П000030006003_КодЛьготы;
		Основание = Данные.П000030006003_Основание;
		Если ЗначениеЗаполнено(КодЛьготы) Тогда
			ПолныйКодЛьготы = КодЛьготы + "/" + Основание;
		Иначе
			ПолныйКодЛьготы = "";
		КонецЕсли;
		Данные.Вставить("П100030006003", ПолныйКодЛьготы);
		
		Числитель = Данные.П000030008003_Числ;
		Если ТипЗнч(Числитель) = Тип("Число") Тогда
			Числитель = Формат(Числитель);
		КонецЕсли;
		Числитель = СокрЛП(Числитель);
		Знаменатель = Данные.П000030008003_Знам;
		Если ТипЗнч(Знаменатель) = Тип("Число") Тогда
			Знаменатель = Формат(Знаменатель);
		КонецЕсли;
		Знаменатель = СокрЛП(Знаменатель);
		Если ЗначениеЗаполнено(Числитель) И ЗначениеЗаполнено(Знаменатель) Тогда
			Доля = Числитель + "/" + Знаменатель;
		Иначе
			Доля = "";
		КонецЕсли;
		Данные.Вставить("П100030008003", Доля);
		
		КодЛьготы = Данные.П000030010003_КодЛьготы;
		Основание = Данные.П000030010003_Основание;
		Если ЗначениеЗаполнено(КодЛьготы) Тогда
			ПолныйКодЛьготы = КодЛьготы + "/" + Основание;
		Иначе
			ПолныйКодЛьготы = "";
		КонецЕсли;
		Данные.Вставить("П100030010003", ПолныйКодЛьготы);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьЗаполнение_Раздел1(СочетаниеРазделов, СтатусПроверки)
	
	ДанныеРаздела = мДанныеОтчета.Раздел1;
	
	НомерСтроки = 1;
	Постфикс = "_" + СтрокаЧГ0(НомерСтроки);
	
	Пока ДанныеРаздела.Свойство("П000010001003" + Постфикс) Цикл
		
		БлокЗаполнен = ЗначениеЗаполнено(ДанныеРаздела["П000010001003" + Постфикс])
		ИЛИ ЗначениеЗаполнено(ДанныеРаздела["П000010002003" + Постфикс])
		ИЛИ ЗначениеСуммыЗаполнено(ДанныеРаздела["П000010003003" + Постфикс]);
		
		Если БлокЗаполнен Тогда
			
			ИмяОбластиОКТМО = "П000010001003" + Постфикс;
			ИмяОбластиКБК   = "П000010002003" + Постфикс;
			
			ОКТМО = СокрЛП(ДанныеРаздела[ИмяОбластиОКТМО]);
			КБК   = СокрЛП(ДанныеРаздела[ИмяОбластиКБК]);
			
			ДлинаОКТМО = СтрДлина(ОКТМО);
			Если ДлинаОКТМО <> 11 И ДлинаОКТМО <> 8 Тогда
				СообщениеОбОшибке = "В строке " + СтрокаЧГ0(НомерСтроки) + " раздела 1 не" + ?(ДлинаОКТМО = 0, "", "верно") + " задан код по ОКТМО.";
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, СообщениеОбОшибке, "Раздел1", ИмяОбластиОКТМО);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			ДлинаКБК = СтрДлина(КБК);
			Если ДлинаКБК <> 20 Тогда
				СообщениеОбОшибке = "В строке " + СтрокаЧГ0(НомерСтроки) + " раздела 1 не" + ?(ДлинаКБК = 0, "", "верно") + " задан КБК.";
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, СообщениеОбОшибке, "Раздел1", ИмяОбластиКБК);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			Сочетание = СочетаниеРазделов.Добавить();
			Сочетание.ОКТМО      = ОКТМО;
			Сочетание.КБК        = КБК;
			Сочетание.Раздел     = 1;
			Сочетание.Страница   = 1;
			Сочетание.ИмяОбласти = ИмяОбластиОКТМО;
			Сочетание.Счетчик1   = 1;
			
		КонецЕсли;
		
		НомерСтроки = НомерСтроки + 1;
		Постфикс = "_" + СтрокаЧГ0(НомерСтроки);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьЗаполнение_Раздел2(СочетаниеРазделов, СтатусПроверки)
	
	ПодСтрПоискаКодовВидаИмущества = "12356";
	ДопКодВидаИмуществаВСообщении = "";
	Если Год(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) >= 2015 Тогда
		ПодСтрПоискаКодовВидаИмущества = ПодСтрПоискаКодовВидаИмущества + "8";
		ДопКодВидаИмуществаВСообщении = ", ""8""";
	КонецЕсли;
	
	ДанныеРаздела = мДанныеОтчета.Раздел2;
	
	Для Каждого Лист Из ДанныеРаздела Цикл
		
		ДанныеЛиста = Лист.Данные[0].Значение;
		НомерЛиста = ДанныеРаздела.Индекс(Лист) + 1;
		
		ЛистЗаполнен = ЗначениеЗаполнено(ДанныеЛиста.П000020000101) ИЛИ ЗначениеЗаполнено(ДанныеЛиста.П000020001001)
		ИЛИ ЗначениеЗаполнено(ДанныеЛиста.П000020002003) ИЛИ ЗначениеЗаполнено(ДанныеЛиста.П000020002004)
		ИЛИ ЗначениеЗаполнено(ДанныеЛиста.П000020003003) ИЛИ ЗначениеЗаполнено(ДанныеЛиста.П000020003004)
		ИЛИ ЗначениеЗаполнено(ДанныеЛиста.П000020004003) ИЛИ ЗначениеЗаполнено(ДанныеЛиста.П000020004004)
		ИЛИ ЗначениеЗаполнено(ДанныеЛиста.П000020005003) ИЛИ ЗначениеЗаполнено(ДанныеЛиста.П000020005004)
		ИЛИ ЗначениеЗаполнено(ДанныеЛиста.П000020006003) ИЛИ ЗначениеЗаполнено(ДанныеЛиста.П000020006004)
		ИЛИ ЗначениеЗаполнено(ДанныеЛиста.П000020007003) ИЛИ ЗначениеЗаполнено(ДанныеЛиста.П000020007004)
		ИЛИ ЗначениеЗаполнено(ДанныеЛиста.П000020008003) ИЛИ ЗначениеЗаполнено(ДанныеЛиста.П000020008004)
		ИЛИ ЗначениеЗаполнено(ДанныеЛиста.П000020009003) ИЛИ ЗначениеЗаполнено(ДанныеЛиста.П000020009004)
		ИЛИ ЗначениеЗаполнено(ДанныеЛиста.П000020010003) ИЛИ ЗначениеЗаполнено(ДанныеЛиста.П000020010004)
		ИЛИ ЗначениеЗаполнено(ДанныеЛиста.П000020011003) ИЛИ ЗначениеЗаполнено(ДанныеЛиста.П000020011004)
		ИЛИ ЗначениеЗаполнено(ДанныеЛиста.П000020012003)
		ИЛИ ЗначениеЗаполнено(ДанныеЛиста.П000020013003_КодЛьготы) ИЛИ ЗначениеЗаполнено(ДанныеЛиста.П000020013003_Основание)
		ИЛИ ЗначениеЗаполнено(ДанныеЛиста.П000020014003)
		ИЛИ ЗначениеЗаполнено(ДанныеЛиста.П000020015003_Числ) ИЛИ ЗначениеЗаполнено(ДанныеЛиста.П000020015003_Знам)
		ИЛИ ЗначениеЗаполнено(ДанныеЛиста.П000020016003_КодЛьготы) ИЛИ ЗначениеЗаполнено(ДанныеЛиста.П000020016003_Основание)
		ИЛИ ЗначениеЗаполнено(ДанныеЛиста.П000020017003)
		ИЛИ ЗначениеЗаполнено(ДанныеЛиста.П000020018003)
		ИЛИ ЗначениеЗаполнено(ДанныеЛиста.П000020019003_КодЛьготы) ИЛИ ЗначениеЗаполнено(ДанныеЛиста.П000020019003_Основание)
		ИЛИ ЗначениеЗаполнено(ДанныеЛиста.П000020020003)
		ИЛИ ЗначениеЗаполнено(ДанныеЛиста.П000020021003);
		
		Если НЕ ЛистЗаполнен Тогда
			Продолжить;
		КонецЕсли;
		
		// Кода вида имущества.
		КодВидаИмущества = СокрЛП(ДанныеЛиста.П000020000101);
		Если НЕ ЗначениеЗаполнено(КодВидаИмущества) ИЛИ СтрНайти(ПодСтрПоискаКодовВидаИмущества, КодВидаИмущества) = 0 Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерЛиста + " раздела 2 код вида имущества должен принимать одно из значений: ""1"", ""2"", ""3"", ""5"", ""6""" + ДопКодВидаИмуществаВСообщении + ".", "Раздел2", "П000020000101", НомерЛиста);
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		// ОКТМО.
		ОКТМО = СокрЛП(ДанныеЛиста.П000020001001);
		ДлинаОКТМО = СтрДлина(ОКТМО);
		Если ДлинаОКТМО <> 11 И ДлинаОКТМО <> 8 Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерЛиста + " раздела 2 не" + ?(ДлинаОКТМО = 0, "", "верно") + " задан код по ОКТМО.", "Раздел2", "П000020001001", НомерЛиста);
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		// Код льготы в строке 130.
		ДлинаКодаЛьготы = СтрДлина(СокрЛП(ДанныеЛиста.П000020013003_КодЛьготы));
		Если ДлинаКодаЛьготы <> 0 И ДлинаКодаЛьготы <> 7 Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + СтрокаЧГ0(НомерЛиста) + " раздела 2 неверно задан код налоговой льготы.", "Раздел2", "П000020013003", НомерЛиста);
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		// Доля балансовой стоимости.
		Если ЗначениеЗаполнено(ДанныеЛиста.П000020015003_Числ) ИЛИ ЗначениеЗаполнено(ДанныеЛиста.П000020015003_Знам) Тогда
			Если НЕ ЗначениеЗаполнено(ДанныеЛиста.П000020015003_Числ) Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + СтрокаЧГ0(НомерЛиста) + " раздела 2 не задан числитель в доле балансовой стоимости объекта недвижимого имущества на территории субъекта РФ.", "Раздел2", "П000020015003_Числ", НомерЛиста);
				СтатусПроверки = Ложь;
			ИначеЕсли НЕ ЗначениеЗаполнено(ДанныеЛиста.П000020015003_Знам) Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + СтрокаЧГ0(НомерЛиста) + " раздела 2 не задан знаменатель в доле балансовой стоимости объекта недвижимого имущества на территории субъекта РФ.", "Раздел2", "П000020015003_Знам", НомерЛиста);
				СтатусПроверки = Ложь;
			ИначеЕсли ДанныеЛиста.П000020015003_Знам < ДанныеЛиста.П000020015003_Числ Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + СтрокаЧГ0(НомерЛиста) + " раздела 2 числитель больше знаменателя в доле балансовой стоимости объекта недвижимого имущества на территории субъекта РФ.", "Раздел2", "П000020015003_Числ", НомерЛиста);
				СтатусПроверки = Ложь;
			КонецЕсли;
		ИначеЕсли КодВидаИмущества = "2" Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерЛиста + " раздела 2 не задана доля балансовой стоимости объекта недвижимого имущества на территории субъекта РФ.", "Раздел2", "П000020015003_Числ", НомерЛиста);
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		// Код льготы в строке 160.
		ДлинаКодаЛьготы = СтрДлина(СокрЛП(ДанныеЛиста.П000020016003_КодЛьготы));
		Если ДлинаКодаЛьготы <> 0 И ДлинаКодаЛьготы <> 7 Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + СтрокаЧГ0(НомерЛиста) + " раздела 2 неверно задан код налоговой льготы (установленной в виде понижения налоговой ставки).", "Раздел2", "П000020016003", НомерЛиста);
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		// Код льготы в строке 190.
		ДлинаКодаЛьготы = СтрДлина(СокрЛП(ДанныеЛиста.П000020019003_КодЛьготы));
		Если ДлинаКодаЛьготы <> 0 И ДлинаКодаЛьготы <> 7 Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + СтрокаЧГ0(НомерЛиста) + " раздела 2 неверно задан код налоговой льготы (в виде уменьшения суммы налога, подлежащей уплате в бюджет).", "Раздел2", "П000020019003", НомерЛиста);
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		Сочетание = СочетаниеРазделов.Добавить();
		Сочетание.ОКТМО        = ОКТМО;
		Сочетание.КБК          = КБКПоКодуВидаИмущества(КодВидаИмущества);
		Сочетание.ВидИмущества = КодВидаИмущества;
		Сочетание.Раздел       = 2;
		Сочетание.Страница     = НомерЛиста;
		Сочетание.ИмяОбласти   = "П000020001001";
		Сочетание.Счетчик2     = 1;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьЗаполнение_Раздел3(СочетаниеРазделов, СтатусПроверки)
	
	ДанныеРаздела = мДанныеОтчета.Раздел3;
	
	Для Каждого Лист Из ДанныеРаздела Цикл
		
		ДанныеЛиста = Лист.Данные[0].Значение;
		НомерЛиста = ДанныеРаздела.Индекс(Лист) + 1;
		
		ЛистЗаполнен = ЗначениеЗаполнено(ДанныеЛиста.П000030001001)
		ИЛИ ЗначениеЗаполнено(ДанныеЛиста.П000030001401)
		ИЛИ ЗначениеЗаполнено(ДанныеЛиста.П000030001501)
		ИЛИ ЗначениеЗаполнено(ДанныеЛиста.П000030002003)
		ИЛИ ЗначениеЗаполнено(ДанныеЛиста.П000030003003)
		ИЛИ ЗначениеЗаполнено(ДанныеЛиста.П000030004003_КодЛьготы) ИЛИ ЗначениеЗаполнено(ДанныеЛиста.П000030004003_Основание)
		ИЛИ ЗначениеЗаполнено(ДанныеЛиста.П000030005003_Числ) ИЛИ ЗначениеЗаполнено(ДанныеЛиста.П000030005003_Знам)
		ИЛИ ЗначениеЗаполнено(ДанныеЛиста.П000030006003_КодЛьготы) ИЛИ ЗначениеЗаполнено(ДанныеЛиста.П000030006003_Основание)
		ИЛИ ЗначениеЗаполнено(ДанныеЛиста.П000030007003)
		ИЛИ ЗначениеЗаполнено(ДанныеЛиста.П000030008003_Числ) ИЛИ ЗначениеЗаполнено(ДанныеЛиста.П000030008003_Знам)
		ИЛИ ЗначениеЗаполнено(ДанныеЛиста.П000030009003)
		ИЛИ ЗначениеЗаполнено(ДанныеЛиста.П000030010003_КодЛьготы) ИЛИ ЗначениеЗаполнено(ДанныеЛиста.П000030010003_Основание)
		ИЛИ ЗначениеЗаполнено(ДанныеЛиста.П000030011003);
		
		Если НЕ ЛистЗаполнен Тогда
			Продолжить;
		КонецЕсли;
		
		// Кадастровый номер здания.
		КадастровыйНомерЗдания = СокрЛП(ДанныеЛиста.П000030001401);
		КадастровыйНомерПомещения = СокрЛП(ДанныеЛиста.П000030001501);
		Если НЕ ЗначениеЗаполнено(КадастровыйНомерЗдания) Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерЛиста + " раздела 3 не задан кадастровый номер здания (строения, сооружения).", "Раздел3", "П000030001401", НомерЛиста);
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		// ОКТМО.
		ОКТМО = СокрЛП(ДанныеЛиста.П000030001001);
		ДлинаОКТМО = СтрДлина(ОКТМО);
		Если ДлинаОКТМО <> 11 И ДлинаОКТМО <> 8 Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерЛиста + " раздела 3 не" + ?(ДлинаОКТМО = 0, "", "верно") + " задан код по ОКТМО.", "Раздел3", "П000030001001", НомерЛиста);
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		// Кадастровая стоимость.
		Если ДанныеЛиста.П000030002003 < ДанныеЛиста.П000030003003 Тогда;
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерЛиста + " раздела 3 значение в строке 030 превышает значение в строке 020.", "Раздел3", "П000030003003", НомерЛиста);
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		// Код льготы в строке 040.
		ДлинаКодаЛьготы = СтрДлина(СокрЛП(ДанныеЛиста.П000030004003_КодЛьготы));
		Если ДлинаКодаЛьготы <> 0 И ДлинаКодаЛьготы <> 7 Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерЛиста + " раздела 3 неверно задан код налоговой льготы.", "Раздел3", "П000030004003", НомерЛиста);
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		// Доля инвентаризационной стоимости.
		Если ЗначениеЗаполнено(ДанныеЛиста.П000030005003_Числ) ИЛИ ЗначениеЗаполнено(ДанныеЛиста.П000030005003_Знам) Тогда
			Если НЕ ЗначениеЗаполнено(ДанныеЛиста.П000030005003_Числ) Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерЛиста + " раздела 3 не задан числитель в доле инвентаризационной стоимости объекта недвижимого имущества на территории субъекта РФ.", "Раздел3", "П000030005003_Числ", НомерЛиста);
				СтатусПроверки = Ложь;
			ИначеЕсли НЕ ЗначениеЗаполнено(ДанныеЛиста.П000030005003_Знам) Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерЛиста + " раздела 3 не задан знаменатель в доле инвентаризационной стоимости объекта недвижимого имущества на территории субъекта РФ.", "Раздел3", "П000030005003_Знам", НомерЛиста);
				СтатусПроверки = Ложь;
			ИначеЕсли ДанныеЛиста.П000030005003_Знам < ДанныеЛиста.П000030005003_Числ Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерЛиста + " раздела 3 числитель больше знаменателя в доле инвентаризационной стоимости объекта недвижимого имущества на территории субъекта РФ.", "Раздел3", "П000030005003_Числ", НомерЛиста);
				СтатусПроверки = Ложь;
			КонецЕсли;
		КонецЕсли;
		
		// Код льготы в строке 060.
		ДлинаКодаЛьготы = СтрДлина(СокрЛП(ДанныеЛиста.П000030006003_КодЛьготы));
		Если ДлинаКодаЛьготы <> 0 И ДлинаКодаЛьготы <> 7 Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерЛиста + " раздела 3 неверно задан код налоговой льготы (установленной в виде понижения налоговой ставки).", "Раздел3", "П000030006003", НомерЛиста);
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		// Коэффициент К.
		Если ЗначениеЗаполнено(ДанныеЛиста.П000030008003_Числ) ИЛИ ЗначениеЗаполнено(ДанныеЛиста.П000030008003_Знам) Тогда
			Если ДанныеЛиста.П000030008003_Знам = "0" Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерЛиста + " раздела 3 ноль в знаменателе коэффициента К недопустим.", "Раздел3", "П000030008003_Знам", НомерЛиста);
				СтатусПроверки = Ложь;
			Иначе
				Если НЕ ЗначениеЗаполнено(ДанныеЛиста.П000030008003_Числ) Тогда
					РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерЛиста + " раздела 3 не задан числитель коэффициента К.", "Раздел3", "П000030008003_Числ", НомерЛиста);
					СтатусПроверки = Ложь;
				ИначеЕсли НЕ ЗначениеЗаполнено(ДанныеЛиста.П000030008003_Знам) Тогда
					РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерЛиста + " раздела 3 не задан знаменатель коэффициента К.", "Раздел3", "П000030008003_Знам", НомерЛиста);
					СтатусПроверки = Ложь;
				ИначеЕсли ДанныеЛиста.П000030008003_Знам < ДанныеЛиста.П000030008003_Числ Тогда
					РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерЛиста + " раздела 3 числитель больше знаменателя у коэффициента К.", "Раздел3", "П000030008003_Числ", НомерЛиста);
					СтатусПроверки = Ложь;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		// Код льготы в строке 100.
		ДлинаКодаЛьготы = СтрДлина(СокрЛП(ДанныеЛиста.П000030010003_КодЛьготы));
		Если ДлинаКодаЛьготы <> 0 И ДлинаКодаЛьготы <> 7 Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерЛиста + " раздела 3 неверно задан код налоговой льготы (в виде уменьшения суммы налога, подлежащей уплате в бюджет).", "Раздел3", "П000030010003", НомерЛиста);
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		Сочетание = СочетаниеРазделов.Добавить();
		Сочетание.ОКТМО = ОКТМО;
		Сочетание.КБК   = КБКИмуществаИностраннойОрганизации();
		
		Сочетание.КадастровыйНомерЗдания    = КадастровыйНомерЗдания;
		Сочетание.КадастровыйНомерПомещения = КадастровыйНомерПомещения;
		
		Сочетание.Раздел     = 3;
		Сочетание.Страница   = НомерЛиста;
		Сочетание.ИмяОбласти = "П000030001001";
		Сочетание.Счетчик3   = 1;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьЗаполнение_СочетаниеРазделов(СочетаниеРазделов, СтатусПроверки)
	
	СочетанияРаздела1 = СочетаниеРазделов.НайтиСтроки(Новый Структура("Раздел", 1));
	СочетанияРаздела2 = СочетаниеРазделов.НайтиСтроки(Новый Структура("Раздел", 2));
	СочетанияРаздела3 = СочетаниеРазделов.НайтиСтроки(Новый Структура("Раздел", 3));
	
	СокращеннаяПроверка = Ложь;
	
	Если СочетанияРаздела1.Количество() = 0 Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "В разделе 1 не заполнен ни один блок с информацией о суммах налога.", "Раздел1", "П000010001003_1");
		СтатусПроверки = Ложь;
		
		СокращеннаяПроверка = Истина;
	КонецЕсли;
	
	Если СочетанияРаздела2.Количество() = 0 И СочетанияРаздела3.Количество() = 0 Тогда
		СообщениеОбОшибке = "В декларации отсутствуют заполненные листы раздела 2 или раздела 3.";
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, СообщениеОбОшибке, "Раздел2", "П000020001001", 1);
		СтатусПроверки = Ложь;
		
		СокращеннаяПроверка = Истина;
	КонецЕсли;
	
	Если СокращеннаяПроверка Тогда
		Возврат;
	КонецЕсли;
	
	ПовторенияРаздела1 = СочетаниеРазделов.Скопировать(СочетанияРаздела1);
	ПовторенияРаздела1.Свернуть("ОКТМО, КБК", "Счетчик1");
	
	Для Каждого СтрокаПроверки Из ПовторенияРаздела1 Цикл
		Если СтрокаПроверки.Счетчик1 > 1 И ЗначениеЗаполнено(СтрокаПроверки.ОКТМО) И ЗначениеЗаполнено(СтрокаПроверки.КБК) Тогда
			УсловияПоиска = Новый Структура("ОКТМО, КБК, Раздел", СтрокаПроверки.ОКТМО, СтрокаПроверки.КБК, 1);
			СтрокиДубликатов = СочетаниеРазделов.НайтиСтроки(УсловияПоиска);
			ТаблицаДубликатов = СочетаниеРазделов.Скопировать(СтрокиДубликатов);
			ТаблицаДубликатов.Сортировать("Страница, ИмяОбласти");
			
			СтраницаПерехода = ТаблицаДубликатов[0].Страница;
			ПозицияПерехода = ТаблицаДубликатов[0].ИмяОбласти;
			
			ТаблицаДубликатов.Свернуть("Страница");
			ТаблицаДубликатов.Сортировать("Страница");
			
			СписокСтраниц = "";
			Для Каждого Дубликат Из ТаблицаДубликатов Цикл
				СписокСтраниц = СписокСтраниц + ", " + СтрокаЧГ0(Дубликат.Страница);
			КонецЦикла;
			СписокСтраниц = Сред(СписокСтраниц, 3);
			
			СообщениеОбОшибке = "Обнаружены дублирующиеся сочетания кода по ОКТМО " + СтрокаПроверки.ОКТМО + " и КБК в разделе 1.";
			
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, СообщениеОбОшибке, "Раздел1", ПозицияПерехода, СтраницаПерехода);
			СтатусПроверки = Ложь;
		КонецЕсли;
	КонецЦикла;
	
	СочетаниеРазделовСвернутое = СочетаниеРазделов.Скопировать();
	СочетаниеРазделовСвернутое.Свернуть("ОКТМО, КБК", "Счетчик1, Счетчик2, Счетчик3");
	
	Для Каждого Сочетание Из СочетаниеРазделовСвернутое Цикл
		// Связи раздела 1.
		Если Сочетание.Счетчик1 <> 0 И Сочетание.Счетчик2 = 0 И Сочетание.Счетчик3 = 0
			И ЗначениеЗаполнено(Сочетание.ОКТМО) И ЗначениеЗаполнено(Сочетание.КБК) Тогда
			УсловияПоиска = Новый Структура("ОКТМО, КБК, Раздел", Сочетание.ОКТМО, Сочетание.КБК, 1);
			НесвязанныеСтроки = СочетаниеРазделов.НайтиСтроки(УсловияПоиска);
			
			СтраницаПерехода = НесвязанныеСтроки[0].Страница;
			ПозицияПерехода = НесвязанныеСтроки[0].ИмяОбласти;
			СообщениеОбОшибке = "Для сочетания кода по ОКТМО " + Сочетание.ОКТМО
			+ " и КБК " +  Сочетание.КБК + " раздела 1 не обнаружены заполненые листы разделов определения налоговой базы.";
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, СообщениеОбОшибке, "Раздел1", ПозицияПерехода);
			
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		// Связи раздела 2.
		Если Сочетание.Счетчик1 = 0 И Сочетание.Счетчик2 <> 0 И Сочетание.Счетчик3 = 0
			И ЗначениеЗаполнено(Сочетание.ОКТМО) И ЗначениеЗаполнено(Сочетание.КБК) Тогда
			
			УсловияПоиска = Новый Структура("ОКТМО, КБК, Раздел", Сочетание.ОКТМО, Сочетание.КБК, 2);
			НесвязанныеСтроки = СочетаниеРазделов.НайтиСтроки(УсловияПоиска);
			
			СтраницаПерехода = НесвязанныеСтроки[0].Страница;
			ПозицияПерехода = "П000020001001";
			
			СообщениеОбОшибке = "Для сочетания кода по вида имущества " + НесвязанныеСтроки[0].ВидИмущества
			+ " и ОКТМО " + НесвязанныеСтроки[0].ОКТМО + " на листе " + СтрокаЧГ0(СтраницаПерехода)
			+ " раздела 2 не найдены соответствующие значения кода по ОКТМО и КБК в разделе 1.";
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, СообщениеОбОшибке, "Раздел2", ПозицияПерехода, СтраницаПерехода);
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		// Связи раздела 3.
		Если Сочетание.Счетчик1 = 0 И Сочетание.Счетчик2 = 0 И Сочетание.Счетчик3 <> 0
			И ЗначениеЗаполнено(Сочетание.ОКТМО) И ЗначениеЗаполнено(Сочетание.КБК) Тогда
			
			УсловияПоиска = Новый Структура("ОКТМО, КБК, Раздел", Сочетание.ОКТМО, Сочетание.КБК, 3);
			НесвязанныеСтроки = СочетаниеРазделов.НайтиСтроки(УсловияПоиска);
			
			СтраницаПерехода = НесвязанныеСтроки[0].Страница;
			ПозицияПерехода = "П000030001001";
			
			СообщениеОбОшибке = "Для ОКТМО " + НесвязанныеСтроки[0].ОКТМО + " на листе " + СтрокаЧГ0(СтраницаПерехода)
			+ " раздела 3 не найдены соответствующие значения кода по ОКТМО и КБК в разделе 1.";
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, СообщениеОбОшибке, "Раздел3", ПозицияПерехода, СтраницаПерехода);
			СтатусПроверки = Ложь;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьЗаполнение_ТитульныйЛист(ПараметрыВыгрузки, СтатусПроверки)
	
	Если СтруктураРеквизитовФормы.ФормаВРедакцииПисьмаБС_4_11_5197 Тогда
		ВозможныеКодыПериода = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок("21,17,18,51,47,48");
	Иначе
		ВозможныеКодыПериода = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок("21,31,33,51,52,53");
	КонецЕсли;
	
	ВозможныеКодыПоМесту = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок("213,214,215,216,221,245,281");
	
	Если ПустаяСтрока(ПараметрыВыгрузки.ИННОрг) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "Не задан ИНН организации.", "Титульный", "ИНН1");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ПустаяСтрока(ПараметрыВыгрузки.КППОрг) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "Не задан КПП организации.", "Титульный", "КПП1");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ПустаяСтрока(ПараметрыВыгрузки.Период) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На титульном листе не задан код налогового периода.", "Титульный", "Период");
		СтатусПроверки = Ложь;
	ИначеЕсли ВозможныеКодыПериода.Найти(ПараметрыВыгрузки.Период) = Неопределено Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На титульном листе задан некорректный код налогового периода.", "Титульный", "Период");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ПустаяСтрока(ПараметрыВыгрузки.НаимОрг) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "Не указано полное наименование организации.", "Титульный", "НаимОрг");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ПустаяСтрока(ПараметрыВыгрузки.КодНО) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "Не задан код налогового органа.", "Титульный", "НалоговыйОрган");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ПустаяСтрока(ПараметрыВыгрузки.ОКВЭД) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На титульном листе не задано значение кода вида деятельности по ОКВЭД.", "Титульный", "ОКВЭД");
		СтатусПроверки = Ложь;
	ИначеЕсли НЕ РегламентированнаяОтчетностьКлиентСервер.ОКВЭДСоответствуетТребованиям(ПараметрыВыгрузки.ОКВЭД) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На титульном листе задано некорректное значение кода вида деятельности по ОКВЭД. Допустимы значения, соответствующие следующим шаблонам: ""XX"", ""XX.X"", ""XX.XX"", ""XX.XX.X"", ""XX.XX.XX"" (X - любая цифра).", "Титульный", "ОКВЭД");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ПустаяСтрока(ПараметрыВыгрузки.ПоМесту) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На титульном листе не задан код места, по которому представляется документ.", "Титульный", "ПоМесту");
		СтатусПроверки = Ложь;
	ИначеЕсли ВозможныеКодыПоМесту.Найти(ПараметрыВыгрузки.ПоМесту) = Неопределено Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На титульном листе задан некорректный код места, по которому представляется документ.", "Титульный", "ПоМесту");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ПустаяСтрока(ПараметрыВыгрузки.ПодпФамилия) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "Не задана фамилия подписанта.", "Титульный", "ОргПодписант");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ПустаяСтрока(ПараметрыВыгрузки.ПодпИмя) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "Не задано имя подписанта.", "Титульный", "ОргПодписант");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ПараметрыВыгрузки.ПрПодп = "2" И ПустаяСтрока(ПараметрыВыгрузки.ПодпНаимДок) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "Не задано наименование документа, удостоверяющего полномочия представителя.", "Титульный", "ДокУпПред");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыВыгрузки.ИННРеорг) ИЛИ ЗначениеЗаполнено(ПараметрыВыгрузки.КППРеорг) ИЛИ ЗначениеЗаполнено(ПараметрыВыгрузки.ФормРеорг) Тогда
		
		Если ПустаяСтрока(ПараметрыВыгрузки.ФормРеорг) Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "Не задан код формы реорганизации.", "Титульный", "КодФормыРеорганизации");
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(ПараметрыВыгрузки.ФормРеорг) И ПараметрыВыгрузки.ФормРеорг <> "0" Тогда
			
			ДлинаИННРеорг = СтрДлина(ПараметрыВыгрузки.ИННРеорг);
			Если ДлинаИННРеорг <> 10 ИЛИ НЕ СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(ПараметрыВыгрузки.ИННРеорг) Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "Не" + ?(ДлинаИННРеорг = 0, "", "верно") + " задан ИНН реорганизованной организации.", "Титульный", "ИННРеорганизованнойОрганизации");
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			ДлинаКППРеорг = СтрДлина(ПараметрыВыгрузки.КППРеорг);
			Если ДлинаКППРеорг <> 9 Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "Не" + ?(ДлинаКППРеорг = 0, "", "верно") + " задан КПП реорганизованной организации.", "Титульный", "КППРеорганизованнойОрганизации");
				СтатусПроверки = Ложь;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ВыгрузкаВозможна(ПараметрыВыгрузки)
	
	СтатусПроверки = Истина;
	
	ПроверитьЗаполнение_ТитульныйЛист(ПараметрыВыгрузки, СтатусПроверки);
	
	// Таблица для проверки сочетаний ОКТМО и КБК раздела 1 с разделами 2 или 3.
	СочетаниеРазделов = Новый ТаблицаЗначений;
	СочетаниеРазделов.Колонки.Добавить("ОКТМО");
	СочетаниеРазделов.Колонки.Добавить("КБК");
	СочетаниеРазделов.Колонки.Добавить("ВидИмущества");
	СочетаниеРазделов.Колонки.Добавить("КадастровыйНомерЗдания");
	СочетаниеРазделов.Колонки.Добавить("КадастровыйНомерПомещения");
	СочетаниеРазделов.Колонки.Добавить("Раздел", Новый ОписаниеТипов("Число"));
	СочетаниеРазделов.Колонки.Добавить("Страница", Новый ОписаниеТипов("Число"));
	СочетаниеРазделов.Колонки.Добавить("ИмяОбласти");
	СочетаниеРазделов.Колонки.Добавить("Счетчик1", Новый ОписаниеТипов("Число"));
	СочетаниеРазделов.Колонки.Добавить("Счетчик2", Новый ОписаниеТипов("Число"));
	СочетаниеРазделов.Колонки.Добавить("Счетчик3", Новый ОписаниеТипов("Число"));
	
	СочетаниеРазделов.Индексы.Добавить("Раздел");
	
	ПроверитьЗаполнение_Раздел1(СочетаниеРазделов, СтатусПроверки);
	ПроверитьЗаполнение_Раздел2(СочетаниеРазделов, СтатусПроверки);
	ПроверитьЗаполнение_Раздел3(СочетаниеРазделов, СтатусПроверки);
	
	ПроверитьЗаполнение_СочетаниеРазделов(СочетаниеРазделов, СтатусПроверки);
	
	Возврат СтатусПроверки;
	
КонецФункции

&НаСервере
Функция АдресПоказателя(СтрокаПоказателя)
	
	Результат = СтрокаПоказателя.Код;
	
	СтрокаВерхнегоУровня = СтрокаПоказателя.Родитель;
	Пока ЗначениеЗаполнено(СтрокаВерхнегоУровня) Цикл
		Результат = СтрокаВерхнегоУровня.Код + "\" + Результат;
		СтрокаВерхнегоУровня = СтрокаВерхнегоУровня.Родитель;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ВыгрузитьДеревоВXML(ДеревоВыгрузки, ПараметрыВыгрузки)
	
	ПотокXML = РегламентированнаяОтчетность.СоздатьНовыйПотокXML("windows-1251"); // создаем новый поток для записи
	ЗаписатьУзелДереваВXML(ДеревоВыгрузки, ПотокXML, ПараметрыВыгрузки); // пишем дерево в поток
	ТекстДляЗаписи = ПотокXML.Закрыть(); // получаем текст XML
	Возврат ТекстДляЗаписи;
	
КонецФункции

&НаСервере
Функция СформироватьИдФайл(ПараметрыВыгрузки)
	
	Возврат ПараметрыВыгрузки.ПрефиксИмениФайлаВыгрузки
	+ "_" + ?(ЗначениеЗаполнено(ПараметрыВыгрузки.КодИФНСПосредника), ПараметрыВыгрузки.КодИФНСПосредника, ПараметрыВыгрузки.КодНО)
	+ "_" + ПараметрыВыгрузки.КодНО
	+ "_" + ?(ПараметрыВыгрузки.Свойство("ЭтоПБОЮЛ") И ПараметрыВыгрузки.ЭтоПБОЮЛ, СокрЛП(ПараметрыВыгрузки.ИННОрг), СокрЛП(ПараметрыВыгрузки.ИННОрг) + СокрЛП(ПараметрыВыгрузки.КППОрг))
	+ "_" + Формат(ТекущаяДатаСеанса(), "ДФ=ггггММдд")
	+ "_" + Строка(Новый УникальныйИдентификатор);
	
КонецФункции

&НаСервере
Процедура ОбработатьУсловныеЭлементы(Знач ПараметрыВыгрузки, Узел)
	
	КоличествоСтрок = Узел.Строки.Количество();
	Для Инд = 1 По КоличествоСтрок Цикл
		ТекСтр = Узел.Строки.Получить(КоличествоСтрок - Инд);
		Если НЕ ПустаяСтрока(ТекСтр.Условие) Тогда
			Если НЕ РегламентированнаяОтчетность.УсловиеВыполнено(ЭтаФорма, ПараметрыВыгрузки, ТекСтр.Условие) Тогда
				Узел.Строки.Удалить(ТекСтр);
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		ОбработатьУсловныеЭлементы(ПараметрыВыгрузки, ТекСтр);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДаннымиУзел(ПараметрыВыгрузки, Узел, НомерСтроки = Неопределено)
	
	КоличествоВставленныхУзлов = 0;
	
	Для Каждого Стр из Узел.Строки Цикл
		
		Если КоличествоВставленныхУзлов > 0 Тогда
			КоличествоВставленныхУзлов = КоличествоВставленныхУзлов - 1;
			Продолжить;
		КонецЕсли;
		
		Если Стр.Тип = "С" ИЛИ Стр.Тип = "C" Тогда // учтем оба варианта: кириллицу и латиницу
			Если Стр.Многостраничность Тогда
				ДанныеРаздела = мДанныеОтчета[Стр.Раздел];
				Для Каждого СтраницаРаздела Из ДанныеРаздела Цикл
					УзелСтраницы = НовыйУзелИзПрототипа(Стр);
					УзелСтраницы.Многостраничность = Ложь;
					ВиртуальныеДанные = Новый Структура(Стр.Раздел, СтраницаРаздела.Данные);
					ЗаполнитьДаннымиУзел(ВиртуальныеДанные, УзелСтраницы);
					КоличествоВставленныхУзлов = КоличествоВставленныхУзлов + 1;
				КонецЦикла;
				РегламентированнаяОтчетность.УдалитьУзел(Стр);
				КоличествоВставленныхУзлов = Макс(0, КоличествоВставленныхУзлов - 1);
				
			ИначеЕсли Стр.Многострочность Тогда
				Если НЕ ПустаяСтрока(Стр.Раздел) Тогда
					Если ПараметрыВыгрузки.Свойство(Стр.Раздел) Тогда
						ДанныеРаздела = ПараметрыВыгрузки[Стр.Раздел];
					Иначе
						ДанныеРаздела = мДанныеОтчета["ПолеТабличногоДокумента" + Стр.Раздел];
					КонецЕсли;
				Иначе
					ДанныеРаздела = ПараметрыВыгрузки;
				КонецЕсли;
				ИмяКонтрольногоПоказателя = ИмяПервогоПоказателяМногострочнойЧастиВыгрузки(Стр);
				
				НомерСтроки = 1;
				Постфикс = "_" + Формат(НомерСтроки, "ЧГ=0");
				
				Пока ДанныеРаздела.Свойство(ИмяКонтрольногоПоказателя + Постфикс) Цикл
					УзелСтроки = НовыйУзелИзПрототипа(Стр);
					УзелСтроки.Многострочность = Ложь;
					ДополнитьИменаПоказателейМногострочнойЧастиВыгрузки(УзелСтроки, Постфикс);
					ЗаполнитьДаннымиУзел(ДанныеРаздела, УзелСтроки);
					КоличествоВставленныхУзлов = КоличествоВставленныхУзлов + 1;
					
					НомерСтроки = НомерСтроки + 1;
					Постфикс = "_" + Формат(НомерСтроки, "ЧГ=0");
				КонецЦикла;
				
				РегламентированнаяОтчетность.УдалитьУзел(Стр);
				КоличествоВставленныхУзлов = Макс(0, КоличествоВставленныхУзлов - 1);
				
			Иначе
				Если Стр.Код = "ИмущАв" Тогда	
					ЗаполнитьСодержательнуюЧасть(Стр);
				Иначе
					ЗаполнитьДаннымиУзел(ПараметрыВыгрузки, Стр);
				КонецЕсли;
				
			КонецЕсли;
		Иначе
			Если ПустаяСтрока(Стр.ЗначениеПоУмолчанию) Тогда
				Если НЕ ПустаяСтрока(Стр.Раздел) И НЕ ПустаяСтрока(Стр.Ключ) Тогда
					Если ПараметрыВыгрузки.Свойство(Стр.Раздел) Тогда
						// Данные представлены в виде раздела в параметрах.
						ЗначениеЭлемента = ПараметрыВыгрузки[Стр.Раздел][Стр.Ключ];
					ИначеЕсли ПараметрыВыгрузки.Свойство(Стр.Ключ) Тогда
						// Данные заданы в виде значения в параметрах.
						ЗначениеЭлемента = ПараметрыВыгрузки[Стр.Ключ];
					Иначе
						// Данные находятся в сохраненных данных отчета.
						ЗначениеЭлемента = мДанныеОтчета["ПолеТабличногоДокумента" + Стр.Раздел][Стр.Ключ];
					КонецЕсли;
					ВывестиПоказательВXML(Стр, ЗначениеЭлемента);
				Иначе
					Стр.Значение = "";
				КонецЕсли;
			ИначеЕсли Лев(Стр.ЗначениеПоУмолчанию, 1) = "&" Тогда
				Ключ = Сред(Стр.ЗначениеПоУмолчанию, 2);
				Если РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(ПараметрыВыгрузки, Ключ) Тогда
					ВывестиПоказательВXML(Стр, ПараметрыВыгрузки[Ключ]);
				КонецЕсли;
			Иначе
				Стр.Значение = Стр.ЗначениеПоУмолчанию;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОтсечьНезаполненныеНеобязательныеУзлы(Узел)
	
	КоличествоСтрок = Узел.Строки.Количество();
	Для Инд = 1 По КоличествоСтрок Цикл
		Стр = Узел.Строки.Получить(КоличествоСтрок - Инд);
		ОтсечьНезаполненныеНеобязательныеУзлы(Стр);
	КонецЦикла;
	
	Если ТипЗнч(Узел) <> Тип("ДеревоЗначений") Тогда
		Если (СтрНайти(Узел.Обязательность, "Н") <> 0 ИЛИ СтрНайти(Узел.Обязательность, "H") <> 0) И УзелПуст(Узел) Тогда // учтем оба варианта: кириллицу и латиницу
			РегламентированнаяОтчетность.УдалитьУзел(Узел);
		ИначеЕсли (СтрНайти(Узел.Обязательность, "М") <> 0 ИЛИ СтрНайти(Узел.Обязательность, "M") <> 0) // учтем оба варианта: кириллицу и латиницу
			И УзелПуст(Узел)
			И ?(СтрНайти(Узел.Обязательность, "О") <> 0 ИЛИ СтрНайти(Узел.Обязательность, "O") <> 0, РегламентированнаяОтчетность.ИмеютсяАналогичныеСоседниеУзлыКлюч(Узел), Истина) Тогда
			РегламентированнаяОтчетность.УдалитьУзел(Узел);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЗначениеСоответствуетФормату(Стр)
	
	СтатусПроверки = Истина;
	Если Стр.Формат = "Т" ИЛИ Стр.Формат = "T" Тогда // учтем оба варианта: кириллицу и латиницу
		ДлинаЗначения = СтрДлина(Стр.Значение);
		Если ДлинаЗначения < Стр.МинРазмерность Тогда
			СтатусПроверки = Ложь;
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "Формирование XML: Длина значения показателя """ + РегламентированнаяОтчетность.ПредставлениеПоказателя(Стр) + """ (" + АдресПоказателя(Стр)+ ") меньше минимально возможной (" + ДлинаЗначения + " < " + Стр.МинРазмерность + ")", "Титульный", "");
		КонецЕсли;
		Если ДлинаЗначения > Стр.МаксРазмерность Тогда
			СтатусПроверки = Ложь;
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "Формирование XML: Длина значения показателя """ + РегламентированнаяОтчетность.ПредставлениеПоказателя(Стр) + """  (" + АдресПоказателя(Стр)+ ") больше максимально возможной (" + ДлинаЗначения + " > " + Стр.МаксРазмерность + ")", "Титульный", "");
		КонецЕсли;
	КонецЕсли;
	Возврат СтатусПроверки;
	
КонецФункции

&НаСервере
Функция НовыйУзелИзПрототипа(ПрототипУзла)
	
	РодительУзла = ПрототипУзла.Родитель;
	
	ПозицияИсходногоУзла = РодительУзла.Строки.Индекс(ПрототипУзла);
	НовыйУзел = РодительУзла.Строки.Вставить(ПозицияИсходногоУзла);
	ЗаполнитьЗначенияСвойств(НовыйУзел, ПрототипУзла, , "Родитель, Строки");
	Для Каждого Стр из ПрототипУзла.Строки Цикл
		СкопироватьУзел(НовыйУзел, Стр);
	КонецЦикла;
	
	Возврат НовыйУзел;
	
КонецФункции

&НаСервере
Функция ЗаписатьУзелДереваВXML(СтрокаДерева, ПотокXML, ПараметрыВыгрузки) Экспорт
	
	Если ТипЗнч(СтрокаДерева) = Тип("ДеревоЗначений") Тогда
		ПотокXML.ЗаписатьНачалоЭлемента("Файл");
		ПотокXML.ЗаписатьАтрибут("xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");
		Для каждого Стр Из СтрокаДерева.Строки Цикл
			ЗаписатьУзелДереваВXML(Стр, ПотокXML, ПараметрыВыгрузки);
		КонецЦикла;
		ПотокXML.ЗаписатьКонецЭлемента();
	Иначе
		Если СтрокаДерева.Тип = "А" ИЛИ СтрокаДерева.Тип = "A" Тогда 
			ПотокXML.ЗаписатьАтрибут(СтрокаДерева.Код, Строка(СтрокаДерева.Значение));
		Иначе
			ПотокXML.ЗаписатьНачалоЭлемента(СтрокаДерева.Код);
			Для каждого Лист из СтрокаДерева.Строки Цикл
				ЗаписатьУзелДереваВXML(Лист, ПотокXML, ПараметрыВыгрузки);
			КонецЦикла;
			ПотокXML.ЗаписатьТекст(Строка(СтрокаДерева.Значение));
			ПотокXML.ЗаписатьКонецЭлемента();
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьСодержательнуюЧасть(УзелРодитель)
	
	Раздел1 = мДанныеОтчета.Раздел1;
	Раздел2 = мДанныеОтчета.Раздел2;
	Раздел3 = мДанныеОтчета.Раздел3;
	
	ПрототипУзла_СумНалПУ = ПолучитьПодчиненныйЭлемент(УзелРодитель, "СумНалПУ");
	
	НомерСтроки = 1;
	
	Пока Раздел1.Свойство("П000010001003_" + СтрокаЧГ0(НомерСтроки)) Цикл
		
		Постфикс = "_" + СтрокаЧГ0(НомерСтроки);
		НомерСтроки = НомерСтроки + 1;
		
		ОКТМО             = СокрЛП(Раздел1["П000010001003" + Постфикс]);
		КБК               = СокрЛП(Раздел1["П000010002003" + Постфикс]);
		СуммаНалогаУпл    = Раздел1["П000010003003" + Постфикс];
		
		Если НЕ ЗначениеЗаполнено(КБК) ИЛИ НЕ ЗначениеЗаполнено(ОКТМО) Тогда
			Продолжить;
		КонецЕсли;
		
		Узел_СумНалПУ = НовыйУзелИзПрототипа(ПрототипУзла_СумНалПУ);
		ЗадатьЗначениеЭлемента(Узел_СумНалПУ, "ОКТМО", ОКТМО);
		ЗадатьЗначениеЭлемента(Узел_СумНалПУ, "КБК",   КБК);
		ЗадатьЗначениеЭлемента(Узел_СумНалПУ, "НалПУ", СуммаНалогаУпл);
		
		// Выгрузка данных раздела 2.
		Узел_РасОбДеятРФ = ПолучитьПодчиненныйЭлемент(Узел_СумНалПУ, "РасОбДеятРФ");
		УдалятьУзел_РасОбДеятРФ = Истина;
		
		ПрототипУзла_РасОб = ПолучитьПодчиненныйЭлемент(Узел_РасОбДеятРФ, "РасОб");
		
		Для Каждого ЛистРаздела2 Из Раздел2 Цикл
			
			ДанныеРаздела2 = ЛистРаздела2.Данные[0].Значение;
			
			Если ОКТМО <> СокрЛП(ДанныеРаздела2.П000020001001) Тогда
				Продолжить;
			КонецЕсли;
			
			Если КБК <> КБКПоКодуВидаИмущества(СокрЛП(ДанныеРаздела2.П000020000101)) Тогда
				Продолжить;
			КонецЕсли;
			
			УдалятьУзел_РасОбДеятРФ = Ложь;
			
			Узел_РасОб = НовыйУзелИзПрототипа(ПрототипУзла_РасОб);
			
			ЗаполнитьДаннымиУзел(ДанныеРаздела2, Узел_РасОб);
			
		КонецЦикла;
		
		РегламентированнаяОтчетность.УдалитьУзел(ПрототипУзла_РасОб);
		
		Если УдалятьУзел_РасОбДеятРФ Тогда
			РегламентированнаяОтчетность.УдалитьУзел(Узел_РасОбДеятРФ);
		КонецЕсли;
		
		// Выгрузка данных раздела 3.
		Узел_РасОБНедИО = ПолучитьПодчиненныйЭлемент(Узел_СумНалПУ, "РасОБНедИО");
		УдалятьУзел_РасОБНедИО = Истина;
		
		ПрототипУзла_РасОб = ПолучитьПодчиненныйЭлемент(Узел_РасОБНедИО, "РасОб");
		
		Для Каждого ЛистРаздела3 Из Раздел3 Цикл
			
			ДанныеРаздела3 = ЛистРаздела3.Данные[0].Значение;
			
			Если ОКТМО <> СокрЛП(ДанныеРаздела3.П000030001001) Тогда
				Продолжить;
			КонецЕсли;
			
			Если КБК <> КБКИмуществаИностраннойОрганизации() Тогда
				Продолжить;
			КонецЕсли;
			
			УдалятьУзел_РасОБНедИО = Ложь;
			
			Узел_РасОб = НовыйУзелИзПрототипа(ПрототипУзла_РасОб);
			
			ЗаполнитьДаннымиУзел(ДанныеРаздела3, Узел_РасОб);
			
		КонецЦикла;
		
		РегламентированнаяОтчетность.УдалитьУзел(ПрототипУзла_РасОб);
		
		Если УдалятьУзел_РасОБНедИО Тогда
			РегламентированнаяОтчетность.УдалитьУзел(Узел_РасОБНедИО);
		КонецЕсли;
		
	КонецЦикла;
	
	РегламентированнаяОтчетность.УдалитьУзел(ПрототипУзла_СумНалПУ);
	
КонецПроцедуры

&НаСервере
Процедура ИзвлечьСохраненныеПоказателиОтчета()
	
	мДанныеОтчета = Новый Структура;
	
	СохрСтруктура = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить();
	ПоказателиОтчета = СохрСтруктура.ПоказателиОтчета;
	Для Каждого Раздел Из ПоказателиОтчета Цикл
		мДанныеОтчета.Вставить(СтрЗаменить(Раздел.Ключ, "ПолеТабличногоДокумента", ""), РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(Раздел.Значение));
	КонецЦикла;
	
	ТекущийРаздел = Неопределено;
	Если мСтруктураМногостраничныхРазделов.Свойство(СтруктураРеквизитовФормы.НаимТекущегоРаздела, ТекущийРаздел) Тогда
		АктивнаяСтраница = ЭтаФорма[ТекущийРаздел].НайтиСтроки(Новый Структура("АктивнаяСтраница", Истина));
		Если АктивнаяСтраница.Количество() > 0 Тогда
			АктивнаяСтраница = АктивнаяСтраница[0];
			ИндексАктивнойСтраницы = ЭтаФорма[ТекущийРаздел].Индекс(АктивнаяСтраница);
		КонецЕсли;
	КонецЕсли;
	
	Для Каждого ЭлементСтруктуры Из СохрСтруктура.ДанныеМногостраничныхРазделов Цикл	
		
		НайденноеЗначение = Неопределено;
		
		мСтруктураМногостраничныхРазделов.Свойство(ЭлементСтруктуры.Ключ, НайденноеЗначение);
		
		Если НЕ НайденноеЗначение = Неопределено Тогда
			
			НайденноеЗначение = ЭтаФорма[НайденноеЗначение];
			
			ЗначениеВДанныеФормы(ЭлементСтруктуры.Значение, НайденноеЗначение);
			
			Если НайденноеЗначение[0].Свойство("Данные") Тогда
				
				Для Каждого СтрокаТаблЗнач Из НайденноеЗначение Цикл
					
					Если ТипЗнч(СтрокаТаблЗнач.Данные) = Тип("СписокЗначений") Тогда
						
						СтрокаТаблЗнач.Данные.Очистить();
						СтрокаТаблЗнач.Данные.Добавить(ЭлементСтруктуры.Значение[НайденноеЗначение.Индекс(СтрокаТаблЗнач)].Данные);
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого Раздел Из мСтруктураМногостраничныхРазделов Цикл
		Для Каждого Страница Из ЭтаФорма[Раздел.Значение] Цикл
			Страница.АктивнаяСтраница = Ложь;
		КонецЦикла;
	КонецЦикла;
	
	ТекущийРаздел = Неопределено;
	Если мСтруктураМногостраничныхРазделов.Свойство(СтруктураРеквизитовФормы.НаимТекущегоРаздела, ТекущийРаздел) Тогда
		Если ИндексАктивнойСтраницы <> Неопределено Тогда
			ЭтаФорма[ТекущийРаздел][ИндексАктивнойСтраницы].АктивнаяСтраница = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Для Каждого Раздел Из мСтруктураМногостраничныхРазделов Цикл
		ТаблицаЛистовРаздела = ЭтаФорма[Раздел.Значение];
		Для Каждого Лист Из ТаблицаЛистовРаздела Цикл
			Лист.Данные[0].Значение = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(Лист.Данные[0].Значение);
		КонецЦикла;
		мДанныеОтчета.Вставить(Раздел.Ключ, ЭтаФорма[Раздел.Значение]);
	КонецЦикла;
	
	ДополнитьСохраненныеПоказателиОтчета();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ЗначениеСуммыЗаполнено(ЗначениеСуммы)
	
	Возврат Окр(ЗначениеСуммы) <> 0;
	
КонецФункции

&НаСервере
Функция ВывестиПоказательВXML(Узел, Знач ЗначениеПоказателя)
	
	МинШирина = Узел.МинРазмерность;
	МаксШирина = Узел.МаксРазмерность;
	
	Если Узел.Формат = "T" ИЛИ Узел.Формат = "Т" Тогда // учтем оба варианта: кириллицу и латиницу
		Если ТипЗнч(ЗначениеПоказателя) = Тип("Дата") И НЕ ЗначениеЗаполнено(ЗначениеПоказателя) Тогда
			ЗначениеПоказателя = "";
		Иначе
			ЗначениеПоказателя = СокрЛП(ЗначениеПоказателя);
		КонецЕсли;
		Узел.Значение = ?(МаксШирина < СтрДлина(ЗначениеПоказателя), Лев(СокрЛП(ЗначениеПоказателя), МаксШирина), ЗначениеПоказателя);
	ИначеЕсли Узел.Формат = "N" Тогда
		СтрокаФормата = "ЧРД=.;ЧН=0;ЧГ=;";
		Если Узел.МаксРазмерность <> 0 И Узел.МаксРазмерность <> 99999 Тогда
			СтрокаФормата = СтрокаФормата + "ЧЦ=" + Формат(Узел.МаксРазмерность, "ЧГ=") + ";";
		КонецЕсли;
		Если Узел.МинРазмерность <> 99999 Тогда
			СтрокаФормата = СтрокаФормата + "ЧДЦ=" + Формат(Узел.МинРазмерность, "ЧГ=") + ";";
		КонецЕсли;
		Узел.Значение = СокрЛП(Формат(ЗначениеПоказателя, СтрокаФормата));
	ИначеЕсли Узел.Формат = "gYear" Тогда
		Если ТипЗнч(ЗначениеПоказателя) = Тип("Дата") Тогда
			Узел.Значение = СокрЛП(Формат(ЗначениеПоказателя, "ДФ=гггг"));
		Иначе
			Узел.Значение = Прав(СокрЛП(ЗначениеПоказателя), 4);
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция УзелПуст(Узел)
	
	Если ЗначениеЗаполнено(Узел.ЗначениеПоУмолчанию) И Лев(Узел.ЗначениеПоУмолчанию, 1) <> "&" Тогда
		Результат = Истина;
		
	ИначеЕсли Узел.Формат = "N" Тогда
		Результат = НЕ ЗначениеЗаполнено(Узел.Значение)
		ИЛИ НЕ ЗначениеЗаполнено(Число(Узел.Значение));
		
	Иначе
		Результат = НЕ ЗначениеЗаполнено(Узел.Значение);
		
	КонецЕсли;
	
	Для Каждого Стр из Узел.Строки Цикл
		Если НЕ УзелПуст(Стр) Тогда
			Результат = Ложь;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ПолучитьПодчиненныйЭлемент(Узел, КодЭлемента)
	
	Для Каждого Стр Из Узел.Строки Цикл
		Если Стр.Код = КодЭлемента Тогда
			Возврат Стр;
		КонецЕсли;
	КонецЦикла;
	
КонецФункции

&НаСервере
Функция СкопироватьУзел(Родитель, Узел)
	
	НовыйУзел = Родитель.Строки.Добавить();
	ЗаполнитьЗначенияСвойств(НовыйУзел, Узел, , "Родитель, Строки");
	Для Каждого Стр из Узел.Строки Цикл
		СкопироватьУзел(НовыйУзел, Стр);
	КонецЦикла;
	Возврат НовыйУзел;
	
КонецФункции

&НаСервере
Процедура ЗадатьЗначениеЭлемента(Узел, КодЭлемента, Значение)
	
	ВывестиПоказательВXML(ПолучитьПодчиненныйЭлемент(Узел, КодЭлемента), Значение);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьВыгрузкуДанными(ДеревоВыгрузки, ПараметрыВыгрузки)
	
	ОбработатьУсловныеЭлементы(ПараметрыВыгрузки, ДеревоВыгрузки);
	
	ЗаполнитьДаннымиУзел(ПараметрыВыгрузки, ДеревоВыгрузки);
	
	ОтсечьНезаполненныеНеобязательныеУзлы(ДеревоВыгрузки);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузку(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьВыгрузкуЗавершение", ЭтотОбъект);
	
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузкуЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПроверитьВыгрузкуОтчета();
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузкуОтчета()
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьВыгрузкуОтчетаЗавершение", ЭтотОбъект);
	
	Если Модифицированность Тогда
		СохранитьНаКлиенте(,ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура ПроверитьВыгрузкуОтчетаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ФормаВыгрузкиРеглОтчета = ПолучитьФорму("Документ.ВыгрузкаРегламентированныхОтчетов.Форма.ФормаДокумента", , ЭтаФорма);
	
	СпДокОсн = Новый СписокЗначений;
	СпДокОсн.Добавить(СтруктураРеквизитовФормы.мСохраненныйДок);
	
	ФормаВыгрузкиРеглОтчета.Проверить(СпДокОсн);
	
КонецПроцедуры

&НаСервере
Функция ПроверитьПоказатели() Экспорт
	
	ИзвлечьСохраненныеПоказателиОтчета();
	
	ПараметрыВыгрузки = ПараметрыВыгрузкиОтчета();
	Если НЕ ВыгрузкаВозможна(ПараметрыВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ДеревоВыгрузки = ИзвлечьСтруктуруXML();
	
	ЗаполнитьВыгрузкуДанными(ДеревоВыгрузки, ПараметрыВыгрузки);
	
	Если НЕ ДанныеВыгрузкиКорректны(ДеревоВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция СтрокаЧГ0(ИсходноеЧисло)
	
	Возврат Формат(ИсходноеЧисло, "ЧН=; ЧГ=0");
	
КонецФункции

&НаКлиенте
Процедура АктивизироватьЯчейку(Ячейка) Экспорт
	
	РегламентированнаяОтчетностьКлиент.АктивизироватьЯчейку(ЭтаФорма, Ячейка);
	
КонецПроцедуры

&НаСервере
Процедура ОчисткаРегламентированногоОтчетаНаСервере(ИмяСтраницы, ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста, РежимОчистки, Многостраничность, КолВоСтраницВРазделе) Экспорт
	
	УдалятьсяВсеДопЭкземпляры = Ложь;
	
	Если СтрНайти(РежимОчистки, "ОчиститьТекущийРаздел") > 0 Тогда
		
		Если (Многостраничность) И (КолВоСтраницВРазделе > 1) Тогда
			
			ОчиститьПоказателиОтчетаЗаполняемыеИзИБНаСервере(ИмяСтраницы);
			
			РегламентированнаяОтчетность.ПолучитьСведенияОПоказателяхОтчета(ЭтаФорма);
			
			УдалятьсяВсеДопЭкземпляры = Истина;
			
		Иначе
			
			ОчиститьТабличноеПолеНаСервере(ИмяСтраницы);
			
		КонецЕсли;
		
		СформироватьДеревоРазделовОтчетаНаСервере();
		
		СтруктураРеквизитовФормы.НеПоказыватьСтраницуМногостраничногоРазделаНаСервере = Ложь;
		
	ИначеЕсли СтрНайти(РежимОчистки, "ОчиститьТекущийЭкземплярМногостраничногоРаздела") > 0 Тогда
		
		ОчиститьТабличноеПолеНаСервере(ИмяСтраницы);
		
	КонецЕсли;
	
	Если ИмяСтраницы = "Титульный" Тогда
		Если Элементы.Найти("ДатаПодписи") = Неопределено Тогда
			Область = ТабличныйДокумент.Области.Найти("ДатаПодписи");
			Если НЕ Область = Неопределено Тогда
				Если ТипЗнч(Область.Значение) = Тип("Строка") Тогда
					ДатаПодписи = Лев(СтрЗаменить(Область.Значение, ".", ""), 8);
				ИначеЕсли ТипЗнч(Область.Значение) = Тип("Дата") Тогда
					Если ЗначениеЗаполнено(Область.Значение) Тогда
						ДатаПодписи = Лев(СтрЗаменить(Формат(Область.Значение, "ДФ = ""дд.ММ.гггг 'г.'"""), ".", ""), 8);
					Иначе
						ДатаПодписи = "        ";
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиентСервер.ПослеОчисткиРегламентированногоОтчета(ЭтаФорма, ИмяСтраницы, ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста);
	
КонецПроцедуры

&НаКлиенте
Процедура ОчисткаРегламентированногоОтчетаНаКлиенте(ИмяСтраницы, ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста, РежимОчистки, Многостраничность, КолВоСтраницВРазделе) Экспорт
	
	УдалятьсяВсеДопЭкземпляры = Ложь;
	
	Если СтрНайти(РежимОчистки, "ОчиститьТекущийРаздел") > 0 Тогда
		
		Если (Многостраничность) И (КолВоСтраницВРазделе > 1) Тогда
			
			РегламентированнаяОтчетностьКлиентСервер.ОчиститьПоказателиОтчетаЗаполняемыеИзИБ(ЭтаФорма, ИмяСтраницы);
			
			УдалятьсяВсеДопЭкземпляры = Истина;
			
		Иначе
			
			ОчиститьТабличноеПолеНаКлиенте("ПолеТабличногоДокумента" + ИмяСтраницы);
			
		КонецЕсли;
		
		СформироватьДеревоРазделовОтчетаНаКлиенте();
		
	ИначеЕсли СтрНайти(РежимОчистки, "ОчиститьТекущийЭкземплярМногостраничногоРаздела") > 0 Тогда
		
		ОчиститьТабличноеПолеНаКлиенте("ПолеТабличногоДокумента" + ИмяСтраницы);
		
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиентСервер.ПослеОчисткиРегламентированногоОтчета(ЭтаФорма, ИмяСтраницы, ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста);
	
КонецПроцедуры

&НаКлиенте
Процедура ТабличныйДокументВыбор(Элемент, Область, СтандартнаяОбработка)
	ОбработкаВыбораВПолеТабличногоДокумента(Элемент, Область, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ТабличныйДокументПриИзмененииСодержимогоОбласти(Элемент, Область, СтандартнаяОбработка)
	ОбработкаИзмененияСодержимогоВПолеТабличногоДокумента(Область);
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСтроку(Команда)
	
	ВставитьДополнительнуюСтроку(Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтроку(Команда)
	
	ТекТабличноеПоле = ЭтаФорма["ТабличныйДокумент"];
	
	ТекущаяОбласть = ТекТабличноеПоле.ТекущаяОбласть;
	ИмяГруппы      = РазделТекущейОбласти(ЭтаФорма, ТекущаяОбласть);
	
	Если ИмяГруппы = Неопределено Тогда
		
		Сообщение = Новый СообщениеПользователю;
		
		Сообщение.Текст = НСтр("ru='Не выбрана удаляемая строка многострочного раздела.'");
		
		Сообщение.Сообщить();
		
		Возврат;
		
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("УдалитьСтрокуЗавершение", ЭтотОбъект);
	ТекстВопроса = НСтр("ru='Удалить выбранную строку?'");
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтрокуЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	УдалитьДополнительнуюСтроку(, , Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
	РегламентированнаяОтчетностьКлиентСервер.ОтрисоватьЗначкиУдаленияСтрок(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура УдалитьДополнительнуюСтроку(СпециальноеДобавление = Ложь, ИмяКолонкиНомера = Неопределено, ТекущаяСтраница) Экспорт
	
	Перем ИсходноеКоличествоСтрокГруппы;
	Перем СтруктураГруппы;
	
	ИмяГруппы = ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ТекущаяСтраница);
	
	мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);
	
	мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);
	
	ТекТабличноеПолеИмя = "ТабличныйДокумент";
	
	ТекТабличноеПоле = ЭтаФорма[ТекТабличноеПолеИмя];
	ТекущаяОбласть = Элементы[ТекТабличноеПолеИмя].ТекущаяОбласть;
	ИмяЯчейки      = ТекущаяОбласть.Имя;
	
	ИмяГруппы = РазделТекущейОбласти(ЭтаФорма, ТекущаяОбласть);
	РегламентированнаяОтчетностьКлиентСервер.ОбновитьСтруктуруМногострочногоРаздела(ЭтаФорма, ИмяГруппы);
	
	НомУдаляемойСтроки = Число( Сред( ИмяЯчейки, СтрНайти( ИмяЯчейки, "_") + 1));
	НомерСтрокиТаблицы = НомУдаляемойСтроки - 1;
	СтруктураГруппы = ЭтаФорма[СтруктураГруппы];
	Если СтруктураГруппы.Количество() > ИсходноеКоличествоСтрокГруппы Тогда
		ИмяПервойЯчейкиУдаляемойСтроки = ИмяГруппы + "1003_" + НомУдаляемойСтроки;
		ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяПервойЯчейкиУдаляемойСтроки];
		
		НастройкиМнгЧ = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСвойствоРаздела(ЭтаФорма, ТекущаяСтраница, "МногострочностьВРазделе").НайтиСтроки(Новый Структура("ИдГруппы", ИмяГруппы))[0];
		ВысотаСтроки = НастройкиМнгЧ.ВысотаСтроки;
		
		НомерВерхЯчейкиОбласти = ОбластьЯчейки.Верх;
		НомерНижнЯчейкиОбласти = ОбластьЯчейки.Верх + ВысотаСтроки - 1;
		
		РегламентированнаяОтчетностьВызовСервера.СпециальногоУдаленияСтроки(ТекТабличноеПоле, ТекТабличноеПолеИмя, ИмяГруппы, НомерВерхЯчейкиОбласти, НомерНижнЯчейкиОбласти);
		
		ЭтаФорма[ТекТабличноеПолеИмя] = ТекТабличноеПоле;
		
		КолвоСдвигаемыхСтрок = СтруктураГруппы.Количество() - НомУдаляемойСтроки;
		
		Если КолвоСдвигаемыхСтрок > 0 Тогда
			
			Для НСтр = НомУдаляемойСтроки + 1 По СтруктураГруппы.Количество() Цикл
				
				ТекСтрока = СтруктураГруппы[НСтр-1];
				
				Для НомерГрафы = 1 По мСтруктураКолвоКолонокРазделов[ИмяГруппы] Цикл
					
					КолонкаИмя = ИмяГруппы + Формат((НомерГрафы) * 10, "ЧЦ=2; ЧВН=") + "03";
					
					Если СтруктураГруппы[0].Свойство(КолонкаИмя) Тогда
						
						ИмяСдвинутойЯчейки = КолонкаИмя + "_" + НСтр;
						НовоеИмяСдвинутойЯчейки = КолонкаИмя + "_" + (НСтр - 1);
						
						ОбластьСдвинутойЯчейки     = ТекТабличноеПоле.Области[ИмяСдвинутойЯчейки];
						ОбластьСдвинутойЯчейки.Имя = НовоеИмяСдвинутойЯчейки;
						
						Если НомерГрафы = 1 Тогда
							ОбластьЯчейкиУдалитьСтроку = ТекТабличноеПоле.Область(ОбластьСдвинутойЯчейки.Верх, 1, ОбластьСдвинутойЯчейки.Верх, 1);
							ОбластьЯчейкиУдалитьСтроку.Имя = "УдалитьСтроку" + НовоеИмяСдвинутойЯчейки;
						КонецЕсли;
						
						Если ОбластьСдвинутойЯчейки.СодержитЗначение <> Истина Тогда
							
							СтарыйНомер = Число(ТекСтрока[КолонкаИмя]);
							НовыйПорядковыйНомер = Строка(Макс(СтарыйНомер - 1, 0));
							ОбластьСдвинутойЯчейки.Текст = НовыйПорядковыйНомер + ".";
							
							ТекСтрока[КолонкаИмя] = НовыйПорядковыйНомер;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
				
			КонецЦикла;
		КонецЕсли;
		
		СтруктураГруппы.Удалить(НомерСтрокиТаблицы);
		
	Иначе
		СтруктураГруппы.Удалить(НомерСтрокиТаблицы);
		
		ДобавляемаяСтрока = СтруктураГруппы.Добавить();
		
		Для Каждого СтрокаТаблицы Из СтруктураГруппы Цикл
			
			НомерСтрокиВТаблице = СтруктураГруппы.Индекс(СтрокаТаблицы);
			НомерСтрокиВФормеТаблицы = Формат(НомерСтрокиВТаблице + 1, "ЧГ=0");
			
			Для НомерГрафы = 1 По мСтруктураКолвоКолонокРазделов[ИмяГруппы] Цикл
				
				КолонкаТаблицыИмя = ИмяГруппы + Формат((НомерГрафы) * 10, "ЧЦ=2; ЧВН=") + "03";
				
				Если СтруктураГруппы[0].Свойство(КолонкаТаблицыИмя) Тогда
					
					ИмяЯчейки                = КолонкаТаблицыИмя + "_" + НомерСтрокиВФормеТаблицы;
					ОбластьЯчейкиТаблицы     = ТекТабличноеПоле.Области[ИмяЯчейки];
					
					Если ОбластьЯчейкиТаблицы.СодержитЗначение <> Истина Тогда
						
						ПервыйНомерВГруппе = 1;
						
						НовыйПорядковыйНомер = Строка(ПервыйНомерВГруппе + НомерСтрокиВТаблице);
						
						СтрокаТаблицы[КолонкаТаблицыИмя] = НовыйПорядковыйНомер;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		ВывестиРазделВТабличныйДокументНаСервере(ИмяГруппы, СтруктураГруппы);
		
	КонецЕсли;
	
	Если СтруктураГруппы.Количество() = 1 Тогда
		Обл = ТекТабличноеПоле.Области["УдалитьСтроку" + ИмяГруппы + "1003_1"];
		Обл.Гиперссылка = Ложь;
		Обл.Текст = "";
	КонецЕсли;
	НомТекущейСтроки  = Мин(НомУдаляемойСтроки, СтруктураГруппы.Количество());
	
	ИмяТекущейОбласти = ИмяГруппы + "1003_" + НомТекущейСтроки;
	
	Элементы[ТекТабличноеПолеИмя].ТекущаяОбласть = ТекТабличноеПоле.Области[ИмяТекущейОбласти];
	
	ТекущийЭлемент = Элементы[ТекТабличноеПолеИмя];
	
	Модифицированность = Истина;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ СТЫКОВКИ С СЕРВИСОМ СДАЧИ ОТЧЕТНОСТИ ЧЕРЕЗ ПРЕДСТАВИТЕЛЯ

&НаКлиенте
Процедура ОтправитьЧерезПредставителя(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОтправитьЧерезПредставителяЗавершение", ЭтотОбъект);
	
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьЧерезПредставителяЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ПриНажатииНаКнопкуОтправкиЧерезПредставителяВРегламентированномОтчете(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьАвто(Команда)
	
	Отказ = Ложь;
	
	РегламентированнаяОтчетностьКлиентПереопределяемый.ПроверитьВозможностьАвтоЗаполненияРеглОтчета(ИмяФормы, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("Команда", Команда);
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьАвтоЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередЗаполнениемРегламентированногоОтчета(
	ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаСервере
Функция ЗаполнитьАвтоНаСервере()
	
	Модифицированность = Истина;
	
	СохранитьДанныеРаздела(СтруктураРеквизитовФормы.НаимТекущегоРаздела, Ложь);
	
	ЗаполнитьПустыеСтруктурыДанных();
	
	СтруктураРеквизитовФормы.АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
	СтруктураРеквизитовФормы.АдресВременногоХранилищаРасшифровки = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
	
	ПараметрыОтчета = Новый Структура();
	ПараметрыОтчета.Вставить("Организация",                  СтруктураРеквизитовФормы.Организация);
	ПараметрыОтчета.Вставить("мДатаНачалаПериодаОтчета",     СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
	ПараметрыОтчета.Вставить("мДатаКонцаПериодаОтчета",      СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	ПараметрыОтчета.Вставить("КодНалоговогоОргана",          СтруктураДанныхТитульный.НалоговыйОрган);
	ПараметрыОтчета.Вставить("КПП",                          СтруктураДанныхТитульный.КПП1);
	ПараметрыОтчета.Вставить("ДатаПодписи",                  ДатаПодписи);
	ПараметрыОтчета.Вставить("УникальныйИдентификаторФормы", ЭтаФорма.УникальныйИдентификатор);
	ПараметрыОтчета.Вставить("АдресВоВременномХранилище",    СтруктураРеквизитовФормы.АдресВоВременномХранилище);
	ПараметрыОтчета.Вставить("АдресВременногоХранилищаРасшифровки", СтруктураРеквизитовФормы.АдресВременногоХранилищаРасшифровки);
	
	Контейнер = Новый Структура();
	Контейнер.Вставить("Раздел1", СтруктураДанныхРаздел1);
	Контейнер.Вставить("Раздел1_ДанныеДопСтрок", ДанныеФормыВЗначение(П00001000, Тип("ТаблицаЗначений")));
	Контейнер.Вставить("Раздел2", СведенияМногостраничногоРазделаВТаблице("ТаблицаСтраницыРазделаРаздел2"));
	Контейнер.Вставить("Раздел3", СведенияМногостраничногоРазделаВТаблице("ТаблицаСтраницыРазделаРаздел3"));
	
	ЗаданиеВыполнено = Ложь;
	
	НаименованиеЗадания = НСтр("ru = 'Автоматическое заполнение по данным информационной базы'");
	
	ПараметрыЗаполнения = Новый Массив;
	ПараметрыЗаполнения.Добавить(ИмяОтчета(ЭтаФорма.ИмяФормы));
	ПараметрыЗаполнения.Добавить(ИмяФормыОтчета(ЭтаФорма.ИмяФормы));
	ПараметрыЗаполнения.Добавить(ПараметрыОтчета);
	ПараметрыЗаполнения.Добавить(Контейнер);
	
	Если ПолучитьСкоростьКлиентскогоСоединения() = СкоростьКлиентскогоСоединения.Низкая Тогда
		ВремяОжидания = 4;
	Иначе
		ВремяОжидания = 2;
	КонецЕсли;
	
	Задание = ФоновыеЗадания.Выполнить("РегламентированнаяОтчетностьПереопределяемый.ЗаполнитьОтчет",
	ПараметрыЗаполнения, , НаименованиеЗадания);
	
	Попытка
		Задание.ОжидатьЗавершения(ВремяОжидания);
	Исключение
		// Специальная обработка не требуется. Предположительно, исключение вызвано истечением времени ожидания.
	КонецПопытки;
	
	СтруктураРеквизитовФормы.ИдентификаторЗадания = Задание.УникальныйИдентификатор;
	
	// Если операция уже завершилась, то сразу обрабатываем результат.
	Если ДлительныеОперации.ЗаданиеВыполнено(Задание.УникальныйИдентификатор) Тогда
		
		ЗаданиеВыполнено = Истина;
		
		ЗагрузитьПодготовленныеДанные();
		
	КонецЕсли;
	
	Возврат ЗаданиеВыполнено;
	
КонецФункции

&НаСервере
Функция ПроверитьВыполнениеЗадания()
	
	Если ДлительныеОперации.ЗаданиеВыполнено(СтруктураРеквизитовФормы.ИдентификаторЗадания) Тогда 
		ЗагрузитьПодготовленныеДанные();
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеЗадания()
	
	Попытка
		Если ПроверитьВыполнениеЗадания() Тогда
			ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
			Если Элементы.Расшифровать.Видимость Тогда
				Элементы.Расшифровать.Доступность = Истина;
				Элементы.ТабличныйДокументКонтекстноеМенюРасшифровать.Доступность = Истина;
			КонецЕсли;
			Возврат;
		КонецЕсли;
	Исключение
		ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
		ВызватьИсключение;
	КонецПопытки;
	
	ПараметрыОбработчикаОжидания.ТекущийИнтервал = ПараметрыОбработчикаОжидания.ТекущийИнтервал * ПараметрыОбработчикаОжидания.КоэффициентУвеличенияИнтервала;
	
	Если ПараметрыОбработчикаОжидания.ТекущийИнтервал > ПараметрыОбработчикаОжидания.МаксимальныйИнтервал Тогда
		ПараметрыОбработчикаОжидания.ТекущийИнтервал = ПараметрыОбработчикаОжидания.МаксимальныйИнтервал;
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", ПараметрыОбработчикаОжидания.ТекущийИнтервал, Истина);
	
КонецПроцедуры

&НаСервере
Функция СведенияМногостраничногоРазделаВТаблице(ИмяСтруктурыДанных)
	
	ОписаниеТиповНеопределено = Новый ОписаниеТипов("Неопределено");
	
	ТаблицаЗначенийСДанными = ДанныеФормыВЗначение(ЭтаФорма[ИмяСтруктурыДанных], Тип("ТаблицаЗначений"));
	
	Если ТаблицаЗначенийСДанными <> Неопределено Тогда
		
		Если ТаблицаЗначенийСДанными.Колонки.Найти("Данные") <> Неопределено Тогда
			ТаблицаЗначенийСДанными.Колонки.Удалить("Данные");
			ТаблицаЗначенийСДанными.Колонки.Добавить("Данные", ОписаниеТиповНеопределено);
			
			Ном = 0;
			Для Каждого СтрокаТаблицыЗначений Из ТаблицаЗначенийСДанными Цикл
				СтрокаТаблицыЗначений.Данные = ЭтаФорма[ИмяСтруктурыДанных][Ном].Данные[0].Значение;
				Ном = Ном + 1;
			КонецЦикла;
		КонецЕсли;
		
		Если ТаблицаЗначенийСДанными.Колонки.Найти("ДанныеДопСтрок") <> Неопределено Тогда
			ТаблицаЗначенийСДанными.Колонки.Удалить("ДанныеДопСтрок");
			ТаблицаЗначенийСДанными.Колонки.Добавить("ДанныеДопСтрок", ОписаниеТиповНеопределено);
			
			Ном = 0;
			Для Каждого СтрокаТаблицыЗначений Из ТаблицаЗначенийСДанными Цикл
				
				Если ЭтаФорма[ИмяСтруктурыДанных][Ном].ДанныеДопСтрок.Количество() > 0
				   И ЭтаФорма[ИмяСтруктурыДанных][Ном].ДанныеДопСтрок[0].Представление = "ДанныеФормыКоллекцияТаблицаДопСтрокРаздела" Тогда
					СтрокаТаблицыЗначений.ДанныеДопСтрок = ДанныеФормыВЗначение(ЭтаФорма[ИмяСтруктурыДанных][Ном].ДанныеДопСтрок[0].Значение, Тип("ТаблицаЗначений"));
					
					Ном = Ном + 1;
					Продолжить;
				КонецЕсли;
				
				СтруктураДанныхДопСтрок = Новый Структура;
				
				Для Каждого ЭлСтруктуры Из ЭтаФорма[ИмяСтруктурыДанных][Ном].ДанныеДопСтрок Цикл
					СтруктураДанныхДопСтрок.Вставить(ДанныеФормыВЗначение(ЭлСтруктуры.Значение, Тип("ТаблицаЗначений")));
				КонецЦикла;
				
				СтрокаТаблицыЗначений.ДанныеДопСтрок = СтруктураДанныхДопСтрок;
				
				Ном = Ном + 1;
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ТаблицаЗначенийСДанными;
	
КонецФункции

&НаСервере
Процедура ВосстановитьМногостраничныйРазделИзТаблицы(ИмяРаздела, ТаблицаСДанными)
	
	ИмяРеквизитаФормы = Неопределено;
	Если НЕ мСтруктураМногостраничныхРазделов.Свойство(ИмяРаздела, ИмяРеквизитаФормы) Тогда
		Возврат;
	КонецЕсли;
	
	РеквизитФормы = ЭтаФорма[ИмяРеквизитаФормы];
	ЗначениеВДанныеФормы(ТаблицаСДанными, РеквизитФормы);
	
	Если РеквизитФормы[0].Свойство("Данные") Тогда
		Для Каждого СтрокаТаблицы Из РеквизитФормы Цикл
			Если ТипЗнч(СтрокаТаблицы.Данные) = Тип("СписокЗначений") Тогда
				СтрокаТаблицы.Данные.Очистить();
				СтрокаТаблицы.Данные.Добавить(ТаблицаСДанными[РеквизитФормы.Индекс(СтрокаТаблицы)].Данные);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если РеквизитФормы[0].Свойство("ДанныеДопСтрок") Тогда
		Ном = 0;
		Для Каждого СтрокаТаблицы Из ТаблицаСДанными Цикл
			Если ТипЗнч(СтрокаТаблицы.ДанныеДопСтрок) = Тип("Структура") Тогда
				Для Каждого ЭлСтруктуры Из СтрокаТаблицы.ДанныеДопСтрок Цикл
					ТаблЗнач = ЭлСтруктуры.Значение;
					СтрокаТаблЗначДанныеДопСтрок = ЭтаФорма["Хранилище" + ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ИмяРаздела)].Добавить().Таблица;
					ЗначениеВДанныеФормы(ТаблЗнач, СтрокаТаблЗначДанныеДопСтрок);
					РеквизитФормы[Ном].ДанныеДопСтрок.Добавить(СтрокаТаблЗначДанныеДопСтрок, "ДанныеФормыКоллекцияТаблицаДопСтрокРаздела");
				КонецЦикла;
			ИначеЕсли ТипЗнч(СтрокаТаблицы.ДанныеДопСтрок) = Тип("ТаблицаЗначений") Тогда
				СтрокаТаблЗначДанныеДопСтрок = ЭтаФорма["Хранилище" + ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ИмяРаздела)].Добавить().Таблица;
				ЗначениеВДанныеФормы(СтрокаТаблицы.ДанныеДопСтрок, СтрокаТаблЗначДанныеДопСтрок);
				РеквизитФормы[Ном].ДанныеДопСтрок.Добавить(СтрокаТаблЗначДанныеДопСтрок, "ДанныеФормыКоллекцияТаблицаДопСтрокРаздела");
			КонецЕсли;
			Ном = Ном + 1;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьПодготовленныеДанные()
	
	Контейнер = ПолучитьИзВременногоХранилища(СтруктураРеквизитовФормы.АдресВоВременномХранилище);
	
	Если ТипЗнч(Контейнер) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураДанныхРаздел1 = Контейнер["Раздел1"];
	ВосстановитьМногостраничныйРазделИзТаблицы("Раздел2", Контейнер["Раздел2"]);
	ВосстановитьМногостраничныйРазделИзТаблицы("Раздел3", Контейнер["Раздел3"]);
	ЗначениеВДанныеФормы(Контейнер["Раздел1_ДанныеДопСтрок"], П00001000);
	
	Для Каждого СтраницаРаздела2 Из ТаблицаСтраницыРазделаРаздел2 Цикл
		
		Если СтраницаРаздела2.Данные.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ДанныеСтраницыРаздела2 = СтраницаРаздела2.Данные[0].Значение;
		
		Если ДанныеСтраницыРаздела2.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если ДанныеСтраницыРаздела2.Свойство("П000020013003_КодЛьготы")
		   И ДанныеСтраницыРаздела2.Свойство("П000020013003_Основание")
		   И ДанныеСтраницыРаздела2.П000020013003_КодЛьготы = "2012000" Тогда
			ДанныеСтраницыРаздела2.П000020013003_Основание = "000000000000";
		КонецЕсли;
		
		Если ДанныеСтраницыРаздела2.Свойство("П000020016003_КодЛьготы")
		   И ДанныеСтраницыРаздела2.Свойство("П000020016003_Основание")
		   И ДанныеСтраницыРаздела2.П000020016003_КодЛьготы = "2012400" Тогда
			ДанныеСтраницыРаздела2.П000020016003_Основание = "000000000000";
		КонецЕсли;
		
		Если ДанныеСтраницыРаздела2.Свойство("П000020019003_КодЛьготы")
		   И ДанныеСтраницыРаздела2.Свойство("П000020019003_Основание")
		   И ДанныеСтраницыРаздела2.П000020019003_КодЛьготы = "2012500" Тогда
			ДанныеСтраницыРаздела2.П000020019003_Основание = "000000000000";
		КонецЕсли;
		
	КонецЦикла;
	
	ВывестиМакетВТаблДокНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела, 1);
	
	РасчетНаСервере();
	
	СформироватьРаздел1();
	
	РасчетНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьАвтоЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Команда = ДополнительныеПараметры.Команда;
	
	ЗаданиеВыполнено = ЗаполнитьАвтоНаСервере();
	
	Если ЗаданиеВыполнено Тогда
		
		РегламентированнаяОтчетностьКлиент.ОбновитьДеревоРазделовВФормеОтчета(ЭтаФорма);
		
		Если НЕ Элементы.РазделыОтчета.ТекущиеДанные = Неопределено И НЕ Элементы.РазделыОтчета.ТекущиеДанные.ПолучитьРодителя() = Неопределено Тогда	
			Элементы.РазделыОтчета.ТекущаяСтрока = Элементы.РазделыОтчета.ТекущиеДанные.ПолучитьРодителя().ПолучитьЭлементы()[0].ПолучитьИдентификатор();
		КонецЕсли;
		
		Если Элементы.Расшифровать.Видимость Тогда
			Элементы.Расшифровать.Доступность = Истина;
			Элементы.ТабличныйДокументКонтекстноеМенюРасшифровать.Доступность = Истина;
		КонецЕсли;
		
		Возврат;
		
	КонецЕсли;
	
	// Операция еще не завершена, выполняется с помощью фонового задания (асинхронно).
	ПараметрыОбработчикаОжидания = Новый Структура;
	ПараметрыОбработчикаОжидания.Вставить("МинимальныйИнтервал", 1);
	ПараметрыОбработчикаОжидания.Вставить("МаксимальныйИнтервал", 15);
	ПараметрыОбработчикаОжидания.Вставить("ТекущийИнтервал", 1);
	ПараметрыОбработчикаОжидания.Вставить("КоэффициентУвеличенияИнтервала", 1.4);
	
	ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
	
	ФормаДлительнойОперации = ОткрытьФорму("ОбщаяФорма.ДлительнаяОперация", Новый Структура("ИдентификаторЗадания", СтруктураРеквизитовФормы.ИдентификаторЗадания), ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура Расшифровать(Команда)
	
	ПараметрыОтчета = Новый Структура();
	ПараметрыОтчета.Вставить("Организация", 		             	СтруктураРеквизитовФормы.Организация);
	ПараметрыОтчета.Вставить("ДатаНачалаПериодаОтчета",             СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
	ПараметрыОтчета.Вставить("ДатаКонцаПериодаОтчета",              СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	ПараметрыОтчета.Вставить("НомерТекущейСтраницы",  				СтруктураРеквизитовФормы.НомерТекущейСтраницы);
	ПараметрыОтчета.Вставить("АдресВременногоХранилищаРасшифровки", СтруктураРеквизитовФормы.АдресВременногоХранилищаРасшифровки);
	
	ИДИменПоказателей = Новый Массив();
	ИДИменПоказателей.Добавить(Элементы.ТабличныйДокумент.ТекущаяОбласть.Имя);
	
	РегламентированнаяОтчетностьКлиент.ОткрытьРасшифровкуОтчета(ИмяОтчета(ЭтаФорма.ИмяФормы), ИмяФормыОтчета(ЭтаФорма.ИмяФормы), ИДИменПоказателей, ПараметрыОтчета)
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВИнтернете(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьВИнтернетеЗавершение", ЭтотОбъект);
	
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВИнтернетеЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ПроверитьВИнтернете(ЭтаФорма);
	
КонецПроцедуры

#Область ПанельОтправкиВКонтролирующиеОрганы

&НаКлиенте
Процедура ОбновитьОтправку(Команда)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОбновитьОтправкуИзПанелиОтправки(ЭтаФорма, "ФНС");
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаПротоколНажатие(Элемент)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьПротоколИзПанелиОтправки(ЭтаФорма, "ФНС");
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьНеотправленноеИзвещение(Команда)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОтправитьНеотправленноеИзвещениеИзПанелиОтправки(ЭтаФорма, "ФНС");
КонецПроцедуры

&НаКлиенте
Процедура ЭтапыОтправкиНажатие(Элемент)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьСостояниеОтправкиИзПанелиОтправки(ЭтаФорма, "ФНС");
КонецПроцедуры

&НаКлиенте
Процедура КритическиеОшибкиОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьКритическиеОшибкиИзПанелиОтправки(ЭтаФорма, "ФНС");
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаНаименованиеЭтапаНажатие(Элемент)
	
	ПараметрыИзменения = Новый Структура;
	ПараметрыИзменения.Вставить("Форма", ЭтаФорма);
	ПараметрыИзменения.Вставить("Организация", СтруктураРеквизитовФормы.Организация);
	ПараметрыИзменения.Вставить("КонтролирующийОрган",
		ПредопределенноеЗначение("Перечисление.ТипыКонтролирующихОрганов.ФНС"));
	
	РегламентированнаяОтчетностьКлиент.ИзменитьСтатусОтправки(ПараметрыИзменения);
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ОтправитьВКонтролирующийОрган(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверкаВозможностиВыгрузкиРегламентированногоОтчетаПередОтправкой", ЭтотОбъект);
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередОтправкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаВозможностиВыгрузкиРегламентированногоОтчетаПередОтправкой(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОтправитьВКонтролирующийОрганЗавершение", ЭтотОбъект);
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьВКонтролирующийОрганЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ПриНажатииНаКнопкуОтправкиВКонтролирующийОрган(ЭтаФорма, "ФНС");
	
КонецПроцедуры

&НаСервере
Функция ОбъектОтчета(ЭтаФормаИмя) Экспорт
	
	Если мОбъектОтчета = Неопределено Тогда 
		мОбъектОтчета = РегламентированнаяОтчетностьВызовСервера.ОбъектОтчета(ЭтаФормаИмя);
	КонецЕсли;
	
	Возврат мОбъектОтчета;
	
КонецФункции

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Форма", ЭтаФорма);
	Оповещение = Новый ОписаниеОповещения("ПослеСохраненияФормыЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	СохранитьНаКлиенте(, Оповещение);
КонецПроцедуры

&НаКлиенте
Процедура ПослеСохраненияФормыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	ДополнительныеПараметры.Форма.Закрыть();
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция РазделТекущейОбласти(Форма, ТекущаяОбласть, ДлИмениОбласти = 13) Экспорт

	Если ТекущаяОбласть = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ИмяТекущейОбласти = СтрЗаменить(ТекущаяОбласть.Имя, "ДобавитьСтрокуЗначок", "ДобавитьСтроку");
	
	Если ИмяТекущейОбласти = "ДобавитьСтроку1" Тогда
		Возврат Форма.СтруктураРеквизитовФормы.ИдМСЧ_Раздел1;
	ИначеЕсли СтрНайти(ИмяТекущейОбласти, "УдалитьСтроку") > 0 Тогда
		ИмяТекущейОбласти = СтрЗаменить(ИмяТекущейОбласти, "УдалитьСтроку", "");
	КонецЕсли;

	ИмяАктивногоРаздела = Лев(ИмяТекущейОбласти, ДлИмениОбласти);
	
	Для Каждого ЭлементСтруктуры Из Форма.мСтруктураМногострочныхРазделов Цикл
		ИмяГруппы = ЭлементСтруктуры.Ключ;
		СтруктураГруппы = Форма[ЭлементСтруктуры.Значение];

		Если СтруктураГруппы[0].Свойство(ИмяАктивногоРаздела) Тогда
			Возврат ИмяГруппы;
		КонецЕсли;
	КонецЦикла;

	Возврат Неопределено;

КонецФункции

&НаСервере
Функция СформироватьСтруктуруПоказателей()
	
	мДанныеОтчета = Новый Структура;
	
	СохрСтруктура = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить();
	ПоказателиОтчета = СохрСтруктура.ПоказателиОтчета;
	Для Каждого Раздел Из ПоказателиОтчета Цикл
		мДанныеОтчета.Вставить(Раздел.Ключ, РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(Раздел.Значение));
	КонецЦикла;
	
	ТекущийРаздел = Неопределено;
	Если мСтруктураМногостраничныхРазделов.Свойство(СтруктураРеквизитовФормы.НаимТекущегоРаздела, ТекущийРаздел) Тогда
		АктивнаяСтраница = ЭтаФорма[ТекущийРаздел].НайтиСтроки(Новый Структура("АктивнаяСтраница", Истина));
		Если АктивнаяСтраница.Количество() > 0 Тогда
			АктивнаяСтраница = АктивнаяСтраница[0];
			ИндексАктивнойСтраницы = ЭтаФорма[ТекущийРаздел].Индекс(АктивнаяСтраница);
		КонецЕсли;
	КонецЕсли;

	Для Каждого ЭлементСтруктуры Из СохрСтруктура.ДанныеМногостраничныхРазделов Цикл	
		
		НайденноеЗначение = Неопределено;
		
		мСтруктураМногостраничныхРазделов.Свойство(ЭлементСтруктуры.Ключ, НайденноеЗначение);
		
		Если НЕ НайденноеЗначение = Неопределено Тогда
			
			НайденноеЗначение = ЭтаФорма[НайденноеЗначение];
			
			ЗначениеВДанныеФормы(ЭлементСтруктуры.Значение, НайденноеЗначение);
			
			Если НайденноеЗначение[0].Свойство("Данные") Тогда
				
				Для Каждого СтрокаТаблЗнач Из НайденноеЗначение Цикл
					
					Если ТипЗнч(СтрокаТаблЗнач.Данные) = Тип("СписокЗначений") Тогда
						
						СтрокаТаблЗнач.Данные.Очистить();
						СтрокаТаблЗнач.Данные.Добавить(ЭлементСтруктуры.Значение[НайденноеЗначение.Индекс(СтрокаТаблЗнач)].Данные);
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого Раздел Из мСтруктураМногостраничныхРазделов Цикл
		Для Каждого Страница Из ЭтаФорма[Раздел.Значение] Цикл
			Страница.АктивнаяСтраница = Ложь;
		КонецЦикла;
	КонецЦикла;

	ТекущийРаздел = Неопределено;
	Если мСтруктураМногостраничныхРазделов.Свойство(СтруктураРеквизитовФормы.НаимТекущегоРаздела, ТекущийРаздел) Тогда
		Если ИндексАктивнойСтраницы <> Неопределено Тогда
			ЭтаФорма[ТекущийРаздел][ИндексАктивнойСтраницы].АктивнаяСтраница = Истина;
		КонецЕсли;
	КонецЕсли;

	Для Каждого Раздел Из мСтруктураМногостраничныхРазделов Цикл
		ТаблицаЛистовРаздела = ЭтаФорма[Раздел.Значение];
		Для Каждого Лист Из ТаблицаЛистовРаздела Цикл
			Лист.Данные[0].Значение = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(Лист.Данные[0].Значение);
		КонецЦикла;
		мДанныеОтчета.Вставить(Раздел.Ключ, ЭтаФорма[Раздел.Значение]);
	КонецЦикла;
	
КонецФункции

#Область МеханизмПроверкиКонтрольныхСоотношений

&НаКлиенте
Процедура Проверить(Команда)
	
	РегламентированнаяОтчетностьКлиент.ПроверитьКонтрольныеСоотношения(ЭтаФорма, ОбработкаКС);
	
КонецПроцедуры

&НаСервере
Функция ПроверитьКонтрольныеСоотношенияВОтчете() Экспорт
	
	СформироватьСтруктуруПоказателей();
	
	СтруктураРеквизитовФормы.ТекстДляЗаголовочнойЧасти = РегламентированнаяОтчетностьКлиентСервер.ПредставлениеДокументаРеглОтч(СтруктураРеквизитовФормы.мСохраненныйДок);
	
	СтруктураРезультата = Новый Структура;
	СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", 0);
	СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", 0);
	СтруктураРезультата.Вставить("СтруктураОшибок", Новый Структура);
	
	Если СписокРасшифровкиПоказателей = Неопределено Тогда
		СписокРасшифровкиПоказателей = РегламентированнаяОтчетность.СоздатьСписокРасшифровкиПоказателей();
	Иначе
		СписокРасшифровкиПоказателей.Очистить();
	КонецЕсли;
	
	Если СписокРасшифровкиформулы = Неопределено Тогда
		СписокРасшифровкиформулы = РегламентированнаяОтчетность.СоздатьСписокРасшифровкиформулы();
	Иначе
		СписокРасшифровкиформулы.Очистить();
	КонецЕсли;
	
	СчетчикФормулДляРасшифровок = 0;
	
	ПроверитьКС_1_1(СтруктураРезультата);
	
	ПроверитьКС_1_2(СтруктураРезультата);
	
	ПроверитьКС_1_3(СтруктураРезультата);
	
	ПроверитьКС_1_4(СтруктураРезультата);
	
	ПроверитьКС_1_5(СтруктураРезультата);
	
	ПроверитьКС_1_6(СтруктураРезультата);
	
	ПроверитьКС_1_7(СтруктураРезультата);
	
	ПроверитьКС_1_8(СтруктураРезультата);
	
	ПроверитьКС_1_9(СтруктураРезультата);
	
	ПроверитьКС_1_10(СтруктураРезультата);
	
	ПроверитьКС_1_14(СтруктураРезультата);
	
	ПроверитьКС_1_15(СтруктураРезультата);
	
	ПроверитьКС_1_16(СтруктураРезультата);
	
	ПроверитьКС_1_17(СтруктураРезультата);
	
	ПроверитьКС_1_18(СтруктураРезультата);
	
	Если СписокРасшифровкиПоказателей.Количество() > 0 Тогда 
		СтруктураРезультата.Вставить("СписокРасшифровкиПоказателей", 
			ПоместитьВоВременноеХранилище(СписокРасшифровкиПоказателей, Новый УникальныйИдентификатор));
	КонецЕсли;
	
	Если СписокРасшифровкиформулы.Количество() > 0 Тогда
		АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(СписокРасшифровкиформулы, Новый УникальныйИдентификатор);
		СтруктураРезультата.Вставить("СписокРасшифровкиформулы", АдресВоВременномХранилище);
	КонецЕсли;
	
	Возврат СтруктураРезультата;
	
КонецФункции

&НаСервере
Процедура ПроверитьКС_1_1(СтруктураРезультата)
	
	ОбщееЧислоОшибок    = СтруктураРезультата.КоличествоНайденныхОшибок;
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок;
	СтруктураОшибок     = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы   = НСтр("ru='Проверка раздела 1 (КС 1.1)'");
	ОписаниеКС     = НСтр("ru='Сумма авансового платежа по налогу, подлежащая уплате в бюджет (строка 030 Раздела 1) должна быть равна (строка 180 Раздела 2 - строка 200 Раздел 2) + (строка 090 раздела 3 - строка 110 Раздела 3) по соответствующим ОКТМО и КБК'");
	
	Нарушение      = НСтр("ru='НК РФ ст.45'");
	ОписаниеОшибки1 = НСтр("ru='Завышена сумма авансового платежа по налогу'");
	ОписаниеОшибки2 = НСтр("ru='Занижена сумма авансового платежа по налогу'");
	
	Р1Стр010 = ПоказательПоСтроке("Р1Стр010");
	Р1Стр020 = ПоказательПоСтроке("Р1Стр020");
	Р1Стр030 = ПоказательПоСтроке("Р1Стр030");
	
	Р2Стр001 = ПоказательПоСтроке("Р2Стр001");
	Р2Стр010 = ПоказательПоСтроке("Р2Стр010");
	Р2Стр180 = ПоказательПоСтроке("Р2Стр180");
	Р2Стр200 = ПоказательПоСтроке("Р2Стр200");
	
	Р3Стр010 = ПоказательПоСтроке("Р3Стр010");
	Р3Стр090 = ПоказательПоСтроке("Р3Стр090");
	Р3Стр110 = ПоказательПоСтроке("Р3Стр110");
	
	Раздел1 = мДанныеОтчета.ПолеТабличногоДокументаРаздел1;
	Раздел2 = мДанныеОтчета.Раздел2;
	Раздел3 = мДанныеОтчета.Раздел3;
	
	НомерСтроки = 1;
	Постфикс = "_" + ЧислоВСтрокуЧГ0(НомерСтроки);
	Пока Раздел1.Свойство("П000010001003" + Постфикс) Цикл
		ВставитьЗначениеМногострочногоПоказателя(Раздел1, Р1Стр010, НомерСтроки);
		ВставитьЗначениеМногострочногоПоказателя(Раздел1, Р1Стр020, НомерСтроки);
		ВставитьЗначениеМногострочногоПоказателя(Раздел1, Р1Стр030, НомерСтроки);
		
		ОКТМО = Р1Стр010.Значение;
		КБК   = Р1Стр020.Значение;
		
		НомерСтроки = НомерСтроки + 1;
		Постфикс = "_" + ЧислоВСтрокуЧГ0(НомерСтроки);
		
		ПроверятьСоотношение = ЗначениеЗаполнено(ОКТМО) И ЗначениеЗаполнено(КБК);
		Если НЕ ПроверятьСоотношение Тогда
			Продолжить;
		КонецЕсли;
		
		СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
		ЗарегистрироватьФормулуДляРасшифровки(ОписаниеКС);
		
		ВнестиПоказательВРасшифровку(Р1Стр010, "Раздел1");
		ВнестиПоказательВРасшифровку(Р1Стр020, "Раздел1");
		ВнестиПоказательВРасшифровку(Р1Стр030, "Раздел1");
		
		КонтрольноеЗначение = 0;
		ЕстьСведенияИсчислений = Ложь;
		Расшифровка = "По ОКТМО """ + ОКТМО + """ и КБК """ + КБК + """ "
		            + Р1Стр030.ЗначениеСтр + " = ";
		
		Для Каждого СтраницаР2 Из Раздел2 Цикл
			ДанныеСтраницыР2 = СтраницаР2.Данные[0].Значение;
			НомерСтраницыР2Стр = ЧислоВСтрокуЧГ0(Раздел2.Индекс(СтраницаР2) + 1);
			
			ВставитьЗначениеПоказателя(ДанныеСтраницыР2, Р2Стр001);
			ВставитьЗначениеПоказателя(ДанныеСтраницыР2, Р2Стр010);
			ВставитьЗначениеПоказателя(ДанныеСтраницыР2, Р2Стр180);
			ВставитьЗначениеПоказателя(ДанныеСтраницыР2, Р2Стр200);
			
			Раздел2ОКТМО = СокрЛП(Р2Стр010.Значение);
			Раздел2КБК   = КБКПоКодуВидаИмущества(СокрЛП(Р2Стр001.Значение));
			Если Раздел2ОКТМО <> ОКТМО ИЛИ Раздел2КБК <> КБК Тогда
				Продолжить;
			КонецЕсли;
			
			ЕстьСведенияИсчислений = Истина;
			
			ВнестиПоказательВРасшифровку(Р2Стр180, "Раздел2", НомерСтраницыР2Стр);
			ВнестиПоказательВРасшифровку(Р2Стр200, "Раздел2", НомерСтраницыР2Стр);
			
			КонтрольноеЗначение = КонтрольноеЗначение + Р2Стр180.Значение - Р2Стр200.Значение;
			
			Расшифровка = Расшифровка + Р2Стр180.ЗначениеСтр + " - " + Р2Стр200.ЗначениеСтр + " + ";
		КонецЦикла;
		
		Для Каждого СтраницаР3 Из Раздел3 Цикл
			ДанныеСтраницыР3 = СтраницаР3.Данные[0].Значение;
			НомерСтраницыР3Стр = ЧислоВСтрокуЧГ0(Раздел3.Индекс(СтраницаР3) + 1);
			
			ВставитьЗначениеПоказателя(ДанныеСтраницыР3, Р3Стр010);
			ВставитьЗначениеПоказателя(ДанныеСтраницыР3, Р3Стр090);
			ВставитьЗначениеПоказателя(ДанныеСтраницыР3, Р3Стр110);
			
			Раздел2ОКТМО = СокрЛП(Р3Стр010.Значение);
			Раздел2КБК   = КБКИмуществаИностраннойОрганизации();
			Если Раздел2ОКТМО <> ОКТМО ИЛИ Раздел2КБК <> КБК Тогда
				Продолжить;
			КонецЕсли;
			
			ЕстьСведенияИсчислений = Истина;
			
			ВнестиПоказательВРасшифровку(Р3Стр090, "Раздел3", НомерСтраницыР3Стр);
			ВнестиПоказательВРасшифровку(Р3Стр110, "Раздел3", НомерСтраницыР3Стр);
			
			КонтрольноеЗначение = КонтрольноеЗначение + Р3Стр090.Значение - Р3Стр110.Значение;
			
			Расшифровка = Расшифровка + Р3Стр090.ЗначениеСтр + " - " + Р3Стр110.ЗначениеСтр + " + ";
		КонецЦикла;
		
		Если ЕстьСведенияИсчислений Тогда
			Расшифровка = Лев(Расшифровка, СтрДлина(Расшифровка) - 3);
			Расшифровка = Расшифровка + " Итог [" + КонтрольноеЗначение + "]";
			
			Если Р1Стр030.Значение > КонтрольноеЗначение Тогда
				ЭтоОшибка = Истина;
				ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
				ОписаниеОшибки = ОписаниеОшибки1;
			ИначеЕсли Р1Стр030.Значение < КонтрольноеЗначение Тогда
				ЭтоОшибка = Истина;
				ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
				ОписаниеОшибки = ОписаниеОшибки2;
			Иначе
				ЭтоОшибка = Ложь;
				ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
				ОписаниеОшибки = "";
			КонецЕсли;
		
		Иначе
			Расшифровка = Расшифровка + "сведения не указаны";
			
			ЭтоОшибка = Истина;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
			ОписаниеОшибки = "Не заполнены листы раздела 2 или раздела 3";
		КонецЕсли;
		
		ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок,
			Расшифровка, ЭтоОшибка, ОписаниеОшибки, Нарушение);
		
	КонецЦикла;
	
	СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
	СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
	СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_1_2(СтруктураРезультата)
	
	ОбщееЧислоОшибок    = СтруктураРезультата.КоличествоНайденныхОшибок;
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок;
	СтруктураОшибок     = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы   = НСтр("ru='Проверка раздела 2 (КС 1.2)'");
	ОписаниеКС     = НСтр("ru='Средняя стоимость имущества за отчетный период (строка 120 Раздела 2) должна быть равна (строка 020 графа 3 Раздела 2 + строка 030 графа 3 Раздела 2 + строка 040 графа 3 Раздела 2 + строка 050 графа 3 Раздела 2) / 4'");
	
	Нарушение      = НСтр("ru='НК РФ ст.376, п. 4'");
	ОписаниеОшибки1 = НСтр("ru='Завышена средняя стоимость имущества за отчетный период (квартал)'");
	ОписаниеОшибки2 = НСтр("ru='Занижена средняя стоимость имущества за отчетный период (квартал)'");
	
	Р2Стр020Гр3 = ПоказательПоСтроке("Р2Стр020Гр3");
	Р2Стр030Гр3 = ПоказательПоСтроке("Р2Стр030Гр3");
	Р2Стр040Гр3 = ПоказательПоСтроке("Р2Стр040Гр3");
	Р2Стр050Гр3 = ПоказательПоСтроке("Р2Стр050Гр3");
	Р2Стр120 = ПоказательПоСтроке("Р2Стр120");
	
	Раздел2 = мДанныеОтчета.Раздел2;
	
	ПроверятьСоотношение = (Месяц(СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка.ДатаОкончания) = 3);
	Если НЕ ПроверятьСоотношение Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Страница Из Раздел2 Цикл
		ДанныеСтраницы = Страница.Данные[0].Значение;
		НомерСтраницыСтр = ЧислоСтрЧГ0(Раздел2.Индекс(Страница) + 1);
		
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Стр020Гр3);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Стр030Гр3);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Стр040Гр3);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Стр050Гр3);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Стр120);
		
		СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
		ЗарегистрироватьФормулуДляРасшифровки(ОписаниеКС);
		
		ВнестиПоказательВРасшифровку(Р2Стр120, "Раздел2", НомерСтраницыСтр);
		ВнестиПоказательВРасшифровку(Р2Стр020Гр3, "Раздел2", НомерСтраницыСтр);
		ВнестиПоказательВРасшифровку(Р2Стр030Гр3, "Раздел2", НомерСтраницыСтр);
		ВнестиПоказательВРасшифровку(Р2Стр040Гр3, "Раздел2", НомерСтраницыСтр);
		ВнестиПоказательВРасшифровку(Р2Стр050Гр3, "Раздел2", НомерСтраницыСтр);
		
		КонтрольноеЗначение = (Р2Стр020Гр3.Значение + Р2Стр030Гр3.Значение + Р2Стр040Гр3.Значение + Р2Стр050Гр3.Значение) / 4;
		КонтрольноеЗначение = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, Окр(КонтрольноеЗначение, 2));
		
		Если Р2Стр120.Значение > КонтрольноеЗначение Тогда
			ЭтоОшибка = Истина;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
			ОписаниеОшибки = ОписаниеОшибки1;
		ИначеЕсли Р2Стр120.Значение < КонтрольноеЗначение Тогда
			ЭтоОшибка = Истина;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
			ОписаниеОшибки = ОписаниеОшибки2;
		Иначе
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
			ОписаниеОшибки = "";
		КонецЕсли;
		
		Расшифровка = Р2Стр120.ЗначениеСтр + " = (" + Р2Стр020Гр3.ЗначениеСтр
		            + " + " + Р2Стр030Гр3.ЗначениеСтр + " + " + Р2Стр040Гр3.ЗначениеСтр
		            + " + " + Р2Стр050Гр3.ЗначениеСтр + ") / 4"
		            + " Итог [" + КонтрольноеЗначение + "]";
		
		ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок,
			Расшифровка, ЭтоОшибка, ОписаниеОшибки, Нарушение);
		
	КонецЦикла;
	
	СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
	СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
	СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_1_3(СтруктураРезультата)
	
	ОбщееЧислоОшибок    = СтруктураРезультата.КоличествоНайденныхОшибок;
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок;
	СтруктураОшибок     = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы   = НСтр("ru='Проверка раздела 2 (КС 1.3)'");
	ОписаниеКС     = НСтр("ru='Средняя стоимость имущества за отчетный период (строка 120 Раздела 2) должна быть равна (строка 020 графа 3 Раздела 2 + строка 030 графа 3 Раздела 2 + строка 040 графа 3 Раздела 2 + строка 050 графа 3 Раздела 2 + строка 060 графа 3 Раздела 2 + строка 070 графы 3 Раздела 2 + строка 080 графы 3 Раздела 2) / 7'");
	
	Нарушение      = НСтр("ru='НК РФ ст.376. п. 4'");
	ОписаниеОшибки1 = НСтр("ru='Завышена средняя стоимость имущества за отчетный период (полугодие)'");
	ОписаниеОшибки2 = НСтр("ru='Занижена средняя стоимость имущества за отчетный период (полугодие)'");
	
	Р2Стр020Гр3 = ПоказательПоСтроке("Р2Стр020Гр3");
	Р2Стр030Гр3 = ПоказательПоСтроке("Р2Стр030Гр3");
	Р2Стр040Гр3 = ПоказательПоСтроке("Р2Стр040Гр3");
	Р2Стр050Гр3 = ПоказательПоСтроке("Р2Стр050Гр3");
	Р2Стр060Гр3 = ПоказательПоСтроке("Р2Стр060Гр3");
	Р2Стр070Гр3 = ПоказательПоСтроке("Р2Стр070Гр3");
	Р2Стр080Гр3 = ПоказательПоСтроке("Р2Стр080Гр3");
	Р2Стр120 = ПоказательПоСтроке("Р2Стр120");
	
	Раздел2 = мДанныеОтчета.Раздел2;
	
	ПроверятьСоотношение = (Месяц(СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка.ДатаОкончания) = 6);
	Если НЕ ПроверятьСоотношение Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Страница Из Раздел2 Цикл
		ДанныеСтраницы = Страница.Данные[0].Значение;
		НомерСтраницыСтр = ЧислоСтрЧГ0(Раздел2.Индекс(Страница) + 1);
		
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Стр020Гр3);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Стр030Гр3);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Стр040Гр3);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Стр050Гр3);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Стр060Гр3);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Стр070Гр3);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Стр080Гр3);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Стр120);
		
		СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
		ЗарегистрироватьФормулуДляРасшифровки(ОписаниеКС);
		
		ВнестиПоказательВРасшифровку(Р2Стр120, "Раздел2", НомерСтраницыСтр);
		ВнестиПоказательВРасшифровку(Р2Стр020Гр3, "Раздел2", НомерСтраницыСтр);
		ВнестиПоказательВРасшифровку(Р2Стр030Гр3, "Раздел2", НомерСтраницыСтр);
		ВнестиПоказательВРасшифровку(Р2Стр040Гр3, "Раздел2", НомерСтраницыСтр);
		ВнестиПоказательВРасшифровку(Р2Стр050Гр3, "Раздел2", НомерСтраницыСтр);
		ВнестиПоказательВРасшифровку(Р2Стр060Гр3, "Раздел2", НомерСтраницыСтр);
		ВнестиПоказательВРасшифровку(Р2Стр070Гр3, "Раздел2", НомерСтраницыСтр);
		ВнестиПоказательВРасшифровку(Р2Стр080Гр3, "Раздел2", НомерСтраницыСтр);
		
		КонтрольноеЗначение = (Р2Стр020Гр3.Значение + Р2Стр030Гр3.Значение + Р2Стр040Гр3.Значение + Р2Стр050Гр3.Значение
		                    + Р2Стр060Гр3.Значение + Р2Стр070Гр3.Значение + Р2Стр080Гр3.Значение) / 7;
		КонтрольноеЗначение = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, Окр(КонтрольноеЗначение, 2));
		
		Если Р2Стр120.Значение > КонтрольноеЗначение Тогда
			ЭтоОшибка = Истина;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
			ОписаниеОшибки = ОписаниеОшибки1;
		ИначеЕсли Р2Стр120.Значение < КонтрольноеЗначение Тогда
			ЭтоОшибка = Истина;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
			ОписаниеОшибки = ОписаниеОшибки2;
		Иначе
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
			ОписаниеОшибки = "";
		КонецЕсли;
		
		Расшифровка = Р2Стр120.ЗначениеСтр + " = (" + Р2Стр020Гр3.ЗначениеСтр
		            + " + " + Р2Стр030Гр3.ЗначениеСтр + " + " + Р2Стр040Гр3.ЗначениеСтр
		            + " + " + Р2Стр050Гр3.ЗначениеСтр + " + " + Р2Стр060Гр3.ЗначениеСтр
		            + " + " + Р2Стр070Гр3.ЗначениеСтр + " + " + Р2Стр080Гр3.ЗначениеСтр
		            + ") / 7"
		            + " Итог [" + КонтрольноеЗначение + "]";
		
		ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок,
			Расшифровка, ЭтоОшибка, ОписаниеОшибки, Нарушение);
		
	КонецЦикла;
	
	СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
	СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
	СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_1_4(СтруктураРезультата)
	
	ОбщееЧислоОшибок    = СтруктураРезультата.КоличествоНайденныхОшибок;
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок;
	СтруктураОшибок     = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы   = НСтр("ru='Проверка раздела 2 (КС 1.4)'");
	ОписаниеКС     = НСтр("ru='Средняя стоимость имущества за отчетный период (строка 120 Раздела 2) должна быть равна (строка 020 графа 3 Раздела 2 + строка 030 графа 3 Раздела 2 + строка 040 графа 3 Раздела 2 + строка 050 графа 3 Раздела 2 + строка 060 графа 3 Раздела 2 + строка 070 графы 3 Раздела 2 + строка 080 графы 3 Раздела 2 + строка 090 графы 3 Раздела 2 + строка 100 графы 3 Раздела 2 + строка 110 графы 3 Раздела 2) / 10'");
	
	Нарушение      = НСтр("ru='НК РФ ст.376, п. 4'");
	ОписаниеОшибки1 = НСтр("ru='Завышена средняя стоимость имущества за отчетный период (9 месяцев)'");
	ОписаниеОшибки2 = НСтр("ru='Занижена средняя стоимость имущества за отчетный период (9 месяцев)'");
	
	Р2Стр020Гр3 = ПоказательПоСтроке("Р2Стр020Гр3");
	Р2Стр030Гр3 = ПоказательПоСтроке("Р2Стр030Гр3");
	Р2Стр040Гр3 = ПоказательПоСтроке("Р2Стр040Гр3");
	Р2Стр050Гр3 = ПоказательПоСтроке("Р2Стр050Гр3");
	Р2Стр060Гр3 = ПоказательПоСтроке("Р2Стр060Гр3");
	Р2Стр070Гр3 = ПоказательПоСтроке("Р2Стр070Гр3");
	Р2Стр080Гр3 = ПоказательПоСтроке("Р2Стр080Гр3");
	Р2Стр090Гр3 = ПоказательПоСтроке("Р2Стр090Гр3");
	Р2Стр100Гр3 = ПоказательПоСтроке("Р2Стр100Гр3");
	Р2Стр110Гр3 = ПоказательПоСтроке("Р2Стр110Гр3");
	Р2Стр120 = ПоказательПоСтроке("Р2Стр120");
	
	Раздел2 = мДанныеОтчета.Раздел2;
	
	ПроверятьСоотношение = (Месяц(СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка.ДатаОкончания) = 9);
	Если НЕ ПроверятьСоотношение Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Страница Из Раздел2 Цикл
		ДанныеСтраницы = Страница.Данные[0].Значение;
		НомерСтраницыСтр = ЧислоСтрЧГ0(Раздел2.Индекс(Страница) + 1);
		
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Стр020Гр3);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Стр030Гр3);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Стр040Гр3);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Стр050Гр3);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Стр060Гр3);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Стр070Гр3);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Стр080Гр3);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Стр090Гр3);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Стр100Гр3);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Стр110Гр3);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Стр120);
		
		СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
		ЗарегистрироватьФормулуДляРасшифровки(ОписаниеКС);
		
		ВнестиПоказательВРасшифровку(Р2Стр120, "Раздел2", НомерСтраницыСтр);
		ВнестиПоказательВРасшифровку(Р2Стр020Гр3, "Раздел2", НомерСтраницыСтр);
		ВнестиПоказательВРасшифровку(Р2Стр030Гр3, "Раздел2", НомерСтраницыСтр);
		ВнестиПоказательВРасшифровку(Р2Стр040Гр3, "Раздел2", НомерСтраницыСтр);
		ВнестиПоказательВРасшифровку(Р2Стр050Гр3, "Раздел2", НомерСтраницыСтр);
		ВнестиПоказательВРасшифровку(Р2Стр060Гр3, "Раздел2", НомерСтраницыСтр);
		ВнестиПоказательВРасшифровку(Р2Стр070Гр3, "Раздел2", НомерСтраницыСтр);
		ВнестиПоказательВРасшифровку(Р2Стр080Гр3, "Раздел2", НомерСтраницыСтр);
		ВнестиПоказательВРасшифровку(Р2Стр090Гр3, "Раздел2", НомерСтраницыСтр);
		ВнестиПоказательВРасшифровку(Р2Стр100Гр3, "Раздел2", НомерСтраницыСтр);
		ВнестиПоказательВРасшифровку(Р2Стр110Гр3, "Раздел2", НомерСтраницыСтр);
		
		КонтрольноеЗначение = (Р2Стр020Гр3.Значение + Р2Стр030Гр3.Значение + Р2Стр040Гр3.Значение + Р2Стр050Гр3.Значение
		                    + Р2Стр060Гр3.Значение + Р2Стр070Гр3.Значение + Р2Стр080Гр3.Значение
		                    + Р2Стр090Гр3.Значение + Р2Стр100Гр3.Значение + Р2Стр110Гр3.Значение) / 10;
		КонтрольноеЗначение = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, Окр(КонтрольноеЗначение, 2));
		
		Если Р2Стр120.Значение > КонтрольноеЗначение Тогда
			ЭтоОшибка = Истина;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
			ОписаниеОшибки = ОписаниеОшибки1;
		ИначеЕсли Р2Стр120.Значение < КонтрольноеЗначение Тогда
			ЭтоОшибка = Истина;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
			ОписаниеОшибки = ОписаниеОшибки2;
		Иначе
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
			ОписаниеОшибки = "";
		КонецЕсли;
		
		Расшифровка = Р2Стр120.ЗначениеСтр + " = (" + Р2Стр020Гр3.ЗначениеСтр
		            + " + " + Р2Стр030Гр3.ЗначениеСтр + " + " + Р2Стр040Гр3.ЗначениеСтр
		            + " + " + Р2Стр050Гр3.ЗначениеСтр + " + " + Р2Стр060Гр3.ЗначениеСтр
		            + " + " + Р2Стр070Гр3.ЗначениеСтр + " + " + Р2Стр080Гр3.ЗначениеСтр
		            + " + " + Р2Стр090Гр3.ЗначениеСтр + " + " + Р2Стр100Гр3.ЗначениеСтр
		            + " + " + Р2Стр110Гр3.ЗначениеСтр + ") / 7"
		            + " Итог [" + КонтрольноеЗначение + "]";
		
		ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок,
			Расшифровка, ЭтоОшибка, ОписаниеОшибки, Нарушение);
		
	КонецЦикла;
	
	СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
	СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
	СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_1_5(СтруктураРезультата)
	
	ОбщееЧислоОшибок    = СтруктураРезультата.КоличествоНайденныхОшибок;
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок;
	СтруктураОшибок     = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы   = НСтр("ru='Проверка раздела 2 (КС 1.5)'");
	ОписаниеКС     = НСтр("ru='Средняя стоимость необлагаемого налогом имущества за отчетный период (строка 140 Раздела 2) должна быть равна (строка 020 графы 4 Раздела 2 + строка 030 графы 4 Раздела 2 + строка 040 графы 4 Раздела 2 + строка 050 графы 4 Раздела 2) / 4'");
	
	Нарушение      = НСтр("ru='НК РФ ст.376, п. 4'");
	ОписаниеОшибки1 = НСтр("ru='Завышена средняя стоимость имущества за отчетный период (квартал)'");
	ОписаниеОшибки2 = НСтр("ru='Занижена средняя стоимость имущества за отчетный период (квартал)'");
	
	Р2Стр020Гр4 = ПоказательПоСтроке("Р2Стр020Гр4");
	Р2Стр030Гр4 = ПоказательПоСтроке("Р2Стр030Гр4");
	Р2Стр040Гр4 = ПоказательПоСтроке("Р2Стр040Гр4");
	Р2Стр050Гр4 = ПоказательПоСтроке("Р2Стр050Гр4");
	Р2Стр140 = ПоказательПоСтроке("Р2Стр140");
	
	Раздел2 = мДанныеОтчета.Раздел2;
	
	ПроверятьСоотношение = (Месяц(СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка.ДатаОкончания) = 3);
	Если НЕ ПроверятьСоотношение Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Страница Из Раздел2 Цикл
		ДанныеСтраницы = Страница.Данные[0].Значение;
		НомерСтраницыСтр = ЧислоСтрЧГ0(Раздел2.Индекс(Страница) + 1);
		
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Стр020Гр4);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Стр030Гр4);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Стр040Гр4);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Стр050Гр4);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Стр140);
		
		СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
		ЗарегистрироватьФормулуДляРасшифровки(ОписаниеКС);
		
		ВнестиПоказательВРасшифровку(Р2Стр140, "Раздел2", НомерСтраницыСтр);
		ВнестиПоказательВРасшифровку(Р2Стр020Гр4, "Раздел2", НомерСтраницыСтр);
		ВнестиПоказательВРасшифровку(Р2Стр030Гр4, "Раздел2", НомерСтраницыСтр);
		ВнестиПоказательВРасшифровку(Р2Стр040Гр4, "Раздел2", НомерСтраницыСтр);
		ВнестиПоказательВРасшифровку(Р2Стр050Гр4, "Раздел2", НомерСтраницыСтр);
		
		КонтрольноеЗначение = (Р2Стр020Гр4.Значение + Р2Стр030Гр4.Значение + Р2Стр040Гр4.Значение + Р2Стр050Гр4.Значение) / 4;
		КонтрольноеЗначение = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, Окр(КонтрольноеЗначение, 2));
		
		Если Р2Стр140.Значение > КонтрольноеЗначение Тогда
			ЭтоОшибка = Истина;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
			ОписаниеОшибки = ОписаниеОшибки1;
		ИначеЕсли Р2Стр140.Значение < КонтрольноеЗначение Тогда
			ЭтоОшибка = Истина;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
			ОписаниеОшибки = ОписаниеОшибки2;
		Иначе
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
			ОписаниеОшибки = "";
		КонецЕсли;
		
		Расшифровка = Р2Стр140.ЗначениеСтр + " = (" + Р2Стр020Гр4.ЗначениеСтр
		            + " + " + Р2Стр030Гр4.ЗначениеСтр + " + " + Р2Стр040Гр4.ЗначениеСтр
		            + " + " + Р2Стр050Гр4.ЗначениеСтр + ") / 4"
		            + " Итог [" + КонтрольноеЗначение + "]";
		
		ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок,
			Расшифровка, ЭтоОшибка, ОписаниеОшибки, Нарушение);
		
	КонецЦикла;
	
	СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
	СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
	СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_1_6(СтруктураРезультата)
	
	ОбщееЧислоОшибок    = СтруктураРезультата.КоличествоНайденныхОшибок;
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок;
	СтруктураОшибок     = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы   = НСтр("ru='Проверка раздела 2 (КС 1.6)'");
	ОписаниеКС     = НСтр("ru='Средняя стоимость необлагаемого налогом имущества за отчетный период (строка 140 Раздела 2) должна быть равна (строка 020 графа 4 Раздела 2 + строка 030 графа 4 Раздела 2 + строка 040 графа 4 Раздела 2 + строка 050 графа 4 Раздела 2 + строка 060 графа 4 Раздела 2 + строка 070 графы 4 Раздела 2 + строка 080 графы 4 Раздела 2) / 7'");
	
	Нарушение      = НСтр("ru='НК РФ ст.376, п. 4'");
	ОписаниеОшибки1 = НСтр("ru='Завышена средняя стоимость имущества за отчетный период (полугодие)'");
	ОписаниеОшибки2 = НСтр("ru='Занижена средняя стоимость имущества за отчетный период (полугодие)'");
	
	Р2Стр020Гр4 = ПоказательПоСтроке("Р2Стр020Гр4");
	Р2Стр030Гр4 = ПоказательПоСтроке("Р2Стр030Гр4");
	Р2Стр040Гр4 = ПоказательПоСтроке("Р2Стр040Гр4");
	Р2Стр050Гр4 = ПоказательПоСтроке("Р2Стр050Гр4");
	Р2Стр060Гр4 = ПоказательПоСтроке("Р2Стр060Гр4");
	Р2Стр070Гр4 = ПоказательПоСтроке("Р2Стр070Гр4");
	Р2Стр080Гр4 = ПоказательПоСтроке("Р2Стр080Гр4");
	Р2Стр140 = ПоказательПоСтроке("Р2Стр140");
	
	Раздел2 = мДанныеОтчета.Раздел2;
	
	ПроверятьСоотношение = (Месяц(СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка.ДатаОкончания) = 6);
	Если НЕ ПроверятьСоотношение Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Страница Из Раздел2 Цикл
		ДанныеСтраницы = Страница.Данные[0].Значение;
		НомерСтраницыСтр = ЧислоСтрЧГ0(Раздел2.Индекс(Страница) + 1);
		
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Стр020Гр4);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Стр030Гр4);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Стр040Гр4);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Стр050Гр4);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Стр060Гр4);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Стр070Гр4);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Стр080Гр4);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Стр140);
		
		СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
		ЗарегистрироватьФормулуДляРасшифровки(ОписаниеКС);
		
		ВнестиПоказательВРасшифровку(Р2Стр140, "Раздел2", НомерСтраницыСтр);
		ВнестиПоказательВРасшифровку(Р2Стр020Гр4, "Раздел2", НомерСтраницыСтр);
		ВнестиПоказательВРасшифровку(Р2Стр030Гр4, "Раздел2", НомерСтраницыСтр);
		ВнестиПоказательВРасшифровку(Р2Стр040Гр4, "Раздел2", НомерСтраницыСтр);
		ВнестиПоказательВРасшифровку(Р2Стр050Гр4, "Раздел2", НомерСтраницыСтр);
		ВнестиПоказательВРасшифровку(Р2Стр060Гр4, "Раздел2", НомерСтраницыСтр);
		ВнестиПоказательВРасшифровку(Р2Стр070Гр4, "Раздел2", НомерСтраницыСтр);
		ВнестиПоказательВРасшифровку(Р2Стр080Гр4, "Раздел2", НомерСтраницыСтр);
		
		КонтрольноеЗначение = (Р2Стр020Гр4.Значение + Р2Стр030Гр4.Значение + Р2Стр040Гр4.Значение + Р2Стр050Гр4.Значение
		                    + Р2Стр060Гр4.Значение + Р2Стр070Гр4.Значение + Р2Стр080Гр4.Значение) / 7;
		КонтрольноеЗначение = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, Окр(КонтрольноеЗначение, 2));
		
		Если Р2Стр140.Значение > КонтрольноеЗначение Тогда
			ЭтоОшибка = Истина;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
			ОписаниеОшибки = ОписаниеОшибки1;
		ИначеЕсли Р2Стр140.Значение < КонтрольноеЗначение Тогда
			ЭтоОшибка = Истина;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
			ОписаниеОшибки = ОписаниеОшибки2;
		Иначе
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
			ОписаниеОшибки = "";
		КонецЕсли;
		
		Расшифровка = Р2Стр140.ЗначениеСтр + " = (" + Р2Стр020Гр4.ЗначениеСтр
		            + " + " + Р2Стр030Гр4.ЗначениеСтр + " + " + Р2Стр040Гр4.ЗначениеСтр
		            + " + " + Р2Стр050Гр4.ЗначениеСтр + " + " + Р2Стр060Гр4.ЗначениеСтр
		            + " + " + Р2Стр070Гр4.ЗначениеСтр + " + " + Р2Стр080Гр4.ЗначениеСтр
		            + ") / 7"
		            + " Итог [" + КонтрольноеЗначение + "]";
		
		ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок,
			Расшифровка, ЭтоОшибка, ОписаниеОшибки, Нарушение);
		
	КонецЦикла;
	
	СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
	СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
	СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_1_7(СтруктураРезультата)
	
	ОбщееЧислоОшибок    = СтруктураРезультата.КоличествоНайденныхОшибок;
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок;
	СтруктураОшибок     = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы   = НСтр("ru='Проверка раздела 2 (КС 1.7)'");
	ОписаниеКС     = НСтр("ru='Средняя стоимость необлагаемого налогом имущества за отчетный период (строка 140 Раздела 2) должна быть равна (строка 020 графа 4 Раздела 2 + строка 030 графа 4 Раздела 2 + строка 040 графа 4 Раздела 2 + строка 050 графа 4 Раздела 2 + строка 060 графа 4 Раздела 2 + строка 070 графы 4 Раздела 2 + строка 080 графы 4 Раздела 2 + строка 090 графы 4 Раздела 2 + строка 100 графы 4 Раздела 2 + строка 110 графы 4 Раздела 2) / 10'");
	
	Нарушение      = НСтр("ru='НК РФ ст.376, п. 4'");
	ОписаниеОшибки1 = НСтр("ru='Завышена средняя стоимость имущества за отчетный период (9 месяцев)'");
	ОписаниеОшибки2 = НСтр("ru='Занижена средняя стоимость имущества за отчетный период (9 месяцев)'");
	
	Р2Стр020Гр4 = ПоказательПоСтроке("Р2Стр020Гр4");
	Р2Стр030Гр4 = ПоказательПоСтроке("Р2Стр030Гр4");
	Р2Стр040Гр4 = ПоказательПоСтроке("Р2Стр040Гр4");
	Р2Стр050Гр4 = ПоказательПоСтроке("Р2Стр050Гр4");
	Р2Стр060Гр4 = ПоказательПоСтроке("Р2Стр060Гр4");
	Р2Стр070Гр4 = ПоказательПоСтроке("Р2Стр070Гр4");
	Р2Стр080Гр4 = ПоказательПоСтроке("Р2Стр080Гр4");
	Р2Стр090Гр4 = ПоказательПоСтроке("Р2Стр090Гр4");
	Р2Стр100Гр4 = ПоказательПоСтроке("Р2Стр100Гр4");
	Р2Стр110Гр4 = ПоказательПоСтроке("Р2Стр110Гр4");
	Р2Стр140 = ПоказательПоСтроке("Р2Стр140");
	
	Раздел2 = мДанныеОтчета.Раздел2;
	
	ПроверятьСоотношение = (Месяц(СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка.ДатаОкончания) = 9);
	Если НЕ ПроверятьСоотношение Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Страница Из Раздел2 Цикл
		ДанныеСтраницы = Страница.Данные[0].Значение;
		НомерСтраницыСтр = ЧислоСтрЧГ0(Раздел2.Индекс(Страница) + 1);
		
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Стр020Гр4);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Стр030Гр4);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Стр040Гр4);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Стр050Гр4);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Стр060Гр4);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Стр070Гр4);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Стр080Гр4);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Стр090Гр4);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Стр100Гр4);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Стр110Гр4);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Стр140);
		
		СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
		ЗарегистрироватьФормулуДляРасшифровки(ОписаниеКС);
		
		ВнестиПоказательВРасшифровку(Р2Стр140, "Раздел2", НомерСтраницыСтр);
		ВнестиПоказательВРасшифровку(Р2Стр020Гр4, "Раздел2", НомерСтраницыСтр);
		ВнестиПоказательВРасшифровку(Р2Стр030Гр4, "Раздел2", НомерСтраницыСтр);
		ВнестиПоказательВРасшифровку(Р2Стр040Гр4, "Раздел2", НомерСтраницыСтр);
		ВнестиПоказательВРасшифровку(Р2Стр050Гр4, "Раздел2", НомерСтраницыСтр);
		ВнестиПоказательВРасшифровку(Р2Стр060Гр4, "Раздел2", НомерСтраницыСтр);
		ВнестиПоказательВРасшифровку(Р2Стр070Гр4, "Раздел2", НомерСтраницыСтр);
		ВнестиПоказательВРасшифровку(Р2Стр080Гр4, "Раздел2", НомерСтраницыСтр);
		ВнестиПоказательВРасшифровку(Р2Стр090Гр4, "Раздел2", НомерСтраницыСтр);
		ВнестиПоказательВРасшифровку(Р2Стр100Гр4, "Раздел2", НомерСтраницыСтр);
		ВнестиПоказательВРасшифровку(Р2Стр110Гр4, "Раздел2", НомерСтраницыСтр);
		
		КонтрольноеЗначение = (Р2Стр020Гр4.Значение + Р2Стр030Гр4.Значение + Р2Стр040Гр4.Значение + Р2Стр050Гр4.Значение
		                    + Р2Стр060Гр4.Значение + Р2Стр070Гр4.Значение + Р2Стр080Гр4.Значение
		                    + Р2Стр090Гр4.Значение + Р2Стр100Гр4.Значение + Р2Стр110Гр4.Значение) / 10;
		КонтрольноеЗначение = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, Окр(КонтрольноеЗначение, 2));
		
		Если Р2Стр140.Значение > КонтрольноеЗначение Тогда
			ЭтоОшибка = Истина;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
			ОписаниеОшибки = ОписаниеОшибки1;
		ИначеЕсли Р2Стр140.Значение < КонтрольноеЗначение Тогда
			ЭтоОшибка = Истина;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
			ОписаниеОшибки = ОписаниеОшибки2;
		Иначе
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
			ОписаниеОшибки = "";
		КонецЕсли;
		
		Расшифровка = Р2Стр140.ЗначениеСтр + " = (" + Р2Стр020Гр4.ЗначениеСтр
		            + " + " + Р2Стр030Гр4.ЗначениеСтр + " + " + Р2Стр040Гр4.ЗначениеСтр
		            + " + " + Р2Стр050Гр4.ЗначениеСтр + " + " + Р2Стр060Гр4.ЗначениеСтр
		            + " + " + Р2Стр070Гр4.ЗначениеСтр + " + " + Р2Стр080Гр4.ЗначениеСтр
		            + " + " + Р2Стр090Гр4.ЗначениеСтр + " + " + Р2Стр100Гр4.ЗначениеСтр
		            + " + " + Р2Стр110Гр4.ЗначениеСтр + ") / 7"
		            + " Итог [" + КонтрольноеЗначение + "]";
		
		ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок,
			Расшифровка, ЭтоОшибка, ОписаниеОшибки, Нарушение);
		
	КонецЦикла;
	
	СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
	СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
	СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_1_8(СтруктураРезультата)
	
	ОбщееЧислоОшибок    = СтруктураРезультата.КоличествоНайденныхОшибок;
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок;
	СтруктураОшибок     = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы   = НСтр("ru='Проверка раздела 2 (КС 1.8)'");
	ОписаниеКС     = НСтр("ru='Средняя стоимость необлагаемого налогом имущества за отчетный период (строка 140 Раздела 2) должна быть равна нулю, если значение строки 130 Раздела 2 равно нулю или средняя стоимость необлагаемого налогом имущества за отчетный период (строка 140 Раздела 2) должна быть отличной от нуля, если значение строки 130 Раздела 2 отлично от нуля'");
	
	Нарушение      = НСтр("ru='НК РФ ст.376 п.4'");
	ОписаниеОшибки = НСтр("ru='Возможно неправомерное применение льготы по налогу'");
	
	Р2Стр130 = ПоказательПоСтроке("Р2Стр130");
	Р2Стр140 = ПоказательПоСтроке("Р2Стр140");
	
	Раздел2 = мДанныеОтчета.Раздел2;
	
	Для Каждого Страница Из Раздел2 Цикл
		ДанныеСтраницы = Страница.Данные[0].Значение;
		НомерСтраницыСтр = ЧислоСтрЧГ0(Раздел2.Индекс(Страница) + 1);
		
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Стр130);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Стр140);
		
		СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
		ЗарегистрироватьФормулуДляРасшифровки(ОписаниеКС);
		
		ВнестиПоказательВРасшифровку(Р2Стр140, "Раздел2", НомерСтраницыСтр);
		ВнестиПоказательВРасшифровку(Р2Стр130, "Раздел2", НомерСтраницыСтр);
		
		КорректноеЗаполнение = (ЗначениеЗаполнено(Р2Стр130.Значение) = ЗначениеЗаполнено(Р2Стр140.Значение));
		
		Если НЕ КорректноеЗаполнение Тогда
			ЭтоОшибка = Истина;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
		Иначе
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
		КонецЕсли;
		
		Расшифровка = Р2Стр140.ЗначениеСтр + " = 0 при условии, что код льготы не заполнен (""" + Р2Стр130.ЗначениеСтр + """) или "
		            + Р2Стр140.ЗначениеСтр + " <> 0 при условии, что код льготы заполнен (""" + Р2Стр130.ЗначениеСтр + """)";
		
		ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок,
			Расшифровка, ЭтоОшибка, ОписаниеОшибки, Нарушение);
		
	КонецЦикла;
	
	СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
	СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
	СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_1_9(СтруктураРезультата)
	
	ОбщееЧислоОшибок    = СтруктураРезультата.КоличествоНайденныхОшибок;
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок;
	СтруктураОшибок     = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы   = НСтр("ru='Проверка раздела 2 (КС 1.9)'");
	ОписаниеКС     = НСтр("ru='Сумма авансового платежа (строка 180 Раздела 2) должна быть равна 1/4 (строка 120 Раздела 2 - строка 140 Раздела 2) * строка 170 Раздела 2 / 100, если код вида имущества (строка 001 Раздела 2) = ""1"" или ""3"" или ""5"" или ""6"" или ""8""'");
	
	Нарушение      = НСтр("ru='НК РФ ст.382, п. 4'");
	ОписаниеОшибки1 = НСтр("ru='Завышена сумма авансового платежа'");
	ОписаниеОшибки2 = НСтр("ru='Занижена сумма авансового платежа'");
	
	Р2Стр001 = ПоказательПоСтроке("Р2Стр001");
	Р2Стр120 = ПоказательПоСтроке("Р2Стр120");
	Р2Стр140 = ПоказательПоСтроке("Р2Стр140");
	Р2Стр170 = ПоказательПоСтроке("Р2Стр170");
	Р2Стр180 = ПоказательПоСтроке("Р2Стр180");
	
	Раздел2 = мДанныеОтчета.Раздел2;
	
	Для Каждого Страница Из Раздел2 Цикл
		ДанныеСтраницы = Страница.Данные[0].Значение;
		НомерСтраницыСтр = ЧислоСтрЧГ0(Раздел2.Индекс(Страница) + 1);
		
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Стр001);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Стр120);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Стр140);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Стр170);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Стр180);
		
		ПроверятьСоотношение = (Р2Стр001.Значение = "1" ИЛИ Р2Стр001.Значение = "3" ИЛИ Р2Стр001.Значение = "5" ИЛИ Р2Стр001.Значение = "6"
			ИЛИ Р2Стр001.Значение = "8");
		Если НЕ ПроверятьСоотношение Тогда
			Продолжить;
		КонецЕсли;
		
		СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
		ЗарегистрироватьФормулуДляРасшифровки(ОписаниеКС);
		
		ВнестиПоказательВРасшифровку(Р2Стр180, "Раздел2", НомерСтраницыСтр);
		ВнестиПоказательВРасшифровку(Р2Стр120, "Раздел2", НомерСтраницыСтр);
		ВнестиПоказательВРасшифровку(Р2Стр140, "Раздел2", НомерСтраницыСтр);
		ВнестиПоказательВРасшифровку(Р2Стр170, "Раздел2", НомерСтраницыСтр);
		ВнестиПоказательВРасшифровку(Р2Стр001, "Раздел2", НомерСтраницыСтр);
		
		КонтрольноеЗначение = 1 / 4 * (Р2Стр120.Значение - Р2Стр140.Значение) * Р2Стр170.Значение / 100;
		КонтрольноеЗначение = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, Окр(КонтрольноеЗначение, 2));
		
		Если Р2Стр180.Значение > КонтрольноеЗначение Тогда
			ЭтоОшибка = Истина;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
			ОписаниеОшибки = ОписаниеОшибки1;
		ИначеЕсли Р2Стр180.Значение < КонтрольноеЗначение Тогда
			ЭтоОшибка = Истина;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
			ОписаниеОшибки = ОписаниеОшибки2;
		Иначе
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
			ОписаниеОшибки = "";
		КонецЕсли;
		
		Расшифровка = Р2Стр180.ЗначениеСтр + " = 1 / 4 * (" + Р2Стр120.ЗначениеСтр
		            + " - " + Р2Стр140.ЗначениеСтр + ") * " + Р2Стр170.ЗначениеСтр + " / 100"
		            + " Итог [" + КонтрольноеЗначение + "]"
		            + " при условии, что """ + Р2Стр001.ЗначениеСтр + """ = [""1"", ""3"", ""5"", ""6"", ""8""]";
		
		ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок,
			Расшифровка, ЭтоОшибка, ОписаниеОшибки, Нарушение);
		
	КонецЦикла;
	
	СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
	СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
	СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_1_10(СтруктураРезультата)
	
	ОбщееЧислоОшибок    = СтруктураРезультата.КоличествоНайденныхОшибок;
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок;
	СтруктураОшибок     = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы   = НСтр("ru='Проверка раздела 2 (КС 1.10)'");
	ОписаниеКС     = НСтр("ru='Сумма авансового платежа (строка 180 Раздела 2) должна быть равна 1/4 (строка 120 Раздела 2 - строка 140 Раздела 2) * строка 150 Раздела 2 * строка 170 Раздела 2 / 100, если код вида имущества (строка 001 Раздела 2) = ""2""'");
	
	Нарушение      = НСтр("ru='НК РФ ст.382, п. 4'");
	ОписаниеОшибки1 = НСтр("ru='Завышена сумма авансового платежа'");
	ОписаниеОшибки2 = НСтр("ru='Занижена сумма авансового платежа'");
	
	Р2Стр001 = ПоказательПоСтроке("Р2Стр001");
	Р2Стр120 = ПоказательПоСтроке("Р2Стр120");
	Р2Стр140 = ПоказательПоСтроке("Р2Стр140");
	Р2Стр150ч = ПоказательПоСтроке("Р2Стр150ч");
	Р2Стр150з = ПоказательПоСтроке("Р2Стр150з");
	Р2Стр170 = ПоказательПоСтроке("Р2Стр170");
	Р2Стр180 = ПоказательПоСтроке("Р2Стр180");
	
	Раздел2 = мДанныеОтчета.Раздел2;
	
	Для Каждого Страница Из Раздел2 Цикл
		ДанныеСтраницы = Страница.Данные[0].Значение;
		НомерСтраницыСтр = ЧислоСтрЧГ0(Раздел2.Индекс(Страница) + 1);
		
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Стр001);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Стр120);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Стр140);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Стр150ч);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Стр150з);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Стр170);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Стр180);
		
		ПроверятьСоотношение = (Р2Стр001.Значение = "2");
		Если НЕ ПроверятьСоотношение Тогда
			Продолжить;
		КонецЕсли;
		
		СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
		ЗарегистрироватьФормулуДляРасшифровки(ОписаниеКС);
		
		ВнестиПоказательВРасшифровку(Р2Стр180, "Раздел2", НомерСтраницыСтр);
		ВнестиПоказательВРасшифровку(Р2Стр120, "Раздел2", НомерСтраницыСтр);
		ВнестиПоказательВРасшифровку(Р2Стр140, "Раздел2", НомерСтраницыСтр);
		Если ЗначениеЗаполнено(Р2Стр150з.Значение) Тогда
			РасшифровкаР2Стр150 = " * " + Р2Стр150ч.ЗначениеСтр + "/" + Р2Стр150з.ЗначениеСтр;
		Иначе
			Р2Стр150ч.Значение = 0;
			Р2Стр150з.Значение = 1;
			РасшифровкаР2Стр150 = " * 0 ";
		КонецЕсли;
		ВнестиПоказательВРасшифровку(Р2Стр150ч, "Раздел2", НомерСтраницыСтр);
		ВнестиПоказательВРасшифровку(Р2Стр150з, "Раздел2", НомерСтраницыСтр);
		ВнестиПоказательВРасшифровку(Р2Стр170, "Раздел2", НомерСтраницыСтр);
		ВнестиПоказательВРасшифровку(Р2Стр001, "Раздел2", НомерСтраницыСтр);
		
		КонтрольноеЗначение = 1 / 4 * (Р2Стр120.Значение - Р2Стр140.Значение) * Р2Стр150ч.Значение / Р2Стр150з.Значение * Р2Стр170.Значение / 100;
		КонтрольноеЗначение = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, Окр(КонтрольноеЗначение, 2));
		
		Если Р2Стр180.Значение > КонтрольноеЗначение Тогда
			ЭтоОшибка = Истина;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
			ОписаниеОшибки = ОписаниеОшибки1;
		ИначеЕсли Р2Стр180.Значение < КонтрольноеЗначение Тогда
			ЭтоОшибка = Истина;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
			ОписаниеОшибки = ОписаниеОшибки2;
		Иначе
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
			ОписаниеОшибки = "";
		КонецЕсли;
		
		Расшифровка = Р2Стр180.ЗначениеСтр + " = 1/4 * (" + Р2Стр120.ЗначениеСтр
		            + " - " + Р2Стр140.ЗначениеСтр + ") * " + Р2Стр150ч.ЗначениеСтр
		            + "/" + Р2Стр150з.ЗначениеСтр + " * " + Р2Стр170.ЗначениеСтр + " / 100"
		            + " Итог [" + КонтрольноеЗначение + "]"
		            + " при условии, что """ + Р2Стр001.ЗначениеСтр + """ = ""2""";
		
		ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок,
			Расшифровка, ЭтоОшибка, ОписаниеОшибки, Нарушение);
		
	КонецЦикла;
	
	СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
	СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
	СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_1_14(СтруктураРезультата)
	
	ОбщееЧислоОшибок    = СтруктураРезультата.КоличествоНайденныхОшибок;
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок;
	СтруктураОшибок     = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы   = НСтр("ru='Проверка раздела 2 (КС 1.14)'");
	ОписаниеКС     = НСтр("ru='Код налоговой льготы, установленной в виде понижения налоговой ставки (строка 160 Раздела 2) должен быть равен 2012400, если такая льгота указана'");
	
	Нарушение      = НСтр("ru='НК РФ ст. 372, п. 2'");
	ОписаниеОшибки = НСтр("ru='Возможно неправомерное применение льгот'");
	
	Р2Стр160 = ПоказательПоСтроке("Р2Стр160");
	
	Раздел2 = мДанныеОтчета.Раздел2;
	
	Для Каждого Страница Из Раздел2 Цикл
		ДанныеСтраницы = Страница.Данные[0].Значение;
		НомерСтраницыСтр = ЧислоСтрЧГ0(Раздел2.Индекс(Страница) + 1);
		
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Стр160);
		
		ПроверятьСоотношение = ЗначениеЗаполнено(Р2Стр160.Значение);
		Если НЕ ПроверятьСоотношение Тогда
			Продолжить;
		КонецЕсли;
		
		СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
		ЗарегистрироватьФормулуДляРасшифровки(ОписаниеКС);
		
		ВнестиПоказательВРасшифровку(Р2Стр160, "Раздел2", НомерСтраницыСтр);
		
		Если Р2Стр160.Значение <> "2012400" Тогда
			ЭтоОшибка = Истина;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
		Иначе
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
		КонецЕсли;
		
		Расшифровка = """" + Р2Стр160.ЗначениеСтр + """ = ""2012400""";
		
		ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок,
			Расшифровка, ЭтоОшибка, ОписаниеОшибки, Нарушение);
		
	КонецЦикла;
	
	СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
	СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
	СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_1_15(СтруктураРезультата)
	
	ОбщееЧислоОшибок    = СтруктураРезультата.КоличествоНайденныхОшибок;
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок;
	СтруктураОшибок     = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы   = НСтр("ru='Проверка раздела 2 (КС 1.15)'");
	ОписаниеКС     = НСтр("ru='Код налоговой льготы в виде уменьшения суммы налога, подлежащей уплате в бюджет (строка 190 Раздела 2) должен быть равен 2012500, если такая льгота указана'");
	
	Нарушение      = НСтр("ru='НК РФ ст. 372, п. 2'");
	ОписаниеОшибки = НСтр("ru='Возможно неправомерное применение льгот'");
	
	Р2Стр190 = ПоказательПоСтроке("Р2Стр190");
	
	Раздел2 = мДанныеОтчета.Раздел2;
	
	Для Каждого Страница Из Раздел2 Цикл
		ДанныеСтраницы = Страница.Данные[0].Значение;
		НомерСтраницыСтр = ЧислоСтрЧГ0(Раздел2.Индекс(Страница) + 1);
		
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Стр190);
		
		ПроверятьСоотношение = ЗначениеЗаполнено(Р2Стр190.Значение);
		Если НЕ ПроверятьСоотношение Тогда
			Продолжить;
		КонецЕсли;
		
		СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
		ЗарегистрироватьФормулуДляРасшифровки(ОписаниеКС);
		
		ВнестиПоказательВРасшифровку(Р2Стр190, "Раздел2", НомерСтраницыСтр);
		
		Если Р2Стр190.Значение <> "2012500" Тогда
			ЭтоОшибка = Истина;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
		Иначе
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
		КонецЕсли;
		
		Расшифровка = """" + Р2Стр190.ЗначениеСтр + """ = ""2012500""";
		
		ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок,
			Расшифровка, ЭтоОшибка, ОписаниеОшибки, Нарушение);
		
	КонецЦикла;
	
	СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
	СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
	СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_1_16(СтруктураРезультата)
	
	ОбщееЧислоОшибок    = СтруктураРезультата.КоличествоНайденныхОшибок;
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок;
	СтруктураОшибок     = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы   = НСтр("ru='Проверка раздела 2 (КС 1.16)'");
	ОписаниеКС     = НСтр("ru='Сумма льготы по авансовому платежу, уменьшающей сумму авансового платежа по налогу, подлежащую уплате в бюджет (строка 200 Раздела 2) должна быть равна нулю, если строка 190 раздела не равна ""2012500""'");
	
	Нарушение      = НСтр("ru='НК РФ ст. 372, п. 2'");
	ОписаниеОшибки = НСтр("ru='Возможно неправомерное применение льгот'");
	
	Р2Стр190 = ПоказательПоСтроке("Р2Стр190");
	Р2Стр200 = ПоказательПоСтроке("Р2Стр200");
	
	Раздел2 = мДанныеОтчета.Раздел2;
	
	Для Каждого Страница Из Раздел2 Цикл
		ДанныеСтраницы = Страница.Данные[0].Значение;
		НомерСтраницыСтр = ЧислоСтрЧГ0(Раздел2.Индекс(Страница) + 1);
		
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Стр190);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Стр200);
		
		ПроверятьСоотношение = (Р2Стр190.Значение = "2012500");
		Если НЕ ПроверятьСоотношение Тогда
			Продолжить;
		КонецЕсли;
		
		СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
		ЗарегистрироватьФормулуДляРасшифровки(ОписаниеКС);
		
		ВнестиПоказательВРасшифровку(Р2Стр200, "Раздел2", НомерСтраницыСтр);
		ВнестиПоказательВРасшифровку(Р2Стр190, "Раздел2", НомерСтраницыСтр);
		
		Если Р2Стр200.Значение = 0 Тогда
			ЭтоОшибка = Истина;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
		Иначе
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
		КонецЕсли;
		
		Расшифровка = Р2Стр200.ЗначениеСтр + " <> 0"
		            + " при условии, что """ + Р2Стр190.ЗначениеСтр + """ = ""2012500""";
		
		ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок,
			Расшифровка, ЭтоОшибка, ОписаниеОшибки, Нарушение);
		
	КонецЦикла;
	
	СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
	СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
	СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_1_17(СтруктураРезультата)
	
	ОбщееЧислоОшибок    = СтруктураРезультата.КоличествоНайденныхОшибок;
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок;
	СтруктураОшибок     = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы   = НСтр("ru='Проверка раздела 3 (КС 1.17)'");
	ОписаниеКС     = НСтр("ru='Сумма авансового платежа по налогу (строка 090 Раздела 3) должна быть равна 1/4 (строка 020 Раздела 3 - строка 030 Раздела 3) * строка 050 Раздела 3 * строка 070 раздела 3 * строка 080 Раздела 3 / 100'");
	
	Нарушение      = НСтр("ru='НК РФ ст.376 п.2, 3; НК РФ ст.375 п.2; НК РФ ст.382, п.5,6'");
	ОписаниеОшибки1 = НСтр("ru='Завышена сумма авансового платежа'");
	ОписаниеОшибки2 = НСтр("ru='Занижена сумма авансового платежа'");
	
	Р3Стр020  = ПоказательПоСтроке("Р3Стр020");
	Р3Стр030  = ПоказательПоСтроке("Р3Стр030");
	Р3Стр050ч = ПоказательПоСтроке("Р3Стр050ч");
	Р3Стр050з = ПоказательПоСтроке("Р3Стр050з");
	Р3Стр070  = ПоказательПоСтроке("Р3Стр070");
	Р3Стр080ч = ПоказательПоСтроке("Р3Стр080ч");
	Р3Стр080з = ПоказательПоСтроке("Р3Стр080з");
	Р3Стр090  = ПоказательПоСтроке("Р3Стр090");
	
	Раздел3 = мДанныеОтчета.Раздел3;
	
	Для Каждого Страница Из Раздел3 Цикл
		ДанныеСтраницы = Страница.Данные[0].Значение;
		НомерСтраницыСтр = ЧислоСтрЧГ0(Раздел3.Индекс(Страница) + 1);
		
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р3Стр020);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р3Стр030);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р3Стр050ч);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р3Стр050з);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р3Стр070);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р3Стр080ч);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р3Стр080з);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р3Стр090);
		
		СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
		ЗарегистрироватьФормулуДляРасшифровки(ОписаниеКС);
		
		ВнестиПоказательВРасшифровку(Р3Стр090, "Раздел3", НомерСтраницыСтр);
		ВнестиПоказательВРасшифровку(Р3Стр020, "Раздел3", НомерСтраницыСтр);
		ВнестиПоказательВРасшифровку(Р3Стр030, "Раздел3", НомерСтраницыСтр);
		Если ЗначениеЗаполнено(Р3Стр050з.Значение) Тогда
			ВнестиПоказательВРасшифровку(Р3Стр050ч, "Раздел3", НомерСтраницыСтр);
			ВнестиПоказательВРасшифровку(Р3Стр050з, "Раздел3", НомерСтраницыСтр);
			РасшифровкаР3Стр050 = " * " + Р3Стр050ч.ЗначениеСтр + "/" + Р3Стр050з.ЗначениеСтр;
		Иначе
			Р3Стр050з.Значение = 1;
			Р3Стр050ч.Значение = 1;
			РасшифровкаР3Стр050 = "";
		КонецЕсли;
		ВнестиПоказательВРасшифровку(Р3Стр070, "Раздел3", НомерСтраницыСтр);
		Если ЗначениеЗаполнено(Р3Стр080з.Значение) Тогда
			ВнестиПоказательВРасшифровку(Р3Стр080ч, "Раздел3", НомерСтраницыСтр);
			ВнестиПоказательВРасшифровку(Р3Стр080з, "Раздел3", НомерСтраницыСтр);
			РасшифровкаР3Стр080 = " * " + Р3Стр080ч.ЗначениеСтр + "/" + Р3Стр080з.ЗначениеСтр;
		Иначе
			Р3Стр080з.Значение = 1;
			Р3Стр080ч.Значение = 1;
			РасшифровкаР3Стр080 = "";
		КонецЕсли;
		
		КонтрольноеЗначение = 1 / 4 * (Р3Стр020.Значение - Р3Стр030.Значение) * Р3Стр050ч.Значение / Р3Стр050з.Значение
		                    * СтрокуВЧисло(Р3Стр080ч.Значение) / СтрокуВЧисло(Р3Стр080з.Значение) * Р3Стр070.Значение / 100;
		КонтрольноеЗначение = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, Окр(КонтрольноеЗначение, 2));
		
		Если Р3Стр090.Значение > КонтрольноеЗначение Тогда
			ЭтоОшибка = Истина;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
			ОписаниеОшибки = ОписаниеОшибки1;
		ИначеЕсли Р3Стр090.Значение < КонтрольноеЗначение Тогда
			ЭтоОшибка = Истина;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
			ОписаниеОшибки = ОписаниеОшибки2;
		Иначе
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
			ОписаниеОшибки = "";
		КонецЕсли;
		
		Расшифровка = Р3Стр090.ЗначениеСтр + " = 1 / 4 * (" + Р3Стр020.ЗначениеСтр
		            + " - " + Р3Стр030.ЗначениеСтр + ")"
		            + РасшифровкаР3Стр050
		            + " * " + Р3Стр070.ЗначениеСтр
		            + РасшифровкаР3Стр080
		            + " / 100"
		            + " Итог [" + КонтрольноеЗначение + "]";
		
		ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок,
			Расшифровка, ЭтоОшибка, ОписаниеОшибки, Нарушение);
		
	КонецЦикла;
	
	СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
	СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
	СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_1_18(СтруктураРезультата)
	
	ОбщееЧислоОшибок    = СтруктураРезультата.КоличествоНайденныхОшибок;
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок;
	СтруктураОшибок     = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы   = НСтр("ru='Проверка раздела 3 (КС 1.18)'");
	ОписаниеКС     = НСтр("ru='Сумма льготы по авансовому платежу, уменьшающей сумму авансового платежа по налогу, подлежащую уплате в бюджет (строка 110 раздела 3) должна быть отлична от нуля, если значение строки 100 Раздела 3 равно ""2012500""'");
	
	Нарушение      = НСтр("ru='НК РФ ст.372 п.2'");
	ОписаниеОшибки = НСтр("ru='Возможно, завышена сумма авансового платежа'");
	
	Р3Стр100 = ПоказательПоСтроке("Р3Стр100");
	Р3Стр110 = ПоказательПоСтроке("Р3Стр110");
	
	Раздел3 = мДанныеОтчета.Раздел3;
	
	Для Каждого Страница Из Раздел3 Цикл
		ДанныеСтраницы = Страница.Данные[0].Значение;
		НомерСтраницыСтр = ЧислоСтрЧГ0(Раздел3.Индекс(Страница) + 1);
		
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р3Стр100);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р3Стр110);
		
		ПроверятьСоотношение = (Р3Стр100.Значение = "2012500");
		Если НЕ ПроверятьСоотношение Тогда
			Продолжить;
		КонецЕсли;
		
		СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
		ЗарегистрироватьФормулуДляРасшифровки(ОписаниеКС);
		
		ВнестиПоказательВРасшифровку(Р3Стр110, "Раздел3", НомерСтраницыСтр);
		ВнестиПоказательВРасшифровку(Р3Стр100, "Раздел3", НомерСтраницыСтр);
		
		Если Р3Стр110.Значение = 0 Тогда
			ЭтоОшибка = Истина;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
		Иначе
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
		КонецЕсли;
		
		Расшифровка = Р3Стр110.ЗначениеСтр + " <> 0"
		            + " при условии, что """ + Р3Стр100.ЗначениеСтр + """ = ""2012500""";
		
		ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок,
			Расшифровка, ЭтоОшибка, ОписаниеОшибки, Нарушение);
		
	КонецЦикла;
	
	СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
	СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
	СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	
КонецПроцедуры

&НаСервере
Функция ПоказательПоСтроке(УсловныйКодПоказателя)
	
	Результат = Новый Структура;
	Результат.Вставить("Имя");
	Результат.Вставить("Представление");
	
	Если УсловныйКодПоказателя = "Р1Стр010" Тогда
		Результат.Вставить("Имя", "П000010001003_%1");
		Результат.Вставить("Представление", НСтр("ru='Код по ОКТМО(строка 010 раздела 1)'"));
		
	ИначеЕсли УсловныйКодПоказателя = "Р1Стр020" Тогда
		Результат.Вставить("Имя", "П000010002003_%1");
		Результат.Вставить("Представление", НСтр("ru='Код бюджетной классификации (строка 020 раздела 1)'"));
		
	ИначеЕсли УсловныйКодПоказателя = "Р1Стр030" Тогда
		Результат.Вставить("Имя", "П000010003003_%1");
		Результат.Вставить("Представление", НСтр("ru='Сумма авансового платежа по налогу, подлежащая уплате в бюджет (руб.) (строка 030 раздела 1)'"));
		Результат.Вставить("ИзменяемаяРазмерность", Истина);
		
	ИначеЕсли УсловныйКодПоказателя = "Р2Стр001" Тогда
		Результат.Вставить("Имя", "П000020000101");
		Результат.Вставить("Представление", НСтр("ru='Код вида имущества (строка 001%1 раздела 2)'"));
		
	ИначеЕсли УсловныйКодПоказателя = "Р2Стр010" Тогда
		Результат.Вставить("Имя", "П000020001001");
		Результат.Вставить("Представление", НСтр("ru='Код по ОКТМО (строка 010%1 раздела 2)'"));
		
	ИначеЕсли УсловныйКодПоказателя = "Р2Стр020Гр3" Тогда
		Результат.Вставить("Имя", "П000020002003");
		Результат.Вставить("Представление", НСтр("ru='Остаточная стоимость основных средств, признаваемых объектом налогообложения по состоянию на 01.01 (строка 020 графа 3%1 раздела 2)'"));
		Результат.Вставить("ИзменяемаяРазмерность", Истина);
		
	ИначеЕсли УсловныйКодПоказателя = "Р2Стр030Гр3" Тогда
		Результат.Вставить("Имя", "П000020003003");
		Результат.Вставить("Представление", НСтр("ru='Остаточная стоимость основных средств, признаваемых объектом налогообложения по состоянию на 01.02 (строка 030 графа 3%1 раздела 2)'"));
		Результат.Вставить("ИзменяемаяРазмерность", Истина);
		
	ИначеЕсли УсловныйКодПоказателя = "Р2Стр040Гр3" Тогда
		Результат.Вставить("Имя", "П000020004003");
		Результат.Вставить("Представление", НСтр("ru='Остаточная стоимость основных средств, признаваемых объектом налогообложения по состоянию на 01.03 (строка 040 графа 3%1 раздела 2)'"));
		Результат.Вставить("ИзменяемаяРазмерность", Истина);
		
	ИначеЕсли УсловныйКодПоказателя = "Р2Стр050Гр3" Тогда
		Результат.Вставить("Имя", "П000020005003");
		Результат.Вставить("Представление", НСтр("ru='Остаточная стоимость основных средств, признаваемых объектом налогообложения по состоянию на 01.04 (строка 050 графа 3%1 раздела 2)'"));
		Результат.Вставить("ИзменяемаяРазмерность", Истина);
		
	ИначеЕсли УсловныйКодПоказателя = "Р2Стр060Гр3" Тогда
		Результат.Вставить("Имя", "П000020006003");
		Результат.Вставить("Представление", НСтр("ru='Остаточная стоимость основных средств, признаваемых объектом налогообложения по состоянию на 01.05 (строка 060 графа 3%1 раздела 2)'"));
		Результат.Вставить("ИзменяемаяРазмерность", Истина);
		
	ИначеЕсли УсловныйКодПоказателя = "Р2Стр070Гр3" Тогда
		Результат.Вставить("Имя", "П000020007003");
		Результат.Вставить("Представление", НСтр("ru='Остаточная стоимость основных средств, признаваемых объектом налогообложения по состоянию на 01.06 (строка 070 графа 3%1 раздела 2)'"));
		Результат.Вставить("ИзменяемаяРазмерность", Истина);
		
	ИначеЕсли УсловныйКодПоказателя = "Р2Стр080Гр3" Тогда
		Результат.Вставить("Имя", "П000020008003");
		Результат.Вставить("Представление", НСтр("ru='Остаточная стоимость основных средств, признаваемых объектом налогообложения по состоянию на 01.07 (строка 080 графа 3%1 раздела 2)'"));
		Результат.Вставить("ИзменяемаяРазмерность", Истина);
		
	ИначеЕсли УсловныйКодПоказателя = "Р2Стр090Гр3" Тогда
		Результат.Вставить("Имя", "П000020009003");
		Результат.Вставить("Представление", НСтр("ru='Остаточная стоимость основных средств, признаваемых объектом налогообложения по состоянию на 01.08 (строка 090 графа 3%1 раздела 2)'"));
		Результат.Вставить("ИзменяемаяРазмерность", Истина);
		
	ИначеЕсли УсловныйКодПоказателя = "Р2Стр100Гр3" Тогда
		Результат.Вставить("Имя", "П000020010003");
		Результат.Вставить("Представление", НСтр("ru='Остаточная стоимость основных средств, признаваемых объектом налогообложения по состоянию на 01.09 (строка 100 графа 3%1 раздела 2)'"));
		Результат.Вставить("ИзменяемаяРазмерность", Истина);
		
	ИначеЕсли УсловныйКодПоказателя = "Р2Стр110Гр3" Тогда
		Результат.Вставить("Имя", "П000020011003");
		Результат.Вставить("Представление", НСтр("ru='Остаточная стоимость основных средств, признаваемых объектом налогообложения по состоянию на 01.10 (строка 110 графа 3%1 раздела 2)'"));
		Результат.Вставить("ИзменяемаяРазмерность", Истина);
		
	ИначеЕсли УсловныйКодПоказателя = "Р2Стр020Гр4" Тогда
		Результат.Вставить("Имя", "П000020002004");
		Результат.Вставить("Представление", НСтр("ru='Остаточная стоимость льготируемого имущества по состоянию на 01.01 (строка 020 графа 4%1 раздела 2)'"));
		Результат.Вставить("ИзменяемаяРазмерность", Истина);
		
	ИначеЕсли УсловныйКодПоказателя = "Р2Стр030Гр4" Тогда
		Результат.Вставить("Имя", "П000020003004");
		Результат.Вставить("Представление", НСтр("ru='Остаточная стоимость льготируемого имущества по состоянию на 01.02 (строка 030 графа 4%1 раздела 2)'"));
		Результат.Вставить("ИзменяемаяРазмерность", Истина);
		
	ИначеЕсли УсловныйКодПоказателя = "Р2Стр040Гр4" Тогда
		Результат.Вставить("Имя", "П000020004004");
		Результат.Вставить("Представление", НСтр("ru='Остаточная стоимость льготируемого имущества по состоянию на 01.03 (строка 040 графа 4%1 раздела 2)'"));
		Результат.Вставить("ИзменяемаяРазмерность", Истина);
		
	ИначеЕсли УсловныйКодПоказателя = "Р2Стр050Гр4" Тогда
		Результат.Вставить("Имя", "П000020005004");
		Результат.Вставить("Представление", НСтр("ru='Остаточная стоимость льготируемого имущества по состоянию на 01.04 (строка 050 графа 4%1 раздела 2)'"));
		Результат.Вставить("ИзменяемаяРазмерность", Истина);
		
	ИначеЕсли УсловныйКодПоказателя = "Р2Стр060Гр4" Тогда
		Результат.Вставить("Имя", "П000020006004");
		Результат.Вставить("Представление", НСтр("ru='Остаточная стоимость льготируемого имущества по состоянию на 01.05 (строка 060 графа 4%1 раздела 2)'"));
		Результат.Вставить("ИзменяемаяРазмерность", Истина);
		
	ИначеЕсли УсловныйКодПоказателя = "Р2Стр070Гр4" Тогда
		Результат.Вставить("Имя", "П000020007004");
		Результат.Вставить("Представление", НСтр("ru='Остаточная стоимость льготируемого имущества по состоянию на 01.06 (строка 070 графа 4%1 раздела 2)'"));
		Результат.Вставить("ИзменяемаяРазмерность", Истина);
		
	ИначеЕсли УсловныйКодПоказателя = "Р2Стр080Гр4" Тогда
		Результат.Вставить("Имя", "П000020008004");
		Результат.Вставить("Представление", НСтр("ru='Остаточная стоимость льготируемого имущества по состоянию на 01.07 (строка 080 графа 4%1 раздела 2)'"));
		Результат.Вставить("ИзменяемаяРазмерность", Истина);
		
	ИначеЕсли УсловныйКодПоказателя = "Р2Стр090Гр4" Тогда
		Результат.Вставить("Имя", "П000020009004");
		Результат.Вставить("Представление", НСтр("ru='Остаточная стоимость льготируемого имущества по состоянию на 01.08 (строка 090 графа 4%1 раздела 2)'"));
		Результат.Вставить("ИзменяемаяРазмерность", Истина);
		
	ИначеЕсли УсловныйКодПоказателя = "Р2Стр100Гр4" Тогда
		Результат.Вставить("Имя", "П000020010004");
		Результат.Вставить("Представление", НСтр("ru='Остаточная стоимость льготируемого имущества по состоянию на 01.09 (строка 100 графа 4%1 раздела 2)'"));
		Результат.Вставить("ИзменяемаяРазмерность", Истина);
		
	ИначеЕсли УсловныйКодПоказателя = "Р2Стр110Гр4" Тогда
		Результат.Вставить("Имя", "П000020011004");
		Результат.Вставить("Представление", НСтр("ru='Остаточная стоимость льготируемого имущества по состоянию на 01.10 (строка 110 графа 4%1 раздела 2)'"));
		Результат.Вставить("ИзменяемаяРазмерность", Истина);
		
	ИначеЕсли УсловныйКодПоказателя = "Р2Стр120" Тогда
		Результат.Вставить("Имя", "П000020012003");
		Результат.Вставить("Представление", НСтр("ru='Средняя стоимость имущества за отчетный период (строка 120%1 раздела 2)'"));
		Результат.Вставить("ИзменяемаяРазмерность", Истина);
		
	ИначеЕсли УсловныйКодПоказателя = "Р2Стр130" Тогда
		Результат.Вставить("Имя", "П000020013003_КодЛьготы");
		Результат.Вставить("Представление", НСтр("ru='Код налоговой льготы (строка 130%1 раздела 2)'"));
		
	ИначеЕсли УсловныйКодПоказателя = "Р2Стр140" Тогда
		Результат.Вставить("Имя", "П000020014003");
		Результат.Вставить("Представление", НСтр("ru='Средняя стоимость необлагаемого налогом имущества за отчетный период (строка 140%1 раздела 2)'"));
		Результат.Вставить("ИзменяемаяРазмерность", Истина);
		
	ИначеЕсли УсловныйКодПоказателя = "Р2Стр150ч" Тогда
		Результат.Вставить("Имя", "П000020015003_Числ");
		Результат.Вставить("Представление", НСтр("ru='Доля балансовой стоимости объекта недвижимого имущества на территории соответствующего субъекта Российской Федерации (числитель) (строка 150%1 раздела 2)'"));
		
	ИначеЕсли УсловныйКодПоказателя = "Р2Стр150з" Тогда
		Результат.Вставить("Имя", "П000020015003_Знам");
		Результат.Вставить("Представление", НСтр("ru='Доля балансовой стоимости объекта недвижимого имущества на территории соответствующего субъекта Российской Федерации (знаменатель) (строка 150%1 раздела 2)'"));
		
	ИначеЕсли УсловныйКодПоказателя = "Р2Стр160" Тогда
		Результат.Вставить("Имя", "П000020016003_КодЛьготы");
		Результат.Вставить("Представление", НСтр("ru='Код налоговой льготы (установленной в виде понижения налоговой ставки) (строка 160%1 раздела 2)'"));
		
	ИначеЕсли УсловныйКодПоказателя = "Р2Стр170" Тогда
		Результат.Вставить("Имя", "П000020017003");
		Результат.Вставить("Представление", НСтр("ru='Налоговая ставка (%) (строка 170%1 раздела 2)'"));
		
	ИначеЕсли УсловныйКодПоказателя = "Р2Стр180" Тогда
		Результат.Вставить("Имя", "П000020018003");
		Результат.Вставить("Представление", НСтр("ru='Сумма авансового платежа (строка 180%1 раздела 2)'"));
		Результат.Вставить("ИзменяемаяРазмерность", Истина);
		
	ИначеЕсли УсловныйКодПоказателя = "Р2Стр190" Тогда
		Результат.Вставить("Имя", "П000020019003_КодЛьготы");
		Результат.Вставить("Представление", НСтр("ru='Код налоговой льготы (в виде уменьшения суммы налога, подлежащей уплате в бюджет) (строка 190%1 раздела 2)'"));
		
	ИначеЕсли УсловныйКодПоказателя = "Р2Стр200" Тогда
		Результат.Вставить("Имя", "П000020020003");
		Результат.Вставить("Представление", НСтр("ru='Сумма льготы по авансовому платежу, уменьшающей сумму авансового платежа по налогу, подлежащую уплате в бюджет (строка 200%1 раздела 2)'"));
		Результат.Вставить("ИзменяемаяРазмерность", Истина);
		
	ИначеЕсли УсловныйКодПоказателя = "Р3Стр010" Тогда
		Результат.Вставить("Имя", "П000030001001");
		Результат.Вставить("Представление", НСтр("ru='Код по ОКТМО (строка 010%1 раздела 3)'"));
		
	ИначеЕсли УсловныйКодПоказателя = "Р3Стр020" Тогда
		Результат.Вставить("Имя", "П000030002003");
		Результат.Вставить("Представление", НСтр("ru='Кадастровая стоимость на 1 января налогового периода (строка 020%1 раздела 3)'"));
		Результат.Вставить("ИзменяемаяРазмерность", Истина);
		
	ИначеЕсли УсловныйКодПоказателя = "Р3Стр030" Тогда
		Результат.Вставить("Имя", "П000030003003");
		Результат.Вставить("Представление", НСтр("ru='в том числе необлагаемая налогом кадастровая стоимость (строка 030%1 раздела 3)'"));
		Результат.Вставить("ИзменяемаяРазмерность", Истина);
		
	ИначеЕсли УсловныйКодПоказателя = "Р3Стр050ч" Тогда
		Результат.Вставить("Имя", "П000030005003_Числ");
		Результат.Вставить("Представление", НСтр("ru='Доля стоимости объекта недвижимого имущества на территории субъекта Российской Федерации (числитель) (строка 050%1 раздела 3)'"));
		
	ИначеЕсли УсловныйКодПоказателя = "Р3Стр050з" Тогда
		Результат.Вставить("Имя", "П000030005003_Знам");
		Результат.Вставить("Представление", НСтр("ru='Доля стоимости объекта недвижимого имущества на территории субъекта Российской Федерации (знаменатель) (строка 050%1 раздела 3)'"));
		
	ИначеЕсли УсловныйКодПоказателя = "Р3Стр070" Тогда
		Результат.Вставить("Имя", "П000030007003");
		Результат.Вставить("Представление", НСтр("ru='Налоговая ставка (%) (строка 070%1 раздела 3)'"));
		
	ИначеЕсли УсловныйКодПоказателя = "Р3Стр080ч" Тогда
		Результат.Вставить("Имя", "П000030008003_Числ");
		Результат.Вставить("Представление", НСтр("ru='Коэффициент К (числитель) (строка 080%1 раздела 3)'"));
		
	ИначеЕсли УсловныйКодПоказателя = "Р3Стр080з" Тогда
		Результат.Вставить("Имя", "П000030008003_Знам");
		Результат.Вставить("Представление", НСтр("ru='Коэффициент К (знаменатель) (строка 080%1 раздела 3)'"));
		
	ИначеЕсли УсловныйКодПоказателя = "Р3Стр090" Тогда
		Результат.Вставить("Имя", "П000030009003");
		Результат.Вставить("Представление", НСтр("ru='Сумма авансового платежа по налогу (строка 090%1 раздела 3)'"));
		Результат.Вставить("ИзменяемаяРазмерность", Истина);
		
	ИначеЕсли УсловныйКодПоказателя = "Р3Стр100" Тогда
		Результат.Вставить("Имя", "П000030010003_КодЛьготы");
		Результат.Вставить("Представление", НСтр("ru='Код налоговой льготы (в виде уменьшения суммы налога, подлежащей уплате в бюджет) (строка 100%1 раздела 3)'"));
		
	ИначеЕсли УсловныйКодПоказателя = "Р3Стр110" Тогда
		Результат.Вставить("Имя", "П000030011003");
		Результат.Вставить("Представление", НСтр("ru='Сумма льготы по авансовому платежу, уменьшающей сумму авансового платежа по налогу, подлежащую уплате в бюджет (строка 110%1 раздела 3)'"));
		Результат.Вставить("ИзменяемаяРазмерность", Истина);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ВставитьЗначениеПоказателя(ИсточникДанных, Показатель)
	
	Если ИсточникДанных.Свойство(Показатель.Имя) Тогда
		ЗначениеПоказателя = ИсточникДанных[Показатель.Имя];
	Иначе
		ЗначениеПоказателя = 0;
	КонецЕсли;
	
	Если Показатель.Свойство("ИзменяемаяРазмерность") И Показатель.ИзменяемаяРазмерность = Истина Тогда
		ЗначениеПоказателя = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, ЗначениеПоказателя);
	КонецЕсли;
	
	Если Показатель.Свойство("Формат") И ЗначениеЗаполнено(Показатель.Формат) Тогда
		ПредставлениеЗначения = Формат(ЗначениеПоказателя, Показатель.Формат);
	ИначеЕсли ТипЗнч(ЗначениеПоказателя) = Тип("Строка") Тогда
		ПредставлениеЗначения = ЗначениеПоказателя;
	ИначеЕсли ТипЗнч(ЗначениеПоказателя) = Тип("Дата") Тогда
		ПредставлениеЗначения = Формат(ЗначениеПоказателя, "ДЛФ=D");
	ИначеЕсли ТипЗнч(ЗначениеПоказателя) = Тип("Число") Тогда
		ПредставлениеЗначения = Формат(ЗначениеПоказателя, "ЧРД=,; ЧН=");
	Иначе
		ПредставлениеЗначения = Строка(ЗначениеПоказателя);
	КонецЕсли;
	
	Показатель.Вставить("Значение", ЗначениеПоказателя);
	Показатель.Вставить("ЗначениеСтр", ПредставлениеЗначения);
	
КонецПроцедуры

&НаСервере
Процедура ВставитьЗначениеМногострочногоПоказателя(ИсточникДанных, Показатель, НомерСтроки)
	
	НомерСтрокиСтр = ЧислоСтрЧГ0(НомерСтроки);
	ИмяПоказателя = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Показатель.Имя, НомерСтрокиСтр);
	
	Если ИсточникДанных.Свойство(ИмяПоказателя) Тогда
		ЗначениеПоказателя = ИсточникДанных[ИмяПоказателя];
	Иначе
		ЗначениеПоказателя = 0;
	КонецЕсли;
	
	Если Показатель.Свойство("ИзменяемаяРазмерность") И Показатель.ИзменяемаяРазмерность = Истина Тогда
		ЗначениеПоказателя = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, ЗначениеПоказателя);
	КонецЕсли;
	
	Если Показатель.Свойство("Формат") И ЗначениеЗаполнено(Показатель.Формат) Тогда
		ПредставлениеЗначения = Формат(ЗначениеПоказателя, Показатель.Формат);
	ИначеЕсли ТипЗнч(ЗначениеПоказателя) = Тип("Строка") Тогда
		ПредставлениеЗначения = ЗначениеПоказателя;
	ИначеЕсли ТипЗнч(ЗначениеПоказателя) = Тип("Дата") Тогда
		ПредставлениеЗначения = Формат(ЗначениеПоказателя, "ДЛФ=D");
	ИначеЕсли ТипЗнч(ЗначениеПоказателя) = Тип("Число") Тогда
		ПредставлениеЗначения = Формат(ЗначениеПоказателя, "ЧРД=,; ЧН=");
	Иначе
		ПредставлениеЗначения = Строка(ЗначениеПоказателя);
	КонецЕсли;
	
	Показатель.Вставить("Значение", ЗначениеПоказателя);
	Показатель.Вставить("ЗначениеСтр", ПредставлениеЗначения);
	Показатель.Вставить("НомерСтроки", НомерСтрокиСтр);
	
КонецПроцедуры

&НаСервере
Процедура ЗарегистрироватьФормулуДляРасшифровки(ОписаниеКС);
	
	РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(СписокРасшифровкиФормулы, ОписаниеКС, , СчетчикФормулДляРасшифровок);
	
КонецПроцедуры

&НаСервере
Процедура ВнестиПоказательВРасшифровку(Показатель, ИмяСтраницы, НомерСтраницы = Неопределено)
	
	НомерСтраницыДляЗамены = ?(ЗначениеЗаполнено(НомерСтраницы), НомерСтраницы, "");
	ПредставлениеПоказателя = СтрокаСНомеромСтраницы(Показатель.Представление, НомерСтраницыДляЗамены);
	
	ЗначениеПоказателя = ?(ТипЗнч(Показатель.Значение) = Тип ("Дата"), Показатель.ЗначениеСтр, Показатель.Значение);
	
	Если Показатель.Свойство("НомерСтроки") Тогда
		ИмяПоказателя = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Показатель.Имя, Показатель.НомерСтроки);
	Иначе
		ИмяПоказателя = Показатель.Имя;
	КонецЕсли;
	
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(
		СписокРасшифровкиПоказателей,
		ИмяПоказателя,
		ПредставлениеПоказателя,
		ЗначениеПоказателя,
		"",
		СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка,
		ИмяСтраницы,
		Неопределено,
		НомерСтраницы,
		СчетчикФормулДляРасшифровок);
	
КонецПроцедуры

&НаСервере
Функция СтрокаСНомеромСтраницы (ИсходнаяСтрока, НомерСтраницы)
	
	ТекстСтраница = Нстр("ru='страница №'");
	
	Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ИсходнаяСтрока, ", " + ТекстСтраница + " " + НомерСтраницы + ")");
	
КонецФункции

&НаСервере
Процедура ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, ЭтоОшибка, Описание = Неопределено, Нарушение = Неопределено)
	
	ТекстовоеПредставлениеФормулы = ?(ПустаяСтрока(ТекстФормулы), "", ТекстФормулы + ". ") + ОписаниеКС;
	СтруктураОшибок.Вставить("Описание" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), Описание));
	СтруктураОшибок.Вставить("Нарушение" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), Нарушение));
	СтруктураОшибок.Вставить("Расшифровка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), Расшифровка));
	СтруктураОшибок.Вставить("ЭтоОшибка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), ЭтоОшибка);
	СтруктураОшибок.Вставить("ТекстовоеПредставлениеФормулы" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), ТекстовоеПредставлениеФормулы));
	
КонецПроцедуры

&НаСервере
Функция СтрокуВЧисло(ПреобразуемаяСтрока)
	Перем Результат;
	Результат = ПреобразуемаяСтрока;
	
	Если ПреобразуемаяСтрока = NULL ИЛИ ПреобразуемаяСтрока = "" Тогда
		Результат = 0;
		
	ИначеЕсли ТипЗнч(ПреобразуемаяСтрока) = Тип("Строка") Тогда
		Результат = Число(ПреобразуемаяСтрока);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ЧислоВСтрокуЧГ0(ПреобразуемоеЧисло)
	
	Возврат Формат(ПреобразуемоеЧисло, "ЧН=; ЧГ=0");
	
КонецФункции

&НаСервере
Функция ЧислоСтрЧГ0(ПреобразуемоеЧисло)
	
	Возврат Формат(ПреобразуемоеЧисло, "ЧН=; ЧГ=0");
	
КонецФункции

&НаКлиенте
Процедура ТабличныйДокументПриАктивизацииОбласти(Элемент)
	Элементы.ТабличныйДокументКонтекстноеМенюУдалитьСтроку.Доступность = Ложь;
	Элементы.ТабличныйДокументКонтекстноеМенюДобавитьСтроку.Доступность = Ложь;
	
	ИмяГруппы = РазделТекущейОбласти(ЭтаФорма, Элемент.ТекущаяОбласть);
	
	Если ЗначениеЗаполнено(ИмяГруппы) Тогда 
		ТестовоеИмя = ИмяГруппы + "1003_" + Строка(мСтруктураИсхКолвоСтрокРазделов[ИмяГруппы] + 1);
		Элементы.ТабличныйДокументКонтекстноеМенюДобавитьСтроку.Доступность = Истина;
		Если СтрЧислоВхождений(Элемент.ТекущаяОбласть.Имя, "ДобавитьСтроку") = 0 И
			ТабличныйДокумент.Области.Найти(ТестовоеИмя) <> Неопределено Тогда
			Элементы.ТабличныйДокументКонтекстноеМенюУдалитьСтроку.Доступность = Истина;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура Подключаемый_ОткрытьПрисоединенныеФайлы(Команда)
	
	РегламентированнаяОтчетностьКлиент.СохранитьОтчетИОткрытьФормуПрисоединенныеФайлы(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийПриИзменении(Элемент)
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ИмяОтчета(ЭтаФормаИмя)
	Форма_Имя = СтрЗаменить(ЭтаФормаИмя, "Внешний", "");
	Возврат Сред(Лев(Форма_Имя, СтрНайти(Форма_Имя, ".Форма.") - 1), 7);
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИмяФормыОтчета(ЭтаФормаИмя)
	Возврат Сред(ЭтаФормаИмя, СтрНайти(ЭтаФормаИмя, ".Форма.") + 7);
КонецФункции