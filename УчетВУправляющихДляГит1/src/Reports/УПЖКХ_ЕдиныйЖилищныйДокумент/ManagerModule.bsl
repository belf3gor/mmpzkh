#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОсновныеПроцедурыИФункции

// Формирует отчет.
//
// Параметры:
//  ДокументРезультат - табличный документ формы.
//
Процедура СформироватьОтчет(ПараметрыОтчета, АдресХранилища) Экспорт
	
	Макет = Отчеты.УПЖКХ_ЕдиныйЖилищныйДокумент.ПолучитьМакет("ЕЖД");
	
	ДокументРезультат = Новый ТабличныйДокумент;
	
	ВывестиШапку(ПараметрыОтчета, ДокументРезультат, Макет);
	ВывестиСобственников(ПараметрыОтчета, ДокументРезультат, Макет);
	ВывестиДанныеКомнат(ПараметрыОтчета, ДокументРезультат, Макет);
	ВывестиДанныеБлагоустройства(ПараметрыОтчета, ДокументРезультат, Макет);
	ВывестиЖильцовНаЖилплощади(ПараметрыОтчета, ДокументРезультат, Макет);
	ВывестиДанныеСоцПоддержки(ПараметрыОтчета, ДокументРезультат, Макет);
	ВывестиДанныеОСчетчиках(ПараметрыОтчета, ДокументРезультат, Макет);
	ВывестиДолги(ПараметрыОтчета, ДокументРезультат, Макет);
	ВывестиДанныеЖильцовКоммуналки(ПараметрыОтчета, ДокументРезультат, Макет);
	
	ОбластьПодвал                      = Макет.ПолучитьОбласть("Подвал");
	ОбластьПодвал.Параметры.Дата60Дней = Формат(ПараметрыОтчета.Дата + 60*60*24*60, "ДЛФ=DD");
	ДокументРезультат.Вывести(ОбластьПодвал);
	
	ПоместитьВоВременноеХранилище(ДокументРезультат, АдресХранилища);
	
КонецПроцедуры

#КонецОбласти 

//////////////////////////////////////////////////////////////////////////////////
// ФОРМИРОВАНИЕ СЕКЦИЙ ПЕЧАТНОЙ ФОРМЫ

#Область ФормированиеСекцийПечатнойФормы

// Заполняет шапку печатной формы.
//
// Параметры:
//  ДокументРезультат - табличный документ формы.
//
Процедура ВывестиШапку(ПараметрыОтчета, ДокументРезультат, Макет)
	
	ОтветственныйСобственник = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьОтветственногоСобственникаЛицевогоСчета(ПараметрыОтчета.ЛицевойСчет, ПараметрыОтчета.Дата);
	ПолученныеСведенияОСобственниках = СведенияОСобственниках(ПараметрыОтчета);
	ДанныеЖильца             = ПолученныеСведенияОСобственниках.Найти(ПараметрыОтчета.Проживающий, "Жилец");
	ДанныеВладельца          = ПолученныеСведенияОСобственниках.Найти(ОтветственныйСобственник, "Жилец");
	
	// Получаем данные паспорта заявителя.
	Если ДанныеЖильца = Неопределено Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДокументыФизическихЛицСрезПоследних.ФизЛицо,
		|	ДокументыФизическихЛицСрезПоследних.ВидДокумента КАК Вид,
		|	ДокументыФизическихЛицСрезПоследних.Серия КАК Серия,
		|	ДокументыФизическихЛицСрезПоследних.Номер КАК Номер,
		|	ДокументыФизическихЛицСрезПоследних.ДатаВыдачи КАК ДатаВыдачи,
		|	ДокументыФизическихЛицСрезПоследних.КемВыдан КАК Выдан,
		|	ДокументыФизическихЛицСрезПоследних.ПричинаИзменения
		|ИЗ
		|	РегистрСведений.ДокументыФизическихЛиц.СрезПоследних(
		|			,
		|			ФизЛицо = &Проживающий
		|				И ДатаВыдачи <= &ДатаОтчета) КАК ДокументыФизическихЛицСрезПоследних";
		
		Запрос.УстановитьПараметр("ДатаОтчета",  ПараметрыОтчета.Дата);
		Запрос.УстановитьПараметр("Проживающий", ПараметрыОтчета.Проживающий.ФизЛицо);
		
		ПаспортныеДанныеТаблица   = Запрос.Выполнить().Выгрузить();
		ПаспортныеДанныеСтруктура = Новый Структура;
		
		КоличествоЗаписей = ПаспортныеДанныеТаблица.Количество();
		Если КоличествоЗаписей > 0 Тогда
			СтрокаТаблицы = ПаспортныеДанныеТаблица[0];
		КонецЕсли;
		
		// Заполняем структуру.
		Для Каждого Колонка Из ПаспортныеДанныеТаблица.Колонки Цикл
			ТекущееЗначение = ?(КоличествоЗаписей > 0, СтрокаТаблицы[Колонка.Имя], "");
			ПаспортныеДанныеСтруктура.Вставить(Колонка.Имя, ТекущееЗначение);
		КонецЦикла;
		
		ВидДокумента            = ПаспортныеДанныеСтруктура.Вид;
		ДатаВыдачиДокумента     = ПаспортныеДанныеСтруктура.ДатаВыдачи;
		ПричинаИзменения        = ПаспортныеДанныеСтруктура.ПричинаИзменения;
		ПаспортныеДанныеСтрокой = ПаспортныеДанныеФорматнаяСтрока(ПаспортныеДанныеСтруктура);
		
	Иначе
		
		ВидДокумента            = ДанныеЖильца.Вид;
		ДатаВыдачиДокумента     = ДанныеЖильца.ДатаВыдачи;
		ПричинаИзменения        = ДанныеЖильца.ПричинаИзменения;
		ПаспортныеДанныеСтрокой = ПаспортныеДанныеФорматнаяСтрока(ДанныеЖильца);
	КонецЕсли;
	
	// Область Заголовок.
	ОбластьМакетаЗаголовок                          = Макет.ПолучитьОбласть("Заголовок");
	ОбластьМакетаЗаголовок.Параметры.Организация    = ПараметрыОтчета.Организация.НаименованиеПолное;
	ОбластьМакетаЗаголовок.Параметры.НомерДокумента = ПараметрыОтчета.НомерСправки;
	Если ПараметрыОтчета.Дата_Период Тогда
		ОбластьМакетаЗаголовок.Параметры.Дата = "По состоянию на " + Формат(ПараметрыОтчета.Дата, "ДЛФ=DD");
	Иначе
		ОбластьМакетаЗаголовок.Параметры.Дата = "За период с " + Формат(ПараметрыОтчета.Дата,   "ДЛФ=DD")
											  + " по "         + Формат(ПараметрыОтчета.ДатаДо, "ДЛФ=DD");
	КонецЕсли;
	
	ОбластьМакетаЗаголовок.Параметры.ФИО   = ПараметрыОтчета.Проживающий.Наименование;// + ?(СокрЛП( Проживающий.Телефон)="","",", т." + Проживающий.Телефон);
	ОбластьМакетаЗаголовок.Параметры.Адрес = АдресКвартиры(ПараметрыОтчета.Проживающий);
	ДокументРезультат.Вывести(ОбластьМакетаЗаголовок);
	
	// Область ПаспортныеДанные.
	Если ПараметрыОтчета.ПаспортныеДанные Тогда
		ОбластьМакетаПаспортныеДанные                            = Макет.ПолучитьОбласть("ПаспортныеДанные");
		ОбластьМакетаПаспортныеДанные.Параметры.ПаспортныеДанные = ПаспортныеДанныеСтрокой;
		ДокументРезультат.Вывести(ОбластьМакетаПаспортныеДанные);
	КонецЕсли;
	
	// Область ПредыдущийПаспорт.
	Если ПараметрыОтчета.ПредыдущийПаспорт Тогда
		
		ПредыдущийПаспортФизЛица          = ПаспортныеДанныеПредыдущегоПаспорта(ПараметрыОтчета.Проживающий.ФизЛицо,
																			ВидДокумента,
																			ДатаВыдачиДокумента);
		ПаспортныеДанныеСтрокойПредыдущий = ПаспортныеДанныеФорматнаяСтрока(ПредыдущийПаспортФизЛица);
		
		ОбластьМакетаПредыдущийПаспорт                             = Макет.ПолучитьОбласть("ПредыдущийПаспорт");
		ОбластьМакетаПредыдущийПаспорт.Параметры.ПредыдущийПаспорт = ПаспортныеДанныеСтрокойПредыдущий;
		ДокументРезультат.Вывести(ОбластьМакетаПредыдущийПаспорт);
	КонецЕсли;
	
	// Область ПричинаЗаменыПаспорта.
	Если ПараметрыОтчета.ПричинаЗаменыПаспорта Тогда
		ОбластьМакетаПричинаЗаменыПаспорта                                 = Макет.ПолучитьОбласть("ПричинаЗаменыПаспорта");
		ОбластьМакетаПричинаЗаменыПаспорта.Параметры.ПричинаЗаменыПаспорта = ПричинаИзменения;
		ДокументРезультат.Вывести(ОбластьМакетаПричинаЗаменыПаспорта);
	КонецЕсли;
	
	// Область Регистрация.
	ОбластьМакетаРегистрация = Макет.ПолучитьОбласть("Регистрация");
	
	Если НЕ ДанныеЖильца = Неопределено Тогда
		
		ОбластьМакетаРегистрация.Параметры.Регистрация = ?(ДанныеЖильца.Зарегистрирован, "Заявитель зарегистрирован по месту жительства: ",
																	 "Заявитель является собственником жилого помещения без регистрации по адресу: ");
	КонецЕсли;
	
	ОбластьМакетаРегистрация.Параметры.АдресПомещения = АдресКвартиры(ПараметрыОтчета.Проживающий);
	ДокументРезультат.Вывести(ОбластьМакетаРегистрация);
	
	// Область ЗаголовокПодвал.
	ОбластьМакетаЗаголовокПодвал = Макет.ПолучитьОбласть("ЗаголовокПодвал");
	
	ТелефонУК = УПЖКХ_ТиповыеМетодыСервер.ПолучитьКонтактнуюИнформацияОбъекта(ПараметрыОтчета.Организация, Справочники.ВидыКонтактнойИнформации.ТелефонОрганизации);
	АдресУК   = УПЖКХ_ТиповыеМетодыСервер.ПолучитьКонтактнуюИнформацияОбъекта(ПараметрыОтчета.Организация, Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресОрганизации);
	
	ТаблицаСДаннымиОСобственностиНаПомещение = ПолучитьДанныеОСобственностиПомещения(ПараметрыОтчета.Проживающий.Владелец.Адрес, ?(ПараметрыОтчета.Дата_Период = 1, ПараметрыОтчета.Дата, ПараметрыОтчета.ДатаДо));
	Если ТаблицаСДаннымиОСобственностиНаПомещение.Количество() > 0 Тогда
		ЧастнаяСобственностьНаПомещение = ТаблицаСДаннымиОСобственностиНаПомещение[0].ВидСобственности = Перечисления.УПЖКХ_ВидыСобственности.Частная;
		ОбластьМакетаЗаголовокПодвал.Параметры.ВидЗаселения = ?(ЧастнаяСобственностьНаПомещение, "частная собственность", "социальный наем");
	КонецЕсли;
	
	ОбластьМакетаЗаголовокПодвал.Параметры.ОрганизацияУК  = ПараметрыОтчета.Организация.НаименованиеПолное + ?(СокрЛП(АдресУК)="","",", адрес: " + АдресУК) + ?(СокрЛП(ТелефонУК)="","",", тел." + ТелефонУК);
	
	Если Не ДанныеЖильца = Неопределено Тогда
		ПлощадиПомещения = ПлощадиПомещения(ПараметрыОтчета, ПараметрыОтчета.Дата);
		Если ПлощадиПомещения.Количество() > 0 Тогда
			СостояниеИзТаблицы = ПлощадиПомещения[0].Состояние;
			ЗначениеСостояния  = ?(ЗначениеЗаполнено(СостояниеИзТаблицы), СостояниеИзТаблицы, "");
			ОбластьМакетаЗаголовокПодвал.Параметры.ВидЗаселения = ЗначениеСостояния;
		КонецЕсли;
	КонецЕсли;
	
	ОбластьМакетаЗаголовокПодвал.Параметры.Проживающий = ОтветственныйСобственник;
	
	ДокументРезультат.Вывести(ОбластьМакетаЗаголовокПодвал);
	
КонецПроцедуры // ВывестиШапку()

// Выводит информацию о собственниках.
//
// Параметры:
//  ДокументРезультат - табличный документ формы.
//
Процедура ВывестиСобственников(ПараметрыОтчета, ДокументРезультат, Макет)
	
	// Область Собственники.
	ОбластьМакетаСобственники = Макет.ПолучитьОбласть("Собственники");
	Номер                     = 1; // номер списка нанимателей/собственников.
	СписокДокументов          = "";
	ТаблицаСобственников      = ПолучитьДанныеОСобственностиПомещения(ПараметрыОтчета.Проживающий.Владелец.Адрес, ПараметрыОтчета.Дата);
	
	КолВоСобственников = ТаблицаСобственников.Количество();
	
	Для Каждого СтрокаСобств Из ТаблицаСобственников Цикл
		
		// Определим долю собственности.
		Если СтрокаСобств.ВидСобственности = Перечисления.УПЖКХ_ВидыСобственности.Частная Тогда
			Если СтрокаСобств.ПодвидЧастнойСобственности = Перечисления.УПЖКХ_ВидыЧастнойСобственности.Индивидуальная Тогда
				ДоляСобственности = "1";
			ИначеЕсли СтрокаСобств.ПодвидЧастнойСобственности = Перечисления.УПЖКХ_ВидыЧастнойСобственности.Долевая Тогда
				Если СтрокаСобств.ДоляСобственникаЗнаменатель = 0 Тогда
					ДоляСобственности = "0";
				Иначе
					ДоляСобственности = Строка(СтрокаСобств.ДоляСобственникаЧислитель) + "/" + Строка(СтрокаСобств.ДоляСобственникаЗнаменатель);
				КонецЕсли;
			ИначеЕсли СтрокаСобств.ПодвидЧастнойСобственности = Перечисления.УПЖКХ_ВидыЧастнойСобственности.Совместная Тогда
				ДоляСобственности = "1/" + Строка(КолВоСобственников);
			Иначе 
				ДоляСобственности = "0";
			КонецЕсли;
		Иначе
			ДоляСобственности = "";
		КонецЕсли;
		
		СобственникЖилец = Строка(Номер) + ". " + СтрокаСобств.Собственник + ","
						 + Символы.Таб   + "доля в праве собственности: "  + ДоляСобственности;
		
		СписокДокументов = ПолучитьДокументСобственности(ПараметрыОтчета.Дата, ПараметрыОтчета.ЛицевойСчет, СтрокаСобств);
		
		ОбластьМакетаСобственники.Параметры.СобственникЖилец  = СобственникЖилец;
		ОбластьМакетаСобственники.Параметры.ДокументОснование = СписокДокументов;

		ДокументРезультат.Вывести(ОбластьМакетаСобственники);
		
		Номер = Число(Номер) + 1;
		
	КонецЦикла;
	
	// Область Помещение.
	ОбластьМакетаПомещение = Макет.ПолучитьОбласть("Помещение");
	ПлощадиПомещения = ПлощадиПомещения(ПараметрыОтчета, ПараметрыОтчета.Дата);
	Для Каждого СтрокаРез Из ПлощадиПомещения Цикл
		Если СтрокаРез.ВидПлощади = Справочники.УПЖКХ_ВидыПлощадей.ЖилаяПлощадь Тогда
			ЖилаяПлощадь = СтрокаРез.Площадь;
		ИначеЕсли СтрокаРез.ВидПлощади = Справочники.УПЖКХ_ВидыПлощадей.ОбщаяПлощадь Тогда
			ОбщаяПлощадь = СтрокаРез.Площадь;
		ИначеЕсли СтрокаРез.ВидПлощади = Справочники.УПЖКХ_ВидыПлощадей.Кухня Тогда
			КухняПлощадь = СтрокаРез.Площадь;
		КонецЕсли;
		ОбщаяПлощадьСУчетом = СтрокаРез.ОбщаяПлощадьСУчетом;
		ПрилегающаяПлощадь  = СтрокаРез.ПрилегающаяПлощадь;
		КатегорияКвартиры   = СтрокаРез.КатегорияКвартиры;
	КонецЦикла;
	
	КоличествоКомнат = ПараметрыОтчета.Проживающий.Владелец.Адрес.КоличествоКомнат;
	
	ОбластьМакетаПомещение.Параметры.Характеристика      = КатегорияКвартиры;
	ОбластьМакетаПомещение.Параметры.ОбщаяПлощадьСУчетом = ОбщаяПлощадьСУчетом;
	ОбластьМакетаПомещение.Параметры.ПрилегающиеПлощади  = ПрилегающаяПлощадь;
	ОбластьМакетаПомещение.Параметры.ЖилаяПлощадь        = ЖилаяПлощадь;
	ОбластьМакетаПомещение.Параметры.ОбщаяПлощадь        = ОбщаяПлощадь;
	ОбластьМакетаПомещение.Параметры.КухняПлощадь        = КухняПлощадь;
	ОбластьМакетаПомещение.Параметры.КоличествоКомнат    = КоличествоКомнат;
	
	СтрокаВидаСанузел = Благоустройства(ПараметрыОтчета).Найти(Справочники.КВП_ВидыБлагоустройстваОбъектов.Санузел, "ВидБлагоустройства");
	Если Не СтрокаВидаСанузел = Неопределено Тогда
		ОбластьМакетаПомещение.Параметры.Санузел = СтрокаВидаСанузел.Значение;
	КонецЕсли;
	
	ДокументРезультат.Вывести(ОбластьМакетаПомещение);
	
КонецПроцедуры

// Заполняет данные комнат.
//
// Параметры:
//  ДокументРезультат - табличный документ формы.
//
Процедура ВывестиДанныеКомнат(ПараметрыОтчета, ДокументРезультат, Макет)
	
	Выборка        = ДанныеПомещения(ПараметрыОтчета, ? (ПараметрыОтчета.Дата_Период = 1, ПараметрыОтчета.Дата, ПараметрыОтчета.ДатаДо)).Выбрать();
	ОбластьКомната = Макет.ПолучитьОбласть("Комната");
	
	Пока Выборка.Следующий() Цикл
		ОбластьКомната.Параметры.Заполнить(Выборка);
		ДокументРезультат.Вывести(ОбластьКомната);
	КонецЦикла;
	
КонецПроцедуры // ВывестиДанныеКомнат()

// Заполняет область Благоустройство.
//
// Параметры:
//  ДокументРезультат - табличный документ формы.
//
Процедура ВывестиДанныеБлагоустройства(ПараметрыОтчета, ДокументРезультат, Макет)
	
	ОбластьМакетаБлагоустройство                        = Макет.ПолучитьОбласть("Благоустройство");	
	ОбластьМакетаБлагоустройство.Параметры.Этаж         = ПараметрыОтчета.Проживающий.Владелец.Адрес.Этаж;
	ОбластьМакетаБлагоустройство.Параметры.Этажэй       = ПараметрыОтчета.Проживающий.Владелец.Адрес.Владелец.Этажей;
	ОбластьМакетаБлагоустройство.Параметры.Стены        = ПараметрыОтчета.Проживающий.Владелец.Адрес.Владелец.МатериалСтен;
	ОбластьМакетаБлагоустройство.Параметры.ГодПостройки = ПараметрыОтчета.Проживающий.Владелец.Адрес.Владелец.ГодПостройки;
	ОбластьМакетаБлагоустройство.Параметры.СерияДома    = ПараметрыОтчета.Проживающий.Владелец.Адрес.Владелец.СерияДома;
	
	ТаблицаБлагоустройств = Благоустройства(ПараметрыОтчета);
	БлагоустройствоСтр = "";
	Для Каждого ТекСтрока Из ТаблицаБлагоустройств Цикл
		
		Если ТекСтрока.ВидБлагоустройства = Справочники.КВП_ВидыБлагоустройстваОбъектов.Лифт Тогда
			ОбластьМакетаБлагоустройство.Параметры.Лифт = ТекСтрока.Значение;
			
		ИначеЕсли ТекСтрока.ВидБлагоустройства = Справочники.КВП_ВидыБлагоустройстваОбъектов.СоответствуетСтандартамБлагоустройства Тогда
			ОбластьМакетаБлагоустройство.Параметры.Стандарты = ТекСтрока.Значение;
			
		ИначеЕсли Не ТекСтрока.ВидБлагоустройства = Справочники.КВП_ВидыБлагоустройстваОбъектов.Санузел Тогда
			БлагоустройствоСтр = БлагоустройствоСтр + ТекСтрока.ВидБлагоустройства + ": " + ТекСтрока.Значение + ";   ";
		КонецЕсли;
		
	КонецЦикла;
	ОбластьМакетаБлагоустройство.Параметры.Благоустройство = БлагоустройствоСтр;
	
	ДокументРезультат.Вывести(ОбластьМакетаБлагоустройство);
	
КонецПроцедуры // ВывестиДанныеБлагоустройства()

// Заполняет данные жильцов, проживающих на жилплощади.
//
// Параметры:
//  ДокументРезультат - табличный документ формы.
//
Процедура ВывестиЖильцовНаЖилплощади(ПараметрыОтчета, ДокументРезультат, Макет)
	
	ДатаОтчета = ? (ПараметрыОтчета.Дата_Период = 1, ПараметрыОтчета.Дата, ПараметрыОтчета.ДатаДо);
	ТаблицаРезультатаСобственность = СведенияОСобственниках(ПараметрыОтчета);
	
	Если ТаблицаРезультатаСобственность.Количество()= 0
		ИЛИ (ТаблицаРезультатаСобственность.Найти(Истина, "Зарегистрирован") = Неопределено
		   И ТаблицаРезультатаСобственность.Найти(Истина, "Проживает")       = Неопределено) Тогда
		
		ОбластьЖильцыШапка = Макет.ПолучитьОбласть("Новострой");
		ДокументРезультат.Вывести(ОбластьЖильцыШапка);
		
	Иначе
		ОбластьЖильцыШапка = Макет.ПолучитьОбласть("ЖильцыШапка");
		ДокументРезультат.Вывести(ОбластьЖильцыШапка);
		
		ОбластьМакетаЖилец = Макет.ПолучитьОбласть("Жилец");
		
		Для Каждого СтрокаРез Из ТаблицаРезультатаСобственность Цикл
			
			МестоРождения              = УПЖКХ_ТиповыеМетодыКлиентСервер.ПредставлениеМестаРождения(СтрокаРез.МестоРождения);
			СтруктураПредыдущийПаспорт = ПаспортныеДанныеПредыдущегоПаспорта(СтрокаРез.ФизЛицо,
																			 СтрокаРез.ВидДокумента,
																			 СтрокаРез.ДатаВыдачи);
			
			ОбластьМакетаЖилец.Параметры.ФИО            = СтрокаРез.жилец;
			ОбластьМакетаЖилец.Параметры.ДатаРождения   = Формат(СтрокаРез.ДатаРождения,"ДЛФ=DD"); 
			ОбластьМакетаЖилец.Параметры.МестоРождения  = МестоРождения;
			ОбластьМакетаЖилец.Параметры.Родство        = СтрокаРез.СтепеньРодства;
			ОбластьМакетаЖилец.Параметры.Паспорт        = ПаспортныеДанныеСокращенно(СтрокаРез);
			ОбластьМакетаЖилец.Параметры.ПаспортРанее   = ПаспортныеДанныеСокращенно(СтруктураПредыдущийПаспорт);
			
			// Заполняем колонку "Дата регистрации и откуда прибыл".
			Если НЕ СтрокаРез.ДатаРегистрации = Дата(1, 1, 1) Тогда
				ПрибытиеСтрокой = "Зарегистрирован: " + Формат(СтрокаРез.ДатаРегистрации,"ДФ=dd.MM.yyyy");
			Иначе
				ПрибытиеСтрокой = "";
			КонецЕсли;
 			Если ЗначениеЗаполнено(СтрокаРез.Прибытие) Тогда
				ПрибытиеСтрокой = "" + ПрибытиеСтрокой + Символы.ПС + "Прибыл: " + СтрокаРез.Прибытие;
			КонецЕсли;
			ОбластьМакетаЖилец.Параметры.Прибыл = ПрибытиеСтрокой;
			
			// Заполняем колонку "Куда и когда выбыл".
			Если Не СтрокаРез.ДатаСнятияСРегистрации = Дата(1, 1, 1)
			   И СтрокаРез.ДатаРегистрации <= СтрокаРез.ДатаСнятияСРегистрации
			   И ДатаОтчета >= СтрокаРез.ДатаСнятияСРегистрации Тогда
				
				УбытиеСтрокой = "Снятие с регистрации: " + Формат(СтрокаРез.ДатаСнятияСРегистрации,"ДЛФ=DD");
				Если ЗначениеЗаполнено(СтрокаРез.Выбытие) Тогда
					УбытиеСтрокой = УбытиеСтрокой + "Выбыл: " + СтрокаРез.Выбытие;
				КонецЕсли;
			Иначе
				УбытиеСтрокой = "";
			КонецЕсли;
			ОбластьМакетаЖилец.Параметры.Убыл = УбытиеСтрокой;
			
			ДокументРезультат.Вывести(ОбластьМакетаЖилец);
		КонецЦикла;
		
		ОбластьПоМесту     = Макет.ПолучитьОбласть("ПоМесту");
		ВывестиНадпись     = Истина;
		ОбластьМакетаЖилец = Макет.ПолучитьОбласть("Жилец");
		
		Для Каждого СтрокаРез Из ТаблицаРезультатаСобственность Цикл
			Если НЕ СтрокаРез.Зарегистрирован И СтрокаРез.Проживает Тогда
				Если ВывестиНадпись Тогда
					ДокументРезультат.Вывести(ОбластьПоМесту);
					ВывестиНадпись = Ложь;
				КонецЕсли;
				ПаспортныеДанныеПредыдущегоПаспорта = ПаспортныеДанныеПредыдущегоПаспорта(СтрокаРез.ФизЛицо, СтрокаРез.ВидДокумента, СтрокаРез.ДатаВыдачи);
				
				ОбластьМакетаЖилец.Параметры.ФИО           = СтрокаРез.Жилец;
				ОбластьМакетаЖилец.Параметры.ДатаРождения  = Формат(СтрокаРез.ДатаРождения,"ДЛФ=DD"); 
				ОбластьМакетаЖилец.Параметры.МестоРождения = УПЖКХ_ТиповыеМетодыКлиентСервер.ПредставлениеМестаРождения(СтрокаРез.МестоРождения);
				ОбластьМакетаЖилец.Параметры.Родство       = СтрокаРез.СтепеньРодства;
				ОбластьМакетаЖилец.Параметры.Паспорт       = ПаспортныеДанныеСокращенно(СтрокаРез);
				ОбластьМакетаЖилец.Параметры.ПаспортРанее  = ПаспортныеДанныеСокращенно(ПаспортныеДанныеПредыдущегоПаспорта);
				ОбластьМакетаЖилец.Параметры.Прибыл        = АдресРегистрацииСтрокой(СтрокаРез.ФизЛицо, Перечисления.КВП_ВидыАдресов.Прибытие, ПараметрыОтчета);
				ОбластьМакетаЖилец.Параметры.Убыл          = АдресРегистрацииСтрокой(СтрокаРез.ФизЛицо, Перечисления.КВП_ВидыАдресов.Выбытие, ПараметрыОтчета );
				ДокументРезультат.Вывести(ОбластьМакетаЖилец);
			Конецесли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры // ВывестиЖильцовНаЖилплощади()

// Заполняет данные по льготам.
//
// Параметры:
//  ДокументРезультат - табличный документ формы.
//  ДругаяЖилПлощадь  - Булево.
//
Процедура ВывестиДанныеСоцПоддержки(ПараметрыОтчета, ДокументРезультат, Макет, ДругаяЖилПлощадь = Ложь)
	
	ДатаОтчета = ? (ПараметрыОтчета.Дата_Период = 1, ПараметрыОтчета.Дата, ПараметрыОтчета.ДатаДо);
	
	// Область СоцПоддержка.
	ОбластьСоцПоддержка = Макет.ПолучитьОбласть("СоцПоддержка");
	ОбластьСоцПоддержка.Параметры.ДрЖилПлощадь = ?(ДругаяЖилПлощадь, "имеют", "не имеют");
	ДокументРезультат.Вывести(ОбластьСоцПоддержка);
	
	// Область Льготник.
	ОбластьЛьготник = Макет.ПолучитьОбласть("Льготник");
	ТаблицаЛьгот    = ДанныеПоЛьготам(ПараметрыОтчета.Проживающий, ДатаОтчета);
	Для Каждого СтрокаЛьгота Из ТаблицаЛьгот Цикл
		ПроживающийСтрокой               = СокрЛП(СтрокаЛьгота.Объект);
		ДокументОснование                = СокрЛП(СтрокаЛьгота.ВидДокумента);
		СерияДокументОснование           = СокрЛП(СтрокаЛьгота.СерияДокумента);
		НомерДокументОснование           = СокрЛП(СтрокаЛьгота.НомерДокумента);
		ДатаДокументОснование            = Формат(СтрокаЛьгота.ДатаВыдачиДокумента, "ДЛФ=DD");
		КемВыдан                         = СокрЛП(СтрокаЛьгота.КемВыдан);
		ПредоставленаСкидка              = СокрЛП(СтрокаЛьгота.РазмерСкидки);
		Услуга                           = СокрЛП(СтрокаЛьгота.Услуга);
		ДатаЛьготы                       = Формат(СтрокаЛьгота.Период, "ДЛФ=DD");
		ОбластьЛьготник.Параметры.Льгота = "" + ПроживающийСтрокой
										 + " на основании " + ДокументОснование
										 + " серия " + СерияДокументОснование
										 + " номер " + НомерДокументОснование
										 + " от " + ДатаДокументОснование
										 + " выданный " + КемВыдан
										 + ", предоставляется скидка с " + ДатаЛьготы
										 + ", в размере " + ПредоставленаСкидка
										 + " на услугу: " + Услуга;
		
		ДокументРезультат.Вывести(ОбластьЛьготник);
	КонецЦикла;
	
КонецПроцедуры // ВывестиДанныеСоцПоддержки()

// Заполняет данные по счетчикам.
//
// Параметры:
// ДокументРезультат - табличный документ формы.
//
Процедура ВывестиДанныеОСчетчиках(ПараметрыОтчета, ДокументРезультат, Макет)
	
	ЗапросСчетчики = Новый Запрос;
	ЗапросСчетчики.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_ЗакрепленныеСчетчикиСрезПоследних.ДатаИзменения КАК Период,
	|	КВП_ЗакрепленныеСчетчикиСрезПоследних.Регистратор,
	|	КВП_ЗакрепленныеСчетчикиСрезПоследних.НомерСтроки,
	|	КВП_ЗакрепленныеСчетчикиСрезПоследних.Активность,
	|	КВП_ЗакрепленныеСчетчикиСрезПоследних.Объект,
	|	КВП_ЗакрепленныеСчетчикиСрезПоследних.Счетчик,
	|	КВП_ЗакрепленныеСчетчикиСрезПоследних.Действует,
	|	КВП_ЗакрепленныеСчетчикиСрезПоследних.Счетчик.ВидУслуги
	|ИЗ
	|	РегистрСведений.КВП_ЗакрепленныеСчетчики.СрезПоследних(&ДатаОтчета, Объект В (&ОбъектыСписок) И ДатаИзменения <= &ДатаОтчета) КАК КВП_ЗакрепленныеСчетчикиСрезПоследних
	|ГДЕ
	|	КВП_ЗакрепленныеСчетчикиСрезПоследних.Действует";
	
	ОбъектыСписок = Новый СписокЗначений();
	ОбъектыСписок.Добавить(ПараметрыОтчета.Проживающий.Владелец);
	ОбъектыСписок.Добавить(ПараметрыОтчета.Проживающий.Владелец.Адрес);
	ОбъектыСписок.Добавить(ПараметрыОтчета.Проживающий.Владелец.Адрес.Владелец);
	ОбъектыСписок.Добавить(ПараметрыОтчета.Проживающий.Владелец.Адрес.Подъезд);
	
	ЗапросСчетчики.УстановитьПараметр("ОбъектыСписок", ОбъектыСписок);
	ЗапросСчетчики.УстановитьПараметр("ДатаОтчета",    ПараметрыОтчета.Дата);
	
	ТаблицаСчетчиков = ЗапросСчетчики.Выполнить().Выгрузить();
	ОбластьСчетчиков = Макет.ПолучитьОбласть("Счетчики");
	
	Если ТаблицаСчетчиков.Количество() > 0 Тогда
		ОбластьСчетчиков.Параметры.Счетчик = "Имеется";
	Иначе
		ОбластьСчетчиков.Параметры.Счетчик = "Не имеется";
	КонецЕсли;
	ДокументРезультат.Вывести(ОбластьСчетчиков);
	
	Если ПараметрыОтчета.ВыводитьСчетчики Тогда
		Для Каждого СтрокаСчетчик Из ТаблицаСчетчиков Цикл
			СтрСчетчиков = "";
			Счетчик      = СокрЛП(СтрокаСчетчик.Счетчик);
			ВидУслуги    = СокрЛП(СтрокаСчетчик.Счетчик.ВидУслуги);
			СтрСчетчиков = "Счетчик - """ + Счетчик + """   по услуге  """ + ВидУслуги +  """";
			
			Если (ТипЗнч(СтрокаСчетчик.Объект) = Тип("СправочникСсылка.КВП_Здания")
			   И СтрокаСчетчик.Объект.Многоквартирное)
			   ИЛИ ТипЗнч(СтрокаСчетчик.Объект) = Тип("СправочникСсылка.КВП_Подъезды")
			    Тогда
				СтрСчетчиков = СтрСчетчиков + " (общедомовой);";
			Иначе
				СтрСчетчиков = СтрСчетчиков + ";";
			КонецЕсли;
			
			ОбластьСчетчики = Макет.ПолучитьОбласть("СтрокаСчетчики");
			ОбластьСчетчики.Параметры.СтрокаСчетчики = СтрСчетчиков;
			ДокументРезультат.Вывести(ОбластьСчетчики);
		КонецЦикла;
		
		ОбластьСчетчикиПодвал = Макет.ПолучитьОбласть("СчетчикиПодвал");
		ДокументРезультат.Вывести(ОбластьСчетчикиПодвал);
	КонецЕсли;
	
КонецПроцедуры // ВывестиДанныеОСчетчиках()

// Выводит в отчет блок информации по долгам.
//
// Параметры:
//  ДокументРезультат - табличный документ формы.
//
Процедура ВывестиДолги(ПараметрыОтчета, ДокументРезультат, Макет)
	
	Если Не ПараметрыОтчета.Дата_Период Тогда
		Возврат;
	КонецЕсли;
	
	ОбластьМакетаДолгиЗаглавие = Макет.ПолучитьОбласть("ДолгиЗаглавие");
	
	Структура = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьПараметрыУчетнойПолитикиЖКХ(КонецМесяца(ПараметрыОтчета.Дата), ПараметрыОтчета.Организация);
	ДатаСрокОплаты = НачалоМесяца(ПараметрыОтчета.Дата) + Структура.ЧислоВнесенияПлатежа * 60 * 60 * 24;
	
	ДоДатыСрокаОплаты = ?(ПараметрыОтчета.Дата < ДатаСрокОплаты, Истина, Ложь);
	
	НаличиеЗадолженности = НаличиеЗадолженности(ПараметрыОтчета, ДоДатыСрокаОплаты);
	
	ДатаСтрокой = Формат(ПараметрыОтчета.Дата, "ДЛФ=ДД");
	Если НаличиеЗадолженности Тогда
		СтрокаПроДолги = ДатаСтрокой + " имеется <10>: ";
	Иначе
		СтрокаПроДолги = ДатаСтрокой + " не имеется <10>.";
	КонецЕсли;
	
	ОбластьМакетаДолгиЗаглавие.Параметры.СтрокаПроДолги = СтрокаПроДолги;
	ДокументРезультат.Вывести(ОбластьМакетаДолгиЗаглавие);
	
	Если НаличиеЗадолженности Тогда
		
		ОбластьМакетаДолгиШапка  = Макет.ПолучитьОбласть("ДолгиШапка");
		ОбластьМакетаДолгиСтрока = Макет.ПолучитьОбласть("ДолгиСтрока");
		ОбластьМакетаДолгиПодвал = Макет.ПолучитьОбласть("ДолгиПодвал");
		
		ДатыШапки = Новый Структура();
		
		Для НомерМесяца = 0 По 7 Цикл
			СуффиксМесяца = ?(НомерМесяца = 0, "", "_" + НомерМесяца);
			ДатаВШапке    = ДобавитьМесяц(КонецМесяца(ПараметрыОтчета.Дата), -НомерМесяца);
			ДатыШапки.Вставить("ДатаНа" + СуффиксМесяца, ДатаВШапке)
		КонецЦикла;
		
		ОбластьМакетаДолгиШапка.Параметры.Заполнить(ДатыШапки);
		
		ДокументРезультат.Вывести(ОбластьМакетаДолгиШапка);
		
		РезультатДолги = ЗадолженностьПоМесяцам(ПараметрыОтчета, ДоДатыСрокаОплаты);
		
		Выборка = РезультатДолги.Выбрать();
		Пока Выборка.Следующий() Цикл
			ОбластьМакетаДолгиСтрока.Параметры.Заполнить(Выборка);
			ДокументРезультат.Вывести(ОбластьМакетаДолгиСтрока);
		КонецЦикла;
		
		ТаблицаДолгов  = РезультатДолги.Выгрузить();
		СуммаИтого     = ТаблицаДолгов.Итог("ДолгТекущегоМесяца");
		ОбластьМакетаДолгиПодвал.Параметры.СуммаИтого = СуммаИтого;
		ДокументРезультат.Вывести(ОбластьМакетаДолгиПодвал);
		
	КонецЕсли;
	
КонецПроцедуры // ВывестиДолги()

// Заполняет данные жильцов коммунальной квартиры.
//
// Параметры:
//  ДокументРезультат - табличный документ формы.
//
Процедура ВывестиДанныеЖильцовКоммуналки(ПараметрыОтчета, ДокументРезультат, Макет)
	
	ЗапросКоммунальный = Новый Запрос;
	
	ЗапросКоммунальный.Текст =
	"ВЫБРАТЬ
	|	КВП_ЛицевыеСчетаСрезПоследних.ЛицевойСчет,
	|	КВП_ЛицевыеСчетаСрезПоследних.Объект
	|ПОМЕСТИТЬ втЛицевыеСчета
	|ИЗ
	|	РегистрСведений.КВП_ЛицевыеСчета.СрезПоследних(
	|			&ДатаОтчета,
	|			НЕ ЛицевойСчет = &ЛС
	|				И Объект = &Адрес) КАК КВП_ЛицевыеСчетаСрезПоследних
	|ГДЕ
	|	КВП_ЛицевыеСчетаСрезПоследних.Действует
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчетаСрезПоследних.ЛицевойСчет,
	|	УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчетаСрезПоследних.ОтветственныйВладелец
	|ПОМЕСТИТЬ втОтветсвенныеСобственники
	|ИЗ
	|	РегистрСведений.УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчета.СрезПоследних(
	|			&ДатаОтчета,
	|			ЛицевойСчет В
	|				(ВЫБРАТЬ
	|					втЛицевыеСчета.ЛицевойСчет
	|				ИЗ
	|					втЛицевыеСчета КАК втЛицевыеСчета)) КАК УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчетаСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УПЖКХ_СведенияОПроживающихСрезПоследних.ЛицевойСчет КАК ЛицевойСчет,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ УПЖКХ_СведенияОПроживающихСрезПоследних.Жилец) КАК КоличествоПроживающих
	|ПОМЕСТИТЬ втКолПроживающихИзСведений
	|ИЗ
	|	РегистрСведений.УПЖКХ_СведенияОПроживающих.СрезПоследних(
	|			&ДатаОтчета,
	|			ЛицевойСчет В
	|				(ВЫБРАТЬ
	|					втЛицевыеСчета.ЛицевойСчет
	|				ИЗ
	|					втЛицевыеСчета КАК втЛицевыеСчета)) КАК УПЖКХ_СведенияОПроживающихСрезПоследних
	|ГДЕ
	|	УПЖКХ_СведенияОПроживающихСрезПоследних.Проживает
	|
	|СГРУППИРОВАТЬ ПО
	|	УПЖКХ_СведенияОПроживающихСрезПоследних.ЛицевойСчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.ЛицевойСчет КАК ЛицевойСчет,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.Жилец) КАК КоличествоЗарегистрированных
	|ПОМЕСТИТЬ втКолЗарегистрированныхИзСведений
	|ИЗ
	|	РегистрСведений.УПЖКХ_СведенияОЗарегистрированных.СрезПоследних(
	|			&ДатаОтчета,
	|			ЛицевойСчет В
	|				(ВЫБРАТЬ
	|					втЛицевыеСчета.ЛицевойСчет
	|				ИЗ
	|					втЛицевыеСчета КАК втЛицевыеСчета)) КАК УПЖКХ_СведенияОЗарегистрированныхСрезПоследних
	|ГДЕ
	|	УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.Зарегистрирован
	|
	|СГРУППИРОВАТЬ ПО
	|	УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.ЛицевойСчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(втКолЗарегистрированныхИзСведений.ЛицевойСчет, втКолПроживающихИзСведений.ЛицевойСчет) КАК ЛицевойСчет,
	|	СУММА(ЕСТЬNULL(втКолЗарегистрированныхИзСведений.КоличествоЗарегистрированных, 0)) КАК КоличествоЗарегистрированных,
	|	СУММА(ЕСТЬNULL(втКолПроживающихИзСведений.КоличествоПроживающих, 0)) КАК КоличествоПроживающих
	|ПОМЕСТИТЬ втКоличествоЖильцовИзСведений
	|ИЗ
	|	втКолПроживающихИзСведений КАК втКолПроживающихИзСведений
	|		ПОЛНОЕ СОЕДИНЕНИЕ втКолЗарегистрированныхИзСведений КАК втКолЗарегистрированныхИзСведений
	|		ПО втКолПроживающихИзСведений.ЛицевойСчет = втКолЗарегистрированныхИзСведений.ЛицевойСчет
	|
	|СГРУППИРОВАТЬ ПО
	|	ЕСТЬNULL(втКолЗарегистрированныхИзСведений.ЛицевойСчет, втКолПроживающихИзСведений.ЛицевойСчет)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КВП_УчетКоличестваЖильцовПоЛицевымСчетамСрезПоследних.ЛицевойСчет,
	|	КВП_УчетКоличестваЖильцовПоЛицевымСчетамСрезПоследних.КоличествоПроживающих,
	|	КВП_УчетКоличестваЖильцовПоЛицевымСчетамСрезПоследних.КоличествоЗарегистрированных
	|ПОМЕСТИТЬ втУчетКоличестваЖильцов
	|ИЗ
	|	РегистрСведений.КВП_УчетКоличестваЖильцовПоЛицевымСчетам.СрезПоследних(
	|			&ДатаОтчета,
	|			ЛицевойСчет В
	|				(ВЫБРАТЬ
	|					втЛицевыеСчета.ЛицевойСчет
	|				ИЗ
	|					втЛицевыеСчета КАК втЛицевыеСчета)) КАК КВП_УчетКоличестваЖильцовПоЛицевымСчетамСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УПЖКХ_ПривязанныеКЛицевомуСчетуКомнатыСрезПоследних.ЛицевойСчет,
	|	УПЖКХ_ПривязанныеКЛицевомуСчетуКомнатыСрезПоследних.Комната
	|ПОМЕСТИТЬ втКомнаты
	|ИЗ
	|	РегистрСведений.УПЖКХ_ПривязанныеКЛицевомуСчетуКомнаты.СрезПоследних(
	|			&ДатаОтчета,
	|			ЛицевойСчет В
	|				(ВЫБРАТЬ
	|					втЛицевыеСчета.ЛицевойСчет
	|				ИЗ
	|					втЛицевыеСчета КАК втЛицевыеСчета)) КАК УПЖКХ_ПривязанныеКЛицевомуСчетуКомнатыСрезПоследних
	|ГДЕ
	|	УПЖКХ_ПривязанныеКЛицевомуСчетуКомнатыСрезПоследних.Привязка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КВП_ПлощадьПомещенияСрезПоследних.Объект,
	|	КВП_ПлощадьПомещенияСрезПоследних.ВидПлощади,
	|	КВП_ПлощадьПомещенияСрезПоследних.Площадь
	|ПОМЕСТИТЬ втПлощадиКомнат
	|ИЗ
	|	РегистрСведений.КВП_ПлощадьПомещения.СрезПоследних(
	|			&ДатаОтчета,
	|			Объект В
	|					(ВЫБРАТЬ
	|						втКомнаты.Комната
	|					ИЗ
	|						втКомнаты КАК втКомнаты)
	|				И ВидПлощади В (ЗНАЧЕНИЕ(Справочник.УПЖКХ_ВидыПлощадей.ОбщаяПлощадь), ЗНАЧЕНИЕ(Справочник.УПЖКХ_ВидыПлощадей.ЖилаяПлощадь))) КАК КВП_ПлощадьПомещенияСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КВП_СостояниеПомещения.Объект,
	|	КВП_СостояниеПомещения.КатегорияКвартиры
	|ПОМЕСТИТЬ втХарактеристикиКомнат
	|ИЗ
	|	РегистрСведений.КВП_СостояниеПомещения КАК КВП_СостояниеПомещения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втКомнаты.ЛицевойСчет,
	|	втКомнаты.Комната,
	|	СУММА(ВЫБОР
	|			КОГДА втПлощадиКомнат.ВидПлощади = ЗНАЧЕНИЕ(Справочник.УПЖКХ_ВидыПлощадей.ОбщаяПлощадь)
	|				ТОГДА ЕСТЬNULL(втПлощадиКомнат.Площадь, 0)
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ОбщаяПлощадь,
	|	СУММА(ВЫБОР
	|			КОГДА втПлощадиКомнат.ВидПлощади = ЗНАЧЕНИЕ(Справочник.УПЖКХ_ВидыПлощадей.ЖилаяПлощадь)
	|				ТОГДА ЕСТЬNULL(втПлощадиКомнат.Площадь, 0)
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ЖилаяПлощадь,
	|	ЕСТЬNULL(втХарактеристикиКомнат.КатегорияКвартиры, ЗНАЧЕНИЕ(Перечисление.КВП_КатегорииКвартир.ПустаяСсылка)) КАК Характ
	|ПОМЕСТИТЬ втКомнатыСХарактеристиками
	|ИЗ
	|	втКомнаты КАК втКомнаты
	|		ЛЕВОЕ СОЕДИНЕНИЕ втПлощадиКомнат КАК втПлощадиКомнат
	|		ПО втКомнаты.Комната = втПлощадиКомнат.Объект
	|		ЛЕВОЕ СОЕДИНЕНИЕ втХарактеристикиКомнат КАК втХарактеристикиКомнат
	|		ПО втКомнаты.Комната = втХарактеристикиКомнат.Объект
	|
	|СГРУППИРОВАТЬ ПО
	|	втКомнаты.ЛицевойСчет,
	|	втКомнаты.Комната,
	|	ЕСТЬNULL(втХарактеристикиКомнат.КатегорияКвартиры, ЗНАЧЕНИЕ(Перечисление.КВП_КатегорииКвартир.ПустаяСсылка))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втЛицевыеСчета.ЛицевойСчет,
	|	втЛицевыеСчета.Объект КАК Адрес,
	|	ЕСТЬNULL(втОтветсвенныеСобственники.ОтветственныйВладелец, ЗНАЧЕНИЕ(Справочник.УПЖКХ_Жильцы.ПустаяСсылка)) КАК ВладелецОбъекта,
	|	ЕСТЬNULL(втКомнатыСХарактеристиками.Комната, ЗНАЧЕНИЕ(Справочник.УПЖКХ_Помещения.ПустаяСсылка)) КАК Комната,
	|	ЕСТЬNULL(втКомнатыСХарактеристиками.ОбщаяПлощадь, 0) КАК ОбщаяПлощадь,
	|	ЕСТЬNULL(втКомнатыСХарактеристиками.ЖилаяПлощадь, 0) КАК ЖилаяПлощадь,
	|	ЕСТЬNULL(втКомнатыСХарактеристиками.Характ, ЗНАЧЕНИЕ(Перечисление.КВП_КатегорииКвартир.ПустаяСсылка)) КАК Характ,
	|	ВЫБОР
	|		КОГДА &УказыватьКоличествоПрожИЗарегЧислами
	|			ТОГДА ЕСТЬNULL(втУчетКоличестваЖильцов.КоличествоПроживающих, 0)
	|		ИНАЧЕ ЕСТЬNULL(втКоличествоЖильцовИзСведений.КоличествоПроживающих, 0)
	|	КОНЕЦ КАК КоличествоПроживающих,
	|	ВЫБОР
	|		КОГДА &УказыватьКоличествоПрожИЗарегЧислами
	|			ТОГДА ЕСТЬNULL(втУчетКоличестваЖильцов.КоличествоЗарегистрированных, 0)
	|		ИНАЧЕ ЕСТЬNULL(втКоличествоЖильцовИзСведений.КоличествоЗарегистрированных, 0)
	|	КОНЕЦ КАК КоличествоЗарегистрированных
	|ИЗ
	|	втЛицевыеСчета КАК втЛицевыеСчета
	|		ЛЕВОЕ СОЕДИНЕНИЕ втОтветсвенныеСобственники КАК втОтветсвенныеСобственники
	|		ПО втЛицевыеСчета.ЛицевойСчет = втОтветсвенныеСобственники.ЛицевойСчет
	|		ЛЕВОЕ СОЕДИНЕНИЕ втКомнатыСХарактеристиками КАК втКомнатыСХарактеристиками
	|		ПО втЛицевыеСчета.ЛицевойСчет = втКомнатыСХарактеристиками.ЛицевойСчет
	|		ЛЕВОЕ СОЕДИНЕНИЕ втУчетКоличестваЖильцов КАК втУчетКоличестваЖильцов
	|		ПО втЛицевыеСчета.ЛицевойСчет = втУчетКоличестваЖильцов.ЛицевойСчет
	|		ЛЕВОЕ СОЕДИНЕНИЕ втКоличествоЖильцовИзСведений КАК втКоличествоЖильцовИзСведений
	|		ПО втЛицевыеСчета.ЛицевойСчет = втКоличествоЖильцовИзСведений.ЛицевойСчет";
	
	ЗапросКоммунальный.УстановитьПараметр("Адрес",                                ПараметрыОтчета.ЛицевойСчет.Адрес);
	ЗапросКоммунальный.УстановитьПараметр("ЛС",                                   ПараметрыОтчета.ЛицевойСчет);
	ЗапросКоммунальный.УстановитьПараметр("ДатаОтчета",                           ?(ПараметрыОтчета.Дата_Период = 1, ПараметрыОтчета.Дата, ПараметрыОтчета.ДатаДо));
	ЗапросКоммунальный.УстановитьПараметр("УказыватьКоличествоПрожИЗарегЧислами", Константы.УПЖКХ_УказыватьКоличествоПрожИЗарегЧислами.Получить());
	
	РезультатКоммунальный = ЗапросКоммунальный.Выполнить();
	ТаблицаКоммунальный   = РезультатКоммунальный.Выгрузить();
	ТаблицаКоммунальный.Свернуть("ЛицевойСчет") ;
	
	ОбластьКоммунальная = Макет.ПолучитьОбласть("Коммунальная");
	
	Если НЕ ТаблицаКоммунальный.Количество() = 0 Тогда
		
		ОбластьКоммунальная.Параметры.КоличествоСемей = ТаблицаКоммунальный.Количество();
		ДокументРезультат.Вывести(ОбластьКоммунальная);
		
		ОбластьКомЖильцы = Макет.ПолучитьОбласть("ЖильцыКом");
		ВыборкаЖителей   = РезультатКоммунальный.Выбрать();
		
		Пока ВыборкаЖителей.Следующий() Цикл
			ОбластьКомЖильцы.Параметры.Заполнить(ВыборкаЖителей);
			ДокументРезультат.Вывести(ОбластьКомЖильцы);
		КонецЦикла;
		
	Конецесли;
	
КонецПроцедуры // ВывестиДанныеЖильцовКоммуналки()

#КонецОбласти 

/////////////////////////////////////////////////////////////////////////////////
// ФУНКЦИИ ПОЛУЧЕНИЯ ДАННЫХ ИЗ ТАБЛИЦ

#Область ФункцииПолученияДанныхИзТаблиц

// Возвращает результат запроса по задолженностям по месяцам.
//
Функция ЗадолженностьПоМесяцам(Параметрыотчета, ДоДатыСрокаОплаты)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.Услуга КАК Услуга,
	|	СУММА(КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.СуммаНачисленияОстаток) КАК ДолгТекущегоМесяца,
	|	СУММА(ЕСТЬNULL(ДолгиТекущегоМесяца_1.СуммаНачисленияОстаток, 0)) КАК ДолгТекущегоМесяца_1,
	|	СУММА(ЕСТЬNULL(ДолгиТекущегоМесяца_2.СуммаНачисленияОстаток, 0)) КАК ДолгТекущегоМесяца_2,
	|	СУММА(ЕСТЬNULL(ДолгиТекущегоМесяца_3.СуммаНачисленияОстаток, 0)) КАК ДолгТекущегоМесяца_3,
	|	СУММА(ЕСТЬNULL(ДолгиТекущегоМесяца_4.СуммаНачисленияОстаток, 0)) КАК ДолгТекущегоМесяца_4,
	|	СУММА(ЕСТЬNULL(ДолгиТекущегоМесяца_5.СуммаНачисленияОстаток, 0)) КАК ДолгТекущегоМесяца_5,
	|	СУММА(ЕСТЬNULL(ДолгиТекущегоМесяца_6.СуммаНачисленияОстаток, 0)) КАК ДолгТекущегоМесяца_6,
	|	СУММА(ЕСТЬNULL(ДолгиТекущегоМесяца_7.СуммаНачисленияОстаток, 0)) КАК ДолгТекущегоМесяца_7
	|ИЗ
	|	РегистрНакопления.КВП_ВзаиморасчетыПоЛицевымСчетам.Остатки(
	|			КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(&ДатаСреза, МЕСЯЦ, -1), МЕСЯЦ),
	|			ЛицевойСчет = &ЛицевойСчет
	|				И Организация = &Организация) КАК КВП_ВзаиморасчетыПоЛицевымСчетамОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.КВП_ВзаиморасчетыПоЛицевымСчетам.Остатки(
	|				КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(&ДатаСреза, МЕСЯЦ, -1), МЕСЯЦ),
	|				ЛицевойСчет = &ЛицевойСчет
	|					И Организация = &Организация) КАК ДолгиТекущегоМесяца_1
	|		ПО КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.Услуга = ДолгиТекущегоМесяца_1.Услуга
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.КВП_ВзаиморасчетыПоЛицевымСчетам.Остатки(
	|				КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(&ДатаСреза, МЕСЯЦ, -2), МЕСЯЦ),
	|				ЛицевойСчет = &ЛицевойСчет
	|					И Организация = &Организация) КАК ДолгиТекущегоМесяца_2
	|		ПО КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.Услуга = ДолгиТекущегоМесяца_2.Услуга
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.КВП_ВзаиморасчетыПоЛицевымСчетам.Остатки(
	|				КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(&ДатаСреза, МЕСЯЦ, -3), МЕСЯЦ),
	|				ЛицевойСчет = &ЛицевойСчет
	|					И Организация = &Организация) КАК ДолгиТекущегоМесяца_3
	|		ПО КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.Услуга = ДолгиТекущегоМесяца_3.Услуга
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.КВП_ВзаиморасчетыПоЛицевымСчетам.Остатки(
	|				КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(&ДатаСреза, МЕСЯЦ, -4), МЕСЯЦ),
	|				ЛицевойСчет = &ЛицевойСчет
	|					И Организация = &Организация) КАК ДолгиТекущегоМесяца_4
	|		ПО КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.Услуга = ДолгиТекущегоМесяца_4.Услуга
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.КВП_ВзаиморасчетыПоЛицевымСчетам.Остатки(
	|				КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(&ДатаСреза, МЕСЯЦ, -5), МЕСЯЦ),
	|				ЛицевойСчет = &ЛицевойСчет
	|					И Организация = &Организация) КАК ДолгиТекущегоМесяца_5
	|		ПО КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.Услуга = ДолгиТекущегоМесяца_5.Услуга
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.КВП_ВзаиморасчетыПоЛицевымСчетам.Остатки(
	|				КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(&ДатаСреза, МЕСЯЦ, -6), МЕСЯЦ),
	|				ЛицевойСчет = &ЛицевойСчет
	|					И Организация = &Организация) КАК ДолгиТекущегоМесяца_6
	|		ПО КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.Услуга = ДолгиТекущегоМесяца_6.Услуга
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.КВП_ВзаиморасчетыПоЛицевымСчетам.Остатки(
	|				КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(&ДатаСреза, МЕСЯЦ, -7), МЕСЯЦ),
	|				ЛицевойСчет = &ЛицевойСчет
	|					И Организация = &Организация) КАК ДолгиТекущегоМесяца_7
	|		ПО КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.Услуга = ДолгиТекущегоМесяца_7.Услуга
	|
	|СГРУППИРОВАТЬ ПО
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.Услуга";
	
	Запрос.УстановитьПараметр("ЛицевойСчет", Параметрыотчета.ЛицевойСчет);
	Запрос.УстановитьПараметр("Организация", Параметрыотчета.Организация);
	Если ДоДатыСрокаОплаты Тогда
		Запрос.УстановитьПараметр("ДатаСреза", ДобавитьМесяц(КонецМесяца(Параметрыотчета.Дата), -1));
	Иначе
		Запрос.УстановитьПараметр("ДатаСреза", Параметрыотчета.Дата);
	КонецЕсли;
	
	Возврат Запрос.Выполнить();
	
КонецФункции // ЗадолженностьПоМесяцам()

// Возвращает данные о льготах.
//
// Возвращаемое значение:
//  РезультатЗапроса - таблица значений с данными о льготах.
//
Функция ДанныеПоЛьготам(Проживающий, ДатаОтчета)
	
	ЗапросЛьготы = Новый Запрос;
	ЗапросЛьготы.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЕСТЬNULL(УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.Жилец, УПЖКХ_СведенияОПроживающихСрезПоследних.Жилец) КАК Объект
	|ПОМЕСТИТЬ врТаблицаЖильцов
	|ИЗ
	|	РегистрСведений.УПЖКХ_СведенияОЗарегистрированных.СрезПоследних(
	|			,
	|			ДатаИзменения <= &ДатаОтчета
	|				И ЛицевойСчет = &ЛС) КАК УПЖКХ_СведенияОЗарегистрированныхСрезПоследних
	|		ПОЛНОЕ СОЕДИНЕНИЕ РегистрСведений.УПЖКХ_СведенияОПроживающих.СрезПоследних(
	|				,
	|				ДатаИзменения <= &ДатаОтчета
	|					И ЛицевойСчет = &ЛС) КАК УПЖКХ_СведенияОПроживающихСрезПоследних
	|		ПО УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.Жилец = УПЖКХ_СведенияОПроживающихСрезПоследних.Жилец
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_НазначенныеЛьготыСрезПоследних.ДатаИзменения КАК Период,
	|	КВП_НазначенныеЛьготыСрезПоследних.Регистратор,
	|	КВП_НазначенныеЛьготыСрезПоследних.НомерСтроки,
	|	КВП_НазначенныеЛьготыСрезПоследних.Активность,
	|	КВП_НазначенныеЛьготыСрезПоследних.Проживающий,
	|	КВП_НазначенныеЛьготыСрезПоследних.ЛьготнаяКатегория,
	|	КВП_НазначенныеЛьготыСрезПоследних.Действие,
	|	КВП_НазначенныеЛьготыСрезПоследних.ВидДокумента,
	|	КВП_НазначенныеЛьготыСрезПоследних.СерияДокумента,
	|	КВП_НазначенныеЛьготыСрезПоследних.НомерДокумента,
	|	КВП_НазначенныеЛьготыСрезПоследних.ДатаВыдачиДокумента,
	|	КВП_НазначенныеЛьготыСрезПоследних.КемВыдан,
	|	врТаблицаЖильцов.Объект,
	|	КВП_СкидкиСрезПоследних.ЛьготнаяКатегория КАК ЛьготнаяКатегория1,
	|	КВП_СкидкиСрезПоследних.Услуга,
	|	КВП_СкидкиСрезПоследних.РазмерСкидки,
	|	КВП_СкидкиСрезПоследних.ЛицаПользующиесяЛьготами
	|ИЗ
	|	врТаблицаЖильцов КАК врТаблицаЖильцов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КВП_НазначенныеЛьготы.СрезПоследних(&ДатаОтчета, ДатаИзменения <= &ДатаОтчета) КАК КВП_НазначенныеЛьготыСрезПоследних
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КВП_Скидки.СрезПоследних(&ДатаОтчета, ) КАК КВП_СкидкиСрезПоследних
	|			ПО КВП_НазначенныеЛьготыСрезПоследних.ЛьготнаяКатегория = КВП_СкидкиСрезПоследних.ЛьготнаяКатегория
	|		ПО врТаблицаЖильцов.Объект = КВП_НазначенныеЛьготыСрезПоследних.Проживающий
	|ГДЕ
	|	КВП_НазначенныеЛьготыСрезПоследних.Действие" ;
	
	ЗапросЛьготы.УстановитьПараметр("ЛС",         Проживающий.Владелец);
	ЗапросЛьготы.УстановитьПараметр("ДатаОтчета", ДатаОтчета);
	
	РезультатЗапроса = ЗапросЛьготы.Выполнить().Выгрузить();
	
	Возврат РезультатЗапроса;
	
КонецФункции // ДанныеПоЛьготам()

// Получает данные помещения.
//
// Возвращаемое значение:
//  РезультатЗапроса - результат запроса по Помещению.
//
Функция ДанныеПомещения(ПараметрыОтчета, ДатаОтчета)
	
	ЗапросКвартира       = Новый Запрос;
	ЗапросКвартира.Текст =
	
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УПЖКХ_Помещения.Ссылка,
	|	УПЖКХ_Помещения.Код,
	|	УПЖКХ_Помещения.Наименование КАК Комната,
	|	ВЫБОР
	|		КОГДА УПЖКХ_Помещения.Планировка = ЗНАЧЕНИЕ(Перечисление.КВП_ВидыПланировкиПомещений.СмежноИзолированная)
	|			ТОГДА ""Проходная""
	|		КОГДА УПЖКХ_Помещения.Планировка = ЗНАЧЕНИЕ(Перечисление.КВП_ВидыПланировкиПомещений.Смежная)
	|			ТОГДА ""Запроходная""
	|		КОГДА УПЖКХ_Помещения.Планировка = ЗНАЧЕНИЕ(Перечисление.КВП_ВидыПланировкиПомещений.Изолированная)
	|			ТОГДА ""Изолированная""
	|	КОНЕЦ КАК Характеристика,
	|	УПЖКХ_Помещения.ВидПомещения.ТипПомещения,
	|	УПЖКХ_Помещения.Родитель,
	|	ЕСТЬNULL(КВП_ЖилаяПлощадь.Площадь, 0) КАК ПлощадьКомнатыЖилая,
	|	ЕСТЬNULL(КВП_ОбщаяПлощадь.Площадь, 0) КАК ПлощадьКомнатыОбщая
	|ИЗ
	|	Справочник.УПЖКХ_Помещения КАК УПЖКХ_Помещения
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КВП_ПлощадьПомещения.СрезПоследних(&ДатаОтчета, ВидПлощади = &ВидПлощадиЖилая) КАК КВП_ЖилаяПлощадь
	|		ПО УПЖКХ_Помещения.Ссылка = КВП_ЖилаяПлощадь.Объект
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КВП_ПлощадьПомещения.СрезПоследних(&ДатаОтчета, ВидПлощади = &ВидПлощадиОбщая) КАК КВП_ОбщаяПлощадь
	|		ПО УПЖКХ_Помещения.Ссылка = КВП_ОбщаяПлощадь.Объект
	|ГДЕ
	|	УПЖКХ_Помещения.Родитель = &Квартира";
	
	ЗапросКвартира.УстановитьПараметр("Квартира",        ПараметрыОтчета.Проживающий.Владелец.Адрес);
	ЗапросКвартира.УстановитьПараметр("ВидПлощадиОбщая", Справочники.УПЖКХ_ВидыПлощадей.ОбщаяПлощадь);
	ЗапросКвартира.УстановитьПараметр("ВидПлощадиЖилая", Справочники.УПЖКХ_ВидыПлощадей.ЖилаяПлощадь);
	ЗапросКвартира.УстановитьПараметр("ДатаОтчета",      ДатаОтчета);
	
	РезультатЗапроса = ЗапросКвартира.Выполнить();
	
	Возврат РезультатЗапроса;
	
КонецФункции // ДанныеПомещения()

// Получаем Сведения О Собственниках
//
Функция СведенияОСобственниках(ПараметрыОтчета)
	
	ЗапросСобственность = Новый Запрос;
	ЗапросСобственность.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.Жилец КАК Жилец
	|ПОМЕСТИТЬ врЖильцы
	|ИЗ
	|	РегистрСведений.УПЖКХ_СведенияОЗарегистрированных.СрезПоследних(
	|			,
	|			ЛицевойСчет = &Объект
	|				И ДатаИзменения <= &Дата) КАК УПЖКХ_СведенияОЗарегистрированныхСрезПоследних
	|ГДЕ
	|	УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.Зарегистрирован
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.Жилец
	|ИЗ
	|	РегистрСведений.УПЖКХ_СведенияОЗарегистрированных.СрезПоследних(
	|			,
	|			ЛицевойСчет = &Объект
	|				И ДатаИзменения >= &Дата
	|				И ДатаИзменения <= &ДатаОтчета) КАК УПЖКХ_СведенияОЗарегистрированныхСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	врЖильцы.Жилец,
	|	ЕСТЬNULL(врТаблицаСвязей.СтепеньРодства, ЗНАЧЕНИЕ(Справочник.КВП_ТипыРодственныхСвязей.ПустаяСсылка)) КАК СтепеньРодства,
	|	ЕСТЬNULL(УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.Зарегистрирован, ЛОЖЬ) КАК Зарегистрирован,
	|	ЕСТЬNULL(УПЖКХ_СведенияОПроживающихСрезПоследних.Проживает, ЛОЖЬ) КАК Проживает,
	|	ЕСТЬNULL(Регистрация.ДатаИзменения, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаРегистрации,
	|	ЕСТЬNULL(ДатаСнятияСРегистрации.ДатаИзменения, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаСнятияСРегистрации,
	|	врЖильцы.Жилец.ФизЛицо КАК ФизЛицо
	|ПОМЕСТИТЬ врТаблицаПроживающих
	|ИЗ
	|	врЖильцы КАК врЖильцы
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УПЖКХ_СведенияОЗарегистрированных.СрезПоследних(
	|				&ДатаОтчета,
	|				ЛицевойСчет = &Объект
	|					И ДатаИзменения <= &ДатаОтчета) КАК УПЖКХ_СведенияОЗарегистрированныхСрезПоследних
	|		ПО врЖильцы.Жилец = УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.Жилец
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УПЖКХ_СведенияОПроживающих.СрезПоследних(
	|				&ДатаОтчета,
	|				ЛицевойСчет = &Объект
	|					И ДатаИзменения <= &ДатаОтчета) КАК УПЖКХ_СведенияОПроживающихСрезПоследних
	|		ПО врЖильцы.Жилец = УПЖКХ_СведенияОПроживающихСрезПоследних.Жилец
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УПЖКХ_СведенияОЗарегистрированных.СрезПоследних(
	|				,
	|				ЛицевойСчет = &Объект
	|					И ДатаИзменения <= &ДатаОтчета
	|					И Зарегистрирован) КАК Регистрация
	|		ПО врЖильцы.Жилец = Регистрация.Жилец
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УПЖКХ_СведенияОЗарегистрированных.СрезПоследних(
	|				,
	|				ЛицевойСчет = &Объект
	|					И ДатаИзменения <= &ДатаОтчета
	|					И НЕ Зарегистрирован) КАК ДатаСнятияСРегистрации
	|		ПО врЖильцы.Жилец = ДатаСнятияСРегистрации.Жилец
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			УПЖКХ_СтепеньРодстваФизЛицСрезПоследних.ФизическоеЛицоСвязанное КАК ФизическоеЛицоСвязанное,
	|			УПЖКХ_СтепеньРодстваФизЛицСрезПоследних.СтепеньРодства КАК СтепеньРодства
	|		ИЗ
	|			РегистрСведений.УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчета.СрезПоследних(&ДатаОтчета, ЛицевойСчет = &Объект) КАК УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчетаСрезПоследних
	|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УПЖКХ_СтепеньРодстваФизЛиц.СрезПоследних(&ДатаОтчета, ) КАК УПЖКХ_СтепеньРодстваФизЛицСрезПоследних
	|				ПО УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчетаСрезПоследних.ОтветственныйВладелец.ФизЛицо = УПЖКХ_СтепеньРодстваФизЛицСрезПоследних.ФизическоеЛицоОсновное
	|		
	|		СГРУППИРОВАТЬ ПО
	|			УПЖКХ_СтепеньРодстваФизЛицСрезПоследних.ФизическоеЛицоСвязанное,
	|			УПЖКХ_СтепеньРодстваФизЛицСрезПоследних.СтепеньРодства) КАК врТаблицаСвязей
	|		ПО врЖильцы.Жилец.ФизЛицо = врТаблицаСвязей.ФизическоеЛицоСвязанное
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УПЖКХ_ЖильцыКонтактнаяИнформация.Представление КАК Выбытие,
	|	УПЖКХ_ЖильцыКонтактнаяИнформация.Ссылка КАК Жилец
	|ПОМЕСТИТЬ втВыбытие
	|ИЗ
	|	Справочник.УПЖКХ_Жильцы.КонтактнаяИнформация КАК УПЖКХ_ЖильцыКонтактнаяИнформация
	|ГДЕ
	|	УПЖКХ_ЖильцыКонтактнаяИнформация.Вид = &ВидКИВыбытие
	|	И УПЖКХ_ЖильцыКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Адрес)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УПЖКХ_ЖильцыКонтактнаяИнформация.Представление КАК Прибытие,
	|	УПЖКХ_ЖильцыКонтактнаяИнформация.Ссылка КАК Жилец
	|ПОМЕСТИТЬ втПрибытие
	|ИЗ
	|	Справочник.УПЖКХ_Жильцы.КонтактнаяИнформация КАК УПЖКХ_ЖильцыКонтактнаяИнформация
	|ГДЕ
	|	УПЖКХ_ЖильцыКонтактнаяИнформация.Вид = &ВидКИПрибытие
	|	И УПЖКХ_ЖильцыКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Адрес)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	врТаблицаПроживающих.Жилец,
	|	врТаблицаПроживающих.СтепеньРодства,
	|	врТаблицаПроживающих.Зарегистрирован КАК Зарегистрирован,
	|	врТаблицаПроживающих.Проживает,
	|	врТаблицаПроживающих.ДатаРегистрации,
	|	врТаблицаПроживающих.ДатаСнятияСРегистрации,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ДанныеОДругойСобственности.КолвоПомещенийВСобственности, 0) > 0
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ВладелецЕдинственногоЖилья,
	|	ЕСТЬNULL(УПЖКХ_СобственностьНаПомещенияСрезПоследних.ВидСобственности, ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыСобственности.ПустаяСсылка)) КАК ВидСобственности,
	|	ЕСТЬNULL(УПЖКХ_СобственностьНаПомещенияСрезПоследних.ПодвидЧастнойСобственности, ЗНАЧЕНИЕ(перечисление.УПЖКХ_ВидыЧастнойСобственности.ПустаяСсылка)) КАК ПодвидЧастнойСобственности,
	|	ЕСТЬNULL(ДокументыФизическихЛицСрезПоследних.ВидДокумента, ЗНАЧЕНИЕ(Справочник.ВидыДокументовФизическихЛиц.ПустаяСсылка)) КАК Вид,
	|	ЕСТЬNULL(ДокументыФизическихЛицСрезПоследних.Серия, """") КАК Серия,
	|	ЕСТЬNULL(ДокументыФизическихЛицСрезПоследних.Номер, """") КАК Номер,
	|	ЕСТЬNULL(ДокументыФизическихЛицСрезПоследних.ДатаВыдачи, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаВыдачи,
	|	ЕСТЬNULL(ДокументыФизическихЛицСрезПоследних.КемВыдан, """") КАК Выдан,
	|	ЕСТЬNULL(ДокументыФизическихЛицСрезПоследних.ПричинаИзменения, ЗНАЧЕНИЕ(Справочник.КВП_ПричиныИзмененияПаспортныхДанных.ПустаяСсылка)) КАК ПричинаИзменения,
	|	ЕСТЬNULL(УПЖКХ_СведенияДляВзаиморасчетовПоЛССрезПоследних.Договор, ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)) КАК Договор,
	|	ЕСТЬNULL(УПЖКХ_СобственникиПомещенийСрезПоследних.ВидДокумента, ЗНАЧЕНИЕ(Справочник.УПЖКХ_ДокументыНаПравоСобственности.ПустаяСсылка)) КАК ВидДокумента,
	|	ЕСТЬNULL(УПЖКХ_СобственникиПомещенийСрезПоследних.НомерДокумента, """") КАК НомерДокумента,
	|	ЕСТЬNULL(УПЖКХ_СобственникиПомещенийСрезПоследних.ДатаДокумента, """") КАК ДатаДокумента,
	|	ЕСТЬNULL(УПЖКХ_СобственникиПомещенийСрезПоследних.ДоляСобственникаЧислитель, 0) КАК ДоляСобственникаЧислитель,
	|	ЕСТЬNULL(УПЖКХ_СобственникиПомещенийСрезПоследних.ДоляСобственникаЗнаменатель, 0) КАК ДоляСобственникаЗнаменатель,
	|	ЕСТЬNULL(УПЖКХ_СобственникиПомещенийСрезПоследних.Собственник, ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)) КАК Собственник,
	|	врТаблицаПроживающих.ФизЛицо.ДатаРождения КАК ДатаРождения,
	|	врТаблицаПроживающих.ФизЛицо.МестоРождения КАК МестоРождения,
	|	врТаблицаПроживающих.ФизЛицо,
	|	ЕСТЬNULL(втВыбытие.Выбытие, """") КАК Выбытие,
	|	ЕСТЬNULL(втПрибытие.Прибытие, """") КАК Прибытие
	|ИЗ
	|	врТаблицаПроживающих КАК врТаблицаПроживающих
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УПЖКХ_СведенияДляВзаиморасчетовПоЛС.СрезПоследних(
	|				&ДатаОтчета,
	|				ЛицевойСчет = &Объект
	|					И Организация = &Организация) КАК УПЖКХ_СведенияДляВзаиморасчетовПоЛССрезПоследних
	|		ПО врТаблицаПроживающих.Жилец.Владелец = УПЖКХ_СведенияДляВзаиморасчетовПоЛССрезПоследних.ЛицевойСчет
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УПЖКХ_СобственностьНаПомещения.СрезПоследних(&ДатаОтчета, Помещение = &Помещение) КАК УПЖКХ_СобственностьНаПомещенияСрезПоследних
	|		ПО врТаблицаПроживающих.Жилец.Владелец.Адрес = УПЖКХ_СобственностьНаПомещенияСрезПоследних.Помещение
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			УПЖКХ_СобственникиПомещенийСрезПоследних.Собственник КАК Собственник,
	|			КОЛИЧЕСТВО(УПЖКХ_СобственникиПомещенийСрезПоследних.Помещение) КАК КолвоПомещенийВСобственности
	|		ИЗ
	|			РегистрСведений.УПЖКХ_СобственникиПомещений.СрезПоследних(&ДатаОтчета, НЕ Помещение = &Помещение) КАК УПЖКХ_СобственникиПомещенийСрезПоследних
	|		ГДЕ
	|			УПЖКХ_СобственникиПомещенийСрезПоследних.Действует
	|		
	|		СГРУППИРОВАТЬ ПО
	|			УПЖКХ_СобственникиПомещенийСрезПоследних.Собственник) КАК ДанныеОДругойСобственности
	|		ПО врТаблицаПроживающих.ФизЛицо = ДанныеОДругойСобственности.Собственник
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УПЖКХ_СобственникиПомещений.СрезПоследних(
	|				&ДатаОтчета,
	|				Действует
	|					И Помещение = &Помещение) КАК УПЖКХ_СобственникиПомещенийСрезПоследних
	|		ПО врТаблицаПроживающих.ФизЛицо = УПЖКХ_СобственникиПомещенийСрезПоследних.Собственник
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДокументыФизическихЛиц.СрезПоследних(&ДатаОтчета, ) КАК ДокументыФизическихЛицСрезПоследних
	|		ПО врТаблицаПроживающих.ФизЛицо = ДокументыФизическихЛицСрезПоследних.Физлицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ втВыбытие КАК втВыбытие
	|		ПО врТаблицаПроживающих.Жилец = втВыбытие.Жилец
	|		ЛЕВОЕ СОЕДИНЕНИЕ втПрибытие КАК втПрибытие
	|		ПО врТаблицаПроживающих.Жилец = втПрибытие.Жилец";
	
	ЗапросСобственность.УстановитьПараметр("Объект"    ,   ПараметрыОтчета.Проживающий.Владелец);
	ЗапросСобственность.УстановитьПараметр("Помещение" ,   ПараметрыОтчета.Проживающий.Владелец.Адрес);
	ЗапросСобственность.УстановитьПараметр("ДатаОтчета", ?(ПараметрыОтчета.Дата_Период = 1, ПараметрыОтчета.Дата, ПараметрыОтчета.ДатаДо));
	ЗапросСобственность.УстановитьПараметр("Дата",         НачалоДня(ПараметрыОтчета.Дата));
	ЗапросСобственность.УстановитьПараметр("Организация",  ПараметрыОтчета.Организация);
	
	ЗапросСобственность.УстановитьПараметр("ВидКИВыбытие" , Справочники.ВидыКонтактнойИнформации.УПЖКХ_АдресВыбытияЖильца);
	ЗапросСобственность.УстановитьПараметр("ВидКИПрибытие", Справочники.ВидыКонтактнойИнформации.УПЖКХ_АдресПрибытияЖильца);
	
	РезультатЗапроса =  ЗапросСобственность.Выполнить().Выгрузить();
	
	Возврат РезультатЗапроса;
	
КонецФункции

// Получаем Сведения о площадаях помещения.
//
Функция ПлощадиПомещения(ПараметрыОтчета, ДатаОтчета)
	
	ПрилегающиеПлощади = Новый Массив;
	ПрилегающиеПлощади.Добавить("Лоджия");
	ПрилегающиеПлощади.Добавить("Балкон");
	ПрилегающиеПлощади.Добавить("Веранда");
	ПрилегающиеПлощади.Добавить("Терраса");
	
	ЗапросПлощадь       = Новый Запрос;
	
	ЗапросПлощадь.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_ПлощадьПомещенияСрезПоследних.Объект,
	|	КВП_ПлощадьПомещенияСрезПоследних.ВидПлощади,
	|	КВП_ПлощадьПомещенияСрезПоследних.Площадь,
	|	ВЫБОР
	|		КОГДА НЕ ЕСТЬNULL(УПЖКХ_СобственностьНаПомещенияСрезПоследних.ВидСобственности, ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыСобственности.ПустаяСсылка)) = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыСобственности.Частная)
	|			ТОГДА ВЫБОР
	|					КОГДА ЕСТЬNULL(КВП_СостояниеПомещения.Состояние, ЗНАЧЕНИЕ(Перечисление.КВП_СостоянияПомещения.ПустаяСсылка)) = ЗНАЧЕНИЕ(Перечисление.КВП_СостоянияПомещения.Наем)
	|						ТОГДА ""социальный наем""
	|					КОГДА ЕСТЬNULL(КВП_СостояниеПомещения.Состояние, ЗНАЧЕНИЕ(Перечисление.КВП_СостоянияПомещения.ПустаяСсылка)) = ЗНАЧЕНИЕ(Перечисление.КВП_СостоянияПомещения.НаемКоммерческий)
	|						ТОГДА ""наем (коммерческий)""
	|					КОГДА ЕСТЬNULL(КВП_СостояниеПомещения.Состояние, ЗНАЧЕНИЕ(Перечисление.КВП_СостоянияПомещения.ПустаяСсылка)) = ЗНАЧЕНИЕ(Перечисление.КВП_СостоянияПомещения.ВБезвозмСобственности)
	|						ТОГДА ""безвозмездное пользование""
	|					КОГДА ЕСТЬNULL(КВП_СостояниеПомещения.Состояние, ЗНАЧЕНИЕ(Перечисление.КВП_СостоянияПомещения.ПустаяСсылка)) = ЗНАЧЕНИЕ(Перечисление.КВП_СостоянияПомещения.ВСобственности)
	|						ТОГДА ""частная собственность""
	|					КОГДА ЕСТЬNULL(КВП_СостояниеПомещения.Состояние, ЗНАЧЕНИЕ(Перечисление.КВП_СостоянияПомещения.ПустаяСсылка)) = ЗНАЧЕНИЕ(Перечисление.КВП_СостоянияПомещения.Субаренда)
	|						ТОГДА ""субаренда""
	|					ИНАЧЕ ЕСТЬNULL(КВП_СостояниеПомещения.Состояние, ЗНАЧЕНИЕ(Перечисление.КВП_СостоянияПомещения.ПустаяСсылка))
	|				КОНЕЦ
	|		ИНАЧЕ ""частная собственность""
	|	КОНЕЦ КАК Состояние,
	|	ЕСТЬNULL(КВП_СостояниеПомещения.КатегорияКвартиры, ЗНАЧЕНИЕ(Перечисление.КВП_КатегорииКвартир.ПустаяСсылка)) КАК КатегорияКвартиры,
	|	ЕСТЬNULL(ПрилегающиеПлощади.Площадь, 0) + ЕСТЬNULL(ОбщаяПлощадьПомещения.ОбщаяПлощадь, 0) КАК ОбщаяПлощадьСУчетом,
	|	ЕСТЬNULL(ПрилегающиеПлощади.Площадь, 0) КАК ПрилегающаяПлощадь,
	|	ЕСТЬNULL(УПЖКХ_СобственностьНаПомещенияСрезПоследних.ВидСобственности, ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыСобственности.ПустаяСсылка)) КАК ВидСобственности
	|ИЗ
	|	РегистрСведений.КВП_ПлощадьПомещения.СрезПоследних(&ДатаОтчета, Объект = &Объект) КАК КВП_ПлощадьПомещенияСрезПоследних
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КВП_СостояниеПомещения КАК КВП_СостояниеПомещения
	|		ПО КВП_ПлощадьПомещенияСрезПоследних.Объект = КВП_СостояниеПомещения.Объект
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УПЖКХ_СобственностьНаПомещения.СрезПоследних(&ДатаОтчета, Помещение = &Объект) КАК УПЖКХ_СобственностьНаПомещенияСрезПоследних
	|		ПО КВП_ПлощадьПомещенияСрезПоследних.Объект = УПЖКХ_СобственностьНаПомещенияСрезПоследних.Помещение
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			СУММА(КВП_ПлощадьПомещенияСрезПоследних.Площадь) КАК Площадь,
	|			КВП_ПлощадьПомещенияСрезПоследних.Объект КАК Объект
	|		ИЗ
	|			РегистрСведений.КВП_ПлощадьПомещения.СрезПоследних(
	|					&ДатаОтчета,
	|					Объект = &Объект
	|						И ВидПлощади.Наименование В (&ПрилегающиеПлощади)) КАК КВП_ПлощадьПомещенияСрезПоследних
	|		
	|		СГРУППИРОВАТЬ ПО
	|			КВП_ПлощадьПомещенияСрезПоследних.Объект) КАК ПрилегающиеПлощади
	|		ПО КВП_ПлощадьПомещенияСрезПоследних.Объект = ПрилегающиеПлощади.Объект
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			КВП_ПлощадьПомещенияСрезПоследних.Площадь КАК ОбщаяПлощадь,
	|			КВП_ПлощадьПомещенияСрезПоследних.Объект КАК Объект
	|		ИЗ
	|			РегистрСведений.КВП_ПлощадьПомещения.СрезПоследних(
	|					&ДатаОтчета,
	|					Объект = &Объект
	|						И ВидПлощади = ЗНАЧЕНИЕ(Справочник.УПЖКХ_ВидыПлощадей.ОбщаяПлощадь)) КАК КВП_ПлощадьПомещенияСрезПоследних) КАК ОбщаяПлощадьПомещения
	|		ПО КВП_ПлощадьПомещенияСрезПоследних.Объект = ОбщаяПлощадьПомещения.Объект";
	
	ЗапросПлощадь.УстановитьПараметр("Объект",             ПараметрыОтчета.Проживающий.Владелец.Адрес);
	ЗапросПлощадь.УстановитьПараметр("ДатаОтчета",         ДатаОтчета);
	ЗапросПлощадь.УстановитьПараметр("ПрилегающиеПлощади", ПрилегающиеПлощади);
	
	Возврат ЗапросПлощадь.Выполнить().Выгрузить();
	
КонецФункции

// Возвращает адрес помещения для заполнения шапки.
//
// Возвращаемое значение:
//  АдресСтрокой - адрес помещения.
//
Функция АдресКвартиры(Проживающий)
	
	АдресСтрокой = Строка(Проживающий.Владелец.Адрес.Владелец) + ", " + Строка(Проживающий.Владелец.Адрес);
	
	Возврат  АдресСтрокой;
	
КонецФункции // АдресКвартиры()

// Возвращает паспортые данные заявителя.
//
// Параметры:
//  ФизЛицо      - заявитель отчета.
//  ВидДокумента - вид документа заявителя.
//  ДатаВыдачи   - дата выдачи документа заявителя.
//
// Возвращаемое значение:
//  Результат    - структура, содержащая паспортые данные заявителя.
//
Функция ПаспортныеДанныеПредыдущегоПаспорта(ФизЛицо, ВидДокумента, ДатаВыдачи) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ПарФизЛицо",   ФизЛицо);
	Запрос.УстановитьПараметр("ВидДокумента", ВидДокумента);
	Запрос.УстановитьПараметр("ДатаВыдачи",   ДатаВыдачи);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Паспорт.ВидДокумента КАК Вид,
	|	Паспорт.Серия КАК Серия,
	|	Паспорт.Номер КАК Номер,
	|	Паспорт.ДатаВыдачи КАК ДатаВыдачи,
	|	Паспорт.КемВыдан КАК Выдан,
	|	Паспорт.ПричинаИзменения КАК ПричинаИзменения
	|ИЗ
	|	РегистрСведений.ДокументыФизическихЛиц КАК Паспорт
	|ГДЕ
	|	Паспорт.ФизЛицо = &ПарФизЛицо
	|	И Паспорт.ВидДокумента = &ВидДокумента
	|	И Паспорт.ДатаВыдачи < &ДатаВыдачи";
	
	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();
	
	Результат = Новый Структура("Вид, Серия, Номер, ДатаВыдачи, Выдан, ПричинаИзменения");
	
	Результат.Вид              = Шапка.Вид;
	Результат.Серия            = Шапка.Серия;
	Результат.Номер            = Шапка.Номер;
	Результат.ДатаВыдачи       = Шапка.ДатаВыдачи;
	Результат.Выдан            = Шапка.Выдан;
	Результат.ПричинаИзменения = Шапка.ПричинаИзменения ;
	
	Возврат Результат;
	
КонецФункции // ПаспортныеДанныеПредыдущегоПаспорта()

#КонецОбласти 

//////////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

#Область ВспомогательныеПроцедурыИФункции

// Получает и заполняет данные благоустройства по лифту, санузлу и стандартам.
//
// Возвращаемое значение:
//  ТаблицаБлагоустройств - таблица значений с данными о благоустройствах.
//
Функция Благоустройства(ПараметрыОтчета)
	
	ЗданиеСсылка    = ПараметрыОтчета.Проживающий.Владелец.Адрес.Владелец;
	ПомещениеСсылка = ПараметрыОтчета.Проживающий.Владелец.Адрес;

	ТаблицаБлагоустройств = КВП_ПрочиеПроцедурыИФункции.ПолучитьБлагоустройстваОбъекта(ЗданиеСсылка, ПомещениеСсылка);
	
	ВидБлагоустройстваСанузел                 = Справочники.КВП_ВидыБлагоустройстваОбъектов.Санузел;
	ВидБлагоустройстваСоответствуетСтандартам = Справочники.КВП_ВидыБлагоустройстваОбъектов.СоответствуетСтандартамБлагоустройства;
	
	Для Каждого ТекСтрока Из ТаблицаБлагоустройств Цикл
		
		Если Не ТекСтрока.ВидБлагоустройства = ВидБлагоустройстваСанузел Тогда
			
			Если ТекСтрока.ВидБлагоустройства = ВидБлагоустройстваСоответствуетСтандартам Тогда
				ТекСтрока.Значение = ?(ТекСтрока.Значение = Истина, "Да", "Нет");
			ИначеЕсли ТипЗнч(ТекСтрока.Значение) = Тип("Булево") Тогда
				ТекСтрока.Значение = ?(ТекСтрока.Значение, "Есть", "Нет");
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТаблицаБлагоустройств;
	
КонецФункции // Благоустройства()

// Получает наименование документа собственности по лицевому счету на указанную дату.
//
// Параметры:
//  Период       - дата получения документа собственности.
//  ЛицевойСчет  - лицевой счет.
//  СтрокаСобственников  - строка из таблицы собственников помещения.
//
// Возвращаемое значение:
//  НаименованиеДокРегПраваСоб - информация о документе собственности строкой.
//
Функция ПолучитьДокументСобственности(Период, ЛицевойСчет, СтрокаСобственников)
	
	НаименованиеДокРегПраваСоб = "";
	
	НаименованиеДокРегПраваСоб = НаименованиеДокРегПраваСоб + ?(ЗначениеЗаполнено(НаименованиеДокРегПраваСоб), ", ", "");
	НаименованиеДокРегПраваСоб = НаименованиеДокРегПраваСоб + СтрокаСобственников.ВидДокумента;
	Если ЗначениеЗаполнено(СтрокаСобственников.НомерДокумента) Тогда
		НаименованиеДокРегПраваСоб = НаименованиеДокРегПраваСоб + " " + ПолучитьПредставлениеДокументаСобственности(СтрокаСобственников.НомерДокумента, СтрокаСобственников.ДатаДокумента);
	КонецЕсли;
	
	Возврат НаименованиеДокРегПраваСоб;
	
КонецФункции // ПолучитьДокументСобственности()

// Форматирует паспортные данные в одну строку.
//
// Параметры:
//  СтрокаДанных    - строка таблицы или структура, содержащие паспортные данные.
//
// Возвращаемое значение:
//  ФорматнаяСтрока - паспортные данные в виде строки.
//
Функция ПаспортныеДанныеФорматнаяСтрока(СтрокаДанных)
	
	СтруктураДанных = Новый Структура("Вид, Серия, Номер, ДатаВыдачи, Выдан, ПричинаИзменения");
	
	СтруктураДанных.Вид        = СтрокаДанных.Вид;
	СтруктураДанных.Серия      = СтрокаДанных.Серия;
	СтруктураДанных.Номер      = СтрокаДанных.Номер;
	СтруктураДанных.ДатаВыдачи = СтрокаДанных.ДатаВыдачи;
	СтруктураДанных.Выдан      = СтрокаДанных.Выдан;
	
	ФорматнаяСтрока = "";
	
	Если СтруктураДанных.Свойство("Серия") Тогда
		Серия           = ?(ЗначениеЗаполнено(СтруктураДанных.Серия), "Серия " + СтруктураДанных.Серия + " ", "");
		ФорматнаяСтрока = ФорматнаяСтрока + Серия;
	КонецЕсли;
	
	Если СтруктураДанных.Свойство("Номер") Тогда
		Номер           = ?(ЗначениеЗаполнено(СтруктураДанных.Номер), "Номер " + СтруктураДанных.Номер + " ", "");
		ФорматнаяСтрока = ФорматнаяСтрока + Номер;
	КонецЕсли;
	
	Если СтруктураДанных.Свойство("Выдан") Тогда
		Выдан           = ?(ЗначениеЗаполнено(СтруктураДанных.Выдан), ",выдан " + СтруктураДанных.Выдан + " ", "");
		ФорматнаяСтрока = ФорматнаяСтрока + Выдан;
	КонецЕсли;
	
	Если СтруктураДанных.Свойство("ДатаВыдачи") Тогда
		
		Если СтруктураДанных.ДатаВыдачи = Дата('00010101')
		 ИЛИ Не ЗначениеЗаполнено(СтруктураДанных.ДатаВыдачи) Тогда
			ДатаВыдачи = "";
		Иначе
			ДатаВыдачи = " , дата выдачи: " + Формат(СтруктураДанных.ДатаВыдачи,"ДЛФ=DD") + " ";
		КонецЕсли;
		
		ФорматнаяСтрока = ФорматнаяСтрока + ДатаВыдачи;
		
	КонецЕсли;
	
	Возврат ФорматнаяСтрока;
	
КонецФункции // ПаспортныеДанныеФорматнаяСтрока()

// Формирует сокращенную строку паспортных данных для вывода в таблицах.
//
Функция ПаспортныеДанныеСокращенно(СтруктураДанных)
	
	ФорматнаяСтрока = "";
	
	ФорматнаяСтрока = ФорматнаяСтрока + ?(Не ЗначениеЗаполнено(СтруктураДанных.Серия), "", СтруктураДанных.Серия        + " ");
	ФорматнаяСтрока = ФорматнаяСтрока + ?(Не ЗначениеЗаполнено(СтруктураДанных.Номер), "", " " + СтруктураДанных.Номер  + " ");
	ФорматнаяСтрока = ФорматнаяСтрока + ?(Не ЗначениеЗаполнено(СтруктураДанных.Выдан), "", ", " + СтруктураДанных.Выдан + " ");
	
	Если Не СтруктураДанных.ДатаВыдачи = Дата('00010101')
		 И ЗначениеЗаполнено(СтруктураДанных.ДатаВыдачи) Тогда
		ФорматнаяСтрока = ФорматнаяСтрока + " , от: " + Формат(СтруктураДанных.ДатаВыдачи,"ДЛФ=DD") + " ";
	КонецЕсли;
	
	Возврат ФорматнаяСтрока; 
	
КонецФункции // ПаспортныеДанныеСокращенно()

// Формирует сокращенную строку адреса прибытия/выбытия для вывода в таблицах.
//
Функция АдресРегистрацииСтрокой(ФизЛицо, ВидАдреса, ПараметрыОтчета)
	
	СтруктураАдрес = ПолучитьАдрес(ФизЛицо, ВидАдреса, , , , ?(ПараметрыОтчета.Дата_Период = 1, ПараметрыОтчета.Дата, ПараметрыОтчета.ДатаДо));
	
	Результат = "";
	Результат = Результат + " " + СтруктураАдрес.Страна          + " ";
	Результат = Результат + " " + СтруктураАдрес.Регион          + " ";
	Результат = Результат + " " + СтруктураАдрес.Район           + " ";
	Результат = Результат + " " + СтруктураАдрес.Город           + " ";
	Результат = Результат + " " + СтруктураАдрес.НаселенныйПункт + " ";
	Результат = Результат + " " + СтруктураАдрес.АдмОкруг        + " ";
	Результат = Результат + " " + СтруктураАдрес.Улица           + " ";
	Результат = Результат + " " + СтруктураАдрес.Дом             + " ";
	Результат = Результат + " " + СтруктураАдрес.Корпус          + " ";
	Результат = Результат + " " + СтруктураАдрес.НомерДома       + " ";
	Результат = Результат + " " + СтруктураАдрес.Квартира        + " ";
	
	Возврат Результат;
	
КонецФункции // АдресРегистрацииСтрокой()

// Возвращает признак наличия задолженности текущего месяца.
//
// Параметры:
//  ДоДатыСрокаОплаты - булево, признак вывода отчета до даты сркоа оплаты.
//
// Возвращаемое значение:
//  Булево - признак наличия задолженности в текущем месяце.
//
Функция НаличиеЗадолженности(ПараметрыОтчета, ДоДатыСрокаОплаты)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.Услуга КАК Услуга,
	|	СУММА(КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.СуммаНачисленияОстаток) КАК ДолгТекущегоМесяца
	|ИЗ
	|	РегистрНакопления.КВП_ВзаиморасчетыПоЛицевымСчетам.Остатки(
	|			КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(&ДатаСреза, МЕСЯЦ, -1), МЕСЯЦ),
	|			ЛицевойСчет = &ЛицевойСчет
	|				И Организация = &Организация) КАК КВП_ВзаиморасчетыПоЛицевымСчетамОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.Услуга";
	
	Запрос.УстановитьПараметр("ЛицевойСчет", ПараметрыОтчета.ЛицевойСчет);
	Запрос.УстановитьПараметр("Организация", ПараметрыОтчета.Организация);
	Если ДоДатыСрокаОплаты Тогда
		Запрос.УстановитьПараметр("ДатаСреза", ДобавитьМесяц(КонецМесяца(ПараметрыОтчета.Дата), -1));
	Иначе
		Запрос.УстановитьПараметр("ДатаСреза", ПараметрыОтчета.Дата);
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции // НаличиеЗадолженности()

#КонецОбласти 

#КонецЕсли
