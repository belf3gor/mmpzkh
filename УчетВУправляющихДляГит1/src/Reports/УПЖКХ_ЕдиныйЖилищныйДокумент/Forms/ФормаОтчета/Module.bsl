&НаКлиенте
Перем ПараметрыОбработчикаОжидания; // Хранит параметры обработчика ожидания.

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

#Область ПроцедурыИФункцииОбщегоНазначения

&НаСервере
// Процедура подготовки параметров учета.
Функция ПодготовитьПараметрыОтчета()
	
	ПараметрыОтчета = Новый Структура;
	ПараметрыОтчета.Вставить("Дата_Период",           Отчет.Дата_Период);
	ПараметрыОтчета.Вставить("Дата",                  НачалоДня(Отчет.Дата));
	ПараметрыОтчета.Вставить("ДатаДо",                КонецДня(Отчет.ДатаДо));
	ПараметрыОтчета.Вставить("НомерСправки",          Отчет.НомерСправки);
	ПараметрыОтчета.Вставить("Организация",           Отчет.Организация);
	ПараметрыОтчета.Вставить("Проживающий",           Отчет.Проживающий);
	ПараметрыОтчета.Вставить("ПаспортныеДанные",      Отчет.ПаспортныеДанные);
	ПараметрыОтчета.Вставить("ПредыдущийПаспорт",     Отчет.ПредыдущийПаспорт);
	ПараметрыОтчета.Вставить("ПричинаЗаменыПаспорта", Отчет.ПричинаЗаменыПаспорта);
	ПараметрыОтчета.Вставить("ЛицевойСчет",           Отчет.ЛицевойСчет);
	ПараметрыОтчета.Вставить("ВыводитьСчетчики",      Отчет.ВыводитьСчетчики);
	
	Возврат ПараметрыОтчета;
	
КонецФункции // ПодготовитьПараметрыОтчета()

&НаСервере
// Процедура формирует отчет на сервере.
Функция СформироватьОтчетНаСервере() Экспорт
	
	Если Не ПроверитьЗаполнение() Тогда 
		Возврат Новый Структура("ЗаданиеВыполнено", Истина);
	КонецЕсли;
	
	ИБФайловая = УПЖКХ_ТиповыеМетодыСервер.ИнформационнаяБазаФайловая();
	
	УПЖКХ_ТиповыеМетодыСервер.ОтменитьВыполнениеЗадания(ИдентификаторЗадания);
	
	ИдентификаторЗадания = Неопределено;
	
	УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеИспользовать");
	
	ПараметрыОтчета = ПодготовитьПараметрыОтчета();
	
	Если ИБФайловая Тогда
		АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
		Отчеты.УПЖКХ_ЕдиныйЖилищныйДокумент.СформироватьОтчет(ПараметрыОтчета, АдресХранилища);
		РезультатВыполнения = Новый Структура("ЗаданиеВыполнено", Истина);
	Иначе
		РезультатВыполнения = УПЖКХ_ТиповыеМетодыСервер.ЗапуститьВыполнениеВФоне(
			УникальныйИдентификатор, 
			"Отчеты.УПЖКХ_ЕдиныйЖилищныйДокумент.СформироватьОтчет", 
			ПараметрыОтчета, 
			УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьНаименованиеЗаданияВыполненияОтчета(ЭтаФорма));
		
		ИдентификаторЗадания = РезультатВыполнения.ИдентификаторЗадания;
		АдресХранилища       = РезультатВыполнения.АдресХранилища;
	КонецЕсли;
	
	Если РезультатВыполнения.ЗаданиеВыполнено Тогда
		ЗагрузитьПодготовленныеДанные();
	КонецЕсли;
	
	Возврат РезультатВыполнения;
	
КонецФункции // СформироватьОтчетНаСервере()

&НаСервере
// Процедура загрузки подготовленных данных.
Процедура ЗагрузитьПодготовленныеДанные()
	
	Результат = ПолучитьИзВременногоХранилища(АдресХранилища);
	
	УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеИспользовать");
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры // ЗагрузитьПодготовленныеДанные()

&НаКлиенте
// Процедуры проверяет выполнение задания.
Процедура Подключаемый_ПроверитьВыполнениеЗадания()
	
	Попытка
		Если ЗаданиеВыполнено(ИдентификаторЗадания) Тогда 
			ЗагрузитьПодготовленныеДанные();
			УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеИспользовать");
		Иначе
			УПЖКХ_ТиповыеМетодыКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
			ПодключитьОбработчикОжидания(
				"Подключаемый_ПроверитьВыполнениеЗадания", 
				ПараметрыОбработчикаОжидания.ТекущийИнтервал, 
				Истина);
		КонецЕсли;
	Исключение
		УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеИспользовать");
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры // Подключаемый_ПроверитьВыполнениеЗадания()

&НаСервереБезКонтекста
// Процедура проверяет, выполнено ли задание.
Функция ЗаданиеВыполнено(ИдентификаторЗадания)
	
	Возврат УПЖКХ_ТиповыеМетодыСервер.ЗаданиеВыполнено(ИдентификаторЗадания);
	
КонецФункции // ЗаданиеВыполнено()

&НаСервере
// Процедура отменяет выполнение задания.
Процедура ОтменитьВыполнениеЗадания()
	
	УПЖКХ_ТиповыеМетодыСервер.ОтменитьВыполнениеЗадания(ИдентификаторЗадания);
	
КонецПроцедуры // ОтменитьВыполнениеЗадания()

&НаКлиентеНаСервереБезКонтекста
// Управляет видимостью элементов формы.
Процедура УправлениеФормой(Форма)

	Отчет    = Форма.Отчет;
	Элементы = Форма.Элементы;
	
КонецПроцедуры // УправлениеФормой()

&НаСервере
// Устанавливает начальные настройки.
Процедура УстановитьНачальныеНастройки()
	
	Отчет.Дата = ТекущаяДатаСеанса();
	Отчет.Дата_Период = 1;
	
	УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеИспользовать");
	
КонецПроцедуры // УстановитьНачальныеНастройки()

#КонецОбласти 

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

#Область ОбработчикиСобытийФормы

&НаСервере
// Обработчик события "ПриСозданииНаСервере" формы.
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Установка настроек печати по умолчанию. Если настройки были изменены, они будут загружены при формировании отчета.
	Результат.АвтоМасштаб = Истина;
	
	УстановитьНачальныеНастройки();
	
КонецПроцедуры // ПриСозданииНаСервере()

&НаКлиенте
// Обработчик события "ПриОткрытии" формы.
Процедура ПриОткрытии(Отказ)
	
	УправлениеФормой(ЭтаФорма);
	ПолеДата_ПериодПриИзменении("");
	СтруктураНомераСправки = УПЖКХ_ТиповыеМетодыВызовСервера.ХранилищеОбщихНастроекЗагрузить("НомерСправки");
	Если ТипЗнч(СтруктураНомераСправки) = Тип("Структура") Тогда
		Отчет.НомерСправки = СтруктураНомераСправки.НомерСправки;
	Иначе
		Отчет.НомерСправки = 1;
	КонецЕсли;
	
КонецПроцедуры // ПриОткрытии()

&НаКлиенте
// Обработчик события "ПередЗакрытием" формы.
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ЗавершениеРаботы Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	ОтменитьВыполнениеЗадания();
	
	НомерСправки = ?(ЗначениеЗаполнено(Отчет.НомерСправки), Отчет.НомерСправки, 0);
	
	Попытка
		НомерСправкиДляСохранения = Формат((Число(НомерСправки) + 1), "ЧГ = 0");
	Исключение
		НомерСправкиДляСохранения = НомерСправки;
	КонецПопытки;
	
	СтруктураНомера = Новый Структура;
	
	СтруктураНомера.Вставить("НомерСправки", Строка(НомерСправкиДляСохранения));
	УПЖКХ_ТиповыеМетодыВызовСервера.ХранилищеОбщихНастроекСохранить("НомерСправки",,
																	СтруктураНомера);
	
КонецПроцедуры // ПриЗакрытии()

&НаСервере
// Процедура возникает при сохранении настроек на сервере.
Процедура ПриСохраненииПользовательскихНастроекНаСервере(Настройки)
	
	УПЖКХ_ТиповыеМетодыВызовСервера.ПриСохраненииПользовательскихНастроекНаСервере(ЭтаФорма, Настройки, Истина);
	
КонецПроцедуры // ПриСохраненииПользовательскихНастроекНаСервере()

&НаСервере
// Процедура возникает при загрузке настроек на сервере.
Процедура ПриЗагрузкеПользовательскихНастроекНаСервере(Настройки)
	
	Если Не ИспользоватьРучныеНастройки Тогда
		
		УПЖКХ_ТиповыеМетодыВызовСервера.ПриЗагрузкеПользовательскихНастроекНаСервере(ЭтаФорма, Настройки, Истина);
		
		УправлениеФормой(ЭтаФорма);
		
	КонецЕсли;
	
КонецПроцедуры // ПриЗагрузкеПользовательскихНастроекНаСервере()

#КонецОбласти 

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
// Обработчик события "ПриИзменении" поля "Организация".
Процедура ОрганизацияПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
КонецПроцедуры // ОрганизацияПриИзменении()

&НаКлиенте
// Обработчик события "ПриИзменении" поля "Дата".
Процедура ДатаПриИзменении(Элемент)
	
	Если Отчет.Дата_Период = 1 Тогда
		Дата = Отчет.Дата;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
КонецПроцедуры // ДатаПриИзменении()

&НаКлиенте
// Обработчик события "ПриИзменении" поля ДатыДо.
//
Процедура ДатаДоПриИзменении(Элемент)
	
	Дата = Отчет.ДатаДо;
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
КонецПроцедуры // ДатаДоПриИзменении()

&НаКлиенте
// Обработчик события "ПриИзменении" поля "Дата_Период".
Процедура ПолеДата_ПериодПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
	Элементы.ДатаДо.Видимость        = (Отчет.Дата_Период > 1);
	Элементы.ДекорацияТире.Видимость = (Отчет.Дата_Период > 1);
	
	УстановитьДатыВПоля();
	
	Если Отчет.ДатаДо < Отчет.Дата Тогда
		Отчет.ДатаДо = Отчет.Дата;
	КонецЕсли;
	
	
КонецПроцедуры // ПолеДата_ПериодПриИзменении()

&НаКлиенте
// Обработчик события "ПриИзменении" поля "НомерСправки".
Процедура НомерСправкиПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
КонецПроцедуры // НомерСправкиПриИзменении()

&НаКлиенте
// Обработчик события "ПриИзменении" поля "ЛицевойСчет".
Процедура ЛицевойСчетПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
	Отчет.Проживающий = ЗаполнитьПолучателя(Отчет.ЛицевойСчет, ?(Отчет.Дата_Период = 1, Отчет.Дата, Отчет.ДатаДо));
	
КонецПроцедуры // ЛицевойСчетПриИзменении()

&НаКлиенте
// Обработчик события "ПриИзменении" поля "Проживающий".
Процедура ПроживающийПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
КонецПроцедуры // ПроживающийПриИзменении()

&НаКлиенте
// Обработчик события "ПриИзменении" поля "ПаспортныеДанные".
Процедура ПаспортныеДанныеПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
КонецПроцедуры // ПаспортныеДанныеПриИзменении()

&НаКлиенте
// Обработчик события "ПриИзменении" поля "ПредыдущийПаспорт".
Процедура ПредыдущийПаспортПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
КонецПроцедуры // ПредыдущийПаспортПриИзменении()

&НаКлиенте
// Обработчик события "ПриИзменении" поля "ПричинаЗаменыПаспорта".
Процедура ПричинаЗаменыПаспортаПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
КонецПроцедуры // ПричинаЗаменыПаспортаПриИзменении()

#КонецОбласти 

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

#Область ПроцедурыДействияКомандныхПанелейФормы

&НаКлиенте
// Обработчик команды "СформироватьОтчет".
Процедура СформироватьОтчет(Команда)
	
	ОчиститьСообщения();
	
	ОтключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания");
	
	РезультатВыполнения = СформироватьОтчетНаСервере();
	Если Не РезультатВыполнения.ЗаданиеВыполнено Тогда
		УПЖКХ_ТиповыеМетодыКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
		УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "ФормированиеОтчета");
	КонецЕсли;

КонецПроцедуры // СформироватьОтчет()

&НаКлиенте
// Заполняет поля "Дата" и "ДатаДо" формы.
//
Процедура УстановитьДатыВПоля()
	
	Если Отчет.Дата_Период = 1 Тогда
		
		// Отчет формируется на дату.
		Отчет.Дата       = ?(Отчет.ДатаДо = Дата(1,1,1), ТекущаяДата(), Отчет.ДатаДо); // значение поля Дата.
		Дата = Отчет.Дата;
		
	Иначе
		
		// Отчет формируется на период.
		Отчет.ДатаДо     = ?(Отчет.Дата   = Дата(1,1,1), ТекущаяДата(), Отчет.Дата); // значение поля ДатаДо.
		Отчет.Дата       = НачалоГода(Отчет.ДатаДо);                     // значение поля Дата.
		Дата = Отчет.ДатаДо;
		
	КонецЕсли;

КонецПроцедуры // УстановитьДатыВПоля()

&НаСервере
// Заполняет поле Проживающий, если по лицевому счету он один.
//
// Параметры:
//  ВыбранноеЗначение - лицевой счет.
//
Функция ЗаполнитьПолучателя(ВыбранноеЗначение, Дата)

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЕСТЬNULL(УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.Жилец, УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчетаСрезПоследних.ОтветственныйВладелец) КАК Значение
	|ИЗ
	|	РегистрСведений.УПЖКХ_СведенияОЗарегистрированных.СрезПоследних(
	|			&Дата,
	|			ЛицевойСчет = &ЛицевойСчет
	|				И ДатаИзменения <= &Дата) КАК УПЖКХ_СведенияОЗарегистрированныхСрезПоследних
	|		ПОЛНОЕ СОЕДИНЕНИЕ РегистрСведений.УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчета.СрезПоследних(&Дата, ЛицевойСчет = &ЛицевойСчет) КАК УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчетаСрезПоследних
	|		ПО УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.ЛицевойСчет = УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчетаСрезПоследних.ЛицевойСчет";

	Запрос.УстановитьПараметр("Дата",        Дата);
	Запрос.УстановитьПараметр("ЛицевойСчет", ВыбранноеЗначение);

	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	Проживающий = ?(РезультатЗапроса.Количество() = 1, РезультатЗапроса[0].Значение, Справочники.УПЖКХ_Жильцы.ПустаяСсылка());
	
	Возврат Проживающий;
	
КонецФункции // ЗаполнитьПолучателя()

#КонецОбласти 
