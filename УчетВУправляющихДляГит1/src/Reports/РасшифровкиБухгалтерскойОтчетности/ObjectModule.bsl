#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ПолучениеСтруктурДанных

Функция СформироватьСтруктуруРеквизитовФормы() Экспорт

	СтруктураРеквизитовФормы = Новый Структура;
	СтруктураРеквизитовФормы.Вставить("мВыбраннаяФорма");
	СтруктураРеквизитовФормы.Вставить("мСкопированаФорма");
	СтруктураРеквизитовФормы.Вставить("мСохраненныйДок");
	СтруктураРеквизитовФормы.Вставить("мДатаНачалаПериодаОтчета");
	СтруктураРеквизитовФормы.Вставить("мДатаКонцаПериодаОтчета");
	СтруктураРеквизитовФормы.Вставить("мЗаписываетсяНовыйДокумент");
	СтруктураРеквизитовФормы.Вставить("мВариант");
	СтруктураРеквизитовФормы.Вставить("мВерсияФормы");
	СтруктураРеквизитовФормы.Вставить("мВПрограммеИзмененаОрганизация", Ложь);
	СтруктураРеквизитовФормы.Вставить("мБезОткрытияФормы");
	СтруктураРеквизитовФормы.Вставить("мРежимПечати");
	СтруктураРеквизитовФормы.Вставить("НаимТекущегоРаздела");
	СтруктураРеквизитовФормы.Вставить("НомерСтраницыТекущегоРаздела");
	СтруктураРеквизитовФормы.Вставить("ВидДокумента");
	СтруктураРеквизитовФормы.Вставить("СтрПериодОтчета");
	
	СтруктураРеквизитовФормы.Вставить("Организация");
	СтруктураРеквизитовФормы.Вставить("СписокОрганизаций");
	СтруктураРеквизитовФормы.Вставить("ИП");
	СтруктураРеквизитовФормы.Вставить("НаимОрганизации");
	
	СтруктураРеквизитовФормы.Вставить("ВыводитьСтраницуВТаблДокНаСервере");
	СтруктураРеквизитовФормы.Вставить("ФлажокОтклАвтоРасчет", Ложь);
	СтруктураРеквизитовФормы.Вставить("ТекущаяСтрокаРазделовОтчета");
	СтруктураРеквизитовФормы.Вставить("АдресВоВременномХранилище");
	
	СтруктураРеквизитовФормы.Вставить("Банк");
	
	СтруктураРеквизитовФормы.Вставить("ЕдиницаИзмерения");
	СтруктураРеквизитовФормы.Вставить("ТочностьЕдиницыИзмерения");
	СтруктураРеквизитовФормы.Вставить("мСтрокаФормата");
	
	СтруктураРеквизитовФормы.Вставить("НомераСтрокМногоуровнегоРаздела");
	СтруктураРеквизитовФормы.Вставить("СтруктураМногострочныхЧастей");
	СтруктураРеквизитовФормы.Вставить("ДлинаИмениГруппы");
	СтруктураРеквизитовФормы.Вставить("ДлинаИмениГрафы");
	
	СтруктураРеквизитовФормы.Вставить("АвтозаполняемыеПоказатели");
	СтруктураРеквизитовФормы.Вставить("СформироватьФормуОтчетаАвтоматически", Ложь);
	
	СтруктураРеквизитовФормы.Вставить("АктивныйСегмент");
	
	// Параметр используется для открытия формы длительной операции
	// при автоматическом заполнении отчета при создании.
	//   Значения:
	//     Неопределено - задание не запускалось.
	//     Структура    - параметры запуска и результат.
	СтруктураРеквизитовФормы.Вставить("РезультатЗапускаАвтозаполненияПриСоздании");
	
	Возврат СтруктураРеквизитовФормы;
	
КонецФункции

Функция ПолноеОписаниеФайла(ИмяФайла, АдресХранения, РазмерФайла, Знач ДатаДобавления = Неопределено) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ДатаДобавления) Тогда
		ДатаДобавления = ТекущаяДатаСеанса();
	КонецЕсли;
	
	Описание = Новый Структура;
	
	Описание.Вставить("ИмяФайла", ИмяФайла);
	Описание.Вставить("АдресХранения", АдресХранения);
	Описание.Вставить("РазмерФайла", РазмерФайла);
	Описание.Вставить("ДатаДобавления", ДатаДобавления);
	
	Возврат Описание;
	
КонецФункции

Процедура ИнициализироватьМногострочныеЧасти(СтруктураРеквизитовФормы) Экспорт
	
	// Свойства, общие для всех многострочных групп.
	СтруктураРеквизитовФормы.ДлинаИмениГруппы = 8;
	СтруктураРеквизитовФормы.ДлинаИмениГрафы  = 13;
	
	// Структура с описанием свойств каждой группы в отдельности.
	СтруктураМногострочныхЧастей = Новый Структура;
	
	СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей = СтруктураМногострочныхЧастей;
	
КонецПроцедуры

Функция ИнициализироватьМногоуровневыеРазделы(СтруктураРеквизитовФормы) Экспорт
	
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела = Новый Массив;
	
	СтруктураМногоуровневыхРазделов = Новый Структура;
	
	// Оборотно-сальдовая ведомость по всем счетам.
	
	СтруктураРаздела = Новый Структура;
	СтруктураРаздела.Вставить("Многостраничность");
	СтруктураМногоуровневыхРазделов.Вставить("ОборотноСальдоваяВедомость", СтруктураРаздела);
	
	// Анализ счета.
	
	СтруктураРаздела = Новый Структура;
	СтруктураРаздела.Вставить("СписокСтраниц", "СписокСтраницАнализСчета");
	СтруктураМногоуровневыхРазделов.Вставить("АнализСчета", СтруктураРаздела);
	
	// Операции по банковским счетам.
	
	СтруктураРаздела = Новый Структура;
	СтруктураРаздела.Вставить("СписокСтраниц", "СписокСтраницОперацииПоБанковскимСчетам");
	СтруктураМногоуровневыхРазделов.Вставить("ОперацииПоБанковскимСчетам", СтруктураРаздела);
	
	Возврат СтруктураМногоуровневыхРазделов;
	
КонецФункции

Функция ПараметрыСтраницыРазделаНовогоОтчета(ИмяРаздела, ДополнительныеСведения = Неопределено, ПериодОтчета = Неопределено) Экспорт
	
	ПараметрыРаздела = Новый Структура;
	ПараметрыРаздела.Вставить("НаименованиеСтраницы"); // Строка - наименование страницы в дереве разделов
	
	Если ИмяРаздела = "АнализСчета"
		ИЛИ ИмяРаздела = "ОперацииПоБанковскимСчетам" Тогда
		
		ПараметрыРаздела.Вставить("Счет", ДополнительныеСведения.Счет); // ПланСчетовСсылка.Хозрасчетный - счет, по которому заполняется отчет
		ПараметрыРаздела.Вставить("НаименованиеСтраницы", ДополнительныеСведения.Счет.Код); // Строка - наименование страницы в дереве разделов
		ПараметрыРаздела.Вставить("ДатаНачалаПериода", ?(ПериодОтчета <> Неопределено, ПериодОтчета.ДатаНачалаПериода, '0001-01-01')); // Дата - начало периода отчета
		ПараметрыРаздела.Вставить("ДатаКонцаПериода",  ?(ПериодОтчета <> Неопределено, ПериодОтчета.ДатаКонцаПериода, '0001-01-01')); // Дата - конец периода отчета
		ПараметрыРаздела.Вставить("Банки",             ?(ПериодОтчета <> Неопределено, ПериодОтчета.Банки, Неопределено));
		
	ИначеЕсли ИмяРаздела = "ОборотноСальдоваяВедомость" Тогда	
		
		ПараметрыРаздела.Вставить("ДатаНачалаПериода", ?(ПериодОтчета <> Неопределено, НачалоМесяца(ПериодОтчета.ДатаНачала), '0001-01-01')); // Дата - начало периода отчета
		ПараметрыРаздела.Вставить("ДатаКонцаПериода",  ?(ПериодОтчета <> Неопределено, КонецМесяца(ПериодОтчета.ДатаОкончания), '0001-01-01')); // Дата - конец периода отчета
		ПараметрыРаздела.Вставить("Банки",             ?(ПериодОтчета <> Неопределено, ПериодОтчета.Банки, Неопределено));
		
	КонецЕсли;
	
	Возврат ПараметрыРаздела;
	
КонецФункции

Функция ПараметрыЭлектронногоПредставления(КонтекстФормирования, ПараметрыУниверсальнойВыгрузки) Экспорт

	СтруктураРеквизитовФормы = КонтекстФормирования.СтруктураРеквизитовФормы;
	ТитульныйЛист = КонтекстФормирования.мДанныеОтчета.ПолеТабличногоДокументаТитульный;
	
	СохраненныйОтчет = СтруктураРеквизитовФормы.мСохраненныйДок;
	Организация = СтруктураРеквизитовФормы.Организация;
	
	ПараметрыВыгрузки = Новый Структура;
	
	ПараметрыВыгрузки.Вставить("ВерсФорм", "1.01.02");
	
	ПараметрыВыгрузки.Вставить("ВерсПрог", РегламентированнаяОтчетность.НазваниеИВерсияПрограммы());
	ПараметрыВыгрузки.Вставить("ДатаДок",  Формат(ТекущаяДатаСеанса(), "ДФ=дд.ММ.гггг"));
	
	ПараметрыВыгрузки.Вставить("ВидДок",         Строка(СохраненныйОтчет.Вид));
	ПараметрыВыгрузки.Вставить("НаимОрг",        СокрЛП(ТитульныйЛист.НаименованиеОрганизации));
	ПараметрыВыгрузки.Вставить("НаимОргКраткое", СокрЛП(ТитульныйЛист.НаименованиеОрганизацииКраткое));
	
	Если СтруктураРеквизитовФормы.ИП Тогда

		ПараметрыВыгрузки.Вставить("ИНН", СокрЛП(Организация.ИНН));
		ФИО = РегламентированнаяОтчетность.РазложитьФИО(ТитульныйЛист.НаименованиеОрганизации);
		
		ПараметрыВыгрузки.Вставить("ФЛФамилия",  ФИО.Фамилия);
		ПараметрыВыгрузки.Вставить("ФЛИмя",      ФИО.Имя);
		ПараметрыВыгрузки.Вставить("ФЛОтчество", ФИО.Отчество);
		
	Иначе

		ПараметрыВыгрузки.Вставить("ИНН", СокрЛП(ТитульныйЛист.ИНН));
		ПараметрыВыгрузки.Вставить("КПП", СокрЛП(ТитульныйЛист.КПП));
		
	КонецЕсли;
	
	ПараметрыВыгрузки.Вставить("ЭтоПБОЮЛ",          СтруктураРеквизитовФормы.ИП);
	ПараметрыВыгрузки.Вставить("КодИФНС",           СокрЛП(Организация.КодНалоговогоОргана));
	ПараметрыВыгрузки.Вставить("КодИФНСПосредника",
		?(Организация.КрупнейшийНалогоплательщик, СокрЛП(Организация.КодНалоговогоОрганаПолучателя), ""));
		
	ПараметрыВыгрузки.Вставить("ПрПодп", "1");
	
	ФИОРук = РегламентированнаяОтчетность.РазложитьФИО(ТитульныйЛист.Подписант);
	ПараметрыВыгрузки.Вставить("ПодпФамилия",  СокрЛП(ФИОРук.Фамилия));
	ПараметрыВыгрузки.Вставить("ПодпИмя",      СокрЛП(ФИОРук.Имя));
	ПараметрыВыгрузки.Вставить("ПодпОтчество", СокрЛП(ФИОРук.Отчество));
	
	ПараметрыВыгрузки.Вставить("ПодпНаимДок", "");
	
	ПараметрыВыгрузки.Вставить("ДатаУтвОтч", "");
	Если ТитульныйЛист.Свойство("ДатаУтвОтчетности") И ЗначениеЗаполнено(ТитульныйЛист.ДатаУтвОтчетности) Тогда
		ПараметрыВыгрузки.Вставить("ДатаУтвОтч", Формат(ТитульныйЛист.ДатаУтвОтчетности, "ДФ=дд.ММ.гггг"));
	КонецЕсли;
	
	КонецОтчетногоПериода = КонецДня(СохраненныйОтчет.ДатаОкончания);
	ПараметрыВыгрузки.Вставить("КонецОтчетногоПериода", КонецОтчетногоПериода);
	
	ДеревоНастройкиСтраниц = СохраненныйОтчет.ДеревоНастройкиСтраниц.Получить();
	ПараметрыВыгрузки.Вставить("ДеревоНастройкиСтраниц", ДеревоНастройкиСтраниц);
	
	ПараметрыВыгрузки.Вставить("Отбор", ОтборДляВыгрузки(ПараметрыУниверсальнойВыгрузки));

	СгенерироватьИмяФайлаВыгрузки(ПараметрыВыгрузки);
	
	Возврат ПараметрыВыгрузки;
	
КонецФункции

Процедура СгенерироватьИмяФайлаВыгрузки(ПараметрыВыгрузки)

	ПараметрыВыгрузки.Вставить("ИдентификаторФайлаВыгрузки", Строка(Новый УникальныйИдентификатор));
	
	ИдОтправителя = ?(ПараметрыВыгрузки.Свойство("ЭтоПБОЮЛ") И ПараметрыВыгрузки.ЭтоПБОЮЛ,
		СокрЛП(ПараметрыВыгрузки.ИНН),
		СокрЛП(ПараметрыВыгрузки.ИНН) + СокрЛП(ПараметрыВыгрузки.КПП));
	
	// Задаем необходимую структуру идентификаторов.
	СтруктураИдентификаторов = Новый Структура;
	СтруктураИдентификаторов.Вставить("ДанныеЗаемщика", Новый Структура("ИдентификаторЗаемщика", ИдОтправителя));
	СтруктураИдентификаторов.Вставить("ДанныеЗаявки",
		Новый Структура("ИдентификаторЗаявки", ПараметрыВыгрузки.ИдентификаторФайлаВыгрузки));
		
	ПараметрыРасшифровкиБухОтчетности = ПараметрыВыгрузки.Отбор;
	
	СоставнойКлючУникальности = Новый Массив;
	СоставнойКлючУникальности.Добавить(ПараметрыРасшифровкиБухОтчетности.ВидОтчета);
	СоставнойКлючУникальности.Добавить(ПараметрыРасшифровкиБухОтчетности.КодСчета);
	Если ЗначениеЗаполнено(ПараметрыРасшифровкиБухОтчетности.ДатаНачала) Тогда
		СоставнойКлючУникальности.Добавить(Формат(ПараметрыРасшифровкиБухОтчетности.ДатаНачала, "ДФ=ггггММдд"));
	КонецЕсли;
	Если ЗначениеЗаполнено(ПараметрыРасшифровкиБухОтчетности.ДатаОкончания) Тогда
		СоставнойКлючУникальности.Добавить(Формат(ПараметрыРасшифровкиБухОтчетности.ДатаОкончания, "ДФ=ггггММдд"));
	КонецЕсли;
	
	ИдФайл = ИмяФайлаДляКонтейнера(СтруктураИдентификаторов, СоставнойКлючУникальности);
	
	ПараметрыВыгрузки.Вставить("ИдФайл", ИдФайл);

КонецПроцедуры

#КонецОбласти

#Область ПроверкиИФильтры

Функция СтрокаСИндексомПоказателя(Знач Индекс) Экспорт
	
	Если ТипЗнч(Индекс) <> Тип("Число") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат "_" + Формат(Индекс, "ЧГ=");
	
КонецФункции

Функция ДелительПоЕдиницеИзмерения(ЕдиницаИзмерения) Экспорт
	
	Делитель = 0;
	
	Если ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1 Тогда
		Делитель = 1;
	ИначеЕсли ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1000 Тогда
		Делитель = 1000;
	ИначеЕсли ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1000000 Тогда
		Делитель = 1000000;
	КонецЕсли;
	
	Возврат Делитель;
	
КонецФункции

Функция РазделВключенВОтчет(ИмяРаздела, СписокРазделов) Экспорт

	Результат = Ложь;
	
	НайденнаяСтраницаОтчета = СписокРазделов.Строки.Найти(ИмяРаздела, "ИмяСтраницы", Истина);
	
	Если НайденнаяСтраницаОтчета <> Неопределено Тогда
		Результат = (НайденнаяСтраницаОтчета.ПоказатьСтраницу = 1);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ВыборкаСегментовОтчетаПоСчету(ИмяРаздела, СчетУчета, СохраненныйДокумент) Экспорт
	
	ШаблонОтбора = ИмяРаздела + "." + СчетУчета.УникальныйИдентификатор() + ".%";
	
	Возврат ВыборкаСегментовОтчетаПоШаблону(ШаблонОтбора, СохраненныйДокумент);
	
КонецФункции

Функция ПрефиксСегментаОтчетаПоСчетуПериоду(ИмяРаздела, СчетУчета, ДатаНачалаПериода, ДатаКонцаПериода) Экспорт

	Возврат ИмяРаздела + "." + СчетУчета.УникальныйИдентификатор() + "."
		+ СтрокаГГММ_ГГММ(ДатаНачалаПериода, ДатаКонцаПериода);

КонецФункции

Функция ВыборкаСегментовОтчетаПоСчетуПериоду(ИмяРаздела, СчетУчета, ДатаНачалаПериода, ДатаКонцаПериода, СохраненныйДокумент) Экспорт
	
	ШаблонОтбора = ПрефиксСегментаОтчетаПоСчетуПериоду(ИмяРаздела, СчетУчета, ДатаНачалаПериода, ДатаКонцаПериода) + ".%";
	
	Возврат ВыборкаСегментовОтчетаПоШаблону(ШаблонОтбора, СохраненныйДокумент);
	
КонецФункции

Функция ВыборкаСегментовОтчетаПоШаблону(ШаблонОтбора, СохраненныйДокумент) Экспорт
	
	ЗапросПоДанным = Новый Запрос;
	ЗапросПоДанным.Текст = "ВЫБРАТЬ
	                       |	ДополнительныеФайлыРегламентированныхОтчетов.ВидДополнительногоФайла КАК ВидДополнительногоФайла
	                       |ИЗ
	                       |	РегистрСведений.ДополнительныеФайлыРегламентированныхОтчетов КАК ДополнительныеФайлыРегламентированныхОтчетов
	                       |ГДЕ
	                       |	ДополнительныеФайлыРегламентированныхОтчетов.РегламентированныйОтчет = &РегламентированныйОтчет
	                       |	И ДополнительныеФайлыРегламентированныхОтчетов.ВидДополнительногоФайла ПОДОБНО &ШаблонОтбора
	                       |
	                       |УПОРЯДОЧИТЬ ПО
	                       |	ВидДополнительногоФайла";
	
	ЗапросПоДанным.УстановитьПараметр("ШаблонОтбора", ШаблонОтбора);
	ЗапросПоДанным.УстановитьПараметр("РегламентированныйОтчет", СохраненныйДокумент);
	
	ВыборкаСегментов = ЗапросПоДанным.Выполнить().Выбрать();
	
	Возврат ВыборкаСегментов;
	
КонецФункции

Функция ПроверитьВозможностьВыгрузки(КонтекстФормирования, ПараметрыВыгрузки, РезультатВыгрузки = Неопределено) Экспорт

	Если РезультатВыгрузки = Неопределено Тогда
		
		РезультатВыгрузки = РегламентированнаяОтчетность.НовыйРезультатВыгрузкиРеглОтчета();
		РезультатВыгрузки.ТипФайлаВыгрузки       = "РасшифровкиБухгалтерскойОтчетности";
		РезультатВыгрузки.КодировкаФайлаВыгрузки = "windows-1251";

	КонецЕсли;
	
	СтруктураРеквизитовФормы = КонтекстФормирования.СтруктураРеквизитовФормы;
	
	СтатусПроверки = Истина;
	
	ПроверитьЗаполнение_Титульный(СтатусПроверки, ПараметрыВыгрузки, СтруктураРеквизитовФормы, РезультатВыгрузки);
	
	ПроверитьЗаполнение_ОСВ(СтатусПроверки, ПараметрыВыгрузки, СтруктураРеквизитовФормы, РезультатВыгрузки);
	
	ПроверитьЗаполнение_АнализСчета(СтатусПроверки, ПараметрыВыгрузки, КонтекстФормирования, РезультатВыгрузки);
	
	ПроверитьЗаполнение_ОперацииПоБанковскимСчетам(СтатусПроверки, ПараметрыВыгрузки, СтруктураРеквизитовФормы, РезультатВыгрузки);
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(КонтекстФормирования, "ТаблицаСообщений") Тогда
		Если ТипЗнч(КонтекстФормирования) = Тип("УправляемаяФорма") Тогда
			КонтекстФормирования.ТаблицаСообщений.Загрузить(РезультатВыгрузки.ТаблицаСообщений);
		Иначе
			КонтекстФормирования.ТаблицаСообщений = РезультатВыгрузки.ТаблицаСообщений;
		КонецЕсли;
	КонецЕсли;
	
	Возврат СтатусПроверки;
	
КонецФункции

#КонецОбласти

#Область ВыгрузкаРегламентированногоОтчета

Функция МакетРаздела(ИмяФормы, ИмяРаздела) Экспорт
	
	ИмяМакета = Сред(ИмяФормы, СтрНайти(ИмяФормы, "ФормаОтчета")) + "_" + ИмяРаздела;
	МакетРаздела = ПолучитьМакет(ИмяМакета);
	
	Возврат МакетРаздела;
	
КонецФункции

Функция ДанныеТабличногоДокумента(СохрТаблДокумент, НаимРаздела, КонтекстФормирования) Экспорт
	
	Перем СтруктураРаздела, ИменаГруппМнЧ;
	
	СтруктураМногоуровневыхРазделов = КонтекстФормирования.мСтруктураМногоуровневыхРазделов;
	СтруктураРеквизитовФормы = КонтекстФормирования.СтруктураРеквизитовФормы;
	
	ДанныеТаблДокумента = Новый Структура;
	
	Если СтруктураМногоуровневыхРазделов.Свойство(НаимРаздела, СтруктураРаздела) Тогда
		// Многоуровневые разделы.
		РазделСодержитМнЧ = (СтруктураРаздела.Свойство("ИменаГруппМнЧ", ИменаГруппМнЧ) И ИменаГруппМнЧ <> Неопределено);
		
		СтруктураДанных = Новый Структура;
		Для Каждого ТекущаяОбласть Из СохрТаблДокумент.Области Цикл
			Если СтрЧислоВхождений(Тип(ТекущаяОбласть), "Рисунок") = 0
			   И ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник
			   И ТекущаяОбласть.СодержитЗначение = Истина Тогда
				Если РазделСодержитМнЧ Тогда
					Если МногострочнаяЧастьТекущейОбласти(СтруктураРеквизитовФормы, ТекущаяОбласть.Имя) = Неопределено Тогда
						СтруктураДанных.Вставить(ТекущаяОбласть.Имя, ТекущаяОбласть.Значение);
					КонецЕсли;
				Иначе
					СтруктураДанных.Вставить(ТекущаяОбласть.Имя, ТекущаяОбласть.Значение);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		ДанныеТаблДокумента.Вставить("Данные", СтруктураДанных);
		
		СтруктураДанныхМногострочныхЧастей = Новый Структура;
		Если РазделСодержитМнЧ Тогда
			Для каждого ИмяГруппыМнЧ Из СтруктураРаздела["ИменаГруппМнЧ"] Цикл
				ЭлемСтруктуры = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппыМнЧ];
				Если ЭлемСтруктуры["УровеньПодчинения"] = 0 Тогда
					ДеревоДанных = Новый ДеревоЗначений;
					ДеревоДанных.Колонки.Добавить("Данные");
					ДеревоДанных.Колонки.Добавить("ДанныеМногострочныхЧастей");
					СформироватьДеревоМногострочнойЧастиПоДаннымТабличногоДокумента(
						СохрТаблДокумент, ИмяГруппыМнЧ, ДеревоДанных, , СтруктураРеквизитовФормы);
					СтруктураДанныхМногострочныхЧастей.Вставить(ИмяГруппыМнЧ, ДеревоДанных);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		ДанныеТаблДокумента.Вставить("ДанныеМногострочныхЧастей", СтруктураДанныхМногострочныхЧастей);
		
	Иначе
		// Обычные разделы.
		Для Инд = 0 По СохрТаблДокумент.Области.Количество() - 1 Цикл
			ТекОбласть = СохрТаблДокумент.Области[Инд];
			
			Если СтрЧислоВхождений(Тип(ТекОбласть), "Рисунок") = 0
			   И ТекОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник
			   И ТекОбласть.СодержитЗначение = Истина Тогда
				
				ДанныеТаблДокумента.Вставить(ТекОбласть.Имя, ТекОбласть.Значение);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ДанныеТаблДокумента;
	
КонецФункции

Функция ПодготовитьСведенияСохраненногоОтчета(СтруктураРеквизитовФормы, СтруктураОтчета = Неопределено) Экспорт
	
	мДанныеОтчета = Новый Структура;
	
	Если СтруктураОтчета = Неопределено Тогда
		СтруктураОтчета = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить();
	КонецЕсли;

	Для Каждого Раздел Из СтруктураОтчета.ПоказателиОтчета Цикл
		мДанныеОтчета.Вставить(Раздел.Ключ, Раздел.Значение);
	КонецЦикла;

	Возврат мДанныеОтчета;
	
КонецФункции

Процедура СформироватьДанныеМногоуровневыхРазделов(КонтекстФормирования) Экспорт
	
	Если ТипЗнч(КонтекстФормирования) = Тип("УправляемаяФорма") Тогда
		ВызовИзФормы = Истина;
		ТабличныйДокумент = КонтекстФормирования.ТабличныйДокумент;
		
	Иначе
		ВызовИзФормы = Ложь;
		ТабличныйДокумент = Новый ТабличныйДокумент;
		
	КонецЕсли;
	
	// Формирование начальной структуры дерева разделов
	// с заполнением каждого уровня пустыми данными.
	
	СтруктураМногоуровневыхРазделов = КонтекстФормирования.мСтруктураМногоуровневыхРазделов;
	СтруктураРеквизитовФормы        = КонтекстФормирования.СтруктураРеквизитовФормы;
	ИмяФормы = СтруктураРеквизитовФормы.мВыбраннаяФорма;
	
	ДеревоДанных = Новый ДеревоЗначений;
	ДеревоДанных.Колонки.Добавить("Данные");
	ДеревоДанных.Колонки.Добавить("ДанныеМногострочныхЧастей");
	ДеревоДанных.Колонки.Добавить("Параметры");
	ДеревоДанных.Колонки.Добавить("ДополнительныеДанные");
	
	СохрТаблДокумент = Новый ТабличныйДокумент;
	СохрТаблДокумент.Вывести(ТабличныйДокумент);
	
	Для Каждого Элем Из СтруктураМногоуровневыхРазделов Цикл
		ИмяРаздела = Элем.Ключ;
		
		Если Элем.Значение.Свойство("Подчиненность") Тогда
			Продолжить;
		КонецЕсли;
		
		ДеревоДанныхРаздела = ДеревоДанных.Скопировать();
		
		ТабличныйДокумент.Очистить();
		ТабличныйДокумент.Вывести(МакетРаздела(ИмяФормы, ИмяРаздела));
		
		Если Элем.Значение.Свойство("СписокСтраниц") Тогда
			СписокСтраниц = ?(ВызовИзФормы,
				КонтекстФормирования.РеквизитФормыВЗначение("СписокСтраниц" + ИмяРаздела),
				КонтекстФормирования["СписокСтраниц" + ИмяРаздела]);
			Для Каждого Страница Из СписокСтраниц Цикл
				ТекВетка = ДеревоДанныхРаздела.Строки.Добавить();
				
				ДанныеТаблДокумента = ДанныеТабличногоДокумента(ТабличныйДокумент, ИмяРаздела, КонтекстФормирования);
				
				// Если период отчета только один, то выводим его сразу без вложенных веток.
				ПериодОтчета = Неопределено;
				Если Страница.Периоды.Количество() = 1 Тогда
					ПериодОтчета = Страница.Периоды[0];
				КонецЕсли;
				
				ТекВетка.Данные = ДанныеТаблДокумента.Данные;
				ТекВетка.ДанныеМногострочныхЧастей = ДанныеТаблДокумента.ДанныеМногострочныхЧастей;
				ТекВетка.Параметры = ПараметрыСтраницыРазделаНовогоОтчета(ИмяРаздела, Страница, ПериодОтчета);
				
				// Добавляем страницы для каждого периода отчета.
				Для Каждого ПериодОтчета Из Страница.Периоды Цикл
					ТекВеткаПериода = ТекВетка.Строки.Добавить();
					
					ТекВеткаПериода.Данные = ДанныеТаблДокумента.Данные;
					ТекВеткаПериода.ДанныеМногострочныхЧастей = ДанныеТаблДокумента.ДанныеМногострочныхЧастей;
					ТекВеткаПериода.Параметры = ПараметрыСтраницыРазделаНовогоОтчета(ИмяРаздела, Страница, ПериодОтчета);
					
				КонецЦикла;
				
			КонецЦикла;
			
		Иначе
			ПериодОтчета = Неопределено;
			
			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(КонтекстФормирования, "Параметры")
			   И КонтекстФормирования.Параметры.Свойство("СписокОтчетов")
			   И ЗначениеЗаполнено(КонтекстФормирования.Параметры.СписокОтчетов) Тогда
				СписокОтчетов = КонтекстФормирования.Параметры.СписокОтчетов;
				Для Каждого ОтчетЗаемщика Из СписокОтчетов Цикл
					// В списке отчетов может быть несколько периодов одного отчета
					Если ОтчетЗаемщика.ВидОтчета <> ИмяРаздела Тогда
						Продолжить;
					КонецЕсли;
					
					ПериодОтчета = ОтчетЗаемщика;
					ТекВетка = ДеревоДанныхРаздела.Строки.Добавить();
					
					ДанныеТаблДокумента = ДанныеТабличногоДокумента(ТабличныйДокумент, ИмяРаздела, КонтекстФормирования);
					
					ТекВетка.Данные = ДанныеТаблДокумента.Данные;
					ТекВетка.ДанныеМногострочныхЧастей = ДанныеТаблДокумента.ДанныеМногострочныхЧастей;
					ТекВетка.Параметры = ПараметрыСтраницыРазделаНовогоОтчета(ИмяРаздела,, ПериодОтчета);
					
					СформироватьДанныеПодчиненныхРазделов(ТабличныйДокумент, ИмяРаздела, ТекВетка, КонтекстФормирования); 
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ВызовИзФормы Тогда
			АдресВоВрХранилище = ПоместитьВоВременноеХранилище(ДеревоДанныхРаздела, КонтекстФормирования.УникальныйИдентификатор);
		Иначе
			АдресВоВрХранилище = ПоместитьВоВременноеХранилище(ДеревоДанныхРаздела);
		КонецЕсли;
		
		СтруктураРеквизитовФормы.Вставить("АдресВоВрХранилищеДеревоДанных" + ИмяРаздела, АдресВоВрХранилище);
		
	КонецЦикла;
	
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(СохрТаблДокумент);
	
КонецПроцедуры

Процедура СформироватьДанныеПодчиненныхРазделов(СохрТаблДокумент, Знач ИмяРаздела, Ветка, КонтекстФормирования) Экспорт 
		
	СтруктураМногоуровневыхРазделов = КонтекстФормирования.мСтруктураМногоуровневыхРазделов;
	ИмяФормы = КонтекстФормирования.СтруктураРеквизитовФормы.мВыбраннаяФорма;
		
	Если СтруктураМногоуровневыхРазделов[ИмяРаздела].Свойство("ИменаПодчиненныхРазделов") Тогда
		
		ИменаПодчРазделов = СтруктураМногоуровневыхРазделов[ИмяРаздела]["ИменаПодчиненныхРазделов"];
		
		Для Каждого ИмяПодчРаздела Из ИменаПодчРазделов Цикл
			ПодчВетка = Ветка.Строки.Добавить().Строки.Добавить();
			
			СохрТаблДокумент.Очистить();
			СохрТаблДокумент.Вывести(МакетРаздела(ИмяФормы, ИмяПодчРаздела));
			
			ДанныеТаблДокумента = ДанныеТабличногоДокумента(СохрТаблДокумент, ИмяПодчРаздела, КонтекстФормирования);
			
			ПодчВетка.Данные = ДанныеТаблДокумента.Данные;
			ПодчВетка.ДанныеМногострочныхЧастей = ДанныеТаблДокумента.ДанныеМногострочныхЧастей;
			ПодчВетка.Параметры = ПараметрыСтраницыРазделаНовогоОтчета(ИмяРаздела);
			
			СформироватьДанныеПодчиненныхРазделов(СохрТаблДокумент, ИмяПодчРаздела, ПодчВетка, КонтекстФормирования);
			
		КонецЦикла;

	КонецЕсли;
	
КонецПроцедуры

Процедура ВосстановитьСохраненныеДанныеБезКонтекста(СтруктураРеквизитовФормы, СтруктураОтчета, СохраненныйОтчет, КонтекстВосстановления) Экспорт
	
	Перем НаборДанных;
	
	ВызовИзФормы = (ТипЗнч(КонтекстВосстановления) = Тип("УправляемаяФорма"));
	
	СтруктураРеквизитовФормы.ЕдиницаИзмерения         = СохраненныйОтчет.ЕдиницаИзмерения;
	СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = СохраненныйОтчет.ТочностьЕдиницыИзмерения;
	СтруктураРеквизитовФормы.Банк                     = СохраненныйОтчет.Банк;
	
	Если СтруктураОтчета.Свойство("ДанныеМногоуровневыхРазделов", НаборДанных) Тогда
		Для Каждого ЭлементСтруктуры Из НаборДанных Цикл
			
			ИмяРаздела = ЭлементСтруктуры.Ключ;
			Если Не СтруктураРеквизитовФормы.Свойство("АдресВоВрХранилищеДеревоДанных" + ИмяРаздела) Тогда
				Продолжить;
			КонецЕсли;
			ДанныеРаздела = ЭлементСтруктуры.Значение;
			
			Для Каждого СтраницаРаздела Из ДанныеРаздела.Строки Цикл
				Если СтраницаРаздела.Параметры.Свойство("ИсходныйПлан") Тогда
					СтраницаРаздела.Параметры.ИсходныйПлан = СтраницаРаздела.Параметры.АктивныйПлан;
				КонецЕсли;
			КонецЦикла;
			Если ВызовИзФормы Тогда
				СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяРаздела] =
					ПоместитьВоВременноеХранилище(ДанныеРаздела, КонтекстВосстановления.УникальныйИдентификатор);
			Иначе
				СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяРаздела] =
					ПоместитьВоВременноеХранилище(ДанныеРаздела);
			КонецЕсли;

		КонецЦикла;
		
	КонецЕсли;
	
	Если СтруктураОтчета.Свойство("СписокСтраницАнализСчета") Тогда
		Если ВызовИзФормы Тогда
			КонтекстВосстановления.ЗначениеВРеквизитФормы(СтруктураОтчета.СписокСтраницАнализСчета, "СписокСтраницАнализСчета")
		Иначе
			КонтекстВосстановления.СписокСтраницАнализСчета = СтруктураОтчета.СписокСтраницАнализСчета;
		КонецЕсли;
	КонецЕсли;
	Если СтруктураОтчета.Свойство("СписокСтраницОперацииПоБанковскимСчетам") Тогда
		Если ВызовИзФормы Тогда
			КонтекстВосстановления.ЗначениеВРеквизитФормы(СтруктураОтчета.СписокСтраницОперацииПоБанковскимСчетам, "СписокСтраницОперацииПоБанковскимСчетам")
		Иначе
			КонтекстВосстановления.СписокСтраницОперацииПоБанковскимСчетам = СтруктураОтчета.СписокСтраницОперацииПоБанковскимСчетам;
		КонецЕсли;
	КонецЕсли;
	
	Если СтруктураОтчета.Свойство("Авторасчет", НаборДанных) И НаборДанных <> Неопределено Тогда
		СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет = НаборДанных;
	КонецЕсли;
	
КонецПроцедуры

Функция УниверсальнаяВыгрузка(Параметры) Экспорт

	// Инициализируем контекст и параметры выгрузки.
	КонтекстФормирования = Новый Структура;
	// Аналоги реквизитов формы отчета.
	КонтекстФормирования.Вставить("СтруктураРеквизитовФормы",                Новый Структура);
	КонтекстФормирования.Вставить("мДанныеОтчета",                           Новый Структура);
	КонтекстФормирования.Вставить("мСтруктураМногоуровневыхРазделов",        Новый Структура);
	КонтекстФормирования.Вставить("СписокСтраницАнализСчета",                Новый ТаблицаЗначений);
	КонтекстФормирования.Вставить("СписокСтраницОперацииПоБанковскимСчетам", Новый ТаблицаЗначений);

	ЗаполнитьКонтекст(КонтекстФормирования, Параметры);
	
	ПараметрыВыгрузки = ПараметрыЭлектронногоПредставления(КонтекстФормирования, Параметры);
	
	РезультатВыгрузки = Параметры.РезультатВыгрузки;
	РезультатВыгрузки.ТипФайлаВыгрузки       = "РасшифровкиБухгалтерскойОтчетности";
	РезультатВыгрузки.КодировкаФайлаВыгрузки = "windows-1251";

	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ПроверитьВозможностьВыгрузки(КонтекстФормирования, ПараметрыВыгрузки, РезультатВыгрузки) Тогда
		Возврат РезультатВыгрузки;
	КонецЕсли;
	
	РезультатыВыгрузки = Новый Массив;
	
	Выгрузить_ОСВ(КонтекстФормирования, ПараметрыВыгрузки, РезультатыВыгрузки);
	
	Выгрузить_АнализСчета(КонтекстФормирования, ПараметрыВыгрузки, РезультатыВыгрузки);

	Выгрузить_ОперацииПоБанковскимСчетам(КонтекстФормирования, ПараметрыВыгрузки, РезультатыВыгрузки);

	УстановитьПривилегированныйРежим(Ложь);

	// Используем первый элемент массива в качестве возвращаемого значения.
	// Все остальные элементы будут доступны через дополнительный ключ возвращаемого значения.
	Если РезультатыВыгрузки.Количество() > 0 Тогда
		ЗаполнитьЗначенияСвойств(РезультатВыгрузки, РезультатыВыгрузки[0]);
	КонецЕсли;
	
	РезультатВыгрузки.Вставить("Список", РезультатыВыгрузки);
	
	Возврат РезультатВыгрузки;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область СлужебныеПроцедуры

Функция СтрокаГГММ_ГГММ(ДатаНачала, ДатаОкончания) Экспорт

	Подстроки = Новый Массив;
	
	Если ЗначениеЗаполнено(ДатаНачала) Тогда
		Подстроки.Добавить(Формат(ДатаНачала, "ДФ='ггММ'"));
	КонецЕсли;

	Если ЗначениеЗаполнено(ДатаОкончания) Тогда
		Подстроки.Добавить(Формат(ДатаОкончания, "ДФ='ггММ'"));
	КонецЕсли;
	
	Возврат СтрСоединить(Подстроки, "_");

КонецФункции

Функция СчетОтмеченВСписке(СчетОтчета, СписокСчетов)
	
	СтрокиСчета = СписокСчетов.НайтиСтроки(Новый Структура("Счет", СчетОтчета));
	
	Возврат СтрокиСчета.Количество() > 0 И СтрокиСчета[0].Включен;
	
КонецФункции

#КонецОбласти

#Область ПолучениеСтруктурДанных

Процедура СформироватьДеревоМногострочнойЧастиПоДаннымТабличногоДокумента(
		СохрТаблДокумент, ИмяГруппы, ДеревоДанных, Координаты = "", СтруктураРеквизитовФормы)
	
	Если НЕ СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей.Свойство(ИмяГруппы) Тогда
		Возврат;
	КонецЕсли;
	
	МассивИменГраф = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппы]["ИменаГраф"];
	ИмяПервойГрафы = МассивИменГраф[0];

	Инд_Число = 1;
	Пока СохрТаблДокумент.Области.Найти(ИмяПервойГрафы + Координаты + СтрокаСИндексомПоказателя(Инд_Число)) <> Неопределено Цикл
		НовВетка = ДеревоДанных.Строки.Добавить();
		
		// Заполнение данными из текущей строки многострочной части.
		Данные = Новый Структура;
		Инд = СтрокаСИндексомПоказателя(Инд_Число);
		Для каждого ИмяГрафы Из МассивИменГраф Цикл
			Обл = СохрТаблДокумент.Области.Найти(ИмяГрафы + Координаты + Инд);
			Если Обл <> Неопределено Тогда
				Данные.Вставить(ИмяГрафы, Обл.Значение);
			КонецЕсли;
		КонецЦикла;
		НовВетка.Данные = Данные;
		
		// Заполнение данными из строк многострочных частей, подчиненных текущей строке многострочной части.
		ДанныеМногострочныхЧастей = Новый Структура;
		ИменаПодчГрупп = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппы]["ИменаПодчиненныхГрупп"];
		Для каждого ИмяПодчГруппы Из ИменаПодчГрупп Цикл
			ДеревоПодчСтрок = Новый ДеревоЗначений;
			ДеревоПодчСтрок.Колонки.Добавить("Данные");
			ДеревоПодчСтрок.Колонки.Добавить("ДанныеМногострочныхЧастей");
			ПодчКоординаты = Координаты + Инд;
			СформироватьДеревоМногострочнойЧастиПоДаннымТабличногоДокумента(
				СохрТаблДокумент, ИмяПодчГруппы, ДеревоПодчСтрок, ПодчКоординаты, СтруктураРеквизитовФормы);
			ДанныеМногострочныхЧастей.Вставить(ИмяПодчГруппы, ДеревоПодчСтрок);
		КонецЦикла;
		НовВетка.ДанныеМногострочныхЧастей = ДанныеМногострочныхЧастей;
		
		Инд_Число = Инд_Число + 1;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьКонтекст(КонтекстФормирования, Параметры)
	
	Перем НаборДанных;

	СохраненныйОтчет = Параметры.СохраненныйОтчет;
	
	СтруктураРеквизитовФормы = СформироватьСтруктуруРеквизитовФормы();
	КонтекстФормирования.СтруктураРеквизитовФормы = СтруктураРеквизитовФормы;
	СтруктураРеквизитовФормы.мСохраненныйДок          = СохраненныйОтчет;
	СтруктураРеквизитовФормы.Организация              = СохраненныйОтчет.Организация;
	СтруктураРеквизитовФормы.мВыбраннаяФорма          = Параметры.ВыбраннаяФорма;
	СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета  = КонецДня(СохраненныйОтчет.ДатаОкончания);
	СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета = СохраненныйОтчет.ДатаНачала;
	СтруктураРеквизитовФормы.мСкопированаФорма        = Ложь;
	СтруктураРеквизитовФормы.мБезОткрытияФормы        = Истина;
	СтруктураРеквизитовФормы.мРежимПечати             = Ложь;
	СтруктураРеквизитовФормы.ИП =
		Не РегламентированнаяОтчетностьВызовСервера.ЭтоЮридическоеЛицо(СтруктураРеквизитовФормы.Организация);

	СтруктураОтчета = СохраненныйОтчет.ДанныеОтчета.Получить();
	
	Если СтруктураОтчета.Свойство("ВерсияФормы", НаборДанных) И НаборДанных <> Неопределено Тогда
		СтруктураРеквизитовФормы.мВерсияФормы = НаборДанных;
	КонецЕсли;
	
	мДанныеОтчета = Новый Структура;
	Для Каждого Раздел Из СтруктураОтчета.ПоказателиОтчета Цикл
		мДанныеОтчета.Вставить(Раздел.Ключ, Раздел.Значение);
	КонецЦикла;
	КонтекстФормирования.мДанныеОтчета = мДанныеОтчета;
	
	ИнициализироватьМногострочныеЧасти(СтруктураРеквизитовФормы);
	КонтекстФормирования.мСтруктураМногоуровневыхРазделов = ИнициализироватьМногоуровневыеРазделы(СтруктураРеквизитовФормы);
	СформироватьДанныеМногоуровневыхРазделов(КонтекстФормирования);

	ВосстановитьСохраненныеДанныеБезКонтекста(СтруктураРеквизитовФормы, СтруктураОтчета, СохраненныйОтчет, КонтекстФормирования);
	
КонецПроцедуры

Функция ДанныеРегистраДополнительныхФайлов(ВидДополнительногоФайла, СохраненныйДок) Экспорт
	
	ЗаписьРегистраСведений = РегистрыСведений.ДополнительныеФайлыРегламентированныхОтчетов.СоздатьМенеджерЗаписи();
	
	ЗаписьРегистраСведений.РегламентированныйОтчет = СохраненныйДок;
	ЗаписьРегистраСведений.ВидДополнительногоФайла = ВидДополнительногоФайла;
	
	ЗаписьРегистраСведений.Прочитать();
	
	Если ЗаписьРегистраСведений.Выбран() Тогда
		Данные = ЗаписьРегистраСведений.СодержимоеФайла.Получить();
	Иначе
		Данные = Неопределено;
	КонецЕсли;
	
	Возврат Данные;
	
КонецФункции

#КонецОбласти

#Область ПроверкиИФильтры

Функция МногострочнаяЧастьТекущейОбласти(СтруктураРеквизитовФормы, Знач ИмяОбласти)
	
	// При внесении изменений в функцию необходимо внести параллельные изменения в одноименную функцию модуля формы.
	
	Если НЕ ЗначениеЗаполнено(ИмяОбласти) Тогда
		Возврат Неопределено;
	Иначе
		НомПозПодчеркивания = СтруктураРеквизитовФормы.ДлинаИмениГрафы + 1;
		Если НЕ (СтрДлина(ИмяОбласти) > НомПозПодчеркивания
			И Сред(ИмяОбласти, НомПозПодчеркивания, 1) = "_") Тогда
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	ИмяОбласти = СтрЗаменить(ИмяОбласти, "ДобавитьСтрокуЗначок", "");
	ИмяОбласти = СтрЗаменить(ИмяОбласти, "ДобавитьСтроку", "");
	ИмяОбласти = СтрЗаменить(ИмяОбласти, "УдалитьСтроку", "");
	
	ИмяГруппы = Лев(ИмяОбласти, СтруктураРеквизитовФормы.ДлинаИмениГруппы);
	
	Для каждого ЭлемСтруктуры Из СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей Цикл
		Если ЭлемСтруктуры.Ключ = ИмяГруппы Тогда
			Возврат ИмяГруппы;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

Процедура ЗафиксироватьОшибкуЗаполнения(СохраненныйДок, СтатусПроверки, РезультатВыгрузки,  Описание, Раздел, ИмяЯчейки = "", ФИО = "")
	
	РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки, Описание, Раздел, ИмяЯчейки, ФИО);
	
	ТаблицаСообщений = РезультатВыгрузки.ТаблицаСообщений;
	Если ТаблицаСообщений.Количество() > 0
	   И (ТипЗнч(ТаблицаСообщений) = Тип("ТаблицаЗначений")
			И ТаблицаСообщений.Колонки.Найти("ОтчетДок") <> Неопределено
		 Или ТипЗнч(ТаблицаСообщений) = Тип("ДанныеФормыКоллекция")
			И ТаблицаСообщений[0].Свойство("ОтчетДок")) Тогда
		
		НовСтр = ТаблицаСообщений[ТаблицаСообщений.Количество() - 1];
		НовСтр.ОтчетДок = СохраненныйДок;
		НовСтр.Отчет    = РегламентированнаяОтчетностьКлиентСервер.ПредставлениеДокументаРеглОтч(СохраненныйДок);
		
	КонецЕсли;
	
	СтатусПроверки = Ложь;
	
КонецПроцедуры

#КонецОбласти

#Область ВыгрузкаРегламентированногоОтчета

#Область ПроверкаВозможностиВыгрузки

Процедура ПроверитьЗаполнение_Титульный(СтатусПроверки, ПараметрыВыгрузки, СтруктураРеквизитовФормы, РезультатВыгрузки)
	
	ИмяРаздела = "Титульный";
	
	Если ПустаяСтрока(ПараметрыВыгрузки.НаимОрг) Тогда
		ЗафиксироватьОшибкуЗаполнения(СтруктураРеквизитовФормы.мСохраненныйДок, СтатусПроверки, РезультатВыгрузки,
			"На указано полное наименование организации", ИмяРаздела, "НаименованиеОрганизации");
	КонецЕсли;
	
	Если ПустаяСтрока(ПараметрыВыгрузки.НаимОргКраткое) Тогда
		ЗафиксироватьОшибкуЗаполнения(СтруктураРеквизитовФормы.мСохраненныйДок, СтатусПроверки, РезультатВыгрузки,
			"На указано полное наименование организации", ИмяРаздела, "НаименованиеОрганизацииКраткое");
	КонецЕсли;
	
	Если СтруктураРеквизитовФормы.ИП Тогда
		
		Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.ИНН) Тогда
			ЗафиксироватьОшибкуЗаполнения(СтруктураРеквизитовФормы.мСохраненныйДок, СтатусПроверки, РезультатВыгрузки,
				"Не указан ИНН индивидуального предпринимателя", ИмяРаздела, "ИНН");
		ИначеЕсли НЕ РегламентированнаяОтчетностьВызовСервера.ИННСоответствуетТребованиямНаСервере(
				ПараметрыВыгрузки.ИНН, Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо) Тогда
			ЗафиксироватьОшибкуЗаполнения(СтруктураРеквизитовФормы.мСохраненныйДок, СтатусПроверки, РезультатВыгрузки,
				"Указан некорректный ИНН индивидуального предпринимателя", ИмяРаздела, "ИНН");
		КонецЕсли;
		
	Иначе
		
		Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.ИНН) Тогда
			ЗафиксироватьОшибкуЗаполнения(СтруктураРеквизитовФормы.мСохраненныйДок, СтатусПроверки, РезультатВыгрузки,
				"Не указан ИНН организации", ИмяРаздела, "ИНН");
		ИначеЕсли НЕ РегламентированнаяОтчетностьВызовСервера.ИННСоответствуетТребованиямНаСервере(ПараметрыВыгрузки.ИНН, Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо) Тогда
			ЗафиксироватьОшибкуЗаполнения(СтруктураРеквизитовФормы.мСохраненныйДок, СтатусПроверки, РезультатВыгрузки,
				"Указан некорректный ИНН юридического лица", ИмяРаздела, "ИНН");
		КонецЕсли;
		
		Если ПустаяСтрока(ПараметрыВыгрузки.КПП) Тогда
			ЗафиксироватьОшибкуЗаполнения(СтруктураРеквизитовФормы.мСохраненныйДок, СтатусПроверки, РезультатВыгрузки,
				"Не указан КПП юридического лица", ИмяРаздела, "КПП");
		ИначеЕсли СтрДлина(ПараметрыВыгрузки.КПП) <> 9 Тогда
			ЗафиксироватьОшибкуЗаполнения(СтруктураРеквизитовФормы.мСохраненныйДок, СтатусПроверки, РезультатВыгрузки,
				"Указан некорректный КПП юридического лица", ИмяРаздела, "КПП");
		КонецЕсли;
		
	КонецЕсли;
	
	// Руководитель организации.
	Если ПустаяСтрока(ПараметрыВыгрузки.ПодпФамилия) Тогда
		ЗафиксироватьОшибкуЗаполнения(СтруктураРеквизитовФормы.мСохраненныйДок, СтатусПроверки, РезультатВыгрузки,
			"Не указана фамилия лица, утвердившего отчетность", ИмяРаздела, "Подписант");
	КонецЕсли;
	
	Если ПустаяСтрока(ПараметрыВыгрузки.ПодпИмя) Тогда
		ЗафиксироватьОшибкуЗаполнения(СтруктураРеквизитовФормы.мСохраненныйДок, СтатусПроверки, РезультатВыгрузки,
			"Не указано имя лица, утвердившего отчетность", ИмяРаздела, "Подписант");
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьЗаполнение_ОСВ(СтатусПроверки, ПараметрыВыгрузки, СтруктураРеквизитовФормы, РезультатВыгрузки)
	
	ИмяРаздела = "ОборотноСальдоваяВедомость";
	
	Если НЕ РазделВключенВОтчет(ИмяРаздела, ПараметрыВыгрузки.ДеревоНастройкиСтраниц) Тогда
		Возврат;
	КонецЕсли;
	
	АдресДанныхРаздела = СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяРаздела];
	ДанныеРаздела = ПолучитьИзВременногоХранилища(АдресДанныхРаздела);
			
	Для каждого ПериодОтчета Из ДанныеРаздела.Строки Цикл
		
		Если НЕ РазделСоответствуетОтбору(ПараметрыВыгрузки, ИмяРаздела, ПериодОтчета.Параметры) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ПериодОтчета.ДополнительныеДанные = Неопределено Тогда
			ОписаниеОшибки = СтрШаблон(НСтр("ru='Оборотно-сальдовая ведомость за %1 не заполнена'"), 
				ПредставлениеПериода(ПериодОтчета.Параметры.ДатаНачалаПериода, КонецДня(ПериодОтчета.Параметры.ДатаКонцаПериода)));
			ЗафиксироватьОшибкуЗаполнения(СтруктураРеквизитовФормы.мСохраненныйДок, СтатусПроверки, РезультатВыгрузки, ОписаниеОшибки, ИмяРаздела);
		КонецЕсли;
	
	КонецЦикла; 
	
КонецПроцедуры

Процедура ПроверитьЗаполнение_АнализСчета(СтатусПроверки, ПараметрыВыгрузки, КонтекстФормирования, РезультатВыгрузки)
	
	ИмяРаздела = "АнализСчета";
	
	Если НЕ РазделВключенВОтчет(ИмяРаздела, ПараметрыВыгрузки.ДеревоНастройкиСтраниц) Тогда
		Возврат;
	КонецЕсли;
	СтруктураРеквизитовФормы = КонтекстФормирования.СтруктураРеквизитовФормы;
	
	ДанныеРаздела = ПолучитьИзВременногоХранилища(СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяРаздела]);
	
	Для Каждого СтраницаРаздела Из ДанныеРаздела.Строки Цикл
		ПараметрыСтраницы = СтраницаРаздела.Параметры;
		
		Если НЕ СчетОтмеченВСписке(ПараметрыСтраницы.Счет, КонтекстФормирования["СписокСтраниц" + ИмяРаздела]) Тогда
			Продолжить;
		КонецЕсли;
		
		Для каждого ПериодОтчета Из СтраницаРаздела.Строки Цикл

			Если НЕ РазделСоответствуетОтбору(ПараметрыВыгрузки, ИмяРаздела, ПериодОтчета.Параметры) Тогда
				Продолжить;
			КонецЕсли;
		
			ДатаНачалаПериода = ПериодОтчета.Параметры.ДатаНачалаПериода;
			ДатаКонцаПериода  = КонецДня(ПериодОтчета.Параметры.ДатаКонцаПериода);
			
			СегментыСтраницы = ВыборкаСегментовОтчетаПоСчетуПериоду(
				ИмяРаздела,
				ПараметрыСтраницы.Счет,
				ДатаНачалаПериода,
				ДатаКонцаПериода,
				СтруктураРеквизитовФормы.мСохраненныйДок);

			Если СегментыСтраницы.Количество() = 0 Тогда
				ОписаниеОшибки = СтрШаблон(НСтр("ru = 'Анализ счета %1 за %2 не заполнен'"),
					ПараметрыСтраницы.Счет,
					ПредставлениеПериода(ДатаНачалаПериода, ДатаКонцаПериода));

				ЗафиксироватьОшибкуЗаполнения(
					СтруктураРеквизитовФормы.мСохраненныйДок,
					СтатусПроверки,
					РезультатВыгрузки,
					ОписаниеОшибки,
					ИмяРаздела,
					"",
					ПараметрыСтраницы.Счет);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьЗаполнение_ОперацииПоБанковскимСчетам(СтатусПроверки, ПараметрыВыгрузки, СтруктураРеквизитовФормы, РезультатВыгрузки)
	
	ИмяРаздела = "ОперацииПоБанковскимСчетам";
	
	Если НЕ РазделВключенВОтчет(ИмяРаздела, ПараметрыВыгрузки.ДеревоНастройкиСтраниц) Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеРаздела = ПолучитьИзВременногоХранилища(СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяРаздела]);
	
	Для каждого СтраницаРаздела Из ДанныеРаздела.Строки Цикл
	
		Для каждого ПериодОтчета Из СтраницаРаздела.Строки Цикл

			Если НЕ РазделСоответствуетОтбору(ПараметрыВыгрузки, ИмяРаздела, ПериодОтчета.Параметры) Тогда
				Продолжить;
			КонецЕсли;

			ДатаНачалаПериода = ПериодОтчета.Параметры.ДатаНачалаПериода;
			ДатаКонцаПериода  = КонецДня(ПериодОтчета.Параметры.ДатаКонцаПериода);
		
			Если ПериодОтчета.ДополнительныеДанные = Неопределено Тогда
				ОписаниеОшибки = СтрШаблон(НСтр("ru = 'Операции по банковским счетам на счете %1 за %2 не заполнены'"),
					ПериодОтчета.Параметры.Счет,
					ПредставлениеПериода(ДатаНачалаПериода, ДатаКонцаПериода));

				ЗафиксироватьОшибкуЗаполнения(
					СтруктураРеквизитовФормы.мСохраненныйДок,
					СтатусПроверки,
					РезультатВыгрузки,
					ОписаниеОшибки,
					ИмяРаздела,
					"",
					ПериодОтчета.Параметры.Счет);
			КонецЕсли;
		
		КонецЦикла;
	
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСXML

Функция НовыйКомпоновщикXML(ИмяФайла, Кодировка = "windows-1251")
	
	КомпоновщикXML = Новый ЗаписьXML();
	КомпоновщикXML.ОткрытьФайл(ИмяФайла, Кодировка);
	КомпоновщикXML.ЗаписатьОбъявлениеXML();
	
	Возврат КомпоновщикXML;
	
КонецФункции

Функция ДвоичныеДанныеКомпоновщикаXML(КомпоновщикXML, ИмяФайла)
	
	КомпоновщикXML.Закрыть();
	КомпоновщикXML = Неопределено;
	
	ДвоичныеДанныеФайла = Новый ДвоичныеДанные(ИмяФайла);
	УдалитьФайлы(ИмяФайла);
	
	Возврат ДвоичныеДанныеФайла;
	
КонецФункции

Процедура ВывестиАтрибут(КомпоновщикXML, ИмяАтрибута, ЗначениеАтрибута, ТипАтрибута = "Т")
	
	ОписаниеТипаАтрибута = СтрРазделить(ТипАтрибута, ",");
	
	Если ОписаниеТипаАтрибута[0] = "Д" Тогда
		ПредставлениеЗначения = Формат(ЗначениеАтрибута, "ДФ=dd.MM.yyyy");
		
	ИначеЕсли ОписаниеТипаАтрибута[0] = "Т" Тогда
		ПредставлениеЗначения = СокрЛП(ЗначениеАтрибута);
		Если ОписаниеТипаАтрибута.Количество() >= 2 Тогда
			МаксимальнаяДлина = Число(ОписаниеТипаАтрибута[1]);
			ПредставлениеЗначения = Лев(ПредставлениеЗначения, МаксимальнаяДлина);
		КонецЕсли;
		
	ИначеЕсли ОписаниеТипаАтрибута[0] = "Ч" Тогда
		СтрокаФормата = "ЧРД=.;ЧН=0;ЧГ=;";
		
		Если ОписаниеТипаАтрибута.Количество() >= 2 Тогда
			РазмерностьПолная = Число(ОписаниеТипаАтрибута[1]);
			СтрокаФормата = СтрокаФормата + "ЧЦ=" + Формат(РазмерностьПолная, "ЧГ=") + ";";
		КонецЕсли;
		
		Если ОписаниеТипаАтрибута.Количество() >= 3 Тогда
			РазмерностьДробнойЧасти = Число(ОписаниеТипаАтрибута[2]);
			СтрокаФормата = СтрокаФормата + "ЧДЦ=" + Формат(РазмерностьДробнойЧасти, "ЧГ=") + ";";
		КонецЕсли;
		
		ПредставлениеЗначения = Формат(ЗначениеАтрибута, СтрокаФормата);
		
	Иначе
		ПредставлениеЗначения = СокрЛП(ЗначениеАтрибута);
		
	КонецЕсли;
	
	КомпоновщикXML.ЗаписатьАтрибут(ИмяАтрибута, ПредставлениеЗначения);
	
КонецПроцедуры

Процедура ВывестиНеобязательныйАтрибут(КомпоновщикXML, ИмяАтрибута, ЗначениеАтрибута, ТипАтрибута = "Т")
	
	Если ЗначениеЗаполнено(ЗначениеАтрибута) Тогда
		ВывестиАтрибут(КомпоновщикXML, ИмяАтрибута, ЗначениеАтрибута, ТипАтрибута);
	КонецЕсли;
	
КонецПроцедуры

Процедура ВывестиУзел_Отправитель(Компоновщик, ПараметрыВыгрузки, КонтекстФормирования)
	
	СтруктураРеквизитовФормы = КонтекстФормирования.СтруктураРеквизитовФормы;
	
	Компоновщик.ЗаписатьНачалоЭлемента("Организация");
	
	Если СтруктураРеквизитовФормы.ИП Тогда
		ВывестиАтрибут(Компоновщик, "Наим", ПараметрыВыгрузки.НаимОрг, "Т,1000");
		ВывестиАтрибут(Компоновщик, "ИНН",  ПараметрыВыгрузки.ИНН,   "Т,12");
		
	Иначе
		ВывестиАтрибут(Компоновщик, "Наим", ПараметрыВыгрузки.НаимОрг, "Т,1000");
		ВывестиАтрибут(Компоновщик, "ИНН",  ПараметрыВыгрузки.ИНН,  "Т,12");
		ВывестиАтрибут(Компоновщик, "КПП",  ПараметрыВыгрузки.КПП,  "Т,9");
		
	КонецЕсли;
	
	Компоновщик.ЗаписатьКонецЭлемента(); // Организация
	
КонецПроцедуры

Процедура ВывестиУзел_Документ(ИмяРаздела, Компоновщик, ПараметрыВыгрузки, КонтекстФормирования, ПериодОтчета)
	
	Компоновщик.ЗаписатьНачалоЭлемента("Документ");
	
	ВывестиАтрибут(Компоновщик, "ДатаДок", ПараметрыВыгрузки.ДатаДок, "Д");
	ВывестиАтрибут(Компоновщик, "ОКЕИ", "383", "Т,3"); // в рублях и копейках
	
	Если ИмяРаздела = "ОборотноСальдоваяВедомость" Тогда
		ВывестиУзел_Отправитель(Компоновщик, ПараметрыВыгрузки, КонтекстФормирования);
		ВывестиУзел_ОСВ(Компоновщик, ПараметрыВыгрузки, КонтекстФормирования, ПериодОтчета);
	ИначеЕсли ИмяРаздела = "АнализСчета" Тогда
		ВывестиУзел_Отправитель(Компоновщик, ПараметрыВыгрузки, КонтекстФормирования);
		ВывестиУзел_АнализСчета(Компоновщик, ПараметрыВыгрузки, КонтекстФормирования, ПериодОтчета.Параметры);
	ИначеЕсли ИмяРаздела = "ОперацииПоБанковскимСчетам" Тогда
		ВывестиУзел_Отправитель(Компоновщик, ПараметрыВыгрузки, КонтекстФормирования);
		ВывестиУзел_ОперБанкСч(Компоновщик, ПараметрыВыгрузки, КонтекстФормирования, ПериодОтчета);
	КонецЕсли;
	
	Компоновщик.ЗаписатьКонецЭлемента(); // Документ
	
КонецПроцедуры

#КонецОбласти

#Область ФормированиеВыгрузки

Функция ДвоичноеЭлектронноеПредставлениеОтчета(ИмяРаздела, ПараметрыВыгрузки, КонтекстФормирования, ПериодОтчета)
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("xml");
	Компоновщик = НовыйКомпоновщикXML(ИмяВременногоФайла);
	
	Компоновщик.ЗаписатьНачалоЭлемента("Файл");
	
	ВывестиАтрибут(Компоновщик, "xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");
	ВывестиАтрибут(Компоновщик, "ИдФайл",   ПараметрыВыгрузки.ИдФайл);
	ВывестиАтрибут(Компоновщик, "ВерсПрог", ПараметрыВыгрузки.ВерсПрог);
	ВывестиАтрибут(Компоновщик, "ВерсФорм", ПараметрыВыгрузки.ВерсФорм);
	
	ВывестиУзел_Документ(ИмяРаздела, Компоновщик, ПараметрыВыгрузки, КонтекстФормирования, ПериодОтчета);
	
	Компоновщик.ЗаписатьКонецЭлемента(); // Файл
	
	Возврат ДвоичныеДанныеКомпоновщикаXML(Компоновщик, ИмяВременногоФайла);
	
КонецФункции

// Универсальным образом формирует имя файла, добавляемого в отправляемый от заемщика контейнер.
//
// Параметры:
//  СведенияОЗаявке - Структура - см. СгенерироватьИмяФайлаВыгрузки() .
//  КлючУникальности - Массив - для вставки произвольного текста в середину названия файла.
//
// Возвращаемое значение:
//   Строка      - имя файла для переданного типа содержимого.
//
Функция ИмяФайлаДляКонтейнера(СведенияОЗаявке, КлючУникальности = "")
	
	ЧастиИмениФайла = Новый Массив;
	ЧастиИмениФайла.Добавить("BANK");
	
	// При выгрузке расшифровки бухгалтерской отчетности ключ всегда будет составным.
	Если КлючУникальности[0] = "ОборотноСальдоваяВедомость" Тогда
	    ЧастиИмениФайла.Добавить("OSV");
	ИначеЕсли КлючУникальности[0] = "АнализСчета" Тогда
		ЧастиИмениФайла.Добавить("ANS");
	ИначеЕсли СтрНачинаетсяС(КлючУникальности[0], "Операции") Тогда
		ЧастиИмениФайла.Добавить("TRN");
	КонецЕсли;
	КлючУникальности.Удалить(0);
	
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ЧастиИмениФайла, КлючУникальности);

	ЧастиИмениФайла.Добавить(СведенияОЗаявке.ДанныеЗаемщика.ИдентификаторЗаемщика);
	ЧастиИмениФайла.Добавить(Формат(ТекущаяДатаСеанса(), "ДФ=ггггММдд")); // дата выгрузки
	ЧастиИмениФайла.Добавить(Строка(Новый УникальныйИдентификатор())); // для гарантированной уникальности файла
	
	ИмяФайла = СтрСоединить(ЧастиИмениФайла, "_") + ".xml";
	
	Возврат ИмяФайла;
	
КонецФункции

#Область ОборотноСальдоваяВедомость

Процедура Выгрузить_ОСВ(КонтекстФормирования, ПараметрыВыгрузки, РезультатыВыгрузки)
	
	ИмяРаздела = "ОборотноСальдоваяВедомость";
	
	Если НЕ РазделВключенВОтчет(ИмяРаздела, ПараметрыВыгрузки.ДеревоНастройкиСтраниц) Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураРеквизитовФормы = КонтекстФормирования.СтруктураРеквизитовФормы;
	ДанныеРаздела = ПолучитьИзВременногоХранилища(СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяРаздела]);
	
	// Данные за каждый период выгружаются в отдельный файл.
	Для Каждого ПериодОтчета Из ДанныеРаздела.Строки Цикл
		
		Если НЕ РазделСоответствуетОтбору(ПараметрыВыгрузки, ИмяРаздела, ПериодОтчета.Параметры) Тогда
			Продолжить;
		КонецЕсли;
		
		СгенерироватьИмяФайлаВыгрузки(ПараметрыВыгрузки);
		
		ДвоичныеДанныеФайла = ДвоичноеЭлектронноеПредставлениеОтчета(
			ИмяРаздела, ПараметрыВыгрузки, КонтекстФормирования, ПериодОтчета);
		
		ДобавитьРезультатВыгрузки(РезультатыВыгрузки, ДвоичныеДанныеФайла, ПараметрыВыгрузки.ИдФайл);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ВывестиУзел_ОСВ(Компоновщик, ПараметрыВыгрузки, КонтекстФормирования, ПериодОтчета)
	
	Компоновщик.ЗаписатьНачалоЭлемента("ОборотноСальдоваяВедомость");
	
	ВывестиАтрибут(Компоновщик, "НачПер", ПериодОтчета.Параметры.ДатаНачалаПериода, "Д");
	ВывестиАтрибут(Компоновщик, "КонПер", ПериодОтчета.Параметры.ДатаКонцаПериода, "Д");
	
	БалансовыеСчета = ПериодОтчета.ДополнительныеДанные.Данные.Балансовые;
	ЗабалансовыеСчета = ПериодОтчета.ДополнительныеДанные.Данные.Забалансовые;
	
	Если БалансовыеСчета.Строки.Количество() > 0 Тогда
		ВывестиСтраницуВУзел_БалансовыеСчета(Компоновщик, БалансовыеСчета.Строки[0]);
	КонецЕсли;
	
	Если ЗабалансовыеСчета.Строки.Количество() > 0 Тогда
		ВывестиСтраницуВУзел_ЗабалансовыеСчета(Компоновщик, ЗабалансовыеСчета.Строки[0]);
	КонецЕсли;
	
	Компоновщик.ЗаписатьКонецЭлемента(); // ОборотноСальдоваяВедомость
	
КонецПроцедуры

Процедура ВывестиСтраницуВУзел_БалансовыеСчета(Компоновщик, ДанныеУзла)
	
	Компоновщик.ЗаписатьНачалоЭлемента("БалансовыеСчета");
	
	ВывестиАтрибут(Компоновщик, "СНД", ДанныеУзла.СНД, "Ч,15,2");
	ВывестиАтрибут(Компоновщик, "СНК", ДанныеУзла.СНК, "Ч,15,2");
	ВывестиАтрибут(Компоновщик, "ДО",  ДанныеУзла.ДО,  "Ч,15,2");
	ВывестиАтрибут(Компоновщик, "КО",  ДанныеУзла.КО,  "Ч,15,2");
	ВывестиАтрибут(Компоновщик, "СКД", ДанныеУзла.СКД, "Ч,15,2");
	ВывестиАтрибут(Компоновщик, "СКК", ДанныеУзла.СКК, "Ч,15,2");
	
	ВывестиСтраницуВУзел_Счет(Компоновщик, ДанныеУзла);
	
	Компоновщик.ЗаписатьКонецЭлемента(); // БалансовыеСчета
	
КонецПроцедуры

Процедура ВывестиСтраницуВУзел_ЗабалансовыеСчета(Компоновщик, ДанныеУзла)
	
	Компоновщик.ЗаписатьНачалоЭлемента("ЗабалансовыеСчета");
	
	ВывестиСтраницуВУзел_Счет(Компоновщик, ДанныеУзла);
	
	Компоновщик.ЗаписатьКонецЭлемента(); // ЗабалансовыеСчета
	
КонецПроцедуры

Процедура ВывестиСтраницуВУзел_Счет(Компоновщик, ДанныеОтчета)
	
	Для Каждого СтрокаСчета Из ДанныеОтчета.Строки Цикл
		Компоновщик.ЗаписатьНачалоЭлемента("Счет");
		
		ВывестиАтрибут(Компоновщик, "Код", СтрокаСчета.СчетКод, "Т,8");
		ВывестиАтрибут(Компоновщик, "Наименование", СтрокаСчета.СчетНаименование, "Т,120");
		
		ВывестиАтрибут(Компоновщик, "СНД", СтрокаСчета.СНД, "Ч,15,2");
		ВывестиАтрибут(Компоновщик, "СНК", СтрокаСчета.СНК, "Ч,15,2");
		ВывестиАтрибут(Компоновщик, "ДО",  СтрокаСчета.ДО,  "Ч,15,2");
		ВывестиАтрибут(Компоновщик, "КО",  СтрокаСчета.КО,  "Ч,15,2");
		ВывестиАтрибут(Компоновщик, "СКД", СтрокаСчета.СКД, "Ч,15,2");
		ВывестиАтрибут(Компоновщик, "СКК", СтрокаСчета.СКК, "Ч,15,2");
		
		ВывестиСтраницуВУзел_Счет(Компоновщик, СтрокаСчета);
		
		Компоновщик.ЗаписатьКонецЭлемента(); // Счет
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область АнализСчета

Процедура Выгрузить_АнализСчета(КонтекстФормирования, ПараметрыВыгрузки, РезультатыВыгрузки)

	ИмяРаздела = "АнализСчета";
	
	Если НЕ РазделВключенВОтчет(ИмяРаздела, ПараметрыВыгрузки.ДеревоНастройкиСтраниц) Тогда
		Возврат;
	КонецЕсли;

	СтруктураРеквизитовФормы = КонтекстФормирования.СтруктураРеквизитовФормы;

	ДанныеРаздела = ПолучитьИзВременногоХранилища(СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяРаздела]);
	
	Для Каждого СтраницаРаздела Из ДанныеРаздела.Строки Цикл
		ПараметрыСтраницы = СтраницаРаздела.Параметры;
		
		Если НЕ СчетОтмеченВСписке(ПараметрыСтраницы.Счет, КонтекстФормирования["СписокСтраниц" + ИмяРаздела]) Тогда
			Продолжить;
		КонецЕсли;
		
		// Данные за каждый период выгружаем в отдельный файл.
		Для каждого ПериодОтчета Из СтраницаРаздела.Строки Цикл
		
			Если НЕ РазделСоответствуетОтбору(ПараметрыВыгрузки, ИмяРаздела, ПериодОтчета.Параметры) Тогда
				Продолжить;
			КонецЕсли;
			
			// Формируем имя файла выгрузки для текущего раздела.
			СгенерироватьИмяФайлаВыгрузки(ПараметрыВыгрузки);

			ДвоичныеДанныеФайла = ДвоичноеЭлектронноеПредставлениеОтчета(
				ИмяРаздела, ПараметрыВыгрузки, КонтекстФормирования, ПериодОтчета);

			ДобавитьРезультатВыгрузки(РезультатыВыгрузки, ДвоичныеДанныеФайла, ПараметрыВыгрузки.ИдФайл);
			
		КонецЦикла;
		
	КонецЦикла;

КонецПроцедуры

Процедура ВывестиУзел_АнализСчета(Компоновщик, ПараметрыВыгрузки, КонтекстФормирования, ПараметрыПериодаОтчета)
	
	ИмяРаздела = "АнализСчета";
	СтруктураРеквизитовФормы = КонтекстФормирования.СтруктураРеквизитовФормы;

	Компоновщик.ЗаписатьНачалоЭлемента("АнализСчета");
	
	ВывестиАтрибут(Компоновщик, "Код",    ПараметрыПериодаОтчета.Счет.Код, "Т,8");
	ВывестиАтрибут(Компоновщик, "Наим",   ПараметрыПериодаОтчета.Счет.Наименование, "Т,120");
	ВывестиАтрибут(Компоновщик, "НачПер", ПараметрыПериодаОтчета.ДатаНачалаПериода, "Д");
	ВывестиАтрибут(Компоновщик, "КонПер", ПараметрыПериодаОтчета.ДатаКонцаПериода, "Д");

	ВыборкаСегментов = ВыборкаСегментовОтчетаПоСчетуПериоду(
		ИмяРаздела,
		ПараметрыПериодаОтчета.Счет,
		ПараметрыПериодаОтчета.ДатаНачалаПериода,
		ПараметрыПериодаОтчета.ДатаКонцаПериода,
		СтруктураРеквизитовФормы.мСохраненныйДок);
	
	Пока ВыборкаСегментов.Следующий() Цикл
		ДанныеСегмента = ДанныеРегистраДополнительныхФайлов(
			ВыборкаСегментов.ВидДополнительногоФайла, СтруктураРеквизитовФормы.мСохраненныйДок);

		ВывестиСтраницуВУзел_АнализСчетов_АнализСчета(Компоновщик, ДанныеСегмента);
		
	КонецЦикла;
	
	Компоновщик.ЗаписатьКонецЭлемента(); // АнализСчета
	
КонецПроцедуры

Процедура ВывестиСтраницуВУзел_АнализСчетов_АнализСчета(Компоновщик, ДанныеСегмента)
	
	ЗакрыватьТэгСтрокаАнализа = Ложь;
	ОткрытТэгСтрокаАнализа = Ложь;
	
	Для Каждого Выборка Из ДанныеСегмента Цикл
		
		// Записи для выгрузки всегда находятся на 4 уровне
		Если Выборка.Уровень <> 4 Тогда
			Продолжить;
		КонецЕсли;	
		
		Если Выборка.ДетальнаяЗапись Тогда // движения по кор счетам
			
			Компоновщик.ЗаписатьНачалоЭлемента("Корреспонденция");
			
			СведенияКоррСчета = ОтчетностьВБанкиСлужебный.ОписаниеСчетаДляВыгрузки(Выборка.КорСчет);
			
			ВывестиАтрибут(Компоновщик, "Код", СведенияКоррСчета.КодСчета, "Т,8");
			
			ВывестиАтрибут(Компоновщик, "ДО", Выборка.ДО, "Ч,15,2");
			ВывестиАтрибут(Компоновщик, "КО", Выборка.КО, "Ч,15,2");
			
			Компоновщик.ЗаписатьКонецЭлемента(); // "Корреспонденция"
			
		Иначе // итоги по набору аналитики (счет, субконто1, субконто2) - в соответствии с сортировкой эти записи выше движений по кор счетам
			
			// Следующая комбинация аналитик - открываем новый тег "СтрокаАнализа"
			Если ОткрытТэгСтрокаАнализа Тогда
				// закрываем предыдущий тег
				Компоновщик.ЗаписатьКонецЭлемента();
			КонецЕсли;	
			
			Компоновщик.ЗаписатьНачалоЭлемента("СтрокаАнализа");
			ОткрытТэгСтрокаАнализа = Истина;
			
			Компоновщик.ЗаписатьНачалоЭлемента("Счет");
			
			СведенияСчетаСтроки = ОтчетностьВБанкиСлужебный.ОписаниеСчетаДляВыгрузки(Выборка.Счет);
			
			ВывестиАтрибут(Компоновщик, "Код", СведенияСчетаСтроки.КодСчета, "Т,8");
			
			ВывестиАтрибут(Компоновщик, "СНД", Выборка.СНД, "Ч,15,2");
			ВывестиАтрибут(Компоновщик, "СНК", Выборка.СНК, "Ч,15,2");
			ВывестиАтрибут(Компоновщик, "ДО",  Выборка.ДО,  "Ч,15,2");
			ВывестиАтрибут(Компоновщик, "КО",  Выборка.КО,  "Ч,15,2");
			ВывестиАтрибут(Компоновщик, "СКД", Выборка.СКД, "Ч,15,2");
			ВывестиАтрибут(Компоновщик, "СКК", Выборка.СКК, "Ч,15,2");
			
			// Субконто 1.
			Если ЗначениеЗаполнено(Выборка.Субконто1) Тогда
				
				Компоновщик.ЗаписатьНачалоЭлемента("Субконто1");
				
				ВывестиАтрибут(Компоновщик, "Представление", Выборка.ПредставлениеСубконто1, "Т,1000");
				ВывестиАтрибут(Компоновщик, "ТипСубконто", Строка(ТипЗнч(Выборка.Субконто1)), "Т,100");
				
				Если ТипЗнч(Выборка.Субконто1) = Тип("СправочникСсылка.Контрагенты") Тогда
					ВывестиНеобязательныйАтрибут(Компоновщик, "ИНН", Выборка.Субконто1.ИНН, "Т,12");
				КонецЕсли;
				
				Компоновщик.ЗаписатьКонецЭлемента();
				
			КонецЕсли;
			
			// Субконто 2.
			Если ЗначениеЗаполнено(Выборка.Субконто2) Тогда
				
				Компоновщик.ЗаписатьНачалоЭлемента("Субконто2");
				
				ВывестиАтрибут(Компоновщик, "Представление", Выборка.ПредставлениеСубконто2, "Т,1000");
				ВывестиАтрибут(Компоновщик, "ТипСубконто", Строка(ТипЗнч(Выборка.Субконто2)), "Т,100");
				
				Компоновщик.ЗаписатьКонецЭлемента();
				
			КонецЕсли;
			
			Компоновщик.ЗаписатьКонецЭлемента(); // "Счет"
			
		КонецЕсли;
				
	КонецЦикла;
	
	Если ОткрытТэгСтрокаАнализа Тогда
		Компоновщик.ЗаписатьКонецЭлемента(); // "СтрокаАнализа"
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОперацииПоБанковскимСчетам

Процедура Выгрузить_ОперацииПоБанковскимСчетам(КонтекстФормирования, ПараметрыВыгрузки, РезультатыВыгрузки)

	ИмяРаздела = "ОперацииПоБанковскимСчетам";
	
	Если НЕ РазделВключенВОтчет(ИмяРаздела, ПараметрыВыгрузки.ДеревоНастройкиСтраниц) Тогда
		Возврат;
	КонецЕсли;

	СтруктураРеквизитовФормы = КонтекстФормирования.СтруктураРеквизитовФормы;

	ДанныеРаздела = ПолучитьИзВременногоХранилища(СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяРаздела]);
	
	Для Каждого СтраницаРаздела Из ДанныеРаздела.Строки Цикл
		ПараметрыСтраницы = СтраницаРаздела.Параметры;
		
		Если НЕ СчетОтмеченВСписке(ПараметрыСтраницы.Счет, КонтекстФормирования["СписокСтраниц" + ИмяРаздела]) Тогда
			Продолжить;
		КонецЕсли;
		
		// Данные за каждый период выгружаем в отдельный файл.
		Для каждого ПериодОтчета Из СтраницаРаздела.Строки Цикл
		
			Если НЕ РазделСоответствуетОтбору(ПараметрыВыгрузки, ИмяРаздела, ПериодОтчета.Параметры) Тогда
				Продолжить;
			КонецЕсли;
			
			// Формируем имя файла выгрузки для текущего раздела.
			СгенерироватьИмяФайлаВыгрузки(ПараметрыВыгрузки);

			ДвоичныеДанныеФайла = ДвоичноеЭлектронноеПредставлениеОтчета(
				ИмяРаздела, ПараметрыВыгрузки, КонтекстФормирования, ПериодОтчета);

			ДобавитьРезультатВыгрузки(РезультатыВыгрузки, ДвоичныеДанныеФайла, ПараметрыВыгрузки.ИдФайл);
			
		КонецЦикла;
		
	КонецЦикла;

КонецПроцедуры

Процедура ВывестиУзел_ОперБанкСч(Компоновщик, ПараметрыВыгрузки, КонтекстФормирования, ПериодОтчета)
	
	ДатаНачалаПериода  = ПериодОтчета.Параметры.ДатаНачалаПериода;
	ДатаКонцаПериода   = ПериодОтчета.Параметры.ДатаКонцаПериода;

	Компоновщик.ЗаписатьНачалоЭлемента("ОперБанкСч");
	
	ВывестиАтрибут(Компоновщик, "НачПер", ДатаНачалаПериода, "Д");
	ВывестиАтрибут(Компоновщик, "КонПер", ДатаКонцаПериода, "Д");
	
	ВывестиУзел_ОперБанкСч_СчетУчета(Компоновщик, ПараметрыВыгрузки, КонтекстФормирования, ПериодОтчета);
	
	Компоновщик.ЗаписатьКонецЭлемента(); // ОперБанкСч
	
КонецПроцедуры

Процедура ВывестиУзел_ОперБанкСч_СчетУчета(Компоновщик, ПараметрыВыгрузки, КонтекстФормирования, ПериодОтчета)
	
	СводныеДанные = ПериодОтчета.ДополнительныеДанные.Данные;

	СтрокаСчетаВерхнегоУровня = СводныеДанные.Строки[0];
	
	Компоновщик.ЗаписатьНачалоЭлемента("СчетУчета");
	
	ВывестиАтрибут(Компоновщик, "КодСчета",        СтрокаСчетаВерхнегоУровня.Представление);
	ВывестиАтрибут(Компоновщик, "СальдоНачальное", СтрокаСчетаВерхнегоУровня.СальдоНачальноеДт, "Ч,15,2");
	ВывестиАтрибут(Компоновщик, "ОборотыДт",       СтрокаСчетаВерхнегоУровня.ОборотыДт, "Ч,15,2");
	ВывестиАтрибут(Компоновщик, "ОборотыКт",       СтрокаСчетаВерхнегоУровня.ОборотыКт, "Ч,15,2");
	ВывестиАтрибут(Компоновщик, "СальдоКонечное",  СтрокаСчетаВерхнегоУровня.СальдоКонечноеДт, "Ч,15,2");
	
	ВывестиУзел_ОперБанкСч_СчетУчета_БанкСч(Компоновщик, КонтекстФормирования, ПериодОтчета, СводныеДанные.Строки);
	
	Компоновщик.ЗаписатьКонецЭлемента(); // СчетУчета
	
КонецПроцедуры

Процедура ВывестиУзел_ОперБанкСч_СчетУчета_БанкСч(Компоновщик, КонтекстФормирования, ПериодОтчета, СтрокиСчетов)
	
	СчетВерхнегоУровня = ПериодОтчета.Параметры.Счет;
	ДатаНачалаПериода  = ПериодОтчета.Параметры.ДатаНачалаПериода;
	ДатаКонцаПериода   = ПериодОтчета.Параметры.ДатаКонцаПериода;

	СохраненныйДокумент= КонтекстФормирования.СтруктураРеквизитовФормы.мСохраненныйДок;

	ОписаниеТипаБанковскиеСчета = ОтчетностьВБанкиСлужебный.ТипыСущности("БанковскиеСчета");
	
	Для Каждого СтрокаСчета Из СтрокиСчетов Цикл
		Если ОписаниеТипаБанковскиеСчета.СодержитТип(ТипЗнч(СтрокаСчета.Счет)) Тогда
			Компоновщик.ЗаписатьНачалоЭлемента("БанкСч");
			
			ВывестиНеобязательныйАтрибут(Компоновщик, "Наименование", СтрокаСчета.Представление, "Т,100");
			ВывестиАтрибут(Компоновщик, "Номер", СтрокаСчета.НомерСчета, "Т,34");
			ВывестиАтрибут(Компоновщик, "БИК", СтрокаСчета.БИКБанка, "Т,9");
			ВывестиНеобязательныйАтрибут(Компоновщик, "Банк", СтрокаСчета.НаименованиеБанка, "Т,100");
			
			Если СтрокаСчета.Валютный Тогда
				ВывестиАтрибут(Компоновщик, "Валюта", СтрокаСчета.КодВалюты, "Т,3");
			КонецЕсли;
			
			ВывестиАтрибут(Компоновщик, "СальдоНачальное", СтрокаСчета.СальдоНачальноеДт, "Ч,15,2");
			ВывестиАтрибут(Компоновщик, "ОборотыДт"      , СтрокаСчета.ОборотыДт, "Ч,15,2");
			ВывестиАтрибут(Компоновщик, "ОборотыКт"      , СтрокаСчета.ОборотыКт, "Ч,15,2");
			ВывестиАтрибут(Компоновщик, "СальдоКонечное" , СтрокаСчета.СальдоКонечноеДт, "Ч,15,2");
			
			Если СтрокаСчета.Валютный Тогда
				ВывестиАтрибут(Компоновщик, "СальдоНачальноеВал", СтрокаСчета.СальдоНачальноеВалДт, "Ч,15,2");
				ВывестиАтрибут(Компоновщик, "ОборотыДтВал"      , СтрокаСчета.ОборотыВалДт, "Ч,15,2");
				ВывестиАтрибут(Компоновщик, "ОборотыКтВал"      , СтрокаСчета.ОборотыВалКт, "Ч,15,2");
				ВывестиАтрибут(Компоновщик, "СальдоКонечноеВал" , СтрокаСчета.СальдоКонечноеВалДт, "Ч,15,2");
			КонецЕсли;
			
			ШаблонОтбора = ПрефиксСегментаОтчетаПоСчетуПериоду(
				"БанковскиеСчета", СчетВерхнегоУровня, ДатаНачалаПериода, ДатаКонцаПериода)
				+ "." + СтрокаСчета.Счет.УникальныйИдентификатор() + ".%";
			ВыборкаСегментов = ВыборкаСегментовОтчетаПоШаблону(ШаблонОтбора, СохраненныйДокумент);
			
			Пока ВыборкаСегментов.Следующий() Цикл
			
				СтрокиСекции = ДанныеРегистраДополнительныхФайлов(ВыборкаСегментов.ВидДополнительногоФайла, СохраненныйДокумент);
			
				Если СтрокиСекции <> Неопределено Тогда
					Для Каждого СтрокаСекции Из СтрокиСекции Цикл
						Компоновщик.ЗаписатьНачалоЭлемента("Операция");
						
						ВывестиАтрибут(Компоновщик, "Дата", СтрокаСекции.ДатаОперации, "Д");
						Если ЗначениеЗаполнено(СтрокаСекции.НомерДокумента)
						   И ЗначениеЗаполнено(СтрокаСекции.ДатаДокумента) Тогда
							ВывестиНеобязательныйАтрибут(Компоновщик, "ДокНомер", СтрокаСекции.НомерДокумента, "Т,255");
							ВывестиНеобязательныйАтрибут(Компоновщик, "ДокДата", СтрокаСекции.ДатаДокумента, "Д");
						КонецЕсли;
						
						ВывестиНеобязательныйАтрибут(Компоновщик, "ВидОперации", СтрокаСекции.ВидОперации, "Т,255");
						ВывестиНеобязательныйАтрибут(Компоновщик, "Назначение", СтрокаСекции.Назначение, "Т,255");
						
						ВывестиАтрибут(Компоновщик, "СчетДт", СтрокаСекции.СчетДтКод, "Т,8");
						ВывестиАтрибут(Компоновщик, "СчетКт", СтрокаСекции.СчетКтКод, "Т,8");
						ВывестиАтрибут(Компоновщик, "Сумма", СтрокаСекции.Сумма, "Ч,15,2");
						
						Если СтрокаСчета.Счет.Валютный Тогда
							ВывестиАтрибут(Компоновщик, "СуммаВал", СтрокаСекции.СуммаВал, "Ч,15,2");
						КонецЕсли;
						
						Если ЗначениеЗаполнено(СтрокаСекции.Контрагент) Тогда
							Компоновщик.ЗаписатьНачалоЭлемента("Контрагент");
							
							ВывестиАтрибут(Компоновщик, "Наименование", СтрокаСекции.Контрагент, "Т,250");
							
							Если ЗначениеЗаполнено(СтрокаСекции.ИНН) Тогда
								Если СтрДлина(СтрокаСекции.ИНН) = 10 И СтрДлина(СтрокаСекции.КПП) = 9 Тогда
									ВывестиАтрибут(Компоновщик, "ИНН", СтрокаСекции.ИНН, "Т,10");
									ВывестиАтрибут(Компоновщик, "КПП", СтрокаСекции.КПП, "Т,9");
									
								ИначеЕсли СтрДлина(СтрокаСекции.ИНН) = 12 Тогда
									ВывестиАтрибут(Компоновщик, "ИНН", СтрокаСекции.ИНН, "Т,12");
									
								КонецЕсли;
								
							КонецЕсли;
							
							ВывестиНеобязательныйАтрибут(Компоновщик, "Договор", СтрокаСекции.Договор, "Т, 255");
							
							Компоновщик.ЗаписатьКонецЭлемента(); // Контрагент
							
						КонецЕсли;
						
						Компоновщик.ЗаписатьКонецЭлемента(); // Операция
						
					КонецЦикла;
				КонецЕсли;
			
			КонецЦикла;
			
			Компоновщик.ЗаписатьКонецЭлемента(); // БанкСч
			
		Иначе
			ВывестиУзел_ОперБанкСч_СчетУчета_БанкСч(Компоновщик, КонтекстФормирования, ПериодОтчета, СтрокаСчета.Строки);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

Процедура ДобавитьРезультатВыгрузки(РезультатыВыгрузки, ДвоичныеДанныеФайла, ИдФайл)

	НовыйРезультатВыгрузки = РегламентированнаяОтчетность.НовыйРезультатВыгрузкиРеглОтчета();
	НовыйРезультатВыгрузки.ТипФайлаВыгрузки       = "РасшифровкиБухгалтерскойОтчетности";
	НовыйРезультатВыгрузки.КодировкаФайлаВыгрузки = "windows-1251";
	
	АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанныеФайла, Новый УникальныйИдентификатор);
	
	НовыйРезультатВыгрузки.РеглОтчетВыгружен  = Истина;
	НовыйРезультатВыгрузки.ИмяФайлаВыгрузки   = ИдФайл + ".xml";
	НовыйРезультатВыгрузки.АдресФайлаВыгрузки = АдресВоВременномХранилище;
	
	РезультатыВыгрузки.Добавить(НовыйРезультатВыгрузки);
	
КонецПроцедуры

#КонецОбласти

#Область ВыгрузкаВНесколькоФайлов

Функция ОтборДляВыгрузки(ПараметрыУниверсальнойВыгрузки)

	// В составе дополнительных параметров в УниверсальнаяВыгрузка()
	// может быть передан отбор с именем раздела отчета и его параметрами, с которыми необходимо выгрузить.
	// Структура отбора определена в ЗаявкиНаКредитКлиентСервер.ПараметрыОтчетаЗаемщика().
	//
	// Если отбор не задан, то считаем, что требуется выгрузить все заполненные разделы.
	
	Результат = Новый Структура();
	Результат.Вставить("ВидОтчета",      ""); // Строка, совпадает с ИмяСтраницы из ИнициализироватьДеревоРазделовОтчета() в модуле формы.
	Результат.Вставить("ДатаНачала",     '0001-01-01');
	Результат.Вставить("ДатаОкончания",  '0001-01-01');
	Результат.Вставить("Счет",           Неопределено); // ПланСчетовСсылка.Хозрасчетный
	Результат.Вставить("КодСчета",       "");
	Результат.Вставить("Банки",          Новый Массив());

	Если ПараметрыУниверсальнойВыгрузки.Свойство("Отбор")
		И ТипЗнч(ПараметрыУниверсальнойВыгрузки.Отбор) = Тип("Структура") Тогда
		// Скопируем переданные параметры отбора.
		ЗаполнитьЗначенияСвойств(Результат, ПараметрыУниверсальнойВыгрузки.Отбор);
	КонецЕсли;

	// Заполним строковый код счета для быстрого обращения.
	Результат.Вставить("КодСчета", "");
	
	Если ЗначениеЗаполнено(Результат.Счет) И НЕ ЗначениеЗаполнено(Результат.КодСчета) Тогда
		// В штатной ситуации должен быть указан счет верхнего уровня (без разделительных точек).
		Результат.Вставить("КодСчета", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Результат.Счет, "Код"));
		Результат.КодСчета = СтрЗаменить(СокрЛП(Результат.КодСчета), ".", "");
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

Функция РазделСоответствуетОтбору(ПараметрыВыгрузки, ИмяРаздела, ПараметрыСтраницыРаздела = Неопределено)

	Если НЕ РазделВключенВОтчет(ИмяРаздела, ПараметрыВыгрузки.ДеревоНастройкиСтраниц) Тогда
		Возврат Ложь;
	КонецЕсли;

	Отбор = ПараметрыВыгрузки.Отбор;

	Если НЕ ЗначениеЗаполнено(Отбор.ВидОтчета) Тогда
		// Отбор на выгружаемые отчеты не указан, поэтому выгружаем все, что заполнено.
		Возврат Истина;
	КонецЕсли;
	
	Если Отбор.ВидОтчета <> ИмяРаздела Тогда
		// Требуется выгрузка другого раздела отчета.
		Возврат Ложь;
	КонецЕсли;
	
	Если ПараметрыСтраницыРаздела = Неопределено Тогда
		// Дополнительных параметров заполнения раздела нет.
		Возврат Истина;
	КонецЕсли;
	
	// Проверка счета бухгалтерского учета, по которому требуется отчет.
	Если ЗначениеЗаполнено(Отбор.Счет)
		И ПараметрыСтраницыРаздела.Свойство("Счет")
		И ЗначениеЗаполнено(ПараметрыСтраницыРаздела.Счет) Тогда
		Если Отбор.Счет <> ПараметрыСтраницыРаздела.Счет Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	// Проверка соответствия периода отчета.
	Если ЗначениеЗаполнено(Отбор.ДатаНачала)
		И ПараметрыСтраницыРаздела.Свойство("ДатаНачалаПериода")
		И ЗначениеЗаполнено(ПараметрыСтраницыРаздела.ДатаНачалаПериода) Тогда
		Если НачалоДня(Отбор.ДатаНачала) <> НачалоДня(ПараметрыСтраницыРаздела.ДатаНачалаПериода) Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;

	Если ЗначениеЗаполнено(Отбор.ДатаОкончания)
		И ПараметрыСтраницыРаздела.Свойство("ДатаКонцаПериода")
		И ЗначениеЗаполнено(ПараметрыСтраницыРаздела.ДатаКонцаПериода) Тогда
		Если КонецДня(Отбор.ДатаОкончания) <> КонецДня(ПараметрыСтраницыРаздела.ДатаКонцаПериода) Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;

	Возврат Истина;

КонецФункции

#КонецОбласти

#КонецОбласти

#КонецОбласти

#КонецЕсли