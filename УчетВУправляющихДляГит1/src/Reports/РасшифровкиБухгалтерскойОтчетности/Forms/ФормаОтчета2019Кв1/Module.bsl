Перем мОбъектОтчета;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	// Обход ошибки платформы "Параметр сеанса отсутствует или удален".
	ТабличныйДокумент.Очистить();
	
	ИнициализироватьСписокСтраниц("АнализСчета");
	ИнициализироватьСписокСтраниц("ОперацииПоБанковскимСчетам");
	
	ОтчетОбъект = ОбъектОтчета();
	СтруктураРеквизитовФормы = ОтчетОбъект.СформироватьСтруктуруРеквизитовФормы();
	
	СтруктураРеквизитовФормы.мВерсияФормы = "01/01/2019";
	
	СтруктураРеквизитовФормы.мВыбраннаяФорма           = Параметры.мВыбраннаяФорма;
	СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета   = Параметры.мДатаКонцаПериодаОтчета;
	СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета  = Параметры.мДатаНачалаПериодаОтчета;
	СтруктураРеквизитовФормы.мСкопированаФорма         = Параметры.мСкопированаФорма;
	СтруктураРеквизитовФормы.мСохраненныйДок           = Параметры.мСохраненныйДок;
	СтруктураРеквизитовФормы.Организация               = Параметры.Организация;
	
	СписокОрганизаций = Параметры.СписокОрганизаций;
	Если НЕ ЗначениеЗаполнено(СписокОрганизаций) И ЗначениеЗаполнено(Параметры.Организация) Тогда
		СписокОрганизаций = Новый Массив;
		СписокОрганизаций.Добавить(Параметры.Организация);
	КонецЕсли;
	СтруктураРеквизитовФормы.СписокОрганизаций = СписокОрганизаций;
	
	СтруктураРеквизитовФормы.СформироватьФормуОтчетаАвтоматически = Параметры.СформироватьФормуОтчетаАвтоматически;
	
	мСтруктураЦветовРаскраски = Новый Структура;
	мСтруктураЦветовРаскраски.Вставить("_0", Новый Цвет(255, 255, 192));
	мСтруктураЦветовРаскраски.Вставить("_1", Новый Цвет(192, 192, 192));
	мСтруктураЦветовРаскраски.Вставить("_3", Новый Цвет(230, 240, 220));
	мСтруктураЦветовРаскраски.Вставить("_4", Новый Цвет(192, 220, 192));
	мСтруктураЦветовРаскраски.Вставить("_5", Новый Цвет(255, 255, 255));
	
	// Заполнение и выгрузка поддерживается только в рублях и копейках,
	// но для совместимости с общими механизмами БРО выполняем инициализацию структуры.
	ПорядкиОкругленияОтчетности = Новый Структура;
	ПорядкиОкругленияОтчетности.Вставить("ПеречислениеПорядкиОкругленияОтчетностиОкр1",       Перечисления.ПорядкиОкругленияОтчетности.Окр1);
	ПорядкиОкругленияОтчетности.Вставить("ПеречислениеПорядкиОкругленияОтчетностиОкр1000",    Перечисления.ПорядкиОкругленияОтчетности.Окр1000);
	ПорядкиОкругленияОтчетности.Вставить("ПеречислениеПорядкиОкругленияОтчетностиОкр1000000", Перечисления.ПорядкиОкругленияОтчетности.Окр1000000);
	
	ДатаПодписи = ТекущаяДатаСеанса();
	
	СтруктураРеквизитовФормы.Банк = Параметры.Банк;
	
	Инициализация(Параметры.БезОткрытияФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ОргСтр = " (" + СтруктураРеквизитовФормы.НаимОрганизации + ")";
	Если СтрНайти(Заголовок, ОргСтр) = 0 Тогда
		Заголовок = Заголовок + ОргСтр;
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("ВыполнитьПроверкуПередОткрытием", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если Модифицированность Тогда
		Отказ = Истина;
		
		Если ЗавершениеРаботы Тогда
			ТекстПредупреждения = НСтр("ru='Данные отчета были изменены.
			                               |Перед завершением работы рекомендуется записать отчет,
			                               |иначе измененные данные будут утеряны.'");
			Возврат;
		КонецЕсли;
		
		Оповещение = Новый ОписаниеОповещения("ВопросСохранитьИзмененияЗавершение", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, НСтр("ru='Данные были изменены. Сохранить изменения?'"), РежимДиалогаВопрос.ДаНетОтмена, , КодВозвратаДиалога.Да);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ЗавершениеРаботы Тогда
		// Принудительное закрытие приводит к разрушению данных.
		// Восстановление актуального состояния можно произвести только при повторном открытии.
		Возврат;
	КонецЕсли;
	
	ПриЗакрытииНаСервере();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура РазделыОтчетаПриАктивизацииСтроки(Элемент)
	
	Если Элемент.ТекущиеДанные = Неопределено
	 ИЛИ Элемент.ТекущаяСтрока = СтруктураРеквизитовФормы.ТекущаяСтрокаРазделовОтчета Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураРеквизитовФормы.ТекущаяСтрокаРазделовОтчета = Элемент.ТекущаяСтрока;
	
	Если СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере Тогда
		ИмяРаздела = Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
		
		// Коррекция недопустимого значения номера страницы.
		Если мСтруктураМногоуровневыхРазделов.Свойство(ИмяРаздела) Тогда
			НомерСтраницыРаздела = Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета;
			
			Если НЕ мСтруктураМногоуровневыхРазделов[ИмяРаздела].Свойство("СписокСтраниц")
			   И НЕ мСтруктураМногоуровневыхРазделов[ИмяРаздела].Свойство("Многостраничность")	
			   И НЕ ЗначениеЗаполнено(НомерСтраницыРаздела) Тогда
				НомерСтраницыРаздела = 1;
			КонецЕсли;
			
			Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета = НомерСтраницыРаздела;
			
		КонецЕсли;
		
		Если мСтруктураМногоуровневыхРазделов.Свойство(ИмяРаздела) Тогда
			СтруктураЭлемента = мСтруктураМногоуровневыхРазделов[ИмяРаздела];
			АдресВДеревеДанныхРаздела = Новый Массив;
			
			ИмяКорневогоРаздела = Неопределено;
			СтруктураЭлемента.Свойство("КорневойРаздел", ИмяКорневогоРаздела);
			
			Если ЗначениеЗаполнено(ИмяКорневогоРаздела) Тогда
				ПромежуточныйЭлемент = Элемент.ТекущиеДанные;
				РодительЭлемента = ПромежуточныйЭлемент.ПолучитьРодителя();
				
				Пока РодительЭлемента <> Неопределено Цикл
					ИмяЭлемента = ПромежуточныйЭлемент.КолонкаРазделыОтчетаСокрНаим;
					ИмяРодителяЭлемента = РодительЭлемента.КолонкаРазделыОтчетаСокрНаим;
					СтруктураРодителя = мСтруктураМногоуровневыхРазделов[ИмяРодителяЭлемента];
					
					Если СтруктураРодителя.Свойство("ИменаПодчиненныхРазделов") Тогда
						ИменаПодчиненныхРазделов = СтруктураРодителя["ИменаПодчиненныхРазделов"];
						ИндексСтраницыРодителя = ИменаПодчиненныхРазделов.Найти(ИмяЭлемента);
						АдресВДеревеДанныхРаздела.Вставить(0, ИндексСтраницыРодителя + 1);
					КонецЕсли;
					
					ПромежуточныйЭлемент = РодительЭлемента;
					РодительЭлемента = РодительЭлемента.ПолучитьРодителя();
					
				КонецЦикла;
				
				Если СтруктураЭлемента.Свойство("Многостраничность") Тогда
					АдресВДеревеДанныхРаздела.Вставить(0, ПромежуточныйЭлемент.КолонкаНомерСтраницыРазделаОтчета);
				Иначе
					АдресВДеревеДанныхРаздела.Вставить(0, 1);
				КонецЕсли;
				
			КонецЕсли;
			
			Если СтруктураЭлемента.Свойство("СписокСтраниц") Тогда
				Если Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета <> 0 Тогда
					ПромежуточныйЭлемент = Элемент.ТекущиеДанные;
					РодительЭлемента = ПромежуточныйЭлемент.ПолучитьРодителя();
					
					// Составляем массив номеров страниц вверх по иерархии текущего раздела, пока не дойдем до корневой ветки.
					Пока РодительЭлемента <> Неопределено И РодительЭлемента.КолонкаРазделыОтчетаСокрНаим = ИмяРаздела Цикл

						Если ПромежуточныйЭлемент.КолонкаНомерСтраницыРазделаОтчета <> 0 Тогда
							АдресВДеревеДанныхРаздела.Вставить(0, ПромежуточныйЭлемент.КолонкаНомерСтраницыРазделаОтчета);
						КонецЕсли;

						ПромежуточныйЭлемент = РодительЭлемента;
						РодительЭлемента = РодительЭлемента.ПолучитьРодителя();
						
					КонецЦикла;
					
					Если АдресВДеревеДанныхРаздела.Количество() < 2 И Элемент.ТекущиеДанные.ПолучитьЭлементы().Количество() = 0 Тогда
						// Если формирование отчета по счету требуется только за один период, 
						// то на форме в дереве РазделыОтчета показывается один раздел с номером счета
						// без дополнительной подстроки с названием периода, чтобы не загромождать форму.
						// Но в ДеревеДанныхРаздела хранится двумя вложенными строками (строка счета и подчиненная ей строка периода),
						// поэтому добавим в конец массива адреса строки периода с номером 1.
						АдресВДеревеДанныхРаздела.Добавить(1);
					КонецЕсли;
					
				КонецЕсли;
			ИначеЕсли СтруктураЭлемента.Свойство("Многостраничность") Тогда
				АдресВДеревеДанныхРаздела.Добавить(Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета);
			Иначе
				АдресВДеревеДанныхРаздела.Добавить(1);
			КонецЕсли;
			
			ПереключитьРаздел(ИмяРаздела, АдресВДеревеДанныхРаздела);
			
		Иначе
			ПереключитьРаздел(ИмяРаздела);
			
		КонецЕсли;
		
	Иначе
		СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Истина;
		
	КонецЕсли;
	
	КМенюРО = Элементы.РазделыОтчета.КонтекстноеМеню;
	КМенюРО.Видимость = Ложь;
	КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюДобавитьСтраницу.Видимость = Ложь;
	КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюУдалитьСтраницу.Видимость = Ложь;
	
	Если мСтруктураМногоуровневыхРазделов.Свойство(Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим) Тогда
		СтруктураРаздела = мСтруктураМногоуровневыхРазделов[Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим];
		
		ЭтоРазделСПризнаком_СписокСтраниц = СтруктураРаздела.Свойство("СписокСтраниц");
		Если ЭтоРазделСПризнаком_СписокСтраниц Тогда
			Элемент.Развернуть(Элемент.ТекущаяСтрока);
		КонецЕсли;
		
	КонецЕсли;
	
	ИмяРаздела = Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
	
	Если ИмяРаздела = "Титульный" Тогда
		Элементы.Обновить.Доступность = Истина;
		Элементы.ТабличныйДокументКонтекстноеМенюГруппаСтроки.Видимость = Ложь;
	Иначе
		Элементы.Обновить.Доступность = Ложь;
		Элементы.ТабличныйДокументКонтекстноеМенюГруппаСтроки.Видимость = Истина;
	КонецЕсли;
	
	Элементы.ТабличныйДокумент.ТекущаяОбласть = ТабличныйДокумент.Область(1, 1);
	
КонецПроцедуры

&НаКлиенте
Процедура ТабличныйДокументВыбор(Элемент, Область, СтандартнаяОбработка)
	
	Если СтрЧислоВхождений(Область.Имя, "ДобавитьСтроку") = 1 И Область.Текст <> "" Тогда
		ДобавитьСтроку("");
	ИначеЕсли СтрЧислоВхождений(Область.Имя, "УдалитьСтроку") = 1 И Область.Текст <> "" Тогда
		УдалитьСтроку("");
	ИначеЕсли СтрЧислоВхождений(Область.Имя, "ДобавитьСтраницу") > 0 И Область.Текст <> "" Тогда
		ДобавитьСтраницу("");
	ИначеЕсли СтрЧислоВхождений(Область.Имя, "УдалитьСтраницу") > 0 И Область.Текст <> "" Тогда
		УдалитьСтраницу("");
	КонецЕсли;
	
	Расшифровка = Область.Расшифровка;
	Если ЗначениеЗаполнено(Расшифровка) И ТипЗнч(Расшифровка) = Тип("Структура")
	   И Расшифровка.Свойство("ВидПерехода") И Расшифровка.ВидПерехода = "ДетальныйПеречень" Тогда
		ПрефиксИдентификатораДанных = Расшифровка.ПрефиксИдентификатораДанных;
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("РегламентированныйОтчет", СтруктураРеквизитовФормы.мСохраненныйДок);
		ПараметрыФормы.Вставить("ПрефиксИдентификатораДанных", ПрефиксИдентификатораДанных);
		ПараметрыФормы.Вставить("ИмяМакетаОтчета", "ФормаОтчета2019Кв1_ПереченьОпераций");
		ПараметрыФормы.Вставить("ЗаголовокОтчета", Расшифровка.ЗаголовокОтчета);
		
		ОткрытьФорму("Отчет.РасшифровкиБухгалтерскойОтчетности.Форма.ДетальныйПереченьОпераций", ПараметрыФормы, ЭтаФорма, ПрефиксИдентификатораДанных);
		
	КонецЕсли;
	
	Если Область.Имя = "Получатели" Тогда
		ПоказатьПолучателейОтчета(Область);
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли;
	
	Если СтрНайти(Область.Имя, "Навигация") = 1 Тогда
		ПерейтиНаСегментОтчета(СтруктураРеквизитовФормы.НаимТекущегоРаздела, Область.Имя);
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли;
	
	Если РегламентированнаяОтчетностьКлиент.ВыбраннаяОбластьРегламентированногоОтчетаНеВерна(
		ЭтаФорма, Область, СтандартнаяОбработка) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрВводаПоля = РегламентированнаяОтчетностьКлиентСервер.НайтиСвойстваПоказателя(ЭтаФорма, Область.Имя);
	
	Если ПараметрВводаПоля <> Неопределено И ПараметрВводаПоля.ТаблицаЗначений.Количество() > 0 Тогда
		КодПоказателя = ПараметрВводаПоля.Показатель;
		КопироватьДанныеФормы(ПараметрВводаПоля.ТаблицаЗначений, ТЗВыбора);
		
		ВвестиПоказатель(Элемент, Область, КодПоказателя, Ложь, ПараметрВводаПоля.ТекстПриВыборе, ТЗВыбора, СтандартнаяОбработка);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТабличныйДокументПриИзмененииСодержимогоОбласти(Элемент, Область)
	
	ИмяРаздела = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
	
	ИмяПоказателя = Область.Имя;
	ЗначениеПоказателя = Область.Значение;
	
	Модифицированность = Истина;
	
	Если СтруктураЗависимыхЯчеекДляАвторасчета.Свойство(ИмяРаздела) Тогда
		РасчетПриИзмененииПоказателя(ИмяРаздела, Область.Имя);
	КонецЕсли;
	
	УстановитьДоступностьОбластей(ЭтаФорма, ИмяРаздела);
	
КонецПроцедуры

&НаКлиенте
Процедура ТабличныйДокументПриАктивизацииОбласти(Элемент)
	
	Элементы.ТабличныйДокументКонтекстноеМенюУдалитьСтроку.Доступность = Ложь;
	Элементы.ТабличныйДокументКонтекстноеМенюДобавитьСтроку.Доступность = Ложь;
	
	ИмяГруппы = МногострочнаяЧастьТекущейОбласти(Элемент.ТекущаяОбласть.Имя);
	
	Если ЗначениеЗаполнено(ИмяГруппы) Тогда
		
		Элементы.ТабличныйДокументКонтекстноеМенюДобавитьСтроку.Доступность = Истина;
		
		ИмяПервойГрафы = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппы]["ИменаГраф"][0];
		ИсхКолСтрок = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппы]["ИсхКолСтрок"];
		Координаты = СтрокаСКоординатамиПоказателя(Элемент.ТекущаяОбласть.Имя);
		
		ТестИмя = ИмяПервойГрафы + Координаты + "_" + Формат(ИсхКолСтрок + 1, "ЧГ=");
		Если СтрЧислоВхождений(Элемент.ТекущаяОбласть.Имя, "ДобавитьСтроку") = 0
			И ТабличныйДокумент.Области.Найти(ТестИмя) <> Неопределено Тогда
			Элементы.ТабличныйДокументКонтекстноеМенюУдалитьСтроку.Доступность = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	ДопТекст = ДополнительныйТекстПриДобавленииУдаленииСтрок(ИмяГруппы);
	Если ДопТекст <> Неопределено Тогда
		Элементы.ТабличныйДокументКонтекстноеМенюДобавитьСтроку.Заголовок =
			ДопТекст.ЗаголовокКонтекстногоМенюДобавитьСтроку;
		Элементы.ТабличныйДокументКонтекстноеМенюУдалитьСтроку.Заголовок =
			ДопТекст.ЗаголовокКонтекстногоМенюУдалитьСтроку;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийПриИзменении(Элемент)
	
	Модифицированность = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура СохранитьОтчет(Команда)
	
	Если Элементы.РазделыОтчета.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СохранитьНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьАвто(Команда)
	
	Отказ = Ложь;
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("Команда", Команда);
	
	ЗаполнитьАвтоСохранениеНового(Отказ, ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузку(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьВыгрузкуЗавершение", ЭтотОбъект);
	
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Форма", ЭтаФорма);
	Оповещение = Новый ОписаниеОповещения("ПослеСохраненияФормыЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	СохранитьНаКлиенте(, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура Обновить(Команда)
	
	ЗаполнитьСведенияОбОрганизации();
	
	Модифицированность = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Функция ОбъектОтчета()
	
	Если мОбъектОтчета = Неопределено Тогда 
		мОбъектОтчета = РегламентированнаяОтчетностьВызовСервера.ОбъектОтчета(ИмяФормы);
	КонецЕсли;
	
	Возврат мОбъектОтчета;
	
КонецФункции

&НаСервере
Процедура Инициализация(БезОткрытияФормы = Ложь) Экспорт
	
	ОтчетОбъект = ОбъектОтчета();
	
	СтруктураРеквизитовФормы.мБезОткрытияФормы = БезОткрытияФормы;
	СтруктураРеквизитовФормы.мРежимПечати = Ложь;
	
	СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный";
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(ОтчетОбъект.МакетРаздела(ИмяФормы, СтруктураРеквизитовФормы.НаимТекущегоРаздела));
	
	ОтчетОбъект.ИнициализироватьМногострочныеЧасти(СтруктураРеквизитовФормы);
	мСтруктураМногоуровневыхРазделов = ОтчетОбъект.ИнициализироватьМногоуровневыеРазделы(СтруктураРеквизитовФормы);
	ОтчетОбъект.СформироватьДанныеМногоуровневыхРазделов(ЭтотОбъект);
	
	ИнициализироватьОбычныеРазделы();
	
	ЗаполнитьСтруктуруЗависимыхЯчеекДляАвторасчета();
	
	ИнициализироватьДеревоРазделовОтчета();
	
	Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
		// Новый документ.
		НомерКорректировки = 1;
		СтруктураРеквизитовФормы.ВидДокумента = 0;
		
		// Всегда в рублях и копейках без возможности изменения пользователем.
		СтруктураРеквизитовФормы.ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1;
		СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = 2;

		ОтметитьВНовомОтчетеРазделыДляОтображения();
		
		КопироватьДанныеФормы(мДеревоСтраницОтчета, мДеревоВыбранныхСтраниц);
		
		СтруктураРеквизитовФормы.ИП = НЕ РегламентированнаяОтчетностьВызовСервера.ЭтоЮридическоеЛицо(СтруктураРеквизитовФормы.Организация);
		
		ЗаполнитьСведенияОбОрганизации();
		
		ТабличныйДокумент.Области.ДатаУтвОтчетности.Значение = ДатаПодписи;
		
		СформироватьДеревоРазделовОтчетаНаСервере();
		
		Модифицированность = Истина;
		
	Иначе
		// Сохраненный или скопированный документ.
		ВосстановитьСохраненныеДанные();
		
		Если ЗначениеЗаполнено(СтруктураРеквизитовФормы.мСкопированаФорма) Тогда
			// Действия при копировании формы.
			СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено;
			Модифицированность = Истина;
		КонецЕсли;
		
		Если НЕ БезОткрытияФормы
		   И НЕ СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
			ЗаблокироватьДанныеДляРедактирования(СтруктураРеквизитовФормы.мСохраненныйДок, , ЭтаФорма.УникальныйИдентификатор);
		КонецЕсли;
		
		СтруктураРеквизитовФормы.ИП = НЕ РегламентированнаяОтчетностьВызовСервера.ЭтоЮридическоеЛицо(СтруктураРеквизитовФормы.Организация);
		
		Если СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация Тогда
			ЗаполнитьСведенияОбОрганизации();
		КонецЕсли;
		
	КонецЕсли;
	
	СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
	
	СтруктураРеквизитовФормы.НаимОрганизации = СтруктураРеквизитовФормы.Организация.Наименование;
	
	УстановитьЗаголовокОтчетности();
	
	ПолучитьСведенияОПоказателяхОтчета();
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьДеревоРазделовОтчета()
	
	Показать     = 1; // раздел включен в отчетность
	НеПоказывать = 0; // раздел не включен в отчетность, но может быть добавлен пользователем
	Исключить    = -1; // раздел не включен в отчетность, возможность добавления отсутствует
	
	мДеревоСтраницОтчета.ПолучитьЭлементы().Очистить();
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Титульный";
	СтрокаУровня1.Представление            = "Титульный лист";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = Показать;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	СтрокаУровня1.АвторасчетПоказателей    = Истина;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "ОборотноСальдоваяВедомость";
	СтрокаУровня1.Представление            = "Оборотно-сальдовая ведомость";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = Показать;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	СтрокаУровня1.АвторасчетПоказателей    = Истина;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "АнализСчета";
	СтрокаУровня1.Представление            = "Анализ счета";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = НеПоказывать;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	СтрокаУровня1.АвторасчетПоказателей    = Истина;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "ОперацииПоБанковскимСчетам";
	СтрокаУровня1.Представление            = "Операции по банковским счетам (транзакции)";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = НеПоказывать;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	СтрокаУровня1.АвторасчетПоказателей    = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьДеревоРазделовОтчетаНаКлиенте() Экспорт
	
	// Процедура требуется для работы универсального механизма.
	Возврат;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьДеревоРазделовОтчетаНаСервере()
	
	ЭтаФорма["РазделыОтчета"].ПолучитьЭлементы().Очистить();
	
	Для Каждого ЭлементДереваСтраницОтчета Из ЭтаФорма["мДеревоСтраницОтчета"].ПолучитьЭлементы() Цикл
		Если ЭлементДереваСтраницОтчета.ПоказатьСтраницу = 1 Тогда
			ИмяРаздела = ЭлементДереваСтраницОтчета.ИмяСтраницы;
			ЭтоМногоуровневыйРаздел = мСтруктураМногоуровневыхРазделов.Свойство(ИмяРаздела);
			
			Если ЭтоМногоуровневыйРаздел Тогда
				ДеревоДанныхРаздела = ПолучитьИзВременногоХранилища(
					СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяРаздела]);
				
				Если ДеревоДанныхРаздела.Строки.Количество() = 0 Тогда
					// Раздел не содержит сведений и не должен отображаться.
					Продолжить;
				КонецЕсли;
				
				ЭлементРазделовОтчета = ЭтаФорма["РазделыОтчета"].ПолучитьЭлементы().Добавить();
				ЭлементРазделовОтчета.КолонкаРазделыОтчета         = ЭлементДереваСтраницОтчета.Представление;
				ЭлементРазделовОтчета.КолонкаРазделыОтчетаСокрНаим = ЭлементДереваСтраницОтчета.ИмяСтраницы;
				
				ОформитьВеткуМногоуровнегоРаздела(ИмяРаздела, ЭлементРазделовОтчета, ДеревоДанныхРаздела);
				
			Иначе
				ЭлементРазделовОтчета = ЭтаФорма["РазделыОтчета"].ПолучитьЭлементы().Добавить();
				ЭлементРазделовОтчета.КолонкаРазделыОтчета         = ЭлементДереваСтраницОтчета.Представление;
				ЭлементРазделовОтчета.КолонкаРазделыОтчетаСокрНаим = ЭлементДереваСтраницОтчета.ИмяСтраницы;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОформитьВеткуМногоуровнегоРаздела(ИмяРаздела, ЭлементРазделовОтчета, ДеревоДанныхРаздела)
	
	СтруктураРаздела = мСтруктураМногоуровневыхРазделов[ИмяРаздела];
	
	Если СтруктураРаздела.Свойство("СписокСтраниц") Тогда
		СписокСтраниц = РеквизитФормыВЗначение("СписокСтраниц" + ИмяРаздела);
		
		КолСтрокВДеревеДанныхРаздела = ДеревоДанныхРаздела.Строки.Количество();
		Для НомерСтраницыРаздела = 1 По КолСтрокВДеревеДанныхРаздела Цикл
			КодСчетаСтраницы = ДеревоДанныхРаздела.Строки[НомерСтраницыРаздела - 1].Параметры.Счет;
			СтрокаСтраницы = СписокСтраниц.Найти(КодСчетаСтраницы, "");
			
			СтраницаВключенаВОтчет = СтрокаСтраницы <> Неопределено
			                       И СтрокаСтраницы.Включен = Истина;
			
			Если СтраницаВключенаВОтчет Тогда
				ЭлементРаздел = ЭлементРазделовОтчета.ПолучитьЭлементы().Добавить();
				НаимСтраницы = ДеревоДанныхРаздела.Строки[НомерСтраницыРаздела - 1].Параметры.НаименованиеСтраницы;
				
				ЭлементРаздел.КолонкаРазделыОтчета              = НаимСтраницы;
				ЭлементРаздел.КолонкаРазделыОтчетаСокрНаим      = ИмяРаздела;
				ЭлементРаздел.КолонкаНомерСтраницыРазделаОтчета = НомерСтраницыРаздела;

				// Добавляем страницы для каждого периода, за который требуется формирование отчета.
				Если СтрокаСтраницы.Периоды.Количество() > 1 Тогда
				
					КолСтрокПериодов = СтрокаСтраницы.Периоды.Количество();
					Для НомерСтраницыПериода = 1 По КолСтрокПериодов Цикл

						СтрокаПериода = СтрокаСтраницы.Периоды[НомерСтраницыПериода - 1];
					
						ЭлементПериод = ЭлементРаздел.ПолучитьЭлементы().Добавить();
						
						НаимСтраницы  = ПредставлениеПериода(СтрокаПериода.ДатаНачалаПериода, СтрокаПериода.ДатаКонцаПериода);
						
						ЭлементПериод.КолонкаРазделыОтчета              = НаимСтраницы;
						ЭлементПериод.КолонкаРазделыОтчетаСокрНаим      = ИмяРаздела;
						ЭлементПериод.КолонкаНомерСтраницыРазделаОтчета = НомерСтраницыПериода;
					
						СформироватьПодчиненныеРазделы(СтруктураРаздела, ДеревоДанныхРаздела, ЭлементПериод);
						
					КонецЦикла;
				
				Иначе
					// Если период только один, то вложенные строки не создаем.
					СформироватьПодчиненныеРазделы(СтруктураРаздела, ДеревоДанныхРаздела, ЭлементРаздел);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	ИначеЕсли СтруктураРаздела.Свойство("Многостраничность") Тогда
		
		КолСтрокВДеревеДанныхРаздела = Макс(ДеревоДанныхРаздела.Строки.Количество(), 1);
		
		// Если ОСВ строится только за 1 период, то вложенные строки не создаем.
		Если ИмяРаздела <> "ОборотноСальдоваяВедомость" ИЛИ КолСтрокВДеревеДанныхРаздела > 1 Тогда
						
			Для НомерСтраницыРаздела = 1 По КолСтрокВДеревеДанныхРаздела Цикл
				ЭлементРаздел = ЭлементРазделовОтчета.ПолучитьЭлементы().Добавить();
				
				Если ИмяРаздела = "ОборотноСальдоваяВедомость" Тогда
					// Отчет строится более, чем за 1 период
					ПараметрыПериодаОСВ = ДеревоДанныхРаздела.Строки[НомерСтраницыРаздела - 1].Параметры;
					ЭлементРаздел.КолонкаРазделыОтчета = ПредставлениеПериода(ПараметрыПериодаОСВ.ДатаНачалаПериода, ПараметрыПериодаОСВ.ДатаКонцаПериода);
				Иначе	
					НаимСтраницы = "Стр.";
					Если СтруктураРаздела.Свойство("НаимСтраницы") Тогда
						НаимСтраницы = СтруктураРаздела["НаимСтраницы"];
					КонецЕсли;
					ЭлементРаздел.КолонкаРазделыОтчета              = НаимСтраницы
						+ ?(НаимСтраницы = "Стр.", "", ". Стр. ") + Формат(НомерСтраницыРаздела, "ЧГ=");
				КонецЕсли;		
				
				ЭлементРаздел.КолонкаРазделыОтчетаСокрНаим      = ИмяРаздела;
				ЭлементРаздел.КолонкаНомерСтраницыРазделаОтчета = НомерСтраницыРаздела;
				
				СформироватьПодчиненныеРазделы(СтруктураРаздела, ДеревоДанныхРаздела, ЭлементРаздел);
				
			КонецЦикла;
		
		КонецЕсли;	
		
	Иначе
		СформироватьПодчиненныеРазделы(СтруктураРаздела, ДеревоДанныхРаздела, ЭлементРазделовОтчета);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьПодчиненныеРазделы(СтруктураРаздела, ДеревоДанныхРаздела, ЭлементРаздел)
	
	Если СтруктураРаздела.Свойство("ИменаПодчиненныхРазделов") Тогда
		
		ИменаПодчиненныхРазделов = СтруктураРаздела["ИменаПодчиненныхРазделов"];
		КолПодчРазделов = ИменаПодчиненныхРазделов.Количество();
		
		Для ИндПодчРаздела = 0 По КолПодчРазделов - 1 Цикл
			ИмяРаздела = ИменаПодчиненныхРазделов[ИндПодчРаздела];
			СтруктураПодчРаздела = мСтруктураМногоуровневыхРазделов[ИмяРаздела];
			
			ПараметрыРаздела = ПараметрыРазделаВДеревеСтраницОтчета(ИмяРаздела);
			
			Если ПараметрыРаздела.Показать Тогда
				ПодчиненныйЭлемент = ЭлементРаздел.ПолучитьЭлементы().Добавить();
				
				ПодчиненныйЭлемент.КолонкаРазделыОтчета         = ПараметрыРаздела.Представление;
				ПодчиненныйЭлемент.КолонкаРазделыОтчетаСокрНаим = ИмяРаздела;
				
				ОформитьВеткуМногоуровнегоРаздела(ИмяРаздела, ПодчиненныйЭлемент, ДеревоДанныхРаздела);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПараметрыРазделаВДеревеСтраницОтчета(ИмяРаздела)
	
	ПараметрыРаздела = Новый Структура;
	ПараметрыРаздела.Вставить("Показать", Ложь);
	ПараметрыРаздела.Вставить("Представление", "раздел не существует");
	
	ДеревоСтраниц = РеквизитФормыВЗначение("мДеревоСтраницОтчета");
	НайденнаяВетвь = ДеревоСтраниц.Строки.Найти(ИмяРаздела, "ИмяСтраницы", Истина);
	
	Если НайденнаяВетвь <> Неопределено Тогда
		ПараметрыРаздела.Вставить("Показать", НайденнаяВетвь.ПоказатьСтраницу = 1);
		ПараметрыРаздела.Вставить("Представление", НайденнаяВетвь.Представление);
	КонецЕсли;
	
	Возврат ПараметрыРаздела;
	
КонецФункции

&НаКлиенте
Процедура ВыполнитьПроверкуПередОткрытием()
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПриОткрытииЗавершение", ЭтотОбъект);
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередОткрытиемФормыРегламентированногоОтчета(
		ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытииЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Модифицированность = Ложь;
		Закрыть();
		Возврат;
	КонецЕсли;

	Если СтруктураРеквизитовФормы.СформироватьФормуОтчетаАвтоматически И Модифицированность Тогда
		// Сразу запускаем заполнение с клиента, когда форма отчета уже открылась и прорисовалась.
		// В отличие от других регламентированных отчетов расшифровки сохраняют свои данные
		// в регистр сведений ДополнительныеФайлыРегламентированнойОтчетности, в котором нужна ссылка рег.отчета.
		// Поэтому новый отчет требуется сразу же сохранить в базе.
		// Чтобы это было единообразно с  интерактивным сохранением вызываем сохранение с клиента для возможности оповещения других форм.
		ЗаполнитьАвто(Команды.Заполнить);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьОбычныеРазделы(МассивИменРазделов = Неопределено)
	
	Если МассивИменРазделов = Неопределено Тогда
		МассивИменРазделов = Новый Массив;
		МассивИменРазделов.Добавить("Титульный");
	КонецЕсли;
	
	СохрТабличныйДокумент = Новый ТабличныйДокумент;
	СохрТабличныйДокумент.Вывести(ТабличныйДокумент);
	
	ОтчетОбъект = ОбъектОтчета();
	Для Каждого ИмяРаздела Из МассивИменРазделов Цикл
		
		ЭтаФорма["СтруктураДанных" + ИмяРаздела] = Новый Структура;
		
		ТабличныйДокумент.Очистить();
		ТабличныйДокумент.Вывести(ОтчетОбъект.МакетРаздела(ИмяФормы, ИмяРаздела));
		
		СохранитьДанныеРаздела(ИмяРаздела);
		
	КонецЦикла;
	
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(СохрТабличныйДокумент);
	
КонецПроцедуры

&НаСервере
Функция МакетРазделаСоСпискомСтраниц(ИмяРаздела)
	
	Шаблон = ОбъектОтчета().МакетРаздела(ИмяФормы, ИмяРаздела + "_СписокСтраниц");
	МакетРаздела = Новый ТабличныйДокумент;
	
	Секция_Шапка = Шаблон.ПолучитьОбласть("Шапка");
	МакетРаздела.Вывести(Секция_Шапка);
	
	СписокСтраниц = РеквизитФормыВЗначение("СписокСтраниц" + ИмяРаздела);
	ВыбранныеСтраницы = СписокСтраниц.НайтиСтроки(Новый Структура("Включен", Истина));
	
	Если ВыбранныеСтраницы.Количество() = 0 Тогда
		Секция_СчетаНеОтмечены = Шаблон.ПолучитьОбласть("СчетаНеОтмечены");
		МакетРаздела.Вывести(Секция_СчетаНеОтмечены);
		
	Иначе
		Секция_ОписаниеСчета = Шаблон.ПолучитьОбласть("ОписаниеСчета");
		Для Каждого СтрокаВыбранногоСчета Из ВыбранныеСтраницы Цикл
			Секция_ОписаниеСчета.Параметры.ОписаниеСчета = "- " + СтрокаВыбранногоСчета.Наименование;
			МакетРаздела.Вывести(Секция_ОписаниеСчета);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат МакетРаздела;
	
КонецФункции

&НаСервере
Функция МакетРазделаКорень(ИмяРаздела, ДеревоДанныхРаздела)
	
	Шаблон = ОбъектОтчета().МакетРаздела(ИмяФормы, ИмяРаздела + "_Корень");
	МакетРаздела = Новый ТабличныйДокумент;
	
	Секция_Шапка = Шаблон.ПолучитьОбласть("Шапка");
	МакетРаздела.Вывести(Секция_Шапка);
	
	Если ДеревоДанныхРаздела.Строки.Количество() = 0 Тогда
		Секция = Шаблон.ПолучитьОбласть("ПериодыНеУказаны");
	Иначе
		Секция = Шаблон.ПолучитьОбласть("ОтчетЗаНесколькоПериодов");
	КонецЕсли;
	
	МакетРаздела.Вывести(Секция);
	
	Возврат МакетРаздела;
	
КонецФункции

&НаСервере
Функция СборныйМакетРаздела(ИмяРаздела, ДанныеРаздела)
	
	Шаблон = ОбъектОтчета().МакетРаздела(ИмяФормы, ИмяРаздела);
	МакетРаздела = Новый ТабличныйДокумент;
	
	МакетРазделаСПараметрами = Новый Структура;
	МакетРазделаСПараметрами.Вставить("МакетРаздела", МакетРаздела);
	
	Если ИмяРаздела = "ОборотноСальдоваяВедомость" Тогда
		Если ТипЗнч(ДанныеРаздела) = Тип("ДеревоЗначений") Тогда 
			МакетРаздела.Вывести(МакетРазделаКорень(ИмяРаздела, ДанныеРаздела));
		Иначе
			СформироватьОборотноСальдовуюВедомость(МакетРазделаСПараметрами, Шаблон, ДанныеРаздела);
		КонецЕсли;
		
	ИначеЕсли ИмяРаздела = "АнализСчета" ИЛИ ИмяРаздела = "ОперацииПоБанковскимСчетам" Тогда
		Если ТипЗнч(ДанныеРаздела) <> Тип("СтрокаДереваЗначений") Тогда
			МакетРаздела.Вывести(МакетРазделаСоСпискомСтраниц(ИмяРаздела));
			
		Иначе
			Если ИмяРаздела = "АнализСчета" Тогда
				СформироватьСекциюАнализаСчета(МакетРазделаСПараметрами, Шаблон, ДанныеРаздела);
			ИначеЕсли ИмяРаздела = "ОперацииПоБанковскимСчетам" Тогда
				СформироватьСводныйОтчетПоБанковскимСчетам(МакетРазделаСПараметрами, Шаблон, ДанныеРаздела);
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		ОбластьПолучатели = Шаблон.Области.Найти("ПолучателиОтчета");
		Если ОбластьПолучатели <> Неопределено Тогда
			ВывестиОбластьПолучатели(Шаблон, МакетРаздела, ДанныеРаздела.Параметры.Банки);
			Шаблон.УдалитьОбласть(ОбластьПолучатели, ТипСмещенияТабличногоДокумента.ПоВертикали);
		КонецЕсли;
		
		МакетРаздела.Вывести(Шаблон);
		
	КонецЕсли;
	
	Возврат МакетРазделаСПараметрами;
	
КонецФункции

&НаСервере
Процедура СформироватьОборотноСальдовуюВедомость(МакетРазделаСПараметрами, Шаблон, ДанныеРаздела)
	
	МакетРаздела = МакетРазделаСПараметрами.МакетРаздела;
	
	ДатаНачалаПериода = ДанныеРаздела.Параметры.ДатаНачалаПериода;
	ДатаКонцаПериода  = ДанныеРаздела.Параметры.ДатаКонцаПериода;
	
	ВывестиОбластьПолучатели(Шаблон, МакетРаздела, ДанныеРаздела.Параметры.Банки);
	
	Область_Шапка = Шаблон.ПолучитьОбласть("Шапка");
	Область_Шапка.Параметры.Период = СтрШаблон(
		НСтр("ru = 'за %1'"), ПредставлениеПериода(ДатаНачалаПериода, ДатаКонцаПериода));
	МакетРаздела.Вывести(Область_Шапка);
	
	Если ДанныеРаздела.ДополнительныеДанные = Неопределено Тогда
		МакетРаздела.Вывести(Шаблон.ПолучитьОбласть("ЗаполнениеОтчета"));
		Возврат;
	КонецЕсли;
	
	Если ДанныеРаздела.ДополнительныеДанные.Представление <> Неопределено Тогда
		МакетРаздела.Вывести(ДанныеРаздела.ДополнительныеДанные.Представление);
		Возврат;
	КонецЕсли;
	
	БалансовыеСчета = ДанныеРаздела.ДополнительныеДанные.Данные.Балансовые;
	ЗабалансовыеСчета = ДанныеРаздела.ДополнительныеДанные.Данные.Забалансовые;
	
	МакетРаздела.Вывести(Шаблон.ПолучитьОбласть("ОСВ_Шапка"));
	
	ФиксацияСверху = МакетРаздела.ВысотаТаблицы;
	МакетРазделаСПараметрами.Вставить("ФиксацияСверху", ФиксацияСверху);
	
	Область_ИтогоОСВ = Шаблон.ПолучитьОбласть("ОСВ_Итого");
	
	Если БалансовыеСчета.Строки.Количество() > 0 Тогда
		СтрокаИтого = БалансовыеСчета.Строки[0];
		Область_ИтогоОСВ.Параметры.Заполнить(СтрокаИтого);
		
		МакетРаздела.НачатьАвтогруппировкуСтрок();
		ВывестиСтрокуСчетаОСВ(СтрокаИтого, МакетРаздела, Шаблон, 1);
		МакетРаздела.ЗакончитьАвтогруппировкуСтрок();
		
	КонецЕсли;
	
	МакетРаздела.Вывести(Область_ИтогоОСВ);
	
	Если ЗабалансовыеСчета.Строки.Количество() > 0 Тогда
		СтрокаИтого = ЗабалансовыеСчета.Строки[0];
		
		МакетРаздела.НачатьАвтогруппировкуСтрок();
		ВывестиСтрокуСчетаОСВ(СтрокаИтого, МакетРаздела, Шаблон, 1);
		МакетРаздела.ЗакончитьАвтогруппировкуСтрок();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиСтрокуСчетаОСВ(СтрокиОСВ, МакетРаздела, Шаблон, Группировка)
	
	Для Каждого СтрокаПоСчету Из СтрокиОСВ.Строки Цикл
		Область_СтрокаОСВ = Шаблон.ПолучитьОбласть("ОСВ_Строка");
		Область_СтрокаОСВ.Параметры.Заполнить(СтрокаПоСчету);
		МакетРаздела.Вывести(Область_СтрокаОСВ, Группировка);
		
		ВывестиСтрокуСчетаОСВ(СтрокаПоСчету, МакетРаздела, Шаблон, Группировка + 1);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьСекциюАнализаСчета(МакетРазделаСПараметрами, Шаблон, ДанныеРаздела, НомерСекции = 1)
	
	МакетРаздела = МакетРазделаСПараметрами.МакетРаздела;
	
	ИмяРаздела = "АнализСчета";
	
	ДатаНачалаПериода = ДанныеРаздела.Параметры.ДатаНачалаПериода;
	ДатаКонцаПериода  = ДанныеРаздела.Параметры.ДатаКонцаПериода;
	ЭтоОтчетЗаКонкретныйПериод = ЗначениеЗаполнено(ДатаНачалаПериода) И ЗначениеЗаполнено(ДатаКонцаПериода);
	
	СтруктураРеквизитовФормы.АктивныйСегмент = НомерСекции;
	
	Если ЭтоОтчетЗаКонкретныйПериод Тогда
		ВывестиОбластьПолучатели(Шаблон, МакетРаздела, ДанныеРаздела.Параметры.Банки);
	КонецЕсли;
	
	Область_Шапка = Шаблон.ПолучитьОбласть("Шапка");
	Область_Шапка.Параметры.ОсновнойСчет = ДанныеРаздела.Параметры.Счет.Код;
	Если ЭтоОтчетЗаКонкретныйПериод Тогда
		Область_Шапка.Параметры.Период = СтрШаблон(
			НСтр("ru = 'за %1'"), ПредставлениеПериода(ДатаНачалаПериода, ДатаКонцаПериода));
	КонецЕсли;
	МакетРаздела.Вывести(Область_Шапка);
	
	Если НЕ ЭтоОтчетЗаКонкретныйПериод Тогда
		МакетРаздела.Вывести(Шаблон.ПолучитьОбласть("ОтчетЗаНесколькоПериодов"));
		Возврат;
	КонецЕсли;
	
	ОтчетОбъект = ОбъектОтчета();
	ОтчетСсылка = СсылкаНаОтчет();
	СчетУчета = ДанныеРаздела.Параметры.Счет;
	ВыборкаСегментов = ОтчетОбъект.ВыборкаСегментовОтчетаПоСчетуПериоду(
		ИмяРаздела, СчетУчета, ДатаНачалаПериода, ДатаКонцаПериода, ОтчетСсылка);
	
	Если ВыборкаСегментов.Количество() = 0 Тогда
		МакетРаздела.Вывести(Шаблон.ПолучитьОбласть("ЗаполнениеОтчета"));
		
	Иначе
		Если ВыборкаСегментов.Количество() > 1 Тогда
			Область_Навигация = Шаблон.ПолучитьОбласть("Навигация");
			НомерСтраницы = "Стр. " + СтрокаЧГ0(НомерСекции) + " из " + СтрокаЧГ0(ВыборкаСегментов.Количество());
			Область_Навигация.Параметры.НомерСтраницы = НомерСтраницы;
			МакетРаздела.Вывести(Область_Навигация);
		КонецЕсли;
		
		Область_ШапкаТаблицы = Шаблон.ПолучитьОбласть("ШапкаТаблицы");
		
		Область_ШапкаТаблицы.Параметры.НачалоПериода = Формат(ДатаНачалаПериода, "ДФ=dd.MM.yyyy");
		Область_ШапкаТаблицы.Параметры.КонецПериода  = Формат(ДатаКонцаПериода, "ДФ=dd.MM.yyyy");
		
		МакетРаздела.Вывести(Область_ШапкаТаблицы);
		
		ФиксацияСверху = МакетРаздела.ВысотаТаблицы;
		МакетРазделаСПараметрами.Вставить("ФиксацияСверху", ФиксацияСверху);
		
		Если НомерСекции = 1 Тогда
			ВыборкаСегментовИтогов = ОтчетОбъект.ВыборкаСегментовОтчетаПоСчетуПериоду(
				ИмяРаздела + "Итоги", СчетУчета, ДатаНачалаПериода, ДатаКонцаПериода, ОтчетСсылка);
			
			Если ВыборкаСегментовИтогов.Следующий() Тогда
				ИтогиОтчета = ОтчетОбъект.ДанныеРегистраДополнительныхФайлов(
					ВыборкаСегментовИтогов.ВидДополнительногоФайла, ОтчетСсылка);
				
				Область_ИтогТаблицы = Шаблон.ПолучитьОбласть("ИтогТаблицы");
				Область_ИтогТаблицы.Параметры.Заполнить(ИтогиОтчета);
				МакетРаздела.Вывести(Область_ИтогТаблицы);
				
			КонецЕсли;
			
		КонецЕсли;
		
		ВидДополнительногоФайла = ОтчетОбъект.ПрефиксСегментаОтчетаПоСчетуПериоду(
			ИмяРаздела, СчетУчета, ДатаНачалаПериода, ДатаКонцаПериода)
			+ "." + СтрокаЧГ0(НомерСекции);
		
		СтрокиСекции = ОтчетОбъект.ДанныеРегистраДополнительныхФайлов(ВидДополнительногоФайла, ОтчетСсылка);
		
		МакетРаздела.НачатьАвтогруппировкуСтрок();
		
		Для Каждого СтрокаСекции Из СтрокиСекции Цикл
			
			// На нижнем уровне выборки есть записи, которые нужны только для расчета итогов и выгрузки в xml (ДетальнаяЗапись = Ложь) - игнорируем их.
			Если СтрокаСекции.Уровень = 4 И НЕ СтрокаСекции.ДетальнаяЗапись Тогда
				Продолжить;
			КонецЕсли;
			
			Если СтрокаСекции.Уровень = 4 Тогда // движения по кор. счетам
				Область_СтрокаТаблицы = Шаблон.ПолучитьОбласть("СтрокаТаблицыКорСчет");
			ИначеЕсли СтрокаСекции.Уровень < 4 Тогда
				Область_СтрокаТаблицы = Шаблон.ПолучитьОбласть("СтрокаТаблицыУровень" + Формат(СтрокаСекции.Уровень, "ЧН="));
			Иначе
				ВызватьИсключение "Недопустимое значение в служебных данных при построении анализа счета";
			КонецЕсли;
			
			Область_СтрокаТаблицы.Параметры.Заполнить(СтрокаСекции);
			МакетРаздела.Вывести(Область_СтрокаТаблицы, СтрокаСекции.Уровень); 
			
		КонецЦикла;
		
		МакетРаздела.ЗакончитьАвтогруппировкуСтрок();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьСводныйОтчетПоБанковскимСчетам(МакетРазделаСПараметрами, Шаблон, ДанныеРаздела)
	
	МакетРаздела = МакетРазделаСПараметрами.МакетРаздела;
	
	ПрефиксВидаФайла = "БанковскиеСчета";
	
	ДатаНачалаОтчета = ДанныеРаздела.Параметры.ДатаНачалаПериода;
	ДатаКонцаОтчета  = ДанныеРаздела.Параметры.ДатаКонцаПериода;
	ЭтоОтчетЗаКонкретныйПериод = ЗначениеЗаполнено(ДатаНачалаОтчета) И ЗначениеЗаполнено(ДатаКонцаОтчета);
	
	Если ЭтоОтчетЗаКонкретныйПериод Тогда
		ВывестиОбластьПолучатели(Шаблон, МакетРаздела, ДанныеРаздела.Параметры.Банки);
	КонецЕсли;
	
	Область_Шапка = Шаблон.ПолучитьОбласть("Шапка");
	Область_Шапка.Параметры.ОсновнойСчет      = ДанныеРаздела.Параметры.Счет.Код;
	Область_Шапка.Параметры.НаименованиеСчета = ДанныеРаздела.Параметры.Счет.Наименование;
	Если ЭтоОтчетЗаКонкретныйПериод Тогда
		Область_Шапка.Параметры.Период = СтрШаблон(
			НСтр("ru = 'за %1'"), ПредставлениеПериода(ДатаНачалаОтчета, ДатаКонцаОтчета));
	КонецЕсли;
	МакетРаздела.Вывести(Область_Шапка);

	Если НЕ ЭтоОтчетЗаКонкретныйПериод Тогда
		МакетРаздела.Вывести(Шаблон.ПолучитьОбласть("ОтчетЗаНесколькоПериодов"));
		Возврат;
	КонецЕсли;
	
	Если ДанныеРаздела.ДополнительныеДанные = Неопределено Тогда
		МакетРаздела.Вывести(Шаблон.ПолучитьОбласть("ЗаполнениеОтчета"));
		
	Иначе
		Область_ШапкаТаблицы = Шаблон.ПолучитьОбласть("ШапкаТаблицы");
		
		Область_ШапкаТаблицы.Параметры.НачалоПериода = Формат(ДатаНачалаОтчета, "ДФ=dd.MM.yyyy");
		Область_ШапкаТаблицы.Параметры.КонецПериода  = Формат(ДатаКонцаОтчета, "ДФ=dd.MM.yyyy");
		
		МакетРаздела.Вывести(Область_ШапкаТаблицы);
		
		ФиксацияСверху = МакетРаздела.ВысотаТаблицы;
		МакетРазделаСПараметрами.Вставить("ФиксацияСверху", ФиксацияСверху);
		
		// Вывод сведений по счету верхнего уровня.
		СтрокаСчетаВерхнегоУровня = ДанныеРаздела.ДополнительныеДанные.Данные.Строки[0];
		
		Область_БухгалтерскийСчет = Шаблон.ПолучитьОбласть("БухгалтерскийСчет");
		Область_БухгалтерскийСчет.Параметры.Заполнить(СтрокаСчетаВерхнегоУровня);
		
		МакетРаздела.Вывести(Область_БухгалтерскийСчет);
		
		ВеличинаОтступа = 2;
		
		ПараметрыВывода = Новый Структура;
		ПараметрыВывода.Вставить("СтрокиДерева", СтрокаСчетаВерхнегоУровня.Строки);
		ПараметрыВывода.Вставить("ВеличинаОтступа", ВеличинаОтступа);
		ПараметрыВывода.Вставить("Шаблон", Шаблон);
		ПараметрыВывода.Вставить("МакетРаздела", МакетРаздела);
		ПараметрыВывода.Вставить("ДатаНачалаОтчета", ДатаНачалаОтчета);
		ПараметрыВывода.Вставить("ДатаКонцаОтчета", ДатаКонцаОтчета);
		ПараметрыВывода.Вставить("СчетВерхнегоУровня", СтрокаСчетаВерхнегоУровня.Счет);
		
		ВывестиСведенияПоСубсчетамИБанковскимСчетам(ПараметрыВывода);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиСведенияПоСубсчетамИБанковскимСчетам(ПараметрыВывода)
	
	ОтчетОбъект = ОбъектОтчета();

	СтрокиДерева = ПараметрыВывода.СтрокиДерева;
	ВеличинаОтступа = ПараметрыВывода.ВеличинаОтступа;
	Шаблон = ПараметрыВывода.Шаблон;
	ДатаНачалаОтчета = ПараметрыВывода.ДатаНачалаОтчета;
	ДатаКонцаОтчета = ПараметрыВывода.ДатаКонцаОтчета;
	МакетРаздела = ПараметрыВывода.МакетРаздела;
	СчетВерхнегоУровня = ПараметрыВывода.СчетВерхнегоУровня;
	
	ОписаниеТипаБанковскиеСчета = ОтчетностьВБанкиСлужебный.ТипыСущности("БанковскиеСчета");
	
	Для Каждого СтрокаСчета Из СтрокиДерева Цикл
		Если ОписаниеТипаБанковскиеСчета.СодержитТип(ТипЗнч(СтрокаСчета.Счет)) Тогда
			Область_БанковскийСчет = Шаблон.ПолучитьОбласть("БанковскийСчет");
			Область_БанковскийСчет.Области.ОбластьБанковскийСчет.Отступ = ВеличинаОтступа;
			
			Область_БанковскийСчет.Параметры.Заполнить(СтрокаСчета);
			
			ПрефиксИдентификатораДанных = ОтчетОбъект.ПрефиксСегментаОтчетаПоСчетуПериоду(
				"БанковскиеСчета", СчетВерхнегоУровня, ДатаНачалаОтчета, ДатаКонцаОтчета)
				+ "." + СтрокаСчета.Счет.УникальныйИдентификатор();
			                            
			ЗаголовокОтчета = "Операции за " + ПредставлениеПериода(ДатаНачалаОтчета, ДатаКонцаОтчета)
			                + " по счету " + СтрокаСчета.Счет;
			
			ПараметрыДетальногоПеречня = Новый Структура;
			ПараметрыДетальногоПеречня.Вставить("ВидПерехода", "ДетальныйПеречень");
			ПараметрыДетальногоПеречня.Вставить("ПрефиксИдентификатораДанных", ПрефиксИдентификатораДанных);
			ПараметрыДетальногоПеречня.Вставить("ЗаголовокОтчета", ЗаголовокОтчета);
			
			Область_БанковскийСчет.Параметры.ДетальныйПеречень = ПараметрыДетальногоПеречня;
			
			МакетРаздела.Вывести(Область_БанковскийСчет);
			
		Иначе
			Область_БухгалтерскийСубсчет = Шаблон.ПолучитьОбласть("БухгалтерскийСубсчет");
			Область_БухгалтерскийСубсчет.Области.ОбластьСубсчет.Отступ = ВеличинаОтступа;
			
			Область_БухгалтерскийСубсчет.Параметры.Заполнить(СтрокаСчета);
			
			МакетРаздела.Вывести(Область_БухгалтерскийСубсчет);
			
			ПараметрыВывода.ВеличинаОтступа = ВеличинаОтступа + 2;
			ПараметрыВывода.Вставить("СтрокиДерева", СтрокаСчета.Строки);
			
			ВывестиСведенияПоСубсчетамИБанковскимСчетам(ПараметрыВывода);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция СсылкаНаОтчет()
	
	СсылкаНаОтчет = Документы.РегламентированныйОтчет.ПустаяСсылка();
	
	Если ТипЗнч(СтруктураРеквизитовФормы.мСохраненныйДок) = Тип("ДокументСсылка.РегламентированныйОтчет") Тогда
		СсылкаНаОтчет = СтруктураРеквизитовФормы.мСохраненныйДок;
	КонецЕсли;
	
	Возврат СсылкаНаОтчет;
	
КонецФункции

#Область ПомещениеДанныхИзМестХраненияВТабличныйДокумент

&НаСервере
Процедура ПереключитьРаздел(ИмяРаздела, НовыеНомераСтрокМногоуровнегоРаздела = Неопределено)
	
	ИмяИсходногоРаздела = СтруктураРеквизитовФормы.НаимТекущегоРаздела;
	
	СохранитьДанныеРаздела(ИмяИсходногоРаздела);
	
	ПоказатьРаздел(ИмяРаздела, НовыеНомераСтрокМногоуровнегоРаздела);
	
КонецПроцедуры

&НаСервере
Процедура ПоказатьРаздел(ИмяРаздела, НовыеНомераСтрокМногоуровнегоРаздела = Неопределено)
	
	Элементы.СтраницыОтчета.ТекущаяСтраница = Элементы.ТаблДок;
	ВывестиДанныеВТабличныйДокумент(ИмяРаздела, НовыеНомераСтрокМногоуровнегоРаздела);
	
	СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяРаздела;
	СтруктураРеквизитовФормы.НомерСтраницыТекущегоРаздела = НовыеНомераСтрокМногоуровнегоРаздела;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиДанныеВТабличныйДокумент(ИмяТекРаздела, НовыеНомераСтрокМногоуровнегоРаздела = Неопределено)
	
	ТабличныйДокумент.Очистить();
	
	Если мСтруктураМногоуровневыхРазделов.Свойство(ИмяТекРаздела) Тогда
		// Многоуровневые разделы.
		СтруктураРаздела = мСтруктураМногоуровневыхРазделов[ИмяТекРаздела];
		
		ИмяГлРаздела = Неопределено;
		СтруктураРаздела.Свойство("КорневойРаздел", ИмяГлРаздела);
		ИмяГлРаздела = ?(ИмяГлРаздела = Неопределено, ИмяТекРаздела, ИмяГлРаздела);
		
		ДеревоДанныхРаздела = ПолучитьИзВременногоХранилища(
			СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяГлРаздела]);
		
		ТекВетка = ДеревоДанныхРаздела;
		
		СкрыватьЭлементыУдаленияСтраницы = Ложь;
		
		Если СтруктураРаздела.Свойство("Многостраничность") И НовыеНомераСтрокМногоуровнегоРаздела[0] = 0 Тогда
			// Выбрана корневая строка многосраничного раздела.
			// Если в разделе 1 страница, то выводим отчет сразу на уровне корня без вывода подчиненных строк.
			// Для этого используем данные из первой подчиненной строки дерева.
			Если ТекВетка.Строки.Количество() = 1 Тогда 
				СкрыватьЭлементыУдаленияСтраницы = Истина;
				ТекВетка = ТекВетка.Строки[0];
			КонецЕсли;
		ИначеЕсли ТипЗнч(НовыеНомераСтрокМногоуровнегоРаздела) = Тип("Массив") Тогда
			Для Каждого НомерСтроки Из НовыеНомераСтрокМногоуровнегоРаздела Цикл
				СкрыватьЭлементыУдаленияСтраницы = (ТекВетка.Строки.Количество() < 2);
				ТекВетка = ТекВетка.Строки[НомерСтроки - 1];
			КонецЦикла;
		КонецЕсли;
		
		МакетРазделаСПараметрами = СборныйМакетРаздела(ИмяТекРаздела, ТекВетка);
		
		ТабличныйДокумент.Вывести(МакетРазделаСПараметрами.МакетРаздела);
		Если МакетРазделаСПараметрами.Свойство("ФиксацияСверху") Тогда
			ТабличныйДокумент.ФиксацияСверху = МакетРазделаСПараметрами.ФиксацияСверху;
		Иначе
			ТабличныйДокумент.ФиксацияСверху = 0;
		КонецЕсли;
		
		Если СкрыватьЭлементыУдаленияСтраницы Тогда
			СкрытьЭлементыУдаленияСтраницы();
		КонецЕсли;
		
		Если ТипЗнч(ТекВетка) = Тип("СтрокаДереваЗначений") Тогда
			НеотображаемыеПоказатели = ТекВетка.Параметры;
			
			// Вывод немногострочных данных.
			Для Каждого ЭлСтруктуры Из ТекВетка.Данные Цикл
				Обл = ТабличныйДокумент.Области.Найти(ЭлСтруктуры.Ключ);
				Если Обл <> Неопределено Тогда
					Обл.Значение = ЭлСтруктуры.Значение;
				КонецЕсли;
			КонецЦикла;
			
			// Добавление в многострочную часть необходимого количества
			// дополнительных строк, вывод многострочных данных.
			ВывестиМногострочныеДанныеВТабличныйДокумент(ТекВетка);
			
		КонецЕсли;
		
		ДеревоДанныхРаздела = Неопределено;
		
		СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела = НовыеНомераСтрокМногоуровнегоРаздела;
		
	Иначе
		// Обычные разделы.
		ТабличныйДокумент.Вывести(ОбъектОтчета().МакетРаздела(ИмяФормы, ИмяТекРаздела));
		
		Для Каждого ЭлСтруктуры Из ЭтаФорма["СтруктураДанных" + ИмяТекРаздела] Цикл
			Обл = ТабличныйДокумент.Области.Найти(ЭлСтруктуры.Ключ);
			Если Обл <> Неопределено Тогда
				Обл.Значение = ЭлСтруктуры.Значение;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	УстановитьДоступностьОбластей(ЭтаФорма, ИмяТекРаздела);
	
КонецПроцедуры

&НаСервере
Процедура ВывестиМногострочныеДанныеВТабличныйДокумент(Ветка, Координаты = "")
	
	ДанныеМнЧ = Ветка.ДанныеМногострочныхЧастей;
	ОтчетОбъект = ОбъектОтчета();
	
	Для каждого ЭлемСтруктуры Из ДанныеМнЧ Цикл
		
		ДеревоМнЧ = ЭлемСтруктуры.Значение;
		
		Для Инд_Число = 0 По ДеревоМнЧ.Строки.Количество() - 1 Цикл
			
			// Добавление необходимого количества доп. строк.
			Если Инд_Число > 0 Тогда
				Инд = ОтчетОбъект.СтрокаСИндексомПоказателя(Инд_Число);
				ИмяОбластиПреемника = "ДобавлениеСтроки" + ЭлемСтруктуры.Ключ + Координаты + Инд;
				ВставитьДопСтроку(ЭлемСтруктуры.Ключ, ИмяОбластиПреемника);
			КонецЕсли;
			
			// Обработка гиперссылок удаления строки, если эта строка единственная.
			Если ДеревоМнЧ.Строки.Количество() = 1 Тогда
				Инд = ОтчетОбъект.СтрокаСИндексомПоказателя(1);
				ИмяИскомойОбласти = "УдалитьСтроку" + ЭлемСтруктуры.Ключ + Координаты + Инд;
				Обл = ТабличныйДокумент.Области.Найти(ИмяИскомойОбласти);
				Если Обл <> Неопределено Тогда
					Обл.Гиперссылка = Ложь;
					Обл.Текст = "";
				КонецЕсли;
			КонецЕсли;
			
			// Вывод многострочных данных.
			Данные = ДеревоМнЧ.Строки[Инд_Число].Данные;
			Инд = ОтчетОбъект.СтрокаСИндексомПоказателя(Инд_Число + 1);
			Для Каждого ЭлСтруктуры Из Данные Цикл
				ИмяИскомойОбласти = ЭлСтруктуры.Ключ + Координаты + Инд;
				Обл = ТабличныйДокумент.Области.Найти(ИмяИскомойОбласти);
				Если Обл <> Неопределено Тогда
					Обл.Значение = ЭлСтруктуры.Значение;
				КонецЕсли;
			КонецЦикла;
			
			// Добавление необходимого количества подчиненных доп. строк.
			ПодчВетка = ДеревоМнЧ.Строки[Инд_Число];
			ПодчКоординаты = Координаты + Инд;
			ВывестиМногострочныеДанныеВТабличныйДокумент(ПодчВетка, ПодчКоординаты);
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ДобавлениеУдалениеСтраницМногоуровневыхРазделов

&НаКлиенте
Процедура ДобавитьСтраницу(Команда)
	
	ИмяРаздела = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
	
	Если ИмяРаздела = "ОборотноСальдоваяВедомость" Тогда
		ДобавитьСтраницуУровня0(ИмяРаздела);
		
		Обл = ТабличныйДокумент.Области["УдалитьСтраницуЗначок"];
		Обл.Гиперссылка = Истина;
		Обл.Текст = "х";
		
		Обл = ТабличныйДокумент.Области["УдалитьСтраницу"];
		Обл.Гиперссылка = Истина;
		Обл.Текст = "Удалить страницу";
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьСтраницуУровня0(ИмяРаздела)
	
	ОтчетОбъект = ОбъектОтчета();
	
	ДеревоРаздела = ПолучитьИзВременногоХранилища(
		СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяРаздела]);
	
	// Нахождение строки в дереве значений, соответствующей текущей странице.
	ТекВетка = ДеревоРаздела.Строки[
		СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[0] - 1];
	// Помещение данных текущей страницы в структуры найденной строки.
	ДанныеТаблДокумента = ОтчетОбъект.ДанныеТабличногоДокумента(ТабличныйДокумент, ИмяРаздела, ЭтотОбъект);
	ТекВетка.Данные = ДанныеТаблДокумента.Данные;
	ТекВетка.ДанныеМногострочныхЧастей = ДанныеТаблДокумента.ДанныеМногострочныхЧастей;
	ЗаполнитьЗначенияСвойств(ТекВетка.Параметры, НеотображаемыеПоказатели);
	
	// Добавление новой страницы.
	// (Добавляется строка в конец коллекции строк дерева значений.)
	НовВетка = ДеревоРаздела.Строки.Добавить();
	// Добавление разделов, подчиненных новой странице.
	ОтчетОбъект.СформироватьДанныеПодчиненныхРазделов(ТабличныйДокумент, ИмяРаздела, НовВетка, ЭтотОбъект);
	
	НомерНовВетки = ДеревоРаздела.Строки.Количество();
	
	// Вывод и помещение начальных данных новой страницы
	// в структуры вновь добавленной строки дерева значений.
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(Отчеты[Сред(
		Лев(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, ".Форма.") - 1), 7)].ПолучитьМакет(Сред(
		ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + ИмяРаздела));
	ДанныеТаблДокумента = ОтчетОбъект.ДанныеТабличногоДокумента(ТабличныйДокумент, ИмяРаздела, ЭтотОбъект);
	
	НовВетка.Данные = ДанныеТаблДокумента.Данные;
	НовВетка.ДанныеМногострочныхЧастей = ДанныеТаблДокумента.ДанныеМногострочныхЧастей;
	НовВетка.Параметры = ОтчетОбъект.ПараметрыСтраницыРазделаНовогоОтчета(ИмяРаздела);
	
	НеотображаемыеПоказатели = НовВетка.Параметры;
	
	// Сохранение изменений в дереве значений.
	СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяРаздела]
		= ПоместитьВоВременноеХранилище(ДеревоРаздела, УникальныйИдентификатор);
	
	ДеревоРаздела = Неопределено;
	
	СформироватьДеревоРазделовОтчетаНаСервере();
	
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[0] = НомерНовВетки;
	
	Для каждого ИскомыйРаздел Из РазделыОтчета.ПолучитьЭлементы() Цикл
		Если ИскомыйРаздел.КолонкаРазделыОтчетаСокрНаим = ИмяРаздела Тогда
			Для каждого НайденнаяСтраница Из ИскомыйРаздел.ПолучитьЭлементы() Цикл
				Если НайденнаяСтраница.КолонкаНомерСтраницыРазделаОтчета
					= СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[0] Тогда
					Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяСтраница.ПолучитьИдентификатор();
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтраницу(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("УдалитьСтраницуЗавершение", ЭтотОбъект);
	ТекстВопроса = НСтр("ru='Удалить текущую страницу?'");
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 60, КодВозвратаДиалога.Да);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтраницуЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	ИмяРаздела = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
	
	Если ИмяРаздела = "ОборотноСальдоваяВедомость" Тогда
		УдалитьСтраницуУровня0(ИмяРаздела);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьСтраницуУровня0(ИмяРаздела)
	
	ДеревоДанных = ПолучитьИзВременногоХранилища(
		СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяРаздела]);
	
	НомПоследнейСтраницы = ДеревоДанных.Строки.Количество();
	
	// Номер строки дерева значений, соответствующий номеру удаляемой страницы.
	НомУдаляемойСтраницы = СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[0];
	
	// Номер строки дерева значений, соответствующий номеру выводимой после удаления страницы.
	НомСтраницыПослеУдаления = ?(НомУдаляемойСтраницы = НомПоследнейСтраницы,
		НомУдаляемойСтраницы - 1, НомУдаляемойСтраницы);
	
	// Удаление страницы.
	ДеревоДанных.Строки.Удалить(НомУдаляемойСтраницы - 1);
	
	// Сохранение изменений в дереве значений.
	СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяРаздела]
		= ПоместитьВоВременноеХранилище(ДеревоДанных, УникальныйИдентификатор);
	
	ДеревоДанных = Неопределено;
	
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[0] = НомСтраницыПослеУдаления;
	
	// Вывод данных строки дерева значений после удаления страницы.
	ПоказатьРаздел(ИмяРаздела, СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела);
	
	СформироватьДеревоРазделовОтчетаНаСервере();
	
	Для Каждого ИскомыйРаздел Из РазделыОтчета.ПолучитьЭлементы() Цикл
		Если ИскомыйРаздел.КолонкаРазделыОтчетаСокрНаим = ИмяРаздела Тогда
			Для каждого НайденнаяСтраница Из ИскомыйРаздел.ПолучитьЭлементы() Цикл
				Если НайденнаяСтраница.КолонкаНомерСтраницыРазделаОтчета = НомСтраницыПослеУдаления Тогда
					Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяСтраница.ПолучитьИдентификатор();
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Модифицированность = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область ДобавлениеУдалениеДополнительныхСтрокМногострочныхЧастейМногоуровневыхРазделов

&НаКлиенте
Процедура ДобавитьСтроку(Команда)
	
	НаимТекРазделаОтчета = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
	
	ВставитьДополнительнуюСтроку();
	ИмяРаздела = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
	УстановитьДоступностьОбластей(ЭтаФорма, ИмяРаздела);
	
КонецПроцедуры

&НаСервере
Процедура ВставитьДополнительнуюСтроку()
	
	ОтчетОбъект = ОбъектОтчета();
	ИмяТекОбласти = Элементы.ТабличныйДокумент.ТекущаяОбласть.Имя;
	
	Если СтрНайти(ИмяТекОбласти, "ДобавитьСтроку") Тогда
		ИмяОбластиПреемника = СтрЗаменить(ИмяТекОбласти, "ДобавитьСтроку", "");
		ИмяОбластиПреемника = СтрЗаменить(ИмяОбластиПреемника, "Значок", "");
		ИмяГруппы = Лев(ИмяОбластиПреемника, СтруктураРеквизитовФормы.ДлинаИмениГруппы);
		ИмяОбластиПреемника = "ДобавлениеСтроки" + ИмяОбластиПреемника;
	Иначе
		ИмяГруппы = Лев(ИмяТекОбласти, СтруктураРеквизитовФормы.ДлинаИмениГруппы);
		ИмяГрафы = Лев(ИмяТекОбласти, СтруктураРеквизитовФормы.ДлинаИмениГрафы);
		МаксИнд = ИндексПоказателя(ИмяТекОбласти);
		Координаты = СтрокаСКоординатамиПоказателя(ИмяТекОбласти);
		Пока ТабличныйДокумент.Области.Найти(ИмяГрафы + Координаты + ОтчетОбъект.СтрокаСИндексомПоказателя(МаксИнд + 1)) <> Неопределено Цикл
			МаксИнд = МаксИнд + 1;
		КонецЦикла;
		ИмяОбластиПреемника = "ДобавлениеСтроки" + ИмяГруппы + Координаты + ОтчетОбъект.СтрокаСИндексомПоказателя(МаксИнд);
	КонецЕсли;
	
	Если СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей.Свойство(ИмяГруппы) Тогда
		ВставитьДопСтроку(ИмяГруппы, ИмяОбластиПреемника);
		СохранитьДанныеРаздела(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВставитьДопСтроку(Знач ИмяГруппы, Знач ИмяОбластиПреемника, ЭтоАвтоВставкаПодчиненнойМнЧ = Ложь)
	
	ОтчетОбъект = ОбъектОтчета();
	НачИндекс = "_1";
	
	Если СтрНайти(ИмяОбластиПреемника, "ДобавлениеСтроки" + ИмяГруппы) > 0 Тогда
		
		ИскомаяОбласть = ТабличныйДокумент.Области.Найти("МногострочнаяЧасть" + ИмяГруппы);
		
		ВремТаблДок = ТабличныйДокумент.ПолучитьОбласть(ИскомаяОбласть.Имя);
		ВставляемаяОбласть = ВремТаблДок.Область(ИскомаяОбласть.Имя);
		ВставляемаяОбласть.Имя = "";
		
		НовКоординаты = СтрокаСКоординатамиПоказателя(ИмяОбластиПреемника);
		
		КолУровнейПодчиненности = СтрЧислоВхождений(НовКоординаты, "_");
		НачКоординаты = "";
		Для НомУр = 1 По КолУровнейПодчиненности Цикл
			НачКоординаты = НачКоординаты + НачИндекс;
		КонецЦикла;
		
		ПреИндекс_Число = ИндексПоказателя(ИмяОбластиПреемника);
		НовИндекс_Число = ?(ЭтоАвтоВставкаПодчиненнойМнЧ, 1, ПреИндекс_Число + 1);
		
		ПреИндекс = ОтчетОбъект.СтрокаСИндексомПоказателя(ПреИндекс_Число);
		НовИндекс = ОтчетОбъект.СтрокаСИндексомПоказателя(НовИндекс_Число);
		
		НачПостфикс = ИмяГруппы + НачКоординаты + НачИндекс;
		ПреПостфикс = ИмяГруппы + НовКоординаты + ПреИндекс;
		НовПостфикс = ИмяГруппы + НовКоординаты + НовИндекс;
		
		МассивИменГраф = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппы]["ИменаГраф"];
		
		Для каждого ИмяГрафы Из МассивИменГраф Цикл
			
			НачИмяОбл = ИмяГрафы + НачКоординаты + НачИндекс;
			НовИмяОбл = ИмяГрафы + НовКоординаты + НовИндекс;
			
			ОбластьЯчейки = ВремТаблДок.Области[НачИмяОбл];
			ОбластьЯчейки.Имя = НовИмяОбл;
			
			Если ОбластьЯчейки.СодержитЗначение = Истина Тогда
				ОбластьЯчейки.Очистить();
			КонецЕсли;
			
		КонецЦикла;
		
		Обл = ВремТаблДок.Области.Найти("УдалитьСтроку" + НачПостфикс);
		Если Обл <> Неопределено Тогда
			Обл.Имя = "УдалитьСтроку" + НовПостфикс;
		КонецЕсли;
		
		Если ЭтоАвтоВставкаПодчиненнойМнЧ Тогда
			Обл = ВремТаблДок.Области.Найти("УдалитьСтроку" + НовПостфикс);
			Если Обл <> Неопределено Тогда
				Обл.Гиперссылка = Ложь;
				Обл.Текст = "";
			КонецЕсли;
		Иначе
			Обл = ВремТаблДок.Области.Найти("УдалитьСтроку" + НовПостфикс);
			Если Обл <> Неопределено Тогда
				Обл.Гиперссылка = Истина;
				Обл.Текст = "х";
				Если НовИндекс_Число = 2 Тогда
					Если Обл <> Неопределено Тогда
						Обл = ТабличныйДокумент.Области.Найти("УдалитьСтроку" + ПреПостфикс);
						Обл.Гиперссылка = Истина;
						Обл.Текст = "х";
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Обл = ТабличныйДокумент.Области.Найти("ДобавитьСтроку" + ПреПостфикс);
		Если Обл <> Неопределено Тогда
			Обл.Имя = "ДобавитьСтроку" + НовПостфикс;
		КонецЕсли;
		Обл = ТабличныйДокумент.Области.Найти("ДобавитьСтрокуЗначок" + ПреПостфикс);
		Если Обл <> Неопределено Тогда
			Обл.Имя = "ДобавитьСтрокуЗначок" + НовПостфикс;
		КонецЕсли;
		
		ОблПреемник = ТабличныйДокумент.Области.Найти(ИмяОбластиПреемника);
		ОблПреемник.Имя = "ДобавлениеСтроки" + НовПостфикс;
		
		// Изменения в оформлении ячеек: установка значения "НетЛинии"/"Сплошная" для
		// свойства "ГраницаСнизу" (в случае задания номеров специальных колонок):
		НомераСпецКолонок = Неопределено;
		СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппы].Свойство(
			"КолонкиСИзмНижнГраницей", НомераСпецКолонок);
		Если НомераСпецКолонок <> Неопределено Тогда
			Для каждого НомКолонки Из НомераСпецКолонок Цикл
				// Удаление линии в определенных колонках последней (до добавления) строки.
				Если НЕ ЭтоАвтоВставкаПодчиненнойМнЧ Тогда
					Обл = ТабличныйДокумент.Область(
						ОблПреемник.Верх - 1, НомКолонки, ОблПреемник.Верх - 1, НомКолонки);
					Если Обл <> Неопределено Тогда
						Обл.ГраницаСнизу = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.НетЛинии);
					КонецЕсли;
				КонецЕсли;
				// Установка линии в определенных колонках добавляемой строки.
				Обл = ВремТаблДок.Область(
					ВставляемаяОбласть.Низ, НомКолонки, ВставляемаяОбласть.Низ, НомКолонки);
				Если Обл <> Неопределено Тогда
					Обл.ГраницаСнизу = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		ОблПреемник_ = ТабличныйДокумент.Область(
			ОблПреемник.Верх, , ОблПреемник.Верх + ИскомаяОбласть.Низ - ИскомаяОбласть.Верх, );
		ТабличныйДокумент.ВставитьОбласть(
			ВставляемаяОбласть, ОблПреемник_, ТипСмещенияТабличногоДокумента.ПоВертикали);
		
		Если НЕ ЭтоАвтоВставкаПодчиненнойМнЧ Тогда
			// Установка текущей области после добавления строки.
			НовИмяТекОбл = МассивИменГраф[0] + НовКоординаты + НовИндекс;
			НовТекОбл = ТабличныйДокумент.Области[НовИмяТекОбл];
			Элементы.ТабличныйДокумент.ТекущаяОбласть = НовТекОбл;
		КонецЕсли;
		
	КонецЕсли;
	
	ИменаПодчиненныхГрупп = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[
		ИмяГруппы]["ИменаПодчиненныхГрупп"];
	Для каждого ИмяПодчГруппы Из ИменаПодчиненныхГрупп Цикл
		НовКоординатыДляПодчОбласти = НовКоординаты + НовИндекс;
		
		КолУровнейПодчиненности = СтрЧислоВхождений(НовКоординатыДляПодчОбласти, "_");
		НачКоординатыДляПодчОбласти = "";
		Для НомУр = 1 По КолУровнейПодчиненности Цикл
			НачКоординатыДляПодчОбласти = НачКоординатыДляПодчОбласти + НачИндекс;
		КонецЦикла;
		
		НачИндВставляемойОбласти = НачИндекс;
		
		ИскомаяОбласть = ТабличныйДокумент.Области.Найти(
			"ДобавлениеСтроки" + ИмяПодчГруппы + НачКоординатыДляПодчОбласти + НачИндВставляемойОбласти);
		
		Если ИскомаяОбласть = Неопределено Тогда
			НачИндВставляемойОбласти = 1;
			Пока ТабличныйДокумент.Области.Найти("ДобавлениеСтроки" + ИмяПодчГруппы
				+ НачКоординатыДляПодчОбласти + "_" + Формат(НачИндВставляемойОбласти, "ЧГ=")) = Неопределено Цикл
				НачИндВставляемойОбласти = НачИндВставляемойОбласти + 1;
			КонецЦикла;
			НачИндВставляемойОбласти = "_" + Формат(НачИндВставляемойОбласти, "ЧГ=");
			ИскомаяОбласть = ТабличныйДокумент.Области.Найти(
				"ДобавлениеСтроки" + ИмяПодчГруппы + НачКоординатыДляПодчОбласти + НачИндВставляемойОбласти);
		КонецЕсли;
		
		ВремТабличныйДокумент = ТабличныйДокумент.ПолучитьОбласть(ИскомаяОбласть.Имя);
		ВставляемаяОбласть = ВремТабличныйДокумент.Область(ИскомаяОбласть.Имя);
		Для каждого ОбластьЯчейки Из ВремТабличныйДокумент.Области Цикл
			ОбластьЯчейки.Имя = СтрЗаменить(ОбластьЯчейки.Имя,
				ИмяПодчГруппы + НачКоординатыДляПодчОбласти + НачИндВставляемойОбласти,
				ИмяПодчГруппы + НовКоординатыДляПодчОбласти + НачИндекс);
		КонецЦикла;
		ИмяОбластиПреемникаДляПодчОбласти = СтрЗаменить(ИмяОбластиПреемника, ПреПостфикс, НовПостфикс);
		ОбластьПреемник = ТабличныйДокумент.Области.Найти(ИмяОбластиПреемникаДляПодчОбласти);
		
		ТабличныйДокумент.ВставитьОбласть(ВставляемаяОбласть, ОбластьПреемник, ТипСмещенияТабличногоДокумента.ПоВертикали);
		
		ИмяОбластиПреемникаДляПодчОбласти = "ДобавлениеСтроки" + ИмяПодчГруппы + НовКоординатыДляПодчОбласти + НачИндекс;
		
		ВставитьДопСтроку(ИмяПодчГруппы, ИмяОбластиПреемникаДляПодчОбласти, Истина);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтроку(Команда)
	
	ИмяТекОбласти = Элементы.ТабличныйДокумент.ТекущаяОбласть.Имя;
	ИмяТекОбласти = СтрЗаменить(ИмяТекОбласти, "УдалитьСтроку", "");
	
	ИмяГруппы = Лев(ИмяТекОбласти, СтруктураРеквизитовФормы.ДлинаИмениГруппы);
	
	Если НЕ СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей.Свойство(ИмяГруппы) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Не выбрана удаляемая строка многострочного раздела.'");
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("УдалитьСтрокуЗавершение", ЭтотОбъект);
	
	ДопТекст = ДополнительныйТекстПриДобавленииУдаленииСтрок(ИмяГруппы);
	Если ДопТекст <> Неопределено Тогда
		ТекстВопроса = ДопТекст.ТекстВопросаПередУдалениемСтроки;
	Иначе
		ТекстВопроса = НСтр("ru='Удалить выбранную строку?'");
	КонецЕсли;
	
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	
КонецПроцедуры

&НаКлиенте
Функция ДополнительныйТекстПриДобавленииУдаленииСтрок(Знач ИмяГруппы)
	
	Если НЕ ЗначениеЗаполнено(ИмяГруппы) Тогда
		Возврат Неопределено;
	ИначеЕсли НЕ СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей.Свойство(ИмяГруппы) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Подстрока = "строку";
	ТекстВопроса = НСтр("ru='Удалить выбранную строку?'");
	
	ДопТекст = Новый Структура;
	ДопТекст.Вставить("ЗаголовокКонтекстногоМенюДобавитьСтроку", "Добавить " + Подстрока);
	ДопТекст.Вставить("ЗаголовокКонтекстногоМенюУдалитьСтроку", "Удалить " + Подстрока);
	ДопТекст.Вставить("ТекстВопросаПередУдалениемСтроки", ТекстВопроса);
	
	Возврат ДопТекст;
	
КонецФункции

&НаКлиенте
Процедура УдалитьСтрокуЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	УдалитьДопСтрокуНаСервере();
	
	ИмяРаздела = СтруктураРеквизитовФормы.НаимТекущегоРаздела;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьДопСтрокуНаСервере()
	
	ИмяТекОбласти = Элементы.ТабличныйДокумент.ТекущаяОбласть.Имя;
	
	УдалитьДопСтроку(ИмяТекОбласти);
	
	СохранитьДанныеРаздела(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
КонецПроцедуры

&НаСервере
Процедура УдалитьДопСтроку(ИмяОбласти)
	
	ОтчетОбъект = ОбъектОтчета();
	
	ИмяГруппы = СтрЗаменить(ИмяОбласти, "УдалитьСтроку", "");
	ИмяГруппы = Лев(ИмяГруппы, СтруктураРеквизитовФормы.ДлинаИмениГруппы);
	
	ТекКоординаты = СтрокаСКоординатамиПоказателя(ИмяОбласти);
	
	ТекИндекс_Число = ИндексПоказателя(ИмяОбласти);
	ТекИндекс = ОтчетОбъект.СтрокаСИндексомПоказателя(ТекИндекс_Число);
	ТекПостфикс = ИмяГруппы + ТекКоординаты + ТекИндекс;
	
	МассивИменГраф = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппы]["ИменаГраф"];
	ИмяПервойГрафы = МассивИменГраф[0];
	
	ОблПервУдаляемогоПоказателя = ТабличныйДокумент.Область(ИмяПервойГрафы + ТекКоординаты + ТекИндекс);
	ОблУдалитьСтроку = ТабличныйДокумент.Область("УдалитьСтроку" + ИмяГруппы + ТекКоординаты + ТекИндекс);
	СмещениеОтВерхаМнЧ = ОблПервУдаляемогоПоказателя.Верх - ОблУдалитьСтроку.Верх;
	
	ОблДобавлениеСтроки = ТабличныйДокумент.Области.Найти("ДобавлениеСтроки" + ТекПостфикс);
	
	// Удаляется последняя строка.
	Если ОблДобавлениеСтроки <> Неопределено Тогда
		
		ПреИндекс_Число = ТекИндекс_Число - 1;
		ПреИндекс = ОтчетОбъект.СтрокаСИндексомПоказателя(ПреИндекс_Число);
		ПреПостфикс = ИмяГруппы + ТекКоординаты + ПреИндекс;
		
		ВерхУдОбласти = ОблПервУдаляемогоПоказателя.Верх - СмещениеОтВерхаМнЧ;
		НизУдОбласти  = ОблДобавлениеСтроки.Верх - 1;
		
		УдаляемаяОбласть = ТабличныйДокумент.Область(ВерхУдОбласти, , НизУдОбласти, );
		ТабличныйДокумент.УдалитьОбласть(УдаляемаяОбласть, ТипСмещенияТабличногоДокумента.ПоВертикали);
		
		Обл = ТабличныйДокумент.Области.Найти("ДобавлениеСтроки" + ТекПостфикс);
		Обл.Имя = "ДобавлениеСтроки" + ПреПостфикс;
		Обл = ТабличныйДокумент.Области.Найти("ДобавитьСтроку" + ТекПостфикс);
		Обл.Имя = "ДобавитьСтроку" + ПреПостфикс;
		Обл = ТабличныйДокумент.Области.Найти("ДобавитьСтрокуЗначок" + ТекПостфикс);
		Обл.Имя = "ДобавитьСтрокуЗначок" + ПреПостфикс;
		
		Если ПреИндекс_Число = 1 Тогда
			Обл = ТабличныйДокумент.Область("УдалитьСтроку" + ПреПостфикс);
			Обл.Гиперссылка = Ложь;
			Обл.Текст = "";
		КонецЕсли;
		
		// Изменения в оформлении ячеек в случае задания номеров специальных колонок.
		НомераСпецКолонок = Неопределено;
		СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппы].Свойство(
			"КолонкиСИзмНижнГраницей", НомераСпецКолонок);
		Если НомераСпецКолонок <> Неопределено Тогда
			Для каждого НомКолонки Из НомераСпецКолонок Цикл
				// Установка линии в определенных колонках последней (после удаления) строки.
				Обл = ТабличныйДокумент.Область(
					ВерхУдОбласти - 1, НомКолонки, ВерхУдОбласти - 1, НомКолонки);
				Если Обл <> Неопределено Тогда
					Обл.ГраницаСнизу = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		НовИмяТекОбл = ИмяПервойГрафы + ТекКоординаты + ПреИндекс;
		Элементы.ТабличныйДокумент.ТекущаяОбласть = ТабличныйДокумент.Области[НовИмяТекОбл];
		
	// Удаляемая строка не последняя.
	Иначе
		
		НовИндекс_Число = ТекИндекс_Число + 1;
		НовИндекс = ОтчетОбъект.СтрокаСИндексомПоказателя(НовИндекс_Число);
		
		ОблСледующегоПоказателя = ТабличныйДокумент.Область(ИмяПервойГрафы + ТекКоординаты + НовИндекс);
		
		ВерхУдОбласти = ОблПервУдаляемогоПоказателя.Верх - СмещениеОтВерхаМнЧ;
		НизУдОбласти  = ОблСледующегоПоказателя.Верх - СмещениеОтВерхаМнЧ - 1;
		
		УдаляемаяОбласть = ТабличныйДокумент.Область(ВерхУдОбласти, , НизУдОбласти, );
		
		// Сохранение свойств "эталонных" областей для последующего восстановления.
		СпОбластейДляВосстановленияПослеУдаления = Новый СписокЗначений;
		ВремТаблДок = ТабличныйДокумент.ПолучитьОбласть(УдаляемаяОбласть.Имя);
		Для каждого ЭлемСтруктуры Из СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей Цикл
			ИмяИскомойобласти = "МногострочнаяЧасть" + ЭлемСтруктуры.Ключ;
			Искомаяобласть = ВремТаблДок.Области.Найти(ИмяИскомойобласти);
			Если Искомаяобласть <> Неопределено Тогда
				ВысотаОбл = Искомаяобласть.Низ - Искомаяобласть.Верх + 1;
				СпОбластейДляВосстановленияПослеУдаления.Добавить(ВысотаОбл, ЭлемСтруктуры.Ключ);
			КонецЕсли;
		КонецЦикла;
		
		ТабличныйДокумент.УдалитьОбласть(УдаляемаяОбласть, ТипСмещенияТабличногоДокумента.ПоВертикали);
		
		НовИндекс_Число = ТекИндекс_Число;
		
		// Реиндексация имен областей текущей многострочной части после удаления строки.
		Пока ТабличныйДокумент.Области.Найти(ИмяПервойГрафы + ТекКоординаты
			+ ОтчетОбъект.СтрокаСИндексомПоказателя(НовИндекс_Число + 1)) <> Неопределено Цикл
			
			ПреИндекс = ОтчетОбъект.СтрокаСИндексомПоказателя(НовИндекс_Число + 1);
			НовИндекс = ОтчетОбъект.СтрокаСИндексомПоказателя(НовИндекс_Число);
			
			Для каждого ИмяГрафы Из МассивИменГраф Цикл
				ПреИмяОбл = ИмяГрафы + ТекКоординаты + ПреИндекс;
				НовИмяОбл = ИмяГрафы + ТекКоординаты + НовИндекс;
				
				ОбластьЯчейки = ТабличныйДокумент.Области[ПреИмяОбл];
				ОбластьЯчейки.Имя = НовИмяОбл;
			КонецЦикла;
			
			ПреПостфикс = ИмяГруппы + ТекКоординаты + ПреИндекс;
			НовПостфикс = ИмяГруппы + ТекКоординаты + НовИндекс;
			
			Обл = ТабличныйДокумент.Области.Найти("УдалитьСтроку" + ПреПостфикс);
			Обл.Имя = "УдалитьСтроку" + НовПостфикс;
			
			// Обновление координат в именах областей подчиненных многострочных частей.
			ИменаПодчиненныхГрупп = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[
				ИмяГруппы]["ИменаПодчиненныхГрупп"];
			Для каждого ИмяПодчГруппы Из ИменаПодчиненныхГрупп Цикл
				ПарамРеинд = Новый Структура("ИмяГруппы,ПреКоординаты,НовКоординаты",
					ИмяПодчГруппы, ТекКоординаты + ПреИндекс, ТекКоординаты + НовИндекс);
				РеиндексироватьПодчиненныеДопСтроки(ПарамРеинд);
			КонецЦикла;
			
			НовИндекс_Число = НовИндекс_Число + 1;
			
		КонецЦикла;
		
		ПреИндекс = ОтчетОбъект.СтрокаСИндексомПоказателя(НовИндекс_Число);
		НовИндекс = ОтчетОбъект.СтрокаСИндексомПоказателя(НовИндекс_Число - 1);
		
		ПреПостфикс = ИмяГруппы + ТекКоординаты + ПреИндекс;
		НовПостфикс = ИмяГруппы + ТекКоординаты + НовИндекс;
		
		Обл = ТабличныйДокумент.Области.Найти("ДобавлениеСтроки" + ПреПостфикс);
		Обл.Имя = "ДобавлениеСтроки" + НовПостфикс;
		Обл = ТабличныйДокумент.Области.Найти("ДобавитьСтроку" + ПреПостфикс);
		Обл.Имя = "ДобавитьСтроку" + НовПостфикс;
		Обл = ТабличныйДокумент.Области.Найти("ДобавитьСтрокуЗначок" + ПреПостфикс);
		Обл.Имя = "ДобавитьСтрокуЗначок" + НовПостфикс;
		
		// Восстановление удаленных "эталонных" областей по предварительно сохраненным свойствам.
		НачИндекс = "_1";
		Для каждого ЭлемСписка Из СпОбластейДляВосстановленияПослеУдаления Цикл
			НачКоординаты = "";
			УровеньПодчиненияГруппы = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[
				ЭлемСписка.Представление]["УровеньПодчинения"];
			
			Для НомУр = 1 По УровеньПодчиненияГруппы Цикл
				НачКоординаты = НачКоординаты + НачИндекс;
			КонецЦикла;
			
			ИмяГрафыДляПозиционирования = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[
				ЭлемСписка.Представление]["ИменаГраф"][0];
			
			ИмяОбластиДляПозиционирования = ИмяГрафыДляПозиционирования + НачКоординаты + НачИндекс;
			ОбластьДляПозиционирования = ТабличныйДокумент.Область(ИмяОбластиДляПозиционирования);
			
			Если ЭлемСписка.Представление = ИмяГруппы Тогда
				ВосстОбластьВерх = ОбластьДляПозиционирования.Верх - СмещениеОтВерхаМнЧ;
			Иначе
				ВосстОбластьВерх = ОбластьДляПозиционирования.Верх;
			КонецЕсли;
			ВосстОбластьНиз  = ВосстОбластьВерх + ЭлемСписка.Значение - 1;
			
			ВосстОбласть = ТабличныйДокумент.Область(ВосстОбластьВерх, , ВосстОбластьНиз, );
			ВосстОбласть.Имя = "МногострочнаяЧасть" + ЭлемСписка.Представление;
		КонецЦикла;
		
		Если НовИндекс = НачИндекс Тогда // после удаления осталась единственная строка
			Обл = ТабличныйДокумент.Область("УдалитьСтроку" + НовПостфикс);
			Обл.Гиперссылка = Ложь;
			Обл.Текст = "";
		КонецЕсли;
		
		НовИмяТекОбл = ИмяПервойГрафы + ТекКоординаты + ТекИндекс;
		Элементы.ТабличныйДокумент.ТекущаяОбласть = ТабличныйДокумент.Области[НовИмяТекОбл];
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура РеиндексироватьПодчиненныеДопСтроки(ПараметрыРеиндексации)
	
	ОтчетОбъект = ОбъектОтчета();
	ИмяГруппы = ПараметрыРеиндексации["ИмяГруппы"];
	ПреКоординаты = ПараметрыРеиндексации["ПреКоординаты"];
	НовКоординаты = ПараметрыРеиндексации["НовКоординаты"];
	
	МассивИменГраф = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппы]["ИменаГраф"];
	ИмяПервойГрафы = МассивИменГраф[0];
	
	Инд_Число = 1;
	Пока ТабличныйДокумент.Области.Найти(ИмяПервойГрафы
		+ ПреКоординаты + ОтчетОбъект.СтрокаСИндексомПоказателя(Инд_Число)) <> Неопределено Цикл
		
		Инд = ОтчетОбъект.СтрокаСИндексомПоказателя(Инд_Число);
		
		Для каждого ИмяГрафы Из МассивИменГраф Цикл
			ПреИмяОбл = ИмяГрафы + ПреКоординаты + Инд;
			НовИмяОбл = ИмяГрафы + НовКоординаты + Инд;
			
			ОбластьЯчейки = ТабличныйДокумент.Области[ПреИмяОбл];
			ОбластьЯчейки.Имя = НовИмяОбл;
		КонецЦикла;
		
		ПреПостфикс = ИмяГруппы + ПреКоординаты + Инд;
		НовПостфикс = ИмяГруппы + НовКоординаты + Инд;
		
		Обл = ТабличныйДокумент.Области.Найти("УдалитьСтроку" + ПреПостфикс);
		Обл.Имя = "УдалитьСтроку" + НовПостфикс;
		
		ИменаПодчиненныхГрупп = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппы]["ИменаПодчиненныхГрупп"];
		Для каждого ИмяПодчГруппы Из ИменаПодчиненныхГрупп Цикл
			ПарамРеинд = Новый Структура("ИмяГруппы,ПреКоординаты,НовКоординаты",
				ИмяПодчГруппы, ПреКоординаты + Инд, НовКоординаты + Инд);
			РеиндексироватьПодчиненныеДопСтроки(ПарамРеинд);
		КонецЦикла;
		
		Инд_Число = Инд_Число + 1;
		
	КонецЦикла;
	
	Инд = ОтчетОбъект.СтрокаСИндексомПоказателя(Инд_Число - 1);
	
	ПреПостфикс = ИмяГруппы + ПреКоординаты + Инд;
	НовПостфикс = ИмяГруппы + НовКоординаты + Инд;
	
	Обл = ТабличныйДокумент.Области.Найти("ДобавлениеСтроки" + ПреПостфикс);
	Обл.Имя = "ДобавлениеСтроки" + НовПостфикс;
	Обл = ТабличныйДокумент.Области.Найти("ДобавитьСтроку" + ПреПостфикс);
	Обл.Имя = "ДобавитьСтроку" + НовПостфикс;
	Обл = ТабличныйДокумент.Области.Найти("ДобавитьСтрокуЗначок" + ПреПостфикс);
	Обл.Имя = "ДобавитьСтрокуЗначок" + НовПостфикс;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ИндексПоказателя(Знач ИмяОбласти)
	
	МассивСтрок = СтрРазделить(ИмяОбласти, "_");
	
	КолСтрок = МассивСтрок.Количество();
	
	Если КолСтрок = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ИндексСтрока = МассивСтрок[КолСтрок - 1];
	Если СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(ИндексСтрока) Тогда
		Возврат Число(ИндексСтрока);
	КонецЕсли;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СтрокаСКоординатамиПоказателя(Знач Координаты)
	
	СтрокаСКоординатами = "";
	
	Если ТипЗнч(Координаты) = Тип("Массив") Тогда
		Для каждого КоординатаЧисло Из Координаты Цикл
			Если ТипЗнч(КоординатаЧисло) <> Тип("Число") Тогда
				Возврат Неопределено;
			КонецЕсли;
			СтрокаСКоординатами = СтрокаСКоординатами + "_" + Формат(КоординатаЧисло, "ЧГ=");
		КонецЦикла;
	ИначеЕсли ТипЗнч(Координаты) = Тип("Строка") Тогда
		МассивСтрок = СтрРазделить(Координаты, "_");
		КолСтрок = МассивСтрок.Количество();
		Если КолСтрок = 0 Тогда
			Возврат Неопределено;
		КонецЕсли;
		МассивСтрок.Удалить(КолСтрок - 1);
		МассивСтрок.Удалить(0);
		Для каждого КоординатаСтрока Из МассивСтрок Цикл
			Если СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(КоординатаСтрока) Тогда
				СтрокаСКоординатами = СтрокаСКоординатами + "_" + Формат(КоординатаСтрока, "ЧГ=");
			Иначе
				Возврат Неопределено;
			КонецЕсли;
		КонецЦикла;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат СтрокаСКоординатами;
	
КонецФункции

#КонецОбласти

&НаСервере
Процедура СохранитьДанныеРаздела(НаимРаздела, ВеткаРаздела = Неопределено)
	
	ОтчетОбъект = ОбъектОтчета();
	Если мСтруктураМногоуровневыхРазделов.Свойство(НаимРаздела) Тогда
		// Многоуровневые разделы.
		Если ВеткаРаздела = Неопределено Тогда
						
			СтруктураРаздела = мСтруктураМногоуровневыхРазделов[НаимРаздела];
			
			ИмяГлРаздела = Неопределено;
			СтруктураРаздела.Свойство("КорневойРаздел", ИмяГлРаздела);
			ИмяГлРаздела = ?(ИмяГлРаздела = Неопределено, НаимРаздела, ИмяГлРаздела);
			
			ДеревоДанныхРаздела = ПолучитьИзВременногоХранилища(
				СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяГлРаздела]);
			
			ТекВетка = ДеревоДанныхРаздела;
			
			Если СтруктураРаздела.Свойство("Многостраничность") И СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[0] = 0 Тогда
				// Данные корневой страницы сохраняем тогда, когда в дереве только 1 строка -
				// в этом случае отчет выводится на корневой странице.
				// В остальных случаях на корневой странице выводится комментарий-пояснение, который не нужно сохранять.
				Если ДеревоДанныхРаздела.Строки.Количество() = 1 Тогда
					ТекВетка = ТекВетка.Строки[0];
				КонецЕсли;	
			ИначеЕсли ТипЗнч(СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела) = Тип("Массив") Тогда
				Для каждого НомерСтроки Из СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела Цикл
					ТекВетка = ТекВетка.Строки[НомерСтроки - 1];
				КонецЦикла;
			КонецЕсли;	
			
		Иначе
			
			ТекВетка = ВеткаРаздела;
			
		КонецЕсли;
		
		Если ТипЗнч(ТекВетка) = Тип("СтрокаДереваЗначений") Тогда
			
			ДанныеТаблДокумента = ОтчетОбъект.ДанныеТабличногоДокумента(ТабличныйДокумент, НаимРаздела, ЭтотОбъект);
			
			ТекВетка.Данные = ДанныеТаблДокумента.Данные;
			ТекВетка.ДанныеМногострочныхЧастей = ДанныеТаблДокумента.ДанныеМногострочныхЧастей;
			
			ЗаполнитьЗначенияСвойств(ТекВетка.Параметры, НеотображаемыеПоказатели);
			
		КонецЕсли;
		
		СтруктураРеквизитовФормы.Вставить("АдресВоВрХранилищеДеревоДанных" + ИмяГлРаздела,
			ПоместитьВоВременноеХранилище(ДеревоДанныхРаздела, УникальныйИдентификатор));
		
		ДеревоДанныхРаздела = Неопределено;
		
	Иначе
		// Обычные разделы.
		ЭтотОбъект["СтруктураДанных" + НаимРаздела] = ОтчетОбъект.ДанныеТабличногоДокумента(ТабличныйДокумент, НаимРаздела, ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция МногострочнаяЧастьТекущейОбласти(Знач ИмяОбласти)
	
	// При внесении изменений в функцию необходимо внести параллельные изменения в одноименную функцию модуля объекта,
	// применяемую при выгрузке.
	
	Если Не ЗначениеЗаполнено(ИмяОбласти) Тогда
		Возврат Неопределено;
	Иначе
		НомПозПодчеркивания = СтруктураРеквизитовФормы.ДлинаИмениГрафы + 1;
		Если Не (СтрДлина(ИмяОбласти) > НомПозПодчеркивания
		   И Сред(ИмяОбласти, НомПозПодчеркивания, 1) = "_") Тогда
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	ИмяОбласти = СтрЗаменить(ИмяОбласти, "ДобавитьСтрокуЗначок", "");
	ИмяОбласти = СтрЗаменить(ИмяОбласти, "ДобавитьСтроку", "");
	ИмяОбласти = СтрЗаменить(ИмяОбласти, "УдалитьСтроку", "");
	
	ИмяГруппы = Лев(ИмяОбласти, СтруктураРеквизитовФормы.ДлинаИмениГруппы);
	
	Для каждого ЭлемСтруктуры Из СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей Цикл
		Если ЭлемСтруктуры.Ключ = ИмяГруппы Тогда
			Возврат ИмяГруппы;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьСведенияОбОрганизации()
	
	СтрокаСведений = "ИННЮЛ, КППЮЛ, НаимЮЛПол, НаимЮЛСокр, ФИОРук, ФИО";
	
	СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(
		СтруктураРеквизитовФормы.Организация, ДатаПодписи, СтрокаСведений);
	
	Если СтруктураРеквизитовФормы.ИП Тогда
		НаименованиеОрганизации = СокрЛП(СведенияОбОрганизации.ФИО);
	Иначе
		НаименованиеОрганизации = СокрЛП(СведенияОбОрганизации.НаимЮлПол);
	КонецЕсли;
	
	ТабличныйДокумент.Области.НаименованиеОрганизации.Значение = НаименованиеОрганизации;
	ТабличныйДокумент.Области.НаименованиеОрганизацииКраткое.Значение = СокрЛП(СведенияОбОрганизации.НаимЮЛСокр);
	ТабличныйДокумент.Области.ИНН.Значение = СокрЛП(СведенияОбОрганизации.ИННЮЛ);
	ТабличныйДокумент.Области.КПП.Значение = СокрЛП(СведенияОбОрганизации.КППЮЛ);
	
	ТабличныйДокумент.Области.Подписант.Значение = СокрЛП(СведенияОбОрганизации.ФИОРук);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНаКлиенте(Автосохранение = Ложь, ВыполняемоеОповещение = Неопределено) Экспорт
	
	Вариант = СтруктураРеквизитовФормы.ВидДокумента * НомерКорректировки;
	
	Если НЕ РегламентированнаяОтчетностьКлиент.ПриЗаписиРегламентированногоОтчетаНаКлиенте(ЭтаФорма, , Автосохранение, Вариант) Тогда
		Возврат;
	КонецЕсли;
	
	ПодобныйОтчетСуществует = Ложь;
	ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки = Ложь;
	
	Если Элементы.РазделыОтчета.ТекущиеДанные = Неопределено Тогда
		НаименованиеТекущегоРаздела = СтруктураРеквизитовФормы.НаимТекущегоРаздела;
	Иначе
		НаименованиеТекущегоРаздела = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
	КонецЕсли;
	
	РезультатСохранения = ПередСохранением( , ПодобныйОтчетСуществует, Вариант, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, Автосохранение, НаименованиеТекущегоРаздела);
	
	Если РезультатСохранения = Истина Тогда
		ОповеститьОбИзменении(СтруктураРеквизитовФормы.мСохраненныйДок);
		ОповеститьОСохраненииОтчетности();
	КонецЕсли;
	
	ВидДокументаНомерКорректировкиИзменен = Неопределено;
	
	Если ПодобныйОтчетСуществует И Автосохранение Тогда
		Возврат;
	КонецЕсли;
	
	НуженВопросПередСохранением = (ПодобныйОтчетСуществует ИЛИ ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки);
	
	Если НуженВопросПередСохранением Тогда
		СохранитьНаКлиентеСВопросом(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, ПодобныйОтчетСуществует);
	Иначе
		ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПередСохранением(КодИФНС = "не применимо", ПодобныйОтчетСуществует, Вариант, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, Автосохранение, НаимТекРаздела)
	
	ПодобныйОтчетСуществует = Ложь;
	
	СтруктураРеквизитовФормы.мЗаписываетсяНовыйДокумент = (СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено ИЛИ СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено);
	
	Если Вариант <> Неопределено И ((СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено) ИЛИ (СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено) ИЛИ (Вариант <> СтруктураРеквизитовФормы.мВариант)) Тогда
		Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено ИЛИ СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено Тогда
			// Открытие формы вопроса по исходному значению параметра.
		ИначеЕсли Вариант <> СтруктураРеквизитовФормы.мВариант Тогда
			ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если ПодобныйОтчетСуществует
	 ИЛИ ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Сохранить(Автосохранение, КодИФНС, Вариант, , НаимТекРаздела);
	
КонецФункции

&НаКлиенте
Процедура СохранитьНаКлиентеСВопросом(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, ПодобныйОтчетСуществует)
	
	Если ПодобныйОтчетСуществует Тогда
		
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(КодВозвратаДиалога.Да, "Сохранить");
		Кнопки.Добавить(КодВозвратаДиалога.Нет, "Отмена");
		
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Отчет с видом %1 уже существует.
			|Сохранить отчет с таким же видом?'"), ?(Вариант = 0, """Первичный""", """Корректирующий/" + Вариант + """"));
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("Автосохранение", Автосохранение);
		ДополнительныеПараметры.Вставить("Вариант", Вариант);
		ДополнительныеПараметры.Вставить("ВыполняемоеОповещение", ВыполняемоеОповещение);
		ДополнительныеПараметры.Вставить("ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки", ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки);
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросСохранитьОтчетСТакимЖеВидомЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, Кнопки, , Кнопки.Получить(1).Значение);
		
	Иначе
		
		СохранитьНаКлиентеСВопросомПродолжение(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросСохранитьОтчетСТакимЖеВидомЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Автосохранение = ДополнительныеПараметры.Автосохранение;
	Вариант = ДополнительныеПараметры.Вариант;
	ВыполняемоеОповещение = ДополнительныеПараметры.ВыполняемоеОповещение;
	ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки = ДополнительныеПараметры.ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки;
	
	Ответ = РезультатВопроса;
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	СохранитьНаКлиентеСВопросомПродолжение(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНаКлиентеСВопросомПродолжение(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки)
	
	Если ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки Тогда
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("ВидОтчета", Вариант);
		
		ФормаВопроса = РегламентированнаяОтчетностьКлиент.ПолучитьОбщуюФормуПоИмени("ВопросПриИзмененииВидаДокументаНомераКорректировки", ПараметрыФормы);
		ФормаВопроса.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		ДополнительныеПараметры = Новый Структура("Автосохранение, Вариант, ВыполняемоеОповещение", Автосохранение, Вариант, ВыполняемоеОповещение);
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросПриИзмененииВидаДокументаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ФормаВопроса.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
		ФормаВопроса.Открыть();
	Иначе
		Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Сохраняется %1...'"), ЭтаФорма.Заголовок), , , БиблиотекаКартинок.Записать);
		РезультатСохранения = Сохранить(Автосохранение, , Вариант, Ложь, Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
		Если РезультатСохранения = Истина Тогда
			ОповеститьОбИзменении(СтруктураРеквизитовФормы.мСохраненныйДок);
			ОповеститьОСохраненииОтчетности();
		КонецЕсли;
		ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения)
	
	КлючУникальности = СтруктураРеквизитовФормы.мСохраненныйДок;
	
	Если РезультатСохранения Тогда
		
		РегламентированнаяОтчетностьКлиент.ПослеЗаписиРегламентированногоОтчета(ЭтаФорма);
		
		Если ВыполняемоеОповещение <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ВыполняемоеОповещение);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция Сохранить(Автосохранение = Ложь, КодИФНС = "не применимо", Вариант, ВидДокументаНомерКорректировкиИзменен = Неопределено, НаимТекРаздела) Экспорт
	
	ДанныеДляРазблокирования = Неопределено;
	
	Если НЕ СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
		Если НЕ СтруктураРеквизитовФормы.мБезОткрытияФормы Тогда
			ДанныеДляРазблокирования = Новый Структура("Ключ,ИдФормы",
			СтруктураРеквизитовФормы.мСохраненныйДок, ЭтаФорма.УникальныйИдентификатор);
		КонецЕсли;
		СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.ПолучитьОбъект();
	КонецЕсли;
	
	Если НЕ РегламентированнаяОтчетность.ПриЗаписиРегламентированногоОтчетаНаСервере(ЭтаФорма, КодИФНС, Автосохранение, Вариант, ВидДокументаНомерКорректировкиИзменен, СтруктураРеквизитовФормы.мСохраненныйДок) Тогда
		СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
		Возврат Ложь;
	КонецЕсли;
	
	СтруктураРеквизитовФормы.мСохраненныйДок.ИсточникОтчета             = "РасшифровкиБухгалтерскойОтчетности";
	СтруктураРеквизитовФормы.мСохраненныйДок.НаименованиеОтчета         = Нстр("ru = 'Расшифровки бухгалтерской отчетности для заявки на кредит'");
	СтруктураРеквизитовФормы.мСохраненныйДок.ДатаНачала                 = СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета;
	СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания              = СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета;
	СтруктураРеквизитовФормы.мСохраненныйДок.ВыбраннаяФорма             = СтруктураРеквизитовФормы.мВыбраннаяФорма;
	СтруктураРеквизитовФормы.мСохраненныйДок.Организация                = СтруктураРеквизитовФормы.Организация;
	СтруктураРеквизитовФормы.мСохраненныйДок.ДатаПодписи                = ДатаПодписи;
	СтруктураРеквизитовФормы.мСохраненныйДок.ЕдиницаИзмерения           = СтруктураРеквизитовФормы.ЕдиницаИзмерения;
	СтруктураРеквизитовФормы.мСохраненныйДок.ТочностьЕдиницыИзмерения   = СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения;
	СтруктураРеквизитовФормы.мСохраненныйДок.ВидОтчетности              = Перечисления.ВидыОтчетности.РегламентированнаяОтчетность;
	СтруктураРеквизитовФормы.мСохраненныйДок.Комментарий                = Комментарий;
	СтруктураРеквизитовФормы.мСохраненныйДок.Вид                        = Вариант;
	СтруктураРеквизитовФормы.мСохраненныйДок.ПредставлениеВида          = РегламентированнаяОтчетность.ПредставлениеВидаДокумента(СтруктураРеквизитовФормы.мСохраненныйДок.Вид);
	СтруктураРеквизитовФормы.мСохраненныйДок.Банк                       = СтруктураРеквизитовФормы.Банк;
	СтруктураРеквизитовФормы.мСохраненныйДок.СтатусОтчета               = "";
	СтруктураРеквизитовФормы.мВариант                                   = Вариант;
	
	Если СтруктураРеквизитовФормы.Организация <> Справочники.Организации.ПустаяСсылка() Тогда
		СтруктураРеквизитовФормы.мСохраненныйДок.КодНалоговогоОргана = СтруктураРеквизитовФормы.Организация.КодНалоговогоОргана;
	КонецЕсли;
	
	СтруктураРеквизитовФормы.мСохраненныйДок.ФорматВыгрузки = "Автоматически";
	
	СохранитьДанныеРаздела(НаимТекРаздела);
	
	ПоказателиОтчета = Новый Структура();
	ПоказателиОтчета.Вставить("ПолеТабличногоДокументаТитульный", СтруктураДанныхТитульный);
	
	СписокСохранения = Новый Структура();
	
	СписокСохранения.Вставить("СписокОрганизаций", СтруктураРеквизитовФормы.СписокОрганизаций);
	
	СписокСохранения.Вставить("ПоказателиОтчета", ПоказателиОтчета);
	
	ДанныеМногоуровневыхРазделов = Новый Структура;
	Для Каждого Элем Из мСтруктураМногоуровневыхРазделов Цикл
		СтруктураРаздела = Элем.Значение;
		Если НЕ СтруктураРаздела.Свойство("Подчиненность") Тогда
			ДанныеМногоуровневыхРазделов.Вставить(Элем.Ключ, ПолучитьИзВременногоХранилища(
				СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + Элем.Ключ]));
		КонецЕсли;
	КонецЦикла;
	
	СписокСохранения.Вставить("ДанныеМногоуровневыхРазделов", ДанныеМногоуровневыхРазделов);
	
	СписокСохранения.Вставить("ВерсияФормы", СтруктураРеквизитовФормы.мВерсияФормы);
	
	СписокСохранения.Вставить("Авторасчет", СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);
	
	СписокСохранения.Вставить("СписокСтраницАнализСчета", РеквизитФормыВЗначение("СписокСтраницАнализСчета"));
	СписокСохранения.Вставить("СписокСтраницОперацииПоБанковскимСчетам", РеквизитФормыВЗначение("СписокСтраницОперацииПоБанковскимСчетам"));
	
	ХранилищеДанных = Новый ХранилищеЗначения(СписокСохранения);
	СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета = ХранилищеДанных;
	
	// Запись документа, хранящего данные отчета.
	НачатьТранзакцию();
	
	Попытка
		СтруктураРеквизитовФормы.мСохраненныйДок.Записать();

		СохранитьДеревоСтраницОтчета(СтруктураРеквизитовФормы.мСохраненныйДок);
		
		УдалитьНеактуальныеЗаписиВРегистрах();
		
		Если ТипЗнч(НеотображаемыеПоказатели) = Тип("Структура")
		   И НеотображаемыеПоказатели.Свойство("ИсходныйПлан") Тогда
			НеотображаемыеПоказатели.ИсходныйПлан = НеотображаемыеПоказатели.АктивныйПлан;
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
	
		Если НЕ Автосохранение Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = РегламентированнаяОтчетностьКлиентСервер.СформироватьТекстСообщения(ОписаниеОшибки());
			Сообщение.Сообщить();
		КонецЕсли;
		
		СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
		Возврат Ложь;
		
	КонецПопытки;
	
	Модифицированность = Ложь;
	
	СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
	
	Если НЕ СтруктураРеквизитовФормы.мБезОткрытияФормы
	   И НЕ СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
		ЗаблокироватьДанныеДляРедактирования(СтруктураРеквизитовФормы.мСохраненныйДок, , ЭтаФорма.УникальныйИдентификатор);
	КонецЕсли;
	
	Если ДанныеДляРазблокирования <> Неопределено Тогда
		РазблокироватьДанныеДляРедактирования(ДанныеДляРазблокирования.Ключ, ДанныеДляРазблокирования.ИдФормы);
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Процедура СохранитьДеревоСтраницОтчета(Знач мСохраненныйДок)
	
	Если мСохраненныйДок <> Неопределено Тогда
		Если ТипЗнч(мСохраненныйДок) = Тип("ДокументСсылка.РегламентированныйОтчет") Тогда
			мСохраненныйДок = мСохраненныйДок.ПолучитьОбъект();
		КонецЕсли;
		
		Если Не мСохраненныйДок.ЭтоНовый() Тогда
			ХранилищеДанных = Новый ХранилищеЗначения(РеквизитФормыВЗначение("мДеревоСтраницОтчета"));
			мСохраненныйДок.ДеревоНастройкиСтраниц = ХранилищеДанных;
			Попытка
				мСохраненныйДок.Записать();
			Исключение
			КонецПопытки;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьНеактуальныеЗаписиВРегистрах()
	
	Для Каждого МногоуровневыйРаздел Из мСтруктураМногоуровневыхРазделов Цикл
		ИмяРаздела = МногоуровневыйРаздел.Ключ;
		СтруктураРаздела = МногоуровневыйРаздел.Значение;
		
		ИмяРегистра = Неопределено;
		Если НЕ СтруктураРаздела.Свойство("РегистрСведений", ИмяРегистра) Тогда
			Продолжить;
		КонецЕсли;
		
		АдресДанныхРаздела = СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяРаздела];
		ДанныеРаздела = ПолучитьИзВременногоХранилища(АдресДанныхРаздела);
		
		Для Каждого СтраницаРаздела Из ДанныеРаздела.Строки Цикл
			АктивныйПлан = СтраницаРаздела.Параметры.АктивныйПлан;
			НеактивныйПлан = ?(АктивныйПлан = 1, 2, 1);
			
			ЗаписиПлана = РегистрыСведений[ИмяРегистра].СоздатьНаборЗаписей();
			ЗаписиПлана.Отбор.РегламентированныйОтчет.Установить(СсылкаНаОтчет());
			ЗаписиПлана.Отбор.ИдентификаторСтраницы.Установить(СтраницаРаздела.Параметры.ИдентификаторСтраницы);
			
			ЗаписиПлана.Отбор.ПланСведений.Установить(НеактивныйПлан);
			ЗаписиПлана.Записать();
			
			ЗаписиПлана.Отбор.ПланСведений.Установить(3);
			ЗаписиПлана.Записать();
			
			СтраницаРаздела.Параметры.ИсходныйПлан = АктивныйПлан;
			
		КонецЦикла;
		
		ПоместитьВоВременноеХранилище(ДанныеРаздела, АдресДанныхРаздела);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьСохраненныеДанные()
	
	Перем Авторасчет;
	
	// Обновление сведений об организации при копирования отчета.
	Если СтруктураРеквизитовФормы.Организация <> СтруктураРеквизитовФормы.мСохраненныйДок.Организация
	   И СтруктураРеквизитовФормы.Организация <> РегламентированнаяОтчетностьКлиентСервер.ПустоеЗначениеТипа("СправочникСсылка.Организации")
	   И СтруктураРеквизитовФормы.Организация <> Неопределено Тогда
		СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация = Истина;
	Иначе
		СтруктураРеквизитовФормы.Организация = СтруктураРеквизитовФормы.мСохраненныйДок.Организация;
	КонецЕсли;
	
	ДатаПодписи = СтруктураРеквизитовФормы.мСохраненныйДок.ДатаПодписи;
	Комментарий = СтруктураРеквизитовФормы.мСохраненныйДок.Комментарий;
	
	СписокСохранения = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить();
	
	ОтчетОбъект = ОбъектОтчета();
	ОтчетОбъект.ВосстановитьСохраненныеДанныеБезКонтекста(
		СтруктураРеквизитовФормы, СписокСохранения, СтруктураРеквизитовФормы.мСохраненныйДок, ЭтотОбъект);
		
	СписокОрганизаций = Неопределено;
	СписокСохранения.Свойство("СписокОрганизаций", СписокОрганизаций);
	Если НЕ ЗначениеЗаполнено(СписокОрганизаций) И ЗначениеЗаполнено(СтруктураРеквизитовФормы.Организация) Тогда
		СписокОрганизаций = Новый Массив;
		СписокОрганизаций.Добавить(СтруктураРеквизитовФормы.Организация);
	КонецЕсли;
	СтруктураРеквизитовФормы.СписокОрганизаций = СписокОрганизаций;
	
	ВосстановитьСохраненныеНастройкиДереваРазделов();
	
	ОбновитьРазделыПослеВосстановленияСохраненныхДанных();
	
	СформироватьДеревоРазделовОтчетаНаСервере();
	
	// Сохраненные данные редактируемых ячеек.
	ПоказателиОтчета = Неопределено;
	СписокСохранения.Свойство("ПоказателиОтчета", ПоказателиОтчета);
	
	Префикс = "ПолеТабличногоДокумента";
	
	УпрощенныеРазделы = Новый Массив;
	УпрощенныеРазделы.Добавить("Титульный");
	
	Для Каждого ИмяСтраницы Из УпрощенныеРазделы Цикл
		Если ПоказателиОтчета.Свойство(Префикс + ИмяСтраницы) Тогда
			ЗаполнитьЗначенияСвойств(ЭтаФорма["СтруктураДанных" + ИмяСтраницы], ПоказателиОтчета[Префикс + ИмяСтраницы]);
		КонецЕсли;
	КонецЦикла;
	
	ИмяТекРаздела = РазделыОтчета.ПолучитьЭлементы()[0].КолонкаРазделыОтчетаСокрНаим;
	
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(ОтчетОбъект.МакетРаздела(ИмяФормы, ИмяТекРаздела));
	
	Для Каждого ЭлСтруктуры Из ЭтаФорма["СтруктураДанных" + ИмяТекРаздела] Цикл
		Если ТабличныйДокумент.Области.Найти(ЭлСтруктуры.Ключ) <> Неопределено Тогда
			ТабличныйДокумент.Области[ЭлСтруктуры.Ключ].Значение = ЭлСтруктуры.Значение;
		КонецЕсли;
	КонецЦикла;
	
	РегламентированнаяОтчетность.ОперацииПриВосстановленииРегламентированногоОтчета(ЭтаФорма);
	
	КопироватьДанныеФормы(мДеревоСтраницОтчета, мДеревоВыбранныхСтраниц);
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьСохраненныеНастройкиДереваРазделов()
	
	ОтборВсехСтрок = Новый Структура("ПреобразоватьВМассив", Ложь);
	
	ИсходноеДеревоСтраниц = РеквизитФормыВЗначение("мДеревоСтраницОтчета");
	
	// Исключение всех разделов, чтобы видны были только разделы, включенные в сохраненый отчет.
	ИсходноеДеревоСтраниц.Колонки.Добавить("ПреобразоватьВМассив", Новый ОписаниеТипов("Булево"));
	
	СтрокиИсходногоДерева = ИсходноеДеревоСтраниц.Строки.НайтиСтроки(ОтборВсехСтрок, Истина);
	Для Каждого СтрокаДерева Из СтрокиИсходногоДерева Цикл
		СтрокаДерева.ПоказатьСтраницу = 0;
	КонецЦикла;
	
	ИсходноеДеревоСтраниц.Колонки.Удалить("ПреобразоватьВМассив");
	
	ДеревоНастройкиСтраниц = СтруктураРеквизитовФормы.мСохраненныйДок.ДеревоНастройкиСтраниц.Получить();
	
	Если ТипЗнч(ДеревоНастройкиСтраниц) = Тип("ДеревоЗначений") Тогда
		ДеревоНастройкиСтраниц.Колонки.Добавить("ПреобразоватьВМассив", Новый ОписаниеТипов("Булево"));
		СтрокиНастройкиСтраниц = ДеревоНастройкиСтраниц.Строки.НайтиСтроки(ОтборВсехСтрок, Истина);
		
		Для Каждого СтрокаНастройкиСтраницы Из СтрокиНастройкиСтраниц Цикл
			ИмяРаздела = СтрокаНастройкиСтраницы.ИмяСтраницы;
			СтрокаДереваРазделов = ИсходноеДеревоСтраниц.Строки.Найти(ИмяРаздела, "ИмяСтраницы", Истина);
			
			Если СтрокаДереваРазделов <> Неопределено Тогда
				ИсключаемыеСвойства = "Представление";
				ЗаполнитьЗначенияСвойств(СтрокаДереваРазделов, СтрокаНастройкиСтраницы, , ИсключаемыеСвойства);
				
			КонецЕсли;
			
		КонецЦикла;
		
		ЗначениеВРеквизитФормы(ИсходноеДеревоСтраниц.Скопировать(), "мДеревоСтраницОтчета");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СтрокаЧГ0(ФорматируемоеЧисло)
	
	// При внесении изменений в функцию необходимо внести параллельные изменения в одноименную функцию модуля объекта,
	// применяемую при выгрузке.
	
	Возврат Формат(ФорматируемоеЧисло, "ЧН=; ЧГ=0");
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьАвтоСохранениеНового(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("Команда", ДополнительныеПараметры.Команда);
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьАвтоЗавершение", ЭтотОбъект, ПараметрыОповещения);
	
	Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
		СохранитьНаКлиенте( , ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьАвтоЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Команда = ДополнительныеПараметры.Команда;
	
	РезультатЗапускаФоновогоЗадания = ЗаполнитьАвтоНаСервере(Команда.Имя = "Заполнить");
	
	Если РезультатЗапускаФоновогоЗадания.Статус = "Выполняется" Тогда
		ОповещениеОЗавершении = Новый ОписаниеОповещения("ОбработатьЗавершениеАвтозаполненияВФоне", ЭтотОбъект);
		ПараметрыОжидания = ПараметрыОжидания();
		ДлительныеОперацииКлиент.ОжидатьЗавершение(РезультатЗапускаФоновогоЗадания, ОповещениеОЗавершении, ПараметрыОжидания);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьЗавершениеАвтозаполненияВФоне(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		Если Результат.Статус = "Выполнено" Тогда
			ЗагрузитьПодготовленныеДанные();
			
		ИначеЕсли Результат.Статус = "Ошибка" Тогда
			ВызватьИсключение Результат.ПодробноеПредставлениеОшибки;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЗаполнитьАвтоНаСервере(ЗаполнятьВсеРазделы)
	
	Модифицированность = Истина;
	
	СохранитьДанныеРаздела(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
	ПараметрыОтчета = ПараметрыАвтозаполнения(ЗаполнятьВсеРазделы);
	
	Контейнер = Новый Структура;
	
	НаименованиеЗадания = НСтр("ru = 'Автоматическое заполнение по данным информационной базы'");
	
	ПараметрыПроцедуры = Новый Структура;
	ПараметрыПроцедуры.Вставить("ИДОтчета", Сред(Лев(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, ".Форма.") - 1), 7));
	ПараметрыПроцедуры.Вставить("ИДРедакцииОтчета", Сред(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, ".Форма.") + 7));
	ПараметрыПроцедуры.Вставить("ПараметрыОтчета", ПараметрыОтчета);
	ПараметрыПроцедуры.Вставить("Контейнер", Контейнер);
	
	ПараметрыВыполненияВФоне = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполненияВФоне.НаименованиеФоновогоЗадания = НаименованиеЗадания;
	ПараметрыВыполненияВФоне.ЗапуститьВФоне = Истина;
	
	РезультатЗапуска = ДлительныеОперации.ВыполнитьВФоне("РегламентированнаяОтчетность.ЗаполнитьОтчетВФоне",
		ПараметрыПроцедуры, ПараметрыВыполненияВФоне);
	
	Если РезультатЗапуска.Статус = "Выполнено" Тогда
		ЗагрузитьПодготовленныеДанные();
		
	ИначеЕсли РезультатЗапуска.Статус = "Ошибка" Тогда
		ВызватьИсключение РезультатЗапуска.ПодробноеПредставлениеОшибки;
		
	КонецЕсли;
	
	Возврат РезультатЗапуска;
	
КонецФункции

&НаСервере
Функция ПараметрыАвтозаполнения(ЗаполнятьВсеРазделы)
	
	ИмяТекущегоРаздела = СтруктураРеквизитовФормы.НаимТекущегоРаздела;
	
	// Адрес результата автозаполнения.
	СтруктураРеквизитовФормы.АдресВоВременномХранилище =
		ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
	
	ПараметрыАвтозаполнения = Новый Структура;
	
	ПараметрыАвтозаполнения.Вставить("Организация", СтруктураРеквизитовФормы.Организация);
	ПараметрыАвтозаполнения.Вставить("СписокОрганизаций", СтруктураРеквизитовФормы.СписокОрганизаций);
	
	ПараметрыАвтозаполнения.Вставить("мДатаНачалаПериодаОтчета",
		НачалоДня(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета));
	ПараметрыАвтозаполнения.Вставить("мДатаКонцаПериодаОтчета",
		КонецДня(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета));
	
	ПараметрыАвтозаполнения.Вставить("УникальныйИдентификаторФормы", ЭтаФорма.УникальныйИдентификатор);
	ПараметрыАвтозаполнения.Вставить("АдресВоВременномХранилище",    СтруктураРеквизитовФормы.АдресВоВременномХранилище);
	
	ПараметрыАвтозаполнения.Вставить("РегламентированныйОтчет", СтруктураРеквизитовФормы.мСохраненныйДок);
	
	ПараметрыАвтозаполнения.Вставить("РасшифровкиПоказателей", Неопределено);
	
	НомерСтраницы = Неопределено;
	Если НЕ ЗаполнятьВсеРазделы Тогда
		Если СтруктураРеквизитовФормы.НомерСтраницыТекущегоРаздела.Количество() > 0 Тогда
			НомерСтраницы = СтруктураРеквизитовФормы.НомерСтраницыТекущегоРаздела[0];
		КонецЕсли;
	КонецЕсли;
	
	УсловияВключенияРазделов = Новый Структура;
	УсловияВключенияРазделов.Вставить("ЗаполнятьВсеРазделы", ЗаполнятьВсеРазделы);
	УсловияВключенияРазделов.Вставить("АктивныйРаздел", ИмяТекущегоРаздела);
	УсловияВключенияРазделов.Вставить("НомерСтраницыРаздела", НомерСтраницы);
	
	ДополнитьПараметрыАвтозаполнения_ОСВ(ПараметрыАвтозаполнения, УсловияВключенияРазделов);
	
	ДополнитьПараметрыАвтозаполнения_АнализСчета(ПараметрыАвтозаполнения, УсловияВключенияРазделов);
	
	ДополнитьПараметрыАвтозаполнения_ОперацииПоБанковскимСчетам(ПараметрыАвтозаполнения, УсловияВключенияРазделов);
	
	Возврат ПараметрыАвтозаполнения;
	
КонецФункции

&НаСервере
Процедура ДополнитьПараметрыАвтозаполнения_ОСВ(ПараметрыАвтозаполнения, УсловияВключенияРазделов)
	
	ИмяРаздела = "ОборотноСальдоваяВедомость";
	НомерСтраницы = УсловияВключенияРазделов.НомерСтраницыРаздела;
	
	Если НЕ ЗаполнятьРазделПоСведениямИБ(ИмяРаздела, УсловияВключенияРазделов) Тогда
		Возврат;
	КонецЕсли;
	
	АдресДанныхРаздела = СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяРаздела];
	ДанныеРаздела = ПолучитьИзВременногоХранилища(АдресДанныхРаздела);
	
	ПараметрыАвтозаполнения.Вставить("Заполнять" + ИмяРаздела, Истина);
	ПараметрыАвтозаполнения.Вставить(ИмяРаздела + "_АдресДанныхРаздела", АдресДанныхРаздела);
	ПараметрыАвтозаполнения.Вставить(ИмяРаздела + "_ДанныеРаздела", ДанныеРаздела);
	ПараметрыАвтозаполнения.Вставить(ИмяРаздела + "_ЗаполняемыеСтраницы", НомерСтраницы);
	ПараметрыАвтозаполнения.Вставить(ИмяРаздела + "_МакетРаздела", ОбъектОтчета().МакетРаздела(ИмяФормы, ИмяРаздела));
	ПараметрыАвтозаполнения.Вставить(ИмяРаздела + "_Периоды", );
	
КонецПроцедуры

&НаСервере
Процедура ДополнитьПараметрыАвтозаполнения_АнализСчета(ПараметрыАвтозаполнения, УсловияВключенияРазделов)
	
	ИмяРаздела = "АнализСчета";
	НомерСтраницы = УсловияВключенияРазделов.НомерСтраницыРаздела;
	
	Если НЕ ЗаполнятьРазделПоСведениямИБ(ИмяРаздела, УсловияВключенияРазделов) Тогда
		Возврат;
	КонецЕсли;
	
	АдресДанныхРаздела = СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяРаздела];
	ДанныеРаздела = ПолучитьИзВременногоХранилища(АдресДанныхРаздела);
	
	ПараметрыАвтозаполнения.Вставить("Заполнять" + ИмяРаздела, Истина);
	ПараметрыАвтозаполнения.Вставить(ИмяРаздела + "_АдресДанныхРаздела", АдресДанныхРаздела);
	ПараметрыАвтозаполнения.Вставить(ИмяРаздела + "_ДанныеРаздела", ДанныеРаздела);
	ПараметрыАвтозаполнения.Вставить(ИмяРаздела + "_ЗаполняемыеСтраницы", НомерСтраницы);
	ПараметрыАвтозаполнения.Вставить(ИмяРаздела + "_МакетРаздела", ОбъектОтчета().МакетРаздела(ИмяФормы, ИмяРаздела));
	ПараметрыАвтозаполнения.Вставить(ИмяРаздела + "_Счета", РеквизитФормыВЗначение("СписокСтраницАнализСчета"));
	
КонецПроцедуры

&НаСервере
Процедура ДополнитьПараметрыАвтозаполнения_ОперацииПоБанковскимСчетам(ПараметрыАвтозаполнения, УсловияВключенияРазделов)
	
	ИмяРаздела = "ОперацииПоБанковскимСчетам";
	НомерСтраницы = УсловияВключенияРазделов.НомерСтраницыРаздела;
	
	Если НЕ ЗаполнятьРазделПоСведениямИБ(ИмяРаздела, УсловияВключенияРазделов) Тогда
		Возврат;
	КонецЕсли;
	
	АдресДанныхРаздела = СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяРаздела];
	ДанныеРаздела = ПолучитьИзВременногоХранилища(АдресДанныхРаздела);
	
	ПараметрыАвтозаполнения.Вставить("Заполнять" + ИмяРаздела, Истина);
	ПараметрыАвтозаполнения.Вставить(ИмяРаздела + "_АдресДанныхРаздела", АдресДанныхРаздела);
	ПараметрыАвтозаполнения.Вставить(ИмяРаздела + "_ДанныеРаздела", ДанныеРаздела);
	ПараметрыАвтозаполнения.Вставить(ИмяРаздела + "_ЗаполняемыеСтраницы", НомерСтраницы);
	ПараметрыАвтозаполнения.Вставить(ИмяРаздела + "_МакетРаздела", ОбъектОтчета().МакетРаздела(ИмяФормы, ИмяРаздела));
	ПараметрыАвтозаполнения.Вставить(ИмяРаздела + "_Счета", РеквизитФормыВЗначение("СписокСтраницОперацииПоБанковскимСчетам"));
	
КонецПроцедуры

&НаСервере
Функция ЗаполнятьРазделПоСведениямИБ(ИмяРаздела, УсловияВключенияРазделов)
	
	ЗаполнятьВсеРазделы = УсловияВключенияРазделов.ЗаполнятьВсеРазделы;
	ИмяТекущегоРаздела  = УсловияВключенияРазделов.АктивныйРаздел;
	
	ЗаполнятьРаздел = Ложь;
	Если РазделАвтозаполняется(ИмяРаздела) Тогда

		Если ИмяТекущегоРаздела = ИмяРаздела Тогда
			
			ЗаполнятьРаздел = Истина;

		ИначеЕсли ЗаполнятьВсеРазделы Тогда
			
			СписокРазделов = ДанныеФормыВЗначение(мДеревоВыбранныхСтраниц, Тип("ДеревоЗначений"));
			ЗаполнятьРаздел = ОбъектОтчета().РазделВключенВОтчет(ИмяРаздела, СписокРазделов);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ЗаполнятьРаздел;
	
КонецФункции

&НаСервере
Процедура ПриЗакрытииНаСервере()
	
	РегламентированнаяОтчетность.ПриЗакрытииРегламентированногоОтчета(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросСохранитьИзмененияЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("Форма", ЭтаФорма);
		Оповещение = Новый ОписаниеОповещения("ПослеСохраненияФормыЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		
		СохранитьНаКлиенте( , Оповещение);
		
	ИначеЕсли Ответ = КодВозвратаДиалога.Нет Тогда
		Модифицированность = Ложь;
		Закрыть();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеСохраненияФормыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ДополнительныеПараметры.Форма.Закрыть();
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьПодготовленныеДанные()
	
	СтруктураДанных = ПолучитьИзВременногоХранилища(СтруктураРеквизитовФормы.АдресВоВременномХранилище);
	
	РасчетПолный();
	
	ИмяРаздела = СтруктураРеквизитовФормы.НаимТекущегоРаздела;
	ПоказатьРаздел(ИмяРаздела, СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела);
	
КонецПроцедуры

&НаКлиенте
Функция ЗаголовокРегламентированногоОтчета(ДатаНач, ДатаКон, Периодичность = Неопределено) Экспорт
	
	// Отчеты в составе заявки на кредит предоставляются за разные периоды,
	// поэтому период выводим не в заголовке отчета, а внутри каждого раздела.
	Возврат ЭтаФорма.Заголовок;
	
КонецФункции

&НаКлиенте
Функция УниверсальнаяВыгрузкаXML(ДвоичныеДанныеФайла) Экспорт
	
	Если Модифицированность Тогда
		ТекстЗаголовка = ЗаголовокРегламентированногоОтчета(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета, СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
		
		ОргСтр = " (" + СтруктураРеквизитовФормы.Организация + ")";
		Если СтрНайти(ТекстЗаголовка, ОргСтр) = 0 Тогда
			ТекстЗаголовка = ТекстЗаголовка + ОргСтр;
		КонецЕсли;
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Отчет """ + ТекстЗаголовка + """ не сохранен.";
		Сообщение.Сообщить();
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Если НЕ УниверсальнаяВыгрузкаXMLНаСервере(ДвоичныеДанныеФайла) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция УниверсальнаяВыгрузкаXMLНаСервере(ДвоичныеДанныеФайла)
	
	ПараметрыРеглОтчета = Новый Структура;
	ПараметрыРеглОтчета.Вставить("СохраненныйОтчет",  СтруктураРеквизитовФормы.мСохраненныйДок);
	ПараметрыРеглОтчета.Вставить("ИсточникОтчета",    СтруктураРеквизитовФормы.мСохраненныйДок.ИсточникОтчета);
	ПараметрыРеглОтчета.Вставить("ВыбраннаяФорма",    СтруктураРеквизитовФормы.мСохраненныйДок.ВыбраннаяФорма);
	ПараметрыРеглОтчета.Вставить("РезультатВыгрузки", РегламентированнаяОтчетность.НовыйРезультатВыгрузкиРеглОтчета());
	
	ПараметрыРеглОтчета.РезультатВыгрузки.ТаблицаСообщений = ТаблицаСообщений;
	                   	
	РезультатВыгрузки = ОбъектОтчета().УниверсальнаяВыгрузка(ПараметрыРеглОтчета);
	
	Если РезультатВыгрузки.РеглОтчетВыгружен Тогда
		ДвоичныеДанныеФайла = ПолучитьИзВременногоХранилища(РезультатВыгрузки.АдресФайлаВыгрузки);
	КонецЕсли;	
		
	Возврат РезультатВыгрузки.РеглОтчетВыгружен;
	
КонецФункции

#Область ПроверкаВозможностиВыгрузки

&НаКлиенте
Процедура ПроверитьВыгрузкуЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПроверитьВыгрузкуОтчета();
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузкуОтчета()
	
	Если НЕ ЗначениеЗаполнено(СтруктураРеквизитовФормы.Организация) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Организация не выбрана! Выгрузка невозможна.'");
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьВыгрузкуОтчетаЗавершение", ЭтотОбъект);
	
	Если Модифицированность Тогда
		СохранитьНаКлиенте(,ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузкуОтчетаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ТаблицаСообщений.Очистить();
	
	ФормаВыгрузкиРеглОтчета = ПолучитьФорму("Документ.ВыгрузкаРегламентированныхОтчетов.Форма.ФормаДокумента", , ЭтаФорма);
	
	СпДокОсн = Новый СписокЗначений;
	СпДокОсн.Добавить(СтруктураРеквизитовФормы.мСохраненныйДок);
	
	ФормаВыгрузкиРеглОтчета.Проверить(СпДокОсн);
	
КонецПроцедуры

&НаСервере
Функция ПроверитьПоказатели() Экспорт
	
	ПризнакПроверкиПоказателей = ПроверитьПоказателиXML();
	
	мДанныеОтчета = Неопределено;
	
	Возврат ПризнакПроверкиПоказателей;
	
КонецФункции

&НаСервере
Функция ПроверитьПоказателиXML() Экспорт
	
	ОтчетОбъект = ОбъектОтчета();
	мДанныеОтчета = ОтчетОбъект.ПодготовитьСведенияСохраненногоОтчета(СтруктураРеквизитовФормы);
	ТитульныйЛист = мДанныеОтчета.ПолеТабличногоДокументаТитульный;
	ПараметрыВыгрузки = ОтчетОбъект.ПараметрыЭлектронногоПредставления(ЭтотОбъект, ТитульныйЛист);
	
	Если Не ОтчетОбъект.ПроверитьВозможностьВыгрузки(ЭтотОбъект, ПараметрыВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура АктивизироватьЯчейку(Ячейка) Экспорт
	
	ИмяРаздела = Ячейка.Раздел;
	
	Если ИмяРаздела = "АнализСчета" ИЛИ ИмяРаздела = "ОперацииПоБанковскимСчетам" Тогда
		АктивизироватьЯчейкуОтчетаСоСписком(Ячейка);
		
	Иначе
		РегламентированнаяОтчетностьКлиент.АктивизироватьЯчейку(ЭтаФорма, Ячейка);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура АктивизироватьЯчейкуОтчетаСоСписком(Ячейка)
	
	ИмяРаздела = Ячейка.Раздел;
	КодСчета = Ячейка.Страница;
	
	НайденнаяСтрока = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(
		РазделыОтчета.ПолучитьЭлементы(), "КолонкаРазделыОтчетаСокрНаим", ИмяРаздела);
	
	Если НайденнаяСтрока <> Неопределено Тогда
		СтрокаПоСчету = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(
			НайденнаяСтрока.ПолучитьЭлементы(), "КолонкаРазделыОтчета", КодСчета);
			
		Если СтрокаПоСчету <> Неопределено Тогда
			Элементы.РазделыОтчета.ТекущаяСтрока = СтрокаПоСчету.ПолучитьИдентификатор();
		Иначе
			РегламентированнаяОтчетностьКлиент.АктивизироватьЯчейку(ЭтаФорма, Ячейка);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область АвторасчетПоказателей

&НаСервере
Процедура ЗаполнитьСтруктуруЗависимыхЯчеекДляАвторасчета()
	
	СтруктураЗависимыхЯчеекДляАвторасчета = Новый Структура;
	
КонецПроцедуры

&НаСервере
Процедура РасчетПолный()
	
	// В этой процедуре необходимо реализовывать алгоритмы пересчета разделов, содержащих редактируемые ячейки.

КонецПроцедуры

&НаСервере
Процедура РасчетПриИзмененииПоказателя(ИмяРаздела, ИмяПоказателя)
	
	Если СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Тогда
		Возврат;
	КонецЕсли;
	
	ОтчетОбъект = ОбъектОтчета();
	ДанныеСтраницы = ОтчетОбъект.ДанныеТабличногоДокумента(ТабличныйДокумент, ИмяРаздела, ЭтотОбъект);
	Зависимости    = СтруктураЗависимыхЯчеекДляАвторасчета[ИмяРаздела];
	
	ПараметрыРасчета = Новый Структура;
	ПараметрыРасчета.Вставить("ИмяРаздела",    ИмяРаздела);
	ПараметрыРасчета.Вставить("Зависимости",   Зависимости);
	ПараметрыРасчета.Вставить("ДанныеСтраницы", ДанныеСтраницы);
	ПараметрыРасчета.Вставить("ИмяПоказателя", ИмяПоказателя);
	ПараметрыРасчета.Вставить("ПараметрыРаздела", НеотображаемыеПоказатели);
	ПараметрыРасчета.Вставить("Делитель",
		ОтчетОбъект.ДелительПоЕдиницеИзмерения(СтруктураРеквизитовФормы.ЕдиницаИзмерения));
	ПараметрыРасчета.Вставить("Точность", СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения);
	
	РасчитатьПоказатели(ПараметрыРасчета);
	
	Для Каждого ЭлементАвторасчета Из Зависимости Цикл
		ИмяРассчитанногоПоказателя = ЭлементАвторасчета.Ключ;
		ТабличныйДокумент.Области[ИмяРассчитанногоПоказателя].Значение = ДанныеСтраницы.Данные[ИмяРассчитанногоПоказателя];
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РасчитатьПоказатели(ПараметрыРасчета)

	// В этой процедуре необходимо реализовывать алгоритмы пересчета редактируемых ячеек.
	
КонецПроцедуры

#КонецОбласти

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьОбластей(Форма, ИмяРаздела)
	
	АвтоРасчПоказатели = Новый Массив;
	
	Если ЗначениеЗаполнено(ИмяРаздела)
	   И Форма.СтруктураЗависимыхЯчеекДляАвторасчета.Свойство(ИмяРаздела) Тогда
		Для Каждого ЭлементАвторасчета Из Форма.СтруктураЗависимыхЯчеекДляАвторасчета[ИмяРаздела] Цикл
			АвтоРасчПоказатели.Добавить(ЭлементАвторасчета.Ключ);
		КонецЦикла;
	КонецЕсли;
	
	Для Каждого ИмяПоказателя Из АвтоРасчПоказатели Цикл
		Обл = Форма.ТабличныйДокумент.Область(ИмяПоказателя);
		Если Форма.СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Тогда
			Обл.Защита = Ложь;
			Обл.ЦветФона = Форма.мСтруктураЦветовРаскраски["_0"];
		Иначе
			Обл.Защита = Истина;
			Обл.ЦветФона = Форма.мСтруктураЦветовРаскраски["_4"];
		КонецЕсли;
	КонецЦикла;
	
	УстановитьЦветАвтозаполняемыхПоказателей(Форма, ИмяРаздела);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЦветАвтозаполняемыхПоказателей(Форма, ИмяРаздела)
	
	Для Каждого Обл Из Форма.ТабличныйДокумент.Области Цикл
		
		Если НЕ (СтрЧислоВхождений(Тип(Обл), "Рисунок") = 0
		   И Обл.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник
		   И Обл.СодержитЗначение = Истина) Тогда
			Продолжить;
		КонецЕсли;
		
		ИмяПоиска = Обл.Имя;
		ИмяПоиска = Лев(ИмяПоиска, 13);
		
		Если Форма.СтруктураРеквизитовФормы.АвтозаполняемыеПоказатели.Свойство(ИмяПоиска) Тогда
			Если Форма.СтруктураРеквизитовФормы.АвтозаполняемыеПоказатели[ИмяПоиска][0] Тогда
				Обл.Защита = Ложь;
				Обл.ЦветФона = Форма.мСтруктураЦветовРаскраски["_3"];
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПерерасчетВсехРассчитываемыхПоказателейЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	НомерСтраницыРазделаОтчета = ДополнительныеПараметры.НомерСтраницыРазделаОтчета;
	ТекущийРазделОтчетаСокрНаим = ДополнительныеПараметры.ТекущийРазделОтчетаСокрНаим;
	флЗначенияИдентичны = ДополнительныеПараметры.флЗначенияИдентичны;
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет = Истина;
		Возврат;
	КонецЕсли;
	
	УстановитьДоступностьОбластей(ЭтаФорма, ТекущийРазделОтчетаСокрНаим);
	
	ДопПараметры = Новый Структура(
		"НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим, флЗначенияИдентичны",
		НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим, флЗначенияИдентичны);
	ПослеОткрытияФормыВыбораСтраниц(ДопПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеОткрытияФормыВыбораСтраниц(ДополнительныеПараметры)
	
	НомерСтраницыРазделаОтчета = ДополнительныеПараметры.НомерСтраницыРазделаОтчета;
	ТекущийРазделОтчетаСокрНаим = ДополнительныеПараметры.ТекущийРазделОтчетаСокрНаим;
	флЗначенияИдентичны = ДополнительныеПараметры.флЗначенияИдентичны;
	
	РегламентированнаяОтчетностьКлиент.ПоказатьСтраницыОтчетаНаКлиенте(ЭтаФорма);
	
	Если НЕ флЗначенияИдентичны Тогда
		Модифицированность = Истина;
		
		СформироватьДеревоРазделовОтчетаНаСервере();
		
		Если НЕ ТекущийРазделОтчетаСокрНаим = Неопределено Тогда
			
			НайденнаяСтрока = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(
				РазделыОтчета.ПолучитьЭлементы(), "КолонкаРазделыОтчетаСокрНаим", ТекущийРазделОтчетаСокрНаим);
			
			Если НЕ НайденнаяСтрока = Неопределено И НЕ НомерСтраницыРазделаОтчета = Неопределено
				И НайденнаяСтрока.ПолучитьЭлементы().Количество() > 0 Тогда
				
				НайденнаяСтрока = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(
				НайденнаяСтрока.ПолучитьЭлементы(), "КолонкаНомерСтраницыРазделаОтчета", НомерСтраницыРазделаОтчета);
				
			КонецЕсли;
			
			Если НЕ НайденнаяСтрока = Неопределено Тогда
				
				Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяСтрока.ПолучитьИдентификатор();
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВвестиПоказатель(Элемент, Область, КодПоказателя, Знач ЭтоСумма, Знач ТекстВыбора, ТаблицаВыбора, СтандартнаяОбработка, КолонкаПоиска = "Код") Экспорт
	
	Если ТаблицаВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	Если Область.Имя = КодПоказателя ИЛИ РегламентированнаяОтчетностьКлиентСервер.ПоказательВходитВМногострочнуюЧасть(ЭтаФорма, КодПоказателя) > 0 Тогда
		ИсходноеЗначение = ?(ТипЗнч(Область.Значение) = Тип("Строка"), СокрЛП(Область.Значение), Область.Значение);
		
	Иначе
		Разделитель = ?(Лев(Область.Имя, СтрДлина(КодПоказателя) + 1) = КодПоказателя + "_", "_", "");
		ИндексОбласти = 1;
		ИсходноеЗначение = "";
		Пока ЭтаФорма[ТекущийЭлемент.Имя].Области.Найти(КодПоказателя + Разделитель + Формат(ИндексОбласти, "ЧГ=")) <> Неопределено Цикл
			ИсходноеЗначение = ИсходноеЗначение + Строка(ЭтаФорма[ТекущийЭлемент.Имя].Области[КодПоказателя + Разделитель + Формат(ИндексОбласти, "ЧГ=")].Значение);
			ИндексОбласти = ИндексОбласти + 1;
		КонецЦикла;
		ИсходноеЗначение = СокрЛП(ИсходноеЗначение);
	КонецЕсли;
		
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Заголовок",          ТекстВыбора);
	ПараметрыФормы.Вставить("ТаблицаЗначений",    ТаблицаВыбора);
	ПараметрыФормы.Вставить("СтруктураДляПоиска", Новый Структура(КолонкаПоиска, ИсходноеЗначение));
	
	ДополнительныеПараметры = Новый Структура("ИндексОбласти, КодПоказателя, КолонкаПоиска, Область, Разделитель", ИндексОбласти, КодПоказателя, КолонкаПоиска, Область, Разделитель);
	ОписаниеОповещения = Новый ОписаниеОповещения("ВвестиПоказательЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ОткрытьФорму("Обработка.ОбщиеОбъектыРеглОтчетности.Форма.ФормаВыбораЗначенияИзТаблицы", ПараметрыФормы, ЭтаФорма,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ВвестиПоказательЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	ИндексОбласти = ДополнительныеПараметры.ИндексОбласти;
	КодПоказателя = ДополнительныеПараметры.КодПоказателя;
	КолонкаПоиска = ДополнительныеПараметры.КолонкаПоиска;
	Область = ДополнительныеПараметры.Область;
	Разделитель = ДополнительныеПараметры.Разделитель;
	
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	//если показатель входит в состав многострочной части, тогда имя области не будет совпадать с переданным кодом показателя
	//необходимо это учесть
	//считаем, что в многострочной части не может быть показателя, состоящего из нескольких ячеек
	Если Область.Имя = КодПоказателя ИЛИ РегламентированнаяОтчетностьКлиентСервер.ПоказательВходитВМногострочнуюЧасть(ЭтаФорма, КодПоказателя) > 0 Тогда
		Область.Значение = РезультатВыбора[КолонкаПоиска];
	Иначе
		СтрокаРезультатВыбора = Строка(РезультатВыбора[КолонкаПоиска]);
		Для Инд = СтрДлина(СтрокаРезультатВыбора) + 1 По ИндексОбласти - 1 Цикл
			СтрокаРезультатВыбора = " " + РезультатВыбора[КолонкаПоиска];
		КонецЦикла;
		Для Инд = 1 По ИндексОбласти - 1 Цикл
			ЭтаФорма[ТекущийЭлемент.Имя].Области[КодПоказателя + Разделитель + Формат(Инд, "ЧГ=")].Значение = СокрЛП(Сред(РезультатВыбора[КолонкаПоиска], Инд, 1));
		КонецЦикла;
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗаголовокОтчетности()
	
	// Расшифровка содержит разделы за разные периоды в зависимости от требований вызвавшего объекта.
	// Конкретный период в заголовке не указывается.
	СтруктураРеквизитовФормы.СтрПериодОтчета = "";
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьСведенияОПоказателяхОтчета()
	
	СтруктураРеквизитовФормы.Вставить("АвтозаполняемыеПоказатели", Новый Структура);
	
	ПараметрыОтчета = Новый Структура;
	
	АвтозаполняемыеПоказатели =
		РегламентированнаяОтчетностьПереопределяемый.ПолучитьСведенияОПоказателяхОтчета(
		Сред(Лев(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, ".Форма.") - 1), 7),
		Сред(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, ".Форма.") + 7), ПараметрыОтчета);
	
	Если АвтозаполняемыеПоказатели.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураРеквизитовФормы.Вставить("АвтозаполняемыеПоказатели", АвтозаполняемыеПоказатели);
	
КонецПроцедуры

&НаСервере
Процедура СкрытьЭлементыУдаленияСтраницы()
	
	ОблУдалитьСтраницу = ТабличныйДокумент.Области.Найти("УдалитьСтраницуЗначок");
	Если ОблУдалитьСтраницу <> Неопределено Тогда
		ОблУдалитьСтраницу.Текст = "";
		ОблУдалитьСтраницу.Гиперссылка = Ложь;
	КонецЕсли;
	
	ОблУдалитьСтраницу = ТабличныйДокумент.Области.Найти("УдалитьСтраницу");
	Если ОблУдалитьСтраницу <> Неопределено Тогда
		ОблУдалитьСтраницу.Текст = "";
		ОблУдалитьСтраницу.Гиперссылка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПерейтиНаСегментОтчета(ИмяРаздела, ИмяКомандыПерехода)
	
	ВыборкаСегментов = ОбъектОтчета().ВыборкаСегментовОтчетаПоСчетуПериоду(ИмяРаздела,
		НеотображаемыеПоказатели.Счет, НеотображаемыеПоказатели.ДатаНачалаПериода, НеотображаемыеПоказатели.ДатаКонцаПериода,
		СсылкаНаОтчет());
	ВсегоСегментов = ВыборкаСегментов.Количество();
	
	АктивныйСегмент = СтруктураРеквизитовФормы.АктивныйСегмент;
	
	Если ИмяКомандыПерехода = "НавигацияПервый"
	   И АктивныйСегмент <> 1 Тогда
		СформироватьВывестиСекциюОтчета(ИмяРаздела, 1);
	КонецЕсли;
	
	Если ИмяКомандыПерехода = "НавигацияПредыдущий"
	   И АктивныйСегмент > 1 Тогда
		СформироватьВывестиСекциюОтчета(ИмяРаздела, АктивныйСегмент - 1);
	КонецЕсли;
	
	Если ИмяКомандыПерехода = "НавигацияСледующий"
	   И АктивныйСегмент < ВсегоСегментов Тогда
		СформироватьВывестиСекциюОтчета(ИмяРаздела, АктивныйСегмент + 1);
	КонецЕсли;
	
	Если ИмяКомандыПерехода = "НавигацияПоследний"
	   И АктивныйСегмент <> ВсегоСегментов Тогда
		СформироватьВывестиСекциюОтчета(ИмяРаздела, ВсегоСегментов);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьВывестиСекциюОтчета(ИмяРаздела, НомерСекции)
	
	ДеревоДанныхРаздела = ПолучитьИзВременногоХранилища(
		СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяРаздела]);
	
	ТекВетка = ДеревоДанныхРаздела;
	Для Каждого НомерСтроки Из СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела Цикл
		ТекВетка = ТекВетка.Строки[НомерСтроки - 1];
	КонецЦикла;
	
	Шаблон = ОбъектОтчета().МакетРаздела(ИмяФормы, ИмяРаздела);
	МакетРаздела = Новый ТабличныйДокумент;
	
	МакетРазделаСПараметрами = Новый Структура;
	МакетРазделаСПараметрами.Вставить("МакетРаздела", МакетРаздела);
	
	Если ИмяРаздела = "АнализСчета" Тогда
		СформироватьСекциюАнализаСчета(МакетРазделаСПараметрами, Шаблон, ТекВетка, НомерСекции);
	КонецЕсли;
	
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(МакетРаздела);
	СтруктураРеквизитовФормы.АктивныйСегмент = НомерСекции;
	
КонецПроцедуры

&НаСервере
Функция РазделАвтозаполняется(ИмяРаздела)
	
	РазделАвтозаполняется = ИмяРаздела <> "Титульный";
	
	Возврат РазделАвтозаполняется;
	
КонецФункции

#Область ПолучателиОтчета

&НаСервере
Процедура ВывестиОбластьПолучатели(Шаблон, МакетРаздела, Получатели)
	
	Если НЕ ЗначениеЗаполнено(Получатели) Тогда
		Возврат;
	КонецЕсли;
	
	Область_Получатели                                    = Шаблон.ПолучитьОбласть("ПолучателиОтчета");
	Область_Получатели.Параметры.ПредставлениеПолучателей = ПредставлениеПолучателей(Получатели);
	Область_Получатели.Параметры.Получатели               = Получатели;
	
	Если Получатели.Количество() <= 3 Тогда
		// Уберем гиперссылку, подчеркивание и выделение цветом, а также признак обработки расшифровки,
		// т.к. все банки выведены сразу.
		Ячейка = Область_Получатели.Область("Получатели");
		Ячейка.Гиперссылка = Ложь;
		Ячейка.ЦветТекста  = Новый Цвет();
		Ячейка.Шрифт       = Новый Шрифт(Ячейка.Шрифт, , , , , Ложь);
		Ячейка.ИспользованиеРасшифровки = ИспользованиеРасшифровкиТабличногоДокумента.БезОбработки;
	КонецЕсли;
	
	МакетРаздела.Вывести(Область_Получатели);
	
КонецПроцедуры

&НаСервере
Функция НаименованияБанков(Банки)

	// В отчете используются и сохраняются только строковые наименования банков-получателей,
	// ссылки на банки не храним, т.к. они могут быть из неразделенного справочника,
	// поэтому при выгрузке/загрузке между областями в модели сервиса могут изменяться.

	Результат = Новый Массив;
	
	Если НЕ ЗначениеЗаполнено(Банки) Тогда
		Возврат Результат;
	КонецЕсли;
	
	РеквизитыБанков = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(Банки, "Наименование");
	Для каждого Банк Из Банки Цикл
		РеквизитБанка = РеквизитыБанков[Банк];
		Если РеквизитБанка = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Результат.Добавить(РеквизитБанка.Наименование);
	КонецЦикла;
	
	Возврат Результат;

КонецФункции

&НаСервере
Функция ПредставлениеПолучателей(НаименованияПолучателей)

	Если НЕ ЗначениеЗаполнено(НаименованияПолучателей) Тогда
		Возврат "";
	КонецЕсли;
	
	Если НаименованияПолучателей.Количество() <= 3 Тогда
		Возврат СтрСоединить(НаименованияПолучателей, ", ");
	
	Иначе
	
		КоличествоПолучателей = НаименованияПолучателей.Количество();
		ТекстПолучатели = СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(
			НСтр("ru=';%1 банк;;%1 банка;%1 банков;%1 банка'"), КоличествоПолучателей);
	
		Возврат ТекстПолучатели;
	
	КонецЕсли;

КонецФункции

&НаКлиенте
Процедура ПоказатьПолучателейОтчета(Область)
	
	Если Область.ИспользованиеРасшифровки = ИспользованиеРасшифровкиТабличногоДокумента.БезОбработки Тогда
		// Обработка расшифровки не требуется.
		Возврат;
	КонецЕсли;
	
	ПолучателиОтчета = Область.Расшифровка;
	
	Если НЕ ЗначениеЗаполнено(ПолучателиОтчета) Тогда
		Возврат;
	КонецЕсли;
	
	// Открываем форму для отображения получателей отчета.
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ПолучателиОтчета", ПолучателиОтчета);
	
	ОткрытьФорму("Отчет.РасшифровкиБухгалтерскойОтчетности.Форма.ПолучателиОтчета", ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ОповеститьОСохраненииОтчетности()
	
	Оповестить("Запись_РасшифровкиБухгалтерскойОтчетности", СтруктураРеквизитовФормы.мСохраненныйДок, ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ОтметитьВНовомОтчетеРазделыДляОтображения()

	// Если в списке страниц отчетов по бухгалтерским счетам отмечены какие-либо строки,
	// то включаем для них соответствующие страницы в мДеревоСтраницОтчета.

	ИменаСписковСтраниц = Новый Массив;
	ИменаСписковСтраниц.Добавить("АнализСчета");
	ИменаСписковСтраниц.Добавить("ОперацииПоБанковскимСчетам");

	Отбор = Новый Структура("Включен", Истина);

	ДеревоСтраниц = РеквизитФормыВЗначение("мДеревоСтраницОтчета");
	ЕстьИзменения = Ложь;

	Для Каждого ИмяРаздела Из ИменаСписковСтраниц Цикл
	
		НайденныеСтроки = ЭтотОбъект["СписокСтраниц" + ИмяРаздела].НайтиСтроки(Отбор);
		Если НайденныеСтроки.Количество() > 0 Тогда
			СтрокаРаздела = ДеревоСтраниц.Строки.Найти(ИмяРаздела, "ИмяСтраницы", Истина);
			Если СтрокаРаздела <> Неопределено Тогда
				СтрокаРаздела.ПоказатьСтраницу = 1;
				ЕстьИзменения = Истина;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
		
	Если ЕстьИзменения Тогда
		ЗначениеВРеквизитФормы(ДеревоСтраниц, "мДеревоСтраницОтчета");
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ИнициализироватьСписокСтраниц(ИмяРаздела)
	
	СписокСтраниц = ЭтотОбъект["СписокСтраниц" + ИмяРаздела];
	СписокСтраниц.Очистить();
	
	// В новом отчете заполняем сразу список периодов, за который требуется формирование анализа счета.
	// Для ранее записанных отчетов список периодов будет восстановлен из сохраненных данных.
	СписокОтчетов = Параметры.СписокОтчетов;
	Если НЕ ЗначениеЗаполнено(СписокОтчетов) Тогда
		Возврат;
	КонецЕсли;
	
	ОбновитьСписокСтраницРаздела(ИмяРаздела, СписокОтчетов);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьРазделыПослеВосстановленияСохраненныхДанных()

	// При открытии ранее сохраненного отчета может быть передан обновленный список разделов отчета и их параметров,
	// который затребован получателями с учетом изменений списка самих получателей отчета и т.п.
	//
	// Если такой список передан, то добавляем новые разделы из списка и исключаемые ненужные,
	// чтобы привести состав разделов к требуемому виду.
	СписокОтчетов = Параметры.СписокОтчетов;
	
	Если НЕ ЗначениеЗаполнено(СписокОтчетов) Тогда
		// Новый список отчетов не передан при открытии, ничего не меняем.
		Возврат;
	КонецЕсли;
	
	ИменаРазделов = Новый Массив;
	ИменаРазделов.Добавить("АнализСчета");
	ИменаРазделов.Добавить("ОперацииПоБанковскимСчетам");
	
	ЕстьИзменения = Ложь;
	
	Для каждого ИмяРаздела Из ИменаРазделов Цикл
		Если ОбновитьСписокСтраницРаздела(ИмяРаздела, СписокОтчетов) Тогда
			ЕстьИзменения = Истина;
		КонецЕсли;
	КонецЦикла;
	
	// Перестраиваем данные отдельных разделов отчета, если есть изменения в списке счетов.
	Если ЕстьИзменения Тогда
		ОтчетОбъект = ОбъектОтчета();
		ОтчетОбъект.СформироватьДанныеМногоуровневыхРазделов(ЭтотОбъект);
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ОбновитьСписокСтраницРаздела(ИмяРаздела, СписокОтчетов)
	
	Если НЕ ЗначениеЗаполнено(СписокОтчетов) Тогда
		// Новый список отчетов не передан при открытии, ничего не меняем.
		Возврат Ложь;
	КонецЕсли;
	
	ОтборСчет   = Новый Структура("Счет");
	ОтборПериод = Новый Структура("ДатаНачалаПериода, ДатаКонцаПериода");
	
	ЕстьИзменения = Ложь;
	
	// В реквизитах формы таблица Периоды может быть заполнена не для всех счетов.
	// В этом случае при использовании РеквизитФормыВЗначение() она не будет содержать колонки.
	// Поэтому создадим шаблон таблицы с колонкам.
	ТипДата = ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя);
	
	ШаблонПериоды = Новый ТаблицаЗначений;
	ШаблонПериоды.Колонки.Добавить("ДатаНачалаПериода", ТипДата);
	ШаблонПериоды.Колонки.Добавить("ДатаКонцаПериода",  ТипДата);
	ШаблонПериоды.Колонки.Добавить("Банки",             Новый ОписаниеТипов("ФиксированныйМассив"));
	
	// Вспомогательные колонки, которые используются только в текущей процедуре для актуализации состав счетов.
	ШаблонПериоды.Колонки.Добавить("Включен",           Новый ОписаниеТипов("Булево")); // Запоминаем периоды, которые отображались ранее.
	ШаблонПериоды.Колонки.Добавить("КоличествоМесяцев", Новый ОписаниеТипов("Число"));
	ШаблонПериоды.Колонки.Добавить("ПорядокСортировки", Новый ОписаниеТипов("Число"));
	
	СписокСтраниц = РеквизитФормыВЗначение("СписокСтраниц" + ИмяРаздела);
	
	// Сбросим отметку у ранее включенных в отчет счетов.
	Для каждого СтрокаСпискаСтраниц Из СписокСтраниц Цикл
		СтрокаСпискаСтраниц.Включен = Ложь;
		
		Если ТипЗнч(СтрокаСпискаСтраниц.Периоды) <> Тип("ТаблицаЗначений")
			ИЛИ СтрокаСпискаСтраниц.Периоды.Колонки.Количество() = 0 Тогда
			СтрокаСпискаСтраниц.Периоды = ШаблонПериоды.СкопироватьКолонки();
		Иначе
			ПериодыПоСчету = ШаблонПериоды.СкопироватьКолонки();
			ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(СтрокаСпискаСтраниц.Периоды, ПериодыПоСчету);
			СтрокаСпискаСтраниц.Периоды = ПериодыПоСчету;
		КонецЕсли;
		
	КонецЦикла;
	
	// Ищем разделы из списка переданных отчетов в списке ранее заполненных.
	Для каждого ОписаниеОтчета Из СписокОтчетов Цикл
		Если ОписаниеОтчета.ВидОтчета <> ИмяРаздела Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОписаниеОтчета.Счет) Тогда
			Продолжить;
		КонецЕсли;
		
		ОтборСчет.Счет  = ОписаниеОтчета.Счет;
		НайденныеСтроки = СписокСтраниц.НайтиСтроки(ОтборСчет);
		
		Если НайденныеСтроки.Количество() = 0 Тогда
			// Создаем строку с новым счетом.
			СвойстваСчета = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ОписаниеОтчета.Счет, "Код, Наименование");
			
			СтрокаСпискаСтраниц              = СписокСтраниц.Добавить();
			СтрокаСпискаСтраниц.Включен      = Истина;
			СтрокаСпискаСтраниц.Счет         = ОписаниеОтчета.Счет;
			СтрокаСпискаСтраниц.Наименование = СтрШаблон(НСтр("ru = '%1 %2'"), СвойстваСчета.Код, СвойстваСчета.Наименование);
			
			СтрокаСпискаСтраниц.Периоды      = ШаблонПериоды.СкопироватьКолонки();
			СтрокаПериода                    = ДобавитьПериодОтчета(СтрокаСпискаСтраниц, ОписаниеОтчета);
			СтрокаПериода.Включен            = Истина;
			
			ЕстьИзменения = Истина;
			
		Иначе
			// Отмечаем счет как используемый.
			СтрокаСпискаСтраниц              = НайденныеСтроки[0];
			СтрокаСпискаСтраниц.Включен      = Истина;
			
			// Ищем периоды в списке периодов.
			ОтборПериод.ДатаНачалаПериода = НачалоМесяца(ОписаниеОтчета.ДатаНачала);
			ОтборПериод.ДатаКонцаПериода  = КонецМесяца(ОписаниеОтчета.ДатаОкончания);
			
			НайденныеПериоды = СтрокаСпискаСтраниц.Периоды.НайтиСтроки(ОтборПериод);
			Если НайденныеПериоды.Количество() = 0 Тогда
				// Добавляем новый период.
				СтрокаПериода         = ДобавитьПериодОтчета(СтрокаСпискаСтраниц, ОписаниеОтчета);
				СтрокаПериода.Включен = Истина;
				
				ЕстьИзменения = Истина;
			Иначе
				// Отмечаем, что период используется.
				СтрокаПериода         = НайденныеПериоды[0];
				СтрокаПериода.Включен = Истина;
				
				НаименованияБанков = НаименованияБанков(ОписаниеОтчета.Банки);
				Если НЕ МассивыСовпадают(СтрокаПериода.Банки, НаименованияБанков) Тогда
					// обновляем банки, для которых требуется такой отчетный период.
					СтрокаПериода.Банки = Новый ФиксированныйМассив(НаименованияБанков);
					ЕстьИзменения       = Истина;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Рассчитаем порядок сортировки и удалим неиспользуемые периоды.
	Для Каждого СтрокаСпискаСтраниц Из СписокСтраниц Цикл
		Индекс = СтрокаСпискаСтраниц.Периоды.Количество();
		Пока Индекс > 0 Цикл
			Индекс = Индекс - 1;
			СтрокаПериода = СтрокаСпискаСтраниц.Периоды[Индекс];
			
			Если НЕ СтрокаПериода.Включен Тогда
				// Удалим неиспользуемый период.
				СтрокаСпискаСтраниц.Периоды.Удалить(Индекс);
				ЕстьИзменения = Истина;
				Продолжить;
			КонецЕсли;
			
			СтрокаПериода.КоличествоМесяцев = 
				КоличествоМесяцев(СтрокаПериода.ДатаНачалаПериода, КонецДня(СтрокаПериода.ДатаКонцаПериода) + 1);
			
			НачалоПолугодия1 = НачалоГода(СтрокаПериода.ДатаНачалаПериода);
			КонецПолугодия1 = КонецМесяца(ДобавитьМесяц(НачалоПолугодия1, 6));
			НачалоПолугодия2 = КонецПолугодия1 + 1;
			КонецПолугодия2 = КонецГода(НачалоПолугодия2);
			
			Если СтрокаПериода.ДатаНачалаПериода = НачалоКвартала(СтрокаПериода.ДатаНачалаПериода)
			   И СтрокаПериода.ДатаКонцаПериода = КонецКвартала(СтрокаПериода.ДатаКонцаПериода) Тогда
				// Отчеты за квартал.
				СтрокаПериода.ПорядокСортировки = 3;
				
			ИначеЕсли СтрокаПериода.ДатаНачалаПериода = НачалоПолугодия1 И СтрокаПериода.ДатаКонцаПериода = КонецПолугодия1
				ИЛИ СтрокаПериода.ДатаНачалаПериода = НачалоПолугодия2 И СтрокаПериода.ДатаКонцаПериода = КонецПолугодия2 Тогда
				// Отчеты за полугодие.
				СтрокаПериода.ПорядокСортировки = 6;
				
			ИначеЕсли СтрокаПериода.ДатаНачалаПериода = НачалоГода(СтрокаПериода.ДатаНачалаПериода)
				И Месяц(СтрокаПериода.ДатаКонцаПериода) = 9 Тогда
				// Отчеты за 9 месяцев.
				СтрокаПериода.ПорядокСортировки = 9;
				
			ИначеЕсли СтрокаПериода.ДатаНачалаПериода = НачалоГода(СтрокаПериода.ДатаНачалаПериода)
				И Месяц(СтрокаПериода.ДатаКонцаПериода) = 12 Тогда
				// Отчеты за год.
				СтрокаПериода.ПорядокСортировки = 12;
				
			КонецЕсли;
			
			// Заменим все массивы с банками на фиксированные, чтобы их можно было загрузить в реквизиты формы.
			Если ТипЗнч(СтрокаПериода.Банки) = Тип("Массив") Тогда
				СтрокаПериода.Банки = Новый ФиксированныйМассив(СтрокаПериода.Банки);
			КонецЕсли;
			
		КонецЦикла;
		
		// Сортируем так, чтобы вначале шли периоды, некратные стандартным периодам (квартал, полугодие и т.п.)
		// в порядке возвратания количества месяцев в периоде, а по потом кратные стандартным периодам.
		СтрокаСпискаСтраниц.Периоды.Сортировать("ПорядокСортировки, КоличествоМесяцев, ДатаНачалаПериода, ДатаКонцаПериода");
		
	КонецЦикла;
	
	// Запоминаем обновленный список.
	СписокСтраниц.Сортировать("Наименование");
	ЗначениеВРеквизитФормы(СписокСтраниц, "СписокСтраниц" + ИмяРаздела);
	
	Возврат ЕстьИзменения;
	
КонецФункции

&НаСервере
Функция ДобавитьПериодОтчета(СтрокаСпискаСтраниц, ОтчетЗаемщика)

	СтрокаПериода                   = СтрокаСпискаСтраниц.Периоды.Добавить();
	СтрокаПериода.ДатаНачалаПериода = НачалоМесяца(ОтчетЗаемщика.ДатаНачала);
	СтрокаПериода.ДатаКонцаПериода  = КонецМесяца(ОтчетЗаемщика.ДатаОкончания);
	СтрокаПериода.Банки             = Новый ФиксированныйМассив(НаименованияБанков(ОтчетЗаемщика.Банки));

	Возврат СтрокаПериода;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция МассивыСовпадают(Массив1, Массив2)

	Если Массив1.Количество() <> Массив2.Количество() Тогда
		Возврат Ложь;
	КонецЕсли;

	Для каждого ИскомыйЭлемент Из Массив1 Цикл
		Если Массив2.Найти(ИскомыйЭлемент) = Неопределено Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;

	Для каждого ИскомыйЭлемент Из Массив2 Цикл
		Если Массив1.Найти(ИскомыйЭлемент) = Неопределено Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;

	Возврат Истина;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция КоличествоМесяцев(Дата1, Дата2)

	Если НЕ ЗначениеЗаполнено(Дата1)
		ИЛИ НЕ ЗначениеЗаполнено(Дата2)
		ИЛИ Дата2 <= Дата1 Тогда
		Возврат 0;
	КонецЕсли;

	Результат = (Год(Дата2) - Год(Дата1)) * 12 + (Месяц(Дата2) - Месяц(Дата1));

	Если День(Дата1) > День(Дата2) Тогда
		Результат = Результат - 1;
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

&НаКлиенте
Функция ПараметрыОжидания()
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтаФорма);
	ПараметрыОжидания.ТекстСообщения = НСтр("ru = 'Отчет формируется.'");
	
	Возврат ПараметрыОжидания;
	
КонецФункции

#КонецОбласти
