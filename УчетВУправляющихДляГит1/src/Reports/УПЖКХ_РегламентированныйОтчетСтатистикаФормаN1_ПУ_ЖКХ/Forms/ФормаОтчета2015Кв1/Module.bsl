
////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

#Область ОбработчикиСобытийФормы

&НаСервере
// Обработчик события "ПриСозданииНаСервере" формы.
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	СформироватьСтруктуруРеквизитовФормы();
	
	СтруктураРеквизитовФормы.СписокПечатаемыхЛистов = Новый СписокЗначений;
	
	// ОПИСАНИЕ ПАРМЕТРОВ ФОРМЫ
	//
	// Версия формы
	СтруктураРеквизитовФормы.мВерсияФормы = "19/08/2015";
	СтруктураРеквизитовФормы.мКодОтчета   = "0609204";
	// Код отчета, равен коду по ОКУД
	СтруктураРеквизитовФормы.мПечатныеФормы = Новый СписокЗначений;
	
	ПолеТабличногоДокументаФормаОтчета.Вывести(Отчеты[Сред(Лев(ЭтаФорма.ИмяФормы, Найти(ЭтаФорма.ИмяФормы, ".Форма.") - 1), 7)].ПолучитьМакет("ФормаОтчета2015Кв1_ФормаОтчета"));
	
	СтруктураРеквизитовФормы.мВыбраннаяФорма          = Параметры.мВыбраннаяФорма;
	СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета  = Параметры.мДатаКонцаПериодаОтчета;
	СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета = Параметры.мДатаНачалаПериодаОтчета;
	СтруктураРеквизитовФормы.мПериодичность           = Параметры.мПериодичность;
	СтруктураРеквизитовФормы.мСкопированаФорма        = Параметры.мСкопированаФорма;
	СтруктураРеквизитовФормы.мСохраненныйДок          = Параметры.мСохраненныйДок;
	СтруктураРеквизитовФормы.Организация              = Параметры.Организация;
	СтруктураРеквизитовФормы.Ответственный            = Параметры.Ответственный;
	
	ДатаПодписи = ТекущаяДатаСеанса();
	
	СтруктураРеквизитовФормы.СправочникиВидыКонтактнойИнформацииПочтовыйАдресОрганизации = 
		Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресОрганизации;
	Инициализация(Параметры.БезОткрытияФормы);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриОткрытии" формы.
Процедура ПриОткрытии(Отказ)
		
	Если Найти(Заголовок, СтруктураРеквизитовФормы.СтрПериодОтчета) = 0 Тогда
		Заголовок = Заголовок + " " + СтруктураРеквизитовФормы.СтрПериодОтчета;
	КонецЕсли;
	
	ОргСтр = " (" + СтруктураРеквизитовФормы.НаимОрганизации + ")";
	Если Найти(Заголовок, ОргСтр) = 0 Тогда
		Заголовок = Заголовок + ОргСтр;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПередЗакрытием" формы.
//
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	УПЖКХ_ТиповыеМетодыКлиент.ПередЗакрытиемРегламентированногоОтчета(ЭтаФорма, Отказ, СтандартнаяОбработка, ЗавершениеРаботы, ТекстПредупреждения);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриЗакрытии" формы.
//
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	ПриЗакрытииНаСервере();
	
КонецПроцедуры

#КонецОбласти 

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
// Обработчик события "ПриИзменении" поля "ДатаПодписи".
Процедура ДатаПодписиПриИзменении(Элемент)
	
	ПолеТабличногоДокументаФормаОтчета.Области.ДатаСоставленияОтчета.Значение = 
		Формат(ДатаПодписи, "ДФ=""дд ММММ гггг 'г.'""");
	
	ЗаполнитьСведенияОбОрганизацииНаКлиенте(Истина);
	
	Модифицированность = Истина;	
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля "ВидДокументаПредставление".
Процедура ВидДокументаПредставлениеПриИзменении(Элемент)
	
	УПЖКХ_ТиповыеМетодыКлиент.ПриИзмененииВидаДокументаИКорректировки(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "Очистка" поля "ВидДокументаПредставление".
Процедура ВидДокументаПредставлениеОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

// Обработчик события "Выбор" поля "ПолеТабличногоДокументаФормаОтчета".
&НаКлиенте
Процедура ПолеТабличногоДокументаФормаОтчетаВыбор(Элемент, Область, СтандартнаяОбработка)
	
	Если Область.Имя = "ОргАдрес" Тогда
		
		СтандартнаяОбработка = Ложь;
		
		// Подготавливаем сведения об адресах из базы.
		Сведения = Новый СписокЗначений;
		Сведения.Добавить("", "АдрЮР");     
		Сведения.Добавить("", "АдрФакт");
		Адреса = УПЖКХ_ТиповыеМетодыВызовСервера.ПолучитьСведенияОбОрганизации(ЭтаФорма.СтруктураРеквизитовФормы.Организация, ЭтаФорма.ДатаПодписи, Сведения);
		
		// Формируем дополнительные параметры для передаци в асинхронные обработки.
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("Область", Область);
		ДополнительныеПараметры.Вставить("Адреса",  Адреса);
		
		Если Не Адреса.АдрЮР = Адреса.АдрФакт Тогда
			
			// Если юридический и фактический адреса различны, прелагаем выбор редактируемого адреса.
			Список = Новый СписокЗначений;
			Список.Добавить(Адреса.АдрЮР,   "Юридический адрес");
			Список.Добавить(Адреса.АдрФакт, "Фактический адрес");
			
			ОповещениеПослеВыбораЭлемента = Новый ОписаниеОповещения("ПолеТабличногоДокументаФормаОтчетаВыборЗавершение", ЭтаФорма, ДополнительныеПараметры);
			ПоказатьВыборИзСписка(ОповещениеПослеВыбораЭлемента, Список, Элемент);
			
		Иначе
			
			ДополнительныеПараметры.Вставить("Адрес", Адреса.АдрЮР);
			ПолеТабличногоДокументаФормаОтчетаВыборПродолжение(ДополнительныеПараметры);
			
		КонецЕсли;
		
	КонецЕсли;
           
КонецПроцедуры

&НаКлиенте
// Завершение обработчика события "Выбор" поля "ПолеТабличногоДокументаФормаОтчета".
Процедура ПолеТабличногоДокументаФормаОтчетаВыборЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	// Обработка выброра редактируемого адреса.
	Если ТипЗнч(Результат) = Тип("ЭлементСпискаЗначений") Тогда
		Если Результат.Значение = ДополнительныеПараметры.Адреса.АдрЮР Тогда
			
			ДополнительныеПараметры.Вставить("Адрес", ДополнительныеПараметры.Адреса.АдрЮР);
			ПолеТабличногоДокументаФормаОтчетаВыборПродолжение(ДополнительныеПараметры);
			
		Иначе
			
			ДополнительныеПараметры.Вставить("Адрес", ДополнительныеПараметры.Адреса.АдрФакт);
			ПолеТабличногоДокументаФормаОтчетаВыборПродолжение(ДополнительныеПараметры);
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Продолжение обработчика события "Выбор" поля "ПолеТабличногоДокументаФормаОтчета".
Процедура ПолеТабличногоДокументаФормаОтчетаВыборПродолжение(ДополнительныеПараметры)
	
	// Подготавливаем данные для открытия формы ввода адреса.
	ЗначенияПолей = Новый СписокЗначений;
	
	СтруктураАдреса = УПЖКХ_ТиповыеМетодыКлиентСервер.РазложитьАдрес(ДополнительныеПараметры.Адрес);
	
	Если НЕ СтруктураАдреса = Неопределено Тогда
		
		ЗначенияПолей.Добавить(СтруктураАдреса.Индекс,          "Индекс");
		ЗначенияПолей.Добавить(СтруктураАдреса.Регион,          "Регион");
		ЗначенияПолей.Добавить(СтруктураАдреса.Район,           "Район");
		ЗначенияПолей.Добавить(СтруктураАдреса.Город,           "Город");
		ЗначенияПолей.Добавить(СтруктураАдреса.НаселенныйПункт, "НаселенныйПункт");
		ЗначенияПолей.Добавить(СтруктураАдреса.Улица,           "Улица");
		ЗначенияПолей.Добавить(СтруктураАдреса.Дом,             "Дом");
		ЗначенияПолей.Добавить(СтруктураАдреса.Корпус,          "Корпус");
		ЗначенияПолей.Добавить(СтруктураАдреса.Квартира,        "Квартира");
		
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("АдресТолькоРоссийский",   Истина);
	ПараметрыФормы.Вставить("Заголовок",               "Ввод адреса");
	ПараметрыФормы.Вставить("ЗначенияПолей",           ЗначенияПолей);
	ПараметрыФормы.Вставить("Представление",           УПЖКХ_ТиповыеМетодыКлиентСервер.ПредставлениеАдресаВФормате9Запятых(ДополнительныеПараметры.Адрес));
	ПараметрыФормы.Вставить("ВидКонтактнойИнформации", СтруктураРеквизитовФормы.СправочникиВидыКонтактнойИнформацииПочтовыйАдресОрганизации);
	
	Оповещение = Новый ОписаниеОповещения("ОткрытьФормуКонтактнойИнформацииЗавершение", ЭтаФорма, ДополнительныеПараметры);
	
	ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеКонтактнойИнформациейКлиент").ОткрытьФормуКонтактнойИнформации(ПараметрыФормы, , , , Оповещение);
	
КонецПроцедуры

&НаКлиенте
// Завершение открытия формы адреса обработчика события "Выбор" поля "ПолеТабличногоДокументаФормаОтчета".
Процедура ОткрытьФормуКонтактнойИнформацииЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	// Обработка заполнения табличного документа и сохранения выбранного значения адреса с настройках формы.
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		
		Если ДополнительныеПараметры.Адреса.АдрЮР = ДополнительныеПараметры.Адреса.АдрФакт Тогда
			
			АдресВОтчете = Результат.Представление;
			
		Иначе
			
			Если ДополнительныеПараметры.Адрес = ДополнительныеПараметры.Адреса.АдрФакт Тогда
				АдресВОтчете = УПЖКХ_ТиповыеМетодыКлиентСервер.ПредставлениеАдресаВФормате9Запятых(ДополнительныеПараметры.Адреса.АдрЮР) + " / " + Результат.Представление;
			Иначе
				АдресВОтчете = Результат.Представление + " / " + УПЖКХ_ТиповыеМетодыКлиентСервер.ПредставлениеАдресаВФормате9Запятых(ДополнительныеПараметры.Адреса.АдрФакт);
			КонецЕсли;
			
		КонецЕсли;
		
		ПолеТабличногоДокументаФормаОтчета.Области.ОргАдрес.Значение = АдресВОтчете;
		СтруктураРеквизитовФормы.мАдресвФорматеДляВыгрузки = АдресВОтчете;
			
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры
// Конец обработчика события "Выбор" поля "ПолеТабличногоДокументаФормаОтчета".

&НаКлиенте
// Обработчик события "ПриИзмененииСодержимогоОбласти" поля "ПолеТабличногоДокументаФормаОтчета".
Процедура ПолеТабличногоДокументаФормаОтчетаПриИзмененииСодержимогоОбласти(Элемент, Область)
	
	Если Область.СодержитЗначение И Область.ТипЗначения.СодержитТип(Тип("Число")) Тогда
		Если Область.Значение = 0 И Область.ТипЗначения.КвалификаторыЧисла.РазрядностьДробнойЧасти = 0
		  И Область.ТипЗначения.КвалификаторыЧисла.Разрядность > 4 Тогда
			
			ФорматПредставленияНуля = ПолучитьПредставлениеНуляИзСтрокиФормата(Область.Формат);
			
			ОтображениеНуля = СокрЛП(Формат(0, ЗаменитьПредставлениеНуляВСтрокеФормата(Область.Формат, "ЧН=")));
			Если ПустаяСтрока(ОтображениеНуля) Тогда
				ОтображениеНуля = "0";
			КонецЕсли;
			ТипСтрокиЗаполнения = Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(СтрДлина(ОтображениеНуля),
														ДопустимаяДлина.Фиксированная));
			СтрокаЗаполнения = ТипСтрокиЗаполнения.ПривестиЗначение();
			
			Список = Новый СписокЗначений;
			Список.Добавить("ЧН=' '", "  <Пустое значение>    " + СтрокаЗаполнения);
			Список.Добавить("ЧН=" + ОтображениеНуля, "  Отображать как """ + ОтображениеНуля + """  ");
			
			НайденнаяСтрока = Список.НайтиПоЗначению(ФорматПредставленияНуля);
			
			ДополнительныеПараметры = Новый Структура("Область, Элемент", Область, Элемент); 
			ОписаниеОповещения = Новый ОписаниеОповещения("ПолеТабличногоДокументаФормаОтчетаПриИзмененииСодержимогоОбластиЗавершение", ЭтотОбъект, ДополнительныеПараметры);
						
			// Обход ошибок платформы: в тонком клиенте не работает ПоказатьВыборИзСписка (ПоказатьВыборИзМеню не работает в веб-клиенте 
			// и в событии ПриИзмененииСодержимогоОбласти табличного документа - где мы его и хотим использовать прежде всего).
			# Если ВебКлиент Тогда
			
				Если НайденнаяСтрока = Неопределено Тогда
					ПоказатьВыборИзСписка(ОписаниеОповещения, Список, Элемент);
				Иначе
					ПоказатьВыборИзСписка(ОписаниеОповещения, Список, Элемент, НайденнаяСтрока);
				КонецЕсли;
			
			#Иначе
				
				Список.ПоказатьВыборЭлемента(ОписаниеОповещения, "Выберите значение", Элемент);
				
			#КонецЕсли
			
			Возврат;
			
		КонецЕсли;
	КонецЕсли;
	
	Модифицированность = Истина;
	
 КонецПроцедуры

&НаКлиенте
// Процедура - обработчик оповещения выбора из списка при изменении содержимого области поля табличного документа.
Процедура ПолеТабличногоДокументаФормаОтчетаПриИзмененииСодержимогоОбластиЗавершение(СписокЭлемент, ДополнительныеПараметры) Экспорт
	
	Область = ДополнительныеПараметры.Область;
	Элемент = ДополнительныеПараметры.Элемент;
	
	Если СписокЭлемент <> Неопределено  Тогда
		
		Область.Формат = ЗаменитьПредставлениеНуляВСтрокеФормата(Область.Формат, СписокЭлемент.Значение);
		
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля "НомерКорректировки".
Процедура НомерКорректировкиПриИзменении(Элемент)
	
	Модифицированность = Истина;
	
КонецПроцедуры

#КонецОбласти 

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

#Область ОбработчикиКомандФормы

&НаКлиенте
// Обработчик нажатия кнопки "Заполнить".
//
Процедура ЗаполнитьОтчет(Команда)
	
	Оповещение = Новый ОписаниеОповещения("ЗаполнитьОтчетЗавершение", ЭтотОбъект);
	ПоказатьВопрос(Оповещение, "Перед автозаполнением произойдет очистка отчета. Продолжить?", РежимДиалогаВопрос.ДаНет, 0, КодВозвратаДиалога.Да);
	
КонецПроцедуры
 
&НаКлиенте
// Завершение обработчика нажатия кнопки "Заполнить".
//
Процедура ЗаполнитьОтчетЗавершение(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		ОчиститьОтчет(Ложь);
		ЗаполнитьАвто();
		
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьОтчетЗавершение()

&НаКлиенте
// Процедура вызывается при нажатии кнопки "Очистить".
Процедура КомандаОчиститьОтчет(Команда)
	
	ОчиститьОтчет();
	
КонецПроцедуры

&НаКлиенте
// Процедура вызывается при нажатии кнопки "Обновить".
Процедура Обновить(Команда)
	
	СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация = Истина;
	ЗаполнитьСведенияОбОрганизацииНаКлиенте();
	СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация = Ложь;
	Модифицированность = Истина;	
	
КонецПроцедуры

&НаКлиенте
// Процедура вызывается при нажатии кнопки "СохранитьОтчет".
Процедура СохранитьОтчет(Команда)
	
	СохранитьНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
// Процедура вызывается при нажатии кнопки "ПечататьСразу".
Процедура ПечататьСразу(Команда)
	
	Если Команда <> Неопределено Тогда
		Печать(Команда.Имя);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура вызывается при нажатии кнопки "ПоказатьБланк".
Процедура ПоказатьБланк(Команда)
	
	Если Команда <> Неопределено Тогда
		Печать(Команда.Имя);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура вызывается при нажатии кнопки "ОткрытьФормуНастроек".
Процедура ОткрытьФормуНастроек(Команда)
	
	ОткрытьФорму("Отчет.УПЖКХ_РегламентированныйОтчетСтатистикаФормаN1_ПУ_ЖКХ.Форма.НастройкиОтчета");
	
КонецПроцедуры

#КонецОбласти 

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

#Область ПроцедурыИФункцииОбщегоНазначения

&НаСервереБезКонтекста
// Формирует структуру данных об ответственном.
//
// Параметры:
//  ДатаКонцаПериодаОтчета - Дата - конец отчетного периода.
//  Организация            - СправочникСсылка.Организации - текущая организация.
//  Ответственный          - ПеречислениеСсылка.ОтветственныеЛицаОрганизаций - ответственный.
//
// Возвращаемое значение:
//  СведенияОбОтветственном - Структура - структура данных об отвественном.
//
 Функция ПолучитьСведенияОбОтветственном(ДатаКонцаПериодаОтчета, Организация, Ответственный)
	
	СведенияОбОтветственном = Новый Структура;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ОтветственныеЛицаОрганизацийСрезПоследних.ФизическоеЛицо.ФИО КАК ФИОИсп,
	|	ОтветственныеЛицаОрганизацийСрезПоследних.Должность.Наименование КАК ДолжнИсп,
	|	МАКСИМУМ(ЕСТЬNULL(ФизическиеЛицаКонтактнаяИнформация.НомерТелефона, """")) КАК ТелИсп,
	|	МАКСИМУМ(ЕСТЬNULL(ФизическиеЛицаКонтактнаяИнформация.АдресЭП, """")) КАК EmailИсп
	|ИЗ
	|	РегистрСведений.ОтветственныеЛицаОрганизаций.СрезПоследних(
	|			&ДатаКон,
	|			СтруктурнаяЕдиница ССЫЛКА Справочник.Организации
	|				И СтруктурнаяЕдиница = &Организация
	|				И ОтветственноеЛицо = &Ответственный) КАК ОтветственныеЛицаОрганизацийСрезПоследних
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица.КонтактнаяИнформация КАК ФизическиеЛицаКонтактнаяИнформация
	|		ПО ОтветственныеЛицаОрганизацийСрезПоследних.ФизическоеЛицо = ФизическиеЛицаКонтактнаяИнформация.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ОтветственныеЛицаОрганизацийСрезПоследних.ФизическоеЛицо.ФИО,
	|	ОтветственныеЛицаОрганизацийСрезПоследних.Должность.Наименование";
	
	Запрос.УстановитьПараметр("ДатаКон",       ДатаКонцаПериодаОтчета);
	Запрос.УстановитьПараметр("Организация",   Организация);
	Запрос.УстановитьПараметр("Ответственный", Ответственный);
	
	Результат = Запрос.Выполнить().Выбрать();
	
	Пока Результат.Следующий() Цикл
		СведенияОбОтветственном.Вставить("ФИОИсп",   Результат.ФИОИсп);
		СведенияОбОтветственном.Вставить("ДолжнИсп", Результат.ДолжнИсп);
		СведенияОбОтветственном.Вставить("ТелИсп",   Результат.ТелИсп);
		СведенияОбОтветственном.Вставить("EmailИсп", Результат.EmailИсп);
	КонецЦикла;
	
	Возврат СведенияОбОтветственном;
	
КонецФункции // ПолучитьСведенияОбОтветственном()

&НаСервере
// Обрабатывает событие "ПриЗакрытии" на сервере.
Процедура ПриЗакрытииНаСервере()
	
	СохранитьДеревоСтраницОтчета(СтруктураРеквизитовФормы.мСохраненныйДок);
	
	УПЖКХ_ТиповыеМетодыСервер.ПриЗакрытииРегламентированногоОтчета(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
// Процедура формирует структуру рквизитов формы.
Процедура СформироватьСтруктуруРеквизитовФормы()
	
	СтруктураРеквизитовФормы = Новый Структура;
	СтруктураРеквизитовФормы.Вставить("ВидДокумента");
	СтруктураРеквизитовФормы.Вставить("ЕдиницаИзмерения");
	СтруктураРеквизитовФормы.Вставить("мАдресвФорматеДляВыгрузки");
	СтруктураРеквизитовФормы.Вставить("мВариант");
	СтруктураРеквизитовФормы.Вставить("мВерсияФормы");
	СтруктураРеквизитовФормы.Вставить("мВПрограммеИзмененаОрганизация");
	СтруктураРеквизитовФормы.Вставить("мВыбраннаяФорма");
	СтруктураРеквизитовФормы.Вставить("мДатаКонцаПериодаОтчета");
	СтруктураРеквизитовФормы.Вставить("мДатаНачалаПериодаОтчета");
	СтруктураРеквизитовФормы.Вставить("мЗаписываетсяНовыйДокумент");	
	СтруктураРеквизитовФормы.Вставить("мЗаписьЗапрещена");	
	СтруктураРеквизитовФормы.Вставить("мКодОтчета");
	СтруктураРеквизитовФормы.Вставить("мПериодичность");
	СтруктураРеквизитовФормы.Вставить("мПечатныеФормы");	
	СтруктураРеквизитовФормы.Вставить("мСкопированаФорма");	
	СтруктураРеквизитовФормы.Вставить("мСохраненныйДок");	
	СтруктураРеквизитовФормы.Вставить("Организация");
	СтруктураРеквизитовФормы.Вставить("Ответственный");
	СтруктураРеквизитовФормы.Вставить("СправочникиВидыКонтактнойИнформацииПочтовыйАдресОрганизации");	
	СтруктураРеквизитовФормы.Вставить("ТочностьЕдиницыИзмерения");
	СтруктураРеквизитовФормы.Вставить("СтрПериодОтчета");
	СтруктураРеквизитовФормы.Вставить("НаимОрганизации");
	СтруктураРеквизитовФормы.Вставить("СписокПечатаемыхЛистов");	
	СтруктураРеквизитовФормы.Вставить("мСтрокаФормата");	
	СтруктураРеквизитовФормы.Вставить("мСчетчикСтраниц");
	СтруктураРеквизитовФормы.Вставить("мТаблицаСоответствияУслуг");
	СтруктураРеквизитовФормы.Вставить("ПериодФормыОтчета");
	
КонецПроцедуры

&НаСервере
// Производит начальное заполнение реквизитов отчета.
Процедура Инициализация(БезОткрытияФормы = Ложь)
	
	СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация = Ложь;

	ТекТабличноеПоле = ПолеТабличногоДокументаФормаОтчета;

	СтруктураРеквизитовФормы.ВидДокумента = 0;
	НомерКорректировки = 1;
	СтруктураРеквизитовФормы.мАдресвФорматеДляВыгрузки = "";
	ФормироватьСтруктуруСвойствСтраниц();

	Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда

		Если СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено Тогда
			// документ скопирован
			ВосстановитьСохраненныеДанные();
		КонецЕсли;

	Иначе

		// При открытии или при копировании сохраненного
		// отчета восстанавливаем сохраненные данные.
		ВосстановитьСохраненныеДанные();
		
		Если ЗначениеЗаполнено(СтруктураРеквизитовФормы.мСкопированаФорма) Тогда
			СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено;
		КонецЕсли;

	КонецЕсли;

	ТекТабличноеПоле.Области.ДатаСоставленияОтчета.Значение = Формат(ДатаПодписи, "ДФ=""дд ММММ гггг 'г.'""");
	ПоказатьПериод();
	ПоказатьПериодФормыОтчета();
	
	Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено
	  Или СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация Тогда
		ЗаполнитьСведенияОбОрганизацииНаСервере();
	КонецЕсли;
		
	СтруктураРеквизитовФормы.НаимОрганизации = СтруктураРеквизитовФормы.Организация.Наименование;
	
	ТекущийЭлемент = Элементы["ПолеТабличногоДокументаФормаОтчета"];
	ВидДокументаПредставление = ?(СтруктураРеквизитовФормы.ВидДокумента = 0, "Первичный", "Корректирующий");
	Элементы.НомерКорректировки.Доступность = (СтруктураРеквизитовФормы.ВидДокумента = 1);
	
КонецПроцедуры

&НаСервере
// Формирует дерево значений - структуру страниц отчета,
// содержащей настройки показа страниц, вывода на печать и выгрузки в ИФНС.
//
 Процедура ФормироватьСтруктуруСвойствСтраниц()

	мСвойстваРазделовДекларации.ПолучитьЭлементы().Очистить();
   	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();

	// Добавим св-ва Титульного листа
	СтрокаУровня1.ИмяСтраницы                          = "ФормаОтчета";
	СтрокаУровня1.МногострочностьВРазделе              = 0;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Ложь;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;

КонецПроцедуры

&НаСервере
Процедура ПоказатьПериод()
	
	// задаем заголовок формы
	СтруктураРеквизитовФормы.СтрПериодОтчета ="за 20" + Прав(Год(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета), 2) + " г.";
	
	ПолеТабличногоДокументаФормаОтчета.Области.ПериодОтчета.Значение = СтруктураРеквизитовФормы.СтрПериодОтчета;
	
КонецПроцедуры

&НаСервере
// Процедура выводит информацию о периодичности очета, если он формируется за полугодие - тогда "полугодовая",
// если за год - тогда годовая
//
Процедура ПоказатьПериодФормыОтчета()
	
	СтруктураРеквизитовФормы.ПериодФормыОтчета = "Годовая";
	
	Если Месяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) = 6 Тогда 
		СтруктураРеквизитовФормы.ПериодФормыОтчета = "Полугодовая";
	КонецЕсли;
	
	ПолеТабличногоДокументаФормаОтчета.Области.ПериодФормыОтчета.Значение = СтруктураРеквизитовФормы.ПериодФормыОтчета;
	
КонецПроцедуры // ПоказатьПериодФормыОтчета()


// Восстанавливает сохраненные данные отчета.
//
&НаСервере
Процедура ВосстановитьСохраненныеДанные()
	Перем ДанныеВариановАвтоЗаполнения;
	Перем ПоказателиОтчета;
	Перем ВерсияФормы;

	/// В случае, если формы была скопирована по F9, то проверим, не изменилась ли организация.
	Если СтруктураРеквизитовФормы.Организация <> СтруктураРеквизитовФормы.мСохраненныйДок.Организация
	   И СтруктураРеквизитовФормы.Организация <> УПЖКХ_ТиповыеМетодыКлиентСервер.ПустоеЗначениеТипа(
	   												"СправочникСсылка.Организации")
	   И СтруктураРеквизитовФормы.Организация <> Неопределено Тогда
		// Меняем переменную, для того, чтобы запустилась процедура ЗаполнитьСведенияОбОрганизации.
		СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация = Истина;
		//СтруктураРеквизитовФормы.мСохраненныйДок.Организация = СтруктураРеквизитовФормы.Организация;
	Иначе
		// восстанавливаем реквизиты отчета
		СтруктураРеквизитовФормы.Организация = СтруктураРеквизитовФормы.мСохраненныйДок.Организация;
	КонецЕсли;


	ДатаПодписи              = СтруктураРеквизитовФормы.мСохраненныйДок.ДатаПодписи;
	СтруктураРеквизитовФормы.ЕдиницаИзмерения         = СтруктураРеквизитовФормы.мСохраненныйДок.ЕдиницаИзмерения;
	СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = СтруктураРеквизитовФормы.мСохраненныйДок.ТочностьЕдиницыИзмерения;
	Комментарий              = СтруктураРеквизитовФормы.мСохраненныйДок.Комментарий;

	// восстанавливаем сохраненные данные отчета
	СписокСохранения = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить();
	
	// восстанавливаем сохраненные данные вариантов автозаполнения ячеек
	Если СписокСохранения.Свойство("ДанныеВариантовАвтоЗаполнения", ДанныеВариановАвтоЗаполнения) Тогда
		
		Если НЕ ДанныеВариановАвтоЗаполнения = Неопределено Тогда
			
			мСтруктураВариантыЗаполнения.Очистить();
			
			Для Каждого ЭлементСтруктуры Из ДанныеВариановАвтоЗаполнения Цикл
				
				мСтруктураВариантыЗаполнения.Вставить(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Ключ);
				
				ЭтаФорма["ТаблицаВариантыЗаполнения" + ЭлементСтруктуры.Ключ].Очистить();
				
				Для Каждого ЭлементМассива Из ЭлементСтруктуры.Значение Цикл
										
					ТаблВарЗаполнения = 
						ЭтаФорма["ТаблицаВариантыЗаполнения" + ЭлементСтруктуры.Ключ].Добавить().ТаблицаВариантовЗаполнения;
										
					ЗначениеВДанныеФормы(ЭлементМассива, ТаблВарЗаполнения);
					
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЕсли;
				 		
	КонецЕсли;

	// восстанавливаем версию формы
	СписокСохранения.Свойство("ВерсияФормы", ВерсияФормы);

	// восстановим сохраненные данные редактируемых ячеек
	СписокСохранения.Свойство( "ПоказателиОтчета", ПоказателиОтчета );
   
	Для Каждого ПоказателиСтраницы Из ПоказателиОтчета Цикл
		ИмяТекТабличноеПоле = ПоказателиСтраницы.Ключ;
		ТекТабличноеПоле    = ЭтаФорма[ИмяТекТабличноеПоле];
		ПоказателиТаблПоле  = ПоказателиСтраницы.Значение;

		Для Каждого Показатель Из ПоказателиТаблПоле Цикл
			ИмяПоказателя       = Показатель.Ключ;
			ЗначениеПоказателя  = Показатель.Значение;

			// установим значение в таблице
			Попытка
				Если Лев(ИмяПоказателя, 2) = "ЧН" Тогда
					// значение показателя с префиксом "ЧН" содержит формат представления нуля
					ОбластьПоказателя = ТекТабличноеПоле.Области[Сред(ИмяПоказателя, 3)];
					ОбластьПоказателя.Формат = ЗаменитьПредставлениеНуляВСтрокеФормата(ОбластьПоказателя.Формат, ЗначениеПоказателя);
					Продолжить;
				КонецЕсли;
				ТекТабличноеПоле.Области[ИмяПоказателя].Значение = ЗначениеПоказателя;
			Исключение
			КонецПопытки;
		КонецЦикла;
	КонецЦикла;
	
	СтруктураРеквизитовФормы.мАдресвФорматеДляВыгрузки = ПолеТабличногоДокументаФормаОтчета.Области.ОргАдрес.Значение;
	ПолеТабличногоДокументаФормаОтчета.Области.ОргАдрес.Значение = 
		УПЖКХ_ТиповыеМетодыКлиентСервер.ПредставлениеАдресаВФормате9Запятых(
			СтруктураРеквизитовФормы.мАдресвФорматеДляВыгрузки);

	УПЖКХ_ТиповыеМетодыСервер.ОперацииПриВосстановленииРегламентированногоОтчета(ЭтаФорма);

	Модифицированность = Ложь;
	
КонецПроцедуры

&НаСервере
// Процедура заполняет сведения об организации.
Процедура ЗаполнитьСведенияОбОрганизацииНаСервере(ВПрограммеИзмененаДатаПодписи = Ложь)
	
	ЗаполнитьСведенияОбОрганизации(ЭтаФорма, ВПрограммеИзмененаДатаПодписи);
		
КонецПроцедуры

// Процедура управляет выводом сведений о выбранной организации
// в соответствующие ячейки табличного документа.
//
// Параметры:
// ВПрограммеИзмененаДатаПодписи - Истина, если процедура запускается для обновления параметров завясящих
// от даты подписания документа, например ФИО должностных лиц.
//
&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьСведенияОбОрганизации(Форма, ВПрограммеИзмененаДатаПодписи = Ложь)

	Если (Форма.СтруктураРеквизитовФормы.Организация  = Неопределено)
	  Или (Форма.СтруктураРеквизитовФормы.Организация = 
	  		УПЖКХ_ТиповыеМетодыКлиентСервер.ПустоеЗначениеТипа("СправочникСсылка.Организации")) Тогда
		Возврат;
	КонецЕсли;

	Сведения = Новый СписокЗначений;

	Если НЕ ВПрограммеИзмененаДатаПодписи Тогда
		Сведения.Добавить("", "ИННЮЛ"); // ИНН
		Сведения.Добавить("", "ОКПО");  // ОКПО
		Сведения.Добавить("", "АдрЮР");     
		Сведения.Добавить("", "АдрФакт");
		Сведения.Добавить("", "НаимЮЛПол");
		Сведения.Добавить("", "ОснВидДеят");
		Сведения.Добавить("", "ОКПО");
	КонецЕсли;

	ОргСведения = УПЖКХ_ТиповыеМетодыВызовСервера.ПолучитьСведенияОбОрганизации(Форма.СтруктураРеквизитовФормы.Организация,
	                                                                            Форма.ДатаПодписи, Сведения);
	
	СведенияОбОтветственном = ПолучитьСведенияОбОтветственном(Форма.СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, 
	                                                          Форма.СтруктураРеквизитовФормы.Организация,
															  Форма.СтруктураРеквизитовФормы.Ответственный);
	
	Если СведенияОбОтветственном.Количество() > 0 Тогда
		ТелИсп   = СведенияОбОтветственном.ТелИсп;
		ДолжнИсп = СведенияОбОтветственном.ДолжнИсп;
		ФИОИсп   = СведенияОбОтветственном.ФИОИсп;
		EmailИсп = СведенияОбОтветственном.EmailИсп;
	Иначе
		ТелИсп   = "";
		ДолжнИсп = "";
		ФИОИсп   = "";
		EmailИсп = "";
	КонецЕсли;
	
	Если НЕ ВПрограммеИзмененаДатаПодписи Тогда
		
		ИННЮЛ = "";
		ОКПО = "";
		АдрЮР = "";     
		АдрФакт = "";
		НаимЮЛПол = "";
		ОснВидДеят = "";
		ОКПО = "";

	КонецЕсли;

	Если НЕ ВПрограммеИзмененаДатаПодписи Тогда

		ОргСведения.Свойство("ИННЮЛ",          ИННЮЛ);
		ОргСведения.Свойство("ОКПО",           ОКПО);
		ОргСведения.Свойство("АдрЮР",          АдрЮР);
		ОргСведения.Свойство("АдрФакт",        АдрФакт);
		ОргСведения.Свойство("НаимЮЛПол",      НаимЮЛПол);
		ОргСведения.Свойство("ОКПО",           ОКПО);

	КонецЕсли;

	Если ВПрограммеИзмененаДатаПодписи Тогда

		Форма.ПолеТабличногоДокументаФормаОтчета.Области.ОргИсполнитель.Значение  = ФИОИсп;
		Форма.ПолеТабличногоДокументаФормаОтчета.Области.ОргДолжностьИсп.Значение = ДолжнИсп;
		Форма.ПолеТабличногоДокументаФормаОтчета.Области.ОргТелефонИсп.Значение   = ТелИсп;
		Форма.ПолеТабличногоДокументаФормаОтчета.Области.ОргEmailИсп.Значение     = EmailИсп;
		Возврат;
		
	КонецЕсли;

	Если (НЕ ЗначениеЗаполнено(Форма.ПолеТабличногоДокументаФормаОтчета.Области.ОргКодОКПО.Значение))
	  ИЛИ (Форма.СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация) Тогда

		Если НЕ УПЖКХ_ТиповыеМетодыВызовСервера.ЭтоЮридическоеЛицо(Форма.СтруктураРеквизитовФормы.Организация) Тогда
			Форма.ПолеТабличногоДокументаФормаОтчета.Области.ОргКодОКПО.Значение = "";
		Иначе
			Форма.ПолеТабличногоДокументаФормаОтчета.Области.ОргКодОКПО.Значение = ОКПО;
		КонецЕсли;

	КонецЕсли;

	Если (НЕ ЗначениеЗаполнено(Форма.ПолеТабличногоДокументаФормаОтчета.Области.ОргНазв.Значение)) ИЛИ (Форма.СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация) Тогда
		
		НаимЮЛКр = ?(Форма.СтруктураРеквизитовФормы.НаимОрганизации = Неопределено, Форма.СтруктураРеквизитовФормы.Организация.НаименованиеСокращенное, Форма.СтруктураРеквизитовФормы.НаимОрганизации);
		Форма.ПолеТабличногоДокументаФормаОтчета.Области.ОргНазв.Значение = НаимЮЛПол + " (" + НаимЮЛКр + ")";
		
	КонецЕсли;

	Если (Форма.СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация)
	  Или (ПустаяСтрока(Форма.ПолеТабличногоДокументаФормаОтчета.Области.ОргАдрес.Значение)) Тогда

	  Если (ЗначениеЗаполнено(СтрЗаменить(АдрЮР, ",", "")) И ЗначениеЗаполнено(СтрЗаменить(АдрФакт, ",", ""))) Тогда
		  
		Если АдрЮР = АдрФакт Тогда
			Форма.ПолеТабличногоДокументаФормаОтчета.Области.ОргАдрес.Значение = 
				УПЖКХ_ТиповыеМетодыКлиентСервер.ПредставлениеАдресаВФормате9Запятых(АдрЮР);
			Форма.СтруктураРеквизитовФормы.мАдресвФорматеДляВыгрузки = АдрЮР;
		Иначе
			Адрес = УПЖКХ_ТиповыеМетодыКлиентСервер.ПредставлениеАдресаВФормате9Запятых(АдрЮР) + " / " + УПЖКХ_ТиповыеМетодыКлиентСервер.ПредставлениеАдресаВФормате9Запятых(АдрФакт);
			Форма.ПолеТабличногоДокументаФормаОтчета.Области.ОргАдрес.Значение = Адрес;
			Форма.СтруктураРеквизитовФормы.мАдресвФорматеДляВыгрузки = Адрес;
		КонецЕсли;
			
		Иначе
			Форма.ПолеТабличногоДокументаФормаОтчета.Области.ОргАдрес.Значение = "";
			Форма.СтруктураРеквизитовФормы.мАдресвФорматеДляВыгрузки = "";
		КонецЕсли;

	КонецЕсли;

	Если (НЕ ЗначениеЗаполнено(Форма.ПолеТабличногоДокументаФормаОтчета.Области.ОргИсполнитель.Значение))
	  ИЛИ (Форма.СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация) Тогда
		Форма.ПолеТабличногоДокументаФормаОтчета.Области.ОргИсполнитель.Значение = ФИОИсп;
	КонецЕсли;

	Если (НЕ ЗначениеЗаполнено(Форма.ПолеТабличногоДокументаФормаОтчета.Области.ОргДолжностьИсп.Значение))
	  ИЛИ (Форма.СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация) Тогда
		Форма.ПолеТабличногоДокументаФормаОтчета.Области.ОргДолжностьИсп.Значение = ДолжнИсп;
	КонецЕсли;

	Если (НЕ ЗначениеЗаполнено(Форма.ПолеТабличногоДокументаФормаОтчета.Области.ОргТелефонИсп.Значение))
	  ИЛИ (Форма.СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация) Тогда
		Форма.ПолеТабличногоДокументаФормаОтчета.Области.ОргТелефонИсп.Значение = ТелИсп;
	КонецЕсли;
	
	Если (НЕ ЗначениеЗаполнено(Форма.ПолеТабличногоДокументаФормаОтчета.Области.ОргEmailИсп.Значение))
	  ИЛИ (Форма.СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация) Тогда
		Форма.ПолеТабличногоДокументаФормаОтчета.Области.ОргEmailИсп.Значение = EmailИсп;
	КонецЕсли;

КонецПроцедуры

// Процедура очищает содержимое редактируемых и вычисляемых
// ячеек табличного документа.
//
&НаКлиенте
Процедура ОчиститьОтчет(ЗапрашиватьПодтверждение = Истина)
	
	Если ЗапрашиватьПодтверждение Тогда
		
		Оповещение = Новый ОписаниеОповещения("ОчиститьОтчетЗавершение", ЭтотОбъект);
		
		ТекстВопроса = УПЖКХ_ТиповыеМетодыКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Внимание! Будут очищены все показатели отчета.%1Продолжить операцию?'"), Символы.ПС);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 0, КодВозвратаДиалога.Да);
		
	Иначе
		
		Очистить();
		
	КонецЕсли;
	
КонецПроцедуры // ОчиститьОтчет()

&НаКлиенте
// Завершение обработчика нажатия кнопки "Заполнить".
//
Процедура ОчиститьОтчетЗавершение(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		Очистить();
		
	КонецЕсли;
	
КонецПроцедуры // ОчиститьОтчетЗавершение()

// Процедура очищает содержимое редактируемых и вычисляемых
// ячеек табличного документа.
//
&НаКлиенте
Процедура Очистить()
		
	ОчиститьТабличноеПолеНаСервере();

	// устанавливаем флаг модифицированности формы
	Модифицированность = Истина;	
	
КонецПроцедуры

&НаСервере
// Процедура очищает содержимое редактируемых и вычисляемых
// ячеек табличного документа на сервере.
Процедура ОчиститьТабличноеПолеНаСервере()
	
	ОчиститьТабличноеПоле(ЭтаФорма);
	
КонецПроцедуры

// Процедура очищает содержимое редактируемыхи и вычисляемых ячеек
// поля табличного документа, переданного параметром ВыбТабличноеПоле.
//
// Параметры:
//  ВыбТабличноеПоле - поле табличного документа.
//
&НаКлиентеНаСервереБезКонтекста
Процедура ОчиститьТабличноеПоле(Форма)
	
	// Список ячеек, очищать которые не нужно
	Перем СписокПоказателейНеПодлежащихОчистке;

	ВыбТабличноеПоле = Форма.ПолеТабличногоДокументаФормаОтчета;
	
	СписокПоказателейНеПодлежащихОчистке = Новый СписокЗначений;
	СписокПоказателейНеПодлежащихОчистке.Добавить("ОргНазв");
	СписокПоказателейНеПодлежащихОчистке.Добавить("ОргАдрес");
	СписокПоказателейНеПодлежащихОчистке.Добавить("ОргКодОКПО");
	СписокПоказателейНеПодлежащихОчистке.Добавить("ОргКод");
	СписокПоказателейНеПодлежащихОчистке.Добавить("ОргКодНазв");
	СписокПоказателейНеПодлежащихОчистке.Добавить("ОргКодНазв1");
	СписокПоказателейНеПодлежащихОчистке.Добавить("ОргКодЗнач");
	СписокПоказателейНеПодлежащихОчистке.Добавить("ОргКодЗнач1");
	СписокПоказателейНеПодлежащихОчистке.Добавить("ОргДолжностьИсп");
	СписокПоказателейНеПодлежащихОчистке.Добавить("ОргИсполнитель");
	СписокПоказателейНеПодлежащихОчистке.Добавить("ОргТелефонИсп");
	СписокПоказателейНеПодлежащихОчистке.Добавить("ОргEmailИсп");
	СписокПоказателейНеПодлежащихОчистке.Добавить("ДатаСоставленияОтчета");
	
	Для Инд = 0 По ВыбТабличноеПоле.Области.Количество() - 1 Цикл
		ТекущаяОбласть = ВыбТабличноеПоле.Области[Инд];
		
		// Ячейки не подлежащие очистки
		Если СписокПоказателейНеПодлежащихОчистке.НайтиПоЗначению(ТекущаяОбласть.Имя) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;

		Если Не ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			Продолжить;
		КонецЕсли;

		Если Не ТекущаяОбласть.СодержитЗначение Тогда
			Продолжить;
		КонецЕсли;

		Если ТекущаяОбласть.Защита Тогда
			Продолжить;
		КонецЕсли;

		ТекущаяОбласть.Очистить();
		ТекущаяОбласть.Формат = ЗаменитьПредставлениеНуляВСтрокеФормата(ТекущаяОбласть.Формат, "ЧН=' '");
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура СохранитьДеревоСтраницОтчета(Знач мСохраненныйДок)
	Если мСохраненныйДок <> Неопределено Тогда
				
		Если ТипЗнч(мСохраненныйДок) = Тип("ДокументСсылка.РегламентированныйОтчет") Тогда
			мСохраненныйДок = мСохраненныйДок.ПолучитьОбъект();
		КонецЕсли;
		
		Если Не мСохраненныйДок.ЭтоНовый() Тогда
			// Сохраняем выбранные листы для печати в хранилище
			ХранилищеДанных = Новый ХранилищеЗначения(РеквизитФормыВЗначение("мДеревоСтраницОтчета"));
			мСохраненныйДок.ДеревоНастройкиСтраниц = ХранилищеДанных;
			Попытка
				мСохраненныйДок.Записать();
			Исключение
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
// Процедура заполняет сведения об организации.
Процедура ЗаполнитьСведенияОбОрганизацииНаКлиенте(ВПрограммеИзмененаДатаПодписи = Ложь)
	
	ЗаполнитьСведенияОбОрганизации(ЭтаФорма, ВПрограммеИзмененаДатаПодписи);
		
КонецПроцедуры

 // Функция собирает значения редактирукемых ячеек +табличного документа
// в коллекцию значений типа "структура".
//
// Параметры:
//  ТабличноеПоле - поле табличного документа текущей формы.
//
// Возвращаемое значение:
//  Структура.
//
&НаКлиентеНаСервереБезКонтекста
Функция СобратьДанныеТекущегоТаблПоля(Форма, ИмяТабличногоПоля)

	ТабличноеПоле = Форма[ИмяТабличногоПоля];

	СтруктураДанныхПоля = Новый Структура;

	Для Инд = 0 По ТабличноеПоле.Области.Количество() - 1 Цикл
		ТекущаяОбласть = ТабличноеПоле.Области[Инд];

		Если Не ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			Продолжить;
		КонецЕсли;

		Если НЕ(ТекущаяОбласть.СодержитЗначение) Тогда
			Продолжить;
		КонецЕсли;

		ИмяПоказателя      = ТекущаяОбласть.Имя;
		ЗначениеПоказателя = ТекущаяОбласть.Значение;

		СтруктураДанныхПоля.Вставить(ИмяПоказателя, ЗначениеПоказателя);
		
		// Сохраним формат отображения нуля для восстановления представления
		// в поле табличного документа и контроля выгрузки показателя в формате XML.
		Если ТипЗнч(ЗначениеПоказателя) = Тип("Число") И ЗначениеПоказателя = 0 Тогда
			ФорматПредставленияНуля = ПолучитьПредставлениеНуляИзСтрокиФормата(ТекущаяОбласть.Формат);
			Если ЗначениеЗаполнено(ФорматПредставленияНуля) Тогда
				СтруктураДанныхПоля.Вставить("ЧН" + ИмяПоказателя, ФорматПредставленияНуля);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	СтруктураДанныхПоля.Вставить("ОргАдрес", Форма.СтруктураРеквизитовФормы.мАдресвФорматеДляВыгрузки);
	
	Возврат СтруктураДанныхПоля;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
// Получает представление нуля.
Функция ПолучитьПредставлениеНуляИзСтрокиФормата(СтрокаФормата)
	
	Если ПустаяСтрока(СтрокаФормата) Тогда
		Возврат "";
	КонецЕсли;
	
	СтрокаФорматаТекст = СтрЗаменить(СтрокаФормата, ";", Символы.ПС);
	Для НомерСтроки = 1 По СтрЧислоСтрок(СтрокаФорматаТекст) Цикл
		ПодстрокаФормата = СтрПолучитьСтроку(СтрокаФорматаТекст, НомерСтроки);
		Если Найти(ПодстрокаФормата, "ЧН=") > 0 Тогда
			Возврат СокрЛП(ПодстрокаФормата);
		КонецЕсли;
	КонецЦикла;
	
	Возврат "";
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
// Заменяеь представление нуля.
Функция ЗаменитьПредставлениеНуляВСтрокеФормата(СтрокаФормата, ПредставлениеНуля)
	
	НоваяСтрокаФормата = "";
	
	РазделительПодстрок = ";";
	СтрокаФорматаТекст = СтрЗаменить(СтрокаФормата, РазделительПодстрок, Символы.ПС);
	Для НомерСтроки = 1 По СтрЧислоСтрок(СтрокаФорматаТекст) Цикл
		ПодстрокаФормата = СокрЛП(СтрПолучитьСтроку(СтрокаФорматаТекст, НомерСтроки));
		Если ПустаяСтрока(ПодстрокаФормата) Тогда
			Продолжить;
		КонецЕсли;
		Если Найти(ПодстрокаФормата, "ЧН=") > 0 Тогда
			ПодстрокаФормата = ПредставлениеНуля;
		КонецЕсли;
		НоваяСтрокаФормата = 
			НоваяСтрокаФормата + ?(ПустаяСтрока(НоваяСтрокаФормата), "", РазделительПодстрок) + ПодстрокаФормата;
	КонецЦикла;
	
	Если ПустаяСтрока(НоваяСтрокаФормата) Тогда
		Возврат ПредставлениеНуля;
	КонецЕсли;

	Возврат НоваяСтрокаФормата;
	
КонецФункции

// СохранитьНаКлиенте()
&НаКлиенте
Процедура СохранитьНаКлиенте(Автосохранение = Ложь, ВыполняемоеОповещение = Неопределено) Экспорт
	
	Вариант = СтруктураРеквизитовФормы.ВидДокумента * НомерКорректировки;
	
	Если НЕ РегламентированнаяОтчетностьКлиент.ПриЗаписиРегламентированногоОтчетаНаКлиенте(ЭтаФорма, , Автосохранение, Вариант) Тогда
		Возврат;
	КонецЕсли;
	
	ПодобныйОтчетСуществует = Ложь;
	ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки = Ложь;
	
	// формируем данные редактируемых ячеек таблицы
	ПоказателиОтчета = Новый Структура();
	
	#Если ВебКлиент Тогда
		ЗаполнитьПоказателиОтчетаНаСервере(ПоказателиОтчета);
	#Иначе
		ЗаполнитьПоказателиОтчетаНаКлиенте(ПоказателиОтчета);
	#КонецЕсли
	
	РезультатСохранения = ПередСохранением(, ПодобныйОтчетСуществует, Вариант, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, Автосохранение, ПоказателиОтчета);
	
	ВидДокументаНомерКорректировкиИзменен = Неопределено;
	
	Если ПодобныйОтчетСуществует И Автосохранение Тогда
		Возврат;
	КонецЕсли;
	
	НуженВопросПередСохранением = (ПодобныйОтчетСуществует ИЛИ ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки);
	
	Если НуженВопросПередСохранением Тогда
		СохранитьНаКлиентеСВопросом(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, ПодобныйОтчетСуществует, ПоказателиОтчета);
	Иначе		
		ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения);		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНаКлиентеСВопросом(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, ПодобныйОтчетСуществует, ПоказателиОтчета)
	
	Если ПодобныйОтчетСуществует Тогда
		
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(КодВозвратаДиалога.Да, "Сохранить");
		Кнопки.Добавить(КодВозвратаДиалога.Нет, "Отмена");
		
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Отчет с видом %1 уже существует.
		|Сохранить отчет с таким же видом?'"), ?(Вариант = 0, """Первичный""", """Корректирующий/" + Вариант + """"));
		ДополнительныеПараметры = Новый Структура("Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, ПоказателиОтчета", Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, ПоказателиОтчета);
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросСохранитьОтчетСТакимЖеВидомЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, Кнопки, , Кнопки.Получить(1).Значение);
		
	Иначе
		
		СохранитьНаКлиентеСВопросомПродолжение(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, ПоказателиОтчета);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросСохранитьОтчетСТакимЖеВидомЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	Автосохранение = ДополнительныеПараметры.Автосохранение;
	Вариант = ДополнительныеПараметры.Вариант;
	ВыполняемоеОповещение = ДополнительныеПараметры.ВыполняемоеОповещение;
	ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки = ДополнительныеПараметры.ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки;
	ПоказателиОтчета = ДополнительныеПараметры.ПоказателиОтчета;
	
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		
		Возврат;
		
	КонецЕсли;
	
	СохранитьНаКлиентеСВопросомПродолжение(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, ПоказателиОтчета);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНаКлиентеСВопросомПродолжение(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, ПоказателиОтчета)
	
	Если ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки Тогда
		
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("ВидОтчета", Вариант);
		
		ФормаВопроса = РегламентированнаяОтчетностьКлиент.ПолучитьОбщуюФормуПоИмени("ВопросПриИзмененииВидаДокументаНомераКорректировки", ПараметрыФормы);
		
		ДополнительныеПараметры = Новый Структура("Автосохранение, Вариант, ВыполняемоеОповещение, ПоказателиОтчета", Автосохранение, Вариант, ВыполняемоеОповещение, ПоказателиОтчета);
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросПриИзмененииВидаДокументаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		
		ФормаВопроса.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
		ФормаВопроса.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		ФормаВопроса.Открыть();
		
	Иначе
		Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Сохраняется %1...'"), ЭтаФорма.Заголовок), , , БиблиотекаКартинок.Записать);
		РезультатСохранения = Сохранить(Автосохранение, , Вариант, Ложь, ПоказателиОтчета);
		ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПриИзмененииВидаДокументаЗавершение(КодВозврата, ДополнительныеПараметры) Экспорт
	
	Автосохранение = ДополнительныеПараметры.Автосохранение;
	Вариант = ДополнительныеПараметры.Вариант;
	ВыполняемоеОповещение = ДополнительныеПараметры.ВыполняемоеОповещение;
	ПоказателиОтчета = ДополнительныеПараметры.ПоказателиОтчета;
	
	Если КодВозврата = КодВозвратаДиалога.Да
		ИЛИ КодВозврата = КодВозвратаДиалога.Нет Тогда
		
		ВидДокументаНомерКорректировкиИзменен = ?(КодВозврата = КодВозвратаДиалога.Да, Истина, Ложь);
		
	Иначе
		
		Возврат;
		
	КонецЕсли;
	
	Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Сохраняется %1...'"), ЭтаФорма.Заголовок), , , БиблиотекаКартинок.Записать);
	РезультатСохранения = Сохранить(Автосохранение, , Вариант, ВидДокументаНомерКорректировкиИзменен, ПоказателиОтчета);
	ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения)
	
	КлючУникальности = СтруктураРеквизитовФормы.мСохраненныйДок;
	
	Если РезультатСохранения Тогда
		
		РегламентированнаяОтчетностьКлиент.ПослеЗаписиРегламентированногоОтчета(ЭтаФорма);
		
		Если ВыполняемоеОповещение <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ВыполняемоеОповещение);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры
// СохранитьНаКлиенте

&НаСервере
// Заполняет показатели отчета НаСервере.
Процедура ЗаполнитьПоказателиОтчетаНаСервере(ПоказателиОтчета)
	
	Префикс = "ПолеТабличногоДокумента";
	
	Для Каждого Группа из Элементы.Страницы.ПодчиненныеЭлементы Цикл
		
		Для Каждого ЭлементГруппы Из Группа.ПодчиненныеЭлементы Цикл 
			
			Если СтрЧислоВхождений(ЭлементГруппы.Имя, Префикс) = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			ПоказателиОтчета.Вставить(ЭлементГруппы.Имя, СобратьДанныеТекущегоТаблПоляНаСервере(ЭлементГруппы.Имя));
			
		КонецЦикла;
				
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
// Заполняет показатели отчета НаКлиенте.
Процедура ЗаполнитьПоказателиОтчетаНаКлиенте(ПоказателиОтчета)
	
	Префикс = "ПолеТабличногоДокумента";
	
	Для Каждого Группа из Элементы.Страницы.ПодчиненныеЭлементы Цикл
		
		Для Каждого ЭлементГруппы Из Группа.ПодчиненныеЭлементы Цикл 
			
			Если СтрЧислоВхождений(ЭлементГруппы.Имя, Префикс) = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			ПоказателиОтчета.Вставить(ЭлементГруппы.Имя, СобратьДанныеТекущегоТаблПоляНаКлиенте(ЭлементГруппы.Имя));
			
		КонецЦикла;
				
	КонецЦикла;
	
КонецПроцедуры

// ПередСохранением()
//
&НаСервере
Функция ПередСохранением(КодИФНС = "не применимо", ПодобныйОтчетСуществует, Вариант,
							ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, Автосохранение, ПоказателиОтчета)
	
	Если УПЖКХ_ТиповыеМетодыСервер.БылиИзмененыКлючевыеРеквизитыОтчета(ЭтаФорма, КодИФНС)
	   И УПЖКХ_ТиповыеМетодыСервер.СуществуетДокументСАналогичнымиРеквизитами(ЭтаФорма, КодИФНС) Тогда
		
		ПодобныйОтчетСуществует = Истина;
		
	КонецЕсли;
	
	СтруктураРеквизитовФормы.мЗаписываетсяНовыйДокумент = 
		(СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено
		 ИЛИ СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено);
	
	Если Вариант <> Неопределено
	   И ((СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено)
	   	  ИЛИ (СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено)
		  ИЛИ (Вариант <> СтруктураРеквизитовФормы.мВариант)) Тогда
		
		Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено
		  ИЛИ СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено Тогда
						
		ИначеЕсли Вариант <> СтруктураРеквизитовФормы.мВариант Тогда
			
			ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки = Истина;
								
		КонецЕсли;

	КонецЕсли;
	
	Если ПодобныйОтчетСуществует
	 ИЛИ ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки Тогда
	 
	 	Возврат Ложь;
		
 	КонецЕсли;
		
	Возврат Сохранить(Автосохранение, КодИФНС, Вариант, , ПоказателиОтчета);
		
КонецФункции

&НаКлиенте
// Собрирает данные текущего ТаблПоля НаКлиенте
Функция СобратьДанныеТекущегоТаблПоляНаКлиенте(ИмяТабличногоПоля)
	
	Возврат СобратьДанныеТекущегоТаблПоля(ЭтаФорма, ИмяТабличногоПоля);
	
КонецФункции

&НаСервере
// Собрирает данные текущего ТаблПоля НаСервере
Функция СобратьДанныеТекущегоТаблПоляНаСервере(ИмяТабличногоПоля)
	
	Возврат СобратьДанныеТекущегоТаблПоля(ЭтаФорма, ИмяТабличногоПоля);

КонецФункции

&НаСервере
// Сохраняет отчет на сервере.
Функция Сохранить(Автосохранение = Ложь, КодИФНС = "не применимо", Вариант,
					ВидДокументаНомерКорректировкиИзменен = Неопределено, ПоказателиОтчета)
	
	Если НЕ СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
		СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.ПолучитьОбъект();
	КонецЕсли;
			
	Если НЕ УПЖКХ_ТиповыеМетодыСервер.ПриЗаписиРегламентированногоОтчетаНаСервере(ЭтаФорма, КодИФНС, Автосохранение,
																						Вариант, ВидДокументаНомерКорректировкиИзменен, СтруктураРеквизитовФормы.мСохраненныйДок) Тогда
		СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
		Возврат Ложь;
	КонецЕсли;

	// установим текущие значения реквизитов документа
	СтруктураРеквизитовФормы.мСохраненныйДок.ИсточникОтчета           = Метаданные.Отчеты[Сред(Лев(ЭтаФорма.ИмяФормы,
																									Найти(ЭтаФорма.ИмяФормы, ".Форма.") - 1), 7)].Имя;
	СтруктураРеквизитовФормы.мСохраненныйДок.НаименованиеОтчета       = Метаданные.Отчеты[Сред(Лев(ЭтаФорма.ИмяФормы,
																									Найти(ЭтаФорма.ИмяФормы, ".Форма.") - 1), 7)].ОсновнаяФорма.Синоним;
	СтруктураРеквизитовФормы.мСохраненныйДок.ДатаНачала               = СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета;
	СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания            = СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета;
	СтруктураРеквизитовФормы.мСохраненныйДок.ВыбраннаяФорма           = СтруктураРеквизитовФормы.мВыбраннаяФорма;
	СтруктураРеквизитовФормы.мСохраненныйДок.Организация              = СтруктураРеквизитовФормы.Организация;
	СтруктураРеквизитовФормы.мСохраненныйДок.ДатаПодписи              = ДатаПодписи;
	СтруктураРеквизитовФормы.мСохраненныйДок.ЕдиницаИзмерения         = Неопределено;
	СтруктураРеквизитовФормы.мСохраненныйДок.Периодичность            = СтруктураРеквизитовФормы.мПериодичность;
	СтруктураРеквизитовФормы.мСохраненныйДок.ТочностьЕдиницыИзмерения = СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения;
	СтруктураРеквизитовФормы.мСохраненныйДок.ВидОтчетности			  = Перечисления.ВидыОтчетности.РегламентированнаяОтчетность;
	СтруктураРеквизитовФормы.мСохраненныйДок.Вид                      = Вариант;
	СтруктураРеквизитовФормы.мСохраненныйДок.ПредставлениеВида        = 
																		УПЖКХ_ТиповыеМетодыСервер.ПредставлениеВидаДокумента(
																			СтруктураРеквизитовФормы.мСохраненныйДок.Вид);
	СтруктураРеквизитовФормы.мВариант = Вариант;

	СтруктураРеквизитовФормы.мСохраненныйДок.Комментарий              = Комментарий;

	// формируем список сохранения
	СписокСохранения = Новый Структура();
	
	// вставляем данные редактируемых ячеек таблицы	
	СписокСохранения.Вставить("ПоказателиОтчета", ПоказателиОтчета);

	// вставляем данные многострочных разделов
	СписокСохранения.Вставить("ДанныеМногострочныхРазделов", Неопределено);

	// вставляем данные вариантов автозаполнения ячеек
	СписокСохранения.Вставить("ДанныеВариантовАвтоЗаполнения", Неопределено);

	// вствляем версию формы
	СписокСохранения.Вставить("ВерсияФормы", СтруктураРеквизитовФормы.мВерсияФормы);

	ХранилищеДанных = Новый ХранилищеЗначения(СписокСохранения);
	СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета = ХранилищеДанных;

	// записываем документ, хранящий данные отчета
	Попытка
		СтруктураРеквизитовФормы.мСохраненныйДок.Записать();
	Исключение
		
		Если НЕ Автосохранение Тогда
			
			Сообщение = Новый СообщениеПользователю;

			Сообщение.Текст = 
				УПЖКХ_ТиповыеМетодыКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"),
																			КВП_ПрочиеПроцедурыИФункции.СформироватьТекстСообщения(ОписаниеОшибки()));

			Сообщение.Сообщить();
				
		КонецЕсли;
		
		Возврат Ложь;
		
	КонецПопытки;
		
	Модифицированность   = Ложь;
	
	СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;

	Возврат Истина;

КонецФункции

// Процедура управляет выводом отчета на печать.
//
// Параметры:
//  ВидПечати - строка, задающая способ печати:
//              "ПоказатьБланк" - непосредственный вывод на печать;
//              "ПечататьСразу" - с предварительным просмотром.
//
&НаКлиенте
Процедура Печать(ВидПечати, НеИзФормыОтчета = Ложь)
	
	Состояние(УПЖКХ_ТиповыеМетодыКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1. Формируется печатная форма...'"),
																		 ЭтаФорма.Заголовок), , , БиблиотекаКартинок.Печать);
	
	Если НЕ ПечатьНаСервере(ВидПечати) Тогда
		Возврат;
	КонецЕсли;
	
	УПЖКХ_ТиповыеМетодыКлиент.ОткрытьФормуПредварительногоПросмотра(ЭтаФорма, ВидПечати, ,
																	СтруктураРеквизитовФормы.СписокПечатаемыхЛистов);
	
КонецПроцедуры

&НаСервере
// Процедура управляет выводом отчета на печать на сервере.
Функция ПечатьНаСервере(ВидПечати)
	
	Если НЕ УПЖКХ_ТиповыеМетодыСервер.ПринтерДоступен() Тогда
		
		Сообщение = Новый СообщениеПользователю;

		Сообщение.Текст = 
			НСтр("ru='Перед формированием печатных форм необходимо определить в системе принтер
				 | и задать его в качестве используемого по умолчанию!'");

		Сообщение.Сообщить();
		
		Возврат Ложь;
		
	КонецЕсли;
	
	СтруктураРеквизитовФормы.мПечатныеФормы.Очистить();
	
	ОбластиСтроки = Новый Структура;
	
	Для Каждого Обл Из ПолеТабличногоДокументаФормаОтчета.Области Цикл
		Если Обл.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Строки Тогда
			ОбластиСтроки.Вставить(Обл.Имя, ПолеТабличногоДокументаФормаОтчета.ПолучитьОбласть(Обл.Имя));
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Обл Из ОбластиСтроки Цикл
		ПечатнаяФорма = Новый ТабличныйДокумент();
		ПечатнаяФорма.ОтображатьЗаголовки = Ложь;
		ПечатнаяФорма.ОтображатьСетку     = Ложь;
		ПечатнаяФорма.ЧерноБелыйПросмотр  = Истина;
		ПечатнаяФорма.ЧерноБелаяПечать    = Истина;
		ПечатнаяФорма.Автомасштаб         = Истина;
		ПечатнаяФорма.ОриентацияСтраницы  = ОриентацияСтраницы.Ландшафт;
		ПечатнаяФорма.Вывести(Обл.Значение);
		СтруктураРеквизитовФормы.мПечатныеФормы.Добавить(ПечатнаяФорма, "Форма №1-ПУ (ЖКХ)");
	КонецЦикла;
	
	УПЖКХ_ТиповыеМетодыКлиентСервер.ПроставлениеНомеровЛистов(ЭтаФорма, ,СтруктураРеквизитовФормы.СписокПечатаемыхЛистов);
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти 

////////////////////////////////////////////////////////////////////////////////
// ФУНКЦИИ АВТОЗАПОЛНЕНИЯ

#Область ФункцииАвтозаполнения

// Процедура производит автозаполнение формы регламентированного отчета.
//
&НаСервере
Процедура ЗаполнитьАвто()
	
	СтруктураПараметров = УПЖКХ_ТиповыеМетодыВызовСервера.ХранилищеОбщихНастроекЗагрузить("СтатистикаФормаN1_ПУ_ЖКХ_НастройкиОтчета");
	
	Если ТипЗнч(СтруктураПараметров) = Тип("Структура") Тогда
		СтруктураРеквизитовФормы.мТаблицаСоответствияУслуг = 
			УПЖКХ_ТиповыеМетодыСервер.ТаблицаЗначенийВМассив(СтруктураПараметров.ТаблицаСоответствияУслуг);
	Иначе
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Не указаны настройки соответствия категорий услуг!" + Символы.ПС + 
														 "Для перехода к настройкам нажмите на кнопку ""Настройка"" командной панели.");
		Возврат;
	КонецЕсли;
	
	// Проверяем заполнение настроек соответствия категорий услуг.
	Если Не ЗаполненыНастройкиСоответствия() Тогда
		Возврат;
	КонецЕсли;
	
	НастройкиУчетнойПолитикиТСЖОтказ = Ложь;
	
	НастройкиУчетнойПолитикиТСЖ = 
		УПЖКХ_ОбщегоНазначенияСервер.ПолучитьПараметрыУчетнойПолитикиЖКХ(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,
																		 СтруктураРеквизитовФормы.Организация, НастройкиУчетнойПолитикиТСЖОтказ);
	
	Если НастройкиУчетнойПолитикиТСЖОтказ Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаСоответствия_КатегорийУслуг_С_УслугамиВБазе = ПолучитьТаблицуСоответствияКатегорийУслугСУслугамиВБазе();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КатегорииИУслуги.Категория,
	|	КатегорииИУслуги.УслугаВБазе КАК Услуга
	|ПОМЕСТИТЬ втКатегорииИУслуги
	|ИЗ
	|	&КатегорииИУслуги КАК КатегорииИУслуги
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УПЖКХ_СведенияДляВзаиморасчетовПоЛССрезПоследних.ЛицевойСчет.Адрес.Владелец.Многоквартирное КАК Многоквартирное,
	|	УПЖКХ_СведенияДляВзаиморасчетовПоЛССрезПоследних.ЛицевойСчет.Адрес.Владелец КАК Здание,
	|	УПЖКХ_СведенияДляВзаиморасчетовПоЛССрезПоследних.ЛицевойСчет.Адрес КАК Помещение,
	|	УПЖКХ_СведенияДляВзаиморасчетовПоЛССрезПоследних.ЛицевойСчет.Адрес.Подъезд КАК Подъезд,
	|	УПЖКХ_СведенияДляВзаиморасчетовПоЛССрезПоследних.ЛицевойСчет
	|ПОМЕСТИТЬ втВсеОбслуживаемыеОбъекты
	|ИЗ
	|	РегистрСведений.УПЖКХ_СведенияДляВзаиморасчетовПоЛС.СрезПоследних(&ДатаКон, Организация = &Организация) КАК УПЖКХ_СведенияДляВзаиморасчетовПоЛССрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_ЗакрепленныеСчетчикиСрезПоследних.Объект КАК Объект,
	|	КВП_ЗакрепленныеСчетчикиСрезПоследних.Счетчик.ВидУслуги КАК Услуга
	|ПОМЕСТИТЬ втОбъектыСоСчетчикамиНаКонецПериода
	|ИЗ
	|	РегистрСведений.КВП_ЗакрепленныеСчетчики.СрезПоследних(
	|			&ДатаКон,
	|			(Объект В
	|					(ВЫБРАТЬ
	|						втВсеОбслуживаемыеОбъекты.Здание
	|					ИЗ
	|						втВсеОбслуживаемыеОбъекты КАК втВсеОбслуживаемыеОбъекты)
	|				ИЛИ Объект В
	|					(ВЫБРАТЬ
	|						втВсеОбслуживаемыеОбъекты.Подъезд
	|					ИЗ
	|						втВсеОбслуживаемыеОбъекты КАК втВсеОбслуживаемыеОбъекты)
	|				ИЛИ Объект В
	|					(ВЫБРАТЬ
	|						втВсеОбслуживаемыеОбъекты.Помещение
	|					ИЗ
	|						втВсеОбслуживаемыеОбъекты КАК втВсеОбслуживаемыеОбъекты)
	|				ИЛИ Объект В
	|						(ВЫБРАТЬ
	|							втВсеОбслуживаемыеОбъекты.ЛицевойСчет
	|						ИЗ
	|							втВсеОбслуживаемыеОбъекты КАК втВсеОбслуживаемыеОбъекты))
	|				И Счетчик.ВидУслуги В
	|						(ВЫБРАТЬ
	|							втКатегорииИУслуги.Услуга
	|						ИЗ
	|							втКатегорииИУслуги КАК втКатегорииИУслуги)
	|				И ДатаИзменения <= &ДатаКон) КАК КВП_ЗакрепленныеСчетчикиСрезПоследних
	|ГДЕ
	|	(КВП_ЗакрепленныеСчетчикиСрезПоследних.Действует
	|			ИЛИ КВП_ЗакрепленныеСчетчикиСрезПоследних.ПричинаОтключения = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ПричиныОтключенияПриборовУчета.Поверка))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА втОбъектыСоСчетчикамиНаКонецПериода.Объект ССЫЛКА Справочник.КВП_Здания
	|			ТОГДА втОбъектыСоСчетчикамиНаКонецПериода.Объект
	|		КОГДА втОбъектыСоСчетчикамиНаКонецПериода.Объект ССЫЛКА Справочник.КВП_Подъезды
	|			ТОГДА втОбъектыСоСчетчикамиНаКонецПериода.Объект.Владелец
	|	КОНЕЦ КАК ДомМногоквартирное,
	|	втОбъектыСоСчетчикамиНаКонецПериода.Услуга
	|ПОМЕСТИТЬ втДомаМногоквартирноеНаКонецПериода
	|ИЗ
	|	втОбъектыСоСчетчикамиНаКонецПериода КАК втОбъектыСоСчетчикамиНаКонецПериода
	|ГДЕ
	|	ВЫБОР
	|			КОГДА втОбъектыСоСчетчикамиНаКонецПериода.Объект ССЫЛКА Справочник.КВП_Здания
	|				ТОГДА втОбъектыСоСчетчикамиНаКонецПериода.Объект.Многоквартирное
	|			КОГДА втОбъектыСоСчетчикамиНаКонецПериода.Объект ССЫЛКА Справочник.КВП_Подъезды
	|				ТОГДА втОбъектыСоСчетчикамиНаКонецПериода.Объект.Владелец.Многоквартирное
	|		КОНЕЦ
	|
	|СГРУППИРОВАТЬ ПО
	|	втОбъектыСоСчетчикамиНаКонецПериода.Услуга,
	|	ВЫБОР
	|		КОГДА втОбъектыСоСчетчикамиНаКонецПериода.Объект ССЫЛКА Справочник.КВП_Здания
	|			ТОГДА втОбъектыСоСчетчикамиНаКонецПериода.Объект
	|		КОГДА втОбъектыСоСчетчикамиНаКонецПериода.Объект ССЫЛКА Справочник.КВП_Подъезды
	|			ТОГДА втОбъектыСоСчетчикамиНаКонецПериода.Объект.Владелец
	|	КОНЕЦ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА втОбъектыСоСчетчикамиНаКонецПериода.Объект ССЫЛКА Справочник.УПЖКХ_Помещения
	|			ТОГДА втОбъектыСоСчетчикамиНаКонецПериода.Объект
	|		КОГДА втОбъектыСоСчетчикамиНаКонецПериода.Объект ССЫЛКА Справочник.КВП_ЛицевыеСчета
	|			ТОГДА втОбъектыСоСчетчикамиНаКонецПериода.Объект.Адрес
	|	КОНЕЦ КАК КвартираМногоквартирное,
	|	втОбъектыСоСчетчикамиНаКонецПериода.Услуга
	|ПОМЕСТИТЬ втКвартирыМногоквартирноеНаКонецПериода
	|ИЗ
	|	втОбъектыСоСчетчикамиНаКонецПериода КАК втОбъектыСоСчетчикамиНаКонецПериода
	|ГДЕ
	|	ВЫБОР
	|			КОГДА втОбъектыСоСчетчикамиНаКонецПериода.Объект ССЫЛКА Справочник.УПЖКХ_Помещения
	|				ТОГДА втОбъектыСоСчетчикамиНаКонецПериода.Объект.Владелец.Многоквартирное
	|			КОГДА втОбъектыСоСчетчикамиНаКонецПериода.Объект ССЫЛКА Справочник.КВП_ЛицевыеСчета
	|				ТОГДА втОбъектыСоСчетчикамиНаКонецПериода.Объект.Адрес.Владелец.Многоквартирное
	|		КОНЕЦ
	|
	|СГРУППИРОВАТЬ ПО
	|	втОбъектыСоСчетчикамиНаКонецПериода.Услуга,
	|	ВЫБОР
	|		КОГДА втОбъектыСоСчетчикамиНаКонецПериода.Объект ССЫЛКА Справочник.УПЖКХ_Помещения
	|			ТОГДА втОбъектыСоСчетчикамиНаКонецПериода.Объект
	|		КОГДА втОбъектыСоСчетчикамиНаКонецПериода.Объект ССЫЛКА Справочник.КВП_ЛицевыеСчета
	|			ТОГДА втОбъектыСоСчетчикамиНаКонецПериода.Объект.Адрес
	|	КОНЕЦ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА втОбъектыСоСчетчикамиНаКонецПериода.Объект ССЫЛКА Справочник.КВП_Здания
	|			ТОГДА втОбъектыСоСчетчикамиНаКонецПериода.Объект
	|		КОГДА втОбъектыСоСчетчикамиНаКонецПериода.Объект ССЫЛКА Справочник.КВП_Подъезды
	|			ТОГДА втОбъектыСоСчетчикамиНаКонецПериода.Объект.Владелец
	|		КОГДА втОбъектыСоСчетчикамиНаКонецПериода.Объект ССЫЛКА Справочник.УПЖКХ_Помещения
	|			ТОГДА втОбъектыСоСчетчикамиНаКонецПериода.Объект.Владелец
	|		КОГДА втОбъектыСоСчетчикамиНаКонецПериода.Объект ССЫЛКА Справочник.КВП_ЛицевыеСчета
	|			ТОГДА втОбъектыСоСчетчикамиНаКонецПериода.Объект.Адрес.Владелец
	|	КОНЕЦ КАК ДомНеМногоквартирное,
	|	втОбъектыСоСчетчикамиНаКонецПериода.Услуга
	|ПОМЕСТИТЬ втДомаНеМногоквартирноеНаКонецПериода
	|ИЗ
	|	втОбъектыСоСчетчикамиНаКонецПериода КАК втОбъектыСоСчетчикамиНаКонецПериода
	|ГДЕ
	|	ВЫБОР
	|			КОГДА втОбъектыСоСчетчикамиНаКонецПериода.Объект ССЫЛКА Справочник.КВП_Здания
	|				ТОГДА НЕ втОбъектыСоСчетчикамиНаКонецПериода.Объект.Многоквартирное
	|			КОГДА втОбъектыСоСчетчикамиНаКонецПериода.Объект ССЫЛКА Справочник.КВП_Подъезды
	|				ТОГДА НЕ втОбъектыСоСчетчикамиНаКонецПериода.Объект.Владелец.Многоквартирное
	|			КОГДА втОбъектыСоСчетчикамиНаКонецПериода.Объект ССЫЛКА Справочник.УПЖКХ_Помещения
	|				ТОГДА НЕ втОбъектыСоСчетчикамиНаКонецПериода.Объект.Владелец.Многоквартирное
	|			КОГДА втОбъектыСоСчетчикамиНаКонецПериода.Объект ССЫЛКА Справочник.КВП_ЛицевыеСчета
	|				ТОГДА НЕ втОбъектыСоСчетчикамиНаКонецПериода.Объект.Адрес.Владелец.Многоквартирное
	|		КОНЕЦ
	|
	|СГРУППИРОВАТЬ ПО
	|	втОбъектыСоСчетчикамиНаКонецПериода.Услуга,
	|	ВЫБОР
	|		КОГДА втОбъектыСоСчетчикамиНаКонецПериода.Объект ССЫЛКА Справочник.КВП_Здания
	|			ТОГДА втОбъектыСоСчетчикамиНаКонецПериода.Объект
	|		КОГДА втОбъектыСоСчетчикамиНаКонецПериода.Объект ССЫЛКА Справочник.КВП_Подъезды
	|			ТОГДА втОбъектыСоСчетчикамиНаКонецПериода.Объект.Владелец
	|		КОГДА втОбъектыСоСчетчикамиНаКонецПериода.Объект ССЫЛКА Справочник.УПЖКХ_Помещения
	|			ТОГДА втОбъектыСоСчетчикамиНаКонецПериода.Объект.Владелец
	|		КОГДА втОбъектыСоСчетчикамиНаКонецПериода.Объект ССЫЛКА Справочник.КВП_ЛицевыеСчета
	|			ТОГДА втОбъектыСоСчетчикамиНаКонецПериода.Объект.Адрес.Владелец
	|	КОНЕЦ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_ЗакрепленныеСчетчикиСрезПоследних.Объект КАК Объект,
	|	КВП_ЗакрепленныеСчетчикиСрезПоследних.Счетчик.ВидУслуги КАК Услуга
	|ПОМЕСТИТЬ втОбъектыСоСчетчикамиНачалоПериода
	|ИЗ
	|	РегистрСведений.КВП_ЗакрепленныеСчетчики.СрезПоследних(
	|			&ДатаНач,
	|			(Объект В
	|					(ВЫБРАТЬ
	|						втВсеОбслуживаемыеОбъекты.Здание
	|					ИЗ
	|						втВсеОбслуживаемыеОбъекты КАК втВсеОбслуживаемыеОбъекты)
	|				ИЛИ Объект В
	|					(ВЫБРАТЬ
	|						втВсеОбслуживаемыеОбъекты.Подъезд
	|					ИЗ
	|						втВсеОбслуживаемыеОбъекты КАК втВсеОбслуживаемыеОбъекты)
	|				ИЛИ Объект В
	|					(ВЫБРАТЬ
	|						втВсеОбслуживаемыеОбъекты.Помещение
	|					ИЗ
	|						втВсеОбслуживаемыеОбъекты КАК втВсеОбслуживаемыеОбъекты)
	|				ИЛИ Объект В
	|						(ВЫБРАТЬ
	|							втВсеОбслуживаемыеОбъекты.ЛицевойСчет
	|						ИЗ
	|							втВсеОбслуживаемыеОбъекты КАК втВсеОбслуживаемыеОбъекты))
	|				И Счетчик.ВидУслуги В
	|						(ВЫБРАТЬ
	|							втКатегорииИУслуги.Услуга
	|						ИЗ
	|							втКатегорииИУслуги КАК втКатегорииИУслуги)
	|				И ДатаИзменения <= &ДатаНач) КАК КВП_ЗакрепленныеСчетчикиСрезПоследних
	|ГДЕ
	|	(КВП_ЗакрепленныеСчетчикиСрезПоследних.Действует
	|			ИЛИ КВП_ЗакрепленныеСчетчикиСрезПоследних.ПричинаОтключения = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ПричиныОтключенияПриборовУчета.Поверка))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА втОбъектыСоСчетчикамиНачалоПериода.Объект ССЫЛКА Справочник.КВП_Здания
	|			ТОГДА втОбъектыСоСчетчикамиНачалоПериода.Объект
	|		КОГДА втОбъектыСоСчетчикамиНачалоПериода.Объект ССЫЛКА Справочник.КВП_Подъезды
	|			ТОГДА втОбъектыСоСчетчикамиНачалоПериода.Объект.Владелец
	|	КОНЕЦ КАК ДомМногоквартирное,
	|	втОбъектыСоСчетчикамиНачалоПериода.Услуга
	|ПОМЕСТИТЬ втДомаМногоквартирноеНачалоПериода
	|ИЗ
	|	втОбъектыСоСчетчикамиНачалоПериода КАК втОбъектыСоСчетчикамиНачалоПериода
	|ГДЕ
	|	ВЫБОР
	|			КОГДА втОбъектыСоСчетчикамиНачалоПериода.Объект ССЫЛКА Справочник.КВП_Здания
	|				ТОГДА втОбъектыСоСчетчикамиНачалоПериода.Объект.Многоквартирное
	|			КОГДА втОбъектыСоСчетчикамиНачалоПериода.Объект ССЫЛКА Справочник.КВП_Подъезды
	|				ТОГДА втОбъектыСоСчетчикамиНачалоПериода.Объект.Владелец.Многоквартирное
	|		КОНЕЦ
	|
	|СГРУППИРОВАТЬ ПО
	|	втОбъектыСоСчетчикамиНачалоПериода.Услуга,
	|	ВЫБОР
	|		КОГДА втОбъектыСоСчетчикамиНачалоПериода.Объект ССЫЛКА Справочник.КВП_Здания
	|			ТОГДА втОбъектыСоСчетчикамиНачалоПериода.Объект
	|		КОГДА втОбъектыСоСчетчикамиНачалоПериода.Объект ССЫЛКА Справочник.КВП_Подъезды
	|			ТОГДА втОбъектыСоСчетчикамиНачалоПериода.Объект.Владелец
	|	КОНЕЦ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА втОбъектыСоСчетчикамиНачалоПериода.Объект ССЫЛКА Справочник.УПЖКХ_Помещения
	|			ТОГДА втОбъектыСоСчетчикамиНачалоПериода.Объект
	|		КОГДА втОбъектыСоСчетчикамиНачалоПериода.Объект ССЫЛКА Справочник.КВП_ЛицевыеСчета
	|			ТОГДА втОбъектыСоСчетчикамиНачалоПериода.Объект.Адрес
	|	КОНЕЦ КАК КвартираМногоквартирное,
	|	втОбъектыСоСчетчикамиНачалоПериода.Услуга
	|ПОМЕСТИТЬ втКвартирыМногоквартирноеНачалоПериода
	|ИЗ
	|	втОбъектыСоСчетчикамиНачалоПериода КАК втОбъектыСоСчетчикамиНачалоПериода
	|ГДЕ
	|	ВЫБОР
	|			КОГДА втОбъектыСоСчетчикамиНачалоПериода.Объект ССЫЛКА Справочник.УПЖКХ_Помещения
	|				ТОГДА втОбъектыСоСчетчикамиНачалоПериода.Объект.Владелец.Многоквартирное
	|			КОГДА втОбъектыСоСчетчикамиНачалоПериода.Объект ССЫЛКА Справочник.КВП_ЛицевыеСчета
	|				ТОГДА втОбъектыСоСчетчикамиНачалоПериода.Объект.Адрес.Владелец.Многоквартирное
	|		КОНЕЦ
	|
	|СГРУППИРОВАТЬ ПО
	|	втОбъектыСоСчетчикамиНачалоПериода.Услуга,
	|	ВЫБОР
	|		КОГДА втОбъектыСоСчетчикамиНачалоПериода.Объект ССЫЛКА Справочник.УПЖКХ_Помещения
	|			ТОГДА втОбъектыСоСчетчикамиНачалоПериода.Объект
	|		КОГДА втОбъектыСоСчетчикамиНачалоПериода.Объект ССЫЛКА Справочник.КВП_ЛицевыеСчета
	|			ТОГДА втОбъектыСоСчетчикамиНачалоПериода.Объект.Адрес
	|	КОНЕЦ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА втОбъектыСоСчетчикамиНачалоПериода.Объект ССЫЛКА Справочник.КВП_Здания
	|			ТОГДА втОбъектыСоСчетчикамиНачалоПериода.Объект
	|		КОГДА втОбъектыСоСчетчикамиНачалоПериода.Объект ССЫЛКА Справочник.КВП_Подъезды
	|			ТОГДА втОбъектыСоСчетчикамиНачалоПериода.Объект.Владелец
	|		КОГДА втОбъектыСоСчетчикамиНачалоПериода.Объект ССЫЛКА Справочник.УПЖКХ_Помещения
	|			ТОГДА втОбъектыСоСчетчикамиНачалоПериода.Объект.Владелец
	|		КОГДА втОбъектыСоСчетчикамиНачалоПериода.Объект ССЫЛКА Справочник.КВП_ЛицевыеСчета
	|			ТОГДА втОбъектыСоСчетчикамиНачалоПериода.Объект.Адрес.Владелец
	|	КОНЕЦ КАК ДомНеМногоквартирное,
	|	втОбъектыСоСчетчикамиНачалоПериода.Услуга
	|ПОМЕСТИТЬ втДомаНеМногоквартирноеНачалоПериода
	|ИЗ
	|	втОбъектыСоСчетчикамиНачалоПериода КАК втОбъектыСоСчетчикамиНачалоПериода
	|ГДЕ
	|	ВЫБОР
	|			КОГДА втОбъектыСоСчетчикамиНачалоПериода.Объект ССЫЛКА Справочник.КВП_Здания
	|				ТОГДА НЕ втОбъектыСоСчетчикамиНачалоПериода.Объект.Многоквартирное
	|			КОГДА втОбъектыСоСчетчикамиНачалоПериода.Объект ССЫЛКА Справочник.КВП_Подъезды
	|				ТОГДА НЕ втОбъектыСоСчетчикамиНачалоПериода.Объект.Владелец.Многоквартирное
	|			КОГДА втОбъектыСоСчетчикамиНачалоПериода.Объект ССЫЛКА Справочник.УПЖКХ_Помещения
	|				ТОГДА НЕ втОбъектыСоСчетчикамиНачалоПериода.Объект.Владелец.Многоквартирное
	|			КОГДА втОбъектыСоСчетчикамиНачалоПериода.Объект ССЫЛКА Справочник.КВП_ЛицевыеСчета
	|				ТОГДА НЕ втОбъектыСоСчетчикамиНачалоПериода.Объект.Адрес.Владелец.Многоквартирное
	|		КОНЕЦ
	|
	|СГРУППИРОВАТЬ ПО
	|	втОбъектыСоСчетчикамиНачалоПериода.Услуга,
	|	ВЫБОР
	|		КОГДА втОбъектыСоСчетчикамиНачалоПериода.Объект ССЫЛКА Справочник.КВП_Здания
	|			ТОГДА втОбъектыСоСчетчикамиНачалоПериода.Объект
	|		КОГДА втОбъектыСоСчетчикамиНачалоПериода.Объект ССЫЛКА Справочник.КВП_Подъезды
	|			ТОГДА втОбъектыСоСчетчикамиНачалоПериода.Объект.Владелец
	|		КОГДА втОбъектыСоСчетчикамиНачалоПериода.Объект ССЫЛКА Справочник.УПЖКХ_Помещения
	|			ТОГДА втОбъектыСоСчетчикамиНачалоПериода.Объект.Владелец
	|		КОГДА втОбъектыСоСчетчикамиНачалоПериода.Объект ССЫЛКА Справочник.КВП_ЛицевыеСчета
	|			ТОГДА втОбъектыСоСчетчикамиНачалоПериода.Объект.Адрес.Владелец
	|	КОНЕЦ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втКатегорииИУслуги.Категория,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ втДомаМногоквартирноеНаКонецПериода.ДомМногоквартирное) КАК КоличествоДомМногоквартирноеНаКонецПериода,
	|	СУММА(0) КАК КоличествоКвартираМногоквартирноеНаКонецПериода,
	|	СУММА(0) КАК КоличествоДомНеМногоквартирноеНаКонецПериода,
	|	СУММА(0) КАК КоличествоДомМногоквартирноеНачалоПериода,
	|	СУММА(0) КАК КоличествоКвартираМногоквартирноеНачалоПериода,
	|	СУММА(0) КАК КоличествоДомНеМногоквартирноеНачалоПериода
	|ПОМЕСТИТЬ втОбъединениеОбъектовНачалоПериодаНаКонецПериода
	|ИЗ
	|	втКатегорииИУслуги КАК втКатегорииИУслуги
	|		ЛЕВОЕ СОЕДИНЕНИЕ втДомаМногоквартирноеНаКонецПериода КАК втДомаМногоквартирноеНаКонецПериода
	|		ПО втКатегорииИУслуги.Услуга = втДомаМногоквартирноеНаКонецПериода.Услуга
	|
	|СГРУППИРОВАТЬ ПО
	|	втКатегорииИУслуги.Категория
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	втКатегорииИУслуги.Категория,
	|	СУММА(0),
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ втКвартирыМногоквартирноеНаКонецПериода.КвартираМногоквартирное),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0)
	|ИЗ
	|	втКатегорииИУслуги КАК втКатегорииИУслуги
	|		ЛЕВОЕ СОЕДИНЕНИЕ втКвартирыМногоквартирноеНаКонецПериода КАК втКвартирыМногоквартирноеНаКонецПериода
	|		ПО втКатегорииИУслуги.Услуга = втКвартирыМногоквартирноеНаКонецПериода.Услуга
	|
	|СГРУППИРОВАТЬ ПО
	|	втКатегорииИУслуги.Категория
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	втКатегорииИУслуги.Категория,
	|	СУММА(0),
	|	СУММА(0),
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ втДомаНеМногоквартирноеНаКонецПериода.ДомНеМногоквартирное),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0)
	|ИЗ
	|	втКатегорииИУслуги КАК втКатегорииИУслуги
	|		ЛЕВОЕ СОЕДИНЕНИЕ втДомаНеМногоквартирноеНаКонецПериода КАК втДомаНеМногоквартирноеНаКонецПериода
	|		ПО втКатегорииИУслуги.Услуга = втДомаНеМногоквартирноеНаКонецПериода.Услуга
	|
	|СГРУППИРОВАТЬ ПО
	|	втКатегорииИУслуги.Категория
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	втКатегорииИУслуги.Категория,
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ втДомаМногоквартирноеНачалоПериода.ДомМногоквартирное),
	|	СУММА(0),
	|	СУММА(0)
	|ИЗ
	|	втКатегорииИУслуги КАК втКатегорииИУслуги
	|		ЛЕВОЕ СОЕДИНЕНИЕ втДомаМногоквартирноеНачалоПериода КАК втДомаМногоквартирноеНачалоПериода
	|		ПО втКатегорииИУслуги.Услуга = втДомаМногоквартирноеНачалоПериода.Услуга
	|
	|СГРУППИРОВАТЬ ПО
	|	втКатегорииИУслуги.Категория
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	втКатегорииИУслуги.Категория,
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ втКвартирыМногоквартирноеНачалоПериода.КвартираМногоквартирное),
	|	СУММА(0)
	|ИЗ
	|	втКатегорииИУслуги КАК втКатегорииИУслуги
	|		ЛЕВОЕ СОЕДИНЕНИЕ втКвартирыМногоквартирноеНачалоПериода КАК втКвартирыМногоквартирноеНачалоПериода
	|		ПО втКатегорииИУслуги.Услуга = втКвартирыМногоквартирноеНачалоПериода.Услуга
	|
	|СГРУППИРОВАТЬ ПО
	|	втКатегорииИУслуги.Категория
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	втКатегорииИУслуги.Категория,
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ втДомаНеМногоквартирноеНачалоПериода.ДомНеМногоквартирное)
	|ИЗ
	|	втКатегорииИУслуги КАК втКатегорииИУслуги
	|		ЛЕВОЕ СОЕДИНЕНИЕ втДомаНеМногоквартирноеНачалоПериода КАК втДомаНеМногоквартирноеНачалоПериода
	|		ПО втКатегорииИУслуги.Услуга = втДомаНеМногоквартирноеНачалоПериода.Услуга
	|
	|СГРУППИРОВАТЬ ПО
	|	втКатегорииИУслуги.Категория
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втОбъединениеОбъектовЗаПериодНаКонецПериода.Категория,
	|	СУММА(втОбъединениеОбъектовЗаПериодНаКонецПериода.КоличествоДомМногоквартирноеНаКонецПериода) КАК КоличествоДомМногоквартирноеНаКонецПериода,
	|	СУММА(втОбъединениеОбъектовЗаПериодНаКонецПериода.КоличествоКвартираМногоквартирноеНаКонецПериода) КАК КоличествоКвартираМногоквартирноеНаКонецПериода,
	|	СУММА(втОбъединениеОбъектовЗаПериодНаКонецПериода.КоличествоДомНеМногоквартирноеНаКонецПериода) КАК КоличествоДомНеМногоквартирноеНаКонецПериода,
	|	СУММА(втОбъединениеОбъектовЗаПериодНаКонецПериода.КоличествоДомМногоквартирноеНачалоПериода) КАК КоличествоДомМногоквартирноеНачалоПериода,
	|	СУММА(втОбъединениеОбъектовЗаПериодНаКонецПериода.КоличествоКвартираМногоквартирноеНачалоПериода) КАК КоличествоКвартираМногоквартирноеНачалоПериода,
	|	СУММА(втОбъединениеОбъектовЗаПериодНаКонецПериода.КоличествоДомНеМногоквартирноеНачалоПериода) КАК КоличествоДомНеМногоквартирноеНачалоПериода
	|ПОМЕСТИТЬ втКоличествоОбъектовНачалоПериодаКонецПериода
	|ИЗ
	|	втОбъединениеОбъектовНачалоПериодаНаКонецПериода КАК втОбъединениеОбъектовЗаПериодНаКонецПериода
	|
	|СГРУППИРОВАТЬ ПО
	|	втОбъединениеОбъектовЗаПериодНаКонецПериода.Категория
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ втВсеОбслуживаемыеОбъекты.Здание) КАК КоличествоДомМногоквартирноеВсего,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ втВсеОбслуживаемыеОбъекты.Помещение) КАК КоличествоКвартираМногоквартирноеВсего,
	|	0 КАК КоличествоДомНеМногоквартирноеВсего
	|ПОМЕСТИТЬ втКоличествоОбъектовОбъединение
	|ИЗ
	|	втВсеОбслуживаемыеОбъекты КАК втВсеОбслуживаемыеОбъекты
	|ГДЕ
	|	втВсеОбслуживаемыеОбъекты.Многоквартирное
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	0,
	|	0,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ втВсеОбслуживаемыеОбъекты.Здание)
	|ИЗ
	|	втВсеОбслуживаемыеОбъекты КАК втВсеОбслуживаемыеОбъекты
	|ГДЕ
	|	НЕ втВсеОбслуживаемыеОбъекты.Многоквартирное
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(втКоличествоОбъектовОбъединение.КоличествоДомМногоквартирноеВсего) КАК КоличествоДомМногоквартирноеВсего,
	|	СУММА(втКоличествоОбъектовОбъединение.КоличествоКвартираМногоквартирноеВсего) КАК КоличествоКвартираМногоквартирноеВсего,
	|	СУММА(втКоличествоОбъектовОбъединение.КоличествоДомНеМногоквартирноеВсего) КАК КоличествоДомНеМногоквартирноеВсего
	|ПОМЕСТИТЬ втКоличествоВсегоОбъектов
	|ИЗ
	|	втКоличествоОбъектовОбъединение КАК втКоличествоОбъектовОбъединение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втКоличествоОбъектовНачалоПериодаКонецПериода.Категория,
	|	втКоличествоОбъектовНачалоПериодаКонецПериода.КоличествоДомМногоквартирноеНаКонецПериода,
	|	втКоличествоОбъектовНачалоПериодаКонецПериода.КоличествоКвартираМногоквартирноеНаКонецПериода,
	|	втКоличествоОбъектовНачалоПериодаКонецПериода.КоличествоДомНеМногоквартирноеНаКонецПериода,
	|	ВЫБОР
	|		КОГДА втКоличествоОбъектовНачалоПериодаКонецПериода.КоличествоДомМногоквартирноеНаКонецПериода - втКоличествоОбъектовНачалоПериодаКонецПериода.КоличествоДомМногоквартирноеНачалоПериода > 0
	|			ТОГДА втКоличествоОбъектовНачалоПериодаКонецПериода.КоличествоДомМногоквартирноеНаКонецПериода - втКоличествоОбъектовНачалоПериодаКонецПериода.КоличествоДомМногоквартирноеНачалоПериода
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК КоличествоДомМногоквартирноеЗаПериод,
	|	ВЫБОР
	|		КОГДА втКоличествоОбъектовНачалоПериодаКонецПериода.КоличествоКвартираМногоквартирноеНаКонецПериода - втКоличествоОбъектовНачалоПериодаКонецПериода.КоличествоКвартираМногоквартирноеНачалоПериода > 0
	|			ТОГДА втКоличествоОбъектовНачалоПериодаКонецПериода.КоличествоКвартираМногоквартирноеНаКонецПериода - втКоличествоОбъектовНачалоПериодаКонецПериода.КоличествоКвартираМногоквартирноеНачалоПериода
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК КоличествоКвартираМногоквартирноеЗаПериод,
	|	ВЫБОР
	|		КОГДА втКоличествоОбъектовНачалоПериодаКонецПериода.КоличествоДомНеМногоквартирноеНаКонецПериода - втКоличествоОбъектовНачалоПериодаКонецПериода.КоличествоДомНеМногоквартирноеНачалоПериода > 0
	|			ТОГДА втКоличествоОбъектовНачалоПериодаКонецПериода.КоличествоДомНеМногоквартирноеНаКонецПериода - втКоличествоОбъектовНачалоПериодаКонецПериода.КоличествоДомНеМногоквартирноеНачалоПериода
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК КоличествоДомНеМногоквартирноеЗаПериод
	|ПОМЕСТИТЬ втКоличествоОбъектовЗаПериодКонецПериода
	|ИЗ
	|	втКоличествоОбъектовНачалоПериодаКонецПериода КАК втКоличествоОбъектовНачалоПериодаКонецПериода
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втКоличествоОбъектовЗаПериодКонецПериода.Категория,
	|	втКоличествоВсегоОбъектов.КоличествоДомМногоквартирноеВсего - втКоличествоОбъектовЗаПериодКонецПериода.КоличествоДомМногоквартирноеНаКонецПериода КАК КоличествоДомМногоквартирноеНаКонецПериодаНеОборудовано,
	|	втКоличествоВсегоОбъектов.КоличествоКвартираМногоквартирноеВсего - втКоличествоОбъектовЗаПериодКонецПериода.КоличествоКвартираМногоквартирноеНаКонецПериода КАК КоличествоКвартираМногоквартирноеНаКонецПериодаНеОборудовано,
	|	втКоличествоВсегоОбъектов.КоличествоДомНеМногоквартирноеВсего - втКоличествоОбъектовЗаПериодКонецПериода.КоличествоДомНеМногоквартирноеНаКонецПериода КАК КоличествоДомНеМногоквартирноеНаКонецПериодаНеОборудовано,
	|	втКоличествоОбъектовЗаПериодКонецПериода.КоличествоДомМногоквартирноеНаКонецПериода,
	|	втКоличествоОбъектовЗаПериодКонецПериода.КоличествоКвартираМногоквартирноеНаКонецПериода,
	|	втКоличествоОбъектовЗаПериодКонецПериода.КоличествоДомНеМногоквартирноеНаКонецПериода,
	|	втКоличествоОбъектовЗаПериодКонецПериода.КоличествоДомМногоквартирноеЗаПериод,
	|	втКоличествоОбъектовЗаПериодКонецПериода.КоличествоКвартираМногоквартирноеЗаПериод,
	|	втКоличествоОбъектовЗаПериодКонецПериода.КоличествоДомНеМногоквартирноеЗаПериод
	|ИЗ
	|	втКоличествоОбъектовЗаПериодКонецПериода КАК втКоличествоОбъектовЗаПериодКонецПериода,
	|	втКоличествоВсегоОбъектов КАК втКоличествоВсегоОбъектов";
	Запрос.УстановитьПараметр("Организация",      СтруктураРеквизитовФормы.Организация);
	Запрос.УстановитьПараметр("ДатаКон",          СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	Запрос.УстановитьПараметр("ДатаНач",          СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
	Запрос.УстановитьПараметр("КатегорииИУслуги", ТаблицаСоответствия_КатегорийУслуг_С_УслугамиВБазе);
	
	ТаблицаКоличестваОбъектов = Запрос.Выполнить().Выгрузить();
	
	мФормаОтчета = ЭтаФорма.ПолеТабличногоДокументаФормаОтчета;
	
	// Заполняем колонки: пара последних цифр - номер колонки, пара предпоследних - номер строки в колонке №2.
	Для Каждого Строка Из ТаблицаКоличестваОбъектов Цикл
		
		Если Строка.Категория = "ХВС" Тогда
			
			мФормаОтчета.Области.П01000103.Значение = Строка.КоличествоДомМногоквартирноеНаКонецПериодаНеОборудовано;
			мФормаОтчета.Области.П01000104.Значение = Строка.КоличествоДомМногоквартирноеНаКонецПериода;
			мФормаОтчета.Области.П01000105.Значение = Строка.КоличествоДомМногоквартирноеЗаПериод;
			
			мФормаОтчета.Области.П01000603.Значение = Строка.КоличествоКвартираМногоквартирноеНаКонецПериодаНеОборудовано;
			мФормаОтчета.Области.П01000604.Значение = Строка.КоличествоКвартираМногоквартирноеНаКонецПериода;
			мФормаОтчета.Области.П01000605.Значение = Строка.КоличествоКвартираМногоквартирноеЗаПериод;
			
			мФормаОтчета.Области.П01001103.Значение = Строка.КоличествоДомНеМногоквартирноеНаКонецПериодаНеОборудовано;
			мФормаОтчета.Области.П01001104.Значение = Строка.КоличествоДомНеМногоквартирноеНаКонецПериода;
			мФормаОтчета.Области.П01001105.Значение = Строка.КоличествоДомНеМногоквартирноеЗаПериод;
			
		ИначеЕсли Строка.Категория = "ГВС" Тогда
			
			мФормаОтчета.Области.П01000203.Значение = Строка.КоличествоДомМногоквартирноеНаКонецПериодаНеОборудовано;
			мФормаОтчета.Области.П01000204.Значение = Строка.КоличествоДомМногоквартирноеНаКонецПериода;
			мФормаОтчета.Области.П01000205.Значение = Строка.КоличествоДомМногоквартирноеЗаПериод;
			
			мФормаОтчета.Области.П01000703.Значение = Строка.КоличествоКвартираМногоквартирноеНаКонецПериодаНеОборудовано;
			мФормаОтчета.Области.П01000704.Значение = Строка.КоличествоКвартираМногоквартирноеНаКонецПериода;
			мФормаОтчета.Области.П01000705.Значение = Строка.КоличествоКвартираМногоквартирноеЗаПериод;
			
			мФормаОтчета.Области.П01001203.Значение = Строка.КоличествоДомНеМногоквартирноеНаКонецПериодаНеОборудовано;
			мФормаОтчета.Области.П01001204.Значение = Строка.КоличествоДомНеМногоквартирноеНаКонецПериода;
			мФормаОтчета.Области.П01001205.Значение = Строка.КоличествоДомНеМногоквартирноеЗаПериод;
			
		ИначеЕсли Строка.Категория = "Отопление" Тогда
			
			мФормаОтчета.Области.П01000303.Значение = Строка.КоличествоДомМногоквартирноеНаКонецПериодаНеОборудовано;
			мФормаОтчета.Области.П01000304.Значение = Строка.КоличествоДомМногоквартирноеНаКонецПериода;
			мФормаОтчета.Области.П01000305.Значение = Строка.КоличествоДомМногоквартирноеЗаПериод;
			
			мФормаОтчета.Области.П01000803.Значение = Строка.КоличествоКвартираМногоквартирноеНаКонецПериодаНеОборудовано;
			мФормаОтчета.Области.П01000804.Значение = Строка.КоличествоКвартираМногоквартирноеНаКонецПериода;
			мФормаОтчета.Области.П01000805.Значение = Строка.КоличествоКвартираМногоквартирноеЗаПериод;
			
			мФормаОтчета.Области.П01001303.Значение = Строка.КоличествоДомНеМногоквартирноеНаКонецПериодаНеОборудовано;
			мФормаОтчета.Области.П01001304.Значение = Строка.КоличествоДомНеМногоквартирноеНаКонецПериода;
			мФормаОтчета.Области.П01001305.Значение = Строка.КоличествоДомНеМногоквартирноеЗаПериод;
			
		ИначеЕсли Строка.Категория = "ЭлЭн" Тогда
			
			мФормаОтчета.Области.П01000403.Значение = Строка.КоличествоДомМногоквартирноеНаКонецПериодаНеОборудовано;
			мФормаОтчета.Области.П01000404.Значение = Строка.КоличествоДомМногоквартирноеНаКонецПериода;
			мФормаОтчета.Области.П01000405.Значение = Строка.КоличествоДомМногоквартирноеЗаПериод;
			
			мФормаОтчета.Области.П01000903.Значение = Строка.КоличествоКвартираМногоквартирноеНаКонецПериодаНеОборудовано;
			мФормаОтчета.Области.П01000904.Значение = Строка.КоличествоКвартираМногоквартирноеНаКонецПериода;
			мФормаОтчета.Области.П01000905.Значение = Строка.КоличествоКвартираМногоквартирноеЗаПериод;
			
			мФормаОтчета.Области.П01001403.Значение = Строка.КоличествоДомНеМногоквартирноеНаКонецПериодаНеОборудовано;
			мФормаОтчета.Области.П01001404.Значение = Строка.КоличествоДомНеМногоквартирноеНаКонецПериода;
			мФормаОтчета.Области.П01001405.Значение = Строка.КоличествоДомНеМногоквартирноеЗаПериод;
			
		ИначеЕсли Строка.Категория = "Газ" Тогда
			
			мФормаОтчета.Области.П01000503.Значение = Строка.КоличествоДомМногоквартирноеНаКонецПериодаНеОборудовано;
			мФормаОтчета.Области.П01000504.Значение = Строка.КоличествоДомМногоквартирноеНаКонецПериода;
			мФормаОтчета.Области.П01000505.Значение = Строка.КоличествоДомМногоквартирноеЗаПериод;
			
			мФормаОтчета.Области.П01001003.Значение = Строка.КоличествоКвартираМногоквартирноеНаКонецПериодаНеОборудовано;
			мФормаОтчета.Области.П01001004.Значение = Строка.КоличествоКвартираМногоквартирноеНаКонецПериода;
			мФормаОтчета.Области.П01001005.Значение = Строка.КоличествоКвартираМногоквартирноеЗаПериод;
			
			мФормаОтчета.Области.П01001503.Значение = Строка.КоличествоДомНеМногоквартирноеНаКонецПериодаНеОборудовано;
			мФормаОтчета.Области.П01001504.Значение = Строка.КоличествоДомНеМногоквартирноеНаКонецПериода;
			мФормаОтчета.Области.П01001505.Значение = Строка.КоличествоДомНеМногоквартирноеЗаПериод;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьАвто()

&НаСервере
// Процедура проверяет заполнение настройки соответствия категорий услуг с услугами из базы.
//
// Возвращаемое значение:
//  Булево - в случае отсутствия настроек соответствия возвращает ложь.
//
Функция ЗаполненыНастройкиСоответствия()
	
	КоличествоСтрок = СтруктураРеквизитовФормы.мТаблицаСоответствияУслуг.Количество();
	
	Если КоличествоСтрок = 0 Тогда
		
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Не указаны настройки соответствия категорий услуг!" + Символы.ПС +
														 "Для перехода к настройкам нажмите на кнопку ""Настройка"" командной панели.");
		Возврат Ложь; 
		  
	Иначе
		
		Для Каждого СтрокаСоответствия ИЗ СтруктураРеквизитовФормы.мТаблицаСоответствияУслуг Цикл
			
			Если НЕ СтрокаСоответствия.СписокУслуг.Количество() = 0 Тогда
				
				Возврат Истина;
				
			КонецЕсли;
			
		КонецЦикла;
		
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("В настройках соответствия для категорий услуг не указаны услуги соответствия!");
		Возврат Ложь;
		
	КонецЕсли;
	
КонецФункции // ЗаполненыНастройкиСоответствия()

&НаСервере
// Формирует таблицу соответствия категорий услуг и услуг из базы согласно настроек отчета.
//
// Возвращаемое значение:
// 
//  ТаблицаСоответствия_КатегорийУслуг_С_УслугамиВБазе - ТаблицаЗначений - таблица соответствия категорий
//                                                                         услуг и услуг из базы.
//
Функция ПолучитьТаблицуСоответствияКатегорийУслугСУслугамиВБазе()
	
	ТаблицаСоответствия_КатегорийУслуг_С_УслугамиВБазе = Новый ТаблицаЗначений;  
	ТаблицаСоответствия_КатегорийУслуг_С_УслугамиВБазе.Колонки.Добавить("Категория",   ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповСтроки(50));
	ТаблицаСоответствия_КатегорийУслуг_С_УслугамиВБазе.Колонки.Добавить("УслугаВБазе", Новый ОписаниеТипов("СправочникСсылка.КВП_Услуги"));
	
	Для Каждого Строка из СтруктураРеквизитовФормы.мТаблицаСоответствияУслуг Цикл
		
		Для Каждого ЭлементСписка Из Строка.СписокУслуг Цикл
			
			НоваяСтрока = ТаблицаСоответствия_КатегорийУслуг_С_УслугамиВБазе.Добавить();
			
			НоваяСтрока.Категория   = Строка.Категория;
			НоваяСтрока.УслугаВБазе = ЭлементСписка.Значение;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ТаблицаСоответствия_КатегорийУслуг_С_УслугамиВБазе;
	
КонецФункции // ПолучитьТаблицуСоответствияКатегорийУслугСУслугамиВБазе()

#КонецОбласти 
